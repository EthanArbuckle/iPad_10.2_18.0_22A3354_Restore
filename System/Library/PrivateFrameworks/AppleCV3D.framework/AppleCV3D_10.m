void sub_20EC1DE1C(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  v1 = (_QWORD *)(a1 + 8);
  v2 = *(_QWORD **)(a1 + 32);
  if (v2 == v1)
  {
    v3 = 4;
    v2 = v1;
  }
  else
  {
    if (!v2)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20EC1DE7C@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t result;

  v4 = (_QWORD *)operator new();
  *v4 = &off_24C9CBF18;
  v5 = v4 + 1;
  result = *(_QWORD *)(a1 + 32);
  if (!result)
    goto LABEL_4;
  if (result != a1 + 8)
  {
    result = (*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)result + 16))(result, v5);
LABEL_4:
    v4[4] = result;
    *a2 = v4;
    return result;
  }
  v4[4] = v5;
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 24))(result);
  *a2 = v4;
  return result;
}

void sub_20EC1DF1C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BC6398](v1, 0x10A1C400AA0B987);
  _Unwind_Resume(a1);
}

void sub_20EC1DF40()
{
  sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/ChannelInputModel.h", 274, (uint64_t)&unk_21025775D, 0, (uint64_t)"Not implemented", 15, (void (*)(void **))sub_21023DDB0);
  abort();
}

void sub_20EC1DF7C()
{
  sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/ChannelInputModel.h", 280, (uint64_t)&unk_21025775D, 0, (uint64_t)"Not implemented", 15, (void (*)(void **))sub_21023DDB0);
  abort();
}

uint64_t sub_20EC1DFB8()
{
  return 1;
}

uint64_t sub_20EC1DFC4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = *(_QWORD *)(a1 + 32);
  if (!v4)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/ChannelInputModel.h", 301, (uint64_t)"processor_", 10, (uint64_t)&unk_21025775D, 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v4 = *(_QWORD *)(a1 + 32);
    if (!v4)
      sub_20E86D37C();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v4 + 48))(v4, a2);
}

void sub_20EC1E040()
{
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20EC1E054(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24C9CBF80;
  result[1] = v3;
  return result;
}

uint64_t sub_20EC1E088(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24C9CBF80;
  a2[1] = v2;
  return result;
}

double sub_20EC1E0A4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  BOOL v3;
  double result;

  v2 = *(_QWORD *)(a1 + 8);
  if (*(_BYTE *)(v2 + 4937))
    v3 = *(_DWORD *)(a2 + 4) == 7;
  else
    v3 = 0;
  if (v3)
  {
    result = *(double *)(a2 + 48);
    *(double *)(v2 + 8680) = result;
  }
  return result;
}

uint64_t sub_20EC1E0CC(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3vio22slam_engine_node_group13SlamNodeGroup4Impl7ConnectERKNS0_11slam_engine15MapEngineConfi"
                     "gEEUlRKNS0_17data_verification22DataVerificationStatusEE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4cv3d3vio22slam_engine_node_group13SlamNodeGroup4Impl7ConnectERKNS0_11slam_engine15Map"
                                "EngineConfigEEUlRKNS0_17data_verification22DataVerificationStatusEE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3vio22slam_engine_node_group13SlamNodeGroup4Impl7ConnectERKNS0_11slam_engine15MapEngineConfigEEUlRKNS0_17data_verification22DataVerificationStatusEE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3vio22slam_engine_node_group13SlamNodeGroup4Impl7ConnectERKNS0_11slam_engine15MapEngineConfigEEUlRKNS0_17data_verification22DataVerificationStatusEE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20EC1E138()
{
  return &unk_24C9CBFF0;
}

void sub_20EC1E148()
{
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20EC1E15C(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24C9CC010;
  result[1] = v3;
  return result;
}

uint64_t sub_20EC1E190(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24C9CC010;
  a2[1] = v2;
  return result;
}

void sub_20EC1E1AC(uint64_t a1, __CFError ***a2)
{
  uint64_t v2;
  __CFError **v3;
  __CFError **v4;
  _QWORD *v5;
  std::string __p;

  v2 = *(_QWORD *)(a1 + 8);
  if (*(_BYTE *)(v2 + 3768))
  {
    v3 = *a2;
    v4 = a2[1];
    if (*a2 != v4)
    {
      v5 = (_QWORD *)(v2 + 3832);
      do
      {
        sub_20EA670D8(v3, &__p);
        sub_20FDC202C(v5, (const char *)&__p);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        v3 += 2;
      }
      while (v3 != v4);
    }
  }
}

void sub_20EC1E22C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20EC1E248(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3vio22slam_engine_node_group13SlamNodeGroup4Impl7ConnectERKNS0_11slam_engine15MapEngineConfigEEUlRKT_E2_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4cv3d3vio22slam_engine_node_group13SlamNodeGroup4Impl7ConnectERKNS0_11slam_engine15Map"
                                "EngineConfigEEUlRKT_E2_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3vio22slam_engine_node_group13SlamNodeGroup4Impl7ConnectERKNS0_11slam_engine15MapEngineConfigEEUlRKT_E2_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3vio22slam_engine_node_group13SlamNodeGroup4Impl7ConnectERKNS0_11slam_engine15MapEngineConfigEEUlRKT_E2_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20EC1E2B4()
{
  return &unk_24C9CC070;
}

void sub_20EC1E2C4()
{
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20EC1E2D8(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24C9CC090;
  result[1] = v3;
  return result;
}

uint64_t sub_20EC1E30C(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24C9CC090;
  a2[1] = v2;
  return result;
}

uint64_t sub_20EC1E328(uint64_t result, uint64_t a2)
{
  if (!*(_BYTE *)(*(_QWORD *)a2 + 48))
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(result + 8) + 4272) + 88) + 16))(*(_QWORD *)(*(_QWORD *)(result + 8) + 4272) + 88);
  return result;
}

uint64_t sub_20EC1E34C(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3vio22slam_engine_node_group13SlamNodeGroup4Impl7ConnectERKNS0_11slam_engine15MapEngineConfigEEUlRKT_E3_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4cv3d3vio22slam_engine_node_group13SlamNodeGroup4Impl7ConnectERKNS0_11slam_engine15Map"
                                "EngineConfigEEUlRKT_E3_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3vio22slam_engine_node_group13SlamNodeGroup4Impl7ConnectERKNS0_11slam_engine15MapEngineConfigEEUlRKT_E3_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3vio22slam_engine_node_group13SlamNodeGroup4Impl7ConnectERKNS0_11slam_engine15MapEngineConfigEEUlRKT_E3_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20EC1E3B8()
{
  return &unk_24C9CC0F0;
}

_QWORD *sub_20EC1E3C4(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24C9CC618;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void sub_20EC1E404(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24C9CC618;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20EC1E454(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
}

void sub_20EC1E468()
{
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20EC1E47C(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24C9CC110;
  result[1] = v3;
  return result;
}

uint64_t sub_20EC1E4B0(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24C9CC110;
  a2[1] = v2;
  return result;
}

void sub_20EC1E4CC(uint64_t a1, float64x2_t ***a2)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;

  v2 = *(_QWORD *)(a1 + 8);
  sub_20EBF0670(&v6, v2, a2);
  if (!*(_BYTE *)(v6 + 48))
    (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)(*(_QWORD *)(v2 + 4352) + 88) + 16))(*(_QWORD *)(v2 + 4352) + 88, &v6);
  v3 = v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_20EC1E568(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  unint64_t *p_shared_owners;
  unint64_t v12;

  if (a10)
  {
    p_shared_owners = (unint64_t *)&a10->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))a10->__on_zero_shared)(a10);
      std::__shared_weak_count::__release_weak(a10);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20EC1E5AC(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3vio22slam_engine_node_group13SlamNodeGroup4Impl7ConnectERKNS0_11slam_engine15MapEngineConfigEEUlRKT_E4_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4cv3d3vio22slam_engine_node_group13SlamNodeGroup4Impl7ConnectERKNS0_11slam_engine15Map"
                                "EngineConfigEEUlRKT_E4_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3vio22slam_engine_node_group13SlamNodeGroup4Impl7ConnectERKNS0_11slam_engine15MapEngineConfigEEUlRKT_E4_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3vio22slam_engine_node_group13SlamNodeGroup4Impl7ConnectERKNS0_11slam_engine15MapEngineConfigEEUlRKT_E4_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20EC1E618()
{
  return &unk_24C9CC170;
}

_QWORD *sub_20EC1E624(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24C9CCB08;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void sub_20EC1E664(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24C9CCB08;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20EC1E6B4(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
}

void sub_20EC1E6C8()
{
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20EC1E6DC(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24C9CC190;
  result[1] = v3;
  return result;
}

uint64_t sub_20EC1E710(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24C9CC190;
  a2[1] = v2;
  return result;
}

uint64_t sub_20EC1E72C(uint64_t result, uint64_t a2)
{
  if (!*(_BYTE *)(*(_QWORD *)a2 + 48))
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(result + 8) + 4104) + 88) + 16))(*(_QWORD *)(*(_QWORD *)(result + 8) + 4104) + 88);
  return result;
}

uint64_t sub_20EC1E750(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3vio22slam_engine_node_group13SlamNodeGroup4Impl7ConnectERKNS0_11slam_engine15MapEngineConfigEEUlRKT_E5_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4cv3d3vio22slam_engine_node_group13SlamNodeGroup4Impl7ConnectERKNS0_11slam_engine15Map"
                                "EngineConfigEEUlRKT_E5_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3vio22slam_engine_node_group13SlamNodeGroup4Impl7ConnectERKNS0_11slam_engine15MapEngineConfigEEUlRKT_E5_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3vio22slam_engine_node_group13SlamNodeGroup4Impl7ConnectERKNS0_11slam_engine15MapEngineConfigEEUlRKT_E5_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20EC1E7BC()
{
  return &unk_24C9CC1F0;
}

void sub_20EC1E7CC()
{
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20EC1E7E0(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24C9CC210;
  result[1] = v3;
  return result;
}

uint64_t sub_20EC1E814(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24C9CC210;
  a2[1] = v2;
  return result;
}

uint64_t sub_20EC1E830(uint64_t result, uint64_t a2)
{
  if (!*(_BYTE *)(*(_QWORD *)a2 + 48))
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(result + 8) + 4192) + 88) + 16))(*(_QWORD *)(*(_QWORD *)(result + 8) + 4192) + 88);
  return result;
}

uint64_t sub_20EC1E854(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3vio22slam_engine_node_group13SlamNodeGroup4Impl7ConnectERKNS0_11slam_engine15MapEngineConfigEEUlRKT_E6_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4cv3d3vio22slam_engine_node_group13SlamNodeGroup4Impl7ConnectERKNS0_11slam_engine15Map"
                                "EngineConfigEEUlRKT_E6_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3vio22slam_engine_node_group13SlamNodeGroup4Impl7ConnectERKNS0_11slam_engine15MapEngineConfigEEUlRKT_E6_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3vio22slam_engine_node_group13SlamNodeGroup4Impl7ConnectERKNS0_11slam_engine15MapEngineConfigEEUlRKT_E6_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20EC1E8C0()
{
  return &unk_24C9CC270;
}

uint64_t sub_20EC1E8CC(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;

  v2 = *(void **)(a1 + 4112);
  if (v2)
  {
    *(_QWORD *)(a1 + 4120) = v2;
    operator delete(v2);
  }
  v3 = *(void **)(a1 + 4064);
  if (v3)
  {
    *(_QWORD *)(a1 + 4072) = v3;
    operator delete(v3);
  }
  v4 = *(void **)(a1 + 3992);
  if (v4)
  {
    *(_QWORD *)(a1 + 4000) = v4;
    operator delete(v4);
  }
  if (*(_BYTE *)(a1 + 3976))
    sub_20EAF58EC(a1 + 3616);
  if (*(_BYTE *)(a1 + 3608))
    sub_20EAF58EC(a1 + 3248);
  v5 = *(void **)(a1 + 2800);
  if (v5)
  {
    *(_QWORD *)(a1 + 2808) = v5;
    operator delete(v5);
  }
  v6 = *(void **)(a1 + 2752);
  if (v6)
  {
    *(_QWORD *)(a1 + 2760) = v6;
    operator delete(v6);
  }
  v7 = *(void **)(a1 + 2704);
  if (v7)
  {
    *(_QWORD *)(a1 + 2712) = v7;
    operator delete(v7);
  }
  sub_20EAF59D4(a1 + 512);
  if (*(char *)(a1 + 367) < 0)
    operator delete(*(void **)(a1 + 344));
  return a1;
}

uint64_t sub_20EC1E994(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;

  *(_QWORD *)a1 = &off_24C9C9750;
  v2 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 72) = 0;
  if (v2)
  {
    v3 = sub_20EC00A14(v2);
    MEMORY[0x212BC6398](v3, 0x10B2C4085F70915);
  }
  v4 = *(std::__shared_weak_count **)(a1 + 64);
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
      v7 = *(_QWORD *)(a1 + 72);
      *(_QWORD *)(a1 + 72) = 0;
      if (!v7)
        goto LABEL_9;
      goto LABEL_8;
    }
  }
  v7 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 72) = 0;
  if (v7)
  {
LABEL_8:
    v8 = sub_20EC00A14(v7);
    MEMORY[0x212BC6398](v8, 0x10B2C4085F70915);
  }
LABEL_9:
  v9 = *(std::__shared_weak_count **)(a1 + 64);
  if (!v9)
    goto LABEL_13;
  v10 = (unint64_t *)&v9->__shared_owners_;
  do
    v11 = __ldaxr(v10);
  while (__stlxr(v11 - 1, v10));
  if (v11)
  {
LABEL_13:
    if ((*(char *)(a1 + 55) & 0x80000000) == 0)
      goto LABEL_14;
LABEL_19:
    operator delete(*(void **)(a1 + 32));
    if ((*(char *)(a1 + 31) & 0x80000000) == 0)
      return a1;
    goto LABEL_20;
  }
  ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
  std::__shared_weak_count::__release_weak(v9);
  if (*(char *)(a1 + 55) < 0)
    goto LABEL_19;
LABEL_14:
  if ((*(char *)(a1 + 31) & 0x80000000) == 0)
    return a1;
LABEL_20:
  operator delete(*(void **)(a1 + 8));
  return a1;
}

uint64_t sub_20EC1EACC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;

  *(_QWORD *)a1 = &off_24C9C94C0;
  v2 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 72) = 0;
  if (v2)
  {
    v3 = sub_20EBFF708(v2);
    MEMORY[0x212BC6398](v3, 0x10B2C4085F70915);
  }
  v4 = *(std::__shared_weak_count **)(a1 + 64);
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
      v7 = *(_QWORD *)(a1 + 72);
      *(_QWORD *)(a1 + 72) = 0;
      if (!v7)
        goto LABEL_9;
      goto LABEL_8;
    }
  }
  v7 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 72) = 0;
  if (v7)
  {
LABEL_8:
    v8 = sub_20EBFF708(v7);
    MEMORY[0x212BC6398](v8, 0x10B2C4085F70915);
  }
LABEL_9:
  v9 = *(std::__shared_weak_count **)(a1 + 64);
  if (!v9)
    goto LABEL_13;
  v10 = (unint64_t *)&v9->__shared_owners_;
  do
    v11 = __ldaxr(v10);
  while (__stlxr(v11 - 1, v10));
  if (v11)
  {
LABEL_13:
    if ((*(char *)(a1 + 55) & 0x80000000) == 0)
      goto LABEL_14;
LABEL_19:
    operator delete(*(void **)(a1 + 32));
    if ((*(char *)(a1 + 31) & 0x80000000) == 0)
      return a1;
    goto LABEL_20;
  }
  ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
  std::__shared_weak_count::__release_weak(v9);
  if (*(char *)(a1 + 55) < 0)
    goto LABEL_19;
LABEL_14:
  if ((*(char *)(a1 + 31) & 0x80000000) == 0)
    return a1;
LABEL_20:
  operator delete(*(void **)(a1 + 8));
  return a1;
}

uint64_t sub_20EC1EC04(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;

  *(_QWORD *)a1 = &off_24C9CC868;
  v2 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 72) = 0;
  if (v2)
  {
    sub_20EC1EDAC(v2 + 672);
    sub_20EC1EFB8(v2 + 504);
    sub_20EC1F344(v2 + 336);
    sub_20EC1F770(v2 + 168);
    v3 = sub_20E9BA4B8(v2);
    MEMORY[0x212BC6398](v3, 0x10B2C40BB27B6B6);
  }
  v4 = *(std::__shared_weak_count **)(a1 + 64);
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
      v7 = *(_QWORD *)(a1 + 72);
      *(_QWORD *)(a1 + 72) = 0;
      if (!v7)
        goto LABEL_9;
      goto LABEL_8;
    }
  }
  v7 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 72) = 0;
  if (v7)
  {
LABEL_8:
    sub_20EC1EDAC(v7 + 672);
    sub_20EC1EFB8(v7 + 504);
    sub_20EC1F344(v7 + 336);
    sub_20EC1F770(v7 + 168);
    v8 = sub_20E9BA4B8(v7);
    MEMORY[0x212BC6398](v8, 0x10B2C40BB27B6B6);
  }
LABEL_9:
  v9 = *(std::__shared_weak_count **)(a1 + 64);
  if (!v9)
    goto LABEL_13;
  v10 = (unint64_t *)&v9->__shared_owners_;
  do
    v11 = __ldaxr(v10);
  while (__stlxr(v11 - 1, v10));
  if (v11)
  {
LABEL_13:
    if ((*(char *)(a1 + 55) & 0x80000000) == 0)
      goto LABEL_14;
LABEL_19:
    operator delete(*(void **)(a1 + 32));
    if ((*(char *)(a1 + 31) & 0x80000000) == 0)
      return a1;
    goto LABEL_20;
  }
  ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
  std::__shared_weak_count::__release_weak(v9);
  if (*(char *)(a1 + 55) < 0)
    goto LABEL_19;
LABEL_14:
  if ((*(char *)(a1 + 31) & 0x80000000) == 0)
    return a1;
LABEL_20:
  operator delete(*(void **)(a1 + 8));
  return a1;
}

void sub_20EC1ED84(uint64_t a1)
{
  sub_20EC1EC04(a1);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20EC1EDAC(uint64_t a1)
{
  _QWORD *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_weak_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;

  *(_QWORD *)a1 = &off_24C9CCA08;
  v2 = (_QWORD *)(a1 + 72);
  if (*(_QWORD *)(a1 + 72))
  {
    v3 = *(std::__shared_weak_count **)(a1 + 80);
    if (v3)
    {
      p_shared_weak_owners = (unint64_t *)&v3->__shared_weak_owners_;
      do
        v5 = __ldxr(p_shared_weak_owners);
      while (__stxr(v5 + 1, p_shared_weak_owners));
      v6 = *(std::__shared_weak_count **)(a1 + 80);
      *v2 = 0;
      *(_QWORD *)(a1 + 80) = 0;
      if (v6)
      {
        p_shared_owners = (unint64_t *)&v6->__shared_owners_;
        do
          v8 = __ldaxr(p_shared_owners);
        while (__stlxr(v8 - 1, p_shared_owners));
        if (!v8)
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
      }
      while (v3->__shared_owners_ != -1)
        sched_yield();
    }
    else
    {
      *v2 = 0;
      *(_QWORD *)(a1 + 80) = 0;
    }
    v9 = *(uint64_t **)(a1 + 56);
    if (v9)
      sub_210217048(*v9);
    if (v3)
      std::__shared_weak_count::__release_weak(v3);
  }
  *(_QWORD *)(a1 + 144) = &off_24C9B2310;
  v10 = *(std::__shared_weak_count **)(a1 + 160);
  if (v10)
    std::__shared_weak_count::__release_weak(v10);
  *(_QWORD *)(a1 + 120) = &off_24C9CCA38;
  v11 = *(std::__shared_weak_count **)(a1 + 136);
  if (v11)
    std::__shared_weak_count::__release_weak(v11);
  v12 = *(std::__shared_weak_count **)(a1 + 112);
  if (v12)
    std::__shared_weak_count::__release_weak(v12);
  v13 = *(_QWORD *)(a1 + 96);
  *(_QWORD *)(a1 + 88) = &off_24C9B4888;
  *(_QWORD *)(a1 + 96) = 0;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v14 = *(std::__shared_weak_count **)(a1 + 80);
  if (v14)
  {
    v15 = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  v17 = *(std::__shared_weak_count **)(a1 + 64);
  if (!v17)
    goto LABEL_34;
  v18 = (unint64_t *)&v17->__shared_owners_;
  do
    v19 = __ldaxr(v18);
  while (__stlxr(v19 - 1, v18));
  if (v19)
  {
LABEL_34:
    if ((*(char *)(a1 + 55) & 0x80000000) == 0)
      goto LABEL_35;
LABEL_38:
    operator delete(*(void **)(a1 + 32));
    if ((*(char *)(a1 + 31) & 0x80000000) == 0)
      return a1;
    goto LABEL_39;
  }
  ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
  std::__shared_weak_count::__release_weak(v17);
  if (*(char *)(a1 + 55) < 0)
    goto LABEL_38;
LABEL_35:
  if ((*(char *)(a1 + 31) & 0x80000000) == 0)
    return a1;
LABEL_39:
  operator delete(*(void **)(a1 + 8));
  return a1;
}

void sub_20EC1EF90(uint64_t a1)
{
  sub_20EC1EDAC(a1);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20EC1EFB8(uint64_t a1)
{
  _QWORD *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_weak_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;

  *(_QWORD *)a1 = &off_24C9CC9D8;
  v2 = (_QWORD *)(a1 + 72);
  if (*(_QWORD *)(a1 + 72))
  {
    v3 = *(std::__shared_weak_count **)(a1 + 80);
    if (v3)
    {
      p_shared_weak_owners = (unint64_t *)&v3->__shared_weak_owners_;
      do
        v5 = __ldxr(p_shared_weak_owners);
      while (__stxr(v5 + 1, p_shared_weak_owners));
      v6 = *(std::__shared_weak_count **)(a1 + 80);
      *v2 = 0;
      *(_QWORD *)(a1 + 80) = 0;
      if (v6)
      {
        p_shared_owners = (unint64_t *)&v6->__shared_owners_;
        do
          v8 = __ldaxr(p_shared_owners);
        while (__stlxr(v8 - 1, p_shared_owners));
        if (!v8)
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
      }
      while (v3->__shared_owners_ != -1)
        sched_yield();
    }
    else
    {
      *v2 = 0;
      *(_QWORD *)(a1 + 80) = 0;
    }
    v9 = *(uint64_t **)(a1 + 56);
    if (v9)
      sub_210217048(*v9);
    if (v3)
      std::__shared_weak_count::__release_weak(v3);
  }
  *(_QWORD *)(a1 + 144) = &off_24C9B2310;
  v10 = *(std::__shared_weak_count **)(a1 + 160);
  if (v10)
    std::__shared_weak_count::__release_weak(v10);
  *(_QWORD *)(a1 + 120) = &off_24C9CCAD0;
  v11 = *(std::__shared_weak_count **)(a1 + 136);
  if (v11)
    std::__shared_weak_count::__release_weak(v11);
  v12 = *(std::__shared_weak_count **)(a1 + 112);
  if (v12)
    std::__shared_weak_count::__release_weak(v12);
  v13 = *(_QWORD *)(a1 + 96);
  *(_QWORD *)(a1 + 88) = &off_24C9CCB08;
  *(_QWORD *)(a1 + 96) = 0;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v14 = *(std::__shared_weak_count **)(a1 + 80);
  if (v14)
  {
    v15 = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  v17 = *(std::__shared_weak_count **)(a1 + 64);
  if (!v17)
    goto LABEL_34;
  v18 = (unint64_t *)&v17->__shared_owners_;
  do
    v19 = __ldaxr(v18);
  while (__stlxr(v19 - 1, v18));
  if (v19)
  {
LABEL_34:
    if ((*(char *)(a1 + 55) & 0x80000000) == 0)
      goto LABEL_35;
LABEL_38:
    operator delete(*(void **)(a1 + 32));
    if ((*(char *)(a1 + 31) & 0x80000000) == 0)
      return a1;
    goto LABEL_39;
  }
  ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
  std::__shared_weak_count::__release_weak(v17);
  if (*(char *)(a1 + 55) < 0)
    goto LABEL_38;
LABEL_35:
  if ((*(char *)(a1 + 31) & 0x80000000) == 0)
    return a1;
LABEL_39:
  operator delete(*(void **)(a1 + 8));
  return a1;
}

_QWORD *sub_20EC1F19C(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_24C9CCAD0;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_20EC1F1D4(uint64_t a1)
{
  sub_20EC1EFB8(a1);
  JUMPOUT(0x212BC6398);
}

void sub_20EC1F1F8(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_24C9CCAD0;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x212BC6398);
}

void sub_20EC1F240(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  uint64_t (**v12)();
  uint64_t v13;
  uint64_t v14;
  std::__shared_weak_count *v15;

  v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3)
  {
    v5 = std::__shared_weak_count::lock(v3);
    v15 = v5;
    if (v5)
    {
      v6 = v5;
      v7 = *(_QWORD *)(a1 + 8);
      v14 = v7;
      if (v7)
      {
        v8 = *(_QWORD *)(a2 + 8);
        *(_QWORD *)(a2 + 8) = 0;
        v12 = &off_24C9CCB08;
        v13 = v8;
        (*(void (**)(uint64_t, uint64_t (***)()))(*(_QWORD *)v7 + 16))(v7, &v12);
        v9 = v13;
        v12 = &off_24C9CCB08;
        v13 = 0;
        if (v9)
          (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
      }
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v11 = __ldaxr(p_shared_owners);
      while (__stlxr(v11 - 1, p_shared_owners));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
}

void sub_20EC1F314(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  if (a3)
    (*(void (**)(uint64_t))(*(_QWORD *)a3 + 8))(a3);
  sub_20E86665C((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20EC1F344(uint64_t a1)
{
  _QWORD *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_weak_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;

  *(_QWORD *)a1 = &off_24C9CC970;
  v2 = (_QWORD *)(a1 + 72);
  if (*(_QWORD *)(a1 + 72))
  {
    v3 = *(std::__shared_weak_count **)(a1 + 80);
    if (v3)
    {
      p_shared_weak_owners = (unint64_t *)&v3->__shared_weak_owners_;
      do
        v5 = __ldxr(p_shared_weak_owners);
      while (__stxr(v5 + 1, p_shared_weak_owners));
      v6 = *(std::__shared_weak_count **)(a1 + 80);
      *v2 = 0;
      *(_QWORD *)(a1 + 80) = 0;
      if (v6)
      {
        p_shared_owners = (unint64_t *)&v6->__shared_owners_;
        do
          v8 = __ldaxr(p_shared_owners);
        while (__stlxr(v8 - 1, p_shared_owners));
        if (!v8)
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
      }
      while (v3->__shared_owners_ != -1)
        sched_yield();
    }
    else
    {
      *v2 = 0;
      *(_QWORD *)(a1 + 80) = 0;
    }
    v9 = *(uint64_t **)(a1 + 56);
    if (v9)
      sub_210217048(*v9);
    if (v3)
      std::__shared_weak_count::__release_weak(v3);
  }
  *(_QWORD *)(a1 + 144) = &off_24C9B2310;
  v10 = *(std::__shared_weak_count **)(a1 + 160);
  if (v10)
    std::__shared_weak_count::__release_weak(v10);
  *(_QWORD *)(a1 + 120) = &off_24C9CC9A0;
  v11 = *(std::__shared_weak_count **)(a1 + 136);
  if (v11)
    std::__shared_weak_count::__release_weak(v11);
  v12 = *(std::__shared_weak_count **)(a1 + 112);
  if (v12)
    std::__shared_weak_count::__release_weak(v12);
  v13 = *(_QWORD *)(a1 + 96);
  *(_QWORD *)(a1 + 88) = &off_24C9CC938;
  *(_QWORD *)(a1 + 96) = 0;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v14 = *(std::__shared_weak_count **)(a1 + 80);
  if (v14)
  {
    v15 = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  v17 = *(std::__shared_weak_count **)(a1 + 64);
  if (!v17)
    goto LABEL_34;
  v18 = (unint64_t *)&v17->__shared_owners_;
  do
    v19 = __ldaxr(v18);
  while (__stlxr(v19 - 1, v18));
  if (v19)
  {
LABEL_34:
    if ((*(char *)(a1 + 55) & 0x80000000) == 0)
      goto LABEL_35;
LABEL_38:
    operator delete(*(void **)(a1 + 32));
    if ((*(char *)(a1 + 31) & 0x80000000) == 0)
      return a1;
    goto LABEL_39;
  }
  ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
  std::__shared_weak_count::__release_weak(v17);
  if (*(char *)(a1 + 55) < 0)
    goto LABEL_38;
LABEL_35:
  if ((*(char *)(a1 + 31) & 0x80000000) == 0)
    return a1;
LABEL_39:
  operator delete(*(void **)(a1 + 8));
  return a1;
}

_QWORD *sub_20EC1F528(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_24C9CC9A0;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

_QWORD *sub_20EC1F560(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24C9CC938;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void sub_20EC1F5A0(uint64_t a1)
{
  sub_20EC1F344(a1);
  JUMPOUT(0x212BC6398);
}

void sub_20EC1F5C4(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_24C9CC9A0;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x212BC6398);
}

void sub_20EC1F60C(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  uint64_t (**v12)();
  uint64_t v13;
  uint64_t v14;
  std::__shared_weak_count *v15;

  v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3)
  {
    v5 = std::__shared_weak_count::lock(v3);
    v15 = v5;
    if (v5)
    {
      v6 = v5;
      v7 = *(_QWORD *)(a1 + 8);
      v14 = v7;
      if (v7)
      {
        v8 = *(_QWORD *)(a2 + 8);
        *(_QWORD *)(a2 + 8) = 0;
        v12 = &off_24C9B2630;
        v13 = v8;
        (*(void (**)(uint64_t, uint64_t (***)()))(*(_QWORD *)v7 + 16))(v7, &v12);
        v9 = v13;
        v12 = &off_24C9B2630;
        v13 = 0;
        if (v9)
          (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
      }
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v11 = __ldaxr(p_shared_owners);
      while (__stlxr(v11 - 1, p_shared_owners));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
}

void sub_20EC1F6E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  if (a3)
    (*(void (**)(uint64_t))(*(_QWORD *)a3 + 8))(a3);
  sub_20E86665C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20EC1F70C(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24C9CC938;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20EC1F75C(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
}

uint64_t sub_20EC1F770(uint64_t a1)
{
  _QWORD *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_weak_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;

  *(_QWORD *)a1 = &off_24C9CC898;
  v2 = (_QWORD *)(a1 + 72);
  if (*(_QWORD *)(a1 + 72))
  {
    v3 = *(std::__shared_weak_count **)(a1 + 80);
    if (v3)
    {
      p_shared_weak_owners = (unint64_t *)&v3->__shared_weak_owners_;
      do
        v5 = __ldxr(p_shared_weak_owners);
      while (__stxr(v5 + 1, p_shared_weak_owners));
      v6 = *(std::__shared_weak_count **)(a1 + 80);
      *v2 = 0;
      *(_QWORD *)(a1 + 80) = 0;
      if (v6)
      {
        p_shared_owners = (unint64_t *)&v6->__shared_owners_;
        do
          v8 = __ldaxr(p_shared_owners);
        while (__stlxr(v8 - 1, p_shared_owners));
        if (!v8)
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
      }
      while (v3->__shared_owners_ != -1)
        sched_yield();
    }
    else
    {
      *v2 = 0;
      *(_QWORD *)(a1 + 80) = 0;
    }
    v9 = *(uint64_t **)(a1 + 56);
    if (v9)
      sub_210217048(*v9);
    if (v3)
      std::__shared_weak_count::__release_weak(v3);
  }
  *(_QWORD *)(a1 + 144) = &off_24C9B2310;
  v10 = *(std::__shared_weak_count **)(a1 + 160);
  if (v10)
    std::__shared_weak_count::__release_weak(v10);
  *(_QWORD *)(a1 + 120) = &off_24C9CC900;
  v11 = *(std::__shared_weak_count **)(a1 + 136);
  if (v11)
    std::__shared_weak_count::__release_weak(v11);
  v12 = *(std::__shared_weak_count **)(a1 + 112);
  if (v12)
    std::__shared_weak_count::__release_weak(v12);
  v13 = *(_QWORD *)(a1 + 96);
  *(_QWORD *)(a1 + 88) = &off_24C9CC8C8;
  *(_QWORD *)(a1 + 96) = 0;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v14 = *(std::__shared_weak_count **)(a1 + 80);
  if (v14)
  {
    v15 = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  v17 = *(std::__shared_weak_count **)(a1 + 64);
  if (!v17)
    goto LABEL_34;
  v18 = (unint64_t *)&v17->__shared_owners_;
  do
    v19 = __ldaxr(v18);
  while (__stlxr(v19 - 1, v18));
  if (v19)
  {
LABEL_34:
    if ((*(char *)(a1 + 55) & 0x80000000) == 0)
      goto LABEL_35;
LABEL_38:
    operator delete(*(void **)(a1 + 32));
    if ((*(char *)(a1 + 31) & 0x80000000) == 0)
      return a1;
    goto LABEL_39;
  }
  ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
  std::__shared_weak_count::__release_weak(v17);
  if (*(char *)(a1 + 55) < 0)
    goto LABEL_38;
LABEL_35:
  if ((*(char *)(a1 + 31) & 0x80000000) == 0)
    return a1;
LABEL_39:
  operator delete(*(void **)(a1 + 8));
  return a1;
}

_QWORD *sub_20EC1F954(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_24C9CC900;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

_QWORD *sub_20EC1F98C(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24C9CC8C8;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void sub_20EC1F9CC(uint64_t a1)
{
  sub_20EC1F770(a1);
  JUMPOUT(0x212BC6398);
}

void sub_20EC1F9F0(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_24C9CC900;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x212BC6398);
}

void sub_20EC1FA38(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  uint64_t (**v12)();
  uint64_t v13;
  uint64_t v14;
  std::__shared_weak_count *v15;

  v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3)
  {
    v5 = std::__shared_weak_count::lock(v3);
    v15 = v5;
    if (v5)
    {
      v6 = v5;
      v7 = *(_QWORD *)(a1 + 8);
      v14 = v7;
      if (v7)
      {
        v8 = *(_QWORD *)(a2 + 8);
        *(_QWORD *)(a2 + 8) = 0;
        v12 = &off_24C9CC938;
        v13 = v8;
        (*(void (**)(uint64_t, uint64_t (***)()))(*(_QWORD *)v7 + 16))(v7, &v12);
        v9 = v13;
        v12 = &off_24C9CC938;
        v13 = 0;
        if (v9)
          (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
      }
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v11 = __ldaxr(p_shared_owners);
      while (__stlxr(v11 - 1, p_shared_owners));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
}

void sub_20EC1FB0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  if (a3)
    (*(void (**)(uint64_t))(*(_QWORD *)a3 + 8))(a3);
  sub_20E86665C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20EC1FB38(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24C9CC8C8;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20EC1FB88(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
}

uint64_t sub_20EC1FB98(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;

  *(_QWORD *)a1 = &off_24C9C9198;
  v2 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 72) = 0;
  if (v2)
  {
    v3 = sub_20EBFDE1C(v2);
    MEMORY[0x212BC6398](v3, 0x10B2C4085F70915);
  }
  v4 = *(std::__shared_weak_count **)(a1 + 64);
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
      v7 = *(_QWORD *)(a1 + 72);
      *(_QWORD *)(a1 + 72) = 0;
      if (!v7)
        goto LABEL_9;
      goto LABEL_8;
    }
  }
  v7 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 72) = 0;
  if (v7)
  {
LABEL_8:
    v8 = sub_20EBFDE1C(v7);
    MEMORY[0x212BC6398](v8, 0x10B2C4085F70915);
  }
LABEL_9:
  v9 = *(std::__shared_weak_count **)(a1 + 64);
  if (!v9)
    goto LABEL_13;
  v10 = (unint64_t *)&v9->__shared_owners_;
  do
    v11 = __ldaxr(v10);
  while (__stlxr(v11 - 1, v10));
  if (v11)
  {
LABEL_13:
    if ((*(char *)(a1 + 55) & 0x80000000) == 0)
      goto LABEL_14;
LABEL_19:
    operator delete(*(void **)(a1 + 32));
    if ((*(char *)(a1 + 31) & 0x80000000) == 0)
      return a1;
    goto LABEL_20;
  }
  ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
  std::__shared_weak_count::__release_weak(v9);
  if (*(char *)(a1 + 55) < 0)
    goto LABEL_19;
LABEL_14:
  if ((*(char *)(a1 + 31) & 0x80000000) == 0)
    return a1;
LABEL_20:
  operator delete(*(void **)(a1 + 8));
  return a1;
}

uint64_t sub_20EC1FCD0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;

  *(_QWORD *)a1 = &off_24C9C8E88;
  v2 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 72) = 0;
  if (v2)
  {
    v3 = sub_20EBFCAF4(v2);
    MEMORY[0x212BC6398](v3, 0x10B2C4085F70915);
  }
  v4 = *(std::__shared_weak_count **)(a1 + 64);
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
      v7 = *(_QWORD *)(a1 + 72);
      *(_QWORD *)(a1 + 72) = 0;
      if (!v7)
        goto LABEL_9;
      goto LABEL_8;
    }
  }
  v7 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 72) = 0;
  if (v7)
  {
LABEL_8:
    v8 = sub_20EBFCAF4(v7);
    MEMORY[0x212BC6398](v8, 0x10B2C4085F70915);
  }
LABEL_9:
  v9 = *(std::__shared_weak_count **)(a1 + 64);
  if (!v9)
    goto LABEL_13;
  v10 = (unint64_t *)&v9->__shared_owners_;
  do
    v11 = __ldaxr(v10);
  while (__stlxr(v11 - 1, v10));
  if (v11)
  {
LABEL_13:
    if ((*(char *)(a1 + 55) & 0x80000000) == 0)
      goto LABEL_14;
LABEL_19:
    operator delete(*(void **)(a1 + 32));
    if ((*(char *)(a1 + 31) & 0x80000000) == 0)
      return a1;
    goto LABEL_20;
  }
  ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
  std::__shared_weak_count::__release_weak(v9);
  if (*(char *)(a1 + 55) < 0)
    goto LABEL_19;
LABEL_14:
  if ((*(char *)(a1 + 31) & 0x80000000) == 0)
    return a1;
LABEL_20:
  operator delete(*(void **)(a1 + 8));
  return a1;
}

uint64_t sub_20EC1FE08(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;

  *(_QWORD *)a1 = &off_24C9C8BB0;
  v2 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 72) = 0;
  if (v2)
  {
    v3 = sub_20EBFB7C8(v2);
    MEMORY[0x212BC6398](v3, 0x10B2C4085F70915);
  }
  v4 = *(std::__shared_weak_count **)(a1 + 64);
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
      v7 = *(_QWORD *)(a1 + 72);
      *(_QWORD *)(a1 + 72) = 0;
      if (!v7)
        goto LABEL_9;
      goto LABEL_8;
    }
  }
  v7 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 72) = 0;
  if (v7)
  {
LABEL_8:
    v8 = sub_20EBFB7C8(v7);
    MEMORY[0x212BC6398](v8, 0x10B2C4085F70915);
  }
LABEL_9:
  v9 = *(std::__shared_weak_count **)(a1 + 64);
  if (!v9)
    goto LABEL_13;
  v10 = (unint64_t *)&v9->__shared_owners_;
  do
    v11 = __ldaxr(v10);
  while (__stlxr(v11 - 1, v10));
  if (v11)
  {
LABEL_13:
    if ((*(char *)(a1 + 55) & 0x80000000) == 0)
      goto LABEL_14;
LABEL_19:
    operator delete(*(void **)(a1 + 32));
    if ((*(char *)(a1 + 31) & 0x80000000) == 0)
      return a1;
    goto LABEL_20;
  }
  ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
  std::__shared_weak_count::__release_weak(v9);
  if (*(char *)(a1 + 55) < 0)
    goto LABEL_19;
LABEL_14:
  if ((*(char *)(a1 + 31) & 0x80000000) == 0)
    return a1;
LABEL_20:
  operator delete(*(void **)(a1 + 8));
  return a1;
}

uint64_t sub_20EC1FF40(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;

  *(_QWORD *)a1 = &off_24C9C88D8;
  v2 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 72) = 0;
  if (v2)
  {
    v3 = sub_20EBFA424(v2);
    MEMORY[0x212BC6398](v3, 0x10B2C4085F70915);
  }
  v4 = *(std::__shared_weak_count **)(a1 + 64);
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
      v7 = *(_QWORD *)(a1 + 72);
      *(_QWORD *)(a1 + 72) = 0;
      if (!v7)
        goto LABEL_9;
      goto LABEL_8;
    }
  }
  v7 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 72) = 0;
  if (v7)
  {
LABEL_8:
    v8 = sub_20EBFA424(v7);
    MEMORY[0x212BC6398](v8, 0x10B2C4085F70915);
  }
LABEL_9:
  v9 = *(std::__shared_weak_count **)(a1 + 64);
  if (!v9)
    goto LABEL_13;
  v10 = (unint64_t *)&v9->__shared_owners_;
  do
    v11 = __ldaxr(v10);
  while (__stlxr(v11 - 1, v10));
  if (v11)
  {
LABEL_13:
    if ((*(char *)(a1 + 55) & 0x80000000) == 0)
      goto LABEL_14;
LABEL_19:
    operator delete(*(void **)(a1 + 32));
    if ((*(char *)(a1 + 31) & 0x80000000) == 0)
      return a1;
    goto LABEL_20;
  }
  ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
  std::__shared_weak_count::__release_weak(v9);
  if (*(char *)(a1 + 55) < 0)
    goto LABEL_19;
LABEL_14:
  if ((*(char *)(a1 + 31) & 0x80000000) == 0)
    return a1;
LABEL_20:
  operator delete(*(void **)(a1 + 8));
  return a1;
}

uint64_t sub_20EC20078(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  void *v20;
  _QWORD *v21;
  _QWORD *v22;
  void *v23;

  if (result)
  {
    v1 = result;
    sub_20E869418(result + 8800);
    v2 = *(std::__shared_weak_count **)(v1 + 8792);
    if (v2)
    {
      p_shared_owners = (unint64_t *)&v2->__shared_owners_;
      do
        v4 = __ldaxr(p_shared_owners);
      while (__stlxr(v4 - 1, p_shared_owners));
      if (!v4)
      {
        ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
        std::__shared_weak_count::__release_weak(v2);
      }
    }
    sub_20EC1E8CC(v1 + 4520);
    sub_20EC1E994(v1 + 4440);
    sub_20EC1EACC(v1 + 4360);
    sub_20EC1EC04(v1 + 4280);
    sub_20EC1FB98(v1 + 4200);
    sub_20EC1FCD0(v1 + 4120);
    v5 = *(_QWORD *)(v1 + 4112);
    *(_QWORD *)(v1 + 4112) = 0;
    if (v5)
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
    sub_20E9BA69C(v1 + 4032);
    sub_20EC1FE08(v1 + 3952);
    v6 = *(_QWORD *)(v1 + 3944);
    *(_QWORD *)(v1 + 3944) = 0;
    if (v6)
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
    sub_20EC1FF40(v1 + 3864);
    v7 = *(std::__shared_weak_count **)(v1 + 3840);
    if (!v7)
      goto LABEL_15;
    v8 = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
      if ((*(char *)(v1 + 3799) & 0x80000000) == 0)
        goto LABEL_17;
    }
    else
    {
LABEL_15:
      if ((*(char *)(v1 + 3799) & 0x80000000) == 0)
      {
LABEL_17:
        v10 = *(std::__shared_weak_count **)(v1 + 3760);
        if (v10)
        {
          v11 = (unint64_t *)&v10->__shared_owners_;
          do
            v12 = __ldaxr(v11);
          while (__stlxr(v12 - 1, v11));
          if (!v12)
          {
            ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
            std::__shared_weak_count::__release_weak(v10);
          }
        }
        v13 = *(_QWORD *)(v1 + 3744);
        *(_QWORD *)(v1 + 3744) = 0;
        if (v13)
          (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
        v14 = *(_QWORD *)(v1 + 3736);
        *(_QWORD *)(v1 + 3736) = 0;
        if (v14)
          (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
        v15 = *(_QWORD *)(v1 + 3728);
        *(_QWORD *)(v1 + 3728) = 0;
        if (v15)
          (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
        v16 = *(_QWORD *)(v1 + 3720);
        *(_QWORD *)(v1 + 3720) = 0;
        if (v16)
          (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
        v17 = *(_QWORD *)(v1 + 3712);
        *(_QWORD *)(v1 + 3712) = 0;
        if (v17)
          (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
        v18 = *(_QWORD **)(v1 + 3344);
        if (v18)
        {
          do
          {
            v19 = (_QWORD *)*v18;
            operator delete(v18);
            v18 = v19;
          }
          while (v19);
        }
        v20 = *(void **)(v1 + 3328);
        *(_QWORD *)(v1 + 3328) = 0;
        if (v20)
          operator delete(v20);
        sub_20E86A810(v1 + 864);
        sub_20E86872C(v1 + 752, *(_QWORD **)(v1 + 760));
        v21 = *(_QWORD **)(v1 + 16);
        if (v21)
        {
          do
          {
            v22 = (_QWORD *)*v21;
            operator delete(v21);
            v21 = v22;
          }
          while (v22);
        }
        v23 = *(void **)v1;
        *(_QWORD *)v1 = 0;
        if (v23)
          operator delete(v23);
        JUMPOUT(0x212BC6398);
      }
    }
    operator delete(*(void **)(v1 + 3776));
    goto LABEL_17;
  }
  return result;
}

void sub_20EC202EC(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  __int128 v15;
  __int128 v16;

  sub_210218050("CAPIFwdScheduler", 0x10uLL, a1, 1, &v16);
  v15 = v16;
  v16 = 0uLL;
  v3 = (std::__shared_weak_count *)operator new(0x190uLL);
  v3->__shared_owners_ = 0;
  v3->__shared_weak_owners_ = 0;
  v3->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9CCE50;
  v13 = sub_20EC204CC((uint64_t)&v3[1]);
  v14 = v3;
  sub_20EC23FD8(a2, (uint64_t)&v15, &v13);
  v4 = v14;
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  v7 = (std::__shared_weak_count *)*((_QWORD *)&v15 + 1);
  if (*((_QWORD *)&v15 + 1))
  {
    v8 = (unint64_t *)(*((_QWORD *)&v15 + 1) + 8);
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  v10 = (std::__shared_weak_count *)*((_QWORD *)&v16 + 1);
  if (*((_QWORD *)&v16 + 1))
  {
    v11 = (unint64_t *)(*((_QWORD *)&v16 + 1) + 8);
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
}

void sub_20EC2045C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13)
{
  uint64_t v13;

  sub_20E86665C((uint64_t)&a11);
  sub_20E86665C((uint64_t)&a9);
  sub_20E86665C((uint64_t)&a13);
  sub_20E86665C(v13 - 32);
  _Unwind_Resume(a1);
}

void sub_20EC20488(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  std::__shared_weak_count *v13;
  uint64_t v14;
  void *v16;

  std::__shared_weak_count::~__shared_weak_count(v13);
  operator delete(v16);
  sub_20E86665C((uint64_t)&a13);
  sub_20E86665C(v14 - 32);
  _Unwind_Resume(a1);
}

void sub_20EC204B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v5;
  va_list va;

  va_start(va, a5);
  sub_20E86665C((uint64_t)va);
  sub_20E86665C(v5 - 32);
  _Unwind_Resume(a1);
}

uint64_t sub_20EC204CC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void **v6;
  char *v7;
  char *v8;
  char *v9;
  void **v10;
  char *v11;
  char *v12;
  void **v13;
  char *v14;
  char *v15;
  void **v16;
  char *v17;
  char *v18;
  void **v19;
  char *v20;
  void **v21;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  *(_OWORD *)(a1 + 8) = 0u;
  v2 = a1 + 8;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  v3 = a1 + 64;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  v4 = a1 + 120;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  v5 = a1 + 176;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 232) = 0u;
  v6 = (void **)(a1 + 232);
  *(_OWORD *)(a1 + 248) = 0u;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 280) = 0u;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_QWORD *)a1 = &off_24C9CCB40;
  *(_QWORD *)(a1 + 56) = &unk_24C9CCB88;
  *(_QWORD *)(a1 + 112) = &unk_24C9CCBB0;
  *(_QWORD *)(a1 + 168) = &unk_24C9CCBD8;
  *(_QWORD *)(a1 + 224) = &unk_24C9CCC00;
  *(_QWORD *)(a1 + 328) = 1;
  *(_OWORD *)(a1 + 336) = 0u;
  *(_OWORD *)(a1 + 352) = 0u;
  *(_DWORD *)(a1 + 368) = 1065353216;
  *(_QWORD *)&v23 = *(_QWORD *)"lback Node";
  WORD4(v23) = 25956;
  v7 = (char *)operator new(0x40uLL);
  strcpy(v7, "Calls all of the CAPI callbacks with data from the SLAM graph");
  qmemcpy((void *)(a1 + 280), "CAPI Callback No", 16);
  *(_WORD *)(a1 + 296) = WORD4(v23);
  *(_BYTE *)(a1 + 303) = 18;
  *(_BYTE *)(a1 + 298) = 0;
  sub_20E867BF8((_QWORD *)(a1 + 304), v7, 0x3DuLL);
  operator delete(v7);
  v8 = (char *)operator new(0x20uLL);
  strcpy(v8, "CAPI Input Metadata Channel");
  v9 = (char *)operator new(0x48uLL);
  sub_20E860C04(&v23, v8, 0x1BuLL);
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)v2);
  *(_OWORD *)v2 = v23;
  *(_QWORD *)(v2 + 16) = v24;
  sub_20E860C04(&v23, v9, 0x40uLL);
  v10 = (void **)(a1 + 32);
  if (*(char *)(a1 + 55) < 0)
    operator delete(*v10);
  *(_OWORD *)v10 = v23;
  *(_QWORD *)(a1 + 48) = v24;
  operator delete(v9);
  operator delete(v8);
  v11 = (char *)operator new(0x20uLL);
  strcpy(v11, "CAPI Output Anchor Added");
  v12 = (char *)operator new(0x30uLL);
  strcpy(v12, "Forwards the anchor added results to the CAPI");
  sub_20E860C04(&v23, v11, 0x18uLL);
  if (*(char *)(a1 + 199) < 0)
    operator delete(*(void **)v5);
  *(_OWORD *)v5 = v23;
  *(_QWORD *)(v5 + 16) = v24;
  sub_20E860C04(&v23, v12, 0x2DuLL);
  v13 = (void **)(a1 + 200);
  if (*(char *)(a1 + 223) < 0)
    operator delete(*v13);
  *(_OWORD *)v13 = v23;
  *(_QWORD *)(a1 + 216) = v24;
  operator delete(v12);
  operator delete(v11);
  v14 = (char *)operator new(0x20uLL);
  strcpy(v14, "Input Register New State Block");
  v15 = (char *)operator new(0x48uLL);
  strcpy(v15, "Registers the callback to be called when SLAM produces a new state");
  sub_20E860C04(&v23, v14, 0x1EuLL);
  if (*(char *)(a1 + 87) < 0)
    operator delete(*(void **)v3);
  *(_OWORD *)v3 = v23;
  *(_QWORD *)(v3 + 16) = v24;
  sub_20E860C04(&v23, v15, 0x42uLL);
  v16 = (void **)(a1 + 88);
  if (*(char *)(a1 + 111) < 0)
    operator delete(*v16);
  *(_OWORD *)v16 = v23;
  *(_QWORD *)(a1 + 104) = v24;
  operator delete(v15);
  operator delete(v14);
  v17 = (char *)operator new(0x28uLL);
  strcpy(v17, "Input Deregister New State Block");
  v18 = (char *)operator new(0x50uLL);
  strcpy(v18, "Deregister the callback from being called when SLAM produces a new state");
  sub_20E860C04(&v23, v17, 0x20uLL);
  if (*(char *)(a1 + 143) < 0)
    operator delete(*(void **)v4);
  *(_OWORD *)v4 = v23;
  *(_QWORD *)(v4 + 16) = v24;
  sub_20E860C04(&v23, v18, 0x48uLL);
  v19 = (void **)(a1 + 144);
  if (*(char *)(a1 + 167) < 0)
    operator delete(*v19);
  *(_OWORD *)v19 = v23;
  *(_QWORD *)(a1 + 160) = v24;
  operator delete(v18);
  operator delete(v17);
  v20 = (char *)operator new(0x20uLL);
  strcpy(v20, "Forwards the errors to the CAPI");
  if (*(char *)(a1 + 255) < 0)
    operator delete(*v6);
  strcpy((char *)(a1 + 232), "CAPI Output Error");
  *(_BYTE *)(a1 + 255) = 17;
  sub_20E860C04(&v23, v20, 0x1FuLL);
  v21 = (void **)(a1 + 256);
  if (*(char *)(a1 + 279) < 0)
    operator delete(*v21);
  *(_OWORD *)v21 = v23;
  *(_QWORD *)(a1 + 272) = v24;
  operator delete(v20);
  return a1;
}

void sub_20EC20A14(_Unwind_Exception *a1)
{
  uint64_t v1;
  void *v2;

  operator delete(v2);
  sub_20EC20A9C(v1 + 328);
  sub_20EC20B2C(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20EC20A9C(uint64_t a1)
{
  _QWORD *v2;
  void *v3;
  _QWORD *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;

  v2 = *(_QWORD **)(a1 + 24);
  while (v2)
  {
    v5 = v2;
    v2 = (_QWORD *)*v2;
    v6 = (std::__shared_weak_count *)v5[4];
    if (v6)
    {
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
    operator delete(v5);
  }
  v3 = *(void **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  if (v3)
    operator delete(v3);
  return a1;
}

uint64_t sub_20EC20B2C(uint64_t a1)
{
  *(_QWORD *)a1 = off_24C9CCCE8;
  *(_QWORD *)(a1 + 56) = &unk_24C9CCD10;
  *(_QWORD *)(a1 + 112) = &unk_24C9CCD38;
  *(_QWORD *)(a1 + 168) = &unk_24C9CCD60;
  *(_QWORD *)(a1 + 224) = &unk_24C9CCD88;
  if (*(char *)(a1 + 327) < 0)
  {
    operator delete(*(void **)(a1 + 304));
    if ((*(char *)(a1 + 303) & 0x80000000) == 0)
    {
LABEL_3:
      *(_QWORD *)(a1 + 224) = off_24C9CCE28;
      if ((*(char *)(a1 + 279) & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_16;
    }
  }
  else if ((*(char *)(a1 + 303) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*(void **)(a1 + 280));
  *(_QWORD *)(a1 + 224) = off_24C9CCE28;
  if ((*(char *)(a1 + 279) & 0x80000000) == 0)
  {
LABEL_4:
    if ((*(char *)(a1 + 255) & 0x80000000) == 0)
      goto LABEL_5;
    goto LABEL_17;
  }
LABEL_16:
  operator delete(*(void **)(a1 + 256));
  if ((*(char *)(a1 + 255) & 0x80000000) == 0)
  {
LABEL_5:
    *(_QWORD *)(a1 + 168) = off_24C9CCE00;
    if ((*(char *)(a1 + 223) & 0x80000000) == 0)
      goto LABEL_6;
    goto LABEL_18;
  }
LABEL_17:
  operator delete(*(void **)(a1 + 232));
  *(_QWORD *)(a1 + 168) = off_24C9CCE00;
  if ((*(char *)(a1 + 223) & 0x80000000) == 0)
  {
LABEL_6:
    if ((*(char *)(a1 + 199) & 0x80000000) == 0)
      goto LABEL_7;
    goto LABEL_19;
  }
LABEL_18:
  operator delete(*(void **)(a1 + 200));
  if ((*(char *)(a1 + 199) & 0x80000000) == 0)
  {
LABEL_7:
    *(_QWORD *)(a1 + 112) = off_24C9CCDD8;
    if ((*(char *)(a1 + 167) & 0x80000000) == 0)
      goto LABEL_8;
    goto LABEL_20;
  }
LABEL_19:
  operator delete(*(void **)(a1 + 176));
  *(_QWORD *)(a1 + 112) = off_24C9CCDD8;
  if ((*(char *)(a1 + 167) & 0x80000000) == 0)
  {
LABEL_8:
    if ((*(char *)(a1 + 143) & 0x80000000) == 0)
      goto LABEL_9;
    goto LABEL_21;
  }
LABEL_20:
  operator delete(*(void **)(a1 + 144));
  if ((*(char *)(a1 + 143) & 0x80000000) == 0)
  {
LABEL_9:
    *(_QWORD *)(a1 + 56) = off_24C9CCDB0;
    if ((*(char *)(a1 + 111) & 0x80000000) == 0)
      goto LABEL_10;
    goto LABEL_22;
  }
LABEL_21:
  operator delete(*(void **)(a1 + 120));
  *(_QWORD *)(a1 + 56) = off_24C9CCDB0;
  if ((*(char *)(a1 + 111) & 0x80000000) == 0)
  {
LABEL_10:
    if ((*(char *)(a1 + 87) & 0x80000000) == 0)
      goto LABEL_11;
    goto LABEL_23;
  }
LABEL_22:
  operator delete(*(void **)(a1 + 88));
  if ((*(char *)(a1 + 87) & 0x80000000) == 0)
  {
LABEL_11:
    *(_QWORD *)a1 = off_24C9C84B0;
    if ((*(char *)(a1 + 55) & 0x80000000) == 0)
      goto LABEL_12;
LABEL_24:
    operator delete(*(void **)(a1 + 32));
    if ((*(char *)(a1 + 31) & 0x80000000) == 0)
      return a1;
    goto LABEL_25;
  }
LABEL_23:
  operator delete(*(void **)(a1 + 64));
  *(_QWORD *)a1 = off_24C9C84B0;
  if (*(char *)(a1 + 55) < 0)
    goto LABEL_24;
LABEL_12:
  if ((*(char *)(a1 + 31) & 0x80000000) == 0)
    return a1;
LABEL_25:
  operator delete(*(void **)(a1 + 8));
  return a1;
}

_QWORD *sub_20EC20D18(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t *v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  double *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  double v14;
  int v15;
  unint64_t *v16;
  unint64_t v17;
  double v18;
  int v19;
  unint64_t v20;
  unint64_t v21;
  void *v22;
  void **v23;
  std::string *p_p;
  std::string::size_type size;
  char v26;
  size_t v27;
  void **v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  const char *v33;
  uint64_t v34;
  const char *v35;
  size_t v36;
  unsigned __int8 v37;
  unsigned __int8 v38;
  const char *v39;
  size_t v40;
  _BYTE *v41;
  uint64_t v42;
  uint64_t v43;
  _BYTE *v44;
  NSObject *v45;
  uint64_t v46;
  uint64_t v47;
  size_t v48;
  void *v49;
  _QWORD *v50;
  size_t v51;
  size_t v52;
  _QWORD *v53;
  void *v54;
  int v55;
  uint64_t v56;
  uint64_t v57;
  _QWORD *v58;
  char v59;
  _QWORD *v60;
  uint64_t v61;
  std::__shared_weak_count *v62;
  unint64_t *v63;
  unint64_t v64;
  uint64_t v65;
  unint64_t *v66;
  unint64_t v67;
  std::__shared_weak_count *v68;
  unint64_t *v69;
  unint64_t v70;
  unint64_t v71;
  std::__shared_weak_count *v72;
  unint64_t *v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  uint64_t v79;
  const char *v80;
  uint64_t v81;
  __int128 v82;
  void *v83;
  std::__shared_weak_count *v84;
  unint64_t *v85;
  unint64_t v86;
  std::__shared_weak_count *v87;
  unint64_t *v88;
  unint64_t v89;
  _QWORD *v90;
  std::__shared_weak_count *v91;
  unint64_t *v92;
  unint64_t v93;
  std::__shared_weak_count *v94;
  unint64_t *v95;
  unint64_t v96;
  std::__shared_weak_count *v97;
  unint64_t *v98;
  unint64_t v99;
  std::__shared_weak_count *v100;
  unint64_t *v101;
  unint64_t v102;
  const char *v103;
  std::__shared_weak_count *v104;
  unint64_t *v105;
  unint64_t v106;
  uint64_t v107;
  uint64_t *v108;
  std::__shared_weak_count *v109;
  unint64_t *v110;
  unint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v118;
  uint64_t v119;
  double v120;
  float64x2_t v121;
  int64x2_t v122;
  float64x2_t v124;
  float64x2_t v125;
  __int128 v131;
  unint64_t v132;
  float64x2_t v133;
  int v135;
  unint64_t *v136;
  unint64_t v137;
  float64x2_t v138;
  float64x2_t v140;
  double v143;
  double v144;
  double v145;
  __double2 v146;
  float64x2_t v147;
  float64x2_t v148;
  float64x2_t v150;
  float64x2_t v151;
  float64x2_t v152;
  float64x2_t v153;
  float64x2_t v154;
  unsigned __int8 v155;
  _QWORD *v156;
  int v157;
  std::chrono::steady_clock::time_point v158;
  std::chrono::steady_clock::time_point *v159;
  uint64_t *v160;
  unsigned __int8 v161;
  char *v163;
  size_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t i;
  uint64_t v168;
  int v169;
  unint64_t v170;
  unint64_t v171;
  uint64_t v172;
  uint64_t v173;
  size_t v174;
  const char *v175;
  unsigned __int8 v176;
  unsigned __int8 v177;
  const char *v178;
  size_t v179;
  _BYTE *v180;
  const char *v181;
  unint64_t v182;
  uint64_t v183;
  int v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  _BYTE *v188;
  uint64_t v189;
  uint64_t v190;
  NSObject *v191;
  size_t v192;
  std::__shared_weak_count_vtbl *v193;
  std::__shared_weak_count *v194;
  std::__shared_weak_count *v195;
  unint64_t *v196;
  unint64_t v197;
  unint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  float64x2_t v205;
  __int128 v206;
  __int128 v207;
  __int128 v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  __int128 v213;
  _QWORD *v214;
  std::__shared_weak_count *v215;
  unint64_t *v216;
  unint64_t v217;
  std::__shared_weak_count *v218;
  unint64_t *v219;
  unint64_t v220;
  void *v221;
  std::__shared_weak_count *v222;
  unint64_t *v223;
  unint64_t v224;
  std::__shared_weak_count *v225;
  unint64_t *v226;
  unint64_t v227;
  std::__shared_weak_count *v228;
  unint64_t *v229;
  unint64_t v230;
  std::__shared_weak_count *v231;
  unint64_t *v232;
  unint64_t v233;
  void *v234;
  std::__shared_weak_count *v235;
  unint64_t *v236;
  unint64_t v237;
  uint64_t *v238;
  _QWORD *v239;
  int v240;
  char v241;
  uint64_t v242;
  int v243;
  int v244;
  int v245;
  double v246;
  BOOL v247;
  std::__shared_weak_count *v248;
  unint64_t *v249;
  unint64_t v250;
  uint64_t v251;
  uint64_t v252;
  unint64_t v253;
  float v254;
  uint64_t v255;
  uint64_t v256;
  double *v257;
  uint64_t v258;
  double v259;
  double v260;
  float v261;
  float v262;
  double v263;
  uint64_t v264;
  unsigned int v265;
  uint64_t v266;
  std::__shared_weak_count *v267;
  unint64_t *v268;
  unint64_t v269;
  _QWORD *v270;
  uint64_t *v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  unsigned __int8 v276;
  int v277;
  int v278;
  int v279;
  unint64_t v280;
  char *v281;
  int v282;
  char *v283;
  size_t v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t j;
  uint64_t v288;
  uint64_t **k;
  uint64_t v290;
  _QWORD *result;
  uint64_t v292;
  _QWORD *v293;
  float64x2_t v294;
  const char *v295;
  float64x2_t v296;
  int v297;
  float64_t v298;
  uint64_t v299;
  uint64_t v300;
  void *v301[2];
  _QWORD v302[4];
  std::string __p;
  int v304;
  const char *v305;
  int v306;
  const char *v307;
  uint64_t v308;
  std::__shared_weak_count *v309;
  void *__dst[2];
  int64_t v311;
  uint64_t v312;
  uint64_t **v313;
  _QWORD *v314;
  __int128 v315;
  _BYTE object[48];
  __int128 v317;
  float64x2_t v318;
  __int128 v319;
  float64x2_t v320;
  __int128 v321;
  char v322;
  _BYTE oslog[64];
  void *v324;
  _BYTE v325[10];
  __int16 v326;
  _BYTE v327[20];
  uint64_t v328;
  _BYTE v329[20];
  char v330;
  _QWORD v331[3];
  _QWORD *v332;
  uint64_t v333[5];

  v333[2] = *MEMORY[0x24BDAC8D0];
  v4 = operator new(0x20uLL, MEMORY[0x24BEDB6B8]);
  v5 = *(uint64_t **)a2;
  v6 = *(_QWORD *)(a2 + 8);
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  v4[1] = v5;
  v4[2] = v6;
  *((_DWORD *)v4 + 6) = 1;
  *v4 = &off_24C9C3B88;
  v313 = (uint64_t **)v4;
  v331[0] = &off_24C9CF1E0;
  v331[1] = &v313;
  v331[2] = 0;
  v332 = v331;
  if (!v5)
    goto LABEL_21;
  v9 = *v5;
  v10 = (double *)v5[4];
  v11 = (std::__shared_weak_count *)v5[5];
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldxr(p_shared_owners);
    while (__stxr(v13 + 1, p_shared_owners));
  }
  if (v10)
  {
    v14 = *v10;
    if (*v10 < *(double *)(v9 + 40))
    {
      v15 = 0;
      v14 = 0.0;
      if (!v11)
        goto LABEL_17;
      goto LABEL_14;
    }
  }
  else
  {
    v14 = *(double *)(v9 + 32);
  }
  v15 = 1;
  if (!v11)
    goto LABEL_17;
LABEL_14:
  v16 = (unint64_t *)&v11->__shared_owners_;
  do
    v17 = __ldaxr(v16);
  while (__stlxr(v17 - 1, v16));
  if (!v17)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
    if (v15)
      v18 = v14;
    else
      v18 = COERCE_DOUBLE(3);
    if ((v15 & 1) == 0)
      goto LABEL_21;
    goto LABEL_22;
  }
LABEL_17:
  if (v15)
    v18 = v14;
  else
    v18 = COERCE_DOUBLE(3);
  if ((v15 & 1) == 0)
LABEL_21:
    v18 = 0.0;
LABEL_22:
  kdebug_trace();
  kdebug_trace();
  sub_20EC23240(&v312);
  if (**(int **)(v312 + 56) > 2)
    goto LABEL_182;
  v19 = *(unsigned __int8 *)(v312 + 72);
  v20 = sub_20E8C31DC(v312, "OSLogSurrogateAppender", 1, 0);
  v21 = v20;
  if (!v19 && !v20)
    goto LABEL_182;
  sub_20E863438((uint64_t)oslog);
  sub_20EAB8DF8(v313 + 1, (uint64_t)v301);
  *(_QWORD *)object = "SLAM produced a new state with info ";
  *(_QWORD *)&object[8] = 36;
  v22 = (void *)HIBYTE(v302[0]);
  if (v302[0] >= 0)
    v23 = v301;
  else
    v23 = (void **)v301[0];
  if (v302[0] < 0)
    v22 = v301[1];
  *(_QWORD *)&object[16] = v23;
  *(_QWORD *)&object[24] = v22;
  sub_20E8778D4((uint64_t)object, (uint64_t)&object[32], 0, 0, &__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    size = __p.__r_.__value_.__l.__size_;
  sub_20E86A980(&oslog[16], (uint64_t)p_p, size);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v302[0]) & 0x80000000) == 0)
    {
LABEL_38:
      v26 = v329[8];
      v299 = a1;
      v297 = v19;
      if ((v329[8] & 0x10) == 0)
        goto LABEL_39;
LABEL_48:
      v29 = *(_QWORD *)v329;
      if (*(_QWORD *)v329 < *(_QWORD *)v325)
      {
        *(_QWORD *)v329 = *(_QWORD *)v325;
        v29 = *(_QWORD *)v325;
      }
      v30 = v324;
      v27 = v29 - (_QWORD)v324;
      if ((unint64_t)(v29 - (_QWORD)v324) > 0x7FFFFFFFFFFFFFF7)
        goto LABEL_103;
      goto LABEL_51;
    }
  }
  else if ((SHIBYTE(v302[0]) & 0x80000000) == 0)
  {
    goto LABEL_38;
  }
  operator delete(v301[0]);
  v26 = v329[8];
  v299 = a1;
  v297 = v19;
  if ((v329[8] & 0x10) != 0)
    goto LABEL_48;
LABEL_39:
  if ((v26 & 8) == 0)
  {
    v27 = 0;
    HIBYTE(v311) = 0;
    v28 = __dst;
    goto LABEL_58;
  }
  v30 = *(void **)&oslog[40];
  v27 = *(_QWORD *)&oslog[56] - *(_QWORD *)&oslog[40];
  if (*(_QWORD *)&oslog[56] - *(_QWORD *)&oslog[40] > 0x7FFFFFFFFFFFFFF7uLL)
LABEL_103:
    sub_20E860B7C();
LABEL_51:
  if (v27 >= 0x17)
  {
    v31 = (v27 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v27 | 7) != 0x17)
      v31 = v27 | 7;
    v32 = v31 + 1;
    v28 = (void **)operator new(v31 + 1);
    __dst[1] = (void *)v27;
    v311 = v32 | 0x8000000000000000;
    __dst[0] = v28;
    goto LABEL_57;
  }
  HIBYTE(v311) = v27;
  v28 = __dst;
  if (v27)
LABEL_57:
    memmove(v28, v30, v27);
LABEL_58:
  *((_BYTE *)v28 + v27) = 0;
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v312;
  __p.__r_.__value_.__r.__words[1] = std::chrono::steady_clock::now().__d_.__rep_;
  __p.__r_.__value_.__r.__words[2] = std::chrono::system_clock::now().__d_.__rep_;
  v304 = 2;
  v305 = "unknown file";
  v306 = 155;
  v308 = 0;
  v309 = 0;
  v307 = "unknown function";
  if (v311 >= 0)
    v33 = (const char *)__dst;
  else
    v33 = (const char *)__dst[0];
  v34 = *(_QWORD *)__p.__r_.__value_.__l.__data_;
  v35 = (const char *)(*(_QWORD *)__p.__r_.__value_.__l.__data_ + 16);
  v295 = v35;
  if (*(char *)(*(_QWORD *)__p.__r_.__value_.__l.__data_ + 39) < 0)
  {
    v35 = *(const char **)(v34 + 16);
    v36 = *(_QWORD *)(v34 + 24);
    v38 = atomic_load((unsigned __int8 *)&qword_254A4A510);
    if ((v38 & 1) != 0)
      goto LABEL_65;
  }
  else
  {
    v36 = *(unsigned __int8 *)(*(_QWORD *)__p.__r_.__value_.__l.__data_ + 39);
    v37 = atomic_load((unsigned __int8 *)&qword_254A4A510);
    if ((v37 & 1) != 0)
      goto LABEL_65;
  }
  if (__cxa_guard_acquire(&qword_254A4A510))
  {
    sub_20E9E46F8((uint64_t)object);
    sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)object);
    if (object[24] && (object[23] & 0x80000000) != 0)
      operator delete(*(void **)object);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
    __cxa_guard_release(&qword_254A4A510);
  }
LABEL_65:
  if (byte_254A4A4F8[23] >= 0)
    v39 = byte_254A4A4F8;
  else
    v39 = *(const char **)byte_254A4A4F8;
  if (byte_254A4A4F8[23] >= 0)
    v40 = byte_254A4A4F8[23];
  else
    v40 = *(_QWORD *)&byte_254A4A4F8[8];
  *(_QWORD *)object = os_log_create(v39, v35);
  v41 = &object[8];
  if (v40 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v40 >= 0x17)
  {
    v42 = (v40 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v40 | 7) != 0x17)
      v42 = v40 | 7;
    v43 = v42 + 1;
    v41 = operator new(v42 + 1);
    *(_QWORD *)&object[16] = v40;
    *(_QWORD *)&object[24] = v43 | 0x8000000000000000;
    *(_QWORD *)&object[8] = v41;
    goto LABEL_78;
  }
  object[31] = v40;
  if (v40)
LABEL_78:
    memmove(v41, v39, v40);
  v41[v40] = 0;
  object[32] = 1;
  v44 = &object[40];
  if (v36 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v36 >= 0x17)
  {
    v46 = (v36 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v36 | 7) != 0x17)
      v46 = v36 | 7;
    v47 = v46 + 1;
    v44 = operator new(v46 + 1);
    *(_QWORD *)&v317 = v36;
    *((_QWORD *)&v317 + 1) = v47 | 0x8000000000000000;
    *(_QWORD *)&object[40] = v44;
  }
  else
  {
    HIBYTE(v317) = v36;
    if (!v36)
    {
      object[40] = 0;
      LOBYTE(v318.f64[0]) = 1;
      v45 = *(NSObject **)object;
      if ((SHIBYTE(v317) & 0x80000000) == 0)
        goto LABEL_83;
      goto LABEL_89;
    }
  }
  memmove(v44, v35, v36);
  v44[v36] = 0;
  LOBYTE(v318.f64[0]) = 1;
  v45 = *(NSObject **)object;
  if ((SHIBYTE(v317) & 0x80000000) == 0)
  {
LABEL_83:
    if (!object[32])
      goto LABEL_92;
    goto LABEL_90;
  }
LABEL_89:
  operator delete(*(void **)&object[40]);
  if (!object[32])
    goto LABEL_92;
LABEL_90:
  if ((object[31] & 0x80000000) != 0)
    operator delete(*(void **)&object[8]);
LABEL_92:
  if (*(_QWORD *)object)
    os_release(*(void **)object);
  if (!v21 || !*(_QWORD *)(v21 + 24))
  {
    os_log_type_enabled(v45, OS_LOG_TYPE_DEBUG);
    *(_DWORD *)object = 136315138;
    *(_QWORD *)&object[4] = v33;
    v54 = (void *)_os_log_send_and_compose_impl();
    a1 = v299;
    v55 = v297;
    if (v54)
      free(v54);
    goto LABEL_168;
  }
  v48 = _os_log_pack_size();
  v49 = operator new(v48, (std::align_val_t)8uLL);
  v50 = (_QWORD *)operator new();
  *v50 = &off_24C9ABB80;
  v50[1] = 0;
  v50[2] = 0;
  v50[3] = v49;
  v301[0] = v49;
  v301[1] = v49;
  *(_OWORD *)&v302[1] = 0uLL;
  v302[0] = v50;
  v51 = strlen(v33);
  if (v51 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  v52 = v51;
  if (v51 >= 0x17)
  {
    v56 = (v51 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v51 | 7) != 0x17)
      v56 = v51 | 7;
    v57 = v56 + 1;
    v53 = operator new(v56 + 1);
    *(_QWORD *)&v315 = v52;
    *((_QWORD *)&v315 + 1) = v57 | 0x8000000000000000;
    v314 = v53;
    goto LABEL_107;
  }
  HIBYTE(v315) = v51;
  v53 = &v314;
  if (v51)
LABEL_107:
    memcpy(v53, v33, v52);
  *((_BYTE *)v53 + v52) = 0;
  v58 = v314;
  v333[0] = v315;
  *(uint64_t *)((char *)v333 + 7) = *(_QWORD *)((char *)&v315 + 7);
  v59 = HIBYTE(v315);
  v60 = operator new(0x38uLL);
  v60[1] = 0;
  v60[2] = 0;
  v60[3] = off_24C9ABC20;
  *v60 = &off_24C9ABBD0;
  v61 = v333[0];
  v60[4] = v58;
  v60[5] = v61;
  *(_QWORD *)((char *)v60 + 47) = *(uint64_t *)((char *)v333 + 7);
  *((_BYTE *)v60 + 55) = v59;
  memset(v333, 0, 15);
  v62 = (std::__shared_weak_count *)v302[2];
  v302[1] = v60 + 3;
  v302[2] = v60;
  if (v62)
  {
    v63 = (unint64_t *)&v62->__shared_owners_;
    do
      v64 = __ldaxr(v63);
    while (__stlxr(v64 - 1, v63));
    if (!v64)
    {
      ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
      std::__shared_weak_count::__release_weak(v62);
    }
  }
  *(_OWORD *)object = *(_OWORD *)v301;
  v65 = v302[1];
  *(_QWORD *)&object[16] = v302[0];
  if (v302[0])
  {
    v66 = (unint64_t *)(v302[0] + 8);
    do
      v67 = __ldxr(v66);
    while (__stxr(v67 + 1, v66));
  }
  v68 = (std::__shared_weak_count *)v302[2];
  *(_QWORD *)&object[24] = v65;
  *(_QWORD *)&object[32] = v302[2];
  if (v302[2])
  {
    v69 = (unint64_t *)(v302[2] + 8);
    do
      v70 = __ldxr(v69);
    while (__stxr(v70 + 1, v69));
    *(_QWORD *)&object[40] = v65;
    do
      v71 = __ldaxr(v69);
    while (__stlxr(v71 - 1, v69));
    if (!v71)
    {
      ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
      std::__shared_weak_count::__release_weak(v68);
    }
  }
  else
  {
    *(_QWORD *)&object[40] = v65;
  }
  v72 = (std::__shared_weak_count *)v302[0];
  if (v302[0])
  {
    v73 = (unint64_t *)(v302[0] + 8);
    do
      v74 = __ldaxr(v73);
    while (__stlxr(v74 - 1, v73));
    if (!v74)
    {
      ((void (*)(std::__shared_weak_count *))v72->__on_zero_shared)(v72);
      std::__shared_weak_count::__release_weak(v72);
    }
  }
  v75 = *(_QWORD *)object;
  if (*(char *)(*(_QWORD *)&object[40] + 31) >= 0)
    v76 = *(_QWORD *)&object[40] + 8;
  else
    v76 = *(_QWORD *)(*(_QWORD *)&object[40] + 8);
  v77 = _os_log_pack_fill();
  *(_DWORD *)v77 = 136315138;
  *(_QWORD *)(v77 + 4) = v76;
  v78 = (char *)operator new();
  v79 = *(unsigned __int8 *)(v34 + 39);
  v80 = *(const char **)(v34 + 16);
  v81 = *(_QWORD *)(v34 + 24);
  v82 = *(_OWORD *)&object[24];
  *(_OWORD *)(v78 + 8) = *(_OWORD *)&object[8];
  if ((v79 & 0x80u) != 0)
    v79 = v81;
  else
    v80 = v295;
  *(_QWORD *)v78 = v75;
  *(_QWORD *)&object[8] = 0;
  *(_QWORD *)&object[16] = 0;
  *(_OWORD *)(v78 + 24) = v82;
  *(_QWORD *)&object[24] = 0;
  *(_QWORD *)&object[32] = 0;
  *((_QWORD *)v78 + 5) = v80;
  *((_QWORD *)v78 + 6) = v79;
  v78[56] = 2;
  v314 = 0;
  v301[0] = v78;
  (*(void (**)(_QWORD, void **))(**(_QWORD **)(v21 + 24) + 40))(*(_QWORD *)(v21 + 24), v301);
  v55 = v297;
  a1 = v299;
  v83 = v301[0];
  v301[0] = 0;
  if (v83)
  {
    v84 = (std::__shared_weak_count *)*((_QWORD *)v83 + 4);
    if (v84)
    {
      v85 = (unint64_t *)&v84->__shared_owners_;
      do
        v86 = __ldaxr(v85);
      while (__stlxr(v86 - 1, v85));
      if (!v86)
      {
        ((void (*)(std::__shared_weak_count *))v84->__on_zero_shared)(v84);
        std::__shared_weak_count::__release_weak(v84);
      }
    }
    v87 = (std::__shared_weak_count *)*((_QWORD *)v83 + 2);
    if (v87)
    {
      v88 = (unint64_t *)&v87->__shared_owners_;
      do
        v89 = __ldaxr(v88);
      while (__stlxr(v89 - 1, v88));
      if (!v89)
      {
        ((void (*)(std::__shared_weak_count *))v87->__on_zero_shared)(v87);
        std::__shared_weak_count::__release_weak(v87);
      }
    }
    MEMORY[0x212BC6398](v83, 0x10F0C40B62ED6C6);
    v90 = v314;
    v314 = 0;
    if (v90)
    {
      v91 = (std::__shared_weak_count *)v90[4];
      if (v91)
      {
        v92 = (unint64_t *)&v91->__shared_owners_;
        do
          v93 = __ldaxr(v92);
        while (__stlxr(v93 - 1, v92));
        if (!v93)
        {
          ((void (*)(std::__shared_weak_count *))v91->__on_zero_shared)(v91);
          std::__shared_weak_count::__release_weak(v91);
        }
      }
      v94 = (std::__shared_weak_count *)v90[2];
      if (v94)
      {
        v95 = (unint64_t *)&v94->__shared_owners_;
        do
          v96 = __ldaxr(v95);
        while (__stlxr(v96 - 1, v95));
        if (!v96)
        {
          ((void (*)(std::__shared_weak_count *))v94->__on_zero_shared)(v94);
          std::__shared_weak_count::__release_weak(v94);
        }
      }
      MEMORY[0x212BC6398](v90, 0x10F0C40B62ED6C6);
    }
  }
  v97 = *(std::__shared_weak_count **)&object[32];
  if (*(_QWORD *)&object[32])
  {
    v98 = (unint64_t *)(*(_QWORD *)&object[32] + 8);
    do
      v99 = __ldaxr(v98);
    while (__stlxr(v99 - 1, v98));
    if (!v99)
    {
      ((void (*)(std::__shared_weak_count *))v97->__on_zero_shared)(v97);
      std::__shared_weak_count::__release_weak(v97);
    }
  }
  v100 = *(std::__shared_weak_count **)&object[16];
  if (*(_QWORD *)&object[16])
  {
    v101 = (unint64_t *)(*(_QWORD *)&object[16] + 8);
    do
      v102 = __ldaxr(v101);
    while (__stlxr(v102 - 1, v101));
    if (!v102)
    {
      ((void (*)(std::__shared_weak_count *))v100->__on_zero_shared)(v100);
      std::__shared_weak_count::__release_weak(v100);
    }
  }
LABEL_168:
  if (v55)
  {
    v103 = (const char *)__dst;
    if (v311 < 0)
      v103 = (const char *)__dst[0];
    sub_20E8C003C((uint64_t)&__p, "%s", v103);
    sub_20E863570((uint64_t)&__p);
  }
  sub_20E863570((uint64_t)&__p);
  v104 = v309;
  if (v309)
  {
    v105 = (unint64_t *)&v309->__shared_owners_;
    do
      v106 = __ldaxr(v105);
    while (__stlxr(v106 - 1, v105));
    if (!v106)
    {
      ((void (*)(std::__shared_weak_count *))v104->__on_zero_shared)(v104);
      std::__shared_weak_count::__release_weak(v104);
    }
  }
  if (SHIBYTE(v311) < 0)
    operator delete(__dst[0]);
  *(_QWORD *)oslog = *MEMORY[0x24BEDB7F0];
  v107 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  *(_QWORD *)&oslog[*(_QWORD *)(*(_QWORD *)oslog - 24)] = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
  *(_QWORD *)&oslog[16] = v107;
  *(_QWORD *)&oslog[24] = MEMORY[0x24BEDB848] + 16;
  if (SHIBYTE(v328) < 0)
    operator delete(*(void **)&v327[4]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x212BC6290](&v329[16]);
LABEL_182:
  v108 = v313[1];
  v109 = (std::__shared_weak_count *)v313[2];
  if (v109)
  {
    v110 = (unint64_t *)&v109->__shared_owners_;
    do
      v111 = __ldxr(v110);
    while (__stxr(v111 + 1, v110));
  }
  if (v108 && (v112 = *v108) != 0)
  {
    v113 = v108[4];
    v114 = v112 + 48;
    v115 = v112 + 192;
    v116 = v113 + 8;
    _ZF = v113 == 0;
    if (v113)
      v118 = v113 + 80;
    else
      v118 = v115;
    if (_ZF)
      v119 = v114;
    else
      v119 = v116;
    v120 = *(double *)(v118 + 16);
    v121.f64[0] = *(float64_t *)(v119 + 16);
    v122 = *(int64x2_t *)(v119 + 24);
    _Q6 = *(_OWORD *)(v119 + 48);
    v124 = (float64x2_t)vzip1q_s64(*(int64x2_t *)v119, v122);
    v121.f64[1] = *(float64_t *)(v119 + 40);
    v125 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v124, *(double *)v118), (float64x2_t)vzip2q_s64(*(int64x2_t *)v119, v122), *(float64x2_t *)v118, 1), v121, v120);
    _D1 = *(_QWORD *)(v118 + 8);
    __asm { FMLA            D17, D1, V6.D[1] }
    *(_QWORD *)&v131 = vdupq_laneq_s64(*(int64x2_t *)v119, 1).u64[0];
    *((_QWORD *)&v131 + 1) = *(_QWORD *)(v119 + 32);
    v132 = *(_QWORD *)(v119 + 56);
    v122.i64[0] = *(_QWORD *)(v119 + 64);
    v133 = vnegq_f64(v125);
    __asm { FMOV            V16.2D, #1.0 }
    *(double *)&_Q16 = -(_D17 + *(double *)v122.i64 * v120);
    *(float64x2_t *)object = v124;
    *(_OWORD *)&object[16] = (unint64_t)_Q6;
    *(_OWORD *)&object[32] = v131;
    v317 = v132;
    v318 = v121;
    v319 = v122.u64[0];
    v320 = v133;
    v321 = _Q16;
    v135 = 1;
    v322 = 1;
    if (!v109)
    {
LABEL_194:
      if (!v135)
        goto LABEL_327;
      goto LABEL_203;
    }
  }
  else
  {
    v135 = 0;
    object[0] = 0;
    v322 = 0;
    if (!v109)
      goto LABEL_194;
  }
  v136 = (unint64_t *)&v109->__shared_owners_;
  do
    v137 = __ldaxr(v136);
  while (__stlxr(v137 - 1, v136));
  if (v137)
  {
    if (!v322)
      goto LABEL_327;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v109->__on_zero_shared)(v109);
    std::__shared_weak_count::__release_weak(v109);
    if (!v322)
      goto LABEL_327;
  }
LABEL_203:
  memset(v302, 0, sizeof(v302));
  *(_OWORD *)v301 = 0u;
  *(_QWORD *)oslog = object;
  *(_QWORD *)&oslog[8] = 0;
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v301;
  __p.__r_.__value_.__l.__size_ = 0;
  sub_20E95B988((float64x2_t **)oslog, (double **)&__p);
  *(_QWORD *)&v138.f64[0] = v302[0];
  _Q17 = *(float64x2_t *)v301;
  v140 = (float64x2_t)vextq_s8((int8x16_t)_Q17, (int8x16_t)_Q17, 8uLL);
  _Q0 = vmulq_f64(_Q17, _Q17);
  *(void **)&_Q1.f64[0] = v301[1];
  __asm { FMLA            D0, D1, V17.D[1] }
  v143 = _Q0.f64[0] + v138.f64[0] * v138.f64[0];
  if (v143 < 0.0000002635)
  {
    _Q0.f64[0] = 0.5 - v143 * (v143 / -720.0 + 0.0416666667);
    _Q1.f64[0] = 0.166666667 - v143 * (v143 / -5040.0 + 0.00833333333);
    v144 = 1.0 - v143 * _Q1.f64[0];
    if (v143 >= 2.775e-15)
      goto LABEL_205;
LABEL_208:
    _Q0.f64[0] = v143 * 0.0000330687831 + v143 * 0.00138888889 + 0.0833333333;
    goto LABEL_210;
  }
  v145 = sqrt(v143);
  v296 = *(float64x2_t *)v301;
  v298 = *(double *)v302;
  v294 = v140;
  v146 = __sincos_stret(v145);
  v140 = v294;
  _Q17 = v296;
  v138.f64[0] = v298;
  v144 = v146.__sinval / v145;
  _Q0.f64[0] = 1.0 / v143 * (1.0 - v146.__cosval);
  _Q1.f64[0] = 1.0 / v143 * (1.0 - v146.__sinval / v145);
  if (v143 < 2.775e-15)
    goto LABEL_208;
LABEL_205:
  if (v143 <= 9.0)
    _Q0.f64[0] = (_Q0.f64[0] * 0.5 - _Q1.f64[0]) / v144;
  else
    _Q0.f64[0] = (_Q0.f64[0] + v144 * -0.5) / (v143 * _Q0.f64[0]);
LABEL_210:
  *(_QWORD *)&_Q1.f64[0] = v321;
  v147.f64[0] = v140.f64[0];
  v147.f64[1] = v138.f64[0];
  v148 = vsubq_f64(vmulq_laneq_f64(_Q17, v320, 1), vmulq_f64(v140, v320));
  __asm { FMOV            V5.2D, #-0.5 }
  v150 = vaddq_f64(_Q1, vmulq_f64(v148, _Q5));
  *(_QWORD *)&v151.f64[0] = v321;
  v151.f64[1] = v320.f64[0];
  v138.f64[1] = _Q17.f64[0];
  v152 = vsubq_f64(vmulq_f64(v147, v151), vmulq_f64(v138, (float64x2_t)vextq_s8((int8x16_t)v320, (int8x16_t)_Q1, 8uLL)));
  v153 = vaddq_f64(v320, vmulq_f64(v152, _Q5));
  v154 = (float64x2_t)vextq_s8((int8x16_t)v152, (int8x16_t)v148, 8uLL);
  v148.f64[1] = v152.f64[0];
  v302[3] = *(_OWORD *)&vaddq_f64(v150, vmulq_f64(_Q0, vsubq_f64(vmulq_laneq_f64(_Q17, v152, 1), vmulq_f64(v140, v152))));
  *(float64x2_t *)&v302[1] = vaddq_f64(v153, vmulq_n_f64(vsubq_f64(vmulq_f64(v147, v148), vmulq_f64(v138, v154)), _Q0.f64[0]));
  v155 = atomic_load((unsigned __int8 *)&qword_254A5D160);
  if ((v155 & 1) == 0 && __cxa_guard_acquire(&qword_254A5D160))
  {
    v293 = operator new(0x28uLL);
    v293[1] = 0;
    v293[2] = 0;
    *v293 = &off_24C9C4340;
    *((_BYTE *)v293 + 24) = 0;
    *((_BYTE *)v293 + 32) = 0;
    qword_254A5D168 = (uint64_t)(v293 + 3);
    qword_254A5D170 = (uint64_t)v293;
    unk_254A5D178 = 300000000;
    __cxa_atexit((void (*)(void *))sub_20EAF5AE0, &qword_254A5D168, &dword_20E81F000);
    __cxa_guard_release(&qword_254A5D160);
  }
  v156 = (_QWORD *)qword_254A5D168;
  v157 = *(unsigned __int8 *)(qword_254A5D168 + 8);
  v158.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  if (v157)
  {
    if (v158.__d_.__rep_ - *v156 < 300000000)
      goto LABEL_238;
    v159 = (std::chrono::steady_clock::time_point *)qword_254A5D168;
  }
  else
  {
    v159 = (std::chrono::steady_clock::time_point *)qword_254A5D168;
    if (!*(_BYTE *)(qword_254A5D168 + 8))
      *(_BYTE *)(qword_254A5D168 + 8) = 1;
  }
  v159->__d_.__rep_ = v158.__d_.__rep_;
  v160 = sub_210219C18();
  v161 = atomic_load((unsigned __int8 *)&qword_254A6DDD0);
  if ((v161 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DDD0))
  {
    __cxa_atexit((void (*)(void *))sub_21021A250, &stru_254A5A410, &dword_20E81F000);
    __cxa_guard_release(&qword_254A6DDD0);
  }
  if (atomic_load(&qword_254A5A450))
  {
    *(_DWORD *)oslog = 134219520;
    *(double *)&oslog[4] = v18;
    *(_WORD *)&oslog[12] = 2048;
    *(void **)&oslog[14] = v301[0];
    *(_WORD *)&oslog[22] = 2048;
    *(void **)&oslog[24] = v301[1];
    *(_WORD *)&oslog[32] = 2048;
    *(_QWORD *)&oslog[34] = v302[0];
    *(_WORD *)&oslog[42] = 2048;
    *(_QWORD *)&oslog[44] = v302[1];
    *(_WORD *)&oslog[52] = 2048;
    *(_QWORD *)&oslog[54] = v302[2];
    *(_WORD *)&oslog[62] = 2048;
    v324 = (void *)v302[3];
    v163 = (char *)_os_log_send_and_compose_impl();
    v164 = strlen(v163);
    __p.__r_.__value_.__r.__words[0] = 0;
    pthread_threadid_np(0, (__uint64_t *)&__p);
    v165 = __p.__r_.__value_.__r.__words[0];
    timespec_get((timespec *)&__p, 1);
    sub_210219E20(oslog, 0xEEEEB0B5B2B2EEEELL, "Trace", 5uLL, (__int128 *)(v160 + 1), (__int128 *)(v160 + 5), "SLAM pose timestamp: %f Pose:%f, %f, %f, %f, %f, %f", 0x33uLL, v163, v164, v165, &__p);
    std::mutex::lock(&stru_254A5A410);
    v166 = qword_254A5A458;
    for (i = unk_254A5A460; v166 != i; v166 += 40)
    {
      v168 = *(_QWORD *)(v166 + 32);
      if (!v168)
        sub_20E86D37C();
      (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v168 + 48))(v168, oslog);
    }
    std::mutex::unlock(&stru_254A5A410);
    if (v330 < 0)
    {
      operator delete(*(void **)&v329[8]);
      if ((v329[7] & 0x80000000) == 0)
      {
LABEL_223:
        if (!v327[4])
        {
LABEL_229:
          if (oslog[56] && (oslog[55] & 0x80000000) != 0)
            operator delete(*(void **)&oslog[32]);
          if ((oslog[31] & 0x80000000) != 0)
            operator delete(*(void **)&oslog[8]);
          if (v163)
            free(v163);
          goto LABEL_236;
        }
LABEL_227:
        if ((v327[3] & 0x80000000) != 0)
          operator delete(v324);
        goto LABEL_229;
      }
    }
    else if ((v329[7] & 0x80000000) == 0)
    {
      goto LABEL_223;
    }
    operator delete(*(void **)&v327[12]);
    if (!v327[4])
      goto LABEL_229;
    goto LABEL_227;
  }
LABEL_236:
  if (os_signpost_enabled((os_log_t)*v160))
  {
    *(_DWORD *)oslog = 134219520;
    *(double *)&oslog[4] = v18;
    *(_WORD *)&oslog[12] = 2048;
    *(void **)&oslog[14] = v301[0];
    *(_WORD *)&oslog[22] = 2048;
    *(void **)&oslog[24] = v301[1];
    *(_WORD *)&oslog[32] = 2048;
    *(_QWORD *)&oslog[34] = v302[0];
    *(_WORD *)&oslog[42] = 2048;
    *(_QWORD *)&oslog[44] = v302[1];
    *(_WORD *)&oslog[52] = 2048;
    *(_QWORD *)&oslog[54] = v302[2];
    *(_WORD *)&oslog[62] = 2048;
    v324 = (void *)v302[3];
    _os_signpost_emit_unreliably_with_name_impl();
  }
LABEL_238:
  sub_20EC23240(v333);
  if (**(int **)(v333[0] + 56) > 2)
    goto LABEL_327;
  v169 = *(unsigned __int8 *)(v333[0] + 72);
  v170 = sub_20E8C31DC(v333[0], "OSLogSurrogateAppender", 1, 0);
  v171 = v170;
  if (!v169 && !v170)
    goto LABEL_327;
  v300 = a1;
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v333;
  __p.__r_.__value_.__r.__words[1] = std::chrono::steady_clock::now().__d_.__rep_;
  __p.__r_.__value_.__r.__words[2] = std::chrono::system_clock::now().__d_.__rep_;
  v304 = 2;
  v305 = "unknown file";
  v306 = 171;
  v308 = 0;
  v309 = 0;
  v307 = "unknown function";
  v172 = *(_QWORD *)__p.__r_.__value_.__l.__data_;
  v173 = *(_QWORD *)__p.__r_.__value_.__l.__data_ + 16;
  if (*(char *)(*(_QWORD *)__p.__r_.__value_.__l.__data_ + 39) < 0)
  {
    v175 = *(const char **)(v172 + 16);
    v174 = *(_QWORD *)(v172 + 24);
    v177 = atomic_load((unsigned __int8 *)&qword_254A4A510);
    if ((v177 & 1) != 0)
      goto LABEL_245;
  }
  else
  {
    v174 = *(unsigned __int8 *)(*(_QWORD *)__p.__r_.__value_.__l.__data_ + 39);
    v175 = (const char *)(*(_QWORD *)__p.__r_.__value_.__l.__data_ + 16);
    v176 = atomic_load((unsigned __int8 *)&qword_254A4A510);
    if ((v176 & 1) != 0)
      goto LABEL_245;
  }
  if (__cxa_guard_acquire(&qword_254A4A510))
  {
    sub_20E9E46F8((uint64_t)oslog);
    sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)oslog);
    if (oslog[24] && (oslog[23] & 0x80000000) != 0)
      operator delete(*(void **)oslog);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
    __cxa_guard_release(&qword_254A4A510);
  }
LABEL_245:
  if (byte_254A4A4F8[23] >= 0)
    v178 = byte_254A4A4F8;
  else
    v178 = *(const char **)byte_254A4A4F8;
  if (byte_254A4A4F8[23] >= 0)
    v179 = byte_254A4A4F8[23];
  else
    v179 = *(_QWORD *)&byte_254A4A4F8[8];
  *(_QWORD *)oslog = os_log_create(v178, v175);
  v180 = &oslog[8];
  if (v179 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v179 >= 0x17)
  {
    v181 = v175;
    v182 = v171;
    v183 = v172;
    v184 = v169;
    v185 = v173;
    v186 = (v179 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v179 | 7) != 0x17)
      v186 = v179 | 7;
    v187 = v186 + 1;
    v180 = operator new(v186 + 1);
    *(_QWORD *)&oslog[24] = v187 | 0x8000000000000000;
    *(_QWORD *)&oslog[8] = v180;
    *(_QWORD *)&oslog[16] = v179;
    v173 = v185;
    v169 = v184;
    v172 = v183;
    v171 = v182;
    v175 = v181;
    goto LABEL_258;
  }
  oslog[31] = v179;
  if (v179)
LABEL_258:
    memmove(v180, v178, v179);
  v180[v179] = 0;
  oslog[32] = 1;
  v188 = &oslog[40];
  if (v174 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v174 >= 0x17)
  {
    v189 = (v174 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v174 | 7) != 0x17)
      v189 = v174 | 7;
    v190 = v189 + 1;
    v188 = operator new(v189 + 1);
    *(_QWORD *)&oslog[56] = v190 | 0x8000000000000000;
    *(_QWORD *)&oslog[40] = v188;
    *(_QWORD *)&oslog[48] = v174;
  }
  else
  {
    oslog[63] = v174;
    if (!v174)
      goto LABEL_267;
  }
  memmove(v188, v175, v174);
LABEL_267:
  v188[v174] = 0;
  LOBYTE(v324) = 1;
  v191 = *(NSObject **)oslog;
  if ((oslog[63] & 0x80000000) != 0)
    operator delete(*(void **)&oslog[40]);
  if (oslog[32] && (oslog[31] & 0x80000000) != 0)
    operator delete(*(void **)&oslog[8]);
  if (*(_QWORD *)oslog)
    os_release(*(void **)oslog);
  if (v171 && *(_QWORD *)(v171 + 24))
  {
    v192 = _os_log_pack_size();
    v193 = (std::__shared_weak_count_vtbl *)operator new(v192, (std::align_val_t)8uLL);
    v194 = (std::__shared_weak_count *)operator new();
    v195 = v194;
    v194->__shared_owners_ = 0;
    v196 = (unint64_t *)&v194->__shared_owners_;
    v194->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
    v194->__shared_weak_owners_ = 0;
    v194[1].__vftable = v193;
    *(_QWORD *)oslog = v193;
    *(_QWORD *)&oslog[8] = v193;
    *(_QWORD *)&oslog[16] = v194;
    do
      v197 = __ldxr(v196);
    while (__stxr(v197 + 1, v196));
    memset(&oslog[24], 0, 24);
    do
      v198 = __ldaxr(v196);
    while (__stlxr(v198 - 1, v196));
    if (!v198)
    {
      ((void (*)(std::__shared_weak_count *))v194->__on_zero_shared)(v194);
      std::__shared_weak_count::__release_weak(v195);
    }
    v199 = *(_QWORD *)oslog;
    v200 = _os_log_pack_fill();
    v201 = *(_QWORD *)object;
    v202 = *(_QWORD *)&object[8];
    v203 = *(_QWORD *)&object[32];
    v204 = *(_QWORD *)&object[40];
    v205 = v318;
    v206 = *(_OWORD *)&object[16];
    v207 = v317;
    v208 = v319;
    *(_DWORD *)v200 = 134221056;
    *(double *)(v200 + 4) = v18;
    *(_WORD *)(v200 + 12) = 2048;
    *(_QWORD *)(v200 + 14) = v201;
    *(_WORD *)(v200 + 22) = 2048;
    *(_QWORD *)(v200 + 24) = v202;
    *(_WORD *)(v200 + 32) = 2048;
    *(_QWORD *)(v200 + 34) = v206;
    *(_WORD *)(v200 + 42) = 2048;
    *(_QWORD *)(v200 + 44) = v203;
    *(_WORD *)(v200 + 52) = 2048;
    *(_QWORD *)(v200 + 54) = v204;
    *(_WORD *)(v200 + 62) = 2048;
    *(_QWORD *)(v200 + 64) = v207;
    *(_WORD *)(v200 + 72) = 2048;
    *(float64_t *)(v200 + 74) = v205.f64[0];
    *(_WORD *)(v200 + 82) = 2048;
    *(float64_t *)(v200 + 84) = v205.f64[1];
    *(_WORD *)(v200 + 92) = 2048;
    *(_QWORD *)(v200 + 94) = v208;
    *(_WORD *)(v200 + 102) = 2048;
    *(_QWORD *)(v200 + 104) = *((_QWORD *)&v206 + 1);
    *(_WORD *)(v200 + 112) = 2048;
    *(_QWORD *)(v200 + 114) = *((_QWORD *)&v207 + 1);
    *(_WORD *)(v200 + 122) = 2048;
    *(_QWORD *)(v200 + 124) = *((_QWORD *)&v208 + 1);
    v209 = operator new();
    v210 = *(unsigned __int8 *)(v172 + 39);
    v211 = *(_QWORD *)(v172 + 16);
    v212 = *(_QWORD *)(v172 + 24);
    v213 = *(_OWORD *)&oslog[24];
    *(_OWORD *)(v209 + 8) = *(_OWORD *)&oslog[8];
    if ((v210 & 0x80u) != 0)
      v210 = v212;
    else
      v211 = v173;
    *(_QWORD *)v209 = v199;
    *(_QWORD *)&oslog[8] = 0;
    *(_QWORD *)&oslog[16] = 0;
    *(_OWORD *)(v209 + 24) = v213;
    *(_QWORD *)&oslog[24] = 0;
    *(_QWORD *)&oslog[32] = 0;
    *(_QWORD *)(v209 + 40) = v211;
    *(_QWORD *)(v209 + 48) = v210;
    *(_BYTE *)(v209 + 56) = 2;
    __dst[0] = 0;
    v314 = (_QWORD *)v209;
    (*(void (**)(_QWORD, _QWORD **))(**(_QWORD **)(v171 + 24) + 40))(*(_QWORD *)(v171 + 24), &v314);
    v214 = v314;
    v314 = 0;
    a1 = v300;
    if (v214)
    {
      v215 = (std::__shared_weak_count *)v214[4];
      if (v215)
      {
        v216 = (unint64_t *)&v215->__shared_owners_;
        do
          v217 = __ldaxr(v216);
        while (__stlxr(v217 - 1, v216));
        if (!v217)
        {
          ((void (*)(std::__shared_weak_count *))v215->__on_zero_shared)(v215);
          std::__shared_weak_count::__release_weak(v215);
        }
      }
      v218 = (std::__shared_weak_count *)v214[2];
      if (v218)
      {
        v219 = (unint64_t *)&v218->__shared_owners_;
        do
          v220 = __ldaxr(v219);
        while (__stlxr(v220 - 1, v219));
        if (!v220)
        {
          ((void (*)(std::__shared_weak_count *))v218->__on_zero_shared)(v218);
          std::__shared_weak_count::__release_weak(v218);
        }
      }
      MEMORY[0x212BC6398](v214, 0x10F0C40B62ED6C6);
      v221 = __dst[0];
      __dst[0] = 0;
      if (v221)
      {
        v222 = (std::__shared_weak_count *)*((_QWORD *)v221 + 4);
        if (v222)
        {
          v223 = (unint64_t *)&v222->__shared_owners_;
          do
            v224 = __ldaxr(v223);
          while (__stlxr(v224 - 1, v223));
          if (!v224)
          {
            ((void (*)(std::__shared_weak_count *))v222->__on_zero_shared)(v222);
            std::__shared_weak_count::__release_weak(v222);
          }
        }
        v225 = (std::__shared_weak_count *)*((_QWORD *)v221 + 2);
        if (v225)
        {
          v226 = (unint64_t *)&v225->__shared_owners_;
          do
            v227 = __ldaxr(v226);
          while (__stlxr(v227 - 1, v226));
          if (!v227)
          {
            ((void (*)(std::__shared_weak_count *))v225->__on_zero_shared)(v225);
            std::__shared_weak_count::__release_weak(v225);
          }
        }
        MEMORY[0x212BC6398](v221, 0x10F0C40B62ED6C6);
      }
    }
    v228 = *(std::__shared_weak_count **)&oslog[32];
    if (*(_QWORD *)&oslog[32])
    {
      v229 = (unint64_t *)(*(_QWORD *)&oslog[32] + 8);
      do
        v230 = __ldaxr(v229);
      while (__stlxr(v230 - 1, v229));
      if (!v230)
      {
        ((void (*)(std::__shared_weak_count *))v228->__on_zero_shared)(v228);
        std::__shared_weak_count::__release_weak(v228);
      }
    }
    v231 = *(std::__shared_weak_count **)&oslog[16];
    if (*(_QWORD *)&oslog[16])
    {
      v232 = (unint64_t *)(*(_QWORD *)&oslog[16] + 8);
      do
        v233 = __ldaxr(v232);
      while (__stlxr(v233 - 1, v232));
      if (!v233)
      {
        ((void (*)(std::__shared_weak_count *))v231->__on_zero_shared)(v231);
        std::__shared_weak_count::__release_weak(v231);
      }
    }
  }
  else
  {
    os_log_type_enabled(v191, OS_LOG_TYPE_DEBUG);
    *(_DWORD *)oslog = 134221056;
    *(double *)&oslog[4] = v18;
    *(_WORD *)&oslog[12] = 2048;
    *(_QWORD *)&oslog[14] = *(_QWORD *)object;
    *(_WORD *)&oslog[22] = 2048;
    *(_QWORD *)&oslog[24] = *(_QWORD *)&object[8];
    *(_WORD *)&oslog[32] = 2048;
    *(_QWORD *)&oslog[34] = *(_QWORD *)&object[16];
    *(_WORD *)&oslog[42] = 2048;
    *(_QWORD *)&oslog[44] = *(_QWORD *)&object[32];
    *(_WORD *)&oslog[52] = 2048;
    *(_QWORD *)&oslog[54] = *(_QWORD *)&object[40];
    *(_WORD *)&oslog[62] = 2048;
    v324 = (void *)v317;
    *(_WORD *)v325 = 2048;
    *(float64_t *)&v325[2] = v318.f64[0];
    v326 = 2048;
    *(float64_t *)v327 = v318.f64[1];
    *(_WORD *)&v327[8] = 2048;
    *(_QWORD *)&v327[10] = v319;
    *(_WORD *)&v327[18] = 2048;
    v328 = *(_QWORD *)&object[24];
    *(_WORD *)v329 = 2048;
    *(_QWORD *)&v329[2] = *((_QWORD *)&v317 + 1);
    *(_WORD *)&v329[10] = 2048;
    *(_QWORD *)&v329[12] = *((_QWORD *)&v319 + 1);
    v234 = (void *)_os_log_send_and_compose_impl();
    a1 = v300;
    if (v234)
      free(v234);
  }
  if (v169)
  {
    sub_20E8C003C((uint64_t)&__p, "Pose Data: timestamp:%.30g, R:%.30g, %.30g, %.30g, %.30g, %.30g, %.30g, %.30g, %.30g, %.30g, t:%.30g, %.30g, %.30g", v18, *(double *)object, *(double *)&object[8], *(double *)&object[16], *(double *)&object[32], *(double *)&object[40], *(double *)&v317, v318.f64[0], v318.f64[1], *(double *)&v319, *(double *)&object[24], *((double *)&v317 + 1), *((double *)&v319 + 1));
    sub_20E863570((uint64_t)&__p);
  }
  sub_20E863570((uint64_t)&__p);
  v235 = v309;
  if (v309)
  {
    v236 = (unint64_t *)&v309->__shared_owners_;
    do
      v237 = __ldaxr(v236);
    while (__stlxr(v237 - 1, v236));
    if (!v237)
    {
      ((void (*)(std::__shared_weak_count *))v235->__on_zero_shared)(v235);
      std::__shared_weak_count::__release_weak(v235);
    }
  }
LABEL_327:
  v238 = v313[1];
  v239 = (_QWORD *)*v238;
  ++byte_254A5D148;
  if (((byte_254A5D148 << 7) | ((-51 * byte_254A5D148) >> 1)) > 0x19u)
    goto LABEL_342;
  *(_WORD *)&oslog[36] = 256;
  v240 = *((unsigned __int8 *)v239 + 216);
  if (*((_BYTE *)v239 + 216))
  {
    v241 = 4;
    v242 = 1181697075;
  }
  else if (*((_BYTE *)v239 + 5032))
  {
    if (*((_BYTE *)v239 + 5032) == 1)
    {
      v241 = 2;
      v242 = 21334;
    }
    else
    {
      v242 = 0x6E776F6E6B6E55;
      v241 = 7;
    }
  }
  else
  {
    v241 = 2;
    v242 = 21326;
  }
  v243 = *((unsigned __int8 *)v239 + 361);
  v244 = *((_DWORD *)v239 + 1030);
  v245 = *((_DWORD *)v239 + 98);
  v246 = *((double *)v239 + 47);
  *(_QWORD *)oslog = v242;
  oslog[23] = v241;
  *(float *)&v246 = v246;
  *(_DWORD *)&oslog[24] = LODWORD(v246);
  *(_DWORD *)&oslog[28] = v245;
  *(_DWORD *)&oslog[32] = v244;
  if (v240)
    v247 = v243 == 0;
  else
    v247 = 1;
  if (!v247)
    *(_WORD *)&oslog[36] = *((unsigned __int8 *)v239 + 360) | 0x100;
  sub_20E896804(object);
  (*(void (**)(_QWORD, _BYTE *))(**(_QWORD **)object + 104))(*(_QWORD *)object, oslog);
  v248 = *(std::__shared_weak_count **)&object[8];
  if (*(_QWORD *)&object[8])
  {
    v249 = (unint64_t *)(*(_QWORD *)&object[8] + 8);
    do
      v250 = __ldaxr(v249);
    while (__stlxr(v250 - 1, v249));
    if (!v250)
    {
      ((void (*)(std::__shared_weak_count *))v248->__on_zero_shared)(v248);
      std::__shared_weak_count::__release_weak(v248);
      if ((oslog[23] & 0x80000000) == 0)
        goto LABEL_341;
      goto LABEL_340;
    }
  }
  if ((oslog[23] & 0x80000000) != 0)
LABEL_340:
    operator delete(*(void **)oslog);
LABEL_341:
  v238 = v313[1];
  v239 = (_QWORD *)*v238;
LABEL_342:
  ++byte_254A5D149;
  if (((byte_254A5D149 << 7) | ((-51 * byte_254A5D149) >> 1)) > 0x19u)
    goto LABEL_361;
  v251 = v239[682];
  v252 = v239[683];
  if (v251 != v252)
  {
    v253 = v252 - v251 - 32;
    if (v253 < 0x20)
    {
      v254 = 0.0;
      v255 = v239[682];
      do
      {
LABEL_353:
        v262 = *(double *)(v255 + 16);
        v254 = v254 + v262;
        v255 += 32;
      }
      while (v255 != v252);
      goto LABEL_354;
    }
    v256 = (v253 >> 5) + 1;
    v255 = v251 + 32 * (v256 & 0xFFFFFFFFFFFFFFELL);
    v257 = (double *)(v251 + 48);
    v254 = 0.0;
    v258 = v256 & 0xFFFFFFFFFFFFFFELL;
    do
    {
      v259 = *(v257 - 4);
      v260 = *v257;
      v257 += 8;
      *(float *)&v259 = v259;
      v261 = v260;
      v254 = (float)(v254 + *(float *)&v259) + v261;
      v258 -= 2;
    }
    while (v258);
    if (v256 != (v256 & 0xFFFFFFFFFFFFFFELL))
      goto LABEL_353;
  }
LABEL_354:
  v263 = *((double *)v239 + 641);
  v264 = *((unsigned __int8 *)v239 + 5136);
  sub_20E896804(oslog);
  *(float *)&v265 = v263;
  v266 = v265;
  if (!(_DWORD)v264)
    v266 = 0;
  (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)oslog + 64))(*(_QWORD *)oslog, v266 | (v264 << 32));
  v267 = *(std::__shared_weak_count **)&oslog[8];
  if (!*(_QWORD *)&oslog[8])
    goto LABEL_360;
  v268 = (unint64_t *)(*(_QWORD *)&oslog[8] + 8);
  do
    v269 = __ldaxr(v268);
  while (__stlxr(v269 - 1, v268));
  if (!v269)
  {
    ((void (*)(std::__shared_weak_count *))v267->__on_zero_shared)(v267);
    std::__shared_weak_count::__release_weak(v267);
    v238 = v313[1];
    if (!v238)
      goto LABEL_388;
  }
  else
  {
LABEL_360:
    v238 = v313[1];
    if (!v238)
      goto LABEL_388;
  }
LABEL_361:
  v270 = (_QWORD *)*v238;
  if (!*v238 || v270[534] == v270[535] && v270[537] == v270[538] && v270[540] == v270[541] && v270[543] == v270[544])
    goto LABEL_388;
  v271 = sub_210219C18();
  v272 = (v270[538] - v270[537]) >> 5;
  v273 = (v270[544] - v270[543]) >> 4;
  v274 = (v270[541] - v270[540]) >> 5;
  v275 = (v270[535] - v270[534]) >> 5;
  v276 = atomic_load((unsigned __int8 *)&qword_254A6DDD0);
  if ((v276 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DDD0))
  {
    __cxa_atexit((void (*)(void *))sub_21021A250, &stru_254A5A410, &dword_20E81F000);
    __cxa_guard_release(&qword_254A6DDD0);
  }
  v277 = -991146299 * v272;
  v278 = -1431655765 * v273;
  v279 = -991146299 * v274;
  v280 = atomic_load(&qword_254A5A450);
  v281 = "EE";
  v282 = -991146299 * v275;
  if (v280)
  {
    *(_DWORD *)oslog = 134219008;
    *(double *)&oslog[4] = v18;
    *(_WORD *)&oslog[12] = 1024;
    *(_DWORD *)&oslog[14] = -991146299 * v272;
    *(_WORD *)&oslog[18] = 1024;
    *(_DWORD *)&oslog[20] = v278;
    *(_WORD *)&oslog[24] = 1024;
    *(_DWORD *)&oslog[26] = v279;
    *(_WORD *)&oslog[30] = 1024;
    *(_DWORD *)&oslog[32] = -991146299 * v275;
    v283 = (char *)_os_log_send_and_compose_impl();
    v284 = strlen(v283);
    *(_QWORD *)object = 0;
    pthread_threadid_np(0, (__uint64_t *)object);
    v285 = *(_QWORD *)object;
    timespec_get((timespec *)object, 1);
    sub_210219E20(oslog, 0xEEEEB0B5B2B2EEEELL, "Trace", 5uLL, (__int128 *)(v271 + 1), (__int128 *)(v271 + 5), "[Anchors] Timestamp:%f, Updated:%u, External:%u, Removed:%u, New :%u", 0x44uLL, v283, v284, v285, object);
    std::mutex::lock(&stru_254A5A410);
    v286 = qword_254A5A458;
    for (j = unk_254A5A460; v286 != j; v286 += 40)
    {
      v288 = *(_QWORD *)(v286 + 32);
      if (!v288)
        sub_20E86D37C();
      (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v288 + 48))(v288, oslog);
    }
    std::mutex::unlock(&stru_254A5A410);
    if (v330 < 0)
    {
      operator delete(*(void **)&v329[8]);
      v281 = "EE";
      if ((v329[7] & 0x80000000) == 0)
      {
LABEL_373:
        if (!v327[4])
        {
LABEL_379:
          if (oslog[56] && (oslog[55] & 0x80000000) != 0)
            operator delete(*(void **)&oslog[32]);
          if ((oslog[31] & 0x80000000) != 0)
            operator delete(*(void **)&oslog[8]);
          if (v283)
            free(v283);
          goto LABEL_386;
        }
LABEL_377:
        if ((v327[3] & 0x80000000) != 0)
          operator delete(v324);
        goto LABEL_379;
      }
    }
    else
    {
      v281 = "N4cv3d3kit11concurrency6detail21ChannelInputModelBaseINS_3vio8cv_types21ImageProcessingSampleEEE" + 94;
      if ((v329[7] & 0x80000000) == 0)
        goto LABEL_373;
    }
    operator delete(*(void **)&v327[12]);
    if (!v327[4])
      goto LABEL_379;
    goto LABEL_377;
  }
LABEL_386:
  if (os_signpost_enabled((os_log_t)*v271))
  {
    *(_DWORD *)oslog = *((_QWORD *)v281 + 445);
    *(double *)&oslog[4] = v18;
    *(_WORD *)&oslog[12] = 1024;
    *(_DWORD *)&oslog[14] = v277;
    *(_WORD *)&oslog[18] = 1024;
    *(_DWORD *)&oslog[20] = v278;
    *(_WORD *)&oslog[24] = 1024;
    *(_DWORD *)&oslog[26] = v279;
    *(_WORD *)&oslog[30] = 1024;
    *(_DWORD *)&oslog[32] = v282;
    _os_signpost_emit_unreliably_with_name_impl();
  }
LABEL_388:
  for (k = *(uint64_t ***)(a1 + 352); k; k = (uint64_t **)*k)
    (*(void (**)(_QWORD, uint64_t **))(*k[3] + 16))(*k[3], v313);
  if (!v332)
    sub_20E86D37C();
  (*(void (**)(_QWORD *))(*v332 + 48))(v332);
  result = v332;
  if (v332 == v331)
  {
    v292 = 4;
    result = v331;
  }
  else
  {
    if (!v332)
      return result;
    v292 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(_QWORD *, uint64_t))(*result + 8 * v292))(result, v290);
}

void sub_20EC22EA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void *a37)
{
  uint64_t v37;

  if (LOBYTE(STACK[0x218]))
  {
    if (SLOBYTE(STACK[0x217]) < 0)
      operator delete((void *)STACK[0x200]);
  }
  __cxa_guard_abort(&qword_254A4A510);
  sub_20E863714((uint64_t)&a37);
  sub_20E961DB0((_QWORD *)(v37 - 184));
  _Unwind_Resume(a1);
}

void sub_20EC23240(_QWORD *a1)
{
  unsigned __int8 v2;
  void *__p[2];
  char v4;
  uint64_t *v5;

  v2 = atomic_load((unsigned __int8 *)&qword_254A5D158);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254A5D158))
  {
    sub_21021D3D8(&v5);
    sub_20E8610C0(__p, "cv3d.vio");
    sub_20E8C4068(&v5, (uint64_t)__p, &qword_254A5D150);
    if (v4 < 0)
      operator delete(__p[0]);
    __cxa_guard_release(&qword_254A5D158);
  }
  *a1 = qword_254A5D150;
}

void sub_20EC232DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A5D158);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A5D158);
  _Unwind_Resume(a1);
}

unint64_t sub_20EC23334(uint64_t a1, uint64_t *a2)
{
  unint64_t v2;

  v2 = *(_QWORD *)(a1 + 328);
  *(_QWORD *)(a1 + 328) = v2 + 1;
  if ((sub_20EC3E470((uint64_t *)(a1 + 336), v2, v2, *a2, a2[1]) & 1) == 0
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/CAPI/include/VIO/CAPI/BlockRegistry.h", 91, (uint64_t)"inserted.second", 15, (uint64_t)"Blocks must have a unique id", 28, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  return v2;
}

unint64_t sub_20EC233AC(uint64_t a1, uint64_t *a2)
{
  unint64_t v2;

  v2 = *(_QWORD *)(a1 + 272);
  *(_QWORD *)(a1 + 272) = v2 + 1;
  if ((sub_20EC3E470((uint64_t *)(a1 + 280), v2, v2, *a2, a2[1]) & 1) == 0
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/CAPI/include/VIO/CAPI/BlockRegistry.h", 91, (uint64_t)"inserted.second", 15, (uint64_t)"Blocks must have a unique id", 28, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  return v2;
}

BOOL sub_20EC23424(uint64_t a1, unint64_t *a2)
{
  return sub_20EC3E9DC((uint64_t *)(a1 + 336), *a2) != 0;
}

BOOL sub_20EC23448(uint64_t a1, unint64_t *a2)
{
  return sub_20EC3E9DC((uint64_t *)(a1 + 224), *a2) != 0;
}

__n128 sub_20EC2346C@<Q0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  _BYTE *v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  __n128 result;

  *(_OWORD *)a2 = *(_OWORD *)a1;
  *(_BYTE *)(a2 + 16) = 0;
  v4 = (_BYTE *)(a2 + 16);
  *(_BYTE *)(a2 + 40) = 0;
  if (*(_BYTE *)(a1 + 40))
  {
    if (*(char *)(a1 + 39) < 0)
    {
      sub_20E860C04(v4, *(void **)(a1 + 16), *(_QWORD *)(a1 + 24));
    }
    else
    {
      *(_OWORD *)v4 = *(_OWORD *)(a1 + 16);
      *(_QWORD *)(a2 + 32) = *(_QWORD *)(a1 + 32);
    }
    *(_BYTE *)(a2 + 40) = 1;
  }
  v5 = *(_OWORD *)(a1 + 256);
  *(_OWORD *)(a2 + 240) = *(_OWORD *)(a1 + 240);
  *(_OWORD *)(a2 + 256) = v5;
  *(_BYTE *)(a2 + 272) = *(_BYTE *)(a1 + 272);
  v6 = *(_OWORD *)(a1 + 192);
  *(_OWORD *)(a2 + 176) = *(_OWORD *)(a1 + 176);
  *(_OWORD *)(a2 + 192) = v6;
  v7 = *(_OWORD *)(a1 + 224);
  *(_OWORD *)(a2 + 208) = *(_OWORD *)(a1 + 208);
  *(_OWORD *)(a2 + 224) = v7;
  v8 = *(_OWORD *)(a1 + 128);
  *(_OWORD *)(a2 + 112) = *(_OWORD *)(a1 + 112);
  *(_OWORD *)(a2 + 128) = v8;
  v9 = *(_OWORD *)(a1 + 160);
  *(_OWORD *)(a2 + 144) = *(_OWORD *)(a1 + 144);
  *(_OWORD *)(a2 + 160) = v9;
  v10 = *(_OWORD *)(a1 + 64);
  *(_OWORD *)(a2 + 48) = *(_OWORD *)(a1 + 48);
  *(_OWORD *)(a2 + 64) = v10;
  v11 = *(_OWORD *)(a1 + 96);
  *(_OWORD *)(a2 + 80) = *(_OWORD *)(a1 + 80);
  *(_OWORD *)(a2 + 96) = v11;
  *(_BYTE *)(a2 + 280) = 0;
  *(_BYTE *)(a2 + 296) = 0;
  if (*(_BYTE *)(a1 + 296))
  {
    v12 = *(_QWORD *)(a1 + 288);
    *(_QWORD *)(a2 + 280) = *(_QWORD *)(a1 + 280);
    *(_QWORD *)(a2 + 288) = v12;
    if (v12)
    {
      v13 = (unint64_t *)(v12 + 8);
      do
        v14 = __ldxr(v13);
      while (__stxr(v14 + 1, v13));
    }
    *(_BYTE *)(a2 + 296) = 1;
  }
  *(_OWORD *)(a2 + 304) = *(_OWORD *)(a1 + 304);
  *(_QWORD *)(a2 + 320) = *(_QWORD *)(a1 + 320);
  *(_WORD *)(a2 + 344) = *(_WORD *)(a1 + 344);
  result = *(__n128 *)(a1 + 328);
  *(__n128 *)(a2 + 328) = result;
  return result;
}

void sub_20EC23584(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;

  if (*(_BYTE *)(v1 + 40))
  {
    if (*(char *)(v1 + 39) < 0)
      operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

__n128 sub_20EC235A8@<Q0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  _BYTE *v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  __n128 result;

  *(_OWORD *)a2 = *(_OWORD *)a1;
  *(_BYTE *)(a2 + 16) = 0;
  v4 = (_BYTE *)(a2 + 16);
  *(_BYTE *)(a2 + 40) = 0;
  if (*(_BYTE *)(a1 + 40))
  {
    if (*(char *)(a1 + 39) < 0)
    {
      sub_20E860C04(v4, *(void **)(a1 + 16), *(_QWORD *)(a1 + 24));
    }
    else
    {
      *(_OWORD *)v4 = *(_OWORD *)(a1 + 16);
      *(_QWORD *)(a2 + 32) = *(_QWORD *)(a1 + 32);
    }
    *(_BYTE *)(a2 + 40) = 1;
  }
  v5 = *(_OWORD *)(a1 + 256);
  *(_OWORD *)(a2 + 240) = *(_OWORD *)(a1 + 240);
  *(_OWORD *)(a2 + 256) = v5;
  *(_BYTE *)(a2 + 272) = *(_BYTE *)(a1 + 272);
  v6 = *(_OWORD *)(a1 + 192);
  *(_OWORD *)(a2 + 176) = *(_OWORD *)(a1 + 176);
  *(_OWORD *)(a2 + 192) = v6;
  v7 = *(_OWORD *)(a1 + 224);
  *(_OWORD *)(a2 + 208) = *(_OWORD *)(a1 + 208);
  *(_OWORD *)(a2 + 224) = v7;
  v8 = *(_OWORD *)(a1 + 128);
  *(_OWORD *)(a2 + 112) = *(_OWORD *)(a1 + 112);
  *(_OWORD *)(a2 + 128) = v8;
  v9 = *(_OWORD *)(a1 + 160);
  *(_OWORD *)(a2 + 144) = *(_OWORD *)(a1 + 144);
  *(_OWORD *)(a2 + 160) = v9;
  v10 = *(_OWORD *)(a1 + 64);
  *(_OWORD *)(a2 + 48) = *(_OWORD *)(a1 + 48);
  *(_OWORD *)(a2 + 64) = v10;
  v11 = *(_OWORD *)(a1 + 96);
  *(_OWORD *)(a2 + 80) = *(_OWORD *)(a1 + 80);
  *(_OWORD *)(a2 + 96) = v11;
  *(_BYTE *)(a2 + 280) = 0;
  *(_BYTE *)(a2 + 296) = 0;
  if (*(_BYTE *)(a1 + 296))
  {
    v12 = *(_QWORD *)(a1 + 288);
    *(_QWORD *)(a2 + 280) = *(_QWORD *)(a1 + 280);
    *(_QWORD *)(a2 + 288) = v12;
    if (v12)
    {
      v13 = (unint64_t *)(v12 + 8);
      do
        v14 = __ldxr(v13);
      while (__stxr(v14 + 1, v13));
    }
    *(_BYTE *)(a2 + 296) = 1;
  }
  *(_OWORD *)(a2 + 304) = *(_OWORD *)(a1 + 304);
  *(_QWORD *)(a2 + 320) = *(_QWORD *)(a1 + 320);
  *(_WORD *)(a2 + 344) = *(_WORD *)(a1 + 344);
  result = *(__n128 *)(a1 + 328);
  *(__n128 *)(a2 + 328) = result;
  return result;
}

void sub_20EC236C0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;

  if (*(_BYTE *)(v1 + 40))
  {
    if (*(char *)(v1 + 39) < 0)
      operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20EC236E4@<X0>(uint64_t *a1@<X1>, _QWORD *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  return sub_20EC06C80(a2, *a1, a1[1], (a1[1] - *a1) >> 4);
}

_QWORD *sub_20EC23704@<X0>(uint64_t *a1@<X1>, _QWORD *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  return sub_20EC06C80(a2, *a1, a1[1], (a1[1] - *a1) >> 4);
}

uint64_t sub_20EC23724(_QWORD *a1)
{
  _QWORD *v2;
  void *v3;
  _QWORD *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;

  *a1 = &off_24C9CCB40;
  a1[7] = &unk_24C9CCB88;
  a1[14] = &unk_24C9CCBB0;
  a1[21] = &unk_24C9CCBD8;
  a1[28] = &unk_24C9CCC00;
  v2 = (_QWORD *)a1[44];
  while (v2)
  {
    v5 = v2;
    v2 = (_QWORD *)*v2;
    v6 = (std::__shared_weak_count *)v5[4];
    if (v6)
    {
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
    operator delete(v5);
  }
  v3 = (void *)a1[42];
  a1[42] = 0;
  if (v3)
    operator delete(v3);
  return sub_20EC20B2C((uint64_t)a1);
}

void sub_20EC237E0(_QWORD *a1)
{
  _QWORD *v2;
  void *v3;
  _QWORD *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  *a1 = &off_24C9CCB40;
  a1[7] = &unk_24C9CCB88;
  a1[14] = &unk_24C9CCBB0;
  a1[21] = &unk_24C9CCBD8;
  a1[28] = &unk_24C9CCC00;
  v2 = (_QWORD *)a1[44];
  while (v2)
  {
    v4 = v2;
    v2 = (_QWORD *)*v2;
    v5 = (std::__shared_weak_count *)v4[4];
    if (v5)
    {
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    operator delete(v4);
  }
  v3 = (void *)a1[42];
  a1[42] = 0;
  if (v3)
    operator delete(v3);
  sub_20EC20B2C((uint64_t)a1);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20EC238B0(_QWORD *a1)
{
  uint64_t v2;
  _QWORD *v3;
  void *v4;
  _QWORD *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  *(a1 - 7) = &off_24C9CCB40;
  v2 = (uint64_t)(a1 - 7);
  *a1 = &unk_24C9CCB88;
  a1[7] = &unk_24C9CCBB0;
  a1[14] = &unk_24C9CCBD8;
  a1[21] = &unk_24C9CCC00;
  v3 = (_QWORD *)a1[37];
  while (v3)
  {
    v6 = v3;
    v3 = (_QWORD *)*v3;
    v7 = (std::__shared_weak_count *)v6[4];
    if (v7)
    {
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
    operator delete(v6);
  }
  v4 = (void *)a1[35];
  a1[35] = 0;
  if (v4)
    operator delete(v4);
  return sub_20EC20B2C(v2);
}

void sub_20EC23978(_QWORD *a1)
{
  uint64_t v2;
  _QWORD *v3;
  void *v4;
  _QWORD *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;

  *(a1 - 7) = &off_24C9CCB40;
  v2 = (uint64_t)(a1 - 7);
  *a1 = &unk_24C9CCB88;
  a1[7] = &unk_24C9CCBB0;
  a1[14] = &unk_24C9CCBD8;
  a1[21] = &unk_24C9CCC00;
  v3 = (_QWORD *)a1[37];
  while (v3)
  {
    v5 = v3;
    v3 = (_QWORD *)*v3;
    v6 = (std::__shared_weak_count *)v5[4];
    if (v6)
    {
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
    operator delete(v5);
  }
  v4 = (void *)a1[35];
  a1[35] = 0;
  if (v4)
    operator delete(v4);
  sub_20EC20B2C(v2);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20EC23A54(_QWORD *a1)
{
  uint64_t v2;
  _QWORD *v3;
  void *v4;
  _QWORD *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  *(a1 - 14) = &off_24C9CCB40;
  v2 = (uint64_t)(a1 - 14);
  *(a1 - 7) = &unk_24C9CCB88;
  *a1 = &unk_24C9CCBB0;
  a1[7] = &unk_24C9CCBD8;
  a1[14] = &unk_24C9CCC00;
  v3 = (_QWORD *)a1[30];
  while (v3)
  {
    v6 = v3;
    v3 = (_QWORD *)*v3;
    v7 = (std::__shared_weak_count *)v6[4];
    if (v7)
    {
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
    operator delete(v6);
  }
  v4 = (void *)a1[28];
  a1[28] = 0;
  if (v4)
    operator delete(v4);
  return sub_20EC20B2C(v2);
}

void sub_20EC23B1C(_QWORD *a1)
{
  uint64_t v2;
  _QWORD *v3;
  void *v4;
  _QWORD *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;

  *(a1 - 14) = &off_24C9CCB40;
  v2 = (uint64_t)(a1 - 14);
  *(a1 - 7) = &unk_24C9CCB88;
  *a1 = &unk_24C9CCBB0;
  a1[7] = &unk_24C9CCBD8;
  a1[14] = &unk_24C9CCC00;
  v3 = (_QWORD *)a1[30];
  while (v3)
  {
    v5 = v3;
    v3 = (_QWORD *)*v3;
    v6 = (std::__shared_weak_count *)v5[4];
    if (v6)
    {
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
    operator delete(v5);
  }
  v4 = (void *)a1[28];
  a1[28] = 0;
  if (v4)
    operator delete(v4);
  sub_20EC20B2C(v2);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20EC23BF8(_QWORD *a1)
{
  uint64_t v2;
  _QWORD *v3;
  void *v4;
  _QWORD *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  *(a1 - 21) = &off_24C9CCB40;
  v2 = (uint64_t)(a1 - 21);
  *(a1 - 14) = &unk_24C9CCB88;
  *(a1 - 7) = &unk_24C9CCBB0;
  *a1 = &unk_24C9CCBD8;
  a1[7] = &unk_24C9CCC00;
  v3 = (_QWORD *)a1[23];
  while (v3)
  {
    v6 = v3;
    v3 = (_QWORD *)*v3;
    v7 = (std::__shared_weak_count *)v6[4];
    if (v7)
    {
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
    operator delete(v6);
  }
  v4 = (void *)a1[21];
  a1[21] = 0;
  if (v4)
    operator delete(v4);
  return sub_20EC20B2C(v2);
}

void sub_20EC23CC0(_QWORD *a1)
{
  uint64_t v2;
  _QWORD *v3;
  void *v4;
  _QWORD *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;

  *(a1 - 21) = &off_24C9CCB40;
  v2 = (uint64_t)(a1 - 21);
  *(a1 - 14) = &unk_24C9CCB88;
  *(a1 - 7) = &unk_24C9CCBB0;
  *a1 = &unk_24C9CCBD8;
  a1[7] = &unk_24C9CCC00;
  v3 = (_QWORD *)a1[23];
  while (v3)
  {
    v5 = v3;
    v3 = (_QWORD *)*v3;
    v6 = (std::__shared_weak_count *)v5[4];
    if (v6)
    {
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
    operator delete(v5);
  }
  v4 = (void *)a1[21];
  a1[21] = 0;
  if (v4)
    operator delete(v4);
  sub_20EC20B2C(v2);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20EC23D9C(_QWORD *a1)
{
  uint64_t v2;
  _QWORD *v3;
  void *v4;
  _QWORD *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  *(a1 - 28) = &off_24C9CCB40;
  v2 = (uint64_t)(a1 - 28);
  *(a1 - 21) = &unk_24C9CCB88;
  *(a1 - 14) = &unk_24C9CCBB0;
  *(a1 - 7) = &unk_24C9CCBD8;
  *a1 = &unk_24C9CCC00;
  v3 = (_QWORD *)a1[16];
  while (v3)
  {
    v6 = v3;
    v3 = (_QWORD *)*v3;
    v7 = (std::__shared_weak_count *)v6[4];
    if (v7)
    {
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
    operator delete(v6);
  }
  v4 = (void *)a1[14];
  a1[14] = 0;
  if (v4)
    operator delete(v4);
  return sub_20EC20B2C(v2);
}

void sub_20EC23E64(_QWORD *a1)
{
  uint64_t v2;
  _QWORD *v3;
  void *v4;
  _QWORD *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;

  *(a1 - 28) = &off_24C9CCB40;
  v2 = (uint64_t)(a1 - 28);
  *(a1 - 21) = &unk_24C9CCB88;
  *(a1 - 14) = &unk_24C9CCBB0;
  *(a1 - 7) = &unk_24C9CCBD8;
  *a1 = &unk_24C9CCC00;
  v3 = (_QWORD *)a1[16];
  while (v3)
  {
    v5 = v3;
    v3 = (_QWORD *)*v3;
    v6 = (std::__shared_weak_count *)v5[4];
    if (v6)
    {
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
    operator delete(v5);
  }
  v4 = (void *)a1[14];
  a1[14] = 0;
  if (v4)
    operator delete(v4);
  sub_20EC20B2C(v2);
  JUMPOUT(0x212BC6398);
}

void sub_20EC23F88(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9CCE50;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_20EC23F98(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9CCE50;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20EC23FC8(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t sub_20EC23FD8(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  _QWORD v19[2];

  *(_QWORD *)a1 = &off_24C9CC868;
  v6 = *a3;
  if (*(char *)(*a3 + 303) < 0)
  {
    sub_20E860C04((_BYTE *)(a1 + 8), *(void **)(v6 + 280), *(_QWORD *)(v6 + 288));
    v9 = a1 + 32;
    v10 = *a3;
    if ((*(char *)(*a3 + 327) & 0x80000000) == 0)
      goto LABEL_3;
  }
  else
  {
    v7 = v6 + 280;
    v8 = *(_OWORD *)v7;
    *(_QWORD *)(a1 + 24) = *(_QWORD *)(v7 + 16);
    *(_OWORD *)(a1 + 8) = v8;
    v9 = a1 + 32;
    v10 = *a3;
    if ((*(char *)(*a3 + 327) & 0x80000000) == 0)
    {
LABEL_3:
      v11 = v10 + 304;
      v12 = *(_OWORD *)v11;
      *(_QWORD *)(v9 + 16) = *(_QWORD *)(v11 + 16);
      *(_OWORD *)v9 = v12;
      goto LABEL_6;
    }
  }
  sub_20E860C04((_BYTE *)v9, *(void **)(v10 + 304), *(_QWORD *)(v10 + 312));
LABEL_6:
  *(_OWORD *)(a1 + 56) = *(_OWORD *)a2;
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  v13 = *(std::__shared_weak_count **)(a1 + 64);
  v19[0] = *(_QWORD *)(a1 + 56);
  v19[1] = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v15 = __ldxr(p_shared_owners);
    while (__stxr(v15 + 1, p_shared_owners));
  }
  sub_20EC24168((uint64_t *)(a1 + 72), (uint64_t)v19, a3);
  if (v13)
  {
    v16 = (unint64_t *)&v13->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  return a1;
}

void sub_20EC2410C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;

  if ((*(char *)(v1 + 31) & 0x80000000) == 0)
    _Unwind_Resume(exception_object);
  operator delete(*v2);
  _Unwind_Resume(exception_object);
}

void sub_20EC24168(uint64_t *a1, uint64_t a2, uint64_t *a3)
{
  unint64_t *v6;
  void *v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t *v12;
  unint64_t v13;
  __int128 v14;
  unint64_t *v15;
  unint64_t v16;
  void *v17;
  void *v18;
  char v19;
  unint64_t *v20;
  unint64_t v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  _QWORD *v25;
  std::__shared_weak_count *v26;
  unint64_t *p_shared_owners;
  std::__shared_weak_count *v28;
  unint64_t v29;
  unint64_t *p_shared_weak_owners;
  unint64_t v31;
  unint64_t v32;
  unint64_t *v33;
  unint64_t v34;
  unint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  unint64_t *v54;
  void *v55;
  unint64_t *v56;
  unint64_t v57;
  std::__shared_weak_count *v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t *v61;
  unint64_t v62;
  __int128 v63;
  unint64_t *v64;
  unint64_t v65;
  void *v66;
  void *v67;
  char v68;
  unint64_t *v69;
  unint64_t v70;
  char *v71;
  __int128 v72;
  uint64_t v73;
  _QWORD *v74;
  std::__shared_weak_count *v75;
  unint64_t *v76;
  std::__shared_weak_count *v77;
  unint64_t v78;
  unint64_t *v79;
  unint64_t v80;
  unint64_t v81;
  unint64_t *v82;
  unint64_t v83;
  unint64_t v84;
  std::__shared_weak_count *v85;
  unint64_t *v86;
  unint64_t v87;
  std::__shared_weak_count *v88;
  unint64_t *v89;
  unint64_t v90;
  __int128 v91;
  void *v92;
  void *v93;
  char *v94;
  unint64_t *v95;
  unint64_t v96;
  _QWORD *v97;
  uint64_t v98;
  uint64_t v99;
  unint64_t *v100;
  unint64_t v101;
  uint64_t v102;
  unint64_t v103;
  unint64_t *v104;
  unint64_t v105;
  uint64_t v106;
  unint64_t *v107;
  unint64_t v108;
  uint64_t v109;
  std::__shared_weak_count *v110;
  unint64_t *v111;
  unint64_t v112;
  std::__shared_weak_count *v113;
  unint64_t *v114;
  unint64_t v115;
  unint64_t *v116;
  void *v117;
  unint64_t *v118;
  unint64_t v119;
  std::__shared_weak_count *v120;
  uint64_t v121;
  uint64_t v122;
  unint64_t *v123;
  unint64_t v124;
  __int128 v125;
  unint64_t *v126;
  unint64_t v127;
  __int128 v128;
  char v129;
  unint64_t *v130;
  unint64_t v131;
  char *v132;
  __int128 v133;
  uint64_t v134;
  _QWORD *v135;
  std::__shared_weak_count *v136;
  unint64_t *v137;
  std::__shared_weak_count *v138;
  unint64_t v139;
  unint64_t *v140;
  unint64_t v141;
  unint64_t v142;
  unint64_t *v143;
  unint64_t v144;
  unint64_t v145;
  std::__shared_weak_count *v146;
  unint64_t *v147;
  unint64_t v148;
  std::__shared_weak_count *v149;
  unint64_t *v150;
  unint64_t v151;
  __int128 v152;
  void *v153;
  void *v154;
  char *v155;
  unint64_t *v156;
  unint64_t v157;
  _QWORD *v158;
  uint64_t v159;
  uint64_t v160;
  unint64_t *v161;
  unint64_t v162;
  uint64_t v163;
  unint64_t v164;
  unint64_t *v165;
  unint64_t v166;
  uint64_t v167;
  unint64_t *v168;
  unint64_t v169;
  uint64_t v170;
  std::__shared_weak_count *v171;
  unint64_t *v172;
  unint64_t v173;
  std::__shared_weak_count *v174;
  unint64_t *v175;
  unint64_t v176;
  std::__shared_weak_count *v177;
  void *v178;
  unint64_t *v179;
  unint64_t v180;
  std::__shared_weak_count *v181;
  uint64_t v182;
  uint64_t v183;
  unint64_t *v184;
  unint64_t v185;
  __int128 v186;
  unint64_t *v187;
  unint64_t v188;
  void *v189;
  void *v190;
  char v191;
  unint64_t *v192;
  unint64_t v193;
  char *v194;
  __int128 v195;
  uint64_t v196;
  _QWORD *v197;
  std::__shared_weak_count *v198;
  unint64_t *v199;
  std::__shared_weak_count *v200;
  unint64_t v201;
  unint64_t *v202;
  unint64_t v203;
  unint64_t v204;
  unint64_t *v205;
  unint64_t v206;
  unint64_t v207;
  std::__shared_weak_count *v208;
  unint64_t *v209;
  unint64_t v210;
  std::__shared_weak_count *v211;
  unint64_t *v212;
  unint64_t v213;
  __int128 v214;
  uint64_t v215;
  void *v216;
  char *v217;
  unint64_t *v218;
  unint64_t v219;
  _QWORD *v220;
  uint64_t v221;
  uint64_t v222;
  unint64_t *v223;
  unint64_t v224;
  uint64_t v225;
  unint64_t v226;
  unint64_t *v227;
  unint64_t v228;
  uint64_t v229;
  unint64_t *v230;
  unint64_t v231;
  uint64_t v232;
  std::__shared_weak_count *v233;
  unint64_t *v234;
  unint64_t v235;
  std::__shared_weak_count *v236;
  unint64_t *v237;
  unint64_t v238;
  uint64_t v239;
  void *v240;
  unint64_t *v241;
  unint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  unint64_t *v246;
  unint64_t v247;
  __int128 v248;
  unint64_t *v249;
  unint64_t v250;
  void *v251;
  void *v252;
  char v253;
  unint64_t *v254;
  unint64_t v255;
  uint64_t v256;
  __int128 v257;
  uint64_t v258;
  _QWORD *v259;
  std::__shared_weak_count *v260;
  unint64_t *v261;
  std::__shared_weak_count *v262;
  unint64_t v263;
  unint64_t *v264;
  unint64_t v265;
  unint64_t v266;
  unint64_t *v267;
  unint64_t v268;
  unint64_t v269;
  std::__shared_weak_count *v270;
  unint64_t *v271;
  unint64_t v272;
  std::__shared_weak_count *v273;
  unint64_t *v274;
  unint64_t v275;
  __int128 v276;
  __int128 v277;
  unint64_t *v278;
  unint64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  unint64_t *v283;
  unint64_t v284;
  uint64_t v285;
  unint64_t v286;
  unint64_t *v287;
  unint64_t v288;
  uint64_t v289;
  unint64_t *v290;
  unint64_t v291;
  uint64_t v292;
  std::__shared_weak_count *v293;
  unint64_t *v294;
  unint64_t v295;
  std::__shared_weak_count *v296;
  unint64_t *v297;
  unint64_t v298;
  uint64_t v299;
  uint64_t v300;
  __int128 v301;
  __int128 v302;
  __int128 v303;
  __int128 v304;
  __int128 v305;
  __int128 v306;
  __int128 v307;
  __int128 v308;
  __int128 v309;
  __int128 v310;
  uint64_t v311;
  __int128 v312;
  __int128 v313;
  __int128 v314;
  __int128 v315;
  uint64_t v316;
  __int128 v317;
  __int128 v318;
  __int128 v319;
  __int128 v320;
  __int128 v321;
  __int128 v322;
  __int128 v323;
  __int128 v324;
  unint64_t *v325;
  unint64_t v326;
  std::__shared_weak_count *v327;
  unint64_t *v328;
  unint64_t v329;
  std::__shared_weak_count *v330;
  unint64_t *v331;
  unint64_t v332;
  std::__shared_weak_count *v333;
  unint64_t *v334;
  unint64_t v335;
  std::__shared_weak_count *v336;
  unint64_t *v337;
  unint64_t v338;
  std::__shared_weak_count *v339;
  unint64_t *v340;
  unint64_t v341;
  std::__shared_weak_count *v342;
  unint64_t *v343;
  unint64_t v344;
  std::__shared_weak_count *v345;
  unint64_t *v346;
  unint64_t v347;
  std::__shared_weak_count *v348;
  unint64_t *v349;
  unint64_t v350;
  uint64_t *v351;
  std::__shared_weak_count *v352;
  void *v353[3];
  uint64_t v354;
  __int128 v355;
  void *v356;
  __int128 v357;
  __int128 v358;
  uint64_t (**v359)();
  __int128 v360;
  uint64_t v361;
  uint64_t (**v362)();
  __int128 v363;
  uint64_t (**v364)();
  __int128 v365;
  uint64_t v366;
  std::__shared_weak_count *v367;
  void *v368;
  std::__shared_weak_count *v369;
  void *__dst[3];
  void *v371;
  __int128 v372;
  uint64_t v373;
  __int128 v374;
  __int128 v375;
  uint64_t (**v376)();
  __int128 v377;
  uint64_t v378;
  uint64_t (**v379)();
  __int128 v380;
  uint64_t (**v381)();
  __int128 v382;
  uint64_t v383;
  std::__shared_weak_count *v384;
  void *v385;
  std::__shared_weak_count *v386;
  void *__p[3];
  void *v388;
  __int128 v389;
  void *v390;
  __int128 v391;
  __int128 v392;
  uint64_t (**v393)();
  __int128 v394;
  uint64_t v395;
  uint64_t (**v396)();
  __int128 v397;
  uint64_t (**v398)();
  __int128 v399;
  uint64_t v400;
  std::__shared_weak_count *v401;
  void *v402;
  std::__shared_weak_count *v403;
  _BYTE v404[24];
  void *v405;
  __int128 v406;
  void *v407;
  __int128 v408;
  __int128 v409;
  uint64_t (**v410)();
  __int128 v411;
  uint64_t v412;
  uint64_t (**v413)();
  __int128 v414;
  uint64_t (**v415)();
  __int128 v416;
  uint64_t v417;
  std::__shared_weak_count *v418;
  void *v419;
  std::__shared_weak_count *v420;
  char v421[8];
  __int128 v422;
  uint64_t v423;
  __int128 v424;
  uint64_t v425;
  __int128 v426;
  __int128 v427;
  __int128 v428;
  uint64_t v429;
  __int128 v430;
  __int128 v431;
  void *v432[2];
  void *v433;
  void *v434[4];
  void *__src[4];
  _OWORD v436[2];
  __int128 v437;
  __int128 v438;
  _QWORD v439[2];
  __int128 v440;
  _QWORD v441[2];
  __int128 v442;
  _QWORD v443[5];

  v443[2] = *MEMORY[0x24BDAC8D0];
  v7 = *(void **)a2;
  v6 = *(unint64_t **)(a2 + 8);
  v419 = *(void **)a2;
  v420 = (std::__shared_weak_count *)v6;
  if (v6)
  {
    v8 = v6 + 1;
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  v10 = *a3;
  v11 = (unint64_t *)a3[1];
  v417 = *a3;
  v418 = (std::__shared_weak_count *)v11;
  if (v11)
  {
    v12 = v11 + 1;
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  if (*(char *)(v10 + 31) < 0)
  {
    sub_20E860C04(__dst, *(void **)(v10 + 8), *(_QWORD *)(v10 + 16));
  }
  else
  {
    v14 = *(_OWORD *)(v10 + 8);
    __dst[2] = *(void **)(v10 + 24);
    *(_OWORD *)__dst = v14;
  }
  if (*(char *)(v10 + 55) < 0)
  {
    sub_20E860C04(v353, *(void **)(v10 + 32), *(_QWORD *)(v10 + 40));
  }
  else
  {
    *(_OWORD *)v353 = *(_OWORD *)(v10 + 32);
    v353[2] = *(void **)(v10 + 48);
  }
  v434[0] = v7;
  v434[1] = v6;
  v420 = 0;
  v419 = 0;
  v432[0] = (void *)v10;
  v432[1] = v11;
  if (v11)
  {
    v15 = v11 + 1;
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
  }
  if (SHIBYTE(__dst[2]) < 0)
  {
    sub_20E860C04(v404, __dst[0], (unint64_t)__dst[1]);
  }
  else
  {
    *(_OWORD *)v404 = *(_OWORD *)__dst;
    *(void **)&v404[16] = __dst[2];
  }
  if (SHIBYTE(v353[2]) < 0)
  {
    sub_20E860C04(__p, v353[0], (unint64_t)v353[1]);
  }
  else
  {
    *(_OWORD *)__p = *(_OWORD *)v353;
    __p[2] = v353[2];
  }
  *(void **)((char *)&v438 + 7) = *(void **)((char *)&__dst[1] + 7);
  v18 = __dst[0];
  v17 = __dst[1];
  BYTE7(v438) = HIBYTE(__dst[1]);
  v19 = HIBYTE(__dst[2]);
  memset(__dst, 0, sizeof(__dst));
  *(_QWORD *)&v440 = v17;
  *(_QWORD *)((char *)&v440 + 7) = *(_QWORD *)((char *)&v438 + 7);
  *(_QWORD *)((char *)&v438 + 7) = 0;
  *(_QWORD *)&v438 = 0;
  __src[0] = v7;
  __src[1] = v6;
  if (v6)
  {
    v20 = v6 + 1;
    do
      v21 = __ldxr(v20);
    while (__stxr(v21 + 1, v20));
  }
  v22 = operator new();
  *(_QWORD *)&v442 = v440;
  *(_QWORD *)((char *)&v442 + 7) = *(_QWORD *)((char *)&v440 + 7);
  *(_QWORD *)&v440 = 0;
  *(_QWORD *)((char *)&v440 + 7) = 0;
  v23 = *(_OWORD *)__src;
  __src[0] = 0;
  __src[1] = 0;
  *(_BYTE *)(v22 + 8) = 1;
  *(_QWORD *)(v22 + 32) = 0;
  *(_QWORD *)(v22 + 40) = 0;
  *(_QWORD *)v22 = &off_24C9CCEA0;
  *(_QWORD *)(v22 + 16) = &unk_24C9CCF18;
  *(_QWORD *)(v22 + 24) = &unk_24C9CCF58;
  v24 = v442;
  *(_QWORD *)(v22 + 63) = *(_QWORD *)((char *)&v442 + 7);
  *(_QWORD *)(v22 + 48) = v18;
  *(_QWORD *)(v22 + 56) = v24;
  *(_BYTE *)(v22 + 71) = v19;
  *(_QWORD *)&v442 = 0;
  *(_QWORD *)((char *)&v442 + 7) = 0;
  *(_OWORD *)(v22 + 72) = v23;
  v436[0] = 0uLL;
  v25 = (_QWORD *)operator new();
  *v25 = &off_24C9CCFD0;
  v25[1] = v10;
  v25[2] = v11;
  v432[1] = 0;
  v432[0] = 0;
  *(_QWORD *)(v22 + 144) = 0;
  *(_QWORD *)(v22 + 88) = v25;
  *(_QWORD *)(v22 + 96) = v22 + 96;
  *(_QWORD *)(v22 + 104) = v22 + 96;
  *(_QWORD *)(v22 + 112) = 0;
  *(_QWORD *)(v22 + 120) = v22 + 120;
  *(_QWORD *)(v22 + 128) = v22 + 120;
  *(_QWORD *)(v22 + 136) = 0;
  if (!*(_QWORD *)(v22 + 72)
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 109, (uint64_t)"scheduler_", 10, (uint64_t)"scheduler must be valid", 23, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v26 = (std::__shared_weak_count *)operator new();
  v26->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v26->__shared_owners_;
  v26->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9CD460;
  v26->__shared_weak_owners_ = 0;
  v26[1].__vftable = (std::__shared_weak_count_vtbl *)v22;
  v28 = *(std::__shared_weak_count **)(v22 + 40);
  if (v28)
  {
    if (v28->__shared_owners_ != -1)
      goto LABEL_40;
    do
      v29 = __ldxr(p_shared_owners);
    while (__stxr(v29 + 1, p_shared_owners));
    p_shared_weak_owners = (unint64_t *)&v26->__shared_weak_owners_;
    do
      v31 = __ldxr(p_shared_weak_owners);
    while (__stxr(v31 + 1, p_shared_weak_owners));
    *(_QWORD *)(v22 + 32) = v22;
    *(_QWORD *)(v22 + 40) = v26;
    std::__shared_weak_count::__release_weak(v28);
  }
  else
  {
    do
      v32 = __ldxr(p_shared_owners);
    while (__stxr(v32 + 1, p_shared_owners));
    v33 = (unint64_t *)&v26->__shared_weak_owners_;
    do
      v34 = __ldxr(v33);
    while (__stxr(v34 + 1, v33));
    *(_QWORD *)(v22 + 32) = v22;
    *(_QWORD *)(v22 + 40) = v26;
  }
  do
    v35 = __ldaxr(p_shared_owners);
  while (__stlxr(v35 - 1, p_shared_owners));
  if (!v35)
  {
    ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
    std::__shared_weak_count::__release_weak(v26);
  }
LABEL_40:
  v36 = (std::__shared_weak_count *)*((_QWORD *)&v436[0] + 1);
  if (*((_QWORD *)&v436[0] + 1))
  {
    v37 = (unint64_t *)(*((_QWORD *)&v436[0] + 1) + 8);
    do
      v38 = __ldaxr(v37);
    while (__stlxr(v38 - 1, v37));
    if (!v38)
    {
      ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
      std::__shared_weak_count::__release_weak(v36);
    }
  }
  *(_QWORD *)&v436[0] = v22;
  *((_QWORD *)&v436[0] + 1) = v26;
  v39 = (std::__shared_weak_count *)__src[1];
  if (__src[1])
  {
    v40 = (unint64_t *)((char *)__src[1] + 8);
    do
      v41 = __ldaxr(v40);
    while (__stlxr(v41 - 1, v40));
    if (!v41)
    {
      ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
      std::__shared_weak_count::__release_weak(v39);
    }
  }
  *(_OWORD *)__src = *(_OWORD *)v434;
  v434[0] = 0;
  v434[1] = 0;
  sub_20E9B7768((uint64_t)v421, (__int128 *)v404, (__int128 *)__p, (uint64_t)v436, (uint64_t)__src);
  v42 = (std::__shared_weak_count *)__src[1];
  if (__src[1])
  {
    v43 = (unint64_t *)((char *)__src[1] + 8);
    do
      v44 = __ldaxr(v43);
    while (__stlxr(v44 - 1, v43));
    if (!v44)
    {
      ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
      std::__shared_weak_count::__release_weak(v42);
    }
  }
  v45 = (std::__shared_weak_count *)*((_QWORD *)&v436[0] + 1);
  if (!*((_QWORD *)&v436[0] + 1))
    goto LABEL_59;
  v46 = (unint64_t *)(*((_QWORD *)&v436[0] + 1) + 8);
  do
    v47 = __ldaxr(v46);
  while (__stlxr(v47 - 1, v46));
  if (!v47)
  {
    ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
    std::__shared_weak_count::__release_weak(v45);
    if ((SHIBYTE(__p[2]) & 0x80000000) == 0)
    {
LABEL_60:
      if ((v404[23] & 0x80000000) == 0)
        goto LABEL_61;
LABEL_65:
      operator delete(*(void **)v404);
      v48 = (std::__shared_weak_count *)v432[1];
      if (!v432[1])
        goto LABEL_70;
      goto LABEL_66;
    }
  }
  else
  {
LABEL_59:
    if ((SHIBYTE(__p[2]) & 0x80000000) == 0)
      goto LABEL_60;
  }
  operator delete(__p[0]);
  if ((v404[23] & 0x80000000) != 0)
    goto LABEL_65;
LABEL_61:
  v48 = (std::__shared_weak_count *)v432[1];
  if (!v432[1])
    goto LABEL_70;
LABEL_66:
  v49 = (unint64_t *)&v48->__shared_owners_;
  do
    v50 = __ldaxr(v49);
  while (__stlxr(v50 - 1, v49));
  if (!v50)
  {
    ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
    std::__shared_weak_count::__release_weak(v48);
  }
LABEL_70:
  v51 = (std::__shared_weak_count *)v434[1];
  if (!v434[1])
    goto LABEL_74;
  v52 = (unint64_t *)((char *)v434[1] + 8);
  do
    v53 = __ldaxr(v52);
  while (__stlxr(v53 - 1, v52));
  if (!v53)
  {
    ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
    std::__shared_weak_count::__release_weak(v51);
    if ((SHIBYTE(v353[2]) & 0x80000000) == 0)
    {
LABEL_75:
      if ((SHIBYTE(__dst[2]) & 0x80000000) == 0)
        goto LABEL_76;
LABEL_80:
      operator delete(__dst[0]);
      if (v417)
        goto LABEL_82;
      goto LABEL_81;
    }
  }
  else
  {
LABEL_74:
    if ((SHIBYTE(v353[2]) & 0x80000000) == 0)
      goto LABEL_75;
  }
  operator delete(v353[0]);
  if (SHIBYTE(__dst[2]) < 0)
    goto LABEL_80;
LABEL_76:
  if (v417)
    goto LABEL_82;
LABEL_81:
  if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/Channel.h", 542, (uint64_t)"worker", 6, (uint64_t)"Callable must be valid", 22, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
LABEL_82:
  v55 = *(void **)a2;
  v54 = *(unint64_t **)(a2 + 8);
  v402 = *(void **)a2;
  v403 = (std::__shared_weak_count *)v54;
  if (v54)
  {
    v56 = v54 + 1;
    do
      v57 = __ldxr(v56);
    while (__stxr(v57 + 1, v56));
  }
  v59 = *a3;
  v58 = (std::__shared_weak_count *)a3[1];
  if (*a3)
    v60 = *a3 + 56;
  else
    v60 = 0;
  v400 = v60;
  v401 = v58;
  if (v58)
  {
    v61 = (unint64_t *)&v58->__shared_owners_;
    do
      v62 = __ldxr(v61);
    while (__stxr(v62 + 1, v61));
  }
  if (*(char *)(v60 + 31) < 0)
  {
    sub_20E860C04(v353, *(void **)(v60 + 8), *(_QWORD *)(v60 + 16));
  }
  else
  {
    v63 = *(_OWORD *)(v60 + 8);
    v353[2] = *(void **)(v60 + 24);
    *(_OWORD *)v353 = v63;
  }
  if (*(char *)(v59 + 111) < 0)
  {
    sub_20E860C04(v436, *(void **)(v59 + 88), *(_QWORD *)(v59 + 96));
  }
  else
  {
    v436[0] = *(_OWORD *)(v59 + 88);
    *(_QWORD *)&v436[1] = *(_QWORD *)(v59 + 104);
  }
  v432[0] = v55;
  v432[1] = v54;
  v403 = 0;
  v402 = 0;
  *(_QWORD *)&v442 = v60;
  *((_QWORD *)&v442 + 1) = v58;
  if (v58)
  {
    v64 = (unint64_t *)&v58->__shared_owners_;
    do
      v65 = __ldxr(v64);
    while (__stxr(v65 + 1, v64));
  }
  if (SHIBYTE(v353[2]) < 0)
  {
    sub_20E860C04(__p, v353[0], (unint64_t)v353[1]);
  }
  else
  {
    *(_OWORD *)__p = *(_OWORD *)v353;
    __p[2] = v353[2];
  }
  if (SBYTE7(v436[1]) < 0)
  {
    sub_20E860C04(__dst, *(void **)&v436[0], *((unint64_t *)&v436[0] + 1));
  }
  else
  {
    *(_OWORD *)__dst = v436[0];
    __dst[2] = *(void **)&v436[1];
  }
  *(void **)((char *)&v437 + 7) = *(void **)((char *)&v353[1] + 7);
  v67 = v353[0];
  v66 = v353[1];
  BYTE7(v437) = HIBYTE(v353[1]);
  v68 = HIBYTE(v353[2]);
  memset(v353, 0, sizeof(v353));
  *(_QWORD *)&v438 = v66;
  *(_QWORD *)((char *)&v438 + 7) = *(_QWORD *)((char *)&v437 + 7);
  *(_QWORD *)((char *)&v437 + 7) = 0;
  *(_QWORD *)&v437 = 0;
  v434[0] = v55;
  v434[1] = v54;
  if (v54)
  {
    v69 = v54 + 1;
    do
      v70 = __ldxr(v69);
    while (__stxr(v70 + 1, v69));
  }
  v71 = (char *)operator new();
  *(_QWORD *)&v440 = v438;
  *(_QWORD *)((char *)&v440 + 7) = *(_QWORD *)((char *)&v438 + 7);
  *(_QWORD *)&v438 = 0;
  *(_QWORD *)((char *)&v438 + 7) = 0;
  v72 = *(_OWORD *)v434;
  v434[0] = 0;
  v434[1] = 0;
  v71[8] = 1;
  *((_QWORD *)v71 + 4) = 0;
  *((_QWORD *)v71 + 5) = 0;
  *(_QWORD *)v71 = &off_24C9CD4B0;
  *((_QWORD *)v71 + 2) = &unk_24C9CD528;
  *((_QWORD *)v71 + 3) = &unk_24C9CD568;
  v73 = v440;
  *(_QWORD *)(v71 + 63) = *(_QWORD *)((char *)&v440 + 7);
  *((_QWORD *)v71 + 6) = v67;
  *((_QWORD *)v71 + 7) = v73;
  v71[71] = v68;
  *(_QWORD *)&v440 = 0;
  *(_QWORD *)((char *)&v440 + 7) = 0;
  *(_OWORD *)(v71 + 72) = v72;
  __src[1] = 0;
  __src[0] = 0;
  v74 = (_QWORD *)operator new();
  *v74 = &off_24C9CD660;
  v74[1] = v60;
  v74[2] = v58;
  v442 = 0uLL;
  *((_QWORD *)v71 + 18) = 0;
  *((_QWORD *)v71 + 11) = v74;
  *((_QWORD *)v71 + 12) = v71 + 96;
  *((_QWORD *)v71 + 13) = v71 + 96;
  *((_QWORD *)v71 + 14) = 0;
  *((_QWORD *)v71 + 15) = v71 + 120;
  *((_QWORD *)v71 + 16) = v71 + 120;
  *((_QWORD *)v71 + 17) = 0;
  if (!*((_QWORD *)v71 + 9)
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 109, (uint64_t)"scheduler_", 10, (uint64_t)"scheduler must be valid", 23, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v75 = (std::__shared_weak_count *)operator new();
  v75->__shared_owners_ = 0;
  v76 = (unint64_t *)&v75->__shared_owners_;
  v75->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9CDB50;
  v75->__shared_weak_owners_ = 0;
  v75[1].__vftable = (std::__shared_weak_count_vtbl *)v71;
  v77 = (std::__shared_weak_count *)*((_QWORD *)v71 + 5);
  if (v77)
  {
    if (v77->__shared_owners_ != -1)
      goto LABEL_124;
    do
      v78 = __ldxr(v76);
    while (__stxr(v78 + 1, v76));
    v79 = (unint64_t *)&v75->__shared_weak_owners_;
    do
      v80 = __ldxr(v79);
    while (__stxr(v80 + 1, v79));
    *((_QWORD *)v71 + 4) = v71;
    *((_QWORD *)v71 + 5) = v75;
    std::__shared_weak_count::__release_weak(v77);
  }
  else
  {
    do
      v81 = __ldxr(v76);
    while (__stxr(v81 + 1, v76));
    v82 = (unint64_t *)&v75->__shared_weak_owners_;
    do
      v83 = __ldxr(v82);
    while (__stxr(v83 + 1, v82));
    *((_QWORD *)v71 + 4) = v71;
    *((_QWORD *)v71 + 5) = v75;
  }
  do
    v84 = __ldaxr(v76);
  while (__stlxr(v84 - 1, v76));
  if (!v84)
  {
    ((void (*)(std::__shared_weak_count *))v75->__on_zero_shared)(v75);
    std::__shared_weak_count::__release_weak(v75);
  }
LABEL_124:
  v85 = (std::__shared_weak_count *)__src[1];
  if (__src[1])
  {
    v86 = (unint64_t *)((char *)__src[1] + 8);
    do
      v87 = __ldaxr(v86);
    while (__stlxr(v87 - 1, v86));
    if (!v87)
    {
      ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
      std::__shared_weak_count::__release_weak(v85);
    }
  }
  __src[0] = v71;
  __src[1] = v75;
  v88 = (std::__shared_weak_count *)v434[1];
  if (v434[1])
  {
    v89 = (unint64_t *)((char *)v434[1] + 8);
    do
      v90 = __ldaxr(v89);
    while (__stlxr(v90 - 1, v89));
    if (!v90)
    {
      ((void (*)(std::__shared_weak_count *))v88->__on_zero_shared)(v88);
      std::__shared_weak_count::__release_weak(v88);
    }
  }
  v91 = *(_OWORD *)v432;
  v432[0] = 0;
  v432[1] = 0;
  *(_OWORD *)&v404[8] = *(_OWORD *)__p;
  *(_QWORD *)v404 = &off_24C9CC898;
  v405 = __p[2];
  memset(__p, 0, sizeof(__p));
  v406 = *(_OWORD *)__dst;
  v92 = __dst[2];
  memset(__dst, 0, sizeof(__dst));
  v408 = v91;
  v434[1] = 0;
  v434[0] = 0;
  v93 = __src[0];
  v94 = (char *)__src[1];
  v407 = v92;
  v409 = *(_OWORD *)__src;
  __src[0] = 0;
  __src[1] = 0;
  if (*((_QWORD *)&v409 + 1))
  {
    v95 = (unint64_t *)(v94 + 16);
    do
      v96 = __ldxr(v95);
    while (__stxr(v96 + 1, v95));
  }
  v410 = &off_24C9CC8C8;
  v97 = (_QWORD *)operator new();
  *v97 = &off_24C9CDBA0;
  v97[1] = v93;
  v97[2] = v94;
  *(_QWORD *)&v411 = v97;
  v99 = *((_QWORD *)&v409 + 1);
  v98 = v409;
  if (!*((_QWORD *)&v409 + 1))
  {
    *((_QWORD *)&v411 + 1) = v409;
    v412 = 0;
    if ((_QWORD)v409)
      v103 = v409 + 16;
    else
      v103 = 0;
    goto LABEL_154;
  }
  v100 = (unint64_t *)(*((_QWORD *)&v409 + 1) + 16);
  do
    v101 = __ldxr(v100);
  while (__stxr(v101 + 1, v100));
  v102 = *((_QWORD *)&v409 + 1);
  *((_QWORD *)&v411 + 1) = v98;
  v412 = v99;
  if ((_QWORD)v409)
    v103 = v409 + 16;
  else
    v103 = 0;
  if (!*((_QWORD *)&v409 + 1))
  {
    v98 = v409;
LABEL_154:
    v106 = 0;
    v413 = &off_24C9CC900;
    v414 = v103;
    goto LABEL_155;
  }
  v104 = (unint64_t *)(*((_QWORD *)&v409 + 1) + 16);
  do
    v105 = __ldxr(v104);
  while (__stxr(v105 + 1, v104));
  v106 = *((_QWORD *)&v409 + 1);
  v98 = v409;
  v413 = &off_24C9CC900;
  *(_QWORD *)&v414 = v103;
  *((_QWORD *)&v414 + 1) = v102;
  if (*((_QWORD *)&v409 + 1))
  {
    v107 = (unint64_t *)(*((_QWORD *)&v409 + 1) + 16);
    do
      v108 = __ldxr(v107);
    while (__stxr(v108 + 1, v107));
  }
LABEL_155:
  if (v98)
    v109 = v98 + 24;
  else
    v109 = 0;
  v415 = &off_24C9B2310;
  *(_QWORD *)&v416 = v109;
  *((_QWORD *)&v416 + 1) = v106;
  if ((SHIBYTE(__dst[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(__p[2]) & 0x80000000) == 0)
      goto LABEL_160;
LABEL_163:
    operator delete(__p[0]);
    v110 = (std::__shared_weak_count *)*((_QWORD *)&v442 + 1);
    if (!*((_QWORD *)&v442 + 1))
      goto LABEL_168;
    goto LABEL_164;
  }
  operator delete(__dst[0]);
  if (SHIBYTE(__p[2]) < 0)
    goto LABEL_163;
LABEL_160:
  v110 = (std::__shared_weak_count *)*((_QWORD *)&v442 + 1);
  if (!*((_QWORD *)&v442 + 1))
    goto LABEL_168;
LABEL_164:
  v111 = (unint64_t *)&v110->__shared_owners_;
  do
    v112 = __ldaxr(v111);
  while (__stlxr(v112 - 1, v111));
  if (!v112)
  {
    ((void (*)(std::__shared_weak_count *))v110->__on_zero_shared)(v110);
    std::__shared_weak_count::__release_weak(v110);
  }
LABEL_168:
  v113 = (std::__shared_weak_count *)v432[1];
  if (!v432[1])
    goto LABEL_172;
  v114 = (unint64_t *)((char *)v432[1] + 8);
  do
    v115 = __ldaxr(v114);
  while (__stlxr(v115 - 1, v114));
  if (!v115)
  {
    ((void (*)(std::__shared_weak_count *))v113->__on_zero_shared)(v113);
    std::__shared_weak_count::__release_weak(v113);
    if ((SBYTE7(v436[1]) & 0x80000000) == 0)
    {
LABEL_173:
      if ((SHIBYTE(v353[2]) & 0x80000000) == 0)
        goto LABEL_174;
LABEL_178:
      operator delete(v353[0]);
      if (v400)
        goto LABEL_180;
      goto LABEL_179;
    }
  }
  else
  {
LABEL_172:
    if ((SBYTE7(v436[1]) & 0x80000000) == 0)
      goto LABEL_173;
  }
  operator delete(*(void **)&v436[0]);
  if (SHIBYTE(v353[2]) < 0)
    goto LABEL_178;
LABEL_174:
  if (v400)
    goto LABEL_180;
LABEL_179:
  if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/Channel.h", 542, (uint64_t)"worker", 6, (uint64_t)"Callable must be valid", 22, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
LABEL_180:
  v117 = *(void **)a2;
  v116 = *(unint64_t **)(a2 + 8);
  v385 = *(void **)a2;
  v386 = (std::__shared_weak_count *)v116;
  if (v116)
  {
    v118 = v116 + 1;
    do
      v119 = __ldxr(v118);
    while (__stxr(v119 + 1, v118));
  }
  v121 = *a3;
  v120 = (std::__shared_weak_count *)a3[1];
  if (*a3)
    v122 = *a3 + 112;
  else
    v122 = 0;
  v383 = v122;
  v384 = v120;
  if (v120)
  {
    v123 = (unint64_t *)&v120->__shared_owners_;
    do
      v124 = __ldxr(v123);
    while (__stxr(v124 + 1, v123));
  }
  if (*(char *)(v122 + 31) < 0)
  {
    sub_20E860C04(v436, *(void **)(v122 + 8), *(_QWORD *)(v122 + 16));
  }
  else
  {
    v125 = *(_OWORD *)(v122 + 8);
    *(_QWORD *)&v436[1] = *(_QWORD *)(v122 + 24);
    v436[0] = v125;
  }
  if (*(char *)(v121 + 167) < 0)
  {
    sub_20E860C04(__src, *(void **)(v121 + 144), *(_QWORD *)(v121 + 152));
  }
  else
  {
    *(_OWORD *)__src = *(_OWORD *)(v121 + 144);
    __src[2] = *(void **)(v121 + 160);
  }
  *(_QWORD *)&v442 = v117;
  *((_QWORD *)&v442 + 1) = v116;
  v385 = 0;
  v386 = 0;
  *(_QWORD *)&v440 = v122;
  *((_QWORD *)&v440 + 1) = v120;
  if (v120)
  {
    v126 = (unint64_t *)&v120->__shared_owners_;
    do
      v127 = __ldxr(v126);
    while (__stxr(v127 + 1, v126));
  }
  if (SBYTE7(v436[1]) < 0)
  {
    sub_20E860C04(__dst, *(void **)&v436[0], *((unint64_t *)&v436[0] + 1));
  }
  else
  {
    *(_OWORD *)__dst = v436[0];
    __dst[2] = *(void **)&v436[1];
  }
  if (SHIBYTE(__src[2]) < 0)
  {
    sub_20E860C04(v353, __src[0], (unint64_t)__src[1]);
  }
  else
  {
    *(_OWORD *)v353 = *(_OWORD *)__src;
    v353[2] = __src[2];
  }
  *(_QWORD *)((char *)v443 + 7) = *(_QWORD *)((char *)v436 + 15);
  v128 = v436[0];
  HIBYTE(v443[0]) = HIBYTE(v436[0]);
  v129 = BYTE7(v436[1]);
  memset(v436, 0, 24);
  *(_QWORD *)&v437 = *((_QWORD *)&v128 + 1);
  *(_QWORD *)((char *)&v437 + 7) = *(_QWORD *)((char *)v443 + 7);
  *(_QWORD *)((char *)v443 + 7) = 0;
  v443[0] = 0;
  v432[0] = v117;
  v432[1] = v116;
  if (v116)
  {
    v130 = v116 + 1;
    do
      v131 = __ldxr(v130);
    while (__stxr(v131 + 1, v130));
  }
  v132 = (char *)operator new();
  *(_QWORD *)&v438 = v437;
  *(_QWORD *)((char *)&v438 + 7) = *(_QWORD *)((char *)&v437 + 7);
  *(_QWORD *)&v437 = 0;
  *(_QWORD *)((char *)&v437 + 7) = 0;
  v133 = *(_OWORD *)v432;
  v432[0] = 0;
  v432[1] = 0;
  v132[8] = 1;
  *((_QWORD *)v132 + 4) = 0;
  *((_QWORD *)v132 + 5) = 0;
  *(_QWORD *)v132 = &off_24C9CDC18;
  *((_QWORD *)v132 + 2) = &unk_24C9CDC90;
  *((_QWORD *)v132 + 3) = &unk_24C9CDCD0;
  v134 = v438;
  *(_QWORD *)(v132 + 63) = *(_QWORD *)((char *)&v438 + 7);
  *((_QWORD *)v132 + 6) = v128;
  *((_QWORD *)v132 + 7) = v134;
  v132[71] = v129;
  *(_QWORD *)&v438 = 0;
  *(_QWORD *)((char *)&v438 + 7) = 0;
  *(_OWORD *)(v132 + 72) = v133;
  v434[1] = 0;
  v434[0] = 0;
  v135 = (_QWORD *)operator new();
  *v135 = &off_24C9CDDC8;
  v135[1] = v122;
  v135[2] = v120;
  v440 = 0uLL;
  *((_QWORD *)v132 + 18) = 0;
  *((_QWORD *)v132 + 11) = v135;
  *((_QWORD *)v132 + 12) = v132 + 96;
  *((_QWORD *)v132 + 13) = v132 + 96;
  *((_QWORD *)v132 + 14) = 0;
  *((_QWORD *)v132 + 15) = v132 + 120;
  *((_QWORD *)v132 + 16) = v132 + 120;
  *((_QWORD *)v132 + 17) = 0;
  if (!*((_QWORD *)v132 + 9)
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 109, (uint64_t)"scheduler_", 10, (uint64_t)"scheduler must be valid", 23, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v136 = (std::__shared_weak_count *)operator new();
  v136->__shared_owners_ = 0;
  v137 = (unint64_t *)&v136->__shared_owners_;
  v136->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9CE2B8;
  v136->__shared_weak_owners_ = 0;
  v136[1].__vftable = (std::__shared_weak_count_vtbl *)v132;
  v138 = (std::__shared_weak_count *)*((_QWORD *)v132 + 5);
  if (v138)
  {
    if (v138->__shared_owners_ != -1)
      goto LABEL_222;
    do
      v139 = __ldxr(v137);
    while (__stxr(v139 + 1, v137));
    v140 = (unint64_t *)&v136->__shared_weak_owners_;
    do
      v141 = __ldxr(v140);
    while (__stxr(v141 + 1, v140));
    *((_QWORD *)v132 + 4) = v132;
    *((_QWORD *)v132 + 5) = v136;
    std::__shared_weak_count::__release_weak(v138);
  }
  else
  {
    do
      v142 = __ldxr(v137);
    while (__stxr(v142 + 1, v137));
    v143 = (unint64_t *)&v136->__shared_weak_owners_;
    do
      v144 = __ldxr(v143);
    while (__stxr(v144 + 1, v143));
    *((_QWORD *)v132 + 4) = v132;
    *((_QWORD *)v132 + 5) = v136;
  }
  do
    v145 = __ldaxr(v137);
  while (__stlxr(v145 - 1, v137));
  if (!v145)
  {
    ((void (*)(std::__shared_weak_count *))v136->__on_zero_shared)(v136);
    std::__shared_weak_count::__release_weak(v136);
  }
LABEL_222:
  v146 = (std::__shared_weak_count *)v434[1];
  if (v434[1])
  {
    v147 = (unint64_t *)((char *)v434[1] + 8);
    do
      v148 = __ldaxr(v147);
    while (__stlxr(v148 - 1, v147));
    if (!v148)
    {
      ((void (*)(std::__shared_weak_count *))v146->__on_zero_shared)(v146);
      std::__shared_weak_count::__release_weak(v146);
    }
  }
  v434[0] = v132;
  v434[1] = v136;
  v149 = (std::__shared_weak_count *)v432[1];
  if (v432[1])
  {
    v150 = (unint64_t *)((char *)v432[1] + 8);
    do
      v151 = __ldaxr(v150);
    while (__stlxr(v151 - 1, v150));
    if (!v151)
    {
      ((void (*)(std::__shared_weak_count *))v149->__on_zero_shared)(v149);
      std::__shared_weak_count::__release_weak(v149);
    }
  }
  v152 = v442;
  v442 = 0uLL;
  *(_OWORD *)&__p[1] = *(_OWORD *)__dst;
  __p[0] = &off_24C9CC970;
  v388 = __dst[2];
  memset(__dst, 0, sizeof(__dst));
  v389 = *(_OWORD *)v353;
  v153 = v353[2];
  memset(v353, 0, sizeof(v353));
  v391 = v152;
  v432[1] = 0;
  v432[0] = 0;
  v154 = v434[0];
  v155 = (char *)v434[1];
  v390 = v153;
  v392 = *(_OWORD *)v434;
  v434[0] = 0;
  v434[1] = 0;
  if (*((_QWORD *)&v392 + 1))
  {
    v156 = (unint64_t *)(v155 + 16);
    do
      v157 = __ldxr(v156);
    while (__stxr(v157 + 1, v156));
  }
  v393 = &off_24C9CC938;
  v158 = (_QWORD *)operator new();
  *v158 = &off_24C9CE308;
  v158[1] = v154;
  v158[2] = v155;
  *(_QWORD *)&v394 = v158;
  v160 = *((_QWORD *)&v392 + 1);
  v159 = v392;
  if (!*((_QWORD *)&v392 + 1))
  {
    *((_QWORD *)&v394 + 1) = v392;
    v395 = 0;
    if ((_QWORD)v392)
      v164 = v392 + 16;
    else
      v164 = 0;
    goto LABEL_252;
  }
  v161 = (unint64_t *)(*((_QWORD *)&v392 + 1) + 16);
  do
    v162 = __ldxr(v161);
  while (__stxr(v162 + 1, v161));
  v163 = *((_QWORD *)&v392 + 1);
  *((_QWORD *)&v394 + 1) = v159;
  v395 = v160;
  if ((_QWORD)v392)
    v164 = v392 + 16;
  else
    v164 = 0;
  if (!*((_QWORD *)&v392 + 1))
  {
    v159 = v392;
LABEL_252:
    v167 = 0;
    v396 = &off_24C9CC9A0;
    v397 = v164;
    goto LABEL_253;
  }
  v165 = (unint64_t *)(*((_QWORD *)&v392 + 1) + 16);
  do
    v166 = __ldxr(v165);
  while (__stxr(v166 + 1, v165));
  v167 = *((_QWORD *)&v392 + 1);
  v159 = v392;
  v396 = &off_24C9CC9A0;
  *(_QWORD *)&v397 = v164;
  *((_QWORD *)&v397 + 1) = v163;
  if (*((_QWORD *)&v392 + 1))
  {
    v168 = (unint64_t *)(*((_QWORD *)&v392 + 1) + 16);
    do
      v169 = __ldxr(v168);
    while (__stxr(v169 + 1, v168));
  }
LABEL_253:
  if (v159)
    v170 = v159 + 24;
  else
    v170 = 0;
  v398 = &off_24C9B2310;
  *(_QWORD *)&v399 = v170;
  *((_QWORD *)&v399 + 1) = v167;
  if ((SHIBYTE(v353[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(__dst[2]) & 0x80000000) == 0)
      goto LABEL_258;
LABEL_261:
    operator delete(__dst[0]);
    v171 = (std::__shared_weak_count *)*((_QWORD *)&v440 + 1);
    if (!*((_QWORD *)&v440 + 1))
      goto LABEL_266;
    goto LABEL_262;
  }
  operator delete(v353[0]);
  if (SHIBYTE(__dst[2]) < 0)
    goto LABEL_261;
LABEL_258:
  v171 = (std::__shared_weak_count *)*((_QWORD *)&v440 + 1);
  if (!*((_QWORD *)&v440 + 1))
    goto LABEL_266;
LABEL_262:
  v172 = (unint64_t *)&v171->__shared_owners_;
  do
    v173 = __ldaxr(v172);
  while (__stlxr(v173 - 1, v172));
  if (!v173)
  {
    ((void (*)(std::__shared_weak_count *))v171->__on_zero_shared)(v171);
    std::__shared_weak_count::__release_weak(v171);
  }
LABEL_266:
  v174 = (std::__shared_weak_count *)*((_QWORD *)&v442 + 1);
  if (!*((_QWORD *)&v442 + 1))
    goto LABEL_270;
  v175 = (unint64_t *)(*((_QWORD *)&v442 + 1) + 8);
  do
    v176 = __ldaxr(v175);
  while (__stlxr(v176 - 1, v175));
  if (!v176)
  {
    ((void (*)(std::__shared_weak_count *))v174->__on_zero_shared)(v174);
    std::__shared_weak_count::__release_weak(v174);
    if ((SHIBYTE(__src[2]) & 0x80000000) == 0)
    {
LABEL_271:
      if ((SBYTE7(v436[1]) & 0x80000000) == 0)
        goto LABEL_272;
LABEL_276:
      operator delete(*(void **)&v436[0]);
      if (v383)
        goto LABEL_278;
      goto LABEL_277;
    }
  }
  else
  {
LABEL_270:
    if ((SHIBYTE(__src[2]) & 0x80000000) == 0)
      goto LABEL_271;
  }
  operator delete(__src[0]);
  if (SBYTE7(v436[1]) < 0)
    goto LABEL_276;
LABEL_272:
  if (v383)
    goto LABEL_278;
LABEL_277:
  if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/Channel.h", 542, (uint64_t)"worker", 6, (uint64_t)"Callable must be valid", 22, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
LABEL_278:
  v178 = *(void **)a2;
  v177 = *(std::__shared_weak_count **)(a2 + 8);
  v368 = *(void **)a2;
  v369 = v177;
  if (v177)
  {
    v179 = (unint64_t *)&v177->__shared_owners_;
    do
      v180 = __ldxr(v179);
    while (__stxr(v180 + 1, v179));
  }
  v182 = *a3;
  v181 = (std::__shared_weak_count *)a3[1];
  if (*a3)
    v183 = *a3 + 168;
  else
    v183 = 0;
  v366 = v183;
  v367 = v181;
  if (v181)
  {
    v184 = (unint64_t *)&v181->__shared_owners_;
    do
      v185 = __ldxr(v184);
    while (__stxr(v185 + 1, v184));
  }
  if (*(char *)(v183 + 31) < 0)
  {
    sub_20E860C04(__src, *(void **)(v183 + 8), *(_QWORD *)(v183 + 16));
  }
  else
  {
    v186 = *(_OWORD *)(v183 + 8);
    __src[2] = *(void **)(v183 + 24);
    *(_OWORD *)__src = v186;
  }
  if (*(char *)(v182 + 223) < 0)
  {
    sub_20E860C04(v434, *(void **)(v182 + 200), *(_QWORD *)(v182 + 208));
  }
  else
  {
    *(_OWORD *)v434 = *(_OWORD *)(v182 + 200);
    v434[2] = *(void **)(v182 + 216);
  }
  *(_QWORD *)&v440 = v178;
  *((_QWORD *)&v440 + 1) = v177;
  v368 = 0;
  v369 = 0;
  *(_QWORD *)&v438 = v183;
  *((_QWORD *)&v438 + 1) = v181;
  if (v181)
  {
    v187 = (unint64_t *)&v181->__shared_owners_;
    do
      v188 = __ldxr(v187);
    while (__stxr(v188 + 1, v187));
  }
  if (SHIBYTE(__src[2]) < 0)
  {
    sub_20E860C04(v353, __src[0], (unint64_t)__src[1]);
  }
  else
  {
    *(_OWORD *)v353 = *(_OWORD *)__src;
    v353[2] = __src[2];
  }
  v351 = a1;
  if (SHIBYTE(v434[2]) < 0)
  {
    sub_20E860C04(v436, v434[0], (unint64_t)v434[1]);
  }
  else
  {
    v436[0] = *(_OWORD *)v434;
    *(void **)&v436[1] = v434[2];
  }
  *(void **)((char *)v441 + 7) = *(void **)((char *)&__src[1] + 7);
  v189 = __src[0];
  v190 = __src[1];
  HIBYTE(v441[0]) = HIBYTE(__src[1]);
  v191 = HIBYTE(__src[2]);
  memset(__src, 0, 24);
  v443[0] = v190;
  *(_QWORD *)((char *)v443 + 7) = *(_QWORD *)((char *)v441 + 7);
  *(_QWORD *)((char *)v441 + 7) = 0;
  v441[0] = 0;
  *(_QWORD *)&v442 = v178;
  *((_QWORD *)&v442 + 1) = v177;
  if (v177)
  {
    v192 = (unint64_t *)&v177->__shared_owners_;
    do
      v193 = __ldxr(v192);
    while (__stxr(v193 + 1, v192));
  }
  v194 = (char *)operator new();
  *(_QWORD *)&v437 = v443[0];
  *(_QWORD *)((char *)&v437 + 7) = *(_QWORD *)((char *)v443 + 7);
  v443[0] = 0;
  *(_QWORD *)((char *)v443 + 7) = 0;
  v195 = v442;
  v442 = 0uLL;
  v194[8] = 1;
  *((_QWORD *)v194 + 4) = 0;
  *((_QWORD *)v194 + 5) = 0;
  *(_QWORD *)v194 = &off_24C9CE380;
  *((_QWORD *)v194 + 2) = &unk_24C9CE3F8;
  *((_QWORD *)v194 + 3) = &unk_24C9CE438;
  v196 = v437;
  *(_QWORD *)(v194 + 63) = *(_QWORD *)((char *)&v437 + 7);
  *((_QWORD *)v194 + 6) = v189;
  *((_QWORD *)v194 + 7) = v196;
  v194[71] = v191;
  *(_QWORD *)&v437 = 0;
  *(_QWORD *)((char *)&v437 + 7) = 0;
  *(_OWORD *)(v194 + 72) = v195;
  v432[1] = 0;
  v432[0] = 0;
  v197 = (_QWORD *)operator new();
  *v197 = &off_24C9CE530;
  v197[1] = v183;
  v197[2] = v181;
  v438 = 0uLL;
  *((_QWORD *)v194 + 18) = 0;
  *((_QWORD *)v194 + 11) = v197;
  *((_QWORD *)v194 + 12) = v194 + 96;
  *((_QWORD *)v194 + 13) = v194 + 96;
  *((_QWORD *)v194 + 14) = 0;
  *((_QWORD *)v194 + 15) = v194 + 120;
  *((_QWORD *)v194 + 16) = v194 + 120;
  *((_QWORD *)v194 + 17) = 0;
  if (!*((_QWORD *)v194 + 9)
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 109, (uint64_t)"scheduler_", 10, (uint64_t)"scheduler must be valid", 23, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v198 = (std::__shared_weak_count *)operator new();
  v198->__shared_owners_ = 0;
  v199 = (unint64_t *)&v198->__shared_owners_;
  v198->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9CEA20;
  v198->__shared_weak_owners_ = 0;
  v198[1].__vftable = (std::__shared_weak_count_vtbl *)v194;
  v200 = (std::__shared_weak_count *)*((_QWORD *)v194 + 5);
  if (v200)
  {
    if (v200->__shared_owners_ != -1)
      goto LABEL_320;
    do
      v201 = __ldxr(v199);
    while (__stxr(v201 + 1, v199));
    v202 = (unint64_t *)&v198->__shared_weak_owners_;
    do
      v203 = __ldxr(v202);
    while (__stxr(v203 + 1, v202));
    *((_QWORD *)v194 + 4) = v194;
    *((_QWORD *)v194 + 5) = v198;
    std::__shared_weak_count::__release_weak(v200);
  }
  else
  {
    do
      v204 = __ldxr(v199);
    while (__stxr(v204 + 1, v199));
    v205 = (unint64_t *)&v198->__shared_weak_owners_;
    do
      v206 = __ldxr(v205);
    while (__stxr(v206 + 1, v205));
    *((_QWORD *)v194 + 4) = v194;
    *((_QWORD *)v194 + 5) = v198;
  }
  do
    v207 = __ldaxr(v199);
  while (__stlxr(v207 - 1, v199));
  if (!v207)
  {
    ((void (*)(std::__shared_weak_count *))v198->__on_zero_shared)(v198);
    std::__shared_weak_count::__release_weak(v198);
  }
LABEL_320:
  v208 = (std::__shared_weak_count *)v432[1];
  if (v432[1])
  {
    v209 = (unint64_t *)((char *)v432[1] + 8);
    do
      v210 = __ldaxr(v209);
    while (__stlxr(v210 - 1, v209));
    if (!v210)
    {
      ((void (*)(std::__shared_weak_count *))v208->__on_zero_shared)(v208);
      std::__shared_weak_count::__release_weak(v208);
    }
  }
  v432[0] = v194;
  v432[1] = v198;
  v211 = (std::__shared_weak_count *)*((_QWORD *)&v442 + 1);
  if (*((_QWORD *)&v442 + 1))
  {
    v212 = (unint64_t *)(*((_QWORD *)&v442 + 1) + 8);
    do
      v213 = __ldaxr(v212);
    while (__stlxr(v213 - 1, v212));
    if (!v213)
    {
      ((void (*)(std::__shared_weak_count *))v211->__on_zero_shared)(v211);
      std::__shared_weak_count::__release_weak(v211);
    }
  }
  v214 = v440;
  v440 = 0uLL;
  *(_OWORD *)&__dst[1] = *(_OWORD *)v353;
  __dst[0] = &off_24C9CC9D8;
  v371 = v353[2];
  memset(v353, 0, sizeof(v353));
  v372 = v436[0];
  v215 = *(_QWORD *)&v436[1];
  memset(v436, 0, 24);
  v374 = v214;
  v442 = 0uLL;
  v216 = v432[0];
  v217 = (char *)v432[1];
  v373 = v215;
  v375 = *(_OWORD *)v432;
  v432[0] = 0;
  v432[1] = 0;
  if (*((_QWORD *)&v375 + 1))
  {
    v218 = (unint64_t *)(v217 + 16);
    do
      v219 = __ldxr(v218);
    while (__stxr(v219 + 1, v218));
  }
  v376 = &off_24C9CCB08;
  v220 = (_QWORD *)operator new();
  *v220 = &off_24C9CEA70;
  v220[1] = v216;
  v220[2] = v217;
  *(_QWORD *)&v377 = v220;
  v222 = *((_QWORD *)&v375 + 1);
  v221 = v375;
  if (!*((_QWORD *)&v375 + 1))
  {
    *((_QWORD *)&v377 + 1) = v375;
    v378 = 0;
    if ((_QWORD)v375)
      v226 = v375 + 16;
    else
      v226 = 0;
    goto LABEL_350;
  }
  v223 = (unint64_t *)(*((_QWORD *)&v375 + 1) + 16);
  do
    v224 = __ldxr(v223);
  while (__stxr(v224 + 1, v223));
  v225 = *((_QWORD *)&v375 + 1);
  *((_QWORD *)&v377 + 1) = v221;
  v378 = v222;
  if ((_QWORD)v375)
    v226 = v375 + 16;
  else
    v226 = 0;
  if (!*((_QWORD *)&v375 + 1))
  {
    v221 = v375;
LABEL_350:
    v229 = 0;
    v379 = &off_24C9CCAD0;
    v380 = v226;
    goto LABEL_351;
  }
  v227 = (unint64_t *)(*((_QWORD *)&v375 + 1) + 16);
  do
    v228 = __ldxr(v227);
  while (__stxr(v228 + 1, v227));
  v229 = *((_QWORD *)&v375 + 1);
  v221 = v375;
  v379 = &off_24C9CCAD0;
  *(_QWORD *)&v380 = v226;
  *((_QWORD *)&v380 + 1) = v225;
  if (*((_QWORD *)&v375 + 1))
  {
    v230 = (unint64_t *)(*((_QWORD *)&v375 + 1) + 16);
    do
      v231 = __ldxr(v230);
    while (__stxr(v231 + 1, v230));
  }
LABEL_351:
  if (v221)
    v232 = v221 + 24;
  else
    v232 = 0;
  v381 = &off_24C9B2310;
  *(_QWORD *)&v382 = v232;
  *((_QWORD *)&v382 + 1) = v229;
  if ((SBYTE7(v436[1]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v353[2]) & 0x80000000) == 0)
      goto LABEL_356;
LABEL_359:
    operator delete(v353[0]);
    v233 = (std::__shared_weak_count *)*((_QWORD *)&v438 + 1);
    if (!*((_QWORD *)&v438 + 1))
      goto LABEL_364;
    goto LABEL_360;
  }
  operator delete(*(void **)&v436[0]);
  if (SHIBYTE(v353[2]) < 0)
    goto LABEL_359;
LABEL_356:
  v233 = (std::__shared_weak_count *)*((_QWORD *)&v438 + 1);
  if (!*((_QWORD *)&v438 + 1))
    goto LABEL_364;
LABEL_360:
  v234 = (unint64_t *)&v233->__shared_owners_;
  do
    v235 = __ldaxr(v234);
  while (__stlxr(v235 - 1, v234));
  if (!v235)
  {
    ((void (*)(std::__shared_weak_count *))v233->__on_zero_shared)(v233);
    std::__shared_weak_count::__release_weak(v233);
  }
LABEL_364:
  v236 = (std::__shared_weak_count *)*((_QWORD *)&v440 + 1);
  if (!*((_QWORD *)&v440 + 1))
    goto LABEL_368;
  v237 = (unint64_t *)(*((_QWORD *)&v440 + 1) + 8);
  do
    v238 = __ldaxr(v237);
  while (__stlxr(v238 - 1, v237));
  if (!v238)
  {
    ((void (*)(std::__shared_weak_count *))v236->__on_zero_shared)(v236);
    std::__shared_weak_count::__release_weak(v236);
    if ((SHIBYTE(v434[2]) & 0x80000000) == 0)
    {
LABEL_369:
      if ((SHIBYTE(__src[2]) & 0x80000000) == 0)
        goto LABEL_370;
LABEL_374:
      operator delete(__src[0]);
      if (v366)
        goto LABEL_376;
      goto LABEL_375;
    }
  }
  else
  {
LABEL_368:
    if ((SHIBYTE(v434[2]) & 0x80000000) == 0)
      goto LABEL_369;
  }
  operator delete(v434[0]);
  if (SHIBYTE(__src[2]) < 0)
    goto LABEL_374;
LABEL_370:
  if (v366)
    goto LABEL_376;
LABEL_375:
  if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/Channel.h", 542, (uint64_t)"worker", 6, (uint64_t)"Callable must be valid", 22, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
LABEL_376:
  v240 = *(void **)a2;
  v239 = *(_QWORD *)(a2 + 8);
  if (v239)
  {
    v241 = (unint64_t *)(v239 + 8);
    do
      v242 = __ldxr(v241);
    while (__stxr(v242 + 1, v241));
  }
  v244 = *a3;
  v243 = a3[1];
  if (*a3)
    v245 = *a3 + 224;
  else
    v245 = 0;
  v352 = (std::__shared_weak_count *)a3[1];
  if (v243)
  {
    v246 = (unint64_t *)(v243 + 8);
    do
      v247 = __ldxr(v246);
    while (__stxr(v247 + 1, v246));
  }
  if (*(char *)(v245 + 31) < 0)
  {
    sub_20E860C04(v434, *(void **)(v245 + 8), *(_QWORD *)(v245 + 16));
  }
  else
  {
    v248 = *(_OWORD *)(v245 + 8);
    v434[2] = *(void **)(v245 + 24);
    *(_OWORD *)v434 = v248;
  }
  if (*(char *)(v244 + 279) < 0)
  {
    sub_20E860C04(v432, *(void **)(v244 + 256), *(_QWORD *)(v244 + 264));
  }
  else
  {
    *(_OWORD *)v432 = *(_OWORD *)(v244 + 256);
    v433 = *(void **)(v244 + 272);
  }
  *(_QWORD *)&v438 = v240;
  *((_QWORD *)&v438 + 1) = v239;
  *(_QWORD *)&v437 = v245;
  *((_QWORD *)&v437 + 1) = v243;
  if (v243)
  {
    v249 = (unint64_t *)(v243 + 8);
    do
      v250 = __ldxr(v249);
    while (__stxr(v250 + 1, v249));
  }
  if (SHIBYTE(v434[2]) < 0)
  {
    sub_20E860C04(v436, v434[0], (unint64_t)v434[1]);
  }
  else
  {
    v436[0] = *(_OWORD *)v434;
    *(void **)&v436[1] = v434[2];
  }
  if (SHIBYTE(v433) < 0)
  {
    sub_20E860C04(__src, v432[0], (unint64_t)v432[1]);
  }
  else
  {
    *(_OWORD *)__src = *(_OWORD *)v432;
    __src[2] = v433;
  }
  *(void **)((char *)v439 + 7) = *(void **)((char *)&v434[1] + 7);
  v251 = v434[0];
  v252 = v434[1];
  HIBYTE(v439[0]) = HIBYTE(v434[1]);
  v253 = HIBYTE(v434[2]);
  memset(v434, 0, 24);
  *((_QWORD *)&v440 + 1) = v239;
  v441[0] = v252;
  *(_QWORD *)((char *)v441 + 7) = *(_QWORD *)((char *)v439 + 7);
  *(_QWORD *)((char *)v439 + 7) = 0;
  v439[0] = 0;
  *(_QWORD *)&v440 = v240;
  if (v239)
  {
    v254 = (unint64_t *)(v239 + 8);
    do
      v255 = __ldxr(v254);
    while (__stxr(v255 + 1, v254));
  }
  v256 = operator new();
  v443[0] = v441[0];
  *(_QWORD *)((char *)v443 + 7) = *(_QWORD *)((char *)v441 + 7);
  v441[0] = 0;
  *(_QWORD *)((char *)v441 + 7) = 0;
  v257 = v440;
  v440 = 0uLL;
  *(_BYTE *)(v256 + 8) = 1;
  *(_QWORD *)(v256 + 32) = 0;
  *(_QWORD *)(v256 + 40) = 0;
  *(_QWORD *)v256 = &off_24C9CEAE8;
  *(_QWORD *)(v256 + 16) = &unk_24C9CEB60;
  *(_QWORD *)(v256 + 24) = &unk_24C9CEBA0;
  v258 = v443[0];
  *(_QWORD *)(v256 + 63) = *(_QWORD *)((char *)v443 + 7);
  *(_QWORD *)(v256 + 48) = v251;
  *(_QWORD *)(v256 + 56) = v258;
  *(_BYTE *)(v256 + 71) = v253;
  v443[0] = 0;
  *(_QWORD *)((char *)v443 + 7) = 0;
  *(_OWORD *)(v256 + 72) = v257;
  v442 = 0uLL;
  v259 = (_QWORD *)operator new();
  *v259 = &off_24C9CEC88;
  v259[1] = v245;
  v259[2] = v243;
  v437 = 0uLL;
  *(_QWORD *)(v256 + 144) = 0;
  *(_QWORD *)(v256 + 88) = v259;
  *(_QWORD *)(v256 + 96) = v256 + 96;
  *(_QWORD *)(v256 + 104) = v256 + 96;
  *(_QWORD *)(v256 + 112) = 0;
  *(_QWORD *)(v256 + 120) = v256 + 120;
  *(_QWORD *)(v256 + 128) = v256 + 120;
  *(_QWORD *)(v256 + 136) = 0;
  if (!*(_QWORD *)(v256 + 72)
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 109, (uint64_t)"scheduler_", 10, (uint64_t)"scheduler must be valid", 23, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v260 = (std::__shared_weak_count *)operator new();
  v260->__shared_owners_ = 0;
  v261 = (unint64_t *)&v260->__shared_owners_;
  v260->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9CF128;
  v260->__shared_weak_owners_ = 0;
  v260[1].__vftable = (std::__shared_weak_count_vtbl *)v256;
  v262 = *(std::__shared_weak_count **)(v256 + 40);
  if (v262)
  {
    if (v262->__shared_owners_ != -1)
      goto LABEL_418;
    do
      v263 = __ldxr(v261);
    while (__stxr(v263 + 1, v261));
    v264 = (unint64_t *)&v260->__shared_weak_owners_;
    do
      v265 = __ldxr(v264);
    while (__stxr(v265 + 1, v264));
    *(_QWORD *)(v256 + 32) = v256;
    *(_QWORD *)(v256 + 40) = v260;
    std::__shared_weak_count::__release_weak(v262);
  }
  else
  {
    do
      v266 = __ldxr(v261);
    while (__stxr(v266 + 1, v261));
    v267 = (unint64_t *)&v260->__shared_weak_owners_;
    do
      v268 = __ldxr(v267);
    while (__stxr(v268 + 1, v267));
    *(_QWORD *)(v256 + 32) = v256;
    *(_QWORD *)(v256 + 40) = v260;
  }
  do
    v269 = __ldaxr(v261);
  while (__stlxr(v269 - 1, v261));
  if (!v269)
  {
    ((void (*)(std::__shared_weak_count *))v260->__on_zero_shared)(v260);
    std::__shared_weak_count::__release_weak(v260);
  }
LABEL_418:
  v270 = (std::__shared_weak_count *)*((_QWORD *)&v442 + 1);
  if (*((_QWORD *)&v442 + 1))
  {
    v271 = (unint64_t *)(*((_QWORD *)&v442 + 1) + 8);
    do
      v272 = __ldaxr(v271);
    while (__stlxr(v272 - 1, v271));
    if (!v272)
    {
      ((void (*)(std::__shared_weak_count *))v270->__on_zero_shared)(v270);
      std::__shared_weak_count::__release_weak(v270);
    }
  }
  *(_QWORD *)&v442 = v256;
  *((_QWORD *)&v442 + 1) = v260;
  v273 = (std::__shared_weak_count *)*((_QWORD *)&v440 + 1);
  if (*((_QWORD *)&v440 + 1))
  {
    v274 = (unint64_t *)(*((_QWORD *)&v440 + 1) + 8);
    do
      v275 = __ldaxr(v274);
    while (__stlxr(v275 - 1, v274));
    if (!v275)
    {
      ((void (*)(std::__shared_weak_count *))v273->__on_zero_shared)(v273);
      std::__shared_weak_count::__release_weak(v273);
    }
  }
  v276 = v438;
  v438 = 0uLL;
  v353[0] = &off_24C9CCA08;
  *(_OWORD *)&v353[1] = v436[0];
  v354 = *(_QWORD *)&v436[1];
  memset(v436, 0, 24);
  v355 = *(_OWORD *)__src;
  v356 = __src[2];
  memset(__src, 0, 24);
  v357 = v276;
  v440 = 0uLL;
  v277 = v442;
  v358 = v442;
  v442 = 0uLL;
  if (*((_QWORD *)&v358 + 1))
  {
    v278 = (unint64_t *)(*((_QWORD *)&v277 + 1) + 16);
    do
      v279 = __ldxr(v278);
    while (__stxr(v279 + 1, v278));
  }
  v359 = &off_24C9B4888;
  v280 = operator new();
  *(_QWORD *)v280 = &off_24C9CF178;
  *(_OWORD *)(v280 + 8) = v277;
  *(_QWORD *)&v360 = v280;
  v282 = *((_QWORD *)&v358 + 1);
  v281 = v358;
  if (!*((_QWORD *)&v358 + 1))
  {
    *((_QWORD *)&v360 + 1) = v358;
    v361 = 0;
    if ((_QWORD)v358)
      v286 = v358 + 16;
    else
      v286 = 0;
    goto LABEL_448;
  }
  v283 = (unint64_t *)(*((_QWORD *)&v358 + 1) + 16);
  do
    v284 = __ldxr(v283);
  while (__stxr(v284 + 1, v283));
  v285 = *((_QWORD *)&v358 + 1);
  *((_QWORD *)&v360 + 1) = v281;
  v361 = v282;
  if ((_QWORD)v358)
    v286 = v358 + 16;
  else
    v286 = 0;
  if (!*((_QWORD *)&v358 + 1))
  {
    v281 = v358;
LABEL_448:
    v289 = 0;
    v362 = &off_24C9CCA38;
    v363 = v286;
    goto LABEL_449;
  }
  v287 = (unint64_t *)(*((_QWORD *)&v358 + 1) + 16);
  do
    v288 = __ldxr(v287);
  while (__stxr(v288 + 1, v287));
  v289 = *((_QWORD *)&v358 + 1);
  v281 = v358;
  v362 = &off_24C9CCA38;
  *(_QWORD *)&v363 = v286;
  *((_QWORD *)&v363 + 1) = v285;
  if (*((_QWORD *)&v358 + 1))
  {
    v290 = (unint64_t *)(*((_QWORD *)&v358 + 1) + 16);
    do
      v291 = __ldxr(v290);
    while (__stxr(v291 + 1, v290));
  }
LABEL_449:
  if (v281)
    v292 = v281 + 24;
  else
    v292 = 0;
  v364 = &off_24C9B2310;
  *(_QWORD *)&v365 = v292;
  *((_QWORD *)&v365 + 1) = v289;
  if ((SHIBYTE(__src[2]) & 0x80000000) == 0)
  {
    if ((SBYTE7(v436[1]) & 0x80000000) == 0)
      goto LABEL_454;
LABEL_457:
    operator delete(*(void **)&v436[0]);
    v293 = (std::__shared_weak_count *)*((_QWORD *)&v437 + 1);
    if (!*((_QWORD *)&v437 + 1))
      goto LABEL_462;
    goto LABEL_458;
  }
  operator delete(__src[0]);
  if (SBYTE7(v436[1]) < 0)
    goto LABEL_457;
LABEL_454:
  v293 = (std::__shared_weak_count *)*((_QWORD *)&v437 + 1);
  if (!*((_QWORD *)&v437 + 1))
    goto LABEL_462;
LABEL_458:
  v294 = (unint64_t *)&v293->__shared_owners_;
  do
    v295 = __ldaxr(v294);
  while (__stlxr(v295 - 1, v294));
  if (!v295)
  {
    ((void (*)(std::__shared_weak_count *))v293->__on_zero_shared)(v293);
    std::__shared_weak_count::__release_weak(v293);
  }
LABEL_462:
  v296 = (std::__shared_weak_count *)*((_QWORD *)&v438 + 1);
  if (!*((_QWORD *)&v438 + 1))
    goto LABEL_466;
  v297 = (unint64_t *)(*((_QWORD *)&v438 + 1) + 8);
  do
    v298 = __ldaxr(v297);
  while (__stlxr(v298 - 1, v297));
  if (!v298)
  {
    ((void (*)(std::__shared_weak_count *))v296->__on_zero_shared)(v296);
    std::__shared_weak_count::__release_weak(v296);
    if ((SHIBYTE(v433) & 0x80000000) == 0)
    {
LABEL_467:
      if ((SHIBYTE(v434[2]) & 0x80000000) == 0)
        goto LABEL_468;
      goto LABEL_472;
    }
  }
  else
  {
LABEL_466:
    if ((SHIBYTE(v433) & 0x80000000) == 0)
      goto LABEL_467;
  }
  operator delete(v432[0]);
  if ((SHIBYTE(v434[2]) & 0x80000000) == 0)
  {
LABEL_468:
    if (v245)
      goto LABEL_474;
    goto LABEL_473;
  }
LABEL_472:
  operator delete(v434[0]);
  if (v245)
    goto LABEL_474;
LABEL_473:
  if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/Channel.h", 542, (uint64_t)"worker", 6, (uint64_t)"Callable must be valid", 22, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
LABEL_474:
  v299 = operator new();
  *(_QWORD *)(v299 + 168) = &off_24C9CC898;
  *(_QWORD *)v299 = &off_24C9B56D8;
  v300 = v425;
  *(_QWORD *)(v299 + 24) = v423;
  *(_QWORD *)(v299 + 48) = v300;
  *(_QWORD *)(v299 + 88) = &off_24C9B5708;
  *(_QWORD *)(v299 + 112) = v429;
  *(_QWORD *)(v299 + 120) = &off_24C9B2520;
  v301 = v426;
  v302 = v427;
  v303 = v428;
  v304 = v430;
  v305 = v431;
  *(_QWORD *)(v299 + 192) = v405;
  *(_OWORD *)(v299 + 8) = v422;
  *(_OWORD *)(v299 + 32) = v424;
  *(_OWORD *)(v299 + 56) = v301;
  *(_OWORD *)(v299 + 72) = v302;
  *(_OWORD *)(v299 + 96) = v303;
  v306 = *(_OWORD *)&v404[8];
  *(_QWORD *)&v404[8] = 0;
  *(_QWORD *)&v404[16] = 0;
  v405 = 0;
  *(_QWORD *)(v299 + 216) = v407;
  *(_OWORD *)(v299 + 128) = v304;
  v307 = v406;
  v406 = 0uLL;
  v407 = 0;
  *(_OWORD *)(v299 + 152) = v305;
  v308 = v408;
  v408 = 0uLL;
  *(_OWORD *)(v299 + 176) = v306;
  v309 = v409;
  v409 = 0uLL;
  *(_OWORD *)(v299 + 200) = v307;
  *(_QWORD *)(v299 + 256) = &off_24C9CC8C8;
  *(_OWORD *)(v299 + 344) = *(_OWORD *)&__p[1];
  v310 = v411;
  v311 = v412;
  *((_QWORD *)&v411 + 1) = 0;
  v412 = 0;
  *(_QWORD *)(v299 + 280) = v311;
  *(_QWORD *)(v299 + 288) = &off_24C9CC900;
  *(_OWORD *)(v299 + 224) = v308;
  *(_OWORD *)(v299 + 240) = v309;
  v312 = v416;
  v416 = 0uLL;
  *(_QWORD *)(v299 + 336) = &off_24C9CC970;
  *(_QWORD *)(v299 + 360) = v388;
  __p[1] = 0;
  __p[2] = 0;
  v388 = 0;
  *(_QWORD *)(v299 + 384) = v390;
  *(_OWORD *)(v299 + 264) = v310;
  *(_OWORD *)(v299 + 296) = v414;
  v313 = v389;
  v389 = 0uLL;
  v390 = 0;
  v422 = 0uLL;
  v423 = 0;
  v424 = 0uLL;
  v425 = 0;
  v426 = 0uLL;
  v427 = 0uLL;
  v428 = 0uLL;
  v429 = 0;
  *(_QWORD *)&v430 = 0;
  *(_QWORD *)(v299 + 144) = &off_24C9B2310;
  *((_QWORD *)&v430 + 1) = 0;
  v431 = 0uLL;
  *(_QWORD *)&v411 = 0;
  v414 = 0uLL;
  *(_QWORD *)(v299 + 312) = &off_24C9B2310;
  *(_OWORD *)(v299 + 320) = v312;
  *(_OWORD *)(v299 + 368) = v313;
  v314 = v391;
  v391 = 0uLL;
  v315 = v392;
  *(_OWORD *)(v299 + 392) = v314;
  *(_OWORD *)(v299 + 408) = v315;
  v392 = 0uLL;
  *(_QWORD *)(v299 + 424) = &off_24C9CC938;
  *(_OWORD *)(v299 + 432) = v394;
  v316 = v395;
  *((_QWORD *)&v394 + 1) = 0;
  v395 = 0;
  *(_QWORD *)(v299 + 448) = v316;
  *(_QWORD *)(v299 + 456) = &off_24C9CC9A0;
  *(_OWORD *)(v299 + 464) = v397;
  *(_QWORD *)&v394 = 0;
  v397 = 0uLL;
  *(_QWORD *)(v299 + 480) = &off_24C9B2310;
  *(_OWORD *)(v299 + 488) = v399;
  v399 = 0uLL;
  *(_QWORD *)(v299 + 504) = &off_24C9CC9D8;
  v317 = *(_OWORD *)&__dst[1];
  *(_QWORD *)(v299 + 528) = v371;
  *(_OWORD *)(v299 + 512) = v317;
  __dst[1] = 0;
  __dst[2] = 0;
  v371 = 0;
  v318 = v372;
  *(_QWORD *)(v299 + 552) = v373;
  *(_OWORD *)(v299 + 536) = v318;
  v372 = 0uLL;
  v373 = 0;
  v319 = v374;
  v374 = 0uLL;
  v320 = v375;
  *(_OWORD *)(v299 + 560) = v319;
  *(_OWORD *)(v299 + 576) = v320;
  v375 = 0uLL;
  *(_QWORD *)(v299 + 592) = &off_24C9CCB08;
  *(_OWORD *)(v299 + 600) = v377;
  *(_QWORD *)(v299 + 616) = v378;
  *((_QWORD *)&v377 + 1) = 0;
  v378 = 0;
  *(_QWORD *)(v299 + 624) = &off_24C9CCAD0;
  *(_OWORD *)(v299 + 632) = v380;
  v380 = 0uLL;
  *(_QWORD *)&v377 = 0;
  *(_QWORD *)(v299 + 648) = &off_24C9B2310;
  *(_OWORD *)(v299 + 656) = v382;
  v382 = 0uLL;
  *(_QWORD *)(v299 + 672) = &off_24C9CCA08;
  v321 = *(_OWORD *)&v353[1];
  *(_QWORD *)(v299 + 696) = v354;
  *(_OWORD *)(v299 + 680) = v321;
  v353[1] = 0;
  v353[2] = 0;
  v354 = 0;
  v322 = v355;
  *(_QWORD *)(v299 + 720) = v356;
  *(_OWORD *)(v299 + 704) = v322;
  v355 = 0uLL;
  v356 = 0;
  v323 = v357;
  v357 = 0uLL;
  v324 = v358;
  *(_OWORD *)(v299 + 728) = v323;
  *(_OWORD *)(v299 + 744) = v324;
  v358 = 0uLL;
  *(_QWORD *)(v299 + 760) = &off_24C9B4888;
  *(_OWORD *)(v299 + 768) = v360;
  *(_QWORD *)(v299 + 784) = v361;
  *((_QWORD *)&v360 + 1) = 0;
  v361 = 0;
  *(_QWORD *)(v299 + 792) = &off_24C9CCA38;
  *(_OWORD *)(v299 + 800) = v363;
  v363 = 0uLL;
  *(_QWORD *)&v360 = 0;
  *(_QWORD *)(v299 + 816) = &off_24C9B2310;
  *(_OWORD *)(v299 + 824) = v365;
  v365 = 0uLL;
  *v351 = v299;
  sub_20EC1EDAC((uint64_t)v353);
  if (v352)
  {
    v325 = (unint64_t *)&v352->__shared_owners_;
    do
      v326 = __ldaxr(v325);
    while (__stlxr(v326 - 1, v325));
    if (!v326)
    {
      ((void (*)(std::__shared_weak_count *))v352->__on_zero_shared)(v352);
      std::__shared_weak_count::__release_weak(v352);
    }
  }
  sub_20EC1EFB8((uint64_t)__dst);
  v327 = v367;
  if (v367)
  {
    v328 = (unint64_t *)&v367->__shared_owners_;
    do
      v329 = __ldaxr(v328);
    while (__stlxr(v329 - 1, v328));
    if (!v329)
    {
      ((void (*)(std::__shared_weak_count *))v327->__on_zero_shared)(v327);
      std::__shared_weak_count::__release_weak(v327);
    }
  }
  v330 = v369;
  if (v369)
  {
    v331 = (unint64_t *)&v369->__shared_owners_;
    do
      v332 = __ldaxr(v331);
    while (__stlxr(v332 - 1, v331));
    if (!v332)
    {
      ((void (*)(std::__shared_weak_count *))v330->__on_zero_shared)(v330);
      std::__shared_weak_count::__release_weak(v330);
    }
  }
  sub_20EC1F344((uint64_t)__p);
  v333 = v384;
  if (v384)
  {
    v334 = (unint64_t *)&v384->__shared_owners_;
    do
      v335 = __ldaxr(v334);
    while (__stlxr(v335 - 1, v334));
    if (!v335)
    {
      ((void (*)(std::__shared_weak_count *))v333->__on_zero_shared)(v333);
      std::__shared_weak_count::__release_weak(v333);
    }
  }
  v336 = v386;
  if (v386)
  {
    v337 = (unint64_t *)&v386->__shared_owners_;
    do
      v338 = __ldaxr(v337);
    while (__stlxr(v338 - 1, v337));
    if (!v338)
    {
      ((void (*)(std::__shared_weak_count *))v336->__on_zero_shared)(v336);
      std::__shared_weak_count::__release_weak(v336);
    }
  }
  sub_20EC1F770((uint64_t)v404);
  v339 = v401;
  if (v401)
  {
    v340 = (unint64_t *)&v401->__shared_owners_;
    do
      v341 = __ldaxr(v340);
    while (__stlxr(v341 - 1, v340));
    if (!v341)
    {
      ((void (*)(std::__shared_weak_count *))v339->__on_zero_shared)(v339);
      std::__shared_weak_count::__release_weak(v339);
    }
  }
  v342 = v403;
  if (v403)
  {
    v343 = (unint64_t *)&v403->__shared_owners_;
    do
      v344 = __ldaxr(v343);
    while (__stlxr(v344 - 1, v343));
    if (!v344)
    {
      ((void (*)(std::__shared_weak_count *))v342->__on_zero_shared)(v342);
      std::__shared_weak_count::__release_weak(v342);
    }
  }
  sub_20E9BA4B8((uint64_t)v421);
  v345 = v418;
  if (v418)
  {
    v346 = (unint64_t *)&v418->__shared_owners_;
    do
      v347 = __ldaxr(v346);
    while (__stlxr(v347 - 1, v346));
    if (!v347)
    {
      ((void (*)(std::__shared_weak_count *))v345->__on_zero_shared)(v345);
      std::__shared_weak_count::__release_weak(v345);
    }
  }
  v348 = v420;
  if (v420)
  {
    v349 = (unint64_t *)&v420->__shared_owners_;
    do
      v350 = __ldaxr(v349);
    while (__stlxr(v350 - 1, v349));
    if (!v350)
    {
      ((void (*)(std::__shared_weak_count *))v348->__on_zero_shared)(v348);
      std::__shared_weak_count::__release_weak(v348);
    }
  }
}

void sub_20EC26804(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, _Unwind_Exception *exception_objecta, char a15, uint64_t a16, char a17, uint64_t a18, void *a19, void *a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41,uint64_t a42,char a43,uint64_t a44,void *a45,void *a46,uint64_t a47,uint64_t a48,void *a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a67;
  char a69;
  void *a71;
  uint64_t v71;

  if (*(char *)(v71 - 233) < 0)
  {
    operator delete(*(void **)(v71 - 256));
    sub_20E86665C(v71 - 224);
    sub_20E86665C(v71 - 208);
    if ((SLOBYTE(STACK[0x447]) & 0x80000000) == 0)
    {
LABEL_3:
      if ((SLOBYTE(STACK[0x467]) & 0x80000000) == 0)
        goto LABEL_5;
      goto LABEL_4;
    }
  }
  else
  {
    sub_20E86665C(v71 - 224);
    sub_20E86665C(v71 - 208);
    if ((SLOBYTE(STACK[0x447]) & 0x80000000) == 0)
      goto LABEL_3;
  }
  operator delete((void *)STACK[0x430]);
  if ((SLOBYTE(STACK[0x467]) & 0x80000000) == 0)
  {
LABEL_5:
    sub_20E86665C((uint64_t)&a15);
    sub_20E86665C((uint64_t)&a17);
    sub_20EC1EFB8((uint64_t)&a45);
    sub_20E86665C((uint64_t)&a41);
    sub_20E86665C((uint64_t)&a43);
    sub_20EC1F344((uint64_t)&a71);
    sub_20E86665C((uint64_t)&a67);
    sub_20E86665C((uint64_t)&a69);
    sub_20EC1F770((uint64_t)&STACK[0x2C0]);
    sub_20E86665C((uint64_t)&STACK[0x2A0]);
    sub_20E86665C((uint64_t)&STACK[0x2B0]);
    sub_20E9BA4B8((uint64_t)&STACK[0x388]);
    sub_20E86665C((uint64_t)&STACK[0x368]);
    sub_20E86665C((uint64_t)&STACK[0x378]);
    _Unwind_Resume(a1);
  }
LABEL_4:
  operator delete((void *)STACK[0x450]);
  goto LABEL_5;
}

void sub_20EC26D8C()
{
  void *v0;
  int v1;
  uint64_t v2;

  sub_20E86665C(v2 - 144);
  if (v1 < 0)
    operator delete(v0);
  JUMPOUT(0x20EC26CB0);
}

void sub_20EC26DA8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  void *__p;
  uint64_t v72;
  std::__shared_weak_count *v73;
  uint64_t v74;

  if (v73)
  {
    std::__shared_weak_count::__release_weak(v73);
    sub_20E86665C(v72);
    sub_20E86665C(v74);
    if ((SLOBYTE(STACK[0x227]) & 0x80000000) == 0)
    {
LABEL_3:
      if ((SLOBYTE(STACK[0x20F]) & 0x80000000) == 0)
      {
LABEL_5:
        sub_20E86665C((uint64_t)&STACK[0x430]);
        sub_20E86665C((uint64_t)&STACK[0x450]);
        JUMPOUT(0x20EC26E98);
      }
LABEL_4:
      operator delete(__p);
      goto LABEL_5;
    }
  }
  else
  {
    sub_20E86665C(v72);
    sub_20E86665C(v74);
    if ((SLOBYTE(STACK[0x227]) & 0x80000000) == 0)
      goto LABEL_3;
  }
  operator delete((void *)STACK[0x210]);
  if ((SLOBYTE(STACK[0x20F]) & 0x80000000) == 0)
    goto LABEL_5;
  goto LABEL_4;
}

void sub_20EC26E28()
{
  uint64_t v0;

  (*(void (**)(uint64_t))(*(_QWORD *)v0 + 8))(v0);
  sub_20E86665C((uint64_t)&STACK[0x450]);
  JUMPOUT(0x20EC26E90);
}

void sub_20EC26F18()
{
  void *v0;
  int v1;

  sub_20E86665C((uint64_t)&STACK[0x430]);
  if (v1 < 0)
    operator delete(v0);
  JUMPOUT(0x20EC26E98);
}

void sub_20EC26F34()
{
  uint64_t v0;
  std::__shared_weak_count *v1;
  uint64_t v2;

  if (v1)
  {
    std::__shared_weak_count::__release_weak(v1);
    sub_20E86665C(v0);
    sub_20E86665C(v2);
    if ((SLOBYTE(STACK[0x2F7]) & 0x80000000) == 0)
    {
LABEL_3:
      if ((SLOBYTE(STACK[0x2DF]) & 0x80000000) == 0)
      {
LABEL_5:
        sub_20E86665C((uint64_t)&STACK[0x450]);
        sub_20E86665C((uint64_t)&STACK[0x470]);
        JUMPOUT(0x20EC27024);
      }
LABEL_4:
      operator delete((void *)STACK[0x2C8]);
      goto LABEL_5;
    }
  }
  else
  {
    sub_20E86665C(v0);
    sub_20E86665C(v2);
    if ((SLOBYTE(STACK[0x2F7]) & 0x80000000) == 0)
      goto LABEL_3;
  }
  operator delete((void *)STACK[0x2E0]);
  if ((SLOBYTE(STACK[0x2DF]) & 0x80000000) == 0)
    goto LABEL_5;
  goto LABEL_4;
}

void sub_20EC26FB4()
{
  uint64_t v0;

  (*(void (**)(uint64_t))(*(_QWORD *)v0 + 8))(v0);
  sub_20E86665C((uint64_t)&STACK[0x470]);
  JUMPOUT(0x20EC2701CLL);
}

void sub_20EC270A4()
{
  void *v0;
  int v1;

  sub_20E86665C((uint64_t)&STACK[0x450]);
  if (v1 < 0)
    operator delete(v0);
  JUMPOUT(0x20EC27024);
}

void sub_20EC270C0()
{
  uint64_t v0;

  sub_20E86665C((uint64_t)&STACK[0x470]);
  sub_20E86665C(v0 - 256);
  JUMPOUT(0x20EC27148);
}

void sub_20EC270D8()
{
  uint64_t v0;
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v0 + 8))(v0);
  sub_20E86665C(v1 - 256);
  JUMPOUT(0x20EC27140);
}

void sub_20EC271DC()
{
  void *v0;
  int v1;

  sub_20E86665C((uint64_t)&STACK[0x470]);
  if (v1 < 0)
    operator delete(v0);
  JUMPOUT(0x20EC27148);
}

void sub_20EC271FC(uint64_t a1)
{
  sub_20EC28AD8(a1);
  JUMPOUT(0x212BC6398);
}

void sub_20EC27220(_QWORD *a1, std::__shared_weak_count_vtbl **a2)
{
  uint64_t *v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  uint64_t v8;
  _QWORD *v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t *p_shared_weak_owners;
  unint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  unint64_t v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  std::mutex **v28;
  uint64_t **v29;
  std::__shared_weak_count *v30;
  std::__shared_weak_count *v31;
  std::__shared_weak_count *v32;
  uint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  unint64_t *v36;
  unint64_t v37;
  uint64_t **v38;
  std::__shared_weak_count *v39;
  std::__shared_weak_count *v40;
  std::__shared_weak_count *v41;
  uint64_t v42;
  unint64_t *v43;
  unint64_t v44;
  unint64_t *v45;
  unint64_t v46;
  char *v47;
  _QWORD *v48;
  uint64_t v49;
  unint64_t *v50;
  unint64_t v51;
  std::__shared_weak_count_vtbl *v52;
  std::__shared_weak_count_vtbl *v53;
  unint64_t *v54;
  unint64_t v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  __int128 *v60;
  uint64_t v61;
  __int128 v62;
  std::__shared_weak_count *v63;
  __int128 v64;
  uint64_t v65;
  __int128 *v66;
  _BYTE v67[24];
  _BYTE *v68;
  uint64_t v69;

  v69 = *MEMORY[0x24BDAC8D0];
  if (!(*(unsigned int (**)(_QWORD *))(*a1 + 48))(a1))
    return;
  if (!a1[9]
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 234, (uint64_t)"scheduler_", 10, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v4 = (uint64_t *)a1[18];
  if (v4)
  {
    v5 = (std::__shared_weak_count *)operator new(0x28uLL);
    v6 = v5;
    v5->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    v5->__shared_weak_owners_ = 0;
    v5->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9CD010;
    v8 = (uint64_t)a2[1];
    v5[1].__vftable = *a2;
    v9 = &v5[1].__vftable;
    v5[1].__shared_owners_ = v8;
    if (v8)
    {
      v10 = (unint64_t *)(v8 + 8);
      do
        v11 = __ldxr(v10);
      while (__stxr(v11 + 1, v10));
      v4 = (uint64_t *)a1[18];
    }
    v63 = v5;
    p_shared_weak_owners = (unint64_t *)&v5->__shared_weak_owners_;
    do
      v13 = __ldxr(p_shared_weak_owners);
    while (__stxr(v13 + 1, p_shared_weak_owners));
    v14 = (_QWORD *)operator new();
    *v14 = v4 + 7;
    std::mutex::lock((std::mutex *)(v4 + 7));
    *(_QWORD *)&v64 = v14;
    *((_QWORD *)&v64 + 1) = v4;
    if (!*((_BYTE *)v4 + 48))
      sub_20E866B34();
    v15 = v4[4];
    v16 = *v4;
    v17 = (_QWORD *)(*v4 + 16 * v15);
    do
      v18 = __ldxr(p_shared_owners);
    while (__stxr(v18 + 1, p_shared_owners));
    *v17 = v9;
    v19 = v16 + 16 * v15;
    v20 = *(std::__shared_weak_count **)(v19 + 8);
    *(_QWORD *)(v19 + 8) = v6;
    if (v20)
    {
      v21 = (unint64_t *)&v20->__shared_owners_;
      do
        v22 = __ldaxr(v21);
      while (__stlxr(v22 - 1, v21));
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
        std::__shared_weak_count::__release_weak(v20);
      }
    }
    v23 = (v4[1] - *v4) >> 4;
    v24 = v4[5];
    v25 = v4[4] + 1;
    if (v25 >= v23)
      v26 = (v4[1] - *v4) >> 4;
    else
      v26 = 0;
    v4[4] = v25 - v26;
    if (v24 == v23)
    {
      v27 = v4[3] + 1;
      if (v27 < v23)
        v23 = 0;
      v4[3] = v27 - v23;
      v28 = (std::mutex **)v64;
      if (!(_QWORD)v64)
      {
LABEL_37:
        v38 = (uint64_t **)a1[9];
        v64 = 0uLL;
        v39 = (std::__shared_weak_count *)a1[5];
        if (v39)
        {
          v40 = std::__shared_weak_count::lock(v39);
          if (v40)
          {
            v41 = v40;
            v42 = a1[4];
            v43 = (unint64_t *)&v40->__shared_weak_owners_;
            do
              v44 = __ldxr(v43);
            while (__stxr(v44 + 1, v43));
            *(_QWORD *)&v64 = v42;
            *((_QWORD *)&v64 + 1) = v40;
            v45 = (unint64_t *)&v40->__shared_owners_;
            do
              v46 = __ldaxr(v45);
            while (__stlxr(v46 - 1, v45));
            if (!v46)
            {
              ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
              std::__shared_weak_count::__release_weak(v41);
            }
          }
          else
          {
            v64 = 0uLL;
          }
        }
        v47 = (char *)operator new(0x30uLL);
        *(_QWORD *)v47 = &off_24C9CD060;
        *(_OWORD *)(v47 + 8) = v64;
        v64 = 0uLL;
        *((_QWORD *)v47 + 3) = v9;
        *((_QWORD *)v47 + 4) = v6;
        v65 = 0;
        v66 = 0;
        v68 = v47;
        sub_210216F3C(*v38, (uint64_t)v67);
        v48 = v68;
        if (v68 == v67)
        {
          v49 = 4;
          v48 = v67;
        }
        else
        {
          if (!v68)
            goto LABEL_51;
          v49 = 5;
        }
        (*(void (**)(void))(*v48 + 8 * v49))();
LABEL_51:
        if (v63)
        {
          v50 = (unint64_t *)&v63->__shared_owners_;
          do
            v51 = __ldaxr(v50);
          while (__stlxr(v51 - 1, v50));
          if (!v51)
          {
            ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
            std::__shared_weak_count::__release_weak(v63);
          }
        }
        return;
      }
    }
    else
    {
      v4[5] = v24 + 1;
      v28 = (std::mutex **)v64;
      if (!(_QWORD)v64)
        goto LABEL_37;
    }
    std::mutex::unlock(*v28);
    MEMORY[0x212BC6398](v28, 0x20C4093837F09);
    goto LABEL_37;
  }
  v29 = (uint64_t **)a1[9];
  v62 = 0uLL;
  v30 = (std::__shared_weak_count *)a1[5];
  if (v30)
  {
    v31 = std::__shared_weak_count::lock(v30);
    if (v31)
    {
      v32 = v31;
      v33 = a1[4];
      v34 = (unint64_t *)&v31->__shared_weak_owners_;
      do
        v35 = __ldxr(v34);
      while (__stxr(v35 + 1, v34));
      *(_QWORD *)&v62 = v33;
      *((_QWORD *)&v62 + 1) = v31;
      v36 = (unint64_t *)&v31->__shared_owners_;
      do
        v37 = __ldaxr(v36);
      while (__stlxr(v37 - 1, v36));
      if (!v37)
      {
        ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
        std::__shared_weak_count::__release_weak(v32);
      }
    }
    else
    {
      v62 = 0uLL;
    }
  }
  v52 = *a2;
  v53 = a2[1];
  if (v53)
  {
    v54 = (unint64_t *)&v53->~__shared_weak_count_0;
    do
      v55 = __ldxr(v54);
    while (__stxr(v55 + 1, v54));
  }
  v56 = (char *)operator new(0x28uLL);
  *(_QWORD *)v56 = &off_24C9CD0E0;
  *(_OWORD *)(v56 + 8) = v62;
  *((_QWORD *)v56 + 3) = v52;
  *((_QWORD *)v56 + 4) = v53;
  v66 = (__int128 *)v56;
  sub_210216F3C(*v29, (uint64_t)&v64);
  v60 = v66;
  if (v66 == &v64)
  {
    v61 = 4;
    v60 = &v64;
  }
  else
  {
    if (!v66)
      return;
    v61 = 5;
  }
  (*(void (**)(__int128 *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v60 + 8 * v61))(v60, v57, v58, v59);
}

void sub_20EC27680(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, char *a18)
{
  char *v18;
  char *v20;
  uint64_t v21;

  v20 = a18;
  if (a18 == v18)
  {
    v21 = 4;
    v20 = &a15;
  }
  else
  {
    if (!a18)
    {
      sub_20EBB635C((uint64_t)&a9);
      _Unwind_Resume(a1);
    }
    v21 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v20 + 8 * v21))();
  sub_20EBB635C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20EC276D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,char *a23)
{
  char *v23;
  char *v25;
  uint64_t v26;

  v25 = a23;
  if (a23 == v23)
  {
    v26 = 4;
    v25 = &a20;
  }
  else
  {
    if (!a23)
      goto LABEL_6;
    v26 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v25 + 8 * v26))();
LABEL_6:
  sub_20EA02254((uint64_t)&a15);
  sub_20E86665C((uint64_t)&a13);
  _Unwind_Resume(a1);
}

void sub_20EC27724(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  std::__shared_weak_count *v5;
  uint64_t v7;
  va_list va;
  uint64_t v9;
  va_list va1;

  va_start(va1, a5);
  va_start(va, a5);
  v7 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  sub_20EA0228C((std::mutex ***)va1);
  std::__shared_weak_count::__release_weak(v5);
  sub_20E86665C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20EC27748(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  std::__shared_weak_count *v5;
  uint64_t v6;
  va_list va;

  va_start(va, a5);
  MEMORY[0x212BC6398](v6, 0x20C4093837F09);
  std::__shared_weak_count::__release_weak(v5);
  sub_20E86665C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20EC2777C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  std::__shared_weak_count *v13;

  std::__shared_weak_count::__release_weak(v13);
  sub_20E86665C((uint64_t)&a13);
  _Unwind_Resume(a1);
}

void sub_20EC2779C(_QWORD *a1, std::__shared_weak_count_vtbl **a2, std::__shared_weak_count_vtbl **a3)
{
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t *p_shared_weak_owners;
  unint64_t v17;
  uint64_t *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  std::__shared_weak_count **v22;
  unint64_t v23;
  uint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  std::mutex **v33;
  uint64_t **v34;
  std::__shared_weak_count *v35;
  std::__shared_weak_count *v36;
  std::__shared_weak_count *v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  unint64_t *v41;
  unint64_t v42;
  uint64_t **v43;
  std::__shared_weak_count *v44;
  std::__shared_weak_count *v45;
  std::__shared_weak_count *v46;
  uint64_t v47;
  unint64_t *v48;
  unint64_t v49;
  unint64_t *v50;
  unint64_t v51;
  char *v52;
  std::string *v53;
  uint64_t v54;
  uint64_t *v55;
  unint64_t v56;
  unint64_t *v57;
  unint64_t v58;
  std::__shared_weak_count_vtbl *v59;
  std::__shared_weak_count_vtbl *v60;
  unint64_t *v61;
  unint64_t v62;
  _QWORD *v63;
  char *v64;
  __int128 *v65;
  uint64_t v66;
  _QWORD *v67;
  _QWORD *v68;
  _QWORD *v69;
  __int128 *v70;
  std::string *v71;
  std::runtime_error *exception;
  std::runtime_error *v73;
  std::__shared_weak_count *v74[2];
  _QWORD *v75;
  std::__shared_weak_count *v76;
  std::__shared_weak_count *v77;
  std::runtime_error v78;
  std::__shared_weak_count *v79;
  std::__shared_weak_count *v80;
  __int128 v81;
  _QWORD *v82;
  __int128 *v83;
  _QWORD v84[3];
  std::string v85;
  std::string *v86;
  uint64_t v87;

  v87 = *MEMORY[0x24BDAC8D0];
  if (((*(uint64_t (**)(_QWORD *))(*a1 + 48))(a1) & 1) == 0)
  {
    *(_QWORD *)&v81 = "Invalid operation. Interface is disabled for ";
    *((_QWORD *)&v81 + 1) = 45;
    v69 = (_QWORD *)a1[6];
    v68 = a1 + 6;
    v67 = v69;
    v70 = (__int128 *)*((unsigned __int8 *)v68 + 23);
    if ((char)v70 < 0)
      v70 = (__int128 *)v68[1];
    else
      v67 = v68;
    v82 = v67;
    v83 = v70;
    sub_20E8778D4((uint64_t)&v81, (uint64_t)v84, 0, 0, &v85);
    if ((v85.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v71 = &v85;
    else
      v71 = (std::string *)v85.__r_.__value_.__r.__words[0];
    std::runtime_error::runtime_error(&v78, (const char *)v71);
    v78.__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v73 = std::runtime_error::runtime_error(exception, &v78);
    v73->__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    __cxa_throw(v73, (struct type_info *)&unk_24CA1E2D0, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  if (!a1[9]
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 294, (uint64_t)"scheduler_", 10, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  if (a1[18])
  {
    v6 = (std::__shared_weak_count *)operator new(0x20uLL);
    v6->__shared_weak_owners_ = 0;
    v6->__vftable = (std::__shared_weak_count_vtbl *)&unk_24C9B85F0;
    v6[1].__vftable = *a3;
    v77 = v6;
    v75 = &v6[1].__vftable;
    v76 = v6;
    v6->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    *a3 = 0;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    if (!a1[18]
      && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 414, (uint64_t)"limiting_buffer_", 16, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v9 = (std::__shared_weak_count *)operator new(0x28uLL);
    v10 = v9;
    v9->__shared_owners_ = 0;
    v11 = (unint64_t *)&v9->__shared_owners_;
    v9->__shared_weak_owners_ = 0;
    v9->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9CD010;
    v12 = (uint64_t)a2[1];
    v9[1].__vftable = *a2;
    v13 = v9 + 1;
    v9[1].__shared_owners_ = v12;
    if (v12)
    {
      v14 = (unint64_t *)(v12 + 8);
      do
        v15 = __ldxr(v14);
      while (__stxr(v15 + 1, v14));
    }
    v79 = v9 + 1;
    v80 = v9;
    p_shared_weak_owners = (unint64_t *)&v9->__shared_weak_owners_;
    do
      v17 = __ldxr(p_shared_weak_owners);
    while (__stxr(v17 + 1, p_shared_weak_owners));
    v18 = (uint64_t *)a1[18];
    v19 = (_QWORD *)operator new();
    *v19 = v18 + 7;
    std::mutex::lock((std::mutex *)(v18 + 7));
    *(_QWORD *)&v81 = v19;
    *((_QWORD *)&v81 + 1) = v18;
    if (!*((_BYTE *)v18 + 48))
      sub_20E866B34();
    v20 = v18[4];
    v21 = *v18;
    v22 = (std::__shared_weak_count **)(*v18 + 16 * v20);
    do
      v23 = __ldxr(v11);
    while (__stxr(v23 + 1, v11));
    *v22 = v13;
    v24 = v21 + 16 * v20;
    v25 = *(std::__shared_weak_count **)(v24 + 8);
    *(_QWORD *)(v24 + 8) = v10;
    if (v25)
    {
      v26 = (unint64_t *)&v25->__shared_owners_;
      do
        v27 = __ldaxr(v26);
      while (__stlxr(v27 - 1, v26));
      if (!v27)
      {
        ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
        std::__shared_weak_count::__release_weak(v25);
      }
    }
    v28 = (v18[1] - *v18) >> 4;
    v29 = v18[5];
    v30 = v18[4] + 1;
    if (v30 >= v28)
      v31 = (v18[1] - *v18) >> 4;
    else
      v31 = 0;
    v18[4] = v30 - v31;
    if (v29 == v28)
    {
      v32 = v18[3] + 1;
      if (v32 < v28)
        v28 = 0;
      v18[3] = v32 - v28;
      v33 = (std::mutex **)v81;
      if (!(_QWORD)v81)
      {
LABEL_40:
        v43 = (uint64_t **)a1[9];
        v81 = 0uLL;
        v44 = (std::__shared_weak_count *)a1[5];
        if (v44)
        {
          v45 = std::__shared_weak_count::lock(v44);
          if (v45)
          {
            v46 = v45;
            v47 = a1[4];
            v48 = (unint64_t *)&v45->__shared_weak_owners_;
            do
              v49 = __ldxr(v48);
            while (__stxr(v49 + 1, v48));
            *(_QWORD *)&v81 = v47;
            *((_QWORD *)&v81 + 1) = v45;
            v50 = (unint64_t *)&v45->__shared_owners_;
            do
              v51 = __ldaxr(v50);
            while (__stlxr(v51 - 1, v50));
            if (!v51)
            {
              ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
              std::__shared_weak_count::__release_weak(v46);
            }
          }
          else
          {
            v81 = 0uLL;
          }
        }
        v52 = (char *)operator new(0x38uLL);
        *(_QWORD *)v52 = &off_24C9CD160;
        *(_OWORD *)(v52 + 8) = v81;
        v81 = 0uLL;
        *((_QWORD *)v52 + 3) = v13;
        *((_QWORD *)v52 + 4) = v10;
        v82 = 0;
        v83 = 0;
        *((_QWORD *)v52 + 5) = v75;
        *((_QWORD *)v52 + 6) = v76;
        v84[0] = 0;
        v84[1] = 0;
        v86 = (std::string *)v52;
        sub_210216F3C(*v43, (uint64_t)&v85);
        v53 = v86;
        if (v86 == &v85)
        {
          v54 = 4;
          v53 = &v85;
        }
        else
        {
          if (!v86)
            goto LABEL_54;
          v54 = 5;
        }
        (*(void (**)(void))(v53->__r_.__value_.__r.__words[0] + 8 * v54))();
LABEL_54:
        if (v80)
        {
          v55 = &v80->__shared_owners_;
          do
            v56 = __ldaxr((unint64_t *)v55);
          while (__stlxr(v56 - 1, (unint64_t *)v55));
          if (!v56)
          {
            ((void (*)(std::__shared_weak_count *))v80->__on_zero_shared)(v80);
            std::__shared_weak_count::__release_weak(v80);
          }
        }
        if (v77)
        {
          v57 = (unint64_t *)&v77->__shared_owners_;
          do
            v58 = __ldaxr(v57);
          while (__stlxr(v58 - 1, v57));
          if (!v58)
          {
            ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
            std::__shared_weak_count::__release_weak(v77);
          }
        }
        return;
      }
    }
    else
    {
      v18[5] = v29 + 1;
      v33 = (std::mutex **)v81;
      if (!(_QWORD)v81)
        goto LABEL_40;
    }
    std::mutex::unlock(*v33);
    MEMORY[0x212BC6398](v33, 0x20C4093837F09);
    goto LABEL_40;
  }
  v34 = (uint64_t **)a1[9];
  *(_OWORD *)v74 = 0uLL;
  v35 = (std::__shared_weak_count *)a1[5];
  if (v35)
  {
    v36 = std::__shared_weak_count::lock(v35);
    if (v36)
    {
      v37 = v36;
      v38 = (std::__shared_weak_count *)a1[4];
      v39 = (unint64_t *)&v36->__shared_weak_owners_;
      do
        v40 = __ldxr(v39);
      while (__stxr(v40 + 1, v39));
      v74[0] = v38;
      v74[1] = v36;
      v41 = (unint64_t *)&v36->__shared_owners_;
      do
        v42 = __ldaxr(v41);
      while (__stlxr(v42 - 1, v41));
      if (!v42)
      {
        ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
        std::__shared_weak_count::__release_weak(v37);
      }
    }
    else
    {
      *(_OWORD *)v74 = 0uLL;
    }
  }
  v59 = *a2;
  v60 = a2[1];
  if (v60)
  {
    v61 = (unint64_t *)&v60->~__shared_weak_count_0;
    do
      v62 = __ldxr(v61);
    while (__stxr(v62 + 1, v61));
  }
  v63 = operator new(0x20uLL);
  v63[1] = 0;
  v63[2] = 0;
  *v63 = &unk_24C9B85F0;
  v63[3] = *a3;
  *a3 = 0;
  v64 = (char *)operator new(0x38uLL);
  *(_QWORD *)v64 = &off_24C9CD1E0;
  *(_OWORD *)(v64 + 8) = *(_OWORD *)v74;
  *((_QWORD *)v64 + 3) = v59;
  *((_QWORD *)v64 + 4) = v60;
  *((_QWORD *)v64 + 5) = v63 + 3;
  *((_QWORD *)v64 + 6) = v63;
  v83 = (__int128 *)v64;
  sub_210216F3C(*v34, (uint64_t)&v81);
  v65 = v83;
  if (v83 == &v81)
  {
    v66 = 4;
    v65 = &v81;
  }
  else
  {
    if (!v83)
      return;
    v66 = 5;
  }
  (*(void (**)(__int128 *))(*(_QWORD *)v65 + 8 * v66))(v65);
}

void sub_20EC27E80(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, std::runtime_error a20,std::exception_ptr a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27)
{
  std::promise<void> *v27;
  uint64_t v28;
  std::exception_ptr v29;

  if (a2)
  {
    __cxa_begin_catch(exception_object);
    std::current_exception();
    __cxa_end_catch();
    v29.__ptr_ = &a21;
    std::promise<void>::set_exception(v27, v29);
    std::exception_ptr::~exception_ptr(&a21);
    std::runtime_error::~runtime_error(&a20);
    if (*(char *)(v28 - 97) < 0)
      operator delete(*(void **)(v28 - 120));
    JUMPOUT(0x20EC27D90);
  }
  _Unwind_Resume(exception_object);
}

void sub_20EC27F90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  va_list va;
  uint64_t v15;
  uint64_t v16;
  va_list va1;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  va_list va2;
  uint64_t v24;
  va_list va3;

  va_start(va3, a8);
  va_start(va2, a8);
  va_start(va1, a8);
  va_start(va, a8);
  v13 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v16 = va_arg(va2, _QWORD);
  v18 = va_arg(va2, _QWORD);
  v19 = va_arg(va2, _QWORD);
  v20 = va_arg(va2, _QWORD);
  v21 = va_arg(va2, _QWORD);
  va_copy(va3, va2);
  v22 = va_arg(va3, _QWORD);
  v24 = va_arg(va3, _QWORD);
  v11 = *(_QWORD **)(v9 - 96);
  if (v11 == v8)
  {
    v12 = 4;
    v11 = (_QWORD *)(v9 - 120);
  }
  else
  {
    if (!v11)
      goto LABEL_6;
    v12 = 5;
  }
  (*(void (**)(void))(*v11 + 8 * v12))();
LABEL_6:
  sub_20EA031A8((uint64_t *)va3);
  sub_20E86665C((uint64_t)va2);
  sub_20E86665C((uint64_t)va);
  sub_20E86665C((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_20EC28030(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  uint64_t v9;
  va_list va;
  uint64_t v11;
  va_list va1;

  va_start(va1, a8);
  va_start(va, a8);
  v9 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  sub_20E86665C((uint64_t)va);
  sub_20E86665C((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_20EC2804C(uint64_t a1)
{
  uint64_t *v1;

  v1 = *(uint64_t **)(a1 + 72);
  if (v1)
  {
    sub_210217048(*v1);
  }
  else
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 167, (uint64_t)"scheduler_ != nullptr", 21, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    sub_210217048(**(_QWORD **)(a1 + 72));
  }
}

_QWORD *sub_20EC280C0(_QWORD *a1)
{
  uint64_t **v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *result;
  uint64_t v9;
  _BYTE v10[24];
  _BYTE *v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v2 = (uint64_t **)a1[9];
  if (!v2)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 181, (uint64_t)"scheduler_", 10, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v2 = (uint64_t **)a1[9];
  }
  v4 = a1[4];
  v3 = a1[5];
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = operator new(0x20uLL);
  *v7 = &off_24C9CD260;
  v7[1] = v4;
  v7[2] = v3;
  v11 = v7;
  sub_210216F3C(*v2, (uint64_t)v10);
  result = v11;
  if (v11 == v10)
  {
    v9 = 4;
    result = v10;
  }
  else
  {
    if (!v11)
      return result;
    v9 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v9))();
}

void sub_20EC281D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v13;

  if (a13 == v13)
  {
    (*(void (**)(void))(a10 + 32))();
    _Unwind_Resume(exception_object);
  }
  if (a13)
  {
    (*(void (**)(void))(*(_QWORD *)a13 + 40))();
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20EC28234(_QWORD *a1)
{
  uint64_t **v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *result;
  uint64_t v9;
  _BYTE v10[24];
  _BYTE *v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v2 = (uint64_t **)a1[9];
  if (!v2)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 202, (uint64_t)"scheduler_", 10, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v2 = (uint64_t **)a1[9];
  }
  v4 = a1[4];
  v3 = a1[5];
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = operator new(0x20uLL);
  *v7 = &off_24C9CD2E0;
  v7[1] = v4;
  v7[2] = v3;
  v11 = v7;
  sub_210216F3C(*v2, (uint64_t)v10);
  result = v11;
  if (v11 == v10)
  {
    v9 = 4;
    result = v10;
  }
  else
  {
    if (!v11)
      return result;
    v9 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v9))();
}

void sub_20EC28344(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v13;

  if (a13 == v13)
  {
    (*(void (**)(void))(a10 + 32))();
    _Unwind_Resume(exception_object);
  }
  if (a13)
  {
    (*(void (**)(void))(*(_QWORD *)a13 + 40))();
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_20EC283A8@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  unint64_t *v5;
  int v6;
  unint64_t v7;
  uint64_t **v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *p_shared_weak_owners;
  unint64_t v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v22;
  _BYTE v23[24];
  _BYTE *v24;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  v4 = operator new();
  *(_QWORD *)(v4 + 8) = 0;
  v5 = (unint64_t *)(v4 + 8);
  *(_QWORD *)(v4 + 24) = 850045863;
  *(_QWORD *)(v4 + 16) = 0;
  *(_OWORD *)(v4 + 32) = 0u;
  *(_OWORD *)(v4 + 48) = 0u;
  *(_OWORD *)(v4 + 64) = 0u;
  *(_QWORD *)(v4 + 80) = 0;
  *(_QWORD *)(v4 + 88) = 1018212795;
  *(_OWORD *)(v4 + 96) = 0u;
  *(_OWORD *)(v4 + 112) = 0u;
  *(_OWORD *)(v4 + 124) = 0u;
  *(_QWORD *)v4 = &off_24C9B80A0;
  v22 = v4;
  std::mutex::lock((std::mutex *)(v4 + 24));
  v6 = *(_DWORD *)(v4 + 136);
  if ((v6 & 2) != 0)
    sub_20E96CE78(1u);
  do
    v7 = __ldxr(v5);
  while (__stxr(v7 + 1, v5));
  *(_DWORD *)(v4 + 136) = v6 | 2;
  std::mutex::unlock((std::mutex *)(v4 + 24));
  v8 = (uint64_t **)a1[9];
  v9 = (std::__shared_weak_count *)a1[5];
  if (v9)
  {
    v10 = std::__shared_weak_count::lock(v9);
    v11 = v10;
    if (v10)
    {
      v12 = a1[4];
      p_shared_weak_owners = (unint64_t *)&v10->__shared_weak_owners_;
      do
        v14 = __ldxr(p_shared_weak_owners);
      while (__stxr(v14 + 1, p_shared_weak_owners));
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        v16 = __ldaxr(p_shared_owners);
      while (__stlxr(v16 - 1, p_shared_owners));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    else
    {
      v12 = 0;
    }
  }
  else
  {
    v12 = 0;
    v11 = 0;
  }
  v17 = operator new(0x20uLL);
  *v17 = &off_24C9CD360;
  v17[1] = v12;
  v17[2] = v11;
  v17[3] = &v22;
  v24 = v17;
  sub_210216F3C(*v8, (uint64_t)v23);
  v18 = v24;
  if (v24 == v23)
  {
    v19 = 4;
    v18 = v23;
    goto LABEL_17;
  }
  if (v24)
  {
    v19 = 5;
LABEL_17:
    (*(void (**)(_QWORD *))(*v18 + 8 * v19))(v18);
  }
  std::__assoc_sub_state::wait((std::__assoc_sub_state *)v4);
  sub_20EA04D14(v4, a2);
  do
    v20 = __ldaxr(v5);
  while (__stlxr(v20 - 1, v5));
  if (!v20)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
  return sub_20EA04DE8(&v22);
}

void sub_20EC285C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  unint64_t *v10;
  unint64_t v12;

  do
    v12 = __ldaxr(v10);
  while (__stlxr(v12 - 1, v10));
  if (!v12)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
    sub_20EA04DE8(&a9);
    _Unwind_Resume(a1);
  }
  sub_20EA04DE8(&a9);
  _Unwind_Resume(a1);
}

uint64_t *sub_20EC28688@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  unint64_t *v5;
  int v6;
  unint64_t v7;
  uint64_t **v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *p_shared_weak_owners;
  unint64_t v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v22;
  _BYTE v23[24];
  _BYTE *v24;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  v4 = operator new();
  *(_QWORD *)(v4 + 8) = 0;
  v5 = (unint64_t *)(v4 + 8);
  *(_QWORD *)(v4 + 24) = 850045863;
  *(_QWORD *)(v4 + 16) = 0;
  *(_OWORD *)(v4 + 32) = 0u;
  *(_OWORD *)(v4 + 48) = 0u;
  *(_OWORD *)(v4 + 64) = 0u;
  *(_QWORD *)(v4 + 80) = 0;
  *(_QWORD *)(v4 + 88) = 1018212795;
  *(_OWORD *)(v4 + 96) = 0u;
  *(_OWORD *)(v4 + 112) = 0u;
  *(_OWORD *)(v4 + 124) = 0u;
  *(_QWORD *)v4 = &off_24C9B80A0;
  v22 = v4;
  std::mutex::lock((std::mutex *)(v4 + 24));
  v6 = *(_DWORD *)(v4 + 136);
  if ((v6 & 2) != 0)
    sub_20E96CE78(1u);
  do
    v7 = __ldxr(v5);
  while (__stxr(v7 + 1, v5));
  *(_DWORD *)(v4 + 136) = v6 | 2;
  std::mutex::unlock((std::mutex *)(v4 + 24));
  v8 = (uint64_t **)a1[9];
  v9 = (std::__shared_weak_count *)a1[5];
  if (v9)
  {
    v10 = std::__shared_weak_count::lock(v9);
    v11 = v10;
    if (v10)
    {
      v12 = a1[4];
      p_shared_weak_owners = (unint64_t *)&v10->__shared_weak_owners_;
      do
        v14 = __ldxr(p_shared_weak_owners);
      while (__stxr(v14 + 1, p_shared_weak_owners));
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        v16 = __ldaxr(p_shared_owners);
      while (__stlxr(v16 - 1, p_shared_owners));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    else
    {
      v12 = 0;
    }
  }
  else
  {
    v12 = 0;
    v11 = 0;
  }
  v17 = operator new(0x20uLL);
  *v17 = &off_24C9CD3E0;
  v17[1] = v12;
  v17[2] = v11;
  v17[3] = &v22;
  v24 = v17;
  sub_210216F3C(*v8, (uint64_t)v23);
  v18 = v24;
  if (v24 == v23)
  {
    v19 = 4;
    v18 = v23;
    goto LABEL_17;
  }
  if (v24)
  {
    v19 = 5;
LABEL_17:
    (*(void (**)(_QWORD *))(*v18 + 8 * v19))(v18);
  }
  std::__assoc_sub_state::wait((std::__assoc_sub_state *)v4);
  sub_20EA04D14(v4, a2);
  do
    v20 = __ldaxr(v5);
  while (__stlxr(v20 - 1, v5));
  if (!v20)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
  return sub_20EA04DE8(&v22);
}

void sub_20EC288A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  unint64_t *v10;
  unint64_t v12;

  do
    v12 = __ldaxr(v10);
  while (__stlxr(v12 - 1, v10));
  if (!v12)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
    sub_20EA04DE8(&a9);
    _Unwind_Resume(a1);
  }
  sub_20EA04DE8(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20EC28968(uint64_t a1)
{
  return sub_20EC28AD8(a1 - 16);
}

void sub_20EC28970(uint64_t a1)
{
  sub_20EC28AD8(a1 - 16);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20EC28998(uint64_t a1)
{
  return sub_20EC280C0((_QWORD *)(a1 - 16));
}

uint64_t *sub_20EC289A0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_20EC283A8((_QWORD *)(a1 - 16), a2);
}

uint64_t *sub_20EC289A8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_20EC28688((_QWORD *)(a1 - 16), a2);
}

uint64_t sub_20EC289B0(uint64_t a1)
{
  return a1 - 16;
}

uint64_t sub_20EC289B8(uint64_t a1)
{
  return sub_20EC28AD8(a1 - 24);
}

void sub_20EC289C0(uint64_t a1)
{
  sub_20EC28AD8(a1 - 24);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20EC289E8(uint64_t a1)
{
  return sub_20EC28234((_QWORD *)(a1 - 24));
}

uint64_t sub_20EC289F0(uint64_t a1)
{
  return a1 - 24;
}

uint64_t sub_20EC289F8(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_20EC28A60(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20EC28AC8(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8));
}

uint64_t sub_20EC28AD8(uint64_t a1)
{
  char **v2;
  char *v3;
  char *v4;
  char *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;

  *(_QWORD *)a1 = &off_24C9CCEA0;
  *(_QWORD *)(a1 + 16) = &unk_24C9CCF18;
  *(_QWORD *)(a1 + 24) = &unk_24C9CCF58;
  v2 = *(char ***)(a1 + 144);
  *(_QWORD *)(a1 + 144) = 0;
  if (v2)
  {
    std::mutex::~mutex((std::mutex *)(v2 + 7));
    if (*((_BYTE *)v2 + 48))
    {
      v3 = *v2;
      if (*v2)
      {
        v4 = v2[1];
        v5 = *v2;
        if (v4 != v3)
        {
          do
          {
            v6 = (std::__shared_weak_count *)*((_QWORD *)v4 - 1);
            if (v6)
            {
              p_shared_owners = (unint64_t *)&v6->__shared_owners_;
              do
                v8 = __ldaxr(p_shared_owners);
              while (__stlxr(v8 - 1, p_shared_owners));
              if (!v8)
              {
                ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
                std::__shared_weak_count::__release_weak(v6);
              }
            }
            v4 -= 16;
          }
          while (v4 != v3);
          v5 = *v2;
        }
        v2[1] = v3;
        operator delete(v5);
      }
    }
    MEMORY[0x212BC6398](v2, 0x1022C400958DFA3);
  }
  if (*(_QWORD *)(a1 + 136))
  {
    v10 = *(_QWORD *)(a1 + 120);
    v9 = *(uint64_t **)(a1 + 128);
    v11 = *v9;
    *(_QWORD *)(v11 + 8) = *(_QWORD *)(v10 + 8);
    **(_QWORD **)(v10 + 8) = v11;
    *(_QWORD *)(a1 + 136) = 0;
    if (v9 != (uint64_t *)(a1 + 120))
    {
      do
      {
        v12 = (uint64_t *)v9[1];
        operator delete(v9);
        v9 = v12;
      }
      while (v12 != (uint64_t *)(a1 + 120));
    }
  }
  if (*(_QWORD *)(a1 + 112))
  {
    v14 = *(_QWORD *)(a1 + 96);
    v13 = *(uint64_t **)(a1 + 104);
    v15 = *v13;
    *(_QWORD *)(v15 + 8) = *(_QWORD *)(v14 + 8);
    **(_QWORD **)(v14 + 8) = v15;
    *(_QWORD *)(a1 + 112) = 0;
    if (v13 != (uint64_t *)(a1 + 96))
    {
      do
      {
        v16 = (uint64_t *)v13[1];
        operator delete(v13);
        v13 = v16;
      }
      while (v16 != (uint64_t *)(a1 + 96));
    }
  }
  v17 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 88) = 0;
  if (v17)
    (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  v18 = *(std::__shared_weak_count **)(a1 + 80);
  if (!v18)
    goto LABEL_27;
  v19 = (unint64_t *)&v18->__shared_owners_;
  do
    v20 = __ldaxr(v19);
  while (__stlxr(v20 - 1, v19));
  if (v20)
  {
LABEL_27:
    if ((*(char *)(a1 + 71) & 0x80000000) == 0)
      goto LABEL_29;
    goto LABEL_28;
  }
  ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
  std::__shared_weak_count::__release_weak(v18);
  if (*(char *)(a1 + 71) < 0)
LABEL_28:
    operator delete(*(void **)(a1 + 48));
LABEL_29:
  v21 = *(std::__shared_weak_count **)(a1 + 40);
  if (v21)
    std::__shared_weak_count::__release_weak(v21);
  return a1;
}

void sub_20EC28CC4(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9CD010;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_20EC28CD4(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9CD010;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC6398);
}

void sub_20EC28D04(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 32);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

_QWORD *sub_20EC28D60(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  *a1 = &off_24C9CD060;
  v2 = (std::__shared_weak_count *)a1[4];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = (std::__shared_weak_count *)a1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  return a1;
}

void sub_20EC28DA4(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  *a1 = &off_24C9CD060;
  v2 = (std::__shared_weak_count *)a1[4];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = (std::__shared_weak_count *)a1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20EC28DF8(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;

  result = operator new(0x30uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = &off_24C9CD060;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = a1[4];
  result[3] = a1[3];
  result[4] = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 16);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  return result;
}

_QWORD *sub_20EC28E68(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;

  v3 = result[1];
  v2 = result[2];
  *a2 = &off_24C9CD060;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  v6 = result[4];
  a2[3] = result[3];
  a2[4] = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 16);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  return result;
}

void sub_20EC28EB8(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  v2 = *(std::__shared_weak_count **)(a1 + 32);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
}

void sub_20EC28EF4(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  v2 = (std::__shared_weak_count *)__p[4];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = (std::__shared_weak_count *)__p[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  operator delete(__p);
}

void sub_20EC28F2C(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  _BYTE v20[8];
  char v21;

  v2 = (std::__shared_weak_count *)a1[4];
  if (!v2)
  {
    v3 = 0;
    v5 = 0;
    v4 = (std::__shared_weak_count *)a1[2];
    if (v4)
      goto LABEL_6;
    goto LABEL_11;
  }
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
  {
    v5 = 0;
    v4 = (std::__shared_weak_count *)a1[2];
    if (v4)
      goto LABEL_6;
LABEL_11:
    v7 = 0;
    v8 = 0;
    goto LABEL_12;
  }
  v4 = (std::__shared_weak_count *)a1[2];
  v5 = a1[3];
  if (!v4)
    goto LABEL_11;
LABEL_6:
  v6 = std::__shared_weak_count::lock(v4);
  v7 = v6;
  if (v6)
  {
    v8 = a1[1];
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
LABEL_12:
    if (!v3)
      goto LABEL_15;
    goto LABEL_13;
  }
  v8 = 0;
  if (!v3)
    goto LABEL_15;
LABEL_13:
  v11 = (unint64_t *)&v3->__shared_owners_;
  do
    v12 = __ldxr(v11);
  while (__stxr(v12 + 1, v11));
LABEL_15:
  if (v8)
  {
    if (v5)
    {
      v20[0] = 0;
      v21 = 0;
      sub_20E9B7548((uint64_t *)(v8 + 88), v5, (uint64_t)v20);
      if (v21)
        MEMORY[0x212BC623C](v20);
    }
  }
  if (v3)
  {
    v13 = (unint64_t *)&v3->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  if (v7)
  {
    v15 = (unint64_t *)&v7->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
    do
      v17 = __ldaxr(v15);
    while (__stlxr(v17 - 1, v15));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  if (v3)
  {
    v18 = (unint64_t *)&v3->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_20EC290F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;

  if (a10)
    MEMORY[0x212BC623C](&a9);
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  if (v11)
  {
    v15 = (unint64_t *)&v11->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
    do
      v17 = __ldaxr(v15);
    while (__stlxr(v17 - 1, v15));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (v10)
  {
    v18 = (unint64_t *)&v10->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20EC291D8(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__110shared_ptrIKNS_3vio15odometry_engine11VIOMetada"
                     "taEEEvvvLb0EE25EnqueueMessageAndDispatchIZNKSB_4SendERKSA_EUlT_T0_E_EEvSE_SF_EUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__110shared_ptrIKNS_3vio15odometry_engine"
                                "11VIOMetadataEEEvvvLb0EE25EnqueueMessageAndDispatchIZNKSB_4SendERKSA_EUlT_T0_E_EEvSE_SF_EUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__110shared_ptrIKNS_3vio15odometry_engine11VIOMetadataEEEvvvLb0EE25EnqueueMessageAndDispatchIZNKSB_4SendERKSA_EUlT_T0_E_EEvSE_SF_EUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__110shared_ptrIKNS_3vio15odometry_engine11VIOMetadataEEEvvvLb0EE25EnqueueMessageAndDispatchIZNKSB_4SendERKSA_EUlT_T0_E_EEvSE_SF_EUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20EC29244()
{
  return &unk_24C9CD0C0;
}

_QWORD *sub_20EC29250(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;

  *a1 = &off_24C9CD0E0;
  v2 = (std::__shared_weak_count *)a1[4];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      v5 = (std::__shared_weak_count *)a1[2];
      if (!v5)
        return a1;
      goto LABEL_6;
    }
  }
  v5 = (std::__shared_weak_count *)a1[2];
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
  return a1;
}

void sub_20EC292CC(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;

  *a1 = &off_24C9CD0E0;
  v2 = (std::__shared_weak_count *)a1[4];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)a1[2];
    if (!v5)
      goto LABEL_9;
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[2];
    if (!v5)
      goto LABEL_9;
  }
  std::__shared_weak_count::__release_weak(v5);
LABEL_9:
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20EC29358(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;

  result = operator new(0x28uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = &off_24C9CD0E0;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = a1[4];
  result[3] = a1[3];
  result[4] = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  return result;
}

_QWORD *sub_20EC293C8(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;

  v3 = result[1];
  v2 = result[2];
  *a2 = &off_24C9CD0E0;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  v6 = result[4];
  a2[3] = result[3];
  a2[4] = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  return result;
}

void sub_20EC29418(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;

  v2 = *(std::__shared_weak_count **)(a1 + 32);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    v5 = *(std::__shared_weak_count **)(a1 + 16);
    if (!v5)
      return;
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  v5 = *(std::__shared_weak_count **)(a1 + 16);
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
}

void sub_20EC29488(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;

  v2 = (std::__shared_weak_count *)__p[4];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      v5 = (std::__shared_weak_count *)__p[2];
      if (!v5)
        goto LABEL_7;
      goto LABEL_6;
    }
  }
  v5 = (std::__shared_weak_count *)__p[2];
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
LABEL_7:
  operator delete(__p);
}

void sub_20EC294F8(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  _BYTE v8[8];
  char v9;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 8);
      if (v5)
      {
        v8[0] = 0;
        v9 = 0;
        sub_20E9B7548((uint64_t *)(v5 + 88), a1 + 24, (uint64_t)v8);
        if (v9)
          MEMORY[0x212BC623C](v8);
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_20EC295A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v13;

  if (a10)
    MEMORY[0x212BC623C](&a9);
  p_shared_owners = (unint64_t *)&v10->__shared_owners_;
  do
    v13 = __ldaxr(p_shared_owners);
  while (__stlxr(v13 - 1, p_shared_owners));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20EC295EC(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__110shared_ptrIKNS_3vio15odometry_engine11VIOMetada"
                     "taEEEvvvLb0EE4SendERKSA_EUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__110shared_ptrIKNS_3vio15odometry_engine"
                                "11VIOMetadataEEEvvvLb0EE4SendERKSA_EUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__110shared_ptrIKNS_3vio15odometry_engine11VIOMetadataEEEvvvLb0EE4SendERKSA_EUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__110shared_ptrIKNS_3vio15odometry_engine11VIOMetadataEEEvvvLb0EE4SendERKSA_EUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20EC29658()
{
  return &unk_24C9CD140;
}

_QWORD *sub_20EC29664(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;

  *a1 = &off_24C9CD160;
  v2 = (std::__shared_weak_count *)a1[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
      goto LABEL_7;
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  v5 = (std::__shared_weak_count *)a1[4];
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
LABEL_7:
  v6 = (std::__shared_weak_count *)a1[2];
  if (v6)
    std::__shared_weak_count::__release_weak(v6);
  return a1;
}

void sub_20EC296EC(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;

  *a1 = &off_24C9CD160;
  v2 = (std::__shared_weak_count *)a1[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
    {
LABEL_7:
      v6 = (std::__shared_weak_count *)a1[2];
      if (v6)
        std::__shared_weak_count::__release_weak(v6);
      JUMPOUT(0x212BC6398);
    }
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
      goto LABEL_7;
  }
  std::__shared_weak_count::__release_weak(v5);
  goto LABEL_7;
}

_QWORD *sub_20EC29784(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;

  result = operator new(0x38uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = &off_24C9CD160;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = a1[4];
  result[3] = a1[3];
  result[4] = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 16);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  v10 = a1[6];
  result[5] = a1[5];
  result[6] = v10;
  if (v10)
  {
    v11 = (unint64_t *)(v10 + 8);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  return result;
}

_QWORD *sub_20EC29814(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;

  v3 = result[1];
  v2 = result[2];
  *a2 = &off_24C9CD160;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  v6 = result[4];
  a2[3] = result[3];
  a2[4] = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 16);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  v9 = result[6];
  a2[5] = result[5];
  a2[6] = v9;
  if (v9)
  {
    v10 = (unint64_t *)(v9 + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  return result;
}

void sub_20EC29884(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;

  v2 = (std::__shared_weak_count *)a1[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
      goto LABEL_7;
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  v5 = (std::__shared_weak_count *)a1[4];
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
LABEL_7:
  v6 = (std::__shared_weak_count *)a1[2];
  if (v6)
    std::__shared_weak_count::__release_weak(v6);
}

void sub_20EC29904(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;

  v2 = (std::__shared_weak_count *)__p[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)__p[4];
    if (!v5)
      goto LABEL_7;
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  v5 = (std::__shared_weak_count *)__p[4];
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
LABEL_7:
  v6 = (std::__shared_weak_count *)__p[2];
  if (v6)
    std::__shared_weak_count::__release_weak(v6);
  operator delete(__p);
}

void sub_20EC29980(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t *v13;
  std::runtime_error_vtbl **v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  std::runtime_error *exception;
  std::runtime_error *v23;
  std::runtime_error *v24;
  std::runtime_error *v25;
  std::runtime_error v26;
  std::runtime_error v27;

  v2 = (std::__shared_weak_count *)a1[4];
  if (!v2)
  {
    v3 = 0;
    v5 = 0;
    v4 = (std::__shared_weak_count *)a1[2];
    if (v4)
      goto LABEL_6;
LABEL_11:
    v7 = 0;
    v8 = 0;
    goto LABEL_12;
  }
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
  {
    v5 = 0;
    v4 = (std::__shared_weak_count *)a1[2];
    if (v4)
      goto LABEL_6;
    goto LABEL_11;
  }
  v4 = (std::__shared_weak_count *)a1[2];
  v5 = a1[3];
  if (!v4)
    goto LABEL_11;
LABEL_6:
  v6 = std::__shared_weak_count::lock(v4);
  v7 = v6;
  if (!v6)
  {
    v8 = 0;
    if (!v3)
      goto LABEL_15;
    goto LABEL_13;
  }
  v8 = a1[1];
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  do
    v10 = __ldxr(p_shared_owners);
  while (__stxr(v10 + 1, p_shared_owners));
LABEL_12:
  if (!v3)
    goto LABEL_15;
LABEL_13:
  v11 = (unint64_t *)&v3->__shared_owners_;
  do
    v12 = __ldxr(v11);
  while (__stxr(v12 + 1, v11));
LABEL_15:
  if (!v8)
  {
    std::runtime_error::runtime_error(&v27, "Processor is no longer available.");
    v27.__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v23 = std::runtime_error::runtime_error(exception, &v27);
    v23->__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    __cxa_throw(v23, (struct type_info *)&unk_24CA1E2D0, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  if (!v5)
  {
    std::runtime_error::runtime_error(&v26, "Message was dropped.");
    v26.__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    v24 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v25 = std::runtime_error::runtime_error(v24, &v26);
    v25->__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    __cxa_throw(v25, (struct type_info *)&unk_24CA1E2D0, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  v13 = (uint64_t *)(v8 + 88);
  v14 = (std::runtime_error_vtbl **)a1[5];
  v26.__vftable = *v14;
  *v14 = 0;
  LOBYTE(v26.__imp_.__imp_) = 1;
  sub_20E9B7548(v13, v5, (uint64_t)&v26);
  if (LOBYTE(v26.__imp_.__imp_))
    MEMORY[0x212BC623C](&v26);
  if (v3)
  {
    v15 = (unint64_t *)&v3->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  if (v7)
  {
    v17 = (unint64_t *)&v7->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
    do
      v19 = __ldaxr(v17);
    while (__stlxr(v19 - 1, v17));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  if (v3)
  {
    v20 = (unint64_t *)&v3->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_20EC29C34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::runtime_error a11, std::exception_ptr a12, std::runtime_error a13, std::exception_ptr a14)
{
  std::__shared_weak_count *v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;

  std::exception_ptr::~exception_ptr(&a14);
  std::runtime_error::~runtime_error(&a13);
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v18 = __ldaxr(p_shared_owners);
    while (__stlxr(v18 - 1, p_shared_owners));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  if (v15)
  {
    v19 = (unint64_t *)&v15->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
    do
      v21 = __ldaxr(v19);
    while (__stlxr(v21 - 1, v19));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  if (v14)
  {
    v22 = (unint64_t *)&v14->__shared_owners_;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  _Unwind_Resume(a1);
}

uint64_t sub_20EC29D8C(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__110shared_ptrIKNS_3vio15odometry_engine11VIOMetada"
                     "taEEEvvvLb0EE25EnqueueMessageAndDispatchIZNKSB_7ProcessERKSA_NS4_7promiseIvEEEUlT_T0_E_EEvSE_SH_EUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__110shared_ptrIKNS_3vio15odometry_engine"
                                "11VIOMetadataEEEvvvLb0EE25EnqueueMessageAndDispatchIZNKSB_7ProcessERKSA_NS4_7promiseIvEE"
                                "EUlT_T0_E_EEvSE_SH_EUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__110shared_ptrIKNS_3vio15odometry_engine11VIOMetadataEEEvvvLb0EE25EnqueueMessageAndDispatchIZNKSB_7ProcessERKSA_NS4_7promiseIvEEEUlT_T0_E_EEvSE_SH_EUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__110shared_ptrIKNS_3vio15odometry_engine11VIOMetadataEEEvvvLb0EE25EnqueueMessageAndDispatchIZNKSB_7ProcessERKSA_NS4_7promiseIvEEEUlT_T0_E_EEvSE_SH_EUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20EC29DF8()
{
  return &unk_24C9CD1C0;
}

_QWORD *sub_20EC29E04(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;

  *a1 = &off_24C9CD1E0;
  v2 = (std::__shared_weak_count *)a1[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
      goto LABEL_11;
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
      goto LABEL_11;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_11:
  v8 = (std::__shared_weak_count *)a1[2];
  if (v8)
    std::__shared_weak_count::__release_weak(v8);
  return a1;
}

void sub_20EC29EB8(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;

  *a1 = &off_24C9CD1E0;
  v2 = (std::__shared_weak_count *)a1[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
      goto LABEL_11;
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
      goto LABEL_11;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_11:
  v8 = (std::__shared_weak_count *)a1[2];
  if (v8)
    std::__shared_weak_count::__release_weak(v8);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20EC29F7C(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;

  result = operator new(0x38uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = &off_24C9CD1E0;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = a1[4];
  result[3] = a1[3];
  result[4] = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  v10 = a1[6];
  result[5] = a1[5];
  result[6] = v10;
  if (v10)
  {
    v11 = (unint64_t *)(v10 + 8);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  return result;
}

_QWORD *sub_20EC2A00C(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;

  v3 = result[1];
  v2 = result[2];
  *a2 = &off_24C9CD1E0;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  v6 = result[4];
  a2[3] = result[3];
  a2[4] = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  v9 = result[6];
  a2[5] = result[5];
  a2[6] = v9;
  if (v9)
  {
    v10 = (unint64_t *)(v9 + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  return result;
}

void sub_20EC2A07C(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;

  v2 = (std::__shared_weak_count *)a1[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
      goto LABEL_11;
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
      goto LABEL_11;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_11:
  v8 = (std::__shared_weak_count *)a1[2];
  if (v8)
    std::__shared_weak_count::__release_weak(v8);
}

void sub_20EC2A128(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;

  v2 = (std::__shared_weak_count *)__p[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)__p[4];
    if (!v5)
      goto LABEL_11;
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)__p[4];
    if (!v5)
      goto LABEL_11;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_11:
  v8 = (std::__shared_weak_count *)__p[2];
  if (v8)
    std::__shared_weak_count::__release_weak(v8);
  operator delete(__p);
}

void sub_20EC2A1D0(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  uint64_t v4;
  std::runtime_error_vtbl **v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::runtime_error *exception;
  std::runtime_error *v9;
  std::runtime_error v10;

  v2 = (std::__shared_weak_count *)a1[2];
  if (!v2 || (v3 = std::__shared_weak_count::lock(v2)) == 0 || (v4 = a1[1]) == 0)
  {
    std::runtime_error::runtime_error(&v10, "Invalid operation. Processor is released.");
    v10.__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v9 = std::runtime_error::runtime_error(exception, &v10);
    v9->__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    __cxa_throw(v9, (struct type_info *)&unk_24CA1E2D0, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  v5 = (std::runtime_error_vtbl **)a1[5];
  v10.__vftable = *v5;
  *v5 = 0;
  LOBYTE(v10.__imp_.__imp_) = 1;
  sub_20E9B7548((uint64_t *)(v4 + 88), (uint64_t)(a1 + 3), (uint64_t)&v10);
  if (LOBYTE(v10.__imp_.__imp_))
    MEMORY[0x212BC623C](&v10);
  p_shared_owners = (unint64_t *)&v3->__shared_owners_;
  do
    v7 = __ldaxr(p_shared_owners);
  while (__stlxr(v7 - 1, p_shared_owners));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
}

void sub_20EC2A2E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10, std::runtime_error a11)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (LOBYTE(a11.__imp_.__imp_))
    MEMORY[0x212BC623C](&a11);
  p_shared_owners = (unint64_t *)&v11->__shared_owners_;
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20EC2A38C(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__110shared_ptrIKNS_3vio15odometry_engine11VIOMetada"
                     "taEEEvvvLb0EE7ProcessERKSA_NS4_7promiseIvEEEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__110shared_ptrIKNS_3vio15odometry_engine"
                                "11VIOMetadataEEEvvvLb0EE7ProcessERKSA_NS4_7promiseIvEEEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__110shared_ptrIKNS_3vio15odometry_engine11VIOMetadataEEEvvvLb0EE7ProcessERKSA_NS4_7promiseIvEEEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__110shared_ptrIKNS_3vio15odometry_engine11VIOMetadataEEEvvvLb0EE7ProcessERKSA_NS4_7promiseIvEEEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20EC2A3F8()
{
  return &unk_24C9CD240;
}

_QWORD *sub_20EC2A404(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_24C9CD260;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_20EC2A43C(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_24C9CD260;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20EC2A484(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x20uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *result = &off_24C9CD260;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  return result;
}

uint64_t sub_20EC2A4D4(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = *(_QWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 16);
  *a2 = &off_24C9CD260;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

void sub_20EC2A504(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void sub_20EC2A514(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void sub_20EC2A540(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 8);
      if (v5)
      {
        v6 = operator new(0x18uLL);
        v8 = *(_QWORD *)(v5 + 96);
        v7 = (_QWORD *)(v5 + 96);
        *v6 = v8;
        v6[1] = v7;
        *(_QWORD *)(v8 + 8) = v6;
        *v7 = v6;
        ++v7[2];
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v10 = __ldaxr(p_shared_owners);
      while (__stlxr(v10 - 1, p_shared_owners));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_20EC2A5D4(_Unwind_Exception *exception_object)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v4;

  p_shared_owners = (unint64_t *)&v1->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20EC2A610(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3kit11concurrency6detail9ProcessorINSt3__110shared_ptrIKNS_3vio15odometry_engine11VIOMetadat"
                     "aEEEvvvLb0EE9SubscribeENS1_12ChannelInputIvEEEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4cv3d3kit11concurrency6detail9ProcessorINSt3__110shared_ptrIKNS_3vio15odometry_engine1"
                                "1VIOMetadataEEEvvvLb0EE9SubscribeENS1_12ChannelInputIvEEEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3kit11concurrency6detail9ProcessorINSt3__110shared_ptrIKNS_3vio15odometry_engine11VIOMetadataEEEvvvLb0EE9SubscribeENS1_12ChannelInputIvEEEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3kit11concurrency6detail9ProcessorINSt3__110shared_ptrIKNS_3vio15odometry_engine11VIOMetadataEEEvvvLb0EE9SubscribeENS1_12ChannelInputIvEEEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20EC2A67C()
{
  return &unk_24C9CD2C0;
}

_QWORD *sub_20EC2A688(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_24C9CD2E0;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_20EC2A6C0(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_24C9CD2E0;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20EC2A708(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x20uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *result = &off_24C9CD2E0;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  return result;
}

uint64_t sub_20EC2A758(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = *(_QWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 16);
  *a2 = &off_24C9CD2E0;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

void sub_20EC2A788(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void sub_20EC2A798(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void sub_20EC2A7C4(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 8);
      if (v5)
      {
        v6 = operator new(0x18uLL);
        v8 = *(_QWORD *)(v5 + 120);
        v7 = (_QWORD *)(v5 + 120);
        *v6 = v8;
        v6[1] = v7;
        *(_QWORD *)(v8 + 8) = v6;
        *v7 = v6;
        ++v7[2];
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v10 = __ldaxr(p_shared_owners);
      while (__stlxr(v10 - 1, p_shared_owners));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_20EC2A858(_Unwind_Exception *exception_object)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v4;

  p_shared_owners = (unint64_t *)&v1->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20EC2A894(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3kit11concurrency6detail9ProcessorINSt3__110shared_ptrIKNS_3vio15odometry_engine11VIOMetadat"
                     "aEEEvvvLb0EE15AddErrorHandlerENS1_12ChannelInputIvEEEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4cv3d3kit11concurrency6detail9ProcessorINSt3__110shared_ptrIKNS_3vio15odometry_engine1"
                                "1VIOMetadataEEEvvvLb0EE15AddErrorHandlerENS1_12ChannelInputIvEEEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3kit11concurrency6detail9ProcessorINSt3__110shared_ptrIKNS_3vio15odometry_engine11VIOMetadataEEEvvvLb0EE15AddErrorHandlerENS1_12ChannelInputIvEEEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3kit11concurrency6detail9ProcessorINSt3__110shared_ptrIKNS_3vio15odometry_engine11VIOMetadataEEEvvvLb0EE15AddErrorHandlerENS1_12ChannelInputIvEEEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20EC2A900()
{
  return &unk_24C9CD340;
}

_QWORD *sub_20EC2A90C(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_24C9CD360;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_20EC2A944(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_24C9CD360;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20EC2A98C(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x20uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = &off_24C9CD360;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  result[3] = a1[3];
  return result;
}

_QWORD *sub_20EC2A9E4(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = result[1];
  v2 = result[2];
  *a2 = &off_24C9CD360;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  a2[3] = result[3];
  return result;
}

void sub_20EC2AA1C(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void sub_20EC2AA2C(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void sub_20EC2AA58(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  void *__p;
  void *v9;
  uint64_t v10;

  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      if (a1[1])
      {
        v5 = (uint64_t *)a1[3];
        __p = 0;
        v9 = 0;
        v10 = 0;
        if (!*v5)
          sub_20E96CE78(3u);
        sub_20EA04C5C(*v5, (uint64_t)&__p);
        if (__p)
        {
          v9 = __p;
          operator delete(__p);
        }
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_20EC2AB10(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (__p)
    operator delete(__p);
  p_shared_owners = (unint64_t *)&v11->__shared_owners_;
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20EC2AB5C(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__110shared_ptrIKNS_3vio15odometry_engine11VIOMetada"
                     "taEEEvvvLb0EE16OutputHandlerIDsEvEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__110shared_ptrIKNS_3vio15odometry_engine"
                                "11VIOMetadataEEEvvvLb0EE16OutputHandlerIDsEvEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__110shared_ptrIKNS_3vio15odometry_engine11VIOMetadataEEEvvvLb0EE16OutputHandlerIDsEvEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__110shared_ptrIKNS_3vio15odometry_engine11VIOMetadataEEEvvvLb0EE16OutputHandlerIDsEvEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20EC2ABC8()
{
  return &unk_24C9CD3C0;
}

_QWORD *sub_20EC2ABD4(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_24C9CD3E0;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_20EC2AC0C(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_24C9CD3E0;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20EC2AC54(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x20uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = &off_24C9CD3E0;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  result[3] = a1[3];
  return result;
}

_QWORD *sub_20EC2ACAC(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = result[1];
  v2 = result[2];
  *a2 = &off_24C9CD3E0;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  a2[3] = result[3];
  return result;
}

void sub_20EC2ACE4(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void sub_20EC2ACF4(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void sub_20EC2AD20(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  void *__p;
  void *v9;
  uint64_t v10;

  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      if (a1[1])
      {
        v5 = (uint64_t *)a1[3];
        __p = 0;
        v9 = 0;
        v10 = 0;
        if (!*v5)
          sub_20E96CE78(3u);
        sub_20EA04C5C(*v5, (uint64_t)&__p);
        if (__p)
        {
          v9 = __p;
          operator delete(__p);
        }
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_20EC2ADD8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (__p)
    operator delete(__p);
  p_shared_owners = (unint64_t *)&v11->__shared_owners_;
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20EC2AE24(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__110shared_ptrIKNS_3vio15odometry_engine11VIOMetada"
                     "taEEEvvvLb0EE15ErrorHandlerIDsEvEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__110shared_ptrIKNS_3vio15odometry_engine"
                                "11VIOMetadataEEEvvvLb0EE15ErrorHandlerIDsEvEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__110shared_ptrIKNS_3vio15odometry_engine11VIOMetadataEEEvvvLb0EE15ErrorHandlerIDsEvEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__110shared_ptrIKNS_3vio15odometry_engine11VIOMetadataEEEvvvLb0EE15ErrorHandlerIDsEvEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20EC2AE90()
{
  return &unk_24C9CD440;
}

void sub_20EC2AEA0(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20EC2AEC4(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t sub_20EC2AEDC(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail9ProcessorINS0_IKNS1_3vio15odometry_engine11VIOMe"
                     "tadataEEEvvvLb0EEEE27__shared_ptr_default_deleteISB_SB_EE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail9ProcessorINS0_IKNS1_3vio15odometry_en"
                                "gine11VIOMetadataEEEvvvLb0EEEE27__shared_ptr_default_deleteISB_SB_EE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail9ProcessorINS0_IKNS1_3vio15odometry_engine11VIOMetadataEEEvvvLb0EEEE27__shared_ptr_default_deleteISB_SB_EE"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail9ProcessorINS0_IKNS1_3vio15odometry_engine11VIOMetadataEEEvvvLb0EEEE27__shared_ptr_default_deleteISB_SB_EE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

void sub_20EC2AF50(uint64_t a1)
{
  sub_20EC2C8C0(a1);
  JUMPOUT(0x212BC6398);
}

void sub_20EC2AF74(_QWORD *a1, std::__shared_weak_count_vtbl **a2)
{
  uint64_t *v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  uint64_t v8;
  _QWORD *v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t *p_shared_weak_owners;
  unint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  unint64_t v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  std::mutex **v28;
  uint64_t **v29;
  std::__shared_weak_count *v30;
  std::__shared_weak_count *v31;
  std::__shared_weak_count *v32;
  uint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  unint64_t *v36;
  unint64_t v37;
  uint64_t **v38;
  std::__shared_weak_count *v39;
  std::__shared_weak_count *v40;
  std::__shared_weak_count *v41;
  uint64_t v42;
  unint64_t *v43;
  unint64_t v44;
  unint64_t *v45;
  unint64_t v46;
  char *v47;
  _QWORD *v48;
  uint64_t v49;
  unint64_t *v50;
  unint64_t v51;
  std::__shared_weak_count_vtbl *v52;
  std::__shared_weak_count_vtbl *v53;
  unint64_t *v54;
  unint64_t v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  __int128 *v60;
  uint64_t v61;
  __int128 v62;
  std::__shared_weak_count *v63;
  __int128 v64;
  uint64_t v65;
  __int128 *v66;
  _BYTE v67[24];
  _BYTE *v68;
  uint64_t v69;

  v69 = *MEMORY[0x24BDAC8D0];
  if (!(*(unsigned int (**)(_QWORD *))(*a1 + 48))(a1))
    return;
  if (!a1[9]
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 234, (uint64_t)"scheduler_", 10, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v4 = (uint64_t *)a1[18];
  if (v4)
  {
    v5 = (std::__shared_weak_count *)operator new(0x28uLL);
    v6 = v5;
    v5->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    v5->__shared_weak_owners_ = 0;
    v5->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9CD6B0;
    v8 = (uint64_t)a2[1];
    v5[1].__vftable = *a2;
    v9 = &v5[1].__vftable;
    v5[1].__shared_owners_ = v8;
    if (v8)
    {
      v10 = (unint64_t *)(v8 + 8);
      do
        v11 = __ldxr(v10);
      while (__stxr(v11 + 1, v10));
      v4 = (uint64_t *)a1[18];
    }
    v63 = v5;
    p_shared_weak_owners = (unint64_t *)&v5->__shared_weak_owners_;
    do
      v13 = __ldxr(p_shared_weak_owners);
    while (__stxr(v13 + 1, p_shared_weak_owners));
    v14 = (_QWORD *)operator new();
    *v14 = v4 + 7;
    std::mutex::lock((std::mutex *)(v4 + 7));
    *(_QWORD *)&v64 = v14;
    *((_QWORD *)&v64 + 1) = v4;
    if (!*((_BYTE *)v4 + 48))
      sub_20E866B34();
    v15 = v4[4];
    v16 = *v4;
    v17 = (_QWORD *)(*v4 + 16 * v15);
    do
      v18 = __ldxr(p_shared_owners);
    while (__stxr(v18 + 1, p_shared_owners));
    *v17 = v9;
    v19 = v16 + 16 * v15;
    v20 = *(std::__shared_weak_count **)(v19 + 8);
    *(_QWORD *)(v19 + 8) = v6;
    if (v20)
    {
      v21 = (unint64_t *)&v20->__shared_owners_;
      do
        v22 = __ldaxr(v21);
      while (__stlxr(v22 - 1, v21));
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
        std::__shared_weak_count::__release_weak(v20);
      }
    }
    v23 = (v4[1] - *v4) >> 4;
    v24 = v4[5];
    v25 = v4[4] + 1;
    if (v25 >= v23)
      v26 = (v4[1] - *v4) >> 4;
    else
      v26 = 0;
    v4[4] = v25 - v26;
    if (v24 == v23)
    {
      v27 = v4[3] + 1;
      if (v27 < v23)
        v23 = 0;
      v4[3] = v27 - v23;
      v28 = (std::mutex **)v64;
      if (!(_QWORD)v64)
      {
LABEL_37:
        v38 = (uint64_t **)a1[9];
        v64 = 0uLL;
        v39 = (std::__shared_weak_count *)a1[5];
        if (v39)
        {
          v40 = std::__shared_weak_count::lock(v39);
          if (v40)
          {
            v41 = v40;
            v42 = a1[4];
            v43 = (unint64_t *)&v40->__shared_weak_owners_;
            do
              v44 = __ldxr(v43);
            while (__stxr(v44 + 1, v43));
            *(_QWORD *)&v64 = v42;
            *((_QWORD *)&v64 + 1) = v40;
            v45 = (unint64_t *)&v40->__shared_owners_;
            do
              v46 = __ldaxr(v45);
            while (__stlxr(v46 - 1, v45));
            if (!v46)
            {
              ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
              std::__shared_weak_count::__release_weak(v41);
            }
          }
          else
          {
            v64 = 0uLL;
          }
        }
        v47 = (char *)operator new(0x30uLL);
        *(_QWORD *)v47 = &off_24C9CD700;
        *(_OWORD *)(v47 + 8) = v64;
        v64 = 0uLL;
        *((_QWORD *)v47 + 3) = v9;
        *((_QWORD *)v47 + 4) = v6;
        v65 = 0;
        v66 = 0;
        v68 = v47;
        sub_210216F3C(*v38, (uint64_t)v67);
        v48 = v68;
        if (v68 == v67)
        {
          v49 = 4;
          v48 = v67;
        }
        else
        {
          if (!v68)
            goto LABEL_51;
          v49 = 5;
        }
        (*(void (**)(void))(*v48 + 8 * v49))();
LABEL_51:
        if (v63)
        {
          v50 = (unint64_t *)&v63->__shared_owners_;
          do
            v51 = __ldaxr(v50);
          while (__stlxr(v51 - 1, v50));
          if (!v51)
          {
            ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
            std::__shared_weak_count::__release_weak(v63);
          }
        }
        return;
      }
    }
    else
    {
      v4[5] = v24 + 1;
      v28 = (std::mutex **)v64;
      if (!(_QWORD)v64)
        goto LABEL_37;
    }
    std::mutex::unlock(*v28);
    MEMORY[0x212BC6398](v28, 0x20C4093837F09);
    goto LABEL_37;
  }
  v29 = (uint64_t **)a1[9];
  v62 = 0uLL;
  v30 = (std::__shared_weak_count *)a1[5];
  if (v30)
  {
    v31 = std::__shared_weak_count::lock(v30);
    if (v31)
    {
      v32 = v31;
      v33 = a1[4];
      v34 = (unint64_t *)&v31->__shared_weak_owners_;
      do
        v35 = __ldxr(v34);
      while (__stxr(v35 + 1, v34));
      *(_QWORD *)&v62 = v33;
      *((_QWORD *)&v62 + 1) = v31;
      v36 = (unint64_t *)&v31->__shared_owners_;
      do
        v37 = __ldaxr(v36);
      while (__stlxr(v37 - 1, v36));
      if (!v37)
      {
        ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
        std::__shared_weak_count::__release_weak(v32);
      }
    }
    else
    {
      v62 = 0uLL;
    }
  }
  v52 = *a2;
  v53 = a2[1];
  if (v53)
  {
    v54 = (unint64_t *)&v53->~__shared_weak_count_0;
    do
      v55 = __ldxr(v54);
    while (__stxr(v55 + 1, v54));
  }
  v56 = (char *)operator new(0x28uLL);
  *(_QWORD *)v56 = &off_24C9CD780;
  *(_OWORD *)(v56 + 8) = v62;
  *((_QWORD *)v56 + 3) = v52;
  *((_QWORD *)v56 + 4) = v53;
  v66 = (__int128 *)v56;
  sub_210216F3C(*v29, (uint64_t)&v64);
  v60 = v66;
  if (v66 == &v64)
  {
    v61 = 4;
    v60 = &v64;
  }
  else
  {
    if (!v66)
      return;
    v61 = 5;
  }
  (*(void (**)(__int128 *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v60 + 8 * v61))(v60, v57, v58, v59);
}

void sub_20EC2B3D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, char *a18)
{
  char *v18;
  char *v20;
  uint64_t v21;

  v20 = a18;
  if (a18 == v18)
  {
    v21 = 4;
    v20 = &a15;
  }
  else
  {
    if (!a18)
    {
      sub_20EBB635C((uint64_t)&a9);
      _Unwind_Resume(a1);
    }
    v21 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v20 + 8 * v21))();
  sub_20EBB635C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20EC2B428(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,char *a23)
{
  char *v23;
  char *v25;
  uint64_t v26;

  v25 = a23;
  if (a23 == v23)
  {
    v26 = 4;
    v25 = &a20;
  }
  else
  {
    if (!a23)
      goto LABEL_6;
    v26 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v25 + 8 * v26))();
LABEL_6:
  sub_20EA02254((uint64_t)&a15);
  sub_20E86665C((uint64_t)&a13);
  _Unwind_Resume(a1);
}

void sub_20EC2B478(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  std::__shared_weak_count *v5;
  uint64_t v7;
  va_list va;
  uint64_t v9;
  va_list va1;

  va_start(va1, a5);
  va_start(va, a5);
  v7 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  sub_20EA0228C((std::mutex ***)va1);
  std::__shared_weak_count::__release_weak(v5);
  sub_20E86665C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20EC2B49C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  std::__shared_weak_count *v5;
  uint64_t v6;
  va_list va;

  va_start(va, a5);
  MEMORY[0x212BC6398](v6, 0x20C4093837F09);
  std::__shared_weak_count::__release_weak(v5);
  sub_20E86665C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20EC2B4D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  std::__shared_weak_count *v13;

  std::__shared_weak_count::__release_weak(v13);
  sub_20E86665C((uint64_t)&a13);
  _Unwind_Resume(a1);
}

uint64_t sub_20EC2B4F0(uint64_t result)
{
  atomic_store(1u, (unsigned __int8 *)(result + 8));
  return result;
}

uint64_t sub_20EC2B500(uint64_t result)
{
  atomic_store(0, (unsigned __int8 *)(result + 8));
  return result;
}

uint64_t sub_20EC2B50C(uint64_t a1)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)(a1 + 8));
  return v1 & 1;
}

void sub_20EC2B51C(_QWORD *a1, std::__shared_weak_count_vtbl **a2, std::__shared_weak_count_vtbl **a3)
{
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t *p_shared_weak_owners;
  unint64_t v17;
  uint64_t *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  std::__shared_weak_count **v22;
  unint64_t v23;
  uint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  std::mutex **v33;
  uint64_t **v34;
  std::__shared_weak_count *v35;
  std::__shared_weak_count *v36;
  std::__shared_weak_count *v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  unint64_t *v41;
  unint64_t v42;
  uint64_t **v43;
  std::__shared_weak_count *v44;
  std::__shared_weak_count *v45;
  std::__shared_weak_count *v46;
  uint64_t v47;
  unint64_t *v48;
  unint64_t v49;
  unint64_t *v50;
  unint64_t v51;
  char *v52;
  std::string *v53;
  uint64_t v54;
  uint64_t *v55;
  unint64_t v56;
  unint64_t *v57;
  unint64_t v58;
  std::__shared_weak_count_vtbl *v59;
  std::__shared_weak_count_vtbl *v60;
  unint64_t *v61;
  unint64_t v62;
  _QWORD *v63;
  char *v64;
  __int128 *v65;
  uint64_t v66;
  _QWORD *v67;
  _QWORD *v68;
  _QWORD *v69;
  __int128 *v70;
  std::string *v71;
  std::runtime_error *exception;
  std::runtime_error *v73;
  std::__shared_weak_count *v74[2];
  _QWORD *v75;
  std::__shared_weak_count *v76;
  std::__shared_weak_count *v77;
  std::runtime_error v78;
  std::__shared_weak_count *v79;
  std::__shared_weak_count *v80;
  __int128 v81;
  _QWORD *v82;
  __int128 *v83;
  _QWORD v84[3];
  std::string v85;
  std::string *v86;
  uint64_t v87;

  v87 = *MEMORY[0x24BDAC8D0];
  if (((*(uint64_t (**)(_QWORD *))(*a1 + 48))(a1) & 1) == 0)
  {
    *(_QWORD *)&v81 = "Invalid operation. Interface is disabled for ";
    *((_QWORD *)&v81 + 1) = 45;
    v69 = (_QWORD *)a1[6];
    v68 = a1 + 6;
    v67 = v69;
    v70 = (__int128 *)*((unsigned __int8 *)v68 + 23);
    if ((char)v70 < 0)
      v70 = (__int128 *)v68[1];
    else
      v67 = v68;
    v82 = v67;
    v83 = v70;
    sub_20E8778D4((uint64_t)&v81, (uint64_t)v84, 0, 0, &v85);
    if ((v85.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v71 = &v85;
    else
      v71 = (std::string *)v85.__r_.__value_.__r.__words[0];
    std::runtime_error::runtime_error(&v78, (const char *)v71);
    v78.__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v73 = std::runtime_error::runtime_error(exception, &v78);
    v73->__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    __cxa_throw(v73, (struct type_info *)&unk_24CA1E2D0, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  if (!a1[9]
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 294, (uint64_t)"scheduler_", 10, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  if (a1[18])
  {
    v6 = (std::__shared_weak_count *)operator new(0x20uLL);
    v6->__shared_weak_owners_ = 0;
    v6->__vftable = (std::__shared_weak_count_vtbl *)&unk_24C9CD800;
    v6[1].__vftable = *a3;
    v77 = v6;
    v75 = &v6[1].__vftable;
    v76 = v6;
    v6->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    *a3 = 0;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    if (!a1[18]
      && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 414, (uint64_t)"limiting_buffer_", 16, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v9 = (std::__shared_weak_count *)operator new(0x28uLL);
    v10 = v9;
    v9->__shared_owners_ = 0;
    v11 = (unint64_t *)&v9->__shared_owners_;
    v9->__shared_weak_owners_ = 0;
    v9->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9CD6B0;
    v12 = (uint64_t)a2[1];
    v9[1].__vftable = *a2;
    v13 = v9 + 1;
    v9[1].__shared_owners_ = v12;
    if (v12)
    {
      v14 = (unint64_t *)(v12 + 8);
      do
        v15 = __ldxr(v14);
      while (__stxr(v15 + 1, v14));
    }
    v79 = v9 + 1;
    v80 = v9;
    p_shared_weak_owners = (unint64_t *)&v9->__shared_weak_owners_;
    do
      v17 = __ldxr(p_shared_weak_owners);
    while (__stxr(v17 + 1, p_shared_weak_owners));
    v18 = (uint64_t *)a1[18];
    v19 = (_QWORD *)operator new();
    *v19 = v18 + 7;
    std::mutex::lock((std::mutex *)(v18 + 7));
    *(_QWORD *)&v81 = v19;
    *((_QWORD *)&v81 + 1) = v18;
    if (!*((_BYTE *)v18 + 48))
      sub_20E866B34();
    v20 = v18[4];
    v21 = *v18;
    v22 = (std::__shared_weak_count **)(*v18 + 16 * v20);
    do
      v23 = __ldxr(v11);
    while (__stxr(v23 + 1, v11));
    *v22 = v13;
    v24 = v21 + 16 * v20;
    v25 = *(std::__shared_weak_count **)(v24 + 8);
    *(_QWORD *)(v24 + 8) = v10;
    if (v25)
    {
      v26 = (unint64_t *)&v25->__shared_owners_;
      do
        v27 = __ldaxr(v26);
      while (__stlxr(v27 - 1, v26));
      if (!v27)
      {
        ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
        std::__shared_weak_count::__release_weak(v25);
      }
    }
    v28 = (v18[1] - *v18) >> 4;
    v29 = v18[5];
    v30 = v18[4] + 1;
    if (v30 >= v28)
      v31 = (v18[1] - *v18) >> 4;
    else
      v31 = 0;
    v18[4] = v30 - v31;
    if (v29 == v28)
    {
      v32 = v18[3] + 1;
      if (v32 < v28)
        v28 = 0;
      v18[3] = v32 - v28;
      v33 = (std::mutex **)v81;
      if (!(_QWORD)v81)
      {
LABEL_40:
        v43 = (uint64_t **)a1[9];
        v81 = 0uLL;
        v44 = (std::__shared_weak_count *)a1[5];
        if (v44)
        {
          v45 = std::__shared_weak_count::lock(v44);
          if (v45)
          {
            v46 = v45;
            v47 = a1[4];
            v48 = (unint64_t *)&v45->__shared_weak_owners_;
            do
              v49 = __ldxr(v48);
            while (__stxr(v49 + 1, v48));
            *(_QWORD *)&v81 = v47;
            *((_QWORD *)&v81 + 1) = v45;
            v50 = (unint64_t *)&v45->__shared_owners_;
            do
              v51 = __ldaxr(v50);
            while (__stlxr(v51 - 1, v50));
            if (!v51)
            {
              ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
              std::__shared_weak_count::__release_weak(v46);
            }
          }
          else
          {
            v81 = 0uLL;
          }
        }
        v52 = (char *)operator new(0x38uLL);
        *(_QWORD *)v52 = &off_24C9CD850;
        *(_OWORD *)(v52 + 8) = v81;
        v81 = 0uLL;
        *((_QWORD *)v52 + 3) = v13;
        *((_QWORD *)v52 + 4) = v10;
        v82 = 0;
        v83 = 0;
        *((_QWORD *)v52 + 5) = v75;
        *((_QWORD *)v52 + 6) = v76;
        v84[0] = 0;
        v84[1] = 0;
        v86 = (std::string *)v52;
        sub_210216F3C(*v43, (uint64_t)&v85);
        v53 = v86;
        if (v86 == &v85)
        {
          v54 = 4;
          v53 = &v85;
        }
        else
        {
          if (!v86)
            goto LABEL_54;
          v54 = 5;
        }
        (*(void (**)(void))(v53->__r_.__value_.__r.__words[0] + 8 * v54))();
LABEL_54:
        if (v80)
        {
          v55 = &v80->__shared_owners_;
          do
            v56 = __ldaxr((unint64_t *)v55);
          while (__stlxr(v56 - 1, (unint64_t *)v55));
          if (!v56)
          {
            ((void (*)(std::__shared_weak_count *))v80->__on_zero_shared)(v80);
            std::__shared_weak_count::__release_weak(v80);
          }
        }
        if (v77)
        {
          v57 = (unint64_t *)&v77->__shared_owners_;
          do
            v58 = __ldaxr(v57);
          while (__stlxr(v58 - 1, v57));
          if (!v58)
          {
            ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
            std::__shared_weak_count::__release_weak(v77);
          }
        }
        return;
      }
    }
    else
    {
      v18[5] = v29 + 1;
      v33 = (std::mutex **)v81;
      if (!(_QWORD)v81)
        goto LABEL_40;
    }
    std::mutex::unlock(*v33);
    MEMORY[0x212BC6398](v33, 0x20C4093837F09);
    goto LABEL_40;
  }
  v34 = (uint64_t **)a1[9];
  *(_OWORD *)v74 = 0uLL;
  v35 = (std::__shared_weak_count *)a1[5];
  if (v35)
  {
    v36 = std::__shared_weak_count::lock(v35);
    if (v36)
    {
      v37 = v36;
      v38 = (std::__shared_weak_count *)a1[4];
      v39 = (unint64_t *)&v36->__shared_weak_owners_;
      do
        v40 = __ldxr(v39);
      while (__stxr(v40 + 1, v39));
      v74[0] = v38;
      v74[1] = v36;
      v41 = (unint64_t *)&v36->__shared_owners_;
      do
        v42 = __ldaxr(v41);
      while (__stlxr(v42 - 1, v41));
      if (!v42)
      {
        ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
        std::__shared_weak_count::__release_weak(v37);
      }
    }
    else
    {
      *(_OWORD *)v74 = 0uLL;
    }
  }
  v59 = *a2;
  v60 = a2[1];
  if (v60)
  {
    v61 = (unint64_t *)&v60->~__shared_weak_count_0;
    do
      v62 = __ldxr(v61);
    while (__stxr(v62 + 1, v61));
  }
  v63 = operator new(0x20uLL);
  v63[1] = 0;
  v63[2] = 0;
  *v63 = &unk_24C9CD800;
  v63[3] = *a3;
  *a3 = 0;
  v64 = (char *)operator new(0x38uLL);
  *(_QWORD *)v64 = &off_24C9CD8D0;
  *(_OWORD *)(v64 + 8) = *(_OWORD *)v74;
  *((_QWORD *)v64 + 3) = v59;
  *((_QWORD *)v64 + 4) = v60;
  *((_QWORD *)v64 + 5) = v63 + 3;
  *((_QWORD *)v64 + 6) = v63;
  v83 = (__int128 *)v64;
  sub_210216F3C(*v34, (uint64_t)&v81);
  v65 = v83;
  if (v83 == &v81)
  {
    v66 = 4;
    v65 = &v81;
  }
  else
  {
    if (!v83)
      return;
    v66 = 5;
  }
  (*(void (**)(__int128 *))(*(_QWORD *)v65 + 8 * v66))(v65);
}

void sub_20EC2BC00(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, std::runtime_error a20,std::exception_ptr a21,uint64_t a22,uint64_t a23,std::exception_ptr a24)
{
  std::__assoc_sub_state **v24;
  uint64_t v25;
  std::__assoc_sub_state *v26;
  std::exception_ptr v27;

  if (a2)
  {
    __cxa_begin_catch(exception_object);
    std::current_exception();
    __cxa_end_catch();
    v26 = *v24;
    if (*v24)
    {
      std::exception_ptr::exception_ptr(&a24, &a21);
      v27.__ptr_ = &a24;
      std::__assoc_sub_state::set_exception(v26, v27);
      std::exception_ptr::~exception_ptr(&a24);
      std::exception_ptr::~exception_ptr(&a21);
      std::runtime_error::~runtime_error(&a20);
      if (*(char *)(v25 - 97) < 0)
        operator delete(*(void **)(v25 - 120));
      JUMPOUT(0x20EC2BB10);
    }
    sub_20E96CE78(3u);
  }
  _Unwind_Resume(exception_object);
}

void sub_20EC2BC74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, std::runtime_error a20,std::exception_ptr a21,uint64_t a22,uint64_t a23,std::exception_ptr a24)
{
  uint64_t v24;

  std::exception_ptr::~exception_ptr(&a21);
  std::runtime_error::~runtime_error(&a20);
  if (*(char *)(v24 - 97) < 0)
  {
    operator delete(*(void **)(v24 - 120));
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void sub_20EC2BCC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,char *a28)
{
  char *v28;
  char *v30;
  uint64_t v31;

  v30 = a28;
  if (a28 == v28)
  {
    v31 = 4;
    v30 = &a25;
  }
  else
  {
    if (!a28)
    {
      sub_20EBB7258(&a9);
      _Unwind_Resume(a1);
    }
    v31 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v30 + 8 * v31))();
  sub_20EBB7258(&a9);
  _Unwind_Resume(a1);
}

void sub_20EC2BD1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  uint64_t v10;

  sub_20E86665C(v10);
  if (a10)
  {
    std::__shared_weak_count::__release_weak(a10);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void sub_20EC2BD48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  va_list va;
  uint64_t v15;
  uint64_t v16;
  va_list va1;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  va_list va2;
  uint64_t v24;
  va_list va3;

  va_start(va3, a8);
  va_start(va2, a8);
  va_start(va1, a8);
  va_start(va, a8);
  v13 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v16 = va_arg(va2, _QWORD);
  v18 = va_arg(va2, _QWORD);
  v19 = va_arg(va2, _QWORD);
  v20 = va_arg(va2, _QWORD);
  v21 = va_arg(va2, _QWORD);
  va_copy(va3, va2);
  v22 = va_arg(va3, _QWORD);
  v24 = va_arg(va3, _QWORD);
  v11 = *(_QWORD **)(v9 - 96);
  if (v11 == v8)
  {
    v12 = 4;
    v11 = (_QWORD *)(v9 - 120);
  }
  else
  {
    if (!v11)
      goto LABEL_6;
    v12 = 5;
  }
  (*(void (**)(void))(*v11 + 8 * v12))();
LABEL_6:
  sub_20EA031A8((uint64_t *)va3);
  sub_20E86665C((uint64_t)va2);
  sub_20E86665C((uint64_t)va);
  sub_20E86665C((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_20EC2BDE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  uint64_t v9;
  va_list va;
  uint64_t v11;
  va_list va1;

  va_start(va1, a8);
  va_start(va, a8);
  v9 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  sub_20E86665C((uint64_t)va);
  sub_20E86665C((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_20EC2BE04(uint64_t a1)
{
  uint64_t *v1;

  v1 = *(uint64_t **)(a1 + 72);
  if (v1)
  {
    sub_210217048(*v1);
  }
  else
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 167, (uint64_t)"scheduler_ != nullptr", 21, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    sub_210217048(**(_QWORD **)(a1 + 72));
  }
}

_QWORD *sub_20EC2BE78(_QWORD *a1, uint64_t a2)
{
  uint64_t **v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *result;
  uint64_t v12;
  _BYTE v13[24];
  _BYTE *v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v4 = (uint64_t **)a1[9];
  if (!v4)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 181, (uint64_t)"scheduler_", 10, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v4 = (uint64_t **)a1[9];
  }
  v6 = a1[4];
  v5 = a1[5];
  if (v5)
  {
    v7 = (unint64_t *)(v5 + 16);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  v9 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v10 = operator new(0x28uLL);
  *v10 = &off_24C9CD950;
  v10[1] = v6;
  v10[2] = v5;
  v10[3] = &off_24C9CC938;
  v10[4] = v9;
  v14 = v10;
  sub_210216F3C(*v4, (uint64_t)v13);
  result = v14;
  if (v14 == v13)
  {
    v12 = 4;
    result = v13;
  }
  else
  {
    if (!v14)
      return result;
    v12 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v12))();
}

void sub_20EC2BFA8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v13;

  if (a13 == v13)
  {
    (*(void (**)(void))(a10 + 32))();
    _Unwind_Resume(exception_object);
  }
  if (a13)
  {
    (*(void (**)(void))(*(_QWORD *)a13 + 40))();
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20EC2C01C(_QWORD *a1)
{
  uint64_t **v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *result;
  uint64_t v9;
  _BYTE v10[24];
  _BYTE *v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v2 = (uint64_t **)a1[9];
  if (!v2)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 202, (uint64_t)"scheduler_", 10, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v2 = (uint64_t **)a1[9];
  }
  v4 = a1[4];
  v3 = a1[5];
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = operator new(0x20uLL);
  *v7 = &off_24C9CD9D0;
  v7[1] = v4;
  v7[2] = v3;
  v11 = v7;
  sub_210216F3C(*v2, (uint64_t)v10);
  result = v11;
  if (v11 == v10)
  {
    v9 = 4;
    result = v10;
  }
  else
  {
    if (!v11)
      return result;
    v9 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v9))();
}

void sub_20EC2C12C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v13;

  if (a13 == v13)
  {
    (*(void (**)(void))(a10 + 32))();
    _Unwind_Resume(exception_object);
  }
  if (a13)
  {
    (*(void (**)(void))(*(_QWORD *)a13 + 40))();
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_20EC2C190@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  unint64_t *v5;
  int v6;
  unint64_t v7;
  uint64_t **v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *p_shared_weak_owners;
  unint64_t v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v22;
  _BYTE v23[24];
  _BYTE *v24;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  v4 = operator new();
  *(_QWORD *)(v4 + 8) = 0;
  v5 = (unint64_t *)(v4 + 8);
  *(_QWORD *)(v4 + 24) = 850045863;
  *(_QWORD *)(v4 + 16) = 0;
  *(_OWORD *)(v4 + 32) = 0u;
  *(_OWORD *)(v4 + 48) = 0u;
  *(_OWORD *)(v4 + 64) = 0u;
  *(_QWORD *)(v4 + 80) = 0;
  *(_QWORD *)(v4 + 88) = 1018212795;
  *(_OWORD *)(v4 + 96) = 0u;
  *(_OWORD *)(v4 + 112) = 0u;
  *(_OWORD *)(v4 + 124) = 0u;
  *(_QWORD *)v4 = &off_24C9B80A0;
  v22 = v4;
  std::mutex::lock((std::mutex *)(v4 + 24));
  v6 = *(_DWORD *)(v4 + 136);
  if ((v6 & 2) != 0)
    sub_20E96CE78(1u);
  do
    v7 = __ldxr(v5);
  while (__stxr(v7 + 1, v5));
  *(_DWORD *)(v4 + 136) = v6 | 2;
  std::mutex::unlock((std::mutex *)(v4 + 24));
  v8 = (uint64_t **)a1[9];
  v9 = (std::__shared_weak_count *)a1[5];
  if (v9)
  {
    v10 = std::__shared_weak_count::lock(v9);
    v11 = v10;
    if (v10)
    {
      v12 = a1[4];
      p_shared_weak_owners = (unint64_t *)&v10->__shared_weak_owners_;
      do
        v14 = __ldxr(p_shared_weak_owners);
      while (__stxr(v14 + 1, p_shared_weak_owners));
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        v16 = __ldaxr(p_shared_owners);
      while (__stlxr(v16 - 1, p_shared_owners));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    else
    {
      v12 = 0;
    }
  }
  else
  {
    v12 = 0;
    v11 = 0;
  }
  v17 = operator new(0x20uLL);
  *v17 = &off_24C9CDA50;
  v17[1] = v12;
  v17[2] = v11;
  v17[3] = &v22;
  v24 = v17;
  sub_210216F3C(*v8, (uint64_t)v23);
  v18 = v24;
  if (v24 == v23)
  {
    v19 = 4;
    v18 = v23;
    goto LABEL_17;
  }
  if (v24)
  {
    v19 = 5;
LABEL_17:
    (*(void (**)(_QWORD *))(*v18 + 8 * v19))(v18);
  }
  std::__assoc_sub_state::wait((std::__assoc_sub_state *)v4);
  sub_20EA04D14(v4, a2);
  do
    v20 = __ldaxr(v5);
  while (__stlxr(v20 - 1, v5));
  if (!v20)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
  return sub_20EA04DE8(&v22);
}

void sub_20EC2C3A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  unint64_t *v10;
  unint64_t v12;

  do
    v12 = __ldaxr(v10);
  while (__stlxr(v12 - 1, v10));
  if (!v12)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
    sub_20EA04DE8(&a9);
    _Unwind_Resume(a1);
  }
  sub_20EA04DE8(&a9);
  _Unwind_Resume(a1);
}

uint64_t *sub_20EC2C470@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  unint64_t *v5;
  int v6;
  unint64_t v7;
  uint64_t **v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *p_shared_weak_owners;
  unint64_t v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v22;
  _BYTE v23[24];
  _BYTE *v24;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  v4 = operator new();
  *(_QWORD *)(v4 + 8) = 0;
  v5 = (unint64_t *)(v4 + 8);
  *(_QWORD *)(v4 + 24) = 850045863;
  *(_QWORD *)(v4 + 16) = 0;
  *(_OWORD *)(v4 + 32) = 0u;
  *(_OWORD *)(v4 + 48) = 0u;
  *(_OWORD *)(v4 + 64) = 0u;
  *(_QWORD *)(v4 + 80) = 0;
  *(_QWORD *)(v4 + 88) = 1018212795;
  *(_OWORD *)(v4 + 96) = 0u;
  *(_OWORD *)(v4 + 112) = 0u;
  *(_OWORD *)(v4 + 124) = 0u;
  *(_QWORD *)v4 = &off_24C9B80A0;
  v22 = v4;
  std::mutex::lock((std::mutex *)(v4 + 24));
  v6 = *(_DWORD *)(v4 + 136);
  if ((v6 & 2) != 0)
    sub_20E96CE78(1u);
  do
    v7 = __ldxr(v5);
  while (__stxr(v7 + 1, v5));
  *(_DWORD *)(v4 + 136) = v6 | 2;
  std::mutex::unlock((std::mutex *)(v4 + 24));
  v8 = (uint64_t **)a1[9];
  v9 = (std::__shared_weak_count *)a1[5];
  if (v9)
  {
    v10 = std::__shared_weak_count::lock(v9);
    v11 = v10;
    if (v10)
    {
      v12 = a1[4];
      p_shared_weak_owners = (unint64_t *)&v10->__shared_weak_owners_;
      do
        v14 = __ldxr(p_shared_weak_owners);
      while (__stxr(v14 + 1, p_shared_weak_owners));
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        v16 = __ldaxr(p_shared_owners);
      while (__stlxr(v16 - 1, p_shared_owners));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    else
    {
      v12 = 0;
    }
  }
  else
  {
    v12 = 0;
    v11 = 0;
  }
  v17 = operator new(0x20uLL);
  *v17 = &off_24C9CDAD0;
  v17[1] = v12;
  v17[2] = v11;
  v17[3] = &v22;
  v24 = v17;
  sub_210216F3C(*v8, (uint64_t)v23);
  v18 = v24;
  if (v24 == v23)
  {
    v19 = 4;
    v18 = v23;
    goto LABEL_17;
  }
  if (v24)
  {
    v19 = 5;
LABEL_17:
    (*(void (**)(_QWORD *))(*v18 + 8 * v19))(v18);
  }
  std::__assoc_sub_state::wait((std::__assoc_sub_state *)v4);
  sub_20EA04D14(v4, a2);
  do
    v20 = __ldaxr(v5);
  while (__stlxr(v20 - 1, v5));
  if (!v20)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
  return sub_20EA04DE8(&v22);
}

void sub_20EC2C688(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  unint64_t *v10;
  unint64_t v12;

  do
    v12 = __ldaxr(v10);
  while (__stlxr(v12 - 1, v10));
  if (!v12)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
    sub_20EA04DE8(&a9);
    _Unwind_Resume(a1);
  }
  sub_20EA04DE8(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20EC2C750(uint64_t a1)
{
  return sub_20EC2C8C0(a1 - 16);
}

void sub_20EC2C758(uint64_t a1)
{
  sub_20EC2C8C0(a1 - 16);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20EC2C780(uint64_t a1, uint64_t a2)
{
  return sub_20EC2BE78((_QWORD *)(a1 - 16), a2);
}

uint64_t *sub_20EC2C788@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_20EC2C190((_QWORD *)(a1 - 16), a2);
}

uint64_t *sub_20EC2C790@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_20EC2C470((_QWORD *)(a1 - 16), a2);
}

uint64_t sub_20EC2C798(uint64_t a1)
{
  return a1 - 16;
}

uint64_t sub_20EC2C7A0(uint64_t a1)
{
  return sub_20EC2C8C0(a1 - 24);
}

void sub_20EC2C7A8(uint64_t a1)
{
  sub_20EC2C8C0(a1 - 24);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20EC2C7D0(uint64_t a1)
{
  return sub_20EC2C01C((_QWORD *)(a1 - 24));
}

uint64_t sub_20EC2C7D8(uint64_t a1)
{
  return a1 - 24;
}

uint64_t sub_20EC2C7E0(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_20EC2C848(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20EC2C8B0(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8));
}

uint64_t sub_20EC2C8C0(uint64_t a1)
{
  char **v2;
  char *v3;
  char *v4;
  char *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;

  *(_QWORD *)a1 = &off_24C9CD4B0;
  *(_QWORD *)(a1 + 16) = &unk_24C9CD528;
  *(_QWORD *)(a1 + 24) = &unk_24C9CD568;
  v2 = *(char ***)(a1 + 144);
  *(_QWORD *)(a1 + 144) = 0;
  if (v2)
  {
    std::mutex::~mutex((std::mutex *)(v2 + 7));
    if (*((_BYTE *)v2 + 48))
    {
      v3 = *v2;
      if (*v2)
      {
        v4 = v2[1];
        v5 = *v2;
        if (v4 != v3)
        {
          do
          {
            v6 = (std::__shared_weak_count *)*((_QWORD *)v4 - 1);
            if (v6)
            {
              p_shared_owners = (unint64_t *)&v6->__shared_owners_;
              do
                v8 = __ldaxr(p_shared_owners);
              while (__stlxr(v8 - 1, p_shared_owners));
              if (!v8)
              {
                ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
                std::__shared_weak_count::__release_weak(v6);
              }
            }
            v4 -= 16;
          }
          while (v4 != v3);
          v5 = *v2;
        }
        v2[1] = v3;
        operator delete(v5);
      }
    }
    MEMORY[0x212BC6398](v2, 0x1022C400958DFA3);
  }
  if (*(_QWORD *)(a1 + 136))
  {
    v10 = *(_QWORD *)(a1 + 120);
    v9 = *(uint64_t **)(a1 + 128);
    v11 = *v9;
    *(_QWORD *)(v11 + 8) = *(_QWORD *)(v10 + 8);
    **(_QWORD **)(v10 + 8) = v11;
    *(_QWORD *)(a1 + 136) = 0;
    if (v9 != (uint64_t *)(a1 + 120))
    {
      do
      {
        v12 = (uint64_t *)v9[1];
        operator delete(v9);
        v9 = v12;
      }
      while (v12 != (uint64_t *)(a1 + 120));
    }
  }
  if (*(_QWORD *)(a1 + 112))
  {
    v13 = *(_QWORD *)(a1 + 96);
    v14 = *(uint64_t **)(a1 + 104);
    v15 = *v14;
    *(_QWORD *)(v15 + 8) = *(_QWORD *)(v13 + 8);
    **(_QWORD **)(v13 + 8) = v15;
    *(_QWORD *)(a1 + 112) = 0;
    if (v14 != (uint64_t *)(a1 + 96))
    {
      do
      {
        v16 = (uint64_t *)v14[1];
        (*(void (**)(uint64_t *))v14[2])(v14 + 2);
        operator delete(v14);
        v14 = v16;
      }
      while (v16 != (uint64_t *)(a1 + 96));
    }
  }
  v17 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 88) = 0;
  if (v17)
    (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  v18 = *(std::__shared_weak_count **)(a1 + 80);
  if (!v18)
    goto LABEL_27;
  v19 = (unint64_t *)&v18->__shared_owners_;
  do
    v20 = __ldaxr(v19);
  while (__stlxr(v20 - 1, v19));
  if (v20)
  {
LABEL_27:
    if ((*(char *)(a1 + 71) & 0x80000000) == 0)
      goto LABEL_29;
    goto LABEL_28;
  }
  ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
  std::__shared_weak_count::__release_weak(v18);
  if (*(char *)(a1 + 71) < 0)
LABEL_28:
    operator delete(*(void **)(a1 + 48));
LABEL_29:
  v21 = *(std::__shared_weak_count **)(a1 + 40);
  if (v21)
    std::__shared_weak_count::__release_weak(v21);
  return a1;
}

void sub_20EC2CAC0(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9CD6B0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_20EC2CAD0(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9CD6B0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC6398);
}

void sub_20EC2CB00(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 32);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

_QWORD *sub_20EC2CB5C(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  *a1 = &off_24C9CD700;
  v2 = (std::__shared_weak_count *)a1[4];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = (std::__shared_weak_count *)a1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  return a1;
}

void sub_20EC2CBA0(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  *a1 = &off_24C9CD700;
  v2 = (std::__shared_weak_count *)a1[4];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = (std::__shared_weak_count *)a1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20EC2CBF4(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;

  result = operator new(0x30uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = &off_24C9CD700;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = a1[4];
  result[3] = a1[3];
  result[4] = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 16);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  return result;
}

_QWORD *sub_20EC2CC64(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;

  v3 = result[1];
  v2 = result[2];
  *a2 = &off_24C9CD700;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  v6 = result[4];
  a2[3] = result[3];
  a2[4] = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 16);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  return result;
}

void sub_20EC2CCB4(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  v2 = *(std::__shared_weak_count **)(a1 + 32);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
}

void sub_20EC2CCF0(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  v2 = (std::__shared_weak_count *)__p[4];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = (std::__shared_weak_count *)__p[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  operator delete(__p);
}

void sub_20EC2CD28(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  char v21;

  v2 = (std::__shared_weak_count *)a1[4];
  if (!v2)
  {
    v3 = 0;
    v5 = 0;
    v4 = (std::__shared_weak_count *)a1[2];
    if (v4)
      goto LABEL_6;
    goto LABEL_11;
  }
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
  {
    v5 = 0;
    v4 = (std::__shared_weak_count *)a1[2];
    if (v4)
      goto LABEL_6;
LABEL_11:
    v7 = 0;
    v8 = 0;
    goto LABEL_12;
  }
  v4 = (std::__shared_weak_count *)a1[2];
  v5 = a1[3];
  if (!v4)
    goto LABEL_11;
LABEL_6:
  v6 = std::__shared_weak_count::lock(v4);
  v7 = v6;
  if (v6)
  {
    v8 = a1[1];
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
LABEL_12:
    if (!v3)
      goto LABEL_15;
    goto LABEL_13;
  }
  v8 = 0;
  if (!v3)
    goto LABEL_15;
LABEL_13:
  v11 = (unint64_t *)&v3->__shared_owners_;
  do
    v12 = __ldxr(v11);
  while (__stxr(v12 + 1, v11));
LABEL_15:
  if (v8)
  {
    if (v5)
    {
      LOBYTE(v20) = 0;
      v21 = 0;
      sub_20EC2D04C((uint64_t *)(v8 + 88), v5, &v20);
      if (v21)
        sub_20EBF0AB0(&v20);
    }
  }
  if (v3)
  {
    v13 = (unint64_t *)&v3->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  if (v7)
  {
    v15 = (unint64_t *)&v7->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
    do
      v17 = __ldaxr(v15);
    while (__stlxr(v17 - 1, v15));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  if (v3)
  {
    v18 = (unint64_t *)&v3->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_20EC2CEF0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;

  if (a10)
    sub_20EBF0AB0(&a9);
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  if (v11)
  {
    v15 = (unint64_t *)&v11->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
    do
      v17 = __ldaxr(v15);
    while (__stlxr(v17 - 1, v15));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (v10)
  {
    v18 = (unint64_t *)&v10->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20EC2CFD4(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINS0_4capi5BlockIU13block_pointerFvPK20CV3DSLAMStateConte"
                     "xtEEEyvyLb0EE25EnqueueMessageAndDispatchIZNKSC_4SendERKSB_EUlT_T0_E_EEvSF_SG_EUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS0_4capi5BlockIU13block_pointerFvPK20CV3DSLA"
                                "MStateContextEEEyvyLb0EE25EnqueueMessageAndDispatchIZNKSC_4SendERKSB_EUlT_T0_E_EEvSF_SG_EUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINS0_4capi5BlockIU13block_pointerFvPK20CV3DSLAMStateContextEEEyvyLb0EE25EnqueueMessageAndDispatchIZNKSC_4SendERKSB_EUlT_T0_E_EEvSF_SG_EUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS0_4capi5BlockIU13block_pointerFvPK20CV3DSLAMStateContextEEEyvyLb0EE25EnqueueMessageAndDispatchIZNKSC_4SendERKSB_EUlT_T0_E_EEvSF_SG_EUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20EC2D040()
{
  return &unk_24C9CD760;
}

void sub_20EC2D04C(uint64_t *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  unsigned __int8 v7;
  BOOL v8;
  uint64_t v9;
  uint64_t i;
  unsigned __int8 v11;
  _QWORD *v12;
  _QWORD *j;
  uint64_t v14;
  uint64_t v15;
  std::exception_ptr v16;
  uint64_t v17;

  v6 = *a1;
  if (!v6)
  {
    sub_21023D70C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/ProcessorInputMessageHandlingStrategy.h", 228, (uint64_t)"callable_", 9, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0);
    v7 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
    if ((v7 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
    {
      __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
      __cxa_guard_release(&qword_254A6DE78);
    }
    if (byte_254A6DE68)
      v8 = byte_254A6DE70 == 0;
    else
      v8 = 0;
    if (!v8)
    {
      v9 = qword_254A6DE40;
      for (i = qword_254A6DE48; v9 != i; v9 += 16)
        (*(void (**)(_QWORD, const char *, uint64_t, const char *, _QWORD))v9)(*(_QWORD *)(v9 + 8), "callable_", 9, "", 0);
    }
    v11 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
    if ((v11 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
    {
      __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
      __cxa_guard_release(&qword_254A6DE78);
    }
    if (!byte_254A6DE68)
      abort();
    qword_254A6DE58(unk_254A6DE60, "callable_", 9, "", 0);
    v6 = *a1;
  }
  v17 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 16))(v6, a2);
  v12 = a1 + 1;
  for (j = (_QWORD *)a1[2]; j != v12; j = (_QWORD *)j[1])
    (*(void (**)(_QWORD *, uint64_t *))(j[2] + 16))(j + 2, &v17);
  if (*((_BYTE *)a3 + 8))
  {
    v14 = *a3;
    if (!v14)
      sub_20E96CE78(3u);
    std::mutex::lock((std::mutex *)(v14 + 24));
    if ((*(_BYTE *)(v14 + 136) & 1) != 0
      || (v16.__ptr_ = 0, v15 = *(_QWORD *)(v14 + 16), std::exception_ptr::~exception_ptr(&v16), v15))
    {
      sub_20E96CE78(2u);
    }
    *(_QWORD *)(v14 + 144) = v17;
    *(_DWORD *)(v14 + 136) |= 5u;
    std::condition_variable::notify_all((std::condition_variable *)(v14 + 88));
    std::mutex::unlock((std::mutex *)(v14 + 24));
  }
}

void sub_20EC2D2B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t *a11, uint64_t a12, int a13, __int16 a14, char a15, unsigned __int8 a16)
{
  std::mutex *v16;
  uint64_t *v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;

  std::mutex::unlock(v16);
  if (a2 == 1)
  {
    v19 = (uint64_t *)__cxa_begin_catch(a1);
    v20 = *v19;
    a10 = *(_QWORD *)(*(_QWORD *)(*v19 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL;
    a9 = (*(uint64_t (**)(void))(v20 + 16))();
    sub_20E9B0CC4("Caught unexpected exception of type: ", (const char *)&a10, "\n", "message: ", (const char *)&a9, "\n");
    if ((a16 & 0x80u) == 0)
      v21 = (uint64_t *)&a11;
    else
      v21 = a11;
    if ((a16 & 0x80u) == 0)
      v22 = a16;
    else
      v22 = a12;
    sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/ProcessorInputMessageHandlingStrategy.h", 140, (uint64_t)"", 0, (uint64_t)v21, v22, (void (*)(void **))sub_21023DDB0);
    abort();
  }
  _Unwind_Resume(a1);
}

void sub_20EC2D380(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  __cxa_end_catch();
  JUMPOUT(0x20EC2D3A0);
}

_QWORD *sub_20EC2D3AC(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;

  *a1 = &off_24C9CD780;
  v2 = (std::__shared_weak_count *)a1[4];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      v5 = (std::__shared_weak_count *)a1[2];
      if (!v5)
        return a1;
      goto LABEL_6;
    }
  }
  v5 = (std::__shared_weak_count *)a1[2];
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
  return a1;
}

void sub_20EC2D428(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;

  *a1 = &off_24C9CD780;
  v2 = (std::__shared_weak_count *)a1[4];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)a1[2];
    if (!v5)
      goto LABEL_9;
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[2];
    if (!v5)
      goto LABEL_9;
  }
  std::__shared_weak_count::__release_weak(v5);
LABEL_9:
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20EC2D4B4(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;

  result = operator new(0x28uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = &off_24C9CD780;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = a1[4];
  result[3] = a1[3];
  result[4] = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  return result;
}

_QWORD *sub_20EC2D524(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;

  v3 = result[1];
  v2 = result[2];
  *a2 = &off_24C9CD780;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  v6 = result[4];
  a2[3] = result[3];
  a2[4] = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  return result;
}

void sub_20EC2D574(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;

  v2 = *(std::__shared_weak_count **)(a1 + 32);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    v5 = *(std::__shared_weak_count **)(a1 + 16);
    if (!v5)
      return;
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  v5 = *(std::__shared_weak_count **)(a1 + 16);
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
}

void sub_20EC2D5E4(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;

  v2 = (std::__shared_weak_count *)__p[4];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      v5 = (std::__shared_weak_count *)__p[2];
      if (!v5)
        goto LABEL_7;
      goto LABEL_6;
    }
  }
  v5 = (std::__shared_weak_count *)__p[2];
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
LABEL_7:
  operator delete(__p);
}

void sub_20EC2D654(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v8;
  char v9;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 8);
      if (v5)
      {
        LOBYTE(v8) = 0;
        v9 = 0;
        sub_20EC2D04C((uint64_t *)(v5 + 88), a1 + 24, &v8);
        if (v9)
          sub_20EBF0AB0(&v8);
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_20EC2D6FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v13;

  if (a10)
    sub_20EBF0AB0(&a9);
  p_shared_owners = (unint64_t *)&v10->__shared_owners_;
  do
    v13 = __ldaxr(p_shared_owners);
  while (__stlxr(v13 - 1, p_shared_owners));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20EC2D748(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINS0_4capi5BlockIU13block_pointerFvPK20CV3DSLAMStateConte"
                     "xtEEEyvyLb0EE4SendERKSB_EUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS0_4capi5BlockIU13block_pointerFvPK20CV3DSLA"
                                "MStateContextEEEyvyLb0EE4SendERKSB_EUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINS0_4capi5BlockIU13block_pointerFvPK20CV3DSLAMStateContextEEEyvyLb0EE4SendERKSB_EUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS0_4capi5BlockIU13block_pointerFvPK20CV3DSLAMStateContextEEEyvyLb0EE4SendERKSB_EUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20EC2D7B4()
{
  return &unk_24C9CD7E0;
}

void sub_20EC2D7C0(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_24C9CD800;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_20EC2D7D4(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_24C9CD800;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC6398);
}

uint64_t *sub_20EC2D808(uint64_t a1)
{
  return sub_20EBF0AB0((uint64_t *)(a1 + 24));
}

_QWORD *sub_20EC2D814(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;

  *a1 = &off_24C9CD850;
  v2 = (std::__shared_weak_count *)a1[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
      goto LABEL_7;
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  v5 = (std::__shared_weak_count *)a1[4];
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
LABEL_7:
  v6 = (std::__shared_weak_count *)a1[2];
  if (v6)
    std::__shared_weak_count::__release_weak(v6);
  return a1;
}

void sub_20EC2D89C(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;

  *a1 = &off_24C9CD850;
  v2 = (std::__shared_weak_count *)a1[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
    {
LABEL_7:
      v6 = (std::__shared_weak_count *)a1[2];
      if (v6)
        std::__shared_weak_count::__release_weak(v6);
      JUMPOUT(0x212BC6398);
    }
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
      goto LABEL_7;
  }
  std::__shared_weak_count::__release_weak(v5);
  goto LABEL_7;
}

_QWORD *sub_20EC2D934(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;

  result = operator new(0x38uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = &off_24C9CD850;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = a1[4];
  result[3] = a1[3];
  result[4] = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 16);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  v10 = a1[6];
  result[5] = a1[5];
  result[6] = v10;
  if (v10)
  {
    v11 = (unint64_t *)(v10 + 8);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  return result;
}

_QWORD *sub_20EC2D9C4(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;

  v3 = result[1];
  v2 = result[2];
  *a2 = &off_24C9CD850;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  v6 = result[4];
  a2[3] = result[3];
  a2[4] = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 16);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  v9 = result[6];
  a2[5] = result[5];
  a2[6] = v9;
  if (v9)
  {
    v10 = (unint64_t *)(v9 + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  return result;
}

void sub_20EC2DA34(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;

  v2 = (std::__shared_weak_count *)a1[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
      goto LABEL_7;
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  v5 = (std::__shared_weak_count *)a1[4];
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
LABEL_7:
  v6 = (std::__shared_weak_count *)a1[2];
  if (v6)
    std::__shared_weak_count::__release_weak(v6);
}

void sub_20EC2DAB4(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;

  v2 = (std::__shared_weak_count *)__p[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)__p[4];
    if (!v5)
      goto LABEL_7;
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  v5 = (std::__shared_weak_count *)__p[4];
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
LABEL_7:
  v6 = (std::__shared_weak_count *)__p[2];
  if (v6)
    std::__shared_weak_count::__release_weak(v6);
  operator delete(__p);
}

void sub_20EC2DB30(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t *v13;
  std::runtime_error_vtbl **v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  std::runtime_error *exception;
  std::runtime_error *v23;
  std::runtime_error *v24;
  std::runtime_error *v25;
  std::runtime_error v26;
  std::runtime_error v27;

  v2 = (std::__shared_weak_count *)a1[4];
  if (!v2)
  {
    v3 = 0;
    v5 = 0;
    v4 = (std::__shared_weak_count *)a1[2];
    if (v4)
      goto LABEL_6;
LABEL_11:
    v7 = 0;
    v8 = 0;
    goto LABEL_12;
  }
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
  {
    v5 = 0;
    v4 = (std::__shared_weak_count *)a1[2];
    if (v4)
      goto LABEL_6;
    goto LABEL_11;
  }
  v4 = (std::__shared_weak_count *)a1[2];
  v5 = a1[3];
  if (!v4)
    goto LABEL_11;
LABEL_6:
  v6 = std::__shared_weak_count::lock(v4);
  v7 = v6;
  if (!v6)
  {
    v8 = 0;
    if (!v3)
      goto LABEL_15;
    goto LABEL_13;
  }
  v8 = a1[1];
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  do
    v10 = __ldxr(p_shared_owners);
  while (__stxr(v10 + 1, p_shared_owners));
LABEL_12:
  if (!v3)
    goto LABEL_15;
LABEL_13:
  v11 = (unint64_t *)&v3->__shared_owners_;
  do
    v12 = __ldxr(v11);
  while (__stxr(v12 + 1, v11));
LABEL_15:
  if (!v8)
  {
    std::runtime_error::runtime_error(&v27, "Processor is no longer available.");
    v27.__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v23 = std::runtime_error::runtime_error(exception, &v27);
    v23->__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    __cxa_throw(v23, (struct type_info *)&unk_24CA1E2D0, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  if (!v5)
  {
    std::runtime_error::runtime_error(&v26, "Message was dropped.");
    v26.__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    v24 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v25 = std::runtime_error::runtime_error(v24, &v26);
    v25->__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    __cxa_throw(v25, (struct type_info *)&unk_24CA1E2D0, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  v13 = (uint64_t *)(v8 + 88);
  v14 = (std::runtime_error_vtbl **)a1[5];
  v26.__vftable = *v14;
  *v14 = 0;
  LOBYTE(v26.__imp_.__imp_) = 1;
  sub_20EC2D04C(v13, v5, (uint64_t *)&v26);
  if (LOBYTE(v26.__imp_.__imp_))
    sub_20EBF0AB0((uint64_t *)&v26);
  if (v3)
  {
    v15 = (unint64_t *)&v3->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  if (v7)
  {
    v17 = (unint64_t *)&v7->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
    do
      v19 = __ldaxr(v17);
    while (__stlxr(v19 - 1, v17));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  if (v3)
  {
    v20 = (unint64_t *)&v3->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_20EC2DE0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10, uint64_t a11, uint64_t a12, std::runtime_error a13, std::exception_ptr a14)
{
  std::__shared_weak_count *v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;

  std::exception_ptr::~exception_ptr(&a14);
  std::runtime_error::~runtime_error(&a13);
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v18 = __ldaxr(p_shared_owners);
    while (__stlxr(v18 - 1, p_shared_owners));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  if (v15)
  {
    v19 = (unint64_t *)&v15->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
    do
      v21 = __ldaxr(v19);
    while (__stlxr(v21 - 1, v19));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  if (v14)
  {
    v22 = (unint64_t *)&v14->__shared_owners_;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  _Unwind_Resume(a1);
}

void sub_20EC2DE38(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::runtime_error a10, std::exception_ptr a11, uint64_t a12, uint64_t a13, uint64_t a14, std::exception_ptr a15)
{
  uint64_t v15;
  std::__assoc_sub_state **v16;
  std::__assoc_sub_state *v17;
  std::exception_ptr v18;

  __cxa_begin_catch(a1);
  std::current_exception();
  __cxa_end_catch();
  v17 = *v16;
  if (v17)
  {
    std::exception_ptr::exception_ptr(&a15, &a11);
    v18.__ptr_ = &a15;
    std::__assoc_sub_state::set_exception(v17, v18);
    std::exception_ptr::~exception_ptr(&a15);
    std::exception_ptr::~exception_ptr(&a11);
    std::runtime_error::~runtime_error(&a10);
    if (!v15)
      JUMPOUT(0x20EC2DC44);
    JUMPOUT(0x20EC2DC14);
  }
  sub_20E96CE78(3u);
}

void sub_20EC2DE94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::runtime_error a10, std::exception_ptr a11, uint64_t a12, uint64_t a13, uint64_t a14, std::exception_ptr a15)
{
  std::__shared_weak_count *v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t *v23;
  unint64_t v24;

  std::exception_ptr::~exception_ptr(&a11);
  std::runtime_error::~runtime_error(&a10);
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v19 = __ldaxr(p_shared_owners);
    while (__stlxr(v19 - 1, p_shared_owners));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  if (v16)
  {
    v20 = (unint64_t *)&v16->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
    do
      v22 = __ldaxr(v20);
    while (__stlxr(v22 - 1, v20));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  if (v15)
  {
    v23 = (unint64_t *)&v15->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  _Unwind_Resume(a1);
}

void sub_20EC2DEC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;

  if (a11)
    sub_20EBF0AB0(&a10);
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v15 = __ldaxr(p_shared_owners);
    while (__stlxr(v15 - 1, p_shared_owners));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (v12)
  {
    v16 = (unint64_t *)&v12->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
    do
      v18 = __ldaxr(v16);
    while (__stlxr(v18 - 1, v16));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (v11)
  {
    v19 = (unint64_t *)&v11->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  _Unwind_Resume(a1);
}

uint64_t sub_20EC2DFAC(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINS0_4capi5BlockIU13block_pointerFvPK20CV3DSLAMStateConte"
                     "xtEEEyvyLb0EE25EnqueueMessageAndDispatchIZNKSC_7ProcessERKSB_NSt3__17promiseIyEEEUlT_T0_E_EEvSF_SJ_EUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS0_4capi5BlockIU13block_pointerFvPK20CV3DSLA"
                                "MStateContextEEEyvyLb0EE25EnqueueMessageAndDispatchIZNKSC_7ProcessERKSB_NSt3__17promiseI"
                                "yEEEUlT_T0_E_EEvSF_SJ_EUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINS0_4capi5BlockIU13block_pointerFvPK20CV3DSLAMStateContextEEEyvyLb0EE25EnqueueMessageAndDispatchIZNKSC_7ProcessERKSB_NSt3__17promiseIyEEEUlT_T0_E_EEvSF_SJ_EUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS0_4capi5BlockIU13block_pointerFvPK20CV3DSLAMStateContextEEEyvyLb0EE25EnqueueMessageAndDispatchIZNKSC_7ProcessERKSB_NSt3__17promiseIyEEEUlT_T0_E_EEvSF_SJ_EUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20EC2E018()
{
  return &unk_24C9CD8B0;
}

_QWORD *sub_20EC2E024(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;

  *a1 = &off_24C9CD8D0;
  v2 = (std::__shared_weak_count *)a1[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
      goto LABEL_11;
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
      goto LABEL_11;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_11:
  v8 = (std::__shared_weak_count *)a1[2];
  if (v8)
    std::__shared_weak_count::__release_weak(v8);
  return a1;
}

void sub_20EC2E0D8(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;

  *a1 = &off_24C9CD8D0;
  v2 = (std::__shared_weak_count *)a1[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
      goto LABEL_11;
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
      goto LABEL_11;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_11:
  v8 = (std::__shared_weak_count *)a1[2];
  if (v8)
    std::__shared_weak_count::__release_weak(v8);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20EC2E19C(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;

  result = operator new(0x38uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = &off_24C9CD8D0;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = a1[4];
  result[3] = a1[3];
  result[4] = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  v10 = a1[6];
  result[5] = a1[5];
  result[6] = v10;
  if (v10)
  {
    v11 = (unint64_t *)(v10 + 8);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  return result;
}

_QWORD *sub_20EC2E22C(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;

  v3 = result[1];
  v2 = result[2];
  *a2 = &off_24C9CD8D0;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  v6 = result[4];
  a2[3] = result[3];
  a2[4] = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  v9 = result[6];
  a2[5] = result[5];
  a2[6] = v9;
  if (v9)
  {
    v10 = (unint64_t *)(v9 + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  return result;
}

void sub_20EC2E29C(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;

  v2 = (std::__shared_weak_count *)a1[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
      goto LABEL_11;
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
      goto LABEL_11;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_11:
  v8 = (std::__shared_weak_count *)a1[2];
  if (v8)
    std::__shared_weak_count::__release_weak(v8);
}

void sub_20EC2E348(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;

  v2 = (std::__shared_weak_count *)__p[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)__p[4];
    if (!v5)
      goto LABEL_11;
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)__p[4];
    if (!v5)
      goto LABEL_11;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_11:
  v8 = (std::__shared_weak_count *)__p[2];
  if (v8)
    std::__shared_weak_count::__release_weak(v8);
  operator delete(__p);
}

void sub_20EC2E3F0(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  uint64_t v4;
  std::runtime_error_vtbl **v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::runtime_error *exception;
  std::runtime_error *v9;
  std::runtime_error v10;

  v2 = (std::__shared_weak_count *)a1[2];
  if (!v2 || (v3 = std::__shared_weak_count::lock(v2)) == 0 || (v4 = a1[1]) == 0)
  {
    std::runtime_error::runtime_error(&v10, "Invalid operation. Processor is released.");
    v10.__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v9 = std::runtime_error::runtime_error(exception, &v10);
    v9->__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    __cxa_throw(v9, (struct type_info *)&unk_24CA1E2D0, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  v5 = (std::runtime_error_vtbl **)a1[5];
  v10.__vftable = *v5;
  *v5 = 0;
  LOBYTE(v10.__imp_.__imp_) = 1;
  sub_20EC2D04C((uint64_t *)(v4 + 88), (uint64_t)(a1 + 3), (uint64_t *)&v10);
  if (LOBYTE(v10.__imp_.__imp_))
    sub_20EBF0AB0((uint64_t *)&v10);
  p_shared_owners = (unint64_t *)&v3->__shared_owners_;
  do
    v7 = __ldaxr(p_shared_owners);
  while (__stlxr(v7 - 1, p_shared_owners));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
}

void sub_20EC2E500(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::runtime_error a10, std::exception_ptr a11)
{
  __break(1u);
}

void sub_20EC2E578(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::runtime_error a10, std::exception_ptr a11)
{
  uint64_t v11;

  std::exception_ptr::~exception_ptr((std::exception_ptr *)&a9);
  std::runtime_error::~runtime_error(&a10);
  if (v11)
    JUMPOUT(0x20EC2E5ACLL);
  JUMPOUT(0x20EC2E5DCLL);
}

uint64_t sub_20EC2E5E4(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINS0_4capi5BlockIU13block_pointerFvPK20CV3DSLAMStateConte"
                     "xtEEEyvyLb0EE7ProcessERKSB_NSt3__17promiseIyEEEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS0_4capi5BlockIU13block_pointerFvPK20CV3DSLA"
                                "MStateContextEEEyvyLb0EE7ProcessERKSB_NSt3__17promiseIyEEEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINS0_4capi5BlockIU13block_pointerFvPK20CV3DSLAMStateContextEEEyvyLb0EE7ProcessERKSB_NSt3__17promiseIyEEEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS0_4capi5BlockIU13block_pointerFvPK20CV3DSLAMStateContextEEEyvyLb0EE7ProcessERKSB_NSt3__17promiseIyEEEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20EC2E650()
{
  return &unk_24C9CD930;
}

_QWORD *sub_20EC2E65C(_QWORD *a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;

  *a1 = &off_24C9CD950;
  v2 = a1[4];
  a1[3] = &off_24C9CC938;
  a1[4] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = (std::__shared_weak_count *)a1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  return a1;
}

void sub_20EC2E6B4(_QWORD *a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;

  *a1 = &off_24C9CD950;
  v2 = a1[4];
  a1[3] = &off_24C9CC938;
  a1[4] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = (std::__shared_weak_count *)a1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20EC2E71C(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;

  v2 = operator new(0x28uLL);
  v3 = v2;
  v5 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  *v2 = &off_24C9CD950;
  v2[1] = v5;
  v2[2] = v4;
  if (v4)
  {
    v6 = (unint64_t *)(v4 + 16);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  v2[3] = &off_24C9CC938;
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32));
  return v3;
}

void sub_20EC2E794(_Unwind_Exception *a1)
{
  _QWORD *v1;
  std::__shared_weak_count *v3;

  v3 = (std::__shared_weak_count *)v1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20EC2E7B4(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  *a2 = &off_24C9CD950;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  a2[3] = &off_24C9CC938;
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32));
}

void sub_20EC2E81C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  std::__shared_weak_count *v3;

  v3 = *(std::__shared_weak_count **)(v1 + 16);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  _Unwind_Resume(exception_object);
}

void sub_20EC2E834(_QWORD *a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;

  v2 = a1[4];
  a1[3] = &off_24C9CC938;
  a1[4] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = (std::__shared_weak_count *)a1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
}

void sub_20EC2E884(_QWORD *__p)
{
  uint64_t v2;
  std::__shared_weak_count *v3;

  v2 = __p[4];
  __p[3] = &off_24C9CC938;
  __p[4] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = (std::__shared_weak_count *)__p[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  operator delete(__p);
}

void sub_20EC2E8D0(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;

  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = a1[1];
      if (v5)
      {
        v6 = operator new(0x20uLL);
        v7 = a1[4];
        a1[4] = 0;
        v6[2] = &off_24C9CC938;
        v6[3] = v7;
        v9 = *(_QWORD *)(v5 + 96);
        v8 = (_QWORD *)(v5 + 96);
        *v6 = v9;
        v6[1] = v8;
        *(_QWORD *)(v9 + 8) = v6;
        *v8 = v6;
        ++v8[2];
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v11 = __ldaxr(p_shared_owners);
      while (__stlxr(v11 - 1, p_shared_owners));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_20EC2E984(_Unwind_Exception *exception_object)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v4;

  p_shared_owners = (unint64_t *)&v1->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20EC2E9C0(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3kit11concurrency6detail9ProcessorINS0_4capi5BlockIU13block_pointerFvPK20CV3DSLAMStateContex"
                     "tEEEyvyLb0EE9SubscribeENS1_12ChannelInputIyEEEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4cv3d3kit11concurrency6detail9ProcessorINS0_4capi5BlockIU13block_pointerFvPK20CV3DSLAM"
                                "StateContextEEEyvyLb0EE9SubscribeENS1_12ChannelInputIyEEEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3kit11concurrency6detail9ProcessorINS0_4capi5BlockIU13block_pointerFvPK20CV3DSLAMStateContextEEEyvyLb0EE9SubscribeENS1_12ChannelInputIyEEEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3kit11concurrency6detail9ProcessorINS0_4capi5BlockIU13block_pointerFvPK20CV3DSLAMStateContextEEEyvyLb0EE9SubscribeENS1_12ChannelInputIyEEEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20EC2EA2C()
{
  return &unk_24C9CD9B0;
}

_QWORD *sub_20EC2EA38(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_24C9CD9D0;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_20EC2EA70(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_24C9CD9D0;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20EC2EAB8(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x20uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *result = &off_24C9CD9D0;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  return result;
}

uint64_t sub_20EC2EB08(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = *(_QWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 16);
  *a2 = &off_24C9CD9D0;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

void sub_20EC2EB38(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void sub_20EC2EB48(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void sub_20EC2EB74(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 8);
      if (v5)
      {
        v6 = operator new(0x18uLL);
        v8 = *(_QWORD *)(v5 + 120);
        v7 = (_QWORD *)(v5 + 120);
        *v6 = v8;
        v6[1] = v7;
        *(_QWORD *)(v8 + 8) = v6;
        *v7 = v6;
        ++v7[2];
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v10 = __ldaxr(p_shared_owners);
      while (__stlxr(v10 - 1, p_shared_owners));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_20EC2EC08(_Unwind_Exception *exception_object)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v4;

  p_shared_owners = (unint64_t *)&v1->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20EC2EC44(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3kit11concurrency6detail9ProcessorINS0_4capi5BlockIU13block_pointerFvPK20CV3DSLAMStateContex"
                     "tEEEyvyLb0EE15AddErrorHandlerENS1_12ChannelInputIvEEEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4cv3d3kit11concurrency6detail9ProcessorINS0_4capi5BlockIU13block_pointerFvPK20CV3DSLAM"
                                "StateContextEEEyvyLb0EE15AddErrorHandlerENS1_12ChannelInputIvEEEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3kit11concurrency6detail9ProcessorINS0_4capi5BlockIU13block_pointerFvPK20CV3DSLAMStateContextEEEyvyLb0EE15AddErrorHandlerENS1_12ChannelInputIvEEEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3kit11concurrency6detail9ProcessorINS0_4capi5BlockIU13block_pointerFvPK20CV3DSLAMStateContextEEEyvyLb0EE15AddErrorHandlerENS1_12ChannelInputIvEEEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20EC2ECB0()
{
  return &unk_24C9CDA30;
}

_QWORD *sub_20EC2ECBC(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_24C9CDA50;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_20EC2ECF4(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_24C9CDA50;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20EC2ED3C(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x20uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = &off_24C9CDA50;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  result[3] = a1[3];
  return result;
}

_QWORD *sub_20EC2ED94(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = result[1];
  v2 = result[2];
  *a2 = &off_24C9CDA50;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  a2[3] = result[3];
  return result;
}

void sub_20EC2EDCC(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void sub_20EC2EDDC(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void sub_20EC2EE08(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  uint64_t *v6;
  unint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p[2];
  char *v16;
  __int128 v17;
  char *v18;
  uint64_t v19;
  __int128 *v20;

  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = a1[1];
      if (!v5)
      {
LABEL_11:
        p_shared_owners = (unint64_t *)&v4->__shared_owners_;
        do
          v14 = __ldaxr(p_shared_owners);
        while (__stlxr(v14 - 1, p_shared_owners));
        if (!v14)
        {
          ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
          std::__shared_weak_count::__release_weak(v4);
        }
        return;
      }
      v6 = (uint64_t *)a1[3];
      v7 = *(_QWORD *)(v5 + 112);
      v18 = 0;
      v17 = 0uLL;
      if (v7)
      {
        if (v7 >> 61)
          sub_20E92CED8();
        v8 = (char *)operator new(8 * v7);
        v9 = &v8[8 * v7];
        *(_QWORD *)&v17 = v8;
        *((_QWORD *)&v17 + 1) = v8;
        v18 = v9;
        v10 = v5 + 96;
        v11 = *(_QWORD *)(v5 + 104);
        v20 = &v17;
        if (v11 != v10)
        {
          do
          {
LABEL_7:
            v19 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v11 + 24) + 48))(*(_QWORD *)(v11 + 24));
            sub_20E9B2D04((uint64_t *)&v20, &v19);
            v11 = *(_QWORD *)(v11 + 8);
          }
          while (v11 != v10);
          *(_OWORD *)__p = v17;
          v16 = v18;
          v12 = *v6;
          if (*v6)
            goto LABEL_9;
          goto LABEL_18;
        }
      }
      else
      {
        v9 = 0;
        v8 = 0;
        v10 = v5 + 96;
        v11 = *(_QWORD *)(v5 + 104);
        v20 = &v17;
        if (v11 != v10)
          goto LABEL_7;
      }
      *(int64x2_t *)__p = vdupq_n_s64((unint64_t)v8);
      v16 = v9;
      v12 = *v6;
      if (*v6)
      {
LABEL_9:
        sub_20EA04C5C(v12, (uint64_t)__p);
        if (__p[0])
        {
          __p[1] = __p[0];
          operator delete(__p[0]);
        }
        goto LABEL_11;
      }
LABEL_18:
      sub_20E96CE78(3u);
    }
  }
}

void sub_20EC2EF84(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v17;

  if (__p)
    operator delete(__p);
  p_shared_owners = (unint64_t *)&v14->__shared_owners_;
  do
    v17 = __ldaxr(p_shared_owners);
  while (__stlxr(v17 - 1, p_shared_owners));
  if (!v17)
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20EC2EFF4(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINS0_4capi5BlockIU13block_pointerFvPK20CV3DSLAMStateConte"
                     "xtEEEyvyLb0EE16OutputHandlerIDsEvEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS0_4capi5BlockIU13block_pointerFvPK20CV3DSLA"
                                "MStateContextEEEyvyLb0EE16OutputHandlerIDsEvEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINS0_4capi5BlockIU13block_pointerFvPK20CV3DSLAMStateContextEEEyvyLb0EE16OutputHandlerIDsEvEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS0_4capi5BlockIU13block_pointerFvPK20CV3DSLAMStateContextEEEyvyLb0EE16OutputHandlerIDsEvEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20EC2F060()
{
  return &unk_24C9CDAB0;
}

_QWORD *sub_20EC2F06C(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_24C9CDAD0;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_20EC2F0A4(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_24C9CDAD0;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20EC2F0EC(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x20uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = &off_24C9CDAD0;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  result[3] = a1[3];
  return result;
}

_QWORD *sub_20EC2F144(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = result[1];
  v2 = result[2];
  *a2 = &off_24C9CDAD0;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  a2[3] = result[3];
  return result;
}

void sub_20EC2F17C(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void sub_20EC2F18C(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void sub_20EC2F1B8(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  void *__p;
  void *v9;
  uint64_t v10;

  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      if (a1[1])
      {
        v5 = (uint64_t *)a1[3];
        __p = 0;
        v9 = 0;
        v10 = 0;
        if (!*v5)
          sub_20E96CE78(3u);
        sub_20EA04C5C(*v5, (uint64_t)&__p);
        if (__p)
        {
          v9 = __p;
          operator delete(__p);
        }
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_20EC2F270(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (__p)
    operator delete(__p);
  p_shared_owners = (unint64_t *)&v11->__shared_owners_;
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20EC2F2BC(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINS0_4capi5BlockIU13block_pointerFvPK20CV3DSLAMStateConte"
                     "xtEEEyvyLb0EE15ErrorHandlerIDsEvEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS0_4capi5BlockIU13block_pointerFvPK20CV3DSLA"
                                "MStateContextEEEyvyLb0EE15ErrorHandlerIDsEvEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINS0_4capi5BlockIU13block_pointerFvPK20CV3DSLAMStateContextEEEyvyLb0EE15ErrorHandlerIDsEvEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS0_4capi5BlockIU13block_pointerFvPK20CV3DSLAMStateContextEEEyvyLb0EE15ErrorHandlerIDsEvEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20EC2F328()
{
  return &unk_24C9CDB30;
}

void sub_20EC2F338(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20EC2F35C(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t sub_20EC2F374(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail9ProcessorINS2_4capi5BlockIU13block_pointerFvPK20"
                     "CV3DSLAMStateContextEEEyvyLb0EEEE27__shared_ptr_default_deleteISE_SE_EE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail9ProcessorINS2_4capi5BlockIU13block_po"
                                "interFvPK20CV3DSLAMStateContextEEEyvyLb0EEEE27__shared_ptr_default_deleteISE_SE_EE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail9ProcessorINS2_4capi5BlockIU13block_pointerFvPK20CV3DSLAMStateContextEEEyvyLb0EEEE27__shared_ptr_default_deleteISE_SE_EE"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail9ProcessorINS2_4capi5BlockIU13block_pointerFvPK20CV3DSLAMStateContextEEEyvyLb0EEEE27__shared_ptr_default_deleteISE_SE_EE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

uint64_t sub_20EC2F3E4(uint64_t a1)
{
  std::__shared_weak_count *v2;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_20EC2F410(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20EC2F44C@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *result;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;

  result = (_QWORD *)operator new();
  v6 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  *result = &off_24C9CDBA0;
  result[1] = v6;
  result[2] = v5;
  if (v5)
  {
    v7 = (unint64_t *)(v5 + 16);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  *a2 = result;
  return result;
}

void sub_20EC2F4B4(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 8);
      if (v5)
        (*(void (**)(uint64_t))(*(_QWORD *)v5 + 32))(v5);
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_20EC2F544(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20EC2F558(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 8);
      if (v5)
        (*(void (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_20EC2F5E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20EC2F5FC(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return 0;
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
    return 0;
  v4 = v3;
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
    v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 48))(v5);
  else
    v6 = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (v9)
    return v6;
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return v6;
}

void sub_20EC2F6C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20EC2F6D4(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return 0;
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
    return 0;
  v4 = v3;
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
    v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 24))(v5);
  else
    v6 = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (v9)
    return v6;
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return v6;
}

void sub_20EC2F798(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20EC2F7AC(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3)
  {
    v5 = std::__shared_weak_count::lock(v3);
    if (v5)
    {
      v6 = v5;
      v7 = *(_QWORD *)(a1 + 8);
      if (v7)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v7 + 16))(v7, a2);
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
}

void sub_20EC2F850(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20EC2F868(uint64_t a1)
{
  sub_20EC31098(a1);
  JUMPOUT(0x212BC6398);
}

void sub_20EC2F88C(_QWORD *a1, std::__shared_weak_count_vtbl **a2)
{
  uint64_t *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t *p_shared_weak_owners;
  std::__shared_weak_count *v8;
  unint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  std::__shared_weak_count **v13;
  unint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  std::mutex **v24;
  uint64_t **v25;
  std::__shared_weak_count *v26;
  std::__shared_weak_count *v27;
  std::__shared_weak_count *v28;
  uint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  unint64_t *v32;
  unint64_t v33;
  uint64_t **v34;
  std::__shared_weak_count *v35;
  std::__shared_weak_count *v36;
  std::__shared_weak_count *v37;
  uint64_t v38;
  unint64_t *v39;
  unint64_t v40;
  unint64_t *v41;
  unint64_t v42;
  char *v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t *v46;
  unint64_t v47;
  std::__shared_weak_count_vtbl *v48;
  __int128 *v49;
  __int128 *v50;
  uint64_t v51;
  __int128 v52;
  uint64_t v53;
  __int128 *v54;
  _BYTE v55[24];
  _BYTE *v56;
  uint64_t v57;

  v57 = *MEMORY[0x24BDAC8D0];
  if (!(*(unsigned int (**)(_QWORD *))(*a1 + 48))(a1))
    return;
  if (!a1[9]
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 234, (uint64_t)"scheduler_", 10, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v4 = (uint64_t *)a1[18];
  if (v4)
  {
    v5 = (std::__shared_weak_count *)operator new(0x20uLL);
    v5->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    v5->__shared_weak_owners_ = 0;
    p_shared_weak_owners = (unint64_t *)&v5->__shared_weak_owners_;
    v5->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9CDE18;
    v5[1].__vftable = *a2;
    v8 = v5 + 1;
    do
      v9 = __ldxr(p_shared_weak_owners);
    while (__stxr(v9 + 1, p_shared_weak_owners));
    v10 = (_QWORD *)operator new();
    *v10 = v4 + 7;
    std::mutex::lock((std::mutex *)(v4 + 7));
    *(_QWORD *)&v52 = v10;
    *((_QWORD *)&v52 + 1) = v4;
    if (!*((_BYTE *)v4 + 48))
      sub_20E866B34();
    v11 = v4[4];
    v12 = *v4;
    v13 = (std::__shared_weak_count **)(*v4 + 16 * v11);
    do
      v14 = __ldxr(p_shared_owners);
    while (__stxr(v14 + 1, p_shared_owners));
    *v13 = v8;
    v15 = v12 + 16 * v11;
    v16 = *(std::__shared_weak_count **)(v15 + 8);
    *(_QWORD *)(v15 + 8) = v5;
    if (v16)
    {
      v17 = (unint64_t *)&v16->__shared_owners_;
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
    v19 = (v4[1] - *v4) >> 4;
    v20 = v4[5];
    v21 = v4[4] + 1;
    if (v21 >= v19)
      v22 = (v4[1] - *v4) >> 4;
    else
      v22 = 0;
    v4[4] = v21 - v22;
    if (v20 == v19)
    {
      v23 = v4[3] + 1;
      if (v23 < v19)
        v19 = 0;
      v4[3] = v23 - v19;
      v24 = (std::mutex **)v52;
      if (!(_QWORD)v52)
      {
LABEL_33:
        v34 = (uint64_t **)a1[9];
        v52 = 0uLL;
        v35 = (std::__shared_weak_count *)a1[5];
        if (v35)
        {
          v36 = std::__shared_weak_count::lock(v35);
          if (v36)
          {
            v37 = v36;
            v38 = a1[4];
            v39 = (unint64_t *)&v36->__shared_weak_owners_;
            do
              v40 = __ldxr(v39);
            while (__stxr(v40 + 1, v39));
            *(_QWORD *)&v52 = v38;
            *((_QWORD *)&v52 + 1) = v36;
            v41 = (unint64_t *)&v36->__shared_owners_;
            do
              v42 = __ldaxr(v41);
            while (__stlxr(v42 - 1, v41));
            if (!v42)
            {
              ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
              std::__shared_weak_count::__release_weak(v37);
            }
          }
          else
          {
            v52 = 0uLL;
          }
        }
        v43 = (char *)operator new(0x30uLL);
        *(_QWORD *)v43 = &off_24C9CDE68;
        *(_OWORD *)(v43 + 8) = v52;
        v52 = 0uLL;
        *((_QWORD *)v43 + 3) = v8;
        *((_QWORD *)v43 + 4) = v5;
        v53 = 0;
        v54 = 0;
        v56 = v43;
        sub_210216F3C(*v34, (uint64_t)v55);
        v44 = v56;
        if (v56 == v55)
        {
          v45 = 4;
          v44 = v55;
        }
        else
        {
          if (!v56)
            goto LABEL_47;
          v45 = 5;
        }
        (*(void (**)(_QWORD *))(*v44 + 8 * v45))(v44);
LABEL_47:
        if (v5)
        {
          v46 = (unint64_t *)&v5->__shared_owners_;
          do
            v47 = __ldaxr(v46);
          while (__stlxr(v47 - 1, v46));
          if (!v47)
          {
            ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
            std::__shared_weak_count::__release_weak(v5);
          }
        }
        return;
      }
    }
    else
    {
      v4[5] = v20 + 1;
      v24 = (std::mutex **)v52;
      if (!(_QWORD)v52)
        goto LABEL_33;
    }
    std::mutex::unlock(*v24);
    MEMORY[0x212BC6398](v24, 0x20C4093837F09);
    goto LABEL_33;
  }
  v25 = (uint64_t **)a1[9];
  v26 = (std::__shared_weak_count *)a1[5];
  if (v26)
  {
    v27 = std::__shared_weak_count::lock(v26);
    v28 = v27;
    if (v27)
    {
      v29 = a1[4];
      v30 = (unint64_t *)&v27->__shared_weak_owners_;
      do
        v31 = __ldxr(v30);
      while (__stxr(v31 + 1, v30));
      v32 = (unint64_t *)&v27->__shared_owners_;
      do
        v33 = __ldaxr(v32);
      while (__stlxr(v33 - 1, v32));
      if (!v33)
      {
        ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
        std::__shared_weak_count::__release_weak(v28);
      }
    }
    else
    {
      v29 = 0;
    }
  }
  else
  {
    v29 = 0;
    v28 = 0;
  }
  v48 = *a2;
  v49 = (__int128 *)operator new(0x20uLL);
  *(_QWORD *)v49 = &off_24C9CDEE8;
  *((_QWORD *)v49 + 1) = v29;
  *((_QWORD *)v49 + 2) = v28;
  *((_QWORD *)v49 + 3) = v48;
  v54 = v49;
  sub_210216F3C(*v25, (uint64_t)&v52);
  v50 = v54;
  if (v54 == &v52)
  {
    v51 = 4;
    v50 = &v52;
  }
  else
  {
    if (!v54)
      return;
    v51 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v50 + 8 * v51))();
}

void sub_20EC2FC9C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  uint64_t v19;

  if (a14 == v19)
  {
    (*(void (**)(void))(a11 + 32))();
    _Unwind_Resume(exception_object);
  }
  if (a14)
  {
    (*(void (**)(void))(*(_QWORD *)a14 + 40))();
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20EC2FD90(uint64_t result)
{
  atomic_store(1u, (unsigned __int8 *)(result + 8));
  return result;
}

uint64_t sub_20EC2FDA0(uint64_t result)
{
  atomic_store(0, (unsigned __int8 *)(result + 8));
  return result;
}

uint64_t sub_20EC2FDAC(uint64_t a1)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)(a1 + 8));
  return v1 & 1;
}

void sub_20EC2FDBC(_QWORD *a1, std::__shared_weak_count_vtbl **a2, std::__shared_weak_count_vtbl **a3)
{
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t *p_shared_weak_owners;
  std::__shared_weak_count *v12;
  unint64_t v13;
  uint64_t *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  std::__shared_weak_count **v18;
  unint64_t v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  std::mutex **v29;
  uint64_t **v30;
  std::__shared_weak_count *v31;
  std::__shared_weak_count *v32;
  std::__shared_weak_count *v33;
  uint64_t v34;
  unint64_t *v35;
  unint64_t v36;
  unint64_t *v37;
  unint64_t v38;
  uint64_t **v39;
  std::__shared_weak_count *v40;
  std::__shared_weak_count *v41;
  std::__shared_weak_count *v42;
  uint64_t v43;
  unint64_t *v44;
  unint64_t v45;
  unint64_t *v46;
  unint64_t v47;
  char *v48;
  std::string *v49;
  uint64_t v50;
  uint64_t *v51;
  unint64_t v52;
  unint64_t *v53;
  unint64_t v54;
  _QWORD *v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  __int128 *v61;
  uint64_t v62;
  _QWORD *v63;
  _QWORD *v64;
  _QWORD *v65;
  __int128 *v66;
  std::string *v67;
  std::runtime_error *exception;
  std::runtime_error *v69;
  __int128 v70;
  std::__shared_weak_count_vtbl *v71;
  _QWORD *v72;
  std::__shared_weak_count *v73;
  std::__shared_weak_count *v74;
  std::runtime_error v75;
  std::__shared_weak_count *v76;
  std::__shared_weak_count *v77;
  __int128 v78;
  _QWORD *v79;
  __int128 *v80;
  _QWORD v81[3];
  std::string v82;
  std::string *v83;
  uint64_t v84;

  v84 = *MEMORY[0x24BDAC8D0];
  if (((*(uint64_t (**)(_QWORD *))(*a1 + 48))(a1) & 1) == 0)
  {
    *(_QWORD *)&v78 = "Invalid operation. Interface is disabled for ";
    *((_QWORD *)&v78 + 1) = 45;
    v65 = (_QWORD *)a1[6];
    v64 = a1 + 6;
    v63 = v65;
    v66 = (__int128 *)*((unsigned __int8 *)v64 + 23);
    if ((char)v66 < 0)
      v66 = (__int128 *)v64[1];
    else
      v63 = v64;
    v79 = v63;
    v80 = v66;
    sub_20E8778D4((uint64_t)&v78, (uint64_t)v81, 0, 0, &v82);
    if ((v82.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v67 = &v82;
    else
      v67 = (std::string *)v82.__r_.__value_.__r.__words[0];
    std::runtime_error::runtime_error(&v75, (const char *)v67);
    v75.__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v69 = std::runtime_error::runtime_error(exception, &v75);
    v69->__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    __cxa_throw(v69, (struct type_info *)&unk_24CA1E2D0, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  if (!a1[9]
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 294, (uint64_t)"scheduler_", 10, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  if (a1[18])
  {
    v6 = (std::__shared_weak_count *)operator new(0x20uLL);
    v6->__shared_weak_owners_ = 0;
    v6->__vftable = (std::__shared_weak_count_vtbl *)&unk_24C9CDF68;
    v6[1].__vftable = *a3;
    v74 = v6;
    v72 = &v6[1].__vftable;
    v73 = v6;
    v6->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    *a3 = 0;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    if (!a1[18]
      && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 414, (uint64_t)"limiting_buffer_", 16, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v9 = (std::__shared_weak_count *)operator new(0x20uLL);
    v9->__shared_owners_ = 0;
    v10 = (unint64_t *)&v9->__shared_owners_;
    v9->__shared_weak_owners_ = 0;
    p_shared_weak_owners = (unint64_t *)&v9->__shared_weak_owners_;
    v9->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9CDE18;
    v9[1].__vftable = *a2;
    v12 = v9 + 1;
    v76 = v9 + 1;
    v77 = v9;
    do
      v13 = __ldxr(p_shared_weak_owners);
    while (__stxr(v13 + 1, p_shared_weak_owners));
    v14 = (uint64_t *)a1[18];
    v15 = (_QWORD *)operator new();
    *v15 = v14 + 7;
    std::mutex::lock((std::mutex *)(v14 + 7));
    *(_QWORD *)&v78 = v15;
    *((_QWORD *)&v78 + 1) = v14;
    if (!*((_BYTE *)v14 + 48))
      sub_20E866B34();
    v16 = v14[4];
    v17 = *v14;
    v18 = (std::__shared_weak_count **)(*v14 + 16 * v16);
    do
      v19 = __ldxr(v10);
    while (__stxr(v19 + 1, v10));
    *v18 = v12;
    v20 = v17 + 16 * v16;
    v21 = *(std::__shared_weak_count **)(v20 + 8);
    *(_QWORD *)(v20 + 8) = v9;
    if (v21)
    {
      v22 = (unint64_t *)&v21->__shared_owners_;
      do
        v23 = __ldaxr(v22);
      while (__stlxr(v23 - 1, v22));
      if (!v23)
      {
        ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
        std::__shared_weak_count::__release_weak(v21);
      }
    }
    v24 = (v14[1] - *v14) >> 4;
    v25 = v14[5];
    v26 = v14[4] + 1;
    if (v26 >= v24)
      v27 = (v14[1] - *v14) >> 4;
    else
      v27 = 0;
    v14[4] = v26 - v27;
    if (v25 == v24)
    {
      v28 = v14[3] + 1;
      if (v28 < v24)
        v24 = 0;
      v14[3] = v28 - v24;
      v29 = (std::mutex **)v78;
      if (!(_QWORD)v78)
      {
LABEL_37:
        v39 = (uint64_t **)a1[9];
        v78 = 0uLL;
        v40 = (std::__shared_weak_count *)a1[5];
        if (v40)
        {
          v41 = std::__shared_weak_count::lock(v40);
          if (v41)
          {
            v42 = v41;
            v43 = a1[4];
            v44 = (unint64_t *)&v41->__shared_weak_owners_;
            do
              v45 = __ldxr(v44);
            while (__stxr(v45 + 1, v44));
            *(_QWORD *)&v78 = v43;
            *((_QWORD *)&v78 + 1) = v41;
            v46 = (unint64_t *)&v41->__shared_owners_;
            do
              v47 = __ldaxr(v46);
            while (__stlxr(v47 - 1, v46));
            if (!v47)
            {
              ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
              std::__shared_weak_count::__release_weak(v42);
            }
          }
          else
          {
            v78 = 0uLL;
          }
        }
        v48 = (char *)operator new(0x38uLL);
        *(_QWORD *)v48 = &off_24C9CDFB8;
        *(_OWORD *)(v48 + 8) = v78;
        v78 = 0uLL;
        *((_QWORD *)v48 + 3) = v12;
        *((_QWORD *)v48 + 4) = v9;
        v79 = 0;
        v80 = 0;
        *((_QWORD *)v48 + 5) = v72;
        *((_QWORD *)v48 + 6) = v73;
        v81[0] = 0;
        v81[1] = 0;
        v83 = (std::string *)v48;
        sub_210216F3C(*v39, (uint64_t)&v82);
        v49 = v83;
        if (v83 == &v82)
        {
          v50 = 4;
          v49 = &v82;
        }
        else
        {
          if (!v83)
            goto LABEL_51;
          v50 = 5;
        }
        (*(void (**)(void))(v49->__r_.__value_.__r.__words[0] + 8 * v50))();
LABEL_51:
        if (v77)
        {
          v51 = &v77->__shared_owners_;
          do
            v52 = __ldaxr((unint64_t *)v51);
          while (__stlxr(v52 - 1, (unint64_t *)v51));
          if (!v52)
          {
            ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
            std::__shared_weak_count::__release_weak(v77);
          }
        }
        if (v74)
        {
          v53 = (unint64_t *)&v74->__shared_owners_;
          do
            v54 = __ldaxr(v53);
          while (__stlxr(v54 - 1, v53));
          if (!v54)
          {
            ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
            std::__shared_weak_count::__release_weak(v74);
          }
        }
        return;
      }
    }
    else
    {
      v14[5] = v25 + 1;
      v29 = (std::mutex **)v78;
      if (!(_QWORD)v78)
        goto LABEL_37;
    }
    std::mutex::unlock(*v29);
    MEMORY[0x212BC6398](v29, 0x20C4093837F09);
    goto LABEL_37;
  }
  v30 = (uint64_t **)a1[9];
  v70 = 0uLL;
  v31 = (std::__shared_weak_count *)a1[5];
  if (v31)
  {
    v32 = std::__shared_weak_count::lock(v31);
    if (v32)
    {
      v33 = v32;
      v34 = a1[4];
      v35 = (unint64_t *)&v32->__shared_weak_owners_;
      do
        v36 = __ldxr(v35);
      while (__stxr(v36 + 1, v35));
      *(_QWORD *)&v70 = v34;
      *((_QWORD *)&v70 + 1) = v32;
      v37 = (unint64_t *)&v32->__shared_owners_;
      do
        v38 = __ldaxr(v37);
      while (__stlxr(v38 - 1, v37));
      if (!v38)
      {
        ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
        std::__shared_weak_count::__release_weak(v33);
      }
    }
    else
    {
      v70 = 0uLL;
    }
  }
  v71 = *a2;
  v55 = operator new(0x20uLL);
  v55[1] = 0;
  v55[2] = 0;
  *v55 = &unk_24C9CDF68;
  v55[3] = *a3;
  *a3 = 0;
  v56 = (char *)operator new(0x30uLL);
  *(_QWORD *)v56 = &off_24C9CE038;
  *(_OWORD *)(v56 + 8) = v70;
  *((_QWORD *)v56 + 3) = v71;
  *((_QWORD *)v56 + 4) = v55 + 3;
  *((_QWORD *)v56 + 5) = v55;
  v80 = (__int128 *)v56;
  sub_210216F3C(*v30, (uint64_t)&v78);
  v61 = v80;
  if (v80 == &v78)
  {
    v62 = 4;
    v61 = &v78;
  }
  else
  {
    if (!v80)
      return;
    v62 = 5;
  }
  (*(void (**)(__int128 *, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v61 + 8 * v62))(v61, v57, v58, v59, v60);
}

void sub_20EC303E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, std::runtime_error a18, std::exception_ptr a19, uint64_t a20,uint64_t a21,std::exception_ptr a22)
{
  std::__assoc_sub_state **v22;
  uint64_t v23;
  std::__assoc_sub_state *v24;
  std::exception_ptr v25;

  if (a2)
  {
    __cxa_begin_catch(exception_object);
    std::current_exception();
    __cxa_end_catch();
    v24 = *v22;
    if (*v22)
    {
      std::exception_ptr::exception_ptr(&a22, &a19);
      v25.__ptr_ = &a22;
      std::__assoc_sub_state::set_exception(v24, v25);
      std::exception_ptr::~exception_ptr(&a22);
      std::exception_ptr::~exception_ptr(&a19);
      std::runtime_error::~runtime_error(&a18);
      if (*(char *)(v23 - 81) < 0)
        operator delete(*(void **)(v23 - 104));
      JUMPOUT(0x20EC302F4);
    }
    sub_20E96CE78(3u);
  }
  _Unwind_Resume(exception_object);
}

void sub_20EC30454(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, std::runtime_error a18, std::exception_ptr a19, uint64_t a20,uint64_t a21,std::exception_ptr a22)
{
  uint64_t v22;

  std::exception_ptr::~exception_ptr(&a19);
  std::runtime_error::~runtime_error(&a18);
  if (*(char *)(v22 - 81) < 0)
  {
    operator delete(*(void **)(v22 - 104));
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void sub_20EC304A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,char *a26)
{
  char *v26;
  char *v28;
  uint64_t v29;

  v28 = a26;
  if (a26 == v26)
  {
    v29 = 4;
    v28 = &a23;
  }
  else
  {
    if (!a26)
    {
      sub_20EA25E90((uint64_t)&a9);
      _Unwind_Resume(a1);
    }
    v29 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v28 + 8 * v29))();
  sub_20EA25E90((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20EC304FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10)
  {
    std::__shared_weak_count::__release_weak(a10);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void sub_20EC30520(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  va_list va;
  uint64_t v13;
  uint64_t v14;
  va_list va1;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  va_list va2;
  uint64_t v22;
  va_list va3;

  va_start(va3, a6);
  va_start(va2, a6);
  va_start(va1, a6);
  va_start(va, a6);
  v11 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v14 = va_arg(va2, _QWORD);
  v16 = va_arg(va2, _QWORD);
  v17 = va_arg(va2, _QWORD);
  v18 = va_arg(va2, _QWORD);
  v19 = va_arg(va2, _QWORD);
  va_copy(va3, va2);
  v20 = va_arg(va3, _QWORD);
  v22 = va_arg(va3, _QWORD);
  v9 = *(_QWORD **)(v7 - 80);
  if (v9 == v6)
  {
    v10 = 4;
    v9 = (_QWORD *)(v7 - 104);
  }
  else
  {
    if (!v9)
      goto LABEL_6;
    v10 = 5;
  }
  (*(void (**)(void))(*v9 + 8 * v10))();
LABEL_6:
  sub_20EA031A8((uint64_t *)va3);
  sub_20E86665C((uint64_t)va2);
  sub_20E86665C((uint64_t)va);
  sub_20E86665C((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_20EC305C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  uint64_t v7;
  va_list va;
  uint64_t v9;
  va_list va1;

  va_start(va1, a6);
  va_start(va, a6);
  v7 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  sub_20E86665C((uint64_t)va);
  sub_20E86665C((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_20EC305DC(uint64_t a1)
{
  uint64_t *v1;

  v1 = *(uint64_t **)(a1 + 72);
  if (v1)
  {
    sub_210217048(*v1);
  }
  else
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 167, (uint64_t)"scheduler_ != nullptr", 21, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    sub_210217048(**(_QWORD **)(a1 + 72));
  }
}

_QWORD *sub_20EC30650(_QWORD *a1, uint64_t a2)
{
  uint64_t **v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *result;
  uint64_t v12;
  _BYTE v13[24];
  _BYTE *v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v4 = (uint64_t **)a1[9];
  if (!v4)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 181, (uint64_t)"scheduler_", 10, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v4 = (uint64_t **)a1[9];
  }
  v6 = a1[4];
  v5 = a1[5];
  if (v5)
  {
    v7 = (unint64_t *)(v5 + 16);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  v9 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v10 = operator new(0x28uLL);
  *v10 = &off_24C9CE0B8;
  v10[1] = v6;
  v10[2] = v5;
  v10[3] = &off_24C9B2630;
  v10[4] = v9;
  v14 = v10;
  sub_210216F3C(*v4, (uint64_t)v13);
  result = v14;
  if (v14 == v13)
  {
    v12 = 4;
    result = v13;
  }
  else
  {
    if (!v14)
      return result;
    v12 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v12))();
}

void sub_20EC30780(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v13;

  if (a13 == v13)
  {
    (*(void (**)(void))(a10 + 32))();
    _Unwind_Resume(exception_object);
  }
  if (a13)
  {
    (*(void (**)(void))(*(_QWORD *)a13 + 40))();
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20EC307F4(_QWORD *a1)
{
  uint64_t **v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *result;
  uint64_t v9;
  _BYTE v10[24];
  _BYTE *v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v2 = (uint64_t **)a1[9];
  if (!v2)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 202, (uint64_t)"scheduler_", 10, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v2 = (uint64_t **)a1[9];
  }
  v4 = a1[4];
  v3 = a1[5];
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = operator new(0x20uLL);
  *v7 = &off_24C9CE138;
  v7[1] = v4;
  v7[2] = v3;
  v11 = v7;
  sub_210216F3C(*v2, (uint64_t)v10);
  result = v11;
  if (v11 == v10)
  {
    v9 = 4;
    result = v10;
  }
  else
  {
    if (!v11)
      return result;
    v9 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v9))();
}

void sub_20EC30904(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v13;

  if (a13 == v13)
  {
    (*(void (**)(void))(a10 + 32))();
    _Unwind_Resume(exception_object);
  }
  if (a13)
  {
    (*(void (**)(void))(*(_QWORD *)a13 + 40))();
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_20EC30968@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  unint64_t *v5;
  int v6;
  unint64_t v7;
  uint64_t **v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *p_shared_weak_owners;
  unint64_t v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v22;
  _BYTE v23[24];
  _BYTE *v24;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  v4 = operator new();
  *(_QWORD *)(v4 + 8) = 0;
  v5 = (unint64_t *)(v4 + 8);
  *(_QWORD *)(v4 + 24) = 850045863;
  *(_QWORD *)(v4 + 16) = 0;
  *(_OWORD *)(v4 + 32) = 0u;
  *(_OWORD *)(v4 + 48) = 0u;
  *(_OWORD *)(v4 + 64) = 0u;
  *(_QWORD *)(v4 + 80) = 0;
  *(_QWORD *)(v4 + 88) = 1018212795;
  *(_OWORD *)(v4 + 96) = 0u;
  *(_OWORD *)(v4 + 112) = 0u;
  *(_OWORD *)(v4 + 124) = 0u;
  *(_QWORD *)v4 = &off_24C9B80A0;
  v22 = v4;
  std::mutex::lock((std::mutex *)(v4 + 24));
  v6 = *(_DWORD *)(v4 + 136);
  if ((v6 & 2) != 0)
    sub_20E96CE78(1u);
  do
    v7 = __ldxr(v5);
  while (__stxr(v7 + 1, v5));
  *(_DWORD *)(v4 + 136) = v6 | 2;
  std::mutex::unlock((std::mutex *)(v4 + 24));
  v8 = (uint64_t **)a1[9];
  v9 = (std::__shared_weak_count *)a1[5];
  if (v9)
  {
    v10 = std::__shared_weak_count::lock(v9);
    v11 = v10;
    if (v10)
    {
      v12 = a1[4];
      p_shared_weak_owners = (unint64_t *)&v10->__shared_weak_owners_;
      do
        v14 = __ldxr(p_shared_weak_owners);
      while (__stxr(v14 + 1, p_shared_weak_owners));
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        v16 = __ldaxr(p_shared_owners);
      while (__stlxr(v16 - 1, p_shared_owners));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    else
    {
      v12 = 0;
    }
  }
  else
  {
    v12 = 0;
    v11 = 0;
  }
  v17 = operator new(0x20uLL);
  *v17 = &off_24C9CE1B8;
  v17[1] = v12;
  v17[2] = v11;
  v17[3] = &v22;
  v24 = v17;
  sub_210216F3C(*v8, (uint64_t)v23);
  v18 = v24;
  if (v24 == v23)
  {
    v19 = 4;
    v18 = v23;
    goto LABEL_17;
  }
  if (v24)
  {
    v19 = 5;
LABEL_17:
    (*(void (**)(_QWORD *))(*v18 + 8 * v19))(v18);
  }
  std::__assoc_sub_state::wait((std::__assoc_sub_state *)v4);
  sub_20EA04D14(v4, a2);
  do
    v20 = __ldaxr(v5);
  while (__stlxr(v20 - 1, v5));
  if (!v20)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
  return sub_20EA04DE8(&v22);
}

void sub_20EC30B80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  unint64_t *v10;
  unint64_t v12;

  do
    v12 = __ldaxr(v10);
  while (__stlxr(v12 - 1, v10));
  if (!v12)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
    sub_20EA04DE8(&a9);
    _Unwind_Resume(a1);
  }
  sub_20EA04DE8(&a9);
  _Unwind_Resume(a1);
}

uint64_t *sub_20EC30C48@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  unint64_t *v5;
  int v6;
  unint64_t v7;
  uint64_t **v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *p_shared_weak_owners;
  unint64_t v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v22;
  _BYTE v23[24];
  _BYTE *v24;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  v4 = operator new();
  *(_QWORD *)(v4 + 8) = 0;
  v5 = (unint64_t *)(v4 + 8);
  *(_QWORD *)(v4 + 24) = 850045863;
  *(_QWORD *)(v4 + 16) = 0;
  *(_OWORD *)(v4 + 32) = 0u;
  *(_OWORD *)(v4 + 48) = 0u;
  *(_OWORD *)(v4 + 64) = 0u;
  *(_QWORD *)(v4 + 80) = 0;
  *(_QWORD *)(v4 + 88) = 1018212795;
  *(_OWORD *)(v4 + 96) = 0u;
  *(_OWORD *)(v4 + 112) = 0u;
  *(_OWORD *)(v4 + 124) = 0u;
  *(_QWORD *)v4 = &off_24C9B80A0;
  v22 = v4;
  std::mutex::lock((std::mutex *)(v4 + 24));
  v6 = *(_DWORD *)(v4 + 136);
  if ((v6 & 2) != 0)
    sub_20E96CE78(1u);
  do
    v7 = __ldxr(v5);
  while (__stxr(v7 + 1, v5));
  *(_DWORD *)(v4 + 136) = v6 | 2;
  std::mutex::unlock((std::mutex *)(v4 + 24));
  v8 = (uint64_t **)a1[9];
  v9 = (std::__shared_weak_count *)a1[5];
  if (v9)
  {
    v10 = std::__shared_weak_count::lock(v9);
    v11 = v10;
    if (v10)
    {
      v12 = a1[4];
      p_shared_weak_owners = (unint64_t *)&v10->__shared_weak_owners_;
      do
        v14 = __ldxr(p_shared_weak_owners);
      while (__stxr(v14 + 1, p_shared_weak_owners));
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        v16 = __ldaxr(p_shared_owners);
      while (__stlxr(v16 - 1, p_shared_owners));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    else
    {
      v12 = 0;
    }
  }
  else
  {
    v12 = 0;
    v11 = 0;
  }
  v17 = operator new(0x20uLL);
  *v17 = &off_24C9CE238;
  v17[1] = v12;
  v17[2] = v11;
  v17[3] = &v22;
  v24 = v17;
  sub_210216F3C(*v8, (uint64_t)v23);
  v18 = v24;
  if (v24 == v23)
  {
    v19 = 4;
    v18 = v23;
    goto LABEL_17;
  }
  if (v24)
  {
    v19 = 5;
LABEL_17:
    (*(void (**)(_QWORD *))(*v18 + 8 * v19))(v18);
  }
  std::__assoc_sub_state::wait((std::__assoc_sub_state *)v4);
  sub_20EA04D14(v4, a2);
  do
    v20 = __ldaxr(v5);
  while (__stlxr(v20 - 1, v5));
  if (!v20)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
  return sub_20EA04DE8(&v22);
}

void sub_20EC30E60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  unint64_t *v10;
  unint64_t v12;

  do
    v12 = __ldaxr(v10);
  while (__stlxr(v12 - 1, v10));
  if (!v12)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
    sub_20EA04DE8(&a9);
    _Unwind_Resume(a1);
  }
  sub_20EA04DE8(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20EC30F28(uint64_t a1)
{
  return sub_20EC31098(a1 - 16);
}

void sub_20EC30F30(uint64_t a1)
{
  sub_20EC31098(a1 - 16);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20EC30F58(uint64_t a1, uint64_t a2)
{
  return sub_20EC30650((_QWORD *)(a1 - 16), a2);
}

uint64_t *sub_20EC30F60@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_20EC30968((_QWORD *)(a1 - 16), a2);
}

uint64_t *sub_20EC30F68@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_20EC30C48((_QWORD *)(a1 - 16), a2);
}

uint64_t sub_20EC30F70(uint64_t a1)
{
  return a1 - 16;
}

uint64_t sub_20EC30F78(uint64_t a1)
{
  return sub_20EC31098(a1 - 24);
}

void sub_20EC30F80(uint64_t a1)
{
  sub_20EC31098(a1 - 24);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20EC30FA8(uint64_t a1)
{
  return sub_20EC307F4((_QWORD *)(a1 - 24));
}

uint64_t sub_20EC30FB0(uint64_t a1)
{
  return a1 - 24;
}

uint64_t sub_20EC30FB8(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_20EC31020(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20EC31088(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8));
}

uint64_t sub_20EC31098(uint64_t a1)
{
  char **v2;
  char *v3;
  char *v4;
  char *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;

  *(_QWORD *)a1 = &off_24C9CDC18;
  *(_QWORD *)(a1 + 16) = &unk_24C9CDC90;
  *(_QWORD *)(a1 + 24) = &unk_24C9CDCD0;
  v2 = *(char ***)(a1 + 144);
  *(_QWORD *)(a1 + 144) = 0;
  if (v2)
  {
    std::mutex::~mutex((std::mutex *)(v2 + 7));
    if (*((_BYTE *)v2 + 48))
    {
      v3 = *v2;
      if (*v2)
      {
        v4 = v2[1];
        v5 = *v2;
        if (v4 != v3)
        {
          do
          {
            v6 = (std::__shared_weak_count *)*((_QWORD *)v4 - 1);
            if (v6)
            {
              p_shared_owners = (unint64_t *)&v6->__shared_owners_;
              do
                v8 = __ldaxr(p_shared_owners);
              while (__stlxr(v8 - 1, p_shared_owners));
              if (!v8)
              {
                ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
                std::__shared_weak_count::__release_weak(v6);
              }
            }
            v4 -= 16;
          }
          while (v4 != v3);
          v5 = *v2;
        }
        v2[1] = v3;
        operator delete(v5);
      }
    }
    MEMORY[0x212BC6398](v2, 0x1022C400958DFA3);
  }
  if (*(_QWORD *)(a1 + 136))
  {
    v10 = *(_QWORD *)(a1 + 120);
    v9 = *(uint64_t **)(a1 + 128);
    v11 = *v9;
    *(_QWORD *)(v11 + 8) = *(_QWORD *)(v10 + 8);
    **(_QWORD **)(v10 + 8) = v11;
    *(_QWORD *)(a1 + 136) = 0;
    if (v9 != (uint64_t *)(a1 + 120))
    {
      do
      {
        v12 = (uint64_t *)v9[1];
        operator delete(v9);
        v9 = v12;
      }
      while (v12 != (uint64_t *)(a1 + 120));
    }
  }
  if (*(_QWORD *)(a1 + 112))
  {
    v13 = *(_QWORD *)(a1 + 96);
    v14 = *(uint64_t **)(a1 + 104);
    v15 = *v14;
    *(_QWORD *)(v15 + 8) = *(_QWORD *)(v13 + 8);
    **(_QWORD **)(v13 + 8) = v15;
    *(_QWORD *)(a1 + 112) = 0;
    if (v14 != (uint64_t *)(a1 + 96))
    {
      do
      {
        v16 = (uint64_t *)v14[1];
        (*(void (**)(uint64_t *))v14[2])(v14 + 2);
        operator delete(v14);
        v14 = v16;
      }
      while (v16 != (uint64_t *)(a1 + 96));
    }
  }
  v17 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 88) = 0;
  if (v17)
    (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  v18 = *(std::__shared_weak_count **)(a1 + 80);
  if (!v18)
    goto LABEL_27;
  v19 = (unint64_t *)&v18->__shared_owners_;
  do
    v20 = __ldaxr(v19);
  while (__stlxr(v20 - 1, v19));
  if (v20)
  {
LABEL_27:
    if ((*(char *)(a1 + 71) & 0x80000000) == 0)
      goto LABEL_29;
    goto LABEL_28;
  }
  ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
  std::__shared_weak_count::__release_weak(v18);
  if (*(char *)(a1 + 71) < 0)
LABEL_28:
    operator delete(*(void **)(a1 + 48));
LABEL_29:
  v21 = *(std::__shared_weak_count **)(a1 + 40);
  if (v21)
    std::__shared_weak_count::__release_weak(v21);
  return a1;
}

void sub_20EC31298(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9CDE18;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_20EC312A8(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9CDE18;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20EC312E0(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  *a1 = &off_24C9CDE68;
  v2 = (std::__shared_weak_count *)a1[4];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = (std::__shared_weak_count *)a1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  return a1;
}

void sub_20EC31324(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  *a1 = &off_24C9CDE68;
  v2 = (std::__shared_weak_count *)a1[4];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = (std::__shared_weak_count *)a1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20EC31378(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;

  result = operator new(0x30uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = &off_24C9CDE68;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = a1[4];
  result[3] = a1[3];
  result[4] = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 16);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  return result;
}

_QWORD *sub_20EC313E8(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;

  v3 = result[1];
  v2 = result[2];
  *a2 = &off_24C9CDE68;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  v6 = result[4];
  a2[3] = result[3];
  a2[4] = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 16);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  return result;
}

void sub_20EC31438(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  v2 = *(std::__shared_weak_count **)(a1 + 32);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
}

void sub_20EC31474(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  v2 = (std::__shared_weak_count *)__p[4];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = (std::__shared_weak_count *)__p[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  operator delete(__p);
}

void sub_20EC314AC(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  char v21;

  v2 = (std::__shared_weak_count *)a1[4];
  if (!v2)
  {
    v3 = 0;
    v5 = 0;
    v4 = (std::__shared_weak_count *)a1[2];
    if (v4)
      goto LABEL_6;
    goto LABEL_11;
  }
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
  {
    v5 = 0;
    v4 = (std::__shared_weak_count *)a1[2];
    if (v4)
      goto LABEL_6;
LABEL_11:
    v7 = 0;
    v8 = 0;
    goto LABEL_12;
  }
  v4 = (std::__shared_weak_count *)a1[2];
  v5 = a1[3];
  if (!v4)
    goto LABEL_11;
LABEL_6:
  v6 = std::__shared_weak_count::lock(v4);
  v7 = v6;
  if (v6)
  {
    v8 = a1[1];
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
LABEL_12:
    if (!v3)
      goto LABEL_15;
    goto LABEL_13;
  }
  v8 = 0;
  if (!v3)
    goto LABEL_15;
LABEL_13:
  v11 = (unint64_t *)&v3->__shared_owners_;
  do
    v12 = __ldxr(v11);
  while (__stxr(v12 + 1, v11));
LABEL_15:
  if (v8)
  {
    if (v5)
    {
      LOBYTE(v20) = 0;
      v21 = 0;
      sub_20EC317D0((uint64_t *)(v8 + 88), v5, &v20);
      if (v21)
        sub_20EBF0C90(&v20);
    }
  }
  if (v3)
  {
    v13 = (unint64_t *)&v3->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  if (v7)
  {
    v15 = (unint64_t *)&v7->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
    do
      v17 = __ldaxr(v15);
    while (__stlxr(v17 - 1, v15));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  if (v3)
  {
    v18 = (unint64_t *)&v3->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_20EC31674(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;

  if (a10)
    sub_20EBF0C90(&a9);
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  if (v11)
  {
    v15 = (unint64_t *)&v11->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
    do
      v17 = __ldaxr(v15);
    while (__stlxr(v17 - 1, v15));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (v10)
  {
    v18 = (unint64_t *)&v10->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20EC31758(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorIybvbLb0EE25EnqueueMessageAndDispatchIZNKS4_4SendERKyEUlT"
                     "_T0_E_EEvS7_S8_EUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorIybvbLb0EE25EnqueueMessageAndDispatchIZNKS4_4S"
                                "endERKyEUlT_T0_E_EEvS7_S8_EUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorIybvbLb0EE25EnqueueMessageAndDispatchIZNKS4_4SendERKyEUlT_T0_E_EEvS7_S8_EUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorIybvbLb0EE25EnqueueMessageAndDispatchIZNKS4_4SendERKyEUlT_T0_E_EEvS7_S8_EUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20EC317C4()
{
  return &unk_24C9CDEC8;
}

void sub_20EC317D0(uint64_t *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  unsigned __int8 v7;
  BOOL v8;
  uint64_t v9;
  uint64_t i;
  unsigned __int8 v11;
  _QWORD *v12;
  _QWORD *j;
  uint64_t v14;
  uint64_t v15;
  std::exception_ptr v16;
  char v17;

  v6 = *a1;
  if (!v6)
  {
    sub_21023D70C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/ProcessorInputMessageHandlingStrategy.h", 228, (uint64_t)"callable_", 9, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0);
    v7 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
    if ((v7 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
    {
      __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
      __cxa_guard_release(&qword_254A6DE78);
    }
    if (byte_254A6DE68)
      v8 = byte_254A6DE70 == 0;
    else
      v8 = 0;
    if (!v8)
    {
      v9 = qword_254A6DE40;
      for (i = qword_254A6DE48; v9 != i; v9 += 16)
        (*(void (**)(_QWORD, const char *, uint64_t, const char *, _QWORD))v9)(*(_QWORD *)(v9 + 8), "callable_", 9, "", 0);
    }
    v11 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
    if ((v11 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
    {
      __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
      __cxa_guard_release(&qword_254A6DE78);
    }
    if (!byte_254A6DE68)
      abort();
    qword_254A6DE58(unk_254A6DE60, "callable_", 9, "", 0);
    v6 = *a1;
  }
  v17 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 16))(v6, a2);
  v12 = a1 + 1;
  for (j = (_QWORD *)a1[2]; j != v12; j = (_QWORD *)j[1])
    (*(void (**)(_QWORD *, char *))(j[2] + 16))(j + 2, &v17);
  if (*((_BYTE *)a3 + 8))
  {
    v14 = *a3;
    if (!v14)
      sub_20E96CE78(3u);
    std::mutex::lock((std::mutex *)(v14 + 24));
    if ((*(_BYTE *)(v14 + 136) & 1) != 0
      || (v16.__ptr_ = 0, v15 = *(_QWORD *)(v14 + 16), std::exception_ptr::~exception_ptr(&v16), v15))
    {
      sub_20E96CE78(2u);
    }
    *(_BYTE *)(v14 + 140) = v17;
    *(_DWORD *)(v14 + 136) |= 5u;
    std::condition_variable::notify_all((std::condition_variable *)(v14 + 88));
    std::mutex::unlock((std::mutex *)(v14 + 24));
  }
}

void sub_20EC31A3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t *a11, uint64_t a12, int a13, __int16 a14, char a15, unsigned __int8 a16)
{
  std::mutex *v16;
  uint64_t *v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;

  std::mutex::unlock(v16);
  if (a2 == 1)
  {
    v19 = (uint64_t *)__cxa_begin_catch(a1);
    v20 = *v19;
    a10 = *(_QWORD *)(*(_QWORD *)(*v19 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL;
    a9 = (*(uint64_t (**)(void))(v20 + 16))();
    sub_20E9B0CC4("Caught unexpected exception of type: ", (const char *)&a10, "\n", "message: ", (const char *)&a9, "\n");
    if ((a16 & 0x80u) == 0)
      v21 = (uint64_t *)&a11;
    else
      v21 = a11;
    if ((a16 & 0x80u) == 0)
      v22 = a16;
    else
      v22 = a12;
    sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/ProcessorInputMessageHandlingStrategy.h", 140, (uint64_t)"", 0, (uint64_t)v21, v22, (void (*)(void **))sub_21023DDB0);
    abort();
  }
  _Unwind_Resume(a1);
}

void sub_20EC31B04(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  __cxa_end_catch();
  JUMPOUT(0x20EC31B24);
}

_QWORD *sub_20EC31B30(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_24C9CDEE8;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_20EC31B68(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_24C9CDEE8;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20EC31BB0(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x20uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = &off_24C9CDEE8;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  result[3] = a1[3];
  return result;
}

_QWORD *sub_20EC31C08(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = result[1];
  v2 = result[2];
  *a2 = &off_24C9CDEE8;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  a2[3] = result[3];
  return result;
}

void sub_20EC31C40(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void sub_20EC31C50(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void sub_20EC31C7C(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v8;
  char v9;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 8);
      if (v5)
      {
        LOBYTE(v8) = 0;
        v9 = 0;
        sub_20EC317D0((uint64_t *)(v5 + 88), a1 + 24, &v8);
        if (v9)
          sub_20EBF0C90(&v8);
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_20EC31D24(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v13;

  if (a10)
    sub_20EBF0C90(&a9);
  p_shared_owners = (unint64_t *)&v10->__shared_owners_;
  do
    v13 = __ldaxr(p_shared_owners);
  while (__stlxr(v13 - 1, p_shared_owners));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20EC31D70(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorIybvbLb0EE4SendERKyEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorIybvbLb0EE4SendERKyEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorIybvbLb0EE4SendERKyEUlvE_"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorIybvbLb0EE4SendERKyEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20EC31DDC()
{
  return &unk_24C9CDF48;
}

void sub_20EC31DE8(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_24C9CDF68;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_20EC31DFC(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_24C9CDF68;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC6398);
}

uint64_t *sub_20EC31E30(uint64_t a1)
{
  return sub_20EBF0C90((uint64_t *)(a1 + 24));
}

_QWORD *sub_20EC31E3C(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;

  *a1 = &off_24C9CDFB8;
  v2 = (std::__shared_weak_count *)a1[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
      goto LABEL_7;
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  v5 = (std::__shared_weak_count *)a1[4];
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
LABEL_7:
  v6 = (std::__shared_weak_count *)a1[2];
  if (v6)
    std::__shared_weak_count::__release_weak(v6);
  return a1;
}

void sub_20EC31EC4(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;

  *a1 = &off_24C9CDFB8;
  v2 = (std::__shared_weak_count *)a1[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
    {
LABEL_7:
      v6 = (std::__shared_weak_count *)a1[2];
      if (v6)
        std::__shared_weak_count::__release_weak(v6);
      JUMPOUT(0x212BC6398);
    }
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
      goto LABEL_7;
  }
  std::__shared_weak_count::__release_weak(v5);
  goto LABEL_7;
}

_QWORD *sub_20EC31F5C(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;

  result = operator new(0x38uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = &off_24C9CDFB8;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = a1[4];
  result[3] = a1[3];
  result[4] = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 16);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  v10 = a1[6];
  result[5] = a1[5];
  result[6] = v10;
  if (v10)
  {
    v11 = (unint64_t *)(v10 + 8);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  return result;
}

_QWORD *sub_20EC31FEC(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;

  v3 = result[1];
  v2 = result[2];
  *a2 = &off_24C9CDFB8;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  v6 = result[4];
  a2[3] = result[3];
  a2[4] = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 16);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  v9 = result[6];
  a2[5] = result[5];
  a2[6] = v9;
  if (v9)
  {
    v10 = (unint64_t *)(v9 + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  return result;
}

void sub_20EC3205C(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;

  v2 = (std::__shared_weak_count *)a1[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
      goto LABEL_7;
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  v5 = (std::__shared_weak_count *)a1[4];
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
LABEL_7:
  v6 = (std::__shared_weak_count *)a1[2];
  if (v6)
    std::__shared_weak_count::__release_weak(v6);
}

void sub_20EC320DC(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;

  v2 = (std::__shared_weak_count *)__p[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)__p[4];
    if (!v5)
      goto LABEL_7;
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  v5 = (std::__shared_weak_count *)__p[4];
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
LABEL_7:
  v6 = (std::__shared_weak_count *)__p[2];
  if (v6)
    std::__shared_weak_count::__release_weak(v6);
  operator delete(__p);
}

void sub_20EC32158(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t *v13;
  std::runtime_error_vtbl **v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  std::runtime_error *exception;
  std::runtime_error *v23;
  std::runtime_error *v24;
  std::runtime_error *v25;
  std::runtime_error v26;
  std::runtime_error v27;

  v2 = (std::__shared_weak_count *)a1[4];
  if (!v2)
  {
    v3 = 0;
    v5 = 0;
    v4 = (std::__shared_weak_count *)a1[2];
    if (v4)
      goto LABEL_6;
LABEL_11:
    v7 = 0;
    v8 = 0;
    goto LABEL_12;
  }
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
  {
    v5 = 0;
    v4 = (std::__shared_weak_count *)a1[2];
    if (v4)
      goto LABEL_6;
    goto LABEL_11;
  }
  v4 = (std::__shared_weak_count *)a1[2];
  v5 = a1[3];
  if (!v4)
    goto LABEL_11;
LABEL_6:
  v6 = std::__shared_weak_count::lock(v4);
  v7 = v6;
  if (!v6)
  {
    v8 = 0;
    if (!v3)
      goto LABEL_15;
    goto LABEL_13;
  }
  v8 = a1[1];
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  do
    v10 = __ldxr(p_shared_owners);
  while (__stxr(v10 + 1, p_shared_owners));
LABEL_12:
  if (!v3)
    goto LABEL_15;
LABEL_13:
  v11 = (unint64_t *)&v3->__shared_owners_;
  do
    v12 = __ldxr(v11);
  while (__stxr(v12 + 1, v11));
LABEL_15:
  if (!v8)
  {
    std::runtime_error::runtime_error(&v27, "Processor is no longer available.");
    v27.__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v23 = std::runtime_error::runtime_error(exception, &v27);
    v23->__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    __cxa_throw(v23, (struct type_info *)&unk_24CA1E2D0, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  if (!v5)
  {
    std::runtime_error::runtime_error(&v26, "Message was dropped.");
    v26.__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    v24 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v25 = std::runtime_error::runtime_error(v24, &v26);
    v25->__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    __cxa_throw(v25, (struct type_info *)&unk_24CA1E2D0, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  v13 = (uint64_t *)(v8 + 88);
  v14 = (std::runtime_error_vtbl **)a1[5];
  v26.__vftable = *v14;
  *v14 = 0;
  LOBYTE(v26.__imp_.__imp_) = 1;
  sub_20EC317D0(v13, v5, (uint64_t *)&v26);
  if (LOBYTE(v26.__imp_.__imp_))
    sub_20EBF0C90((uint64_t *)&v26);
  if (v3)
  {
    v15 = (unint64_t *)&v3->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  if (v7)
  {
    v17 = (unint64_t *)&v7->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
    do
      v19 = __ldaxr(v17);
    while (__stlxr(v19 - 1, v17));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  if (v3)
  {
    v20 = (unint64_t *)&v3->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_20EC32434(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10, uint64_t a11, uint64_t a12, std::runtime_error a13, std::exception_ptr a14)
{
  std::__shared_weak_count *v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;

  std::exception_ptr::~exception_ptr(&a14);
  std::runtime_error::~runtime_error(&a13);
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v18 = __ldaxr(p_shared_owners);
    while (__stlxr(v18 - 1, p_shared_owners));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  if (v15)
  {
    v19 = (unint64_t *)&v15->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
    do
      v21 = __ldaxr(v19);
    while (__stlxr(v21 - 1, v19));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  if (v14)
  {
    v22 = (unint64_t *)&v14->__shared_owners_;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  _Unwind_Resume(a1);
}

void sub_20EC32460(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::runtime_error a10, std::exception_ptr a11, uint64_t a12, uint64_t a13, uint64_t a14, std::exception_ptr a15)
{
  uint64_t v15;
  std::__assoc_sub_state **v16;
  std::__assoc_sub_state *v17;
  std::exception_ptr v18;

  __cxa_begin_catch(a1);
  std::current_exception();
  __cxa_end_catch();
  v17 = *v16;
  if (v17)
  {
    std::exception_ptr::exception_ptr(&a15, &a11);
    v18.__ptr_ = &a15;
    std::__assoc_sub_state::set_exception(v17, v18);
    std::exception_ptr::~exception_ptr(&a15);
    std::exception_ptr::~exception_ptr(&a11);
    std::runtime_error::~runtime_error(&a10);
    if (!v15)
      JUMPOUT(0x20EC3226CLL);
    JUMPOUT(0x20EC3223CLL);
  }
  sub_20E96CE78(3u);
}

void sub_20EC324BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::runtime_error a10, std::exception_ptr a11, uint64_t a12, uint64_t a13, uint64_t a14, std::exception_ptr a15)
{
  std::__shared_weak_count *v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t *v23;
  unint64_t v24;

  std::exception_ptr::~exception_ptr(&a11);
  std::runtime_error::~runtime_error(&a10);
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v19 = __ldaxr(p_shared_owners);
    while (__stlxr(v19 - 1, p_shared_owners));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  if (v16)
  {
    v20 = (unint64_t *)&v16->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
    do
      v22 = __ldaxr(v20);
    while (__stlxr(v22 - 1, v20));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  if (v15)
  {
    v23 = (unint64_t *)&v15->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  _Unwind_Resume(a1);
}

void sub_20EC324E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;

  if (a11)
    sub_20EBF0C90(&a10);
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v15 = __ldaxr(p_shared_owners);
    while (__stlxr(v15 - 1, p_shared_owners));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (v12)
  {
    v16 = (unint64_t *)&v12->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
    do
      v18 = __ldaxr(v16);
    while (__stlxr(v18 - 1, v16));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (v11)
  {
    v19 = (unint64_t *)&v11->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  _Unwind_Resume(a1);
}

uint64_t sub_20EC325D4(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorIybvbLb0EE25EnqueueMessageAndDispatchIZNKS4_7ProcessERKyN"
                     "St3__17promiseIbEEEUlT_T0_E_EEvS7_SB_EUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorIybvbLb0EE25EnqueueMessageAndDispatchIZNKS4_7P"
                                "rocessERKyNSt3__17promiseIbEEEUlT_T0_E_EEvS7_SB_EUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorIybvbLb0EE25EnqueueMessageAndDispatchIZNKS4_7ProcessERKyNSt3__17promiseIbEEEUlT_T0_E_EEvS7_SB_EUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorIybvbLb0EE25EnqueueMessageAndDispatchIZNKS4_7ProcessERKyNSt3__17promiseIbEEEUlT_T0_E_EEvS7_SB_EUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20EC32640()
{
  return &unk_24C9CE018;
}

_QWORD *sub_20EC3264C(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;

  *a1 = &off_24C9CE038;
  v2 = (std::__shared_weak_count *)a1[5];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      v5 = (std::__shared_weak_count *)a1[2];
      if (!v5)
        return a1;
      goto LABEL_6;
    }
  }
  v5 = (std::__shared_weak_count *)a1[2];
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
  return a1;
}

void sub_20EC326C8(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;

  *a1 = &off_24C9CE038;
  v2 = (std::__shared_weak_count *)a1[5];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)a1[2];
    if (!v5)
      goto LABEL_9;
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[2];
    if (!v5)
      goto LABEL_9;
  }
  std::__shared_weak_count::__release_weak(v5);
LABEL_9:
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20EC32754(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  result = operator new(0x30uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = &off_24C9CE038;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = a1[4];
  result[3] = a1[3];
  result[4] = v7;
  v8 = a1[5];
  result[5] = v8;
  if (v8)
  {
    v9 = (unint64_t *)(v8 + 8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  return result;
}

_QWORD *sub_20EC327CC(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;

  v3 = result[1];
  v2 = result[2];
  *a2 = &off_24C9CE038;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  v6 = result[4];
  a2[3] = result[3];
  a2[4] = v6;
  v7 = result[5];
  a2[5] = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  return result;
}

void sub_20EC32824(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;

  v2 = *(std::__shared_weak_count **)(a1 + 40);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    v5 = *(std::__shared_weak_count **)(a1 + 16);
    if (!v5)
      return;
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  v5 = *(std::__shared_weak_count **)(a1 + 16);
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
}

void sub_20EC32894(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;

  v2 = (std::__shared_weak_count *)__p[5];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      v5 = (std::__shared_weak_count *)__p[2];
      if (!v5)
        goto LABEL_7;
      goto LABEL_6;
    }
  }
  v5 = (std::__shared_weak_count *)__p[2];
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
LABEL_7:
  operator delete(__p);
}

void sub_20EC32904(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  uint64_t v4;
  std::runtime_error_vtbl **v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::runtime_error *exception;
  std::runtime_error *v9;
  std::runtime_error v10;

  v2 = (std::__shared_weak_count *)a1[2];
  if (!v2 || (v3 = std::__shared_weak_count::lock(v2)) == 0 || (v4 = a1[1]) == 0)
  {
    std::runtime_error::runtime_error(&v10, "Invalid operation. Processor is released.");
    v10.__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v9 = std::runtime_error::runtime_error(exception, &v10);
    v9->__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    __cxa_throw(v9, (struct type_info *)&unk_24CA1E2D0, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  v5 = (std::runtime_error_vtbl **)a1[4];
  v10.__vftable = *v5;
  *v5 = 0;
  LOBYTE(v10.__imp_.__imp_) = 1;
  sub_20EC317D0((uint64_t *)(v4 + 88), (uint64_t)(a1 + 3), (uint64_t *)&v10);
  if (LOBYTE(v10.__imp_.__imp_))
    sub_20EBF0C90((uint64_t *)&v10);
  p_shared_owners = (unint64_t *)&v3->__shared_owners_;
  do
    v7 = __ldaxr(p_shared_owners);
  while (__stlxr(v7 - 1, p_shared_owners));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
}

void sub_20EC32A14(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::runtime_error a10, std::exception_ptr a11)
{
  __break(1u);
}

void sub_20EC32A8C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::runtime_error a10, std::exception_ptr a11)
{
  uint64_t v11;

  std::exception_ptr::~exception_ptr((std::exception_ptr *)&a9);
  std::runtime_error::~runtime_error(&a10);
  if (v11)
    JUMPOUT(0x20EC32AC0);
  JUMPOUT(0x20EC32AF0);
}

uint64_t sub_20EC32AF8(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorIybvbLb0EE7ProcessERKyNSt3__17promiseIbEEEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorIybvbLb0EE7ProcessERKyNSt3__17promiseIbEEEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorIybvbLb0EE7ProcessERKyNSt3__17promiseIbEEEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorIybvbLb0EE7ProcessERKyNSt3__17promiseIbEEEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20EC32B64()
{
  return &unk_24C9CE098;
}

_QWORD *sub_20EC32B70(_QWORD *a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;

  *a1 = &off_24C9CE0B8;
  v2 = a1[4];
  a1[3] = &off_24C9B2630;
  a1[4] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = (std::__shared_weak_count *)a1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  return a1;
}

void sub_20EC32BC8(_QWORD *a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;

  *a1 = &off_24C9CE0B8;
  v2 = a1[4];
  a1[3] = &off_24C9B2630;
  a1[4] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = (std::__shared_weak_count *)a1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20EC32C30(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;

  v2 = operator new(0x28uLL);
  v3 = v2;
  v5 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  *v2 = &off_24C9CE0B8;
  v2[1] = v5;
  v2[2] = v4;
  if (v4)
  {
    v6 = (unint64_t *)(v4 + 16);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  v2[3] = &off_24C9B2630;
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32));
  return v3;
}

void sub_20EC32CA8(_Unwind_Exception *a1)
{
  _QWORD *v1;
  std::__shared_weak_count *v3;

  v3 = (std::__shared_weak_count *)v1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20EC32CC8(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  *a2 = &off_24C9CE0B8;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  a2[3] = &off_24C9B2630;
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32));
}

void sub_20EC32D30(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  std::__shared_weak_count *v3;

  v3 = *(std::__shared_weak_count **)(v1 + 16);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  _Unwind_Resume(exception_object);
}

void sub_20EC32D48(_QWORD *a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;

  v2 = a1[4];
  a1[3] = &off_24C9B2630;
  a1[4] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = (std::__shared_weak_count *)a1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
}

void sub_20EC32D98(_QWORD *__p)
{
  uint64_t v2;
  std::__shared_weak_count *v3;

  v2 = __p[4];
  __p[3] = &off_24C9B2630;
  __p[4] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = (std::__shared_weak_count *)__p[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  operator delete(__p);
}

void sub_20EC32DE4(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;

  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = a1[1];
      if (v5)
      {
        v6 = operator new(0x20uLL);
        v7 = a1[4];
        a1[4] = 0;
        v6[2] = &off_24C9B2630;
        v6[3] = v7;
        v9 = *(_QWORD *)(v5 + 96);
        v8 = (_QWORD *)(v5 + 96);
        *v6 = v9;
        v6[1] = v8;
        *(_QWORD *)(v9 + 8) = v6;
        *v8 = v6;
        ++v8[2];
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v11 = __ldaxr(p_shared_owners);
      while (__stlxr(v11 - 1, p_shared_owners));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_20EC32E98(_Unwind_Exception *exception_object)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v4;

  p_shared_owners = (unint64_t *)&v1->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20EC32ED4(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3kit11concurrency6detail9ProcessorIybvbLb0EE9SubscribeENS1_12ChannelInputIbEEEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4cv3d3kit11concurrency6detail9ProcessorIybvbLb0EE9SubscribeENS1_12ChannelInputIbEEEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3kit11concurrency6detail9ProcessorIybvbLb0EE9SubscribeENS1_12ChannelInputIbEEEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3kit11concurrency6detail9ProcessorIybvbLb0EE9SubscribeENS1_12ChannelInputIbEEEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20EC32F40()
{
  return &unk_24C9CE118;
}

_QWORD *sub_20EC32F4C(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_24C9CE138;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_20EC32F84(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_24C9CE138;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20EC32FCC(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x20uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *result = &off_24C9CE138;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  return result;
}

uint64_t sub_20EC3301C(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = *(_QWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 16);
  *a2 = &off_24C9CE138;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

void sub_20EC3304C(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void sub_20EC3305C(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void sub_20EC33088(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 8);
      if (v5)
      {
        v6 = operator new(0x18uLL);
        v8 = *(_QWORD *)(v5 + 120);
        v7 = (_QWORD *)(v5 + 120);
        *v6 = v8;
        v6[1] = v7;
        *(_QWORD *)(v8 + 8) = v6;
        *v7 = v6;
        ++v7[2];
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v10 = __ldaxr(p_shared_owners);
      while (__stlxr(v10 - 1, p_shared_owners));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_20EC3311C(_Unwind_Exception *exception_object)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v4;

  p_shared_owners = (unint64_t *)&v1->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20EC33158(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3kit11concurrency6detail9ProcessorIybvbLb0EE15AddErrorHandlerENS1_12ChannelInputIvEEEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4cv3d3kit11concurrency6detail9ProcessorIybvbLb0EE15AddErrorHandlerENS1_12ChannelInputIvEEEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3kit11concurrency6detail9ProcessorIybvbLb0EE15AddErrorHandlerENS1_12ChannelInputIvEEEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3kit11concurrency6detail9ProcessorIybvbLb0EE15AddErrorHandlerENS1_12ChannelInputIvEEEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20EC331C4()
{
  return &unk_24C9CE198;
}

_QWORD *sub_20EC331D0(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_24C9CE1B8;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_20EC33208(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_24C9CE1B8;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20EC33250(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x20uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = &off_24C9CE1B8;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  result[3] = a1[3];
  return result;
}

_QWORD *sub_20EC332A8(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = result[1];
  v2 = result[2];
  *a2 = &off_24C9CE1B8;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  a2[3] = result[3];
  return result;
}

void sub_20EC332E0(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void sub_20EC332F0(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void sub_20EC3331C(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  uint64_t *v6;
  unint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p[2];
  char *v16;
  __int128 v17;
  char *v18;
  uint64_t v19;
  __int128 *v20;

  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = a1[1];
      if (!v5)
      {
LABEL_11:
        p_shared_owners = (unint64_t *)&v4->__shared_owners_;
        do
          v14 = __ldaxr(p_shared_owners);
        while (__stlxr(v14 - 1, p_shared_owners));
        if (!v14)
        {
          ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
          std::__shared_weak_count::__release_weak(v4);
        }
        return;
      }
      v6 = (uint64_t *)a1[3];
      v7 = *(_QWORD *)(v5 + 112);
      v18 = 0;
      v17 = 0uLL;
      if (v7)
      {
        if (v7 >> 61)
          sub_20E92CED8();
        v8 = (char *)operator new(8 * v7);
        v9 = &v8[8 * v7];
        *(_QWORD *)&v17 = v8;
        *((_QWORD *)&v17 + 1) = v8;
        v18 = v9;
        v10 = v5 + 96;
        v11 = *(_QWORD *)(v5 + 104);
        v20 = &v17;
        if (v11 != v10)
        {
          do
          {
LABEL_7:
            v19 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v11 + 24) + 48))(*(_QWORD *)(v11 + 24));
            sub_20E9B2D04((uint64_t *)&v20, &v19);
            v11 = *(_QWORD *)(v11 + 8);
          }
          while (v11 != v10);
          *(_OWORD *)__p = v17;
          v16 = v18;
          v12 = *v6;
          if (*v6)
            goto LABEL_9;
          goto LABEL_18;
        }
      }
      else
      {
        v9 = 0;
        v8 = 0;
        v10 = v5 + 96;
        v11 = *(_QWORD *)(v5 + 104);
        v20 = &v17;
        if (v11 != v10)
          goto LABEL_7;
      }
      *(int64x2_t *)__p = vdupq_n_s64((unint64_t)v8);
      v16 = v9;
      v12 = *v6;
      if (*v6)
      {
LABEL_9:
        sub_20EA04C5C(v12, (uint64_t)__p);
        if (__p[0])
        {
          __p[1] = __p[0];
          operator delete(__p[0]);
        }
        goto LABEL_11;
      }
LABEL_18:
      sub_20E96CE78(3u);
    }
  }
}

void sub_20EC33498(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v17;

  if (__p)
    operator delete(__p);
  p_shared_owners = (unint64_t *)&v14->__shared_owners_;
  do
    v17 = __ldaxr(p_shared_owners);
  while (__stlxr(v17 - 1, p_shared_owners));
  if (!v17)
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20EC33508(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorIybvbLb0EE16OutputHandlerIDsEvEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorIybvbLb0EE16OutputHandlerIDsEvEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorIybvbLb0EE16OutputHandlerIDsEvEUlvE_"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorIybvbLb0EE16OutputHandlerIDsEvEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20EC33574()
{
  return &unk_24C9CE218;
}

_QWORD *sub_20EC33580(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_24C9CE238;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_20EC335B8(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_24C9CE238;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20EC33600(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x20uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = &off_24C9CE238;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  result[3] = a1[3];
  return result;
}

_QWORD *sub_20EC33658(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = result[1];
  v2 = result[2];
  *a2 = &off_24C9CE238;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  a2[3] = result[3];
  return result;
}

void sub_20EC33690(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void sub_20EC336A0(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void sub_20EC336CC(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  void *__p;
  void *v9;
  uint64_t v10;

  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      if (a1[1])
      {
        v5 = (uint64_t *)a1[3];
        __p = 0;
        v9 = 0;
        v10 = 0;
        if (!*v5)
          sub_20E96CE78(3u);
        sub_20EA04C5C(*v5, (uint64_t)&__p);
        if (__p)
        {
          v9 = __p;
          operator delete(__p);
        }
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_20EC33784(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (__p)
    operator delete(__p);
  p_shared_owners = (unint64_t *)&v11->__shared_owners_;
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20EC337D0(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorIybvbLb0EE15ErrorHandlerIDsEvEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorIybvbLb0EE15ErrorHandlerIDsEvEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorIybvbLb0EE15ErrorHandlerIDsEvEUlvE_"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorIybvbLb0EE15ErrorHandlerIDsEvEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20EC3383C()
{
  return &unk_24C9CE298;
}

void sub_20EC3384C(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20EC33870(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t sub_20EC33888(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail9ProcessorIybvbLb0EEEE27__shared_ptr_default_deleteIS6_S6_EE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail9ProcessorIybvbLb0EEEE27__shared_ptr_d"
                                "efault_deleteIS6_S6_EE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail9ProcessorIybvbLb0EEEE27__shared_ptr_default_deleteIS6_S6_EE"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail9ProcessorIybvbLb0EEEE27__shared_ptr_default_deleteIS6_S6_EE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

uint64_t sub_20EC338F8(uint64_t a1)
{
  std::__shared_weak_count *v2;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_20EC33924(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20EC33960@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *result;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;

  result = (_QWORD *)operator new();
  v6 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  *result = &off_24C9CE308;
  result[1] = v6;
  result[2] = v5;
  if (v5)
  {
    v7 = (unint64_t *)(v5 + 16);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  *a2 = result;
  return result;
}

void sub_20EC339C8(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 8);
      if (v5)
        (*(void (**)(uint64_t))(*(_QWORD *)v5 + 32))(v5);
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_20EC33A58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20EC33A6C(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 8);
      if (v5)
        (*(void (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_20EC33AFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20EC33B10(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return 0;
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
    return 0;
  v4 = v3;
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
    v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 48))(v5);
  else
    v6 = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (v9)
    return v6;
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return v6;
}

void sub_20EC33BD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20EC33BE8(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return 0;
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
    return 0;
  v4 = v3;
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
    v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 24))(v5);
  else
    v6 = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (v9)
    return v6;
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return v6;
}

void sub_20EC33CAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20EC33CC0(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3)
  {
    v5 = std::__shared_weak_count::lock(v3);
    if (v5)
    {
      v6 = v5;
      v7 = *(_QWORD *)(a1 + 8);
      if (v7)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v7 + 16))(v7, a2);
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
}

void sub_20EC33D64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20EC33D7C(uint64_t a1)
{
  sub_20EC35B08(a1);
  JUMPOUT(0x212BC6398);
}

void sub_20EC33DA0(_QWORD *a1, uint64_t a2)
{
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_weak_owners;
  unint64_t v7;
  uint64_t *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count **v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  std::mutex **v24;
  uint64_t **v25;
  std::__shared_weak_count *v26;
  std::__shared_weak_count *v27;
  std::__shared_weak_count *v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  unint64_t *v32;
  unint64_t v33;
  uint64_t **v34;
  std::__shared_weak_count *v35;
  std::__shared_weak_count *v36;
  std::__shared_weak_count *v37;
  uint64_t v38;
  unint64_t *v39;
  unint64_t v40;
  unint64_t *v41;
  unint64_t v42;
  char *v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t *v46;
  unint64_t v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  int v55;
  uint64_t v56;
  unint64_t *v57;
  unint64_t v58;
  char *v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 *v67;
  uint64_t v68;
  std::__shared_weak_count *v69;
  unint64_t *v70;
  unint64_t v71;
  std::__shared_weak_count *v72[2];
  __int128 v73;
  __int128 __p;
  uint64_t v75;
  char v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  char v91;
  __int128 v92;
  char v93;
  __int128 v94;
  uint64_t v95;
  __int128 v96;
  __int16 v97;
  __int128 v98;
  uint64_t v99;
  __int128 *v100;
  _BYTE v101[24];
  _BYTE *v102;
  uint64_t v103;

  v103 = *MEMORY[0x24BDAC8D0];
  if (!(*(unsigned int (**)(_QWORD *))(*a1 + 48))(a1))
    return;
  if (!a1[9]
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 234, (uint64_t)"scheduler_", 10, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  if (a1[18])
  {
    v4 = (std::__shared_weak_count *)operator new(0x178uLL);
    sub_20EC35D98((uint64_t)v4, (__int128 *)a2);
    v5 = v4 + 1;
    p_shared_weak_owners = (unint64_t *)&v4->__shared_weak_owners_;
    do
      v7 = __ldxr(p_shared_weak_owners);
    while (__stxr(v7 + 1, p_shared_weak_owners));
    v8 = (uint64_t *)a1[18];
    v9 = (_QWORD *)operator new();
    *v9 = v8 + 7;
    std::mutex::lock((std::mutex *)(v8 + 7));
    *(_QWORD *)&v98 = v9;
    *((_QWORD *)&v98 + 1) = v8;
    if (!*((_BYTE *)v8 + 48))
      sub_20E866B34();
    v10 = v8[4];
    v11 = *v8;
    v12 = (std::__shared_weak_count **)(*v8 + 16 * v10);
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v14 = __ldxr(p_shared_owners);
    while (__stxr(v14 + 1, p_shared_owners));
    *v12 = v5;
    v15 = v11 + 16 * v10;
    v16 = *(std::__shared_weak_count **)(v15 + 8);
    *(_QWORD *)(v15 + 8) = v4;
    if (v16)
    {
      v17 = (unint64_t *)&v16->__shared_owners_;
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
    v19 = (v8[1] - *v8) >> 4;
    v20 = v8[5];
    v21 = v8[4] + 1;
    if (v21 >= v19)
      v22 = (v8[1] - *v8) >> 4;
    else
      v22 = 0;
    v8[4] = v21 - v22;
    if (v20 == v19)
    {
      v23 = v8[3] + 1;
      if (v23 < v19)
        v19 = 0;
      v8[3] = v23 - v19;
      v24 = (std::mutex **)v98;
      if (!(_QWORD)v98)
      {
LABEL_33:
        v34 = (uint64_t **)a1[9];
        v98 = 0uLL;
        v35 = (std::__shared_weak_count *)a1[5];
        if (v35)
        {
          v36 = std::__shared_weak_count::lock(v35);
          if (v36)
          {
            v37 = v36;
            v38 = a1[4];
            v39 = (unint64_t *)&v36->__shared_weak_owners_;
            do
              v40 = __ldxr(v39);
            while (__stxr(v40 + 1, v39));
            *(_QWORD *)&v98 = v38;
            *((_QWORD *)&v98 + 1) = v36;
            v41 = (unint64_t *)&v36->__shared_owners_;
            do
              v42 = __ldaxr(v41);
            while (__stlxr(v42 - 1, v41));
            if (!v42)
            {
              ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
              std::__shared_weak_count::__release_weak(v37);
            }
          }
          else
          {
            v98 = 0uLL;
          }
        }
        v43 = (char *)operator new(0x30uLL);
        *(_QWORD *)v43 = &off_24C9CE5D0;
        *(_OWORD *)(v43 + 8) = v98;
        v98 = 0uLL;
        *((_QWORD *)v43 + 3) = v5;
        *((_QWORD *)v43 + 4) = v4;
        v99 = 0;
        v100 = 0;
        v102 = v43;
        sub_210216F3C(*v34, (uint64_t)v101);
        v44 = v102;
        if (v102 == v101)
        {
          v45 = 4;
          v44 = v101;
        }
        else
        {
          if (!v102)
            goto LABEL_47;
          v45 = 5;
        }
        (*(void (**)(_QWORD *))(*v44 + 8 * v45))(v44);
LABEL_47:
        if (v4)
        {
          v46 = (unint64_t *)&v4->__shared_owners_;
          do
            v47 = __ldaxr(v46);
          while (__stlxr(v47 - 1, v46));
          if (!v47)
          {
            ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
            std::__shared_weak_count::__release_weak(v4);
          }
        }
        return;
      }
    }
    else
    {
      v8[5] = v20 + 1;
      v24 = (std::mutex **)v98;
      if (!(_QWORD)v98)
        goto LABEL_33;
    }
    std::mutex::unlock(*v24);
    MEMORY[0x212BC6398](v24, 0x20C4093837F09);
    goto LABEL_33;
  }
  v25 = (uint64_t **)a1[9];
  *(_OWORD *)v72 = 0uLL;
  v26 = (std::__shared_weak_count *)a1[5];
  if (v26)
  {
    v27 = std::__shared_weak_count::lock(v26);
    if (v27)
    {
      v28 = v27;
      v29 = (std::__shared_weak_count *)a1[4];
      v30 = (unint64_t *)&v27->__shared_weak_owners_;
      do
        v31 = __ldxr(v30);
      while (__stxr(v31 + 1, v30));
      v72[0] = v29;
      v72[1] = v27;
      v32 = (unint64_t *)&v27->__shared_owners_;
      do
        v33 = __ldaxr(v32);
      while (__stlxr(v33 - 1, v32));
      if (!v33)
      {
        ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
        std::__shared_weak_count::__release_weak(v28);
      }
    }
    else
    {
      *(_OWORD *)v72 = 0uLL;
    }
  }
  v73 = *(_OWORD *)a2;
  LOBYTE(__p) = 0;
  v76 = 0;
  if (*(_BYTE *)(a2 + 40))
  {
    if (*(char *)(a2 + 39) < 0)
    {
      sub_20E860C04(&__p, *(void **)(a2 + 16), *(_QWORD *)(a2 + 24));
    }
    else
    {
      __p = *(_OWORD *)(a2 + 16);
      v75 = *(_QWORD *)(a2 + 32);
    }
    v76 = 1;
  }
  v48 = *(_OWORD *)(a2 + 256);
  v89 = *(_OWORD *)(a2 + 240);
  v90 = v48;
  v91 = *(_BYTE *)(a2 + 272);
  v49 = *(_OWORD *)(a2 + 192);
  v85 = *(_OWORD *)(a2 + 176);
  v86 = v49;
  v50 = *(_OWORD *)(a2 + 224);
  v87 = *(_OWORD *)(a2 + 208);
  v88 = v50;
  v51 = *(_OWORD *)(a2 + 128);
  v81 = *(_OWORD *)(a2 + 112);
  v82 = v51;
  v52 = *(_OWORD *)(a2 + 160);
  v83 = *(_OWORD *)(a2 + 144);
  v84 = v52;
  v53 = *(_OWORD *)(a2 + 64);
  v77 = *(_OWORD *)(a2 + 48);
  v78 = v53;
  v54 = *(_OWORD *)(a2 + 96);
  v79 = *(_OWORD *)(a2 + 80);
  v80 = v54;
  LOBYTE(v92) = 0;
  v93 = 0;
  v55 = *(unsigned __int8 *)(a2 + 296);
  if (*(_BYTE *)(a2 + 296))
  {
    v56 = *(_QWORD *)(a2 + 288);
    *(_QWORD *)&v92 = *(_QWORD *)(a2 + 280);
    *((_QWORD *)&v92 + 1) = v56;
    if (v56)
    {
      v57 = (unint64_t *)(v56 + 8);
      do
        v58 = __ldxr(v57);
      while (__stxr(v58 + 1, v57));
    }
    v93 = 1;
  }
  v94 = *(_OWORD *)(a2 + 304);
  v95 = *(_QWORD *)(a2 + 320);
  v96 = *(_OWORD *)(a2 + 328);
  v97 = *(_WORD *)(a2 + 344);
  v100 = 0;
  v59 = (char *)operator new(0x178uLL);
  *(_QWORD *)v59 = off_24C9CE650;
  *(_OWORD *)(v59 + 8) = *(_OWORD *)v72;
  *(_OWORD *)(v59 + 24) = v73;
  v59[40] = 0;
  v59[64] = 0;
  if (v76)
  {
    *(_OWORD *)(v59 + 40) = __p;
    *((_QWORD *)v59 + 7) = v75;
    v75 = 0;
    __p = 0uLL;
    v59[64] = 1;
  }
  v60 = v87;
  *(_OWORD *)(v59 + 248) = v88;
  v61 = v90;
  *(_OWORD *)(v59 + 264) = v89;
  *(_OWORD *)(v59 + 280) = v61;
  v62 = v83;
  *(_OWORD *)(v59 + 184) = v84;
  v63 = v86;
  *(_OWORD *)(v59 + 200) = v85;
  *(_OWORD *)(v59 + 216) = v63;
  *(_OWORD *)(v59 + 232) = v60;
  v64 = v79;
  *(_OWORD *)(v59 + 120) = v80;
  v65 = v82;
  *(_OWORD *)(v59 + 136) = v81;
  *(_OWORD *)(v59 + 152) = v65;
  *(_OWORD *)(v59 + 168) = v62;
  v66 = v78;
  *(_OWORD *)(v59 + 72) = v77;
  *(_OWORD *)(v59 + 88) = v66;
  v59[296] = v91;
  *(_OWORD *)(v59 + 104) = v64;
  v59[304] = 0;
  v59[320] = 0;
  if (v55)
  {
    *((_OWORD *)v59 + 19) = v92;
    v92 = 0uLL;
    v59[320] = 1;
  }
  *(_OWORD *)(v59 + 328) = *(_OWORD *)(a2 + 304);
  *((_QWORD *)v59 + 43) = *(_QWORD *)(a2 + 320);
  *((_OWORD *)v59 + 22) = *(_OWORD *)(a2 + 328);
  *((_WORD *)v59 + 184) = *(_WORD *)(a2 + 344);
  v100 = (__int128 *)v59;
  sub_210216F3C(*v25, (uint64_t)&v98);
  v67 = v100;
  if (v100 == &v98)
  {
    v68 = 4;
    v67 = &v98;
  }
  else
  {
    if (!v100)
      goto LABEL_72;
    v68 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v67 + 8 * v68))();
LABEL_72:
  if (v93)
  {
    v69 = (std::__shared_weak_count *)*((_QWORD *)&v92 + 1);
    if (*((_QWORD *)&v92 + 1))
    {
      v70 = (unint64_t *)(*((_QWORD *)&v92 + 1) + 8);
      do
        v71 = __ldaxr(v70);
      while (__stlxr(v71 - 1, v70));
      if (!v71)
      {
        ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
        std::__shared_weak_count::__release_weak(v69);
      }
    }
  }
  if (v76 && SHIBYTE(v75) < 0)
    operator delete((void *)__p);
}

void sub_20EC343F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, std::__shared_weak_count *a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21)
{
  if (a21 && a20 < 0)
    operator delete(__p);
  if (a12)
  {
    std::__shared_weak_count::__release_weak(a12);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20EC34554(uint64_t result)
{
  atomic_store(1u, (unsigned __int8 *)(result + 8));
  return result;
}

uint64_t sub_20EC34564(uint64_t result)
{
  atomic_store(0, (unsigned __int8 *)(result + 8));
  return result;
}

uint64_t sub_20EC34570(uint64_t a1)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)(a1 + 8));
  return v1 & 1;
}

void sub_20EC34580(_QWORD *a1, uint64_t a2, std::__shared_weak_count_vtbl **a3)
{
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  std::__shared_weak_count **v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  std::mutex **v29;
  uint64_t **v30;
  std::__shared_weak_count *v31;
  std::__shared_weak_count *v32;
  std::__shared_weak_count *v33;
  std::__shared_weak_count *v34;
  unint64_t *p_shared_weak_owners;
  unint64_t v36;
  unint64_t *p_shared_owners;
  unint64_t v38;
  uint64_t **v39;
  std::__shared_weak_count *v40;
  std::__shared_weak_count *v41;
  std::__shared_weak_count *v42;
  uint64_t v43;
  unint64_t *v44;
  unint64_t v45;
  unint64_t *v46;
  unint64_t v47;
  char *v48;
  std::string *v49;
  uint64_t v50;
  uint64_t *v51;
  unint64_t v52;
  unint64_t *v53;
  unint64_t v54;
  std::__shared_weak_count *v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  int v63;
  uint64_t v64;
  unint64_t *v65;
  unint64_t v66;
  std::__shared_weak_count *v67;
  char *v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 *v76;
  uint64_t v77;
  std::__shared_weak_count *v78;
  unint64_t *v79;
  unint64_t v80;
  std::__shared_weak_count *v81;
  unint64_t *v82;
  unint64_t v83;
  _QWORD *v84;
  _QWORD *v85;
  _QWORD *v86;
  __int128 *v87;
  std::string *v88;
  std::runtime_error *exception;
  std::runtime_error *v90;
  _QWORD *v91;
  _QWORD *v92;
  std::__shared_weak_count *v93;
  std::runtime_error v94;
  std::__shared_weak_count *v95;
  std::__shared_weak_count *v96;
  std::__shared_weak_count *v97[2];
  __int128 v98;
  __int128 __p;
  uint64_t v100;
  char v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  char v116;
  __int128 v117;
  char v118;
  __int128 v119;
  uint64_t v120;
  __int128 v121;
  __int16 v122;
  _QWORD *v123;
  std::__shared_weak_count *v124;
  __int128 v125;
  _QWORD *v126;
  __int128 *v127;
  _QWORD v128[3];
  std::string v129;
  std::string *v130;
  uint64_t v131;

  v131 = *MEMORY[0x24BDAC8D0];
  if (((*(uint64_t (**)(_QWORD *))(*a1 + 48))(a1) & 1) == 0)
  {
    *(_QWORD *)&v125 = "Invalid operation. Interface is disabled for ";
    *((_QWORD *)&v125 + 1) = 45;
    v86 = (_QWORD *)a1[6];
    v85 = a1 + 6;
    v84 = v86;
    v87 = (__int128 *)*((unsigned __int8 *)v85 + 23);
    if ((char)v87 < 0)
      v87 = (__int128 *)v85[1];
    else
      v84 = v85;
    v126 = v84;
    v127 = v87;
    sub_20E8778D4((uint64_t)&v125, (uint64_t)v128, 0, 0, &v129);
    if ((v129.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v88 = &v129;
    else
      v88 = (std::string *)v129.__r_.__value_.__r.__words[0];
    std::runtime_error::runtime_error(&v94, (const char *)v88);
    v94.__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v90 = std::runtime_error::runtime_error(exception, &v94);
    v90->__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    __cxa_throw(v90, (struct type_info *)&unk_24CA1E2D0, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  if (!a1[9]
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 294, (uint64_t)"scheduler_", 10, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  if (!a1[18])
  {
    v30 = (uint64_t **)a1[9];
    v97[0] = 0;
    v97[1] = 0;
    v31 = (std::__shared_weak_count *)a1[5];
    if (v31)
    {
      v32 = std::__shared_weak_count::lock(v31);
      if (v32)
      {
        v33 = v32;
        v34 = (std::__shared_weak_count *)a1[4];
        p_shared_weak_owners = (unint64_t *)&v32->__shared_weak_owners_;
        do
          v36 = __ldxr(p_shared_weak_owners);
        while (__stxr(v36 + 1, p_shared_weak_owners));
        v97[0] = v34;
        v97[1] = v32;
        p_shared_owners = (unint64_t *)&v32->__shared_owners_;
        do
          v38 = __ldaxr(p_shared_owners);
        while (__stlxr(v38 - 1, p_shared_owners));
        if (!v38)
        {
          ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
          std::__shared_weak_count::__release_weak(v33);
        }
      }
      else
      {
        v97[0] = 0;
        v97[1] = 0;
      }
    }
    v98 = *(_OWORD *)a2;
    LOBYTE(__p) = 0;
    v101 = 0;
    if (*(_BYTE *)(a2 + 40))
    {
      if (*(char *)(a2 + 39) < 0)
      {
        sub_20E860C04(&__p, *(void **)(a2 + 16), *(_QWORD *)(a2 + 24));
      }
      else
      {
        __p = *(_OWORD *)(a2 + 16);
        v100 = *(_QWORD *)(a2 + 32);
      }
      v101 = 1;
    }
    v56 = *(_OWORD *)(a2 + 256);
    v114 = *(_OWORD *)(a2 + 240);
    v115 = v56;
    v116 = *(_BYTE *)(a2 + 272);
    v57 = *(_OWORD *)(a2 + 192);
    v110 = *(_OWORD *)(a2 + 176);
    v111 = v57;
    v58 = *(_OWORD *)(a2 + 224);
    v112 = *(_OWORD *)(a2 + 208);
    v113 = v58;
    v59 = *(_OWORD *)(a2 + 128);
    v106 = *(_OWORD *)(a2 + 112);
    v107 = v59;
    v60 = *(_OWORD *)(a2 + 160);
    v108 = *(_OWORD *)(a2 + 144);
    v109 = v60;
    v61 = *(_OWORD *)(a2 + 64);
    v102 = *(_OWORD *)(a2 + 48);
    v103 = v61;
    v62 = *(_OWORD *)(a2 + 96);
    v104 = *(_OWORD *)(a2 + 80);
    v105 = v62;
    LOBYTE(v117) = 0;
    v118 = 0;
    v63 = *(unsigned __int8 *)(a2 + 296);
    if (*(_BYTE *)(a2 + 296))
    {
      v64 = *(_QWORD *)(a2 + 288);
      *(_QWORD *)&v117 = *(_QWORD *)(a2 + 280);
      *((_QWORD *)&v117 + 1) = v64;
      if (v64)
      {
        v65 = (unint64_t *)(v64 + 8);
        do
          v66 = __ldxr(v65);
        while (__stxr(v66 + 1, v65));
      }
      v118 = 1;
    }
    v119 = *(_OWORD *)(a2 + 304);
    v120 = *(_QWORD *)(a2 + 320);
    v121 = *(_OWORD *)(a2 + 328);
    v122 = *(_WORD *)(a2 + 344);
    v67 = (std::__shared_weak_count *)operator new(0x20uLL);
    v67->__shared_owners_ = 0;
    v67->__shared_weak_owners_ = 0;
    v67->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9CE6D0;
    v67[1].__vftable = *a3;
    *a3 = 0;
    v123 = &v67[1].__vftable;
    v124 = v67;
    v127 = 0;
    v68 = (char *)operator new(0x188uLL);
    *(_QWORD *)v68 = off_24C9CE7A0;
    *(_OWORD *)(v68 + 8) = *(_OWORD *)v97;
    v97[0] = 0;
    v97[1] = 0;
    *(_OWORD *)(v68 + 24) = v98;
    v68[40] = 0;
    v68[64] = 0;
    if (v101)
    {
      *(_OWORD *)(v68 + 40) = __p;
      *((_QWORD *)v68 + 7) = v100;
      v100 = 0;
      __p = 0uLL;
      v68[64] = 1;
    }
    v69 = v112;
    *(_OWORD *)(v68 + 248) = v113;
    v70 = v115;
    *(_OWORD *)(v68 + 264) = v114;
    *(_OWORD *)(v68 + 280) = v70;
    v71 = v108;
    *(_OWORD *)(v68 + 184) = v109;
    v72 = v111;
    *(_OWORD *)(v68 + 200) = v110;
    *(_OWORD *)(v68 + 216) = v72;
    *(_OWORD *)(v68 + 232) = v69;
    v73 = v104;
    *(_OWORD *)(v68 + 120) = v105;
    v74 = v107;
    *(_OWORD *)(v68 + 136) = v106;
    *(_OWORD *)(v68 + 152) = v74;
    *(_OWORD *)(v68 + 168) = v71;
    v75 = v103;
    *(_OWORD *)(v68 + 72) = v102;
    *(_OWORD *)(v68 + 88) = v75;
    v68[296] = v116;
    *(_OWORD *)(v68 + 104) = v73;
    v68[304] = 0;
    v68[320] = 0;
    if (v63)
    {
      *((_OWORD *)v68 + 19) = v117;
      v117 = 0uLL;
      v68[320] = 1;
    }
    *(_OWORD *)(v68 + 328) = v119;
    *((_QWORD *)v68 + 43) = v120;
    *((_OWORD *)v68 + 22) = v121;
    *((_WORD *)v68 + 184) = v122;
    *((_QWORD *)v68 + 47) = v67 + 1;
    *((_QWORD *)v68 + 48) = v67;
    v123 = 0;
    v124 = 0;
    v127 = (__int128 *)v68;
    sub_210216F3C(*v30, (uint64_t)&v125);
    v76 = v127;
    if (v127 == &v125)
    {
      v77 = 4;
      v76 = &v125;
    }
    else
    {
      if (!v127)
      {
LABEL_81:
        v78 = v124;
        if (v124)
        {
          v79 = (unint64_t *)&v124->__shared_owners_;
          do
            v80 = __ldaxr(v79);
          while (__stlxr(v80 - 1, v79));
          if (!v80)
          {
            ((void (*)(std::__shared_weak_count *))v78->__on_zero_shared)(v78);
            std::__shared_weak_count::__release_weak(v78);
          }
        }
        if (v118)
        {
          v81 = (std::__shared_weak_count *)*((_QWORD *)&v117 + 1);
          if (*((_QWORD *)&v117 + 1))
          {
            v82 = (unint64_t *)(*((_QWORD *)&v117 + 1) + 8);
            do
              v83 = __ldaxr(v82);
            while (__stlxr(v83 - 1, v82));
            if (!v83)
            {
              ((void (*)(std::__shared_weak_count *))v81->__on_zero_shared)(v81);
              std::__shared_weak_count::__release_weak(v81);
            }
          }
        }
        if (v101 && SHIBYTE(v100) < 0)
          operator delete((void *)__p);
        v55 = v97[1];
        if (v97[1])
          goto LABEL_96;
        return;
      }
      v77 = 5;
    }
    (*(void (**)(void))(*(_QWORD *)v76 + 8 * v77))();
    goto LABEL_81;
  }
  v6 = (std::__shared_weak_count *)operator new(0x20uLL);
  v6->__shared_weak_owners_ = 0;
  v6->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9CE6D0;
  v6[1].__vftable = *a3;
  v93 = v6;
  v91 = &v6[1].__vftable;
  v92 = &v6->__vftable;
  v6->__shared_owners_ = 0;
  v7 = (unint64_t *)&v6->__shared_owners_;
  *a3 = 0;
  do
    v8 = __ldxr(v7);
  while (__stxr(v8 + 1, v7));
  if (!a1[18]
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 414, (uint64_t)"limiting_buffer_", 16, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v9 = (std::__shared_weak_count *)operator new(0x178uLL);
  sub_20EC35D98((uint64_t)v9, (__int128 *)a2);
  v10 = v9 + 1;
  v95 = v9 + 1;
  v96 = v9;
  v11 = (unint64_t *)&v9->__shared_weak_owners_;
  do
    v12 = __ldxr(v11);
  while (__stxr(v12 + 1, v11));
  v13 = (uint64_t *)a1[18];
  v14 = (_QWORD *)operator new();
  *v14 = v13 + 7;
  std::mutex::lock((std::mutex *)(v13 + 7));
  *(_QWORD *)&v125 = v14;
  *((_QWORD *)&v125 + 1) = v13;
  if (!*((_BYTE *)v13 + 48))
    sub_20E866B34();
  v15 = v13[4];
  v16 = *v13;
  v17 = (std::__shared_weak_count **)(*v13 + 16 * v15);
  v18 = (unint64_t *)&v9->__shared_owners_;
  do
    v19 = __ldxr(v18);
  while (__stxr(v19 + 1, v18));
  *v17 = v10;
  v20 = v16 + 16 * v15;
  v21 = *(std::__shared_weak_count **)(v20 + 8);
  *(_QWORD *)(v20 + 8) = v9;
  if (v21)
  {
    v22 = (unint64_t *)&v21->__shared_owners_;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
  v24 = (v13[1] - *v13) >> 4;
  v25 = v13[5];
  v26 = v13[4] + 1;
  if (v26 >= v24)
    v27 = (v13[1] - *v13) >> 4;
  else
    v27 = 0;
  v13[4] = v26 - v27;
  if (v25 != v24)
  {
    v13[5] = v25 + 1;
    v29 = (std::mutex **)v125;
    if (!(_QWORD)v125)
      goto LABEL_37;
    goto LABEL_36;
  }
  v28 = v13[3] + 1;
  if (v28 < v24)
    v24 = 0;
  v13[3] = v28 - v24;
  v29 = (std::mutex **)v125;
  if ((_QWORD)v125)
  {
LABEL_36:
    std::mutex::unlock(*v29);
    MEMORY[0x212BC6398](v29, 0x20C4093837F09);
  }
LABEL_37:
  v39 = (uint64_t **)a1[9];
  v125 = 0uLL;
  v40 = (std::__shared_weak_count *)a1[5];
  if (v40)
  {
    v41 = std::__shared_weak_count::lock(v40);
    if (v41)
    {
      v42 = v41;
      v43 = a1[4];
      v44 = (unint64_t *)&v41->__shared_weak_owners_;
      do
        v45 = __ldxr(v44);
      while (__stxr(v45 + 1, v44));
      *(_QWORD *)&v125 = v43;
      *((_QWORD *)&v125 + 1) = v41;
      v46 = (unint64_t *)&v41->__shared_owners_;
      do
        v47 = __ldaxr(v46);
      while (__stlxr(v47 - 1, v46));
      if (!v47)
      {
        ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
        std::__shared_weak_count::__release_weak(v42);
      }
    }
    else
    {
      v125 = 0uLL;
    }
  }
  v48 = (char *)operator new(0x38uLL);
  *(_QWORD *)v48 = &off_24C9CE720;
  *(_OWORD *)(v48 + 8) = v125;
  v125 = 0uLL;
  *((_QWORD *)v48 + 3) = v10;
  *((_QWORD *)v48 + 4) = v9;
  v126 = 0;
  v127 = 0;
  *((_QWORD *)v48 + 5) = v91;
  *((_QWORD *)v48 + 6) = v92;
  v128[0] = 0;
  v128[1] = 0;
  v130 = (std::string *)v48;
  sub_210216F3C(*v39, (uint64_t)&v129);
  v49 = v130;
  if (v130 == &v129)
  {
    v50 = 4;
    v49 = &v129;
    goto LABEL_50;
  }
  if (v130)
  {
    v50 = 5;
LABEL_50:
    (*(void (**)(void))(v49->__r_.__value_.__r.__words[0] + 8 * v50))();
  }
  if (v96)
  {
    v51 = &v96->__shared_owners_;
    do
      v52 = __ldaxr((unint64_t *)v51);
    while (__stlxr(v52 - 1, (unint64_t *)v51));
    if (!v52)
    {
      ((void (*)(std::__shared_weak_count *))v96->__on_zero_shared)(v96);
      std::__shared_weak_count::__release_weak(v96);
    }
  }
  if (v93)
  {
    v53 = (unint64_t *)&v93->__shared_owners_;
    do
      v54 = __ldaxr(v53);
    while (__stlxr(v54 - 1, v53));
    if (!v54)
    {
      ((void (*)(std::__shared_weak_count *))v93->__on_zero_shared)(v93);
      v55 = v93;
LABEL_96:
      std::__shared_weak_count::__release_weak(v55);
    }
  }
}

void sub_20EC34E04(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, std::__shared_weak_count *a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,char a29)
{
  if (a29 && a28 < 0)
    operator delete(__p);
  if (a20)
  {
    std::__shared_weak_count::__release_weak(a20);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_20EC34E24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::runtime_error a14, std::exception_ptr a15)
{
  std::__assoc_sub_state **v15;
  uint64_t v16;
  std::__assoc_sub_state *v17;
  std::exception_ptr v18;

  if (a2)
  {
    __cxa_begin_catch(a1);
    std::current_exception();
    __cxa_end_catch();
    v17 = *v15;
    if (v17)
    {
      std::exception_ptr::exception_ptr((std::exception_ptr *)(v16 - 192), &a15);
      v18.__ptr_ = (void *)(v16 - 192);
      std::__assoc_sub_state::set_exception(v17, v18);
      std::exception_ptr::~exception_ptr((std::exception_ptr *)(v16 - 192));
      std::exception_ptr::~exception_ptr(&a15);
      std::runtime_error::~runtime_error(&a14);
      if (*(char *)(v16 - 113) < 0)
        operator delete(*(void **)(v16 - 136));
      JUMPOUT(0x20EC34D14);
    }
    sub_20E96CE78(3u);
  }
  _Unwind_Resume(a1);
}

void sub_20EC34E98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::runtime_error a14, std::exception_ptr a15)
{
  uint64_t v15;

  std::exception_ptr::~exception_ptr(&a15);
  std::runtime_error::~runtime_error(&a14);
  if (*(char *)(v15 - 113) < 0)
  {
    operator delete(*(void **)(v15 - 136));
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void sub_20EC34EEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v14;
  uint64_t v15;
  va_list va;

  va_start(va, a11);
  v14 = *(_QWORD **)(v12 - 168);
  if (v14 == v11)
  {
    v15 = 4;
    v14 = (_QWORD *)(v12 - 192);
  }
  else
  {
    if (!v14)
    {
      sub_20EC370E4((uint64_t)va);
      _Unwind_Resume(a1);
    }
    v15 = 5;
  }
  (*(void (**)(void))(*v14 + 8 * v15))();
  sub_20EC370E4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20EC34F40()
{
  uint64_t v0;

  sub_20E987268(v0);
  JUMPOUT(0x20EC34F4CLL);
}

void sub_20EC34F6C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  va_list va;
  uint64_t v9;
  uint64_t v10;
  va_list va1;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  va_list va2;

  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  v7 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v10 = va_arg(va2, _QWORD);
  v12 = va_arg(va2, _QWORD);
  v13 = va_arg(va2, _QWORD);
  v14 = va_arg(va2, _QWORD);
  v15 = va_arg(va2, _QWORD);
  v5 = *(_QWORD **)(v3 - 112);
  if (v5 == v2)
  {
    v6 = 4;
    v5 = (_QWORD *)(v3 - 136);
  }
  else
  {
    if (!v5)
      goto LABEL_6;
    v6 = 5;
  }
  (*(void (**)(void))(*v5 + 8 * v6))();
LABEL_6:
  sub_20EA031A8((_QWORD *)(v3 - 192));
  sub_20E86665C((uint64_t)va2);
  sub_20E86665C((uint64_t)va);
  sub_20E86665C((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_20EC3500C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12)
{
  void *v12;

  operator delete(v12);
  sub_20E86665C((uint64_t)&a10);
  sub_20E86665C((uint64_t)&a12);
  _Unwind_Resume(a1);
}

void sub_20EC35030(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  sub_20E86665C((uint64_t)va);
  sub_20E86665C((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_20EC3504C(uint64_t a1)
{
  uint64_t *v1;

  v1 = *(uint64_t **)(a1 + 72);
  if (v1)
  {
    sub_210217048(*v1);
  }
  else
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 167, (uint64_t)"scheduler_ != nullptr", 21, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    sub_210217048(**(_QWORD **)(a1 + 72));
  }
}

_QWORD *sub_20EC350C0(_QWORD *a1, uint64_t a2)
{
  uint64_t **v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *result;
  uint64_t v12;
  _BYTE v13[24];
  _BYTE *v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v4 = (uint64_t **)a1[9];
  if (!v4)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 181, (uint64_t)"scheduler_", 10, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v4 = (uint64_t **)a1[9];
  }
  v6 = a1[4];
  v5 = a1[5];
  if (v5)
  {
    v7 = (unint64_t *)(v5 + 16);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  v9 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v10 = operator new(0x28uLL);
  *v10 = &off_24C9CE820;
  v10[1] = v6;
  v10[2] = v5;
  v10[3] = &off_24C9CCB08;
  v10[4] = v9;
  v14 = v10;
  sub_210216F3C(*v4, (uint64_t)v13);
  result = v14;
  if (v14 == v13)
  {
    v12 = 4;
    result = v13;
  }
  else
  {
    if (!v14)
      return result;
    v12 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v12))();
}

void sub_20EC351F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v13;

  if (a13 == v13)
  {
    (*(void (**)(void))(a10 + 32))();
    _Unwind_Resume(exception_object);
  }
  if (a13)
  {
    (*(void (**)(void))(*(_QWORD *)a13 + 40))();
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20EC35264(_QWORD *a1)
{
  uint64_t **v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *result;
  uint64_t v9;
  _BYTE v10[24];
  _BYTE *v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v2 = (uint64_t **)a1[9];
  if (!v2)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 202, (uint64_t)"scheduler_", 10, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v2 = (uint64_t **)a1[9];
  }
  v4 = a1[4];
  v3 = a1[5];
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = operator new(0x20uLL);
  *v7 = &off_24C9CE8A0;
  v7[1] = v4;
  v7[2] = v3;
  v11 = v7;
  sub_210216F3C(*v2, (uint64_t)v10);
  result = v11;
  if (v11 == v10)
  {
    v9 = 4;
    result = v10;
  }
  else
  {
    if (!v11)
      return result;
    v9 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v9))();
}

void sub_20EC35374(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v13;

  if (a13 == v13)
  {
    (*(void (**)(void))(a10 + 32))();
    _Unwind_Resume(exception_object);
  }
  if (a13)
  {
    (*(void (**)(void))(*(_QWORD *)a13 + 40))();
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_20EC353D8@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  unint64_t *v5;
  int v6;
  unint64_t v7;
  uint64_t **v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *p_shared_weak_owners;
  unint64_t v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v22;
  _BYTE v23[24];
  _BYTE *v24;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  v4 = operator new();
  *(_QWORD *)(v4 + 8) = 0;
  v5 = (unint64_t *)(v4 + 8);
  *(_QWORD *)(v4 + 24) = 850045863;
  *(_QWORD *)(v4 + 16) = 0;
  *(_OWORD *)(v4 + 32) = 0u;
  *(_OWORD *)(v4 + 48) = 0u;
  *(_OWORD *)(v4 + 64) = 0u;
  *(_QWORD *)(v4 + 80) = 0;
  *(_QWORD *)(v4 + 88) = 1018212795;
  *(_OWORD *)(v4 + 96) = 0u;
  *(_OWORD *)(v4 + 112) = 0u;
  *(_OWORD *)(v4 + 124) = 0u;
  *(_QWORD *)v4 = &off_24C9B80A0;
  v22 = v4;
  std::mutex::lock((std::mutex *)(v4 + 24));
  v6 = *(_DWORD *)(v4 + 136);
  if ((v6 & 2) != 0)
    sub_20E96CE78(1u);
  do
    v7 = __ldxr(v5);
  while (__stxr(v7 + 1, v5));
  *(_DWORD *)(v4 + 136) = v6 | 2;
  std::mutex::unlock((std::mutex *)(v4 + 24));
  v8 = (uint64_t **)a1[9];
  v9 = (std::__shared_weak_count *)a1[5];
  if (v9)
  {
    v10 = std::__shared_weak_count::lock(v9);
    v11 = v10;
    if (v10)
    {
      v12 = a1[4];
      p_shared_weak_owners = (unint64_t *)&v10->__shared_weak_owners_;
      do
        v14 = __ldxr(p_shared_weak_owners);
      while (__stxr(v14 + 1, p_shared_weak_owners));
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        v16 = __ldaxr(p_shared_owners);
      while (__stlxr(v16 - 1, p_shared_owners));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    else
    {
      v12 = 0;
    }
  }
  else
  {
    v12 = 0;
    v11 = 0;
  }
  v17 = operator new(0x20uLL);
  *v17 = &off_24C9CE920;
  v17[1] = v12;
  v17[2] = v11;
  v17[3] = &v22;
  v24 = v17;
  sub_210216F3C(*v8, (uint64_t)v23);
  v18 = v24;
  if (v24 == v23)
  {
    v19 = 4;
    v18 = v23;
    goto LABEL_17;
  }
  if (v24)
  {
    v19 = 5;
LABEL_17:
    (*(void (**)(_QWORD *))(*v18 + 8 * v19))(v18);
  }
  std::__assoc_sub_state::wait((std::__assoc_sub_state *)v4);
  sub_20EA04D14(v4, a2);
  do
    v20 = __ldaxr(v5);
  while (__stlxr(v20 - 1, v5));
  if (!v20)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
  return sub_20EA04DE8(&v22);
}

void sub_20EC355F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  unint64_t *v10;
  unint64_t v12;

  do
    v12 = __ldaxr(v10);
  while (__stlxr(v12 - 1, v10));
  if (!v12)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
    sub_20EA04DE8(&a9);
    _Unwind_Resume(a1);
  }
  sub_20EA04DE8(&a9);
  _Unwind_Resume(a1);
}

uint64_t *sub_20EC356B8@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  unint64_t *v5;
  int v6;
  unint64_t v7;
  uint64_t **v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *p_shared_weak_owners;
  unint64_t v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v22;
  _BYTE v23[24];
  _BYTE *v24;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  v4 = operator new();
  *(_QWORD *)(v4 + 8) = 0;
  v5 = (unint64_t *)(v4 + 8);
  *(_QWORD *)(v4 + 24) = 850045863;
  *(_QWORD *)(v4 + 16) = 0;
  *(_OWORD *)(v4 + 32) = 0u;
  *(_OWORD *)(v4 + 48) = 0u;
  *(_OWORD *)(v4 + 64) = 0u;
  *(_QWORD *)(v4 + 80) = 0;
  *(_QWORD *)(v4 + 88) = 1018212795;
  *(_OWORD *)(v4 + 96) = 0u;
  *(_OWORD *)(v4 + 112) = 0u;
  *(_OWORD *)(v4 + 124) = 0u;
  *(_QWORD *)v4 = &off_24C9B80A0;
  v22 = v4;
  std::mutex::lock((std::mutex *)(v4 + 24));
  v6 = *(_DWORD *)(v4 + 136);
  if ((v6 & 2) != 0)
    sub_20E96CE78(1u);
  do
    v7 = __ldxr(v5);
  while (__stxr(v7 + 1, v5));
  *(_DWORD *)(v4 + 136) = v6 | 2;
  std::mutex::unlock((std::mutex *)(v4 + 24));
  v8 = (uint64_t **)a1[9];
  v9 = (std::__shared_weak_count *)a1[5];
  if (v9)
  {
    v10 = std::__shared_weak_count::lock(v9);
    v11 = v10;
    if (v10)
    {
      v12 = a1[4];
      p_shared_weak_owners = (unint64_t *)&v10->__shared_weak_owners_;
      do
        v14 = __ldxr(p_shared_weak_owners);
      while (__stxr(v14 + 1, p_shared_weak_owners));
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        v16 = __ldaxr(p_shared_owners);
      while (__stlxr(v16 - 1, p_shared_owners));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    else
    {
      v12 = 0;
    }
  }
  else
  {
    v12 = 0;
    v11 = 0;
  }
  v17 = operator new(0x20uLL);
  *v17 = &off_24C9CE9A0;
  v17[1] = v12;
  v17[2] = v11;
  v17[3] = &v22;
  v24 = v17;
  sub_210216F3C(*v8, (uint64_t)v23);
  v18 = v24;
  if (v24 == v23)
  {
    v19 = 4;
    v18 = v23;
    goto LABEL_17;
  }
  if (v24)
  {
    v19 = 5;
LABEL_17:
    (*(void (**)(_QWORD *))(*v18 + 8 * v19))(v18);
  }
  std::__assoc_sub_state::wait((std::__assoc_sub_state *)v4);
  sub_20EA04D14(v4, a2);
  do
    v20 = __ldaxr(v5);
  while (__stlxr(v20 - 1, v5));
  if (!v20)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
  return sub_20EA04DE8(&v22);
}

void sub_20EC358D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  unint64_t *v10;
  unint64_t v12;

  do
    v12 = __ldaxr(v10);
  while (__stlxr(v12 - 1, v10));
  if (!v12)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
    sub_20EA04DE8(&a9);
    _Unwind_Resume(a1);
  }
  sub_20EA04DE8(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20EC35998(uint64_t a1)
{
  return sub_20EC35B08(a1 - 16);
}

void sub_20EC359A0(uint64_t a1)
{
  sub_20EC35B08(a1 - 16);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20EC359C8(uint64_t a1, uint64_t a2)
{
  return sub_20EC350C0((_QWORD *)(a1 - 16), a2);
}

uint64_t *sub_20EC359D0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_20EC353D8((_QWORD *)(a1 - 16), a2);
}

uint64_t *sub_20EC359D8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_20EC356B8((_QWORD *)(a1 - 16), a2);
}

uint64_t sub_20EC359E0(uint64_t a1)
{
  return a1 - 16;
}

uint64_t sub_20EC359E8(uint64_t a1)
{
  return sub_20EC35B08(a1 - 24);
}

void sub_20EC359F0(uint64_t a1)
{
  sub_20EC35B08(a1 - 24);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20EC35A18(uint64_t a1)
{
  return sub_20EC35264((_QWORD *)(a1 - 24));
}

uint64_t sub_20EC35A20(uint64_t a1)
{
  return a1 - 24;
}

uint64_t sub_20EC35A28(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_20EC35A90(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20EC35AF8(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8));
}

uint64_t sub_20EC35B08(uint64_t a1)
{
  char **v2;
  char *v3;
  char *v4;
  char *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;

  *(_QWORD *)a1 = &off_24C9CE380;
  *(_QWORD *)(a1 + 16) = &unk_24C9CE3F8;
  *(_QWORD *)(a1 + 24) = &unk_24C9CE438;
  v2 = *(char ***)(a1 + 144);
  *(_QWORD *)(a1 + 144) = 0;
  if (v2)
  {
    std::mutex::~mutex((std::mutex *)(v2 + 7));
    if (*((_BYTE *)v2 + 48))
    {
      v3 = *v2;
      if (*v2)
      {
        v4 = v2[1];
        v5 = *v2;
        if (v4 != v3)
        {
          do
          {
            v6 = (std::__shared_weak_count *)*((_QWORD *)v4 - 1);
            if (v6)
            {
              p_shared_owners = (unint64_t *)&v6->__shared_owners_;
              do
                v8 = __ldaxr(p_shared_owners);
              while (__stlxr(v8 - 1, p_shared_owners));
              if (!v8)
              {
                ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
                std::__shared_weak_count::__release_weak(v6);
              }
            }
            v4 -= 16;
          }
          while (v4 != v3);
          v5 = *v2;
        }
        v2[1] = v3;
        operator delete(v5);
      }
    }
    MEMORY[0x212BC6398](v2, 0x1022C400958DFA3);
  }
  if (*(_QWORD *)(a1 + 136))
  {
    v10 = *(_QWORD *)(a1 + 120);
    v9 = *(uint64_t **)(a1 + 128);
    v11 = *v9;
    *(_QWORD *)(v11 + 8) = *(_QWORD *)(v10 + 8);
    **(_QWORD **)(v10 + 8) = v11;
    *(_QWORD *)(a1 + 136) = 0;
    if (v9 != (uint64_t *)(a1 + 120))
    {
      do
      {
        v12 = (uint64_t *)v9[1];
        operator delete(v9);
        v9 = v12;
      }
      while (v12 != (uint64_t *)(a1 + 120));
    }
  }
  if (*(_QWORD *)(a1 + 112))
  {
    v13 = *(_QWORD *)(a1 + 96);
    v14 = *(uint64_t **)(a1 + 104);
    v15 = *v14;
    *(_QWORD *)(v15 + 8) = *(_QWORD *)(v13 + 8);
    **(_QWORD **)(v13 + 8) = v15;
    *(_QWORD *)(a1 + 112) = 0;
    if (v14 != (uint64_t *)(a1 + 96))
    {
      do
      {
        v16 = (uint64_t *)v14[1];
        (*(void (**)(uint64_t *))v14[2])(v14 + 2);
        operator delete(v14);
        v14 = v16;
      }
      while (v16 != (uint64_t *)(a1 + 96));
    }
  }
  v17 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 88) = 0;
  if (v17)
    (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  v18 = *(std::__shared_weak_count **)(a1 + 80);
  if (!v18)
    goto LABEL_27;
  v19 = (unint64_t *)&v18->__shared_owners_;
  do
    v20 = __ldaxr(v19);
  while (__stlxr(v20 - 1, v19));
  if (v20)
  {
LABEL_27:
    if ((*(char *)(a1 + 71) & 0x80000000) == 0)
      goto LABEL_29;
    goto LABEL_28;
  }
  ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
  std::__shared_weak_count::__release_weak(v18);
  if (*(char *)(a1 + 71) < 0)
LABEL_28:
    operator delete(*(void **)(a1 + 48));
LABEL_29:
  v21 = *(std::__shared_weak_count **)(a1 + 40);
  if (v21)
    std::__shared_weak_count::__release_weak(v21);
  return a1;
}

uint64_t sub_20EC35D08(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;

  if (*(_BYTE *)(a1 + 312))
  {
    v2 = *(std::__shared_weak_count **)(a1 + 304);
    if (v2)
    {
      p_shared_owners = (unint64_t *)&v2->__shared_owners_;
      do
        v4 = __ldaxr(p_shared_owners);
      while (__stlxr(v4 - 1, p_shared_owners));
      if (!v4)
      {
        ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
        std::__shared_weak_count::__release_weak(v2);
      }
    }
  }
  if (*(_BYTE *)(a1 + 56) && *(char *)(a1 + 55) < 0)
  {
    operator delete(*(void **)(a1 + 32));
    v5 = *(std::__shared_weak_count **)(a1 + 8);
    if (!v5)
      return a1;
    goto LABEL_10;
  }
  v5 = *(std::__shared_weak_count **)(a1 + 8);
  if (v5)
LABEL_10:
    std::__shared_weak_count::__release_weak(v5);
  return a1;
}

uint64_t sub_20EC35D98(uint64_t a1, __int128 *a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  __int128 v20;
  __int128 v21;

  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = &off_24C9CE580;
  v4 = *a2;
  *(_BYTE *)(a1 + 40) = 0;
  *(_OWORD *)(a1 + 24) = v4;
  *(_BYTE *)(a1 + 64) = 0;
  if (*((_BYTE *)a2 + 40))
  {
    if (*((char *)a2 + 39) < 0)
    {
      sub_20E860C04((_BYTE *)(a1 + 40), *((void **)a2 + 2), *((_QWORD *)a2 + 3));
    }
    else
    {
      v5 = a2[1];
      *(_QWORD *)(a1 + 56) = *((_QWORD *)a2 + 4);
      *(_OWORD *)(a1 + 40) = v5;
    }
    *(_BYTE *)(a1 + 64) = 1;
  }
  v6 = a2[3];
  v7 = a2[4];
  *(_OWORD *)(a1 + 104) = a2[5];
  *(_OWORD *)(a1 + 88) = v7;
  *(_OWORD *)(a1 + 72) = v6;
  v8 = a2[6];
  v9 = a2[7];
  v10 = a2[8];
  *(_OWORD *)(a1 + 168) = a2[9];
  *(_OWORD *)(a1 + 152) = v10;
  *(_OWORD *)(a1 + 136) = v9;
  *(_OWORD *)(a1 + 120) = v8;
  v11 = a2[10];
  v12 = a2[11];
  v13 = a2[12];
  *(_OWORD *)(a1 + 232) = a2[13];
  *(_OWORD *)(a1 + 216) = v13;
  *(_OWORD *)(a1 + 200) = v12;
  *(_OWORD *)(a1 + 184) = v11;
  v14 = a2[14];
  v15 = a2[15];
  v16 = a2[16];
  *(_BYTE *)(a1 + 296) = *((_BYTE *)a2 + 272);
  *(_OWORD *)(a1 + 264) = v15;
  *(_OWORD *)(a1 + 280) = v16;
  *(_OWORD *)(a1 + 248) = v14;
  *(_BYTE *)(a1 + 304) = 0;
  *(_BYTE *)(a1 + 320) = 0;
  if (*((_BYTE *)a2 + 296))
  {
    v17 = *((_QWORD *)a2 + 36);
    *(_QWORD *)(a1 + 304) = *((_QWORD *)a2 + 35);
    *(_QWORD *)(a1 + 312) = v17;
    if (v17)
    {
      v18 = (unint64_t *)(v17 + 8);
      do
        v19 = __ldxr(v18);
      while (__stxr(v19 + 1, v18));
    }
    *(_BYTE *)(a1 + 320) = 1;
  }
  v20 = a2[19];
  *(_QWORD *)(a1 + 344) = *((_QWORD *)a2 + 40);
  *(_OWORD *)(a1 + 328) = v20;
  v21 = *(__int128 *)((char *)a2 + 328);
  *(_WORD *)(a1 + 368) = *((_WORD *)a2 + 172);
  *(_OWORD *)(a1 + 352) = v21;
  return a1;
}

void sub_20EC35EE4(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;

  if (*(_BYTE *)(v1 + 64))
  {
    if (*(char *)(v1 + 63) < 0)
      operator delete(*v2);
  }
  std::__shared_weak_count::~__shared_weak_count((std::__shared_weak_count *)v1);
  _Unwind_Resume(a1);
}

void sub_20EC35F10(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9CE580;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_20EC35F20(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9CE580;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC6398);
}

void sub_20EC35F50(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  if (!*(_BYTE *)(a1 + 320))
    goto LABEL_6;
  v2 = *(std::__shared_weak_count **)(a1 + 312);
  if (!v2)
    goto LABEL_6;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    if (!*(_BYTE *)(a1 + 64))
      return;
  }
  else
  {
LABEL_6:
    if (!*(_BYTE *)(a1 + 64))
      return;
  }
  if (*(char *)(a1 + 63) < 0)
    operator delete(*(void **)(a1 + 40));
}

_QWORD *sub_20EC35FDC(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  *a1 = &off_24C9CE5D0;
  v2 = (std::__shared_weak_count *)a1[4];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = (std::__shared_weak_count *)a1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  return a1;
}

void sub_20EC36020(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  *a1 = &off_24C9CE5D0;
  v2 = (std::__shared_weak_count *)a1[4];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = (std::__shared_weak_count *)a1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20EC36074(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;

  result = operator new(0x30uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = &off_24C9CE5D0;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = a1[4];
  result[3] = a1[3];
  result[4] = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 16);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  return result;
}

_QWORD *sub_20EC360E4(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;

  v3 = result[1];
  v2 = result[2];
  *a2 = &off_24C9CE5D0;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  v6 = result[4];
  a2[3] = result[3];
  a2[4] = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 16);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  return result;
}

void sub_20EC36134(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  v2 = *(std::__shared_weak_count **)(a1 + 32);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
}

void sub_20EC36170(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  v2 = (std::__shared_weak_count *)__p[4];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = (std::__shared_weak_count *)__p[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  operator delete(__p);
}

void sub_20EC361A8(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  char v21;

  v2 = (std::__shared_weak_count *)a1[4];
  if (!v2)
  {
    v3 = 0;
    v5 = 0;
    v4 = (std::__shared_weak_count *)a1[2];
    if (v4)
      goto LABEL_6;
    goto LABEL_11;
  }
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
  {
    v5 = 0;
    v4 = (std::__shared_weak_count *)a1[2];
    if (v4)
      goto LABEL_6;
LABEL_11:
    v7 = 0;
    v8 = 0;
    goto LABEL_12;
  }
  v4 = (std::__shared_weak_count *)a1[2];
  v5 = a1[3];
  if (!v4)
    goto LABEL_11;
LABEL_6:
  v6 = std::__shared_weak_count::lock(v4);
  v7 = v6;
  if (v6)
  {
    v8 = a1[1];
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
LABEL_12:
    if (!v3)
      goto LABEL_15;
    goto LABEL_13;
  }
  v8 = 0;
  if (!v3)
    goto LABEL_15;
LABEL_13:
  v11 = (unint64_t *)&v3->__shared_owners_;
  do
    v12 = __ldxr(v11);
  while (__stxr(v12 + 1, v11));
LABEL_15:
  if (v8)
  {
    if (v5)
    {
      LOBYTE(v20) = 0;
      v21 = 0;
      sub_20EC364CC((uint64_t *)(v8 + 88), v5, &v20);
      if (v21)
        sub_20EC36A04(&v20);
    }
  }
  if (v3)
  {
    v13 = (unint64_t *)&v3->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  if (v7)
  {
    v15 = (unint64_t *)&v7->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
    do
      v17 = __ldaxr(v15);
    while (__stlxr(v17 - 1, v15));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  if (v3)
  {
    v18 = (unint64_t *)&v3->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_20EC36370(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;

  if (a10)
    sub_20EC36A04(&a9);
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  if (v11)
  {
    v15 = (unint64_t *)&v11->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
    do
      v17 = __ldaxr(v15);
    while (__stlxr(v17 - 1, v15));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (v10)
  {
    v18 = (unint64_t *)&v10->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20EC36454(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3vio22user_anchor_node_group17AnchorAddedResultES6_vS"
                     "6_Lb0EE25EnqueueMessageAndDispatchIZNKS7_4SendERKS6_EUlT_T0_E_EEvSA_SB_EUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3vio22user_anchor_node_group17AnchorAddedR"
                                "esultES6_vS6_Lb0EE25EnqueueMessageAndDispatchIZNKS7_4SendERKS6_EUlT_T0_E_EEvSA_SB_EUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3vio22user_anchor_node_group17AnchorAddedResultES6_vS6_Lb0EE25EnqueueMessageAndDispatchIZNKS7_4SendERKS6_EUlT_T0_E_EEvSA_SB_EUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3vio22user_anchor_node_group17AnchorAddedResultES6_vS6_Lb0EE25EnqueueMessageAndDispatchIZNKS7_4SendERKS6_EUlT_T0_E_EEvSA_SB_EUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20EC364C0()
{
  return &unk_24C9CE630;
}

void sub_20EC364CC(uint64_t *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  unsigned __int8 v7;
  uint64_t v8;
  uint64_t i;
  unsigned __int8 v10;
  _QWORD *v11;
  _QWORD *j;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  char v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  std::__shared_weak_count *v26;
  unint64_t *p_shared_owners;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  std::exception_ptr v32;
  __int128 v33;
  __int128 __p;
  uint64_t v35;
  char v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  char v51;
  uint64_t v52;
  std::__shared_weak_count *v53;
  char v54;
  __int128 v55;
  uint64_t v56;
  __int128 v57;
  __int16 v58;
  uint64_t v59;

  v59 = *MEMORY[0x24BDAC8D0];
  v6 = *a1;
  if (!v6)
  {
    sub_21023D70C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/ProcessorInputMessageHandlingStrategy.h", 228, (uint64_t)"callable_", 9, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0);
    v7 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
    if ((v7 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
    {
      __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
      __cxa_guard_release(&qword_254A6DE78);
    }
    if (!byte_254A6DE68 || byte_254A6DE70)
    {
      v8 = qword_254A6DE40;
      for (i = qword_254A6DE48; v8 != i; v8 += 16)
        (*(void (**)(_QWORD, const char *, uint64_t, const char *, _QWORD))v8)(*(_QWORD *)(v8 + 8), "callable_", 9, "", 0);
    }
    v10 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
    if ((v10 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
    {
      __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
      __cxa_guard_release(&qword_254A6DE78);
    }
    if (!byte_254A6DE68)
      abort();
    qword_254A6DE58(unk_254A6DE60, "callable_", 9, "", 0);
    v6 = *a1;
  }
  (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v6 + 16))(&v33, v6, a2);
  v11 = a1 + 1;
  for (j = (_QWORD *)a1[2]; j != v11; j = (_QWORD *)j[1])
    (*(void (**)(_QWORD *, __int128 *))(j[2] + 16))(j + 2, &v33);
  if (*((_BYTE *)a3 + 8))
  {
    v13 = *a3;
    if (!*a3)
      sub_20E96CE78(3u);
    std::mutex::lock((std::mutex *)(v13 + 24));
    if ((*(_BYTE *)(v13 + 136) & 1) != 0
      || (v32.__ptr_ = 0, v14 = *(_QWORD *)(v13 + 16), std::exception_ptr::~exception_ptr(&v32), v14))
    {
      sub_20E96CE78(2u);
    }
    v15 = v33;
    *(_BYTE *)(v13 + 160) = 0;
    *(_OWORD *)(v13 + 144) = v15;
    *(_BYTE *)(v13 + 184) = 0;
    if (v36)
    {
      if (SHIBYTE(v35) < 0)
      {
        sub_20E860C04((_BYTE *)(v13 + 160), (void *)__p, *((unint64_t *)&__p + 1));
      }
      else
      {
        *(_OWORD *)(v13 + 160) = __p;
        *(_QWORD *)(v13 + 176) = v35;
      }
      *(_BYTE *)(v13 + 184) = 1;
    }
    v16 = v48;
    v17 = v50;
    *(_OWORD *)(v13 + 384) = v49;
    *(_OWORD *)(v13 + 400) = v17;
    v18 = v51;
    v19 = v44;
    v20 = v46;
    v21 = v47;
    *(_OWORD *)(v13 + 320) = v45;
    *(_OWORD *)(v13 + 336) = v20;
    *(_OWORD *)(v13 + 352) = v21;
    *(_OWORD *)(v13 + 368) = v16;
    v22 = v40;
    v23 = v42;
    v24 = v43;
    *(_OWORD *)(v13 + 256) = v41;
    *(_OWORD *)(v13 + 272) = v23;
    *(_BYTE *)(v13 + 416) = v18;
    *(_OWORD *)(v13 + 288) = v24;
    *(_OWORD *)(v13 + 304) = v19;
    v25 = v38;
    *(_OWORD *)(v13 + 192) = v37;
    *(_OWORD *)(v13 + 208) = v25;
    *(_OWORD *)(v13 + 224) = v39;
    *(_OWORD *)(v13 + 240) = v22;
    *(_BYTE *)(v13 + 424) = 0;
    *(_BYTE *)(v13 + 440) = 0;
    if (v54)
    {
      v26 = v53;
      *(_QWORD *)(v13 + 424) = v52;
      *(_QWORD *)(v13 + 432) = v26;
      if (v26)
      {
        p_shared_owners = (unint64_t *)&v26->__shared_owners_;
        do
          v28 = __ldxr(p_shared_owners);
        while (__stxr(v28 + 1, p_shared_owners));
      }
      *(_BYTE *)(v13 + 440) = 1;
    }
    *(_OWORD *)(v13 + 448) = v55;
    *(_QWORD *)(v13 + 464) = v56;
    *(_WORD *)(v13 + 488) = v58;
    *(_OWORD *)(v13 + 472) = v57;
    *(_DWORD *)(v13 + 136) |= 5u;
    std::condition_variable::notify_all((std::condition_variable *)(v13 + 88));
    std::mutex::unlock((std::mutex *)(v13 + 24));
  }
  if (v54)
  {
    v29 = v53;
    if (v53)
    {
      v30 = (unint64_t *)&v53->__shared_owners_;
      do
        v31 = __ldaxr(v30);
      while (__stlxr(v31 - 1, v30));
      if (!v31)
      {
        ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
        std::__shared_weak_count::__release_weak(v29);
      }
    }
  }
  if (v36)
  {
    if (SHIBYTE(v35) < 0)
      operator delete((void *)__p);
  }
}

void sub_20EC368B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t *a11, uint64_t a12, int a13, __int16 a14, char a15, unsigned __int8 a16, char a17)
{
  std::mutex *v17;
  void **v18;
  uint64_t v19;
  uint64_t *v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;

  if (*(_BYTE *)(v19 + 184) && *(char *)(v19 + 183) < 0)
    operator delete(*v18);
  std::mutex::unlock(v17);
  sub_20E987268((uint64_t)&a17);
  if (a2 == 1)
  {
    v22 = (uint64_t *)__cxa_begin_catch(a1);
    v23 = *v22;
    a10 = *(_QWORD *)(*(_QWORD *)(*v22 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL;
    a9 = (*(uint64_t (**)(void))(v23 + 16))();
    sub_20E9B0CC4("Caught unexpected exception of type: ", (const char *)&a10, "\n", "message: ", (const char *)&a9, "\n");
    if ((a16 & 0x80u) == 0)
      v24 = (uint64_t *)&a11;
    else
      v24 = a11;
    if ((a16 & 0x80u) == 0)
      v25 = a16;
    else
      v25 = a12;
    sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/ProcessorInputMessageHandlingStrategy.h", 140, (uint64_t)"", 0, (uint64_t)v24, v25, (void (*)(void **))sub_21023DDB0);
    abort();
  }
  _Unwind_Resume(a1);
}

void sub_20EC369C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_20EC369EC(void *a1, int a2)
{
  if (!a2)
    JUMPOUT(0x20EC369F4);
  sub_20E860DA4(a1);
}

uint64_t *sub_20EC36A04(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  const std::error_category *v7;
  std::logic_error *exception;
  std::logic_error *v9;
  std::logic_error v10;
  std::logic_error v11;
  std::exception_ptr v12;

  v2 = *a1;
  if (!v2)
    return a1;
  if ((*(_BYTE *)(v2 + 136) & 1) == 0)
  {
    v12.__ptr_ = 0;
    v3 = *(_QWORD *)(v2 + 16);
    std::exception_ptr::~exception_ptr(&v12);
    v2 = *a1;
    if (!v3 && *(uint64_t *)(v2 + 8) >= 1)
    {
      v7 = std::future_category();
      MEMORY[0x212BC5AF8](&v10, 4, v7);
      exception = (std::logic_error *)__cxa_allocate_exception(0x20uLL);
      v9 = std::logic_error::logic_error(exception, &v10);
      v9->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB810] + 16);
      v9[1] = v11;
      __cxa_throw(v9, MEMORY[0x24BEDB6E0], (void (*)(void *))MEMORY[0x24BEDAD80]);
    }
  }
  v4 = (unint64_t *)(v2 + 8);
  do
    v5 = __ldaxr(v4);
  while (__stlxr(v5 - 1, v4));
  if (v5)
    return a1;
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 16))(v2);
  return a1;
}

void sub_20EC36AF0(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__assoc_sub_state *a10, std::logic_error a11)
{
  uint64_t v11;
  std::exception_ptr v12;

  __cxa_begin_catch(a1);
  std::current_exception();
  __cxa_end_catch();
  v12.__ptr_ = (void *)(v11 - 32);
  std::__assoc_sub_state::set_exception(a10, v12);
  std::exception_ptr::~exception_ptr((std::exception_ptr *)(v11 - 32));
  std::logic_error::~logic_error(&a11);
  JUMPOUT(0x20EC36A4CLL);
}

uint64_t sub_20EC36B2C(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;

  *(_QWORD *)a1 = off_24C9CE650;
  if (*(_BYTE *)(a1 + 320))
  {
    v2 = *(std::__shared_weak_count **)(a1 + 312);
    if (v2)
    {
      p_shared_owners = (unint64_t *)&v2->__shared_owners_;
      do
        v4 = __ldaxr(p_shared_owners);
      while (__stlxr(v4 - 1, p_shared_owners));
      if (!v4)
      {
        ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
        std::__shared_weak_count::__release_weak(v2);
      }
    }
  }
  if (*(_BYTE *)(a1 + 64) && *(char *)(a1 + 63) < 0)
  {
    operator delete(*(void **)(a1 + 40));
    v5 = *(std::__shared_weak_count **)(a1 + 16);
    if (!v5)
      return a1;
    goto LABEL_10;
  }
  v5 = *(std::__shared_weak_count **)(a1 + 16);
  if (v5)
LABEL_10:
    std::__shared_weak_count::__release_weak(v5);
  return a1;
}

void sub_20EC36BC8(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;

  *(_QWORD *)a1 = off_24C9CE650;
  if (*(_BYTE *)(a1 + 320))
  {
    v2 = *(std::__shared_weak_count **)(a1 + 312);
    if (v2)
    {
      p_shared_owners = (unint64_t *)&v2->__shared_owners_;
      do
        v4 = __ldaxr(p_shared_owners);
      while (__stlxr(v4 - 1, p_shared_owners));
      if (!v4)
      {
        ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
        std::__shared_weak_count::__release_weak(v2);
      }
    }
  }
  if (*(_BYTE *)(a1 + 64) && *(char *)(a1 + 63) < 0)
  {
    operator delete(*(void **)(a1 + 40));
    v5 = *(std::__shared_weak_count **)(a1 + 16);
    if (!v5)
      goto LABEL_13;
  }
  else
  {
    v5 = *(std::__shared_weak_count **)(a1 + 16);
    if (!v5)
      goto LABEL_13;
  }
  std::__shared_weak_count::__release_weak(v5);
LABEL_13:
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20EC36C74(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v1 = a1 + 8;
  v2 = operator new(0x178uLL);
  *v2 = off_24C9CE650;
  sub_20EC36F70((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_20EC36CB4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20EC36CC8(uint64_t a1, _QWORD *a2)
{
  *a2 = off_24C9CE650;
  return sub_20EC36F70((uint64_t)(a2 + 1), a1 + 8);
}

void sub_20EC36CE4(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;

  if (*(_BYTE *)(a1 + 320))
  {
    v2 = *(std::__shared_weak_count **)(a1 + 312);
    if (v2)
    {
      p_shared_owners = (unint64_t *)&v2->__shared_owners_;
      do
        v4 = __ldaxr(p_shared_owners);
      while (__stlxr(v4 - 1, p_shared_owners));
      if (!v4)
      {
        ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
        std::__shared_weak_count::__release_weak(v2);
      }
    }
  }
  if (!*(_BYTE *)(a1 + 64) || (*(char *)(a1 + 63) & 0x80000000) == 0)
  {
    v5 = *(std::__shared_weak_count **)(a1 + 16);
    if (!v5)
      return;
    goto LABEL_10;
  }
  operator delete(*(void **)(a1 + 40));
  v5 = *(std::__shared_weak_count **)(a1 + 16);
  if (v5)
LABEL_10:
    std::__shared_weak_count::__release_weak(v5);
}

void sub_20EC36D74(char *__p)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;

  if (__p[320])
  {
    v2 = (std::__shared_weak_count *)*((_QWORD *)__p + 39);
    if (v2)
    {
      p_shared_owners = (unint64_t *)&v2->__shared_owners_;
      do
        v4 = __ldaxr(p_shared_owners);
      while (__stlxr(v4 - 1, p_shared_owners));
      if (!v4)
      {
        ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
        std::__shared_weak_count::__release_weak(v2);
      }
    }
  }
  if (__p[64] && __p[63] < 0)
  {
    operator delete(*((void **)__p + 5));
    v5 = (std::__shared_weak_count *)*((_QWORD *)__p + 2);
    if (!v5)
      goto LABEL_11;
    goto LABEL_10;
  }
  v5 = (std::__shared_weak_count *)*((_QWORD *)__p + 2);
  if (v5)
LABEL_10:
    std::__shared_weak_count::__release_weak(v5);
LABEL_11:
  operator delete(__p);
}

void sub_20EC36E04(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v8;
  char v9;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 8);
      if (v5)
      {
        LOBYTE(v8) = 0;
        v9 = 0;
        sub_20EC364CC((uint64_t *)(v5 + 88), a1 + 24, &v8);
        if (v9)
          sub_20EC36A04(&v8);
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_20EC36EAC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v13;

  if (a10)
    sub_20EC36A04(&a9);
  p_shared_owners = (unint64_t *)&v10->__shared_owners_;
  do
    v13 = __ldaxr(p_shared_owners);
  while (__stlxr(v13 - 1, p_shared_owners));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20EC36EF8(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3vio22user_anchor_node_group17AnchorAddedResultES6_vS"
                     "6_Lb0EE4SendERKS6_EUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3vio22user_anchor_node_group17AnchorAddedR"
                                "esultES6_vS6_Lb0EE4SendERKS6_EUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3vio22user_anchor_node_group17AnchorAddedResultES6_vS6_Lb0EE4SendERKS6_EUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3vio22user_anchor_node_group17AnchorAddedResultES6_vS6_Lb0EE4SendERKS6_EUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20EC36F64()
{
  return &unk_24C9CE6B0;
}

uint64_t sub_20EC36F70(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  __int128 v23;
  __int128 v24;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = *(_OWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 32) = 0;
  *(_OWORD *)(a1 + 16) = v7;
  *(_BYTE *)(a1 + 56) = 0;
  if (*(_BYTE *)(a2 + 56))
  {
    if (*(char *)(a2 + 55) < 0)
    {
      sub_20E860C04((_BYTE *)(a1 + 32), *(void **)(a2 + 32), *(_QWORD *)(a2 + 40));
    }
    else
    {
      v8 = *(_OWORD *)(a2 + 32);
      *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
      *(_OWORD *)(a1 + 32) = v8;
    }
    *(_BYTE *)(a1 + 56) = 1;
  }
  v9 = *(_OWORD *)(a2 + 64);
  v10 = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 96) = v10;
  *(_OWORD *)(a1 + 64) = v9;
  v11 = *(_OWORD *)(a2 + 112);
  v12 = *(_OWORD *)(a2 + 128);
  v13 = *(_OWORD *)(a2 + 160);
  *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 160) = v13;
  *(_OWORD *)(a1 + 112) = v11;
  *(_OWORD *)(a1 + 128) = v12;
  v14 = *(_OWORD *)(a2 + 176);
  v15 = *(_OWORD *)(a2 + 192);
  v16 = *(_OWORD *)(a2 + 224);
  *(_OWORD *)(a1 + 208) = *(_OWORD *)(a2 + 208);
  *(_OWORD *)(a1 + 224) = v16;
  *(_OWORD *)(a1 + 176) = v14;
  *(_OWORD *)(a1 + 192) = v15;
  v17 = *(_OWORD *)(a2 + 240);
  v18 = *(_OWORD *)(a2 + 256);
  v19 = *(_OWORD *)(a2 + 272);
  *(_BYTE *)(a1 + 288) = *(_BYTE *)(a2 + 288);
  *(_OWORD *)(a1 + 256) = v18;
  *(_OWORD *)(a1 + 272) = v19;
  *(_OWORD *)(a1 + 240) = v17;
  *(_BYTE *)(a1 + 296) = 0;
  *(_BYTE *)(a1 + 312) = 0;
  if (*(_BYTE *)(a2 + 312))
  {
    v20 = *(_QWORD *)(a2 + 304);
    *(_QWORD *)(a1 + 296) = *(_QWORD *)(a2 + 296);
    *(_QWORD *)(a1 + 304) = v20;
    if (v20)
    {
      v21 = (unint64_t *)(v20 + 8);
      do
        v22 = __ldxr(v21);
      while (__stxr(v22 + 1, v21));
    }
    *(_BYTE *)(a1 + 312) = 1;
  }
  v23 = *(_OWORD *)(a2 + 320);
  *(_QWORD *)(a1 + 336) = *(_QWORD *)(a2 + 336);
  *(_OWORD *)(a1 + 320) = v23;
  v24 = *(_OWORD *)(a2 + 344);
  *(_WORD *)(a1 + 360) = *(_WORD *)(a2 + 360);
  *(_OWORD *)(a1 + 344) = v24;
  return a1;
}

void sub_20EC370B4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  std::__shared_weak_count *v4;

  if (*(_BYTE *)(v1 + 56) && *(char *)(v1 + 55) < 0)
    operator delete(*v2);
  v4 = *(std::__shared_weak_count **)(v1 + 8);
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20EC370E4(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;

  v2 = *(std::__shared_weak_count **)(a1 + 376);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    if (!*(_BYTE *)(a1 + 312))
      goto LABEL_12;
  }
  else
  {
LABEL_5:
    if (!*(_BYTE *)(a1 + 312))
      goto LABEL_12;
  }
  v5 = *(std::__shared_weak_count **)(a1 + 304);
  if (v5)
  {
    v6 = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
LABEL_12:
  if (*(_BYTE *)(a1 + 56) && *(char *)(a1 + 55) < 0)
  {
    operator delete(*(void **)(a1 + 32));
    v8 = *(std::__shared_weak_count **)(a1 + 8);
    if (!v8)
      return a1;
    goto LABEL_15;
  }
  v8 = *(std::__shared_weak_count **)(a1 + 8);
  if (v8)
LABEL_15:
    std::__shared_weak_count::__release_weak(v8);
  return a1;
}

void sub_20EC371B8(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9CE6D0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_20EC371C8(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9CE6D0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC6398);
}

uint64_t *sub_20EC371F8(uint64_t a1)
{
  return sub_20EC36A04((uint64_t *)(a1 + 24));
}

_QWORD *sub_20EC37204(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;

  *a1 = &off_24C9CE720;
  v2 = (std::__shared_weak_count *)a1[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
      goto LABEL_7;
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  v5 = (std::__shared_weak_count *)a1[4];
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
LABEL_7:
  v6 = (std::__shared_weak_count *)a1[2];
  if (v6)
    std::__shared_weak_count::__release_weak(v6);
  return a1;
}

void sub_20EC3728C(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;

  *a1 = &off_24C9CE720;
  v2 = (std::__shared_weak_count *)a1[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
    {
LABEL_7:
      v6 = (std::__shared_weak_count *)a1[2];
      if (v6)
        std::__shared_weak_count::__release_weak(v6);
      JUMPOUT(0x212BC6398);
    }
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
      goto LABEL_7;
  }
  std::__shared_weak_count::__release_weak(v5);
  goto LABEL_7;
}

_QWORD *sub_20EC37324(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;

  result = operator new(0x38uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = &off_24C9CE720;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = a1[4];
  result[3] = a1[3];
  result[4] = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 16);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  v10 = a1[6];
  result[5] = a1[5];
  result[6] = v10;
  if (v10)
  {
    v11 = (unint64_t *)(v10 + 8);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  return result;
}

_QWORD *sub_20EC373B4(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;

  v3 = result[1];
  v2 = result[2];
  *a2 = &off_24C9CE720;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  v6 = result[4];
  a2[3] = result[3];
  a2[4] = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 16);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  v9 = result[6];
  a2[5] = result[5];
  a2[6] = v9;
  if (v9)
  {
    v10 = (unint64_t *)(v9 + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  return result;
}

void sub_20EC37424(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;

  v2 = (std::__shared_weak_count *)a1[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
      goto LABEL_7;
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  v5 = (std::__shared_weak_count *)a1[4];
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
LABEL_7:
  v6 = (std::__shared_weak_count *)a1[2];
  if (v6)
    std::__shared_weak_count::__release_weak(v6);
}

void sub_20EC374A4(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;

  v2 = (std::__shared_weak_count *)__p[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)__p[4];
    if (!v5)
      goto LABEL_7;
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  v5 = (std::__shared_weak_count *)__p[4];
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
LABEL_7:
  v6 = (std::__shared_weak_count *)__p[2];
  if (v6)
    std::__shared_weak_count::__release_weak(v6);
  operator delete(__p);
}

void sub_20EC37520(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t *v13;
  std::runtime_error_vtbl **v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  std::runtime_error *exception;
  std::runtime_error *v23;
  std::runtime_error *v24;
  std::runtime_error *v25;
  std::runtime_error v26;
  std::runtime_error v27;

  v2 = (std::__shared_weak_count *)a1[4];
  if (!v2)
  {
    v3 = 0;
    v5 = 0;
    v4 = (std::__shared_weak_count *)a1[2];
    if (v4)
      goto LABEL_6;
LABEL_11:
    v7 = 0;
    v8 = 0;
    goto LABEL_12;
  }
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
  {
    v5 = 0;
    v4 = (std::__shared_weak_count *)a1[2];
    if (v4)
      goto LABEL_6;
    goto LABEL_11;
  }
  v4 = (std::__shared_weak_count *)a1[2];
  v5 = a1[3];
  if (!v4)
    goto LABEL_11;
LABEL_6:
  v6 = std::__shared_weak_count::lock(v4);
  v7 = v6;
  if (!v6)
  {
    v8 = 0;
    if (!v3)
      goto LABEL_15;
    goto LABEL_13;
  }
  v8 = a1[1];
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  do
    v10 = __ldxr(p_shared_owners);
  while (__stxr(v10 + 1, p_shared_owners));
LABEL_12:
  if (!v3)
    goto LABEL_15;
LABEL_13:
  v11 = (unint64_t *)&v3->__shared_owners_;
  do
    v12 = __ldxr(v11);
  while (__stxr(v12 + 1, v11));
LABEL_15:
  if (!v8)
  {
    std::runtime_error::runtime_error(&v27, "Processor is no longer available.");
    v27.__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v23 = std::runtime_error::runtime_error(exception, &v27);
    v23->__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    __cxa_throw(v23, (struct type_info *)&unk_24CA1E2D0, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  if (!v5)
  {
    std::runtime_error::runtime_error(&v26, "Message was dropped.");
    v26.__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    v24 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v25 = std::runtime_error::runtime_error(v24, &v26);
    v25->__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    __cxa_throw(v25, (struct type_info *)&unk_24CA1E2D0, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  v13 = (uint64_t *)(v8 + 88);
  v14 = (std::runtime_error_vtbl **)a1[5];
  v26.__vftable = *v14;
  *v14 = 0;
  LOBYTE(v26.__imp_.__imp_) = 1;
  sub_20EC364CC(v13, v5, (uint64_t *)&v26);
  if (LOBYTE(v26.__imp_.__imp_))
    sub_20EC36A04((uint64_t *)&v26);
  if (v3)
  {
    v15 = (unint64_t *)&v3->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  if (v7)
  {
    v17 = (unint64_t *)&v7->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
    do
      v19 = __ldaxr(v17);
    while (__stlxr(v19 - 1, v17));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  if (v3)
  {
    v20 = (unint64_t *)&v3->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_20EC377FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10, uint64_t a11, uint64_t a12, std::runtime_error a13, std::exception_ptr a14)
{
  std::__shared_weak_count *v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;

  std::exception_ptr::~exception_ptr(&a14);
  std::runtime_error::~runtime_error(&a13);
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v18 = __ldaxr(p_shared_owners);
    while (__stlxr(v18 - 1, p_shared_owners));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  if (v15)
  {
    v19 = (unint64_t *)&v15->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
    do
      v21 = __ldaxr(v19);
    while (__stlxr(v21 - 1, v19));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  if (v14)
  {
    v22 = (unint64_t *)&v14->__shared_owners_;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  _Unwind_Resume(a1);
}

void sub_20EC37828(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::runtime_error a10, std::exception_ptr a11, uint64_t a12, uint64_t a13, uint64_t a14, std::exception_ptr a15)
{
  uint64_t v15;
  std::__assoc_sub_state **v16;
  std::__assoc_sub_state *v17;
  std::exception_ptr v18;

  __cxa_begin_catch(a1);
  std::current_exception();
  __cxa_end_catch();
  v17 = *v16;
  if (v17)
  {
    std::exception_ptr::exception_ptr(&a15, &a11);
    v18.__ptr_ = &a15;
    std::__assoc_sub_state::set_exception(v17, v18);
    std::exception_ptr::~exception_ptr(&a15);
    std::exception_ptr::~exception_ptr(&a11);
    std::runtime_error::~runtime_error(&a10);
    if (!v15)
      JUMPOUT(0x20EC37634);
    JUMPOUT(0x20EC37604);
  }
  sub_20E96CE78(3u);
}

void sub_20EC37884(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::runtime_error a10, std::exception_ptr a11, uint64_t a12, uint64_t a13, uint64_t a14, std::exception_ptr a15)
{
  std::__shared_weak_count *v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t *v23;
  unint64_t v24;

  std::exception_ptr::~exception_ptr(&a11);
  std::runtime_error::~runtime_error(&a10);
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v19 = __ldaxr(p_shared_owners);
    while (__stlxr(v19 - 1, p_shared_owners));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  if (v16)
  {
    v20 = (unint64_t *)&v16->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
    do
      v22 = __ldaxr(v20);
    while (__stlxr(v22 - 1, v20));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  if (v15)
  {
    v23 = (unint64_t *)&v15->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  _Unwind_Resume(a1);
}

void sub_20EC378B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;

  if (a11)
    sub_20EC36A04(&a10);
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v15 = __ldaxr(p_shared_owners);
    while (__stlxr(v15 - 1, p_shared_owners));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (v12)
  {
    v16 = (unint64_t *)&v12->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
    do
      v18 = __ldaxr(v16);
    while (__stlxr(v18 - 1, v16));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (v11)
  {
    v19 = (unint64_t *)&v11->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  _Unwind_Resume(a1);
}

uint64_t sub_20EC3799C(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3vio22user_anchor_node_group17AnchorAddedResultES6_vS"
                     "6_Lb0EE25EnqueueMessageAndDispatchIZNKS7_7ProcessERKS6_NSt3__17promiseIS6_EEEUlT_T0_E_EEvSA_SE_EUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3vio22user_anchor_node_group17AnchorAddedR"
                                "esultES6_vS6_Lb0EE25EnqueueMessageAndDispatchIZNKS7_7ProcessERKS6_NSt3__17promiseIS6_EEE"
                                "UlT_T0_E_EEvSA_SE_EUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3vio22user_anchor_node_group17AnchorAddedResultES6_vS6_Lb0EE25EnqueueMessageAndDispatchIZNKS7_7ProcessERKS6_NSt3__17promiseIS6_EEEUlT_T0_E_EEvSA_SE_EUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3vio22user_anchor_node_group17AnchorAddedResultES6_vS6_Lb0EE25EnqueueMessageAndDispatchIZNKS7_7ProcessERKS6_NSt3__17promiseIS6_EEEUlT_T0_E_EEvSA_SE_EUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20EC37A08()
{
  return &unk_24C9CE780;
}

uint64_t sub_20EC37A14(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;

  *(_QWORD *)a1 = off_24C9CE7A0;
  v2 = *(std::__shared_weak_count **)(a1 + 384);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    if (!*(_BYTE *)(a1 + 320))
      goto LABEL_12;
  }
  else
  {
LABEL_5:
    if (!*(_BYTE *)(a1 + 320))
      goto LABEL_12;
  }
  v5 = *(std::__shared_weak_count **)(a1 + 312);
  if (v5)
  {
    v6 = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
LABEL_12:
  if (*(_BYTE *)(a1 + 64) && *(char *)(a1 + 63) < 0)
  {
    operator delete(*(void **)(a1 + 40));
    v8 = *(std::__shared_weak_count **)(a1 + 16);
    if (!v8)
      return a1;
    goto LABEL_15;
  }
  v8 = *(std::__shared_weak_count **)(a1 + 16);
  if (v8)
LABEL_15:
    std::__shared_weak_count::__release_weak(v8);
  return a1;
}

void sub_20EC37AF4(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;

  *(_QWORD *)a1 = off_24C9CE7A0;
  v2 = *(std::__shared_weak_count **)(a1 + 384);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    if (!*(_BYTE *)(a1 + 320))
      goto LABEL_12;
  }
  else
  {
LABEL_5:
    if (!*(_BYTE *)(a1 + 320))
      goto LABEL_12;
  }
  v5 = *(std::__shared_weak_count **)(a1 + 312);
  if (v5)
  {
    v6 = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
LABEL_12:
  if (*(_BYTE *)(a1 + 64) && *(char *)(a1 + 63) < 0)
  {
    operator delete(*(void **)(a1 + 40));
    v8 = *(std::__shared_weak_count **)(a1 + 16);
    if (!v8)
      goto LABEL_18;
  }
  else
  {
    v8 = *(std::__shared_weak_count **)(a1 + 16);
    if (!v8)
      goto LABEL_18;
  }
  std::__shared_weak_count::__release_weak(v8);
LABEL_18:
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20EC37BE4(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v1 = a1 + 8;
  v2 = operator new(0x188uLL);
  *v2 = off_24C9CE7A0;
  sub_20EC37EF0((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_20EC37C24(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20EC37C38(uint64_t a1, _QWORD *a2)
{
  *a2 = off_24C9CE7A0;
  return sub_20EC37EF0((uint64_t)(a2 + 1), a1 + 8);
}

void sub_20EC37C54(uint64_t a1)
{
  sub_20EC38084(a1 + 8);
}

void sub_20EC37C5C(void *a1)
{
  sub_20EC38084((uint64_t)a1 + 8);
  operator delete(a1);
}

void sub_20EC37C84(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  uint64_t v4;
  std::runtime_error_vtbl **v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::runtime_error *exception;
  std::runtime_error *v9;
  std::runtime_error v10;

  v2 = (std::__shared_weak_count *)a1[2];
  if (!v2 || (v3 = std::__shared_weak_count::lock(v2)) == 0 || (v4 = a1[1]) == 0)
  {
    std::runtime_error::runtime_error(&v10, "Invalid operation. Processor is released.");
    v10.__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v9 = std::runtime_error::runtime_error(exception, &v10);
    v9->__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    __cxa_throw(v9, (struct type_info *)&unk_24CA1E2D0, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  v5 = (std::runtime_error_vtbl **)a1[47];
  v10.__vftable = *v5;
  *v5 = 0;
  LOBYTE(v10.__imp_.__imp_) = 1;
  sub_20EC364CC((uint64_t *)(v4 + 88), (uint64_t)(a1 + 3), (uint64_t *)&v10);
  if (LOBYTE(v10.__imp_.__imp_))
    sub_20EC36A04((uint64_t *)&v10);
  p_shared_owners = (unint64_t *)&v3->__shared_owners_;
  do
    v7 = __ldaxr(p_shared_owners);
  while (__stlxr(v7 - 1, p_shared_owners));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
}

void sub_20EC37D94(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::runtime_error a10, std::exception_ptr a11)
{
  __break(1u);
}

void sub_20EC37E0C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::runtime_error a10, std::exception_ptr a11)
{
  uint64_t v11;

  std::exception_ptr::~exception_ptr((std::exception_ptr *)&a9);
  std::runtime_error::~runtime_error(&a10);
  if (v11)
    JUMPOUT(0x20EC37E40);
  JUMPOUT(0x20EC37E70);
}

uint64_t sub_20EC37E78(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3vio22user_anchor_node_group17AnchorAddedResultES6_vS"
                     "6_Lb0EE7ProcessERKS6_NSt3__17promiseIS6_EEEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3vio22user_anchor_node_group17AnchorAddedR"
                                "esultES6_vS6_Lb0EE7ProcessERKS6_NSt3__17promiseIS6_EEEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3vio22user_anchor_node_group17AnchorAddedResultES6_vS6_Lb0EE7ProcessERKS6_NSt3__17promiseIS6_EEEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3vio22user_anchor_node_group17AnchorAddedResultES6_vS6_Lb0EE7ProcessERKS6_NSt3__17promiseIS6_EEEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20EC37EE4()
{
  return &unk_24C9CE800;
}

uint64_t sub_20EC37EF0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  unint64_t *v26;
  unint64_t v27;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = *(_OWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 32) = 0;
  *(_OWORD *)(a1 + 16) = v7;
  *(_BYTE *)(a1 + 56) = 0;
  if (*(_BYTE *)(a2 + 56))
  {
    if (*(char *)(a2 + 55) < 0)
    {
      sub_20E860C04((_BYTE *)(a1 + 32), *(void **)(a2 + 32), *(_QWORD *)(a2 + 40));
    }
    else
    {
      v8 = *(_OWORD *)(a2 + 32);
      *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
      *(_OWORD *)(a1 + 32) = v8;
    }
    *(_BYTE *)(a1 + 56) = 1;
  }
  v9 = *(_OWORD *)(a2 + 64);
  v10 = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 96) = v10;
  *(_OWORD *)(a1 + 64) = v9;
  v11 = *(_OWORD *)(a2 + 112);
  v12 = *(_OWORD *)(a2 + 128);
  v13 = *(_OWORD *)(a2 + 160);
  *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 160) = v13;
  *(_OWORD *)(a1 + 112) = v11;
  *(_OWORD *)(a1 + 128) = v12;
  v14 = *(_OWORD *)(a2 + 176);
  v15 = *(_OWORD *)(a2 + 192);
  v16 = *(_OWORD *)(a2 + 224);
  *(_OWORD *)(a1 + 208) = *(_OWORD *)(a2 + 208);
  *(_OWORD *)(a1 + 224) = v16;
  *(_OWORD *)(a1 + 176) = v14;
  *(_OWORD *)(a1 + 192) = v15;
  v17 = *(_OWORD *)(a2 + 240);
  v18 = *(_OWORD *)(a2 + 256);
  v19 = *(_OWORD *)(a2 + 272);
  *(_BYTE *)(a1 + 288) = *(_BYTE *)(a2 + 288);
  *(_OWORD *)(a1 + 256) = v18;
  *(_OWORD *)(a1 + 272) = v19;
  *(_OWORD *)(a1 + 240) = v17;
  *(_BYTE *)(a1 + 296) = 0;
  *(_BYTE *)(a1 + 312) = 0;
  if (*(_BYTE *)(a2 + 312))
  {
    v20 = *(_QWORD *)(a2 + 304);
    *(_QWORD *)(a1 + 296) = *(_QWORD *)(a2 + 296);
    *(_QWORD *)(a1 + 304) = v20;
    if (v20)
    {
      v21 = (unint64_t *)(v20 + 8);
      do
        v22 = __ldxr(v21);
      while (__stxr(v22 + 1, v21));
    }
    *(_BYTE *)(a1 + 312) = 1;
  }
  v23 = *(_OWORD *)(a2 + 320);
  *(_QWORD *)(a1 + 336) = *(_QWORD *)(a2 + 336);
  *(_OWORD *)(a1 + 320) = v23;
  v24 = *(_OWORD *)(a2 + 344);
  *(_WORD *)(a1 + 360) = *(_WORD *)(a2 + 360);
  *(_OWORD *)(a1 + 344) = v24;
  v25 = *(_QWORD *)(a2 + 376);
  *(_QWORD *)(a1 + 368) = *(_QWORD *)(a2 + 368);
  *(_QWORD *)(a1 + 376) = v25;
  if (v25)
  {
    v26 = (unint64_t *)(v25 + 8);
    do
      v27 = __ldxr(v26);
    while (__stxr(v27 + 1, v26));
  }
  return a1;
}

void sub_20EC38054(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  std::__shared_weak_count *v4;

  if (*(_BYTE *)(v1 + 56) && *(char *)(v1 + 55) < 0)
    operator delete(*v2);
  v4 = *(std::__shared_weak_count **)(v1 + 8);
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
  _Unwind_Resume(exception_object);
}

void sub_20EC38084(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;

  v2 = *(std::__shared_weak_count **)(a1 + 376);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    if (!*(_BYTE *)(a1 + 312))
      goto LABEL_12;
  }
  else
  {
LABEL_5:
    if (!*(_BYTE *)(a1 + 312))
      goto LABEL_12;
  }
  v5 = *(std::__shared_weak_count **)(a1 + 304);
  if (v5)
  {
    v6 = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
LABEL_12:
  if (!*(_BYTE *)(a1 + 56) || (*(char *)(a1 + 55) & 0x80000000) == 0)
  {
    v8 = *(std::__shared_weak_count **)(a1 + 8);
    if (!v8)
      return;
    goto LABEL_15;
  }
  operator delete(*(void **)(a1 + 32));
  v8 = *(std::__shared_weak_count **)(a1 + 8);
  if (v8)
LABEL_15:
    std::__shared_weak_count::__release_weak(v8);
}

_QWORD *sub_20EC38158(_QWORD *a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;

  *a1 = &off_24C9CE820;
  v2 = a1[4];
  a1[3] = &off_24C9CCB08;
  a1[4] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = (std::__shared_weak_count *)a1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  return a1;
}

void sub_20EC381B0(_QWORD *a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;

  *a1 = &off_24C9CE820;
  v2 = a1[4];
  a1[3] = &off_24C9CCB08;
  a1[4] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = (std::__shared_weak_count *)a1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20EC38218(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;

  v2 = operator new(0x28uLL);
  v3 = v2;
  v5 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  *v2 = &off_24C9CE820;
  v2[1] = v5;
  v2[2] = v4;
  if (v4)
  {
    v6 = (unint64_t *)(v4 + 16);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  v2[3] = &off_24C9CCB08;
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32));
  return v3;
}

void sub_20EC38290(_Unwind_Exception *a1)
{
  _QWORD *v1;
  std::__shared_weak_count *v3;

  v3 = (std::__shared_weak_count *)v1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20EC382B0(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  *a2 = &off_24C9CE820;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  a2[3] = &off_24C9CCB08;
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32));
}

void sub_20EC38318(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  std::__shared_weak_count *v3;

  v3 = *(std::__shared_weak_count **)(v1 + 16);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  _Unwind_Resume(exception_object);
}

void sub_20EC38330(_QWORD *a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;

  v2 = a1[4];
  a1[3] = &off_24C9CCB08;
  a1[4] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = (std::__shared_weak_count *)a1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
}

void sub_20EC38380(_QWORD *__p)
{
  uint64_t v2;
  std::__shared_weak_count *v3;

  v2 = __p[4];
  __p[3] = &off_24C9CCB08;
  __p[4] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = (std::__shared_weak_count *)__p[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  operator delete(__p);
}

void sub_20EC383CC(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;

  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = a1[1];
      if (v5)
      {
        v6 = operator new(0x20uLL);
        v7 = a1[4];
        a1[4] = 0;
        v6[2] = &off_24C9CCB08;
        v6[3] = v7;
        v9 = *(_QWORD *)(v5 + 96);
        v8 = (_QWORD *)(v5 + 96);
        *v6 = v9;
        v6[1] = v8;
        *(_QWORD *)(v9 + 8) = v6;
        *v8 = v6;
        ++v8[2];
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v11 = __ldaxr(p_shared_owners);
      while (__stlxr(v11 - 1, p_shared_owners));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_20EC38480(_Unwind_Exception *exception_object)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v4;

  p_shared_owners = (unint64_t *)&v1->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20EC384BC(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3kit11concurrency6detail9ProcessorINS_3vio22user_anchor_node_group17AnchorAddedResultES6_vS6"
                     "_Lb0EE9SubscribeENS1_12ChannelInputIS6_EEEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4cv3d3kit11concurrency6detail9ProcessorINS_3vio22user_anchor_node_group17AnchorAddedRe"
                                "sultES6_vS6_Lb0EE9SubscribeENS1_12ChannelInputIS6_EEEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3kit11concurrency6detail9ProcessorINS_3vio22user_anchor_node_group17AnchorAddedResultES6_vS6_Lb0EE9SubscribeENS1_12ChannelInputIS6_EEEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3kit11concurrency6detail9ProcessorINS_3vio22user_anchor_node_group17AnchorAddedResultES6_vS6_Lb0EE9SubscribeENS1_12ChannelInputIS6_EEEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20EC38528()
{
  return &unk_24C9CE880;
}

_QWORD *sub_20EC38534(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_24C9CE8A0;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_20EC3856C(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_24C9CE8A0;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20EC385B4(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x20uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *result = &off_24C9CE8A0;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  return result;
}

uint64_t sub_20EC38604(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = *(_QWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 16);
  *a2 = &off_24C9CE8A0;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

void sub_20EC38634(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void sub_20EC38644(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void sub_20EC38670(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 8);
      if (v5)
      {
        v6 = operator new(0x18uLL);
        v8 = *(_QWORD *)(v5 + 120);
        v7 = (_QWORD *)(v5 + 120);
        *v6 = v8;
        v6[1] = v7;
        *(_QWORD *)(v8 + 8) = v6;
        *v7 = v6;
        ++v7[2];
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v10 = __ldaxr(p_shared_owners);
      while (__stlxr(v10 - 1, p_shared_owners));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_20EC38704(_Unwind_Exception *exception_object)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v4;

  p_shared_owners = (unint64_t *)&v1->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20EC38740(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3kit11concurrency6detail9ProcessorINS_3vio22user_anchor_node_group17AnchorAddedResultES6_vS6"
                     "_Lb0EE15AddErrorHandlerENS1_12ChannelInputIvEEEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4cv3d3kit11concurrency6detail9ProcessorINS_3vio22user_anchor_node_group17AnchorAddedRe"
                                "sultES6_vS6_Lb0EE15AddErrorHandlerENS1_12ChannelInputIvEEEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3kit11concurrency6detail9ProcessorINS_3vio22user_anchor_node_group17AnchorAddedResultES6_vS6_Lb0EE15AddErrorHandlerENS1_12ChannelInputIvEEEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3kit11concurrency6detail9ProcessorINS_3vio22user_anchor_node_group17AnchorAddedResultES6_vS6_Lb0EE15AddErrorHandlerENS1_12ChannelInputIvEEEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20EC387AC()
{
  return &unk_24C9CE900;
}

_QWORD *sub_20EC387B8(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_24C9CE920;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_20EC387F0(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_24C9CE920;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20EC38838(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x20uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = &off_24C9CE920;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  result[3] = a1[3];
  return result;
}

_QWORD *sub_20EC38890(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = result[1];
  v2 = result[2];
  *a2 = &off_24C9CE920;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  a2[3] = result[3];
  return result;
}

void sub_20EC388C8(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void sub_20EC388D8(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void sub_20EC38904(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  uint64_t *v6;
  unint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p[2];
  char *v16;
  __int128 v17;
  char *v18;
  uint64_t v19;
  __int128 *v20;

  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = a1[1];
      if (!v5)
      {
LABEL_11:
        p_shared_owners = (unint64_t *)&v4->__shared_owners_;
        do
          v14 = __ldaxr(p_shared_owners);
        while (__stlxr(v14 - 1, p_shared_owners));
        if (!v14)
        {
          ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
          std::__shared_weak_count::__release_weak(v4);
        }
        return;
      }
      v6 = (uint64_t *)a1[3];
      v7 = *(_QWORD *)(v5 + 112);
      v18 = 0;
      v17 = 0uLL;
      if (v7)
      {
        if (v7 >> 61)
          sub_20E92CED8();
        v8 = (char *)operator new(8 * v7);
        v9 = &v8[8 * v7];
        *(_QWORD *)&v17 = v8;
        *((_QWORD *)&v17 + 1) = v8;
        v18 = v9;
        v10 = v5 + 96;
        v11 = *(_QWORD *)(v5 + 104);
        v20 = &v17;
        if (v11 != v10)
        {
          do
          {
LABEL_7:
            v19 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v11 + 24) + 48))(*(_QWORD *)(v11 + 24));
            sub_20E9B2D04((uint64_t *)&v20, &v19);
            v11 = *(_QWORD *)(v11 + 8);
          }
          while (v11 != v10);
          *(_OWORD *)__p = v17;
          v16 = v18;
          v12 = *v6;
          if (*v6)
            goto LABEL_9;
          goto LABEL_18;
        }
      }
      else
      {
        v9 = 0;
        v8 = 0;
        v10 = v5 + 96;
        v11 = *(_QWORD *)(v5 + 104);
        v20 = &v17;
        if (v11 != v10)
          goto LABEL_7;
      }
      *(int64x2_t *)__p = vdupq_n_s64((unint64_t)v8);
      v16 = v9;
      v12 = *v6;
      if (*v6)
      {
LABEL_9:
        sub_20EA04C5C(v12, (uint64_t)__p);
        if (__p[0])
        {
          __p[1] = __p[0];
          operator delete(__p[0]);
        }
        goto LABEL_11;
      }
LABEL_18:
      sub_20E96CE78(3u);
    }
  }
}

void sub_20EC38A80(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v17;

  if (__p)
    operator delete(__p);
  p_shared_owners = (unint64_t *)&v14->__shared_owners_;
  do
    v17 = __ldaxr(p_shared_owners);
  while (__stlxr(v17 - 1, p_shared_owners));
  if (!v17)
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20EC38AF0(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3vio22user_anchor_node_group17AnchorAddedResultES6_vS"
                     "6_Lb0EE16OutputHandlerIDsEvEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3vio22user_anchor_node_group17AnchorAddedR"
                                "esultES6_vS6_Lb0EE16OutputHandlerIDsEvEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3vio22user_anchor_node_group17AnchorAddedResultES6_vS6_Lb0EE16OutputHandlerIDsEvEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3vio22user_anchor_node_group17AnchorAddedResultES6_vS6_Lb0EE16OutputHandlerIDsEvEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20EC38B5C()
{
  return &unk_24C9CE980;
}

_QWORD *sub_20EC38B68(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_24C9CE9A0;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_20EC38BA0(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_24C9CE9A0;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20EC38BE8(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x20uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = &off_24C9CE9A0;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  result[3] = a1[3];
  return result;
}

_QWORD *sub_20EC38C40(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = result[1];
  v2 = result[2];
  *a2 = &off_24C9CE9A0;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  a2[3] = result[3];
  return result;
}

void sub_20EC38C78(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void sub_20EC38C88(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void sub_20EC38CB4(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  void *__p;
  void *v9;
  uint64_t v10;

  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      if (a1[1])
      {
        v5 = (uint64_t *)a1[3];
        __p = 0;
        v9 = 0;
        v10 = 0;
        if (!*v5)
          sub_20E96CE78(3u);
        sub_20EA04C5C(*v5, (uint64_t)&__p);
        if (__p)
        {
          v9 = __p;
          operator delete(__p);
        }
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_20EC38D6C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (__p)
    operator delete(__p);
  p_shared_owners = (unint64_t *)&v11->__shared_owners_;
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20EC38DB8(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3vio22user_anchor_node_group17AnchorAddedResultES6_vS"
                     "6_Lb0EE15ErrorHandlerIDsEvEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3vio22user_anchor_node_group17AnchorAddedR"
                                "esultES6_vS6_Lb0EE15ErrorHandlerIDsEvEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3vio22user_anchor_node_group17AnchorAddedResultES6_vS6_Lb0EE15ErrorHandlerIDsEvEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3vio22user_anchor_node_group17AnchorAddedResultES6_vS6_Lb0EE15ErrorHandlerIDsEvEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20EC38E24()
{
  return &unk_24C9CEA00;
}

void sub_20EC38E34(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20EC38E58(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t sub_20EC38E70(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail9ProcessorINS1_3vio22user_anchor_node_group17Anch"
                     "orAddedResultES8_vS8_Lb0EEEE27__shared_ptr_default_deleteIS9_S9_EE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail9ProcessorINS1_3vio22user_anchor_node_"
                                "group17AnchorAddedResultES8_vS8_Lb0EEEE27__shared_ptr_default_deleteIS9_S9_EE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail9ProcessorINS1_3vio22user_anchor_node_group17AnchorAddedResultES8_vS8_Lb0EEEE27__shared_ptr_default_deleteIS9_S9_EE"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail9ProcessorINS1_3vio22user_anchor_node_group17AnchorAddedResultES8_vS8_Lb0EEEE27__shared_ptr_default_deleteIS9_S9_EE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

uint64_t sub_20EC38EE0(uint64_t a1)
{
  std::__shared_weak_count *v2;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_20EC38F0C(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20EC38F48@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *result;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;

  result = (_QWORD *)operator new();
  v6 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  *result = &off_24C9CEA70;
  result[1] = v6;
  result[2] = v5;
  if (v5)
  {
    v7 = (unint64_t *)(v5 + 16);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  *a2 = result;
  return result;
}

void sub_20EC38FB0(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 8);
      if (v5)
        (*(void (**)(uint64_t))(*(_QWORD *)v5 + 32))(v5);
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_20EC39040(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20EC39054(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 8);
      if (v5)
        (*(void (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_20EC390E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20EC390F8(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return 0;
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
    return 0;
  v4 = v3;
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
    v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 48))(v5);
  else
    v6 = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (v9)
    return v6;
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return v6;
}

void sub_20EC391BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20EC391D0(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return 0;
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
    return 0;
  v4 = v3;
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
    v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 24))(v5);
  else
    v6 = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (v9)
    return v6;
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return v6;
}

void sub_20EC39294(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20EC392A8(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3)
  {
    v5 = std::__shared_weak_count::lock(v3);
    if (v5)
    {
      v6 = v5;
      v7 = *(_QWORD *)(a1 + 8);
      if (v7)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v7 + 16))(v7, a2);
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
}

void sub_20EC3934C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20EC39364(uint64_t a1)
{
  sub_20EC3ADD8(a1);
  JUMPOUT(0x212BC6398);
}

void sub_20EC39388(_QWORD *a1, uint64_t *a2)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_weak_owners;
  unint64_t v8;
  uint64_t *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  std::__shared_weak_count **v13;
  unint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  std::mutex **v24;
  uint64_t **v25;
  std::__shared_weak_count *v26;
  std::__shared_weak_count *v27;
  std::__shared_weak_count *v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  unint64_t *v32;
  unint64_t v33;
  uint64_t **v34;
  std::__shared_weak_count *v35;
  std::__shared_weak_count *v36;
  std::__shared_weak_count *v37;
  uint64_t v38;
  unint64_t *v39;
  unint64_t v40;
  unint64_t *v41;
  unint64_t v42;
  char *v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t *v46;
  unint64_t v47;
  char *v48;
  __int128 v49;
  __int128 *v50;
  uint64_t v51;
  char *v52;
  char *v53;
  void *v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  std::__shared_weak_count *v58[2];
  void *__p[2];
  uint64_t v60;
  std::__shared_weak_count *v61;
  std::__shared_weak_count *v62;
  __int128 v63;
  uint64_t v64;
  __int128 *v65;
  _BYTE v66[24];
  _BYTE *v67;
  uint64_t v68;

  v68 = *MEMORY[0x24BDAC8D0];
  if (!(*(unsigned int (**)(_QWORD *))(*a1 + 48))(a1))
    return;
  if (!a1[9]
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 234, (uint64_t)"scheduler_", 10, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  if (a1[18])
  {
    v4 = (std::__shared_weak_count *)operator new(0x30uLL);
    v4->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    v4->__shared_weak_owners_ = 0;
    v4[1].__vftable = 0;
    v6 = v4 + 1;
    v4->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9CECD8;
    v4[1].__shared_owners_ = 0;
    v4[1].__shared_weak_owners_ = 0;
    sub_20EC06C80(&v4[1].__vftable, *a2, a2[1], (a2[1] - *a2) >> 4);
    v61 = v4 + 1;
    v62 = v4;
    p_shared_weak_owners = (unint64_t *)&v4->__shared_weak_owners_;
    do
      v8 = __ldxr(p_shared_weak_owners);
    while (__stxr(v8 + 1, p_shared_weak_owners));
    v9 = (uint64_t *)a1[18];
    v10 = (_QWORD *)operator new();
    *v10 = v9 + 7;
    std::mutex::lock((std::mutex *)(v9 + 7));
    *(_QWORD *)&v63 = v10;
    *((_QWORD *)&v63 + 1) = v9;
    if (!*((_BYTE *)v9 + 48))
      sub_20E866B34();
    v11 = v9[4];
    v12 = *v9;
    v13 = (std::__shared_weak_count **)(*v9 + 16 * v11);
    do
      v14 = __ldxr(p_shared_owners);
    while (__stxr(v14 + 1, p_shared_owners));
    *v13 = v6;
    v15 = v12 + 16 * v11;
    v16 = *(std::__shared_weak_count **)(v15 + 8);
    *(_QWORD *)(v15 + 8) = v4;
    if (v16)
    {
      v17 = (unint64_t *)&v16->__shared_owners_;
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
    v19 = (v9[1] - *v9) >> 4;
    v20 = v9[5];
    v21 = v9[4] + 1;
    if (v21 >= v19)
      v22 = (v9[1] - *v9) >> 4;
    else
      v22 = 0;
    v9[4] = v21 - v22;
    if (v20 == v19)
    {
      v23 = v9[3] + 1;
      if (v23 < v19)
        v19 = 0;
      v9[3] = v23 - v19;
      v24 = (std::mutex **)v63;
      if (!(_QWORD)v63)
      {
LABEL_33:
        v34 = (uint64_t **)a1[9];
        v63 = 0uLL;
        v35 = (std::__shared_weak_count *)a1[5];
        if (v35)
        {
          v36 = std::__shared_weak_count::lock(v35);
          if (v36)
          {
            v37 = v36;
            v38 = a1[4];
            v39 = (unint64_t *)&v36->__shared_weak_owners_;
            do
              v40 = __ldxr(v39);
            while (__stxr(v40 + 1, v39));
            *(_QWORD *)&v63 = v38;
            *((_QWORD *)&v63 + 1) = v36;
            v41 = (unint64_t *)&v36->__shared_owners_;
            do
              v42 = __ldaxr(v41);
            while (__stlxr(v42 - 1, v41));
            if (!v42)
            {
              ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
              std::__shared_weak_count::__release_weak(v37);
            }
          }
          else
          {
            v63 = 0uLL;
          }
        }
        v43 = (char *)operator new(0x30uLL);
        *(_QWORD *)v43 = &off_24C9CED28;
        *(_OWORD *)(v43 + 8) = v63;
        v63 = 0uLL;
        *((_QWORD *)v43 + 3) = v6;
        *((_QWORD *)v43 + 4) = v4;
        v64 = 0;
        v65 = 0;
        v67 = v43;
        sub_210216F3C(*v34, (uint64_t)v66);
        v44 = v67;
        if (v67 == v66)
        {
          v45 = 4;
          v44 = v66;
        }
        else
        {
          if (!v67)
            goto LABEL_47;
          v45 = 5;
        }
        (*(void (**)(void))(*v44 + 8 * v45))();
LABEL_47:
        if (v62)
        {
          v46 = &v62->__shared_owners_;
          do
            v47 = __ldaxr((unint64_t *)v46);
          while (__stlxr(v47 - 1, (unint64_t *)v46));
          if (!v47)
          {
            ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
            std::__shared_weak_count::__release_weak(v62);
          }
        }
        return;
      }
    }
    else
    {
      v9[5] = v20 + 1;
      v24 = (std::mutex **)v63;
      if (!(_QWORD)v63)
        goto LABEL_33;
    }
    std::mutex::unlock(*v24);
    MEMORY[0x212BC6398](v24, 0x20C4093837F09);
    goto LABEL_33;
  }
  v25 = (uint64_t **)a1[9];
  *(_OWORD *)v58 = 0uLL;
  v26 = (std::__shared_weak_count *)a1[5];
  if (v26)
  {
    v27 = std::__shared_weak_count::lock(v26);
    if (v27)
    {
      v28 = v27;
      v29 = (std::__shared_weak_count *)a1[4];
      v30 = (unint64_t *)&v27->__shared_weak_owners_;
      do
        v31 = __ldxr(v30);
      while (__stxr(v31 + 1, v30));
      v58[0] = v29;
      v58[1] = v27;
      v32 = (unint64_t *)&v27->__shared_owners_;
      do
        v33 = __ldaxr(v32);
      while (__stlxr(v33 - 1, v32));
      if (!v33)
      {
        ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
        std::__shared_weak_count::__release_weak(v28);
      }
    }
    else
    {
      *(_OWORD *)v58 = 0uLL;
    }
  }
  __p[0] = 0;
  __p[1] = 0;
  v60 = 0;
  sub_20EC06C80(__p, *a2, a2[1], (a2[1] - *a2) >> 4);
  v65 = 0;
  v48 = (char *)operator new(0x30uLL);
  v49 = *(_OWORD *)__p;
  *(_OWORD *)(v48 + 8) = *(_OWORD *)v58;
  *(_QWORD *)v48 = &off_24C9CEDA8;
  *(_OWORD *)(v48 + 24) = v49;
  *((_QWORD *)v48 + 5) = v60;
  __p[1] = 0;
  v60 = 0;
  __p[0] = 0;
  v65 = (__int128 *)v48;
  sub_210216F3C(*v25, (uint64_t)&v63);
  v50 = v65;
  if (v65 == &v63)
  {
    v51 = 4;
    v50 = &v63;
  }
  else
  {
    if (!v65)
      goto LABEL_58;
    v51 = 5;
  }
  (*(void (**)(__int128 *))(*(_QWORD *)v50 + 8 * v51))(v50);
LABEL_58:
  v52 = (char *)__p[0];
  if (__p[0])
  {
    v53 = (char *)__p[1];
    v54 = __p[0];
    if (__p[1] != __p[0])
    {
      do
      {
        v55 = (std::__shared_weak_count *)*((_QWORD *)v53 - 1);
        if (v55)
        {
          v56 = (unint64_t *)&v55->__shared_owners_;
          do
            v57 = __ldaxr(v56);
          while (__stlxr(v57 - 1, v56));
          if (!v57)
          {
            ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
            std::__shared_weak_count::__release_weak(v55);
          }
        }
        v53 -= 16;
      }
      while (v53 != v52);
      v54 = __p[0];
    }
    __p[1] = v52;
    operator delete(v54);
  }
}

void sub_20EC39864(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, char *a20)
{
  char *v20;
  char *v22;
  uint64_t v23;

  v22 = a20;
  if (a20 == v20)
  {
    v23 = 4;
    v22 = &a17;
  }
  else
  {
    if (!a20)
    {
      sub_20EC3AFD8(&a9);
      _Unwind_Resume(a1);
    }
    v23 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v22 + 8 * v23))();
  sub_20EC3AFD8(&a9);
  _Unwind_Resume(a1);
}

void sub_20EC398B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, char a17)
{
  if (a10)
  {
    std::__shared_weak_count::__release_weak(a10);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20EC399B0(uint64_t result)
{
  atomic_store(1u, (unsigned __int8 *)(result + 8));
  return result;
}

uint64_t sub_20EC399C0(uint64_t result)
{
  atomic_store(0, (unsigned __int8 *)(result + 8));
  return result;
}

uint64_t sub_20EC399CC(uint64_t a1)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)(a1 + 8));
  return v1 & 1;
}

void sub_20EC399DC(_QWORD *a1, uint64_t *a2, std::__shared_weak_count_vtbl **a3)
{
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_weak_owners;
  unint64_t v13;
  uint64_t *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  std::__shared_weak_count **v18;
  unint64_t v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  std::mutex **v29;
  uint64_t **v30;
  std::__shared_weak_count *v31;
  std::__shared_weak_count *v32;
  std::__shared_weak_count *v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  unint64_t *v37;
  unint64_t v38;
  uint64_t **v39;
  std::__shared_weak_count *v40;
  std::__shared_weak_count *v41;
  std::__shared_weak_count *v42;
  uint64_t v43;
  unint64_t *v44;
  unint64_t v45;
  unint64_t *v46;
  unint64_t v47;
  std::__shared_weak_count *v48;
  std::__shared_weak_count *v49;
  char *v50;
  std::string *v51;
  uint64_t v52;
  uint64_t *v53;
  unint64_t v54;
  uint64_t *v55;
  unint64_t v56;
  uint64_t *v57;
  unint64_t v58;
  std::__shared_weak_count *v59;
  char *v60;
  __int128 v61;
  uint64_t v62;
  __int128 *v63;
  uint64_t v64;
  std::__shared_weak_count *v65;
  unint64_t *v66;
  unint64_t v67;
  char *v68;
  char *v69;
  void *v70;
  std::__shared_weak_count *v71;
  unint64_t *v72;
  unint64_t v73;
  _QWORD *v74;
  _QWORD *v75;
  _QWORD *v76;
  __int128 *v77;
  std::string *v78;
  std::runtime_error *exception;
  std::runtime_error *v80;
  std::__shared_weak_count *v81[2];
  void *__p[2];
  uint64_t v83;
  _QWORD *v84;
  std::__shared_weak_count *v85;
  std::__shared_weak_count *v86;
  std::__shared_weak_count *v87;
  std::__shared_weak_count *v88;
  std::__shared_weak_count *v89;
  std::runtime_error v90;
  std::__shared_weak_count *v91;
  std::__shared_weak_count *v92;
  __int128 v93;
  _QWORD *v94;
  __int128 *v95;
  _QWORD v96[3];
  std::string v97;
  std::string *v98;
  uint64_t v99;

  v99 = *MEMORY[0x24BDAC8D0];
  if (((*(uint64_t (**)(_QWORD *))(*a1 + 48))(a1) & 1) == 0)
  {
    *(_QWORD *)&v93 = "Invalid operation. Interface is disabled for ";
    *((_QWORD *)&v93 + 1) = 45;
    v76 = (_QWORD *)a1[6];
    v75 = a1 + 6;
    v74 = v76;
    v77 = (__int128 *)*((unsigned __int8 *)v75 + 23);
    if ((char)v77 < 0)
      v77 = (__int128 *)v75[1];
    else
      v74 = v75;
    v94 = v74;
    v95 = v77;
    sub_20E8778D4((uint64_t)&v93, (uint64_t)v96, 0, 0, &v97);
    if ((v97.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v78 = &v97;
    else
      v78 = (std::string *)v97.__r_.__value_.__r.__words[0];
    std::runtime_error::runtime_error(&v90, (const char *)v78);
    v90.__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v80 = std::runtime_error::runtime_error(exception, &v90);
    v80->__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    __cxa_throw(v80, (struct type_info *)&unk_24CA1E2D0, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  if (!a1[9]
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 294, (uint64_t)"scheduler_", 10, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  if (a1[18])
  {
    v6 = (std::__shared_weak_count *)operator new(0x20uLL);
    v6->__shared_weak_owners_ = 0;
    v6->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9CCA80;
    v6[1].__vftable = *a3;
    v88 = v6 + 1;
    v89 = v6;
    v86 = v6 + 1;
    v87 = v6;
    v6->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    *a3 = 0;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    if (!a1[18]
      && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 414, (uint64_t)"limiting_buffer_", 16, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v9 = (std::__shared_weak_count *)operator new(0x30uLL);
    v9->__shared_owners_ = 0;
    v10 = (unint64_t *)&v9->__shared_owners_;
    v9->__shared_weak_owners_ = 0;
    v9->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9CECD8;
    v9[1].__vftable = 0;
    v11 = v9 + 1;
    v9[1].__shared_owners_ = 0;
    v9[1].__shared_weak_owners_ = 0;
    sub_20EC06C80(&v9[1].__vftable, *a2, a2[1], (a2[1] - *a2) >> 4);
    v91 = v9 + 1;
    v92 = v9;
    p_shared_weak_owners = (unint64_t *)&v9->__shared_weak_owners_;
    do
      v13 = __ldxr(p_shared_weak_owners);
    while (__stxr(v13 + 1, p_shared_weak_owners));
    v14 = (uint64_t *)a1[18];
    v15 = (_QWORD *)operator new();
    *v15 = v14 + 7;
    std::mutex::lock((std::mutex *)(v14 + 7));
    *(_QWORD *)&v93 = v15;
    *((_QWORD *)&v93 + 1) = v14;
    if (!*((_BYTE *)v14 + 48))
      sub_20E866B34();
    v16 = v14[4];
    v17 = *v14;
    v18 = (std::__shared_weak_count **)(*v14 + 16 * v16);
    do
      v19 = __ldxr(v10);
    while (__stxr(v19 + 1, v10));
    *v18 = v11;
    v20 = v17 + 16 * v16;
    v21 = *(std::__shared_weak_count **)(v20 + 8);
    *(_QWORD *)(v20 + 8) = v9;
    if (v21)
    {
      v22 = (unint64_t *)&v21->__shared_owners_;
      do
        v23 = __ldaxr(v22);
      while (__stlxr(v23 - 1, v22));
      if (!v23)
      {
        ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
        std::__shared_weak_count::__release_weak(v21);
      }
    }
    v24 = (v14[1] - *v14) >> 4;
    v25 = v14[5];
    v26 = v14[4] + 1;
    if (v26 >= v24)
      v27 = (v14[1] - *v14) >> 4;
    else
      v27 = 0;
    v14[4] = v26 - v27;
    if (v25 == v24)
    {
      v28 = v14[3] + 1;
      if (v28 < v24)
        v24 = 0;
      v14[3] = v28 - v24;
      v29 = (std::mutex **)v93;
      if (!(_QWORD)v93)
      {
LABEL_37:
        v39 = (uint64_t **)a1[9];
        v93 = 0uLL;
        v40 = (std::__shared_weak_count *)a1[5];
        if (v40)
        {
          v41 = std::__shared_weak_count::lock(v40);
          if (v41)
          {
            v42 = v41;
            v43 = a1[4];
            v44 = (unint64_t *)&v41->__shared_weak_owners_;
            do
              v45 = __ldxr(v44);
            while (__stxr(v45 + 1, v44));
            *(_QWORD *)&v93 = v43;
            *((_QWORD *)&v93 + 1) = v41;
            v46 = (unint64_t *)&v41->__shared_owners_;
            do
              v47 = __ldaxr(v46);
            while (__stlxr(v47 - 1, v46));
            if (!v47)
            {
              ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
              std::__shared_weak_count::__release_weak(v42);
            }
          }
          else
          {
            v93 = 0uLL;
          }
        }
        v48 = v86;
        v49 = v87;
        v86 = 0;
        v87 = 0;
        v50 = (char *)operator new(0x38uLL);
        *(_QWORD *)v50 = &off_24C9CEE28;
        *(_OWORD *)(v50 + 8) = v93;
        v93 = 0uLL;
        *((_QWORD *)v50 + 3) = v11;
        *((_QWORD *)v50 + 4) = v9;
        v94 = 0;
        v95 = 0;
        *((_QWORD *)v50 + 5) = v48;
        *((_QWORD *)v50 + 6) = v49;
        v96[0] = 0;
        v96[1] = 0;
        v98 = (std::string *)v50;
        sub_210216F3C(*v39, (uint64_t)&v97);
        v51 = v98;
        if (v98 == &v97)
        {
          v52 = 4;
          v51 = &v97;
        }
        else
        {
          if (!v98)
            goto LABEL_51;
          v52 = 5;
        }
        (*(void (**)(void))(v51->__r_.__value_.__r.__words[0] + 8 * v52))();
LABEL_51:
        if (v92)
        {
          v53 = &v92->__shared_owners_;
          do
            v54 = __ldaxr((unint64_t *)v53);
          while (__stlxr(v54 - 1, (unint64_t *)v53));
          if (!v54)
          {
            ((void (*)(std::__shared_weak_count *))v92->__on_zero_shared)(v92);
            std::__shared_weak_count::__release_weak(v92);
          }
        }
        if (v87)
        {
          v55 = &v87->__shared_owners_;
          do
            v56 = __ldaxr((unint64_t *)v55);
          while (__stlxr(v56 - 1, (unint64_t *)v55));
          if (!v56)
          {
            ((void (*)(std::__shared_weak_count *))v87->__on_zero_shared)(v87);
            std::__shared_weak_count::__release_weak(v87);
          }
        }
        if (v89)
        {
          v57 = &v89->__shared_owners_;
          do
            v58 = __ldaxr((unint64_t *)v57);
          while (__stlxr(v58 - 1, (unint64_t *)v57));
          if (!v58)
          {
            ((void (*)(std::__shared_weak_count *))v89->__on_zero_shared)(v89);
            std::__shared_weak_count::__release_weak(v89);
          }
        }
        return;
      }
    }
    else
    {
      v14[5] = v25 + 1;
      v29 = (std::mutex **)v93;
      if (!(_QWORD)v93)
        goto LABEL_37;
    }
    std::mutex::unlock(*v29);
    MEMORY[0x212BC6398](v29, 0x20C4093837F09);
    goto LABEL_37;
  }
  v30 = (uint64_t **)a1[9];
  *(_OWORD *)v81 = 0uLL;
  v31 = (std::__shared_weak_count *)a1[5];
  if (v31)
  {
    v32 = std::__shared_weak_count::lock(v31);
    if (v32)
    {
      v33 = v32;
      v34 = (std::__shared_weak_count *)a1[4];
      v35 = (unint64_t *)&v32->__shared_weak_owners_;
      do
        v36 = __ldxr(v35);
      while (__stxr(v36 + 1, v35));
      v81[0] = v34;
      v81[1] = v32;
      v37 = (unint64_t *)&v32->__shared_owners_;
      do
        v38 = __ldaxr(v37);
      while (__stlxr(v38 - 1, v37));
      if (!v38)
      {
        ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
        std::__shared_weak_count::__release_weak(v33);
      }
    }
    else
    {
      *(_OWORD *)v81 = 0uLL;
    }
  }
  __p[0] = 0;
  __p[1] = 0;
  v83 = 0;
  sub_20EC06C80(__p, *a2, a2[1], (a2[1] - *a2) >> 4);
  v59 = (std::__shared_weak_count *)operator new(0x20uLL);
  v59->__shared_owners_ = 0;
  v59->__shared_weak_owners_ = 0;
  v59->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9CCA80;
  v59[1].__vftable = *a3;
  *a3 = 0;
  v84 = &v59[1].__vftable;
  v85 = v59;
  v95 = 0;
  v60 = (char *)operator new(0x40uLL);
  v61 = *(_OWORD *)__p;
  *(_OWORD *)(v60 + 8) = *(_OWORD *)v81;
  *(_QWORD *)v60 = &off_24C9CEEA8;
  *(_OWORD *)(v60 + 24) = v61;
  v62 = v83;
  __p[1] = 0;
  v83 = 0;
  __p[0] = 0;
  *((_QWORD *)v60 + 5) = v62;
  *((_QWORD *)v60 + 6) = v59 + 1;
  *((_QWORD *)v60 + 7) = v59;
  v84 = 0;
  v85 = 0;
  v95 = (__int128 *)v60;
  sub_210216F3C(*v30, (uint64_t)&v93);
  v63 = v95;
  if (v95 == &v93)
  {
    v64 = 4;
    v63 = &v93;
  }
  else
  {
    if (!v95)
      goto LABEL_72;
    v64 = 5;
  }
  (*(void (**)(__int128 *))(*(_QWORD *)v63 + 8 * v64))(v63);
LABEL_72:
  v65 = v85;
  if (v85)
  {
    v66 = (unint64_t *)&v85->__shared_owners_;
    do
      v67 = __ldaxr(v66);
    while (__stlxr(v67 - 1, v66));
    if (!v67)
    {
      ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
      std::__shared_weak_count::__release_weak(v65);
    }
  }
  v68 = (char *)__p[0];
  if (__p[0])
  {
    v69 = (char *)__p[1];
    v70 = __p[0];
    if (__p[1] != __p[0])
    {
      do
      {
        v71 = (std::__shared_weak_count *)*((_QWORD *)v69 - 1);
        if (v71)
        {
          v72 = (unint64_t *)&v71->__shared_owners_;
          do
            v73 = __ldaxr(v72);
          while (__stlxr(v73 - 1, v72));
          if (!v73)
          {
            ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
            std::__shared_weak_count::__release_weak(v71);
          }
        }
        v69 -= 16;
      }
      while (v69 != v68);
      v70 = __p[0];
    }
    __p[1] = v68;
    operator delete(v70);
  }
}

void sub_20EC3A0E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, std::runtime_error a20,std::exception_ptr a21,uint64_t a22,uint64_t a23,std::exception_ptr a24)
{
  std::__assoc_sub_state **v24;
  uint64_t v25;
  std::__assoc_sub_state *v26;
  std::exception_ptr v27;

  if (a2)
  {
    __cxa_begin_catch(exception_object);
    std::current_exception();
    __cxa_end_catch();
    v26 = *v24;
    if (*v24)
    {
      std::exception_ptr::exception_ptr(&a24, &a21);
      v27.__ptr_ = &a24;
      std::__assoc_sub_state::set_exception(v26, v27);
      std::exception_ptr::~exception_ptr(&a24);
      std::exception_ptr::~exception_ptr(&a21);
      std::runtime_error::~runtime_error(&a20);
      if (*(char *)(v25 - 81) < 0)
        operator delete(*(void **)(v25 - 104));
      JUMPOUT(0x20EC39FFCLL);
    }
    sub_20E96CE78(3u);
  }
  _Unwind_Resume(exception_object);
}

void sub_20EC3A15C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, std::runtime_error a20,std::exception_ptr a21,uint64_t a22,uint64_t a23,std::exception_ptr a24)
{
  uint64_t v24;

  std::exception_ptr::~exception_ptr(&a21);
  std::runtime_error::~runtime_error(&a20);
  if (*(char *)(v24 - 81) < 0)
  {
    operator delete(*(void **)(v24 - 104));
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void sub_20EC3A1B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,char *a28)
{
  char *v28;
  char *v30;
  uint64_t v31;

  v30 = a28;
  if (a28 == v28)
  {
    v31 = 4;
    v30 = &a25;
  }
  else
  {
    if (!a28)
    {
      sub_20EC3C17C(&a9);
      _Unwind_Resume(a1);
    }
    v31 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v30 + 8 * v31))();
  sub_20EC3C17C(&a9);
  _Unwind_Resume(a1);
}

void sub_20EC3A204(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  void **v10;

  sub_20E8C3144(v10);
  if (a10)
  {
    std::__shared_weak_count::__release_weak(a10);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void sub_20EC3A238(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  va_list va;
  uint64_t v15;
  uint64_t v16;
  va_list va1;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  va_list va2;
  uint64_t v24;
  va_list va3;

  va_start(va3, a8);
  va_start(va2, a8);
  va_start(va1, a8);
  va_start(va, a8);
  v13 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v16 = va_arg(va2, _QWORD);
  v18 = va_arg(va2, _QWORD);
  v19 = va_arg(va2, _QWORD);
  v20 = va_arg(va2, _QWORD);
  v21 = va_arg(va2, _QWORD);
  va_copy(va3, va2);
  v22 = va_arg(va3, _QWORD);
  v24 = va_arg(va3, _QWORD);
  v11 = *(_QWORD **)(v9 - 80);
  if (v11 == v8)
  {
    v12 = 4;
    v11 = (_QWORD *)(v9 - 104);
  }
  else
  {
    if (!v11)
      goto LABEL_6;
    v12 = 5;
  }
  (*(void (**)(void))(*v11 + 8 * v12))();
LABEL_6:
  sub_20EA031A8((uint64_t *)va3);
  sub_20E86665C((uint64_t)va2);
  sub_20E86665C((uint64_t)va);
  sub_20E86665C((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_20EC3A2D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, char a18)
{
  std::__shared_weak_count *v18;
  void *v20;

  std::__shared_weak_count::~__shared_weak_count(v18);
  operator delete(v20);
  sub_20E86665C((uint64_t)&a16);
  sub_20E86665C((uint64_t)&a18);
  _Unwind_Resume(a1);
}

void sub_20EC3A300(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  uint64_t v9;
  va_list va;
  uint64_t v11;
  va_list va1;

  va_start(va1, a8);
  va_start(va, a8);
  v9 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  sub_20E86665C((uint64_t)va);
  sub_20E86665C((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_20EC3A31C(uint64_t a1)
{
  uint64_t *v1;

  v1 = *(uint64_t **)(a1 + 72);
  if (v1)
  {
    sub_210217048(*v1);
  }
  else
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 167, (uint64_t)"scheduler_ != nullptr", 21, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    sub_210217048(**(_QWORD **)(a1 + 72));
  }
}

_QWORD *sub_20EC3A390(_QWORD *a1, uint64_t a2)
{
  uint64_t **v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *result;
  uint64_t v12;
  _BYTE v13[24];
  _BYTE *v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v4 = (uint64_t **)a1[9];
  if (!v4)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 181, (uint64_t)"scheduler_", 10, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v4 = (uint64_t **)a1[9];
  }
  v6 = a1[4];
  v5 = a1[5];
  if (v5)
  {
    v7 = (unint64_t *)(v5 + 16);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  v9 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v10 = operator new(0x28uLL);
  *v10 = &off_24C9CEF28;
  v10[1] = v6;
  v10[2] = v5;
  v10[3] = &off_24C9B4888;
  v10[4] = v9;
  v14 = v10;
  sub_210216F3C(*v4, (uint64_t)v13);
  result = v14;
  if (v14 == v13)
  {
    v12 = 4;
    result = v13;
  }
  else
  {
    if (!v14)
      return result;
    v12 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v12))();
}

void sub_20EC3A4C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v13;

  if (a13 == v13)
  {
    (*(void (**)(void))(a10 + 32))();
    _Unwind_Resume(exception_object);
  }
  if (a13)
  {
    (*(void (**)(void))(*(_QWORD *)a13 + 40))();
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20EC3A534(_QWORD *a1)
{
  uint64_t **v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *result;
  uint64_t v9;
  _BYTE v10[24];
  _BYTE *v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v2 = (uint64_t **)a1[9];
  if (!v2)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 202, (uint64_t)"scheduler_", 10, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v2 = (uint64_t **)a1[9];
  }
  v4 = a1[4];
  v3 = a1[5];
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = operator new(0x20uLL);
  *v7 = &off_24C9CEFA8;
  v7[1] = v4;
  v7[2] = v3;
  v11 = v7;
  sub_210216F3C(*v2, (uint64_t)v10);
  result = v11;
  if (v11 == v10)
  {
    v9 = 4;
    result = v10;
  }
  else
  {
    if (!v11)
      return result;
    v9 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v9))();
}

void sub_20EC3A644(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v13;

  if (a13 == v13)
  {
    (*(void (**)(void))(a10 + 32))();
    _Unwind_Resume(exception_object);
  }
  if (a13)
  {
    (*(void (**)(void))(*(_QWORD *)a13 + 40))();
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_20EC3A6A8@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  unint64_t *v5;
  int v6;
  unint64_t v7;
  uint64_t **v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *p_shared_weak_owners;
  unint64_t v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v22;
  _BYTE v23[24];
  _BYTE *v24;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  v4 = operator new();
  *(_QWORD *)(v4 + 8) = 0;
  v5 = (unint64_t *)(v4 + 8);
  *(_QWORD *)(v4 + 24) = 850045863;
  *(_QWORD *)(v4 + 16) = 0;
  *(_OWORD *)(v4 + 32) = 0u;
  *(_OWORD *)(v4 + 48) = 0u;
  *(_OWORD *)(v4 + 64) = 0u;
  *(_QWORD *)(v4 + 80) = 0;
  *(_QWORD *)(v4 + 88) = 1018212795;
  *(_OWORD *)(v4 + 96) = 0u;
  *(_OWORD *)(v4 + 112) = 0u;
  *(_OWORD *)(v4 + 124) = 0u;
  *(_QWORD *)v4 = &off_24C9B80A0;
  v22 = v4;
  std::mutex::lock((std::mutex *)(v4 + 24));
  v6 = *(_DWORD *)(v4 + 136);
  if ((v6 & 2) != 0)
    sub_20E96CE78(1u);
  do
    v7 = __ldxr(v5);
  while (__stxr(v7 + 1, v5));
  *(_DWORD *)(v4 + 136) = v6 | 2;
  std::mutex::unlock((std::mutex *)(v4 + 24));
  v8 = (uint64_t **)a1[9];
  v9 = (std::__shared_weak_count *)a1[5];
  if (v9)
  {
    v10 = std::__shared_weak_count::lock(v9);
    v11 = v10;
    if (v10)
    {
      v12 = a1[4];
      p_shared_weak_owners = (unint64_t *)&v10->__shared_weak_owners_;
      do
        v14 = __ldxr(p_shared_weak_owners);
      while (__stxr(v14 + 1, p_shared_weak_owners));
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        v16 = __ldaxr(p_shared_owners);
      while (__stlxr(v16 - 1, p_shared_owners));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    else
    {
      v12 = 0;
    }
  }
  else
  {
    v12 = 0;
    v11 = 0;
  }
  v17 = operator new(0x20uLL);
  *v17 = &off_24C9CF028;
  v17[1] = v12;
  v17[2] = v11;
  v17[3] = &v22;
  v24 = v17;
  sub_210216F3C(*v8, (uint64_t)v23);
  v18 = v24;
  if (v24 == v23)
  {
    v19 = 4;
    v18 = v23;
    goto LABEL_17;
  }
  if (v24)
  {
    v19 = 5;
LABEL_17:
    (*(void (**)(_QWORD *))(*v18 + 8 * v19))(v18);
  }
  std::__assoc_sub_state::wait((std::__assoc_sub_state *)v4);
  sub_20EA04D14(v4, a2);
  do
    v20 = __ldaxr(v5);
  while (__stlxr(v20 - 1, v5));
  if (!v20)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
  return sub_20EA04DE8(&v22);
}

void sub_20EC3A8C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  unint64_t *v10;
  unint64_t v12;

  do
    v12 = __ldaxr(v10);
  while (__stlxr(v12 - 1, v10));
  if (!v12)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
    sub_20EA04DE8(&a9);
    _Unwind_Resume(a1);
  }
  sub_20EA04DE8(&a9);
  _Unwind_Resume(a1);
}

uint64_t *sub_20EC3A988@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  unint64_t *v5;
  int v6;
  unint64_t v7;
  uint64_t **v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *p_shared_weak_owners;
  unint64_t v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v22;
  _BYTE v23[24];
  _BYTE *v24;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  v4 = operator new();
  *(_QWORD *)(v4 + 8) = 0;
  v5 = (unint64_t *)(v4 + 8);
  *(_QWORD *)(v4 + 24) = 850045863;
  *(_QWORD *)(v4 + 16) = 0;
  *(_OWORD *)(v4 + 32) = 0u;
  *(_OWORD *)(v4 + 48) = 0u;
  *(_OWORD *)(v4 + 64) = 0u;
  *(_QWORD *)(v4 + 80) = 0;
  *(_QWORD *)(v4 + 88) = 1018212795;
  *(_OWORD *)(v4 + 96) = 0u;
  *(_OWORD *)(v4 + 112) = 0u;
  *(_OWORD *)(v4 + 124) = 0u;
  *(_QWORD *)v4 = &off_24C9B80A0;
  v22 = v4;
  std::mutex::lock((std::mutex *)(v4 + 24));
  v6 = *(_DWORD *)(v4 + 136);
  if ((v6 & 2) != 0)
    sub_20E96CE78(1u);
  do
    v7 = __ldxr(v5);
  while (__stxr(v7 + 1, v5));
  *(_DWORD *)(v4 + 136) = v6 | 2;
  std::mutex::unlock((std::mutex *)(v4 + 24));
  v8 = (uint64_t **)a1[9];
  v9 = (std::__shared_weak_count *)a1[5];
  if (v9)
  {
    v10 = std::__shared_weak_count::lock(v9);
    v11 = v10;
    if (v10)
    {
      v12 = a1[4];
      p_shared_weak_owners = (unint64_t *)&v10->__shared_weak_owners_;
      do
        v14 = __ldxr(p_shared_weak_owners);
      while (__stxr(v14 + 1, p_shared_weak_owners));
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        v16 = __ldaxr(p_shared_owners);
      while (__stlxr(v16 - 1, p_shared_owners));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    else
    {
      v12 = 0;
    }
  }
  else
  {
    v12 = 0;
    v11 = 0;
  }
  v17 = operator new(0x20uLL);
  *v17 = &off_24C9CF0A8;
  v17[1] = v12;
  v17[2] = v11;
  v17[3] = &v22;
  v24 = v17;
  sub_210216F3C(*v8, (uint64_t)v23);
  v18 = v24;
  if (v24 == v23)
  {
    v19 = 4;
    v18 = v23;
    goto LABEL_17;
  }
  if (v24)
  {
    v19 = 5;
LABEL_17:
    (*(void (**)(_QWORD *))(*v18 + 8 * v19))(v18);
  }
  std::__assoc_sub_state::wait((std::__assoc_sub_state *)v4);
  sub_20EA04D14(v4, a2);
  do
    v20 = __ldaxr(v5);
  while (__stlxr(v20 - 1, v5));
  if (!v20)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
  return sub_20EA04DE8(&v22);
}

void sub_20EC3ABA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  unint64_t *v10;
  unint64_t v12;

  do
    v12 = __ldaxr(v10);
  while (__stlxr(v12 - 1, v10));
  if (!v12)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
    sub_20EA04DE8(&a9);
    _Unwind_Resume(a1);
  }
  sub_20EA04DE8(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20EC3AC68(uint64_t a1)
{
  return sub_20EC3ADD8(a1 - 16);
}

void sub_20EC3AC70(uint64_t a1)
{
  sub_20EC3ADD8(a1 - 16);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20EC3AC98(uint64_t a1, uint64_t a2)
{
  return sub_20EC3A390((_QWORD *)(a1 - 16), a2);
}

uint64_t *sub_20EC3ACA0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_20EC3A6A8((_QWORD *)(a1 - 16), a2);
}

uint64_t *sub_20EC3ACA8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_20EC3A988((_QWORD *)(a1 - 16), a2);
}

uint64_t sub_20EC3ACB0(uint64_t a1)
{
  return a1 - 16;
}

uint64_t sub_20EC3ACB8(uint64_t a1)
{
  return sub_20EC3ADD8(a1 - 24);
}

void sub_20EC3ACC0(uint64_t a1)
{
  sub_20EC3ADD8(a1 - 24);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20EC3ACE8(uint64_t a1)
{
  return sub_20EC3A534((_QWORD *)(a1 - 24));
}

uint64_t sub_20EC3ACF0(uint64_t a1)
{
  return a1 - 24;
}

uint64_t sub_20EC3ACF8(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_20EC3AD60(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20EC3ADC8(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8));
}

uint64_t sub_20EC3ADD8(uint64_t a1)
{
  char **v2;
  char *v3;
  char *v4;
  char *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;

  *(_QWORD *)a1 = &off_24C9CEAE8;
  *(_QWORD *)(a1 + 16) = &unk_24C9CEB60;
  *(_QWORD *)(a1 + 24) = &unk_24C9CEBA0;
  v2 = *(char ***)(a1 + 144);
  *(_QWORD *)(a1 + 144) = 0;
  if (v2)
  {
    std::mutex::~mutex((std::mutex *)(v2 + 7));
    if (*((_BYTE *)v2 + 48))
    {
      v3 = *v2;
      if (*v2)
      {
        v4 = v2[1];
        v5 = *v2;
        if (v4 != v3)
        {
          do
          {
            v6 = (std::__shared_weak_count *)*((_QWORD *)v4 - 1);
            if (v6)
            {
              p_shared_owners = (unint64_t *)&v6->__shared_owners_;
              do
                v8 = __ldaxr(p_shared_owners);
              while (__stlxr(v8 - 1, p_shared_owners));
              if (!v8)
              {
                ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
                std::__shared_weak_count::__release_weak(v6);
              }
            }
            v4 -= 16;
          }
          while (v4 != v3);
          v5 = *v2;
        }
        v2[1] = v3;
        operator delete(v5);
      }
    }
    MEMORY[0x212BC6398](v2, 0x1022C400958DFA3);
  }
  if (*(_QWORD *)(a1 + 136))
  {
    v10 = *(_QWORD *)(a1 + 120);
    v9 = *(uint64_t **)(a1 + 128);
    v11 = *v9;
    *(_QWORD *)(v11 + 8) = *(_QWORD *)(v10 + 8);
    **(_QWORD **)(v10 + 8) = v11;
    *(_QWORD *)(a1 + 136) = 0;
    if (v9 != (uint64_t *)(a1 + 120))
    {
      do
      {
        v12 = (uint64_t *)v9[1];
        operator delete(v9);
        v9 = v12;
      }
      while (v12 != (uint64_t *)(a1 + 120));
    }
  }
  if (*(_QWORD *)(a1 + 112))
  {
    v13 = *(_QWORD *)(a1 + 96);
    v14 = *(uint64_t **)(a1 + 104);
    v15 = *v14;
    *(_QWORD *)(v15 + 8) = *(_QWORD *)(v13 + 8);
    **(_QWORD **)(v13 + 8) = v15;
    *(_QWORD *)(a1 + 112) = 0;
    if (v14 != (uint64_t *)(a1 + 96))
    {
      do
      {
        v16 = (uint64_t *)v14[1];
        (*(void (**)(uint64_t *))v14[2])(v14 + 2);
        operator delete(v14);
        v14 = v16;
      }
      while (v16 != (uint64_t *)(a1 + 96));
    }
  }
  v17 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 88) = 0;
  if (v17)
    (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  v18 = *(std::__shared_weak_count **)(a1 + 80);
  if (!v18)
    goto LABEL_27;
  v19 = (unint64_t *)&v18->__shared_owners_;
  do
    v20 = __ldaxr(v19);
  while (__stlxr(v20 - 1, v19));
  if (v20)
  {
LABEL_27:
    if ((*(char *)(a1 + 71) & 0x80000000) == 0)
      goto LABEL_29;
    goto LABEL_28;
  }
  ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
  std::__shared_weak_count::__release_weak(v18);
  if (*(char *)(a1 + 71) < 0)
LABEL_28:
    operator delete(*(void **)(a1 + 48));
LABEL_29:
  v21 = *(std::__shared_weak_count **)(a1 + 40);
  if (v21)
    std::__shared_weak_count::__release_weak(v21);
  return a1;
}

_QWORD *sub_20EC3AFD8(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;

  v2 = a1[2];
  if (v2)
  {
    v3 = a1[3];
    v4 = (void *)a1[2];
    if (v3 != v2)
    {
      do
      {
        v5 = *(std::__shared_weak_count **)(v3 - 8);
        if (v5)
        {
          p_shared_owners = (unint64_t *)&v5->__shared_owners_;
          do
            v7 = __ldaxr(p_shared_owners);
          while (__stlxr(v7 - 1, p_shared_owners));
          if (!v7)
          {
            ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
            std::__shared_weak_count::__release_weak(v5);
          }
        }
        v3 -= 16;
      }
      while (v3 != v2);
      v4 = (void *)a1[2];
    }
    a1[3] = v2;
    operator delete(v4);
  }
  v8 = (std::__shared_weak_count *)a1[1];
  if (v8)
    std::__shared_weak_count::__release_weak(v8);
  return a1;
}

void sub_20EC3B07C(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9CECD8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_20EC3B08C(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9CECD8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC6398);
}

void sub_20EC3B0BC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  void *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  void *v8;

  v1 = *(_QWORD *)(a1 + 24);
  if (v1)
  {
    v3 = *(_QWORD *)(a1 + 32);
    v4 = *(void **)(a1 + 24);
    if (v3 == v1)
    {
      *(_QWORD *)(a1 + 32) = v1;
      operator delete(v4);
    }
    else
    {
      do
      {
        v5 = *(std::__shared_weak_count **)(v3 - 8);
        if (v5)
        {
          p_shared_owners = (unint64_t *)&v5->__shared_owners_;
          do
            v7 = __ldaxr(p_shared_owners);
          while (__stlxr(v7 - 1, p_shared_owners));
          if (!v7)
          {
            ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
            std::__shared_weak_count::__release_weak(v5);
          }
        }
        v3 -= 16;
      }
      while (v3 != v1);
      v8 = *(void **)(a1 + 24);
      *(_QWORD *)(a1 + 32) = v1;
      operator delete(v8);
    }
  }
}

_QWORD *sub_20EC3B170(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  *a1 = &off_24C9CED28;
  v2 = (std::__shared_weak_count *)a1[4];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = (std::__shared_weak_count *)a1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  return a1;
}

void sub_20EC3B1B4(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  *a1 = &off_24C9CED28;
  v2 = (std::__shared_weak_count *)a1[4];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = (std::__shared_weak_count *)a1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20EC3B208(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;

  result = operator new(0x30uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = &off_24C9CED28;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = a1[4];
  result[3] = a1[3];
  result[4] = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 16);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  return result;
}

_QWORD *sub_20EC3B278(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;

  v3 = result[1];
  v2 = result[2];
  *a2 = &off_24C9CED28;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  v6 = result[4];
  a2[3] = result[3];
  a2[4] = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 16);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  return result;
}

void sub_20EC3B2C8(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  v2 = *(std::__shared_weak_count **)(a1 + 32);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
}

void sub_20EC3B304(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  v2 = (std::__shared_weak_count *)__p[4];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = (std::__shared_weak_count *)__p[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  operator delete(__p);
}

void sub_20EC3B33C(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  char v21;

  v2 = (std::__shared_weak_count *)a1[4];
  if (!v2)
  {
    v3 = 0;
    v5 = 0;
    v4 = (std::__shared_weak_count *)a1[2];
    if (v4)
      goto LABEL_6;
    goto LABEL_11;
  }
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
  {
    v5 = 0;
    v4 = (std::__shared_weak_count *)a1[2];
    if (v4)
      goto LABEL_6;
LABEL_11:
    v7 = 0;
    v8 = 0;
    goto LABEL_12;
  }
  v4 = (std::__shared_weak_count *)a1[2];
  v5 = a1[3];
  if (!v4)
    goto LABEL_11;
LABEL_6:
  v6 = std::__shared_weak_count::lock(v4);
  v7 = v6;
  if (v6)
  {
    v8 = a1[1];
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
LABEL_12:
    if (!v3)
      goto LABEL_15;
    goto LABEL_13;
  }
  v8 = 0;
  if (!v3)
    goto LABEL_15;
LABEL_13:
  v11 = (unint64_t *)&v3->__shared_owners_;
  do
    v12 = __ldxr(v11);
  while (__stxr(v12 + 1, v11));
LABEL_15:
  if (v8)
  {
    if (v5)
    {
      LOBYTE(v20) = 0;
      v21 = 0;
      sub_20EC3B660((uint64_t *)(v8 + 88), v5, &v20);
      if (v21)
        sub_20EC0BEE8(&v20);
    }
  }
  if (v3)
  {
    v13 = (unint64_t *)&v3->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  if (v7)
  {
    v15 = (unint64_t *)&v7->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
    do
      v17 = __ldaxr(v15);
    while (__stlxr(v17 - 1, v15));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  if (v3)
  {
    v18 = (unint64_t *)&v3->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_20EC3B504(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;

  if (a10)
    sub_20EC0BEE8(&a9);
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  if (v11)
  {
    v15 = (unint64_t *)&v11->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
    do
      v17 = __ldaxr(v15);
    while (__stlxr(v17 - 1, v15));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (v10)
  {
    v18 = (unint64_t *)&v10->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20EC3B5E8(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__16vectorINS0_2cf8ErrorRefENS4_9allocatorIS7_EEEESA"
                     "_vSA_Lb0EE25EnqueueMessageAndDispatchIZNKSB_4SendERKSA_EUlT_T0_E_EEvSE_SF_EUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__16vectorINS0_2cf8ErrorRefENS4_9allocato"
                                "rIS7_EEEESA_vSA_Lb0EE25EnqueueMessageAndDispatchIZNKSB_4SendERKSA_EUlT_T0_E_EEvSE_SF_EUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__16vectorINS0_2cf8ErrorRefENS4_9allocatorIS7_EEEESA_vSA_Lb0EE25EnqueueMessageAndDispatchIZNKSB_4SendERKSA_EUlT_T0_E_EEvSE_SF_EUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__16vectorINS0_2cf8ErrorRefENS4_9allocatorIS7_EEEESA_vSA_Lb0EE25EnqueueMessageAndDispatchIZNKSB_4SendERKSA_EUlT_T0_E_EEvSE_SF_EUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20EC3B654()
{
  return &unk_24C9CED88;
}

void sub_20EC3B660(uint64_t *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  unsigned __int8 v7;
  BOOL v8;
  uint64_t v9;
  uint64_t i;
  unsigned __int8 v11;
  _QWORD *v12;
  _QWORD *j;
  uint64_t v14;
  uint64_t v15;
  void **v16;
  void **v17;
  uint64_t v18;
  std::__shared_weak_count_vtbl **v19;
  std::__shared_weak_count_vtbl **v20;
  std::__shared_weak_count *v21;
  std::__shared_weak_count_vtbl *v22;
  unint64_t *p_shared_owners;
  unint64_t v24;
  std::__shared_weak_count *v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  void **v33;
  void **v34;
  void *v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  std::exception_ptr v39;
  std::__shared_weak_count *v40;
  void *__p;
  void **v42;
  uint64_t v43;
  char v44;

  v6 = *a1;
  if (!v6)
  {
    sub_21023D70C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/ProcessorInputMessageHandlingStrategy.h", 228, (uint64_t)"callable_", 9, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0);
    v7 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
    if ((v7 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
    {
      __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
      __cxa_guard_release(&qword_254A6DE78);
    }
    if (byte_254A6DE68)
      v8 = byte_254A6DE70 == 0;
    else
      v8 = 0;
    if (!v8)
    {
      v9 = qword_254A6DE40;
      for (i = qword_254A6DE48; v9 != i; v9 += 16)
        (*(void (**)(_QWORD, const char *, uint64_t, const char *, _QWORD))v9)(*(_QWORD *)(v9 + 8), "callable_", 9, "", 0);
    }
    v11 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
    if ((v11 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
    {
      __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
      __cxa_guard_release(&qword_254A6DE78);
    }
    if (!byte_254A6DE68)
      abort();
    qword_254A6DE58(unk_254A6DE60, "callable_", 9, "", 0);
    v6 = *a1;
  }
  (*(void (**)(void **__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v6 + 16))(&__p, v6, a2);
  v12 = a1 + 1;
  for (j = (_QWORD *)a1[2]; j != v12; j = (_QWORD *)j[1])
    (*(void (**)(_QWORD *, void **))(j[2] + 16))(j + 2, &__p);
  if (*((_BYTE *)a3 + 8))
  {
    v14 = *a3;
    if (!*a3)
      sub_20E96CE78(3u);
    std::mutex::lock((std::mutex *)(v14 + 24));
    if ((*(_BYTE *)(v14 + 136) & 1) != 0
      || (v39.__ptr_ = 0, v15 = *(_QWORD *)(v14 + 16), std::exception_ptr::~exception_ptr(&v39), v15))
    {
      sub_20E96CE78(2u);
    }
    *(_QWORD *)(v14 + 144) = 0;
    *(_QWORD *)(v14 + 152) = 0;
    *(_QWORD *)(v14 + 160) = 0;
    v16 = (void **)__p;
    v17 = v42;
    v43 = v14 + 144;
    v44 = 0;
    v18 = (char *)v42 - (_BYTE *)__p;
    if (v42 != __p)
    {
      if (v18 < 0)
        sub_20E867F44();
      v19 = (std::__shared_weak_count_vtbl **)operator new((char *)v42 - (_BYTE *)__p);
      *(_QWORD *)(v14 + 144) = v19;
      *(_QWORD *)(v14 + 152) = v19;
      *(_QWORD *)(v14 + 160) = &v19[2 * (v18 >> 4)];
      v20 = v19;
      while (1)
      {
        v22 = (std::__shared_weak_count_vtbl *)*v16;
        v21 = (std::__shared_weak_count *)v16[1];
        v39.__ptr_ = *v16;
        v40 = v21;
        if (v21)
        {
          p_shared_owners = (unint64_t *)&v21->__shared_owners_;
          do
            v24 = __ldxr(p_shared_owners);
          while (__stxr(v24 + 1, p_shared_owners));
        }
        if (v22)
          CFRetain(v22);
        v25 = (std::__shared_weak_count *)operator new();
        v26 = v25;
        v25->__shared_owners_ = 0;
        v27 = (unint64_t *)&v25->__shared_owners_;
        v25->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9AD888;
        v25->__shared_weak_owners_ = 0;
        v25[1].__vftable = v22;
        *v20 = v22;
        v20[1] = (std::__shared_weak_count_vtbl *)v25;
        do
          v28 = __ldxr(v27);
        while (__stxr(v28 + 1, v27));
        do
          v29 = __ldaxr(v27);
        while (__stlxr(v29 - 1, v27));
        if (v29)
        {
          v30 = v40;
          if (v40)
            goto LABEL_34;
        }
        else
        {
          ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
          std::__shared_weak_count::__release_weak(v26);
          v30 = v40;
          if (v40)
          {
LABEL_34:
            v31 = (unint64_t *)&v30->__shared_owners_;
            do
              v32 = __ldaxr(v31);
            while (__stlxr(v32 - 1, v31));
            if (!v32)
            {
              ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
              std::__shared_weak_count::__release_weak(v30);
            }
          }
        }
        v16 += 2;
        v20 += 2;
        if (v16 == v17)
        {
          *(_QWORD *)(v14 + 152) = v20;
          break;
        }
      }
    }
    *(_DWORD *)(v14 + 136) |= 5u;
    std::condition_variable::notify_all((std::condition_variable *)(v14 + 88));
    std::mutex::unlock((std::mutex *)(v14 + 24));
  }
  v33 = (void **)__p;
  if (__p)
  {
    v34 = v42;
    v35 = __p;
    if (v42 != __p)
    {
      do
      {
        v36 = (std::__shared_weak_count *)*(v34 - 1);
        if (v36)
        {
          v37 = (unint64_t *)&v36->__shared_owners_;
          do
            v38 = __ldaxr(v37);
          while (__stlxr(v38 - 1, v37));
          if (!v38)
          {
            ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
            std::__shared_weak_count::__release_weak(v36);
          }
        }
        v34 -= 2;
      }
      while (v34 != v33);
      v35 = __p;
    }
    v42 = v33;
    operator delete(v35);
  }
}

void sub_20EC3BA88(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, _QWORD *a11, uint64_t a12, int a13, __int16 a14, char a15, unsigned __int8 a16, void *a17, uint64_t a18, uint64_t a19, void **a20)
{
  std::mutex *v20;
  uint64_t *v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;

  sub_20EC06DA4(&a20);
  std::mutex::unlock(v20);
  sub_20E8C3144(&a17);
  if (a2 == 1)
  {
    v23 = (uint64_t *)__cxa_begin_catch(a1);
    v24 = *v23;
    a20 = (void **)(*(_QWORD *)(*(_QWORD *)(*v23 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL);
    a10 = (*(uint64_t (**)(void))(v24 + 16))();
    sub_20E9B0CC4("Caught unexpected exception of type: ", (const char *)&a20, "\n", "message: ", (const char *)&a10, "\n");
    if ((a16 & 0x80u) == 0)
      v25 = &a11;
    else
      v25 = a11;
    if ((a16 & 0x80u) == 0)
      v26 = a16;
    else
      v26 = a12;
    sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/ProcessorInputMessageHandlingStrategy.h", 140, (uint64_t)"", 0, (uint64_t)v25, v26, (void (*)(void **))sub_21023DDB0);
    abort();
  }
  _Unwind_Resume(a1);
}

void sub_20EC3BC10(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  __cxa_end_catch();
  JUMPOUT(0x20EC3BC30);
}

_QWORD *sub_20EC3BC3C(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;

  *a1 = &off_24C9CEDA8;
  v2 = a1[3];
  if (v2)
  {
    v3 = a1[4];
    v4 = (void *)a1[3];
    if (v3 != v2)
    {
      do
      {
        v5 = *(std::__shared_weak_count **)(v3 - 8);
        if (v5)
        {
          p_shared_owners = (unint64_t *)&v5->__shared_owners_;
          do
            v7 = __ldaxr(p_shared_owners);
          while (__stlxr(v7 - 1, p_shared_owners));
          if (!v7)
          {
            ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
            std::__shared_weak_count::__release_weak(v5);
          }
        }
        v3 -= 16;
      }
      while (v3 != v2);
      v4 = (void *)a1[3];
    }
    a1[4] = v2;
    operator delete(v4);
  }
  v8 = (std::__shared_weak_count *)a1[2];
  if (v8)
    std::__shared_weak_count::__release_weak(v8);
  return a1;
}

void sub_20EC3BCEC(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;

  *a1 = &off_24C9CEDA8;
  v2 = a1[3];
  if (v2)
  {
    v3 = a1[4];
    v4 = (void *)a1[3];
    if (v3 != v2)
    {
      do
      {
        v5 = *(std::__shared_weak_count **)(v3 - 8);
        if (v5)
        {
          p_shared_owners = (unint64_t *)&v5->__shared_owners_;
          do
            v7 = __ldaxr(p_shared_owners);
          while (__stlxr(v7 - 1, p_shared_owners));
          if (!v7)
          {
            ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
            std::__shared_weak_count::__release_weak(v5);
          }
        }
        v3 -= 16;
      }
      while (v3 != v2);
      v4 = (void *)a1[3];
    }
    a1[4] = v2;
    operator delete(v4);
  }
  v8 = (std::__shared_weak_count *)a1[2];
  if (v8)
    std::__shared_weak_count::__release_weak(v8);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20EC3BDAC(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;

  v2 = operator new(0x30uLL);
  v3 = v2;
  v5 = a1[1];
  v4 = a1[2];
  *v2 = &off_24C9CEDA8;
  v2[1] = v5;
  v2[2] = v4;
  if (v4)
  {
    v6 = (unint64_t *)(v4 + 16);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  v2[3] = 0;
  v2[4] = 0;
  v2[5] = 0;
  sub_20EC06C80(v2 + 3, a1[3], a1[4], (uint64_t)(a1[4] - a1[3]) >> 4);
  return v3;
}

void sub_20EC3BE20(_Unwind_Exception *a1)
{
  _QWORD *v1;
  std::__shared_weak_count *v3;

  v3 = (std::__shared_weak_count *)v1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_20EC3BE40(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = a1[1];
  v2 = a1[2];
  *a2 = &off_24C9CEDA8;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  a2[3] = 0;
  a2[4] = 0;
  a2[5] = 0;
  return sub_20EC06C80(a2 + 3, a1[3], a1[4], (uint64_t)(a1[4] - a1[3]) >> 4);
}

void sub_20EC3BEA8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  std::__shared_weak_count *v3;

  v3 = *(std::__shared_weak_count **)(v1 + 16);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  _Unwind_Resume(exception_object);
}

void sub_20EC3BEC0(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;

  v2 = a1[3];
  if (v2)
  {
    v3 = a1[4];
    v4 = (void *)a1[3];
    if (v3 != v2)
    {
      do
      {
        v5 = *(std::__shared_weak_count **)(v3 - 8);
        if (v5)
        {
          p_shared_owners = (unint64_t *)&v5->__shared_owners_;
          do
            v7 = __ldaxr(p_shared_owners);
          while (__stlxr(v7 - 1, p_shared_owners));
          if (!v7)
          {
            ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
            std::__shared_weak_count::__release_weak(v5);
          }
        }
        v3 -= 16;
      }
      while (v3 != v2);
      v4 = (void *)a1[3];
    }
    a1[4] = v2;
    operator delete(v4);
  }
  v8 = (std::__shared_weak_count *)a1[2];
  if (v8)
    std::__shared_weak_count::__release_weak(v8);
}

void sub_20EC3BF6C(_QWORD *__p)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;

  v2 = __p[3];
  if (v2)
  {
    v3 = __p[4];
    v4 = (void *)__p[3];
    if (v3 != v2)
    {
      do
      {
        v5 = *(std::__shared_weak_count **)(v3 - 8);
        if (v5)
        {
          p_shared_owners = (unint64_t *)&v5->__shared_owners_;
          do
            v7 = __ldaxr(p_shared_owners);
          while (__stlxr(v7 - 1, p_shared_owners));
          if (!v7)
          {
            ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
            std::__shared_weak_count::__release_weak(v5);
          }
        }
        v3 -= 16;
      }
      while (v3 != v2);
      v4 = (void *)__p[3];
    }
    __p[4] = v2;
    operator delete(v4);
  }
  v8 = (std::__shared_weak_count *)__p[2];
  if (v8)
    std::__shared_weak_count::__release_weak(v8);
  operator delete(__p);
}

void sub_20EC3C010(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v8;
  char v9;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 8);
      if (v5)
      {
        LOBYTE(v8) = 0;
        v9 = 0;
        sub_20EC3B660((uint64_t *)(v5 + 88), a1 + 24, &v8);
        if (v9)
          sub_20EC0BEE8(&v8);
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_20EC3C0B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v13;

  if (a10)
    sub_20EC0BEE8(&a9);
  p_shared_owners = (unint64_t *)&v10->__shared_owners_;
  do
    v13 = __ldaxr(p_shared_owners);
  while (__stlxr(v13 - 1, p_shared_owners));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20EC3C104(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__16vectorINS0_2cf8ErrorRefENS4_9allocatorIS7_EEEESA"
                     "_vSA_Lb0EE4SendERKSA_EUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__16vectorINS0_2cf8ErrorRefENS4_9allocato"
                                "rIS7_EEEESA_vSA_Lb0EE4SendERKSA_EUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__16vectorINS0_2cf8ErrorRefENS4_9allocatorIS7_EEEESA_vSA_Lb0EE4SendERKSA_EUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__16vectorINS0_2cf8ErrorRefENS4_9allocatorIS7_EEEESA_vSA_Lb0EE4SendERKSA_EUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20EC3C170()
{
  return &unk_24C9CEE08;
}

_QWORD *sub_20EC3C17C(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  char *v5;
  char *v6;
  char *v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;

  v2 = (std::__shared_weak_count *)a1[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (char *)a1[2];
    if (!v5)
      goto LABEL_16;
  }
  else
  {
LABEL_5:
    v5 = (char *)a1[2];
    if (!v5)
      goto LABEL_16;
  }
  v6 = (char *)a1[3];
  v7 = v5;
  if (v6 != v5)
  {
    do
    {
      v8 = (std::__shared_weak_count *)*((_QWORD *)v6 - 1);
      if (v8)
      {
        v9 = (unint64_t *)&v8->__shared_owners_;
        do
          v10 = __ldaxr(v9);
        while (__stlxr(v10 - 1, v9));
        if (!v10)
        {
          ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
          std::__shared_weak_count::__release_weak(v8);
        }
      }
      v6 -= 16;
    }
    while (v6 != v5);
    v7 = (char *)a1[2];
  }
  a1[3] = v5;
  operator delete(v7);
LABEL_16:
  v11 = (std::__shared_weak_count *)a1[1];
  if (v11)
    std::__shared_weak_count::__release_weak(v11);
  return a1;
}

_QWORD *sub_20EC3C264(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;

  *a1 = &off_24C9CEE28;
  v2 = (std::__shared_weak_count *)a1[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
      goto LABEL_7;
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  v5 = (std::__shared_weak_count *)a1[4];
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
LABEL_7:
  v6 = (std::__shared_weak_count *)a1[2];
  if (v6)
    std::__shared_weak_count::__release_weak(v6);
  return a1;
}

void sub_20EC3C2EC(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;

  *a1 = &off_24C9CEE28;
  v2 = (std::__shared_weak_count *)a1[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
    {
LABEL_7:
      v6 = (std::__shared_weak_count *)a1[2];
      if (v6)
        std::__shared_weak_count::__release_weak(v6);
      JUMPOUT(0x212BC6398);
    }
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
      goto LABEL_7;
  }
  std::__shared_weak_count::__release_weak(v5);
  goto LABEL_7;
}

_QWORD *sub_20EC3C384(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;

  result = operator new(0x38uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = &off_24C9CEE28;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = a1[4];
  result[3] = a1[3];
  result[4] = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 16);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  v10 = a1[6];
  result[5] = a1[5];
  result[6] = v10;
  if (v10)
  {
    v11 = (unint64_t *)(v10 + 8);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  return result;
}

_QWORD *sub_20EC3C414(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;

  v3 = result[1];
  v2 = result[2];
  *a2 = &off_24C9CEE28;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  v6 = result[4];
  a2[3] = result[3];
  a2[4] = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 16);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  v9 = result[6];
  a2[5] = result[5];
  a2[6] = v9;
  if (v9)
  {
    v10 = (unint64_t *)(v9 + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  return result;
}

void sub_20EC3C484(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;

  v2 = (std::__shared_weak_count *)a1[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
      goto LABEL_7;
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  v5 = (std::__shared_weak_count *)a1[4];
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
LABEL_7:
  v6 = (std::__shared_weak_count *)a1[2];
  if (v6)
    std::__shared_weak_count::__release_weak(v6);
}

void sub_20EC3C504(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;

  v2 = (std::__shared_weak_count *)__p[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)__p[4];
    if (!v5)
      goto LABEL_7;
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  v5 = (std::__shared_weak_count *)__p[4];
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
LABEL_7:
  v6 = (std::__shared_weak_count *)__p[2];
  if (v6)
    std::__shared_weak_count::__release_weak(v6);
  operator delete(__p);
}

void sub_20EC3C580(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t *v13;
  std::runtime_error_vtbl **v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  std::runtime_error *exception;
  std::runtime_error *v23;
  std::runtime_error *v24;
  std::runtime_error *v25;
  std::runtime_error v26;
  std::runtime_error v27;

  v2 = (std::__shared_weak_count *)a1[4];
  if (!v2)
  {
    v3 = 0;
    v5 = 0;
    v4 = (std::__shared_weak_count *)a1[2];
    if (v4)
      goto LABEL_6;
LABEL_11:
    v7 = 0;
    v8 = 0;
    goto LABEL_12;
  }
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
  {
    v5 = 0;
    v4 = (std::__shared_weak_count *)a1[2];
    if (v4)
      goto LABEL_6;
    goto LABEL_11;
  }
  v4 = (std::__shared_weak_count *)a1[2];
  v5 = a1[3];
  if (!v4)
    goto LABEL_11;
LABEL_6:
  v6 = std::__shared_weak_count::lock(v4);
  v7 = v6;
  if (!v6)
  {
    v8 = 0;
    if (!v3)
      goto LABEL_15;
    goto LABEL_13;
  }
  v8 = a1[1];
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  do
    v10 = __ldxr(p_shared_owners);
  while (__stxr(v10 + 1, p_shared_owners));
LABEL_12:
  if (!v3)
    goto LABEL_15;
LABEL_13:
  v11 = (unint64_t *)&v3->__shared_owners_;
  do
    v12 = __ldxr(v11);
  while (__stxr(v12 + 1, v11));
LABEL_15:
  if (!v8)
  {
    std::runtime_error::runtime_error(&v27, "Processor is no longer available.");
    v27.__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v23 = std::runtime_error::runtime_error(exception, &v27);
    v23->__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    __cxa_throw(v23, (struct type_info *)&unk_24CA1E2D0, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  if (!v5)
  {
    std::runtime_error::runtime_error(&v26, "Message was dropped.");
    v26.__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    v24 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v25 = std::runtime_error::runtime_error(v24, &v26);
    v25->__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    __cxa_throw(v25, (struct type_info *)&unk_24CA1E2D0, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  v13 = (uint64_t *)(v8 + 88);
  v14 = (std::runtime_error_vtbl **)a1[5];
  v26.__vftable = *v14;
  *v14 = 0;
  LOBYTE(v26.__imp_.__imp_) = 1;
  sub_20EC3B660(v13, v5, (uint64_t *)&v26);
  if (LOBYTE(v26.__imp_.__imp_))
    sub_20EC0BEE8((uint64_t *)&v26);
  if (v3)
  {
    v15 = (unint64_t *)&v3->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  if (v7)
  {
    v17 = (unint64_t *)&v7->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
    do
      v19 = __ldaxr(v17);
    while (__stlxr(v19 - 1, v17));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  if (v3)
  {
    v20 = (unint64_t *)&v3->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_20EC3C85C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10, uint64_t a11, uint64_t a12, std::runtime_error a13, std::exception_ptr a14)
{
  std::__shared_weak_count *v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;

  std::exception_ptr::~exception_ptr(&a14);
  std::runtime_error::~runtime_error(&a13);
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v18 = __ldaxr(p_shared_owners);
    while (__stlxr(v18 - 1, p_shared_owners));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  if (v15)
  {
    v19 = (unint64_t *)&v15->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
    do
      v21 = __ldaxr(v19);
    while (__stlxr(v21 - 1, v19));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  if (v14)
  {
    v22 = (unint64_t *)&v14->__shared_owners_;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  _Unwind_Resume(a1);
}

void sub_20EC3C888(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::runtime_error a10, std::exception_ptr a11, uint64_t a12, uint64_t a13, uint64_t a14, std::exception_ptr a15)
{
  uint64_t v15;
  std::__assoc_sub_state **v16;
  std::__assoc_sub_state *v17;
  std::exception_ptr v18;

  __cxa_begin_catch(a1);
  std::current_exception();
  __cxa_end_catch();
  v17 = *v16;
  if (v17)
  {
    std::exception_ptr::exception_ptr(&a15, &a11);
    v18.__ptr_ = &a15;
    std::__assoc_sub_state::set_exception(v17, v18);
    std::exception_ptr::~exception_ptr(&a15);
    std::exception_ptr::~exception_ptr(&a11);
    std::runtime_error::~runtime_error(&a10);
    if (!v15)
      JUMPOUT(0x20EC3C694);
    JUMPOUT(0x20EC3C664);
  }
  sub_20E96CE78(3u);
}

void sub_20EC3C8E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::runtime_error a10, std::exception_ptr a11, uint64_t a12, uint64_t a13, uint64_t a14, std::exception_ptr a15)
{
  std::__shared_weak_count *v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t *v23;
  unint64_t v24;

  std::exception_ptr::~exception_ptr(&a11);
  std::runtime_error::~runtime_error(&a10);
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v19 = __ldaxr(p_shared_owners);
    while (__stlxr(v19 - 1, p_shared_owners));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  if (v16)
  {
    v20 = (unint64_t *)&v16->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
    do
      v22 = __ldaxr(v20);
    while (__stlxr(v22 - 1, v20));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  if (v15)
  {
    v23 = (unint64_t *)&v15->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  _Unwind_Resume(a1);
}

void sub_20EC3C910(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;

  if (a11)
    sub_20EC0BEE8(&a10);
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v15 = __ldaxr(p_shared_owners);
    while (__stlxr(v15 - 1, p_shared_owners));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (v12)
  {
    v16 = (unint64_t *)&v12->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
    do
      v18 = __ldaxr(v16);
    while (__stlxr(v18 - 1, v16));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (v11)
  {
    v19 = (unint64_t *)&v11->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  _Unwind_Resume(a1);
}

uint64_t sub_20EC3C9FC(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__16vectorINS0_2cf8ErrorRefENS4_9allocatorIS7_EEEESA"
                     "_vSA_Lb0EE25EnqueueMessageAndDispatchIZNKSB_7ProcessERKSA_NS4_7promiseISA_EEEUlT_T0_E_EEvSE_SH_EUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__16vectorINS0_2cf8ErrorRefENS4_9allocato"
                                "rIS7_EEEESA_vSA_Lb0EE25EnqueueMessageAndDispatchIZNKSB_7ProcessERKSA_NS4_7promiseISA_EEE"
                                "UlT_T0_E_EEvSE_SH_EUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__16vectorINS0_2cf8ErrorRefENS4_9allocatorIS7_EEEESA_vSA_Lb0EE25EnqueueMessageAndDispatchIZNKSB_7ProcessERKSA_NS4_7promiseISA_EEEUlT_T0_E_EEvSE_SH_EUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__16vectorINS0_2cf8ErrorRefENS4_9allocatorIS7_EEEESA_vSA_Lb0EE25EnqueueMessageAndDispatchIZNKSB_7ProcessERKSA_NS4_7promiseISA_EEEUlT_T0_E_EEvSE_SH_EUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20EC3CA68()
{
  return &unk_24C9CEE88;
}

_QWORD *sub_20EC3CA74(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  char *v5;
  char *v6;
  char *v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;

  *a1 = &off_24C9CEEA8;
  v2 = (std::__shared_weak_count *)a1[7];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (char *)a1[3];
    if (!v5)
      goto LABEL_16;
  }
  else
  {
LABEL_5:
    v5 = (char *)a1[3];
    if (!v5)
      goto LABEL_16;
  }
  v6 = (char *)a1[4];
  v7 = v5;
  if (v6 != v5)
  {
    do
    {
      v8 = (std::__shared_weak_count *)*((_QWORD *)v6 - 1);
      if (v8)
      {
        v9 = (unint64_t *)&v8->__shared_owners_;
        do
          v10 = __ldaxr(v9);
        while (__stlxr(v10 - 1, v9));
        if (!v10)
        {
          ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
          std::__shared_weak_count::__release_weak(v8);
        }
      }
      v6 -= 16;
    }
    while (v6 != v5);
    v7 = (char *)a1[3];
  }
  a1[4] = v5;
  operator delete(v7);
LABEL_16:
  v11 = (std::__shared_weak_count *)a1[2];
  if (v11)
    std::__shared_weak_count::__release_weak(v11);
  return a1;
}

void sub_20EC3CB68(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  char *v5;
  char *v6;
  char *v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;

  *a1 = &off_24C9CEEA8;
  v2 = (std::__shared_weak_count *)a1[7];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (char *)a1[3];
    if (!v5)
      goto LABEL_16;
  }
  else
  {
LABEL_5:
    v5 = (char *)a1[3];
    if (!v5)
      goto LABEL_16;
  }
  v6 = (char *)a1[4];
  v7 = v5;
  if (v6 != v5)
  {
    do
    {
      v8 = (std::__shared_weak_count *)*((_QWORD *)v6 - 1);
      if (v8)
      {
        v9 = (unint64_t *)&v8->__shared_owners_;
        do
          v10 = __ldaxr(v9);
        while (__stlxr(v10 - 1, v9));
        if (!v10)
        {
          ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
          std::__shared_weak_count::__release_weak(v8);
        }
      }
      v6 -= 16;
    }
    while (v6 != v5);
    v7 = (char *)a1[3];
  }
  a1[4] = v5;
  operator delete(v7);
LABEL_16:
  v11 = (std::__shared_weak_count *)a1[2];
  if (v11)
    std::__shared_weak_count::__release_weak(v11);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20EC3CC6C(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  v2 = operator new(0x40uLL);
  v3 = v2;
  v5 = a1[1];
  v4 = a1[2];
  *v2 = &off_24C9CEEA8;
  v2[1] = v5;
  v2[2] = v4;
  if (v4)
  {
    v6 = (unint64_t *)(v4 + 16);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  v2[3] = 0;
  v2[4] = 0;
  v2[5] = 0;
  sub_20EC06C80(v2 + 3, a1[3], a1[4], (uint64_t)(a1[4] - a1[3]) >> 4);
  v8 = a1[7];
  v3[6] = a1[6];
  v3[7] = v8;
  if (v8)
  {
    v9 = (unint64_t *)(v8 + 8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  return v3;
}

void sub_20EC3CD00(_Unwind_Exception *a1)
{
  _QWORD *v1;
  std::__shared_weak_count *v3;

  v3 = (std::__shared_weak_count *)v1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_20EC3CD20(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  _QWORD *result;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;

  v5 = a1[1];
  v4 = a1[2];
  *a2 = &off_24C9CEEA8;
  a2[1] = v5;
  a2[2] = v4;
  if (v4)
  {
    v6 = (unint64_t *)(v4 + 16);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  a2[3] = 0;
  a2[4] = 0;
  a2[5] = 0;
  result = sub_20EC06C80(a2 + 3, a1[3], a1[4], (uint64_t)(a1[4] - a1[3]) >> 4);
  v9 = a1[7];
  a2[6] = a1[6];
  a2[7] = v9;
  if (v9)
  {
    v10 = (unint64_t *)(v9 + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  return result;
}

void sub_20EC3CDA8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  std::__shared_weak_count *v3;

  v3 = *(std::__shared_weak_count **)(v1 + 16);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  _Unwind_Resume(exception_object);
}

void sub_20EC3CDC0(uint64_t a1)
{
  sub_20EC3D05C((_QWORD *)(a1 + 8));
}

void sub_20EC3CDC8(_QWORD *a1)
{
  sub_20EC3D05C(a1 + 1);
  operator delete(a1);
}

void sub_20EC3CDF0(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  uint64_t v4;
  std::runtime_error_vtbl **v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::runtime_error *exception;
  std::runtime_error *v9;
  std::runtime_error v10;

  v2 = (std::__shared_weak_count *)a1[2];
  if (!v2 || (v3 = std::__shared_weak_count::lock(v2)) == 0 || (v4 = a1[1]) == 0)
  {
    std::runtime_error::runtime_error(&v10, "Invalid operation. Processor is released.");
    v10.__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v9 = std::runtime_error::runtime_error(exception, &v10);
    v9->__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    __cxa_throw(v9, (struct type_info *)&unk_24CA1E2D0, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  v5 = (std::runtime_error_vtbl **)a1[6];
  v10.__vftable = *v5;
  *v5 = 0;
  LOBYTE(v10.__imp_.__imp_) = 1;
  sub_20EC3B660((uint64_t *)(v4 + 88), (uint64_t)(a1 + 3), (uint64_t *)&v10);
  if (LOBYTE(v10.__imp_.__imp_))
    sub_20EC0BEE8((uint64_t *)&v10);
  p_shared_owners = (unint64_t *)&v3->__shared_owners_;
  do
    v7 = __ldaxr(p_shared_owners);
  while (__stlxr(v7 - 1, p_shared_owners));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
}

void sub_20EC3CF00(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::runtime_error a10, std::exception_ptr a11)
{
  __break(1u);
}

void sub_20EC3CF78(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::runtime_error a10, std::exception_ptr a11)
{
  uint64_t v11;

  std::exception_ptr::~exception_ptr((std::exception_ptr *)&a9);
  std::runtime_error::~runtime_error(&a10);
  if (v11)
    JUMPOUT(0x20EC3CFACLL);
  JUMPOUT(0x20EC3CFDCLL);
}

uint64_t sub_20EC3CFE4(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__16vectorINS0_2cf8ErrorRefENS4_9allocatorIS7_EEEESA"
                     "_vSA_Lb0EE7ProcessERKSA_NS4_7promiseISA_EEEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__16vectorINS0_2cf8ErrorRefENS4_9allocato"
                                "rIS7_EEEESA_vSA_Lb0EE7ProcessERKSA_NS4_7promiseISA_EEEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__16vectorINS0_2cf8ErrorRefENS4_9allocatorIS7_EEEESA_vSA_Lb0EE7ProcessERKSA_NS4_7promiseISA_EEEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__16vectorINS0_2cf8ErrorRefENS4_9allocatorIS7_EEEESA_vSA_Lb0EE7ProcessERKSA_NS4_7promiseISA_EEEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20EC3D050()
{
  return &unk_24C9CEF08;
}

void sub_20EC3D05C(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  char *v5;
  char *v6;
  char *v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;

  v2 = (std::__shared_weak_count *)a1[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (char *)a1[2];
    if (!v5)
      goto LABEL_16;
  }
  else
  {
LABEL_5:
    v5 = (char *)a1[2];
    if (!v5)
      goto LABEL_16;
  }
  v6 = (char *)a1[3];
  v7 = v5;
  if (v6 != v5)
  {
    do
    {
      v8 = (std::__shared_weak_count *)*((_QWORD *)v6 - 1);
      if (v8)
      {
        v9 = (unint64_t *)&v8->__shared_owners_;
        do
          v10 = __ldaxr(v9);
        while (__stlxr(v10 - 1, v9));
        if (!v10)
        {
          ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
          std::__shared_weak_count::__release_weak(v8);
        }
      }
      v6 -= 16;
    }
    while (v6 != v5);
    v7 = (char *)a1[2];
  }
  a1[3] = v5;
  operator delete(v7);
LABEL_16:
  v11 = (std::__shared_weak_count *)a1[1];
  if (v11)
    std::__shared_weak_count::__release_weak(v11);
}

_QWORD *sub_20EC3D14C(_QWORD *a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;

  *a1 = &off_24C9CEF28;
  v2 = a1[4];
  a1[3] = &off_24C9B4888;
  a1[4] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = (std::__shared_weak_count *)a1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  return a1;
}

void sub_20EC3D1A4(_QWORD *a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;

  *a1 = &off_24C9CEF28;
  v2 = a1[4];
  a1[3] = &off_24C9B4888;
  a1[4] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = (std::__shared_weak_count *)a1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20EC3D20C(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;

  v2 = operator new(0x28uLL);
  v3 = v2;
  v5 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  *v2 = &off_24C9CEF28;
  v2[1] = v5;
  v2[2] = v4;
  if (v4)
  {
    v6 = (unint64_t *)(v4 + 16);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  v2[3] = &off_24C9B4888;
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32));
  return v3;
}

void sub_20EC3D284(_Unwind_Exception *a1)
{
  _QWORD *v1;
  std::__shared_weak_count *v3;

  v3 = (std::__shared_weak_count *)v1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20EC3D2A4(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  *a2 = &off_24C9CEF28;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  a2[3] = &off_24C9B4888;
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32));
}

void sub_20EC3D30C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  std::__shared_weak_count *v3;

  v3 = *(std::__shared_weak_count **)(v1 + 16);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  _Unwind_Resume(exception_object);
}

void sub_20EC3D324(_QWORD *a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;

  v2 = a1[4];
  a1[3] = &off_24C9B4888;
  a1[4] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = (std::__shared_weak_count *)a1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
}

void sub_20EC3D374(_QWORD *__p)
{
  uint64_t v2;
  std::__shared_weak_count *v3;

  v2 = __p[4];
  __p[3] = &off_24C9B4888;
  __p[4] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = (std::__shared_weak_count *)__p[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  operator delete(__p);
}

void sub_20EC3D3C0(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;

  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = a1[1];
      if (v5)
      {
        v6 = operator new(0x20uLL);
        v7 = a1[4];
        a1[4] = 0;
        v6[2] = &off_24C9B4888;
        v6[3] = v7;
        v9 = *(_QWORD *)(v5 + 96);
        v8 = (_QWORD *)(v5 + 96);
        *v6 = v9;
        v6[1] = v8;
        *(_QWORD *)(v9 + 8) = v6;
        *v8 = v6;
        ++v8[2];
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v11 = __ldaxr(p_shared_owners);
      while (__stlxr(v11 - 1, p_shared_owners));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_20EC3D474(_Unwind_Exception *exception_object)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v4;

  p_shared_owners = (unint64_t *)&v1->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20EC3D4B0(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3kit11concurrency6detail9ProcessorINSt3__16vectorINS0_2cf8ErrorRefENS4_9allocatorIS7_EEEESA_"
                     "vSA_Lb0EE9SubscribeENS1_12ChannelInputISA_EEEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4cv3d3kit11concurrency6detail9ProcessorINSt3__16vectorINS0_2cf8ErrorRefENS4_9allocator"
                                "IS7_EEEESA_vSA_Lb0EE9SubscribeENS1_12ChannelInputISA_EEEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3kit11concurrency6detail9ProcessorINSt3__16vectorINS0_2cf8ErrorRefENS4_9allocatorIS7_EEEESA_vSA_Lb0EE9SubscribeENS1_12ChannelInputISA_EEEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3kit11concurrency6detail9ProcessorINSt3__16vectorINS0_2cf8ErrorRefENS4_9allocatorIS7_EEEESA_vSA_Lb0EE9SubscribeENS1_12ChannelInputISA_EEEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20EC3D51C()
{
  return &unk_24C9CEF88;
}

_QWORD *sub_20EC3D528(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_24C9CEFA8;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_20EC3D560(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_24C9CEFA8;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20EC3D5A8(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x20uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *result = &off_24C9CEFA8;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  return result;
}

uint64_t sub_20EC3D5F8(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = *(_QWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 16);
  *a2 = &off_24C9CEFA8;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

void sub_20EC3D628(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void sub_20EC3D638(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void sub_20EC3D664(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 8);
      if (v5)
      {
        v6 = operator new(0x18uLL);
        v8 = *(_QWORD *)(v5 + 120);
        v7 = (_QWORD *)(v5 + 120);
        *v6 = v8;
        v6[1] = v7;
        *(_QWORD *)(v8 + 8) = v6;
        *v7 = v6;
        ++v7[2];
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v10 = __ldaxr(p_shared_owners);
      while (__stlxr(v10 - 1, p_shared_owners));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_20EC3D6F8(_Unwind_Exception *exception_object)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v4;

  p_shared_owners = (unint64_t *)&v1->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20EC3D734(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3kit11concurrency6detail9ProcessorINSt3__16vectorINS0_2cf8ErrorRefENS4_9allocatorIS7_EEEESA_"
                     "vSA_Lb0EE15AddErrorHandlerENS1_12ChannelInputIvEEEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4cv3d3kit11concurrency6detail9ProcessorINSt3__16vectorINS0_2cf8ErrorRefENS4_9allocator"
                                "IS7_EEEESA_vSA_Lb0EE15AddErrorHandlerENS1_12ChannelInputIvEEEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3kit11concurrency6detail9ProcessorINSt3__16vectorINS0_2cf8ErrorRefENS4_9allocatorIS7_EEEESA_vSA_Lb0EE15AddErrorHandlerENS1_12ChannelInputIvEEEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3kit11concurrency6detail9ProcessorINSt3__16vectorINS0_2cf8ErrorRefENS4_9allocatorIS7_EEEESA_vSA_Lb0EE15AddErrorHandlerENS1_12ChannelInputIvEEEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20EC3D7A0()
{
  return &unk_24C9CF008;
}

_QWORD *sub_20EC3D7AC(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_24C9CF028;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_20EC3D7E4(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_24C9CF028;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20EC3D82C(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x20uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = &off_24C9CF028;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  result[3] = a1[3];
  return result;
}

_QWORD *sub_20EC3D884(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = result[1];
  v2 = result[2];
  *a2 = &off_24C9CF028;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  a2[3] = result[3];
  return result;
}

void sub_20EC3D8BC(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void sub_20EC3D8CC(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void sub_20EC3D8F8(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  uint64_t *v6;
  unint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p[2];
  char *v16;
  __int128 v17;
  char *v18;
  uint64_t v19;
  __int128 *v20;

  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = a1[1];
      if (!v5)
      {
LABEL_11:
        p_shared_owners = (unint64_t *)&v4->__shared_owners_;
        do
          v14 = __ldaxr(p_shared_owners);
        while (__stlxr(v14 - 1, p_shared_owners));
        if (!v14)
        {
          ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
          std::__shared_weak_count::__release_weak(v4);
        }
        return;
      }
      v6 = (uint64_t *)a1[3];
      v7 = *(_QWORD *)(v5 + 112);
      v18 = 0;
      v17 = 0uLL;
      if (v7)
      {
        if (v7 >> 61)
          sub_20E92CED8();
        v8 = (char *)operator new(8 * v7);
        v9 = &v8[8 * v7];
        *(_QWORD *)&v17 = v8;
        *((_QWORD *)&v17 + 1) = v8;
        v18 = v9;
        v10 = v5 + 96;
        v11 = *(_QWORD *)(v5 + 104);
        v20 = &v17;
        if (v11 != v10)
        {
          do
          {
LABEL_7:
            v19 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v11 + 24) + 48))(*(_QWORD *)(v11 + 24));
            sub_20E9B2D04((uint64_t *)&v20, &v19);
            v11 = *(_QWORD *)(v11 + 8);
          }
          while (v11 != v10);
          *(_OWORD *)__p = v17;
          v16 = v18;
          v12 = *v6;
          if (*v6)
            goto LABEL_9;
          goto LABEL_18;
        }
      }
      else
      {
        v9 = 0;
        v8 = 0;
        v10 = v5 + 96;
        v11 = *(_QWORD *)(v5 + 104);
        v20 = &v17;
        if (v11 != v10)
          goto LABEL_7;
      }
      *(int64x2_t *)__p = vdupq_n_s64((unint64_t)v8);
      v16 = v9;
      v12 = *v6;
      if (*v6)
      {
LABEL_9:
        sub_20EA04C5C(v12, (uint64_t)__p);
        if (__p[0])
        {
          __p[1] = __p[0];
          operator delete(__p[0]);
        }
        goto LABEL_11;
      }
LABEL_18:
      sub_20E96CE78(3u);
    }
  }
}

void sub_20EC3DA74(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v17;

  if (__p)
    operator delete(__p);
  p_shared_owners = (unint64_t *)&v14->__shared_owners_;
  do
    v17 = __ldaxr(p_shared_owners);
  while (__stlxr(v17 - 1, p_shared_owners));
  if (!v17)
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20EC3DAE4(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__16vectorINS0_2cf8ErrorRefENS4_9allocatorIS7_EEEESA"
                     "_vSA_Lb0EE16OutputHandlerIDsEvEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__16vectorINS0_2cf8ErrorRefENS4_9allocato"
                                "rIS7_EEEESA_vSA_Lb0EE16OutputHandlerIDsEvEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__16vectorINS0_2cf8ErrorRefENS4_9allocatorIS7_EEEESA_vSA_Lb0EE16OutputHandlerIDsEvEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__16vectorINS0_2cf8ErrorRefENS4_9allocatorIS7_EEEESA_vSA_Lb0EE16OutputHandlerIDsEvEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20EC3DB50()
{
  return &unk_24C9CF088;
}

_QWORD *sub_20EC3DB5C(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_24C9CF0A8;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_20EC3DB94(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_24C9CF0A8;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20EC3DBDC(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x20uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = &off_24C9CF0A8;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  result[3] = a1[3];
  return result;
}

_QWORD *sub_20EC3DC34(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = result[1];
  v2 = result[2];
  *a2 = &off_24C9CF0A8;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  a2[3] = result[3];
  return result;
}

void sub_20EC3DC6C(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void sub_20EC3DC7C(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void sub_20EC3DCA8(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  void *__p;
  void *v9;
  uint64_t v10;

  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      if (a1[1])
      {
        v5 = (uint64_t *)a1[3];
        __p = 0;
        v9 = 0;
        v10 = 0;
        if (!*v5)
          sub_20E96CE78(3u);
        sub_20EA04C5C(*v5, (uint64_t)&__p);
        if (__p)
        {
          v9 = __p;
          operator delete(__p);
        }
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_20EC3DD60(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (__p)
    operator delete(__p);
  p_shared_owners = (unint64_t *)&v11->__shared_owners_;
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20EC3DDAC(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__16vectorINS0_2cf8ErrorRefENS4_9allocatorIS7_EEEESA"
                     "_vSA_Lb0EE15ErrorHandlerIDsEvEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__16vectorINS0_2cf8ErrorRefENS4_9allocato"
                                "rIS7_EEEESA_vSA_Lb0EE15ErrorHandlerIDsEvEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__16vectorINS0_2cf8ErrorRefENS4_9allocatorIS7_EEEESA_vSA_Lb0EE15ErrorHandlerIDsEvEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__16vectorINS0_2cf8ErrorRefENS4_9allocatorIS7_EEEESA_vSA_Lb0EE15ErrorHandlerIDsEvEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20EC3DE18()
{
  return &unk_24C9CF108;
}

void sub_20EC3DE28(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20EC3DE4C(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t sub_20EC3DE64(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail9ProcessorINS_6vectorINS2_2cf8ErrorRefENS_9alloca"
                     "torIS8_EEEESB_vSB_Lb0EEEE27__shared_ptr_default_deleteISC_SC_EE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail9ProcessorINS_6vectorINS2_2cf8ErrorRef"
                                "ENS_9allocatorIS8_EEEESB_vSB_Lb0EEEE27__shared_ptr_default_deleteISC_SC_EE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail9ProcessorINS_6vectorINS2_2cf8ErrorRefENS_9allocatorIS8_EEEESB_vSB_Lb0EEEE27__shared_ptr_default_deleteISC_SC_EE"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail9ProcessorINS_6vectorINS2_2cf8ErrorRefENS_9allocatorIS8_EEEESB_vSB_Lb0EEEE27__shared_ptr_default_deleteISC_SC_EE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

uint64_t sub_20EC3DED4(uint64_t a1)
{
  std::__shared_weak_count *v2;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_20EC3DF00(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20EC3DF3C@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *result;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;

  result = (_QWORD *)operator new();
  v6 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  *result = &off_24C9CF178;
  result[1] = v6;
  result[2] = v5;
  if (v5)
  {
    v7 = (unint64_t *)(v5 + 16);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  *a2 = result;
  return result;
}

void sub_20EC3DFA4(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 8);
      if (v5)
        (*(void (**)(uint64_t))(*(_QWORD *)v5 + 32))(v5);
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_20EC3E034(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20EC3E048(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 8);
      if (v5)
        (*(void (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_20EC3E0D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20EC3E0EC(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return 0;
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
    return 0;
  v4 = v3;
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
    v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 48))(v5);
  else
    v6 = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (v9)
    return v6;
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return v6;
}

void sub_20EC3E1B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20EC3E1C4(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return 0;
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
    return 0;
  v4 = v3;
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
    v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 24))(v5);
  else
    v6 = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (v9)
    return v6;
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return v6;
}

void sub_20EC3E288(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20EC3E29C(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3)
  {
    v5 = std::__shared_weak_count::lock(v3);
    if (v5)
    {
      v6 = v5;
      v7 = *(_QWORD *)(a1 + 8);
      if (v7)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v7 + 16))(v7, a2);
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
}

void sub_20EC3E340(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20EC3E358()
{
  JUMPOUT(0x212BC6398);
}

__n128 sub_20EC3E36C(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_24C9CF1E0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_20EC3E3A4(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24C9CF1E0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_20EC3E3C4(uint64_t a1)
{
  uint64_t result;
  unsigned int *v2;
  unsigned int v3;
  unsigned int v4;

  result = **(_QWORD **)(a1 + 8);
  if (result)
  {
    v2 = (unsigned int *)(result + 24);
    do
    {
      v3 = __ldaxr(v2);
      v4 = v3 - 1;
    }
    while (__stlxr(v4, v2));
    if (!v4)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

uint64_t sub_20EC3E3F8(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "N4cv3d3esn5Defer11BindWrapperINSt3__16__bindIRZNS_3vio22slam_engine_node_group22CAPICallbackNodeWor"
                     "kerclERKNS3_10shared_ptrIKNS5_15odometry_engine11VIOMetadataEEEE3$_3JEEEEE")
    return a1 + 8;
  if (((v3 & (unint64_t)"N4cv3d3esn5Defer11BindWrapperINSt3__16__bindIRZNS_3vio22slam_engine_node_group22CAPICall"
                                "backNodeWorkerclERKNS3_10shared_ptrIKNS5_15odometry_engine11VIOMetadataEEEE3$_3JEEEEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "N4cv3d3esn5Defer11BindWrapperINSt3__16__bindIRZNS_3vio22slam_engine_node_group22CAPICallbackNodeWorkerclERKNS3_10shared_ptrIKNS5_15odometry_engine11VIOMetadataEEEE3$_3JEEEEE"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"N4cv3d3esn5Defer11BindWrapperINSt3__16__bindIRZNS_3vio22slam_engine_node_group22CAPICallbackNodeWorkerclERKNS3_10shared_ptrIKNS5_15odometry_engine11VIOMetadataEEEE3$_3JEEEEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20EC3E464()
{
  return &unk_24C9CF240;
}

uint64_t sub_20EC3E470(uint64_t *a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v5;
  unint64_t v11;
  uint8x8_t v12;
  _QWORD *v13;
  _QWORD *v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v18;
  _QWORD *v19;
  unint64_t *v20;
  unint64_t v21;
  float v22;
  float v23;
  uint64_t v24;
  _QWORD *v25;
  _BOOL8 v26;
  unint64_t v27;
  unint64_t v28;
  size_t prime;
  void *v30;
  void *v31;
  uint64_t v32;
  _QWORD *v33;
  size_t v34;
  size_t v35;
  size_t v36;
  _QWORD *i;
  size_t v38;
  uint64_t v39;
  unint64_t v40;
  uint8x8_t v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  size_t v45;
  uint64_t v46;
  void *v47;
  unint64_t v48;

  v11 = a1[1];
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    if (v12.u32[0] > 1uLL)
    {
      v5 = a2;
      if (v11 <= a2)
        v5 = a2 % v11;
    }
    else
    {
      v5 = (v11 - 1) & a2;
    }
    v13 = *(_QWORD **)(*a1 + 8 * v5);
    if (v13)
    {
      v14 = (_QWORD *)*v13;
      if (v14)
      {
        if (v12.u32[0] < 2uLL)
        {
          while (1)
          {
            v16 = v14[1];
            if (v16 == a2)
            {
              if (v14[2] == a2)
                return 0;
            }
            else if ((v16 & (v11 - 1)) != v5)
            {
              goto LABEL_23;
            }
            v14 = (_QWORD *)*v14;
            if (!v14)
              goto LABEL_23;
          }
        }
        do
        {
          v15 = v14[1];
          if (v15 == a2)
          {
            if (v14[2] == a2)
              return 0;
          }
          else
          {
            if (v15 >= v11)
              v15 %= v11;
            if (v15 != v5)
              break;
          }
          v14 = (_QWORD *)*v14;
        }
        while (v14);
      }
    }
  }
LABEL_23:
  v18 = a1 + 2;
  v19 = operator new(0x28uLL);
  *v19 = 0;
  v19[1] = a2;
  v19[2] = a3;
  v19[3] = a4;
  v19[4] = a5;
  if (a5)
  {
    v20 = (unint64_t *)(a5 + 8);
    do
      v21 = __ldxr(v20);
    while (__stxr(v21 + 1, v20));
  }
  v22 = (float)(unint64_t)(a1[3] + 1);
  v23 = *((float *)a1 + 8);
  if (!v11 || (float)(v23 * (float)v11) < v22)
  {
    v26 = 1;
    if (v11 >= 3)
      v26 = (v11 & (v11 - 1)) != 0;
    v27 = v26 | (2 * v11);
    v28 = vcvtps_u32_f32(v22 / v23);
    if (v27 <= v28)
      prime = v28;
    else
      prime = v27;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
    }
    v11 = a1[1];
    if (prime > v11)
    {
LABEL_40:
      if (prime >> 61)
        sub_20E877A38();
      v30 = operator new(8 * prime);
      v31 = (void *)*a1;
      *a1 = (uint64_t)v30;
      if (v31)
        operator delete(v31);
      v32 = 0;
      a1[1] = prime;
      do
        *(_QWORD *)(*a1 + 8 * v32++) = 0;
      while (prime != v32);
      v33 = (_QWORD *)*v18;
      if (!*v18)
        goto LABEL_72;
      v34 = v33[1];
      v35 = prime - 1;
      if ((prime & (prime - 1)) == 0)
      {
        v36 = v34 & v35;
        *(_QWORD *)(*a1 + 8 * v36) = v18;
        for (i = (_QWORD *)*v33; *v33; i = (_QWORD *)*v33)
        {
          v38 = i[1] & v35;
          if (v38 == v36)
          {
            v33 = i;
          }
          else if (*(_QWORD *)(*a1 + 8 * v38))
          {
            *v33 = *i;
            v39 = 8 * v38;
            *i = **(_QWORD **)(*a1 + v39);
            **(_QWORD **)(*a1 + v39) = i;
          }
          else
          {
            *(_QWORD *)(*a1 + 8 * v38) = v33;
            v33 = i;
            v36 = v38;
          }
        }
        goto LABEL_72;
      }
      if (v34 >= prime)
        v34 %= prime;
      *(_QWORD *)(*a1 + 8 * v34) = v18;
      v43 = (_QWORD *)*v33;
      if (!*v33)
      {
LABEL_72:
        v11 = prime;
        v46 = prime - 1;
        if ((prime & (prime - 1)) != 0)
          goto LABEL_73;
        goto LABEL_88;
      }
      while (1)
      {
        v45 = v43[1];
        if (v45 >= prime)
          v45 %= prime;
        if (v45 == v34)
          goto LABEL_66;
        if (*(_QWORD *)(*a1 + 8 * v45))
        {
          *v33 = *v43;
          v44 = 8 * v45;
          *v43 = **(_QWORD **)(*a1 + v44);
          **(_QWORD **)(*a1 + v44) = v43;
          v43 = v33;
LABEL_66:
          v33 = v43;
          v43 = (_QWORD *)*v43;
          if (!v43)
            goto LABEL_72;
        }
        else
        {
          *(_QWORD *)(*a1 + 8 * v45) = v33;
          v33 = v43;
          v43 = (_QWORD *)*v43;
          v34 = v45;
          if (!v43)
            goto LABEL_72;
        }
      }
    }
    if (prime < v11)
    {
      v40 = vcvtps_u32_f32((float)(unint64_t)a1[3] / *((float *)a1 + 8));
      if (v11 < 3 || (v41 = (uint8x8_t)vcnt_s8((int8x8_t)v11), v41.i16[0] = vaddlv_u8(v41), v41.u32[0] > 1uLL))
      {
        v40 = std::__next_prime(v40);
      }
      else
      {
        v42 = 1 << -(char)__clz(v40 - 1);
        if (v40 >= 2)
          v40 = v42;
      }
      if (prime <= v40)
        prime = v40;
      if (prime < v11)
      {
        if (!prime)
        {
          v47 = (void *)*a1;
          *a1 = 0;
          if (v47)
            operator delete(v47);
          v11 = 0;
          a1[1] = 0;
          v46 = -1;
          goto LABEL_88;
        }
        goto LABEL_40;
      }
      v11 = a1[1];
    }
    v46 = v11 - 1;
    if ((v11 & (v11 - 1)) != 0)
    {
LABEL_73:
      if (v11 <= a2)
      {
        v5 = a2 % v11;
        v24 = *a1;
        v25 = *(_QWORD **)(*a1 + 8 * (a2 % v11));
        if (v25)
          goto LABEL_29;
      }
      else
      {
        v5 = a2;
        v24 = *a1;
        v25 = *(_QWORD **)(*a1 + 8 * a2);
        if (v25)
          goto LABEL_29;
      }
      goto LABEL_89;
    }
LABEL_88:
    v5 = v46 & a2;
    v24 = *a1;
    v25 = *(_QWORD **)(*a1 + 8 * (v46 & a2));
    if (v25)
      goto LABEL_29;
    goto LABEL_89;
  }
  v24 = *a1;
  v25 = *(_QWORD **)(*a1 + 8 * v5);
  if (v25)
  {
LABEL_29:
    *v19 = *v25;
LABEL_95:
    *v25 = v19;
    goto LABEL_96;
  }
LABEL_89:
  *v19 = *v18;
  *v18 = v19;
  *(_QWORD *)(v24 + 8 * v5) = v18;
  if (*v19)
  {
    v48 = *(_QWORD *)(*v19 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v48 >= v11)
        v48 %= v11;
    }
    else
    {
      v48 &= v11 - 1;
    }
    v25 = (_QWORD *)(*a1 + 8 * v48);
    goto LABEL_95;
  }
LABEL_96:
  ++a1[3];
  return 1;
}

void sub_20EC3E94C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20EC3E960((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20EC3E960(uint64_t a1)
{
  _QWORD *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  v2 = *(_QWORD **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
    {
      v3 = (std::__shared_weak_count *)v2[4];
      if (v3)
      {
        p_shared_owners = (unint64_t *)&v3->__shared_owners_;
        do
          v5 = __ldaxr(p_shared_owners);
        while (__stlxr(v5 - 1, p_shared_owners));
        if (!v5)
        {
          ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
          std::__shared_weak_count::__release_weak(v3);
        }
      }
    }
    operator delete(v2);
  }
  return a1;
}

uint64_t sub_20EC3E9DC(uint64_t *a1, unint64_t a2)
{
  int8x8_t v2;
  uint8x8_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t **v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t *v12;
  uint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;

  v2 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v2)
    return 0;
  v3 = (uint8x8_t)vcnt_s8(v2);
  v3.i16[0] = vaddlv_u8(v3);
  if (v3.u32[0] > 1uLL)
  {
    v4 = a2;
    if (*(_QWORD *)&v2 <= a2)
      v4 = a2 % *(_QWORD *)&v2;
  }
  else
  {
    v4 = (*(_QWORD *)&v2 - 1) & a2;
  }
  v5 = *a1;
  v6 = *(uint64_t ***)(*a1 + 8 * v4);
  if (!v6)
    return 0;
  v7 = *v6;
  if (!*v6)
    return 0;
  v8 = *(_QWORD *)&v2 - 1;
  if (v3.u32[0] < 2uLL)
  {
    while (1)
    {
      v9 = v7[1];
      if (v9 == a2)
      {
        if (v7[2] == a2)
          goto LABEL_22;
      }
      else if ((v9 & v8) != v4)
      {
        return 0;
      }
      v7 = (uint64_t *)*v7;
      if (!v7)
        return 0;
    }
  }
  while (1)
  {
    v10 = v7[1];
    if (v10 == a2)
      break;
    if (v10 >= *(_QWORD *)&v2)
      v10 %= *(_QWORD *)&v2;
    if (v10 != v4)
      return 0;
LABEL_16:
    v7 = (uint64_t *)*v7;
    if (!v7)
      return 0;
  }
  if (v7[2] != a2)
    goto LABEL_16;
LABEL_22:
  if (v3.u32[0] > 1uLL)
  {
    if (*(_QWORD *)&v2 <= a2)
      a2 %= *(_QWORD *)&v2;
  }
  else
  {
    a2 &= v8;
  }
  v12 = *(uint64_t **)(v5 + 8 * a2);
  do
  {
    v13 = v12;
    v12 = (uint64_t *)*v12;
  }
  while (v12 != v7);
  if (v13 == a1 + 2)
    goto LABEL_39;
  v14 = v13[1];
  if (v3.u32[0] > 1uLL)
  {
    if (v14 >= *(_QWORD *)&v2)
      v14 %= *(_QWORD *)&v2;
  }
  else
  {
    v14 &= v8;
  }
  if (v14 != a2)
  {
LABEL_39:
    if (!*v7)
      goto LABEL_40;
    v15 = *(_QWORD *)(*v7 + 8);
    if (v3.u32[0] > 1uLL)
    {
      if (v15 >= *(_QWORD *)&v2)
        v15 %= *(_QWORD *)&v2;
    }
    else
    {
      v15 &= v8;
    }
    if (v15 != a2)
LABEL_40:
      *(_QWORD *)(v5 + 8 * a2) = 0;
  }
  v16 = *v7;
  if (*v7)
  {
    v17 = *(_QWORD *)(v16 + 8);
    if (v3.u32[0] > 1uLL)
    {
      if (v17 >= *(_QWORD *)&v2)
        v17 %= *(_QWORD *)&v2;
    }
    else
    {
      v17 &= v8;
    }
    if (v17 != a2)
    {
      *(_QWORD *)(*a1 + 8 * v17) = v13;
      v16 = *v7;
    }
  }
  *v13 = v16;
  *v7 = 0;
  --a1[3];
  v18 = (std::__shared_weak_count *)v7[4];
  if (v18)
  {
    p_shared_owners = (unint64_t *)&v18->__shared_owners_;
    do
      v20 = __ldaxr(p_shared_owners);
    while (__stlxr(v20 - 1, p_shared_owners));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  operator delete(v7);
  return 1;
}

uint64_t sub_20EC3EC0C(uint64_t a1, char a2)
{
  uint64_t v3;
  void **v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  char *v11;
  void **v12;
  char *v13;
  void **v14;
  char *v15;
  char *v16;
  void **v17;
  char *v18;
  char *v19;
  void **v20;
  char *v21;
  char *v22;
  void **v23;
  __int16 v25;
  __int128 __dst;
  uint64_t v27;
  uint64_t v28;

  v28 = *MEMORY[0x24BDAC8D0];
  *(_OWORD *)(a1 + 8) = 0u;
  v3 = a1 + 8;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  v4 = (void **)(a1 + 64);
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  v5 = a1 + 120;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  v6 = a1 + 176;
  *(_OWORD *)(a1 + 232) = 0u;
  v7 = a1 + 232;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 280) = 0u;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_QWORD *)a1 = &off_24C9CF260;
  *(_QWORD *)(a1 + 56) = &unk_24C9CF2A8;
  *(_QWORD *)(a1 + 112) = &unk_24C9CF2D0;
  *(_QWORD *)(a1 + 168) = &unk_24C9CF2F8;
  *(_QWORD *)(a1 + 224) = &unk_24C9CF320;
  *(_BYTE *)(a1 + 328) = a2;
  DWORD2(__dst) = 1701080910;
  *(_QWORD *)&__dst = *(_QWORD *)"ansform Node";
  v8 = (char *)operator new(0x68uLL);
  strcpy(v8, "Transforms errors from the SLAM graph into ErrorRefs so they can be propogated through the C-API");
  strcpy((char *)(a1 + 296), "Node");
  v9 = __dst;
  *(_QWORD *)(a1 + 280) = 0x725420726F727245;
  *(_QWORD *)(a1 + 288) = v9;
  *(_WORD *)(a1 + 301) = v25;
  *(_BYTE *)(a1 + 303) = 20;
  sub_20E867BF8((_QWORD *)(a1 + 304), v8, 0x60uLL);
  operator delete(v8);
  v10 = (char *)operator new(0x20uLL);
  strcpy(v10, "Data verification status fwd");
  v11 = (char *)operator new(0x60uLL);
  strcpy(v11, "Transform the DataVerificationStatus into an optional ErrorRef to expose through the C-API.");
  sub_20E860C04(&__dst, v10, 0x1CuLL);
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)v3);
  *(_OWORD *)v3 = __dst;
  *(_QWORD *)(v3 + 16) = v27;
  sub_20E860C04(&__dst, v11, 0x5BuLL);
  v12 = (void **)(a1 + 32);
  if (*(char *)(a1 + 55) < 0)
    operator delete(*v12);
  *(_OWORD *)v12 = __dst;
  *(_QWORD *)(a1 + 48) = v27;
  operator delete(v11);
  operator delete(v10);
  v13 = (char *)operator new(0x50uLL);
  strcpy(v13, "Transform the UnifiedError into an ErrorRef to expose through the C-API.");
  if (*(char *)(a1 + 87) < 0)
    operator delete(*v4);
  strcpy((char *)(a1 + 64), "Multicamera error fwd");
  *(_BYTE *)(a1 + 87) = 21;
  sub_20E860C04(&__dst, v13, 0x48uLL);
  v14 = (void **)(a1 + 88);
  if (*(char *)(a1 + 111) < 0)
    operator delete(*v14);
  *(_OWORD *)v14 = __dst;
  *(_QWORD *)(a1 + 104) = v27;
  operator delete(v13);
  v15 = (char *)operator new(0x20uLL);
  strcpy(v15, "Slam Engine Node status fwd");
  v16 = (char *)operator new(0x50uLL);
  strcpy(v16, "Transform the SlamEngineNodeError into an ErrorRef to expose through the C-API.");
  sub_20E860C04(&__dst, v15, 0x1BuLL);
  if (*(char *)(a1 + 143) < 0)
    operator delete(*(void **)v5);
  *(_OWORD *)v5 = __dst;
  *(_QWORD *)(v5 + 16) = v27;
  sub_20E860C04(&__dst, v16, 0x4FuLL);
  v17 = (void **)(a1 + 144);
  if (*(char *)(a1 + 167) < 0)
    operator delete(*v17);
  *(_OWORD *)v17 = __dst;
  *(_QWORD *)(a1 + 160) = v27;
  operator delete(v16);
  operator delete(v15);
  v18 = (char *)operator new(0x28uLL);
  strcpy(v18, "Anchor Transformation Node status fwd");
  v19 = (char *)operator new(0x58uLL);
  strcpy(v19, "Transform the UserAnchorNodeGroupError into an ErrorRef to expose through the C-API.");
  sub_20E860C04(&__dst, v18, 0x25uLL);
  if (*(char *)(a1 + 199) < 0)
    operator delete(*(void **)v6);
  *(_OWORD *)v6 = __dst;
  *(_QWORD *)(v6 + 16) = v27;
  sub_20E860C04(&__dst, v19, 0x54uLL);
  v20 = (void **)(a1 + 200);
  if (*(char *)(a1 + 223) < 0)
    operator delete(*v20);
  *(_OWORD *)v20 = __dst;
  *(_QWORD *)(a1 + 216) = v27;
  operator delete(v19);
  operator delete(v18);
  v21 = (char *)operator new(0x20uLL);
  strcpy(v21, "Mapping IO Node status fwd");
  v22 = (char *)operator new(0x58uLL);
  strcpy(v22, "Transform the MappingIONodeGroupError into an ErrorRef to expose through the C-API.");
  sub_20E860C04(&__dst, v21, 0x1AuLL);
  if (*(char *)(a1 + 255) < 0)
    operator delete(*(void **)v7);
  *(_OWORD *)v7 = __dst;
  *(_QWORD *)(v7 + 16) = v27;
  sub_20E860C04(&__dst, v22, 0x53uLL);
  v23 = (void **)(a1 + 256);
  if (*(char *)(a1 + 279) < 0)
    operator delete(*v23);
  *(_OWORD *)v23 = __dst;
  *(_QWORD *)(a1 + 272) = v27;
  operator delete(v22);
  operator delete(v21);
  return a1;
}

void sub_20EC3F1A0(_Unwind_Exception *a1)
{
  uint64_t v1;
  void *v2;

  operator delete(v2);
  sub_20EC3F27C(v1);
  _Unwind_Resume(a1);
}

void sub_20EC3F234(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20EC3F27C(v1);
  _Unwind_Resume(a1);
}

void sub_20EC3F248(_Unwind_Exception *a1)
{
  uint64_t v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v2;
  operator delete(v4);
  operator delete(v3);
  sub_20EC3F27C(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20EC3F27C(uint64_t a1)
{
  *(_QWORD *)a1 = off_24C9CF418;
  *(_QWORD *)(a1 + 56) = &unk_24C9CF440;
  *(_QWORD *)(a1 + 112) = &unk_24C9CF468;
  *(_QWORD *)(a1 + 168) = &unk_24C9CF490;
  *(_QWORD *)(a1 + 224) = &unk_24C9CF4B8;
  if (*(char *)(a1 + 327) < 0)
  {
    operator delete(*(void **)(a1 + 304));
    if ((*(char *)(a1 + 303) & 0x80000000) == 0)
    {
LABEL_3:
      *(_QWORD *)(a1 + 224) = off_24C9CF580;
      if ((*(char *)(a1 + 279) & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_16;
    }
  }
  else if ((*(char *)(a1 + 303) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*(void **)(a1 + 280));
  *(_QWORD *)(a1 + 224) = off_24C9CF580;
  if ((*(char *)(a1 + 279) & 0x80000000) == 0)
  {
LABEL_4:
    if ((*(char *)(a1 + 255) & 0x80000000) == 0)
      goto LABEL_5;
    goto LABEL_17;
  }
LABEL_16:
  operator delete(*(void **)(a1 + 256));
  if ((*(char *)(a1 + 255) & 0x80000000) == 0)
  {
LABEL_5:
    *(_QWORD *)(a1 + 168) = off_24C9CF558;
    if ((*(char *)(a1 + 223) & 0x80000000) == 0)
      goto LABEL_6;
    goto LABEL_18;
  }
LABEL_17:
  operator delete(*(void **)(a1 + 232));
  *(_QWORD *)(a1 + 168) = off_24C9CF558;
  if ((*(char *)(a1 + 223) & 0x80000000) == 0)
  {
LABEL_6:
    if ((*(char *)(a1 + 199) & 0x80000000) == 0)
      goto LABEL_7;
    goto LABEL_19;
  }
LABEL_18:
  operator delete(*(void **)(a1 + 200));
  if ((*(char *)(a1 + 199) & 0x80000000) == 0)
  {
LABEL_7:
    *(_QWORD *)(a1 + 112) = off_24C9CF530;
    if ((*(char *)(a1 + 167) & 0x80000000) == 0)
      goto LABEL_8;
    goto LABEL_20;
  }
LABEL_19:
  operator delete(*(void **)(a1 + 176));
  *(_QWORD *)(a1 + 112) = off_24C9CF530;
  if ((*(char *)(a1 + 167) & 0x80000000) == 0)
  {
LABEL_8:
    if ((*(char *)(a1 + 143) & 0x80000000) == 0)
      goto LABEL_9;
    goto LABEL_21;
  }
LABEL_20:
  operator delete(*(void **)(a1 + 144));
  if ((*(char *)(a1 + 143) & 0x80000000) == 0)
  {
LABEL_9:
    *(_QWORD *)(a1 + 56) = off_24C9CF508;
    if ((*(char *)(a1 + 111) & 0x80000000) == 0)
      goto LABEL_10;
    goto LABEL_22;
  }
LABEL_21:
  operator delete(*(void **)(a1 + 120));
  *(_QWORD *)(a1 + 56) = off_24C9CF508;
  if ((*(char *)(a1 + 111) & 0x80000000) == 0)
  {
LABEL_10:
    if ((*(char *)(a1 + 87) & 0x80000000) == 0)
      goto LABEL_11;
    goto LABEL_23;
  }
LABEL_22:
  operator delete(*(void **)(a1 + 88));
  if ((*(char *)(a1 + 87) & 0x80000000) == 0)
  {
LABEL_11:
    *(_QWORD *)a1 = off_24C9CF4E0;
    if ((*(char *)(a1 + 55) & 0x80000000) == 0)
      goto LABEL_12;
LABEL_24:
    operator delete(*(void **)(a1 + 32));
    if ((*(char *)(a1 + 31) & 0x80000000) == 0)
      return a1;
    goto LABEL_25;
  }
LABEL_23:
  operator delete(*(void **)(a1 + 64));
  *(_QWORD *)a1 = off_24C9CF4E0;
  if (*(char *)(a1 + 55) < 0)
    goto LABEL_24;
LABEL_12:
  if ((*(char *)(a1 + 31) & 0x80000000) == 0)
    return a1;
LABEL_25:
  operator delete(*(void **)(a1 + 8));
  return a1;
}

uint64_t sub_20EC3F468@<X0>(uint64_t a1@<X1>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  size_t v5;
  void **v6;
  unint64_t v7;
  const void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned __int8 v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  uint64_t v16;
  void *p_dst;
  __int128 v19;
  _QWORD v20[2];
  _QWORD v21[3];
  const void *v22;
  uint64_t v23;
  const void *v24;
  unint64_t v25;
  void *__p;
  char v27;
  unint64_t v28;
  int v29;
  uint64_t v30;
  unsigned int v31;
  void **__dst;
  _QWORD *v33;
  _DWORD *v34;
  _QWORD *v35;
  unsigned int *v36;
  _QWORD *v37;
  std::error_condition v38;
  CFErrorRef v39;
  std::__shared_weak_count *v40;
  uint64_t v41;

  v41 = *MEMORY[0x24BDAC8D0];
  v31 = 0;
  sub_20E863438((uint64_t)v20);
  sub_20E86A980(v21, (uint64_t)"SlamEngineNodeGroup Failure: ", 29);
  __dst = (void **)&v31;
  v33 = v20;
  v34 = &v31;
  v35 = v20;
  v36 = &v31;
  v37 = v20;
  v4 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v4 == -1)
    sub_20E877AB8();
  p_dst = &__dst;
  ((void (*)(void **, uint64_t))off_24C9CF598[v4])(&p_dst, a1);
  if ((v29 & 0x10) != 0)
  {
    v7 = v28;
    if (v28 < v25)
    {
      v28 = v25;
      v7 = v25;
    }
    v8 = v24;
    v5 = v7 - (_QWORD)v24;
    if (v7 - (unint64_t)v24 >= 0x7FFFFFFFFFFFFFF8)
      goto LABEL_26;
  }
  else
  {
    if ((v29 & 8) == 0)
    {
      v5 = 0;
      HIBYTE(v34) = 0;
      v6 = (void **)&__dst;
      goto LABEL_15;
    }
    v8 = v22;
    v5 = v23 - (_QWORD)v22;
    if ((unint64_t)(v23 - (_QWORD)v22) >= 0x7FFFFFFFFFFFFFF8)
LABEL_26:
      sub_20E860B7C();
  }
  if (v5 >= 0x17)
  {
    v9 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v9 = v5 | 7;
    v10 = v9 + 1;
    v6 = (void **)operator new(v9 + 1);
    v33 = (_QWORD *)v5;
    v34 = (_DWORD *)(v10 | 0x8000000000000000);
    __dst = v6;
  }
  else
  {
    HIBYTE(v34) = v5;
    v6 = (void **)&__dst;
    if (!v5)
      goto LABEL_15;
  }
  memmove(v6, v8, v5);
LABEL_15:
  *((_BYTE *)v6 + v5) = 0;
  p_dst = operator new(0x80uLL);
  v19 = xmmword_2102DC3A0;
  strcpy((char *)p_dst, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/SlamEngineNodeGroup/src/include_private/ErrorTransformNode.cpp");
  v11 = v31;
  v12 = atomic_load((unsigned __int8 *)&qword_254A502A0);
  if ((v12 & 1) == 0 && __cxa_guard_acquire(&qword_254A502A0))
  {
    __cxa_atexit((void (*)(void *))std::error_category::~error_category, &off_254A50298, &dword_20E81F000);
    __cxa_guard_release(&qword_254A502A0);
  }
  *(_QWORD *)&v38.__val_ = v11;
  v38.__cat_ = (const std::error_category *)&off_254A50298;
  sub_20EA67538(&v38, (uint64_t)&__dst, &v39);
  sub_20EC41698(a2, (uint64_t)&v39, 1uLL);
  v13 = v40;
  if (!v40)
    goto LABEL_20;
  p_shared_owners = (unint64_t *)&v40->__shared_owners_;
  do
    v15 = __ldaxr(p_shared_owners);
  while (__stlxr(v15 - 1, p_shared_owners));
  if (v15)
  {
LABEL_20:
    if ((SHIBYTE(v19) & 0x80000000) == 0)
      goto LABEL_21;
LABEL_28:
    operator delete(p_dst);
    if ((SHIBYTE(v34) & 0x80000000) == 0)
      goto LABEL_22;
    goto LABEL_29;
  }
  ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
  std::__shared_weak_count::__release_weak(v13);
  if (SHIBYTE(v19) < 0)
    goto LABEL_28;
LABEL_21:
  if ((SHIBYTE(v34) & 0x80000000) == 0)
    goto LABEL_22;
LABEL_29:
  operator delete(__dst);
LABEL_22:
  v20[0] = *MEMORY[0x24BEDB7F0];
  v16 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  *(_QWORD *)((char *)v20 + *(_QWORD *)(v20[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
  v21[0] = v16;
  v21[1] = MEMORY[0x24BEDB848] + 16;
  if (v27 < 0)
    operator delete(__p);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x212BC6290](&v30);
}

void sub_20EC3F7A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  uint64_t v15;

  sub_20E86665C(v15 - 72);
  if (a14 < 0)
  {
    operator delete(__p);
    if ((*(char *)(v15 - 113) & 0x80000000) == 0)
    {
LABEL_3:
      sub_20E863784((uint64_t)&a15);
      _Unwind_Resume(a1);
    }
  }
  else if ((*(char *)(v15 - 113) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*(void **)(v15 - 136));
  sub_20E863784((uint64_t)&a15);
  _Unwind_Resume(a1);
}

void sub_20EC3F814(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_20E863784((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20EC3F82C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_20E863784((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20EC3F840(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_20E863784((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20EC3F858(uint64_t a1@<X0>, int *a2@<X1>, uint64_t a3@<X8>)
{
  int v4;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  int *v10;
  int *v11;
  int *v12;
  uint64_t v13;
  unsigned __int8 v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  std::string __p;
  __int128 v19;
  uint64_t v20;
  std::error_condition v21;
  CFErrorRef v22;
  std::__shared_weak_count *v23;
  char *v24;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;

  v27 = *MEMORY[0x24BDAC8D0];
  v4 = a2[1];
  if ((v4 - 8) <= 0xFFFFFFFC && *((_BYTE *)a2 + 32) == 0)
  {
LABEL_6:
    *(_BYTE *)a3 = 0;
    *(_BYTE *)(a3 + 24) = 0;
    return;
  }
  switch(v4)
  {
    case 0:
      goto LABEL_6;
    case 1:
      v7 = *a2;
      if (v7 >= 3)
        goto LABEL_21;
      v8 = &unk_210331B20;
      goto LABEL_20;
    case 2:
      v7 = *a2;
      if (v7 >= 3)
        goto LABEL_21;
      v8 = &unk_210331B38;
      goto LABEL_20;
    case 3:
      v7 = *a2;
      if (v7 >= 3)
        goto LABEL_21;
      v8 = &unk_210331B50;
      goto LABEL_20;
    case 4:
      v7 = *a2;
      if (v7 >= 3)
        goto LABEL_21;
      v8 = &unk_210331B68;
      goto LABEL_20;
    case 5:
      v7 = *a2;
      if (v7 >= 3)
        goto LABEL_21;
      v8 = &unk_210331B80;
      goto LABEL_20;
    case 6:
      v9 = 6;
      break;
    case 7:
      v7 = *a2;
      if (v7 >= 3)
        goto LABEL_21;
      v8 = &unk_210331B98;
LABEL_20:
      v9 = v8[v7];
      break;
    case 8:
      v9 = 9;
      break;
    case 9:
      v9 = 21;
      break;
    default:
LABEL_21:
      v9 = 0;
      break;
  }
  if (*(_BYTE *)(a1 + 328))
    sub_20EB8B2BC(a2);
  v24 = "SlamEngineNodeGroup Failure: ";
  *(_QWORD *)&v25 = 29;
  v12 = (int *)*((_QWORD *)a2 + 1);
  v11 = a2 + 2;
  v10 = v12;
  v13 = *((unsigned __int8 *)v11 + 23);
  if ((v13 & 0x80u) != 0)
    v13 = *((_QWORD *)v11 + 1);
  else
    v10 = v11;
  *((_QWORD *)&v25 + 1) = v10;
  v26 = v13;
  sub_20E8778D4((uint64_t)&v24, (uint64_t)&v27, 0, 0, &__p);
  v24 = (char *)operator new(0x80uLL);
  v25 = xmmword_2102DC3A0;
  strcpy(v24, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/SlamEngineNodeGroup/src/include_private/ErrorTransformNode.cpp");
  v14 = atomic_load((unsigned __int8 *)&qword_254A502A0);
  if ((v14 & 1) == 0 && __cxa_guard_acquire(&qword_254A502A0))
  {
    __cxa_atexit((void (*)(void *))std::error_category::~error_category, &off_254A50298, &dword_20E81F000);
    __cxa_guard_release(&qword_254A502A0);
  }
  *(_QWORD *)&v21.__val_ = v9;
  v21.__cat_ = (const std::error_category *)&off_254A50298;
  sub_20EA67538(&v21, (uint64_t)&__p, &v22);
  sub_20EC41698(&v19, (uint64_t)&v22, 1uLL);
  *(_OWORD *)a3 = v19;
  *(_QWORD *)(a3 + 16) = v20;
  v20 = 0;
  v19 = 0uLL;
  *(_BYTE *)(a3 + 24) = 1;
  v15 = v23;
  if (!v23)
    goto LABEL_34;
  p_shared_owners = (unint64_t *)&v23->__shared_owners_;
  do
    v17 = __ldaxr(p_shared_owners);
  while (__stlxr(v17 - 1, p_shared_owners));
  if (!v17)
  {
    ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
    std::__shared_weak_count::__release_weak(v15);
    if ((SHIBYTE(v25) & 0x80000000) == 0)
    {
LABEL_35:
      if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        return;
LABEL_39:
      operator delete(__p.__r_.__value_.__l.__data_);
      return;
    }
  }
  else
  {
LABEL_34:
    if ((SHIBYTE(v25) & 0x80000000) == 0)
      goto LABEL_35;
  }
  operator delete(v24);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_39;
}

void sub_20EC3FB88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  uint64_t v21;

  sub_20E86665C((uint64_t)&a21);
  if (*(char *)(v21 - 49) < 0)
    operator delete(*(void **)(v21 - 72));
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void sub_20EC3FBD8(unsigned int *a1@<X1>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  unsigned __int8 v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v8;
  void *v9[2];
  char v10;
  std::error_condition v11;
  int v12;
  void *__p;
  __int128 v14;
  uint64_t *v15;
  uint64_t *v16;
  void **p_p;
  CFErrorRef v18;
  std::__shared_weak_count *v19;
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  v3 = a1[4];
  v8 = (*(uint64_t (**)(unsigned int *))(*(_QWORD *)a1 + 16))(a1);
  v12 = 0;
  sub_20E9EC940(&v11, "SlamEngineNodeGroup Failure: ");
  if (v8)
  {
    __p = &v11;
    *(_QWORD *)&v14 = &v8;
    *((_QWORD *)&v14 + 1) = &v11;
    v15 = &v8;
    v16 = &v8;
    if (v12 != -1)
    {
      p_p = &__p;
      ((void (*)(void ***, std::error_condition *))off_24C9CF5F8[v12])(&p_p, &v11);
      goto LABEL_6;
    }
LABEL_20:
    sub_20E877AB8();
  }
  __p = &v11;
  *(_QWORD *)&v14 = "nullptr";
  *((_QWORD *)&v14 + 1) = &v11;
  v15 = (uint64_t *)"nullptr";
  v16 = (uint64_t *)"nullptr";
  if (v12 == -1)
    goto LABEL_20;
  p_p = &__p;
  ((void (*)(void ***, std::error_condition *))off_24C9CF5E0[v12])(&p_p, &v11);
LABEL_6:
  if (v12 == -1)
    sub_20E877AB8();
  __p = &p_p;
  ((void (*)(void **__return_ptr, void **, std::error_condition *))off_24C9CF5C8[v12])(v9, &__p, &v11);
  if (v12 != -1)
    ((void (*)(void **, std::error_condition *))off_24C9CF5B0[v12])(&__p, &v11);
  __p = operator new(0x80uLL);
  v14 = xmmword_2102DC3A0;
  strcpy((char *)__p, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/SlamEngineNodeGroup/src/include_private/ErrorTransformNode.cpp");
  v4 = atomic_load((unsigned __int8 *)&qword_254A502A0);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_254A502A0))
  {
    __cxa_atexit((void (*)(void *))std::error_category::~error_category, &off_254A50298, &dword_20E81F000);
    __cxa_guard_release(&qword_254A502A0);
  }
  *(_QWORD *)&v11.__val_ = v3;
  v11.__cat_ = (const std::error_category *)&off_254A50298;
  sub_20EA67538(&v11, (uint64_t)v9, &v18);
  sub_20EC41698(a2, (uint64_t)&v18, 1uLL);
  v5 = v19;
  if (!v19)
    goto LABEL_14;
  p_shared_owners = (unint64_t *)&v19->__shared_owners_;
  do
    v7 = __ldaxr(p_shared_owners);
  while (__stlxr(v7 - 1, p_shared_owners));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
    if ((SHIBYTE(v14) & 0x80000000) == 0)
    {
LABEL_15:
      if ((v10 & 0x80000000) == 0)
        return;
LABEL_19:
      operator delete(v9[0]);
      return;
    }
  }
  else
  {
LABEL_14:
    if ((SHIBYTE(v14) & 0x80000000) == 0)
      goto LABEL_15;
  }
  operator delete(__p);
  if (v10 < 0)
    goto LABEL_19;
}

void sub_20EC3FE98(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a2)
    sub_20E860DA4(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_20EC3FEEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  sub_20E877A60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20EC3FF00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  sub_20E877A60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20EC3FF14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  sub_20E877A60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20EC3FF2C(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }
}

void sub_20EC3FF78(uint64_t a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, __int128 a11, uint64_t __dst, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30)
{
  _QWORD *v30;
  const char *v31;
  size_t v32;
  void *v33;
  void **v34;
  uint64_t v35;
  uint64_t v36;
  unsigned __int8 v37;
  std::__shared_weak_count *v38;
  unint64_t *p_shared_owners;
  unint64_t v40;
  char *v41;
  void *v42[2];
  unint64_t v43;
  std::error_condition v44;
  CFErrorRef v45;
  std::__shared_weak_count *v46;

  v31 = (const char *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
  v32 = strlen(v31);
  if (v32 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  v33 = (void *)v32;
  if (v32 >= 0x17)
  {
    v35 = (v32 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v32 | 7) != 0x17)
      v35 = v32 | 7;
    v36 = v35 + 1;
    v34 = (void **)operator new(v35 + 1);
    v42[1] = v33;
    v43 = v36 | 0x8000000000000000;
    v42[0] = v34;
  }
  else
  {
    HIBYTE(v43) = v32;
    v34 = v42;
    if (!v32)
      goto LABEL_9;
  }
  memmove(v34, v31, (size_t)v33);
LABEL_9:
  *((_BYTE *)v33 + (_QWORD)v34) = 0;
  v41 = (char *)operator new(0x80uLL);
  strcpy(v41, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/SlamEngineNodeGroup/src/include_private/ErrorTransformNode.cpp");
  v37 = atomic_load((unsigned __int8 *)&qword_254A502A0);
  if ((v37 & 1) == 0 && __cxa_guard_acquire(&qword_254A502A0))
  {
    __cxa_atexit((void (*)(void *))std::error_category::~error_category, &off_254A50298, &dword_20E81F000);
    __cxa_guard_release(&qword_254A502A0);
  }
  *(_QWORD *)&v44.__val_ = 23;
  v44.__cat_ = (const std::error_category *)&off_254A50298;
  sub_20EA67538(&v44, (uint64_t)v42, &v45);
  sub_20EC41698(v30, (uint64_t)&v45, 1uLL);
  v38 = v46;
  if (v46)
  {
    p_shared_owners = (unint64_t *)&v46->__shared_owners_;
    do
      v40 = __ldaxr(p_shared_owners);
    while (__stlxr(v40 - 1, p_shared_owners));
    if (!v40)
    {
      ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
      std::__shared_weak_count::__release_weak(v38);
    }
  }
  operator delete(v41);
  if (SHIBYTE(v43) < 0)
    operator delete(v42[0]);
}

void sub_20EC4090C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,char a24)
{
  sub_20E86665C((uint64_t)&a24);
  if (a15 < 0)
  {
    operator delete(__p);
    if ((a21 & 0x80000000) == 0)
      goto LABEL_3;
  }
  else if ((a21 & 0x80000000) == 0)
  {
LABEL_3:
    _Unwind_Resume(a1);
  }
  operator delete(a16);
  _Unwind_Resume(a1);
}

void sub_20EC40964()
{
  JUMPOUT(0x20EC4092CLL);
}

void sub_20EC4096C()
{
  JUMPOUT(0x20EC4092CLL);
}

void sub_20EC40974()
{
  JUMPOUT(0x20EC4092CLL);
}

void sub_20EC4097C()
{
  JUMPOUT(0x20EC4092CLL);
}

void sub_20EC40984()
{
  JUMPOUT(0x20EC4092CLL);
}

void sub_20EC4098C()
{
  JUMPOUT(0x20EC4092CLL);
}

void sub_20EC40994(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    JUMPOUT(0x20EC40954);
  JUMPOUT(0x20EC40944);
}

void sub_20EC409A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    JUMPOUT(0x20EC40954);
  JUMPOUT(0x20EC40944);
}

void sub_20EC409B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    JUMPOUT(0x20EC40954);
  JUMPOUT(0x20EC40944);
}

void sub_20EC409C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    JUMPOUT(0x20EC40954);
  JUMPOUT(0x20EC40944);
}

void sub_20EC409D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    JUMPOUT(0x20EC40954);
  JUMPOUT(0x20EC40944);
}

void sub_20EC409E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    JUMPOUT(0x20EC40954);
  JUMPOUT(0x20EC40944);
}

void sub_20EC40A10(_DWORD *a1@<X1>, _QWORD *a2@<X8>)
{
  int v3;
  const char *v4;
  size_t v5;
  size_t v6;
  void **v7;
  const char *v8;
  size_t v9;
  size_t v10;
  void **p_dst;
  const char *v12;
  size_t v13;
  size_t v14;
  void **v15;
  uint64_t v16;
  uint64_t v17;
  unsigned __int8 v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned __int8 v24;
  unint64_t *p_shared_owners;
  uint64_t v26;
  uint64_t v27;
  unsigned __int8 v28;
  unint64_t *v29;
  char *__p;
  void **__dst;
  size_t v32;
  unint64_t v33;
  std::error_condition v34;
  CFErrorRef v35;
  std::__shared_weak_count *v36;
  uint64_t v37;

  v37 = *MEMORY[0x24BDAC8D0];
  v3 = a1[4];
  if (!v3)
  {
    v8 = (const char *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)a1 + 16))(a1);
    v9 = strlen(v8);
    if (v9 > 0x7FFFFFFFFFFFFFF7)
      sub_20E860B7C();
    v10 = v9;
    if (v9 >= 0x17)
    {
      v22 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v9 | 7) != 0x17)
        v22 = v9 | 7;
      v23 = v22 + 1;
      p_dst = (void **)operator new(v22 + 1);
      v32 = v10;
      v33 = v23 | 0x8000000000000000;
      __dst = p_dst;
    }
    else
    {
      HIBYTE(v33) = v9;
      p_dst = (void **)&__dst;
      if (!v9)
      {
LABEL_28:
        *((_BYTE *)p_dst + v10) = 0;
        __p = (char *)operator new(0x80uLL);
        strcpy(__p, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/SlamEngineNodeGroup/src/include_private/ErrorTransformNode.cpp");
        v24 = atomic_load((unsigned __int8 *)&qword_254A502A0);
        if ((v24 & 1) == 0 && __cxa_guard_acquire(&qword_254A502A0))
        {
          __cxa_atexit((void (*)(void *))std::error_category::~error_category, &off_254A50298, &dword_20E81F000);
          __cxa_guard_release(&qword_254A502A0);
        }
        *(_QWORD *)&v34.__val_ = 24;
        v34.__cat_ = (const std::error_category *)&off_254A50298;
        sub_20EA67538(&v34, (uint64_t)&__dst, &v35);
        sub_20EC41698(a2, (uint64_t)&v35, 1uLL);
        v19 = v36;
        if (!v36)
          goto LABEL_45;
        p_shared_owners = (unint64_t *)&v36->__shared_owners_;
        do
          v21 = __ldaxr(p_shared_owners);
        while (__stlxr(v21 - 1, p_shared_owners));
LABEL_41:
        if (!v21)
        {
          ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
          std::__shared_weak_count::__release_weak(v19);
        }
        goto LABEL_45;
      }
    }
    memmove(p_dst, v8, v10);
    goto LABEL_28;
  }
  if (v3 != 2)
  {
    v12 = (const char *)(*(uint64_t (**)(void))(*(_QWORD *)a1 + 16))();
    v13 = strlen(v12);
    if (v13 > 0x7FFFFFFFFFFFFFF7)
      sub_20E860B7C();
    v14 = v13;
    if (v13 >= 0x17)
    {
      v26 = (v13 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v13 | 7) != 0x17)
        v26 = v13 | 7;
      v27 = v26 + 1;
      v15 = (void **)operator new(v26 + 1);
      v32 = v14;
      v33 = v27 | 0x8000000000000000;
      __dst = v15;
    }
    else
    {
      HIBYTE(v33) = v13;
      v15 = (void **)&__dst;
      if (!v13)
      {
LABEL_37:
        *((_BYTE *)v15 + v14) = 0;
        __p = (char *)operator new(0x80uLL);
        strcpy(__p, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/SlamEngineNodeGroup/src/include_private/ErrorTransformNode.cpp");
        v28 = atomic_load((unsigned __int8 *)&qword_254A502A0);
        if ((v28 & 1) == 0 && __cxa_guard_acquire(&qword_254A502A0))
        {
          __cxa_atexit((void (*)(void *))std::error_category::~error_category, &off_254A50298, &dword_20E81F000);
          __cxa_guard_release(&qword_254A502A0);
        }
        *(_QWORD *)&v34.__val_ = 22;
        v34.__cat_ = (const std::error_category *)&off_254A50298;
        sub_20EA67538(&v34, (uint64_t)&__dst, &v35);
        sub_20EC41698(a2, (uint64_t)&v35, 1uLL);
        v19 = v36;
        if (!v36)
          goto LABEL_45;
        v29 = (unint64_t *)&v36->__shared_owners_;
        do
          v21 = __ldaxr(v29);
        while (__stlxr(v21 - 1, v29));
        goto LABEL_41;
      }
    }
    memmove(v15, v12, v14);
    goto LABEL_37;
  }
  v4 = (const char *)(*(uint64_t (**)(void))(*(_QWORD *)a1 + 16))();
  v5 = strlen(v4);
  if (v5 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  v6 = v5;
  if (v5 >= 0x17)
  {
    v16 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v16 = v5 | 7;
    v17 = v16 + 1;
    v7 = (void **)operator new(v16 + 1);
    v32 = v6;
    v33 = v17 | 0x8000000000000000;
    __dst = v7;
  }
  else
  {
    HIBYTE(v33) = v5;
    v7 = (void **)&__dst;
    if (!v5)
      goto LABEL_19;
  }
  memmove(v7, v4, v6);
LABEL_19:
  *((_BYTE *)v7 + v6) = 0;
  __p = (char *)operator new(0x80uLL);
  strcpy(__p, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/SlamEngineNodeGroup/src/include_private/ErrorTransformNode.cpp");
  v18 = atomic_load((unsigned __int8 *)&qword_254A502A0);
  if ((v18 & 1) == 0 && __cxa_guard_acquire(&qword_254A502A0))
  {
    __cxa_atexit((void (*)(void *))std::error_category::~error_category, &off_254A50298, &dword_20E81F000);
    __cxa_guard_release(&qword_254A502A0);
  }
  *(_QWORD *)&v34.__val_ = 25;
  v34.__cat_ = (const std::error_category *)&off_254A50298;
  sub_20EA67538(&v34, (uint64_t)&__dst, &v35);
  sub_20EC41698(a2, (uint64_t)&v35, 1uLL);
  v19 = v36;
  if (v36)
  {
    v20 = (unint64_t *)&v36->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    goto LABEL_41;
  }
LABEL_45:
  operator delete(__p);
  if (SHIBYTE(v33) < 0)
    operator delete(__dst);
}

void sub_20EC40F64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,char a24)
{
  sub_20E86665C((uint64_t)&a24);
  if (a15 < 0)
  {
    operator delete(__p);
    if ((a21 & 0x80000000) == 0)
      goto LABEL_3;
  }
  else if ((a21 & 0x80000000) == 0)
  {
LABEL_3:
    _Unwind_Resume(a1);
  }
  operator delete(a16);
  _Unwind_Resume(a1);
}

void sub_20EC40FC0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    JUMPOUT(0x20EC40FB0);
  JUMPOUT(0x20EC40FA0);
}

void sub_20EC40FD0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    JUMPOUT(0x20EC40FB0);
  JUMPOUT(0x20EC40FA0);
}

void sub_20EC40FE0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    JUMPOUT(0x20EC40FB0);
  JUMPOUT(0x20EC40FA0);
}

void sub_20EC41004(uint64_t a1)
{
  sub_20EC3F27C(a1);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20EC41028(uint64_t a1)
{
  return sub_20EC3F27C(a1 - 56);
}

void sub_20EC41030(uint64_t a1)
{
  sub_20EC3F27C(a1 - 56);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20EC41058(uint64_t a1)
{
  return sub_20EC3F27C(a1 - 112);
}

void sub_20EC41060(uint64_t a1)
{
  sub_20EC3F27C(a1 - 112);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20EC41088(uint64_t a1)
{
  return sub_20EC3F27C(a1 - 168);
}

void sub_20EC41090(uint64_t a1)
{
  sub_20EC3F27C(a1 - 168);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20EC410B8(uint64_t a1)
{
  return sub_20EC3F27C(a1 - 224);
}

void sub_20EC410C0(uint64_t a1)
{
  sub_20EC3F27C(a1 - 224);
  JUMPOUT(0x212BC6398);
}

void sub_20EC41138(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;
  __int128 *p_p;
  uint64_t v7;
  unsigned int v8;
  __int128 __p;
  uint64_t v10;
  uint64_t v11;

  v3 = *a1;
  v4 = *(_DWORD *)a2;
  v8 = *(_DWORD *)a2;
  if ((*(char *)(a2 + 31) & 0x80000000) == 0)
  {
    __p = *(_OWORD *)(a2 + 8);
    v10 = *(_QWORD *)(a2 + 24);
    v11 = *(_QWORD *)(a2 + 32);
    v5 = *(_QWORD *)(v3 + 8);
    if (v4 > 2)
      goto LABEL_4;
    goto LABEL_3;
  }
  sub_20E860C04(&__p, *(void **)(a2 + 8), *(_QWORD *)(a2 + 16));
  v4 = v8;
  v11 = *(_QWORD *)(a2 + 32);
  v5 = *(_QWORD *)(v3 + 8);
  if (v8 <= 2)
LABEL_3:
    **(_DWORD **)v3 = dword_210331BB0[v4];
LABEL_4:
  if (v10 >= 0)
    p_p = &__p;
  else
    p_p = (__int128 *)__p;
  if (v10 >= 0)
    v7 = HIBYTE(v10);
  else
    v7 = *((_QWORD *)&__p + 1);
  sub_20E86A980((_QWORD *)(v5 + 16), (uint64_t)p_p, v7);
  if (SHIBYTE(v10) < 0)
    operator delete((void *)__p);
}

void sub_20EC41228(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20EC41244(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  const char *v7;
  const char *v8;
  size_t v9;
  std::runtime_error v10;
  int v11;

  v3 = *a1;
  std::runtime_error::runtime_error(&v10, (const std::runtime_error *)a2);
  v10.__vftable = (std::runtime_error_vtbl *)&off_24C9FFFA0;
  v4 = *(int *)(a2 + 16);
  v11 = v4;
  v5 = *(_QWORD *)(v3 + 24);
  if (v4 <= 2)
    **(_DWORD **)(v3 + 16) = dword_210331BBC[v4];
  v6 = (_QWORD *)(v5 + 16);
  v7 = std::runtime_error::what(&v10);
  if (v7)
  {
    v8 = v7;
    v9 = strlen(v7);
  }
  else
  {
    v8 = "nullptr";
    v9 = 7;
  }
  sub_20E86A980(v6, (uint64_t)v8, v9);
  std::runtime_error::~runtime_error(&v10);
}

void sub_20EC412E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::runtime_error a10)
{
  std::runtime_error::~runtime_error(&a10);
  _Unwind_Resume(a1);
}

void sub_20EC412FC(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;
  _QWORD *v6;
  __int128 *v7;
  uint64_t v8;
  std::string *p_p;
  std::string::size_type size;
  unsigned int v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  std::string __p;

  v3 = *a1;
  v4 = *(_DWORD *)a2;
  v11 = *(_DWORD *)a2;
  if ((*(char *)(a2 + 31) & 0x80000000) == 0)
  {
    v12 = *(_OWORD *)(a2 + 8);
    v13 = *(_QWORD *)(a2 + 24);
    v14 = *(_QWORD *)(a2 + 32);
    v5 = *(_QWORD *)(v3 + 40);
    if (v4 > 3)
      goto LABEL_4;
    goto LABEL_3;
  }
  sub_20E860C04(&v12, *(void **)(a2 + 8), *(_QWORD *)(a2 + 16));
  v4 = v11;
  v14 = *(_QWORD *)(a2 + 32);
  v5 = *(_QWORD *)(v3 + 40);
  if (v11 <= 3)
LABEL_3:
    **(_DWORD **)(v3 + 32) = dword_210331520[v4];
LABEL_4:
  v6 = (_QWORD *)(v5 + 16);
  if (v13 >= 0)
    v7 = &v12;
  else
    v7 = (__int128 *)v12;
  if (v13 >= 0)
    v8 = HIBYTE(v13);
  else
    v8 = *((_QWORD *)&v12 + 1);
  sub_20E86A980(v6, (uint64_t)v7, v8);
  sub_20E86A980(v6, (uint64_t)" at timestamp: ", 15);
  sub_20EC4149C(&v14, &__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    size = __p.__r_.__value_.__l.__size_;
  sub_20E86A980(v6, (uint64_t)p_p, size);
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v13) & 0x80000000) == 0)
      return;
LABEL_22:
    operator delete((void *)v12);
    return;
  }
  operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v13) < 0)
    goto LABEL_22;
}

void sub_20EC41450(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a22 < 0)
  {
    operator delete(__p);
    if ((a15 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if ((a15 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a10);
  _Unwind_Resume(exception_object);
}

void sub_20EC4149C(uint64_t *a1@<X0>, std::string *a2@<X8>)
{
  void **v3;
  std::string::size_type v4;
  std::string *v5;
  uint64_t v6;
  std::string v7;
  std::string v8;
  void *__p[2];
  unsigned __int8 v10;
  int v11;
  char v12;
  char *v13;

  v6 = *a1;
  v11 = 0;
  sub_20E87876C((uint64_t)&v13, (uint64_t)__p, (double *)&v6);
  if (v11 == -1)
    sub_20E877AB8();
  v13 = &v12;
  ((void (*)(std::string *__return_ptr, char **, void **))off_24C9CF5C8[v11])(&v7, &v13, __p);
  if (v11 != -1)
    ((void (*)(char **, void **))off_24C9CF5B0[v11])(&v13, __p);
  std::string::push_back(&v7, 32);
  v8 = v7;
  memset(&v7, 0, sizeof(v7));
  sub_210237BC0(1, 1, __p);
  if ((v10 & 0x80u) == 0)
    v3 = __p;
  else
    v3 = (void **)__p[0];
  if ((v10 & 0x80u) == 0)
    v4 = v10;
  else
    v4 = (std::string::size_type)__p[1];
  v5 = std::string::append(&v8, (const std::string::value_type *)v3, v4);
  *a2 = *v5;
  v5->__r_.__value_.__l.__size_ = 0;
  v5->__r_.__value_.__r.__words[2] = 0;
  v5->__r_.__value_.__r.__words[0] = 0;
  if ((char)v10 < 0)
  {
    operator delete(__p[0]);
    if ((SHIBYTE(v8.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_12:
      if ((SHIBYTE(v7.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        return;
LABEL_16:
      operator delete(v7.__r_.__value_.__l.__data_);
      return;
    }
  }
  else if ((SHIBYTE(v8.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_12;
  }
  operator delete(v8.__r_.__value_.__l.__data_);
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_16;
}

void sub_20EC415FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a28 < 0)
  {
    operator delete(__p);
    if ((a21 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a15 & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_7;
    }
  }
  else if ((a21 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a16);
  if ((a15 & 0x80000000) == 0)
LABEL_4:
    _Unwind_Resume(exception_object);
LABEL_7:
  operator delete(a10);
  _Unwind_Resume(exception_object);
}

void sub_20EC41670(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  sub_20E877A60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20EC41684(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  sub_20E877A60((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_20EC41698(_QWORD *a1, uint64_t a2, unint64_t a3)
{
  uint64_t v5;
  char *v6;
  uint64_t v7;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a3)
  {
    if (a3 >> 60)
      sub_20E867F44();
    v5 = 16 * a3;
    v6 = (char *)operator new(16 * a3);
    v7 = 0;
    *a1 = v6;
    a1[1] = v6;
    a1[2] = &v6[v5];
    do
    {
      sub_20EA5ABC4(&v6[v7], a2 + v7);
      v7 += 16;
    }
    while (v5 != v7);
    a1[1] = &v6[v7];
  }
  return a1;
}

void sub_20EC41740(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  sub_20EC06DA4(&a9);
  _Unwind_Resume(a1);
}

void sub_20EC41754(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;

  if (v12)
  {
    do
    {
      v14 = *(std::__shared_weak_count **)(v11 - 8);
      if (v14)
      {
        p_shared_owners = (unint64_t *)&v14->__shared_owners_;
        do
          v16 = __ldaxr(p_shared_owners);
        while (__stlxr(v16 - 1, p_shared_owners));
        if (!v16)
        {
          ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
          std::__shared_weak_count::__release_weak(v14);
        }
      }
      v11 -= 16;
    }
    while (v11 != v10);
  }
  *(_QWORD *)(v9 + 8) = v10;
  sub_20EC06DA4(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20EC417B8(uint64_t a1, uint64_t a2, __int16 a3)
{
  void **v6;
  char *v7;
  void **v8;
  void **v9;
  _BYTE *v10;
  size_t v11;
  char *v12;
  void **v13;
  char *v14;
  void **v15;
  char *v16;
  char *v17;
  void **v18;
  void **v19;
  char *v20;
  void **v21;
  char *v22;
  char *v23;
  void **v24;
  void **v25;
  char *v26;
  char *v27;
  void **v28;
  void **v29;
  char *v30;
  void **v31;
  char *v32;
  void **v33;
  char *v34;
  void **v35;
  char *v36;
  char *v37;
  void **v38;
  void **v39;
  char *v40;
  void **v41;
  char *v42;
  char *v43;
  void **v44;
  void **v45;
  char *v46;
  void **v47;
  char *v48;
  char *v49;
  void **v50;
  void **v51;
  char *v52;
  void **v53;
  char *v54;
  char *v55;
  void **v56;
  void **v57;
  char *v58;
  char *v59;
  void **v60;
  void **v61;
  char *v62;
  char *v63;
  void **v64;
  void **v65;
  char *v66;
  char *v67;
  void **v68;
  void **v69;
  _BYTE __p[24];
  void *__dst[2];
  uint64_t v73;

  v6 = (void **)(a1 + 8);
  bzero((void *)(a1 + 8), 0x6B8uLL);
  *(_QWORD *)a1 = &off_24C9CF620;
  *(_QWORD *)(a1 + 56) = &unk_24C9CF730;
  *(_QWORD *)(a1 + 112) = &unk_24C9CF758;
  *(_QWORD *)(a1 + 168) = &unk_24C9CF780;
  *(_QWORD *)(a1 + 224) = &unk_24C9CF7A8;
  *(_QWORD *)(a1 + 280) = &unk_24C9CF7D0;
  *(_QWORD *)(a1 + 336) = &unk_24C9CF7F8;
  *(_QWORD *)(a1 + 392) = &unk_24C9CF820;
  *(_QWORD *)(a1 + 448) = &unk_24C9CF848;
  *(_QWORD *)(a1 + 504) = &unk_24C9CF870;
  *(_QWORD *)(a1 + 560) = &unk_24C9CF898;
  *(_QWORD *)(a1 + 616) = &unk_24C9CF8C0;
  *(_QWORD *)(a1 + 672) = &unk_24C9CF8E8;
  *(_QWORD *)(a1 + 728) = &unk_24C9CF910;
  *(_QWORD *)(a1 + 784) = &unk_24C9CF938;
  *(_QWORD *)(a1 + 840) = &unk_24C9CF960;
  *(_QWORD *)(a1 + 896) = &unk_24C9CF988;
  *(_QWORD *)(a1 + 952) = &unk_24C9CF9B0;
  *(_QWORD *)(a1 + 1008) = &unk_24C9CF9D8;
  *(_QWORD *)(a1 + 1064) = &unk_24C9CFA00;
  *(_QWORD *)(a1 + 1120) = &unk_24C9CFA28;
  *(_QWORD *)(a1 + 1176) = &unk_24C9CFA50;
  *(_QWORD *)(a1 + 1232) = &unk_24C9CFA78;
  *(_QWORD *)(a1 + 1288) = &unk_24C9CFAA0;
  *(_QWORD *)(a1 + 1344) = &unk_24C9CFAC8;
  *(_QWORD *)(a1 + 1400) = &unk_24C9CFAF0;
  *(_QWORD *)(a1 + 1456) = &unk_24C9CFB18;
  *(_QWORD *)(a1 + 1512) = &unk_24C9CFB40;
  *(_QWORD *)(a1 + 1568) = &unk_24C9CFB68;
  *(_QWORD *)(a1 + 1624) = &unk_24C9CFB90;
  *(_OWORD *)(a1 + 1728) = *(_OWORD *)a2;
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_WORD *)(a1 + 1744) = a3;
  if (!*(_QWORD *)(a1 + 1728)
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/SlamEngineNodeGroup/src/include_private/SlamEngineNode.cpp", 34, (uint64_t)"engine_", 7, (uint64_t)"Engine instance must be provided", 32, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  HIBYTE(v73) = 11;
  strcpy((char *)__dst, "Slam Engine");
  v7 = (char *)operator new(0x70uLL);
  v8 = (void **)(a1 + 1680);
  *(_QWORD *)__p = v7;
  *(_OWORD *)&__p[8] = xmmword_2102E0CA0;
  strcpy(v7, "High priority Async Node, processing input measurements (IMU, FeaturePoints)using instance of LocalSlamEngine");
  if ((void **)(a1 + 1680) != __dst)
  {
    if (*(char *)(a1 + 1703) < 0)
    {
      sub_20E867CBC(v8, __dst, 0xBuLL);
    }
    else
    {
      *(_OWORD *)v8 = *(_OWORD *)__dst;
      *(_QWORD *)(a1 + 1696) = v73;
    }
  }
  v9 = (void **)(a1 + 1704);
  if ((_BYTE *)(a1 + 1704) != __p)
  {
    if (*(char *)(a1 + 1727) < 0)
    {
      if (__p[23] >= 0)
        v10 = __p;
      else
        v10 = *(_BYTE **)__p;
      if (__p[23] >= 0)
        v11 = __p[23];
      else
        v11 = *(_QWORD *)&__p[8];
      sub_20E867CBC(v9, v10, v11);
    }
    else if ((__p[23] & 0x80) != 0)
    {
      sub_20E867BF8(v9, *(void **)__p, *(size_t *)&__p[8]);
    }
    else
    {
      *(_OWORD *)v9 = *(_OWORD *)__p;
      *(_QWORD *)(a1 + 1720) = *(_QWORD *)&__p[16];
    }
  }
  if ((__p[23] & 0x80000000) != 0)
  {
    operator delete(*(void **)__p);
    if ((SHIBYTE(v73) & 0x80000000) == 0)
      goto LABEL_21;
  }
  else if ((SHIBYTE(v73) & 0x80000000) == 0)
  {
    goto LABEL_21;
  }
  operator delete(__dst[0]);
LABEL_21:
  v12 = (char *)operator new(0x20uLL);
  strcpy(v12, "Gyro measurement processing");
  if (*(char *)(a1 + 31) < 0)
    operator delete(*v6);
  strcpy((char *)(a1 + 8), "Gyro Processing");
  *(_BYTE *)(a1 + 31) = 15;
  sub_20E860C04(__dst, v12, 0x1BuLL);
  v13 = (void **)(a1 + 32);
  if (*(char *)(a1 + 55) < 0)
    operator delete(*v13);
  *(_OWORD *)v13 = *(_OWORD *)__dst;
  *(_QWORD *)(a1 + 48) = v73;
  operator delete(v12);
  v14 = (char *)operator new(0x28uLL);
  strcpy(v14, "Accelerometer measurement processing");
  if (*(char *)(a1 + 87) < 0)
    operator delete(*(void **)(a1 + 64));
  strcpy((char *)(a1 + 64), "Accel Processing");
  *(_BYTE *)(a1 + 87) = 16;
  sub_20E860C04(__dst, v14, 0x24uLL);
  v15 = (void **)(a1 + 88);
  if (*(char *)(a1 + 111) < 0)
    operator delete(*v15);
  *(_OWORD *)v15 = *(_OWORD *)__dst;
  *(_QWORD *)(a1 + 104) = v73;
  operator delete(v14);
  v16 = (char *)operator new(0x19uLL);
  strcpy(v16, "FeaturePoint Processing");
  v17 = (char *)operator new(0x19uLL);
  strcpy(v17, "FeaturePoint processing");
  sub_20E860C04(__dst, v16, 0x17uLL);
  v18 = (void **)(a1 + 120);
  if (*(char *)(a1 + 143) < 0)
    operator delete(*v18);
  *(_OWORD *)v18 = *(_OWORD *)__dst;
  *(_QWORD *)(a1 + 136) = v73;
  sub_20E860C04(__dst, v17, 0x17uLL);
  v19 = (void **)(a1 + 144);
  if (*(char *)(a1 + 167) < 0)
    operator delete(*v19);
  *(_OWORD *)v19 = *(_OWORD *)__dst;
  *(_QWORD *)(a1 + 160) = v73;
  operator delete(v17);
  operator delete(v16);
  v20 = (char *)operator new(0x28uLL);
  strcpy(v20, "Channel to request the serialized map");
  if (*(char *)(a1 + 815) < 0)
    operator delete(*(void **)(a1 + 792));
  *(_QWORD *)(a1 + 792) = 0x757165522070614DLL;
  *(_QWORD *)(a1 + 800) = 7631717;
  *(_BYTE *)(a1 + 815) = 11;
  sub_20E860C04(__dst, v20, 0x25uLL);
  v21 = (void **)(a1 + 816);
  if (*(char *)(a1 + 839) < 0)
    operator delete(*v21);
  *(_OWORD *)v21 = *(_OWORD *)__dst;
  *(_QWORD *)(a1 + 832) = v73;
  operator delete(v20);
  if (*(char *)(a1 + 199) < 0)
    operator delete(*(void **)(a1 + 176));
  strcpy((char *)(a1 + 176), "ClearMap Request");
  *(_BYTE *)(a1 + 199) = 16;
  if (*(char *)(a1 + 223) < 0)
    operator delete(*(void **)(a1 + 200));
  strcpy((char *)(a1 + 200), "Request to clear map");
  *(_BYTE *)(a1 + 223) = 20;
  v22 = (char *)operator new(0x20uLL);
  strcpy(v22, "Mapping Save Call Channel");
  v23 = (char *)operator new(0x38uLL);
  strcpy(v23, "Informs the engine that the map should be saved.");
  sub_20E860C04(__dst, v22, 0x19uLL);
  v24 = (void **)(a1 + 232);
  if (*(char *)(a1 + 255) < 0)
    operator delete(*v24);
  *(_OWORD *)v24 = *(_OWORD *)__dst;
  *(_QWORD *)(a1 + 248) = v73;
  sub_20E860C04(__dst, v23, 0x30uLL);
  v25 = (void **)(a1 + 256);
  if (*(char *)(a1 + 279) < 0)
    operator delete(*v25);
  *(_OWORD *)v25 = *(_OWORD *)__dst;
  *(_QWORD *)(a1 + 272) = v73;
  operator delete(v23);
  operator delete(v22);
  v26 = (char *)operator new(0x20uLL);
  strcpy(v26, "Mapping Load Call Channel");
  v27 = (char *)operator new(0x28uLL);
  strcpy(v27, "Passes an external map for loading.");
  sub_20E860C04(__dst, v26, 0x19uLL);
  v28 = (void **)(a1 + 288);
  if (*(char *)(a1 + 311) < 0)
    operator delete(*v28);
  *(_OWORD *)v28 = *(_OWORD *)__dst;
  *(_QWORD *)(a1 + 304) = v73;
  sub_20E860C04(__dst, v27, 0x23uLL);
  v29 = (void **)(a1 + 312);
  if (*(char *)(a1 + 335) < 0)
    operator delete(*v29);
  *(_OWORD *)v29 = *(_OWORD *)__dst;
  *(_QWORD *)(a1 + 328) = v73;
  operator delete(v27);
  operator delete(v26);
  v30 = (char *)operator new(0x28uLL);
  strcpy(v30, "Passes a request to pause map save.");
  if (*(char *)(a1 + 367) < 0)
    operator delete(*(void **)(a1 + 344));
  strcpy((char *)(a1 + 344), "Pause / Resume Channel");
  *(_BYTE *)(a1 + 367) = 22;
  sub_20E860C04(__dst, v30, 0x23uLL);
  v31 = (void **)(a1 + 368);
  if (*(char *)(a1 + 391) < 0)
    operator delete(*v31);
  *(_OWORD *)v31 = *(_OWORD *)__dst;
  *(_QWORD *)(a1 + 384) = v73;
  operator delete(v30);
  if (*(char *)(a1 + 423) < 0)
    operator delete(*(void **)(a1 + 400));
  *(_QWORD *)(a1 + 400) = 0x68636E4120646441;
  *(_QWORD *)(a1 + 408) = 29295;
  *(_BYTE *)(a1 + 423) = 10;
  if (*(char *)(a1 + 447) < 0)
    operator delete(*(void **)(a1 + 424));
  strcpy((char *)(a1 + 424), "Request to add anchor");
  *(_BYTE *)(a1 + 447) = 21;
  v32 = (char *)operator new(0x20uLL);
  strcpy(v32, "Request to remove anchor");
  if (*(char *)(a1 + 479) < 0)
    operator delete(*(void **)(a1 + 456));
  strcpy((char *)(a1 + 456), "Remove Anchor");
  *(_WORD *)(a1 + 470) = 0;
  *(_BYTE *)(a1 + 479) = 13;
  sub_20E860C04(__dst, v32, 0x18uLL);
  v33 = (void **)(a1 + 480);
  if (*(char *)(a1 + 503) < 0)
    operator delete(*v33);
  *(_OWORD *)v33 = *(_OWORD *)__dst;
  *(_QWORD *)(a1 + 496) = v73;
  operator delete(v32);
  if (*(char *)(a1 + 535) < 0)
    operator delete(*(void **)(a1 + 512));
  strcpy((char *)(a1 + 512), "MocapPose Processing");
  *(_BYTE *)(a1 + 535) = 20;
  if (*(char *)(a1 + 559) < 0)
    operator delete(*(void **)(a1 + 536));
  strcpy((char *)(a1 + 536), "Mocap Pose processing");
  *(_BYTE *)(a1 + 559) = 21;
  v34 = (char *)operator new(0x28uLL);
  strcpy(v34, "Request engine debug information");
  if (*(char *)(a1 + 647) < 0)
    operator delete(*(void **)(a1 + 624));
  strcpy((char *)(a1 + 624), "Engine Debug");
  *(_BYTE *)(a1 + 637) = 0;
  *(_WORD *)(a1 + 638) = 0;
  *(_BYTE *)(a1 + 647) = 12;
  sub_20E860C04(__dst, v34, 0x20uLL);
  v35 = (void **)(a1 + 648);
  if (*(char *)(a1 + 671) < 0)
    operator delete(*v35);
  *(_OWORD *)v35 = *(_OWORD *)__dst;
  *(_QWORD *)(a1 + 664) = v73;
  operator delete(v34);
  v36 = (char *)operator new(0x19uLL);
  strcpy(v36, "DataVerification Status");
  v37 = (char *)operator new(0x20uLL);
  strcpy(v37, "Accept Data Verification Status");
  sub_20E860C04(__dst, v36, 0x17uLL);
  v38 = (void **)(a1 + 568);
  if (*(char *)(a1 + 591) < 0)
    operator delete(*v38);
  *(_OWORD *)v38 = *(_OWORD *)__dst;
  *(_QWORD *)(a1 + 584) = v73;
  sub_20E860C04(__dst, v37, 0x1FuLL);
  v39 = (void **)(a1 + 592);
  if (*(char *)(a1 + 615) < 0)
    operator delete(*v39);
  *(_OWORD *)v39 = *(_OWORD *)__dst;
  *(_QWORD *)(a1 + 608) = v73;
  operator delete(v37);
  operator delete(v36);
  v40 = (char *)operator new(0x30uLL);
  strcpy(v40, "Input channel for collaborative mapping data");
  if (*(char *)(a1 + 703) < 0)
    operator delete(*(void **)(a1 + 680));
  strcpy((char *)(a1 + 680), "CMData Input");
  *(_BYTE *)(a1 + 693) = 0;
  *(_WORD *)(a1 + 694) = 0;
  *(_BYTE *)(a1 + 703) = 12;
  sub_20E860C04(__dst, v40, 0x2CuLL);
  v41 = (void **)(a1 + 704);
  if (*(char *)(a1 + 727) < 0)
    operator delete(*v41);
  *(_OWORD *)v41 = *(_OWORD *)__dst;
  *(_QWORD *)(a1 + 720) = v73;
  operator delete(v40);
  v42 = (char *)operator new(0x20uLL);
  strcpy(v42, "Optimized Map Input Channel");
  v43 = (char *)operator new(0x30uLL);
  strcpy(v43, "Updates the anchors with the optimized map data");
  sub_20E860C04(__dst, v42, 0x1BuLL);
  v44 = (void **)(a1 + 1072);
  if (*(char *)(a1 + 1095) < 0)
    operator delete(*v44);
  *(_OWORD *)v44 = *(_OWORD *)__dst;
  *(_QWORD *)(a1 + 1088) = v73;
  sub_20E860C04(__dst, v43, 0x2FuLL);
  v45 = (void **)(a1 + 1096);
  if (*(char *)(a1 + 1119) < 0)
    operator delete(*v45);
  *(_OWORD *)v45 = *(_OWORD *)__dst;
  *(_QWORD *)(a1 + 1112) = v73;
  operator delete(v43);
  operator delete(v42);
  v46 = (char *)operator new(0x20uLL);
  strcpy(v46, "Request the UserSessionID");
  if (*(char *)(a1 + 871) < 0)
    operator delete(*(void **)(a1 + 848));
  strcpy((char *)(a1 + 848), "UserSessionID Request");
  *(_BYTE *)(a1 + 871) = 21;
  sub_20E860C04(__dst, v46, 0x19uLL);
  v47 = (void **)(a1 + 872);
  if (*(char *)(a1 + 895) < 0)
    operator delete(*v47);
  *(_OWORD *)v47 = *(_OWORD *)__dst;
  *(_QWORD *)(a1 + 888) = v73;
  operator delete(v46);
  v48 = (char *)operator new(0x20uLL);
  strcpy(v48, "Add Online Calibration Status");
  v49 = (char *)operator new(0x58uLL);
  strcpy(v49, "Add information about when to start and stop online calibration for each camera stream");
  sub_20E860C04(__dst, v48, 0x1DuLL);
  v50 = (void **)(a1 + 904);
  if (*(char *)(a1 + 927) < 0)
    operator delete(*v50);
  *(_OWORD *)v50 = *(_OWORD *)__dst;
  *(_QWORD *)(a1 + 920) = v73;
  sub_20E860C04(__dst, v49, 0x56uLL);
  v51 = (void **)(a1 + 928);
  if (*(char *)(a1 + 951) < 0)
    operator delete(*v51);
  *(_OWORD *)v51 = *(_OWORD *)__dst;
  *(_QWORD *)(a1 + 944) = v73;
  operator delete(v49);
  operator delete(v48);
  v52 = (char *)operator new(0x20uLL);
  strcpy(v52, "Request a copy of the map");
  if (*(char *)(a1 + 1039) < 0)
    operator delete(*(void **)(a1 + 1016));
  strcpy((char *)(a1 + 1016), "Map Request Channel");
  *(_BYTE *)(a1 + 1039) = 19;
  sub_20E860C04(__dst, v52, 0x19uLL);
  v53 = (void **)(a1 + 1040);
  if (*(char *)(a1 + 1063) < 0)
    operator delete(*v53);
  *(_OWORD *)v53 = *(_OWORD *)__dst;
  *(_QWORD *)(a1 + 1056) = v73;
  operator delete(v52);
  v54 = (char *)operator new(0x20uLL);
  strcpy(v54, "Input ML Descriptors Channel");
  v55 = (char *)operator new(0x28uLL);
  strcpy(v55, "Add the ML descriptors to the LSE.");
  sub_20E860C04(__dst, v54, 0x1CuLL);
  v56 = (void **)(a1 + 1128);
  if (*(char *)(a1 + 1151) < 0)
    operator delete(*v56);
  *(_OWORD *)v56 = *(_OWORD *)__dst;
  *(_QWORD *)(a1 + 1144) = v73;
  sub_20E860C04(__dst, v55, 0x22uLL);
  v57 = (void **)(a1 + 1152);
  if (*(char *)(a1 + 1175) < 0)
    operator delete(*v57);
  *(_OWORD *)v57 = *(_OWORD *)__dst;
  *(_QWORD *)(a1 + 1168) = v73;
  operator delete(v55);
  operator delete(v54);
  v58 = (char *)operator new(0x20uLL);
  strcpy(v58, "Input ML Semantics Channel");
  v59 = (char *)operator new(0x28uLL);
  strcpy(v59, "Add the ML semantics to the LSE.");
  sub_20E860C04(__dst, v58, 0x1AuLL);
  v60 = (void **)(a1 + 1184);
  if (*(char *)(a1 + 1207) < 0)
    operator delete(*v60);
  *(_OWORD *)v60 = *(_OWORD *)__dst;
  *(_QWORD *)(a1 + 1200) = v73;
  sub_20E860C04(__dst, v59, 0x20uLL);
  v61 = (void **)(a1 + 1208);
  if (*(char *)(a1 + 1231) < 0)
    operator delete(*v61);
  *(_OWORD *)v61 = *(_OWORD *)__dst;
  *(_QWORD *)(a1 + 1224) = v73;
  operator delete(v59);
  operator delete(v58);
  v62 = (char *)operator new(0x20uLL);
  strcpy(v62, "Input Dense Depth Channel");
  v63 = (char *)operator new(0x20uLL);
  strcpy(v63, "Add the dense depth to the LSE.");
  sub_20E860C04(__dst, v62, 0x19uLL);
  v64 = (void **)(a1 + 1240);
  if (*(char *)(a1 + 1263) < 0)
    operator delete(*v64);
  *(_OWORD *)v64 = *(_OWORD *)__dst;
  *(_QWORD *)(a1 + 1256) = v73;
  sub_20E860C04(__dst, v63, 0x1FuLL);
  v65 = (void **)(a1 + 1264);
  if (*(char *)(a1 + 1287) < 0)
    operator delete(*v65);
  *(_OWORD *)v65 = *(_OWORD *)__dst;
  *(_QWORD *)(a1 + 1280) = v73;
  operator delete(v63);
  operator delete(v62);
  v66 = (char *)operator new(0x20uLL);
  strcpy(v66, "Map points request channel");
  v67 = (char *)operator new(0x28uLL);
  strcpy(v67, "Request the engine to output map points");
  sub_20E860C04(__dst, v66, 0x1AuLL);
  v68 = (void **)(a1 + 960);
  if (*(char *)(a1 + 983) < 0)
    operator delete(*v68);
  *(_OWORD *)v68 = *(_OWORD *)__dst;
  *(_QWORD *)(a1 + 976) = v73;
  sub_20E860C04(__dst, v67, 0x27uLL);
  v69 = (void **)(a1 + 984);
  if (*(char *)(a1 + 1007) < 0)
    operator delete(*v69);
  *(_OWORD *)v69 = *(_OWORD *)__dst;
  *(_QWORD *)(a1 + 1000) = v73;
  operator delete(v67);
  operator delete(v66);
  return a1;
}

void sub_20EC429B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  uint64_t v20;

  if (a14 < 0)
  {
    operator delete(__p);
    if (a20 < 0)
    {
LABEL_5:
      operator delete(a15);
      sub_20E86665C(v20 + 1728);
      sub_20EC42B5C(v20);
      _Unwind_Resume(a1);
    }
  }
  else if (a20 < 0)
  {
    goto LABEL_5;
  }
  sub_20E86665C(v20 + 1728);
  sub_20EC42B5C(v20);
  _Unwind_Resume(a1);
}

uint64_t sub_20EC42B5C(uint64_t a1)
{
  *(_QWORD *)a1 = off_24C9CFFA8;
  *(_QWORD *)(a1 + 56) = &unk_24C9CFFD0;
  *(_QWORD *)(a1 + 112) = &unk_24C9CFFF8;
  *(_QWORD *)(a1 + 168) = &unk_24C9D0020;
  *(_QWORD *)(a1 + 224) = &unk_24C9D0048;
  *(_QWORD *)(a1 + 280) = &unk_24C9D0070;
  *(_QWORD *)(a1 + 336) = &unk_24C9D0098;
  *(_QWORD *)(a1 + 392) = &unk_24C9D00C0;
  *(_QWORD *)(a1 + 448) = &unk_24C9D00E8;
  *(_QWORD *)(a1 + 504) = &unk_24C9D0110;
  *(_QWORD *)(a1 + 560) = &unk_24C9D0138;
  *(_QWORD *)(a1 + 616) = &unk_24C9D0160;
  *(_QWORD *)(a1 + 672) = &unk_24C9D0188;
  *(_QWORD *)(a1 + 728) = &unk_24C9D01B0;
  *(_QWORD *)(a1 + 784) = &unk_24C9D01D8;
  *(_QWORD *)(a1 + 840) = &unk_24C9D0200;
  *(_QWORD *)(a1 + 896) = &unk_24C9D0228;
  *(_QWORD *)(a1 + 952) = &unk_24C9D0250;
  *(_QWORD *)(a1 + 1008) = &unk_24C9D0278;
  *(_QWORD *)(a1 + 1064) = &unk_24C9D02A0;
  *(_QWORD *)(a1 + 1120) = &unk_24C9D02C8;
  *(_QWORD *)(a1 + 1176) = &unk_24C9D02F0;
  *(_QWORD *)(a1 + 1232) = &unk_24C9D0318;
  *(_QWORD *)(a1 + 1288) = &unk_24C9D0340;
  *(_QWORD *)(a1 + 1344) = &unk_24C9D0368;
  *(_QWORD *)(a1 + 1400) = &unk_24C9D0390;
  *(_QWORD *)(a1 + 1456) = &unk_24C9D03B8;
  *(_QWORD *)(a1 + 1512) = &unk_24C9D03E0;
  *(_QWORD *)(a1 + 1568) = &unk_24C9D0408;
  *(_QWORD *)(a1 + 1624) = &unk_24C9D0430;
  if (*(char *)(a1 + 1727) < 0)
  {
    operator delete(*(void **)(a1 + 1704));
    if ((*(char *)(a1 + 1703) & 0x80000000) == 0)
    {
LABEL_3:
      *(_QWORD *)(a1 + 1624) = off_24C9D08E0;
      if ((*(char *)(a1 + 1679) & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_66;
    }
  }
  else if ((*(char *)(a1 + 1703) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*(void **)(a1 + 1680));
  *(_QWORD *)(a1 + 1624) = off_24C9D08E0;
  if ((*(char *)(a1 + 1679) & 0x80000000) == 0)
  {
LABEL_4:
    if ((*(char *)(a1 + 1655) & 0x80000000) == 0)
      goto LABEL_5;
    goto LABEL_67;
  }
LABEL_66:
  operator delete(*(void **)(a1 + 1656));
  if ((*(char *)(a1 + 1655) & 0x80000000) == 0)
  {
LABEL_5:
    *(_QWORD *)(a1 + 1568) = off_24C9D08B8;
    if ((*(char *)(a1 + 1623) & 0x80000000) == 0)
      goto LABEL_6;
    goto LABEL_68;
  }
LABEL_67:
  operator delete(*(void **)(a1 + 1632));
  *(_QWORD *)(a1 + 1568) = off_24C9D08B8;
  if ((*(char *)(a1 + 1623) & 0x80000000) == 0)
  {
LABEL_6:
    if ((*(char *)(a1 + 1599) & 0x80000000) == 0)
      goto LABEL_7;
    goto LABEL_69;
  }
LABEL_68:
  operator delete(*(void **)(a1 + 1600));
  if ((*(char *)(a1 + 1599) & 0x80000000) == 0)
  {
LABEL_7:
    *(_QWORD *)(a1 + 1512) = off_24C9D0890;
    if ((*(char *)(a1 + 1567) & 0x80000000) == 0)
      goto LABEL_8;
    goto LABEL_70;
  }
LABEL_69:
  operator delete(*(void **)(a1 + 1576));
  *(_QWORD *)(a1 + 1512) = off_24C9D0890;
  if ((*(char *)(a1 + 1567) & 0x80000000) == 0)
  {
LABEL_8:
    if ((*(char *)(a1 + 1543) & 0x80000000) == 0)
      goto LABEL_9;
    goto LABEL_71;
  }
LABEL_70:
  operator delete(*(void **)(a1 + 1544));
  if ((*(char *)(a1 + 1543) & 0x80000000) == 0)
  {
LABEL_9:
    *(_QWORD *)(a1 + 1456) = off_24C9D0868;
    if ((*(char *)(a1 + 1511) & 0x80000000) == 0)
      goto LABEL_10;
    goto LABEL_72;
  }
LABEL_71:
  operator delete(*(void **)(a1 + 1520));
  *(_QWORD *)(a1 + 1456) = off_24C9D0868;
  if ((*(char *)(a1 + 1511) & 0x80000000) == 0)
  {
LABEL_10:
    if ((*(char *)(a1 + 1487) & 0x80000000) == 0)
      goto LABEL_11;
    goto LABEL_73;
  }
LABEL_72:
  operator delete(*(void **)(a1 + 1488));
  if ((*(char *)(a1 + 1487) & 0x80000000) == 0)
  {
LABEL_11:
    *(_QWORD *)(a1 + 1400) = off_24C9D0840;
    if ((*(char *)(a1 + 1455) & 0x80000000) == 0)
      goto LABEL_12;
    goto LABEL_74;
  }
LABEL_73:
  operator delete(*(void **)(a1 + 1464));
  *(_QWORD *)(a1 + 1400) = off_24C9D0840;
  if ((*(char *)(a1 + 1455) & 0x80000000) == 0)
  {
LABEL_12:
    if ((*(char *)(a1 + 1431) & 0x80000000) == 0)
      goto LABEL_13;
    goto LABEL_75;
  }
LABEL_74:
  operator delete(*(void **)(a1 + 1432));
  if ((*(char *)(a1 + 1431) & 0x80000000) == 0)
  {
LABEL_13:
    *(_QWORD *)(a1 + 1344) = off_24C9D0818;
    if ((*(char *)(a1 + 1399) & 0x80000000) == 0)
      goto LABEL_14;
    goto LABEL_76;
  }
LABEL_75:
  operator delete(*(void **)(a1 + 1408));
  *(_QWORD *)(a1 + 1344) = off_24C9D0818;
  if ((*(char *)(a1 + 1399) & 0x80000000) == 0)
  {
LABEL_14:
    if ((*(char *)(a1 + 1375) & 0x80000000) == 0)
      goto LABEL_15;
    goto LABEL_77;
  }
LABEL_76:
  operator delete(*(void **)(a1 + 1376));
  if ((*(char *)(a1 + 1375) & 0x80000000) == 0)
  {
LABEL_15:
    *(_QWORD *)(a1 + 1288) = off_24C9D07F0;
    if ((*(char *)(a1 + 1343) & 0x80000000) == 0)
      goto LABEL_16;
    goto LABEL_78;
  }
LABEL_77:
  operator delete(*(void **)(a1 + 1352));
  *(_QWORD *)(a1 + 1288) = off_24C9D07F0;
  if ((*(char *)(a1 + 1343) & 0x80000000) == 0)
  {
LABEL_16:
    if ((*(char *)(a1 + 1319) & 0x80000000) == 0)
      goto LABEL_17;
    goto LABEL_79;
  }
LABEL_78:
  operator delete(*(void **)(a1 + 1320));
  if ((*(char *)(a1 + 1319) & 0x80000000) == 0)
  {
LABEL_17:
    *(_QWORD *)(a1 + 1232) = off_24C9D07C8;
    if ((*(char *)(a1 + 1287) & 0x80000000) == 0)
      goto LABEL_18;
    goto LABEL_80;
  }
LABEL_79:
  operator delete(*(void **)(a1 + 1296));
  *(_QWORD *)(a1 + 1232) = off_24C9D07C8;
  if ((*(char *)(a1 + 1287) & 0x80000000) == 0)
  {
LABEL_18:
    if ((*(char *)(a1 + 1263) & 0x80000000) == 0)
      goto LABEL_19;
    goto LABEL_81;
  }
LABEL_80:
  operator delete(*(void **)(a1 + 1264));
  if ((*(char *)(a1 + 1263) & 0x80000000) == 0)
  {
LABEL_19:
    *(_QWORD *)(a1 + 1176) = off_24C9D07A0;
    if ((*(char *)(a1 + 1231) & 0x80000000) == 0)
      goto LABEL_20;
    goto LABEL_82;
  }
LABEL_81:
  operator delete(*(void **)(a1 + 1240));
  *(_QWORD *)(a1 + 1176) = off_24C9D07A0;
  if ((*(char *)(a1 + 1231) & 0x80000000) == 0)
  {
LABEL_20:
    if ((*(char *)(a1 + 1207) & 0x80000000) == 0)
      goto LABEL_21;
    goto LABEL_83;
  }
LABEL_82:
  operator delete(*(void **)(a1 + 1208));
  if ((*(char *)(a1 + 1207) & 0x80000000) == 0)
  {
LABEL_21:
    *(_QWORD *)(a1 + 1120) = off_24C9D0778;
    if ((*(char *)(a1 + 1175) & 0x80000000) == 0)
      goto LABEL_22;
    goto LABEL_84;
  }
LABEL_83:
  operator delete(*(void **)(a1 + 1184));
  *(_QWORD *)(a1 + 1120) = off_24C9D0778;
  if ((*(char *)(a1 + 1175) & 0x80000000) == 0)
  {
LABEL_22:
    if ((*(char *)(a1 + 1151) & 0x80000000) == 0)
      goto LABEL_23;
    goto LABEL_85;
  }
LABEL_84:
  operator delete(*(void **)(a1 + 1152));
  if ((*(char *)(a1 + 1151) & 0x80000000) == 0)
  {
LABEL_23:
    *(_QWORD *)(a1 + 1064) = off_24C9D0750;
    if ((*(char *)(a1 + 1119) & 0x80000000) == 0)
      goto LABEL_24;
    goto LABEL_86;
  }
LABEL_85:
  operator delete(*(void **)(a1 + 1128));
  *(_QWORD *)(a1 + 1064) = off_24C9D0750;
  if ((*(char *)(a1 + 1119) & 0x80000000) == 0)
  {
LABEL_24:
    if ((*(char *)(a1 + 1095) & 0x80000000) == 0)
      goto LABEL_25;
    goto LABEL_87;
  }
LABEL_86:
  operator delete(*(void **)(a1 + 1096));
  if ((*(char *)(a1 + 1095) & 0x80000000) == 0)
  {
LABEL_25:
    *(_QWORD *)(a1 + 1008) = off_24C9D0728;
    if ((*(char *)(a1 + 1063) & 0x80000000) == 0)
      goto LABEL_26;
    goto LABEL_88;
  }
LABEL_87:
  operator delete(*(void **)(a1 + 1072));
  *(_QWORD *)(a1 + 1008) = off_24C9D0728;
  if ((*(char *)(a1 + 1063) & 0x80000000) == 0)
  {
LABEL_26:
    if ((*(char *)(a1 + 1039) & 0x80000000) == 0)
      goto LABEL_27;
    goto LABEL_89;
  }
LABEL_88:
  operator delete(*(void **)(a1 + 1040));
  if ((*(char *)(a1 + 1039) & 0x80000000) == 0)
  {
LABEL_27:
    *(_QWORD *)(a1 + 952) = off_24C9D0700;
    if ((*(char *)(a1 + 1007) & 0x80000000) == 0)
      goto LABEL_28;
    goto LABEL_90;
  }
LABEL_89:
  operator delete(*(void **)(a1 + 1016));
  *(_QWORD *)(a1 + 952) = off_24C9D0700;
  if ((*(char *)(a1 + 1007) & 0x80000000) == 0)
  {
LABEL_28:
    if ((*(char *)(a1 + 983) & 0x80000000) == 0)
      goto LABEL_29;
    goto LABEL_91;
  }
LABEL_90:
  operator delete(*(void **)(a1 + 984));
  if ((*(char *)(a1 + 983) & 0x80000000) == 0)
  {
LABEL_29:
    *(_QWORD *)(a1 + 896) = off_24C9D06D8;
    if ((*(char *)(a1 + 951) & 0x80000000) == 0)
      goto LABEL_30;
    goto LABEL_92;
  }
LABEL_91:
  operator delete(*(void **)(a1 + 960));
  *(_QWORD *)(a1 + 896) = off_24C9D06D8;
  if ((*(char *)(a1 + 951) & 0x80000000) == 0)
  {
LABEL_30:
    if ((*(char *)(a1 + 927) & 0x80000000) == 0)
      goto LABEL_31;
    goto LABEL_93;
  }
LABEL_92:
  operator delete(*(void **)(a1 + 928));
  if ((*(char *)(a1 + 927) & 0x80000000) == 0)
  {
LABEL_31:
    *(_QWORD *)(a1 + 840) = off_24C9D06B0;
    if ((*(char *)(a1 + 895) & 0x80000000) == 0)
      goto LABEL_32;
    goto LABEL_94;
  }
LABEL_93:
  operator delete(*(void **)(a1 + 904));
  *(_QWORD *)(a1 + 840) = off_24C9D06B0;
  if ((*(char *)(a1 + 895) & 0x80000000) == 0)
  {
LABEL_32:
    if ((*(char *)(a1 + 871) & 0x80000000) == 0)
      goto LABEL_33;
    goto LABEL_95;
  }
LABEL_94:
  operator delete(*(void **)(a1 + 872));
  if ((*(char *)(a1 + 871) & 0x80000000) == 0)
  {
LABEL_33:
    *(_QWORD *)(a1 + 784) = off_24C9D0688;
    if ((*(char *)(a1 + 839) & 0x80000000) == 0)
      goto LABEL_34;
    goto LABEL_96;
  }
LABEL_95:
  operator delete(*(void **)(a1 + 848));
  *(_QWORD *)(a1 + 784) = off_24C9D0688;
  if ((*(char *)(a1 + 839) & 0x80000000) == 0)
  {
LABEL_34:
    if ((*(char *)(a1 + 815) & 0x80000000) == 0)
      goto LABEL_35;
    goto LABEL_97;
  }
LABEL_96:
  operator delete(*(void **)(a1 + 816));
  if ((*(char *)(a1 + 815) & 0x80000000) == 0)
  {
LABEL_35:
    *(_QWORD *)(a1 + 728) = off_24C9D0660;
    if ((*(char *)(a1 + 783) & 0x80000000) == 0)
      goto LABEL_36;
    goto LABEL_98;
  }
LABEL_97:
  operator delete(*(void **)(a1 + 792));
  *(_QWORD *)(a1 + 728) = off_24C9D0660;
  if ((*(char *)(a1 + 783) & 0x80000000) == 0)
  {
LABEL_36:
    if ((*(char *)(a1 + 759) & 0x80000000) == 0)
      goto LABEL_37;
    goto LABEL_99;
  }
LABEL_98:
  operator delete(*(void **)(a1 + 760));
  if ((*(char *)(a1 + 759) & 0x80000000) == 0)
  {
LABEL_37:
    *(_QWORD *)(a1 + 672) = off_24C9D0638;
    if ((*(char *)(a1 + 727) & 0x80000000) == 0)
      goto LABEL_38;
    goto LABEL_100;
  }
LABEL_99:
  operator delete(*(void **)(a1 + 736));
  *(_QWORD *)(a1 + 672) = off_24C9D0638;
  if ((*(char *)(a1 + 727) & 0x80000000) == 0)
  {
LABEL_38:
    if ((*(char *)(a1 + 703) & 0x80000000) == 0)
      goto LABEL_39;
    goto LABEL_101;
  }
LABEL_100:
  operator delete(*(void **)(a1 + 704));
  if ((*(char *)(a1 + 703) & 0x80000000) == 0)
  {
LABEL_39:
    *(_QWORD *)(a1 + 616) = off_24C9D0610;
    if ((*(char *)(a1 + 671) & 0x80000000) == 0)
      goto LABEL_40;
    goto LABEL_102;
  }
LABEL_101:
  operator delete(*(void **)(a1 + 680));
  *(_QWORD *)(a1 + 616) = off_24C9D0610;
  if ((*(char *)(a1 + 671) & 0x80000000) == 0)
  {
LABEL_40:
    if ((*(char *)(a1 + 647) & 0x80000000) == 0)
      goto LABEL_41;
    goto LABEL_103;
  }
LABEL_102:
  operator delete(*(void **)(a1 + 648));
  if ((*(char *)(a1 + 647) & 0x80000000) == 0)
  {
LABEL_41:
    *(_QWORD *)(a1 + 560) = off_24C9D05E8;
    if ((*(char *)(a1 + 615) & 0x80000000) == 0)
      goto LABEL_42;
    goto LABEL_104;
  }
LABEL_103:
  operator delete(*(void **)(a1 + 624));
  *(_QWORD *)(a1 + 560) = off_24C9D05E8;
  if ((*(char *)(a1 + 615) & 0x80000000) == 0)
  {
LABEL_42:
    if ((*(char *)(a1 + 591) & 0x80000000) == 0)
      goto LABEL_43;
    goto LABEL_105;
  }
LABEL_104:
  operator delete(*(void **)(a1 + 592));
  if ((*(char *)(a1 + 591) & 0x80000000) == 0)
  {
LABEL_43:
    *(_QWORD *)(a1 + 504) = off_24C9D05C0;
    if ((*(char *)(a1 + 559) & 0x80000000) == 0)
      goto LABEL_44;
    goto LABEL_106;
  }
LABEL_105:
  operator delete(*(void **)(a1 + 568));
  *(_QWORD *)(a1 + 504) = off_24C9D05C0;
  if ((*(char *)(a1 + 559) & 0x80000000) == 0)
  {
LABEL_44:
    if ((*(char *)(a1 + 535) & 0x80000000) == 0)
      goto LABEL_45;
    goto LABEL_107;
  }
LABEL_106:
  operator delete(*(void **)(a1 + 536));
  if ((*(char *)(a1 + 535) & 0x80000000) == 0)
  {
LABEL_45:
    *(_QWORD *)(a1 + 448) = off_24C9D0598;
    if ((*(char *)(a1 + 503) & 0x80000000) == 0)
      goto LABEL_46;
    goto LABEL_108;
  }
LABEL_107:
  operator delete(*(void **)(a1 + 512));
  *(_QWORD *)(a1 + 448) = off_24C9D0598;
  if ((*(char *)(a1 + 503) & 0x80000000) == 0)
  {
LABEL_46:
    if ((*(char *)(a1 + 479) & 0x80000000) == 0)
      goto LABEL_47;
    goto LABEL_109;
  }
LABEL_108:
  operator delete(*(void **)(a1 + 480));
  if ((*(char *)(a1 + 479) & 0x80000000) == 0)
  {
LABEL_47:
    *(_QWORD *)(a1 + 392) = off_24C9D0570;
    if ((*(char *)(a1 + 447) & 0x80000000) == 0)
      goto LABEL_48;
    goto LABEL_110;
  }
LABEL_109:
  operator delete(*(void **)(a1 + 456));
  *(_QWORD *)(a1 + 392) = off_24C9D0570;
  if ((*(char *)(a1 + 447) & 0x80000000) == 0)
  {
LABEL_48:
    if ((*(char *)(a1 + 423) & 0x80000000) == 0)
      goto LABEL_49;
    goto LABEL_111;
  }
LABEL_110:
  operator delete(*(void **)(a1 + 424));
  if ((*(char *)(a1 + 423) & 0x80000000) == 0)
  {
LABEL_49:
    *(_QWORD *)(a1 + 336) = off_24C9D0548;
    if ((*(char *)(a1 + 391) & 0x80000000) == 0)
      goto LABEL_50;
    goto LABEL_112;
  }
LABEL_111:
  operator delete(*(void **)(a1 + 400));
  *(_QWORD *)(a1 + 336) = off_24C9D0548;
  if ((*(char *)(a1 + 391) & 0x80000000) == 0)
  {
LABEL_50:
    if ((*(char *)(a1 + 367) & 0x80000000) == 0)
      goto LABEL_51;
    goto LABEL_113;
  }
LABEL_112:
  operator delete(*(void **)(a1 + 368));
  if ((*(char *)(a1 + 367) & 0x80000000) == 0)
  {
LABEL_51:
    *(_QWORD *)(a1 + 280) = off_24C9D0520;
    if ((*(char *)(a1 + 335) & 0x80000000) == 0)
      goto LABEL_52;
    goto LABEL_114;
  }
LABEL_113:
  operator delete(*(void **)(a1 + 344));
  *(_QWORD *)(a1 + 280) = off_24C9D0520;
  if ((*(char *)(a1 + 335) & 0x80000000) == 0)
  {
LABEL_52:
    if ((*(char *)(a1 + 311) & 0x80000000) == 0)
      goto LABEL_53;
    goto LABEL_115;
  }
LABEL_114:
  operator delete(*(void **)(a1 + 312));
  if ((*(char *)(a1 + 311) & 0x80000000) == 0)
  {
LABEL_53:
    *(_QWORD *)(a1 + 224) = off_24C9D04F8;
    if ((*(char *)(a1 + 279) & 0x80000000) == 0)
      goto LABEL_54;
    goto LABEL_116;
  }
LABEL_115:
  operator delete(*(void **)(a1 + 288));
  *(_QWORD *)(a1 + 224) = off_24C9D04F8;
  if ((*(char *)(a1 + 279) & 0x80000000) == 0)
  {
LABEL_54:
    if ((*(char *)(a1 + 255) & 0x80000000) == 0)
      goto LABEL_55;
    goto LABEL_117;
  }
LABEL_116:
  operator delete(*(void **)(a1 + 256));
  if ((*(char *)(a1 + 255) & 0x80000000) == 0)
  {
LABEL_55:
    *(_QWORD *)(a1 + 168) = off_24C9D04D0;
    if ((*(char *)(a1 + 223) & 0x80000000) == 0)
      goto LABEL_56;
    goto LABEL_118;
  }
LABEL_117:
  operator delete(*(void **)(a1 + 232));
  *(_QWORD *)(a1 + 168) = off_24C9D04D0;
  if ((*(char *)(a1 + 223) & 0x80000000) == 0)
  {
LABEL_56:
    if ((*(char *)(a1 + 199) & 0x80000000) == 0)
      goto LABEL_57;
    goto LABEL_119;
  }
LABEL_118:
  operator delete(*(void **)(a1 + 200));
  if ((*(char *)(a1 + 199) & 0x80000000) == 0)
  {
LABEL_57:
    *(_QWORD *)(a1 + 112) = off_24C9D04A8;
    if ((*(char *)(a1 + 167) & 0x80000000) == 0)
      goto LABEL_58;
    goto LABEL_120;
  }
LABEL_119:
  operator delete(*(void **)(a1 + 176));
  *(_QWORD *)(a1 + 112) = off_24C9D04A8;
  if ((*(char *)(a1 + 167) & 0x80000000) == 0)
  {
LABEL_58:
    if ((*(char *)(a1 + 143) & 0x80000000) == 0)
      goto LABEL_59;
    goto LABEL_121;
  }
LABEL_120:
  operator delete(*(void **)(a1 + 144));
  if ((*(char *)(a1 + 143) & 0x80000000) == 0)
  {
LABEL_59:
    *(_QWORD *)(a1 + 56) = off_24C9D0480;
    if ((*(char *)(a1 + 111) & 0x80000000) == 0)
      goto LABEL_60;
    goto LABEL_122;
  }
LABEL_121:
  operator delete(*(void **)(a1 + 120));
  *(_QWORD *)(a1 + 56) = off_24C9D0480;
  if ((*(char *)(a1 + 111) & 0x80000000) == 0)
  {
LABEL_60:
    if ((*(char *)(a1 + 87) & 0x80000000) == 0)
      goto LABEL_61;
    goto LABEL_123;
  }
LABEL_122:
  operator delete(*(void **)(a1 + 88));
  if ((*(char *)(a1 + 87) & 0x80000000) == 0)
  {
LABEL_61:
    *(_QWORD *)a1 = off_24C9D0458;
    if ((*(char *)(a1 + 55) & 0x80000000) == 0)
      goto LABEL_62;
LABEL_124:
    operator delete(*(void **)(a1 + 32));
    if ((*(char *)(a1 + 31) & 0x80000000) == 0)
      return a1;
    goto LABEL_125;
  }
LABEL_123:
  operator delete(*(void **)(a1 + 64));
  *(_QWORD *)a1 = off_24C9D0458;
  if (*(char *)(a1 + 55) < 0)
    goto LABEL_124;
LABEL_62:
  if ((*(char *)(a1 + 31) & 0x80000000) == 0)
    return a1;
LABEL_125:
  operator delete(*(void **)(a1 + 8));
  return a1;
}

_QWORD *sub_20EC43518@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  _QWORD *result;
  uint64_t v4;
  _QWORD v5[3];
  _QWORD *v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v5[0] = &off_24C9D0948;
  v5[1] = a1;
  v5[2] = a2;
  v6 = v5;
  sub_20EC435F8(a3, a1, (uint64_t)v5);
  result = v6;
  if (v6 == v5)
  {
    v4 = 4;
    result = v5;
  }
  else
  {
    if (!v6)
      return result;
    v4 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v4))();
}

void sub_20EC435BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v14;
  uint64_t v15;

  v14 = a13;
  if (a13 == &a10)
  {
    v15 = 4;
    v14 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v15 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v14 + 8 * v15))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t sub_20EC435F8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!a3)
    sub_20E86D37C();
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 48))(a3);
}

void sub_20EC4364C(uint64_t a1, __int128 a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, char *category, uint64_t a13, std::string *a14, char a15)
{
  __break(1u);
  JUMPOUT(0x20EC43784);
}

void sub_20EC43974(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,void *a24,int a25,__int16 a26,char a27,char a28,char a29,int a30,__int16 a31,char a32,char a33)
{
  if (a29)
  {
    if (a28 < 0)
      operator delete(__p);
  }
  __cxa_guard_abort(&qword_254A4A510);
  sub_20E863714((uint64_t)&a10);
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

_QWORD *sub_20EC43A80@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  _QWORD *result;
  uint64_t v4;
  _QWORD v5[3];
  _QWORD *v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v5[0] = &off_24C9D0AA0;
  v5[1] = a1;
  v5[2] = a2;
  v6 = v5;
  sub_20EC435F8(a3, a1, (uint64_t)v5);
  result = v6;
  if (v6 == v5)
  {
    v4 = 4;
    result = v5;
  }
  else
  {
    if (!v6)
      return result;
    v4 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v4))();
}

void sub_20EC43B24(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v14;
  uint64_t v15;

  v14 = a13;
  if (a13 == &a10)
  {
    v15 = 4;
    v14 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v15 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v14 + 8 * v15))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20EC43B60@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  _QWORD *result;
  uint64_t v4;
  _QWORD v5[3];
  _QWORD *v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v5[0] = &off_24C9D0AA0;
  v5[1] = a1 - 56;
  v5[2] = a2;
  v6 = v5;
  sub_20EC435F8(a3, a1 - 56, (uint64_t)v5);
  result = v6;
  if (v6 == v5)
  {
    v4 = 4;
    result = v5;
  }
  else
  {
    if (!v6)
      return result;
    v4 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v4))();
}

void sub_20EC43C04(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v14;
  uint64_t v15;

  v14 = a13;
  if (a13 == &a10)
  {
    v15 = 4;
    v14 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v15 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v14 + 8 * v15))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void sub_20EC43C40(uint64_t a1@<X0>, uint64_t *a2@<X1>, _BYTE *a3@<X8>)
{
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v7;
  uint64_t v8;
  _QWORD *v9;
  std::string *v10;
  std::string *v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  uint64_t *v16;
  std::runtime_error *exception;
  uint64_t v18;
  std::__shared_weak_count *v19;
  std::string v20;
  std::string *v21;
  uint64_t v22;

  v22 = *MEMORY[0x24BDAC8D0];
  v18 = 0;
  v19 = 0;
  v5 = (std::__shared_weak_count *)a2[1];
  if (!v5 || (v7 = std::__shared_weak_count::lock(v5), (v19 = v7) == 0) || (v8 = *a2, (v18 = v8) == 0))
  {
    kdebug_trace();
    v16 = sub_210219C18();
    sub_20EC43EF0((uint64_t)v16, 0xEEEEB0B5B2B2EEEELL);
    exception = (std::runtime_error *)__cxa_allocate_exception(0x18uLL);
    sub_20E8610C0(&v20, "SLAM has dropped a camera frame");
    std::runtime_error::runtime_error(exception, &v20);
    exception->__vftable = (std::runtime_error_vtbl *)&off_24C9D0E90;
    LODWORD(exception[1].__vftable) = 25;
    __cxa_throw(exception, (struct type_info *)&unk_24C9D0EA8, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  v9 = *(_QWORD **)v8;
  if (*(_QWORD *)v8 != *(_QWORD *)(v8 + 8))
  {
    v20.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_24C9D0B20;
    v20.__r_.__value_.__l.__size_ = (std::string::size_type)&v18;
    v10 = &v20;
    v20.__r_.__value_.__r.__words[2] = a1;
    v21 = &v20;
    if (*v9 == v9[1])
    {
      if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/FeatureDetection/src/NodeCameraSetFeatures.cpp", 77, (uint64_t)"!sequence_camera_stream_features_.empty()", 41, (uint64_t)&unk_2102C50BE, 0, (void (*)(void **))sub_21023DDB0))
      {
        abort();
      }
      v10 = v21;
    }
    sub_20EC435F8((uint64_t)a3, a1, (uint64_t)v10);
    v11 = v21;
    if (v21 == &v20)
    {
      v12 = 4;
      v11 = &v20;
    }
    else
    {
      if (!v21)
        goto LABEL_14;
      v12 = 5;
    }
    (*(void (**)(void))(v11->__r_.__value_.__r.__words[0] + 8 * v12))();
LABEL_14:
    v13 = v19;
    if (!v19)
      return;
    goto LABEL_15;
  }
  v13 = v7;
  *a3 = 0;
  a3[16] = 0;
LABEL_15:
  p_shared_owners = (unint64_t *)&v13->__shared_owners_;
  do
    v15 = __ldaxr(p_shared_owners);
  while (__stlxr(v15 - 1, p_shared_owners));
  if (!v15)
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
  }
}

void sub_20EC43E54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18)
{
  void *v18;
  int v19;

  if (a17 < 0)
  {
    operator delete(__p);
    if ((v19 & 1) == 0)
    {
LABEL_6:
      sub_20E86665C((uint64_t)&a10);
      _Unwind_Resume(a1);
    }
  }
  else if (!v19)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v18);
  goto LABEL_6;
}

void sub_20EC43EF0(uint64_t a1, uint64_t a2)
{
  unsigned __int8 v4;
  char *v6;
  size_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t i;
  uint64_t v11;
  void *v12[3];
  char v13;
  void *v14;
  char v15;
  char v16;
  void *v17;
  char v18;
  char v19;
  void *v20;
  char v21;
  void *__p;
  char v23;
  __uint64_t v24[2];

  v4 = atomic_load((unsigned __int8 *)&qword_254A6DDD0);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DDD0))
  {
    __cxa_atexit((void (*)(void *))sub_21021A250, &stru_254A5A410, &dword_20E81F000);
    __cxa_guard_release(&qword_254A6DDD0);
  }
  if (atomic_load(&qword_254A5A450))
  {
    LOWORD(v12[0]) = 0;
    v6 = (char *)_os_log_send_and_compose_impl();
    v7 = strlen(v6);
    v24[0] = 0;
    pthread_threadid_np(0, v24);
    v8 = v24[0];
    timespec_get((timespec *)v24, 1);
    sub_210219E20(v12, a2, "Trace", 5uLL, (__int128 *)(a1 + 8), (__int128 *)(a1 + 40), "SLAM has dropped a camera frame", 0x1FuLL, v6, v7, v8, v24);
    std::mutex::lock(&stru_254A5A410);
    v9 = qword_254A5A458;
    for (i = unk_254A5A460; v9 != i; v9 += 40)
    {
      v11 = *(_QWORD *)(v9 + 32);
      if (!v11)
        sub_20E86D37C();
      (*(void (**)(uint64_t, void **))(*(_QWORD *)v11 + 48))(v11, v12);
    }
    std::mutex::unlock(&stru_254A5A410);
    if (v23 < 0)
    {
      operator delete(__p);
      if ((v21 & 0x80000000) == 0)
      {
LABEL_8:
        if (!v19)
        {
LABEL_14:
          if (v16 && v15 < 0)
            operator delete(v14);
          if (v13 < 0)
            operator delete(v12[1]);
          if (v6)
            free(v6);
          goto LABEL_21;
        }
LABEL_12:
        if (v18 < 0)
          operator delete(v17);
        goto LABEL_14;
      }
    }
    else if ((v21 & 0x80000000) == 0)
    {
      goto LABEL_8;
    }
    operator delete(v20);
    if (!v19)
      goto LABEL_14;
    goto LABEL_12;
  }
LABEL_21:
  if ((unint64_t)(a2 - 1) <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(*(os_log_t *)a1))
  {
    LOWORD(v12[0]) = 0;
    _os_signpost_emit_unreliably_with_name_impl();
  }
}

void sub_20EC44164(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  void *v5;
  va_list va;

  va_start(va, a5);
  sub_20E96E218((uint64_t)va);
  if (v5)
    free(v5);
  _Unwind_Resume(a1);
}

void sub_20EC441A4(uint64_t a1@<X0>, uint64_t *a2@<X1>, _BYTE *a3@<X8>)
{
  sub_20EC43C40(a1 - 112, a2, a3);
}

_QWORD *sub_20EC441AC(_QWORD *result, uint64_t a2)
{
  uint64_t v2;
  _QWORD v3[3];
  _QWORD *v4;
  uint64_t v5;

  v5 = *MEMORY[0x24BDAC8D0];
  if (*(_QWORD *)a2 && **(_QWORD **)a2 != *(_QWORD *)(*(_QWORD *)a2 + 8))
  {
    v3[0] = &off_24C9D0BA0;
    v3[1] = result;
    v3[2] = a2;
    v4 = v3;
    sub_20EC44294((uint64_t)result, (uint64_t)v3);
    result = v4;
    if (v4 == v3)
    {
      v2 = 4;
      result = v3;
    }
    else
    {
      if (!v4)
        return result;
      v2 = 5;
    }
    return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v2))();
  }
  return result;
}

void sub_20EC44258(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v14;
  uint64_t v15;

  v14 = a13;
  if (a13 == &a10)
  {
    v15 = 4;
    v14 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v15 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v14 + 8 * v15))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t sub_20EC44294(uint64_t a1, uint64_t a2)
{
  if (!a2)
    sub_20E86D37C();
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 48))(a2);
}

void sub_20EC442E4(uint64_t a1, __int128 a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, char *category, uint64_t a13, std::string *a14, char a15)
{
  __break(1u);
  JUMPOUT(0x20EC4441CLL);
}

void sub_20EC4460C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,void *a24,int a25,__int16 a26,char a27,char a28,char a29,int a30,__int16 a31,char a32,char a33)
{
  if (a29)
  {
    if (a28 < 0)
      operator delete(__p);
  }
  __cxa_guard_abort(&qword_254A4A510);
  sub_20E863714((uint64_t)&a10);
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

_QWORD *sub_20EC44718(_QWORD *result, uint64_t a2)
{
  uint64_t v2;
  _QWORD v3[3];
  _QWORD *v4;
  uint64_t v5;

  v5 = *MEMORY[0x24BDAC8D0];
  if (*(_QWORD *)a2 && **(_QWORD **)a2 != *(_QWORD *)(*(_QWORD *)a2 + 8))
  {
    v3[0] = &off_24C9D0BA0;
    v3[1] = result - 140;
    v3[2] = a2;
    v4 = v3;
    sub_20EC44294((uint64_t)(result - 140), (uint64_t)v3);
    result = v4;
    if (v4 == v3)
    {
      v2 = 4;
      result = v3;
    }
    else
    {
      if (!v4)
        return result;
      v2 = 5;
    }
    return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v2))();
  }
  return result;
}

void sub_20EC447C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v14;
  uint64_t v15;

  v14 = a13;
  if (a13 == &a10)
  {
    v15 = 4;
    v14 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v15 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v14 + 8 * v15))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20EC44804(_QWORD *result, uint64_t a2)
{
  uint64_t v2;
  _QWORD v3[3];
  _QWORD *v4;
  uint64_t v5;

  v5 = *MEMORY[0x24BDAC8D0];
  if (*(_QWORD *)a2 && **(_QWORD **)a2 != *(_QWORD *)(*(_QWORD *)a2 + 8))
  {
    v3[0] = &off_24C9D0C20;
    v3[1] = result;
    v3[2] = a2;
    v4 = v3;
    sub_20EC44294((uint64_t)result, (uint64_t)v3);
    result = v4;
    if (v4 == v3)
    {
      v2 = 4;
      result = v3;
    }
    else
    {
      if (!v4)
        return result;
      v2 = 5;
    }
    return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v2))();
  }
  return result;
}

void sub_20EC448B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v14;
  uint64_t v15;

  v14 = a13;
  if (a13 == &a10)
  {
    v15 = 4;
    v14 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v15 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v14 + 8 * v15))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20EC448EC(_QWORD *result, uint64_t a2)
{
  uint64_t v2;
  _QWORD v3[3];
  _QWORD *v4;
  uint64_t v5;

  v5 = *MEMORY[0x24BDAC8D0];
  if (*(_QWORD *)a2 && **(_QWORD **)a2 != *(_QWORD *)(*(_QWORD *)a2 + 8))
  {
    v3[0] = &off_24C9D0C20;
    v3[1] = result - 147;
    v3[2] = a2;
    v4 = v3;
    sub_20EC44294((uint64_t)(result - 147), (uint64_t)v3);
    result = v4;
    if (v4 == v3)
    {
      v2 = 4;
      result = v3;
    }
    else
    {
      if (!v4)
        return result;
      v2 = 5;
    }
    return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v2))();
  }
  return result;
}

void sub_20EC4499C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v14;
  uint64_t v15;

  v14 = a13;
  if (a13 == &a10)
  {
    v15 = 4;
    v14 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v15 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v14 + 8 * v15))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20EC449D8(_QWORD *result, uint64_t a2)
{
  uint64_t v2;
  _QWORD v3[3];
  _QWORD *v4;
  uint64_t v5;

  v5 = *MEMORY[0x24BDAC8D0];
  if (*(_QWORD *)a2 && **(_QWORD **)a2 != *(_QWORD *)(*(_QWORD *)a2 + 8))
  {
    v3[0] = &off_24C9D0CA0;
    v3[1] = result;
    v3[2] = a2;
    v4 = v3;
    sub_20EC44294((uint64_t)result, (uint64_t)v3);
    result = v4;
    if (v4 == v3)
    {
      v2 = 4;
      result = v3;
    }
    else
    {
      if (!v4)
        return result;
      v2 = 5;
    }
    return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v2))();
  }
  return result;
}

void sub_20EC44A84(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v14;
  uint64_t v15;

  v14 = a13;
  if (a13 == &a10)
  {
    v15 = 4;
    v14 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v15 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v14 + 8 * v15))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20EC44AC0(_QWORD *result, uint64_t a2)
{
  uint64_t v2;
  _QWORD v3[3];
  _QWORD *v4;
  uint64_t v5;

  v5 = *MEMORY[0x24BDAC8D0];
  if (*(_QWORD *)a2 && **(_QWORD **)a2 != *(_QWORD *)(*(_QWORD *)a2 + 8))
  {
    v3[0] = &off_24C9D0CA0;
    v3[1] = result - 154;
    v3[2] = a2;
    v4 = v3;
    sub_20EC44294((uint64_t)(result - 154), (uint64_t)v3);
    result = v4;
    if (v4 == v3)
    {
      v2 = 4;
      result = v3;
    }
    else
    {
      if (!v4)
        return result;
      v2 = 5;
    }
    return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v2))();
  }
  return result;
}

void sub_20EC44B70(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v14;
  uint64_t v15;

  v14 = a13;
  if (a13 == &a10)
  {
    v15 = 4;
    v14 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v15 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v14 + 8 * v15))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20EC44BAC(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  _QWORD v3[3];
  _QWORD *v4;
  uint64_t v5;

  v5 = *MEMORY[0x24BDAC8D0];
  if (*a2 != a2[1])
  {
    v3[0] = &off_24C9D0D20;
    v3[1] = result;
    v3[2] = a2;
    v4 = v3;
    sub_20EC44294((uint64_t)result, (uint64_t)v3);
    result = v4;
    if (v4 == v3)
    {
      v2 = 4;
      result = v3;
    }
    else
    {
      if (!v4)
        return result;
      v2 = 5;
    }
    return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v2))();
  }
  return result;
}

void sub_20EC44C54(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v14;
  uint64_t v15;

  v14 = a13;
  if (a13 == &a10)
  {
    v15 = 4;
    v14 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v15 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v14 + 8 * v15))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20EC44C90(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  _QWORD v3[3];
  _QWORD *v4;
  uint64_t v5;

  v5 = *MEMORY[0x24BDAC8D0];
  if (*a2 != a2[1])
  {
    v3[0] = &off_24C9D0D20;
    v3[1] = result - 91;
    v3[2] = a2;
    v4 = v3;
    sub_20EC44294((uint64_t)(result - 91), (uint64_t)v3);
    result = v4;
    if (v4 == v3)
    {
      v2 = 4;
      result = v3;
    }
    else
    {
      if (!v4)
        return result;
      v2 = 5;
    }
    return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v2))();
  }
  return result;
}

void sub_20EC44D3C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v14;
  uint64_t v15;

  v14 = a13;
  if (a13 == &a10)
  {
    v15 = 4;
    v14 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v15 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v14 + 8 * v15))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t sub_20EC44D78(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 1728) + 96))(*(_QWORD *)(a1 + 1728));
}

uint64_t sub_20EC44D88(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 1560) + 96))(*(_QWORD *)(a1 + 1560));
}

double sub_20EC44D98@<D0>(uint64_t a1@<X0>, unsigned __int8 *a2@<X1>, uint64_t a3@<X8>)
{
  int v5;
  double result;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;

  v5 = *a2;
  if (v5 == 2)
  {
    (*(void (**)(__int128 *__return_ptr, _QWORD, uint64_t, _QWORD, _QWORD))(**(_QWORD **)(a1 + 1728) + 304))(&v9, *(_QWORD *)(a1 + 1728), 1, 0, 0);
    v7 = v9;
    if ((_QWORD)v9)
      *(_BYTE *)(v9 + 128) = 1;
    v8 = *((_QWORD *)&v9 + 1);
    *(_QWORD *)a3 = v7;
    *(_QWORD *)(a3 + 8) = v8;
    *(_BYTE *)(a3 + 16) = 1;
  }
  else
  {
    if (v5 == 1)
    {
      (*(void (**)(__int128 *__return_ptr, _QWORD, uint64_t, _QWORD, _QWORD))(**(_QWORD **)(a1 + 1728) + 304))(&v9, *(_QWORD *)(a1 + 1728), 1, 0, 0);
      *(_BYTE *)(v9 + 96) = 1;
      (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 1728) + 264))(*(_QWORD *)(a1 + 1728));
    }
    else
    {
      (*(void (**)(__int128 *__return_ptr, _QWORD, _QWORD, _QWORD, _QWORD))(**(_QWORD **)(a1 + 1728) + 304))(&v9, *(_QWORD *)(a1 + 1728), 0, 0, 0);
    }
    result = *(double *)&v9;
    *(_OWORD *)a3 = v9;
    *(_BYTE *)(a3 + 16) = 1;
  }
  return result;
}

void sub_20EC44EB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

double sub_20EC44ECC@<D0>(uint64_t a1@<X0>, unsigned __int8 *a2@<X1>, uint64_t a3@<X8>)
{
  return sub_20EC44D98(a1 - 224, a2, a3);
}

uint64_t sub_20EC44ED4(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 1728) + 312))(*(_QWORD *)(a1 + 1728));
}

uint64_t sub_20EC44EE4(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 1448) + 312))(*(_QWORD *)(a1 + 1448));
}

uint64_t sub_20EC44EF4(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 1728) + 320))(*(_QWORD *)(a1 + 1728));
}

uint64_t sub_20EC44F04(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 1392) + 320))(*(_QWORD *)(a1 + 1392));
}

__n128 sub_20EC44F14@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  float64x2_t v5;
  uint64_t v6;
  float64x2_t v7;
  float64x2_t v9;
  float64x2_t v10;
  float64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  __int128 v15;
  double v16;
  uint64_t v23;
  _OWORD *v24;
  __int128 v25;
  int v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;
  unint64_t *v35;
  unint64_t v36;
  char v37;
  __n128 result;
  void *__p;
  __int128 v40;
  _BYTE v41[80];
  uint64_t v42;
  _OWORD v43[2];
  uint64_t v44;
  _OWORD v45[2];
  int v46;
  uint64_t v47;

  v47 = *MEMORY[0x24BDAC8D0];
  v5.f64[1] = 0.0;
  memset(v43, 0, sizeof(v43));
  memset(&v41[56], 0, 24);
  *(_QWORD *)v41 = 0x3FF0000000000000;
  *(_OWORD *)&v41[40] = 0x3FF0000000000000uLL;
  v42 = 0x3FF0000000000000;
  v44 = 0x3FF0000000000000;
  v6 = a2 + 48;
  memset(&v41[8], 0, 32);
  if ((_BYTE *)(a2 + 48) == v41)
  {
    v11 = *(double *)&v41[24];
    v14 = *(_QWORD *)&v41[64];
    v15 = *(_OWORD *)&v41[48];
    *(_QWORD *)&v41[48] = *(_QWORD *)&v41[40];
    *(_OWORD *)&v41[32] = *(_OWORD *)&v41[24];
    *(_OWORD *)&v41[64] = v15;
    v42 = v14;
    *(_QWORD *)&v5.f64[0] = v15;
    v7 = *(float64x2_t *)v41;
    _D3 = vextq_s8(*(int8x16_t *)&v41[32], *(int8x16_t *)&v41[32], 8uLL).u64[0];
    *(_QWORD *)&v9.f64[0] = vextq_s8(*(int8x16_t *)&v41[16], *(int8x16_t *)&v41[16], 8uLL).u64[0];
    v13 = vextq_s8((int8x16_t)v7, (int8x16_t)v7, 8uLL).u64[0];
    v10 = *(float64x2_t *)&v41[48];
    v12 = vextq_s8((int8x16_t)v10, (int8x16_t)v10, 8uLL).u64[0];
  }
  else
  {
    v7 = *(float64x2_t *)(a2 + 48);
    _D3 = *(_QWORD *)(a2 + 88);
    v9 = *(float64x2_t *)(a2 + 72);
    v5.f64[0] = *(float64_t *)(a2 + 112);
    v10 = *(float64x2_t *)(a2 + 96);
    v11 = *(double *)(a2 + 80);
    v12 = vextq_s8((int8x16_t)v10, (int8x16_t)v10, 8uLL).u64[0];
    v13 = vextq_s8((int8x16_t)v7, (int8x16_t)v7, 8uLL).u64[0];
    *(_QWORD *)&v41[16] = *(_QWORD *)(a2 + 64);
    *(float64x2_t *)v41 = v7;
    *(_QWORD *)&v41[48] = _D3;
    *(float64x2_t *)&v41[32] = v9;
    v42 = *(_QWORD *)&v5.f64[0];
    *(float64x2_t *)&v41[64] = v10;
  }
  v16 = *(double *)(a2 + 136);
  _Q18 = *(float64x2_t *)(a2 + 120);
  *(_QWORD *)&v10.f64[1] = v12;
  *(_QWORD *)&v7.f64[1] = v13;
  v9.f64[1] = v11;
  __asm { FMLA            D1, D3, V18.D[1] }
  v5.f64[0] = _D1 + v5.f64[0] * v16;
  *(float64x2_t *)((char *)v43 + 8) = vnegq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v7, _Q18.f64[0]), v9, _Q18, 1), v10, v16));
  *((_QWORD *)&v43[1] + 1) = *(_OWORD *)&vnegq_f64(v5);
  v23 = *(_QWORD *)(a1 + 1728);
  sub_2102323F4((unsigned __int8 *)a2, v45);
  v24 = operator new(0x28uLL);
  __p = v24;
  v40 = xmmword_2102E0950;
  v25 = v45[1];
  *v24 = v45[0];
  v24[1] = v25;
  *((_DWORD *)v24 + 8) = v46;
  *((_BYTE *)v24 + 36) = 0;
  v26 = (*(uint64_t (**)(uint64_t, void **, _BYTE *, double))(*(_QWORD *)v23 + 144))(v23, &__p, v41, 0.0);
  if (SHIBYTE(v40) < 0)
    operator delete(__p);
  *(_OWORD *)a3 = *(_OWORD *)a2;
  *(_BYTE *)(a3 + 16) = 0;
  *(_BYTE *)(a3 + 40) = 0;
  if (*(_BYTE *)(a2 + 40))
  {
    if (*(char *)(a2 + 39) < 0)
    {
      sub_20E860C04((_BYTE *)(a3 + 16), *(void **)(a2 + 16), *(_QWORD *)(a2 + 24));
    }
    else
    {
      *(_OWORD *)(a3 + 16) = *(_OWORD *)(a2 + 16);
      *(_QWORD *)(a3 + 32) = *(_QWORD *)(a2 + 32);
    }
    *(_BYTE *)(a3 + 40) = 1;
  }
  v27 = *(_OWORD *)(v6 + 208);
  *(_OWORD *)(a3 + 240) = *(_OWORD *)(v6 + 192);
  *(_OWORD *)(a3 + 256) = v27;
  *(_BYTE *)(a3 + 272) = *(_BYTE *)(v6 + 224);
  v28 = *(_OWORD *)(v6 + 144);
  *(_OWORD *)(a3 + 176) = *(_OWORD *)(v6 + 128);
  *(_OWORD *)(a3 + 192) = v28;
  v29 = *(_OWORD *)(v6 + 176);
  *(_OWORD *)(a3 + 208) = *(_OWORD *)(v6 + 160);
  *(_OWORD *)(a3 + 224) = v29;
  v30 = *(_OWORD *)(v6 + 80);
  *(_OWORD *)(a3 + 112) = *(_OWORD *)(v6 + 64);
  *(_OWORD *)(a3 + 128) = v30;
  v31 = *(_OWORD *)(v6 + 112);
  *(_OWORD *)(a3 + 144) = *(_OWORD *)(v6 + 96);
  *(_OWORD *)(a3 + 160) = v31;
  v32 = *(_OWORD *)(v6 + 16);
  *(_OWORD *)(a3 + 48) = *(_OWORD *)v6;
  *(_OWORD *)(a3 + 64) = v32;
  v33 = *(_OWORD *)(v6 + 48);
  *(_OWORD *)(a3 + 80) = *(_OWORD *)(v6 + 32);
  *(_OWORD *)(a3 + 96) = v33;
  *(_BYTE *)(a3 + 280) = 0;
  *(_BYTE *)(a3 + 296) = 0;
  if (*(_BYTE *)(a2 + 296))
  {
    v34 = *(_QWORD *)(a2 + 288);
    *(_QWORD *)(a3 + 280) = *(_QWORD *)(a2 + 280);
    *(_QWORD *)(a3 + 288) = v34;
    if (v34)
    {
      v35 = (unint64_t *)(v34 + 8);
      do
        v36 = __ldxr(v35);
      while (__stxr(v36 + 1, v35));
    }
    *(_BYTE *)(a3 + 296) = 1;
  }
  if (v26)
    v37 = 0;
  else
    v37 = 5;
  result = *(__n128 *)(a2 + 304);
  *(__n128 *)(a3 + 304) = result;
  *(_QWORD *)(a3 + 320) = *(_QWORD *)(a2 + 320);
  *(_BYTE *)(a3 + 328) = v37;
  *(_BYTE *)(a3 + 329) = 0;
  *(_BYTE *)(a3 + 345) = 0;
  return result;
}

void sub_20EC451D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;
  void **v16;

  if (*(_BYTE *)(v15 + 40))
  {
    if (*(char *)(v15 + 39) < 0)
    {
      operator delete(*v16);
      _Unwind_Resume(exception_object);
    }
  }
  _Unwind_Resume(exception_object);
}

double sub_20EC45220@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  double result;

  *(_QWORD *)&result = sub_20EC44F14(a1 - 392, a2, a3).n128_u64[0];
  return result;
}

void sub_20EC45228(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v2;
  _OWORD *v3;
  __int128 v4;
  void *__p;
  __int128 v6;
  _OWORD v7[2];
  int v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v2 = *(_QWORD *)(a1 + 1728);
  sub_2102323F4(a2, v7);
  v3 = operator new(0x28uLL);
  __p = v3;
  v6 = xmmword_2102E0950;
  v4 = v7[1];
  *v3 = v7[0];
  v3[1] = v4;
  *((_DWORD *)v3 + 8) = v8;
  *((_BYTE *)v3 + 36) = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v2 + 184))(v2, &__p);
  if (SHIBYTE(v6) < 0)
    operator delete(__p);
}

void sub_20EC452D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20EC452F4(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v2;
  _OWORD *v3;
  __int128 v4;
  void *__p;
  __int128 v6;
  _OWORD v7[2];
  int v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v2 = *(_QWORD *)(a1 + 1280);
  sub_2102323F4(a2, v7);
  v3 = operator new(0x28uLL);
  __p = v3;
  v6 = xmmword_2102E0950;
  v4 = v7[1];
  *v3 = v7[0];
  v3[1] = v4;
  *((_DWORD *)v3 + 8) = v8;
  *((_BYTE *)v3 + 36) = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v2 + 184))(v2, &__p);
  if (SHIBYTE(v6) < 0)
    operator delete(__p);
}

void sub_20EC453A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20EC453C0(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 1728) + 112))(*(_QWORD *)(a1 + 1728));
}

uint64_t sub_20EC453D0(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 1224) + 112))(*(_QWORD *)(a1 + 1224));
}

void sub_20EC453E0(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v6;
  unsigned __int8 v7;
  char *v9;
  size_t v10;
  __darwin_time_t tv_sec;
  uint64_t v12;
  uint64_t i;
  uint64_t v14;
  char *v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  _BYTE *v19;
  __int128 v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  int v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  char *v28;
  std::__shared_weak_count *v29;
  unsigned __int8 v30;
  void *v31[3];
  char v32;
  void *v33;
  char v34;
  char v35;
  void *v36;
  char v37;
  char v38;
  void *v39;
  char v40;
  void *__p;
  char v42;
  timespec v43;

  (*(void (**)(char **__return_ptr))(**(_QWORD **)(a1 + 1728) + 40))(&v28);
  if (v30 || !(*(unsigned int (**)(_QWORD))(**(_QWORD **)(a1 + 1728) + 48))(*(_QWORD *)(a1 + 1728)))
    goto LABEL_32;
  v6 = sub_210219C18();
  v7 = atomic_load((unsigned __int8 *)&qword_254A6DDD0);
  if ((v7 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DDD0))
  {
    __cxa_atexit((void (*)(void *))sub_21021A250, &stru_254A5A410, &dword_20E81F000);
    __cxa_guard_release(&qword_254A6DDD0);
  }
  if (atomic_load(&qword_254A5A450))
  {
    LOWORD(v31[0]) = 0;
    v9 = (char *)_os_log_send_and_compose_impl();
    v10 = strlen(v9);
    v43.tv_sec = 0;
    pthread_threadid_np(0, (__uint64_t *)&v43);
    tv_sec = v43.tv_sec;
    timespec_get(&v43, 1);
    sub_210219E20(v31, 0xEEEEB0B5B2B2EEEELL, "Trace", 5uLL, (__int128 *)(v6 + 1), (__int128 *)(v6 + 5), "ICDVS: Send one time location request", 0x25uLL, v9, v10, tv_sec, &v43);
    std::mutex::lock(&stru_254A5A410);
    v12 = qword_254A5A458;
    for (i = unk_254A5A460; v12 != i; v12 += 40)
    {
      v14 = *(_QWORD *)(v12 + 32);
      if (!v14)
        sub_20E86D37C();
      (*(void (**)(uint64_t, void **))(*(_QWORD *)v14 + 48))(v14, v31);
    }
    std::mutex::unlock(&stru_254A5A410);
    if (v42 < 0)
    {
      operator delete(__p);
      if ((v40 & 0x80000000) == 0)
      {
LABEL_10:
        if (!v38)
        {
LABEL_16:
          if (v35 && v34 < 0)
            operator delete(v33);
          if (v32 < 0)
            operator delete(v31[1]);
          if (v9)
            free(v9);
          goto LABEL_23;
        }
LABEL_14:
        if (v37 < 0)
          operator delete(v36);
        goto LABEL_16;
      }
    }
    else if ((v40 & 0x80000000) == 0)
    {
      goto LABEL_10;
    }
    operator delete(v39);
    if (!v38)
      goto LABEL_16;
    goto LABEL_14;
  }
LABEL_23:
  if (os_signpost_enabled((os_log_t)*v6))
  {
    LOWORD(v31[0]) = 0;
    _os_signpost_emit_unreliably_with_name_impl();
  }
  v15 = (char *)operator new(0xA0uLL);
  *((_QWORD *)v15 + 1) = 0;
  *((_QWORD *)v15 + 2) = 0;
  *(_QWORD *)v15 = &off_24C9B3930;
  *(_OWORD *)(v15 + 24) = 0u;
  *(_OWORD *)(v15 + 40) = 0u;
  *(_OWORD *)(v15 + 56) = 0u;
  *(_OWORD *)(v15 + 72) = 0u;
  *(_OWORD *)(v15 + 88) = 0u;
  *(_OWORD *)(v15 + 104) = 0u;
  *(_OWORD *)(v15 + 120) = 0u;
  *(_OWORD *)(v15 + 136) = 0u;
  *((_QWORD *)v15 + 19) = 0;
  if (v30)
  {
    v16 = v29;
    if (v29)
    {
      p_shared_owners = (unint64_t *)&v29->__shared_owners_;
      do
        v18 = __ldaxr(p_shared_owners);
      while (__stlxr(v18 - 1, p_shared_owners));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
  }
  v28 = v15 + 24;
  v29 = (std::__shared_weak_count *)v15;
  v30 = 1;
LABEL_32:
  *(_QWORD *)a3 = *(_QWORD *)a2;
  v19 = (_BYTE *)(a3 + 8);
  if (*(char *)(a2 + 31) < 0)
  {
    sub_20E860C04(v19, *(void **)(a2 + 8), *(_QWORD *)(a2 + 16));
  }
  else
  {
    *(_OWORD *)v19 = *(_OWORD *)(a2 + 8);
    *(_QWORD *)(a3 + 24) = *(_QWORD *)(a2 + 24);
  }
  v20 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a3 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a3 + 48) = v20;
  *(_BYTE *)(a3 + 64) = 0;
  *(_BYTE *)(a3 + 80) = 0;
  if (v30)
  {
    v21 = v29;
    *(_QWORD *)(a3 + 64) = v28;
    *(_QWORD *)(a3 + 72) = v21;
    if (v21)
    {
      v22 = (unint64_t *)&v21->__shared_owners_;
      do
        v23 = __ldxr(v22);
      while (__stxr(v23 + 1, v22));
      v24 = v30;
      *(_BYTE *)(a3 + 80) = 1;
      if (v24)
      {
        v25 = v29;
        if (v29)
        {
          v26 = (unint64_t *)&v29->__shared_owners_;
          do
            v27 = __ldaxr(v26);
          while (__stlxr(v27 - 1, v26));
          if (!v27)
          {
            ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
            std::__shared_weak_count::__release_weak(v25);
          }
        }
      }
    }
    else
    {
      *(_BYTE *)(a3 + 80) = 1;
    }
  }
}

void sub_20EC457F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  void *v6;
  uint64_t v8;
  va_list va;
  uint64_t v10;
  uint64_t v11;
  va_list va1;

  va_start(va1, a6);
  va_start(va, a6);
  v8 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  sub_20E96E218((uint64_t)va1);
  if (v6)
    free(v6);
  sub_20E869AA8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20EC45858(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  sub_20EC453E0(a1 - 560, a2, a3);
}

uint64_t sub_20EC45860(uint64_t result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *a2;
  v3 = a2[1];
  if (*a2 != v3)
  {
    v4 = result;
    do
    {
      result = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v4 + 1728) + 104))(*(_QWORD *)(v4 + 1728), v2, v2 + 8);
      v2 += 12;
    }
    while (v2 != v3);
  }
  return result;
}

uint64_t sub_20EC458B4(uint64_t result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *a2;
  v3 = a2[1];
  if (*a2 != v3)
  {
    v4 = result;
    do
    {
      result = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v4 + 832) + 104))(*(_QWORD *)(v4 + 832), v2, v2 + 8);
      v2 += 12;
    }
    while (v2 != v3);
  }
  return result;
}

uint64_t sub_20EC45908(uint64_t a1, _QWORD *a2)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 1728) + 328))(*(_QWORD *)(a1 + 1728), *a2);
}

uint64_t sub_20EC4591C(uint64_t a1, _QWORD *a2)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 664) + 328))(*(_QWORD *)(a1 + 664), *a2);
}

uint64_t sub_20EC45930(uint64_t a1, unsigned __int8 *a2)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 1728) + 288))(*(_QWORD *)(a1 + 1728), *a2);
}

uint64_t sub_20EC45944(uint64_t a1, unsigned __int8 *a2)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 776) + 288))(*(_QWORD *)(a1 + 776), *a2);
}

uint64_t sub_20EC45958@<X0>(uint64_t a1@<X0>, unsigned __int8 *a2@<X1>, _QWORD *a3@<X8>)
{
  _QWORD *v6;

  v6 = operator new(0x588uLL);
  v6[1] = 0;
  v6[2] = 0;
  *v6 = &off_24C9D0DA0;
  bzero(v6 + 3, 0x570uLL);
  sub_20EC4D9DC((uint64_t)(v6 + 3));
  *a3 = v6 + 3;
  a3[1] = v6;
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD *))(**(_QWORD **)(a1 + 1728) + 272))(*(_QWORD *)(a1 + 1728), *a2, v6 + 3);
}

void sub_20EC459DC(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20E86665C(v1);
  _Unwind_Resume(a1);
}

void sub_20EC459F0(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t sub_20EC45A08@<X0>(uint64_t a1@<X0>, unsigned __int8 *a2@<X1>, _QWORD *a3@<X8>)
{
  _QWORD *v6;

  v6 = operator new(0x588uLL);
  v6[1] = 0;
  v6[2] = 0;
  *v6 = &off_24C9D0DA0;
  bzero(v6 + 3, 0x570uLL);
  sub_20EC4D9DC((uint64_t)(v6 + 3));
  *a3 = v6 + 3;
  a3[1] = v6;
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD *))(**(_QWORD **)(a1 + 1112) + 272))(*(_QWORD *)(a1 + 1112), *a2, v6 + 3);
}

void sub_20EC45A94(_Unwind_Exception *exception_object)
{
  std::__shared_weak_count *v1;
  unint64_t *v2;
  unint64_t v4;

  do
    v4 = __ldaxr(v2);
  while (__stlxr(v4 - 1, v2));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

double sub_20EC45AE4@<D0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  char *v3;
  double result;
  __int128 v5;
  uint64_t v6;

  (*(void (**)(__int128 *__return_ptr))(**(_QWORD **)(a1 + 1728) + 192))(&v5);
  v3 = (char *)operator new(0x30uLL);
  *((_QWORD *)v3 + 1) = 0;
  *((_QWORD *)v3 + 2) = 0;
  *(_QWORD *)v3 = &off_24C9D0E40;
  result = *(double *)&v5;
  *(_OWORD *)(v3 + 24) = v5;
  *((_QWORD *)v3 + 5) = v6;
  *a2 = v3 + 24;
  a2[1] = v3;
  return result;
}

void sub_20EC45B4C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

double sub_20EC45B68@<D0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  char *v3;
  double result;
  __int128 v5;
  uint64_t v6;

  (*(void (**)(__int128 *__return_ptr))(**(_QWORD **)(a1 + 944) + 192))(&v5);
  v3 = (char *)operator new(0x30uLL);
  *((_QWORD *)v3 + 1) = 0;
  *((_QWORD *)v3 + 2) = 0;
  *(_QWORD *)v3 = &off_24C9D0E40;
  result = *(double *)&v5;
  *(_OWORD *)(v3 + 24) = v5;
  *((_QWORD *)v3 + 5) = v6;
  *a2 = v3 + 24;
  a2[1] = v3;
  return result;
}

void sub_20EC45BD0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20EC45BEC(uint64_t a1, unsigned __int8 *a2)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 1728) + 176))(*(_QWORD *)(a1 + 1728), *a2);
}

uint64_t sub_20EC45C00(uint64_t a1, unsigned __int8 *a2)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 384) + 176))(*(_QWORD *)(a1 + 384), *a2);
}

uint64_t sub_20EC45C14(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 1728) + 152))(*(_QWORD *)(a1 + 1728));
}

uint64_t sub_20EC45C24(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 328) + 152))(*(_QWORD *)(a1 + 328));
}

uint64_t sub_20EC45C34(uint64_t a1)
{
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 1728) + 256))(*(_QWORD *)(a1 + 1728));
  return 1;
}

uint64_t sub_20EC45C58(uint64_t a1)
{
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 272) + 256))(*(_QWORD *)(a1 + 272));
  return 1;
}

uint64_t sub_20EC45C7C(uint64_t a1, unsigned __int8 *a2)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 1728) + 208))(*(_QWORD *)(a1 + 1728), *a2);
}

uint64_t sub_20EC45C90(uint64_t a1, unsigned __int8 *a2)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 216) + 208))(*(_QWORD *)(a1 + 216), *a2);
}

uint64_t sub_20EC45CA4(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 1728) + 216))(*(_QWORD *)(a1 + 1728));
}

uint64_t sub_20EC45CB4(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 104) + 216))(*(_QWORD *)(a1 + 104));
}

uint64_t sub_20EC45CC4(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 1728) + 240))(*(_QWORD *)(a1 + 1728));
}

uint64_t sub_20EC45CD4(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 160) + 240))(*(_QWORD *)(a1 + 160));
}

_QWORD **sub_20EC45CE4@<X0>(_QWORD **result@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  _QWORD **v4;
  int v6;
  uint64_t (*v7)(void);
  __int128 *v8;
  unint64_t v9;
  unint64_t *v10;
  unint64_t *v11;
  char v13;
  int *v14;
  int v15;
  int v16;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;

  v4 = result;
  v6 = *(_DWORD *)(*a2 + 992);
  if (v6 != 1)
  {
    if (v6 == 5)
    {
LABEL_24:
      *(_BYTE *)a3 = 0;
      *(_BYTE *)(a3 + 368) = 0;
      return result;
    }
    v7 = *(uint64_t (**)(void))(*result[216] + 168);
LABEL_23:
    result = (_QWORD **)v7();
    goto LABEL_24;
  }
  result = (_QWORD **)(*(uint64_t (**)(_QWORD *))(*result[216] + 280))(result[216]);
  v8 = (__int128 *)*a2;
  if (*((_DWORD *)v8 + 248) != 1)
    sub_20E877AB8();
  v9 = *((_QWORD *)v8 + 6);
  v10 = result[2];
  v11 = result[3];
  if (v10 != v11)
  {
    while (*v10 > v9 || v10[1] < v9)
    {
      v10 += 2;
      if (v10 == v11)
        goto LABEL_11;
    }
    goto LABEL_24;
  }
LABEL_11:
  if (!*((_BYTE *)v4 + 1744))
    goto LABEL_22;
  v13 = *((_BYTE *)v8 + 47);
  if ((v13 & 0x80000000) == 0)
  {
    v14 = (int *)v8 + 6;
    if (*((unsigned __int8 *)v8 + 47) < 7uLL)
      goto LABEL_20;
    goto LABEL_16;
  }
  v14 = (int *)*((_QWORD *)v8 + 3);
  if (*((uint64_t *)v8 + 4) >= 7)
  {
LABEL_16:
    v15 = *v14;
    v16 = *(int *)((char *)v14 + 3);
    if (v15 != 1734963823 || v16 != 1601071463)
      goto LABEL_20;
LABEL_22:
    v7 = *(uint64_t (**)(void))(*v4[216] + 168);
    goto LABEL_23;
  }
LABEL_20:
  v18 = *v8;
  *(_QWORD *)(a3 + 16) = *((_QWORD *)v8 + 2);
  *(_OWORD *)a3 = v18;
  if (v13 < 0)
  {
    result = (_QWORD **)sub_20E860C04((_BYTE *)(a3 + 24), *((void **)v8 + 3), *((_QWORD *)v8 + 4));
    v9 = *((_QWORD *)v8 + 6);
  }
  else
  {
    v19 = *(__int128 *)((char *)v8 + 24);
    *(_QWORD *)(a3 + 40) = *((_QWORD *)v8 + 5);
    *(_OWORD *)(a3 + 24) = v19;
  }
  *(_QWORD *)(a3 + 48) = v9;
  v20 = *(__int128 *)((char *)v8 + 56);
  v21 = *(__int128 *)((char *)v8 + 72);
  v22 = *(__int128 *)((char *)v8 + 88);
  *(_OWORD *)(a3 + 104) = *(__int128 *)((char *)v8 + 104);
  *(_OWORD *)(a3 + 88) = v22;
  *(_OWORD *)(a3 + 72) = v21;
  *(_OWORD *)(a3 + 56) = v20;
  v23 = *(__int128 *)((char *)v8 + 120);
  v24 = *(__int128 *)((char *)v8 + 136);
  v25 = *(__int128 *)((char *)v8 + 152);
  *(_OWORD *)(a3 + 168) = *(__int128 *)((char *)v8 + 168);
  *(_OWORD *)(a3 + 152) = v25;
  *(_OWORD *)(a3 + 136) = v24;
  *(_OWORD *)(a3 + 120) = v23;
  v26 = *(__int128 *)((char *)v8 + 264);
  v27 = *(__int128 *)((char *)v8 + 280);
  v28 = *(__int128 *)((char *)v8 + 296);
  *(_OWORD *)(a3 + 248) = *(__int128 *)((char *)v8 + 248);
  *(_OWORD *)(a3 + 280) = v27;
  *(_OWORD *)(a3 + 296) = v28;
  *(_OWORD *)(a3 + 264) = v26;
  v29 = *(__int128 *)((char *)v8 + 184);
  v30 = *(__int128 *)((char *)v8 + 200);
  v31 = *(__int128 *)((char *)v8 + 216);
  *(_OWORD *)(a3 + 232) = *(__int128 *)((char *)v8 + 232);
  *(_OWORD *)(a3 + 216) = v31;
  *(_OWORD *)(a3 + 200) = v30;
  *(_OWORD *)(a3 + 184) = v29;
  v32 = *(__int128 *)((char *)v8 + 312);
  *(_QWORD *)(a3 + 328) = *((_QWORD *)v8 + 41);
  *(_OWORD *)(a3 + 312) = v32;
  *(_BYTE *)(a3 + 336) = 0;
  *(_BYTE *)(a3 + 360) = 0;
  if (*((_BYTE *)v8 + 360))
  {
    if (*((char *)v8 + 359) < 0)
    {
      result = (_QWORD **)sub_20E860C04((_BYTE *)(a3 + 336), *((void **)v8 + 42), *((_QWORD *)v8 + 43));
    }
    else
    {
      v33 = v8[21];
      *(_QWORD *)(a3 + 352) = *((_QWORD *)v8 + 44);
      *(_OWORD *)(a3 + 336) = v33;
    }
    *(_BYTE *)(a3 + 360) = 1;
    *(_BYTE *)(a3 + 368) = 1;
  }
  else
  {
    *(_BYTE *)(a3 + 368) = 1;
  }
  return result;
}

void sub_20EC45F50(_Unwind_Exception *exception_object)
{
  char *v1;
  void **v2;
  void **v3;

  if (v1[360] && v1[359] < 0)
    operator delete(*v3);
  if (v1[47] < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

_QWORD **sub_20EC45F84@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  return sub_20EC45CE4((_QWORD **)(a1 - 672), a2, a3);
}

uint64_t sub_20EC45F8C(uint64_t result, __int128 **a2)
{
  __int128 *v2;
  __int128 *v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE v6[992];
  int v7;
  char v8;

  v2 = *a2;
  v3 = a2[1];
  if (*a2 != v3)
  {
    v4 = result;
    do
    {
      v5 = *(_QWORD *)(v4 + 1728);
      sub_20EC4C004((uint64_t)v6, v2);
      v7 = 1;
      result = (*(uint64_t (**)(uint64_t, _BYTE *))(*(_QWORD *)v5 + 168))(v5, v6);
      if (v7 != -1)
        result = ((uint64_t (*)(char *, _BYTE *))off_24C9D08F8[v7])(&v8, v6);
      v2 += 23;
    }
    while (v2 != v3);
  }
  return result;
}

void sub_20EC4603C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20EC46050((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20EC46050(uint64_t a1)
{
  uint64_t v2;
  char v4;

  v2 = *(unsigned int *)(a1 + 992);
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, uint64_t))off_24C9D08F8[v2])(&v4, a1);
  *(_DWORD *)(a1 + 992) = -1;
  return a1;
}

uint64_t sub_20EC460A8(uint64_t result, __int128 **a2)
{
  __int128 *v2;
  __int128 *v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE v6[992];
  int v7;
  char v8;

  v2 = *a2;
  v3 = a2[1];
  if (*a2 != v3)
  {
    v4 = result;
    do
    {
      v5 = *(_QWORD *)(v4 + 440);
      sub_20EC4C004((uint64_t)v6, v2);
      v7 = 1;
      result = (*(uint64_t (**)(uint64_t, _BYTE *))(*(_QWORD *)v5 + 168))(v5, v6);
      if (v7 != -1)
        result = ((uint64_t (*)(char *, _BYTE *))off_24C9D08F8[v7])(&v8, v6);
      v2 += 23;
    }
    while (v2 != v3);
  }
  return result;
}

void sub_20EC46158(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  v12 = LODWORD(STACK[0x3E0]);
  if ((_DWORD)v12 != -1)
    (*(void (**)(uint64_t, uint64_t *))(v9 + 8 * v12))(v10 - 65, &a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20EC46184(uint64_t a1)
{
  return *(_QWORD *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 1728) + 280))(*(_QWORD *)(a1 + 1728));
}

uint64_t sub_20EC461A8(uint64_t a1)
{
  return *(_QWORD *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 888) + 280))(*(_QWORD *)(a1 + 888));
}

uint64_t sub_20EC461CC@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t result;

  v3 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 1728) + 296))(*(_QWORD *)(a1 + 1728));
  v4 = operator new(0x1C8uLL);
  v4[1] = 0;
  v4[2] = 0;
  *v4 = &off_24C9B6A40;
  result = sub_20F4462AC((uint64_t)(v4 + 3), v3);
  *a2 = result;
  a2[1] = (uint64_t)v4;
  return result;
}

void sub_20EC4622C(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t sub_20EC46244@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t result;

  v3 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 720) + 296))(*(_QWORD *)(a1 + 720));
  v4 = operator new(0x1C8uLL);
  v4[1] = 0;
  v4[2] = 0;
  *v4 = &off_24C9B6A40;
  result = sub_20F4462AC((uint64_t)(v4 + 3), v3);
  *a2 = result;
  a2[1] = (uint64_t)v4;
  return result;
}

void sub_20EC462A4(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t sub_20EC462BC(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *a1 = &off_24C9CF620;
  a1[7] = &unk_24C9CF730;
  a1[14] = &unk_24C9CF758;
  a1[21] = &unk_24C9CF780;
  a1[28] = &unk_24C9CF7A8;
  a1[35] = &unk_24C9CF7D0;
  a1[42] = &unk_24C9CF7F8;
  a1[49] = &unk_24C9CF820;
  a1[56] = &unk_24C9CF848;
  a1[63] = &unk_24C9CF870;
  a1[70] = &unk_24C9CF898;
  a1[77] = &unk_24C9CF8C0;
  a1[84] = &unk_24C9CF8E8;
  a1[91] = &unk_24C9CF910;
  a1[98] = &unk_24C9CF938;
  a1[105] = &unk_24C9CF960;
  a1[112] = &unk_24C9CF988;
  a1[119] = &unk_24C9CF9B0;
  a1[126] = &unk_24C9CF9D8;
  a1[133] = &unk_24C9CFA00;
  a1[140] = &unk_24C9CFA28;
  a1[147] = &unk_24C9CFA50;
  a1[154] = &unk_24C9CFA78;
  a1[161] = &unk_24C9CFAA0;
  a1[168] = &unk_24C9CFAC8;
  a1[175] = &unk_24C9CFAF0;
  a1[182] = &unk_24C9CFB18;
  a1[189] = &unk_24C9CFB40;
  a1[196] = &unk_24C9CFB68;
  a1[203] = &unk_24C9CFB90;
  v2 = (std::__shared_weak_count *)a1[217];
  if (!v2)
    return sub_20EC42B5C((uint64_t)a1);
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
    return sub_20EC42B5C((uint64_t)a1);
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return sub_20EC42B5C((uint64_t)a1);
}

void sub_20EC46418(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *a1 = &off_24C9CF620;
  a1[7] = &unk_24C9CF730;
  a1[14] = &unk_24C9CF758;
  a1[21] = &unk_24C9CF780;
  a1[28] = &unk_24C9CF7A8;
  a1[35] = &unk_24C9CF7D0;
  a1[42] = &unk_24C9CF7F8;
  a1[49] = &unk_24C9CF820;
  a1[56] = &unk_24C9CF848;
  a1[63] = &unk_24C9CF870;
  a1[70] = &unk_24C9CF898;
  a1[77] = &unk_24C9CF8C0;
  a1[84] = &unk_24C9CF8E8;
  a1[91] = &unk_24C9CF910;
  a1[98] = &unk_24C9CF938;
  a1[105] = &unk_24C9CF960;
  a1[112] = &unk_24C9CF988;
  a1[119] = &unk_24C9CF9B0;
  a1[126] = &unk_24C9CF9D8;
  a1[133] = &unk_24C9CFA00;
  a1[140] = &unk_24C9CFA28;
  a1[147] = &unk_24C9CFA50;
  a1[154] = &unk_24C9CFA78;
  a1[161] = &unk_24C9CFAA0;
  a1[168] = &unk_24C9CFAC8;
  a1[175] = &unk_24C9CFAF0;
  a1[182] = &unk_24C9CFB18;
  a1[189] = &unk_24C9CFB40;
  a1[196] = &unk_24C9CFB68;
  a1[203] = &unk_24C9CFB90;
  v2 = (std::__shared_weak_count *)a1[217];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  sub_20EC42B5C((uint64_t)a1);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20EC46578(_QWORD *a1)
{
  std::__shared_weak_count *v1;
  uint64_t v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *a1 = &unk_24C9CF730;
  a1[7] = &unk_24C9CF758;
  a1[14] = &unk_24C9CF780;
  a1[21] = &unk_24C9CF7A8;
  a1[28] = &unk_24C9CF7D0;
  a1[35] = &unk_24C9CF7F8;
  a1[42] = &unk_24C9CF820;
  a1[49] = &unk_24C9CF848;
  a1[56] = &unk_24C9CF870;
  a1[63] = &unk_24C9CF898;
  a1[70] = &unk_24C9CF8C0;
  a1[77] = &unk_24C9CF8E8;
  a1[84] = &unk_24C9CF910;
  a1[91] = &unk_24C9CF938;
  a1[98] = &unk_24C9CF960;
  a1[105] = &unk_24C9CF988;
  a1[112] = &unk_24C9CF9B0;
  a1[119] = &unk_24C9CF9D8;
  a1[126] = &unk_24C9CFA00;
  a1[133] = &unk_24C9CFA28;
  a1[140] = &unk_24C9CFA50;
  a1[147] = &unk_24C9CFA78;
  a1[154] = &unk_24C9CFAA0;
  a1[161] = &unk_24C9CFAC8;
  a1[168] = &unk_24C9CFAF0;
  a1[175] = &unk_24C9CFB18;
  a1[182] = &unk_24C9CFB40;
  a1[189] = &unk_24C9CFB68;
  a1[196] = &unk_24C9CFB90;
  v1 = (std::__shared_weak_count *)a1[210];
  *(a1 - 7) = &off_24C9CF620;
  v2 = (uint64_t)(a1 - 7);
  if (!v1)
    return sub_20EC42B5C((uint64_t)(a1 - 7));
  p_shared_owners = (unint64_t *)&v1->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
    return sub_20EC42B5C((uint64_t)(a1 - 7));
  ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
  std::__shared_weak_count::__release_weak(v1);
  return sub_20EC42B5C(v2);
}

void sub_20EC466D4(_QWORD *a1)
{
  std::__shared_weak_count *v1;
  uint64_t v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *a1 = &unk_24C9CF730;
  a1[7] = &unk_24C9CF758;
  a1[14] = &unk_24C9CF780;
  a1[21] = &unk_24C9CF7A8;
  a1[28] = &unk_24C9CF7D0;
  a1[35] = &unk_24C9CF7F8;
  a1[42] = &unk_24C9CF820;
  a1[49] = &unk_24C9CF848;
  a1[56] = &unk_24C9CF870;
  a1[63] = &unk_24C9CF898;
  a1[70] = &unk_24C9CF8C0;
  a1[77] = &unk_24C9CF8E8;
  a1[84] = &unk_24C9CF910;
  a1[91] = &unk_24C9CF938;
  a1[98] = &unk_24C9CF960;
  a1[105] = &unk_24C9CF988;
  a1[112] = &unk_24C9CF9B0;
  a1[119] = &unk_24C9CF9D8;
  a1[126] = &unk_24C9CFA00;
  a1[133] = &unk_24C9CFA28;
  a1[140] = &unk_24C9CFA50;
  a1[147] = &unk_24C9CFA78;
  a1[154] = &unk_24C9CFAA0;
  a1[161] = &unk_24C9CFAC8;
  a1[168] = &unk_24C9CFAF0;
  a1[175] = &unk_24C9CFB18;
  a1[182] = &unk_24C9CFB40;
  a1[189] = &unk_24C9CFB68;
  a1[196] = &unk_24C9CFB90;
  v1 = (std::__shared_weak_count *)a1[210];
  *(a1 - 7) = &off_24C9CF620;
  v2 = (uint64_t)(a1 - 7);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  sub_20EC42B5C(v2);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20EC46834(_QWORD *a1)
{
  std::__shared_weak_count *v1;
  uint64_t v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *(a1 - 7) = &unk_24C9CF730;
  *a1 = &unk_24C9CF758;
  a1[7] = &unk_24C9CF780;
  a1[14] = &unk_24C9CF7A8;
  a1[21] = &unk_24C9CF7D0;
  a1[28] = &unk_24C9CF7F8;
  a1[35] = &unk_24C9CF820;
  a1[42] = &unk_24C9CF848;
  a1[49] = &unk_24C9CF870;
  a1[56] = &unk_24C9CF898;
  a1[63] = &unk_24C9CF8C0;
  a1[70] = &unk_24C9CF8E8;
  a1[77] = &unk_24C9CF910;
  a1[84] = &unk_24C9CF938;
  a1[91] = &unk_24C9CF960;
  a1[98] = &unk_24C9CF988;
  a1[105] = &unk_24C9CF9B0;
  a1[112] = &unk_24C9CF9D8;
  a1[119] = &unk_24C9CFA00;
  a1[126] = &unk_24C9CFA28;
  a1[133] = &unk_24C9CFA50;
  a1[140] = &unk_24C9CFA78;
  a1[147] = &unk_24C9CFAA0;
  a1[154] = &unk_24C9CFAC8;
  a1[161] = &unk_24C9CFAF0;
  a1[168] = &unk_24C9CFB18;
  a1[175] = &unk_24C9CFB40;
  a1[182] = &unk_24C9CFB68;
  a1[189] = &unk_24C9CFB90;
  v1 = (std::__shared_weak_count *)a1[203];
  *(a1 - 14) = &off_24C9CF620;
  v2 = (uint64_t)(a1 - 14);
  if (!v1)
    return sub_20EC42B5C((uint64_t)(a1 - 14));
  p_shared_owners = (unint64_t *)&v1->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
    return sub_20EC42B5C((uint64_t)(a1 - 14));
  ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
  std::__shared_weak_count::__release_weak(v1);
  return sub_20EC42B5C(v2);
}

void sub_20EC46990(_QWORD *a1)
{
  std::__shared_weak_count *v1;
  uint64_t v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *(a1 - 7) = &unk_24C9CF730;
  *a1 = &unk_24C9CF758;
  a1[7] = &unk_24C9CF780;
  a1[14] = &unk_24C9CF7A8;
  a1[21] = &unk_24C9CF7D0;
  a1[28] = &unk_24C9CF7F8;
  a1[35] = &unk_24C9CF820;
  a1[42] = &unk_24C9CF848;
  a1[49] = &unk_24C9CF870;
  a1[56] = &unk_24C9CF898;
  a1[63] = &unk_24C9CF8C0;
  a1[70] = &unk_24C9CF8E8;
  a1[77] = &unk_24C9CF910;
  a1[84] = &unk_24C9CF938;
  a1[91] = &unk_24C9CF960;
  a1[98] = &unk_24C9CF988;
  a1[105] = &unk_24C9CF9B0;
  a1[112] = &unk_24C9CF9D8;
  a1[119] = &unk_24C9CFA00;
  a1[126] = &unk_24C9CFA28;
  a1[133] = &unk_24C9CFA50;
  a1[140] = &unk_24C9CFA78;
  a1[147] = &unk_24C9CFAA0;
  a1[154] = &unk_24C9CFAC8;
  a1[161] = &unk_24C9CFAF0;
  a1[168] = &unk_24C9CFB18;
  a1[175] = &unk_24C9CFB40;
  a1[182] = &unk_24C9CFB68;
  a1[189] = &unk_24C9CFB90;
  v1 = (std::__shared_weak_count *)a1[203];
  *(a1 - 14) = &off_24C9CF620;
  v2 = (uint64_t)(a1 - 14);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  sub_20EC42B5C(v2);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20EC46AF0(_QWORD *a1)
{
  std::__shared_weak_count *v1;
  uint64_t v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *(a1 - 14) = &unk_24C9CF730;
  *(a1 - 7) = &unk_24C9CF758;
  *a1 = &unk_24C9CF780;
  a1[7] = &unk_24C9CF7A8;
  a1[14] = &unk_24C9CF7D0;
  a1[21] = &unk_24C9CF7F8;
  a1[28] = &unk_24C9CF820;
  a1[35] = &unk_24C9CF848;
  a1[42] = &unk_24C9CF870;
  a1[49] = &unk_24C9CF898;
  a1[56] = &unk_24C9CF8C0;
  a1[63] = &unk_24C9CF8E8;
  a1[70] = &unk_24C9CF910;
  a1[77] = &unk_24C9CF938;
  a1[84] = &unk_24C9CF960;
  a1[91] = &unk_24C9CF988;
  a1[98] = &unk_24C9CF9B0;
  a1[105] = &unk_24C9CF9D8;
  a1[112] = &unk_24C9CFA00;
  a1[119] = &unk_24C9CFA28;
  a1[126] = &unk_24C9CFA50;
  a1[133] = &unk_24C9CFA78;
  a1[140] = &unk_24C9CFAA0;
  a1[147] = &unk_24C9CFAC8;
  a1[154] = &unk_24C9CFAF0;
  a1[161] = &unk_24C9CFB18;
  a1[168] = &unk_24C9CFB40;
  a1[175] = &unk_24C9CFB68;
  a1[182] = &unk_24C9CFB90;
  v1 = (std::__shared_weak_count *)a1[196];
  *(a1 - 21) = &off_24C9CF620;
  v2 = (uint64_t)(a1 - 21);
  if (!v1)
    return sub_20EC42B5C((uint64_t)(a1 - 21));
  p_shared_owners = (unint64_t *)&v1->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
    return sub_20EC42B5C((uint64_t)(a1 - 21));
  ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
  std::__shared_weak_count::__release_weak(v1);
  return sub_20EC42B5C(v2);
}

void sub_20EC46C4C(_QWORD *a1)
{
  std::__shared_weak_count *v1;
  uint64_t v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *(a1 - 14) = &unk_24C9CF730;
  *(a1 - 7) = &unk_24C9CF758;
  *a1 = &unk_24C9CF780;
  a1[7] = &unk_24C9CF7A8;
  a1[14] = &unk_24C9CF7D0;
  a1[21] = &unk_24C9CF7F8;
  a1[28] = &unk_24C9CF820;
  a1[35] = &unk_24C9CF848;
  a1[42] = &unk_24C9CF870;
  a1[49] = &unk_24C9CF898;
  a1[56] = &unk_24C9CF8C0;
  a1[63] = &unk_24C9CF8E8;
  a1[70] = &unk_24C9CF910;
  a1[77] = &unk_24C9CF938;
  a1[84] = &unk_24C9CF960;
  a1[91] = &unk_24C9CF988;
  a1[98] = &unk_24C9CF9B0;
  a1[105] = &unk_24C9CF9D8;
  a1[112] = &unk_24C9CFA00;
  a1[119] = &unk_24C9CFA28;
  a1[126] = &unk_24C9CFA50;
  a1[133] = &unk_24C9CFA78;
  a1[140] = &unk_24C9CFAA0;
  a1[147] = &unk_24C9CFAC8;
  a1[154] = &unk_24C9CFAF0;
  a1[161] = &unk_24C9CFB18;
  a1[168] = &unk_24C9CFB40;
  a1[175] = &unk_24C9CFB68;
  a1[182] = &unk_24C9CFB90;
  v1 = (std::__shared_weak_count *)a1[196];
  *(a1 - 21) = &off_24C9CF620;
  v2 = (uint64_t)(a1 - 21);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  sub_20EC42B5C(v2);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20EC46DAC(_QWORD *a1)
{
  std::__shared_weak_count *v1;
  uint64_t v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *(a1 - 21) = &unk_24C9CF730;
  *(a1 - 14) = &unk_24C9CF758;
  *(a1 - 7) = &unk_24C9CF780;
  *a1 = &unk_24C9CF7A8;
  a1[7] = &unk_24C9CF7D0;
  a1[14] = &unk_24C9CF7F8;
  a1[21] = &unk_24C9CF820;
  a1[28] = &unk_24C9CF848;
  a1[35] = &unk_24C9CF870;
  a1[42] = &unk_24C9CF898;
  a1[49] = &unk_24C9CF8C0;
  a1[56] = &unk_24C9CF8E8;
  a1[63] = &unk_24C9CF910;
  a1[70] = &unk_24C9CF938;
  a1[77] = &unk_24C9CF960;
  a1[84] = &unk_24C9CF988;
  a1[91] = &unk_24C9CF9B0;
  a1[98] = &unk_24C9CF9D8;
  a1[105] = &unk_24C9CFA00;
  a1[112] = &unk_24C9CFA28;
  a1[119] = &unk_24C9CFA50;
  a1[126] = &unk_24C9CFA78;
  a1[133] = &unk_24C9CFAA0;
  a1[140] = &unk_24C9CFAC8;
  a1[147] = &unk_24C9CFAF0;
  a1[154] = &unk_24C9CFB18;
  a1[161] = &unk_24C9CFB40;
  a1[168] = &unk_24C9CFB68;
  a1[175] = &unk_24C9CFB90;
  v1 = (std::__shared_weak_count *)a1[189];
  *(a1 - 28) = &off_24C9CF620;
  v2 = (uint64_t)(a1 - 28);
  if (!v1)
    return sub_20EC42B5C((uint64_t)(a1 - 28));
  p_shared_owners = (unint64_t *)&v1->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
    return sub_20EC42B5C((uint64_t)(a1 - 28));
  ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
  std::__shared_weak_count::__release_weak(v1);
  return sub_20EC42B5C(v2);
}

void sub_20EC46F08(_QWORD *a1)
{
  std::__shared_weak_count *v1;
  uint64_t v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *(a1 - 21) = &unk_24C9CF730;
  *(a1 - 14) = &unk_24C9CF758;
  *(a1 - 7) = &unk_24C9CF780;
  *a1 = &unk_24C9CF7A8;
  a1[7] = &unk_24C9CF7D0;
  a1[14] = &unk_24C9CF7F8;
  a1[21] = &unk_24C9CF820;
  a1[28] = &unk_24C9CF848;
  a1[35] = &unk_24C9CF870;
  a1[42] = &unk_24C9CF898;
  a1[49] = &unk_24C9CF8C0;
  a1[56] = &unk_24C9CF8E8;
  a1[63] = &unk_24C9CF910;
  a1[70] = &unk_24C9CF938;
  a1[77] = &unk_24C9CF960;
  a1[84] = &unk_24C9CF988;
  a1[91] = &unk_24C9CF9B0;
  a1[98] = &unk_24C9CF9D8;
  a1[105] = &unk_24C9CFA00;
  a1[112] = &unk_24C9CFA28;
  a1[119] = &unk_24C9CFA50;
  a1[126] = &unk_24C9CFA78;
  a1[133] = &unk_24C9CFAA0;
  a1[140] = &unk_24C9CFAC8;
  a1[147] = &unk_24C9CFAF0;
  a1[154] = &unk_24C9CFB18;
  a1[161] = &unk_24C9CFB40;
  a1[168] = &unk_24C9CFB68;
  a1[175] = &unk_24C9CFB90;
  v1 = (std::__shared_weak_count *)a1[189];
  *(a1 - 28) = &off_24C9CF620;
  v2 = (uint64_t)(a1 - 28);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  sub_20EC42B5C(v2);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20EC47068(_QWORD *a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = (uint64_t)(a1 - 35);
  *(a1 - 35) = &off_24C9CF620;
  *(a1 - 28) = &unk_24C9CF730;
  *(a1 - 21) = &unk_24C9CF758;
  *(a1 - 14) = &unk_24C9CF780;
  *(a1 - 7) = &unk_24C9CF7A8;
  *a1 = &unk_24C9CF7D0;
  a1[7] = &unk_24C9CF7F8;
  a1[14] = &unk_24C9CF820;
  a1[21] = &unk_24C9CF848;
  a1[28] = &unk_24C9CF870;
  a1[35] = &unk_24C9CF898;
  a1[42] = &unk_24C9CF8C0;
  a1[49] = &unk_24C9CF8E8;
  a1[56] = &unk_24C9CF910;
  a1[63] = &unk_24C9CF938;
  a1[70] = &unk_24C9CF960;
  a1[77] = &unk_24C9CF988;
  a1[84] = &unk_24C9CF9B0;
  a1[91] = &unk_24C9CF9D8;
  a1[98] = &unk_24C9CFA00;
  a1[105] = &unk_24C9CFA28;
  a1[112] = &unk_24C9CFA50;
  a1[119] = &unk_24C9CFA78;
  a1[126] = &unk_24C9CFAA0;
  a1[133] = &unk_24C9CFAC8;
  a1[140] = &unk_24C9CFAF0;
  a1[147] = &unk_24C9CFB18;
  a1[154] = &unk_24C9CFB40;
  a1[161] = &unk_24C9CFB68;
  a1[168] = &unk_24C9CFB90;
  v2 = (std::__shared_weak_count *)a1[182];
  if (!v2)
    return sub_20EC42B5C((uint64_t)(a1 - 35));
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
    return sub_20EC42B5C((uint64_t)(a1 - 35));
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return sub_20EC42B5C(v1);
}

void sub_20EC471C4(_QWORD *a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = (uint64_t)(a1 - 35);
  *(a1 - 35) = &off_24C9CF620;
  *(a1 - 28) = &unk_24C9CF730;
  *(a1 - 21) = &unk_24C9CF758;
  *(a1 - 14) = &unk_24C9CF780;
  *(a1 - 7) = &unk_24C9CF7A8;
  *a1 = &unk_24C9CF7D0;
  a1[7] = &unk_24C9CF7F8;
  a1[14] = &unk_24C9CF820;
  a1[21] = &unk_24C9CF848;
  a1[28] = &unk_24C9CF870;
  a1[35] = &unk_24C9CF898;
  a1[42] = &unk_24C9CF8C0;
  a1[49] = &unk_24C9CF8E8;
  a1[56] = &unk_24C9CF910;
  a1[63] = &unk_24C9CF938;
  a1[70] = &unk_24C9CF960;
  a1[77] = &unk_24C9CF988;
  a1[84] = &unk_24C9CF9B0;
  a1[91] = &unk_24C9CF9D8;
  a1[98] = &unk_24C9CFA00;
  a1[105] = &unk_24C9CFA28;
  a1[112] = &unk_24C9CFA50;
  a1[119] = &unk_24C9CFA78;
  a1[126] = &unk_24C9CFAA0;
  a1[133] = &unk_24C9CFAC8;
  a1[140] = &unk_24C9CFAF0;
  a1[147] = &unk_24C9CFB18;
  a1[154] = &unk_24C9CFB40;
  a1[161] = &unk_24C9CFB68;
  a1[168] = &unk_24C9CFB90;
  v2 = (std::__shared_weak_count *)a1[182];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  sub_20EC42B5C(v1);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20EC47324(_QWORD *a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = (uint64_t)(a1 - 42);
  *(a1 - 42) = &off_24C9CF620;
  *(a1 - 35) = &unk_24C9CF730;
  *(a1 - 28) = &unk_24C9CF758;
  *(a1 - 21) = &unk_24C9CF780;
  *(a1 - 14) = &unk_24C9CF7A8;
  *(a1 - 7) = &unk_24C9CF7D0;
  *a1 = &unk_24C9CF7F8;
  a1[7] = &unk_24C9CF820;
  a1[14] = &unk_24C9CF848;
  a1[21] = &unk_24C9CF870;
  a1[28] = &unk_24C9CF898;
  a1[35] = &unk_24C9CF8C0;
  a1[42] = &unk_24C9CF8E8;
  a1[49] = &unk_24C9CF910;
  a1[56] = &unk_24C9CF938;
  a1[63] = &unk_24C9CF960;
  a1[70] = &unk_24C9CF988;
  a1[77] = &unk_24C9CF9B0;
  a1[84] = &unk_24C9CF9D8;
  a1[91] = &unk_24C9CFA00;
  a1[98] = &unk_24C9CFA28;
  a1[105] = &unk_24C9CFA50;
  a1[112] = &unk_24C9CFA78;
  a1[119] = &unk_24C9CFAA0;
  a1[126] = &unk_24C9CFAC8;
  a1[133] = &unk_24C9CFAF0;
  a1[140] = &unk_24C9CFB18;
  a1[147] = &unk_24C9CFB40;
  a1[154] = &unk_24C9CFB68;
  a1[161] = &unk_24C9CFB90;
  v2 = (std::__shared_weak_count *)a1[175];
  if (!v2)
    return sub_20EC42B5C((uint64_t)(a1 - 42));
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
    return sub_20EC42B5C((uint64_t)(a1 - 42));
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return sub_20EC42B5C(v1);
}

void sub_20EC47484(_QWORD *a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = (uint64_t)(a1 - 42);
  *(a1 - 42) = &off_24C9CF620;
  *(a1 - 35) = &unk_24C9CF730;
  *(a1 - 28) = &unk_24C9CF758;
  *(a1 - 21) = &unk_24C9CF780;
  *(a1 - 14) = &unk_24C9CF7A8;
  *(a1 - 7) = &unk_24C9CF7D0;
  *a1 = &unk_24C9CF7F8;
  a1[7] = &unk_24C9CF820;
  a1[14] = &unk_24C9CF848;
  a1[21] = &unk_24C9CF870;
  a1[28] = &unk_24C9CF898;
  a1[35] = &unk_24C9CF8C0;
  a1[42] = &unk_24C9CF8E8;
  a1[49] = &unk_24C9CF910;
  a1[56] = &unk_24C9CF938;
  a1[63] = &unk_24C9CF960;
  a1[70] = &unk_24C9CF988;
  a1[77] = &unk_24C9CF9B0;
  a1[84] = &unk_24C9CF9D8;
  a1[91] = &unk_24C9CFA00;
  a1[98] = &unk_24C9CFA28;
  a1[105] = &unk_24C9CFA50;
  a1[112] = &unk_24C9CFA78;
  a1[119] = &unk_24C9CFAA0;
  a1[126] = &unk_24C9CFAC8;
  a1[133] = &unk_24C9CFAF0;
  a1[140] = &unk_24C9CFB18;
  a1[147] = &unk_24C9CFB40;
  a1[154] = &unk_24C9CFB68;
  a1[161] = &unk_24C9CFB90;
  v2 = (std::__shared_weak_count *)a1[175];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  sub_20EC42B5C(v1);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20EC475E8(_QWORD *a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = (uint64_t)(a1 - 49);
  *(a1 - 49) = &off_24C9CF620;
  *(a1 - 42) = &unk_24C9CF730;
  *(a1 - 35) = &unk_24C9CF758;
  *(a1 - 28) = &unk_24C9CF780;
  *(a1 - 21) = &unk_24C9CF7A8;
  *(a1 - 14) = &unk_24C9CF7D0;
  *(a1 - 7) = &unk_24C9CF7F8;
  *a1 = &unk_24C9CF820;
  a1[7] = &unk_24C9CF848;
  a1[14] = &unk_24C9CF870;
  a1[21] = &unk_24C9CF898;
  a1[28] = &unk_24C9CF8C0;
  a1[35] = &unk_24C9CF8E8;
  a1[42] = &unk_24C9CF910;
  a1[49] = &unk_24C9CF938;
  a1[56] = &unk_24C9CF960;
  a1[63] = &unk_24C9CF988;
  a1[70] = &unk_24C9CF9B0;
  a1[77] = &unk_24C9CF9D8;
  a1[84] = &unk_24C9CFA00;
  a1[91] = &unk_24C9CFA28;
  a1[98] = &unk_24C9CFA50;
  a1[105] = &unk_24C9CFA78;
  a1[112] = &unk_24C9CFAA0;
  a1[119] = &unk_24C9CFAC8;
  a1[126] = &unk_24C9CFAF0;
  a1[133] = &unk_24C9CFB18;
  a1[140] = &unk_24C9CFB40;
  a1[147] = &unk_24C9CFB68;
  a1[154] = &unk_24C9CFB90;
  v2 = (std::__shared_weak_count *)a1[168];
  if (!v2)
    return sub_20EC42B5C((uint64_t)(a1 - 49));
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
    return sub_20EC42B5C((uint64_t)(a1 - 49));
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return sub_20EC42B5C(v1);
}

void sub_20EC4774C(_QWORD *a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = (uint64_t)(a1 - 49);
  *(a1 - 49) = &off_24C9CF620;
  *(a1 - 42) = &unk_24C9CF730;
  *(a1 - 35) = &unk_24C9CF758;
  *(a1 - 28) = &unk_24C9CF780;
  *(a1 - 21) = &unk_24C9CF7A8;
  *(a1 - 14) = &unk_24C9CF7D0;
  *(a1 - 7) = &unk_24C9CF7F8;
  *a1 = &unk_24C9CF820;
  a1[7] = &unk_24C9CF848;
  a1[14] = &unk_24C9CF870;
  a1[21] = &unk_24C9CF898;
  a1[28] = &unk_24C9CF8C0;
  a1[35] = &unk_24C9CF8E8;
  a1[42] = &unk_24C9CF910;
  a1[49] = &unk_24C9CF938;
  a1[56] = &unk_24C9CF960;
  a1[63] = &unk_24C9CF988;
  a1[70] = &unk_24C9CF9B0;
  a1[77] = &unk_24C9CF9D8;
  a1[84] = &unk_24C9CFA00;
  a1[91] = &unk_24C9CFA28;
  a1[98] = &unk_24C9CFA50;
  a1[105] = &unk_24C9CFA78;
  a1[112] = &unk_24C9CFAA0;
  a1[119] = &unk_24C9CFAC8;
  a1[126] = &unk_24C9CFAF0;
  a1[133] = &unk_24C9CFB18;
  a1[140] = &unk_24C9CFB40;
  a1[147] = &unk_24C9CFB68;
  a1[154] = &unk_24C9CFB90;
  v2 = (std::__shared_weak_count *)a1[168];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  sub_20EC42B5C(v1);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20EC478B4(_QWORD *a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = (uint64_t)(a1 - 56);
  *(a1 - 56) = &off_24C9CF620;
  *(a1 - 49) = &unk_24C9CF730;
  *(a1 - 42) = &unk_24C9CF758;
  *(a1 - 35) = &unk_24C9CF780;
  *(a1 - 28) = &unk_24C9CF7A8;
  *(a1 - 21) = &unk_24C9CF7D0;
  *(a1 - 14) = &unk_24C9CF7F8;
  *(a1 - 7) = &unk_24C9CF820;
  *a1 = &unk_24C9CF848;
  a1[7] = &unk_24C9CF870;
  a1[14] = &unk_24C9CF898;
  a1[21] = &unk_24C9CF8C0;
  a1[28] = &unk_24C9CF8E8;
  a1[35] = &unk_24C9CF910;
  a1[42] = &unk_24C9CF938;
  a1[49] = &unk_24C9CF960;
  a1[56] = &unk_24C9CF988;
  a1[63] = &unk_24C9CF9B0;
  a1[70] = &unk_24C9CF9D8;
  a1[77] = &unk_24C9CFA00;
  a1[84] = &unk_24C9CFA28;
  a1[91] = &unk_24C9CFA50;
  a1[98] = &unk_24C9CFA78;
  a1[105] = &unk_24C9CFAA0;
  a1[112] = &unk_24C9CFAC8;
  a1[119] = &unk_24C9CFAF0;
  a1[126] = &unk_24C9CFB18;
  a1[133] = &unk_24C9CFB40;
  a1[140] = &unk_24C9CFB68;
  a1[147] = &unk_24C9CFB90;
  v2 = (std::__shared_weak_count *)a1[161];
  if (!v2)
    return sub_20EC42B5C((uint64_t)(a1 - 56));
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
    return sub_20EC42B5C((uint64_t)(a1 - 56));
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return sub_20EC42B5C(v1);
}

void sub_20EC47A1C(_QWORD *a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = (uint64_t)(a1 - 56);
  *(a1 - 56) = &off_24C9CF620;
  *(a1 - 49) = &unk_24C9CF730;
  *(a1 - 42) = &unk_24C9CF758;
  *(a1 - 35) = &unk_24C9CF780;
  *(a1 - 28) = &unk_24C9CF7A8;
  *(a1 - 21) = &unk_24C9CF7D0;
  *(a1 - 14) = &unk_24C9CF7F8;
  *(a1 - 7) = &unk_24C9CF820;
  *a1 = &unk_24C9CF848;
  a1[7] = &unk_24C9CF870;
  a1[14] = &unk_24C9CF898;
  a1[21] = &unk_24C9CF8C0;
  a1[28] = &unk_24C9CF8E8;
  a1[35] = &unk_24C9CF910;
  a1[42] = &unk_24C9CF938;
  a1[49] = &unk_24C9CF960;
  a1[56] = &unk_24C9CF988;
  a1[63] = &unk_24C9CF9B0;
  a1[70] = &unk_24C9CF9D8;
  a1[77] = &unk_24C9CFA00;
  a1[84] = &unk_24C9CFA28;
  a1[91] = &unk_24C9CFA50;
  a1[98] = &unk_24C9CFA78;
  a1[105] = &unk_24C9CFAA0;
  a1[112] = &unk_24C9CFAC8;
  a1[119] = &unk_24C9CFAF0;
  a1[126] = &unk_24C9CFB18;
  a1[133] = &unk_24C9CFB40;
  a1[140] = &unk_24C9CFB68;
  a1[147] = &unk_24C9CFB90;
  v2 = (std::__shared_weak_count *)a1[161];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  sub_20EC42B5C(v1);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20EC47B88(_QWORD *a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = (uint64_t)(a1 - 63);
  *(a1 - 63) = &off_24C9CF620;
  *(a1 - 56) = &unk_24C9CF730;
  *(a1 - 49) = &unk_24C9CF758;
  *(a1 - 42) = &unk_24C9CF780;
  *(a1 - 35) = &unk_24C9CF7A8;
  *(a1 - 28) = &unk_24C9CF7D0;
  *(a1 - 21) = &unk_24C9CF7F8;
  *(a1 - 14) = &unk_24C9CF820;
  *(a1 - 7) = &unk_24C9CF848;
  *a1 = &unk_24C9CF870;
  a1[7] = &unk_24C9CF898;
  a1[14] = &unk_24C9CF8C0;
  a1[21] = &unk_24C9CF8E8;
  a1[28] = &unk_24C9CF910;
  a1[35] = &unk_24C9CF938;
  a1[42] = &unk_24C9CF960;
  a1[49] = &unk_24C9CF988;
  a1[56] = &unk_24C9CF9B0;
  a1[63] = &unk_24C9CF9D8;
  a1[70] = &unk_24C9CFA00;
  a1[77] = &unk_24C9CFA28;
  a1[84] = &unk_24C9CFA50;
  a1[91] = &unk_24C9CFA78;
  a1[98] = &unk_24C9CFAA0;
  a1[105] = &unk_24C9CFAC8;
  a1[112] = &unk_24C9CFAF0;
  a1[119] = &unk_24C9CFB18;
  a1[126] = &unk_24C9CFB40;
  a1[133] = &unk_24C9CFB68;
  a1[140] = &unk_24C9CFB90;
  v2 = (std::__shared_weak_count *)a1[154];
  if (!v2)
    return sub_20EC42B5C((uint64_t)(a1 - 63));
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
    return sub_20EC42B5C((uint64_t)(a1 - 63));
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return sub_20EC42B5C(v1);
}

void sub_20EC47CF4(_QWORD *a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = (uint64_t)(a1 - 63);
  *(a1 - 63) = &off_24C9CF620;
  *(a1 - 56) = &unk_24C9CF730;
  *(a1 - 49) = &unk_24C9CF758;
  *(a1 - 42) = &unk_24C9CF780;
  *(a1 - 35) = &unk_24C9CF7A8;
  *(a1 - 28) = &unk_24C9CF7D0;
  *(a1 - 21) = &unk_24C9CF7F8;
  *(a1 - 14) = &unk_24C9CF820;
  *(a1 - 7) = &unk_24C9CF848;
  *a1 = &unk_24C9CF870;
  a1[7] = &unk_24C9CF898;
  a1[14] = &unk_24C9CF8C0;
  a1[21] = &unk_24C9CF8E8;
  a1[28] = &unk_24C9CF910;
  a1[35] = &unk_24C9CF938;
  a1[42] = &unk_24C9CF960;
  a1[49] = &unk_24C9CF988;
  a1[56] = &unk_24C9CF9B0;
  a1[63] = &unk_24C9CF9D8;
  a1[70] = &unk_24C9CFA00;
  a1[77] = &unk_24C9CFA28;
  a1[84] = &unk_24C9CFA50;
  a1[91] = &unk_24C9CFA78;
  a1[98] = &unk_24C9CFAA0;
  a1[105] = &unk_24C9CFAC8;
  a1[112] = &unk_24C9CFAF0;
  a1[119] = &unk_24C9CFB18;
  a1[126] = &unk_24C9CFB40;
  a1[133] = &unk_24C9CFB68;
  a1[140] = &unk_24C9CFB90;
  v2 = (std::__shared_weak_count *)a1[154];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  sub_20EC42B5C(v1);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20EC47E64(_QWORD *a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = (uint64_t)(a1 - 70);
  *(a1 - 70) = &off_24C9CF620;
  *(a1 - 63) = &unk_24C9CF730;
  *(a1 - 56) = &unk_24C9CF758;
  *(a1 - 49) = &unk_24C9CF780;
  *(a1 - 42) = &unk_24C9CF7A8;
  *(a1 - 35) = &unk_24C9CF7D0;
  *(a1 - 28) = &unk_24C9CF7F8;
  *(a1 - 21) = &unk_24C9CF820;
  *(a1 - 14) = &unk_24C9CF848;
  *(a1 - 7) = &unk_24C9CF870;
  *a1 = &unk_24C9CF898;
  a1[7] = &unk_24C9CF8C0;
  a1[14] = &unk_24C9CF8E8;
  a1[21] = &unk_24C9CF910;
  a1[28] = &unk_24C9CF938;
  a1[35] = &unk_24C9CF960;
  a1[42] = &unk_24C9CF988;
  a1[49] = &unk_24C9CF9B0;
  a1[56] = &unk_24C9CF9D8;
  a1[63] = &unk_24C9CFA00;
  a1[70] = &unk_24C9CFA28;
  a1[77] = &unk_24C9CFA50;
  a1[84] = &unk_24C9CFA78;
  a1[91] = &unk_24C9CFAA0;
  a1[98] = &unk_24C9CFAC8;
  a1[105] = &unk_24C9CFAF0;
  a1[112] = &unk_24C9CFB18;
  a1[119] = &unk_24C9CFB40;
  a1[126] = &unk_24C9CFB68;
  a1[133] = &unk_24C9CFB90;
  v2 = (std::__shared_weak_count *)a1[147];
  if (!v2)
    return sub_20EC42B5C((uint64_t)(a1 - 70));
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
    return sub_20EC42B5C((uint64_t)(a1 - 70));
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return sub_20EC42B5C(v1);
}

void sub_20EC47FD4(_QWORD *a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = (uint64_t)(a1 - 70);
  *(a1 - 70) = &off_24C9CF620;
  *(a1 - 63) = &unk_24C9CF730;
  *(a1 - 56) = &unk_24C9CF758;
  *(a1 - 49) = &unk_24C9CF780;
  *(a1 - 42) = &unk_24C9CF7A8;
  *(a1 - 35) = &unk_24C9CF7D0;
  *(a1 - 28) = &unk_24C9CF7F8;
  *(a1 - 21) = &unk_24C9CF820;
  *(a1 - 14) = &unk_24C9CF848;
  *(a1 - 7) = &unk_24C9CF870;
  *a1 = &unk_24C9CF898;
  a1[7] = &unk_24C9CF8C0;
  a1[14] = &unk_24C9CF8E8;
  a1[21] = &unk_24C9CF910;
  a1[28] = &unk_24C9CF938;
  a1[35] = &unk_24C9CF960;
  a1[42] = &unk_24C9CF988;
  a1[49] = &unk_24C9CF9B0;
  a1[56] = &unk_24C9CF9D8;
  a1[63] = &unk_24C9CFA00;
  a1[70] = &unk_24C9CFA28;
  a1[77] = &unk_24C9CFA50;
  a1[84] = &unk_24C9CFA78;
  a1[91] = &unk_24C9CFAA0;
  a1[98] = &unk_24C9CFAC8;
  a1[105] = &unk_24C9CFAF0;
  a1[112] = &unk_24C9CFB18;
  a1[119] = &unk_24C9CFB40;
  a1[126] = &unk_24C9CFB68;
  a1[133] = &unk_24C9CFB90;
  v2 = (std::__shared_weak_count *)a1[147];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  sub_20EC42B5C(v1);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20EC48148(_QWORD *a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = (uint64_t)(a1 - 77);
  *(a1 - 77) = &off_24C9CF620;
  *(a1 - 70) = &unk_24C9CF730;
  *(a1 - 63) = &unk_24C9CF758;
  *(a1 - 56) = &unk_24C9CF780;
  *(a1 - 49) = &unk_24C9CF7A8;
  *(a1 - 42) = &unk_24C9CF7D0;
  *(a1 - 35) = &unk_24C9CF7F8;
  *(a1 - 28) = &unk_24C9CF820;
  *(a1 - 21) = &unk_24C9CF848;
  *(a1 - 14) = &unk_24C9CF870;
  *(a1 - 7) = &unk_24C9CF898;
  *a1 = &unk_24C9CF8C0;
  a1[7] = &unk_24C9CF8E8;
  a1[14] = &unk_24C9CF910;
  a1[21] = &unk_24C9CF938;
  a1[28] = &unk_24C9CF960;
  a1[35] = &unk_24C9CF988;
  a1[42] = &unk_24C9CF9B0;
  a1[49] = &unk_24C9CF9D8;
  a1[56] = &unk_24C9CFA00;
  a1[63] = &unk_24C9CFA28;
  a1[70] = &unk_24C9CFA50;
  a1[77] = &unk_24C9CFA78;
  a1[84] = &unk_24C9CFAA0;
  a1[91] = &unk_24C9CFAC8;
  a1[98] = &unk_24C9CFAF0;
  a1[105] = &unk_24C9CFB18;
  a1[112] = &unk_24C9CFB40;
  a1[119] = &unk_24C9CFB68;
  a1[126] = &unk_24C9CFB90;
  v2 = (std::__shared_weak_count *)a1[140];
  if (!v2)
    return sub_20EC42B5C((uint64_t)(a1 - 77));
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
    return sub_20EC42B5C((uint64_t)(a1 - 77));
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return sub_20EC42B5C(v1);
}

void sub_20EC482BC(_QWORD *a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = (uint64_t)(a1 - 77);
  *(a1 - 77) = &off_24C9CF620;
  *(a1 - 70) = &unk_24C9CF730;
  *(a1 - 63) = &unk_24C9CF758;
  *(a1 - 56) = &unk_24C9CF780;
  *(a1 - 49) = &unk_24C9CF7A8;
  *(a1 - 42) = &unk_24C9CF7D0;
  *(a1 - 35) = &unk_24C9CF7F8;
  *(a1 - 28) = &unk_24C9CF820;
  *(a1 - 21) = &unk_24C9CF848;
  *(a1 - 14) = &unk_24C9CF870;
  *(a1 - 7) = &unk_24C9CF898;
  *a1 = &unk_24C9CF8C0;
  a1[7] = &unk_24C9CF8E8;
  a1[14] = &unk_24C9CF910;
  a1[21] = &unk_24C9CF938;
  a1[28] = &unk_24C9CF960;
  a1[35] = &unk_24C9CF988;
  a1[42] = &unk_24C9CF9B0;
  a1[49] = &unk_24C9CF9D8;
  a1[56] = &unk_24C9CFA00;
  a1[63] = &unk_24C9CFA28;
  a1[70] = &unk_24C9CFA50;
  a1[77] = &unk_24C9CFA78;
  a1[84] = &unk_24C9CFAA0;
  a1[91] = &unk_24C9CFAC8;
  a1[98] = &unk_24C9CFAF0;
  a1[105] = &unk_24C9CFB18;
  a1[112] = &unk_24C9CFB40;
  a1[119] = &unk_24C9CFB68;
  a1[126] = &unk_24C9CFB90;
  v2 = (std::__shared_weak_count *)a1[140];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  sub_20EC42B5C(v1);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20EC48434(_QWORD *a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = (uint64_t)(a1 - 84);
  *(a1 - 84) = &off_24C9CF620;
  *(a1 - 77) = &unk_24C9CF730;
  *(a1 - 70) = &unk_24C9CF758;
  *(a1 - 63) = &unk_24C9CF780;
  *(a1 - 56) = &unk_24C9CF7A8;
  *(a1 - 49) = &unk_24C9CF7D0;
  *(a1 - 42) = &unk_24C9CF7F8;
  *(a1 - 35) = &unk_24C9CF820;
  *(a1 - 28) = &unk_24C9CF848;
  *(a1 - 21) = &unk_24C9CF870;
  *(a1 - 14) = &unk_24C9CF898;
  *(a1 - 7) = &unk_24C9CF8C0;
  *a1 = &unk_24C9CF8E8;
  a1[7] = &unk_24C9CF910;
  a1[14] = &unk_24C9CF938;
  a1[21] = &unk_24C9CF960;
  a1[28] = &unk_24C9CF988;
  a1[35] = &unk_24C9CF9B0;
  a1[42] = &unk_24C9CF9D8;
  a1[49] = &unk_24C9CFA00;
  a1[56] = &unk_24C9CFA28;
  a1[63] = &unk_24C9CFA50;
  a1[70] = &unk_24C9CFA78;
  a1[77] = &unk_24C9CFAA0;
  a1[84] = &unk_24C9CFAC8;
  a1[91] = &unk_24C9CFAF0;
  a1[98] = &unk_24C9CFB18;
  a1[105] = &unk_24C9CFB40;
  a1[112] = &unk_24C9CFB68;
  a1[119] = &unk_24C9CFB90;
  v2 = (std::__shared_weak_count *)a1[133];
  if (!v2)
    return sub_20EC42B5C((uint64_t)(a1 - 84));
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
    return sub_20EC42B5C((uint64_t)(a1 - 84));
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return sub_20EC42B5C(v1);
}

void sub_20EC485AC(_QWORD *a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = (uint64_t)(a1 - 84);
  *(a1 - 84) = &off_24C9CF620;
  *(a1 - 77) = &unk_24C9CF730;
  *(a1 - 70) = &unk_24C9CF758;
  *(a1 - 63) = &unk_24C9CF780;
  *(a1 - 56) = &unk_24C9CF7A8;
  *(a1 - 49) = &unk_24C9CF7D0;
  *(a1 - 42) = &unk_24C9CF7F8;
  *(a1 - 35) = &unk_24C9CF820;
  *(a1 - 28) = &unk_24C9CF848;
  *(a1 - 21) = &unk_24C9CF870;
  *(a1 - 14) = &unk_24C9CF898;
  *(a1 - 7) = &unk_24C9CF8C0;
  *a1 = &unk_24C9CF8E8;
  a1[7] = &unk_24C9CF910;
  a1[14] = &unk_24C9CF938;
  a1[21] = &unk_24C9CF960;
  a1[28] = &unk_24C9CF988;
  a1[35] = &unk_24C9CF9B0;
  a1[42] = &unk_24C9CF9D8;
  a1[49] = &unk_24C9CFA00;
  a1[56] = &unk_24C9CFA28;
  a1[63] = &unk_24C9CFA50;
  a1[70] = &unk_24C9CFA78;
  a1[77] = &unk_24C9CFAA0;
  a1[84] = &unk_24C9CFAC8;
  a1[91] = &unk_24C9CFAF0;
  a1[98] = &unk_24C9CFB18;
  a1[105] = &unk_24C9CFB40;
  a1[112] = &unk_24C9CFB68;
  a1[119] = &unk_24C9CFB90;
  v2 = (std::__shared_weak_count *)a1[133];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  sub_20EC42B5C(v1);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20EC48728(_QWORD *a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = (uint64_t)(a1 - 91);
  *(a1 - 91) = &off_24C9CF620;
  *(a1 - 84) = &unk_24C9CF730;
  *(a1 - 77) = &unk_24C9CF758;
  *(a1 - 70) = &unk_24C9CF780;
  *(a1 - 63) = &unk_24C9CF7A8;
  *(a1 - 56) = &unk_24C9CF7D0;
  *(a1 - 49) = &unk_24C9CF7F8;
  *(a1 - 42) = &unk_24C9CF820;
  *(a1 - 35) = &unk_24C9CF848;
  *(a1 - 28) = &unk_24C9CF870;
  *(a1 - 21) = &unk_24C9CF898;
  *(a1 - 14) = &unk_24C9CF8C0;
  *(a1 - 7) = &unk_24C9CF8E8;
  *a1 = &unk_24C9CF910;
  a1[7] = &unk_24C9CF938;
  a1[14] = &unk_24C9CF960;
  a1[21] = &unk_24C9CF988;
  a1[28] = &unk_24C9CF9B0;
  a1[35] = &unk_24C9CF9D8;
  a1[42] = &unk_24C9CFA00;
  a1[49] = &unk_24C9CFA28;
  a1[56] = &unk_24C9CFA50;
  a1[63] = &unk_24C9CFA78;
  a1[70] = &unk_24C9CFAA0;
  a1[77] = &unk_24C9CFAC8;
  a1[84] = &unk_24C9CFAF0;
  a1[91] = &unk_24C9CFB18;
  a1[98] = &unk_24C9CFB40;
  a1[105] = &unk_24C9CFB68;
  a1[112] = &unk_24C9CFB90;
  v2 = (std::__shared_weak_count *)a1[126];
  if (!v2)
    return sub_20EC42B5C((uint64_t)(a1 - 91));
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
    return sub_20EC42B5C((uint64_t)(a1 - 91));
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return sub_20EC42B5C(v1);
}

void sub_20EC488A4(_QWORD *a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = (uint64_t)(a1 - 91);
  *(a1 - 91) = &off_24C9CF620;
  *(a1 - 84) = &unk_24C9CF730;
  *(a1 - 77) = &unk_24C9CF758;
  *(a1 - 70) = &unk_24C9CF780;
  *(a1 - 63) = &unk_24C9CF7A8;
  *(a1 - 56) = &unk_24C9CF7D0;
  *(a1 - 49) = &unk_24C9CF7F8;
  *(a1 - 42) = &unk_24C9CF820;
  *(a1 - 35) = &unk_24C9CF848;
  *(a1 - 28) = &unk_24C9CF870;
  *(a1 - 21) = &unk_24C9CF898;
  *(a1 - 14) = &unk_24C9CF8C0;
  *(a1 - 7) = &unk_24C9CF8E8;
  *a1 = &unk_24C9CF910;
  a1[7] = &unk_24C9CF938;
  a1[14] = &unk_24C9CF960;
  a1[21] = &unk_24C9CF988;
  a1[28] = &unk_24C9CF9B0;
  a1[35] = &unk_24C9CF9D8;
  a1[42] = &unk_24C9CFA00;
  a1[49] = &unk_24C9CFA28;
  a1[56] = &unk_24C9CFA50;
  a1[63] = &unk_24C9CFA78;
  a1[70] = &unk_24C9CFAA0;
  a1[77] = &unk_24C9CFAC8;
  a1[84] = &unk_24C9CFAF0;
  a1[91] = &unk_24C9CFB18;
  a1[98] = &unk_24C9CFB40;
  a1[105] = &unk_24C9CFB68;
  a1[112] = &unk_24C9CFB90;
  v2 = (std::__shared_weak_count *)a1[126];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  sub_20EC42B5C(v1);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20EC48A24(_QWORD *a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = (uint64_t)(a1 - 98);
  *(a1 - 98) = &off_24C9CF620;
  *(a1 - 91) = &unk_24C9CF730;
  *(a1 - 84) = &unk_24C9CF758;
  *(a1 - 77) = &unk_24C9CF780;
  *(a1 - 70) = &unk_24C9CF7A8;
  *(a1 - 63) = &unk_24C9CF7D0;
  *(a1 - 56) = &unk_24C9CF7F8;
  *(a1 - 49) = &unk_24C9CF820;
  *(a1 - 42) = &unk_24C9CF848;
  *(a1 - 35) = &unk_24C9CF870;
  *(a1 - 28) = &unk_24C9CF898;
  *(a1 - 21) = &unk_24C9CF8C0;
  *(a1 - 14) = &unk_24C9CF8E8;
  *(a1 - 7) = &unk_24C9CF910;
  *a1 = &unk_24C9CF938;
  a1[7] = &unk_24C9CF960;
  a1[14] = &unk_24C9CF988;
  a1[21] = &unk_24C9CF9B0;
  a1[28] = &unk_24C9CF9D8;
  a1[35] = &unk_24C9CFA00;
  a1[42] = &unk_24C9CFA28;
  a1[49] = &unk_24C9CFA50;
  a1[56] = &unk_24C9CFA78;
  a1[63] = &unk_24C9CFAA0;
  a1[70] = &unk_24C9CFAC8;
  a1[77] = &unk_24C9CFAF0;
  a1[84] = &unk_24C9CFB18;
  a1[91] = &unk_24C9CFB40;
  a1[98] = &unk_24C9CFB68;
  a1[105] = &unk_24C9CFB90;
  v2 = (std::__shared_weak_count *)a1[119];
  if (!v2)
    return sub_20EC42B5C((uint64_t)(a1 - 98));
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
    return sub_20EC42B5C((uint64_t)(a1 - 98));
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return sub_20EC42B5C(v1);
}

void sub_20EC48BA4(_QWORD *a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = (uint64_t)(a1 - 98);
  *(a1 - 98) = &off_24C9CF620;
  *(a1 - 91) = &unk_24C9CF730;
  *(a1 - 84) = &unk_24C9CF758;
  *(a1 - 77) = &unk_24C9CF780;
  *(a1 - 70) = &unk_24C9CF7A8;
  *(a1 - 63) = &unk_24C9CF7D0;
  *(a1 - 56) = &unk_24C9CF7F8;
  *(a1 - 49) = &unk_24C9CF820;
  *(a1 - 42) = &unk_24C9CF848;
  *(a1 - 35) = &unk_24C9CF870;
  *(a1 - 28) = &unk_24C9CF898;
  *(a1 - 21) = &unk_24C9CF8C0;
  *(a1 - 14) = &unk_24C9CF8E8;
  *(a1 - 7) = &unk_24C9CF910;
  *a1 = &unk_24C9CF938;
  a1[7] = &unk_24C9CF960;
  a1[14] = &unk_24C9CF988;
  a1[21] = &unk_24C9CF9B0;
  a1[28] = &unk_24C9CF9D8;
  a1[35] = &unk_24C9CFA00;
  a1[42] = &unk_24C9CFA28;
  a1[49] = &unk_24C9CFA50;
  a1[56] = &unk_24C9CFA78;
  a1[63] = &unk_24C9CFAA0;
  a1[70] = &unk_24C9CFAC8;
  a1[77] = &unk_24C9CFAF0;
  a1[84] = &unk_24C9CFB18;
  a1[91] = &unk_24C9CFB40;
  a1[98] = &unk_24C9CFB68;
  a1[105] = &unk_24C9CFB90;
  v2 = (std::__shared_weak_count *)a1[119];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  sub_20EC42B5C(v1);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20EC48D28(_QWORD *a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = (uint64_t)(a1 - 105);
  *(a1 - 105) = &off_24C9CF620;
  *(a1 - 98) = &unk_24C9CF730;
  *(a1 - 91) = &unk_24C9CF758;
  *(a1 - 84) = &unk_24C9CF780;
  *(a1 - 77) = &unk_24C9CF7A8;
  *(a1 - 70) = &unk_24C9CF7D0;
  *(a1 - 63) = &unk_24C9CF7F8;
  *(a1 - 56) = &unk_24C9CF820;
  *(a1 - 49) = &unk_24C9CF848;
  *(a1 - 42) = &unk_24C9CF870;
  *(a1 - 35) = &unk_24C9CF898;
  *(a1 - 28) = &unk_24C9CF8C0;
  *(a1 - 21) = &unk_24C9CF8E8;
  *(a1 - 14) = &unk_24C9CF910;
  *(a1 - 7) = &unk_24C9CF938;
  *a1 = &unk_24C9CF960;
  a1[7] = &unk_24C9CF988;
  a1[14] = &unk_24C9CF9B0;
  a1[21] = &unk_24C9CF9D8;
  a1[28] = &unk_24C9CFA00;
  a1[35] = &unk_24C9CFA28;
  a1[42] = &unk_24C9CFA50;
  a1[49] = &unk_24C9CFA78;
  a1[56] = &unk_24C9CFAA0;
  a1[63] = &unk_24C9CFAC8;
  a1[70] = &unk_24C9CFAF0;
  a1[77] = &unk_24C9CFB18;
  a1[84] = &unk_24C9CFB40;
  a1[91] = &unk_24C9CFB68;
  a1[98] = &unk_24C9CFB90;
  v2 = (std::__shared_weak_count *)a1[112];
  if (!v2)
    return sub_20EC42B5C((uint64_t)(a1 - 105));
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
    return sub_20EC42B5C((uint64_t)(a1 - 105));
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return sub_20EC42B5C(v1);
}

void sub_20EC48EAC(_QWORD *a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = (uint64_t)(a1 - 105);
  *(a1 - 105) = &off_24C9CF620;
  *(a1 - 98) = &unk_24C9CF730;
  *(a1 - 91) = &unk_24C9CF758;
  *(a1 - 84) = &unk_24C9CF780;
  *(a1 - 77) = &unk_24C9CF7A8;
  *(a1 - 70) = &unk_24C9CF7D0;
  *(a1 - 63) = &unk_24C9CF7F8;
  *(a1 - 56) = &unk_24C9CF820;
  *(a1 - 49) = &unk_24C9CF848;
  *(a1 - 42) = &unk_24C9CF870;
  *(a1 - 35) = &unk_24C9CF898;
  *(a1 - 28) = &unk_24C9CF8C0;
  *(a1 - 21) = &unk_24C9CF8E8;
  *(a1 - 14) = &unk_24C9CF910;
  *(a1 - 7) = &unk_24C9CF938;
  *a1 = &unk_24C9CF960;
  a1[7] = &unk_24C9CF988;
  a1[14] = &unk_24C9CF9B0;
  a1[21] = &unk_24C9CF9D8;
  a1[28] = &unk_24C9CFA00;
  a1[35] = &unk_24C9CFA28;
  a1[42] = &unk_24C9CFA50;
  a1[49] = &unk_24C9CFA78;
  a1[56] = &unk_24C9CFAA0;
  a1[63] = &unk_24C9CFAC8;
  a1[70] = &unk_24C9CFAF0;
  a1[77] = &unk_24C9CFB18;
  a1[84] = &unk_24C9CFB40;
  a1[91] = &unk_24C9CFB68;
  a1[98] = &unk_24C9CFB90;
  v2 = (std::__shared_weak_count *)a1[112];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  sub_20EC42B5C(v1);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20EC49034(_QWORD *a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = (uint64_t)(a1 - 112);
  *(a1 - 112) = &off_24C9CF620;
  *(a1 - 105) = &unk_24C9CF730;
  *(a1 - 98) = &unk_24C9CF758;
  *(a1 - 91) = &unk_24C9CF780;
  *(a1 - 84) = &unk_24C9CF7A8;
  *(a1 - 77) = &unk_24C9CF7D0;
  *(a1 - 70) = &unk_24C9CF7F8;
  *(a1 - 63) = &unk_24C9CF820;
  *(a1 - 56) = &unk_24C9CF848;
  *(a1 - 49) = &unk_24C9CF870;
  *(a1 - 42) = &unk_24C9CF898;
  *(a1 - 35) = &unk_24C9CF8C0;
  *(a1 - 28) = &unk_24C9CF8E8;
  *(a1 - 21) = &unk_24C9CF910;
  *(a1 - 14) = &unk_24C9CF938;
  *(a1 - 7) = &unk_24C9CF960;
  *a1 = &unk_24C9CF988;
  a1[7] = &unk_24C9CF9B0;
  a1[14] = &unk_24C9CF9D8;
  a1[21] = &unk_24C9CFA00;
  a1[28] = &unk_24C9CFA28;
  a1[35] = &unk_24C9CFA50;
  a1[42] = &unk_24C9CFA78;
  a1[49] = &unk_24C9CFAA0;
  a1[56] = &unk_24C9CFAC8;
  a1[63] = &unk_24C9CFAF0;
  a1[70] = &unk_24C9CFB18;
  a1[77] = &unk_24C9CFB40;
  a1[84] = &unk_24C9CFB68;
  a1[91] = &unk_24C9CFB90;
  v2 = (std::__shared_weak_count *)a1[105];
  if (!v2)
    return sub_20EC42B5C((uint64_t)(a1 - 112));
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
    return sub_20EC42B5C((uint64_t)(a1 - 112));
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return sub_20EC42B5C(v1);
}

void sub_20EC491BC(_QWORD *a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = (uint64_t)(a1 - 112);
  *(a1 - 112) = &off_24C9CF620;
  *(a1 - 105) = &unk_24C9CF730;
  *(a1 - 98) = &unk_24C9CF758;
  *(a1 - 91) = &unk_24C9CF780;
  *(a1 - 84) = &unk_24C9CF7A8;
  *(a1 - 77) = &unk_24C9CF7D0;
  *(a1 - 70) = &unk_24C9CF7F8;
  *(a1 - 63) = &unk_24C9CF820;
  *(a1 - 56) = &unk_24C9CF848;
  *(a1 - 49) = &unk_24C9CF870;
  *(a1 - 42) = &unk_24C9CF898;
  *(a1 - 35) = &unk_24C9CF8C0;
  *(a1 - 28) = &unk_24C9CF8E8;
  *(a1 - 21) = &unk_24C9CF910;
  *(a1 - 14) = &unk_24C9CF938;
  *(a1 - 7) = &unk_24C9CF960;
  *a1 = &unk_24C9CF988;
  a1[7] = &unk_24C9CF9B0;
  a1[14] = &unk_24C9CF9D8;
  a1[21] = &unk_24C9CFA00;
  a1[28] = &unk_24C9CFA28;
  a1[35] = &unk_24C9CFA50;
  a1[42] = &unk_24C9CFA78;
  a1[49] = &unk_24C9CFAA0;
  a1[56] = &unk_24C9CFAC8;
  a1[63] = &unk_24C9CFAF0;
  a1[70] = &unk_24C9CFB18;
  a1[77] = &unk_24C9CFB40;
  a1[84] = &unk_24C9CFB68;
  a1[91] = &unk_24C9CFB90;
  v2 = (std::__shared_weak_count *)a1[105];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  sub_20EC42B5C(v1);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20EC49348(_QWORD *a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = (uint64_t)(a1 - 119);
  *(a1 - 119) = &off_24C9CF620;
  *(a1 - 112) = &unk_24C9CF730;
  *(a1 - 105) = &unk_24C9CF758;
  *(a1 - 98) = &unk_24C9CF780;
  *(a1 - 91) = &unk_24C9CF7A8;
  *(a1 - 84) = &unk_24C9CF7D0;
  *(a1 - 77) = &unk_24C9CF7F8;
  *(a1 - 70) = &unk_24C9CF820;
  *(a1 - 63) = &unk_24C9CF848;
  *(a1 - 56) = &unk_24C9CF870;
  *(a1 - 49) = &unk_24C9CF898;
  *(a1 - 42) = &unk_24C9CF8C0;
  *(a1 - 35) = &unk_24C9CF8E8;
  *(a1 - 28) = &unk_24C9CF910;
  *(a1 - 21) = &unk_24C9CF938;
  *(a1 - 14) = &unk_24C9CF960;
  *(a1 - 7) = &unk_24C9CF988;
  *a1 = &unk_24C9CF9B0;
  a1[7] = &unk_24C9CF9D8;
  a1[14] = &unk_24C9CFA00;
  a1[21] = &unk_24C9CFA28;
  a1[28] = &unk_24C9CFA50;
  a1[35] = &unk_24C9CFA78;
  a1[42] = &unk_24C9CFAA0;
  a1[49] = &unk_24C9CFAC8;
  a1[56] = &unk_24C9CFAF0;
  a1[63] = &unk_24C9CFB18;
  a1[70] = &unk_24C9CFB40;
  a1[77] = &unk_24C9CFB68;
  a1[84] = &unk_24C9CFB90;
  v2 = (std::__shared_weak_count *)a1[98];
  if (!v2)
    return sub_20EC42B5C((uint64_t)(a1 - 119));
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
    return sub_20EC42B5C((uint64_t)(a1 - 119));
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return sub_20EC42B5C(v1);
}

void sub_20EC494D4(_QWORD *a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = (uint64_t)(a1 - 119);
  *(a1 - 119) = &off_24C9CF620;
  *(a1 - 112) = &unk_24C9CF730;
  *(a1 - 105) = &unk_24C9CF758;
  *(a1 - 98) = &unk_24C9CF780;
  *(a1 - 91) = &unk_24C9CF7A8;
  *(a1 - 84) = &unk_24C9CF7D0;
  *(a1 - 77) = &unk_24C9CF7F8;
  *(a1 - 70) = &unk_24C9CF820;
  *(a1 - 63) = &unk_24C9CF848;
  *(a1 - 56) = &unk_24C9CF870;
  *(a1 - 49) = &unk_24C9CF898;
  *(a1 - 42) = &unk_24C9CF8C0;
  *(a1 - 35) = &unk_24C9CF8E8;
  *(a1 - 28) = &unk_24C9CF910;
  *(a1 - 21) = &unk_24C9CF938;
  *(a1 - 14) = &unk_24C9CF960;
  *(a1 - 7) = &unk_24C9CF988;
  *a1 = &unk_24C9CF9B0;
  a1[7] = &unk_24C9CF9D8;
  a1[14] = &unk_24C9CFA00;
  a1[21] = &unk_24C9CFA28;
  a1[28] = &unk_24C9CFA50;
  a1[35] = &unk_24C9CFA78;
  a1[42] = &unk_24C9CFAA0;
  a1[49] = &unk_24C9CFAC8;
  a1[56] = &unk_24C9CFAF0;
  a1[63] = &unk_24C9CFB18;
  a1[70] = &unk_24C9CFB40;
  a1[77] = &unk_24C9CFB68;
  a1[84] = &unk_24C9CFB90;
  v2 = (std::__shared_weak_count *)a1[98];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  sub_20EC42B5C(v1);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20EC49664(_QWORD *a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = (uint64_t)(a1 - 126);
  *(a1 - 126) = &off_24C9CF620;
  *(a1 - 119) = &unk_24C9CF730;
  *(a1 - 112) = &unk_24C9CF758;
  *(a1 - 105) = &unk_24C9CF780;
  *(a1 - 98) = &unk_24C9CF7A8;
  *(a1 - 91) = &unk_24C9CF7D0;
  *(a1 - 84) = &unk_24C9CF7F8;
  *(a1 - 77) = &unk_24C9CF820;
  *(a1 - 70) = &unk_24C9CF848;
  *(a1 - 63) = &unk_24C9CF870;
  *(a1 - 56) = &unk_24C9CF898;
  *(a1 - 49) = &unk_24C9CF8C0;
  *(a1 - 42) = &unk_24C9CF8E8;
  *(a1 - 35) = &unk_24C9CF910;
  *(a1 - 28) = &unk_24C9CF938;
  *(a1 - 21) = &unk_24C9CF960;
  *(a1 - 14) = &unk_24C9CF988;
  *(a1 - 7) = &unk_24C9CF9B0;
  *a1 = &unk_24C9CF9D8;
  a1[7] = &unk_24C9CFA00;
  a1[14] = &unk_24C9CFA28;
  a1[21] = &unk_24C9CFA50;
  a1[28] = &unk_24C9CFA78;
  a1[35] = &unk_24C9CFAA0;
  a1[42] = &unk_24C9CFAC8;
  a1[49] = &unk_24C9CFAF0;
  a1[56] = &unk_24C9CFB18;
  a1[63] = &unk_24C9CFB40;
  a1[70] = &unk_24C9CFB68;
  a1[77] = &unk_24C9CFB90;
  v2 = (std::__shared_weak_count *)a1[91];
  if (!v2)
    return sub_20EC42B5C((uint64_t)(a1 - 126));
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
    return sub_20EC42B5C((uint64_t)(a1 - 126));
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return sub_20EC42B5C(v1);
}

void sub_20EC497F4(_QWORD *a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = (uint64_t)(a1 - 126);
  *(a1 - 126) = &off_24C9CF620;
  *(a1 - 119) = &unk_24C9CF730;
  *(a1 - 112) = &unk_24C9CF758;
  *(a1 - 105) = &unk_24C9CF780;
  *(a1 - 98) = &unk_24C9CF7A8;
  *(a1 - 91) = &unk_24C9CF7D0;
  *(a1 - 84) = &unk_24C9CF7F8;
  *(a1 - 77) = &unk_24C9CF820;
  *(a1 - 70) = &unk_24C9CF848;
  *(a1 - 63) = &unk_24C9CF870;
  *(a1 - 56) = &unk_24C9CF898;
  *(a1 - 49) = &unk_24C9CF8C0;
  *(a1 - 42) = &unk_24C9CF8E8;
  *(a1 - 35) = &unk_24C9CF910;
  *(a1 - 28) = &unk_24C9CF938;
  *(a1 - 21) = &unk_24C9CF960;
  *(a1 - 14) = &unk_24C9CF988;
  *(a1 - 7) = &unk_24C9CF9B0;
  *a1 = &unk_24C9CF9D8;
  a1[7] = &unk_24C9CFA00;
  a1[14] = &unk_24C9CFA28;
  a1[21] = &unk_24C9CFA50;
  a1[28] = &unk_24C9CFA78;
  a1[35] = &unk_24C9CFAA0;
  a1[42] = &unk_24C9CFAC8;
  a1[49] = &unk_24C9CFAF0;
  a1[56] = &unk_24C9CFB18;
  a1[63] = &unk_24C9CFB40;
  a1[70] = &unk_24C9CFB68;
  a1[77] = &unk_24C9CFB90;
  v2 = (std::__shared_weak_count *)a1[91];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  sub_20EC42B5C(v1);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20EC49988(_QWORD *a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = (uint64_t)(a1 - 133);
  *(a1 - 133) = &off_24C9CF620;
  *(a1 - 126) = &unk_24C9CF730;
  *(a1 - 119) = &unk_24C9CF758;
  *(a1 - 112) = &unk_24C9CF780;
  *(a1 - 105) = &unk_24C9CF7A8;
  *(a1 - 98) = &unk_24C9CF7D0;
  *(a1 - 91) = &unk_24C9CF7F8;
  *(a1 - 84) = &unk_24C9CF820;
  *(a1 - 77) = &unk_24C9CF848;
  *(a1 - 70) = &unk_24C9CF870;
  *(a1 - 63) = &unk_24C9CF898;
  *(a1 - 56) = &unk_24C9CF8C0;
  *(a1 - 49) = &unk_24C9CF8E8;
  *(a1 - 42) = &unk_24C9CF910;
  *(a1 - 35) = &unk_24C9CF938;
  *(a1 - 28) = &unk_24C9CF960;
  *(a1 - 21) = &unk_24C9CF988;
  *(a1 - 14) = &unk_24C9CF9B0;
  *(a1 - 7) = &unk_24C9CF9D8;
  *a1 = &unk_24C9CFA00;
  a1[7] = &unk_24C9CFA28;
  a1[14] = &unk_24C9CFA50;
  a1[21] = &unk_24C9CFA78;
  a1[28] = &unk_24C9CFAA0;
  a1[35] = &unk_24C9CFAC8;
  a1[42] = &unk_24C9CFAF0;
  a1[49] = &unk_24C9CFB18;
  a1[56] = &unk_24C9CFB40;
  a1[63] = &unk_24C9CFB68;
  a1[70] = &unk_24C9CFB90;
  v2 = (std::__shared_weak_count *)a1[84];
  if (!v2)
    return sub_20EC42B5C((uint64_t)(a1 - 133));
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
    return sub_20EC42B5C((uint64_t)(a1 - 133));
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return sub_20EC42B5C(v1);
}

void sub_20EC49B1C(_QWORD *a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = (uint64_t)(a1 - 133);
  *(a1 - 133) = &off_24C9CF620;
  *(a1 - 126) = &unk_24C9CF730;
  *(a1 - 119) = &unk_24C9CF758;
  *(a1 - 112) = &unk_24C9CF780;
  *(a1 - 105) = &unk_24C9CF7A8;
  *(a1 - 98) = &unk_24C9CF7D0;
  *(a1 - 91) = &unk_24C9CF7F8;
  *(a1 - 84) = &unk_24C9CF820;
  *(a1 - 77) = &unk_24C9CF848;
  *(a1 - 70) = &unk_24C9CF870;
  *(a1 - 63) = &unk_24C9CF898;
  *(a1 - 56) = &unk_24C9CF8C0;
  *(a1 - 49) = &unk_24C9CF8E8;
  *(a1 - 42) = &unk_24C9CF910;
  *(a1 - 35) = &unk_24C9CF938;
  *(a1 - 28) = &unk_24C9CF960;
  *(a1 - 21) = &unk_24C9CF988;
  *(a1 - 14) = &unk_24C9CF9B0;
  *(a1 - 7) = &unk_24C9CF9D8;
  *a1 = &unk_24C9CFA00;
  a1[7] = &unk_24C9CFA28;
  a1[14] = &unk_24C9CFA50;
  a1[21] = &unk_24C9CFA78;
  a1[28] = &unk_24C9CFAA0;
  a1[35] = &unk_24C9CFAC8;
  a1[42] = &unk_24C9CFAF0;
  a1[49] = &unk_24C9CFB18;
  a1[56] = &unk_24C9CFB40;
  a1[63] = &unk_24C9CFB68;
  a1[70] = &unk_24C9CFB90;
  v2 = (std::__shared_weak_count *)a1[84];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  sub_20EC42B5C(v1);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20EC49CB4(_QWORD *a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = (uint64_t)(a1 - 140);
  *(a1 - 140) = &off_24C9CF620;
  *(a1 - 133) = &unk_24C9CF730;
  *(a1 - 126) = &unk_24C9CF758;
  *(a1 - 119) = &unk_24C9CF780;
  *(a1 - 112) = &unk_24C9CF7A8;
  *(a1 - 105) = &unk_24C9CF7D0;
  *(a1 - 98) = &unk_24C9CF7F8;
  *(a1 - 91) = &unk_24C9CF820;
  *(a1 - 84) = &unk_24C9CF848;
  *(a1 - 77) = &unk_24C9CF870;
  *(a1 - 70) = &unk_24C9CF898;
  *(a1 - 63) = &unk_24C9CF8C0;
  *(a1 - 56) = &unk_24C9CF8E8;
  *(a1 - 49) = &unk_24C9CF910;
  *(a1 - 42) = &unk_24C9CF938;
  *(a1 - 35) = &unk_24C9CF960;
  *(a1 - 28) = &unk_24C9CF988;
  *(a1 - 21) = &unk_24C9CF9B0;
  *(a1 - 14) = &unk_24C9CF9D8;
  *(a1 - 7) = &unk_24C9CFA00;
  *a1 = &unk_24C9CFA28;
  a1[7] = &unk_24C9CFA50;
  a1[14] = &unk_24C9CFA78;
  a1[21] = &unk_24C9CFAA0;
  a1[28] = &unk_24C9CFAC8;
  a1[35] = &unk_24C9CFAF0;
  a1[42] = &unk_24C9CFB18;
  a1[49] = &unk_24C9CFB40;
  a1[56] = &unk_24C9CFB68;
  a1[63] = &unk_24C9CFB90;
  v2 = (std::__shared_weak_count *)a1[77];
  if (!v2)
    return sub_20EC42B5C((uint64_t)(a1 - 140));
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
    return sub_20EC42B5C((uint64_t)(a1 - 140));
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return sub_20EC42B5C(v1);
}

void sub_20EC49E4C(_QWORD *a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = (uint64_t)(a1 - 140);
  *(a1 - 140) = &off_24C9CF620;
  *(a1 - 133) = &unk_24C9CF730;
  *(a1 - 126) = &unk_24C9CF758;
  *(a1 - 119) = &unk_24C9CF780;
  *(a1 - 112) = &unk_24C9CF7A8;
  *(a1 - 105) = &unk_24C9CF7D0;
  *(a1 - 98) = &unk_24C9CF7F8;
  *(a1 - 91) = &unk_24C9CF820;
  *(a1 - 84) = &unk_24C9CF848;
  *(a1 - 77) = &unk_24C9CF870;
  *(a1 - 70) = &unk_24C9CF898;
  *(a1 - 63) = &unk_24C9CF8C0;
  *(a1 - 56) = &unk_24C9CF8E8;
  *(a1 - 49) = &unk_24C9CF910;
  *(a1 - 42) = &unk_24C9CF938;
  *(a1 - 35) = &unk_24C9CF960;
  *(a1 - 28) = &unk_24C9CF988;
  *(a1 - 21) = &unk_24C9CF9B0;
  *(a1 - 14) = &unk_24C9CF9D8;
  *(a1 - 7) = &unk_24C9CFA00;
  *a1 = &unk_24C9CFA28;
  a1[7] = &unk_24C9CFA50;
  a1[14] = &unk_24C9CFA78;
  a1[21] = &unk_24C9CFAA0;
  a1[28] = &unk_24C9CFAC8;
  a1[35] = &unk_24C9CFAF0;
  a1[42] = &unk_24C9CFB18;
  a1[49] = &unk_24C9CFB40;
  a1[56] = &unk_24C9CFB68;
  a1[63] = &unk_24C9CFB90;
  v2 = (std::__shared_weak_count *)a1[77];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  sub_20EC42B5C(v1);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20EC49FE8(_QWORD *a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = (uint64_t)(a1 - 147);
  *(a1 - 147) = &off_24C9CF620;
  *(a1 - 140) = &unk_24C9CF730;
  *(a1 - 133) = &unk_24C9CF758;
  *(a1 - 126) = &unk_24C9CF780;
  *(a1 - 119) = &unk_24C9CF7A8;
  *(a1 - 112) = &unk_24C9CF7D0;
  *(a1 - 105) = &unk_24C9CF7F8;
  *(a1 - 98) = &unk_24C9CF820;
  *(a1 - 91) = &unk_24C9CF848;
  *(a1 - 84) = &unk_24C9CF870;
  *(a1 - 77) = &unk_24C9CF898;
  *(a1 - 70) = &unk_24C9CF8C0;
  *(a1 - 63) = &unk_24C9CF8E8;
  *(a1 - 56) = &unk_24C9CF910;
  *(a1 - 49) = &unk_24C9CF938;
  *(a1 - 42) = &unk_24C9CF960;
  *(a1 - 35) = &unk_24C9CF988;
  *(a1 - 28) = &unk_24C9CF9B0;
  *(a1 - 21) = &unk_24C9CF9D8;
  *(a1 - 14) = &unk_24C9CFA00;
  *(a1 - 7) = &unk_24C9CFA28;
  *a1 = &unk_24C9CFA50;
  a1[7] = &unk_24C9CFA78;
  a1[14] = &unk_24C9CFAA0;
  a1[21] = &unk_24C9CFAC8;
  a1[28] = &unk_24C9CFAF0;
  a1[35] = &unk_24C9CFB18;
  a1[42] = &unk_24C9CFB40;
  a1[49] = &unk_24C9CFB68;
  a1[56] = &unk_24C9CFB90;
  v2 = (std::__shared_weak_count *)a1[70];
  if (!v2)
    return sub_20EC42B5C((uint64_t)(a1 - 147));
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
    return sub_20EC42B5C((uint64_t)(a1 - 147));
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return sub_20EC42B5C(v1);
}

void sub_20EC4A184(_QWORD *a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = (uint64_t)(a1 - 147);
  *(a1 - 147) = &off_24C9CF620;
  *(a1 - 140) = &unk_24C9CF730;
  *(a1 - 133) = &unk_24C9CF758;
  *(a1 - 126) = &unk_24C9CF780;
  *(a1 - 119) = &unk_24C9CF7A8;
  *(a1 - 112) = &unk_24C9CF7D0;
  *(a1 - 105) = &unk_24C9CF7F8;
  *(a1 - 98) = &unk_24C9CF820;
  *(a1 - 91) = &unk_24C9CF848;
  *(a1 - 84) = &unk_24C9CF870;
  *(a1 - 77) = &unk_24C9CF898;
  *(a1 - 70) = &unk_24C9CF8C0;
  *(a1 - 63) = &unk_24C9CF8E8;
  *(a1 - 56) = &unk_24C9CF910;
  *(a1 - 49) = &unk_24C9CF938;
  *(a1 - 42) = &unk_24C9CF960;
  *(a1 - 35) = &unk_24C9CF988;
  *(a1 - 28) = &unk_24C9CF9B0;
  *(a1 - 21) = &unk_24C9CF9D8;
  *(a1 - 14) = &unk_24C9CFA00;
  *(a1 - 7) = &unk_24C9CFA28;
  *a1 = &unk_24C9CFA50;
  a1[7] = &unk_24C9CFA78;
  a1[14] = &unk_24C9CFAA0;
  a1[21] = &unk_24C9CFAC8;
  a1[28] = &unk_24C9CFAF0;
  a1[35] = &unk_24C9CFB18;
  a1[42] = &unk_24C9CFB40;
  a1[49] = &unk_24C9CFB68;
  a1[56] = &unk_24C9CFB90;
  v2 = (std::__shared_weak_count *)a1[70];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  sub_20EC42B5C(v1);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20EC4A324(_QWORD *a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = (uint64_t)(a1 - 154);
  *(a1 - 154) = &off_24C9CF620;
  *(a1 - 147) = &unk_24C9CF730;
  *(a1 - 140) = &unk_24C9CF758;
  *(a1 - 133) = &unk_24C9CF780;
  *(a1 - 126) = &unk_24C9CF7A8;
  *(a1 - 119) = &unk_24C9CF7D0;
  *(a1 - 112) = &unk_24C9CF7F8;
  *(a1 - 105) = &unk_24C9CF820;
  *(a1 - 98) = &unk_24C9CF848;
  *(a1 - 91) = &unk_24C9CF870;
  *(a1 - 84) = &unk_24C9CF898;
  *(a1 - 77) = &unk_24C9CF8C0;
  *(a1 - 70) = &unk_24C9CF8E8;
  *(a1 - 63) = &unk_24C9CF910;
  *(a1 - 56) = &unk_24C9CF938;
  *(a1 - 49) = &unk_24C9CF960;
  *(a1 - 42) = &unk_24C9CF988;
  *(a1 - 35) = &unk_24C9CF9B0;
  *(a1 - 28) = &unk_24C9CF9D8;
  *(a1 - 21) = &unk_24C9CFA00;
  *(a1 - 14) = &unk_24C9CFA28;
  *(a1 - 7) = &unk_24C9CFA50;
  *a1 = &unk_24C9CFA78;
  a1[7] = &unk_24C9CFAA0;
  a1[14] = &unk_24C9CFAC8;
  a1[21] = &unk_24C9CFAF0;
  a1[28] = &unk_24C9CFB18;
  a1[35] = &unk_24C9CFB40;
  a1[42] = &unk_24C9CFB68;
  a1[49] = &unk_24C9CFB90;
  v2 = (std::__shared_weak_count *)a1[63];
  if (!v2)
    return sub_20EC42B5C((uint64_t)(a1 - 154));
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
    return sub_20EC42B5C((uint64_t)(a1 - 154));
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return sub_20EC42B5C(v1);
}

void sub_20EC4A4C4(_QWORD *a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = (uint64_t)(a1 - 154);
  *(a1 - 154) = &off_24C9CF620;
  *(a1 - 147) = &unk_24C9CF730;
  *(a1 - 140) = &unk_24C9CF758;
  *(a1 - 133) = &unk_24C9CF780;
  *(a1 - 126) = &unk_24C9CF7A8;
  *(a1 - 119) = &unk_24C9CF7D0;
  *(a1 - 112) = &unk_24C9CF7F8;
  *(a1 - 105) = &unk_24C9CF820;
  *(a1 - 98) = &unk_24C9CF848;
  *(a1 - 91) = &unk_24C9CF870;
  *(a1 - 84) = &unk_24C9CF898;
  *(a1 - 77) = &unk_24C9CF8C0;
  *(a1 - 70) = &unk_24C9CF8E8;
  *(a1 - 63) = &unk_24C9CF910;
  *(a1 - 56) = &unk_24C9CF938;
  *(a1 - 49) = &unk_24C9CF960;
  *(a1 - 42) = &unk_24C9CF988;
  *(a1 - 35) = &unk_24C9CF9B0;
  *(a1 - 28) = &unk_24C9CF9D8;
  *(a1 - 21) = &unk_24C9CFA00;
  *(a1 - 14) = &unk_24C9CFA28;
  *(a1 - 7) = &unk_24C9CFA50;
  *a1 = &unk_24C9CFA78;
  a1[7] = &unk_24C9CFAA0;
  a1[14] = &unk_24C9CFAC8;
  a1[21] = &unk_24C9CFAF0;
  a1[28] = &unk_24C9CFB18;
  a1[35] = &unk_24C9CFB40;
  a1[42] = &unk_24C9CFB68;
  a1[49] = &unk_24C9CFB90;
  v2 = (std::__shared_weak_count *)a1[63];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  sub_20EC42B5C(v1);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20EC4A668(_QWORD *a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = (uint64_t)(a1 - 161);
  *(a1 - 161) = &off_24C9CF620;
  *(a1 - 154) = &unk_24C9CF730;
  *(a1 - 147) = &unk_24C9CF758;
  *(a1 - 140) = &unk_24C9CF780;
  *(a1 - 133) = &unk_24C9CF7A8;
  *(a1 - 126) = &unk_24C9CF7D0;
  *(a1 - 119) = &unk_24C9CF7F8;
  *(a1 - 112) = &unk_24C9CF820;
  *(a1 - 105) = &unk_24C9CF848;
  *(a1 - 98) = &unk_24C9CF870;
  *(a1 - 91) = &unk_24C9CF898;
  *(a1 - 84) = &unk_24C9CF8C0;
  *(a1 - 77) = &unk_24C9CF8E8;
  *(a1 - 70) = &unk_24C9CF910;
  *(a1 - 63) = &unk_24C9CF938;
  *(a1 - 56) = &unk_24C9CF960;
  *(a1 - 49) = &unk_24C9CF988;
  *(a1 - 42) = &unk_24C9CF9B0;
  *(a1 - 35) = &unk_24C9CF9D8;
  *(a1 - 28) = &unk_24C9CFA00;
  *(a1 - 21) = &unk_24C9CFA28;
  *(a1 - 14) = &unk_24C9CFA50;
  *(a1 - 7) = &unk_24C9CFA78;
  *a1 = &unk_24C9CFAA0;
  a1[7] = &unk_24C9CFAC8;
  a1[14] = &unk_24C9CFAF0;
  a1[21] = &unk_24C9CFB18;
  a1[28] = &unk_24C9CFB40;
  a1[35] = &unk_24C9CFB68;
  a1[42] = &unk_24C9CFB90;
  v2 = (std::__shared_weak_count *)a1[56];
  if (!v2)
    return sub_20EC42B5C((uint64_t)(a1 - 161));
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
    return sub_20EC42B5C((uint64_t)(a1 - 161));
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return sub_20EC42B5C(v1);
}

void sub_20EC4A80C(_QWORD *a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = (uint64_t)(a1 - 161);
  *(a1 - 161) = &off_24C9CF620;
  *(a1 - 154) = &unk_24C9CF730;
  *(a1 - 147) = &unk_24C9CF758;
  *(a1 - 140) = &unk_24C9CF780;
  *(a1 - 133) = &unk_24C9CF7A8;
  *(a1 - 126) = &unk_24C9CF7D0;
  *(a1 - 119) = &unk_24C9CF7F8;
  *(a1 - 112) = &unk_24C9CF820;
  *(a1 - 105) = &unk_24C9CF848;
  *(a1 - 98) = &unk_24C9CF870;
  *(a1 - 91) = &unk_24C9CF898;
  *(a1 - 84) = &unk_24C9CF8C0;
  *(a1 - 77) = &unk_24C9CF8E8;
  *(a1 - 70) = &unk_24C9CF910;
  *(a1 - 63) = &unk_24C9CF938;
  *(a1 - 56) = &unk_24C9CF960;
  *(a1 - 49) = &unk_24C9CF988;
  *(a1 - 42) = &unk_24C9CF9B0;
  *(a1 - 35) = &unk_24C9CF9D8;
  *(a1 - 28) = &unk_24C9CFA00;
  *(a1 - 21) = &unk_24C9CFA28;
  *(a1 - 14) = &unk_24C9CFA50;
  *(a1 - 7) = &unk_24C9CFA78;
  *a1 = &unk_24C9CFAA0;
  a1[7] = &unk_24C9CFAC8;
  a1[14] = &unk_24C9CFAF0;
  a1[21] = &unk_24C9CFB18;
  a1[28] = &unk_24C9CFB40;
  a1[35] = &unk_24C9CFB68;
  a1[42] = &unk_24C9CFB90;
  v2 = (std::__shared_weak_count *)a1[56];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  sub_20EC42B5C(v1);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20EC4A9B4(_QWORD *a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = (uint64_t)(a1 - 168);
  *(a1 - 168) = &off_24C9CF620;
  *(a1 - 161) = &unk_24C9CF730;
  *(a1 - 154) = &unk_24C9CF758;
  *(a1 - 147) = &unk_24C9CF780;
  *(a1 - 140) = &unk_24C9CF7A8;
  *(a1 - 133) = &unk_24C9CF7D0;
  *(a1 - 126) = &unk_24C9CF7F8;
  *(a1 - 119) = &unk_24C9CF820;
  *(a1 - 112) = &unk_24C9CF848;
  *(a1 - 105) = &unk_24C9CF870;
  *(a1 - 98) = &unk_24C9CF898;
  *(a1 - 91) = &unk_24C9CF8C0;
  *(a1 - 84) = &unk_24C9CF8E8;
  *(a1 - 77) = &unk_24C9CF910;
  *(a1 - 70) = &unk_24C9CF938;
  *(a1 - 63) = &unk_24C9CF960;
  *(a1 - 56) = &unk_24C9CF988;
  *(a1 - 49) = &unk_24C9CF9B0;
  *(a1 - 42) = &unk_24C9CF9D8;
  *(a1 - 35) = &unk_24C9CFA00;
  *(a1 - 28) = &unk_24C9CFA28;
  *(a1 - 21) = &unk_24C9CFA50;
  *(a1 - 14) = &unk_24C9CFA78;
  *(a1 - 7) = &unk_24C9CFAA0;
  *a1 = &unk_24C9CFAC8;
  a1[7] = &unk_24C9CFAF0;
  a1[14] = &unk_24C9CFB18;
  a1[21] = &unk_24C9CFB40;
  a1[28] = &unk_24C9CFB68;
  a1[35] = &unk_24C9CFB90;
  v2 = (std::__shared_weak_count *)a1[49];
  if (!v2)
    return sub_20EC42B5C((uint64_t)(a1 - 168));
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
    return sub_20EC42B5C((uint64_t)(a1 - 168));
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return sub_20EC42B5C(v1);
}

void sub_20EC4AB5C(_QWORD *a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = (uint64_t)(a1 - 168);
  *(a1 - 168) = &off_24C9CF620;
  *(a1 - 161) = &unk_24C9CF730;
  *(a1 - 154) = &unk_24C9CF758;
  *(a1 - 147) = &unk_24C9CF780;
  *(a1 - 140) = &unk_24C9CF7A8;
  *(a1 - 133) = &unk_24C9CF7D0;
  *(a1 - 126) = &unk_24C9CF7F8;
  *(a1 - 119) = &unk_24C9CF820;
  *(a1 - 112) = &unk_24C9CF848;
  *(a1 - 105) = &unk_24C9CF870;
  *(a1 - 98) = &unk_24C9CF898;
  *(a1 - 91) = &unk_24C9CF8C0;
  *(a1 - 84) = &unk_24C9CF8E8;
  *(a1 - 77) = &unk_24C9CF910;
  *(a1 - 70) = &unk_24C9CF938;
  *(a1 - 63) = &unk_24C9CF960;
  *(a1 - 56) = &unk_24C9CF988;
  *(a1 - 49) = &unk_24C9CF9B0;
  *(a1 - 42) = &unk_24C9CF9D8;
  *(a1 - 35) = &unk_24C9CFA00;
  *(a1 - 28) = &unk_24C9CFA28;
  *(a1 - 21) = &unk_24C9CFA50;
  *(a1 - 14) = &unk_24C9CFA78;
  *(a1 - 7) = &unk_24C9CFAA0;
  *a1 = &unk_24C9CFAC8;
  a1[7] = &unk_24C9CFAF0;
  a1[14] = &unk_24C9CFB18;
  a1[21] = &unk_24C9CFB40;
  a1[28] = &unk_24C9CFB68;
  a1[35] = &unk_24C9CFB90;
  v2 = (std::__shared_weak_count *)a1[49];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  sub_20EC42B5C(v1);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20EC4AD08(_QWORD *a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = (uint64_t)(a1 - 175);
  *(a1 - 175) = &off_24C9CF620;
  *(a1 - 168) = &unk_24C9CF730;
  *(a1 - 161) = &unk_24C9CF758;
  *(a1 - 154) = &unk_24C9CF780;
  *(a1 - 147) = &unk_24C9CF7A8;
  *(a1 - 140) = &unk_24C9CF7D0;
  *(a1 - 133) = &unk_24C9CF7F8;
  *(a1 - 126) = &unk_24C9CF820;
  *(a1 - 119) = &unk_24C9CF848;
  *(a1 - 112) = &unk_24C9CF870;
  *(a1 - 105) = &unk_24C9CF898;
  *(a1 - 98) = &unk_24C9CF8C0;
  *(a1 - 91) = &unk_24C9CF8E8;
  *(a1 - 84) = &unk_24C9CF910;
  *(a1 - 77) = &unk_24C9CF938;
  *(a1 - 70) = &unk_24C9CF960;
  *(a1 - 63) = &unk_24C9CF988;
  *(a1 - 56) = &unk_24C9CF9B0;
  *(a1 - 49) = &unk_24C9CF9D8;
  *(a1 - 42) = &unk_24C9CFA00;
  *(a1 - 35) = &unk_24C9CFA28;
  *(a1 - 28) = &unk_24C9CFA50;
  *(a1 - 21) = &unk_24C9CFA78;
  *(a1 - 14) = &unk_24C9CFAA0;
  *(a1 - 7) = &unk_24C9CFAC8;
  *a1 = &unk_24C9CFAF0;
  a1[7] = &unk_24C9CFB18;
  a1[14] = &unk_24C9CFB40;
  a1[21] = &unk_24C9CFB68;
  a1[28] = &unk_24C9CFB90;
  v2 = (std::__shared_weak_count *)a1[42];
  if (!v2)
    return sub_20EC42B5C((uint64_t)(a1 - 175));
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
    return sub_20EC42B5C((uint64_t)(a1 - 175));
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return sub_20EC42B5C(v1);
}

void sub_20EC4AEB4(_QWORD *a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = (uint64_t)(a1 - 175);
  *(a1 - 175) = &off_24C9CF620;
  *(a1 - 168) = &unk_24C9CF730;
  *(a1 - 161) = &unk_24C9CF758;
  *(a1 - 154) = &unk_24C9CF780;
  *(a1 - 147) = &unk_24C9CF7A8;
  *(a1 - 140) = &unk_24C9CF7D0;
  *(a1 - 133) = &unk_24C9CF7F8;
  *(a1 - 126) = &unk_24C9CF820;
  *(a1 - 119) = &unk_24C9CF848;
  *(a1 - 112) = &unk_24C9CF870;
  *(a1 - 105) = &unk_24C9CF898;
  *(a1 - 98) = &unk_24C9CF8C0;
  *(a1 - 91) = &unk_24C9CF8E8;
  *(a1 - 84) = &unk_24C9CF910;
  *(a1 - 77) = &unk_24C9CF938;
  *(a1 - 70) = &unk_24C9CF960;
  *(a1 - 63) = &unk_24C9CF988;
  *(a1 - 56) = &unk_24C9CF9B0;
  *(a1 - 49) = &unk_24C9CF9D8;
  *(a1 - 42) = &unk_24C9CFA00;
  *(a1 - 35) = &unk_24C9CFA28;
  *(a1 - 28) = &unk_24C9CFA50;
  *(a1 - 21) = &unk_24C9CFA78;
  *(a1 - 14) = &unk_24C9CFAA0;
  *(a1 - 7) = &unk_24C9CFAC8;
  *a1 = &unk_24C9CFAF0;
  a1[7] = &unk_24C9CFB18;
  a1[14] = &unk_24C9CFB40;
  a1[21] = &unk_24C9CFB68;
  a1[28] = &unk_24C9CFB90;
  v2 = (std::__shared_weak_count *)a1[42];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  sub_20EC42B5C(v1);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20EC4B064(_QWORD *a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = (uint64_t)(a1 - 182);
  *(a1 - 182) = &off_24C9CF620;
  *(a1 - 175) = &unk_24C9CF730;
  *(a1 - 168) = &unk_24C9CF758;
  *(a1 - 161) = &unk_24C9CF780;
  *(a1 - 154) = &unk_24C9CF7A8;
  *(a1 - 147) = &unk_24C9CF7D0;
  *(a1 - 140) = &unk_24C9CF7F8;
  *(a1 - 133) = &unk_24C9CF820;
  *(a1 - 126) = &unk_24C9CF848;
  *(a1 - 119) = &unk_24C9CF870;
  *(a1 - 112) = &unk_24C9CF898;
  *(a1 - 105) = &unk_24C9CF8C0;
  *(a1 - 98) = &unk_24C9CF8E8;
  *(a1 - 91) = &unk_24C9CF910;
  *(a1 - 84) = &unk_24C9CF938;
  *(a1 - 77) = &unk_24C9CF960;
  *(a1 - 70) = &unk_24C9CF988;
  *(a1 - 63) = &unk_24C9CF9B0;
  *(a1 - 56) = &unk_24C9CF9D8;
  *(a1 - 49) = &unk_24C9CFA00;
  *(a1 - 42) = &unk_24C9CFA28;
  *(a1 - 35) = &unk_24C9CFA50;
  *(a1 - 28) = &unk_24C9CFA78;
  *(a1 - 21) = &unk_24C9CFAA0;
  *(a1 - 14) = &unk_24C9CFAC8;
  *(a1 - 7) = &unk_24C9CFAF0;
  *a1 = &unk_24C9CFB18;
  a1[7] = &unk_24C9CFB40;
  a1[14] = &unk_24C9CFB68;
  a1[21] = &unk_24C9CFB90;
  v2 = (std::__shared_weak_count *)a1[35];
  if (!v2)
    return sub_20EC42B5C((uint64_t)(a1 - 182));
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
    return sub_20EC42B5C((uint64_t)(a1 - 182));
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return sub_20EC42B5C(v1);
}

void sub_20EC4B214(_QWORD *a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = (uint64_t)(a1 - 182);
  *(a1 - 182) = &off_24C9CF620;
  *(a1 - 175) = &unk_24C9CF730;
  *(a1 - 168) = &unk_24C9CF758;
  *(a1 - 161) = &unk_24C9CF780;
  *(a1 - 154) = &unk_24C9CF7A8;
  *(a1 - 147) = &unk_24C9CF7D0;
  *(a1 - 140) = &unk_24C9CF7F8;
  *(a1 - 133) = &unk_24C9CF820;
  *(a1 - 126) = &unk_24C9CF848;
  *(a1 - 119) = &unk_24C9CF870;
  *(a1 - 112) = &unk_24C9CF898;
  *(a1 - 105) = &unk_24C9CF8C0;
  *(a1 - 98) = &unk_24C9CF8E8;
  *(a1 - 91) = &unk_24C9CF910;
  *(a1 - 84) = &unk_24C9CF938;
  *(a1 - 77) = &unk_24C9CF960;
  *(a1 - 70) = &unk_24C9CF988;
  *(a1 - 63) = &unk_24C9CF9B0;
  *(a1 - 56) = &unk_24C9CF9D8;
  *(a1 - 49) = &unk_24C9CFA00;
  *(a1 - 42) = &unk_24C9CFA28;
  *(a1 - 35) = &unk_24C9CFA50;
  *(a1 - 28) = &unk_24C9CFA78;
  *(a1 - 21) = &unk_24C9CFAA0;
  *(a1 - 14) = &unk_24C9CFAC8;
  *(a1 - 7) = &unk_24C9CFAF0;
  *a1 = &unk_24C9CFB18;
  a1[7] = &unk_24C9CFB40;
  a1[14] = &unk_24C9CFB68;
  a1[21] = &unk_24C9CFB90;
  v2 = (std::__shared_weak_count *)a1[35];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  sub_20EC42B5C(v1);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20EC4B3C8(_QWORD *a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = (uint64_t)(a1 - 189);
  *(a1 - 189) = &off_24C9CF620;
  *(a1 - 182) = &unk_24C9CF730;
  *(a1 - 175) = &unk_24C9CF758;
  *(a1 - 168) = &unk_24C9CF780;
  *(a1 - 161) = &unk_24C9CF7A8;
  *(a1 - 154) = &unk_24C9CF7D0;
  *(a1 - 147) = &unk_24C9CF7F8;
  *(a1 - 140) = &unk_24C9CF820;
  *(a1 - 133) = &unk_24C9CF848;
  *(a1 - 126) = &unk_24C9CF870;
  *(a1 - 119) = &unk_24C9CF898;
  *(a1 - 112) = &unk_24C9CF8C0;
  *(a1 - 105) = &unk_24C9CF8E8;
  *(a1 - 98) = &unk_24C9CF910;
  *(a1 - 91) = &unk_24C9CF938;
  *(a1 - 84) = &unk_24C9CF960;
  *(a1 - 77) = &unk_24C9CF988;
  *(a1 - 70) = &unk_24C9CF9B0;
  *(a1 - 63) = &unk_24C9CF9D8;
  *(a1 - 56) = &unk_24C9CFA00;
  *(a1 - 49) = &unk_24C9CFA28;
  *(a1 - 42) = &unk_24C9CFA50;
  *(a1 - 35) = &unk_24C9CFA78;
  *(a1 - 28) = &unk_24C9CFAA0;
  *(a1 - 21) = &unk_24C9CFAC8;
  *(a1 - 14) = &unk_24C9CFAF0;
  *(a1 - 7) = &unk_24C9CFB18;
  *a1 = &unk_24C9CFB40;
  a1[7] = &unk_24C9CFB68;
  a1[14] = &unk_24C9CFB90;
  v2 = (std::__shared_weak_count *)a1[28];
  if (!v2)
    return sub_20EC42B5C((uint64_t)(a1 - 189));
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
    return sub_20EC42B5C((uint64_t)(a1 - 189));
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return sub_20EC42B5C(v1);
}

void sub_20EC4B57C(_QWORD *a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = (uint64_t)(a1 - 189);
  *(a1 - 189) = &off_24C9CF620;
  *(a1 - 182) = &unk_24C9CF730;
  *(a1 - 175) = &unk_24C9CF758;
  *(a1 - 168) = &unk_24C9CF780;
  *(a1 - 161) = &unk_24C9CF7A8;
  *(a1 - 154) = &unk_24C9CF7D0;
  *(a1 - 147) = &unk_24C9CF7F8;
  *(a1 - 140) = &unk_24C9CF820;
  *(a1 - 133) = &unk_24C9CF848;
  *(a1 - 126) = &unk_24C9CF870;
  *(a1 - 119) = &unk_24C9CF898;
  *(a1 - 112) = &unk_24C9CF8C0;
  *(a1 - 105) = &unk_24C9CF8E8;
  *(a1 - 98) = &unk_24C9CF910;
  *(a1 - 91) = &unk_24C9CF938;
  *(a1 - 84) = &unk_24C9CF960;
  *(a1 - 77) = &unk_24C9CF988;
  *(a1 - 70) = &unk_24C9CF9B0;
  *(a1 - 63) = &unk_24C9CF9D8;
  *(a1 - 56) = &unk_24C9CFA00;
  *(a1 - 49) = &unk_24C9CFA28;
  *(a1 - 42) = &unk_24C9CFA50;
  *(a1 - 35) = &unk_24C9CFA78;
  *(a1 - 28) = &unk_24C9CFAA0;
  *(a1 - 21) = &unk_24C9CFAC8;
  *(a1 - 14) = &unk_24C9CFAF0;
  *(a1 - 7) = &unk_24C9CFB18;
  *a1 = &unk_24C9CFB40;
  a1[7] = &unk_24C9CFB68;
  a1[14] = &unk_24C9CFB90;
  v2 = (std::__shared_weak_count *)a1[28];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  sub_20EC42B5C(v1);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20EC4B734(_QWORD *a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = (uint64_t)(a1 - 196);
  *(a1 - 196) = &off_24C9CF620;
  *(a1 - 189) = &unk_24C9CF730;
  *(a1 - 182) = &unk_24C9CF758;
  *(a1 - 175) = &unk_24C9CF780;
  *(a1 - 168) = &unk_24C9CF7A8;
  *(a1 - 161) = &unk_24C9CF7D0;
  *(a1 - 154) = &unk_24C9CF7F8;
  *(a1 - 147) = &unk_24C9CF820;
  *(a1 - 140) = &unk_24C9CF848;
  *(a1 - 133) = &unk_24C9CF870;
  *(a1 - 126) = &unk_24C9CF898;
  *(a1 - 119) = &unk_24C9CF8C0;
  *(a1 - 112) = &unk_24C9CF8E8;
  *(a1 - 105) = &unk_24C9CF910;
  *(a1 - 98) = &unk_24C9CF938;
  *(a1 - 91) = &unk_24C9CF960;
  *(a1 - 84) = &unk_24C9CF988;
  *(a1 - 77) = &unk_24C9CF9B0;
  *(a1 - 70) = &unk_24C9CF9D8;
  *(a1 - 63) = &unk_24C9CFA00;
  *(a1 - 56) = &unk_24C9CFA28;
  *(a1 - 49) = &unk_24C9CFA50;
  *(a1 - 42) = &unk_24C9CFA78;
  *(a1 - 35) = &unk_24C9CFAA0;
  *(a1 - 28) = &unk_24C9CFAC8;
  *(a1 - 21) = &unk_24C9CFAF0;
  *(a1 - 14) = &unk_24C9CFB18;
  *(a1 - 7) = &unk_24C9CFB40;
  *a1 = &unk_24C9CFB68;
  a1[7] = &unk_24C9CFB90;
  v2 = (std::__shared_weak_count *)a1[21];
  if (!v2)
    return sub_20EC42B5C((uint64_t)(a1 - 196));
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
    return sub_20EC42B5C((uint64_t)(a1 - 196));
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return sub_20EC42B5C(v1);
}

void sub_20EC4B8EC(_QWORD *a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = (uint64_t)(a1 - 196);
  *(a1 - 196) = &off_24C9CF620;
  *(a1 - 189) = &unk_24C9CF730;
  *(a1 - 182) = &unk_24C9CF758;
  *(a1 - 175) = &unk_24C9CF780;
  *(a1 - 168) = &unk_24C9CF7A8;
  *(a1 - 161) = &unk_24C9CF7D0;
  *(a1 - 154) = &unk_24C9CF7F8;
  *(a1 - 147) = &unk_24C9CF820;
  *(a1 - 140) = &unk_24C9CF848;
  *(a1 - 133) = &unk_24C9CF870;
  *(a1 - 126) = &unk_24C9CF898;
  *(a1 - 119) = &unk_24C9CF8C0;
  *(a1 - 112) = &unk_24C9CF8E8;
  *(a1 - 105) = &unk_24C9CF910;
  *(a1 - 98) = &unk_24C9CF938;
  *(a1 - 91) = &unk_24C9CF960;
  *(a1 - 84) = &unk_24C9CF988;
  *(a1 - 77) = &unk_24C9CF9B0;
  *(a1 - 70) = &unk_24C9CF9D8;
  *(a1 - 63) = &unk_24C9CFA00;
  *(a1 - 56) = &unk_24C9CFA28;
  *(a1 - 49) = &unk_24C9CFA50;
  *(a1 - 42) = &unk_24C9CFA78;
  *(a1 - 35) = &unk_24C9CFAA0;
  *(a1 - 28) = &unk_24C9CFAC8;
  *(a1 - 21) = &unk_24C9CFAF0;
  *(a1 - 14) = &unk_24C9CFB18;
  *(a1 - 7) = &unk_24C9CFB40;
  *a1 = &unk_24C9CFB68;
  a1[7] = &unk_24C9CFB90;
  v2 = (std::__shared_weak_count *)a1[21];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  sub_20EC42B5C(v1);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20EC4BAA8(_QWORD *a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = (uint64_t)(a1 - 203);
  *(a1 - 203) = &off_24C9CF620;
  *(a1 - 196) = &unk_24C9CF730;
  *(a1 - 189) = &unk_24C9CF758;
  *(a1 - 182) = &unk_24C9CF780;
  *(a1 - 175) = &unk_24C9CF7A8;
  *(a1 - 168) = &unk_24C9CF7D0;
  *(a1 - 161) = &unk_24C9CF7F8;
  *(a1 - 154) = &unk_24C9CF820;
  *(a1 - 147) = &unk_24C9CF848;
  *(a1 - 140) = &unk_24C9CF870;
  *(a1 - 133) = &unk_24C9CF898;
  *(a1 - 126) = &unk_24C9CF8C0;
  *(a1 - 119) = &unk_24C9CF8E8;
  *(a1 - 112) = &unk_24C9CF910;
  *(a1 - 105) = &unk_24C9CF938;
  *(a1 - 98) = &unk_24C9CF960;
  *(a1 - 91) = &unk_24C9CF988;
  *(a1 - 84) = &unk_24C9CF9B0;
  *(a1 - 77) = &unk_24C9CF9D8;
  *(a1 - 70) = &unk_24C9CFA00;
  *(a1 - 63) = &unk_24C9CFA28;
  *(a1 - 56) = &unk_24C9CFA50;
  *(a1 - 49) = &unk_24C9CFA78;
  *(a1 - 42) = &unk_24C9CFAA0;
  *(a1 - 35) = &unk_24C9CFAC8;
  *(a1 - 28) = &unk_24C9CFAF0;
  *(a1 - 21) = &unk_24C9CFB18;
  *(a1 - 14) = &unk_24C9CFB40;
  *(a1 - 7) = &unk_24C9CFB68;
  *a1 = &unk_24C9CFB90;
  v2 = (std::__shared_weak_count *)a1[14];
  if (!v2)
    return sub_20EC42B5C((uint64_t)(a1 - 203));
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
    return sub_20EC42B5C((uint64_t)(a1 - 203));
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return sub_20EC42B5C(v1);
}

void sub_20EC4BC64(_QWORD *a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = (uint64_t)(a1 - 203);
  *(a1 - 203) = &off_24C9CF620;
  *(a1 - 196) = &unk_24C9CF730;
  *(a1 - 189) = &unk_24C9CF758;
  *(a1 - 182) = &unk_24C9CF780;
  *(a1 - 175) = &unk_24C9CF7A8;
  *(a1 - 168) = &unk_24C9CF7D0;
  *(a1 - 161) = &unk_24C9CF7F8;
  *(a1 - 154) = &unk_24C9CF820;
  *(a1 - 147) = &unk_24C9CF848;
  *(a1 - 140) = &unk_24C9CF870;
  *(a1 - 133) = &unk_24C9CF898;
  *(a1 - 126) = &unk_24C9CF8C0;
  *(a1 - 119) = &unk_24C9CF8E8;
  *(a1 - 112) = &unk_24C9CF910;
  *(a1 - 105) = &unk_24C9CF938;
  *(a1 - 98) = &unk_24C9CF960;
  *(a1 - 91) = &unk_24C9CF988;
  *(a1 - 84) = &unk_24C9CF9B0;
  *(a1 - 77) = &unk_24C9CF9D8;
  *(a1 - 70) = &unk_24C9CFA00;
  *(a1 - 63) = &unk_24C9CFA28;
  *(a1 - 56) = &unk_24C9CFA50;
  *(a1 - 49) = &unk_24C9CFA78;
  *(a1 - 42) = &unk_24C9CFAA0;
  *(a1 - 35) = &unk_24C9CFAC8;
  *(a1 - 28) = &unk_24C9CFAF0;
  *(a1 - 21) = &unk_24C9CFB18;
  *(a1 - 14) = &unk_24C9CFB40;
  *(a1 - 7) = &unk_24C9CFB68;
  *a1 = &unk_24C9CFB90;
  v2 = (std::__shared_weak_count *)a1[14];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  sub_20EC42B5C(v1);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20EC4C004(uint64_t a1, __int128 *a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;

  v4 = *a2;
  *(_QWORD *)(a1 + 16) = *((_QWORD *)a2 + 2);
  *(_OWORD *)a1 = v4;
  if (*((char *)a2 + 47) < 0)
  {
    sub_20E860C04((_BYTE *)(a1 + 24), *((void **)a2 + 3), *((_QWORD *)a2 + 4));
  }
  else
  {
    v5 = *(__int128 *)((char *)a2 + 24);
    *(_QWORD *)(a1 + 40) = *((_QWORD *)a2 + 5);
    *(_OWORD *)(a1 + 24) = v5;
  }
  *(_QWORD *)(a1 + 48) = *((_QWORD *)a2 + 6);
  v6 = *(__int128 *)((char *)a2 + 56);
  v7 = *(__int128 *)((char *)a2 + 72);
  v8 = *(__int128 *)((char *)a2 + 88);
  *(_OWORD *)(a1 + 104) = *(__int128 *)((char *)a2 + 104);
  *(_OWORD *)(a1 + 88) = v8;
  *(_OWORD *)(a1 + 72) = v7;
  *(_OWORD *)(a1 + 56) = v6;
  v9 = *(__int128 *)((char *)a2 + 120);
  v10 = *(__int128 *)((char *)a2 + 136);
  v11 = *(__int128 *)((char *)a2 + 152);
  *(_OWORD *)(a1 + 168) = *(__int128 *)((char *)a2 + 168);
  *(_OWORD *)(a1 + 152) = v11;
  *(_OWORD *)(a1 + 136) = v10;
  *(_OWORD *)(a1 + 120) = v9;
  v12 = *(__int128 *)((char *)a2 + 264);
  v13 = *(__int128 *)((char *)a2 + 280);
  v14 = *(__int128 *)((char *)a2 + 296);
  *(_OWORD *)(a1 + 248) = *(__int128 *)((char *)a2 + 248);
  *(_OWORD *)(a1 + 280) = v13;
  *(_OWORD *)(a1 + 296) = v14;
  *(_OWORD *)(a1 + 264) = v12;
  v15 = *(__int128 *)((char *)a2 + 184);
  v16 = *(__int128 *)((char *)a2 + 200);
  v17 = *(__int128 *)((char *)a2 + 216);
  *(_OWORD *)(a1 + 232) = *(__int128 *)((char *)a2 + 232);
  *(_OWORD *)(a1 + 216) = v17;
  *(_OWORD *)(a1 + 200) = v16;
  *(_OWORD *)(a1 + 184) = v15;
  v18 = *(__int128 *)((char *)a2 + 312);
  *(_QWORD *)(a1 + 328) = *((_QWORD *)a2 + 41);
  *(_OWORD *)(a1 + 312) = v18;
  *(_BYTE *)(a1 + 336) = 0;
  *(_BYTE *)(a1 + 360) = 0;
  if (*((_BYTE *)a2 + 360))
  {
    if (*((char *)a2 + 359) < 0)
    {
      sub_20E860C04((_BYTE *)(a1 + 336), *((void **)a2 + 42), *((_QWORD *)a2 + 43));
    }
    else
    {
      v19 = a2[21];
      *(_QWORD *)(a1 + 352) = *((_QWORD *)a2 + 44);
      *(_OWORD *)(a1 + 336) = v19;
    }
    *(_BYTE *)(a1 + 360) = 1;
  }
  return a1;
}

void sub_20EC4C158(_Unwind_Exception *exception_object)
{
  char *v1;
  void **v2;
  void **v3;

  if (v1[360] && v1[359] < 0)
    operator delete(*v3);
  if (v1[47] < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

void sub_20EC4C190()
{
  JUMPOUT(0x212BC6398);
}

__n128 sub_20EC4C1A4(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_24C9D0948;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_20EC4C1DC(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24C9D0948;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

_QWORD *sub_20EC4C1FC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD *result;
  _OWORD *v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  char v10;
  __int128 v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  char v16;

  result = (*(_QWORD *(**)(__int128 *__return_ptr, _QWORD, _QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 8) + 1728)
                                                                             + 16))(&v7, *(_QWORD *)(*(_QWORD *)(a1 + 8) + 1728), *(_QWORD *)(a1 + 16));
  if (v16)
  {
    v4 = operator new(0x98uLL);
    v5 = v8;
    *(_OWORD *)((char *)v4 + 24) = v7;
    *(_OWORD *)((char *)v4 + 40) = v5;
    *(_OWORD *)((char *)v4 + 56) = v9;
    v4[5] = v11;
    v6 = v14;
    *(_OWORD *)((char *)v4 + 104) = v13;
    *((_QWORD *)v4 + 1) = 0;
    *((_QWORD *)v4 + 2) = 0;
    *(_QWORD *)v4 = &off_24C9D09C8;
    v7 = 0uLL;
    v8 = 0uLL;
    v9 = 0uLL;
    *((_BYTE *)v4 + 72) = v10;
    *((_QWORD *)v4 + 12) = v12;
    v11 = 0uLL;
    v12 = 0;
    *(_QWORD *)&v13 = 0;
    *(_OWORD *)((char *)v4 + 120) = v6;
    *((_QWORD *)&v13 + 1) = 0;
    *(_QWORD *)&v14 = 0;
    *(_OWORD *)((char *)v4 + 136) = v15;
    v15 = 0uLL;
    *((_QWORD *)&v14 + 1) = 0;
    *(_QWORD *)a2 = (char *)v4 + 24;
    *(_QWORD *)(a2 + 8) = v4;
    *(_BYTE *)(a2 + 16) = 1;
    return sub_20E9C1D58(&v7);
  }
  else
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 16) = 0;
  }
  return result;
}

void sub_20EC4C2E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E9C1D58(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20EC4C2FC(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3vio22slam_engine_node_group20SlamEngineNodeWorkerclERKNS0_8cv_types15GyroMeasurementEE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4cv3d3vio22slam_engine_node_group20SlamEngineNodeWorkerclERKNS0_8cv_types15GyroMeasurementEE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3vio22slam_engine_node_group20SlamEngineNodeWorkerclERKNS0_8cv_types15GyroMeasurementEE3$_0"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3vio22slam_engine_node_group20SlamEngineNodeWorkerclERKNS0_8cv_types15GyroMeasurementEE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20EC4C368()
{
  return &unk_24C9D0A08;
}

void sub_20EC4C374(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9D09C8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_20EC4C384(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9D09C8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20EC4C3B4(uint64_t a1)
{
  return sub_20E9C1D58((_QWORD *)(a1 + 24));
}

void sub_20EC4C3C0(_QWORD *a1)
{
  unsigned __int8 v2;
  void *__p[2];
  char v4;
  uint64_t *v5;

  v2 = atomic_load((unsigned __int8 *)&qword_254A5D188);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254A5D188))
  {
    sub_21021D3D8(&v5);
    sub_20E8610C0(__p, "cv3d.vio");
    sub_20E8C4068(&v5, (uint64_t)__p, &qword_254A5D180);
    if (v4 < 0)
      operator delete(__p[0]);
    __cxa_guard_release(&qword_254A5D188);
  }
  *a1 = qword_254A5D180;
}

void sub_20EC4C45C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A5D188);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A5D188);
  _Unwind_Resume(a1);
}

uint64_t sub_20EC4C4B4(uint64_t a1, double *a2)
{
  uint64_t result;
  _DWORD v4[6];
  int v5;
  char v6;
  char *v7;

  v5 = 0;
  sub_20EAA5184(v4, "Engine failed to due to IMU and camera data push out sync at timestamp ");
  sub_20E87876C((uint64_t)&v7, (uint64_t)v4, a2);
  if (v5 == -1)
    sub_20E877AB8();
  v7 = &v6;
  result = ((uint64_t (*)(char **, _DWORD *))off_24C9D0A48[v5])(&v7, v4);
  if (v5 != -1)
    return ((uint64_t (*)(char **, _DWORD *))off_24C9D0A18[v5])(&v7, v4);
  return result;
}

void sub_20EC4C560(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E877A60((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20EC4C574(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E877A60((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20EC4C588(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E877A60((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20EC4C59C(uint64_t a1, const char *a2, double *a3)
{
  uint64_t result;
  _DWORD v6[6];
  int v7;
  _QWORD **v8;
  const char *v9;
  _DWORD *v10;
  const char *v11;
  const char *v12;
  _QWORD *v13;

  v7 = 0;
  sub_20E9B0FF4(v6, "Engine failed to process data sample ");
  if (*(_QWORD *)a2)
  {
    v8 = (_QWORD **)v6;
    v9 = a2;
    v10 = v6;
    v11 = a2;
    v12 = a2;
    if (v7 != -1)
    {
      v13 = &v8;
      ((void (*)(_QWORD **, _DWORD *))off_24C9D0A60[v7])(&v13, v6);
      goto LABEL_6;
    }
LABEL_11:
    sub_20E877AB8();
  }
  v8 = (_QWORD **)v6;
  v9 = "nullptr";
  v10 = v6;
  v11 = "nullptr";
  v12 = "nullptr";
  if (v7 == -1)
    goto LABEL_11;
  v13 = &v8;
  ((void (*)(_QWORD **, _DWORD *))off_24C9D0A30[v7])(&v13, v6);
LABEL_6:
  v8 = (_QWORD **)v6;
  v9 = " at timestamp ";
  v10 = v6;
  v11 = " at timestamp ";
  v12 = " at timestamp ";
  if (v7 == -1)
    sub_20E877AB8();
  v13 = &v8;
  ((void (*)(_QWORD **, _DWORD *))off_24C9D0A78[v7])(&v13, v6);
  sub_20E87876C((uint64_t)&v8, (uint64_t)v6, a3);
  if (v7 == -1)
    sub_20E877AB8();
  v8 = &v13;
  result = ((uint64_t (*)(_QWORD ***, _DWORD *))off_24C9D0A48[v7])(&v8, v6);
  if (v7 != -1)
    return ((uint64_t (*)(_QWORD ***, _DWORD *))off_24C9D0A18[v7])(&v8, v6);
  return result;
}

void sub_20EC4C734(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E877A60((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20EC4C748(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E877A60((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20EC4C75C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E877A60((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20EC4C770(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E877A60((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20EC4C784(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E877A60((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20EC4C798(std::string *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t *v3;
  _QWORD v4[4];
  uint64_t v5;

  v5 = *MEMORY[0x24BDAC8D0];
  v2 = *((unsigned __int8 *)a2 + 23);
  if ((v2 & 0x80u) == 0)
    v3 = a2;
  else
    v3 = (uint64_t *)*a2;
  if ((v2 & 0x80u) != 0)
    v2 = a2[1];
  v4[0] = v3;
  v4[1] = v2;
  v4[2] = ". Forcing reinitialization.";
  v4[3] = 27;
  sub_20E8778D4((uint64_t)v4, (uint64_t)&v5, 0, 0, a1);
}

void sub_20EC4C828(uint64_t a1, uint64_t *a2, os_log_t oslog, os_log_type_t type)
{
  size_t v7;
  std::__shared_weak_count_vtbl *v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  void *v24;
  __int128 v25;
  uint64_t v26;

  if (a1 && *(_QWORD *)(a1 + 8))
  {
    v7 = _os_log_pack_size();
    v8 = (std::__shared_weak_count_vtbl *)operator new(v7, (std::align_val_t)8uLL);
    v9 = (std::__shared_weak_count *)operator new();
    v10 = v9;
    v9->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    v9->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
    v9->__shared_weak_owners_ = 0;
    v9[1].__vftable = v8;
    *(_QWORD *)&v25 = v8;
    *((_QWORD *)&v25 + 1) = v9;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v10);
    }
    *(_WORD *)_os_log_pack_fill() = 0;
    v14 = operator new();
    v15 = *((unsigned __int8 *)a2 + 23);
    if ((v15 & 0x80u) == 0)
      v16 = a2;
    else
      v16 = (uint64_t *)*a2;
    if ((v15 & 0x80u) != 0)
      v15 = a2[1];
    *(_QWORD *)v14 = v8;
    *(_OWORD *)(v14 + 8) = v25;
    *(_OWORD *)(v14 + 24) = 0uLL;
    *(_QWORD *)(v14 + 40) = v16;
    *(_QWORD *)(v14 + 48) = v15;
    *(_BYTE *)(v14 + 56) = type;
    v26 = v14;
    (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8), &v26);
    v17 = v26;
    v26 = 0;
    if (v17)
    {
      v18 = *(std::__shared_weak_count **)(v17 + 32);
      if (v18)
      {
        v19 = (unint64_t *)&v18->__shared_owners_;
        do
          v20 = __ldaxr(v19);
        while (__stlxr(v20 - 1, v19));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
      v21 = *(std::__shared_weak_count **)(v17 + 16);
      if (v21)
      {
        v22 = (unint64_t *)&v21->__shared_owners_;
        do
          v23 = __ldaxr(v22);
        while (__stlxr(v23 - 1, v22));
        if (!v23)
        {
          ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
          std::__shared_weak_count::__release_weak(v21);
        }
      }
      MEMORY[0x212BC6398](v17, 0x10F0C40B62ED6C6);
    }
  }
  else
  {
    os_log_type_enabled(oslog, type);
    v24 = (void *)_os_log_send_and_compose_impl();
    if (v24)
      free(v24);
  }
}

void sub_20EC4CBB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  va_list va1;
  va_list va2;

  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v11 = va_arg(va2, _QWORD);
  sub_20E86E8C4((uint64_t *)va2);
  sub_20E86E8C4((uint64_t *)va1);
  sub_20E86E658((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20EC4CBDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E86E658((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20EC4CBF0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BC6398](v1, 0x10D0C40B950D02ALL);
  _Unwind_Resume(a1);
}

void sub_20EC4CC18()
{
  JUMPOUT(0x212BC6398);
}

__n128 sub_20EC4CC2C(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_24C9D0AA0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_20EC4CC64(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24C9D0AA0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

_QWORD *sub_20EC4CC84@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD *result;
  _OWORD *v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  char v10;
  __int128 v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  char v16;

  result = (*(_QWORD *(**)(__int128 *__return_ptr, _QWORD, _QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 8) + 1728)
                                                                             + 32))(&v7, *(_QWORD *)(*(_QWORD *)(a1 + 8) + 1728), *(_QWORD *)(a1 + 16));
  if (v16)
  {
    v4 = operator new(0x98uLL);
    v5 = v8;
    *(_OWORD *)((char *)v4 + 24) = v7;
    *(_OWORD *)((char *)v4 + 40) = v5;
    *(_OWORD *)((char *)v4 + 56) = v9;
    v4[5] = v11;
    v6 = v14;
    *(_OWORD *)((char *)v4 + 104) = v13;
    *((_QWORD *)v4 + 1) = 0;
    *((_QWORD *)v4 + 2) = 0;
    *(_QWORD *)v4 = &off_24C9D09C8;
    v7 = 0uLL;
    v8 = 0uLL;
    v9 = 0uLL;
    *((_BYTE *)v4 + 72) = v10;
    *((_QWORD *)v4 + 12) = v12;
    v11 = 0uLL;
    v12 = 0;
    *(_QWORD *)&v13 = 0;
    *(_OWORD *)((char *)v4 + 120) = v6;
    *((_QWORD *)&v13 + 1) = 0;
    *(_QWORD *)&v14 = 0;
    *(_OWORD *)((char *)v4 + 136) = v15;
    v15 = 0uLL;
    *((_QWORD *)&v14 + 1) = 0;
    *(_QWORD *)a2 = (char *)v4 + 24;
    *(_QWORD *)(a2 + 8) = v4;
    *(_BYTE *)(a2 + 16) = 1;
    return sub_20E9C1D58(&v7);
  }
  else
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 16) = 0;
  }
  return result;
}

void sub_20EC4CD70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E9C1D58(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20EC4CD84(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3vio22slam_engine_node_group20SlamEngineNodeWorkerclERKNS0_8cv_types24AccelerometerMeasurementEE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4cv3d3vio22slam_engine_node_group20SlamEngineNodeWorkerclERKNS0_8cv_types24Acceleromet"
                                "erMeasurementEE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3vio22slam_engine_node_group20SlamEngineNodeWorkerclERKNS0_8cv_types24AccelerometerMeasurementEE3$_0"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3vio22slam_engine_node_group20SlamEngineNodeWorkerclERKNS0_8cv_types24AccelerometerMeasurementEE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20EC4CDF0()
{
  return &unk_24C9D0B00;
}

void sub_20EC4CE00()
{
  JUMPOUT(0x212BC6398);
}

__n128 sub_20EC4CE14(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_24C9D0B20;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_20EC4CE4C(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24C9D0B20;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

_QWORD *sub_20EC4CE6C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t ***v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *result;
  _OWORD *v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  char v16;
  __int128 v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  char v22;

  v3 = *(uint64_t ****)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  v5 = **v3;
  v6 = (*v3)[1];
  if (v5 != v6)
  {
    v7 = *v5;
    v8 = v5[1];
    if (*v5 != v8)
      goto LABEL_5;
    while (1)
    {
      v5 += 3;
      if (v5 == v6)
        break;
      v7 = *v5;
      v8 = v5[1];
      if (*v5 != v8)
      {
        do
        {
LABEL_5:
          kdebug_trace();
          v7 += 712;
        }
        while (v7 != v8);
      }
    }
  }
  result = (*(_QWORD *(**)(__int128 *__return_ptr))(**(_QWORD **)(v4 + 1728) + 56))(&v13);
  if (v22)
  {
    v10 = operator new(0x98uLL);
    v11 = v14;
    *(_OWORD *)((char *)v10 + 24) = v13;
    *(_OWORD *)((char *)v10 + 40) = v11;
    *(_OWORD *)((char *)v10 + 56) = v15;
    v10[5] = v17;
    v12 = v20;
    *(_OWORD *)((char *)v10 + 104) = v19;
    *((_QWORD *)v10 + 1) = 0;
    *((_QWORD *)v10 + 2) = 0;
    *(_QWORD *)v10 = &off_24C9D09C8;
    v13 = 0uLL;
    v14 = 0uLL;
    v15 = 0uLL;
    *((_BYTE *)v10 + 72) = v16;
    *((_QWORD *)v10 + 12) = v18;
    v17 = 0uLL;
    v18 = 0;
    *(_QWORD *)&v19 = 0;
    *(_OWORD *)((char *)v10 + 120) = v12;
    *((_QWORD *)&v19 + 1) = 0;
    *(_QWORD *)&v20 = 0;
    *(_OWORD *)((char *)v10 + 136) = v21;
    v21 = 0uLL;
    *((_QWORD *)&v20 + 1) = 0;
    *(_QWORD *)a2 = (char *)v10 + 24;
    *(_QWORD *)(a2 + 8) = v10;
    *(_BYTE *)(a2 + 16) = 1;
    return sub_20E9C1D58(&v13);
  }
  else
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 16) = 0;
  }
  return result;
}

void sub_20EC4CFD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E9C1D58(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20EC4CFEC(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3vio22slam_engine_node_group20SlamEngineNodeWorkerclERKNSt3__18weak_ptrINS0_17feature_detect"
                     "ion24NodeCameraSystemFeaturesEEEE3$_1")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4cv3d3vio22slam_engine_node_group20SlamEngineNodeWorkerclERKNSt3__18weak_ptrINS0_17fea"
                                "ture_detection24NodeCameraSystemFeaturesEEEE3$_1" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3vio22slam_engine_node_group20SlamEngineNodeWorkerclERKNSt3__18weak_ptrINS0_17feature_detection24NodeCameraSystemFeaturesEEEE3$_1"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3vio22slam_engine_node_group20SlamEngineNodeWorkerclERKNSt3__18weak_ptrINS0_17feature_detection24NodeCameraSystemFeaturesEEEE3$_1" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20EC4D058()
{
  return &unk_24C9D0B80;
}

void sub_20EC4D068()
{
  JUMPOUT(0x212BC6398);
}

__n128 sub_20EC4D07C(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_24C9D0BA0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_20EC4D0B4(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24C9D0BA0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_20EC4D0D4(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 8) + 1728) + 120))(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 1728), **(_QWORD **)(a1 + 16));
}

uint64_t sub_20EC4D0EC(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3vio22slam_engine_node_group20SlamEngineNodeWorkerclERKNSt3__110shared_ptrINS3_6vectorINS0_1"
                     "7feature_detection22MLPointDescriptorStoreENS3_9allocatorIS7_EEEEEEE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4cv3d3vio22slam_engine_node_group20SlamEngineNodeWorkerclERKNSt3__110shared_ptrINS3_6v"
                                "ectorINS0_17feature_detection22MLPointDescriptorStoreENS3_9allocatorIS7_EEEEEEE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3vio22slam_engine_node_group20SlamEngineNodeWorkerclERKNSt3__110shared_ptrINS3_6vectorINS0_17feature_detection22MLPointDescriptorStoreENS3_9allocatorIS7_EEEEEEE3$_0"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3vio22slam_engine_node_group20SlamEngineNodeWorkerclERKNSt3__110shared_ptrINS3_6vectorINS0_17feature_detection22MLPointDescriptorStoreENS3_9allocatorIS7_EEEEEEE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20EC4D158()
{
  return &unk_24C9D0C00;
}

void sub_20EC4D164(uint64_t a1, uint64_t *a2, os_log_t oslog, os_log_type_t type)
{
  size_t v7;
  std::__shared_weak_count_vtbl *v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  void *v24;
  __int128 v25;
  uint64_t v26;

  if (a1 && *(_QWORD *)(a1 + 8))
  {
    v7 = _os_log_pack_size();
    v8 = (std::__shared_weak_count_vtbl *)operator new(v7, (std::align_val_t)8uLL);
    v9 = (std::__shared_weak_count *)operator new();
    v10 = v9;
    v9->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    v9->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
    v9->__shared_weak_owners_ = 0;
    v9[1].__vftable = v8;
    *(_QWORD *)&v25 = v8;
    *((_QWORD *)&v25 + 1) = v9;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v10);
    }
    *(_WORD *)_os_log_pack_fill() = 0;
    v14 = operator new();
    v15 = *((unsigned __int8 *)a2 + 23);
    if ((v15 & 0x80u) == 0)
      v16 = a2;
    else
      v16 = (uint64_t *)*a2;
    if ((v15 & 0x80u) != 0)
      v15 = a2[1];
    *(_QWORD *)v14 = v8;
    *(_OWORD *)(v14 + 8) = v25;
    *(_OWORD *)(v14 + 24) = 0uLL;
    *(_QWORD *)(v14 + 40) = v16;
    *(_QWORD *)(v14 + 48) = v15;
    *(_BYTE *)(v14 + 56) = type;
    v26 = v14;
    (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8), &v26);
    v17 = v26;
    v26 = 0;
    if (v17)
    {
      v18 = *(std::__shared_weak_count **)(v17 + 32);
      if (v18)
      {
        v19 = (unint64_t *)&v18->__shared_owners_;
        do
          v20 = __ldaxr(v19);
        while (__stlxr(v20 - 1, v19));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
      v21 = *(std::__shared_weak_count **)(v17 + 16);
      if (v21)
      {
        v22 = (unint64_t *)&v21->__shared_owners_;
        do
          v23 = __ldaxr(v22);
        while (__stlxr(v23 - 1, v22));
        if (!v23)
        {
          ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
          std::__shared_weak_count::__release_weak(v21);
        }
      }
      MEMORY[0x212BC6398](v17, 0x10F0C40B62ED6C6);
    }
  }
  else
  {
    os_log_type_enabled(oslog, type);
    v24 = (void *)_os_log_send_and_compose_impl();
    if (v24)
      free(v24);
  }
}

void sub_20EC4D4F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  va_list va1;
  va_list va2;

  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v11 = va_arg(va2, _QWORD);
  sub_20E86E8C4((uint64_t *)va2);
  sub_20E86E8C4((uint64_t *)va1);
  sub_20E86E658((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20EC4D518(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E86E658((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20EC4D52C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BC6398](v1, 0x10D0C40B950D02ALL);
  _Unwind_Resume(a1);
}

void sub_20EC4D554()
{
  JUMPOUT(0x212BC6398);
}

__n128 sub_20EC4D568(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_24C9D0C20;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_20EC4D5A0(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24C9D0C20;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_20EC4D5C0(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 8) + 1728) + 128))(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 1728), **(_QWORD **)(a1 + 16));
}

uint64_t sub_20EC4D5D8(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3vio22slam_engine_node_group20SlamEngineNodeWorkerclERKNSt3__110shared_ptrINS3_6vectorINS0_1"
                     "3SemanticFrameENS3_9allocatorIS6_EEEEEEE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4cv3d3vio22slam_engine_node_group20SlamEngineNodeWorkerclERKNSt3__110shared_ptrINS3_6v"
                                "ectorINS0_13SemanticFrameENS3_9allocatorIS6_EEEEEEE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3vio22slam_engine_node_group20SlamEngineNodeWorkerclERKNSt3__110shared_ptrINS3_6vectorINS0_13SemanticFrameENS3_9allocatorIS6_EEEEEEE3$_0"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3vio22slam_engine_node_group20SlamEngineNodeWorkerclERKNSt3__110shared_ptrINS3_6vectorINS0_13SemanticFrameENS3_9allocatorIS6_EEEEEEE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20EC4D644()
{
  return &unk_24C9D0C80;
}

void sub_20EC4D654()
{
  JUMPOUT(0x212BC6398);
}

__n128 sub_20EC4D668(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_24C9D0CA0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_20EC4D6A0(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24C9D0CA0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_20EC4D6C0(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 8) + 1728) + 136))(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 1728), **(_QWORD **)(a1 + 16));
}

uint64_t sub_20EC4D6D8(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3vio22slam_engine_node_group20SlamEngineNodeWorkerclERKNSt3__110shared_ptrINS3_6vectorINS0_1"
                     "5DenseDepthStoreENS3_9allocatorIS6_EEEEEEE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4cv3d3vio22slam_engine_node_group20SlamEngineNodeWorkerclERKNSt3__110shared_ptrINS3_6v"
                                "ectorINS0_15DenseDepthStoreENS3_9allocatorIS6_EEEEEEE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3vio22slam_engine_node_group20SlamEngineNodeWorkerclERKNSt3__110shared_ptrINS3_6vectorINS0_15DenseDepthStoreENS3_9allocatorIS6_EEEEEEE3$_0"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3vio22slam_engine_node_group20SlamEngineNodeWorkerclERKNSt3__110shared_ptrINS3_6vectorINS0_15DenseDepthStoreENS3_9allocatorIS6_EEEEEEE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20EC4D744()
{
  return &unk_24C9D0D00;
}

void sub_20EC4D754()
{
  JUMPOUT(0x212BC6398);
}

__n128 sub_20EC4D768(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_24C9D0D20;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_20EC4D7A0(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24C9D0D20;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_20EC4D7C0(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 8) + 1728) + 64))(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 1728), *(_QWORD *)(a1 + 16));
}

uint64_t sub_20EC4D7D4(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3vio22slam_engine_node_group20SlamEngineNodeWorkerclERKNSt3__16vectorINS3_10shared_ptrIKNS0_"
                     "8cv_types16JasperPointCloudEEENS3_9allocatorIS9_EEEEE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4cv3d3vio22slam_engine_node_group20SlamEngineNodeWorkerclERKNSt3__16vectorINS3_10share"
                                "d_ptrIKNS0_8cv_types16JasperPointCloudEEENS3_9allocatorIS9_EEEEE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3vio22slam_engine_node_group20SlamEngineNodeWorkerclERKNSt3__16vectorINS3_10shared_ptrIKNS0_8cv_types16JasperPointCloudEEENS3_9allocatorIS9_EEEEE3$_0"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3vio22slam_engine_node_group20SlamEngineNodeWorkerclERKNSt3__16vectorINS3_10shared_ptrIKNS0_8cv_types16JasperPointCloudEEENS3_9allocatorIS9_EEEEE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20EC4D840()
{
  return &unk_24C9D0D80;
}

void sub_20EC4D84C(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9D0DA0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_20EC4D85C(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9D0DA0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC6398);
}

void sub_20EC4D88C(uint64_t a1)
{
  _QWORD *v2;
  void *v3;
  _QWORD *v4;
  void *v5;
  void *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  void *v11;
  void *v12;
  _QWORD *v13;
  void *v14;
  _QWORD *v15;
  void *v16;

  v2 = *(_QWORD **)(a1 + 1392);
  if (v2)
  {
    do
    {
      v13 = (_QWORD *)*v2;
      v14 = (void *)v2[3];
      if (v14)
      {
        v2[4] = v14;
        operator delete(v14);
      }
      operator delete(v2);
      v2 = v13;
    }
    while (v13);
  }
  v3 = *(void **)(a1 + 1376);
  *(_QWORD *)(a1 + 1376) = 0;
  if (v3)
    operator delete(v3);
  v4 = *(_QWORD **)(a1 + 1352);
  if (v4)
  {
    do
    {
      v15 = (_QWORD *)*v4;
      v16 = (void *)v4[3];
      if (v16)
      {
        v4[4] = v16;
        operator delete(v16);
      }
      operator delete(v4);
      v4 = v15;
    }
    while (v15);
  }
  v5 = *(void **)(a1 + 1336);
  *(_QWORD *)(a1 + 1336) = 0;
  if (v5)
    operator delete(v5);
  sub_20E91E8B8((void **)(a1 + 1192));
  v6 = *(void **)(a1 + 1008);
  if (v6)
  {
    *(_QWORD *)(a1 + 1016) = v6;
    operator delete(v6);
  }
  v7 = *(void **)(a1 + 984);
  if (v7)
  {
    *(_QWORD *)(a1 + 992) = v7;
    operator delete(v7);
  }
  v8 = *(_QWORD *)(a1 + 960);
  if (v8)
  {
    v9 = *(_QWORD *)(a1 + 968);
    v10 = *(void **)(a1 + 960);
    if (v9 != v8)
    {
      do
        v9 = sub_20E991850(v9 - 280);
      while (v9 != v8);
      v10 = *(void **)(a1 + 960);
    }
    *(_QWORD *)(a1 + 968) = v8;
    operator delete(v10);
  }
  v11 = *(void **)(a1 + 936);
  if (v11)
  {
    *(_QWORD *)(a1 + 944) = v11;
    operator delete(v11);
  }
  v12 = *(void **)(a1 + 912);
  if (v12)
  {
    *(_QWORD *)(a1 + 920) = v12;
    operator delete(v12);
  }
  sub_20EAF9A2C(a1 + 568);
  sub_20EAFDDD0(a1 + 72);
  sub_20E990534(a1 + 48, *(_QWORD **)(a1 + 56));
  sub_20E9903D4(a1 + 24, *(_QWORD **)(a1 + 32));
}

uint64_t sub_20EC4D9DC(uint64_t a1)
{
  _QWORD *v2;

  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)a1 = a1 + 8;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = a1 + 32;
  *(_BYTE *)(a1 + 104) = 0;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_BYTE *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 200) = -1;
  v2 = operator new(0x68uLL);
  v2[1] = 0;
  v2[2] = 0;
  *v2 = &off_24C9D0DF0;
  v2[3] = 850045863;
  *((_OWORD *)v2 + 2) = 0u;
  *((_OWORD *)v2 + 3) = 0u;
  *((_OWORD *)v2 + 4) = 0u;
  v2[10] = 0;
  v2[11] = a1 + 160;
  *(_QWORD *)(a1 + 208) = v2 + 3;
  *(_QWORD *)(a1 + 216) = v2;
  *(_BYTE *)(a1 + 224) = 0;
  *(_BYTE *)(a1 + 536) = 0;
  *(_QWORD *)(a1 + 544) = 0;
  *(_QWORD *)(a1 + 568) = 0;
  *(_QWORD *)(a1 + 560) = 0;
  *(_QWORD *)(a1 + 552) = a1 + 560;
  *(_QWORD *)(a1 + 624) = 0;
  *(_OWORD *)(a1 + 592) = 0u;
  *(_OWORD *)(a1 + 608) = 0u;
  *(_OWORD *)(a1 + 576) = 0u;
  *(_WORD *)(a1 + 632) = 1;
  *(_DWORD *)(a1 + 636) = 0;
  *(_QWORD *)(a1 + 640) = -1;
  *(_QWORD *)(a1 + 800) = 0;
  *(_QWORD *)(a1 + 808) = 0;
  *(_OWORD *)(a1 + 648) = 0u;
  *(_OWORD *)(a1 + 664) = 0u;
  *(_OWORD *)(a1 + 680) = 0u;
  *(_OWORD *)(a1 + 696) = 0u;
  *(_OWORD *)(a1 + 712) = 0u;
  *(_OWORD *)(a1 + 728) = 0u;
  *(_OWORD *)(a1 + 744) = 0u;
  *(_OWORD *)(a1 + 760) = 0u;
  *(_OWORD *)(a1 + 776) = 0u;
  *(_QWORD *)(a1 + 792) = a1 + 800;
  *(_QWORD *)(a1 + 832) = 0;
  *(_QWORD *)(a1 + 824) = 0;
  *(_QWORD *)(a1 + 816) = a1 + 824;
  *(_BYTE *)(a1 + 840) = 0;
  *(_BYTE *)(a1 + 880) = 0;
  *(_BYTE *)(a1 + 1152) = 0;
  *(_BYTE *)(a1 + 1160) = 0;
  *(_OWORD *)(a1 + 888) = 0u;
  *(_OWORD *)(a1 + 904) = 0u;
  *(_OWORD *)(a1 + 920) = 0u;
  *(_OWORD *)(a1 + 936) = 0u;
  *(_OWORD *)(a1 + 952) = 0u;
  *(_OWORD *)(a1 + 968) = 0u;
  *(_OWORD *)(a1 + 984) = 0u;
  *(_OWORD *)(a1 + 993) = 0u;
  *(_DWORD *)(a1 + 1164) = -1;
  *(_OWORD *)(a1 + 1328) = 0u;
  *(_OWORD *)(a1 + 1312) = 0u;
  *(_OWORD *)(a1 + 1296) = 0u;
  *(_OWORD *)(a1 + 1280) = 0u;
  *(_OWORD *)(a1 + 1264) = 0u;
  *(_OWORD *)(a1 + 1248) = 0u;
  *(_OWORD *)(a1 + 1232) = 0u;
  *(_OWORD *)(a1 + 1216) = 0u;
  *(_OWORD *)(a1 + 1200) = 0u;
  *(_OWORD *)(a1 + 1184) = 0u;
  *(_OWORD *)(a1 + 1168) = 0u;
  *(_DWORD *)(a1 + 1344) = 1065353216;
  *(_OWORD *)(a1 + 1352) = 0u;
  *(_OWORD *)(a1 + 1368) = 0u;
  *(_DWORD *)(a1 + 1384) = 1065353216;
  return a1;
}

void sub_20EC4DB70(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20E9903D4(v1, 0);
  _Unwind_Resume(a1);
}

void sub_20EC4DB88(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9D0DF0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_20EC4DB98(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9D0DF0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC6398);
}

void sub_20EC4DBC8(uint64_t a1)
{
  std::mutex::~mutex((std::mutex *)(a1 + 24));
}

void sub_20EC4DBD4(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9D0E40;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_20EC4DBE4(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9D0E40;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC6398);
}

void sub_20EC4DC14(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 24);
  if (v2)
  {
    *(_QWORD *)(a1 + 32) = v2;
    operator delete(v2);
  }
}

void sub_20EC4DC34(std::runtime_error *a1)
{
  std::runtime_error::~runtime_error(a1);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20EC4DC58(uint64_t a1, __int128 *a2, uint64_t a3, __int16 a4, uint64_t a5)
{
  char *v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  __int128 v16;

  *(_OWORD *)(a1 + 8) = 0u;
  v10 = (char *)(a1 + 8);
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_QWORD *)a1 = off_24C9D0ED0;
  v11 = operator new();
  v16 = *a2;
  *(_QWORD *)a2 = 0;
  *((_QWORD *)a2 + 1) = 0;
  sub_20EC78028(v11, &v16, a3, a4, a5);
  v12 = (std::__shared_weak_count *)*((_QWORD *)&v16 + 1);
  if (*((_QWORD *)&v16 + 1))
  {
    v13 = (unint64_t *)(*((_QWORD *)&v16 + 1) + 8);
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
      *(_QWORD *)(a1 + 56) = v11;
      *(_QWORD *)(a1 + 64) = sub_20ED27E94;
      if ((*(char *)(a1 + 31) & 0x80000000) == 0)
        goto LABEL_6;
LABEL_8:
      *(_QWORD *)(a1 + 16) = 19;
      v10 = *(char **)(a1 + 8);
      goto LABEL_9;
    }
  }
  *(_QWORD *)(a1 + 56) = v11;
  *(_QWORD *)(a1 + 64) = sub_20ED27E94;
  if (*(char *)(a1 + 31) < 0)
    goto LABEL_8;
LABEL_6:
  *(_BYTE *)(a1 + 31) = 19;
LABEL_9:
  strcpy(v10, "SlamEngineNodeGroup");
  sub_20E8B43E8((std::string *)(a1 + 32), "Node group to run LocalSlamEngine", 0x21uLL);
  return a1;
}

void sub_20EC4DDB0(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(_QWORD *)(v1 + 56);
  *(_QWORD *)(v1 + 56) = 0;
  if (v3)
    (*(void (**)(void))(v1 + 64))();
  sub_20EBC904C(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20EC4DE18@<X0>(uint64_t a1@<X0>, char a2@<W1>, _OWORD *a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t result;
  unint64_t *v9;
  unint64_t v10;
  char v11;
  uint64_t v12;

  v4 = *(_QWORD *)(a1 + 96);
  v11 = a2;
  sub_20EC51778((uint64_t *)(v4 + 1952), (uint64_t)&v11, &v12);
  v5 = v12;
  v12 = 0;
  sub_20EC51CA0(v5, a3);
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 16))(v5);
  }
  result = v12;
  if (v12)
  {
    v9 = (unint64_t *)(v12 + 8);
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 16))(result);
  }
  return result;
}

void sub_20EC4DED0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, unint64_t *a10)
{
  unint64_t *v10;
  unint64_t *v12;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;

  if (v10)
  {
    v12 = v10 + 1;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
      (*(void (**)(unint64_t *))(*v10 + 16))(v10);
  }
  if (a10)
  {
    v14 = a10 + 1;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
      (*(void (**)(unint64_t *))(*a10 + 16))(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20EC4DF34(uint64_t a1, uint64_t a2)
{
  std::__assoc_sub_state *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  std::__assoc_sub_state *v11;

  sub_20EC52A8C((uint64_t *)(*(_QWORD *)(a1 + 96) + 4472), a2, (uint64_t *)&v11);
  v2 = v11;
  v11 = 0;
  sub_20EBF0DB8(v2);
  v4 = v3;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
      ((void (*)(std::__assoc_sub_state *))v2->__on_zero_shared)(v2);
  }
  v7 = (uint64_t)v11;
  if (!v11)
    return v4;
  v8 = (unint64_t *)&v11->__shared_owners_;
  do
    v9 = __ldaxr(v8);
  while (__stlxr(v9 - 1, v8));
  if (v9)
    return v4;
  (*(void (**)(uint64_t))(*(_QWORD *)v7 + 16))(v7);
  return v4;
}

void sub_20EC4DFEC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, unint64_t *a10)
{
  unint64_t *v10;
  unint64_t *v12;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;

  if (v10)
  {
    v12 = v10 + 1;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
      (*(void (**)(unint64_t *))(*v10 + 16))(v10);
  }
  if (a10)
  {
    v14 = a10 + 1;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
      (*(void (**)(unint64_t *))(*a10 + 16))(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20EC4E050@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  return sub_20EC4E05C(a2, *(_QWORD *)(a1 + 56));
}

uint64_t sub_20EC4E05C(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  _BOOL4 v5;
  void **v6;
  void **v7;
  void **v8;
  void **v9;
  void **v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  unsigned __int8 v14;
  uint64_t v15;
  __int128 *p_dst;
  char *v17;
  __int128 *v18;
  char *v19;
  __int128 v20;
  char *v21;
  void *v22;
  __int128 v23;
  uint64_t v24;
  __int128 v25;
  uint64_t *v26;
  __int128 v27;
  uint64_t v28;
  void **v29;
  char *v30;
  void **v31;
  char *v32;
  int v35;
  size_t v36;
  unint64_t v37;
  __int128 *v38;
  uint64_t v39;
  uint64_t v40;
  __int128 *p_p;
  char *v42;
  void *v43;
  __int128 v44;
  uint64_t v45;
  __int128 v46;
  std::__shared_weak_count *v47;
  std::__shared_weak_count *v48;
  std::__shared_weak_count *v49;
  void *v50;
  void **v51;
  unint64_t *p_shared_owners;
  unint64_t v53;
  void **v54;
  __int128 v55;
  char *v56;
  std::__shared_weak_count *v57;
  std::__shared_weak_count *v58;
  std::__shared_weak_count *v59;
  void *v60;
  void **v61;
  unint64_t *v62;
  unint64_t v63;
  void **v64;
  void *v65;
  __int128 v66;
  char *v67;
  _BOOL4 v68;
  char *v69;
  char *v70;
  char *v71;
  char *v72;
  void *v73;
  uint64_t v74;
  __int128 v75;
  uint64_t v76;
  uint64_t *v77;
  __int128 v78;
  uint64_t v79;
  __int128 *v80;
  char *v81;
  __int128 *v82;
  char *v83;
  __int128 v84;
  char *v85;
  void *v86;
  __int128 v87;
  uint64_t v88;
  __int128 v89;
  uint64_t *v90;
  __int128 v91;
  uint64_t v92;
  void **v93;
  char *v94;
  void **v95;
  char *v96;
  int v99;
  size_t v100;
  unint64_t v101;
  __int128 *v102;
  uint64_t v103;
  uint64_t v104;
  __int128 *v105;
  char *v106;
  void *v107;
  __int128 v108;
  uint64_t v109;
  __int128 v110;
  std::__shared_weak_count *v111;
  std::__shared_weak_count *v112;
  std::__shared_weak_count *v113;
  void *v114;
  void **v115;
  unint64_t *v116;
  unint64_t v117;
  void **v118;
  __int128 v119;
  char *v120;
  std::__shared_weak_count *v121;
  std::__shared_weak_count *v122;
  std::__shared_weak_count *v123;
  void *v124;
  void **v125;
  unint64_t *v126;
  unint64_t v127;
  void **v128;
  __int128 v129;
  char *v130;
  _BOOL4 v131;
  char *v132;
  char *v133;
  char *v134;
  char *v135;
  void *v136;
  uint64_t v137;
  __int128 v138;
  uint64_t v139;
  unsigned __int8 v140;
  uint64_t v141;
  __int128 *v142;
  char *v143;
  __int128 *v144;
  char *v145;
  __int128 v146;
  char *v147;
  void *v148;
  __int128 v149;
  uint64_t v150;
  __int128 v151;
  uint64_t *v152;
  __int128 v153;
  uint64_t v154;
  void **v155;
  char *v156;
  void **v157;
  char *v158;
  int v161;
  size_t v162;
  unint64_t v163;
  __int128 *v164;
  uint64_t v165;
  uint64_t v166;
  __int128 *v167;
  char *v168;
  void *v169;
  __int128 v170;
  uint64_t v171;
  __int128 v172;
  std::__shared_weak_count *v173;
  std::__shared_weak_count *v174;
  std::__shared_weak_count *v175;
  void *v176;
  void **v177;
  unint64_t *v178;
  unint64_t v179;
  void **v180;
  __int128 v181;
  char *v182;
  std::__shared_weak_count *v183;
  std::__shared_weak_count *v184;
  std::__shared_weak_count *v185;
  void *v186;
  void **v187;
  unint64_t *v188;
  unint64_t v189;
  void **v190;
  void *v191;
  __int128 v192;
  char *v193;
  uint64_t v194;
  uint64_t *v195;
  __int128 v196;
  uint64_t v197;
  __int128 *v198;
  char *v199;
  __int128 *v200;
  char *v201;
  char *v202;
  void *v203;
  __int128 v204;
  uint64_t v205;
  __int128 v206;
  uint64_t *v207;
  __int128 v208;
  uint64_t v209;
  void **v210;
  char *v211;
  void **v212;
  char *v213;
  int v216;
  size_t v217;
  unint64_t v218;
  __int128 *v219;
  uint64_t v220;
  uint64_t v221;
  __int128 *v222;
  char *v223;
  void *v224;
  __int128 v225;
  uint64_t v226;
  __int128 v227;
  std::__shared_weak_count *v228;
  std::__shared_weak_count *v229;
  std::__shared_weak_count *v230;
  void *v231;
  void **v232;
  unint64_t *v233;
  unint64_t v234;
  void **v235;
  __int128 v236;
  char *v237;
  std::__shared_weak_count *v238;
  std::__shared_weak_count *v239;
  std::__shared_weak_count *v240;
  void *v241;
  void **v242;
  unint64_t *v243;
  unint64_t v244;
  void **v245;
  __int128 v246;
  char *v247;
  _BOOL4 v248;
  char *v249;
  char *v250;
  char *v251;
  char *v252;
  void *v253;
  __int128 v255;
  __int128 v256;
  __int128 v257;
  int v258;
  size_t v259;
  unint64_t v260;
  __int128 *v261;
  int v262;
  size_t v263;
  unint64_t v264;
  __int128 *v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t *v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t *v271;
  _QWORD *v272;
  void *v273;
  char *v274;
  unint64_t v275;
  void *v276;
  char *v277;
  unint64_t v278;
  void **v279;
  void **v280;
  uint64_t v281;
  void *v282[2];
  uint64_t v283;
  void *v284[2];
  __int128 v285;
  unint64_t v286;
  __int128 v287;
  _BYTE v288[24];
  uint64_t v289;
  __int128 __dst;
  uint64_t v291;
  __int128 __p;
  int64_t v293;
  _BYTE v294[128];
  _BYTE v295[128];
  _BYTE v296[128];
  _BYTE v297[128];
  _QWORD v298[19];

  v298[16] = *MEMORY[0x24BDAC8D0];
  v284[0] = 0;
  v284[1] = 0;
  *(_QWORD *)&v285 = 0;
  __p = 0uLL;
  v293 = 0;
  v4 = *(_QWORD *)(a2 + 96);
  if (!v4)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/Node.h", 220, (uint64_t)"channels_", 9, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v4 = *(_QWORD *)(a2 + 96);
  }
  *(_QWORD *)&__dst = v284;
  *((_QWORD *)&__dst + 1) = &__p;
  sub_20EC572F8(v4, &__dst);
  if (*(char *)(a2 + 55) < 0)
  {
    sub_20E860C04(&__dst, *(void **)(a2 + 32), *(_QWORD *)(a2 + 40));
  }
  else
  {
    __dst = *(_OWORD *)(a2 + 32);
    v291 = *(_QWORD *)(a2 + 48);
  }
  v272 = a1;
  v5 = *(_QWORD *)(a2 + 80) != 0;
  if (*(char *)(a2 + 79) < 0)
  {
    sub_20E860C04(v282, *(void **)(a2 + 56), *(_QWORD *)(a2 + 64));
  }
  else
  {
    *(_OWORD *)v282 = *(_OWORD *)(a2 + 56);
    v283 = *(_QWORD *)(a2 + 72);
  }
  sub_20EBA690C((uint64_t)v294, &__dst, v5, (uint64_t *)v284, (uint64_t *)&__p, (__int128 *)v282);
  if (SHIBYTE(v283) < 0)
  {
    operator delete(v282[0]);
    if ((SHIBYTE(v291) & 0x80000000) == 0)
    {
LABEL_12:
      v6 = (void **)__p;
      if ((_QWORD)__p)
        goto LABEL_13;
LABEL_23:
      v8 = (void **)v284[0];
      if (!v284[0])
        goto LABEL_36;
      goto LABEL_24;
    }
  }
  else if ((SHIBYTE(v291) & 0x80000000) == 0)
  {
    goto LABEL_12;
  }
  operator delete((void *)__dst);
  v6 = (void **)__p;
  if (!(_QWORD)__p)
    goto LABEL_23;
LABEL_13:
  v7 = (void **)*((_QWORD *)&__p + 1);
  if (*((void ***)&__p + 1) == v6)
  {
    *((_QWORD *)&__p + 1) = v6;
    operator delete(v6);
    v8 = (void **)v284[0];
    if (!v284[0])
      goto LABEL_36;
    goto LABEL_24;
  }
  do
  {
    if (*((char *)v7 - 1) < 0)
      operator delete(*(v7 - 3));
    v7 -= 5;
  }
  while (v7 != v6);
  *((_QWORD *)&__p + 1) = v6;
  operator delete((void *)__p);
  v8 = (void **)v284[0];
  if (v284[0])
  {
LABEL_24:
    v9 = (void **)v284[1];
    v10 = v8;
    if (v284[1] == v8)
    {
LABEL_35:
      v284[1] = v8;
      operator delete(v10);
      goto LABEL_36;
    }
    while (1)
    {
      while (*((char *)v9 - 1) < 0)
      {
        operator delete(*(v9 - 3));
        if (*((char *)v9 - 25) < 0)
          goto LABEL_26;
LABEL_32:
        if ((*((char *)v9 - 49) & 0x80000000) == 0)
          goto LABEL_27;
LABEL_33:
        operator delete(*(v9 - 9));
        v9 -= 11;
        if (v9 == v8)
        {
LABEL_34:
          v10 = (void **)v284[0];
          goto LABEL_35;
        }
      }
      if ((*((char *)v9 - 25) & 0x80000000) == 0)
        goto LABEL_32;
LABEL_26:
      operator delete(*(v9 - 6));
      if (*((char *)v9 - 49) < 0)
        goto LABEL_33;
LABEL_27:
      v9 -= 11;
      if (v9 == v8)
        goto LABEL_34;
    }
  }
LABEL_36:
  sub_20EC52D60((uint64_t)v295, a2 + 104);
  v273 = 0;
  v276 = 0;
  v277 = 0;
  v278 = 0;
  v274 = 0;
  v275 = 0;
  v11 = *(_QWORD *)(a2 + 256);
  if (!v11)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/Node.h", 220, (uint64_t)"channels_", 9, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v11 = *(_QWORD *)(a2 + 256);
    if ((*(char *)(v11 + 31) & 0x80000000) == 0)
      goto LABEL_38;
LABEL_41:
    sub_20E860C04(&__p, *(void **)(v11 + 8), *(_QWORD *)(v11 + 16));
    goto LABEL_42;
  }
  if (*(char *)(v11 + 31) < 0)
    goto LABEL_41;
LABEL_38:
  v12 = *(_OWORD *)(v11 + 8);
  v293 = *(_QWORD *)(v11 + 24);
  __p = v12;
LABEL_42:
  v13 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v11 + 96) + 48))(*(_QWORD *)(v11 + 96));
  v14 = atomic_load((unsigned __int8 *)&qword_254A5D818);
  if ((v14 & 1) != 0 || !__cxa_guard_acquire(&qword_254A5D818))
    goto LABEL_43;
  sub_20EC76C60();
  v258 = byte_254A5ECC7;
  if (byte_254A5ECC7 >= 0)
    v259 = byte_254A5ECC7;
  else
    v259 = qword_254A5ECB8;
  v260 = v259 + 1;
  if (v259 + 1 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v260 >= 0x17)
  {
    v266 = (v260 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v260 | 7) != 0x17)
      v266 = v260 | 7;
    v267 = v266 + 1;
    v261 = (__int128 *)operator new(v266 + 1);
    *((_QWORD *)&xmmword_254A5EC98 + 1) = v259 + 1;
    unk_254A5ECA8 = v267 | 0x8000000000000000;
    *(_QWORD *)&xmmword_254A5EC98 = v261;
    goto LABEL_723;
  }
  v261 = &xmmword_254A5EC98;
  unk_254A5ECA8 = 0;
  xmmword_254A5EC98 = 0uLL;
  byte_254A5ECAF = v259 + 1;
  if (v259)
  {
LABEL_723:
    if (v258 >= 0)
      v268 = &qword_254A5ECB0;
    else
      v268 = (uint64_t *)qword_254A5ECB0;
    memmove(v261, v268, v259);
  }
  *(_WORD *)((char *)v261 + v259) = 38;
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A5EC98, &dword_20E81F000);
  __cxa_guard_release(&qword_254A5D818);
LABEL_43:
  if (byte_254A5ECAF < 0)
  {
    sub_20E860C04(&__dst, (void *)xmmword_254A5EC98, *((unint64_t *)&xmmword_254A5EC98 + 1));
  }
  else
  {
    __dst = xmmword_254A5EC98;
    v291 = unk_254A5ECA8;
  }
  v15 = HIBYTE(v291);
  if (v291 >= 0)
  {
    p_dst = &__dst;
  }
  else
  {
    v15 = *((_QWORD *)&__dst + 1);
    p_dst = (__int128 *)__dst;
  }
  if (v15 >= 4)
  {
    v17 = (char *)p_dst + v15;
    v18 = p_dst;
    do
    {
      v19 = (char *)memchr(v18, 118, v15 - 3);
      if (!v19)
        break;
      if (*(_DWORD *)v19 == 1684631414)
      {
        if (v19 == v17 || v19 - (char *)p_dst == -1)
          break;
        v284[0] = (void *)v13;
        LODWORD(v284[1]) = 4;
        if (SHIBYTE(v293) < 0)
        {
          sub_20E860C04(&v285, (void *)__p, *((unint64_t *)&__p + 1));
        }
        else
        {
          v285 = __p;
          v286 = v293;
        }
        if (*(char *)(v11 + 55) < 0)
        {
          sub_20E860C04(&v287, *(void **)(v11 + 32), *(_QWORD *)(v11 + 40));
        }
        else
        {
          v255 = *(_OWORD *)(v11 + 32);
          *(_QWORD *)v288 = *(_QWORD *)(v11 + 48);
          v287 = v255;
        }
        sub_20EC77150();
        if (byte_254A5ED57 < 0)
        {
          sub_20E860C04(&v288[8], (void *)xmmword_254A5ED40, *((unint64_t *)&xmmword_254A5ED40 + 1));
        }
        else
        {
          *(_OWORD *)&v288[8] = xmmword_254A5ED40;
          v289 = unk_254A5ED50;
        }
        v21 = v277;
        if ((unint64_t)v277 < v278)
          goto LABEL_69;
        goto LABEL_72;
      }
      v18 = (__int128 *)(v19 + 1);
      v15 = v17 - (char *)v18;
    }
    while (v17 - (char *)v18 >= 4);
  }
  v284[0] = (void *)v13;
  LODWORD(v284[1]) = 2;
  if (SHIBYTE(v293) < 0)
  {
    sub_20E860C04(&v285, (void *)__p, *((unint64_t *)&__p + 1));
  }
  else
  {
    v285 = __p;
    v286 = v293;
  }
  if (*(char *)(v11 + 55) < 0)
  {
    sub_20E860C04(&v287, *(void **)(v11 + 32), *(_QWORD *)(v11 + 40));
  }
  else
  {
    v20 = *(_OWORD *)(v11 + 32);
    *(_QWORD *)v288 = *(_QWORD *)(v11 + 48);
    v287 = v20;
  }
  sub_20EC77150();
  if (byte_254A5ED57 < 0)
  {
    sub_20E860C04(&v288[8], (void *)xmmword_254A5ED40, *((unint64_t *)&xmmword_254A5ED40 + 1));
  }
  else
  {
    *(_OWORD *)&v288[8] = xmmword_254A5ED40;
    v289 = unk_254A5ED50;
  }
  v21 = v277;
  if ((unint64_t)v277 >= v278)
  {
LABEL_72:
    v277 = sub_20EBA558C((char **)&v276, (uint64_t)v284);
    if (SHIBYTE(v289) < 0)
    {
      operator delete(*(void **)&v288[8]);
      if ((v288[7] & 0x80000000) == 0)
        goto LABEL_74;
    }
    else if ((v288[7] & 0x80000000) == 0)
    {
      goto LABEL_74;
    }
LABEL_70:
    operator delete((void *)v287);
    if ((SHIBYTE(v286) & 0x80000000) == 0)
      goto LABEL_75;
    goto LABEL_71;
  }
LABEL_69:
  v22 = v284[0];
  *((_DWORD *)v21 + 2) = v284[1];
  *(_QWORD *)v21 = v22;
  v23 = v285;
  *((_QWORD *)v21 + 4) = v286;
  *((_OWORD *)v21 + 1) = v23;
  v286 = 0;
  v285 = 0uLL;
  v24 = *(_QWORD *)v288;
  *(_OWORD *)(v21 + 40) = v287;
  *((_QWORD *)v21 + 7) = v24;
  *(_QWORD *)v288 = 0;
  v287 = 0uLL;
  v25 = *(_OWORD *)&v288[8];
  *((_QWORD *)v21 + 10) = v289;
  *((_OWORD *)v21 + 4) = v25;
  *(_QWORD *)&v288[8] = 0;
  *(_QWORD *)&v288[16] = 0;
  v289 = 0;
  v277 = v21 + 88;
  if ((v288[7] & 0x80000000) != 0)
    goto LABEL_70;
LABEL_74:
  if (SHIBYTE(v286) < 0)
LABEL_71:
    operator delete((void *)v285);
LABEL_75:
  v26 = sub_20EBA4AA4();
  if (*((char *)v26 + 23) < 0)
  {
    sub_20E860C04(v282, (void *)*v26, v26[1]);
  }
  else
  {
    v27 = *(_OWORD *)v26;
    v283 = v26[2];
    *(_OWORD *)v282 = v27;
  }
  v28 = HIBYTE(v283);
  if (v283 >= 0)
  {
    v29 = v282;
  }
  else
  {
    v28 = (uint64_t)v282[1];
    v29 = (void **)v282[0];
  }
  if (v28 >= 18)
  {
    v30 = (char *)v29 + v28;
    v31 = v29;
    do
    {
      v32 = (char *)memchr(v31, 67, v28 - 17);
      if (!v32)
        break;
      if (*(_QWORD *)v32 == 0x456C656E6E616843
        && *((_QWORD *)v32 + 1) == 0x696F763C726F7272
        && *((_WORD *)v32 + 8) == 15972)
      {
        if (v32 != v30 && v32 - (char *)v29 != -1)
          goto LABEL_119;
        break;
      }
      v31 = (void **)(v32 + 1);
      v28 = v30 - (char *)v31;
    }
    while (v30 - (char *)v31 >= 18);
  }
  v284[0] = (void *)(v13 + 1);
  LODWORD(v284[1]) = 3;
  v35 = SHIBYTE(v293);
  if (v293 >= 0)
    v36 = HIBYTE(v293);
  else
    v36 = *((_QWORD *)&__p + 1);
  v37 = v36 + 6;
  if (v36 + 6 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v37 >= 0x17)
  {
    v39 = (v37 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v37 | 7) != 0x17)
      v39 = v37 | 7;
    v40 = v39 + 1;
    v38 = (__int128 *)operator new(v39 + 1);
    *((_QWORD *)&v285 + 1) = v36 + 6;
    v286 = v40 | 0x8000000000000000;
    *(_QWORD *)&v285 = v38;
  }
  else
  {
    v286 = 0;
    v285 = 0uLL;
    v38 = &v285;
    HIBYTE(v286) = v36 + 6;
    if (!v36)
      goto LABEL_111;
  }
  if (v35 >= 0)
    p_p = &__p;
  else
    p_p = (__int128 *)__p;
  memmove(v38, p_p, v36);
LABEL_111:
  strcpy((char *)v38 + v36, ".Error");
  *(_WORD *)&v288[7] = 0;
  LOBYTE(v287) = 0;
  HIBYTE(v289) = 0;
  v42 = v277;
  if ((unint64_t)v277 >= v278)
  {
    v277 = sub_20EBA558C((char **)&v276, (uint64_t)v284);
    if (SHIBYTE(v289) < 0)
    {
      operator delete(*(void **)&v288[8]);
      if ((v288[7] & 0x80000000) == 0)
        goto LABEL_118;
    }
    else if ((v288[7] & 0x80000000) == 0)
    {
      goto LABEL_118;
    }
LABEL_113:
    operator delete((void *)v287);
    if (SHIBYTE(v286) < 0)
      goto LABEL_114;
    goto LABEL_119;
  }
  v43 = v284[0];
  *((_DWORD *)v277 + 2) = v284[1];
  *(_QWORD *)v42 = v43;
  v44 = v285;
  *((_QWORD *)v42 + 4) = v286;
  *((_OWORD *)v42 + 1) = v44;
  v286 = 0;
  v285 = 0uLL;
  v45 = *(_QWORD *)v288;
  *(_OWORD *)(v42 + 40) = v287;
  *((_QWORD *)v42 + 7) = v45;
  *(_QWORD *)v288 = 0;
  v287 = 0uLL;
  v46 = *(_OWORD *)&v288[8];
  *((_QWORD *)v42 + 10) = v289;
  *((_OWORD *)v42 + 4) = v46;
  *(_QWORD *)&v288[8] = 0;
  *(_QWORD *)&v288[16] = 0;
  v289 = 0;
  v277 = v42 + 88;
  if ((v288[7] & 0x80000000) != 0)
    goto LABEL_113;
LABEL_118:
  if (SHIBYTE(v286) < 0)
  {
LABEL_114:
    operator delete((void *)v285);
    v47 = *(std::__shared_weak_count **)(v11 + 136);
    if (!v47)
      goto LABEL_123;
    goto LABEL_120;
  }
LABEL_119:
  v47 = *(std::__shared_weak_count **)(v11 + 136);
  if (!v47)
  {
LABEL_123:
    v279 = 0;
    v280 = 0;
    v281 = 0;
    v51 = 0;
    goto LABEL_138;
  }
LABEL_120:
  v48 = std::__shared_weak_count::lock(v47);
  v284[1] = v48;
  if (!v48)
    goto LABEL_123;
  v49 = v48;
  v50 = *(void **)(v11 + 128);
  v284[0] = v50;
  if (v50)
  {
    (*(void (**)(void ***__return_ptr))(*(_QWORD *)v50 + 24))(&v279);
  }
  else
  {
    v279 = 0;
    v280 = 0;
    v281 = 0;
  }
  p_shared_owners = (unint64_t *)&v49->__shared_owners_;
  do
    v53 = __ldaxr(p_shared_owners);
  while (__stlxr(v53 - 1, p_shared_owners));
  if (v53)
  {
    v51 = v279;
    v54 = v280;
    if (v279 == v280)
      goto LABEL_138;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
    std::__shared_weak_count::__release_weak(v49);
    v51 = v279;
    v54 = v280;
    if (v279 == v280)
      goto LABEL_138;
  }
  do
  {
    v284[0] = (void *)v13;
    v284[1] = *v51;
    v286 = 0;
    v285 = 0uLL;
    v56 = v274;
    if ((unint64_t)v274 < v275)
    {
      *(_OWORD *)v274 = *(_OWORD *)v284;
      v55 = v285;
      *((_QWORD *)v56 + 4) = v286;
      *((_OWORD *)v56 + 1) = v55;
      v274 = v56 + 40;
    }
    else
    {
      v274 = sub_20EBA5F8C(&v273, (uint64_t)v284);
      if (SHIBYTE(v286) < 0)
        operator delete((void *)v285);
    }
    ++v51;
  }
  while (v51 != v54);
  v51 = v279;
LABEL_138:
  if (v51)
  {
    v280 = v51;
    operator delete(v51);
  }
  v57 = *(std::__shared_weak_count **)(v11 + 136);
  if (!v57 || (v58 = std::__shared_weak_count::lock(v57), (v284[1] = v58) == 0))
  {
    v279 = 0;
    v280 = 0;
    v281 = 0;
    v61 = 0;
    goto LABEL_159;
  }
  v59 = v58;
  v60 = *(void **)(v11 + 128);
  v284[0] = v60;
  if (v60)
  {
    (*(void (**)(void ***__return_ptr))(*(_QWORD *)v60 + 32))(&v279);
  }
  else
  {
    v279 = 0;
    v280 = 0;
    v281 = 0;
  }
  v62 = (unint64_t *)&v59->__shared_owners_;
  do
    v63 = __ldaxr(v62);
  while (__stlxr(v63 - 1, v62));
  if (v63)
  {
    v61 = v279;
    v64 = v280;
    if (v279 == v280)
      goto LABEL_159;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
    std::__shared_weak_count::__release_weak(v59);
    v61 = v279;
    v64 = v280;
    if (v279 == v280)
      goto LABEL_159;
  }
  v65 = (void *)(v13 + 1);
  do
  {
    v284[0] = v65;
    v284[1] = *v61;
    v286 = 0;
    v285 = 0uLL;
    v67 = v274;
    if ((unint64_t)v274 < v275)
    {
      *(_OWORD *)v274 = *(_OWORD *)v284;
      v66 = v285;
      *((_QWORD *)v67 + 4) = v286;
      *((_OWORD *)v67 + 1) = v66;
      v274 = v67 + 40;
    }
    else
    {
      v274 = sub_20EBA5F8C(&v273, (uint64_t)v284);
      if (SHIBYTE(v286) < 0)
        operator delete((void *)v285);
    }
    ++v61;
  }
  while (v61 != v64);
  v61 = v279;
LABEL_159:
  if (v61)
  {
    v280 = v61;
    operator delete(v61);
  }
  if (SHIBYTE(v283) < 0)
  {
    operator delete(v282[0]);
    if ((SHIBYTE(v291) & 0x80000000) == 0)
    {
LABEL_163:
      if ((SHIBYTE(v293) & 0x80000000) == 0)
        goto LABEL_164;
LABEL_168:
      operator delete((void *)__p);
      if ((*(char *)(a2 + 215) & 0x80000000) == 0)
        goto LABEL_165;
      goto LABEL_169;
    }
  }
  else if ((SHIBYTE(v291) & 0x80000000) == 0)
  {
    goto LABEL_163;
  }
  operator delete((void *)__dst);
  if (SHIBYTE(v293) < 0)
    goto LABEL_168;
LABEL_164:
  if ((*(char *)(a2 + 215) & 0x80000000) == 0)
  {
LABEL_165:
    *(_OWORD *)v284 = *(_OWORD *)(a2 + 192);
    *(_QWORD *)&v285 = *(_QWORD *)(a2 + 208);
    goto LABEL_170;
  }
LABEL_169:
  sub_20E860C04(v284, *(void **)(a2 + 192), *(_QWORD *)(a2 + 200));
LABEL_170:
  v68 = *(_QWORD *)(a2 + 240) != 0;
  if (*(char *)(a2 + 239) < 0)
  {
    sub_20E860C04(&__p, *(void **)(a2 + 216), *(_QWORD *)(a2 + 224));
  }
  else
  {
    __p = *(_OWORD *)(a2 + 216);
    v293 = *(_QWORD *)(a2 + 232);
  }
  sub_20EBA690C((uint64_t)v296, (__int128 *)v284, v68, (uint64_t *)&v276, (uint64_t *)&v273, &__p);
  if (SHIBYTE(v293) < 0)
  {
    operator delete((void *)__p);
    if ((SBYTE7(v285) & 0x80000000) == 0)
    {
LABEL_175:
      v69 = (char *)v273;
      if (v273)
        goto LABEL_176;
LABEL_186:
      v71 = (char *)v276;
      if (!v276)
        goto LABEL_199;
      goto LABEL_187;
    }
  }
  else if ((SBYTE7(v285) & 0x80000000) == 0)
  {
    goto LABEL_175;
  }
  operator delete(v284[0]);
  v69 = (char *)v273;
  if (!v273)
    goto LABEL_186;
LABEL_176:
  v70 = v274;
  if (v274 == v69)
  {
    v274 = v69;
    operator delete(v69);
    v71 = (char *)v276;
    if (!v276)
      goto LABEL_199;
    goto LABEL_187;
  }
  do
  {
    if (*(v70 - 1) < 0)
      operator delete(*((void **)v70 - 3));
    v70 -= 40;
  }
  while (v70 != v69);
  v274 = v69;
  operator delete(v273);
  v71 = (char *)v276;
  if (v276)
  {
LABEL_187:
    v72 = v277;
    v73 = v71;
    if (v277 == v71)
    {
LABEL_198:
      v277 = v71;
      operator delete(v73);
      goto LABEL_199;
    }
    while (1)
    {
      while (*(v72 - 1) < 0)
      {
        operator delete(*((void **)v72 - 3));
        if (*(v72 - 25) < 0)
          goto LABEL_189;
LABEL_195:
        if ((*(v72 - 49) & 0x80000000) == 0)
          goto LABEL_190;
LABEL_196:
        operator delete(*((void **)v72 - 9));
        v72 -= 88;
        if (v72 == v71)
        {
LABEL_197:
          v73 = v276;
          goto LABEL_198;
        }
      }
      if ((*(v72 - 25) & 0x80000000) == 0)
        goto LABEL_195;
LABEL_189:
      operator delete(*((void **)v72 - 6));
      if (*(v72 - 49) < 0)
        goto LABEL_196;
LABEL_190:
      v72 -= 88;
      if (v72 == v71)
        goto LABEL_197;
    }
  }
LABEL_199:
  v276 = 0;
  v277 = 0;
  v278 = 0;
  v273 = 0;
  v274 = 0;
  v275 = 0;
  v74 = *(_QWORD *)(a2 + 336);
  if (v74)
  {
    if ((*(char *)(v74 + 31) & 0x80000000) == 0)
    {
LABEL_201:
      v75 = *(_OWORD *)(v74 + 8);
      v293 = *(_QWORD *)(v74 + 24);
      __p = v75;
      goto LABEL_205;
    }
  }
  else
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/Node.h", 220, (uint64_t)"channels_", 9, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v74 = *(_QWORD *)(a2 + 336);
    if ((*(char *)(v74 + 31) & 0x80000000) == 0)
      goto LABEL_201;
  }
  sub_20E860C04(&__p, *(void **)(v74 + 8), *(_QWORD *)(v74 + 16));
LABEL_205:
  v76 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v74 + 96) + 48))(*(_QWORD *)(v74 + 96));
  v77 = sub_20EBEEAE8();
  if (*((char *)v77 + 23) < 0)
  {
    sub_20E860C04(&__dst, (void *)*v77, v77[1]);
  }
  else
  {
    v78 = *(_OWORD *)v77;
    v291 = v77[2];
    __dst = v78;
  }
  v79 = HIBYTE(v291);
  if (v291 >= 0)
  {
    v80 = &__dst;
  }
  else
  {
    v79 = *((_QWORD *)&__dst + 1);
    v80 = (__int128 *)__dst;
  }
  if (v79 >= 4)
  {
    v81 = (char *)v80 + v79;
    v82 = v80;
    do
    {
      v83 = (char *)memchr(v82, 118, v79 - 3);
      if (!v83)
        break;
      if (*(_DWORD *)v83 == 1684631414)
      {
        if (v83 == v81 || v83 - (char *)v80 == -1)
          break;
        v284[0] = (void *)v76;
        LODWORD(v284[1]) = 4;
        if (SHIBYTE(v293) < 0)
        {
          sub_20E860C04(&v285, (void *)__p, *((unint64_t *)&__p + 1));
        }
        else
        {
          v285 = __p;
          v286 = v293;
        }
        if (*(char *)(v74 + 55) < 0)
        {
          sub_20E860C04(&v287, *(void **)(v74 + 32), *(_QWORD *)(v74 + 40));
        }
        else
        {
          v256 = *(_OWORD *)(v74 + 32);
          *(_QWORD *)v288 = *(_QWORD *)(v74 + 48);
          v287 = v256;
        }
        sub_20EC77314();
        if (byte_254A5ED9F < 0)
        {
          sub_20E860C04(&v288[8], (void *)xmmword_254A5ED88, *((unint64_t *)&xmmword_254A5ED88 + 1));
        }
        else
        {
          *(_OWORD *)&v288[8] = xmmword_254A5ED88;
          v289 = unk_254A5ED98;
        }
        v85 = v277;
        if ((unint64_t)v277 < v278)
          goto LABEL_231;
        goto LABEL_234;
      }
      v82 = (__int128 *)(v83 + 1);
      v79 = v81 - (char *)v82;
    }
    while (v81 - (char *)v82 >= 4);
  }
  v284[0] = (void *)v76;
  LODWORD(v284[1]) = 2;
  if (SHIBYTE(v293) < 0)
  {
    sub_20E860C04(&v285, (void *)__p, *((unint64_t *)&__p + 1));
  }
  else
  {
    v285 = __p;
    v286 = v293;
  }
  if (*(char *)(v74 + 55) < 0)
  {
    sub_20E860C04(&v287, *(void **)(v74 + 32), *(_QWORD *)(v74 + 40));
  }
  else
  {
    v84 = *(_OWORD *)(v74 + 32);
    *(_QWORD *)v288 = *(_QWORD *)(v74 + 48);
    v287 = v84;
  }
  sub_20EC77314();
  if (byte_254A5ED9F < 0)
  {
    sub_20E860C04(&v288[8], (void *)xmmword_254A5ED88, *((unint64_t *)&xmmword_254A5ED88 + 1));
  }
  else
  {
    *(_OWORD *)&v288[8] = xmmword_254A5ED88;
    v289 = unk_254A5ED98;
  }
  v85 = v277;
  if ((unint64_t)v277 >= v278)
  {
LABEL_234:
    v277 = sub_20EBA558C((char **)&v276, (uint64_t)v284);
    if (SHIBYTE(v289) < 0)
    {
      operator delete(*(void **)&v288[8]);
      if ((v288[7] & 0x80000000) == 0)
        goto LABEL_236;
    }
    else if ((v288[7] & 0x80000000) == 0)
    {
      goto LABEL_236;
    }
LABEL_232:
    operator delete((void *)v287);
    if ((SHIBYTE(v286) & 0x80000000) == 0)
      goto LABEL_237;
    goto LABEL_233;
  }
LABEL_231:
  v86 = v284[0];
  *((_DWORD *)v85 + 2) = v284[1];
  *(_QWORD *)v85 = v86;
  v87 = v285;
  *((_QWORD *)v85 + 4) = v286;
  *((_OWORD *)v85 + 1) = v87;
  v286 = 0;
  v285 = 0uLL;
  v88 = *(_QWORD *)v288;
  *(_OWORD *)(v85 + 40) = v287;
  *((_QWORD *)v85 + 7) = v88;
  *(_QWORD *)v288 = 0;
  v287 = 0uLL;
  v89 = *(_OWORD *)&v288[8];
  *((_QWORD *)v85 + 10) = v289;
  *((_OWORD *)v85 + 4) = v89;
  *(_QWORD *)&v288[8] = 0;
  *(_QWORD *)&v288[16] = 0;
  v289 = 0;
  v277 = v85 + 88;
  if ((v288[7] & 0x80000000) != 0)
    goto LABEL_232;
LABEL_236:
  if (SHIBYTE(v286) < 0)
LABEL_233:
    operator delete((void *)v285);
LABEL_237:
  v90 = sub_20EBA4AA4();
  if (*((char *)v90 + 23) < 0)
  {
    sub_20E860C04(v282, (void *)*v90, v90[1]);
  }
  else
  {
    v91 = *(_OWORD *)v90;
    v283 = v90[2];
    *(_OWORD *)v282 = v91;
  }
  v92 = HIBYTE(v283);
  if (v283 >= 0)
  {
    v93 = v282;
  }
  else
  {
    v92 = (uint64_t)v282[1];
    v93 = (void **)v282[0];
  }
  if (v92 >= 18)
  {
    v94 = (char *)v93 + v92;
    v95 = v93;
    do
    {
      v96 = (char *)memchr(v95, 67, v92 - 17);
      if (!v96)
        break;
      if (*(_QWORD *)v96 == 0x456C656E6E616843
        && *((_QWORD *)v96 + 1) == 0x696F763C726F7272
        && *((_WORD *)v96 + 8) == 15972)
      {
        if (v96 != v94 && v96 - (char *)v93 != -1)
          goto LABEL_281;
        break;
      }
      v95 = (void **)(v96 + 1);
      v92 = v94 - (char *)v95;
    }
    while (v94 - (char *)v95 >= 18);
  }
  v284[0] = (void *)(v76 + 1);
  LODWORD(v284[1]) = 3;
  v99 = SHIBYTE(v293);
  if (v293 >= 0)
    v100 = HIBYTE(v293);
  else
    v100 = *((_QWORD *)&__p + 1);
  v101 = v100 + 6;
  if (v100 + 6 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v101 >= 0x17)
  {
    v103 = (v101 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v101 | 7) != 0x17)
      v103 = v101 | 7;
    v104 = v103 + 1;
    v102 = (__int128 *)operator new(v103 + 1);
    *((_QWORD *)&v285 + 1) = v100 + 6;
    v286 = v104 | 0x8000000000000000;
    *(_QWORD *)&v285 = v102;
  }
  else
  {
    v286 = 0;
    v285 = 0uLL;
    v102 = &v285;
    HIBYTE(v286) = v100 + 6;
    if (!v100)
      goto LABEL_273;
  }
  if (v99 >= 0)
    v105 = &__p;
  else
    v105 = (__int128 *)__p;
  memmove(v102, v105, v100);
LABEL_273:
  strcpy((char *)v102 + v100, ".Error");
  *(_WORD *)&v288[7] = 0;
  LOBYTE(v287) = 0;
  HIBYTE(v289) = 0;
  v106 = v277;
  if ((unint64_t)v277 >= v278)
  {
    v277 = sub_20EBA558C((char **)&v276, (uint64_t)v284);
    if (SHIBYTE(v289) < 0)
    {
      operator delete(*(void **)&v288[8]);
      if ((v288[7] & 0x80000000) == 0)
        goto LABEL_280;
    }
    else if ((v288[7] & 0x80000000) == 0)
    {
      goto LABEL_280;
    }
LABEL_275:
    operator delete((void *)v287);
    if (SHIBYTE(v286) < 0)
      goto LABEL_276;
    goto LABEL_281;
  }
  v107 = v284[0];
  *((_DWORD *)v277 + 2) = v284[1];
  *(_QWORD *)v106 = v107;
  v108 = v285;
  *((_QWORD *)v106 + 4) = v286;
  *((_OWORD *)v106 + 1) = v108;
  v286 = 0;
  v285 = 0uLL;
  v109 = *(_QWORD *)v288;
  *(_OWORD *)(v106 + 40) = v287;
  *((_QWORD *)v106 + 7) = v109;
  *(_QWORD *)v288 = 0;
  v287 = 0uLL;
  v110 = *(_OWORD *)&v288[8];
  *((_QWORD *)v106 + 10) = v289;
  *((_OWORD *)v106 + 4) = v110;
  *(_QWORD *)&v288[8] = 0;
  *(_QWORD *)&v288[16] = 0;
  v289 = 0;
  v277 = v106 + 88;
  if ((v288[7] & 0x80000000) != 0)
    goto LABEL_275;
LABEL_280:
  if (SHIBYTE(v286) < 0)
  {
LABEL_276:
    operator delete((void *)v285);
    v111 = *(std::__shared_weak_count **)(v74 + 136);
    if (!v111)
      goto LABEL_285;
    goto LABEL_282;
  }
LABEL_281:
  v111 = *(std::__shared_weak_count **)(v74 + 136);
  if (!v111)
  {
LABEL_285:
    v279 = 0;
    v280 = 0;
    v281 = 0;
    v115 = 0;
    goto LABEL_302;
  }
LABEL_282:
  v112 = std::__shared_weak_count::lock(v111);
  v284[1] = v112;
  if (!v112)
    goto LABEL_285;
  v113 = v112;
  v114 = *(void **)(v74 + 128);
  v284[0] = v114;
  if (v114)
  {
    (*(void (**)(void ***__return_ptr))(*(_QWORD *)v114 + 24))(&v279);
  }
  else
  {
    v279 = 0;
    v280 = 0;
    v281 = 0;
  }
  v116 = (unint64_t *)&v113->__shared_owners_;
  do
    v117 = __ldaxr(v116);
  while (__stlxr(v117 - 1, v116));
  if (v117)
  {
    v115 = v279;
    v118 = v280;
    if (v279 == v280)
      goto LABEL_302;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v113->__on_zero_shared)(v113);
    std::__shared_weak_count::__release_weak(v113);
    v115 = v279;
    v118 = v280;
    if (v279 == v280)
      goto LABEL_302;
  }
  do
  {
    v284[0] = (void *)v76;
    v284[1] = *v115;
    v286 = 0;
    v285 = 0uLL;
    v120 = v274;
    if ((unint64_t)v274 < v275)
    {
      *(_OWORD *)v274 = *(_OWORD *)v284;
      v119 = v285;
      *((_QWORD *)v120 + 4) = v286;
      *((_OWORD *)v120 + 1) = v119;
      v274 = v120 + 40;
    }
    else
    {
      v274 = sub_20EBA5F8C(&v273, (uint64_t)v284);
      if (SHIBYTE(v286) < 0)
        operator delete((void *)v285);
    }
    ++v115;
  }
  while (v115 != v118);
  v115 = v279;
LABEL_302:
  if (v115)
  {
    v280 = v115;
    operator delete(v115);
  }
  v121 = *(std::__shared_weak_count **)(v74 + 136);
  if (!v121 || (v122 = std::__shared_weak_count::lock(v121), (v284[1] = v122) == 0))
  {
    v279 = 0;
    v280 = 0;
    v281 = 0;
    v125 = 0;
    goto LABEL_323;
  }
  v123 = v122;
  v124 = *(void **)(v74 + 128);
  v284[0] = v124;
  if (v124)
  {
    (*(void (**)(void ***__return_ptr))(*(_QWORD *)v124 + 32))(&v279);
  }
  else
  {
    v279 = 0;
    v280 = 0;
    v281 = 0;
  }
  v126 = (unint64_t *)&v123->__shared_owners_;
  do
    v127 = __ldaxr(v126);
  while (__stlxr(v127 - 1, v126));
  if (v127)
  {
    v125 = v279;
    v128 = v280;
    if (v279 == v280)
      goto LABEL_323;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v123->__on_zero_shared)(v123);
    std::__shared_weak_count::__release_weak(v123);
    v125 = v279;
    v128 = v280;
    if (v279 == v280)
      goto LABEL_323;
  }
  do
  {
    v284[0] = (void *)(v76 + 1);
    v284[1] = *v125;
    v286 = 0;
    v285 = 0uLL;
    v130 = v274;
    if ((unint64_t)v274 < v275)
    {
      *(_OWORD *)v274 = *(_OWORD *)v284;
      v129 = v285;
      *((_QWORD *)v130 + 4) = v286;
      *((_OWORD *)v130 + 1) = v129;
      v274 = v130 + 40;
    }
    else
    {
      v274 = sub_20EBA5F8C(&v273, (uint64_t)v284);
      if (SHIBYTE(v286) < 0)
        operator delete((void *)v285);
    }
    ++v125;
  }
  while (v125 != v128);
  v125 = v279;
LABEL_323:
  if (v125)
  {
    v280 = v125;
    operator delete(v125);
  }
  if (SHIBYTE(v283) < 0)
  {
    operator delete(v282[0]);
    if ((SHIBYTE(v291) & 0x80000000) == 0)
    {
LABEL_327:
      if ((SHIBYTE(v293) & 0x80000000) == 0)
        goto LABEL_328;
LABEL_332:
      operator delete((void *)__p);
      if ((*(char *)(a2 + 295) & 0x80000000) == 0)
        goto LABEL_329;
      goto LABEL_333;
    }
  }
  else if ((SHIBYTE(v291) & 0x80000000) == 0)
  {
    goto LABEL_327;
  }
  operator delete((void *)__dst);
  if (SHIBYTE(v293) < 0)
    goto LABEL_332;
LABEL_328:
  if ((*(char *)(a2 + 295) & 0x80000000) == 0)
  {
LABEL_329:
    *(_OWORD *)v284 = *(_OWORD *)(a2 + 272);
    *(_QWORD *)&v285 = *(_QWORD *)(a2 + 288);
    goto LABEL_334;
  }
LABEL_333:
  sub_20E860C04(v284, *(void **)(a2 + 272), *(_QWORD *)(a2 + 280));
LABEL_334:
  v131 = *(_QWORD *)(a2 + 320) != 0;
  if (*(char *)(a2 + 319) < 0)
  {
    sub_20E860C04(&__p, *(void **)(a2 + 296), *(_QWORD *)(a2 + 304));
  }
  else
  {
    __p = *(_OWORD *)(a2 + 296);
    v293 = *(_QWORD *)(a2 + 312);
  }
  sub_20EBA690C((uint64_t)v297, (__int128 *)v284, v131, (uint64_t *)&v276, (uint64_t *)&v273, &__p);
  if (SHIBYTE(v293) < 0)
  {
    operator delete((void *)__p);
    if ((SBYTE7(v285) & 0x80000000) == 0)
    {
LABEL_339:
      v132 = (char *)v273;
      if (v273)
        goto LABEL_340;
LABEL_350:
      v134 = (char *)v276;
      if (!v276)
        goto LABEL_363;
      goto LABEL_351;
    }
  }
  else if ((SBYTE7(v285) & 0x80000000) == 0)
  {
    goto LABEL_339;
  }
  operator delete(v284[0]);
  v132 = (char *)v273;
  if (!v273)
    goto LABEL_350;
LABEL_340:
  v133 = v274;
  if (v274 == v132)
  {
    v274 = v132;
    operator delete(v132);
    v134 = (char *)v276;
    if (!v276)
      goto LABEL_363;
    goto LABEL_351;
  }
  do
  {
    if (*(v133 - 1) < 0)
      operator delete(*((void **)v133 - 3));
    v133 -= 40;
  }
  while (v133 != v132);
  v274 = v132;
  operator delete(v273);
  v134 = (char *)v276;
  if (v276)
  {
LABEL_351:
    v135 = v277;
    v136 = v134;
    if (v277 == v134)
    {
LABEL_362:
      v277 = v134;
      operator delete(v136);
      goto LABEL_363;
    }
    while (1)
    {
      while (*(v135 - 1) < 0)
      {
        operator delete(*((void **)v135 - 3));
        if (*(v135 - 25) < 0)
          goto LABEL_353;
LABEL_359:
        if ((*(v135 - 49) & 0x80000000) == 0)
          goto LABEL_354;
LABEL_360:
        operator delete(*((void **)v135 - 9));
        v135 -= 88;
        if (v135 == v134)
        {
LABEL_361:
          v136 = v276;
          goto LABEL_362;
        }
      }
      if ((*(v135 - 25) & 0x80000000) == 0)
        goto LABEL_359;
LABEL_353:
      operator delete(*((void **)v135 - 6));
      if (*(v135 - 49) < 0)
        goto LABEL_360;
LABEL_354:
      v135 -= 88;
      if (v135 == v134)
        goto LABEL_361;
    }
  }
LABEL_363:
  v276 = 0;
  v277 = 0;
  v278 = 0;
  v273 = 0;
  v274 = 0;
  v275 = 0;
  v137 = *(_QWORD *)(a2 + 416);
  if (!v137)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/Node.h", 220, (uint64_t)"channels_", 9, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v137 = *(_QWORD *)(a2 + 416);
    if ((*(char *)(v137 + 31) & 0x80000000) == 0)
      goto LABEL_365;
LABEL_368:
    sub_20E860C04(&__p, *(void **)(v137 + 8), *(_QWORD *)(v137 + 16));
    goto LABEL_369;
  }
  if (*(char *)(v137 + 31) < 0)
    goto LABEL_368;
LABEL_365:
  v138 = *(_OWORD *)(v137 + 8);
  v293 = *(_QWORD *)(v137 + 24);
  __p = v138;
LABEL_369:
  v139 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v137 + 96) + 48))(*(_QWORD *)(v137 + 96));
  v140 = atomic_load((unsigned __int8 *)&qword_254A5D880);
  if ((v140 & 1) != 0 || !__cxa_guard_acquire(&qword_254A5D880))
    goto LABEL_370;
  sub_20EC774D8();
  v262 = byte_254A5EDFF;
  if (byte_254A5EDFF >= 0)
    v263 = byte_254A5EDFF;
  else
    v263 = qword_254A5EDF0;
  v264 = v263 + 1;
  if (v263 + 1 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v264 >= 0x17)
  {
    v269 = (v264 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v264 | 7) != 0x17)
      v269 = v264 | 7;
    v270 = v269 + 1;
    v265 = (__int128 *)operator new(v269 + 1);
    *((_QWORD *)&xmmword_254A5EDD0 + 1) = v263 + 1;
    unk_254A5EDE0 = v270 | 0x8000000000000000;
    *(_QWORD *)&xmmword_254A5EDD0 = v265;
    goto LABEL_731;
  }
  v265 = &xmmword_254A5EDD0;
  unk_254A5EDE0 = 0;
  xmmword_254A5EDD0 = 0uLL;
  byte_254A5EDE7 = v263 + 1;
  if (v263)
  {
LABEL_731:
    if (v262 >= 0)
      v271 = &qword_254A5EDE8;
    else
      v271 = (uint64_t *)qword_254A5EDE8;
    memmove(v265, v271, v263);
  }
  *(_WORD *)((char *)v265 + v263) = 38;
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A5EDD0, &dword_20E81F000);
  __cxa_guard_release(&qword_254A5D880);
LABEL_370:
  if (byte_254A5EDE7 < 0)
  {
    sub_20E860C04(&__dst, (void *)xmmword_254A5EDD0, *((unint64_t *)&xmmword_254A5EDD0 + 1));
  }
  else
  {
    __dst = xmmword_254A5EDD0;
    v291 = unk_254A5EDE0;
  }
  v141 = HIBYTE(v291);
  if (v291 >= 0)
  {
    v142 = &__dst;
  }
  else
  {
    v141 = *((_QWORD *)&__dst + 1);
    v142 = (__int128 *)__dst;
  }
  if (v141 >= 4)
  {
    v143 = (char *)v142 + v141;
    v144 = v142;
    do
    {
      v145 = (char *)memchr(v144, 118, v141 - 3);
      if (!v145)
        break;
      if (*(_DWORD *)v145 == 1684631414)
      {
        if (v145 == v143 || v145 - (char *)v142 == -1)
          break;
        v284[0] = (void *)v139;
        LODWORD(v284[1]) = 4;
        if (SHIBYTE(v293) < 0)
        {
          sub_20E860C04(&v285, (void *)__p, *((unint64_t *)&__p + 1));
        }
        else
        {
          v285 = __p;
          v286 = v293;
        }
        if (*(char *)(v137 + 55) < 0)
        {
          sub_20E860C04(&v287, *(void **)(v137 + 32), *(_QWORD *)(v137 + 40));
        }
        else
        {
          v257 = *(_OWORD *)(v137 + 32);
          *(_QWORD *)v288 = *(_QWORD *)(v137 + 48);
          v287 = v257;
        }
        sub_20EC77CA0();
        if (byte_254A5EED7 < 0)
        {
          sub_20E860C04(&v288[8], (void *)xmmword_254A5EEC0, *((unint64_t *)&xmmword_254A5EEC0 + 1));
        }
        else
        {
          *(_OWORD *)&v288[8] = xmmword_254A5EEC0;
          v289 = unk_254A5EED0;
        }
        v147 = v277;
        if ((unint64_t)v277 < v278)
          goto LABEL_396;
        goto LABEL_399;
      }
      v144 = (__int128 *)(v145 + 1);
      v141 = v143 - (char *)v144;
    }
    while (v143 - (char *)v144 >= 4);
  }
  v284[0] = (void *)v139;
  LODWORD(v284[1]) = 2;
  if (SHIBYTE(v293) < 0)
  {
    sub_20E860C04(&v285, (void *)__p, *((unint64_t *)&__p + 1));
  }
  else
  {
    v285 = __p;
    v286 = v293;
  }
  if (*(char *)(v137 + 55) < 0)
  {
    sub_20E860C04(&v287, *(void **)(v137 + 32), *(_QWORD *)(v137 + 40));
  }
  else
  {
    v146 = *(_OWORD *)(v137 + 32);
    *(_QWORD *)v288 = *(_QWORD *)(v137 + 48);
    v287 = v146;
  }
  sub_20EC77CA0();
  if (byte_254A5EED7 < 0)
  {
    sub_20E860C04(&v288[8], (void *)xmmword_254A5EEC0, *((unint64_t *)&xmmword_254A5EEC0 + 1));
  }
  else
  {
    *(_OWORD *)&v288[8] = xmmword_254A5EEC0;
    v289 = unk_254A5EED0;
  }
  v147 = v277;
  if ((unint64_t)v277 >= v278)
  {
LABEL_399:
    v277 = sub_20EBA558C((char **)&v276, (uint64_t)v284);
    if (SHIBYTE(v289) < 0)
    {
      operator delete(*(void **)&v288[8]);
      if ((v288[7] & 0x80000000) == 0)
        goto LABEL_401;
    }
    else if ((v288[7] & 0x80000000) == 0)
    {
      goto LABEL_401;
    }
LABEL_397:
    operator delete((void *)v287);
    if ((SHIBYTE(v286) & 0x80000000) == 0)
      goto LABEL_402;
    goto LABEL_398;
  }
LABEL_396:
  v148 = v284[0];
  *((_DWORD *)v147 + 2) = v284[1];
  *(_QWORD *)v147 = v148;
  v149 = v285;
  *((_QWORD *)v147 + 4) = v286;
  *((_OWORD *)v147 + 1) = v149;
  v286 = 0;
  v285 = 0uLL;
  v150 = *(_QWORD *)v288;
  *(_OWORD *)(v147 + 40) = v287;
  *((_QWORD *)v147 + 7) = v150;
  *(_QWORD *)v288 = 0;
  v287 = 0uLL;
  v151 = *(_OWORD *)&v288[8];
  *((_QWORD *)v147 + 10) = v289;
  *((_OWORD *)v147 + 4) = v151;
  *(_QWORD *)&v288[8] = 0;
  *(_QWORD *)&v288[16] = 0;
  v289 = 0;
  v277 = v147 + 88;
  if ((v288[7] & 0x80000000) != 0)
    goto LABEL_397;
LABEL_401:
  if (SHIBYTE(v286) < 0)
LABEL_398:
    operator delete((void *)v285);
LABEL_402:
  v152 = sub_20EBA4AA4();
  if (*((char *)v152 + 23) < 0)
  {
    sub_20E860C04(v282, (void *)*v152, v152[1]);
  }
  else
  {
    v153 = *(_OWORD *)v152;
    v283 = v152[2];
    *(_OWORD *)v282 = v153;
  }
  v154 = HIBYTE(v283);
  if (v283 >= 0)
  {
    v155 = v282;
  }
  else
  {
    v154 = (uint64_t)v282[1];
    v155 = (void **)v282[0];
  }
  if (v154 >= 18)
  {
    v156 = (char *)v155 + v154;
    v157 = v155;
    do
    {
      v158 = (char *)memchr(v157, 67, v154 - 17);
      if (!v158)
        break;
      if (*(_QWORD *)v158 == 0x456C656E6E616843
        && *((_QWORD *)v158 + 1) == 0x696F763C726F7272
        && *((_WORD *)v158 + 8) == 15972)
      {
        if (v158 != v156 && v158 - (char *)v155 != -1)
          goto LABEL_446;
        break;
      }
      v157 = (void **)(v158 + 1);
      v154 = v156 - (char *)v157;
    }
    while (v156 - (char *)v157 >= 18);
  }
  v284[0] = (void *)(v139 + 1);
  LODWORD(v284[1]) = 3;
  v161 = SHIBYTE(v293);
  if (v293 >= 0)
    v162 = HIBYTE(v293);
  else
    v162 = *((_QWORD *)&__p + 1);
  v163 = v162 + 6;
  if (v162 + 6 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v163 >= 0x17)
  {
    v165 = (v163 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v163 | 7) != 0x17)
      v165 = v163 | 7;
    v166 = v165 + 1;
    v164 = (__int128 *)operator new(v165 + 1);
    *((_QWORD *)&v285 + 1) = v162 + 6;
    v286 = v166 | 0x8000000000000000;
    *(_QWORD *)&v285 = v164;
  }
  else
  {
    v286 = 0;
    v285 = 0uLL;
    v164 = &v285;
    HIBYTE(v286) = v162 + 6;
    if (!v162)
      goto LABEL_438;
  }
  if (v161 >= 0)
    v167 = &__p;
  else
    v167 = (__int128 *)__p;
  memmove(v164, v167, v162);
LABEL_438:
  strcpy((char *)v164 + v162, ".Error");
  *(_WORD *)&v288[7] = 0;
  LOBYTE(v287) = 0;
  HIBYTE(v289) = 0;
  v168 = v277;
  if ((unint64_t)v277 >= v278)
  {
    v277 = sub_20EBA558C((char **)&v276, (uint64_t)v284);
    if (SHIBYTE(v289) < 0)
    {
      operator delete(*(void **)&v288[8]);
      if ((v288[7] & 0x80000000) == 0)
        goto LABEL_445;
    }
    else if ((v288[7] & 0x80000000) == 0)
    {
      goto LABEL_445;
    }
LABEL_440:
    operator delete((void *)v287);
    if (SHIBYTE(v286) < 0)
      goto LABEL_441;
    goto LABEL_446;
  }
  v169 = v284[0];
  *((_DWORD *)v277 + 2) = v284[1];
  *(_QWORD *)v168 = v169;
  v170 = v285;
  *((_QWORD *)v168 + 4) = v286;
  *((_OWORD *)v168 + 1) = v170;
  v286 = 0;
  v285 = 0uLL;
  v171 = *(_QWORD *)v288;
  *(_OWORD *)(v168 + 40) = v287;
  *((_QWORD *)v168 + 7) = v171;
  *(_QWORD *)v288 = 0;
  v287 = 0uLL;
  v172 = *(_OWORD *)&v288[8];
  *((_QWORD *)v168 + 10) = v289;
  *((_OWORD *)v168 + 4) = v172;
  *(_QWORD *)&v288[8] = 0;
  *(_QWORD *)&v288[16] = 0;
  v289 = 0;
  v277 = v168 + 88;
  if ((v288[7] & 0x80000000) != 0)
    goto LABEL_440;
LABEL_445:
  if (SHIBYTE(v286) < 0)
  {
LABEL_441:
    operator delete((void *)v285);
    v173 = *(std::__shared_weak_count **)(v137 + 136);
    if (!v173)
      goto LABEL_450;
    goto LABEL_447;
  }
LABEL_446:
  v173 = *(std::__shared_weak_count **)(v137 + 136);
  if (!v173)
  {
LABEL_450:
    v279 = 0;
    v280 = 0;
    v281 = 0;
    v177 = 0;
    goto LABEL_467;
  }
LABEL_447:
  v174 = std::__shared_weak_count::lock(v173);
  v284[1] = v174;
  if (!v174)
    goto LABEL_450;
  v175 = v174;
  v176 = *(void **)(v137 + 128);
  v284[0] = v176;
  if (v176)
  {
    (*(void (**)(void ***__return_ptr))(*(_QWORD *)v176 + 24))(&v279);
  }
  else
  {
    v279 = 0;
    v280 = 0;
    v281 = 0;
  }
  v178 = (unint64_t *)&v175->__shared_owners_;
  do
    v179 = __ldaxr(v178);
  while (__stlxr(v179 - 1, v178));
  if (v179)
  {
    v177 = v279;
    v180 = v280;
    if (v279 == v280)
      goto LABEL_467;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v175->__on_zero_shared)(v175);
    std::__shared_weak_count::__release_weak(v175);
    v177 = v279;
    v180 = v280;
    if (v279 == v280)
      goto LABEL_467;
  }
  do
  {
    v284[0] = (void *)v139;
    v284[1] = *v177;
    v286 = 0;
    v285 = 0uLL;
    v182 = v274;
    if ((unint64_t)v274 < v275)
    {
      *(_OWORD *)v274 = *(_OWORD *)v284;
      v181 = v285;
      *((_QWORD *)v182 + 4) = v286;
      *((_OWORD *)v182 + 1) = v181;
      v274 = v182 + 40;
    }
    else
    {
      v274 = sub_20EBA5F8C(&v273, (uint64_t)v284);
      if (SHIBYTE(v286) < 0)
        operator delete((void *)v285);
    }
    ++v177;
  }
  while (v177 != v180);
  v177 = v279;
LABEL_467:
  if (v177)
  {
    v280 = v177;
    operator delete(v177);
  }
  v183 = *(std::__shared_weak_count **)(v137 + 136);
  if (!v183 || (v184 = std::__shared_weak_count::lock(v183), (v284[1] = v184) == 0))
  {
    v279 = 0;
    v280 = 0;
    v281 = 0;
    v187 = 0;
    goto LABEL_488;
  }
  v185 = v184;
  v186 = *(void **)(v137 + 128);
  v284[0] = v186;
  if (v186)
  {
    (*(void (**)(void ***__return_ptr))(*(_QWORD *)v186 + 32))(&v279);
  }
  else
  {
    v279 = 0;
    v280 = 0;
    v281 = 0;
  }
  v188 = (unint64_t *)&v185->__shared_owners_;
  do
    v189 = __ldaxr(v188);
  while (__stlxr(v189 - 1, v188));
  if (v189)
  {
    v187 = v279;
    v190 = v280;
    if (v279 == v280)
      goto LABEL_488;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v185->__on_zero_shared)(v185);
    std::__shared_weak_count::__release_weak(v185);
    v187 = v279;
    v190 = v280;
    if (v279 == v280)
      goto LABEL_488;
  }
  v191 = (void *)(v139 + 1);
  do
  {
    v284[0] = v191;
    v284[1] = *v187;
    v286 = 0;
    v285 = 0uLL;
    v193 = v274;
    if ((unint64_t)v274 < v275)
    {
      *(_OWORD *)v274 = *(_OWORD *)v284;
      v192 = v285;
      *((_QWORD *)v193 + 4) = v286;
      *((_OWORD *)v193 + 1) = v192;
      v274 = v193 + 40;
    }
    else
    {
      v274 = sub_20EBA5F8C(&v273, (uint64_t)v284);
      if (SHIBYTE(v286) < 0)
        operator delete((void *)v285);
    }
    ++v187;
  }
  while (v187 != v190);
  v187 = v279;
LABEL_488:
  if (v187)
  {
    v280 = v187;
    operator delete(v187);
  }
  if (SHIBYTE(v283) < 0)
  {
    operator delete(v282[0]);
    if ((SHIBYTE(v291) & 0x80000000) == 0)
    {
LABEL_492:
      if ((SHIBYTE(v293) & 0x80000000) == 0)
        goto LABEL_493;
LABEL_497:
      operator delete((void *)__p);
      if ((*(char *)(v137 + 199) & 0x80000000) == 0)
        goto LABEL_494;
      goto LABEL_498;
    }
  }
  else if ((SHIBYTE(v291) & 0x80000000) == 0)
  {
    goto LABEL_492;
  }
  operator delete((void *)__dst);
  if (SHIBYTE(v293) < 0)
    goto LABEL_497;
LABEL_493:
  if ((*(char *)(v137 + 199) & 0x80000000) == 0)
  {
LABEL_494:
    __p = *(_OWORD *)(v137 + 176);
    v293 = *(_QWORD *)(v137 + 192);
    goto LABEL_499;
  }
LABEL_498:
  sub_20E860C04(&__p, *(void **)(v137 + 176), *(_QWORD *)(v137 + 184));
LABEL_499:
  v194 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v137 + 264) + 48))(*(_QWORD *)(v137 + 264));
  v195 = sub_20EC6E994();
  if (*((char *)v195 + 23) < 0)
  {
    sub_20E860C04(&__dst, (void *)*v195, v195[1]);
  }
  else
  {
    v196 = *(_OWORD *)v195;
    v291 = v195[2];
    __dst = v196;
  }
  v197 = HIBYTE(v291);
  if (v291 >= 0)
  {
    v198 = &__dst;
  }
  else
  {
    v197 = *((_QWORD *)&__dst + 1);
    v198 = (__int128 *)__dst;
  }
  if (v197 >= 4)
  {
    v199 = (char *)v198 + v197;
    v200 = v198;
    do
    {
      v201 = (char *)memchr(v200, 118, v197 - 3);
      if (!v201)
        break;
      if (*(_DWORD *)v201 == 1684631414)
      {
        if (v201 == v199 || v201 - (char *)v198 == -1)
          break;
        v284[0] = (void *)v194;
        LODWORD(v284[1]) = 4;
        if (SHIBYTE(v293) < 0)
        {
          sub_20E860C04(&v285, (void *)__p, *((unint64_t *)&__p + 1));
        }
        else
        {
          v285 = __p;
          v286 = v293;
        }
        if (*(char *)(v137 + 223) < 0)
        {
          sub_20E860C04(&v287, *(void **)(v137 + 200), *(_QWORD *)(v137 + 208));
        }
        else
        {
          v287 = *(_OWORD *)(v137 + 200);
          *(_QWORD *)v288 = *(_QWORD *)(v137 + 216);
        }
        sub_20EC77E64();
        if (byte_254A5EF1F < 0)
        {
          sub_20E860C04(&v288[8], (void *)xmmword_254A5EF08, *((unint64_t *)&xmmword_254A5EF08 + 1));
        }
        else
        {
          *(_OWORD *)&v288[8] = xmmword_254A5EF08;
          v289 = unk_254A5EF18;
        }
        v202 = v277;
        if ((unint64_t)v277 < v278)
          goto LABEL_525;
        goto LABEL_528;
      }
      v200 = (__int128 *)(v201 + 1);
      v197 = v199 - (char *)v200;
    }
    while (v199 - (char *)v200 >= 4);
  }
  v284[0] = (void *)v194;
  LODWORD(v284[1]) = 2;
  if (SHIBYTE(v293) < 0)
  {
    sub_20E860C04(&v285, (void *)__p, *((unint64_t *)&__p + 1));
  }
  else
  {
    v285 = __p;
    v286 = v293;
  }
  if (*(char *)(v137 + 223) < 0)
  {
    sub_20E860C04(&v287, *(void **)(v137 + 200), *(_QWORD *)(v137 + 208));
  }
  else
  {
    v287 = *(_OWORD *)(v137 + 200);
    *(_QWORD *)v288 = *(_QWORD *)(v137 + 216);
  }
  sub_20EC77E64();
  if (byte_254A5EF1F < 0)
  {
    sub_20E860C04(&v288[8], (void *)xmmword_254A5EF08, *((unint64_t *)&xmmword_254A5EF08 + 1));
  }
  else
  {
    *(_OWORD *)&v288[8] = xmmword_254A5EF08;
    v289 = unk_254A5EF18;
  }
  v202 = v277;
  if ((unint64_t)v277 >= v278)
  {
LABEL_528:
    v277 = sub_20EBA558C((char **)&v276, (uint64_t)v284);
    if (SHIBYTE(v289) < 0)
    {
      operator delete(*(void **)&v288[8]);
      if ((v288[7] & 0x80000000) == 0)
        goto LABEL_530;
    }
    else if ((v288[7] & 0x80000000) == 0)
    {
      goto LABEL_530;
    }
LABEL_526:
    operator delete((void *)v287);
    if ((SHIBYTE(v286) & 0x80000000) == 0)
      goto LABEL_531;
    goto LABEL_527;
  }
LABEL_525:
  v203 = v284[0];
  *((_DWORD *)v202 + 2) = v284[1];
  *(_QWORD *)v202 = v203;
  v204 = v285;
  *((_QWORD *)v202 + 4) = v286;
  *((_OWORD *)v202 + 1) = v204;
  v286 = 0;
  v285 = 0uLL;
  v205 = *(_QWORD *)v288;
  *(_OWORD *)(v202 + 40) = v287;
  *((_QWORD *)v202 + 7) = v205;
  *(_QWORD *)v288 = 0;
  v287 = 0uLL;
  v206 = *(_OWORD *)&v288[8];
  *((_QWORD *)v202 + 10) = v289;
  *((_OWORD *)v202 + 4) = v206;
  *(_QWORD *)&v288[8] = 0;
  *(_QWORD *)&v288[16] = 0;
  v289 = 0;
  v277 = v202 + 88;
  if ((v288[7] & 0x80000000) != 0)
    goto LABEL_526;
LABEL_530:
  if (SHIBYTE(v286) < 0)
LABEL_527:
    operator delete((void *)v285);
LABEL_531:
  v207 = sub_20EBA4AA4();
  if (*((char *)v207 + 23) < 0)
  {
    sub_20E860C04(v282, (void *)*v207, v207[1]);
  }
  else
  {
    v208 = *(_OWORD *)v207;
    v283 = v207[2];
    *(_OWORD *)v282 = v208;
  }
  v209 = HIBYTE(v283);
  if (v283 >= 0)
  {
    v210 = v282;
  }
  else
  {
    v209 = (uint64_t)v282[1];
    v210 = (void **)v282[0];
  }
  if (v209 >= 18)
  {
    v211 = (char *)v210 + v209;
    v212 = v210;
    do
    {
      v213 = (char *)memchr(v212, 67, v209 - 17);
      if (!v213)
        break;
      if (*(_QWORD *)v213 == 0x456C656E6E616843
        && *((_QWORD *)v213 + 1) == 0x696F763C726F7272
        && *((_WORD *)v213 + 8) == 15972)
      {
        if (v213 != v211 && v213 - (char *)v210 != -1)
          goto LABEL_575;
        break;
      }
      v212 = (void **)(v213 + 1);
      v209 = v211 - (char *)v212;
    }
    while (v211 - (char *)v212 >= 18);
  }
  v284[0] = (void *)(v194 + 1);
  LODWORD(v284[1]) = 3;
  v216 = SHIBYTE(v293);
  if (v293 >= 0)
    v217 = HIBYTE(v293);
  else
    v217 = *((_QWORD *)&__p + 1);
  v218 = v217 + 6;
  if (v217 + 6 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v218 >= 0x17)
  {
    v220 = (v218 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v218 | 7) != 0x17)
      v220 = v218 | 7;
    v221 = v220 + 1;
    v219 = (__int128 *)operator new(v220 + 1);
    *((_QWORD *)&v285 + 1) = v217 + 6;
    v286 = v221 | 0x8000000000000000;
    *(_QWORD *)&v285 = v219;
  }
  else
  {
    v286 = 0;
    v285 = 0uLL;
    v219 = &v285;
    HIBYTE(v286) = v217 + 6;
    if (!v217)
      goto LABEL_567;
  }
  if (v216 >= 0)
    v222 = &__p;
  else
    v222 = (__int128 *)__p;
  memmove(v219, v222, v217);
LABEL_567:
  strcpy((char *)v219 + v217, ".Error");
  *(_WORD *)&v288[7] = 0;
  LOBYTE(v287) = 0;
  HIBYTE(v289) = 0;
  v223 = v277;
  if ((unint64_t)v277 >= v278)
  {
    v277 = sub_20EBA558C((char **)&v276, (uint64_t)v284);
    if (SHIBYTE(v289) < 0)
    {
      operator delete(*(void **)&v288[8]);
      if ((v288[7] & 0x80000000) == 0)
        goto LABEL_574;
    }
    else if ((v288[7] & 0x80000000) == 0)
    {
      goto LABEL_574;
    }
LABEL_569:
    operator delete((void *)v287);
    if (SHIBYTE(v286) < 0)
      goto LABEL_570;
    goto LABEL_575;
  }
  v224 = v284[0];
  *((_DWORD *)v277 + 2) = v284[1];
  *(_QWORD *)v223 = v224;
  v225 = v285;
  *((_QWORD *)v223 + 4) = v286;
  *((_OWORD *)v223 + 1) = v225;
  v286 = 0;
  v285 = 0uLL;
  v226 = *(_QWORD *)v288;
  *(_OWORD *)(v223 + 40) = v287;
  *((_QWORD *)v223 + 7) = v226;
  *(_QWORD *)v288 = 0;
  v287 = 0uLL;
  v227 = *(_OWORD *)&v288[8];
  *((_QWORD *)v223 + 10) = v289;
  *((_OWORD *)v223 + 4) = v227;
  *(_QWORD *)&v288[8] = 0;
  *(_QWORD *)&v288[16] = 0;
  v289 = 0;
  v277 = v223 + 88;
  if ((v288[7] & 0x80000000) != 0)
    goto LABEL_569;
LABEL_574:
  if (SHIBYTE(v286) < 0)
  {
LABEL_570:
    operator delete((void *)v285);
    v228 = *(std::__shared_weak_count **)(v137 + 304);
    if (!v228)
      goto LABEL_579;
    goto LABEL_576;
  }
LABEL_575:
  v228 = *(std::__shared_weak_count **)(v137 + 304);
  if (!v228)
  {
LABEL_579:
    v279 = 0;
    v280 = 0;
    v281 = 0;
    v232 = 0;
    goto LABEL_596;
  }
LABEL_576:
  v229 = std::__shared_weak_count::lock(v228);
  v284[1] = v229;
  if (!v229)
    goto LABEL_579;
  v230 = v229;
  v231 = *(void **)(v137 + 296);
  v284[0] = v231;
  if (v231)
  {
    (*(void (**)(void ***__return_ptr))(*(_QWORD *)v231 + 24))(&v279);
  }
  else
  {
    v279 = 0;
    v280 = 0;
    v281 = 0;
  }
  v233 = (unint64_t *)&v230->__shared_owners_;
  do
    v234 = __ldaxr(v233);
  while (__stlxr(v234 - 1, v233));
  if (v234)
  {
    v232 = v279;
    v235 = v280;
    if (v279 == v280)
      goto LABEL_596;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v230->__on_zero_shared)(v230);
    std::__shared_weak_count::__release_weak(v230);
    v232 = v279;
    v235 = v280;
    if (v279 == v280)
      goto LABEL_596;
  }
  do
  {
    v284[0] = (void *)v194;
    v284[1] = *v232;
    v286 = 0;
    v285 = 0uLL;
    v237 = v274;
    if ((unint64_t)v274 < v275)
    {
      *(_OWORD *)v274 = *(_OWORD *)v284;
      v236 = v285;
      *((_QWORD *)v237 + 4) = v286;
      *((_OWORD *)v237 + 1) = v236;
      v274 = v237 + 40;
    }
    else
    {
      v274 = sub_20EBA5F8C(&v273, (uint64_t)v284);
      if (SHIBYTE(v286) < 0)
        operator delete((void *)v285);
    }
    ++v232;
  }
  while (v232 != v235);
  v232 = v279;
LABEL_596:
  if (v232)
  {
    v280 = v232;
    operator delete(v232);
  }
  v238 = *(std::__shared_weak_count **)(v137 + 304);
  if (!v238 || (v239 = std::__shared_weak_count::lock(v238), (v284[1] = v239) == 0))
  {
    v279 = 0;
    v280 = 0;
    v281 = 0;
    v242 = 0;
    goto LABEL_617;
  }
  v240 = v239;
  v241 = *(void **)(v137 + 296);
  v284[0] = v241;
  if (v241)
  {
    (*(void (**)(void ***__return_ptr))(*(_QWORD *)v241 + 32))(&v279);
  }
  else
  {
    v279 = 0;
    v280 = 0;
    v281 = 0;
  }
  v243 = (unint64_t *)&v240->__shared_owners_;
  do
    v244 = __ldaxr(v243);
  while (__stlxr(v244 - 1, v243));
  if (v244)
  {
    v242 = v279;
    v245 = v280;
    if (v279 == v280)
      goto LABEL_617;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v240->__on_zero_shared)(v240);
    std::__shared_weak_count::__release_weak(v240);
    v242 = v279;
    v245 = v280;
    if (v279 == v280)
      goto LABEL_617;
  }
  do
  {
    v284[0] = (void *)(v194 + 1);
    v284[1] = *v242;
    v286 = 0;
    v285 = 0uLL;
    v247 = v274;
    if ((unint64_t)v274 < v275)
    {
      *(_OWORD *)v274 = *(_OWORD *)v284;
      v246 = v285;
      *((_QWORD *)v247 + 4) = v286;
      *((_OWORD *)v247 + 1) = v246;
      v274 = v247 + 40;
    }
    else
    {
      v274 = sub_20EBA5F8C(&v273, (uint64_t)v284);
      if (SHIBYTE(v286) < 0)
        operator delete((void *)v285);
    }
    ++v242;
  }
  while (v242 != v245);
  v242 = v279;
LABEL_617:
  if (v242)
  {
    v280 = v242;
    operator delete(v242);
  }
  if (SHIBYTE(v283) < 0)
  {
    operator delete(v282[0]);
    if ((SHIBYTE(v291) & 0x80000000) == 0)
    {
LABEL_621:
      if ((SHIBYTE(v293) & 0x80000000) == 0)
        goto LABEL_622;
LABEL_626:
      operator delete((void *)__p);
      if ((*(char *)(a2 + 375) & 0x80000000) == 0)
        goto LABEL_623;
      goto LABEL_627;
    }
  }
  else if ((SHIBYTE(v291) & 0x80000000) == 0)
  {
    goto LABEL_621;
  }
  operator delete((void *)__dst);
  if (SHIBYTE(v293) < 0)
    goto LABEL_626;
LABEL_622:
  if ((*(char *)(a2 + 375) & 0x80000000) == 0)
  {
LABEL_623:
    *(_OWORD *)v284 = *(_OWORD *)(a2 + 352);
    *(_QWORD *)&v285 = *(_QWORD *)(a2 + 368);
    goto LABEL_628;
  }
LABEL_627:
  sub_20E860C04(v284, *(void **)(a2 + 352), *(_QWORD *)(a2 + 360));
LABEL_628:
  v248 = *(_QWORD *)(a2 + 400) != 0;
  if (*(char *)(a2 + 399) < 0)
  {
    sub_20E860C04(&__p, *(void **)(a2 + 376), *(_QWORD *)(a2 + 384));
  }
  else
  {
    __p = *(_OWORD *)(a2 + 376);
    v293 = *(_QWORD *)(a2 + 392);
  }
  sub_20EBA690C((uint64_t)v298, (__int128 *)v284, v248, (uint64_t *)&v276, (uint64_t *)&v273, &__p);
  if ((SHIBYTE(v293) & 0x80000000) == 0)
  {
    if ((SBYTE7(v285) & 0x80000000) == 0)
      goto LABEL_633;
LABEL_643:
    operator delete(v284[0]);
    v249 = (char *)v273;
    if (v273)
      goto LABEL_634;
LABEL_644:
    v251 = (char *)v276;
    if (v276)
      goto LABEL_645;
    goto LABEL_657;
  }
  operator delete((void *)__p);
  if (SBYTE7(v285) < 0)
    goto LABEL_643;
LABEL_633:
  v249 = (char *)v273;
  if (!v273)
    goto LABEL_644;
LABEL_634:
  v250 = v274;
  if (v274 == v249)
  {
    v274 = v249;
    operator delete(v249);
    v251 = (char *)v276;
    if (!v276)
      goto LABEL_657;
LABEL_645:
    v252 = v277;
    v253 = v251;
    if (v277 == v251)
    {
LABEL_656:
      v277 = v251;
      operator delete(v253);
      goto LABEL_657;
    }
    while (1)
    {
      while (*(v252 - 1) < 0)
      {
        operator delete(*((void **)v252 - 3));
        if (*(v252 - 25) < 0)
          goto LABEL_647;
LABEL_653:
        if ((*(v252 - 49) & 0x80000000) == 0)
          goto LABEL_648;
LABEL_654:
        operator delete(*((void **)v252 - 9));
        v252 -= 88;
        if (v252 == v251)
        {
LABEL_655:
          v253 = v276;
          goto LABEL_656;
        }
      }
      if ((*(v252 - 25) & 0x80000000) == 0)
        goto LABEL_653;
LABEL_647:
      operator delete(*((void **)v252 - 6));
      if (*(v252 - 49) < 0)
        goto LABEL_654;
LABEL_648:
      v252 -= 88;
      if (v252 == v251)
        goto LABEL_655;
    }
  }
  do
  {
    if (*(v250 - 1) < 0)
      operator delete(*((void **)v250 - 3));
    v250 -= 40;
  }
  while (v250 != v249);
  v274 = v249;
  operator delete(v273);
  v251 = (char *)v276;
  if (v276)
    goto LABEL_645;
LABEL_657:
  sub_20EBA4824(v272, (uint64_t)v294, 5uLL);
  sub_20EBA8C18((uint64_t)v298);
  sub_20EBA8C18((uint64_t)v297);
  sub_20EBA8C18((uint64_t)v296);
  sub_20EBA8C18((uint64_t)v295);
  return sub_20EBA8C18((uint64_t)v294);
}

void sub_20EC50DB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,void *a38,uint64_t a39,int a40,__int16 a41,char a42,char a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,void *a48,uint64_t a49,int a50,__int16 a51,char a52,char a53,uint64_t a54,void *__p,uint64_t a56,int a57,__int16 a58,char a59,char a60,char a61)
{
  char *v61;

  __cxa_guard_abort(&qword_254A5D880);
  if (a60 < 0)
    operator delete(__p);
  sub_20EBA4920(&a14);
  sub_20EBA4990(&a17);
  do
  {
    v61 -= 128;
    sub_20EBA8C18((uint64_t)v61);
  }
  while (v61 != &a61);
  _Unwind_Resume(a1);
}

uint64_t sub_20EC513A8(uint64_t a1)
{
  _QWORD *v1;
  _QWORD **v2;
  _QWORD **v3;
  uint64_t v4;

  v1 = *(_QWORD **)(a1 + 56);
  v2 = (_QWORD **)v1[12];
  (*(void (**)(_QWORD *))(*v2[9] + 64))(v2[9]);
  (*(void (**)(_QWORD *))(*v2[30] + 64))(v2[30]);
  (*(void (**)(_QWORD *))(*v2[51] + 64))(v2[51]);
  (*(void (**)(_QWORD *))(*v2[72] + 64))(v2[72]);
  (*(void (**)(_QWORD *))(*v2[93] + 64))(v2[93]);
  (*(void (**)(_QWORD *))(*v2[114] + 64))(v2[114]);
  (*(void (**)(_QWORD *))(*v2[135] + 64))(v2[135]);
  (*(void (**)(_QWORD *))(*v2[156] + 64))(v2[156]);
  (*(void (**)(_QWORD *))(*v2[177] + 64))(v2[177]);
  (*(void (**)(_QWORD *))(*v2[198] + 64))(v2[198]);
  (*(void (**)(_QWORD *))(*v2[219] + 64))(v2[219]);
  (*(void (**)(_QWORD *))(*v2[240] + 64))(v2[240]);
  (*(void (**)(_QWORD *))(*v2[261] + 64))(v2[261]);
  (*(void (**)(_QWORD *))(*v2[282] + 64))(v2[282]);
  (*(void (**)(_QWORD *))(*v2[303] + 64))(v2[303]);
  (*(void (**)(_QWORD *))(*v2[324] + 64))(v2[324]);
  (*(void (**)(_QWORD *))(*v2[345] + 64))(v2[345]);
  (*(void (**)(_QWORD *))(*v2[366] + 64))(v2[366]);
  (*(void (**)(_QWORD *))(*v2[387] + 64))(v2[387]);
  (*(void (**)(_QWORD *))(*v2[408] + 64))(v2[408]);
  (*(void (**)(_QWORD *))(*v2[429] + 64))(v2[429]);
  (*(void (**)(_QWORD *))(*v2[450] + 64))(v2[450]);
  (*(void (**)(_QWORD *))(*v2[471] + 64))(v2[471]);
  (*(void (**)(_QWORD *))(*v2[492] + 64))(v2[492]);
  (*(void (**)(_QWORD *))(*v2[513] + 64))(v2[513]);
  (*(void (**)(_QWORD *))(*v2[534] + 64))(v2[534]);
  (*(void (**)(_QWORD *))(*v2[555] + 64))(v2[555]);
  (*(void (**)(_QWORD *))(*v2[576] + 64))(v2[576]);
  (*(void (**)(_QWORD *))(*v2[597] + 64))(v2[597]);
  (*(void (**)(_QWORD *))(*v2[618] + 64))(v2[618]);
  v3 = (_QWORD **)v1[22];
  (*(void (**)(_QWORD *))(*v3[9] + 64))(v3[9]);
  (*(void (**)(_QWORD *))(*v3[30] + 64))(v3[30]);
  (*(void (**)(_QWORD *))(*v3[51] + 64))(v3[51]);
  (*(void (**)(_QWORD *))(*v3[72] + 64))(v3[72]);
  (*(void (**)(_QWORD *))(*v3[93] + 64))(v3[93]);
  (*(void (**)(_QWORD *))(*v3[114] + 64))(v3[114]);
  (*(void (**)(_QWORD *))(*v3[135] + 64))(v3[135]);
  (*(void (**)(_QWORD))(**(_QWORD **)(v1[32] + 72) + 64))(*(_QWORD *)(v1[32] + 72));
  (*(void (**)(_QWORD))(**(_QWORD **)(v1[42] + 72) + 64))(*(_QWORD *)(v1[42] + 72));
  v4 = v1[52];
  (*(void (**)(_QWORD))(**(_QWORD **)(v4 + 72) + 64))(*(_QWORD *)(v4 + 72));
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v4 + 240) + 64))(*(_QWORD *)(v4 + 240));
}

uint64_t sub_20EC51664(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = off_24C9D0ED0;
  v2 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 56) = 0;
  if (v2)
    (*(void (**)(void))(a1 + 64))();
  *(_QWORD *)a1 = off_24CA1E1D8;
  if (*(char *)(a1 + 55) < 0)
  {
    operator delete(*(void **)(a1 + 32));
    if ((*(char *)(a1 + 31) & 0x80000000) == 0)
      return a1;
  }
  else if ((*(char *)(a1 + 31) & 0x80000000) == 0)
  {
    return a1;
  }
  operator delete(*(void **)(a1 + 8));
  return a1;
}

void sub_20EC516EC(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = off_24C9D0ED0;
  v2 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 56) = 0;
  if (v2)
    (*(void (**)(void))(a1 + 64))();
  *(_QWORD *)a1 = off_24CA1E1D8;
  if (*(char *)(a1 + 55) < 0)
  {
    operator delete(*(void **)(a1 + 32));
    if ((*(char *)(a1 + 31) & 0x80000000) == 0)
LABEL_8:
      JUMPOUT(0x212BC6398);
  }
  else if ((*(char *)(a1 + 31) & 0x80000000) == 0)
  {
    goto LABEL_8;
  }
  operator delete(*(void **)(a1 + 8));
  goto LABEL_8;
}

uint64_t *sub_20EC51778@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  unint64_t *v7;
  int v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  std::runtime_error *exception;
  std::runtime_error *v18;
  std::runtime_error v19;
  uint64_t v20;
  uint64_t v21;
  std::__shared_weak_count *v22;
  uint64_t v23;

  v6 = operator new();
  *(_QWORD *)(v6 + 8) = 0;
  v7 = (unint64_t *)(v6 + 8);
  *(_QWORD *)(v6 + 24) = 850045863;
  *(_QWORD *)(v6 + 16) = 0;
  *(_OWORD *)(v6 + 32) = 0u;
  *(_OWORD *)(v6 + 48) = 0u;
  *(_OWORD *)(v6 + 64) = 0u;
  *(_QWORD *)(v6 + 80) = 0;
  *(_QWORD *)(v6 + 88) = 1018212795;
  *(_OWORD *)(v6 + 96) = 0u;
  *(_OWORD *)(v6 + 112) = 0u;
  *(_OWORD *)(v6 + 124) = 0u;
  *(_QWORD *)v6 = &off_24C9D0F18;
  v23 = v6;
  *a3 = v6;
  std::mutex::lock((std::mutex *)(v6 + 24));
  v8 = *(_DWORD *)(v6 + 136);
  if ((v8 & 2) != 0)
    sub_20E96CE78(1u);
  do
    v9 = __ldxr(v7);
  while (__stxr(v9 + 1, v7));
  *(_DWORD *)(v6 + 136) = v8 | 2;
  std::mutex::unlock((std::mutex *)(v6 + 24));
  v21 = 0;
  v22 = 0;
  v10 = (std::__shared_weak_count *)a1[1];
  if (!v10
    || (v11 = std::__shared_weak_count::lock(v10), (v22 = v11) == 0)
    || (v12 = v11, v13 = *a1, (v21 = v13) == 0))
  {
    std::runtime_error::runtime_error(&v19, "ChannelInputWithPromise: Invalid operation. Processor is released.");
    v19.__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v18 = std::runtime_error::runtime_error(exception, &v19);
    v18->__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    __cxa_throw(v18, (struct type_info *)&unk_24CA1E2D0, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  v20 = v23;
  v23 = 0;
  (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(_QWORD *)v13 + 56))(v13, a2, &v20);
  sub_20EC51B78(&v20);
  p_shared_owners = (unint64_t *)&v12->__shared_owners_;
  do
    v15 = __ldaxr(p_shared_owners);
  while (__stlxr(v15 - 1, p_shared_owners));
  if (!v15)
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
  return sub_20EC51B78(&v23);
}

void sub_20EC5192C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  unint64_t *v4;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  va_list va;
  uint64_t v10;
  va_list va1;
  uint64_t v12;
  va_list va2;

  va_start(va2, a4);
  va_start(va1, a4);
  va_start(va, a4);
  v8 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v10 = va_arg(va2, _QWORD);
  v12 = va_arg(va2, _QWORD);
  sub_20EC51B78((uint64_t *)va);
  sub_20E86665C((uint64_t)va1);
  v6 = v4 + 1;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
    (*(void (**)(unint64_t *))(*v4 + 16))(v4);
  sub_20EC51B78((uint64_t *)va2);
  _Unwind_Resume(a1);
}

void sub_20EC5193C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  std::mutex *v15;

  std::mutex::unlock(v15);
  sub_20EC51B78(&a15);
  _Unwind_Resume(a1);
}

void sub_20EC51958(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_20EC51B78((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20EC5196C(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, std::runtime_error a9, std::exception_ptr a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__assoc_sub_state *a14, std::exception_ptr a15)
{
  std::__assoc_sub_state *v15;
  std::exception_ptr v16;

  __cxa_begin_catch(a1);
  std::current_exception();
  __cxa_end_catch();
  v15 = a14;
  if (a14)
  {
    std::exception_ptr::exception_ptr(&a15, &a10);
    v16.__ptr_ = &a15;
    std::__assoc_sub_state::set_exception(v15, v16);
    std::exception_ptr::~exception_ptr(&a15);
    std::exception_ptr::~exception_ptr(&a10);
    std::runtime_error::~runtime_error(&a9);
    if (!a13)
      JUMPOUT(0x20EC518B8);
    JUMPOUT(0x20EC51888);
  }
  sub_20E96CE78(3u);
}

void sub_20EC519CC(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, std::runtime_error a9, std::exception_ptr a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, std::exception_ptr a15)
{
  uint64_t *v15;
  uint64_t v16;

  std::exception_ptr::~exception_ptr(&a10);
  std::runtime_error::~runtime_error(&a9);
  v16 = *v15;
  sub_20E86665C((uint64_t)&a12);
  if (!v16)
    JUMPOUT(0x20EC51A3CLL);
  JUMPOUT(0x20EC51A14);
}

void sub_20EC51A4C(uint64_t a1)
{
  std::exception_ptr *v2;

  *(_QWORD *)a1 = MEMORY[0x24BEDB850] + 16;
  v2 = (std::exception_ptr *)(a1 + 16);
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 88));
  std::mutex::~mutex((std::mutex *)(a1 + 24));
  std::exception_ptr::~exception_ptr(v2);
  std::__shared_count::~__shared_count((std::__shared_count *)a1);
}

void sub_20EC51A98(uint64_t a1)
{
  std::exception_ptr *v2;

  *(_QWORD *)a1 = MEMORY[0x24BEDB850] + 16;
  v2 = (std::exception_ptr *)(a1 + 16);
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 88));
  std::mutex::~mutex((std::mutex *)(a1 + 24));
  std::exception_ptr::~exception_ptr(v2);
  std::__shared_count::~__shared_count((std::__shared_count *)a1);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20EC51AF8(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  if ((*(_BYTE *)(a1 + 136) & 1) == 0)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 8))(a1);
  v2 = *(std::__shared_weak_count **)(a1 + 152);
  if (!v2)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 8))(a1);
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 8))(a1);
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 8))(a1);
}

uint64_t *sub_20EC51B78(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  const std::error_category *v7;
  std::logic_error *exception;
  std::logic_error *v9;
  std::logic_error v10;
  std::logic_error v11;
  std::exception_ptr v12;

  v2 = *a1;
  if (!v2)
    return a1;
  if ((*(_BYTE *)(v2 + 136) & 1) == 0)
  {
    v12.__ptr_ = 0;
    v3 = *(_QWORD *)(v2 + 16);
    std::exception_ptr::~exception_ptr(&v12);
    v2 = *a1;
    if (!v3 && *(uint64_t *)(v2 + 8) >= 1)
    {
      v7 = std::future_category();
      MEMORY[0x212BC5AF8](&v10, 4, v7);
      exception = (std::logic_error *)__cxa_allocate_exception(0x20uLL);
      v9 = std::logic_error::logic_error(exception, &v10);
      v9->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB810] + 16);
      v9[1] = v11;
      __cxa_throw(v9, MEMORY[0x24BEDB6E0], (void (*)(void *))MEMORY[0x24BEDAD80]);
    }
  }
  v4 = (unint64_t *)(v2 + 8);
  do
    v5 = __ldaxr(v4);
  while (__stlxr(v5 - 1, v4));
  if (v5)
    return a1;
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 16))(v2);
  return a1;
}

void sub_20EC51C64(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__assoc_sub_state *a10, std::logic_error a11)
{
  uint64_t v11;
  std::exception_ptr v12;

  __cxa_begin_catch(a1);
  std::current_exception();
  __cxa_end_catch();
  v12.__ptr_ = (void *)(v11 - 32);
  std::__assoc_sub_state::set_exception(a10, v12);
  std::exception_ptr::~exception_ptr((std::exception_ptr *)(v11 - 32));
  std::logic_error::~logic_error(&a11);
  JUMPOUT(0x20EC51BC0);
}

void sub_20EC51CA0(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v4;
  std::exception_ptr v5;
  std::exception_ptr v6;
  std::exception_ptr v7;
  std::unique_lock<std::mutex> __lk;

  __lk.__m_ = (std::unique_lock<std::mutex>::mutex_type *)(a1 + 24);
  __lk.__owns_ = 1;
  std::mutex::lock((std::mutex *)(a1 + 24));
  std::__assoc_sub_state::__sub_wait((std::__assoc_sub_state *)a1, &__lk);
  v4 = *(_QWORD *)(a1 + 16);
  v7.__ptr_ = 0;
  std::exception_ptr::~exception_ptr(&v7);
  if (v4)
  {
    std::exception_ptr::exception_ptr(&v6, (const std::exception_ptr *)(a1 + 16));
    v5.__ptr_ = &v6;
    std::rethrow_exception(v5);
    __break(1u);
  }
  else
  {
    *a2 = *(_OWORD *)(a1 + 144);
    *(_QWORD *)(a1 + 144) = 0;
    *(_QWORD *)(a1 + 152) = 0;
    if (__lk.__owns_)
      std::mutex::unlock(__lk.__m_);
  }
}

void sub_20EC51D3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::mutex *a11, char a12)
{
  std::exception_ptr::~exception_ptr((std::exception_ptr *)&a9);
  if (a12)
    std::mutex::unlock(a11);
  _Unwind_Resume(a1);
}

uint64_t *sub_20EC51D68@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  unint64_t *v7;
  int v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  std::runtime_error *exception;
  std::runtime_error *v18;
  std::runtime_error v19;
  uint64_t v20;
  uint64_t v21;
  std::__shared_weak_count *v22;
  uint64_t v23;

  v6 = operator new();
  *(_QWORD *)(v6 + 8) = 0;
  v7 = (unint64_t *)(v6 + 8);
  *(_QWORD *)(v6 + 24) = 850045863;
  *(_QWORD *)(v6 + 16) = 0;
  *(_OWORD *)(v6 + 32) = 0u;
  *(_OWORD *)(v6 + 48) = 0u;
  *(_OWORD *)(v6 + 64) = 0u;
  *(_QWORD *)(v6 + 80) = 0;
  *(_QWORD *)(v6 + 88) = 1018212795;
  *(_OWORD *)(v6 + 96) = 0u;
  *(_OWORD *)(v6 + 112) = 0u;
  *(_OWORD *)(v6 + 124) = 0u;
  *(_QWORD *)v6 = &off_24C9D0F60;
  v23 = v6;
  *a3 = v6;
  std::mutex::lock((std::mutex *)(v6 + 24));
  v8 = *(_DWORD *)(v6 + 136);
  if ((v8 & 2) != 0)
    sub_20E96CE78(1u);
  do
    v9 = __ldxr(v7);
  while (__stxr(v9 + 1, v7));
  *(_DWORD *)(v6 + 136) = v8 | 2;
  std::mutex::unlock((std::mutex *)(v6 + 24));
  v21 = 0;
  v22 = 0;
  v10 = (std::__shared_weak_count *)a1[1];
  if (!v10
    || (v11 = std::__shared_weak_count::lock(v10), (v22 = v11) == 0)
    || (v12 = v11, v13 = *a1, (v21 = v13) == 0))
  {
    std::runtime_error::runtime_error(&v19, "ChannelInputWithPromise: Invalid operation. Processor is released.");
    v19.__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v18 = std::runtime_error::runtime_error(exception, &v19);
    v18->__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    __cxa_throw(v18, (struct type_info *)&unk_24CA1E2D0, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  v20 = v23;
  v23 = 0;
  (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(_QWORD *)v13 + 56))(v13, a2, &v20);
  sub_20EC52168(&v20);
  p_shared_owners = (unint64_t *)&v12->__shared_owners_;
  do
    v15 = __ldaxr(p_shared_owners);
  while (__stlxr(v15 - 1, p_shared_owners));
  if (!v15)
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
  return sub_20EC52168(&v23);
}

void sub_20EC51F1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  unint64_t *v4;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  va_list va;
  uint64_t v10;
  va_list va1;
  uint64_t v12;
  va_list va2;

  va_start(va2, a4);
  va_start(va1, a4);
  va_start(va, a4);
  v8 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v10 = va_arg(va2, _QWORD);
  v12 = va_arg(va2, _QWORD);
  sub_20EC52168((uint64_t *)va);
  sub_20E86665C((uint64_t)va1);
  v6 = v4 + 1;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
    (*(void (**)(unint64_t *))(*v4 + 16))(v4);
  sub_20EC52168((uint64_t *)va2);
  _Unwind_Resume(a1);
}

void sub_20EC51F2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  std::mutex *v15;

  std::mutex::unlock(v15);
  sub_20EC52168(&a15);
  _Unwind_Resume(a1);
}

void sub_20EC51F48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_20EC52168((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20EC51F5C(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, std::runtime_error a9, std::exception_ptr a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__assoc_sub_state *a14, std::exception_ptr a15)
{
  std::__assoc_sub_state *v15;
  std::exception_ptr v16;

  __cxa_begin_catch(a1);
  std::current_exception();
  __cxa_end_catch();
  v15 = a14;
  if (a14)
  {
    std::exception_ptr::exception_ptr(&a15, &a10);
    v16.__ptr_ = &a15;
    std::__assoc_sub_state::set_exception(v15, v16);
    std::exception_ptr::~exception_ptr(&a15);
    std::exception_ptr::~exception_ptr(&a10);
    std::runtime_error::~runtime_error(&a9);
    if (!a13)
      JUMPOUT(0x20EC51EA8);
    JUMPOUT(0x20EC51E78);
  }
  sub_20E96CE78(3u);
}

void sub_20EC51FBC(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, std::runtime_error a9, std::exception_ptr a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, std::exception_ptr a15)
{
  uint64_t *v15;
  uint64_t v16;

  std::exception_ptr::~exception_ptr(&a10);
  std::runtime_error::~runtime_error(&a9);
  v16 = *v15;
  sub_20E86665C((uint64_t)&a12);
  if (!v16)
    JUMPOUT(0x20EC5202CLL);
  JUMPOUT(0x20EC52004);
}

void sub_20EC5203C(uint64_t a1)
{
  std::exception_ptr *v2;

  *(_QWORD *)a1 = MEMORY[0x24BEDB850] + 16;
  v2 = (std::exception_ptr *)(a1 + 16);
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 88));
  std::mutex::~mutex((std::mutex *)(a1 + 24));
  std::exception_ptr::~exception_ptr(v2);
  std::__shared_count::~__shared_count((std::__shared_count *)a1);
}

void sub_20EC52088(uint64_t a1)
{
  std::exception_ptr *v2;

  *(_QWORD *)a1 = MEMORY[0x24BEDB850] + 16;
  v2 = (std::exception_ptr *)(a1 + 16);
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 88));
  std::mutex::~mutex((std::mutex *)(a1 + 24));
  std::exception_ptr::~exception_ptr(v2);
  std::__shared_count::~__shared_count((std::__shared_count *)a1);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20EC520E8(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  if ((*(_BYTE *)(a1 + 136) & 1) == 0)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 8))(a1);
  v2 = *(std::__shared_weak_count **)(a1 + 152);
  if (!v2)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 8))(a1);
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 8))(a1);
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 8))(a1);
}

uint64_t *sub_20EC52168(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  const std::error_category *v7;
  std::logic_error *exception;
  std::logic_error *v9;
  std::logic_error v10;
  std::logic_error v11;
  std::exception_ptr v12;

  v2 = *a1;
  if (!v2)
    return a1;
  if ((*(_BYTE *)(v2 + 136) & 1) == 0)
  {
    v12.__ptr_ = 0;
    v3 = *(_QWORD *)(v2 + 16);
    std::exception_ptr::~exception_ptr(&v12);
    v2 = *a1;
    if (!v3 && *(uint64_t *)(v2 + 8) >= 1)
    {
      v7 = std::future_category();
      MEMORY[0x212BC5AF8](&v10, 4, v7);
      exception = (std::logic_error *)__cxa_allocate_exception(0x20uLL);
      v9 = std::logic_error::logic_error(exception, &v10);
      v9->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB810] + 16);
      v9[1] = v11;
      __cxa_throw(v9, MEMORY[0x24BEDB6E0], (void (*)(void *))MEMORY[0x24BEDAD80]);
    }
  }
  v4 = (unint64_t *)(v2 + 8);
  do
    v5 = __ldaxr(v4);
  while (__stlxr(v5 - 1, v4));
  if (v5)
    return a1;
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 16))(v2);
  return a1;
}

void sub_20EC52254(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__assoc_sub_state *a10, std::logic_error a11)
{
  uint64_t v11;
  std::exception_ptr v12;

  __cxa_begin_catch(a1);
  std::current_exception();
  __cxa_end_catch();
  v12.__ptr_ = (void *)(v11 - 32);
  std::__assoc_sub_state::set_exception(a10, v12);
  std::exception_ptr::~exception_ptr((std::exception_ptr *)(v11 - 32));
  std::logic_error::~logic_error(&a11);
  JUMPOUT(0x20EC521B0);
}

uint64_t *sub_20EC52290@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  unint64_t *v7;
  int v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  std::runtime_error *exception;
  std::runtime_error *v18;
  std::runtime_error v19;
  uint64_t v20;
  uint64_t v21;
  std::__shared_weak_count *v22;
  uint64_t v23;

  v6 = operator new();
  *(_QWORD *)(v6 + 8) = 0;
  v7 = (unint64_t *)(v6 + 8);
  *(_QWORD *)(v6 + 24) = 850045863;
  *(_QWORD *)(v6 + 16) = 0;
  *(_OWORD *)(v6 + 32) = 0u;
  *(_OWORD *)(v6 + 48) = 0u;
  *(_OWORD *)(v6 + 64) = 0u;
  *(_QWORD *)(v6 + 80) = 0;
  *(_QWORD *)(v6 + 88) = 1018212795;
  *(_OWORD *)(v6 + 96) = 0u;
  *(_OWORD *)(v6 + 112) = 0u;
  *(_OWORD *)(v6 + 124) = 0u;
  *(_QWORD *)v6 = &off_24C9CC470;
  v23 = v6;
  *a3 = v6;
  std::mutex::lock((std::mutex *)(v6 + 24));
  v8 = *(_DWORD *)(v6 + 136);
  if ((v8 & 2) != 0)
    sub_20E96CE78(1u);
  do
    v9 = __ldxr(v7);
  while (__stxr(v9 + 1, v7));
  *(_DWORD *)(v6 + 136) = v8 | 2;
  std::mutex::unlock((std::mutex *)(v6 + 24));
  v21 = 0;
  v22 = 0;
  v10 = (std::__shared_weak_count *)a1[1];
  if (!v10
    || (v11 = std::__shared_weak_count::lock(v10), (v22 = v11) == 0)
    || (v12 = v11, v13 = *a1, (v21 = v13) == 0))
  {
    std::runtime_error::runtime_error(&v19, "ChannelInputWithPromise: Invalid operation. Processor is released.");
    v19.__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v18 = std::runtime_error::runtime_error(exception, &v19);
    v18->__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    __cxa_throw(v18, (struct type_info *)&unk_24CA1E2D0, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  v20 = v23;
  v23 = 0;
  (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(_QWORD *)v13 + 56))(v13, a2, &v20);
  sub_20EBF0AB0(&v20);
  p_shared_owners = (unint64_t *)&v12->__shared_owners_;
  do
    v15 = __ldaxr(p_shared_owners);
  while (__stlxr(v15 - 1, p_shared_owners));
  if (!v15)
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
  return sub_20EBF0AB0(&v23);
}

void sub_20EC52444(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  unint64_t *v4;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  va_list va;
  uint64_t v10;
  va_list va1;
  uint64_t v12;
  va_list va2;

  va_start(va2, a4);
  va_start(va1, a4);
  va_start(va, a4);
  v8 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v10 = va_arg(va2, _QWORD);
  v12 = va_arg(va2, _QWORD);
  sub_20EBF0AB0((uint64_t *)va);
  sub_20E86665C((uint64_t)va1);
  v6 = v4 + 1;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
    (*(void (**)(unint64_t *))(*v4 + 16))(v4);
  sub_20EBF0AB0((uint64_t *)va2);
  _Unwind_Resume(a1);
}

void sub_20EC52454(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  std::mutex *v15;

  std::mutex::unlock(v15);
  sub_20EBF0AB0(&a15);
  _Unwind_Resume(a1);
}

void sub_20EC52470(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_20EBF0AB0((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20EC52484(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, std::runtime_error a9, std::exception_ptr a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__assoc_sub_state *a14, std::exception_ptr a15)
{
  std::__assoc_sub_state *v15;
  std::exception_ptr v16;

  __cxa_begin_catch(a1);
  std::current_exception();
  __cxa_end_catch();
  v15 = a14;
  if (a14)
  {
    std::exception_ptr::exception_ptr(&a15, &a10);
    v16.__ptr_ = &a15;
    std::__assoc_sub_state::set_exception(v15, v16);
    std::exception_ptr::~exception_ptr(&a15);
    std::exception_ptr::~exception_ptr(&a10);
    std::runtime_error::~runtime_error(&a9);
    if (!a13)
      JUMPOUT(0x20EC523D0);
    JUMPOUT(0x20EC523A0);
  }
  sub_20E96CE78(3u);
}

void sub_20EC524E4(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, std::runtime_error a9, std::exception_ptr a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, std::exception_ptr a15)
{
  uint64_t *v15;
  uint64_t v16;

  std::exception_ptr::~exception_ptr(&a10);
  std::runtime_error::~runtime_error(&a9);
  v16 = *v15;
  sub_20E86665C((uint64_t)&a12);
  if (!v16)
    JUMPOUT(0x20EC52554);
  JUMPOUT(0x20EC5252CLL);
}

uint64_t *sub_20EC52564@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  unint64_t *v7;
  int v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  std::runtime_error *exception;
  std::runtime_error *v18;
  std::runtime_error v19;
  uint64_t v20;
  uint64_t v21;
  std::__shared_weak_count *v22;
  uint64_t v23;

  v6 = operator new();
  *(_QWORD *)(v6 + 8) = 0;
  v7 = (unint64_t *)(v6 + 8);
  *(_QWORD *)(v6 + 24) = 850045863;
  *(_QWORD *)(v6 + 16) = 0;
  *(_OWORD *)(v6 + 32) = 0u;
  *(_OWORD *)(v6 + 48) = 0u;
  *(_OWORD *)(v6 + 64) = 0u;
  *(_QWORD *)(v6 + 80) = 0;
  *(_QWORD *)(v6 + 88) = 1018212795;
  *(_OWORD *)(v6 + 96) = 0u;
  *(_OWORD *)(v6 + 112) = 0u;
  *(_OWORD *)(v6 + 124) = 0u;
  *(_QWORD *)v6 = &off_24C9D0FA8;
  v23 = v6;
  *a3 = v6;
  std::mutex::lock((std::mutex *)(v6 + 24));
  v8 = *(_DWORD *)(v6 + 136);
  if ((v8 & 2) != 0)
    sub_20E96CE78(1u);
  do
    v9 = __ldxr(v7);
  while (__stxr(v9 + 1, v7));
  *(_DWORD *)(v6 + 136) = v8 | 2;
  std::mutex::unlock((std::mutex *)(v6 + 24));
  v21 = 0;
  v22 = 0;
  v10 = (std::__shared_weak_count *)a1[1];
  if (!v10
    || (v11 = std::__shared_weak_count::lock(v10), (v22 = v11) == 0)
    || (v12 = v11, v13 = *a1, (v21 = v13) == 0))
  {
    std::runtime_error::runtime_error(&v19, "ChannelInputWithPromise: Invalid operation. Processor is released.");
    v19.__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v18 = std::runtime_error::runtime_error(exception, &v19);
    v18->__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    __cxa_throw(v18, (struct type_info *)&unk_24CA1E2D0, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  v20 = v23;
  v23 = 0;
  (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(_QWORD *)v13 + 56))(v13, a2, &v20);
  sub_20EC52964(&v20);
  p_shared_owners = (unint64_t *)&v12->__shared_owners_;
  do
    v15 = __ldaxr(p_shared_owners);
  while (__stlxr(v15 - 1, p_shared_owners));
  if (!v15)
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
  return sub_20EC52964(&v23);
}

void sub_20EC52718(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  unint64_t *v4;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  va_list va;
  uint64_t v10;
  va_list va1;
  uint64_t v12;
  va_list va2;

  va_start(va2, a4);
  va_start(va1, a4);
  va_start(va, a4);
  v8 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v10 = va_arg(va2, _QWORD);
  v12 = va_arg(va2, _QWORD);
  sub_20EC52964((uint64_t *)va);
  sub_20E86665C((uint64_t)va1);
  v6 = v4 + 1;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
    (*(void (**)(unint64_t *))(*v4 + 16))(v4);
  sub_20EC52964((uint64_t *)va2);
  _Unwind_Resume(a1);
}

void sub_20EC52728(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  std::mutex *v15;

  std::mutex::unlock(v15);
  sub_20EC52964(&a15);
  _Unwind_Resume(a1);
}

void sub_20EC52744(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_20EC52964((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20EC52758(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, std::runtime_error a9, std::exception_ptr a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__assoc_sub_state *a14, std::exception_ptr a15)
{
  std::__assoc_sub_state *v15;
  std::exception_ptr v16;

  __cxa_begin_catch(a1);
  std::current_exception();
  __cxa_end_catch();
  v15 = a14;
  if (a14)
  {
    std::exception_ptr::exception_ptr(&a15, &a10);
    v16.__ptr_ = &a15;
    std::__assoc_sub_state::set_exception(v15, v16);
    std::exception_ptr::~exception_ptr(&a15);
    std::exception_ptr::~exception_ptr(&a10);
    std::runtime_error::~runtime_error(&a9);
    if (!a13)
      JUMPOUT(0x20EC526A4);
    JUMPOUT(0x20EC52674);
  }
  sub_20E96CE78(3u);
}

void sub_20EC527B8(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, std::runtime_error a9, std::exception_ptr a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, std::exception_ptr a15)
{
  uint64_t *v15;
  uint64_t v16;

  std::exception_ptr::~exception_ptr(&a10);
  std::runtime_error::~runtime_error(&a9);
  v16 = *v15;
  sub_20E86665C((uint64_t)&a12);
  if (!v16)
    JUMPOUT(0x20EC52828);
  JUMPOUT(0x20EC52800);
}

void sub_20EC52838(uint64_t a1)
{
  std::exception_ptr *v2;

  *(_QWORD *)a1 = MEMORY[0x24BEDB850] + 16;
  v2 = (std::exception_ptr *)(a1 + 16);
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 88));
  std::mutex::~mutex((std::mutex *)(a1 + 24));
  std::exception_ptr::~exception_ptr(v2);
  std::__shared_count::~__shared_count((std::__shared_count *)a1);
}

void sub_20EC52884(uint64_t a1)
{
  std::exception_ptr *v2;

  *(_QWORD *)a1 = MEMORY[0x24BEDB850] + 16;
  v2 = (std::exception_ptr *)(a1 + 16);
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 88));
  std::mutex::~mutex((std::mutex *)(a1 + 24));
  std::exception_ptr::~exception_ptr(v2);
  std::__shared_count::~__shared_count((std::__shared_count *)a1);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20EC528E4(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  if ((*(_BYTE *)(a1 + 136) & 1) == 0)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 8))(a1);
  v2 = *(std::__shared_weak_count **)(a1 + 152);
  if (!v2)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 8))(a1);
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 8))(a1);
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 8))(a1);
}

uint64_t *sub_20EC52964(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  const std::error_category *v7;
  std::logic_error *exception;
  std::logic_error *v9;
  std::logic_error v10;
  std::logic_error v11;
  std::exception_ptr v12;

  v2 = *a1;
  if (!v2)
    return a1;
  if ((*(_BYTE *)(v2 + 136) & 1) == 0)
  {
    v12.__ptr_ = 0;
    v3 = *(_QWORD *)(v2 + 16);
    std::exception_ptr::~exception_ptr(&v12);
    v2 = *a1;
    if (!v3 && *(uint64_t *)(v2 + 8) >= 1)
    {
      v7 = std::future_category();
      MEMORY[0x212BC5AF8](&v10, 4, v7);
      exception = (std::logic_error *)__cxa_allocate_exception(0x20uLL);
      v9 = std::logic_error::logic_error(exception, &v10);
      v9->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB810] + 16);
      v9[1] = v11;
      __cxa_throw(v9, MEMORY[0x24BEDB6E0], (void (*)(void *))MEMORY[0x24BEDAD80]);
    }
  }
  v4 = (unint64_t *)(v2 + 8);
  do
    v5 = __ldaxr(v4);
  while (__stlxr(v5 - 1, v4));
  if (v5)
    return a1;
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 16))(v2);
  return a1;
}

void sub_20EC52A50(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__assoc_sub_state *a10, std::logic_error a11)
{
  uint64_t v11;
  std::exception_ptr v12;

  __cxa_begin_catch(a1);
  std::current_exception();
  __cxa_end_catch();
  v12.__ptr_ = (void *)(v11 - 32);
  std::__assoc_sub_state::set_exception(a10, v12);
  std::exception_ptr::~exception_ptr((std::exception_ptr *)(v11 - 32));
  std::logic_error::~logic_error(&a11);
  JUMPOUT(0x20EC529ACLL);
}

uint64_t *sub_20EC52A8C@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  unint64_t *v7;
  int v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  std::runtime_error *exception;
  std::runtime_error *v18;
  std::runtime_error v19;
  uint64_t v20;
  uint64_t v21;
  std::__shared_weak_count *v22;
  uint64_t v23;

  v6 = operator new();
  *(_QWORD *)(v6 + 8) = 0;
  v7 = (unint64_t *)(v6 + 8);
  *(_QWORD *)(v6 + 24) = 850045863;
  *(_QWORD *)(v6 + 16) = 0;
  *(_OWORD *)(v6 + 32) = 0u;
  *(_OWORD *)(v6 + 48) = 0u;
  *(_OWORD *)(v6 + 64) = 0u;
  *(_QWORD *)(v6 + 80) = 0;
  *(_QWORD *)(v6 + 88) = 1018212795;
  *(_OWORD *)(v6 + 96) = 0u;
  *(_OWORD *)(v6 + 112) = 0u;
  *(_OWORD *)(v6 + 124) = 0u;
  *(_QWORD *)v6 = &off_24C9CC4B8;
  v23 = v6;
  *a3 = v6;
  std::mutex::lock((std::mutex *)(v6 + 24));
  v8 = *(_DWORD *)(v6 + 136);
  if ((v8 & 2) != 0)
    sub_20E96CE78(1u);
  do
    v9 = __ldxr(v7);
  while (__stxr(v9 + 1, v7));
  *(_DWORD *)(v6 + 136) = v8 | 2;
  std::mutex::unlock((std::mutex *)(v6 + 24));
  v21 = 0;
  v22 = 0;
  v10 = (std::__shared_weak_count *)a1[1];
  if (!v10
    || (v11 = std::__shared_weak_count::lock(v10), (v22 = v11) == 0)
    || (v12 = v11, v13 = *a1, (v21 = v13) == 0))
  {
    std::runtime_error::runtime_error(&v19, "ChannelInputWithPromise: Invalid operation. Processor is released.");
    v19.__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v18 = std::runtime_error::runtime_error(exception, &v19);
    v18->__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    __cxa_throw(v18, (struct type_info *)&unk_24CA1E2D0, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  v20 = v23;
  v23 = 0;
  (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(_QWORD *)v13 + 56))(v13, a2, &v20);
  sub_20EBF0C90(&v20);
  p_shared_owners = (unint64_t *)&v12->__shared_owners_;
  do
    v15 = __ldaxr(p_shared_owners);
  while (__stlxr(v15 - 1, p_shared_owners));
  if (!v15)
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
  return sub_20EBF0C90(&v23);
}

void sub_20EC52C40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  unint64_t *v4;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  va_list va;
  uint64_t v10;
  va_list va1;
  uint64_t v12;
  va_list va2;

  va_start(va2, a4);
  va_start(va1, a4);
  va_start(va, a4);
  v8 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v10 = va_arg(va2, _QWORD);
  v12 = va_arg(va2, _QWORD);
  sub_20EBF0C90((uint64_t *)va);
  sub_20E86665C((uint64_t)va1);
  v6 = v4 + 1;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
    (*(void (**)(unint64_t *))(*v4 + 16))(v4);
  sub_20EBF0C90((uint64_t *)va2);
  _Unwind_Resume(a1);
}

void sub_20EC52C50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  std::mutex *v15;

  std::mutex::unlock(v15);
  sub_20EBF0C90(&a15);
  _Unwind_Resume(a1);
}

void sub_20EC52C6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_20EBF0C90((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20EC52C80(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, std::runtime_error a9, std::exception_ptr a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__assoc_sub_state *a14, std::exception_ptr a15)
{
  std::__assoc_sub_state *v15;
  std::exception_ptr v16;

  __cxa_begin_catch(a1);
  std::current_exception();
  __cxa_end_catch();
  v15 = a14;
  if (a14)
  {
    std::exception_ptr::exception_ptr(&a15, &a10);
    v16.__ptr_ = &a15;
    std::__assoc_sub_state::set_exception(v15, v16);
    std::exception_ptr::~exception_ptr(&a15);
    std::exception_ptr::~exception_ptr(&a10);
    std::runtime_error::~runtime_error(&a9);
    if (!a13)
      JUMPOUT(0x20EC52BCCLL);
    JUMPOUT(0x20EC52B9CLL);
  }
  sub_20E96CE78(3u);
}

void sub_20EC52CE0(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, std::runtime_error a9, std::exception_ptr a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, std::exception_ptr a15)
{
  uint64_t *v15;
  uint64_t v16;

  std::exception_ptr::~exception_ptr(&a10);
  std::runtime_error::~runtime_error(&a9);
  v16 = *v15;
  sub_20E86665C((uint64_t)&a12);
  if (!v16)
    JUMPOUT(0x20EC52D50);
  JUMPOUT(0x20EC52D28);
}

void sub_20EC52D60(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  uint64_t *v7;
  __int128 v8;
  uint64_t v9;
  __int128 *v10;
  char *v11;
  __int128 *v12;
  char *v13;
  __int128 v14;
  uint64_t *v15;
  __int128 v16;
  uint64_t v17;
  void **v18;
  char *v19;
  void **v20;
  char *v21;
  int v24;
  size_t v25;
  unint64_t v26;
  __int128 *v27;
  uint64_t v28;
  uint64_t v29;
  __int128 *p_dst;
  char *v31;
  uint64_t v32;
  __int128 v33;
  uint64_t v34;
  __int128 v35;
  std::__shared_weak_count *v36;
  std::__shared_weak_count *v37;
  std::__shared_weak_count *v38;
  uint64_t v39;
  _QWORD *v40;
  unint64_t *p_shared_owners;
  unint64_t v42;
  _QWORD *v43;
  __int128 v44;
  char *v45;
  std::__shared_weak_count *v46;
  std::__shared_weak_count *v47;
  std::__shared_weak_count *v48;
  uint64_t v49;
  _QWORD *v50;
  unint64_t *v51;
  unint64_t v52;
  _QWORD *v53;
  uint64_t v54;
  __int128 v55;
  char *v56;
  uint64_t v57;
  unsigned __int8 v58;
  uint64_t v59;
  __int128 *v60;
  char *v61;
  __int128 *v62;
  char *v63;
  char *v64;
  uint64_t v65;
  __int128 v66;
  uint64_t v67;
  __int128 v68;
  uint64_t *v69;
  __int128 v70;
  uint64_t v71;
  void **v72;
  char *v73;
  void **v74;
  char *v75;
  int v78;
  size_t v79;
  unint64_t v80;
  __int128 *v81;
  uint64_t v82;
  uint64_t v83;
  __int128 *v84;
  char *v85;
  uint64_t v86;
  __int128 v87;
  uint64_t v88;
  __int128 v89;
  std::__shared_weak_count *v90;
  std::__shared_weak_count *v91;
  std::__shared_weak_count *v92;
  uint64_t v93;
  _QWORD *v94;
  unint64_t *v95;
  unint64_t v96;
  _QWORD *v97;
  __int128 v98;
  char *v99;
  std::__shared_weak_count *v100;
  std::__shared_weak_count *v101;
  std::__shared_weak_count *v102;
  uint64_t v103;
  _QWORD *v104;
  unint64_t *v105;
  unint64_t v106;
  _QWORD *v107;
  uint64_t v108;
  __int128 v109;
  char *v110;
  uint64_t v111;
  uint64_t *v112;
  __int128 v113;
  uint64_t v114;
  __int128 *v115;
  char *v116;
  __int128 *v117;
  char *v118;
  __int128 *v119;
  __int128 v120;
  char *v121;
  uint64_t v122;
  __int128 v123;
  uint64_t v124;
  __int128 v125;
  uint64_t *v126;
  __int128 v127;
  uint64_t v128;
  void **v129;
  char *v130;
  void **v131;
  char *v132;
  int v135;
  size_t v136;
  unint64_t v137;
  __int128 *v138;
  uint64_t v139;
  uint64_t v140;
  __int128 *v141;
  char *v142;
  uint64_t v143;
  __int128 v144;
  uint64_t v145;
  __int128 v146;
  std::__shared_weak_count *v147;
  std::__shared_weak_count *v148;
  std::__shared_weak_count *v149;
  uint64_t v150;
  _QWORD *v151;
  unint64_t *v152;
  unint64_t v153;
  _QWORD *v154;
  __int128 v155;
  char *v156;
  std::__shared_weak_count *v157;
  std::__shared_weak_count *v158;
  std::__shared_weak_count *v159;
  uint64_t v160;
  _QWORD *v161;
  unint64_t *v162;
  unint64_t v163;
  _QWORD *v164;
  uint64_t v165;
  __int128 v166;
  char *v167;
  uint64_t v168;
  uint64_t *v169;
  __int128 v170;
  uint64_t v171;
  __int128 *v172;
  char *v173;
  __int128 *v174;
  char *v175;
  char *v176;
  uint64_t v177;
  __int128 v178;
  uint64_t v179;
  __int128 v180;
  uint64_t *v181;
  __int128 v182;
  uint64_t v183;
  void **v184;
  char *v185;
  void **v186;
  char *v187;
  int v190;
  size_t v191;
  unint64_t v192;
  __int128 *v193;
  uint64_t v194;
  uint64_t v195;
  __int128 *v196;
  char *v197;
  uint64_t v198;
  __int128 v199;
  uint64_t v200;
  __int128 v201;
  std::__shared_weak_count *v202;
  std::__shared_weak_count *v203;
  std::__shared_weak_count *v204;
  uint64_t v205;
  _QWORD *v206;
  unint64_t *v207;
  unint64_t v208;
  _QWORD *v209;
  __int128 v210;
  char *v211;
  std::__shared_weak_count *v212;
  std::__shared_weak_count *v213;
  std::__shared_weak_count *v214;
  uint64_t v215;
  _QWORD *v216;
  unint64_t *v217;
  unint64_t v218;
  _QWORD *v219;
  uint64_t v220;
  __int128 v221;
  char *v222;
  uint64_t v223;
  uint64_t *v224;
  __int128 v225;
  uint64_t v226;
  __int128 *v227;
  char *v228;
  __int128 *v229;
  char *v230;
  char *v231;
  uint64_t v232;
  __int128 v233;
  uint64_t v234;
  __int128 v235;
  uint64_t *v236;
  __int128 v237;
  uint64_t v238;
  void **v239;
  char *v240;
  void **v241;
  char *v242;
  int v245;
  size_t v246;
  unint64_t v247;
  __int128 *v248;
  uint64_t v249;
  uint64_t v250;
  __int128 *v251;
  char *v252;
  uint64_t v253;
  __int128 v254;
  uint64_t v255;
  __int128 v256;
  std::__shared_weak_count *v257;
  std::__shared_weak_count *v258;
  std::__shared_weak_count *v259;
  uint64_t v260;
  _QWORD *v261;
  unint64_t *v262;
  unint64_t v263;
  _QWORD *v264;
  __int128 v265;
  char *v266;
  std::__shared_weak_count *v267;
  std::__shared_weak_count *v268;
  std::__shared_weak_count *v269;
  uint64_t v270;
  _QWORD *v271;
  unint64_t *v272;
  unint64_t v273;
  _QWORD *v274;
  uint64_t v275;
  __int128 v276;
  char *v277;
  uint64_t v278;
  unsigned __int8 v279;
  uint64_t v280;
  __int128 *v281;
  char *v282;
  __int128 *v283;
  char *v284;
  char *v285;
  uint64_t v286;
  __int128 v287;
  uint64_t v288;
  __int128 v289;
  uint64_t *v290;
  __int128 v291;
  uint64_t v292;
  void **v293;
  char *v294;
  void **v295;
  char *v296;
  int v299;
  size_t v300;
  unint64_t v301;
  __int128 *v302;
  uint64_t v303;
  uint64_t v304;
  __int128 *v305;
  char *v306;
  uint64_t v307;
  __int128 v308;
  uint64_t v309;
  __int128 v310;
  std::__shared_weak_count *v311;
  std::__shared_weak_count *v312;
  std::__shared_weak_count *v313;
  uint64_t v314;
  _QWORD *v315;
  unint64_t *v316;
  unint64_t v317;
  _QWORD *v318;
  __int128 v319;
  char *v320;
  std::__shared_weak_count *v321;
  std::__shared_weak_count *v322;
  std::__shared_weak_count *v323;
  uint64_t v324;
  _QWORD *v325;
  unint64_t *v326;
  unint64_t v327;
  _QWORD *v328;
  uint64_t v329;
  __int128 v330;
  char *v331;
  uint64_t v332;
  unsigned __int8 v333;
  uint64_t v334;
  __int128 *v335;
  char *v336;
  __int128 *v337;
  char *v338;
  char *v339;
  uint64_t v340;
  __int128 v341;
  uint64_t v342;
  __int128 v343;
  uint64_t *v344;
  __int128 v345;
  uint64_t v346;
  void **v347;
  char *v348;
  void **v349;
  char *v350;
  int v353;
  size_t v354;
  unint64_t v355;
  __int128 *v356;
  uint64_t v357;
  uint64_t v358;
  __int128 *v359;
  char *v360;
  uint64_t v361;
  __int128 v362;
  uint64_t v363;
  __int128 v364;
  std::__shared_weak_count *v365;
  std::__shared_weak_count *v366;
  std::__shared_weak_count *v367;
  uint64_t v368;
  _QWORD *v369;
  unint64_t *v370;
  unint64_t v371;
  _QWORD *v372;
  __int128 v373;
  char *v374;
  std::__shared_weak_count *v375;
  std::__shared_weak_count *v376;
  std::__shared_weak_count *v377;
  uint64_t v378;
  _QWORD *v379;
  unint64_t *v380;
  unint64_t v381;
  _QWORD *v382;
  __int128 v383;
  char *v384;
  _BOOL4 v385;
  char *v386;
  char *v387;
  char *v388;
  char *v389;
  void *v390;
  __int128 v391;
  __int128 *v392;
  __int128 v393;
  int v394;
  size_t v395;
  unint64_t v396;
  __int128 *v397;
  int v398;
  size_t v399;
  unint64_t v400;
  __int128 *v401;
  int v402;
  size_t v403;
  unint64_t v404;
  __int128 *v405;
  uint64_t v406;
  uint64_t v407;
  uint64_t *v408;
  uint64_t v409;
  uint64_t v410;
  uint64_t *v411;
  uint64_t v412;
  uint64_t v413;
  uint64_t *v414;
  uint64_t v415;
  uint64_t v416;
  void *v417[2];
  uint64_t v418;
  void *v419[2];
  uint64_t v420;
  void *v421;
  char *v422;
  unint64_t v423;
  void *v424;
  char *v425;
  unint64_t v426;
  _QWORD *v427;
  _QWORD *v428;
  uint64_t v429;
  void *v430[2];
  uint64_t v431;
  __int128 v432;
  __int128 v433;
  unint64_t v434;
  __int128 __p;
  _BYTE v436[24];
  uint64_t v437;
  __int128 v438;
  uint64_t v439;
  __int128 __dst;
  int64_t v441;

  v424 = 0;
  v425 = 0;
  v426 = 0;
  v421 = 0;
  v422 = 0;
  v423 = 0;
  v4 = *(_QWORD *)(a2 + 72);
  if (v4)
  {
    v415 = a2;
    v416 = a1;
    if ((*(char *)(v4 + 31) & 0x80000000) == 0)
    {
LABEL_3:
      v5 = *(_OWORD *)(v4 + 8);
      v441 = *(_QWORD *)(v4 + 24);
      __dst = v5;
      goto LABEL_7;
    }
  }
  else
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/Node.h", 220, (uint64_t)"channels_", 9, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v4 = *(_QWORD *)(a2 + 72);
    v415 = a2;
    v416 = a1;
    if ((*(char *)(v4 + 31) & 0x80000000) == 0)
      goto LABEL_3;
  }
  sub_20E860C04(&__dst, *(void **)(v4 + 8), *(_QWORD *)(v4 + 16));
LABEL_7:
  v6 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v4 + 96) + 48))(*(_QWORD *)(v4 + 96));
  v7 = sub_20EC72848();
  if (*((char *)v7 + 23) < 0)
  {
    sub_20E860C04(&v438, (void *)*v7, v7[1]);
  }
  else
  {
    v8 = *(_OWORD *)v7;
    v439 = v7[2];
    v438 = v8;
  }
  v9 = HIBYTE(v439);
  if (v439 >= 0)
  {
    v10 = &v438;
  }
  else
  {
    v9 = *((_QWORD *)&v438 + 1);
    v10 = (__int128 *)v438;
  }
  if (v9 >= 4)
  {
    v11 = (char *)v10 + v9;
    v12 = v10;
    do
    {
      v13 = (char *)memchr(v12, 118, v9 - 3);
      if (!v13)
        break;
      if (*(_DWORD *)v13 == 1684631414)
      {
        if (v13 == v11 || v13 - (char *)v10 == -1)
          break;
        *(_QWORD *)&v432 = v6;
        DWORD2(v432) = 4;
        if (SHIBYTE(v441) < 0)
        {
          sub_20E860C04(&v433, (void *)__dst, *((unint64_t *)&__dst + 1));
        }
        else
        {
          v433 = __dst;
          v434 = v441;
        }
        if (*(char *)(v4 + 55) < 0)
        {
          sub_20E860C04(&__p, *(void **)(v4 + 32), *(_QWORD *)(v4 + 40));
        }
        else
        {
          v391 = *(_OWORD *)(v4 + 32);
          *(_QWORD *)v436 = *(_QWORD *)(v4 + 48);
          __p = v391;
        }
        sub_20EC7357C();
        if ((byte_254A5E7E7 & 0x80000000) == 0)
        {
          *(_OWORD *)&v436[8] = xmmword_254A5E7D0;
          v437 = unk_254A5E7E0;
          goto LABEL_34;
        }
        goto LABEL_31;
      }
      v12 = (__int128 *)(v13 + 1);
      v9 = v11 - (char *)v12;
    }
    while (v11 - (char *)v12 >= 4);
  }
  *(_QWORD *)&v432 = v6;
  DWORD2(v432) = 2;
  if (SHIBYTE(v441) < 0)
  {
    sub_20E860C04(&v433, (void *)__dst, *((unint64_t *)&__dst + 1));
  }
  else
  {
    v433 = __dst;
    v434 = v441;
  }
  if (*(char *)(v4 + 55) < 0)
  {
    sub_20E860C04(&__p, *(void **)(v4 + 32), *(_QWORD *)(v4 + 40));
  }
  else
  {
    v14 = *(_OWORD *)(v4 + 32);
    *(_QWORD *)v436 = *(_QWORD *)(v4 + 48);
    __p = v14;
  }
  sub_20EC7357C();
  if (byte_254A5E7E7 < 0)
  {
LABEL_31:
    sub_20E860C04(&v436[8], (void *)xmmword_254A5E7D0, *((unint64_t *)&xmmword_254A5E7D0 + 1));
  }
  else
  {
    *(_OWORD *)&v436[8] = xmmword_254A5E7D0;
    v437 = unk_254A5E7E0;
  }
LABEL_34:
  v425 = sub_20EBA558C((char **)&v424, (uint64_t)&v432);
  if ((SHIBYTE(v437) & 0x80000000) == 0)
  {
    if ((v436[7] & 0x80000000) == 0)
      goto LABEL_36;
LABEL_32:
    operator delete((void *)__p);
    if ((SHIBYTE(v434) & 0x80000000) == 0)
      goto LABEL_37;
    goto LABEL_33;
  }
  operator delete(*(void **)&v436[8]);
  if ((v436[7] & 0x80000000) != 0)
    goto LABEL_32;
LABEL_36:
  if (SHIBYTE(v434) < 0)
LABEL_33:
    operator delete((void *)v433);
LABEL_37:
  v15 = sub_20EBA4AA4();
  if (*((char *)v15 + 23) < 0)
  {
    sub_20E860C04(v430, (void *)*v15, v15[1]);
  }
  else
  {
    v16 = *(_OWORD *)v15;
    v431 = v15[2];
    *(_OWORD *)v430 = v16;
  }
  v17 = HIBYTE(v431);
  if (v431 >= 0)
  {
    v18 = v430;
  }
  else
  {
    v17 = (uint64_t)v430[1];
    v18 = (void **)v430[0];
  }
  if (v17 >= 18)
  {
    v19 = (char *)v18 + v17;
    v20 = v18;
    do
    {
      v21 = (char *)memchr(v20, 67, v17 - 17);
      if (!v21)
        break;
      if (*(_QWORD *)v21 == 0x456C656E6E616843
        && *((_QWORD *)v21 + 1) == 0x696F763C726F7272
        && *((_WORD *)v21 + 8) == 15972)
      {
        if (v21 != v19 && v21 - (char *)v18 != -1)
          goto LABEL_81;
        break;
      }
      v20 = (void **)(v21 + 1);
      v17 = v19 - (char *)v20;
    }
    while (v19 - (char *)v20 >= 18);
  }
  *(_QWORD *)&v432 = v6 + 1;
  DWORD2(v432) = 3;
  v24 = SHIBYTE(v441);
  if (v441 >= 0)
    v25 = HIBYTE(v441);
  else
    v25 = *((_QWORD *)&__dst + 1);
  v26 = v25 + 6;
  if (v25 + 6 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v26 >= 0x17)
  {
    v28 = (v26 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v26 | 7) != 0x17)
      v28 = v26 | 7;
    v29 = v28 + 1;
    v27 = (__int128 *)operator new(v28 + 1);
    *((_QWORD *)&v433 + 1) = v25 + 6;
    v434 = v29 | 0x8000000000000000;
    *(_QWORD *)&v433 = v27;
  }
  else
  {
    v434 = 0;
    v433 = 0uLL;
    v27 = &v433;
    HIBYTE(v434) = v25 + 6;
    if (!v25)
      goto LABEL_73;
  }
  if (v24 >= 0)
    p_dst = &__dst;
  else
    p_dst = (__int128 *)__dst;
  memmove(v27, p_dst, v25);
LABEL_73:
  strcpy((char *)v27 + v25, ".Error");
  *(_WORD *)&v436[7] = 0;
  LOBYTE(__p) = 0;
  HIBYTE(v437) = 0;
  v31 = v425;
  if ((unint64_t)v425 >= v426)
  {
    v425 = sub_20EBA558C((char **)&v424, (uint64_t)&v432);
    if (SHIBYTE(v437) < 0)
    {
      operator delete(*(void **)&v436[8]);
      if ((v436[7] & 0x80000000) == 0)
        goto LABEL_80;
    }
    else if ((v436[7] & 0x80000000) == 0)
    {
      goto LABEL_80;
    }
LABEL_75:
    operator delete((void *)__p);
    if (SHIBYTE(v434) < 0)
      goto LABEL_76;
    goto LABEL_81;
  }
  v32 = v432;
  *((_DWORD *)v425 + 2) = DWORD2(v432);
  *(_QWORD *)v31 = v32;
  v33 = v433;
  *((_QWORD *)v31 + 4) = v434;
  *((_OWORD *)v31 + 1) = v33;
  v434 = 0;
  v433 = 0uLL;
  v34 = *(_QWORD *)v436;
  *(_OWORD *)(v31 + 40) = __p;
  *((_QWORD *)v31 + 7) = v34;
  *(_QWORD *)v436 = 0;
  __p = 0uLL;
  v35 = *(_OWORD *)&v436[8];
  *((_QWORD *)v31 + 10) = v437;
  *((_OWORD *)v31 + 4) = v35;
  *(_QWORD *)&v436[8] = 0;
  *(_QWORD *)&v436[16] = 0;
  v437 = 0;
  v425 = v31 + 88;
  if ((v436[7] & 0x80000000) != 0)
    goto LABEL_75;
LABEL_80:
  if (SHIBYTE(v434) < 0)
  {
LABEL_76:
    operator delete((void *)v433);
    v36 = *(std::__shared_weak_count **)(v4 + 136);
    if (!v36)
      goto LABEL_85;
    goto LABEL_82;
  }
LABEL_81:
  v36 = *(std::__shared_weak_count **)(v4 + 136);
  if (!v36)
  {
LABEL_85:
    v427 = 0;
    v428 = 0;
    v429 = 0;
    v40 = 0;
    goto LABEL_100;
  }
LABEL_82:
  v37 = std::__shared_weak_count::lock(v36);
  *((_QWORD *)&v432 + 1) = v37;
  if (!v37)
    goto LABEL_85;
  v38 = v37;
  v39 = *(_QWORD *)(v4 + 128);
  *(_QWORD *)&v432 = v39;
  if (v39)
  {
    (*(void (**)(_QWORD **__return_ptr))(*(_QWORD *)v39 + 24))(&v427);
  }
  else
  {
    v427 = 0;
    v428 = 0;
    v429 = 0;
  }
  p_shared_owners = (unint64_t *)&v38->__shared_owners_;
  do
    v42 = __ldaxr(p_shared_owners);
  while (__stlxr(v42 - 1, p_shared_owners));
  if (v42)
  {
    v40 = v427;
    v43 = v428;
    if (v427 == v428)
      goto LABEL_100;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
    std::__shared_weak_count::__release_weak(v38);
    v40 = v427;
    v43 = v428;
    if (v427 == v428)
      goto LABEL_100;
  }
  do
  {
    *(_QWORD *)&v432 = v6;
    *((_QWORD *)&v432 + 1) = *v40;
    v434 = 0;
    v433 = 0uLL;
    v45 = v422;
    if ((unint64_t)v422 < v423)
    {
      *(_OWORD *)v422 = v432;
      v44 = v433;
      *((_QWORD *)v45 + 4) = v434;
      *((_OWORD *)v45 + 1) = v44;
      v422 = v45 + 40;
    }
    else
    {
      v422 = sub_20EBA5F8C(&v421, (uint64_t)&v432);
      if (SHIBYTE(v434) < 0)
        operator delete((void *)v433);
    }
    ++v40;
  }
  while (v40 != v43);
  v40 = v427;
LABEL_100:
  if (v40)
  {
    v428 = v40;
    operator delete(v40);
  }
  v46 = *(std::__shared_weak_count **)(v4 + 136);
  if (!v46 || (v47 = std::__shared_weak_count::lock(v46), (*((_QWORD *)&v432 + 1) = v47) == 0))
  {
    v427 = 0;
    v428 = 0;
    v429 = 0;
    v50 = 0;
    goto LABEL_121;
  }
  v48 = v47;
  v49 = *(_QWORD *)(v4 + 128);
  *(_QWORD *)&v432 = v49;
  if (v49)
  {
    (*(void (**)(_QWORD **__return_ptr))(*(_QWORD *)v49 + 32))(&v427);
  }
  else
  {
    v427 = 0;
    v428 = 0;
    v429 = 0;
  }
  v51 = (unint64_t *)&v48->__shared_owners_;
  do
    v52 = __ldaxr(v51);
  while (__stlxr(v52 - 1, v51));
  if (v52)
  {
    v50 = v427;
    v53 = v428;
    if (v427 == v428)
      goto LABEL_121;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
    std::__shared_weak_count::__release_weak(v48);
    v50 = v427;
    v53 = v428;
    if (v427 == v428)
      goto LABEL_121;
  }
  v54 = v6 + 1;
  do
  {
    *(_QWORD *)&v432 = v54;
    *((_QWORD *)&v432 + 1) = *v50;
    v434 = 0;
    v433 = 0uLL;
    v56 = v422;
    if ((unint64_t)v422 < v423)
    {
      *(_OWORD *)v422 = v432;
      v55 = v433;
      *((_QWORD *)v56 + 4) = v434;
      *((_OWORD *)v56 + 1) = v55;
      v422 = v56 + 40;
    }
    else
    {
      v422 = sub_20EBA5F8C(&v421, (uint64_t)&v432);
      if (SHIBYTE(v434) < 0)
        operator delete((void *)v433);
    }
    ++v50;
  }
  while (v50 != v53);
  v50 = v427;
LABEL_121:
  if (v50)
  {
    v428 = v50;
    operator delete(v50);
  }
  if (SHIBYTE(v431) < 0)
  {
    operator delete(v430[0]);
    if ((SHIBYTE(v439) & 0x80000000) == 0)
    {
LABEL_125:
      if ((SHIBYTE(v441) & 0x80000000) == 0)
        goto LABEL_126;
LABEL_130:
      operator delete((void *)__dst);
      if ((*(char *)(v4 + 199) & 0x80000000) == 0)
        goto LABEL_127;
LABEL_131:
      sub_20E860C04(&__dst, *(void **)(v4 + 176), *(_QWORD *)(v4 + 184));
      goto LABEL_132;
    }
  }
  else if ((SHIBYTE(v439) & 0x80000000) == 0)
  {
    goto LABEL_125;
  }
  operator delete((void *)v438);
  if (SHIBYTE(v441) < 0)
    goto LABEL_130;
LABEL_126:
  if (*(char *)(v4 + 199) < 0)
    goto LABEL_131;
LABEL_127:
  __dst = *(_OWORD *)(v4 + 176);
  v441 = *(_QWORD *)(v4 + 192);
LABEL_132:
  v57 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v4 + 264) + 48))(*(_QWORD *)(v4 + 264));
  v58 = atomic_load((unsigned __int8 *)&qword_254A5D698);
  if ((v58 & 1) != 0 || !__cxa_guard_acquire(&qword_254A5D698))
    goto LABEL_133;
  sub_20EC73740();
  v394 = byte_254A5E847;
  if (byte_254A5E847 >= 0)
    v395 = byte_254A5E847;
  else
    v395 = qword_254A5E838;
  v396 = v395 + 1;
  if (v395 + 1 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v396 >= 0x17)
  {
    v406 = (v396 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v396 | 7) != 0x17)
      v406 = v396 | 7;
    v407 = v406 + 1;
    v397 = (__int128 *)operator new(v406 + 1);
    *((_QWORD *)&xmmword_254A5E818 + 1) = v395 + 1;
    unk_254A5E828 = v407 | 0x8000000000000000;
    *(_QWORD *)&xmmword_254A5E818 = v397;
    goto LABEL_1037;
  }
  v397 = &xmmword_254A5E818;
  unk_254A5E828 = 0;
  xmmword_254A5E818 = 0uLL;
  byte_254A5E82F = v395 + 1;
  if (v395)
  {
LABEL_1037:
    if (v394 >= 0)
      v408 = &qword_254A5E830;
    else
      v408 = (uint64_t *)qword_254A5E830;
    memmove(v397, v408, v395);
  }
  *(_WORD *)((char *)v397 + v395) = 38;
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A5E818, &dword_20E81F000);
  __cxa_guard_release(&qword_254A5D698);
LABEL_133:
  if (byte_254A5E82F < 0)
  {
    sub_20E860C04(&v438, (void *)xmmword_254A5E818, *((unint64_t *)&xmmword_254A5E818 + 1));
  }
  else
  {
    v438 = xmmword_254A5E818;
    v439 = unk_254A5E828;
  }
  v59 = HIBYTE(v439);
  if (v439 >= 0)
  {
    v60 = &v438;
  }
  else
  {
    v59 = *((_QWORD *)&v438 + 1);
    v60 = (__int128 *)v438;
  }
  if (v59 >= 4)
  {
    v61 = (char *)v60 + v59;
    v62 = v60;
    do
    {
      v63 = (char *)memchr(v62, 118, v59 - 3);
      if (!v63)
        break;
      if (*(_DWORD *)v63 == 1684631414)
      {
        if (v63 == v61 || v63 - (char *)v60 == -1)
          break;
        *(_QWORD *)&v432 = v57;
        DWORD2(v432) = 4;
        if (SHIBYTE(v441) < 0)
        {
          sub_20E860C04(&v433, (void *)__dst, *((unint64_t *)&__dst + 1));
        }
        else
        {
          v433 = __dst;
          v434 = v441;
        }
        if (*(char *)(v4 + 223) < 0)
        {
          sub_20E860C04(&__p, *(void **)(v4 + 200), *(_QWORD *)(v4 + 208));
        }
        else
        {
          __p = *(_OWORD *)(v4 + 200);
          *(_QWORD *)v436 = *(_QWORD *)(v4 + 216);
        }
        sub_20EC742E0();
        if (byte_254A5E94F < 0)
        {
          sub_20E860C04(&v436[8], (void *)xmmword_254A5E938, *((unint64_t *)&xmmword_254A5E938 + 1));
        }
        else
        {
          *(_OWORD *)&v436[8] = xmmword_254A5E938;
          v437 = unk_254A5E948;
        }
        v64 = v425;
        if ((unint64_t)v425 < v426)
          goto LABEL_159;
        goto LABEL_162;
      }
      v62 = (__int128 *)(v63 + 1);
      v59 = v61 - (char *)v62;
    }
    while (v61 - (char *)v62 >= 4);
  }
  *(_QWORD *)&v432 = v57;
  DWORD2(v432) = 2;
  if (SHIBYTE(v441) < 0)
  {
    sub_20E860C04(&v433, (void *)__dst, *((unint64_t *)&__dst + 1));
  }
  else
  {
    v433 = __dst;
    v434 = v441;
  }
  if (*(char *)(v4 + 223) < 0)
  {
    sub_20E860C04(&__p, *(void **)(v4 + 200), *(_QWORD *)(v4 + 208));
  }
  else
  {
    __p = *(_OWORD *)(v4 + 200);
    *(_QWORD *)v436 = *(_QWORD *)(v4 + 216);
  }
  sub_20EC742E0();
  if (byte_254A5E94F < 0)
  {
    sub_20E860C04(&v436[8], (void *)xmmword_254A5E938, *((unint64_t *)&xmmword_254A5E938 + 1));
  }
  else
  {
    *(_OWORD *)&v436[8] = xmmword_254A5E938;
    v437 = unk_254A5E948;
  }
  v64 = v425;
  if ((unint64_t)v425 >= v426)
  {
LABEL_162:
    v425 = sub_20EBA558C((char **)&v424, (uint64_t)&v432);
    if (SHIBYTE(v437) < 0)
    {
      operator delete(*(void **)&v436[8]);
      if ((v436[7] & 0x80000000) == 0)
        goto LABEL_164;
    }
    else if ((v436[7] & 0x80000000) == 0)
    {
      goto LABEL_164;
    }
LABEL_160:
    operator delete((void *)__p);
    if ((SHIBYTE(v434) & 0x80000000) == 0)
      goto LABEL_165;
    goto LABEL_161;
  }
LABEL_159:
  v65 = v432;
  *((_DWORD *)v64 + 2) = DWORD2(v432);
  *(_QWORD *)v64 = v65;
  v66 = v433;
  *((_QWORD *)v64 + 4) = v434;
  *((_OWORD *)v64 + 1) = v66;
  v434 = 0;
  v433 = 0uLL;
  v67 = *(_QWORD *)v436;
  *(_OWORD *)(v64 + 40) = __p;
  *((_QWORD *)v64 + 7) = v67;
  *(_QWORD *)v436 = 0;
  __p = 0uLL;
  v68 = *(_OWORD *)&v436[8];
  *((_QWORD *)v64 + 10) = v437;
  *((_OWORD *)v64 + 4) = v68;
  *(_QWORD *)&v436[8] = 0;
  *(_QWORD *)&v436[16] = 0;
  v437 = 0;
  v425 = v64 + 88;
  if ((v436[7] & 0x80000000) != 0)
    goto LABEL_160;
LABEL_164:
  if (SHIBYTE(v434) < 0)
LABEL_161:
    operator delete((void *)v433);
LABEL_165:
  v69 = sub_20EBA4AA4();
  if (*((char *)v69 + 23) < 0)
  {
    sub_20E860C04(v430, (void *)*v69, v69[1]);
  }
  else
  {
    v70 = *(_OWORD *)v69;
    v431 = v69[2];
    *(_OWORD *)v430 = v70;
  }
  v71 = HIBYTE(v431);
  if (v431 >= 0)
  {
    v72 = v430;
  }
  else
  {
    v71 = (uint64_t)v430[1];
    v72 = (void **)v430[0];
  }
  if (v71 >= 18)
  {
    v73 = (char *)v72 + v71;
    v74 = v72;
    do
    {
      v75 = (char *)memchr(v74, 67, v71 - 17);
      if (!v75)
        break;
      if (*(_QWORD *)v75 == 0x456C656E6E616843
        && *((_QWORD *)v75 + 1) == 0x696F763C726F7272
        && *((_WORD *)v75 + 8) == 15972)
      {
        if (v75 != v73 && v75 - (char *)v72 != -1)
          goto LABEL_209;
        break;
      }
      v74 = (void **)(v75 + 1);
      v71 = v73 - (char *)v74;
    }
    while (v73 - (char *)v74 >= 18);
  }
  *(_QWORD *)&v432 = v57 + 1;
  DWORD2(v432) = 3;
  v78 = SHIBYTE(v441);
  if (v441 >= 0)
    v79 = HIBYTE(v441);
  else
    v79 = *((_QWORD *)&__dst + 1);
  v80 = v79 + 6;
  if (v79 + 6 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v80 >= 0x17)
  {
    v82 = (v80 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v80 | 7) != 0x17)
      v82 = v80 | 7;
    v83 = v82 + 1;
    v81 = (__int128 *)operator new(v82 + 1);
    *((_QWORD *)&v433 + 1) = v79 + 6;
    v434 = v83 | 0x8000000000000000;
    *(_QWORD *)&v433 = v81;
  }
  else
  {
    v434 = 0;
    v433 = 0uLL;
    v81 = &v433;
    HIBYTE(v434) = v79 + 6;
    if (!v79)
      goto LABEL_201;
  }
  if (v78 >= 0)
    v84 = &__dst;
  else
    v84 = (__int128 *)__dst;
  memmove(v81, v84, v79);
LABEL_201:
  strcpy((char *)v81 + v79, ".Error");
  *(_WORD *)&v436[7] = 0;
  LOBYTE(__p) = 0;
  HIBYTE(v437) = 0;
  v85 = v425;
  if ((unint64_t)v425 >= v426)
  {
    v425 = sub_20EBA558C((char **)&v424, (uint64_t)&v432);
    if (SHIBYTE(v437) < 0)
    {
      operator delete(*(void **)&v436[8]);
      if ((v436[7] & 0x80000000) == 0)
        goto LABEL_208;
    }
    else if ((v436[7] & 0x80000000) == 0)
    {
      goto LABEL_208;
    }
LABEL_203:
    operator delete((void *)__p);
    if (SHIBYTE(v434) < 0)
      goto LABEL_204;
    goto LABEL_209;
  }
  v86 = v432;
  *((_DWORD *)v425 + 2) = DWORD2(v432);
  *(_QWORD *)v85 = v86;
  v87 = v433;
  *((_QWORD *)v85 + 4) = v434;
  *((_OWORD *)v85 + 1) = v87;
  v434 = 0;
  v433 = 0uLL;
  v88 = *(_QWORD *)v436;
  *(_OWORD *)(v85 + 40) = __p;
  *((_QWORD *)v85 + 7) = v88;
  *(_QWORD *)v436 = 0;
  __p = 0uLL;
  v89 = *(_OWORD *)&v436[8];
  *((_QWORD *)v85 + 10) = v437;
  *((_OWORD *)v85 + 4) = v89;
  *(_QWORD *)&v436[8] = 0;
  *(_QWORD *)&v436[16] = 0;
  v437 = 0;
  v425 = v85 + 88;
  if ((v436[7] & 0x80000000) != 0)
    goto LABEL_203;
LABEL_208:
  if (SHIBYTE(v434) < 0)
  {
LABEL_204:
    operator delete((void *)v433);
    v90 = *(std::__shared_weak_count **)(v4 + 304);
    if (!v90)
      goto LABEL_213;
    goto LABEL_210;
  }
LABEL_209:
  v90 = *(std::__shared_weak_count **)(v4 + 304);
  if (!v90)
  {
LABEL_213:
    v427 = 0;
    v428 = 0;
    v429 = 0;
    v94 = 0;
    goto LABEL_230;
  }
LABEL_210:
  v91 = std::__shared_weak_count::lock(v90);
  *((_QWORD *)&v432 + 1) = v91;
  if (!v91)
    goto LABEL_213;
  v92 = v91;
  v93 = *(_QWORD *)(v4 + 296);
  *(_QWORD *)&v432 = v93;
  if (v93)
  {
    (*(void (**)(_QWORD **__return_ptr))(*(_QWORD *)v93 + 24))(&v427);
  }
  else
  {
    v427 = 0;
    v428 = 0;
    v429 = 0;
  }
  v95 = (unint64_t *)&v92->__shared_owners_;
  do
    v96 = __ldaxr(v95);
  while (__stlxr(v96 - 1, v95));
  if (v96)
  {
    v94 = v427;
    v97 = v428;
    if (v427 == v428)
      goto LABEL_230;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v92->__on_zero_shared)(v92);
    std::__shared_weak_count::__release_weak(v92);
    v94 = v427;
    v97 = v428;
    if (v427 == v428)
      goto LABEL_230;
  }
  do
  {
    *(_QWORD *)&v432 = v57;
    *((_QWORD *)&v432 + 1) = *v94;
    v434 = 0;
    v433 = 0uLL;
    v99 = v422;
    if ((unint64_t)v422 < v423)
    {
      *(_OWORD *)v422 = v432;
      v98 = v433;
      *((_QWORD *)v99 + 4) = v434;
      *((_OWORD *)v99 + 1) = v98;
      v422 = v99 + 40;
    }
    else
    {
      v422 = sub_20EBA5F8C(&v421, (uint64_t)&v432);
      if (SHIBYTE(v434) < 0)
        operator delete((void *)v433);
    }
    ++v94;
  }
  while (v94 != v97);
  v94 = v427;
LABEL_230:
  if (v94)
  {
    v428 = v94;
    operator delete(v94);
  }
  v100 = *(std::__shared_weak_count **)(v4 + 304);
  if (!v100 || (v101 = std::__shared_weak_count::lock(v100), (*((_QWORD *)&v432 + 1) = v101) == 0))
  {
    v427 = 0;
    v428 = 0;
    v429 = 0;
    v104 = 0;
    goto LABEL_251;
  }
  v102 = v101;
  v103 = *(_QWORD *)(v4 + 296);
  *(_QWORD *)&v432 = v103;
  if (v103)
  {
    (*(void (**)(_QWORD **__return_ptr))(*(_QWORD *)v103 + 32))(&v427);
  }
  else
  {
    v427 = 0;
    v428 = 0;
    v429 = 0;
  }
  v105 = (unint64_t *)&v102->__shared_owners_;
  do
    v106 = __ldaxr(v105);
  while (__stlxr(v106 - 1, v105));
  if (v106)
  {
    v104 = v427;
    v107 = v428;
    if (v427 == v428)
      goto LABEL_251;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v102->__on_zero_shared)(v102);
    std::__shared_weak_count::__release_weak(v102);
    v104 = v427;
    v107 = v428;
    if (v427 == v428)
      goto LABEL_251;
  }
  v108 = v57 + 1;
  do
  {
    *(_QWORD *)&v432 = v108;
    *((_QWORD *)&v432 + 1) = *v104;
    v434 = 0;
    v433 = 0uLL;
    v110 = v422;
    if ((unint64_t)v422 < v423)
    {
      *(_OWORD *)v422 = v432;
      v109 = v433;
      *((_QWORD *)v110 + 4) = v434;
      *((_OWORD *)v110 + 1) = v109;
      v422 = v110 + 40;
    }
    else
    {
      v422 = sub_20EBA5F8C(&v421, (uint64_t)&v432);
      if (SHIBYTE(v434) < 0)
        operator delete((void *)v433);
    }
    ++v104;
  }
  while (v104 != v107);
  v104 = v427;
LABEL_251:
  if (v104)
  {
    v428 = v104;
    operator delete(v104);
  }
  if (SHIBYTE(v431) < 0)
  {
    operator delete(v430[0]);
    if ((SHIBYTE(v439) & 0x80000000) == 0)
    {
LABEL_255:
      if ((SHIBYTE(v441) & 0x80000000) == 0)
        goto LABEL_256;
LABEL_260:
      operator delete((void *)__dst);
      if ((*(char *)(v4 + 367) & 0x80000000) == 0)
        goto LABEL_257;
      goto LABEL_261;
    }
  }
  else if ((SHIBYTE(v439) & 0x80000000) == 0)
  {
    goto LABEL_255;
  }
  operator delete((void *)v438);
  if (SHIBYTE(v441) < 0)
    goto LABEL_260;
LABEL_256:
  if ((*(char *)(v4 + 367) & 0x80000000) == 0)
  {
LABEL_257:
    __dst = *(_OWORD *)(v4 + 344);
    v441 = *(_QWORD *)(v4 + 360);
    goto LABEL_262;
  }
LABEL_261:
  sub_20E860C04(&__dst, *(void **)(v4 + 344), *(_QWORD *)(v4 + 352));
LABEL_262:
  v111 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v4 + 432) + 48))(*(_QWORD *)(v4 + 432));
  v112 = sub_20EC6E994();
  if (*((char *)v112 + 23) < 0)
  {
    sub_20E860C04(&v438, (void *)*v112, v112[1]);
  }
  else
  {
    v113 = *(_OWORD *)v112;
    v439 = v112[2];
    v438 = v113;
  }
  v114 = HIBYTE(v439);
  if (v439 >= 0)
  {
    v115 = &v438;
  }
  else
  {
    v114 = *((_QWORD *)&v438 + 1);
    v115 = (__int128 *)v438;
  }
  if (v114 >= 4)
  {
    v116 = (char *)v115 + v114;
    v117 = v115;
    do
    {
      v118 = (char *)memchr(v117, 118, v114 - 3);
      if (!v118)
        break;
      if (*(_DWORD *)v118 == 1684631414)
      {
        if (v118 == v116 || v118 - (char *)v115 == -1)
          break;
        *(_QWORD *)&v432 = v111;
        DWORD2(v432) = 4;
        if (SHIBYTE(v441) < 0)
        {
          sub_20E860C04(&v433, (void *)__dst, *((unint64_t *)&__dst + 1));
        }
        else
        {
          v433 = __dst;
          v434 = v441;
        }
        if (*(char *)(v4 + 391) < 0)
        {
          sub_20E860C04(&__p, *(void **)(v4 + 368), *(_QWORD *)(v4 + 376));
        }
        else
        {
          __p = *(_OWORD *)(v4 + 368);
          *(_QWORD *)v436 = *(_QWORD *)(v4 + 384);
        }
        v392 = sub_20EC744A4();
        if (*((char *)v392 + 23) < 0)
        {
          sub_20E860C04(&v436[8], *(void **)v392, *((_QWORD *)v392 + 1));
        }
        else
        {
          v393 = *v392;
          v437 = *((_QWORD *)v392 + 2);
          *(_OWORD *)&v436[8] = v393;
        }
        v121 = v425;
        if ((unint64_t)v425 < v426)
          goto LABEL_288;
        goto LABEL_291;
      }
      v117 = (__int128 *)(v118 + 1);
      v114 = v116 - (char *)v117;
    }
    while (v116 - (char *)v117 >= 4);
  }
  *(_QWORD *)&v432 = v111;
  DWORD2(v432) = 2;
  if (SHIBYTE(v441) < 0)
  {
    sub_20E860C04(&v433, (void *)__dst, *((unint64_t *)&__dst + 1));
  }
  else
  {
    v433 = __dst;
    v434 = v441;
  }
  if (*(char *)(v4 + 391) < 0)
  {
    sub_20E860C04(&__p, *(void **)(v4 + 368), *(_QWORD *)(v4 + 376));
  }
  else
  {
    __p = *(_OWORD *)(v4 + 368);
    *(_QWORD *)v436 = *(_QWORD *)(v4 + 384);
  }
  v119 = sub_20EC744A4();
  if (*((char *)v119 + 23) < 0)
  {
    sub_20E860C04(&v436[8], *(void **)v119, *((_QWORD *)v119 + 1));
  }
  else
  {
    v120 = *v119;
    v437 = *((_QWORD *)v119 + 2);
    *(_OWORD *)&v436[8] = v120;
  }
  v121 = v425;
  if ((unint64_t)v425 >= v426)
  {
LABEL_291:
    v425 = sub_20EBA558C((char **)&v424, (uint64_t)&v432);
    if (SHIBYTE(v437) < 0)
    {
      operator delete(*(void **)&v436[8]);
      if ((v436[7] & 0x80000000) == 0)
        goto LABEL_293;
    }
    else if ((v436[7] & 0x80000000) == 0)
    {
      goto LABEL_293;
    }
LABEL_289:
    operator delete((void *)__p);
    if ((SHIBYTE(v434) & 0x80000000) == 0)
      goto LABEL_294;
    goto LABEL_290;
  }
LABEL_288:
  v122 = v432;
  *((_DWORD *)v121 + 2) = DWORD2(v432);
  *(_QWORD *)v121 = v122;
  v123 = v433;
  *((_QWORD *)v121 + 4) = v434;
  *((_OWORD *)v121 + 1) = v123;
  v434 = 0;
  v433 = 0uLL;
  v124 = *(_QWORD *)v436;
  *(_OWORD *)(v121 + 40) = __p;
  *((_QWORD *)v121 + 7) = v124;
  *(_QWORD *)v436 = 0;
  __p = 0uLL;
  v125 = *(_OWORD *)&v436[8];
  *((_QWORD *)v121 + 10) = v437;
  *((_OWORD *)v121 + 4) = v125;
  *(_QWORD *)&v436[8] = 0;
  *(_QWORD *)&v436[16] = 0;
  v437 = 0;
  v425 = v121 + 88;
  if ((v436[7] & 0x80000000) != 0)
    goto LABEL_289;
LABEL_293:
  if (SHIBYTE(v434) < 0)
LABEL_290:
    operator delete((void *)v433);
LABEL_294:
  v126 = sub_20EBA4AA4();
  if (*((char *)v126 + 23) < 0)
  {
    sub_20E860C04(v430, (void *)*v126, v126[1]);
  }
  else
  {
    v127 = *(_OWORD *)v126;
    v431 = v126[2];
    *(_OWORD *)v430 = v127;
  }
  v128 = HIBYTE(v431);
  if (v431 >= 0)
  {
    v129 = v430;
  }
  else
  {
    v128 = (uint64_t)v430[1];
    v129 = (void **)v430[0];
  }
  if (v128 >= 18)
  {
    v130 = (char *)v129 + v128;
    v131 = v129;
    do
    {
      v132 = (char *)memchr(v131, 67, v128 - 17);
      if (!v132)
        break;
      if (*(_QWORD *)v132 == 0x456C656E6E616843
        && *((_QWORD *)v132 + 1) == 0x696F763C726F7272
        && *((_WORD *)v132 + 8) == 15972)
      {
        if (v132 != v130 && v132 - (char *)v129 != -1)
          goto LABEL_338;
        break;
      }
      v131 = (void **)(v132 + 1);
      v128 = v130 - (char *)v131;
    }
    while (v130 - (char *)v131 >= 18);
  }
  *(_QWORD *)&v432 = v111 + 1;
  DWORD2(v432) = 3;
  v135 = SHIBYTE(v441);
  if (v441 >= 0)
    v136 = HIBYTE(v441);
  else
    v136 = *((_QWORD *)&__dst + 1);
  v137 = v136 + 6;
  if (v136 + 6 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v137 >= 0x17)
  {
    v139 = (v137 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v137 | 7) != 0x17)
      v139 = v137 | 7;
    v140 = v139 + 1;
    v138 = (__int128 *)operator new(v139 + 1);
    *((_QWORD *)&v433 + 1) = v136 + 6;
    v434 = v140 | 0x8000000000000000;
    *(_QWORD *)&v433 = v138;
  }
  else
  {
    v434 = 0;
    v433 = 0uLL;
    v138 = &v433;
    HIBYTE(v434) = v136 + 6;
    if (!v136)
      goto LABEL_330;
  }
  if (v135 >= 0)
    v141 = &__dst;
  else
    v141 = (__int128 *)__dst;
  memmove(v138, v141, v136);
LABEL_330:
  strcpy((char *)v138 + v136, ".Error");
  *(_WORD *)&v436[7] = 0;
  LOBYTE(__p) = 0;
  HIBYTE(v437) = 0;
  v142 = v425;
  if ((unint64_t)v425 >= v426)
  {
    v425 = sub_20EBA558C((char **)&v424, (uint64_t)&v432);
    if (SHIBYTE(v437) < 0)
    {
      operator delete(*(void **)&v436[8]);
      if ((v436[7] & 0x80000000) == 0)
        goto LABEL_337;
    }
    else if ((v436[7] & 0x80000000) == 0)
    {
      goto LABEL_337;
    }
LABEL_332:
    operator delete((void *)__p);
    if (SHIBYTE(v434) < 0)
      goto LABEL_333;
    goto LABEL_338;
  }
  v143 = v432;
  *((_DWORD *)v425 + 2) = DWORD2(v432);
  *(_QWORD *)v142 = v143;
  v144 = v433;
  *((_QWORD *)v142 + 4) = v434;
  *((_OWORD *)v142 + 1) = v144;
  v434 = 0;
  v433 = 0uLL;
  v145 = *(_QWORD *)v436;
  *(_OWORD *)(v142 + 40) = __p;
  *((_QWORD *)v142 + 7) = v145;
  *(_QWORD *)v436 = 0;
  __p = 0uLL;
  v146 = *(_OWORD *)&v436[8];
  *((_QWORD *)v142 + 10) = v437;
  *((_OWORD *)v142 + 4) = v146;
  *(_QWORD *)&v436[8] = 0;
  *(_QWORD *)&v436[16] = 0;
  v437 = 0;
  v425 = v142 + 88;
  if ((v436[7] & 0x80000000) != 0)
    goto LABEL_332;
LABEL_337:
  if (SHIBYTE(v434) < 0)
  {
LABEL_333:
    operator delete((void *)v433);
    v147 = *(std::__shared_weak_count **)(v4 + 472);
    if (!v147)
      goto LABEL_342;
    goto LABEL_339;
  }
LABEL_338:
  v147 = *(std::__shared_weak_count **)(v4 + 472);
  if (!v147)
  {
LABEL_342:
    v427 = 0;
    v428 = 0;
    v429 = 0;
    v151 = 0;
    goto LABEL_359;
  }
LABEL_339:
  v148 = std::__shared_weak_count::lock(v147);
  *((_QWORD *)&v432 + 1) = v148;
  if (!v148)
    goto LABEL_342;
  v149 = v148;
  v150 = *(_QWORD *)(v4 + 464);
  *(_QWORD *)&v432 = v150;
  if (v150)
  {
    (*(void (**)(_QWORD **__return_ptr))(*(_QWORD *)v150 + 24))(&v427);
  }
  else
  {
    v427 = 0;
    v428 = 0;
    v429 = 0;
  }
  v152 = (unint64_t *)&v149->__shared_owners_;
  do
    v153 = __ldaxr(v152);
  while (__stlxr(v153 - 1, v152));
  if (v153)
  {
    v151 = v427;
    v154 = v428;
    if (v427 == v428)
      goto LABEL_359;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v149->__on_zero_shared)(v149);
    std::__shared_weak_count::__release_weak(v149);
    v151 = v427;
    v154 = v428;
    if (v427 == v428)
      goto LABEL_359;
  }
  do
  {
    *(_QWORD *)&v432 = v111;
    *((_QWORD *)&v432 + 1) = *v151;
    v434 = 0;
    v433 = 0uLL;
    v156 = v422;
    if ((unint64_t)v422 < v423)
    {
      *(_OWORD *)v422 = v432;
      v155 = v433;
      *((_QWORD *)v156 + 4) = v434;
      *((_OWORD *)v156 + 1) = v155;
      v422 = v156 + 40;
    }
    else
    {
      v422 = sub_20EBA5F8C(&v421, (uint64_t)&v432);
      if (SHIBYTE(v434) < 0)
        operator delete((void *)v433);
    }
    ++v151;
  }
  while (v151 != v154);
  v151 = v427;
LABEL_359:
  if (v151)
  {
    v428 = v151;
    operator delete(v151);
  }
  v157 = *(std::__shared_weak_count **)(v4 + 472);
  if (!v157 || (v158 = std::__shared_weak_count::lock(v157), (*((_QWORD *)&v432 + 1) = v158) == 0))
  {
    v427 = 0;
    v428 = 0;
    v429 = 0;
    v161 = 0;
    goto LABEL_380;
  }
  v159 = v158;
  v160 = *(_QWORD *)(v4 + 464);
  *(_QWORD *)&v432 = v160;
  if (v160)
  {
    (*(void (**)(_QWORD **__return_ptr))(*(_QWORD *)v160 + 32))(&v427);
  }
  else
  {
    v427 = 0;
    v428 = 0;
    v429 = 0;
  }
  v162 = (unint64_t *)&v159->__shared_owners_;
  do
    v163 = __ldaxr(v162);
  while (__stlxr(v163 - 1, v162));
  if (v163)
  {
    v161 = v427;
    v164 = v428;
    if (v427 == v428)
      goto LABEL_380;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v159->__on_zero_shared)(v159);
    std::__shared_weak_count::__release_weak(v159);
    v161 = v427;
    v164 = v428;
    if (v427 == v428)
      goto LABEL_380;
  }
  v165 = v111 + 1;
  do
  {
    *(_QWORD *)&v432 = v165;
    *((_QWORD *)&v432 + 1) = *v161;
    v434 = 0;
    v433 = 0uLL;
    v167 = v422;
    if ((unint64_t)v422 < v423)
    {
      *(_OWORD *)v422 = v432;
      v166 = v433;
      *((_QWORD *)v167 + 4) = v434;
      *((_OWORD *)v167 + 1) = v166;
      v422 = v167 + 40;
    }
    else
    {
      v422 = sub_20EBA5F8C(&v421, (uint64_t)&v432);
      if (SHIBYTE(v434) < 0)
        operator delete((void *)v433);
    }
    ++v161;
  }
  while (v161 != v164);
  v161 = v427;
LABEL_380:
  if (v161)
  {
    v428 = v161;
    operator delete(v161);
  }
  if (SHIBYTE(v431) < 0)
  {
    operator delete(v430[0]);
    if ((SHIBYTE(v439) & 0x80000000) == 0)
    {
LABEL_384:
      if ((SHIBYTE(v441) & 0x80000000) == 0)
        goto LABEL_385;
LABEL_389:
      operator delete((void *)__dst);
      if ((*(char *)(v4 + 535) & 0x80000000) == 0)
        goto LABEL_386;
      goto LABEL_390;
    }
  }
  else if ((SHIBYTE(v439) & 0x80000000) == 0)
  {
    goto LABEL_384;
  }
  operator delete((void *)v438);
  if (SHIBYTE(v441) < 0)
    goto LABEL_389;
LABEL_385:
  if ((*(char *)(v4 + 535) & 0x80000000) == 0)
  {
LABEL_386:
    __dst = *(_OWORD *)(v4 + 512);
    v441 = *(_QWORD *)(v4 + 528);
    goto LABEL_391;
  }
LABEL_390:
  sub_20E860C04(&__dst, *(void **)(v4 + 512), *(_QWORD *)(v4 + 520));
LABEL_391:
  v168 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v4 + 600) + 48))(*(_QWORD *)(v4 + 600));
  v169 = sub_20EBA7CE0();
  if (*((char *)v169 + 23) < 0)
  {
    sub_20E860C04(&v438, (void *)*v169, v169[1]);
  }
  else
  {
    v170 = *(_OWORD *)v169;
    v439 = v169[2];
    v438 = v170;
  }
  v171 = HIBYTE(v439);
  if (v439 >= 0)
  {
    v172 = &v438;
  }
  else
  {
    v171 = *((_QWORD *)&v438 + 1);
    v172 = (__int128 *)v438;
  }
  if (v171 >= 4)
  {
    v173 = (char *)v172 + v171;
    v174 = v172;
    do
    {
      v175 = (char *)memchr(v174, 118, v171 - 3);
      if (!v175)
        break;
      if (*(_DWORD *)v175 == 1684631414)
      {
        if (v175 == v173 || v175 - (char *)v172 == -1)
          break;
        *(_QWORD *)&v432 = v168;
        DWORD2(v432) = 4;
        if (SHIBYTE(v441) < 0)
        {
          sub_20E860C04(&v433, (void *)__dst, *((unint64_t *)&__dst + 1));
        }
        else
        {
          v433 = __dst;
          v434 = v441;
        }
        if (*(char *)(v4 + 559) < 0)
        {
          sub_20E860C04(&__p, *(void **)(v4 + 536), *(_QWORD *)(v4 + 544));
        }
        else
        {
          __p = *(_OWORD *)(v4 + 536);
          *(_QWORD *)v436 = *(_QWORD *)(v4 + 552);
        }
        sub_20EC746A0();
        if (byte_254A5E997 < 0)
        {
          sub_20E860C04(&v436[8], (void *)xmmword_254A5E980, *((unint64_t *)&xmmword_254A5E980 + 1));
        }
        else
        {
          *(_OWORD *)&v436[8] = xmmword_254A5E980;
          v437 = unk_254A5E990;
        }
        v176 = v425;
        if ((unint64_t)v425 < v426)
          goto LABEL_417;
        goto LABEL_420;
      }
      v174 = (__int128 *)(v175 + 1);
      v171 = v173 - (char *)v174;
    }
    while (v173 - (char *)v174 >= 4);
  }
  *(_QWORD *)&v432 = v168;
  DWORD2(v432) = 2;
  if (SHIBYTE(v441) < 0)
  {
    sub_20E860C04(&v433, (void *)__dst, *((unint64_t *)&__dst + 1));
  }
  else
  {
    v433 = __dst;
    v434 = v441;
  }
  if (*(char *)(v4 + 559) < 0)
  {
    sub_20E860C04(&__p, *(void **)(v4 + 536), *(_QWORD *)(v4 + 544));
  }
  else
  {
    __p = *(_OWORD *)(v4 + 536);
    *(_QWORD *)v436 = *(_QWORD *)(v4 + 552);
  }
  sub_20EC746A0();
  if (byte_254A5E997 < 0)
  {
    sub_20E860C04(&v436[8], (void *)xmmword_254A5E980, *((unint64_t *)&xmmword_254A5E980 + 1));
  }
  else
  {
    *(_OWORD *)&v436[8] = xmmword_254A5E980;
    v437 = unk_254A5E990;
  }
  v176 = v425;
  if ((unint64_t)v425 >= v426)
  {
LABEL_420:
    v425 = sub_20EBA558C((char **)&v424, (uint64_t)&v432);
    if (SHIBYTE(v437) < 0)
    {
      operator delete(*(void **)&v436[8]);
      if ((v436[7] & 0x80000000) == 0)
        goto LABEL_422;
    }
    else if ((v436[7] & 0x80000000) == 0)
    {
      goto LABEL_422;
    }
LABEL_418:
    operator delete((void *)__p);
    if ((SHIBYTE(v434) & 0x80000000) == 0)
      goto LABEL_423;
    goto LABEL_419;
  }
LABEL_417:
  v177 = v432;
  *((_DWORD *)v176 + 2) = DWORD2(v432);
  *(_QWORD *)v176 = v177;
  v178 = v433;
  *((_QWORD *)v176 + 4) = v434;
  *((_OWORD *)v176 + 1) = v178;
  v434 = 0;
  v433 = 0uLL;
  v179 = *(_QWORD *)v436;
  *(_OWORD *)(v176 + 40) = __p;
  *((_QWORD *)v176 + 7) = v179;
  *(_QWORD *)v436 = 0;
  __p = 0uLL;
  v180 = *(_OWORD *)&v436[8];
  *((_QWORD *)v176 + 10) = v437;
  *((_OWORD *)v176 + 4) = v180;
  *(_QWORD *)&v436[8] = 0;
  *(_QWORD *)&v436[16] = 0;
  v437 = 0;
  v425 = v176 + 88;
  if ((v436[7] & 0x80000000) != 0)
    goto LABEL_418;
LABEL_422:
  if (SHIBYTE(v434) < 0)
LABEL_419:
    operator delete((void *)v433);
LABEL_423:
  v181 = sub_20EBA4AA4();
  if (*((char *)v181 + 23) < 0)
  {
    sub_20E860C04(v430, (void *)*v181, v181[1]);
  }
  else
  {
    v182 = *(_OWORD *)v181;
    v431 = v181[2];
    *(_OWORD *)v430 = v182;
  }
  v183 = HIBYTE(v431);
  if (v431 >= 0)
  {
    v184 = v430;
  }
  else
  {
    v183 = (uint64_t)v430[1];
    v184 = (void **)v430[0];
  }
  if (v183 >= 18)
  {
    v185 = (char *)v184 + v183;
    v186 = v184;
    do
    {
      v187 = (char *)memchr(v186, 67, v183 - 17);
      if (!v187)
        break;
      if (*(_QWORD *)v187 == 0x456C656E6E616843
        && *((_QWORD *)v187 + 1) == 0x696F763C726F7272
        && *((_WORD *)v187 + 8) == 15972)
      {
        if (v187 != v185 && v187 - (char *)v184 != -1)
          goto LABEL_467;
        break;
      }
      v186 = (void **)(v187 + 1);
      v183 = v185 - (char *)v186;
    }
    while (v185 - (char *)v186 >= 18);
  }
  *(_QWORD *)&v432 = v168 + 1;
  DWORD2(v432) = 3;
  v190 = SHIBYTE(v441);
  if (v441 >= 0)
    v191 = HIBYTE(v441);
  else
    v191 = *((_QWORD *)&__dst + 1);
  v192 = v191 + 6;
  if (v191 + 6 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v192 >= 0x17)
  {
    v194 = (v192 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v192 | 7) != 0x17)
      v194 = v192 | 7;
    v195 = v194 + 1;
    v193 = (__int128 *)operator new(v194 + 1);
    *((_QWORD *)&v433 + 1) = v191 + 6;
    v434 = v195 | 0x8000000000000000;
    *(_QWORD *)&v433 = v193;
  }
  else
  {
    v434 = 0;
    v433 = 0uLL;
    v193 = &v433;
    HIBYTE(v434) = v191 + 6;
    if (!v191)
      goto LABEL_459;
  }
  if (v190 >= 0)
    v196 = &__dst;
  else
    v196 = (__int128 *)__dst;
  memmove(v193, v196, v191);
LABEL_459:
  strcpy((char *)v193 + v191, ".Error");
  *(_WORD *)&v436[7] = 0;
  LOBYTE(__p) = 0;
  HIBYTE(v437) = 0;
  v197 = v425;
  if ((unint64_t)v425 >= v426)
  {
    v425 = sub_20EBA558C((char **)&v424, (uint64_t)&v432);
    if (SHIBYTE(v437) < 0)
    {
      operator delete(*(void **)&v436[8]);
      if ((v436[7] & 0x80000000) == 0)
        goto LABEL_466;
    }
    else if ((v436[7] & 0x80000000) == 0)
    {
      goto LABEL_466;
    }
LABEL_461:
    operator delete((void *)__p);
    if (SHIBYTE(v434) < 0)
      goto LABEL_462;
    goto LABEL_467;
  }
  v198 = v432;
  *((_DWORD *)v425 + 2) = DWORD2(v432);
  *(_QWORD *)v197 = v198;
  v199 = v433;
  *((_QWORD *)v197 + 4) = v434;
  *((_OWORD *)v197 + 1) = v199;
  v434 = 0;
  v433 = 0uLL;
  v200 = *(_QWORD *)v436;
  *(_OWORD *)(v197 + 40) = __p;
  *((_QWORD *)v197 + 7) = v200;
  *(_QWORD *)v436 = 0;
  __p = 0uLL;
  v201 = *(_OWORD *)&v436[8];
  *((_QWORD *)v197 + 10) = v437;
  *((_OWORD *)v197 + 4) = v201;
  *(_QWORD *)&v436[8] = 0;
  *(_QWORD *)&v436[16] = 0;
  v437 = 0;
  v425 = v197 + 88;
  if ((v436[7] & 0x80000000) != 0)
    goto LABEL_461;
LABEL_466:
  if (SHIBYTE(v434) < 0)
  {
LABEL_462:
    operator delete((void *)v433);
    v202 = *(std::__shared_weak_count **)(v4 + 640);
    if (!v202)
      goto LABEL_471;
    goto LABEL_468;
  }
LABEL_467:
  v202 = *(std::__shared_weak_count **)(v4 + 640);
  if (!v202)
  {
LABEL_471:
    v427 = 0;
    v428 = 0;
    v429 = 0;
    v206 = 0;
    goto LABEL_488;
  }
LABEL_468:
  v203 = std::__shared_weak_count::lock(v202);
  *((_QWORD *)&v432 + 1) = v203;
  if (!v203)
    goto LABEL_471;
  v204 = v203;
  v205 = *(_QWORD *)(v4 + 632);
  *(_QWORD *)&v432 = v205;
  if (v205)
  {
    (*(void (**)(_QWORD **__return_ptr))(*(_QWORD *)v205 + 24))(&v427);
  }
  else
  {
    v427 = 0;
    v428 = 0;
    v429 = 0;
  }
  v207 = (unint64_t *)&v204->__shared_owners_;
  do
    v208 = __ldaxr(v207);
  while (__stlxr(v208 - 1, v207));
  if (v208)
  {
    v206 = v427;
    v209 = v428;
    if (v427 == v428)
      goto LABEL_488;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v204->__on_zero_shared)(v204);
    std::__shared_weak_count::__release_weak(v204);
    v206 = v427;
    v209 = v428;
    if (v427 == v428)
      goto LABEL_488;
  }
  do
  {
    *(_QWORD *)&v432 = v168;
    *((_QWORD *)&v432 + 1) = *v206;
    v434 = 0;
    v433 = 0uLL;
    v211 = v422;
    if ((unint64_t)v422 < v423)
    {
      *(_OWORD *)v422 = v432;
      v210 = v433;
      *((_QWORD *)v211 + 4) = v434;
      *((_OWORD *)v211 + 1) = v210;
      v422 = v211 + 40;
    }
    else
    {
      v422 = sub_20EBA5F8C(&v421, (uint64_t)&v432);
      if (SHIBYTE(v434) < 0)
        operator delete((void *)v433);
    }
    ++v206;
  }
  while (v206 != v209);
  v206 = v427;
LABEL_488:
  if (v206)
  {
    v428 = v206;
    operator delete(v206);
  }
  v212 = *(std::__shared_weak_count **)(v4 + 640);
  if (!v212 || (v213 = std::__shared_weak_count::lock(v212), (*((_QWORD *)&v432 + 1) = v213) == 0))
  {
    v427 = 0;
    v428 = 0;
    v429 = 0;
    v216 = 0;
    goto LABEL_509;
  }
  v214 = v213;
  v215 = *(_QWORD *)(v4 + 632);
  *(_QWORD *)&v432 = v215;
  if (v215)
  {
    (*(void (**)(_QWORD **__return_ptr))(*(_QWORD *)v215 + 32))(&v427);
  }
  else
  {
    v427 = 0;
    v428 = 0;
    v429 = 0;
  }
  v217 = (unint64_t *)&v214->__shared_owners_;
  do
    v218 = __ldaxr(v217);
  while (__stlxr(v218 - 1, v217));
  if (v218)
  {
    v216 = v427;
    v219 = v428;
    if (v427 == v428)
      goto LABEL_509;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v214->__on_zero_shared)(v214);
    std::__shared_weak_count::__release_weak(v214);
    v216 = v427;
    v219 = v428;
    if (v427 == v428)
      goto LABEL_509;
  }
  v220 = v168 + 1;
  do
  {
    *(_QWORD *)&v432 = v220;
    *((_QWORD *)&v432 + 1) = *v216;
    v434 = 0;
    v433 = 0uLL;
    v222 = v422;
    if ((unint64_t)v422 < v423)
    {
      *(_OWORD *)v422 = v432;
      v221 = v433;
      *((_QWORD *)v222 + 4) = v434;
      *((_OWORD *)v222 + 1) = v221;
      v422 = v222 + 40;
    }
    else
    {
      v422 = sub_20EBA5F8C(&v421, (uint64_t)&v432);
      if (SHIBYTE(v434) < 0)
        operator delete((void *)v433);
    }
    ++v216;
  }
  while (v216 != v219);
  v216 = v427;
LABEL_509:
  if (v216)
  {
    v428 = v216;
    operator delete(v216);
  }
  if (SHIBYTE(v431) < 0)
  {
    operator delete(v430[0]);
    if ((SHIBYTE(v439) & 0x80000000) == 0)
    {
LABEL_513:
      if ((SHIBYTE(v441) & 0x80000000) == 0)
        goto LABEL_514;
LABEL_518:
      operator delete((void *)__dst);
      if ((*(char *)(v4 + 703) & 0x80000000) == 0)
        goto LABEL_515;
      goto LABEL_519;
    }
  }
  else if ((SHIBYTE(v439) & 0x80000000) == 0)
  {
    goto LABEL_513;
  }
  operator delete((void *)v438);
  if (SHIBYTE(v441) < 0)
    goto LABEL_518;
LABEL_514:
  if ((*(char *)(v4 + 703) & 0x80000000) == 0)
  {
LABEL_515:
    __dst = *(_OWORD *)(v4 + 680);
    v441 = *(_QWORD *)(v4 + 696);
    goto LABEL_520;
  }
LABEL_519:
  sub_20E860C04(&__dst, *(void **)(v4 + 680), *(_QWORD *)(v4 + 688));
LABEL_520:
  v223 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v4 + 768) + 48))(*(_QWORD *)(v4 + 768));
  v224 = sub_20EC74864();
  if (*((char *)v224 + 23) < 0)
  {
    sub_20E860C04(&v438, (void *)*v224, v224[1]);
  }
  else
  {
    v225 = *(_OWORD *)v224;
    v439 = v224[2];
    v438 = v225;
  }
  v226 = HIBYTE(v439);
  if (v439 >= 0)
  {
    v227 = &v438;
  }
  else
  {
    v226 = *((_QWORD *)&v438 + 1);
    v227 = (__int128 *)v438;
  }
  if (v226 >= 4)
  {
    v228 = (char *)v227 + v226;
    v229 = v227;
    do
    {
      v230 = (char *)memchr(v229, 118, v226 - 3);
      if (!v230)
        break;
      if (*(_DWORD *)v230 == 1684631414)
      {
        if (v230 == v228 || v230 - (char *)v227 == -1)
          break;
        *(_QWORD *)&v432 = v223;
        DWORD2(v432) = 4;
        if (SHIBYTE(v441) < 0)
        {
          sub_20E860C04(&v433, (void *)__dst, *((unint64_t *)&__dst + 1));
        }
        else
        {
          v433 = __dst;
          v434 = v441;
        }
        if (*(char *)(v4 + 727) < 0)
        {
          sub_20E860C04(&__p, *(void **)(v4 + 704), *(_QWORD *)(v4 + 712));
        }
        else
        {
          __p = *(_OWORD *)(v4 + 704);
          *(_QWORD *)v436 = *(_QWORD *)(v4 + 720);
        }
        sub_20EC75598();
        if (byte_254A5E9DF < 0)
        {
          sub_20E860C04(&v436[8], (void *)xmmword_254A5E9C8, *((unint64_t *)&xmmword_254A5E9C8 + 1));
        }
        else
        {
          *(_OWORD *)&v436[8] = xmmword_254A5E9C8;
          v437 = unk_254A5E9D8;
        }
        v231 = v425;
        if ((unint64_t)v425 < v426)
          goto LABEL_546;
        goto LABEL_549;
      }
      v229 = (__int128 *)(v230 + 1);
      v226 = v228 - (char *)v229;
    }
    while (v228 - (char *)v229 >= 4);
  }
  *(_QWORD *)&v432 = v223;
  DWORD2(v432) = 2;
  if (SHIBYTE(v441) < 0)
  {
    sub_20E860C04(&v433, (void *)__dst, *((unint64_t *)&__dst + 1));
  }
  else
  {
    v433 = __dst;
    v434 = v441;
  }
  if (*(char *)(v4 + 727) < 0)
  {
    sub_20E860C04(&__p, *(void **)(v4 + 704), *(_QWORD *)(v4 + 712));
  }
  else
  {
    __p = *(_OWORD *)(v4 + 704);
    *(_QWORD *)v436 = *(_QWORD *)(v4 + 720);
  }
  sub_20EC75598();
  if (byte_254A5E9DF < 0)
  {
    sub_20E860C04(&v436[8], (void *)xmmword_254A5E9C8, *((unint64_t *)&xmmword_254A5E9C8 + 1));
  }
  else
  {
    *(_OWORD *)&v436[8] = xmmword_254A5E9C8;
    v437 = unk_254A5E9D8;
  }
  v231 = v425;
  if ((unint64_t)v425 >= v426)
  {
LABEL_549:
    v425 = sub_20EBA558C((char **)&v424, (uint64_t)&v432);
    if (SHIBYTE(v437) < 0)
    {
      operator delete(*(void **)&v436[8]);
      if ((v436[7] & 0x80000000) == 0)
        goto LABEL_551;
    }
    else if ((v436[7] & 0x80000000) == 0)
    {
      goto LABEL_551;
    }
LABEL_547:
    operator delete((void *)__p);
    if ((SHIBYTE(v434) & 0x80000000) == 0)
      goto LABEL_552;
    goto LABEL_548;
  }
LABEL_546:
  v232 = v432;
  *((_DWORD *)v231 + 2) = DWORD2(v432);
  *(_QWORD *)v231 = v232;
  v233 = v433;
  *((_QWORD *)v231 + 4) = v434;
  *((_OWORD *)v231 + 1) = v233;
  v434 = 0;
  v433 = 0uLL;
  v234 = *(_QWORD *)v436;
  *(_OWORD *)(v231 + 40) = __p;
  *((_QWORD *)v231 + 7) = v234;
  *(_QWORD *)v436 = 0;
  __p = 0uLL;
  v235 = *(_OWORD *)&v436[8];
  *((_QWORD *)v231 + 10) = v437;
  *((_OWORD *)v231 + 4) = v235;
  *(_QWORD *)&v436[8] = 0;
  *(_QWORD *)&v436[16] = 0;
  v437 = 0;
  v425 = v231 + 88;
  if ((v436[7] & 0x80000000) != 0)
    goto LABEL_547;
LABEL_551:
  if (SHIBYTE(v434) < 0)
LABEL_548:
    operator delete((void *)v433);
LABEL_552:
  v236 = sub_20EBA4AA4();
  if (*((char *)v236 + 23) < 0)
  {
    sub_20E860C04(v430, (void *)*v236, v236[1]);
  }
  else
  {
    v237 = *(_OWORD *)v236;
    v431 = v236[2];
    *(_OWORD *)v430 = v237;
  }
  v238 = HIBYTE(v431);
  if (v431 >= 0)
  {
    v239 = v430;
  }
  else
  {
    v238 = (uint64_t)v430[1];
    v239 = (void **)v430[0];
  }
  if (v238 >= 18)
  {
    v240 = (char *)v239 + v238;
    v241 = v239;
    do
    {
      v242 = (char *)memchr(v241, 67, v238 - 17);
      if (!v242)
        break;
      if (*(_QWORD *)v242 == 0x456C656E6E616843
        && *((_QWORD *)v242 + 1) == 0x696F763C726F7272
        && *((_WORD *)v242 + 8) == 15972)
      {
        if (v242 != v240 && v242 - (char *)v239 != -1)
          goto LABEL_596;
        break;
      }
      v241 = (void **)(v242 + 1);
      v238 = v240 - (char *)v241;
    }
    while (v240 - (char *)v241 >= 18);
  }
  *(_QWORD *)&v432 = v223 + 1;
  DWORD2(v432) = 3;
  v245 = SHIBYTE(v441);
  if (v441 >= 0)
    v246 = HIBYTE(v441);
  else
    v246 = *((_QWORD *)&__dst + 1);
  v247 = v246 + 6;
  if (v246 + 6 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v247 >= 0x17)
  {
    v249 = (v247 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v247 | 7) != 0x17)
      v249 = v247 | 7;
    v250 = v249 + 1;
    v248 = (__int128 *)operator new(v249 + 1);
    *((_QWORD *)&v433 + 1) = v246 + 6;
    v434 = v250 | 0x8000000000000000;
    *(_QWORD *)&v433 = v248;
  }
  else
  {
    v434 = 0;
    v433 = 0uLL;
    v248 = &v433;
    HIBYTE(v434) = v246 + 6;
    if (!v246)
      goto LABEL_588;
  }
  if (v245 >= 0)
    v251 = &__dst;
  else
    v251 = (__int128 *)__dst;
  memmove(v248, v251, v246);
LABEL_588:
  strcpy((char *)v248 + v246, ".Error");
  *(_WORD *)&v436[7] = 0;
  LOBYTE(__p) = 0;
  HIBYTE(v437) = 0;
  v252 = v425;
  if ((unint64_t)v425 >= v426)
  {
    v425 = sub_20EBA558C((char **)&v424, (uint64_t)&v432);
    if (SHIBYTE(v437) < 0)
    {
      operator delete(*(void **)&v436[8]);
      if ((v436[7] & 0x80000000) == 0)
        goto LABEL_595;
    }
    else if ((v436[7] & 0x80000000) == 0)
    {
      goto LABEL_595;
    }
LABEL_590:
    operator delete((void *)__p);
    if (SHIBYTE(v434) < 0)
      goto LABEL_591;
    goto LABEL_596;
  }
  v253 = v432;
  *((_DWORD *)v425 + 2) = DWORD2(v432);
  *(_QWORD *)v252 = v253;
  v254 = v433;
  *((_QWORD *)v252 + 4) = v434;
  *((_OWORD *)v252 + 1) = v254;
  v434 = 0;
  v433 = 0uLL;
  v255 = *(_QWORD *)v436;
  *(_OWORD *)(v252 + 40) = __p;
  *((_QWORD *)v252 + 7) = v255;
  *(_QWORD *)v436 = 0;
  __p = 0uLL;
  v256 = *(_OWORD *)&v436[8];
  *((_QWORD *)v252 + 10) = v437;
  *((_OWORD *)v252 + 4) = v256;
  *(_QWORD *)&v436[8] = 0;
  *(_QWORD *)&v436[16] = 0;
  v437 = 0;
  v425 = v252 + 88;
  if ((v436[7] & 0x80000000) != 0)
    goto LABEL_590;
LABEL_595:
  if (SHIBYTE(v434) < 0)
  {
LABEL_591:
    operator delete((void *)v433);
    v257 = *(std::__shared_weak_count **)(v4 + 808);
    if (!v257)
      goto LABEL_600;
    goto LABEL_597;
  }
LABEL_596:
  v257 = *(std::__shared_weak_count **)(v4 + 808);
  if (!v257)
  {
LABEL_600:
    v427 = 0;
    v428 = 0;
    v429 = 0;
    v261 = 0;
    goto LABEL_617;
  }
LABEL_597:
  v258 = std::__shared_weak_count::lock(v257);
  *((_QWORD *)&v432 + 1) = v258;
  if (!v258)
    goto LABEL_600;
  v259 = v258;
  v260 = *(_QWORD *)(v4 + 800);
  *(_QWORD *)&v432 = v260;
  if (v260)
  {
    (*(void (**)(_QWORD **__return_ptr))(*(_QWORD *)v260 + 24))(&v427);
  }
  else
  {
    v427 = 0;
    v428 = 0;
    v429 = 0;
  }
  v262 = (unint64_t *)&v259->__shared_owners_;
  do
    v263 = __ldaxr(v262);
  while (__stlxr(v263 - 1, v262));
  if (v263)
  {
    v261 = v427;
    v264 = v428;
    if (v427 == v428)
      goto LABEL_617;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v259->__on_zero_shared)(v259);
    std::__shared_weak_count::__release_weak(v259);
    v261 = v427;
    v264 = v428;
    if (v427 == v428)
      goto LABEL_617;
  }
  do
  {
    *(_QWORD *)&v432 = v223;
    *((_QWORD *)&v432 + 1) = *v261;
    v434 = 0;
    v433 = 0uLL;
    v266 = v422;
    if ((unint64_t)v422 < v423)
    {
      *(_OWORD *)v422 = v432;
      v265 = v433;
      *((_QWORD *)v266 + 4) = v434;
      *((_OWORD *)v266 + 1) = v265;
      v422 = v266 + 40;
    }
    else
    {
      v422 = sub_20EBA5F8C(&v421, (uint64_t)&v432);
      if (SHIBYTE(v434) < 0)
        operator delete((void *)v433);
    }
    ++v261;
  }
  while (v261 != v264);
  v261 = v427;
LABEL_617:
  if (v261)
  {
    v428 = v261;
    operator delete(v261);
  }
  v267 = *(std::__shared_weak_count **)(v4 + 808);
  if (!v267 || (v268 = std::__shared_weak_count::lock(v267), (*((_QWORD *)&v432 + 1) = v268) == 0))
  {
    v427 = 0;
    v428 = 0;
    v429 = 0;
    v271 = 0;
    goto LABEL_638;
  }
  v269 = v268;
  v270 = *(_QWORD *)(v4 + 800);
  *(_QWORD *)&v432 = v270;
  if (v270)
  {
    (*(void (**)(_QWORD **__return_ptr))(*(_QWORD *)v270 + 32))(&v427);
  }
  else
  {
    v427 = 0;
    v428 = 0;
    v429 = 0;
  }
  v272 = (unint64_t *)&v269->__shared_owners_;
  do
    v273 = __ldaxr(v272);
  while (__stlxr(v273 - 1, v272));
  if (v273)
  {
    v271 = v427;
    v274 = v428;
    if (v427 == v428)
      goto LABEL_638;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v269->__on_zero_shared)(v269);
    std::__shared_weak_count::__release_weak(v269);
    v271 = v427;
    v274 = v428;
    if (v427 == v428)
      goto LABEL_638;
  }
  v275 = v223 + 1;
  do
  {
    *(_QWORD *)&v432 = v275;
    *((_QWORD *)&v432 + 1) = *v271;
    v434 = 0;
    v433 = 0uLL;
    v277 = v422;
    if ((unint64_t)v422 < v423)
    {
      *(_OWORD *)v422 = v432;
      v276 = v433;
      *((_QWORD *)v277 + 4) = v434;
      *((_OWORD *)v277 + 1) = v276;
      v422 = v277 + 40;
    }
    else
    {
      v422 = sub_20EBA5F8C(&v421, (uint64_t)&v432);
      if (SHIBYTE(v434) < 0)
        operator delete((void *)v433);
    }
    ++v271;
  }
  while (v271 != v274);
  v271 = v427;
LABEL_638:
  if (v271)
  {
    v428 = v271;
    operator delete(v271);
  }
  if (SHIBYTE(v431) < 0)
  {
    operator delete(v430[0]);
    if ((SHIBYTE(v439) & 0x80000000) == 0)
    {
LABEL_642:
      if ((SHIBYTE(v441) & 0x80000000) == 0)
        goto LABEL_643;
LABEL_647:
      operator delete((void *)__dst);
      if ((*(char *)(v4 + 871) & 0x80000000) == 0)
        goto LABEL_644;
LABEL_648:
      sub_20E860C04(&__dst, *(void **)(v4 + 848), *(_QWORD *)(v4 + 856));
      goto LABEL_649;
    }
  }
  else if ((SHIBYTE(v439) & 0x80000000) == 0)
  {
    goto LABEL_642;
  }
  operator delete((void *)v438);
  if (SHIBYTE(v441) < 0)
    goto LABEL_647;
LABEL_643:
  if (*(char *)(v4 + 871) < 0)
    goto LABEL_648;
LABEL_644:
  __dst = *(_OWORD *)(v4 + 848);
  v441 = *(_QWORD *)(v4 + 864);
LABEL_649:
  v278 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v4 + 936) + 48))(*(_QWORD *)(v4 + 936));
  v279 = atomic_load((unsigned __int8 *)&qword_254A5D740);
  if ((v279 & 1) != 0 || !__cxa_guard_acquire(&qword_254A5D740))
    goto LABEL_650;
  sub_20EC7575C();
  v398 = byte_254A5EA3F;
  if (byte_254A5EA3F >= 0)
    v399 = byte_254A5EA3F;
  else
    v399 = qword_254A5EA30;
  v400 = v399 + 1;
  if (v399 + 1 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v400 >= 0x17)
  {
    v409 = (v400 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v400 | 7) != 0x17)
      v409 = v400 | 7;
    v410 = v409 + 1;
    v401 = (__int128 *)operator new(v409 + 1);
    *((_QWORD *)&xmmword_254A5EA10 + 1) = v399 + 1;
    unk_254A5EA20 = v410 | 0x8000000000000000;
    *(_QWORD *)&xmmword_254A5EA10 = v401;
    goto LABEL_1045;
  }
  unk_254A5EA20 = 0;
  xmmword_254A5EA10 = 0uLL;
  v401 = &xmmword_254A5EA10;
  byte_254A5EA27 = v399 + 1;
  if (v399)
  {
LABEL_1045:
    if (v398 >= 0)
      v411 = &qword_254A5EA28;
    else
      v411 = (uint64_t *)qword_254A5EA28;
    memmove(v401, v411, v399);
  }
  *(_WORD *)((char *)v401 + v399) = 38;
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A5EA10, &dword_20E81F000);
  __cxa_guard_release(&qword_254A5D740);
LABEL_650:
  if (byte_254A5EA27 < 0)
  {
    sub_20E860C04(&v438, (void *)xmmword_254A5EA10, *((unint64_t *)&xmmword_254A5EA10 + 1));
  }
  else
  {
    v438 = xmmword_254A5EA10;
    v439 = unk_254A5EA20;
  }
  v280 = HIBYTE(v439);
  if (v439 >= 0)
  {
    v281 = &v438;
  }
  else
  {
    v280 = *((_QWORD *)&v438 + 1);
    v281 = (__int128 *)v438;
  }
  if (v280 >= 4)
  {
    v282 = (char *)v281 + v280;
    v283 = v281;
    do
    {
      v284 = (char *)memchr(v283, 118, v280 - 3);
      if (!v284)
        break;
      if (*(_DWORD *)v284 == 1684631414)
      {
        if (v284 == v282 || v284 - (char *)v281 == -1)
          break;
        *(_QWORD *)&v432 = v278;
        DWORD2(v432) = 4;
        if (SHIBYTE(v441) < 0)
        {
          sub_20E860C04(&v433, (void *)__dst, *((unint64_t *)&__dst + 1));
        }
        else
        {
          v433 = __dst;
          v434 = v441;
        }
        if (*(char *)(v4 + 895) < 0)
        {
          sub_20E860C04(&__p, *(void **)(v4 + 872), *(_QWORD *)(v4 + 880));
        }
        else
        {
          __p = *(_OWORD *)(v4 + 872);
          *(_QWORD *)v436 = *(_QWORD *)(v4 + 888);
        }
        sub_20EC75F24();
        if (byte_254A5EB17 < 0)
        {
          sub_20E860C04(&v436[8], (void *)xmmword_254A5EB00, *((unint64_t *)&xmmword_254A5EB00 + 1));
        }
        else
        {
          *(_OWORD *)&v436[8] = xmmword_254A5EB00;
          v437 = unk_254A5EB10;
        }
        v285 = v425;
        if ((unint64_t)v425 < v426)
          goto LABEL_676;
        goto LABEL_679;
      }
      v283 = (__int128 *)(v284 + 1);
      v280 = v282 - (char *)v283;
    }
    while (v282 - (char *)v283 >= 4);
  }
  *(_QWORD *)&v432 = v278;
  DWORD2(v432) = 2;
  if (SHIBYTE(v441) < 0)
  {
    sub_20E860C04(&v433, (void *)__dst, *((unint64_t *)&__dst + 1));
  }
  else
  {
    v433 = __dst;
    v434 = v441;
  }
  if (*(char *)(v4 + 895) < 0)
  {
    sub_20E860C04(&__p, *(void **)(v4 + 872), *(_QWORD *)(v4 + 880));
  }
  else
  {
    __p = *(_OWORD *)(v4 + 872);
    *(_QWORD *)v436 = *(_QWORD *)(v4 + 888);
  }
  sub_20EC75F24();
  if (byte_254A5EB17 < 0)
  {
    sub_20E860C04(&v436[8], (void *)xmmword_254A5EB00, *((unint64_t *)&xmmword_254A5EB00 + 1));
  }
  else
  {
    *(_OWORD *)&v436[8] = xmmword_254A5EB00;
    v437 = unk_254A5EB10;
  }
  v285 = v425;
  if ((unint64_t)v425 >= v426)
  {
LABEL_679:
    v425 = sub_20EBA558C((char **)&v424, (uint64_t)&v432);
    if (SHIBYTE(v437) < 0)
    {
      operator delete(*(void **)&v436[8]);
      if ((v436[7] & 0x80000000) == 0)
        goto LABEL_681;
    }
    else if ((v436[7] & 0x80000000) == 0)
    {
      goto LABEL_681;
    }
LABEL_677:
    operator delete((void *)__p);
    if ((SHIBYTE(v434) & 0x80000000) == 0)
      goto LABEL_682;
    goto LABEL_678;
  }
LABEL_676:
  v286 = v432;
  *((_DWORD *)v285 + 2) = DWORD2(v432);
  *(_QWORD *)v285 = v286;
  v287 = v433;
  *((_QWORD *)v285 + 4) = v434;
  *((_OWORD *)v285 + 1) = v287;
  v434 = 0;
  v433 = 0uLL;
  v288 = *(_QWORD *)v436;
  *(_OWORD *)(v285 + 40) = __p;
  *((_QWORD *)v285 + 7) = v288;
  *(_QWORD *)v436 = 0;
  __p = 0uLL;
  v289 = *(_OWORD *)&v436[8];
  *((_QWORD *)v285 + 10) = v437;
  *((_OWORD *)v285 + 4) = v289;
  *(_QWORD *)&v436[8] = 0;
  *(_QWORD *)&v436[16] = 0;
  v437 = 0;
  v425 = v285 + 88;
  if ((v436[7] & 0x80000000) != 0)
    goto LABEL_677;
LABEL_681:
  if (SHIBYTE(v434) < 0)
LABEL_678:
    operator delete((void *)v433);
LABEL_682:
  v290 = sub_20EBA4AA4();
  if (*((char *)v290 + 23) < 0)
  {
    sub_20E860C04(v430, (void *)*v290, v290[1]);
  }
  else
  {
    v291 = *(_OWORD *)v290;
    v431 = v290[2];
    *(_OWORD *)v430 = v291;
  }
  v292 = HIBYTE(v431);
  if (v431 >= 0)
  {
    v293 = v430;
  }
  else
  {
    v292 = (uint64_t)v430[1];
    v293 = (void **)v430[0];
  }
  if (v292 >= 18)
  {
    v294 = (char *)v293 + v292;
    v295 = v293;
    do
    {
      v296 = (char *)memchr(v295, 67, v292 - 17);
      if (!v296)
        break;
      if (*(_QWORD *)v296 == 0x456C656E6E616843
        && *((_QWORD *)v296 + 1) == 0x696F763C726F7272
        && *((_WORD *)v296 + 8) == 15972)
      {
        if (v296 != v294 && v296 - (char *)v293 != -1)
          goto LABEL_726;
        break;
      }
      v295 = (void **)(v296 + 1);
      v292 = v294 - (char *)v295;
    }
    while (v294 - (char *)v295 >= 18);
  }
  *(_QWORD *)&v432 = v278 + 1;
  DWORD2(v432) = 3;
  v299 = SHIBYTE(v441);
  if (v441 >= 0)
    v300 = HIBYTE(v441);
  else
    v300 = *((_QWORD *)&__dst + 1);
  v301 = v300 + 6;
  if (v300 + 6 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v301 >= 0x17)
  {
    v303 = (v301 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v301 | 7) != 0x17)
      v303 = v301 | 7;
    v304 = v303 + 1;
    v302 = (__int128 *)operator new(v303 + 1);
    *((_QWORD *)&v433 + 1) = v300 + 6;
    v434 = v304 | 0x8000000000000000;
    *(_QWORD *)&v433 = v302;
  }
  else
  {
    v434 = 0;
    v433 = 0uLL;
    v302 = &v433;
    HIBYTE(v434) = v300 + 6;
    if (!v300)
      goto LABEL_718;
  }
  if (v299 >= 0)
    v305 = &__dst;
  else
    v305 = (__int128 *)__dst;
  memmove(v302, v305, v300);
LABEL_718:
  strcpy((char *)v302 + v300, ".Error");
  *(_WORD *)&v436[7] = 0;
  LOBYTE(__p) = 0;
  HIBYTE(v437) = 0;
  v306 = v425;
  if ((unint64_t)v425 >= v426)
  {
    v425 = sub_20EBA558C((char **)&v424, (uint64_t)&v432);
    if (SHIBYTE(v437) < 0)
    {
      operator delete(*(void **)&v436[8]);
      if ((v436[7] & 0x80000000) == 0)
        goto LABEL_725;
    }
    else if ((v436[7] & 0x80000000) == 0)
    {
      goto LABEL_725;
    }
LABEL_720:
    operator delete((void *)__p);
    if (SHIBYTE(v434) < 0)
      goto LABEL_721;
    goto LABEL_726;
  }
  v307 = v432;
  *((_DWORD *)v425 + 2) = DWORD2(v432);
  *(_QWORD *)v306 = v307;
  v308 = v433;
  *((_QWORD *)v306 + 4) = v434;
  *((_OWORD *)v306 + 1) = v308;
  v434 = 0;
  v433 = 0uLL;
  v309 = *(_QWORD *)v436;
  *(_OWORD *)(v306 + 40) = __p;
  *((_QWORD *)v306 + 7) = v309;
  *(_QWORD *)v436 = 0;
  __p = 0uLL;
  v310 = *(_OWORD *)&v436[8];
  *((_QWORD *)v306 + 10) = v437;
  *((_OWORD *)v306 + 4) = v310;
  *(_QWORD *)&v436[8] = 0;
  *(_QWORD *)&v436[16] = 0;
  v437 = 0;
  v425 = v306 + 88;
  if ((v436[7] & 0x80000000) != 0)
    goto LABEL_720;
LABEL_725:
  if (SHIBYTE(v434) < 0)
  {
LABEL_721:
    operator delete((void *)v433);
    v311 = *(std::__shared_weak_count **)(v4 + 976);
    if (!v311)
      goto LABEL_730;
    goto LABEL_727;
  }
LABEL_726:
  v311 = *(std::__shared_weak_count **)(v4 + 976);
  if (!v311)
  {
LABEL_730:
    v427 = 0;
    v428 = 0;
    v429 = 0;
    v315 = 0;
    goto LABEL_747;
  }
LABEL_727:
  v312 = std::__shared_weak_count::lock(v311);
  *((_QWORD *)&v432 + 1) = v312;
  if (!v312)
    goto LABEL_730;
  v313 = v312;
  v314 = *(_QWORD *)(v4 + 968);
  *(_QWORD *)&v432 = v314;
  if (v314)
  {
    (*(void (**)(_QWORD **__return_ptr))(*(_QWORD *)v314 + 24))(&v427);
  }
  else
  {
    v427 = 0;
    v428 = 0;
    v429 = 0;
  }
  v316 = (unint64_t *)&v313->__shared_owners_;
  do
    v317 = __ldaxr(v316);
  while (__stlxr(v317 - 1, v316));
  if (v317)
  {
    v315 = v427;
    v318 = v428;
    if (v427 == v428)
      goto LABEL_747;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v313->__on_zero_shared)(v313);
    std::__shared_weak_count::__release_weak(v313);
    v315 = v427;
    v318 = v428;
    if (v427 == v428)
      goto LABEL_747;
  }
  do
  {
    *(_QWORD *)&v432 = v278;
    *((_QWORD *)&v432 + 1) = *v315;
    v434 = 0;
    v433 = 0uLL;
    v320 = v422;
    if ((unint64_t)v422 < v423)
    {
      *(_OWORD *)v422 = v432;
      v319 = v433;
      *((_QWORD *)v320 + 4) = v434;
      *((_OWORD *)v320 + 1) = v319;
      v422 = v320 + 40;
    }
    else
    {
      v422 = sub_20EBA5F8C(&v421, (uint64_t)&v432);
      if (SHIBYTE(v434) < 0)
        operator delete((void *)v433);
    }
    ++v315;
  }
  while (v315 != v318);
  v315 = v427;
LABEL_747:
  if (v315)
  {
    v428 = v315;
    operator delete(v315);
  }
  v321 = *(std::__shared_weak_count **)(v4 + 976);
  if (!v321 || (v322 = std::__shared_weak_count::lock(v321), (*((_QWORD *)&v432 + 1) = v322) == 0))
  {
    v427 = 0;
    v428 = 0;
    v429 = 0;
    v325 = 0;
    goto LABEL_768;
  }
  v323 = v322;
  v324 = *(_QWORD *)(v4 + 968);
  *(_QWORD *)&v432 = v324;
  if (v324)
  {
    (*(void (**)(_QWORD **__return_ptr))(*(_QWORD *)v324 + 32))(&v427);
  }
  else
  {
    v427 = 0;
    v428 = 0;
    v429 = 0;
  }
  v326 = (unint64_t *)&v323->__shared_owners_;
  do
    v327 = __ldaxr(v326);
  while (__stlxr(v327 - 1, v326));
  if (v327)
  {
    v325 = v427;
    v328 = v428;
    if (v427 == v428)
      goto LABEL_768;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v323->__on_zero_shared)(v323);
    std::__shared_weak_count::__release_weak(v323);
    v325 = v427;
    v328 = v428;
    if (v427 == v428)
      goto LABEL_768;
  }
  v329 = v278 + 1;
  do
  {
    *(_QWORD *)&v432 = v329;
    *((_QWORD *)&v432 + 1) = *v325;
    v434 = 0;
    v433 = 0uLL;
    v331 = v422;
    if ((unint64_t)v422 < v423)
    {
      *(_OWORD *)v422 = v432;
      v330 = v433;
      *((_QWORD *)v331 + 4) = v434;
      *((_OWORD *)v331 + 1) = v330;
      v422 = v331 + 40;
    }
    else
    {
      v422 = sub_20EBA5F8C(&v421, (uint64_t)&v432);
      if (SHIBYTE(v434) < 0)
        operator delete((void *)v433);
    }
    ++v325;
  }
  while (v325 != v328);
  v325 = v427;
LABEL_768:
  if (v325)
  {
    v428 = v325;
    operator delete(v325);
  }
  if (SHIBYTE(v431) < 0)
  {
    operator delete(v430[0]);
    if ((SHIBYTE(v439) & 0x80000000) == 0)
    {
LABEL_772:
      if ((SHIBYTE(v441) & 0x80000000) == 0)
        goto LABEL_773;
LABEL_777:
      operator delete((void *)__dst);
      if ((*(char *)(v4 + 1039) & 0x80000000) == 0)
        goto LABEL_774;
LABEL_778:
      sub_20E860C04(&__dst, *(void **)(v4 + 1016), *(_QWORD *)(v4 + 1024));
      goto LABEL_779;
    }
  }
  else if ((SHIBYTE(v439) & 0x80000000) == 0)
  {
    goto LABEL_772;
  }
  operator delete((void *)v438);
  if (SHIBYTE(v441) < 0)
    goto LABEL_777;
LABEL_773:
  if (*(char *)(v4 + 1039) < 0)
    goto LABEL_778;
LABEL_774:
  __dst = *(_OWORD *)(v4 + 1016);
  v441 = *(_QWORD *)(v4 + 1032);
LABEL_779:
  v332 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v4 + 1104) + 48))(*(_QWORD *)(v4 + 1104));
  v333 = atomic_load((unsigned __int8 *)&qword_254A5D7A8);
  if ((v333 & 1) != 0 || !__cxa_guard_acquire(&qword_254A5D7A8))
    goto LABEL_780;
  sub_20EC760E8();
  v402 = byte_254A5EB77;
  if (byte_254A5EB77 >= 0)
    v403 = byte_254A5EB77;
  else
    v403 = qword_254A5EB68;
  v404 = v403 + 1;
  if (v403 + 1 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v404 >= 0x17)
  {
    v412 = (v404 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v404 | 7) != 0x17)
      v412 = v404 | 7;
    v413 = v412 + 1;
    v405 = (__int128 *)operator new(v412 + 1);
    *((_QWORD *)&xmmword_254A5EB48 + 1) = v403 + 1;
    unk_254A5EB58 = v413 | 0x8000000000000000;
    *(_QWORD *)&xmmword_254A5EB48 = v405;
    goto LABEL_1053;
  }
  unk_254A5EB58 = 0;
  xmmword_254A5EB48 = 0uLL;
  v405 = &xmmword_254A5EB48;
  byte_254A5EB5F = v403 + 1;
  if (v403)
  {
LABEL_1053:
    if (v402 >= 0)
      v414 = &qword_254A5EB60;
    else
      v414 = (uint64_t *)qword_254A5EB60;
    memmove(v405, v414, v403);
  }
  *(_WORD *)((char *)v405 + v403) = 38;
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A5EB48, &dword_20E81F000);
  __cxa_guard_release(&qword_254A5D7A8);
LABEL_780:
  if (byte_254A5EB5F < 0)
  {
    sub_20E860C04(&v438, (void *)xmmword_254A5EB48, *((unint64_t *)&xmmword_254A5EB48 + 1));
  }
  else
  {
    v438 = xmmword_254A5EB48;
    v439 = unk_254A5EB58;
  }
  v334 = HIBYTE(v439);
  if (v439 >= 0)
  {
    v335 = &v438;
  }
  else
  {
    v334 = *((_QWORD *)&v438 + 1);
    v335 = (__int128 *)v438;
  }
  if (v334 >= 4)
  {
    v336 = (char *)v335 + v334;
    v337 = v335;
    do
    {
      v338 = (char *)memchr(v337, 118, v334 - 3);
      if (!v338)
        break;
      if (*(_DWORD *)v338 == 1684631414)
      {
        if (v338 == v336 || v338 - (char *)v335 == -1)
          break;
        *(_QWORD *)&v432 = v332;
        DWORD2(v432) = 4;
        if (SHIBYTE(v441) < 0)
        {
          sub_20E860C04(&v433, (void *)__dst, *((unint64_t *)&__dst + 1));
        }
        else
        {
          v433 = __dst;
          v434 = v441;
        }
        if (*(char *)(v4 + 1063) < 0)
        {
          sub_20E860C04(&__p, *(void **)(v4 + 1040), *(_QWORD *)(v4 + 1048));
        }
        else
        {
          __p = *(_OWORD *)(v4 + 1040);
          *(_QWORD *)v436 = *(_QWORD *)(v4 + 1056);
        }
        sub_20EC76A9C();
        if (byte_254A5EC67 < 0)
        {
          sub_20E860C04(&v436[8], (void *)xmmword_254A5EC50, *((unint64_t *)&xmmword_254A5EC50 + 1));
        }
        else
        {
          *(_OWORD *)&v436[8] = xmmword_254A5EC50;
          v437 = unk_254A5EC60;
        }
        v339 = v425;
        if ((unint64_t)v425 < v426)
          goto LABEL_806;
        goto LABEL_809;
      }
      v337 = (__int128 *)(v338 + 1);
      v334 = v336 - (char *)v337;
    }
    while (v336 - (char *)v337 >= 4);
  }
  *(_QWORD *)&v432 = v332;
  DWORD2(v432) = 2;
  if (SHIBYTE(v441) < 0)
  {
    sub_20E860C04(&v433, (void *)__dst, *((unint64_t *)&__dst + 1));
  }
  else
  {
    v433 = __dst;
    v434 = v441;
  }
  if (*(char *)(v4 + 1063) < 0)
  {
    sub_20E860C04(&__p, *(void **)(v4 + 1040), *(_QWORD *)(v4 + 1048));
  }
  else
  {
    __p = *(_OWORD *)(v4 + 1040);
    *(_QWORD *)v436 = *(_QWORD *)(v4 + 1056);
  }
  sub_20EC76A9C();
  if (byte_254A5EC67 < 0)
  {
    sub_20E860C04(&v436[8], (void *)xmmword_254A5EC50, *((unint64_t *)&xmmword_254A5EC50 + 1));
  }
  else
  {
    *(_OWORD *)&v436[8] = xmmword_254A5EC50;
    v437 = unk_254A5EC60;
  }
  v339 = v425;
  if ((unint64_t)v425 >= v426)
  {
LABEL_809:
    v425 = sub_20EBA558C((char **)&v424, (uint64_t)&v432);
    if (SHIBYTE(v437) < 0)
    {
      operator delete(*(void **)&v436[8]);
      if ((v436[7] & 0x80000000) == 0)
        goto LABEL_811;
    }
    else if ((v436[7] & 0x80000000) == 0)
    {
      goto LABEL_811;
    }
LABEL_807:
    operator delete((void *)__p);
    if ((SHIBYTE(v434) & 0x80000000) == 0)
      goto LABEL_812;
    goto LABEL_808;
  }
LABEL_806:
  v340 = v432;
  *((_DWORD *)v339 + 2) = DWORD2(v432);
  *(_QWORD *)v339 = v340;
  v341 = v433;
  *((_QWORD *)v339 + 4) = v434;
  *((_OWORD *)v339 + 1) = v341;
  v434 = 0;
  v433 = 0uLL;
  v342 = *(_QWORD *)v436;
  *(_OWORD *)(v339 + 40) = __p;
  *((_QWORD *)v339 + 7) = v342;
  *(_QWORD *)v436 = 0;
  __p = 0uLL;
  v343 = *(_OWORD *)&v436[8];
  *((_QWORD *)v339 + 10) = v437;
  *((_OWORD *)v339 + 4) = v343;
  *(_QWORD *)&v436[8] = 0;
  *(_QWORD *)&v436[16] = 0;
  v437 = 0;
  v425 = v339 + 88;
  if ((v436[7] & 0x80000000) != 0)
    goto LABEL_807;
LABEL_811:
  if (SHIBYTE(v434) < 0)
LABEL_808:
    operator delete((void *)v433);
LABEL_812:
  v344 = sub_20EBA4AA4();
  if (*((char *)v344 + 23) < 0)
  {
    sub_20E860C04(v430, (void *)*v344, v344[1]);
  }
  else
  {
    v345 = *(_OWORD *)v344;
    v431 = v344[2];
    *(_OWORD *)v430 = v345;
  }
  v346 = HIBYTE(v431);
  if (v431 >= 0)
  {
    v347 = v430;
  }
  else
  {
    v346 = (uint64_t)v430[1];
    v347 = (void **)v430[0];
  }
  if (v346 >= 18)
  {
    v348 = (char *)v347 + v346;
    v349 = v347;
    do
    {
      v350 = (char *)memchr(v349, 67, v346 - 17);
      if (!v350)
        break;
      if (*(_QWORD *)v350 == 0x456C656E6E616843
        && *((_QWORD *)v350 + 1) == 0x696F763C726F7272
        && *((_WORD *)v350 + 8) == 15972)
      {
        if (v350 != v348 && v350 - (char *)v347 != -1)
          goto LABEL_856;
        break;
      }
      v349 = (void **)(v350 + 1);
      v346 = v348 - (char *)v349;
    }
    while (v348 - (char *)v349 >= 18);
  }
  *(_QWORD *)&v432 = v332 + 1;
  DWORD2(v432) = 3;
  v353 = SHIBYTE(v441);
  if (v441 >= 0)
    v354 = HIBYTE(v441);
  else
    v354 = *((_QWORD *)&__dst + 1);
  v355 = v354 + 6;
  if (v354 + 6 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v355 >= 0x17)
  {
    v357 = (v355 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v355 | 7) != 0x17)
      v357 = v355 | 7;
    v358 = v357 + 1;
    v356 = (__int128 *)operator new(v357 + 1);
    *((_QWORD *)&v433 + 1) = v354 + 6;
    v434 = v358 | 0x8000000000000000;
    *(_QWORD *)&v433 = v356;
  }
  else
  {
    v434 = 0;
    v433 = 0uLL;
    v356 = &v433;
    HIBYTE(v434) = v354 + 6;
    if (!v354)
      goto LABEL_848;
  }
  if (v353 >= 0)
    v359 = &__dst;
  else
    v359 = (__int128 *)__dst;
  memmove(v356, v359, v354);
LABEL_848:
  strcpy((char *)v356 + v354, ".Error");
  *(_WORD *)&v436[7] = 0;
  LOBYTE(__p) = 0;
  HIBYTE(v437) = 0;
  v360 = v425;
  if ((unint64_t)v425 >= v426)
  {
    v425 = sub_20EBA558C((char **)&v424, (uint64_t)&v432);
    if (SHIBYTE(v437) < 0)
    {
      operator delete(*(void **)&v436[8]);
      if ((v436[7] & 0x80000000) == 0)
        goto LABEL_855;
    }
    else if ((v436[7] & 0x80000000) == 0)
    {
      goto LABEL_855;
    }
LABEL_850:
    operator delete((void *)__p);
    if (SHIBYTE(v434) < 0)
      goto LABEL_851;
    goto LABEL_856;
  }
  v361 = v432;
  *((_DWORD *)v425 + 2) = DWORD2(v432);
  *(_QWORD *)v360 = v361;
  v362 = v433;
  *((_QWORD *)v360 + 4) = v434;
  *((_OWORD *)v360 + 1) = v362;
  v434 = 0;
  v433 = 0uLL;
  v363 = *(_QWORD *)v436;
  *(_OWORD *)(v360 + 40) = __p;
  *((_QWORD *)v360 + 7) = v363;
  *(_QWORD *)v436 = 0;
  __p = 0uLL;
  v364 = *(_OWORD *)&v436[8];
  *((_QWORD *)v360 + 10) = v437;
  *((_OWORD *)v360 + 4) = v364;
  *(_QWORD *)&v436[8] = 0;
  *(_QWORD *)&v436[16] = 0;
  v437 = 0;
  v425 = v360 + 88;
  if ((v436[7] & 0x80000000) != 0)
    goto LABEL_850;
LABEL_855:
  if (SHIBYTE(v434) < 0)
  {
LABEL_851:
    operator delete((void *)v433);
    v365 = *(std::__shared_weak_count **)(v4 + 1144);
    if (!v365)
      goto LABEL_860;
    goto LABEL_857;
  }
LABEL_856:
  v365 = *(std::__shared_weak_count **)(v4 + 1144);
  if (!v365)
  {
LABEL_860:
    v427 = 0;
    v428 = 0;
    v429 = 0;
    v369 = 0;
    goto LABEL_877;
  }
LABEL_857:
  v366 = std::__shared_weak_count::lock(v365);
  *((_QWORD *)&v432 + 1) = v366;
  if (!v366)
    goto LABEL_860;
  v367 = v366;
  v368 = *(_QWORD *)(v4 + 1136);
  *(_QWORD *)&v432 = v368;
  if (v368)
  {
    (*(void (**)(_QWORD **__return_ptr))(*(_QWORD *)v368 + 24))(&v427);
  }
  else
  {
    v427 = 0;
    v428 = 0;
    v429 = 0;
  }
  v370 = (unint64_t *)&v367->__shared_owners_;
  do
    v371 = __ldaxr(v370);
  while (__stlxr(v371 - 1, v370));
  if (v371)
  {
    v369 = v427;
    v372 = v428;
    if (v427 == v428)
      goto LABEL_877;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v367->__on_zero_shared)(v367);
    std::__shared_weak_count::__release_weak(v367);
    v369 = v427;
    v372 = v428;
    if (v427 == v428)
      goto LABEL_877;
  }
  do
  {
    *(_QWORD *)&v432 = v332;
    *((_QWORD *)&v432 + 1) = *v369;
    v434 = 0;
    v433 = 0uLL;
    v374 = v422;
    if ((unint64_t)v422 < v423)
    {
      *(_OWORD *)v422 = v432;
      v373 = v433;
      *((_QWORD *)v374 + 4) = v434;
      *((_OWORD *)v374 + 1) = v373;
      v422 = v374 + 40;
    }
    else
    {
      v422 = sub_20EBA5F8C(&v421, (uint64_t)&v432);
      if (SHIBYTE(v434) < 0)
        operator delete((void *)v433);
    }
    ++v369;
  }
  while (v369 != v372);
  v369 = v427;
LABEL_877:
  if (v369)
  {
    v428 = v369;
    operator delete(v369);
  }
  v375 = *(std::__shared_weak_count **)(v4 + 1144);
  if (!v375 || (v376 = std::__shared_weak_count::lock(v375), (*((_QWORD *)&v432 + 1) = v376) == 0))
  {
    v427 = 0;
    v428 = 0;
    v429 = 0;
    v379 = 0;
    goto LABEL_898;
  }
  v377 = v376;
  v378 = *(_QWORD *)(v4 + 1136);
  *(_QWORD *)&v432 = v378;
  if (v378)
  {
    (*(void (**)(_QWORD **__return_ptr))(*(_QWORD *)v378 + 32))(&v427);
  }
  else
  {
    v427 = 0;
    v428 = 0;
    v429 = 0;
  }
  v380 = (unint64_t *)&v377->__shared_owners_;
  do
    v381 = __ldaxr(v380);
  while (__stlxr(v381 - 1, v380));
  if (v381)
  {
    v379 = v427;
    v382 = v428;
    if (v427 == v428)
      goto LABEL_898;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v377->__on_zero_shared)(v377);
    std::__shared_weak_count::__release_weak(v377);
    v379 = v427;
    v382 = v428;
    if (v427 == v428)
      goto LABEL_898;
  }
  do
  {
    *(_QWORD *)&v432 = v332 + 1;
    *((_QWORD *)&v432 + 1) = *v379;
    v434 = 0;
    v433 = 0uLL;
    v384 = v422;
    if ((unint64_t)v422 < v423)
    {
      *(_OWORD *)v422 = v432;
      v383 = v433;
      *((_QWORD *)v384 + 4) = v434;
      *((_OWORD *)v384 + 1) = v383;
      v422 = v384 + 40;
    }
    else
    {
      v422 = sub_20EBA5F8C(&v421, (uint64_t)&v432);
      if (SHIBYTE(v434) < 0)
        operator delete((void *)v433);
    }
    ++v379;
  }
  while (v379 != v382);
  v379 = v427;
LABEL_898:
  if (v379)
  {
    v428 = v379;
    operator delete(v379);
  }
  if (SHIBYTE(v431) < 0)
  {
    operator delete(v430[0]);
    if ((SHIBYTE(v439) & 0x80000000) == 0)
    {
LABEL_902:
      if ((SHIBYTE(v441) & 0x80000000) == 0)
        goto LABEL_903;
LABEL_907:
      operator delete((void *)__dst);
      if ((*(char *)(v415 + 31) & 0x80000000) == 0)
        goto LABEL_904;
      goto LABEL_908;
    }
  }
  else if ((SHIBYTE(v439) & 0x80000000) == 0)
  {
    goto LABEL_902;
  }
  operator delete((void *)v438);
  if (SHIBYTE(v441) < 0)
    goto LABEL_907;
LABEL_903:
  if ((*(char *)(v415 + 31) & 0x80000000) == 0)
  {
LABEL_904:
    *(_OWORD *)v419 = *(_OWORD *)(v415 + 8);
    v420 = *(_QWORD *)(v415 + 24);
    goto LABEL_909;
  }
LABEL_908:
  sub_20E860C04(v419, *(void **)(v415 + 8), *(_QWORD *)(v415 + 16));
LABEL_909:
  v385 = *(_QWORD *)(v415 + 56) != 0;
  if (*(char *)(v415 + 55) < 0)
  {
    sub_20E860C04(v417, *(void **)(v415 + 32), *(_QWORD *)(v415 + 40));
  }
  else
  {
    *(_OWORD *)v417 = *(_OWORD *)(v415 + 32);
    v418 = *(_QWORD *)(v415 + 48);
  }
  sub_20EBA690C(v416, (__int128 *)v419, v385, (uint64_t *)&v424, (uint64_t *)&v421, (__int128 *)v417);
  if (SHIBYTE(v418) < 0)
  {
    operator delete(v417[0]);
    if ((SHIBYTE(v420) & 0x80000000) == 0)
    {
LABEL_914:
      v386 = (char *)v421;
      if (v421)
        goto LABEL_915;
LABEL_925:
      v388 = (char *)v424;
      if (!v424)
        return;
LABEL_926:
      v389 = v425;
      v390 = v388;
      if (v425 == v388)
      {
LABEL_937:
        v425 = v388;
        operator delete(v390);
        return;
      }
      while (1)
      {
        while (*(v389 - 1) < 0)
        {
          operator delete(*((void **)v389 - 3));
          if (*(v389 - 25) < 0)
            goto LABEL_928;
LABEL_934:
          if ((*(v389 - 49) & 0x80000000) == 0)
            goto LABEL_929;
LABEL_935:
          operator delete(*((void **)v389 - 9));
          v389 -= 88;
          if (v389 == v388)
          {
LABEL_936:
            v390 = v424;
            goto LABEL_937;
          }
        }
        if ((*(v389 - 25) & 0x80000000) == 0)
          goto LABEL_934;
LABEL_928:
        operator delete(*((void **)v389 - 6));
        if (*(v389 - 49) < 0)
          goto LABEL_935;
LABEL_929:
        v389 -= 88;
        if (v389 == v388)
          goto LABEL_936;
      }
    }
  }
  else if ((SHIBYTE(v420) & 0x80000000) == 0)
  {
    goto LABEL_914;
  }
  operator delete(v419[0]);
  v386 = (char *)v421;
  if (!v421)
    goto LABEL_925;
LABEL_915:
  v387 = v422;
  if (v422 == v386)
  {
    v422 = v386;
    operator delete(v386);
    v388 = (char *)v424;
    if (!v424)
      return;
    goto LABEL_926;
  }
  do
  {
    if (*(v387 - 1) < 0)
      operator delete(*((void **)v387 - 3));
    v387 -= 40;
  }
  while (v387 != v386);
  v422 = v386;
  operator delete(v421);
  v388 = (char *)v424;
  if (v424)
    goto LABEL_926;
}

void sub_20EC56E34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,char a39,uint64_t a40,void *__p,uint64_t a42,int a43,__int16 a44,char a45,char a46,void *a47,uint64_t a48,int a49,__int16 a50,char a51,char a52)
{
  uint64_t v52;

  __cxa_guard_abort(&qword_254A5D7A8);
  if (*(char *)(v52 - 105) < 0)
    operator delete(*(void **)(v52 - 128));
  sub_20EBA4920(&a24);
  sub_20EBA4990(&a27);
  _Unwind_Resume(a1);
}

#error "20EC572F8: too big function (funcsize=0)"

void sub_20EC69AE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,void *a36,uint64_t a37,int a38,__int16 a39,char a40,char a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47,uint64_t a48,void *a49,uint64_t a50,int a51,__int16 a52,char a53,char a54,uint64_t a55,void *a56,uint64_t a57,int a58,__int16 a59,char a60,char a61)
{
  __cxa_guard_abort(&qword_254A5D3A8);
  __cxa_guard_abort(&qword_254A5D3A0);
  __cxa_guard_abort(&qword_254A5D398);
  if (a23 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void sub_20EC6CD1C()
{
  unsigned __int8 v0;
  int v1;
  size_t v2;
  unint64_t v3;
  __int128 *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;

  v0 = atomic_load((unsigned __int8 *)&qword_254A5D190);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A5D190))
  {
    sub_20EC6CFCC();
    v1 = byte_254A5D92F;
    if (byte_254A5D92F >= 0)
      v2 = byte_254A5D92F;
    else
      v2 = qword_254A5D920;
    v3 = v2 + 1;
    if (v2 + 1 >= 0x7FFFFFFFFFFFFFF8)
      sub_20E860B7C();
    if (v3 >= 0x17)
    {
      v5 = (v3 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v3 | 7) != 0x17)
        v5 = v3 | 7;
      v6 = v5 + 1;
      v4 = (__int128 *)operator new(v5 + 1);
      *((_QWORD *)&xmmword_254A5D900 + 1) = v2 + 1;
      unk_254A5D910 = v6 | 0x8000000000000000;
      *(_QWORD *)&xmmword_254A5D900 = v4;
    }
    else
    {
      v4 = &xmmword_254A5D900;
      unk_254A5D910 = 0;
      xmmword_254A5D900 = 0uLL;
      byte_254A5D917 = v2 + 1;
      if (!v2)
      {
LABEL_18:
        *(_WORD *)((char *)v4 + v2) = 38;
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A5D900, &dword_20E81F000);
        __cxa_guard_release(&qword_254A5D190);
        return;
      }
    }
    if (v1 >= 0)
      v7 = &qword_254A5D918;
    else
      v7 = (uint64_t *)qword_254A5D918;
    memmove(v4, v7, v2);
    goto LABEL_18;
  }
}

void sub_20EC6CE5C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5D190);
  _Unwind_Resume(a1);
}

void sub_20EC6CE74()
{
  unsigned __int8 v0;
  int v1;
  size_t v2;
  unint64_t v3;
  __int128 *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;

  v0 = atomic_load((unsigned __int8 *)&qword_254A5D208);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A5D208))
  {
    sub_20EC6DCA0();
    v1 = byte_254A5DA97;
    if (byte_254A5DA97 >= 0)
      v2 = byte_254A5DA97;
    else
      v2 = qword_254A5DA88;
    v3 = v2 + 1;
    if (v2 + 1 >= 0x7FFFFFFFFFFFFFF8)
      sub_20E860B7C();
    if (v3 >= 0x17)
    {
      v5 = (v3 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v3 | 7) != 0x17)
        v5 = v3 | 7;
      v6 = v5 + 1;
      v4 = (__int128 *)operator new(v5 + 1);
      *((_QWORD *)&xmmword_254A5DA68 + 1) = v2 + 1;
      unk_254A5DA78 = v6 | 0x8000000000000000;
      *(_QWORD *)&xmmword_254A5DA68 = v4;
    }
    else
    {
      v4 = &xmmword_254A5DA68;
      unk_254A5DA78 = 0;
      xmmword_254A5DA68 = 0uLL;
      byte_254A5DA7F = v2 + 1;
      if (!v2)
      {
LABEL_18:
        *(_WORD *)((char *)v4 + v2) = 38;
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A5DA68, &dword_20E81F000);
        __cxa_guard_release(&qword_254A5D208);
        return;
      }
    }
    if (v1 >= 0)
      v7 = &qword_254A5DA80;
    else
      v7 = (uint64_t *)qword_254A5DA80;
    memmove(v4, v7, v2);
    goto LABEL_18;
  }
}

void sub_20EC6CFB4(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5D208);
  _Unwind_Resume(a1);
}

void sub_20EC6CFCC()
{
  unsigned __int8 v0;
  int v1;
  size_t v2;
  unint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  __int128 *v8;

  v0 = atomic_load((unsigned __int8 *)&qword_254A5D198);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A5D198))
  {
    sub_20EC6D14C();
    v1 = byte_254A5D947;
    if (byte_254A5D947 >= 0)
      v2 = byte_254A5D947;
    else
      v2 = *((_QWORD *)&xmmword_254A5D930 + 1);
    v3 = v2 + 6;
    if (v2 + 6 >= 0x7FFFFFFFFFFFFFF8)
      sub_20E860B7C();
    if (v3 >= 0x17)
    {
      v5 = (v3 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v3 | 7) != 0x17)
        v5 = v3 | 7;
      v6 = v5 + 1;
      v7 = (char *)operator new(v5 + 1);
      qword_254A5D920 = v2 + 6;
      unk_254A5D928 = v6 | 0x8000000000000000;
      qword_254A5D918 = (uint64_t)v7;
      *(_DWORD *)v7 = 1936617315;
      *((_WORD *)v7 + 2) = 8308;
      v4 = v7 + 6;
    }
    else
    {
      qword_254A5D920 = 0;
      unk_254A5D928 = 0;
      qword_254A5D918 = 0x2074736E6F63;
      byte_254A5D92F = v2 + 6;
      v4 = (char *)&qword_254A5D918 + 6;
      if (!v2)
      {
LABEL_18:
        v4[v2] = 0;
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &qword_254A5D918, &dword_20E81F000);
        __cxa_guard_release(&qword_254A5D198);
        return;
      }
    }
    if (v1 >= 0)
      v8 = &xmmword_254A5D930;
    else
      v8 = (__int128 *)xmmword_254A5D930;
    memmove(v4, v8, v2);
    goto LABEL_18;
  }
}

void sub_20EC6D134(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5D198);
  _Unwind_Resume(a1);
}

void sub_20EC6D14C()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_254A5D1A0);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A5D1A0))
  {
    sub_20EC6D204();
    if (byte_254A5D95F < 0)
    {
      sub_20E860C04(&xmmword_254A5D930, (void *)qword_254A5D948, unk_254A5D950);
    }
    else
    {
      xmmword_254A5D930 = *(_OWORD *)&qword_254A5D948;
      unk_254A5D940 = unk_254A5D958;
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A5D930, &dword_20E81F000);
    __cxa_guard_release(&qword_254A5D1A0);
  }
}

void sub_20EC6D1EC(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5D1A0);
  _Unwind_Resume(a1);
}

void sub_20EC6D204()
{
  unsigned __int8 v0;
  void *__p[2];
  char v2;

  v0 = atomic_load((unsigned __int8 *)&qword_254A5D1A8);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A5D1A8))
  {
    sub_20EC6D4C0(__p);
    sub_20EC6D2D8((char *)__p);
    if (v2 < 0)
      operator delete(__p[0]);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &qword_254A5D948, &dword_20E81F000);
    __cxa_guard_release(&qword_254A5D1A8);
  }
}

void sub_20EC6D298(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A5D1A8);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A5D1A8);
  _Unwind_Resume(a1);
}

void sub_20EC6D2D8(char *a1)
{
  unsigned __int8 v2;
  int64x2_t v3;
  int8x16_t v4;
  void **v5;
  void **v6;
  void *v7;
  void *__p;
  void **v9;
  void *v10[2];
  char v11;
  void *__dst[2];
  uint64_t v13;
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  v2 = atomic_load((unsigned __int8 *)&qword_254A5D1B0);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254A5D1B0))
  {
    sub_20E8610C0(v10, "std::shared_ptr");
    sub_20EC6D69C((char *)v10);
    if (v11 < 0)
      operator delete(v10[0]);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A5D960, &dword_20E81F000);
    __cxa_guard_release(&qword_254A5D1B0);
  }
  if (byte_254A5D977 < 0)
  {
    sub_20E860C04(__dst, (void *)xmmword_254A5D960, *((unint64_t *)&xmmword_254A5D960 + 1));
  }
  else
  {
    *(_OWORD *)__dst = xmmword_254A5D960;
    v13 = unk_254A5D970;
  }
  sub_20E877C80(&__p, (uint64_t)__dst, 1uLL);
  sub_21023CE38(a1, (uint64_t *)&__p, (std::string *)&qword_254A5D948, v3, v4);
  v5 = (void **)__p;
  if (__p)
  {
    v6 = v9;
    v7 = __p;
    if (v9 != __p)
    {
      do
      {
        if (*((char *)v6 - 1) < 0)
          operator delete(*(v6 - 3));
        v6 -= 3;
      }
      while (v6 != v5);
      v7 = __p;
    }
    v9 = v5;
    operator delete(v7);
  }
  if (SHIBYTE(v13) < 0)
    operator delete(__dst[0]);
}

void sub_20EC6D450(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A5D1B0);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A5D1B0);
  _Unwind_Resume(a1);
}

void sub_20EC6D494(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  sub_20E89FB98((void **)&a9);
  if (a20 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_20EC6D4C0(_QWORD *__dst)
{
  unsigned __int8 v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  size_t v5;

  v2 = atomic_load((unsigned __int8 *)&qword_254A5D1D8);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254A5D1D8))
  {
    sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::concurrency::ChannelOutput<std::shared_ptr<const cv3d::vio::odometry_engine::SLAMMetadata>>]", qword_254A5D9D8);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254A5D9D8, &dword_20E81F000);
    __cxa_guard_release(&qword_254A5D1D8);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_254A5D1E0);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_254A5D1E0))
  {
    v5 = sub_20E8A2354(qword_254A5D9D8, "<", 0);
    sub_20E89FC08(qword_254A5D9D8, 0, v5, qword_254A5D9F0);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254A5D9F0, &dword_20E81F000);
    __cxa_guard_release(&qword_254A5D1E0);
  }
  v4 = atomic_load((unsigned __int8 *)&qword_254A5D1E8);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_254A5D1E8))
  {
    sub_21023CD84((uint64_t)qword_254A5D9F0, (uint64_t)&xmmword_254A5DA08);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A5DA08, &dword_20E81F000);
    __cxa_guard_release(&qword_254A5D1E8);
  }
  if (byte_254A5DA1F < 0)
  {
    sub_20E860C04(__dst, (void *)xmmword_254A5DA08, *((unint64_t *)&xmmword_254A5DA08 + 1));
  }
  else
  {
    *(_OWORD *)__dst = xmmword_254A5DA08;
    __dst[2] = unk_254A5DA18;
  }
}

void sub_20EC6D654(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5D1E8);
  _Unwind_Resume(a1);
}

void sub_20EC6D66C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5D1E0);
  _Unwind_Resume(a1);
}

void sub_20EC6D684(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5D1D8);
  _Unwind_Resume(a1);
}

void sub_20EC6D69C(char *a1)
{
  unsigned __int8 v2;
  int64x2_t v3;
  int8x16_t v4;
  void **v5;
  void **v6;
  void *v7;
  int v8;
  size_t v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  __int128 *v15;
  void *__p;
  void **v17;
  void *__dst[2];
  uint64_t v19;
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  v2 = atomic_load((unsigned __int8 *)&qword_254A5D1B8);
  if ((v2 & 1) != 0 || !__cxa_guard_acquire(&qword_254A5D1B8))
    goto LABEL_2;
  sub_20EC6D930();
  v8 = byte_254A5D9A7;
  if (byte_254A5D9A7 >= 0)
    v9 = byte_254A5D9A7;
  else
    v9 = *((_QWORD *)&xmmword_254A5D990 + 1);
  v10 = v9 + 6;
  if (v9 + 6 >= 0x7FFFFFFFFFFFFFF8)
    sub_20E860B7C();
  if (v10 >= 0x17)
  {
    v12 = (v10 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v10 | 7) != 0x17)
      v12 = v10 | 7;
    v13 = v12 + 1;
    v14 = (char *)operator new(v12 + 1);
    *((_QWORD *)&xmmword_254A5D978 + 1) = v9 + 6;
    unk_254A5D988 = v13 | 0x8000000000000000;
    *(_QWORD *)&xmmword_254A5D978 = v14;
    *(_DWORD *)v14 = 1936617315;
    *((_WORD *)v14 + 2) = 8308;
    v11 = v14 + 6;
    goto LABEL_27;
  }
  unk_254A5D988 = 0;
  xmmword_254A5D978 = 0x2074736E6F63uLL;
  byte_254A5D98F = v9 + 6;
  v11 = (char *)&xmmword_254A5D978 + 6;
  if (v9)
  {
LABEL_27:
    if (v8 >= 0)
      v15 = &xmmword_254A5D990;
    else
      v15 = (__int128 *)xmmword_254A5D990;
    memmove(v11, v15, v9);
  }
  v11[v9] = 0;
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A5D978, &dword_20E81F000);
  __cxa_guard_release(&qword_254A5D1B8);
LABEL_2:
  if (byte_254A5D98F < 0)
  {
    sub_20E860C04(__dst, (void *)xmmword_254A5D978, *((unint64_t *)&xmmword_254A5D978 + 1));
  }
  else
  {
    *(_OWORD *)__dst = xmmword_254A5D978;
    v19 = unk_254A5D988;
  }
  sub_20E877C80(&__p, (uint64_t)__dst, 1uLL);
  sub_21023CE38(a1, (uint64_t *)&__p, (std::string *)&xmmword_254A5D960, v3, v4);
  v5 = (void **)__p;
  if (__p)
  {
    v6 = v17;
    v7 = __p;
    if (v17 != __p)
    {
      do
      {
        if (*((char *)v6 - 1) < 0)
          operator delete(*(v6 - 3));
        v6 -= 3;
      }
      while (v6 != v5);
      v7 = __p;
    }
    v17 = v5;
    operator delete(v7);
  }
  if (SHIBYTE(v19) < 0)
    operator delete(__dst[0]);
}

void sub_20EC6D8E8(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5D1B8);
  _Unwind_Resume(a1);
}

void sub_20EC6D904(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  sub_20E89FB98(&a10);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_20EC6D930()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_254A5D1C0);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A5D1C0))
  {
    sub_20EC6D9E8();
    if (byte_254A5D9D7 < 0)
    {
      sub_20E860C04(&xmmword_254A5D990, (void *)xmmword_254A5D9C0, *((unint64_t *)&xmmword_254A5D9C0 + 1));
    }
    else
    {
      xmmword_254A5D990 = xmmword_254A5D9C0;
      unk_254A5D9A0 = unk_254A5D9D0;
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A5D990, &dword_20E81F000);
    __cxa_guard_release(&qword_254A5D1C0);
  }
}

void sub_20EC6D9D0(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5D1C0);
  _Unwind_Resume(a1);
}

void sub_20EC6D9E8()
{
  unsigned __int8 v0;
  unsigned __int8 v1;

  v0 = atomic_load((unsigned __int8 *)&qword_254A5D1C8);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A5D1C8))
  {
    sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::vio::odometry_engine::SLAMMetadata]", qword_254A5D9A8);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254A5D9A8, &dword_20E81F000);
    __cxa_guard_release(&qword_254A5D1C8);
  }
  v1 = atomic_load((unsigned __int8 *)&qword_254A5D1D0);
  if ((v1 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_254A5D1D0))
    {
      sub_21023CD84((uint64_t)qword_254A5D9A8, (uint64_t)&xmmword_254A5D9C0);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A5D9C0, &dword_20E81F000);
      __cxa_guard_release(&qword_254A5D1D0);
    }
  }
}

void sub_20EC6DAB8(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5D1D0);
  _Unwind_Resume(a1);
}

void sub_20EC6DAD0(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5D1C8);
  _Unwind_Resume(a1);
}

void sub_20EC6DAE8()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_254A5D1F0);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A5D1F0))
  {
    sub_20EC6DBA0();
    if (byte_254A5DA67 < 0)
    {
      sub_20E860C04(&xmmword_254A5DA20, (void *)xmmword_254A5DA50, *((unint64_t *)&xmmword_254A5DA50 + 1));
    }
    else
    {
      xmmword_254A5DA20 = xmmword_254A5DA50;
      unk_254A5DA30 = unk_254A5DA60;
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A5DA20, &dword_20E81F000);
    __cxa_guard_release(&qword_254A5D1F0);
  }
}

void sub_20EC6DB88(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5D1F0);
  _Unwind_Resume(a1);
}

void sub_20EC6DBA0()
{
  unsigned __int8 v0;
  unsigned __int8 v1;

  v0 = atomic_load((unsigned __int8 *)&qword_254A5D1F8);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A5D1F8))
  {
    sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::concurrency::ReturnOrThrow<cv3d::kit::concurrency::OptionalReturn<std::shared_ptr<const cv3d::vio::odometry_engine::SLAMMetadata>>, cv3d::vio::slam_engine_node_group::SlamEngineNodeError> (const cv3d::vio::cv_types::GyroMeasurement &)]", qword_254A5DA38);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254A5DA38, &dword_20E81F000);
    __cxa_guard_release(&qword_254A5D1F8);
  }
  v1 = atomic_load((unsigned __int8 *)&qword_254A5D200);
  if ((v1 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_254A5D200))
    {
      sub_21023CD84((uint64_t)qword_254A5DA38, (uint64_t)&xmmword_254A5DA50);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A5DA50, &dword_20E81F000);
      __cxa_guard_release(&qword_254A5D200);
    }
  }
}

void sub_20EC6DC70(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5D200);
  _Unwind_Resume(a1);
}

void sub_20EC6DC88(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5D1F8);
  _Unwind_Resume(a1);
}

void sub_20EC6DCA0()
{
  unsigned __int8 v0;
  int v1;
  size_t v2;
  unint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  __int128 *v8;

  v0 = atomic_load((unsigned __int8 *)&qword_254A5D210);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A5D210))
  {
    sub_20EC6DE20();
    v1 = byte_254A5DAAF;
    if (byte_254A5DAAF >= 0)
      v2 = byte_254A5DAAF;
    else
      v2 = *((_QWORD *)&xmmword_254A5DA98 + 1);
    v3 = v2 + 6;
    if (v2 + 6 >= 0x7FFFFFFFFFFFFFF8)
      sub_20E860B7C();
    if (v3 >= 0x17)
    {
      v5 = (v3 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v3 | 7) != 0x17)
        v5 = v3 | 7;
      v6 = v5 + 1;
      v7 = (char *)operator new(v5 + 1);
      qword_254A5DA88 = v2 + 6;
      unk_254A5DA90 = v6 | 0x8000000000000000;
      qword_254A5DA80 = (uint64_t)v7;
      *(_DWORD *)v7 = 1936617315;
      *((_WORD *)v7 + 2) = 8308;
      v4 = v7 + 6;
    }
    else
    {
      qword_254A5DA88 = 0;
      unk_254A5DA90 = 0;
      qword_254A5DA80 = 0x2074736E6F63;
      byte_254A5DA97 = v2 + 6;
      v4 = (char *)&qword_254A5DA80 + 6;
      if (!v2)
      {
LABEL_18:
        v4[v2] = 0;
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &qword_254A5DA80, &dword_20E81F000);
        __cxa_guard_release(&qword_254A5D210);
        return;
      }
    }
    if (v1 >= 0)
      v8 = &xmmword_254A5DA98;
    else
      v8 = (__int128 *)xmmword_254A5DA98;
    memmove(v4, v8, v2);
    goto LABEL_18;
  }
}

void sub_20EC6DE08(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5D210);
  _Unwind_Resume(a1);
}

void sub_20EC6DE20()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_254A5D218);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A5D218))
  {
    sub_20EC6DED8();
    if (byte_254A5DAC7 < 0)
    {
      sub_20E860C04(&xmmword_254A5DA98, (void *)qword_254A5DAB0, unk_254A5DAB8);
    }
    else
    {
      xmmword_254A5DA98 = *(_OWORD *)&qword_254A5DAB0;
      unk_254A5DAA8 = unk_254A5DAC0;
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A5DA98, &dword_20E81F000);
    __cxa_guard_release(&qword_254A5D218);
  }
}

void sub_20EC6DEC0(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5D218);
  _Unwind_Resume(a1);
}

void sub_20EC6DED8()
{
  unsigned __int8 v0;
  void *__p[2];
  char v2;

  v0 = atomic_load((unsigned __int8 *)&qword_254A5D220);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A5D220))
  {
    sub_20EC6E190(__p);
    sub_20EC6DFB4((std::string *)&qword_254A5DAB0, (char *)__p);
    if (v2 < 0)
      operator delete(__p[0]);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &qword_254A5DAB0, &dword_20E81F000);
    __cxa_guard_release(&qword_254A5D220);
  }
}

void sub_20EC6DF74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A5D220);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A5D220);
  _Unwind_Resume(a1);
}

void sub_20EC6DFB4(std::string *a1, char *a2)
{
  unsigned __int8 v4;
  int64x2_t v5;
  int8x16_t v6;
  void **v7;
  void **v8;
  void *v9;
  void *__p;
  void **v11;
  void *__dst[2];
  uint64_t v13;
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  v4 = atomic_load((unsigned __int8 *)&qword_254A5D228);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_254A5D228))
  {
    sub_20EC6E36C();
    if (byte_254A5DB0F < 0)
    {
      sub_20E860C04(&xmmword_254A5DAC8, (void *)xmmword_254A5DAF8, *((unint64_t *)&xmmword_254A5DAF8 + 1));
    }
    else
    {
      xmmword_254A5DAC8 = xmmword_254A5DAF8;
      unk_254A5DAD8 = unk_254A5DB08;
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A5DAC8, &dword_20E81F000);
    __cxa_guard_release(&qword_254A5D228);
  }
  if (byte_254A5DADF < 0)
  {
    sub_20E860C04(__dst, (void *)xmmword_254A5DAC8, *((unint64_t *)&xmmword_254A5DAC8 + 1));
  }
  else
  {
    *(_OWORD *)__dst = xmmword_254A5DAC8;
    v13 = unk_254A5DAD8;
  }
  sub_20E877C80(&__p, (uint64_t)__dst, 1uLL);
  sub_21023CE38(a2, (uint64_t *)&__p, a1, v5, v6);
  v7 = (void **)__p;
  if (__p)
  {
    v8 = v11;
    v9 = __p;
    if (v11 != __p)
    {
      do
      {
        if (*((char *)v8 - 1) < 0)
          operator delete(*(v8 - 3));
        v8 -= 3;
      }
      while (v8 != v7);
      v9 = __p;
    }
    v11 = v7;
    operator delete(v9);
  }
  if (SHIBYTE(v13) < 0)
    operator delete(__dst[0]);
}

void sub_20EC6E148(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5D228);
  _Unwind_Resume(a1);
}

void sub_20EC6E164(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  sub_20E89FB98(&a10);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_20EC6E190(_QWORD *__dst)
{
  unsigned __int8 v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  size_t v5;

  v2 = atomic_load((unsigned __int8 *)&qword_254A5D240);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254A5D240))
  {
    sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::concurrency::ChannelError<cv3d::vio::slam_engine_node_group::SlamEngineNodeError>]", qword_254A5DB10);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254A5DB10, &dword_20E81F000);
    __cxa_guard_release(&qword_254A5D240);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_254A5D248);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_254A5D248))
  {
    v5 = sub_20E8A2354(qword_254A5DB10, "<", 0);
    sub_20E89FC08(qword_254A5DB10, 0, v5, qword_254A5DB28);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254A5DB28, &dword_20E81F000);
    __cxa_guard_release(&qword_254A5D248);
  }
  v4 = atomic_load((unsigned __int8 *)&qword_254A5D250);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_254A5D250))
  {
    sub_21023CD84((uint64_t)qword_254A5DB28, (uint64_t)&xmmword_254A5DB40);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A5DB40, &dword_20E81F000);
    __cxa_guard_release(&qword_254A5D250);
  }
  if (byte_254A5DB57 < 0)
  {
    sub_20E860C04(__dst, (void *)xmmword_254A5DB40, *((unint64_t *)&xmmword_254A5DB40 + 1));
  }
  else
  {
    *(_OWORD *)__dst = xmmword_254A5DB40;
    __dst[2] = unk_254A5DB50;
  }
}

void sub_20EC6E324(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5D250);
  _Unwind_Resume(a1);
}

void sub_20EC6E33C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5D248);
  _Unwind_Resume(a1);
}

void sub_20EC6E354(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5D240);
  _Unwind_Resume(a1);
}

void sub_20EC6E36C()
{
  unsigned __int8 v0;
  unsigned __int8 v1;

  v0 = atomic_load((unsigned __int8 *)&qword_254A5D230);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A5D230))
  {
    sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::vio::slam_engine_node_group::SlamEngineNodeError]", qword_254A5DAE0);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254A5DAE0, &dword_20E81F000);
    __cxa_guard_release(&qword_254A5D230);
  }
  v1 = atomic_load((unsigned __int8 *)&qword_254A5D238);
  if ((v1 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_254A5D238))
    {
      sub_21023CD84((uint64_t)qword_254A5DAE0, (uint64_t)&xmmword_254A5DAF8);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A5DAF8, &dword_20E81F000);
      __cxa_guard_release(&qword_254A5D238);
    }
  }
}

void sub_20EC6E43C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5D238);
  _Unwind_Resume(a1);
}

void sub_20EC6E454(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5D230);
  _Unwind_Resume(a1);
}

void sub_20EC6E46C()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_254A5D258);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A5D258))
  {
    sub_20EC6E524();
    if (byte_254A5DB9F < 0)
    {
      sub_20E860C04(&xmmword_254A5DB58, (void *)xmmword_254A5DB88, *((unint64_t *)&xmmword_254A5DB88 + 1));
    }
    else
    {
      xmmword_254A5DB58 = xmmword_254A5DB88;
      unk_254A5DB68 = unk_254A5DB98;
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A5DB58, &dword_20E81F000);
    __cxa_guard_release(&qword_254A5D258);
  }
}

void sub_20EC6E50C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5D258);
  _Unwind_Resume(a1);
}

void sub_20EC6E524()
{
  unsigned __int8 v0;
  unsigned __int8 v1;

  v0 = atomic_load((unsigned __int8 *)&qword_254A5D260);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A5D260))
  {
    sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::concurrency::ReturnOrThrow<cv3d::kit::concurrency::OptionalReturn<std::shared_ptr<const cv3d::vio::odometry_engine::SLAMMetadata>>, cv3d::vio::slam_engine_node_group::SlamEngineNodeError> (const cv3d::vio::cv_types::AccelerometerMeasurement &)]", qword_254A5DB70);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254A5DB70, &dword_20E81F000);
    __cxa_guard_release(&qword_254A5D260);
  }
  v1 = atomic_load((unsigned __int8 *)&qword_254A5D268);
  if ((v1 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_254A5D268))
    {
      sub_21023CD84((uint64_t)qword_254A5DB70, (uint64_t)&xmmword_254A5DB88);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A5DB88, &dword_20E81F000);
      __cxa_guard_release(&qword_254A5D268);
    }
  }
}

void sub_20EC6E5F4(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5D268);
  _Unwind_Resume(a1);
}

void sub_20EC6E60C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5D260);
  _Unwind_Resume(a1);
}

void sub_20EC6E624()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_254A5D270);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A5D270))
  {
    sub_20EC6E6DC();
    if (byte_254A5DBE7 < 0)
    {
      sub_20E860C04(&xmmword_254A5DBA0, (void *)xmmword_254A5DBD0, *((unint64_t *)&xmmword_254A5DBD0 + 1));
    }
    else
    {
      xmmword_254A5DBA0 = xmmword_254A5DBD0;
      unk_254A5DBB0 = unk_254A5DBE0;
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A5DBA0, &dword_20E81F000);
    __cxa_guard_release(&qword_254A5D270);
  }
}

void sub_20EC6E6C4(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5D270);
  _Unwind_Resume(a1);
}

void sub_20EC6E6DC()
{
  unsigned __int8 v0;
  unsigned __int8 v1;

  v0 = atomic_load((unsigned __int8 *)&qword_254A5D278);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A5D278))
  {
    sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::concurrency::ReturnOrThrow<cv3d::kit::concurrency::OptionalReturn<std::shared_ptr<const cv3d::vio::odometry_engine::SLAMMetadata>>, cv3d::vio::slam_engine_node_group::SlamEngineNodeError> (cv3d::kit::concurrency::ChannelLimitedInput<cv3d::vio::feature_detection::NodeCameraSystemFeatures, 1, true>)]", qword_254A5DBB8);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254A5DBB8, &dword_20E81F000);
    __cxa_guard_release(&qword_254A5D278);
  }
  v1 = atomic_load((unsigned __int8 *)&qword_254A5D280);
  if ((v1 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_254A5D280))
    {
      sub_21023CD84((uint64_t)qword_254A5DBB8, (uint64_t)&xmmword_254A5DBD0);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A5DBD0, &dword_20E81F000);
      __cxa_guard_release(&qword_254A5D280);
    }
  }
}

void sub_20EC6E7AC(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5D280);
  _Unwind_Resume(a1);
}

void sub_20EC6E7C4(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5D278);
  _Unwind_Resume(a1);
}

void sub_20EC6E7DC()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_254A5D288);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A5D288))
  {
    sub_20EC6E894();
    if (byte_254A5DC2F < 0)
    {
      sub_20E860C04(&xmmword_254A5DBE8, (void *)xmmword_254A5DC18, *((unint64_t *)&xmmword_254A5DC18 + 1));
    }
    else
    {
      xmmword_254A5DBE8 = xmmword_254A5DC18;
      unk_254A5DBF8 = unk_254A5DC28;
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A5DBE8, &dword_20E81F000);
    __cxa_guard_release(&qword_254A5D288);
  }
}

void sub_20EC6E87C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5D288);
  _Unwind_Resume(a1);
}

void sub_20EC6E894()
{
  unsigned __int8 v0;
  unsigned __int8 v1;

  v0 = atomic_load((unsigned __int8 *)&qword_254A5D290);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A5D290))
  {
    sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = void (const cv3d::vio::slam_engine_node_group::ClearMap &)]", qword_254A5DC00);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254A5DC00, &dword_20E81F000);
    __cxa_guard_release(&qword_254A5D290);
  }
  v1 = atomic_load((unsigned __int8 *)&qword_254A5D298);
  if ((v1 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_254A5D298))
    {
      sub_21023CD84((uint64_t)qword_254A5DC00, (uint64_t)&xmmword_254A5DC18);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A5DC18, &dword_20E81F000);
      __cxa_guard_release(&qword_254A5D298);
    }
  }
}

void sub_20EC6E964(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5D298);
  _Unwind_Resume(a1);
}

void sub_20EC6E97C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5D290);
  _Unwind_Resume(a1);
}

uint64_t *sub_20EC6E994()
{
  unsigned __int8 v0;
  uint64_t *v2;
  const void **v3;
  int v4;
  size_t v5;
  unint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  const void *v11;

  v0 = atomic_load((unsigned __int8 *)&qword_254A50D80);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A50D80))
  {
    v2 = sub_20EC6EAD8();
    v3 = (const void **)v2;
    v4 = *((char *)v2 + 23);
    if (v4 >= 0)
      v5 = *((unsigned __int8 *)v2 + 23);
    else
      v5 = v2[1];
    v6 = v5 + 1;
    if (v5 + 1 >= 0x7FFFFFFFFFFFFFF8)
      sub_20E860B7C();
    v7 = &qword_254A50D68;
    if (v6 >= 0x17)
    {
      v8 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v6 | 7) != 0x17)
        v8 = v6 | 7;
      v9 = v8 + 1;
      v10 = (uint64_t *)operator new(v8 + 1);
      qword_254A50D70 = v5 + 1;
      unk_254A50D78 = v9 | 0x8000000000000000;
      qword_254A50D68 = (uint64_t)v10;
      v7 = v10;
    }
    else
    {
      qword_254A50D70 = 0;
      unk_254A50D78 = 0;
      qword_254A50D68 = 0;
      byte_254A50D7F = v5 + 1;
      if (!v5)
      {
LABEL_18:
        *(_WORD *)((char *)v7 + v5) = 38;
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &qword_254A50D68, &dword_20E81F000);
        __cxa_guard_release(&qword_254A50D80);
        return &qword_254A50D68;
      }
    }
    if (v4 >= 0)
      v11 = v3;
    else
      v11 = *v3;
    memmove(v7, v11, v5);
    goto LABEL_18;
  }
  return &qword_254A50D68;
}

void sub_20EC6EAC0(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A50D80);
  _Unwind_Resume(a1);
}

uint64_t *sub_20EC6EAD8()
{
  unsigned __int8 v0;
  __int128 *v2;
  const void **v3;
  int v4;
  size_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  const void *v11;

  v0 = atomic_load((unsigned __int8 *)&qword_254A50DA0);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A50DA0))
  {
    v2 = sub_20EC6EC50();
    v3 = (const void **)v2;
    v4 = *((char *)v2 + 23);
    if (v4 >= 0)
      v5 = *((unsigned __int8 *)v2 + 23);
    else
      v5 = *((_QWORD *)v2 + 1);
    v6 = v5 + 6;
    if (v5 + 6 >= 0x7FFFFFFFFFFFFFF8)
      sub_20E860B7C();
    if (v6 >= 0x17)
    {
      v8 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v6 | 7) != 0x17)
        v8 = v6 | 7;
      v9 = v8 + 1;
      v10 = (char *)operator new(v8 + 1);
      qword_254A50D90 = v5 + 6;
      unk_254A50D98 = v9 | 0x8000000000000000;
      qword_254A50D88 = (uint64_t)v10;
      *(_DWORD *)v10 = 1936617315;
      v7 = v10 + 6;
      *((_WORD *)v10 + 2) = 8308;
    }
    else
    {
      qword_254A50D90 = 0;
      unk_254A50D98 = 0;
      qword_254A50D88 = 0x2074736E6F63;
      byte_254A50D9F = v5 + 6;
      v7 = (char *)&qword_254A50D88 + 6;
      if (!v5)
      {
LABEL_18:
        v7[v5] = 0;
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &qword_254A50D88, &dword_20E81F000);
        __cxa_guard_release(&qword_254A50DA0);
        return &qword_254A50D88;
      }
    }
    if (v4 >= 0)
      v11 = v3;
    else
      v11 = *v3;
    memmove(v7, v11, v5);
    goto LABEL_18;
  }
  return &qword_254A50D88;
}

void sub_20EC6EC38(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A50DA0);
  _Unwind_Resume(a1);
}

__int128 *sub_20EC6EC50()
{
  unsigned __int8 v0;
  std::string *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A50DC0);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A50DC0))
    return &xmmword_254A50DA8;
  v2 = sub_20EC6ED2C();
  if (SHIBYTE(v2->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_20E860C04(&xmmword_254A50DA8, v2->__r_.__value_.__l.__data_, v2->__r_.__value_.__l.__size_);
  }
  else
  {
    v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
    qword_254A50DB8 = v2->__r_.__value_.__r.__words[2];
    xmmword_254A50DA8 = v3;
  }
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A50DA8, &dword_20E81F000);
  __cxa_guard_release(&qword_254A50DC0);
  return &xmmword_254A50DA8;
}

void sub_20EC6ED14(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A50DC0);
  _Unwind_Resume(a1);
}

std::string *sub_20EC6ED2C()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A50DE0);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A50DE0))
    return &stru_254A50DC8;
  sub_20EC6EF50((uint64_t)__p);
  sub_20EC6EE1C((char *)__p, &stru_254A50DC8);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A50DC8, &dword_20E81F000);
  __cxa_guard_release(&qword_254A50DE0);
  return &stru_254A50DC8;
}

void sub_20EC6EDDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A50DE0);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A50DE0);
  _Unwind_Resume(a1);
}

void sub_20EC6EE1C(char *a1@<X0>, std::string *a2@<X8>)
{
  std::string *v4;
  __int128 v5;
  int64x2_t v6;
  int8x16_t v7;
  void **v8;
  void **v9;
  void *v10;
  void *__p;
  void **v12;
  void *__dst[2];
  std::string::size_type v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v4 = sub_20EC6F134();
  if (SHIBYTE(v4->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_20E860C04(__dst, v4->__r_.__value_.__l.__data_, v4->__r_.__value_.__l.__size_);
  }
  else
  {
    v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
    v14 = v4->__r_.__value_.__r.__words[2];
    *(_OWORD *)__dst = v5;
  }
  sub_20E877C80(&__p, (uint64_t)__dst, 1uLL);
  sub_21023CE38(a1, (uint64_t *)&__p, a2, v6, v7);
  v8 = (void **)__p;
  if (__p)
  {
    v9 = v12;
    v10 = __p;
    if (v12 != __p)
    {
      do
      {
        if (*((char *)v9 - 1) < 0)
          operator delete(*(v9 - 3));
        v9 -= 3;
      }
      while (v9 != v8);
      v10 = __p;
    }
    v12 = v8;
    operator delete(v10);
  }
  if (SHIBYTE(v14) < 0)
    operator delete(__dst[0]);
}

void sub_20EC6EF18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  sub_20E89FB98((void **)&a9);
  if (a18 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void sub_20EC6EF50(uint64_t a1@<X8>)
{
  unsigned __int8 v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  size_t v5;

  v2 = atomic_load((unsigned __int8 *)&qword_254A50EA0);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254A50EA0))
  {
    sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::concurrency::ChannelOutput<std::shared_ptr<const cv3d::vio::mapping_io::SubmapSaveBundle>>]", qword_254A50E88);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254A50E88, &dword_20E81F000);
    __cxa_guard_release(&qword_254A50EA0);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_254A50EC0);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_254A50EC0))
  {
    v5 = sub_20E8A2354(qword_254A50E88, "<", 0);
    sub_20E89FC08(qword_254A50E88, 0, v5, qword_254A50EA8);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254A50EA8, &dword_20E81F000);
    __cxa_guard_release(&qword_254A50EC0);
  }
  v4 = atomic_load((unsigned __int8 *)&qword_254A50EE0);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_254A50EE0))
  {
    sub_21023CD84((uint64_t)qword_254A50EA8, (uint64_t)&xmmword_254A50EC8);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A50EC8, &dword_20E81F000);
    __cxa_guard_release(&qword_254A50EE0);
  }
  if (byte_254A50EDF < 0)
  {
    sub_20E860C04((_BYTE *)a1, (void *)xmmword_254A50EC8, *((unint64_t *)&xmmword_254A50EC8 + 1));
  }
  else
  {
    *(_OWORD *)a1 = xmmword_254A50EC8;
    *(_QWORD *)(a1 + 16) = unk_254A50ED8;
  }
}

void sub_20EC6F0EC(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A50EE0);
  _Unwind_Resume(a1);
}

void sub_20EC6F104(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A50EC0);
  _Unwind_Resume(a1);
}

void sub_20EC6F11C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A50EA0);
  _Unwind_Resume(a1);
}

std::string *sub_20EC6F134()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A50E00);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A50E00))
    return &stru_254A50DE8;
  sub_20E8610C0(__p, "std::shared_ptr");
  sub_20EC6F22C((char *)__p, &stru_254A50DE8);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A50DE8, &dword_20E81F000);
  __cxa_guard_release(&qword_254A50E00);
  return &stru_254A50DE8;
}

void sub_20EC6F1EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A50E00);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A50E00);
  _Unwind_Resume(a1);
}

void sub_20EC6F22C(char *a1@<X0>, std::string *a2@<X8>)
{
  uint64_t *v4;
  __int128 v5;
  int64x2_t v6;
  int8x16_t v7;
  void **v8;
  void **v9;
  void *v10;
  void *__p;
  void **v12;
  void *__dst[2];
  uint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v4 = sub_20EC6F354();
  if (*((char *)v4 + 23) < 0)
  {
    sub_20E860C04(__dst, (void *)*v4, v4[1]);
  }
  else
  {
    v5 = *(_OWORD *)v4;
    v14 = v4[2];
    *(_OWORD *)__dst = v5;
  }
  sub_20E877C80(&__p, (uint64_t)__dst, 1uLL);
  sub_21023CE38(a1, (uint64_t *)&__p, a2, v6, v7);
  v8 = (void **)__p;
  if (__p)
  {
    v9 = v12;
    v10 = __p;
    if (v12 != __p)
    {
      do
      {
        if (*((char *)v9 - 1) < 0)
          operator delete(*(v9 - 3));
        v9 -= 3;
      }
      while (v9 != v8);
      v10 = __p;
    }
    v12 = v8;
    operator delete(v10);
  }
  if (SHIBYTE(v14) < 0)
    operator delete(__dst[0]);
}

void sub_20EC6F328(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  sub_20E89FB98(&a10);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t *sub_20EC6F354()
{
  unsigned __int8 v0;
  __int128 *v2;
  const void **v3;
  int v4;
  size_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  const void *v11;

  v0 = atomic_load((unsigned __int8 *)&qword_254A50E20);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A50E20))
  {
    v2 = sub_20EC6F4CC();
    v3 = (const void **)v2;
    v4 = *((char *)v2 + 23);
    if (v4 >= 0)
      v5 = *((unsigned __int8 *)v2 + 23);
    else
      v5 = *((_QWORD *)v2 + 1);
    v6 = v5 + 6;
    if (v5 + 6 >= 0x7FFFFFFFFFFFFFF8)
      sub_20E860B7C();
    if (v6 >= 0x17)
    {
      v8 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v6 | 7) != 0x17)
        v8 = v6 | 7;
      v9 = v8 + 1;
      v10 = (char *)operator new(v8 + 1);
      qword_254A50E10 = v5 + 6;
      unk_254A50E18 = v9 | 0x8000000000000000;
      qword_254A50E08 = (uint64_t)v10;
      *(_DWORD *)v10 = 1936617315;
      v7 = v10 + 6;
      *((_WORD *)v10 + 2) = 8308;
    }
    else
    {
      qword_254A50E10 = 0;
      unk_254A50E18 = 0;
      qword_254A50E08 = 0x2074736E6F63;
      byte_254A50E1F = v5 + 6;
      v7 = (char *)&qword_254A50E08 + 6;
      if (!v5)
      {
LABEL_18:
        v7[v5] = 0;
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &qword_254A50E08, &dword_20E81F000);
        __cxa_guard_release(&qword_254A50E20);
        return &qword_254A50E08;
      }
    }
    if (v4 >= 0)
      v11 = v3;
    else
      v11 = *v3;
    memmove(v7, v11, v5);
    goto LABEL_18;
  }
  return &qword_254A50E08;
}

void sub_20EC6F4B4(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A50E20);
  _Unwind_Resume(a1);
}

__int128 *sub_20EC6F4CC()
{
  unsigned __int8 v0;
  char *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A50E40);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A50E40))
    return &xmmword_254A50E28;
  v2 = (char *)sub_20EC6F5A8();
  if (v2[23] < 0)
  {
    sub_20E860C04(&xmmword_254A50E28, *(void **)v2, *((_QWORD *)v2 + 1));
  }
  else
  {
    v3 = *(_OWORD *)v2;
    qword_254A50E38 = *((_QWORD *)v2 + 2);
    xmmword_254A50E28 = v3;
  }
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A50E28, &dword_20E81F000);
  __cxa_guard_release(&qword_254A50E40);
  return &xmmword_254A50E28;
}

void sub_20EC6F590(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A50E40);
  _Unwind_Resume(a1);
}

void *sub_20EC6F5A8()
{
  unsigned __int8 v0;
  unsigned __int8 v1;

  v0 = atomic_load((unsigned __int8 *)&qword_254A50E60);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A50E60))
  {
    sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::vio::mapping_io::SubmapSaveBundle]", qword_254A50E48);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254A50E48, &dword_20E81F000);
    __cxa_guard_release(&qword_254A50E60);
  }
  v1 = atomic_load((unsigned __int8 *)&qword_254A50E80);
  if ((v1 & 1) != 0 || !__cxa_guard_acquire(&qword_254A50E80))
    return &unk_254A50E68;
  sub_21023CD84((uint64_t)qword_254A50E48, (uint64_t)&unk_254A50E68);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &unk_254A50E68, &dword_20E81F000);
  __cxa_guard_release(&qword_254A50E80);
  return &unk_254A50E68;
}

void sub_20EC6F698(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A50E80);
  _Unwind_Resume(a1);
}

void sub_20EC6F6B0(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A50E60);
  _Unwind_Resume(a1);
}

void sub_20EC6F6C8()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_254A5D2A0);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A5D2A0))
  {
    sub_20EC6F780();
    if (byte_254A5DC77 < 0)
    {
      sub_20E860C04(&xmmword_254A5DC30, (void *)xmmword_254A5DC60, *((unint64_t *)&xmmword_254A5DC60 + 1));
    }
    else
    {
      xmmword_254A5DC30 = xmmword_254A5DC60;
      unk_254A5DC40 = unk_254A5DC70;
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A5DC30, &dword_20E81F000);
    __cxa_guard_release(&qword_254A5D2A0);
  }
}

void sub_20EC6F768(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5D2A0);
  _Unwind_Resume(a1);
}

void sub_20EC6F780()
{
  unsigned __int8 v0;
  unsigned __int8 v1;

  v0 = atomic_load((unsigned __int8 *)&qword_254A5D2A8);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A5D2A8))
  {
    sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::concurrency::OptionalReturn<std::shared_ptr<const cv3d::vio::mapping_io::SubmapSaveBundle>> (const cv3d::vio::mapping_io::MapSaveRequest &)]", qword_254A5DC48);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254A5DC48, &dword_20E81F000);
    __cxa_guard_release(&qword_254A5D2A8);
  }
  v1 = atomic_load((unsigned __int8 *)&qword_254A5D2B0);
  if ((v1 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_254A5D2B0))
    {
      sub_21023CD84((uint64_t)qword_254A5DC48, (uint64_t)&xmmword_254A5DC60);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A5DC60, &dword_20E81F000);
      __cxa_guard_release(&qword_254A5D2B0);
    }
  }
}

void sub_20EC6F850(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5D2B0);
  _Unwind_Resume(a1);
}

void sub_20EC6F868(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5D2A8);
  _Unwind_Resume(a1);
}

void sub_20EC6F880()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_254A5D2B8);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A5D2B8))
  {
    sub_20EC6F938();
    if (byte_254A5DCBF < 0)
    {
      sub_20E860C04(&xmmword_254A5DC78, (void *)xmmword_254A5DCA8, *((unint64_t *)&xmmword_254A5DCA8 + 1));
    }
    else
    {
      xmmword_254A5DC78 = xmmword_254A5DCA8;
      unk_254A5DC88 = unk_254A5DCB8;
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A5DC78, &dword_20E81F000);
    __cxa_guard_release(&qword_254A5D2B8);
  }
}

void sub_20EC6F920(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5D2B8);
  _Unwind_Resume(a1);
}

void sub_20EC6F938()
{
  unsigned __int8 v0;
  unsigned __int8 v1;

  v0 = atomic_load((unsigned __int8 *)&qword_254A5D2C0);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A5D2C0))
  {
    sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = void (cv3d::kit::concurrency::SingleConsumer<const cv3d::vio::mapping_io::SubmapLoadBundle>)]", qword_254A5DC90);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254A5DC90, &dword_20E81F000);
    __cxa_guard_release(&qword_254A5D2C0);
  }
  v1 = atomic_load((unsigned __int8 *)&qword_254A5D2C8);
  if ((v1 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_254A5D2C8))
    {
      sub_21023CD84((uint64_t)qword_254A5DC90, (uint64_t)&xmmword_254A5DCA8);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A5DCA8, &dword_20E81F000);
      __cxa_guard_release(&qword_254A5D2C8);
    }
  }
}

void sub_20EC6FA08(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5D2C8);
  _Unwind_Resume(a1);
}

void sub_20EC6FA20(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5D2C0);
  _Unwind_Resume(a1);
}

void sub_20EC6FA38()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_254A5D2D0);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A5D2D0))
  {
    sub_20EC6FAF0();
    if (byte_254A5DD07 < 0)
    {
      sub_20E860C04(&xmmword_254A5DCC0, (void *)xmmword_254A5DCF0, *((unint64_t *)&xmmword_254A5DCF0 + 1));
    }
    else
    {
      xmmword_254A5DCC0 = xmmword_254A5DCF0;
      unk_254A5DCD0 = unk_254A5DD00;
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A5DCC0, &dword_20E81F000);
    __cxa_guard_release(&qword_254A5D2D0);
  }
}

void sub_20EC6FAD8(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5D2D0);
  _Unwind_Resume(a1);
}

void sub_20EC6FAF0()
{
  unsigned __int8 v0;
  unsigned __int8 v1;

  v0 = atomic_load((unsigned __int8 *)&qword_254A5D2D8);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A5D2D8))
  {
    sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = void (const cv3d::vio::mapping_io::PauseResumeRequest &)]", qword_254A5DCD8);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254A5DCD8, &dword_20E81F000);
    __cxa_guard_release(&qword_254A5D2D8);
  }
  v1 = atomic_load((unsigned __int8 *)&qword_254A5D2E0);
  if ((v1 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_254A5D2E0))
    {
      sub_21023CD84((uint64_t)qword_254A5DCD8, (uint64_t)&xmmword_254A5DCF0);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A5DCF0, &dword_20E81F000);
      __cxa_guard_release(&qword_254A5D2E0);
    }
  }
}

void sub_20EC6FBC0(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5D2E0);
  _Unwind_Resume(a1);
}

void sub_20EC6FBD8(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5D2D8);
  _Unwind_Resume(a1);
}

void sub_20EC6FBF0()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_254A5D2E8);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A5D2E8))
  {
    sub_20EC6FCA8();
    if (byte_254A5DD4F < 0)
    {
      sub_20E860C04(&xmmword_254A5DD08, (void *)xmmword_254A5DD38, *((unint64_t *)&xmmword_254A5DD38 + 1));
    }
    else
    {
      xmmword_254A5DD08 = xmmword_254A5DD38;
      unk_254A5DD18 = unk_254A5DD48;
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A5DD08, &dword_20E81F000);
    __cxa_guard_release(&qword_254A5D2E8);
  }
}

void sub_20EC6FC90(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5D2E8);
  _Unwind_Resume(a1);
}

void sub_20EC6FCA8()
{
  unsigned __int8 v0;
  unsigned __int8 v1;

  v0 = atomic_load((unsigned __int8 *)&qword_254A5D2F0);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A5D2F0))
  {
    sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::vio::user_anchor_node_group::AnchorAddedResult (const cv3d::vio::user_anchor_node_group::AnchorDescriptor &)]", qword_254A5DD20);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254A5DD20, &dword_20E81F000);
    __cxa_guard_release(&qword_254A5D2F0);
  }
  v1 = atomic_load((unsigned __int8 *)&qword_254A5D2F8);
  if ((v1 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_254A5D2F8))
    {
      sub_21023CD84((uint64_t)qword_254A5DD20, (uint64_t)&xmmword_254A5DD38);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A5DD38, &dword_20E81F000);
      __cxa_guard_release(&qword_254A5D2F8);
    }
  }
}

void sub_20EC6FD78(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5D2F8);
  _Unwind_Resume(a1);
}

void sub_20EC6FD90(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5D2F0);
  _Unwind_Resume(a1);
}

void sub_20EC6FDA8()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_254A5D300);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A5D300))
  {
    sub_20EC6FE60();
    if (byte_254A5DD97 < 0)
    {
      sub_20E860C04(&xmmword_254A5DD50, (void *)xmmword_254A5DD80, *((unint64_t *)&xmmword_254A5DD80 + 1));
    }
    else
    {
      xmmword_254A5DD50 = xmmword_254A5DD80;
      unk_254A5DD60 = unk_254A5DD90;
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A5DD50, &dword_20E81F000);
    __cxa_guard_release(&qword_254A5D300);
  }
}

void sub_20EC6FE48(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5D300);
  _Unwind_Resume(a1);
}

void sub_20EC6FE60()
{
  unsigned __int8 v0;
  unsigned __int8 v1;

  v0 = atomic_load((unsigned __int8 *)&qword_254A5D308);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A5D308))
  {
    sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = void (const cv3d::vio::cv_types::AnchorIdentifier &)]", qword_254A5DD68);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254A5DD68, &dword_20E81F000);
    __cxa_guard_release(&qword_254A5D308);
  }
  v1 = atomic_load((unsigned __int8 *)&qword_254A5D310);
  if ((v1 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_254A5D310))
    {
      sub_21023CD84((uint64_t)qword_254A5DD68, (uint64_t)&xmmword_254A5DD80);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A5DD80, &dword_20E81F000);
      __cxa_guard_release(&qword_254A5D310);
    }
  }
}

void sub_20EC6FF30(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5D310);
  _Unwind_Resume(a1);
}

void sub_20EC6FF48(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5D308);
  _Unwind_Resume(a1);
}

void sub_20EC6FF60()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_254A5D318);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A5D318))
  {
    sub_20EC70018();
    if (byte_254A5DDDF < 0)
    {
      sub_20E860C04(&xmmword_254A5DD98, (void *)xmmword_254A5DDC8, *((unint64_t *)&xmmword_254A5DDC8 + 1));
    }
    else
    {
      xmmword_254A5DD98 = xmmword_254A5DDC8;
      unk_254A5DDA8 = unk_254A5DDD8;
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A5DD98, &dword_20E81F000);
    __cxa_guard_release(&qword_254A5D318);
  }
}

void sub_20EC70000(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5D318);
  _Unwind_Resume(a1);
}

void sub_20EC70018()
{
  unsigned __int8 v0;
  unsigned __int8 v1;

  v0 = atomic_load((unsigned __int8 *)&qword_254A5D320);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A5D320))
  {
    sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = void (const cv3d::vio::TimestampedPose<double> &)]", qword_254A5DDB0);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254A5DDB0, &dword_20E81F000);
    __cxa_guard_release(&qword_254A5D320);
  }
  v1 = atomic_load((unsigned __int8 *)&qword_254A5D328);
  if ((v1 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_254A5D328))
    {
      sub_21023CD84((uint64_t)qword_254A5DDB0, (uint64_t)&xmmword_254A5DDC8);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A5DDC8, &dword_20E81F000);
      __cxa_guard_release(&qword_254A5D328);
    }
  }
}

void sub_20EC700E8(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5D328);
  _Unwind_Resume(a1);
}

void sub_20EC70100(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5D320);
  _Unwind_Resume(a1);
}

void sub_20EC70118()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_254A5D380);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A5D380))
  {
    sub_20EC701D0();
    if (byte_254A5DF17 < 0)
    {
      sub_20E860C04(&xmmword_254A5DED0, (void *)xmmword_254A5DF00, *((unint64_t *)&xmmword_254A5DF00 + 1));
    }
    else
    {
      xmmword_254A5DED0 = xmmword_254A5DF00;
      unk_254A5DEE0 = unk_254A5DF10;
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A5DED0, &dword_20E81F000);
    __cxa_guard_release(&qword_254A5D380);
  }
}

void sub_20EC701B8(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5D380);
  _Unwind_Resume(a1);
}

void sub_20EC701D0()
{
  unsigned __int8 v0;
  unsigned __int8 v1;

  v0 = atomic_load((unsigned __int8 *)&qword_254A5D388);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A5D388))
  {
    sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::vio::slam_engine_node_group::DataVerificationResult (const cv3d::vio::data_verification::DataVerificationStatus &)]", qword_254A5DEE8);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254A5DEE8, &dword_20E81F000);
    __cxa_guard_release(&qword_254A5D388);
  }
  v1 = atomic_load((unsigned __int8 *)&qword_254A5D390);
  if ((v1 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_254A5D390))
    {
      sub_21023CD84((uint64_t)qword_254A5DEE8, (uint64_t)&xmmword_254A5DF00);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A5DF00, &dword_20E81F000);
      __cxa_guard_release(&qword_254A5D390);
    }
  }
}

void sub_20EC702A0(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5D390);
  _Unwind_Resume(a1);
}

void sub_20EC702B8(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5D388);
  _Unwind_Resume(a1);
}

void sub_20EC702D0()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_254A5D3F0);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A5D3F0))
  {
    sub_20EC70388();
    if (byte_254A5E067 < 0)
    {
      sub_20E860C04(&xmmword_254A5E020, (void *)xmmword_254A5E050, *((unint64_t *)&xmmword_254A5E050 + 1));
    }
    else
    {
      xmmword_254A5E020 = xmmword_254A5E050;
      unk_254A5E030 = unk_254A5E060;
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A5E020, &dword_20E81F000);
    __cxa_guard_release(&qword_254A5D3F0);
  }
}

void sub_20EC70370(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5D3F0);
  _Unwind_Resume(a1);
}

void sub_20EC70388()
{
  unsigned __int8 v0;
  unsigned __int8 v1;

  v0 = atomic_load((unsigned __int8 *)&qword_254A5D3F8);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A5D3F8))
  {
    sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = std::shared_ptr<cv3d::vio::odometry_engine::SlamDebug> (const cv3d::vio::slam_engine_node_group::DebugRequest &)]", qword_254A5E038);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254A5E038, &dword_20E81F000);
    __cxa_guard_release(&qword_254A5D3F8);
  }
  v1 = atomic_load((unsigned __int8 *)&qword_254A5D400);
  if ((v1 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_254A5D400))
    {
      sub_21023CD84((uint64_t)qword_254A5E038, (uint64_t)&xmmword_254A5E050);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A5E050, &dword_20E81F000);
      __cxa_guard_release(&qword_254A5D400);
    }
  }
}

void sub_20EC70458(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5D400);
  _Unwind_Resume(a1);
}

void sub_20EC70470(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5D3F8);
  _Unwind_Resume(a1);
}

__int128 *sub_20EC70488()
{
  unsigned __int8 v0;
  char *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A50F00);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A50F00))
    return &xmmword_254A50EE8;
  v2 = (char *)sub_20EC70564();
  if (v2[23] < 0)
  {
    sub_20E860C04(&xmmword_254A50EE8, *(void **)v2, *((_QWORD *)v2 + 1));
  }
  else
  {
    v3 = *(_OWORD *)v2;
    qword_254A50EF8 = *((_QWORD *)v2 + 2);
    xmmword_254A50EE8 = v3;
  }
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A50EE8, &dword_20E81F000);
  __cxa_guard_release(&qword_254A50F00);
  return &xmmword_254A50EE8;
}

void sub_20EC7054C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A50F00);
  _Unwind_Resume(a1);
}

void *sub_20EC70564()
{
  unsigned __int8 v0;
  unsigned __int8 v1;

  v0 = atomic_load((unsigned __int8 *)&qword_254A50F20);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A50F20))
  {
    sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::vio::ObjectAnchorCM]", qword_254A50F08);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254A50F08, &dword_20E81F000);
    __cxa_guard_release(&qword_254A50F20);
  }
  v1 = atomic_load((unsigned __int8 *)&qword_254A50F40);
  if ((v1 & 1) != 0 || !__cxa_guard_acquire(&qword_254A50F40))
    return &unk_254A50F28;
  sub_21023CD84((uint64_t)qword_254A50F08, (uint64_t)&unk_254A50F28);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &unk_254A50F28, &dword_20E81F000);
  __cxa_guard_release(&qword_254A50F40);
  return &unk_254A50F28;
}

void sub_20EC70654(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A50F40);
  _Unwind_Resume(a1);
}

void sub_20EC7066C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A50F20);
  _Unwind_Resume(a1);
}

void sub_20EC70684()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_254A5D440);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A5D440))
  {
    sub_20EC7073C();
    if (byte_254A5E157 < 0)
    {
      sub_20E860C04(&xmmword_254A5E110, (void *)xmmword_254A5E140, *((unint64_t *)&xmmword_254A5E140 + 1));
    }
    else
    {
      xmmword_254A5E110 = xmmword_254A5E140;
      unk_254A5E120 = unk_254A5E150;
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A5E110, &dword_20E81F000);
    __cxa_guard_release(&qword_254A5D440);
  }
}

void sub_20EC70724(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5D440);
  _Unwind_Resume(a1);
}

void sub_20EC7073C()
{
  unsigned __int8 v0;
  unsigned __int8 v1;

  v0 = atomic_load((unsigned __int8 *)&qword_254A5D448);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A5D448))
  {
    sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::concurrency::OptionalReturn<cv3d::vio::ObjectAnchorCM> (std::shared_ptr<std::variant<cv3d::vio::mapping_types::VIOKeyframeCM, cv3d::vio::ObjectAnchorCM, cv3d::vio::RelocalizationResult, cv3d::vio::mapping_types::MapData, cv3d::vio::mapping_types::ObjectAnchorRemoval, cv3d::vio::VIOStateAndUTCTimestamp, cv3d::vio::mapping_types::SubmapsStatsInfo, cv3d::vio::mapping_types::MLFrameSet>>)]", qword_254A5E128);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254A5E128, &dword_20E81F000);
    __cxa_guard_release(&qword_254A5D448);
  }
  v1 = atomic_load((unsigned __int8 *)&qword_254A5D450);
  if ((v1 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_254A5D450))
    {
      sub_21023CD84((uint64_t)qword_254A5E128, (uint64_t)&xmmword_254A5E140);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A5E140, &dword_20E81F000);
      __cxa_guard_release(&qword_254A5D450);
    }
  }
}

void sub_20EC7080C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5D450);
  _Unwind_Resume(a1);
}

void sub_20EC70824(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5D448);
  _Unwind_Resume(a1);
}

void sub_20EC7083C()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_254A5D458);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A5D458))
  {
    sub_20EC70904();
    if (byte_254A5E19F < 0)
    {
      sub_20E860C04(&xmmword_254A5E158, (void *)xmmword_254A5E188, *((unint64_t *)&xmmword_254A5E188 + 1));
    }
    else
    {
      xmmword_254A5E158 = xmmword_254A5E188;
      unk_254A5E168 = unk_254A5E198;
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A5E158, &dword_20E81F000);
    __cxa_guard_release(&qword_254A5D458);
  }
}

void sub_20EC708EC(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5D458);
  _Unwind_Resume(a1);
}

void sub_20EC70904()
{
  unsigned __int8 v0;
  unsigned __int8 v1;

  v0 = atomic_load((unsigned __int8 *)&qword_254A5D460);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A5D460))
  {
    sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::concurrency::ReturnOrThrow<void, cv3d::vio::slam_engine_node_group::SlamEngineNodeError> (const std::vector<std::shared_ptr<const cv3d::vio::cv_types::JasperPointCloud>> &)]", qword_254A5E170);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254A5E170, &dword_20E81F000);
    __cxa_guard_release(&qword_254A5D460);
  }
  v1 = atomic_load((unsigned __int8 *)&qword_254A5D468);
  if ((v1 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_254A5D468))
    {
      sub_21023CD84((uint64_t)qword_254A5E170, (uint64_t)&xmmword_254A5E188);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A5E188, &dword_20E81F000);
      __cxa_guard_release(&qword_254A5D468);
    }
  }
}

void sub_20EC709DC(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5D468);
  _Unwind_Resume(a1);
}

void sub_20EC709F4(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5D460);
  _Unwind_Resume(a1);
}

void sub_20EC70A0C()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_254A5D4C0);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A5D4C0))
  {
    sub_20EC70AC8();
    if (byte_254A5E2D7 < 0)
    {
      sub_20E860C04(&xmmword_254A5E290, (void *)xmmword_254A5E2C0, *((unint64_t *)&xmmword_254A5E2C0 + 1));
    }
    else
    {
      xmmword_254A5E290 = xmmword_254A5E2C0;
      unk_254A5E2A0 = unk_254A5E2D0;
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A5E290, &dword_20E81F000);
    __cxa_guard_release(&qword_254A5D4C0);
  }
}

void sub_20EC70AB0(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5D4C0);
  _Unwind_Resume(a1);
}

void sub_20EC70AC8()
{
  unsigned __int8 v0;
  unsigned __int8 v1;

  v0 = atomic_load((unsigned __int8 *)&qword_254A5D4C8);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A5D4C8))
  {
    sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = std::shared_ptr<const std::vector<unsigned char>> (BOOL)]", qword_254A5E2A8);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254A5E2A8, &dword_20E81F000);
    __cxa_guard_release(&qword_254A5D4C8);
  }
  v1 = atomic_load((unsigned __int8 *)&qword_254A5D4D0);
  if ((v1 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_254A5D4D0))
    {
      sub_21023CD84((uint64_t)qword_254A5E2A8, (uint64_t)&xmmword_254A5E2C0);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A5E2C0, &dword_20E81F000);
      __cxa_guard_release(&qword_254A5D4D0);
    }
  }
}

void sub_20EC70BA0(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5D4D0);
  _Unwind_Resume(a1);
}

void sub_20EC70BB8(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5D4C8);
  _Unwind_Resume(a1);
}

void sub_20EC70BD0()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_254A5D4D8);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A5D4D8))
  {
    sub_20EC70C8C();
    if (byte_254A5E31F < 0)
    {
      sub_20E860C04(&xmmword_254A5E2D8, (void *)xmmword_254A5E308, *((unint64_t *)&xmmword_254A5E308 + 1));
    }
    else
    {
      xmmword_254A5E2D8 = xmmword_254A5E308;
      unk_254A5E2E8 = unk_254A5E318;
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A5E2D8, &dword_20E81F000);
    __cxa_guard_release(&qword_254A5D4D8);
  }
}

void sub_20EC70C74(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5D4D8);
  _Unwind_Resume(a1);
}

void sub_20EC70C8C()
{
  unsigned __int8 v0;
  unsigned __int8 v1;

  v0 = atomic_load((unsigned __int8 *)&qword_254A5D4E0);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A5D4E0))
  {
    sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = unsigned long long (cv3d::vio::slam_engine_node_group::QueryUserSessionID)]", qword_254A5E2F0);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254A5E2F0, &dword_20E81F000);
    __cxa_guard_release(&qword_254A5D4E0);
  }
  v1 = atomic_load((unsigned __int8 *)&qword_254A5D4E8);
  if ((v1 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_254A5D4E8))
    {
      sub_21023CD84((uint64_t)qword_254A5E2F0, (uint64_t)&xmmword_254A5E308);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A5E308, &dword_20E81F000);
      __cxa_guard_release(&qword_254A5D4E8);
    }
  }
}

void sub_20EC70D64(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5D4E8);
  _Unwind_Resume(a1);
}

void sub_20EC70D7C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5D4E0);
  _Unwind_Resume(a1);
}

void sub_20EC70D94()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_254A5D4F0);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A5D4F0))
  {
    sub_20EC70E50();
    if (byte_254A5E367 < 0)
    {
      sub_20E860C04(&xmmword_254A5E320, (void *)xmmword_254A5E350, *((unint64_t *)&xmmword_254A5E350 + 1));
    }
    else
    {
      xmmword_254A5E320 = xmmword_254A5E350;
      unk_254A5E330 = unk_254A5E360;
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A5E320, &dword_20E81F000);
    __cxa_guard_release(&qword_254A5D4F0);
  }
}

void sub_20EC70E38(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5D4F0);
  _Unwind_Resume(a1);
}

void sub_20EC70E50()
{
  unsigned __int8 v0;
  unsigned __int8 v1;

  v0 = atomic_load((unsigned __int8 *)&qword_254A5D4F8);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A5D4F8))
  {
    sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = void (const cv3d::vio::multicamera_node_group::CalibrationRequests &)]", qword_254A5E338);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254A5E338, &dword_20E81F000);
    __cxa_guard_release(&qword_254A5D4F8);
  }
  v1 = atomic_load((unsigned __int8 *)&qword_254A5D500);
  if ((v1 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_254A5D500))
    {
      sub_21023CD84((uint64_t)qword_254A5E338, (uint64_t)&xmmword_254A5E350);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A5E350, &dword_20E81F000);
      __cxa_guard_release(&qword_254A5D500);
    }
  }
}

void sub_20EC70F28(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5D500);
  _Unwind_Resume(a1);
}

void sub_20EC70F40(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5D4F8);
  _Unwind_Resume(a1);
}

void sub_20EC70F58()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_254A5D508);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A5D508))
  {
    sub_20EC71014();
    if (byte_254A5E3AF < 0)
    {
      sub_20E860C04(&xmmword_254A5E368, (void *)xmmword_254A5E398, *((unint64_t *)&xmmword_254A5E398 + 1));
    }
    else
    {
      xmmword_254A5E368 = xmmword_254A5E398;
      unk_254A5E378 = unk_254A5E3A8;
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A5E368, &dword_20E81F000);
    __cxa_guard_release(&qword_254A5D508);
  }
}

void sub_20EC70FFC(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5D508);
  _Unwind_Resume(a1);
}

void sub_20EC71014()
{
  unsigned __int8 v0;
  unsigned __int8 v1;

  v0 = atomic_load((unsigned __int8 *)&qword_254A5D510);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A5D510))
  {
    sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = void (const cv3d::vio::slam_engine_node_group::MapPointsRequest &)]", qword_254A5E380);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254A5E380, &dword_20E81F000);
    __cxa_guard_release(&qword_254A5D510);
  }
  v1 = atomic_load((unsigned __int8 *)&qword_254A5D518);
  if ((v1 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_254A5D518))
    {
      sub_21023CD84((uint64_t)qword_254A5E380, (uint64_t)&xmmword_254A5E398);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A5E398, &dword_20E81F000);
      __cxa_guard_release(&qword_254A5D518);
    }
  }
}

void sub_20EC710EC(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5D518);
  _Unwind_Resume(a1);
}

void sub_20EC71104(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5D510);
  _Unwind_Resume(a1);
}

__int128 *sub_20EC7111C()
{
  unsigned __int8 v0;
  char *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A50F60);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A50F60))
    return &xmmword_254A50F48;
  v2 = (char *)sub_20EC711F8();
  if (v2[23] < 0)
  {
    sub_20E860C04(&xmmword_254A50F48, *(void **)v2, *((_QWORD *)v2 + 1));
  }
  else
  {
    v3 = *(_OWORD *)v2;
    qword_254A50F58 = *((_QWORD *)v2 + 2);
    xmmword_254A50F48 = v3;
  }
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A50F48, &dword_20E81F000);
  __cxa_guard_release(&qword_254A50F60);
  return &xmmword_254A50F48;
}

void sub_20EC711E0(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A50F60);
  _Unwind_Resume(a1);
}

void *sub_20EC711F8()
{
  unsigned __int8 v0;
  unsigned __int8 v1;

  v0 = atomic_load((unsigned __int8 *)&qword_254A50F80);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A50F80))
  {
    sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::vio::mapping_types::MapData]", qword_254A50F68);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254A50F68, &dword_20E81F000);
    __cxa_guard_release(&qword_254A50F80);
  }
  v1 = atomic_load((unsigned __int8 *)&qword_254A50FA0);
  if ((v1 & 1) != 0 || !__cxa_guard_acquire(&qword_254A50FA0))
    return &unk_254A50F88;
  sub_21023CD84((uint64_t)qword_254A50F68, (uint64_t)&unk_254A50F88);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &unk_254A50F88, &dword_20E81F000);
  __cxa_guard_release(&qword_254A50FA0);
  return &unk_254A50F88;
}

void sub_20EC712E8(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A50FA0);
  _Unwind_Resume(a1);
}

void sub_20EC71300(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A50F80);
  _Unwind_Resume(a1);
}

void sub_20EC71318()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_254A5D560);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A5D560))
  {
    sub_20EC713D4();
    if (byte_254A5E4B7 < 0)
    {
      sub_20E860C04(&xmmword_254A5E470, (void *)xmmword_254A5E4A0, *((unint64_t *)&xmmword_254A5E4A0 + 1));
    }
    else
    {
      xmmword_254A5E470 = xmmword_254A5E4A0;
      unk_254A5E480 = unk_254A5E4B0;
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A5E470, &dword_20E81F000);
    __cxa_guard_release(&qword_254A5D560);
  }
}

void sub_20EC713BC(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5D560);
  _Unwind_Resume(a1);
}

void sub_20EC713D4()
{
  unsigned __int8 v0;
  unsigned __int8 v1;

  v0 = atomic_load((unsigned __int8 *)&qword_254A5D568);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A5D568))
  {
    sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = std::shared_ptr<cv3d::vio::mapping_types::MapData> (const cv3d::vio::slam_engine_node_group::MapRequest &)]", qword_254A5E488);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254A5E488, &dword_20E81F000);
    __cxa_guard_release(&qword_254A5D568);
  }
  v1 = atomic_load((unsigned __int8 *)&qword_254A5D570);
  if ((v1 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_254A5D570))
    {
      sub_21023CD84((uint64_t)qword_254A5E488, (uint64_t)&xmmword_254A5E4A0);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A5E4A0, &dword_20E81F000);
      __cxa_guard_release(&qword_254A5D570);
    }
  }
}

void sub_20EC714AC(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5D570);
  _Unwind_Resume(a1);
}

void sub_20EC714C4(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5D568);
  _Unwind_Resume(a1);
}

void sub_20EC714DC()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_254A5D578);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A5D578))
  {
    sub_20EC71598();
    if (byte_254A5E4FF < 0)
    {
      sub_20E860C04(&xmmword_254A5E4B8, (void *)xmmword_254A5E4E8, *((unint64_t *)&xmmword_254A5E4E8 + 1));
    }
    else
    {
      xmmword_254A5E4B8 = xmmword_254A5E4E8;
      unk_254A5E4C8 = unk_254A5E4F8;
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A5E4B8, &dword_20E81F000);
    __cxa_guard_release(&qword_254A5D578);
  }
}

void sub_20EC71580(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5D578);
  _Unwind_Resume(a1);
}

void sub_20EC71598()
{
  unsigned __int8 v0;
  unsigned __int8 v1;

  v0 = atomic_load((unsigned __int8 *)&qword_254A5D580);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A5D580))
  {
    sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = void (const std::shared_ptr<cv3d::vio::mapping_types::MapData> &)]", qword_254A5E4D0);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254A5E4D0, &dword_20E81F000);
    __cxa_guard_release(&qword_254A5D580);
  }
  v1 = atomic_load((unsigned __int8 *)&qword_254A5D588);
  if ((v1 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_254A5D588))
    {
      sub_21023CD84((uint64_t)qword_254A5E4D0, (uint64_t)&xmmword_254A5E4E8);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A5E4E8, &dword_20E81F000);
      __cxa_guard_release(&qword_254A5D588);
    }
  }
}

void sub_20EC71670(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5D588);
  _Unwind_Resume(a1);
}

void sub_20EC71688(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5D580);
  _Unwind_Resume(a1);
}

void sub_20EC716A0()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_254A5D590);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A5D590))
  {
    sub_20EC7175C();
    if (byte_254A5E547 < 0)
    {
      sub_20E860C04(&xmmword_254A5E500, (void *)xmmword_254A5E530, *((unint64_t *)&xmmword_254A5E530 + 1));
    }
    else
    {
      xmmword_254A5E500 = xmmword_254A5E530;
      unk_254A5E510 = unk_254A5E540;
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A5E500, &dword_20E81F000);
    __cxa_guard_release(&qword_254A5D590);
  }
}

void sub_20EC71744(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5D590);
  _Unwind_Resume(a1);
}

void sub_20EC7175C()
{
  unsigned __int8 v0;
  unsigned __int8 v1;

  v0 = atomic_load((unsigned __int8 *)&qword_254A5D598);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A5D598))
  {
    sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::concurrency::ReturnOrThrow<void, cv3d::vio::slam_engine_node_group::SlamEngineNodeError> (cv3d::kit::concurrency::SingleConsumer<std::shared_ptr<std::vector<cv3d::vio::feature_detection::MLPointDescriptorStore>>>)]", qword_254A5E518);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254A5E518, &dword_20E81F000);
    __cxa_guard_release(&qword_254A5D598);
  }
  v1 = atomic_load((unsigned __int8 *)&qword_254A5D5A0);
  if ((v1 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_254A5D5A0))
    {
      sub_21023CD84((uint64_t)qword_254A5E518, (uint64_t)&xmmword_254A5E530);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A5E530, &dword_20E81F000);
      __cxa_guard_release(&qword_254A5D5A0);
    }
  }
}

void sub_20EC71834(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5D5A0);
  _Unwind_Resume(a1);
}

void sub_20EC7184C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5D598);
  _Unwind_Resume(a1);
}

void sub_20EC71864()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_254A5D5A8);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A5D5A8))
  {
    sub_20EC71920();
    if (byte_254A5E58F < 0)
    {
      sub_20E860C04(&xmmword_254A5E548, (void *)xmmword_254A5E578, *((unint64_t *)&xmmword_254A5E578 + 1));
    }
    else
    {
      xmmword_254A5E548 = xmmword_254A5E578;
      unk_254A5E558 = unk_254A5E588;
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A5E548, &dword_20E81F000);
    __cxa_guard_release(&qword_254A5D5A8);
  }
}

void sub_20EC71908(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5D5A8);
  _Unwind_Resume(a1);
}

void sub_20EC71920()
{
  unsigned __int8 v0;
  unsigned __int8 v1;

  v0 = atomic_load((unsigned __int8 *)&qword_254A5D5B0);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A5D5B0))
  {
    sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::concurrency::ReturnOrThrow<void, cv3d::vio::slam_engine_node_group::SlamEngineNodeError> (const std::shared_ptr<std::vector<cv3d::vio::SemanticFrame>> &)]", qword_254A5E560);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254A5E560, &dword_20E81F000);
    __cxa_guard_release(&qword_254A5D5B0);
  }
  v1 = atomic_load((unsigned __int8 *)&qword_254A5D5B8);
  if ((v1 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_254A5D5B8))
    {
      sub_21023CD84((uint64_t)qword_254A5E560, (uint64_t)&xmmword_254A5E578);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A5E578, &dword_20E81F000);
      __cxa_guard_release(&qword_254A5D5B8);
    }
  }
}

void sub_20EC719F8(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5D5B8);
  _Unwind_Resume(a1);
}

void sub_20EC71A10(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5D5B0);
  _Unwind_Resume(a1);
}

void sub_20EC71A28()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_254A5D5C0);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A5D5C0))
  {
    sub_20EC71AE4();
    if (byte_254A5E5D7 < 0)
    {
      sub_20E860C04(&xmmword_254A5E590, (void *)xmmword_254A5E5C0, *((unint64_t *)&xmmword_254A5E5C0 + 1));
    }
    else
    {
      xmmword_254A5E590 = xmmword_254A5E5C0;
      unk_254A5E5A0 = unk_254A5E5D0;
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A5E590, &dword_20E81F000);
    __cxa_guard_release(&qword_254A5D5C0);
  }
}

void sub_20EC71ACC(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5D5C0);
  _Unwind_Resume(a1);
}

void sub_20EC71AE4()
{
  unsigned __int8 v0;
  unsigned __int8 v1;

  v0 = atomic_load((unsigned __int8 *)&qword_254A5D5C8);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A5D5C8))
  {
    sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::concurrency::ReturnOrThrow<void, cv3d::vio::slam_engine_node_group::SlamEngineNodeError> (const std::shared_ptr<std::vector<cv3d::vio::DenseDepthStore>> &)]", qword_254A5E5A8);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254A5E5A8, &dword_20E81F000);
    __cxa_guard_release(&qword_254A5D5C8);
  }
  v1 = atomic_load((unsigned __int8 *)&qword_254A5D5D0);
  if ((v1 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_254A5D5D0))
    {
      sub_21023CD84((uint64_t)qword_254A5E5A8, (uint64_t)&xmmword_254A5E5C0);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A5E5C0, &dword_20E81F000);
      __cxa_guard_release(&qword_254A5D5D0);
    }
  }
}

void sub_20EC71BBC(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5D5D0);
  _Unwind_Resume(a1);
}

void sub_20EC71BD4(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5D5C8);
  _Unwind_Resume(a1);
}

void sub_20EC71BEC()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_254A5D5D8);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A5D5D8))
  {
    sub_20EC71CA8();
    if (byte_254A5E61F < 0)
    {
      sub_20E860C04(&xmmword_254A5E5D8, (void *)xmmword_254A5E608, *((unint64_t *)&xmmword_254A5E608 + 1));
    }
    else
    {
      xmmword_254A5E5D8 = xmmword_254A5E608;
      unk_254A5E5E8 = unk_254A5E618;
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A5E5D8, &dword_20E81F000);
    __cxa_guard_release(&qword_254A5D5D8);
  }
}

void sub_20EC71C90(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5D5D8);
  _Unwind_Resume(a1);
}

void sub_20EC71CA8()
{
  unsigned __int8 v0;
  unsigned __int8 v1;

  v0 = atomic_load((unsigned __int8 *)&qword_254A5D5E0);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A5D5E0))
  {
    sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = void (const std::vector<cv3d::vio::ObjectAnchorCM> &)]", qword_254A5E5F0);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254A5E5F0, &dword_20E81F000);
    __cxa_guard_release(&qword_254A5D5E0);
  }
  v1 = atomic_load((unsigned __int8 *)&qword_254A5D5E8);
  if ((v1 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_254A5D5E8))
    {
      sub_21023CD84((uint64_t)qword_254A5E5F0, (uint64_t)&xmmword_254A5E608);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A5E608, &dword_20E81F000);
      __cxa_guard_release(&qword_254A5D5E8);
    }
  }
}

void sub_20EC71D80(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5D5E8);
  _Unwind_Resume(a1);
}

void sub_20EC71D98(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5D5E0);
  _Unwind_Resume(a1);
}

void sub_20EC71DB0()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_254A5D5F0);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A5D5F0))
  {
    sub_20EC71E6C();
    if (byte_254A5E667 < 0)
    {
      sub_20E860C04(&xmmword_254A5E620, (void *)xmmword_254A5E650, *((unint64_t *)&xmmword_254A5E650 + 1));
    }
    else
    {
      xmmword_254A5E620 = xmmword_254A5E650;
      unk_254A5E630 = unk_254A5E660;
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A5E620, &dword_20E81F000);
    __cxa_guard_release(&qword_254A5D5F0);
  }
}

void sub_20EC71E54(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5D5F0);
  _Unwind_Resume(a1);
}

void sub_20EC71E6C()
{
  unsigned __int8 v0;
  unsigned __int8 v1;

  v0 = atomic_load((unsigned __int8 *)&qword_254A5D5F8);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A5D5F8))
  {
    sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = void (const cv3d::vio::area_mapping::CMRequest &)]", qword_254A5E638);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254A5E638, &dword_20E81F000);
    __cxa_guard_release(&qword_254A5D5F8);
  }
  v1 = atomic_load((unsigned __int8 *)&qword_254A5D600);
  if ((v1 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_254A5D600))
    {
      sub_21023CD84((uint64_t)qword_254A5E638, (uint64_t)&xmmword_254A5E650);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A5E650, &dword_20E81F000);
      __cxa_guard_release(&qword_254A5D600);
    }
  }
}

void sub_20EC71F44(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5D600);
  _Unwind_Resume(a1);
}

void sub_20EC71F5C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5D5F8);
  _Unwind_Resume(a1);
}

void sub_20EC71F74()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_254A5D608);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A5D608))
  {
    sub_20EC72030();
    if (byte_254A5E6AF < 0)
    {
      sub_20E860C04(&xmmword_254A5E668, (void *)xmmword_254A5E698, *((unint64_t *)&xmmword_254A5E698 + 1));
    }
    else
    {
      xmmword_254A5E668 = xmmword_254A5E698;
      unk_254A5E678 = unk_254A5E6A8;
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A5E668, &dword_20E81F000);
    __cxa_guard_release(&qword_254A5D608);
  }
}

void sub_20EC72018(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5D608);
  _Unwind_Resume(a1);
}

void sub_20EC72030()
{
  unsigned __int8 v0;
  unsigned __int8 v1;

  v0 = atomic_load((unsigned __int8 *)&qword_254A5D610);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A5D610))
  {
    sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = void (const std::function<void ()> &)]", qword_254A5E680);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254A5E680, &dword_20E81F000);
    __cxa_guard_release(&qword_254A5D610);
  }
  v1 = atomic_load((unsigned __int8 *)&qword_254A5D618);
  if ((v1 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_254A5D618))
    {
      sub_21023CD84((uint64_t)qword_254A5E680, (uint64_t)&xmmword_254A5E698);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A5E698, &dword_20E81F000);
      __cxa_guard_release(&qword_254A5D618);
    }
  }
}

void sub_20EC72108(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5D618);
  _Unwind_Resume(a1);
}

void sub_20EC72120(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5D610);
  _Unwind_Resume(a1);
}

void sub_20EC72138()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_254A5D620);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A5D620))
  {
    sub_20EC721F4();
    if (byte_254A5E6F7 < 0)
    {
      sub_20E860C04(&xmmword_254A5E6B0, (void *)xmmword_254A5E6E0, *((unint64_t *)&xmmword_254A5E6E0 + 1));
    }
    else
    {
      xmmword_254A5E6B0 = xmmword_254A5E6E0;
      unk_254A5E6C0 = unk_254A5E6F0;
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A5E6B0, &dword_20E81F000);
    __cxa_guard_release(&qword_254A5D620);
  }
}

void sub_20EC721DC(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5D620);
  _Unwind_Resume(a1);
}

void sub_20EC721F4()
{
  unsigned __int8 v0;
  unsigned __int8 v1;

  v0 = atomic_load((unsigned __int8 *)&qword_254A5D628);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A5D628))
  {
    sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = BOOL (const cv3d::vio::slam_engine::ReinitRequest &)]", qword_254A5E6C8);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254A5E6C8, &dword_20E81F000);
    __cxa_guard_release(&qword_254A5D628);
  }
  v1 = atomic_load((unsigned __int8 *)&qword_254A5D630);
  if ((v1 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_254A5D630))
    {
      sub_21023CD84((uint64_t)qword_254A5E6C8, (uint64_t)&xmmword_254A5E6E0);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A5E6E0, &dword_20E81F000);
      __cxa_guard_release(&qword_254A5D630);
    }
  }
}

void sub_20EC722CC(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5D630);
  _Unwind_Resume(a1);
}

void sub_20EC722E4(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5D628);
  _Unwind_Resume(a1);
}

void sub_20EC722FC()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_254A5D638);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A5D638))
  {
    sub_20EC723B8();
    if (byte_254A5E73F < 0)
    {
      sub_20E860C04(&xmmword_254A5E6F8, (void *)xmmword_254A5E728, *((unint64_t *)&xmmword_254A5E728 + 1));
    }
    else
    {
      xmmword_254A5E6F8 = xmmword_254A5E728;
      unk_254A5E708 = unk_254A5E738;
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A5E6F8, &dword_20E81F000);
    __cxa_guard_release(&qword_254A5D638);
  }
}

void sub_20EC723A0(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5D638);
  _Unwind_Resume(a1);
}

void sub_20EC723B8()
{
  unsigned __int8 v0;
  unsigned __int8 v1;

  v0 = atomic_load((unsigned __int8 *)&qword_254A5D640);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A5D640))
  {
    sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = void (const cv3d::vio::slam_engine_node_group::ForceVisualSLAMHint &)]", qword_254A5E710);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254A5E710, &dword_20E81F000);
    __cxa_guard_release(&qword_254A5D640);
  }
  v1 = atomic_load((unsigned __int8 *)&qword_254A5D648);
  if ((v1 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_254A5D648))
    {
      sub_21023CD84((uint64_t)qword_254A5E710, (uint64_t)&xmmword_254A5E728);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A5E728, &dword_20E81F000);
      __cxa_guard_release(&qword_254A5D648);
    }
  }
}

void sub_20EC72490(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5D648);
  _Unwind_Resume(a1);
}

void sub_20EC724A8(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5D640);
  _Unwind_Resume(a1);
}

void sub_20EC724C0()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_254A5D650);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A5D650))
  {
    sub_20EC7257C();
    if (byte_254A5E787 < 0)
    {
      sub_20E860C04(&xmmword_254A5E740, (void *)xmmword_254A5E770, *((unint64_t *)&xmmword_254A5E770 + 1));
    }
    else
    {
      xmmword_254A5E740 = xmmword_254A5E770;
      unk_254A5E750 = unk_254A5E780;
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A5E740, &dword_20E81F000);
    __cxa_guard_release(&qword_254A5D650);
  }
}

void sub_20EC72564(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5D650);
  _Unwind_Resume(a1);
}

void sub_20EC7257C()
{
  unsigned __int8 v0;
  unsigned __int8 v1;

  v0 = atomic_load((unsigned __int8 *)&qword_254A5D658);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A5D658))
  {
    sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = void (const cv3d::vio::slam_engine_node_group::ForceVisualSLAMRecentering &)]", qword_254A5E758);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254A5E758, &dword_20E81F000);
    __cxa_guard_release(&qword_254A5D658);
  }
  v1 = atomic_load((unsigned __int8 *)&qword_254A5D660);
  if ((v1 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_254A5D660))
    {
      sub_21023CD84((uint64_t)qword_254A5E758, (uint64_t)&xmmword_254A5E770);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A5E770, &dword_20E81F000);
      __cxa_guard_release(&qword_254A5D660);
    }
  }
}

void sub_20EC72654(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5D660);
  _Unwind_Resume(a1);
}

void sub_20EC7266C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5D658);
  _Unwind_Resume(a1);
}

void sub_20EC72684()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_254A5D668);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A5D668))
  {
    sub_20EC72740();
    if (byte_254A5E7CF < 0)
    {
      sub_20E860C04(&xmmword_254A5E788, (void *)xmmword_254A5E7B8, *((unint64_t *)&xmmword_254A5E7B8 + 1));
    }
    else
    {
      xmmword_254A5E788 = xmmword_254A5E7B8;
      unk_254A5E798 = unk_254A5E7C8;
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A5E788, &dword_20E81F000);
    __cxa_guard_release(&qword_254A5D668);
  }
}

void sub_20EC72728(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5D668);
  _Unwind_Resume(a1);
}

void sub_20EC72740()
{
  unsigned __int8 v0;
  unsigned __int8 v1;

  v0 = atomic_load((unsigned __int8 *)&qword_254A5D670);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A5D670))
  {
    sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = void (const cv3d::vio::slam_engine_node_group::TravelModeAlertIn3DoFRequest &)]", qword_254A5E7A0);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254A5E7A0, &dword_20E81F000);
    __cxa_guard_release(&qword_254A5D670);
  }
  v1 = atomic_load((unsigned __int8 *)&qword_254A5D678);
  if ((v1 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_254A5D678))
    {
      sub_21023CD84((uint64_t)qword_254A5E7A0, (uint64_t)&xmmword_254A5E7B8);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A5E7B8, &dword_20E81F000);
      __cxa_guard_release(&qword_254A5D678);
    }
  }
}

void sub_20EC72818(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5D678);
  _Unwind_Resume(a1);
}

void sub_20EC72830(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5D670);
  _Unwind_Resume(a1);
}

uint64_t *sub_20EC72848()
{
  unsigned __int8 v0;
  uint64_t *v2;
  const void **v3;
  int v4;
  size_t v5;
  unint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  const void *v11;

  v0 = atomic_load((unsigned __int8 *)&qword_254A50FC0);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A50FC0))
  {
    v2 = sub_20EC7298C();
    v3 = (const void **)v2;
    v4 = *((char *)v2 + 23);
    if (v4 >= 0)
      v5 = *((unsigned __int8 *)v2 + 23);
    else
      v5 = v2[1];
    v6 = v5 + 1;
    if (v5 + 1 >= 0x7FFFFFFFFFFFFFF8)
      sub_20E860B7C();
    v7 = &qword_254A50FA8;
    if (v6 >= 0x17)
    {
      v8 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v6 | 7) != 0x17)
        v8 = v6 | 7;
      v9 = v8 + 1;
      v10 = (uint64_t *)operator new(v8 + 1);
      qword_254A50FB0 = v5 + 1;
      unk_254A50FB8 = v9 | 0x8000000000000000;
      qword_254A50FA8 = (uint64_t)v10;
      v7 = v10;
    }
    else
    {
      qword_254A50FB0 = 0;
      unk_254A50FB8 = 0;
      qword_254A50FA8 = 0;
      byte_254A50FBF = v5 + 1;
      if (!v5)
      {
LABEL_18:
        *(_WORD *)((char *)v7 + v5) = 38;
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &qword_254A50FA8, &dword_20E81F000);
        __cxa_guard_release(&qword_254A50FC0);
        return &qword_254A50FA8;
      }
    }
    if (v4 >= 0)
      v11 = v3;
    else
      v11 = *v3;
    memmove(v7, v11, v5);
    goto LABEL_18;
  }
  return &qword_254A50FA8;
}

void sub_20EC72974(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A50FC0);
  _Unwind_Resume(a1);
}

uint64_t *sub_20EC7298C()
{
  unsigned __int8 v0;
  __int128 *v2;
  const void **v3;
  int v4;
  size_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  const void *v11;

  v0 = atomic_load((unsigned __int8 *)&qword_254A50FE0);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A50FE0))
  {
    v2 = sub_20EC72B04();
    v3 = (const void **)v2;
    v4 = *((char *)v2 + 23);
    if (v4 >= 0)
      v5 = *((unsigned __int8 *)v2 + 23);
    else
      v5 = *((_QWORD *)v2 + 1);
    v6 = v5 + 6;
    if (v5 + 6 >= 0x7FFFFFFFFFFFFFF8)
      sub_20E860B7C();
    if (v6 >= 0x17)
    {
      v8 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v6 | 7) != 0x17)
        v8 = v6 | 7;
      v9 = v8 + 1;
      v10 = (char *)operator new(v8 + 1);
      qword_254A50FD0 = v5 + 6;
      unk_254A50FD8 = v9 | 0x8000000000000000;
      qword_254A50FC8 = (uint64_t)v10;
      *(_DWORD *)v10 = 1936617315;
      v7 = v10 + 6;
      *((_WORD *)v10 + 2) = 8308;
    }
    else
    {
      qword_254A50FD0 = 0;
      unk_254A50FD8 = 0;
      qword_254A50FC8 = 0x2074736E6F63;
      byte_254A50FDF = v5 + 6;
      v7 = (char *)&qword_254A50FC8 + 6;
      if (!v5)
      {
LABEL_18:
        v7[v5] = 0;
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &qword_254A50FC8, &dword_20E81F000);
        __cxa_guard_release(&qword_254A50FE0);
        return &qword_254A50FC8;
      }
    }
    if (v4 >= 0)
      v11 = v3;
    else
      v11 = *v3;
    memmove(v7, v11, v5);
    goto LABEL_18;
  }
  return &qword_254A50FC8;
}

void sub_20EC72AEC(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A50FE0);
  _Unwind_Resume(a1);
}

__int128 *sub_20EC72B04()
{
  unsigned __int8 v0;
  std::string *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A51000);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A51000))
    return &xmmword_254A50FE8;
  v2 = sub_20EC72BE0();
  if (SHIBYTE(v2->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_20E860C04(&xmmword_254A50FE8, v2->__r_.__value_.__l.__data_, v2->__r_.__value_.__l.__size_);
  }
  else
  {
    v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
    qword_254A50FF8 = v2->__r_.__value_.__r.__words[2];
    xmmword_254A50FE8 = v3;
  }
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A50FE8, &dword_20E81F000);
  __cxa_guard_release(&qword_254A51000);
  return &xmmword_254A50FE8;
}

void sub_20EC72BC8(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A51000);
  _Unwind_Resume(a1);
}

std::string *sub_20EC72BE0()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A51020);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A51020))
    return &stru_254A51008;
  sub_20EC72E04((uint64_t)__p);
  sub_20EC72CD0((char *)__p, &stru_254A51008);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A51008, &dword_20E81F000);
  __cxa_guard_release(&qword_254A51020);
  return &stru_254A51008;
}

void sub_20EC72C90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A51020);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A51020);
  _Unwind_Resume(a1);
}

void sub_20EC72CD0(char *a1@<X0>, std::string *a2@<X8>)
{
  std::string *v4;
  __int128 v5;
  int64x2_t v6;
  int8x16_t v7;
  void **v8;
  void **v9;
  void *v10;
  void *__p;
  void **v12;
  void *__dst[2];
  std::string::size_type v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v4 = sub_20EC72FE8();
  if (SHIBYTE(v4->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_20E860C04(__dst, v4->__r_.__value_.__l.__data_, v4->__r_.__value_.__l.__size_);
  }
  else
  {
    v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
    v14 = v4->__r_.__value_.__r.__words[2];
    *(_OWORD *)__dst = v5;
  }
  sub_20E877C80(&__p, (uint64_t)__dst, 1uLL);
  sub_21023CE38(a1, (uint64_t *)&__p, a2, v6, v7);
  v8 = (void **)__p;
  if (__p)
  {
    v9 = v12;
    v10 = __p;
    if (v12 != __p)
    {
      do
      {
        if (*((char *)v9 - 1) < 0)
          operator delete(*(v9 - 3));
        v9 -= 3;
      }
      while (v9 != v8);
      v10 = __p;
    }
    v12 = v8;
    operator delete(v10);
  }
  if (SHIBYTE(v14) < 0)
    operator delete(__dst[0]);
}

void sub_20EC72DCC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  sub_20E89FB98((void **)&a9);
  if (a18 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void sub_20EC72E04(uint64_t a1@<X8>)
{
  unsigned __int8 v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  size_t v5;

  v2 = atomic_load((unsigned __int8 *)&qword_254A510E0);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254A510E0))
  {
    sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::concurrency::ChannelOutput<std::shared_ptr<const cv3d::vio::odometry_engine::VIOMetadata>>]", qword_254A510C8);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254A510C8, &dword_20E81F000);
    __cxa_guard_release(&qword_254A510E0);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_254A51100);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_254A51100))
  {
    v5 = sub_20E8A2354(qword_254A510C8, "<", 0);
    sub_20E89FC08(qword_254A510C8, 0, v5, qword_254A510E8);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254A510E8, &dword_20E81F000);
    __cxa_guard_release(&qword_254A51100);
  }
  v4 = atomic_load((unsigned __int8 *)&qword_254A51120);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_254A51120))
  {
    sub_21023CD84((uint64_t)qword_254A510E8, (uint64_t)&xmmword_254A51108);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A51108, &dword_20E81F000);
    __cxa_guard_release(&qword_254A51120);
  }
  if (byte_254A5111F < 0)
  {
    sub_20E860C04((_BYTE *)a1, (void *)xmmword_254A51108, *((unint64_t *)&xmmword_254A51108 + 1));
  }
  else
  {
    *(_OWORD *)a1 = xmmword_254A51108;
    *(_QWORD *)(a1 + 16) = unk_254A51118;
  }
}

void sub_20EC72FA0(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A51120);
  _Unwind_Resume(a1);
}

void sub_20EC72FB8(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A51100);
  _Unwind_Resume(a1);
}

void sub_20EC72FD0(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A510E0);
  _Unwind_Resume(a1);
}

std::string *sub_20EC72FE8()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A51040);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A51040))
    return &stru_254A51028;
  sub_20E8610C0(__p, "std::shared_ptr");
  sub_20EC730E0((char *)__p, &stru_254A51028);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A51028, &dword_20E81F000);
  __cxa_guard_release(&qword_254A51040);
  return &stru_254A51028;
}

void sub_20EC730A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A51040);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A51040);
  _Unwind_Resume(a1);
}

void sub_20EC730E0(char *a1@<X0>, std::string *a2@<X8>)
{
  uint64_t *v4;
  __int128 v5;
  int64x2_t v6;
  int8x16_t v7;
  void **v8;
  void **v9;
  void *v10;
  void *__p;
  void **v12;
  void *__dst[2];
  uint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v4 = sub_20EC73208();
  if (*((char *)v4 + 23) < 0)
  {
    sub_20E860C04(__dst, (void *)*v4, v4[1]);
  }
  else
  {
    v5 = *(_OWORD *)v4;
    v14 = v4[2];
    *(_OWORD *)__dst = v5;
  }
  sub_20E877C80(&__p, (uint64_t)__dst, 1uLL);
  sub_21023CE38(a1, (uint64_t *)&__p, a2, v6, v7);
  v8 = (void **)__p;
  if (__p)
  {
    v9 = v12;
    v10 = __p;
    if (v12 != __p)
    {
      do
      {
        if (*((char *)v9 - 1) < 0)
          operator delete(*(v9 - 3));
        v9 -= 3;
      }
      while (v9 != v8);
      v10 = __p;
    }
    v12 = v8;
    operator delete(v10);
  }
  if (SHIBYTE(v14) < 0)
    operator delete(__dst[0]);
}

void sub_20EC731DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  sub_20E89FB98(&a10);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t *sub_20EC73208()
{
  unsigned __int8 v0;
  __int128 *v2;
  const void **v3;
  int v4;
  size_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  const void *v11;

  v0 = atomic_load((unsigned __int8 *)&qword_254A51060);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A51060))
  {
    v2 = sub_20EC73380();
    v3 = (const void **)v2;
    v4 = *((char *)v2 + 23);
    if (v4 >= 0)
      v5 = *((unsigned __int8 *)v2 + 23);
    else
      v5 = *((_QWORD *)v2 + 1);
    v6 = v5 + 6;
    if (v5 + 6 >= 0x7FFFFFFFFFFFFFF8)
      sub_20E860B7C();
    if (v6 >= 0x17)
    {
      v8 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v6 | 7) != 0x17)
        v8 = v6 | 7;
      v9 = v8 + 1;
      v10 = (char *)operator new(v8 + 1);
      qword_254A51050 = v5 + 6;
      unk_254A51058 = v9 | 0x8000000000000000;
      qword_254A51048 = (uint64_t)v10;
      *(_DWORD *)v10 = 1936617315;
      v7 = v10 + 6;
      *((_WORD *)v10 + 2) = 8308;
    }
    else
    {
      qword_254A51050 = 0;
      unk_254A51058 = 0;
      qword_254A51048 = 0x2074736E6F63;
      byte_254A5105F = v5 + 6;
      v7 = (char *)&qword_254A51048 + 6;
      if (!v5)
      {
LABEL_18:
        v7[v5] = 0;
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &qword_254A51048, &dword_20E81F000);
        __cxa_guard_release(&qword_254A51060);
        return &qword_254A51048;
      }
    }
    if (v4 >= 0)
      v11 = v3;
    else
      v11 = *v3;
    memmove(v7, v11, v5);
    goto LABEL_18;
  }
  return &qword_254A51048;
}

void sub_20EC73368(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A51060);
  _Unwind_Resume(a1);
}

__int128 *sub_20EC73380()
{
  unsigned __int8 v0;
  char *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A51080);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A51080))
    return &xmmword_254A51068;
  v2 = (char *)sub_20EC7345C();
  if (v2[23] < 0)
  {
    sub_20E860C04(&xmmword_254A51068, *(void **)v2, *((_QWORD *)v2 + 1));
  }
  else
  {
    v3 = *(_OWORD *)v2;
    qword_254A51078 = *((_QWORD *)v2 + 2);
    xmmword_254A51068 = v3;
  }
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A51068, &dword_20E81F000);
  __cxa_guard_release(&qword_254A51080);
  return &xmmword_254A51068;
}

void sub_20EC73444(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A51080);
  _Unwind_Resume(a1);
}

void *sub_20EC7345C()
{
  unsigned __int8 v0;
  unsigned __int8 v1;

  v0 = atomic_load((unsigned __int8 *)&qword_254A510A0);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A510A0))
  {
    sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::vio::odometry_engine::VIOMetadata]", qword_254A51088);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254A51088, &dword_20E81F000);
    __cxa_guard_release(&qword_254A510A0);
  }
  v1 = atomic_load((unsigned __int8 *)&qword_254A510C0);
  if ((v1 & 1) != 0 || !__cxa_guard_acquire(&qword_254A510C0))
    return &unk_254A510A8;
  sub_21023CD84((uint64_t)qword_254A51088, (uint64_t)&unk_254A510A8);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &unk_254A510A8, &dword_20E81F000);
  __cxa_guard_release(&qword_254A510C0);
  return &unk_254A510A8;
}

void sub_20EC7354C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A510C0);
  _Unwind_Resume(a1);
}

void sub_20EC73564(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A510A0);
  _Unwind_Resume(a1);
}

void sub_20EC7357C()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_254A5D680);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A5D680))
  {
    sub_20EC73638();
    if (byte_254A5E817 < 0)
    {
      sub_20E860C04(&xmmword_254A5E7D0, (void *)xmmword_254A5E800, *((unint64_t *)&xmmword_254A5E800 + 1));
    }
    else
    {
      xmmword_254A5E7D0 = xmmword_254A5E800;
      unk_254A5E7E0 = unk_254A5E810;
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A5E7D0, &dword_20E81F000);
    __cxa_guard_release(&qword_254A5D680);
  }
}

void sub_20EC73620(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5D680);
  _Unwind_Resume(a1);
}

void sub_20EC73638()
{
  unsigned __int8 v0;
  unsigned __int8 v1;

  v0 = atomic_load((unsigned __int8 *)&qword_254A5D688);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A5D688))
  {
    sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = std::shared_ptr<const cv3d::vio::odometry_engine::VIOMetadata> (std::shared_ptr<const cv3d::vio::odometry_engine::SLAMMetadata>)]", qword_254A5E7E8);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254A5E7E8, &dword_20E81F000);
    __cxa_guard_release(&qword_254A5D688);
  }
  v1 = atomic_load((unsigned __int8 *)&qword_254A5D690);
  if ((v1 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_254A5D690))
    {
      sub_21023CD84((uint64_t)qword_254A5E7E8, (uint64_t)&xmmword_254A5E800);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A5E800, &dword_20E81F000);
      __cxa_guard_release(&qword_254A5D690);
    }
  }
}

void sub_20EC73710(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5D690);
  _Unwind_Resume(a1);
}

void sub_20EC73728(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5D688);
  _Unwind_Resume(a1);
}

void sub_20EC73740()
{
  unsigned __int8 v0;
  int v1;
  size_t v2;
  unint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  __int128 *v8;

  v0 = atomic_load((unsigned __int8 *)&qword_254A5D6A0);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A5D6A0))
  {
    sub_20EC738B8();
    v1 = byte_254A5E85F;
    if (byte_254A5E85F >= 0)
      v2 = byte_254A5E85F;
    else
      v2 = *((_QWORD *)&xmmword_254A5E848 + 1);
    v3 = v2 + 6;
    if (v2 + 6 >= 0x7FFFFFFFFFFFFFF8)
      sub_20E860B7C();
    if (v3 >= 0x17)
    {
      v5 = (v3 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v3 | 7) != 0x17)
        v5 = v3 | 7;
      v6 = v5 + 1;
      v7 = (char *)operator new(v5 + 1);
      qword_254A5E838 = v2 + 6;
      unk_254A5E840 = v6 | 0x8000000000000000;
      qword_254A5E830 = (uint64_t)v7;
      *(_DWORD *)v7 = 1936617315;
      *((_WORD *)v7 + 2) = 8308;
      v4 = v7 + 6;
    }
    else
    {
      qword_254A5E838 = 0;
      unk_254A5E840 = 0;
      qword_254A5E830 = 0x2074736E6F63;
      byte_254A5E847 = v2 + 6;
      v4 = (char *)&qword_254A5E830 + 6;
      if (!v2)
      {
LABEL_18:
        v4[v2] = 0;
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &qword_254A5E830, &dword_20E81F000);
        __cxa_guard_release(&qword_254A5D6A0);
        return;
      }
    }
    if (v1 >= 0)
      v8 = &xmmword_254A5E848;
    else
      v8 = (__int128 *)xmmword_254A5E848;
    memmove(v4, v8, v2);
    goto LABEL_18;
  }
}

void sub_20EC738A0(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5D6A0);
  _Unwind_Resume(a1);
}

void sub_20EC738B8()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_254A5D6A8);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A5D6A8))
  {
    sub_20EC73974();
    if (byte_254A5E877 < 0)
    {
      sub_20E860C04(&xmmword_254A5E848, (void *)qword_254A5E860, unk_254A5E868);
    }
    else
    {
      xmmword_254A5E848 = *(_OWORD *)&qword_254A5E860;
      unk_254A5E858 = unk_254A5E870;
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A5E848, &dword_20E81F000);
    __cxa_guard_release(&qword_254A5D6A8);
  }
}

void sub_20EC7395C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5D6A8);
  _Unwind_Resume(a1);
}

void sub_20EC73974()
{
  unsigned __int8 v0;
  void *__p[2];
  char v2;

  v0 = atomic_load((unsigned __int8 *)&qword_254A5D6B0);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A5D6B0))
  {
    sub_20EC73C38(__p);
    sub_20EC73A4C((char *)__p);
    if (v2 < 0)
      operator delete(__p[0]);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &qword_254A5E860, &dword_20E81F000);
    __cxa_guard_release(&qword_254A5D6B0);
  }
}

void sub_20EC73A0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A5D6B0);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A5D6B0);
  _Unwind_Resume(a1);
}

void sub_20EC73A4C(char *a1)
{
  unsigned __int8 v2;
  int64x2_t v3;
  int8x16_t v4;
  void **v5;
  void **v6;
  void *v7;
  void *__p;
  void **v9;
  void *v10[2];
  char v11;
  void *__dst[2];
  uint64_t v13;
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  v2 = atomic_load((unsigned __int8 *)&qword_254A5D6B8);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254A5D6B8))
  {
    sub_20E8610C0(v10, "std::shared_ptr");
    sub_20EC73E14((char *)v10);
    if (v11 < 0)
      operator delete(v10[0]);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A5E878, &dword_20E81F000);
    __cxa_guard_release(&qword_254A5D6B8);
  }
  if (byte_254A5E88F < 0)
  {
    sub_20E860C04(__dst, (void *)xmmword_254A5E878, *((unint64_t *)&xmmword_254A5E878 + 1));
  }
  else
  {
    *(_OWORD *)__dst = xmmword_254A5E878;
    v13 = unk_254A5E888;
  }
  sub_20E877C80(&__p, (uint64_t)__dst, 1uLL);
  sub_21023CE38(a1, (uint64_t *)&__p, (std::string *)&qword_254A5E860, v3, v4);
  v5 = (void **)__p;
  if (__p)
  {
    v6 = v9;
    v7 = __p;
    if (v9 != __p)
    {
      do
      {
        if (*((char *)v6 - 1) < 0)
          operator delete(*(v6 - 3));
        v6 -= 3;
      }
      while (v6 != v5);
      v7 = __p;
    }
    v9 = v5;
    operator delete(v7);
  }
  if (SHIBYTE(v13) < 0)
    operator delete(__dst[0]);
}

void sub_20EC73BC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A5D6B8);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A5D6B8);
  _Unwind_Resume(a1);
}

void sub_20EC73C0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  sub_20E89FB98((void **)&a9);
  if (a20 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_20EC73C38(_QWORD *__dst)
{
  unsigned __int8 v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  size_t v5;

  v2 = atomic_load((unsigned __int8 *)&qword_254A5D6E0);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254A5D6E0))
  {
    sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::concurrency::ChannelOutput<std::shared_ptr<std::vector<cv3d::vio::mapping_types::SerializedCollaborativeMappingData>>>]", qword_254A5E8F0);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254A5E8F0, &dword_20E81F000);
    __cxa_guard_release(&qword_254A5D6E0);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_254A5D6E8);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_254A5D6E8))
  {
    v5 = sub_20E8A2354(qword_254A5E8F0, "<", 0);
    sub_20E89FC08(qword_254A5E8F0, 0, v5, qword_254A5E908);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254A5E908, &dword_20E81F000);
    __cxa_guard_release(&qword_254A5D6E8);
  }
  v4 = atomic_load((unsigned __int8 *)&qword_254A5D6F0);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_254A5D6F0))
  {
    sub_21023CD84((uint64_t)qword_254A5E908, (uint64_t)&xmmword_254A5E920);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A5E920, &dword_20E81F000);
    __cxa_guard_release(&qword_254A5D6F0);
  }
  if (byte_254A5E937 < 0)
  {
    sub_20E860C04(__dst, (void *)xmmword_254A5E920, *((unint64_t *)&xmmword_254A5E920 + 1));
  }
  else
  {
    *(_OWORD *)__dst = xmmword_254A5E920;
    __dst[2] = unk_254A5E930;
  }
}

void sub_20EC73DCC(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5D6F0);
  _Unwind_Resume(a1);
}

void sub_20EC73DE4(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5D6E8);
  _Unwind_Resume(a1);
}

void sub_20EC73DFC(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5D6E0);
  _Unwind_Resume(a1);
}

void sub_20EC73E14(char *a1)
{
  unsigned __int8 v2;
  int64x2_t v3;
  int8x16_t v4;
  void **v5;
  void **v6;
  void *v7;
  void *__p;
  void **v9;
  void *v10[2];
  char v11;
  void *__dst[2];
  uint64_t v13;
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  v2 = atomic_load((unsigned __int8 *)&qword_254A5D6C0);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254A5D6C0))
  {
    sub_20E8610C0(v10, "std::vector");
    sub_20EC74000((char *)v10);
    if (v11 < 0)
      operator delete(v10[0]);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A5E890, &dword_20E81F000);
    __cxa_guard_release(&qword_254A5D6C0);
  }
  if (byte_254A5E8A7 < 0)
  {
    sub_20E860C04(__dst, (void *)xmmword_254A5E890, *((unint64_t *)&xmmword_254A5E890 + 1));
  }
  else
  {
    *(_OWORD *)__dst = xmmword_254A5E890;
    v13 = unk_254A5E8A0;
  }
  sub_20E877C80(&__p, (uint64_t)__dst, 1uLL);
  sub_21023CE38(a1, (uint64_t *)&__p, (std::string *)&xmmword_254A5E878, v3, v4);
  v5 = (void **)__p;
  if (__p)
  {
    v6 = v9;
    v7 = __p;
    if (v9 != __p)
    {
      do
      {
        if (*((char *)v6 - 1) < 0)
          operator delete(*(v6 - 3));
        v6 -= 3;
      }
      while (v6 != v5);
      v7 = __p;
    }
    v9 = v5;
    operator delete(v7);
  }
  if (SHIBYTE(v13) < 0)
    operator delete(__dst[0]);
}

void sub_20EC73F90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A5D6C0);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A5D6C0);
  _Unwind_Resume(a1);
}

void sub_20EC73FD4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  sub_20E89FB98((void **)&a9);
  if (a20 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_20EC74000(char *a1)
{
  unsigned __int8 v2;
  int64x2_t v3;
  int8x16_t v4;
  void **v5;
  void **v6;
  void *v7;
  void *__p;
  void **v9;
  void *__dst[2];
  uint64_t v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v2 = atomic_load((unsigned __int8 *)&qword_254A5D6C8);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254A5D6C8))
  {
    sub_20EC741D8();
    if (byte_254A5E8EF < 0)
    {
      sub_20E860C04(&xmmword_254A5E8A8, (void *)xmmword_254A5E8D8, *((unint64_t *)&xmmword_254A5E8D8 + 1));
    }
    else
    {
      xmmword_254A5E8A8 = xmmword_254A5E8D8;
      unk_254A5E8B8 = unk_254A5E8E8;
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A5E8A8, &dword_20E81F000);
    __cxa_guard_release(&qword_254A5D6C8);
  }
  if (byte_254A5E8BF < 0)
  {
    sub_20E860C04(__dst, (void *)xmmword_254A5E8A8, *((unint64_t *)&xmmword_254A5E8A8 + 1));
  }
  else
  {
    *(_OWORD *)__dst = xmmword_254A5E8A8;
    v11 = unk_254A5E8B8;
  }
  sub_20E877C80(&__p, (uint64_t)__dst, 1uLL);
  sub_21023CE38(a1, (uint64_t *)&__p, (std::string *)&xmmword_254A5E890, v3, v4);
  v5 = (void **)__p;
  if (__p)
  {
    v6 = v9;
    v7 = __p;
    if (v9 != __p)
    {
      do
      {
        if (*((char *)v6 - 1) < 0)
          operator delete(*(v6 - 3));
        v6 -= 3;
      }
      while (v6 != v5);
      v7 = __p;
    }
    v9 = v5;
    operator delete(v7);
  }
  if (SHIBYTE(v11) < 0)
    operator delete(__dst[0]);
}

void sub_20EC74190(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5D6C8);
  _Unwind_Resume(a1);
}

void sub_20EC741AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  sub_20E89FB98(&a10);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_20EC741D8()
{
  unsigned __int8 v0;
  unsigned __int8 v1;

  v0 = atomic_load((unsigned __int8 *)&qword_254A5D6D0);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A5D6D0))
  {
    sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::vio::mapping_types::SerializedCollaborativeMappingData]", qword_254A5E8C0);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254A5E8C0, &dword_20E81F000);
    __cxa_guard_release(&qword_254A5D6D0);
  }
  v1 = atomic_load((unsigned __int8 *)&qword_254A5D6D8);
  if ((v1 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_254A5D6D8))
    {
      sub_21023CD84((uint64_t)qword_254A5E8C0, (uint64_t)&xmmword_254A5E8D8);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A5E8D8, &dword_20E81F000);
      __cxa_guard_release(&qword_254A5D6D8);
    }
  }
}

void sub_20EC742B0(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5D6D8);
  _Unwind_Resume(a1);
}

void sub_20EC742C8(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5D6D0);
  _Unwind_Resume(a1);
}

void sub_20EC742E0()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_254A5D6F8);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A5D6F8))
  {
    sub_20EC7439C();
    if (byte_254A5E97F < 0)
    {
      sub_20E860C04(&xmmword_254A5E938, (void *)xmmword_254A5E968, *((unint64_t *)&xmmword_254A5E968 + 1));
    }
    else
    {
      xmmword_254A5E938 = xmmword_254A5E968;
      unk_254A5E948 = unk_254A5E978;
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A5E938, &dword_20E81F000);
    __cxa_guard_release(&qword_254A5D6F8);
  }
}

void sub_20EC74384(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5D6F8);
  _Unwind_Resume(a1);
}

void sub_20EC7439C()
{
  unsigned __int8 v0;
  unsigned __int8 v1;

  v0 = atomic_load((unsigned __int8 *)&qword_254A5D700);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A5D700))
  {
    sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::concurrency::OptionalReturn<std::shared_ptr<std::vector<cv3d::vio::mapping_types::SerializedCollaborativeMappingData>>> (std::shared_ptr<const cv3d::vio::odometry_engine::SLAMMetadata>)]", qword_254A5E950);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254A5E950, &dword_20E81F000);
    __cxa_guard_release(&qword_254A5D700);
  }
  v1 = atomic_load((unsigned __int8 *)&qword_254A5D708);
  if ((v1 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_254A5D708))
    {
      sub_21023CD84((uint64_t)qword_254A5E950, (uint64_t)&xmmword_254A5E968);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A5E968, &dword_20E81F000);
      __cxa_guard_release(&qword_254A5D708);
    }
  }
}

void sub_20EC74474(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5D708);
  _Unwind_Resume(a1);
}

void sub_20EC7448C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5D700);
  _Unwind_Resume(a1);
}

__int128 *sub_20EC744A4()
{
  unsigned __int8 v0;
  char *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A51140);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A51140))
    return &xmmword_254A51128;
  v2 = (char *)sub_20EC74580();
  if (v2[23] < 0)
  {
    sub_20E860C04(&xmmword_254A51128, *(void **)v2, *((_QWORD *)v2 + 1));
  }
  else
  {
    v3 = *(_OWORD *)v2;
    qword_254A51138 = *((_QWORD *)v2 + 2);
    xmmword_254A51128 = v3;
  }
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A51128, &dword_20E81F000);
  __cxa_guard_release(&qword_254A51140);
  return &xmmword_254A51128;
}

void sub_20EC74568(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A51140);
  _Unwind_Resume(a1);
}

void *sub_20EC74580()
{
  unsigned __int8 v0;
  unsigned __int8 v1;

  v0 = atomic_load((unsigned __int8 *)&qword_254A51160);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A51160))
  {
    sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = std::shared_ptr<const cv3d::vio::mapping_io::SubmapSaveBundle> (const std::shared_ptr<const cv3d::vio::mapping_io::SubmapSaveBundle> &)]", qword_254A51148);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254A51148, &dword_20E81F000);
    __cxa_guard_release(&qword_254A51160);
  }
  v1 = atomic_load((unsigned __int8 *)&qword_254A51180);
  if ((v1 & 1) != 0 || !__cxa_guard_acquire(&qword_254A51180))
    return &unk_254A51168;
  sub_21023CD84((uint64_t)qword_254A51148, (uint64_t)&unk_254A51168);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &unk_254A51168, &dword_20E81F000);
  __cxa_guard_release(&qword_254A51180);
  return &unk_254A51168;
}

void sub_20EC74670(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A51180);
  _Unwind_Resume(a1);
}

void sub_20EC74688(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A51160);
  _Unwind_Resume(a1);
}

void sub_20EC746A0()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_254A5D710);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A5D710))
  {
    sub_20EC7475C();
    if (byte_254A5E9C7 < 0)
    {
      sub_20E860C04(&xmmword_254A5E980, (void *)xmmword_254A5E9B0, *((unint64_t *)&xmmword_254A5E9B0 + 1));
    }
    else
    {
      xmmword_254A5E980 = xmmword_254A5E9B0;
      unk_254A5E990 = unk_254A5E9C0;
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A5E980, &dword_20E81F000);
    __cxa_guard_release(&qword_254A5D710);
  }
}

void sub_20EC74744(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5D710);
  _Unwind_Resume(a1);
}

void sub_20EC7475C()
{
  unsigned __int8 v0;
  unsigned __int8 v1;

  v0 = atomic_load((unsigned __int8 *)&qword_254A5D718);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A5D718))
  {
    sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = std::shared_ptr<cv3d::vio::feature_detection::VIOMLFeatureEvent> (std::shared_ptr<const cv3d::vio::odometry_engine::SLAMMetadata>)]", qword_254A5E998);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254A5E998, &dword_20E81F000);
    __cxa_guard_release(&qword_254A5D718);
  }
  v1 = atomic_load((unsigned __int8 *)&qword_254A5D720);
  if ((v1 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_254A5D720))
    {
      sub_21023CD84((uint64_t)qword_254A5E998, (uint64_t)&xmmword_254A5E9B0);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A5E9B0, &dword_20E81F000);
      __cxa_guard_release(&qword_254A5D720);
    }
  }
}

void sub_20EC74834(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5D720);
  _Unwind_Resume(a1);
}

void sub_20EC7484C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5D718);
  _Unwind_Resume(a1);
}

uint64_t *sub_20EC74864()
{
  unsigned __int8 v0;
  uint64_t *v2;
  const void **v3;
  int v4;
  size_t v5;
  unint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  const void *v11;

  v0 = atomic_load((unsigned __int8 *)&qword_254A511A0);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A511A0))
  {
    v2 = sub_20EC749A8();
    v3 = (const void **)v2;
    v4 = *((char *)v2 + 23);
    if (v4 >= 0)
      v5 = *((unsigned __int8 *)v2 + 23);
    else
      v5 = v2[1];
    v6 = v5 + 1;
    if (v5 + 1 >= 0x7FFFFFFFFFFFFFF8)
      sub_20E860B7C();
    v7 = &qword_254A51188;
    if (v6 >= 0x17)
    {
      v8 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v6 | 7) != 0x17)
        v8 = v6 | 7;
      v9 = v8 + 1;
      v10 = (uint64_t *)operator new(v8 + 1);
      qword_254A51190 = v5 + 1;
      unk_254A51198 = v9 | 0x8000000000000000;
      qword_254A51188 = (uint64_t)v10;
      v7 = v10;
    }
    else
    {
      qword_254A51190 = 0;
      unk_254A51198 = 0;
      qword_254A51188 = 0;
      byte_254A5119F = v5 + 1;
      if (!v5)
      {
LABEL_18:
        *(_WORD *)((char *)v7 + v5) = 38;
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &qword_254A51188, &dword_20E81F000);
        __cxa_guard_release(&qword_254A511A0);
        return &qword_254A51188;
      }
    }
    if (v4 >= 0)
      v11 = v3;
    else
      v11 = *v3;
    memmove(v7, v11, v5);
    goto LABEL_18;
  }
  return &qword_254A51188;
}

void sub_20EC74990(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A511A0);
  _Unwind_Resume(a1);
}

uint64_t *sub_20EC749A8()
{
  unsigned __int8 v0;
  __int128 *v2;
  const void **v3;
  int v4;
  size_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  const void *v11;

  v0 = atomic_load((unsigned __int8 *)&qword_254A511C0);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A511C0))
  {
    v2 = sub_20EC74B20();
    v3 = (const void **)v2;
    v4 = *((char *)v2 + 23);
    if (v4 >= 0)
      v5 = *((unsigned __int8 *)v2 + 23);
    else
      v5 = *((_QWORD *)v2 + 1);
    v6 = v5 + 6;
    if (v5 + 6 >= 0x7FFFFFFFFFFFFFF8)
      sub_20E860B7C();
    if (v6 >= 0x17)
    {
      v8 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v6 | 7) != 0x17)
        v8 = v6 | 7;
      v9 = v8 + 1;
      v10 = (char *)operator new(v8 + 1);
      qword_254A511B0 = v5 + 6;
      unk_254A511B8 = v9 | 0x8000000000000000;
      qword_254A511A8 = (uint64_t)v10;
      *(_DWORD *)v10 = 1936617315;
      v7 = v10 + 6;
      *((_WORD *)v10 + 2) = 8308;
    }
    else
    {
      qword_254A511B0 = 0;
      unk_254A511B8 = 0;
      qword_254A511A8 = 0x2074736E6F63;
      byte_254A511BF = v5 + 6;
      v7 = (char *)&qword_254A511A8 + 6;
      if (!v5)
      {
LABEL_18:
        v7[v5] = 0;
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &qword_254A511A8, &dword_20E81F000);
        __cxa_guard_release(&qword_254A511C0);
        return &qword_254A511A8;
      }
    }
    if (v4 >= 0)
      v11 = v3;
    else
      v11 = *v3;
    memmove(v7, v11, v5);
    goto LABEL_18;
  }
  return &qword_254A511A8;
}

void sub_20EC74B08(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A511C0);
  _Unwind_Resume(a1);
}

__int128 *sub_20EC74B20()
{
  unsigned __int8 v0;
  std::string *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A511E0);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A511E0))
    return &xmmword_254A511C8;
  v2 = sub_20EC74BFC();
  if (SHIBYTE(v2->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_20E860C04(&xmmword_254A511C8, v2->__r_.__value_.__l.__data_, v2->__r_.__value_.__l.__size_);
  }
  else
  {
    v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
    qword_254A511D8 = v2->__r_.__value_.__r.__words[2];
    xmmword_254A511C8 = v3;
  }
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A511C8, &dword_20E81F000);
  __cxa_guard_release(&qword_254A511E0);
  return &xmmword_254A511C8;
}

void sub_20EC74BE4(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A511E0);
  _Unwind_Resume(a1);
}

std::string *sub_20EC74BFC()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A51200);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A51200))
    return &stru_254A511E8;
  sub_20EC74E20((uint64_t)__p);
  sub_20EC74CEC((char *)__p, &stru_254A511E8);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A511E8, &dword_20E81F000);
  __cxa_guard_release(&qword_254A51200);
  return &stru_254A511E8;
}

void sub_20EC74CAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A51200);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A51200);
  _Unwind_Resume(a1);
}

void sub_20EC74CEC(char *a1@<X0>, std::string *a2@<X8>)
{
  std::string *v4;
  __int128 v5;
  int64x2_t v6;
  int8x16_t v7;
  void **v8;
  void **v9;
  void *v10;
  void *__p;
  void **v12;
  void *__dst[2];
  std::string::size_type v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v4 = sub_20EC75004();
  if (SHIBYTE(v4->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_20E860C04(__dst, v4->__r_.__value_.__l.__data_, v4->__r_.__value_.__l.__size_);
  }
  else
  {
    v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
    v14 = v4->__r_.__value_.__r.__words[2];
    *(_OWORD *)__dst = v5;
  }
  sub_20E877C80(&__p, (uint64_t)__dst, 1uLL);
  sub_21023CE38(a1, (uint64_t *)&__p, a2, v6, v7);
  v8 = (void **)__p;
  if (__p)
  {
    v9 = v12;
    v10 = __p;
    if (v12 != __p)
    {
      do
      {
        if (*((char *)v9 - 1) < 0)
          operator delete(*(v9 - 3));
        v9 -= 3;
      }
      while (v9 != v8);
      v10 = __p;
    }
    v12 = v8;
    operator delete(v10);
  }
  if (SHIBYTE(v14) < 0)
    operator delete(__dst[0]);
}

void sub_20EC74DE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  sub_20E89FB98((void **)&a9);
  if (a18 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void sub_20EC74E20(uint64_t a1@<X8>)
{
  unsigned __int8 v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  size_t v5;

  v2 = atomic_load((unsigned __int8 *)&qword_254A512C0);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254A512C0))
  {
    sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::concurrency::ChannelOutput<std::shared_ptr<const cv3d::vio::feature_detection::VIOFrameDebugEvent>>]", qword_254A512A8);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254A512A8, &dword_20E81F000);
    __cxa_guard_release(&qword_254A512C0);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_254A512E0);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_254A512E0))
  {
    v5 = sub_20E8A2354(qword_254A512A8, "<", 0);
    sub_20E89FC08(qword_254A512A8, 0, v5, qword_254A512C8);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254A512C8, &dword_20E81F000);
    __cxa_guard_release(&qword_254A512E0);
  }
  v4 = atomic_load((unsigned __int8 *)&qword_254A51300);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_254A51300))
  {
    sub_21023CD84((uint64_t)qword_254A512C8, (uint64_t)&xmmword_254A512E8);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A512E8, &dword_20E81F000);
    __cxa_guard_release(&qword_254A51300);
  }
  if (byte_254A512FF < 0)
  {
    sub_20E860C04((_BYTE *)a1, (void *)xmmword_254A512E8, *((unint64_t *)&xmmword_254A512E8 + 1));
  }
  else
  {
    *(_OWORD *)a1 = xmmword_254A512E8;
    *(_QWORD *)(a1 + 16) = unk_254A512F8;
  }
}

void sub_20EC74FBC(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A51300);
  _Unwind_Resume(a1);
}

void sub_20EC74FD4(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A512E0);
  _Unwind_Resume(a1);
}

void sub_20EC74FEC(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A512C0);
  _Unwind_Resume(a1);
}

std::string *sub_20EC75004()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A51220);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A51220))
    return &stru_254A51208;
  sub_20E8610C0(__p, "std::shared_ptr");
  sub_20EC750FC((char *)__p, &stru_254A51208);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A51208, &dword_20E81F000);
  __cxa_guard_release(&qword_254A51220);
  return &stru_254A51208;
}

void sub_20EC750BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A51220);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A51220);
  _Unwind_Resume(a1);
}

void sub_20EC750FC(char *a1@<X0>, std::string *a2@<X8>)
{
  uint64_t *v4;
  __int128 v5;
  int64x2_t v6;
  int8x16_t v7;
  void **v8;
  void **v9;
  void *v10;
  void *__p;
  void **v12;
  void *__dst[2];
  uint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v4 = sub_20EC75224();
  if (*((char *)v4 + 23) < 0)
  {
    sub_20E860C04(__dst, (void *)*v4, v4[1]);
  }
  else
  {
    v5 = *(_OWORD *)v4;
    v14 = v4[2];
    *(_OWORD *)__dst = v5;
  }
  sub_20E877C80(&__p, (uint64_t)__dst, 1uLL);
  sub_21023CE38(a1, (uint64_t *)&__p, a2, v6, v7);
  v8 = (void **)__p;
  if (__p)
  {
    v9 = v12;
    v10 = __p;
    if (v12 != __p)
    {
      do
      {
        if (*((char *)v9 - 1) < 0)
          operator delete(*(v9 - 3));
        v9 -= 3;
      }
      while (v9 != v8);
      v10 = __p;
    }
    v12 = v8;
    operator delete(v10);
  }
  if (SHIBYTE(v14) < 0)
    operator delete(__dst[0]);
}

void sub_20EC751F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  sub_20E89FB98(&a10);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t *sub_20EC75224()
{
  unsigned __int8 v0;
  __int128 *v2;
  const void **v3;
  int v4;
  size_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  const void *v11;

  v0 = atomic_load((unsigned __int8 *)&qword_254A51240);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A51240))
  {
    v2 = sub_20EC7539C();
    v3 = (const void **)v2;
    v4 = *((char *)v2 + 23);
    if (v4 >= 0)
      v5 = *((unsigned __int8 *)v2 + 23);
    else
      v5 = *((_QWORD *)v2 + 1);
    v6 = v5 + 6;
    if (v5 + 6 >= 0x7FFFFFFFFFFFFFF8)
      sub_20E860B7C();
    if (v6 >= 0x17)
    {
      v8 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v6 | 7) != 0x17)
        v8 = v6 | 7;
      v9 = v8 + 1;
      v10 = (char *)operator new(v8 + 1);
      qword_254A51230 = v5 + 6;
      unk_254A51238 = v9 | 0x8000000000000000;
      qword_254A51228 = (uint64_t)v10;
      *(_DWORD *)v10 = 1936617315;
      v7 = v10 + 6;
      *((_WORD *)v10 + 2) = 8308;
    }
    else
    {
      qword_254A51230 = 0;
      unk_254A51238 = 0;
      qword_254A51228 = 0x2074736E6F63;
      byte_254A5123F = v5 + 6;
      v7 = (char *)&qword_254A51228 + 6;
      if (!v5)
      {
LABEL_18:
        v7[v5] = 0;
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &qword_254A51228, &dword_20E81F000);
        __cxa_guard_release(&qword_254A51240);
        return &qword_254A51228;
      }
    }
    if (v4 >= 0)
      v11 = v3;
    else
      v11 = *v3;
    memmove(v7, v11, v5);
    goto LABEL_18;
  }
  return &qword_254A51228;
}

void sub_20EC75384(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A51240);
  _Unwind_Resume(a1);
}

__int128 *sub_20EC7539C()
{
  unsigned __int8 v0;
  char *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A51260);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A51260))
    return &xmmword_254A51248;
  v2 = (char *)sub_20EC75478();
  if (v2[23] < 0)
  {
    sub_20E860C04(&xmmword_254A51248, *(void **)v2, *((_QWORD *)v2 + 1));
  }
  else
  {
    v3 = *(_OWORD *)v2;
    qword_254A51258 = *((_QWORD *)v2 + 2);
    xmmword_254A51248 = v3;
  }
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A51248, &dword_20E81F000);
  __cxa_guard_release(&qword_254A51260);
  return &xmmword_254A51248;
}

void sub_20EC75460(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A51260);
  _Unwind_Resume(a1);
}

void *sub_20EC75478()
{
  unsigned __int8 v0;
  unsigned __int8 v1;

  v0 = atomic_load((unsigned __int8 *)&qword_254A51280);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A51280))
  {
    sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::vio::feature_detection::VIOFrameDebugEvent]", qword_254A51268);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254A51268, &dword_20E81F000);
    __cxa_guard_release(&qword_254A51280);
  }
  v1 = atomic_load((unsigned __int8 *)&qword_254A512A0);
  if ((v1 & 1) != 0 || !__cxa_guard_acquire(&qword_254A512A0))
    return &unk_254A51288;
  sub_21023CD84((uint64_t)qword_254A51268, (uint64_t)&unk_254A51288);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &unk_254A51288, &dword_20E81F000);
  __cxa_guard_release(&qword_254A512A0);
  return &unk_254A51288;
}

void sub_20EC75568(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A512A0);
  _Unwind_Resume(a1);
}

void sub_20EC75580(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A51280);
  _Unwind_Resume(a1);
}

void sub_20EC75598()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_254A5D728);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A5D728))
  {
    sub_20EC75654();
    if (byte_254A5EA0F < 0)
    {
      sub_20E860C04(&xmmword_254A5E9C8, (void *)xmmword_254A5E9F8, *((unint64_t *)&xmmword_254A5E9F8 + 1));
    }
    else
    {
      xmmword_254A5E9C8 = xmmword_254A5E9F8;
      unk_254A5E9D8 = unk_254A5EA08;
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A5E9C8, &dword_20E81F000);
    __cxa_guard_release(&qword_254A5D728);
  }
}

void sub_20EC7563C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5D728);
  _Unwind_Resume(a1);
}

void sub_20EC75654()
{
  unsigned __int8 v0;
  unsigned __int8 v1;

  v0 = atomic_load((unsigned __int8 *)&qword_254A5D730);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A5D730))
  {
    sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::concurrency::OptionalReturn<std::shared_ptr<const cv3d::vio::feature_detection::VIOFrameDebugEvent>> (std::shared_ptr<const cv3d::vio::odometry_engine::SLAMMetadata>)]", qword_254A5E9E0);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254A5E9E0, &dword_20E81F000);
    __cxa_guard_release(&qword_254A5D730);
  }
  v1 = atomic_load((unsigned __int8 *)&qword_254A5D738);
  if ((v1 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_254A5D738))
    {
      sub_21023CD84((uint64_t)qword_254A5E9E0, (uint64_t)&xmmword_254A5E9F8);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A5E9F8, &dword_20E81F000);
      __cxa_guard_release(&qword_254A5D738);
    }
  }
}

void sub_20EC7572C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5D738);
  _Unwind_Resume(a1);
}

void sub_20EC75744(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5D730);
  _Unwind_Resume(a1);
}

void sub_20EC7575C()
{
  unsigned __int8 v0;
  int v1;
  size_t v2;
  unint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  __int128 *v8;

  v0 = atomic_load((unsigned __int8 *)&qword_254A5D748);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A5D748))
  {
    sub_20EC758D4();
    v1 = byte_254A5EA57;
    if (byte_254A5EA57 >= 0)
      v2 = byte_254A5EA57;
    else
      v2 = *((_QWORD *)&xmmword_254A5EA40 + 1);
    v3 = v2 + 6;
    if (v2 + 6 >= 0x7FFFFFFFFFFFFFF8)
      sub_20E860B7C();
    if (v3 >= 0x17)
    {
      v5 = (v3 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v3 | 7) != 0x17)
        v5 = v3 | 7;
      v6 = v5 + 1;
      v7 = (char *)operator new(v5 + 1);
      qword_254A5EA30 = v2 + 6;
      unk_254A5EA38 = v6 | 0x8000000000000000;
      qword_254A5EA28 = (uint64_t)v7;
      *(_DWORD *)v7 = 1936617315;
      *((_WORD *)v7 + 2) = 8308;
      v4 = v7 + 6;
    }
    else
    {
      qword_254A5EA30 = 0;
      unk_254A5EA38 = 0;
      qword_254A5EA28 = 0x2074736E6F63;
      byte_254A5EA3F = v2 + 6;
      v4 = (char *)&qword_254A5EA28 + 6;
      if (!v2)
      {
LABEL_18:
        v4[v2] = 0;
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &qword_254A5EA28, &dword_20E81F000);
        __cxa_guard_release(&qword_254A5D748);
        return;
      }
    }
    if (v1 >= 0)
      v8 = &xmmword_254A5EA40;
    else
      v8 = (__int128 *)xmmword_254A5EA40;
    memmove(v4, v8, v2);
    goto LABEL_18;
  }
}

void sub_20EC758BC(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5D748);
  _Unwind_Resume(a1);
}

void sub_20EC758D4()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_254A5D750);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A5D750))
  {
    sub_20EC75990();
    if (byte_254A5EA6F < 0)
    {
      sub_20E860C04(&xmmword_254A5EA40, (void *)qword_254A5EA58, unk_254A5EA60);
    }
    else
    {
      xmmword_254A5EA40 = *(_OWORD *)&qword_254A5EA58;
      unk_254A5EA50 = unk_254A5EA68;
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A5EA40, &dword_20E81F000);
    __cxa_guard_release(&qword_254A5D750);
  }
}

void sub_20EC75978(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5D750);
  _Unwind_Resume(a1);
}

void sub_20EC75990()
{
  unsigned __int8 v0;
  void *__p[2];
  char v2;

  v0 = atomic_load((unsigned __int8 *)&qword_254A5D758);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A5D758))
  {
    sub_20EC75C40(__p);
    sub_20EC75A68((char *)__p);
    if (v2 < 0)
      operator delete(__p[0]);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &qword_254A5EA58, &dword_20E81F000);
    __cxa_guard_release(&qword_254A5D758);
  }
}

void sub_20EC75A28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A5D758);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A5D758);
  _Unwind_Resume(a1);
}

void sub_20EC75A68(char *a1)
{
  unsigned __int8 v2;
  int64x2_t v3;
  int8x16_t v4;
  void **v5;
  void **v6;
  void *v7;
  void *__p;
  void **v9;
  void *__dst[2];
  uint64_t v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v2 = atomic_load((unsigned __int8 *)&qword_254A5D760);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254A5D760))
  {
    sub_20EC75E1C();
    if (byte_254A5EAB7 < 0)
    {
      sub_20E860C04(&xmmword_254A5EA70, (void *)xmmword_254A5EAA0, *((unint64_t *)&xmmword_254A5EAA0 + 1));
    }
    else
    {
      xmmword_254A5EA70 = xmmword_254A5EAA0;
      unk_254A5EA80 = unk_254A5EAB0;
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A5EA70, &dword_20E81F000);
    __cxa_guard_release(&qword_254A5D760);
  }
  if (byte_254A5EA87 < 0)
  {
    sub_20E860C04(__dst, (void *)xmmword_254A5EA70, *((unint64_t *)&xmmword_254A5EA70 + 1));
  }
  else
  {
    *(_OWORD *)__dst = xmmword_254A5EA70;
    v11 = unk_254A5EA80;
  }
  sub_20E877C80(&__p, (uint64_t)__dst, 1uLL);
  sub_21023CE38(a1, (uint64_t *)&__p, (std::string *)&qword_254A5EA58, v3, v4);
  v5 = (void **)__p;
  if (__p)
  {
    v6 = v9;
    v7 = __p;
    if (v9 != __p)
    {
      do
      {
        if (*((char *)v6 - 1) < 0)
          operator delete(*(v6 - 3));
        v6 -= 3;
      }
      while (v6 != v5);
      v7 = __p;
    }
    v9 = v5;
    operator delete(v7);
  }
  if (SHIBYTE(v11) < 0)
    operator delete(__dst[0]);
}

void sub_20EC75BF8(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5D760);
  _Unwind_Resume(a1);
}

void sub_20EC75C14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  sub_20E89FB98(&a10);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_20EC75C40(_QWORD *__dst)
{
  unsigned __int8 v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  size_t v5;

  v2 = atomic_load((unsigned __int8 *)&qword_254A5D778);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254A5D778))
  {
    sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::concurrency::ChannelOutput<cv3d::vio::cv_types::FeatureFilterInputs>]", qword_254A5EAB8);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254A5EAB8, &dword_20E81F000);
    __cxa_guard_release(&qword_254A5D778);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_254A5D780);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_254A5D780))
  {
    v5 = sub_20E8A2354(qword_254A5EAB8, "<", 0);
    sub_20E89FC08(qword_254A5EAB8, 0, v5, qword_254A5EAD0);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254A5EAD0, &dword_20E81F000);
    __cxa_guard_release(&qword_254A5D780);
  }
  v4 = atomic_load((unsigned __int8 *)&qword_254A5D788);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_254A5D788))
  {
    sub_21023CD84((uint64_t)qword_254A5EAD0, (uint64_t)&xmmword_254A5EAE8);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A5EAE8, &dword_20E81F000);
    __cxa_guard_release(&qword_254A5D788);
  }
  if (byte_254A5EAFF < 0)
  {
    sub_20E860C04(__dst, (void *)xmmword_254A5EAE8, *((unint64_t *)&xmmword_254A5EAE8 + 1));
  }
  else
  {
    *(_OWORD *)__dst = xmmword_254A5EAE8;
    __dst[2] = unk_254A5EAF8;
  }
}

void sub_20EC75DD4(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5D788);
  _Unwind_Resume(a1);
}

void sub_20EC75DEC(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5D780);
  _Unwind_Resume(a1);
}

void sub_20EC75E04(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5D778);
  _Unwind_Resume(a1);
}

void sub_20EC75E1C()
{
  unsigned __int8 v0;
  unsigned __int8 v1;

  v0 = atomic_load((unsigned __int8 *)&qword_254A5D768);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A5D768))
  {
    sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::vio::cv_types::FeatureFilterInputs]", qword_254A5EA88);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254A5EA88, &dword_20E81F000);
    __cxa_guard_release(&qword_254A5D768);
  }
  v1 = atomic_load((unsigned __int8 *)&qword_254A5D770);
  if ((v1 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_254A5D770))
    {
      sub_21023CD84((uint64_t)qword_254A5EA88, (uint64_t)&xmmword_254A5EAA0);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A5EAA0, &dword_20E81F000);
      __cxa_guard_release(&qword_254A5D770);
    }
  }
}

void sub_20EC75EF4(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5D770);
  _Unwind_Resume(a1);
}

void sub_20EC75F0C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5D768);
  _Unwind_Resume(a1);
}

void sub_20EC75F24()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_254A5D790);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A5D790))
  {
    sub_20EC75FE0();
    if (byte_254A5EB47 < 0)
    {
      sub_20E860C04(&xmmword_254A5EB00, (void *)xmmword_254A5EB30, *((unint64_t *)&xmmword_254A5EB30 + 1));
    }
    else
    {
      xmmword_254A5EB00 = xmmword_254A5EB30;
      unk_254A5EB10 = unk_254A5EB40;
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A5EB00, &dword_20E81F000);
    __cxa_guard_release(&qword_254A5D790);
  }
}

void sub_20EC75FC8(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5D790);
  _Unwind_Resume(a1);
}

void sub_20EC75FE0()
{
  unsigned __int8 v0;
  unsigned __int8 v1;

  v0 = atomic_load((unsigned __int8 *)&qword_254A5D798);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A5D798))
  {
    sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::concurrency::OptionalReturn<cv3d::vio::cv_types::FeatureFilterInputs> (std::shared_ptr<const cv3d::vio::odometry_engine::SLAMMetadata>)]", qword_254A5EB18);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254A5EB18, &dword_20E81F000);
    __cxa_guard_release(&qword_254A5D798);
  }
  v1 = atomic_load((unsigned __int8 *)&qword_254A5D7A0);
  if ((v1 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_254A5D7A0))
    {
      sub_21023CD84((uint64_t)qword_254A5EB18, (uint64_t)&xmmword_254A5EB30);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A5EB30, &dword_20E81F000);
      __cxa_guard_release(&qword_254A5D7A0);
    }
  }
}

void sub_20EC760B8(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5D7A0);
  _Unwind_Resume(a1);
}

void sub_20EC760D0(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5D798);
  _Unwind_Resume(a1);
}

void sub_20EC760E8()
{
  unsigned __int8 v0;
  int v1;
  size_t v2;
  unint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  __int128 *v8;

  v0 = atomic_load((unsigned __int8 *)&qword_254A5D7B0);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A5D7B0))
  {
    sub_20EC76260();
    v1 = byte_254A5EB8F;
    if (byte_254A5EB8F >= 0)
      v2 = byte_254A5EB8F;
    else
      v2 = *((_QWORD *)&xmmword_254A5EB78 + 1);
    v3 = v2 + 6;
    if (v2 + 6 >= 0x7FFFFFFFFFFFFFF8)
      sub_20E860B7C();
    if (v3 >= 0x17)
    {
      v5 = (v3 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v3 | 7) != 0x17)
        v5 = v3 | 7;
      v6 = v5 + 1;
      v7 = (char *)operator new(v5 + 1);
      qword_254A5EB68 = v2 + 6;
      unk_254A5EB70 = v6 | 0x8000000000000000;
      qword_254A5EB60 = (uint64_t)v7;
      *(_DWORD *)v7 = 1936617315;
      *((_WORD *)v7 + 2) = 8308;
      v4 = v7 + 6;
    }
    else
    {
      qword_254A5EB68 = 0;
      unk_254A5EB70 = 0;
      qword_254A5EB60 = 0x2074736E6F63;
      byte_254A5EB77 = v2 + 6;
      v4 = (char *)&qword_254A5EB60 + 6;
      if (!v2)
      {
LABEL_18:
        v4[v2] = 0;
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &qword_254A5EB60, &dword_20E81F000);
        __cxa_guard_release(&qword_254A5D7B0);
        return;
      }
    }
    if (v1 >= 0)
      v8 = &xmmword_254A5EB78;
    else
      v8 = (__int128 *)xmmword_254A5EB78;
    memmove(v4, v8, v2);
    goto LABEL_18;
  }
}

void sub_20EC76248(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5D7B0);
  _Unwind_Resume(a1);
}

void sub_20EC76260()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_254A5D7B8);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A5D7B8))
  {
    sub_20EC7631C();
    if (byte_254A5EBA7 < 0)
    {
      sub_20E860C04(&xmmword_254A5EB78, (void *)qword_254A5EB90, unk_254A5EB98);
    }
    else
    {
      xmmword_254A5EB78 = *(_OWORD *)&qword_254A5EB90;
      unk_254A5EB88 = unk_254A5EBA0;
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A5EB78, &dword_20E81F000);
    __cxa_guard_release(&qword_254A5D7B8);
  }
}

void sub_20EC76304(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5D7B8);
  _Unwind_Resume(a1);
}

void sub_20EC7631C()
{
  unsigned __int8 v0;
  void *__p[2];
  char v2;

  v0 = atomic_load((unsigned __int8 *)&qword_254A5D7C0);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A5D7C0))
  {
    sub_20EC765E0(__p);
    sub_20EC763F4((char *)__p);
    if (v2 < 0)
      operator delete(__p[0]);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &qword_254A5EB90, &dword_20E81F000);
    __cxa_guard_release(&qword_254A5D7C0);
  }
}

void sub_20EC763B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A5D7C0);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A5D7C0);
  _Unwind_Resume(a1);
}

void sub_20EC763F4(char *a1)
{
  unsigned __int8 v2;
  int64x2_t v3;
  int8x16_t v4;
  void **v5;
  void **v6;
  void *v7;
  void *__p;
  void **v9;
  void *v10[2];
  char v11;
  void *__dst[2];
  uint64_t v13;
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  v2 = atomic_load((unsigned __int8 *)&qword_254A5D7C8);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254A5D7C8))
  {
    sub_20E8610C0(v10, "std::shared_ptr");
    sub_20EC767BC((char *)v10);
    if (v11 < 0)
      operator delete(v10[0]);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A5EBA8, &dword_20E81F000);
    __cxa_guard_release(&qword_254A5D7C8);
  }
  if (byte_254A5EBBF < 0)
  {
    sub_20E860C04(__dst, (void *)xmmword_254A5EBA8, *((unint64_t *)&xmmword_254A5EBA8 + 1));
  }
  else
  {
    *(_OWORD *)__dst = xmmword_254A5EBA8;
    v13 = unk_254A5EBB8;
  }
  sub_20E877C80(&__p, (uint64_t)__dst, 1uLL);
  sub_21023CE38(a1, (uint64_t *)&__p, (std::string *)&qword_254A5EB90, v3, v4);
  v5 = (void **)__p;
  if (__p)
  {
    v6 = v9;
    v7 = __p;
    if (v9 != __p)
    {
      do
      {
        if (*((char *)v6 - 1) < 0)
          operator delete(*(v6 - 3));
        v6 -= 3;
      }
      while (v6 != v5);
      v7 = __p;
    }
    v9 = v5;
    operator delete(v7);
  }
  if (SHIBYTE(v13) < 0)
    operator delete(__dst[0]);
}

void sub_20EC76570(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A5D7C8);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A5D7C8);
  _Unwind_Resume(a1);
}

void sub_20EC765B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  sub_20E89FB98((void **)&a9);
  if (a20 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_20EC765E0(_QWORD *__dst)
{
  unsigned __int8 v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  size_t v5;

  v2 = atomic_load((unsigned __int8 *)&qword_254A5D7E8);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254A5D7E8))
  {
    sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::concurrency::ChannelOutput<std::shared_ptr<cv3d::vio::feature_detection::VIODepthFeatureEvent>>]", qword_254A5EC08);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254A5EC08, &dword_20E81F000);
    __cxa_guard_release(&qword_254A5D7E8);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_254A5D7F0);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_254A5D7F0))
  {
    v5 = sub_20E8A2354(qword_254A5EC08, "<", 0);
    sub_20E89FC08(qword_254A5EC08, 0, v5, qword_254A5EC20);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254A5EC20, &dword_20E81F000);
    __cxa_guard_release(&qword_254A5D7F0);
  }
  v4 = atomic_load((unsigned __int8 *)&qword_254A5D7F8);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_254A5D7F8))
  {
    sub_21023CD84((uint64_t)qword_254A5EC20, (uint64_t)&xmmword_254A5EC38);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A5EC38, &dword_20E81F000);
    __cxa_guard_release(&qword_254A5D7F8);
  }
  if (byte_254A5EC4F < 0)
  {
    sub_20E860C04(__dst, (void *)xmmword_254A5EC38, *((unint64_t *)&xmmword_254A5EC38 + 1));
  }
  else
  {
    *(_OWORD *)__dst = xmmword_254A5EC38;
    __dst[2] = unk_254A5EC48;
  }
}

void sub_20EC76774(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5D7F8);
  _Unwind_Resume(a1);
}

void sub_20EC7678C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5D7F0);
  _Unwind_Resume(a1);
}

void sub_20EC767A4(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5D7E8);
  _Unwind_Resume(a1);
}

void sub_20EC767BC(char *a1)
{
  unsigned __int8 v2;
  int64x2_t v3;
  int8x16_t v4;
  void **v5;
  void **v6;
  void *v7;
  void *__p;
  void **v9;
  void *__dst[2];
  uint64_t v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v2 = atomic_load((unsigned __int8 *)&qword_254A5D7D0);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254A5D7D0))
  {
    sub_20EC76994();
    if (byte_254A5EC07 < 0)
    {
      sub_20E860C04(&xmmword_254A5EBC0, (void *)xmmword_254A5EBF0, *((unint64_t *)&xmmword_254A5EBF0 + 1));
    }
    else
    {
      xmmword_254A5EBC0 = xmmword_254A5EBF0;
      unk_254A5EBD0 = unk_254A5EC00;
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A5EBC0, &dword_20E81F000);
    __cxa_guard_release(&qword_254A5D7D0);
  }
  if (byte_254A5EBD7 < 0)
  {
    sub_20E860C04(__dst, (void *)xmmword_254A5EBC0, *((unint64_t *)&xmmword_254A5EBC0 + 1));
  }
  else
  {
    *(_OWORD *)__dst = xmmword_254A5EBC0;
    v11 = unk_254A5EBD0;
  }
  sub_20E877C80(&__p, (uint64_t)__dst, 1uLL);
  sub_21023CE38(a1, (uint64_t *)&__p, (std::string *)&xmmword_254A5EBA8, v3, v4);
  v5 = (void **)__p;
  if (__p)
  {
    v6 = v9;
    v7 = __p;
    if (v9 != __p)
    {
      do
      {
        if (*((char *)v6 - 1) < 0)
          operator delete(*(v6 - 3));
        v6 -= 3;
      }
      while (v6 != v5);
      v7 = __p;
    }
    v9 = v5;
    operator delete(v7);
  }
  if (SHIBYTE(v11) < 0)
    operator delete(__dst[0]);
}

void sub_20EC7694C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5D7D0);
  _Unwind_Resume(a1);
}

void sub_20EC76968(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  sub_20E89FB98(&a10);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_20EC76994()
{
  unsigned __int8 v0;
  unsigned __int8 v1;

  v0 = atomic_load((unsigned __int8 *)&qword_254A5D7D8);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A5D7D8))
  {
    sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::vio::feature_detection::VIODepthFeatureEvent]", qword_254A5EBD8);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254A5EBD8, &dword_20E81F000);
    __cxa_guard_release(&qword_254A5D7D8);
  }
  v1 = atomic_load((unsigned __int8 *)&qword_254A5D7E0);
  if ((v1 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_254A5D7E0))
    {
      sub_21023CD84((uint64_t)qword_254A5EBD8, (uint64_t)&xmmword_254A5EBF0);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A5EBF0, &dword_20E81F000);
      __cxa_guard_release(&qword_254A5D7E0);
    }
  }
}

void sub_20EC76A6C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5D7E0);
  _Unwind_Resume(a1);
}

void sub_20EC76A84(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5D7D8);
  _Unwind_Resume(a1);
}

void sub_20EC76A9C()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_254A5D800);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A5D800))
  {
    sub_20EC76B58();
    if (byte_254A5EC97 < 0)
    {
      sub_20E860C04(&xmmword_254A5EC50, (void *)xmmword_254A5EC80, *((unint64_t *)&xmmword_254A5EC80 + 1));
    }
    else
    {
      xmmword_254A5EC50 = xmmword_254A5EC80;
      unk_254A5EC60 = unk_254A5EC90;
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A5EC50, &dword_20E81F000);
    __cxa_guard_release(&qword_254A5D800);
  }
}

void sub_20EC76B40(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5D800);
  _Unwind_Resume(a1);
}

void sub_20EC76B58()
{
  unsigned __int8 v0;
  unsigned __int8 v1;

  v0 = atomic_load((unsigned __int8 *)&qword_254A5D808);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A5D808))
  {
    sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = std::shared_ptr<cv3d::vio::feature_detection::VIODepthFeatureEvent> (std::shared_ptr<const cv3d::vio::odometry_engine::SLAMMetadata>)]", qword_254A5EC68);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254A5EC68, &dword_20E81F000);
    __cxa_guard_release(&qword_254A5D808);
  }
  v1 = atomic_load((unsigned __int8 *)&qword_254A5D810);
  if ((v1 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_254A5D810))
    {
      sub_21023CD84((uint64_t)qword_254A5EC68, (uint64_t)&xmmword_254A5EC80);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A5EC80, &dword_20E81F000);
      __cxa_guard_release(&qword_254A5D810);
    }
  }
}

void sub_20EC76C30(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5D810);
  _Unwind_Resume(a1);
}

void sub_20EC76C48(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5D808);
  _Unwind_Resume(a1);
}

void sub_20EC76C60()
{
  unsigned __int8 v0;
  int v1;
  size_t v2;
  unint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  __int128 *v8;

  v0 = atomic_load((unsigned __int8 *)&qword_254A5D820);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A5D820))
  {
    sub_20EC76DD8();
    v1 = byte_254A5ECDF;
    if (byte_254A5ECDF >= 0)
      v2 = byte_254A5ECDF;
    else
      v2 = *((_QWORD *)&xmmword_254A5ECC8 + 1);
    v3 = v2 + 6;
    if (v2 + 6 >= 0x7FFFFFFFFFFFFFF8)
      sub_20E860B7C();
    if (v3 >= 0x17)
    {
      v5 = (v3 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v3 | 7) != 0x17)
        v5 = v3 | 7;
      v6 = v5 + 1;
      v7 = (char *)operator new(v5 + 1);
      qword_254A5ECB8 = v2 + 6;
      unk_254A5ECC0 = v6 | 0x8000000000000000;
      qword_254A5ECB0 = (uint64_t)v7;
      *(_DWORD *)v7 = 1936617315;
      *((_WORD *)v7 + 2) = 8308;
      v4 = v7 + 6;
    }
    else
    {
      qword_254A5ECB8 = 0;
      unk_254A5ECC0 = 0;
      qword_254A5ECB0 = 0x2074736E6F63;
      byte_254A5ECC7 = v2 + 6;
      v4 = (char *)&qword_254A5ECB0 + 6;
      if (!v2)
      {
LABEL_18:
        v4[v2] = 0;
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &qword_254A5ECB0, &dword_20E81F000);
        __cxa_guard_release(&qword_254A5D820);
        return;
      }
    }
    if (v1 >= 0)
      v8 = &xmmword_254A5ECC8;
    else
      v8 = (__int128 *)xmmword_254A5ECC8;
    memmove(v4, v8, v2);
    goto LABEL_18;
  }
}

void sub_20EC76DC0(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5D820);
  _Unwind_Resume(a1);
}

void sub_20EC76DD8()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_254A5D828);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A5D828))
  {
    sub_20EC76E94();
    if (byte_254A5ECF7 < 0)
    {
      sub_20E860C04(&xmmword_254A5ECC8, (void *)qword_254A5ECE0, unk_254A5ECE8);
    }
    else
    {
      xmmword_254A5ECC8 = *(_OWORD *)&qword_254A5ECE0;
      unk_254A5ECD8 = unk_254A5ECF0;
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A5ECC8, &dword_20E81F000);
    __cxa_guard_release(&qword_254A5D828);
  }
}

void sub_20EC76E7C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5D828);
  _Unwind_Resume(a1);
}

void sub_20EC76E94()
{
  unsigned __int8 v0;
  void *__p[2];
  char v2;

  v0 = atomic_load((unsigned __int8 *)&qword_254A5D830);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A5D830))
  {
    sub_20EC76F74(__p);
    sub_20EC6DFB4((std::string *)&qword_254A5ECE0, (char *)__p);
    if (v2 < 0)
      operator delete(__p[0]);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &qword_254A5ECE0, &dword_20E81F000);
    __cxa_guard_release(&qword_254A5D830);
  }
}

void sub_20EC76F34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A5D830);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A5D830);
  _Unwind_Resume(a1);
}

void sub_20EC76F74(_QWORD *__dst)
{
  unsigned __int8 v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  size_t v5;

  v2 = atomic_load((unsigned __int8 *)&qword_254A5D838);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254A5D838))
  {
    sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::concurrency::ChannelOutput<cv3d::vio::slam_engine_node_group::SlamEngineNodeError>]", qword_254A5ECF8);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254A5ECF8, &dword_20E81F000);
    __cxa_guard_release(&qword_254A5D838);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_254A5D840);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_254A5D840))
  {
    v5 = sub_20E8A2354(qword_254A5ECF8, "<", 0);
    sub_20E89FC08(qword_254A5ECF8, 0, v5, qword_254A5ED10);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254A5ED10, &dword_20E81F000);
    __cxa_guard_release(&qword_254A5D840);
  }
  v4 = atomic_load((unsigned __int8 *)&qword_254A5D848);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_254A5D848))
  {
    sub_21023CD84((uint64_t)qword_254A5ED10, (uint64_t)&xmmword_254A5ED28);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A5ED28, &dword_20E81F000);
    __cxa_guard_release(&qword_254A5D848);
  }
  if (byte_254A5ED3F < 0)
  {
    sub_20E860C04(__dst, (void *)xmmword_254A5ED28, *((unint64_t *)&xmmword_254A5ED28 + 1));
  }
  else
  {
    *(_OWORD *)__dst = xmmword_254A5ED28;
    __dst[2] = unk_254A5ED38;
  }
}

void sub_20EC77108(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5D848);
  _Unwind_Resume(a1);
}

void sub_20EC77120(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5D840);
  _Unwind_Resume(a1);
}

void sub_20EC77138(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5D838);
  _Unwind_Resume(a1);
}

void sub_20EC77150()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_254A5D850);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A5D850))
  {
    sub_20EC7720C();
    if (byte_254A5ED87 < 0)
    {
      sub_20E860C04(&xmmword_254A5ED40, (void *)xmmword_254A5ED70, *((unint64_t *)&xmmword_254A5ED70 + 1));
    }
    else
    {
      xmmword_254A5ED40 = xmmword_254A5ED70;
      unk_254A5ED50 = unk_254A5ED80;
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A5ED40, &dword_20E81F000);
    __cxa_guard_release(&qword_254A5D850);
  }
}

void sub_20EC771F4(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5D850);
  _Unwind_Resume(a1);
}

void sub_20EC7720C()
{
  unsigned __int8 v0;
  unsigned __int8 v1;

  v0 = atomic_load((unsigned __int8 *)&qword_254A5D858);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A5D858))
  {
    sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::vio::slam_engine_node_group::SlamEngineNodeError (const cv3d::vio::slam_engine_node_group::SlamEngineNodeError &)]", qword_254A5ED58);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254A5ED58, &dword_20E81F000);
    __cxa_guard_release(&qword_254A5D858);
  }
  v1 = atomic_load((unsigned __int8 *)&qword_254A5D860);
  if ((v1 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_254A5D860))
    {
      sub_21023CD84((uint64_t)qword_254A5ED58, (uint64_t)&xmmword_254A5ED70);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A5ED70, &dword_20E81F000);
      __cxa_guard_release(&qword_254A5D860);
    }
  }
}

void sub_20EC772E4(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5D860);
  _Unwind_Resume(a1);
}

void sub_20EC772FC(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5D858);
  _Unwind_Resume(a1);
}

void sub_20EC77314()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_254A5D868);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A5D868))
  {
    sub_20EC773D0();
    if (byte_254A5EDCF < 0)
    {
      sub_20E860C04(&xmmword_254A5ED88, (void *)xmmword_254A5EDB8, *((unint64_t *)&xmmword_254A5EDB8 + 1));
    }
    else
    {
      xmmword_254A5ED88 = xmmword_254A5EDB8;
      unk_254A5ED98 = unk_254A5EDC8;
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A5ED88, &dword_20E81F000);
    __cxa_guard_release(&qword_254A5D868);
  }
}

void sub_20EC773B8(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5D868);
  _Unwind_Resume(a1);
}

void sub_20EC773D0()
{
  unsigned __int8 v0;
  unsigned __int8 v1;

  v0 = atomic_load((unsigned __int8 *)&qword_254A5D870);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A5D870))
  {
    sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::vio::mapping_io::MapSaveRequest (const cv3d::vio::mapping_io::MapSaveRequest &)]", qword_254A5EDA0);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254A5EDA0, &dword_20E81F000);
    __cxa_guard_release(&qword_254A5D870);
  }
  v1 = atomic_load((unsigned __int8 *)&qword_254A5D878);
  if ((v1 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_254A5D878))
    {
      sub_21023CD84((uint64_t)qword_254A5EDA0, (uint64_t)&xmmword_254A5EDB8);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A5EDB8, &dword_20E81F000);
      __cxa_guard_release(&qword_254A5D878);
    }
  }
}

void sub_20EC774A8(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5D878);
  _Unwind_Resume(a1);
}

void sub_20EC774C0(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5D870);
  _Unwind_Resume(a1);
}

void sub_20EC774D8()
{
  unsigned __int8 v0;
  int v1;
  size_t v2;
  unint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  __int128 *v8;

  v0 = atomic_load((unsigned __int8 *)&qword_254A5D888);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A5D888))
  {
    sub_20EC77650();
    v1 = byte_254A5EE17;
    if (byte_254A5EE17 >= 0)
      v2 = byte_254A5EE17;
    else
      v2 = *((_QWORD *)&xmmword_254A5EE00 + 1);
    v3 = v2 + 6;
    if (v2 + 6 >= 0x7FFFFFFFFFFFFFF8)
      sub_20E860B7C();
    if (v3 >= 0x17)
    {
      v5 = (v3 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v3 | 7) != 0x17)
        v5 = v3 | 7;
      v6 = v5 + 1;
      v7 = (char *)operator new(v5 + 1);
      qword_254A5EDF0 = v2 + 6;
      unk_254A5EDF8 = v6 | 0x8000000000000000;
      qword_254A5EDE8 = (uint64_t)v7;
      *(_DWORD *)v7 = 1936617315;
      *((_WORD *)v7 + 2) = 8308;
      v4 = v7 + 6;
    }
    else
    {
      qword_254A5EDF0 = 0;
      unk_254A5EDF8 = 0;
      qword_254A5EDE8 = 0x2074736E6F63;
      byte_254A5EDFF = v2 + 6;
      v4 = (char *)&qword_254A5EDE8 + 6;
      if (!v2)
      {
LABEL_18:
        v4[v2] = 0;
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &qword_254A5EDE8, &dword_20E81F000);
        __cxa_guard_release(&qword_254A5D888);
        return;
      }
    }
    if (v1 >= 0)
      v8 = &xmmword_254A5EE00;
    else
      v8 = (__int128 *)xmmword_254A5EE00;
    memmove(v4, v8, v2);
    goto LABEL_18;
  }
}

void sub_20EC77638(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5D888);
  _Unwind_Resume(a1);
}

void sub_20EC77650()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_254A5D890);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A5D890))
  {
    sub_20EC7770C();
    if (byte_254A5EE2F < 0)
    {
      sub_20E860C04(&xmmword_254A5EE00, (void *)qword_254A5EE18, unk_254A5EE20);
    }
    else
    {
      xmmword_254A5EE00 = *(_OWORD *)&qword_254A5EE18;
      unk_254A5EE10 = unk_254A5EE28;
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A5EE00, &dword_20E81F000);
    __cxa_guard_release(&qword_254A5D890);
  }
}

void sub_20EC776F4(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5D890);
  _Unwind_Resume(a1);
}

void sub_20EC7770C()
{
  unsigned __int8 v0;
  void *__p[2];
  char v2;

  v0 = atomic_load((unsigned __int8 *)&qword_254A5D898);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A5D898))
  {
    sub_20EC779BC(__p);
    sub_20EC777E4((char *)__p);
    if (v2 < 0)
      operator delete(__p[0]);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &qword_254A5EE18, &dword_20E81F000);
    __cxa_guard_release(&qword_254A5D898);
  }
}

void sub_20EC777A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A5D898);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A5D898);
  _Unwind_Resume(a1);
}

void sub_20EC777E4(char *a1)
{
  unsigned __int8 v2;
  int64x2_t v3;
  int8x16_t v4;
  void **v5;
  void **v6;
  void *v7;
  void *__p;
  void **v9;
  void *__dst[2];
  uint64_t v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v2 = atomic_load((unsigned __int8 *)&qword_254A5D8A0);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254A5D8A0))
  {
    sub_20EC77B98();
    if (byte_254A5EE77 < 0)
    {
      sub_20E860C04(&xmmword_254A5EE30, (void *)xmmword_254A5EE60, *((unint64_t *)&xmmword_254A5EE60 + 1));
    }
    else
    {
      xmmword_254A5EE30 = xmmword_254A5EE60;
      unk_254A5EE40 = unk_254A5EE70;
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A5EE30, &dword_20E81F000);
    __cxa_guard_release(&qword_254A5D8A0);
  }
  if (byte_254A5EE47 < 0)
  {
    sub_20E860C04(__dst, (void *)xmmword_254A5EE30, *((unint64_t *)&xmmword_254A5EE30 + 1));
  }
  else
  {
    *(_OWORD *)__dst = xmmword_254A5EE30;
    v11 = unk_254A5EE40;
  }
  sub_20E877C80(&__p, (uint64_t)__dst, 1uLL);
  sub_21023CE38(a1, (uint64_t *)&__p, (std::string *)&qword_254A5EE18, v3, v4);
  v5 = (void **)__p;
  if (__p)
  {
    v6 = v9;
    v7 = __p;
    if (v9 != __p)
    {
      do
      {
        if (*((char *)v6 - 1) < 0)
          operator delete(*(v6 - 3));
        v6 -= 3;
      }
      while (v6 != v5);
      v7 = __p;
    }
    v9 = v5;
    operator delete(v7);
  }
  if (SHIBYTE(v11) < 0)
    operator delete(__dst[0]);
}

void sub_20EC77974(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5D8A0);
  _Unwind_Resume(a1);
}

void sub_20EC77990(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  sub_20E89FB98(&a10);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_20EC779BC(_QWORD *__dst)
{
  unsigned __int8 v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  size_t v5;

  v2 = atomic_load((unsigned __int8 *)&qword_254A5D8B8);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254A5D8B8))
  {
    sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::concurrency::ChannelOutput<cv3d::vio::data_verification::DataVerificationStatus>]", qword_254A5EE78);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254A5EE78, &dword_20E81F000);
    __cxa_guard_release(&qword_254A5D8B8);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_254A5D8C0);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_254A5D8C0))
  {
    v5 = sub_20E8A2354(qword_254A5EE78, "<", 0);
    sub_20E89FC08(qword_254A5EE78, 0, v5, qword_254A5EE90);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254A5EE90, &dword_20E81F000);
    __cxa_guard_release(&qword_254A5D8C0);
  }
  v4 = atomic_load((unsigned __int8 *)&qword_254A5D8C8);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_254A5D8C8))
  {
    sub_21023CD84((uint64_t)qword_254A5EE90, (uint64_t)&xmmword_254A5EEA8);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A5EEA8, &dword_20E81F000);
    __cxa_guard_release(&qword_254A5D8C8);
  }
  if (byte_254A5EEBF < 0)
  {
    sub_20E860C04(__dst, (void *)xmmword_254A5EEA8, *((unint64_t *)&xmmword_254A5EEA8 + 1));
  }
  else
  {
    *(_OWORD *)__dst = xmmword_254A5EEA8;
    __dst[2] = unk_254A5EEB8;
  }
}

void sub_20EC77B50(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5D8C8);
  _Unwind_Resume(a1);
}

void sub_20EC77B68(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5D8C0);
  _Unwind_Resume(a1);
}

void sub_20EC77B80(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5D8B8);
  _Unwind_Resume(a1);
}

void sub_20EC77B98()
{
  unsigned __int8 v0;
  unsigned __int8 v1;

  v0 = atomic_load((unsigned __int8 *)&qword_254A5D8A8);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A5D8A8))
  {
    sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::vio::data_verification::DataVerificationStatus]", qword_254A5EE48);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254A5EE48, &dword_20E81F000);
    __cxa_guard_release(&qword_254A5D8A8);
  }
  v1 = atomic_load((unsigned __int8 *)&qword_254A5D8B0);
  if ((v1 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_254A5D8B0))
    {
      sub_21023CD84((uint64_t)qword_254A5EE48, (uint64_t)&xmmword_254A5EE60);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A5EE60, &dword_20E81F000);
      __cxa_guard_release(&qword_254A5D8B0);
    }
  }
}

void sub_20EC77C70(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5D8B0);
  _Unwind_Resume(a1);
}

void sub_20EC77C88(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5D8A8);
  _Unwind_Resume(a1);
}

void sub_20EC77CA0()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_254A5D8D0);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A5D8D0))
  {
    sub_20EC77D5C();
    if (byte_254A5EF07 < 0)
    {
      sub_20E860C04(&xmmword_254A5EEC0, (void *)xmmword_254A5EEF0, *((unint64_t *)&xmmword_254A5EEF0 + 1));
    }
    else
    {
      xmmword_254A5EEC0 = xmmword_254A5EEF0;
      unk_254A5EED0 = unk_254A5EF00;
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A5EEC0, &dword_20E81F000);
    __cxa_guard_release(&qword_254A5D8D0);
  }
}

void sub_20EC77D44(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5D8D0);
  _Unwind_Resume(a1);
}

void sub_20EC77D5C()
{
  unsigned __int8 v0;
  unsigned __int8 v1;

  v0 = atomic_load((unsigned __int8 *)&qword_254A5D8D8);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A5D8D8))
  {
    sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::vio::data_verification::DataVerificationStatus (cv3d::vio::slam_engine_node_group::DataVerificationResult)]", qword_254A5EED8);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254A5EED8, &dword_20E81F000);
    __cxa_guard_release(&qword_254A5D8D8);
  }
  v1 = atomic_load((unsigned __int8 *)&qword_254A5D8E0);
  if ((v1 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_254A5D8E0))
    {
      sub_21023CD84((uint64_t)qword_254A5EED8, (uint64_t)&xmmword_254A5EEF0);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A5EEF0, &dword_20E81F000);
      __cxa_guard_release(&qword_254A5D8E0);
    }
  }
}

void sub_20EC77E34(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5D8E0);
  _Unwind_Resume(a1);
}

void sub_20EC77E4C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5D8D8);
  _Unwind_Resume(a1);
}

void sub_20EC77E64()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_254A5D8E8);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A5D8E8))
  {
    sub_20EC77F20();
    if (byte_254A5EF4F < 0)
    {
      sub_20E860C04(&xmmword_254A5EF08, (void *)xmmword_254A5EF38, *((unint64_t *)&xmmword_254A5EF38 + 1));
    }
    else
    {
      xmmword_254A5EF08 = xmmword_254A5EF38;
      unk_254A5EF18 = unk_254A5EF48;
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A5EF08, &dword_20E81F000);
    __cxa_guard_release(&qword_254A5D8E8);
  }
}

void sub_20EC77F08(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5D8E8);
  _Unwind_Resume(a1);
}

void sub_20EC77F20()
{
  unsigned __int8 v0;
  unsigned __int8 v1;

  v0 = atomic_load((unsigned __int8 *)&qword_254A5D8F0);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A5D8F0))
  {
    sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::concurrency::OptionalReturn<std::shared_ptr<const cv3d::vio::mapping_io::SubmapSaveBundle>> (cv3d::vio::slam_engine_node_group::DataVerificationResult)]", qword_254A5EF20);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254A5EF20, &dword_20E81F000);
    __cxa_guard_release(&qword_254A5D8F0);
  }
  v1 = atomic_load((unsigned __int8 *)&qword_254A5D8F8);
  if ((v1 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_254A5D8F8))
    {
      sub_21023CD84((uint64_t)qword_254A5EF20, (uint64_t)&xmmword_254A5EF38);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A5EF38, &dword_20E81F000);
      __cxa_guard_release(&qword_254A5D8F8);
    }
  }
}

void sub_20EC77FF8(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5D8F8);
  _Unwind_Resume(a1);
}

void sub_20EC78010(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5D8F0);
  _Unwind_Resume(a1);
}

_QWORD *sub_20EC78028(uint64_t a1, _QWORD *a2, uint64_t a3, __int16 a4, uint64_t a5)
{
  uint64_t v10;
  unsigned __int8 v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  __int128 v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *p_shared_owners;
  unint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  std::__shared_weak_count *v43;
  unint64_t v44;
  unint64_t *p_shared_weak_owners;
  unint64_t v46;
  unint64_t v47;
  unint64_t *v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t *v51;
  unint64_t v52;
  _QWORD *v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t *v56;
  unint64_t v57;
  uint64_t v58;
  unint64_t v59;
  unint64_t *v60;
  unint64_t v61;
  uint64_t v62;
  unint64_t *v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  std::__shared_weak_count *v69;
  unint64_t *v70;
  unint64_t v71;
  uint64_t v72;
  _QWORD *v73;
  std::__shared_weak_count *v74;
  unint64_t *v75;
  std::__shared_weak_count *v76;
  unint64_t v77;
  unint64_t *v78;
  unint64_t v79;
  unint64_t v80;
  unint64_t *v81;
  unint64_t v82;
  unint64_t v83;
  unint64_t *v84;
  unint64_t v85;
  _QWORD *v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t *v89;
  unint64_t v90;
  uint64_t v91;
  unint64_t v92;
  unint64_t *v93;
  unint64_t v94;
  uint64_t v95;
  unint64_t *v96;
  unint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  unint64_t v101;
  char *v102;
  std::__shared_weak_count *v103;
  unint64_t *v104;
  _QWORD *v105;
  unint64_t v106;
  uint64_t v107;
  _QWORD *v108;
  std::__shared_weak_count *v109;
  unint64_t *v110;
  std::__shared_weak_count *v111;
  unint64_t v112;
  unint64_t *v113;
  unint64_t v114;
  unint64_t v115;
  unint64_t *v116;
  unint64_t v117;
  unint64_t v118;
  unint64_t *v119;
  unint64_t v120;
  _QWORD *v121;
  uint64_t v122;
  uint64_t v123;
  unint64_t *v124;
  unint64_t v125;
  uint64_t v126;
  unint64_t v127;
  unint64_t *v128;
  unint64_t v129;
  uint64_t v130;
  unint64_t *v131;
  unint64_t v132;
  uint64_t v133;
  unint64_t v134;
  uint64_t v135;
  _QWORD *v136;
  std::__shared_weak_count *v137;
  unint64_t *v138;
  std::__shared_weak_count *v139;
  unint64_t v140;
  unint64_t *v141;
  unint64_t v142;
  unint64_t v143;
  unint64_t *v144;
  unint64_t v145;
  unint64_t v146;
  unint64_t *v147;
  unint64_t v148;
  _QWORD *v149;
  uint64_t v150;
  uint64_t v151;
  unint64_t *v152;
  unint64_t v153;
  uint64_t v154;
  unint64_t v155;
  uint64_t *v156;
  unint64_t *v157;
  unint64_t v158;
  uint64_t v159;
  unint64_t *v160;
  unint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  __int128 v165;
  __int128 v166;
  __int128 v167;
  __int128 v168;
  uint64_t v169;
  unint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  _QWORD *v181;
  _QWORD *v182;
  _QWORD *v183;
  _QWORD *v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  _QWORD *v188;
  _QWORD *v189;
  _QWORD *v190;
  _QWORD *v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  _QWORD *v195;
  _QWORD *v196;
  _QWORD *v197;
  _QWORD *v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  _QWORD *v202;
  _QWORD *v203;
  _QWORD *v204;
  _QWORD *v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  _QWORD *v209;
  _QWORD *v210;
  _QWORD *v211;
  _QWORD *v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  _QWORD *v216;
  _QWORD *v217;
  _QWORD *v218;
  _QWORD *v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  _QWORD *v232;
  _QWORD *v233;
  _QWORD *v234;
  _QWORD *v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  _QWORD *v239;
  _QWORD *v240;
  _QWORD *v241;
  _QWORD *v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  _QWORD *v246;
  _QWORD *v247;
  _QWORD *v248;
  _QWORD *v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  _QWORD *v253;
  _QWORD *v254;
  _QWORD *v255;
  _QWORD *v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  _QWORD *v260;
  _QWORD *v261;
  _QWORD *v262;
  _QWORD *v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  _QWORD *v267;
  _QWORD *v268;
  _QWORD *v269;
  _QWORD *v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  char *v310;
  uint64_t v311;
  char *v312;
  uint64_t v313;
  char *v314;
  char *v315;
  uint64_t v316;
  char *v317;
  uint64_t v318;
  char *v319;
  uint64_t v320;
  char *v321;
  uint64_t v322;
  char *v323;
  uint64_t v324;
  char *v325;
  uint64_t v326;
  char *v327;
  uint64_t v328;
  char *v329;
  std::string *__dst;
  std::string *v332;
  uint64_t *v333;
  std::__shared_weak_count *v334;
  _QWORD *v335;
  _BYTE v336[7];
  _BYTE v337[32];
  _BYTE v338[24];
  __int128 v339;
  __int128 v340;
  uint64_t (**v341)();
  __int128 v342;
  uint64_t v343;
  uint64_t (**v344)();
  __int128 v345;
  uint64_t (**v346)();
  __int128 v347;
  uint64_t v348;
  __int16 v349;
  uint64_t v350;
  __int16 v351;
  _QWORD v352[2];
  __int128 v353;
  __int128 v354;
  __int128 v355;
  _QWORD v356[2];
  _QWORD v357[7];
  __int128 v358;
  __int128 v359;
  uint64_t (**v360)();
  __int128 v361;
  uint64_t v362;
  uint64_t (**v363)();
  __int128 v364;
  uint64_t (**v365)();
  __int128 v366;
  uint64_t v367;

  v367 = *MEMORY[0x24BDAC8D0];
  v10 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a2 + 280))(*a2) + 40;
  v11 = atomic_load((unsigned __int8 *)&qword_254A6DE08);
  if ((v11 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE08))
  {
    __cxa_atexit((void (*)(void *))nullsub_1015, &off_254A5A4B8, &dword_20E81F000);
    __cxa_guard_release(&qword_254A6DE08);
  }
  *(_QWORD *)a1 = &off_24C9EB158;
  v12 = (char *)operator new();
  sub_20EE2DD88(v12, a5, v10, (uint64_t)&off_254A5A4B8);
  *(_QWORD *)(a1 + 8) = v12;
  *(_QWORD *)(a1 + 16) = sub_20EE45298;
  v13 = *a2;
  v14 = a2[1];
  *a2 = 0;
  a2[1] = 0;
  v335 = (_QWORD *)a1;
  sub_210218050("SlamEngine", 0xAuLL, a3, 0, v357);
  v355 = *(_OWORD *)v357;
  *(_OWORD *)v357 = 0uLL;
  v15 = (char *)operator new(0x6F0uLL);
  *((_QWORD *)v15 + 1) = 0;
  *((_QWORD *)v15 + 2) = 0;
  *(_QWORD *)v15 = &off_24C9D0FF0;
  *(_QWORD *)v337 = v13;
  *(_QWORD *)&v337[8] = v14;
  sub_20EC417B8((uint64_t)(v15 + 24), (uint64_t)v337, a4);
  v16 = *(std::__shared_weak_count **)&v337[8];
  if (*(_QWORD *)&v337[8])
  {
    v17 = (unint64_t *)(*(_QWORD *)&v337[8] + 8);
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  *(_QWORD *)&v354 = v15 + 24;
  *((_QWORD *)&v354 + 1) = v15;
  v353 = 0uLL;
  *(_QWORD *)(a1 + 24) = &off_24C9D1040;
  if (v15[1727] < 0)
  {
    sub_20E860C04((_BYTE *)(a1 + 32), *((void **)v15 + 213), *((_QWORD *)v15 + 214));
  }
  else
  {
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(v15 + 1704);
    *(_QWORD *)(a1 + 48) = *((_QWORD *)v15 + 215);
  }
  if (v15[1751] < 0)
  {
    sub_20E860C04((_BYTE *)(a1 + 56), *((void **)v15 + 216), *((_QWORD *)v15 + 217));
  }
  else
  {
    *(_OWORD *)(a1 + 56) = *((_OWORD *)v15 + 108);
    *(_QWORD *)(a1 + 72) = *((_QWORD *)v15 + 218);
  }
  v19 = v355;
  *(_OWORD *)(a1 + 80) = v355;
  v355 = 0uLL;
  *(_OWORD *)v337 = v19;
  if (*((_QWORD *)&v19 + 1))
  {
    v20 = (unint64_t *)(*((_QWORD *)&v19 + 1) + 8);
    do
      v21 = __ldxr(v20);
    while (__stxr(v21 + 1, v20));
  }
  sub_20EC7B49C();
  if (*((_QWORD *)&v19 + 1))
  {
    v22 = (unint64_t *)(*((_QWORD *)&v19 + 1) + 8);
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v19 + 1) + 16))(*((_QWORD *)&v19 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v19 + 1));
    }
  }
  v24 = (std::__shared_weak_count *)*((_QWORD *)&v354 + 1);
  if (*((_QWORD *)&v354 + 1))
  {
    v25 = (unint64_t *)(*((_QWORD *)&v354 + 1) + 8);
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  v27 = (std::__shared_weak_count *)*((_QWORD *)&v353 + 1);
  if (*((_QWORD *)&v353 + 1))
  {
    v28 = (unint64_t *)(*((_QWORD *)&v353 + 1) + 8);
    do
      v29 = __ldaxr(v28);
    while (__stlxr(v29 - 1, v28));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
  v30 = (std::__shared_weak_count *)*((_QWORD *)&v355 + 1);
  if (*((_QWORD *)&v355 + 1))
  {
    v31 = (unint64_t *)(*((_QWORD *)&v355 + 1) + 8);
    do
      v32 = __ldaxr(v31);
    while (__stlxr(v32 - 1, v31));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
    }
  }
  v33 = (std::__shared_weak_count *)v357[1];
  if (v357[1])
  {
    v34 = (unint64_t *)(v357[1] + 8);
    do
      v35 = __ldaxr(v34);
    while (__stlxr(v35 - 1, v34));
    if (!v35)
    {
      ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
      std::__shared_weak_count::__release_weak(v33);
    }
  }
  *(_QWORD *)(a1 + 104) = &off_24C9DEB20;
  strcpy((char *)(a1 + 112), "OutputFwd");
  *(_QWORD *)(a1 + 122) = v352[0];
  *(_QWORD *)(a1 + 127) = *(_QWORD *)((char *)v352 + 5);
  *(_BYTE *)(a1 + 135) = 9;
  v352[0] = 0;
  *(_QWORD *)((char *)v352 + 5) = 0;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_QWORD *)(a1 + 168) = 0;
  v337[23] = 7;
  strcpy(v337, "channel");
  sub_20ED15CAC((uint64_t *)(a1 + 176), (uint64_t)v337);
  *(_QWORD *)(a1 + 184) = &off_24C9DFEA8;
  strcpy((char *)(a1 + 192), "OutputErrFwd");
  *(_QWORD *)(a1 + 205) = v350;
  *(_WORD *)(a1 + 213) = v351;
  *(_BYTE *)(a1 + 215) = 12;
  v350 = 0;
  v351 = 0;
  *(_OWORD *)(a1 + 216) = 0u;
  v332 = (std::string *)(a1 + 216);
  *(_OWORD *)(a1 + 232) = 0u;
  *(_QWORD *)(a1 + 248) = 0;
  v36 = (std::__shared_weak_count *)operator new(0x58uLL);
  v36->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v36->__shared_owners_;
  v36->__shared_weak_owners_ = 0;
  v36->__vftable = (std::__shared_weak_count_vtbl *)&unk_24C9B6A90;
  MEMORY[0x212BC5E10](&v36[1]);
  do
    v38 = __ldxr(p_shared_owners);
  while (__stxr(v38 + 1, p_shared_owners));
  v39 = operator new();
  *(_BYTE *)(v39 + 8) = 1;
  *(_QWORD *)(v39 + 48) = 0;
  *(_QWORD *)(v39 + 32) = 0;
  *(_QWORD *)(v39 + 40) = 0;
  *(_QWORD *)v39 = &off_24C9DFF40;
  *(_QWORD *)(v39 + 16) = &unk_24C9DFFB8;
  *(_QWORD *)(v39 + 24) = &unk_24C9DFFF8;
  *(_QWORD *)(v39 + 56) = 0;
  *(_QWORD *)(v39 + 64) = 0;
  *(_QWORD *)(v39 + 72) = v36 + 1;
  *(_QWORD *)(v39 + 80) = v36;
  v40 = (_QWORD *)operator new();
  *v40 = &off_24C9E00E0;
  *(_QWORD *)(v39 + 88) = v40;
  *(_QWORD *)(v39 + 96) = v39 + 96;
  *(_QWORD *)(v39 + 104) = v39 + 96;
  *(_QWORD *)(v39 + 112) = 0;
  *(_QWORD *)(v39 + 120) = v39 + 120;
  *(_QWORD *)(v39 + 128) = v39 + 120;
  *(_QWORD *)(v39 + 136) = 0;
  v41 = (std::__shared_weak_count *)operator new();
  v41->__shared_owners_ = 0;
  v42 = (unint64_t *)&v41->__shared_owners_;
  v41->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9E0130;
  v41->__shared_weak_owners_ = 0;
  v41[1].__vftable = (std::__shared_weak_count_vtbl *)v39;
  v43 = *(std::__shared_weak_count **)(v39 + 40);
  if (v43)
  {
    if (v43->__shared_owners_ != -1)
      goto LABEL_56;
    do
      v44 = __ldxr(v42);
    while (__stxr(v44 + 1, v42));
    p_shared_weak_owners = (unint64_t *)&v41->__shared_weak_owners_;
    do
      v46 = __ldxr(p_shared_weak_owners);
    while (__stxr(v46 + 1, p_shared_weak_owners));
    *(_QWORD *)(v39 + 32) = v39;
    *(_QWORD *)(v39 + 40) = v41;
    std::__shared_weak_count::__release_weak(v43);
  }
  else
  {
    do
      v47 = __ldxr(v42);
    while (__stxr(v47 + 1, v42));
    v48 = (unint64_t *)&v41->__shared_weak_owners_;
    do
      v49 = __ldxr(v48);
    while (__stxr(v49 + 1, v48));
    *(_QWORD *)(v39 + 32) = v39;
    *(_QWORD *)(v39 + 40) = v41;
  }
  do
    v50 = __ldaxr(v42);
  while (__stlxr(v50 - 1, v42));
  if (!v50)
  {
    ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
    std::__shared_weak_count::__release_weak(v41);
  }
LABEL_56:
  __dst = (std::string *)(a1 + 136);
  v333 = (uint64_t *)(a1 + 176);
  *(_QWORD *)v337 = &off_24C9DFED8;
  strcpy(&v337[8], "channel");
  *(_QWORD *)&v337[16] = v357[0];
  *(_QWORD *)&v337[23] = *(_QWORD *)((char *)v357 + 7);
  v337[31] = 7;
  v357[0] = 0;
  *(_QWORD *)((char *)v357 + 7) = 0;
  *(_QWORD *)v338 = 0x7974706D45;
  *(_QWORD *)&v338[8] = v355;
  *(_QWORD *)&v338[15] = *(_QWORD *)((char *)&v355 + 7);
  v338[23] = 5;
  *(_QWORD *)&v355 = 0;
  *(_QWORD *)((char *)&v355 + 7) = 0;
  v339 = 0uLL;
  v51 = (unint64_t *)&v41->__shared_weak_owners_;
  *(_QWORD *)&v340 = v39;
  *((_QWORD *)&v340 + 1) = v41;
  do
    v52 = __ldxr(v51);
  while (__stxr(v52 + 1, v51));
  v341 = &off_24C9CC500;
  v53 = (_QWORD *)operator new();
  *v53 = &off_24C9CC7A8;
  v53[1] = v39;
  v53[2] = v41;
  *(_QWORD *)&v342 = v53;
  v55 = *((_QWORD *)&v340 + 1);
  v54 = v340;
  if (!*((_QWORD *)&v340 + 1))
  {
    *((_QWORD *)&v342 + 1) = v340;
    v343 = 0;
    if ((_QWORD)v340)
      v59 = v340 + 16;
    else
      v59 = 0;
    goto LABEL_75;
  }
  v56 = (unint64_t *)(*((_QWORD *)&v340 + 1) + 16);
  do
    v57 = __ldxr(v56);
  while (__stxr(v57 + 1, v56));
  v58 = *((_QWORD *)&v340 + 1);
  *((_QWORD *)&v342 + 1) = v54;
  v343 = v55;
  if ((_QWORD)v340)
    v59 = v340 + 16;
  else
    v59 = 0;
  if (!*((_QWORD *)&v340 + 1))
  {
    v54 = v340;
LABEL_75:
    v62 = 0;
    v344 = &off_24C9DFF08;
    v345 = v59;
    goto LABEL_76;
  }
  v60 = (unint64_t *)(*((_QWORD *)&v340 + 1) + 16);
  do
    v61 = __ldxr(v60);
  while (__stxr(v61 + 1, v60));
  v62 = *((_QWORD *)&v340 + 1);
  v54 = v340;
  v344 = &off_24C9DFF08;
  *(_QWORD *)&v345 = v59;
  *((_QWORD *)&v345 + 1) = v58;
  if (*((_QWORD *)&v340 + 1))
  {
    v63 = (unint64_t *)(*((_QWORD *)&v340 + 1) + 16);
    do
      v64 = __ldxr(v63);
    while (__stxr(v64 + 1, v63));
  }
LABEL_76:
  if (v54)
    v65 = v54 + 24;
  else
    v65 = 0;
  v346 = &off_24C9B2310;
  *(_QWORD *)&v347 = v65;
  *((_QWORD *)&v347 + 1) = v62;
  v66 = operator new();
  *(_QWORD *)v66 = &off_24C9DFED8;
  *(_OWORD *)(v66 + 8) = *(_OWORD *)&v337[8];
  *(_QWORD *)(v66 + 24) = *(_QWORD *)&v337[24];
  memset(&v337[8], 0, 24);
  *(_OWORD *)(v66 + 32) = *(_OWORD *)v338;
  *(_QWORD *)(v66 + 48) = *(_QWORD *)&v338[16];
  memset(v338, 0, sizeof(v338));
  *(_OWORD *)(v66 + 56) = v339;
  v339 = 0uLL;
  *(_OWORD *)(v66 + 72) = v340;
  v340 = 0uLL;
  *(_QWORD *)(v66 + 88) = &off_24C9CC500;
  *(_OWORD *)(v66 + 96) = v342;
  v67 = v343;
  *((_QWORD *)&v342 + 1) = 0;
  v343 = 0;
  *(_QWORD *)(v66 + 112) = v67;
  *(_QWORD *)(v66 + 120) = &off_24C9DFF08;
  *(_OWORD *)(v66 + 128) = v345;
  v345 = 0uLL;
  *(_QWORD *)&v342 = 0;
  *(_QWORD *)(v66 + 144) = &off_24C9B2310;
  *(_OWORD *)(v66 + 152) = v347;
  v347 = 0uLL;
  *(_QWORD *)(a1 + 256) = v66;
  sub_20ED22EA0((uint64_t)v337);
  do
    v68 = __ldaxr(p_shared_owners);
  while (__stlxr(v68 - 1, p_shared_owners));
  if (!v68)
  {
    ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
    std::__shared_weak_count::__release_weak(v36);
  }
  *(_QWORD *)(a1 + 264) = &off_24C9E0180;
  strcpy((char *)(a1 + 272), "Map Save Fwd");
  *(_QWORD *)(a1 + 285) = v348;
  *(_WORD *)(a1 + 293) = v349;
  *(_BYTE *)(a1 + 295) = 12;
  v348 = 0;
  v349 = 0;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_QWORD *)(a1 + 328) = 0;
  *(_OWORD *)(a1 + 312) = 0u;
  v69 = (std::__shared_weak_count *)operator new(0x58uLL);
  v69->__shared_owners_ = 0;
  v70 = (unint64_t *)&v69->__shared_owners_;
  v69->__shared_weak_owners_ = 0;
  v69->__vftable = (std::__shared_weak_count_vtbl *)&unk_24C9B6A90;
  MEMORY[0x212BC5E10](&v69[1]);
  do
    v71 = __ldxr(v70);
  while (__stxr(v71 + 1, v70));
  v72 = operator new();
  *(_BYTE *)(v72 + 8) = 1;
  *(_QWORD *)(v72 + 48) = 0;
  *(_QWORD *)(v72 + 32) = 0;
  *(_QWORD *)(v72 + 40) = 0;
  *(_QWORD *)v72 = &off_24C9E01E0;
  *(_QWORD *)(v72 + 16) = &unk_24C9E0258;
  *(_QWORD *)(v72 + 24) = &unk_24C9E0298;
  *(_QWORD *)(v72 + 56) = 0;
  *(_QWORD *)(v72 + 64) = 0;
  *(_QWORD *)(v72 + 72) = v69 + 1;
  *(_QWORD *)(v72 + 80) = v69;
  v73 = (_QWORD *)operator new();
  *v73 = &off_24C9E0370;
  *(_QWORD *)(v72 + 88) = v73;
  *(_QWORD *)(v72 + 96) = v72 + 96;
  *(_QWORD *)(v72 + 104) = v72 + 96;
  *(_QWORD *)(v72 + 112) = 0;
  *(_QWORD *)(v72 + 120) = v72 + 120;
  *(_QWORD *)(v72 + 128) = v72 + 120;
  *(_QWORD *)(v72 + 136) = 0;
  v74 = (std::__shared_weak_count *)operator new();
  v74->__shared_owners_ = 0;
  v75 = (unint64_t *)&v74->__shared_owners_;
  v74->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9E03C0;
  v74->__shared_weak_owners_ = 0;
  v74[1].__vftable = (std::__shared_weak_count_vtbl *)v72;
  v76 = *(std::__shared_weak_count **)(v72 + 40);
  if (v76)
  {
    if (v76->__shared_owners_ != -1)
      goto LABEL_98;
    do
      v77 = __ldxr(v75);
    while (__stxr(v77 + 1, v75));
    v78 = (unint64_t *)&v74->__shared_weak_owners_;
    do
      v79 = __ldxr(v78);
    while (__stxr(v79 + 1, v78));
    *(_QWORD *)(v72 + 32) = v72;
    *(_QWORD *)(v72 + 40) = v74;
    std::__shared_weak_count::__release_weak(v76);
  }
  else
  {
    do
      v80 = __ldxr(v75);
    while (__stxr(v80 + 1, v75));
    v81 = (unint64_t *)&v74->__shared_weak_owners_;
    do
      v82 = __ldxr(v81);
    while (__stxr(v82 + 1, v81));
    *(_QWORD *)(v72 + 32) = v72;
    *(_QWORD *)(v72 + 40) = v74;
  }
  do
    v83 = __ldaxr(v75);
  while (__stlxr(v83 - 1, v75));
  if (!v83)
  {
    ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
    std::__shared_weak_count::__release_weak(v74);
  }
LABEL_98:
  *(_QWORD *)v337 = &off_24C9E01B0;
  strcpy(&v337[8], "channel");
  *(_QWORD *)&v337[16] = v357[0];
  *(_QWORD *)&v337[23] = *(_QWORD *)((char *)v357 + 7);
  v337[31] = 7;
  v357[0] = 0;
  *(_QWORD *)((char *)v357 + 7) = 0;
  *(_QWORD *)v338 = 0x7974706D45;
  *(_QWORD *)&v338[8] = v355;
  *(_QWORD *)&v338[15] = *(_QWORD *)((char *)&v355 + 7);
  v338[23] = 5;
  *(_QWORD *)&v355 = 0;
  *(_QWORD *)((char *)&v355 + 7) = 0;
  v339 = 0uLL;
  v84 = (unint64_t *)&v74->__shared_weak_owners_;
  *(_QWORD *)&v340 = v72;
  *((_QWORD *)&v340 + 1) = v74;
  do
    v85 = __ldxr(v84);
  while (__stxr(v85 + 1, v84));
  v341 = &off_24C9CC538;
  v86 = (_QWORD *)operator new();
  *v86 = &off_24C9D3DD0;
  v86[1] = v72;
  v86[2] = v74;
  *(_QWORD *)&v342 = v86;
  v88 = *((_QWORD *)&v340 + 1);
  v87 = v340;
  if (!*((_QWORD *)&v340 + 1))
  {
    *((_QWORD *)&v342 + 1) = v340;
    v343 = 0;
    if ((_QWORD)v340)
      v92 = v340 + 16;
    else
      v92 = 0;
    goto LABEL_117;
  }
  v89 = (unint64_t *)(*((_QWORD *)&v340 + 1) + 16);
  do
    v90 = __ldxr(v89);
  while (__stxr(v90 + 1, v89));
  v91 = *((_QWORD *)&v340 + 1);
  *((_QWORD *)&v342 + 1) = v87;
  v343 = v88;
  if ((_QWORD)v340)
    v92 = v340 + 16;
  else
    v92 = 0;
  if (!*((_QWORD *)&v340 + 1))
  {
    v87 = v340;
LABEL_117:
    v95 = 0;
    v344 = &off_24C9CC820;
    v345 = v92;
    goto LABEL_118;
  }
  v93 = (unint64_t *)(*((_QWORD *)&v340 + 1) + 16);
  do
    v94 = __ldxr(v93);
  while (__stxr(v94 + 1, v93));
  v95 = *((_QWORD *)&v340 + 1);
  v87 = v340;
  v344 = &off_24C9CC820;
  *(_QWORD *)&v345 = v92;
  *((_QWORD *)&v345 + 1) = v91;
  if (*((_QWORD *)&v340 + 1))
  {
    v96 = (unint64_t *)(*((_QWORD *)&v340 + 1) + 16);
    do
      v97 = __ldxr(v96);
    while (__stxr(v97 + 1, v96));
  }
LABEL_118:
  if (v87)
    v98 = v87 + 24;
  else
    v98 = 0;
  v346 = &off_24C9B2310;
  *(_QWORD *)&v347 = v98;
  *((_QWORD *)&v347 + 1) = v95;
  v99 = operator new();
  *(_QWORD *)v99 = &off_24C9E01B0;
  *(_OWORD *)(v99 + 8) = *(_OWORD *)&v337[8];
  *(_QWORD *)(v99 + 24) = *(_QWORD *)&v337[24];
  memset(&v337[8], 0, 24);
  *(_OWORD *)(v99 + 32) = *(_OWORD *)v338;
  *(_QWORD *)(v99 + 48) = *(_QWORD *)&v338[16];
  memset(v338, 0, sizeof(v338));
  *(_OWORD *)(v99 + 56) = v339;
  v339 = 0uLL;
  *(_OWORD *)(v99 + 72) = v340;
  v340 = 0uLL;
  *(_QWORD *)(v99 + 88) = &off_24C9CC538;
  *(_OWORD *)(v99 + 96) = v342;
  v100 = v343;
  *((_QWORD *)&v342 + 1) = 0;
  v343 = 0;
  *(_QWORD *)(v99 + 112) = v100;
  *(_QWORD *)(v99 + 120) = &off_24C9CC820;
  *(_OWORD *)(v99 + 128) = v345;
  v345 = 0uLL;
  *(_QWORD *)&v342 = 0;
  *(_QWORD *)(v99 + 144) = &off_24C9B2310;
  *(_OWORD *)(v99 + 152) = v347;
  v347 = 0uLL;
  *(_QWORD *)(a1 + 336) = v99;
  sub_20ED23FA0((uint64_t)v337);
  do
    v101 = __ldaxr(v70);
  while (__stlxr(v101 - 1, v70));
  if (!v101)
  {
    ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
    std::__shared_weak_count::__release_weak(v69);
  }
  v102 = (char *)operator new(0x20uLL);
  strcpy(v102, "Data Verification Result Fwd");
  *(_QWORD *)(a1 + 344) = &off_24C9E0410;
  *(_QWORD *)(a1 + 352) = v102;
  *(_QWORD *)(a1 + 360) = 28;
  *(_QWORD *)(a1 + 368) = 0x8000000000000020;
  *(_OWORD *)(a1 + 376) = 0u;
  *(_QWORD *)(a1 + 408) = 0;
  *(_OWORD *)(a1 + 392) = 0u;
  v103 = (std::__shared_weak_count *)operator new(0x58uLL);
  v103->__shared_owners_ = 0;
  v104 = (unint64_t *)&v103->__shared_owners_;
  v103->__shared_weak_owners_ = 0;
  v103->__vftable = (std::__shared_weak_count_vtbl *)&unk_24C9B6A90;
  v105 = &v103[1].__vftable;
  MEMORY[0x212BC5E10](&v103[1]);
  do
    v106 = __ldxr(v104);
  while (__stxr(v106 + 1, v104));
  v334 = v103;
  v107 = operator new();
  *(_BYTE *)(v107 + 8) = 1;
  *(_QWORD *)(v107 + 48) = 0;
  *(_QWORD *)(v107 + 32) = 0;
  *(_QWORD *)(v107 + 40) = 0;
  *(_QWORD *)v107 = &off_24C9E04D8;
  *(_QWORD *)(v107 + 16) = &unk_24C9E0550;
  *(_QWORD *)(v107 + 24) = &unk_24C9E0590;
  *(_QWORD *)(v107 + 56) = 0;
  *(_QWORD *)(v107 + 64) = 0;
  *(_QWORD *)(v107 + 72) = v105;
  *(_QWORD *)(v107 + 80) = v103;
  v108 = (_QWORD *)operator new();
  *v108 = &off_24C9E0688;
  *(_QWORD *)(v107 + 88) = v108;
  *(_QWORD *)(v107 + 96) = v107 + 96;
  *(_QWORD *)(v107 + 104) = v107 + 96;
  *(_QWORD *)(v107 + 112) = 0;
  *(_QWORD *)(v107 + 120) = v107 + 120;
  *(_QWORD *)(v107 + 128) = v107 + 120;
  *(_QWORD *)(v107 + 136) = 0;
  v109 = (std::__shared_weak_count *)operator new();
  v109->__shared_owners_ = 0;
  v110 = (unint64_t *)&v109->__shared_owners_;
  v109->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9E06D8;
  v109->__shared_weak_owners_ = 0;
  v109[1].__vftable = (std::__shared_weak_count_vtbl *)v107;
  v111 = *(std::__shared_weak_count **)(v107 + 40);
  if (v111)
  {
    if (v111->__shared_owners_ != -1)
      goto LABEL_140;
    do
      v112 = __ldxr(v110);
    while (__stxr(v112 + 1, v110));
    v113 = (unint64_t *)&v109->__shared_weak_owners_;
    do
      v114 = __ldxr(v113);
    while (__stxr(v114 + 1, v113));
    *(_QWORD *)(v107 + 32) = v107;
    *(_QWORD *)(v107 + 40) = v109;
    std::__shared_weak_count::__release_weak(v111);
  }
  else
  {
    do
      v115 = __ldxr(v110);
    while (__stxr(v115 + 1, v110));
    v116 = (unint64_t *)&v109->__shared_weak_owners_;
    do
      v117 = __ldxr(v116);
    while (__stxr(v117 + 1, v116));
    *(_QWORD *)(v107 + 32) = v107;
    *(_QWORD *)(v107 + 40) = v109;
  }
  do
    v118 = __ldaxr(v110);
  while (__stlxr(v118 - 1, v110));
  if (!v118)
  {
    ((void (*)(std::__shared_weak_count *))v109->__on_zero_shared)(v109);
    std::__shared_weak_count::__release_weak(v109);
  }
LABEL_140:
  *(_QWORD *)v337 = &off_24C9E0440;
  strcpy(&v337[8], "channel");
  *(_QWORD *)&v337[16] = v357[0];
  *(_QWORD *)&v337[23] = *(_QWORD *)((char *)v357 + 7);
  v337[31] = 7;
  v357[0] = 0;
  *(_QWORD *)((char *)v357 + 7) = 0;
  *(_QWORD *)v338 = 0x7974706D45;
  *(_QWORD *)&v338[8] = v355;
  *(_QWORD *)&v338[15] = *(_QWORD *)((char *)&v355 + 7);
  v338[23] = 5;
  *(_QWORD *)&v355 = 0;
  *(_QWORD *)((char *)&v355 + 7) = 0;
  v339 = 0uLL;
  v119 = (unint64_t *)&v109->__shared_weak_owners_;
  *(_QWORD *)&v340 = v107;
  *((_QWORD *)&v340 + 1) = v109;
  do
    v120 = __ldxr(v119);
  while (__stxr(v120 + 1, v119));
  v341 = &off_24C9D1448;
  v121 = (_QWORD *)operator new();
  *v121 = &off_24C9E0728;
  v121[1] = v107;
  v121[2] = v109;
  *(_QWORD *)&v342 = v121;
  v123 = *((_QWORD *)&v340 + 1);
  v122 = v340;
  if (!*((_QWORD *)&v340 + 1))
  {
    *((_QWORD *)&v342 + 1) = v340;
    v343 = 0;
    if ((_QWORD)v340)
      v127 = v340 + 16;
    else
      v127 = 0;
    goto LABEL_159;
  }
  v124 = (unint64_t *)(*((_QWORD *)&v340 + 1) + 16);
  do
    v125 = __ldxr(v124);
  while (__stxr(v125 + 1, v124));
  v126 = *((_QWORD *)&v340 + 1);
  *((_QWORD *)&v342 + 1) = v122;
  v343 = v123;
  if ((_QWORD)v340)
    v127 = v340 + 16;
  else
    v127 = 0;
  if (!*((_QWORD *)&v340 + 1))
  {
    v122 = v340;
LABEL_159:
    v130 = 0;
    v344 = &off_24C9E0470;
    v345 = v127;
    goto LABEL_160;
  }
  v128 = (unint64_t *)(*((_QWORD *)&v340 + 1) + 16);
  do
    v129 = __ldxr(v128);
  while (__stxr(v129 + 1, v128));
  v130 = *((_QWORD *)&v340 + 1);
  v122 = v340;
  v344 = &off_24C9E0470;
  *(_QWORD *)&v345 = v127;
  *((_QWORD *)&v345 + 1) = v126;
  if (*((_QWORD *)&v340 + 1))
  {
    v131 = (unint64_t *)(*((_QWORD *)&v340 + 1) + 16);
    do
      v132 = __ldxr(v131);
    while (__stxr(v132 + 1, v131));
  }
LABEL_160:
  v133 = v122 + 24;
  if (!v122)
    v133 = 0;
  v346 = &off_24C9B2310;
  *(_QWORD *)&v347 = v133;
  *((_QWORD *)&v347 + 1) = v130;
  DWORD2(v353) = *(_DWORD *)v336;
  *(_DWORD *)((char *)&v353 + 11) = *(_DWORD *)&v336[3];
  do
    v134 = __ldxr(v104);
  while (__stxr(v134 + 1, v104));
  *(_QWORD *)&v355 = v353;
  *(_QWORD *)((char *)&v355 + 7) = *(_QWORD *)((char *)&v353 + 7);
  *(_QWORD *)&v353 = 0;
  *(_QWORD *)((char *)&v353 + 7) = 0;
  *(_QWORD *)&v354 = v356[0];
  *(_QWORD *)((char *)&v354 + 7) = *(_QWORD *)((char *)v356 + 7);
  v356[0] = 0;
  *(_QWORD *)((char *)v356 + 7) = 0;
  v135 = operator new();
  *(_BYTE *)(v135 + 8) = 1;
  *(_QWORD *)(v135 + 48) = 0;
  *(_QWORD *)(v135 + 32) = 0;
  *(_QWORD *)(v135 + 40) = 0;
  *(_QWORD *)v135 = &off_24C9E07A0;
  *(_QWORD *)(v135 + 16) = &unk_24C9E0818;
  *(_QWORD *)(v135 + 24) = &unk_24C9E0858;
  *(_QWORD *)(v135 + 56) = 0;
  *(_QWORD *)(v135 + 64) = 0;
  *(_QWORD *)(v135 + 72) = v105;
  *(_QWORD *)(v135 + 80) = v334;
  v136 = (_QWORD *)operator new();
  *v136 = &off_24C9E0930;
  *(_QWORD *)(v135 + 88) = v136;
  *(_QWORD *)(v135 + 96) = v135 + 96;
  *(_QWORD *)(v135 + 104) = v135 + 96;
  *(_QWORD *)(v135 + 112) = 0;
  *(_QWORD *)(v135 + 120) = v135 + 120;
  *(_QWORD *)(v135 + 128) = v135 + 120;
  *(_QWORD *)(v135 + 136) = 0;
  v137 = (std::__shared_weak_count *)operator new();
  v137->__shared_owners_ = 0;
  v138 = (unint64_t *)&v137->__shared_owners_;
  v137->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9E0980;
  v137->__shared_weak_owners_ = 0;
  v137[1].__vftable = (std::__shared_weak_count_vtbl *)v135;
  v139 = *(std::__shared_weak_count **)(v135 + 40);
  if (v139)
  {
    if (v139->__shared_owners_ != -1)
      goto LABEL_177;
    do
      v140 = __ldxr(v138);
    while (__stxr(v140 + 1, v138));
    v141 = (unint64_t *)&v137->__shared_weak_owners_;
    do
      v142 = __ldxr(v141);
    while (__stxr(v142 + 1, v141));
    *(_QWORD *)(v135 + 32) = v135;
    *(_QWORD *)(v135 + 40) = v137;
    std::__shared_weak_count::__release_weak(v139);
  }
  else
  {
    do
      v143 = __ldxr(v138);
    while (__stxr(v143 + 1, v138));
    v144 = (unint64_t *)&v137->__shared_weak_owners_;
    do
      v145 = __ldxr(v144);
    while (__stxr(v145 + 1, v144));
    *(_QWORD *)(v135 + 32) = v135;
    *(_QWORD *)(v135 + 40) = v137;
  }
  do
    v146 = __ldaxr(v138);
  while (__stlxr(v146 - 1, v138));
  if (!v146)
  {
    ((void (*)(std::__shared_weak_count *))v137->__on_zero_shared)(v137);
    std::__shared_weak_count::__release_weak(v137);
  }
LABEL_177:
  v357[0] = &off_24C9E04A8;
  strcpy((char *)&v357[1], "channel");
  v357[2] = v355;
  *(_QWORD *)((char *)&v357[2] + 7) = *(_QWORD *)((char *)&v355 + 7);
  HIBYTE(v357[3]) = 7;
  *(_QWORD *)&v355 = 0;
  *(_QWORD *)((char *)&v355 + 7) = 0;
  v357[4] = 0x7974706D45;
  v357[5] = v354;
  *(_QWORD *)((char *)&v357[5] + 7) = *(_QWORD *)((char *)&v354 + 7);
  HIBYTE(v357[6]) = 5;
  *(_QWORD *)&v354 = 0;
  *(_QWORD *)((char *)&v354 + 7) = 0;
  v358 = 0uLL;
  v147 = (unint64_t *)&v137->__shared_weak_owners_;
  *(_QWORD *)&v359 = v135;
  *((_QWORD *)&v359 + 1) = v137;
  do
    v148 = __ldxr(v147);
  while (__stxr(v148 + 1, v147));
  v360 = &off_24C9D1448;
  v149 = (_QWORD *)operator new();
  *v149 = &off_24C9E0728;
  v149[1] = v135;
  v149[2] = v137;
  *(_QWORD *)&v361 = v149;
  v151 = *((_QWORD *)&v359 + 1);
  v150 = v359;
  if (!*((_QWORD *)&v359 + 1))
  {
    *((_QWORD *)&v361 + 1) = v359;
    v362 = 0;
    if ((_QWORD)v359)
      v155 = v359 + 16;
    else
      v155 = 0;
    v156 = (uint64_t *)(a1 + 96);
    goto LABEL_197;
  }
  v152 = (unint64_t *)(*((_QWORD *)&v359 + 1) + 16);
  do
    v153 = __ldxr(v152);
  while (__stxr(v153 + 1, v152));
  v154 = *((_QWORD *)&v359 + 1);
  *((_QWORD *)&v361 + 1) = v150;
  v362 = v151;
  if ((_QWORD)v359)
    v155 = v359 + 16;
  else
    v155 = 0;
  v156 = (uint64_t *)(a1 + 96);
  if (!*((_QWORD *)&v359 + 1))
  {
    v150 = v359;
LABEL_197:
    v159 = 0;
    v363 = &off_24C9D12B0;
    v364 = v155;
    goto LABEL_198;
  }
  v157 = (unint64_t *)(*((_QWORD *)&v359 + 1) + 16);
  do
    v158 = __ldxr(v157);
  while (__stxr(v158 + 1, v157));
  v159 = *((_QWORD *)&v359 + 1);
  v150 = v359;
  v363 = &off_24C9D12B0;
  *(_QWORD *)&v364 = v155;
  *((_QWORD *)&v364 + 1) = v154;
  if (*((_QWORD *)&v359 + 1))
  {
    v160 = (unint64_t *)(*((_QWORD *)&v359 + 1) + 16);
    do
      v161 = __ldxr(v160);
    while (__stxr(v161 + 1, v160));
  }
LABEL_198:
  if (v150)
    v162 = v150 + 24;
  else
    v162 = 0;
  v365 = &off_24C9B2310;
  *(_QWORD *)&v366 = v162;
  *((_QWORD *)&v366 + 1) = v159;
  v163 = operator new();
  *(_QWORD *)v163 = &off_24C9E0440;
  *(_OWORD *)(v163 + 8) = *(_OWORD *)&v337[8];
  *(_QWORD *)(v163 + 24) = *(_QWORD *)&v337[24];
  memset(&v337[8], 0, 24);
  *(_OWORD *)(v163 + 32) = *(_OWORD *)v338;
  *(_QWORD *)(v163 + 48) = *(_QWORD *)&v338[16];
  memset(v338, 0, sizeof(v338));
  *(_OWORD *)(v163 + 56) = v339;
  v339 = 0uLL;
  *(_OWORD *)(v163 + 72) = v340;
  v340 = 0uLL;
  *(_QWORD *)(v163 + 88) = &off_24C9D1448;
  *(_OWORD *)(v163 + 96) = v342;
  v164 = v343;
  *((_QWORD *)&v342 + 1) = 0;
  v343 = 0;
  *(_QWORD *)(v163 + 112) = v164;
  *(_QWORD *)(v163 + 120) = &off_24C9E0470;
  *(_OWORD *)(v163 + 128) = v345;
  v345 = 0uLL;
  *(_QWORD *)&v342 = 0;
  *(_QWORD *)(v163 + 144) = &off_24C9B2310;
  *(_OWORD *)(v163 + 152) = v347;
  v347 = 0uLL;
  *(_QWORD *)(v163 + 168) = &off_24C9E04A8;
  v165 = *(_OWORD *)&v357[1];
  *(_QWORD *)(v163 + 192) = v357[3];
  *(_OWORD *)(v163 + 176) = v165;
  memset(&v357[1], 0, 24);
  v166 = *(_OWORD *)&v357[4];
  *(_QWORD *)(v163 + 216) = v357[6];
  *(_OWORD *)(v163 + 200) = v166;
  memset(&v357[4], 0, 24);
  v167 = v358;
  v358 = 0uLL;
  v168 = v359;
  *(_OWORD *)(v163 + 224) = v167;
  *(_OWORD *)(v163 + 240) = v168;
  v359 = 0uLL;
  *(_QWORD *)(v163 + 256) = &off_24C9D1448;
  *(_OWORD *)(v163 + 264) = v361;
  v169 = v362;
  *((_QWORD *)&v361 + 1) = 0;
  v362 = 0;
  *(_QWORD *)(v163 + 280) = v169;
  *(_QWORD *)(v163 + 288) = &off_24C9D12B0;
  *(_OWORD *)(v163 + 296) = v364;
  *(_QWORD *)&v361 = 0;
  v364 = 0uLL;
  *(_QWORD *)(v163 + 312) = &off_24C9B2310;
  *(_OWORD *)(v163 + 320) = v366;
  v366 = 0uLL;
  v335[52] = v163;
  sub_20ED26464((uint64_t)v357);
  sub_20ED26648((uint64_t)v337);
  do
    v170 = __ldaxr(v104);
  while (__stlxr(v170 - 1, v104));
  if (!v170)
  {
    ((void (*)(std::__shared_weak_count *))v334->__on_zero_shared)(v334);
    std::__shared_weak_count::__release_weak(v334);
  }
  v171 = *v156;
  v172 = *v333;
  *(_QWORD *)v337 = &off_24C9D1110;
  (*(void (**)(_BYTE *__return_ptr))(**(_QWORD **)(v172 + 96) + 16))(&v337[8]);
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)(v171 + 120) + 16))(v171 + 120, v337);
  v173 = *(_QWORD *)&v337[8];
  *(_OWORD *)v337 = (unint64_t)&off_24C9D1110;
  if (v173)
    (*(void (**)(uint64_t))(*(_QWORD *)v173 + 8))(v173);
  v174 = *v156;
  v175 = *v333;
  *(_QWORD *)v337 = &off_24C9D1110;
  (*(void (**)(_BYTE *__return_ptr))(**(_QWORD **)(v175 + 96) + 16))(&v337[8]);
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)(v174 + 288) + 16))(v174 + 288, v337);
  v176 = *(_QWORD *)&v337[8];
  *(_OWORD *)v337 = (unint64_t)&off_24C9D1110;
  if (v176)
    (*(void (**)(uint64_t))(*(_QWORD *)v176 + 8))(v176);
  v177 = *v156;
  v178 = *v333;
  *(_QWORD *)v337 = &off_24C9D1110;
  (*(void (**)(_BYTE *__return_ptr))(**(_QWORD **)(v178 + 96) + 16))(&v337[8]);
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)(v177 + 456) + 16))(v177 + 456, v337);
  v179 = *(_QWORD *)&v337[8];
  *(_OWORD *)v337 = (unint64_t)&off_24C9D1110;
  if (v179)
    (*(void (**)(uint64_t))(*(_QWORD *)v179 + 8))(v179);
  v180 = v335[12];
  v181 = (_QWORD *)operator new();
  *v181 = &off_24C9E09D0;
  v181[1] = &off_24C9E0A38;
  v182 = v181 + 1;
  v181[2] = v335;
  v181[4] = v181 + 1;
  *(_QWORD *)v337 = &off_24C9D1110;
  v183 = (_QWORD *)operator new();
  *v183 = &off_24C9E09D0;
  v184 = v183 + 1;
  v185 = v181[4];
  if (!v185)
    goto LABEL_214;
  if ((_QWORD *)v185 != v182)
  {
    v185 = (*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)v185 + 16))(v185, v184);
LABEL_214:
    v183[4] = v185;
    goto LABEL_216;
  }
  v183[4] = v184;
  (*(void (**)(_QWORD *))(*v182 + 24))(v182);
LABEL_216:
  *(_QWORD *)&v337[8] = v183;
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)(v180 + 120) + 16))(v180 + 120, v337);
  v186 = *(_QWORD *)&v337[8];
  *(_OWORD *)v337 = (unint64_t)&off_24C9D1110;
  if (v186)
    (*(void (**)(uint64_t))(*(_QWORD *)v186 + 8))(v186);
  (*(void (**)(_QWORD *))(*v181 + 8))(v181);
  v187 = *v156;
  v188 = (_QWORD *)operator new();
  *v188 = &off_24C9E09D0;
  v188[1] = &off_24C9E0AC8;
  v189 = v188 + 1;
  v188[2] = v335;
  v188[4] = v188 + 1;
  *(_QWORD *)v337 = &off_24C9D1110;
  v190 = (_QWORD *)operator new();
  *v190 = &off_24C9E09D0;
  v191 = v190 + 1;
  v192 = v188[4];
  if (!v192)
    goto LABEL_221;
  if ((_QWORD *)v192 != v189)
  {
    v192 = (*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)v192 + 16))(v192, v191);
LABEL_221:
    v190[4] = v192;
    goto LABEL_223;
  }
  v190[4] = v191;
  (*(void (**)(_QWORD *))(*v189 + 24))(v189);
LABEL_223:
  *(_QWORD *)&v337[8] = v190;
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)(v187 + 288) + 16))(v187 + 288, v337);
  v193 = *(_QWORD *)&v337[8];
  *(_OWORD *)v337 = (unint64_t)&off_24C9D1110;
  if (v193)
    (*(void (**)(uint64_t))(*(_QWORD *)v193 + 8))(v193);
  (*(void (**)(_QWORD *))(*v188 + 8))(v188);
  v194 = *v156;
  v195 = (_QWORD *)operator new();
  *v195 = &off_24C9E09D0;
  v195[1] = &off_24C9E0B48;
  v196 = v195 + 1;
  v195[2] = v335;
  v195[4] = v195 + 1;
  *(_QWORD *)v337 = &off_24C9D1110;
  v197 = (_QWORD *)operator new();
  *v197 = &off_24C9E09D0;
  v198 = v197 + 1;
  v199 = v195[4];
  if (!v199)
    goto LABEL_228;
  if ((_QWORD *)v199 != v196)
  {
    v199 = (*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)v199 + 16))(v199, v198);
LABEL_228:
    v197[4] = v199;
    goto LABEL_230;
  }
  v197[4] = v198;
  (*(void (**)(_QWORD *))(*v196 + 24))(v196);
LABEL_230:
  *(_QWORD *)&v337[8] = v197;
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)(v194 + 456) + 16))(v194 + 456, v337);
  v200 = *(_QWORD *)&v337[8];
  *(_OWORD *)v337 = (unint64_t)&off_24C9D1110;
  if (v200)
    (*(void (**)(uint64_t))(*(_QWORD *)v200 + 8))(v200);
  (*(void (**)(_QWORD *))(*v195 + 8))(v195);
  v201 = *v156;
  v202 = (_QWORD *)operator new();
  *v202 = &off_24C9E09D0;
  v202[1] = &off_24C9E0BC8;
  v203 = v202 + 1;
  v202[2] = v335;
  v202[4] = v202 + 1;
  *(_QWORD *)v337 = &off_24C9D1110;
  v204 = (_QWORD *)operator new();
  *v204 = &off_24C9E09D0;
  v205 = v204 + 1;
  v206 = v202[4];
  if (!v206)
    goto LABEL_235;
  if ((_QWORD *)v206 != v203)
  {
    v206 = (*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)v206 + 16))(v206, v205);
LABEL_235:
    v204[4] = v206;
    goto LABEL_237;
  }
  v204[4] = v205;
  (*(void (**)(_QWORD *))(*v203 + 24))(v203);
LABEL_237:
  *(_QWORD *)&v337[8] = v204;
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)(v201 + 120) + 16))(v201 + 120, v337);
  v207 = *(_QWORD *)&v337[8];
  *(_OWORD *)v337 = (unint64_t)&off_24C9D1110;
  if (v207)
    (*(void (**)(uint64_t))(*(_QWORD *)v207 + 8))(v207);
  (*(void (**)(_QWORD *))(*v202 + 8))(v202);
  v208 = *v156;
  v209 = (_QWORD *)operator new();
  *v209 = &off_24C9E09D0;
  v209[1] = &off_24C9E0C48;
  v210 = v209 + 1;
  v209[2] = v335;
  v209[4] = v209 + 1;
  *(_QWORD *)v337 = &off_24C9D1110;
  v211 = (_QWORD *)operator new();
  *v211 = &off_24C9E09D0;
  v212 = v211 + 1;
  v213 = v209[4];
  if (!v213)
    goto LABEL_242;
  if ((_QWORD *)v213 != v210)
  {
    v213 = (*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)v213 + 16))(v213, v212);
LABEL_242:
    v211[4] = v213;
    goto LABEL_244;
  }
  v211[4] = v212;
  (*(void (**)(_QWORD *))(*v210 + 24))(v210);
LABEL_244:
  *(_QWORD *)&v337[8] = v211;
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)(v208 + 288) + 16))(v208 + 288, v337);
  v214 = *(_QWORD *)&v337[8];
  *(_OWORD *)v337 = (unint64_t)&off_24C9D1110;
  if (v214)
    (*(void (**)(uint64_t))(*(_QWORD *)v214 + 8))(v214);
  (*(void (**)(_QWORD *))(*v209 + 8))(v209);
  v215 = *v156;
  v216 = (_QWORD *)operator new();
  *v216 = &off_24C9E09D0;
  v216[1] = &off_24C9E0CC8;
  v217 = v216 + 1;
  v216[2] = v335;
  v216[4] = v216 + 1;
  *(_QWORD *)v337 = &off_24C9D1110;
  v218 = (_QWORD *)operator new();
  *v218 = &off_24C9E09D0;
  v219 = v218 + 1;
  v220 = v216[4];
  if (!v220)
    goto LABEL_249;
  if ((_QWORD *)v220 != v217)
  {
    v220 = (*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)v220 + 16))(v220, v219);
LABEL_249:
    v218[4] = v220;
    goto LABEL_251;
  }
  v218[4] = v219;
  (*(void (**)(_QWORD *))(*v217 + 24))(v217);
LABEL_251:
  *(_QWORD *)&v337[8] = v218;
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)(v215 + 456) + 16))(v215 + 456, v337);
  v221 = *(_QWORD *)&v337[8];
  *(_OWORD *)v337 = (unint64_t)&off_24C9D1110;
  if (v221)
    (*(void (**)(uint64_t))(*(_QWORD *)v221 + 8))(v221);
  (*(void (**)(_QWORD *))(*v216 + 8))(v216);
  v222 = *v156;
  v223 = *v333;
  *(_QWORD *)v337 = &off_24C9D1110;
  (*(void (**)(_BYTE *__return_ptr))(**(_QWORD **)(v223 + 768) + 16))(&v337[8]);
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)(v222 + 120) + 16))(v222 + 120, v337);
  v224 = *(_QWORD *)&v337[8];
  *(_OWORD *)v337 = (unint64_t)&off_24C9D1110;
  if (v224)
    (*(void (**)(uint64_t))(*(_QWORD *)v224 + 8))(v224);
  v225 = *v156;
  v226 = *v333;
  *(_QWORD *)v337 = &off_24C9D1110;
  (*(void (**)(_BYTE *__return_ptr))(**(_QWORD **)(v226 + 768) + 16))(&v337[8]);
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)(v225 + 288) + 16))(v225 + 288, v337);
  v227 = *(_QWORD *)&v337[8];
  *(_OWORD *)v337 = (unint64_t)&off_24C9D1110;
  if (v227)
    (*(void (**)(uint64_t))(*(_QWORD *)v227 + 8))(v227);
  v228 = *v156;
  v229 = *v333;
  *(_QWORD *)v337 = &off_24C9D1110;
  (*(void (**)(_BYTE *__return_ptr))(**(_QWORD **)(v229 + 768) + 16))(&v337[8]);
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)(v228 + 456) + 16))(v228 + 456, v337);
  v230 = *(_QWORD *)&v337[8];
  *(_OWORD *)v337 = (unint64_t)&off_24C9D1110;
  if (v230)
    (*(void (**)(uint64_t))(*(_QWORD *)v230 + 8))(v230);
  v231 = *v156;
  v232 = (_QWORD *)operator new();
  *v232 = &off_24C9E09D0;
  v232[1] = &off_24C9E0D48;
  v233 = v232 + 1;
  v232[2] = v335;
  v232[4] = v232 + 1;
  *(_QWORD *)v337 = &off_24C9D1110;
  v234 = (_QWORD *)operator new();
  *v234 = &off_24C9E09D0;
  v235 = v234 + 1;
  v236 = v232[4];
  if (!v236)
    goto LABEL_262;
  if ((_QWORD *)v236 != v233)
  {
    v236 = (*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)v236 + 16))(v236, v235);
LABEL_262:
    v234[4] = v236;
    goto LABEL_264;
  }
  v234[4] = v235;
  (*(void (**)(_QWORD *))(*v233 + 24))(v233);
LABEL_264:
  *(_QWORD *)&v337[8] = v234;
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)(v231 + 120) + 16))(v231 + 120, v337);
  v237 = *(_QWORD *)&v337[8];
  *(_OWORD *)v337 = (unint64_t)&off_24C9D1110;
  if (v237)
    (*(void (**)(uint64_t))(*(_QWORD *)v237 + 8))(v237);
  (*(void (**)(_QWORD *))(*v232 + 8))(v232);
  v238 = *v156;
  v239 = (_QWORD *)operator new();
  *v239 = &off_24C9E09D0;
  v239[1] = &off_24C9E0DC8;
  v240 = v239 + 1;
  v239[2] = v335;
  v239[4] = v239 + 1;
  *(_QWORD *)v337 = &off_24C9D1110;
  v241 = (_QWORD *)operator new();
  *v241 = &off_24C9E09D0;
  v242 = v241 + 1;
  v243 = v239[4];
  if (!v243)
    goto LABEL_269;
  if ((_QWORD *)v243 != v240)
  {
    v243 = (*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)v243 + 16))(v243, v242);
LABEL_269:
    v241[4] = v243;
    goto LABEL_271;
  }
  v241[4] = v242;
  (*(void (**)(_QWORD *))(*v240 + 24))(v240);
LABEL_271:
  *(_QWORD *)&v337[8] = v241;
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)(v238 + 288) + 16))(v238 + 288, v337);
  v244 = *(_QWORD *)&v337[8];
  *(_OWORD *)v337 = (unint64_t)&off_24C9D1110;
  if (v244)
    (*(void (**)(uint64_t))(*(_QWORD *)v244 + 8))(v244);
  (*(void (**)(_QWORD *))(*v239 + 8))(v239);
  v245 = *v156;
  v246 = (_QWORD *)operator new();
  *v246 = &off_24C9E09D0;
  v246[1] = &off_24C9E0E48;
  v247 = v246 + 1;
  v246[2] = v335;
  v246[4] = v246 + 1;
  *(_QWORD *)v337 = &off_24C9D1110;
  v248 = (_QWORD *)operator new();
  *v248 = &off_24C9E09D0;
  v249 = v248 + 1;
  v250 = v246[4];
  if (!v250)
    goto LABEL_276;
  if ((_QWORD *)v250 != v247)
  {
    v250 = (*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)v250 + 16))(v250, v249);
LABEL_276:
    v248[4] = v250;
    goto LABEL_278;
  }
  v248[4] = v249;
  (*(void (**)(_QWORD *))(*v247 + 24))(v247);
LABEL_278:
  *(_QWORD *)&v337[8] = v248;
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)(v245 + 456) + 16))(v245 + 456, v337);
  v251 = *(_QWORD *)&v337[8];
  *(_OWORD *)v337 = (unint64_t)&off_24C9D1110;
  if (v251)
    (*(void (**)(uint64_t))(*(_QWORD *)v251 + 8))(v251);
  (*(void (**)(_QWORD *))(*v246 + 8))(v246);
  v252 = *v156;
  v253 = (_QWORD *)operator new();
  *v253 = &off_24C9E09D0;
  v253[1] = &off_24C9E0EC8;
  v254 = v253 + 1;
  v253[2] = v335;
  v253[4] = v253 + 1;
  *(_QWORD *)v337 = &off_24C9D1110;
  v255 = (_QWORD *)operator new();
  *v255 = &off_24C9E09D0;
  v256 = v255 + 1;
  v257 = v253[4];
  if (!v257)
    goto LABEL_283;
  if ((_QWORD *)v257 != v254)
  {
    v257 = (*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)v257 + 16))(v257, v256);
LABEL_283:
    v255[4] = v257;
    goto LABEL_285;
  }
  v255[4] = v256;
  (*(void (**)(_QWORD *))(*v254 + 24))(v254);
LABEL_285:
  *(_QWORD *)&v337[8] = v255;
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)(v252 + 120) + 16))(v252 + 120, v337);
  v258 = *(_QWORD *)&v337[8];
  *(_OWORD *)v337 = (unint64_t)&off_24C9D1110;
  if (v258)
    (*(void (**)(uint64_t))(*(_QWORD *)v258 + 8))(v258);
  (*(void (**)(_QWORD *))(*v253 + 8))(v253);
  v259 = *v156;
  v260 = (_QWORD *)operator new();
  *v260 = &off_24C9E09D0;
  v260[1] = &off_24C9E0F48;
  v261 = v260 + 1;
  v260[2] = v335;
  v260[4] = v260 + 1;
  *(_QWORD *)v337 = &off_24C9D1110;
  v262 = (_QWORD *)operator new();
  *v262 = &off_24C9E09D0;
  v263 = v262 + 1;
  v264 = v260[4];
  if (!v264)
    goto LABEL_290;
  if ((_QWORD *)v264 != v261)
  {
    v264 = (*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)v264 + 16))(v264, v263);
LABEL_290:
    v262[4] = v264;
    goto LABEL_292;
  }
  v262[4] = v263;
  (*(void (**)(_QWORD *))(*v261 + 24))(v261);
LABEL_292:
  *(_QWORD *)&v337[8] = v262;
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)(v259 + 288) + 16))(v259 + 288, v337);
  v265 = *(_QWORD *)&v337[8];
  *(_OWORD *)v337 = (unint64_t)&off_24C9D1110;
  if (v265)
    (*(void (**)(uint64_t))(*(_QWORD *)v265 + 8))(v265);
  (*(void (**)(_QWORD *))(*v260 + 8))(v260);
  v266 = *v156;
  v267 = (_QWORD *)operator new();
  *v267 = &off_24C9E09D0;
  v267[1] = &off_24C9E0FC8;
  v268 = v267 + 1;
  v267[2] = v335;
  v267[4] = v267 + 1;
  *(_QWORD *)v337 = &off_24C9D1110;
  v269 = (_QWORD *)operator new();
  *v269 = &off_24C9E09D0;
  v270 = v269 + 1;
  v271 = v267[4];
  if (!v271)
    goto LABEL_297;
  if ((_QWORD *)v271 != v268)
  {
    v271 = (*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)v271 + 16))(v271, v270);
LABEL_297:
    v269[4] = v271;
    goto LABEL_299;
  }
  v269[4] = v270;
  (*(void (**)(_QWORD *))(*v268 + 24))(v268);
LABEL_299:
  *(_QWORD *)&v337[8] = v269;
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)(v266 + 456) + 16))(v266 + 456, v337);
  v272 = *(_QWORD *)&v337[8];
  *(_OWORD *)v337 = (unint64_t)&off_24C9D1110;
  if (v272)
    (*(void (**)(uint64_t))(*(_QWORD *)v272 + 8))(v272);
  (*(void (**)(_QWORD *))(*v267 + 8))(v267);
  v273 = v335[12];
  v274 = v335[32];
  *(_QWORD *)v337 = &off_24C9CC500;
  (*(void (**)(_BYTE *__return_ptr))(**(_QWORD **)(v274 + 96) + 16))(&v337[8]);
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)(v273 + 144) + 16))(v273 + 144, v337);
  v275 = *(_QWORD *)&v337[8];
  *(_OWORD *)v337 = (unint64_t)&off_24C9CC500;
  if (v275)
    (*(void (**)(uint64_t))(*(_QWORD *)v275 + 8))(v275);
  v276 = v335[12];
  v277 = v335[32];
  *(_QWORD *)v337 = &off_24C9CC500;
  (*(void (**)(_BYTE *__return_ptr))(**(_QWORD **)(v277 + 96) + 16))(&v337[8]);
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)(v276 + 312) + 16))(v276 + 312, v337);
  v278 = *(_QWORD *)&v337[8];
  *(_OWORD *)v337 = (unint64_t)&off_24C9CC500;
  if (v278)
    (*(void (**)(uint64_t))(*(_QWORD *)v278 + 8))(v278);
  v279 = v335[12];
  v280 = v335[32];
  *(_QWORD *)v337 = &off_24C9CC500;
  (*(void (**)(_BYTE *__return_ptr))(**(_QWORD **)(v280 + 96) + 16))(&v337[8]);
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)(v279 + 480) + 16))(v279 + 480, v337);
  v281 = *(_QWORD *)&v337[8];
  *(_OWORD *)v337 = (unint64_t)&off_24C9CC500;
  if (v281)
    (*(void (**)(uint64_t))(*(_QWORD *)v281 + 8))(v281);
  v282 = v335[12];
  v283 = v335[32];
  *(_QWORD *)v337 = &off_24C9CC500;
  (*(void (**)(_BYTE *__return_ptr))(**(_QWORD **)(v283 + 96) + 16))(&v337[8]);
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)(v282 + 2328) + 16))(v282 + 2328, v337);
  v284 = *(_QWORD *)&v337[8];
  *(_OWORD *)v337 = (unint64_t)&off_24C9CC500;
  if (v284)
    (*(void (**)(uint64_t))(*(_QWORD *)v284 + 8))(v284);
  v285 = v335[12];
  v286 = v335[32];
  *(_QWORD *)v337 = &off_24C9CC500;
  (*(void (**)(_BYTE *__return_ptr))(**(_QWORD **)(v286 + 96) + 16))(&v337[8]);
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)(v285 + 3504) + 16))(v285 + 3504, v337);
  v287 = *(_QWORD *)&v337[8];
  *(_OWORD *)v337 = (unint64_t)&off_24C9CC500;
  if (v287)
    (*(void (**)(uint64_t))(*(_QWORD *)v287 + 8))(v287);
  v288 = v335[12];
  v289 = v335[32];
  *(_QWORD *)v337 = &off_24C9CC500;
  (*(void (**)(_BYTE *__return_ptr))(**(_QWORD **)(v289 + 96) + 16))(&v337[8]);
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)(v288 + 3840) + 16))(v288 + 3840, v337);
  v290 = *(_QWORD *)&v337[8];
  *(_OWORD *)v337 = (unint64_t)&off_24C9CC500;
  if (v290)
    (*(void (**)(uint64_t))(*(_QWORD *)v290 + 8))(v290);
  v291 = v335[12];
  v292 = v335[32];
  *(_QWORD *)v337 = &off_24C9CC500;
  (*(void (**)(_BYTE *__return_ptr))(**(_QWORD **)(v292 + 96) + 16))(&v337[8]);
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)(v291 + 3672) + 16))(v291 + 3672, v337);
  v293 = *(_QWORD *)&v337[8];
  *(_OWORD *)v337 = (unint64_t)&off_24C9CC500;
  if (v293)
    (*(void (**)(uint64_t))(*(_QWORD *)v293 + 8))(v293);
  v294 = v335[42];
  v295 = v335[12];
  *(_QWORD *)v337 = &off_24C9CC538;
  (*(void (**)(_BYTE *__return_ptr))(**(_QWORD **)(v295 + 768) + 16))(&v337[8]);
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)(v294 + 120) + 16))(v294 + 120, v337);
  v296 = *(_QWORD *)&v337[8];
  *(_QWORD *)v337 = &off_24C9CC538;
  *(_QWORD *)&v337[8] = 0;
  if (v296)
    (*(void (**)(uint64_t))(*(_QWORD *)v296 + 8))(v296);
  v297 = v335[12];
  v298 = v335[52];
  *(_QWORD *)v337 = &off_24C9D1448;
  (*(void (**)(_BYTE *__return_ptr))(**(_QWORD **)(v298 + 96) + 16))(&v337[8]);
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)(v297 + 1800) + 16))(v297 + 1800, v337);
  v299 = *(_QWORD *)&v337[8];
  *(_QWORD *)v337 = &off_24C9D1448;
  *(_QWORD *)&v337[8] = 0;
  if (v299)
    (*(void (**)(uint64_t))(*(_QWORD *)v299 + 8))(v299);
  v300 = v335[12];
  v301 = v335[52];
  *(_QWORD *)v337 = &off_24C9D1448;
  (*(void (**)(_BYTE *__return_ptr))(**(_QWORD **)(v301 + 264) + 16))(&v337[8]);
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)(v300 + 1800) + 16))(v300 + 1800, v337);
  v302 = *(_QWORD *)&v337[8];
  *(_QWORD *)v337 = &off_24C9D1448;
  *(_QWORD *)&v337[8] = 0;
  if (v302)
    (*(void (**)(uint64_t))(*(_QWORD *)v302 + 8))(v302);
  v303 = *v156;
  v304 = *v333;
  *(_QWORD *)v337 = &off_24C9B46D8;
  (*(void (**)(_BYTE *__return_ptr))(**(_QWORD **)(v304 + 432) + 16))(&v337[8]);
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)(v303 + 792) + 16))(v303 + 792, v337);
  v305 = *(_QWORD *)&v337[8];
  *(_OWORD *)v337 = (unint64_t)&off_24C9B46D8;
  if (v305)
    (*(void (**)(uint64_t))(*(_QWORD *)v305 + 8))(v305);
  v306 = v335[52];
  v307 = v335[22];
  *(_QWORD *)v337 = &off_24C9B46D8;
  (*(void (**)(_BYTE *__return_ptr))(**(_QWORD **)(v307 + 432) + 16))(&v337[8]);
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)(v306 + 288) + 16))(v306 + 288, v337);
  v308 = *(_QWORD *)&v337[8];
  *(_OWORD *)v337 = (unint64_t)&off_24C9B46D8;
  if (v308)
    (*(void (**)(uint64_t))(*(_QWORD *)v308 + 8))(v308);
  sub_20E8B43E8(__dst, "Forward incoming Pose and CM Data further", 0x29uLL);
  v309 = *v333;
  if (*(char *)(*v333 + 31) < 0)
  {
    *(_QWORD *)(v309 + 16) = 16;
    v310 = *(char **)(v309 + 8);
  }
  else
  {
    v310 = (char *)(v309 + 8);
    *(_BYTE *)(v309 + 31) = 16;
  }
  strcpy(v310, "PoseMetadata Fwd");
  sub_20E8B43E8((std::string *)(v309 + 32), "Forward PoseMetadat further", 0x1BuLL);
  v311 = *v333;
  if (*(char *)(*v333 + 199) < 0)
  {
    *(_QWORD *)(v311 + 184) = 10;
    v312 = *(char **)(v311 + 176);
  }
  else
  {
    v312 = (char *)(v311 + 176);
    *(_BYTE *)(v311 + 199) = 10;
  }
  strcpy(v312, "CMdata Fwd");
  sub_20E8B43E8((std::string *)(v311 + 200), "If available forward CMData further", 0x23uLL);
  v313 = *v333;
  if (*(char *)(*v333 + 535) < 0)
  {
    *(_QWORD *)(v313 + 520) = 15;
    v314 = *(char **)(v313 + 512);
  }
  else
  {
    v314 = (char *)(v313 + 512);
    *(_BYTE *)(v313 + 535) = 15;
  }
  strcpy(v314, "ML Metadata Fwd");
  if (*(char *)(v313 + 559) < 0)
  {
    *(_QWORD *)(v313 + 544) = 20;
    v315 = *(char **)(v313 + 536);
  }
  else
  {
    v315 = (char *)(v313 + 536);
    *(_BYTE *)(v313 + 559) = 20;
  }
  strcpy(v315, "Forwards ML Metadata");
  v316 = *v333;
  if (*(char *)(*v333 + 703) < 0)
  {
    *(_QWORD *)(v316 + 688) = 15;
    v317 = *(char **)(v316 + 680);
  }
  else
  {
    v317 = (char *)(v316 + 680);
    *(_BYTE *)(v316 + 703) = 15;
  }
  strcpy(v317, "Frame Debug Fwd");
  sub_20E8B43E8((std::string *)(v316 + 704), "Forwards Frames for debugging", 0x1DuLL);
  v318 = *v333;
  if (*(char *)(*v333 + 1039) < 0)
  {
    *(_QWORD *)(v318 + 1024) = 18;
    v319 = *(char **)(v318 + 1016);
  }
  else
  {
    v319 = (char *)(v318 + 1016);
    *(_BYTE *)(v318 + 1039) = 18;
  }
  strcpy(v319, "Depth Metadata Fwd");
  sub_20E8B43E8((std::string *)(v318 + 1040), "Forwards Depth Metadata", 0x17uLL);
  v320 = *v333;
  if (*(char *)(*v333 + 367) < 0)
  {
    *(_QWORD *)(v320 + 352) = 15;
    v321 = *(char **)(v320 + 344);
  }
  else
  {
    v321 = (char *)(v320 + 344);
    *(_BYTE *)(v320 + 367) = 15;
  }
  strcpy(v321, "Save Bundle Fwd");
  sub_20E8B43E8((std::string *)(v320 + 368), "If available forward SubmapSaveBundle further", 0x2DuLL);
  v322 = *v333;
  if (*(char *)(*v333 + 871) < 0)
  {
    *(_QWORD *)(v322 + 856) = 22;
    v323 = *(char **)(v322 + 848);
  }
  else
  {
    v323 = (char *)(v322 + 848);
    *(_BYTE *)(v322 + 871) = 22;
  }
  strcpy(v323, "Feature Filter Forward");
  sub_20E8B43E8((std::string *)(v322 + 872), "If available forward feature filter inputs further", 0x32uLL);
  sub_20E8B43E8(v332, "Forwards errors from the SlamEngine (e.g. LSE)", 0x2EuLL);
  v324 = v335[32];
  if (*(char *)(v324 + 31) < 0)
  {
    *(_QWORD *)(v324 + 16) = 17;
    v325 = *(char **)(v324 + 8);
  }
  else
  {
    v325 = (char *)(v324 + 8);
    *(_BYTE *)(v324 + 31) = 17;
  }
  strcpy(v325, "Error Fwd Channel");
  sub_20E8B43E8((std::string *)(v324 + 32), "Forwards errors from the SlamEngine (e.g. LSE)", 0x2EuLL);
  v326 = v335[52];
  if (*(char *)(v326 + 31) < 0)
  {
    *(_QWORD *)(v326 + 16) = 10;
    v327 = *(char **)(v326 + 8);
  }
  else
  {
    v327 = (char *)(v326 + 8);
    *(_BYTE *)(v326 + 31) = 10;
  }
  strcpy(v327, "Status Fwd");
  sub_20E8B43E8((std::string *)(v326 + 32), "Forward DataVerificationStatus further", 0x26uLL);
  v328 = v335[52];
  if (*(char *)(v328 + 199) < 0)
  {
    *(_QWORD *)(v328 + 184) = 15;
    v329 = *(char **)(v328 + 176);
  }
  else
  {
    v329 = (char *)(v328 + 176);
    *(_BYTE *)(v328 + 199) = 15;
  }
  strcpy(v329, "Save Bundle Fwd");
  sub_20E8B43E8((std::string *)(v328 + 200), "Forward SubmapSaveBundle further", 0x20uLL);
  return v335;
}

void sub_20EC7AA74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,char a55,uint64_t a56,char a57,uint64_t a58,char a59,uint64_t a60,uint64_t a61,uint64_t a62,char a63)
{
  void **v63;

  if (*(char *)(a24 + 55) < 0)
    operator delete(*v63);
  sub_20E86665C((uint64_t)&a57);
  sub_20E86665C((uint64_t)&a55);
  sub_20E86665C((uint64_t)&a59);
  sub_20E86665C((uint64_t)&a63);
  sub_20E86665C((uint64_t)&a25);
  sub_20EE298FC(a24);
  _Unwind_Resume(a1);
}

void sub_20EC7B3D4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BC6398](v1, 0x10B2C402589AC42);
  _Unwind_Resume(a1);
}

void sub_20EC7B44C(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9D0FF0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_20EC7B45C(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9D0FF0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20EC7B48C(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void sub_20EC7B49C()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  unint64_t *v6;
  void *v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t *v12;
  unint64_t v13;
  __int128 v14;
  unint64_t *v15;
  unint64_t v16;
  void *v17;
  char v18;
  unint64_t *v19;
  unint64_t v20;
  char *v21;
  __int128 v22;
  void *v23;
  _QWORD *v24;
  std::__shared_weak_count *v25;
  unint64_t *p_shared_owners;
  std::__shared_weak_count *v27;
  unint64_t v28;
  unint64_t *p_shared_weak_owners;
  unint64_t v30;
  unint64_t v31;
  unint64_t *v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t *v35;
  unint64_t v36;
  unint64_t *v37;
  unint64_t v38;
  __int128 v39;
  void *v40;
  void *v41;
  char *v42;
  unint64_t *v43;
  unint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t *v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t *v52;
  unint64_t v53;
  uint64_t v54;
  unint64_t *v55;
  unint64_t v56;
  uint64_t v57;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  unint64_t *v61;
  unint64_t v62;
  unint64_t *v63;
  void *v64;
  unint64_t *v65;
  unint64_t v66;
  uint64_t v67;
  unint64_t *v68;
  uint64_t v69;
  unint64_t *v70;
  unint64_t v71;
  __int128 v72;
  unint64_t *v73;
  unint64_t v74;
  void *v75;
  char v76;
  unint64_t *v77;
  unint64_t v78;
  char *v79;
  __int128 v80;
  void *v81;
  _QWORD *v82;
  std::__shared_weak_count *v83;
  unint64_t *v84;
  std::__shared_weak_count *v85;
  unint64_t v86;
  unint64_t *v87;
  unint64_t v88;
  unint64_t v89;
  unint64_t *v90;
  unint64_t v91;
  unint64_t v92;
  unint64_t *v93;
  unint64_t v94;
  unint64_t *v95;
  unint64_t v96;
  __int128 v97;
  void *v98;
  void *v99;
  char *v100;
  unint64_t *v101;
  unint64_t v102;
  _QWORD *v103;
  uint64_t v104;
  uint64_t v105;
  unint64_t *v106;
  unint64_t v107;
  uint64_t v108;
  unint64_t v109;
  unint64_t *v110;
  unint64_t v111;
  uint64_t v112;
  unint64_t *v113;
  unint64_t v114;
  uint64_t v115;
  std::__shared_weak_count *v116;
  unint64_t *v117;
  unint64_t v118;
  unint64_t *v119;
  unint64_t v120;
  unint64_t *v121;
  void *v122;
  unint64_t *v123;
  unint64_t v124;
  uint64_t v125;
  unint64_t *v126;
  uint64_t v127;
  unint64_t *v128;
  unint64_t v129;
  __int128 v130;
  unint64_t *v131;
  unint64_t v132;
  void *v133;
  char v134;
  unint64_t *v135;
  unint64_t v136;
  char *v137;
  __int128 v138;
  void *v139;
  _QWORD *v140;
  uint64_t v141;
  _QWORD *v142;
  std::__shared_weak_count *v143;
  unint64_t *v144;
  std::__shared_weak_count *v145;
  unint64_t v146;
  unint64_t *v147;
  unint64_t v148;
  unint64_t v149;
  unint64_t *v150;
  unint64_t v151;
  unint64_t v152;
  unint64_t *v153;
  unint64_t v154;
  unint64_t *v155;
  unint64_t v156;
  __int128 v157;
  void *v158;
  void *v159;
  char *v160;
  unint64_t *v161;
  unint64_t v162;
  _QWORD *v163;
  uint64_t v164;
  uint64_t v165;
  unint64_t *v166;
  unint64_t v167;
  uint64_t v168;
  unint64_t v169;
  unint64_t *v170;
  unint64_t v171;
  uint64_t v172;
  unint64_t *v173;
  unint64_t v174;
  uint64_t v175;
  std::__shared_weak_count *v176;
  unint64_t *v177;
  unint64_t v178;
  std::__shared_weak_count *v179;
  unint64_t *v180;
  unint64_t v181;
  unint64_t *v182;
  void *v183;
  unint64_t *v184;
  unint64_t v185;
  uint64_t v186;
  unint64_t *v187;
  uint64_t v188;
  unint64_t *v189;
  unint64_t v190;
  __int128 v191;
  unint64_t *v192;
  unint64_t v193;
  void *v194;
  char v195;
  unint64_t *v196;
  unint64_t v197;
  char *v198;
  __int128 v199;
  void *v200;
  _QWORD *v201;
  std::__shared_weak_count *v202;
  unint64_t *v203;
  std::__shared_weak_count *v204;
  unint64_t v205;
  unint64_t *v206;
  unint64_t v207;
  unint64_t v208;
  unint64_t *v209;
  unint64_t v210;
  unint64_t v211;
  unint64_t *v212;
  unint64_t v213;
  std::__shared_weak_count *v214;
  unint64_t *v215;
  unint64_t v216;
  __int128 v217;
  void *v218;
  void *v219;
  char *v220;
  unint64_t *v221;
  unint64_t v222;
  _QWORD *v223;
  uint64_t v224;
  uint64_t v225;
  unint64_t *v226;
  unint64_t v227;
  uint64_t v228;
  unint64_t v229;
  unint64_t *v230;
  unint64_t v231;
  uint64_t v232;
  unint64_t *v233;
  unint64_t v234;
  uint64_t v235;
  std::__shared_weak_count *v236;
  unint64_t *v237;
  unint64_t v238;
  std::__shared_weak_count *v239;
  unint64_t *v240;
  unint64_t v241;
  unint64_t *v242;
  void *v243;
  unint64_t *v244;
  unint64_t v245;
  uint64_t v246;
  unint64_t *v247;
  uint64_t v248;
  unint64_t *v249;
  unint64_t v250;
  __int128 v251;
  unint64_t *v252;
  unint64_t v253;
  void *v254;
  char v255;
  unint64_t *v256;
  unint64_t v257;
  char *v258;
  __int128 v259;
  void *v260;
  _QWORD *v261;
  std::__shared_weak_count *v262;
  unint64_t *v263;
  std::__shared_weak_count *v264;
  unint64_t v265;
  unint64_t *v266;
  unint64_t v267;
  unint64_t v268;
  unint64_t *v269;
  unint64_t v270;
  unint64_t v271;
  std::__shared_weak_count *v272;
  unint64_t *v273;
  unint64_t v274;
  std::__shared_weak_count *v275;
  unint64_t *v276;
  unint64_t v277;
  __int128 v278;
  void *v279;
  void *v280;
  char *v281;
  unint64_t *v282;
  unint64_t v283;
  _QWORD *v284;
  uint64_t v285;
  uint64_t v286;
  unint64_t *v287;
  unint64_t v288;
  uint64_t v289;
  unint64_t v290;
  unint64_t *v291;
  unint64_t v292;
  uint64_t v293;
  unint64_t *v294;
  unint64_t v295;
  uint64_t v296;
  std::__shared_weak_count *v297;
  unint64_t *v298;
  unint64_t v299;
  std::__shared_weak_count *v300;
  unint64_t *v301;
  unint64_t v302;
  unint64_t *v303;
  void *v304;
  unint64_t *v305;
  unint64_t v306;
  uint64_t v307;
  unint64_t *v308;
  uint64_t v309;
  unint64_t *v310;
  unint64_t v311;
  __int128 v312;
  unint64_t *v313;
  unint64_t v314;
  void *v315;
  char v316;
  unint64_t *v317;
  unint64_t v318;
  char *v319;
  __int128 v320;
  void *v321;
  _QWORD *v322;
  std::__shared_weak_count *v323;
  unint64_t *v324;
  std::__shared_weak_count *v325;
  unint64_t v326;
  unint64_t *v327;
  unint64_t v328;
  unint64_t v329;
  unint64_t *v330;
  unint64_t v331;
  unint64_t v332;
  std::__shared_weak_count *v333;
  unint64_t *v334;
  unint64_t v335;
  std::__shared_weak_count *v336;
  unint64_t *v337;
  unint64_t v338;
  __int128 v339;
  void *v340;
  void *v341;
  char *v342;
  unint64_t *v343;
  unint64_t v344;
  _QWORD *v345;
  uint64_t v346;
  uint64_t v347;
  unint64_t *v348;
  unint64_t v349;
  uint64_t v350;
  unint64_t v351;
  unint64_t *v352;
  unint64_t v353;
  uint64_t v354;
  unint64_t *v355;
  unint64_t v356;
  uint64_t v357;
  std::__shared_weak_count *v358;
  unint64_t *v359;
  unint64_t v360;
  std::__shared_weak_count *v361;
  unint64_t *v362;
  unint64_t v363;
  unint64_t *v364;
  void *v365;
  unint64_t *v366;
  unint64_t v367;
  uint64_t v368;
  unint64_t *v369;
  uint64_t v370;
  unint64_t *v371;
  unint64_t v372;
  __int128 v373;
  unint64_t *v374;
  unint64_t v375;
  void *v376;
  char v377;
  unint64_t *v378;
  unint64_t v379;
  char *v380;
  __int128 v381;
  void *v382;
  _QWORD *v383;
  std::__shared_weak_count *v384;
  unint64_t *v385;
  std::__shared_weak_count *v386;
  unint64_t v387;
  unint64_t *v388;
  unint64_t v389;
  unint64_t v390;
  unint64_t *v391;
  unint64_t v392;
  unint64_t v393;
  std::__shared_weak_count *v394;
  unint64_t *v395;
  unint64_t v396;
  std::__shared_weak_count *v397;
  unint64_t *v398;
  unint64_t v399;
  __int128 v400;
  void *v401;
  void *v402;
  char *v403;
  unint64_t *v404;
  unint64_t v405;
  _QWORD *v406;
  uint64_t v407;
  uint64_t v408;
  unint64_t *v409;
  unint64_t v410;
  uint64_t v411;
  unint64_t v412;
  unint64_t *v413;
  unint64_t v414;
  uint64_t v415;
  unint64_t *v416;
  unint64_t v417;
  uint64_t v418;
  std::__shared_weak_count *v419;
  unint64_t *v420;
  unint64_t v421;
  std::__shared_weak_count *v422;
  unint64_t *v423;
  unint64_t v424;
  unint64_t *v425;
  void *v426;
  unint64_t *v427;
  unint64_t v428;
  uint64_t v429;
  unint64_t *v430;
  uint64_t v431;
  unint64_t *v432;
  unint64_t v433;
  __int128 v434;
  unint64_t *v435;
  unint64_t v436;
  void *v437;
  char v438;
  unint64_t *v439;
  unint64_t v440;
  char *v441;
  __int128 v442;
  void *v443;
  _QWORD *v444;
  std::__shared_weak_count *v445;
  unint64_t *v446;
  std::__shared_weak_count *v447;
  unint64_t v448;
  unint64_t *v449;
  unint64_t v450;
  unint64_t v451;
  unint64_t *v452;
  unint64_t v453;
  unint64_t v454;
  std::__shared_weak_count *v455;
  unint64_t *v456;
  unint64_t v457;
  std::__shared_weak_count *v458;
  unint64_t *v459;
  unint64_t v460;
  std::__shared_weak_count *v461;
  unint64_t *v462;
  unint64_t v463;
  std::__shared_weak_count *v464;
  unint64_t *v465;
  unint64_t v466;
  std::__shared_weak_count *v467;
  unint64_t *v468;
  unint64_t v469;
  std::__shared_weak_count *v470;
  unint64_t *v471;
  unint64_t v472;
  unint64_t *v473;
  void *v474;
  unint64_t *v475;
  unint64_t v476;
  uint64_t v477;
  unint64_t *v478;
  uint64_t v479;
  unint64_t *v480;
  unint64_t v481;
  __int128 v482;
  unint64_t *v483;
  unint64_t v484;
  void *v485;
  char v486;
  unint64_t *v487;
  unint64_t v488;
  char *v489;
  __int128 v490;
  void *v491;
  _QWORD *v492;
  std::__shared_weak_count *v493;
  unint64_t *v494;
  std::__shared_weak_count *v495;
  unint64_t v496;
  unint64_t *v497;
  unint64_t v498;
  unint64_t v499;
  unint64_t *v500;
  unint64_t v501;
  unint64_t v502;
  std::__shared_weak_count *v503;
  unint64_t *v504;
  unint64_t v505;
  std::__shared_weak_count *v506;
  unint64_t *v507;
  unint64_t v508;
  __int128 v509;
  void *v510;
  void *v511;
  char *v512;
  unint64_t *v513;
  unint64_t v514;
  _QWORD *v515;
  uint64_t v516;
  uint64_t v517;
  unint64_t *v518;
  unint64_t v519;
  uint64_t v520;
  unint64_t v521;
  unint64_t *v522;
  unint64_t v523;
  uint64_t v524;
  unint64_t *v525;
  unint64_t v526;
  uint64_t v527;
  std::__shared_weak_count *v528;
  unint64_t *v529;
  unint64_t v530;
  std::__shared_weak_count *v531;
  unint64_t *v532;
  unint64_t v533;
  unint64_t *v534;
  void *v535;
  unint64_t *v536;
  unint64_t v537;
  uint64_t v538;
  unint64_t *v539;
  uint64_t v540;
  unint64_t *v541;
  unint64_t v542;
  __int128 v543;
  unint64_t *v544;
  unint64_t v545;
  void *v546;
  char v547;
  unint64_t *v548;
  unint64_t v549;
  char *v550;
  __int128 v551;
  void *v552;
  _QWORD *v553;
  std::__shared_weak_count *v554;
  unint64_t *v555;
  std::__shared_weak_count *v556;
  unint64_t v557;
  unint64_t *v558;
  unint64_t v559;
  unint64_t v560;
  unint64_t *v561;
  unint64_t v562;
  unint64_t v563;
  std::__shared_weak_count *v564;
  unint64_t *v565;
  unint64_t v566;
  std::__shared_weak_count *v567;
  unint64_t *v568;
  unint64_t v569;
  __int128 v570;
  void *v571;
  void *v572;
  char *v573;
  unint64_t *v574;
  unint64_t v575;
  _QWORD *v576;
  uint64_t v577;
  uint64_t v578;
  unint64_t *v579;
  unint64_t v580;
  uint64_t v581;
  unint64_t v582;
  unint64_t *v583;
  unint64_t v584;
  uint64_t v585;
  unint64_t *v586;
  unint64_t v587;
  uint64_t v588;
  std::__shared_weak_count *v589;
  unint64_t *v590;
  unint64_t v591;
  std::__shared_weak_count *v592;
  unint64_t *v593;
  unint64_t v594;
  unint64_t *v595;
  void *v596;
  unint64_t *v597;
  unint64_t v598;
  uint64_t v599;
  unint64_t *v600;
  uint64_t v601;
  unint64_t *v602;
  unint64_t v603;
  __int128 v604;
  unint64_t *v605;
  unint64_t v606;
  void *v607;
  char v608;
  unint64_t *v609;
  unint64_t v610;
  char *v611;
  __int128 v612;
  void *v613;
  _QWORD *v614;
  std::__shared_weak_count *v615;
  unint64_t *v616;
  std::__shared_weak_count *v617;
  unint64_t v618;
  unint64_t *v619;
  unint64_t v620;
  unint64_t v621;
  unint64_t *v622;
  unint64_t v623;
  unint64_t v624;
  std::__shared_weak_count *v625;
  unint64_t *v626;
  unint64_t v627;
  std::__shared_weak_count *v628;
  unint64_t *v629;
  unint64_t v630;
  __int128 v631;
  void *v632;
  void *v633;
  char *v634;
  unint64_t *v635;
  unint64_t v636;
  _QWORD *v637;
  uint64_t v638;
  uint64_t v639;
  unint64_t *v640;
  unint64_t v641;
  uint64_t v642;
  unint64_t v643;
  unint64_t *v644;
  unint64_t v645;
  uint64_t v646;
  unint64_t *v647;
  unint64_t v648;
  uint64_t v649;
  std::__shared_weak_count *v650;
  unint64_t *v651;
  unint64_t v652;
  std::__shared_weak_count *v653;
  unint64_t *v654;
  unint64_t v655;
  unint64_t *v656;
  void *v657;
  unint64_t *v658;
  unint64_t v659;
  uint64_t v660;
  unint64_t *v661;
  uint64_t v662;
  unint64_t *v663;
  unint64_t v664;
  __int128 v665;
  unint64_t *v666;
  unint64_t v667;
  void *v668;
  char v669;
  unint64_t *v670;
  unint64_t v671;
  char *v672;
  __int128 v673;
  void *v674;
  _QWORD *v675;
  std::__shared_weak_count *v676;
  unint64_t *v677;
  std::__shared_weak_count *v678;
  unint64_t v679;
  unint64_t *v680;
  unint64_t v681;
  unint64_t v682;
  unint64_t *v683;
  unint64_t v684;
  unint64_t v685;
  std::__shared_weak_count *v686;
  unint64_t *v687;
  unint64_t v688;
  std::__shared_weak_count *v689;
  unint64_t *v690;
  unint64_t v691;
  __int128 v692;
  void *v693;
  void *v694;
  char *v695;
  unint64_t *v696;
  unint64_t v697;
  _QWORD *v698;
  uint64_t v699;
  uint64_t v700;
  unint64_t *v701;
  unint64_t v702;
  uint64_t v703;
  unint64_t v704;
  unint64_t *v705;
  unint64_t v706;
  uint64_t v707;
  unint64_t *v708;
  unint64_t v709;
  uint64_t v710;
  std::__shared_weak_count *v711;
  unint64_t *v712;
  unint64_t v713;
  std::__shared_weak_count *v714;
  unint64_t *v715;
  unint64_t v716;
  unint64_t *v717;
  void *v718;
  unint64_t *v719;
  unint64_t v720;
  uint64_t v721;
  unint64_t *v722;
  uint64_t v723;
  unint64_t *v724;
  unint64_t v725;
  __int128 v726;
  unint64_t *v727;
  unint64_t v728;
  void *v729;
  char v730;
  unint64_t *v731;
  unint64_t v732;
  char *v733;
  __int128 v734;
  void *v735;
  _QWORD *v736;
  std::__shared_weak_count *v737;
  unint64_t *v738;
  std::__shared_weak_count *v739;
  unint64_t v740;
  unint64_t *v741;
  unint64_t v742;
  unint64_t v743;
  unint64_t *v744;
  unint64_t v745;
  unint64_t v746;
  std::__shared_weak_count *v747;
  unint64_t *v748;
  unint64_t v749;
  std::__shared_weak_count *v750;
  unint64_t *v751;
  unint64_t v752;
  __int128 v753;
  void *v754;
  void *v755;
  char *v756;
  unint64_t *v757;
  unint64_t v758;
  _QWORD *v759;
  uint64_t v760;
  uint64_t v761;
  unint64_t *v762;
  unint64_t v763;
  uint64_t v764;
  unint64_t v765;
  unint64_t *v766;
  unint64_t v767;
  uint64_t v768;
  unint64_t *v769;
  unint64_t v770;
  uint64_t v771;
  std::__shared_weak_count *v772;
  unint64_t *v773;
  unint64_t v774;
  std::__shared_weak_count *v775;
  unint64_t *v776;
  unint64_t v777;
  unint64_t *v778;
  void *v779;
  unint64_t *v780;
  unint64_t v781;
  uint64_t v782;
  unint64_t *v783;
  uint64_t v784;
  unint64_t *v785;
  unint64_t v786;
  __int128 v787;
  unint64_t *v788;
  unint64_t v789;
  void *v790;
  char v791;
  unint64_t *v792;
  unint64_t v793;
  char *v794;
  __int128 v795;
  void *v796;
  _QWORD *v797;
  std::__shared_weak_count *v798;
  unint64_t *v799;
  std::__shared_weak_count *v800;
  unint64_t v801;
  unint64_t *v802;
  unint64_t v803;
  unint64_t v804;
  unint64_t *v805;
  unint64_t v806;
  unint64_t v807;
  std::__shared_weak_count *v808;
  unint64_t *v809;
  unint64_t v810;
  std::__shared_weak_count *v811;
  unint64_t *v812;
  unint64_t v813;
  __int128 v814;
  void *v815;
  void *v816;
  char *v817;
  unint64_t *v818;
  unint64_t v819;
  _QWORD *v820;
  uint64_t v821;
  uint64_t v822;
  unint64_t *v823;
  unint64_t v824;
  uint64_t v825;
  unint64_t v826;
  unint64_t *v827;
  unint64_t v828;
  uint64_t v829;
  unint64_t *v830;
  unint64_t v831;
  uint64_t v832;
  std::__shared_weak_count *v833;
  unint64_t *v834;
  unint64_t v835;
  std::__shared_weak_count *v836;
  unint64_t *v837;
  unint64_t v838;
  unint64_t *v839;
  void *v840;
  unint64_t *v841;
  unint64_t v842;
  uint64_t v843;
  unint64_t *v844;
  uint64_t v845;
  unint64_t *v846;
  unint64_t v847;
  __int128 v848;
  unint64_t *v849;
  unint64_t v850;
  void *v851;
  char v852;
  unint64_t *v853;
  unint64_t v854;
  char *v855;
  __int128 v856;
  void *v857;
  _QWORD *v858;
  std::__shared_weak_count *v859;
  unint64_t *v860;
  std::__shared_weak_count *v861;
  unint64_t v862;
  unint64_t *v863;
  unint64_t v864;
  unint64_t v865;
  unint64_t *v866;
  unint64_t v867;
  unint64_t v868;
  std::__shared_weak_count *v869;
  unint64_t *v870;
  unint64_t v871;
  std::__shared_weak_count *v872;
  unint64_t *v873;
  unint64_t v874;
  __int128 v875;
  void *v876;
  void *v877;
  char *v878;
  unint64_t *v879;
  unint64_t v880;
  _QWORD *v881;
  uint64_t v882;
  uint64_t v883;
  unint64_t *v884;
  unint64_t v885;
  uint64_t v886;
  unint64_t v887;
  unint64_t *v888;
  unint64_t v889;
  uint64_t v890;
  unint64_t *v891;
  unint64_t v892;
  uint64_t v893;
  std::__shared_weak_count *v894;
  unint64_t *v895;
  unint64_t v896;
  std::__shared_weak_count *v897;
  unint64_t *v898;
  unint64_t v899;
  unint64_t *v900;
  void *v901;
  unint64_t *v902;
  unint64_t v903;
  uint64_t v904;
  unint64_t *v905;
  uint64_t v906;
  unint64_t *v907;
  unint64_t v908;
  __int128 v909;
  unint64_t *v910;
  unint64_t v911;
  void *v912;
  char v913;
  unint64_t *v914;
  unint64_t v915;
  char *v916;
  __int128 v917;
  void *v918;
  _QWORD *v919;
  std::__shared_weak_count *v920;
  unint64_t *v921;
  std::__shared_weak_count *v922;
  unint64_t v923;
  unint64_t *v924;
  unint64_t v925;
  unint64_t v926;
  unint64_t *v927;
  unint64_t v928;
  unint64_t v929;
  std::__shared_weak_count *v930;
  unint64_t *v931;
  unint64_t v932;
  std::__shared_weak_count *v933;
  unint64_t *v934;
  unint64_t v935;
  __int128 v936;
  void *v937;
  void *v938;
  char *v939;
  unint64_t *v940;
  unint64_t v941;
  _QWORD *v942;
  uint64_t v943;
  uint64_t v944;
  unint64_t *v945;
  unint64_t v946;
  uint64_t v947;
  unint64_t v948;
  unint64_t *v949;
  unint64_t v950;
  uint64_t v951;
  unint64_t *v952;
  unint64_t v953;
  uint64_t v954;
  std::__shared_weak_count *v955;
  unint64_t *v956;
  unint64_t v957;
  std::__shared_weak_count *v958;
  unint64_t *v959;
  unint64_t v960;
  unint64_t *v961;
  void *v962;
  unint64_t *v963;
  unint64_t v964;
  uint64_t v965;
  unint64_t *v966;
  uint64_t v967;
  unint64_t *v968;
  unint64_t v969;
  __int128 v970;
  unint64_t *v971;
  unint64_t v972;
  void *v973;
  char v974;
  unint64_t *v975;
  unint64_t v976;
  char *v977;
  __int128 v978;
  void *v979;
  _QWORD *v980;
  std::__shared_weak_count *v981;
  unint64_t *v982;
  std::__shared_weak_count *v983;
  unint64_t v984;
  unint64_t *v985;
  unint64_t v986;
  unint64_t v987;
  unint64_t *v988;
  unint64_t v989;
  unint64_t v990;
  std::__shared_weak_count *v991;
  unint64_t *v992;
  unint64_t v993;
  std::__shared_weak_count *v994;
  unint64_t *v995;
  unint64_t v996;
  __int128 v997;
  void *v998;
  void *v999;
  char *v1000;
  unint64_t *v1001;
  unint64_t v1002;
  _QWORD *v1003;
  uint64_t v1004;
  uint64_t v1005;
  unint64_t *v1006;
  unint64_t v1007;
  uint64_t v1008;
  unint64_t v1009;
  unint64_t *v1010;
  unint64_t v1011;
  uint64_t v1012;
  unint64_t *v1013;
  unint64_t v1014;
  uint64_t v1015;
  std::__shared_weak_count *v1016;
  unint64_t *v1017;
  unint64_t v1018;
  std::__shared_weak_count *v1019;
  unint64_t *v1020;
  unint64_t v1021;
  unint64_t *v1022;
  void *v1023;
  unint64_t *v1024;
  unint64_t v1025;
  uint64_t v1026;
  unint64_t *v1027;
  uint64_t v1028;
  unint64_t *v1029;
  unint64_t v1030;
  __int128 v1031;
  unint64_t *v1032;
  unint64_t v1033;
  void *v1034;
  char v1035;
  unint64_t *v1036;
  unint64_t v1037;
  char *v1038;
  __int128 v1039;
  void *v1040;
  _QWORD *v1041;
  std::__shared_weak_count *v1042;
  unint64_t *v1043;
  std::__shared_weak_count *v1044;
  unint64_t v1045;
  unint64_t *v1046;
  unint64_t v1047;
  unint64_t v1048;
  unint64_t *v1049;
  unint64_t v1050;
  unint64_t v1051;
  std::__shared_weak_count *v1052;
  unint64_t *v1053;
  unint64_t v1054;
  std::__shared_weak_count *v1055;
  unint64_t *v1056;
  unint64_t v1057;
  __int128 v1058;
  void *v1059;
  void *v1060;
  char *v1061;
  unint64_t *v1062;
  unint64_t v1063;
  _QWORD *v1064;
  uint64_t v1065;
  uint64_t v1066;
  unint64_t *v1067;
  unint64_t v1068;
  uint64_t v1069;
  unint64_t v1070;
  unint64_t *v1071;
  unint64_t v1072;
  uint64_t v1073;
  unint64_t *v1074;
  unint64_t v1075;
  uint64_t v1076;
  std::__shared_weak_count *v1077;
  unint64_t *v1078;
  unint64_t v1079;
  std::__shared_weak_count *v1080;
  unint64_t *v1081;
  unint64_t v1082;
  unint64_t *v1083;
  void *v1084;
  unint64_t *v1085;
  unint64_t v1086;
  unint64_t *v1087;
  uint64_t v1088;
  unint64_t *v1089;
  unint64_t v1090;
  __int128 v1091;
  unint64_t *v1092;
  unint64_t v1093;
  void *v1094;
  char v1095;
  unint64_t *v1096;
  unint64_t v1097;
  char *v1098;
  __int128 v1099;
  void *v1100;
  _QWORD *v1101;
  std::__shared_weak_count *v1102;
  unint64_t *v1103;
  std::__shared_weak_count *v1104;
  unint64_t v1105;
  unint64_t *v1106;
  unint64_t v1107;
  unint64_t v1108;
  unint64_t *v1109;
  unint64_t v1110;
  unint64_t v1111;
  std::__shared_weak_count *v1112;
  unint64_t *v1113;
  unint64_t v1114;
  std::__shared_weak_count *v1115;
  unint64_t *v1116;
  unint64_t v1117;
  __int128 v1118;
  void *v1119;
  void *v1120;
  char *v1121;
  unint64_t *v1122;
  unint64_t v1123;
  _QWORD *v1124;
  uint64_t v1125;
  uint64_t v1126;
  unint64_t *v1127;
  unint64_t v1128;
  uint64_t v1129;
  unint64_t v1130;
  unint64_t *v1131;
  unint64_t v1132;
  uint64_t v1133;
  unint64_t *v1134;
  unint64_t v1135;
  uint64_t v1136;
  std::__shared_weak_count *v1137;
  unint64_t *v1138;
  unint64_t v1139;
  std::__shared_weak_count *v1140;
  unint64_t *v1141;
  unint64_t v1142;
  unint64_t *v1143;
  void *v1144;
  unint64_t *v1145;
  unint64_t v1146;
  unint64_t *v1147;
  uint64_t v1148;
  unint64_t *v1149;
  unint64_t v1150;
  __int128 v1151;
  unint64_t *v1152;
  unint64_t v1153;
  void *v1154;
  char v1155;
  unint64_t *v1156;
  unint64_t v1157;
  char *v1158;
  __int128 v1159;
  void *v1160;
  _QWORD *v1161;
  std::__shared_weak_count *v1162;
  unint64_t *v1163;
  std::__shared_weak_count *v1164;
  unint64_t v1165;
  unint64_t *v1166;
  unint64_t v1167;
  unint64_t v1168;
  unint64_t *v1169;
  unint64_t v1170;
  unint64_t v1171;
  std::__shared_weak_count *v1172;
  unint64_t *v1173;
  unint64_t v1174;
  std::__shared_weak_count *v1175;
  unint64_t *v1176;
  unint64_t v1177;
  __int128 v1178;
  void *v1179;
  void *v1180;
  char *v1181;
  unint64_t *v1182;
  unint64_t v1183;
  _QWORD *v1184;
  uint64_t v1185;
  uint64_t v1186;
  unint64_t *v1187;
  unint64_t v1188;
  uint64_t v1189;
  unint64_t v1190;
  unint64_t *v1191;
  unint64_t v1192;
  uint64_t v1193;
  unint64_t *v1194;
  unint64_t v1195;
  uint64_t v1196;
  std::__shared_weak_count *v1197;
  unint64_t *v1198;
  unint64_t v1199;
  std::__shared_weak_count *v1200;
  unint64_t *v1201;
  unint64_t v1202;
  unint64_t *v1203;
  void *v1204;
  unint64_t *v1205;
  unint64_t v1206;
  unint64_t *v1207;
  uint64_t v1208;
  unint64_t *v1209;
  unint64_t v1210;
  __int128 v1211;
  unint64_t *v1212;
  unint64_t v1213;
  void *v1214;
  char v1215;
  unint64_t *v1216;
  unint64_t v1217;
  char *v1218;
  __int128 v1219;
  void *v1220;
  _QWORD *v1221;
  std::__shared_weak_count *v1222;
  unint64_t *v1223;
  std::__shared_weak_count *v1224;
  unint64_t v1225;
  unint64_t *v1226;
  unint64_t v1227;
  unint64_t v1228;
  unint64_t *v1229;
  unint64_t v1230;
  unint64_t v1231;
  std::__shared_weak_count *v1232;
  unint64_t *v1233;
  unint64_t v1234;
  std::__shared_weak_count *v1235;
  unint64_t *v1236;
  unint64_t v1237;
  __int128 v1238;
  void *v1239;
  void *v1240;
  char *v1241;
  unint64_t *v1242;
  unint64_t v1243;
  _QWORD *v1244;
  uint64_t v1245;
  uint64_t v1246;
  unint64_t *v1247;
  unint64_t v1248;
  uint64_t v1249;
  unint64_t v1250;
  unint64_t *v1251;
  unint64_t v1252;
  uint64_t v1253;
  unint64_t *v1254;
  unint64_t v1255;
  uint64_t v1256;
  std::__shared_weak_count *v1257;
  unint64_t *v1258;
  unint64_t v1259;
  std::__shared_weak_count *v1260;
  unint64_t *v1261;
  unint64_t v1262;
  unint64_t *v1263;
  void *v1264;
  unint64_t *v1265;
  unint64_t v1266;
  unint64_t *v1267;
  uint64_t v1268;
  unint64_t *v1269;
  unint64_t v1270;
  __int128 v1271;
  unint64_t *v1272;
  unint64_t v1273;
  void *v1274;
  char v1275;
  unint64_t *v1276;
  unint64_t v1277;
  char *v1278;
  __int128 v1279;
  void *v1280;
  _QWORD *v1281;
  std::__shared_weak_count *v1282;
  unint64_t *v1283;
  std::__shared_weak_count *v1284;
  unint64_t v1285;
  unint64_t *v1286;
  unint64_t v1287;
  unint64_t v1288;
  unint64_t *v1289;
  unint64_t v1290;
  unint64_t v1291;
  std::__shared_weak_count *v1292;
  unint64_t *v1293;
  unint64_t v1294;
  std::__shared_weak_count *v1295;
  unint64_t *v1296;
  unint64_t v1297;
  __int128 v1298;
  void *v1299;
  void *v1300;
  char *v1301;
  unint64_t *v1302;
  unint64_t v1303;
  _QWORD *v1304;
  uint64_t v1305;
  uint64_t v1306;
  unint64_t *v1307;
  unint64_t v1308;
  uint64_t v1309;
  unint64_t v1310;
  unint64_t *v1311;
  unint64_t v1312;
  uint64_t v1313;
  unint64_t *v1314;
  unint64_t v1315;
  uint64_t v1316;
  std::__shared_weak_count *v1317;
  unint64_t *v1318;
  unint64_t v1319;
  std::__shared_weak_count *v1320;
  unint64_t *v1321;
  unint64_t v1322;
  unint64_t *v1323;
  void *v1324;
  unint64_t *v1325;
  unint64_t v1326;
  unint64_t *v1327;
  uint64_t v1328;
  unint64_t *v1329;
  unint64_t v1330;
  __int128 v1331;
  unint64_t *v1332;
  unint64_t v1333;
  void *v1334;
  char v1335;
  unint64_t *v1336;
  unint64_t v1337;
  char *v1338;
  __int128 v1339;
  void *v1340;
  _QWORD *v1341;
  std::__shared_weak_count *v1342;
  unint64_t *v1343;
  std::__shared_weak_count *v1344;
  unint64_t v1345;
  unint64_t *v1346;
  unint64_t v1347;
  unint64_t v1348;
  unint64_t *v1349;
  unint64_t v1350;
  unint64_t v1351;
  std::__shared_weak_count *v1352;
  unint64_t *v1353;
  unint64_t v1354;
  std::__shared_weak_count *v1355;
  unint64_t *v1356;
  unint64_t v1357;
  __int128 v1358;
  void *v1359;
  void *v1360;
  char *v1361;
  unint64_t *v1362;
  unint64_t v1363;
  _QWORD *v1364;
  uint64_t v1365;
  uint64_t v1366;
  unint64_t *v1367;
  unint64_t v1368;
  uint64_t v1369;
  unint64_t v1370;
  unint64_t *v1371;
  unint64_t v1372;
  uint64_t v1373;
  unint64_t *v1374;
  unint64_t v1375;
  uint64_t v1376;
  std::__shared_weak_count *v1377;
  unint64_t *v1378;
  unint64_t v1379;
  std::__shared_weak_count *v1380;
  unint64_t *v1381;
  unint64_t v1382;
  unint64_t *v1383;
  void *v1384;
  unint64_t *v1385;
  unint64_t v1386;
  unint64_t *v1387;
  uint64_t v1388;
  unint64_t *v1389;
  unint64_t v1390;
  __int128 v1391;
  unint64_t *v1392;
  unint64_t v1393;
  void *v1394;
  void *v1395;
  char v1396;
  unint64_t *v1397;
  unint64_t v1398;
  char *v1399;
  __int128 v1400;
  void *v1401;
  _QWORD *v1402;
  std::__shared_weak_count *v1403;
  unint64_t *v1404;
  std::__shared_weak_count *v1405;
  unint64_t v1406;
  unint64_t *v1407;
  unint64_t v1408;
  unint64_t v1409;
  unint64_t *v1410;
  unint64_t v1411;
  unint64_t v1412;
  std::__shared_weak_count *v1413;
  unint64_t *v1414;
  unint64_t v1415;
  std::__shared_weak_count *v1416;
  unint64_t *v1417;
  unint64_t v1418;
  __int128 v1419;
  void *v1420;
  void *v1421;
  char *v1422;
  unint64_t *v1423;
  unint64_t v1424;
  _QWORD *v1425;
  uint64_t v1426;
  uint64_t v1427;
  unint64_t *v1428;
  unint64_t v1429;
  uint64_t v1430;
  unint64_t v1431;
  unint64_t *v1432;
  unint64_t v1433;
  uint64_t v1434;
  unint64_t *v1435;
  unint64_t v1436;
  uint64_t v1437;
  std::__shared_weak_count *v1438;
  unint64_t *v1439;
  unint64_t v1440;
  std::__shared_weak_count *v1441;
  unint64_t *v1442;
  unint64_t v1443;
  unint64_t *v1444;
  void *v1445;
  unint64_t *v1446;
  unint64_t v1447;
  unint64_t *v1448;
  uint64_t v1449;
  unint64_t *v1450;
  unint64_t v1451;
  __int128 v1452;
  unint64_t *v1453;
  unint64_t v1454;
  void *v1455;
  void *v1456;
  char v1457;
  unint64_t *v1458;
  unint64_t v1459;
  char *v1460;
  __int128 v1461;
  void *v1462;
  _QWORD *v1463;
  std::__shared_weak_count *v1464;
  unint64_t *v1465;
  std::__shared_weak_count *v1466;
  unint64_t v1467;
  unint64_t *v1468;
  unint64_t v1469;
  unint64_t v1470;
  unint64_t *v1471;
  unint64_t v1472;
  unint64_t v1473;
  std::__shared_weak_count *v1474;
  unint64_t *v1475;
  unint64_t v1476;
  std::__shared_weak_count *v1477;
  unint64_t *v1478;
  unint64_t v1479;
  std::__shared_weak_count *v1480;
  unint64_t *v1481;
  unint64_t v1482;
  std::__shared_weak_count *v1483;
  unint64_t *v1484;
  unint64_t v1485;
  std::__shared_weak_count *v1486;
  unint64_t *v1487;
  unint64_t v1488;
  std::__shared_weak_count *v1489;
  unint64_t *v1490;
  unint64_t v1491;
  unint64_t *v1492;
  void *v1493;
  unint64_t *v1494;
  unint64_t v1495;
  unint64_t *v1496;
  uint64_t v1497;
  unint64_t *v1498;
  unint64_t v1499;
  __int128 v1500;
  unint64_t *v1501;
  unint64_t v1502;
  void *v1503;
  char v1504;
  unint64_t *v1505;
  unint64_t v1506;
  char *v1507;
  __int128 v1508;
  uint64_t v1509;
  _QWORD *v1510;
  std::__shared_weak_count *v1511;
  unint64_t *v1512;
  std::__shared_weak_count *v1513;
  unint64_t v1514;
  unint64_t *v1515;
  unint64_t v1516;
  unint64_t v1517;
  unint64_t *v1518;
  unint64_t v1519;
  unint64_t v1520;
  std::__shared_weak_count *v1521;
  unint64_t *v1522;
  unint64_t v1523;
  std::__shared_weak_count *v1524;
  unint64_t *v1525;
  unint64_t v1526;
  __int128 v1527;
  void *v1528;
  void *v1529;
  char *v1530;
  unint64_t *v1531;
  unint64_t v1532;
  _QWORD *v1533;
  uint64_t v1534;
  uint64_t v1535;
  unint64_t *v1536;
  unint64_t v1537;
  uint64_t v1538;
  unint64_t v1539;
  unint64_t *v1540;
  unint64_t v1541;
  uint64_t v1542;
  unint64_t *v1543;
  unint64_t v1544;
  uint64_t v1545;
  std::__shared_weak_count *v1546;
  unint64_t *v1547;
  unint64_t v1548;
  std::__shared_weak_count *v1549;
  unint64_t *v1550;
  unint64_t v1551;
  unint64_t *v1552;
  void *v1553;
  unint64_t *v1554;
  unint64_t v1555;
  uint64_t v1556;
  uint64_t v1557;
  unint64_t *v1558;
  unint64_t v1559;
  __int128 v1560;
  unint64_t *v1561;
  unint64_t v1562;
  void *v1563;
  char v1564;
  unint64_t *v1565;
  unint64_t v1566;
  char *v1567;
  __int128 v1568;
  uint64_t v1569;
  _QWORD *v1570;
  std::__shared_weak_count *v1571;
  unint64_t *v1572;
  std::__shared_weak_count *v1573;
  unint64_t v1574;
  unint64_t *v1575;
  unint64_t v1576;
  unint64_t v1577;
  unint64_t *v1578;
  unint64_t v1579;
  unint64_t v1580;
  std::__shared_weak_count *v1581;
  unint64_t *v1582;
  unint64_t v1583;
  std::__shared_weak_count *v1584;
  unint64_t *v1585;
  unint64_t v1586;
  __int128 v1587;
  void *v1588;
  void *v1589;
  char *v1590;
  unint64_t *v1591;
  unint64_t v1592;
  _QWORD *v1593;
  uint64_t v1594;
  uint64_t v1595;
  unint64_t *v1596;
  unint64_t v1597;
  uint64_t v1598;
  unint64_t v1599;
  unint64_t *v1600;
  unint64_t v1601;
  uint64_t v1602;
  unint64_t *v1603;
  unint64_t v1604;
  uint64_t v1605;
  std::__shared_weak_count *v1606;
  unint64_t *v1607;
  unint64_t v1608;
  std::__shared_weak_count *v1609;
  unint64_t *v1610;
  unint64_t v1611;
  unint64_t *v1612;
  void *v1613;
  unint64_t *v1614;
  unint64_t v1615;
  uint64_t v1616;
  uint64_t v1617;
  unint64_t *v1618;
  unint64_t v1619;
  __int128 v1620;
  unint64_t *v1621;
  unint64_t v1622;
  void *v1623;
  void *v1624;
  char v1625;
  unint64_t *v1626;
  unint64_t v1627;
  char *v1628;
  __int128 v1629;
  uint64_t v1630;
  _QWORD *v1631;
  std::__shared_weak_count *v1632;
  unint64_t *v1633;
  std::__shared_weak_count *v1634;
  unint64_t v1635;
  unint64_t *v1636;
  unint64_t v1637;
  unint64_t v1638;
  unint64_t *v1639;
  unint64_t v1640;
  unint64_t v1641;
  std::__shared_weak_count *v1642;
  unint64_t *v1643;
  unint64_t v1644;
  std::__shared_weak_count *v1645;
  unint64_t *v1646;
  unint64_t v1647;
  __int128 v1648;
  void *v1649;
  void *v1650;
  char *v1651;
  unint64_t *v1652;
  unint64_t v1653;
  _QWORD *v1654;
  uint64_t v1655;
  uint64_t v1656;
  unint64_t *v1657;
  unint64_t v1658;
  uint64_t v1659;
  unint64_t v1660;
  unint64_t *v1661;
  unint64_t v1662;
  uint64_t v1663;
  unint64_t *v1664;
  unint64_t v1665;
  uint64_t v1666;
  std::__shared_weak_count *v1667;
  unint64_t *v1668;
  unint64_t v1669;
  std::__shared_weak_count *v1670;
  unint64_t *v1671;
  unint64_t v1672;
  uint64_t v1673;
  void *v1674;
  unint64_t *v1675;
  unint64_t v1676;
  uint64_t v1677;
  uint64_t v1678;
  unint64_t *v1679;
  unint64_t v1680;
  __int128 v1681;
  unint64_t *v1682;
  unint64_t v1683;
  void *v1684;
  void *v1685;
  char v1686;
  unint64_t *v1687;
  unint64_t v1688;
  char *v1689;
  __int128 v1690;
  uint64_t v1691;
  _QWORD *v1692;
  std::__shared_weak_count *v1693;
  unint64_t *v1694;
  std::__shared_weak_count *v1695;
  unint64_t v1696;
  unint64_t *v1697;
  unint64_t v1698;
  unint64_t v1699;
  unint64_t *v1700;
  unint64_t v1701;
  unint64_t v1702;
  std::__shared_weak_count *v1703;
  unint64_t *v1704;
  unint64_t v1705;
  std::__shared_weak_count *v1706;
  unint64_t *v1707;
  unint64_t v1708;
  __int128 v1709;
  void *v1710;
  void *v1711;
  char *v1712;
  unint64_t *v1713;
  unint64_t v1714;
  _QWORD *v1715;
  uint64_t v1716;
  uint64_t v1717;
  unint64_t *v1718;
  unint64_t v1719;
  uint64_t v1720;
  unint64_t v1721;
  unint64_t *v1722;
  unint64_t v1723;
  uint64_t v1724;
  unint64_t *v1725;
  unint64_t v1726;
  uint64_t v1727;
  std::__shared_weak_count *v1728;
  unint64_t *v1729;
  unint64_t v1730;
  std::__shared_weak_count *v1731;
  unint64_t *v1732;
  unint64_t v1733;
  void *v1734;
  uint64_t v1735;
  unint64_t *v1736;
  unint64_t v1737;
  uint64_t v1738;
  uint64_t v1739;
  unint64_t *v1740;
  unint64_t v1741;
  __int128 v1742;
  unint64_t *v1743;
  unint64_t v1744;
  void *v1745;
  void *v1746;
  char v1747;
  unint64_t *v1748;
  unint64_t v1749;
  uint64_t v1750;
  __int128 v1751;
  uint64_t v1752;
  _QWORD *v1753;
  std::__shared_weak_count *v1754;
  unint64_t *v1755;
  std::__shared_weak_count *v1756;
  unint64_t v1757;
  unint64_t *v1758;
  unint64_t v1759;
  unint64_t v1760;
  unint64_t *v1761;
  unint64_t v1762;
  unint64_t v1763;
  std::__shared_weak_count *v1764;
  unint64_t *v1765;
  unint64_t v1766;
  std::__shared_weak_count *v1767;
  unint64_t *v1768;
  unint64_t v1769;
  __int128 v1770;
  void *v1771;
  __int128 v1772;
  unint64_t *v1773;
  unint64_t v1774;
  uint64_t v1775;
  uint64_t v1776;
  uint64_t v1777;
  unint64_t *v1778;
  unint64_t v1779;
  uint64_t v1780;
  unint64_t v1781;
  unint64_t *v1782;
  unint64_t v1783;
  uint64_t v1784;
  unint64_t *v1785;
  unint64_t v1786;
  uint64_t v1787;
  std::__shared_weak_count *v1788;
  unint64_t *v1789;
  unint64_t v1790;
  std::__shared_weak_count *v1791;
  unint64_t *v1792;
  unint64_t v1793;
  uint64_t v1794;
  __int128 v1795;
  __int128 v1796;
  __int128 v1797;
  __int128 v1798;
  __int128 v1799;
  uint64_t v1800;
  __int128 v1801;
  __int128 v1802;
  __int128 v1803;
  __int128 v1804;
  __int128 v1805;
  __int128 v1806;
  __int128 v1807;
  __int128 v1808;
  __int128 v1809;
  __int128 v1810;
  uint64_t v1811;
  __int128 v1812;
  __int128 v1813;
  __int128 v1814;
  __int128 v1815;
  __int128 v1816;
  __int128 v1817;
  __int128 v1818;
  __int128 v1819;
  __int128 v1820;
  __int128 v1821;
  __int128 v1822;
  __int128 v1823;
  __int128 v1824;
  __int128 v1825;
  __int128 v1826;
  __int128 v1827;
  __int128 v1828;
  __int128 v1829;
  __int128 v1830;
  __int128 v1831;
  __int128 v1832;
  __int128 v1833;
  __int128 v1834;
  __int128 v1835;
  __int128 v1836;
  __int128 v1837;
  __int128 v1838;
  __int128 v1839;
  __int128 v1840;
  __int128 v1841;
  __int128 v1842;
  __int128 v1843;
  __int128 v1844;
  __int128 v1845;
  __int128 v1846;
  __int128 v1847;
  __int128 v1848;
  __int128 v1849;
  __int128 v1850;
  __int128 v1851;
  __int128 v1852;
  __int128 v1853;
  __int128 v1854;
  __int128 v1855;
  __int128 v1856;
  __int128 v1857;
  __int128 v1858;
  __int128 v1859;
  __int128 v1860;
  __int128 v1861;
  __int128 v1862;
  __int128 v1863;
  __int128 v1864;
  __int128 v1865;
  __int128 v1866;
  __int128 v1867;
  __int128 v1868;
  __int128 v1869;
  __int128 v1870;
  __int128 v1871;
  __int128 v1872;
  __int128 v1873;
  __int128 v1874;
  __int128 v1875;
  __int128 v1876;
  __int128 v1877;
  __int128 v1878;
  void *v1879;
  void *v1880;
  void *v1881;
  void *v1882;
  __int128 v1883;
  __int128 v1884;
  __int128 v1885;
  void *v1886;
  void *v1887;
  __int128 v1888;
  void *v1889;
  void *v1890;
  __int128 v1891;
  __int128 v1892;
  __int128 v1893;
  __int128 v1894;
  __int128 v1895;
  __int128 v1896;
  __int128 v1897;
  __int128 v1898;
  __int128 v1899;
  __int128 v1900;
  __int128 v1901;
  __int128 v1902;
  __int128 v1903;
  __int128 v1904;
  __int128 v1905;
  __int128 v1906;
  __int128 v1907;
  __int128 v1908;
  __int128 v1909;
  __int128 v1910;
  __int128 v1911;
  __int128 v1912;
  __int128 v1913;
  unint64_t *v1914;
  unint64_t v1915;
  unint64_t *v1916;
  unint64_t v1917;
  unint64_t *v1918;
  unint64_t v1919;
  unint64_t *v1920;
  unint64_t v1921;
  unint64_t *v1922;
  unint64_t v1923;
  unint64_t *v1924;
  unint64_t v1925;
  unint64_t *v1926;
  unint64_t v1927;
  unint64_t *v1928;
  unint64_t v1929;
  unint64_t *v1930;
  unint64_t v1931;
  unint64_t *v1932;
  unint64_t v1933;
  unint64_t *v1934;
  unint64_t v1935;
  unint64_t *v1936;
  unint64_t v1937;
  unint64_t *v1938;
  unint64_t v1939;
  unint64_t *v1940;
  unint64_t v1941;
  unint64_t *v1942;
  unint64_t v1943;
  unint64_t *v1944;
  unint64_t v1945;
  unint64_t *v1946;
  unint64_t v1947;
  unint64_t *v1948;
  unint64_t v1949;
  unint64_t *v1950;
  unint64_t v1951;
  unint64_t *v1952;
  unint64_t v1953;
  unint64_t *v1954;
  unint64_t v1955;
  unint64_t *v1956;
  unint64_t v1957;
  std::__shared_weak_count *v1958;
  unint64_t *v1959;
  unint64_t v1960;
  std::__shared_weak_count *v1961;
  unint64_t *v1962;
  unint64_t v1963;
  std::__shared_weak_count *v1964;
  unint64_t *v1965;
  unint64_t v1966;
  std::__shared_weak_count *v1967;
  unint64_t *v1968;
  unint64_t v1969;
  std::__shared_weak_count *v1970;
  unint64_t *v1971;
  unint64_t v1972;
  std::__shared_weak_count *v1973;
  unint64_t *v1974;
  unint64_t v1975;
  std::__shared_weak_count *v1976;
  unint64_t *v1977;
  unint64_t v1978;
  std::__shared_weak_count *v1979;
  unint64_t *v1980;
  unint64_t v1981;
  std::__shared_weak_count *v1982;
  unint64_t *v1983;
  unint64_t v1984;
  std::__shared_weak_count *v1985;
  unint64_t *v1986;
  unint64_t v1987;
  std::__shared_weak_count *v1988;
  unint64_t *v1989;
  unint64_t v1990;
  std::__shared_weak_count *v1991;
  unint64_t *v1992;
  unint64_t v1993;
  std::__shared_weak_count *v1994;
  unint64_t *v1995;
  unint64_t v1996;
  std::__shared_weak_count *v1997;
  unint64_t *v1998;
  unint64_t v1999;
  std::__shared_weak_count *v2000;
  unint64_t *v2001;
  unint64_t v2002;
  std::__shared_weak_count *v2003;
  unint64_t *v2004;
  unint64_t v2005;
  __int128 v2006;
  __int128 v2007;
  __int128 v2008;
  uint64_t *v2009;
  __int128 v2010;
  __int128 v2011;
  std::__shared_weak_count *v2012;
  std::__shared_weak_count *v2013;
  std::__shared_weak_count *v2014;
  uint64_t v2015;
  std::__shared_weak_count *v2016;
  std::__shared_weak_count *v2017;
  std::__shared_weak_count *v2018;
  std::__shared_weak_count *v2019;
  std::__shared_weak_count *v2020;
  std::__shared_weak_count *v2021;
  std::__shared_weak_count *v2022;
  std::__shared_weak_count *v2023;
  std::__shared_weak_count *v2024;
  std::__shared_weak_count *v2025;
  std::__shared_weak_count *v2026;
  std::__shared_weak_count *v2027;
  std::__shared_weak_count *v2028;
  std::__shared_weak_count *v2029;
  std::__shared_weak_count *v2030;
  std::__shared_weak_count *v2031;
  std::__shared_weak_count *v2032;
  std::__shared_weak_count *v2033;
  std::__shared_weak_count *v2034;
  void *v2035[3];
  void *v2036;
  __int128 v2037;
  void *v2038;
  __int128 v2039;
  __int128 v2040;
  uint64_t (**v2041)();
  __int128 v2042;
  uint64_t v2043;
  uint64_t (**v2044)();
  __int128 v2045;
  uint64_t (**v2046)();
  __int128 v2047;
  uint64_t v2048;
  std::__shared_weak_count *v2049;
  void *v2050;
  std::__shared_weak_count *v2051;
  void *v2052[3];
  uint64_t v2053;
  __int128 v2054;
  uint64_t v2055;
  __int128 v2056;
  __int128 v2057;
  __int128 v2058;
  uint64_t v2059;
  __int128 v2060;
  __int128 v2061;
  uint64_t v2062;
  std::__shared_weak_count *v2063;
  void *v2064;
  std::__shared_weak_count *v2065;
  void *v2066[3];
  void *v2067;
  __int128 v2068;
  void *v2069;
  __int128 v2070;
  __int128 v2071;
  uint64_t (**v2072)();
  __int128 v2073;
  uint64_t v2074;
  uint64_t (**v2075)();
  __int128 v2076;
  uint64_t (**v2077)();
  __int128 v2078;
  uint64_t v2079;
  std::__shared_weak_count *v2080;
  void *v2081;
  std::__shared_weak_count *v2082;
  void *v2083[3];
  void *v2084;
  __int128 v2085;
  void *v2086;
  __int128 v2087;
  __int128 v2088;
  uint64_t (**v2089)();
  __int128 v2090;
  uint64_t v2091;
  uint64_t (**v2092)();
  __int128 v2093;
  uint64_t (**v2094)();
  __int128 v2095;
  uint64_t v2096;
  std::__shared_weak_count *v2097;
  void *v2098;
  std::__shared_weak_count *v2099;
  void *__src[3];
  void *v2101;
  __int128 v2102;
  void *v2103;
  __int128 v2104;
  __int128 v2105;
  uint64_t (**v2106)();
  __int128 v2107;
  uint64_t v2108;
  uint64_t (**v2109)();
  __int128 v2110;
  uint64_t (**v2111)();
  __int128 v2112;
  uint64_t v2113;
  std::__shared_weak_count *v2114;
  void *v2115;
  std::__shared_weak_count *v2116;
  void *__dst[3];
  void *v2118;
  __int128 v2119;
  void *v2120;
  __int128 v2121;
  __int128 v2122;
  uint64_t (**v2123)();
  __int128 v2124;
  uint64_t v2125;
  uint64_t (**v2126)();
  __int128 v2127;
  uint64_t (**v2128)();
  __int128 v2129;
  uint64_t v2130;
  std::__shared_weak_count *v2131;
  void *v2132;
  std::__shared_weak_count *v2133;
  void *__p[3];
  void *v2135;
  __int128 v2136;
  void *v2137;
  __int128 v2138;
  __int128 v2139;
  uint64_t (**v2140)();
  __int128 v2141;
  uint64_t v2142;
  uint64_t (**v2143)();
  __int128 v2144;
  uint64_t (**v2145)();
  __int128 v2146;
  uint64_t v2147;
  std::__shared_weak_count *v2148;
  void *v2149;
  std::__shared_weak_count *v2150;
  void *v2151[3];
  void *v2152;
  __int128 v2153;
  void *v2154;
  __int128 v2155;
  __int128 v2156;
  uint64_t (**v2157)();
  __int128 v2158;
  uint64_t v2159;
  uint64_t (**v2160)();
  __int128 v2161;
  uint64_t (**v2162)();
  __int128 v2163;
  uint64_t v2164;
  std::__shared_weak_count *v2165;
  void *v2166;
  std::__shared_weak_count *v2167;
  uint64_t (**v2168)();
  __int128 v2169;
  void *v2170;
  __int128 v2171;
  void *v2172;
  __int128 v2173;
  __int128 v2174;
  uint64_t (**v2175)();
  __int128 v2176;
  uint64_t v2177;
  uint64_t (**v2178)();
  __int128 v2179;
  uint64_t (**v2180)();
  __int128 v2181;
  void *v2182[3];
  void *v2183;
  __int128 v2184;
  void *v2185;
  __int128 v2186;
  __int128 v2187;
  uint64_t (**v2188)();
  __int128 v2189;
  uint64_t v2190;
  uint64_t (**v2191)();
  __int128 v2192;
  uint64_t (**v2193)();
  __int128 v2194;
  void *v2195[3];
  void *v2196;
  __int128 v2197;
  void *v2198;
  __int128 v2199;
  __int128 v2200;
  uint64_t (**v2201)();
  __int128 v2202;
  uint64_t v2203;
  uint64_t (**v2204)();
  __int128 v2205;
  uint64_t (**v2206)();
  __int128 v2207;
  void *v2208[3];
  void *v2209;
  __int128 v2210;
  void *v2211;
  __int128 v2212;
  __int128 v2213;
  uint64_t (**v2214)();
  __int128 v2215;
  uint64_t v2216;
  uint64_t (**v2217)();
  __int128 v2218;
  uint64_t (**v2219)();
  __int128 v2220;
  void *v2221[3];
  void *v2222;
  __int128 v2223;
  void *v2224;
  __int128 v2225;
  __int128 v2226;
  uint64_t (**v2227)();
  __int128 v2228;
  uint64_t v2229;
  uint64_t (**v2230)();
  __int128 v2231;
  uint64_t (**v2232)();
  __int128 v2233;
  void *v2234[3];
  void *v2235;
  __int128 v2236;
  void *v2237;
  __int128 v2238;
  __int128 v2239;
  uint64_t (**v2240)();
  __int128 v2241;
  uint64_t v2242;
  uint64_t (**v2243)();
  __int128 v2244;
  uint64_t (**v2245)();
  __int128 v2246;
  void *v2247[3];
  uint64_t v2248;
  __int128 v2249;
  uint64_t v2250;
  __int128 v2251;
  __int128 v2252;
  __int128 v2253;
  uint64_t v2254;
  __int128 v2255;
  __int128 v2256;
  void *v2257[3];
  void *v2258;
  __int128 v2259;
  void *v2260;
  __int128 v2261;
  __int128 v2262;
  uint64_t (**v2263)();
  __int128 v2264;
  uint64_t v2265;
  uint64_t (**v2266)();
  __int128 v2267;
  uint64_t (**v2268)();
  __int128 v2269;
  void *v2270[3];
  void *v2271;
  __int128 v2272;
  void *v2273;
  __int128 v2274;
  __int128 v2275;
  uint64_t (**v2276)();
  __int128 v2277;
  uint64_t v2278;
  uint64_t (**v2279)();
  __int128 v2280;
  uint64_t (**v2281)();
  __int128 v2282;
  void *v2283[3];
  void *v2284;
  __int128 v2285;
  void *v2286;
  __int128 v2287;
  __int128 v2288;
  uint64_t (**v2289)();
  __int128 v2290;
  uint64_t v2291;
  uint64_t (**v2292)();
  __int128 v2293;
  uint64_t (**v2294)();
  __int128 v2295;
  void *v2296[3];
  void *v2297;
  __int128 v2298;
  void *v2299;
  __int128 v2300;
  __int128 v2301;
  uint64_t (**v2302)();
  __int128 v2303;
  uint64_t v2304;
  uint64_t (**v2305)();
  __int128 v2306;
  uint64_t (**v2307)();
  __int128 v2308;
  void *v2309[3];
  void *v2310;
  __int128 v2311;
  void *v2312;
  __int128 v2313;
  __int128 v2314;
  uint64_t (**v2315)();
  __int128 v2316;
  uint64_t v2317;
  uint64_t (**v2318)();
  __int128 v2319;
  uint64_t (**v2320)();
  __int128 v2321;
  void *v2322[3];
  void *v2323;
  __int128 v2324;
  void *v2325;
  __int128 v2326;
  __int128 v2327;
  uint64_t (**v2328)();
  __int128 v2329;
  uint64_t v2330;
  uint64_t (**v2331)();
  __int128 v2332;
  uint64_t (**v2333)();
  __int128 v2334;
  void *v2335[3];
  void *v2336;
  __int128 v2337;
  void *v2338;
  __int128 v2339;
  __int128 v2340;
  uint64_t (**v2341)();
  __int128 v2342;
  uint64_t v2343;
  uint64_t (**v2344)();
  __int128 v2345;
  uint64_t (**v2346)();
  __int128 v2347;
  void *v2348[3];
  void *v2349;
  __int128 v2350;
  void *v2351;
  __int128 v2352;
  __int128 v2353;
  uint64_t (**v2354)();
  __int128 v2355;
  uint64_t v2356;
  uint64_t (**v2357)();
  __int128 v2358;
  uint64_t (**v2359)();
  __int128 v2360;
  void *v2361[3];
  void *v2362;
  __int128 v2363;
  void *v2364;
  __int128 v2365;
  __int128 v2366;
  uint64_t (**v2367)();
  __int128 v2368;
  uint64_t v2369;
  uint64_t (**v2370)();
  __int128 v2371;
  uint64_t (**v2372)();
  __int128 v2373;
  void *v2374[3];
  void *v2375;
  __int128 v2376;
  void *v2377;
  __int128 v2378;
  __int128 v2379;
  uint64_t (**v2380)();
  __int128 v2381;
  uint64_t v2382;
  uint64_t (**v2383)();
  __int128 v2384;
  uint64_t (**v2385)();
  __int128 v2386;
  void *v2387[3];
  void *v2388;
  __int128 v2389;
  void *v2390;
  __int128 v2391;
  __int128 v2392;
  uint64_t (**v2393)();
  __int128 v2394;
  uint64_t v2395;
  uint64_t (**v2396)();
  __int128 v2397;
  uint64_t (**v2398)();
  __int128 v2399;
  void *v2400[3];
  void *v2401;
  __int128 v2402;
  void *v2403;
  __int128 v2404;
  __int128 v2405;
  uint64_t (**v2406)();
  __int128 v2407;
  uint64_t v2408;
  uint64_t (**v2409)();
  __int128 v2410;
  uint64_t (**v2411)();
  __int128 v2412;
  void *v2413[3];
  void *v2414;
  __int128 v2415;
  void *v2416;
  __int128 v2417;
  __int128 v2418;
  uint64_t (**v2419)();
  __int128 v2420;
  uint64_t v2421;
  uint64_t (**v2422)();
  __int128 v2423;
  uint64_t (**v2424)();
  __int128 v2425;
  void *v2426[3];
  void *v2427;
  __int128 v2428;
  void *v2429;
  __int128 v2430;
  __int128 v2431;
  uint64_t (**v2432)();
  __int128 v2433;
  uint64_t v2434;
  uint64_t (**v2435)();
  __int128 v2436;
  uint64_t (**v2437)();
  __int128 v2438;
  void *v2439[3];
  void *v2440;
  __int128 v2441;
  void *v2442;
  __int128 v2443;
  __int128 v2444;
  uint64_t (**v2445)();
  __int128 v2446;
  uint64_t v2447;
  uint64_t (**v2448)();
  __int128 v2449;
  uint64_t (**v2450)();
  __int128 v2451;
  __int128 v2452;
  __int128 v2453;
  void *v2454[2];
  void *v2455;
  void *v2456[4];
  _QWORD v2457[2];
  void *v2458[4];
  void *v2459[4];
  __int128 v2460;
  _QWORD v2461[2];
  __int128 v2462;
  _QWORD v2463[5];

  v0 = MEMORY[0x24BDAC7A8]();
  v2 = v1;
  v4 = v3;
  v5 = (uint64_t *)v0;
  v2463[2] = *MEMORY[0x24BDAC8D0];
  v7 = *(void **)v3;
  v6 = *(unint64_t **)(v3 + 8);
  v2166 = *(void **)v3;
  v2167 = (std::__shared_weak_count *)v6;
  if (v6)
  {
    v8 = v6 + 1;
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  v10 = *v1;
  v11 = (unint64_t *)v1[1];
  v2164 = *v1;
  v2165 = (std::__shared_weak_count *)v11;
  if (v11)
  {
    v12 = v11 + 1;
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  if (*(char *)(v10 + 31) < 0)
  {
    sub_20E860C04(__dst, *(void **)(v10 + 8), *(_QWORD *)(v10 + 16));
  }
  else
  {
    v14 = *(_OWORD *)(v10 + 8);
    __dst[2] = *(void **)(v10 + 24);
    *(_OWORD *)__dst = v14;
  }
  if (*(char *)(v10 + 55) < 0)
  {
    sub_20E860C04(__src, *(void **)(v10 + 32), *(_QWORD *)(v10 + 40));
  }
  else
  {
    *(_OWORD *)__src = *(_OWORD *)(v10 + 32);
    __src[2] = *(void **)(v10 + 48);
  }
  v2052[0] = v7;
  v2052[1] = v6;
  v2167 = 0;
  v2166 = 0;
  v2035[0] = (void *)v10;
  v2035[1] = v11;
  if (v11)
  {
    v15 = v11 + 1;
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
  }
  if (SHIBYTE(__dst[2]) < 0)
  {
    sub_20E860C04(v2151, __dst[0], (unint64_t)__dst[1]);
  }
  else
  {
    *(_OWORD *)v2151 = *(_OWORD *)__dst;
    v2151[2] = __dst[2];
  }
  if (SHIBYTE(__src[2]) < 0)
  {
    sub_20E860C04(__p, __src[0], (unint64_t)__src[1]);
  }
  else
  {
    *(_OWORD *)__p = *(_OWORD *)__src;
    __p[2] = __src[2];
  }
  *(void **)((char *)v2413 + 7) = *(void **)((char *)&__dst[1] + 7);
  v17 = __dst[0];
  v2413[0] = __dst[1];
  v18 = HIBYTE(__dst[2]);
  memset(__dst, 0, sizeof(__dst));
  v2426[0] = v2413[0];
  *(void **)((char *)v2426 + 7) = *(void **)((char *)v2413 + 7);
  *(void **)((char *)v2413 + 7) = 0;
  v2413[0] = 0;
  v2066[0] = v7;
  v2066[1] = v6;
  if (v6)
  {
    v19 = v6 + 1;
    do
      v20 = __ldxr(v19);
    while (__stxr(v20 + 1, v19));
  }
  v21 = (char *)operator new();
  v2439[0] = v2426[0];
  *(void **)((char *)v2439 + 7) = *(void **)((char *)v2426 + 7);
  v2426[0] = 0;
  *(void **)((char *)v2426 + 7) = 0;
  v22 = *(_OWORD *)v2066;
  v2066[0] = 0;
  v2066[1] = 0;
  v21[8] = 1;
  *((_QWORD *)v21 + 4) = 0;
  *((_QWORD *)v21 + 5) = 0;
  *(_QWORD *)v21 = &off_24C9D1B60;
  *((_QWORD *)v21 + 2) = &unk_24C9D1BD8;
  *((_QWORD *)v21 + 3) = &unk_24C9D1C18;
  v23 = v2439[0];
  *(void **)(v21 + 63) = *(void **)((char *)v2439 + 7);
  *((_QWORD *)v21 + 6) = v17;
  *((_QWORD *)v21 + 7) = v23;
  v21[71] = v18;
  v2439[0] = 0;
  *(void **)((char *)v2439 + 7) = 0;
  *(_OWORD *)(v21 + 72) = v22;
  v2083[1] = 0;
  v2083[0] = 0;
  v24 = (_QWORD *)operator new();
  *v24 = &off_24C9D1D20;
  v24[1] = v10;
  v24[2] = v11;
  v2035[1] = 0;
  v2035[0] = 0;
  *((_QWORD *)v21 + 18) = 0;
  *((_QWORD *)v21 + 11) = v24;
  *((_QWORD *)v21 + 12) = v21 + 96;
  *((_QWORD *)v21 + 13) = v21 + 96;
  *((_QWORD *)v21 + 14) = 0;
  *((_QWORD *)v21 + 15) = v21 + 120;
  *((_QWORD *)v21 + 16) = v21 + 120;
  *((_QWORD *)v21 + 17) = 0;
  if (!*((_QWORD *)v21 + 9)
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 109, (uint64_t)"scheduler_", 10, (uint64_t)"scheduler must be valid", 23, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v25 = (std::__shared_weak_count *)operator new();
  v25->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v25->__shared_owners_;
  v25->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9D2210;
  v25->__shared_weak_owners_ = 0;
  v25[1].__vftable = (std::__shared_weak_count_vtbl *)v21;
  v27 = (std::__shared_weak_count *)*((_QWORD *)v21 + 5);
  if (v27)
  {
    if (v27->__shared_owners_ != -1)
      goto LABEL_40;
    do
      v28 = __ldxr(p_shared_owners);
    while (__stxr(v28 + 1, p_shared_owners));
    p_shared_weak_owners = (unint64_t *)&v25->__shared_weak_owners_;
    do
      v30 = __ldxr(p_shared_weak_owners);
    while (__stxr(v30 + 1, p_shared_weak_owners));
    *((_QWORD *)v21 + 4) = v21;
    *((_QWORD *)v21 + 5) = v25;
    std::__shared_weak_count::__release_weak(v27);
  }
  else
  {
    do
      v31 = __ldxr(p_shared_owners);
    while (__stxr(v31 + 1, p_shared_owners));
    v32 = (unint64_t *)&v25->__shared_weak_owners_;
    do
      v33 = __ldxr(v32);
    while (__stxr(v33 + 1, v32));
    *((_QWORD *)v21 + 4) = v21;
    *((_QWORD *)v21 + 5) = v25;
  }
  do
    v34 = __ldaxr(p_shared_owners);
  while (__stlxr(v34 - 1, p_shared_owners));
  if (!v34)
  {
    ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
    std::__shared_weak_count::__release_weak(v25);
  }
LABEL_40:
  if (v2083[1])
  {
    v35 = (unint64_t *)((char *)v2083[1] + 8);
    do
      v36 = __ldaxr(v35);
    while (__stlxr(v36 - 1, v35));
    if (!v36)
    {
      (*(void (**)(void *))(*(_QWORD *)v2083[1] + 16))(v2083[1]);
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v2083[1]);
    }
  }
  v2083[0] = v21;
  v2083[1] = v25;
  if (v2066[1])
  {
    v37 = (unint64_t *)((char *)v2066[1] + 8);
    do
      v38 = __ldaxr(v37);
    while (__stlxr(v38 - 1, v37));
    if (!v38)
    {
      (*(void (**)(void *))(*(_QWORD *)v2066[1] + 16))(v2066[1]);
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v2066[1]);
    }
  }
  v39 = *(_OWORD *)v2052;
  v2052[0] = 0;
  v2052[1] = 0;
  v2169 = *(_OWORD *)v2151;
  v2168 = &off_24C9D1070;
  v2170 = v2151[2];
  memset(v2151, 0, sizeof(v2151));
  v2171 = *(_OWORD *)__p;
  v40 = __p[2];
  memset(__p, 0, sizeof(__p));
  v2173 = v39;
  v2066[1] = 0;
  v2066[0] = 0;
  v41 = v2083[0];
  v42 = (char *)v2083[1];
  v2172 = v40;
  v2174 = *(_OWORD *)v2083;
  v2083[0] = 0;
  v2083[1] = 0;
  if (*((_QWORD *)&v2174 + 1))
  {
    v43 = (unint64_t *)(v42 + 16);
    do
      v44 = __ldxr(v43);
    while (__stxr(v44 + 1, v43));
  }
  v2175 = &off_24C9D10A0;
  v45 = (_QWORD *)operator new();
  *v45 = &off_24C9D2260;
  v45[1] = v41;
  v45[2] = v42;
  *(_QWORD *)&v2176 = v45;
  v47 = *((_QWORD *)&v2174 + 1);
  v46 = v2174;
  if (!*((_QWORD *)&v2174 + 1))
  {
    *((_QWORD *)&v2176 + 1) = v2174;
    v2177 = 0;
    if ((_QWORD)v2174)
      v51 = v2174 + 16;
    else
      v51 = 0;
    goto LABEL_70;
  }
  v48 = (unint64_t *)(*((_QWORD *)&v2174 + 1) + 16);
  do
    v49 = __ldxr(v48);
  while (__stxr(v49 + 1, v48));
  v50 = *((_QWORD *)&v2174 + 1);
  *((_QWORD *)&v2176 + 1) = v46;
  v2177 = v47;
  if ((_QWORD)v2174)
    v51 = v2174 + 16;
  else
    v51 = 0;
  if (!*((_QWORD *)&v2174 + 1))
  {
    v46 = v2174;
LABEL_70:
    v54 = 0;
    v2178 = &off_24C9D10D8;
    v2179 = v51;
    goto LABEL_71;
  }
  v52 = (unint64_t *)(*((_QWORD *)&v2174 + 1) + 16);
  do
    v53 = __ldxr(v52);
  while (__stxr(v53 + 1, v52));
  v54 = *((_QWORD *)&v2174 + 1);
  v46 = v2174;
  v2178 = &off_24C9D10D8;
  *(_QWORD *)&v2179 = v51;
  *((_QWORD *)&v2179 + 1) = v50;
  if (*((_QWORD *)&v2174 + 1))
  {
    v55 = (unint64_t *)(*((_QWORD *)&v2174 + 1) + 16);
    do
      v56 = __ldxr(v55);
    while (__stxr(v56 + 1, v55));
  }
LABEL_71:
  if (v46)
    v57 = v46 + 24;
  else
    v57 = 0;
  v2180 = &off_24C9D1148;
  *(_QWORD *)&v2181 = v57;
  *((_QWORD *)&v2181 + 1) = v54;
  if ((SHIBYTE(__p[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v2151[2]) & 0x80000000) == 0)
      goto LABEL_76;
LABEL_79:
    operator delete(v2151[0]);
    v58 = (std::__shared_weak_count *)v2035[1];
    if (!v2035[1])
      goto LABEL_84;
    goto LABEL_80;
  }
  operator delete(__p[0]);
  if (SHIBYTE(v2151[2]) < 0)
    goto LABEL_79;
LABEL_76:
  v58 = (std::__shared_weak_count *)v2035[1];
  if (!v2035[1])
    goto LABEL_84;
LABEL_80:
  v59 = (unint64_t *)&v58->__shared_owners_;
  do
    v60 = __ldaxr(v59);
  while (__stlxr(v60 - 1, v59));
  if (!v60)
  {
    ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
    std::__shared_weak_count::__release_weak(v58);
  }
  if (!v2052[1])
    goto LABEL_88;
LABEL_84:
  v61 = (unint64_t *)((char *)v2052[1] + 8);
  do
    v62 = __ldaxr(v61);
  while (__stlxr(v62 - 1, v61));
  if (!v62)
  {
    (*(void (**)(void *))(*(_QWORD *)v2052[1] + 16))(v2052[1]);
    std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v2052[1]);
    if ((SHIBYTE(__src[2]) & 0x80000000) == 0)
    {
LABEL_89:
      if ((SHIBYTE(__dst[2]) & 0x80000000) == 0)
        goto LABEL_90;
LABEL_94:
      operator delete(__dst[0]);
      if (v2164)
        goto LABEL_96;
      goto LABEL_95;
    }
  }
  else
  {
LABEL_88:
    if ((SHIBYTE(__src[2]) & 0x80000000) == 0)
      goto LABEL_89;
  }
  operator delete(__src[0]);
  if (SHIBYTE(__dst[2]) < 0)
    goto LABEL_94;
LABEL_90:
  if (v2164)
    goto LABEL_96;
LABEL_95:
  if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/Channel.h", 542, (uint64_t)"worker", 6, (uint64_t)"Callable must be valid", 22, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
LABEL_96:
  v64 = *(void **)v4;
  v63 = *(unint64_t **)(v4 + 8);
  v2149 = *(void **)v4;
  v2150 = (std::__shared_weak_count *)v63;
  if (v63)
  {
    v65 = v63 + 1;
    do
      v66 = __ldxr(v65);
    while (__stxr(v66 + 1, v65));
  }
  v67 = *v2;
  v68 = (unint64_t *)v2[1];
  if (*v2)
    v69 = *v2 + 56;
  else
    v69 = 0;
  v2147 = v69;
  v2148 = (std::__shared_weak_count *)v68;
  if (v68)
  {
    v70 = v68 + 1;
    do
      v71 = __ldxr(v70);
    while (__stxr(v71 + 1, v70));
  }
  if (*(char *)(v69 + 31) < 0)
  {
    sub_20E860C04(__src, *(void **)(v69 + 8), *(_QWORD *)(v69 + 16));
  }
  else
  {
    v72 = *(_OWORD *)(v69 + 8);
    __src[2] = *(void **)(v69 + 24);
    *(_OWORD *)__src = v72;
  }
  if (*(char *)(v67 + 111) < 0)
  {
    sub_20E860C04(v2083, *(void **)(v67 + 88), *(_QWORD *)(v67 + 96));
  }
  else
  {
    *(_OWORD *)v2083 = *(_OWORD *)(v67 + 88);
    v2083[2] = *(void **)(v67 + 104);
  }
  v2035[0] = v64;
  v2035[1] = v63;
  v2150 = 0;
  v2149 = 0;
  v2439[0] = (void *)v69;
  v2439[1] = v68;
  if (v68)
  {
    v73 = v68 + 1;
    do
      v74 = __ldxr(v73);
    while (__stxr(v74 + 1, v73));
  }
  if (SHIBYTE(__src[2]) < 0)
  {
    sub_20E860C04(__p, __src[0], (unint64_t)__src[1]);
  }
  else
  {
    *(_OWORD *)__p = *(_OWORD *)__src;
    __p[2] = __src[2];
  }
  if (SHIBYTE(v2083[2]) < 0)
  {
    sub_20E860C04(__dst, v2083[0], (unint64_t)v2083[1]);
  }
  else
  {
    *(_OWORD *)__dst = *(_OWORD *)v2083;
    __dst[2] = v2083[2];
  }
  *(void **)((char *)v2400 + 7) = *(void **)((char *)&__src[1] + 7);
  v75 = __src[0];
  v2400[0] = __src[1];
  v76 = HIBYTE(__src[2]);
  memset(__src, 0, sizeof(__src));
  v2413[0] = v2400[0];
  *(void **)((char *)v2413 + 7) = *(void **)((char *)v2400 + 7);
  *(void **)((char *)v2400 + 7) = 0;
  v2400[0] = 0;
  v2052[0] = v64;
  v2052[1] = v63;
  if (v63)
  {
    v77 = v63 + 1;
    do
      v78 = __ldxr(v77);
    while (__stxr(v78 + 1, v77));
  }
  v2009 = v5;
  v79 = (char *)operator new();
  v2426[0] = v2413[0];
  *(void **)((char *)v2426 + 7) = *(void **)((char *)v2413 + 7);
  v2413[0] = 0;
  *(void **)((char *)v2413 + 7) = 0;
  v80 = *(_OWORD *)v2052;
  v2052[0] = 0;
  v2052[1] = 0;
  v79[8] = 1;
  *((_QWORD *)v79 + 4) = 0;
  *((_QWORD *)v79 + 5) = 0;
  *(_QWORD *)v79 = &off_24C9D22D8;
  *((_QWORD *)v79 + 2) = &unk_24C9D2350;
  *((_QWORD *)v79 + 3) = &unk_24C9D2390;
  v81 = v2426[0];
  *(void **)(v79 + 63) = *(void **)((char *)v2426 + 7);
  *((_QWORD *)v79 + 6) = v75;
  *((_QWORD *)v79 + 7) = v81;
  v79[71] = v76;
  v2426[0] = 0;
  *(void **)((char *)v2426 + 7) = 0;
  *(_OWORD *)(v79 + 72) = v80;
  v2066[1] = 0;
  v2066[0] = 0;
  v82 = (_QWORD *)operator new();
  *v82 = &off_24C9D2478;
  v82[1] = v69;
  v82[2] = v68;
  v2439[1] = 0;
  v2439[0] = 0;
  *((_QWORD *)v79 + 18) = 0;
  *((_QWORD *)v79 + 11) = v82;
  *((_QWORD *)v79 + 12) = v79 + 96;
  *((_QWORD *)v79 + 13) = v79 + 96;
  *((_QWORD *)v79 + 14) = 0;
  *((_QWORD *)v79 + 15) = v79 + 120;
  *((_QWORD *)v79 + 16) = v79 + 120;
  *((_QWORD *)v79 + 17) = 0;
  if (!*((_QWORD *)v79 + 9)
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 109, (uint64_t)"scheduler_", 10, (uint64_t)"scheduler must be valid", 23, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v83 = (std::__shared_weak_count *)operator new();
  v83->__shared_owners_ = 0;
  v84 = (unint64_t *)&v83->__shared_owners_;
  v83->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9D2918;
  v83->__shared_weak_owners_ = 0;
  v83[1].__vftable = (std::__shared_weak_count_vtbl *)v79;
  v85 = (std::__shared_weak_count *)*((_QWORD *)v79 + 5);
  if (v85)
  {
    if (v85->__shared_owners_ != -1)
      goto LABEL_138;
    do
      v86 = __ldxr(v84);
    while (__stxr(v86 + 1, v84));
    v87 = (unint64_t *)&v83->__shared_weak_owners_;
    do
      v88 = __ldxr(v87);
    while (__stxr(v88 + 1, v87));
    *((_QWORD *)v79 + 4) = v79;
    *((_QWORD *)v79 + 5) = v83;
    std::__shared_weak_count::__release_weak(v85);
  }
  else
  {
    do
      v89 = __ldxr(v84);
    while (__stxr(v89 + 1, v84));
    v90 = (unint64_t *)&v83->__shared_weak_owners_;
    do
      v91 = __ldxr(v90);
    while (__stxr(v91 + 1, v90));
    *((_QWORD *)v79 + 4) = v79;
    *((_QWORD *)v79 + 5) = v83;
  }
  do
    v92 = __ldaxr(v84);
  while (__stlxr(v92 - 1, v84));
  if (!v92)
  {
    ((void (*)(std::__shared_weak_count *))v83->__on_zero_shared)(v83);
    std::__shared_weak_count::__release_weak(v83);
  }
LABEL_138:
  if (v2066[1])
  {
    v93 = (unint64_t *)((char *)v2066[1] + 8);
    do
      v94 = __ldaxr(v93);
    while (__stlxr(v94 - 1, v93));
    if (!v94)
    {
      (*(void (**)(void *))(*(_QWORD *)v2066[1] + 16))(v2066[1]);
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v2066[1]);
    }
  }
  v2066[0] = v79;
  v2066[1] = v83;
  if (v2052[1])
  {
    v95 = (unint64_t *)((char *)v2052[1] + 8);
    do
      v96 = __ldaxr(v95);
    while (__stlxr(v96 - 1, v95));
    if (!v96)
    {
      (*(void (**)(void *))(*(_QWORD *)v2052[1] + 16))(v2052[1]);
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v2052[1]);
    }
  }
  v97 = *(_OWORD *)v2035;
  v2035[0] = 0;
  v2035[1] = 0;
  *(_OWORD *)&v2151[1] = *(_OWORD *)__p;
  v2151[0] = &off_24C9D1180;
  v2152 = __p[2];
  memset(__p, 0, sizeof(__p));
  v2153 = *(_OWORD *)__dst;
  v98 = __dst[2];
  memset(__dst, 0, sizeof(__dst));
  v2155 = v97;
  v2052[1] = 0;
  v2052[0] = 0;
  v99 = v2066[0];
  v100 = (char *)v2066[1];
  v2154 = v98;
  v2156 = *(_OWORD *)v2066;
  v2066[0] = 0;
  v2066[1] = 0;
  if (*((_QWORD *)&v2156 + 1))
  {
    v101 = (unint64_t *)(v100 + 16);
    do
      v102 = __ldxr(v101);
    while (__stxr(v102 + 1, v101));
  }
  v2157 = &off_24C9D11B0;
  v103 = (_QWORD *)operator new();
  *v103 = &off_24C9D2968;
  v103[1] = v99;
  v103[2] = v100;
  *(_QWORD *)&v2158 = v103;
  v105 = *((_QWORD *)&v2156 + 1);
  v104 = v2156;
  if (!*((_QWORD *)&v2156 + 1))
  {
    *((_QWORD *)&v2158 + 1) = v2156;
    v2159 = 0;
    if ((_QWORD)v2156)
      v109 = v2156 + 16;
    else
      v109 = 0;
    goto LABEL_168;
  }
  v106 = (unint64_t *)(*((_QWORD *)&v2156 + 1) + 16);
  do
    v107 = __ldxr(v106);
  while (__stxr(v107 + 1, v106));
  v108 = *((_QWORD *)&v2156 + 1);
  *((_QWORD *)&v2158 + 1) = v104;
  v2159 = v105;
  if ((_QWORD)v2156)
    v109 = v2156 + 16;
  else
    v109 = 0;
  if (!*((_QWORD *)&v2156 + 1))
  {
    v104 = v2156;
LABEL_168:
    v112 = 0;
    v2160 = &off_24C9D10D8;
    v2161 = v109;
    goto LABEL_169;
  }
  v110 = (unint64_t *)(*((_QWORD *)&v2156 + 1) + 16);
  do
    v111 = __ldxr(v110);
  while (__stxr(v111 + 1, v110));
  v112 = *((_QWORD *)&v2156 + 1);
  v104 = v2156;
  v2160 = &off_24C9D10D8;
  *(_QWORD *)&v2161 = v109;
  *((_QWORD *)&v2161 + 1) = v108;
  if (*((_QWORD *)&v2156 + 1))
  {
    v113 = (unint64_t *)(*((_QWORD *)&v2156 + 1) + 16);
    do
      v114 = __ldxr(v113);
    while (__stxr(v114 + 1, v113));
  }
LABEL_169:
  if (v104)
    v115 = v104 + 24;
  else
    v115 = 0;
  v2162 = &off_24C9D1148;
  *(_QWORD *)&v2163 = v115;
  *((_QWORD *)&v2163 + 1) = v112;
  if ((SHIBYTE(__dst[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(__p[2]) & 0x80000000) == 0)
      goto LABEL_174;
LABEL_177:
    operator delete(__p[0]);
    v116 = (std::__shared_weak_count *)v2439[1];
    if (!v2439[1])
      goto LABEL_182;
    goto LABEL_178;
  }
  operator delete(__dst[0]);
  if (SHIBYTE(__p[2]) < 0)
    goto LABEL_177;
LABEL_174:
  v116 = (std::__shared_weak_count *)v2439[1];
  if (!v2439[1])
    goto LABEL_182;
LABEL_178:
  v117 = (unint64_t *)&v116->__shared_owners_;
  do
    v118 = __ldaxr(v117);
  while (__stlxr(v118 - 1, v117));
  if (!v118)
  {
    ((void (*)(std::__shared_weak_count *))v116->__on_zero_shared)(v116);
    std::__shared_weak_count::__release_weak(v116);
  }
  if (!v2035[1])
    goto LABEL_186;
LABEL_182:
  v119 = (unint64_t *)((char *)v2035[1] + 8);
  do
    v120 = __ldaxr(v119);
  while (__stlxr(v120 - 1, v119));
  if (!v120)
  {
    (*(void (**)(void *))(*(_QWORD *)v2035[1] + 16))(v2035[1]);
    std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v2035[1]);
    if ((SHIBYTE(v2083[2]) & 0x80000000) == 0)
    {
LABEL_187:
      if ((SHIBYTE(__src[2]) & 0x80000000) == 0)
        goto LABEL_188;
LABEL_192:
      operator delete(__src[0]);
      if (v2147)
        goto LABEL_194;
      goto LABEL_193;
    }
  }
  else
  {
LABEL_186:
    if ((SHIBYTE(v2083[2]) & 0x80000000) == 0)
      goto LABEL_187;
  }
  operator delete(v2083[0]);
  if (SHIBYTE(__src[2]) < 0)
    goto LABEL_192;
LABEL_188:
  if (v2147)
    goto LABEL_194;
LABEL_193:
  if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/Channel.h", 542, (uint64_t)"worker", 6, (uint64_t)"Callable must be valid", 22, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
LABEL_194:
  v122 = *(void **)v4;
  v121 = *(unint64_t **)(v4 + 8);
  v2132 = *(void **)v4;
  v2133 = (std::__shared_weak_count *)v121;
  if (v121)
  {
    v123 = v121 + 1;
    do
      v124 = __ldxr(v123);
    while (__stxr(v124 + 1, v123));
  }
  v125 = *v2;
  v126 = (unint64_t *)v2[1];
  if (*v2)
    v127 = *v2 + 112;
  else
    v127 = 0;
  v2130 = v127;
  v2131 = (std::__shared_weak_count *)v126;
  if (v126)
  {
    v128 = v126 + 1;
    do
      v129 = __ldxr(v128);
    while (__stxr(v129 + 1, v128));
  }
  if (*(char *)(v127 + 31) < 0)
  {
    sub_20E860C04(v2083, *(void **)(v127 + 8), *(_QWORD *)(v127 + 16));
  }
  else
  {
    v130 = *(_OWORD *)(v127 + 8);
    v2083[2] = *(void **)(v127 + 24);
    *(_OWORD *)v2083 = v130;
  }
  if (*(char *)(v125 + 167) < 0)
  {
    sub_20E860C04(v2066, *(void **)(v125 + 144), *(_QWORD *)(v125 + 152));
  }
  else
  {
    *(_OWORD *)v2066 = *(_OWORD *)(v125 + 144);
    v2066[2] = *(void **)(v125 + 160);
  }
  v2439[0] = v122;
  v2439[1] = v121;
  v2133 = 0;
  v2132 = 0;
  v2426[0] = (void *)v127;
  v2426[1] = v126;
  if (v126)
  {
    v131 = v126 + 1;
    do
      v132 = __ldxr(v131);
    while (__stxr(v132 + 1, v131));
  }
  if (SHIBYTE(v2083[2]) < 0)
  {
    sub_20E860C04(__dst, v2083[0], (unint64_t)v2083[1]);
  }
  else
  {
    *(_OWORD *)__dst = *(_OWORD *)v2083;
    __dst[2] = v2083[2];
  }
  if (SHIBYTE(v2066[2]) < 0)
  {
    sub_20E860C04(__src, v2066[0], (unint64_t)v2066[1]);
  }
  else
  {
    *(_OWORD *)__src = *(_OWORD *)v2066;
    __src[2] = v2066[2];
  }
  *(void **)((char *)v2387 + 7) = *(void **)((char *)&v2083[1] + 7);
  v133 = v2083[0];
  v2387[0] = v2083[1];
  v134 = HIBYTE(v2083[2]);
  memset(v2083, 0, sizeof(v2083));
  v2400[0] = v2387[0];
  *(void **)((char *)v2400 + 7) = *(void **)((char *)v2387 + 7);
  *(void **)((char *)v2387 + 7) = 0;
  v2387[0] = 0;
  v2035[0] = v122;
  v2035[1] = v121;
  if (v121)
  {
    v135 = v121 + 1;
    do
      v136 = __ldxr(v135);
    while (__stxr(v136 + 1, v135));
  }
  v137 = (char *)operator new();
  v2413[0] = v2400[0];
  *(void **)((char *)v2413 + 7) = *(void **)((char *)v2400 + 7);
  v2400[0] = 0;
  *(void **)((char *)v2400 + 7) = 0;
  v138 = *(_OWORD *)v2035;
  v2035[0] = 0;
  v2035[1] = 0;
  v137[8] = 1;
  *((_QWORD *)v137 + 4) = 0;
  *((_QWORD *)v137 + 5) = 0;
  *(_QWORD *)v137 = &off_24C9D29E0;
  *((_QWORD *)v137 + 2) = &unk_24C9D2A58;
  *((_QWORD *)v137 + 3) = &unk_24C9D2A98;
  v139 = v2413[0];
  *(void **)(v137 + 63) = *(void **)((char *)v2413 + 7);
  *((_QWORD *)v137 + 6) = v133;
  *((_QWORD *)v137 + 7) = v139;
  v137[71] = v134;
  v2413[0] = 0;
  *(void **)((char *)v2413 + 7) = 0;
  *(_OWORD *)(v137 + 72) = v138;
  v2052[1] = 0;
  v2052[0] = 0;
  v140 = (_QWORD *)operator new();
  *v140 = &off_24C9D2B80;
  v140[1] = v127;
  v140[2] = v126;
  v2426[1] = 0;
  v2426[0] = 0;
  *((_QWORD *)v137 + 11) = v140;
  *((_QWORD *)v137 + 12) = v137 + 96;
  *((_QWORD *)v137 + 13) = v137 + 96;
  *((_QWORD *)v137 + 14) = 0;
  *((_QWORD *)v137 + 15) = v137 + 120;
  *((_QWORD *)v137 + 16) = v137 + 120;
  *((_QWORD *)v137 + 17) = 0;
  v141 = operator new();
  v142 = operator new(0x10uLL);
  *v142 = 0;
  v142[1] = 0;
  *(_QWORD *)v141 = v142;
  *(_QWORD *)(v141 + 8) = v142 + 2;
  *(_QWORD *)(v141 + 16) = v142 + 2;
  *(_QWORD *)(v141 + 24) = 0;
  *(_QWORD *)(v141 + 32) = 0;
  *(_QWORD *)(v141 + 40) = 0;
  *(_BYTE *)(v141 + 48) = 1;
  *(_QWORD *)(v141 + 56) = 850045863;
  *(_OWORD *)(v141 + 64) = 0u;
  *(_OWORD *)(v141 + 80) = 0u;
  *(_OWORD *)(v141 + 96) = 0u;
  *(_QWORD *)(v141 + 112) = 0;
  *((_QWORD *)v137 + 18) = v141;
  if (!*((_QWORD *)v137 + 9)
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 109, (uint64_t)"scheduler_", 10, (uint64_t)"scheduler must be valid", 23, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v143 = (std::__shared_weak_count *)operator new();
  v143->__shared_owners_ = 0;
  v144 = (unint64_t *)&v143->__shared_owners_;
  v143->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9D2F20;
  v143->__shared_weak_owners_ = 0;
  v143[1].__vftable = (std::__shared_weak_count_vtbl *)v137;
  v145 = (std::__shared_weak_count *)*((_QWORD *)v137 + 5);
  if (v145)
  {
    if (v145->__shared_owners_ != -1)
      goto LABEL_236;
    do
      v146 = __ldxr(v144);
    while (__stxr(v146 + 1, v144));
    v147 = (unint64_t *)&v143->__shared_weak_owners_;
    do
      v148 = __ldxr(v147);
    while (__stxr(v148 + 1, v147));
    *((_QWORD *)v137 + 4) = v137;
    *((_QWORD *)v137 + 5) = v143;
    std::__shared_weak_count::__release_weak(v145);
  }
  else
  {
    do
      v149 = __ldxr(v144);
    while (__stxr(v149 + 1, v144));
    v150 = (unint64_t *)&v143->__shared_weak_owners_;
    do
      v151 = __ldxr(v150);
    while (__stxr(v151 + 1, v150));
    *((_QWORD *)v137 + 4) = v137;
    *((_QWORD *)v137 + 5) = v143;
  }
  do
    v152 = __ldaxr(v144);
  while (__stlxr(v152 - 1, v144));
  if (!v152)
  {
    ((void (*)(std::__shared_weak_count *))v143->__on_zero_shared)(v143);
    std::__shared_weak_count::__release_weak(v143);
  }
LABEL_236:
  if (v2052[1])
  {
    v153 = (unint64_t *)((char *)v2052[1] + 8);
    do
      v154 = __ldaxr(v153);
    while (__stlxr(v154 - 1, v153));
    if (!v154)
    {
      (*(void (**)(void *))(*(_QWORD *)v2052[1] + 16))(v2052[1]);
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v2052[1]);
    }
  }
  v2052[0] = v137;
  v2052[1] = v143;
  if (v2035[1])
  {
    v155 = (unint64_t *)((char *)v2035[1] + 8);
    do
      v156 = __ldaxr(v155);
    while (__stlxr(v156 - 1, v155));
    if (!v156)
    {
      (*(void (**)(void *))(*(_QWORD *)v2035[1] + 16))(v2035[1]);
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v2035[1]);
    }
  }
  v157 = *(_OWORD *)v2439;
  v2439[0] = 0;
  v2439[1] = 0;
  *(_OWORD *)&__p[1] = *(_OWORD *)__dst;
  __p[0] = &off_24C9D11E8;
  v2135 = __dst[2];
  memset(__dst, 0, sizeof(__dst));
  v2136 = *(_OWORD *)__src;
  v158 = __src[2];
  memset(__src, 0, sizeof(__src));
  v2138 = v157;
  v2035[1] = 0;
  v2035[0] = 0;
  v159 = v2052[0];
  v160 = (char *)v2052[1];
  v2137 = v158;
  v2139 = *(_OWORD *)v2052;
  v2052[0] = 0;
  v2052[1] = 0;
  if (*((_QWORD *)&v2139 + 1))
  {
    v161 = (unint64_t *)(v160 + 16);
    do
      v162 = __ldxr(v161);
    while (__stxr(v162 + 1, v161));
  }
  v2140 = &off_24C9B6AE0;
  v163 = (_QWORD *)operator new();
  *v163 = &off_24C9D2F70;
  v163[1] = v159;
  v163[2] = v160;
  *(_QWORD *)&v2141 = v163;
  v165 = *((_QWORD *)&v2139 + 1);
  v164 = v2139;
  if (!*((_QWORD *)&v2139 + 1))
  {
    *((_QWORD *)&v2141 + 1) = v2139;
    v2142 = 0;
    if ((_QWORD)v2139)
      v169 = v2139 + 16;
    else
      v169 = 0;
    goto LABEL_266;
  }
  v166 = (unint64_t *)(*((_QWORD *)&v2139 + 1) + 16);
  do
    v167 = __ldxr(v166);
  while (__stxr(v167 + 1, v166));
  v168 = *((_QWORD *)&v2139 + 1);
  *((_QWORD *)&v2141 + 1) = v164;
  v2142 = v165;
  if ((_QWORD)v2139)
    v169 = v2139 + 16;
  else
    v169 = 0;
  if (!*((_QWORD *)&v2139 + 1))
  {
    v164 = v2139;
LABEL_266:
    v172 = 0;
    v2143 = &off_24C9D10D8;
    v2144 = v169;
    goto LABEL_267;
  }
  v170 = (unint64_t *)(*((_QWORD *)&v2139 + 1) + 16);
  do
    v171 = __ldxr(v170);
  while (__stxr(v171 + 1, v170));
  v172 = *((_QWORD *)&v2139 + 1);
  v164 = v2139;
  v2143 = &off_24C9D10D8;
  *(_QWORD *)&v2144 = v169;
  *((_QWORD *)&v2144 + 1) = v168;
  if (*((_QWORD *)&v2139 + 1))
  {
    v173 = (unint64_t *)(*((_QWORD *)&v2139 + 1) + 16);
    do
      v174 = __ldxr(v173);
    while (__stxr(v174 + 1, v173));
  }
LABEL_267:
  if (v164)
    v175 = v164 + 24;
  else
    v175 = 0;
  v2145 = &off_24C9D1148;
  *(_QWORD *)&v2146 = v175;
  *((_QWORD *)&v2146 + 1) = v172;
  if ((SHIBYTE(__src[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(__dst[2]) & 0x80000000) == 0)
      goto LABEL_272;
LABEL_275:
    operator delete(__dst[0]);
    v176 = (std::__shared_weak_count *)v2426[1];
    if (!v2426[1])
      goto LABEL_280;
    goto LABEL_276;
  }
  operator delete(__src[0]);
  if (SHIBYTE(__dst[2]) < 0)
    goto LABEL_275;
LABEL_272:
  v176 = (std::__shared_weak_count *)v2426[1];
  if (!v2426[1])
    goto LABEL_280;
LABEL_276:
  v177 = (unint64_t *)&v176->__shared_owners_;
  do
    v178 = __ldaxr(v177);
  while (__stlxr(v178 - 1, v177));
  if (!v178)
  {
    ((void (*)(std::__shared_weak_count *))v176->__on_zero_shared)(v176);
    std::__shared_weak_count::__release_weak(v176);
  }
LABEL_280:
  v179 = (std::__shared_weak_count *)v2439[1];
  if (!v2439[1])
    goto LABEL_284;
  v180 = (unint64_t *)((char *)v2439[1] + 8);
  do
    v181 = __ldaxr(v180);
  while (__stlxr(v181 - 1, v180));
  if (!v181)
  {
    ((void (*)(std::__shared_weak_count *))v179->__on_zero_shared)(v179);
    std::__shared_weak_count::__release_weak(v179);
    if ((SHIBYTE(v2066[2]) & 0x80000000) == 0)
    {
LABEL_285:
      if ((SHIBYTE(v2083[2]) & 0x80000000) == 0)
        goto LABEL_286;
LABEL_290:
      operator delete(v2083[0]);
      if (v2130)
        goto LABEL_292;
      goto LABEL_291;
    }
  }
  else
  {
LABEL_284:
    if ((SHIBYTE(v2066[2]) & 0x80000000) == 0)
      goto LABEL_285;
  }
  operator delete(v2066[0]);
  if (SHIBYTE(v2083[2]) < 0)
    goto LABEL_290;
LABEL_286:
  if (v2130)
    goto LABEL_292;
LABEL_291:
  if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/Channel.h", 542, (uint64_t)"worker", 6, (uint64_t)"Callable must be valid", 22, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
LABEL_292:
  v183 = *(void **)v4;
  v182 = *(unint64_t **)(v4 + 8);
  v2115 = *(void **)v4;
  v2116 = (std::__shared_weak_count *)v182;
  if (v182)
  {
    v184 = v182 + 1;
    do
      v185 = __ldxr(v184);
    while (__stxr(v185 + 1, v184));
  }
  v186 = *v2;
  v187 = (unint64_t *)v2[1];
  if (*v2)
    v188 = *v2 + 168;
  else
    v188 = 0;
  v2113 = v188;
  v2114 = (std::__shared_weak_count *)v187;
  if (v187)
  {
    v189 = v187 + 1;
    do
      v190 = __ldxr(v189);
    while (__stxr(v190 + 1, v189));
  }
  if (*(char *)(v188 + 31) < 0)
  {
    sub_20E860C04(v2066, *(void **)(v188 + 8), *(_QWORD *)(v188 + 16));
  }
  else
  {
    v191 = *(_OWORD *)(v188 + 8);
    v2066[2] = *(void **)(v188 + 24);
    *(_OWORD *)v2066 = v191;
  }
  if (*(char *)(v186 + 223) < 0)
  {
    sub_20E860C04(v2052, *(void **)(v186 + 200), *(_QWORD *)(v186 + 208));
  }
  else
  {
    *(_OWORD *)v2052 = *(_OWORD *)(v186 + 200);
    v2052[2] = *(void **)(v186 + 216);
  }
  v2426[0] = v183;
  v2426[1] = v182;
  v2116 = 0;
  v2115 = 0;
  v2413[0] = (void *)v188;
  v2413[1] = v187;
  if (v187)
  {
    v192 = v187 + 1;
    do
      v193 = __ldxr(v192);
    while (__stxr(v193 + 1, v192));
  }
  if (SHIBYTE(v2066[2]) < 0)
  {
    sub_20E860C04(__src, v2066[0], (unint64_t)v2066[1]);
  }
  else
  {
    *(_OWORD *)__src = *(_OWORD *)v2066;
    __src[2] = v2066[2];
  }
  if (SHIBYTE(v2052[2]) < 0)
  {
    sub_20E860C04(v2083, v2052[0], (unint64_t)v2052[1]);
  }
  else
  {
    *(_OWORD *)v2083 = *(_OWORD *)v2052;
    v2083[2] = v2052[2];
  }
  *(void **)((char *)v2374 + 7) = *(void **)((char *)&v2066[1] + 7);
  v194 = v2066[0];
  v2374[0] = v2066[1];
  v195 = HIBYTE(v2066[2]);
  memset(v2066, 0, sizeof(v2066));
  v2387[0] = v2374[0];
  *(void **)((char *)v2387 + 7) = *(void **)((char *)v2374 + 7);
  *(void **)((char *)v2374 + 7) = 0;
  v2374[0] = 0;
  v2439[0] = v183;
  v2439[1] = v182;
  if (v182)
  {
    v196 = v182 + 1;
    do
      v197 = __ldxr(v196);
    while (__stxr(v197 + 1, v196));
  }
  v198 = (char *)operator new();
  v2400[0] = v2387[0];
  *(void **)((char *)v2400 + 7) = *(void **)((char *)v2387 + 7);
  v2387[0] = 0;
  *(void **)((char *)v2387 + 7) = 0;
  v199 = *(_OWORD *)v2439;
  v2439[0] = 0;
  v2439[1] = 0;
  v198[8] = 1;
  *((_QWORD *)v198 + 4) = 0;
  *((_QWORD *)v198 + 5) = 0;
  *(_QWORD *)v198 = &off_24C9D2FD8;
  *((_QWORD *)v198 + 2) = &unk_24C9D3050;
  *((_QWORD *)v198 + 3) = &unk_24C9D3090;
  v200 = v2400[0];
  *(void **)(v198 + 63) = *(void **)((char *)v2400 + 7);
  *((_QWORD *)v198 + 6) = v194;
  *((_QWORD *)v198 + 7) = v200;
  v198[71] = v195;
  v2400[0] = 0;
  *(void **)((char *)v2400 + 7) = 0;
  *(_OWORD *)(v198 + 72) = v199;
  v2035[1] = 0;
  v2035[0] = 0;
  v201 = (_QWORD *)operator new();
  *v201 = &off_24C9D3178;
  v201[1] = v188;
  v201[2] = v187;
  v2413[1] = 0;
  v2413[0] = 0;
  *((_QWORD *)v198 + 18) = 0;
  *((_QWORD *)v198 + 11) = v201;
  *((_QWORD *)v198 + 12) = v198 + 96;
  *((_QWORD *)v198 + 13) = v198 + 96;
  *((_QWORD *)v198 + 14) = 0;
  *((_QWORD *)v198 + 15) = v198 + 120;
  *((_QWORD *)v198 + 16) = v198 + 120;
  *((_QWORD *)v198 + 17) = 0;
  if (!*((_QWORD *)v198 + 9)
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 109, (uint64_t)"scheduler_", 10, (uint64_t)"scheduler must be valid", 23, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v202 = (std::__shared_weak_count *)operator new();
  v202->__shared_owners_ = 0;
  v203 = (unint64_t *)&v202->__shared_owners_;
  v202->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9D3618;
  v202->__shared_weak_owners_ = 0;
  v202[1].__vftable = (std::__shared_weak_count_vtbl *)v198;
  v204 = (std::__shared_weak_count *)*((_QWORD *)v198 + 5);
  if (v204)
  {
    if (v204->__shared_owners_ != -1)
      goto LABEL_334;
    do
      v205 = __ldxr(v203);
    while (__stxr(v205 + 1, v203));
    v206 = (unint64_t *)&v202->__shared_weak_owners_;
    do
      v207 = __ldxr(v206);
    while (__stxr(v207 + 1, v206));
    *((_QWORD *)v198 + 4) = v198;
    *((_QWORD *)v198 + 5) = v202;
    std::__shared_weak_count::__release_weak(v204);
  }
  else
  {
    do
      v208 = __ldxr(v203);
    while (__stxr(v208 + 1, v203));
    v209 = (unint64_t *)&v202->__shared_weak_owners_;
    do
      v210 = __ldxr(v209);
    while (__stxr(v210 + 1, v209));
    *((_QWORD *)v198 + 4) = v198;
    *((_QWORD *)v198 + 5) = v202;
  }
  do
    v211 = __ldaxr(v203);
  while (__stlxr(v211 - 1, v203));
  if (!v211)
  {
    ((void (*)(std::__shared_weak_count *))v202->__on_zero_shared)(v202);
    std::__shared_weak_count::__release_weak(v202);
  }
LABEL_334:
  if (v2035[1])
  {
    v212 = (unint64_t *)((char *)v2035[1] + 8);
    do
      v213 = __ldaxr(v212);
    while (__stlxr(v213 - 1, v212));
    if (!v213)
    {
      (*(void (**)(void *))(*(_QWORD *)v2035[1] + 16))(v2035[1]);
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v2035[1]);
    }
  }
  v2035[0] = v198;
  v2035[1] = v202;
  v214 = (std::__shared_weak_count *)v2439[1];
  if (v2439[1])
  {
    v215 = (unint64_t *)((char *)v2439[1] + 8);
    do
      v216 = __ldaxr(v215);
    while (__stlxr(v216 - 1, v215));
    if (!v216)
    {
      ((void (*)(std::__shared_weak_count *))v214->__on_zero_shared)(v214);
      std::__shared_weak_count::__release_weak(v214);
    }
  }
  v217 = *(_OWORD *)v2426;
  v2426[0] = 0;
  v2426[1] = 0;
  *(_OWORD *)&__dst[1] = *(_OWORD *)__src;
  __dst[0] = &off_24C9D1218;
  v2118 = __src[2];
  memset(__src, 0, sizeof(__src));
  v2119 = *(_OWORD *)v2083;
  v218 = v2083[2];
  memset(v2083, 0, sizeof(v2083));
  v2121 = v217;
  v2439[1] = 0;
  v2439[0] = 0;
  v219 = v2035[0];
  v220 = (char *)v2035[1];
  v2120 = v218;
  v2122 = *(_OWORD *)v2035;
  v2035[0] = 0;
  v2035[1] = 0;
  if (*((_QWORD *)&v2122 + 1))
  {
    v221 = (unint64_t *)(v220 + 16);
    do
      v222 = __ldxr(v221);
    while (__stxr(v222 + 1, v221));
  }
  v2123 = &off_24C9D1248;
  v223 = (_QWORD *)operator new();
  *v223 = &off_24C9D3668;
  v223[1] = v219;
  v223[2] = v220;
  *(_QWORD *)&v2124 = v223;
  v225 = *((_QWORD *)&v2122 + 1);
  v224 = v2122;
  if (!*((_QWORD *)&v2122 + 1))
  {
    *((_QWORD *)&v2124 + 1) = v2122;
    v2125 = 0;
    if ((_QWORD)v2122)
      v229 = v2122 + 16;
    else
      v229 = 0;
    goto LABEL_364;
  }
  v226 = (unint64_t *)(*((_QWORD *)&v2122 + 1) + 16);
  do
    v227 = __ldxr(v226);
  while (__stxr(v227 + 1, v226));
  v228 = *((_QWORD *)&v2122 + 1);
  *((_QWORD *)&v2124 + 1) = v224;
  v2125 = v225;
  if ((_QWORD)v2122)
    v229 = v2122 + 16;
  else
    v229 = 0;
  if (!*((_QWORD *)&v2122 + 1))
  {
    v224 = v2122;
LABEL_364:
    v232 = 0;
    v2126 = &off_24C9B2520;
    v2127 = v229;
    goto LABEL_365;
  }
  v230 = (unint64_t *)(*((_QWORD *)&v2122 + 1) + 16);
  do
    v231 = __ldxr(v230);
  while (__stxr(v231 + 1, v230));
  v232 = *((_QWORD *)&v2122 + 1);
  v224 = v2122;
  v2126 = &off_24C9B2520;
  *(_QWORD *)&v2127 = v229;
  *((_QWORD *)&v2127 + 1) = v228;
  if (*((_QWORD *)&v2122 + 1))
  {
    v233 = (unint64_t *)(*((_QWORD *)&v2122 + 1) + 16);
    do
      v234 = __ldxr(v233);
    while (__stxr(v234 + 1, v233));
  }
LABEL_365:
  if (v224)
    v235 = v224 + 24;
  else
    v235 = 0;
  v2128 = &off_24C9B2310;
  *(_QWORD *)&v2129 = v235;
  *((_QWORD *)&v2129 + 1) = v232;
  if ((SHIBYTE(v2083[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(__src[2]) & 0x80000000) == 0)
      goto LABEL_370;
LABEL_373:
    operator delete(__src[0]);
    v236 = (std::__shared_weak_count *)v2413[1];
    if (!v2413[1])
      goto LABEL_378;
    goto LABEL_374;
  }
  operator delete(v2083[0]);
  if (SHIBYTE(__src[2]) < 0)
    goto LABEL_373;
LABEL_370:
  v236 = (std::__shared_weak_count *)v2413[1];
  if (!v2413[1])
    goto LABEL_378;
LABEL_374:
  v237 = (unint64_t *)&v236->__shared_owners_;
  do
    v238 = __ldaxr(v237);
  while (__stlxr(v238 - 1, v237));
  if (!v238)
  {
    ((void (*)(std::__shared_weak_count *))v236->__on_zero_shared)(v236);
    std::__shared_weak_count::__release_weak(v236);
  }
LABEL_378:
  v239 = (std::__shared_weak_count *)v2426[1];
  if (!v2426[1])
    goto LABEL_382;
  v240 = (unint64_t *)((char *)v2426[1] + 8);
  do
    v241 = __ldaxr(v240);
  while (__stlxr(v241 - 1, v240));
  if (!v241)
  {
    ((void (*)(std::__shared_weak_count *))v239->__on_zero_shared)(v239);
    std::__shared_weak_count::__release_weak(v239);
    if ((SHIBYTE(v2052[2]) & 0x80000000) == 0)
    {
LABEL_383:
      if ((SHIBYTE(v2066[2]) & 0x80000000) == 0)
        goto LABEL_384;
LABEL_388:
      operator delete(v2066[0]);
      if (v2113)
        goto LABEL_390;
      goto LABEL_389;
    }
  }
  else
  {
LABEL_382:
    if ((SHIBYTE(v2052[2]) & 0x80000000) == 0)
      goto LABEL_383;
  }
  operator delete(v2052[0]);
  if (SHIBYTE(v2066[2]) < 0)
    goto LABEL_388;
LABEL_384:
  if (v2113)
    goto LABEL_390;
LABEL_389:
  if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/Channel.h", 542, (uint64_t)"worker", 6, (uint64_t)"Callable must be valid", 22, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
LABEL_390:
  v243 = *(void **)v4;
  v242 = *(unint64_t **)(v4 + 8);
  v2098 = *(void **)v4;
  v2099 = (std::__shared_weak_count *)v242;
  if (v242)
  {
    v244 = v242 + 1;
    do
      v245 = __ldxr(v244);
    while (__stxr(v245 + 1, v244));
  }
  v246 = *v2;
  v247 = (unint64_t *)v2[1];
  if (*v2)
    v248 = *v2 + 224;
  else
    v248 = 0;
  v2096 = v248;
  v2097 = (std::__shared_weak_count *)v247;
  if (v247)
  {
    v249 = v247 + 1;
    do
      v250 = __ldxr(v249);
    while (__stxr(v250 + 1, v249));
  }
  if (*(char *)(v248 + 31) < 0)
  {
    sub_20E860C04(v2052, *(void **)(v248 + 8), *(_QWORD *)(v248 + 16));
  }
  else
  {
    v251 = *(_OWORD *)(v248 + 8);
    v2052[2] = *(void **)(v248 + 24);
    *(_OWORD *)v2052 = v251;
  }
  if (*(char *)(v246 + 279) < 0)
  {
    sub_20E860C04(v2035, *(void **)(v246 + 256), *(_QWORD *)(v246 + 264));
  }
  else
  {
    *(_OWORD *)v2035 = *(_OWORD *)(v246 + 256);
    v2035[2] = *(void **)(v246 + 272);
  }
  v2413[0] = v243;
  v2413[1] = v242;
  v2099 = 0;
  v2098 = 0;
  v2400[0] = (void *)v248;
  v2400[1] = v247;
  if (v247)
  {
    v252 = v247 + 1;
    do
      v253 = __ldxr(v252);
    while (__stxr(v253 + 1, v252));
  }
  if (SHIBYTE(v2052[2]) < 0)
  {
    sub_20E860C04(v2083, v2052[0], (unint64_t)v2052[1]);
  }
  else
  {
    *(_OWORD *)v2083 = *(_OWORD *)v2052;
    v2083[2] = v2052[2];
  }
  if (SHIBYTE(v2035[2]) < 0)
  {
    sub_20E860C04(v2066, v2035[0], (unint64_t)v2035[1]);
  }
  else
  {
    *(_OWORD *)v2066 = *(_OWORD *)v2035;
    v2066[2] = v2035[2];
  }
  *(void **)((char *)v2361 + 7) = *(void **)((char *)&v2052[1] + 7);
  v254 = v2052[0];
  v2361[0] = v2052[1];
  v255 = HIBYTE(v2052[2]);
  memset(v2052, 0, sizeof(v2052));
  v2374[0] = v2361[0];
  *(void **)((char *)v2374 + 7) = *(void **)((char *)v2361 + 7);
  *(void **)((char *)v2361 + 7) = 0;
  v2361[0] = 0;
  v2426[0] = v243;
  v2426[1] = v242;
  if (v242)
  {
    v256 = v242 + 1;
    do
      v257 = __ldxr(v256);
    while (__stxr(v257 + 1, v256));
  }
  v258 = (char *)operator new();
  v2387[0] = v2374[0];
  *(void **)((char *)v2387 + 7) = *(void **)((char *)v2374 + 7);
  v2374[0] = 0;
  *(void **)((char *)v2374 + 7) = 0;
  v259 = *(_OWORD *)v2426;
  v2426[0] = 0;
  v2426[1] = 0;
  v258[8] = 1;
  *((_QWORD *)v258 + 4) = 0;
  *((_QWORD *)v258 + 5) = 0;
  *(_QWORD *)v258 = &off_24C9D36E0;
  *((_QWORD *)v258 + 2) = &unk_24C9D3758;
  *((_QWORD *)v258 + 3) = &unk_24C9D3798;
  v260 = v2387[0];
  *(void **)(v258 + 63) = *(void **)((char *)v2387 + 7);
  *((_QWORD *)v258 + 6) = v254;
  *((_QWORD *)v258 + 7) = v260;
  v258[71] = v255;
  v2387[0] = 0;
  *(void **)((char *)v2387 + 7) = 0;
  *(_OWORD *)(v258 + 72) = v259;
  v2439[1] = 0;
  v2439[0] = 0;
  v261 = (_QWORD *)operator new();
  *v261 = &off_24C9D3890;
  v261[1] = v248;
  v261[2] = v247;
  v2400[1] = 0;
  v2400[0] = 0;
  *((_QWORD *)v258 + 18) = 0;
  *((_QWORD *)v258 + 11) = v261;
  *((_QWORD *)v258 + 12) = v258 + 96;
  *((_QWORD *)v258 + 13) = v258 + 96;
  *((_QWORD *)v258 + 14) = 0;
  *((_QWORD *)v258 + 15) = v258 + 120;
  *((_QWORD *)v258 + 16) = v258 + 120;
  *((_QWORD *)v258 + 17) = 0;
  if (!*((_QWORD *)v258 + 9)
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 109, (uint64_t)"scheduler_", 10, (uint64_t)"scheduler must be valid", 23, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v262 = (std::__shared_weak_count *)operator new();
  v262->__shared_owners_ = 0;
  v263 = (unint64_t *)&v262->__shared_owners_;
  v262->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9D3D80;
  v262->__shared_weak_owners_ = 0;
  v262[1].__vftable = (std::__shared_weak_count_vtbl *)v258;
  v264 = (std::__shared_weak_count *)*((_QWORD *)v258 + 5);
  if (v264)
  {
    if (v264->__shared_owners_ != -1)
      goto LABEL_432;
    do
      v265 = __ldxr(v263);
    while (__stxr(v265 + 1, v263));
    v266 = (unint64_t *)&v262->__shared_weak_owners_;
    do
      v267 = __ldxr(v266);
    while (__stxr(v267 + 1, v266));
    *((_QWORD *)v258 + 4) = v258;
    *((_QWORD *)v258 + 5) = v262;
    std::__shared_weak_count::__release_weak(v264);
  }
  else
  {
    do
      v268 = __ldxr(v263);
    while (__stxr(v268 + 1, v263));
    v269 = (unint64_t *)&v262->__shared_weak_owners_;
    do
      v270 = __ldxr(v269);
    while (__stxr(v270 + 1, v269));
    *((_QWORD *)v258 + 4) = v258;
    *((_QWORD *)v258 + 5) = v262;
  }
  do
    v271 = __ldaxr(v263);
  while (__stlxr(v271 - 1, v263));
  if (!v271)
  {
    ((void (*)(std::__shared_weak_count *))v262->__on_zero_shared)(v262);
    std::__shared_weak_count::__release_weak(v262);
  }
LABEL_432:
  v272 = (std::__shared_weak_count *)v2439[1];
  if (v2439[1])
  {
    v273 = (unint64_t *)((char *)v2439[1] + 8);
    do
      v274 = __ldaxr(v273);
    while (__stlxr(v274 - 1, v273));
    if (!v274)
    {
      ((void (*)(std::__shared_weak_count *))v272->__on_zero_shared)(v272);
      std::__shared_weak_count::__release_weak(v272);
    }
  }
  v2439[0] = v258;
  v2439[1] = v262;
  v275 = (std::__shared_weak_count *)v2426[1];
  if (v2426[1])
  {
    v276 = (unint64_t *)((char *)v2426[1] + 8);
    do
      v277 = __ldaxr(v276);
    while (__stlxr(v277 - 1, v276));
    if (!v277)
    {
      ((void (*)(std::__shared_weak_count *))v275->__on_zero_shared)(v275);
      std::__shared_weak_count::__release_weak(v275);
    }
  }
  v278 = *(_OWORD *)v2413;
  v2413[0] = 0;
  v2413[1] = 0;
  *(_OWORD *)&__src[1] = *(_OWORD *)v2083;
  __src[0] = &off_24C9D1280;
  v2101 = v2083[2];
  memset(v2083, 0, sizeof(v2083));
  v2102 = *(_OWORD *)v2066;
  v279 = v2066[2];
  memset(v2066, 0, sizeof(v2066));
  v2104 = v278;
  v2426[1] = 0;
  v2426[0] = 0;
  v280 = v2439[0];
  v281 = (char *)v2439[1];
  v2103 = v279;
  v2105 = *(_OWORD *)v2439;
  v2439[0] = 0;
  v2439[1] = 0;
  if (*((_QWORD *)&v2105 + 1))
  {
    v282 = (unint64_t *)(v281 + 16);
    do
      v283 = __ldxr(v282);
    while (__stxr(v283 + 1, v282));
  }
  v2106 = &off_24C9CC538;
  v284 = (_QWORD *)operator new();
  *v284 = &off_24C9D3DD0;
  v284[1] = v280;
  v284[2] = v281;
  *(_QWORD *)&v2107 = v284;
  v286 = *((_QWORD *)&v2105 + 1);
  v285 = v2105;
  if (!*((_QWORD *)&v2105 + 1))
  {
    *((_QWORD *)&v2107 + 1) = v2105;
    v2108 = 0;
    if ((_QWORD)v2105)
      v290 = v2105 + 16;
    else
      v290 = 0;
    goto LABEL_462;
  }
  v287 = (unint64_t *)(*((_QWORD *)&v2105 + 1) + 16);
  do
    v288 = __ldxr(v287);
  while (__stxr(v288 + 1, v287));
  v289 = *((_QWORD *)&v2105 + 1);
  *((_QWORD *)&v2107 + 1) = v285;
  v2108 = v286;
  if ((_QWORD)v2105)
    v290 = v2105 + 16;
  else
    v290 = 0;
  if (!*((_QWORD *)&v2105 + 1))
  {
    v285 = v2105;
LABEL_462:
    v293 = 0;
    v2109 = &off_24C9D12B0;
    v2110 = v290;
    goto LABEL_463;
  }
  v291 = (unint64_t *)(*((_QWORD *)&v2105 + 1) + 16);
  do
    v292 = __ldxr(v291);
  while (__stxr(v292 + 1, v291));
  v293 = *((_QWORD *)&v2105 + 1);
  v285 = v2105;
  v2109 = &off_24C9D12B0;
  *(_QWORD *)&v2110 = v290;
  *((_QWORD *)&v2110 + 1) = v289;
  if (*((_QWORD *)&v2105 + 1))
  {
    v294 = (unint64_t *)(*((_QWORD *)&v2105 + 1) + 16);
    do
      v295 = __ldxr(v294);
    while (__stxr(v295 + 1, v294));
  }
LABEL_463:
  if (v285)
    v296 = v285 + 24;
  else
    v296 = 0;
  v2111 = &off_24C9B2310;
  *(_QWORD *)&v2112 = v296;
  *((_QWORD *)&v2112 + 1) = v293;
  if ((SHIBYTE(v2066[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v2083[2]) & 0x80000000) == 0)
      goto LABEL_468;
LABEL_471:
    operator delete(v2083[0]);
    v297 = (std::__shared_weak_count *)v2400[1];
    if (!v2400[1])
      goto LABEL_476;
    goto LABEL_472;
  }
  operator delete(v2066[0]);
  if (SHIBYTE(v2083[2]) < 0)
    goto LABEL_471;
LABEL_468:
  v297 = (std::__shared_weak_count *)v2400[1];
  if (!v2400[1])
    goto LABEL_476;
LABEL_472:
  v298 = (unint64_t *)&v297->__shared_owners_;
  do
    v299 = __ldaxr(v298);
  while (__stlxr(v299 - 1, v298));
  if (!v299)
  {
    ((void (*)(std::__shared_weak_count *))v297->__on_zero_shared)(v297);
    std::__shared_weak_count::__release_weak(v297);
  }
LABEL_476:
  v300 = (std::__shared_weak_count *)v2413[1];
  if (!v2413[1])
    goto LABEL_480;
  v301 = (unint64_t *)((char *)v2413[1] + 8);
  do
    v302 = __ldaxr(v301);
  while (__stlxr(v302 - 1, v301));
  if (!v302)
  {
    ((void (*)(std::__shared_weak_count *))v300->__on_zero_shared)(v300);
    std::__shared_weak_count::__release_weak(v300);
    if ((SHIBYTE(v2035[2]) & 0x80000000) == 0)
    {
LABEL_481:
      if ((SHIBYTE(v2052[2]) & 0x80000000) == 0)
        goto LABEL_482;
LABEL_486:
      operator delete(v2052[0]);
      if (v2096)
        goto LABEL_488;
      goto LABEL_487;
    }
  }
  else
  {
LABEL_480:
    if ((SHIBYTE(v2035[2]) & 0x80000000) == 0)
      goto LABEL_481;
  }
  operator delete(v2035[0]);
  if (SHIBYTE(v2052[2]) < 0)
    goto LABEL_486;
LABEL_482:
  if (v2096)
    goto LABEL_488;
LABEL_487:
  if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/Channel.h", 542, (uint64_t)"worker", 6, (uint64_t)"Callable must be valid", 22, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
LABEL_488:
  v304 = *(void **)v4;
  v303 = *(unint64_t **)(v4 + 8);
  v2081 = *(void **)v4;
  v2082 = (std::__shared_weak_count *)v303;
  if (v303)
  {
    v305 = v303 + 1;
    do
      v306 = __ldxr(v305);
    while (__stxr(v306 + 1, v305));
  }
  v307 = *v2;
  v308 = (unint64_t *)v2[1];
  if (*v2)
    v309 = *v2 + 280;
  else
    v309 = 0;
  v2079 = v309;
  v2080 = (std::__shared_weak_count *)v308;
  if (v308)
  {
    v310 = v308 + 1;
    do
      v311 = __ldxr(v310);
    while (__stxr(v311 + 1, v310));
  }
  if (*(char *)(v309 + 31) < 0)
  {
    sub_20E860C04(v2035, *(void **)(v309 + 8), *(_QWORD *)(v309 + 16));
  }
  else
  {
    v312 = *(_OWORD *)(v309 + 8);
    v2035[2] = *(void **)(v309 + 24);
    *(_OWORD *)v2035 = v312;
  }
  if (*(char *)(v307 + 335) < 0)
  {
    sub_20E860C04(v2439, *(void **)(v307 + 312), *(_QWORD *)(v307 + 320));
  }
  else
  {
    *(_OWORD *)v2439 = *(_OWORD *)(v307 + 312);
    v2439[2] = *(void **)(v307 + 328);
  }
  v2400[0] = v304;
  v2400[1] = v303;
  v2082 = 0;
  v2081 = 0;
  v2387[0] = (void *)v309;
  v2387[1] = v308;
  if (v308)
  {
    v313 = v308 + 1;
    do
      v314 = __ldxr(v313);
    while (__stxr(v314 + 1, v313));
  }
  if (SHIBYTE(v2035[2]) < 0)
  {
    sub_20E860C04(v2066, v2035[0], (unint64_t)v2035[1]);
  }
  else
  {
    *(_OWORD *)v2066 = *(_OWORD *)v2035;
    v2066[2] = v2035[2];
  }
  if (SHIBYTE(v2439[2]) < 0)
  {
    sub_20E860C04(v2052, v2439[0], (unint64_t)v2439[1]);
  }
  else
  {
    *(_OWORD *)v2052 = *(_OWORD *)v2439;
    v2052[2] = v2439[2];
  }
  *(void **)((char *)v2348 + 7) = *(void **)((char *)&v2035[1] + 7);
  v315 = v2035[0];
  v2348[0] = v2035[1];
  v316 = HIBYTE(v2035[2]);
  memset(v2035, 0, sizeof(v2035));
  v2361[0] = v2348[0];
  *(void **)((char *)v2361 + 7) = *(void **)((char *)v2348 + 7);
  *(void **)((char *)v2348 + 7) = 0;
  v2348[0] = 0;
  v2413[0] = v304;
  v2413[1] = v303;
  if (v303)
  {
    v317 = v303 + 1;
    do
      v318 = __ldxr(v317);
    while (__stxr(v318 + 1, v317));
  }
  v319 = (char *)operator new();
  v2374[0] = v2361[0];
  *(void **)((char *)v2374 + 7) = *(void **)((char *)v2361 + 7);
  v2361[0] = 0;
  *(void **)((char *)v2361 + 7) = 0;
  v320 = *(_OWORD *)v2413;
  v2413[0] = 0;
  v2413[1] = 0;
  v319[8] = 1;
  *((_QWORD *)v319 + 4) = 0;
  *((_QWORD *)v319 + 5) = 0;
  *(_QWORD *)v319 = &off_24C9D3E48;
  *((_QWORD *)v319 + 2) = &unk_24C9D3EC0;
  *((_QWORD *)v319 + 3) = &unk_24C9D3F00;
  v321 = v2374[0];
  *(void **)(v319 + 63) = *(void **)((char *)v2374 + 7);
  *((_QWORD *)v319 + 6) = v315;
  *((_QWORD *)v319 + 7) = v321;
  v319[71] = v316;
  v2374[0] = 0;
  *(void **)((char *)v2374 + 7) = 0;
  *(_OWORD *)(v319 + 72) = v320;
  v2426[1] = 0;
  v2426[0] = 0;
  v322 = (_QWORD *)operator new();
  *v322 = &off_24C9D3FE8;
  v322[1] = v309;
  v322[2] = v308;
  v2387[1] = 0;
  v2387[0] = 0;
  *((_QWORD *)v319 + 18) = 0;
  *((_QWORD *)v319 + 11) = v322;
  *((_QWORD *)v319 + 12) = v319 + 96;
  *((_QWORD *)v319 + 13) = v319 + 96;
  *((_QWORD *)v319 + 14) = 0;
  *((_QWORD *)v319 + 15) = v319 + 120;
  *((_QWORD *)v319 + 16) = v319 + 120;
  *((_QWORD *)v319 + 17) = 0;
  if (!*((_QWORD *)v319 + 9)
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 109, (uint64_t)"scheduler_", 10, (uint64_t)"scheduler must be valid", 23, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v323 = (std::__shared_weak_count *)operator new();
  v323->__shared_owners_ = 0;
  v324 = (unint64_t *)&v323->__shared_owners_;
  v323->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9D4488;
  v323->__shared_weak_owners_ = 0;
  v323[1].__vftable = (std::__shared_weak_count_vtbl *)v319;
  v325 = (std::__shared_weak_count *)*((_QWORD *)v319 + 5);
  if (v325)
  {
    if (v325->__shared_owners_ != -1)
      goto LABEL_530;
    do
      v326 = __ldxr(v324);
    while (__stxr(v326 + 1, v324));
    v327 = (unint64_t *)&v323->__shared_weak_owners_;
    do
      v328 = __ldxr(v327);
    while (__stxr(v328 + 1, v327));
    *((_QWORD *)v319 + 4) = v319;
    *((_QWORD *)v319 + 5) = v323;
    std::__shared_weak_count::__release_weak(v325);
  }
  else
  {
    do
      v329 = __ldxr(v324);
    while (__stxr(v329 + 1, v324));
    v330 = (unint64_t *)&v323->__shared_weak_owners_;
    do
      v331 = __ldxr(v330);
    while (__stxr(v331 + 1, v330));
    *((_QWORD *)v319 + 4) = v319;
    *((_QWORD *)v319 + 5) = v323;
  }
  do
    v332 = __ldaxr(v324);
  while (__stlxr(v332 - 1, v324));
  if (!v332)
  {
    ((void (*)(std::__shared_weak_count *))v323->__on_zero_shared)(v323);
    std::__shared_weak_count::__release_weak(v323);
  }
LABEL_530:
  v333 = (std::__shared_weak_count *)v2426[1];
  if (v2426[1])
  {
    v334 = (unint64_t *)((char *)v2426[1] + 8);
    do
      v335 = __ldaxr(v334);
    while (__stlxr(v335 - 1, v334));
    if (!v335)
    {
      ((void (*)(std::__shared_weak_count *))v333->__on_zero_shared)(v333);
      std::__shared_weak_count::__release_weak(v333);
    }
  }
  v2426[0] = v319;
  v2426[1] = v323;
  v336 = (std::__shared_weak_count *)v2413[1];
  if (v2413[1])
  {
    v337 = (unint64_t *)((char *)v2413[1] + 8);
    do
      v338 = __ldaxr(v337);
    while (__stlxr(v338 - 1, v337));
    if (!v338)
    {
      ((void (*)(std::__shared_weak_count *))v336->__on_zero_shared)(v336);
      std::__shared_weak_count::__release_weak(v336);
    }
  }
  v339 = *(_OWORD *)v2400;
  v2400[0] = 0;
  v2400[1] = 0;
  *(_OWORD *)&v2083[1] = *(_OWORD *)v2066;
  v2083[0] = &off_24C9D12E8;
  v2084 = v2066[2];
  memset(v2066, 0, sizeof(v2066));
  v2085 = *(_OWORD *)v2052;
  v340 = v2052[2];
  memset(v2052, 0, sizeof(v2052));
  v2087 = v339;
  v2413[1] = 0;
  v2413[0] = 0;
  v341 = v2426[0];
  v342 = (char *)v2426[1];
  v2086 = v340;
  v2088 = *(_OWORD *)v2426;
  v2426[0] = 0;
  v2426[1] = 0;
  if (*((_QWORD *)&v2088 + 1))
  {
    v343 = (unint64_t *)(v342 + 16);
    do
      v344 = __ldxr(v343);
    while (__stxr(v344 + 1, v343));
  }
  v2089 = &off_24C9CC570;
  v345 = (_QWORD *)operator new();
  *v345 = &off_24C9D44D8;
  v345[1] = v341;
  v345[2] = v342;
  *(_QWORD *)&v2090 = v345;
  v347 = *((_QWORD *)&v2088 + 1);
  v346 = v2088;
  if (!*((_QWORD *)&v2088 + 1))
  {
    *((_QWORD *)&v2090 + 1) = v2088;
    v2091 = 0;
    if ((_QWORD)v2088)
      v351 = v2088 + 16;
    else
      v351 = 0;
    goto LABEL_560;
  }
  v348 = (unint64_t *)(*((_QWORD *)&v2088 + 1) + 16);
  do
    v349 = __ldxr(v348);
  while (__stxr(v349 + 1, v348));
  v350 = *((_QWORD *)&v2088 + 1);
  *((_QWORD *)&v2090 + 1) = v346;
  v2091 = v347;
  if ((_QWORD)v2088)
    v351 = v2088 + 16;
  else
    v351 = 0;
  if (!*((_QWORD *)&v2088 + 1))
  {
    v346 = v2088;
LABEL_560:
    v354 = 0;
    v2092 = &off_24C9B2520;
    v2093 = v351;
    goto LABEL_561;
  }
  v352 = (unint64_t *)(*((_QWORD *)&v2088 + 1) + 16);
  do
    v353 = __ldxr(v352);
  while (__stxr(v353 + 1, v352));
  v354 = *((_QWORD *)&v2088 + 1);
  v346 = v2088;
  v2092 = &off_24C9B2520;
  *(_QWORD *)&v2093 = v351;
  *((_QWORD *)&v2093 + 1) = v350;
  if (*((_QWORD *)&v2088 + 1))
  {
    v355 = (unint64_t *)(*((_QWORD *)&v2088 + 1) + 16);
    do
      v356 = __ldxr(v355);
    while (__stxr(v356 + 1, v355));
  }
LABEL_561:
  if (v346)
    v357 = v346 + 24;
  else
    v357 = 0;
  v2094 = &off_24C9B2310;
  *(_QWORD *)&v2095 = v357;
  *((_QWORD *)&v2095 + 1) = v354;
  if ((SHIBYTE(v2052[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v2066[2]) & 0x80000000) == 0)
      goto LABEL_566;
LABEL_569:
    operator delete(v2066[0]);
    v358 = (std::__shared_weak_count *)v2387[1];
    if (!v2387[1])
      goto LABEL_574;
    goto LABEL_570;
  }
  operator delete(v2052[0]);
  if (SHIBYTE(v2066[2]) < 0)
    goto LABEL_569;
LABEL_566:
  v358 = (std::__shared_weak_count *)v2387[1];
  if (!v2387[1])
    goto LABEL_574;
LABEL_570:
  v359 = (unint64_t *)&v358->__shared_owners_;
  do
    v360 = __ldaxr(v359);
  while (__stlxr(v360 - 1, v359));
  if (!v360)
  {
    ((void (*)(std::__shared_weak_count *))v358->__on_zero_shared)(v358);
    std::__shared_weak_count::__release_weak(v358);
  }
LABEL_574:
  v361 = (std::__shared_weak_count *)v2400[1];
  if (!v2400[1])
    goto LABEL_578;
  v362 = (unint64_t *)((char *)v2400[1] + 8);
  do
    v363 = __ldaxr(v362);
  while (__stlxr(v363 - 1, v362));
  if (!v363)
  {
    ((void (*)(std::__shared_weak_count *))v361->__on_zero_shared)(v361);
    std::__shared_weak_count::__release_weak(v361);
    if ((SHIBYTE(v2439[2]) & 0x80000000) == 0)
    {
LABEL_579:
      if ((SHIBYTE(v2035[2]) & 0x80000000) == 0)
        goto LABEL_580;
LABEL_584:
      operator delete(v2035[0]);
      if (v2079)
        goto LABEL_586;
      goto LABEL_585;
    }
  }
  else
  {
LABEL_578:
    if ((SHIBYTE(v2439[2]) & 0x80000000) == 0)
      goto LABEL_579;
  }
  operator delete(v2439[0]);
  if (SHIBYTE(v2035[2]) < 0)
    goto LABEL_584;
LABEL_580:
  if (v2079)
    goto LABEL_586;
LABEL_585:
  if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/Channel.h", 542, (uint64_t)"worker", 6, (uint64_t)"Callable must be valid", 22, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
LABEL_586:
  v365 = *(void **)v4;
  v364 = *(unint64_t **)(v4 + 8);
  v2064 = *(void **)v4;
  v2065 = (std::__shared_weak_count *)v364;
  if (v364)
  {
    v366 = v364 + 1;
    do
      v367 = __ldxr(v366);
    while (__stxr(v367 + 1, v366));
  }
  v368 = *v2;
  v369 = (unint64_t *)v2[1];
  if (*v2)
    v370 = *v2 + 336;
  else
    v370 = 0;
  v2062 = v370;
  v2063 = (std::__shared_weak_count *)v369;
  if (v369)
  {
    v371 = v369 + 1;
    do
      v372 = __ldxr(v371);
    while (__stxr(v372 + 1, v371));
  }
  if (*(char *)(v370 + 31) < 0)
  {
    sub_20E860C04(v2439, *(void **)(v370 + 8), *(_QWORD *)(v370 + 16));
  }
  else
  {
    v373 = *(_OWORD *)(v370 + 8);
    v2439[2] = *(void **)(v370 + 24);
    *(_OWORD *)v2439 = v373;
  }
  if (*(char *)(v368 + 391) < 0)
  {
    sub_20E860C04(v2426, *(void **)(v368 + 368), *(_QWORD *)(v368 + 376));
  }
  else
  {
    *(_OWORD *)v2426 = *(_OWORD *)(v368 + 368);
    v2426[2] = *(void **)(v368 + 384);
  }
  v2387[0] = v365;
  v2387[1] = v364;
  v2065 = 0;
  v2064 = 0;
  v2374[0] = (void *)v370;
  v2374[1] = v369;
  if (v369)
  {
    v374 = v369 + 1;
    do
      v375 = __ldxr(v374);
    while (__stxr(v375 + 1, v374));
  }
  if (SHIBYTE(v2439[2]) < 0)
  {
    sub_20E860C04(v2052, v2439[0], (unint64_t)v2439[1]);
  }
  else
  {
    *(_OWORD *)v2052 = *(_OWORD *)v2439;
    v2052[2] = v2439[2];
  }
  if (SHIBYTE(v2426[2]) < 0)
  {
    sub_20E860C04(v2035, v2426[0], (unint64_t)v2426[1]);
  }
  else
  {
    *(_OWORD *)v2035 = *(_OWORD *)v2426;
    v2035[2] = v2426[2];
  }
  *(void **)((char *)v2335 + 7) = *(void **)((char *)&v2439[1] + 7);
  v376 = v2439[0];
  v2335[0] = v2439[1];
  v377 = HIBYTE(v2439[2]);
  memset(v2439, 0, sizeof(v2439));
  v2348[0] = v2335[0];
  *(void **)((char *)v2348 + 7) = *(void **)((char *)v2335 + 7);
  *(void **)((char *)v2335 + 7) = 0;
  v2335[0] = 0;
  v2400[0] = v365;
  v2400[1] = v364;
  if (v364)
  {
    v378 = v364 + 1;
    do
      v379 = __ldxr(v378);
    while (__stxr(v379 + 1, v378));
  }
  v380 = (char *)operator new();
  v2361[0] = v2348[0];
  *(void **)((char *)v2361 + 7) = *(void **)((char *)v2348 + 7);
  v2348[0] = 0;
  *(void **)((char *)v2348 + 7) = 0;
  v381 = *(_OWORD *)v2400;
  v2400[0] = 0;
  v2400[1] = 0;
  v380[8] = 1;
  *((_QWORD *)v380 + 4) = 0;
  *((_QWORD *)v380 + 5) = 0;
  *(_QWORD *)v380 = &off_24C9D4550;
  *((_QWORD *)v380 + 2) = &unk_24C9D45C8;
  *((_QWORD *)v380 + 3) = &unk_24C9D4608;
  v382 = v2361[0];
  *(void **)(v380 + 63) = *(void **)((char *)v2361 + 7);
  *((_QWORD *)v380 + 6) = v376;
  *((_QWORD *)v380 + 7) = v382;
  v380[71] = v377;
  v2361[0] = 0;
  *(void **)((char *)v2361 + 7) = 0;
  *(_OWORD *)(v380 + 72) = v381;
  v2413[1] = 0;
  v2413[0] = 0;
  v383 = (_QWORD *)operator new();
  *v383 = &off_24C9D46F0;
  v383[1] = v370;
  v383[2] = v369;
  v2374[1] = 0;
  v2374[0] = 0;
  *((_QWORD *)v380 + 18) = 0;
  *((_QWORD *)v380 + 11) = v383;
  *((_QWORD *)v380 + 12) = v380 + 96;
  *((_QWORD *)v380 + 13) = v380 + 96;
  *((_QWORD *)v380 + 14) = 0;
  *((_QWORD *)v380 + 15) = v380 + 120;
  *((_QWORD *)v380 + 16) = v380 + 120;
  *((_QWORD *)v380 + 17) = 0;
  if (!*((_QWORD *)v380 + 9)
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 109, (uint64_t)"scheduler_", 10, (uint64_t)"scheduler must be valid", 23, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v384 = (std::__shared_weak_count *)operator new();
  v384->__shared_owners_ = 0;
  v385 = (unint64_t *)&v384->__shared_owners_;
  v384->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9D4B90;
  v384->__shared_weak_owners_ = 0;
  v384[1].__vftable = (std::__shared_weak_count_vtbl *)v380;
  v386 = (std::__shared_weak_count *)*((_QWORD *)v380 + 5);
  if (v386)
  {
    if (v386->__shared_owners_ != -1)
      goto LABEL_628;
    do
      v387 = __ldxr(v385);
    while (__stxr(v387 + 1, v385));
    v388 = (unint64_t *)&v384->__shared_weak_owners_;
    do
      v389 = __ldxr(v388);
    while (__stxr(v389 + 1, v388));
    *((_QWORD *)v380 + 4) = v380;
    *((_QWORD *)v380 + 5) = v384;
    std::__shared_weak_count::__release_weak(v386);
  }
  else
  {
    do
      v390 = __ldxr(v385);
    while (__stxr(v390 + 1, v385));
    v391 = (unint64_t *)&v384->__shared_weak_owners_;
    do
      v392 = __ldxr(v391);
    while (__stxr(v392 + 1, v391));
    *((_QWORD *)v380 + 4) = v380;
    *((_QWORD *)v380 + 5) = v384;
  }
  do
    v393 = __ldaxr(v385);
  while (__stlxr(v393 - 1, v385));
  if (!v393)
  {
    ((void (*)(std::__shared_weak_count *))v384->__on_zero_shared)(v384);
    std::__shared_weak_count::__release_weak(v384);
  }
LABEL_628:
  v394 = (std::__shared_weak_count *)v2413[1];
  if (v2413[1])
  {
    v395 = (unint64_t *)((char *)v2413[1] + 8);
    do
      v396 = __ldaxr(v395);
    while (__stlxr(v396 - 1, v395));
    if (!v396)
    {
      ((void (*)(std::__shared_weak_count *))v394->__on_zero_shared)(v394);
      std::__shared_weak_count::__release_weak(v394);
    }
  }
  v2413[0] = v380;
  v2413[1] = v384;
  v397 = (std::__shared_weak_count *)v2400[1];
  if (v2400[1])
  {
    v398 = (unint64_t *)((char *)v2400[1] + 8);
    do
      v399 = __ldaxr(v398);
    while (__stlxr(v399 - 1, v398));
    if (!v399)
    {
      ((void (*)(std::__shared_weak_count *))v397->__on_zero_shared)(v397);
      std::__shared_weak_count::__release_weak(v397);
    }
  }
  v400 = *(_OWORD *)v2387;
  v2387[0] = 0;
  v2387[1] = 0;
  *(_OWORD *)&v2066[1] = *(_OWORD *)v2052;
  v2066[0] = &off_24C9D1318;
  v2067 = v2052[2];
  memset(v2052, 0, sizeof(v2052));
  v2068 = *(_OWORD *)v2035;
  v401 = v2035[2];
  memset(v2035, 0, sizeof(v2035));
  v2070 = v400;
  v2400[1] = 0;
  v2400[0] = 0;
  v402 = v2413[0];
  v403 = (char *)v2413[1];
  v2069 = v401;
  v2071 = *(_OWORD *)v2413;
  v2413[0] = 0;
  v2413[1] = 0;
  if (*((_QWORD *)&v2071 + 1))
  {
    v404 = (unint64_t *)(v403 + 16);
    do
      v405 = __ldxr(v404);
    while (__stxr(v405 + 1, v404));
  }
  v2072 = &off_24C9B4710;
  v406 = (_QWORD *)operator new();
  *v406 = &off_24C9D4BE0;
  v406[1] = v402;
  v406[2] = v403;
  *(_QWORD *)&v2073 = v406;
  v408 = *((_QWORD *)&v2071 + 1);
  v407 = v2071;
  if (!*((_QWORD *)&v2071 + 1))
  {
    *((_QWORD *)&v2073 + 1) = v2071;
    v2074 = 0;
    if ((_QWORD)v2071)
      v412 = v2071 + 16;
    else
      v412 = 0;
    goto LABEL_658;
  }
  v409 = (unint64_t *)(*((_QWORD *)&v2071 + 1) + 16);
  do
    v410 = __ldxr(v409);
  while (__stxr(v410 + 1, v409));
  v411 = *((_QWORD *)&v2071 + 1);
  *((_QWORD *)&v2073 + 1) = v407;
  v2074 = v408;
  if ((_QWORD)v2071)
    v412 = v2071 + 16;
  else
    v412 = 0;
  if (!*((_QWORD *)&v2071 + 1))
  {
    v407 = v2071;
LABEL_658:
    v415 = 0;
    v2075 = &off_24C9B2520;
    v2076 = v412;
    goto LABEL_659;
  }
  v413 = (unint64_t *)(*((_QWORD *)&v2071 + 1) + 16);
  do
    v414 = __ldxr(v413);
  while (__stxr(v414 + 1, v413));
  v415 = *((_QWORD *)&v2071 + 1);
  v407 = v2071;
  v2075 = &off_24C9B2520;
  *(_QWORD *)&v2076 = v412;
  *((_QWORD *)&v2076 + 1) = v411;
  if (*((_QWORD *)&v2071 + 1))
  {
    v416 = (unint64_t *)(*((_QWORD *)&v2071 + 1) + 16);
    do
      v417 = __ldxr(v416);
    while (__stxr(v417 + 1, v416));
  }
LABEL_659:
  if (v407)
    v418 = v407 + 24;
  else
    v418 = 0;
  v2077 = &off_24C9B2310;
  *(_QWORD *)&v2078 = v418;
  *((_QWORD *)&v2078 + 1) = v415;
  if ((SHIBYTE(v2035[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v2052[2]) & 0x80000000) == 0)
      goto LABEL_664;
LABEL_667:
    operator delete(v2052[0]);
    v419 = (std::__shared_weak_count *)v2374[1];
    if (!v2374[1])
      goto LABEL_672;
    goto LABEL_668;
  }
  operator delete(v2035[0]);
  if (SHIBYTE(v2052[2]) < 0)
    goto LABEL_667;
LABEL_664:
  v419 = (std::__shared_weak_count *)v2374[1];
  if (!v2374[1])
    goto LABEL_672;
LABEL_668:
  v420 = (unint64_t *)&v419->__shared_owners_;
  do
    v421 = __ldaxr(v420);
  while (__stlxr(v421 - 1, v420));
  if (!v421)
  {
    ((void (*)(std::__shared_weak_count *))v419->__on_zero_shared)(v419);
    std::__shared_weak_count::__release_weak(v419);
  }
LABEL_672:
  v422 = (std::__shared_weak_count *)v2387[1];
  if (!v2387[1])
    goto LABEL_676;
  v423 = (unint64_t *)((char *)v2387[1] + 8);
  do
    v424 = __ldaxr(v423);
  while (__stlxr(v424 - 1, v423));
  if (!v424)
  {
    ((void (*)(std::__shared_weak_count *))v422->__on_zero_shared)(v422);
    std::__shared_weak_count::__release_weak(v422);
    if ((SHIBYTE(v2426[2]) & 0x80000000) == 0)
    {
LABEL_677:
      if ((SHIBYTE(v2439[2]) & 0x80000000) == 0)
        goto LABEL_678;
LABEL_682:
      operator delete(v2439[0]);
      if (v2062)
        goto LABEL_684;
      goto LABEL_683;
    }
  }
  else
  {
LABEL_676:
    if ((SHIBYTE(v2426[2]) & 0x80000000) == 0)
      goto LABEL_677;
  }
  operator delete(v2426[0]);
  if (SHIBYTE(v2439[2]) < 0)
    goto LABEL_682;
LABEL_678:
  if (v2062)
    goto LABEL_684;
LABEL_683:
  if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/Channel.h", 542, (uint64_t)"worker", 6, (uint64_t)"Callable must be valid", 22, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
LABEL_684:
  v426 = *(void **)v4;
  v425 = *(unint64_t **)(v4 + 8);
  v2050 = *(void **)v4;
  v2051 = (std::__shared_weak_count *)v425;
  if (v425)
  {
    v427 = v425 + 1;
    do
      v428 = __ldxr(v427);
    while (__stxr(v428 + 1, v427));
  }
  v429 = *v2;
  v430 = (unint64_t *)v2[1];
  if (*v2)
    v431 = *v2 + 392;
  else
    v431 = 0;
  v2048 = v431;
  v2049 = (std::__shared_weak_count *)v430;
  if (v430)
  {
    v432 = v430 + 1;
    do
      v433 = __ldxr(v432);
    while (__stxr(v433 + 1, v432));
  }
  if (*(char *)(v431 + 31) < 0)
  {
    sub_20E860C04(v2426, *(void **)(v431 + 8), *(_QWORD *)(v431 + 16));
  }
  else
  {
    v434 = *(_OWORD *)(v431 + 8);
    v2426[2] = *(void **)(v431 + 24);
    *(_OWORD *)v2426 = v434;
  }
  if (*(char *)(v429 + 447) < 0)
  {
    sub_20E860C04(v2413, *(void **)(v429 + 424), *(_QWORD *)(v429 + 432));
  }
  else
  {
    *(_OWORD *)v2413 = *(_OWORD *)(v429 + 424);
    v2413[2] = *(void **)(v429 + 440);
  }
  v2374[0] = v426;
  v2374[1] = v425;
  v2051 = 0;
  v2050 = 0;
  v2361[0] = (void *)v431;
  v2361[1] = v430;
  if (v430)
  {
    v435 = v430 + 1;
    do
      v436 = __ldxr(v435);
    while (__stxr(v436 + 1, v435));
  }
  if (SHIBYTE(v2426[2]) < 0)
  {
    sub_20E860C04(v2035, v2426[0], (unint64_t)v2426[1]);
  }
  else
  {
    *(_OWORD *)v2035 = *(_OWORD *)v2426;
    v2035[2] = v2426[2];
  }
  if (SHIBYTE(v2413[2]) < 0)
  {
    sub_20E860C04(v2439, v2413[0], (unint64_t)v2413[1]);
  }
  else
  {
    *(_OWORD *)v2439 = *(_OWORD *)v2413;
    v2439[2] = v2413[2];
  }
  *(void **)((char *)v2322 + 7) = *(void **)((char *)&v2426[1] + 7);
  v437 = v2426[0];
  v2322[0] = v2426[1];
  v438 = HIBYTE(v2426[2]);
  memset(v2426, 0, sizeof(v2426));
  v2335[0] = v2322[0];
  *(void **)((char *)v2335 + 7) = *(void **)((char *)v2322 + 7);
  *(void **)((char *)v2322 + 7) = 0;
  v2322[0] = 0;
  v2387[0] = v426;
  v2387[1] = v425;
  if (v425)
  {
    v439 = v425 + 1;
    do
      v440 = __ldxr(v439);
    while (__stxr(v440 + 1, v439));
  }
  v441 = (char *)operator new();
  v2348[0] = v2335[0];
  *(void **)((char *)v2348 + 7) = *(void **)((char *)v2335 + 7);
  v2335[0] = 0;
  *(void **)((char *)v2335 + 7) = 0;
  v442 = *(_OWORD *)v2387;
  v2387[0] = 0;
  v2387[1] = 0;
  v441[8] = 1;
  *((_QWORD *)v441 + 4) = 0;
  *((_QWORD *)v441 + 5) = 0;
  *(_QWORD *)v441 = &off_24C9D4C48;
  *((_QWORD *)v441 + 2) = &unk_24C9D4CC0;
  *((_QWORD *)v441 + 3) = &unk_24C9D4D00;
  v443 = v2348[0];
  *(void **)(v441 + 63) = *(void **)((char *)v2348 + 7);
  *((_QWORD *)v441 + 6) = v437;
  *((_QWORD *)v441 + 7) = v443;
  v441[71] = v438;
  v2348[0] = 0;
  *(void **)((char *)v2348 + 7) = 0;
  *(_OWORD *)(v441 + 72) = v442;
  v2400[1] = 0;
  v2400[0] = 0;
  v444 = (_QWORD *)operator new();
  *v444 = &off_24C9D4D78;
  v444[1] = v431;
  v444[2] = v430;
  v2361[1] = 0;
  v2361[0] = 0;
  *((_QWORD *)v441 + 18) = 0;
  *((_QWORD *)v441 + 11) = v444;
  *((_QWORD *)v441 + 12) = v441 + 96;
  *((_QWORD *)v441 + 13) = v441 + 96;
  *((_QWORD *)v441 + 14) = 0;
  *((_QWORD *)v441 + 15) = v441 + 120;
  *((_QWORD *)v441 + 16) = v441 + 120;
  *((_QWORD *)v441 + 17) = 0;
  if (!*((_QWORD *)v441 + 9)
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 109, (uint64_t)"scheduler_", 10, (uint64_t)"scheduler must be valid", 23, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v445 = (std::__shared_weak_count *)operator new();
  v445->__shared_owners_ = 0;
  v446 = (unint64_t *)&v445->__shared_owners_;
  v445->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9D5208;
  v445->__shared_weak_owners_ = 0;
  v445[1].__vftable = (std::__shared_weak_count_vtbl *)v441;
  v447 = (std::__shared_weak_count *)*((_QWORD *)v441 + 5);
  if (v447)
  {
    if (v447->__shared_owners_ != -1)
      goto LABEL_726;
    do
      v448 = __ldxr(v446);
    while (__stxr(v448 + 1, v446));
    v449 = (unint64_t *)&v445->__shared_weak_owners_;
    do
      v450 = __ldxr(v449);
    while (__stxr(v450 + 1, v449));
    *((_QWORD *)v441 + 4) = v441;
    *((_QWORD *)v441 + 5) = v445;
    std::__shared_weak_count::__release_weak(v447);
  }
  else
  {
    do
      v451 = __ldxr(v446);
    while (__stxr(v451 + 1, v446));
    v452 = (unint64_t *)&v445->__shared_weak_owners_;
    do
      v453 = __ldxr(v452);
    while (__stxr(v453 + 1, v452));
    *((_QWORD *)v441 + 4) = v441;
    *((_QWORD *)v441 + 5) = v445;
  }
  do
    v454 = __ldaxr(v446);
  while (__stlxr(v454 - 1, v446));
  if (!v454)
  {
    ((void (*)(std::__shared_weak_count *))v445->__on_zero_shared)(v445);
    std::__shared_weak_count::__release_weak(v445);
  }
LABEL_726:
  v455 = (std::__shared_weak_count *)v2400[1];
  if (v2400[1])
  {
    v456 = (unint64_t *)((char *)v2400[1] + 8);
    do
      v457 = __ldaxr(v456);
    while (__stlxr(v457 - 1, v456));
    if (!v457)
    {
      ((void (*)(std::__shared_weak_count *))v455->__on_zero_shared)(v455);
      std::__shared_weak_count::__release_weak(v455);
    }
  }
  v2400[0] = v441;
  v2400[1] = v445;
  v458 = (std::__shared_weak_count *)v2387[1];
  if (v2387[1])
  {
    v459 = (unint64_t *)((char *)v2387[1] + 8);
    do
      v460 = __ldaxr(v459);
    while (__stlxr(v460 - 1, v459));
    if (!v460)
    {
      ((void (*)(std::__shared_weak_count *))v458->__on_zero_shared)(v458);
      std::__shared_weak_count::__release_weak(v458);
    }
  }
  *(_OWORD *)v2387 = *(_OWORD *)v2374;
  v2374[0] = 0;
  v2374[1] = 0;
  sub_20ECB3678((uint64_t)v2052, (__int128 *)v2035, (__int128 *)v2439, (uint64_t)v2400, (uint64_t)v2387);
  v461 = (std::__shared_weak_count *)v2387[1];
  if (v2387[1])
  {
    v462 = (unint64_t *)((char *)v2387[1] + 8);
    do
      v463 = __ldaxr(v462);
    while (__stlxr(v463 - 1, v462));
    if (!v463)
    {
      ((void (*)(std::__shared_weak_count *))v461->__on_zero_shared)(v461);
      std::__shared_weak_count::__release_weak(v461);
    }
  }
  v464 = (std::__shared_weak_count *)v2400[1];
  if (!v2400[1])
    goto LABEL_745;
  v465 = (unint64_t *)((char *)v2400[1] + 8);
  do
    v466 = __ldaxr(v465);
  while (__stlxr(v466 - 1, v465));
  if (!v466)
  {
    ((void (*)(std::__shared_weak_count *))v464->__on_zero_shared)(v464);
    std::__shared_weak_count::__release_weak(v464);
    if ((SHIBYTE(v2439[2]) & 0x80000000) == 0)
    {
LABEL_746:
      if ((SHIBYTE(v2035[2]) & 0x80000000) == 0)
        goto LABEL_747;
LABEL_751:
      operator delete(v2035[0]);
      v467 = (std::__shared_weak_count *)v2361[1];
      if (!v2361[1])
        goto LABEL_756;
      goto LABEL_752;
    }
  }
  else
  {
LABEL_745:
    if ((SHIBYTE(v2439[2]) & 0x80000000) == 0)
      goto LABEL_746;
  }
  operator delete(v2439[0]);
  if (SHIBYTE(v2035[2]) < 0)
    goto LABEL_751;
LABEL_747:
  v467 = (std::__shared_weak_count *)v2361[1];
  if (!v2361[1])
    goto LABEL_756;
LABEL_752:
  v468 = (unint64_t *)&v467->__shared_owners_;
  do
    v469 = __ldaxr(v468);
  while (__stlxr(v469 - 1, v468));
  if (!v469)
  {
    ((void (*)(std::__shared_weak_count *))v467->__on_zero_shared)(v467);
    std::__shared_weak_count::__release_weak(v467);
  }
LABEL_756:
  v470 = (std::__shared_weak_count *)v2374[1];
  if (!v2374[1])
    goto LABEL_760;
  v471 = (unint64_t *)((char *)v2374[1] + 8);
  do
    v472 = __ldaxr(v471);
  while (__stlxr(v472 - 1, v471));
  if (!v472)
  {
    ((void (*)(std::__shared_weak_count *))v470->__on_zero_shared)(v470);
    std::__shared_weak_count::__release_weak(v470);
    if ((SHIBYTE(v2413[2]) & 0x80000000) == 0)
    {
LABEL_761:
      if ((SHIBYTE(v2426[2]) & 0x80000000) == 0)
        goto LABEL_762;
LABEL_766:
      operator delete(v2426[0]);
      if (v2048)
        goto LABEL_768;
      goto LABEL_767;
    }
  }
  else
  {
LABEL_760:
    if ((SHIBYTE(v2413[2]) & 0x80000000) == 0)
      goto LABEL_761;
  }
  operator delete(v2413[0]);
  if (SHIBYTE(v2426[2]) < 0)
    goto LABEL_766;
LABEL_762:
  if (v2048)
    goto LABEL_768;
LABEL_767:
  if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/Channel.h", 542, (uint64_t)"worker", 6, (uint64_t)"Callable must be valid", 22, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
LABEL_768:
  v474 = *(void **)v4;
  v473 = *(unint64_t **)(v4 + 8);
  if (v473)
  {
    v475 = v473 + 1;
    do
      v476 = __ldxr(v475);
    while (__stxr(v476 + 1, v475));
  }
  v477 = *v2;
  v478 = (unint64_t *)v2[1];
  if (*v2)
    v479 = *v2 + 448;
  else
    v479 = 0;
  v2034 = (std::__shared_weak_count *)v2[1];
  if (v478)
  {
    v480 = v478 + 1;
    do
      v481 = __ldxr(v480);
    while (__stxr(v481 + 1, v480));
  }
  if (*(char *)(v479 + 31) < 0)
  {
    sub_20E860C04(v2413, *(void **)(v479 + 8), *(_QWORD *)(v479 + 16));
  }
  else
  {
    v482 = *(_OWORD *)(v479 + 8);
    v2413[2] = *(void **)(v479 + 24);
    *(_OWORD *)v2413 = v482;
  }
  if (*(char *)(v477 + 503) < 0)
  {
    sub_20E860C04(v2400, *(void **)(v477 + 480), *(_QWORD *)(v477 + 488));
  }
  else
  {
    *(_OWORD *)v2400 = *(_OWORD *)(v477 + 480);
    v2400[2] = *(void **)(v477 + 496);
  }
  v2361[0] = v474;
  v2361[1] = v473;
  v2348[0] = (void *)v479;
  v2348[1] = v478;
  if (v478)
  {
    v483 = v478 + 1;
    do
      v484 = __ldxr(v483);
    while (__stxr(v484 + 1, v483));
  }
  if (SHIBYTE(v2413[2]) < 0)
  {
    sub_20E860C04(v2439, v2413[0], (unint64_t)v2413[1]);
  }
  else
  {
    *(_OWORD *)v2439 = *(_OWORD *)v2413;
    v2439[2] = v2413[2];
  }
  if (SHIBYTE(v2400[2]) < 0)
  {
    sub_20E860C04(v2426, v2400[0], (unint64_t)v2400[1]);
  }
  else
  {
    *(_OWORD *)v2426 = *(_OWORD *)v2400;
    v2426[2] = v2400[2];
  }
  *(void **)((char *)v2309 + 7) = *(void **)((char *)&v2413[1] + 7);
  v485 = v2413[0];
  v2309[0] = v2413[1];
  v486 = HIBYTE(v2413[2]);
  memset(v2413, 0, sizeof(v2413));
  v2322[0] = v2309[0];
  *(void **)((char *)v2322 + 7) = *(void **)((char *)v2309 + 7);
  *(void **)((char *)v2309 + 7) = 0;
  v2309[0] = 0;
  v2374[0] = v474;
  v2374[1] = v473;
  if (v473)
  {
    v487 = v473 + 1;
    do
      v488 = __ldxr(v487);
    while (__stxr(v488 + 1, v487));
  }
  v489 = (char *)operator new();
  v2335[0] = v2322[0];
  *(void **)((char *)v2335 + 7) = *(void **)((char *)v2322 + 7);
  v2322[0] = 0;
  *(void **)((char *)v2322 + 7) = 0;
  v490 = *(_OWORD *)v2374;
  v2374[0] = 0;
  v2374[1] = 0;
  v489[8] = 1;
  *((_QWORD *)v489 + 4) = 0;
  *((_QWORD *)v489 + 5) = 0;
  *(_QWORD *)v489 = &off_24C9D5258;
  *((_QWORD *)v489 + 2) = &unk_24C9D52D0;
  *((_QWORD *)v489 + 3) = &unk_24C9D5310;
  v491 = v2335[0];
  *(void **)(v489 + 63) = *(void **)((char *)v2335 + 7);
  *((_QWORD *)v489 + 6) = v485;
  *((_QWORD *)v489 + 7) = v491;
  v489[71] = v486;
  v2335[0] = 0;
  *(void **)((char *)v2335 + 7) = 0;
  *(_OWORD *)(v489 + 72) = v490;
  v2387[1] = 0;
  v2387[0] = 0;
  v492 = (_QWORD *)operator new();
  *v492 = &off_24C9D53E8;
  v492[1] = v479;
  v492[2] = v478;
  v2348[1] = 0;
  v2348[0] = 0;
  *((_QWORD *)v489 + 18) = 0;
  *((_QWORD *)v489 + 11) = v492;
  *((_QWORD *)v489 + 12) = v489 + 96;
  *((_QWORD *)v489 + 13) = v489 + 96;
  *((_QWORD *)v489 + 14) = 0;
  *((_QWORD *)v489 + 15) = v489 + 120;
  *((_QWORD *)v489 + 16) = v489 + 120;
  *((_QWORD *)v489 + 17) = 0;
  if (!*((_QWORD *)v489 + 9)
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 109, (uint64_t)"scheduler_", 10, (uint64_t)"scheduler must be valid", 23, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v493 = (std::__shared_weak_count *)operator new();
  v493->__shared_owners_ = 0;
  v494 = (unint64_t *)&v493->__shared_owners_;
  v493->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9D5888;
  v493->__shared_weak_owners_ = 0;
  v493[1].__vftable = (std::__shared_weak_count_vtbl *)v489;
  v495 = (std::__shared_weak_count *)*((_QWORD *)v489 + 5);
  if (v495)
  {
    if (v495->__shared_owners_ != -1)
      goto LABEL_810;
    do
      v496 = __ldxr(v494);
    while (__stxr(v496 + 1, v494));
    v497 = (unint64_t *)&v493->__shared_weak_owners_;
    do
      v498 = __ldxr(v497);
    while (__stxr(v498 + 1, v497));
    *((_QWORD *)v489 + 4) = v489;
    *((_QWORD *)v489 + 5) = v493;
    std::__shared_weak_count::__release_weak(v495);
  }
  else
  {
    do
      v499 = __ldxr(v494);
    while (__stxr(v499 + 1, v494));
    v500 = (unint64_t *)&v493->__shared_weak_owners_;
    do
      v501 = __ldxr(v500);
    while (__stxr(v501 + 1, v500));
    *((_QWORD *)v489 + 4) = v489;
    *((_QWORD *)v489 + 5) = v493;
  }
  do
    v502 = __ldaxr(v494);
  while (__stlxr(v502 - 1, v494));
  if (!v502)
  {
    ((void (*)(std::__shared_weak_count *))v493->__on_zero_shared)(v493);
    std::__shared_weak_count::__release_weak(v493);
  }
LABEL_810:
  v503 = (std::__shared_weak_count *)v2387[1];
  if (v2387[1])
  {
    v504 = (unint64_t *)((char *)v2387[1] + 8);
    do
      v505 = __ldaxr(v504);
    while (__stlxr(v505 - 1, v504));
    if (!v505)
    {
      ((void (*)(std::__shared_weak_count *))v503->__on_zero_shared)(v503);
      std::__shared_weak_count::__release_weak(v503);
    }
  }
  v2387[0] = v489;
  v2387[1] = v493;
  v506 = (std::__shared_weak_count *)v2374[1];
  if (v2374[1])
  {
    v507 = (unint64_t *)((char *)v2374[1] + 8);
    do
      v508 = __ldaxr(v507);
    while (__stlxr(v508 - 1, v507));
    if (!v508)
    {
      ((void (*)(std::__shared_weak_count *))v506->__on_zero_shared)(v506);
      std::__shared_weak_count::__release_weak(v506);
    }
  }
  v509 = *(_OWORD *)v2361;
  v2361[0] = 0;
  v2361[1] = 0;
  *(_OWORD *)&v2035[1] = *(_OWORD *)v2439;
  v2035[0] = &off_24C9D1348;
  v2036 = v2439[2];
  memset(v2439, 0, sizeof(v2439));
  v2037 = *(_OWORD *)v2426;
  v510 = v2426[2];
  memset(v2426, 0, sizeof(v2426));
  v2039 = v509;
  v2374[1] = 0;
  v2374[0] = 0;
  v511 = v2387[0];
  v512 = (char *)v2387[1];
  v2038 = v510;
  v2040 = *(_OWORD *)v2387;
  v2387[0] = 0;
  v2387[1] = 0;
  if (*((_QWORD *)&v2040 + 1))
  {
    v513 = (unint64_t *)(v512 + 16);
    do
      v514 = __ldxr(v513);
    while (__stxr(v514 + 1, v513));
  }
  v2041 = &off_24C9E10B0;
  v515 = (_QWORD *)operator new();
  *v515 = &off_24C9E1290;
  v515[1] = v511;
  v515[2] = v512;
  *(_QWORD *)&v2042 = v515;
  v517 = *((_QWORD *)&v2040 + 1);
  v516 = v2040;
  if (!*((_QWORD *)&v2040 + 1))
  {
    *((_QWORD *)&v2042 + 1) = v2040;
    v2043 = 0;
    if ((_QWORD)v2040)
      v521 = v2040 + 16;
    else
      v521 = 0;
    goto LABEL_840;
  }
  v518 = (unint64_t *)(*((_QWORD *)&v2040 + 1) + 16);
  do
    v519 = __ldxr(v518);
  while (__stxr(v519 + 1, v518));
  v520 = *((_QWORD *)&v2040 + 1);
  *((_QWORD *)&v2042 + 1) = v516;
  v2043 = v517;
  if ((_QWORD)v2040)
    v521 = v2040 + 16;
  else
    v521 = 0;
  if (!*((_QWORD *)&v2040 + 1))
  {
    v516 = v2040;
LABEL_840:
    v524 = 0;
    v2044 = &off_24C9B2520;
    v2045 = v521;
    goto LABEL_841;
  }
  v522 = (unint64_t *)(*((_QWORD *)&v2040 + 1) + 16);
  do
    v523 = __ldxr(v522);
  while (__stxr(v523 + 1, v522));
  v524 = *((_QWORD *)&v2040 + 1);
  v516 = v2040;
  v2044 = &off_24C9B2520;
  *(_QWORD *)&v2045 = v521;
  *((_QWORD *)&v2045 + 1) = v520;
  if (*((_QWORD *)&v2040 + 1))
  {
    v525 = (unint64_t *)(*((_QWORD *)&v2040 + 1) + 16);
    do
      v526 = __ldxr(v525);
    while (__stxr(v526 + 1, v525));
  }
LABEL_841:
  if (v516)
    v527 = v516 + 24;
  else
    v527 = 0;
  v2046 = &off_24C9B2310;
  *(_QWORD *)&v2047 = v527;
  *((_QWORD *)&v2047 + 1) = v524;
  if ((SHIBYTE(v2426[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v2439[2]) & 0x80000000) == 0)
      goto LABEL_846;
LABEL_849:
    operator delete(v2439[0]);
    v528 = (std::__shared_weak_count *)v2348[1];
    if (!v2348[1])
      goto LABEL_854;
    goto LABEL_850;
  }
  operator delete(v2426[0]);
  if (SHIBYTE(v2439[2]) < 0)
    goto LABEL_849;
LABEL_846:
  v528 = (std::__shared_weak_count *)v2348[1];
  if (!v2348[1])
    goto LABEL_854;
LABEL_850:
  v529 = (unint64_t *)&v528->__shared_owners_;
  do
    v530 = __ldaxr(v529);
  while (__stlxr(v530 - 1, v529));
  if (!v530)
  {
    ((void (*)(std::__shared_weak_count *))v528->__on_zero_shared)(v528);
    std::__shared_weak_count::__release_weak(v528);
  }
LABEL_854:
  v531 = (std::__shared_weak_count *)v2361[1];
  if (!v2361[1])
    goto LABEL_858;
  v532 = (unint64_t *)((char *)v2361[1] + 8);
  do
    v533 = __ldaxr(v532);
  while (__stlxr(v533 - 1, v532));
  if (!v533)
  {
    ((void (*)(std::__shared_weak_count *))v531->__on_zero_shared)(v531);
    std::__shared_weak_count::__release_weak(v531);
    if ((SHIBYTE(v2400[2]) & 0x80000000) == 0)
    {
LABEL_859:
      if ((SHIBYTE(v2413[2]) & 0x80000000) == 0)
        goto LABEL_860;
LABEL_864:
      operator delete(v2413[0]);
      if (v479)
        goto LABEL_866;
      goto LABEL_865;
    }
  }
  else
  {
LABEL_858:
    if ((SHIBYTE(v2400[2]) & 0x80000000) == 0)
      goto LABEL_859;
  }
  operator delete(v2400[0]);
  if (SHIBYTE(v2413[2]) < 0)
    goto LABEL_864;
LABEL_860:
  if (v479)
    goto LABEL_866;
LABEL_865:
  if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/Channel.h", 542, (uint64_t)"worker", 6, (uint64_t)"Callable must be valid", 22, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
LABEL_866:
  v535 = *(void **)v4;
  v534 = *(unint64_t **)(v4 + 8);
  if (v534)
  {
    v536 = v534 + 1;
    do
      v537 = __ldxr(v536);
    while (__stxr(v537 + 1, v536));
  }
  v538 = *v2;
  v539 = (unint64_t *)v2[1];
  if (*v2)
    v540 = *v2 + 504;
  else
    v540 = 0;
  v2033 = (std::__shared_weak_count *)v2[1];
  if (v539)
  {
    v541 = v539 + 1;
    do
      v542 = __ldxr(v541);
    while (__stxr(v542 + 1, v541));
  }
  if (*(char *)(v540 + 31) < 0)
  {
    sub_20E860C04(v2400, *(void **)(v540 + 8), *(_QWORD *)(v540 + 16));
  }
  else
  {
    v543 = *(_OWORD *)(v540 + 8);
    v2400[2] = *(void **)(v540 + 24);
    *(_OWORD *)v2400 = v543;
  }
  if (*(char *)(v538 + 559) < 0)
  {
    sub_20E860C04(v2387, *(void **)(v538 + 536), *(_QWORD *)(v538 + 544));
  }
  else
  {
    *(_OWORD *)v2387 = *(_OWORD *)(v538 + 536);
    v2387[2] = *(void **)(v538 + 552);
  }
  v2348[0] = v535;
  v2348[1] = v534;
  v2335[0] = (void *)v540;
  v2335[1] = v539;
  if (v539)
  {
    v544 = v539 + 1;
    do
      v545 = __ldxr(v544);
    while (__stxr(v545 + 1, v544));
  }
  if (SHIBYTE(v2400[2]) < 0)
  {
    sub_20E860C04(v2426, v2400[0], (unint64_t)v2400[1]);
  }
  else
  {
    *(_OWORD *)v2426 = *(_OWORD *)v2400;
    v2426[2] = v2400[2];
  }
  if (SHIBYTE(v2387[2]) < 0)
  {
    sub_20E860C04(v2413, v2387[0], (unint64_t)v2387[1]);
  }
  else
  {
    *(_OWORD *)v2413 = *(_OWORD *)v2387;
    v2413[2] = v2387[2];
  }
  *(void **)((char *)v2296 + 7) = *(void **)((char *)&v2400[1] + 7);
  v546 = v2400[0];
  v2296[0] = v2400[1];
  v547 = HIBYTE(v2400[2]);
  memset(v2400, 0, sizeof(v2400));
  v2309[0] = v2296[0];
  *(void **)((char *)v2309 + 7) = *(void **)((char *)v2296 + 7);
  *(void **)((char *)v2296 + 7) = 0;
  v2296[0] = 0;
  v2361[0] = v535;
  v2361[1] = v534;
  if (v534)
  {
    v548 = v534 + 1;
    do
      v549 = __ldxr(v548);
    while (__stxr(v549 + 1, v548));
  }
  v550 = (char *)operator new();
  v2322[0] = v2309[0];
  *(void **)((char *)v2322 + 7) = *(void **)((char *)v2309 + 7);
  v2309[0] = 0;
  *(void **)((char *)v2309 + 7) = 0;
  v551 = *(_OWORD *)v2361;
  v2361[0] = 0;
  v2361[1] = 0;
  v550[8] = 1;
  *((_QWORD *)v550 + 4) = 0;
  *((_QWORD *)v550 + 5) = 0;
  *(_QWORD *)v550 = &off_24C9D58D8;
  *((_QWORD *)v550 + 2) = &unk_24C9D5950;
  *((_QWORD *)v550 + 3) = &unk_24C9D5990;
  v552 = v2322[0];
  *(void **)(v550 + 63) = *(void **)((char *)v2322 + 7);
  *((_QWORD *)v550 + 6) = v546;
  *((_QWORD *)v550 + 7) = v552;
  v550[71] = v547;
  v2322[0] = 0;
  *(void **)((char *)v2322 + 7) = 0;
  *(_OWORD *)(v550 + 72) = v551;
  v2374[1] = 0;
  v2374[0] = 0;
  v553 = (_QWORD *)operator new();
  *v553 = &off_24C9D5A78;
  v553[1] = v540;
  v553[2] = v539;
  v2335[1] = 0;
  v2335[0] = 0;
  *((_QWORD *)v550 + 18) = 0;
  *((_QWORD *)v550 + 11) = v553;
  *((_QWORD *)v550 + 12) = v550 + 96;
  *((_QWORD *)v550 + 13) = v550 + 96;
  *((_QWORD *)v550 + 14) = 0;
  *((_QWORD *)v550 + 15) = v550 + 120;
  *((_QWORD *)v550 + 16) = v550 + 120;
  *((_QWORD *)v550 + 17) = 0;
  if (!*((_QWORD *)v550 + 9)
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 109, (uint64_t)"scheduler_", 10, (uint64_t)"scheduler must be valid", 23, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v554 = (std::__shared_weak_count *)operator new();
  v554->__shared_owners_ = 0;
  v555 = (unint64_t *)&v554->__shared_owners_;
  v554->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9D5F18;
  v554->__shared_weak_owners_ = 0;
  v554[1].__vftable = (std::__shared_weak_count_vtbl *)v550;
  v556 = (std::__shared_weak_count *)*((_QWORD *)v550 + 5);
  if (v556)
  {
    if (v556->__shared_owners_ != -1)
      goto LABEL_908;
    do
      v557 = __ldxr(v555);
    while (__stxr(v557 + 1, v555));
    v558 = (unint64_t *)&v554->__shared_weak_owners_;
    do
      v559 = __ldxr(v558);
    while (__stxr(v559 + 1, v558));
    *((_QWORD *)v550 + 4) = v550;
    *((_QWORD *)v550 + 5) = v554;
    std::__shared_weak_count::__release_weak(v556);
  }
  else
  {
    do
      v560 = __ldxr(v555);
    while (__stxr(v560 + 1, v555));
    v561 = (unint64_t *)&v554->__shared_weak_owners_;
    do
      v562 = __ldxr(v561);
    while (__stxr(v562 + 1, v561));
    *((_QWORD *)v550 + 4) = v550;
    *((_QWORD *)v550 + 5) = v554;
  }
  do
    v563 = __ldaxr(v555);
  while (__stlxr(v563 - 1, v555));
  if (!v563)
  {
    ((void (*)(std::__shared_weak_count *))v554->__on_zero_shared)(v554);
    std::__shared_weak_count::__release_weak(v554);
  }
LABEL_908:
  v564 = (std::__shared_weak_count *)v2374[1];
  if (v2374[1])
  {
    v565 = (unint64_t *)((char *)v2374[1] + 8);
    do
      v566 = __ldaxr(v565);
    while (__stlxr(v566 - 1, v565));
    if (!v566)
    {
      ((void (*)(std::__shared_weak_count *))v564->__on_zero_shared)(v564);
      std::__shared_weak_count::__release_weak(v564);
    }
  }
  v2374[0] = v550;
  v2374[1] = v554;
  v567 = (std::__shared_weak_count *)v2361[1];
  if (v2361[1])
  {
    v568 = (unint64_t *)((char *)v2361[1] + 8);
    do
      v569 = __ldaxr(v568);
    while (__stlxr(v569 - 1, v568));
    if (!v569)
    {
      ((void (*)(std::__shared_weak_count *))v567->__on_zero_shared)(v567);
      std::__shared_weak_count::__release_weak(v567);
    }
  }
  v570 = *(_OWORD *)v2348;
  v2348[0] = 0;
  v2348[1] = 0;
  *(_OWORD *)&v2439[1] = *(_OWORD *)v2426;
  v2439[0] = &off_24C9D1378;
  v2440 = v2426[2];
  memset(v2426, 0, sizeof(v2426));
  v2441 = *(_OWORD *)v2413;
  v571 = v2413[2];
  memset(v2413, 0, sizeof(v2413));
  v2443 = v570;
  v2361[1] = 0;
  v2361[0] = 0;
  v572 = v2374[0];
  v573 = (char *)v2374[1];
  v2442 = v571;
  v2444 = *(_OWORD *)v2374;
  v2374[0] = 0;
  v2374[1] = 0;
  if (*((_QWORD *)&v2444 + 1))
  {
    v574 = (unint64_t *)(v573 + 16);
    do
      v575 = __ldxr(v574);
    while (__stxr(v575 + 1, v574));
  }
  v2445 = &off_24C9D13A8;
  v576 = (_QWORD *)operator new();
  *v576 = &off_24C9D5F68;
  v576[1] = v572;
  v576[2] = v573;
  *(_QWORD *)&v2446 = v576;
  v578 = *((_QWORD *)&v2444 + 1);
  v577 = v2444;
  if (!*((_QWORD *)&v2444 + 1))
  {
    *((_QWORD *)&v2446 + 1) = v2444;
    v2447 = 0;
    if ((_QWORD)v2444)
      v582 = v2444 + 16;
    else
      v582 = 0;
    goto LABEL_938;
  }
  v579 = (unint64_t *)(*((_QWORD *)&v2444 + 1) + 16);
  do
    v580 = __ldxr(v579);
  while (__stxr(v580 + 1, v579));
  v581 = *((_QWORD *)&v2444 + 1);
  *((_QWORD *)&v2446 + 1) = v577;
  v2447 = v578;
  if ((_QWORD)v2444)
    v582 = v2444 + 16;
  else
    v582 = 0;
  if (!*((_QWORD *)&v2444 + 1))
  {
    v577 = v2444;
LABEL_938:
    v585 = 0;
    v2448 = &off_24C9B2520;
    v2449 = v582;
    goto LABEL_939;
  }
  v583 = (unint64_t *)(*((_QWORD *)&v2444 + 1) + 16);
  do
    v584 = __ldxr(v583);
  while (__stxr(v584 + 1, v583));
  v585 = *((_QWORD *)&v2444 + 1);
  v577 = v2444;
  v2448 = &off_24C9B2520;
  *(_QWORD *)&v2449 = v582;
  *((_QWORD *)&v2449 + 1) = v581;
  if (*((_QWORD *)&v2444 + 1))
  {
    v586 = (unint64_t *)(*((_QWORD *)&v2444 + 1) + 16);
    do
      v587 = __ldxr(v586);
    while (__stxr(v587 + 1, v586));
  }
LABEL_939:
  if (v577)
    v588 = v577 + 24;
  else
    v588 = 0;
  v2450 = &off_24C9B2310;
  *(_QWORD *)&v2451 = v588;
  *((_QWORD *)&v2451 + 1) = v585;
  if ((SHIBYTE(v2413[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v2426[2]) & 0x80000000) == 0)
      goto LABEL_944;
LABEL_947:
    operator delete(v2426[0]);
    v589 = (std::__shared_weak_count *)v2335[1];
    if (!v2335[1])
      goto LABEL_952;
    goto LABEL_948;
  }
  operator delete(v2413[0]);
  if (SHIBYTE(v2426[2]) < 0)
    goto LABEL_947;
LABEL_944:
  v589 = (std::__shared_weak_count *)v2335[1];
  if (!v2335[1])
    goto LABEL_952;
LABEL_948:
  v590 = (unint64_t *)&v589->__shared_owners_;
  do
    v591 = __ldaxr(v590);
  while (__stlxr(v591 - 1, v590));
  if (!v591)
  {
    ((void (*)(std::__shared_weak_count *))v589->__on_zero_shared)(v589);
    std::__shared_weak_count::__release_weak(v589);
  }
LABEL_952:
  v592 = (std::__shared_weak_count *)v2348[1];
  if (!v2348[1])
    goto LABEL_956;
  v593 = (unint64_t *)((char *)v2348[1] + 8);
  do
    v594 = __ldaxr(v593);
  while (__stlxr(v594 - 1, v593));
  if (!v594)
  {
    ((void (*)(std::__shared_weak_count *))v592->__on_zero_shared)(v592);
    std::__shared_weak_count::__release_weak(v592);
    if ((SHIBYTE(v2387[2]) & 0x80000000) == 0)
    {
LABEL_957:
      if ((SHIBYTE(v2400[2]) & 0x80000000) == 0)
        goto LABEL_958;
LABEL_962:
      operator delete(v2400[0]);
      if (v540)
        goto LABEL_964;
      goto LABEL_963;
    }
  }
  else
  {
LABEL_956:
    if ((SHIBYTE(v2387[2]) & 0x80000000) == 0)
      goto LABEL_957;
  }
  operator delete(v2387[0]);
  if (SHIBYTE(v2400[2]) < 0)
    goto LABEL_962;
LABEL_958:
  if (v540)
    goto LABEL_964;
LABEL_963:
  if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/Channel.h", 542, (uint64_t)"worker", 6, (uint64_t)"Callable must be valid", 22, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
LABEL_964:
  v596 = *(void **)v4;
  v595 = *(unint64_t **)(v4 + 8);
  if (v595)
  {
    v597 = v595 + 1;
    do
      v598 = __ldxr(v597);
    while (__stxr(v598 + 1, v597));
  }
  v599 = *v2;
  v600 = (unint64_t *)v2[1];
  if (*v2)
    v601 = *v2 + 560;
  else
    v601 = 0;
  v2032 = (std::__shared_weak_count *)v2[1];
  if (v600)
  {
    v602 = v600 + 1;
    do
      v603 = __ldxr(v602);
    while (__stxr(v603 + 1, v602));
  }
  if (*(char *)(v601 + 31) < 0)
  {
    sub_20E860C04(v2387, *(void **)(v601 + 8), *(_QWORD *)(v601 + 16));
  }
  else
  {
    v604 = *(_OWORD *)(v601 + 8);
    v2387[2] = *(void **)(v601 + 24);
    *(_OWORD *)v2387 = v604;
  }
  if (*(char *)(v599 + 615) < 0)
  {
    sub_20E860C04(v2374, *(void **)(v599 + 592), *(_QWORD *)(v599 + 600));
  }
  else
  {
    *(_OWORD *)v2374 = *(_OWORD *)(v599 + 592);
    v2374[2] = *(void **)(v599 + 608);
  }
  v2335[0] = v596;
  v2335[1] = v595;
  v2322[0] = (void *)v601;
  v2322[1] = v600;
  if (v600)
  {
    v605 = v600 + 1;
    do
      v606 = __ldxr(v605);
    while (__stxr(v606 + 1, v605));
  }
  if (SHIBYTE(v2387[2]) < 0)
  {
    sub_20E860C04(v2413, v2387[0], (unint64_t)v2387[1]);
  }
  else
  {
    *(_OWORD *)v2413 = *(_OWORD *)v2387;
    v2413[2] = v2387[2];
  }
  if (SHIBYTE(v2374[2]) < 0)
  {
    sub_20E860C04(v2400, v2374[0], (unint64_t)v2374[1]);
  }
  else
  {
    *(_OWORD *)v2400 = *(_OWORD *)v2374;
    v2400[2] = v2374[2];
  }
  *(void **)((char *)v2283 + 7) = *(void **)((char *)&v2387[1] + 7);
  v607 = v2387[0];
  v2283[0] = v2387[1];
  v608 = HIBYTE(v2387[2]);
  memset(v2387, 0, sizeof(v2387));
  v2296[0] = v2283[0];
  *(void **)((char *)v2296 + 7) = *(void **)((char *)v2283 + 7);
  *(void **)((char *)v2283 + 7) = 0;
  v2283[0] = 0;
  v2348[0] = v596;
  v2348[1] = v595;
  if (v595)
  {
    v609 = v595 + 1;
    do
      v610 = __ldxr(v609);
    while (__stxr(v610 + 1, v609));
  }
  v611 = (char *)operator new();
  v2309[0] = v2296[0];
  *(void **)((char *)v2309 + 7) = *(void **)((char *)v2296 + 7);
  v2296[0] = 0;
  *(void **)((char *)v2296 + 7) = 0;
  v612 = *(_OWORD *)v2348;
  v2348[0] = 0;
  v2348[1] = 0;
  v611[8] = 1;
  *((_QWORD *)v611 + 4) = 0;
  *((_QWORD *)v611 + 5) = 0;
  *(_QWORD *)v611 = &off_24C9D5FE0;
  *((_QWORD *)v611 + 2) = &unk_24C9D6058;
  *((_QWORD *)v611 + 3) = &unk_24C9D6098;
  v613 = v2309[0];
  *(void **)(v611 + 63) = *(void **)((char *)v2309 + 7);
  *((_QWORD *)v611 + 6) = v607;
  *((_QWORD *)v611 + 7) = v613;
  v611[71] = v608;
  v2309[0] = 0;
  *(void **)((char *)v2309 + 7) = 0;
  *(_OWORD *)(v611 + 72) = v612;
  v2361[1] = 0;
  v2361[0] = 0;
  v614 = (_QWORD *)operator new();
  *v614 = &off_24C9D6180;
  v614[1] = v601;
  v614[2] = v600;
  v2322[1] = 0;
  v2322[0] = 0;
  *((_QWORD *)v611 + 18) = 0;
  *((_QWORD *)v611 + 11) = v614;
  *((_QWORD *)v611 + 12) = v611 + 96;
  *((_QWORD *)v611 + 13) = v611 + 96;
  *((_QWORD *)v611 + 14) = 0;
  *((_QWORD *)v611 + 15) = v611 + 120;
  *((_QWORD *)v611 + 16) = v611 + 120;
  *((_QWORD *)v611 + 17) = 0;
  if (!*((_QWORD *)v611 + 9)
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 109, (uint64_t)"scheduler_", 10, (uint64_t)"scheduler must be valid", 23, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v615 = (std::__shared_weak_count *)operator new();
  v615->__shared_owners_ = 0;
  v616 = (unint64_t *)&v615->__shared_owners_;
  v615->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9D6620;
  v615->__shared_weak_owners_ = 0;
  v615[1].__vftable = (std::__shared_weak_count_vtbl *)v611;
  v617 = (std::__shared_weak_count *)*((_QWORD *)v611 + 5);
  if (v617)
  {
    if (v617->__shared_owners_ != -1)
      goto LABEL_1006;
    do
      v618 = __ldxr(v616);
    while (__stxr(v618 + 1, v616));
    v619 = (unint64_t *)&v615->__shared_weak_owners_;
    do
      v620 = __ldxr(v619);
    while (__stxr(v620 + 1, v619));
    *((_QWORD *)v611 + 4) = v611;
    *((_QWORD *)v611 + 5) = v615;
    std::__shared_weak_count::__release_weak(v617);
  }
  else
  {
    do
      v621 = __ldxr(v616);
    while (__stxr(v621 + 1, v616));
    v622 = (unint64_t *)&v615->__shared_weak_owners_;
    do
      v623 = __ldxr(v622);
    while (__stxr(v623 + 1, v622));
    *((_QWORD *)v611 + 4) = v611;
    *((_QWORD *)v611 + 5) = v615;
  }
  do
    v624 = __ldaxr(v616);
  while (__stlxr(v624 - 1, v616));
  if (!v624)
  {
    ((void (*)(std::__shared_weak_count *))v615->__on_zero_shared)(v615);
    std::__shared_weak_count::__release_weak(v615);
  }
LABEL_1006:
  v625 = (std::__shared_weak_count *)v2361[1];
  if (v2361[1])
  {
    v626 = (unint64_t *)((char *)v2361[1] + 8);
    do
      v627 = __ldaxr(v626);
    while (__stlxr(v627 - 1, v626));
    if (!v627)
    {
      ((void (*)(std::__shared_weak_count *))v625->__on_zero_shared)(v625);
      std::__shared_weak_count::__release_weak(v625);
    }
  }
  v2361[0] = v611;
  v2361[1] = v615;
  v628 = (std::__shared_weak_count *)v2348[1];
  if (v2348[1])
  {
    v629 = (unint64_t *)((char *)v2348[1] + 8);
    do
      v630 = __ldaxr(v629);
    while (__stlxr(v630 - 1, v629));
    if (!v630)
    {
      ((void (*)(std::__shared_weak_count *))v628->__on_zero_shared)(v628);
      std::__shared_weak_count::__release_weak(v628);
    }
  }
  v631 = *(_OWORD *)v2335;
  v2335[0] = 0;
  v2335[1] = 0;
  *(_OWORD *)&v2426[1] = *(_OWORD *)v2413;
  v2426[0] = &off_24C9D13E0;
  v2427 = v2413[2];
  memset(v2413, 0, sizeof(v2413));
  v2428 = *(_OWORD *)v2400;
  v632 = v2400[2];
  memset(v2400, 0, sizeof(v2400));
  v2430 = v631;
  v2348[1] = 0;
  v2348[0] = 0;
  v633 = v2361[0];
  v634 = (char *)v2361[1];
  v2429 = v632;
  v2431 = *(_OWORD *)v2361;
  v2361[0] = 0;
  v2361[1] = 0;
  if (*((_QWORD *)&v2431 + 1))
  {
    v635 = (unint64_t *)(v634 + 16);
    do
      v636 = __ldxr(v635);
    while (__stxr(v636 + 1, v635));
  }
  v2432 = &off_24C9CC5A8;
  v637 = (_QWORD *)operator new();
  *v637 = &off_24C9CC6E8;
  v637[1] = v633;
  v637[2] = v634;
  *(_QWORD *)&v2433 = v637;
  v639 = *((_QWORD *)&v2431 + 1);
  v638 = v2431;
  if (!*((_QWORD *)&v2431 + 1))
  {
    *((_QWORD *)&v2433 + 1) = v2431;
    v2434 = 0;
    if ((_QWORD)v2431)
      v643 = v2431 + 16;
    else
      v643 = 0;
    goto LABEL_1036;
  }
  v640 = (unint64_t *)(*((_QWORD *)&v2431 + 1) + 16);
  do
    v641 = __ldxr(v640);
  while (__stxr(v641 + 1, v640));
  v642 = *((_QWORD *)&v2431 + 1);
  *((_QWORD *)&v2433 + 1) = v638;
  v2434 = v639;
  if ((_QWORD)v2431)
    v643 = v2431 + 16;
  else
    v643 = 0;
  if (!*((_QWORD *)&v2431 + 1))
  {
    v638 = v2431;
LABEL_1036:
    v646 = 0;
    v2435 = &off_24C9D1410;
    v2436 = v643;
    goto LABEL_1037;
  }
  v644 = (unint64_t *)(*((_QWORD *)&v2431 + 1) + 16);
  do
    v645 = __ldxr(v644);
  while (__stxr(v645 + 1, v644));
  v646 = *((_QWORD *)&v2431 + 1);
  v638 = v2431;
  v2435 = &off_24C9D1410;
  *(_QWORD *)&v2436 = v643;
  *((_QWORD *)&v2436 + 1) = v642;
  if (*((_QWORD *)&v2431 + 1))
  {
    v647 = (unint64_t *)(*((_QWORD *)&v2431 + 1) + 16);
    do
      v648 = __ldxr(v647);
    while (__stxr(v648 + 1, v647));
  }
LABEL_1037:
  if (v638)
    v649 = v638 + 24;
  else
    v649 = 0;
  v2437 = &off_24C9B2310;
  *(_QWORD *)&v2438 = v649;
  *((_QWORD *)&v2438 + 1) = v646;
  if ((SHIBYTE(v2400[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v2413[2]) & 0x80000000) == 0)
      goto LABEL_1042;
LABEL_1045:
    operator delete(v2413[0]);
    v650 = (std::__shared_weak_count *)v2322[1];
    if (!v2322[1])
      goto LABEL_1050;
    goto LABEL_1046;
  }
  operator delete(v2400[0]);
  if (SHIBYTE(v2413[2]) < 0)
    goto LABEL_1045;
LABEL_1042:
  v650 = (std::__shared_weak_count *)v2322[1];
  if (!v2322[1])
    goto LABEL_1050;
LABEL_1046:
  v651 = (unint64_t *)&v650->__shared_owners_;
  do
    v652 = __ldaxr(v651);
  while (__stlxr(v652 - 1, v651));
  if (!v652)
  {
    ((void (*)(std::__shared_weak_count *))v650->__on_zero_shared)(v650);
    std::__shared_weak_count::__release_weak(v650);
  }
LABEL_1050:
  v653 = (std::__shared_weak_count *)v2335[1];
  if (!v2335[1])
    goto LABEL_1054;
  v654 = (unint64_t *)((char *)v2335[1] + 8);
  do
    v655 = __ldaxr(v654);
  while (__stlxr(v655 - 1, v654));
  if (!v655)
  {
    ((void (*)(std::__shared_weak_count *))v653->__on_zero_shared)(v653);
    std::__shared_weak_count::__release_weak(v653);
    if ((SHIBYTE(v2374[2]) & 0x80000000) == 0)
    {
LABEL_1055:
      if ((SHIBYTE(v2387[2]) & 0x80000000) == 0)
        goto LABEL_1056;
LABEL_1060:
      operator delete(v2387[0]);
      if (v601)
        goto LABEL_1062;
      goto LABEL_1061;
    }
  }
  else
  {
LABEL_1054:
    if ((SHIBYTE(v2374[2]) & 0x80000000) == 0)
      goto LABEL_1055;
  }
  operator delete(v2374[0]);
  if (SHIBYTE(v2387[2]) < 0)
    goto LABEL_1060;
LABEL_1056:
  if (v601)
    goto LABEL_1062;
LABEL_1061:
  if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/Channel.h", 542, (uint64_t)"worker", 6, (uint64_t)"Callable must be valid", 22, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
LABEL_1062:
  v657 = *(void **)v4;
  v656 = *(unint64_t **)(v4 + 8);
  if (v656)
  {
    v658 = v656 + 1;
    do
      v659 = __ldxr(v658);
    while (__stxr(v659 + 1, v658));
  }
  v660 = *v2;
  v661 = (unint64_t *)v2[1];
  if (*v2)
    v662 = *v2 + 616;
  else
    v662 = 0;
  v2031 = (std::__shared_weak_count *)v2[1];
  if (v661)
  {
    v663 = v661 + 1;
    do
      v664 = __ldxr(v663);
    while (__stxr(v664 + 1, v663));
  }
  if (*(char *)(v662 + 31) < 0)
  {
    sub_20E860C04(v2374, *(void **)(v662 + 8), *(_QWORD *)(v662 + 16));
  }
  else
  {
    v665 = *(_OWORD *)(v662 + 8);
    v2374[2] = *(void **)(v662 + 24);
    *(_OWORD *)v2374 = v665;
  }
  if (*(char *)(v660 + 671) < 0)
  {
    sub_20E860C04(v2361, *(void **)(v660 + 648), *(_QWORD *)(v660 + 656));
  }
  else
  {
    *(_OWORD *)v2361 = *(_OWORD *)(v660 + 648);
    v2361[2] = *(void **)(v660 + 664);
  }
  v2322[0] = v657;
  v2322[1] = v656;
  v2309[0] = (void *)v662;
  v2309[1] = v661;
  if (v661)
  {
    v666 = v661 + 1;
    do
      v667 = __ldxr(v666);
    while (__stxr(v667 + 1, v666));
  }
  if (SHIBYTE(v2374[2]) < 0)
  {
    sub_20E860C04(v2400, v2374[0], (unint64_t)v2374[1]);
  }
  else
  {
    *(_OWORD *)v2400 = *(_OWORD *)v2374;
    v2400[2] = v2374[2];
  }
  if (SHIBYTE(v2361[2]) < 0)
  {
    sub_20E860C04(v2387, v2361[0], (unint64_t)v2361[1]);
  }
  else
  {
    *(_OWORD *)v2387 = *(_OWORD *)v2361;
    v2387[2] = v2361[2];
  }
  *(void **)((char *)v2270 + 7) = *(void **)((char *)&v2374[1] + 7);
  v668 = v2374[0];
  v2270[0] = v2374[1];
  v669 = HIBYTE(v2374[2]);
  memset(v2374, 0, sizeof(v2374));
  v2283[0] = v2270[0];
  *(void **)((char *)v2283 + 7) = *(void **)((char *)v2270 + 7);
  *(void **)((char *)v2270 + 7) = 0;
  v2270[0] = 0;
  v2335[0] = v657;
  v2335[1] = v656;
  if (v656)
  {
    v670 = v656 + 1;
    do
      v671 = __ldxr(v670);
    while (__stxr(v671 + 1, v670));
  }
  v672 = (char *)operator new();
  v2296[0] = v2283[0];
  *(void **)((char *)v2296 + 7) = *(void **)((char *)v2283 + 7);
  v2283[0] = 0;
  *(void **)((char *)v2283 + 7) = 0;
  v673 = *(_OWORD *)v2335;
  v2335[0] = 0;
  v2335[1] = 0;
  v672[8] = 1;
  *((_QWORD *)v672 + 4) = 0;
  *((_QWORD *)v672 + 5) = 0;
  *(_QWORD *)v672 = &off_24C9D6670;
  *((_QWORD *)v672 + 2) = &unk_24C9D66E8;
  *((_QWORD *)v672 + 3) = &unk_24C9D6728;
  v674 = v2296[0];
  *(void **)(v672 + 63) = *(void **)((char *)v2296 + 7);
  *((_QWORD *)v672 + 6) = v668;
  *((_QWORD *)v672 + 7) = v674;
  v672[71] = v669;
  v2296[0] = 0;
  *(void **)((char *)v2296 + 7) = 0;
  *(_OWORD *)(v672 + 72) = v673;
  v2348[1] = 0;
  v2348[0] = 0;
  v675 = (_QWORD *)operator new();
  *v675 = &off_24C9D6820;
  v675[1] = v662;
  v675[2] = v661;
  v2309[1] = 0;
  v2309[0] = 0;
  *((_QWORD *)v672 + 18) = 0;
  *((_QWORD *)v672 + 11) = v675;
  *((_QWORD *)v672 + 12) = v672 + 96;
  *((_QWORD *)v672 + 13) = v672 + 96;
  *((_QWORD *)v672 + 14) = 0;
  *((_QWORD *)v672 + 15) = v672 + 120;
  *((_QWORD *)v672 + 16) = v672 + 120;
  *((_QWORD *)v672 + 17) = 0;
  if (!*((_QWORD *)v672 + 9)
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 109, (uint64_t)"scheduler_", 10, (uint64_t)"scheduler must be valid", 23, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v676 = (std::__shared_weak_count *)operator new();
  v676->__shared_owners_ = 0;
  v677 = (unint64_t *)&v676->__shared_owners_;
  v676->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9D6D10;
  v676->__shared_weak_owners_ = 0;
  v676[1].__vftable = (std::__shared_weak_count_vtbl *)v672;
  v678 = (std::__shared_weak_count *)*((_QWORD *)v672 + 5);
  if (v678)
  {
    if (v678->__shared_owners_ != -1)
      goto LABEL_1104;
    do
      v679 = __ldxr(v677);
    while (__stxr(v679 + 1, v677));
    v680 = (unint64_t *)&v676->__shared_weak_owners_;
    do
      v681 = __ldxr(v680);
    while (__stxr(v681 + 1, v680));
    *((_QWORD *)v672 + 4) = v672;
    *((_QWORD *)v672 + 5) = v676;
    std::__shared_weak_count::__release_weak(v678);
  }
  else
  {
    do
      v682 = __ldxr(v677);
    while (__stxr(v682 + 1, v677));
    v683 = (unint64_t *)&v676->__shared_weak_owners_;
    do
      v684 = __ldxr(v683);
    while (__stxr(v684 + 1, v683));
    *((_QWORD *)v672 + 4) = v672;
    *((_QWORD *)v672 + 5) = v676;
  }
  do
    v685 = __ldaxr(v677);
  while (__stlxr(v685 - 1, v677));
  if (!v685)
  {
    ((void (*)(std::__shared_weak_count *))v676->__on_zero_shared)(v676);
    std::__shared_weak_count::__release_weak(v676);
  }
LABEL_1104:
  v686 = (std::__shared_weak_count *)v2348[1];
  if (v2348[1])
  {
    v687 = (unint64_t *)((char *)v2348[1] + 8);
    do
      v688 = __ldaxr(v687);
    while (__stlxr(v688 - 1, v687));
    if (!v688)
    {
      ((void (*)(std::__shared_weak_count *))v686->__on_zero_shared)(v686);
      std::__shared_weak_count::__release_weak(v686);
    }
  }
  v2348[0] = v672;
  v2348[1] = v676;
  v689 = (std::__shared_weak_count *)v2335[1];
  if (v2335[1])
  {
    v690 = (unint64_t *)((char *)v2335[1] + 8);
    do
      v691 = __ldaxr(v690);
    while (__stlxr(v691 - 1, v690));
    if (!v691)
    {
      ((void (*)(std::__shared_weak_count *))v689->__on_zero_shared)(v689);
      std::__shared_weak_count::__release_weak(v689);
    }
  }
  v692 = *(_OWORD *)v2322;
  v2322[0] = 0;
  v2322[1] = 0;
  *(_OWORD *)&v2413[1] = *(_OWORD *)v2400;
  v2413[0] = &off_24C9D1480;
  v2414 = v2400[2];
  memset(v2400, 0, sizeof(v2400));
  v2415 = *(_OWORD *)v2387;
  v693 = v2387[2];
  memset(v2387, 0, sizeof(v2387));
  v2417 = v692;
  v2335[1] = 0;
  v2335[0] = 0;
  v694 = v2348[0];
  v695 = (char *)v2348[1];
  v2416 = v693;
  v2418 = *(_OWORD *)v2348;
  v2348[0] = 0;
  v2348[1] = 0;
  if (*((_QWORD *)&v2418 + 1))
  {
    v696 = (unint64_t *)(v695 + 16);
    do
      v697 = __ldxr(v696);
    while (__stxr(v697 + 1, v696));
  }
  v2419 = &off_24C9D14B0;
  v698 = (_QWORD *)operator new();
  *v698 = &off_24C9D6D60;
  v698[1] = v694;
  v698[2] = v695;
  *(_QWORD *)&v2420 = v698;
  v700 = *((_QWORD *)&v2418 + 1);
  v699 = v2418;
  if (!*((_QWORD *)&v2418 + 1))
  {
    *((_QWORD *)&v2420 + 1) = v2418;
    v2421 = 0;
    if ((_QWORD)v2418)
      v704 = v2418 + 16;
    else
      v704 = 0;
    goto LABEL_1134;
  }
  v701 = (unint64_t *)(*((_QWORD *)&v2418 + 1) + 16);
  do
    v702 = __ldxr(v701);
  while (__stxr(v702 + 1, v701));
  v703 = *((_QWORD *)&v2418 + 1);
  *((_QWORD *)&v2420 + 1) = v699;
  v2421 = v700;
  if ((_QWORD)v2418)
    v704 = v2418 + 16;
  else
    v704 = 0;
  if (!*((_QWORD *)&v2418 + 1))
  {
    v699 = v2418;
LABEL_1134:
    v707 = 0;
    v2422 = &off_24C9D14E8;
    v2423 = v704;
    goto LABEL_1135;
  }
  v705 = (unint64_t *)(*((_QWORD *)&v2418 + 1) + 16);
  do
    v706 = __ldxr(v705);
  while (__stxr(v706 + 1, v705));
  v707 = *((_QWORD *)&v2418 + 1);
  v699 = v2418;
  v2422 = &off_24C9D14E8;
  *(_QWORD *)&v2423 = v704;
  *((_QWORD *)&v2423 + 1) = v703;
  if (*((_QWORD *)&v2418 + 1))
  {
    v708 = (unint64_t *)(*((_QWORD *)&v2418 + 1) + 16);
    do
      v709 = __ldxr(v708);
    while (__stxr(v709 + 1, v708));
  }
LABEL_1135:
  if (v699)
    v710 = v699 + 24;
  else
    v710 = 0;
  v2424 = &off_24C9B2310;
  *(_QWORD *)&v2425 = v710;
  *((_QWORD *)&v2425 + 1) = v707;
  if ((SHIBYTE(v2387[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v2400[2]) & 0x80000000) == 0)
      goto LABEL_1140;
LABEL_1143:
    operator delete(v2400[0]);
    v711 = (std::__shared_weak_count *)v2309[1];
    if (!v2309[1])
      goto LABEL_1148;
    goto LABEL_1144;
  }
  operator delete(v2387[0]);
  if (SHIBYTE(v2400[2]) < 0)
    goto LABEL_1143;
LABEL_1140:
  v711 = (std::__shared_weak_count *)v2309[1];
  if (!v2309[1])
    goto LABEL_1148;
LABEL_1144:
  v712 = (unint64_t *)&v711->__shared_owners_;
  do
    v713 = __ldaxr(v712);
  while (__stlxr(v713 - 1, v712));
  if (!v713)
  {
    ((void (*)(std::__shared_weak_count *))v711->__on_zero_shared)(v711);
    std::__shared_weak_count::__release_weak(v711);
  }
LABEL_1148:
  v714 = (std::__shared_weak_count *)v2322[1];
  if (!v2322[1])
    goto LABEL_1152;
  v715 = (unint64_t *)((char *)v2322[1] + 8);
  do
    v716 = __ldaxr(v715);
  while (__stlxr(v716 - 1, v715));
  if (!v716)
  {
    ((void (*)(std::__shared_weak_count *))v714->__on_zero_shared)(v714);
    std::__shared_weak_count::__release_weak(v714);
    if ((SHIBYTE(v2361[2]) & 0x80000000) == 0)
    {
LABEL_1153:
      if ((SHIBYTE(v2374[2]) & 0x80000000) == 0)
        goto LABEL_1154;
LABEL_1158:
      operator delete(v2374[0]);
      if (v662)
        goto LABEL_1160;
      goto LABEL_1159;
    }
  }
  else
  {
LABEL_1152:
    if ((SHIBYTE(v2361[2]) & 0x80000000) == 0)
      goto LABEL_1153;
  }
  operator delete(v2361[0]);
  if (SHIBYTE(v2374[2]) < 0)
    goto LABEL_1158;
LABEL_1154:
  if (v662)
    goto LABEL_1160;
LABEL_1159:
  if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/Channel.h", 542, (uint64_t)"worker", 6, (uint64_t)"Callable must be valid", 22, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
LABEL_1160:
  v718 = *(void **)v4;
  v717 = *(unint64_t **)(v4 + 8);
  if (v717)
  {
    v719 = v717 + 1;
    do
      v720 = __ldxr(v719);
    while (__stxr(v720 + 1, v719));
  }
  v721 = *v2;
  v722 = (unint64_t *)v2[1];
  if (*v2)
    v723 = *v2 + 672;
  else
    v723 = 0;
  v2030 = (std::__shared_weak_count *)v2[1];
  if (v722)
  {
    v724 = v722 + 1;
    do
      v725 = __ldxr(v724);
    while (__stxr(v725 + 1, v724));
  }
  if (*(char *)(v723 + 31) < 0)
  {
    sub_20E860C04(v2361, *(void **)(v723 + 8), *(_QWORD *)(v723 + 16));
  }
  else
  {
    v726 = *(_OWORD *)(v723 + 8);
    v2361[2] = *(void **)(v723 + 24);
    *(_OWORD *)v2361 = v726;
  }
  if (*(char *)(v721 + 727) < 0)
  {
    sub_20E860C04(v2348, *(void **)(v721 + 704), *(_QWORD *)(v721 + 712));
  }
  else
  {
    *(_OWORD *)v2348 = *(_OWORD *)(v721 + 704);
    v2348[2] = *(void **)(v721 + 720);
  }
  v2309[0] = v718;
  v2309[1] = v717;
  v2296[0] = (void *)v723;
  v2296[1] = v722;
  if (v722)
  {
    v727 = v722 + 1;
    do
      v728 = __ldxr(v727);
    while (__stxr(v728 + 1, v727));
  }
  if (SHIBYTE(v2361[2]) < 0)
  {
    sub_20E860C04(v2387, v2361[0], (unint64_t)v2361[1]);
  }
  else
  {
    *(_OWORD *)v2387 = *(_OWORD *)v2361;
    v2387[2] = v2361[2];
  }
  if (SHIBYTE(v2348[2]) < 0)
  {
    sub_20E860C04(v2374, v2348[0], (unint64_t)v2348[1]);
  }
  else
  {
    *(_OWORD *)v2374 = *(_OWORD *)v2348;
    v2374[2] = v2348[2];
  }
  *(void **)((char *)v2257 + 7) = *(void **)((char *)&v2361[1] + 7);
  v729 = v2361[0];
  v2257[0] = v2361[1];
  v730 = HIBYTE(v2361[2]);
  memset(v2361, 0, sizeof(v2361));
  v2270[0] = v2257[0];
  *(void **)((char *)v2270 + 7) = *(void **)((char *)v2257 + 7);
  *(void **)((char *)v2257 + 7) = 0;
  v2257[0] = 0;
  v2322[0] = v718;
  v2322[1] = v717;
  if (v717)
  {
    v731 = v717 + 1;
    do
      v732 = __ldxr(v731);
    while (__stxr(v732 + 1, v731));
  }
  v733 = (char *)operator new();
  v2283[0] = v2270[0];
  *(void **)((char *)v2283 + 7) = *(void **)((char *)v2270 + 7);
  v2270[0] = 0;
  *(void **)((char *)v2270 + 7) = 0;
  v734 = *(_OWORD *)v2322;
  v2322[0] = 0;
  v2322[1] = 0;
  v733[8] = 1;
  *((_QWORD *)v733 + 4) = 0;
  *((_QWORD *)v733 + 5) = 0;
  *(_QWORD *)v733 = &off_24C9D6DD8;
  *((_QWORD *)v733 + 2) = &unk_24C9D6E50;
  *((_QWORD *)v733 + 3) = &unk_24C9D6E90;
  v735 = v2283[0];
  *(void **)(v733 + 63) = *(void **)((char *)v2283 + 7);
  *((_QWORD *)v733 + 6) = v729;
  *((_QWORD *)v733 + 7) = v735;
  v733[71] = v730;
  v2283[0] = 0;
  *(void **)((char *)v2283 + 7) = 0;
  *(_OWORD *)(v733 + 72) = v734;
  v2335[1] = 0;
  v2335[0] = 0;
  v736 = (_QWORD *)operator new();
  *v736 = &off_24C9D6F88;
  v736[1] = v723;
  v736[2] = v722;
  v2296[1] = 0;
  v2296[0] = 0;
  *((_QWORD *)v733 + 18) = 0;
  *((_QWORD *)v733 + 11) = v736;
  *((_QWORD *)v733 + 12) = v733 + 96;
  *((_QWORD *)v733 + 13) = v733 + 96;
  *((_QWORD *)v733 + 14) = 0;
  *((_QWORD *)v733 + 15) = v733 + 120;
  *((_QWORD *)v733 + 16) = v733 + 120;
  *((_QWORD *)v733 + 17) = 0;
  if (!*((_QWORD *)v733 + 9)
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 109, (uint64_t)"scheduler_", 10, (uint64_t)"scheduler must be valid", 23, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v737 = (std::__shared_weak_count *)operator new();
  v737->__shared_owners_ = 0;
  v738 = (unint64_t *)&v737->__shared_owners_;
  v737->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9D7478;
  v737->__shared_weak_owners_ = 0;
  v737[1].__vftable = (std::__shared_weak_count_vtbl *)v733;
  v739 = (std::__shared_weak_count *)*((_QWORD *)v733 + 5);
  if (v739)
  {
    if (v739->__shared_owners_ != -1)
      goto LABEL_1202;
    do
      v740 = __ldxr(v738);
    while (__stxr(v740 + 1, v738));
    v741 = (unint64_t *)&v737->__shared_weak_owners_;
    do
      v742 = __ldxr(v741);
    while (__stxr(v742 + 1, v741));
    *((_QWORD *)v733 + 4) = v733;
    *((_QWORD *)v733 + 5) = v737;
    std::__shared_weak_count::__release_weak(v739);
  }
  else
  {
    do
      v743 = __ldxr(v738);
    while (__stxr(v743 + 1, v738));
    v744 = (unint64_t *)&v737->__shared_weak_owners_;
    do
      v745 = __ldxr(v744);
    while (__stxr(v745 + 1, v744));
    *((_QWORD *)v733 + 4) = v733;
    *((_QWORD *)v733 + 5) = v737;
  }
  do
    v746 = __ldaxr(v738);
  while (__stlxr(v746 - 1, v738));
  if (!v746)
  {
    ((void (*)(std::__shared_weak_count *))v737->__on_zero_shared)(v737);
    std::__shared_weak_count::__release_weak(v737);
  }
LABEL_1202:
  v747 = (std::__shared_weak_count *)v2335[1];
  if (v2335[1])
  {
    v748 = (unint64_t *)((char *)v2335[1] + 8);
    do
      v749 = __ldaxr(v748);
    while (__stlxr(v749 - 1, v748));
    if (!v749)
    {
      ((void (*)(std::__shared_weak_count *))v747->__on_zero_shared)(v747);
      std::__shared_weak_count::__release_weak(v747);
    }
  }
  v2335[0] = v733;
  v2335[1] = v737;
  v750 = (std::__shared_weak_count *)v2322[1];
  if (v2322[1])
  {
    v751 = (unint64_t *)((char *)v2322[1] + 8);
    do
      v752 = __ldaxr(v751);
    while (__stlxr(v752 - 1, v751));
    if (!v752)
    {
      ((void (*)(std::__shared_weak_count *))v750->__on_zero_shared)(v750);
      std::__shared_weak_count::__release_weak(v750);
    }
  }
  v753 = *(_OWORD *)v2309;
  v2309[0] = 0;
  v2309[1] = 0;
  *(_OWORD *)&v2400[1] = *(_OWORD *)v2387;
  v2400[0] = &off_24C9D1558;
  v2401 = v2387[2];
  memset(v2387, 0, sizeof(v2387));
  v2402 = *(_OWORD *)v2374;
  v754 = v2374[2];
  memset(v2374, 0, sizeof(v2374));
  v2404 = v753;
  v2322[1] = 0;
  v2322[0] = 0;
  v755 = v2335[0];
  v756 = (char *)v2335[1];
  v2403 = v754;
  v2405 = *(_OWORD *)v2335;
  v2335[0] = 0;
  v2335[1] = 0;
  if (*((_QWORD *)&v2405 + 1))
  {
    v757 = (unint64_t *)(v756 + 16);
    do
      v758 = __ldxr(v757);
    while (__stxr(v758 + 1, v757));
  }
  v2406 = &off_24C9CC5E0;
  v759 = (_QWORD *)operator new();
  *v759 = &off_24C9D74C8;
  v759[1] = v755;
  v759[2] = v756;
  *(_QWORD *)&v2407 = v759;
  v761 = *((_QWORD *)&v2405 + 1);
  v760 = v2405;
  if (!*((_QWORD *)&v2405 + 1))
  {
    *((_QWORD *)&v2407 + 1) = v2405;
    v2408 = 0;
    if ((_QWORD)v2405)
      v765 = v2405 + 16;
    else
      v765 = 0;
    goto LABEL_1232;
  }
  v762 = (unint64_t *)(*((_QWORD *)&v2405 + 1) + 16);
  do
    v763 = __ldxr(v762);
  while (__stxr(v763 + 1, v762));
  v764 = *((_QWORD *)&v2405 + 1);
  *((_QWORD *)&v2407 + 1) = v760;
  v2408 = v761;
  if ((_QWORD)v2405)
    v765 = v2405 + 16;
  else
    v765 = 0;
  if (!*((_QWORD *)&v2405 + 1))
  {
    v760 = v2405;
LABEL_1232:
    v768 = 0;
    v2409 = &off_24C9D1588;
    v2410 = v765;
    goto LABEL_1233;
  }
  v766 = (unint64_t *)(*((_QWORD *)&v2405 + 1) + 16);
  do
    v767 = __ldxr(v766);
  while (__stxr(v767 + 1, v766));
  v768 = *((_QWORD *)&v2405 + 1);
  v760 = v2405;
  v2409 = &off_24C9D1588;
  *(_QWORD *)&v2410 = v765;
  *((_QWORD *)&v2410 + 1) = v764;
  if (*((_QWORD *)&v2405 + 1))
  {
    v769 = (unint64_t *)(*((_QWORD *)&v2405 + 1) + 16);
    do
      v770 = __ldxr(v769);
    while (__stxr(v770 + 1, v769));
  }
LABEL_1233:
  if (v760)
    v771 = v760 + 24;
  else
    v771 = 0;
  v2411 = &off_24C9B2310;
  *(_QWORD *)&v2412 = v771;
  *((_QWORD *)&v2412 + 1) = v768;
  if ((SHIBYTE(v2374[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v2387[2]) & 0x80000000) == 0)
      goto LABEL_1238;
LABEL_1241:
    operator delete(v2387[0]);
    v772 = (std::__shared_weak_count *)v2296[1];
    if (!v2296[1])
      goto LABEL_1246;
    goto LABEL_1242;
  }
  operator delete(v2374[0]);
  if (SHIBYTE(v2387[2]) < 0)
    goto LABEL_1241;
LABEL_1238:
  v772 = (std::__shared_weak_count *)v2296[1];
  if (!v2296[1])
    goto LABEL_1246;
LABEL_1242:
  v773 = (unint64_t *)&v772->__shared_owners_;
  do
    v774 = __ldaxr(v773);
  while (__stlxr(v774 - 1, v773));
  if (!v774)
  {
    ((void (*)(std::__shared_weak_count *))v772->__on_zero_shared)(v772);
    std::__shared_weak_count::__release_weak(v772);
  }
LABEL_1246:
  v775 = (std::__shared_weak_count *)v2309[1];
  if (!v2309[1])
    goto LABEL_1250;
  v776 = (unint64_t *)((char *)v2309[1] + 8);
  do
    v777 = __ldaxr(v776);
  while (__stlxr(v777 - 1, v776));
  if (!v777)
  {
    ((void (*)(std::__shared_weak_count *))v775->__on_zero_shared)(v775);
    std::__shared_weak_count::__release_weak(v775);
    if ((SHIBYTE(v2348[2]) & 0x80000000) == 0)
    {
LABEL_1251:
      if ((SHIBYTE(v2361[2]) & 0x80000000) == 0)
        goto LABEL_1252;
LABEL_1256:
      operator delete(v2361[0]);
      if (v723)
        goto LABEL_1258;
      goto LABEL_1257;
    }
  }
  else
  {
LABEL_1250:
    if ((SHIBYTE(v2348[2]) & 0x80000000) == 0)
      goto LABEL_1251;
  }
  operator delete(v2348[0]);
  if (SHIBYTE(v2361[2]) < 0)
    goto LABEL_1256;
LABEL_1252:
  if (v723)
    goto LABEL_1258;
LABEL_1257:
  if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/Channel.h", 542, (uint64_t)"worker", 6, (uint64_t)"Callable must be valid", 22, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
LABEL_1258:
  v779 = *(void **)v4;
  v778 = *(unint64_t **)(v4 + 8);
  if (v778)
  {
    v780 = v778 + 1;
    do
      v781 = __ldxr(v780);
    while (__stxr(v781 + 1, v780));
  }
  v782 = *v2;
  v783 = (unint64_t *)v2[1];
  if (*v2)
    v784 = *v2 + 728;
  else
    v784 = 0;
  v2029 = (std::__shared_weak_count *)v2[1];
  if (v783)
  {
    v785 = v783 + 1;
    do
      v786 = __ldxr(v785);
    while (__stxr(v786 + 1, v785));
  }
  if (*(char *)(v784 + 31) < 0)
  {
    sub_20E860C04(v2348, *(void **)(v784 + 8), *(_QWORD *)(v784 + 16));
  }
  else
  {
    v787 = *(_OWORD *)(v784 + 8);
    v2348[2] = *(void **)(v784 + 24);
    *(_OWORD *)v2348 = v787;
  }
  if (*(char *)(v782 + 783) < 0)
  {
    sub_20E860C04(v2335, *(void **)(v782 + 760), *(_QWORD *)(v782 + 768));
  }
  else
  {
    *(_OWORD *)v2335 = *(_OWORD *)(v782 + 760);
    v2335[2] = *(void **)(v782 + 776);
  }
  v2296[0] = v779;
  v2296[1] = v778;
  v2283[0] = (void *)v784;
  v2283[1] = v783;
  if (v783)
  {
    v788 = v783 + 1;
    do
      v789 = __ldxr(v788);
    while (__stxr(v789 + 1, v788));
  }
  if (SHIBYTE(v2348[2]) < 0)
  {
    sub_20E860C04(v2374, v2348[0], (unint64_t)v2348[1]);
  }
  else
  {
    *(_OWORD *)v2374 = *(_OWORD *)v2348;
    v2374[2] = v2348[2];
  }
  if (SHIBYTE(v2335[2]) < 0)
  {
    sub_20E860C04(v2361, v2335[0], (unint64_t)v2335[1]);
  }
  else
  {
    *(_OWORD *)v2361 = *(_OWORD *)v2335;
    v2361[2] = v2335[2];
  }
  *(void **)((char *)v2247 + 7) = *(void **)((char *)&v2348[1] + 7);
  v790 = v2348[0];
  v2247[0] = v2348[1];
  v791 = HIBYTE(v2348[2]);
  memset(v2348, 0, sizeof(v2348));
  v2257[0] = v2247[0];
  *(void **)((char *)v2257 + 7) = *(void **)((char *)v2247 + 7);
  *(void **)((char *)v2247 + 7) = 0;
  v2247[0] = 0;
  v2309[0] = v779;
  v2309[1] = v778;
  if (v778)
  {
    v792 = v778 + 1;
    do
      v793 = __ldxr(v792);
    while (__stxr(v793 + 1, v792));
  }
  v794 = (char *)operator new();
  v2270[0] = v2257[0];
  *(void **)((char *)v2270 + 7) = *(void **)((char *)v2257 + 7);
  v2257[0] = 0;
  *(void **)((char *)v2257 + 7) = 0;
  v795 = *(_OWORD *)v2309;
  v2309[0] = 0;
  v2309[1] = 0;
  v794[8] = 1;
  *((_QWORD *)v794 + 4) = 0;
  *((_QWORD *)v794 + 5) = 0;
  *(_QWORD *)v794 = &off_24C9D7540;
  *((_QWORD *)v794 + 2) = &unk_24C9D75B8;
  *((_QWORD *)v794 + 3) = &unk_24C9D75F8;
  v796 = v2270[0];
  *(void **)(v794 + 63) = *(void **)((char *)v2270 + 7);
  *((_QWORD *)v794 + 6) = v790;
  *((_QWORD *)v794 + 7) = v796;
  v794[71] = v791;
  v2270[0] = 0;
  *(void **)((char *)v2270 + 7) = 0;
  *(_OWORD *)(v794 + 72) = v795;
  v2322[1] = 0;
  v2322[0] = 0;
  v797 = (_QWORD *)operator new();
  *v797 = &off_24C9D76E0;
  v797[1] = v784;
  v797[2] = v783;
  v2283[1] = 0;
  v2283[0] = 0;
  *((_QWORD *)v794 + 18) = 0;
  *((_QWORD *)v794 + 11) = v797;
  *((_QWORD *)v794 + 12) = v794 + 96;
  *((_QWORD *)v794 + 13) = v794 + 96;
  *((_QWORD *)v794 + 14) = 0;
  *((_QWORD *)v794 + 15) = v794 + 120;
  *((_QWORD *)v794 + 16) = v794 + 120;
  *((_QWORD *)v794 + 17) = 0;
  if (!*((_QWORD *)v794 + 9)
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 109, (uint64_t)"scheduler_", 10, (uint64_t)"scheduler must be valid", 23, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v798 = (std::__shared_weak_count *)operator new();
  v798->__shared_owners_ = 0;
  v799 = (unint64_t *)&v798->__shared_owners_;
  v798->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9D7B80;
  v798->__shared_weak_owners_ = 0;
  v798[1].__vftable = (std::__shared_weak_count_vtbl *)v794;
  v800 = (std::__shared_weak_count *)*((_QWORD *)v794 + 5);
  if (v800)
  {
    if (v800->__shared_owners_ != -1)
      goto LABEL_1300;
    do
      v801 = __ldxr(v799);
    while (__stxr(v801 + 1, v799));
    v802 = (unint64_t *)&v798->__shared_weak_owners_;
    do
      v803 = __ldxr(v802);
    while (__stxr(v803 + 1, v802));
    *((_QWORD *)v794 + 4) = v794;
    *((_QWORD *)v794 + 5) = v798;
    std::__shared_weak_count::__release_weak(v800);
  }
  else
  {
    do
      v804 = __ldxr(v799);
    while (__stxr(v804 + 1, v799));
    v805 = (unint64_t *)&v798->__shared_weak_owners_;
    do
      v806 = __ldxr(v805);
    while (__stxr(v806 + 1, v805));
    *((_QWORD *)v794 + 4) = v794;
    *((_QWORD *)v794 + 5) = v798;
  }
  do
    v807 = __ldaxr(v799);
  while (__stlxr(v807 - 1, v799));
  if (!v807)
  {
    ((void (*)(std::__shared_weak_count *))v798->__on_zero_shared)(v798);
    std::__shared_weak_count::__release_weak(v798);
  }
LABEL_1300:
  v808 = (std::__shared_weak_count *)v2322[1];
  if (v2322[1])
  {
    v809 = (unint64_t *)((char *)v2322[1] + 8);
    do
      v810 = __ldaxr(v809);
    while (__stlxr(v810 - 1, v809));
    if (!v810)
    {
      ((void (*)(std::__shared_weak_count *))v808->__on_zero_shared)(v808);
      std::__shared_weak_count::__release_weak(v808);
    }
  }
  v2322[0] = v794;
  v2322[1] = v798;
  v811 = (std::__shared_weak_count *)v2309[1];
  if (v2309[1])
  {
    v812 = (unint64_t *)((char *)v2309[1] + 8);
    do
      v813 = __ldaxr(v812);
    while (__stlxr(v813 - 1, v812));
    if (!v813)
    {
      ((void (*)(std::__shared_weak_count *))v811->__on_zero_shared)(v811);
      std::__shared_weak_count::__release_weak(v811);
    }
  }
  v814 = *(_OWORD *)v2296;
  v2296[0] = 0;
  v2296[1] = 0;
  *(_OWORD *)&v2387[1] = *(_OWORD *)v2374;
  v2387[0] = &off_24C9D15C0;
  v2388 = v2374[2];
  memset(v2374, 0, sizeof(v2374));
  v2389 = *(_OWORD *)v2361;
  v815 = v2361[2];
  memset(v2361, 0, sizeof(v2361));
  v2391 = v814;
  v2309[1] = 0;
  v2309[0] = 0;
  v816 = v2322[0];
  v817 = (char *)v2322[1];
  v2390 = v815;
  v2392 = *(_OWORD *)v2322;
  v2322[0] = 0;
  v2322[1] = 0;
  if (*((_QWORD *)&v2392 + 1))
  {
    v818 = (unint64_t *)(v817 + 16);
    do
      v819 = __ldxr(v818);
    while (__stxr(v819 + 1, v818));
  }
  v2393 = &off_24C9CC618;
  v820 = (_QWORD *)operator new();
  *v820 = &off_24C9D7BD0;
  v820[1] = v816;
  v820[2] = v817;
  *(_QWORD *)&v2394 = v820;
  v822 = *((_QWORD *)&v2392 + 1);
  v821 = v2392;
  if (!*((_QWORD *)&v2392 + 1))
  {
    *((_QWORD *)&v2394 + 1) = v2392;
    v2395 = 0;
    if ((_QWORD)v2392)
      v826 = v2392 + 16;
    else
      v826 = 0;
    goto LABEL_1330;
  }
  v823 = (unint64_t *)(*((_QWORD *)&v2392 + 1) + 16);
  do
    v824 = __ldxr(v823);
  while (__stxr(v824 + 1, v823));
  v825 = *((_QWORD *)&v2392 + 1);
  *((_QWORD *)&v2394 + 1) = v821;
  v2395 = v822;
  if ((_QWORD)v2392)
    v826 = v2392 + 16;
  else
    v826 = 0;
  if (!*((_QWORD *)&v2392 + 1))
  {
    v821 = v2392;
LABEL_1330:
    v829 = 0;
    v2396 = &off_24C9B2520;
    v2397 = v826;
    goto LABEL_1331;
  }
  v827 = (unint64_t *)(*((_QWORD *)&v2392 + 1) + 16);
  do
    v828 = __ldxr(v827);
  while (__stxr(v828 + 1, v827));
  v829 = *((_QWORD *)&v2392 + 1);
  v821 = v2392;
  v2396 = &off_24C9B2520;
  *(_QWORD *)&v2397 = v826;
  *((_QWORD *)&v2397 + 1) = v825;
  if (*((_QWORD *)&v2392 + 1))
  {
    v830 = (unint64_t *)(*((_QWORD *)&v2392 + 1) + 16);
    do
      v831 = __ldxr(v830);
    while (__stxr(v831 + 1, v830));
  }
LABEL_1331:
  if (v821)
    v832 = v821 + 24;
  else
    v832 = 0;
  v2398 = &off_24C9D1148;
  *(_QWORD *)&v2399 = v832;
  *((_QWORD *)&v2399 + 1) = v829;
  if ((SHIBYTE(v2361[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v2374[2]) & 0x80000000) == 0)
      goto LABEL_1336;
LABEL_1339:
    operator delete(v2374[0]);
    v833 = (std::__shared_weak_count *)v2283[1];
    if (!v2283[1])
      goto LABEL_1344;
    goto LABEL_1340;
  }
  operator delete(v2361[0]);
  if (SHIBYTE(v2374[2]) < 0)
    goto LABEL_1339;
LABEL_1336:
  v833 = (std::__shared_weak_count *)v2283[1];
  if (!v2283[1])
    goto LABEL_1344;
LABEL_1340:
  v834 = (unint64_t *)&v833->__shared_owners_;
  do
    v835 = __ldaxr(v834);
  while (__stlxr(v835 - 1, v834));
  if (!v835)
  {
    ((void (*)(std::__shared_weak_count *))v833->__on_zero_shared)(v833);
    std::__shared_weak_count::__release_weak(v833);
  }
LABEL_1344:
  v836 = (std::__shared_weak_count *)v2296[1];
  if (!v2296[1])
    goto LABEL_1348;
  v837 = (unint64_t *)((char *)v2296[1] + 8);
  do
    v838 = __ldaxr(v837);
  while (__stlxr(v838 - 1, v837));
  if (!v838)
  {
    ((void (*)(std::__shared_weak_count *))v836->__on_zero_shared)(v836);
    std::__shared_weak_count::__release_weak(v836);
    if ((SHIBYTE(v2335[2]) & 0x80000000) == 0)
    {
LABEL_1349:
      if ((SHIBYTE(v2348[2]) & 0x80000000) == 0)
        goto LABEL_1350;
LABEL_1354:
      operator delete(v2348[0]);
      if (v784)
        goto LABEL_1356;
      goto LABEL_1355;
    }
  }
  else
  {
LABEL_1348:
    if ((SHIBYTE(v2335[2]) & 0x80000000) == 0)
      goto LABEL_1349;
  }
  operator delete(v2335[0]);
  if (SHIBYTE(v2348[2]) < 0)
    goto LABEL_1354;
LABEL_1350:
  if (v784)
    goto LABEL_1356;
LABEL_1355:
  if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/Channel.h", 542, (uint64_t)"worker", 6, (uint64_t)"Callable must be valid", 22, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
LABEL_1356:
  v840 = *(void **)v4;
  v839 = *(unint64_t **)(v4 + 8);
  if (v839)
  {
    v841 = v839 + 1;
    do
      v842 = __ldxr(v841);
    while (__stxr(v842 + 1, v841));
  }
  v843 = *v2;
  v844 = (unint64_t *)v2[1];
  if (*v2)
    v845 = *v2 + 784;
  else
    v845 = 0;
  v2028 = (std::__shared_weak_count *)v2[1];
  if (v844)
  {
    v846 = v844 + 1;
    do
      v847 = __ldxr(v846);
    while (__stxr(v847 + 1, v846));
  }
  if (*(char *)(v845 + 31) < 0)
  {
    sub_20E860C04(v2335, *(void **)(v845 + 8), *(_QWORD *)(v845 + 16));
  }
  else
  {
    v848 = *(_OWORD *)(v845 + 8);
    v2335[2] = *(void **)(v845 + 24);
    *(_OWORD *)v2335 = v848;
  }
  if (*(char *)(v843 + 839) < 0)
  {
    sub_20E860C04(v2322, *(void **)(v843 + 816), *(_QWORD *)(v843 + 824));
  }
  else
  {
    *(_OWORD *)v2322 = *(_OWORD *)(v843 + 816);
    v2322[2] = *(void **)(v843 + 832);
  }
  v2283[0] = v840;
  v2283[1] = v839;
  v2270[0] = (void *)v845;
  v2270[1] = v844;
  if (v844)
  {
    v849 = v844 + 1;
    do
      v850 = __ldxr(v849);
    while (__stxr(v850 + 1, v849));
  }
  if (SHIBYTE(v2335[2]) < 0)
  {
    sub_20E860C04(v2361, v2335[0], (unint64_t)v2335[1]);
  }
  else
  {
    *(_OWORD *)v2361 = *(_OWORD *)v2335;
    v2361[2] = v2335[2];
  }
  if (SHIBYTE(v2322[2]) < 0)
  {
    sub_20E860C04(v2348, v2322[0], (unint64_t)v2322[1]);
  }
  else
  {
    *(_OWORD *)v2348 = *(_OWORD *)v2322;
    v2348[2] = v2322[2];
  }
  *(void **)((char *)v2234 + 7) = *(void **)((char *)&v2335[1] + 7);
  v851 = v2335[0];
  v2234[0] = v2335[1];
  v852 = HIBYTE(v2335[2]);
  memset(v2335, 0, sizeof(v2335));
  v2247[0] = v2234[0];
  *(void **)((char *)v2247 + 7) = *(void **)((char *)v2234 + 7);
  *(void **)((char *)v2234 + 7) = 0;
  v2234[0] = 0;
  v2296[0] = v840;
  v2296[1] = v839;
  if (v839)
  {
    v853 = v839 + 1;
    do
      v854 = __ldxr(v853);
    while (__stxr(v854 + 1, v853));
  }
  v855 = (char *)operator new();
  v2257[0] = v2247[0];
  *(void **)((char *)v2257 + 7) = *(void **)((char *)v2247 + 7);
  v2247[0] = 0;
  *(void **)((char *)v2247 + 7) = 0;
  v856 = *(_OWORD *)v2296;
  v2296[0] = 0;
  v2296[1] = 0;
  v855[8] = 1;
  *((_QWORD *)v855 + 4) = 0;
  *((_QWORD *)v855 + 5) = 0;
  *(_QWORD *)v855 = &off_24C9D7C48;
  *((_QWORD *)v855 + 2) = &unk_24C9D7CC0;
  *((_QWORD *)v855 + 3) = &unk_24C9D7D00;
  v857 = v2257[0];
  *(void **)(v855 + 63) = *(void **)((char *)v2257 + 7);
  *((_QWORD *)v855 + 6) = v851;
  *((_QWORD *)v855 + 7) = v857;
  v855[71] = v852;
  v2257[0] = 0;
  *(void **)((char *)v2257 + 7) = 0;
  *(_OWORD *)(v855 + 72) = v856;
  v2309[1] = 0;
  v2309[0] = 0;
  v858 = (_QWORD *)operator new();
  *v858 = &off_24C9D7DE8;
  v858[1] = v845;
  v858[2] = v844;
  v2270[1] = 0;
  v2270[0] = 0;
  *((_QWORD *)v855 + 18) = 0;
  *((_QWORD *)v855 + 11) = v858;
  *((_QWORD *)v855 + 12) = v855 + 96;
  *((_QWORD *)v855 + 13) = v855 + 96;
  *((_QWORD *)v855 + 14) = 0;
  *((_QWORD *)v855 + 15) = v855 + 120;
  *((_QWORD *)v855 + 16) = v855 + 120;
  *((_QWORD *)v855 + 17) = 0;
  if (!*((_QWORD *)v855 + 9)
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 109, (uint64_t)"scheduler_", 10, (uint64_t)"scheduler must be valid", 23, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v859 = (std::__shared_weak_count *)operator new();
  v859->__shared_owners_ = 0;
  v860 = (unint64_t *)&v859->__shared_owners_;
  v859->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9D8288;
  v859->__shared_weak_owners_ = 0;
  v859[1].__vftable = (std::__shared_weak_count_vtbl *)v855;
  v861 = (std::__shared_weak_count *)*((_QWORD *)v855 + 5);
  if (v861)
  {
    if (v861->__shared_owners_ != -1)
      goto LABEL_1398;
    do
      v862 = __ldxr(v860);
    while (__stxr(v862 + 1, v860));
    v863 = (unint64_t *)&v859->__shared_weak_owners_;
    do
      v864 = __ldxr(v863);
    while (__stxr(v864 + 1, v863));
    *((_QWORD *)v855 + 4) = v855;
    *((_QWORD *)v855 + 5) = v859;
    std::__shared_weak_count::__release_weak(v861);
  }
  else
  {
    do
      v865 = __ldxr(v860);
    while (__stxr(v865 + 1, v860));
    v866 = (unint64_t *)&v859->__shared_weak_owners_;
    do
      v867 = __ldxr(v866);
    while (__stxr(v867 + 1, v866));
    *((_QWORD *)v855 + 4) = v855;
    *((_QWORD *)v855 + 5) = v859;
  }
  do
    v868 = __ldaxr(v860);
  while (__stlxr(v868 - 1, v860));
  if (!v868)
  {
    ((void (*)(std::__shared_weak_count *))v859->__on_zero_shared)(v859);
    std::__shared_weak_count::__release_weak(v859);
  }
LABEL_1398:
  v869 = (std::__shared_weak_count *)v2309[1];
  if (v2309[1])
  {
    v870 = (unint64_t *)((char *)v2309[1] + 8);
    do
      v871 = __ldaxr(v870);
    while (__stlxr(v871 - 1, v870));
    if (!v871)
    {
      ((void (*)(std::__shared_weak_count *))v869->__on_zero_shared)(v869);
      std::__shared_weak_count::__release_weak(v869);
    }
  }
  v2309[0] = v855;
  v2309[1] = v859;
  v872 = (std::__shared_weak_count *)v2296[1];
  if (v2296[1])
  {
    v873 = (unint64_t *)((char *)v2296[1] + 8);
    do
      v874 = __ldaxr(v873);
    while (__stlxr(v874 - 1, v873));
    if (!v874)
    {
      ((void (*)(std::__shared_weak_count *))v872->__on_zero_shared)(v872);
      std::__shared_weak_count::__release_weak(v872);
    }
  }
  v875 = *(_OWORD *)v2283;
  v2283[0] = 0;
  v2283[1] = 0;
  *(_OWORD *)&v2374[1] = *(_OWORD *)v2361;
  v2374[0] = &off_24C9D15F0;
  v2375 = v2361[2];
  memset(v2361, 0, sizeof(v2361));
  v2376 = *(_OWORD *)v2348;
  v876 = v2348[2];
  memset(v2348, 0, sizeof(v2348));
  v2378 = v875;
  v2296[1] = 0;
  v2296[0] = 0;
  v877 = v2309[0];
  v878 = (char *)v2309[1];
  v2377 = v876;
  v2379 = *(_OWORD *)v2309;
  v2309[0] = 0;
  v2309[1] = 0;
  if (*((_QWORD *)&v2379 + 1))
  {
    v879 = (unint64_t *)(v878 + 16);
    do
      v880 = __ldxr(v879);
    while (__stxr(v880 + 1, v879));
  }
  v2380 = &off_24C9B2630;
  v881 = (_QWORD *)operator new();
  *v881 = &off_24C9BB4D0;
  v881[1] = v877;
  v881[2] = v878;
  *(_QWORD *)&v2381 = v881;
  v883 = *((_QWORD *)&v2379 + 1);
  v882 = v2379;
  if (!*((_QWORD *)&v2379 + 1))
  {
    *((_QWORD *)&v2381 + 1) = v2379;
    v2382 = 0;
    if ((_QWORD)v2379)
      v887 = v2379 + 16;
    else
      v887 = 0;
    goto LABEL_1428;
  }
  v884 = (unint64_t *)(*((_QWORD *)&v2379 + 1) + 16);
  do
    v885 = __ldxr(v884);
  while (__stxr(v885 + 1, v884));
  v886 = *((_QWORD *)&v2379 + 1);
  *((_QWORD *)&v2381 + 1) = v882;
  v2382 = v883;
  if ((_QWORD)v2379)
    v887 = v2379 + 16;
  else
    v887 = 0;
  if (!*((_QWORD *)&v2379 + 1))
  {
    v882 = v2379;
LABEL_1428:
    v890 = 0;
    v2383 = &off_24C9D1620;
    v2384 = v887;
    goto LABEL_1429;
  }
  v888 = (unint64_t *)(*((_QWORD *)&v2379 + 1) + 16);
  do
    v889 = __ldxr(v888);
  while (__stxr(v889 + 1, v888));
  v890 = *((_QWORD *)&v2379 + 1);
  v882 = v2379;
  v2383 = &off_24C9D1620;
  *(_QWORD *)&v2384 = v887;
  *((_QWORD *)&v2384 + 1) = v886;
  if (*((_QWORD *)&v2379 + 1))
  {
    v891 = (unint64_t *)(*((_QWORD *)&v2379 + 1) + 16);
    do
      v892 = __ldxr(v891);
    while (__stxr(v892 + 1, v891));
  }
LABEL_1429:
  if (v882)
    v893 = v882 + 24;
  else
    v893 = 0;
  v2385 = &off_24C9B2310;
  *(_QWORD *)&v2386 = v893;
  *((_QWORD *)&v2386 + 1) = v890;
  if ((SHIBYTE(v2348[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v2361[2]) & 0x80000000) == 0)
      goto LABEL_1434;
LABEL_1437:
    operator delete(v2361[0]);
    v894 = (std::__shared_weak_count *)v2270[1];
    if (!v2270[1])
      goto LABEL_1442;
    goto LABEL_1438;
  }
  operator delete(v2348[0]);
  if (SHIBYTE(v2361[2]) < 0)
    goto LABEL_1437;
LABEL_1434:
  v894 = (std::__shared_weak_count *)v2270[1];
  if (!v2270[1])
    goto LABEL_1442;
LABEL_1438:
  v895 = (unint64_t *)&v894->__shared_owners_;
  do
    v896 = __ldaxr(v895);
  while (__stlxr(v896 - 1, v895));
  if (!v896)
  {
    ((void (*)(std::__shared_weak_count *))v894->__on_zero_shared)(v894);
    std::__shared_weak_count::__release_weak(v894);
  }
LABEL_1442:
  v897 = (std::__shared_weak_count *)v2283[1];
  if (!v2283[1])
    goto LABEL_1446;
  v898 = (unint64_t *)((char *)v2283[1] + 8);
  do
    v899 = __ldaxr(v898);
  while (__stlxr(v899 - 1, v898));
  if (!v899)
  {
    ((void (*)(std::__shared_weak_count *))v897->__on_zero_shared)(v897);
    std::__shared_weak_count::__release_weak(v897);
    if ((SHIBYTE(v2322[2]) & 0x80000000) == 0)
    {
LABEL_1447:
      if ((SHIBYTE(v2335[2]) & 0x80000000) == 0)
        goto LABEL_1448;
LABEL_1452:
      operator delete(v2335[0]);
      if (v845)
        goto LABEL_1454;
      goto LABEL_1453;
    }
  }
  else
  {
LABEL_1446:
    if ((SHIBYTE(v2322[2]) & 0x80000000) == 0)
      goto LABEL_1447;
  }
  operator delete(v2322[0]);
  if (SHIBYTE(v2335[2]) < 0)
    goto LABEL_1452;
LABEL_1448:
  if (v845)
    goto LABEL_1454;
LABEL_1453:
  if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/Channel.h", 542, (uint64_t)"worker", 6, (uint64_t)"Callable must be valid", 22, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
LABEL_1454:
  v901 = *(void **)v4;
  v900 = *(unint64_t **)(v4 + 8);
  if (v900)
  {
    v902 = v900 + 1;
    do
      v903 = __ldxr(v902);
    while (__stxr(v903 + 1, v902));
  }
  v904 = *v2;
  v905 = (unint64_t *)v2[1];
  if (*v2)
    v906 = *v2 + 840;
  else
    v906 = 0;
  v2027 = (std::__shared_weak_count *)v2[1];
  if (v905)
  {
    v907 = v905 + 1;
    do
      v908 = __ldxr(v907);
    while (__stxr(v908 + 1, v907));
  }
  if (*(char *)(v906 + 31) < 0)
  {
    sub_20E860C04(v2322, *(void **)(v906 + 8), *(_QWORD *)(v906 + 16));
  }
  else
  {
    v909 = *(_OWORD *)(v906 + 8);
    v2322[2] = *(void **)(v906 + 24);
    *(_OWORD *)v2322 = v909;
  }
  if (*(char *)(v904 + 895) < 0)
  {
    sub_20E860C04(v2309, *(void **)(v904 + 872), *(_QWORD *)(v904 + 880));
  }
  else
  {
    *(_OWORD *)v2309 = *(_OWORD *)(v904 + 872);
    v2309[2] = *(void **)(v904 + 888);
  }
  v2270[0] = v901;
  v2270[1] = v900;
  v2257[0] = (void *)v906;
  v2257[1] = v905;
  if (v905)
  {
    v910 = v905 + 1;
    do
      v911 = __ldxr(v910);
    while (__stxr(v911 + 1, v910));
  }
  if (SHIBYTE(v2322[2]) < 0)
  {
    sub_20E860C04(v2348, v2322[0], (unint64_t)v2322[1]);
  }
  else
  {
    *(_OWORD *)v2348 = *(_OWORD *)v2322;
    v2348[2] = v2322[2];
  }
  if (SHIBYTE(v2309[2]) < 0)
  {
    sub_20E860C04(v2335, v2309[0], (unint64_t)v2309[1]);
  }
  else
  {
    *(_OWORD *)v2335 = *(_OWORD *)v2309;
    v2335[2] = v2309[2];
  }
  *(void **)((char *)v2221 + 7) = *(void **)((char *)&v2322[1] + 7);
  v912 = v2322[0];
  v2221[0] = v2322[1];
  v913 = HIBYTE(v2322[2]);
  memset(v2322, 0, sizeof(v2322));
  v2234[0] = v2221[0];
  *(void **)((char *)v2234 + 7) = *(void **)((char *)v2221 + 7);
  *(void **)((char *)v2221 + 7) = 0;
  v2221[0] = 0;
  v2283[0] = v901;
  v2283[1] = v900;
  if (v900)
  {
    v914 = v900 + 1;
    do
      v915 = __ldxr(v914);
    while (__stxr(v915 + 1, v914));
  }
  v916 = (char *)operator new();
  v2247[0] = v2234[0];
  *(void **)((char *)v2247 + 7) = *(void **)((char *)v2234 + 7);
  v2234[0] = 0;
  *(void **)((char *)v2234 + 7) = 0;
  v917 = *(_OWORD *)v2283;
  v2283[0] = 0;
  v2283[1] = 0;
  v916[8] = 1;
  *((_QWORD *)v916 + 4) = 0;
  *((_QWORD *)v916 + 5) = 0;
  *(_QWORD *)v916 = &off_24C9D82D8;
  *((_QWORD *)v916 + 2) = &unk_24C9D8350;
  *((_QWORD *)v916 + 3) = &unk_24C9D8390;
  v918 = v2247[0];
  *(void **)(v916 + 63) = *(void **)((char *)v2247 + 7);
  *((_QWORD *)v916 + 6) = v912;
  *((_QWORD *)v916 + 7) = v918;
  v916[71] = v913;
  v2247[0] = 0;
  *(void **)((char *)v2247 + 7) = 0;
  *(_OWORD *)(v916 + 72) = v917;
  v2296[1] = 0;
  v2296[0] = 0;
  v919 = (_QWORD *)operator new();
  *v919 = &off_24C9D8478;
  v919[1] = v906;
  v919[2] = v905;
  v2257[1] = 0;
  v2257[0] = 0;
  *((_QWORD *)v916 + 18) = 0;
  *((_QWORD *)v916 + 11) = v919;
  *((_QWORD *)v916 + 12) = v916 + 96;
  *((_QWORD *)v916 + 13) = v916 + 96;
  *((_QWORD *)v916 + 14) = 0;
  *((_QWORD *)v916 + 15) = v916 + 120;
  *((_QWORD *)v916 + 16) = v916 + 120;
  *((_QWORD *)v916 + 17) = 0;
  if (!*((_QWORD *)v916 + 9)
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 109, (uint64_t)"scheduler_", 10, (uint64_t)"scheduler must be valid", 23, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v920 = (std::__shared_weak_count *)operator new();
  v920->__shared_owners_ = 0;
  v921 = (unint64_t *)&v920->__shared_owners_;
  v920->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9D8918;
  v920->__shared_weak_owners_ = 0;
  v920[1].__vftable = (std::__shared_weak_count_vtbl *)v916;
  v922 = (std::__shared_weak_count *)*((_QWORD *)v916 + 5);
  if (v922)
  {
    if (v922->__shared_owners_ != -1)
      goto LABEL_1496;
    do
      v923 = __ldxr(v921);
    while (__stxr(v923 + 1, v921));
    v924 = (unint64_t *)&v920->__shared_weak_owners_;
    do
      v925 = __ldxr(v924);
    while (__stxr(v925 + 1, v924));
    *((_QWORD *)v916 + 4) = v916;
    *((_QWORD *)v916 + 5) = v920;
    std::__shared_weak_count::__release_weak(v922);
  }
  else
  {
    do
      v926 = __ldxr(v921);
    while (__stxr(v926 + 1, v921));
    v927 = (unint64_t *)&v920->__shared_weak_owners_;
    do
      v928 = __ldxr(v927);
    while (__stxr(v928 + 1, v927));
    *((_QWORD *)v916 + 4) = v916;
    *((_QWORD *)v916 + 5) = v920;
  }
  do
    v929 = __ldaxr(v921);
  while (__stlxr(v929 - 1, v921));
  if (!v929)
  {
    ((void (*)(std::__shared_weak_count *))v920->__on_zero_shared)(v920);
    std::__shared_weak_count::__release_weak(v920);
  }
LABEL_1496:
  v930 = (std::__shared_weak_count *)v2296[1];
  if (v2296[1])
  {
    v931 = (unint64_t *)((char *)v2296[1] + 8);
    do
      v932 = __ldaxr(v931);
    while (__stlxr(v932 - 1, v931));
    if (!v932)
    {
      ((void (*)(std::__shared_weak_count *))v930->__on_zero_shared)(v930);
      std::__shared_weak_count::__release_weak(v930);
    }
  }
  v2296[0] = v916;
  v2296[1] = v920;
  v933 = (std::__shared_weak_count *)v2283[1];
  if (v2283[1])
  {
    v934 = (unint64_t *)((char *)v2283[1] + 8);
    do
      v935 = __ldaxr(v934);
    while (__stlxr(v935 - 1, v934));
    if (!v935)
    {
      ((void (*)(std::__shared_weak_count *))v933->__on_zero_shared)(v933);
      std::__shared_weak_count::__release_weak(v933);
    }
  }
  v936 = *(_OWORD *)v2270;
  v2270[0] = 0;
  v2270[1] = 0;
  *(_OWORD *)&v2361[1] = *(_OWORD *)v2348;
  v2361[0] = &off_24C9D1690;
  v2362 = v2348[2];
  memset(v2348, 0, sizeof(v2348));
  v2363 = *(_OWORD *)v2335;
  v937 = v2335[2];
  memset(v2335, 0, sizeof(v2335));
  v2365 = v936;
  v2283[1] = 0;
  v2283[0] = 0;
  v938 = v2296[0];
  v939 = (char *)v2296[1];
  v2364 = v937;
  v2366 = *(_OWORD *)v2296;
  v2296[0] = 0;
  v2296[1] = 0;
  if (*((_QWORD *)&v2366 + 1))
  {
    v940 = (unint64_t *)(v939 + 16);
    do
      v941 = __ldxr(v940);
    while (__stxr(v941 + 1, v940));
  }
  v2367 = &off_24C9D16C0;
  v942 = (_QWORD *)operator new();
  *v942 = &off_24C9D8968;
  v942[1] = v938;
  v942[2] = v939;
  *(_QWORD *)&v2368 = v942;
  v944 = *((_QWORD *)&v2366 + 1);
  v943 = v2366;
  if (!*((_QWORD *)&v2366 + 1))
  {
    *((_QWORD *)&v2368 + 1) = v2366;
    v2369 = 0;
    if ((_QWORD)v2366)
      v948 = v2366 + 16;
    else
      v948 = 0;
    goto LABEL_1526;
  }
  v945 = (unint64_t *)(*((_QWORD *)&v2366 + 1) + 16);
  do
    v946 = __ldxr(v945);
  while (__stxr(v946 + 1, v945));
  v947 = *((_QWORD *)&v2366 + 1);
  *((_QWORD *)&v2368 + 1) = v943;
  v2369 = v944;
  if ((_QWORD)v2366)
    v948 = v2366 + 16;
  else
    v948 = 0;
  if (!*((_QWORD *)&v2366 + 1))
  {
    v943 = v2366;
LABEL_1526:
    v951 = 0;
    v2370 = &off_24C9CC900;
    v2371 = v948;
    goto LABEL_1527;
  }
  v949 = (unint64_t *)(*((_QWORD *)&v2366 + 1) + 16);
  do
    v950 = __ldxr(v949);
  while (__stxr(v950 + 1, v949));
  v951 = *((_QWORD *)&v2366 + 1);
  v943 = v2366;
  v2370 = &off_24C9CC900;
  *(_QWORD *)&v2371 = v948;
  *((_QWORD *)&v2371 + 1) = v947;
  if (*((_QWORD *)&v2366 + 1))
  {
    v952 = (unint64_t *)(*((_QWORD *)&v2366 + 1) + 16);
    do
      v953 = __ldxr(v952);
    while (__stxr(v953 + 1, v952));
  }
LABEL_1527:
  if (v943)
    v954 = v943 + 24;
  else
    v954 = 0;
  v2372 = &off_24C9B2310;
  *(_QWORD *)&v2373 = v954;
  *((_QWORD *)&v2373 + 1) = v951;
  if ((SHIBYTE(v2335[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v2348[2]) & 0x80000000) == 0)
      goto LABEL_1532;
LABEL_1535:
    operator delete(v2348[0]);
    v955 = (std::__shared_weak_count *)v2257[1];
    if (!v2257[1])
      goto LABEL_1540;
    goto LABEL_1536;
  }
  operator delete(v2335[0]);
  if (SHIBYTE(v2348[2]) < 0)
    goto LABEL_1535;
LABEL_1532:
  v955 = (std::__shared_weak_count *)v2257[1];
  if (!v2257[1])
    goto LABEL_1540;
LABEL_1536:
  v956 = (unint64_t *)&v955->__shared_owners_;
  do
    v957 = __ldaxr(v956);
  while (__stlxr(v957 - 1, v956));
  if (!v957)
  {
    ((void (*)(std::__shared_weak_count *))v955->__on_zero_shared)(v955);
    std::__shared_weak_count::__release_weak(v955);
  }
LABEL_1540:
  v958 = (std::__shared_weak_count *)v2270[1];
  if (!v2270[1])
    goto LABEL_1544;
  v959 = (unint64_t *)((char *)v2270[1] + 8);
  do
    v960 = __ldaxr(v959);
  while (__stlxr(v960 - 1, v959));
  if (!v960)
  {
    ((void (*)(std::__shared_weak_count *))v958->__on_zero_shared)(v958);
    std::__shared_weak_count::__release_weak(v958);
    if ((SHIBYTE(v2309[2]) & 0x80000000) == 0)
    {
LABEL_1545:
      if ((SHIBYTE(v2322[2]) & 0x80000000) == 0)
        goto LABEL_1546;
LABEL_1550:
      operator delete(v2322[0]);
      if (v906)
        goto LABEL_1552;
      goto LABEL_1551;
    }
  }
  else
  {
LABEL_1544:
    if ((SHIBYTE(v2309[2]) & 0x80000000) == 0)
      goto LABEL_1545;
  }
  operator delete(v2309[0]);
  if (SHIBYTE(v2322[2]) < 0)
    goto LABEL_1550;
LABEL_1546:
  if (v906)
    goto LABEL_1552;
LABEL_1551:
  if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/Channel.h", 542, (uint64_t)"worker", 6, (uint64_t)"Callable must be valid", 22, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
LABEL_1552:
  v962 = *(void **)v4;
  v961 = *(unint64_t **)(v4 + 8);
  if (v961)
  {
    v963 = v961 + 1;
    do
      v964 = __ldxr(v963);
    while (__stxr(v964 + 1, v963));
  }
  v965 = *v2;
  v966 = (unint64_t *)v2[1];
  if (*v2)
    v967 = *v2 + 896;
  else
    v967 = 0;
  v2026 = (std::__shared_weak_count *)v2[1];
  if (v966)
  {
    v968 = v966 + 1;
    do
      v969 = __ldxr(v968);
    while (__stxr(v969 + 1, v968));
  }
  if (*(char *)(v967 + 31) < 0)
  {
    sub_20E860C04(v2309, *(void **)(v967 + 8), *(_QWORD *)(v967 + 16));
  }
  else
  {
    v970 = *(_OWORD *)(v967 + 8);
    v2309[2] = *(void **)(v967 + 24);
    *(_OWORD *)v2309 = v970;
  }
  if (*(char *)(v965 + 951) < 0)
  {
    sub_20E860C04(v2296, *(void **)(v965 + 928), *(_QWORD *)(v965 + 936));
  }
  else
  {
    *(_OWORD *)v2296 = *(_OWORD *)(v965 + 928);
    v2296[2] = *(void **)(v965 + 944);
  }
  v2257[0] = v962;
  v2257[1] = v961;
  v2247[0] = (void *)v967;
  v2247[1] = v966;
  if (v966)
  {
    v971 = v966 + 1;
    do
      v972 = __ldxr(v971);
    while (__stxr(v972 + 1, v971));
  }
  if (SHIBYTE(v2309[2]) < 0)
  {
    sub_20E860C04(v2335, v2309[0], (unint64_t)v2309[1]);
  }
  else
  {
    *(_OWORD *)v2335 = *(_OWORD *)v2309;
    v2335[2] = v2309[2];
  }
  if (SHIBYTE(v2296[2]) < 0)
  {
    sub_20E860C04(v2322, v2296[0], (unint64_t)v2296[1]);
  }
  else
  {
    *(_OWORD *)v2322 = *(_OWORD *)v2296;
    v2322[2] = v2296[2];
  }
  *(void **)((char *)v2208 + 7) = *(void **)((char *)&v2309[1] + 7);
  v973 = v2309[0];
  v2208[0] = v2309[1];
  v974 = HIBYTE(v2309[2]);
  memset(v2309, 0, sizeof(v2309));
  v2221[0] = v2208[0];
  *(void **)((char *)v2221 + 7) = *(void **)((char *)v2208 + 7);
  *(void **)((char *)v2208 + 7) = 0;
  v2208[0] = 0;
  v2270[0] = v962;
  v2270[1] = v961;
  if (v961)
  {
    v975 = v961 + 1;
    do
      v976 = __ldxr(v975);
    while (__stxr(v976 + 1, v975));
  }
  v977 = (char *)operator new();
  v2234[0] = v2221[0];
  *(void **)((char *)v2234 + 7) = *(void **)((char *)v2221 + 7);
  v2221[0] = 0;
  *(void **)((char *)v2221 + 7) = 0;
  v978 = *(_OWORD *)v2270;
  v2270[0] = 0;
  v2270[1] = 0;
  v977[8] = 1;
  *((_QWORD *)v977 + 4) = 0;
  *((_QWORD *)v977 + 5) = 0;
  *(_QWORD *)v977 = &off_24C9D89E0;
  *((_QWORD *)v977 + 2) = &unk_24C9D8A58;
  *((_QWORD *)v977 + 3) = &unk_24C9D8A98;
  v979 = v2234[0];
  *(void **)(v977 + 63) = *(void **)((char *)v2234 + 7);
  *((_QWORD *)v977 + 6) = v973;
  *((_QWORD *)v977 + 7) = v979;
  v977[71] = v974;
  v2234[0] = 0;
  *(void **)((char *)v2234 + 7) = 0;
  *(_OWORD *)(v977 + 72) = v978;
  v2283[1] = 0;
  v2283[0] = 0;
  v980 = (_QWORD *)operator new();
  *v980 = &off_24C9D8B80;
  v980[1] = v967;
  v980[2] = v966;
  v2247[1] = 0;
  v2247[0] = 0;
  *((_QWORD *)v977 + 18) = 0;
  *((_QWORD *)v977 + 11) = v980;
  *((_QWORD *)v977 + 12) = v977 + 96;
  *((_QWORD *)v977 + 13) = v977 + 96;
  *((_QWORD *)v977 + 14) = 0;
  *((_QWORD *)v977 + 15) = v977 + 120;
  *((_QWORD *)v977 + 16) = v977 + 120;
  *((_QWORD *)v977 + 17) = 0;
  if (!*((_QWORD *)v977 + 9)
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 109, (uint64_t)"scheduler_", 10, (uint64_t)"scheduler must be valid", 23, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v981 = (std::__shared_weak_count *)operator new();
  v981->__shared_owners_ = 0;
  v982 = (unint64_t *)&v981->__shared_owners_;
  v981->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9D9020;
  v981->__shared_weak_owners_ = 0;
  v981[1].__vftable = (std::__shared_weak_count_vtbl *)v977;
  v983 = (std::__shared_weak_count *)*((_QWORD *)v977 + 5);
  if (v983)
  {
    if (v983->__shared_owners_ != -1)
      goto LABEL_1594;
    do
      v984 = __ldxr(v982);
    while (__stxr(v984 + 1, v982));
    v985 = (unint64_t *)&v981->__shared_weak_owners_;
    do
      v986 = __ldxr(v985);
    while (__stxr(v986 + 1, v985));
    *((_QWORD *)v977 + 4) = v977;
    *((_QWORD *)v977 + 5) = v981;
    std::__shared_weak_count::__release_weak(v983);
  }
  else
  {
    do
      v987 = __ldxr(v982);
    while (__stxr(v987 + 1, v982));
    v988 = (unint64_t *)&v981->__shared_weak_owners_;
    do
      v989 = __ldxr(v988);
    while (__stxr(v989 + 1, v988));
    *((_QWORD *)v977 + 4) = v977;
    *((_QWORD *)v977 + 5) = v981;
  }
  do
    v990 = __ldaxr(v982);
  while (__stlxr(v990 - 1, v982));
  if (!v990)
  {
    ((void (*)(std::__shared_weak_count *))v981->__on_zero_shared)(v981);
    std::__shared_weak_count::__release_weak(v981);
  }
LABEL_1594:
  v991 = (std::__shared_weak_count *)v2283[1];
  if (v2283[1])
  {
    v992 = (unint64_t *)((char *)v2283[1] + 8);
    do
      v993 = __ldaxr(v992);
    while (__stlxr(v993 - 1, v992));
    if (!v993)
    {
      ((void (*)(std::__shared_weak_count *))v991->__on_zero_shared)(v991);
      std::__shared_weak_count::__release_weak(v991);
    }
  }
  v2283[0] = v977;
  v2283[1] = v981;
  v994 = (std::__shared_weak_count *)v2270[1];
  if (v2270[1])
  {
    v995 = (unint64_t *)((char *)v2270[1] + 8);
    do
      v996 = __ldaxr(v995);
    while (__stlxr(v996 - 1, v995));
    if (!v996)
    {
      ((void (*)(std::__shared_weak_count *))v994->__on_zero_shared)(v994);
      std::__shared_weak_count::__release_weak(v994);
    }
  }
  v997 = *(_OWORD *)v2257;
  v2257[0] = 0;
  v2257[1] = 0;
  *(_OWORD *)&v2348[1] = *(_OWORD *)v2335;
  v2348[0] = &off_24C9D16F8;
  v2349 = v2335[2];
  memset(v2335, 0, sizeof(v2335));
  v2350 = *(_OWORD *)v2322;
  v998 = v2322[2];
  memset(v2322, 0, sizeof(v2322));
  v2352 = v997;
  v2270[1] = 0;
  v2270[0] = 0;
  v999 = v2283[0];
  v1000 = (char *)v2283[1];
  v2351 = v998;
  v2353 = *(_OWORD *)v2283;
  v2283[0] = 0;
  v2283[1] = 0;
  if (*((_QWORD *)&v2353 + 1))
  {
    v1001 = (unint64_t *)(v1000 + 16);
    do
      v1002 = __ldxr(v1001);
    while (__stxr(v1002 + 1, v1001));
  }
  v2354 = &off_24C9CC650;
  v1003 = (_QWORD *)operator new();
  *v1003 = &off_24C9D9070;
  v1003[1] = v999;
  v1003[2] = v1000;
  *(_QWORD *)&v2355 = v1003;
  v1005 = *((_QWORD *)&v2353 + 1);
  v1004 = v2353;
  if (!*((_QWORD *)&v2353 + 1))
  {
    *((_QWORD *)&v2355 + 1) = v2353;
    v2356 = 0;
    if ((_QWORD)v2353)
      v1009 = v2353 + 16;
    else
      v1009 = 0;
    goto LABEL_1624;
  }
  v1006 = (unint64_t *)(*((_QWORD *)&v2353 + 1) + 16);
  do
    v1007 = __ldxr(v1006);
  while (__stxr(v1007 + 1, v1006));
  v1008 = *((_QWORD *)&v2353 + 1);
  *((_QWORD *)&v2355 + 1) = v1004;
  v2356 = v1005;
  if ((_QWORD)v2353)
    v1009 = v2353 + 16;
  else
    v1009 = 0;
  if (!*((_QWORD *)&v2353 + 1))
  {
    v1004 = v2353;
LABEL_1624:
    v1012 = 0;
    v2357 = &off_24C9B2520;
    v2358 = v1009;
    goto LABEL_1625;
  }
  v1010 = (unint64_t *)(*((_QWORD *)&v2353 + 1) + 16);
  do
    v1011 = __ldxr(v1010);
  while (__stxr(v1011 + 1, v1010));
  v1012 = *((_QWORD *)&v2353 + 1);
  v1004 = v2353;
  v2357 = &off_24C9B2520;
  *(_QWORD *)&v2358 = v1009;
  *((_QWORD *)&v2358 + 1) = v1008;
  if (*((_QWORD *)&v2353 + 1))
  {
    v1013 = (unint64_t *)(*((_QWORD *)&v2353 + 1) + 16);
    do
      v1014 = __ldxr(v1013);
    while (__stxr(v1014 + 1, v1013));
  }
LABEL_1625:
  if (v1004)
    v1015 = v1004 + 24;
  else
    v1015 = 0;
  v2359 = &off_24C9B2310;
  *(_QWORD *)&v2360 = v1015;
  *((_QWORD *)&v2360 + 1) = v1012;
  if ((SHIBYTE(v2322[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v2335[2]) & 0x80000000) == 0)
      goto LABEL_1630;
LABEL_1633:
    operator delete(v2335[0]);
    v1016 = (std::__shared_weak_count *)v2247[1];
    if (!v2247[1])
      goto LABEL_1638;
    goto LABEL_1634;
  }
  operator delete(v2322[0]);
  if (SHIBYTE(v2335[2]) < 0)
    goto LABEL_1633;
LABEL_1630:
  v1016 = (std::__shared_weak_count *)v2247[1];
  if (!v2247[1])
    goto LABEL_1638;
LABEL_1634:
  v1017 = (unint64_t *)&v1016->__shared_owners_;
  do
    v1018 = __ldaxr(v1017);
  while (__stlxr(v1018 - 1, v1017));
  if (!v1018)
  {
    ((void (*)(std::__shared_weak_count *))v1016->__on_zero_shared)(v1016);
    std::__shared_weak_count::__release_weak(v1016);
  }
LABEL_1638:
  v1019 = (std::__shared_weak_count *)v2257[1];
  if (!v2257[1])
    goto LABEL_1642;
  v1020 = (unint64_t *)((char *)v2257[1] + 8);
  do
    v1021 = __ldaxr(v1020);
  while (__stlxr(v1021 - 1, v1020));
  if (!v1021)
  {
    ((void (*)(std::__shared_weak_count *))v1019->__on_zero_shared)(v1019);
    std::__shared_weak_count::__release_weak(v1019);
    if ((SHIBYTE(v2296[2]) & 0x80000000) == 0)
    {
LABEL_1643:
      if ((SHIBYTE(v2309[2]) & 0x80000000) == 0)
        goto LABEL_1644;
LABEL_1648:
      operator delete(v2309[0]);
      if (v967)
        goto LABEL_1650;
      goto LABEL_1649;
    }
  }
  else
  {
LABEL_1642:
    if ((SHIBYTE(v2296[2]) & 0x80000000) == 0)
      goto LABEL_1643;
  }
  operator delete(v2296[0]);
  if (SHIBYTE(v2309[2]) < 0)
    goto LABEL_1648;
LABEL_1644:
  if (v967)
    goto LABEL_1650;
LABEL_1649:
  if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/Channel.h", 542, (uint64_t)"worker", 6, (uint64_t)"Callable must be valid", 22, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
LABEL_1650:
  v1023 = *(void **)v4;
  v1022 = *(unint64_t **)(v4 + 8);
  if (v1022)
  {
    v1024 = v1022 + 1;
    do
      v1025 = __ldxr(v1024);
    while (__stxr(v1025 + 1, v1024));
  }
  v1026 = *v2;
  v1027 = (unint64_t *)v2[1];
  if (*v2)
    v1028 = *v2 + 952;
  else
    v1028 = 0;
  v2025 = (std::__shared_weak_count *)v2[1];
  if (v1027)
  {
    v1029 = v1027 + 1;
    do
      v1030 = __ldxr(v1029);
    while (__stxr(v1030 + 1, v1029));
  }
  if (*(char *)(v1028 + 31) < 0)
  {
    sub_20E860C04(v2296, *(void **)(v1028 + 8), *(_QWORD *)(v1028 + 16));
  }
  else
  {
    v1031 = *(_OWORD *)(v1028 + 8);
    v2296[2] = *(void **)(v1028 + 24);
    *(_OWORD *)v2296 = v1031;
  }
  if (*(char *)(v1026 + 1007) < 0)
  {
    sub_20E860C04(v2283, *(void **)(v1026 + 984), *(_QWORD *)(v1026 + 992));
  }
  else
  {
    *(_OWORD *)v2283 = *(_OWORD *)(v1026 + 984);
    v2283[2] = *(void **)(v1026 + 1000);
  }
  v2247[0] = v1023;
  v2247[1] = v1022;
  v2234[0] = (void *)v1028;
  v2234[1] = v1027;
  if (v1027)
  {
    v1032 = v1027 + 1;
    do
      v1033 = __ldxr(v1032);
    while (__stxr(v1033 + 1, v1032));
  }
  if (SHIBYTE(v2296[2]) < 0)
  {
    sub_20E860C04(v2322, v2296[0], (unint64_t)v2296[1]);
  }
  else
  {
    *(_OWORD *)v2322 = *(_OWORD *)v2296;
    v2322[2] = v2296[2];
  }
  if (SHIBYTE(v2283[2]) < 0)
  {
    sub_20E860C04(v2309, v2283[0], (unint64_t)v2283[1]);
  }
  else
  {
    *(_OWORD *)v2309 = *(_OWORD *)v2283;
    v2309[2] = v2283[2];
  }
  *(void **)((char *)v2195 + 7) = *(void **)((char *)&v2296[1] + 7);
  v1034 = v2296[0];
  v2195[0] = v2296[1];
  v1035 = HIBYTE(v2296[2]);
  memset(v2296, 0, sizeof(v2296));
  v2208[0] = v2195[0];
  *(void **)((char *)v2208 + 7) = *(void **)((char *)v2195 + 7);
  *(void **)((char *)v2195 + 7) = 0;
  v2195[0] = 0;
  v2257[0] = v1023;
  v2257[1] = v1022;
  if (v1022)
  {
    v1036 = v1022 + 1;
    do
      v1037 = __ldxr(v1036);
    while (__stxr(v1037 + 1, v1036));
  }
  v1038 = (char *)operator new();
  v2221[0] = v2208[0];
  *(void **)((char *)v2221 + 7) = *(void **)((char *)v2208 + 7);
  v2208[0] = 0;
  *(void **)((char *)v2208 + 7) = 0;
  v1039 = *(_OWORD *)v2257;
  v2257[0] = 0;
  v2257[1] = 0;
  v1038[8] = 1;
  *((_QWORD *)v1038 + 4) = 0;
  *((_QWORD *)v1038 + 5) = 0;
  *(_QWORD *)v1038 = &off_24C9D90E8;
  *((_QWORD *)v1038 + 2) = &unk_24C9D9160;
  *((_QWORD *)v1038 + 3) = &unk_24C9D91A0;
  v1040 = v2221[0];
  *(void **)(v1038 + 63) = *(void **)((char *)v2221 + 7);
  *((_QWORD *)v1038 + 6) = v1034;
  *((_QWORD *)v1038 + 7) = v1040;
  v1038[71] = v1035;
  v2221[0] = 0;
  *(void **)((char *)v2221 + 7) = 0;
  *(_OWORD *)(v1038 + 72) = v1039;
  v2270[1] = 0;
  v2270[0] = 0;
  v1041 = (_QWORD *)operator new();
  *v1041 = &off_24C9D9288;
  v1041[1] = v1028;
  v1041[2] = v1027;
  v2234[1] = 0;
  v2234[0] = 0;
  *((_QWORD *)v1038 + 18) = 0;
  *((_QWORD *)v1038 + 11) = v1041;
  *((_QWORD *)v1038 + 12) = v1038 + 96;
  *((_QWORD *)v1038 + 13) = v1038 + 96;
  *((_QWORD *)v1038 + 14) = 0;
  *((_QWORD *)v1038 + 15) = v1038 + 120;
  *((_QWORD *)v1038 + 16) = v1038 + 120;
  *((_QWORD *)v1038 + 17) = 0;
  if (!*((_QWORD *)v1038 + 9)
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 109, (uint64_t)"scheduler_", 10, (uint64_t)"scheduler must be valid", 23, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v1042 = (std::__shared_weak_count *)operator new();
  v1042->__shared_owners_ = 0;
  v1043 = (unint64_t *)&v1042->__shared_owners_;
  v1042->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9D9728;
  v1042->__shared_weak_owners_ = 0;
  v1042[1].__vftable = (std::__shared_weak_count_vtbl *)v1038;
  v1044 = (std::__shared_weak_count *)*((_QWORD *)v1038 + 5);
  if (v1044)
  {
    if (v1044->__shared_owners_ != -1)
      goto LABEL_1692;
    do
      v1045 = __ldxr(v1043);
    while (__stxr(v1045 + 1, v1043));
    v1046 = (unint64_t *)&v1042->__shared_weak_owners_;
    do
      v1047 = __ldxr(v1046);
    while (__stxr(v1047 + 1, v1046));
    *((_QWORD *)v1038 + 4) = v1038;
    *((_QWORD *)v1038 + 5) = v1042;
    std::__shared_weak_count::__release_weak(v1044);
  }
  else
  {
    do
      v1048 = __ldxr(v1043);
    while (__stxr(v1048 + 1, v1043));
    v1049 = (unint64_t *)&v1042->__shared_weak_owners_;
    do
      v1050 = __ldxr(v1049);
    while (__stxr(v1050 + 1, v1049));
    *((_QWORD *)v1038 + 4) = v1038;
    *((_QWORD *)v1038 + 5) = v1042;
  }
  do
    v1051 = __ldaxr(v1043);
  while (__stlxr(v1051 - 1, v1043));
  if (!v1051)
  {
    ((void (*)(std::__shared_weak_count *))v1042->__on_zero_shared)(v1042);
    std::__shared_weak_count::__release_weak(v1042);
  }
LABEL_1692:
  v1052 = (std::__shared_weak_count *)v2270[1];
  if (v2270[1])
  {
    v1053 = (unint64_t *)((char *)v2270[1] + 8);
    do
      v1054 = __ldaxr(v1053);
    while (__stlxr(v1054 - 1, v1053));
    if (!v1054)
    {
      ((void (*)(std::__shared_weak_count *))v1052->__on_zero_shared)(v1052);
      std::__shared_weak_count::__release_weak(v1052);
    }
  }
  v2270[0] = v1038;
  v2270[1] = v1042;
  v1055 = (std::__shared_weak_count *)v2257[1];
  if (v2257[1])
  {
    v1056 = (unint64_t *)((char *)v2257[1] + 8);
    do
      v1057 = __ldaxr(v1056);
    while (__stlxr(v1057 - 1, v1056));
    if (!v1057)
    {
      ((void (*)(std::__shared_weak_count *))v1055->__on_zero_shared)(v1055);
      std::__shared_weak_count::__release_weak(v1055);
    }
  }
  v1058 = *(_OWORD *)v2247;
  v2247[0] = 0;
  v2247[1] = 0;
  *(_OWORD *)&v2335[1] = *(_OWORD *)v2322;
  v2335[0] = &off_24C9D1728;
  v2336 = v2322[2];
  memset(v2322, 0, sizeof(v2322));
  v2337 = *(_OWORD *)v2309;
  v1059 = v2309[2];
  memset(v2309, 0, sizeof(v2309));
  v2339 = v1058;
  v2257[1] = 0;
  v2257[0] = 0;
  v1060 = v2270[0];
  v1061 = (char *)v2270[1];
  v2338 = v1059;
  v2340 = *(_OWORD *)v2270;
  v2270[0] = 0;
  v2270[1] = 0;
  if (*((_QWORD *)&v2340 + 1))
  {
    v1062 = (unint64_t *)(v1061 + 16);
    do
      v1063 = __ldxr(v1062);
    while (__stxr(v1063 + 1, v1062));
  }
  v2341 = &off_24C9D1758;
  v1064 = (_QWORD *)operator new();
  *v1064 = &off_24C9D9778;
  v1064[1] = v1060;
  v1064[2] = v1061;
  *(_QWORD *)&v2342 = v1064;
  v1066 = *((_QWORD *)&v2340 + 1);
  v1065 = v2340;
  if (!*((_QWORD *)&v2340 + 1))
  {
    *((_QWORD *)&v2342 + 1) = v2340;
    v2343 = 0;
    if ((_QWORD)v2340)
      v1070 = v2340 + 16;
    else
      v1070 = 0;
    goto LABEL_1722;
  }
  v1067 = (unint64_t *)(*((_QWORD *)&v2340 + 1) + 16);
  do
    v1068 = __ldxr(v1067);
  while (__stxr(v1068 + 1, v1067));
  v1069 = *((_QWORD *)&v2340 + 1);
  *((_QWORD *)&v2342 + 1) = v1065;
  v2343 = v1066;
  if ((_QWORD)v2340)
    v1070 = v2340 + 16;
  else
    v1070 = 0;
  if (!*((_QWORD *)&v2340 + 1))
  {
    v1065 = v2340;
LABEL_1722:
    v1073 = 0;
    v2344 = &off_24C9B2520;
    v2345 = v1070;
    goto LABEL_1723;
  }
  v1071 = (unint64_t *)(*((_QWORD *)&v2340 + 1) + 16);
  do
    v1072 = __ldxr(v1071);
  while (__stxr(v1072 + 1, v1071));
  v1073 = *((_QWORD *)&v2340 + 1);
  v1065 = v2340;
  v2344 = &off_24C9B2520;
  *(_QWORD *)&v2345 = v1070;
  *((_QWORD *)&v2345 + 1) = v1069;
  if (*((_QWORD *)&v2340 + 1))
  {
    v1074 = (unint64_t *)(*((_QWORD *)&v2340 + 1) + 16);
    do
      v1075 = __ldxr(v1074);
    while (__stxr(v1075 + 1, v1074));
  }
LABEL_1723:
  if (v1065)
    v1076 = v1065 + 24;
  else
    v1076 = 0;
  v2346 = &off_24C9B2310;
  *(_QWORD *)&v2347 = v1076;
  *((_QWORD *)&v2347 + 1) = v1073;
  if ((SHIBYTE(v2309[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v2322[2]) & 0x80000000) == 0)
      goto LABEL_1728;
LABEL_1731:
    operator delete(v2322[0]);
    v1077 = (std::__shared_weak_count *)v2234[1];
    if (!v2234[1])
      goto LABEL_1736;
    goto LABEL_1732;
  }
  operator delete(v2309[0]);
  if (SHIBYTE(v2322[2]) < 0)
    goto LABEL_1731;
LABEL_1728:
  v1077 = (std::__shared_weak_count *)v2234[1];
  if (!v2234[1])
    goto LABEL_1736;
LABEL_1732:
  v1078 = (unint64_t *)&v1077->__shared_owners_;
  do
    v1079 = __ldaxr(v1078);
  while (__stlxr(v1079 - 1, v1078));
  if (!v1079)
  {
    ((void (*)(std::__shared_weak_count *))v1077->__on_zero_shared)(v1077);
    std::__shared_weak_count::__release_weak(v1077);
  }
LABEL_1736:
  v1080 = (std::__shared_weak_count *)v2247[1];
  if (!v2247[1])
    goto LABEL_1740;
  v1081 = (unint64_t *)((char *)v2247[1] + 8);
  do
    v1082 = __ldaxr(v1081);
  while (__stlxr(v1082 - 1, v1081));
  if (!v1082)
  {
    ((void (*)(std::__shared_weak_count *))v1080->__on_zero_shared)(v1080);
    std::__shared_weak_count::__release_weak(v1080);
    if ((SHIBYTE(v2283[2]) & 0x80000000) == 0)
    {
LABEL_1741:
      if ((SHIBYTE(v2296[2]) & 0x80000000) == 0)
        goto LABEL_1742;
LABEL_1746:
      operator delete(v2296[0]);
      if (v1028)
        goto LABEL_1748;
      goto LABEL_1747;
    }
  }
  else
  {
LABEL_1740:
    if ((SHIBYTE(v2283[2]) & 0x80000000) == 0)
      goto LABEL_1741;
  }
  operator delete(v2283[0]);
  if (SHIBYTE(v2296[2]) < 0)
    goto LABEL_1746;
LABEL_1742:
  if (v1028)
    goto LABEL_1748;
LABEL_1747:
  if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/Channel.h", 542, (uint64_t)"worker", 6, (uint64_t)"Callable must be valid", 22, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
LABEL_1748:
  v1084 = *(void **)v4;
  v1083 = *(unint64_t **)(v4 + 8);
  if (v1083)
  {
    v1085 = v1083 + 1;
    do
      v1086 = __ldxr(v1085);
    while (__stxr(v1086 + 1, v1085));
  }
  v1087 = (unint64_t *)v2[1];
  if (*v2)
    v1088 = *v2 + 1008;
  else
    v1088 = 0;
  v2024 = (std::__shared_weak_count *)v2[1];
  if (v1087)
  {
    v1089 = v1087 + 1;
    do
      v1090 = __ldxr(v1089);
    while (__stxr(v1090 + 1, v1089));
  }
  if (*(char *)(v1088 + 31) < 0)
  {
    sub_20E860C04(v2283, *(void **)(v1088 + 8), *(_QWORD *)(v1088 + 16));
  }
  else
  {
    v1091 = *(_OWORD *)(v1088 + 8);
    v2283[2] = *(void **)(v1088 + 24);
    *(_OWORD *)v2283 = v1091;
  }
  if (*(char *)(v1088 + 55) < 0)
  {
    sub_20E860C04(v2270, *(void **)(v1088 + 32), *(_QWORD *)(v1088 + 40));
  }
  else
  {
    *(_OWORD *)v2270 = *(_OWORD *)(v1088 + 32);
    v2270[2] = *(void **)(v1088 + 48);
  }
  v2234[0] = v1084;
  v2234[1] = v1083;
  v2221[0] = (void *)v1088;
  v2221[1] = v1087;
  if (v1087)
  {
    v1092 = v1087 + 1;
    do
      v1093 = __ldxr(v1092);
    while (__stxr(v1093 + 1, v1092));
  }
  if (SHIBYTE(v2283[2]) < 0)
  {
    sub_20E860C04(v2309, v2283[0], (unint64_t)v2283[1]);
  }
  else
  {
    *(_OWORD *)v2309 = *(_OWORD *)v2283;
    v2309[2] = v2283[2];
  }
  if (SHIBYTE(v2270[2]) < 0)
  {
    sub_20E860C04(v2296, v2270[0], (unint64_t)v2270[1]);
  }
  else
  {
    *(_OWORD *)v2296 = *(_OWORD *)v2270;
    v2296[2] = v2270[2];
  }
  *(void **)((char *)v2182 + 7) = *(void **)((char *)&v2283[1] + 7);
  v1094 = v2283[0];
  v2182[0] = v2283[1];
  v1095 = HIBYTE(v2283[2]);
  memset(v2283, 0, sizeof(v2283));
  v2195[0] = v2182[0];
  *(void **)((char *)v2195 + 7) = *(void **)((char *)v2182 + 7);
  *(void **)((char *)v2182 + 7) = 0;
  v2182[0] = 0;
  v2247[0] = v1084;
  v2247[1] = v1083;
  if (v1083)
  {
    v1096 = v1083 + 1;
    do
      v1097 = __ldxr(v1096);
    while (__stxr(v1097 + 1, v1096));
  }
  v1098 = (char *)operator new();
  v2208[0] = v2195[0];
  *(void **)((char *)v2208 + 7) = *(void **)((char *)v2195 + 7);
  v2195[0] = 0;
  *(void **)((char *)v2195 + 7) = 0;
  v1099 = *(_OWORD *)v2247;
  v2247[0] = 0;
  v2247[1] = 0;
  v1098[8] = 1;
  *((_QWORD *)v1098 + 4) = 0;
  *((_QWORD *)v1098 + 5) = 0;
  *(_QWORD *)v1098 = &off_24C9D97F0;
  *((_QWORD *)v1098 + 2) = &unk_24C9D9868;
  *((_QWORD *)v1098 + 3) = &unk_24C9D98A8;
  v1100 = v2208[0];
  *(void **)(v1098 + 63) = *(void **)((char *)v2208 + 7);
  *((_QWORD *)v1098 + 6) = v1094;
  *((_QWORD *)v1098 + 7) = v1100;
  v1098[71] = v1095;
  v2208[0] = 0;
  *(void **)((char *)v2208 + 7) = 0;
  *(_OWORD *)(v1098 + 72) = v1099;
  v2257[1] = 0;
  v2257[0] = 0;
  v1101 = (_QWORD *)operator new();
  *v1101 = &off_24C9D99A0;
  v1101[1] = v1088;
  v1101[2] = v1087;
  v2221[1] = 0;
  v2221[0] = 0;
  *((_QWORD *)v1098 + 18) = 0;
  *((_QWORD *)v1098 + 11) = v1101;
  *((_QWORD *)v1098 + 12) = v1098 + 96;
  *((_QWORD *)v1098 + 13) = v1098 + 96;
  *((_QWORD *)v1098 + 14) = 0;
  *((_QWORD *)v1098 + 15) = v1098 + 120;
  *((_QWORD *)v1098 + 16) = v1098 + 120;
  *((_QWORD *)v1098 + 17) = 0;
  if (!*((_QWORD *)v1098 + 9)
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 109, (uint64_t)"scheduler_", 10, (uint64_t)"scheduler must be valid", 23, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v1102 = (std::__shared_weak_count *)operator new();
  v1102->__shared_owners_ = 0;
  v1103 = (unint64_t *)&v1102->__shared_owners_;
  v1102->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9D9E90;
  v1102->__shared_weak_owners_ = 0;
  v1102[1].__vftable = (std::__shared_weak_count_vtbl *)v1098;
  v1104 = (std::__shared_weak_count *)*((_QWORD *)v1098 + 5);
  if (v1104)
  {
    if (v1104->__shared_owners_ != -1)
      goto LABEL_1790;
    do
      v1105 = __ldxr(v1103);
    while (__stxr(v1105 + 1, v1103));
    v1106 = (unint64_t *)&v1102->__shared_weak_owners_;
    do
      v1107 = __ldxr(v1106);
    while (__stxr(v1107 + 1, v1106));
    *((_QWORD *)v1098 + 4) = v1098;
    *((_QWORD *)v1098 + 5) = v1102;
    std::__shared_weak_count::__release_weak(v1104);
  }
  else
  {
    do
      v1108 = __ldxr(v1103);
    while (__stxr(v1108 + 1, v1103));
    v1109 = (unint64_t *)&v1102->__shared_weak_owners_;
    do
      v1110 = __ldxr(v1109);
    while (__stxr(v1110 + 1, v1109));
    *((_QWORD *)v1098 + 4) = v1098;
    *((_QWORD *)v1098 + 5) = v1102;
  }
  do
    v1111 = __ldaxr(v1103);
  while (__stlxr(v1111 - 1, v1103));
  if (!v1111)
  {
    ((void (*)(std::__shared_weak_count *))v1102->__on_zero_shared)(v1102);
    std::__shared_weak_count::__release_weak(v1102);
  }
LABEL_1790:
  v1112 = (std::__shared_weak_count *)v2257[1];
  if (v2257[1])
  {
    v1113 = (unint64_t *)((char *)v2257[1] + 8);
    do
      v1114 = __ldaxr(v1113);
    while (__stlxr(v1114 - 1, v1113));
    if (!v1114)
    {
      ((void (*)(std::__shared_weak_count *))v1112->__on_zero_shared)(v1112);
      std::__shared_weak_count::__release_weak(v1112);
    }
  }
  v2257[0] = v1098;
  v2257[1] = v1102;
  v1115 = (std::__shared_weak_count *)v2247[1];
  if (v2247[1])
  {
    v1116 = (unint64_t *)((char *)v2247[1] + 8);
    do
      v1117 = __ldaxr(v1116);
    while (__stlxr(v1117 - 1, v1116));
    if (!v1117)
    {
      ((void (*)(std::__shared_weak_count *))v1115->__on_zero_shared)(v1115);
      std::__shared_weak_count::__release_weak(v1115);
    }
  }
  v1118 = *(_OWORD *)v2234;
  v2234[0] = 0;
  v2234[1] = 0;
  *(_OWORD *)&v2322[1] = *(_OWORD *)v2309;
  v2322[0] = &off_24C9D1790;
  v2323 = v2309[2];
  memset(v2309, 0, sizeof(v2309));
  v2324 = *(_OWORD *)v2296;
  v1119 = v2296[2];
  memset(v2296, 0, sizeof(v2296));
  v2326 = v1118;
  v2247[1] = 0;
  v2247[0] = 0;
  v1120 = v2257[0];
  v1121 = (char *)v2257[1];
  v2325 = v1119;
  v2327 = *(_OWORD *)v2257;
  v2257[0] = 0;
  v2257[1] = 0;
  if (*((_QWORD *)&v2327 + 1))
  {
    v1122 = (unint64_t *)(v1121 + 16);
    do
      v1123 = __ldxr(v1122);
    while (__stxr(v1123 + 1, v1122));
  }
  v2328 = &off_24C9D17C0;
  v1124 = (_QWORD *)operator new();
  *v1124 = &off_24C9D9EE0;
  v1124[1] = v1120;
  v1124[2] = v1121;
  *(_QWORD *)&v2329 = v1124;
  v1126 = *((_QWORD *)&v2327 + 1);
  v1125 = v2327;
  if (!*((_QWORD *)&v2327 + 1))
  {
    *((_QWORD *)&v2329 + 1) = v2327;
    v2330 = 0;
    if ((_QWORD)v2327)
      v1130 = v2327 + 16;
    else
      v1130 = 0;
    goto LABEL_1820;
  }
  v1127 = (unint64_t *)(*((_QWORD *)&v2327 + 1) + 16);
  do
    v1128 = __ldxr(v1127);
  while (__stxr(v1128 + 1, v1127));
  v1129 = *((_QWORD *)&v2327 + 1);
  *((_QWORD *)&v2329 + 1) = v1125;
  v2330 = v1126;
  if ((_QWORD)v2327)
    v1130 = v2327 + 16;
  else
    v1130 = 0;
  if (!*((_QWORD *)&v2327 + 1))
  {
    v1125 = v2327;
LABEL_1820:
    v1133 = 0;
    v2331 = &off_24C9D17F8;
    v2332 = v1130;
    goto LABEL_1821;
  }
  v1131 = (unint64_t *)(*((_QWORD *)&v2327 + 1) + 16);
  do
    v1132 = __ldxr(v1131);
  while (__stxr(v1132 + 1, v1131));
  v1133 = *((_QWORD *)&v2327 + 1);
  v1125 = v2327;
  v2331 = &off_24C9D17F8;
  *(_QWORD *)&v2332 = v1130;
  *((_QWORD *)&v2332 + 1) = v1129;
  if (*((_QWORD *)&v2327 + 1))
  {
    v1134 = (unint64_t *)(*((_QWORD *)&v2327 + 1) + 16);
    do
      v1135 = __ldxr(v1134);
    while (__stxr(v1135 + 1, v1134));
  }
LABEL_1821:
  if (v1125)
    v1136 = v1125 + 24;
  else
    v1136 = 0;
  v2333 = &off_24C9B2310;
  *(_QWORD *)&v2334 = v1136;
  *((_QWORD *)&v2334 + 1) = v1133;
  if ((SHIBYTE(v2296[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v2309[2]) & 0x80000000) == 0)
      goto LABEL_1826;
LABEL_1829:
    operator delete(v2309[0]);
    v1137 = (std::__shared_weak_count *)v2221[1];
    if (!v2221[1])
      goto LABEL_1834;
    goto LABEL_1830;
  }
  operator delete(v2296[0]);
  if (SHIBYTE(v2309[2]) < 0)
    goto LABEL_1829;
LABEL_1826:
  v1137 = (std::__shared_weak_count *)v2221[1];
  if (!v2221[1])
    goto LABEL_1834;
LABEL_1830:
  v1138 = (unint64_t *)&v1137->__shared_owners_;
  do
    v1139 = __ldaxr(v1138);
  while (__stlxr(v1139 - 1, v1138));
  if (!v1139)
  {
    ((void (*)(std::__shared_weak_count *))v1137->__on_zero_shared)(v1137);
    std::__shared_weak_count::__release_weak(v1137);
  }
LABEL_1834:
  v1140 = (std::__shared_weak_count *)v2234[1];
  if (!v2234[1])
    goto LABEL_1838;
  v1141 = (unint64_t *)((char *)v2234[1] + 8);
  do
    v1142 = __ldaxr(v1141);
  while (__stlxr(v1142 - 1, v1141));
  if (!v1142)
  {
    ((void (*)(std::__shared_weak_count *))v1140->__on_zero_shared)(v1140);
    std::__shared_weak_count::__release_weak(v1140);
    if ((SHIBYTE(v2270[2]) & 0x80000000) == 0)
    {
LABEL_1839:
      if ((SHIBYTE(v2283[2]) & 0x80000000) == 0)
        goto LABEL_1840;
LABEL_1844:
      operator delete(v2283[0]);
      if (v1088)
        goto LABEL_1846;
      goto LABEL_1845;
    }
  }
  else
  {
LABEL_1838:
    if ((SHIBYTE(v2270[2]) & 0x80000000) == 0)
      goto LABEL_1839;
  }
  operator delete(v2270[0]);
  if (SHIBYTE(v2283[2]) < 0)
    goto LABEL_1844;
LABEL_1840:
  if (v1088)
    goto LABEL_1846;
LABEL_1845:
  if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/Channel.h", 542, (uint64_t)"worker", 6, (uint64_t)"Callable must be valid", 22, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
LABEL_1846:
  v1144 = *(void **)v4;
  v1143 = *(unint64_t **)(v4 + 8);
  if (v1143)
  {
    v1145 = v1143 + 1;
    do
      v1146 = __ldxr(v1145);
    while (__stxr(v1146 + 1, v1145));
  }
  v1147 = (unint64_t *)v2[1];
  if (*v2)
    v1148 = *v2 + 1064;
  else
    v1148 = 0;
  v2023 = (std::__shared_weak_count *)v2[1];
  if (v1147)
  {
    v1149 = v1147 + 1;
    do
      v1150 = __ldxr(v1149);
    while (__stxr(v1150 + 1, v1149));
  }
  if (*(char *)(v1148 + 31) < 0)
  {
    sub_20E860C04(v2270, *(void **)(v1148 + 8), *(_QWORD *)(v1148 + 16));
  }
  else
  {
    v1151 = *(_OWORD *)(v1148 + 8);
    v2270[2] = *(void **)(v1148 + 24);
    *(_OWORD *)v2270 = v1151;
  }
  if (*(char *)(v1148 + 55) < 0)
  {
    sub_20E860C04(v2257, *(void **)(v1148 + 32), *(_QWORD *)(v1148 + 40));
  }
  else
  {
    *(_OWORD *)v2257 = *(_OWORD *)(v1148 + 32);
    v2257[2] = *(void **)(v1148 + 48);
  }
  v2221[0] = v1144;
  v2221[1] = v1143;
  v2208[0] = (void *)v1148;
  v2208[1] = v1147;
  if (v1147)
  {
    v1152 = v1147 + 1;
    do
      v1153 = __ldxr(v1152);
    while (__stxr(v1153 + 1, v1152));
  }
  if (SHIBYTE(v2270[2]) < 0)
  {
    sub_20E860C04(v2296, v2270[0], (unint64_t)v2270[1]);
  }
  else
  {
    *(_OWORD *)v2296 = *(_OWORD *)v2270;
    v2296[2] = v2270[2];
  }
  if (SHIBYTE(v2257[2]) < 0)
  {
    sub_20E860C04(v2283, v2257[0], (unint64_t)v2257[1]);
  }
  else
  {
    *(_OWORD *)v2283 = *(_OWORD *)v2257;
    v2283[2] = v2257[2];
  }
  *(void **)((char *)v2459 + 7) = *(void **)((char *)&v2270[1] + 7);
  v1154 = v2270[0];
  v2459[0] = v2270[1];
  v1155 = HIBYTE(v2270[2]);
  memset(v2270, 0, sizeof(v2270));
  v2182[0] = v2459[0];
  *(void **)((char *)v2182 + 7) = *(void **)((char *)v2459 + 7);
  *(void **)((char *)v2459 + 7) = 0;
  v2459[0] = 0;
  v2234[0] = v1144;
  v2234[1] = v1143;
  if (v1143)
  {
    v1156 = v1143 + 1;
    do
      v1157 = __ldxr(v1156);
    while (__stxr(v1157 + 1, v1156));
  }
  v1158 = (char *)operator new();
  v2195[0] = v2182[0];
  *(void **)((char *)v2195 + 7) = *(void **)((char *)v2182 + 7);
  v2182[0] = 0;
  *(void **)((char *)v2182 + 7) = 0;
  v1159 = *(_OWORD *)v2234;
  v2234[0] = 0;
  v2234[1] = 0;
  v1158[8] = 1;
  *((_QWORD *)v1158 + 4) = 0;
  *((_QWORD *)v1158 + 5) = 0;
  *(_QWORD *)v1158 = &off_24C9D9F58;
  *((_QWORD *)v1158 + 2) = &unk_24C9D9FD0;
  *((_QWORD *)v1158 + 3) = &unk_24C9DA010;
  v1160 = v2195[0];
  *(void **)(v1158 + 63) = *(void **)((char *)v2195 + 7);
  *((_QWORD *)v1158 + 6) = v1154;
  *((_QWORD *)v1158 + 7) = v1160;
  v1158[71] = v1155;
  v2195[0] = 0;
  *(void **)((char *)v2195 + 7) = 0;
  *(_OWORD *)(v1158 + 72) = v1159;
  v2247[1] = 0;
  v2247[0] = 0;
  v1161 = (_QWORD *)operator new();
  *v1161 = &off_24C9DA0E8;
  v1161[1] = v1148;
  v1161[2] = v1147;
  v2208[1] = 0;
  v2208[0] = 0;
  *((_QWORD *)v1158 + 18) = 0;
  *((_QWORD *)v1158 + 11) = v1161;
  *((_QWORD *)v1158 + 12) = v1158 + 96;
  *((_QWORD *)v1158 + 13) = v1158 + 96;
  *((_QWORD *)v1158 + 14) = 0;
  *((_QWORD *)v1158 + 15) = v1158 + 120;
  *((_QWORD *)v1158 + 16) = v1158 + 120;
  *((_QWORD *)v1158 + 17) = 0;
  if (!*((_QWORD *)v1158 + 9)
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 109, (uint64_t)"scheduler_", 10, (uint64_t)"scheduler must be valid", 23, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v1162 = (std::__shared_weak_count *)operator new();
  v1162->__shared_owners_ = 0;
  v1163 = (unint64_t *)&v1162->__shared_owners_;
  v1162->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9DA588;
  v1162->__shared_weak_owners_ = 0;
  v1162[1].__vftable = (std::__shared_weak_count_vtbl *)v1158;
  v1164 = (std::__shared_weak_count *)*((_QWORD *)v1158 + 5);
  if (v1164)
  {
    if (v1164->__shared_owners_ != -1)
      goto LABEL_1888;
    do
      v1165 = __ldxr(v1163);
    while (__stxr(v1165 + 1, v1163));
    v1166 = (unint64_t *)&v1162->__shared_weak_owners_;
    do
      v1167 = __ldxr(v1166);
    while (__stxr(v1167 + 1, v1166));
    *((_QWORD *)v1158 + 4) = v1158;
    *((_QWORD *)v1158 + 5) = v1162;
    std::__shared_weak_count::__release_weak(v1164);
  }
  else
  {
    do
      v1168 = __ldxr(v1163);
    while (__stxr(v1168 + 1, v1163));
    v1169 = (unint64_t *)&v1162->__shared_weak_owners_;
    do
      v1170 = __ldxr(v1169);
    while (__stxr(v1170 + 1, v1169));
    *((_QWORD *)v1158 + 4) = v1158;
    *((_QWORD *)v1158 + 5) = v1162;
  }
  do
    v1171 = __ldaxr(v1163);
  while (__stlxr(v1171 - 1, v1163));
  if (!v1171)
  {
    ((void (*)(std::__shared_weak_count *))v1162->__on_zero_shared)(v1162);
    std::__shared_weak_count::__release_weak(v1162);
  }
LABEL_1888:
  v1172 = (std::__shared_weak_count *)v2247[1];
  if (v2247[1])
  {
    v1173 = (unint64_t *)((char *)v2247[1] + 8);
    do
      v1174 = __ldaxr(v1173);
    while (__stlxr(v1174 - 1, v1173));
    if (!v1174)
    {
      ((void (*)(std::__shared_weak_count *))v1172->__on_zero_shared)(v1172);
      std::__shared_weak_count::__release_weak(v1172);
    }
  }
  v2247[0] = v1158;
  v2247[1] = v1162;
  v1175 = (std::__shared_weak_count *)v2234[1];
  if (v2234[1])
  {
    v1176 = (unint64_t *)((char *)v2234[1] + 8);
    do
      v1177 = __ldaxr(v1176);
    while (__stlxr(v1177 - 1, v1176));
    if (!v1177)
    {
      ((void (*)(std::__shared_weak_count *))v1175->__on_zero_shared)(v1175);
      std::__shared_weak_count::__release_weak(v1175);
    }
  }
  v1178 = *(_OWORD *)v2221;
  v2221[0] = 0;
  v2221[1] = 0;
  *(_OWORD *)&v2309[1] = *(_OWORD *)v2296;
  v2309[0] = &off_24C9D1830;
  v2310 = v2296[2];
  memset(v2296, 0, sizeof(v2296));
  v2311 = *(_OWORD *)v2283;
  v1179 = v2283[2];
  memset(v2283, 0, sizeof(v2283));
  v2313 = v1178;
  v2234[1] = 0;
  v2234[0] = 0;
  v1180 = v2247[0];
  v1181 = (char *)v2247[1];
  v2312 = v1179;
  v2314 = *(_OWORD *)v2247;
  v2247[0] = 0;
  v2247[1] = 0;
  if (*((_QWORD *)&v2314 + 1))
  {
    v1182 = (unint64_t *)(v1181 + 16);
    do
      v1183 = __ldxr(v1182);
    while (__stxr(v1183 + 1, v1182));
  }
  v2315 = &off_24C9B5770;
  v1184 = (_QWORD *)operator new();
  *v1184 = &off_24C9B5D20;
  v1184[1] = v1180;
  v1184[2] = v1181;
  *(_QWORD *)&v2316 = v1184;
  v1186 = *((_QWORD *)&v2314 + 1);
  v1185 = v2314;
  if (!*((_QWORD *)&v2314 + 1))
  {
    *((_QWORD *)&v2316 + 1) = v2314;
    v2317 = 0;
    if ((_QWORD)v2314)
      v1190 = v2314 + 16;
    else
      v1190 = 0;
    goto LABEL_1918;
  }
  v1187 = (unint64_t *)(*((_QWORD *)&v2314 + 1) + 16);
  do
    v1188 = __ldxr(v1187);
  while (__stxr(v1188 + 1, v1187));
  v1189 = *((_QWORD *)&v2314 + 1);
  *((_QWORD *)&v2316 + 1) = v1185;
  v2317 = v1186;
  if ((_QWORD)v2314)
    v1190 = v2314 + 16;
  else
    v1190 = 0;
  if (!*((_QWORD *)&v2314 + 1))
  {
    v1185 = v2314;
LABEL_1918:
    v1193 = 0;
    v2318 = &off_24C9B2520;
    v2319 = v1190;
    goto LABEL_1919;
  }
  v1191 = (unint64_t *)(*((_QWORD *)&v2314 + 1) + 16);
  do
    v1192 = __ldxr(v1191);
  while (__stxr(v1192 + 1, v1191));
  v1193 = *((_QWORD *)&v2314 + 1);
  v1185 = v2314;
  v2318 = &off_24C9B2520;
  *(_QWORD *)&v2319 = v1190;
  *((_QWORD *)&v2319 + 1) = v1189;
  if (*((_QWORD *)&v2314 + 1))
  {
    v1194 = (unint64_t *)(*((_QWORD *)&v2314 + 1) + 16);
    do
      v1195 = __ldxr(v1194);
    while (__stxr(v1195 + 1, v1194));
  }
LABEL_1919:
  if (v1185)
    v1196 = v1185 + 24;
  else
    v1196 = 0;
  v2320 = &off_24C9B2310;
  *(_QWORD *)&v2321 = v1196;
  *((_QWORD *)&v2321 + 1) = v1193;
  if ((SHIBYTE(v2283[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v2296[2]) & 0x80000000) == 0)
      goto LABEL_1924;
LABEL_1927:
    operator delete(v2296[0]);
    v1197 = (std::__shared_weak_count *)v2208[1];
    if (!v2208[1])
      goto LABEL_1932;
    goto LABEL_1928;
  }
  operator delete(v2283[0]);
  if (SHIBYTE(v2296[2]) < 0)
    goto LABEL_1927;
LABEL_1924:
  v1197 = (std::__shared_weak_count *)v2208[1];
  if (!v2208[1])
    goto LABEL_1932;
LABEL_1928:
  v1198 = (unint64_t *)&v1197->__shared_owners_;
  do
    v1199 = __ldaxr(v1198);
  while (__stlxr(v1199 - 1, v1198));
  if (!v1199)
  {
    ((void (*)(std::__shared_weak_count *))v1197->__on_zero_shared)(v1197);
    std::__shared_weak_count::__release_weak(v1197);
  }
LABEL_1932:
  v1200 = (std::__shared_weak_count *)v2221[1];
  if (!v2221[1])
    goto LABEL_1936;
  v1201 = (unint64_t *)((char *)v2221[1] + 8);
  do
    v1202 = __ldaxr(v1201);
  while (__stlxr(v1202 - 1, v1201));
  if (!v1202)
  {
    ((void (*)(std::__shared_weak_count *))v1200->__on_zero_shared)(v1200);
    std::__shared_weak_count::__release_weak(v1200);
    if ((SHIBYTE(v2257[2]) & 0x80000000) == 0)
    {
LABEL_1937:
      if ((SHIBYTE(v2270[2]) & 0x80000000) == 0)
        goto LABEL_1938;
LABEL_1942:
      operator delete(v2270[0]);
      if (v1148)
        goto LABEL_1944;
      goto LABEL_1943;
    }
  }
  else
  {
LABEL_1936:
    if ((SHIBYTE(v2257[2]) & 0x80000000) == 0)
      goto LABEL_1937;
  }
  operator delete(v2257[0]);
  if (SHIBYTE(v2270[2]) < 0)
    goto LABEL_1942;
LABEL_1938:
  if (v1148)
    goto LABEL_1944;
LABEL_1943:
  if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/Channel.h", 542, (uint64_t)"worker", 6, (uint64_t)"Callable must be valid", 22, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
LABEL_1944:
  v1204 = *(void **)v4;
  v1203 = *(unint64_t **)(v4 + 8);
  if (v1203)
  {
    v1205 = v1203 + 1;
    do
      v1206 = __ldxr(v1205);
    while (__stxr(v1206 + 1, v1205));
  }
  v1207 = (unint64_t *)v2[1];
  if (*v2)
    v1208 = *v2 + 1120;
  else
    v1208 = 0;
  v2022 = (std::__shared_weak_count *)v2[1];
  if (v1207)
  {
    v1209 = v1207 + 1;
    do
      v1210 = __ldxr(v1209);
    while (__stxr(v1210 + 1, v1209));
  }
  if (*(char *)(v1208 + 31) < 0)
  {
    sub_20E860C04(v2257, *(void **)(v1208 + 8), *(_QWORD *)(v1208 + 16));
  }
  else
  {
    v1211 = *(_OWORD *)(v1208 + 8);
    v2257[2] = *(void **)(v1208 + 24);
    *(_OWORD *)v2257 = v1211;
  }
  if (*(char *)(v1208 + 55) < 0)
  {
    sub_20E860C04(v2247, *(void **)(v1208 + 32), *(_QWORD *)(v1208 + 40));
  }
  else
  {
    *(_OWORD *)v2247 = *(_OWORD *)(v1208 + 32);
    v2247[2] = *(void **)(v1208 + 48);
  }
  v2208[0] = v1204;
  v2208[1] = v1203;
  v2195[0] = (void *)v1208;
  v2195[1] = v1207;
  if (v1207)
  {
    v1212 = v1207 + 1;
    do
      v1213 = __ldxr(v1212);
    while (__stxr(v1213 + 1, v1212));
  }
  if (SHIBYTE(v2257[2]) < 0)
  {
    sub_20E860C04(v2283, v2257[0], (unint64_t)v2257[1]);
  }
  else
  {
    *(_OWORD *)v2283 = *(_OWORD *)v2257;
    v2283[2] = v2257[2];
  }
  if (SHIBYTE(v2247[2]) < 0)
  {
    sub_20E860C04(v2270, v2247[0], (unint64_t)v2247[1]);
  }
  else
  {
    *(_OWORD *)v2270 = *(_OWORD *)v2247;
    v2270[2] = v2247[2];
  }
  *(void **)((char *)v2458 + 7) = *(void **)((char *)&v2257[1] + 7);
  v1214 = v2257[0];
  v2458[0] = v2257[1];
  v1215 = HIBYTE(v2257[2]);
  memset(v2257, 0, sizeof(v2257));
  v2459[0] = v2458[0];
  *(void **)((char *)v2459 + 7) = *(void **)((char *)v2458 + 7);
  *(void **)((char *)v2458 + 7) = 0;
  v2458[0] = 0;
  v2221[0] = v1204;
  v2221[1] = v1203;
  if (v1203)
  {
    v1216 = v1203 + 1;
    do
      v1217 = __ldxr(v1216);
    while (__stxr(v1217 + 1, v1216));
  }
  v1218 = (char *)operator new();
  v2182[0] = v2459[0];
  *(void **)((char *)v2182 + 7) = *(void **)((char *)v2459 + 7);
  v2459[0] = 0;
  *(void **)((char *)v2459 + 7) = 0;
  v1219 = *(_OWORD *)v2221;
  v2221[0] = 0;
  v2221[1] = 0;
  v1218[8] = 1;
  *((_QWORD *)v1218 + 4) = 0;
  *((_QWORD *)v1218 + 5) = 0;
  *(_QWORD *)v1218 = &off_24C9DA5D8;
  *((_QWORD *)v1218 + 2) = &unk_24C9DA650;
  *((_QWORD *)v1218 + 3) = &unk_24C9DA690;
  v1220 = v2182[0];
  *(void **)(v1218 + 63) = *(void **)((char *)v2182 + 7);
  *((_QWORD *)v1218 + 6) = v1214;
  *((_QWORD *)v1218 + 7) = v1220;
  v1218[71] = v1215;
  v2182[0] = 0;
  *(void **)((char *)v2182 + 7) = 0;
  *(_OWORD *)(v1218 + 72) = v1219;
  v2234[1] = 0;
  v2234[0] = 0;
  v1221 = (_QWORD *)operator new();
  *v1221 = &off_24C9DA778;
  v1221[1] = v1208;
  v1221[2] = v1207;
  v2195[1] = 0;
  v2195[0] = 0;
  *((_QWORD *)v1218 + 18) = 0;
  *((_QWORD *)v1218 + 11) = v1221;
  *((_QWORD *)v1218 + 12) = v1218 + 96;
  *((_QWORD *)v1218 + 13) = v1218 + 96;
  *((_QWORD *)v1218 + 14) = 0;
  *((_QWORD *)v1218 + 15) = v1218 + 120;
  *((_QWORD *)v1218 + 16) = v1218 + 120;
  *((_QWORD *)v1218 + 17) = 0;
  if (!*((_QWORD *)v1218 + 9)
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 109, (uint64_t)"scheduler_", 10, (uint64_t)"scheduler must be valid", 23, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v1222 = (std::__shared_weak_count *)operator new();
  v1222->__shared_owners_ = 0;
  v1223 = (unint64_t *)&v1222->__shared_owners_;
  v1222->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9DAC18;
  v1222->__shared_weak_owners_ = 0;
  v1222[1].__vftable = (std::__shared_weak_count_vtbl *)v1218;
  v1224 = (std::__shared_weak_count *)*((_QWORD *)v1218 + 5);
  if (v1224)
  {
    if (v1224->__shared_owners_ != -1)
      goto LABEL_1986;
    do
      v1225 = __ldxr(v1223);
    while (__stxr(v1225 + 1, v1223));
    v1226 = (unint64_t *)&v1222->__shared_weak_owners_;
    do
      v1227 = __ldxr(v1226);
    while (__stxr(v1227 + 1, v1226));
    *((_QWORD *)v1218 + 4) = v1218;
    *((_QWORD *)v1218 + 5) = v1222;
    std::__shared_weak_count::__release_weak(v1224);
  }
  else
  {
    do
      v1228 = __ldxr(v1223);
    while (__stxr(v1228 + 1, v1223));
    v1229 = (unint64_t *)&v1222->__shared_weak_owners_;
    do
      v1230 = __ldxr(v1229);
    while (__stxr(v1230 + 1, v1229));
    *((_QWORD *)v1218 + 4) = v1218;
    *((_QWORD *)v1218 + 5) = v1222;
  }
  do
    v1231 = __ldaxr(v1223);
  while (__stlxr(v1231 - 1, v1223));
  if (!v1231)
  {
    ((void (*)(std::__shared_weak_count *))v1222->__on_zero_shared)(v1222);
    std::__shared_weak_count::__release_weak(v1222);
  }
LABEL_1986:
  v1232 = (std::__shared_weak_count *)v2234[1];
  if (v2234[1])
  {
    v1233 = (unint64_t *)((char *)v2234[1] + 8);
    do
      v1234 = __ldaxr(v1233);
    while (__stlxr(v1234 - 1, v1233));
    if (!v1234)
    {
      ((void (*)(std::__shared_weak_count *))v1232->__on_zero_shared)(v1232);
      std::__shared_weak_count::__release_weak(v1232);
    }
  }
  v2234[0] = v1218;
  v2234[1] = v1222;
  v1235 = (std::__shared_weak_count *)v2221[1];
  if (v2221[1])
  {
    v1236 = (unint64_t *)((char *)v2221[1] + 8);
    do
      v1237 = __ldaxr(v1236);
    while (__stlxr(v1237 - 1, v1236));
    if (!v1237)
    {
      ((void (*)(std::__shared_weak_count *))v1235->__on_zero_shared)(v1235);
      std::__shared_weak_count::__release_weak(v1235);
    }
  }
  v1238 = *(_OWORD *)v2208;
  v2208[0] = 0;
  v2208[1] = 0;
  *(_OWORD *)&v2296[1] = *(_OWORD *)v2283;
  v2296[0] = &off_24C9D1860;
  v2297 = v2283[2];
  memset(v2283, 0, sizeof(v2283));
  v2298 = *(_OWORD *)v2270;
  v1239 = v2270[2];
  memset(v2270, 0, sizeof(v2270));
  v2300 = v1238;
  v2221[1] = 0;
  v2221[0] = 0;
  v1240 = v2234[0];
  v1241 = (char *)v2234[1];
  v2299 = v1239;
  v2301 = *(_OWORD *)v2234;
  v2234[0] = 0;
  v2234[1] = 0;
  if (*((_QWORD *)&v2301 + 1))
  {
    v1242 = (unint64_t *)(v1241 + 16);
    do
      v1243 = __ldxr(v1242);
    while (__stxr(v1243 + 1, v1242));
  }
  v2302 = &off_24C9B47B8;
  v1244 = (_QWORD *)operator new();
  *v1244 = &off_24C9DAC68;
  v1244[1] = v1240;
  v1244[2] = v1241;
  *(_QWORD *)&v2303 = v1244;
  v1246 = *((_QWORD *)&v2301 + 1);
  v1245 = v2301;
  if (!*((_QWORD *)&v2301 + 1))
  {
    *((_QWORD *)&v2303 + 1) = v2301;
    v2304 = 0;
    if ((_QWORD)v2301)
      v1250 = v2301 + 16;
    else
      v1250 = 0;
    goto LABEL_2016;
  }
  v1247 = (unint64_t *)(*((_QWORD *)&v2301 + 1) + 16);
  do
    v1248 = __ldxr(v1247);
  while (__stxr(v1248 + 1, v1247));
  v1249 = *((_QWORD *)&v2301 + 1);
  *((_QWORD *)&v2303 + 1) = v1245;
  v2304 = v1246;
  if ((_QWORD)v2301)
    v1250 = v2301 + 16;
  else
    v1250 = 0;
  if (!*((_QWORD *)&v2301 + 1))
  {
    v1245 = v2301;
LABEL_2016:
    v1253 = 0;
    v2305 = &off_24C9B2520;
    v2306 = v1250;
    goto LABEL_2017;
  }
  v1251 = (unint64_t *)(*((_QWORD *)&v2301 + 1) + 16);
  do
    v1252 = __ldxr(v1251);
  while (__stxr(v1252 + 1, v1251));
  v1253 = *((_QWORD *)&v2301 + 1);
  v1245 = v2301;
  v2305 = &off_24C9B2520;
  *(_QWORD *)&v2306 = v1250;
  *((_QWORD *)&v2306 + 1) = v1249;
  if (*((_QWORD *)&v2301 + 1))
  {
    v1254 = (unint64_t *)(*((_QWORD *)&v2301 + 1) + 16);
    do
      v1255 = __ldxr(v1254);
    while (__stxr(v1255 + 1, v1254));
  }
LABEL_2017:
  if (v1245)
    v1256 = v1245 + 24;
  else
    v1256 = 0;
  v2307 = &off_24C9D1148;
  *(_QWORD *)&v2308 = v1256;
  *((_QWORD *)&v2308 + 1) = v1253;
  if ((SHIBYTE(v2270[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v2283[2]) & 0x80000000) == 0)
      goto LABEL_2022;
LABEL_2025:
    operator delete(v2283[0]);
    v1257 = (std::__shared_weak_count *)v2195[1];
    if (!v2195[1])
      goto LABEL_2030;
    goto LABEL_2026;
  }
  operator delete(v2270[0]);
  if (SHIBYTE(v2283[2]) < 0)
    goto LABEL_2025;
LABEL_2022:
  v1257 = (std::__shared_weak_count *)v2195[1];
  if (!v2195[1])
    goto LABEL_2030;
LABEL_2026:
  v1258 = (unint64_t *)&v1257->__shared_owners_;
  do
    v1259 = __ldaxr(v1258);
  while (__stlxr(v1259 - 1, v1258));
  if (!v1259)
  {
    ((void (*)(std::__shared_weak_count *))v1257->__on_zero_shared)(v1257);
    std::__shared_weak_count::__release_weak(v1257);
  }
LABEL_2030:
  v1260 = (std::__shared_weak_count *)v2208[1];
  if (!v2208[1])
    goto LABEL_2034;
  v1261 = (unint64_t *)((char *)v2208[1] + 8);
  do
    v1262 = __ldaxr(v1261);
  while (__stlxr(v1262 - 1, v1261));
  if (!v1262)
  {
    ((void (*)(std::__shared_weak_count *))v1260->__on_zero_shared)(v1260);
    std::__shared_weak_count::__release_weak(v1260);
    if ((SHIBYTE(v2247[2]) & 0x80000000) == 0)
    {
LABEL_2035:
      if ((SHIBYTE(v2257[2]) & 0x80000000) == 0)
        goto LABEL_2036;
LABEL_2040:
      operator delete(v2257[0]);
      if (v1208)
        goto LABEL_2042;
      goto LABEL_2041;
    }
  }
  else
  {
LABEL_2034:
    if ((SHIBYTE(v2247[2]) & 0x80000000) == 0)
      goto LABEL_2035;
  }
  operator delete(v2247[0]);
  if (SHIBYTE(v2257[2]) < 0)
    goto LABEL_2040;
LABEL_2036:
  if (v1208)
    goto LABEL_2042;
LABEL_2041:
  if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/Channel.h", 542, (uint64_t)"worker", 6, (uint64_t)"Callable must be valid", 22, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
LABEL_2042:
  v1264 = *(void **)v4;
  v1263 = *(unint64_t **)(v4 + 8);
  if (v1263)
  {
    v1265 = v1263 + 1;
    do
      v1266 = __ldxr(v1265);
    while (__stxr(v1266 + 1, v1265));
  }
  v1267 = (unint64_t *)v2[1];
  if (*v2)
    v1268 = *v2 + 1176;
  else
    v1268 = 0;
  v2021 = (std::__shared_weak_count *)v2[1];
  if (v1267)
  {
    v1269 = v1267 + 1;
    do
      v1270 = __ldxr(v1269);
    while (__stxr(v1270 + 1, v1269));
  }
  if (*(char *)(v1268 + 31) < 0)
  {
    sub_20E860C04(v2247, *(void **)(v1268 + 8), *(_QWORD *)(v1268 + 16));
  }
  else
  {
    v1271 = *(_OWORD *)(v1268 + 8);
    v2247[2] = *(void **)(v1268 + 24);
    *(_OWORD *)v2247 = v1271;
  }
  if (*(char *)(v1268 + 55) < 0)
  {
    sub_20E860C04(v2234, *(void **)(v1268 + 32), *(_QWORD *)(v1268 + 40));
  }
  else
  {
    *(_OWORD *)v2234 = *(_OWORD *)(v1268 + 32);
    v2234[2] = *(void **)(v1268 + 48);
  }
  v2195[0] = v1264;
  v2195[1] = v1263;
  v2182[0] = (void *)v1268;
  v2182[1] = v1267;
  if (v1267)
  {
    v1272 = v1267 + 1;
    do
      v1273 = __ldxr(v1272);
    while (__stxr(v1273 + 1, v1272));
  }
  if (SHIBYTE(v2247[2]) < 0)
  {
    sub_20E860C04(v2270, v2247[0], (unint64_t)v2247[1]);
  }
  else
  {
    *(_OWORD *)v2270 = *(_OWORD *)v2247;
    v2270[2] = v2247[2];
  }
  if (SHIBYTE(v2234[2]) < 0)
  {
    sub_20E860C04(v2257, v2234[0], (unint64_t)v2234[1]);
  }
  else
  {
    *(_OWORD *)v2257 = *(_OWORD *)v2234;
    v2257[2] = v2234[2];
  }
  *(void **)((char *)v2456 + 7) = *(void **)((char *)&v2247[1] + 7);
  v1274 = v2247[0];
  v2456[0] = v2247[1];
  v1275 = HIBYTE(v2247[2]);
  memset(v2247, 0, sizeof(v2247));
  v2458[0] = v2456[0];
  *(void **)((char *)v2458 + 7) = *(void **)((char *)v2456 + 7);
  *(void **)((char *)v2456 + 7) = 0;
  v2456[0] = 0;
  v2208[0] = v1264;
  v2208[1] = v1263;
  if (v1263)
  {
    v1276 = v1263 + 1;
    do
      v1277 = __ldxr(v1276);
    while (__stxr(v1277 + 1, v1276));
  }
  v1278 = (char *)operator new();
  v2459[0] = v2458[0];
  *(void **)((char *)v2459 + 7) = *(void **)((char *)v2458 + 7);
  v2458[0] = 0;
  *(void **)((char *)v2458 + 7) = 0;
  v1279 = *(_OWORD *)v2208;
  v2208[0] = 0;
  v2208[1] = 0;
  v1278[8] = 1;
  *((_QWORD *)v1278 + 4) = 0;
  *((_QWORD *)v1278 + 5) = 0;
  *(_QWORD *)v1278 = &off_24C9DACD0;
  *((_QWORD *)v1278 + 2) = &unk_24C9DAD48;
  *((_QWORD *)v1278 + 3) = &unk_24C9DAD88;
  v1280 = v2459[0];
  *(void **)(v1278 + 63) = *(void **)((char *)v2459 + 7);
  *((_QWORD *)v1278 + 6) = v1274;
  *((_QWORD *)v1278 + 7) = v1280;
  v1278[71] = v1275;
  v2459[0] = 0;
  *(void **)((char *)v2459 + 7) = 0;
  *(_OWORD *)(v1278 + 72) = v1279;
  v2221[1] = 0;
  v2221[0] = 0;
  v1281 = (_QWORD *)operator new();
  *v1281 = &off_24C9DAE70;
  v1281[1] = v1268;
  v1281[2] = v1267;
  v2182[1] = 0;
  v2182[0] = 0;
  *((_QWORD *)v1278 + 18) = 0;
  *((_QWORD *)v1278 + 11) = v1281;
  *((_QWORD *)v1278 + 12) = v1278 + 96;
  *((_QWORD *)v1278 + 13) = v1278 + 96;
  *((_QWORD *)v1278 + 14) = 0;
  *((_QWORD *)v1278 + 15) = v1278 + 120;
  *((_QWORD *)v1278 + 16) = v1278 + 120;
  *((_QWORD *)v1278 + 17) = 0;
  if (!*((_QWORD *)v1278 + 9)
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 109, (uint64_t)"scheduler_", 10, (uint64_t)"scheduler must be valid", 23, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v1282 = (std::__shared_weak_count *)operator new();
  v1282->__shared_owners_ = 0;
  v1283 = (unint64_t *)&v1282->__shared_owners_;
  v1282->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9DB310;
  v1282->__shared_weak_owners_ = 0;
  v1282[1].__vftable = (std::__shared_weak_count_vtbl *)v1278;
  v1284 = (std::__shared_weak_count *)*((_QWORD *)v1278 + 5);
  if (v1284)
  {
    if (v1284->__shared_owners_ != -1)
      goto LABEL_2084;
    do
      v1285 = __ldxr(v1283);
    while (__stxr(v1285 + 1, v1283));
    v1286 = (unint64_t *)&v1282->__shared_weak_owners_;
    do
      v1287 = __ldxr(v1286);
    while (__stxr(v1287 + 1, v1286));
    *((_QWORD *)v1278 + 4) = v1278;
    *((_QWORD *)v1278 + 5) = v1282;
    std::__shared_weak_count::__release_weak(v1284);
  }
  else
  {
    do
      v1288 = __ldxr(v1283);
    while (__stxr(v1288 + 1, v1283));
    v1289 = (unint64_t *)&v1282->__shared_weak_owners_;
    do
      v1290 = __ldxr(v1289);
    while (__stxr(v1290 + 1, v1289));
    *((_QWORD *)v1278 + 4) = v1278;
    *((_QWORD *)v1278 + 5) = v1282;
  }
  do
    v1291 = __ldaxr(v1283);
  while (__stlxr(v1291 - 1, v1283));
  if (!v1291)
  {
    ((void (*)(std::__shared_weak_count *))v1282->__on_zero_shared)(v1282);
    std::__shared_weak_count::__release_weak(v1282);
  }
LABEL_2084:
  v1292 = (std::__shared_weak_count *)v2221[1];
  if (v2221[1])
  {
    v1293 = (unint64_t *)((char *)v2221[1] + 8);
    do
      v1294 = __ldaxr(v1293);
    while (__stlxr(v1294 - 1, v1293));
    if (!v1294)
    {
      ((void (*)(std::__shared_weak_count *))v1292->__on_zero_shared)(v1292);
      std::__shared_weak_count::__release_weak(v1292);
    }
  }
  v2221[0] = v1278;
  v2221[1] = v1282;
  v1295 = (std::__shared_weak_count *)v2208[1];
  if (v2208[1])
  {
    v1296 = (unint64_t *)((char *)v2208[1] + 8);
    do
      v1297 = __ldaxr(v1296);
    while (__stlxr(v1297 - 1, v1296));
    if (!v1297)
    {
      ((void (*)(std::__shared_weak_count *))v1295->__on_zero_shared)(v1295);
      std::__shared_weak_count::__release_weak(v1295);
    }
  }
  v1298 = *(_OWORD *)v2195;
  v2195[0] = 0;
  v2195[1] = 0;
  *(_OWORD *)&v2283[1] = *(_OWORD *)v2270;
  v2283[0] = &off_24C9D1890;
  v2284 = v2270[2];
  memset(v2270, 0, sizeof(v2270));
  v2285 = *(_OWORD *)v2257;
  v1299 = v2257[2];
  memset(v2257, 0, sizeof(v2257));
  v2287 = v1298;
  v2208[1] = 0;
  v2208[0] = 0;
  v1300 = v2221[0];
  v1301 = (char *)v2221[1];
  v2286 = v1299;
  v2288 = *(_OWORD *)v2221;
  v2221[0] = 0;
  v2221[1] = 0;
  if (*((_QWORD *)&v2288 + 1))
  {
    v1302 = (unint64_t *)(v1301 + 16);
    do
      v1303 = __ldxr(v1302);
    while (__stxr(v1303 + 1, v1302));
  }
  v2289 = &off_24C9C6280;
  v1304 = (_QWORD *)operator new();
  *v1304 = &off_24C9DB360;
  v1304[1] = v1300;
  v1304[2] = v1301;
  *(_QWORD *)&v2290 = v1304;
  v1306 = *((_QWORD *)&v2288 + 1);
  v1305 = v2288;
  if (!*((_QWORD *)&v2288 + 1))
  {
    *((_QWORD *)&v2290 + 1) = v2288;
    v2291 = 0;
    if ((_QWORD)v2288)
      v1310 = v2288 + 16;
    else
      v1310 = 0;
    goto LABEL_2114;
  }
  v1307 = (unint64_t *)(*((_QWORD *)&v2288 + 1) + 16);
  do
    v1308 = __ldxr(v1307);
  while (__stxr(v1308 + 1, v1307));
  v1309 = *((_QWORD *)&v2288 + 1);
  *((_QWORD *)&v2290 + 1) = v1305;
  v2291 = v1306;
  if ((_QWORD)v2288)
    v1310 = v2288 + 16;
  else
    v1310 = 0;
  if (!*((_QWORD *)&v2288 + 1))
  {
    v1305 = v2288;
LABEL_2114:
    v1313 = 0;
    v2292 = &off_24C9B2520;
    v2293 = v1310;
    goto LABEL_2115;
  }
  v1311 = (unint64_t *)(*((_QWORD *)&v2288 + 1) + 16);
  do
    v1312 = __ldxr(v1311);
  while (__stxr(v1312 + 1, v1311));
  v1313 = *((_QWORD *)&v2288 + 1);
  v1305 = v2288;
  v2292 = &off_24C9B2520;
  *(_QWORD *)&v2293 = v1310;
  *((_QWORD *)&v2293 + 1) = v1309;
  if (*((_QWORD *)&v2288 + 1))
  {
    v1314 = (unint64_t *)(*((_QWORD *)&v2288 + 1) + 16);
    do
      v1315 = __ldxr(v1314);
    while (__stxr(v1315 + 1, v1314));
  }
LABEL_2115:
  if (v1305)
    v1316 = v1305 + 24;
  else
    v1316 = 0;
  v2294 = &off_24C9D1148;
  *(_QWORD *)&v2295 = v1316;
  *((_QWORD *)&v2295 + 1) = v1313;
  if ((SHIBYTE(v2257[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v2270[2]) & 0x80000000) == 0)
      goto LABEL_2120;
LABEL_2123:
    operator delete(v2270[0]);
    v1317 = (std::__shared_weak_count *)v2182[1];
    if (!v2182[1])
      goto LABEL_2128;
    goto LABEL_2124;
  }
  operator delete(v2257[0]);
  if (SHIBYTE(v2270[2]) < 0)
    goto LABEL_2123;
LABEL_2120:
  v1317 = (std::__shared_weak_count *)v2182[1];
  if (!v2182[1])
    goto LABEL_2128;
LABEL_2124:
  v1318 = (unint64_t *)&v1317->__shared_owners_;
  do
    v1319 = __ldaxr(v1318);
  while (__stlxr(v1319 - 1, v1318));
  if (!v1319)
  {
    ((void (*)(std::__shared_weak_count *))v1317->__on_zero_shared)(v1317);
    std::__shared_weak_count::__release_weak(v1317);
  }
LABEL_2128:
  v1320 = (std::__shared_weak_count *)v2195[1];
  if (!v2195[1])
    goto LABEL_2132;
  v1321 = (unint64_t *)((char *)v2195[1] + 8);
  do
    v1322 = __ldaxr(v1321);
  while (__stlxr(v1322 - 1, v1321));
  if (!v1322)
  {
    ((void (*)(std::__shared_weak_count *))v1320->__on_zero_shared)(v1320);
    std::__shared_weak_count::__release_weak(v1320);
    if ((SHIBYTE(v2234[2]) & 0x80000000) == 0)
    {
LABEL_2133:
      if ((SHIBYTE(v2247[2]) & 0x80000000) == 0)
        goto LABEL_2134;
LABEL_2138:
      operator delete(v2247[0]);
      if (v1268)
        goto LABEL_2140;
      goto LABEL_2139;
    }
  }
  else
  {
LABEL_2132:
    if ((SHIBYTE(v2234[2]) & 0x80000000) == 0)
      goto LABEL_2133;
  }
  operator delete(v2234[0]);
  if (SHIBYTE(v2247[2]) < 0)
    goto LABEL_2138;
LABEL_2134:
  if (v1268)
    goto LABEL_2140;
LABEL_2139:
  if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/Channel.h", 542, (uint64_t)"worker", 6, (uint64_t)"Callable must be valid", 22, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
LABEL_2140:
  v1324 = *(void **)v4;
  v1323 = *(unint64_t **)(v4 + 8);
  if (v1323)
  {
    v1325 = v1323 + 1;
    do
      v1326 = __ldxr(v1325);
    while (__stxr(v1326 + 1, v1325));
  }
  v1327 = (unint64_t *)v2[1];
  if (*v2)
    v1328 = *v2 + 1232;
  else
    v1328 = 0;
  v2020 = (std::__shared_weak_count *)v2[1];
  if (v1327)
  {
    v1329 = v1327 + 1;
    do
      v1330 = __ldxr(v1329);
    while (__stxr(v1330 + 1, v1329));
  }
  if (*(char *)(v1328 + 31) < 0)
  {
    sub_20E860C04(v2234, *(void **)(v1328 + 8), *(_QWORD *)(v1328 + 16));
  }
  else
  {
    v1331 = *(_OWORD *)(v1328 + 8);
    v2234[2] = *(void **)(v1328 + 24);
    *(_OWORD *)v2234 = v1331;
  }
  if (*(char *)(v1328 + 55) < 0)
  {
    sub_20E860C04(v2221, *(void **)(v1328 + 32), *(_QWORD *)(v1328 + 40));
  }
  else
  {
    *(_OWORD *)v2221 = *(_OWORD *)(v1328 + 32);
    v2221[2] = *(void **)(v1328 + 48);
  }
  v2182[0] = v1324;
  v2182[1] = v1323;
  v2459[0] = (void *)v1328;
  v2459[1] = v1327;
  if (v1327)
  {
    v1332 = v1327 + 1;
    do
      v1333 = __ldxr(v1332);
    while (__stxr(v1333 + 1, v1332));
  }
  if (SHIBYTE(v2234[2]) < 0)
  {
    sub_20E860C04(v2257, v2234[0], (unint64_t)v2234[1]);
  }
  else
  {
    *(_OWORD *)v2257 = *(_OWORD *)v2234;
    v2257[2] = v2234[2];
  }
  if (SHIBYTE(v2221[2]) < 0)
  {
    sub_20E860C04(v2247, v2221[0], (unint64_t)v2221[1]);
  }
  else
  {
    *(_OWORD *)v2247 = *(_OWORD *)v2221;
    v2247[2] = v2221[2];
  }
  *(void **)((char *)v2454 + 7) = *(void **)((char *)&v2234[1] + 7);
  v1334 = v2234[0];
  v2454[0] = v2234[1];
  v1335 = HIBYTE(v2234[2]);
  memset(v2234, 0, sizeof(v2234));
  v2456[0] = v2454[0];
  *(void **)((char *)v2456 + 7) = *(void **)((char *)v2454 + 7);
  *(void **)((char *)v2454 + 7) = 0;
  v2454[0] = 0;
  v2195[0] = v1324;
  v2195[1] = v1323;
  if (v1323)
  {
    v1336 = v1323 + 1;
    do
      v1337 = __ldxr(v1336);
    while (__stxr(v1337 + 1, v1336));
  }
  v1338 = (char *)operator new();
  v2458[0] = v2456[0];
  *(void **)((char *)v2458 + 7) = *(void **)((char *)v2456 + 7);
  v2456[0] = 0;
  *(void **)((char *)v2456 + 7) = 0;
  v1339 = *(_OWORD *)v2195;
  v2195[0] = 0;
  v2195[1] = 0;
  v1338[8] = 1;
  *((_QWORD *)v1338 + 4) = 0;
  *((_QWORD *)v1338 + 5) = 0;
  *(_QWORD *)v1338 = &off_24C9DB3D8;
  *((_QWORD *)v1338 + 2) = &unk_24C9DB450;
  *((_QWORD *)v1338 + 3) = &unk_24C9DB490;
  v1340 = v2458[0];
  *(void **)(v1338 + 63) = *(void **)((char *)v2458 + 7);
  *((_QWORD *)v1338 + 6) = v1334;
  *((_QWORD *)v1338 + 7) = v1340;
  v1338[71] = v1335;
  v2458[0] = 0;
  *(void **)((char *)v2458 + 7) = 0;
  *(_OWORD *)(v1338 + 72) = v1339;
  v2208[1] = 0;
  v2208[0] = 0;
  v1341 = (_QWORD *)operator new();
  *v1341 = &off_24C9DB578;
  v1341[1] = v1328;
  v1341[2] = v1327;
  v2459[1] = 0;
  v2459[0] = 0;
  *((_QWORD *)v1338 + 18) = 0;
  *((_QWORD *)v1338 + 11) = v1341;
  *((_QWORD *)v1338 + 12) = v1338 + 96;
  *((_QWORD *)v1338 + 13) = v1338 + 96;
  *((_QWORD *)v1338 + 14) = 0;
  *((_QWORD *)v1338 + 15) = v1338 + 120;
  *((_QWORD *)v1338 + 16) = v1338 + 120;
  *((_QWORD *)v1338 + 17) = 0;
  if (!*((_QWORD *)v1338 + 9)
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 109, (uint64_t)"scheduler_", 10, (uint64_t)"scheduler must be valid", 23, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v1342 = (std::__shared_weak_count *)operator new();
  v1342->__shared_owners_ = 0;
  v1343 = (unint64_t *)&v1342->__shared_owners_;
  v1342->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9DBA18;
  v1342->__shared_weak_owners_ = 0;
  v1342[1].__vftable = (std::__shared_weak_count_vtbl *)v1338;
  v1344 = (std::__shared_weak_count *)*((_QWORD *)v1338 + 5);
  if (v1344)
  {
    if (v1344->__shared_owners_ != -1)
      goto LABEL_2182;
    do
      v1345 = __ldxr(v1343);
    while (__stxr(v1345 + 1, v1343));
    v1346 = (unint64_t *)&v1342->__shared_weak_owners_;
    do
      v1347 = __ldxr(v1346);
    while (__stxr(v1347 + 1, v1346));
    *((_QWORD *)v1338 + 4) = v1338;
    *((_QWORD *)v1338 + 5) = v1342;
    std::__shared_weak_count::__release_weak(v1344);
  }
  else
  {
    do
      v1348 = __ldxr(v1343);
    while (__stxr(v1348 + 1, v1343));
    v1349 = (unint64_t *)&v1342->__shared_weak_owners_;
    do
      v1350 = __ldxr(v1349);
    while (__stxr(v1350 + 1, v1349));
    *((_QWORD *)v1338 + 4) = v1338;
    *((_QWORD *)v1338 + 5) = v1342;
  }
  do
    v1351 = __ldaxr(v1343);
  while (__stlxr(v1351 - 1, v1343));
  if (!v1351)
  {
    ((void (*)(std::__shared_weak_count *))v1342->__on_zero_shared)(v1342);
    std::__shared_weak_count::__release_weak(v1342);
  }
LABEL_2182:
  v1352 = (std::__shared_weak_count *)v2208[1];
  if (v2208[1])
  {
    v1353 = (unint64_t *)((char *)v2208[1] + 8);
    do
      v1354 = __ldaxr(v1353);
    while (__stlxr(v1354 - 1, v1353));
    if (!v1354)
    {
      ((void (*)(std::__shared_weak_count *))v1352->__on_zero_shared)(v1352);
      std::__shared_weak_count::__release_weak(v1352);
    }
  }
  v2208[0] = v1338;
  v2208[1] = v1342;
  v1355 = (std::__shared_weak_count *)v2195[1];
  if (v2195[1])
  {
    v1356 = (unint64_t *)((char *)v2195[1] + 8);
    do
      v1357 = __ldaxr(v1356);
    while (__stlxr(v1357 - 1, v1356));
    if (!v1357)
    {
      ((void (*)(std::__shared_weak_count *))v1355->__on_zero_shared)(v1355);
      std::__shared_weak_count::__release_weak(v1355);
    }
  }
  v1358 = *(_OWORD *)v2182;
  v2182[0] = 0;
  v2182[1] = 0;
  *(_OWORD *)&v2270[1] = *(_OWORD *)v2257;
  v2270[0] = &off_24C9D18C0;
  v2271 = v2257[2];
  memset(v2257, 0, sizeof(v2257));
  v2272 = *(_OWORD *)v2247;
  v1359 = v2247[2];
  memset(v2247, 0, sizeof(v2247));
  v2274 = v1358;
  v2195[1] = 0;
  v2195[0] = 0;
  v1360 = v2208[0];
  v1361 = (char *)v2208[1];
  v2273 = v1359;
  v2275 = *(_OWORD *)v2208;
  v2208[0] = 0;
  v2208[1] = 0;
  if (*((_QWORD *)&v2275 + 1))
  {
    v1362 = (unint64_t *)(v1361 + 16);
    do
      v1363 = __ldxr(v1362);
    while (__stxr(v1363 + 1, v1362));
  }
  v2276 = &off_24C9C7D60;
  v1364 = (_QWORD *)operator new();
  *v1364 = &off_24C9DBA68;
  v1364[1] = v1360;
  v1364[2] = v1361;
  *(_QWORD *)&v2277 = v1364;
  v1366 = *((_QWORD *)&v2275 + 1);
  v1365 = v2275;
  if (!*((_QWORD *)&v2275 + 1))
  {
    *((_QWORD *)&v2277 + 1) = v2275;
    v2278 = 0;
    if ((_QWORD)v2275)
      v1370 = v2275 + 16;
    else
      v1370 = 0;
    goto LABEL_2212;
  }
  v1367 = (unint64_t *)(*((_QWORD *)&v2275 + 1) + 16);
  do
    v1368 = __ldxr(v1367);
  while (__stxr(v1368 + 1, v1367));
  v1369 = *((_QWORD *)&v2275 + 1);
  *((_QWORD *)&v2277 + 1) = v1365;
  v2278 = v1366;
  if ((_QWORD)v2275)
    v1370 = v2275 + 16;
  else
    v1370 = 0;
  if (!*((_QWORD *)&v2275 + 1))
  {
    v1365 = v2275;
LABEL_2212:
    v1373 = 0;
    v2279 = &off_24C9B2520;
    v2280 = v1370;
    goto LABEL_2213;
  }
  v1371 = (unint64_t *)(*((_QWORD *)&v2275 + 1) + 16);
  do
    v1372 = __ldxr(v1371);
  while (__stxr(v1372 + 1, v1371));
  v1373 = *((_QWORD *)&v2275 + 1);
  v1365 = v2275;
  v2279 = &off_24C9B2520;
  *(_QWORD *)&v2280 = v1370;
  *((_QWORD *)&v2280 + 1) = v1369;
  if (*((_QWORD *)&v2275 + 1))
  {
    v1374 = (unint64_t *)(*((_QWORD *)&v2275 + 1) + 16);
    do
      v1375 = __ldxr(v1374);
    while (__stxr(v1375 + 1, v1374));
  }
LABEL_2213:
  if (v1365)
    v1376 = v1365 + 24;
  else
    v1376 = 0;
  v2281 = &off_24C9D1148;
  *(_QWORD *)&v2282 = v1376;
  *((_QWORD *)&v2282 + 1) = v1373;
  if ((SHIBYTE(v2247[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v2257[2]) & 0x80000000) == 0)
      goto LABEL_2218;
LABEL_2221:
    operator delete(v2257[0]);
    v1377 = (std::__shared_weak_count *)v2459[1];
    if (!v2459[1])
      goto LABEL_2226;
    goto LABEL_2222;
  }
  operator delete(v2247[0]);
  if (SHIBYTE(v2257[2]) < 0)
    goto LABEL_2221;
LABEL_2218:
  v1377 = (std::__shared_weak_count *)v2459[1];
  if (!v2459[1])
    goto LABEL_2226;
LABEL_2222:
  v1378 = (unint64_t *)&v1377->__shared_owners_;
  do
    v1379 = __ldaxr(v1378);
  while (__stlxr(v1379 - 1, v1378));
  if (!v1379)
  {
    ((void (*)(std::__shared_weak_count *))v1377->__on_zero_shared)(v1377);
    std::__shared_weak_count::__release_weak(v1377);
  }
LABEL_2226:
  v1380 = (std::__shared_weak_count *)v2182[1];
  if (!v2182[1])
    goto LABEL_2230;
  v1381 = (unint64_t *)((char *)v2182[1] + 8);
  do
    v1382 = __ldaxr(v1381);
  while (__stlxr(v1382 - 1, v1381));
  if (!v1382)
  {
    ((void (*)(std::__shared_weak_count *))v1380->__on_zero_shared)(v1380);
    std::__shared_weak_count::__release_weak(v1380);
    if ((SHIBYTE(v2221[2]) & 0x80000000) == 0)
    {
LABEL_2231:
      if ((SHIBYTE(v2234[2]) & 0x80000000) == 0)
        goto LABEL_2232;
LABEL_2236:
      operator delete(v2234[0]);
      if (v1328)
        goto LABEL_2238;
      goto LABEL_2237;
    }
  }
  else
  {
LABEL_2230:
    if ((SHIBYTE(v2221[2]) & 0x80000000) == 0)
      goto LABEL_2231;
  }
  operator delete(v2221[0]);
  if (SHIBYTE(v2234[2]) < 0)
    goto LABEL_2236;
LABEL_2232:
  if (v1328)
    goto LABEL_2238;
LABEL_2237:
  if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/Channel.h", 542, (uint64_t)"worker", 6, (uint64_t)"Callable must be valid", 22, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
LABEL_2238:
  v1384 = *(void **)v4;
  v1383 = *(unint64_t **)(v4 + 8);
  if (v1383)
  {
    v1385 = v1383 + 1;
    do
      v1386 = __ldxr(v1385);
    while (__stxr(v1386 + 1, v1385));
  }
  v1387 = (unint64_t *)v2[1];
  if (*v2)
    v1388 = *v2 + 1288;
  else
    v1388 = 0;
  v2019 = (std::__shared_weak_count *)v2[1];
  if (v1387)
  {
    v1389 = v1387 + 1;
    do
      v1390 = __ldxr(v1389);
    while (__stxr(v1390 + 1, v1389));
  }
  if (*(char *)(v1388 + 31) < 0)
  {
    sub_20E860C04(v2221, *(void **)(v1388 + 8), *(_QWORD *)(v1388 + 16));
  }
  else
  {
    v1391 = *(_OWORD *)(v1388 + 8);
    v2221[2] = *(void **)(v1388 + 24);
    *(_OWORD *)v2221 = v1391;
  }
  if (*(char *)(v1388 + 55) < 0)
  {
    sub_20E860C04(v2208, *(void **)(v1388 + 32), *(_QWORD *)(v1388 + 40));
  }
  else
  {
    *(_OWORD *)v2208 = *(_OWORD *)(v1388 + 32);
    v2208[2] = *(void **)(v1388 + 48);
  }
  v2459[0] = v1384;
  v2459[1] = v1383;
  v2458[0] = (void *)v1388;
  v2458[1] = v1387;
  if (v1387)
  {
    v1392 = v1387 + 1;
    do
      v1393 = __ldxr(v1392);
    while (__stxr(v1393 + 1, v1392));
  }
  if (SHIBYTE(v2221[2]) < 0)
  {
    sub_20E860C04(v2247, v2221[0], (unint64_t)v2221[1]);
  }
  else
  {
    *(_OWORD *)v2247 = *(_OWORD *)v2221;
    v2247[2] = v2221[2];
  }
  if (SHIBYTE(v2208[2]) < 0)
  {
    sub_20E860C04(v2234, v2208[0], (unint64_t)v2208[1]);
  }
  else
  {
    *(_OWORD *)v2234 = *(_OWORD *)v2208;
    v2234[2] = v2208[2];
  }
  *(void **)((char *)&v2462 + 7) = *(void **)((char *)&v2221[1] + 7);
  v1394 = v2221[0];
  v1395 = v2221[1];
  BYTE7(v2462) = HIBYTE(v2221[1]);
  v1396 = HIBYTE(v2221[2]);
  memset(v2221, 0, sizeof(v2221));
  v2454[0] = v1395;
  *(void **)((char *)v2454 + 7) = *(void **)((char *)&v2462 + 7);
  *(_QWORD *)((char *)&v2462 + 7) = 0;
  *(_QWORD *)&v2462 = 0;
  v2182[0] = v1384;
  v2182[1] = v1383;
  if (v1383)
  {
    v1397 = v1383 + 1;
    do
      v1398 = __ldxr(v1397);
    while (__stxr(v1398 + 1, v1397));
  }
  v1399 = (char *)operator new();
  v2456[0] = v2454[0];
  *(void **)((char *)v2456 + 7) = *(void **)((char *)v2454 + 7);
  v2454[0] = 0;
  *(void **)((char *)v2454 + 7) = 0;
  v1400 = *(_OWORD *)v2182;
  v2182[0] = 0;
  v2182[1] = 0;
  v1399[8] = 1;
  *((_QWORD *)v1399 + 4) = 0;
  *((_QWORD *)v1399 + 5) = 0;
  *(_QWORD *)v1399 = &off_24C9DBAE0;
  *((_QWORD *)v1399 + 2) = &unk_24C9DBB58;
  *((_QWORD *)v1399 + 3) = &unk_24C9DBB98;
  v1401 = v2456[0];
  *(void **)(v1399 + 63) = *(void **)((char *)v2456 + 7);
  *((_QWORD *)v1399 + 6) = v1394;
  *((_QWORD *)v1399 + 7) = v1401;
  v1399[71] = v1396;
  v2456[0] = 0;
  *(void **)((char *)v2456 + 7) = 0;
  *(_OWORD *)(v1399 + 72) = v1400;
  v2195[1] = 0;
  v2195[0] = 0;
  v1402 = (_QWORD *)operator new();
  *v1402 = &off_24C9DBC80;
  v1402[1] = v1388;
  v1402[2] = v1387;
  v2458[1] = 0;
  v2458[0] = 0;
  *((_QWORD *)v1399 + 18) = 0;
  *((_QWORD *)v1399 + 11) = v1402;
  *((_QWORD *)v1399 + 12) = v1399 + 96;
  *((_QWORD *)v1399 + 13) = v1399 + 96;
  *((_QWORD *)v1399 + 14) = 0;
  *((_QWORD *)v1399 + 15) = v1399 + 120;
  *((_QWORD *)v1399 + 16) = v1399 + 120;
  *((_QWORD *)v1399 + 17) = 0;
  if (!*((_QWORD *)v1399 + 9)
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 109, (uint64_t)"scheduler_", 10, (uint64_t)"scheduler must be valid", 23, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v1403 = (std::__shared_weak_count *)operator new();
  v1403->__shared_owners_ = 0;
  v1404 = (unint64_t *)&v1403->__shared_owners_;
  v1403->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9DC120;
  v1403->__shared_weak_owners_ = 0;
  v1403[1].__vftable = (std::__shared_weak_count_vtbl *)v1399;
  v1405 = (std::__shared_weak_count *)*((_QWORD *)v1399 + 5);
  if (v1405)
  {
    if (v1405->__shared_owners_ != -1)
      goto LABEL_2280;
    do
      v1406 = __ldxr(v1404);
    while (__stxr(v1406 + 1, v1404));
    v1407 = (unint64_t *)&v1403->__shared_weak_owners_;
    do
      v1408 = __ldxr(v1407);
    while (__stxr(v1408 + 1, v1407));
    *((_QWORD *)v1399 + 4) = v1399;
    *((_QWORD *)v1399 + 5) = v1403;
    std::__shared_weak_count::__release_weak(v1405);
  }
  else
  {
    do
      v1409 = __ldxr(v1404);
    while (__stxr(v1409 + 1, v1404));
    v1410 = (unint64_t *)&v1403->__shared_weak_owners_;
    do
      v1411 = __ldxr(v1410);
    while (__stxr(v1411 + 1, v1410));
    *((_QWORD *)v1399 + 4) = v1399;
    *((_QWORD *)v1399 + 5) = v1403;
  }
  do
    v1412 = __ldaxr(v1404);
  while (__stlxr(v1412 - 1, v1404));
  if (!v1412)
  {
    ((void (*)(std::__shared_weak_count *))v1403->__on_zero_shared)(v1403);
    std::__shared_weak_count::__release_weak(v1403);
  }
LABEL_2280:
  v1413 = (std::__shared_weak_count *)v2195[1];
  if (v2195[1])
  {
    v1414 = (unint64_t *)((char *)v2195[1] + 8);
    do
      v1415 = __ldaxr(v1414);
    while (__stlxr(v1415 - 1, v1414));
    if (!v1415)
    {
      ((void (*)(std::__shared_weak_count *))v1413->__on_zero_shared)(v1413);
      std::__shared_weak_count::__release_weak(v1413);
    }
  }
  v2195[0] = v1399;
  v2195[1] = v1403;
  v1416 = (std::__shared_weak_count *)v2182[1];
  if (v2182[1])
  {
    v1417 = (unint64_t *)((char *)v2182[1] + 8);
    do
      v1418 = __ldaxr(v1417);
    while (__stlxr(v1418 - 1, v1417));
    if (!v1418)
    {
      ((void (*)(std::__shared_weak_count *))v1416->__on_zero_shared)(v1416);
      std::__shared_weak_count::__release_weak(v1416);
    }
  }
  v1419 = *(_OWORD *)v2459;
  v2459[0] = 0;
  v2459[1] = 0;
  *(_OWORD *)&v2257[1] = *(_OWORD *)v2247;
  v2257[0] = &off_24C9D18F0;
  v2258 = v2247[2];
  memset(v2247, 0, sizeof(v2247));
  v2259 = *(_OWORD *)v2234;
  v1420 = v2234[2];
  memset(v2234, 0, sizeof(v2234));
  v2261 = v1419;
  v2182[1] = 0;
  v2182[0] = 0;
  v1421 = v2195[0];
  v1422 = (char *)v2195[1];
  v2260 = v1420;
  v2262 = *(_OWORD *)v2195;
  v2195[0] = 0;
  v2195[1] = 0;
  if (*((_QWORD *)&v2262 + 1))
  {
    v1423 = (unint64_t *)(v1422 + 16);
    do
      v1424 = __ldxr(v1423);
    while (__stxr(v1424 + 1, v1423));
  }
  v2263 = &off_24C9D1920;
  v1425 = (_QWORD *)operator new();
  *v1425 = &off_24C9DC170;
  v1425[1] = v1421;
  v1425[2] = v1422;
  *(_QWORD *)&v2264 = v1425;
  v1427 = *((_QWORD *)&v2262 + 1);
  v1426 = v2262;
  if (!*((_QWORD *)&v2262 + 1))
  {
    *((_QWORD *)&v2264 + 1) = v2262;
    v2265 = 0;
    if ((_QWORD)v2262)
      v1431 = v2262 + 16;
    else
      v1431 = 0;
    goto LABEL_2310;
  }
  v1428 = (unint64_t *)(*((_QWORD *)&v2262 + 1) + 16);
  do
    v1429 = __ldxr(v1428);
  while (__stxr(v1429 + 1, v1428));
  v1430 = *((_QWORD *)&v2262 + 1);
  *((_QWORD *)&v2264 + 1) = v1426;
  v2265 = v1427;
  if ((_QWORD)v2262)
    v1431 = v2262 + 16;
  else
    v1431 = 0;
  if (!*((_QWORD *)&v2262 + 1))
  {
    v1426 = v2262;
LABEL_2310:
    v1434 = 0;
    v2266 = &off_24C9B2520;
    v2267 = v1431;
    goto LABEL_2311;
  }
  v1432 = (unint64_t *)(*((_QWORD *)&v2262 + 1) + 16);
  do
    v1433 = __ldxr(v1432);
  while (__stxr(v1433 + 1, v1432));
  v1434 = *((_QWORD *)&v2262 + 1);
  v1426 = v2262;
  v2266 = &off_24C9B2520;
  *(_QWORD *)&v2267 = v1431;
  *((_QWORD *)&v2267 + 1) = v1430;
  if (*((_QWORD *)&v2262 + 1))
  {
    v1435 = (unint64_t *)(*((_QWORD *)&v2262 + 1) + 16);
    do
      v1436 = __ldxr(v1435);
    while (__stxr(v1436 + 1, v1435));
  }
LABEL_2311:
  if (v1426)
    v1437 = v1426 + 24;
  else
    v1437 = 0;
  v2268 = &off_24C9B2310;
  *(_QWORD *)&v2269 = v1437;
  *((_QWORD *)&v2269 + 1) = v1434;
  if ((SHIBYTE(v2234[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v2247[2]) & 0x80000000) == 0)
      goto LABEL_2316;
LABEL_2319:
    operator delete(v2247[0]);
    v1438 = (std::__shared_weak_count *)v2458[1];
    if (!v2458[1])
      goto LABEL_2324;
    goto LABEL_2320;
  }
  operator delete(v2234[0]);
  if (SHIBYTE(v2247[2]) < 0)
    goto LABEL_2319;
LABEL_2316:
  v1438 = (std::__shared_weak_count *)v2458[1];
  if (!v2458[1])
    goto LABEL_2324;
LABEL_2320:
  v1439 = (unint64_t *)&v1438->__shared_owners_;
  do
    v1440 = __ldaxr(v1439);
  while (__stlxr(v1440 - 1, v1439));
  if (!v1440)
  {
    ((void (*)(std::__shared_weak_count *))v1438->__on_zero_shared)(v1438);
    std::__shared_weak_count::__release_weak(v1438);
  }
LABEL_2324:
  v1441 = (std::__shared_weak_count *)v2459[1];
  if (!v2459[1])
    goto LABEL_2328;
  v1442 = (unint64_t *)((char *)v2459[1] + 8);
  do
    v1443 = __ldaxr(v1442);
  while (__stlxr(v1443 - 1, v1442));
  if (!v1443)
  {
    ((void (*)(std::__shared_weak_count *))v1441->__on_zero_shared)(v1441);
    std::__shared_weak_count::__release_weak(v1441);
    if ((SHIBYTE(v2208[2]) & 0x80000000) == 0)
    {
LABEL_2329:
      if ((SHIBYTE(v2221[2]) & 0x80000000) == 0)
        goto LABEL_2330;
LABEL_2334:
      operator delete(v2221[0]);
      if (v1388)
        goto LABEL_2336;
      goto LABEL_2335;
    }
  }
  else
  {
LABEL_2328:
    if ((SHIBYTE(v2208[2]) & 0x80000000) == 0)
      goto LABEL_2329;
  }
  operator delete(v2208[0]);
  if (SHIBYTE(v2221[2]) < 0)
    goto LABEL_2334;
LABEL_2330:
  if (v1388)
    goto LABEL_2336;
LABEL_2335:
  if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/Channel.h", 542, (uint64_t)"worker", 6, (uint64_t)"Callable must be valid", 22, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
LABEL_2336:
  v1445 = *(void **)v4;
  v1444 = *(unint64_t **)(v4 + 8);
  if (v1444)
  {
    v1446 = v1444 + 1;
    do
      v1447 = __ldxr(v1446);
    while (__stxr(v1447 + 1, v1446));
  }
  v1448 = (unint64_t *)v2[1];
  if (*v2)
    v1449 = *v2 + 1344;
  else
    v1449 = 0;
  v2018 = (std::__shared_weak_count *)v2[1];
  if (v1448)
  {
    v1450 = v1448 + 1;
    do
      v1451 = __ldxr(v1450);
    while (__stxr(v1451 + 1, v1450));
  }
  if (*(char *)(v1449 + 31) < 0)
  {
    sub_20E860C04(v2208, *(void **)(v1449 + 8), *(_QWORD *)(v1449 + 16));
  }
  else
  {
    v1452 = *(_OWORD *)(v1449 + 8);
    v2208[2] = *(void **)(v1449 + 24);
    *(_OWORD *)v2208 = v1452;
  }
  if (*(char *)(v1449 + 55) < 0)
  {
    sub_20E860C04(v2195, *(void **)(v1449 + 32), *(_QWORD *)(v1449 + 40));
  }
  else
  {
    *(_OWORD *)v2195 = *(_OWORD *)(v1449 + 32);
    v2195[2] = *(void **)(v1449 + 48);
  }
  v2458[0] = v1445;
  v2458[1] = v1444;
  v2456[0] = (void *)v1449;
  v2456[1] = v1448;
  if (v1448)
  {
    v1453 = v1448 + 1;
    do
      v1454 = __ldxr(v1453);
    while (__stxr(v1454 + 1, v1453));
  }
  if (SHIBYTE(v2208[2]) < 0)
  {
    sub_20E860C04(v2234, v2208[0], (unint64_t)v2208[1]);
  }
  else
  {
    *(_OWORD *)v2234 = *(_OWORD *)v2208;
    v2234[2] = v2208[2];
  }
  if (SHIBYTE(v2195[2]) < 0)
  {
    sub_20E860C04(v2221, v2195[0], (unint64_t)v2195[1]);
  }
  else
  {
    *(_OWORD *)v2221 = *(_OWORD *)v2195;
    v2221[2] = v2195[2];
  }
  *(void **)((char *)&v2460 + 7) = *(void **)((char *)&v2208[1] + 7);
  v1455 = v2208[0];
  v1456 = v2208[1];
  BYTE7(v2460) = HIBYTE(v2208[1]);
  v1457 = HIBYTE(v2208[2]);
  memset(v2208, 0, sizeof(v2208));
  *(_QWORD *)&v2462 = v1456;
  *(_QWORD *)((char *)&v2462 + 7) = *(_QWORD *)((char *)&v2460 + 7);
  *(_QWORD *)((char *)&v2460 + 7) = 0;
  *(_QWORD *)&v2460 = 0;
  v2459[0] = v1445;
  v2459[1] = v1444;
  if (v1444)
  {
    v1458 = v1444 + 1;
    do
      v1459 = __ldxr(v1458);
    while (__stxr(v1459 + 1, v1458));
  }
  v1460 = (char *)operator new();
  v2454[0] = (void *)v2462;
  *(void **)((char *)v2454 + 7) = *(void **)((char *)&v2462 + 7);
  *(_QWORD *)&v2462 = 0;
  *(_QWORD *)((char *)&v2462 + 7) = 0;
  v1461 = *(_OWORD *)v2459;
  v2459[0] = 0;
  v2459[1] = 0;
  v1460[8] = 1;
  *((_QWORD *)v1460 + 4) = 0;
  *((_QWORD *)v1460 + 5) = 0;
  *(_QWORD *)v1460 = &off_24C9DC1E8;
  *((_QWORD *)v1460 + 2) = &unk_24C9DC260;
  *((_QWORD *)v1460 + 3) = &unk_24C9DC2A0;
  v1462 = v2454[0];
  *(void **)(v1460 + 63) = *(void **)((char *)v2454 + 7);
  *((_QWORD *)v1460 + 6) = v1455;
  *((_QWORD *)v1460 + 7) = v1462;
  v1460[71] = v1457;
  v2454[0] = 0;
  *(void **)((char *)v2454 + 7) = 0;
  *(_OWORD *)(v1460 + 72) = v1461;
  v2182[1] = 0;
  v2182[0] = 0;
  v1463 = (_QWORD *)operator new();
  *v1463 = &off_24C9DC318;
  v1463[1] = v1449;
  v1463[2] = v1448;
  v2456[1] = 0;
  v2456[0] = 0;
  *((_QWORD *)v1460 + 18) = 0;
  *((_QWORD *)v1460 + 11) = v1463;
  *((_QWORD *)v1460 + 12) = v1460 + 96;
  *((_QWORD *)v1460 + 13) = v1460 + 96;
  *((_QWORD *)v1460 + 14) = 0;
  *((_QWORD *)v1460 + 15) = v1460 + 120;
  *((_QWORD *)v1460 + 16) = v1460 + 120;
  *((_QWORD *)v1460 + 17) = 0;
  if (!*((_QWORD *)v1460 + 9)
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 109, (uint64_t)"scheduler_", 10, (uint64_t)"scheduler must be valid", 23, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v1464 = (std::__shared_weak_count *)operator new();
  v1464->__shared_owners_ = 0;
  v1465 = (unint64_t *)&v1464->__shared_owners_;
  v1464->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9DC7A8;
  v1464->__shared_weak_owners_ = 0;
  v1464[1].__vftable = (std::__shared_weak_count_vtbl *)v1460;
  v1466 = (std::__shared_weak_count *)*((_QWORD *)v1460 + 5);
  if (v1466)
  {
    if (v1466->__shared_owners_ != -1)
      goto LABEL_2378;
    do
      v1467 = __ldxr(v1465);
    while (__stxr(v1467 + 1, v1465));
    v1468 = (unint64_t *)&v1464->__shared_weak_owners_;
    do
      v1469 = __ldxr(v1468);
    while (__stxr(v1469 + 1, v1468));
    *((_QWORD *)v1460 + 4) = v1460;
    *((_QWORD *)v1460 + 5) = v1464;
    std::__shared_weak_count::__release_weak(v1466);
  }
  else
  {
    do
      v1470 = __ldxr(v1465);
    while (__stxr(v1470 + 1, v1465));
    v1471 = (unint64_t *)&v1464->__shared_weak_owners_;
    do
      v1472 = __ldxr(v1471);
    while (__stxr(v1472 + 1, v1471));
    *((_QWORD *)v1460 + 4) = v1460;
    *((_QWORD *)v1460 + 5) = v1464;
  }
  do
    v1473 = __ldaxr(v1465);
  while (__stlxr(v1473 - 1, v1465));
  if (!v1473)
  {
    ((void (*)(std::__shared_weak_count *))v1464->__on_zero_shared)(v1464);
    std::__shared_weak_count::__release_weak(v1464);
  }
LABEL_2378:
  v1474 = (std::__shared_weak_count *)v2182[1];
  if (v2182[1])
  {
    v1475 = (unint64_t *)((char *)v2182[1] + 8);
    do
      v1476 = __ldaxr(v1475);
    while (__stlxr(v1476 - 1, v1475));
    if (!v1476)
    {
      ((void (*)(std::__shared_weak_count *))v1474->__on_zero_shared)(v1474);
      std::__shared_weak_count::__release_weak(v1474);
    }
  }
  v2182[0] = v1460;
  v2182[1] = v1464;
  v1477 = (std::__shared_weak_count *)v2459[1];
  if (v2459[1])
  {
    v1478 = (unint64_t *)((char *)v2459[1] + 8);
    do
      v1479 = __ldaxr(v1478);
    while (__stlxr(v1479 - 1, v1478));
    if (!v1479)
    {
      ((void (*)(std::__shared_weak_count *))v1477->__on_zero_shared)(v1477);
      std::__shared_weak_count::__release_weak(v1477);
    }
  }
  *(_OWORD *)v2459 = *(_OWORD *)v2458;
  v2458[0] = 0;
  v2458[1] = 0;
  sub_20ECFD39C((uint64_t)v2247, (__int128 *)v2234, (__int128 *)v2221, (uint64_t)v2182, (uint64_t)v2459);
  v1480 = (std::__shared_weak_count *)v2459[1];
  if (v2459[1])
  {
    v1481 = (unint64_t *)((char *)v2459[1] + 8);
    do
      v1482 = __ldaxr(v1481);
    while (__stlxr(v1482 - 1, v1481));
    if (!v1482)
    {
      ((void (*)(std::__shared_weak_count *))v1480->__on_zero_shared)(v1480);
      std::__shared_weak_count::__release_weak(v1480);
    }
  }
  v1483 = (std::__shared_weak_count *)v2182[1];
  if (!v2182[1])
    goto LABEL_2397;
  v1484 = (unint64_t *)((char *)v2182[1] + 8);
  do
    v1485 = __ldaxr(v1484);
  while (__stlxr(v1485 - 1, v1484));
  if (!v1485)
  {
    ((void (*)(std::__shared_weak_count *))v1483->__on_zero_shared)(v1483);
    std::__shared_weak_count::__release_weak(v1483);
    if ((SHIBYTE(v2221[2]) & 0x80000000) == 0)
    {
LABEL_2398:
      if ((SHIBYTE(v2234[2]) & 0x80000000) == 0)
        goto LABEL_2399;
LABEL_2403:
      operator delete(v2234[0]);
      v1486 = (std::__shared_weak_count *)v2456[1];
      if (!v2456[1])
        goto LABEL_2408;
      goto LABEL_2404;
    }
  }
  else
  {
LABEL_2397:
    if ((SHIBYTE(v2221[2]) & 0x80000000) == 0)
      goto LABEL_2398;
  }
  operator delete(v2221[0]);
  if (SHIBYTE(v2234[2]) < 0)
    goto LABEL_2403;
LABEL_2399:
  v1486 = (std::__shared_weak_count *)v2456[1];
  if (!v2456[1])
    goto LABEL_2408;
LABEL_2404:
  v1487 = (unint64_t *)&v1486->__shared_owners_;
  do
    v1488 = __ldaxr(v1487);
  while (__stlxr(v1488 - 1, v1487));
  if (!v1488)
  {
    ((void (*)(std::__shared_weak_count *))v1486->__on_zero_shared)(v1486);
    std::__shared_weak_count::__release_weak(v1486);
  }
LABEL_2408:
  v1489 = (std::__shared_weak_count *)v2458[1];
  if (!v2458[1])
    goto LABEL_2412;
  v1490 = (unint64_t *)((char *)v2458[1] + 8);
  do
    v1491 = __ldaxr(v1490);
  while (__stlxr(v1491 - 1, v1490));
  if (!v1491)
  {
    ((void (*)(std::__shared_weak_count *))v1489->__on_zero_shared)(v1489);
    std::__shared_weak_count::__release_weak(v1489);
    if ((SHIBYTE(v2195[2]) & 0x80000000) == 0)
    {
LABEL_2413:
      if ((SHIBYTE(v2208[2]) & 0x80000000) == 0)
        goto LABEL_2414;
LABEL_2418:
      operator delete(v2208[0]);
      if (v1449)
        goto LABEL_2420;
      goto LABEL_2419;
    }
  }
  else
  {
LABEL_2412:
    if ((SHIBYTE(v2195[2]) & 0x80000000) == 0)
      goto LABEL_2413;
  }
  operator delete(v2195[0]);
  if (SHIBYTE(v2208[2]) < 0)
    goto LABEL_2418;
LABEL_2414:
  if (v1449)
    goto LABEL_2420;
LABEL_2419:
  if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/Channel.h", 542, (uint64_t)"worker", 6, (uint64_t)"Callable must be valid", 22, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
LABEL_2420:
  v1493 = *(void **)v4;
  v1492 = *(unint64_t **)(v4 + 8);
  if (v1492)
  {
    v1494 = v1492 + 1;
    do
      v1495 = __ldxr(v1494);
    while (__stxr(v1495 + 1, v1494));
  }
  v1496 = (unint64_t *)v2[1];
  if (*v2)
    v1497 = *v2 + 1400;
  else
    v1497 = 0;
  v2017 = (std::__shared_weak_count *)v2[1];
  if (v1496)
  {
    v1498 = v1496 + 1;
    do
      v1499 = __ldxr(v1498);
    while (__stxr(v1499 + 1, v1498));
  }
  if (*(char *)(v1497 + 31) < 0)
  {
    sub_20E860C04(v2195, *(void **)(v1497 + 8), *(_QWORD *)(v1497 + 16));
  }
  else
  {
    v1500 = *(_OWORD *)(v1497 + 8);
    v2195[2] = *(void **)(v1497 + 24);
    *(_OWORD *)v2195 = v1500;
  }
  if (*(char *)(v1497 + 55) < 0)
  {
    sub_20E860C04(v2182, *(void **)(v1497 + 32), *(_QWORD *)(v1497 + 40));
  }
  else
  {
    *(_OWORD *)v2182 = *(_OWORD *)(v1497 + 32);
    v2182[2] = *(void **)(v1497 + 48);
  }
  v2456[0] = v1493;
  v2456[1] = v1492;
  v2454[0] = (void *)v1497;
  v2454[1] = v1496;
  if (v1496)
  {
    v1501 = v1496 + 1;
    do
      v1502 = __ldxr(v1501);
    while (__stxr(v1502 + 1, v1501));
  }
  if (SHIBYTE(v2195[2]) < 0)
  {
    sub_20E860C04(v2221, v2195[0], (unint64_t)v2195[1]);
  }
  else
  {
    *(_OWORD *)v2221 = *(_OWORD *)v2195;
    v2221[2] = v2195[2];
  }
  if (SHIBYTE(v2182[2]) < 0)
  {
    sub_20E860C04(v2208, v2182[0], (unint64_t)v2182[1]);
  }
  else
  {
    *(_OWORD *)v2208 = *(_OWORD *)v2182;
    v2208[2] = v2182[2];
  }
  *(void **)((char *)&v2453 + 7) = *(void **)((char *)&v2195[1] + 7);
  v1503 = v2195[0];
  *(void **)&v2453 = v2195[1];
  v1504 = HIBYTE(v2195[2]);
  memset(v2195, 0, sizeof(v2195));
  *(_QWORD *)&v2460 = v2453;
  *(_QWORD *)((char *)&v2460 + 7) = *(_QWORD *)((char *)&v2453 + 7);
  *(_QWORD *)((char *)&v2453 + 7) = 0;
  *(_QWORD *)&v2453 = 0;
  v2458[0] = v1493;
  v2458[1] = v1492;
  if (v1492)
  {
    v1505 = v1492 + 1;
    do
      v1506 = __ldxr(v1505);
    while (__stxr(v1506 + 1, v1505));
  }
  v1507 = (char *)operator new();
  *(_QWORD *)&v2462 = v2460;
  *(_QWORD *)((char *)&v2462 + 7) = *(_QWORD *)((char *)&v2460 + 7);
  *(_QWORD *)&v2460 = 0;
  *(_QWORD *)((char *)&v2460 + 7) = 0;
  v1508 = *(_OWORD *)v2458;
  v2458[0] = 0;
  v2458[1] = 0;
  v1507[8] = 1;
  *((_QWORD *)v1507 + 4) = 0;
  *((_QWORD *)v1507 + 5) = 0;
  *(_QWORD *)v1507 = &off_24C9DC7F8;
  *((_QWORD *)v1507 + 2) = &unk_24C9DC870;
  *((_QWORD *)v1507 + 3) = &unk_24C9DC8B0;
  v1509 = v2462;
  *(_QWORD *)(v1507 + 63) = *(_QWORD *)((char *)&v2462 + 7);
  *((_QWORD *)v1507 + 6) = v1503;
  *((_QWORD *)v1507 + 7) = v1509;
  v1507[71] = v1504;
  *(_QWORD *)&v2462 = 0;
  *(_QWORD *)((char *)&v2462 + 7) = 0;
  *(_OWORD *)(v1507 + 72) = v1508;
  v2459[1] = 0;
  v2459[0] = 0;
  v1510 = (_QWORD *)operator new();
  *v1510 = &off_24C9DC998;
  v1510[1] = v1497;
  v1510[2] = v1496;
  v2454[1] = 0;
  v2454[0] = 0;
  *((_QWORD *)v1507 + 18) = 0;
  *((_QWORD *)v1507 + 11) = v1510;
  *((_QWORD *)v1507 + 12) = v1507 + 96;
  *((_QWORD *)v1507 + 13) = v1507 + 96;
  *((_QWORD *)v1507 + 14) = 0;
  *((_QWORD *)v1507 + 15) = v1507 + 120;
  *((_QWORD *)v1507 + 16) = v1507 + 120;
  *((_QWORD *)v1507 + 17) = 0;
  if (!*((_QWORD *)v1507 + 9)
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 109, (uint64_t)"scheduler_", 10, (uint64_t)"scheduler must be valid", 23, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v1511 = (std::__shared_weak_count *)operator new();
  v1511->__shared_owners_ = 0;
  v1512 = (unint64_t *)&v1511->__shared_owners_;
  v1511->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9DCE38;
  v1511->__shared_weak_owners_ = 0;
  v1511[1].__vftable = (std::__shared_weak_count_vtbl *)v1507;
  v1513 = (std::__shared_weak_count *)*((_QWORD *)v1507 + 5);
  if (v1513)
  {
    if (v1513->__shared_owners_ != -1)
      goto LABEL_2462;
    do
      v1514 = __ldxr(v1512);
    while (__stxr(v1514 + 1, v1512));
    v1515 = (unint64_t *)&v1511->__shared_weak_owners_;
    do
      v1516 = __ldxr(v1515);
    while (__stxr(v1516 + 1, v1515));
    *((_QWORD *)v1507 + 4) = v1507;
    *((_QWORD *)v1507 + 5) = v1511;
    std::__shared_weak_count::__release_weak(v1513);
  }
  else
  {
    do
      v1517 = __ldxr(v1512);
    while (__stxr(v1517 + 1, v1512));
    v1518 = (unint64_t *)&v1511->__shared_weak_owners_;
    do
      v1519 = __ldxr(v1518);
    while (__stxr(v1519 + 1, v1518));
    *((_QWORD *)v1507 + 4) = v1507;
    *((_QWORD *)v1507 + 5) = v1511;
  }
  do
    v1520 = __ldaxr(v1512);
  while (__stlxr(v1520 - 1, v1512));
  if (!v1520)
  {
    ((void (*)(std::__shared_weak_count *))v1511->__on_zero_shared)(v1511);
    std::__shared_weak_count::__release_weak(v1511);
  }
LABEL_2462:
  v1521 = (std::__shared_weak_count *)v2459[1];
  if (v2459[1])
  {
    v1522 = (unint64_t *)((char *)v2459[1] + 8);
    do
      v1523 = __ldaxr(v1522);
    while (__stlxr(v1523 - 1, v1522));
    if (!v1523)
    {
      ((void (*)(std::__shared_weak_count *))v1521->__on_zero_shared)(v1521);
      std::__shared_weak_count::__release_weak(v1521);
    }
  }
  v2459[0] = v1507;
  v2459[1] = v1511;
  v1524 = (std::__shared_weak_count *)v2458[1];
  if (v2458[1])
  {
    v1525 = (unint64_t *)((char *)v2458[1] + 8);
    do
      v1526 = __ldaxr(v1525);
    while (__stlxr(v1526 - 1, v1525));
    if (!v1526)
    {
      ((void (*)(std::__shared_weak_count *))v1524->__on_zero_shared)(v1524);
      std::__shared_weak_count::__release_weak(v1524);
    }
  }
  v1527 = *(_OWORD *)v2456;
  v2456[0] = 0;
  v2456[1] = 0;
  *(_OWORD *)&v2234[1] = *(_OWORD *)v2221;
  v2234[0] = &off_24C9D1958;
  v2235 = v2221[2];
  memset(v2221, 0, sizeof(v2221));
  v2236 = *(_OWORD *)v2208;
  v1528 = v2208[2];
  memset(v2208, 0, sizeof(v2208));
  v2238 = v1527;
  v2458[1] = 0;
  v2458[0] = 0;
  v1529 = v2459[0];
  v1530 = (char *)v2459[1];
  v2237 = v1528;
  v2239 = *(_OWORD *)v2459;
  v2459[0] = 0;
  v2459[1] = 0;
  if (*((_QWORD *)&v2239 + 1))
  {
    v1531 = (unint64_t *)(v1530 + 16);
    do
      v1532 = __ldxr(v1531);
    while (__stxr(v1532 + 1, v1531));
  }
  v2240 = &off_24C9D1988;
  v1533 = (_QWORD *)operator new();
  *v1533 = &off_24C9DCE88;
  v1533[1] = v1529;
  v1533[2] = v1530;
  *(_QWORD *)&v2241 = v1533;
  v1535 = *((_QWORD *)&v2239 + 1);
  v1534 = v2239;
  if (!*((_QWORD *)&v2239 + 1))
  {
    *((_QWORD *)&v2241 + 1) = v2239;
    v2242 = 0;
    if ((_QWORD)v2239)
      v1539 = v2239 + 16;
    else
      v1539 = 0;
    goto LABEL_2492;
  }
  v1536 = (unint64_t *)(*((_QWORD *)&v2239 + 1) + 16);
  do
    v1537 = __ldxr(v1536);
  while (__stxr(v1537 + 1, v1536));
  v1538 = *((_QWORD *)&v2239 + 1);
  *((_QWORD *)&v2241 + 1) = v1534;
  v2242 = v1535;
  if ((_QWORD)v2239)
    v1539 = v2239 + 16;
  else
    v1539 = 0;
  if (!*((_QWORD *)&v2239 + 1))
  {
    v1534 = v2239;
LABEL_2492:
    v1542 = 0;
    v2243 = &off_24C9B2520;
    v2244 = v1539;
    goto LABEL_2493;
  }
  v1540 = (unint64_t *)(*((_QWORD *)&v2239 + 1) + 16);
  do
    v1541 = __ldxr(v1540);
  while (__stxr(v1541 + 1, v1540));
  v1542 = *((_QWORD *)&v2239 + 1);
  v1534 = v2239;
  v2243 = &off_24C9B2520;
  *(_QWORD *)&v2244 = v1539;
  *((_QWORD *)&v2244 + 1) = v1538;
  if (*((_QWORD *)&v2239 + 1))
  {
    v1543 = (unint64_t *)(*((_QWORD *)&v2239 + 1) + 16);
    do
      v1544 = __ldxr(v1543);
    while (__stxr(v1544 + 1, v1543));
  }
LABEL_2493:
  if (v1534)
    v1545 = v1534 + 24;
  else
    v1545 = 0;
  v2245 = &off_24C9B2310;
  *(_QWORD *)&v2246 = v1545;
  *((_QWORD *)&v2246 + 1) = v1542;
  if ((SHIBYTE(v2208[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v2221[2]) & 0x80000000) == 0)
      goto LABEL_2498;
LABEL_2501:
    operator delete(v2221[0]);
    v1546 = (std::__shared_weak_count *)v2454[1];
    if (!v2454[1])
      goto LABEL_2506;
    goto LABEL_2502;
  }
  operator delete(v2208[0]);
  if (SHIBYTE(v2221[2]) < 0)
    goto LABEL_2501;
LABEL_2498:
  v1546 = (std::__shared_weak_count *)v2454[1];
  if (!v2454[1])
    goto LABEL_2506;
LABEL_2502:
  v1547 = (unint64_t *)&v1546->__shared_owners_;
  do
    v1548 = __ldaxr(v1547);
  while (__stlxr(v1548 - 1, v1547));
  if (!v1548)
  {
    ((void (*)(std::__shared_weak_count *))v1546->__on_zero_shared)(v1546);
    std::__shared_weak_count::__release_weak(v1546);
  }
LABEL_2506:
  v1549 = (std::__shared_weak_count *)v2456[1];
  if (!v2456[1])
    goto LABEL_2510;
  v1550 = (unint64_t *)((char *)v2456[1] + 8);
  do
    v1551 = __ldaxr(v1550);
  while (__stlxr(v1551 - 1, v1550));
  if (!v1551)
  {
    ((void (*)(std::__shared_weak_count *))v1549->__on_zero_shared)(v1549);
    std::__shared_weak_count::__release_weak(v1549);
    if ((SHIBYTE(v2182[2]) & 0x80000000) == 0)
    {
LABEL_2511:
      if ((SHIBYTE(v2195[2]) & 0x80000000) == 0)
        goto LABEL_2512;
LABEL_2516:
      operator delete(v2195[0]);
      if (v1497)
        goto LABEL_2518;
      goto LABEL_2517;
    }
  }
  else
  {
LABEL_2510:
    if ((SHIBYTE(v2182[2]) & 0x80000000) == 0)
      goto LABEL_2511;
  }
  operator delete(v2182[0]);
  if (SHIBYTE(v2195[2]) < 0)
    goto LABEL_2516;
LABEL_2512:
  if (v1497)
    goto LABEL_2518;
LABEL_2517:
  if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/Channel.h", 542, (uint64_t)"worker", 6, (uint64_t)"Callable must be valid", 22, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
LABEL_2518:
  v1553 = *(void **)v4;
  v1552 = *(unint64_t **)(v4 + 8);
  if (v1552)
  {
    v1554 = v1552 + 1;
    do
      v1555 = __ldxr(v1554);
    while (__stxr(v1555 + 1, v1554));
  }
  v1556 = v2[1];
  if (*v2)
    v1557 = *v2 + 1456;
  else
    v1557 = 0;
  v2015 = v1557;
  v2016 = (std::__shared_weak_count *)v2[1];
  if (v1556)
  {
    v1558 = (unint64_t *)(v1556 + 8);
    do
      v1559 = __ldxr(v1558);
    while (__stxr(v1559 + 1, v1558));
  }
  if (*(char *)(v1557 + 31) < 0)
  {
    sub_20E860C04(v2182, *(void **)(v1557 + 8), *(_QWORD *)(v1557 + 16));
  }
  else
  {
    v1560 = *(_OWORD *)(v1557 + 8);
    v2182[2] = *(void **)(v1557 + 24);
    *(_OWORD *)v2182 = v1560;
  }
  if (*(char *)(v1557 + 55) < 0)
  {
    sub_20E860C04(v2459, *(void **)(v1557 + 32), *(_QWORD *)(v1557 + 40));
  }
  else
  {
    *(_OWORD *)v2459 = *(_OWORD *)(v1557 + 32);
    v2459[2] = *(void **)(v1557 + 48);
  }
  v2454[0] = v1553;
  v2454[1] = v1552;
  *(_QWORD *)&v2462 = v1557;
  *((_QWORD *)&v2462 + 1) = v1556;
  if (v1556)
  {
    v1561 = (unint64_t *)(v1556 + 8);
    do
      v1562 = __ldxr(v1561);
    while (__stxr(v1562 + 1, v1561));
  }
  if (SHIBYTE(v2182[2]) < 0)
  {
    sub_20E860C04(v2208, v2182[0], (unint64_t)v2182[1]);
  }
  else
  {
    *(_OWORD *)v2208 = *(_OWORD *)v2182;
    v2208[2] = v2182[2];
  }
  if (SHIBYTE(v2459[2]) < 0)
  {
    sub_20E860C04(v2195, v2459[0], (unint64_t)v2459[1]);
  }
  else
  {
    *(_OWORD *)v2195 = *(_OWORD *)v2459;
    v2195[2] = v2459[2];
  }
  *(void **)((char *)&v2452 + 7) = *(void **)((char *)&v2182[1] + 7);
  v1563 = v2182[0];
  *(void **)&v2452 = v2182[1];
  v1564 = HIBYTE(v2182[2]);
  memset(v2182, 0, sizeof(v2182));
  *(_QWORD *)&v2453 = v2452;
  *(_QWORD *)((char *)&v2453 + 7) = *(_QWORD *)((char *)&v2452 + 7);
  *(_QWORD *)((char *)&v2452 + 7) = 0;
  *(_QWORD *)&v2452 = 0;
  v2456[0] = v1553;
  v2456[1] = v1552;
  if (v1552)
  {
    v1565 = v1552 + 1;
    do
      v1566 = __ldxr(v1565);
    while (__stxr(v1566 + 1, v1565));
  }
  v1567 = (char *)operator new();
  *(_QWORD *)&v2460 = v2453;
  *(_QWORD *)((char *)&v2460 + 7) = *(_QWORD *)((char *)&v2453 + 7);
  *(_QWORD *)&v2453 = 0;
  *(_QWORD *)((char *)&v2453 + 7) = 0;
  v1568 = *(_OWORD *)v2456;
  v2456[0] = 0;
  v2456[1] = 0;
  v1567[8] = 1;
  *((_QWORD *)v1567 + 4) = 0;
  *((_QWORD *)v1567 + 5) = 0;
  *(_QWORD *)v1567 = &off_24C9DCF00;
  *((_QWORD *)v1567 + 2) = &unk_24C9DCF78;
  *((_QWORD *)v1567 + 3) = &unk_24C9DCFB8;
  v1569 = v2460;
  *(_QWORD *)(v1567 + 63) = *(_QWORD *)((char *)&v2460 + 7);
  *((_QWORD *)v1567 + 6) = v1563;
  *((_QWORD *)v1567 + 7) = v1569;
  v1567[71] = v1564;
  *(_QWORD *)&v2460 = 0;
  *(_QWORD *)((char *)&v2460 + 7) = 0;
  *(_OWORD *)(v1567 + 72) = v1568;
  v2458[1] = 0;
  v2458[0] = 0;
  v1570 = (_QWORD *)operator new();
  *v1570 = &off_24C9DD0A0;
  v1570[1] = v1557;
  v1570[2] = v1556;
  v2462 = 0uLL;
  *((_QWORD *)v1567 + 18) = 0;
  *((_QWORD *)v1567 + 11) = v1570;
  *((_QWORD *)v1567 + 12) = v1567 + 96;
  *((_QWORD *)v1567 + 13) = v1567 + 96;
  *((_QWORD *)v1567 + 14) = 0;
  *((_QWORD *)v1567 + 15) = v1567 + 120;
  *((_QWORD *)v1567 + 16) = v1567 + 120;
  *((_QWORD *)v1567 + 17) = 0;
  if (!*((_QWORD *)v1567 + 9)
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 109, (uint64_t)"scheduler_", 10, (uint64_t)"scheduler must be valid", 23, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v1571 = (std::__shared_weak_count *)operator new();
  v1571->__shared_owners_ = 0;
  v1572 = (unint64_t *)&v1571->__shared_owners_;
  v1571->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9DD540;
  v1571->__shared_weak_owners_ = 0;
  v1571[1].__vftable = (std::__shared_weak_count_vtbl *)v1567;
  v1573 = (std::__shared_weak_count *)*((_QWORD *)v1567 + 5);
  if (v1573)
  {
    if (v1573->__shared_owners_ != -1)
      goto LABEL_2560;
    do
      v1574 = __ldxr(v1572);
    while (__stxr(v1574 + 1, v1572));
    v1575 = (unint64_t *)&v1571->__shared_weak_owners_;
    do
      v1576 = __ldxr(v1575);
    while (__stxr(v1576 + 1, v1575));
    *((_QWORD *)v1567 + 4) = v1567;
    *((_QWORD *)v1567 + 5) = v1571;
    std::__shared_weak_count::__release_weak(v1573);
  }
  else
  {
    do
      v1577 = __ldxr(v1572);
    while (__stxr(v1577 + 1, v1572));
    v1578 = (unint64_t *)&v1571->__shared_weak_owners_;
    do
      v1579 = __ldxr(v1578);
    while (__stxr(v1579 + 1, v1578));
    *((_QWORD *)v1567 + 4) = v1567;
    *((_QWORD *)v1567 + 5) = v1571;
  }
  do
    v1580 = __ldaxr(v1572);
  while (__stlxr(v1580 - 1, v1572));
  if (!v1580)
  {
    ((void (*)(std::__shared_weak_count *))v1571->__on_zero_shared)(v1571);
    std::__shared_weak_count::__release_weak(v1571);
  }
LABEL_2560:
  v1581 = (std::__shared_weak_count *)v2458[1];
  if (v2458[1])
  {
    v1582 = (unint64_t *)((char *)v2458[1] + 8);
    do
      v1583 = __ldaxr(v1582);
    while (__stlxr(v1583 - 1, v1582));
    if (!v1583)
    {
      ((void (*)(std::__shared_weak_count *))v1581->__on_zero_shared)(v1581);
      std::__shared_weak_count::__release_weak(v1581);
    }
  }
  v2458[0] = v1567;
  v2458[1] = v1571;
  v1584 = (std::__shared_weak_count *)v2456[1];
  if (v2456[1])
  {
    v1585 = (unint64_t *)((char *)v2456[1] + 8);
    do
      v1586 = __ldaxr(v1585);
    while (__stlxr(v1586 - 1, v1585));
    if (!v1586)
    {
      ((void (*)(std::__shared_weak_count *))v1584->__on_zero_shared)(v1584);
      std::__shared_weak_count::__release_weak(v1584);
    }
  }
  v1587 = *(_OWORD *)v2454;
  v2454[0] = 0;
  v2454[1] = 0;
  *(_OWORD *)&v2221[1] = *(_OWORD *)v2208;
  v2221[0] = &off_24C9D19C0;
  v2222 = v2208[2];
  memset(v2208, 0, sizeof(v2208));
  v2223 = *(_OWORD *)v2195;
  v1588 = v2195[2];
  memset(v2195, 0, sizeof(v2195));
  v2225 = v1587;
  v2456[1] = 0;
  v2456[0] = 0;
  v1589 = v2458[0];
  v1590 = (char *)v2458[1];
  v2224 = v1588;
  v2226 = *(_OWORD *)v2458;
  v2458[0] = 0;
  v2458[1] = 0;
  if (*((_QWORD *)&v2226 + 1))
  {
    v1591 = (unint64_t *)(v1590 + 16);
    do
      v1592 = __ldxr(v1591);
    while (__stxr(v1592 + 1, v1591));
  }
  v2227 = &off_24C9D19F0;
  v1593 = (_QWORD *)operator new();
  *v1593 = &off_24C9DD590;
  v1593[1] = v1589;
  v1593[2] = v1590;
  *(_QWORD *)&v2228 = v1593;
  v1595 = *((_QWORD *)&v2226 + 1);
  v1594 = v2226;
  if (!*((_QWORD *)&v2226 + 1))
  {
    *((_QWORD *)&v2228 + 1) = v2226;
    v2229 = 0;
    if ((_QWORD)v2226)
      v1599 = v2226 + 16;
    else
      v1599 = 0;
    goto LABEL_2590;
  }
  v1596 = (unint64_t *)(*((_QWORD *)&v2226 + 1) + 16);
  do
    v1597 = __ldxr(v1596);
  while (__stxr(v1597 + 1, v1596));
  v1598 = *((_QWORD *)&v2226 + 1);
  *((_QWORD *)&v2228 + 1) = v1594;
  v2229 = v1595;
  if ((_QWORD)v2226)
    v1599 = v2226 + 16;
  else
    v1599 = 0;
  if (!*((_QWORD *)&v2226 + 1))
  {
    v1594 = v2226;
LABEL_2590:
    v1602 = 0;
    v2230 = &off_24C9CC9A0;
    v2231 = v1599;
    goto LABEL_2591;
  }
  v1600 = (unint64_t *)(*((_QWORD *)&v2226 + 1) + 16);
  do
    v1601 = __ldxr(v1600);
  while (__stxr(v1601 + 1, v1600));
  v1602 = *((_QWORD *)&v2226 + 1);
  v1594 = v2226;
  v2230 = &off_24C9CC9A0;
  *(_QWORD *)&v2231 = v1599;
  *((_QWORD *)&v2231 + 1) = v1598;
  if (*((_QWORD *)&v2226 + 1))
  {
    v1603 = (unint64_t *)(*((_QWORD *)&v2226 + 1) + 16);
    do
      v1604 = __ldxr(v1603);
    while (__stxr(v1604 + 1, v1603));
  }
LABEL_2591:
  if (v1594)
    v1605 = v1594 + 24;
  else
    v1605 = 0;
  v2232 = &off_24C9B2310;
  *(_QWORD *)&v2233 = v1605;
  *((_QWORD *)&v2233 + 1) = v1602;
  if ((SHIBYTE(v2195[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v2208[2]) & 0x80000000) == 0)
      goto LABEL_2596;
LABEL_2599:
    operator delete(v2208[0]);
    v1606 = (std::__shared_weak_count *)*((_QWORD *)&v2462 + 1);
    if (!*((_QWORD *)&v2462 + 1))
      goto LABEL_2604;
    goto LABEL_2600;
  }
  operator delete(v2195[0]);
  if (SHIBYTE(v2208[2]) < 0)
    goto LABEL_2599;
LABEL_2596:
  v1606 = (std::__shared_weak_count *)*((_QWORD *)&v2462 + 1);
  if (!*((_QWORD *)&v2462 + 1))
    goto LABEL_2604;
LABEL_2600:
  v1607 = (unint64_t *)&v1606->__shared_owners_;
  do
    v1608 = __ldaxr(v1607);
  while (__stlxr(v1608 - 1, v1607));
  if (!v1608)
  {
    ((void (*)(std::__shared_weak_count *))v1606->__on_zero_shared)(v1606);
    std::__shared_weak_count::__release_weak(v1606);
  }
LABEL_2604:
  v1609 = (std::__shared_weak_count *)v2454[1];
  if (!v2454[1])
    goto LABEL_2608;
  v1610 = (unint64_t *)((char *)v2454[1] + 8);
  do
    v1611 = __ldaxr(v1610);
  while (__stlxr(v1611 - 1, v1610));
  if (!v1611)
  {
    ((void (*)(std::__shared_weak_count *))v1609->__on_zero_shared)(v1609);
    std::__shared_weak_count::__release_weak(v1609);
    if ((SHIBYTE(v2459[2]) & 0x80000000) == 0)
    {
LABEL_2609:
      if ((SHIBYTE(v2182[2]) & 0x80000000) == 0)
        goto LABEL_2610;
LABEL_2614:
      operator delete(v2182[0]);
      if (v2015)
        goto LABEL_2616;
      goto LABEL_2615;
    }
  }
  else
  {
LABEL_2608:
    if ((SHIBYTE(v2459[2]) & 0x80000000) == 0)
      goto LABEL_2609;
  }
  operator delete(v2459[0]);
  if (SHIBYTE(v2182[2]) < 0)
    goto LABEL_2614;
LABEL_2610:
  if (v2015)
    goto LABEL_2616;
LABEL_2615:
  if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/Channel.h", 542, (uint64_t)"worker", 6, (uint64_t)"Callable must be valid", 22, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
LABEL_2616:
  v1613 = *(void **)v4;
  v1612 = *(unint64_t **)(v4 + 8);
  if (v1612)
  {
    v1614 = v1612 + 1;
    do
      v1615 = __ldxr(v1614);
    while (__stxr(v1615 + 1, v1614));
  }
  v1616 = v2[1];
  if (*v2)
    v1617 = *v2 + 1512;
  else
    v1617 = 0;
  v2014 = (std::__shared_weak_count *)v2[1];
  if (v1616)
  {
    v1618 = (unint64_t *)(v1616 + 8);
    do
      v1619 = __ldxr(v1618);
    while (__stxr(v1619 + 1, v1618));
  }
  if (*(char *)(v1617 + 31) < 0)
  {
    sub_20E860C04(v2459, *(void **)(v1617 + 8), *(_QWORD *)(v1617 + 16));
  }
  else
  {
    v1620 = *(_OWORD *)(v1617 + 8);
    v2459[2] = *(void **)(v1617 + 24);
    *(_OWORD *)v2459 = v1620;
  }
  if (*(char *)(v1617 + 55) < 0)
  {
    sub_20E860C04(v2458, *(void **)(v1617 + 32), *(_QWORD *)(v1617 + 40));
  }
  else
  {
    *(_OWORD *)v2458 = *(_OWORD *)(v1617 + 32);
    v2458[2] = *(void **)(v1617 + 48);
  }
  *(_QWORD *)&v2462 = v1613;
  *((_QWORD *)&v2462 + 1) = v1612;
  *(_QWORD *)&v2460 = v1617;
  *((_QWORD *)&v2460 + 1) = v1616;
  if (v1616)
  {
    v1621 = (unint64_t *)(v1616 + 8);
    do
      v1622 = __ldxr(v1621);
    while (__stxr(v1622 + 1, v1621));
  }
  if (SHIBYTE(v2459[2]) < 0)
  {
    sub_20E860C04(v2195, v2459[0], (unint64_t)v2459[1]);
  }
  else
  {
    *(_OWORD *)v2195 = *(_OWORD *)v2459;
    v2195[2] = v2459[2];
  }
  if (SHIBYTE(v2458[2]) < 0)
  {
    sub_20E860C04(v2182, v2458[0], (unint64_t)v2458[1]);
  }
  else
  {
    *(_OWORD *)v2182 = *(_OWORD *)v2458;
    v2182[2] = v2458[2];
  }
  *(void **)((char *)v2463 + 7) = *(void **)((char *)&v2459[1] + 7);
  v1623 = v2459[0];
  v1624 = v2459[1];
  HIBYTE(v2463[0]) = HIBYTE(v2459[1]);
  v1625 = HIBYTE(v2459[2]);
  memset(v2459, 0, 24);
  *(_QWORD *)&v2452 = v1624;
  *(_QWORD *)((char *)&v2452 + 7) = *(_QWORD *)((char *)v2463 + 7);
  *(_QWORD *)((char *)v2463 + 7) = 0;
  v2463[0] = 0;
  v2454[0] = v1613;
  v2454[1] = v1612;
  if (v1612)
  {
    v1626 = v1612 + 1;
    do
      v1627 = __ldxr(v1626);
    while (__stxr(v1627 + 1, v1626));
  }
  v1628 = (char *)operator new();
  *(_QWORD *)&v2453 = v2452;
  *(_QWORD *)((char *)&v2453 + 7) = *(_QWORD *)((char *)&v2452 + 7);
  *(_QWORD *)&v2452 = 0;
  *(_QWORD *)((char *)&v2452 + 7) = 0;
  v1629 = *(_OWORD *)v2454;
  v2454[0] = 0;
  v2454[1] = 0;
  v1628[8] = 1;
  *((_QWORD *)v1628 + 4) = 0;
  *((_QWORD *)v1628 + 5) = 0;
  *(_QWORD *)v1628 = &off_24C9DD608;
  *((_QWORD *)v1628 + 2) = &unk_24C9DD680;
  *((_QWORD *)v1628 + 3) = &unk_24C9DD6C0;
  v1630 = v2453;
  *(_QWORD *)(v1628 + 63) = *(_QWORD *)((char *)&v2453 + 7);
  *((_QWORD *)v1628 + 6) = v1623;
  *((_QWORD *)v1628 + 7) = v1630;
  v1628[71] = v1625;
  *(_QWORD *)&v2453 = 0;
  *(_QWORD *)((char *)&v2453 + 7) = 0;
  *(_OWORD *)(v1628 + 72) = v1629;
  v2456[1] = 0;
  v2456[0] = 0;
  v1631 = (_QWORD *)operator new();
  *v1631 = &off_24C9DD7A8;
  v1631[1] = v1617;
  v1631[2] = v1616;
  v2460 = 0uLL;
  *((_QWORD *)v1628 + 18) = 0;
  *((_QWORD *)v1628 + 11) = v1631;
  *((_QWORD *)v1628 + 12) = v1628 + 96;
  *((_QWORD *)v1628 + 13) = v1628 + 96;
  *((_QWORD *)v1628 + 14) = 0;
  *((_QWORD *)v1628 + 15) = v1628 + 120;
  *((_QWORD *)v1628 + 16) = v1628 + 120;
  *((_QWORD *)v1628 + 17) = 0;
  if (!*((_QWORD *)v1628 + 9)
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 109, (uint64_t)"scheduler_", 10, (uint64_t)"scheduler must be valid", 23, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v1632 = (std::__shared_weak_count *)operator new();
  v1632->__shared_owners_ = 0;
  v1633 = (unint64_t *)&v1632->__shared_owners_;
  v1632->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9DDC48;
  v1632->__shared_weak_owners_ = 0;
  v1632[1].__vftable = (std::__shared_weak_count_vtbl *)v1628;
  v1634 = (std::__shared_weak_count *)*((_QWORD *)v1628 + 5);
  if (v1634)
  {
    if (v1634->__shared_owners_ != -1)
      goto LABEL_2658;
    do
      v1635 = __ldxr(v1633);
    while (__stxr(v1635 + 1, v1633));
    v1636 = (unint64_t *)&v1632->__shared_weak_owners_;
    do
      v1637 = __ldxr(v1636);
    while (__stxr(v1637 + 1, v1636));
    *((_QWORD *)v1628 + 4) = v1628;
    *((_QWORD *)v1628 + 5) = v1632;
    std::__shared_weak_count::__release_weak(v1634);
  }
  else
  {
    do
      v1638 = __ldxr(v1633);
    while (__stxr(v1638 + 1, v1633));
    v1639 = (unint64_t *)&v1632->__shared_weak_owners_;
    do
      v1640 = __ldxr(v1639);
    while (__stxr(v1640 + 1, v1639));
    *((_QWORD *)v1628 + 4) = v1628;
    *((_QWORD *)v1628 + 5) = v1632;
  }
  do
    v1641 = __ldaxr(v1633);
  while (__stlxr(v1641 - 1, v1633));
  if (!v1641)
  {
    ((void (*)(std::__shared_weak_count *))v1632->__on_zero_shared)(v1632);
    std::__shared_weak_count::__release_weak(v1632);
  }
LABEL_2658:
  v1642 = (std::__shared_weak_count *)v2456[1];
  if (v2456[1])
  {
    v1643 = (unint64_t *)((char *)v2456[1] + 8);
    do
      v1644 = __ldaxr(v1643);
    while (__stlxr(v1644 - 1, v1643));
    if (!v1644)
    {
      ((void (*)(std::__shared_weak_count *))v1642->__on_zero_shared)(v1642);
      std::__shared_weak_count::__release_weak(v1642);
    }
  }
  v2456[0] = v1628;
  v2456[1] = v1632;
  v1645 = (std::__shared_weak_count *)v2454[1];
  if (v2454[1])
  {
    v1646 = (unint64_t *)((char *)v2454[1] + 8);
    do
      v1647 = __ldaxr(v1646);
    while (__stlxr(v1647 - 1, v1646));
    if (!v1647)
    {
      ((void (*)(std::__shared_weak_count *))v1645->__on_zero_shared)(v1645);
      std::__shared_weak_count::__release_weak(v1645);
    }
  }
  v1648 = v2462;
  v2462 = 0uLL;
  *(_OWORD *)&v2208[1] = *(_OWORD *)v2195;
  v2208[0] = &off_24C9D1A28;
  v2209 = v2195[2];
  memset(v2195, 0, sizeof(v2195));
  v2210 = *(_OWORD *)v2182;
  v1649 = v2182[2];
  memset(v2182, 0, sizeof(v2182));
  v2212 = v1648;
  v2454[1] = 0;
  v2454[0] = 0;
  v1650 = v2456[0];
  v1651 = (char *)v2456[1];
  v2211 = v1649;
  v2213 = *(_OWORD *)v2456;
  v2456[0] = 0;
  v2456[1] = 0;
  if (*((_QWORD *)&v2213 + 1))
  {
    v1652 = (unint64_t *)(v1651 + 16);
    do
      v1653 = __ldxr(v1652);
    while (__stxr(v1653 + 1, v1652));
  }
  v2214 = &off_24C9D1A58;
  v1654 = (_QWORD *)operator new();
  *v1654 = &off_24C9DDC98;
  v1654[1] = v1650;
  v1654[2] = v1651;
  *(_QWORD *)&v2215 = v1654;
  v1656 = *((_QWORD *)&v2213 + 1);
  v1655 = v2213;
  if (!*((_QWORD *)&v2213 + 1))
  {
    *((_QWORD *)&v2215 + 1) = v2213;
    v2216 = 0;
    if ((_QWORD)v2213)
      v1660 = v2213 + 16;
    else
      v1660 = 0;
    goto LABEL_2688;
  }
  v1657 = (unint64_t *)(*((_QWORD *)&v2213 + 1) + 16);
  do
    v1658 = __ldxr(v1657);
  while (__stxr(v1658 + 1, v1657));
  v1659 = *((_QWORD *)&v2213 + 1);
  *((_QWORD *)&v2215 + 1) = v1655;
  v2216 = v1656;
  if ((_QWORD)v2213)
    v1660 = v2213 + 16;
  else
    v1660 = 0;
  if (!*((_QWORD *)&v2213 + 1))
  {
    v1655 = v2213;
LABEL_2688:
    v1663 = 0;
    v2217 = &off_24C9B2520;
    v2218 = v1660;
    goto LABEL_2689;
  }
  v1661 = (unint64_t *)(*((_QWORD *)&v2213 + 1) + 16);
  do
    v1662 = __ldxr(v1661);
  while (__stxr(v1662 + 1, v1661));
  v1663 = *((_QWORD *)&v2213 + 1);
  v1655 = v2213;
  v2217 = &off_24C9B2520;
  *(_QWORD *)&v2218 = v1660;
  *((_QWORD *)&v2218 + 1) = v1659;
  if (*((_QWORD *)&v2213 + 1))
  {
    v1664 = (unint64_t *)(*((_QWORD *)&v2213 + 1) + 16);
    do
      v1665 = __ldxr(v1664);
    while (__stxr(v1665 + 1, v1664));
  }
LABEL_2689:
  if (v1655)
    v1666 = v1655 + 24;
  else
    v1666 = 0;
  v2219 = &off_24C9B2310;
  *(_QWORD *)&v2220 = v1666;
  *((_QWORD *)&v2220 + 1) = v1663;
  if ((SHIBYTE(v2182[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v2195[2]) & 0x80000000) == 0)
      goto LABEL_2694;
LABEL_2697:
    operator delete(v2195[0]);
    v1667 = (std::__shared_weak_count *)*((_QWORD *)&v2460 + 1);
    if (!*((_QWORD *)&v2460 + 1))
      goto LABEL_2702;
    goto LABEL_2698;
  }
  operator delete(v2182[0]);
  if (SHIBYTE(v2195[2]) < 0)
    goto LABEL_2697;
LABEL_2694:
  v1667 = (std::__shared_weak_count *)*((_QWORD *)&v2460 + 1);
  if (!*((_QWORD *)&v2460 + 1))
    goto LABEL_2702;
LABEL_2698:
  v1668 = (unint64_t *)&v1667->__shared_owners_;
  do
    v1669 = __ldaxr(v1668);
  while (__stlxr(v1669 - 1, v1668));
  if (!v1669)
  {
    ((void (*)(std::__shared_weak_count *))v1667->__on_zero_shared)(v1667);
    std::__shared_weak_count::__release_weak(v1667);
  }
LABEL_2702:
  v1670 = (std::__shared_weak_count *)*((_QWORD *)&v2462 + 1);
  if (!*((_QWORD *)&v2462 + 1))
    goto LABEL_2706;
  v1671 = (unint64_t *)(*((_QWORD *)&v2462 + 1) + 8);
  do
    v1672 = __ldaxr(v1671);
  while (__stlxr(v1672 - 1, v1671));
  if (!v1672)
  {
    ((void (*)(std::__shared_weak_count *))v1670->__on_zero_shared)(v1670);
    std::__shared_weak_count::__release_weak(v1670);
    if ((SHIBYTE(v2458[2]) & 0x80000000) == 0)
    {
LABEL_2707:
      if ((SHIBYTE(v2459[2]) & 0x80000000) == 0)
        goto LABEL_2708;
LABEL_2712:
      operator delete(v2459[0]);
      if (v1617)
        goto LABEL_2714;
      goto LABEL_2713;
    }
  }
  else
  {
LABEL_2706:
    if ((SHIBYTE(v2458[2]) & 0x80000000) == 0)
      goto LABEL_2707;
  }
  operator delete(v2458[0]);
  if (SHIBYTE(v2459[2]) < 0)
    goto LABEL_2712;
LABEL_2708:
  if (v1617)
    goto LABEL_2714;
LABEL_2713:
  if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/Channel.h", 542, (uint64_t)"worker", 6, (uint64_t)"Callable must be valid", 22, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
LABEL_2714:
  v1674 = *(void **)v4;
  v1673 = *(_QWORD *)(v4 + 8);
  if (v1673)
  {
    v1675 = (unint64_t *)(v1673 + 8);
    do
      v1676 = __ldxr(v1675);
    while (__stxr(v1676 + 1, v1675));
  }
  v1677 = v2[1];
  if (*v2)
    v1678 = *v2 + 1568;
  else
    v1678 = 0;
  v2013 = (std::__shared_weak_count *)v2[1];
  if (v1677)
  {
    v1679 = (unint64_t *)(v1677 + 8);
    do
      v1680 = __ldxr(v1679);
    while (__stxr(v1680 + 1, v1679));
  }
  if (*(char *)(v1678 + 31) < 0)
  {
    sub_20E860C04(v2458, *(void **)(v1678 + 8), *(_QWORD *)(v1678 + 16));
  }
  else
  {
    v1681 = *(_OWORD *)(v1678 + 8);
    v2458[2] = *(void **)(v1678 + 24);
    *(_OWORD *)v2458 = v1681;
  }
  if (*(char *)(v1678 + 55) < 0)
  {
    sub_20E860C04(v2456, *(void **)(v1678 + 32), *(_QWORD *)(v1678 + 40));
  }
  else
  {
    *(_OWORD *)v2456 = *(_OWORD *)(v1678 + 32);
    v2456[2] = *(void **)(v1678 + 48);
  }
  *(_QWORD *)&v2460 = v1674;
  *((_QWORD *)&v2460 + 1) = v1673;
  *(_QWORD *)&v2453 = v1678;
  *((_QWORD *)&v2453 + 1) = v1677;
  if (v1677)
  {
    v1682 = (unint64_t *)(v1677 + 8);
    do
      v1683 = __ldxr(v1682);
    while (__stxr(v1683 + 1, v1682));
  }
  if (SHIBYTE(v2458[2]) < 0)
  {
    sub_20E860C04(v2182, v2458[0], (unint64_t)v2458[1]);
  }
  else
  {
    *(_OWORD *)v2182 = *(_OWORD *)v2458;
    v2182[2] = v2458[2];
  }
  if (SHIBYTE(v2456[2]) < 0)
  {
    sub_20E860C04(v2459, v2456[0], (unint64_t)v2456[1]);
  }
  else
  {
    *(_OWORD *)v2459 = *(_OWORD *)v2456;
    v2459[2] = v2456[2];
  }
  *(void **)((char *)v2461 + 7) = *(void **)((char *)&v2458[1] + 7);
  v1684 = v2458[0];
  v1685 = v2458[1];
  HIBYTE(v2461[0]) = HIBYTE(v2458[1]);
  v1686 = HIBYTE(v2458[2]);
  memset(v2458, 0, 24);
  v2463[0] = v1685;
  *(_QWORD *)((char *)v2463 + 7) = *(_QWORD *)((char *)v2461 + 7);
  *(_QWORD *)((char *)v2461 + 7) = 0;
  v2461[0] = 0;
  *(_QWORD *)&v2462 = v1674;
  *((_QWORD *)&v2462 + 1) = v1673;
  if (v1673)
  {
    v1687 = (unint64_t *)(v1673 + 8);
    do
      v1688 = __ldxr(v1687);
    while (__stxr(v1688 + 1, v1687));
  }
  v1689 = (char *)operator new();
  *(_QWORD *)&v2452 = v2463[0];
  *(_QWORD *)((char *)&v2452 + 7) = *(_QWORD *)((char *)v2463 + 7);
  v2463[0] = 0;
  *(_QWORD *)((char *)v2463 + 7) = 0;
  v1690 = v2462;
  v2462 = 0uLL;
  v1689[8] = 1;
  *((_QWORD *)v1689 + 4) = 0;
  *((_QWORD *)v1689 + 5) = 0;
  *(_QWORD *)v1689 = &off_24C9DDD10;
  *((_QWORD *)v1689 + 2) = &unk_24C9DDD88;
  *((_QWORD *)v1689 + 3) = &unk_24C9DDDC8;
  v1691 = v2452;
  *(_QWORD *)(v1689 + 63) = *(_QWORD *)((char *)&v2452 + 7);
  *((_QWORD *)v1689 + 6) = v1684;
  *((_QWORD *)v1689 + 7) = v1691;
  v1689[71] = v1686;
  *(_QWORD *)&v2452 = 0;
  *(_QWORD *)((char *)&v2452 + 7) = 0;
  *(_OWORD *)(v1689 + 72) = v1690;
  v2454[1] = 0;
  v2454[0] = 0;
  v1692 = (_QWORD *)operator new();
  *v1692 = &off_24C9DDEB0;
  v1692[1] = v1678;
  v1692[2] = v1677;
  v2453 = 0uLL;
  *((_QWORD *)v1689 + 18) = 0;
  *((_QWORD *)v1689 + 11) = v1692;
  *((_QWORD *)v1689 + 12) = v1689 + 96;
  *((_QWORD *)v1689 + 13) = v1689 + 96;
  *((_QWORD *)v1689 + 14) = 0;
  *((_QWORD *)v1689 + 15) = v1689 + 120;
  *((_QWORD *)v1689 + 16) = v1689 + 120;
  *((_QWORD *)v1689 + 17) = 0;
  if (!*((_QWORD *)v1689 + 9)
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 109, (uint64_t)"scheduler_", 10, (uint64_t)"scheduler must be valid", 23, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v1693 = (std::__shared_weak_count *)operator new();
  v1693->__shared_owners_ = 0;
  v1694 = (unint64_t *)&v1693->__shared_owners_;
  v1693->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9DE350;
  v1693->__shared_weak_owners_ = 0;
  v1693[1].__vftable = (std::__shared_weak_count_vtbl *)v1689;
  v1695 = (std::__shared_weak_count *)*((_QWORD *)v1689 + 5);
  if (v1695)
  {
    if (v1695->__shared_owners_ != -1)
      goto LABEL_2756;
    do
      v1696 = __ldxr(v1694);
    while (__stxr(v1696 + 1, v1694));
    v1697 = (unint64_t *)&v1693->__shared_weak_owners_;
    do
      v1698 = __ldxr(v1697);
    while (__stxr(v1698 + 1, v1697));
    *((_QWORD *)v1689 + 4) = v1689;
    *((_QWORD *)v1689 + 5) = v1693;
    std::__shared_weak_count::__release_weak(v1695);
  }
  else
  {
    do
      v1699 = __ldxr(v1694);
    while (__stxr(v1699 + 1, v1694));
    v1700 = (unint64_t *)&v1693->__shared_weak_owners_;
    do
      v1701 = __ldxr(v1700);
    while (__stxr(v1701 + 1, v1700));
    *((_QWORD *)v1689 + 4) = v1689;
    *((_QWORD *)v1689 + 5) = v1693;
  }
  do
    v1702 = __ldaxr(v1694);
  while (__stlxr(v1702 - 1, v1694));
  if (!v1702)
  {
    ((void (*)(std::__shared_weak_count *))v1693->__on_zero_shared)(v1693);
    std::__shared_weak_count::__release_weak(v1693);
  }
LABEL_2756:
  v1703 = (std::__shared_weak_count *)v2454[1];
  if (v2454[1])
  {
    v1704 = (unint64_t *)((char *)v2454[1] + 8);
    do
      v1705 = __ldaxr(v1704);
    while (__stlxr(v1705 - 1, v1704));
    if (!v1705)
    {
      ((void (*)(std::__shared_weak_count *))v1703->__on_zero_shared)(v1703);
      std::__shared_weak_count::__release_weak(v1703);
    }
  }
  v2454[0] = v1689;
  v2454[1] = v1693;
  v1706 = (std::__shared_weak_count *)*((_QWORD *)&v2462 + 1);
  if (*((_QWORD *)&v2462 + 1))
  {
    v1707 = (unint64_t *)(*((_QWORD *)&v2462 + 1) + 8);
    do
      v1708 = __ldaxr(v1707);
    while (__stlxr(v1708 - 1, v1707));
    if (!v1708)
    {
      ((void (*)(std::__shared_weak_count *))v1706->__on_zero_shared)(v1706);
      std::__shared_weak_count::__release_weak(v1706);
    }
  }
  v1709 = v2460;
  v2460 = 0uLL;
  *(_OWORD *)&v2195[1] = *(_OWORD *)v2182;
  v2195[0] = &off_24C9D1A90;
  v2196 = v2182[2];
  memset(v2182, 0, sizeof(v2182));
  v2197 = *(_OWORD *)v2459;
  v1710 = v2459[2];
  memset(v2459, 0, 24);
  v2199 = v1709;
  v2462 = 0uLL;
  v1711 = v2454[0];
  v1712 = (char *)v2454[1];
  v2198 = v1710;
  v2200 = *(_OWORD *)v2454;
  v2454[0] = 0;
  v2454[1] = 0;
  if (*((_QWORD *)&v2200 + 1))
  {
    v1713 = (unint64_t *)(v1712 + 16);
    do
      v1714 = __ldxr(v1713);
    while (__stxr(v1714 + 1, v1713));
  }
  v2201 = &off_24C9D1AC0;
  v1715 = (_QWORD *)operator new();
  *v1715 = &off_24C9DE3A0;
  v1715[1] = v1711;
  v1715[2] = v1712;
  *(_QWORD *)&v2202 = v1715;
  v1717 = *((_QWORD *)&v2200 + 1);
  v1716 = v2200;
  if (!*((_QWORD *)&v2200 + 1))
  {
    *((_QWORD *)&v2202 + 1) = v2200;
    v2203 = 0;
    if ((_QWORD)v2200)
      v1721 = v2200 + 16;
    else
      v1721 = 0;
    goto LABEL_2786;
  }
  v1718 = (unint64_t *)(*((_QWORD *)&v2200 + 1) + 16);
  do
    v1719 = __ldxr(v1718);
  while (__stxr(v1719 + 1, v1718));
  v1720 = *((_QWORD *)&v2200 + 1);
  *((_QWORD *)&v2202 + 1) = v1716;
  v2203 = v1717;
  if ((_QWORD)v2200)
    v1721 = v2200 + 16;
  else
    v1721 = 0;
  if (!*((_QWORD *)&v2200 + 1))
  {
    v1716 = v2200;
LABEL_2786:
    v1724 = 0;
    v2204 = &off_24C9B2520;
    v2205 = v1721;
    goto LABEL_2787;
  }
  v1722 = (unint64_t *)(*((_QWORD *)&v2200 + 1) + 16);
  do
    v1723 = __ldxr(v1722);
  while (__stxr(v1723 + 1, v1722));
  v1724 = *((_QWORD *)&v2200 + 1);
  v1716 = v2200;
  v2204 = &off_24C9B2520;
  *(_QWORD *)&v2205 = v1721;
  *((_QWORD *)&v2205 + 1) = v1720;
  if (*((_QWORD *)&v2200 + 1))
  {
    v1725 = (unint64_t *)(*((_QWORD *)&v2200 + 1) + 16);
    do
      v1726 = __ldxr(v1725);
    while (__stxr(v1726 + 1, v1725));
  }
LABEL_2787:
  if (v1716)
    v1727 = v1716 + 24;
  else
    v1727 = 0;
  v2206 = &off_24C9B2310;
  *(_QWORD *)&v2207 = v1727;
  *((_QWORD *)&v2207 + 1) = v1724;
  if ((SHIBYTE(v2459[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v2182[2]) & 0x80000000) == 0)
      goto LABEL_2792;
LABEL_2795:
    operator delete(v2182[0]);
    v1728 = (std::__shared_weak_count *)*((_QWORD *)&v2453 + 1);
    if (!*((_QWORD *)&v2453 + 1))
      goto LABEL_2800;
    goto LABEL_2796;
  }
  operator delete(v2459[0]);
  if (SHIBYTE(v2182[2]) < 0)
    goto LABEL_2795;
LABEL_2792:
  v1728 = (std::__shared_weak_count *)*((_QWORD *)&v2453 + 1);
  if (!*((_QWORD *)&v2453 + 1))
    goto LABEL_2800;
LABEL_2796:
  v1729 = (unint64_t *)&v1728->__shared_owners_;
  do
    v1730 = __ldaxr(v1729);
  while (__stlxr(v1730 - 1, v1729));
  if (!v1730)
  {
    ((void (*)(std::__shared_weak_count *))v1728->__on_zero_shared)(v1728);
    std::__shared_weak_count::__release_weak(v1728);
  }
LABEL_2800:
  v1731 = (std::__shared_weak_count *)*((_QWORD *)&v2460 + 1);
  if (!*((_QWORD *)&v2460 + 1))
    goto LABEL_2804;
  v1732 = (unint64_t *)(*((_QWORD *)&v2460 + 1) + 8);
  do
    v1733 = __ldaxr(v1732);
  while (__stlxr(v1733 - 1, v1732));
  if (!v1733)
  {
    ((void (*)(std::__shared_weak_count *))v1731->__on_zero_shared)(v1731);
    std::__shared_weak_count::__release_weak(v1731);
    if ((SHIBYTE(v2456[2]) & 0x80000000) == 0)
    {
LABEL_2805:
      if ((SHIBYTE(v2458[2]) & 0x80000000) == 0)
        goto LABEL_2806;
LABEL_2810:
      operator delete(v2458[0]);
      if (v1678)
        goto LABEL_2812;
      goto LABEL_2811;
    }
  }
  else
  {
LABEL_2804:
    if ((SHIBYTE(v2456[2]) & 0x80000000) == 0)
      goto LABEL_2805;
  }
  operator delete(v2456[0]);
  if (SHIBYTE(v2458[2]) < 0)
    goto LABEL_2810;
LABEL_2806:
  if (v1678)
    goto LABEL_2812;
LABEL_2811:
  if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/Channel.h", 542, (uint64_t)"worker", 6, (uint64_t)"Callable must be valid", 22, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
LABEL_2812:
  v1734 = *(void **)v4;
  v1735 = *(_QWORD *)(v4 + 8);
  if (v1735)
  {
    v1736 = (unint64_t *)(v1735 + 8);
    do
      v1737 = __ldxr(v1736);
    while (__stxr(v1737 + 1, v1736));
  }
  v1738 = v2[1];
  if (*v2)
    v1739 = *v2 + 1624;
  else
    v1739 = 0;
  v2012 = (std::__shared_weak_count *)v2[1];
  if (v1738)
  {
    v1740 = (unint64_t *)(v1738 + 8);
    do
      v1741 = __ldxr(v1740);
    while (__stxr(v1741 + 1, v1740));
  }
  if (*(char *)(v1739 + 31) < 0)
  {
    sub_20E860C04(v2456, *(void **)(v1739 + 8), *(_QWORD *)(v1739 + 16));
  }
  else
  {
    v1742 = *(_OWORD *)(v1739 + 8);
    v2456[2] = *(void **)(v1739 + 24);
    *(_OWORD *)v2456 = v1742;
  }
  if (*(char *)(v1739 + 55) < 0)
  {
    sub_20E860C04(v2454, *(void **)(v1739 + 32), *(_QWORD *)(v1739 + 40));
  }
  else
  {
    *(_OWORD *)v2454 = *(_OWORD *)(v1739 + 32);
    v2455 = *(void **)(v1739 + 48);
  }
  *(_QWORD *)&v2453 = v1734;
  *((_QWORD *)&v2453 + 1) = v1735;
  *(_QWORD *)&v2452 = v1739;
  *((_QWORD *)&v2452 + 1) = v1738;
  if (v1738)
  {
    v1743 = (unint64_t *)(v1738 + 8);
    do
      v1744 = __ldxr(v1743);
    while (__stxr(v1744 + 1, v1743));
  }
  if (SHIBYTE(v2456[2]) < 0)
  {
    sub_20E860C04(v2459, v2456[0], (unint64_t)v2456[1]);
  }
  else
  {
    *(_OWORD *)v2459 = *(_OWORD *)v2456;
    v2459[2] = v2456[2];
  }
  if (SHIBYTE(v2455) < 0)
  {
    sub_20E860C04(v2458, v2454[0], (unint64_t)v2454[1]);
  }
  else
  {
    *(_OWORD *)v2458 = *(_OWORD *)v2454;
    v2458[2] = v2455;
  }
  *(void **)((char *)v2457 + 7) = *(void **)((char *)&v2456[1] + 7);
  v1745 = v2456[0];
  v1746 = v2456[1];
  HIBYTE(v2457[0]) = HIBYTE(v2456[1]);
  v1747 = HIBYTE(v2456[2]);
  memset(v2456, 0, 24);
  *((_QWORD *)&v2460 + 1) = v1735;
  v2461[0] = v1746;
  *(_QWORD *)((char *)v2461 + 7) = *(_QWORD *)((char *)v2457 + 7);
  *(_QWORD *)((char *)v2457 + 7) = 0;
  v2457[0] = 0;
  *(_QWORD *)&v2460 = v1734;
  if (v1735)
  {
    v1748 = (unint64_t *)(v1735 + 8);
    do
      v1749 = __ldxr(v1748);
    while (__stxr(v1749 + 1, v1748));
  }
  v1750 = operator new();
  v2463[0] = v2461[0];
  *(_QWORD *)((char *)v2463 + 7) = *(_QWORD *)((char *)v2461 + 7);
  v2461[0] = 0;
  *(_QWORD *)((char *)v2461 + 7) = 0;
  v1751 = v2460;
  v2460 = 0uLL;
  *(_BYTE *)(v1750 + 8) = 1;
  *(_QWORD *)(v1750 + 32) = 0;
  *(_QWORD *)(v1750 + 40) = 0;
  *(_QWORD *)v1750 = &off_24C9DE418;
  *(_QWORD *)(v1750 + 16) = &unk_24C9DE490;
  *(_QWORD *)(v1750 + 24) = &unk_24C9DE4D0;
  v1752 = v2463[0];
  *(_QWORD *)(v1750 + 63) = *(_QWORD *)((char *)v2463 + 7);
  *(_QWORD *)(v1750 + 48) = v1745;
  *(_QWORD *)(v1750 + 56) = v1752;
  *(_BYTE *)(v1750 + 71) = v1747;
  v2463[0] = 0;
  *(_QWORD *)((char *)v2463 + 7) = 0;
  *(_OWORD *)(v1750 + 72) = v1751;
  v2462 = 0uLL;
  v1753 = (_QWORD *)operator new();
  *v1753 = &off_24C9DE5B8;
  v1753[1] = v1739;
  v1753[2] = v1738;
  v2452 = 0uLL;
  *(_QWORD *)(v1750 + 144) = 0;
  *(_QWORD *)(v1750 + 88) = v1753;
  *(_QWORD *)(v1750 + 96) = v1750 + 96;
  *(_QWORD *)(v1750 + 104) = v1750 + 96;
  *(_QWORD *)(v1750 + 112) = 0;
  *(_QWORD *)(v1750 + 120) = v1750 + 120;
  *(_QWORD *)(v1750 + 128) = v1750 + 120;
  *(_QWORD *)(v1750 + 136) = 0;
  if (!*(_QWORD *)(v1750 + 72)
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 109, (uint64_t)"scheduler_", 10, (uint64_t)"scheduler must be valid", 23, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v1754 = (std::__shared_weak_count *)operator new();
  v1754->__shared_owners_ = 0;
  v1755 = (unint64_t *)&v1754->__shared_owners_;
  v1754->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9DEA58;
  v1754->__shared_weak_owners_ = 0;
  v1754[1].__vftable = (std::__shared_weak_count_vtbl *)v1750;
  v1756 = *(std::__shared_weak_count **)(v1750 + 40);
  if (v1756)
  {
    if (v1756->__shared_owners_ != -1)
      goto LABEL_2854;
    do
      v1757 = __ldxr(v1755);
    while (__stxr(v1757 + 1, v1755));
    v1758 = (unint64_t *)&v1754->__shared_weak_owners_;
    do
      v1759 = __ldxr(v1758);
    while (__stxr(v1759 + 1, v1758));
    *(_QWORD *)(v1750 + 32) = v1750;
    *(_QWORD *)(v1750 + 40) = v1754;
    std::__shared_weak_count::__release_weak(v1756);
  }
  else
  {
    do
      v1760 = __ldxr(v1755);
    while (__stxr(v1760 + 1, v1755));
    v1761 = (unint64_t *)&v1754->__shared_weak_owners_;
    do
      v1762 = __ldxr(v1761);
    while (__stxr(v1762 + 1, v1761));
    *(_QWORD *)(v1750 + 32) = v1750;
    *(_QWORD *)(v1750 + 40) = v1754;
  }
  do
    v1763 = __ldaxr(v1755);
  while (__stlxr(v1763 - 1, v1755));
  if (!v1763)
  {
    ((void (*)(std::__shared_weak_count *))v1754->__on_zero_shared)(v1754);
    std::__shared_weak_count::__release_weak(v1754);
  }
LABEL_2854:
  v1764 = (std::__shared_weak_count *)*((_QWORD *)&v2462 + 1);
  if (*((_QWORD *)&v2462 + 1))
  {
    v1765 = (unint64_t *)(*((_QWORD *)&v2462 + 1) + 8);
    do
      v1766 = __ldaxr(v1765);
    while (__stlxr(v1766 - 1, v1765));
    if (!v1766)
    {
      ((void (*)(std::__shared_weak_count *))v1764->__on_zero_shared)(v1764);
      std::__shared_weak_count::__release_weak(v1764);
    }
  }
  *(_QWORD *)&v2462 = v1750;
  *((_QWORD *)&v2462 + 1) = v1754;
  v1767 = (std::__shared_weak_count *)*((_QWORD *)&v2460 + 1);
  if (*((_QWORD *)&v2460 + 1))
  {
    v1768 = (unint64_t *)(*((_QWORD *)&v2460 + 1) + 8);
    do
      v1769 = __ldaxr(v1768);
    while (__stlxr(v1769 - 1, v1768));
    if (!v1769)
    {
      ((void (*)(std::__shared_weak_count *))v1767->__on_zero_shared)(v1767);
      std::__shared_weak_count::__release_weak(v1767);
    }
  }
  v1770 = v2453;
  v2453 = 0uLL;
  *(_OWORD *)&v2182[1] = *(_OWORD *)v2459;
  v2182[0] = &off_24C9D1AF8;
  v2183 = v2459[2];
  memset(v2459, 0, 24);
  v2184 = *(_OWORD *)v2458;
  v1771 = v2458[2];
  memset(v2458, 0, 24);
  v2186 = v1770;
  v2460 = 0uLL;
  v1772 = v2462;
  v2185 = v1771;
  v2187 = v2462;
  v2462 = 0uLL;
  if (*((_QWORD *)&v2187 + 1))
  {
    v1773 = (unint64_t *)(*((_QWORD *)&v1772 + 1) + 16);
    do
      v1774 = __ldxr(v1773);
    while (__stxr(v1774 + 1, v1773));
  }
  v2188 = &off_24C9D1B28;
  v1775 = operator new();
  *(_QWORD *)v1775 = &off_24C9DEAA8;
  *(_OWORD *)(v1775 + 8) = v1772;
  *(_QWORD *)&v2189 = v1775;
  v1777 = *((_QWORD *)&v2187 + 1);
  v1776 = v2187;
  if (!*((_QWORD *)&v2187 + 1))
  {
    *((_QWORD *)&v2189 + 1) = v2187;
    v2190 = 0;
    if ((_QWORD)v2187)
      v1781 = v2187 + 16;
    else
      v1781 = 0;
    goto LABEL_2884;
  }
  v1778 = (unint64_t *)(*((_QWORD *)&v2187 + 1) + 16);
  do
    v1779 = __ldxr(v1778);
  while (__stxr(v1779 + 1, v1778));
  v1780 = *((_QWORD *)&v2187 + 1);
  *((_QWORD *)&v2189 + 1) = v1776;
  v2190 = v1777;
  if ((_QWORD)v2187)
    v1781 = v2187 + 16;
  else
    v1781 = 0;
  if (!*((_QWORD *)&v2187 + 1))
  {
    v1776 = v2187;
LABEL_2884:
    v1784 = 0;
    v2191 = &off_24C9B2520;
    v2192 = v1781;
    goto LABEL_2885;
  }
  v1782 = (unint64_t *)(*((_QWORD *)&v2187 + 1) + 16);
  do
    v1783 = __ldxr(v1782);
  while (__stxr(v1783 + 1, v1782));
  v1784 = *((_QWORD *)&v2187 + 1);
  v1776 = v2187;
  v2191 = &off_24C9B2520;
  *(_QWORD *)&v2192 = v1781;
  *((_QWORD *)&v2192 + 1) = v1780;
  if (*((_QWORD *)&v2187 + 1))
  {
    v1785 = (unint64_t *)(*((_QWORD *)&v2187 + 1) + 16);
    do
      v1786 = __ldxr(v1785);
    while (__stxr(v1786 + 1, v1785));
  }
LABEL_2885:
  if (v1776)
    v1787 = v1776 + 24;
  else
    v1787 = 0;
  v2193 = &off_24C9B2310;
  *(_QWORD *)&v2194 = v1787;
  *((_QWORD *)&v2194 + 1) = v1784;
  if ((SHIBYTE(v2458[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v2459[2]) & 0x80000000) == 0)
      goto LABEL_2890;
LABEL_2893:
    operator delete(v2459[0]);
    v1788 = (std::__shared_weak_count *)*((_QWORD *)&v2452 + 1);
    if (!*((_QWORD *)&v2452 + 1))
      goto LABEL_2898;
    goto LABEL_2894;
  }
  operator delete(v2458[0]);
  if (SHIBYTE(v2459[2]) < 0)
    goto LABEL_2893;
LABEL_2890:
  v1788 = (std::__shared_weak_count *)*((_QWORD *)&v2452 + 1);
  if (!*((_QWORD *)&v2452 + 1))
    goto LABEL_2898;
LABEL_2894:
  v1789 = (unint64_t *)&v1788->__shared_owners_;
  do
    v1790 = __ldaxr(v1789);
  while (__stlxr(v1790 - 1, v1789));
  if (!v1790)
  {
    ((void (*)(std::__shared_weak_count *))v1788->__on_zero_shared)(v1788);
    std::__shared_weak_count::__release_weak(v1788);
  }
LABEL_2898:
  v1791 = (std::__shared_weak_count *)*((_QWORD *)&v2453 + 1);
  if (!*((_QWORD *)&v2453 + 1))
    goto LABEL_2902;
  v1792 = (unint64_t *)(*((_QWORD *)&v2453 + 1) + 8);
  do
    v1793 = __ldaxr(v1792);
  while (__stlxr(v1793 - 1, v1792));
  if (!v1793)
  {
    ((void (*)(std::__shared_weak_count *))v1791->__on_zero_shared)(v1791);
    std::__shared_weak_count::__release_weak(v1791);
    if ((SHIBYTE(v2455) & 0x80000000) == 0)
    {
LABEL_2903:
      if ((SHIBYTE(v2456[2]) & 0x80000000) == 0)
        goto LABEL_2904;
      goto LABEL_2908;
    }
  }
  else
  {
LABEL_2902:
    if ((SHIBYTE(v2455) & 0x80000000) == 0)
      goto LABEL_2903;
  }
  operator delete(v2454[0]);
  if ((SHIBYTE(v2456[2]) & 0x80000000) == 0)
  {
LABEL_2904:
    if (v1739)
      goto LABEL_2910;
    goto LABEL_2909;
  }
LABEL_2908:
  operator delete(v2456[0]);
  if (v1739)
    goto LABEL_2910;
LABEL_2909:
  if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/Channel.h", 542, (uint64_t)"worker", 6, (uint64_t)"Callable must be valid", 22, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
LABEL_2910:
  v1794 = operator new();
  *(_QWORD *)v1794 = &off_24C9D1070;
  *(_QWORD *)(v1794 + 88) = &off_24C9D10A0;
  *(_QWORD *)(v1794 + 168) = &off_24C9D1180;
  *(_QWORD *)(v1794 + 256) = &off_24C9D11B0;
  *(_QWORD *)(v1794 + 336) = &off_24C9D11E8;
  *(_QWORD *)(v1794 + 424) = &off_24C9B6AE0;
  *(_QWORD *)(v1794 + 504) = &off_24C9D1218;
  *(_QWORD *)(v1794 + 592) = &off_24C9D1248;
  *(_QWORD *)(v1794 + 672) = &off_24C9D1280;
  *(_QWORD *)(v1794 + 760) = &off_24C9CC538;
  *(_QWORD *)(v1794 + 792) = &off_24C9D12B0;
  *(_QWORD *)(v1794 + 840) = &off_24C9D12E8;
  *(_QWORD *)(v1794 + 928) = &off_24C9CC570;
  *(_QWORD *)(v1794 + 1008) = &off_24C9D1318;
  *(_QWORD *)(v1794 + 1096) = &off_24C9B4710;
  *(_QWORD *)(v1794 + 1344) = &off_24C9D1348;
  *(_QWORD *)(v1794 + 1432) = &off_24C9E10B0;
  *(_QWORD *)(v1794 + 1512) = &off_24C9D1378;
  *(_QWORD *)(v1794 + 1600) = &off_24C9D13A8;
  v2006 = v2451;
  *(_QWORD *)(v1794 + 1680) = &off_24C9D13E0;
  *(_QWORD *)(v1794 + 1768) = &off_24C9CC5A8;
  *(_QWORD *)(v1794 + 1800) = &off_24C9D1410;
  *(_QWORD *)(v1794 + 1848) = &off_24C9D1480;
  *(_QWORD *)(v1794 + 1936) = &off_24C9D14B0;
  *(_QWORD *)(v1794 + 1968) = &off_24C9D14E8;
  *(_QWORD *)(v1794 + 2016) = &off_24C9D1558;
  *(_QWORD *)(v1794 + 2104) = &off_24C9CC5E0;
  *(_QWORD *)(v1794 + 2136) = &off_24C9D1588;
  *(_QWORD *)(v1794 + 2944) = &off_24C9D1758;
  *(_QWORD *)(v1794 + 2856) = &off_24C9D1728;
  *(_QWORD *)(v1794 + 24) = v2170;
  v1795 = v2169;
  v2169 = 0uLL;
  v2170 = 0;
  *(_QWORD *)(v1794 + 48) = v2172;
  v1796 = v2171;
  v2171 = 0uLL;
  v2172 = 0;
  v1797 = v2173;
  v2173 = 0uLL;
  v1798 = v2174;
  v2174 = 0uLL;
  v1799 = v2176;
  v1800 = v2177;
  *((_QWORD *)&v2176 + 1) = 0;
  v2177 = 0;
  v1801 = v2181;
  v2181 = 0uLL;
  *(_QWORD *)(v1794 + 192) = v2152;
  v1802 = *(_OWORD *)&v2151[1];
  v2151[1] = 0;
  v2151[2] = 0;
  v2152 = 0;
  *(_QWORD *)(v1794 + 216) = v2154;
  v1803 = v2153;
  v2153 = 0uLL;
  v2154 = 0;
  v1804 = v2155;
  v2155 = 0uLL;
  v1805 = v2156;
  v2156 = 0uLL;
  *(_QWORD *)(v1794 + 280) = v2159;
  v1806 = v2158;
  *((_QWORD *)&v2158 + 1) = 0;
  v2159 = 0;
  v1807 = v2163;
  v2163 = 0uLL;
  *(_QWORD *)(v1794 + 360) = v2135;
  *(_OWORD *)(v1794 + 344) = *(_OWORD *)&__p[1];
  __p[1] = 0;
  __p[2] = 0;
  v2135 = 0;
  *(_QWORD *)(v1794 + 384) = v2137;
  v1808 = v2136;
  v2136 = 0uLL;
  v2137 = 0;
  v1809 = v2138;
  v2138 = 0uLL;
  v1810 = v2139;
  v2139 = 0uLL;
  v1811 = v2142;
  v1812 = v2141;
  *((_QWORD *)&v2141 + 1) = 0;
  v2142 = 0;
  *(_QWORD *)(v1794 + 112) = v1800;
  *(_QWORD *)(v1794 + 120) = &off_24C9D10D8;
  *(_QWORD *)(v1794 + 288) = &off_24C9D10D8;
  *(_QWORD *)(v1794 + 448) = v1811;
  *(_QWORD *)(v1794 + 456) = &off_24C9D10D8;
  v1813 = v2146;
  v2146 = 0uLL;
  *(_QWORD *)(v1794 + 528) = v2118;
  v1814 = *(_OWORD *)&__dst[1];
  __dst[1] = 0;
  __dst[2] = 0;
  v2118 = 0;
  *(_QWORD *)(v1794 + 552) = v2120;
  *(_OWORD *)(v1794 + 536) = v2119;
  v2119 = 0uLL;
  v2120 = 0;
  v1815 = v2121;
  v2121 = 0uLL;
  v1816 = v2122;
  v2122 = 0uLL;
  *(_QWORD *)(v1794 + 616) = v2125;
  v1817 = v2124;
  *((_QWORD *)&v2124 + 1) = 0;
  v2125 = 0;
  v1818 = v2129;
  v2129 = 0uLL;
  *(_QWORD *)(v1794 + 696) = v2101;
  *(_OWORD *)(v1794 + 680) = *(_OWORD *)&__src[1];
  __src[1] = 0;
  __src[2] = 0;
  v2101 = 0;
  *(_QWORD *)(v1794 + 720) = v2103;
  v1819 = v2102;
  v2102 = 0uLL;
  v2103 = 0;
  v1820 = v2104;
  v2104 = 0uLL;
  v1821 = v2105;
  v2105 = 0uLL;
  *(_QWORD *)(v1794 + 784) = v2108;
  v1822 = v2107;
  *((_QWORD *)&v2107 + 1) = 0;
  v2108 = 0;
  v1823 = v2112;
  v2112 = 0uLL;
  *(_QWORD *)(v1794 + 864) = v2084;
  v1824 = *(_OWORD *)&v2083[1];
  v2083[1] = 0;
  v2083[2] = 0;
  v2084 = 0;
  *(_QWORD *)(v1794 + 888) = v2086;
  *(_OWORD *)(v1794 + 872) = v2085;
  v2085 = 0uLL;
  v2086 = 0;
  v1825 = v2087;
  v2087 = 0uLL;
  v1826 = v2088;
  v2088 = 0uLL;
  *(_QWORD *)(v1794 + 952) = v2091;
  *(_OWORD *)(v1794 + 1016) = *(_OWORD *)&v2066[1];
  *(_OWORD *)(v1794 + 1208) = v2054;
  *(_OWORD *)(v1794 + 1352) = *(_OWORD *)&v2035[1];
  *(_OWORD *)(v1794 + 1544) = v2441;
  *(_OWORD *)(v1794 + 1688) = *(_OWORD *)&v2426[1];
  *(_OWORD *)(v1794 + 1880) = v2415;
  *(_OWORD *)(v1794 + 2024) = *(_OWORD *)&v2400[1];
  *(_OWORD *)(v1794 + 2216) = v2389;
  *(_OWORD *)(v1794 + 2360) = *(_OWORD *)&v2374[1];
  *(_OWORD *)(v1794 + 2552) = v2363;
  *(_OWORD *)(v1794 + 2696) = *(_OWORD *)&v2348[1];
  *(_OWORD *)(v1794 + 2888) = v2337;
  v1827 = v2090;
  *((_QWORD *)&v2090 + 1) = 0;
  v2091 = 0;
  *(_OWORD *)(v1794 + 8) = v1795;
  v1828 = v2095;
  v2095 = 0uLL;
  *(_QWORD *)(v1794 + 1032) = v2067;
  v2066[1] = 0;
  v2066[2] = 0;
  v2067 = 0;
  *(_QWORD *)(v1794 + 1056) = v2069;
  *(_OWORD *)(v1794 + 32) = v1796;
  v2011 = v2068;
  v2068 = 0uLL;
  v2069 = 0;
  *(_OWORD *)(v1794 + 56) = v1797;
  v1829 = v2070;
  v2070 = 0uLL;
  *(_OWORD *)(v1794 + 72) = v1798;
  v1830 = v2071;
  v2071 = 0uLL;
  *(_QWORD *)(v1794 + 1120) = v2074;
  *(_OWORD *)(v1794 + 96) = v1799;
  *(_OWORD *)(v1794 + 128) = v2179;
  v1831 = v2073;
  *((_QWORD *)&v2073 + 1) = 0;
  v2074 = 0;
  *(_OWORD *)(v1794 + 152) = v1801;
  v1832 = v2078;
  v2078 = 0uLL;
  *(_QWORD *)(v1794 + 1176) = &off_24C9E1048;
  *(_QWORD *)(v1794 + 1200) = v2053;
  *(_QWORD *)(v1794 + 1224) = v2055;
  *(_QWORD *)(v1794 + 1264) = &off_24C9E1078;
  *(_QWORD *)(v1794 + 1288) = v2059;
  *(_QWORD *)(v1794 + 1296) = &off_24C9CCAD0;
  *(_OWORD *)(v1794 + 176) = v1802;
  *(_OWORD *)(v1794 + 200) = v1803;
  *(_OWORD *)(v1794 + 224) = v1804;
  *(_OWORD *)(v1794 + 240) = v1805;
  v2010 = v2056;
  v2007 = v2061;
  v2008 = v2057;
  *(_QWORD *)(v1794 + 1368) = v2036;
  v2035[1] = 0;
  v2035[2] = 0;
  v2036 = 0;
  *(_QWORD *)(v1794 + 1392) = v2038;
  v1833 = v2037;
  v2037 = 0uLL;
  v2038 = 0;
  *(_OWORD *)(v1794 + 264) = v1806;
  *(_OWORD *)(v1794 + 296) = v2161;
  v1834 = v2039;
  v2039 = 0uLL;
  *(_OWORD *)(v1794 + 320) = v1807;
  v1835 = v2040;
  v2040 = 0uLL;
  *(_QWORD *)(v1794 + 1456) = v2043;
  *(_OWORD *)(v1794 + 368) = v1808;
  v1836 = v2042;
  *((_QWORD *)&v2042 + 1) = 0;
  v2043 = 0;
  *(_OWORD *)(v1794 + 392) = v1809;
  *(_OWORD *)(v1794 + 408) = v1810;
  v1837 = *(_OWORD *)&v2052[1];
  v1838 = v2047;
  v2047 = 0uLL;
  *(_QWORD *)(v1794 + 1536) = v2440;
  *(_OWORD *)(v1794 + 432) = v1812;
  *(_OWORD *)(v1794 + 464) = v2144;
  v1839 = *(_OWORD *)&v2439[1];
  v2439[1] = 0;
  v2439[2] = 0;
  v2440 = 0;
  *(_QWORD *)(v1794 + 1560) = v2442;
  v2441 = 0uLL;
  v2442 = 0;
  *(_OWORD *)(v1794 + 488) = v1813;
  v1840 = v2443;
  v2443 = 0uLL;
  *(_OWORD *)(v1794 + 512) = v1814;
  v1841 = v2444;
  v2444 = 0uLL;
  *(_QWORD *)(v1794 + 1624) = v2447;
  *(_OWORD *)(v1794 + 560) = v1815;
  *(_OWORD *)(v1794 + 576) = v1816;
  v1842 = v2446;
  *((_QWORD *)&v2446 + 1) = 0;
  v2447 = 0;
  v2451 = 0uLL;
  *(_QWORD *)(v1794 + 1704) = v2427;
  v2426[1] = 0;
  v2426[2] = 0;
  v2427 = 0;
  *(_QWORD *)(v1794 + 1728) = v2429;
  v1843 = v2428;
  v2428 = 0uLL;
  v2429 = 0;
  *(_OWORD *)(v1794 + 600) = v1817;
  *(_OWORD *)(v1794 + 632) = v2127;
  v1844 = v2430;
  v2430 = 0uLL;
  *(_OWORD *)(v1794 + 656) = v1818;
  v1845 = v2431;
  v2431 = 0uLL;
  *(_QWORD *)(v1794 + 1792) = v2434;
  *(_OWORD *)(v1794 + 704) = v1819;
  v1846 = v2433;
  *((_QWORD *)&v2433 + 1) = 0;
  v2434 = 0;
  *(_OWORD *)(v1794 + 728) = v1820;
  *(_OWORD *)(v1794 + 744) = v1821;
  v1847 = v2438;
  v2438 = 0uLL;
  *(_QWORD *)(v1794 + 1872) = v2414;
  v1848 = *(_OWORD *)&v2413[1];
  v2413[1] = 0;
  v2413[2] = 0;
  v2414 = 0;
  *(_QWORD *)(v1794 + 1896) = v2416;
  v2415 = 0uLL;
  v2416 = 0;
  *(_OWORD *)(v1794 + 768) = v1822;
  *(_OWORD *)(v1794 + 800) = v2110;
  v1849 = v2417;
  v2417 = 0uLL;
  *(_OWORD *)(v1794 + 824) = v1823;
  v1850 = v2418;
  v2418 = 0uLL;
  *(_QWORD *)(v1794 + 1960) = v2421;
  *(_QWORD *)&v2176 = 0;
  v2179 = 0uLL;
  *(_QWORD *)(v1794 + 144) = &off_24C9D1148;
  *(_QWORD *)&v2158 = 0;
  v2161 = 0uLL;
  *(_QWORD *)(v1794 + 312) = &off_24C9D1148;
  *(_QWORD *)&v2141 = 0;
  v2144 = 0uLL;
  *(_QWORD *)(v1794 + 480) = &off_24C9D1148;
  *(_QWORD *)(v1794 + 624) = &off_24C9B2520;
  *(_QWORD *)&v2124 = 0;
  v2127 = 0uLL;
  *(_QWORD *)(v1794 + 648) = &off_24C9B2310;
  *(_QWORD *)&v2107 = 0;
  v2110 = 0uLL;
  *(_QWORD *)(v1794 + 816) = &off_24C9B2310;
  *(_OWORD *)(v1794 + 848) = v1824;
  *(_OWORD *)(v1794 + 896) = v1825;
  *(_OWORD *)(v1794 + 912) = v1826;
  v1851 = v2093;
  *(_QWORD *)&v2090 = 0;
  v1852 = v2345;
  *((_QWORD *)&v2345 + 1) = 0;
  *(_OWORD *)(v1794 + 3032) = *(_OWORD *)&v2322[1];
  *(_OWORD *)(v1794 + 3224) = v2311;
  *(_OWORD *)(v1794 + 3368) = *(_OWORD *)&v2296[1];
  *(_OWORD *)(v1794 + 3560) = v2285;
  *(_OWORD *)(v1794 + 3704) = *(_OWORD *)&v2270[1];
  *(_OWORD *)(v1794 + 4232) = v2236;
  *(_OWORD *)(v1794 + 3896) = v2259;
  *(_OWORD *)(v1794 + 4376) = *(_OWORD *)&v2221[1];
  *(_OWORD *)(v1794 + 4568) = v2210;
  *(_OWORD *)(v1794 + 4712) = *(_OWORD *)&v2195[1];
  *(_OWORD *)(v1794 + 4040) = *(_OWORD *)&v2247[1];
  *(_OWORD *)(v1794 + 4904) = v2184;
  v1853 = v2420;
  *((_QWORD *)&v2420 + 1) = 0;
  v2421 = 0;
  *(_OWORD *)(v1794 + 936) = v1827;
  v1854 = v2425;
  v2425 = 0uLL;
  *(_QWORD *)(v1794 + 2040) = v2401;
  v2400[1] = 0;
  v2400[2] = 0;
  v2401 = 0;
  *(_QWORD *)(v1794 + 2064) = v2403;
  *(_OWORD *)(v1794 + 968) = v1851;
  v1855 = v2402;
  v2402 = 0uLL;
  v2403 = 0;
  *(_OWORD *)(v1794 + 1064) = v1829;
  *(_OWORD *)(v1794 + 1080) = v1830;
  v1856 = v2404;
  v2404 = 0uLL;
  v1857 = v2405;
  v2405 = 0uLL;
  *(_QWORD *)(v1794 + 2128) = v2408;
  *(_OWORD *)(v1794 + 1160) = v1832;
  *(_OWORD *)(v1794 + 1272) = v2058;
  *(_OWORD *)(v1794 + 1304) = v2060;
  v1858 = v2407;
  *((_QWORD *)&v2407 + 1) = 0;
  v2408 = 0;
  *(_OWORD *)(v1794 + 1400) = v1834;
  v1859 = v2412;
  v2412 = 0uLL;
  *(_QWORD *)(v1794 + 2184) = &off_24C9D15C0;
  *(_QWORD *)(v1794 + 2208) = v2388;
  *(_OWORD *)(v1794 + 1416) = v1835;
  v1860 = *(_OWORD *)&v2387[1];
  v2387[1] = 0;
  v2387[2] = 0;
  v2388 = 0;
  *(_QWORD *)(v1794 + 2232) = v2390;
  v2389 = 0uLL;
  v2390 = 0;
  *(_OWORD *)(v1794 + 1496) = v1838;
  v1861 = v2391;
  v2391 = 0uLL;
  *(_OWORD *)(v1794 + 1608) = v1842;
  *(_OWORD *)(v1794 + 1640) = v2449;
  v1862 = v2392;
  v2392 = 0uLL;
  *(_QWORD *)(v1794 + 2272) = &off_24C9CC618;
  *(_QWORD *)(v1794 + 2296) = v2395;
  *(_OWORD *)(v1794 + 1736) = v1844;
  v1863 = v2394;
  *((_QWORD *)&v2394 + 1) = 0;
  v2395 = 0;
  *(_OWORD *)(v1794 + 1752) = v1845;
  v1864 = v2399;
  v2399 = 0uLL;
  *(_QWORD *)(v1794 + 2352) = &off_24C9D15F0;
  *(_QWORD *)(v1794 + 2376) = v2375;
  v2374[1] = 0;
  v2374[2] = 0;
  v2375 = 0;
  *(_QWORD *)(v1794 + 2400) = v2377;
  *(_OWORD *)(v1794 + 1832) = v1847;
  v1865 = v2376;
  v2376 = 0uLL;
  v2377 = 0;
  *(_OWORD *)(v1794 + 1944) = v1853;
  *(_OWORD *)(v1794 + 1976) = v2423;
  v1866 = v2378;
  v2378 = 0uLL;
  *(_OWORD *)(v1794 + 2072) = v1856;
  v1867 = v2379;
  v2379 = 0uLL;
  *(_QWORD *)(v1794 + 2440) = &off_24C9B2630;
  *(_QWORD *)(v1794 + 2464) = v2382;
  *(_OWORD *)(v1794 + 2088) = v1857;
  v1868 = v2381;
  *((_QWORD *)&v2381 + 1) = 0;
  v2382 = 0;
  *(_QWORD *)(v1794 + 2472) = &off_24C9D1620;
  *(_OWORD *)(v1794 + 2168) = v1859;
  v1869 = v2386;
  v2386 = 0uLL;
  *(_QWORD *)(v1794 + 2520) = &off_24C9D1690;
  *(_QWORD *)(v1794 + 2544) = v2362;
  *(_OWORD *)(v1794 + 2280) = v1863;
  *(_OWORD *)(v1794 + 2312) = v2397;
  v1870 = *(_OWORD *)&v2361[1];
  v2361[1] = 0;
  v2361[2] = 0;
  v2362 = 0;
  *(_QWORD *)(v1794 + 2568) = v2364;
  v2363 = 0uLL;
  v2364 = 0;
  *(_OWORD *)(v1794 + 2408) = v1866;
  v1871 = v2365;
  v2365 = 0uLL;
  *(_OWORD *)(v1794 + 2424) = v1867;
  v1872 = v2366;
  v2366 = 0uLL;
  *(_QWORD *)(v1794 + 2608) = &off_24C9D16C0;
  *(_QWORD *)(v1794 + 2632) = v2369;
  *(_OWORD *)(v1794 + 2504) = v1869;
  v1873 = v2368;
  *((_QWORD *)&v2368 + 1) = 0;
  v2369 = 0;
  *(_QWORD *)(v1794 + 2640) = &off_24C9CC900;
  *(_OWORD *)(v1794 + 2616) = v1873;
  *(_OWORD *)(v1794 + 2648) = v2371;
  *(_OWORD *)(v1794 + 2744) = v2352;
  *(_OWORD *)(v1794 + 2760) = v2353;
  *(_OWORD *)(v1794 + 2840) = v2360;
  *(_OWORD *)(v1794 + 2952) = v2342;
  v1874 = v2373;
  v2373 = 0uLL;
  *(_QWORD *)(v1794 + 2688) = &off_24C9D16F8;
  *(_OWORD *)(v1794 + 2984) = v1852;
  *(_OWORD *)(v1794 + 3080) = v2326;
  *(_OWORD *)(v1794 + 3096) = v2327;
  *(_OWORD *)(v1794 + 3176) = v2334;
  *(_OWORD *)(v1794 + 3200) = *(_OWORD *)&v2309[1];
  *(_OWORD *)(v1794 + 3248) = v2313;
  *(_OWORD *)(v1794 + 3264) = v2314;
  *(_OWORD *)(v1794 + 3288) = v2316;
  *(_OWORD *)(v1794 + 3320) = v2319;
  *(_OWORD *)(v1794 + 3344) = v2321;
  *(_OWORD *)(v1794 + 3392) = v2298;
  *(_OWORD *)(v1794 + 3416) = v2300;
  *(_OWORD *)(v1794 + 3432) = v2301;
  *(_OWORD *)(v1794 + 3456) = v2303;
  *(_OWORD *)(v1794 + 3488) = v2306;
  v1875 = v2308;
  *(_QWORD *)(v1794 + 3640) = v2291;
  *(_OWORD *)(v1794 + 3512) = v1875;
  *(_OWORD *)(v1794 + 3536) = *(_OWORD *)&v2283[1];
  *(_OWORD *)(v1794 + 3584) = v2287;
  v1876 = v2290;
  *((_QWORD *)&v2290 + 1) = 0;
  v2291 = 0;
  *(_OWORD *)(v1794 + 3624) = v1876;
  v1877 = v2288;
  v2288 = 0uLL;
  *(_QWORD *)(v1794 + 3616) = &off_24C9C6280;
  *(_OWORD *)(v1794 + 3600) = v1877;
  v1878 = v2293;
  *(_QWORD *)&v2290 = 0;
  v2285 = 0uLL;
  v1879 = v2286;
  v2286 = 0;
  v2287 = 0uLL;
  *(_QWORD *)(v1794 + 2712) = v2349;
  v2348[1] = 0;
  v2348[2] = 0;
  v2349 = 0;
  *(_QWORD *)(v1794 + 3576) = v1879;
  *(_QWORD *)(v1794 + 2736) = v2351;
  v2283[1] = 0;
  v2283[2] = 0;
  v1880 = v2284;
  v2284 = 0;
  v2308 = 0uLL;
  *(_QWORD *)(v1794 + 3528) = &off_24C9D1890;
  *(_QWORD *)(v1794 + 3552) = v1880;
  *(_QWORD *)(v1794 + 3136) = v2330;
  v2306 = 0uLL;
  *(_QWORD *)(v1794 + 3504) = &off_24C9D1148;
  *(_QWORD *)(v1794 + 3472) = v2304;
  *((_QWORD *)&v2303 + 1) = 0;
  v2304 = 0;
  *(_QWORD *)(v1794 + 3480) = &off_24C9B2520;
  v2301 = 0uLL;
  *(_QWORD *)(v1794 + 3448) = &off_24C9B47B8;
  *(_QWORD *)&v2303 = 0;
  v2334 = 0uLL;
  *(_QWORD *)(v1794 + 3192) = &off_24C9D1830;
  v2300 = 0uLL;
  *(_QWORD *)(v1794 + 3216) = v2310;
  v2298 = 0uLL;
  v1881 = v2299;
  v2299 = 0;
  v2296[1] = 0;
  v2296[2] = 0;
  v1882 = v2297;
  v2297 = 0;
  *(_QWORD *)(v1794 + 3408) = v1881;
  v2321 = 0uLL;
  *(_QWORD *)(v1794 + 3360) = &off_24C9D1860;
  *(_QWORD *)(v1794 + 3384) = v1882;
  v2309[1] = 0;
  v2309[2] = 0;
  v2310 = 0;
  *(_QWORD *)(v1794 + 3304) = v2317;
  v2319 = 0uLL;
  *(_QWORD *)(v1794 + 3336) = &off_24C9B2310;
  v2317 = 0;
  v2316 = 0uLL;
  *(_QWORD *)(v1794 + 3312) = &off_24C9B2520;
  v2313 = 0uLL;
  v2314 = 0uLL;
  *(_QWORD *)(v1794 + 3280) = &off_24C9B5770;
  *(_QWORD *)(v1794 + 3240) = v2312;
  v2311 = 0uLL;
  v2312 = 0;
  *(_OWORD *)(v1794 + 3656) = v1878;
  *(_OWORD *)(v1794 + 3752) = v2274;
  *(_OWORD *)(v1794 + 3768) = v2275;
  *(_OWORD *)(v1794 + 3848) = v2282;
  *(_OWORD *)(v1794 + 3960) = v2264;
  *(_OWORD *)(v1794 + 3992) = v2267;
  *(_OWORD *)(v1794 + 4088) = v2251;
  *(_OWORD *)(v1794 + 4104) = v2252;
  *(_OWORD *)(v1794 + 4184) = v2256;
  *(_OWORD *)(v1794 + 4296) = v2241;
  *(_OWORD *)(v1794 + 4328) = v2244;
  *(_OWORD *)(v1794 + 2864) = *(_OWORD *)&v2335[1];
  *(_OWORD *)(v1794 + 2912) = v2339;
  *(_OWORD *)(v1794 + 3120) = v2329;
  v1883 = v2332;
  v2332 = 0uLL;
  *(_QWORD *)(v1794 + 3168) = &off_24C9B2310;
  *((_QWORD *)&v2329 + 1) = 0;
  v2330 = 0;
  *(_QWORD *)(v1794 + 3144) = &off_24C9D17F8;
  *(_OWORD *)(v1794 + 3152) = v1883;
  v1884 = v2340;
  v2327 = 0uLL;
  *(_QWORD *)(v1794 + 3112) = &off_24C9D17C0;
  *(_QWORD *)&v2329 = 0;
  *(_OWORD *)(v1794 + 2928) = v1884;
  *(_OWORD *)(v1794 + 3056) = v2324;
  v1885 = v2347;
  v2326 = 0uLL;
  v2324 = 0uLL;
  v1886 = v2325;
  v2325 = 0;
  v2322[1] = 0;
  v2322[2] = 0;
  v1887 = v2323;
  v2323 = 0;
  *(_QWORD *)(v1794 + 3072) = v1886;
  v2347 = 0uLL;
  *(_QWORD *)(v1794 + 3024) = &off_24C9D1790;
  *(_QWORD *)(v1794 + 3048) = v1887;
  *(_OWORD *)(v1794 + 3008) = v1885;
  v1888 = v2350;
  v2350 = 0uLL;
  v2351 = 0;
  *(_QWORD *)(v1794 + 2968) = v2343;
  *(_QWORD *)&v2345 = 0;
  *(_QWORD *)(v1794 + 3000) = &off_24C9B2310;
  *((_QWORD *)&v2342 + 1) = 0;
  v2343 = 0;
  *(_QWORD *)(v1794 + 2976) = &off_24C9B2520;
  v2352 = 0uLL;
  v2353 = 0uLL;
  v2340 = 0uLL;
  *(_QWORD *)&v2342 = 0;
  *(_QWORD *)(v1794 + 2776) = &off_24C9CC650;
  v2339 = 0uLL;
  v1889 = v2338;
  *((_QWORD *)&v2337 + 1) = 0;
  v2338 = 0;
  *(_QWORD *)(v1794 + 2800) = v2356;
  *(_QWORD *)(v1794 + 2904) = v1889;
  *(_QWORD *)&v2337 = 0;
  v2360 = 0uLL;
  v2335[1] = 0;
  v2335[2] = 0;
  v1890 = v2336;
  v2336 = 0;
  *(_QWORD *)(v1794 + 2880) = v1890;
  *(_OWORD *)(v1794 + 992) = v1828;
  *(_OWORD *)(v1794 + 2784) = v2355;
  v1891 = v2358;
  *(_QWORD *)&v2358 = 0;
  *(_QWORD *)(v1794 + 2832) = &off_24C9B2310;
  *((_QWORD *)&v2355 + 1) = 0;
  v2356 = 0;
  *(_OWORD *)(v1794 + 2816) = v1891;
  v1892 = v2295;
  *(_QWORD *)(v1794 + 2808) = &off_24C9B2520;
  *((_QWORD *)&v2358 + 1) = 0;
  v2295 = 0uLL;
  *(_QWORD *)(v1794 + 3696) = &off_24C9D18C0;
  *(_QWORD *)(v1794 + 3720) = v2271;
  *(_QWORD *)&v2355 = 0;
  v2270[1] = 0;
  v2270[2] = 0;
  v2271 = 0;
  *(_QWORD *)(v1794 + 3744) = v2273;
  *(_OWORD *)(v1794 + 2720) = v1888;
  v1893 = v2272;
  v2272 = 0uLL;
  v2273 = 0;
  v2274 = 0uLL;
  v2275 = 0uLL;
  *(_QWORD *)(v1794 + 3784) = &off_24C9C7D60;
  *(_QWORD *)(v1794 + 3808) = v2278;
  *(_OWORD *)(v1794 + 2672) = v1874;
  v1894 = v2277;
  *((_QWORD *)&v2277 + 1) = 0;
  v2278 = 0;
  *(_QWORD *)(v1794 + 2328) = &off_24C9D1148;
  *(_QWORD *)(v1794 + 3672) = &off_24C9D1148;
  *(_QWORD *)(v1794 + 3840) = &off_24C9D1148;
  *(_QWORD *)&v2371 = 0;
  *(_QWORD *)(v1794 + 2664) = &off_24C9B2310;
  v2282 = 0uLL;
  *(_QWORD *)(v1794 + 3864) = &off_24C9D18F0;
  *((_QWORD *)&v2371 + 1) = 0;
  *(_QWORD *)(v1794 + 3888) = v2258;
  *(_QWORD *)&v2368 = 0;
  *(_OWORD *)(v1794 + 2592) = v1872;
  v1895 = *(_OWORD *)&v2257[1];
  v2257[1] = 0;
  v2257[2] = 0;
  v2258 = 0;
  *(_QWORD *)(v1794 + 3912) = v2260;
  v2259 = 0uLL;
  v2260 = 0;
  *(_OWORD *)(v1794 + 2448) = v1868;
  v1896 = v2261;
  v2261 = 0uLL;
  *(_OWORD *)(v1794 + 2576) = v1871;
  *(_OWORD *)(v1794 + 2480) = v2384;
  v1897 = v2262;
  v2262 = 0uLL;
  *(_QWORD *)(v1794 + 3952) = &off_24C9D1920;
  *(_QWORD *)(v1794 + 3976) = v2265;
  *((_QWORD *)&v2264 + 1) = 0;
  v2265 = 0;
  *(_OWORD *)(v1794 + 2528) = v1870;
  v1898 = v2269;
  v2269 = 0uLL;
  *(_QWORD *)(v1794 + 4032) = &off_24C9E10E8;
  *(_QWORD *)(v1794 + 4056) = v2248;
  *(_QWORD *)(v1794 + 2496) = &off_24C9B2310;
  *(_QWORD *)(v1794 + 4080) = v2250;
  *(_QWORD *)(v1794 + 4120) = &off_24C9E1118;
  v2384 = 0uLL;
  *(_QWORD *)(v1794 + 4144) = v2254;
  *(_QWORD *)(v1794 + 4200) = &off_24C9D1958;
  *(_QWORD *)(v1794 + 4224) = v2235;
  *(_OWORD *)(v1794 + 1040) = v2011;
  v1899 = *(_OWORD *)&v2234[1];
  v2234[1] = 0;
  v2234[2] = 0;
  v2235 = 0;
  *(_QWORD *)&v2381 = 0;
  *(_QWORD *)(v1794 + 4248) = v2237;
  v2236 = 0uLL;
  v2237 = 0;
  *(_OWORD *)(v1794 + 1104) = v1831;
  *(_OWORD *)(v1794 + 1136) = v2076;
  v1900 = v2238;
  v2238 = 0uLL;
  *(_OWORD *)(v1794 + 2384) = v1865;
  v1901 = v2239;
  v2239 = 0uLL;
  *(_QWORD *)(v1794 + 4288) = &off_24C9D1988;
  *(_QWORD *)(v1794 + 4312) = v2242;
  *((_QWORD *)&v2241 + 1) = 0;
  v2242 = 0;
  *(_OWORD *)(v1794 + 1184) = v1837;
  v1902 = v2246;
  v2246 = 0uLL;
  *(_OWORD *)(v1794 + 2336) = v1864;
  v1903 = v2233;
  *(_OWORD *)(v1794 + 1232) = v2010;
  *(_OWORD *)(v1794 + 1248) = v2008;
  *(_OWORD *)(v1794 + 1328) = v2007;
  *(_QWORD *)(v1794 + 2304) = &off_24C9B2520;
  v2397 = 0uLL;
  v1904 = v2225;
  v1905 = v2226;
  v1906 = v2220;
  *(_QWORD *)&v2394 = 0;
  *(_OWORD *)(v1794 + 1376) = v1833;
  *(_OWORD *)(v1794 + 1440) = v1836;
  *(_OWORD *)(v1794 + 2240) = v1861;
  v1907 = v2212;
  v1908 = v2213;
  v1909 = v2207;
  *(_OWORD *)(v1794 + 2256) = v1862;
  *(_OWORD *)(v1794 + 1472) = v2045;
  *(_OWORD *)(v1794 + 1520) = v1839;
  *(_OWORD *)(v1794 + 1568) = v1840;
  *(_OWORD *)(v1794 + 1584) = v1841;
  *(_OWORD *)(v1794 + 1664) = v2006;
  *(_OWORD *)(v1794 + 1712) = v1843;
  *(_OWORD *)(v1794 + 1776) = v1846;
  *(_OWORD *)(v1794 + 1808) = v2436;
  *(_OWORD *)(v1794 + 1856) = v1848;
  *(_OWORD *)(v1794 + 1904) = v1849;
  *(_OWORD *)(v1794 + 2192) = v1860;
  *(_OWORD *)(v1794 + 1920) = v1850;
  *(_OWORD *)(v1794 + 2000) = v1854;
  v1910 = v2410;
  *(_QWORD *)&v2407 = 0;
  *(_QWORD *)&v2410 = 0;
  *(_QWORD *)(v1794 + 2160) = &off_24C9B2310;
  *(_OWORD *)(v1794 + 2048) = v1855;
  *(_OWORD *)(v1794 + 2112) = v1858;
  *(_OWORD *)(v1794 + 2144) = v1910;
  *(_OWORD *)(v1794 + 3680) = v1892;
  *(_OWORD *)(v1794 + 3728) = v1893;
  *((_QWORD *)&v2410 + 1) = 0;
  *(_OWORD *)(v1794 + 3792) = v1894;
  *(_OWORD *)(v1794 + 3824) = v2280;
  *(_OWORD *)(v1794 + 3872) = v1895;
  *(_OWORD *)(v1794 + 3920) = v1896;
  *(_OWORD *)(v1794 + 3936) = v1897;
  *(_OWORD *)(v1794 + 4016) = v1898;
  *(_OWORD *)(v1794 + 4064) = v2249;
  *(_OWORD *)(v1794 + 4128) = v2253;
  *(_OWORD *)(v1794 + 4160) = v2255;
  *(_OWORD *)(v1794 + 4208) = v1899;
  *(_OWORD *)(v1794 + 4256) = v1900;
  *(_OWORD *)(v1794 + 4272) = v1901;
  *(_OWORD *)(v1794 + 4352) = v1902;
  *(_OWORD *)(v1794 + 4400) = v2223;
  v1912 = v2186;
  v1911 = v2187;
  *(_OWORD *)(v1794 + 4424) = v1904;
  *(_OWORD *)(v1794 + 4440) = v1905;
  *(_OWORD *)(v1794 + 4464) = v2228;
  *(_OWORD *)(v1794 + 4496) = v2231;
  *(_OWORD *)(v1794 + 4520) = v1903;
  *(_OWORD *)(v1794 + 4544) = *(_OWORD *)&v2208[1];
  *(_OWORD *)(v1794 + 4592) = v1907;
  *(_QWORD *)&v2420 = 0;
  *(_QWORD *)&v2423 = 0;
  *(_QWORD *)(v1794 + 1992) = &off_24C9B2310;
  *(_OWORD *)(v1794 + 4608) = v1908;
  *(_OWORD *)(v1794 + 4632) = v2215;
  *(_OWORD *)(v1794 + 4664) = v2218;
  *(_OWORD *)(v1794 + 4688) = v1906;
  *(_OWORD *)(v1794 + 4736) = v2197;
  v1913 = v2200;
  *(_OWORD *)(v1794 + 4760) = v2199;
  *(_OWORD *)(v1794 + 4776) = v1913;
  *(_OWORD *)(v1794 + 4800) = v2202;
  *(_OWORD *)(v1794 + 4832) = v2205;
  *(_OWORD *)(v1794 + 4856) = v1909;
  *(_OWORD *)(v1794 + 4880) = *(_OWORD *)&v2182[1];
  *((_QWORD *)&v2423 + 1) = 0;
  *(_OWORD *)(v1794 + 4928) = v1912;
  *(_QWORD *)(v1794 + 4368) = &off_24C9D19C0;
  *(_QWORD *)(v1794 + 4392) = v2222;
  v2221[1] = 0;
  v2221[2] = 0;
  v2222 = 0;
  *(_QWORD *)(v1794 + 4416) = v2224;
  v2223 = 0uLL;
  v2224 = 0;
  v2225 = 0uLL;
  v2226 = 0uLL;
  *(_QWORD *)(v1794 + 4456) = &off_24C9D19F0;
  *(_QWORD *)(v1794 + 4480) = v2229;
  *((_QWORD *)&v2228 + 1) = 0;
  v2229 = 0;
  *(_QWORD *)(v1794 + 4488) = &off_24C9CC9A0;
  *(_QWORD *)(v1794 + 984) = &off_24C9B2310;
  *(_QWORD *)&v2433 = 0;
  v2436 = 0uLL;
  *(_QWORD *)(v1794 + 1824) = &off_24C9B2310;
  *(_QWORD *)(v1794 + 960) = &off_24C9B2520;
  v2093 = 0uLL;
  *(_QWORD *)(v1794 + 1128) = &off_24C9B2520;
  *(_QWORD *)&v2073 = 0;
  v2076 = 0uLL;
  *(_QWORD *)(v1794 + 1152) = &off_24C9B2310;
  v2052[2] = 0;
  v2052[1] = 0;
  v2053 = 0;
  v2054 = 0uLL;
  v2055 = 0;
  v2056 = 0uLL;
  v2057 = 0uLL;
  v2058 = 0uLL;
  v2059 = 0;
  *(_QWORD *)&v2060 = 0;
  *(_QWORD *)(v1794 + 1320) = &off_24C9B2310;
  *((_QWORD *)&v2061 + 1) = 0;
  *(_QWORD *)&v2446 = 0;
  v2449 = 0uLL;
  *(_QWORD *)(v1794 + 1656) = &off_24C9B2310;
  *((_QWORD *)&v2060 + 1) = 0;
  *(_QWORD *)&v2061 = 0;
  *(_QWORD *)(v1794 + 1464) = &off_24C9B2520;
  *(_QWORD *)&v2042 = 0;
  v2045 = 0uLL;
  *(_QWORD *)(v1794 + 1632) = &off_24C9B2520;
  *(_QWORD *)(v1794 + 1488) = &off_24C9B2310;
  *(_QWORD *)(v1794 + 3648) = &off_24C9B2520;
  v2293 = 0uLL;
  *(_QWORD *)(v1794 + 3816) = &off_24C9B2520;
  *(_QWORD *)&v2277 = 0;
  v2280 = 0uLL;
  *(_QWORD *)(v1794 + 3984) = &off_24C9B2520;
  *(_QWORD *)&v2264 = 0;
  v2267 = 0uLL;
  *(_QWORD *)(v1794 + 4008) = &off_24C9B2310;
  v2247[2] = 0;
  v2247[1] = 0;
  v2248 = 0;
  v2249 = 0uLL;
  v2250 = 0;
  v2251 = 0uLL;
  v2252 = 0uLL;
  v2253 = 0uLL;
  *(_QWORD *)(v1794 + 4152) = &off_24C9B2520;
  v2254 = 0;
  *(_QWORD *)&v2255 = 0;
  *(_QWORD *)(v1794 + 4176) = &off_24C9B2310;
  *((_QWORD *)&v2255 + 1) = 0;
  v2256 = 0uLL;
  *(_QWORD *)(v1794 + 4320) = &off_24C9B2520;
  *(_QWORD *)&v2241 = 0;
  v2244 = 0uLL;
  *(_QWORD *)(v1794 + 4344) = &off_24C9B2310;
  *(_QWORD *)&v2228 = 0;
  v2231 = 0uLL;
  *(_QWORD *)(v1794 + 4512) = &off_24C9B2310;
  v2233 = 0uLL;
  *(_QWORD *)(v1794 + 4536) = &off_24C9D1A28;
  *(_QWORD *)(v1794 + 4560) = v2209;
  v2208[1] = 0;
  v2208[2] = 0;
  v2209 = 0;
  *(_QWORD *)(v1794 + 4584) = v2211;
  v2210 = 0uLL;
  v2211 = 0;
  v2212 = 0uLL;
  v2213 = 0uLL;
  *(_QWORD *)(v1794 + 4624) = &off_24C9D1A58;
  *(_QWORD *)(v1794 + 4648) = v2216;
  *((_QWORD *)&v2215 + 1) = 0;
  v2216 = 0;
  *(_QWORD *)(v1794 + 4656) = &off_24C9B2520;
  *(_QWORD *)&v2215 = 0;
  v2218 = 0uLL;
  *(_QWORD *)(v1794 + 4680) = &off_24C9B2310;
  v2220 = 0uLL;
  *(_QWORD *)(v1794 + 4704) = &off_24C9D1A90;
  *(_QWORD *)(v1794 + 4728) = v2196;
  v2195[1] = 0;
  v2195[2] = 0;
  v2196 = 0;
  *(_QWORD *)(v1794 + 4752) = v2198;
  v2197 = 0uLL;
  v2198 = 0;
  v2199 = 0uLL;
  v2200 = 0uLL;
  *(_QWORD *)(v1794 + 4792) = &off_24C9D1AC0;
  *(_QWORD *)(v1794 + 4816) = v2203;
  *((_QWORD *)&v2202 + 1) = 0;
  v2203 = 0;
  *(_QWORD *)(v1794 + 4824) = &off_24C9B2520;
  *(_QWORD *)&v2202 = 0;
  v2205 = 0uLL;
  *(_QWORD *)(v1794 + 4848) = &off_24C9B2310;
  v2207 = 0uLL;
  *(_QWORD *)(v1794 + 4872) = &off_24C9D1AF8;
  *(_QWORD *)(v1794 + 4896) = v2183;
  v2182[1] = 0;
  v2182[2] = 0;
  v2183 = 0;
  *(_QWORD *)(v1794 + 4920) = v2185;
  v2184 = 0uLL;
  v2185 = 0;
  v2186 = 0uLL;
  *(_OWORD *)(v1794 + 4944) = v1911;
  v2187 = 0uLL;
  *(_QWORD *)(v1794 + 4960) = &off_24C9D1B28;
  *(_OWORD *)(v1794 + 4968) = v2189;
  *(_QWORD *)(v1794 + 4984) = v2190;
  *((_QWORD *)&v2189 + 1) = 0;
  v2190 = 0;
  *(_QWORD *)(v1794 + 4992) = &off_24C9B2520;
  *(_OWORD *)(v1794 + 5000) = v2192;
  *(_QWORD *)&v2189 = 0;
  v2192 = 0uLL;
  *(_QWORD *)(v1794 + 5016) = &off_24C9B2310;
  *(_OWORD *)(v1794 + 5024) = v2194;
  v2194 = 0uLL;
  *v2009 = v1794;
  sub_20ED123F4((uint64_t)v2182);
  if (v2012)
  {
    v1914 = (unint64_t *)&v2012->__shared_owners_;
    do
      v1915 = __ldaxr(v1914);
    while (__stlxr(v1915 - 1, v1914));
    if (!v1915)
    {
      ((void (*)(std::__shared_weak_count *))v2012->__on_zero_shared)(v2012);
      std::__shared_weak_count::__release_weak(v2012);
    }
  }
  sub_20ED125D8((uint64_t)v2195);
  if (v2013)
  {
    v1916 = (unint64_t *)&v2013->__shared_owners_;
    do
      v1917 = __ldaxr(v1916);
    while (__stlxr(v1917 - 1, v1916));
    if (!v1917)
    {
      ((void (*)(std::__shared_weak_count *))v2013->__on_zero_shared)(v2013);
      std::__shared_weak_count::__release_weak(v2013);
    }
  }
  sub_20ED127BC((uint64_t)v2208);
  if (v2014)
  {
    v1918 = (unint64_t *)&v2014->__shared_owners_;
    do
      v1919 = __ldaxr(v1918);
    while (__stlxr(v1919 - 1, v1918));
    if (!v1919)
    {
      ((void (*)(std::__shared_weak_count *))v2014->__on_zero_shared)(v2014);
      std::__shared_weak_count::__release_weak(v2014);
    }
  }
  sub_20ED129A0((uint64_t)v2221);
  if (v2016)
  {
    v1920 = (unint64_t *)&v2016->__shared_owners_;
    do
      v1921 = __ldaxr(v1920);
    while (__stlxr(v1921 - 1, v1920));
    if (!v1921)
    {
      ((void (*)(std::__shared_weak_count *))v2016->__on_zero_shared)(v2016);
      std::__shared_weak_count::__release_weak(v2016);
    }
  }
  sub_20ED12B84((uint64_t)v2234);
  if (v2017)
  {
    v1922 = (unint64_t *)&v2017->__shared_owners_;
    do
      v1923 = __ldaxr(v1922);
    while (__stlxr(v1923 - 1, v1922));
    if (!v1923)
    {
      ((void (*)(std::__shared_weak_count *))v2017->__on_zero_shared)(v2017);
      std::__shared_weak_count::__release_weak(v2017);
    }
  }
  sub_20ED12D68((uint64_t)v2247);
  if (v2018)
  {
    v1924 = (unint64_t *)&v2018->__shared_owners_;
    do
      v1925 = __ldaxr(v1924);
    while (__stlxr(v1925 - 1, v1924));
    if (!v1925)
    {
      ((void (*)(std::__shared_weak_count *))v2018->__on_zero_shared)(v2018);
      std::__shared_weak_count::__release_weak(v2018);
    }
  }
  sub_20ED12F4C((uint64_t)v2257);
  if (v2019)
  {
    v1926 = (unint64_t *)&v2019->__shared_owners_;
    do
      v1927 = __ldaxr(v1926);
    while (__stlxr(v1927 - 1, v1926));
    if (!v1927)
    {
      ((void (*)(std::__shared_weak_count *))v2019->__on_zero_shared)(v2019);
      std::__shared_weak_count::__release_weak(v2019);
    }
  }
  sub_20ED13130((uint64_t)v2270);
  if (v2020)
  {
    v1928 = (unint64_t *)&v2020->__shared_owners_;
    do
      v1929 = __ldaxr(v1928);
    while (__stlxr(v1929 - 1, v1928));
    if (!v1929)
    {
      ((void (*)(std::__shared_weak_count *))v2020->__on_zero_shared)(v2020);
      std::__shared_weak_count::__release_weak(v2020);
    }
  }
  sub_20ED13314((uint64_t)v2283);
  if (v2021)
  {
    v1930 = (unint64_t *)&v2021->__shared_owners_;
    do
      v1931 = __ldaxr(v1930);
    while (__stlxr(v1931 - 1, v1930));
    if (!v1931)
    {
      ((void (*)(std::__shared_weak_count *))v2021->__on_zero_shared)(v2021);
      std::__shared_weak_count::__release_weak(v2021);
    }
  }
  sub_20ED134F8((uint64_t)v2296);
  if (v2022)
  {
    v1932 = (unint64_t *)&v2022->__shared_owners_;
    do
      v1933 = __ldaxr(v1932);
    while (__stlxr(v1933 - 1, v1932));
    if (!v1933)
    {
      ((void (*)(std::__shared_weak_count *))v2022->__on_zero_shared)(v2022);
      std::__shared_weak_count::__release_weak(v2022);
    }
  }
  sub_20ED136DC((uint64_t)v2309);
  if (v2023)
  {
    v1934 = (unint64_t *)&v2023->__shared_owners_;
    do
      v1935 = __ldaxr(v1934);
    while (__stlxr(v1935 - 1, v1934));
    if (!v1935)
    {
      ((void (*)(std::__shared_weak_count *))v2023->__on_zero_shared)(v2023);
      std::__shared_weak_count::__release_weak(v2023);
    }
  }
  sub_20ED138C0((uint64_t)v2322);
  if (v2024)
  {
    v1936 = (unint64_t *)&v2024->__shared_owners_;
    do
      v1937 = __ldaxr(v1936);
    while (__stlxr(v1937 - 1, v1936));
    if (!v1937)
    {
      ((void (*)(std::__shared_weak_count *))v2024->__on_zero_shared)(v2024);
      std::__shared_weak_count::__release_weak(v2024);
    }
  }
  sub_20ED13AA4((uint64_t)v2335);
  if (v2025)
  {
    v1938 = (unint64_t *)&v2025->__shared_owners_;
    do
      v1939 = __ldaxr(v1938);
    while (__stlxr(v1939 - 1, v1938));
    if (!v1939)
    {
      ((void (*)(std::__shared_weak_count *))v2025->__on_zero_shared)(v2025);
      std::__shared_weak_count::__release_weak(v2025);
    }
  }
  sub_20ED13C88((uint64_t)v2348);
  if (v2026)
  {
    v1940 = (unint64_t *)&v2026->__shared_owners_;
    do
      v1941 = __ldaxr(v1940);
    while (__stlxr(v1941 - 1, v1940));
    if (!v1941)
    {
      ((void (*)(std::__shared_weak_count *))v2026->__on_zero_shared)(v2026);
      std::__shared_weak_count::__release_weak(v2026);
    }
  }
  sub_20ED13E6C((uint64_t)v2361);
  if (v2027)
  {
    v1942 = (unint64_t *)&v2027->__shared_owners_;
    do
      v1943 = __ldaxr(v1942);
    while (__stlxr(v1943 - 1, v1942));
    if (!v1943)
    {
      ((void (*)(std::__shared_weak_count *))v2027->__on_zero_shared)(v2027);
      std::__shared_weak_count::__release_weak(v2027);
    }
  }
  sub_20ED14050((uint64_t)v2374);
  if (v2028)
  {
    v1944 = (unint64_t *)&v2028->__shared_owners_;
    do
      v1945 = __ldaxr(v1944);
    while (__stlxr(v1945 - 1, v1944));
    if (!v1945)
    {
      ((void (*)(std::__shared_weak_count *))v2028->__on_zero_shared)(v2028);
      std::__shared_weak_count::__release_weak(v2028);
    }
  }
  sub_20ED14234((uint64_t)v2387);
  if (v2029)
  {
    v1946 = (unint64_t *)&v2029->__shared_owners_;
    do
      v1947 = __ldaxr(v1946);
    while (__stlxr(v1947 - 1, v1946));
    if (!v1947)
    {
      ((void (*)(std::__shared_weak_count *))v2029->__on_zero_shared)(v2029);
      std::__shared_weak_count::__release_weak(v2029);
    }
  }
  sub_20ED14418((uint64_t)v2400);
  if (v2030)
  {
    v1948 = (unint64_t *)&v2030->__shared_owners_;
    do
      v1949 = __ldaxr(v1948);
    while (__stlxr(v1949 - 1, v1948));
    if (!v1949)
    {
      ((void (*)(std::__shared_weak_count *))v2030->__on_zero_shared)(v2030);
      std::__shared_weak_count::__release_weak(v2030);
    }
  }
  sub_20ED145FC((uint64_t)v2413);
  if (v2031)
  {
    v1950 = (unint64_t *)&v2031->__shared_owners_;
    do
      v1951 = __ldaxr(v1950);
    while (__stlxr(v1951 - 1, v1950));
    if (!v1951)
    {
      ((void (*)(std::__shared_weak_count *))v2031->__on_zero_shared)(v2031);
      std::__shared_weak_count::__release_weak(v2031);
    }
  }
  sub_20ED147E0((uint64_t)v2426);
  if (v2032)
  {
    v1952 = (unint64_t *)&v2032->__shared_owners_;
    do
      v1953 = __ldaxr(v1952);
    while (__stlxr(v1953 - 1, v1952));
    if (!v1953)
    {
      ((void (*)(std::__shared_weak_count *))v2032->__on_zero_shared)(v2032);
      std::__shared_weak_count::__release_weak(v2032);
    }
  }
  sub_20ED149C4((uint64_t)v2439);
  if (v2033)
  {
    v1954 = (unint64_t *)&v2033->__shared_owners_;
    do
      v1955 = __ldaxr(v1954);
    while (__stlxr(v1955 - 1, v1954));
    if (!v1955)
    {
      ((void (*)(std::__shared_weak_count *))v2033->__on_zero_shared)(v2033);
      std::__shared_weak_count::__release_weak(v2033);
    }
  }
  sub_20ED14BA8((uint64_t)v2035);
  if (v2034)
  {
    v1956 = (unint64_t *)&v2034->__shared_owners_;
    do
      v1957 = __ldaxr(v1956);
    while (__stlxr(v1957 - 1, v1956));
    if (!v1957)
    {
      ((void (*)(std::__shared_weak_count *))v2034->__on_zero_shared)(v2034);
      std::__shared_weak_count::__release_weak(v2034);
    }
  }
  sub_20ED14D8C((uint64_t)v2052);
  v1958 = v2049;
  if (v2049)
  {
    v1959 = (unint64_t *)&v2049->__shared_owners_;
    do
      v1960 = __ldaxr(v1959);
    while (__stlxr(v1960 - 1, v1959));
    if (!v1960)
    {
      ((void (*)(std::__shared_weak_count *))v1958->__on_zero_shared)(v1958);
      std::__shared_weak_count::__release_weak(v1958);
    }
  }
  v1961 = v2051;
  if (v2051)
  {
    v1962 = (unint64_t *)&v2051->__shared_owners_;
    do
      v1963 = __ldaxr(v1962);
    while (__stlxr(v1963 - 1, v1962));
    if (!v1963)
    {
      ((void (*)(std::__shared_weak_count *))v1961->__on_zero_shared)(v1961);
      std::__shared_weak_count::__release_weak(v1961);
    }
  }
  sub_20ED14F70((uint64_t)v2066);
  v1964 = v2063;
  if (v2063)
  {
    v1965 = (unint64_t *)&v2063->__shared_owners_;
    do
      v1966 = __ldaxr(v1965);
    while (__stlxr(v1966 - 1, v1965));
    if (!v1966)
    {
      ((void (*)(std::__shared_weak_count *))v1964->__on_zero_shared)(v1964);
      std::__shared_weak_count::__release_weak(v1964);
    }
  }
  v1967 = v2065;
  if (v2065)
  {
    v1968 = (unint64_t *)&v2065->__shared_owners_;
    do
      v1969 = __ldaxr(v1968);
    while (__stlxr(v1969 - 1, v1968));
    if (!v1969)
    {
      ((void (*)(std::__shared_weak_count *))v1967->__on_zero_shared)(v1967);
      std::__shared_weak_count::__release_weak(v1967);
    }
  }
  sub_20ED15154((uint64_t)v2083);
  v1970 = v2080;
  if (v2080)
  {
    v1971 = (unint64_t *)&v2080->__shared_owners_;
    do
      v1972 = __ldaxr(v1971);
    while (__stlxr(v1972 - 1, v1971));
    if (!v1972)
    {
      ((void (*)(std::__shared_weak_count *))v1970->__on_zero_shared)(v1970);
      std::__shared_weak_count::__release_weak(v1970);
    }
  }
  v1973 = v2082;
  if (v2082)
  {
    v1974 = (unint64_t *)&v2082->__shared_owners_;
    do
      v1975 = __ldaxr(v1974);
    while (__stlxr(v1975 - 1, v1974));
    if (!v1975)
    {
      ((void (*)(std::__shared_weak_count *))v1973->__on_zero_shared)(v1973);
      std::__shared_weak_count::__release_weak(v1973);
    }
  }
  sub_20ED15338((uint64_t)__src);
  v1976 = v2097;
  if (v2097)
  {
    v1977 = (unint64_t *)&v2097->__shared_owners_;
    do
      v1978 = __ldaxr(v1977);
    while (__stlxr(v1978 - 1, v1977));
    if (!v1978)
    {
      ((void (*)(std::__shared_weak_count *))v1976->__on_zero_shared)(v1976);
      std::__shared_weak_count::__release_weak(v1976);
    }
  }
  v1979 = v2099;
  if (v2099)
  {
    v1980 = (unint64_t *)&v2099->__shared_owners_;
    do
      v1981 = __ldaxr(v1980);
    while (__stlxr(v1981 - 1, v1980));
    if (!v1981)
    {
      ((void (*)(std::__shared_weak_count *))v1979->__on_zero_shared)(v1979);
      std::__shared_weak_count::__release_weak(v1979);
    }
  }
  sub_20ED1551C((uint64_t)__dst);
  v1982 = v2114;
  if (v2114)
  {
    v1983 = (unint64_t *)&v2114->__shared_owners_;
    do
      v1984 = __ldaxr(v1983);
    while (__stlxr(v1984 - 1, v1983));
    if (!v1984)
    {
      ((void (*)(std::__shared_weak_count *))v1982->__on_zero_shared)(v1982);
      std::__shared_weak_count::__release_weak(v1982);
    }
  }
  v1985 = v2116;
  if (v2116)
  {
    v1986 = (unint64_t *)&v2116->__shared_owners_;
    do
      v1987 = __ldaxr(v1986);
    while (__stlxr(v1987 - 1, v1986));
    if (!v1987)
    {
      ((void (*)(std::__shared_weak_count *))v1985->__on_zero_shared)(v1985);
      std::__shared_weak_count::__release_weak(v1985);
    }
  }
  sub_20ED15700((uint64_t)__p);
  v1988 = v2131;
  if (v2131)
  {
    v1989 = (unint64_t *)&v2131->__shared_owners_;
    do
      v1990 = __ldaxr(v1989);
    while (__stlxr(v1990 - 1, v1989));
    if (!v1990)
    {
      ((void (*)(std::__shared_weak_count *))v1988->__on_zero_shared)(v1988);
      std::__shared_weak_count::__release_weak(v1988);
    }
  }
  v1991 = v2133;
  if (v2133)
  {
    v1992 = (unint64_t *)&v2133->__shared_owners_;
    do
      v1993 = __ldaxr(v1992);
    while (__stlxr(v1993 - 1, v1992));
    if (!v1993)
    {
      ((void (*)(std::__shared_weak_count *))v1991->__on_zero_shared)(v1991);
      std::__shared_weak_count::__release_weak(v1991);
    }
  }
  sub_20ED158E4((uint64_t)v2151);
  v1994 = v2148;
  if (v2148)
  {
    v1995 = (unint64_t *)&v2148->__shared_owners_;
    do
      v1996 = __ldaxr(v1995);
    while (__stlxr(v1996 - 1, v1995));
    if (!v1996)
    {
      ((void (*)(std::__shared_weak_count *))v1994->__on_zero_shared)(v1994);
      std::__shared_weak_count::__release_weak(v1994);
    }
  }
  v1997 = v2150;
  if (v2150)
  {
    v1998 = (unint64_t *)&v2150->__shared_owners_;
    do
      v1999 = __ldaxr(v1998);
    while (__stlxr(v1999 - 1, v1998));
    if (!v1999)
    {
      ((void (*)(std::__shared_weak_count *))v1997->__on_zero_shared)(v1997);
      std::__shared_weak_count::__release_weak(v1997);
    }
  }
  sub_20ED15AC8((uint64_t)&v2168);
  v2000 = v2165;
  if (v2165)
  {
    v2001 = (unint64_t *)&v2165->__shared_owners_;
    do
      v2002 = __ldaxr(v2001);
    while (__stlxr(v2002 - 1, v2001));
    if (!v2002)
    {
      ((void (*)(std::__shared_weak_count *))v2000->__on_zero_shared)(v2000);
      std::__shared_weak_count::__release_weak(v2000);
    }
  }
  v2003 = v2167;
  if (v2167)
  {
    v2004 = (unint64_t *)&v2167->__shared_owners_;
    do
      v2005 = __ldaxr(v2004);
    while (__stlxr(v2005 - 1, v2004));
    if (!v2005)
    {
      ((void (*)(std::__shared_weak_count *))v2003->__on_zero_shared)(v2003);
      std::__shared_weak_count::__release_weak(v2003);
    }
  }
}

void sub_20EC8B04C(_Unwind_Exception *a1)
{
  if (SLOBYTE(STACK[0x1AF7]) < 0)
    operator delete((void *)STACK[0x1AE0]);
  sub_20E86665C((uint64_t)&STACK[0x1A50]);
  sub_20E86665C((uint64_t)&STACK[0x1A60]);
  if (SLOBYTE(STACK[0x1A87]) < 0)
    operator delete((void *)STACK[0x1A70]);
  if (SLOBYTE(STACK[0x1AA7]) < 0)
    operator delete((void *)STACK[0x1A90]);
  sub_20E86665C((uint64_t)&STACK[0x200]);
  sub_20E86665C((uint64_t)&STACK[0x210]);
  sub_20ED125D8((uint64_t)&STACK[0xC90]);
  sub_20E86665C((uint64_t)&STACK[0x220]);
  sub_20E86665C((uint64_t)&STACK[0x230]);
  sub_20ED127BC((uint64_t)&STACK[0xD40]);
  sub_20E86665C((uint64_t)&STACK[0x240]);
  sub_20E86665C((uint64_t)&STACK[0x250]);
  sub_20ED129A0((uint64_t)&STACK[0xDF0]);
  sub_20E86665C((uint64_t)&STACK[0x260]);
  sub_20E86665C((uint64_t)&STACK[0x270]);
  sub_20ED12B84((uint64_t)&STACK[0xEA0]);
  sub_20E86665C((uint64_t)&STACK[0x280]);
  sub_20E86665C((uint64_t)&STACK[0x290]);
  sub_20ED12D68((uint64_t)&STACK[0xF50]);
  sub_20E86665C((uint64_t)&STACK[0x2A0]);
  sub_20E86665C((uint64_t)&STACK[0x2B0]);
  sub_20ED12F4C((uint64_t)&STACK[0x1000]);
  sub_20E86665C((uint64_t)&STACK[0x2C0]);
  sub_20E86665C((uint64_t)&STACK[0x2D0]);
  sub_20ED13130((uint64_t)&STACK[0x10B0]);
  sub_20E86665C((uint64_t)&STACK[0x2E0]);
  sub_20E86665C((uint64_t)&STACK[0x2F0]);
  sub_20ED13314((uint64_t)&STACK[0x1160]);
  sub_20E86665C((uint64_t)&STACK[0x300]);
  sub_20E86665C((uint64_t)&STACK[0x310]);
  sub_20ED134F8((uint64_t)&STACK[0x1210]);
  sub_20E86665C((uint64_t)&STACK[0x320]);
  sub_20E86665C((uint64_t)&STACK[0x330]);
  sub_20ED136DC((uint64_t)&STACK[0x12C0]);
  sub_20E86665C((uint64_t)&STACK[0x340]);
  sub_20E86665C((uint64_t)&STACK[0x350]);
  sub_20ED138C0((uint64_t)&STACK[0x1370]);
  sub_20E86665C((uint64_t)&STACK[0x360]);
  sub_20E86665C((uint64_t)&STACK[0x370]);
  sub_20ED13AA4((uint64_t)&STACK[0x1420]);
  sub_20E86665C((uint64_t)&STACK[0x380]);
  sub_20E86665C((uint64_t)&STACK[0x390]);
  sub_20ED13C88((uint64_t)&STACK[0x14D0]);
  sub_20E86665C((uint64_t)&STACK[0x3A0]);
  sub_20E86665C((uint64_t)&STACK[0x3B0]);
  sub_20ED13E6C((uint64_t)&STACK[0x1580]);
  sub_20E86665C((uint64_t)&STACK[0x3C0]);
  sub_20E86665C((uint64_t)&STACK[0x3D0]);
  sub_20ED14050((uint64_t)&STACK[0x1630]);
  sub_20E86665C((uint64_t)&STACK[0x3E0]);
  sub_20E86665C((uint64_t)&STACK[0x3F0]);
  sub_20ED14234((uint64_t)&STACK[0x16E0]);
  sub_20E86665C((uint64_t)&STACK[0x400]);
  sub_20E86665C((uint64_t)&STACK[0x410]);
  sub_20ED14418((uint64_t)&STACK[0x1790]);
  sub_20E86665C((uint64_t)&STACK[0x420]);
  sub_20E86665C((uint64_t)&STACK[0x430]);
  sub_20ED145FC((uint64_t)&STACK[0x1840]);
  sub_20E86665C((uint64_t)&STACK[0x440]);
  sub_20E86665C((uint64_t)&STACK[0x450]);
  sub_20ED147E0((uint64_t)&STACK[0x18F0]);
  sub_20E86665C((uint64_t)&STACK[0x460]);
  sub_20E86665C((uint64_t)&STACK[0x470]);
  sub_20ED149C4((uint64_t)&STACK[0x19A0]);
  sub_20E86665C((uint64_t)&STACK[0x480]);
  sub_20E86665C((uint64_t)&STACK[0x490]);
  sub_20ED14BA8((uint64_t)&STACK[0x4C0]);
  sub_20E86665C((uint64_t)&STACK[0x4A0]);
  sub_20E86665C((uint64_t)&STACK[0x4B0]);
  sub_20ED14D8C((uint64_t)&STACK[0x590]);
  sub_20E86665C((uint64_t)&STACK[0x570]);
  sub_20E86665C((uint64_t)&STACK[0x580]);
  sub_20ED14F70((uint64_t)&STACK[0x660]);
  sub_20E86665C((uint64_t)&STACK[0x640]);
  sub_20E86665C((uint64_t)&STACK[0x650]);
  sub_20ED15154((uint64_t)&STACK[0x730]);
  sub_20E86665C((uint64_t)&STACK[0x710]);
  sub_20E86665C((uint64_t)&STACK[0x720]);
  sub_20ED15338((uint64_t)&STACK[0x800]);
  sub_20E86665C((uint64_t)&STACK[0x7E0]);
  sub_20E86665C((uint64_t)&STACK[0x7F0]);
  sub_20ED1551C((uint64_t)&STACK[0x8D0]);
  sub_20E86665C((uint64_t)&STACK[0x8B0]);
  sub_20E86665C((uint64_t)&STACK[0x8C0]);
  sub_20ED15700((uint64_t)&STACK[0x9A0]);
  sub_20E86665C((uint64_t)&STACK[0x980]);
  sub_20E86665C((uint64_t)&STACK[0x990]);
  sub_20ED158E4((uint64_t)&STACK[0xA70]);
  sub_20E86665C((uint64_t)&STACK[0xA50]);
  sub_20E86665C((uint64_t)&STACK[0xA60]);
  sub_20ED15AC8((uint64_t)&STACK[0xB38]);
  sub_20E86665C((uint64_t)&STACK[0xB18]);
  sub_20E86665C((uint64_t)&STACK[0xB28]);
  _Unwind_Resume(a1);
}

void sub_20EC8C098()
{
  int v0;
  void *v1;
  uint64_t v2;

  sub_20E86665C(v2 - 208);
  if (v0 < 0)
    operator delete(v1);
  JUMPOUT(0x20EC8BD3CLL);
}

void sub_20EC8C0B4()
{
  uint64_t v0;
  std::__shared_weak_count *v1;
  uint64_t v2;

  if (v1)
  {
    std::__shared_weak_count::__release_weak(v1);
    sub_20E86665C(v2);
    sub_20E86665C(v0);
    if ((SLOBYTE(STACK[0xD77]) & 0x80000000) == 0)
    {
LABEL_3:
      if ((SLOBYTE(STACK[0xD5F]) & 0x80000000) == 0)
      {
LABEL_5:
        sub_20E86665C((uint64_t)&STACK[0x1A70]);
        sub_20E86665C((uint64_t)&STACK[0x1A90]);
        JUMPOUT(0x20EC8C1BCLL);
      }
LABEL_4:
      operator delete((void *)STACK[0xD48]);
      goto LABEL_5;
    }
  }
  else
  {
    sub_20E86665C(v2);
    sub_20E86665C(v0);
    if ((SLOBYTE(STACK[0xD77]) & 0x80000000) == 0)
      goto LABEL_3;
  }
  operator delete((void *)STACK[0xD60]);
  if ((SLOBYTE(STACK[0xD5F]) & 0x80000000) == 0)
    goto LABEL_5;
  goto LABEL_4;
}

void sub_20EC8C13C()
{
  uint64_t v0;

  (*(void (**)(uint64_t))(*(_QWORD *)v0 + 8))(v0);
  sub_20E86665C((uint64_t)&STACK[0x1A90]);
  JUMPOUT(0x20EC8C1B0);
}

void sub_20EC8C23C()
{
  void *v0;
  int v1;

  sub_20E86665C((uint64_t)&STACK[0x1A70]);
  if (v1 < 0)
    operator delete(v0);
  JUMPOUT(0x20EC8C1BCLL);
}

void sub_20EC8C25C()
{
  uint64_t v0;
  std::__shared_weak_count *v1;
  uint64_t v2;

  if (v1)
  {
    std::__shared_weak_count::__release_weak(v1);
    sub_20E86665C(v0);
    sub_20E86665C(v2);
    if ((SLOBYTE(STACK[0xE27]) & 0x80000000) == 0)
    {
LABEL_3:
      if ((SLOBYTE(STACK[0xE0F]) & 0x80000000) == 0)
      {
LABEL_5:
        sub_20E86665C((uint64_t)&STACK[0x1A90]);
        sub_20E86665C((uint64_t)&STACK[0x1AC0]);
        JUMPOUT(0x20EC8C378);
      }
LABEL_4:
      operator delete((void *)STACK[0xDF8]);
      goto LABEL_5;
    }
  }
  else
  {
    sub_20E86665C(v0);
    sub_20E86665C(v2);
    if ((SLOBYTE(STACK[0xE27]) & 0x80000000) == 0)
      goto LABEL_3;
  }
  operator delete((void *)STACK[0xE10]);
  if ((SLOBYTE(STACK[0xE0F]) & 0x80000000) == 0)
    goto LABEL_5;
  goto LABEL_4;
}

void sub_20EC8C2E8()
{
  uint64_t v0;

  (*(void (**)(uint64_t))(*(_QWORD *)v0 + 8))(v0);
  sub_20E86665C((uint64_t)&STACK[0x1AC0]);
  JUMPOUT(0x20EC8C36CLL);
}

void sub_20EC8C318()
{
  JUMPOUT(0x20EC8C324);
}

void sub_20EC8C3DC()
{
  void *v0;
  int v1;

  sub_20E86665C((uint64_t)&STACK[0x1A90]);
  if (v1 < 0)
    operator delete(v0);
  JUMPOUT(0x20EC8C378);
}

void sub_20EC8C3FC()
{
  std::__shared_weak_count *v0;
  uint64_t v1;
  uint64_t v2;

  if (v0)
  {
    std::__shared_weak_count::__release_weak(v0);
    sub_20E86665C(v2);
    sub_20E86665C(v1);
    if ((SLOBYTE(STACK[0xED7]) & 0x80000000) == 0)
    {
LABEL_3:
      if ((SLOBYTE(STACK[0xEBF]) & 0x80000000) == 0)
      {
LABEL_5:
        sub_20E86665C((uint64_t)&STACK[0x1AC0]);
        sub_20E86665C((uint64_t)&STACK[0x1AE0]);
        JUMPOUT(0x20EC8C504);
      }
LABEL_4:
      operator delete((void *)STACK[0xEA8]);
      goto LABEL_5;
    }
  }
  else
  {
    sub_20E86665C(v2);
    sub_20E86665C(v1);
    if ((SLOBYTE(STACK[0xED7]) & 0x80000000) == 0)
      goto LABEL_3;
  }
  operator delete((void *)STACK[0xEC0]);
  if ((SLOBYTE(STACK[0xEBF]) & 0x80000000) == 0)
    goto LABEL_5;
  goto LABEL_4;
}

void sub_20EC8C484()
{
  uint64_t v0;

  (*(void (**)(uint64_t))(*(_QWORD *)v0 + 8))(v0);
  sub_20E86665C((uint64_t)&STACK[0x1AE0]);
  JUMPOUT(0x20EC8C4F8);
}

void sub_20EC8C56C()
{
  void *v0;
  int v1;

  sub_20E86665C((uint64_t)&STACK[0x1AC0]);
  if (v1 < 0)
    operator delete(v0);
  JUMPOUT(0x20EC8C504);
}

void sub_20EC8C58C()
{
  sub_20E86665C((uint64_t)&STACK[0x1AE0]);
  sub_20E86665C((uint64_t)&STACK[0xBE0]);
  JUMPOUT(0x20EC8C624);
}

void sub_20EC8C5AC()
{
  uint64_t v0;

  (*(void (**)(uint64_t))(*(_QWORD *)v0 + 8))(v0);
  sub_20E86665C((uint64_t)&STACK[0xBE0]);
  JUMPOUT(0x20EC8C618);
}

void sub_20EC8C68C()
{
  void *v0;
  int v1;

  sub_20E86665C((uint64_t)&STACK[0x1AE0]);
  if (v1 < 0)
    operator delete(v0);
  JUMPOUT(0x20EC8C624);
}

void sub_20EC8C6AC()
{
  std::__shared_weak_count *v0;
  uint64_t v1;
  uint64_t v2;

  if (v0)
    std::__shared_weak_count::__release_weak(v0);
  sub_20E86665C(v1);
  sub_20E86665C(v2);
  if (SLOBYTE(STACK[0x1037]) < 0)
    operator delete((void *)STACK[0x1020]);
  if (SLOBYTE(STACK[0x101F]) < 0)
    operator delete((void *)STACK[0x1008]);
  sub_20E86665C((uint64_t)&STACK[0xBE0]);
  sub_20E86665C((uint64_t)&STACK[0xC90]);
  JUMPOUT(0x20EC8C780);
}

void sub_20EC8C70C()
{
  uint64_t v0;

  (*(void (**)(uint64_t))(*(_QWORD *)v0 + 8))(v0);
  sub_20E86665C((uint64_t)&STACK[0xC90]);
  JUMPOUT(0x20EC8C778);
}

void sub_20EC8C7E8()
{
  void *v0;
  int v1;

  sub_20E86665C((uint64_t)&STACK[0xBE0]);
  if (v1 < 0)
    operator delete(v0);
  JUMPOUT(0x20EC8C780);
}

void sub_20EC8C804()
{
  std::__shared_weak_count *v0;
  uint64_t v1;
  uint64_t v2;

  if (v0)
    std::__shared_weak_count::__release_weak(v0);
  sub_20E86665C(v2);
  sub_20E86665C(v1);
  if (SLOBYTE(STACK[0x10E7]) < 0)
    operator delete((void *)STACK[0x10D0]);
  if (SLOBYTE(STACK[0x10CF]) < 0)
    operator delete((void *)STACK[0x10B8]);
  sub_20E86665C((uint64_t)&STACK[0xC90]);
  sub_20E86665C((uint64_t)&STACK[0xD40]);
  JUMPOUT(0x20EC8C8DCLL);
}

void sub_20EC8C868()
{
  uint64_t v0;

  (*(void (**)(uint64_t))(*(_QWORD *)v0 + 8))(v0);
  sub_20E86665C((uint64_t)&STACK[0xD40]);
  JUMPOUT(0x20EC8C8D4);
}

void sub_20EC8C948()
{
  void *v0;
  int v1;

  sub_20E86665C((uint64_t)&STACK[0xC90]);
  if (v1 < 0)
    operator delete(v0);
  JUMPOUT(0x20EC8C8DCLL);
}

void sub_20EC8C964()
{
  std::__shared_weak_count *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  if (v0)
  {
    std::__shared_weak_count::__release_weak(v0);
    sub_20E86665C(v2);
    sub_20E86665C(v3);
    if ((*(char *)(v1 + 231) & 0x80000000) == 0)
    {
LABEL_3:
      if ((SLOBYTE(STACK[0x117F]) & 0x80000000) == 0)
      {
LABEL_5:
        sub_20E86665C((uint64_t)&STACK[0xD40]);
        sub_20E86665C((uint64_t)&STACK[0xDF0]);
        JUMPOUT(0x20EC8CA60);
      }
LABEL_4:
      operator delete((void *)STACK[0x1168]);
      goto LABEL_5;
    }
  }
  else
  {
    sub_20E86665C(v2);
    sub_20E86665C(v3);
    if ((*(char *)(v1 + 231) & 0x80000000) == 0)
      goto LABEL_3;
  }
  operator delete((void *)STACK[0x1180]);
  if ((SLOBYTE(STACK[0x117F]) & 0x80000000) == 0)
    goto LABEL_5;
  goto LABEL_4;
}

void sub_20EC8C9EC()
{
  uint64_t v0;

  (*(void (**)(uint64_t))(*(_QWORD *)v0 + 8))(v0);
  sub_20E86665C((uint64_t)&STACK[0xDF0]);
  JUMPOUT(0x20EC8CA58);
}

void sub_20EC8CAEC()
{
  void *v0;
  int v1;

  sub_20E86665C((uint64_t)&STACK[0xD40]);
  if (v1 < 0)
    operator delete(v0);
  JUMPOUT(0x20EC8CA60);
}

void sub_20EC8CB08()
{
  std::__shared_weak_count *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  if (v0)
  {
    std::__shared_weak_count::__release_weak(v0);
    sub_20E86665C(v2);
    sub_20E86665C(v3);
    if ((*(char *)(v1 + 231) & 0x80000000) == 0)
    {
LABEL_3:
      if ((*(char *)(v1 + 207) & 0x80000000) == 0)
      {
LABEL_5:
        sub_20E86665C((uint64_t)&STACK[0xDF0]);
        sub_20E86665C((uint64_t)&STACK[0xEA0]);
        JUMPOUT(0x20EC8CBFCLL);
      }
LABEL_4:
      operator delete((void *)STACK[0x1218]);
      goto LABEL_5;
    }
  }
  else
  {
    sub_20E86665C(v2);
    sub_20E86665C(v3);
    if ((*(char *)(v1 + 231) & 0x80000000) == 0)
      goto LABEL_3;
  }
  operator delete((void *)STACK[0x1230]);
  if ((*(char *)(v1 + 207) & 0x80000000) == 0)
    goto LABEL_5;
  goto LABEL_4;
}

void sub_20EC8CB88()
{
  uint64_t v0;

  (*(void (**)(uint64_t))(*(_QWORD *)v0 + 8))(v0);
  sub_20E86665C((uint64_t)&STACK[0xEA0]);
  JUMPOUT(0x20EC8CBF4);
}

void sub_20EC8CC90()
{
  void *v0;
  int v1;

  sub_20E86665C((uint64_t)&STACK[0xDF0]);
  if (v1 < 0)
    operator delete(v0);
  JUMPOUT(0x20EC8CBFCLL);
}

void sub_20EC8CCAC()
{
  std::__shared_weak_count *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  if (v0)
  {
    std::__shared_weak_count::__release_weak(v0);
    sub_20E86665C(v2);
    sub_20E86665C(v3);
    if ((*(char *)(v1 + 231) & 0x80000000) == 0)
    {
LABEL_3:
      if ((*(char *)(v1 + 207) & 0x80000000) == 0)
      {
LABEL_5:
        sub_20E86665C((uint64_t)&STACK[0xEA0]);
        sub_20E86665C((uint64_t)&STACK[0xF50]);
        JUMPOUT(0x20EC8CDB8);
      }
LABEL_4:
      operator delete((void *)STACK[0x12C8]);
      goto LABEL_5;
    }
  }
  else
  {
    sub_20E86665C(v2);
    sub_20E86665C(v3);
    if ((*(char *)(v1 + 231) & 0x80000000) == 0)
      goto LABEL_3;
  }
  operator delete((void *)STACK[0x12E0]);
  if ((*(char *)(v1 + 207) & 0x80000000) == 0)
    goto LABEL_5;
  goto LABEL_4;
}

void sub_20EC8CD34()
{
  uint64_t v0;

  (*(void (**)(uint64_t))(*(_QWORD *)v0 + 8))(v0);
  sub_20E86665C((uint64_t)&STACK[0xF50]);
  JUMPOUT(0x20EC8CDB0);
}

void sub_20EC8CD60()
{
  JUMPOUT(0x20EC8CD6CLL);
}

void sub_20EC8CE24()
{
  void *v0;
  int v1;

  sub_20E86665C((uint64_t)&STACK[0xEA0]);
  if (v1 < 0)
    operator delete(v0);
  JUMPOUT(0x20EC8CDB8);
}

void sub_20EC8CE48()
{
  std::__shared_weak_count *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  if (v0)
  {
    std::__shared_weak_count::__release_weak(v0);
    sub_20E86665C(v2);
    sub_20E86665C(v3);
    if ((*(char *)(v1 + 231) & 0x80000000) == 0)
    {
LABEL_3:
      if ((*(char *)(v1 + 207) & 0x80000000) == 0)
      {
LABEL_5:
        sub_20E86665C((uint64_t)&STACK[0xF50]);
        sub_20E86665C((uint64_t)&STACK[0x1000]);
        JUMPOUT(0x20EC8CF3CLL);
      }
LABEL_4:
      operator delete((void *)STACK[0x1378]);
      goto LABEL_5;
    }
  }
  else
  {
    sub_20E86665C(v2);
    sub_20E86665C(v3);
    if ((*(char *)(v1 + 231) & 0x80000000) == 0)
      goto LABEL_3;
  }
  operator delete((void *)STACK[0x1390]);
  if ((*(char *)(v1 + 207) & 0x80000000) == 0)
    goto LABEL_5;
  goto LABEL_4;
}

void sub_20EC8CEC8()
{
  uint64_t v0;

  (*(void (**)(uint64_t))(*(_QWORD *)v0 + 8))(v0);
  sub_20E86665C((uint64_t)&STACK[0x1000]);
  JUMPOUT(0x20EC8CF34);
}

void sub_20EC8CFB4()
{
  void *v0;
  int v1;

  sub_20E86665C((uint64_t)&STACK[0xF50]);
  if (v1 < 0)
    operator delete(v0);
  JUMPOUT(0x20EC8CF3CLL);
}

void sub_20EC8CFD0()
{
  std::__shared_weak_count *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  if (v0)
  {
    std::__shared_weak_count::__release_weak(v0);
    sub_20E86665C(v3);
    sub_20E86665C(v2);
    if ((*(char *)(v1 + 231) & 0x80000000) == 0)
    {
LABEL_3:
      if ((*(char *)(v1 + 207) & 0x80000000) == 0)
      {
LABEL_5:
        sub_20E86665C((uint64_t)&STACK[0x1000]);
        sub_20E86665C((uint64_t)&STACK[0x10B0]);
        JUMPOUT(0x20EC8D0E4);
      }
LABEL_4:
      operator delete((void *)STACK[0x1428]);
      goto LABEL_5;
    }
  }
  else
  {
    sub_20E86665C(v3);
    sub_20E86665C(v2);
    if ((*(char *)(v1 + 231) & 0x80000000) == 0)
      goto LABEL_3;
  }
  operator delete((void *)STACK[0x1440]);
  if ((*(char *)(v1 + 207) & 0x80000000) == 0)
    goto LABEL_5;
  goto LABEL_4;
}

void sub_20EC8D05C()
{
  uint64_t v0;

  (*(void (**)(uint64_t))(*(_QWORD *)v0 + 8))(v0);
  sub_20E86665C((uint64_t)&STACK[0x10B0]);
  JUMPOUT(0x20EC8D0DCLL);
}

void sub_20EC8D088()
{
  JUMPOUT(0x20EC8D094);
}

void sub_20EC8D160()
{
  void *v0;
  int v1;

  sub_20E86665C((uint64_t)&STACK[0x1000]);
  if (v1 < 0)
    operator delete(v0);
  JUMPOUT(0x20EC8D0E4);
}

void sub_20EC8D184()
{
  std::__shared_weak_count *v0;
  uint64_t v1;
  uint64_t v2;

  if (v0)
  {
    std::__shared_weak_count::__release_weak(v0);
    sub_20E86665C(v1);
    sub_20E86665C(v2);
    if ((SLOBYTE(STACK[0x1507]) & 0x80000000) == 0)
    {
LABEL_3:
      if ((SLOBYTE(STACK[0x14EF]) & 0x80000000) == 0)
      {
LABEL_5:
        sub_20E86665C((uint64_t)&STACK[0x10B0]);
        sub_20E86665C((uint64_t)&STACK[0x1160]);
        JUMPOUT(0x20EC8D290);
      }
LABEL_4:
      operator delete((void *)STACK[0x14D8]);
      goto LABEL_5;
    }
  }
  else
  {
    sub_20E86665C(v1);
    sub_20E86665C(v2);
    if ((SLOBYTE(STACK[0x1507]) & 0x80000000) == 0)
      goto LABEL_3;
  }
  operator delete((void *)STACK[0x14F0]);
  if ((SLOBYTE(STACK[0x14EF]) & 0x80000000) == 0)
    goto LABEL_5;
  goto LABEL_4;
}

void sub_20EC8D214()
{
  uint64_t v0;

  (*(void (**)(uint64_t))(*(_QWORD *)v0 + 8))(v0);
  sub_20E86665C((uint64_t)&STACK[0x1160]);
  JUMPOUT(0x20EC8D284);
}

void sub_20EC8D318()
{
  void *v0;
  int v1;

  sub_20E86665C((uint64_t)&STACK[0x10B0]);
  if (v1 < 0)
    operator delete(v0);
  JUMPOUT(0x20EC8D290);
}

void sub_20EC8D338()
{
  std::__shared_weak_count *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  if (v0)
  {
    std::__shared_weak_count::__release_weak(v0);
    sub_20E86665C(v2);
    sub_20E86665C(v3);
    if ((*(char *)(v1 + 231) & 0x80000000) == 0)
    {
LABEL_3:
      if ((*(char *)(v1 + 207) & 0x80000000) == 0)
      {
LABEL_5:
        sub_20E86665C((uint64_t)&STACK[0x1160]);
        sub_20E86665C((uint64_t)&STACK[0x1210]);
        JUMPOUT(0x20EC8D454);
      }
LABEL_4:
      operator delete((void *)STACK[0x1588]);
      goto LABEL_5;
    }
  }
  else
  {
    sub_20E86665C(v2);
    sub_20E86665C(v3);
    if ((*(char *)(v1 + 231) & 0x80000000) == 0)
      goto LABEL_3;
  }
  operator delete((void *)STACK[0x15A0]);
  if ((*(char *)(v1 + 207) & 0x80000000) == 0)
    goto LABEL_5;
  goto LABEL_4;
}

void sub_20EC8D3C8()
{
  uint64_t v0;

  (*(void (**)(uint64_t))(*(_QWORD *)v0 + 8))(v0);
  sub_20E86665C((uint64_t)&STACK[0x1210]);
  JUMPOUT(0x20EC8D448);
}

void sub_20EC8D3F4()
{
  JUMPOUT(0x20EC8D400);
}

void sub_20EC8D4D0()
{
  void *v0;
  int v1;

  sub_20E86665C((uint64_t)&STACK[0x1160]);
  if (v1 < 0)
    operator delete(v0);
  JUMPOUT(0x20EC8D454);
}

void sub_20EC8D4F8()
{
  std::__shared_weak_count *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  if (v0)
  {
    std::__shared_weak_count::__release_weak(v0);
    sub_20E86665C(v2);
    sub_20E86665C(v3);
    if ((*(char *)(v1 + 231) & 0x80000000) == 0)
    {
LABEL_3:
      if ((*(char *)(v1 + 207) & 0x80000000) == 0)
      {
LABEL_5:
        sub_20E86665C((uint64_t)&STACK[0x1210]);
        sub_20E86665C((uint64_t)&STACK[0x12C0]);
        JUMPOUT(0x20EC8D614);
      }
LABEL_4:
      operator delete((void *)STACK[0x1638]);
      goto LABEL_5;
    }
  }
  else
  {
    sub_20E86665C(v2);
    sub_20E86665C(v3);
    if ((*(char *)(v1 + 231) & 0x80000000) == 0)
      goto LABEL_3;
  }
  operator delete((void *)STACK[0x1650]);
  if ((*(char *)(v1 + 207) & 0x80000000) == 0)
    goto LABEL_5;
  goto LABEL_4;
}

void sub_20EC8D588()
{
  uint64_t v0;

  (*(void (**)(uint64_t))(*(_QWORD *)v0 + 8))(v0);
  sub_20E86665C((uint64_t)&STACK[0x12C0]);
  JUMPOUT(0x20EC8D608);
}

void sub_20EC8D5B4()
{
  JUMPOUT(0x20EC8D5C0);
}

void sub_20EC8D69C()
{
  void *v0;
  int v1;

  sub_20E86665C((uint64_t)&STACK[0x1210]);
  if (v1 < 0)
    operator delete(v0);
  JUMPOUT(0x20EC8D614);
}

void sub_20EC8D6C4()
{
  std::__shared_weak_count *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  if (v0)
  {
    std::__shared_weak_count::__release_weak(v0);
    sub_20E86665C(v2);
    sub_20E86665C(v3);
    if ((*(char *)(v1 + 231) & 0x80000000) == 0)
    {
LABEL_3:
      if ((*(char *)(v1 + 207) & 0x80000000) == 0)
      {
LABEL_5:
        sub_20E86665C((uint64_t)&STACK[0x12C0]);
        sub_20E86665C((uint64_t)&STACK[0x1370]);
        JUMPOUT(0x20EC8D7E0);
      }
LABEL_4:
      operator delete((void *)STACK[0x16E8]);
      goto LABEL_5;
    }
  }
  else
  {
    sub_20E86665C(v2);
    sub_20E86665C(v3);
    if ((*(char *)(v1 + 231) & 0x80000000) == 0)
      goto LABEL_3;
  }
  operator delete((void *)STACK[0x1700]);
  if ((*(char *)(v1 + 207) & 0x80000000) == 0)
    goto LABEL_5;
  goto LABEL_4;
}

void sub_20EC8D754()
{
  uint64_t v0;

  (*(void (**)(uint64_t))(*(_QWORD *)v0 + 8))(v0);
  sub_20E86665C((uint64_t)&STACK[0x1370]);
  JUMPOUT(0x20EC8D7D4);
}

void sub_20EC8D780()
{
  JUMPOUT(0x20EC8D78CLL);
}

void sub_20EC8D868()
{
  void *v0;
  int v1;

  sub_20E86665C((uint64_t)&STACK[0x12C0]);
  if (v1 < 0)
    operator delete(v0);
  JUMPOUT(0x20EC8D7E0);
}

void sub_20EC8D890()
{
  std::__shared_weak_count *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  if (v0)
  {
    std::__shared_weak_count::__release_weak(v0);
    sub_20E86665C(v2);
    sub_20E86665C(v3);
    if ((*(char *)(v1 + 231) & 0x80000000) == 0)
    {
LABEL_3:
      if ((*(char *)(v1 + 207) & 0x80000000) == 0)
      {
LABEL_5:
        sub_20E86665C((uint64_t)&STACK[0x1370]);
        sub_20E86665C((uint64_t)&STACK[0x1420]);
        JUMPOUT(0x20EC8D994);
      }
LABEL_4:
      operator delete((void *)STACK[0x1798]);
      goto LABEL_5;
    }
  }
  else
  {
    sub_20E86665C(v2);
    sub_20E86665C(v3);
    if ((*(char *)(v1 + 231) & 0x80000000) == 0)
      goto LABEL_3;
  }
  operator delete((void *)STACK[0x17B0]);
  if ((*(char *)(v1 + 207) & 0x80000000) == 0)
    goto LABEL_5;
  goto LABEL_4;
}

void sub_20EC8D918()
{
  uint64_t v0;

  (*(void (**)(uint64_t))(*(_QWORD *)v0 + 8))(v0);
  sub_20E86665C((uint64_t)&STACK[0x1420]);
  JUMPOUT(0x20EC8D988);
}

void sub_20EC8DA24()
{
  void *v0;
  int v1;

  sub_20E86665C((uint64_t)&STACK[0x1370]);
  if (v1 < 0)
    operator delete(v0);
  JUMPOUT(0x20EC8D994);
}

void sub_20EC8DA44()
{
  std::__shared_weak_count *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  if (v0)
  {
    std::__shared_weak_count::__release_weak(v0);
    sub_20E86665C(v2);
    sub_20E86665C(v3);
    if ((*(char *)(v1 + 231) & 0x80000000) == 0)
    {
LABEL_3:
      if ((*(char *)(v1 + 207) & 0x80000000) == 0)
      {
LABEL_5:
        sub_20E86665C((uint64_t)&STACK[0x1420]);
        sub_20E86665C((uint64_t)&STACK[0x14D0]);
        JUMPOUT(0x20EC8DB48);
      }
LABEL_4:
      operator delete((void *)STACK[0x1848]);
      goto LABEL_5;
    }
  }
  else
  {
    sub_20E86665C(v2);
    sub_20E86665C(v3);
    if ((*(char *)(v1 + 231) & 0x80000000) == 0)
      goto LABEL_3;
  }
  operator delete((void *)STACK[0x1860]);
  if ((*(char *)(v1 + 207) & 0x80000000) == 0)
    goto LABEL_5;
  goto LABEL_4;
}

void sub_20EC8DACC()
{
  uint64_t v0;

  (*(void (**)(uint64_t))(*(_QWORD *)v0 + 8))(v0);
  sub_20E86665C((uint64_t)&STACK[0x14D0]);
  JUMPOUT(0x20EC8DB3CLL);
}

void sub_20EC8DBD8()
{
  void *v0;
  int v1;

  sub_20E86665C((uint64_t)&STACK[0x1420]);
  if (v1 < 0)
    operator delete(v0);
  JUMPOUT(0x20EC8DB48);
}

void sub_20EC8DBF8()
{
  std::__shared_weak_count *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  if (v0)
  {
    std::__shared_weak_count::__release_weak(v0);
    sub_20E86665C(v2);
    sub_20E86665C(v3);
    if ((*(char *)(v1 + 231) & 0x80000000) == 0)
    {
LABEL_3:
      if ((*(char *)(v1 + 207) & 0x80000000) == 0)
      {
LABEL_5:
        sub_20E86665C((uint64_t)&STACK[0x14D0]);
        sub_20E86665C((uint64_t)&STACK[0x1580]);
        JUMPOUT(0x20EC8DCFCLL);
      }
LABEL_4:
      operator delete((void *)STACK[0x18F8]);
      goto LABEL_5;
    }
  }
  else
  {
    sub_20E86665C(v2);
    sub_20E86665C(v3);
    if ((*(char *)(v1 + 231) & 0x80000000) == 0)
      goto LABEL_3;
  }
  operator delete((void *)STACK[0x1910]);
  if ((*(char *)(v1 + 207) & 0x80000000) == 0)
    goto LABEL_5;
  goto LABEL_4;
}

void sub_20EC8DC80()
{
  uint64_t v0;

  (*(void (**)(uint64_t))(*(_QWORD *)v0 + 8))(v0);
  sub_20E86665C((uint64_t)&STACK[0x1580]);
  JUMPOUT(0x20EC8DCF0);
}

void sub_20EC8DD8C()
{
  void *v0;
  int v1;

  sub_20E86665C((uint64_t)&STACK[0x14D0]);
  if (v1 < 0)
    operator delete(v0);
  JUMPOUT(0x20EC8DCFCLL);
}

void sub_20EC8DDAC()
{
  std::__shared_weak_count *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  if (v0)
  {
    std::__shared_weak_count::__release_weak(v0);
    sub_20E86665C(v3);
    sub_20E86665C(v2);
    if ((*(char *)(v1 + 231) & 0x80000000) == 0)
    {
LABEL_3:
      if ((*(char *)(v1 + 207) & 0x80000000) == 0)
      {
LABEL_5:
        sub_20E86665C((uint64_t)&STACK[0x1580]);
        sub_20E86665C((uint64_t)&STACK[0x1630]);
        JUMPOUT(0x20EC8DEB0);
      }
LABEL_4:
      operator delete((void *)STACK[0x19A8]);
      goto LABEL_5;
    }
  }
  else
  {
    sub_20E86665C(v3);
    sub_20E86665C(v2);
    if ((*(char *)(v1 + 231) & 0x80000000) == 0)
      goto LABEL_3;
  }
  operator delete((void *)STACK[0x19C0]);
  if ((*(char *)(v1 + 207) & 0x80000000) == 0)
    goto LABEL_5;
  goto LABEL_4;
}

void sub_20EC8DE34()
{
  uint64_t v0;

  (*(void (**)(uint64_t))(*(_QWORD *)v0 + 8))(v0);
  sub_20E86665C((uint64_t)&STACK[0x1630]);
  JUMPOUT(0x20EC8DEA4);
}

void sub_20EC8DF40()
{
  void *v0;
  int v1;

  sub_20E86665C((uint64_t)&STACK[0x1580]);
  if (v1 < 0)
    operator delete(v0);
  JUMPOUT(0x20EC8DEB0);
}

void sub_20EC8DF60()
{
  std::__shared_weak_count *v0;
  uint64_t v1;
  uint64_t v2;

  if (v0)
  {
    std::__shared_weak_count::__release_weak(v0);
    sub_20E86665C(v2);
    sub_20E86665C(v1);
    if ((SLOBYTE(STACK[0x4F7]) & 0x80000000) == 0)
    {
LABEL_3:
      if ((SLOBYTE(STACK[0x4DF]) & 0x80000000) == 0)
      {
LABEL_5:
        sub_20E86665C((uint64_t)&STACK[0x1630]);
        sub_20E86665C((uint64_t)&STACK[0x16E0]);
        JUMPOUT(0x20EC8E064);
      }
LABEL_4:
      operator delete((void *)STACK[0x4C8]);
      goto LABEL_5;
    }
  }
  else
  {
    sub_20E86665C(v2);
    sub_20E86665C(v1);
    if ((SLOBYTE(STACK[0x4F7]) & 0x80000000) == 0)
      goto LABEL_3;
  }
  operator delete((void *)STACK[0x4E0]);
  if ((SLOBYTE(STACK[0x4DF]) & 0x80000000) == 0)
    goto LABEL_5;
  goto LABEL_4;
}

void sub_20EC8DFE8()
{
  uint64_t v0;

  (*(void (**)(uint64_t))(*(_QWORD *)v0 + 8))(v0);
  sub_20E86665C((uint64_t)&STACK[0x16E0]);
  JUMPOUT(0x20EC8E058);
}

void sub_20EC8E0F4()
{
  void *v0;
  int v1;

  sub_20E86665C((uint64_t)&STACK[0x1630]);
  if (v1 < 0)
    operator delete(v0);
  JUMPOUT(0x20EC8E064);
}

void sub_20EC8E114()
{
  sub_20E86665C((uint64_t)&STACK[0x16E0]);
  sub_20E86665C((uint64_t)&STACK[0x1790]);
  JUMPOUT(0x20EC8E1B0);
}

void sub_20EC8E134()
{
  uint64_t v0;

  (*(void (**)(uint64_t))(*(_QWORD *)v0 + 8))(v0);
  sub_20E86665C((uint64_t)&STACK[0x1790]);
  JUMPOUT(0x20EC8E1A4);
}

void sub_20EC8E230()
{
  void *v0;
  int v1;

  sub_20E86665C((uint64_t)&STACK[0x16E0]);
  if (v1 < 0)
    operator delete(v0);
  JUMPOUT(0x20EC8E1B0);
}

void sub_20EC8E250()
{
  std::__shared_weak_count *v0;
  uint64_t v1;
  uint64_t v2;

  if (v0)
  {
    std::__shared_weak_count::__release_weak(v0);
    sub_20E86665C(v2);
    sub_20E86665C(v1);
    if ((SLOBYTE(STACK[0x697]) & 0x80000000) == 0)
    {
LABEL_3:
      if ((SLOBYTE(STACK[0x67F]) & 0x80000000) == 0)
      {
LABEL_5:
        sub_20E86665C((uint64_t)&STACK[0x1790]);
        sub_20E86665C((uint64_t)&STACK[0x1840]);
        JUMPOUT(0x20EC8E354);
      }
LABEL_4:
      operator delete((void *)STACK[0x668]);
      goto LABEL_5;
    }
  }
  else
  {
    sub_20E86665C(v2);
    sub_20E86665C(v1);
    if ((SLOBYTE(STACK[0x697]) & 0x80000000) == 0)
      goto LABEL_3;
  }
  operator delete((void *)STACK[0x680]);
  if ((SLOBYTE(STACK[0x67F]) & 0x80000000) == 0)
    goto LABEL_5;
  goto LABEL_4;
}

void sub_20EC8E2D8()
{
  uint64_t v0;

  (*(void (**)(uint64_t))(*(_QWORD *)v0 + 8))(v0);
  sub_20E86665C((uint64_t)&STACK[0x1840]);
  JUMPOUT(0x20EC8E348);
}

void sub_20EC8E3CC()
{
  void *v0;
  int v1;

  sub_20E86665C((uint64_t)&STACK[0x1790]);
  if (v1 < 0)
    operator delete(v0);
  JUMPOUT(0x20EC8E354);
}

void sub_20EC8E3EC()
{
  std::__shared_weak_count *v0;
  uint64_t v1;
  uint64_t v2;

  if (v0)
  {
    std::__shared_weak_count::__release_weak(v0);
    sub_20E86665C(v2);
    sub_20E86665C(v1);
    if ((SLOBYTE(STACK[0x767]) & 0x80000000) == 0)
    {
LABEL_3:
      if ((SLOBYTE(STACK[0x74F]) & 0x80000000) == 0)
      {
LABEL_5:
        sub_20E86665C((uint64_t)&STACK[0x1840]);
        sub_20E86665C((uint64_t)&STACK[0x18F0]);
        JUMPOUT(0x20EC8E4F0);
      }
LABEL_4:
      operator delete((void *)STACK[0x738]);
      goto LABEL_5;
    }
  }
  else
  {
    sub_20E86665C(v2);
    sub_20E86665C(v1);
    if ((SLOBYTE(STACK[0x767]) & 0x80000000) == 0)
      goto LABEL_3;
  }
  operator delete((void *)STACK[0x750]);
  if ((SLOBYTE(STACK[0x74F]) & 0x80000000) == 0)
    goto LABEL_5;
  goto LABEL_4;
}

void sub_20EC8E474()
{
  uint64_t v0;

  (*(void (**)(uint64_t))(*(_QWORD *)v0 + 8))(v0);
  sub_20E86665C((uint64_t)&STACK[0x18F0]);
  JUMPOUT(0x20EC8E4E4);
}

void sub_20EC8E560()
{
  void *v0;
  int v1;

  sub_20E86665C((uint64_t)&STACK[0x1840]);
  if (v1 < 0)
    operator delete(v0);
  JUMPOUT(0x20EC8E4F0);
}

void sub_20EC8E580()
{
  std::__shared_weak_count *v0;
  uint64_t v1;
  uint64_t v2;

  if (v0)
  {
    std::__shared_weak_count::__release_weak(v0);
    sub_20E86665C(v2);
    sub_20E86665C(v1);
    if ((SLOBYTE(STACK[0x837]) & 0x80000000) == 0)
    {
LABEL_3:
      if ((SLOBYTE(STACK[0x81F]) & 0x80000000) == 0)
      {
LABEL_5:
        sub_20E86665C((uint64_t)&STACK[0x18F0]);
        sub_20E86665C((uint64_t)&STACK[0x19A0]);
        JUMPOUT(0x20EC8E684);
      }
LABEL_4:
      operator delete((void *)STACK[0x808]);
      goto LABEL_5;
    }
  }
  else
  {
    sub_20E86665C(v2);
    sub_20E86665C(v1);
    if ((SLOBYTE(STACK[0x837]) & 0x80000000) == 0)
      goto LABEL_3;
  }
  operator delete((void *)STACK[0x820]);
  if ((SLOBYTE(STACK[0x81F]) & 0x80000000) == 0)
    goto LABEL_5;
  goto LABEL_4;
}

void sub_20EC8E608()
{
  uint64_t v0;

  (*(void (**)(uint64_t))(*(_QWORD *)v0 + 8))(v0);
  sub_20E86665C((uint64_t)&STACK[0x19A0]);
  JUMPOUT(0x20EC8E678);
}

void sub_20EC8E6EC()
{
  void *v0;
  int v1;

  sub_20E86665C((uint64_t)&STACK[0x18F0]);
  if (v1 < 0)
    operator delete(v0);
  JUMPOUT(0x20EC8E684);
}

void sub_20EC8E70C()
{
  std::__shared_weak_count *v0;
  uint64_t v1;
  uint64_t v2;

  if (v0)
  {
    std::__shared_weak_count::__release_weak(v0);
    sub_20E86665C(v2);
    sub_20E86665C(v1);
    if ((SLOBYTE(STACK[0x907]) & 0x80000000) == 0)
    {
LABEL_3:
      if ((SLOBYTE(STACK[0x8EF]) & 0x80000000) == 0)
      {
LABEL_5:
        sub_20E86665C((uint64_t)&STACK[0x19A0]);
        sub_20E86665C((uint64_t)&STACK[0x4C0]);
        JUMPOUT(0x20EC8E804);
      }
LABEL_4:
      operator delete((void *)STACK[0x8D8]);
      goto LABEL_5;
    }
  }
  else
  {
    sub_20E86665C(v2);
    sub_20E86665C(v1);
    if ((SLOBYTE(STACK[0x907]) & 0x80000000) == 0)
      goto LABEL_3;
  }
  operator delete((void *)STACK[0x8F0]);
  if ((SLOBYTE(STACK[0x8EF]) & 0x80000000) == 0)
    goto LABEL_5;
  goto LABEL_4;
}

void sub_20EC8E790()
{
  uint64_t v0;

  (*(void (**)(uint64_t))(*(_QWORD *)v0 + 8))(v0);
  sub_20E86665C((uint64_t)&STACK[0x4C0]);
  JUMPOUT(0x20EC8E7F8);
}

void sub_20EC8E86C()
{
  void *v0;
  int v1;

  sub_20E86665C((uint64_t)&STACK[0x19A0]);
  if (v1 < 0)
    operator delete(v0);
  JUMPOUT(0x20EC8E804);
}

void sub_20EC8E88C()
{
  std::__shared_weak_count *v0;
  uint64_t v1;
  uint64_t v2;

  if (v0)
  {
    std::__shared_weak_count::__release_weak(v0);
    sub_20E86665C(v1);
    sub_20E86665C(v2);
    if ((SLOBYTE(STACK[0x9D7]) & 0x80000000) == 0)
    {
LABEL_3:
      if ((SLOBYTE(STACK[0x9BF]) & 0x80000000) == 0)
      {
LABEL_5:
        sub_20E86665C((uint64_t)&STACK[0x4C0]);
        sub_20E86665C((uint64_t)&STACK[0x590]);
        JUMPOUT(0x20EC8E9A8);
      }
LABEL_4:
      operator delete((void *)STACK[0x9A8]);
      goto LABEL_5;
    }
  }
  else
  {
    sub_20E86665C(v1);
    sub_20E86665C(v2);
    if ((SLOBYTE(STACK[0x9D7]) & 0x80000000) == 0)
      goto LABEL_3;
  }
  operator delete((void *)STACK[0x9C0]);
  if ((SLOBYTE(STACK[0x9BF]) & 0x80000000) == 0)
    goto LABEL_5;
  goto LABEL_4;
}

void sub_20EC8E908()
{
  uint64_t v0;

  (*(void (**)(uint64_t))(*(_QWORD *)v0 + 8))(v0);
  sub_20E86665C((uint64_t)&STACK[0x590]);
  JUMPOUT(0x20EC8E9A0);
}

void sub_20EC8E928()
{
  uint64_t v0;
  uint64_t v1;

  MEMORY[0x212BC6398](v1, 0x1022C400958DFA3);
  sub_20EA005D4(v0 + 16);
  JUMPOUT(0x20EC8E95CLL);
}

void sub_20EC8EA10()
{
  void *v0;
  int v1;

  sub_20E86665C((uint64_t)&STACK[0x4C0]);
  if (v1 < 0)
    operator delete(v0);
  JUMPOUT(0x20EC8E9A8);
}

void sub_20EC8EA2C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  uint64_t a65;
  std::__shared_weak_count *v65;
  uint64_t v66;

  if (v65)
  {
    std::__shared_weak_count::__release_weak(v65);
    sub_20E86665C(a65);
    sub_20E86665C(v66);
    if ((SLOBYTE(STACK[0xAA7]) & 0x80000000) == 0)
    {
LABEL_3:
      if ((SLOBYTE(STACK[0xA8F]) & 0x80000000) == 0)
      {
LABEL_5:
        sub_20E86665C((uint64_t)&STACK[0x590]);
        sub_20E86665C((uint64_t)&STACK[0x660]);
        JUMPOUT(0x20EC8EB18);
      }
LABEL_4:
      operator delete((void *)STACK[0xA78]);
      goto LABEL_5;
    }
  }
  else
  {
    sub_20E86665C(a65);
    sub_20E86665C(v66);
    if ((SLOBYTE(STACK[0xAA7]) & 0x80000000) == 0)
      goto LABEL_3;
  }
  operator delete((void *)STACK[0xA90]);
  if ((SLOBYTE(STACK[0xA8F]) & 0x80000000) == 0)
    goto LABEL_5;
  goto LABEL_4;
}

void sub_20EC8EAA8()
{
  uint64_t v0;

  (*(void (**)(uint64_t))(*(_QWORD *)v0 + 8))(v0);
  sub_20E86665C((uint64_t)&STACK[0x660]);
  JUMPOUT(0x20EC8EB10);
}

void sub_20EC8EB7C()
{
  void *v0;
  int v1;

  sub_20E86665C((uint64_t)&STACK[0x590]);
  if (v1 < 0)
    operator delete(v0);
  JUMPOUT(0x20EC8EB18);
}

void sub_20EC8EB98()
{
  std::__shared_weak_count *v0;
  uint64_t v1;
  uint64_t v2;

  if (v0)
  {
    std::__shared_weak_count::__release_weak(v0);
    sub_20E86665C(v1);
    sub_20E86665C(v2);
    if ((SLOBYTE(STACK[0xB6F]) & 0x80000000) == 0)
    {
LABEL_3:
      if ((SLOBYTE(STACK[0xB57]) & 0x80000000) == 0)
      {
LABEL_5:
        sub_20E86665C((uint64_t)&STACK[0x660]);
        sub_20E86665C((uint64_t)&STACK[0x730]);
        JUMPOUT(0x20EC8EC84);
      }
LABEL_4:
      operator delete((void *)STACK[0xB40]);
      goto LABEL_5;
    }
  }
  else
  {
    sub_20E86665C(v1);
    sub_20E86665C(v2);
    if ((SLOBYTE(STACK[0xB6F]) & 0x80000000) == 0)
      goto LABEL_3;
  }
  operator delete((void *)STACK[0xB58]);
  if ((SLOBYTE(STACK[0xB57]) & 0x80000000) == 0)
    goto LABEL_5;
  goto LABEL_4;
}

void sub_20EC8EC14()
{
  uint64_t v0;

  (*(void (**)(uint64_t))(*(_QWORD *)v0 + 8))(v0);
  sub_20E86665C((uint64_t)&STACK[0x730]);
  JUMPOUT(0x20EC8EC7CLL);
}

void sub_20EC8ED18()
{
  void *v0;
  int v1;

  sub_20E86665C((uint64_t)&STACK[0x660]);
  if (v1 < 0)
    operator delete(v0);
  JUMPOUT(0x20EC8EC84);
}

void sub_20EC8ED34(uint64_t a1)
{
  sub_20ED27C40(a1);
  JUMPOUT(0x212BC6398);
}

void sub_20EC8EDD0(uint64_t a1)
{
  sub_20ED15AC8(a1);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20EC8EDF4(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24C9D10A0;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void sub_20EC8EE34(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24C9D10A0;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20EC8EE84(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
}

_QWORD *sub_20EC8EE94(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_24C9D10D8;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_20EC8EECC(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_24C9D10D8;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x212BC6398);
}

void sub_20EC8EF14(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  uint64_t (**v12)();
  uint64_t v13;
  uint64_t v14;
  std::__shared_weak_count *v15;

  v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3)
  {
    v5 = std::__shared_weak_count::lock(v3);
    v15 = v5;
    if (v5)
    {
      v6 = v5;
      v7 = *(_QWORD *)(a1 + 8);
      v14 = v7;
      if (v7)
      {
        v8 = *(_QWORD *)(a2 + 8);
        *(_QWORD *)(a2 + 8) = 0;
        v12 = &off_24C9D1110;
        v13 = v8;
        (*(void (**)(uint64_t, uint64_t (***)()))(*(_QWORD *)v7 + 16))(v7, &v12);
        v9 = v13;
        v12 = &off_24C9D1110;
        v13 = 0;
        if (v9)
          (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
      }
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v11 = __ldaxr(p_shared_owners);
      while (__stlxr(v11 - 1, p_shared_owners));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
}

void sub_20EC8EFE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  if (a3)
    (*(void (**)(uint64_t))(*(_QWORD *)a3 + 8))(a3);
  sub_20E86665C((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_20EC8F014(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24C9D1110;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void sub_20EC8F054(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24C9D1110;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20EC8F0A4(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
}

_QWORD *sub_20EC8F0B4(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_24C9D1148;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_20EC8F0EC(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_24C9D1148;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x212BC6398);
}

void sub_20EC8F134(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  uint64_t (**v12)();
  uint64_t v13;
  uint64_t v14;
  std::__shared_weak_count *v15;

  v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3)
  {
    v5 = std::__shared_weak_count::lock(v3);
    v15 = v5;
    if (v5)
    {
      v6 = v5;
      v7 = *(_QWORD *)(a1 + 8);
      v14 = v7;
      if (v7)
      {
        v8 = *(_QWORD *)(a2 + 8);
        *(_QWORD *)(a2 + 8) = 0;
        v12 = &off_24C9CC500;
        v13 = v8;
        (*(void (**)(uint64_t, uint64_t (***)()))(*(_QWORD *)v7 + 16))(v7, &v12);
        v9 = v13;
        v12 = &off_24C9CC500;
        v13 = 0;
        if (v9)
          (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
      }
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v11 = __ldaxr(p_shared_owners);
      while (__stlxr(v11 - 1, p_shared_owners));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
}

void sub_20EC8F208(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  if (a3)
    (*(void (**)(uint64_t))(*(_QWORD *)a3 + 8))(a3);
  sub_20E86665C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20EC8F234(uint64_t a1)
{
  sub_20ED158E4(a1);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20EC8F258(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24C9D11B0;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void sub_20EC8F298(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24C9D11B0;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20EC8F2E8(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
}

void sub_20EC8F2F8(uint64_t a1)
{
  sub_20ED15700(a1);
  JUMPOUT(0x212BC6398);
}

void sub_20EC8F31C(uint64_t a1)
{
  sub_20ED1551C(a1);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20EC8F340(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24C9D1248;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void sub_20EC8F380(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24C9D1248;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20EC8F3D0(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
}

void sub_20EC8F3E0(uint64_t a1)
{
  sub_20ED15338(a1);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20EC8F404(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_24C9D12B0;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_20EC8F43C(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_24C9D12B0;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x212BC6398);
}

void sub_20EC8F484(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  uint64_t (**v12)();
  uint64_t v13;
  uint64_t v14;
  std::__shared_weak_count *v15;

  v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3)
  {
    v5 = std::__shared_weak_count::lock(v3);
    v15 = v5;
    if (v5)
    {
      v6 = v5;
      v7 = *(_QWORD *)(a1 + 8);
      v14 = v7;
      if (v7)
      {
        v8 = *(_QWORD *)(a2 + 8);
        *(_QWORD *)(a2 + 8) = 0;
        v12 = &off_24C9B46D8;
        v13 = v8;
        (*(void (**)(uint64_t, uint64_t (***)()))(*(_QWORD *)v7 + 16))(v7, &v12);
        v9 = v13;
        v12 = &off_24C9B46D8;
        v13 = 0;
        if (v9)
          (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
      }
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v11 = __ldaxr(p_shared_owners);
      while (__stlxr(v11 - 1, p_shared_owners));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
}

void sub_20EC8F558(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  if (a3)
    (*(void (**)(uint64_t))(*(_QWORD *)a3 + 8))(a3);
  sub_20E86665C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20EC8F584(uint64_t a1)
{
  sub_20ED15154(a1);
  JUMPOUT(0x212BC6398);
}

void sub_20EC8F5A8(uint64_t a1)
{
  sub_20ED14F70(a1);
  JUMPOUT(0x212BC6398);
}

void sub_20EC8F5CC(uint64_t a1)
{
  sub_20ED14D8C(a1);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20EC8F5F0(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24C9E1078;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void sub_20EC8F630(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24C9E1078;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20EC8F680(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
}

void sub_20EC8F690(uint64_t a1)
{
  sub_20ED14BA8(a1);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20EC8F6B4(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24C9E10B0;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void sub_20EC8F6F4(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24C9E10B0;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20EC8F744(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
}

void sub_20EC8F754(uint64_t a1)
{
  sub_20ED149C4(a1);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20EC8F778(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24C9D13A8;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void sub_20EC8F7B8(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24C9D13A8;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20EC8F808(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
}

void sub_20EC8F818(uint64_t a1)
{
  sub_20ED147E0(a1);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20EC8F83C(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_24C9D1410;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_20EC8F874(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_24C9D1410;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x212BC6398);
}

void sub_20EC8F8BC(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  uint64_t (**v12)();
  uint64_t v13;
  uint64_t v14;
  std::__shared_weak_count *v15;

  v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3)
  {
    v5 = std::__shared_weak_count::lock(v3);
    v15 = v5;
    if (v5)
    {
      v6 = v5;
      v7 = *(_QWORD *)(a1 + 8);
      v14 = v7;
      if (v7)
      {
        v8 = *(_QWORD *)(a2 + 8);
        *(_QWORD *)(a2 + 8) = 0;
        v12 = &off_24C9D1448;
        v13 = v8;
        (*(void (**)(uint64_t, uint64_t (***)()))(*(_QWORD *)v7 + 16))(v7, &v12);
        v9 = v13;
        v12 = &off_24C9D1448;
        v13 = 0;
        if (v9)
          (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
      }
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v11 = __ldaxr(p_shared_owners);
      while (__stlxr(v11 - 1, p_shared_owners));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
}

void sub_20EC8F990(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  if (a3)
    (*(void (**)(uint64_t))(*(_QWORD *)a3 + 8))(a3);
  sub_20E86665C((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_20EC8F9BC(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24C9D1448;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void sub_20EC8F9FC(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24C9D1448;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20EC8FA4C(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
}

void sub_20EC8FA5C(uint64_t a1)
{
  sub_20ED145FC(a1);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20EC8FA80(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24C9D14B0;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void sub_20EC8FAC0(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24C9D14B0;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20EC8FB10(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
}

_QWORD *sub_20EC8FB20(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_24C9D14E8;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_20EC8FB58(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_24C9D14E8;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x212BC6398);
}

void sub_20EC8FBA0(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  uint64_t (**v12)();
  uint64_t v13;
  uint64_t v14;
  std::__shared_weak_count *v15;

  v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3)
  {
    v5 = std::__shared_weak_count::lock(v3);
    v15 = v5;
    if (v5)
    {
      v6 = v5;
      v7 = *(_QWORD *)(a1 + 8);
      v14 = v7;
      if (v7)
      {
        v8 = *(_QWORD *)(a2 + 8);
        *(_QWORD *)(a2 + 8) = 0;
        v12 = &off_24C9D1520;
        v13 = v8;
        (*(void (**)(uint64_t, uint64_t (***)()))(*(_QWORD *)v7 + 16))(v7, &v12);
        v9 = v13;
        v12 = &off_24C9D1520;
        v13 = 0;
        if (v9)
          (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
      }
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v11 = __ldaxr(p_shared_owners);
      while (__stlxr(v11 - 1, p_shared_owners));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
}

void sub_20EC8FC74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  if (a3)
    (*(void (**)(uint64_t))(*(_QWORD *)a3 + 8))(a3);
  sub_20E86665C((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_20EC8FCA0(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24C9D1520;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void sub_20EC8FCE0(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24C9D1520;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20EC8FD30(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
}

void sub_20EC8FD40(uint64_t a1)
{
  sub_20ED14418(a1);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20EC8FD64(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_24C9D1588;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_20EC8FD9C(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_24C9D1588;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x212BC6398);
}

void sub_20EC8FDE4(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  uint64_t (**v12)();
  uint64_t v13;
  uint64_t v14;
  std::__shared_weak_count *v15;

  v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3)
  {
    v5 = std::__shared_weak_count::lock(v3);
    v15 = v5;
    if (v5)
    {
      v6 = v5;
      v7 = *(_QWORD *)(a1 + 8);
      v14 = v7;
      if (v7)
      {
        v8 = *(_QWORD *)(a2 + 8);
        *(_QWORD *)(a2 + 8) = 0;
        v12 = &off_24C9E1150;
        v13 = v8;
        (*(void (**)(uint64_t, uint64_t (***)()))(*(_QWORD *)v7 + 16))(v7, &v12);
        v9 = v13;
        v12 = &off_24C9E1150;
        v13 = 0;
        if (v9)
          (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
      }
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v11 = __ldaxr(p_shared_owners);
      while (__stlxr(v11 - 1, p_shared_owners));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
}

void sub_20EC8FEB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  if (a3)
    (*(void (**)(uint64_t))(*(_QWORD *)a3 + 8))(a3);
  sub_20E86665C((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_20EC8FEE4(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24C9E1150;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void sub_20EC8FF24(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24C9E1150;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20EC8FF74(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
}

void sub_20EC8FF84(uint64_t a1)
{
  sub_20ED14234(a1);
  JUMPOUT(0x212BC6398);
}

void sub_20EC8FFA8(uint64_t a1)
{
  sub_20ED14050(a1);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20EC8FFCC(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_24C9D1620;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_20EC90004(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_24C9D1620;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x212BC6398);
}

void sub_20EC9004C(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  uint64_t (**v12)();
  uint64_t v13;
  uint64_t v14;
  std::__shared_weak_count *v15;

  v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3)
  {
    v5 = std::__shared_weak_count::lock(v3);
    v15 = v5;
    if (v5)
    {
      v6 = v5;
      v7 = *(_QWORD *)(a1 + 8);
      v14 = v7;
      if (v7)
      {
        v8 = *(_QWORD *)(a2 + 8);
        *(_QWORD *)(a2 + 8) = 0;
        v12 = &off_24C9D1658;
        v13 = v8;
        (*(void (**)(uint64_t, uint64_t (***)()))(*(_QWORD *)v7 + 16))(v7, &v12);
        v9 = v13;
        v12 = &off_24C9D1658;
        v13 = 0;
        if (v9)
          (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
      }
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v11 = __ldaxr(p_shared_owners);
      while (__stlxr(v11 - 1, p_shared_owners));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
}

void sub_20EC90120(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  if (a3)
    (*(void (**)(uint64_t))(*(_QWORD *)a3 + 8))(a3);
  sub_20E86665C((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_20EC9014C(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24C9D1658;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void sub_20EC9018C(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24C9D1658;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20EC901DC(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
}

void sub_20EC901EC(uint64_t a1)
{
  sub_20ED13E6C(a1);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20EC90210(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24C9D16C0;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void sub_20EC90250(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24C9D16C0;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20EC902A0(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
}

void sub_20EC902B0(uint64_t a1)
{
  sub_20ED13C88(a1);
  JUMPOUT(0x212BC6398);
}

void sub_20EC902D4(uint64_t a1)
{
  sub_20ED13AA4(a1);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20EC902F8(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24C9D1758;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void sub_20EC90338(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24C9D1758;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20EC90388(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
}

void sub_20EC90398(uint64_t a1)
{
  sub_20ED138C0(a1);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20EC903BC(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24C9D17C0;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void sub_20EC903FC(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24C9D17C0;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20EC9044C(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
}

_QWORD *sub_20EC9045C(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_24C9D17F8;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_20EC90494(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_24C9D17F8;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x212BC6398);
}

void sub_20EC904DC(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  uint64_t (**v12)();
  uint64_t v13;
  uint64_t v14;
  std::__shared_weak_count *v15;

  v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3)
  {
    v5 = std::__shared_weak_count::lock(v3);
    v15 = v5;
    if (v5)
    {
      v6 = v5;
      v7 = *(_QWORD *)(a1 + 8);
      v14 = v7;
      if (v7)
      {
        v8 = *(_QWORD *)(a2 + 8);
        *(_QWORD *)(a2 + 8) = 0;
        v12 = &off_24C9B5770;
        v13 = v8;
        (*(void (**)(uint64_t, uint64_t (***)()))(*(_QWORD *)v7 + 16))(v7, &v12);
        v9 = v13;
        v12 = &off_24C9B5770;
        v13 = 0;
        if (v9)
          (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
      }
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v11 = __ldaxr(p_shared_owners);
      while (__stlxr(v11 - 1, p_shared_owners));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
}

void sub_20EC905B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  if (a3)
    (*(void (**)(uint64_t))(*(_QWORD *)a3 + 8))(a3);
  sub_20E86665C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20EC905DC(uint64_t a1)
{
  sub_20ED136DC(a1);
  JUMPOUT(0x212BC6398);
}

void sub_20EC90600(uint64_t a1)
{
  sub_20ED134F8(a1);
  JUMPOUT(0x212BC6398);
}

void sub_20EC90624(uint64_t a1)
{
  sub_20ED13314(a1);
  JUMPOUT(0x212BC6398);
}

void sub_20EC90648(uint64_t a1)
{
  sub_20ED13130(a1);
  JUMPOUT(0x212BC6398);
}

void sub_20EC9066C(uint64_t a1)
{
  sub_20ED12F4C(a1);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20EC90690(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24C9D1920;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void sub_20EC906D0(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24C9D1920;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20EC90720(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
}

void sub_20EC90730(uint64_t a1)
{
  sub_20ED12D68(a1);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20EC90754(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24C9E1118;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void sub_20EC90794(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24C9E1118;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20EC907E4(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
}

void sub_20EC907F4(uint64_t a1)
{
  sub_20ED12B84(a1);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20EC90818(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24C9D1988;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void sub_20EC90858(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24C9D1988;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20EC908A8(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
}

void sub_20EC908B8(uint64_t a1)
{
  sub_20ED129A0(a1);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20EC908DC(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24C9D19F0;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void sub_20EC9091C(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24C9D19F0;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20EC9096C(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
}

void sub_20EC9097C(uint64_t a1)
{
  sub_20ED127BC(a1);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20EC909A0(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24C9D1A58;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void sub_20EC909E0(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24C9D1A58;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20EC90A30(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
}

void sub_20EC90A40(uint64_t a1)
{
  sub_20ED125D8(a1);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20EC90A64(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24C9D1AC0;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void sub_20EC90AA4(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24C9D1AC0;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20EC90AF4(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
}

void sub_20EC90B04(uint64_t a1)
{
  sub_20ED123F4(a1);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20EC90B28(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24C9D1B28;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void sub_20EC90B68(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24C9D1B28;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20EC90BB8(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
}

void sub_20EC90BCC(uint64_t a1)
{
  sub_20EC9248C(a1);
  JUMPOUT(0x212BC6398);
}

void sub_20EC90BF0(_QWORD *a1, uint64_t a2)
{
  uint64_t *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t *p_shared_weak_owners;
  std::__shared_weak_count *v8;
  unint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  std::__shared_weak_count **v13;
  unint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  std::mutex **v24;
  uint64_t **v25;
  std::__shared_weak_count *v26;
  std::__shared_weak_count *v27;
  std::__shared_weak_count *v28;
  uint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  unint64_t *v32;
  unint64_t v33;
  uint64_t **v34;
  std::__shared_weak_count *v35;
  std::__shared_weak_count *v36;
  std::__shared_weak_count *v37;
  uint64_t v38;
  unint64_t *v39;
  unint64_t v40;
  unint64_t *v41;
  unint64_t v42;
  char *v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t *v46;
  unint64_t v47;
  std::__shared_weak_count_vtbl *v48;
  _QWORD *v49;
  __int128 *v50;
  uint64_t v51;
  __int128 v52;
  uint64_t v53;
  __int128 *v54;
  _BYTE v55[24];
  _BYTE *v56;
  uint64_t v57;

  v57 = *MEMORY[0x24BDAC8D0];
  if (!(*(unsigned int (**)(_QWORD *))(*a1 + 48))(a1))
    return;
  if (!a1[9]
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 234, (uint64_t)"scheduler_", 10, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v4 = (uint64_t *)a1[18];
  if (v4)
  {
    v5 = (std::__shared_weak_count *)operator new(0x38uLL);
    v5->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    v5->__shared_weak_owners_ = 0;
    p_shared_weak_owners = (unint64_t *)&v5->__shared_weak_owners_;
    v5->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9D1D70;
    v5[1].__vftable = *(std::__shared_weak_count_vtbl **)a2;
    v8 = v5 + 1;
    *(_OWORD *)&v5[1].__shared_owners_ = *(_OWORD *)(a2 + 8);
    v5[2].__vftable = *(std::__shared_weak_count_vtbl **)(a2 + 24);
    do
      v9 = __ldxr(p_shared_weak_owners);
    while (__stxr(v9 + 1, p_shared_weak_owners));
    v10 = (_QWORD *)operator new();
    *v10 = v4 + 7;
    std::mutex::lock((std::mutex *)(v4 + 7));
    *(_QWORD *)&v52 = v10;
    *((_QWORD *)&v52 + 1) = v4;
    if (!*((_BYTE *)v4 + 48))
      sub_20E866B34();
    v11 = v4[4];
    v12 = *v4;
    v13 = (std::__shared_weak_count **)(*v4 + 16 * v11);
    do
      v14 = __ldxr(p_shared_owners);
    while (__stxr(v14 + 1, p_shared_owners));
    *v13 = v8;
    v15 = v12 + 16 * v11;
    v16 = *(std::__shared_weak_count **)(v15 + 8);
    *(_QWORD *)(v15 + 8) = v5;
    if (v16)
    {
      v17 = (unint64_t *)&v16->__shared_owners_;
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
    v19 = (v4[1] - *v4) >> 4;
    v20 = v4[5];
    v21 = v4[4] + 1;
    if (v21 >= v19)
      v22 = (v4[1] - *v4) >> 4;
    else
      v22 = 0;
    v4[4] = v21 - v22;
    if (v20 == v19)
    {
      v23 = v4[3] + 1;
      if (v23 < v19)
        v19 = 0;
      v4[3] = v23 - v19;
      v24 = (std::mutex **)v52;
      if (!(_QWORD)v52)
      {
LABEL_33:
        v34 = (uint64_t **)a1[9];
        v52 = 0uLL;
        v35 = (std::__shared_weak_count *)a1[5];
        if (v35)
        {
          v36 = std::__shared_weak_count::lock(v35);
          if (v36)
          {
            v37 = v36;
            v38 = a1[4];
            v39 = (unint64_t *)&v36->__shared_weak_owners_;
            do
              v40 = __ldxr(v39);
            while (__stxr(v40 + 1, v39));
            *(_QWORD *)&v52 = v38;
            *((_QWORD *)&v52 + 1) = v36;
            v41 = (unint64_t *)&v36->__shared_owners_;
            do
              v42 = __ldaxr(v41);
            while (__stlxr(v42 - 1, v41));
            if (!v42)
            {
              ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
              std::__shared_weak_count::__release_weak(v37);
            }
          }
          else
          {
            v52 = 0uLL;
          }
        }
        v43 = (char *)operator new(0x30uLL);
        *(_QWORD *)v43 = &off_24C9D1DC0;
        *(_OWORD *)(v43 + 8) = v52;
        v52 = 0uLL;
        *((_QWORD *)v43 + 3) = v8;
        *((_QWORD *)v43 + 4) = v5;
        v53 = 0;
        v54 = 0;
        v56 = v43;
        sub_210216F3C(*v34, (uint64_t)v55);
        v44 = v56;
        if (v56 == v55)
        {
          v45 = 4;
          v44 = v55;
        }
        else
        {
          if (!v56)
            goto LABEL_47;
          v45 = 5;
        }
        (*(void (**)(_QWORD *))(*v44 + 8 * v45))(v44);
LABEL_47:
        if (v5)
        {
          v46 = (unint64_t *)&v5->__shared_owners_;
          do
            v47 = __ldaxr(v46);
          while (__stlxr(v47 - 1, v46));
          if (!v47)
          {
            ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
            std::__shared_weak_count::__release_weak(v5);
          }
        }
        return;
      }
    }
    else
    {
      v4[5] = v20 + 1;
      v24 = (std::mutex **)v52;
      if (!(_QWORD)v52)
        goto LABEL_33;
    }
    std::mutex::unlock(*v24);
    MEMORY[0x212BC6398](v24, 0x20C4093837F09);
    goto LABEL_33;
  }
  v25 = (uint64_t **)a1[9];
  v26 = (std::__shared_weak_count *)a1[5];
  if (v26)
  {
    v27 = std::__shared_weak_count::lock(v26);
    v28 = v27;
    if (v27)
    {
      v29 = a1[4];
      v30 = (unint64_t *)&v27->__shared_weak_owners_;
      do
        v31 = __ldxr(v30);
      while (__stxr(v31 + 1, v30));
      v32 = (unint64_t *)&v27->__shared_owners_;
      do
        v33 = __ldaxr(v32);
      while (__stlxr(v33 - 1, v32));
      if (!v33)
      {
        ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
        std::__shared_weak_count::__release_weak(v28);
      }
    }
    else
    {
      v29 = 0;
    }
  }
  else
  {
    v29 = 0;
    v28 = 0;
  }
  v48 = *(std::__shared_weak_count_vtbl **)a2;
  v49 = operator new(0x38uLL);
  *v49 = &off_24C9D1E40;
  v49[1] = v29;
  v49[2] = v28;
  v49[3] = v48;
  *((_OWORD *)v49 + 2) = *(_OWORD *)(a2 + 8);
  v49[6] = *(_QWORD *)(a2 + 24);
  v54 = (__int128 *)v49;
  sub_210216F3C(*v25, (uint64_t)&v52);
  v50 = v54;
  if (v54 == &v52)
  {
    v51 = 4;
    v50 = &v52;
  }
  else
  {
    if (!v54)
      return;
    v51 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v50 + 8 * v51))();
}

void sub_20EC9102C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  uint64_t v19;

  if (a14 == v19)
  {
    (*(void (**)(void))(a11 + 32))();
    _Unwind_Resume(exception_object);
  }
  if (a14)
  {
    (*(void (**)(void))(*(_QWORD *)a14 + 40))();
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20EC91120(uint64_t result)
{
  atomic_store(1u, (unsigned __int8 *)(result + 8));
  return result;
}

uint64_t sub_20EC91130(uint64_t result)
{
  atomic_store(0, (unsigned __int8 *)(result + 8));
  return result;
}

uint64_t sub_20EC9113C(uint64_t a1)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)(a1 + 8));
  return v1 & 1;
}

void sub_20EC9114C(_QWORD *a1, uint64_t a2, std::__shared_weak_count_vtbl **a3)
{
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t *p_shared_weak_owners;
  std::__shared_weak_count *v12;
  unint64_t v13;
  uint64_t *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  std::__shared_weak_count **v18;
  unint64_t v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  std::mutex **v29;
  uint64_t **v30;
  std::__shared_weak_count *v31;
  std::__shared_weak_count *v32;
  std::__shared_weak_count *v33;
  uint64_t v34;
  unint64_t *v35;
  unint64_t v36;
  unint64_t *v37;
  unint64_t v38;
  uint64_t **v39;
  std::__shared_weak_count *v40;
  std::__shared_weak_count *v41;
  std::__shared_weak_count *v42;
  uint64_t v43;
  unint64_t *v44;
  unint64_t v45;
  unint64_t *v46;
  unint64_t v47;
  char *v48;
  std::string *v49;
  uint64_t v50;
  uint64_t *v51;
  unint64_t v52;
  unint64_t *v53;
  unint64_t v54;
  std::__shared_weak_count_vtbl *v55;
  _QWORD *v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  __int128 *v60;
  uint64_t v61;
  _QWORD *v62;
  _QWORD *v63;
  _QWORD *v64;
  __int128 *v65;
  std::string *v66;
  std::runtime_error *exception;
  std::runtime_error *v68;
  __int128 v69;
  __int128 v70;
  uint64_t v71;
  _QWORD *v72;
  std::__shared_weak_count *v73;
  std::__shared_weak_count *v74;
  std::runtime_error v75;
  std::__shared_weak_count *v76;
  std::__shared_weak_count *v77;
  __int128 v78;
  _QWORD *v79;
  __int128 *v80;
  _QWORD v81[3];
  std::string v82;
  std::string *v83;
  uint64_t v84;

  v84 = *MEMORY[0x24BDAC8D0];
  if (((*(uint64_t (**)(_QWORD *))(*a1 + 48))(a1) & 1) == 0)
  {
    *(_QWORD *)&v78 = "Invalid operation. Interface is disabled for ";
    *((_QWORD *)&v78 + 1) = 45;
    v64 = (_QWORD *)a1[6];
    v63 = a1 + 6;
    v62 = v64;
    v65 = (__int128 *)*((unsigned __int8 *)v63 + 23);
    if ((char)v65 < 0)
      v65 = (__int128 *)v63[1];
    else
      v62 = v63;
    v79 = v62;
    v80 = v65;
    sub_20E8778D4((uint64_t)&v78, (uint64_t)v81, 0, 0, &v82);
    if ((v82.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v66 = &v82;
    else
      v66 = (std::string *)v82.__r_.__value_.__r.__words[0];
    std::runtime_error::runtime_error(&v75, (const char *)v66);
    v75.__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v68 = std::runtime_error::runtime_error(exception, &v75);
    v68->__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    __cxa_throw(v68, (struct type_info *)&unk_24CA1E2D0, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  if (!a1[9]
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 294, (uint64_t)"scheduler_", 10, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  if (a1[18])
  {
    v6 = (std::__shared_weak_count *)operator new(0x20uLL);
    v6->__shared_weak_owners_ = 0;
    v6->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9D1EC0;
    v6[1].__vftable = *a3;
    v74 = v6;
    v72 = &v6[1].__vftable;
    v73 = v6;
    v6->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    *a3 = 0;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    if (!a1[18]
      && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 414, (uint64_t)"limiting_buffer_", 16, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v9 = (std::__shared_weak_count *)operator new(0x38uLL);
    v9->__shared_owners_ = 0;
    v10 = (unint64_t *)&v9->__shared_owners_;
    v9->__shared_weak_owners_ = 0;
    p_shared_weak_owners = (unint64_t *)&v9->__shared_weak_owners_;
    v9->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9D1D70;
    v9[1].__vftable = *(std::__shared_weak_count_vtbl **)a2;
    v12 = v9 + 1;
    *(_OWORD *)&v9[1].__shared_owners_ = *(_OWORD *)(a2 + 8);
    v9[2].__vftable = *(std::__shared_weak_count_vtbl **)(a2 + 24);
    v76 = v9 + 1;
    v77 = v9;
    do
      v13 = __ldxr(p_shared_weak_owners);
    while (__stxr(v13 + 1, p_shared_weak_owners));
    v14 = (uint64_t *)a1[18];
    v15 = (_QWORD *)operator new();
    *v15 = v14 + 7;
    std::mutex::lock((std::mutex *)(v14 + 7));
    *(_QWORD *)&v78 = v15;
    *((_QWORD *)&v78 + 1) = v14;
    if (!*((_BYTE *)v14 + 48))
      sub_20E866B34();
    v16 = v14[4];
    v17 = *v14;
    v18 = (std::__shared_weak_count **)(*v14 + 16 * v16);
    do
      v19 = __ldxr(v10);
    while (__stxr(v19 + 1, v10));
    *v18 = v12;
    v20 = v17 + 16 * v16;
    v21 = *(std::__shared_weak_count **)(v20 + 8);
    *(_QWORD *)(v20 + 8) = v9;
    if (v21)
    {
      v22 = (unint64_t *)&v21->__shared_owners_;
      do
        v23 = __ldaxr(v22);
      while (__stlxr(v23 - 1, v22));
      if (!v23)
      {
        ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
        std::__shared_weak_count::__release_weak(v21);
      }
    }
    v24 = (v14[1] - *v14) >> 4;
    v25 = v14[5];
    v26 = v14[4] + 1;
    if (v26 >= v24)
      v27 = (v14[1] - *v14) >> 4;
    else
      v27 = 0;
    v14[4] = v26 - v27;
    if (v25 == v24)
    {
      v28 = v14[3] + 1;
      if (v28 < v24)
        v24 = 0;
      v14[3] = v28 - v24;
      v29 = (std::mutex **)v78;
      if (!(_QWORD)v78)
      {
LABEL_37:
        v39 = (uint64_t **)a1[9];
        v78 = 0uLL;
        v40 = (std::__shared_weak_count *)a1[5];
        if (v40)
        {
          v41 = std::__shared_weak_count::lock(v40);
          if (v41)
          {
            v42 = v41;
            v43 = a1[4];
            v44 = (unint64_t *)&v41->__shared_weak_owners_;
            do
              v45 = __ldxr(v44);
            while (__stxr(v45 + 1, v44));
            *(_QWORD *)&v78 = v43;
            *((_QWORD *)&v78 + 1) = v41;
            v46 = (unint64_t *)&v41->__shared_owners_;
            do
              v47 = __ldaxr(v46);
            while (__stlxr(v47 - 1, v46));
            if (!v47)
            {
              ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
              std::__shared_weak_count::__release_weak(v42);
            }
          }
          else
          {
            v78 = 0uLL;
          }
        }
        v48 = (char *)operator new(0x38uLL);
        *(_QWORD *)v48 = &off_24C9D1F10;
        *(_OWORD *)(v48 + 8) = v78;
        v78 = 0uLL;
        *((_QWORD *)v48 + 3) = v12;
        *((_QWORD *)v48 + 4) = v9;
        v79 = 0;
        v80 = 0;
        *((_QWORD *)v48 + 5) = v72;
        *((_QWORD *)v48 + 6) = v73;
        v81[0] = 0;
        v81[1] = 0;
        v83 = (std::string *)v48;
        sub_210216F3C(*v39, (uint64_t)&v82);
        v49 = v83;
        if (v83 == &v82)
        {
          v50 = 4;
          v49 = &v82;
        }
        else
        {
          if (!v83)
            goto LABEL_51;
          v50 = 5;
        }
        (*(void (**)(void))(v49->__r_.__value_.__r.__words[0] + 8 * v50))();
LABEL_51:
        if (v77)
        {
          v51 = &v77->__shared_owners_;
          do
            v52 = __ldaxr((unint64_t *)v51);
          while (__stlxr(v52 - 1, (unint64_t *)v51));
          if (!v52)
          {
            ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
            std::__shared_weak_count::__release_weak(v77);
          }
        }
        if (v74)
        {
          v53 = (unint64_t *)&v74->__shared_owners_;
          do
            v54 = __ldaxr(v53);
          while (__stlxr(v54 - 1, v53));
          if (!v54)
          {
            ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
            std::__shared_weak_count::__release_weak(v74);
          }
        }
        return;
      }
    }
    else
    {
      v14[5] = v25 + 1;
      v29 = (std::mutex **)v78;
      if (!(_QWORD)v78)
        goto LABEL_37;
    }
    std::mutex::unlock(*v29);
    MEMORY[0x212BC6398](v29, 0x20C4093837F09);
    goto LABEL_37;
  }
  v30 = (uint64_t **)a1[9];
  v69 = 0uLL;
  v31 = (std::__shared_weak_count *)a1[5];
  if (v31)
  {
    v32 = std::__shared_weak_count::lock(v31);
    if (v32)
    {
      v33 = v32;
      v34 = a1[4];
      v35 = (unint64_t *)&v32->__shared_weak_owners_;
      do
        v36 = __ldxr(v35);
      while (__stxr(v36 + 1, v35));
      *(_QWORD *)&v69 = v34;
      *((_QWORD *)&v69 + 1) = v32;
      v37 = (unint64_t *)&v32->__shared_owners_;
      do
        v38 = __ldaxr(v37);
      while (__stlxr(v38 - 1, v37));
      if (!v38)
      {
        ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
        std::__shared_weak_count::__release_weak(v33);
      }
    }
    else
    {
      v69 = 0uLL;
    }
  }
  v55 = *(std::__shared_weak_count_vtbl **)a2;
  v70 = *(_OWORD *)(a2 + 8);
  v71 = *(_QWORD *)(a2 + 24);
  v56 = operator new(0x20uLL);
  v56[1] = 0;
  v56[2] = 0;
  *v56 = &off_24C9D1EC0;
  v56[3] = *a3;
  *a3 = 0;
  v57 = (char *)operator new(0x48uLL);
  *(_QWORD *)v57 = &off_24C9D1F90;
  *(_OWORD *)(v57 + 8) = v69;
  *((_QWORD *)v57 + 3) = v55;
  *((_OWORD *)v57 + 2) = v70;
  *((_QWORD *)v57 + 6) = v71;
  *((_QWORD *)v57 + 7) = v56 + 3;
  *((_QWORD *)v57 + 8) = v56;
  v80 = (__int128 *)v57;
  sub_210216F3C(*v30, (uint64_t)&v78);
  v60 = v80;
  if (v80 == &v78)
  {
    v61 = 4;
    v60 = &v78;
  }
  else
  {
    if (!v80)
      return;
    v61 = 5;
  }
  (*(void (**)(__int128 *, uint64_t, uint64_t))(*(_QWORD *)v60 + 8 * v61))(v60, v58, v59);
}

void sub_20EC917A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,std::runtime_error a22,std::exception_ptr a23,uint64_t a24,uint64_t a25,std::exception_ptr a26)
{
  std::__assoc_sub_state **v26;
  uint64_t v27;
  std::__assoc_sub_state *v28;
  std::exception_ptr v29;

  if (a2)
  {
    __cxa_begin_catch(exception_object);
    std::current_exception();
    __cxa_end_catch();
    v28 = *v26;
    if (*v26)
    {
      std::exception_ptr::exception_ptr(&a26, &a23);
      v29.__ptr_ = &a26;
      std::__assoc_sub_state::set_exception(v28, v29);
      std::exception_ptr::~exception_ptr(&a26);
      std::exception_ptr::~exception_ptr(&a23);
      std::runtime_error::~runtime_error(&a22);
      if (*(char *)(v27 - 97) < 0)
        operator delete(*(void **)(v27 - 120));
      JUMPOUT(0x20EC916B4);
    }
    sub_20E96CE78(3u);
  }
  _Unwind_Resume(exception_object);
}

void sub_20EC91818(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,std::runtime_error a22,std::exception_ptr a23,uint64_t a24,uint64_t a25,std::exception_ptr a26)
{
  uint64_t v26;

  std::exception_ptr::~exception_ptr(&a23);
  std::runtime_error::~runtime_error(&a22);
  if (*(char *)(v26 - 97) < 0)
  {
    operator delete(*(void **)(v26 - 120));
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void sub_20EC9186C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,char *a30)
{
  char *v30;
  char *v32;
  uint64_t v33;

  v32 = a30;
  if (a30 == v30)
  {
    v33 = 4;
    v32 = &a27;
  }
  else
  {
    if (!a30)
    {
      sub_20EC93470((uint64_t)&a9);
      _Unwind_Resume(a1);
    }
    v33 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v32 + 8 * v33))();
  sub_20EC93470((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20EC918C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10)
  {
    std::__shared_weak_count::__release_weak(a10);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void sub_20EC918E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27)
{
  _QWORD *v27;
  uint64_t v28;
  _QWORD *v30;
  uint64_t v31;

  v30 = *(_QWORD **)(v28 - 96);
  if (v30 == v27)
  {
    v31 = 4;
    v30 = (_QWORD *)(v28 - 120);
  }
  else
  {
    if (!v30)
      goto LABEL_6;
    v31 = 5;
  }
  (*(void (**)(void))(*v30 + 8 * v31))();
LABEL_6:
  sub_20EA031A8(&a27);
  sub_20E86665C((uint64_t)&a25);
  sub_20E86665C((uint64_t)&a18);
  sub_20E86665C((uint64_t)&a20);
  _Unwind_Resume(a1);
}

void sub_20EC91984(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  uint64_t v11;
  va_list va;
  uint64_t v13;
  va_list va1;

  va_start(va1, a10);
  va_start(va, a10);
  v11 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  sub_20E86665C((uint64_t)va);
  sub_20E86665C((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_20EC919A0(uint64_t a1)
{
  uint64_t *v1;

  v1 = *(uint64_t **)(a1 + 72);
  if (v1)
  {
    sub_210217048(*v1);
  }
  else
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 167, (uint64_t)"scheduler_ != nullptr", 21, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    sub_210217048(**(_QWORD **)(a1 + 72));
  }
}

_QWORD *sub_20EC91A14(_QWORD *a1, uint64_t a2)
{
  uint64_t **v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *result;
  uint64_t v12;
  _BYTE v13[24];
  _BYTE *v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v4 = (uint64_t **)a1[9];
  if (!v4)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 181, (uint64_t)"scheduler_", 10, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v4 = (uint64_t **)a1[9];
  }
  v6 = a1[4];
  v5 = a1[5];
  if (v5)
  {
    v7 = (unint64_t *)(v5 + 16);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  v9 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v10 = operator new(0x28uLL);
  *v10 = &off_24C9D2010;
  v10[1] = v6;
  v10[2] = v5;
  v10[3] = &off_24C9D1110;
  v10[4] = v9;
  v14 = v10;
  sub_210216F3C(*v4, (uint64_t)v13);
  result = v14;
  if (v14 == v13)
  {
    v12 = 4;
    result = v13;
  }
  else
  {
    if (!v14)
      return result;
    v12 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v12))();
}

void sub_20EC91B44(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v13;

  if (a13 == v13)
  {
    (*(void (**)(void))(a10 + 32))();
    _Unwind_Resume(exception_object);
  }
  if (a13)
  {
    (*(void (**)(void))(*(_QWORD *)a13 + 40))();
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20EC91BB8(_QWORD *a1, uint64_t a2)
{
  uint64_t **v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *result;
  uint64_t v12;
  _BYTE v13[24];
  _BYTE *v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v4 = (uint64_t **)a1[9];
  if (!v4)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 202, (uint64_t)"scheduler_", 10, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v4 = (uint64_t **)a1[9];
  }
  v6 = a1[4];
  v5 = a1[5];
  if (v5)
  {
    v7 = (unint64_t *)(v5 + 16);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  v9 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v10 = operator new(0x28uLL);
  *v10 = &off_24C9D2090;
  v10[1] = v6;
  v10[2] = v5;
  v10[3] = &off_24C9CC500;
  v10[4] = v9;
  v14 = v10;
  sub_210216F3C(*v4, (uint64_t)v13);
  result = v14;
  if (v14 == v13)
  {
    v12 = 4;
    result = v13;
  }
  else
  {
    if (!v14)
      return result;
    v12 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v12))();
}

void sub_20EC91CE8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v13;

  if (a13 == v13)
  {
    (*(void (**)(void))(a10 + 32))();
    _Unwind_Resume(exception_object);
  }
  if (a13)
  {
    (*(void (**)(void))(*(_QWORD *)a13 + 40))();
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_20EC91D5C@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  unint64_t *v5;
  int v6;
  unint64_t v7;
  uint64_t **v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *p_shared_weak_owners;
  unint64_t v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v22;
  _BYTE v23[24];
  _BYTE *v24;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  v4 = operator new();
  *(_QWORD *)(v4 + 8) = 0;
  v5 = (unint64_t *)(v4 + 8);
  *(_QWORD *)(v4 + 24) = 850045863;
  *(_QWORD *)(v4 + 16) = 0;
  *(_OWORD *)(v4 + 32) = 0u;
  *(_OWORD *)(v4 + 48) = 0u;
  *(_OWORD *)(v4 + 64) = 0u;
  *(_QWORD *)(v4 + 80) = 0;
  *(_QWORD *)(v4 + 88) = 1018212795;
  *(_OWORD *)(v4 + 96) = 0u;
  *(_OWORD *)(v4 + 112) = 0u;
  *(_OWORD *)(v4 + 124) = 0u;
  *(_QWORD *)v4 = &off_24C9B80A0;
  v22 = v4;
  std::mutex::lock((std::mutex *)(v4 + 24));
  v6 = *(_DWORD *)(v4 + 136);
  if ((v6 & 2) != 0)
    sub_20E96CE78(1u);
  do
    v7 = __ldxr(v5);
  while (__stxr(v7 + 1, v5));
  *(_DWORD *)(v4 + 136) = v6 | 2;
  std::mutex::unlock((std::mutex *)(v4 + 24));
  v8 = (uint64_t **)a1[9];
  v9 = (std::__shared_weak_count *)a1[5];
  if (v9)
  {
    v10 = std::__shared_weak_count::lock(v9);
    v11 = v10;
    if (v10)
    {
      v12 = a1[4];
      p_shared_weak_owners = (unint64_t *)&v10->__shared_weak_owners_;
      do
        v14 = __ldxr(p_shared_weak_owners);
      while (__stxr(v14 + 1, p_shared_weak_owners));
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        v16 = __ldaxr(p_shared_owners);
      while (__stlxr(v16 - 1, p_shared_owners));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    else
    {
      v12 = 0;
    }
  }
  else
  {
    v12 = 0;
    v11 = 0;
  }
  v17 = operator new(0x20uLL);
  *v17 = &off_24C9D2110;
  v17[1] = v12;
  v17[2] = v11;
  v17[3] = &v22;
  v24 = v17;
  sub_210216F3C(*v8, (uint64_t)v23);
  v18 = v24;
  if (v24 == v23)
  {
    v19 = 4;
    v18 = v23;
    goto LABEL_17;
  }
  if (v24)
  {
    v19 = 5;
LABEL_17:
    (*(void (**)(_QWORD *))(*v18 + 8 * v19))(v18);
  }
  std::__assoc_sub_state::wait((std::__assoc_sub_state *)v4);
  sub_20EA04D14(v4, a2);
  do
    v20 = __ldaxr(v5);
  while (__stlxr(v20 - 1, v5));
  if (!v20)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
  return sub_20EA04DE8(&v22);
}

void sub_20EC91F74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  unint64_t *v10;
  unint64_t v12;

  do
    v12 = __ldaxr(v10);
  while (__stlxr(v12 - 1, v10));
  if (!v12)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
    sub_20EA04DE8(&a9);
    _Unwind_Resume(a1);
  }
  sub_20EA04DE8(&a9);
  _Unwind_Resume(a1);
}

uint64_t *sub_20EC9203C@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  unint64_t *v5;
  int v6;
  unint64_t v7;
  uint64_t **v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *p_shared_weak_owners;
  unint64_t v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v22;
  _BYTE v23[24];
  _BYTE *v24;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  v4 = operator new();
  *(_QWORD *)(v4 + 8) = 0;
  v5 = (unint64_t *)(v4 + 8);
  *(_QWORD *)(v4 + 24) = 850045863;
  *(_QWORD *)(v4 + 16) = 0;
  *(_OWORD *)(v4 + 32) = 0u;
  *(_OWORD *)(v4 + 48) = 0u;
  *(_OWORD *)(v4 + 64) = 0u;
  *(_QWORD *)(v4 + 80) = 0;
  *(_QWORD *)(v4 + 88) = 1018212795;
  *(_OWORD *)(v4 + 96) = 0u;
  *(_OWORD *)(v4 + 112) = 0u;
  *(_OWORD *)(v4 + 124) = 0u;
  *(_QWORD *)v4 = &off_24C9B80A0;
  v22 = v4;
  std::mutex::lock((std::mutex *)(v4 + 24));
  v6 = *(_DWORD *)(v4 + 136);
  if ((v6 & 2) != 0)
    sub_20E96CE78(1u);
  do
    v7 = __ldxr(v5);
  while (__stxr(v7 + 1, v5));
  *(_DWORD *)(v4 + 136) = v6 | 2;
  std::mutex::unlock((std::mutex *)(v4 + 24));
  v8 = (uint64_t **)a1[9];
  v9 = (std::__shared_weak_count *)a1[5];
  if (v9)
  {
    v10 = std::__shared_weak_count::lock(v9);
    v11 = v10;
    if (v10)
    {
      v12 = a1[4];
      p_shared_weak_owners = (unint64_t *)&v10->__shared_weak_owners_;
      do
        v14 = __ldxr(p_shared_weak_owners);
      while (__stxr(v14 + 1, p_shared_weak_owners));
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        v16 = __ldaxr(p_shared_owners);
      while (__stlxr(v16 - 1, p_shared_owners));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    else
    {
      v12 = 0;
    }
  }
  else
  {
    v12 = 0;
    v11 = 0;
  }
  v17 = operator new(0x20uLL);
  *v17 = &off_24C9D2190;
  v17[1] = v12;
  v17[2] = v11;
  v17[3] = &v22;
  v24 = v17;
  sub_210216F3C(*v8, (uint64_t)v23);
  v18 = v24;
  if (v24 == v23)
  {
    v19 = 4;
    v18 = v23;
    goto LABEL_17;
  }
  if (v24)
  {
    v19 = 5;
LABEL_17:
    (*(void (**)(_QWORD *))(*v18 + 8 * v19))(v18);
  }
  std::__assoc_sub_state::wait((std::__assoc_sub_state *)v4);
  sub_20EA04D14(v4, a2);
  do
    v20 = __ldaxr(v5);
  while (__stlxr(v20 - 1, v5));
  if (!v20)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
  return sub_20EA04DE8(&v22);
}

void sub_20EC92254(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  unint64_t *v10;
  unint64_t v12;

  do
    v12 = __ldaxr(v10);
  while (__stlxr(v12 - 1, v10));
  if (!v12)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
    sub_20EA04DE8(&a9);
    _Unwind_Resume(a1);
  }
  sub_20EA04DE8(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20EC9231C(uint64_t a1)
{
  return sub_20EC9248C(a1 - 16);
}

void sub_20EC92324(uint64_t a1)
{
  sub_20EC9248C(a1 - 16);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20EC9234C(uint64_t a1, uint64_t a2)
{
  return sub_20EC91A14((_QWORD *)(a1 - 16), a2);
}

uint64_t *sub_20EC92354@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_20EC91D5C((_QWORD *)(a1 - 16), a2);
}

uint64_t *sub_20EC9235C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_20EC9203C((_QWORD *)(a1 - 16), a2);
}

uint64_t sub_20EC92364(uint64_t a1)
{
  return a1 - 16;
}

uint64_t sub_20EC9236C(uint64_t a1)
{
  return sub_20EC9248C(a1 - 24);
}

void sub_20EC92374(uint64_t a1)
{
  sub_20EC9248C(a1 - 24);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20EC9239C(uint64_t a1, uint64_t a2)
{
  return sub_20EC91BB8((_QWORD *)(a1 - 24), a2);
}

uint64_t sub_20EC923A4(uint64_t a1)
{
  return a1 - 24;
}

uint64_t sub_20EC923AC(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_20EC92414(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20EC9247C(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8));
}

uint64_t sub_20EC9248C(uint64_t a1)
{
  char **v2;
  char *v3;
  char *v4;
  char *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;

  *(_QWORD *)a1 = &off_24C9D1B60;
  *(_QWORD *)(a1 + 16) = &unk_24C9D1BD8;
  *(_QWORD *)(a1 + 24) = &unk_24C9D1C18;
  v2 = *(char ***)(a1 + 144);
  *(_QWORD *)(a1 + 144) = 0;
  if (v2)
  {
    std::mutex::~mutex((std::mutex *)(v2 + 7));
    if (*((_BYTE *)v2 + 48))
    {
      v3 = *v2;
      if (*v2)
      {
        v4 = v2[1];
        v5 = *v2;
        if (v4 != v3)
        {
          do
          {
            v6 = (std::__shared_weak_count *)*((_QWORD *)v4 - 1);
            if (v6)
            {
              p_shared_owners = (unint64_t *)&v6->__shared_owners_;
              do
                v8 = __ldaxr(p_shared_owners);
              while (__stlxr(v8 - 1, p_shared_owners));
              if (!v8)
              {
                ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
                std::__shared_weak_count::__release_weak(v6);
              }
            }
            v4 -= 16;
          }
          while (v4 != v3);
          v5 = *v2;
        }
        v2[1] = v3;
        operator delete(v5);
      }
    }
    MEMORY[0x212BC6398](v2, 0x1022C400958DFA3);
  }
  if (*(_QWORD *)(a1 + 136))
  {
    v9 = *(_QWORD *)(a1 + 120);
    v10 = *(uint64_t **)(a1 + 128);
    v11 = *v10;
    *(_QWORD *)(v11 + 8) = *(_QWORD *)(v9 + 8);
    **(_QWORD **)(v9 + 8) = v11;
    *(_QWORD *)(a1 + 136) = 0;
    if (v10 != (uint64_t *)(a1 + 120))
    {
      do
      {
        v12 = (uint64_t *)v10[1];
        (*(void (**)(uint64_t *))v10[2])(v10 + 2);
        operator delete(v10);
        v10 = v12;
      }
      while (v12 != (uint64_t *)(a1 + 120));
    }
  }
  if (*(_QWORD *)(a1 + 112))
  {
    v13 = *(_QWORD *)(a1 + 96);
    v14 = *(uint64_t **)(a1 + 104);
    v15 = *v14;
    *(_QWORD *)(v15 + 8) = *(_QWORD *)(v13 + 8);
    **(_QWORD **)(v13 + 8) = v15;
    *(_QWORD *)(a1 + 112) = 0;
    if (v14 != (uint64_t *)(a1 + 96))
    {
      do
      {
        v16 = (uint64_t *)v14[1];
        (*(void (**)(uint64_t *))v14[2])(v14 + 2);
        operator delete(v14);
        v14 = v16;
      }
      while (v16 != (uint64_t *)(a1 + 96));
    }
  }
  v17 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 88) = 0;
  if (v17)
    (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  v18 = *(std::__shared_weak_count **)(a1 + 80);
  if (!v18)
    goto LABEL_27;
  v19 = (unint64_t *)&v18->__shared_owners_;
  do
    v20 = __ldaxr(v19);
  while (__stlxr(v20 - 1, v19));
  if (v20)
  {
LABEL_27:
    if ((*(char *)(a1 + 71) & 0x80000000) == 0)
      goto LABEL_29;
    goto LABEL_28;
  }
  ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
  std::__shared_weak_count::__release_weak(v18);
  if (*(char *)(a1 + 71) < 0)
LABEL_28:
    operator delete(*(void **)(a1 + 48));
LABEL_29:
  v21 = *(std::__shared_weak_count **)(a1 + 40);
  if (v21)
    std::__shared_weak_count::__release_weak(v21);
  return a1;
}

void sub_20EC926A0(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9D1D70;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_20EC926B0(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9D1D70;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20EC926E8(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  *a1 = &off_24C9D1DC0;
  v2 = (std::__shared_weak_count *)a1[4];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = (std::__shared_weak_count *)a1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  return a1;
}

void sub_20EC9272C(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  *a1 = &off_24C9D1DC0;
  v2 = (std::__shared_weak_count *)a1[4];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = (std::__shared_weak_count *)a1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20EC92780(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;

  result = operator new(0x30uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = &off_24C9D1DC0;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = a1[4];
  result[3] = a1[3];
  result[4] = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 16);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  return result;
}

_QWORD *sub_20EC927F0(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;

  v3 = result[1];
  v2 = result[2];
  *a2 = &off_24C9D1DC0;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  v6 = result[4];
  a2[3] = result[3];
  a2[4] = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 16);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  return result;
}

void sub_20EC92840(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  v2 = *(std::__shared_weak_count **)(a1 + 32);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
}

void sub_20EC9287C(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  v2 = (std::__shared_weak_count *)__p[4];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = (std::__shared_weak_count *)__p[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  operator delete(__p);
}

void sub_20EC928B4(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  char v21;

  v2 = (std::__shared_weak_count *)a1[4];
  if (!v2)
  {
    v3 = 0;
    v5 = 0;
    v4 = (std::__shared_weak_count *)a1[2];
    if (v4)
      goto LABEL_6;
    goto LABEL_11;
  }
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
  {
    v5 = 0;
    v4 = (std::__shared_weak_count *)a1[2];
    if (v4)
      goto LABEL_6;
LABEL_11:
    v7 = 0;
    v8 = 0;
    goto LABEL_12;
  }
  v4 = (std::__shared_weak_count *)a1[2];
  v5 = a1[3];
  if (!v4)
    goto LABEL_11;
LABEL_6:
  v6 = std::__shared_weak_count::lock(v4);
  v7 = v6;
  if (v6)
  {
    v8 = a1[1];
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
LABEL_12:
    if (!v3)
      goto LABEL_15;
    goto LABEL_13;
  }
  v8 = 0;
  if (!v3)
    goto LABEL_15;
LABEL_13:
  v11 = (unint64_t *)&v3->__shared_owners_;
  do
    v12 = __ldxr(v11);
  while (__stxr(v12 + 1, v11));
LABEL_15:
  if (v8)
  {
    if (v5)
    {
      LOBYTE(v20) = 0;
      v21 = 0;
      sub_20EC92BD8((uint64_t *)(v8 + 88), v5, (uint64_t)&v20);
      if (v21)
        sub_20EC93070(&v20);
    }
  }
  if (v3)
  {
    v13 = (unint64_t *)&v3->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  if (v7)
  {
    v15 = (unint64_t *)&v7->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
    do
      v17 = __ldaxr(v15);
    while (__stlxr(v17 - 1, v15));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  if (v3)
  {
    v18 = (unint64_t *)&v3->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_20EC92A7C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;

  if (a10)
    sub_20EC93070(&a9);
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  if (v11)
  {
    v15 = (unint64_t *)&v11->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
    do
      v17 = __ldaxr(v15);
    while (__stlxr(v17 - 1, v15));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (v10)
  {
    v18 = (unint64_t *)&v10->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20EC92B60(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3vio8cv_types15GyroMeasurementENSt3__110shared_ptrIKN"
                     "S4_15odometry_engine12SLAMMetadataEEENS4_22slam_engine_node_group19SlamEngineNodeErrorENS7_8optiona"
                     "lISC_EELb0EE25EnqueueMessageAndDispatchIZNKSH_4SendERKS6_EUlT_T0_E_EEvSK_SL_EUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3vio8cv_types15GyroMeasurementENSt3__110sh"
                                "ared_ptrIKNS4_15odometry_engine12SLAMMetadataEEENS4_22slam_engine_node_group19SlamEngine"
                                "NodeErrorENS7_8optionalISC_EELb0EE25EnqueueMessageAndDispatchIZNKSH_4SendERKS6_EUlT_T0_E"
                                "_EEvSK_SL_EUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3vio8cv_types15GyroMeasurementENSt3__110shared_ptrIKNS4_15odometry_engine12SLAMMetadataEEENS4_22slam_engine_node_group19SlamEngineNodeErrorENS7_8optionalISC_EELb0EE25EnqueueMessageAndDispatchIZNKSH_4SendERKS6_EUlT_T0_E_EEvSK_SL_EUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3vio8cv_types15GyroMeasurementENSt3__110shared_ptrIKNS4_15odometry_engine12SLAMMetadataEEENS4_22slam_engine_node_group19SlamEngineNodeErrorENS7_8optionalISC_EELb0EE25EnqueueMessageAndDispatchIZNKSH_4SendERKS6_EUlT_T0_E_EEvSK_SL_EUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20EC92BCC()
{
  return &unk_24C9D1E20;
}

void sub_20EC92BD8(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t *i;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  char v13;

  v6 = *a1;
  if (!v6)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/ProcessorInputMessageHandlingStrategy.h", 251, (uint64_t)"callable_", 9, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v6 = *a1;
  }
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v6 + 16))(&v11, v6, a2);
  if (v13)
  {
    for (i = (uint64_t *)a1[2]; i != a1 + 1; i = (uint64_t *)i[1])
      (*(void (**)(uint64_t *, uint64_t *))(i[2] + 16))(i + 2, &v11);
  }
  if (*(_BYTE *)(a3 + 8))
  {
    if (!*(_QWORD *)a3)
      sub_20E96CE78(3u);
    sub_20EC92FA0(*(_QWORD *)a3, (uint64_t)&v11);
  }
  if (v13)
  {
    v8 = v12;
    if (v12)
    {
      p_shared_owners = (unint64_t *)&v12->__shared_owners_;
      do
        v10 = __ldaxr(p_shared_owners);
      while (__stlxr(v10 - 1, p_shared_owners));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
  }
}

void sub_20EC92D14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t *a12, uint64_t a13, int a14, __int16 a15, char a16, unsigned __int8 a17, std::exception_ptr a18, char a19)
{
  uint64_t v19;
  uint64_t v20;
  void *v23;
  uint64_t v24;
  uint64_t i;
  uint64_t *v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;

  sub_20E869AA8((uint64_t)&a19);
  if (a2 == 2)
  {
    v23 = __cxa_begin_catch(a1);
    if (*(_QWORD *)(v20 + 48)
      || !sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/ProcessorInputMessageHandlingStrategy.h", 186, (uint64_t)"!error_downstream_.empty()", 26, (uint64_t)"It is mandated that all errors are handled and enforced by a processor. Add an error handler with AddErrorHandler()", 115, (void (*)(void **))sub_21023DDB0))
    {
      v24 = v20 + 32;
      for (i = *(_QWORD *)(v20 + 40); i != v24; i = *(_QWORD *)(i + 8))
        (*(void (**)(uint64_t, void *))(*(_QWORD *)(i + 16) + 16))(i + 16, v23);
      if (*(_BYTE *)(v19 + 8))
      {
        std::current_exception();
        sub_20EC92F40(*(std::__assoc_sub_state **)v19, &a18);
        std::exception_ptr::~exception_ptr(&a18);
      }
      __cxa_end_catch();
      JUMPOUT(0x20EC92CC0);
    }
    abort();
  }
  if (a2 == 1)
  {
    v26 = (uint64_t *)__cxa_begin_catch(a1);
    v27 = *v26;
    a11 = *(_QWORD *)(*(_QWORD *)(*v26 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL;
    a10 = (*(uint64_t (**)(void))(v27 + 16))();
    sub_20E9B0CC4("Caught unexpected exception of type: ", (const char *)&a11, "\n", "message: ", (const char *)&a10, "\n");
    if ((a17 & 0x80u) == 0)
      v28 = (uint64_t *)&a12;
    else
      v28 = a12;
    if ((a17 & 0x80u) == 0)
      v29 = a17;
    else
      v29 = a13;
    sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/ProcessorInputMessageHandlingStrategy.h", 140, (uint64_t)"", 0, (uint64_t)v28, v29, (void (*)(void **))sub_21023DDB0);
    abort();
  }
  _Unwind_Resume(a1);
}

void sub_20EC92F10(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  __cxa_end_catch();
  JUMPOUT(0x20EC92F30);
}

void sub_20EC92F40(std::__assoc_sub_state *a1, const std::exception_ptr *a2)
{
  std::exception_ptr v3;
  std::exception_ptr v4;

  if (!a1)
    sub_20E96CE78(3u);
  std::exception_ptr::exception_ptr(&v4, a2);
  v3.__ptr_ = &v4;
  std::__assoc_sub_state::set_exception(a1, v3);
  std::exception_ptr::~exception_ptr(&v4);
}

void sub_20EC92F8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10)
{
  std::exception_ptr::~exception_ptr(&a10);
  _Unwind_Resume(a1);
}

void sub_20EC92FA0(uint64_t a1, uint64_t a2)
{
  std::mutex *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  std::exception_ptr v9;

  v4 = (std::mutex *)(a1 + 24);
  std::mutex::lock((std::mutex *)(a1 + 24));
  if ((*(_BYTE *)(a1 + 136) & 1) != 0
    || (v9.__ptr_ = 0, v5 = *(_QWORD *)(a1 + 16), std::exception_ptr::~exception_ptr(&v9), v5))
  {
    sub_20E96CE78(2u);
  }
  *(_BYTE *)(a1 + 144) = 0;
  *(_BYTE *)(a1 + 160) = 0;
  if (*(_BYTE *)(a2 + 16))
  {
    v6 = *(_QWORD *)(a2 + 8);
    *(_QWORD *)(a1 + 144) = *(_QWORD *)a2;
    *(_QWORD *)(a1 + 152) = v6;
    if (v6)
    {
      v7 = (unint64_t *)(v6 + 8);
      do
        v8 = __ldxr(v7);
      while (__stxr(v8 + 1, v7));
    }
    *(_BYTE *)(a1 + 160) = 1;
  }
  *(_DWORD *)(a1 + 136) |= 5u;
  std::condition_variable::notify_all((std::condition_variable *)(a1 + 88));
  std::mutex::unlock(v4);
}

void sub_20EC9305C(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_20EC93070(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  const std::error_category *v7;
  std::logic_error *exception;
  std::logic_error *v9;
  std::logic_error v10;
  std::logic_error v11;
  std::exception_ptr v12;

  v2 = *a1;
  if (!v2)
    return a1;
  if ((*(_BYTE *)(v2 + 136) & 1) == 0)
  {
    v12.__ptr_ = 0;
    v3 = *(_QWORD *)(v2 + 16);
    std::exception_ptr::~exception_ptr(&v12);
    v2 = *a1;
    if (!v3 && *(uint64_t *)(v2 + 8) >= 1)
    {
      v7 = std::future_category();
      MEMORY[0x212BC5AF8](&v10, 4, v7);
      exception = (std::logic_error *)__cxa_allocate_exception(0x20uLL);
      v9 = std::logic_error::logic_error(exception, &v10);
      v9->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB810] + 16);
      v9[1] = v11;
      __cxa_throw(v9, MEMORY[0x24BEDB6E0], (void (*)(void *))MEMORY[0x24BEDAD80]);
    }
  }
  v4 = (unint64_t *)(v2 + 8);
  do
    v5 = __ldaxr(v4);
  while (__stlxr(v5 - 1, v4));
  if (v5)
    return a1;
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 16))(v2);
  return a1;
}

void sub_20EC9315C(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__assoc_sub_state *a10, std::logic_error a11)
{
  uint64_t v11;
  std::exception_ptr v12;

  __cxa_begin_catch(a1);
  std::current_exception();
  __cxa_end_catch();
  v12.__ptr_ = (void *)(v11 - 32);
  std::__assoc_sub_state::set_exception(a10, v12);
  std::exception_ptr::~exception_ptr((std::exception_ptr *)(v11 - 32));
  std::logic_error::~logic_error(&a11);
  JUMPOUT(0x20EC930B8);
}

_QWORD *sub_20EC93198(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_24C9D1E40;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_20EC931D0(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_24C9D1E40;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x212BC6398);
}

__n128 sub_20EC93218(__n128 *a1)
{
  __n128 *v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  __n128 result;

  v2 = (__n128 *)operator new(0x38uLL);
  v4 = a1->n128_u64[1];
  v3 = a1[1].n128_u64[0];
  v2->n128_u64[0] = (unint64_t)&off_24C9D1E40;
  v2->n128_u64[1] = v4;
  v2[1].n128_u64[0] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v2[1].n128_u64[1] = a1[1].n128_u64[1];
  result = a1[2];
  v2[2] = result;
  v2[3].n128_u64[0] = a1[3].n128_u64[0];
  return result;
}

__n128 sub_20EC93280(__n128 *a1, __n128 *a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  __n128 result;

  v3 = a1->n128_u64[1];
  v2 = a1[1].n128_u64[0];
  a2->n128_u64[0] = (unint64_t)&off_24C9D1E40;
  a2->n128_u64[1] = v3;
  a2[1].n128_u64[0] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  a2[1].n128_u64[1] = a1[1].n128_u64[1];
  result = a1[2];
  a2[3].n128_u64[0] = a1[3].n128_u64[0];
  a2[2] = result;
  return result;
}

void sub_20EC932C8(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void sub_20EC932D8(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void sub_20EC93304(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v8;
  char v9;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 8);
      if (v5)
      {
        LOBYTE(v8) = 0;
        v9 = 0;
        sub_20EC92BD8((uint64_t *)(v5 + 88), a1 + 24, (uint64_t)&v8);
        if (v9)
          sub_20EC93070(&v8);
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_20EC933AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v13;

  if (a10)
    sub_20EC93070(&a9);
  p_shared_owners = (unint64_t *)&v10->__shared_owners_;
  do
    v13 = __ldaxr(p_shared_owners);
  while (__stlxr(v13 - 1, p_shared_owners));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20EC933F8(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3vio8cv_types15GyroMeasurementENSt3__110shared_ptrIKN"
                     "S4_15odometry_engine12SLAMMetadataEEENS4_22slam_engine_node_group19SlamEngineNodeErrorENS7_8optiona"
                     "lISC_EELb0EE4SendERKS6_EUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3vio8cv_types15GyroMeasurementENSt3__110sh"
                                "ared_ptrIKNS4_15odometry_engine12SLAMMetadataEEENS4_22slam_engine_node_group19SlamEngine"
                                "NodeErrorENS7_8optionalISC_EELb0EE4SendERKS6_EUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3vio8cv_types15GyroMeasurementENSt3__110shared_ptrIKNS4_15odometry_engine12SLAMMetadataEEENS4_22slam_engine_node_group19SlamEngineNodeErrorENS7_8optionalISC_EELb0EE4SendERKS6_EUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3vio8cv_types15GyroMeasurementENSt3__110shared_ptrIKNS4_15odometry_engine12SLAMMetadataEEENS4_22slam_engine_node_group19SlamEngineNodeErrorENS7_8optionalISC_EELb0EE4SendERKS6_EUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20EC93464()
{
  return &unk_24C9D1EA0;
}

uint64_t sub_20EC93470(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;

  v2 = *(std::__shared_weak_count **)(a1 + 56);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      v5 = *(std::__shared_weak_count **)(a1 + 8);
      if (!v5)
        return a1;
      goto LABEL_6;
    }
  }
  v5 = *(std::__shared_weak_count **)(a1 + 8);
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
  return a1;
}

void sub_20EC934E0(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9D1EC0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_20EC934F0(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9D1EC0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC6398);
}

uint64_t *sub_20EC93520(uint64_t a1)
{
  return sub_20EC93070((uint64_t *)(a1 + 24));
}

_QWORD *sub_20EC9352C(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;

  *a1 = &off_24C9D1F10;
  v2 = (std::__shared_weak_count *)a1[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
      goto LABEL_7;
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  v5 = (std::__shared_weak_count *)a1[4];
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
LABEL_7:
  v6 = (std::__shared_weak_count *)a1[2];
  if (v6)
    std::__shared_weak_count::__release_weak(v6);
  return a1;
}

void sub_20EC935B4(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;

  *a1 = &off_24C9D1F10;
  v2 = (std::__shared_weak_count *)a1[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
    {
LABEL_7:
      v6 = (std::__shared_weak_count *)a1[2];
      if (v6)
        std::__shared_weak_count::__release_weak(v6);
      JUMPOUT(0x212BC6398);
    }
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
      goto LABEL_7;
  }
  std::__shared_weak_count::__release_weak(v5);
  goto LABEL_7;
}

_QWORD *sub_20EC9364C(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;

  result = operator new(0x38uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = &off_24C9D1F10;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = a1[4];
  result[3] = a1[3];
  result[4] = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 16);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  v10 = a1[6];
  result[5] = a1[5];
  result[6] = v10;
  if (v10)
  {
    v11 = (unint64_t *)(v10 + 8);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  return result;
}

_QWORD *sub_20EC936DC(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;

  v3 = result[1];
  v2 = result[2];
  *a2 = &off_24C9D1F10;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  v6 = result[4];
  a2[3] = result[3];
  a2[4] = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 16);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  v9 = result[6];
  a2[5] = result[5];
  a2[6] = v9;
  if (v9)
  {
    v10 = (unint64_t *)(v9 + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  return result;
}

void sub_20EC9374C(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;

  v2 = (std::__shared_weak_count *)a1[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
      goto LABEL_7;
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  v5 = (std::__shared_weak_count *)a1[4];
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
LABEL_7:
  v6 = (std::__shared_weak_count *)a1[2];
  if (v6)
    std::__shared_weak_count::__release_weak(v6);
}

void sub_20EC937CC(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;

  v2 = (std::__shared_weak_count *)__p[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)__p[4];
    if (!v5)
      goto LABEL_7;
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  v5 = (std::__shared_weak_count *)__p[4];
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
LABEL_7:
  v6 = (std::__shared_weak_count *)__p[2];
  if (v6)
    std::__shared_weak_count::__release_weak(v6);
  operator delete(__p);
}

void sub_20EC93848(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t *v13;
  std::runtime_error_vtbl **v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  std::runtime_error *exception;
  std::runtime_error *v23;
  std::runtime_error *v24;
  std::runtime_error *v25;
  std::runtime_error v26;
  std::runtime_error v27;

  v2 = (std::__shared_weak_count *)a1[4];
  if (!v2)
  {
    v3 = 0;
    v5 = 0;
    v4 = (std::__shared_weak_count *)a1[2];
    if (v4)
      goto LABEL_6;
LABEL_11:
    v7 = 0;
    v8 = 0;
    goto LABEL_12;
  }
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
  {
    v5 = 0;
    v4 = (std::__shared_weak_count *)a1[2];
    if (v4)
      goto LABEL_6;
    goto LABEL_11;
  }
  v4 = (std::__shared_weak_count *)a1[2];
  v5 = a1[3];
  if (!v4)
    goto LABEL_11;
LABEL_6:
  v6 = std::__shared_weak_count::lock(v4);
  v7 = v6;
  if (!v6)
  {
    v8 = 0;
    if (!v3)
      goto LABEL_15;
    goto LABEL_13;
  }
  v8 = a1[1];
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  do
    v10 = __ldxr(p_shared_owners);
  while (__stxr(v10 + 1, p_shared_owners));
LABEL_12:
  if (!v3)
    goto LABEL_15;
LABEL_13:
  v11 = (unint64_t *)&v3->__shared_owners_;
  do
    v12 = __ldxr(v11);
  while (__stxr(v12 + 1, v11));
LABEL_15:
  if (!v8)
  {
    std::runtime_error::runtime_error(&v27, "Processor is no longer available.");
    v27.__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v23 = std::runtime_error::runtime_error(exception, &v27);
    v23->__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    __cxa_throw(v23, (struct type_info *)&unk_24CA1E2D0, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  if (!v5)
  {
    std::runtime_error::runtime_error(&v26, "Message was dropped.");
    v26.__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    v24 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v25 = std::runtime_error::runtime_error(v24, &v26);
    v25->__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    __cxa_throw(v25, (struct type_info *)&unk_24CA1E2D0, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  v13 = (uint64_t *)(v8 + 88);
  v14 = (std::runtime_error_vtbl **)a1[5];
  v26.__vftable = *v14;
  *v14 = 0;
  LOBYTE(v26.__imp_.__imp_) = 1;
  sub_20EC92BD8(v13, v5, (uint64_t)&v26);
  if (LOBYTE(v26.__imp_.__imp_))
    sub_20EC93070((uint64_t *)&v26);
  if (v3)
  {
    v15 = (unint64_t *)&v3->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  if (v7)
  {
    v17 = (unint64_t *)&v7->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
    do
      v19 = __ldaxr(v17);
    while (__stlxr(v19 - 1, v17));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  if (v3)
  {
    v20 = (unint64_t *)&v3->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_20EC93B24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10, uint64_t a11, uint64_t a12, std::runtime_error a13, std::exception_ptr a14)
{
  std::__shared_weak_count *v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;

  std::exception_ptr::~exception_ptr(&a14);
  std::runtime_error::~runtime_error(&a13);
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v18 = __ldaxr(p_shared_owners);
    while (__stlxr(v18 - 1, p_shared_owners));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  if (v15)
  {
    v19 = (unint64_t *)&v15->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
    do
      v21 = __ldaxr(v19);
    while (__stlxr(v21 - 1, v19));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  if (v14)
  {
    v22 = (unint64_t *)&v14->__shared_owners_;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  _Unwind_Resume(a1);
}

void sub_20EC93B50(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::runtime_error a10, std::exception_ptr a11, uint64_t a12, uint64_t a13, uint64_t a14, std::exception_ptr a15)
{
  uint64_t v15;
  std::__assoc_sub_state **v16;
  std::__assoc_sub_state *v17;
  std::exception_ptr v18;

  __cxa_begin_catch(a1);
  std::current_exception();
  __cxa_end_catch();
  v17 = *v16;
  if (v17)
  {
    std::exception_ptr::exception_ptr(&a15, &a11);
    v18.__ptr_ = &a15;
    std::__assoc_sub_state::set_exception(v17, v18);
    std::exception_ptr::~exception_ptr(&a15);
    std::exception_ptr::~exception_ptr(&a11);
    std::runtime_error::~runtime_error(&a10);
    if (!v15)
      JUMPOUT(0x20EC9395CLL);
    JUMPOUT(0x20EC9392CLL);
  }
  sub_20E96CE78(3u);
}

void sub_20EC93BAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::runtime_error a10, std::exception_ptr a11, uint64_t a12, uint64_t a13, uint64_t a14, std::exception_ptr a15)
{
  std::__shared_weak_count *v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t *v23;
  unint64_t v24;

  std::exception_ptr::~exception_ptr(&a11);
  std::runtime_error::~runtime_error(&a10);
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v19 = __ldaxr(p_shared_owners);
    while (__stlxr(v19 - 1, p_shared_owners));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  if (v16)
  {
    v20 = (unint64_t *)&v16->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
    do
      v22 = __ldaxr(v20);
    while (__stlxr(v22 - 1, v20));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  if (v15)
  {
    v23 = (unint64_t *)&v15->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  _Unwind_Resume(a1);
}

void sub_20EC93BD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;

  if (a11)
    sub_20EC93070(&a10);
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v15 = __ldaxr(p_shared_owners);
    while (__stlxr(v15 - 1, p_shared_owners));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (v12)
  {
    v16 = (unint64_t *)&v12->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
    do
      v18 = __ldaxr(v16);
    while (__stlxr(v18 - 1, v16));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (v11)
  {
    v19 = (unint64_t *)&v11->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  _Unwind_Resume(a1);
}

uint64_t sub_20EC93CC4(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3vio8cv_types15GyroMeasurementENSt3__110shared_ptrIKN"
                     "S4_15odometry_engine12SLAMMetadataEEENS4_22slam_engine_node_group19SlamEngineNodeErrorENS7_8optiona"
                     "lISC_EELb0EE25EnqueueMessageAndDispatchIZNKSH_7ProcessERKS6_NS7_7promiseISG_EEEUlT_T0_E_EEvSK_SN_EUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3vio8cv_types15GyroMeasurementENSt3__110sh"
                                "ared_ptrIKNS4_15odometry_engine12SLAMMetadataEEENS4_22slam_engine_node_group19SlamEngine"
                                "NodeErrorENS7_8optionalISC_EELb0EE25EnqueueMessageAndDispatchIZNKSH_7ProcessERKS6_NS7_7p"
                                "romiseISG_EEEUlT_T0_E_EEvSK_SN_EUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3vio8cv_types15GyroMeasurementENSt3__110shared_ptrIKNS4_15odometry_engine12SLAMMetadataEEENS4_22slam_engine_node_group19SlamEngineNodeErrorENS7_8optionalISC_EELb0EE25EnqueueMessageAndDispatchIZNKSH_7ProcessERKS6_NS7_7promiseISG_EEEUlT_T0_E_EEvSK_SN_EUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3vio8cv_types15GyroMeasurementENSt3__110shared_ptrIKNS4_15odometry_engine12SLAMMetadataEEENS4_22slam_engine_node_group19SlamEngineNodeErrorENS7_8optionalISC_EELb0EE25EnqueueMessageAndDispatchIZNKSH_7ProcessERKS6_NS7_7promiseISG_EEEUlT_T0_E_EEvSK_SN_EUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20EC93D30()
{
  return &unk_24C9D1F70;
}

_QWORD *sub_20EC93D3C(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;

  *a1 = &off_24C9D1F90;
  v2 = (std::__shared_weak_count *)a1[8];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      v5 = (std::__shared_weak_count *)a1[2];
      if (!v5)
        return a1;
      goto LABEL_6;
    }
  }
  v5 = (std::__shared_weak_count *)a1[2];
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
  return a1;
}

void sub_20EC93DB8(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;

  *a1 = &off_24C9D1F90;
  v2 = (std::__shared_weak_count *)a1[8];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)a1[2];
    if (!v5)
      goto LABEL_9;
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[2];
    if (!v5)
      goto LABEL_9;
  }
  std::__shared_weak_count::__release_weak(v5);
LABEL_9:
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20EC93E44(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  result = operator new(0x48uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *result = &off_24C9D1F90;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  result[3] = *(_QWORD *)(a1 + 24);
  *((_OWORD *)result + 2) = *(_OWORD *)(a1 + 32);
  v7 = *(_QWORD *)(a1 + 56);
  result[6] = *(_QWORD *)(a1 + 48);
  result[7] = v7;
  v8 = *(_QWORD *)(a1 + 64);
  result[8] = v8;
  if (v8)
  {
    v9 = (unint64_t *)(v8 + 8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  return result;
}

uint64_t sub_20EC93ECC(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  __int128 v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;

  v3 = *(_QWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 16);
  *(_QWORD *)a2 = &off_24C9D1F90;
  *(_QWORD *)(a2 + 8) = v3;
  *(_QWORD *)(a2 + 16) = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(result + 24);
  v6 = *(_OWORD *)(result + 32);
  *(_QWORD *)(a2 + 48) = *(_QWORD *)(result + 48);
  *(_OWORD *)(a2 + 32) = v6;
  v7 = *(_QWORD *)(result + 64);
  *(_QWORD *)(a2 + 56) = *(_QWORD *)(result + 56);
  *(_QWORD *)(a2 + 64) = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  return result;
}

void sub_20EC93F34(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;

  v2 = *(std::__shared_weak_count **)(a1 + 64);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    v5 = *(std::__shared_weak_count **)(a1 + 16);
    if (!v5)
      return;
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  v5 = *(std::__shared_weak_count **)(a1 + 16);
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
}

void sub_20EC93FA4(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;

  v2 = (std::__shared_weak_count *)__p[8];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      v5 = (std::__shared_weak_count *)__p[2];
      if (!v5)
        goto LABEL_7;
      goto LABEL_6;
    }
  }
  v5 = (std::__shared_weak_count *)__p[2];
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
LABEL_7:
  operator delete(__p);
}

void sub_20EC94014(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  uint64_t v4;
  std::runtime_error_vtbl **v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::runtime_error *exception;
  std::runtime_error *v9;
  std::runtime_error v10;

  v2 = (std::__shared_weak_count *)a1[2];
  if (!v2 || (v3 = std::__shared_weak_count::lock(v2)) == 0 || (v4 = a1[1]) == 0)
  {
    std::runtime_error::runtime_error(&v10, "Invalid operation. Processor is released.");
    v10.__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v9 = std::runtime_error::runtime_error(exception, &v10);
    v9->__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    __cxa_throw(v9, (struct type_info *)&unk_24CA1E2D0, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  v5 = (std::runtime_error_vtbl **)a1[7];
  v10.__vftable = *v5;
  *v5 = 0;
  LOBYTE(v10.__imp_.__imp_) = 1;
  sub_20EC92BD8((uint64_t *)(v4 + 88), (uint64_t)(a1 + 3), (uint64_t)&v10);
  if (LOBYTE(v10.__imp_.__imp_))
    sub_20EC93070((uint64_t *)&v10);
  p_shared_owners = (unint64_t *)&v3->__shared_owners_;
  do
    v7 = __ldaxr(p_shared_owners);
  while (__stlxr(v7 - 1, p_shared_owners));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
}

void sub_20EC94124(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::runtime_error a10, std::exception_ptr a11)
{
  __break(1u);
}

void sub_20EC9419C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::runtime_error a10, std::exception_ptr a11)
{
  uint64_t v11;

  std::exception_ptr::~exception_ptr((std::exception_ptr *)&a9);
  std::runtime_error::~runtime_error(&a10);
  if (v11)
    JUMPOUT(0x20EC941D0);
  JUMPOUT(0x20EC94200);
}

uint64_t sub_20EC94208(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3vio8cv_types15GyroMeasurementENSt3__110shared_ptrIKN"
                     "S4_15odometry_engine12SLAMMetadataEEENS4_22slam_engine_node_group19SlamEngineNodeErrorENS7_8optiona"
                     "lISC_EELb0EE7ProcessERKS6_NS7_7promiseISG_EEEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3vio8cv_types15GyroMeasurementENSt3__110sh"
                                "ared_ptrIKNS4_15odometry_engine12SLAMMetadataEEENS4_22slam_engine_node_group19SlamEngine"
                                "NodeErrorENS7_8optionalISC_EELb0EE7ProcessERKS6_NS7_7promiseISG_EEEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3vio8cv_types15GyroMeasurementENSt3__110shared_ptrIKNS4_15odometry_engine12SLAMMetadataEEENS4_22slam_engine_node_group19SlamEngineNodeErrorENS7_8optionalISC_EELb0EE7ProcessERKS6_NS7_7promiseISG_EEEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3vio8cv_types15GyroMeasurementENSt3__110shared_ptrIKNS4_15odometry_engine12SLAMMetadataEEENS4_22slam_engine_node_group19SlamEngineNodeErrorENS7_8optionalISC_EELb0EE7ProcessERKS6_NS7_7promiseISG_EEEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20EC94274()
{
  return &unk_24C9D1FF0;
}

_QWORD *sub_20EC94280(_QWORD *a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;

  *a1 = &off_24C9D2010;
  v2 = a1[4];
  a1[3] = &off_24C9D1110;
  a1[4] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = (std::__shared_weak_count *)a1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  return a1;
}

void sub_20EC942D8(_QWORD *a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;

  *a1 = &off_24C9D2010;
  v2 = a1[4];
  a1[3] = &off_24C9D1110;
  a1[4] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = (std::__shared_weak_count *)a1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20EC94340(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;

  v2 = operator new(0x28uLL);
  v3 = v2;
  v5 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  *v2 = &off_24C9D2010;
  v2[1] = v5;
  v2[2] = v4;
  if (v4)
  {
    v6 = (unint64_t *)(v4 + 16);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  v2[3] = &off_24C9D1110;
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32));
  return v3;
}

void sub_20EC943B8(_Unwind_Exception *a1)
{
  _QWORD *v1;
  std::__shared_weak_count *v3;

  v3 = (std::__shared_weak_count *)v1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20EC943D8(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  *a2 = &off_24C9D2010;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  a2[3] = &off_24C9D1110;
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32));
}

void sub_20EC94440(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  std::__shared_weak_count *v3;

  v3 = *(std::__shared_weak_count **)(v1 + 16);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  _Unwind_Resume(exception_object);
}

void sub_20EC94458(_QWORD *a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;

  v2 = a1[4];
  a1[3] = &off_24C9D1110;
  a1[4] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = (std::__shared_weak_count *)a1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
}

void sub_20EC944A8(_QWORD *__p)
{
  uint64_t v2;
  std::__shared_weak_count *v3;

  v2 = __p[4];
  __p[3] = &off_24C9D1110;
  __p[4] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = (std::__shared_weak_count *)__p[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  operator delete(__p);
}

void sub_20EC944F4(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;

  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = a1[1];
      if (v5)
      {
        v6 = operator new(0x20uLL);
        v7 = a1[4];
        a1[4] = 0;
        v6[2] = &off_24C9D1110;
        v6[3] = v7;
        v9 = *(_QWORD *)(v5 + 96);
        v8 = (_QWORD *)(v5 + 96);
        *v6 = v9;
        v6[1] = v8;
        *(_QWORD *)(v9 + 8) = v6;
        *v8 = v6;
        ++v8[2];
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v11 = __ldaxr(p_shared_owners);
      while (__stlxr(v11 - 1, p_shared_owners));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_20EC945A8(_Unwind_Exception *exception_object)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v4;

  p_shared_owners = (unint64_t *)&v1->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20EC945E4(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3kit11concurrency6detail9ProcessorINS_3vio8cv_types15GyroMeasurementENSt3__110shared_ptrIKNS"
                     "4_15odometry_engine12SLAMMetadataEEENS4_22slam_engine_node_group19SlamEngineNodeErrorENS7_8optional"
                     "ISC_EELb0EE9SubscribeENS1_12ChannelInputISC_EEEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4cv3d3kit11concurrency6detail9ProcessorINS_3vio8cv_types15GyroMeasurementENSt3__110sha"
                                "red_ptrIKNS4_15odometry_engine12SLAMMetadataEEENS4_22slam_engine_node_group19SlamEngineN"
                                "odeErrorENS7_8optionalISC_EELb0EE9SubscribeENS1_12ChannelInputISC_EEEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3kit11concurrency6detail9ProcessorINS_3vio8cv_types15GyroMeasurementENSt3__110shared_ptrIKNS4_15odometry_engine12SLAMMetadataEEENS4_22slam_engine_node_group19SlamEngineNodeErrorENS7_8optionalISC_EELb0EE9SubscribeENS1_12ChannelInputISC_EEEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3kit11concurrency6detail9ProcessorINS_3vio8cv_types15GyroMeasurementENSt3__110shared_ptrIKNS4_15odometry_engine12SLAMMetadataEEENS4_22slam_engine_node_group19SlamEngineNodeErrorENS7_8optionalISC_EELb0EE9SubscribeENS1_12ChannelInputISC_EEEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20EC94650()
{
  return &unk_24C9D2070;
}

_QWORD *sub_20EC9465C(_QWORD *a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;

  *a1 = &off_24C9D2090;
  v2 = a1[4];
  a1[3] = &off_24C9CC500;
  a1[4] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = (std::__shared_weak_count *)a1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  return a1;
}

void sub_20EC946B4(_QWORD *a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;

  *a1 = &off_24C9D2090;
  v2 = a1[4];
  a1[3] = &off_24C9CC500;
  a1[4] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = (std::__shared_weak_count *)a1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20EC9471C(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;

  v2 = operator new(0x28uLL);
  v3 = v2;
  v5 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  *v2 = &off_24C9D2090;
  v2[1] = v5;
  v2[2] = v4;
  if (v4)
  {
    v6 = (unint64_t *)(v4 + 16);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  v2[3] = &off_24C9CC500;
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32));
  return v3;
}

void sub_20EC94794(_Unwind_Exception *a1)
{
  _QWORD *v1;
  std::__shared_weak_count *v3;

  v3 = (std::__shared_weak_count *)v1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20EC947B4(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  *a2 = &off_24C9D2090;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  a2[3] = &off_24C9CC500;
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32));
}

void sub_20EC9481C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  std::__shared_weak_count *v3;

  v3 = *(std::__shared_weak_count **)(v1 + 16);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  _Unwind_Resume(exception_object);
}

void sub_20EC94834(_QWORD *a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;

  v2 = a1[4];
  a1[3] = &off_24C9CC500;
  a1[4] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = (std::__shared_weak_count *)a1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
}

void sub_20EC94884(_QWORD *__p)
{
  uint64_t v2;
  std::__shared_weak_count *v3;

  v2 = __p[4];
  __p[3] = &off_24C9CC500;
  __p[4] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = (std::__shared_weak_count *)__p[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  operator delete(__p);
}

void sub_20EC948D0(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;

  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = a1[1];
      if (v5)
      {
        v6 = operator new(0x20uLL);
        v7 = a1[4];
        a1[4] = 0;
        v6[2] = &off_24C9CC500;
        v6[3] = v7;
        v9 = *(_QWORD *)(v5 + 120);
        v8 = (_QWORD *)(v5 + 120);
        *v6 = v9;
        v6[1] = v8;
        *(_QWORD *)(v9 + 8) = v6;
        *v8 = v6;
        ++v8[2];
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v11 = __ldaxr(p_shared_owners);
      while (__stlxr(v11 - 1, p_shared_owners));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_20EC94984(_Unwind_Exception *exception_object)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v4;

  p_shared_owners = (unint64_t *)&v1->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20EC949C0(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3kit11concurrency6detail9ProcessorINS_3vio8cv_types15GyroMeasurementENSt3__110shared_ptrIKNS"
                     "4_15odometry_engine12SLAMMetadataEEENS4_22slam_engine_node_group19SlamEngineNodeErrorENS7_8optional"
                     "ISC_EELb0EE15AddErrorHandlerENS1_12ChannelInputISE_EEEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4cv3d3kit11concurrency6detail9ProcessorINS_3vio8cv_types15GyroMeasurementENSt3__110sha"
                                "red_ptrIKNS4_15odometry_engine12SLAMMetadataEEENS4_22slam_engine_node_group19SlamEngineN"
                                "odeErrorENS7_8optionalISC_EELb0EE15AddErrorHandlerENS1_12ChannelInputISE_EEEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3kit11concurrency6detail9ProcessorINS_3vio8cv_types15GyroMeasurementENSt3__110shared_ptrIKNS4_15odometry_engine12SLAMMetadataEEENS4_22slam_engine_node_group19SlamEngineNodeErrorENS7_8optionalISC_EELb0EE15AddErrorHandlerENS1_12ChannelInputISE_EEEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3kit11concurrency6detail9ProcessorINS_3vio8cv_types15GyroMeasurementENSt3__110shared_ptrIKNS4_15odometry_engine12SLAMMetadataEEENS4_22slam_engine_node_group19SlamEngineNodeErrorENS7_8optionalISC_EELb0EE15AddErrorHandlerENS1_12ChannelInputISE_EEEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20EC94A2C()
{
  return &unk_24C9D20F0;
}

_QWORD *sub_20EC94A38(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_24C9D2110;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_20EC94A70(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_24C9D2110;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20EC94AB8(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x20uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = &off_24C9D2110;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  result[3] = a1[3];
  return result;
}

_QWORD *sub_20EC94B10(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = result[1];
  v2 = result[2];
  *a2 = &off_24C9D2110;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  a2[3] = result[3];
  return result;
}

void sub_20EC94B48(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void sub_20EC94B58(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void sub_20EC94B84(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  uint64_t *v6;
  unint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p[2];
  char *v16;
  __int128 v17;
  char *v18;
  uint64_t v19;
  __int128 *v20;

  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = a1[1];
      if (!v5)
      {
LABEL_11:
        p_shared_owners = (unint64_t *)&v4->__shared_owners_;
        do
          v14 = __ldaxr(p_shared_owners);
        while (__stlxr(v14 - 1, p_shared_owners));
        if (!v14)
        {
          ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
          std::__shared_weak_count::__release_weak(v4);
        }
        return;
      }
      v6 = (uint64_t *)a1[3];
      v7 = *(_QWORD *)(v5 + 112);
      v18 = 0;
      v17 = 0uLL;
      if (v7)
      {
        if (v7 >> 61)
          sub_20E92CED8();
        v8 = (char *)operator new(8 * v7);
        v9 = &v8[8 * v7];
        *(_QWORD *)&v17 = v8;
        *((_QWORD *)&v17 + 1) = v8;
        v18 = v9;
        v10 = v5 + 96;
        v11 = *(_QWORD *)(v5 + 104);
        v20 = &v17;
        if (v11 != v10)
        {
          do
          {
LABEL_7:
            v19 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v11 + 24) + 48))(*(_QWORD *)(v11 + 24));
            sub_20E9B2D04((uint64_t *)&v20, &v19);
            v11 = *(_QWORD *)(v11 + 8);
          }
          while (v11 != v10);
          *(_OWORD *)__p = v17;
          v16 = v18;
          v12 = *v6;
          if (*v6)
            goto LABEL_9;
          goto LABEL_18;
        }
      }
      else
      {
        v9 = 0;
        v8 = 0;
        v10 = v5 + 96;
        v11 = *(_QWORD *)(v5 + 104);
        v20 = &v17;
        if (v11 != v10)
          goto LABEL_7;
      }
      *(int64x2_t *)__p = vdupq_n_s64((unint64_t)v8);
      v16 = v9;
      v12 = *v6;
      if (*v6)
      {
LABEL_9:
        sub_20EA04C5C(v12, (uint64_t)__p);
        if (__p[0])
        {
          __p[1] = __p[0];
          operator delete(__p[0]);
        }
        goto LABEL_11;
      }
LABEL_18:
      sub_20E96CE78(3u);
    }
  }
}

void sub_20EC94D00(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v17;

  if (__p)
    operator delete(__p);
  p_shared_owners = (unint64_t *)&v14->__shared_owners_;
  do
    v17 = __ldaxr(p_shared_owners);
  while (__stlxr(v17 - 1, p_shared_owners));
  if (!v17)
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20EC94D70(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3vio8cv_types15GyroMeasurementENSt3__110shared_ptrIKN"
                     "S4_15odometry_engine12SLAMMetadataEEENS4_22slam_engine_node_group19SlamEngineNodeErrorENS7_8optiona"
                     "lISC_EELb0EE16OutputHandlerIDsEvEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3vio8cv_types15GyroMeasurementENSt3__110sh"
                                "ared_ptrIKNS4_15odometry_engine12SLAMMetadataEEENS4_22slam_engine_node_group19SlamEngine"
                                "NodeErrorENS7_8optionalISC_EELb0EE16OutputHandlerIDsEvEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3vio8cv_types15GyroMeasurementENSt3__110shared_ptrIKNS4_15odometry_engine12SLAMMetadataEEENS4_22slam_engine_node_group19SlamEngineNodeErrorENS7_8optionalISC_EELb0EE16OutputHandlerIDsEvEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3vio8cv_types15GyroMeasurementENSt3__110shared_ptrIKNS4_15odometry_engine12SLAMMetadataEEENS4_22slam_engine_node_group19SlamEngineNodeErrorENS7_8optionalISC_EELb0EE16OutputHandlerIDsEvEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20EC94DDC()
{
  return &unk_24C9D2170;
}

_QWORD *sub_20EC94DE8(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_24C9D2190;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_20EC94E20(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_24C9D2190;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20EC94E68(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x20uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = &off_24C9D2190;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  result[3] = a1[3];
  return result;
}

_QWORD *sub_20EC94EC0(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = result[1];
  v2 = result[2];
  *a2 = &off_24C9D2190;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  a2[3] = result[3];
  return result;
}

void sub_20EC94EF8(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void sub_20EC94F08(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void sub_20EC94F34(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  uint64_t *v6;
  unint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p[2];
  char *v16;
  __int128 v17;
  char *v18;
  uint64_t v19;
  __int128 *v20;

  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = a1[1];
      if (!v5)
      {
LABEL_11:
        p_shared_owners = (unint64_t *)&v4->__shared_owners_;
        do
          v14 = __ldaxr(p_shared_owners);
        while (__stlxr(v14 - 1, p_shared_owners));
        if (!v14)
        {
          ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
          std::__shared_weak_count::__release_weak(v4);
        }
        return;
      }
      v6 = (uint64_t *)a1[3];
      v7 = *(_QWORD *)(v5 + 136);
      v18 = 0;
      v17 = 0uLL;
      if (v7)
      {
        if (v7 >> 61)
          sub_20E92CED8();
        v8 = (char *)operator new(8 * v7);
        v9 = &v8[8 * v7];
        *(_QWORD *)&v17 = v8;
        *((_QWORD *)&v17 + 1) = v8;
        v18 = v9;
        v10 = v5 + 120;
        v11 = *(_QWORD *)(v5 + 128);
        v20 = &v17;
        if (v11 != v10)
        {
          do
          {
LABEL_7:
            v19 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v11 + 24) + 48))(*(_QWORD *)(v11 + 24));
            sub_20E9B2D04((uint64_t *)&v20, &v19);
            v11 = *(_QWORD *)(v11 + 8);
          }
          while (v11 != v10);
          *(_OWORD *)__p = v17;
          v16 = v18;
          v12 = *v6;
          if (*v6)
            goto LABEL_9;
          goto LABEL_18;
        }
      }
      else
      {
        v9 = 0;
        v8 = 0;
        v10 = v5 + 120;
        v11 = *(_QWORD *)(v5 + 128);
        v20 = &v17;
        if (v11 != v10)
          goto LABEL_7;
      }
      *(int64x2_t *)__p = vdupq_n_s64((unint64_t)v8);
      v16 = v9;
      v12 = *v6;
      if (*v6)
      {
LABEL_9:
        sub_20EA04C5C(v12, (uint64_t)__p);
        if (__p[0])
        {
          __p[1] = __p[0];
          operator delete(__p[0]);
        }
        goto LABEL_11;
      }
LABEL_18:
      sub_20E96CE78(3u);
    }
  }
}

void sub_20EC950B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v17;

  if (__p)
    operator delete(__p);
  p_shared_owners = (unint64_t *)&v14->__shared_owners_;
  do
    v17 = __ldaxr(p_shared_owners);
  while (__stlxr(v17 - 1, p_shared_owners));
  if (!v17)
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20EC95120(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3vio8cv_types15GyroMeasurementENSt3__110shared_ptrIKN"
                     "S4_15odometry_engine12SLAMMetadataEEENS4_22slam_engine_node_group19SlamEngineNodeErrorENS7_8optiona"
                     "lISC_EELb0EE15ErrorHandlerIDsEvEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3vio8cv_types15GyroMeasurementENSt3__110sh"
                                "ared_ptrIKNS4_15odometry_engine12SLAMMetadataEEENS4_22slam_engine_node_group19SlamEngine"
                                "NodeErrorENS7_8optionalISC_EELb0EE15ErrorHandlerIDsEvEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3vio8cv_types15GyroMeasurementENSt3__110shared_ptrIKNS4_15odometry_engine12SLAMMetadataEEENS4_22slam_engine_node_group19SlamEngineNodeErrorENS7_8optionalISC_EELb0EE15ErrorHandlerIDsEvEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3vio8cv_types15GyroMeasurementENSt3__110shared_ptrIKNS4_15odometry_engine12SLAMMetadataEEENS4_22slam_engine_node_group19SlamEngineNodeErrorENS7_8optionalISC_EELb0EE15ErrorHandlerIDsEvEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20EC9518C()
{
  return &unk_24C9D21F0;
}

void sub_20EC9519C(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20EC951C0(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t sub_20EC951D8(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail9ProcessorINS1_3vio8cv_types15GyroMeasurementENS0"
                     "_IKNS6_15odometry_engine12SLAMMetadataEEENS6_22slam_engine_node_group19SlamEngineNodeErrorENS_8opti"
                     "onalISC_EELb0EEEE27__shared_ptr_default_deleteISH_SH_EE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail9ProcessorINS1_3vio8cv_types15GyroMeas"
                                "urementENS0_IKNS6_15odometry_engine12SLAMMetadataEEENS6_22slam_engine_node_group19SlamEn"
                                "gineNodeErrorENS_8optionalISC_EELb0EEEE27__shared_ptr_default_deleteISH_SH_EE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail9ProcessorINS1_3vio8cv_types15GyroMeasurementENS0_IKNS6_15odometry_engine12SLAMMetadataEEENS6_22slam_engine_node_group19SlamEngineNodeErrorENS_8optionalISC_EELb0EEEE27__shared_ptr_default_deleteISH_SH_EE"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail9ProcessorINS1_3vio8cv_types15GyroMeasurementENS0_IKNS6_15odometry_engine12SLAMMetadataEEENS6_22slam_engine_node_group19SlamEngineNodeErrorENS_8optionalISC_EELb0EEEE27__shared_ptr_default_deleteISH_SH_EE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

uint64_t sub_20EC95248(uint64_t a1)
{
  std::__shared_weak_count *v2;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_20EC95274(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20EC952B0@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *result;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;

  result = (_QWORD *)operator new();
  v6 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  *result = &off_24C9D2260;
  result[1] = v6;
  result[2] = v5;
  if (v5)
  {
    v7 = (unint64_t *)(v5 + 16);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  *a2 = result;
  return result;
}

void sub_20EC95318(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 8);
      if (v5)
        (*(void (**)(uint64_t))(*(_QWORD *)v5 + 32))(v5);
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_20EC953A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20EC953BC(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 8);
      if (v5)
        (*(void (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_20EC9544C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20EC95460(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return 0;
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
    return 0;
  v4 = v3;
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
    v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 48))(v5);
  else
    v6 = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (v9)
    return v6;
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return v6;
}

void sub_20EC95524(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20EC95538(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return 0;
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
    return 0;
  v4 = v3;
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
    v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 24))(v5);
  else
    v6 = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (v9)
    return v6;
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return v6;
}

void sub_20EC955FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20EC95610(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3)
  {
    v5 = std::__shared_weak_count::lock(v3);
    if (v5)
    {
      v6 = v5;
      v7 = *(_QWORD *)(a1 + 8);
      if (v7)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v7 + 16))(v7, a2);
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
}

void sub_20EC956B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20EC956CC(uint64_t a1)
{
  sub_20EC96F8C(a1);
  JUMPOUT(0x212BC6398);
}

void sub_20EC956F0(_QWORD *a1, uint64_t a2)
{
  uint64_t *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t *p_shared_weak_owners;
  std::__shared_weak_count *v8;
  unint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  std::__shared_weak_count **v13;
  unint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  std::mutex **v24;
  uint64_t **v25;
  std::__shared_weak_count *v26;
  std::__shared_weak_count *v27;
  std::__shared_weak_count *v28;
  uint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  unint64_t *v32;
  unint64_t v33;
  uint64_t **v34;
  std::__shared_weak_count *v35;
  std::__shared_weak_count *v36;
  std::__shared_weak_count *v37;
  uint64_t v38;
  unint64_t *v39;
  unint64_t v40;
  unint64_t *v41;
  unint64_t v42;
  char *v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t *v46;
  unint64_t v47;
  std::__shared_weak_count_vtbl *v48;
  _QWORD *v49;
  __int128 *v50;
  uint64_t v51;
  __int128 v52;
  uint64_t v53;
  __int128 *v54;
  _BYTE v55[24];
  _BYTE *v56;
  uint64_t v57;

  v57 = *MEMORY[0x24BDAC8D0];
  if (!(*(unsigned int (**)(_QWORD *))(*a1 + 48))(a1))
    return;
  if (!a1[9]
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 234, (uint64_t)"scheduler_", 10, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v4 = (uint64_t *)a1[18];
  if (v4)
  {
    v5 = (std::__shared_weak_count *)operator new(0x38uLL);
    v5->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    v5->__shared_weak_owners_ = 0;
    p_shared_weak_owners = (unint64_t *)&v5->__shared_weak_owners_;
    v5->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9D24C8;
    v5[1].__vftable = *(std::__shared_weak_count_vtbl **)a2;
    v8 = v5 + 1;
    *(_OWORD *)&v5[1].__shared_owners_ = *(_OWORD *)(a2 + 8);
    v5[2].__vftable = *(std::__shared_weak_count_vtbl **)(a2 + 24);
    do
      v9 = __ldxr(p_shared_weak_owners);
    while (__stxr(v9 + 1, p_shared_weak_owners));
    v10 = (_QWORD *)operator new();
    *v10 = v4 + 7;
    std::mutex::lock((std::mutex *)(v4 + 7));
    *(_QWORD *)&v52 = v10;
    *((_QWORD *)&v52 + 1) = v4;
    if (!*((_BYTE *)v4 + 48))
      sub_20E866B34();
    v11 = v4[4];
    v12 = *v4;
    v13 = (std::__shared_weak_count **)(*v4 + 16 * v11);
    do
      v14 = __ldxr(p_shared_owners);
    while (__stxr(v14 + 1, p_shared_owners));
    *v13 = v8;
    v15 = v12 + 16 * v11;
    v16 = *(std::__shared_weak_count **)(v15 + 8);
    *(_QWORD *)(v15 + 8) = v5;
    if (v16)
    {
      v17 = (unint64_t *)&v16->__shared_owners_;
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
    v19 = (v4[1] - *v4) >> 4;
    v20 = v4[5];
    v21 = v4[4] + 1;
    if (v21 >= v19)
      v22 = (v4[1] - *v4) >> 4;
    else
      v22 = 0;
    v4[4] = v21 - v22;
    if (v20 == v19)
    {
      v23 = v4[3] + 1;
      if (v23 < v19)
        v19 = 0;
      v4[3] = v23 - v19;
      v24 = (std::mutex **)v52;
      if (!(_QWORD)v52)
      {
LABEL_33:
        v34 = (uint64_t **)a1[9];
        v52 = 0uLL;
        v35 = (std::__shared_weak_count *)a1[5];
        if (v35)
        {
          v36 = std::__shared_weak_count::lock(v35);
          if (v36)
          {
            v37 = v36;
            v38 = a1[4];
            v39 = (unint64_t *)&v36->__shared_weak_owners_;
            do
              v40 = __ldxr(v39);
            while (__stxr(v40 + 1, v39));
            *(_QWORD *)&v52 = v38;
            *((_QWORD *)&v52 + 1) = v36;
            v41 = (unint64_t *)&v36->__shared_owners_;
            do
              v42 = __ldaxr(v41);
            while (__stlxr(v42 - 1, v41));
            if (!v42)
            {
              ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
              std::__shared_weak_count::__release_weak(v37);
            }
          }
          else
          {
            v52 = 0uLL;
          }
        }
        v43 = (char *)operator new(0x30uLL);
        *(_QWORD *)v43 = &off_24C9D2518;
        *(_OWORD *)(v43 + 8) = v52;
        v52 = 0uLL;
        *((_QWORD *)v43 + 3) = v8;
        *((_QWORD *)v43 + 4) = v5;
        v53 = 0;
        v54 = 0;
        v56 = v43;
        sub_210216F3C(*v34, (uint64_t)v55);
        v44 = v56;
        if (v56 == v55)
        {
          v45 = 4;
          v44 = v55;
        }
        else
        {
          if (!v56)
            goto LABEL_47;
          v45 = 5;
        }
        (*(void (**)(_QWORD *))(*v44 + 8 * v45))(v44);
LABEL_47:
        if (v5)
        {
          v46 = (unint64_t *)&v5->__shared_owners_;
          do
            v47 = __ldaxr(v46);
          while (__stlxr(v47 - 1, v46));
          if (!v47)
          {
            ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
            std::__shared_weak_count::__release_weak(v5);
          }
        }
        return;
      }
    }
    else
    {
      v4[5] = v20 + 1;
      v24 = (std::mutex **)v52;
      if (!(_QWORD)v52)
        goto LABEL_33;
    }
    std::mutex::unlock(*v24);
    MEMORY[0x212BC6398](v24, 0x20C4093837F09);
    goto LABEL_33;
  }
  v25 = (uint64_t **)a1[9];
  v26 = (std::__shared_weak_count *)a1[5];
  if (v26)
  {
    v27 = std::__shared_weak_count::lock(v26);
    v28 = v27;
    if (v27)
    {
      v29 = a1[4];
      v30 = (unint64_t *)&v27->__shared_weak_owners_;
      do
        v31 = __ldxr(v30);
      while (__stxr(v31 + 1, v30));
      v32 = (unint64_t *)&v27->__shared_owners_;
      do
        v33 = __ldaxr(v32);
      while (__stlxr(v33 - 1, v32));
      if (!v33)
      {
        ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
        std::__shared_weak_count::__release_weak(v28);
      }
    }
    else
    {
      v29 = 0;
    }
  }
  else
  {
    v29 = 0;
    v28 = 0;
  }
  v48 = *(std::__shared_weak_count_vtbl **)a2;
  v49 = operator new(0x38uLL);
  *v49 = &off_24C9D2598;
  v49[1] = v29;
  v49[2] = v28;
  v49[3] = v48;
  *((_OWORD *)v49 + 2) = *(_OWORD *)(a2 + 8);
  v49[6] = *(_QWORD *)(a2 + 24);
  v54 = (__int128 *)v49;
  sub_210216F3C(*v25, (uint64_t)&v52);
  v50 = v54;
  if (v54 == &v52)
  {
    v51 = 4;
    v50 = &v52;
  }
  else
  {
    if (!v54)
      return;
    v51 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v50 + 8 * v51))();
}

void sub_20EC95B2C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  uint64_t v19;

  if (a14 == v19)
  {
    (*(void (**)(void))(a11 + 32))();
    _Unwind_Resume(exception_object);
  }
  if (a14)
  {
    (*(void (**)(void))(*(_QWORD *)a14 + 40))();
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20EC95C20(uint64_t result)
{
  atomic_store(1u, (unsigned __int8 *)(result + 8));
  return result;
}

uint64_t sub_20EC95C30(uint64_t result)
{
  atomic_store(0, (unsigned __int8 *)(result + 8));
  return result;
}

uint64_t sub_20EC95C3C(uint64_t a1)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)(a1 + 8));
  return v1 & 1;
}

void sub_20EC95C4C(_QWORD *a1, uint64_t a2, std::__shared_weak_count_vtbl **a3)
{
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t *p_shared_weak_owners;
  std::__shared_weak_count *v12;
  unint64_t v13;
  uint64_t *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  std::__shared_weak_count **v18;
  unint64_t v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  std::mutex **v29;
  uint64_t **v30;
  std::__shared_weak_count *v31;
  std::__shared_weak_count *v32;
  std::__shared_weak_count *v33;
  uint64_t v34;
  unint64_t *v35;
  unint64_t v36;
  unint64_t *v37;
  unint64_t v38;
  uint64_t **v39;
  std::__shared_weak_count *v40;
  std::__shared_weak_count *v41;
  std::__shared_weak_count *v42;
  uint64_t v43;
  unint64_t *v44;
  unint64_t v45;
  unint64_t *v46;
  unint64_t v47;
  char *v48;
  std::string *v49;
  uint64_t v50;
  uint64_t *v51;
  unint64_t v52;
  unint64_t *v53;
  unint64_t v54;
  std::__shared_weak_count_vtbl *v55;
  _QWORD *v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  __int128 *v60;
  uint64_t v61;
  _QWORD *v62;
  _QWORD *v63;
  _QWORD *v64;
  __int128 *v65;
  std::string *v66;
  std::runtime_error *exception;
  std::runtime_error *v68;
  __int128 v69;
  __int128 v70;
  uint64_t v71;
  _QWORD *v72;
  std::__shared_weak_count *v73;
  std::__shared_weak_count *v74;
  std::runtime_error v75;
  std::__shared_weak_count *v76;
  std::__shared_weak_count *v77;
  __int128 v78;
  _QWORD *v79;
  __int128 *v80;
  _QWORD v81[3];
  std::string v82;
  std::string *v83;
  uint64_t v84;

  v84 = *MEMORY[0x24BDAC8D0];
  if (((*(uint64_t (**)(_QWORD *))(*a1 + 48))(a1) & 1) == 0)
  {
    *(_QWORD *)&v78 = "Invalid operation. Interface is disabled for ";
    *((_QWORD *)&v78 + 1) = 45;
    v64 = (_QWORD *)a1[6];
    v63 = a1 + 6;
    v62 = v64;
    v65 = (__int128 *)*((unsigned __int8 *)v63 + 23);
    if ((char)v65 < 0)
      v65 = (__int128 *)v63[1];
    else
      v62 = v63;
    v79 = v62;
    v80 = v65;
    sub_20E8778D4((uint64_t)&v78, (uint64_t)v81, 0, 0, &v82);
    if ((v82.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v66 = &v82;
    else
      v66 = (std::string *)v82.__r_.__value_.__r.__words[0];
    std::runtime_error::runtime_error(&v75, (const char *)v66);
    v75.__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v68 = std::runtime_error::runtime_error(exception, &v75);
    v68->__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    __cxa_throw(v68, (struct type_info *)&unk_24CA1E2D0, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  if (!a1[9]
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 294, (uint64_t)"scheduler_", 10, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  if (a1[18])
  {
    v6 = (std::__shared_weak_count *)operator new(0x20uLL);
    v6->__shared_weak_owners_ = 0;
    v6->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9D1EC0;
    v6[1].__vftable = *a3;
    v74 = v6;
    v72 = &v6[1].__vftable;
    v73 = v6;
    v6->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    *a3 = 0;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    if (!a1[18]
      && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 414, (uint64_t)"limiting_buffer_", 16, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v9 = (std::__shared_weak_count *)operator new(0x38uLL);
    v9->__shared_owners_ = 0;
    v10 = (unint64_t *)&v9->__shared_owners_;
    v9->__shared_weak_owners_ = 0;
    p_shared_weak_owners = (unint64_t *)&v9->__shared_weak_owners_;
    v9->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9D24C8;
    v9[1].__vftable = *(std::__shared_weak_count_vtbl **)a2;
    v12 = v9 + 1;
    *(_OWORD *)&v9[1].__shared_owners_ = *(_OWORD *)(a2 + 8);
    v9[2].__vftable = *(std::__shared_weak_count_vtbl **)(a2 + 24);
    v76 = v9 + 1;
    v77 = v9;
    do
      v13 = __ldxr(p_shared_weak_owners);
    while (__stxr(v13 + 1, p_shared_weak_owners));
    v14 = (uint64_t *)a1[18];
    v15 = (_QWORD *)operator new();
    *v15 = v14 + 7;
    std::mutex::lock((std::mutex *)(v14 + 7));
    *(_QWORD *)&v78 = v15;
    *((_QWORD *)&v78 + 1) = v14;
    if (!*((_BYTE *)v14 + 48))
      sub_20E866B34();
    v16 = v14[4];
    v17 = *v14;
    v18 = (std::__shared_weak_count **)(*v14 + 16 * v16);
    do
      v19 = __ldxr(v10);
    while (__stxr(v19 + 1, v10));
    *v18 = v12;
    v20 = v17 + 16 * v16;
    v21 = *(std::__shared_weak_count **)(v20 + 8);
    *(_QWORD *)(v20 + 8) = v9;
    if (v21)
    {
      v22 = (unint64_t *)&v21->__shared_owners_;
      do
        v23 = __ldaxr(v22);
      while (__stlxr(v23 - 1, v22));
      if (!v23)
      {
        ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
        std::__shared_weak_count::__release_weak(v21);
      }
    }
    v24 = (v14[1] - *v14) >> 4;
    v25 = v14[5];
    v26 = v14[4] + 1;
    if (v26 >= v24)
      v27 = (v14[1] - *v14) >> 4;
    else
      v27 = 0;
    v14[4] = v26 - v27;
    if (v25 == v24)
    {
      v28 = v14[3] + 1;
      if (v28 < v24)
        v24 = 0;
      v14[3] = v28 - v24;
      v29 = (std::mutex **)v78;
      if (!(_QWORD)v78)
      {
LABEL_37:
        v39 = (uint64_t **)a1[9];
        v78 = 0uLL;
        v40 = (std::__shared_weak_count *)a1[5];
        if (v40)
        {
          v41 = std::__shared_weak_count::lock(v40);
          if (v41)
          {
            v42 = v41;
            v43 = a1[4];
            v44 = (unint64_t *)&v41->__shared_weak_owners_;
            do
              v45 = __ldxr(v44);
            while (__stxr(v45 + 1, v44));
            *(_QWORD *)&v78 = v43;
            *((_QWORD *)&v78 + 1) = v41;
            v46 = (unint64_t *)&v41->__shared_owners_;
            do
              v47 = __ldaxr(v46);
            while (__stlxr(v47 - 1, v46));
            if (!v47)
            {
              ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
              std::__shared_weak_count::__release_weak(v42);
            }
          }
          else
          {
            v78 = 0uLL;
          }
        }
        v48 = (char *)operator new(0x38uLL);
        *(_QWORD *)v48 = &off_24C9D2618;
        *(_OWORD *)(v48 + 8) = v78;
        v78 = 0uLL;
        *((_QWORD *)v48 + 3) = v12;
        *((_QWORD *)v48 + 4) = v9;
        v79 = 0;
        v80 = 0;
        *((_QWORD *)v48 + 5) = v72;
        *((_QWORD *)v48 + 6) = v73;
        v81[0] = 0;
        v81[1] = 0;
        v83 = (std::string *)v48;
        sub_210216F3C(*v39, (uint64_t)&v82);
        v49 = v83;
        if (v83 == &v82)
        {
          v50 = 4;
          v49 = &v82;
        }
        else
        {
          if (!v83)
            goto LABEL_51;
          v50 = 5;
        }
        (*(void (**)(void))(v49->__r_.__value_.__r.__words[0] + 8 * v50))();
LABEL_51:
        if (v77)
        {
          v51 = &v77->__shared_owners_;
          do
            v52 = __ldaxr((unint64_t *)v51);
          while (__stlxr(v52 - 1, (unint64_t *)v51));
          if (!v52)
          {
            ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
            std::__shared_weak_count::__release_weak(v77);
          }
        }
        if (v74)
        {
          v53 = (unint64_t *)&v74->__shared_owners_;
          do
            v54 = __ldaxr(v53);
          while (__stlxr(v54 - 1, v53));
          if (!v54)
          {
            ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
            std::__shared_weak_count::__release_weak(v74);
          }
        }
        return;
      }
    }
    else
    {
      v14[5] = v25 + 1;
      v29 = (std::mutex **)v78;
      if (!(_QWORD)v78)
        goto LABEL_37;
    }
    std::mutex::unlock(*v29);
    MEMORY[0x212BC6398](v29, 0x20C4093837F09);
    goto LABEL_37;
  }
  v30 = (uint64_t **)a1[9];
  v69 = 0uLL;
  v31 = (std::__shared_weak_count *)a1[5];
  if (v31)
  {
    v32 = std::__shared_weak_count::lock(v31);
    if (v32)
    {
      v33 = v32;
      v34 = a1[4];
      v35 = (unint64_t *)&v32->__shared_weak_owners_;
      do
        v36 = __ldxr(v35);
      while (__stxr(v36 + 1, v35));
      *(_QWORD *)&v69 = v34;
      *((_QWORD *)&v69 + 1) = v32;
      v37 = (unint64_t *)&v32->__shared_owners_;
      do
        v38 = __ldaxr(v37);
      while (__stlxr(v38 - 1, v37));
      if (!v38)
      {
        ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
        std::__shared_weak_count::__release_weak(v33);
      }
    }
    else
    {
      v69 = 0uLL;
    }
  }
  v55 = *(std::__shared_weak_count_vtbl **)a2;
  v70 = *(_OWORD *)(a2 + 8);
  v71 = *(_QWORD *)(a2 + 24);
  v56 = operator new(0x20uLL);
  v56[1] = 0;
  v56[2] = 0;
  *v56 = &off_24C9D1EC0;
  v56[3] = *a3;
  *a3 = 0;
  v57 = (char *)operator new(0x48uLL);
  *(_QWORD *)v57 = &off_24C9D2698;
  *(_OWORD *)(v57 + 8) = v69;
  *((_QWORD *)v57 + 3) = v55;
  *((_OWORD *)v57 + 2) = v70;
  *((_QWORD *)v57 + 6) = v71;
  *((_QWORD *)v57 + 7) = v56 + 3;
  *((_QWORD *)v57 + 8) = v56;
  v80 = (__int128 *)v57;
  sub_210216F3C(*v30, (uint64_t)&v78);
  v60 = v80;
  if (v80 == &v78)
  {
    v61 = 4;
    v60 = &v78;
  }
  else
  {
    if (!v80)
      return;
    v61 = 5;
  }
  (*(void (**)(__int128 *, uint64_t, uint64_t))(*(_QWORD *)v60 + 8 * v61))(v60, v58, v59);
}

void sub_20EC962A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,std::runtime_error a22,std::exception_ptr a23,uint64_t a24,uint64_t a25,std::exception_ptr a26)
{
  std::__assoc_sub_state **v26;
  uint64_t v27;
  std::__assoc_sub_state *v28;
  std::exception_ptr v29;

  if (a2)
  {
    __cxa_begin_catch(exception_object);
    std::current_exception();
    __cxa_end_catch();
    v28 = *v26;
    if (*v26)
    {
      std::exception_ptr::exception_ptr(&a26, &a23);
      v29.__ptr_ = &a26;
      std::__assoc_sub_state::set_exception(v28, v29);
      std::exception_ptr::~exception_ptr(&a26);
      std::exception_ptr::~exception_ptr(&a23);
      std::runtime_error::~runtime_error(&a22);
      if (*(char *)(v27 - 97) < 0)
        operator delete(*(void **)(v27 - 120));
      JUMPOUT(0x20EC961B4);
    }
    sub_20E96CE78(3u);
  }
  _Unwind_Resume(exception_object);
}

void sub_20EC96318(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,std::runtime_error a22,std::exception_ptr a23,uint64_t a24,uint64_t a25,std::exception_ptr a26)
{
  uint64_t v26;

  std::exception_ptr::~exception_ptr(&a23);
  std::runtime_error::~runtime_error(&a22);
  if (*(char *)(v26 - 97) < 0)
  {
    operator delete(*(void **)(v26 - 120));
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void sub_20EC9636C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,char *a30)
{
  char *v30;
  char *v32;
  uint64_t v33;

  v32 = a30;
  if (a30 == v30)
  {
    v33 = 4;
    v32 = &a27;
  }
  else
  {
    if (!a30)
    {
      sub_20EC93470((uint64_t)&a9);
      _Unwind_Resume(a1);
    }
    v33 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v32 + 8 * v33))();
  sub_20EC93470((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20EC963C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10)
  {
    std::__shared_weak_count::__release_weak(a10);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void sub_20EC963E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27)
{
  _QWORD *v27;
  uint64_t v28;
  _QWORD *v30;
  uint64_t v31;

  v30 = *(_QWORD **)(v28 - 96);
  if (v30 == v27)
  {
    v31 = 4;
    v30 = (_QWORD *)(v28 - 120);
  }
  else
  {
    if (!v30)
      goto LABEL_6;
    v31 = 5;
  }
  (*(void (**)(void))(*v30 + 8 * v31))();
LABEL_6:
  sub_20EA031A8(&a27);
  sub_20E86665C((uint64_t)&a25);
  sub_20E86665C((uint64_t)&a18);
  sub_20E86665C((uint64_t)&a20);
  _Unwind_Resume(a1);
}

void sub_20EC96484(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  uint64_t v11;
  va_list va;
  uint64_t v13;
  va_list va1;

  va_start(va1, a10);
  va_start(va, a10);
  v11 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  sub_20E86665C((uint64_t)va);
  sub_20E86665C((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_20EC964A0(uint64_t a1)
{
  uint64_t *v1;

  v1 = *(uint64_t **)(a1 + 72);
  if (v1)
  {
    sub_210217048(*v1);
  }
  else
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 167, (uint64_t)"scheduler_ != nullptr", 21, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    sub_210217048(**(_QWORD **)(a1 + 72));
  }
}

_QWORD *sub_20EC96514(_QWORD *a1, uint64_t a2)
{
  uint64_t **v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *result;
  uint64_t v12;
  _BYTE v13[24];
  _BYTE *v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v4 = (uint64_t **)a1[9];
  if (!v4)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 181, (uint64_t)"scheduler_", 10, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v4 = (uint64_t **)a1[9];
  }
  v6 = a1[4];
  v5 = a1[5];
  if (v5)
  {
    v7 = (unint64_t *)(v5 + 16);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  v9 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v10 = operator new(0x28uLL);
  *v10 = &off_24C9D2718;
  v10[1] = v6;
  v10[2] = v5;
  v10[3] = &off_24C9D1110;
  v10[4] = v9;
  v14 = v10;
  sub_210216F3C(*v4, (uint64_t)v13);
  result = v14;
  if (v14 == v13)
  {
    v12 = 4;
    result = v13;
  }
  else
  {
    if (!v14)
      return result;
    v12 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v12))();
}

void sub_20EC96644(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v13;

  if (a13 == v13)
  {
    (*(void (**)(void))(a10 + 32))();
    _Unwind_Resume(exception_object);
  }
  if (a13)
  {
    (*(void (**)(void))(*(_QWORD *)a13 + 40))();
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20EC966B8(_QWORD *a1, uint64_t a2)
{
  uint64_t **v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *result;
  uint64_t v12;
  _BYTE v13[24];
  _BYTE *v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v4 = (uint64_t **)a1[9];
  if (!v4)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 202, (uint64_t)"scheduler_", 10, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v4 = (uint64_t **)a1[9];
  }
  v6 = a1[4];
  v5 = a1[5];
  if (v5)
  {
    v7 = (unint64_t *)(v5 + 16);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  v9 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v10 = operator new(0x28uLL);
  *v10 = &off_24C9D2798;
  v10[1] = v6;
  v10[2] = v5;
  v10[3] = &off_24C9CC500;
  v10[4] = v9;
  v14 = v10;
  sub_210216F3C(*v4, (uint64_t)v13);
  result = v14;
  if (v14 == v13)
  {
    v12 = 4;
    result = v13;
  }
  else
  {
    if (!v14)
      return result;
    v12 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v12))();
}

void sub_20EC967E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v13;

  if (a13 == v13)
  {
    (*(void (**)(void))(a10 + 32))();
    _Unwind_Resume(exception_object);
  }
  if (a13)
  {
    (*(void (**)(void))(*(_QWORD *)a13 + 40))();
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_20EC9685C@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  unint64_t *v5;
  int v6;
  unint64_t v7;
  uint64_t **v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *p_shared_weak_owners;
  unint64_t v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v22;
  _BYTE v23[24];
  _BYTE *v24;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  v4 = operator new();
  *(_QWORD *)(v4 + 8) = 0;
  v5 = (unint64_t *)(v4 + 8);
  *(_QWORD *)(v4 + 24) = 850045863;
  *(_QWORD *)(v4 + 16) = 0;
  *(_OWORD *)(v4 + 32) = 0u;
  *(_OWORD *)(v4 + 48) = 0u;
  *(_OWORD *)(v4 + 64) = 0u;
  *(_QWORD *)(v4 + 80) = 0;
  *(_QWORD *)(v4 + 88) = 1018212795;
  *(_OWORD *)(v4 + 96) = 0u;
  *(_OWORD *)(v4 + 112) = 0u;
  *(_OWORD *)(v4 + 124) = 0u;
  *(_QWORD *)v4 = &off_24C9B80A0;
  v22 = v4;
  std::mutex::lock((std::mutex *)(v4 + 24));
  v6 = *(_DWORD *)(v4 + 136);
  if ((v6 & 2) != 0)
    sub_20E96CE78(1u);
  do
    v7 = __ldxr(v5);
  while (__stxr(v7 + 1, v5));
  *(_DWORD *)(v4 + 136) = v6 | 2;
  std::mutex::unlock((std::mutex *)(v4 + 24));
  v8 = (uint64_t **)a1[9];
  v9 = (std::__shared_weak_count *)a1[5];
  if (v9)
  {
    v10 = std::__shared_weak_count::lock(v9);
    v11 = v10;
    if (v10)
    {
      v12 = a1[4];
      p_shared_weak_owners = (unint64_t *)&v10->__shared_weak_owners_;
      do
        v14 = __ldxr(p_shared_weak_owners);
      while (__stxr(v14 + 1, p_shared_weak_owners));
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        v16 = __ldaxr(p_shared_owners);
      while (__stlxr(v16 - 1, p_shared_owners));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    else
    {
      v12 = 0;
    }
  }
  else
  {
    v12 = 0;
    v11 = 0;
  }
  v17 = operator new(0x20uLL);
  *v17 = &off_24C9D2818;
  v17[1] = v12;
  v17[2] = v11;
  v17[3] = &v22;
  v24 = v17;
  sub_210216F3C(*v8, (uint64_t)v23);
  v18 = v24;
  if (v24 == v23)
  {
    v19 = 4;
    v18 = v23;
    goto LABEL_17;
  }
  if (v24)
  {
    v19 = 5;
LABEL_17:
    (*(void (**)(_QWORD *))(*v18 + 8 * v19))(v18);
  }
  std::__assoc_sub_state::wait((std::__assoc_sub_state *)v4);
  sub_20EA04D14(v4, a2);
  do
    v20 = __ldaxr(v5);
  while (__stlxr(v20 - 1, v5));
  if (!v20)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
  return sub_20EA04DE8(&v22);
}

void sub_20EC96A74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  unint64_t *v10;
  unint64_t v12;

  do
    v12 = __ldaxr(v10);
  while (__stlxr(v12 - 1, v10));
  if (!v12)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
    sub_20EA04DE8(&a9);
    _Unwind_Resume(a1);
  }
  sub_20EA04DE8(&a9);
  _Unwind_Resume(a1);
}

uint64_t *sub_20EC96B3C@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  unint64_t *v5;
  int v6;
  unint64_t v7;
  uint64_t **v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *p_shared_weak_owners;
  unint64_t v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v22;
  _BYTE v23[24];
  _BYTE *v24;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  v4 = operator new();
  *(_QWORD *)(v4 + 8) = 0;
  v5 = (unint64_t *)(v4 + 8);
  *(_QWORD *)(v4 + 24) = 850045863;
  *(_QWORD *)(v4 + 16) = 0;
  *(_OWORD *)(v4 + 32) = 0u;
  *(_OWORD *)(v4 + 48) = 0u;
  *(_OWORD *)(v4 + 64) = 0u;
  *(_QWORD *)(v4 + 80) = 0;
  *(_QWORD *)(v4 + 88) = 1018212795;
  *(_OWORD *)(v4 + 96) = 0u;
  *(_OWORD *)(v4 + 112) = 0u;
  *(_OWORD *)(v4 + 124) = 0u;
  *(_QWORD *)v4 = &off_24C9B80A0;
  v22 = v4;
  std::mutex::lock((std::mutex *)(v4 + 24));
  v6 = *(_DWORD *)(v4 + 136);
  if ((v6 & 2) != 0)
    sub_20E96CE78(1u);
  do
    v7 = __ldxr(v5);
  while (__stxr(v7 + 1, v5));
  *(_DWORD *)(v4 + 136) = v6 | 2;
  std::mutex::unlock((std::mutex *)(v4 + 24));
  v8 = (uint64_t **)a1[9];
  v9 = (std::__shared_weak_count *)a1[5];
  if (v9)
  {
    v10 = std::__shared_weak_count::lock(v9);
    v11 = v10;
    if (v10)
    {
      v12 = a1[4];
      p_shared_weak_owners = (unint64_t *)&v10->__shared_weak_owners_;
      do
        v14 = __ldxr(p_shared_weak_owners);
      while (__stxr(v14 + 1, p_shared_weak_owners));
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        v16 = __ldaxr(p_shared_owners);
      while (__stlxr(v16 - 1, p_shared_owners));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    else
    {
      v12 = 0;
    }
  }
  else
  {
    v12 = 0;
    v11 = 0;
  }
  v17 = operator new(0x20uLL);
  *v17 = &off_24C9D2898;
  v17[1] = v12;
  v17[2] = v11;
  v17[3] = &v22;
  v24 = v17;
  sub_210216F3C(*v8, (uint64_t)v23);
  v18 = v24;
  if (v24 == v23)
  {
    v19 = 4;
    v18 = v23;
    goto LABEL_17;
  }
  if (v24)
  {
    v19 = 5;
LABEL_17:
    (*(void (**)(_QWORD *))(*v18 + 8 * v19))(v18);
  }
  std::__assoc_sub_state::wait((std::__assoc_sub_state *)v4);
  sub_20EA04D14(v4, a2);
  do
    v20 = __ldaxr(v5);
  while (__stlxr(v20 - 1, v5));
  if (!v20)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
  return sub_20EA04DE8(&v22);
}

void sub_20EC96D54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  unint64_t *v10;
  unint64_t v12;

  do
    v12 = __ldaxr(v10);
  while (__stlxr(v12 - 1, v10));
  if (!v12)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
    sub_20EA04DE8(&a9);
    _Unwind_Resume(a1);
  }
  sub_20EA04DE8(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20EC96E1C(uint64_t a1)
{
  return sub_20EC96F8C(a1 - 16);
}

void sub_20EC96E24(uint64_t a1)
{
  sub_20EC96F8C(a1 - 16);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20EC96E4C(uint64_t a1, uint64_t a2)
{
  return sub_20EC96514((_QWORD *)(a1 - 16), a2);
}

uint64_t *sub_20EC96E54@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_20EC9685C((_QWORD *)(a1 - 16), a2);
}

uint64_t *sub_20EC96E5C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_20EC96B3C((_QWORD *)(a1 - 16), a2);
}

uint64_t sub_20EC96E64(uint64_t a1)
{
  return a1 - 16;
}

uint64_t sub_20EC96E6C(uint64_t a1)
{
  return sub_20EC96F8C(a1 - 24);
}

void sub_20EC96E74(uint64_t a1)
{
  sub_20EC96F8C(a1 - 24);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20EC96E9C(uint64_t a1, uint64_t a2)
{
  return sub_20EC966B8((_QWORD *)(a1 - 24), a2);
}

uint64_t sub_20EC96EA4(uint64_t a1)
{
  return a1 - 24;
}

uint64_t sub_20EC96EAC(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_20EC96F14(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20EC96F7C(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8));
}

uint64_t sub_20EC96F8C(uint64_t a1)
{
  char **v2;
  char *v3;
  char *v4;
  char *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;

  *(_QWORD *)a1 = &off_24C9D22D8;
  *(_QWORD *)(a1 + 16) = &unk_24C9D2350;
  *(_QWORD *)(a1 + 24) = &unk_24C9D2390;
  v2 = *(char ***)(a1 + 144);
  *(_QWORD *)(a1 + 144) = 0;
  if (v2)
  {
    std::mutex::~mutex((std::mutex *)(v2 + 7));
    if (*((_BYTE *)v2 + 48))
    {
      v3 = *v2;
      if (*v2)
      {
        v4 = v2[1];
        v5 = *v2;
        if (v4 != v3)
        {
          do
          {
            v6 = (std::__shared_weak_count *)*((_QWORD *)v4 - 1);
            if (v6)
            {
              p_shared_owners = (unint64_t *)&v6->__shared_owners_;
              do
                v8 = __ldaxr(p_shared_owners);
              while (__stlxr(v8 - 1, p_shared_owners));
              if (!v8)
              {
                ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
                std::__shared_weak_count::__release_weak(v6);
              }
            }
            v4 -= 16;
          }
          while (v4 != v3);
          v5 = *v2;
        }
        v2[1] = v3;
        operator delete(v5);
      }
    }
    MEMORY[0x212BC6398](v2, 0x1022C400958DFA3);
  }
  if (*(_QWORD *)(a1 + 136))
  {
    v9 = *(_QWORD *)(a1 + 120);
    v10 = *(uint64_t **)(a1 + 128);
    v11 = *v10;
    *(_QWORD *)(v11 + 8) = *(_QWORD *)(v9 + 8);
    **(_QWORD **)(v9 + 8) = v11;
    *(_QWORD *)(a1 + 136) = 0;
    if (v10 != (uint64_t *)(a1 + 120))
    {
      do
      {
        v12 = (uint64_t *)v10[1];
        (*(void (**)(uint64_t *))v10[2])(v10 + 2);
        operator delete(v10);
        v10 = v12;
      }
      while (v12 != (uint64_t *)(a1 + 120));
    }
  }
  if (*(_QWORD *)(a1 + 112))
  {
    v13 = *(_QWORD *)(a1 + 96);
    v14 = *(uint64_t **)(a1 + 104);
    v15 = *v14;
    *(_QWORD *)(v15 + 8) = *(_QWORD *)(v13 + 8);
    **(_QWORD **)(v13 + 8) = v15;
    *(_QWORD *)(a1 + 112) = 0;
    if (v14 != (uint64_t *)(a1 + 96))
    {
      do
      {
        v16 = (uint64_t *)v14[1];
        (*(void (**)(uint64_t *))v14[2])(v14 + 2);
        operator delete(v14);
        v14 = v16;
      }
      while (v16 != (uint64_t *)(a1 + 96));
    }
  }
  v17 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 88) = 0;
  if (v17)
    (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  v18 = *(std::__shared_weak_count **)(a1 + 80);
  if (!v18)
    goto LABEL_27;
  v19 = (unint64_t *)&v18->__shared_owners_;
  do
    v20 = __ldaxr(v19);
  while (__stlxr(v20 - 1, v19));
  if (v20)
  {
LABEL_27:
    if ((*(char *)(a1 + 71) & 0x80000000) == 0)
      goto LABEL_29;
    goto LABEL_28;
  }
  ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
  std::__shared_weak_count::__release_weak(v18);
  if (*(char *)(a1 + 71) < 0)
LABEL_28:
    operator delete(*(void **)(a1 + 48));
LABEL_29:
  v21 = *(std::__shared_weak_count **)(a1 + 40);
  if (v21)
    std::__shared_weak_count::__release_weak(v21);
  return a1;
}

void sub_20EC971A0(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9D24C8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_20EC971B0(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9D24C8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20EC971E8(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  *a1 = &off_24C9D2518;
  v2 = (std::__shared_weak_count *)a1[4];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = (std::__shared_weak_count *)a1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  return a1;
}

void sub_20EC9722C(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  *a1 = &off_24C9D2518;
  v2 = (std::__shared_weak_count *)a1[4];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = (std::__shared_weak_count *)a1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20EC97280(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;

  result = operator new(0x30uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = &off_24C9D2518;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = a1[4];
  result[3] = a1[3];
  result[4] = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 16);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  return result;
}

_QWORD *sub_20EC972F0(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;

  v3 = result[1];
  v2 = result[2];
  *a2 = &off_24C9D2518;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  v6 = result[4];
  a2[3] = result[3];
  a2[4] = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 16);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  return result;
}

void sub_20EC97340(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  v2 = *(std::__shared_weak_count **)(a1 + 32);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
}

void sub_20EC9737C(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  v2 = (std::__shared_weak_count *)__p[4];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = (std::__shared_weak_count *)__p[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  operator delete(__p);
}

void sub_20EC973B4(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  char v21;

  v2 = (std::__shared_weak_count *)a1[4];
  if (!v2)
  {
    v3 = 0;
    v5 = 0;
    v4 = (std::__shared_weak_count *)a1[2];
    if (v4)
      goto LABEL_6;
    goto LABEL_11;
  }
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
  {
    v5 = 0;
    v4 = (std::__shared_weak_count *)a1[2];
    if (v4)
      goto LABEL_6;
LABEL_11:
    v7 = 0;
    v8 = 0;
    goto LABEL_12;
  }
  v4 = (std::__shared_weak_count *)a1[2];
  v5 = a1[3];
  if (!v4)
    goto LABEL_11;
LABEL_6:
  v6 = std::__shared_weak_count::lock(v4);
  v7 = v6;
  if (v6)
  {
    v8 = a1[1];
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
LABEL_12:
    if (!v3)
      goto LABEL_15;
    goto LABEL_13;
  }
  v8 = 0;
  if (!v3)
    goto LABEL_15;
LABEL_13:
  v11 = (unint64_t *)&v3->__shared_owners_;
  do
    v12 = __ldxr(v11);
  while (__stxr(v12 + 1, v11));
LABEL_15:
  if (v8)
  {
    if (v5)
    {
      LOBYTE(v20) = 0;
      v21 = 0;
      sub_20EC976D8((uint64_t *)(v8 + 88), v5, (uint64_t)&v20);
      if (v21)
        sub_20EC93070(&v20);
    }
  }
  if (v3)
  {
    v13 = (unint64_t *)&v3->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  if (v7)
  {
    v15 = (unint64_t *)&v7->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
    do
      v17 = __ldaxr(v15);
    while (__stlxr(v17 - 1, v15));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  if (v3)
  {
    v18 = (unint64_t *)&v3->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_20EC9757C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;

  if (a10)
    sub_20EC93070(&a9);
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  if (v11)
  {
    v15 = (unint64_t *)&v11->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
    do
      v17 = __ldaxr(v15);
    while (__stlxr(v17 - 1, v15));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (v10)
  {
    v18 = (unint64_t *)&v10->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20EC97660(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3vio8cv_types24AccelerometerMeasurementENSt3__110shar"
                     "ed_ptrIKNS4_15odometry_engine12SLAMMetadataEEENS4_22slam_engine_node_group19SlamEngineNodeErrorENS7"
                     "_8optionalISC_EELb0EE25EnqueueMessageAndDispatchIZNKSH_4SendERKS6_EUlT_T0_E_EEvSK_SL_EUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3vio8cv_types24AccelerometerMeasurementENS"
                                "t3__110shared_ptrIKNS4_15odometry_engine12SLAMMetadataEEENS4_22slam_engine_node_group19S"
                                "lamEngineNodeErrorENS7_8optionalISC_EELb0EE25EnqueueMessageAndDispatchIZNKSH_4SendERKS6_"
                                "EUlT_T0_E_EEvSK_SL_EUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3vio8cv_types24AccelerometerMeasurementENSt3__110shared_ptrIKNS4_15odometry_engine12SLAMMetadataEEENS4_22slam_engine_node_group19SlamEngineNodeErrorENS7_8optionalISC_EELb0EE25EnqueueMessageAndDispatchIZNKSH_4SendERKS6_EUlT_T0_E_EEvSK_SL_EUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3vio8cv_types24AccelerometerMeasurementENSt3__110shared_ptrIKNS4_15odometry_engine12SLAMMetadataEEENS4_22slam_engine_node_group19SlamEngineNodeErrorENS7_8optionalISC_EELb0EE25EnqueueMessageAndDispatchIZNKSH_4SendERKS6_EUlT_T0_E_EEvSK_SL_EUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20EC976CC()
{
  return &unk_24C9D2578;
}

void sub_20EC976D8(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t *i;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  char v13;

  v6 = *a1;
  if (!v6)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/ProcessorInputMessageHandlingStrategy.h", 251, (uint64_t)"callable_", 9, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v6 = *a1;
  }
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v6 + 16))(&v11, v6, a2);
  if (v13)
  {
    for (i = (uint64_t *)a1[2]; i != a1 + 1; i = (uint64_t *)i[1])
      (*(void (**)(uint64_t *, uint64_t *))(i[2] + 16))(i + 2, &v11);
  }
  if (*(_BYTE *)(a3 + 8))
  {
    if (!*(_QWORD *)a3)
      sub_20E96CE78(3u);
    sub_20EC92FA0(*(_QWORD *)a3, (uint64_t)&v11);
  }
  if (v13)
  {
    v8 = v12;
    if (v12)
    {
      p_shared_owners = (unint64_t *)&v12->__shared_owners_;
      do
        v10 = __ldaxr(p_shared_owners);
      while (__stlxr(v10 - 1, p_shared_owners));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
  }
}

void sub_20EC97814(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t *a12, uint64_t a13, int a14, __int16 a15, char a16, unsigned __int8 a17, std::exception_ptr a18, char a19)
{
  uint64_t v19;
  uint64_t v20;
  void *v23;
  uint64_t v24;
  uint64_t i;
  uint64_t *v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;

  sub_20E869AA8((uint64_t)&a19);
  if (a2 == 2)
  {
    v23 = __cxa_begin_catch(a1);
    if (*(_QWORD *)(v20 + 48)
      || !sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/ProcessorInputMessageHandlingStrategy.h", 186, (uint64_t)"!error_downstream_.empty()", 26, (uint64_t)"It is mandated that all errors are handled and enforced by a processor. Add an error handler with AddErrorHandler()", 115, (void (*)(void **))sub_21023DDB0))
    {
      v24 = v20 + 32;
      for (i = *(_QWORD *)(v20 + 40); i != v24; i = *(_QWORD *)(i + 8))
        (*(void (**)(uint64_t, void *))(*(_QWORD *)(i + 16) + 16))(i + 16, v23);
      if (*(_BYTE *)(v19 + 8))
      {
        std::current_exception();
        sub_20EC92F40(*(std::__assoc_sub_state **)v19, &a18);
        std::exception_ptr::~exception_ptr(&a18);
      }
      __cxa_end_catch();
      JUMPOUT(0x20EC977C0);
    }
    abort();
  }
  if (a2 == 1)
  {
    v26 = (uint64_t *)__cxa_begin_catch(a1);
    v27 = *v26;
    a11 = *(_QWORD *)(*(_QWORD *)(*v26 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL;
    a10 = (*(uint64_t (**)(void))(v27 + 16))();
    sub_20E9B0CC4("Caught unexpected exception of type: ", (const char *)&a11, "\n", "message: ", (const char *)&a10, "\n");
    if ((a17 & 0x80u) == 0)
      v28 = (uint64_t *)&a12;
    else
      v28 = a12;
    if ((a17 & 0x80u) == 0)
      v29 = a17;
    else
      v29 = a13;
    sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/ProcessorInputMessageHandlingStrategy.h", 140, (uint64_t)"", 0, (uint64_t)v28, v29, (void (*)(void **))sub_21023DDB0);
    abort();
  }
  _Unwind_Resume(a1);
}

void sub_20EC97A10(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  __cxa_end_catch();
  JUMPOUT(0x20EC97A30);
}

_QWORD *sub_20EC97A40(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_24C9D2598;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_20EC97A78(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_24C9D2598;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x212BC6398);
}

__n128 sub_20EC97AC0(__n128 *a1)
{
  __n128 *v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  __n128 result;

  v2 = (__n128 *)operator new(0x38uLL);
  v4 = a1->n128_u64[1];
  v3 = a1[1].n128_u64[0];
  v2->n128_u64[0] = (unint64_t)&off_24C9D2598;
  v2->n128_u64[1] = v4;
  v2[1].n128_u64[0] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v2[1].n128_u64[1] = a1[1].n128_u64[1];
  result = a1[2];
  v2[2] = result;
  v2[3].n128_u64[0] = a1[3].n128_u64[0];
  return result;
}

__n128 sub_20EC97B28(__n128 *a1, __n128 *a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  __n128 result;

  v3 = a1->n128_u64[1];
  v2 = a1[1].n128_u64[0];
  a2->n128_u64[0] = (unint64_t)&off_24C9D2598;
  a2->n128_u64[1] = v3;
  a2[1].n128_u64[0] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  a2[1].n128_u64[1] = a1[1].n128_u64[1];
  result = a1[2];
  a2[3].n128_u64[0] = a1[3].n128_u64[0];
  a2[2] = result;
  return result;
}

void sub_20EC97B70(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void sub_20EC97B80(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void sub_20EC97BAC(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v8;
  char v9;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 8);
      if (v5)
      {
        LOBYTE(v8) = 0;
        v9 = 0;
        sub_20EC976D8((uint64_t *)(v5 + 88), a1 + 24, (uint64_t)&v8);
        if (v9)
          sub_20EC93070(&v8);
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_20EC97C54(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v13;

  if (a10)
    sub_20EC93070(&a9);
  p_shared_owners = (unint64_t *)&v10->__shared_owners_;
  do
    v13 = __ldaxr(p_shared_owners);
  while (__stlxr(v13 - 1, p_shared_owners));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20EC97CA0(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3vio8cv_types24AccelerometerMeasurementENSt3__110shar"
                     "ed_ptrIKNS4_15odometry_engine12SLAMMetadataEEENS4_22slam_engine_node_group19SlamEngineNodeErrorENS7"
                     "_8optionalISC_EELb0EE4SendERKS6_EUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3vio8cv_types24AccelerometerMeasurementENS"
                                "t3__110shared_ptrIKNS4_15odometry_engine12SLAMMetadataEEENS4_22slam_engine_node_group19S"
                                "lamEngineNodeErrorENS7_8optionalISC_EELb0EE4SendERKS6_EUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3vio8cv_types24AccelerometerMeasurementENSt3__110shared_ptrIKNS4_15odometry_engine12SLAMMetadataEEENS4_22slam_engine_node_group19SlamEngineNodeErrorENS7_8optionalISC_EELb0EE4SendERKS6_EUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3vio8cv_types24AccelerometerMeasurementENSt3__110shared_ptrIKNS4_15odometry_engine12SLAMMetadataEEENS4_22slam_engine_node_group19SlamEngineNodeErrorENS7_8optionalISC_EELb0EE4SendERKS6_EUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20EC97D0C()
{
  return &unk_24C9D25F8;
}

_QWORD *sub_20EC97D18(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;

  *a1 = &off_24C9D2618;
  v2 = (std::__shared_weak_count *)a1[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
      goto LABEL_7;
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  v5 = (std::__shared_weak_count *)a1[4];
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
LABEL_7:
  v6 = (std::__shared_weak_count *)a1[2];
  if (v6)
    std::__shared_weak_count::__release_weak(v6);
  return a1;
}

void sub_20EC97DA0(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;

  *a1 = &off_24C9D2618;
  v2 = (std::__shared_weak_count *)a1[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
    {
LABEL_7:
      v6 = (std::__shared_weak_count *)a1[2];
      if (v6)
        std::__shared_weak_count::__release_weak(v6);
      JUMPOUT(0x212BC6398);
    }
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
      goto LABEL_7;
  }
  std::__shared_weak_count::__release_weak(v5);
  goto LABEL_7;
}

_QWORD *sub_20EC97E38(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;

  result = operator new(0x38uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = &off_24C9D2618;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = a1[4];
  result[3] = a1[3];
  result[4] = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 16);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  v10 = a1[6];
  result[5] = a1[5];
  result[6] = v10;
  if (v10)
  {
    v11 = (unint64_t *)(v10 + 8);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  return result;
}

_QWORD *sub_20EC97EC8(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;

  v3 = result[1];
  v2 = result[2];
  *a2 = &off_24C9D2618;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  v6 = result[4];
  a2[3] = result[3];
  a2[4] = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 16);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  v9 = result[6];
  a2[5] = result[5];
  a2[6] = v9;
  if (v9)
  {
    v10 = (unint64_t *)(v9 + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  return result;
}

void sub_20EC97F38(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;

  v2 = (std::__shared_weak_count *)a1[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
      goto LABEL_7;
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  v5 = (std::__shared_weak_count *)a1[4];
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
LABEL_7:
  v6 = (std::__shared_weak_count *)a1[2];
  if (v6)
    std::__shared_weak_count::__release_weak(v6);
}

void sub_20EC97FB8(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;

  v2 = (std::__shared_weak_count *)__p[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)__p[4];
    if (!v5)
      goto LABEL_7;
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  v5 = (std::__shared_weak_count *)__p[4];
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
LABEL_7:
  v6 = (std::__shared_weak_count *)__p[2];
  if (v6)
    std::__shared_weak_count::__release_weak(v6);
  operator delete(__p);
}

void sub_20EC98034(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t *v13;
  std::runtime_error_vtbl **v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  std::runtime_error *exception;
  std::runtime_error *v23;
  std::runtime_error *v24;
  std::runtime_error *v25;
  std::runtime_error v26;
  std::runtime_error v27;

  v2 = (std::__shared_weak_count *)a1[4];
  if (!v2)
  {
    v3 = 0;
    v5 = 0;
    v4 = (std::__shared_weak_count *)a1[2];
    if (v4)
      goto LABEL_6;
LABEL_11:
    v7 = 0;
    v8 = 0;
    goto LABEL_12;
  }
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
  {
    v5 = 0;
    v4 = (std::__shared_weak_count *)a1[2];
    if (v4)
      goto LABEL_6;
    goto LABEL_11;
  }
  v4 = (std::__shared_weak_count *)a1[2];
  v5 = a1[3];
  if (!v4)
    goto LABEL_11;
LABEL_6:
  v6 = std::__shared_weak_count::lock(v4);
  v7 = v6;
  if (!v6)
  {
    v8 = 0;
    if (!v3)
      goto LABEL_15;
    goto LABEL_13;
  }
  v8 = a1[1];
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  do
    v10 = __ldxr(p_shared_owners);
  while (__stxr(v10 + 1, p_shared_owners));
LABEL_12:
  if (!v3)
    goto LABEL_15;
LABEL_13:
  v11 = (unint64_t *)&v3->__shared_owners_;
  do
    v12 = __ldxr(v11);
  while (__stxr(v12 + 1, v11));
LABEL_15:
  if (!v8)
  {
    std::runtime_error::runtime_error(&v27, "Processor is no longer available.");
    v27.__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v23 = std::runtime_error::runtime_error(exception, &v27);
    v23->__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    __cxa_throw(v23, (struct type_info *)&unk_24CA1E2D0, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  if (!v5)
  {
    std::runtime_error::runtime_error(&v26, "Message was dropped.");
    v26.__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    v24 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v25 = std::runtime_error::runtime_error(v24, &v26);
    v25->__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    __cxa_throw(v25, (struct type_info *)&unk_24CA1E2D0, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  v13 = (uint64_t *)(v8 + 88);
  v14 = (std::runtime_error_vtbl **)a1[5];
  v26.__vftable = *v14;
  *v14 = 0;
  LOBYTE(v26.__imp_.__imp_) = 1;
  sub_20EC976D8(v13, v5, (uint64_t)&v26);
  if (LOBYTE(v26.__imp_.__imp_))
    sub_20EC93070((uint64_t *)&v26);
  if (v3)
  {
    v15 = (unint64_t *)&v3->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  if (v7)
  {
    v17 = (unint64_t *)&v7->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
    do
      v19 = __ldaxr(v17);
    while (__stlxr(v19 - 1, v17));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  if (v3)
  {
    v20 = (unint64_t *)&v3->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_20EC98310(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10, uint64_t a11, uint64_t a12, std::runtime_error a13, std::exception_ptr a14)
{
  std::__shared_weak_count *v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;

  std::exception_ptr::~exception_ptr(&a14);
  std::runtime_error::~runtime_error(&a13);
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v18 = __ldaxr(p_shared_owners);
    while (__stlxr(v18 - 1, p_shared_owners));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  if (v15)
  {
    v19 = (unint64_t *)&v15->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
    do
      v21 = __ldaxr(v19);
    while (__stlxr(v21 - 1, v19));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  if (v14)
  {
    v22 = (unint64_t *)&v14->__shared_owners_;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  _Unwind_Resume(a1);
}

void sub_20EC9833C(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::runtime_error a10, std::exception_ptr a11, uint64_t a12, uint64_t a13, uint64_t a14, std::exception_ptr a15)
{
  uint64_t v15;
  std::__assoc_sub_state **v16;
  std::__assoc_sub_state *v17;
  std::exception_ptr v18;

  __cxa_begin_catch(a1);
  std::current_exception();
  __cxa_end_catch();
  v17 = *v16;
  if (v17)
  {
    std::exception_ptr::exception_ptr(&a15, &a11);
    v18.__ptr_ = &a15;
    std::__assoc_sub_state::set_exception(v17, v18);
    std::exception_ptr::~exception_ptr(&a15);
    std::exception_ptr::~exception_ptr(&a11);
    std::runtime_error::~runtime_error(&a10);
    if (!v15)
      JUMPOUT(0x20EC98148);
    JUMPOUT(0x20EC98118);
  }
  sub_20E96CE78(3u);
}

void sub_20EC98398(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::runtime_error a10, std::exception_ptr a11, uint64_t a12, uint64_t a13, uint64_t a14, std::exception_ptr a15)
{
  std::__shared_weak_count *v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t *v23;
  unint64_t v24;

  std::exception_ptr::~exception_ptr(&a11);
  std::runtime_error::~runtime_error(&a10);
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v19 = __ldaxr(p_shared_owners);
    while (__stlxr(v19 - 1, p_shared_owners));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  if (v16)
  {
    v20 = (unint64_t *)&v16->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
    do
      v22 = __ldaxr(v20);
    while (__stlxr(v22 - 1, v20));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  if (v15)
  {
    v23 = (unint64_t *)&v15->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  _Unwind_Resume(a1);
}

void sub_20EC983C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;

  if (a11)
    sub_20EC93070(&a10);
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v15 = __ldaxr(p_shared_owners);
    while (__stlxr(v15 - 1, p_shared_owners));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (v12)
  {
    v16 = (unint64_t *)&v12->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
    do
      v18 = __ldaxr(v16);
    while (__stlxr(v18 - 1, v16));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (v11)
  {
    v19 = (unint64_t *)&v11->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  _Unwind_Resume(a1);
}

uint64_t sub_20EC984B0(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3vio8cv_types24AccelerometerMeasurementENSt3__110shar"
                     "ed_ptrIKNS4_15odometry_engine12SLAMMetadataEEENS4_22slam_engine_node_group19SlamEngineNodeErrorENS7"
                     "_8optionalISC_EELb0EE25EnqueueMessageAndDispatchIZNKSH_7ProcessERKS6_NS7_7promiseISG_EEEUlT_T0_E_EEvSK_SN_EUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3vio8cv_types24AccelerometerMeasurementENS"
                                "t3__110shared_ptrIKNS4_15odometry_engine12SLAMMetadataEEENS4_22slam_engine_node_group19S"
                                "lamEngineNodeErrorENS7_8optionalISC_EELb0EE25EnqueueMessageAndDispatchIZNKSH_7ProcessERK"
                                "S6_NS7_7promiseISG_EEEUlT_T0_E_EEvSK_SN_EUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3vio8cv_types24AccelerometerMeasurementENSt3__110shared_ptrIKNS4_15odometry_engine12SLAMMetadataEEENS4_22slam_engine_node_group19SlamEngineNodeErrorENS7_8optionalISC_EELb0EE25EnqueueMessageAndDispatchIZNKSH_7ProcessERKS6_NS7_7promiseISG_EEEUlT_T0_E_EEvSK_SN_EUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3vio8cv_types24AccelerometerMeasurementENSt3__110shared_ptrIKNS4_15odometry_engine12SLAMMetadataEEENS4_22slam_engine_node_group19SlamEngineNodeErrorENS7_8optionalISC_EELb0EE25EnqueueMessageAndDispatchIZNKSH_7ProcessERKS6_NS7_7promiseISG_EEEUlT_T0_E_EEvSK_SN_EUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20EC9851C()
{
  return &unk_24C9D2678;
}

_QWORD *sub_20EC98528(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;

  *a1 = &off_24C9D2698;
  v2 = (std::__shared_weak_count *)a1[8];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      v5 = (std::__shared_weak_count *)a1[2];
      if (!v5)
        return a1;
      goto LABEL_6;
    }
  }
  v5 = (std::__shared_weak_count *)a1[2];
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
  return a1;
}

void sub_20EC985A4(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;

  *a1 = &off_24C9D2698;
  v2 = (std::__shared_weak_count *)a1[8];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)a1[2];
    if (!v5)
      goto LABEL_9;
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[2];
    if (!v5)
      goto LABEL_9;
  }
  std::__shared_weak_count::__release_weak(v5);
LABEL_9:
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20EC98630(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  result = operator new(0x48uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *result = &off_24C9D2698;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  result[3] = *(_QWORD *)(a1 + 24);
  *((_OWORD *)result + 2) = *(_OWORD *)(a1 + 32);
  v7 = *(_QWORD *)(a1 + 56);
  result[6] = *(_QWORD *)(a1 + 48);
  result[7] = v7;
  v8 = *(_QWORD *)(a1 + 64);
  result[8] = v8;
  if (v8)
  {
    v9 = (unint64_t *)(v8 + 8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  return result;
}

uint64_t sub_20EC986B8(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  __int128 v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;

  v3 = *(_QWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 16);
  *(_QWORD *)a2 = &off_24C9D2698;
  *(_QWORD *)(a2 + 8) = v3;
  *(_QWORD *)(a2 + 16) = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(result + 24);
  v6 = *(_OWORD *)(result + 32);
  *(_QWORD *)(a2 + 48) = *(_QWORD *)(result + 48);
  *(_OWORD *)(a2 + 32) = v6;
  v7 = *(_QWORD *)(result + 64);
  *(_QWORD *)(a2 + 56) = *(_QWORD *)(result + 56);
  *(_QWORD *)(a2 + 64) = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  return result;
}

void sub_20EC98720(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;

  v2 = *(std::__shared_weak_count **)(a1 + 64);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    v5 = *(std::__shared_weak_count **)(a1 + 16);
    if (!v5)
      return;
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  v5 = *(std::__shared_weak_count **)(a1 + 16);
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
}

void sub_20EC98790(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;

  v2 = (std::__shared_weak_count *)__p[8];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      v5 = (std::__shared_weak_count *)__p[2];
      if (!v5)
        goto LABEL_7;
      goto LABEL_6;
    }
  }
  v5 = (std::__shared_weak_count *)__p[2];
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
LABEL_7:
  operator delete(__p);
}

void sub_20EC98800(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  uint64_t v4;
  std::runtime_error_vtbl **v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::runtime_error *exception;
  std::runtime_error *v9;
  std::runtime_error v10;

  v2 = (std::__shared_weak_count *)a1[2];
  if (!v2 || (v3 = std::__shared_weak_count::lock(v2)) == 0 || (v4 = a1[1]) == 0)
  {
    std::runtime_error::runtime_error(&v10, "Invalid operation. Processor is released.");
    v10.__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v9 = std::runtime_error::runtime_error(exception, &v10);
    v9->__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    __cxa_throw(v9, (struct type_info *)&unk_24CA1E2D0, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  v5 = (std::runtime_error_vtbl **)a1[7];
  v10.__vftable = *v5;
  *v5 = 0;
  LOBYTE(v10.__imp_.__imp_) = 1;
  sub_20EC976D8((uint64_t *)(v4 + 88), (uint64_t)(a1 + 3), (uint64_t)&v10);
  if (LOBYTE(v10.__imp_.__imp_))
    sub_20EC93070((uint64_t *)&v10);
  p_shared_owners = (unint64_t *)&v3->__shared_owners_;
  do
    v7 = __ldaxr(p_shared_owners);
  while (__stlxr(v7 - 1, p_shared_owners));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
}

void sub_20EC98910(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::runtime_error a10, std::exception_ptr a11)
{
  __break(1u);
}

void sub_20EC98988(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::runtime_error a10, std::exception_ptr a11)
{
  uint64_t v11;

  std::exception_ptr::~exception_ptr((std::exception_ptr *)&a9);
  std::runtime_error::~runtime_error(&a10);
  if (v11)
    JUMPOUT(0x20EC989BCLL);
  JUMPOUT(0x20EC989ECLL);
}

uint64_t sub_20EC989F4(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3vio8cv_types24AccelerometerMeasurementENSt3__110shar"
                     "ed_ptrIKNS4_15odometry_engine12SLAMMetadataEEENS4_22slam_engine_node_group19SlamEngineNodeErrorENS7"
                     "_8optionalISC_EELb0EE7ProcessERKS6_NS7_7promiseISG_EEEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3vio8cv_types24AccelerometerMeasurementENS"
                                "t3__110shared_ptrIKNS4_15odometry_engine12SLAMMetadataEEENS4_22slam_engine_node_group19S"
                                "lamEngineNodeErrorENS7_8optionalISC_EELb0EE7ProcessERKS6_NS7_7promiseISG_EEEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3vio8cv_types24AccelerometerMeasurementENSt3__110shared_ptrIKNS4_15odometry_engine12SLAMMetadataEEENS4_22slam_engine_node_group19SlamEngineNodeErrorENS7_8optionalISC_EELb0EE7ProcessERKS6_NS7_7promiseISG_EEEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3vio8cv_types24AccelerometerMeasurementENSt3__110shared_ptrIKNS4_15odometry_engine12SLAMMetadataEEENS4_22slam_engine_node_group19SlamEngineNodeErrorENS7_8optionalISC_EELb0EE7ProcessERKS6_NS7_7promiseISG_EEEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20EC98A60()
{
  return &unk_24C9D26F8;
}

_QWORD *sub_20EC98A6C(_QWORD *a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;

  *a1 = &off_24C9D2718;
  v2 = a1[4];
  a1[3] = &off_24C9D1110;
  a1[4] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = (std::__shared_weak_count *)a1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  return a1;
}

void sub_20EC98AC4(_QWORD *a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;

  *a1 = &off_24C9D2718;
  v2 = a1[4];
  a1[3] = &off_24C9D1110;
  a1[4] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = (std::__shared_weak_count *)a1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20EC98B2C(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;

  v2 = operator new(0x28uLL);
  v3 = v2;
  v5 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  *v2 = &off_24C9D2718;
  v2[1] = v5;
  v2[2] = v4;
  if (v4)
  {
    v6 = (unint64_t *)(v4 + 16);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  v2[3] = &off_24C9D1110;
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32));
  return v3;
}

void sub_20EC98BA4(_Unwind_Exception *a1)
{
  _QWORD *v1;
  std::__shared_weak_count *v3;

  v3 = (std::__shared_weak_count *)v1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20EC98BC4(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  *a2 = &off_24C9D2718;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  a2[3] = &off_24C9D1110;
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32));
}

void sub_20EC98C2C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  std::__shared_weak_count *v3;

  v3 = *(std::__shared_weak_count **)(v1 + 16);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  _Unwind_Resume(exception_object);
}

void sub_20EC98C44(_QWORD *a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;

  v2 = a1[4];
  a1[3] = &off_24C9D1110;
  a1[4] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = (std::__shared_weak_count *)a1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
}

void sub_20EC98C94(_QWORD *__p)
{
  uint64_t v2;
  std::__shared_weak_count *v3;

  v2 = __p[4];
  __p[3] = &off_24C9D1110;
  __p[4] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = (std::__shared_weak_count *)__p[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  operator delete(__p);
}

void sub_20EC98CE0(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;

  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = a1[1];
      if (v5)
      {
        v6 = operator new(0x20uLL);
        v7 = a1[4];
        a1[4] = 0;
        v6[2] = &off_24C9D1110;
        v6[3] = v7;
        v9 = *(_QWORD *)(v5 + 96);
        v8 = (_QWORD *)(v5 + 96);
        *v6 = v9;
        v6[1] = v8;
        *(_QWORD *)(v9 + 8) = v6;
        *v8 = v6;
        ++v8[2];
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v11 = __ldaxr(p_shared_owners);
      while (__stlxr(v11 - 1, p_shared_owners));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_20EC98D94(_Unwind_Exception *exception_object)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v4;

  p_shared_owners = (unint64_t *)&v1->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20EC98DD0(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3kit11concurrency6detail9ProcessorINS_3vio8cv_types24AccelerometerMeasurementENSt3__110share"
                     "d_ptrIKNS4_15odometry_engine12SLAMMetadataEEENS4_22slam_engine_node_group19SlamEngineNodeErrorENS7_"
                     "8optionalISC_EELb0EE9SubscribeENS1_12ChannelInputISC_EEEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4cv3d3kit11concurrency6detail9ProcessorINS_3vio8cv_types24AccelerometerMeasurementENSt"
                                "3__110shared_ptrIKNS4_15odometry_engine12SLAMMetadataEEENS4_22slam_engine_node_group19Sl"
                                "amEngineNodeErrorENS7_8optionalISC_EELb0EE9SubscribeENS1_12ChannelInputISC_EEEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3kit11concurrency6detail9ProcessorINS_3vio8cv_types24AccelerometerMeasurementENSt3__110shared_ptrIKNS4_15odometry_engine12SLAMMetadataEEENS4_22slam_engine_node_group19SlamEngineNodeErrorENS7_8optionalISC_EELb0EE9SubscribeENS1_12ChannelInputISC_EEEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3kit11concurrency6detail9ProcessorINS_3vio8cv_types24AccelerometerMeasurementENSt3__110shared_ptrIKNS4_15odometry_engine12SLAMMetadataEEENS4_22slam_engine_node_group19SlamEngineNodeErrorENS7_8optionalISC_EELb0EE9SubscribeENS1_12ChannelInputISC_EEEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20EC98E3C()
{
  return &unk_24C9D2778;
}

_QWORD *sub_20EC98E48(_QWORD *a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;

  *a1 = &off_24C9D2798;
  v2 = a1[4];
  a1[3] = &off_24C9CC500;
  a1[4] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = (std::__shared_weak_count *)a1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  return a1;
}

void sub_20EC98EA0(_QWORD *a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;

  *a1 = &off_24C9D2798;
  v2 = a1[4];
  a1[3] = &off_24C9CC500;
  a1[4] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = (std::__shared_weak_count *)a1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20EC98F08(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;

  v2 = operator new(0x28uLL);
  v3 = v2;
  v5 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  *v2 = &off_24C9D2798;
  v2[1] = v5;
  v2[2] = v4;
  if (v4)
  {
    v6 = (unint64_t *)(v4 + 16);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  v2[3] = &off_24C9CC500;
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32));
  return v3;
}

void sub_20EC98F80(_Unwind_Exception *a1)
{
  _QWORD *v1;
  std::__shared_weak_count *v3;

  v3 = (std::__shared_weak_count *)v1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20EC98FA0(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  *a2 = &off_24C9D2798;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  a2[3] = &off_24C9CC500;
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32));
}

void sub_20EC99008(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  std::__shared_weak_count *v3;

  v3 = *(std::__shared_weak_count **)(v1 + 16);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  _Unwind_Resume(exception_object);
}

void sub_20EC99020(_QWORD *a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;

  v2 = a1[4];
  a1[3] = &off_24C9CC500;
  a1[4] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = (std::__shared_weak_count *)a1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
}

void sub_20EC99070(_QWORD *__p)
{
  uint64_t v2;
  std::__shared_weak_count *v3;

  v2 = __p[4];
  __p[3] = &off_24C9CC500;
  __p[4] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = (std::__shared_weak_count *)__p[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  operator delete(__p);
}

void sub_20EC990BC(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;

  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = a1[1];
      if (v5)
      {
        v6 = operator new(0x20uLL);
        v7 = a1[4];
        a1[4] = 0;
        v6[2] = &off_24C9CC500;
        v6[3] = v7;
        v9 = *(_QWORD *)(v5 + 120);
        v8 = (_QWORD *)(v5 + 120);
        *v6 = v9;
        v6[1] = v8;
        *(_QWORD *)(v9 + 8) = v6;
        *v8 = v6;
        ++v8[2];
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v11 = __ldaxr(p_shared_owners);
      while (__stlxr(v11 - 1, p_shared_owners));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_20EC99170(_Unwind_Exception *exception_object)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v4;

  p_shared_owners = (unint64_t *)&v1->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20EC991AC(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3kit11concurrency6detail9ProcessorINS_3vio8cv_types24AccelerometerMeasurementENSt3__110share"
                     "d_ptrIKNS4_15odometry_engine12SLAMMetadataEEENS4_22slam_engine_node_group19SlamEngineNodeErrorENS7_"
                     "8optionalISC_EELb0EE15AddErrorHandlerENS1_12ChannelInputISE_EEEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4cv3d3kit11concurrency6detail9ProcessorINS_3vio8cv_types24AccelerometerMeasurementENSt"
                                "3__110shared_ptrIKNS4_15odometry_engine12SLAMMetadataEEENS4_22slam_engine_node_group19Sl"
                                "amEngineNodeErrorENS7_8optionalISC_EELb0EE15AddErrorHandlerENS1_12ChannelInputISE_EEEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3kit11concurrency6detail9ProcessorINS_3vio8cv_types24AccelerometerMeasurementENSt3__110shared_ptrIKNS4_15odometry_engine12SLAMMetadataEEENS4_22slam_engine_node_group19SlamEngineNodeErrorENS7_8optionalISC_EELb0EE15AddErrorHandlerENS1_12ChannelInputISE_EEEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3kit11concurrency6detail9ProcessorINS_3vio8cv_types24AccelerometerMeasurementENSt3__110shared_ptrIKNS4_15odometry_engine12SLAMMetadataEEENS4_22slam_engine_node_group19SlamEngineNodeErrorENS7_8optionalISC_EELb0EE15AddErrorHandlerENS1_12ChannelInputISE_EEEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20EC99218()
{
  return &unk_24C9D27F8;
}

_QWORD *sub_20EC99224(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_24C9D2818;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_20EC9925C(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_24C9D2818;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20EC992A4(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x20uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = &off_24C9D2818;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  result[3] = a1[3];
  return result;
}

_QWORD *sub_20EC992FC(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = result[1];
  v2 = result[2];
  *a2 = &off_24C9D2818;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  a2[3] = result[3];
  return result;
}

void sub_20EC99334(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void sub_20EC99344(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void sub_20EC99370(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  uint64_t *v6;
  unint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p[2];
  char *v16;
  __int128 v17;
  char *v18;
  uint64_t v19;
  __int128 *v20;

  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = a1[1];
      if (!v5)
      {
LABEL_11:
        p_shared_owners = (unint64_t *)&v4->__shared_owners_;
        do
          v14 = __ldaxr(p_shared_owners);
        while (__stlxr(v14 - 1, p_shared_owners));
        if (!v14)
        {
          ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
          std::__shared_weak_count::__release_weak(v4);
        }
        return;
      }
      v6 = (uint64_t *)a1[3];
      v7 = *(_QWORD *)(v5 + 112);
      v18 = 0;
      v17 = 0uLL;
      if (v7)
      {
        if (v7 >> 61)
          sub_20E92CED8();
        v8 = (char *)operator new(8 * v7);
        v9 = &v8[8 * v7];
        *(_QWORD *)&v17 = v8;
        *((_QWORD *)&v17 + 1) = v8;
        v18 = v9;
        v10 = v5 + 96;
        v11 = *(_QWORD *)(v5 + 104);
        v20 = &v17;
        if (v11 != v10)
        {
          do
          {
LABEL_7:
            v19 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v11 + 24) + 48))(*(_QWORD *)(v11 + 24));
            sub_20E9B2D04((uint64_t *)&v20, &v19);
            v11 = *(_QWORD *)(v11 + 8);
          }
          while (v11 != v10);
          *(_OWORD *)__p = v17;
          v16 = v18;
          v12 = *v6;
          if (*v6)
            goto LABEL_9;
          goto LABEL_18;
        }
      }
      else
      {
        v9 = 0;
        v8 = 0;
        v10 = v5 + 96;
        v11 = *(_QWORD *)(v5 + 104);
        v20 = &v17;
        if (v11 != v10)
          goto LABEL_7;
      }
      *(int64x2_t *)__p = vdupq_n_s64((unint64_t)v8);
      v16 = v9;
      v12 = *v6;
      if (*v6)
      {
LABEL_9:
        sub_20EA04C5C(v12, (uint64_t)__p);
        if (__p[0])
        {
          __p[1] = __p[0];
          operator delete(__p[0]);
        }
        goto LABEL_11;
      }
LABEL_18:
      sub_20E96CE78(3u);
    }
  }
}

void sub_20EC994EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v17;

  if (__p)
    operator delete(__p);
  p_shared_owners = (unint64_t *)&v14->__shared_owners_;
  do
    v17 = __ldaxr(p_shared_owners);
  while (__stlxr(v17 - 1, p_shared_owners));
  if (!v17)
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20EC9955C(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3vio8cv_types24AccelerometerMeasurementENSt3__110shar"
                     "ed_ptrIKNS4_15odometry_engine12SLAMMetadataEEENS4_22slam_engine_node_group19SlamEngineNodeErrorENS7"
                     "_8optionalISC_EELb0EE16OutputHandlerIDsEvEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3vio8cv_types24AccelerometerMeasurementENS"
                                "t3__110shared_ptrIKNS4_15odometry_engine12SLAMMetadataEEENS4_22slam_engine_node_group19S"
                                "lamEngineNodeErrorENS7_8optionalISC_EELb0EE16OutputHandlerIDsEvEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3vio8cv_types24AccelerometerMeasurementENSt3__110shared_ptrIKNS4_15odometry_engine12SLAMMetadataEEENS4_22slam_engine_node_group19SlamEngineNodeErrorENS7_8optionalISC_EELb0EE16OutputHandlerIDsEvEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3vio8cv_types24AccelerometerMeasurementENSt3__110shared_ptrIKNS4_15odometry_engine12SLAMMetadataEEENS4_22slam_engine_node_group19SlamEngineNodeErrorENS7_8optionalISC_EELb0EE16OutputHandlerIDsEvEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20EC995C8()
{
  return &unk_24C9D2878;
}

_QWORD *sub_20EC995D4(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_24C9D2898;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_20EC9960C(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_24C9D2898;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20EC99654(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x20uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = &off_24C9D2898;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  result[3] = a1[3];
  return result;
}

_QWORD *sub_20EC996AC(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = result[1];
  v2 = result[2];
  *a2 = &off_24C9D2898;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  a2[3] = result[3];
  return result;
}

void sub_20EC996E4(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void sub_20EC996F4(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void sub_20EC99720(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  uint64_t *v6;
  unint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p[2];
  char *v16;
  __int128 v17;
  char *v18;
  uint64_t v19;
  __int128 *v20;

  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = a1[1];
      if (!v5)
      {
LABEL_11:
        p_shared_owners = (unint64_t *)&v4->__shared_owners_;
        do
          v14 = __ldaxr(p_shared_owners);
        while (__stlxr(v14 - 1, p_shared_owners));
        if (!v14)
        {
          ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
          std::__shared_weak_count::__release_weak(v4);
        }
        return;
      }
      v6 = (uint64_t *)a1[3];
      v7 = *(_QWORD *)(v5 + 136);
      v18 = 0;
      v17 = 0uLL;
      if (v7)
      {
        if (v7 >> 61)
          sub_20E92CED8();
        v8 = (char *)operator new(8 * v7);
        v9 = &v8[8 * v7];
        *(_QWORD *)&v17 = v8;
        *((_QWORD *)&v17 + 1) = v8;
        v18 = v9;
        v10 = v5 + 120;
        v11 = *(_QWORD *)(v5 + 128);
        v20 = &v17;
        if (v11 != v10)
        {
          do
          {
LABEL_7:
            v19 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v11 + 24) + 48))(*(_QWORD *)(v11 + 24));
            sub_20E9B2D04((uint64_t *)&v20, &v19);
            v11 = *(_QWORD *)(v11 + 8);
          }
          while (v11 != v10);
          *(_OWORD *)__p = v17;
          v16 = v18;
          v12 = *v6;
          if (*v6)
            goto LABEL_9;
          goto LABEL_18;
        }
      }
      else
      {
        v9 = 0;
        v8 = 0;
        v10 = v5 + 120;
        v11 = *(_QWORD *)(v5 + 128);
        v20 = &v17;
        if (v11 != v10)
          goto LABEL_7;
      }
      *(int64x2_t *)__p = vdupq_n_s64((unint64_t)v8);
      v16 = v9;
      v12 = *v6;
      if (*v6)
      {
LABEL_9:
        sub_20EA04C5C(v12, (uint64_t)__p);
        if (__p[0])
        {
          __p[1] = __p[0];
          operator delete(__p[0]);
        }
        goto LABEL_11;
      }
LABEL_18:
      sub_20E96CE78(3u);
    }
  }
}

void sub_20EC9989C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v17;

  if (__p)
    operator delete(__p);
  p_shared_owners = (unint64_t *)&v14->__shared_owners_;
  do
    v17 = __ldaxr(p_shared_owners);
  while (__stlxr(v17 - 1, p_shared_owners));
  if (!v17)
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20EC9990C(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3vio8cv_types24AccelerometerMeasurementENSt3__110shar"
                     "ed_ptrIKNS4_15odometry_engine12SLAMMetadataEEENS4_22slam_engine_node_group19SlamEngineNodeErrorENS7"
                     "_8optionalISC_EELb0EE15ErrorHandlerIDsEvEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3vio8cv_types24AccelerometerMeasurementENS"
                                "t3__110shared_ptrIKNS4_15odometry_engine12SLAMMetadataEEENS4_22slam_engine_node_group19S"
                                "lamEngineNodeErrorENS7_8optionalISC_EELb0EE15ErrorHandlerIDsEvEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3vio8cv_types24AccelerometerMeasurementENSt3__110shared_ptrIKNS4_15odometry_engine12SLAMMetadataEEENS4_22slam_engine_node_group19SlamEngineNodeErrorENS7_8optionalISC_EELb0EE15ErrorHandlerIDsEvEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3vio8cv_types24AccelerometerMeasurementENSt3__110shared_ptrIKNS4_15odometry_engine12SLAMMetadataEEENS4_22slam_engine_node_group19SlamEngineNodeErrorENS7_8optionalISC_EELb0EE15ErrorHandlerIDsEvEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20EC99978()
{
  return &unk_24C9D28F8;
}

void sub_20EC99988(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20EC999AC(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t sub_20EC999C4(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail9ProcessorINS1_3vio8cv_types24AccelerometerMeasur"
                     "ementENS0_IKNS6_15odometry_engine12SLAMMetadataEEENS6_22slam_engine_node_group19SlamEngineNodeError"
                     "ENS_8optionalISC_EELb0EEEE27__shared_ptr_default_deleteISH_SH_EE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail9ProcessorINS1_3vio8cv_types24Accelero"
                                "meterMeasurementENS0_IKNS6_15odometry_engine12SLAMMetadataEEENS6_22slam_engine_node_grou"
                                "p19SlamEngineNodeErrorENS_8optionalISC_EELb0EEEE27__shared_ptr_default_deleteISH_SH_EE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail9ProcessorINS1_3vio8cv_types24AccelerometerMeasurementENS0_IKNS6_15odometry_engine12SLAMMetadataEEENS6_22slam_engine_node_group19SlamEngineNodeErrorENS_8optionalISC_EELb0EEEE27__shared_ptr_default_deleteISH_SH_EE"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail9ProcessorINS1_3vio8cv_types24AccelerometerMeasurementENS0_IKNS6_15odometry_engine12SLAMMetadataEEENS6_22slam_engine_node_group19SlamEngineNodeErrorENS_8optionalISC_EELb0EEEE27__shared_ptr_default_deleteISH_SH_EE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

uint64_t sub_20EC99A34(uint64_t a1)
{
  std::__shared_weak_count *v2;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_20EC99A60(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20EC99A9C@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *result;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;

  result = (_QWORD *)operator new();
  v6 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  *result = &off_24C9D2968;
  result[1] = v6;
  result[2] = v5;
  if (v5)
  {
    v7 = (unint64_t *)(v5 + 16);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  *a2 = result;
  return result;
}

void sub_20EC99B04(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 8);
      if (v5)
        (*(void (**)(uint64_t))(*(_QWORD *)v5 + 32))(v5);
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_20EC99B94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20EC99BA8(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 8);
      if (v5)
        (*(void (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_20EC99C38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20EC99C4C(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return 0;
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
    return 0;
  v4 = v3;
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
    v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 48))(v5);
  else
    v6 = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (v9)
    return v6;
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return v6;
}

void sub_20EC99D10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20EC99D24(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return 0;
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
    return 0;
  v4 = v3;
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
    v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 24))(v5);
  else
    v6 = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (v9)
    return v6;
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return v6;
}

void sub_20EC99DE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20EC99DFC(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3)
  {
    v5 = std::__shared_weak_count::lock(v3);
    if (v5)
    {
      v6 = v5;
      v7 = *(_QWORD *)(a1 + 8);
      if (v7)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v7 + 16))(v7, a2);
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
}

void sub_20EC99EA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20EC99EB8(uint64_t a1)
{
  sub_20EC9B500(a1);
  JUMPOUT(0x212BC6398);
}

void sub_20EC99EDC(_QWORD *a1, uint64_t *a2)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_weak_owners;
  unint64_t v8;
  uint64_t *v9;
  std::mutex **v10;
  uint64_t v11;
  uint64_t v12;
  std::__shared_weak_count **v13;
  unint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  std::mutex **v24;
  uint64_t **v25;
  std::__shared_weak_count *v26;
  std::__shared_weak_count *v27;
  std::__shared_weak_count *v28;
  uint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  unint64_t *v32;
  unint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  unint64_t *v40;
  unint64_t v41;
  std::mutex **v42;
  __int128 v43;
  _BYTE v44[24];
  _BYTE *v45;
  uint64_t v46;

  v46 = *MEMORY[0x24BDAC8D0];
  if ((*(unsigned int (**)(_QWORD *))(*a1 + 48))(a1))
  {
    if (!a1[9]
      && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 234, (uint64_t)"scheduler_", 10, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    if (a1[18])
    {
      v4 = (std::__shared_weak_count *)operator new(0x30uLL);
      v4->__shared_owners_ = 0;
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      v4[1].__vftable = 0;
      v6 = v4 + 1;
      v4->__shared_weak_owners_ = 0;
      v4->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9D2BD0;
      v4[1].__shared_owners_ = 0;
      v4[1].__shared_weak_owners_ = 0;
      sub_20E9BFAE0((uint64_t)&v4[1], *a2, a2[1], 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 3));
      p_shared_weak_owners = (unint64_t *)&v4->__shared_weak_owners_;
      do
        v8 = __ldxr(p_shared_weak_owners);
      while (__stxr(v8 + 1, p_shared_weak_owners));
      v9 = (uint64_t *)a1[18];
      v10 = (std::mutex **)operator new();
      *v10 = (std::mutex *)(v9 + 7);
      std::mutex::lock((std::mutex *)(v9 + 7));
      v42 = v10;
      if (!*((_BYTE *)v9 + 48))
        sub_20E866B34();
      v11 = v9[4];
      v12 = *v9;
      v13 = (std::__shared_weak_count **)(*v9 + 16 * v11);
      do
        v14 = __ldxr(p_shared_owners);
      while (__stxr(v14 + 1, p_shared_owners));
      *v13 = v6;
      v15 = v12 + 16 * v11;
      v16 = *(std::__shared_weak_count **)(v15 + 8);
      *(_QWORD *)(v15 + 8) = v4;
      if (v16)
      {
        v17 = (unint64_t *)&v16->__shared_owners_;
        do
          v18 = __ldaxr(v17);
        while (__stlxr(v18 - 1, v17));
        if (!v18)
        {
          ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
          std::__shared_weak_count::__release_weak(v16);
        }
      }
      v19 = (v9[1] - *v9) >> 4;
      v20 = v9[5];
      v21 = v9[4] + 1;
      if (v21 >= v19)
        v22 = (v9[1] - *v9) >> 4;
      else
        v22 = 0;
      v9[4] = v21 - v22;
      if (v20 == v19)
      {
        v23 = v9[3] + 1;
        if (v23 < v19)
          v19 = 0;
        v9[3] = v23 - v19;
        v24 = v42;
        if (!v42)
        {
LABEL_25:
          v25 = (uint64_t **)a1[9];
          v43 = 0uLL;
          v26 = (std::__shared_weak_count *)a1[5];
          if (v26)
          {
            v27 = std::__shared_weak_count::lock(v26);
            if (v27)
            {
              v28 = v27;
              v29 = a1[4];
              v30 = (unint64_t *)&v27->__shared_weak_owners_;
              do
                v31 = __ldxr(v30);
              while (__stxr(v31 + 1, v30));
              *(_QWORD *)&v43 = v29;
              *((_QWORD *)&v43 + 1) = v27;
              v32 = (unint64_t *)&v27->__shared_owners_;
              do
                v33 = __ldaxr(v32);
              while (__stlxr(v33 - 1, v32));
              if (!v33)
              {
                ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
                std::__shared_weak_count::__release_weak(v28);
              }
            }
            else
            {
              v43 = 0uLL;
            }
          }
          v34 = (char *)operator new(0x30uLL);
          *(_QWORD *)v34 = &off_24C9D2C20;
          *(_OWORD *)(v34 + 8) = v43;
          *((_QWORD *)v34 + 3) = v6;
          *((_QWORD *)v34 + 4) = v4;
          v45 = v34;
          sub_210216F3C(*v25, (uint64_t)v44);
          v38 = v45;
          if (v45 == v44)
          {
            v39 = 4;
            v38 = v44;
          }
          else
          {
            if (!v45)
              goto LABEL_39;
            v39 = 5;
          }
          (*(void (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(*v38 + 8 * v39))(v38, v35, v36, v37);
LABEL_39:
          if (v4)
          {
            v40 = (unint64_t *)&v4->__shared_owners_;
            do
              v41 = __ldaxr(v40);
            while (__stlxr(v41 - 1, v40));
            if (!v41)
            {
              ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
              std::__shared_weak_count::__release_weak(v4);
            }
          }
          return;
        }
      }
      else
      {
        v9[5] = v20 + 1;
        v24 = v42;
        if (!v42)
          goto LABEL_25;
      }
      std::mutex::unlock(*v24);
      MEMORY[0x212BC6398](v24, 0x20C4093837F09);
      goto LABEL_25;
    }
  }
}

void sub_20EC9A23C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, char *a19)
{
  char *v19;
  char *v21;
  uint64_t v22;

  v21 = a19;
  if (a19 == v19)
  {
    v22 = 4;
    v21 = &a16;
  }
  else
  {
    if (!a19)
      goto LABEL_6;
    v22 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v21 + 8 * v22))();
LABEL_6:
  sub_20EA02254((uint64_t)&a9);
  sub_20E86665C((uint64_t)&a14);
  _Unwind_Resume(a1);
}

void sub_20EC9A28C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::mutex **a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  std::__shared_weak_count *v14;

  sub_20EA0228C(&a9);
  std::__shared_weak_count::__release_weak(v14);
  sub_20E86665C((uint64_t)&a14);
  _Unwind_Resume(a1);
}

void sub_20EC9A2B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  std::__shared_weak_count *v6;
  uint64_t v7;
  va_list va;

  va_start(va, a6);
  MEMORY[0x212BC6398](v7, 0x20C4093837F09);
  std::__shared_weak_count::__release_weak(v6);
  sub_20E86665C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20EC9A2E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  std::__shared_weak_count *v14;

  std::__shared_weak_count::__release_weak(v14);
  sub_20E86665C((uint64_t)&a14);
  _Unwind_Resume(a1);
}

void sub_20EC9A300(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t sub_20EC9A31C(uint64_t result)
{
  atomic_store(1u, (unsigned __int8 *)(result + 8));
  return result;
}

uint64_t sub_20EC9A32C(uint64_t result)
{
  atomic_store(0, (unsigned __int8 *)(result + 8));
  return result;
}

uint64_t sub_20EC9A338(uint64_t a1)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)(a1 + 8));
  return v1 & 1;
}

void sub_20EC9A348(_QWORD *a1, uint64_t *a2, std::__shared_weak_count_vtbl **a3)
{
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_weak_owners;
  unint64_t v13;
  uint64_t *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  std::__shared_weak_count **v18;
  unint64_t v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  std::mutex **v29;
  uint64_t **v30;
  std::__shared_weak_count *v31;
  std::__shared_weak_count *v32;
  std::__shared_weak_count *v33;
  uint64_t v34;
  unint64_t *v35;
  unint64_t v36;
  unint64_t *v37;
  unint64_t v38;
  char *v39;
  std::string *v40;
  uint64_t v41;
  uint64_t *v42;
  unint64_t v43;
  unint64_t *v44;
  unint64_t v45;
  _QWORD *v46;
  _QWORD *v47;
  _QWORD *v48;
  uint64_t v49;
  std::string *v50;
  std::runtime_error *exception;
  std::runtime_error *v52;
  _QWORD *v53;
  std::__shared_weak_count *v54;
  std::__shared_weak_count *v55;
  std::runtime_error v56;
  std::__shared_weak_count *v57;
  std::__shared_weak_count *v58;
  __int128 v59;
  _QWORD *v60;
  uint64_t v61;
  _QWORD v62[3];
  std::string v63;
  std::string *v64;
  uint64_t v65;

  v65 = *MEMORY[0x24BDAC8D0];
  if (((*(uint64_t (**)(_QWORD *))(*a1 + 48))(a1) & 1) == 0)
  {
    *(_QWORD *)&v59 = "Invalid operation. Interface is disabled for ";
    *((_QWORD *)&v59 + 1) = 45;
    v48 = (_QWORD *)a1[6];
    v47 = a1 + 6;
    v46 = v48;
    v49 = *((unsigned __int8 *)v47 + 23);
    if ((v49 & 0x80u) != 0)
      v49 = v47[1];
    else
      v46 = v47;
    v60 = v46;
    v61 = v49;
    sub_20E8778D4((uint64_t)&v59, (uint64_t)v62, 0, 0, &v63);
    if ((v63.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v50 = &v63;
    else
      v50 = (std::string *)v63.__r_.__value_.__r.__words[0];
    std::runtime_error::runtime_error(&v56, (const char *)v50);
    v56.__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v52 = std::runtime_error::runtime_error(exception, &v56);
    v52->__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    __cxa_throw(v52, (struct type_info *)&unk_24CA1E2D0, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  if (!a1[9]
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 294, (uint64_t)"scheduler_", 10, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  if (a1[18])
  {
    v6 = (std::__shared_weak_count *)operator new(0x20uLL);
    v6->__shared_weak_owners_ = 0;
    v6->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9D1EC0;
    v6[1].__vftable = *a3;
    v55 = v6;
    v53 = &v6[1].__vftable;
    v54 = v6;
    v6->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    *a3 = 0;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    if (!a1[18]
      && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 414, (uint64_t)"limiting_buffer_", 16, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v9 = (std::__shared_weak_count *)operator new(0x30uLL);
    v9->__shared_owners_ = 0;
    v10 = (unint64_t *)&v9->__shared_owners_;
    v9->__shared_weak_owners_ = 0;
    v9->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9D2BD0;
    v9[1].__vftable = 0;
    v11 = v9 + 1;
    v9[1].__shared_owners_ = 0;
    v9[1].__shared_weak_owners_ = 0;
    sub_20E9BFAE0((uint64_t)&v9[1], *a2, a2[1], 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 3));
    v57 = v9 + 1;
    v58 = v9;
    p_shared_weak_owners = (unint64_t *)&v9->__shared_weak_owners_;
    do
      v13 = __ldxr(p_shared_weak_owners);
    while (__stxr(v13 + 1, p_shared_weak_owners));
    v14 = (uint64_t *)a1[18];
    v15 = (_QWORD *)operator new();
    *v15 = v14 + 7;
    std::mutex::lock((std::mutex *)(v14 + 7));
    *(_QWORD *)&v59 = v15;
    *((_QWORD *)&v59 + 1) = v14;
    if (!*((_BYTE *)v14 + 48))
      sub_20E866B34();
    v16 = v14[4];
    v17 = *v14;
    v18 = (std::__shared_weak_count **)(*v14 + 16 * v16);
    do
      v19 = __ldxr(v10);
    while (__stxr(v19 + 1, v10));
    *v18 = v11;
    v20 = v17 + 16 * v16;
    v21 = *(std::__shared_weak_count **)(v20 + 8);
    *(_QWORD *)(v20 + 8) = v9;
    if (v21)
    {
      v22 = (unint64_t *)&v21->__shared_owners_;
      do
        v23 = __ldaxr(v22);
      while (__stlxr(v23 - 1, v22));
      if (!v23)
      {
        ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
        std::__shared_weak_count::__release_weak(v21);
      }
    }
    v24 = (v14[1] - *v14) >> 4;
    v25 = v14[5];
    v26 = v14[4] + 1;
    if (v26 >= v24)
      v27 = (v14[1] - *v14) >> 4;
    else
      v27 = 0;
    v14[4] = v26 - v27;
    if (v25 == v24)
    {
      v28 = v14[3] + 1;
      if (v28 < v24)
        v24 = 0;
      v14[3] = v28 - v24;
      v29 = (std::mutex **)v59;
      if (!(_QWORD)v59)
      {
LABEL_29:
        v30 = (uint64_t **)a1[9];
        v59 = 0uLL;
        v31 = (std::__shared_weak_count *)a1[5];
        if (v31)
        {
          v32 = std::__shared_weak_count::lock(v31);
          if (v32)
          {
            v33 = v32;
            v34 = a1[4];
            v35 = (unint64_t *)&v32->__shared_weak_owners_;
            do
              v36 = __ldxr(v35);
            while (__stxr(v36 + 1, v35));
            *(_QWORD *)&v59 = v34;
            *((_QWORD *)&v59 + 1) = v32;
            v37 = (unint64_t *)&v32->__shared_owners_;
            do
              v38 = __ldaxr(v37);
            while (__stlxr(v38 - 1, v37));
            if (!v38)
            {
              ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
              std::__shared_weak_count::__release_weak(v33);
            }
          }
          else
          {
            v59 = 0uLL;
          }
        }
        v39 = (char *)operator new(0x38uLL);
        *(_QWORD *)v39 = &off_24C9D2CA0;
        *(_OWORD *)(v39 + 8) = v59;
        v59 = 0uLL;
        *((_QWORD *)v39 + 3) = v11;
        *((_QWORD *)v39 + 4) = v9;
        v60 = 0;
        v61 = 0;
        *((_QWORD *)v39 + 5) = v53;
        *((_QWORD *)v39 + 6) = v54;
        v62[0] = 0;
        v62[1] = 0;
        v64 = (std::string *)v39;
        sub_210216F3C(*v30, (uint64_t)&v63);
        v40 = v64;
        if (v64 == &v63)
        {
          v41 = 4;
          v40 = &v63;
        }
        else
        {
          if (!v64)
            goto LABEL_43;
          v41 = 5;
        }
        (*(void (**)(void))(v40->__r_.__value_.__r.__words[0] + 8 * v41))();
LABEL_43:
        if (v58)
        {
          v42 = &v58->__shared_owners_;
          do
            v43 = __ldaxr((unint64_t *)v42);
          while (__stlxr(v43 - 1, (unint64_t *)v42));
          if (!v43)
          {
            ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
            std::__shared_weak_count::__release_weak(v58);
          }
        }
        if (v55)
        {
          v44 = (unint64_t *)&v55->__shared_owners_;
          do
            v45 = __ldaxr(v44);
          while (__stlxr(v45 - 1, v44));
          if (!v45)
          {
            ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
            std::__shared_weak_count::__release_weak(v55);
          }
        }
        return;
      }
    }
    else
    {
      v14[5] = v25 + 1;
      v29 = (std::mutex **)v59;
      if (!(_QWORD)v59)
        goto LABEL_29;
    }
    std::mutex::unlock(*v29);
    MEMORY[0x212BC6398](v29, 0x20C4093837F09);
    goto LABEL_29;
  }
}

void sub_20EC9A85C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::runtime_error a14, std::exception_ptr a15, uint64_t a16, uint64_t a17, std::exception_ptr a18)
{
  std::__assoc_sub_state **v18;
  uint64_t v19;
  std::__assoc_sub_state *v20;
  std::exception_ptr v21;

  if (a2)
  {
    __cxa_begin_catch(exception_object);
    std::current_exception();
    __cxa_end_catch();
    v20 = *v18;
    if (v20)
    {
      std::exception_ptr::exception_ptr(&a18, &a15);
      v21.__ptr_ = &a18;
      std::__assoc_sub_state::set_exception(v20, v21);
      std::exception_ptr::~exception_ptr(&a18);
      std::exception_ptr::~exception_ptr(&a15);
      std::runtime_error::~runtime_error(&a14);
      if (*(char *)(v19 - 65) < 0)
        operator delete(*(void **)(v19 - 88));
      JUMPOUT(0x20EC9A774);
    }
    sub_20E96CE78(3u);
  }
  _Unwind_Resume(exception_object);
}

void sub_20EC9A8D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::runtime_error a14, std::exception_ptr a15, uint64_t a16, uint64_t a17, std::exception_ptr a18)
{
  uint64_t v18;

  std::exception_ptr::~exception_ptr(&a15);
  std::runtime_error::~runtime_error(&a14);
  if (*(char *)(v18 - 65) < 0)
  {
    operator delete(*(void **)(v18 - 88));
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void sub_20EC9A930(_Unwind_Exception *a1, uint64_t a2, ...)
{
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  va_list va;
  uint64_t v9;
  uint64_t v10;
  va_list va1;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  va_list va2;
  uint64_t v18;
  va_list va3;

  va_start(va3, a2);
  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  v7 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v10 = va_arg(va2, _QWORD);
  v12 = va_arg(va2, _QWORD);
  v13 = va_arg(va2, _QWORD);
  v14 = va_arg(va2, _QWORD);
  v15 = va_arg(va2, _QWORD);
  va_copy(va3, va2);
  v16 = va_arg(va3, _QWORD);
  v18 = va_arg(va3, _QWORD);
  v5 = *(_QWORD **)(v3 - 64);
  if (v5 == v2)
  {
    v6 = 4;
    v5 = (_QWORD *)(v3 - 88);
  }
  else
  {
    if (!v5)
      goto LABEL_6;
    v6 = 5;
  }
  (*(void (**)(void))(*v5 + 8 * v6))();
LABEL_6:
  sub_20EA031A8((uint64_t *)va3);
  sub_20E86665C((uint64_t)va2);
  sub_20E86665C((uint64_t)va);
  sub_20E86665C((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_20EC9A9D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12)
{
  std::__shared_weak_count *v12;
  void *v14;

  std::__shared_weak_count::~__shared_weak_count(v12);
  operator delete(v14);
  sub_20E86665C((uint64_t)&a10);
  sub_20E86665C((uint64_t)&a12);
  _Unwind_Resume(a1);
}

void sub_20EC9A9F8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  sub_20E86665C((uint64_t)va);
  sub_20E86665C((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_20EC9AA14(uint64_t a1)
{
  uint64_t *v1;

  v1 = *(uint64_t **)(a1 + 72);
  if (v1)
  {
    sub_210217048(*v1);
  }
  else
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 167, (uint64_t)"scheduler_ != nullptr", 21, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    sub_210217048(**(_QWORD **)(a1 + 72));
  }
}

_QWORD *sub_20EC9AA88(_QWORD *a1, uint64_t a2)
{
  uint64_t **v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *result;
  uint64_t v12;
  _BYTE v13[24];
  _BYTE *v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v4 = (uint64_t **)a1[9];
  if (!v4)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 181, (uint64_t)"scheduler_", 10, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v4 = (uint64_t **)a1[9];
  }
  v6 = a1[4];
  v5 = a1[5];
  if (v5)
  {
    v7 = (unint64_t *)(v5 + 16);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  v9 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v10 = operator new(0x28uLL);
  *v10 = &off_24C9D2D20;
  v10[1] = v6;
  v10[2] = v5;
  v10[3] = &off_24C9D1110;
  v10[4] = v9;
  v14 = v10;
  sub_210216F3C(*v4, (uint64_t)v13);
  result = v14;
  if (v14 == v13)
  {
    v12 = 4;
    result = v13;
  }
  else
  {
    if (!v14)
      return result;
    v12 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v12))();
}

void sub_20EC9ABB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v13;

  if (a13 == v13)
  {
    (*(void (**)(void))(a10 + 32))();
    _Unwind_Resume(exception_object);
  }
  if (a13)
  {
    (*(void (**)(void))(*(_QWORD *)a13 + 40))();
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20EC9AC2C(_QWORD *a1, uint64_t a2)
{
  uint64_t **v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *result;
  uint64_t v12;
  _BYTE v13[24];
  _BYTE *v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v4 = (uint64_t **)a1[9];
  if (!v4)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 202, (uint64_t)"scheduler_", 10, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v4 = (uint64_t **)a1[9];
  }
  v6 = a1[4];
  v5 = a1[5];
  if (v5)
  {
    v7 = (unint64_t *)(v5 + 16);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  v9 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v10 = operator new(0x28uLL);
  *v10 = &off_24C9D2DA0;
  v10[1] = v6;
  v10[2] = v5;
  v10[3] = &off_24C9CC500;
  v10[4] = v9;
  v14 = v10;
  sub_210216F3C(*v4, (uint64_t)v13);
  result = v14;
  if (v14 == v13)
  {
    v12 = 4;
    result = v13;
  }
  else
  {
    if (!v14)
      return result;
    v12 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v12))();
}

void sub_20EC9AD5C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v13;

  if (a13 == v13)
  {
    (*(void (**)(void))(a10 + 32))();
    _Unwind_Resume(exception_object);
  }
  if (a13)
  {
    (*(void (**)(void))(*(_QWORD *)a13 + 40))();
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_20EC9ADD0@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  unint64_t *v5;
  int v6;
  unint64_t v7;
  uint64_t **v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *p_shared_weak_owners;
  unint64_t v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v22;
  _BYTE v23[24];
  _BYTE *v24;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  v4 = operator new();
  *(_QWORD *)(v4 + 8) = 0;
  v5 = (unint64_t *)(v4 + 8);
  *(_QWORD *)(v4 + 24) = 850045863;
  *(_QWORD *)(v4 + 16) = 0;
  *(_OWORD *)(v4 + 32) = 0u;
  *(_OWORD *)(v4 + 48) = 0u;
  *(_OWORD *)(v4 + 64) = 0u;
  *(_QWORD *)(v4 + 80) = 0;
  *(_QWORD *)(v4 + 88) = 1018212795;
  *(_OWORD *)(v4 + 96) = 0u;
  *(_OWORD *)(v4 + 112) = 0u;
  *(_OWORD *)(v4 + 124) = 0u;
  *(_QWORD *)v4 = &off_24C9B80A0;
  v22 = v4;
  std::mutex::lock((std::mutex *)(v4 + 24));
  v6 = *(_DWORD *)(v4 + 136);
  if ((v6 & 2) != 0)
    sub_20E96CE78(1u);
  do
    v7 = __ldxr(v5);
  while (__stxr(v7 + 1, v5));
  *(_DWORD *)(v4 + 136) = v6 | 2;
  std::mutex::unlock((std::mutex *)(v4 + 24));
  v8 = (uint64_t **)a1[9];
  v9 = (std::__shared_weak_count *)a1[5];
  if (v9)
  {
    v10 = std::__shared_weak_count::lock(v9);
    v11 = v10;
    if (v10)
    {
      v12 = a1[4];
      p_shared_weak_owners = (unint64_t *)&v10->__shared_weak_owners_;
      do
        v14 = __ldxr(p_shared_weak_owners);
      while (__stxr(v14 + 1, p_shared_weak_owners));
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        v16 = __ldaxr(p_shared_owners);
      while (__stlxr(v16 - 1, p_shared_owners));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    else
    {
      v12 = 0;
    }
  }
  else
  {
    v12 = 0;
    v11 = 0;
  }
  v17 = operator new(0x20uLL);
  *v17 = &off_24C9D2E20;
  v17[1] = v12;
  v17[2] = v11;
  v17[3] = &v22;
  v24 = v17;
  sub_210216F3C(*v8, (uint64_t)v23);
  v18 = v24;
  if (v24 == v23)
  {
    v19 = 4;
    v18 = v23;
    goto LABEL_17;
  }
  if (v24)
  {
    v19 = 5;
LABEL_17:
    (*(void (**)(_QWORD *))(*v18 + 8 * v19))(v18);
  }
  std::__assoc_sub_state::wait((std::__assoc_sub_state *)v4);
  sub_20EA04D14(v4, a2);
  do
    v20 = __ldaxr(v5);
  while (__stlxr(v20 - 1, v5));
  if (!v20)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
  return sub_20EA04DE8(&v22);
}

void sub_20EC9AFE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  unint64_t *v10;
  unint64_t v12;

  do
    v12 = __ldaxr(v10);
  while (__stlxr(v12 - 1, v10));
  if (!v12)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
    sub_20EA04DE8(&a9);
    _Unwind_Resume(a1);
  }
  sub_20EA04DE8(&a9);
  _Unwind_Resume(a1);
}

uint64_t *sub_20EC9B0B0@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  unint64_t *v5;
  int v6;
  unint64_t v7;
  uint64_t **v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *p_shared_weak_owners;
  unint64_t v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v22;
  _BYTE v23[24];
  _BYTE *v24;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  v4 = operator new();
  *(_QWORD *)(v4 + 8) = 0;
  v5 = (unint64_t *)(v4 + 8);
  *(_QWORD *)(v4 + 24) = 850045863;
  *(_QWORD *)(v4 + 16) = 0;
  *(_OWORD *)(v4 + 32) = 0u;
  *(_OWORD *)(v4 + 48) = 0u;
  *(_OWORD *)(v4 + 64) = 0u;
  *(_QWORD *)(v4 + 80) = 0;
  *(_QWORD *)(v4 + 88) = 1018212795;
  *(_OWORD *)(v4 + 96) = 0u;
  *(_OWORD *)(v4 + 112) = 0u;
  *(_OWORD *)(v4 + 124) = 0u;
  *(_QWORD *)v4 = &off_24C9B80A0;
  v22 = v4;
  std::mutex::lock((std::mutex *)(v4 + 24));
  v6 = *(_DWORD *)(v4 + 136);
  if ((v6 & 2) != 0)
    sub_20E96CE78(1u);
  do
    v7 = __ldxr(v5);
  while (__stxr(v7 + 1, v5));
  *(_DWORD *)(v4 + 136) = v6 | 2;
  std::mutex::unlock((std::mutex *)(v4 + 24));
  v8 = (uint64_t **)a1[9];
  v9 = (std::__shared_weak_count *)a1[5];
  if (v9)
  {
    v10 = std::__shared_weak_count::lock(v9);
    v11 = v10;
    if (v10)
    {
      v12 = a1[4];
      p_shared_weak_owners = (unint64_t *)&v10->__shared_weak_owners_;
      do
        v14 = __ldxr(p_shared_weak_owners);
      while (__stxr(v14 + 1, p_shared_weak_owners));
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        v16 = __ldaxr(p_shared_owners);
      while (__stlxr(v16 - 1, p_shared_owners));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    else
    {
      v12 = 0;
    }
  }
  else
  {
    v12 = 0;
    v11 = 0;
  }
  v17 = operator new(0x20uLL);
  *v17 = &off_24C9D2EA0;
  v17[1] = v12;
  v17[2] = v11;
  v17[3] = &v22;
  v24 = v17;
  sub_210216F3C(*v8, (uint64_t)v23);
  v18 = v24;
  if (v24 == v23)
  {
    v19 = 4;
    v18 = v23;
    goto LABEL_17;
  }
  if (v24)
  {
    v19 = 5;
LABEL_17:
    (*(void (**)(_QWORD *))(*v18 + 8 * v19))(v18);
  }
  std::__assoc_sub_state::wait((std::__assoc_sub_state *)v4);
  sub_20EA04D14(v4, a2);
  do
    v20 = __ldaxr(v5);
  while (__stlxr(v20 - 1, v5));
  if (!v20)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
  return sub_20EA04DE8(&v22);
}

