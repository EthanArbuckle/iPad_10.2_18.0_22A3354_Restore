void sub_20EF93D3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  va_list va1;
  uint64_t v12;
  uint64_t v13;
  va_list va2;

  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v10 = va_arg(va2, _QWORD);
  v12 = va_arg(va2, _QWORD);
  v13 = va_arg(va2, _QWORD);
  sub_20E86E8C4((uint64_t *)va);
  sub_20E86E8C4((uint64_t *)va1);
  sub_20E86E658((uint64_t)va2);
  _Unwind_Resume(a1);
}

void sub_20EF93D60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  sub_20E86E658((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20EF93D74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  void *v11;
  int v12;

  if (v12 < 0)
  {
    operator delete(v11);
    sub_20E86E658((uint64_t)&a11);
    _Unwind_Resume(a1);
  }
  sub_20E86E658((uint64_t)&a11);
  _Unwind_Resume(a1);
}

_QWORD *sub_20EF93DCC(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  unint64_t v3;
  unint64_t v5;
  unint64_t v7;
  uint8x8_t v8;
  void **v9;
  _QWORD *v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  float v15;
  float v16;
  _BOOL8 v17;
  unint64_t v18;
  unint64_t v19;
  size_t prime;
  unint64_t v21;
  uint8x8_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  unint64_t v26;

  v5 = a2;
  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = a2;
      if (v7 <= a2)
        v3 = a2 % v7;
    }
    else
    {
      v3 = (v7 - 1) & a2;
    }
    v9 = *(void ***)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      v10 = *v9;
      if (*v9)
      {
        if (v8.u32[0] < 2uLL)
        {
          while (1)
          {
            v12 = v10[1];
            if (v12 == a2)
            {
              if (v10[2] == a2)
                return v10;
            }
            else if ((v12 & (v7 - 1)) != v3)
            {
              goto LABEL_22;
            }
            v10 = (_QWORD *)*v10;
            if (!v10)
              goto LABEL_22;
          }
        }
        do
        {
          v11 = v10[1];
          if (v11 == a2)
          {
            if (v10[2] == a2)
              return v10;
          }
          else
          {
            if (v11 >= v7)
              v11 %= v7;
            if (v11 != v3)
              break;
          }
          v10 = (_QWORD *)*v10;
        }
        while (v10);
      }
    }
  }
LABEL_22:
  v13 = (_QWORD *)(a1 + 16);
  v10 = operator new(0x98uLL);
  *v10 = 0;
  v10[1] = v5;
  v14 = *a3;
  *((_OWORD *)v10 + 2) = 0u;
  *((_OWORD *)v10 + 3) = 0u;
  *((_OWORD *)v10 + 4) = 0u;
  *((_OWORD *)v10 + 5) = 0u;
  v10[2] = v14;
  v10[3] = -1;
  *((_OWORD *)v10 + 6) = 0u;
  *((_OWORD *)v10 + 7) = 0u;
  *((_OWORD *)v10 + 8) = 0u;
  v10[18] = 0;
  v15 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v16 = *(float *)(a1 + 32);
  if (v7 && (float)(v16 * (float)v7) >= v15)
  {
    v5 = v3;
  }
  else
  {
    v17 = 1;
    if (v7 >= 3)
      v17 = (v7 & (v7 - 1)) != 0;
    v18 = v17 | (2 * v7);
    v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19)
      prime = v19;
    else
      prime = v18;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v7 = *(_QWORD *)(a1 + 8);
    }
    if (prime > v7)
      goto LABEL_35;
    if (prime < v7)
    {
      v21 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v7 < 3 || (v22 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v22.i16[0] = vaddlv_u8(v22), v22.u32[0] > 1uLL))
      {
        v21 = std::__next_prime(v21);
      }
      else
      {
        v23 = 1 << -(char)__clz(v21 - 1);
        if (v21 >= 2)
          v21 = v23;
      }
      if (prime <= v21)
        prime = v21;
      if (prime < v7)
LABEL_35:
        sub_20E8D2B3C(a1, prime);
    }
    v7 = *(_QWORD *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v5)
        v5 %= v7;
    }
    else
    {
      v5 &= v7 - 1;
    }
  }
  v24 = *(_QWORD *)a1;
  v25 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v5);
  if (v25)
  {
    *v10 = *v25;
LABEL_58:
    *v25 = v10;
    goto LABEL_59;
  }
  *v10 = *v13;
  *v13 = v10;
  *(_QWORD *)(v24 + 8 * v5) = v13;
  if (*v10)
  {
    v26 = *(_QWORD *)(*v10 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v26 >= v7)
        v26 %= v7;
    }
    else
    {
      v26 &= v7 - 1;
    }
    v25 = (_QWORD *)(*(_QWORD *)a1 + 8 * v26);
    goto LABEL_58;
  }
LABEL_59:
  ++*(_QWORD *)(a1 + 24);
  return v10;
}

void sub_20EF940C8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20EF92530((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20EF940E0()
{
  JUMPOUT(0x212BC6398);
}

__n128 sub_20EF940F4(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_24C9F2338;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 sub_20EF94134(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24C9F2338;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_20EF9415C(uint64_t a1, const void ***a2, uint64_t a3)
{
  _QWORD *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  size_t v10;
  const void *v11;
  uint64_t v12;
  uint64_t v13;
  timespec *p_dst;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t tv_nsec;
  unint64_t j;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  size_t v25;
  size_t v26;
  BOOL v27;
  char *v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  size_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  _QWORD *v42;
  char *v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  std::bad_alloc *v47;
  std::bad_alloc *v48;
  int v49;
  unint64_t v50;
  unint64_t v51;
  char *v53;
  size_t v54;
  const char *v55;
  unsigned __int8 v56;
  size_t v57;
  const char *v58;
  _BYTE *v59;
  uint64_t v60;
  uint64_t v61;
  void **v62;
  NSObject *v63;
  uint64_t v64;
  uint64_t v65;
  void *v66;
  const char *v67;
  std::__shared_weak_count *v68;
  unint64_t *p_shared_owners;
  unint64_t v70;
  uint64_t *v71;
  unsigned __int8 v72;
  std::runtime_error *exception;
  char *v75;
  size_t v76;
  __darwin_time_t tv_sec;
  uint64_t v78;
  uint64_t i;
  uint64_t v80;
  size_t v81;
  std::__shared_weak_count_vtbl *v82;
  std::__shared_weak_count *v83;
  unint64_t *v84;
  size_t v85;
  size_t v86;
  _BYTE *v87;
  uint64_t v88;
  uint64_t v89;
  _QWORD *v90;
  std::__shared_weak_count *v91;
  unint64_t *v92;
  unint64_t v93;
  unint64_t v94;
  unint64_t v95;
  unint64_t v96;
  char *shared_owners;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  std::__shared_weak_count *v103;
  unint64_t *v104;
  unint64_t v105;
  std::__shared_weak_count *v106;
  unint64_t *v107;
  unint64_t v108;
  char *v109;
  char *v110;
  uint64_t v111;
  char *__s;
  char __sa;
  char *__sb;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  std::__shared_weak_count *v119;
  uint64_t *v120;
  timespec __dst;
  unint64_t rep;
  int v123;
  const char *v124;
  uint64_t v125;
  const char *v126;
  void *__p;
  std::__shared_weak_count *v128;
  unint64_t v129;
  uint64_t v130;
  __int128 v131;
  void *v132;
  uint64_t v133;
  _BYTE object[32];
  void *v135[2];
  __int128 v136;
  void *v137[2];
  __int128 v138;
  void *v139[2];
  void *v140[2];
  uint64_t v141;
  char v142;
  uint64_t v143;

  v143 = *MEMORY[0x24BDAC8D0];
  sub_210224144((const std::__fs::filesystem::path *)a3, 0x30u, *(_QWORD *)(a1 + 24), &v117);
  if (!v118)
  {
    sub_20EF764A8(&v120);
    if (*(int *)v120[7] > 5)
      goto LABEL_146;
    v49 = *((unsigned __int8 *)v120 + 72);
    v50 = sub_20E8C31DC((uint64_t)v120, "OSLogSurrogateAppender", 1, 0);
    v51 = v50;
    if (!v49 && v50 == 0)
      goto LABEL_146;
    __dst.tv_sec = (__darwin_time_t)&v120;
    __dst.tv_nsec = std::chrono::steady_clock::now().__d_.__rep_;
    rep = std::chrono::system_clock::now().__d_.__rep_;
    v123 = 5;
    v124 = "unknown file";
    LODWORD(v125) = 83;
    __p = 0;
    v128 = 0;
    v126 = "unknown function";
    if (*(char *)(a3 + 23) >= 0)
      v53 = (char *)a3;
    else
      v53 = *(char **)a3;
    __s = v53;
    v115 = *(_QWORD *)__dst.tv_sec + 16;
    v116 = *(_QWORD *)__dst.tv_sec;
    if (*(char *)(*(_QWORD *)__dst.tv_sec + 39) < 0)
    {
      v55 = *(const char **)(v116 + 16);
      v54 = *(_QWORD *)(v116 + 24);
    }
    else
    {
      v54 = *(unsigned __int8 *)(*(_QWORD *)__dst.tv_sec + 39);
      v55 = (const char *)(*(_QWORD *)__dst.tv_sec + 16);
    }
    v56 = atomic_load((unsigned __int8 *)&qword_254A4A510);
    if ((v56 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
    {
      sub_20E9E46F8((uint64_t)object);
      if (object[24])
      {
        *(_OWORD *)byte_254A4A4F8 = *(_OWORD *)object;
        *(_QWORD *)&byte_254A4A4F8[16] = *(_QWORD *)&object[16];
      }
      else
      {
        byte_254A4A4F8[23] = 14;
        strcpy(byte_254A4A4F8, "com.apple.cv3d");
      }
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
      __cxa_guard_release(&qword_254A4A510);
    }
    if (byte_254A4A4F8[23] >= 0)
      v57 = byte_254A4A4F8[23];
    else
      v57 = *(_QWORD *)&byte_254A4A4F8[8];
    if (byte_254A4A4F8[23] >= 0)
      v58 = byte_254A4A4F8;
    else
      v58 = *(const char **)byte_254A4A4F8;
    *(_QWORD *)object = os_log_create(v58, v55);
    v59 = &object[8];
    if (v57 > 0x7FFFFFFFFFFFFFF7)
      sub_20E860B7C();
    if (v57 >= 0x17)
    {
      v60 = (v57 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v57 | 7) != 0x17)
        v60 = v57 | 7;
      v61 = v60 + 1;
      v59 = operator new(v60 + 1);
      *(_QWORD *)&object[16] = v57;
      *(_QWORD *)&object[24] = v61 | 0x8000000000000000;
      *(_QWORD *)&object[8] = v59;
    }
    else
    {
      object[31] = v57;
      if (!v57)
      {
LABEL_116:
        v59[v57] = 0;
        LOBYTE(v135[0]) = 1;
        v62 = &v135[1];
        if (v54 > 0x7FFFFFFFFFFFFFF7)
          sub_20E860B7C();
        if (v54 >= 0x17)
        {
          v64 = (v54 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v54 | 7) != 0x17)
            v64 = v54 | 7;
          v65 = v64 + 1;
          v62 = (void **)operator new(v64 + 1);
          *(_QWORD *)&v136 = v54;
          *((_QWORD *)&v136 + 1) = v65 | 0x8000000000000000;
          v135[1] = v62;
        }
        else
        {
          HIBYTE(v136) = v54;
          if (!v54)
          {
            LOBYTE(v135[1]) = 0;
            LOBYTE(v137[0]) = 1;
            v63 = *(NSObject **)object;
            if (SHIBYTE(v136) < 0)
              goto LABEL_121;
            goto LABEL_127;
          }
        }
        memmove(v62, v55, v54);
        *((_BYTE *)v62 + v54) = 0;
        LOBYTE(v137[0]) = 1;
        v63 = *(NSObject **)object;
        if (SHIBYTE(v136) < 0)
        {
LABEL_121:
          operator delete(v135[1]);
          if (!LOBYTE(v135[0]))
            goto LABEL_130;
          goto LABEL_128;
        }
LABEL_127:
        if (!LOBYTE(v135[0]))
          goto LABEL_130;
LABEL_128:
        if ((object[31] & 0x80000000) != 0)
          operator delete(*(void **)&object[8]);
LABEL_130:
        if (*(_QWORD *)object)
          os_release(*(void **)object);
        if (!v51 || !*(_QWORD *)(v51 + 24))
        {
          os_log_type_enabled(v63, OS_LOG_TYPE_ERROR);
          *(_DWORD *)object = 136315138;
          *(_QWORD *)&object[4] = __s;
          v66 = (void *)_os_log_send_and_compose_impl();
          if (v66)
            free(v66);
LABEL_136:
          if (v49)
          {
            if (*(char *)(a3 + 23) >= 0)
              v67 = (const char *)a3;
            else
              v67 = *(const char **)a3;
            sub_20E8C003C((uint64_t)&__dst, "[%s] failed to open stream.", v67);
            sub_20E863570((uint64_t)&__dst);
          }
          sub_20E863570((uint64_t)&__dst);
          v68 = v128;
          if (v128)
          {
            p_shared_owners = (unint64_t *)&v128->__shared_owners_;
            do
              v70 = __ldaxr(p_shared_owners);
            while (__stlxr(v70 - 1, p_shared_owners));
            if (!v70)
            {
              ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
              std::__shared_weak_count::__release_weak(v68);
            }
          }
LABEL_146:
          v71 = sub_210219C18();
          v72 = atomic_load((unsigned __int8 *)&qword_254A6DDD0);
          if ((v72 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DDD0))
          {
            __cxa_atexit((void (*)(void *))sub_21021A250, &stru_254A5A410, &dword_20E81F000);
            __cxa_guard_release(&qword_254A6DDD0);
          }
          if (!atomic_load(&qword_254A5A450))
          {
LABEL_148:
            if (os_signpost_enabled((os_log_t)*v71))
            {
              *(_DWORD *)object = 136315138;
              *(_QWORD *)&object[4] = "STRM";
              _os_signpost_emit_unreliably_with_name_impl();
            }
            exception = (std::runtime_error *)__cxa_allocate_exception(0x18uLL);
            sub_20EF5D440(a3, (uint64_t)" failed to open stream.");
            std::runtime_error::runtime_error(exception, (const std::string *)object);
            exception->__vftable = (std::runtime_error_vtbl *)&off_24C9F2020;
            LODWORD(exception[1].__vftable) = 0;
            __cxa_throw(exception, (struct type_info *)&unk_24C9F2038, (void (*)(void *))std::runtime_error::~runtime_error);
          }
          *(_DWORD *)object = 136315138;
          *(_QWORD *)&object[4] = "STRM";
          v75 = (char *)_os_log_send_and_compose_impl();
          v76 = strlen(v75);
          __dst.tv_sec = 0;
          pthread_threadid_np(0, (__uint64_t *)&__dst);
          tv_sec = __dst.tv_sec;
          timespec_get(&__dst, 1);
          sub_210219E20(object, 0xEEEEB0B5B2B2EEEELL, "Trace", 5uLL, (__int128 *)(v71 + 1), (__int128 *)(v71 + 5), "MappingIOSampleWriteErr:TYPE:%s", 0x1FuLL, v75, v76, tv_sec, &__dst);
          std::mutex::lock(&stru_254A5A410);
          v78 = qword_254A5A458;
          for (i = unk_254A5A460; v78 != i; v78 += 40)
          {
            v80 = *(_QWORD *)(v78 + 32);
            if (!v80)
              sub_20E86D37C();
            (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v80 + 48))(v80, object);
          }
          std::mutex::unlock(&stru_254A5A410);
          if (v142 < 0)
          {
            operator delete(v140[1]);
            if ((SHIBYTE(v140[0]) & 0x80000000) == 0)
              goto LABEL_156;
          }
          else if ((SHIBYTE(v140[0]) & 0x80000000) == 0)
          {
LABEL_156:
            if (!BYTE8(v138))
            {
LABEL_162:
              if (BYTE8(v136) && SBYTE7(v136) < 0)
                operator delete(v135[0]);
              if ((object[31] & 0x80000000) != 0)
                operator delete(*(void **)&object[8]);
              if (v75)
                free(v75);
              goto LABEL_148;
            }
LABEL_160:
            if (SBYTE7(v138) < 0)
              operator delete(v137[0]);
            goto LABEL_162;
          }
          operator delete(v139[0]);
          if (!BYTE8(v138))
            goto LABEL_162;
          goto LABEL_160;
        }
        v81 = _os_log_pack_size();
        v82 = (std::__shared_weak_count_vtbl *)operator new(v81, (std::align_val_t)8uLL);
        v83 = (std::__shared_weak_count *)operator new();
        v83->__shared_owners_ = 0;
        v84 = (unint64_t *)&v83->__shared_owners_;
        v83->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
        v83->__shared_weak_owners_ = 0;
        v83[1].__vftable = v82;
        v85 = strlen(__s);
        if (v85 > 0x7FFFFFFFFFFFFFF7)
          sub_20E860B7C();
        v86 = v85;
        if (v85 >= 0x17)
        {
          v88 = (v85 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v85 | 7) != 0x17)
            v88 = v85 | 7;
          v89 = v88 + 1;
          v87 = operator new(v88 + 1);
          *(_QWORD *)&object[8] = v86;
          *(_QWORD *)&object[16] = v89 | 0x8000000000000000;
          *(_QWORD *)object = v87;
        }
        else
        {
          object[23] = v85;
          v87 = object;
          if (!v85)
          {
LABEL_179:
            v87[v86] = 0;
            v111 = *(_QWORD *)object;
            *(_QWORD *)&v131 = *(_QWORD *)&object[8];
            *(_QWORD *)((char *)&v131 + 7) = *(_QWORD *)&object[15];
            __sa = object[23];
            v90 = operator new(0x38uLL);
            v91 = (std::__shared_weak_count *)v90;
            v90[1] = 0;
            v92 = v90 + 1;
            v90[3] = off_24C9ABC20;
            v109 = (char *)(v90 + 3);
            v90[2] = 0;
            v90[4] = v111;
            v110 = (char *)(v90 + 4);
            *v90 = &off_24C9ABBD0;
            v90[5] = v131;
            *(_QWORD *)((char *)v90 + 47) = *(_QWORD *)((char *)&v131 + 7);
            *((_BYTE *)v90 + 55) = __sa;
            do
              v93 = __ldxr(v84);
            while (__stxr(v93 + 1, v84));
            do
              v94 = __ldxr(v92);
            while (__stxr(v94 + 1, v92));
            do
              v95 = __ldaxr(v92);
            while (__stlxr(v95 - 1, v92));
            if (!v95)
            {
              (*(void (**)(_QWORD *))(*v90 + 16))(v90);
              std::__shared_weak_count::__release_weak(v91);
            }
            do
              v96 = __ldaxr(v84);
            while (__stlxr(v96 - 1, v84));
            if (!v96)
            {
              ((void (*)(std::__shared_weak_count *))v83->__on_zero_shared)(v83);
              std::__shared_weak_count::__release_weak(v83);
            }
            shared_owners = v110;
            if (SHIBYTE(v91[2].__vftable) < 0)
              shared_owners = (char *)v91[1].__shared_owners_;
            __sb = shared_owners;
            v98 = _os_log_pack_fill();
            *(_DWORD *)v98 = 136315138;
            *(_QWORD *)(v98 + 4) = __sb;
            v99 = operator new();
            v100 = *(unsigned __int8 *)(v116 + 39);
            v101 = v115;
            if ((v100 & 0x80u) != 0)
            {
              v101 = *(_QWORD *)(v116 + 16);
              v100 = *(_QWORD *)(v116 + 24);
            }
            *(_QWORD *)v99 = v82;
            *(_QWORD *)(v99 + 8) = v82;
            *(_QWORD *)(v99 + 16) = v83;
            *(_QWORD *)(v99 + 24) = v109;
            *(_QWORD *)(v99 + 32) = v91;
            *(_QWORD *)(v99 + 40) = v101;
            *(_QWORD *)(v99 + 48) = v100;
            *(_BYTE *)(v99 + 56) = 16;
            *(_QWORD *)object = v99;
            (*(void (**)(_QWORD, _BYTE *))(**(_QWORD **)(v51 + 24) + 40))(*(_QWORD *)(v51 + 24), object);
            v102 = *(_QWORD *)object;
            *(_QWORD *)object = 0;
            if (v102)
            {
              v103 = *(std::__shared_weak_count **)(v102 + 32);
              if (v103)
              {
                v104 = (unint64_t *)&v103->__shared_owners_;
                do
                  v105 = __ldaxr(v104);
                while (__stlxr(v105 - 1, v104));
                if (!v105)
                {
                  ((void (*)(std::__shared_weak_count *))v103->__on_zero_shared)(v103);
                  std::__shared_weak_count::__release_weak(v103);
                }
              }
              v106 = *(std::__shared_weak_count **)(v102 + 16);
              if (v106)
              {
                v107 = (unint64_t *)&v106->__shared_owners_;
                do
                  v108 = __ldaxr(v107);
                while (__stlxr(v108 - 1, v107));
                if (!v108)
                {
                  ((void (*)(std::__shared_weak_count *))v106->__on_zero_shared)(v106);
                  std::__shared_weak_count::__release_weak(v106);
                }
              }
              MEMORY[0x212BC6398](v102, 0x10F0C40B62ED6C6);
            }
            goto LABEL_136;
          }
        }
        memcpy(v87, __s, v86);
        goto LABEL_179;
      }
    }
    memmove(v59, v58, v57);
    goto LABEL_116;
  }
  v6 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v118 + 16))(v118);
  v7 = (char *)v6 + *(_QWORD *)(*v6 - 24);
  if ((v7[32] & 5) != 0)
  {
    *(_OWORD *)v139 = 0u;
    *(_OWORD *)v140 = 0u;
    *(_OWORD *)v137 = 0u;
    v138 = 0u;
    *(_OWORD *)v135 = 0u;
    v136 = 0u;
    memset(object, 0, sizeof(object));
    v141 = -1;
  }
  else
  {
    (*(void (**)(_BYTE *__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**((_QWORD **)v7 + 5) + 32))(object, *((_QWORD *)v7 + 5), 0, 1, 16);
  }
  v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v118 + 16))(v118);
  v9 = *(_QWORD *)(a1 + 16);
  v11 = *(const void **)v9;
  v10 = *(_QWORD *)(v9 + 8);
  *((_QWORD *)&v131 + 1) = 1;
  v12 = operator new();
  *(_QWORD *)v12 = v8;
  *(_QWORD *)(v12 + 8) = v8;
  v13 = v12 + 8;
  *(_BYTE *)(v12 + 16) = 0;
  *(_BYTE *)(v12 + 40) = 0;
  *(_BYTE *)(v12 + 48) = 0;
  *(_BYTE *)(v12 + 72) = 0;
  *(_QWORD *)(v12 + 88) = 0;
  *(_QWORD *)(v12 + 96) = 0;
  *(_QWORD *)(v12 + 80) = 0;
  *(_QWORD *)&v131 = &off_24C9B4468;
  v132 = &unk_24C9B45B8;
  v133 = v12;
  if (v10)
  {
    if (v10 > 0x7FFFFFFFFFFFFFF7)
      sub_20E860B7C();
    if (v10 >= 0x17)
    {
      v15 = (v10 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v10 | 7) != 0x17)
        v15 = v10 | 7;
      v16 = v15 + 1;
      p_dst = (timespec *)operator new(v15 + 1);
      __dst.tv_nsec = v10;
      rep = v16 | 0x8000000000000000;
      __dst.tv_sec = (__darwin_time_t)p_dst;
    }
    else
    {
      HIBYTE(rep) = v10;
      p_dst = &__dst;
    }
    memmove(p_dst, v11, v10);
    *((_BYTE *)&p_dst->tv_sec + v10) = 0;
    sub_20E9F5254((uint64_t)&v120, v13, (uint64_t)&__dst);
    if (SHIBYTE(rep) < 0)
    {
      operator delete((void *)__dst.tv_sec);
      v17 = v133;
      if (*(_BYTE *)(v133 + 40))
        goto LABEL_14;
    }
    else
    {
      v17 = v133;
      if (*(_BYTE *)(v133 + 40))
      {
LABEL_14:
        __dst.tv_sec = v17 + 16;
        sub_20E9F3D4C((uint64_t **)&__dst, 1u);
        goto LABEL_17;
      }
    }
  }
  LOBYTE(__dst.tv_sec) = 1;
  std::ostream::write();
LABEL_17:
  sub_20E9EE95C(v133);
  sub_20E9948E4((const void ***)&__dst, a2);
  if (*(_BYTE *)(v133 + 40))
  {
    v120 = (uint64_t *)(v133 + 16);
    sub_20E9F472C(&v120, __dst.tv_sec);
  }
  else
  {
    sub_20E9F4A34();
  }
  if (*(_BYTE *)(v133 + 40))
  {
    v120 = (uint64_t *)(v133 + 16);
    sub_20E9F472C(&v120, 0xCBEEA4E1A08AD8F3 * ((uint64_t)(rep - __dst.tv_nsec) >> 3));
  }
  else
  {
    sub_20E9F4A34();
  }
  tv_nsec = __dst.tv_nsec;
  for (j = rep; tv_nsec != j; tv_nsec += 472)
  {
    if (*(_BYTE *)(v133 + 40))
    {
      v120 = (uint64_t *)(v133 + 16);
      sub_20E9F3D4C(&v120, 4u);
    }
    else
    {
      LOBYTE(v120) = 4;
      std::ostream::write();
    }
    sub_20E9EE95C(v133);
    sub_20EAD0214((uint64_t)&v131, tv_nsec, 4u);
    v20 = v133;
    v21 = *(_QWORD *)(*(_QWORD *)(v133 + 88) - 8);
    v22 = *(_QWORD *)(v133 + 16);
    v23 = *(_QWORD *)(v133 + 64);
    v24 = *(_QWORD *)(v133 + 48);
    if ((unint64_t)(v23 - v24) >= 9)
    {
      v28 = *(char **)(v133 + 56);
    }
    else
    {
      if (v23)
        v25 = 2 * v23;
      else
        v25 = 0x2000;
      v26 = v24 + 9;
      while (v25 < v26)
      {
        v27 = (uint64_t)v25 <= 0;
        v25 *= 2;
        if (v27)
        {
          v25 = v26;
          break;
        }
      }
      v28 = (char *)malloc_type_realloc(*(void **)(v133 + 56), v25, 0xAD6A59EEuLL);
      if (!v28)
      {
        v47 = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
        v48 = std::bad_alloc::bad_alloc(v47);
        __cxa_throw(v48, MEMORY[0x24BEDB758], MEMORY[0x24BEDB670]);
      }
      *(_QWORD *)(v20 + 56) = v28;
      *(_QWORD *)(v20 + 64) = v25;
      v24 = *(_QWORD *)(v20 + 48);
    }
    v29 = &v28[v24];
    *v29 = -49;
    *(_QWORD *)(v29 + 1) = bswap64(v22 - v21 - 9);
    v30 = *(_QWORD *)(v20 + 48);
    *(_QWORD *)(v20 + 48) = v30 + 9;
    if (v30 != -9)
      memmove((void *)(*(_QWORD *)(v20 + 24) + v21), *(const void **)(v20 + 56), v30 + 9);
    *(_QWORD *)(v20 + 48) = 0;
    v31 = *(_QWORD *)(v20 + 80);
    v32 = *(_QWORD *)(v20 + 88) - 8;
    *(_QWORD *)(v20 + 88) = v32;
    if (v31 == v32)
    {
      std::ostream::write();
      if (*(_BYTE *)(v20 + 40))
      {
        free(*(void **)(v20 + 24));
        *(_BYTE *)(v20 + 40) = 0;
      }
    }
  }
  sub_20EAD8EFC((uint64_t)&v131, &v124);
  if (*(_BYTE *)(v133 + 40))
  {
    v120 = (uint64_t *)(v133 + 16);
    sub_20E9F472C(&v120, ((char *)v128 - (_BYTE *)__p) >> 4);
  }
  else
  {
    sub_20E9F4A34();
  }
  if (v128 != __p)
  {
    v33 = (unint64_t *)((char *)__p + 8);
    v34 = 16 * (((char *)v128 - (_BYTE *)__p) >> 4);
    do
    {
      if (*(_BYTE *)(v133 + 40))
      {
        v120 = (uint64_t *)(v133 + 16);
        sub_20E9F472C(&v120, *(v33 - 1));
      }
      else
      {
        sub_20E9F4A34();
      }
      if (*(_BYTE *)(v133 + 40))
      {
        v120 = (uint64_t *)(v133 + 16);
        sub_20E9F40B0(&v120, *v33);
      }
      else
      {
        sub_20E9F45EC();
      }
      v33 += 2;
      v34 -= 16;
    }
    while (v34);
  }
  if (*(_BYTE *)(v133 + 40))
  {
    v120 = (uint64_t *)(v133 + 16);
    sub_20E9F472C(&v120, v129);
  }
  else
  {
    sub_20E9F4A34();
  }
  if (__p)
  {
    v128 = (std::__shared_weak_count *)__p;
    operator delete(__p);
  }
  sub_20E866B68((uint64_t)&v124, v125);
  if (__dst.tv_nsec)
  {
    rep = __dst.tv_nsec;
    operator delete((void *)__dst.tv_nsec);
  }
  v35 = v133;
  v36 = *(_QWORD *)(*(_QWORD *)(v133 + 88) - 8);
  v37 = (size_t *)(v133 + 48);
  sub_20E9EE4D0((uint64_t *)(v133 + 48), *(_QWORD *)(v133 + 16) - v36 - 9);
  if (*v37)
    memmove((void *)(*(_QWORD *)(v35 + 24) + v36), *(const void **)(v35 + 56), *v37);
  *(_QWORD *)(v35 + 48) = 0;
  v38 = *(_QWORD *)(v35 + 80);
  v39 = *(_QWORD *)(v35 + 88) - 8;
  *(_QWORD *)(v35 + 88) = v39;
  if (v38 == v39)
  {
    std::ostream::write();
    if (*(_BYTE *)(v35 + 40))
    {
      free(*(void **)(v35 + 24));
      *(_BYTE *)(v35 + 40) = 0;
    }
  }
  *(_QWORD *)&v131 = &off_24C9B7040;
  v40 = v133;
  v132 = &unk_24C9B7190;
  v133 = 0;
  if (v40)
  {
    v41 = *(void **)(v40 + 80);
    if (v41)
    {
      *(_QWORD *)(v40 + 88) = v41;
      operator delete(v41);
    }
    if (*(_BYTE *)(v40 + 72))
      free(*(void **)(v40 + 56));
    if (*(_BYTE *)(v40 + 40))
      free(*(void **)(v40 + 24));
    MEMORY[0x212BC6398](v40, 0x1030C408C1A3048);
  }
  v42 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v118 + 16))(v118);
  v43 = (char *)v42 + *(_QWORD *)(*v42 - 24);
  if ((v43[32] & 5) != 0)
  {
    **(_QWORD **)(a1 + 8) = -1 - v141;
    v44 = v119;
    if (!v119)
      return;
  }
  else
  {
    (*(void (**)(timespec *__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**((_QWORD **)v43 + 5) + 32))(&__dst, *((_QWORD *)v43 + 5), 0, 1, 16);
    **(_QWORD **)(a1 + 8) = v130 - v141;
    v44 = v119;
    if (!v119)
      return;
  }
  v45 = (unint64_t *)&v44->__shared_owners_;
  do
    v46 = __ldaxr(v45);
  while (__stlxr(v46 - 1, v45));
  if (!v46)
  {
    ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
    std::__shared_weak_count::__release_weak(v44);
  }
}

void sub_20EF95258(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,std::__shared_weak_count *a21,uint64_t a22,_Unwind_Exception *exception_object,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31)
{
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  unint64_t *p_shared_owners;
  unint64_t v36;

  __cxa_guard_abort(&qword_254A4A510);
  sub_20E863570((uint64_t)&exception_object);
  v32 = (std::__shared_weak_count *)a31;
  if (a31)
  {
    v33 = (unint64_t *)(a31 + 8);
    do
      v34 = __ldaxr(v33);
    while (__stlxr(v34 - 1, v33));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
    }
  }
  if (a21)
  {
    p_shared_owners = (unint64_t *)&a21->__shared_owners_;
    do
      v36 = __ldaxr(p_shared_owners);
    while (__stlxr(v36 - 1, p_shared_owners));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))a21->__on_zero_shared)(a21);
      std::__shared_weak_count::__release_weak(a21);
    }
  }
  _Unwind_Resume(a1);
}

uint64_t sub_20EF95668(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3vio10mapping_io15SerializeSampleINS0_13mapping_types6detail15MapUpdateSampleILj1EEEEEyRKT_R"
                     "KNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEERKNSA_12basic_stringIcSD_NSA_9allocatorIcEEEERN"
                     "S_3kit2fs11IFilesystemEEUlRKS6_RKNSA_4__fs10filesystem4pathEE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4cv3d3vio10mapping_io15SerializeSampleINS0_13mapping_types6detail15MapUpdateSampleILj1"
                                "EEEEEyRKT_RKNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEERKNSA_12basic_stringIcSD_"
                                "NSA_9allocatorIcEEEERNS_3kit2fs11IFilesystemEEUlRKS6_RKNSA_4__fs10filesystem4pathEE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3vio10mapping_io15SerializeSampleINS0_13mapping_types6detail15MapUpdateSampleILj1EEEEEyRKT_RKNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEERKNSA_12basic_stringIcSD_NSA_9allocatorIcEEEERNS_3kit2fs11IFilesystemEEUlRKS6_RKNSA_4__fs10filesystem4pathEE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3vio10mapping_io15SerializeSampleINS0_13mapping_types6detail15MapUpdateSampleILj1EEEEEyRKT_RKNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEERKNSA_12basic_stringIcSD_NSA_9allocatorIcEEEERNS_3kit2fs11IFilesystemEEUlRKS6_RKNSA_4__fs10filesystem4pathEE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20EF956D4()
{
  return &unk_24C9F23A8;
}

void sub_20EF956E0(uint64_t a1, uint64_t *a2, os_log_t oslog, os_log_type_t type, const char **a5)
{
  size_t v9;
  std::__shared_weak_count_vtbl *v10;
  std::__shared_weak_count *v11;
  const char *v12;
  size_t v13;
  size_t v14;
  _QWORD *p_dst;
  const char *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  char v21;
  _QWORD *v22;
  uint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *p_shared_owners;
  unint64_t v26;
  uint64_t *v27;
  unint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t *v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  _QWORD *v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  __int128 v60;
  std::__shared_weak_count *v61;
  __int128 v62;
  _QWORD *__dst;
  __int128 v64;
  _BYTE v65[24];
  __int128 v66;
  uint64_t v67;
  _QWORD v68[3];

  v68[2] = *MEMORY[0x24BDAC8D0];
  if (a1 && *(_QWORD *)(a1 + 8))
  {
    v9 = _os_log_pack_size();
    v10 = (std::__shared_weak_count_vtbl *)operator new(v9, (std::align_val_t)8uLL);
    v11 = (std::__shared_weak_count *)operator new();
    v11->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
    v11->__shared_owners_ = 0;
    v11->__shared_weak_owners_ = 0;
    v11[1].__vftable = v10;
    *(_QWORD *)&v60 = v10;
    *((_QWORD *)&v60 + 1) = v10;
    v62 = 0uLL;
    v61 = v11;
    v12 = *a5;
    v13 = strlen(*a5);
    if (v13 >= 0x7FFFFFFFFFFFFFF8)
      sub_20E860B7C();
    v14 = v13;
    if (v13 >= 0x17)
    {
      v18 = (v13 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v13 | 7) != 0x17)
        v18 = v13 | 7;
      v19 = v18 + 1;
      p_dst = operator new(v18 + 1);
      *(_QWORD *)&v64 = v14;
      *((_QWORD *)&v64 + 1) = v19 | 0x8000000000000000;
      __dst = p_dst;
    }
    else
    {
      HIBYTE(v64) = v13;
      p_dst = &__dst;
      if (!v13)
      {
LABEL_13:
        *((_BYTE *)p_dst + v14) = 0;
        v20 = __dst;
        v68[0] = v64;
        *(_QWORD *)((char *)v68 + 7) = *(_QWORD *)((char *)&v64 + 7);
        v21 = HIBYTE(v64);
        v22 = operator new(0x38uLL);
        v22[1] = 0;
        v22[2] = 0;
        v22[3] = off_24C9ABC20;
        *v22 = &off_24C9ABBD0;
        v23 = v68[0];
        v22[4] = v20;
        v22[5] = v23;
        *(_QWORD *)((char *)v22 + 47) = *(_QWORD *)((char *)v68 + 7);
        *((_BYTE *)v22 + 55) = v21;
        v68[0] = 0;
        *(_QWORD *)((char *)v68 + 7) = 0;
        v24 = (std::__shared_weak_count *)*((_QWORD *)&v62 + 1);
        *(_QWORD *)&v62 = v22 + 3;
        *((_QWORD *)&v62 + 1) = v22;
        if (v24)
        {
          p_shared_owners = (unint64_t *)&v24->__shared_owners_;
          do
            v26 = __ldaxr(p_shared_owners);
          while (__stlxr(v26 - 1, p_shared_owners));
          if (!v26)
          {
            ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
            std::__shared_weak_count::__release_weak(v24);
          }
        }
        *(_OWORD *)v65 = v60;
        *(_QWORD *)&v65[16] = v61;
        if (v61)
        {
          v27 = &v61->__shared_owners_;
          do
            v28 = __ldxr((unint64_t *)v27);
          while (__stxr(v28 + 1, (unint64_t *)v27));
        }
        v66 = v62;
        if (*((_QWORD *)&v62 + 1))
        {
          v29 = (unint64_t *)(*((_QWORD *)&v62 + 1) + 8);
          do
            v30 = __ldxr(v29);
          while (__stxr(v30 + 1, v29));
          v67 = v62;
          do
            v31 = __ldaxr(v29);
          while (__stlxr(v31 - 1, v29));
          if (!v31)
          {
            (*(void (**)(_QWORD))(**((_QWORD **)&v62 + 1) + 16))(*((_QWORD *)&v62 + 1));
            std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v62 + 1));
          }
        }
        else
        {
          v67 = v62;
        }
        if (v61)
        {
          v32 = &v61->__shared_owners_;
          do
            v33 = __ldaxr((unint64_t *)v32);
          while (__stlxr(v33 - 1, (unint64_t *)v32));
          if (!v33)
          {
            ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
            std::__shared_weak_count::__release_weak(v61);
          }
        }
        v34 = *(_QWORD *)v65;
        if (*(char *)(v67 + 31) >= 0)
          v35 = v67 + 8;
        else
          v35 = *(_QWORD *)(v67 + 8);
        v36 = _os_log_pack_fill();
        *(_DWORD *)v36 = 136315138;
        *(_QWORD *)(v36 + 4) = v35;
        v37 = operator new();
        v38 = *((unsigned __int8 *)a2 + 23);
        if ((v38 & 0x80u) == 0)
          v39 = a2;
        else
          v39 = (uint64_t *)*a2;
        if ((v38 & 0x80u) != 0)
          v38 = a2[1];
        *(_QWORD *)v37 = v34;
        *(_OWORD *)(v37 + 8) = *(_OWORD *)&v65[8];
        *(_QWORD *)&v65[8] = 0;
        *(_QWORD *)&v65[16] = 0;
        *(_OWORD *)(v37 + 24) = v66;
        v66 = 0uLL;
        *(_QWORD *)(v37 + 40) = v39;
        *(_QWORD *)(v37 + 48) = v38;
        *(_BYTE *)(v37 + 56) = type;
        __dst = 0;
        *(_QWORD *)&v60 = v37;
        (*(void (**)(_QWORD, __int128 *))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8), &v60);
        v40 = v60;
        *(_QWORD *)&v60 = 0;
        if (v40)
        {
          v41 = *(std::__shared_weak_count **)(v40 + 32);
          if (v41)
          {
            v42 = (unint64_t *)&v41->__shared_owners_;
            do
              v43 = __ldaxr(v42);
            while (__stlxr(v43 - 1, v42));
            if (!v43)
            {
              ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
              std::__shared_weak_count::__release_weak(v41);
            }
          }
          v44 = *(std::__shared_weak_count **)(v40 + 16);
          if (v44)
          {
            v45 = (unint64_t *)&v44->__shared_owners_;
            do
              v46 = __ldaxr(v45);
            while (__stlxr(v46 - 1, v45));
            if (!v46)
            {
              ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
              std::__shared_weak_count::__release_weak(v44);
            }
          }
          MEMORY[0x212BC6398](v40, 0x10F0C40B62ED6C6);
          v47 = __dst;
          __dst = 0;
          if (v47)
          {
            v48 = (std::__shared_weak_count *)v47[4];
            if (v48)
            {
              v49 = (unint64_t *)&v48->__shared_owners_;
              do
                v50 = __ldaxr(v49);
              while (__stlxr(v50 - 1, v49));
              if (!v50)
              {
                ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
                std::__shared_weak_count::__release_weak(v48);
              }
            }
            v51 = (std::__shared_weak_count *)v47[2];
            if (v51)
            {
              v52 = (unint64_t *)&v51->__shared_owners_;
              do
                v53 = __ldaxr(v52);
              while (__stlxr(v53 - 1, v52));
              if (!v53)
              {
                ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
                std::__shared_weak_count::__release_weak(v51);
              }
            }
            MEMORY[0x212BC6398](v47, 0x10F0C40B62ED6C6);
          }
        }
        v54 = (std::__shared_weak_count *)*((_QWORD *)&v66 + 1);
        if (*((_QWORD *)&v66 + 1))
        {
          v55 = (unint64_t *)(*((_QWORD *)&v66 + 1) + 8);
          do
            v56 = __ldaxr(v55);
          while (__stlxr(v56 - 1, v55));
          if (!v56)
          {
            ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
            std::__shared_weak_count::__release_weak(v54);
          }
        }
        v57 = *(std::__shared_weak_count **)&v65[16];
        if (*(_QWORD *)&v65[16])
        {
          v58 = (unint64_t *)(*(_QWORD *)&v65[16] + 8);
          do
            v59 = __ldaxr(v58);
          while (__stlxr(v59 - 1, v58));
          if (!v59)
          {
            ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
            std::__shared_weak_count::__release_weak(v57);
          }
        }
        return;
      }
    }
    memcpy(p_dst, v12, v14);
    goto LABEL_13;
  }
  os_log_type_enabled(oslog, type);
  v16 = *a5;
  *(_DWORD *)v65 = 136315138;
  *(_QWORD *)&v65[4] = v16;
  v17 = (void *)_os_log_send_and_compose_impl();
  if (v17)
    free(v17);
}

void sub_20EF95C54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  va_list va1;
  uint64_t v12;
  uint64_t v13;
  va_list va2;

  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v10 = va_arg(va2, _QWORD);
  v12 = va_arg(va2, _QWORD);
  v13 = va_arg(va2, _QWORD);
  sub_20E86E8C4((uint64_t *)va);
  sub_20E86E8C4((uint64_t *)va1);
  sub_20E86E658((uint64_t)va2);
  _Unwind_Resume(a1);
}

void sub_20EF95C78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  sub_20E86E658((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20EF95C8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  void *v11;
  int v12;

  if (v12 < 0)
  {
    operator delete(v11);
    sub_20E86E658((uint64_t)&a11);
    _Unwind_Resume(a1);
  }
  sub_20E86E658((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void sub_20EF95CE4(uint64_t a1, uint64_t *a2, os_log_t oslog, os_log_type_t type, const char **a5)
{
  size_t v9;
  std::__shared_weak_count_vtbl *v10;
  std::__shared_weak_count *v11;
  const char *v12;
  size_t v13;
  size_t v14;
  _QWORD *p_dst;
  const char *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  char v21;
  _QWORD *v22;
  uint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *p_shared_owners;
  unint64_t v26;
  uint64_t *v27;
  unint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t *v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  _QWORD *v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  __int128 v60;
  std::__shared_weak_count *v61;
  __int128 v62;
  _QWORD *__dst;
  __int128 v64;
  _BYTE v65[24];
  __int128 v66;
  uint64_t v67;
  _QWORD v68[3];

  v68[2] = *MEMORY[0x24BDAC8D0];
  if (a1 && *(_QWORD *)(a1 + 8))
  {
    v9 = _os_log_pack_size();
    v10 = (std::__shared_weak_count_vtbl *)operator new(v9, (std::align_val_t)8uLL);
    v11 = (std::__shared_weak_count *)operator new();
    v11->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
    v11->__shared_owners_ = 0;
    v11->__shared_weak_owners_ = 0;
    v11[1].__vftable = v10;
    *(_QWORD *)&v60 = v10;
    *((_QWORD *)&v60 + 1) = v10;
    v62 = 0uLL;
    v61 = v11;
    v12 = *a5;
    v13 = strlen(*a5);
    if (v13 >= 0x7FFFFFFFFFFFFFF8)
      sub_20E860B7C();
    v14 = v13;
    if (v13 >= 0x17)
    {
      v18 = (v13 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v13 | 7) != 0x17)
        v18 = v13 | 7;
      v19 = v18 + 1;
      p_dst = operator new(v18 + 1);
      *(_QWORD *)&v64 = v14;
      *((_QWORD *)&v64 + 1) = v19 | 0x8000000000000000;
      __dst = p_dst;
    }
    else
    {
      HIBYTE(v64) = v13;
      p_dst = &__dst;
      if (!v13)
      {
LABEL_13:
        *((_BYTE *)p_dst + v14) = 0;
        v20 = __dst;
        v68[0] = v64;
        *(_QWORD *)((char *)v68 + 7) = *(_QWORD *)((char *)&v64 + 7);
        v21 = HIBYTE(v64);
        v22 = operator new(0x38uLL);
        v22[1] = 0;
        v22[2] = 0;
        v22[3] = off_24C9ABC20;
        *v22 = &off_24C9ABBD0;
        v23 = v68[0];
        v22[4] = v20;
        v22[5] = v23;
        *(_QWORD *)((char *)v22 + 47) = *(_QWORD *)((char *)v68 + 7);
        *((_BYTE *)v22 + 55) = v21;
        v68[0] = 0;
        *(_QWORD *)((char *)v68 + 7) = 0;
        v24 = (std::__shared_weak_count *)*((_QWORD *)&v62 + 1);
        *(_QWORD *)&v62 = v22 + 3;
        *((_QWORD *)&v62 + 1) = v22;
        if (v24)
        {
          p_shared_owners = (unint64_t *)&v24->__shared_owners_;
          do
            v26 = __ldaxr(p_shared_owners);
          while (__stlxr(v26 - 1, p_shared_owners));
          if (!v26)
          {
            ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
            std::__shared_weak_count::__release_weak(v24);
          }
        }
        *(_OWORD *)v65 = v60;
        *(_QWORD *)&v65[16] = v61;
        if (v61)
        {
          v27 = &v61->__shared_owners_;
          do
            v28 = __ldxr((unint64_t *)v27);
          while (__stxr(v28 + 1, (unint64_t *)v27));
        }
        v66 = v62;
        if (*((_QWORD *)&v62 + 1))
        {
          v29 = (unint64_t *)(*((_QWORD *)&v62 + 1) + 8);
          do
            v30 = __ldxr(v29);
          while (__stxr(v30 + 1, v29));
          v67 = v62;
          do
            v31 = __ldaxr(v29);
          while (__stlxr(v31 - 1, v29));
          if (!v31)
          {
            (*(void (**)(_QWORD))(**((_QWORD **)&v62 + 1) + 16))(*((_QWORD *)&v62 + 1));
            std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v62 + 1));
          }
        }
        else
        {
          v67 = v62;
        }
        if (v61)
        {
          v32 = &v61->__shared_owners_;
          do
            v33 = __ldaxr((unint64_t *)v32);
          while (__stlxr(v33 - 1, (unint64_t *)v32));
          if (!v33)
          {
            ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
            std::__shared_weak_count::__release_weak(v61);
          }
        }
        v34 = *(_QWORD *)v65;
        if (*(char *)(v67 + 31) >= 0)
          v35 = v67 + 8;
        else
          v35 = *(_QWORD *)(v67 + 8);
        v36 = _os_log_pack_fill();
        *(_DWORD *)v36 = 136315138;
        *(_QWORD *)(v36 + 4) = v35;
        v37 = operator new();
        v38 = *((unsigned __int8 *)a2 + 23);
        if ((v38 & 0x80u) == 0)
          v39 = a2;
        else
          v39 = (uint64_t *)*a2;
        if ((v38 & 0x80u) != 0)
          v38 = a2[1];
        *(_QWORD *)v37 = v34;
        *(_OWORD *)(v37 + 8) = *(_OWORD *)&v65[8];
        *(_QWORD *)&v65[8] = 0;
        *(_QWORD *)&v65[16] = 0;
        *(_OWORD *)(v37 + 24) = v66;
        v66 = 0uLL;
        *(_QWORD *)(v37 + 40) = v39;
        *(_QWORD *)(v37 + 48) = v38;
        *(_BYTE *)(v37 + 56) = type;
        __dst = 0;
        *(_QWORD *)&v60 = v37;
        (*(void (**)(_QWORD, __int128 *))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8), &v60);
        v40 = v60;
        *(_QWORD *)&v60 = 0;
        if (v40)
        {
          v41 = *(std::__shared_weak_count **)(v40 + 32);
          if (v41)
          {
            v42 = (unint64_t *)&v41->__shared_owners_;
            do
              v43 = __ldaxr(v42);
            while (__stlxr(v43 - 1, v42));
            if (!v43)
            {
              ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
              std::__shared_weak_count::__release_weak(v41);
            }
          }
          v44 = *(std::__shared_weak_count **)(v40 + 16);
          if (v44)
          {
            v45 = (unint64_t *)&v44->__shared_owners_;
            do
              v46 = __ldaxr(v45);
            while (__stlxr(v46 - 1, v45));
            if (!v46)
            {
              ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
              std::__shared_weak_count::__release_weak(v44);
            }
          }
          MEMORY[0x212BC6398](v40, 0x10F0C40B62ED6C6);
          v47 = __dst;
          __dst = 0;
          if (v47)
          {
            v48 = (std::__shared_weak_count *)v47[4];
            if (v48)
            {
              v49 = (unint64_t *)&v48->__shared_owners_;
              do
                v50 = __ldaxr(v49);
              while (__stlxr(v50 - 1, v49));
              if (!v50)
              {
                ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
                std::__shared_weak_count::__release_weak(v48);
              }
            }
            v51 = (std::__shared_weak_count *)v47[2];
            if (v51)
            {
              v52 = (unint64_t *)&v51->__shared_owners_;
              do
                v53 = __ldaxr(v52);
              while (__stlxr(v53 - 1, v52));
              if (!v53)
              {
                ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
                std::__shared_weak_count::__release_weak(v51);
              }
            }
            MEMORY[0x212BC6398](v47, 0x10F0C40B62ED6C6);
          }
        }
        v54 = (std::__shared_weak_count *)*((_QWORD *)&v66 + 1);
        if (*((_QWORD *)&v66 + 1))
        {
          v55 = (unint64_t *)(*((_QWORD *)&v66 + 1) + 8);
          do
            v56 = __ldaxr(v55);
          while (__stlxr(v56 - 1, v55));
          if (!v56)
          {
            ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
            std::__shared_weak_count::__release_weak(v54);
          }
        }
        v57 = *(std::__shared_weak_count **)&v65[16];
        if (*(_QWORD *)&v65[16])
        {
          v58 = (unint64_t *)(*(_QWORD *)&v65[16] + 8);
          do
            v59 = __ldaxr(v58);
          while (__stlxr(v59 - 1, v58));
          if (!v59)
          {
            ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
            std::__shared_weak_count::__release_weak(v57);
          }
        }
        return;
      }
    }
    memcpy(p_dst, v12, v14);
    goto LABEL_13;
  }
  os_log_type_enabled(oslog, type);
  v16 = *a5;
  *(_DWORD *)v65 = 136315138;
  *(_QWORD *)&v65[4] = v16;
  v17 = (void *)_os_log_send_and_compose_impl();
  if (v17)
    free(v17);
}

void sub_20EF96258(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  va_list va1;
  uint64_t v12;
  uint64_t v13;
  va_list va2;

  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v10 = va_arg(va2, _QWORD);
  v12 = va_arg(va2, _QWORD);
  v13 = va_arg(va2, _QWORD);
  sub_20E86E8C4((uint64_t *)va);
  sub_20E86E8C4((uint64_t *)va1);
  sub_20E86E658((uint64_t)va2);
  _Unwind_Resume(a1);
}

void sub_20EF9627C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  sub_20E86E658((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20EF96290(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  void *v11;
  int v12;

  if (v12 < 0)
  {
    operator delete(v11);
    sub_20E86E658((uint64_t)&a11);
    _Unwind_Resume(a1);
  }
  sub_20E86E658((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void sub_20EF962EC()
{
  JUMPOUT(0x212BC6398);
}

__n128 sub_20EF96300(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_24C9F23C8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 sub_20EF96340(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24C9F23C8;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_20EF96368(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v6;
  char *v7;
  uint64_t v8;
  _QWORD *v9;
  char *v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  int v14;
  unint64_t v15;
  unint64_t v16;
  char *v18;
  size_t v19;
  const char *v20;
  unsigned __int8 v21;
  size_t v22;
  const char *v23;
  _BYTE *v24;
  uint64_t v25;
  uint64_t v26;
  void **v27;
  NSObject *v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  const char *v32;
  std::__shared_weak_count *v33;
  unint64_t *p_shared_owners;
  unint64_t v35;
  uint64_t *v36;
  unsigned __int8 v37;
  std::runtime_error *exception;
  char *v40;
  size_t v41;
  __darwin_time_t tv_sec;
  uint64_t v43;
  uint64_t i;
  uint64_t v45;
  size_t v46;
  std::__shared_weak_count_vtbl *v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  size_t v50;
  size_t v51;
  _BYTE *v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t v61;
  char *shared_owners;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  std::__shared_weak_count *v68;
  unint64_t *v69;
  unint64_t v70;
  std::__shared_weak_count *v71;
  unint64_t *v72;
  unint64_t v73;
  char *v74;
  char *v75;
  uint64_t v76;
  char *__s;
  char __sa;
  char *__sb;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  std::__shared_weak_count *v85;
  timespec v86;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep rep;
  int v88;
  const char *v89;
  int v90;
  const char *v91;
  uint64_t v92;
  std::__shared_weak_count *v93;
  uint64_t v94;
  _BYTE object[32];
  void *__p[2];
  __int128 v97;
  void *v98[2];
  __int128 v99;
  void *v100[2];
  void *v101[2];
  uint64_t v102;
  char v103;
  _QWORD v104[5];

  v104[2] = *MEMORY[0x24BDAC8D0];
  sub_210224144((const std::__fs::filesystem::path *)a3, 0x30u, *(_QWORD *)(a1 + 24), &v83);
  if (!v84)
  {
    sub_20EF764A8(&v82);
    if (**(int **)(v82 + 56) > 5)
      goto LABEL_71;
    v14 = *(unsigned __int8 *)(v82 + 72);
    v15 = sub_20E8C31DC(v82, "OSLogSurrogateAppender", 1, 0);
    v16 = v15;
    if (!v14 && v15 == 0)
      goto LABEL_71;
    v86.tv_sec = (__darwin_time_t)&v82;
    v86.tv_nsec = std::chrono::steady_clock::now().__d_.__rep_;
    rep = std::chrono::system_clock::now().__d_.__rep_;
    v88 = 5;
    v89 = "unknown file";
    v90 = 83;
    v92 = 0;
    v93 = 0;
    v91 = "unknown function";
    if (*(char *)(a3 + 23) >= 0)
      v18 = (char *)a3;
    else
      v18 = *(char **)a3;
    __s = v18;
    v80 = *(_QWORD *)v86.tv_sec + 16;
    v81 = *(_QWORD *)v86.tv_sec;
    if (*(char *)(*(_QWORD *)v86.tv_sec + 39) < 0)
    {
      v20 = *(const char **)(v81 + 16);
      v19 = *(_QWORD *)(v81 + 24);
    }
    else
    {
      v19 = *(unsigned __int8 *)(*(_QWORD *)v86.tv_sec + 39);
      v20 = (const char *)(*(_QWORD *)v86.tv_sec + 16);
    }
    v21 = atomic_load((unsigned __int8 *)&qword_254A4A510);
    if ((v21 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
    {
      sub_20E9E46F8((uint64_t)object);
      if (object[24])
      {
        *(_OWORD *)byte_254A4A4F8 = *(_OWORD *)object;
        *(_QWORD *)&byte_254A4A4F8[16] = *(_QWORD *)&object[16];
      }
      else
      {
        byte_254A4A4F8[23] = 14;
        strcpy(byte_254A4A4F8, "com.apple.cv3d");
      }
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
      __cxa_guard_release(&qword_254A4A510);
    }
    if (byte_254A4A4F8[23] >= 0)
      v22 = byte_254A4A4F8[23];
    else
      v22 = *(_QWORD *)&byte_254A4A4F8[8];
    if (byte_254A4A4F8[23] >= 0)
      v23 = byte_254A4A4F8;
    else
      v23 = *(const char **)byte_254A4A4F8;
    *(_QWORD *)object = os_log_create(v23, v20);
    v24 = &object[8];
    if (v22 > 0x7FFFFFFFFFFFFFF7)
      sub_20E860B7C();
    if (v22 >= 0x17)
    {
      v25 = (v22 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v22 | 7) != 0x17)
        v25 = v22 | 7;
      v26 = v25 + 1;
      v24 = operator new(v25 + 1);
      *(_QWORD *)&object[16] = v22;
      *(_QWORD *)&object[24] = v26 | 0x8000000000000000;
      *(_QWORD *)&object[8] = v24;
    }
    else
    {
      object[31] = v22;
      if (!v22)
      {
LABEL_41:
        v24[v22] = 0;
        LOBYTE(__p[0]) = 1;
        v27 = &__p[1];
        if (v19 > 0x7FFFFFFFFFFFFFF7)
          sub_20E860B7C();
        if (v19 >= 0x17)
        {
          v29 = (v19 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v19 | 7) != 0x17)
            v29 = v19 | 7;
          v30 = v29 + 1;
          v27 = (void **)operator new(v29 + 1);
          *(_QWORD *)&v97 = v19;
          *((_QWORD *)&v97 + 1) = v30 | 0x8000000000000000;
          __p[1] = v27;
        }
        else
        {
          HIBYTE(v97) = v19;
          if (!v19)
          {
            LOBYTE(__p[1]) = 0;
            LOBYTE(v98[0]) = 1;
            v28 = *(NSObject **)object;
            if (SHIBYTE(v97) < 0)
              goto LABEL_46;
            goto LABEL_52;
          }
        }
        memmove(v27, v20, v19);
        *((_BYTE *)v27 + v19) = 0;
        LOBYTE(v98[0]) = 1;
        v28 = *(NSObject **)object;
        if (SHIBYTE(v97) < 0)
        {
LABEL_46:
          operator delete(__p[1]);
          if (!LOBYTE(__p[0]))
            goto LABEL_55;
          goto LABEL_53;
        }
LABEL_52:
        if (!LOBYTE(__p[0]))
          goto LABEL_55;
LABEL_53:
        if ((object[31] & 0x80000000) != 0)
          operator delete(*(void **)&object[8]);
LABEL_55:
        if (*(_QWORD *)object)
          os_release(*(void **)object);
        if (!v16 || !*(_QWORD *)(v16 + 24))
        {
          os_log_type_enabled(v28, OS_LOG_TYPE_ERROR);
          *(_DWORD *)object = 136315138;
          *(_QWORD *)&object[4] = __s;
          v31 = (void *)_os_log_send_and_compose_impl();
          if (v31)
            free(v31);
LABEL_61:
          if (v14)
          {
            if (*(char *)(a3 + 23) >= 0)
              v32 = (const char *)a3;
            else
              v32 = *(const char **)a3;
            sub_20E8C003C((uint64_t)&v86, "[%s] failed to open stream.", v32);
            sub_20E863570((uint64_t)&v86);
          }
          sub_20E863570((uint64_t)&v86);
          v33 = v93;
          if (v93)
          {
            p_shared_owners = (unint64_t *)&v93->__shared_owners_;
            do
              v35 = __ldaxr(p_shared_owners);
            while (__stlxr(v35 - 1, p_shared_owners));
            if (!v35)
            {
              ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
              std::__shared_weak_count::__release_weak(v33);
            }
          }
LABEL_71:
          v36 = sub_210219C18();
          v37 = atomic_load((unsigned __int8 *)&qword_254A6DDD0);
          if ((v37 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DDD0))
          {
            __cxa_atexit((void (*)(void *))sub_21021A250, &stru_254A5A410, &dword_20E81F000);
            __cxa_guard_release(&qword_254A6DDD0);
          }
          if (!atomic_load(&qword_254A5A450))
          {
LABEL_73:
            if (os_signpost_enabled((os_log_t)*v36))
            {
              *(_DWORD *)object = 136315138;
              *(_QWORD *)&object[4] = "STRM";
              _os_signpost_emit_unreliably_with_name_impl();
            }
            exception = (std::runtime_error *)__cxa_allocate_exception(0x18uLL);
            sub_20EF5D440(a3, (uint64_t)" failed to open stream.");
            std::runtime_error::runtime_error(exception, (const std::string *)object);
            exception->__vftable = (std::runtime_error_vtbl *)&off_24C9F2020;
            LODWORD(exception[1].__vftable) = 0;
            __cxa_throw(exception, (struct type_info *)&unk_24C9F2038, (void (*)(void *))std::runtime_error::~runtime_error);
          }
          *(_DWORD *)object = 136315138;
          *(_QWORD *)&object[4] = "STRM";
          v40 = (char *)_os_log_send_and_compose_impl();
          v41 = strlen(v40);
          v86.tv_sec = 0;
          pthread_threadid_np(0, (__uint64_t *)&v86);
          tv_sec = v86.tv_sec;
          timespec_get(&v86, 1);
          sub_210219E20(object, 0xEEEEB0B5B2B2EEEELL, "Trace", 5uLL, (__int128 *)(v36 + 1), (__int128 *)(v36 + 5), "MappingIOSampleWriteErr:TYPE:%s", 0x1FuLL, v40, v41, tv_sec, &v86);
          std::mutex::lock(&stru_254A5A410);
          v43 = qword_254A5A458;
          for (i = unk_254A5A460; v43 != i; v43 += 40)
          {
            v45 = *(_QWORD *)(v43 + 32);
            if (!v45)
              sub_20E86D37C();
            (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v45 + 48))(v45, object);
          }
          std::mutex::unlock(&stru_254A5A410);
          if (v103 < 0)
          {
            operator delete(v101[1]);
            if ((SHIBYTE(v101[0]) & 0x80000000) == 0)
              goto LABEL_81;
          }
          else if ((SHIBYTE(v101[0]) & 0x80000000) == 0)
          {
LABEL_81:
            if (!BYTE8(v99))
            {
LABEL_87:
              if (BYTE8(v97) && SBYTE7(v97) < 0)
                operator delete(__p[0]);
              if ((object[31] & 0x80000000) != 0)
                operator delete(*(void **)&object[8]);
              if (v40)
                free(v40);
              goto LABEL_73;
            }
LABEL_85:
            if (SBYTE7(v99) < 0)
              operator delete(v98[0]);
            goto LABEL_87;
          }
          operator delete(v100[0]);
          if (!BYTE8(v99))
            goto LABEL_87;
          goto LABEL_85;
        }
        v46 = _os_log_pack_size();
        v47 = (std::__shared_weak_count_vtbl *)operator new(v46, (std::align_val_t)8uLL);
        v48 = (std::__shared_weak_count *)operator new();
        v48->__shared_owners_ = 0;
        v49 = (unint64_t *)&v48->__shared_owners_;
        v48->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
        v48->__shared_weak_owners_ = 0;
        v48[1].__vftable = v47;
        v50 = strlen(__s);
        if (v50 > 0x7FFFFFFFFFFFFFF7)
          sub_20E860B7C();
        v51 = v50;
        if (v50 >= 0x17)
        {
          v53 = (v50 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v50 | 7) != 0x17)
            v53 = v50 | 7;
          v54 = v53 + 1;
          v52 = operator new(v53 + 1);
          *(_QWORD *)&object[8] = v51;
          *(_QWORD *)&object[16] = v54 | 0x8000000000000000;
          *(_QWORD *)object = v52;
        }
        else
        {
          object[23] = v50;
          v52 = object;
          if (!v50)
          {
LABEL_104:
            v52[v51] = 0;
            v76 = *(_QWORD *)object;
            v104[0] = *(_QWORD *)&object[8];
            *(_QWORD *)((char *)v104 + 7) = *(_QWORD *)&object[15];
            __sa = object[23];
            v55 = operator new(0x38uLL);
            v56 = (std::__shared_weak_count *)v55;
            v55[1] = 0;
            v57 = v55 + 1;
            v55[3] = off_24C9ABC20;
            v74 = (char *)(v55 + 3);
            v55[2] = 0;
            v55[4] = v76;
            v75 = (char *)(v55 + 4);
            *v55 = &off_24C9ABBD0;
            v55[5] = v104[0];
            *(_QWORD *)((char *)v55 + 47) = *(_QWORD *)((char *)v104 + 7);
            *((_BYTE *)v55 + 55) = __sa;
            do
              v58 = __ldxr(v49);
            while (__stxr(v58 + 1, v49));
            do
              v59 = __ldxr(v57);
            while (__stxr(v59 + 1, v57));
            do
              v60 = __ldaxr(v57);
            while (__stlxr(v60 - 1, v57));
            if (!v60)
            {
              (*(void (**)(_QWORD *))(*v55 + 16))(v55);
              std::__shared_weak_count::__release_weak(v56);
            }
            do
              v61 = __ldaxr(v49);
            while (__stlxr(v61 - 1, v49));
            if (!v61)
            {
              ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
              std::__shared_weak_count::__release_weak(v48);
            }
            shared_owners = v75;
            if (SHIBYTE(v56[2].__vftable) < 0)
              shared_owners = (char *)v56[1].__shared_owners_;
            __sb = shared_owners;
            v63 = _os_log_pack_fill();
            *(_DWORD *)v63 = 136315138;
            *(_QWORD *)(v63 + 4) = __sb;
            v64 = operator new();
            v65 = *(unsigned __int8 *)(v81 + 39);
            v66 = v80;
            if ((v65 & 0x80u) != 0)
            {
              v66 = *(_QWORD *)(v81 + 16);
              v65 = *(_QWORD *)(v81 + 24);
            }
            *(_QWORD *)v64 = v47;
            *(_QWORD *)(v64 + 8) = v47;
            *(_QWORD *)(v64 + 16) = v48;
            *(_QWORD *)(v64 + 24) = v74;
            *(_QWORD *)(v64 + 32) = v56;
            *(_QWORD *)(v64 + 40) = v66;
            *(_QWORD *)(v64 + 48) = v65;
            *(_BYTE *)(v64 + 56) = 16;
            *(_QWORD *)object = v64;
            (*(void (**)(_QWORD, _BYTE *))(**(_QWORD **)(v16 + 24) + 40))(*(_QWORD *)(v16 + 24), object);
            v67 = *(_QWORD *)object;
            *(_QWORD *)object = 0;
            if (v67)
            {
              v68 = *(std::__shared_weak_count **)(v67 + 32);
              if (v68)
              {
                v69 = (unint64_t *)&v68->__shared_owners_;
                do
                  v70 = __ldaxr(v69);
                while (__stlxr(v70 - 1, v69));
                if (!v70)
                {
                  ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
                  std::__shared_weak_count::__release_weak(v68);
                }
              }
              v71 = *(std::__shared_weak_count **)(v67 + 16);
              if (v71)
              {
                v72 = (unint64_t *)&v71->__shared_owners_;
                do
                  v73 = __ldaxr(v72);
                while (__stlxr(v73 - 1, v72));
                if (!v73)
                {
                  ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
                  std::__shared_weak_count::__release_weak(v71);
                }
              }
              MEMORY[0x212BC6398](v67, 0x10F0C40B62ED6C6);
            }
            goto LABEL_61;
          }
        }
        memcpy(v52, __s, v51);
        goto LABEL_104;
      }
    }
    memmove(v24, v23, v22);
    goto LABEL_41;
  }
  v6 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v84 + 16))(v84);
  v7 = (char *)v6 + *(_QWORD *)(*v6 - 24);
  if ((v7[32] & 5) != 0)
  {
    *(_OWORD *)v100 = 0u;
    *(_OWORD *)v101 = 0u;
    *(_OWORD *)v98 = 0u;
    v99 = 0u;
    *(_OWORD *)__p = 0u;
    v97 = 0u;
    memset(object, 0, sizeof(object));
    v102 = -1;
  }
  else
  {
    (*(void (**)(_BYTE *__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**((_QWORD **)v7 + 5) + 32))(object, *((_QWORD *)v7 + 5), 0, 1, 16);
  }
  v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v84 + 16))(v84);
  sub_20EF972C0(v8, a2, **(const void ***)(a1 + 16), *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8));
  v9 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v84 + 16))(v84);
  v10 = (char *)v9 + *(_QWORD *)(*v9 - 24);
  if ((v10[32] & 5) != 0)
  {
    **(_QWORD **)(a1 + 8) = -1 - v102;
    v11 = v85;
    if (!v85)
      return;
  }
  else
  {
    (*(void (**)(timespec *__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**((_QWORD **)v10 + 5) + 32))(&v86, *((_QWORD *)v10 + 5), 0, 1, 16);
    **(_QWORD **)(a1 + 8) = v94 - v102;
    v11 = v85;
    if (!v85)
      return;
  }
  v12 = (unint64_t *)&v11->__shared_owners_;
  do
    v13 = __ldaxr(v12);
  while (__stlxr(v13 - 1, v12));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
}

void sub_20EF96F14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,std::__shared_weak_count *a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  unint64_t *p_shared_owners;
  unint64_t v36;

  __cxa_guard_abort(&qword_254A4A510);
  sub_20E863570((uint64_t)&a23);
  v32 = (std::__shared_weak_count *)a31;
  if (a31)
  {
    v33 = (unint64_t *)(a31 + 8);
    do
      v34 = __ldaxr(v33);
    while (__stlxr(v34 - 1, v33));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
    }
  }
  if (a22)
  {
    p_shared_owners = (unint64_t *)&a22->__shared_owners_;
    do
      v36 = __ldaxr(p_shared_owners);
    while (__stlxr(v36 - 1, p_shared_owners));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))a22->__on_zero_shared)(a22);
      std::__shared_weak_count::__release_weak(a22);
    }
  }
  _Unwind_Resume(a1);
}

uint64_t sub_20EF97248(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3vio10mapping_io15SerializeSampleINS0_13mapping_types2v313MapDataSampleILj8EEEEEyRKT_RKNSt3_"
                     "_117basic_string_viewIcNSA_11char_traitsIcEEEERKNSA_12basic_stringIcSD_NSA_9allocatorIcEEEERNS_3kit"
                     "2fs11IFilesystemEEUlRKS6_RKNSA_4__fs10filesystem4pathEE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4cv3d3vio10mapping_io15SerializeSampleINS0_13mapping_types2v313MapDataSampleILj8EEEEEy"
                                "RKT_RKNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEERKNSA_12basic_stringIcSD_NSA_9a"
                                "llocatorIcEEEERNS_3kit2fs11IFilesystemEEUlRKS6_RKNSA_4__fs10filesystem4pathEE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3vio10mapping_io15SerializeSampleINS0_13mapping_types2v313MapDataSampleILj8EEEEEyRKT_RKNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEERKNSA_12basic_stringIcSD_NSA_9allocatorIcEEEERNS_3kit2fs11IFilesystemEEUlRKS6_RKNSA_4__fs10filesystem4pathEE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3vio10mapping_io15SerializeSampleINS0_13mapping_types2v313MapDataSampleILj8EEEEEyRKT_RKNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEERKNSA_12basic_stringIcSD_NSA_9allocatorIcEEEERNS_3kit2fs11IFilesystemEEUlRKS6_RKNSA_4__fs10filesystem4pathEE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20EF972B4()
{
  return &unk_24C9F2438;
}

void sub_20EF972C0(uint64_t a1, uint64_t a2, const void *a3, size_t a4)
{
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  void *__p[2];
  unint64_t v16;
  _QWORD v17[2];
  void *v18;
  uint64_t v19;
  char v20;

  v17[1] = 1;
  v8 = operator new();
  *(_QWORD *)v8 = a1;
  *(_BYTE *)(v8 + 16) = 0;
  *(_BYTE *)(v8 + 40) = 0;
  *(_BYTE *)(v8 + 48) = 0;
  *(_BYTE *)(v8 + 72) = 0;
  *(_QWORD *)(v8 + 88) = 0;
  *(_QWORD *)(v8 + 96) = 0;
  *(_QWORD *)(v8 + 80) = 0;
  *(_QWORD *)(v8 + 8) = a1;
  v9 = v8 + 8;
  v17[0] = &off_24C9B4468;
  v18 = &unk_24C9B45B8;
  v19 = v8;
  if (a4)
  {
    if (a4 >= 0x7FFFFFFFFFFFFFF8)
      sub_20E860B7C();
    if (a4 >= 0x17)
    {
      v11 = (a4 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((a4 | 7) != 0x17)
        v11 = a4 | 7;
      v12 = v11 + 1;
      v10 = operator new(v11 + 1);
      __p[1] = (void *)a4;
      v16 = v12 | 0x8000000000000000;
      __p[0] = v10;
    }
    else
    {
      HIBYTE(v16) = a4;
      v10 = __p;
    }
    memmove(v10, a3, a4);
    *((_BYTE *)v10 + a4) = 0;
    sub_20E9F5254((uint64_t)&v20, v9, (uint64_t)__p);
    if (SHIBYTE(v16) < 0)
      operator delete(__p[0]);
  }
  sub_20EE67AB4((uint64_t)__p, (uint64_t)v17, a2);
  v17[0] = &off_24C9B7040;
  v13 = v19;
  v18 = &unk_24C9B7190;
  v19 = 0;
  if (v13)
  {
    v14 = *(void **)(v13 + 80);
    if (v14)
    {
      *(_QWORD *)(v13 + 88) = v14;
      operator delete(v14);
    }
    if (*(_BYTE *)(v13 + 72))
      free(*(void **)(v13 + 56));
    if (*(_BYTE *)(v13 + 40))
      free(*(void **)(v13 + 24));
    MEMORY[0x212BC6398](v13, 0x1030C408C1A3048);
  }
}

void sub_20EF97460(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15)
{
  if (a14 < 0)
  {
    operator delete(__p);
    sub_20E9EE6A8(&a15);
    _Unwind_Resume(a1);
  }
  sub_20E9EE6A8(&a15);
  _Unwind_Resume(a1);
}

void sub_20EF9749C(uint64_t a1, uint64_t *a2, os_log_t oslog, os_log_type_t type, const char **a5)
{
  size_t v9;
  std::__shared_weak_count_vtbl *v10;
  std::__shared_weak_count *v11;
  const char *v12;
  size_t v13;
  size_t v14;
  _QWORD *p_dst;
  const char *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  char v21;
  _QWORD *v22;
  uint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *p_shared_owners;
  unint64_t v26;
  uint64_t *v27;
  unint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t *v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  _QWORD *v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  __int128 v60;
  std::__shared_weak_count *v61;
  __int128 v62;
  _QWORD *__dst;
  __int128 v64;
  _BYTE v65[24];
  __int128 v66;
  uint64_t v67;
  _QWORD v68[3];

  v68[2] = *MEMORY[0x24BDAC8D0];
  if (a1 && *(_QWORD *)(a1 + 8))
  {
    v9 = _os_log_pack_size();
    v10 = (std::__shared_weak_count_vtbl *)operator new(v9, (std::align_val_t)8uLL);
    v11 = (std::__shared_weak_count *)operator new();
    v11->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
    v11->__shared_owners_ = 0;
    v11->__shared_weak_owners_ = 0;
    v11[1].__vftable = v10;
    *(_QWORD *)&v60 = v10;
    *((_QWORD *)&v60 + 1) = v10;
    v62 = 0uLL;
    v61 = v11;
    v12 = *a5;
    v13 = strlen(*a5);
    if (v13 >= 0x7FFFFFFFFFFFFFF8)
      sub_20E860B7C();
    v14 = v13;
    if (v13 >= 0x17)
    {
      v18 = (v13 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v13 | 7) != 0x17)
        v18 = v13 | 7;
      v19 = v18 + 1;
      p_dst = operator new(v18 + 1);
      *(_QWORD *)&v64 = v14;
      *((_QWORD *)&v64 + 1) = v19 | 0x8000000000000000;
      __dst = p_dst;
    }
    else
    {
      HIBYTE(v64) = v13;
      p_dst = &__dst;
      if (!v13)
      {
LABEL_13:
        *((_BYTE *)p_dst + v14) = 0;
        v20 = __dst;
        v68[0] = v64;
        *(_QWORD *)((char *)v68 + 7) = *(_QWORD *)((char *)&v64 + 7);
        v21 = HIBYTE(v64);
        v22 = operator new(0x38uLL);
        v22[1] = 0;
        v22[2] = 0;
        v22[3] = off_24C9ABC20;
        *v22 = &off_24C9ABBD0;
        v23 = v68[0];
        v22[4] = v20;
        v22[5] = v23;
        *(_QWORD *)((char *)v22 + 47) = *(_QWORD *)((char *)v68 + 7);
        *((_BYTE *)v22 + 55) = v21;
        v68[0] = 0;
        *(_QWORD *)((char *)v68 + 7) = 0;
        v24 = (std::__shared_weak_count *)*((_QWORD *)&v62 + 1);
        *(_QWORD *)&v62 = v22 + 3;
        *((_QWORD *)&v62 + 1) = v22;
        if (v24)
        {
          p_shared_owners = (unint64_t *)&v24->__shared_owners_;
          do
            v26 = __ldaxr(p_shared_owners);
          while (__stlxr(v26 - 1, p_shared_owners));
          if (!v26)
          {
            ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
            std::__shared_weak_count::__release_weak(v24);
          }
        }
        *(_OWORD *)v65 = v60;
        *(_QWORD *)&v65[16] = v61;
        if (v61)
        {
          v27 = &v61->__shared_owners_;
          do
            v28 = __ldxr((unint64_t *)v27);
          while (__stxr(v28 + 1, (unint64_t *)v27));
        }
        v66 = v62;
        if (*((_QWORD *)&v62 + 1))
        {
          v29 = (unint64_t *)(*((_QWORD *)&v62 + 1) + 8);
          do
            v30 = __ldxr(v29);
          while (__stxr(v30 + 1, v29));
          v67 = v62;
          do
            v31 = __ldaxr(v29);
          while (__stlxr(v31 - 1, v29));
          if (!v31)
          {
            (*(void (**)(_QWORD))(**((_QWORD **)&v62 + 1) + 16))(*((_QWORD *)&v62 + 1));
            std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v62 + 1));
          }
        }
        else
        {
          v67 = v62;
        }
        if (v61)
        {
          v32 = &v61->__shared_owners_;
          do
            v33 = __ldaxr((unint64_t *)v32);
          while (__stlxr(v33 - 1, (unint64_t *)v32));
          if (!v33)
          {
            ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
            std::__shared_weak_count::__release_weak(v61);
          }
        }
        v34 = *(_QWORD *)v65;
        if (*(char *)(v67 + 31) >= 0)
          v35 = v67 + 8;
        else
          v35 = *(_QWORD *)(v67 + 8);
        v36 = _os_log_pack_fill();
        *(_DWORD *)v36 = 136315138;
        *(_QWORD *)(v36 + 4) = v35;
        v37 = operator new();
        v38 = *((unsigned __int8 *)a2 + 23);
        if ((v38 & 0x80u) == 0)
          v39 = a2;
        else
          v39 = (uint64_t *)*a2;
        if ((v38 & 0x80u) != 0)
          v38 = a2[1];
        *(_QWORD *)v37 = v34;
        *(_OWORD *)(v37 + 8) = *(_OWORD *)&v65[8];
        *(_QWORD *)&v65[8] = 0;
        *(_QWORD *)&v65[16] = 0;
        *(_OWORD *)(v37 + 24) = v66;
        v66 = 0uLL;
        *(_QWORD *)(v37 + 40) = v39;
        *(_QWORD *)(v37 + 48) = v38;
        *(_BYTE *)(v37 + 56) = type;
        __dst = 0;
        *(_QWORD *)&v60 = v37;
        (*(void (**)(_QWORD, __int128 *))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8), &v60);
        v40 = v60;
        *(_QWORD *)&v60 = 0;
        if (v40)
        {
          v41 = *(std::__shared_weak_count **)(v40 + 32);
          if (v41)
          {
            v42 = (unint64_t *)&v41->__shared_owners_;
            do
              v43 = __ldaxr(v42);
            while (__stlxr(v43 - 1, v42));
            if (!v43)
            {
              ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
              std::__shared_weak_count::__release_weak(v41);
            }
          }
          v44 = *(std::__shared_weak_count **)(v40 + 16);
          if (v44)
          {
            v45 = (unint64_t *)&v44->__shared_owners_;
            do
              v46 = __ldaxr(v45);
            while (__stlxr(v46 - 1, v45));
            if (!v46)
            {
              ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
              std::__shared_weak_count::__release_weak(v44);
            }
          }
          MEMORY[0x212BC6398](v40, 0x10F0C40B62ED6C6);
          v47 = __dst;
          __dst = 0;
          if (v47)
          {
            v48 = (std::__shared_weak_count *)v47[4];
            if (v48)
            {
              v49 = (unint64_t *)&v48->__shared_owners_;
              do
                v50 = __ldaxr(v49);
              while (__stlxr(v50 - 1, v49));
              if (!v50)
              {
                ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
                std::__shared_weak_count::__release_weak(v48);
              }
            }
            v51 = (std::__shared_weak_count *)v47[2];
            if (v51)
            {
              v52 = (unint64_t *)&v51->__shared_owners_;
              do
                v53 = __ldaxr(v52);
              while (__stlxr(v53 - 1, v52));
              if (!v53)
              {
                ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
                std::__shared_weak_count::__release_weak(v51);
              }
            }
            MEMORY[0x212BC6398](v47, 0x10F0C40B62ED6C6);
          }
        }
        v54 = (std::__shared_weak_count *)*((_QWORD *)&v66 + 1);
        if (*((_QWORD *)&v66 + 1))
        {
          v55 = (unint64_t *)(*((_QWORD *)&v66 + 1) + 8);
          do
            v56 = __ldaxr(v55);
          while (__stlxr(v56 - 1, v55));
          if (!v56)
          {
            ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
            std::__shared_weak_count::__release_weak(v54);
          }
        }
        v57 = *(std::__shared_weak_count **)&v65[16];
        if (*(_QWORD *)&v65[16])
        {
          v58 = (unint64_t *)(*(_QWORD *)&v65[16] + 8);
          do
            v59 = __ldaxr(v58);
          while (__stlxr(v59 - 1, v58));
          if (!v59)
          {
            ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
            std::__shared_weak_count::__release_weak(v57);
          }
        }
        return;
      }
    }
    memcpy(p_dst, v12, v14);
    goto LABEL_13;
  }
  os_log_type_enabled(oslog, type);
  v16 = *a5;
  *(_DWORD *)v65 = 136315138;
  *(_QWORD *)&v65[4] = v16;
  v17 = (void *)_os_log_send_and_compose_impl();
  if (v17)
    free(v17);
}

void sub_20EF97A10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  va_list va1;
  uint64_t v12;
  uint64_t v13;
  va_list va2;

  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v10 = va_arg(va2, _QWORD);
  v12 = va_arg(va2, _QWORD);
  v13 = va_arg(va2, _QWORD);
  sub_20E86E8C4((uint64_t *)va);
  sub_20E86E8C4((uint64_t *)va1);
  sub_20E86E658((uint64_t)va2);
  _Unwind_Resume(a1);
}

void sub_20EF97A34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  sub_20E86E658((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20EF97A48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  void *v11;
  int v12;

  if (v12 < 0)
  {
    operator delete(v11);
    sub_20E86E658((uint64_t)&a11);
    _Unwind_Resume(a1);
  }
  sub_20E86E658((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void sub_20EF97AA0(uint64_t a1, uint64_t *a2, os_log_t oslog, os_log_type_t type, const char **a5)
{
  size_t v9;
  std::__shared_weak_count_vtbl *v10;
  std::__shared_weak_count *v11;
  const char *v12;
  size_t v13;
  size_t v14;
  _QWORD *p_dst;
  const char *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  char v21;
  _QWORD *v22;
  uint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *p_shared_owners;
  unint64_t v26;
  uint64_t *v27;
  unint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t *v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  _QWORD *v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  __int128 v60;
  std::__shared_weak_count *v61;
  __int128 v62;
  _QWORD *__dst;
  __int128 v64;
  _BYTE v65[24];
  __int128 v66;
  uint64_t v67;
  _QWORD v68[3];

  v68[2] = *MEMORY[0x24BDAC8D0];
  if (a1 && *(_QWORD *)(a1 + 8))
  {
    v9 = _os_log_pack_size();
    v10 = (std::__shared_weak_count_vtbl *)operator new(v9, (std::align_val_t)8uLL);
    v11 = (std::__shared_weak_count *)operator new();
    v11->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
    v11->__shared_owners_ = 0;
    v11->__shared_weak_owners_ = 0;
    v11[1].__vftable = v10;
    *(_QWORD *)&v60 = v10;
    *((_QWORD *)&v60 + 1) = v10;
    v62 = 0uLL;
    v61 = v11;
    v12 = *a5;
    v13 = strlen(*a5);
    if (v13 >= 0x7FFFFFFFFFFFFFF8)
      sub_20E860B7C();
    v14 = v13;
    if (v13 >= 0x17)
    {
      v18 = (v13 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v13 | 7) != 0x17)
        v18 = v13 | 7;
      v19 = v18 + 1;
      p_dst = operator new(v18 + 1);
      *(_QWORD *)&v64 = v14;
      *((_QWORD *)&v64 + 1) = v19 | 0x8000000000000000;
      __dst = p_dst;
    }
    else
    {
      HIBYTE(v64) = v13;
      p_dst = &__dst;
      if (!v13)
      {
LABEL_13:
        *((_BYTE *)p_dst + v14) = 0;
        v20 = __dst;
        v68[0] = v64;
        *(_QWORD *)((char *)v68 + 7) = *(_QWORD *)((char *)&v64 + 7);
        v21 = HIBYTE(v64);
        v22 = operator new(0x38uLL);
        v22[1] = 0;
        v22[2] = 0;
        v22[3] = off_24C9ABC20;
        *v22 = &off_24C9ABBD0;
        v23 = v68[0];
        v22[4] = v20;
        v22[5] = v23;
        *(_QWORD *)((char *)v22 + 47) = *(_QWORD *)((char *)v68 + 7);
        *((_BYTE *)v22 + 55) = v21;
        v68[0] = 0;
        *(_QWORD *)((char *)v68 + 7) = 0;
        v24 = (std::__shared_weak_count *)*((_QWORD *)&v62 + 1);
        *(_QWORD *)&v62 = v22 + 3;
        *((_QWORD *)&v62 + 1) = v22;
        if (v24)
        {
          p_shared_owners = (unint64_t *)&v24->__shared_owners_;
          do
            v26 = __ldaxr(p_shared_owners);
          while (__stlxr(v26 - 1, p_shared_owners));
          if (!v26)
          {
            ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
            std::__shared_weak_count::__release_weak(v24);
          }
        }
        *(_OWORD *)v65 = v60;
        *(_QWORD *)&v65[16] = v61;
        if (v61)
        {
          v27 = &v61->__shared_owners_;
          do
            v28 = __ldxr((unint64_t *)v27);
          while (__stxr(v28 + 1, (unint64_t *)v27));
        }
        v66 = v62;
        if (*((_QWORD *)&v62 + 1))
        {
          v29 = (unint64_t *)(*((_QWORD *)&v62 + 1) + 8);
          do
            v30 = __ldxr(v29);
          while (__stxr(v30 + 1, v29));
          v67 = v62;
          do
            v31 = __ldaxr(v29);
          while (__stlxr(v31 - 1, v29));
          if (!v31)
          {
            (*(void (**)(_QWORD))(**((_QWORD **)&v62 + 1) + 16))(*((_QWORD *)&v62 + 1));
            std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v62 + 1));
          }
        }
        else
        {
          v67 = v62;
        }
        if (v61)
        {
          v32 = &v61->__shared_owners_;
          do
            v33 = __ldaxr((unint64_t *)v32);
          while (__stlxr(v33 - 1, (unint64_t *)v32));
          if (!v33)
          {
            ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
            std::__shared_weak_count::__release_weak(v61);
          }
        }
        v34 = *(_QWORD *)v65;
        if (*(char *)(v67 + 31) >= 0)
          v35 = v67 + 8;
        else
          v35 = *(_QWORD *)(v67 + 8);
        v36 = _os_log_pack_fill();
        *(_DWORD *)v36 = 136315138;
        *(_QWORD *)(v36 + 4) = v35;
        v37 = operator new();
        v38 = *((unsigned __int8 *)a2 + 23);
        if ((v38 & 0x80u) == 0)
          v39 = a2;
        else
          v39 = (uint64_t *)*a2;
        if ((v38 & 0x80u) != 0)
          v38 = a2[1];
        *(_QWORD *)v37 = v34;
        *(_OWORD *)(v37 + 8) = *(_OWORD *)&v65[8];
        *(_QWORD *)&v65[8] = 0;
        *(_QWORD *)&v65[16] = 0;
        *(_OWORD *)(v37 + 24) = v66;
        v66 = 0uLL;
        *(_QWORD *)(v37 + 40) = v39;
        *(_QWORD *)(v37 + 48) = v38;
        *(_BYTE *)(v37 + 56) = type;
        __dst = 0;
        *(_QWORD *)&v60 = v37;
        (*(void (**)(_QWORD, __int128 *))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8), &v60);
        v40 = v60;
        *(_QWORD *)&v60 = 0;
        if (v40)
        {
          v41 = *(std::__shared_weak_count **)(v40 + 32);
          if (v41)
          {
            v42 = (unint64_t *)&v41->__shared_owners_;
            do
              v43 = __ldaxr(v42);
            while (__stlxr(v43 - 1, v42));
            if (!v43)
            {
              ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
              std::__shared_weak_count::__release_weak(v41);
            }
          }
          v44 = *(std::__shared_weak_count **)(v40 + 16);
          if (v44)
          {
            v45 = (unint64_t *)&v44->__shared_owners_;
            do
              v46 = __ldaxr(v45);
            while (__stlxr(v46 - 1, v45));
            if (!v46)
            {
              ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
              std::__shared_weak_count::__release_weak(v44);
            }
          }
          MEMORY[0x212BC6398](v40, 0x10F0C40B62ED6C6);
          v47 = __dst;
          __dst = 0;
          if (v47)
          {
            v48 = (std::__shared_weak_count *)v47[4];
            if (v48)
            {
              v49 = (unint64_t *)&v48->__shared_owners_;
              do
                v50 = __ldaxr(v49);
              while (__stlxr(v50 - 1, v49));
              if (!v50)
              {
                ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
                std::__shared_weak_count::__release_weak(v48);
              }
            }
            v51 = (std::__shared_weak_count *)v47[2];
            if (v51)
            {
              v52 = (unint64_t *)&v51->__shared_owners_;
              do
                v53 = __ldaxr(v52);
              while (__stlxr(v53 - 1, v52));
              if (!v53)
              {
                ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
                std::__shared_weak_count::__release_weak(v51);
              }
            }
            MEMORY[0x212BC6398](v47, 0x10F0C40B62ED6C6);
          }
        }
        v54 = (std::__shared_weak_count *)*((_QWORD *)&v66 + 1);
        if (*((_QWORD *)&v66 + 1))
        {
          v55 = (unint64_t *)(*((_QWORD *)&v66 + 1) + 8);
          do
            v56 = __ldaxr(v55);
          while (__stlxr(v56 - 1, v55));
          if (!v56)
          {
            ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
            std::__shared_weak_count::__release_weak(v54);
          }
        }
        v57 = *(std::__shared_weak_count **)&v65[16];
        if (*(_QWORD *)&v65[16])
        {
          v58 = (unint64_t *)(*(_QWORD *)&v65[16] + 8);
          do
            v59 = __ldaxr(v58);
          while (__stlxr(v59 - 1, v58));
          if (!v59)
          {
            ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
            std::__shared_weak_count::__release_weak(v57);
          }
        }
        return;
      }
    }
    memcpy(p_dst, v12, v14);
    goto LABEL_13;
  }
  os_log_type_enabled(oslog, type);
  v16 = *a5;
  *(_DWORD *)v65 = 136315138;
  *(_QWORD *)&v65[4] = v16;
  v17 = (void *)_os_log_send_and_compose_impl();
  if (v17)
    free(v17);
}

void sub_20EF98014(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  va_list va1;
  uint64_t v12;
  uint64_t v13;
  va_list va2;

  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v10 = va_arg(va2, _QWORD);
  v12 = va_arg(va2, _QWORD);
  v13 = va_arg(va2, _QWORD);
  sub_20E86E8C4((uint64_t *)va);
  sub_20E86E8C4((uint64_t *)va1);
  sub_20E86E658((uint64_t)va2);
  _Unwind_Resume(a1);
}

void sub_20EF98038(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  sub_20E86E658((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20EF9804C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  void *v11;
  int v12;

  if (v12 < 0)
  {
    operator delete(v11);
    sub_20E86E658((uint64_t)&a11);
    _Unwind_Resume(a1);
  }
  sub_20E86E658((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void sub_20EF980A8()
{
  JUMPOUT(0x212BC6398);
}

__n128 sub_20EF980BC(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_24C9F2458;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 sub_20EF980FC(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24C9F2458;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_20EF98124(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v6;
  char *v7;
  uint64_t v8;
  _QWORD *v9;
  char *v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  int v14;
  unint64_t v15;
  unint64_t v16;
  char *v18;
  size_t v19;
  const char *v20;
  unsigned __int8 v21;
  size_t v22;
  const char *v23;
  _BYTE *v24;
  uint64_t v25;
  uint64_t v26;
  void **v27;
  NSObject *v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  const char *v32;
  std::__shared_weak_count *v33;
  unint64_t *p_shared_owners;
  unint64_t v35;
  uint64_t *v36;
  unsigned __int8 v37;
  std::runtime_error *exception;
  char *v40;
  size_t v41;
  __darwin_time_t tv_sec;
  uint64_t v43;
  uint64_t i;
  uint64_t v45;
  size_t v46;
  std::__shared_weak_count_vtbl *v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  size_t v50;
  size_t v51;
  _BYTE *v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t v61;
  char *shared_owners;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  std::__shared_weak_count *v68;
  unint64_t *v69;
  unint64_t v70;
  std::__shared_weak_count *v71;
  unint64_t *v72;
  unint64_t v73;
  char *v74;
  char *v75;
  uint64_t v76;
  char *__s;
  char __sa;
  char *__sb;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  std::__shared_weak_count *v85;
  timespec v86;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep rep;
  int v88;
  const char *v89;
  int v90;
  const char *v91;
  uint64_t v92;
  std::__shared_weak_count *v93;
  uint64_t v94;
  _BYTE object[32];
  void *__p[2];
  __int128 v97;
  void *v98[2];
  __int128 v99;
  void *v100[2];
  void *v101[2];
  uint64_t v102;
  char v103;
  _QWORD v104[5];

  v104[2] = *MEMORY[0x24BDAC8D0];
  sub_210224144((const std::__fs::filesystem::path *)a3, 0x30u, *(_QWORD *)(a1 + 24), &v83);
  if (!v84)
  {
    sub_20EF764A8(&v82);
    if (**(int **)(v82 + 56) > 5)
      goto LABEL_71;
    v14 = *(unsigned __int8 *)(v82 + 72);
    v15 = sub_20E8C31DC(v82, "OSLogSurrogateAppender", 1, 0);
    v16 = v15;
    if (!v14 && v15 == 0)
      goto LABEL_71;
    v86.tv_sec = (__darwin_time_t)&v82;
    v86.tv_nsec = std::chrono::steady_clock::now().__d_.__rep_;
    rep = std::chrono::system_clock::now().__d_.__rep_;
    v88 = 5;
    v89 = "unknown file";
    v90 = 83;
    v92 = 0;
    v93 = 0;
    v91 = "unknown function";
    if (*(char *)(a3 + 23) >= 0)
      v18 = (char *)a3;
    else
      v18 = *(char **)a3;
    __s = v18;
    v80 = *(_QWORD *)v86.tv_sec + 16;
    v81 = *(_QWORD *)v86.tv_sec;
    if (*(char *)(*(_QWORD *)v86.tv_sec + 39) < 0)
    {
      v20 = *(const char **)(v81 + 16);
      v19 = *(_QWORD *)(v81 + 24);
    }
    else
    {
      v19 = *(unsigned __int8 *)(*(_QWORD *)v86.tv_sec + 39);
      v20 = (const char *)(*(_QWORD *)v86.tv_sec + 16);
    }
    v21 = atomic_load((unsigned __int8 *)&qword_254A4A510);
    if ((v21 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
    {
      sub_20E9E46F8((uint64_t)object);
      if (object[24])
      {
        *(_OWORD *)byte_254A4A4F8 = *(_OWORD *)object;
        *(_QWORD *)&byte_254A4A4F8[16] = *(_QWORD *)&object[16];
      }
      else
      {
        byte_254A4A4F8[23] = 14;
        strcpy(byte_254A4A4F8, "com.apple.cv3d");
      }
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
      __cxa_guard_release(&qword_254A4A510);
    }
    if (byte_254A4A4F8[23] >= 0)
      v22 = byte_254A4A4F8[23];
    else
      v22 = *(_QWORD *)&byte_254A4A4F8[8];
    if (byte_254A4A4F8[23] >= 0)
      v23 = byte_254A4A4F8;
    else
      v23 = *(const char **)byte_254A4A4F8;
    *(_QWORD *)object = os_log_create(v23, v20);
    v24 = &object[8];
    if (v22 > 0x7FFFFFFFFFFFFFF7)
      sub_20E860B7C();
    if (v22 >= 0x17)
    {
      v25 = (v22 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v22 | 7) != 0x17)
        v25 = v22 | 7;
      v26 = v25 + 1;
      v24 = operator new(v25 + 1);
      *(_QWORD *)&object[16] = v22;
      *(_QWORD *)&object[24] = v26 | 0x8000000000000000;
      *(_QWORD *)&object[8] = v24;
    }
    else
    {
      object[31] = v22;
      if (!v22)
      {
LABEL_41:
        v24[v22] = 0;
        LOBYTE(__p[0]) = 1;
        v27 = &__p[1];
        if (v19 > 0x7FFFFFFFFFFFFFF7)
          sub_20E860B7C();
        if (v19 >= 0x17)
        {
          v29 = (v19 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v19 | 7) != 0x17)
            v29 = v19 | 7;
          v30 = v29 + 1;
          v27 = (void **)operator new(v29 + 1);
          *(_QWORD *)&v97 = v19;
          *((_QWORD *)&v97 + 1) = v30 | 0x8000000000000000;
          __p[1] = v27;
        }
        else
        {
          HIBYTE(v97) = v19;
          if (!v19)
          {
            LOBYTE(__p[1]) = 0;
            LOBYTE(v98[0]) = 1;
            v28 = *(NSObject **)object;
            if (SHIBYTE(v97) < 0)
              goto LABEL_46;
            goto LABEL_52;
          }
        }
        memmove(v27, v20, v19);
        *((_BYTE *)v27 + v19) = 0;
        LOBYTE(v98[0]) = 1;
        v28 = *(NSObject **)object;
        if (SHIBYTE(v97) < 0)
        {
LABEL_46:
          operator delete(__p[1]);
          if (!LOBYTE(__p[0]))
            goto LABEL_55;
          goto LABEL_53;
        }
LABEL_52:
        if (!LOBYTE(__p[0]))
          goto LABEL_55;
LABEL_53:
        if ((object[31] & 0x80000000) != 0)
          operator delete(*(void **)&object[8]);
LABEL_55:
        if (*(_QWORD *)object)
          os_release(*(void **)object);
        if (!v16 || !*(_QWORD *)(v16 + 24))
        {
          os_log_type_enabled(v28, OS_LOG_TYPE_ERROR);
          *(_DWORD *)object = 136315138;
          *(_QWORD *)&object[4] = __s;
          v31 = (void *)_os_log_send_and_compose_impl();
          if (v31)
            free(v31);
LABEL_61:
          if (v14)
          {
            if (*(char *)(a3 + 23) >= 0)
              v32 = (const char *)a3;
            else
              v32 = *(const char **)a3;
            sub_20E8C003C((uint64_t)&v86, "[%s] failed to open stream.", v32);
            sub_20E863570((uint64_t)&v86);
          }
          sub_20E863570((uint64_t)&v86);
          v33 = v93;
          if (v93)
          {
            p_shared_owners = (unint64_t *)&v93->__shared_owners_;
            do
              v35 = __ldaxr(p_shared_owners);
            while (__stlxr(v35 - 1, p_shared_owners));
            if (!v35)
            {
              ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
              std::__shared_weak_count::__release_weak(v33);
            }
          }
LABEL_71:
          v36 = sub_210219C18();
          v37 = atomic_load((unsigned __int8 *)&qword_254A6DDD0);
          if ((v37 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DDD0))
          {
            __cxa_atexit((void (*)(void *))sub_21021A250, &stru_254A5A410, &dword_20E81F000);
            __cxa_guard_release(&qword_254A6DDD0);
          }
          if (!atomic_load(&qword_254A5A450))
          {
LABEL_73:
            if (os_signpost_enabled((os_log_t)*v36))
            {
              *(_DWORD *)object = 136315138;
              *(_QWORD *)&object[4] = "STRM";
              _os_signpost_emit_unreliably_with_name_impl();
            }
            exception = (std::runtime_error *)__cxa_allocate_exception(0x18uLL);
            sub_20EF5D440(a3, (uint64_t)" failed to open stream.");
            std::runtime_error::runtime_error(exception, (const std::string *)object);
            exception->__vftable = (std::runtime_error_vtbl *)&off_24C9F2020;
            LODWORD(exception[1].__vftable) = 0;
            __cxa_throw(exception, (struct type_info *)&unk_24C9F2038, (void (*)(void *))std::runtime_error::~runtime_error);
          }
          *(_DWORD *)object = 136315138;
          *(_QWORD *)&object[4] = "STRM";
          v40 = (char *)_os_log_send_and_compose_impl();
          v41 = strlen(v40);
          v86.tv_sec = 0;
          pthread_threadid_np(0, (__uint64_t *)&v86);
          tv_sec = v86.tv_sec;
          timespec_get(&v86, 1);
          sub_210219E20(object, 0xEEEEB0B5B2B2EEEELL, "Trace", 5uLL, (__int128 *)(v36 + 1), (__int128 *)(v36 + 5), "MappingIOSampleWriteErr:TYPE:%s", 0x1FuLL, v40, v41, tv_sec, &v86);
          std::mutex::lock(&stru_254A5A410);
          v43 = qword_254A5A458;
          for (i = unk_254A5A460; v43 != i; v43 += 40)
          {
            v45 = *(_QWORD *)(v43 + 32);
            if (!v45)
              sub_20E86D37C();
            (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v45 + 48))(v45, object);
          }
          std::mutex::unlock(&stru_254A5A410);
          if (v103 < 0)
          {
            operator delete(v101[1]);
            if ((SHIBYTE(v101[0]) & 0x80000000) == 0)
              goto LABEL_81;
          }
          else if ((SHIBYTE(v101[0]) & 0x80000000) == 0)
          {
LABEL_81:
            if (!BYTE8(v99))
            {
LABEL_87:
              if (BYTE8(v97) && SBYTE7(v97) < 0)
                operator delete(__p[0]);
              if ((object[31] & 0x80000000) != 0)
                operator delete(*(void **)&object[8]);
              if (v40)
                free(v40);
              goto LABEL_73;
            }
LABEL_85:
            if (SBYTE7(v99) < 0)
              operator delete(v98[0]);
            goto LABEL_87;
          }
          operator delete(v100[0]);
          if (!BYTE8(v99))
            goto LABEL_87;
          goto LABEL_85;
        }
        v46 = _os_log_pack_size();
        v47 = (std::__shared_weak_count_vtbl *)operator new(v46, (std::align_val_t)8uLL);
        v48 = (std::__shared_weak_count *)operator new();
        v48->__shared_owners_ = 0;
        v49 = (unint64_t *)&v48->__shared_owners_;
        v48->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
        v48->__shared_weak_owners_ = 0;
        v48[1].__vftable = v47;
        v50 = strlen(__s);
        if (v50 > 0x7FFFFFFFFFFFFFF7)
          sub_20E860B7C();
        v51 = v50;
        if (v50 >= 0x17)
        {
          v53 = (v50 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v50 | 7) != 0x17)
            v53 = v50 | 7;
          v54 = v53 + 1;
          v52 = operator new(v53 + 1);
          *(_QWORD *)&object[8] = v51;
          *(_QWORD *)&object[16] = v54 | 0x8000000000000000;
          *(_QWORD *)object = v52;
        }
        else
        {
          object[23] = v50;
          v52 = object;
          if (!v50)
          {
LABEL_104:
            v52[v51] = 0;
            v76 = *(_QWORD *)object;
            v104[0] = *(_QWORD *)&object[8];
            *(_QWORD *)((char *)v104 + 7) = *(_QWORD *)&object[15];
            __sa = object[23];
            v55 = operator new(0x38uLL);
            v56 = (std::__shared_weak_count *)v55;
            v55[1] = 0;
            v57 = v55 + 1;
            v55[3] = off_24C9ABC20;
            v74 = (char *)(v55 + 3);
            v55[2] = 0;
            v55[4] = v76;
            v75 = (char *)(v55 + 4);
            *v55 = &off_24C9ABBD0;
            v55[5] = v104[0];
            *(_QWORD *)((char *)v55 + 47) = *(_QWORD *)((char *)v104 + 7);
            *((_BYTE *)v55 + 55) = __sa;
            do
              v58 = __ldxr(v49);
            while (__stxr(v58 + 1, v49));
            do
              v59 = __ldxr(v57);
            while (__stxr(v59 + 1, v57));
            do
              v60 = __ldaxr(v57);
            while (__stlxr(v60 - 1, v57));
            if (!v60)
            {
              (*(void (**)(_QWORD *))(*v55 + 16))(v55);
              std::__shared_weak_count::__release_weak(v56);
            }
            do
              v61 = __ldaxr(v49);
            while (__stlxr(v61 - 1, v49));
            if (!v61)
            {
              ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
              std::__shared_weak_count::__release_weak(v48);
            }
            shared_owners = v75;
            if (SHIBYTE(v56[2].__vftable) < 0)
              shared_owners = (char *)v56[1].__shared_owners_;
            __sb = shared_owners;
            v63 = _os_log_pack_fill();
            *(_DWORD *)v63 = 136315138;
            *(_QWORD *)(v63 + 4) = __sb;
            v64 = operator new();
            v65 = *(unsigned __int8 *)(v81 + 39);
            v66 = v80;
            if ((v65 & 0x80u) != 0)
            {
              v66 = *(_QWORD *)(v81 + 16);
              v65 = *(_QWORD *)(v81 + 24);
            }
            *(_QWORD *)v64 = v47;
            *(_QWORD *)(v64 + 8) = v47;
            *(_QWORD *)(v64 + 16) = v48;
            *(_QWORD *)(v64 + 24) = v74;
            *(_QWORD *)(v64 + 32) = v56;
            *(_QWORD *)(v64 + 40) = v66;
            *(_QWORD *)(v64 + 48) = v65;
            *(_BYTE *)(v64 + 56) = 16;
            *(_QWORD *)object = v64;
            (*(void (**)(_QWORD, _BYTE *))(**(_QWORD **)(v16 + 24) + 40))(*(_QWORD *)(v16 + 24), object);
            v67 = *(_QWORD *)object;
            *(_QWORD *)object = 0;
            if (v67)
            {
              v68 = *(std::__shared_weak_count **)(v67 + 32);
              if (v68)
              {
                v69 = (unint64_t *)&v68->__shared_owners_;
                do
                  v70 = __ldaxr(v69);
                while (__stlxr(v70 - 1, v69));
                if (!v70)
                {
                  ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
                  std::__shared_weak_count::__release_weak(v68);
                }
              }
              v71 = *(std::__shared_weak_count **)(v67 + 16);
              if (v71)
              {
                v72 = (unint64_t *)&v71->__shared_owners_;
                do
                  v73 = __ldaxr(v72);
                while (__stlxr(v73 - 1, v72));
                if (!v73)
                {
                  ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
                  std::__shared_weak_count::__release_weak(v71);
                }
              }
              MEMORY[0x212BC6398](v67, 0x10F0C40B62ED6C6);
            }
            goto LABEL_61;
          }
        }
        memcpy(v52, __s, v51);
        goto LABEL_104;
      }
    }
    memmove(v24, v23, v22);
    goto LABEL_41;
  }
  v6 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v84 + 16))(v84);
  v7 = (char *)v6 + *(_QWORD *)(*v6 - 24);
  if ((v7[32] & 5) != 0)
  {
    *(_OWORD *)v100 = 0u;
    *(_OWORD *)v101 = 0u;
    *(_OWORD *)v98 = 0u;
    v99 = 0u;
    *(_OWORD *)__p = 0u;
    v97 = 0u;
    memset(object, 0, sizeof(object));
    v102 = -1;
  }
  else
  {
    (*(void (**)(_BYTE *__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**((_QWORD **)v7 + 5) + 32))(object, *((_QWORD *)v7 + 5), 0, 1, 16);
  }
  v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v84 + 16))(v84);
  sub_20EF9907C(v8, a2, **(const void ***)(a1 + 16), *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8));
  v9 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v84 + 16))(v84);
  v10 = (char *)v9 + *(_QWORD *)(*v9 - 24);
  if ((v10[32] & 5) != 0)
  {
    **(_QWORD **)(a1 + 8) = -1 - v102;
    v11 = v85;
    if (!v85)
      return;
  }
  else
  {
    (*(void (**)(timespec *__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**((_QWORD **)v10 + 5) + 32))(&v86, *((_QWORD *)v10 + 5), 0, 1, 16);
    **(_QWORD **)(a1 + 8) = v94 - v102;
    v11 = v85;
    if (!v85)
      return;
  }
  v12 = (unint64_t *)&v11->__shared_owners_;
  do
    v13 = __ldaxr(v12);
  while (__stlxr(v13 - 1, v12));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
}

void sub_20EF98CD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,std::__shared_weak_count *a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  unint64_t *p_shared_owners;
  unint64_t v36;

  __cxa_guard_abort(&qword_254A4A510);
  sub_20E863570((uint64_t)&a23);
  v32 = (std::__shared_weak_count *)a31;
  if (a31)
  {
    v33 = (unint64_t *)(a31 + 8);
    do
      v34 = __ldaxr(v33);
    while (__stlxr(v34 - 1, v33));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
    }
  }
  if (a22)
  {
    p_shared_owners = (unint64_t *)&a22->__shared_owners_;
    do
      v36 = __ldaxr(p_shared_owners);
    while (__stlxr(v36 - 1, p_shared_owners));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))a22->__on_zero_shared)(a22);
      std::__shared_weak_count::__release_weak(a22);
    }
  }
  _Unwind_Resume(a1);
}

uint64_t sub_20EF99004(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3vio10mapping_io15SerializeSampleINS0_13mapping_types2v216MLFrameSetSampleILj4EEEEEyRKT_RKNS"
                     "t3__117basic_string_viewIcNSA_11char_traitsIcEEEERKNSA_12basic_stringIcSD_NSA_9allocatorIcEEEERNS_3"
                     "kit2fs11IFilesystemEEUlRKS6_RKNSA_4__fs10filesystem4pathEE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4cv3d3vio10mapping_io15SerializeSampleINS0_13mapping_types2v216MLFrameSetSampleILj4EEE"
                                "EEyRKT_RKNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEERKNSA_12basic_stringIcSD_NSA"
                                "_9allocatorIcEEEERNS_3kit2fs11IFilesystemEEUlRKS6_RKNSA_4__fs10filesystem4pathEE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3vio10mapping_io15SerializeSampleINS0_13mapping_types2v216MLFrameSetSampleILj4EEEEEyRKT_RKNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEERKNSA_12basic_stringIcSD_NSA_9allocatorIcEEEERNS_3kit2fs11IFilesystemEEUlRKS6_RKNSA_4__fs10filesystem4pathEE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3vio10mapping_io15SerializeSampleINS0_13mapping_types2v216MLFrameSetSampleILj4EEEEEyRKT_RKNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEERKNSA_12basic_stringIcSD_NSA_9allocatorIcEEEERNS_3kit2fs11IFilesystemEEUlRKS6_RKNSA_4__fs10filesystem4pathEE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20EF99070()
{
  return &unk_24C9F24C8;
}

void sub_20EF9907C(uint64_t a1, uint64_t a2, const void *a3, size_t a4)
{
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  size_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  void *__p[2];
  unint64_t v21;
  _QWORD v22[2];
  void *v23;
  uint64_t v24;
  char v25;

  v22[1] = 1;
  v8 = operator new();
  *(_QWORD *)v8 = a1;
  *(_QWORD *)(v8 + 8) = a1;
  v9 = v8 + 8;
  *(_BYTE *)(v8 + 16) = 0;
  *(_BYTE *)(v8 + 40) = 0;
  *(_BYTE *)(v8 + 48) = 0;
  *(_BYTE *)(v8 + 72) = 0;
  *(_QWORD *)(v8 + 88) = 0;
  *(_QWORD *)(v8 + 96) = 0;
  *(_QWORD *)(v8 + 80) = 0;
  v22[0] = &off_24C9B4468;
  v23 = &unk_24C9B45B8;
  v24 = v8;
  if (a4)
  {
    if (a4 >= 0x7FFFFFFFFFFFFFF8)
      sub_20E860B7C();
    if (a4 >= 0x17)
    {
      v11 = (a4 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((a4 | 7) != 0x17)
        v11 = a4 | 7;
      v12 = v11 + 1;
      v10 = operator new(v11 + 1);
      __p[1] = (void *)a4;
      v21 = v12 | 0x8000000000000000;
      __p[0] = v10;
    }
    else
    {
      HIBYTE(v21) = a4;
      v10 = __p;
    }
    memmove(v10, a3, a4);
    *((_BYTE *)v10 + a4) = 0;
    sub_20E9F5254((uint64_t)&v25, v9, (uint64_t)__p);
    if (SHIBYTE(v21) < 0)
    {
      operator delete(__p[0]);
      v8 = v24;
      if (*(_BYTE *)(v24 + 40))
        goto LABEL_10;
    }
    else
    {
      v8 = v24;
      if (*(_BYTE *)(v24 + 40))
      {
LABEL_10:
        __p[0] = (void *)(v8 + 16);
        sub_20E9F3D4C((uint64_t **)__p, 4u);
        goto LABEL_13;
      }
    }
  }
  sub_20E9F3FC0((uint64_t)__p, v8 + 8);
LABEL_13:
  sub_20E9EE95C(v24);
  sub_20EF99314((uint64_t)v22, a2, 4u);
  v13 = v24;
  v14 = *(_QWORD *)(*(_QWORD *)(v24 + 88) - 8);
  v15 = (size_t *)(v24 + 48);
  sub_20E9EE4D0((uint64_t *)(v24 + 48), *(_QWORD *)(v24 + 16) - v14 - 9);
  if (*v15)
    memmove((void *)(*(_QWORD *)(v13 + 24) + v14), *(const void **)(v13 + 56), *v15);
  *(_QWORD *)(v13 + 48) = 0;
  v16 = *(_QWORD *)(v13 + 80);
  v17 = *(_QWORD *)(v13 + 88) - 8;
  *(_QWORD *)(v13 + 88) = v17;
  if (v16 == v17)
  {
    std::ostream::write();
    if (*(_BYTE *)(v13 + 40))
    {
      free(*(void **)(v13 + 24));
      *(_BYTE *)(v13 + 40) = 0;
    }
  }
  v22[0] = &off_24C9B7040;
  v18 = v24;
  v23 = &unk_24C9B7190;
  v24 = 0;
  if (v18)
  {
    v19 = *(void **)(v18 + 80);
    if (v19)
    {
      *(_QWORD *)(v18 + 88) = v19;
      operator delete(v19);
    }
    if (*(_BYTE *)(v18 + 72))
      free(*(void **)(v18 + 56));
    if (*(_BYTE *)(v18 + 40))
      free(*(void **)(v18 + 24));
    MEMORY[0x212BC6398](v18, 0x1030C408C1A3048);
  }
}

void sub_20EF992D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15)
{
  if (a14 < 0)
  {
    operator delete(__p);
    sub_20E9EE6A8(&a15);
    _Unwind_Resume(a1);
  }
  sub_20E9EE6A8(&a15);
  _Unwind_Resume(a1);
}

void sub_20EF99314(uint64_t a1, uint64_t a2, unsigned int a3)
{
  __int128 v6;
  char *v7;
  char *v8;
  void *v9;
  char *v10;
  void *v11;
  void *v12;
  void *__p;
  char *v14;
  _QWORD **v15;
  _QWORD *v16[2];
  __int128 v17;
  __int128 v18;
  __int128 v19;
  int v20;

  sub_20E994E3C(&__p, (uint64_t *)a2);
  v16[0] = 0;
  v16[1] = 0;
  v15 = v16;
  sub_20E94F000((uint64_t *)&v15, *(_QWORD **)(a2 + 24), (_QWORD *)(a2 + 32));
  v6 = *(_OWORD *)(a2 + 64);
  v17 = *(_OWORD *)(a2 + 48);
  v18 = v6;
  v19 = *(_OWORD *)(a2 + 80);
  v20 = *(_DWORD *)(a2 + 96);
  sub_20EADB180(a1, (uint64_t)&__p, a3);
  sub_20E86872C((uint64_t)&v15, v16[0]);
  v7 = (char *)__p;
  if (__p)
  {
    v8 = v14;
    v9 = __p;
    if (v14 != __p)
    {
      v10 = v14;
      do
      {
        v12 = (void *)*((_QWORD *)v10 - 6);
        v10 -= 48;
        v11 = v12;
        if (v12)
        {
          *((_QWORD *)v8 - 5) = v11;
          operator delete(v11);
        }
        v8 = v10;
      }
      while (v10 != v7);
      v9 = __p;
    }
    v14 = v7;
    operator delete(v9);
  }
}

void sub_20EF99400(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20EE5B500((char **)va);
  _Unwind_Resume(a1);
}

void sub_20EF99414(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char *__p, char *a11, uint64_t a12, uint64_t a13, _QWORD *a14)
{
  uint64_t v14;
  uint64_t v15;
  _QWORD *v17;
  char *v18;
  char *v19;
  void *v20;
  void *v21;

  v15 = v14;
  sub_20E86872C(v15, a14);
  if (__p)
  {
    v17 = a11;
    v18 = __p;
    if (a11 != __p)
    {
      v19 = a11;
      do
      {
        v21 = (void *)*((_QWORD *)v19 - 6);
        v19 -= 48;
        v20 = v21;
        if (v21)
        {
          *(v17 - 5) = v20;
          operator delete(v20);
        }
        v17 = v19;
      }
      while (v19 != __p);
      v18 = __p;
    }
    operator delete(v18);
  }
  _Unwind_Resume(a1);
}

void sub_20EF9947C(uint64_t a1, uint64_t *a2, os_log_t oslog, os_log_type_t type, const char **a5)
{
  size_t v9;
  std::__shared_weak_count_vtbl *v10;
  std::__shared_weak_count *v11;
  const char *v12;
  size_t v13;
  size_t v14;
  _QWORD *p_dst;
  const char *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  char v21;
  _QWORD *v22;
  uint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *p_shared_owners;
  unint64_t v26;
  uint64_t *v27;
  unint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t *v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  _QWORD *v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  __int128 v60;
  std::__shared_weak_count *v61;
  __int128 v62;
  _QWORD *__dst;
  __int128 v64;
  _BYTE v65[24];
  __int128 v66;
  uint64_t v67;
  _QWORD v68[3];

  v68[2] = *MEMORY[0x24BDAC8D0];
  if (a1 && *(_QWORD *)(a1 + 8))
  {
    v9 = _os_log_pack_size();
    v10 = (std::__shared_weak_count_vtbl *)operator new(v9, (std::align_val_t)8uLL);
    v11 = (std::__shared_weak_count *)operator new();
    v11->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
    v11->__shared_owners_ = 0;
    v11->__shared_weak_owners_ = 0;
    v11[1].__vftable = v10;
    *(_QWORD *)&v60 = v10;
    *((_QWORD *)&v60 + 1) = v10;
    v62 = 0uLL;
    v61 = v11;
    v12 = *a5;
    v13 = strlen(*a5);
    if (v13 >= 0x7FFFFFFFFFFFFFF8)
      sub_20E860B7C();
    v14 = v13;
    if (v13 >= 0x17)
    {
      v18 = (v13 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v13 | 7) != 0x17)
        v18 = v13 | 7;
      v19 = v18 + 1;
      p_dst = operator new(v18 + 1);
      *(_QWORD *)&v64 = v14;
      *((_QWORD *)&v64 + 1) = v19 | 0x8000000000000000;
      __dst = p_dst;
    }
    else
    {
      HIBYTE(v64) = v13;
      p_dst = &__dst;
      if (!v13)
      {
LABEL_13:
        *((_BYTE *)p_dst + v14) = 0;
        v20 = __dst;
        v68[0] = v64;
        *(_QWORD *)((char *)v68 + 7) = *(_QWORD *)((char *)&v64 + 7);
        v21 = HIBYTE(v64);
        v22 = operator new(0x38uLL);
        v22[1] = 0;
        v22[2] = 0;
        v22[3] = off_24C9ABC20;
        *v22 = &off_24C9ABBD0;
        v23 = v68[0];
        v22[4] = v20;
        v22[5] = v23;
        *(_QWORD *)((char *)v22 + 47) = *(_QWORD *)((char *)v68 + 7);
        *((_BYTE *)v22 + 55) = v21;
        v68[0] = 0;
        *(_QWORD *)((char *)v68 + 7) = 0;
        v24 = (std::__shared_weak_count *)*((_QWORD *)&v62 + 1);
        *(_QWORD *)&v62 = v22 + 3;
        *((_QWORD *)&v62 + 1) = v22;
        if (v24)
        {
          p_shared_owners = (unint64_t *)&v24->__shared_owners_;
          do
            v26 = __ldaxr(p_shared_owners);
          while (__stlxr(v26 - 1, p_shared_owners));
          if (!v26)
          {
            ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
            std::__shared_weak_count::__release_weak(v24);
          }
        }
        *(_OWORD *)v65 = v60;
        *(_QWORD *)&v65[16] = v61;
        if (v61)
        {
          v27 = &v61->__shared_owners_;
          do
            v28 = __ldxr((unint64_t *)v27);
          while (__stxr(v28 + 1, (unint64_t *)v27));
        }
        v66 = v62;
        if (*((_QWORD *)&v62 + 1))
        {
          v29 = (unint64_t *)(*((_QWORD *)&v62 + 1) + 8);
          do
            v30 = __ldxr(v29);
          while (__stxr(v30 + 1, v29));
          v67 = v62;
          do
            v31 = __ldaxr(v29);
          while (__stlxr(v31 - 1, v29));
          if (!v31)
          {
            (*(void (**)(_QWORD))(**((_QWORD **)&v62 + 1) + 16))(*((_QWORD *)&v62 + 1));
            std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v62 + 1));
          }
        }
        else
        {
          v67 = v62;
        }
        if (v61)
        {
          v32 = &v61->__shared_owners_;
          do
            v33 = __ldaxr((unint64_t *)v32);
          while (__stlxr(v33 - 1, (unint64_t *)v32));
          if (!v33)
          {
            ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
            std::__shared_weak_count::__release_weak(v61);
          }
        }
        v34 = *(_QWORD *)v65;
        if (*(char *)(v67 + 31) >= 0)
          v35 = v67 + 8;
        else
          v35 = *(_QWORD *)(v67 + 8);
        v36 = _os_log_pack_fill();
        *(_DWORD *)v36 = 136315138;
        *(_QWORD *)(v36 + 4) = v35;
        v37 = operator new();
        v38 = *((unsigned __int8 *)a2 + 23);
        if ((v38 & 0x80u) == 0)
          v39 = a2;
        else
          v39 = (uint64_t *)*a2;
        if ((v38 & 0x80u) != 0)
          v38 = a2[1];
        *(_QWORD *)v37 = v34;
        *(_OWORD *)(v37 + 8) = *(_OWORD *)&v65[8];
        *(_QWORD *)&v65[8] = 0;
        *(_QWORD *)&v65[16] = 0;
        *(_OWORD *)(v37 + 24) = v66;
        v66 = 0uLL;
        *(_QWORD *)(v37 + 40) = v39;
        *(_QWORD *)(v37 + 48) = v38;
        *(_BYTE *)(v37 + 56) = type;
        __dst = 0;
        *(_QWORD *)&v60 = v37;
        (*(void (**)(_QWORD, __int128 *))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8), &v60);
        v40 = v60;
        *(_QWORD *)&v60 = 0;
        if (v40)
        {
          v41 = *(std::__shared_weak_count **)(v40 + 32);
          if (v41)
          {
            v42 = (unint64_t *)&v41->__shared_owners_;
            do
              v43 = __ldaxr(v42);
            while (__stlxr(v43 - 1, v42));
            if (!v43)
            {
              ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
              std::__shared_weak_count::__release_weak(v41);
            }
          }
          v44 = *(std::__shared_weak_count **)(v40 + 16);
          if (v44)
          {
            v45 = (unint64_t *)&v44->__shared_owners_;
            do
              v46 = __ldaxr(v45);
            while (__stlxr(v46 - 1, v45));
            if (!v46)
            {
              ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
              std::__shared_weak_count::__release_weak(v44);
            }
          }
          MEMORY[0x212BC6398](v40, 0x10F0C40B62ED6C6);
          v47 = __dst;
          __dst = 0;
          if (v47)
          {
            v48 = (std::__shared_weak_count *)v47[4];
            if (v48)
            {
              v49 = (unint64_t *)&v48->__shared_owners_;
              do
                v50 = __ldaxr(v49);
              while (__stlxr(v50 - 1, v49));
              if (!v50)
              {
                ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
                std::__shared_weak_count::__release_weak(v48);
              }
            }
            v51 = (std::__shared_weak_count *)v47[2];
            if (v51)
            {
              v52 = (unint64_t *)&v51->__shared_owners_;
              do
                v53 = __ldaxr(v52);
              while (__stlxr(v53 - 1, v52));
              if (!v53)
              {
                ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
                std::__shared_weak_count::__release_weak(v51);
              }
            }
            MEMORY[0x212BC6398](v47, 0x10F0C40B62ED6C6);
          }
        }
        v54 = (std::__shared_weak_count *)*((_QWORD *)&v66 + 1);
        if (*((_QWORD *)&v66 + 1))
        {
          v55 = (unint64_t *)(*((_QWORD *)&v66 + 1) + 8);
          do
            v56 = __ldaxr(v55);
          while (__stlxr(v56 - 1, v55));
          if (!v56)
          {
            ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
            std::__shared_weak_count::__release_weak(v54);
          }
        }
        v57 = *(std::__shared_weak_count **)&v65[16];
        if (*(_QWORD *)&v65[16])
        {
          v58 = (unint64_t *)(*(_QWORD *)&v65[16] + 8);
          do
            v59 = __ldaxr(v58);
          while (__stlxr(v59 - 1, v58));
          if (!v59)
          {
            ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
            std::__shared_weak_count::__release_weak(v57);
          }
        }
        return;
      }
    }
    memcpy(p_dst, v12, v14);
    goto LABEL_13;
  }
  os_log_type_enabled(oslog, type);
  v16 = *a5;
  *(_DWORD *)v65 = 136315138;
  *(_QWORD *)&v65[4] = v16;
  v17 = (void *)_os_log_send_and_compose_impl();
  if (v17)
    free(v17);
}

void sub_20EF999F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  va_list va1;
  uint64_t v12;
  uint64_t v13;
  va_list va2;

  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v10 = va_arg(va2, _QWORD);
  v12 = va_arg(va2, _QWORD);
  v13 = va_arg(va2, _QWORD);
  sub_20E86E8C4((uint64_t *)va);
  sub_20E86E8C4((uint64_t *)va1);
  sub_20E86E658((uint64_t)va2);
  _Unwind_Resume(a1);
}

void sub_20EF99A14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  sub_20E86E658((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20EF99A28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  void *v11;
  int v12;

  if (v12 < 0)
  {
    operator delete(v11);
    sub_20E86E658((uint64_t)&a11);
    _Unwind_Resume(a1);
  }
  sub_20E86E658((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void sub_20EF99A80(uint64_t a1, uint64_t *a2, os_log_t oslog, os_log_type_t type, const char **a5)
{
  size_t v9;
  std::__shared_weak_count_vtbl *v10;
  std::__shared_weak_count *v11;
  const char *v12;
  size_t v13;
  size_t v14;
  _QWORD *p_dst;
  const char *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  char v21;
  _QWORD *v22;
  uint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *p_shared_owners;
  unint64_t v26;
  uint64_t *v27;
  unint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t *v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  _QWORD *v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  __int128 v60;
  std::__shared_weak_count *v61;
  __int128 v62;
  _QWORD *__dst;
  __int128 v64;
  _BYTE v65[24];
  __int128 v66;
  uint64_t v67;
  _QWORD v68[3];

  v68[2] = *MEMORY[0x24BDAC8D0];
  if (a1 && *(_QWORD *)(a1 + 8))
  {
    v9 = _os_log_pack_size();
    v10 = (std::__shared_weak_count_vtbl *)operator new(v9, (std::align_val_t)8uLL);
    v11 = (std::__shared_weak_count *)operator new();
    v11->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
    v11->__shared_owners_ = 0;
    v11->__shared_weak_owners_ = 0;
    v11[1].__vftable = v10;
    *(_QWORD *)&v60 = v10;
    *((_QWORD *)&v60 + 1) = v10;
    v62 = 0uLL;
    v61 = v11;
    v12 = *a5;
    v13 = strlen(*a5);
    if (v13 >= 0x7FFFFFFFFFFFFFF8)
      sub_20E860B7C();
    v14 = v13;
    if (v13 >= 0x17)
    {
      v18 = (v13 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v13 | 7) != 0x17)
        v18 = v13 | 7;
      v19 = v18 + 1;
      p_dst = operator new(v18 + 1);
      *(_QWORD *)&v64 = v14;
      *((_QWORD *)&v64 + 1) = v19 | 0x8000000000000000;
      __dst = p_dst;
    }
    else
    {
      HIBYTE(v64) = v13;
      p_dst = &__dst;
      if (!v13)
      {
LABEL_13:
        *((_BYTE *)p_dst + v14) = 0;
        v20 = __dst;
        v68[0] = v64;
        *(_QWORD *)((char *)v68 + 7) = *(_QWORD *)((char *)&v64 + 7);
        v21 = HIBYTE(v64);
        v22 = operator new(0x38uLL);
        v22[1] = 0;
        v22[2] = 0;
        v22[3] = off_24C9ABC20;
        *v22 = &off_24C9ABBD0;
        v23 = v68[0];
        v22[4] = v20;
        v22[5] = v23;
        *(_QWORD *)((char *)v22 + 47) = *(_QWORD *)((char *)v68 + 7);
        *((_BYTE *)v22 + 55) = v21;
        v68[0] = 0;
        *(_QWORD *)((char *)v68 + 7) = 0;
        v24 = (std::__shared_weak_count *)*((_QWORD *)&v62 + 1);
        *(_QWORD *)&v62 = v22 + 3;
        *((_QWORD *)&v62 + 1) = v22;
        if (v24)
        {
          p_shared_owners = (unint64_t *)&v24->__shared_owners_;
          do
            v26 = __ldaxr(p_shared_owners);
          while (__stlxr(v26 - 1, p_shared_owners));
          if (!v26)
          {
            ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
            std::__shared_weak_count::__release_weak(v24);
          }
        }
        *(_OWORD *)v65 = v60;
        *(_QWORD *)&v65[16] = v61;
        if (v61)
        {
          v27 = &v61->__shared_owners_;
          do
            v28 = __ldxr((unint64_t *)v27);
          while (__stxr(v28 + 1, (unint64_t *)v27));
        }
        v66 = v62;
        if (*((_QWORD *)&v62 + 1))
        {
          v29 = (unint64_t *)(*((_QWORD *)&v62 + 1) + 8);
          do
            v30 = __ldxr(v29);
          while (__stxr(v30 + 1, v29));
          v67 = v62;
          do
            v31 = __ldaxr(v29);
          while (__stlxr(v31 - 1, v29));
          if (!v31)
          {
            (*(void (**)(_QWORD))(**((_QWORD **)&v62 + 1) + 16))(*((_QWORD *)&v62 + 1));
            std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v62 + 1));
          }
        }
        else
        {
          v67 = v62;
        }
        if (v61)
        {
          v32 = &v61->__shared_owners_;
          do
            v33 = __ldaxr((unint64_t *)v32);
          while (__stlxr(v33 - 1, (unint64_t *)v32));
          if (!v33)
          {
            ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
            std::__shared_weak_count::__release_weak(v61);
          }
        }
        v34 = *(_QWORD *)v65;
        if (*(char *)(v67 + 31) >= 0)
          v35 = v67 + 8;
        else
          v35 = *(_QWORD *)(v67 + 8);
        v36 = _os_log_pack_fill();
        *(_DWORD *)v36 = 136315138;
        *(_QWORD *)(v36 + 4) = v35;
        v37 = operator new();
        v38 = *((unsigned __int8 *)a2 + 23);
        if ((v38 & 0x80u) == 0)
          v39 = a2;
        else
          v39 = (uint64_t *)*a2;
        if ((v38 & 0x80u) != 0)
          v38 = a2[1];
        *(_QWORD *)v37 = v34;
        *(_OWORD *)(v37 + 8) = *(_OWORD *)&v65[8];
        *(_QWORD *)&v65[8] = 0;
        *(_QWORD *)&v65[16] = 0;
        *(_OWORD *)(v37 + 24) = v66;
        v66 = 0uLL;
        *(_QWORD *)(v37 + 40) = v39;
        *(_QWORD *)(v37 + 48) = v38;
        *(_BYTE *)(v37 + 56) = type;
        __dst = 0;
        *(_QWORD *)&v60 = v37;
        (*(void (**)(_QWORD, __int128 *))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8), &v60);
        v40 = v60;
        *(_QWORD *)&v60 = 0;
        if (v40)
        {
          v41 = *(std::__shared_weak_count **)(v40 + 32);
          if (v41)
          {
            v42 = (unint64_t *)&v41->__shared_owners_;
            do
              v43 = __ldaxr(v42);
            while (__stlxr(v43 - 1, v42));
            if (!v43)
            {
              ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
              std::__shared_weak_count::__release_weak(v41);
            }
          }
          v44 = *(std::__shared_weak_count **)(v40 + 16);
          if (v44)
          {
            v45 = (unint64_t *)&v44->__shared_owners_;
            do
              v46 = __ldaxr(v45);
            while (__stlxr(v46 - 1, v45));
            if (!v46)
            {
              ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
              std::__shared_weak_count::__release_weak(v44);
            }
          }
          MEMORY[0x212BC6398](v40, 0x10F0C40B62ED6C6);
          v47 = __dst;
          __dst = 0;
          if (v47)
          {
            v48 = (std::__shared_weak_count *)v47[4];
            if (v48)
            {
              v49 = (unint64_t *)&v48->__shared_owners_;
              do
                v50 = __ldaxr(v49);
              while (__stlxr(v50 - 1, v49));
              if (!v50)
              {
                ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
                std::__shared_weak_count::__release_weak(v48);
              }
            }
            v51 = (std::__shared_weak_count *)v47[2];
            if (v51)
            {
              v52 = (unint64_t *)&v51->__shared_owners_;
              do
                v53 = __ldaxr(v52);
              while (__stlxr(v53 - 1, v52));
              if (!v53)
              {
                ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
                std::__shared_weak_count::__release_weak(v51);
              }
            }
            MEMORY[0x212BC6398](v47, 0x10F0C40B62ED6C6);
          }
        }
        v54 = (std::__shared_weak_count *)*((_QWORD *)&v66 + 1);
        if (*((_QWORD *)&v66 + 1))
        {
          v55 = (unint64_t *)(*((_QWORD *)&v66 + 1) + 8);
          do
            v56 = __ldaxr(v55);
          while (__stlxr(v56 - 1, v55));
          if (!v56)
          {
            ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
            std::__shared_weak_count::__release_weak(v54);
          }
        }
        v57 = *(std::__shared_weak_count **)&v65[16];
        if (*(_QWORD *)&v65[16])
        {
          v58 = (unint64_t *)(*(_QWORD *)&v65[16] + 8);
          do
            v59 = __ldaxr(v58);
          while (__stlxr(v59 - 1, v58));
          if (!v59)
          {
            ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
            std::__shared_weak_count::__release_weak(v57);
          }
        }
        return;
      }
    }
    memcpy(p_dst, v12, v14);
    goto LABEL_13;
  }
  os_log_type_enabled(oslog, type);
  v16 = *a5;
  *(_DWORD *)v65 = 136315138;
  *(_QWORD *)&v65[4] = v16;
  v17 = (void *)_os_log_send_and_compose_impl();
  if (v17)
    free(v17);
}

void sub_20EF99FF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  va_list va1;
  uint64_t v12;
  uint64_t v13;
  va_list va2;

  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v10 = va_arg(va2, _QWORD);
  v12 = va_arg(va2, _QWORD);
  v13 = va_arg(va2, _QWORD);
  sub_20E86E8C4((uint64_t *)va);
  sub_20E86E8C4((uint64_t *)va1);
  sub_20E86E658((uint64_t)va2);
  _Unwind_Resume(a1);
}

void sub_20EF9A018(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  sub_20E86E658((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20EF9A02C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  void *v11;
  int v12;

  if (v12 < 0)
  {
    operator delete(v11);
    sub_20E86E658((uint64_t)&a11);
    _Unwind_Resume(a1);
  }
  sub_20E86E658((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void sub_20EF9A088()
{
  JUMPOUT(0x212BC6398);
}

__n128 sub_20EF9A09C(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_24C9F24E8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 sub_20EF9A0DC(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24C9F24E8;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_20EF9A104(uint64_t a1, __int128 **a2, uint64_t a3)
{
  _QWORD *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  size_t v10;
  const void *v11;
  uint64_t v12;
  uint64_t v13;
  timespec *p_dst;
  uint64_t v15;
  uint64_t v16;
  __darwin_time_t v17;
  unint64_t v18;
  char *v19;
  char *j;
  int v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  size_t v25;
  size_t v26;
  BOOL v27;
  char *v28;
  char *v29;
  uint64_t v30;
  void *v31;
  void *v32;
  void *v33;
  _QWORD *v34;
  char *v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  std::bad_alloc *v39;
  std::bad_alloc *v40;
  int v41;
  unint64_t v42;
  unint64_t v43;
  char *v45;
  size_t v46;
  const char *v47;
  unsigned __int8 v48;
  size_t v49;
  const char *v50;
  _BYTE *v51;
  uint64_t v52;
  uint64_t v53;
  void **v54;
  NSObject *v55;
  uint64_t v56;
  uint64_t v57;
  void *v58;
  const char *v59;
  std::__shared_weak_count *v60;
  unint64_t *p_shared_owners;
  unint64_t v62;
  uint64_t *v63;
  unsigned __int8 v64;
  std::runtime_error *exception;
  char *v67;
  size_t v68;
  __darwin_time_t tv_sec;
  uint64_t v70;
  uint64_t i;
  uint64_t v72;
  size_t v73;
  std::__shared_weak_count_vtbl *v74;
  std::__shared_weak_count *v75;
  unint64_t *v76;
  size_t v77;
  size_t v78;
  _BYTE *v79;
  uint64_t v80;
  uint64_t v81;
  _QWORD *v82;
  std::__shared_weak_count *v83;
  unint64_t *v84;
  unint64_t v85;
  unint64_t v86;
  unint64_t v87;
  unint64_t v88;
  char *shared_owners;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  std::__shared_weak_count *v95;
  unint64_t *v96;
  unint64_t v97;
  std::__shared_weak_count *v98;
  unint64_t *v99;
  unint64_t v100;
  char *v101;
  char *v102;
  uint64_t v103;
  char *__s;
  char __sa;
  char *__sb;
  void **v107;
  uint64_t v108;
  uint64_t tv_nsec;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  std::__shared_weak_count *v114;
  timespec __dst;
  unint64_t rep;
  int v117;
  const char *v118;
  int v119;
  const char *v120;
  uint64_t v121;
  std::__shared_weak_count *v122;
  uint64_t v123;
  _BYTE object[32];
  void *__p[2];
  __int128 v126;
  void *v127[2];
  __int128 v128;
  void *v129[2];
  void *v130[2];
  uint64_t v131;
  char v132;
  _BYTE v133[15];
  uint64_t v134;

  v134 = *MEMORY[0x24BDAC8D0];
  sub_210224144((const std::__fs::filesystem::path *)a3, 0x30u, *(_QWORD *)(a1 + 24), &v112);
  if (!v113)
  {
    sub_20EF764A8(&v111);
    if (**(int **)(v111 + 56) > 5)
      goto LABEL_145;
    v41 = *(unsigned __int8 *)(v111 + 72);
    v42 = sub_20E8C31DC(v111, "OSLogSurrogateAppender", 1, 0);
    v43 = v42;
    if (!v41 && v42 == 0)
      goto LABEL_145;
    __dst.tv_sec = (__darwin_time_t)&v111;
    __dst.tv_nsec = std::chrono::steady_clock::now().__d_.__rep_;
    rep = std::chrono::system_clock::now().__d_.__rep_;
    v117 = 5;
    v118 = "unknown file";
    v119 = 83;
    v121 = 0;
    v122 = 0;
    v120 = "unknown function";
    if (*(char *)(a3 + 23) >= 0)
      v45 = (char *)a3;
    else
      v45 = *(char **)a3;
    __s = v45;
    v108 = *(_QWORD *)__dst.tv_sec + 16;
    v110 = *(_QWORD *)__dst.tv_sec;
    if (*(char *)(*(_QWORD *)__dst.tv_sec + 39) < 0)
    {
      v47 = *(const char **)(v110 + 16);
      v46 = *(_QWORD *)(v110 + 24);
    }
    else
    {
      v46 = *(unsigned __int8 *)(*(_QWORD *)__dst.tv_sec + 39);
      v47 = (const char *)(*(_QWORD *)__dst.tv_sec + 16);
    }
    v48 = atomic_load((unsigned __int8 *)&qword_254A4A510);
    if ((v48 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
    {
      sub_20E9E46F8((uint64_t)object);
      if (object[24])
      {
        *(_OWORD *)byte_254A4A4F8 = *(_OWORD *)object;
        *(_QWORD *)&byte_254A4A4F8[16] = *(_QWORD *)&object[16];
      }
      else
      {
        byte_254A4A4F8[23] = 14;
        strcpy(byte_254A4A4F8, "com.apple.cv3d");
      }
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
      __cxa_guard_release(&qword_254A4A510);
    }
    if (byte_254A4A4F8[23] >= 0)
      v49 = byte_254A4A4F8[23];
    else
      v49 = *(_QWORD *)&byte_254A4A4F8[8];
    if (byte_254A4A4F8[23] >= 0)
      v50 = byte_254A4A4F8;
    else
      v50 = *(const char **)byte_254A4A4F8;
    *(_QWORD *)object = os_log_create(v50, v47);
    v51 = &object[8];
    if (v49 > 0x7FFFFFFFFFFFFFF7)
      sub_20E860B7C();
    if (v49 >= 0x17)
    {
      v52 = (v49 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v49 | 7) != 0x17)
        v52 = v49 | 7;
      v53 = v52 + 1;
      v51 = operator new(v52 + 1);
      *(_QWORD *)&object[16] = v49;
      *(_QWORD *)&object[24] = v53 | 0x8000000000000000;
      *(_QWORD *)&object[8] = v51;
    }
    else
    {
      object[31] = v49;
      if (!v49)
      {
LABEL_115:
        v51[v49] = 0;
        LOBYTE(__p[0]) = 1;
        v54 = &__p[1];
        if (v46 > 0x7FFFFFFFFFFFFFF7)
          sub_20E860B7C();
        if (v46 >= 0x17)
        {
          v56 = (v46 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v46 | 7) != 0x17)
            v56 = v46 | 7;
          v57 = v56 + 1;
          v54 = (void **)operator new(v56 + 1);
          *(_QWORD *)&v126 = v46;
          *((_QWORD *)&v126 + 1) = v57 | 0x8000000000000000;
          __p[1] = v54;
        }
        else
        {
          HIBYTE(v126) = v46;
          if (!v46)
          {
            LOBYTE(__p[1]) = 0;
            LOBYTE(v127[0]) = 1;
            v55 = *(NSObject **)object;
            if (SHIBYTE(v126) < 0)
              goto LABEL_120;
            goto LABEL_126;
          }
        }
        memmove(v54, v47, v46);
        *((_BYTE *)v54 + v46) = 0;
        LOBYTE(v127[0]) = 1;
        v55 = *(NSObject **)object;
        if (SHIBYTE(v126) < 0)
        {
LABEL_120:
          operator delete(__p[1]);
          if (!LOBYTE(__p[0]))
            goto LABEL_129;
          goto LABEL_127;
        }
LABEL_126:
        if (!LOBYTE(__p[0]))
          goto LABEL_129;
LABEL_127:
        if ((object[31] & 0x80000000) != 0)
          operator delete(*(void **)&object[8]);
LABEL_129:
        if (*(_QWORD *)object)
          os_release(*(void **)object);
        if (!v43 || !*(_QWORD *)(v43 + 24))
        {
          os_log_type_enabled(v55, OS_LOG_TYPE_ERROR);
          *(_DWORD *)object = 136315138;
          *(_QWORD *)&object[4] = __s;
          v58 = (void *)_os_log_send_and_compose_impl();
          if (v58)
            free(v58);
LABEL_135:
          if (v41)
          {
            if (*(char *)(a3 + 23) >= 0)
              v59 = (const char *)a3;
            else
              v59 = *(const char **)a3;
            sub_20E8C003C((uint64_t)&__dst, "[%s] failed to open stream.", v59);
            sub_20E863570((uint64_t)&__dst);
          }
          sub_20E863570((uint64_t)&__dst);
          v60 = v122;
          if (v122)
          {
            p_shared_owners = (unint64_t *)&v122->__shared_owners_;
            do
              v62 = __ldaxr(p_shared_owners);
            while (__stlxr(v62 - 1, p_shared_owners));
            if (!v62)
            {
              ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
              std::__shared_weak_count::__release_weak(v60);
            }
          }
LABEL_145:
          v63 = sub_210219C18();
          v64 = atomic_load((unsigned __int8 *)&qword_254A6DDD0);
          if ((v64 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DDD0))
          {
            __cxa_atexit((void (*)(void *))sub_21021A250, &stru_254A5A410, &dword_20E81F000);
            __cxa_guard_release(&qword_254A6DDD0);
          }
          if (!atomic_load(&qword_254A5A450))
          {
LABEL_147:
            if (os_signpost_enabled((os_log_t)*v63))
            {
              *(_DWORD *)object = 136315138;
              *(_QWORD *)&object[4] = "STRM";
              _os_signpost_emit_unreliably_with_name_impl();
            }
            exception = (std::runtime_error *)__cxa_allocate_exception(0x18uLL);
            sub_20EF5D440(a3, (uint64_t)" failed to open stream.");
            std::runtime_error::runtime_error(exception, (const std::string *)object);
            exception->__vftable = (std::runtime_error_vtbl *)&off_24C9F2020;
            LODWORD(exception[1].__vftable) = 0;
            __cxa_throw(exception, (struct type_info *)&unk_24C9F2038, (void (*)(void *))std::runtime_error::~runtime_error);
          }
          *(_DWORD *)object = 136315138;
          *(_QWORD *)&object[4] = "STRM";
          v67 = (char *)_os_log_send_and_compose_impl();
          v68 = strlen(v67);
          __dst.tv_sec = 0;
          pthread_threadid_np(0, (__uint64_t *)&__dst);
          tv_sec = __dst.tv_sec;
          timespec_get(&__dst, 1);
          sub_210219E20(object, 0xEEEEB0B5B2B2EEEELL, "Trace", 5uLL, (__int128 *)(v63 + 1), (__int128 *)(v63 + 5), "MappingIOSampleWriteErr:TYPE:%s", 0x1FuLL, v67, v68, tv_sec, &__dst);
          std::mutex::lock(&stru_254A5A410);
          v70 = qword_254A5A458;
          for (i = unk_254A5A460; v70 != i; v70 += 40)
          {
            v72 = *(_QWORD *)(v70 + 32);
            if (!v72)
              sub_20E86D37C();
            (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v72 + 48))(v72, object);
          }
          std::mutex::unlock(&stru_254A5A410);
          if (v132 < 0)
          {
            operator delete(v130[1]);
            if ((SHIBYTE(v130[0]) & 0x80000000) == 0)
              goto LABEL_155;
          }
          else if ((SHIBYTE(v130[0]) & 0x80000000) == 0)
          {
LABEL_155:
            if (!BYTE8(v128))
            {
LABEL_161:
              if (BYTE8(v126) && SBYTE7(v126) < 0)
                operator delete(__p[0]);
              if ((object[31] & 0x80000000) != 0)
                operator delete(*(void **)&object[8]);
              if (v67)
                free(v67);
              goto LABEL_147;
            }
LABEL_159:
            if (SBYTE7(v128) < 0)
              operator delete(v127[0]);
            goto LABEL_161;
          }
          operator delete(v129[0]);
          if (!BYTE8(v128))
            goto LABEL_161;
          goto LABEL_159;
        }
        v73 = _os_log_pack_size();
        v74 = (std::__shared_weak_count_vtbl *)operator new(v73, (std::align_val_t)8uLL);
        v75 = (std::__shared_weak_count *)operator new();
        v75->__shared_owners_ = 0;
        v76 = (unint64_t *)&v75->__shared_owners_;
        v75->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
        v75->__shared_weak_owners_ = 0;
        v75[1].__vftable = v74;
        v77 = strlen(__s);
        if (v77 > 0x7FFFFFFFFFFFFFF7)
          sub_20E860B7C();
        v78 = v77;
        if (v77 >= 0x17)
        {
          v80 = (v77 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v77 | 7) != 0x17)
            v80 = v77 | 7;
          v81 = v80 + 1;
          v79 = operator new(v80 + 1);
          *(_QWORD *)&object[8] = v78;
          *(_QWORD *)&object[16] = v81 | 0x8000000000000000;
          *(_QWORD *)object = v79;
        }
        else
        {
          object[23] = v77;
          v79 = object;
          if (!v77)
          {
LABEL_178:
            v79[v78] = 0;
            v103 = *(_QWORD *)object;
            *(_QWORD *)v133 = *(_QWORD *)&object[8];
            *(_QWORD *)&v133[7] = *(_QWORD *)&object[15];
            __sa = object[23];
            v82 = operator new(0x38uLL);
            v83 = (std::__shared_weak_count *)v82;
            v82[1] = 0;
            v84 = v82 + 1;
            v82[3] = off_24C9ABC20;
            v101 = (char *)(v82 + 3);
            v82[2] = 0;
            v82[4] = v103;
            v102 = (char *)(v82 + 4);
            *v82 = &off_24C9ABBD0;
            v82[5] = *(_QWORD *)v133;
            *(_QWORD *)((char *)v82 + 47) = *(_QWORD *)&v133[7];
            *((_BYTE *)v82 + 55) = __sa;
            do
              v85 = __ldxr(v76);
            while (__stxr(v85 + 1, v76));
            do
              v86 = __ldxr(v84);
            while (__stxr(v86 + 1, v84));
            do
              v87 = __ldaxr(v84);
            while (__stlxr(v87 - 1, v84));
            if (!v87)
            {
              (*(void (**)(_QWORD *))(*v82 + 16))(v82);
              std::__shared_weak_count::__release_weak(v83);
            }
            do
              v88 = __ldaxr(v76);
            while (__stlxr(v88 - 1, v76));
            if (!v88)
            {
              ((void (*)(std::__shared_weak_count *))v75->__on_zero_shared)(v75);
              std::__shared_weak_count::__release_weak(v75);
            }
            shared_owners = v102;
            if (SHIBYTE(v83[2].__vftable) < 0)
              shared_owners = (char *)v83[1].__shared_owners_;
            __sb = shared_owners;
            v90 = _os_log_pack_fill();
            *(_DWORD *)v90 = 136315138;
            *(_QWORD *)(v90 + 4) = __sb;
            v91 = operator new();
            v92 = *(unsigned __int8 *)(v110 + 39);
            v93 = v108;
            if ((v92 & 0x80u) != 0)
            {
              v93 = *(_QWORD *)(v110 + 16);
              v92 = *(_QWORD *)(v110 + 24);
            }
            *(_QWORD *)v91 = v74;
            *(_QWORD *)(v91 + 8) = v74;
            *(_QWORD *)(v91 + 16) = v75;
            *(_QWORD *)(v91 + 24) = v101;
            *(_QWORD *)(v91 + 32) = v83;
            *(_QWORD *)(v91 + 40) = v93;
            *(_QWORD *)(v91 + 48) = v92;
            *(_BYTE *)(v91 + 56) = 16;
            *(_QWORD *)object = v91;
            (*(void (**)(_QWORD, _BYTE *))(**(_QWORD **)(v43 + 24) + 40))(*(_QWORD *)(v43 + 24), object);
            v94 = *(_QWORD *)object;
            *(_QWORD *)object = 0;
            if (v94)
            {
              v95 = *(std::__shared_weak_count **)(v94 + 32);
              if (v95)
              {
                v96 = (unint64_t *)&v95->__shared_owners_;
                do
                  v97 = __ldaxr(v96);
                while (__stlxr(v97 - 1, v96));
                if (!v97)
                {
                  ((void (*)(std::__shared_weak_count *))v95->__on_zero_shared)(v95);
                  std::__shared_weak_count::__release_weak(v95);
                }
              }
              v98 = *(std::__shared_weak_count **)(v94 + 16);
              if (v98)
              {
                v99 = (unint64_t *)&v98->__shared_owners_;
                do
                  v100 = __ldaxr(v99);
                while (__stlxr(v100 - 1, v99));
                if (!v100)
                {
                  ((void (*)(std::__shared_weak_count *))v98->__on_zero_shared)(v98);
                  std::__shared_weak_count::__release_weak(v98);
                }
              }
              MEMORY[0x212BC6398](v94, 0x10F0C40B62ED6C6);
            }
            goto LABEL_135;
          }
        }
        memcpy(v79, __s, v78);
        goto LABEL_178;
      }
    }
    memmove(v51, v50, v49);
    goto LABEL_115;
  }
  v6 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v113 + 16))(v113);
  v7 = (char *)v6 + *(_QWORD *)(*v6 - 24);
  if ((v7[32] & 5) != 0)
  {
    *(_OWORD *)v129 = 0u;
    *(_OWORD *)v130 = 0u;
    *(_OWORD *)v127 = 0u;
    v128 = 0u;
    *(_OWORD *)__p = 0u;
    v126 = 0u;
    memset(object, 0, sizeof(object));
    v131 = -1;
  }
  else
  {
    (*(void (**)(_BYTE *__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**((_QWORD **)v7 + 5) + 32))(object, *((_QWORD *)v7 + 5), 0, 1, 16);
  }
  v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v113 + 16))(v113);
  v9 = *(_QWORD *)(a1 + 16);
  v11 = *(const void **)v9;
  v10 = *(_QWORD *)(v9 + 8);
  v12 = operator new();
  *(_QWORD *)(v12 + 8) = v8;
  v13 = v12 + 8;
  *(_QWORD *)v12 = v8;
  *(_BYTE *)(v12 + 16) = 0;
  *(_BYTE *)(v12 + 40) = 0;
  *(_BYTE *)(v12 + 48) = 0;
  *(_BYTE *)(v12 + 72) = 0;
  *(_QWORD *)(v12 + 80) = 0;
  v107 = (void **)(v12 + 80);
  *(_QWORD *)(v12 + 88) = 0;
  *(_QWORD *)(v12 + 96) = 0;
  if (v10)
  {
    if (v10 > 0x7FFFFFFFFFFFFFF7)
      sub_20E860B7C();
    if (v10 >= 0x17)
    {
      v15 = (v10 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v10 | 7) != 0x17)
        v15 = v10 | 7;
      v16 = v15 + 1;
      p_dst = (timespec *)operator new(v15 + 1);
      __dst.tv_nsec = v10;
      rep = v16 | 0x8000000000000000;
      __dst.tv_sec = (__darwin_time_t)p_dst;
    }
    else
    {
      HIBYTE(rep) = v10;
      p_dst = &__dst;
    }
    memmove(p_dst, v11, v10);
    *((_BYTE *)&p_dst->tv_sec + v10) = 0;
    sub_20E9F5254((uint64_t)v133, v13, (uint64_t)&__dst);
    if (SHIBYTE(rep) < 0)
    {
      operator delete((void *)__dst.tv_sec);
      if (*(_BYTE *)(v12 + 40))
        goto LABEL_14;
    }
    else if (*(_BYTE *)(v12 + 40))
    {
LABEL_14:
      __dst.tv_sec = v12 + 16;
      sub_20E9F3D4C((uint64_t **)&__dst, 1u);
      goto LABEL_17;
    }
  }
  LOBYTE(__dst.tv_sec) = 1;
  std::ostream::write();
LABEL_17:
  sub_20E995194(&__dst, a2);
  if (*(_BYTE *)(v12 + 40))
  {
    *(_QWORD *)v133 = v12 + 16;
    sub_20E9F472C((uint64_t **)v133, 0xAAAAAAAAAAAAAAABLL * ((__dst.tv_nsec - __dst.tv_sec) >> 4));
  }
  else
  {
    sub_20E9F4A34();
  }
  v17 = __dst.tv_sec;
  tv_nsec = __dst.tv_nsec;
  if (__dst.tv_nsec != __dst.tv_sec)
  {
    do
    {
      if (*(_BYTE *)(v12 + 40))
      {
        *(_QWORD *)v133 = v12 + 16;
        sub_20E9F3D4C((uint64_t **)v133, 1u);
      }
      else
      {
        v133[0] = 1;
        std::ostream::write();
      }
      if (*(_BYTE *)(v12 + 40))
      {
        *(_QWORD *)v133 = v12 + 16;
        sub_20E9F472C((uint64_t **)v133, *(_QWORD *)v17);
      }
      else
      {
        sub_20E9F4A34();
      }
      if (*(_BYTE *)(v12 + 40))
      {
        *(_QWORD *)v133 = v12 + 16;
        sub_20E9F3D4C((uint64_t **)v133, *(_DWORD *)(v17 + 8));
      }
      else
      {
        sub_20E9F3FC0((uint64_t)v133, v13);
      }
      if (*(_BYTE *)(v12 + 40))
      {
        *(_QWORD *)v133 = v12 + 16;
        sub_20E9F3D4C((uint64_t **)v133, *(_DWORD *)(v17 + 16));
      }
      else
      {
        sub_20E9F3FC0((uint64_t)v133, v13);
      }
      v18 = (uint64_t)(*(_QWORD *)(v17 + 32) - *(_QWORD *)(v17 + 24)) >> 3;
      if (*(_BYTE *)(v12 + 40))
      {
        *(_QWORD *)v133 = v12 + 16;
        sub_20E9F472C((uint64_t **)v133, v18);
      }
      else
      {
        sub_20E9F4A34();
      }
      v19 = *(char **)(v17 + 24);
      for (j = *(char **)(v17 + 32); v19 != j; v19 += 8)
      {
        while (1)
        {
          if (*(_BYTE *)(v12 + 40))
          {
            *(_QWORD *)v133 = v12 + 16;
            sub_20E9F3164((uint64_t **)v133, *v19);
          }
          else
          {
            v21 = *v19;
            if (v21 < 0)
            {
              v133[0] = -52;
              v133[1] = v21;
            }
            else
            {
              v133[0] = *v19;
            }
            std::ostream::write();
          }
          v22 = *((_DWORD *)v19 + 1);
          if (*(_BYTE *)(v12 + 40))
            break;
          v133[0] = -54;
          *(_DWORD *)&v133[1] = bswap32(v22);
          std::ostream::write();
          v19 += 8;
          if (v19 == j)
            goto LABEL_22;
        }
        v23 = *(_QWORD *)(v12 + 32);
        v24 = *(_QWORD *)(v12 + 16);
        if ((unint64_t)(v23 - v24) >= 5)
        {
          v28 = *(char **)(v12 + 24);
        }
        else
        {
          if (v23)
            v25 = 2 * v23;
          else
            v25 = 0x2000;
          v26 = v24 + 5;
          while (v25 < v26)
          {
            v27 = (uint64_t)v25 <= 0;
            v25 *= 2;
            if (v27)
            {
              v25 = v26;
              break;
            }
          }
          v28 = (char *)malloc_type_realloc(*(void **)(v12 + 24), v25, 0xAD6A59EEuLL);
          if (!v28)
          {
            v39 = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
            v40 = std::bad_alloc::bad_alloc(v39);
            __cxa_throw(v40, MEMORY[0x24BEDB758], MEMORY[0x24BEDB670]);
          }
          *(_QWORD *)(v12 + 24) = v28;
          *(_QWORD *)(v12 + 32) = v25;
          v24 = *(_QWORD *)(v12 + 16);
        }
        v29 = &v28[v24];
        *v29 = -54;
        *(_DWORD *)(v29 + 1) = bswap32(v22);
        *(_QWORD *)(v12 + 16) += 5;
      }
LABEL_22:
      v17 += 48;
    }
    while (v17 != tv_nsec);
    v17 = __dst.tv_sec;
  }
  if (v17)
  {
    v30 = __dst.tv_nsec;
    v31 = (void *)v17;
    if (__dst.tv_nsec != v17)
    {
      do
      {
        v32 = *(void **)(v30 - 24);
        if (v32)
        {
          *(_QWORD *)(v30 - 16) = v32;
          operator delete(v32);
        }
        v30 -= 48;
      }
      while (v30 != v17);
      v31 = (void *)__dst.tv_sec;
    }
    __dst.tv_nsec = v17;
    operator delete(v31);
  }
  v33 = *v107;
  if (*v107)
  {
    *(_QWORD *)(v12 + 88) = v33;
    operator delete(v33);
  }
  if (*(_BYTE *)(v12 + 72))
    free(*(void **)(v12 + 56));
  if (*(_BYTE *)(v12 + 40))
    free(*(void **)(v12 + 24));
  MEMORY[0x212BC6398](v12, 0x1030C408C1A3048);
  v34 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v113 + 16))(v113);
  v35 = (char *)v34 + *(_QWORD *)(*v34 - 24);
  if ((v35[32] & 5) != 0)
  {
    **(_QWORD **)(a1 + 8) = -1 - v131;
    v36 = v114;
    if (!v114)
      return;
  }
  else
  {
    (*(void (**)(timespec *__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**((_QWORD **)v35 + 5) + 32))(&__dst, *((_QWORD *)v35 + 5), 0, 1, 16);
    **(_QWORD **)(a1 + 8) = v123 - v131;
    v36 = v114;
    if (!v114)
      return;
  }
  v37 = (unint64_t *)&v36->__shared_owners_;
  do
    v38 = __ldaxr(v37);
  while (__stlxr(v38 - 1, v37));
  if (!v38)
  {
    ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
    std::__shared_weak_count::__release_weak(v36);
  }
}

void sub_20EF9B114(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,std::__shared_weak_count *a22,void *a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  unint64_t *p_shared_owners;
  unint64_t v36;

  __cxa_guard_abort(&qword_254A4A510);
  sub_20E863570((uint64_t)&a23);
  v32 = (std::__shared_weak_count *)a31;
  if (a31)
  {
    v33 = (unint64_t *)(a31 + 8);
    do
      v34 = __ldaxr(v33);
    while (__stlxr(v34 - 1, v33));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
    }
  }
  if (a22)
  {
    p_shared_owners = (unint64_t *)&a22->__shared_owners_;
    do
      v36 = __ldaxr(p_shared_owners);
    while (__stlxr(v36 - 1, p_shared_owners));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))a22->__on_zero_shared)(a22);
      std::__shared_weak_count::__release_weak(a22);
    }
  }
  _Unwind_Resume(a1);
}

uint64_t sub_20EF9B53C(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3vio10mapping_io15SerializeSampleINS0_22SemanticFrameSetSampleEEEyRKT_RKNSt3__117basic_strin"
                     "g_viewIcNS7_11char_traitsIcEEEERKNS7_12basic_stringIcSA_NS7_9allocatorIcEEEERNS_3kit2fs11IFilesyste"
                     "mEEUlRKS3_RKNS7_4__fs10filesystem4pathEE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4cv3d3vio10mapping_io15SerializeSampleINS0_22SemanticFrameSetSampleEEEyRKT_RKNSt3__117"
                                "basic_string_viewIcNS7_11char_traitsIcEEEERKNS7_12basic_stringIcSA_NS7_9allocatorIcEEEER"
                                "NS_3kit2fs11IFilesystemEEUlRKS3_RKNS7_4__fs10filesystem4pathEE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3vio10mapping_io15SerializeSampleINS0_22SemanticFrameSetSampleEEEyRKT_RKNSt3__117basic_string_viewIcNS7_11char_traitsIcEEEERKNS7_12basic_stringIcSA_NS7_9allocatorIcEEEERNS_3kit2fs11IFilesystemEEUlRKS3_RKNS7_4__fs10filesystem4pathEE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3vio10mapping_io15SerializeSampleINS0_22SemanticFrameSetSampleEEEyRKT_RKNSt3__117basic_string_viewIcNS7_11char_traitsIcEEEERKNS7_12basic_stringIcSA_NS7_9allocatorIcEEEERNS_3kit2fs11IFilesystemEEUlRKS3_RKNS7_4__fs10filesystem4pathEE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20EF9B5A8()
{
  return &unk_24C9F2558;
}

void sub_20EF9B5B4(uint64_t a1, uint64_t *a2, os_log_t oslog, os_log_type_t type, const char **a5)
{
  size_t v9;
  std::__shared_weak_count_vtbl *v10;
  std::__shared_weak_count *v11;
  const char *v12;
  size_t v13;
  size_t v14;
  _QWORD *p_dst;
  const char *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  char v21;
  _QWORD *v22;
  uint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *p_shared_owners;
  unint64_t v26;
  uint64_t *v27;
  unint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t *v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  _QWORD *v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  __int128 v60;
  std::__shared_weak_count *v61;
  __int128 v62;
  _QWORD *__dst;
  __int128 v64;
  _BYTE v65[24];
  __int128 v66;
  uint64_t v67;
  _QWORD v68[3];

  v68[2] = *MEMORY[0x24BDAC8D0];
  if (a1 && *(_QWORD *)(a1 + 8))
  {
    v9 = _os_log_pack_size();
    v10 = (std::__shared_weak_count_vtbl *)operator new(v9, (std::align_val_t)8uLL);
    v11 = (std::__shared_weak_count *)operator new();
    v11->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
    v11->__shared_owners_ = 0;
    v11->__shared_weak_owners_ = 0;
    v11[1].__vftable = v10;
    *(_QWORD *)&v60 = v10;
    *((_QWORD *)&v60 + 1) = v10;
    v62 = 0uLL;
    v61 = v11;
    v12 = *a5;
    v13 = strlen(*a5);
    if (v13 >= 0x7FFFFFFFFFFFFFF8)
      sub_20E860B7C();
    v14 = v13;
    if (v13 >= 0x17)
    {
      v18 = (v13 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v13 | 7) != 0x17)
        v18 = v13 | 7;
      v19 = v18 + 1;
      p_dst = operator new(v18 + 1);
      *(_QWORD *)&v64 = v14;
      *((_QWORD *)&v64 + 1) = v19 | 0x8000000000000000;
      __dst = p_dst;
    }
    else
    {
      HIBYTE(v64) = v13;
      p_dst = &__dst;
      if (!v13)
      {
LABEL_13:
        *((_BYTE *)p_dst + v14) = 0;
        v20 = __dst;
        v68[0] = v64;
        *(_QWORD *)((char *)v68 + 7) = *(_QWORD *)((char *)&v64 + 7);
        v21 = HIBYTE(v64);
        v22 = operator new(0x38uLL);
        v22[1] = 0;
        v22[2] = 0;
        v22[3] = off_24C9ABC20;
        *v22 = &off_24C9ABBD0;
        v23 = v68[0];
        v22[4] = v20;
        v22[5] = v23;
        *(_QWORD *)((char *)v22 + 47) = *(_QWORD *)((char *)v68 + 7);
        *((_BYTE *)v22 + 55) = v21;
        v68[0] = 0;
        *(_QWORD *)((char *)v68 + 7) = 0;
        v24 = (std::__shared_weak_count *)*((_QWORD *)&v62 + 1);
        *(_QWORD *)&v62 = v22 + 3;
        *((_QWORD *)&v62 + 1) = v22;
        if (v24)
        {
          p_shared_owners = (unint64_t *)&v24->__shared_owners_;
          do
            v26 = __ldaxr(p_shared_owners);
          while (__stlxr(v26 - 1, p_shared_owners));
          if (!v26)
          {
            ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
            std::__shared_weak_count::__release_weak(v24);
          }
        }
        *(_OWORD *)v65 = v60;
        *(_QWORD *)&v65[16] = v61;
        if (v61)
        {
          v27 = &v61->__shared_owners_;
          do
            v28 = __ldxr((unint64_t *)v27);
          while (__stxr(v28 + 1, (unint64_t *)v27));
        }
        v66 = v62;
        if (*((_QWORD *)&v62 + 1))
        {
          v29 = (unint64_t *)(*((_QWORD *)&v62 + 1) + 8);
          do
            v30 = __ldxr(v29);
          while (__stxr(v30 + 1, v29));
          v67 = v62;
          do
            v31 = __ldaxr(v29);
          while (__stlxr(v31 - 1, v29));
          if (!v31)
          {
            (*(void (**)(_QWORD))(**((_QWORD **)&v62 + 1) + 16))(*((_QWORD *)&v62 + 1));
            std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v62 + 1));
          }
        }
        else
        {
          v67 = v62;
        }
        if (v61)
        {
          v32 = &v61->__shared_owners_;
          do
            v33 = __ldaxr((unint64_t *)v32);
          while (__stlxr(v33 - 1, (unint64_t *)v32));
          if (!v33)
          {
            ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
            std::__shared_weak_count::__release_weak(v61);
          }
        }
        v34 = *(_QWORD *)v65;
        if (*(char *)(v67 + 31) >= 0)
          v35 = v67 + 8;
        else
          v35 = *(_QWORD *)(v67 + 8);
        v36 = _os_log_pack_fill();
        *(_DWORD *)v36 = 136315138;
        *(_QWORD *)(v36 + 4) = v35;
        v37 = operator new();
        v38 = *((unsigned __int8 *)a2 + 23);
        if ((v38 & 0x80u) == 0)
          v39 = a2;
        else
          v39 = (uint64_t *)*a2;
        if ((v38 & 0x80u) != 0)
          v38 = a2[1];
        *(_QWORD *)v37 = v34;
        *(_OWORD *)(v37 + 8) = *(_OWORD *)&v65[8];
        *(_QWORD *)&v65[8] = 0;
        *(_QWORD *)&v65[16] = 0;
        *(_OWORD *)(v37 + 24) = v66;
        v66 = 0uLL;
        *(_QWORD *)(v37 + 40) = v39;
        *(_QWORD *)(v37 + 48) = v38;
        *(_BYTE *)(v37 + 56) = type;
        __dst = 0;
        *(_QWORD *)&v60 = v37;
        (*(void (**)(_QWORD, __int128 *))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8), &v60);
        v40 = v60;
        *(_QWORD *)&v60 = 0;
        if (v40)
        {
          v41 = *(std::__shared_weak_count **)(v40 + 32);
          if (v41)
          {
            v42 = (unint64_t *)&v41->__shared_owners_;
            do
              v43 = __ldaxr(v42);
            while (__stlxr(v43 - 1, v42));
            if (!v43)
            {
              ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
              std::__shared_weak_count::__release_weak(v41);
            }
          }
          v44 = *(std::__shared_weak_count **)(v40 + 16);
          if (v44)
          {
            v45 = (unint64_t *)&v44->__shared_owners_;
            do
              v46 = __ldaxr(v45);
            while (__stlxr(v46 - 1, v45));
            if (!v46)
            {
              ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
              std::__shared_weak_count::__release_weak(v44);
            }
          }
          MEMORY[0x212BC6398](v40, 0x10F0C40B62ED6C6);
          v47 = __dst;
          __dst = 0;
          if (v47)
          {
            v48 = (std::__shared_weak_count *)v47[4];
            if (v48)
            {
              v49 = (unint64_t *)&v48->__shared_owners_;
              do
                v50 = __ldaxr(v49);
              while (__stlxr(v50 - 1, v49));
              if (!v50)
              {
                ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
                std::__shared_weak_count::__release_weak(v48);
              }
            }
            v51 = (std::__shared_weak_count *)v47[2];
            if (v51)
            {
              v52 = (unint64_t *)&v51->__shared_owners_;
              do
                v53 = __ldaxr(v52);
              while (__stlxr(v53 - 1, v52));
              if (!v53)
              {
                ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
                std::__shared_weak_count::__release_weak(v51);
              }
            }
            MEMORY[0x212BC6398](v47, 0x10F0C40B62ED6C6);
          }
        }
        v54 = (std::__shared_weak_count *)*((_QWORD *)&v66 + 1);
        if (*((_QWORD *)&v66 + 1))
        {
          v55 = (unint64_t *)(*((_QWORD *)&v66 + 1) + 8);
          do
            v56 = __ldaxr(v55);
          while (__stlxr(v56 - 1, v55));
          if (!v56)
          {
            ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
            std::__shared_weak_count::__release_weak(v54);
          }
        }
        v57 = *(std::__shared_weak_count **)&v65[16];
        if (*(_QWORD *)&v65[16])
        {
          v58 = (unint64_t *)(*(_QWORD *)&v65[16] + 8);
          do
            v59 = __ldaxr(v58);
          while (__stlxr(v59 - 1, v58));
          if (!v59)
          {
            ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
            std::__shared_weak_count::__release_weak(v57);
          }
        }
        return;
      }
    }
    memcpy(p_dst, v12, v14);
    goto LABEL_13;
  }
  os_log_type_enabled(oslog, type);
  v16 = *a5;
  *(_DWORD *)v65 = 136315138;
  *(_QWORD *)&v65[4] = v16;
  v17 = (void *)_os_log_send_and_compose_impl();
  if (v17)
    free(v17);
}

void sub_20EF9BB28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  va_list va1;
  uint64_t v12;
  uint64_t v13;
  va_list va2;

  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v10 = va_arg(va2, _QWORD);
  v12 = va_arg(va2, _QWORD);
  v13 = va_arg(va2, _QWORD);
  sub_20E86E8C4((uint64_t *)va);
  sub_20E86E8C4((uint64_t *)va1);
  sub_20E86E658((uint64_t)va2);
  _Unwind_Resume(a1);
}

void sub_20EF9BB4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  sub_20E86E658((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20EF9BB60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  void *v11;
  int v12;

  if (v12 < 0)
  {
    operator delete(v11);
    sub_20E86E658((uint64_t)&a11);
    _Unwind_Resume(a1);
  }
  sub_20E86E658((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void sub_20EF9BBB8(uint64_t a1, uint64_t *a2, os_log_t oslog, os_log_type_t type, const char **a5)
{
  size_t v9;
  std::__shared_weak_count_vtbl *v10;
  std::__shared_weak_count *v11;
  const char *v12;
  size_t v13;
  size_t v14;
  _QWORD *p_dst;
  const char *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  char v21;
  _QWORD *v22;
  uint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *p_shared_owners;
  unint64_t v26;
  uint64_t *v27;
  unint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t *v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  _QWORD *v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  __int128 v60;
  std::__shared_weak_count *v61;
  __int128 v62;
  _QWORD *__dst;
  __int128 v64;
  _BYTE v65[24];
  __int128 v66;
  uint64_t v67;
  _QWORD v68[3];

  v68[2] = *MEMORY[0x24BDAC8D0];
  if (a1 && *(_QWORD *)(a1 + 8))
  {
    v9 = _os_log_pack_size();
    v10 = (std::__shared_weak_count_vtbl *)operator new(v9, (std::align_val_t)8uLL);
    v11 = (std::__shared_weak_count *)operator new();
    v11->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
    v11->__shared_owners_ = 0;
    v11->__shared_weak_owners_ = 0;
    v11[1].__vftable = v10;
    *(_QWORD *)&v60 = v10;
    *((_QWORD *)&v60 + 1) = v10;
    v62 = 0uLL;
    v61 = v11;
    v12 = *a5;
    v13 = strlen(*a5);
    if (v13 >= 0x7FFFFFFFFFFFFFF8)
      sub_20E860B7C();
    v14 = v13;
    if (v13 >= 0x17)
    {
      v18 = (v13 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v13 | 7) != 0x17)
        v18 = v13 | 7;
      v19 = v18 + 1;
      p_dst = operator new(v18 + 1);
      *(_QWORD *)&v64 = v14;
      *((_QWORD *)&v64 + 1) = v19 | 0x8000000000000000;
      __dst = p_dst;
    }
    else
    {
      HIBYTE(v64) = v13;
      p_dst = &__dst;
      if (!v13)
      {
LABEL_13:
        *((_BYTE *)p_dst + v14) = 0;
        v20 = __dst;
        v68[0] = v64;
        *(_QWORD *)((char *)v68 + 7) = *(_QWORD *)((char *)&v64 + 7);
        v21 = HIBYTE(v64);
        v22 = operator new(0x38uLL);
        v22[1] = 0;
        v22[2] = 0;
        v22[3] = off_24C9ABC20;
        *v22 = &off_24C9ABBD0;
        v23 = v68[0];
        v22[4] = v20;
        v22[5] = v23;
        *(_QWORD *)((char *)v22 + 47) = *(_QWORD *)((char *)v68 + 7);
        *((_BYTE *)v22 + 55) = v21;
        v68[0] = 0;
        *(_QWORD *)((char *)v68 + 7) = 0;
        v24 = (std::__shared_weak_count *)*((_QWORD *)&v62 + 1);
        *(_QWORD *)&v62 = v22 + 3;
        *((_QWORD *)&v62 + 1) = v22;
        if (v24)
        {
          p_shared_owners = (unint64_t *)&v24->__shared_owners_;
          do
            v26 = __ldaxr(p_shared_owners);
          while (__stlxr(v26 - 1, p_shared_owners));
          if (!v26)
          {
            ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
            std::__shared_weak_count::__release_weak(v24);
          }
        }
        *(_OWORD *)v65 = v60;
        *(_QWORD *)&v65[16] = v61;
        if (v61)
        {
          v27 = &v61->__shared_owners_;
          do
            v28 = __ldxr((unint64_t *)v27);
          while (__stxr(v28 + 1, (unint64_t *)v27));
        }
        v66 = v62;
        if (*((_QWORD *)&v62 + 1))
        {
          v29 = (unint64_t *)(*((_QWORD *)&v62 + 1) + 8);
          do
            v30 = __ldxr(v29);
          while (__stxr(v30 + 1, v29));
          v67 = v62;
          do
            v31 = __ldaxr(v29);
          while (__stlxr(v31 - 1, v29));
          if (!v31)
          {
            (*(void (**)(_QWORD))(**((_QWORD **)&v62 + 1) + 16))(*((_QWORD *)&v62 + 1));
            std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v62 + 1));
          }
        }
        else
        {
          v67 = v62;
        }
        if (v61)
        {
          v32 = &v61->__shared_owners_;
          do
            v33 = __ldaxr((unint64_t *)v32);
          while (__stlxr(v33 - 1, (unint64_t *)v32));
          if (!v33)
          {
            ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
            std::__shared_weak_count::__release_weak(v61);
          }
        }
        v34 = *(_QWORD *)v65;
        if (*(char *)(v67 + 31) >= 0)
          v35 = v67 + 8;
        else
          v35 = *(_QWORD *)(v67 + 8);
        v36 = _os_log_pack_fill();
        *(_DWORD *)v36 = 136315138;
        *(_QWORD *)(v36 + 4) = v35;
        v37 = operator new();
        v38 = *((unsigned __int8 *)a2 + 23);
        if ((v38 & 0x80u) == 0)
          v39 = a2;
        else
          v39 = (uint64_t *)*a2;
        if ((v38 & 0x80u) != 0)
          v38 = a2[1];
        *(_QWORD *)v37 = v34;
        *(_OWORD *)(v37 + 8) = *(_OWORD *)&v65[8];
        *(_QWORD *)&v65[8] = 0;
        *(_QWORD *)&v65[16] = 0;
        *(_OWORD *)(v37 + 24) = v66;
        v66 = 0uLL;
        *(_QWORD *)(v37 + 40) = v39;
        *(_QWORD *)(v37 + 48) = v38;
        *(_BYTE *)(v37 + 56) = type;
        __dst = 0;
        *(_QWORD *)&v60 = v37;
        (*(void (**)(_QWORD, __int128 *))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8), &v60);
        v40 = v60;
        *(_QWORD *)&v60 = 0;
        if (v40)
        {
          v41 = *(std::__shared_weak_count **)(v40 + 32);
          if (v41)
          {
            v42 = (unint64_t *)&v41->__shared_owners_;
            do
              v43 = __ldaxr(v42);
            while (__stlxr(v43 - 1, v42));
            if (!v43)
            {
              ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
              std::__shared_weak_count::__release_weak(v41);
            }
          }
          v44 = *(std::__shared_weak_count **)(v40 + 16);
          if (v44)
          {
            v45 = (unint64_t *)&v44->__shared_owners_;
            do
              v46 = __ldaxr(v45);
            while (__stlxr(v46 - 1, v45));
            if (!v46)
            {
              ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
              std::__shared_weak_count::__release_weak(v44);
            }
          }
          MEMORY[0x212BC6398](v40, 0x10F0C40B62ED6C6);
          v47 = __dst;
          __dst = 0;
          if (v47)
          {
            v48 = (std::__shared_weak_count *)v47[4];
            if (v48)
            {
              v49 = (unint64_t *)&v48->__shared_owners_;
              do
                v50 = __ldaxr(v49);
              while (__stlxr(v50 - 1, v49));
              if (!v50)
              {
                ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
                std::__shared_weak_count::__release_weak(v48);
              }
            }
            v51 = (std::__shared_weak_count *)v47[2];
            if (v51)
            {
              v52 = (unint64_t *)&v51->__shared_owners_;
              do
                v53 = __ldaxr(v52);
              while (__stlxr(v53 - 1, v52));
              if (!v53)
              {
                ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
                std::__shared_weak_count::__release_weak(v51);
              }
            }
            MEMORY[0x212BC6398](v47, 0x10F0C40B62ED6C6);
          }
        }
        v54 = (std::__shared_weak_count *)*((_QWORD *)&v66 + 1);
        if (*((_QWORD *)&v66 + 1))
        {
          v55 = (unint64_t *)(*((_QWORD *)&v66 + 1) + 8);
          do
            v56 = __ldaxr(v55);
          while (__stlxr(v56 - 1, v55));
          if (!v56)
          {
            ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
            std::__shared_weak_count::__release_weak(v54);
          }
        }
        v57 = *(std::__shared_weak_count **)&v65[16];
        if (*(_QWORD *)&v65[16])
        {
          v58 = (unint64_t *)(*(_QWORD *)&v65[16] + 8);
          do
            v59 = __ldaxr(v58);
          while (__stlxr(v59 - 1, v58));
          if (!v59)
          {
            ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
            std::__shared_weak_count::__release_weak(v57);
          }
        }
        return;
      }
    }
    memcpy(p_dst, v12, v14);
    goto LABEL_13;
  }
  os_log_type_enabled(oslog, type);
  v16 = *a5;
  *(_DWORD *)v65 = 136315138;
  *(_QWORD *)&v65[4] = v16;
  v17 = (void *)_os_log_send_and_compose_impl();
  if (v17)
    free(v17);
}

void sub_20EF9C12C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  va_list va1;
  uint64_t v12;
  uint64_t v13;
  va_list va2;

  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v10 = va_arg(va2, _QWORD);
  v12 = va_arg(va2, _QWORD);
  v13 = va_arg(va2, _QWORD);
  sub_20E86E8C4((uint64_t *)va);
  sub_20E86E8C4((uint64_t *)va1);
  sub_20E86E658((uint64_t)va2);
  _Unwind_Resume(a1);
}

void sub_20EF9C150(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  sub_20E86E658((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20EF9C164(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  void *v11;
  int v12;

  if (v12 < 0)
  {
    operator delete(v11);
    sub_20E86E658((uint64_t)&a11);
    _Unwind_Resume(a1);
  }
  sub_20E86E658((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void sub_20EF9C1BC(uint64_t a1, uint64_t *a2, os_log_t oslog, os_log_type_t type)
{
  size_t v7;
  std::__shared_weak_count_vtbl *v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  void *v24;
  __int128 v25;
  uint64_t v26;

  if (a1 && *(_QWORD *)(a1 + 8))
  {
    v7 = _os_log_pack_size();
    v8 = (std::__shared_weak_count_vtbl *)operator new(v7, (std::align_val_t)8uLL);
    v9 = (std::__shared_weak_count *)operator new();
    v10 = v9;
    v9->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    v9->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
    v9->__shared_weak_owners_ = 0;
    v9[1].__vftable = v8;
    *(_QWORD *)&v25 = v8;
    *((_QWORD *)&v25 + 1) = v9;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v10);
    }
    *(_WORD *)_os_log_pack_fill() = 0;
    v14 = operator new();
    v15 = *((unsigned __int8 *)a2 + 23);
    if ((v15 & 0x80u) == 0)
      v16 = a2;
    else
      v16 = (uint64_t *)*a2;
    if ((v15 & 0x80u) != 0)
      v15 = a2[1];
    *(_QWORD *)v14 = v8;
    *(_OWORD *)(v14 + 8) = v25;
    *(_OWORD *)(v14 + 24) = 0uLL;
    *(_QWORD *)(v14 + 40) = v16;
    *(_QWORD *)(v14 + 48) = v15;
    *(_BYTE *)(v14 + 56) = type;
    v26 = v14;
    (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8), &v26);
    v17 = v26;
    v26 = 0;
    if (v17)
    {
      v18 = *(std::__shared_weak_count **)(v17 + 32);
      if (v18)
      {
        v19 = (unint64_t *)&v18->__shared_owners_;
        do
          v20 = __ldaxr(v19);
        while (__stlxr(v20 - 1, v19));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
      v21 = *(std::__shared_weak_count **)(v17 + 16);
      if (v21)
      {
        v22 = (unint64_t *)&v21->__shared_owners_;
        do
          v23 = __ldaxr(v22);
        while (__stlxr(v23 - 1, v22));
        if (!v23)
        {
          ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
          std::__shared_weak_count::__release_weak(v21);
        }
      }
      MEMORY[0x212BC6398](v17, 0x10F0C40B62ED6C6);
    }
  }
  else
  {
    os_log_type_enabled(oslog, type);
    v24 = (void *)_os_log_send_and_compose_impl();
    if (v24)
      free(v24);
  }
}

void sub_20EF9C54C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  va_list va1;
  va_list va2;

  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v11 = va_arg(va2, _QWORD);
  sub_20E86E8C4((uint64_t *)va2);
  sub_20E86E8C4((uint64_t *)va1);
  sub_20E86E658((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20EF9C570(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E86E658((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20EF9C584(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BC6398](v1, 0x10D0C40B950D02ALL);
  _Unwind_Resume(a1);
}

void sub_20EF9C5A8(uint64_t a1, uint64_t *a2, os_log_t oslog, os_log_type_t type)
{
  size_t v7;
  std::__shared_weak_count_vtbl *v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  void *v24;
  __int128 v25;
  uint64_t v26;

  if (a1 && *(_QWORD *)(a1 + 8))
  {
    v7 = _os_log_pack_size();
    v8 = (std::__shared_weak_count_vtbl *)operator new(v7, (std::align_val_t)8uLL);
    v9 = (std::__shared_weak_count *)operator new();
    v10 = v9;
    v9->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    v9->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
    v9->__shared_weak_owners_ = 0;
    v9[1].__vftable = v8;
    *(_QWORD *)&v25 = v8;
    *((_QWORD *)&v25 + 1) = v9;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v10);
    }
    *(_WORD *)_os_log_pack_fill() = 0;
    v14 = operator new();
    v15 = *((unsigned __int8 *)a2 + 23);
    if ((v15 & 0x80u) == 0)
      v16 = a2;
    else
      v16 = (uint64_t *)*a2;
    if ((v15 & 0x80u) != 0)
      v15 = a2[1];
    *(_QWORD *)v14 = v8;
    *(_OWORD *)(v14 + 8) = v25;
    *(_OWORD *)(v14 + 24) = 0uLL;
    *(_QWORD *)(v14 + 40) = v16;
    *(_QWORD *)(v14 + 48) = v15;
    *(_BYTE *)(v14 + 56) = type;
    v26 = v14;
    (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8), &v26);
    v17 = v26;
    v26 = 0;
    if (v17)
    {
      v18 = *(std::__shared_weak_count **)(v17 + 32);
      if (v18)
      {
        v19 = (unint64_t *)&v18->__shared_owners_;
        do
          v20 = __ldaxr(v19);
        while (__stlxr(v20 - 1, v19));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
      v21 = *(std::__shared_weak_count **)(v17 + 16);
      if (v21)
      {
        v22 = (unint64_t *)&v21->__shared_owners_;
        do
          v23 = __ldaxr(v22);
        while (__stlxr(v23 - 1, v22));
        if (!v23)
        {
          ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
          std::__shared_weak_count::__release_weak(v21);
        }
      }
      MEMORY[0x212BC6398](v17, 0x10F0C40B62ED6C6);
    }
  }
  else
  {
    os_log_type_enabled(oslog, type);
    v24 = (void *)_os_log_send_and_compose_impl();
    if (v24)
      free(v24);
  }
}

void sub_20EF9C938(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  va_list va1;
  va_list va2;

  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v11 = va_arg(va2, _QWORD);
  sub_20E86E8C4((uint64_t *)va2);
  sub_20E86E8C4((uint64_t *)va1);
  sub_20E86E658((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20EF9C95C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E86E658((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20EF9C970(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BC6398](v1, 0x10D0C40B950D02ALL);
  _Unwind_Resume(a1);
}

uint64_t sub_20EF9C994(uint64_t result, _QWORD *a2, _QWORD *a3)
{
  int8x8_t v3;
  unint64_t v4;
  uint8x8_t v5;
  _QWORD *v6;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;

  v3 = (int8x8_t)a2[1];
  v4 = a3[1];
  v5 = (uint8x8_t)vcnt_s8(v3);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    if (v4 >= *(_QWORD *)&v3)
      v4 %= *(_QWORD *)&v3;
  }
  else
  {
    v4 &= *(_QWORD *)&v3 - 1;
  }
  v6 = *(_QWORD **)(*a2 + 8 * v4);
  do
  {
    v7 = v6;
    v6 = (_QWORD *)*v6;
  }
  while (v6 != a3);
  if (v7 == a2 + 2)
    goto LABEL_18;
  v8 = v7[1];
  if (v5.u32[0] > 1uLL)
  {
    if (v8 >= *(_QWORD *)&v3)
      v8 %= *(_QWORD *)&v3;
  }
  else
  {
    v8 &= *(_QWORD *)&v3 - 1;
  }
  if (v8 != v4)
  {
LABEL_18:
    if (!*a3)
      goto LABEL_19;
    v9 = *(_QWORD *)(*a3 + 8);
    if (v5.u32[0] > 1uLL)
    {
      if (v9 >= *(_QWORD *)&v3)
        v9 %= *(_QWORD *)&v3;
    }
    else
    {
      v9 &= *(_QWORD *)&v3 - 1;
    }
    if (v9 != v4)
LABEL_19:
      *(_QWORD *)(*a2 + 8 * v4) = 0;
  }
  v10 = *a3;
  if (*a3)
  {
    v11 = *(_QWORD *)(v10 + 8);
    if (v5.u32[0] > 1uLL)
    {
      if (v11 >= *(_QWORD *)&v3)
        v11 %= *(_QWORD *)&v3;
    }
    else
    {
      v11 &= *(_QWORD *)&v3 - 1;
    }
    if (v11 != v4)
    {
      *(_QWORD *)(*a2 + 8 * v11) = v7;
      v10 = *a3;
    }
  }
  *v7 = v10;
  *a3 = 0;
  --a2[3];
  *(_QWORD *)result = a3;
  *(_QWORD *)(result + 8) = a2 + 2;
  *(_BYTE *)(result + 16) = 1;
  return result;
}

void sub_20EF9CACC()
{
  JUMPOUT(0x212BC6398);
}

__n128 sub_20EF9CAE0(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_24C9F2578;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 sub_20EF9CB20(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24C9F2578;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_20EF9CB48(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  size_t v10;
  const void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  timespec *p_dst;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  __int128 *v20;
  __int128 *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  const void **v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void **v29;
  void **v30;
  void *v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  _QWORD *v35;
  char *v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  int v40;
  unint64_t v41;
  unint64_t v42;
  char *v44;
  size_t v45;
  const char *v46;
  unsigned __int8 v47;
  size_t v48;
  const char *v49;
  _BYTE *v50;
  uint64_t v51;
  uint64_t v52;
  void **v53;
  NSObject *v54;
  uint64_t v55;
  uint64_t v56;
  void *v57;
  const char *v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  uint64_t *v62;
  unsigned __int8 v63;
  std::runtime_error *exception;
  char *v66;
  size_t v67;
  __darwin_time_t tv_sec;
  uint64_t v69;
  uint64_t i;
  uint64_t v71;
  size_t v72;
  std::__shared_weak_count_vtbl *v73;
  std::__shared_weak_count *v74;
  unint64_t *p_shared_owners;
  size_t v76;
  size_t v77;
  _BYTE *v78;
  uint64_t v79;
  uint64_t v80;
  _QWORD *v81;
  std::__shared_weak_count *v82;
  unint64_t *v83;
  unint64_t v84;
  unint64_t v85;
  unint64_t v86;
  unint64_t v87;
  char *shared_owners;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  std::__shared_weak_count *v94;
  unint64_t *v95;
  unint64_t v96;
  std::__shared_weak_count *v97;
  unint64_t *v98;
  unint64_t v99;
  char *v100;
  char *v101;
  uint64_t v102;
  char *__s;
  char __sa;
  char *__sb;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  std::__shared_weak_count *v111;
  timespec __dst;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  unint64_t v117;
  void *__p;
  void **v119;
  uint64_t v120;
  uint64_t v121;
  _BYTE object[32];
  void *v123[2];
  __int128 v124;
  void *v125[2];
  __int128 v126;
  void *v127[2];
  void *v128[2];
  uint64_t v129;
  char v130;
  _BYTE v131[15];
  uint64_t v132;

  v132 = *MEMORY[0x24BDAC8D0];
  sub_210224144((const std::__fs::filesystem::path *)a3, 0x30u, *(_QWORD *)(a1 + 24), &v109);
  if (!v110)
  {
    sub_20EF764A8(&v108);
    if (**(int **)(v108 + 56) > 5)
      goto LABEL_167;
    v40 = *(unsigned __int8 *)(v108 + 72);
    v41 = sub_20E8C31DC(v108, "OSLogSurrogateAppender", 1, 0);
    v42 = v41;
    if (!v40 && v41 == 0)
      goto LABEL_167;
    __dst.tv_sec = (__darwin_time_t)&v108;
    __dst.tv_nsec = std::chrono::steady_clock::now().__d_.__rep_;
    *(std::chrono::system_clock::time_point *)&v113 = std::chrono::system_clock::now();
    DWORD2(v113) = 5;
    *(_QWORD *)&v114 = "unknown file";
    DWORD2(v114) = 83;
    *((_QWORD *)&v115 + 1) = 0;
    *(_QWORD *)&v116 = 0;
    *(_QWORD *)&v115 = "unknown function";
    if (*(char *)(a3 + 23) >= 0)
      v44 = (char *)a3;
    else
      v44 = *(char **)a3;
    __s = v44;
    v106 = *(_QWORD *)__dst.tv_sec + 16;
    v107 = *(_QWORD *)__dst.tv_sec;
    if (*(char *)(*(_QWORD *)__dst.tv_sec + 39) < 0)
    {
      v46 = *(const char **)(v107 + 16);
      v45 = *(_QWORD *)(v107 + 24);
    }
    else
    {
      v45 = *(unsigned __int8 *)(*(_QWORD *)__dst.tv_sec + 39);
      v46 = (const char *)(*(_QWORD *)__dst.tv_sec + 16);
    }
    v47 = atomic_load((unsigned __int8 *)&qword_254A4A510);
    if ((v47 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
    {
      sub_20E9E46F8((uint64_t)object);
      if (object[24])
      {
        *(_OWORD *)byte_254A4A4F8 = *(_OWORD *)object;
        *(_QWORD *)&byte_254A4A4F8[16] = *(_QWORD *)&object[16];
      }
      else
      {
        byte_254A4A4F8[23] = 14;
        strcpy(byte_254A4A4F8, "com.apple.cv3d");
      }
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
      __cxa_guard_release(&qword_254A4A510);
    }
    if (byte_254A4A4F8[23] >= 0)
      v48 = byte_254A4A4F8[23];
    else
      v48 = *(_QWORD *)&byte_254A4A4F8[8];
    if (byte_254A4A4F8[23] >= 0)
      v49 = byte_254A4A4F8;
    else
      v49 = *(const char **)byte_254A4A4F8;
    *(_QWORD *)object = os_log_create(v49, v46);
    v50 = &object[8];
    if (v48 > 0x7FFFFFFFFFFFFFF7)
      sub_20E860B7C();
    if (v48 >= 0x17)
    {
      v51 = (v48 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v48 | 7) != 0x17)
        v51 = v48 | 7;
      v52 = v51 + 1;
      v50 = operator new(v51 + 1);
      *(_QWORD *)&object[16] = v48;
      *(_QWORD *)&object[24] = v52 | 0x8000000000000000;
      *(_QWORD *)&object[8] = v50;
    }
    else
    {
      object[31] = v48;
      if (!v48)
      {
LABEL_137:
        v50[v48] = 0;
        LOBYTE(v123[0]) = 1;
        v53 = &v123[1];
        if (v45 > 0x7FFFFFFFFFFFFFF7)
          sub_20E860B7C();
        if (v45 >= 0x17)
        {
          v55 = (v45 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v45 | 7) != 0x17)
            v55 = v45 | 7;
          v56 = v55 + 1;
          v53 = (void **)operator new(v55 + 1);
          *(_QWORD *)&v124 = v45;
          *((_QWORD *)&v124 + 1) = v56 | 0x8000000000000000;
          v123[1] = v53;
        }
        else
        {
          HIBYTE(v124) = v45;
          if (!v45)
          {
            LOBYTE(v123[1]) = 0;
            LOBYTE(v125[0]) = 1;
            v54 = *(NSObject **)object;
            if (SHIBYTE(v124) < 0)
              goto LABEL_142;
            goto LABEL_148;
          }
        }
        memmove(v53, v46, v45);
        *((_BYTE *)v53 + v45) = 0;
        LOBYTE(v125[0]) = 1;
        v54 = *(NSObject **)object;
        if (SHIBYTE(v124) < 0)
        {
LABEL_142:
          operator delete(v123[1]);
          if (!LOBYTE(v123[0]))
            goto LABEL_151;
          goto LABEL_149;
        }
LABEL_148:
        if (!LOBYTE(v123[0]))
          goto LABEL_151;
LABEL_149:
        if ((object[31] & 0x80000000) != 0)
          operator delete(*(void **)&object[8]);
LABEL_151:
        if (*(_QWORD *)object)
          os_release(*(void **)object);
        if (!v42 || !*(_QWORD *)(v42 + 24))
        {
          os_log_type_enabled(v54, OS_LOG_TYPE_ERROR);
          *(_DWORD *)object = 136315138;
          *(_QWORD *)&object[4] = __s;
          v57 = (void *)_os_log_send_and_compose_impl();
          if (v57)
            free(v57);
LABEL_157:
          if (v40)
          {
            if (*(char *)(a3 + 23) >= 0)
              v58 = (const char *)a3;
            else
              v58 = *(const char **)a3;
            sub_20E8C003C((uint64_t)&__dst, "[%s] failed to open stream.", v58);
            sub_20E863570((uint64_t)&__dst);
          }
          sub_20E863570((uint64_t)&__dst);
          v59 = (std::__shared_weak_count *)v116;
          if ((_QWORD)v116)
          {
            v60 = (unint64_t *)(v116 + 8);
            do
              v61 = __ldaxr(v60);
            while (__stlxr(v61 - 1, v60));
            if (!v61)
            {
              ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
              std::__shared_weak_count::__release_weak(v59);
            }
          }
LABEL_167:
          v62 = sub_210219C18();
          v63 = atomic_load((unsigned __int8 *)&qword_254A6DDD0);
          if ((v63 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DDD0))
          {
            __cxa_atexit((void (*)(void *))sub_21021A250, &stru_254A5A410, &dword_20E81F000);
            __cxa_guard_release(&qword_254A6DDD0);
          }
          if (!atomic_load(&qword_254A5A450))
          {
LABEL_169:
            if (os_signpost_enabled((os_log_t)*v62))
            {
              *(_DWORD *)object = 136315138;
              *(_QWORD *)&object[4] = "STRM";
              _os_signpost_emit_unreliably_with_name_impl();
            }
            exception = (std::runtime_error *)__cxa_allocate_exception(0x18uLL);
            sub_20EF5D440(a3, (uint64_t)" failed to open stream.");
            std::runtime_error::runtime_error(exception, (const std::string *)object);
            exception->__vftable = (std::runtime_error_vtbl *)&off_24C9F2020;
            LODWORD(exception[1].__vftable) = 0;
            __cxa_throw(exception, (struct type_info *)&unk_24C9F2038, (void (*)(void *))std::runtime_error::~runtime_error);
          }
          *(_DWORD *)object = 136315138;
          *(_QWORD *)&object[4] = "STRM";
          v66 = (char *)_os_log_send_and_compose_impl();
          v67 = strlen(v66);
          __dst.tv_sec = 0;
          pthread_threadid_np(0, (__uint64_t *)&__dst);
          tv_sec = __dst.tv_sec;
          timespec_get(&__dst, 1);
          sub_210219E20(object, 0xEEEEB0B5B2B2EEEELL, "Trace", 5uLL, (__int128 *)(v62 + 1), (__int128 *)(v62 + 5), "MappingIOSampleWriteErr:TYPE:%s", 0x1FuLL, v66, v67, tv_sec, &__dst);
          std::mutex::lock(&stru_254A5A410);
          v69 = qword_254A5A458;
          for (i = unk_254A5A460; v69 != i; v69 += 40)
          {
            v71 = *(_QWORD *)(v69 + 32);
            if (!v71)
              sub_20E86D37C();
            (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v71 + 48))(v71, object);
          }
          std::mutex::unlock(&stru_254A5A410);
          if (v130 < 0)
          {
            operator delete(v128[1]);
            if ((SHIBYTE(v128[0]) & 0x80000000) == 0)
              goto LABEL_177;
          }
          else if ((SHIBYTE(v128[0]) & 0x80000000) == 0)
          {
LABEL_177:
            if (!BYTE8(v126))
            {
LABEL_183:
              if (BYTE8(v124) && SBYTE7(v124) < 0)
                operator delete(v123[0]);
              if ((object[31] & 0x80000000) != 0)
                operator delete(*(void **)&object[8]);
              if (v66)
                free(v66);
              goto LABEL_169;
            }
LABEL_181:
            if (SBYTE7(v126) < 0)
              operator delete(v125[0]);
            goto LABEL_183;
          }
          operator delete(v127[0]);
          if (!BYTE8(v126))
            goto LABEL_183;
          goto LABEL_181;
        }
        v72 = _os_log_pack_size();
        v73 = (std::__shared_weak_count_vtbl *)operator new(v72, (std::align_val_t)8uLL);
        v74 = (std::__shared_weak_count *)operator new();
        v74->__shared_owners_ = 0;
        p_shared_owners = (unint64_t *)&v74->__shared_owners_;
        v74->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
        v74->__shared_weak_owners_ = 0;
        v74[1].__vftable = v73;
        v76 = strlen(__s);
        if (v76 > 0x7FFFFFFFFFFFFFF7)
          sub_20E860B7C();
        v77 = v76;
        if (v76 >= 0x17)
        {
          v79 = (v76 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v76 | 7) != 0x17)
            v79 = v76 | 7;
          v80 = v79 + 1;
          v78 = operator new(v79 + 1);
          *(_QWORD *)&object[8] = v77;
          *(_QWORD *)&object[16] = v80 | 0x8000000000000000;
          *(_QWORD *)object = v78;
        }
        else
        {
          object[23] = v76;
          v78 = object;
          if (!v76)
          {
LABEL_200:
            v78[v77] = 0;
            v102 = *(_QWORD *)object;
            *(_QWORD *)v131 = *(_QWORD *)&object[8];
            *(_QWORD *)&v131[7] = *(_QWORD *)&object[15];
            __sa = object[23];
            v81 = operator new(0x38uLL);
            v82 = (std::__shared_weak_count *)v81;
            v81[1] = 0;
            v83 = v81 + 1;
            v81[3] = off_24C9ABC20;
            v100 = (char *)(v81 + 3);
            v81[2] = 0;
            v81[4] = v102;
            v101 = (char *)(v81 + 4);
            *v81 = &off_24C9ABBD0;
            v81[5] = *(_QWORD *)v131;
            *(_QWORD *)((char *)v81 + 47) = *(_QWORD *)&v131[7];
            *((_BYTE *)v81 + 55) = __sa;
            do
              v84 = __ldxr(p_shared_owners);
            while (__stxr(v84 + 1, p_shared_owners));
            do
              v85 = __ldxr(v83);
            while (__stxr(v85 + 1, v83));
            do
              v86 = __ldaxr(v83);
            while (__stlxr(v86 - 1, v83));
            if (!v86)
            {
              (*(void (**)(_QWORD *))(*v81 + 16))(v81);
              std::__shared_weak_count::__release_weak(v82);
            }
            do
              v87 = __ldaxr(p_shared_owners);
            while (__stlxr(v87 - 1, p_shared_owners));
            if (!v87)
            {
              ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
              std::__shared_weak_count::__release_weak(v74);
            }
            shared_owners = v101;
            if (SHIBYTE(v82[2].__vftable) < 0)
              shared_owners = (char *)v82[1].__shared_owners_;
            __sb = shared_owners;
            v89 = _os_log_pack_fill();
            *(_DWORD *)v89 = 136315138;
            *(_QWORD *)(v89 + 4) = __sb;
            v90 = operator new();
            v91 = *(unsigned __int8 *)(v107 + 39);
            v92 = v106;
            if ((v91 & 0x80u) != 0)
            {
              v92 = *(_QWORD *)(v107 + 16);
              v91 = *(_QWORD *)(v107 + 24);
            }
            *(_QWORD *)v90 = v73;
            *(_QWORD *)(v90 + 8) = v73;
            *(_QWORD *)(v90 + 16) = v74;
            *(_QWORD *)(v90 + 24) = v100;
            *(_QWORD *)(v90 + 32) = v82;
            *(_QWORD *)(v90 + 40) = v92;
            *(_QWORD *)(v90 + 48) = v91;
            *(_BYTE *)(v90 + 56) = 16;
            *(_QWORD *)object = v90;
            (*(void (**)(_QWORD, _BYTE *))(**(_QWORD **)(v42 + 24) + 40))(*(_QWORD *)(v42 + 24), object);
            v93 = *(_QWORD *)object;
            *(_QWORD *)object = 0;
            if (v93)
            {
              v94 = *(std::__shared_weak_count **)(v93 + 32);
              if (v94)
              {
                v95 = (unint64_t *)&v94->__shared_owners_;
                do
                  v96 = __ldaxr(v95);
                while (__stlxr(v96 - 1, v95));
                if (!v96)
                {
                  ((void (*)(std::__shared_weak_count *))v94->__on_zero_shared)(v94);
                  std::__shared_weak_count::__release_weak(v94);
                }
              }
              v97 = *(std::__shared_weak_count **)(v93 + 16);
              if (v97)
              {
                v98 = (unint64_t *)&v97->__shared_owners_;
                do
                  v99 = __ldaxr(v98);
                while (__stlxr(v99 - 1, v98));
                if (!v99)
                {
                  ((void (*)(std::__shared_weak_count *))v97->__on_zero_shared)(v97);
                  std::__shared_weak_count::__release_weak(v97);
                }
              }
              MEMORY[0x212BC6398](v93, 0x10F0C40B62ED6C6);
            }
            goto LABEL_157;
          }
        }
        memcpy(v78, __s, v77);
        goto LABEL_200;
      }
    }
    memmove(v50, v49, v48);
    goto LABEL_137;
  }
  v6 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v110 + 16))(v110);
  v7 = (char *)v6 + *(_QWORD *)(*v6 - 24);
  if ((v7[32] & 5) != 0)
  {
    *(_OWORD *)v127 = 0u;
    *(_OWORD *)v128 = 0u;
    *(_OWORD *)v125 = 0u;
    v126 = 0u;
    *(_OWORD *)v123 = 0u;
    v124 = 0u;
    memset(object, 0, sizeof(object));
    v129 = -1;
  }
  else
  {
    (*(void (**)(_BYTE *__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**((_QWORD **)v7 + 5) + 32))(object, *((_QWORD *)v7 + 5), 0, 1, 16);
  }
  v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v110 + 16))(v110);
  v9 = *(_QWORD *)(a1 + 16);
  v11 = *(const void **)v9;
  v10 = *(_QWORD *)(v9 + 8);
  v12 = operator new();
  *(_QWORD *)v12 = v8;
  *(_QWORD *)(v12 + 8) = v8;
  v13 = v12 + 8;
  *(_BYTE *)(v12 + 16) = 0;
  *(_BYTE *)(v12 + 40) = 0;
  *(_BYTE *)(v12 + 48) = 0;
  v14 = (uint64_t *)(v12 + 48);
  *(_BYTE *)(v12 + 72) = 0;
  *(_QWORD *)(v12 + 80) = 0;
  *(_QWORD *)(v12 + 88) = 0;
  *(_QWORD *)(v12 + 96) = 0;
  if (v10)
  {
    if (v10 > 0x7FFFFFFFFFFFFFF7)
      sub_20E860B7C();
    if (v10 >= 0x17)
    {
      v16 = (v10 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v10 | 7) != 0x17)
        v16 = v10 | 7;
      v17 = v16 + 1;
      p_dst = (timespec *)operator new(v16 + 1);
      __dst.tv_nsec = v10;
      *(_QWORD *)&v113 = v17 | 0x8000000000000000;
      __dst.tv_sec = (__darwin_time_t)p_dst;
    }
    else
    {
      BYTE7(v113) = v10;
      p_dst = &__dst;
    }
    memmove(p_dst, v11, v10);
    *((_BYTE *)&p_dst->tv_sec + v10) = 0;
    sub_20E9F5254((uint64_t)v131, v13, (uint64_t)&__dst);
    if (SBYTE7(v113) < 0)
    {
      operator delete((void *)__dst.tv_sec);
      if (*(_BYTE *)(v12 + 40))
        goto LABEL_14;
    }
    else if (*(_BYTE *)(v12 + 40))
    {
LABEL_14:
      __dst.tv_sec = v12 + 16;
      sub_20E9F3D4C((uint64_t **)&__dst, 2u);
      goto LABEL_17;
    }
  }
  LOBYTE(__dst.tv_sec) = 2;
  std::ostream::write();
LABEL_17:
  sub_20E9EE95C(v12);
  v18 = *(_OWORD *)(a2 + 48);
  v114 = *(_OWORD *)(a2 + 32);
  v115 = v18;
  v116 = *(_OWORD *)(a2 + 64);
  v19 = *(_OWORD *)(a2 + 16);
  __dst = *(timespec *)a2;
  v113 = v19;
  v20 = *(__int128 **)(a2 + 88);
  v117 = *(_QWORD *)(a2 + 80);
  __p = 0;
  v21 = *(__int128 **)(a2 + 96);
  v119 = 0;
  v120 = 0;
  sub_20E8ADB20((char *)&__p, v20, v21, 0xAAAAAAAAAAAAAAABLL * (((char *)v21 - (char *)v20) >> 3));
  if (*(_BYTE *)(v12 + 40))
  {
    *(_QWORD *)v131 = v12 + 16;
    sub_20E9F472C((uint64_t **)v131, __dst.tv_sec);
  }
  else
  {
    sub_20E9F4A34();
  }
  if ((_BYTE)v116)
  {
    if (*(_BYTE *)(v12 + 40))
    {
      *(_QWORD *)v131 = v12 + 16;
      sub_20E9F3164((uint64_t **)v131, 1);
    }
    else
    {
      v131[0] = 1;
      std::ostream::write();
    }
    if (*(_BYTE *)(v12 + 40))
    {
      *(_QWORD *)v131 = v12 + 16;
      sub_20E9F3D4C((uint64_t **)v131, 1u);
    }
    else
    {
      v131[0] = 1;
      std::ostream::write();
    }
    sub_20E9EE95C(v12);
    if (*(_BYTE *)(v12 + 40))
    {
      *(_QWORD *)v131 = v12 + 16;
      sub_20E9F4C08((uint64_t)&v108, (uint64_t **)v131, (unint64_t *)&__dst.tv_nsec);
    }
    else
    {
      v131[0] = -53;
      *(_QWORD *)&v131[1] = bswap64(__dst.tv_nsec);
      std::ostream::write();
    }
    if (*(_BYTE *)(v12 + 40))
    {
      *(_QWORD *)v131 = v12 + 16;
      sub_20E9F4C08((uint64_t)&v108, (uint64_t **)v131, (unint64_t *)&v113);
    }
    else
    {
      v131[0] = -53;
      *(_QWORD *)&v131[1] = bswap64(v113);
      std::ostream::write();
    }
    if (*(_BYTE *)(v12 + 40))
    {
      *(_QWORD *)v131 = v12 + 16;
      sub_20E9F4C08((uint64_t)&v108, (uint64_t **)v131, (unint64_t *)&v113 + 1);
    }
    else
    {
      v131[0] = -53;
      *(_QWORD *)&v131[1] = bswap64(*((unint64_t *)&v113 + 1));
      std::ostream::write();
    }
    if (*(_BYTE *)(v12 + 40))
    {
      *(_QWORD *)v131 = v12 + 16;
      sub_20E9F4C08((uint64_t)&v108, (uint64_t **)v131, (unint64_t *)&v114);
    }
    else
    {
      v131[0] = -53;
      *(_QWORD *)&v131[1] = bswap64(v114);
      std::ostream::write();
    }
    if (*(_BYTE *)(v12 + 40))
    {
      *(_QWORD *)v131 = v12 + 16;
      sub_20E9F4C08((uint64_t)&v108, (uint64_t **)v131, (unint64_t *)&v114 + 1);
    }
    else
    {
      v131[0] = -53;
      *(_QWORD *)&v131[1] = bswap64(*((unint64_t *)&v114 + 1));
      std::ostream::write();
    }
    if (*(_BYTE *)(v12 + 40))
    {
      *(_QWORD *)v131 = v12 + 16;
      sub_20E9F4C08((uint64_t)&v108, (uint64_t **)v131, (unint64_t *)&v115);
    }
    else
    {
      v131[0] = -53;
      *(_QWORD *)&v131[1] = bswap64(v115);
      std::ostream::write();
    }
    if (BYTE12(v115))
    {
      if (*(_BYTE *)(v12 + 40))
      {
        *(_QWORD *)v131 = v12 + 16;
        sub_20E9F3164((uint64_t **)v131, 1);
      }
      else
      {
        v131[0] = 1;
        std::ostream::write();
      }
      if (*(_BYTE *)(v12 + 40))
      {
        *(_QWORD *)v131 = v12 + 16;
        sub_20E9F3834((uint64_t **)v131, DWORD2(v115));
      }
      else
      {
        sub_20E9F3C50();
      }
    }
    else if (*(_BYTE *)(v12 + 40))
    {
      *(_QWORD *)v131 = v12 + 16;
      sub_20E9F3164((uint64_t **)v131, 0);
    }
    else
    {
      v131[0] = 0;
      std::ostream::write();
    }
    v22 = *(_QWORD *)(*(_QWORD *)(v12 + 88) - 8);
    sub_20E9EE4D0(v14, *(_QWORD *)(v12 + 16) - v22 - 9);
    if (*v14)
      memmove((void *)(*(_QWORD *)(v12 + 24) + v22), *(const void **)(v12 + 56), *v14);
    *(_QWORD *)(v12 + 48) = 0;
    v23 = *(_QWORD *)(v12 + 80);
    v24 = *(_QWORD *)(v12 + 88) - 8;
    *(_QWORD *)(v12 + 88) = v24;
    if (v23 == v24)
    {
      std::ostream::write();
      if (*(_BYTE *)(v12 + 40))
      {
        free(*(void **)(v12 + 24));
        *(_BYTE *)(v12 + 40) = 0;
      }
      goto LABEL_65;
    }
  }
  else if (*(_BYTE *)(v12 + 40))
  {
    *(_QWORD *)v131 = v12 + 16;
    sub_20E9F3164((uint64_t **)v131, 0);
  }
  else
  {
    v131[0] = 0;
    std::ostream::write();
  }
  if (*(_BYTE *)(v12 + 40))
  {
    *(_QWORD *)v131 = v12 + 16;
    sub_20E9F40B0((uint64_t **)v131, *((unint64_t *)&v116 + 1));
    goto LABEL_66;
  }
LABEL_65:
  sub_20E9F45EC();
LABEL_66:
  if (*(_BYTE *)(v12 + 40))
  {
    *(_QWORD *)v131 = v12 + 16;
    sub_20E9F472C((uint64_t **)v131, v117);
  }
  else
  {
    sub_20E9F4A34();
  }
  if (*(_BYTE *)(v12 + 40))
  {
    *(_QWORD *)v131 = v12 + 16;
    sub_20E9F472C((uint64_t **)v131, 0xAAAAAAAAAAAAAAABLL * (((char *)v119 - (_BYTE *)__p) >> 3));
  }
  else
  {
    sub_20E9F4A34();
  }
  v25 = (const void **)__p;
  v26 = ((char *)v119 - (_BYTE *)__p) / 24;
  if (*(_BYTE *)(v12 + 40))
  {
    *(_QWORD *)v131 = v12 + 16;
    if (v119 != __p)
    {
      v27 = 24 * v26;
      do
      {
        sub_20E9F4E1C((uint64_t)&v108, (uint64_t **)v131, v25);
        v25 += 3;
        v27 -= 24;
      }
      while (v27);
    }
  }
  else if (v119 != __p)
  {
    v28 = 24 * v26;
    do
    {
      sub_20E9F5254((uint64_t)v131, v13, (uint64_t)v25);
      v25 += 3;
      v28 -= 24;
    }
    while (v28);
  }
  v29 = (void **)__p;
  if (__p)
  {
    v30 = v119;
    v31 = __p;
    if (v119 != __p)
    {
      do
      {
        if (*((char *)v30 - 1) < 0)
          operator delete(*(v30 - 3));
        v30 -= 3;
      }
      while (v30 != v29);
      v31 = __p;
    }
    v119 = v29;
    operator delete(v31);
  }
  v32 = *(_QWORD *)(*(_QWORD *)(v12 + 88) - 8);
  sub_20E9EE4D0(v14, *(_QWORD *)(v12 + 16) - v32 - 9);
  if (*v14)
    memmove((void *)(*(_QWORD *)(v12 + 24) + v32), *(const void **)(v12 + 56), *v14);
  *(_QWORD *)(v12 + 48) = 0;
  v33 = *(void **)(v12 + 80);
  v34 = *(_QWORD *)(v12 + 88) - 8;
  *(_QWORD *)(v12 + 88) = v34;
  if (v33 == (void *)v34)
  {
    std::ostream::write();
    if (*(_BYTE *)(v12 + 40))
    {
      free(*(void **)(v12 + 24));
      *(_BYTE *)(v12 + 40) = 0;
    }
    v33 = *(void **)(v12 + 80);
  }
  if (v33)
  {
    *(_QWORD *)(v12 + 88) = v33;
    operator delete(v33);
  }
  if (*(_BYTE *)(v12 + 72))
    free(*(void **)(v12 + 56));
  if (*(_BYTE *)(v12 + 40))
    free(*(void **)(v12 + 24));
  MEMORY[0x212BC6398](v12, 0x1030C408C1A3048);
  v35 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v110 + 16))(v110);
  v36 = (char *)v35 + *(_QWORD *)(*v35 - 24);
  if ((v36[32] & 5) != 0)
  {
    **(_QWORD **)(a1 + 8) = -1 - v129;
    v37 = v111;
    if (!v111)
      return;
  }
  else
  {
    (*(void (**)(timespec *__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**((_QWORD **)v36 + 5) + 32))(&__dst, *((_QWORD *)v36 + 5), 0, 1, 16);
    **(_QWORD **)(a1 + 8) = v121 - v129;
    v37 = v111;
    if (!v111)
      return;
  }
  v38 = (unint64_t *)&v37->__shared_owners_;
  do
    v39 = __ldaxr(v38);
  while (__stlxr(v39 - 1, v38));
  if (!v39)
  {
    ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
    std::__shared_weak_count::__release_weak(v37);
  }
}

void sub_20EF9DE08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,std::__shared_weak_count *a22,_Unwind_Exception *exception_object,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  unint64_t *p_shared_owners;
  unint64_t v36;

  __cxa_guard_abort(&qword_254A4A510);
  sub_20E863570((uint64_t)&exception_object);
  v32 = (std::__shared_weak_count *)a31;
  if (a31)
  {
    v33 = (unint64_t *)(a31 + 8);
    do
      v34 = __ldaxr(v33);
    while (__stlxr(v34 - 1, v33));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
    }
  }
  if (a22)
  {
    p_shared_owners = (unint64_t *)&a22->__shared_owners_;
    do
      v36 = __ldaxr(p_shared_owners);
    while (__stlxr(v36 - 1, p_shared_owners));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))a22->__on_zero_shared)(a22);
      std::__shared_weak_count::__release_weak(a22);
    }
  }
  _Unwind_Resume(a1);
}

uint64_t sub_20EF9E214(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3vio10mapping_io15SerializeSampleINS1_20SubmapMetadataSampleILj2EEEEEyRKT_RKNSt3__117basic_s"
                     "tring_viewIcNS8_11char_traitsIcEEEERKNS8_12basic_stringIcSB_NS8_9allocatorIcEEEERNS_3kit2fs11IFiles"
                     "ystemEEUlRKS4_RKNS8_4__fs10filesystem4pathEE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4cv3d3vio10mapping_io15SerializeSampleINS1_20SubmapMetadataSampleILj2EEEEEyRKT_RKNSt3_"
                                "_117basic_string_viewIcNS8_11char_traitsIcEEEERKNS8_12basic_stringIcSB_NS8_9allocatorIcE"
                                "EEERNS_3kit2fs11IFilesystemEEUlRKS4_RKNS8_4__fs10filesystem4pathEE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3vio10mapping_io15SerializeSampleINS1_20SubmapMetadataSampleILj2EEEEEyRKT_RKNSt3__117basic_string_viewIcNS8_11char_traitsIcEEEERKNS8_12basic_stringIcSB_NS8_9allocatorIcEEEERNS_3kit2fs11IFilesystemEEUlRKS4_RKNS8_4__fs10filesystem4pathEE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3vio10mapping_io15SerializeSampleINS1_20SubmapMetadataSampleILj2EEEEEyRKT_RKNSt3__117basic_string_viewIcNS8_11char_traitsIcEEEERKNS8_12basic_stringIcSB_NS8_9allocatorIcEEEERNS_3kit2fs11IFilesystemEEUlRKS4_RKNS8_4__fs10filesystem4pathEE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20EF9E280()
{
  return &unk_24C9F25E8;
}

void sub_20EF9E28C(uint64_t a1, uint64_t *a2, os_log_t oslog, os_log_type_t type, const char **a5)
{
  size_t v9;
  std::__shared_weak_count_vtbl *v10;
  std::__shared_weak_count *v11;
  const char *v12;
  size_t v13;
  size_t v14;
  _QWORD *p_dst;
  const char *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  char v21;
  _QWORD *v22;
  uint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *p_shared_owners;
  unint64_t v26;
  uint64_t *v27;
  unint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t *v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  _QWORD *v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  __int128 v60;
  std::__shared_weak_count *v61;
  __int128 v62;
  _QWORD *__dst;
  __int128 v64;
  _BYTE v65[24];
  __int128 v66;
  uint64_t v67;
  _QWORD v68[3];

  v68[2] = *MEMORY[0x24BDAC8D0];
  if (a1 && *(_QWORD *)(a1 + 8))
  {
    v9 = _os_log_pack_size();
    v10 = (std::__shared_weak_count_vtbl *)operator new(v9, (std::align_val_t)8uLL);
    v11 = (std::__shared_weak_count *)operator new();
    v11->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
    v11->__shared_owners_ = 0;
    v11->__shared_weak_owners_ = 0;
    v11[1].__vftable = v10;
    *(_QWORD *)&v60 = v10;
    *((_QWORD *)&v60 + 1) = v10;
    v62 = 0uLL;
    v61 = v11;
    v12 = *a5;
    v13 = strlen(*a5);
    if (v13 >= 0x7FFFFFFFFFFFFFF8)
      sub_20E860B7C();
    v14 = v13;
    if (v13 >= 0x17)
    {
      v18 = (v13 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v13 | 7) != 0x17)
        v18 = v13 | 7;
      v19 = v18 + 1;
      p_dst = operator new(v18 + 1);
      *(_QWORD *)&v64 = v14;
      *((_QWORD *)&v64 + 1) = v19 | 0x8000000000000000;
      __dst = p_dst;
    }
    else
    {
      HIBYTE(v64) = v13;
      p_dst = &__dst;
      if (!v13)
      {
LABEL_13:
        *((_BYTE *)p_dst + v14) = 0;
        v20 = __dst;
        v68[0] = v64;
        *(_QWORD *)((char *)v68 + 7) = *(_QWORD *)((char *)&v64 + 7);
        v21 = HIBYTE(v64);
        v22 = operator new(0x38uLL);
        v22[1] = 0;
        v22[2] = 0;
        v22[3] = off_24C9ABC20;
        *v22 = &off_24C9ABBD0;
        v23 = v68[0];
        v22[4] = v20;
        v22[5] = v23;
        *(_QWORD *)((char *)v22 + 47) = *(_QWORD *)((char *)v68 + 7);
        *((_BYTE *)v22 + 55) = v21;
        v68[0] = 0;
        *(_QWORD *)((char *)v68 + 7) = 0;
        v24 = (std::__shared_weak_count *)*((_QWORD *)&v62 + 1);
        *(_QWORD *)&v62 = v22 + 3;
        *((_QWORD *)&v62 + 1) = v22;
        if (v24)
        {
          p_shared_owners = (unint64_t *)&v24->__shared_owners_;
          do
            v26 = __ldaxr(p_shared_owners);
          while (__stlxr(v26 - 1, p_shared_owners));
          if (!v26)
          {
            ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
            std::__shared_weak_count::__release_weak(v24);
          }
        }
        *(_OWORD *)v65 = v60;
        *(_QWORD *)&v65[16] = v61;
        if (v61)
        {
          v27 = &v61->__shared_owners_;
          do
            v28 = __ldxr((unint64_t *)v27);
          while (__stxr(v28 + 1, (unint64_t *)v27));
        }
        v66 = v62;
        if (*((_QWORD *)&v62 + 1))
        {
          v29 = (unint64_t *)(*((_QWORD *)&v62 + 1) + 8);
          do
            v30 = __ldxr(v29);
          while (__stxr(v30 + 1, v29));
          v67 = v62;
          do
            v31 = __ldaxr(v29);
          while (__stlxr(v31 - 1, v29));
          if (!v31)
          {
            (*(void (**)(_QWORD))(**((_QWORD **)&v62 + 1) + 16))(*((_QWORD *)&v62 + 1));
            std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v62 + 1));
          }
        }
        else
        {
          v67 = v62;
        }
        if (v61)
        {
          v32 = &v61->__shared_owners_;
          do
            v33 = __ldaxr((unint64_t *)v32);
          while (__stlxr(v33 - 1, (unint64_t *)v32));
          if (!v33)
          {
            ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
            std::__shared_weak_count::__release_weak(v61);
          }
        }
        v34 = *(_QWORD *)v65;
        if (*(char *)(v67 + 31) >= 0)
          v35 = v67 + 8;
        else
          v35 = *(_QWORD *)(v67 + 8);
        v36 = _os_log_pack_fill();
        *(_DWORD *)v36 = 136315138;
        *(_QWORD *)(v36 + 4) = v35;
        v37 = operator new();
        v38 = *((unsigned __int8 *)a2 + 23);
        if ((v38 & 0x80u) == 0)
          v39 = a2;
        else
          v39 = (uint64_t *)*a2;
        if ((v38 & 0x80u) != 0)
          v38 = a2[1];
        *(_QWORD *)v37 = v34;
        *(_OWORD *)(v37 + 8) = *(_OWORD *)&v65[8];
        *(_QWORD *)&v65[8] = 0;
        *(_QWORD *)&v65[16] = 0;
        *(_OWORD *)(v37 + 24) = v66;
        v66 = 0uLL;
        *(_QWORD *)(v37 + 40) = v39;
        *(_QWORD *)(v37 + 48) = v38;
        *(_BYTE *)(v37 + 56) = type;
        __dst = 0;
        *(_QWORD *)&v60 = v37;
        (*(void (**)(_QWORD, __int128 *))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8), &v60);
        v40 = v60;
        *(_QWORD *)&v60 = 0;
        if (v40)
        {
          v41 = *(std::__shared_weak_count **)(v40 + 32);
          if (v41)
          {
            v42 = (unint64_t *)&v41->__shared_owners_;
            do
              v43 = __ldaxr(v42);
            while (__stlxr(v43 - 1, v42));
            if (!v43)
            {
              ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
              std::__shared_weak_count::__release_weak(v41);
            }
          }
          v44 = *(std::__shared_weak_count **)(v40 + 16);
          if (v44)
          {
            v45 = (unint64_t *)&v44->__shared_owners_;
            do
              v46 = __ldaxr(v45);
            while (__stlxr(v46 - 1, v45));
            if (!v46)
            {
              ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
              std::__shared_weak_count::__release_weak(v44);
            }
          }
          MEMORY[0x212BC6398](v40, 0x10F0C40B62ED6C6);
          v47 = __dst;
          __dst = 0;
          if (v47)
          {
            v48 = (std::__shared_weak_count *)v47[4];
            if (v48)
            {
              v49 = (unint64_t *)&v48->__shared_owners_;
              do
                v50 = __ldaxr(v49);
              while (__stlxr(v50 - 1, v49));
              if (!v50)
              {
                ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
                std::__shared_weak_count::__release_weak(v48);
              }
            }
            v51 = (std::__shared_weak_count *)v47[2];
            if (v51)
            {
              v52 = (unint64_t *)&v51->__shared_owners_;
              do
                v53 = __ldaxr(v52);
              while (__stlxr(v53 - 1, v52));
              if (!v53)
              {
                ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
                std::__shared_weak_count::__release_weak(v51);
              }
            }
            MEMORY[0x212BC6398](v47, 0x10F0C40B62ED6C6);
          }
        }
        v54 = (std::__shared_weak_count *)*((_QWORD *)&v66 + 1);
        if (*((_QWORD *)&v66 + 1))
        {
          v55 = (unint64_t *)(*((_QWORD *)&v66 + 1) + 8);
          do
            v56 = __ldaxr(v55);
          while (__stlxr(v56 - 1, v55));
          if (!v56)
          {
            ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
            std::__shared_weak_count::__release_weak(v54);
          }
        }
        v57 = *(std::__shared_weak_count **)&v65[16];
        if (*(_QWORD *)&v65[16])
        {
          v58 = (unint64_t *)(*(_QWORD *)&v65[16] + 8);
          do
            v59 = __ldaxr(v58);
          while (__stlxr(v59 - 1, v58));
          if (!v59)
          {
            ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
            std::__shared_weak_count::__release_weak(v57);
          }
        }
        return;
      }
    }
    memcpy(p_dst, v12, v14);
    goto LABEL_13;
  }
  os_log_type_enabled(oslog, type);
  v16 = *a5;
  *(_DWORD *)v65 = 136315138;
  *(_QWORD *)&v65[4] = v16;
  v17 = (void *)_os_log_send_and_compose_impl();
  if (v17)
    free(v17);
}

void sub_20EF9E800(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  va_list va1;
  uint64_t v12;
  uint64_t v13;
  va_list va2;

  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v10 = va_arg(va2, _QWORD);
  v12 = va_arg(va2, _QWORD);
  v13 = va_arg(va2, _QWORD);
  sub_20E86E8C4((uint64_t *)va);
  sub_20E86E8C4((uint64_t *)va1);
  sub_20E86E658((uint64_t)va2);
  _Unwind_Resume(a1);
}

void sub_20EF9E824(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  sub_20E86E658((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20EF9E838(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  void *v11;
  int v12;

  if (v12 < 0)
  {
    operator delete(v11);
    sub_20E86E658((uint64_t)&a11);
    _Unwind_Resume(a1);
  }
  sub_20E86E658((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void sub_20EF9E890(uint64_t a1, uint64_t *a2, os_log_t oslog, os_log_type_t type, const char **a5)
{
  size_t v9;
  std::__shared_weak_count_vtbl *v10;
  std::__shared_weak_count *v11;
  const char *v12;
  size_t v13;
  size_t v14;
  _QWORD *p_dst;
  const char *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  char v21;
  _QWORD *v22;
  uint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *p_shared_owners;
  unint64_t v26;
  uint64_t *v27;
  unint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t *v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  _QWORD *v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  __int128 v60;
  std::__shared_weak_count *v61;
  __int128 v62;
  _QWORD *__dst;
  __int128 v64;
  _BYTE v65[24];
  __int128 v66;
  uint64_t v67;
  _QWORD v68[3];

  v68[2] = *MEMORY[0x24BDAC8D0];
  if (a1 && *(_QWORD *)(a1 + 8))
  {
    v9 = _os_log_pack_size();
    v10 = (std::__shared_weak_count_vtbl *)operator new(v9, (std::align_val_t)8uLL);
    v11 = (std::__shared_weak_count *)operator new();
    v11->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
    v11->__shared_owners_ = 0;
    v11->__shared_weak_owners_ = 0;
    v11[1].__vftable = v10;
    *(_QWORD *)&v60 = v10;
    *((_QWORD *)&v60 + 1) = v10;
    v62 = 0uLL;
    v61 = v11;
    v12 = *a5;
    v13 = strlen(*a5);
    if (v13 >= 0x7FFFFFFFFFFFFFF8)
      sub_20E860B7C();
    v14 = v13;
    if (v13 >= 0x17)
    {
      v18 = (v13 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v13 | 7) != 0x17)
        v18 = v13 | 7;
      v19 = v18 + 1;
      p_dst = operator new(v18 + 1);
      *(_QWORD *)&v64 = v14;
      *((_QWORD *)&v64 + 1) = v19 | 0x8000000000000000;
      __dst = p_dst;
    }
    else
    {
      HIBYTE(v64) = v13;
      p_dst = &__dst;
      if (!v13)
      {
LABEL_13:
        *((_BYTE *)p_dst + v14) = 0;
        v20 = __dst;
        v68[0] = v64;
        *(_QWORD *)((char *)v68 + 7) = *(_QWORD *)((char *)&v64 + 7);
        v21 = HIBYTE(v64);
        v22 = operator new(0x38uLL);
        v22[1] = 0;
        v22[2] = 0;
        v22[3] = off_24C9ABC20;
        *v22 = &off_24C9ABBD0;
        v23 = v68[0];
        v22[4] = v20;
        v22[5] = v23;
        *(_QWORD *)((char *)v22 + 47) = *(_QWORD *)((char *)v68 + 7);
        *((_BYTE *)v22 + 55) = v21;
        v68[0] = 0;
        *(_QWORD *)((char *)v68 + 7) = 0;
        v24 = (std::__shared_weak_count *)*((_QWORD *)&v62 + 1);
        *(_QWORD *)&v62 = v22 + 3;
        *((_QWORD *)&v62 + 1) = v22;
        if (v24)
        {
          p_shared_owners = (unint64_t *)&v24->__shared_owners_;
          do
            v26 = __ldaxr(p_shared_owners);
          while (__stlxr(v26 - 1, p_shared_owners));
          if (!v26)
          {
            ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
            std::__shared_weak_count::__release_weak(v24);
          }
        }
        *(_OWORD *)v65 = v60;
        *(_QWORD *)&v65[16] = v61;
        if (v61)
        {
          v27 = &v61->__shared_owners_;
          do
            v28 = __ldxr((unint64_t *)v27);
          while (__stxr(v28 + 1, (unint64_t *)v27));
        }
        v66 = v62;
        if (*((_QWORD *)&v62 + 1))
        {
          v29 = (unint64_t *)(*((_QWORD *)&v62 + 1) + 8);
          do
            v30 = __ldxr(v29);
          while (__stxr(v30 + 1, v29));
          v67 = v62;
          do
            v31 = __ldaxr(v29);
          while (__stlxr(v31 - 1, v29));
          if (!v31)
          {
            (*(void (**)(_QWORD))(**((_QWORD **)&v62 + 1) + 16))(*((_QWORD *)&v62 + 1));
            std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v62 + 1));
          }
        }
        else
        {
          v67 = v62;
        }
        if (v61)
        {
          v32 = &v61->__shared_owners_;
          do
            v33 = __ldaxr((unint64_t *)v32);
          while (__stlxr(v33 - 1, (unint64_t *)v32));
          if (!v33)
          {
            ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
            std::__shared_weak_count::__release_weak(v61);
          }
        }
        v34 = *(_QWORD *)v65;
        if (*(char *)(v67 + 31) >= 0)
          v35 = v67 + 8;
        else
          v35 = *(_QWORD *)(v67 + 8);
        v36 = _os_log_pack_fill();
        *(_DWORD *)v36 = 136315138;
        *(_QWORD *)(v36 + 4) = v35;
        v37 = operator new();
        v38 = *((unsigned __int8 *)a2 + 23);
        if ((v38 & 0x80u) == 0)
          v39 = a2;
        else
          v39 = (uint64_t *)*a2;
        if ((v38 & 0x80u) != 0)
          v38 = a2[1];
        *(_QWORD *)v37 = v34;
        *(_OWORD *)(v37 + 8) = *(_OWORD *)&v65[8];
        *(_QWORD *)&v65[8] = 0;
        *(_QWORD *)&v65[16] = 0;
        *(_OWORD *)(v37 + 24) = v66;
        v66 = 0uLL;
        *(_QWORD *)(v37 + 40) = v39;
        *(_QWORD *)(v37 + 48) = v38;
        *(_BYTE *)(v37 + 56) = type;
        __dst = 0;
        *(_QWORD *)&v60 = v37;
        (*(void (**)(_QWORD, __int128 *))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8), &v60);
        v40 = v60;
        *(_QWORD *)&v60 = 0;
        if (v40)
        {
          v41 = *(std::__shared_weak_count **)(v40 + 32);
          if (v41)
          {
            v42 = (unint64_t *)&v41->__shared_owners_;
            do
              v43 = __ldaxr(v42);
            while (__stlxr(v43 - 1, v42));
            if (!v43)
            {
              ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
              std::__shared_weak_count::__release_weak(v41);
            }
          }
          v44 = *(std::__shared_weak_count **)(v40 + 16);
          if (v44)
          {
            v45 = (unint64_t *)&v44->__shared_owners_;
            do
              v46 = __ldaxr(v45);
            while (__stlxr(v46 - 1, v45));
            if (!v46)
            {
              ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
              std::__shared_weak_count::__release_weak(v44);
            }
          }
          MEMORY[0x212BC6398](v40, 0x10F0C40B62ED6C6);
          v47 = __dst;
          __dst = 0;
          if (v47)
          {
            v48 = (std::__shared_weak_count *)v47[4];
            if (v48)
            {
              v49 = (unint64_t *)&v48->__shared_owners_;
              do
                v50 = __ldaxr(v49);
              while (__stlxr(v50 - 1, v49));
              if (!v50)
              {
                ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
                std::__shared_weak_count::__release_weak(v48);
              }
            }
            v51 = (std::__shared_weak_count *)v47[2];
            if (v51)
            {
              v52 = (unint64_t *)&v51->__shared_owners_;
              do
                v53 = __ldaxr(v52);
              while (__stlxr(v53 - 1, v52));
              if (!v53)
              {
                ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
                std::__shared_weak_count::__release_weak(v51);
              }
            }
            MEMORY[0x212BC6398](v47, 0x10F0C40B62ED6C6);
          }
        }
        v54 = (std::__shared_weak_count *)*((_QWORD *)&v66 + 1);
        if (*((_QWORD *)&v66 + 1))
        {
          v55 = (unint64_t *)(*((_QWORD *)&v66 + 1) + 8);
          do
            v56 = __ldaxr(v55);
          while (__stlxr(v56 - 1, v55));
          if (!v56)
          {
            ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
            std::__shared_weak_count::__release_weak(v54);
          }
        }
        v57 = *(std::__shared_weak_count **)&v65[16];
        if (*(_QWORD *)&v65[16])
        {
          v58 = (unint64_t *)(*(_QWORD *)&v65[16] + 8);
          do
            v59 = __ldaxr(v58);
          while (__stlxr(v59 - 1, v58));
          if (!v59)
          {
            ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
            std::__shared_weak_count::__release_weak(v57);
          }
        }
        return;
      }
    }
    memcpy(p_dst, v12, v14);
    goto LABEL_13;
  }
  os_log_type_enabled(oslog, type);
  v16 = *a5;
  *(_DWORD *)v65 = 136315138;
  *(_QWORD *)&v65[4] = v16;
  v17 = (void *)_os_log_send_and_compose_impl();
  if (v17)
    free(v17);
}

void sub_20EF9EE04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  va_list va1;
  uint64_t v12;
  uint64_t v13;
  va_list va2;

  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v10 = va_arg(va2, _QWORD);
  v12 = va_arg(va2, _QWORD);
  v13 = va_arg(va2, _QWORD);
  sub_20E86E8C4((uint64_t *)va);
  sub_20E86E8C4((uint64_t *)va1);
  sub_20E86E658((uint64_t)va2);
  _Unwind_Resume(a1);
}

void sub_20EF9EE28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  sub_20E86E658((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20EF9EE3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  void *v11;
  int v12;

  if (v12 < 0)
  {
    operator delete(v11);
    sub_20E86E658((uint64_t)&a11);
    _Unwind_Resume(a1);
  }
  sub_20E86E658((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void sub_20EF9EE94(uint64_t a1, uint64_t *a2, os_log_t oslog, os_log_type_t type, const char **a5)
{
  size_t v9;
  std::__shared_weak_count_vtbl *v10;
  std::__shared_weak_count *v11;
  const char *v12;
  size_t v13;
  size_t v14;
  _QWORD *p_dst;
  const char *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  char v21;
  _QWORD *v22;
  uint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *p_shared_owners;
  unint64_t v26;
  uint64_t *v27;
  unint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t *v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  _QWORD *v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  __int128 v60;
  std::__shared_weak_count *v61;
  __int128 v62;
  _QWORD *__dst;
  __int128 v64;
  _BYTE v65[24];
  __int128 v66;
  uint64_t v67;
  _QWORD v68[3];

  v68[2] = *MEMORY[0x24BDAC8D0];
  if (a1 && *(_QWORD *)(a1 + 8))
  {
    v9 = _os_log_pack_size();
    v10 = (std::__shared_weak_count_vtbl *)operator new(v9, (std::align_val_t)8uLL);
    v11 = (std::__shared_weak_count *)operator new();
    v11->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
    v11->__shared_owners_ = 0;
    v11->__shared_weak_owners_ = 0;
    v11[1].__vftable = v10;
    *(_QWORD *)&v60 = v10;
    *((_QWORD *)&v60 + 1) = v10;
    v62 = 0uLL;
    v61 = v11;
    v12 = *a5;
    v13 = strlen(*a5);
    if (v13 >= 0x7FFFFFFFFFFFFFF8)
      sub_20E860B7C();
    v14 = v13;
    if (v13 >= 0x17)
    {
      v18 = (v13 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v13 | 7) != 0x17)
        v18 = v13 | 7;
      v19 = v18 + 1;
      p_dst = operator new(v18 + 1);
      *(_QWORD *)&v64 = v14;
      *((_QWORD *)&v64 + 1) = v19 | 0x8000000000000000;
      __dst = p_dst;
    }
    else
    {
      HIBYTE(v64) = v13;
      p_dst = &__dst;
      if (!v13)
      {
LABEL_13:
        *((_BYTE *)p_dst + v14) = 0;
        v20 = __dst;
        v68[0] = v64;
        *(_QWORD *)((char *)v68 + 7) = *(_QWORD *)((char *)&v64 + 7);
        v21 = HIBYTE(v64);
        v22 = operator new(0x38uLL);
        v22[1] = 0;
        v22[2] = 0;
        v22[3] = off_24C9ABC20;
        *v22 = &off_24C9ABBD0;
        v23 = v68[0];
        v22[4] = v20;
        v22[5] = v23;
        *(_QWORD *)((char *)v22 + 47) = *(_QWORD *)((char *)v68 + 7);
        *((_BYTE *)v22 + 55) = v21;
        v68[0] = 0;
        *(_QWORD *)((char *)v68 + 7) = 0;
        v24 = (std::__shared_weak_count *)*((_QWORD *)&v62 + 1);
        *(_QWORD *)&v62 = v22 + 3;
        *((_QWORD *)&v62 + 1) = v22;
        if (v24)
        {
          p_shared_owners = (unint64_t *)&v24->__shared_owners_;
          do
            v26 = __ldaxr(p_shared_owners);
          while (__stlxr(v26 - 1, p_shared_owners));
          if (!v26)
          {
            ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
            std::__shared_weak_count::__release_weak(v24);
          }
        }
        *(_OWORD *)v65 = v60;
        *(_QWORD *)&v65[16] = v61;
        if (v61)
        {
          v27 = &v61->__shared_owners_;
          do
            v28 = __ldxr((unint64_t *)v27);
          while (__stxr(v28 + 1, (unint64_t *)v27));
        }
        v66 = v62;
        if (*((_QWORD *)&v62 + 1))
        {
          v29 = (unint64_t *)(*((_QWORD *)&v62 + 1) + 8);
          do
            v30 = __ldxr(v29);
          while (__stxr(v30 + 1, v29));
          v67 = v62;
          do
            v31 = __ldaxr(v29);
          while (__stlxr(v31 - 1, v29));
          if (!v31)
          {
            (*(void (**)(_QWORD))(**((_QWORD **)&v62 + 1) + 16))(*((_QWORD *)&v62 + 1));
            std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v62 + 1));
          }
        }
        else
        {
          v67 = v62;
        }
        if (v61)
        {
          v32 = &v61->__shared_owners_;
          do
            v33 = __ldaxr((unint64_t *)v32);
          while (__stlxr(v33 - 1, (unint64_t *)v32));
          if (!v33)
          {
            ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
            std::__shared_weak_count::__release_weak(v61);
          }
        }
        v34 = *(_QWORD *)v65;
        if (*(char *)(v67 + 31) >= 0)
          v35 = v67 + 8;
        else
          v35 = *(_QWORD *)(v67 + 8);
        v36 = _os_log_pack_fill();
        *(_DWORD *)v36 = 136315138;
        *(_QWORD *)(v36 + 4) = v35;
        v37 = operator new();
        v38 = *((unsigned __int8 *)a2 + 23);
        if ((v38 & 0x80u) == 0)
          v39 = a2;
        else
          v39 = (uint64_t *)*a2;
        if ((v38 & 0x80u) != 0)
          v38 = a2[1];
        *(_QWORD *)v37 = v34;
        *(_OWORD *)(v37 + 8) = *(_OWORD *)&v65[8];
        *(_QWORD *)&v65[8] = 0;
        *(_QWORD *)&v65[16] = 0;
        *(_OWORD *)(v37 + 24) = v66;
        v66 = 0uLL;
        *(_QWORD *)(v37 + 40) = v39;
        *(_QWORD *)(v37 + 48) = v38;
        *(_BYTE *)(v37 + 56) = type;
        __dst = 0;
        *(_QWORD *)&v60 = v37;
        (*(void (**)(_QWORD, __int128 *))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8), &v60);
        v40 = v60;
        *(_QWORD *)&v60 = 0;
        if (v40)
        {
          v41 = *(std::__shared_weak_count **)(v40 + 32);
          if (v41)
          {
            v42 = (unint64_t *)&v41->__shared_owners_;
            do
              v43 = __ldaxr(v42);
            while (__stlxr(v43 - 1, v42));
            if (!v43)
            {
              ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
              std::__shared_weak_count::__release_weak(v41);
            }
          }
          v44 = *(std::__shared_weak_count **)(v40 + 16);
          if (v44)
          {
            v45 = (unint64_t *)&v44->__shared_owners_;
            do
              v46 = __ldaxr(v45);
            while (__stlxr(v46 - 1, v45));
            if (!v46)
            {
              ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
              std::__shared_weak_count::__release_weak(v44);
            }
          }
          MEMORY[0x212BC6398](v40, 0x10F0C40B62ED6C6);
          v47 = __dst;
          __dst = 0;
          if (v47)
          {
            v48 = (std::__shared_weak_count *)v47[4];
            if (v48)
            {
              v49 = (unint64_t *)&v48->__shared_owners_;
              do
                v50 = __ldaxr(v49);
              while (__stlxr(v50 - 1, v49));
              if (!v50)
              {
                ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
                std::__shared_weak_count::__release_weak(v48);
              }
            }
            v51 = (std::__shared_weak_count *)v47[2];
            if (v51)
            {
              v52 = (unint64_t *)&v51->__shared_owners_;
              do
                v53 = __ldaxr(v52);
              while (__stlxr(v53 - 1, v52));
              if (!v53)
              {
                ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
                std::__shared_weak_count::__release_weak(v51);
              }
            }
            MEMORY[0x212BC6398](v47, 0x10F0C40B62ED6C6);
          }
        }
        v54 = (std::__shared_weak_count *)*((_QWORD *)&v66 + 1);
        if (*((_QWORD *)&v66 + 1))
        {
          v55 = (unint64_t *)(*((_QWORD *)&v66 + 1) + 8);
          do
            v56 = __ldaxr(v55);
          while (__stlxr(v56 - 1, v55));
          if (!v56)
          {
            ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
            std::__shared_weak_count::__release_weak(v54);
          }
        }
        v57 = *(std::__shared_weak_count **)&v65[16];
        if (*(_QWORD *)&v65[16])
        {
          v58 = (unint64_t *)(*(_QWORD *)&v65[16] + 8);
          do
            v59 = __ldaxr(v58);
          while (__stlxr(v59 - 1, v58));
          if (!v59)
          {
            ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
            std::__shared_weak_count::__release_weak(v57);
          }
        }
        return;
      }
    }
    memcpy(p_dst, v12, v14);
    goto LABEL_13;
  }
  os_log_type_enabled(oslog, type);
  v16 = *a5;
  *(_DWORD *)v65 = 136315138;
  *(_QWORD *)&v65[4] = v16;
  v17 = (void *)_os_log_send_and_compose_impl();
  if (v17)
    free(v17);
}

void sub_20EF9F408(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  va_list va1;
  uint64_t v12;
  uint64_t v13;
  va_list va2;

  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v10 = va_arg(va2, _QWORD);
  v12 = va_arg(va2, _QWORD);
  v13 = va_arg(va2, _QWORD);
  sub_20E86E8C4((uint64_t *)va);
  sub_20E86E8C4((uint64_t *)va1);
  sub_20E86E658((uint64_t)va2);
  _Unwind_Resume(a1);
}

void sub_20EF9F42C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  sub_20E86E658((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20EF9F440(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  void *v11;
  int v12;

  if (v12 < 0)
  {
    operator delete(v11);
    sub_20E86E658((uint64_t)&a11);
    _Unwind_Resume(a1);
  }
  sub_20E86E658((uint64_t)&a11);
  _Unwind_Resume(a1);
}

_DWORD *sub_20EF9F498(_DWORD ***a1)
{
  return sub_20EAA4B90(**a1, (char *)(*a1)[1]);
}

void sub_20EF9F4A4(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  char v5;
  void *v6;
  const char *v7;
  size_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  void *v14;
  _BYTE v15[15];
  char v16;
  void *__p[2];
  unint64_t v18;
  _QWORD v19[3];

  v19[2] = *MEMORY[0x24BDAC8D0];
  v2 = *a1;
  v3 = *(_QWORD *)(*a1 + 16);
  *(_QWORD *)((char *)v19 + 7) = *(_QWORD *)(a2 + 15);
  v4 = *(void **)a2;
  v19[0] = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 23);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v14 = v4;
  *(_QWORD *)v15 = v19[0];
  *(_QWORD *)&v15[7] = *(_QWORD *)((char *)v19 + 7);
  v16 = v5;
  memset(v19, 0, 15);
  v6 = __p;
  v7 = *(const char **)(v2 + 24);
  v8 = strlen(v7);
  if (v8 >= 0x7FFFFFFFFFFFFFF8)
    sub_20E860B7C();
  v9 = (void *)v8;
  if (v8 >= 0x17)
  {
    v11 = (v8 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v8 | 7) != 0x17)
      v11 = v8 | 7;
    v12 = v11 + 1;
    v6 = operator new(v11 + 1);
    __p[1] = v9;
    v18 = v12 | 0x8000000000000000;
    __p[0] = v6;
LABEL_9:
    memmove(v6, v7, (size_t)v9);
    *((_BYTE *)v9 + (_QWORD)v6) = 0;
    v10 = *(unsigned int *)(v3 + 24);
    if ((_DWORD)v10 == -1)
      goto LABEL_11;
    goto LABEL_10;
  }
  HIBYTE(v18) = v8;
  if (v8)
    goto LABEL_9;
  LOBYTE(__p[0]) = 0;
  v10 = *(unsigned int *)(v3 + 24);
  if ((_DWORD)v10 != -1)
LABEL_10:
    ((void (*)(char *, uint64_t))off_24C9F20A8[v10])(&v13, v3);
LABEL_11:
  *(_DWORD *)(v3 + 24) = -1;
  sub_20E877C80((_QWORD *)v3, (uint64_t)&v14, 2uLL);
  *(_DWORD *)(v3 + 24) = 2;
  if ((SHIBYTE(v18) & 0x80000000) == 0)
  {
    if ((v16 & 0x80000000) == 0)
      return;
LABEL_15:
    operator delete(v14);
    return;
  }
  operator delete(__p[0]);
  if (v16 < 0)
    goto LABEL_15;
}

void sub_20EF9F65C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a2)
    sub_20E860DA4(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_20EF9F6A0(uint64_t a1, void **a2)
{
  const void *v3;
  _BYTE *v4;
  _QWORD *v5;
  size_t v6;
  size_t v7;
  void *v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  size_t v18;
  size_t v19;
  void *v20;
  char *v21;
  void **v22;
  void **v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  void **v27;

  v3 = *(const void **)(*(_QWORD *)a1 + 32);
  v5 = a2[1];
  v4 = a2[2];
  if (v5 < (_QWORD *)v4)
  {
    v6 = strlen(*(const char **)(*(_QWORD *)a1 + 32));
    if (v6 > 0x7FFFFFFFFFFFFFF7)
      sub_20E860B7C();
    v7 = v6;
    if (v6 >= 0x17)
    {
      v14 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v6 | 7) != 0x17)
        v14 = v6 | 7;
      v15 = v14 + 1;
      v8 = operator new(v14 + 1);
      v5[1] = v7;
      v5[2] = v15 | 0x8000000000000000;
      *v5 = v8;
    }
    else
    {
      *((_BYTE *)v5 + 23) = v6;
      v8 = v5;
      if (!v6)
        goto LABEL_19;
    }
    memmove(v8, v3, v7);
LABEL_19:
    *((_BYTE *)v8 + v7) = 0;
    v16 = (char *)(v5 + 3);
    a2[1] = v5 + 3;
    goto LABEL_39;
  }
  v9 = 0xAAAAAAAAAAAAAAABLL * (((char *)v5 - (_BYTE *)*a2) >> 3);
  if (v9 + 1 > 0xAAAAAAAAAAAAAAALL)
    sub_20E867F44();
  v10 = 0xAAAAAAAAAAAAAAABLL * ((v4 - (_BYTE *)*a2) >> 3);
  v11 = 2 * v10;
  if (2 * v10 <= v9 + 1)
    v11 = v9 + 1;
  if (v10 >= 0x555555555555555)
    v12 = 0xAAAAAAAAAAAAAAALL;
  else
    v12 = v11;
  if (v12)
  {
    if (v12 > 0xAAAAAAAAAAAAAAALL)
      sub_20E877A38();
    v13 = (char *)operator new(24 * v12);
  }
  else
  {
    v13 = 0;
  }
  v17 = &v13[24 * v9];
  v18 = strlen((const char *)v3);
  if (v18 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  v19 = v18;
  if (v18 >= 0x17)
  {
    v24 = (v18 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v18 | 7) != 0x17)
      v24 = v18 | 7;
    v25 = v24 + 1;
    v20 = operator new(v24 + 1);
    *((_QWORD *)v17 + 1) = v19;
    *((_QWORD *)v17 + 2) = v25 | 0x8000000000000000;
    *(_QWORD *)v17 = v20;
  }
  else
  {
    v17[23] = v18;
    v20 = v17;
    if (!v18)
    {
      v21 = &v13[24 * v12];
      *v17 = 0;
      v16 = v17 + 24;
      v22 = (void **)*a2;
      v23 = (void **)a2[1];
      if (v23 == *a2)
        goto LABEL_36;
      do
      {
LABEL_30:
        v26 = *(_OWORD *)(v23 - 3);
        *((_QWORD *)v17 - 1) = *(v23 - 1);
        *(_OWORD *)(v17 - 24) = v26;
        v17 -= 24;
        *(v23 - 2) = 0;
        *(v23 - 1) = 0;
        *(v23 - 3) = 0;
        v23 -= 3;
      }
      while (v23 != v22);
      v23 = (void **)*a2;
      v27 = (void **)a2[1];
      *a2 = v17;
      a2[1] = v16;
      a2[2] = v21;
      while (v27 != v23)
      {
        if (*((char *)v27 - 1) < 0)
          operator delete(*(v27 - 3));
        v27 -= 3;
      }
      goto LABEL_37;
    }
  }
  memmove(v20, v3, v19);
  v21 = &v13[24 * v12];
  *((_BYTE *)v20 + v19) = 0;
  v16 = v17 + 24;
  v22 = (void **)*a2;
  v23 = (void **)a2[1];
  if (v23 != *a2)
    goto LABEL_30;
LABEL_36:
  *a2 = v17;
  a2[1] = v16;
  a2[2] = v21;
LABEL_37:
  if (v23)
    operator delete(v23);
LABEL_39:
  a2[1] = v16;
}

void sub_20EF9F930(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

void sub_20EF9F948(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_20EF9F950(uint64_t a1, uint64_t *a2, os_log_t oslog, os_log_type_t type, const char **a5)
{
  size_t v9;
  std::__shared_weak_count_vtbl *v10;
  std::__shared_weak_count *v11;
  const char *v12;
  size_t v13;
  size_t v14;
  _QWORD *p_dst;
  const char *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  char v21;
  _QWORD *v22;
  uint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *p_shared_owners;
  unint64_t v26;
  uint64_t *v27;
  unint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t *v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  _QWORD *v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  __int128 v60;
  std::__shared_weak_count *v61;
  __int128 v62;
  _QWORD *__dst;
  __int128 v64;
  _BYTE v65[24];
  __int128 v66;
  uint64_t v67;
  _QWORD v68[3];

  v68[2] = *MEMORY[0x24BDAC8D0];
  if (a1 && *(_QWORD *)(a1 + 8))
  {
    v9 = _os_log_pack_size();
    v10 = (std::__shared_weak_count_vtbl *)operator new(v9, (std::align_val_t)8uLL);
    v11 = (std::__shared_weak_count *)operator new();
    v11->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
    v11->__shared_owners_ = 0;
    v11->__shared_weak_owners_ = 0;
    v11[1].__vftable = v10;
    *(_QWORD *)&v60 = v10;
    *((_QWORD *)&v60 + 1) = v10;
    v62 = 0uLL;
    v61 = v11;
    v12 = *a5;
    v13 = strlen(*a5);
    if (v13 >= 0x7FFFFFFFFFFFFFF8)
      sub_20E860B7C();
    v14 = v13;
    if (v13 >= 0x17)
    {
      v18 = (v13 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v13 | 7) != 0x17)
        v18 = v13 | 7;
      v19 = v18 + 1;
      p_dst = operator new(v18 + 1);
      *(_QWORD *)&v64 = v14;
      *((_QWORD *)&v64 + 1) = v19 | 0x8000000000000000;
      __dst = p_dst;
    }
    else
    {
      HIBYTE(v64) = v13;
      p_dst = &__dst;
      if (!v13)
      {
LABEL_13:
        *((_BYTE *)p_dst + v14) = 0;
        v20 = __dst;
        v68[0] = v64;
        *(_QWORD *)((char *)v68 + 7) = *(_QWORD *)((char *)&v64 + 7);
        v21 = HIBYTE(v64);
        v22 = operator new(0x38uLL);
        v22[1] = 0;
        v22[2] = 0;
        v22[3] = off_24C9ABC20;
        *v22 = &off_24C9ABBD0;
        v23 = v68[0];
        v22[4] = v20;
        v22[5] = v23;
        *(_QWORD *)((char *)v22 + 47) = *(_QWORD *)((char *)v68 + 7);
        *((_BYTE *)v22 + 55) = v21;
        v68[0] = 0;
        *(_QWORD *)((char *)v68 + 7) = 0;
        v24 = (std::__shared_weak_count *)*((_QWORD *)&v62 + 1);
        *(_QWORD *)&v62 = v22 + 3;
        *((_QWORD *)&v62 + 1) = v22;
        if (v24)
        {
          p_shared_owners = (unint64_t *)&v24->__shared_owners_;
          do
            v26 = __ldaxr(p_shared_owners);
          while (__stlxr(v26 - 1, p_shared_owners));
          if (!v26)
          {
            ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
            std::__shared_weak_count::__release_weak(v24);
          }
        }
        *(_OWORD *)v65 = v60;
        *(_QWORD *)&v65[16] = v61;
        if (v61)
        {
          v27 = &v61->__shared_owners_;
          do
            v28 = __ldxr((unint64_t *)v27);
          while (__stxr(v28 + 1, (unint64_t *)v27));
        }
        v66 = v62;
        if (*((_QWORD *)&v62 + 1))
        {
          v29 = (unint64_t *)(*((_QWORD *)&v62 + 1) + 8);
          do
            v30 = __ldxr(v29);
          while (__stxr(v30 + 1, v29));
          v67 = v62;
          do
            v31 = __ldaxr(v29);
          while (__stlxr(v31 - 1, v29));
          if (!v31)
          {
            (*(void (**)(_QWORD))(**((_QWORD **)&v62 + 1) + 16))(*((_QWORD *)&v62 + 1));
            std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v62 + 1));
          }
        }
        else
        {
          v67 = v62;
        }
        if (v61)
        {
          v32 = &v61->__shared_owners_;
          do
            v33 = __ldaxr((unint64_t *)v32);
          while (__stlxr(v33 - 1, (unint64_t *)v32));
          if (!v33)
          {
            ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
            std::__shared_weak_count::__release_weak(v61);
          }
        }
        v34 = *(_QWORD *)v65;
        if (*(char *)(v67 + 31) >= 0)
          v35 = v67 + 8;
        else
          v35 = *(_QWORD *)(v67 + 8);
        v36 = _os_log_pack_fill();
        *(_DWORD *)v36 = 136315138;
        *(_QWORD *)(v36 + 4) = v35;
        v37 = operator new();
        v38 = *((unsigned __int8 *)a2 + 23);
        if ((v38 & 0x80u) == 0)
          v39 = a2;
        else
          v39 = (uint64_t *)*a2;
        if ((v38 & 0x80u) != 0)
          v38 = a2[1];
        *(_QWORD *)v37 = v34;
        *(_OWORD *)(v37 + 8) = *(_OWORD *)&v65[8];
        *(_QWORD *)&v65[8] = 0;
        *(_QWORD *)&v65[16] = 0;
        *(_OWORD *)(v37 + 24) = v66;
        v66 = 0uLL;
        *(_QWORD *)(v37 + 40) = v39;
        *(_QWORD *)(v37 + 48) = v38;
        *(_BYTE *)(v37 + 56) = type;
        __dst = 0;
        *(_QWORD *)&v60 = v37;
        (*(void (**)(_QWORD, __int128 *))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8), &v60);
        v40 = v60;
        *(_QWORD *)&v60 = 0;
        if (v40)
        {
          v41 = *(std::__shared_weak_count **)(v40 + 32);
          if (v41)
          {
            v42 = (unint64_t *)&v41->__shared_owners_;
            do
              v43 = __ldaxr(v42);
            while (__stlxr(v43 - 1, v42));
            if (!v43)
            {
              ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
              std::__shared_weak_count::__release_weak(v41);
            }
          }
          v44 = *(std::__shared_weak_count **)(v40 + 16);
          if (v44)
          {
            v45 = (unint64_t *)&v44->__shared_owners_;
            do
              v46 = __ldaxr(v45);
            while (__stlxr(v46 - 1, v45));
            if (!v46)
            {
              ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
              std::__shared_weak_count::__release_weak(v44);
            }
          }
          MEMORY[0x212BC6398](v40, 0x10F0C40B62ED6C6);
          v47 = __dst;
          __dst = 0;
          if (v47)
          {
            v48 = (std::__shared_weak_count *)v47[4];
            if (v48)
            {
              v49 = (unint64_t *)&v48->__shared_owners_;
              do
                v50 = __ldaxr(v49);
              while (__stlxr(v50 - 1, v49));
              if (!v50)
              {
                ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
                std::__shared_weak_count::__release_weak(v48);
              }
            }
            v51 = (std::__shared_weak_count *)v47[2];
            if (v51)
            {
              v52 = (unint64_t *)&v51->__shared_owners_;
              do
                v53 = __ldaxr(v52);
              while (__stlxr(v53 - 1, v52));
              if (!v53)
              {
                ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
                std::__shared_weak_count::__release_weak(v51);
              }
            }
            MEMORY[0x212BC6398](v47, 0x10F0C40B62ED6C6);
          }
        }
        v54 = (std::__shared_weak_count *)*((_QWORD *)&v66 + 1);
        if (*((_QWORD *)&v66 + 1))
        {
          v55 = (unint64_t *)(*((_QWORD *)&v66 + 1) + 8);
          do
            v56 = __ldaxr(v55);
          while (__stlxr(v56 - 1, v55));
          if (!v56)
          {
            ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
            std::__shared_weak_count::__release_weak(v54);
          }
        }
        v57 = *(std::__shared_weak_count **)&v65[16];
        if (*(_QWORD *)&v65[16])
        {
          v58 = (unint64_t *)(*(_QWORD *)&v65[16] + 8);
          do
            v59 = __ldaxr(v58);
          while (__stlxr(v59 - 1, v58));
          if (!v59)
          {
            ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
            std::__shared_weak_count::__release_weak(v57);
          }
        }
        return;
      }
    }
    memcpy(p_dst, v12, v14);
    goto LABEL_13;
  }
  os_log_type_enabled(oslog, type);
  v16 = *a5;
  *(_DWORD *)v65 = 136315138;
  *(_QWORD *)&v65[4] = v16;
  v17 = (void *)_os_log_send_and_compose_impl();
  if (v17)
    free(v17);
}

void sub_20EF9FEC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  va_list va1;
  uint64_t v12;
  uint64_t v13;
  va_list va2;

  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v10 = va_arg(va2, _QWORD);
  v12 = va_arg(va2, _QWORD);
  v13 = va_arg(va2, _QWORD);
  sub_20E86E8C4((uint64_t *)va);
  sub_20E86E8C4((uint64_t *)va1);
  sub_20E86E658((uint64_t)va2);
  _Unwind_Resume(a1);
}

void sub_20EF9FEE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  sub_20E86E658((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20EF9FEFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  void *v11;
  int v12;

  if (v12 < 0)
  {
    operator delete(v11);
    sub_20E86E658((uint64_t)&a11);
    _Unwind_Resume(a1);
  }
  sub_20E86E658((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void sub_20EF9FF54(uint64_t a1, uint64_t *a2, os_log_t oslog, os_log_type_t type, const char **a5)
{
  size_t v9;
  std::__shared_weak_count_vtbl *v10;
  std::__shared_weak_count *v11;
  const char *v12;
  size_t v13;
  size_t v14;
  _QWORD *p_dst;
  const char *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  char v21;
  _QWORD *v22;
  uint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *p_shared_owners;
  unint64_t v26;
  uint64_t *v27;
  unint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t *v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  _QWORD *v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  __int128 v60;
  std::__shared_weak_count *v61;
  __int128 v62;
  _QWORD *__dst;
  __int128 v64;
  _BYTE v65[24];
  __int128 v66;
  uint64_t v67;
  _QWORD v68[3];

  v68[2] = *MEMORY[0x24BDAC8D0];
  if (a1 && *(_QWORD *)(a1 + 8))
  {
    v9 = _os_log_pack_size();
    v10 = (std::__shared_weak_count_vtbl *)operator new(v9, (std::align_val_t)8uLL);
    v11 = (std::__shared_weak_count *)operator new();
    v11->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
    v11->__shared_owners_ = 0;
    v11->__shared_weak_owners_ = 0;
    v11[1].__vftable = v10;
    *(_QWORD *)&v60 = v10;
    *((_QWORD *)&v60 + 1) = v10;
    v62 = 0uLL;
    v61 = v11;
    v12 = *a5;
    v13 = strlen(*a5);
    if (v13 >= 0x7FFFFFFFFFFFFFF8)
      sub_20E860B7C();
    v14 = v13;
    if (v13 >= 0x17)
    {
      v18 = (v13 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v13 | 7) != 0x17)
        v18 = v13 | 7;
      v19 = v18 + 1;
      p_dst = operator new(v18 + 1);
      *(_QWORD *)&v64 = v14;
      *((_QWORD *)&v64 + 1) = v19 | 0x8000000000000000;
      __dst = p_dst;
    }
    else
    {
      HIBYTE(v64) = v13;
      p_dst = &__dst;
      if (!v13)
      {
LABEL_13:
        *((_BYTE *)p_dst + v14) = 0;
        v20 = __dst;
        v68[0] = v64;
        *(_QWORD *)((char *)v68 + 7) = *(_QWORD *)((char *)&v64 + 7);
        v21 = HIBYTE(v64);
        v22 = operator new(0x38uLL);
        v22[1] = 0;
        v22[2] = 0;
        v22[3] = off_24C9ABC20;
        *v22 = &off_24C9ABBD0;
        v23 = v68[0];
        v22[4] = v20;
        v22[5] = v23;
        *(_QWORD *)((char *)v22 + 47) = *(_QWORD *)((char *)v68 + 7);
        *((_BYTE *)v22 + 55) = v21;
        v68[0] = 0;
        *(_QWORD *)((char *)v68 + 7) = 0;
        v24 = (std::__shared_weak_count *)*((_QWORD *)&v62 + 1);
        *(_QWORD *)&v62 = v22 + 3;
        *((_QWORD *)&v62 + 1) = v22;
        if (v24)
        {
          p_shared_owners = (unint64_t *)&v24->__shared_owners_;
          do
            v26 = __ldaxr(p_shared_owners);
          while (__stlxr(v26 - 1, p_shared_owners));
          if (!v26)
          {
            ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
            std::__shared_weak_count::__release_weak(v24);
          }
        }
        *(_OWORD *)v65 = v60;
        *(_QWORD *)&v65[16] = v61;
        if (v61)
        {
          v27 = &v61->__shared_owners_;
          do
            v28 = __ldxr((unint64_t *)v27);
          while (__stxr(v28 + 1, (unint64_t *)v27));
        }
        v66 = v62;
        if (*((_QWORD *)&v62 + 1))
        {
          v29 = (unint64_t *)(*((_QWORD *)&v62 + 1) + 8);
          do
            v30 = __ldxr(v29);
          while (__stxr(v30 + 1, v29));
          v67 = v62;
          do
            v31 = __ldaxr(v29);
          while (__stlxr(v31 - 1, v29));
          if (!v31)
          {
            (*(void (**)(_QWORD))(**((_QWORD **)&v62 + 1) + 16))(*((_QWORD *)&v62 + 1));
            std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v62 + 1));
          }
        }
        else
        {
          v67 = v62;
        }
        if (v61)
        {
          v32 = &v61->__shared_owners_;
          do
            v33 = __ldaxr((unint64_t *)v32);
          while (__stlxr(v33 - 1, (unint64_t *)v32));
          if (!v33)
          {
            ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
            std::__shared_weak_count::__release_weak(v61);
          }
        }
        v34 = *(_QWORD *)v65;
        if (*(char *)(v67 + 31) >= 0)
          v35 = v67 + 8;
        else
          v35 = *(_QWORD *)(v67 + 8);
        v36 = _os_log_pack_fill();
        *(_DWORD *)v36 = 136315138;
        *(_QWORD *)(v36 + 4) = v35;
        v37 = operator new();
        v38 = *((unsigned __int8 *)a2 + 23);
        if ((v38 & 0x80u) == 0)
          v39 = a2;
        else
          v39 = (uint64_t *)*a2;
        if ((v38 & 0x80u) != 0)
          v38 = a2[1];
        *(_QWORD *)v37 = v34;
        *(_OWORD *)(v37 + 8) = *(_OWORD *)&v65[8];
        *(_QWORD *)&v65[8] = 0;
        *(_QWORD *)&v65[16] = 0;
        *(_OWORD *)(v37 + 24) = v66;
        v66 = 0uLL;
        *(_QWORD *)(v37 + 40) = v39;
        *(_QWORD *)(v37 + 48) = v38;
        *(_BYTE *)(v37 + 56) = type;
        __dst = 0;
        *(_QWORD *)&v60 = v37;
        (*(void (**)(_QWORD, __int128 *))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8), &v60);
        v40 = v60;
        *(_QWORD *)&v60 = 0;
        if (v40)
        {
          v41 = *(std::__shared_weak_count **)(v40 + 32);
          if (v41)
          {
            v42 = (unint64_t *)&v41->__shared_owners_;
            do
              v43 = __ldaxr(v42);
            while (__stlxr(v43 - 1, v42));
            if (!v43)
            {
              ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
              std::__shared_weak_count::__release_weak(v41);
            }
          }
          v44 = *(std::__shared_weak_count **)(v40 + 16);
          if (v44)
          {
            v45 = (unint64_t *)&v44->__shared_owners_;
            do
              v46 = __ldaxr(v45);
            while (__stlxr(v46 - 1, v45));
            if (!v46)
            {
              ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
              std::__shared_weak_count::__release_weak(v44);
            }
          }
          MEMORY[0x212BC6398](v40, 0x10F0C40B62ED6C6);
          v47 = __dst;
          __dst = 0;
          if (v47)
          {
            v48 = (std::__shared_weak_count *)v47[4];
            if (v48)
            {
              v49 = (unint64_t *)&v48->__shared_owners_;
              do
                v50 = __ldaxr(v49);
              while (__stlxr(v50 - 1, v49));
              if (!v50)
              {
                ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
                std::__shared_weak_count::__release_weak(v48);
              }
            }
            v51 = (std::__shared_weak_count *)v47[2];
            if (v51)
            {
              v52 = (unint64_t *)&v51->__shared_owners_;
              do
                v53 = __ldaxr(v52);
              while (__stlxr(v53 - 1, v52));
              if (!v53)
              {
                ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
                std::__shared_weak_count::__release_weak(v51);
              }
            }
            MEMORY[0x212BC6398](v47, 0x10F0C40B62ED6C6);
          }
        }
        v54 = (std::__shared_weak_count *)*((_QWORD *)&v66 + 1);
        if (*((_QWORD *)&v66 + 1))
        {
          v55 = (unint64_t *)(*((_QWORD *)&v66 + 1) + 8);
          do
            v56 = __ldaxr(v55);
          while (__stlxr(v56 - 1, v55));
          if (!v56)
          {
            ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
            std::__shared_weak_count::__release_weak(v54);
          }
        }
        v57 = *(std::__shared_weak_count **)&v65[16];
        if (*(_QWORD *)&v65[16])
        {
          v58 = (unint64_t *)(*(_QWORD *)&v65[16] + 8);
          do
            v59 = __ldaxr(v58);
          while (__stlxr(v59 - 1, v58));
          if (!v59)
          {
            ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
            std::__shared_weak_count::__release_weak(v57);
          }
        }
        return;
      }
    }
    memcpy(p_dst, v12, v14);
    goto LABEL_13;
  }
  os_log_type_enabled(oslog, type);
  v16 = *a5;
  *(_DWORD *)v65 = 136315138;
  *(_QWORD *)&v65[4] = v16;
  v17 = (void *)_os_log_send_and_compose_impl();
  if (v17)
    free(v17);
}

void sub_20EFA04C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  va_list va1;
  uint64_t v12;
  uint64_t v13;
  va_list va2;

  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v10 = va_arg(va2, _QWORD);
  v12 = va_arg(va2, _QWORD);
  v13 = va_arg(va2, _QWORD);
  sub_20E86E8C4((uint64_t *)va);
  sub_20E86E8C4((uint64_t *)va1);
  sub_20E86E658((uint64_t)va2);
  _Unwind_Resume(a1);
}

void sub_20EFA04EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  sub_20E86E658((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20EFA0500(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  void *v11;
  int v12;

  if (v12 < 0)
  {
    operator delete(v11);
    sub_20E86E658((uint64_t)&a11);
    _Unwind_Resume(a1);
  }
  sub_20E86E658((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void sub_20EFA0558(uint64_t a1, uint64_t *a2, os_log_t oslog, os_log_type_t type, const char **a5)
{
  size_t v9;
  std::__shared_weak_count_vtbl *v10;
  std::__shared_weak_count *v11;
  const char *v12;
  size_t v13;
  size_t v14;
  _QWORD *p_dst;
  const char *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  char v21;
  _QWORD *v22;
  uint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *p_shared_owners;
  unint64_t v26;
  uint64_t *v27;
  unint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t *v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  _QWORD *v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  __int128 v60;
  std::__shared_weak_count *v61;
  __int128 v62;
  _QWORD *__dst;
  __int128 v64;
  _BYTE v65[24];
  __int128 v66;
  uint64_t v67;
  _QWORD v68[3];

  v68[2] = *MEMORY[0x24BDAC8D0];
  if (a1 && *(_QWORD *)(a1 + 8))
  {
    v9 = _os_log_pack_size();
    v10 = (std::__shared_weak_count_vtbl *)operator new(v9, (std::align_val_t)8uLL);
    v11 = (std::__shared_weak_count *)operator new();
    v11->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
    v11->__shared_owners_ = 0;
    v11->__shared_weak_owners_ = 0;
    v11[1].__vftable = v10;
    *(_QWORD *)&v60 = v10;
    *((_QWORD *)&v60 + 1) = v10;
    v62 = 0uLL;
    v61 = v11;
    v12 = *a5;
    v13 = strlen(*a5);
    if (v13 >= 0x7FFFFFFFFFFFFFF8)
      sub_20E860B7C();
    v14 = v13;
    if (v13 >= 0x17)
    {
      v18 = (v13 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v13 | 7) != 0x17)
        v18 = v13 | 7;
      v19 = v18 + 1;
      p_dst = operator new(v18 + 1);
      *(_QWORD *)&v64 = v14;
      *((_QWORD *)&v64 + 1) = v19 | 0x8000000000000000;
      __dst = p_dst;
    }
    else
    {
      HIBYTE(v64) = v13;
      p_dst = &__dst;
      if (!v13)
      {
LABEL_13:
        *((_BYTE *)p_dst + v14) = 0;
        v20 = __dst;
        v68[0] = v64;
        *(_QWORD *)((char *)v68 + 7) = *(_QWORD *)((char *)&v64 + 7);
        v21 = HIBYTE(v64);
        v22 = operator new(0x38uLL);
        v22[1] = 0;
        v22[2] = 0;
        v22[3] = off_24C9ABC20;
        *v22 = &off_24C9ABBD0;
        v23 = v68[0];
        v22[4] = v20;
        v22[5] = v23;
        *(_QWORD *)((char *)v22 + 47) = *(_QWORD *)((char *)v68 + 7);
        *((_BYTE *)v22 + 55) = v21;
        v68[0] = 0;
        *(_QWORD *)((char *)v68 + 7) = 0;
        v24 = (std::__shared_weak_count *)*((_QWORD *)&v62 + 1);
        *(_QWORD *)&v62 = v22 + 3;
        *((_QWORD *)&v62 + 1) = v22;
        if (v24)
        {
          p_shared_owners = (unint64_t *)&v24->__shared_owners_;
          do
            v26 = __ldaxr(p_shared_owners);
          while (__stlxr(v26 - 1, p_shared_owners));
          if (!v26)
          {
            ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
            std::__shared_weak_count::__release_weak(v24);
          }
        }
        *(_OWORD *)v65 = v60;
        *(_QWORD *)&v65[16] = v61;
        if (v61)
        {
          v27 = &v61->__shared_owners_;
          do
            v28 = __ldxr((unint64_t *)v27);
          while (__stxr(v28 + 1, (unint64_t *)v27));
        }
        v66 = v62;
        if (*((_QWORD *)&v62 + 1))
        {
          v29 = (unint64_t *)(*((_QWORD *)&v62 + 1) + 8);
          do
            v30 = __ldxr(v29);
          while (__stxr(v30 + 1, v29));
          v67 = v62;
          do
            v31 = __ldaxr(v29);
          while (__stlxr(v31 - 1, v29));
          if (!v31)
          {
            (*(void (**)(_QWORD))(**((_QWORD **)&v62 + 1) + 16))(*((_QWORD *)&v62 + 1));
            std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v62 + 1));
          }
        }
        else
        {
          v67 = v62;
        }
        if (v61)
        {
          v32 = &v61->__shared_owners_;
          do
            v33 = __ldaxr((unint64_t *)v32);
          while (__stlxr(v33 - 1, (unint64_t *)v32));
          if (!v33)
          {
            ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
            std::__shared_weak_count::__release_weak(v61);
          }
        }
        v34 = *(_QWORD *)v65;
        if (*(char *)(v67 + 31) >= 0)
          v35 = v67 + 8;
        else
          v35 = *(_QWORD *)(v67 + 8);
        v36 = _os_log_pack_fill();
        *(_DWORD *)v36 = 136315138;
        *(_QWORD *)(v36 + 4) = v35;
        v37 = operator new();
        v38 = *((unsigned __int8 *)a2 + 23);
        if ((v38 & 0x80u) == 0)
          v39 = a2;
        else
          v39 = (uint64_t *)*a2;
        if ((v38 & 0x80u) != 0)
          v38 = a2[1];
        *(_QWORD *)v37 = v34;
        *(_OWORD *)(v37 + 8) = *(_OWORD *)&v65[8];
        *(_QWORD *)&v65[8] = 0;
        *(_QWORD *)&v65[16] = 0;
        *(_OWORD *)(v37 + 24) = v66;
        v66 = 0uLL;
        *(_QWORD *)(v37 + 40) = v39;
        *(_QWORD *)(v37 + 48) = v38;
        *(_BYTE *)(v37 + 56) = type;
        __dst = 0;
        *(_QWORD *)&v60 = v37;
        (*(void (**)(_QWORD, __int128 *))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8), &v60);
        v40 = v60;
        *(_QWORD *)&v60 = 0;
        if (v40)
        {
          v41 = *(std::__shared_weak_count **)(v40 + 32);
          if (v41)
          {
            v42 = (unint64_t *)&v41->__shared_owners_;
            do
              v43 = __ldaxr(v42);
            while (__stlxr(v43 - 1, v42));
            if (!v43)
            {
              ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
              std::__shared_weak_count::__release_weak(v41);
            }
          }
          v44 = *(std::__shared_weak_count **)(v40 + 16);
          if (v44)
          {
            v45 = (unint64_t *)&v44->__shared_owners_;
            do
              v46 = __ldaxr(v45);
            while (__stlxr(v46 - 1, v45));
            if (!v46)
            {
              ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
              std::__shared_weak_count::__release_weak(v44);
            }
          }
          MEMORY[0x212BC6398](v40, 0x10F0C40B62ED6C6);
          v47 = __dst;
          __dst = 0;
          if (v47)
          {
            v48 = (std::__shared_weak_count *)v47[4];
            if (v48)
            {
              v49 = (unint64_t *)&v48->__shared_owners_;
              do
                v50 = __ldaxr(v49);
              while (__stlxr(v50 - 1, v49));
              if (!v50)
              {
                ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
                std::__shared_weak_count::__release_weak(v48);
              }
            }
            v51 = (std::__shared_weak_count *)v47[2];
            if (v51)
            {
              v52 = (unint64_t *)&v51->__shared_owners_;
              do
                v53 = __ldaxr(v52);
              while (__stlxr(v53 - 1, v52));
              if (!v53)
              {
                ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
                std::__shared_weak_count::__release_weak(v51);
              }
            }
            MEMORY[0x212BC6398](v47, 0x10F0C40B62ED6C6);
          }
        }
        v54 = (std::__shared_weak_count *)*((_QWORD *)&v66 + 1);
        if (*((_QWORD *)&v66 + 1))
        {
          v55 = (unint64_t *)(*((_QWORD *)&v66 + 1) + 8);
          do
            v56 = __ldaxr(v55);
          while (__stlxr(v56 - 1, v55));
          if (!v56)
          {
            ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
            std::__shared_weak_count::__release_weak(v54);
          }
        }
        v57 = *(std::__shared_weak_count **)&v65[16];
        if (*(_QWORD *)&v65[16])
        {
          v58 = (unint64_t *)(*(_QWORD *)&v65[16] + 8);
          do
            v59 = __ldaxr(v58);
          while (__stlxr(v59 - 1, v58));
          if (!v59)
          {
            ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
            std::__shared_weak_count::__release_weak(v57);
          }
        }
        return;
      }
    }
    memcpy(p_dst, v12, v14);
    goto LABEL_13;
  }
  os_log_type_enabled(oslog, type);
  v16 = *a5;
  *(_DWORD *)v65 = 136315138;
  *(_QWORD *)&v65[4] = v16;
  v17 = (void *)_os_log_send_and_compose_impl();
  if (v17)
    free(v17);
}

void sub_20EFA0ACC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  va_list va1;
  uint64_t v12;
  uint64_t v13;
  va_list va2;

  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v10 = va_arg(va2, _QWORD);
  v12 = va_arg(va2, _QWORD);
  v13 = va_arg(va2, _QWORD);
  sub_20E86E8C4((uint64_t *)va);
  sub_20E86E8C4((uint64_t *)va1);
  sub_20E86E658((uint64_t)va2);
  _Unwind_Resume(a1);
}

void sub_20EFA0AF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  sub_20E86E658((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20EFA0B04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  void *v11;
  int v12;

  if (v12 < 0)
  {
    operator delete(v11);
    sub_20E86E658((uint64_t)&a11);
    _Unwind_Resume(a1);
  }
  sub_20E86E658((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void sub_20EFA0B5C(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  int v6;
  unint64_t v7;
  uint64_t v8;
  const char *v10;
  uint64_t v11;
  uint64_t *v12;
  char *v13;
  char *v14;
  unsigned __int8 v15;
  uint64_t v16;
  const char *v17;
  NSObject *v18;
  const char *v19;
  std::runtime_error *exception;
  const char *v21;
  _QWORD v22[3];
  int v23;
  const char *v24;
  int v25;
  const char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *category[2];
  std::string v31;
  char v32;
  _QWORD v33[4];
  _QWORD v34[2];

  sub_210212AD8(a1, a2, a3);
  v5 = *(unsigned __int8 *)(a3 + 23);
  if ((v5 & 0x80u) != 0)
    v5 = *(_QWORD *)(a3 + 8);
  if (!v5)
  {
    sub_20EFA0EE4(&v29);
    if (**(int **)(v29 + 56) <= 5)
    {
      v6 = *(unsigned __int8 *)(v29 + 72);
      v7 = sub_20E8C31DC(v29, "OSLogSurrogateAppender", 1, 0);
      v8 = v7 ? v7 + 16 : 0;
      if (v6 || v7 != 0)
      {
        v22[0] = &v29;
        v22[1] = std::chrono::steady_clock::now().__d_.__rep_;
        v22[2] = std::chrono::system_clock::now().__d_.__rep_;
        v23 = 5;
        v24 = "unknown file";
        v25 = 35;
        v27 = 0;
        v28 = 0;
        v26 = "unknown function";
        if (*(char *)(a1 + 23) >= 0)
          v10 = (const char *)a1;
        else
          v10 = *(const char **)a1;
        v21 = v10;
        v11 = *(_QWORD *)v22[0];
        v12 = (uint64_t *)(*(_QWORD *)v22[0] + 16);
        if (*(char *)(*(_QWORD *)v22[0] + 39) < 0)
        {
          v14 = *(char **)(v11 + 16);
          v13 = *(char **)(v11 + 24);
        }
        else
        {
          v13 = (char *)*(unsigned __int8 *)(*(_QWORD *)v22[0] + 39);
          v14 = (char *)(*(_QWORD *)v22[0] + 16);
        }
        category[0] = v14;
        category[1] = v13;
        v15 = atomic_load((unsigned __int8 *)&qword_254A4A510);
        if ((v15 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
        {
          sub_20E9E46F8((uint64_t)&v31);
          sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)&v31);
          if (v32 && SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v31.__r_.__value_.__l.__data_);
          __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
          __cxa_guard_release(&qword_254A4A510);
        }
        v16 = byte_254A4A4F8[23];
        if (byte_254A4A4F8[23] >= 0)
        {
          v17 = byte_254A4A4F8;
        }
        else
        {
          v16 = *(_QWORD *)&byte_254A4A4F8[8];
          v17 = *(const char **)byte_254A4A4F8;
        }
        v34[0] = v17;
        v34[1] = v16;
        v31.__r_.__value_.__r.__words[0] = (std::string::size_type)os_log_create(v17, category[0]);
        sub_20E86E5A8(&v31.__r_.__value_.__l.__size_, (uint64_t)v34);
        sub_20E86E5A8(v33, (uint64_t)category);
        v18 = v31.__r_.__value_.__r.__words[0];
        sub_20E86E44C((uint64_t)&v31);
        sub_20EFA3774(v8, v12, v18, OS_LOG_TYPE_ERROR, &v21);
        if (v6)
        {
          if (*(char *)(a1 + 23) >= 0)
            v19 = (const char *)a1;
          else
            v19 = *(const char **)a1;
          sub_20E8C003C((uint64_t)v22, "Failed to access [%s].", v19);
          sub_20E863570((uint64_t)v22);
        }
        sub_20E863714((uint64_t)v22);
      }
    }
    exception = (std::runtime_error *)__cxa_allocate_exception(0x18uLL);
    sub_20EFA0FD8("Failed to access ", a1);
    std::runtime_error::runtime_error(exception, &v31);
    exception->__vftable = (std::runtime_error_vtbl *)&off_24C9F2020;
    LODWORD(exception[1].__vftable) = 1;
    __cxa_throw(exception, (struct type_info *)&unk_24C9F2038, (void (*)(void *))std::runtime_error::~runtime_error);
  }
}

void sub_20EFA0E10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p,void *a25,int a26,__int16 a27,char a28,char a29,char a30,int a31,__int16 a32,char a33,char a34)
{
  uint64_t v34;

  if (a30 && a29 < 0)
    operator delete(__p);
  __cxa_guard_abort(&qword_254A4A510);
  sub_20E863714((uint64_t)&a12);
  if (*(char *)(v34 + 23) < 0)
    operator delete(*(void **)v34);
  _Unwind_Resume(a1);
}

void sub_20EFA0EE4(_QWORD *a1)
{
  unsigned __int8 v2;
  void *__p[2];
  char v4;
  uint64_t *v5;

  v2 = atomic_load((unsigned __int8 *)&qword_254A60948);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254A60948))
  {
    sub_21021D3D8(&v5);
    sub_20E8610C0(__p, "cv3d.vio.mapping_io");
    sub_20E8C4068(&v5, (uint64_t)__p, &qword_254A60940);
    if (v4 < 0)
      operator delete(__p[0]);
    __cxa_guard_release(&qword_254A60948);
  }
  *a1 = qword_254A60940;
}

void sub_20EFA0F80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A60948);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A60948);
  _Unwind_Resume(a1);
}

uint64_t sub_20EFA0FD8(char *__s, uint64_t a2)
{
  uint64_t result;
  _DWORD v4[6];
  int v5;
  char v6;
  char *v7;

  v5 = 0;
  sub_20E8ECB20(v4, __s);
  sub_20EB04FEC((uint64_t)&v7, (uint64_t)v4, a2);
  if (v5 == -1)
    sub_20E877AB8();
  v7 = &v6;
  result = ((uint64_t (*)(char **, _DWORD *))off_24C9F2628[v5])(&v7, v4);
  if (v5 != -1)
    return ((uint64_t (*)(char **, _DWORD *))off_24C9F2610[v5])(&v7, v4);
  return result;
}

void sub_20EFA1080(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E877A60((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20EFA1094(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E877A60((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20EFA10A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E877A60((uint64_t)&a9);
  _Unwind_Resume(a1);
}

unint64_t sub_20EFA10BC(uint64_t *a1, uint64_t *a2, unint64_t a3)
{
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  unint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  unint64_t *v30;
  unint64_t v31;
  unint64_t v32;
  _QWORD *v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t *v37;
  unint64_t v38;
  unint64_t v39;
  _QWORD *v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t *v43;

  v5 = *a2;
  v6 = (unint64_t *)a2[1];
  if ((unint64_t *)v5 == v6)
    return 0;
  v7 = a1[1];
  if (!v7)
    goto LABEL_63;
  v9 = v7 - 1;
  v10 = *a1;
  if ((v7 & (v7 - 1)) == 0)
  {
    v11 = 0;
    v12 = (uint64_t *)v5;
    while (1)
    {
      v13 = *v12;
      v14 = *v12 & v9;
      v15 = *(_QWORD **)(v10 + 8 * v14);
      if (!v15)
        break;
      do
      {
        while (1)
        {
          v15 = (_QWORD *)*v15;
          if (!v15)
            goto LABEL_63;
          v16 = v15[1];
          if (v13 == v16)
            break;
          if ((v16 & v9) != v14)
            goto LABEL_63;
        }
      }
      while (v15[2] != v13);
      v11 += v15[18];
      if (++v12 == (uint64_t *)v6)
        goto LABEL_12;
    }
LABEL_63:
    sub_20E89FD20("unordered_map::at: key not found");
  }
  v11 = 0;
  v30 = (unint64_t *)v5;
  do
  {
    v31 = *v30;
    v32 = *v30;
    if (*v30 >= v7)
      v32 = v31 % v7;
    v33 = *(_QWORD **)(v10 + 8 * v32);
    if (!v33)
      goto LABEL_63;
    do
    {
      while (1)
      {
        v33 = (_QWORD *)*v33;
        if (!v33)
          goto LABEL_63;
        v34 = v33[1];
        if (v31 == v34)
          break;
        if (v34 >= v7)
          v34 %= v7;
        if (v34 != v32)
          goto LABEL_63;
      }
    }
    while (v33[2] != v31);
    v11 += v33[18];
    ++v30;
  }
  while (v30 != v6);
LABEL_12:
  if (v11 <= a3)
    return v11;
  v43 = a1;
  sub_20EFA1C3C(v5, v6, &v43, 126 - 2 * __clz(((uint64_t)v6 - v5) >> 3), 1);
  v17 = *a2;
  v18 = (unint64_t *)a2[1];
  if ((unint64_t *)*a2 == v18)
  {
    v11 = 0;
    v23 = 0;
    v35 = ((uint64_t)v18 - v17) >> 3;
  }
  else
  {
    v19 = a1[1];
    if (!v19)
      goto LABEL_63;
    v20 = v19 - 1;
    v21 = *a1;
    if ((v19 & (v19 - 1)) != 0)
    {
      v36 = 0;
      v23 = 0;
      v37 = (unint64_t *)*a2;
      while (1)
      {
        v38 = *v37;
        v39 = *v37;
        if (*v37 >= v19)
          v39 = v38 % v19;
        v40 = *(_QWORD **)(v21 + 8 * v39);
        if (!v40)
          goto LABEL_63;
        do
        {
          while (1)
          {
            v40 = (_QWORD *)*v40;
            if (!v40)
              goto LABEL_63;
            v41 = v40[1];
            if (v38 == v41)
              break;
            if (v41 >= v19)
              v41 %= v19;
            if (v41 != v39)
              goto LABEL_63;
          }
        }
        while (v40[2] != v38);
        v11 = v40[18] + v36;
        if (v11 > a3)
          break;
        ++v23;
        ++v37;
        v36 += v40[18];
        if (v37 == v18)
          goto LABEL_58;
      }
      v11 = v36;
      v35 = ((uint64_t)v18 - v17) >> 3;
      v42 = v23 - v35;
      if (v23 > v35)
        goto LABEL_59;
    }
    else
    {
      v22 = 0;
      v23 = 0;
      v24 = (unint64_t *)*a2;
      while (1)
      {
        v25 = *v24;
        v26 = *v24 & v20;
        v27 = *(_QWORD **)(v21 + 8 * v26);
        if (!v27)
          goto LABEL_63;
        do
        {
          while (1)
          {
            v27 = (_QWORD *)*v27;
            if (!v27)
              goto LABEL_63;
            v28 = v27[1];
            if (v25 == v28)
              break;
            if ((v28 & v20) != v26)
              goto LABEL_63;
          }
        }
        while (v27[2] != v25);
        v11 = v27[18] + v22;
        if (v11 > a3)
          break;
        ++v23;
        ++v24;
        v22 += v27[18];
        if (v24 == v18)
          goto LABEL_58;
      }
      v11 = v22;
LABEL_58:
      v35 = ((uint64_t)v18 - v17) >> 3;
      v42 = v23 - v35;
      if (v23 > v35)
      {
LABEL_59:
        sub_20E93DAE8((uint64_t)a2, v42);
        return v11;
      }
    }
  }
  if (v35 <= v23)
    return v11;
  a2[1] = v17 + 8 * v23;
  return v11;
}

void sub_20EFA13E8(uint64_t ***a1@<X0>, void **a2@<X8>)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  char *v19;
  char *v20;
  char *v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  char *v28;
  unint64_t v29;
  unint64_t v30;
  char *v31;
  char *v32;
  char *v33;
  __int128 v34;
  __int128 v35;
  char *v36;
  uint64_t ***v37;

  v4 = (*a1)[3];
  v5 = (*a1)[4];
  v7 = **a1;
  v6 = (*a1)[1];
  v8 = 0x6DB6DB6DB6DB6DB7 * (((char *)v5 - (char *)v4) >> 6) + 0x2E8BA2E8BA2E8BA3 * (v6 - v7);
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  if (v8)
  {
    if (v8 > 0x666666666666666)
      sub_20E867F44();
    v9 = 40 * v8;
    v10 = (char *)operator new(40 * v8);
    *a2 = v10;
    a2[1] = v10;
    a2[2] = &v10[v9];
    if (v7 != v6)
      goto LABEL_4;
  }
  else
  {
    v10 = 0;
    if (v7 != v6)
    {
LABEL_4:
      v37 = a1;
      v11 = 0;
      while (1)
      {
        while (1)
        {
          v12 = *v7;
          v13 = (unint64_t)a2[2];
          if ((unint64_t)v10 >= v13)
            break;
          *(_QWORD *)v10 = v12;
          v10[8] = 0;
          *((_QWORD *)v10 + 2) = -1;
          v10[24] = 1;
          *((_QWORD *)v10 + 4) = v11;
          v10 += 40;
          a2[1] = v10;
          ++v11;
          v7 += 11;
          if (v7 == v6)
            goto LABEL_26;
        }
        v14 = (char *)*a2;
        v15 = 0xCCCCCCCCCCCCCCCDLL * ((v10 - (_BYTE *)*a2) >> 3);
        v16 = v15 + 1;
        if (v15 + 1 > 0x666666666666666)
          sub_20E867F44();
        v17 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v13 - (_QWORD)v14) >> 3);
        if (2 * v17 > v16)
          v16 = 2 * v17;
        if (v17 >= 0x333333333333333)
          v18 = 0x666666666666666;
        else
          v18 = v16;
        if (v18)
        {
          if (v18 > 0x666666666666666)
            sub_20E877A38();
          v19 = (char *)operator new(40 * v18);
        }
        else
        {
          v19 = 0;
        }
        v20 = &v19[40 * v15];
        *(_QWORD *)v20 = v12;
        v20[8] = 0;
        *((_QWORD *)v20 + 2) = -1;
        v20[24] = 1;
        *((_QWORD *)v20 + 4) = v11;
        if (v10 == v14)
        {
          v14 = v10;
          v10 = v20 + 40;
          *a2 = v20;
          a2[1] = v20 + 40;
          a2[2] = &v19[40 * v18];
          if (!v14)
            goto LABEL_22;
        }
        else
        {
          v21 = &v19[40 * v15];
          do
          {
            v22 = *(_OWORD *)(v10 - 40);
            v23 = *(_OWORD *)(v10 - 24);
            *((_QWORD *)v21 - 1) = *((_QWORD *)v10 - 1);
            *(_OWORD *)(v21 - 24) = v23;
            *(_OWORD *)(v21 - 40) = v22;
            v21 -= 40;
            v10 -= 40;
          }
          while (v10 != v14);
          v10 = v20 + 40;
          *a2 = v21;
          a2[1] = v20 + 40;
          a2[2] = &v19[40 * v18];
          if (!v14)
            goto LABEL_22;
        }
        operator delete(v14);
LABEL_22:
        a2[1] = v10;
        ++v11;
        v7 += 11;
        if (v7 == v6)
        {
LABEL_26:
          v4 = (*v37)[3];
          v5 = (*v37)[4];
          if (v4 == v5)
            return;
LABEL_30:
          v24 = 0;
          v25 = (char *)*a2;
          v26 = (char *)a2[2];
          while (1)
          {
LABEL_32:
            while (1)
            {
              v27 = v4[30];
              if (v25 == v10)
                break;
              v28 = v25;
              while (*(_QWORD *)v28 != v27)
              {
                v28 += 40;
                if (v28 == v10)
                  goto LABEL_36;
              }
              v28[8] = 1;
              *((_QWORD *)v28 + 2) = v24++;
              v4 += 56;
              if (v4 == v5)
                return;
            }
LABEL_36:
            if (v10 >= v26)
              break;
            *(_QWORD *)v10 = v27;
            v10[8] = 1;
            *((_QWORD *)v10 + 2) = v24;
            v10[24] = 0;
            *((_QWORD *)v10 + 4) = -1;
            v10 += 40;
            a2[1] = v10;
            ++v24;
            v4 += 56;
            if (v4 == v5)
              return;
          }
          v29 = 0xCCCCCCCCCCCCCCCDLL * ((v10 - v25) >> 3) + 1;
          if (v29 > 0x666666666666666)
            sub_20E867F44();
          if (0x999999999999999ALL * ((v26 - v25) >> 3) > v29)
            v29 = 0x999999999999999ALL * ((v26 - v25) >> 3);
          if (0xCCCCCCCCCCCCCCCDLL * ((v26 - v25) >> 3) >= 0x333333333333333)
            v30 = 0x666666666666666;
          else
            v30 = v29;
          if (v30)
          {
            if (v30 > 0x666666666666666)
              sub_20E877A38();
            v31 = (char *)operator new(40 * v30);
          }
          else
          {
            v31 = 0;
          }
          v32 = &v31[8 * ((v10 - v25) >> 3)];
          *(_QWORD *)v32 = v27;
          v32[8] = 1;
          *((_QWORD *)v32 + 2) = v24;
          v32[24] = 0;
          *((_QWORD *)v32 + 4) = -1;
          if (v25 == v10)
          {
            v36 = &v31[8 * ((v10 - v25) >> 3)];
            v26 = &v31[40 * v30];
            v10 = v32 + 40;
            *a2 = v32;
            a2[1] = v32 + 40;
            a2[2] = v26;
            if (v25)
              goto LABEL_53;
          }
          else
          {
            v33 = &v31[8 * ((v10 - v25) >> 3)];
            do
            {
              v34 = *(_OWORD *)(v10 - 40);
              v35 = *(_OWORD *)(v10 - 24);
              v36 = v33 - 40;
              *((_QWORD *)v33 - 1) = *((_QWORD *)v10 - 1);
              *(_OWORD *)(v33 - 24) = v35;
              *(_OWORD *)(v33 - 40) = v34;
              v10 -= 40;
              v33 -= 40;
            }
            while (v10 != v25);
            v26 = &v31[40 * v30];
            v10 = v32 + 40;
            *a2 = v36;
            a2[1] = v32 + 40;
            a2[2] = v26;
            if (v25)
LABEL_53:
              operator delete(v25);
          }
          v25 = v36;
          a2[1] = v10;
          ++v24;
          v4 += 56;
          if (v4 == v5)
            return;
          goto LABEL_32;
        }
      }
    }
  }
  if (v4 != v5)
    goto LABEL_30;
}

void sub_20EFA184C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_20EFA1874(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  __int128 *v11;
  __int128 *v12;
  _QWORD *v13;
  __int128 *v14;
  _OWORD *v15;
  __int128 v16;
  _QWORD *v17;
  _QWORD *v18;
  BOOL v19;
  uint64_t v20;
  _QWORD *v21;
  unint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  _QWORD *v25;
  __int128 *v26;
  _QWORD *v27;
  __int128 *v28;
  _OWORD *v29;
  __int128 v30;
  _QWORD *v31;
  _QWORD *v32;
  __int128 *v33;
  __int128 v34;
  void *__p[2];
  uint64_t v36;

  if (*(_BYTE *)(a1 + 24))
  {
    v5 = *(_QWORD *)(a1 + 32);
    v6 = (_QWORD *)(*a2 + 88 * v5);
    v7 = v6[6];
    v33 = 0;
    v34 = 0uLL;
    sub_20E9099B8((uint64_t)&v33, v7);
    v6 += 4;
    v10 = (_QWORD *)*v6;
    v8 = v6 + 1;
    v9 = v10;
    if (v10 == v8)
    {
LABEL_3:
      v11 = v33;
      v12 = (__int128 *)v34;
      v13 = (_QWORD *)(*a2 + 88 * v5);
      *(_QWORD *)a3 = *v13;
      *(_QWORD *)(a3 + 8) = v13[10];
      *(_QWORD *)(a3 + 16) = v13 + 7;
      *(_QWORD *)(a3 + 32) = 0;
      *(_QWORD *)(a3 + 40) = 0;
      *(_QWORD *)(a3 + 24) = 0;
      v14 = v12;
      sub_20E8ADB20((char *)(a3 + 24), v11, v12, 0xAAAAAAAAAAAAAAABLL * (((char *)v12 - (char *)v11) >> 3));
      if (!v11)
        return;
      while (v14 != v11)
      {
        if (*((char *)v14 - 1) < 0)
          operator delete(*((void **)v14 - 3));
        v14 = (__int128 *)((char *)v14 - 24);
      }
LABEL_46:
      operator delete(v11);
      return;
    }
    while (1)
    {
      if (*((char *)v9 + 55) < 0)
      {
        sub_20E860C04(__p, (void *)v9[4], v9[5]);
      }
      else
      {
        *(_OWORD *)__p = *((_OWORD *)v9 + 2);
        v36 = v9[6];
      }
      v15 = (_OWORD *)v34;
      if ((unint64_t)v34 >= *((_QWORD *)&v34 + 1))
      {
        *(_QWORD *)&v34 = sub_20E8780F0((void **)&v33, (uint64_t)__p);
        if (SHIBYTE(v36) < 0)
        {
          operator delete(__p[0]);
          v17 = (_QWORD *)v9[1];
          if (v17)
          {
            do
            {
LABEL_14:
              v18 = v17;
              v17 = (_QWORD *)*v17;
            }
            while (v17);
            goto LABEL_5;
          }
        }
        else
        {
          v17 = (_QWORD *)v9[1];
          if (v17)
            goto LABEL_14;
        }
      }
      else
      {
        v16 = *(_OWORD *)__p;
        *(_QWORD *)(v34 + 16) = v36;
        *v15 = v16;
        *(_QWORD *)&v34 = (char *)v15 + 24;
        v17 = (_QWORD *)v9[1];
        if (v17)
          goto LABEL_14;
      }
      do
      {
        v18 = (_QWORD *)v9[2];
        v19 = *v18 == (_QWORD)v9;
        v9 = v18;
      }
      while (!v19);
LABEL_5:
      v9 = v18;
      if (v18 == v8)
        goto LABEL_3;
    }
  }
  v20 = *(_QWORD *)(a1 + 16);
  v21 = (_QWORD *)(a2[3] + 448 * v20);
  v22 = v21[29];
  v33 = 0;
  v34 = 0uLL;
  sub_20E9099B8((uint64_t)&v33, v22);
  v21 += 27;
  v25 = (_QWORD *)*v21;
  v23 = v21 + 1;
  v24 = v25;
  if (v25 != v23)
  {
    do
    {
      if (*((char *)v24 + 55) < 0)
      {
        sub_20E860C04(__p, (void *)v24[4], v24[5]);
      }
      else
      {
        *(_OWORD *)__p = *((_OWORD *)v24 + 2);
        v36 = v24[6];
      }
      v29 = (_OWORD *)v34;
      if ((unint64_t)v34 >= *((_QWORD *)&v34 + 1))
      {
        *(_QWORD *)&v34 = sub_20E8780F0((void **)&v33, (uint64_t)__p);
        if (SHIBYTE(v36) < 0)
        {
          operator delete(__p[0]);
          v31 = (_QWORD *)v24[1];
          if (v31)
          {
            do
            {
LABEL_36:
              v32 = v31;
              v31 = (_QWORD *)*v31;
            }
            while (v31);
            goto LABEL_27;
          }
        }
        else
        {
          v31 = (_QWORD *)v24[1];
          if (v31)
            goto LABEL_36;
        }
      }
      else
      {
        v30 = *(_OWORD *)__p;
        *(_QWORD *)(v34 + 16) = v36;
        *v29 = v30;
        *(_QWORD *)&v34 = (char *)v29 + 24;
        v31 = (_QWORD *)v24[1];
        if (v31)
          goto LABEL_36;
      }
      do
      {
        v32 = (_QWORD *)v24[2];
        v19 = *v32 == (_QWORD)v24;
        v24 = v32;
      }
      while (!v19);
LABEL_27:
      v24 = v32;
    }
    while (v32 != v23);
  }
  v11 = v33;
  v26 = (__int128 *)v34;
  v27 = (_QWORD *)(a2[3] + 448 * v20);
  *(_QWORD *)a3 = v27[30];
  *(_QWORD *)(a3 + 8) = 0x8F5C28F5C28F5C29 * ((uint64_t)(v27[6] - v27[5]) >> 5);
  *(_QWORD *)(a3 + 16) = v27 + 31;
  *(_QWORD *)(a3 + 32) = 0;
  *(_QWORD *)(a3 + 40) = 0;
  *(_QWORD *)(a3 + 24) = 0;
  v28 = v26;
  sub_20E8ADB20((char *)(a3 + 24), v11, v26, 0xAAAAAAAAAAAAAAABLL * (((char *)v26 - (char *)v11) >> 3));
  if (v11)
  {
    while (v28 != v11)
    {
      if (*((char *)v28 - 1) < 0)
        operator delete(*((void **)v28 - 3));
      v28 = (__int128 *)((char *)v28 - 24);
    }
    goto LABEL_46;
  }
}

void sub_20EFA1BDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  sub_20E89FB98(&a9);
  _Unwind_Resume(a1);
}

void sub_20EFA1C04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_20E89FB98((void **)va);
  _Unwind_Resume(a1);
}

void sub_20EFA1C18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
    operator delete(__p);
  sub_20E89FB98(&a12);
  _Unwind_Resume(a1);
}

uint64_t sub_20EFA1C3C(uint64_t result, unint64_t *a2, uint64_t **a3, uint64_t a4, char a5)
{
  unint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t *v13;
  uint64_t v14;
  unint64_t v15;
  int8x8_t v16;
  unint64_t v17;
  uint8x8_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t *v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t *v36;
  unint64_t v37;
  unint64_t v38;
  int8x8_t v39;
  uint8x8_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t *v45;
  unint64_t v46;
  unint64_t v47;
  _QWORD *v48;
  _QWORD *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  _QWORD *v54;
  _QWORD *v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  _QWORD *v60;
  _QWORD *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  _QWORD *v66;
  _QWORD *v67;
  uint64_t v68;
  unint64_t v69;
  unint64_t *v70;
  BOOL v71;
  unint64_t v72;
  unint64_t v73;
  unint64_t *v74;
  unint64_t *v75;
  unint64_t v76;
  int8x8_t v77;
  uint8x8_t v78;
  uint64_t v79;
  BOOL v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  unint64_t v84;
  unint64_t v85;
  unint64_t v86;
  unint64_t v87;
  _QWORD *v88;
  _QWORD *v89;
  uint64_t v90;
  unint64_t v91;
  unint64_t v92;
  _QWORD *v93;
  _QWORD *v94;
  uint64_t v95;
  uint64_t v96;
  unint64_t v97;
  unint64_t v98;
  _QWORD *v99;
  _QWORD *v100;
  unint64_t v101;
  uint64_t v102;
  unint64_t v103;
  unint64_t v104;
  uint64_t *v105;
  uint64_t v106;
  uint64_t v107;
  unint64_t v108;
  unint64_t *v109;
  unint64_t v110;
  unint64_t *v111;
  BOOL v113;
  unint64_t *v114;
  unint64_t *v115;
  unint64_t *v116;
  unint64_t v117;
  uint64_t *v118;
  unint64_t v119;
  int8x8_t v120;
  uint8x8_t v121;
  unint64_t v122;
  _QWORD *v123;
  _QWORD *v124;
  uint64_t v125;
  uint64_t v126;
  unint64_t v127;
  unint64_t v128;
  _QWORD *v129;
  _QWORD *v130;
  uint64_t v131;
  uint64_t v132;
  unint64_t v133;
  int64_t v134;
  int64_t v135;
  uint64_t v136;
  unint64_t *v137;
  _BOOL4 v138;
  unint64_t *v139;
  unint64_t v140;
  _BOOL4 v141;
  uint64_t v142;
  unint64_t *v143;
  uint64_t v144;
  uint64_t v145;
  unint64_t *v146;
  uint64_t v148;
  unint64_t v149;
  unint64_t *v150;
  unint64_t *v151;
  uint64_t v152;
  uint64_t v153;
  int8x8_t v154;
  unint64_t v155;
  uint8x8_t v156;
  unint64_t v157;
  _QWORD *v158;
  _QWORD *v159;
  unint64_t v160;
  uint64_t v161;
  uint64_t v162;
  unint64_t v163;
  unint64_t v164;
  _QWORD *v165;
  _QWORD *v166;
  uint64_t v167;
  uint64_t v168;
  unint64_t v169;
  uint64_t v170;
  unint64_t v171;
  unint64_t *v172;
  uint64_t *v173;
  unint64_t v174;
  int8x8_t v175;
  uint8x8_t v176;
  unint64_t v177;
  _QWORD *v178;
  _QWORD *v179;
  uint64_t v180;
  uint64_t v181;
  unint64_t v182;
  unint64_t v183;
  _QWORD *v184;
  _QWORD *v185;
  uint64_t v186;
  uint64_t v187;
  unint64_t v188;
  unint64_t *v189;
  int8x8_t v190;
  unint64_t v191;
  uint8x8_t v192;
  uint64_t v193;
  BOOL v194;
  uint64_t v195;
  uint64_t v196;
  unint64_t v197;
  uint64_t v198;
  unint64_t *v199;
  uint64_t v200;
  _QWORD *v201;
  _QWORD *v202;
  uint64_t v203;
  unint64_t v204;
  unint64_t v205;
  _QWORD *v206;
  _QWORD *v207;
  uint64_t v208;
  uint64_t v209;
  unint64_t v210;
  unint64_t v211;
  unint64_t v212;
  unint64_t *v213;
  uint64_t **v214;
  unint64_t *v215;
  int64_t v216;
  unint64_t *v217;

  v9 = (unint64_t *)result;
LABEL_2:
  v215 = a2 - 1;
  while (2)
  {
    v10 = (char *)a2 - (char *)v9;
    v11 = a2 - v9;
    switch(v11)
    {
      case 0:
      case 1:
        return result;
      case 2:
        result = sub_20EFA3164(*a3, *(a2 - 1), *v9);
        if ((_DWORD)result)
        {
          v110 = *v9;
          *v9 = *(a2 - 1);
          *(a2 - 1) = v110;
        }
        return result;
      case 3:
        return sub_20EFA33E4(v9, v9 + 1, v215, a3);
      case 4:
        return sub_20EFA36C4(v9, v9 + 1, v9 + 2, v215, a3);
      case 5:
        return sub_20EFA330C(v9, v9 + 1, v9 + 2, v9 + 3, v215, a3);
      default:
        if (v10 > 191)
        {
          v217 = v9;
          if (!a4)
          {
            if (v9 == a2)
              return result;
            v213 = a2;
            v214 = a3;
            v134 = (unint64_t)(v11 - 2) >> 1;
            v216 = v134;
            do
            {
              v135 = v134;
              if (v216 >= v134)
              {
                v136 = (2 * v134) | 1;
                v137 = &v9[v136];
                if (2 * v134 + 2 < v11)
                {
                  v138 = sub_20EFA3164(*a3, *v137, v137[1]);
                  if (v138)
                    ++v137;
                  a3 = v214;
                  if (v138)
                    v136 = 2 * v135 + 2;
                }
                v139 = &v9[v135];
                if (!sub_20EFA3164(*a3, *v137, *v139))
                {
                  v140 = *v139;
                  while (1)
                  {
                    v143 = v139;
                    v139 = v137;
                    *v143 = *v137;
                    if (v216 < v136)
                      break;
                    v142 = (2 * v136) | 1;
                    v137 = &v9[v142];
                    v144 = 2 * v136 + 2;
                    if (v144 < v11)
                    {
                      v141 = sub_20EFA3164(*v214, *v137, v137[1]);
                      if (v141)
                        ++v137;
                      v9 = v217;
                      if (v141)
                        v142 = v144;
                      v136 = v142;
                      if (sub_20EFA3164(*v214, *v137, v140))
                        break;
                    }
                    else
                    {
                      v136 = v142;
                      if (sub_20EFA3164(*v214, *v137, v140))
                        break;
                    }
                  }
                  *v139 = v140;
                  a3 = v214;
                }
              }
              v134 = v135 - 1;
            }
            while (v135);
            v145 = (unint64_t)v10 >> 3;
            v146 = v213;
            while (1)
            {
              v148 = 0;
              v149 = *v9;
              result = (uint64_t)*a3;
              v150 = v9;
              while (2)
              {
                v151 = &v150[v148 + 1];
                v152 = (2 * v148) | 1;
                v153 = 2 * v148 + 2;
                if (v153 >= v145)
                  goto LABEL_341;
                v154 = *(int8x8_t *)(result + 8);
                if (!*(_QWORD *)&v154)
                  goto LABEL_479;
                v155 = *v151;
                v156 = (uint8x8_t)vcnt_s8(v154);
                v156.i16[0] = vaddlv_u8(v156);
                if (v156.u32[0] > 1uLL)
                {
                  v157 = *v151;
                  if (*(_QWORD *)&v154 <= v155)
                    v157 = v155 % *(_QWORD *)&v154;
                }
                else
                {
                  v157 = (*(_QWORD *)&v154 - 1) & v155;
                }
                v158 = *(_QWORD **)(*(_QWORD *)result + 8 * v157);
                if (!v158)
                  goto LABEL_479;
                v159 = (_QWORD *)*v158;
                if (!*v158)
                  goto LABEL_479;
                v160 = v151[1];
                v161 = *(_QWORD *)&v154 - 1;
                if (v156.u32[0] < 2uLL)
                {
                  while (1)
                  {
                    v162 = v159[1];
                    if (v162 == v155)
                    {
                      if (v159[2] == v155)
                        goto LABEL_356;
                    }
                    else if ((v162 & v161) != v157)
                    {
                      goto LABEL_479;
                    }
                    v159 = (_QWORD *)*v159;
                    if (!v159)
                      goto LABEL_479;
                  }
                }
                while (1)
                {
                  v164 = v159[1];
                  if (v164 == v155)
                    break;
                  if (v164 >= *(_QWORD *)&v154)
                    v164 %= *(_QWORD *)&v154;
                  if (v164 != v157)
                    goto LABEL_479;
LABEL_359:
                  v159 = (_QWORD *)*v159;
                  if (!v159)
                    goto LABEL_479;
                }
                if (v159[2] != v155)
                  goto LABEL_359;
LABEL_356:
                if (v156.u32[0] > 1uLL)
                {
                  v163 = v151[1];
                  if (*(_QWORD *)&v154 <= v160)
                    v163 = v160 % *(_QWORD *)&v154;
                }
                else
                {
                  v163 = v161 & v160;
                }
                v165 = *(_QWORD **)(*(_QWORD *)result + 8 * v163);
                if (!v165)
                  goto LABEL_479;
                v166 = (_QWORD *)*v165;
                if (!v166)
                  goto LABEL_479;
                v167 = v159[12];
                if (v156.u32[0] < 2uLL)
                {
                  while (1)
                  {
                    v168 = v166[1];
                    if (v168 == v160)
                    {
                      if (v166[2] == v160)
                        goto LABEL_339;
                    }
                    else if ((v168 & v161) != v163)
                    {
                      goto LABEL_479;
                    }
                    v166 = (_QWORD *)*v166;
                    if (!v166)
                      goto LABEL_479;
                  }
                }
                while (2)
                {
                  v169 = v166[1];
                  if (v169 != v160)
                  {
                    if (v169 >= *(_QWORD *)&v154)
                      v169 %= *(_QWORD *)&v154;
                    if (v169 != v163)
                      goto LABEL_479;
LABEL_377:
                    v166 = (_QWORD *)*v166;
                    if (!v166)
                      goto LABEL_479;
                    continue;
                  }
                  break;
                }
                if (v166[2] != v160)
                  goto LABEL_377;
LABEL_339:
                if (v167 > v166[12])
                {
                  ++v151;
                  v152 = v153;
                }
LABEL_341:
                *v150 = *v151;
                v150 = v151;
                v148 = v152;
                if (v152 <= (uint64_t)((unint64_t)(v145 - 2) >> 1))
                  continue;
                break;
              }
              if (v151 == --v146)
              {
LABEL_336:
                *v151 = v149;
              }
              else
              {
                *v151 = *v146;
                *v146 = v149;
                v170 = (char *)v151 - (char *)v9 + 8;
                if (v170 >= 9)
                {
                  v171 = (((unint64_t)v170 >> 3) - 2) >> 1;
                  v172 = &v9[v171];
                  result = sub_20EFA3164((_QWORD *)result, *v172, *v151);
                  if ((_DWORD)result)
                  {
                    v149 = *v151;
                    v173 = *a3;
                    v174 = *v172;
                    while (1)
                    {
                      *v151 = v174;
                      v151 = v172;
                      if (!v171)
                        goto LABEL_336;
                      v175 = (int8x8_t)v173[1];
                      if (!*(_QWORD *)&v175)
                        goto LABEL_479;
                      v171 = (v171 - 1) >> 1;
                      v172 = &v9[v171];
                      v174 = *v172;
                      v176 = (uint8x8_t)vcnt_s8(v175);
                      v176.i16[0] = vaddlv_u8(v176);
                      if (v176.u32[0] > 1uLL)
                      {
                        v177 = *v172;
                        if (*(_QWORD *)&v175 <= v174)
                          v177 = v174 % *(_QWORD *)&v175;
                      }
                      else
                      {
                        v177 = (*(_QWORD *)&v175 - 1) & v174;
                      }
                      v178 = *(_QWORD **)(*v173 + 8 * v177);
                      if (!v178)
                        goto LABEL_479;
                      v179 = (_QWORD *)*v178;
                      if (!*v178)
                        goto LABEL_479;
                      v180 = *(_QWORD *)&v175 - 1;
                      if (v176.u32[0] < 2uLL)
                      {
                        while (1)
                        {
                          v181 = v179[1];
                          if (v181 == v174)
                          {
                            if (v179[2] == v174)
                              goto LABEL_402;
                          }
                          else if ((v181 & v180) != v177)
                          {
                            goto LABEL_479;
                          }
                          v179 = (_QWORD *)*v179;
                          if (!v179)
                            goto LABEL_479;
                        }
                      }
                      while (1)
                      {
                        v183 = v179[1];
                        if (v183 == v174)
                          break;
                        if (v183 >= *(_QWORD *)&v175)
                        {
                          result = v183 / *(_QWORD *)&v175;
                          v183 %= *(_QWORD *)&v175;
                        }
                        if (v183 != v177)
                          goto LABEL_479;
LABEL_405:
                        v179 = (_QWORD *)*v179;
                        if (!v179)
                          goto LABEL_479;
                      }
                      if (v179[2] != v174)
                        goto LABEL_405;
LABEL_402:
                      if (v176.u32[0] > 1uLL)
                      {
                        v182 = v149;
                        if (*(_QWORD *)&v175 <= v149)
                          v182 = v149 % *(_QWORD *)&v175;
                      }
                      else
                      {
                        v182 = v180 & v149;
                      }
                      v184 = *(_QWORD **)(*v173 + 8 * v182);
                      if (!v184)
                        goto LABEL_479;
                      v185 = (_QWORD *)*v184;
                      if (!v185)
                        goto LABEL_479;
                      v186 = v179[12];
                      if (v176.u32[0] < 2uLL)
                      {
                        while (1)
                        {
                          v187 = v185[1];
                          if (v187 == v149)
                          {
                            if (v185[2] == v149)
                              goto LABEL_387;
                          }
                          else if ((v187 & v180) != v182)
                          {
                            goto LABEL_479;
                          }
                          v185 = (_QWORD *)*v185;
                          if (!v185)
                            goto LABEL_479;
                        }
                      }
                      while (2)
                      {
                        v188 = v185[1];
                        if (v188 != v149)
                        {
                          if (v188 >= *(_QWORD *)&v175)
                            v188 %= *(_QWORD *)&v175;
                          if (v188 != v182)
                            goto LABEL_479;
LABEL_423:
                          v185 = (_QWORD *)*v185;
                          if (!v185)
                            goto LABEL_479;
                          continue;
                        }
                        break;
                      }
                      if (v185[2] != v149)
                        goto LABEL_423;
LABEL_387:
                      if (v186 <= v185[12])
                        goto LABEL_336;
                    }
                  }
                }
              }
              if (v145-- <= 2)
                return result;
            }
          }
          v12 = (unint64_t)v11 >> 1;
          v13 = &v9[(unint64_t)v11 >> 1];
          if ((unint64_t)v10 < 0x401)
          {
            sub_20EFA33E4(v13, v9, v215, a3);
            --a4;
            if ((a5 & 1) != 0)
              goto LABEL_11;
            goto LABEL_10;
          }
          sub_20EFA33E4(v9, v13, v215, a3);
          v14 = v12;
          sub_20EFA33E4(v9 + 1, &v9[v14 - 1], a2 - 2, a3);
          sub_20EFA33E4(v9 + 2, &v9[v14 + 1], a2 - 3, a3);
          sub_20EFA33E4(&v9[v14 - 1], v13, &v9[v14 + 1], a3);
          v15 = *v9;
          *v9 = v9[v14];
          v9[v14] = v15;
          --a4;
          if ((a5 & 1) == 0)
          {
LABEL_10:
            if (sub_20EFA3164(*a3, *(v9 - 1), *v9))
              goto LABEL_11;
            v72 = *v9;
            result = sub_20EFA3164(*a3, *v9, *v215);
            if ((result & 1) != 0)
            {
              do
              {
                v73 = v9[1];
                ++v9;
                result = sub_20EFA3164(*a3, v72, v73);
              }
              while ((result & 1) == 0);
            }
            else
            {
              v74 = v9 + 1;
              do
              {
                v9 = v74;
                if (v74 >= a2)
                  break;
                ++v74;
                result = sub_20EFA3164(*a3, v72, *v9);
              }
              while (!(_DWORD)result);
            }
            v75 = a2;
            if (v9 < a2)
            {
              v75 = a2;
              do
              {
                v76 = *--v75;
                result = sub_20EFA3164(*a3, v72, v76);
              }
              while ((result & 1) != 0);
            }
            if (v9 >= v75)
              goto LABEL_246;
            v77 = (int8x8_t)(*a3)[1];
            v78 = (uint8x8_t)vcnt_s8(v77);
            v78.i16[0] = vaddlv_u8(v78);
            v79 = *(_QWORD *)&v77 - 1;
            v80 = v78.u32[0] < 2uLL;
            if (v78.u32[0] >= 2uLL)
              v81 = -1;
            else
              v81 = *(_QWORD *)&v77 - 1;
            if (*(_QWORD *)&v77 > v72)
              v80 = 1;
            if (!*(_QWORD *)&v77)
            {
              v212 = *v9;
              *v9 = *v75;
              *v75 = v212;
              sub_20E89FD20("unordered_map::at: key not found");
            }
            v82 = v81 & v72;
            v83 = **a3;
            v84 = *v9;
            v85 = *v75;
            while (2)
            {
              *v9 = v85;
              *v75 = v84;
              while (2)
              {
                v86 = v9[1];
                ++v9;
                v84 = v86;
                v87 = v82;
                if (!v80)
                  v87 = v72 % *(_QWORD *)&v77;
                v88 = *(_QWORD **)(v83 + 8 * v87);
                if (!v88)
                  goto LABEL_479;
                v89 = (_QWORD *)*v88;
                if (!v89)
                  goto LABEL_479;
                if (v78.u32[0] < 2uLL)
                {
                  while (1)
                  {
                    v90 = v89[1];
                    if (v90 == v72)
                    {
                      if (v89[2] == v72)
                        goto LABEL_181;
                    }
                    else if ((v90 & v79) != v87)
                    {
                      goto LABEL_479;
                    }
                    v89 = (_QWORD *)*v89;
                    if (!v89)
                      goto LABEL_479;
                  }
                }
                while (1)
                {
                  v92 = v89[1];
                  if (v92 == v72)
                    break;
                  if (v92 >= *(_QWORD *)&v77)
                    v92 %= *(_QWORD *)&v77;
                  if (v92 != v87)
                    goto LABEL_479;
LABEL_184:
                  v89 = (_QWORD *)*v89;
                  if (!v89)
                    goto LABEL_479;
                }
                if (v89[2] != v72)
                  goto LABEL_184;
LABEL_181:
                if (v78.u32[0] > 1uLL)
                {
                  v91 = v84;
                  if (*(_QWORD *)&v77 <= v84)
                    v91 = v84 % *(_QWORD *)&v77;
                }
                else
                {
                  v91 = v84 & v79;
                }
                v93 = *(_QWORD **)(v83 + 8 * v91);
                if (!v93)
                  goto LABEL_479;
                v94 = (_QWORD *)*v93;
                if (!v94)
                  goto LABEL_479;
                v95 = v89[12];
                if (v78.u32[0] < 2uLL)
                {
                  while (1)
                  {
                    v96 = v94[1];
                    if (v96 == v84)
                    {
                      if (v94[2] == v84)
                        goto LABEL_170;
                    }
                    else if ((v96 & v79) != v91)
                    {
                      goto LABEL_479;
                    }
                    v94 = (_QWORD *)*v94;
                    if (!v94)
                      goto LABEL_479;
                  }
                }
                while (2)
                {
                  v97 = v94[1];
                  if (v97 != v84)
                  {
                    if (v97 >= *(_QWORD *)&v77)
                      v97 %= *(_QWORD *)&v77;
                    if (v97 != v91)
                      goto LABEL_479;
LABEL_202:
                    v94 = (_QWORD *)*v94;
                    if (!v94)
                      goto LABEL_479;
                    continue;
                  }
                  break;
                }
                if (v94[2] != v84)
                  goto LABEL_202;
LABEL_170:
                if (v95 <= v94[12])
                  continue;
                break;
              }
              while (2)
              {
                v98 = v82;
                if (!v80)
                  v98 = v72 % *(_QWORD *)&v77;
                v99 = *(_QWORD **)(v83 + 8 * v98);
                if (!v99)
                  goto LABEL_479;
                v100 = (_QWORD *)*v99;
                if (!*v99)
                  goto LABEL_479;
                v101 = *--v75;
                v85 = v101;
                if (v78.u32[0] < 2uLL)
                {
                  while (1)
                  {
                    v102 = v100[1];
                    if (v102 == v72)
                    {
                      if (v100[2] == v72)
                        goto LABEL_219;
                    }
                    else if ((v102 & v79) != v98)
                    {
                      goto LABEL_479;
                    }
                    v100 = (_QWORD *)*v100;
                    if (!v100)
                      goto LABEL_479;
                  }
                }
                while (2)
                {
                  v104 = v100[1];
                  if (v104 != v72)
                  {
                    if (v104 >= *(_QWORD *)&v77)
                      v104 %= *(_QWORD *)&v77;
                    if (v104 != v98)
                      goto LABEL_479;
LABEL_222:
                    v100 = (_QWORD *)*v100;
                    if (!v100)
                      goto LABEL_479;
                    continue;
                  }
                  break;
                }
                if (v100[2] != v72)
                  goto LABEL_222;
LABEL_219:
                if (v78.u32[0] > 1uLL)
                {
                  v103 = v85;
                  if (*(_QWORD *)&v77 <= v85)
                    v103 = v85 % *(_QWORD *)&v77;
                }
                else
                {
                  v103 = v85 & v79;
                }
                v105 = *(uint64_t **)(v83 + 8 * v103);
                if (!v105)
                  goto LABEL_479;
                result = *v105;
                if (!result)
                  goto LABEL_479;
                v106 = v100[12];
                if (v78.u32[0] < 2uLL)
                {
                  while (1)
                  {
                    v107 = *(_QWORD *)(result + 8);
                    if (v107 == v85)
                    {
                      if (*(_QWORD *)(result + 16) == v85)
                        goto LABEL_208;
                    }
                    else if ((v107 & v79) != v103)
                    {
                      goto LABEL_479;
                    }
                    result = *(_QWORD *)result;
                    if (!result)
                      goto LABEL_479;
                  }
                }
                while (2)
                {
                  v108 = *(_QWORD *)(result + 8);
                  if (v108 != v85)
                  {
                    if (v108 >= *(_QWORD *)&v77)
                      v108 %= *(_QWORD *)&v77;
                    if (v108 != v103)
                      goto LABEL_479;
LABEL_240:
                    result = *(_QWORD *)result;
                    if (!result)
                      goto LABEL_479;
                    continue;
                  }
                  break;
                }
                if (*(_QWORD *)(result + 16) != v85)
                  goto LABEL_240;
LABEL_208:
                if (v106 > *(_QWORD *)(result + 96))
                  continue;
                break;
              }
              if (v9 < v75)
                continue;
              break;
            }
LABEL_246:
            v109 = v9 - 1;
            if (v9 - 1 != v217)
              *v217 = *v109;
            a5 = 0;
            *v109 = v72;
            continue;
          }
LABEL_11:
          v16 = (int8x8_t)(*a3)[1];
          if (!*(_QWORD *)&v16)
            goto LABEL_479;
          v17 = *v9;
          v18 = (uint8x8_t)vcnt_s8(v16);
          v18.i16[0] = vaddlv_u8(v18);
          v19 = *(_QWORD *)&v16 - 1;
          v20 = **a3;
          v21 = v9;
          while (2)
          {
            v22 = v21;
            v24 = v21[1];
            ++v21;
            v23 = v24;
            if (v18.u32[0] > 1uLL)
            {
              v25 = v23;
              if (*(_QWORD *)&v16 <= v23)
                v25 = v23 % *(_QWORD *)&v16;
            }
            else
            {
              v25 = v23 & v19;
            }
            v26 = *(_QWORD **)(v20 + 8 * v25);
            if (!v26)
              goto LABEL_479;
            v27 = (_QWORD *)*v26;
            if (!v27)
              goto LABEL_479;
            if (v18.u32[0] < 2uLL)
            {
              while (1)
              {
                v28 = v27[1];
                if (v28 == v23)
                {
                  if (v27[2] == v23)
                  {
                    v29 = v27[12];
                    v30 = (*(_QWORD *)&v16 - 1) & *v9;
                    goto LABEL_37;
                  }
                }
                else if ((v28 & v19) != v25)
                {
                  goto LABEL_479;
                }
                v27 = (_QWORD *)*v27;
                if (!v27)
                  goto LABEL_479;
              }
            }
            while (1)
            {
              v31 = v27[1];
              if (v31 == v23)
                break;
              if (v31 >= *(_QWORD *)&v16)
                v31 %= *(_QWORD *)&v16;
              if (v31 != v25)
                goto LABEL_479;
LABEL_28:
              v27 = (_QWORD *)*v27;
              if (!v27)
                goto LABEL_479;
            }
            if (v27[2] != v23)
              goto LABEL_28;
            v29 = v27[12];
            if (*(_QWORD *)&v16 <= v17)
              v30 = v17 % *(_QWORD *)&v16;
            else
              v30 = *v9;
LABEL_37:
            v32 = *(_QWORD **)(v20 + 8 * v30);
            if (!v32)
              goto LABEL_479;
            v33 = (_QWORD *)*v32;
            if (!v33)
              goto LABEL_479;
            if (v18.u32[0] < 2uLL)
            {
              while (1)
              {
                v34 = v33[1];
                if (v34 == v17)
                {
                  if (v33[2] == v17)
                    goto LABEL_13;
                }
                else if ((v34 & v19) != v30)
                {
                  goto LABEL_479;
                }
                v33 = (_QWORD *)*v33;
                if (!v33)
                  goto LABEL_479;
              }
            }
            while (2)
            {
              v35 = v33[1];
              if (v35 != v17)
              {
                if (v35 >= *(_QWORD *)&v16)
                  v35 %= *(_QWORD *)&v16;
                if (v35 != v30)
                  goto LABEL_479;
LABEL_47:
                v33 = (_QWORD *)*v33;
                if (!v33)
                  goto LABEL_479;
                continue;
              }
              break;
            }
            if (v33[2] != v17)
              goto LABEL_47;
LABEL_13:
            if (v29 > v33[12])
              continue;
            break;
          }
          v36 = a2;
          if (v22 == v9)
          {
            v36 = a2;
            do
            {
              if (v21 >= v36)
                break;
              v38 = *--v36;
            }
            while (!sub_20EFA3164(*a3, v38, v17));
          }
          else
          {
            do
              v37 = *--v36;
            while (!sub_20EFA3164(*a3, v37, v17));
          }
          if (v21 >= v36)
          {
            v9 = v21;
            goto LABEL_145;
          }
          v39 = (int8x8_t)(*a3)[1];
          if (!*(_QWORD *)&v39)
          {
            v211 = *v21;
            *v21 = *v36;
            *v36 = v211;
            sub_20E89FD20("unordered_map::at: key not found");
          }
          v40 = (uint8x8_t)vcnt_s8(v39);
          v40.i16[0] = vaddlv_u8(v40);
          v41 = *(_QWORD *)&v39 - 1;
          v42 = **a3;
          v43 = *v21;
          v44 = *v36;
          v9 = v21;
          v45 = v36;
          while (2)
          {
            *v9 = v44;
            *v45 = v43;
            while (2)
            {
              v46 = v9[1];
              ++v9;
              v43 = v46;
              if (v40.u32[0] > 1uLL)
              {
                v47 = v43;
                if (*(_QWORD *)&v39 <= v43)
                  v47 = v43 % *(_QWORD *)&v39;
              }
              else
              {
                v47 = v43 & v41;
              }
              v48 = *(_QWORD **)(v42 + 8 * v47);
              if (!v48)
                goto LABEL_479;
              v49 = (_QWORD *)*v48;
              if (!v49)
                goto LABEL_479;
              if (v40.u32[0] < 2uLL)
              {
                while (1)
                {
                  v50 = v49[1];
                  if (v50 == v43)
                  {
                    if (v49[2] == v43)
                    {
                      v51 = v49[12];
                      v52 = (*(_QWORD *)&v39 - 1) & v17;
                      goto LABEL_88;
                    }
                  }
                  else if ((v50 & v41) != v47)
                  {
                    goto LABEL_479;
                  }
                  v49 = (_QWORD *)*v49;
                  if (!v49)
                    goto LABEL_479;
                }
              }
              while (2)
              {
                v53 = v49[1];
                if (v53 != v43)
                {
                  if (v53 >= *(_QWORD *)&v39)
                    v53 %= *(_QWORD *)&v39;
                  if (v53 != v47)
                    goto LABEL_479;
LABEL_79:
                  v49 = (_QWORD *)*v49;
                  if (!v49)
                    goto LABEL_479;
                  continue;
                }
                break;
              }
              if (v49[2] != v43)
                goto LABEL_79;
              v51 = v49[12];
              if (*(_QWORD *)&v39 <= v17)
                v52 = v17 % *(_QWORD *)&v39;
              else
                v52 = v17;
LABEL_88:
              v54 = *(_QWORD **)(v42 + 8 * v52);
              if (!v54)
                goto LABEL_479;
              v55 = (_QWORD *)*v54;
              if (!v55)
                goto LABEL_479;
              if (v40.u32[0] < 2uLL)
              {
                while (1)
                {
                  v56 = v55[1];
                  if (v56 == v17)
                  {
                    if (v55[2] == v17)
                      goto LABEL_64;
                  }
                  else if ((v56 & v41) != v52)
                  {
                    goto LABEL_479;
                  }
                  v55 = (_QWORD *)*v55;
                  if (!v55)
                    goto LABEL_479;
                }
              }
              while (2)
              {
                v57 = v55[1];
                if (v57 != v17)
                {
                  if (v57 >= *(_QWORD *)&v39)
                    v57 %= *(_QWORD *)&v39;
                  if (v57 != v52)
                    goto LABEL_479;
LABEL_98:
                  v55 = (_QWORD *)*v55;
                  if (!v55)
                    goto LABEL_479;
                  continue;
                }
                break;
              }
              if (v55[2] != v17)
                goto LABEL_98;
LABEL_64:
              if (v51 > v55[12])
                continue;
              break;
            }
            while (2)
            {
              v58 = *--v45;
              v44 = v58;
              if (v40.u32[0] > 1uLL)
              {
                v59 = v44;
                if (*(_QWORD *)&v39 <= v44)
                  v59 = v44 % *(_QWORD *)&v39;
              }
              else
              {
                v59 = v44 & v41;
              }
              v60 = *(_QWORD **)(v42 + 8 * v59);
              if (!v60)
                goto LABEL_479;
              v61 = (_QWORD *)*v60;
              if (!v61)
                goto LABEL_479;
              if (v40.u32[0] < 2uLL)
              {
                while (1)
                {
                  v62 = v61[1];
                  if (v62 == v44)
                  {
                    if (v61[2] == v44)
                    {
                      v63 = v61[12];
                      v64 = (*(_QWORD *)&v39 - 1) & v17;
                      goto LABEL_128;
                    }
                  }
                  else if ((v62 & v41) != v59)
                  {
                    goto LABEL_479;
                  }
                  v61 = (_QWORD *)*v61;
                  if (!v61)
                    goto LABEL_479;
                }
              }
              while (2)
              {
                v65 = v61[1];
                if (v65 != v44)
                {
                  if (v65 >= *(_QWORD *)&v39)
                    v65 %= *(_QWORD *)&v39;
                  if (v65 != v59)
                    goto LABEL_479;
LABEL_119:
                  v61 = (_QWORD *)*v61;
                  if (!v61)
                    goto LABEL_479;
                  continue;
                }
                break;
              }
              if (v61[2] != v44)
                goto LABEL_119;
              v63 = v61[12];
              if (*(_QWORD *)&v39 <= v17)
                v64 = v17 % *(_QWORD *)&v39;
              else
                v64 = v17;
LABEL_128:
              v66 = *(_QWORD **)(v42 + 8 * v64);
              if (!v66)
                goto LABEL_479;
              v67 = (_QWORD *)*v66;
              if (!v67)
                goto LABEL_479;
              if (v40.u32[0] < 2uLL)
              {
                while (1)
                {
                  v68 = v67[1];
                  if (v68 == v17)
                  {
                    if (v67[2] == v17)
                      goto LABEL_104;
                  }
                  else if ((v68 & v41) != v64)
                  {
                    goto LABEL_479;
                  }
                  v67 = (_QWORD *)*v67;
                  if (!v67)
                    goto LABEL_479;
                }
              }
              while (2)
              {
                v69 = v67[1];
                if (v69 != v17)
                {
                  if (v69 >= *(_QWORD *)&v39)
                    v69 %= *(_QWORD *)&v39;
                  if (v69 != v64)
                    goto LABEL_479;
LABEL_138:
                  v67 = (_QWORD *)*v67;
                  if (!v67)
                    goto LABEL_479;
                  continue;
                }
                break;
              }
              if (v67[2] != v17)
                goto LABEL_138;
LABEL_104:
              if (v63 <= v67[12])
                continue;
              break;
            }
            if (v9 < v45)
              continue;
            break;
          }
LABEL_145:
          v70 = v9 - 1;
          if (v9 - 1 != v217)
            *v217 = *v70;
          *v70 = v17;
          if (v21 < v36)
          {
LABEL_150:
            result = sub_20EFA1C3C(v217, v9 - 1, a3, a4, a5 & 1);
            a5 = 0;
            continue;
          }
          v71 = sub_20EFA34E4(v217, v9 - 1, a3);
          result = sub_20EFA34E4(v9, a2, a3);
          if (!(_DWORD)result)
          {
            if (!v71)
              goto LABEL_150;
            continue;
          }
          a2 = v9 - 1;
          v9 = v217;
          if (v71)
            return result;
          goto LABEL_2;
        }
        v111 = v9 + 1;
        v113 = v9 == a2 || v111 == a2;
        if ((a5 & 1) != 0)
        {
          if (!v113)
          {
            v114 = v9;
            do
            {
              v116 = v111;
              result = sub_20EFA3164(*a3, v114[1], *v114);
              if (!(_DWORD)result)
                goto LABEL_269;
              v117 = *v116;
              v118 = *a3;
              v115 = v116;
              v119 = *v114;
LABEL_273:
              *v115 = v119;
              if (v114 != v9)
              {
                v120 = (int8x8_t)v118[1];
                if (!*(_QWORD *)&v120)
                  goto LABEL_479;
                v115 = v114;
                v121 = (uint8x8_t)vcnt_s8(v120);
                v121.i16[0] = vaddlv_u8(v121);
                if (v121.u32[0] > 1uLL)
                {
                  v122 = v117;
                  if (*(_QWORD *)&v120 <= v117)
                    v122 = v117 % *(_QWORD *)&v120;
                }
                else
                {
                  v122 = (*(_QWORD *)&v120 - 1) & v117;
                }
                v123 = *(_QWORD **)(*v118 + 8 * v122);
                if (!v123)
                  goto LABEL_479;
                v124 = (_QWORD *)*v123;
                if (!*v123)
                  goto LABEL_479;
                --v114;
                v119 = *(v115 - 1);
                v125 = *(_QWORD *)&v120 - 1;
                if (v121.u32[0] < 2uLL)
                {
                  while (1)
                  {
                    v126 = v124[1];
                    if (v126 == v117)
                    {
                      result = v124[2];
                      if (result == v117)
                        goto LABEL_287;
                    }
                    else if ((v126 & v125) != v122)
                    {
                      goto LABEL_479;
                    }
                    v124 = (_QWORD *)*v124;
                    if (!v124)
                      goto LABEL_479;
                  }
                }
                while (1)
                {
                  v128 = v124[1];
                  if (v128 == v117)
                  {
                    result = v124[2];
                    if (result == v117)
                    {
LABEL_287:
                      if (v121.u32[0] > 1uLL)
                      {
                        v127 = *(v115 - 1);
                        if (*(_QWORD *)&v120 <= v119)
                          v127 = v119 % *(_QWORD *)&v120;
                      }
                      else
                      {
                        v127 = v125 & v119;
                      }
                      v129 = *(_QWORD **)(*v118 + 8 * v127);
                      if (!v129)
                        goto LABEL_479;
                      v130 = (_QWORD *)*v129;
                      if (!v130)
                        goto LABEL_479;
                      v131 = v124[12];
                      if (v121.u32[0] < 2uLL)
                      {
                        while (1)
                        {
                          v132 = v130[1];
                          if (v132 == v119)
                          {
                            if (v130[2] == v119)
                              goto LABEL_272;
                          }
                          else if ((v132 & v125) != v127)
                          {
                            goto LABEL_479;
                          }
                          v130 = (_QWORD *)*v130;
                          if (!v130)
                            goto LABEL_479;
                        }
                      }
                      while (2)
                      {
                        v133 = v130[1];
                        if (v133 != v119)
                        {
                          if (v133 >= *(_QWORD *)&v120)
                            v133 %= *(_QWORD *)&v120;
                          if (v133 != v127)
                            goto LABEL_479;
LABEL_308:
                          v130 = (_QWORD *)*v130;
                          if (!v130)
                            goto LABEL_479;
                          continue;
                        }
                        break;
                      }
                      if (v130[2] != v119)
                        goto LABEL_308;
LABEL_272:
                      if (v131 <= v130[12])
                        goto LABEL_268;
                      goto LABEL_273;
                    }
                  }
                  else
                  {
                    if (v128 >= *(_QWORD *)&v120)
                      v128 %= *(_QWORD *)&v120;
                    if (v128 != v122)
                      goto LABEL_479;
                  }
                  v124 = (_QWORD *)*v124;
                  if (!v124)
                    goto LABEL_479;
                }
              }
              v115 = v9;
LABEL_268:
              *v115 = v117;
LABEL_269:
              v111 = v116 + 1;
              v114 = v116;
            }
            while (v116 + 1 != a2);
          }
          return result;
        }
        if (v113)
          return result;
        while (2)
        {
          v189 = v111;
          result = sub_20EFA3164(*a3, v9[1], *v9);
          if (!(_DWORD)result)
            goto LABEL_432;
          v190 = (int8x8_t)(*a3)[1];
          if (!*(_QWORD *)&v190)
          {
            *v189 = *v9;
            sub_20E89FD20("unordered_map::at: key not found");
          }
          v191 = *v189;
          v192 = (uint8x8_t)vcnt_s8(v190);
          v192.i16[0] = vaddlv_u8(v192);
          v193 = *(_QWORD *)&v190 - 1;
          v194 = v192.u32[0] < 2uLL;
          if (v192.u32[0] >= 2uLL)
            v195 = -1;
          else
            v195 = *(_QWORD *)&v190 - 1;
          v196 = **a3;
          v197 = *v9;
          if (*(_QWORD *)&v190 > v191)
            v194 = 1;
          v198 = v195 & v191;
          v199 = v189;
          while (2)
          {
            *v199 = v197;
            v199 = v9;
            v200 = v198;
            if (!v194)
              v200 = v191 % *(_QWORD *)&v190;
            v201 = *(_QWORD **)(v196 + 8 * v200);
            if (!v201 || (v202 = (_QWORD *)*v201) == 0)
LABEL_479:
              sub_20E89FD20("unordered_map::at: key not found");
            --v9;
            v197 = *(v199 - 1);
            if (v192.u32[0] < 2uLL)
            {
              while (1)
              {
                v203 = v202[1];
                if (v203 == v191)
                {
                  if (v202[2] == v191)
                    goto LABEL_452;
                }
                else if ((v203 & v193) != v200)
                {
                  goto LABEL_479;
                }
                v202 = (_QWORD *)*v202;
                if (!v202)
                  goto LABEL_479;
              }
            }
            while (1)
            {
              v205 = v202[1];
              if (v205 == v191)
                break;
              if (v205 >= *(_QWORD *)&v190)
                v205 %= *(_QWORD *)&v190;
              if (v205 != v200)
                goto LABEL_479;
LABEL_455:
              v202 = (_QWORD *)*v202;
              if (!v202)
                goto LABEL_479;
            }
            if (v202[2] != v191)
              goto LABEL_455;
LABEL_452:
            if (v192.u32[0] > 1uLL)
            {
              v204 = *(v199 - 1);
              if (*(_QWORD *)&v190 <= v197)
                v204 = v197 % *(_QWORD *)&v190;
            }
            else
            {
              v204 = v197 & v193;
            }
            v206 = *(_QWORD **)(v196 + 8 * v204);
            if (!v206)
              goto LABEL_479;
            v207 = (_QWORD *)*v206;
            if (!v207)
              goto LABEL_479;
            v208 = v202[12];
            if (v192.u32[0] < 2uLL)
            {
              while (1)
              {
                v209 = v207[1];
                if (v209 == v197)
                {
                  if (v207[2] == v197)
                    goto LABEL_441;
                }
                else if ((v209 & v193) != v204)
                {
                  goto LABEL_479;
                }
                v207 = (_QWORD *)*v207;
                if (!v207)
                  goto LABEL_479;
              }
            }
            while (1)
            {
              v210 = v207[1];
              if (v210 == v197)
                break;
              if (v210 >= *(_QWORD *)&v190)
                v210 %= *(_QWORD *)&v190;
              if (v210 != v204)
                goto LABEL_479;
LABEL_473:
              v207 = (_QWORD *)*v207;
              if (!v207)
                goto LABEL_479;
            }
            if (v207[2] != v197)
              goto LABEL_473;
LABEL_441:
            result = v207[12];
            if (v208 > result)
              continue;
            break;
          }
          *v199 = v191;
LABEL_432:
          v111 = v189 + 1;
          v9 = v189;
          if (v189 + 1 != a2)
            continue;
          return result;
        }
    }
  }
}

BOOL sub_20EFA3164(_QWORD *a1, unint64_t a2, unint64_t a3)
{
  int8x8_t v3;
  uint8x8_t v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v17;

  v3 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v3)
    goto LABEL_41;
  v4 = (uint8x8_t)vcnt_s8(v3);
  v4.i16[0] = vaddlv_u8(v4);
  if (v4.u32[0] > 1uLL)
  {
    v5 = a2;
    if (*(_QWORD *)&v3 <= a2)
      v5 = a2 % *(_QWORD *)&v3;
  }
  else
  {
    v5 = (*(_QWORD *)&v3 - 1) & a2;
  }
  v6 = *(_QWORD **)(*a1 + 8 * v5);
  if (!v6 || (v7 = (_QWORD *)*v6) == 0)
LABEL_41:
    sub_20E89FD20("unordered_map::at: key not found");
  v8 = *(_QWORD *)&v3 - 1;
  if (v4.u32[0] < 2uLL)
  {
    while (1)
    {
      v9 = v7[1];
      if (v9 == a2)
      {
        if (v7[2] == a2)
          goto LABEL_14;
      }
      else if ((v9 & v8) != v5)
      {
        goto LABEL_41;
      }
      v7 = (_QWORD *)*v7;
      if (!v7)
        goto LABEL_41;
    }
  }
  while (1)
  {
    v11 = v7[1];
    if (v11 == a2)
      break;
    if (v11 >= *(_QWORD *)&v3)
      v11 %= *(_QWORD *)&v3;
    if (v11 != v5)
      goto LABEL_41;
LABEL_17:
    v7 = (_QWORD *)*v7;
    if (!v7)
      goto LABEL_41;
  }
  if (v7[2] != a2)
    goto LABEL_17;
LABEL_14:
  if (v4.u32[0] > 1uLL)
  {
    v10 = a3;
    if (*(_QWORD *)&v3 <= a3)
      v10 = a3 % *(_QWORD *)&v3;
  }
  else
  {
    v10 = v8 & a3;
  }
  v12 = *(_QWORD **)(*a1 + 8 * v10);
  if (!v12)
    goto LABEL_41;
  v13 = (_QWORD *)*v12;
  if (!v13)
    goto LABEL_41;
  v14 = v7[12];
  if (v4.u32[0] < 2uLL)
  {
    while (1)
    {
      v15 = v13[1];
      if (v15 == a3)
      {
        if (v13[2] == a3)
          return v14 > v13[12];
      }
      else if ((v15 & v8) != v10)
      {
        goto LABEL_41;
      }
      v13 = (_QWORD *)*v13;
      if (!v13)
        goto LABEL_41;
    }
  }
  while (1)
  {
    v17 = v13[1];
    if (v17 == a3)
      break;
    if (v17 >= *(_QWORD *)&v3)
      v17 %= *(_QWORD *)&v3;
    if (v17 != v10)
      goto LABEL_41;
LABEL_35:
    v13 = (_QWORD *)*v13;
    if (!v13)
      goto LABEL_41;
  }
  if (v13[2] != a3)
    goto LABEL_35;
  return v14 > v13[12];
}

BOOL sub_20EFA330C(unint64_t *a1, unint64_t *a2, unint64_t *a3, unint64_t *a4, unint64_t *a5, _QWORD **a6)
{
  _BOOL8 result;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;

  sub_20EFA36C4(a1, a2, a3, a4, a6);
  result = sub_20EFA3164(*a6, *a5, *a4);
  if (result)
  {
    v13 = *a4;
    *a4 = *a5;
    *a5 = v13;
    result = sub_20EFA3164(*a6, *a4, *a3);
    if (result)
    {
      v14 = *a3;
      *a3 = *a4;
      *a4 = v14;
      result = sub_20EFA3164(*a6, *a3, *a2);
      if (result)
      {
        v15 = *a2;
        *a2 = *a3;
        *a3 = v15;
        result = sub_20EFA3164(*a6, *a2, *a1);
        if (result)
        {
          v16 = *a1;
          *a1 = *a2;
          *a2 = v16;
        }
      }
    }
  }
  return result;
}

BOOL sub_20EFA33E4(unint64_t *a1, unint64_t *a2, unint64_t *a3, _QWORD **a4)
{
  BOOL v8;
  _BOOL8 result;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;

  v8 = sub_20EFA3164(*a4, *a2, *a1);
  result = sub_20EFA3164(*a4, *a3, *a2);
  if (v8)
  {
    v10 = *a1;
    if (result)
    {
      *a1 = *a3;
      *a3 = v10;
    }
    else
    {
      *a1 = *a2;
      *a2 = v10;
      result = sub_20EFA3164(*a4, *a3, v10);
      if (result)
      {
        v13 = *a2;
        *a2 = *a3;
        *a3 = v13;
      }
    }
  }
  else if (result)
  {
    v11 = *a2;
    *a2 = *a3;
    *a3 = v11;
    result = sub_20EFA3164(*a4, *a2, *a1);
    if (result)
    {
      v12 = *a1;
      *a1 = *a2;
      *a2 = v12;
    }
  }
  return result;
}

BOOL sub_20EFA34E4(unint64_t *a1, unint64_t *a2, _QWORD **a3)
{
  uint64_t v6;
  _BOOL8 result;
  unint64_t *v8;
  unint64_t *v9;
  uint64_t v10;
  int v11;
  unint64_t v12;
  uint64_t v13;
  char *v14;
  unint64_t v15;

  v6 = a2 - a1;
  result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      if (sub_20EFA3164(*a3, *(a2 - 1), *a1))
      {
        v15 = *a1;
        *a1 = *(a2 - 1);
        *(a2 - 1) = v15;
      }
      return 1;
    case 3:
      sub_20EFA33E4(a1, a1 + 1, a2 - 1, a3);
      return 1;
    case 4:
      sub_20EFA36C4(a1, a1 + 1, a1 + 2, a2 - 1, a3);
      return 1;
    case 5:
      sub_20EFA330C(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1, a3);
      return 1;
    default:
      v8 = a1 + 2;
      sub_20EFA33E4(a1, a1 + 1, a1 + 2, a3);
      v9 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v10 = 0;
      v11 = 0;
      break;
  }
  while (!sub_20EFA3164(*a3, *v9, *v8))
  {
LABEL_11:
    v8 = v9;
    v10 += 8;
    if (++v9 == a2)
      return 1;
  }
  v12 = *v9;
  v13 = v10;
  do
  {
    v14 = (char *)a1 + v13;
    *(unint64_t *)((char *)a1 + v13 + 24) = *(unint64_t *)((char *)a1 + v13 + 16);
    if (v13 == -16)
    {
      *a1 = v12;
      if (++v11 != 8)
        goto LABEL_11;
      return v9 + 1 == a2;
    }
    v13 -= 8;
  }
  while (sub_20EFA3164(*a3, v12, *((_QWORD *)v14 + 1)));
  *(unint64_t *)((char *)a1 + v13 + 24) = v12;
  if (++v11 != 8)
    goto LABEL_11;
  return v9 + 1 == a2;
}

BOOL sub_20EFA36C4(unint64_t *a1, unint64_t *a2, unint64_t *a3, unint64_t *a4, _QWORD **a5)
{
  _BOOL8 result;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;

  sub_20EFA33E4(a1, a2, a3, a5);
  result = sub_20EFA3164(*a5, *a4, *a3);
  if (result)
  {
    v11 = *a3;
    *a3 = *a4;
    *a4 = v11;
    result = sub_20EFA3164(*a5, *a3, *a2);
    if (result)
    {
      v12 = *a2;
      *a2 = *a3;
      *a3 = v12;
      result = sub_20EFA3164(*a5, *a2, *a1);
      if (result)
      {
        v13 = *a1;
        *a1 = *a2;
        *a2 = v13;
      }
    }
  }
  return result;
}

void sub_20EFA3774(uint64_t a1, uint64_t *a2, os_log_t oslog, os_log_type_t type, const char **a5)
{
  size_t v9;
  std::__shared_weak_count_vtbl *v10;
  std::__shared_weak_count *v11;
  const char *v12;
  size_t v13;
  size_t v14;
  _QWORD *p_dst;
  const char *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  char v21;
  _QWORD *v22;
  uint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *p_shared_owners;
  unint64_t v26;
  uint64_t *v27;
  unint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t *v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  _QWORD *v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  __int128 v60;
  std::__shared_weak_count *v61;
  __int128 v62;
  _QWORD *__dst;
  __int128 v64;
  _BYTE v65[24];
  __int128 v66;
  uint64_t v67;
  _QWORD v68[3];

  v68[2] = *MEMORY[0x24BDAC8D0];
  if (a1 && *(_QWORD *)(a1 + 8))
  {
    v9 = _os_log_pack_size();
    v10 = (std::__shared_weak_count_vtbl *)operator new(v9, (std::align_val_t)8uLL);
    v11 = (std::__shared_weak_count *)operator new();
    v11->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
    v11->__shared_owners_ = 0;
    v11->__shared_weak_owners_ = 0;
    v11[1].__vftable = v10;
    *(_QWORD *)&v60 = v10;
    *((_QWORD *)&v60 + 1) = v10;
    v62 = 0uLL;
    v61 = v11;
    v12 = *a5;
    v13 = strlen(*a5);
    if (v13 >= 0x7FFFFFFFFFFFFFF8)
      sub_20E860B7C();
    v14 = v13;
    if (v13 >= 0x17)
    {
      v18 = (v13 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v13 | 7) != 0x17)
        v18 = v13 | 7;
      v19 = v18 + 1;
      p_dst = operator new(v18 + 1);
      *(_QWORD *)&v64 = v14;
      *((_QWORD *)&v64 + 1) = v19 | 0x8000000000000000;
      __dst = p_dst;
    }
    else
    {
      HIBYTE(v64) = v13;
      p_dst = &__dst;
      if (!v13)
      {
LABEL_13:
        *((_BYTE *)p_dst + v14) = 0;
        v20 = __dst;
        v68[0] = v64;
        *(_QWORD *)((char *)v68 + 7) = *(_QWORD *)((char *)&v64 + 7);
        v21 = HIBYTE(v64);
        v22 = operator new(0x38uLL);
        v22[1] = 0;
        v22[2] = 0;
        v22[3] = off_24C9ABC20;
        *v22 = &off_24C9ABBD0;
        v23 = v68[0];
        v22[4] = v20;
        v22[5] = v23;
        *(_QWORD *)((char *)v22 + 47) = *(_QWORD *)((char *)v68 + 7);
        *((_BYTE *)v22 + 55) = v21;
        v68[0] = 0;
        *(_QWORD *)((char *)v68 + 7) = 0;
        v24 = (std::__shared_weak_count *)*((_QWORD *)&v62 + 1);
        *(_QWORD *)&v62 = v22 + 3;
        *((_QWORD *)&v62 + 1) = v22;
        if (v24)
        {
          p_shared_owners = (unint64_t *)&v24->__shared_owners_;
          do
            v26 = __ldaxr(p_shared_owners);
          while (__stlxr(v26 - 1, p_shared_owners));
          if (!v26)
          {
            ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
            std::__shared_weak_count::__release_weak(v24);
          }
        }
        *(_OWORD *)v65 = v60;
        *(_QWORD *)&v65[16] = v61;
        if (v61)
        {
          v27 = &v61->__shared_owners_;
          do
            v28 = __ldxr((unint64_t *)v27);
          while (__stxr(v28 + 1, (unint64_t *)v27));
        }
        v66 = v62;
        if (*((_QWORD *)&v62 + 1))
        {
          v29 = (unint64_t *)(*((_QWORD *)&v62 + 1) + 8);
          do
            v30 = __ldxr(v29);
          while (__stxr(v30 + 1, v29));
          v67 = v62;
          do
            v31 = __ldaxr(v29);
          while (__stlxr(v31 - 1, v29));
          if (!v31)
          {
            (*(void (**)(_QWORD))(**((_QWORD **)&v62 + 1) + 16))(*((_QWORD *)&v62 + 1));
            std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v62 + 1));
          }
        }
        else
        {
          v67 = v62;
        }
        if (v61)
        {
          v32 = &v61->__shared_owners_;
          do
            v33 = __ldaxr((unint64_t *)v32);
          while (__stlxr(v33 - 1, (unint64_t *)v32));
          if (!v33)
          {
            ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
            std::__shared_weak_count::__release_weak(v61);
          }
        }
        v34 = *(_QWORD *)v65;
        if (*(char *)(v67 + 31) >= 0)
          v35 = v67 + 8;
        else
          v35 = *(_QWORD *)(v67 + 8);
        v36 = _os_log_pack_fill();
        *(_DWORD *)v36 = 136315138;
        *(_QWORD *)(v36 + 4) = v35;
        v37 = operator new();
        v38 = *((unsigned __int8 *)a2 + 23);
        if ((v38 & 0x80u) == 0)
          v39 = a2;
        else
          v39 = (uint64_t *)*a2;
        if ((v38 & 0x80u) != 0)
          v38 = a2[1];
        *(_QWORD *)v37 = v34;
        *(_OWORD *)(v37 + 8) = *(_OWORD *)&v65[8];
        *(_QWORD *)&v65[8] = 0;
        *(_QWORD *)&v65[16] = 0;
        *(_OWORD *)(v37 + 24) = v66;
        v66 = 0uLL;
        *(_QWORD *)(v37 + 40) = v39;
        *(_QWORD *)(v37 + 48) = v38;
        *(_BYTE *)(v37 + 56) = type;
        __dst = 0;
        *(_QWORD *)&v60 = v37;
        (*(void (**)(_QWORD, __int128 *))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8), &v60);
        v40 = v60;
        *(_QWORD *)&v60 = 0;
        if (v40)
        {
          v41 = *(std::__shared_weak_count **)(v40 + 32);
          if (v41)
          {
            v42 = (unint64_t *)&v41->__shared_owners_;
            do
              v43 = __ldaxr(v42);
            while (__stlxr(v43 - 1, v42));
            if (!v43)
            {
              ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
              std::__shared_weak_count::__release_weak(v41);
            }
          }
          v44 = *(std::__shared_weak_count **)(v40 + 16);
          if (v44)
          {
            v45 = (unint64_t *)&v44->__shared_owners_;
            do
              v46 = __ldaxr(v45);
            while (__stlxr(v46 - 1, v45));
            if (!v46)
            {
              ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
              std::__shared_weak_count::__release_weak(v44);
            }
          }
          MEMORY[0x212BC6398](v40, 0x10F0C40B62ED6C6);
          v47 = __dst;
          __dst = 0;
          if (v47)
          {
            v48 = (std::__shared_weak_count *)v47[4];
            if (v48)
            {
              v49 = (unint64_t *)&v48->__shared_owners_;
              do
                v50 = __ldaxr(v49);
              while (__stlxr(v50 - 1, v49));
              if (!v50)
              {
                ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
                std::__shared_weak_count::__release_weak(v48);
              }
            }
            v51 = (std::__shared_weak_count *)v47[2];
            if (v51)
            {
              v52 = (unint64_t *)&v51->__shared_owners_;
              do
                v53 = __ldaxr(v52);
              while (__stlxr(v53 - 1, v52));
              if (!v53)
              {
                ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
                std::__shared_weak_count::__release_weak(v51);
              }
            }
            MEMORY[0x212BC6398](v47, 0x10F0C40B62ED6C6);
          }
        }
        v54 = (std::__shared_weak_count *)*((_QWORD *)&v66 + 1);
        if (*((_QWORD *)&v66 + 1))
        {
          v55 = (unint64_t *)(*((_QWORD *)&v66 + 1) + 8);
          do
            v56 = __ldaxr(v55);
          while (__stlxr(v56 - 1, v55));
          if (!v56)
          {
            ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
            std::__shared_weak_count::__release_weak(v54);
          }
        }
        v57 = *(std::__shared_weak_count **)&v65[16];
        if (*(_QWORD *)&v65[16])
        {
          v58 = (unint64_t *)(*(_QWORD *)&v65[16] + 8);
          do
            v59 = __ldaxr(v58);
          while (__stlxr(v59 - 1, v58));
          if (!v59)
          {
            ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
            std::__shared_weak_count::__release_weak(v57);
          }
        }
        return;
      }
    }
    memcpy(p_dst, v12, v14);
    goto LABEL_13;
  }
  os_log_type_enabled(oslog, type);
  v16 = *a5;
  *(_DWORD *)v65 = 136315138;
  *(_QWORD *)&v65[4] = v16;
  v17 = (void *)_os_log_send_and_compose_impl();
  if (v17)
    free(v17);
}

void sub_20EFA3CE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  va_list va1;
  uint64_t v12;
  uint64_t v13;
  va_list va2;

  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v10 = va_arg(va2, _QWORD);
  v12 = va_arg(va2, _QWORD);
  v13 = va_arg(va2, _QWORD);
  sub_20E86E8C4((uint64_t *)va);
  sub_20E86E8C4((uint64_t *)va1);
  sub_20E86E658((uint64_t)va2);
  _Unwind_Resume(a1);
}

void sub_20EFA3D0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  sub_20E86E658((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20EFA3D20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  void *v11;
  int v12;

  if (v12 < 0)
  {
    operator delete(v11);
    sub_20E86E658((uint64_t)&a11);
    _Unwind_Resume(a1);
  }
  sub_20E86E658((uint64_t)&a11);
  _Unwind_Resume(a1);
}

uint64_t sub_20EFA3D78(uint64_t a1, uint64_t *a2)
{
  void **v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  void **v7;
  void **v8;
  _BYTE *v9;
  size_t v10;
  char *v11;
  void **v12;
  char *v13;
  void **v14;
  char *v15;
  void **v16;
  char *v17;
  void **v18;
  char *v19;
  char *v20;
  void **v21;
  _BYTE __p[24];
  void *__dst[2];
  uint64_t v25;

  *(_OWORD *)(a1 + 8) = 0u;
  v3 = (void **)(a1 + 8);
  *(_OWORD *)(a1 + 232) = 0u;
  v4 = a1 + 232;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 280) = 0u;
  *(_QWORD *)a1 = &off_24C9F2650;
  *(_QWORD *)(a1 + 56) = &unk_24C9F2698;
  *(_QWORD *)(a1 + 112) = &unk_24C9F26C0;
  *(_QWORD *)(a1 + 168) = &unk_24C9F26E8;
  *(_QWORD *)(a1 + 224) = &unk_24C9F2710;
  v5 = *a2;
  *a2 = 0;
  *(_QWORD *)(a1 + 328) = v5;
  *(_BYTE *)(a1 + 336) = 0;
  *(_BYTE *)(a1 + 344) = 0;
  HIBYTE(v25) = 14;
  strcpy((char *)__dst, "MappingIO Node");
  v6 = (char *)operator new(0x48uLL);
  v7 = (void **)(a1 + 280);
  *(_QWORD *)__p = v6;
  *(_OWORD *)&__p[8] = xmmword_2102DCEB0;
  strcpy(v6, "Low priority Async Node, receives mapping IO requests from engine");
  if ((void **)(a1 + 280) != __dst)
  {
    if (*(char *)(a1 + 303) < 0)
    {
      sub_20E867CBC(v7, __dst, 0xEuLL);
    }
    else
    {
      *(_OWORD *)v7 = *(_OWORD *)__dst;
      *(_QWORD *)(a1 + 296) = v25;
    }
  }
  v8 = (void **)(a1 + 304);
  if ((_BYTE *)(a1 + 304) != __p)
  {
    if (*(char *)(a1 + 327) < 0)
    {
      if (__p[23] >= 0)
        v9 = __p;
      else
        v9 = *(_BYTE **)__p;
      if (__p[23] >= 0)
        v10 = __p[23];
      else
        v10 = *(_QWORD *)&__p[8];
      sub_20E867CBC(v8, v9, v10);
    }
    else if ((__p[23] & 0x80) != 0)
    {
      sub_20E867BF8(v8, *(void **)__p, *(size_t *)&__p[8]);
    }
    else
    {
      *(_OWORD *)v8 = *(_OWORD *)__p;
      *(_QWORD *)(a1 + 320) = *(_QWORD *)&__p[16];
    }
  }
  if ((__p[23] & 0x80000000) != 0)
  {
    operator delete(*(void **)__p);
    if ((SHIBYTE(v25) & 0x80000000) == 0)
      goto LABEL_19;
  }
  else if ((SHIBYTE(v25) & 0x80000000) == 0)
  {
    goto LABEL_19;
  }
  operator delete(__dst[0]);
LABEL_19:
  v11 = (char *)operator new(0x30uLL);
  strcpy(v11, "Receives location info for saving and loading");
  if (*(char *)(a1 + 31) < 0)
    operator delete(*v3);
  strcpy((char *)(a1 + 8), "Location Channel");
  *(_BYTE *)(a1 + 31) = 16;
  sub_20E860C04(__dst, v11, 0x2DuLL);
  v12 = (void **)(a1 + 32);
  if (*(char *)(a1 + 55) < 0)
    operator delete(*v12);
  *(_OWORD *)v12 = *(_OWORD *)__dst;
  *(_QWORD *)(a1 + 48) = v25;
  operator delete(v11);
  v13 = (char *)operator new(0x28uLL);
  strcpy(v13, "Serializes a submap save bundle to disk");
  if (*(char *)(a1 + 87) < 0)
    operator delete(*(void **)(a1 + 64));
  strcpy((char *)(a1 + 64), "Save Request");
  *(_BYTE *)(a1 + 77) = 0;
  *(_WORD *)(a1 + 78) = 0;
  *(_BYTE *)(a1 + 87) = 12;
  sub_20E860C04(__dst, v13, 0x27uLL);
  v14 = (void **)(a1 + 88);
  if (*(char *)(a1 + 111) < 0)
    operator delete(*v14);
  *(_OWORD *)v14 = *(_OWORD *)__dst;
  *(_QWORD *)(a1 + 104) = v25;
  operator delete(v13);
  v15 = (char *)operator new(0x28uLL);
  strcpy(v15, "Serializes keyframe data to disk");
  if (*(char *)(a1 + 143) < 0)
    operator delete(*(void **)(a1 + 120));
  strcpy((char *)(a1 + 120), "FrameDebug Channel");
  *(_BYTE *)(a1 + 143) = 18;
  sub_20E860C04(__dst, v15, 0x20uLL);
  v16 = (void **)(a1 + 144);
  if (*(char *)(a1 + 167) < 0)
    operator delete(*v16);
  *(_OWORD *)v16 = *(_OWORD *)__dst;
  *(_QWORD *)(a1 + 160) = v25;
  operator delete(v15);
  v17 = (char *)operator new(0x28uLL);
  strcpy(v17, "Controls mapping IO disk write ability");
  if (*(char *)(a1 + 199) < 0)
    operator delete(*(void **)(a1 + 176));
  strcpy((char *)(a1 + 176), "Pause / Resume Channel");
  *(_BYTE *)(a1 + 199) = 22;
  sub_20E860C04(__dst, v17, 0x26uLL);
  v18 = (void **)(a1 + 200);
  if (*(char *)(a1 + 223) < 0)
    operator delete(*v18);
  *(_OWORD *)v18 = *(_OWORD *)__dst;
  *(_QWORD *)(a1 + 216) = v25;
  operator delete(v17);
  v19 = (char *)operator new(0x20uLL);
  strcpy(v19, "Load Buffer Input Channel");
  v20 = (char *)operator new(0x28uLL);
  strcpy(v20, "Passes a buffer for loaded chunk data");
  sub_20E860C04(__dst, v19, 0x19uLL);
  if (*(char *)(a1 + 255) < 0)
    operator delete(*(void **)v4);
  *(_OWORD *)v4 = *(_OWORD *)__dst;
  *(_QWORD *)(v4 + 16) = v25;
  sub_20E860C04(__dst, v20, 0x25uLL);
  v21 = (void **)(a1 + 256);
  if (*(char *)(a1 + 279) < 0)
    operator delete(*v21);
  *(_OWORD *)v21 = *(_OWORD *)__dst;
  *(_QWORD *)(a1 + 272) = v25;
  operator delete(v20);
  operator delete(v19);
  return a1;
}

void sub_20EFA42AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  uint64_t v20;
  uint64_t v22;

  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0)
    {
LABEL_3:
      v22 = *(_QWORD *)(v20 + 328);
      *(_QWORD *)(v20 + 328) = 0;
      if (!v22)
        goto LABEL_4;
      goto LABEL_7;
    }
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  v22 = *(_QWORD *)(v20 + 328);
  *(_QWORD *)(v20 + 328) = 0;
  if (!v22)
  {
LABEL_4:
    sub_20EFA43D0(v20);
    _Unwind_Resume(a1);
  }
LABEL_7:
  (*(void (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
  sub_20EFA43D0(v20);
  _Unwind_Resume(a1);
}

uint64_t sub_20EFA43D0(uint64_t a1)
{
  *(_QWORD *)a1 = off_24C9F2808;
  *(_QWORD *)(a1 + 56) = &unk_24C9F2830;
  *(_QWORD *)(a1 + 112) = &unk_24C9F2858;
  *(_QWORD *)(a1 + 168) = &unk_24C9F2880;
  *(_QWORD *)(a1 + 224) = &unk_24C9F28A8;
  if (*(char *)(a1 + 327) < 0)
  {
    operator delete(*(void **)(a1 + 304));
    if ((*(char *)(a1 + 303) & 0x80000000) == 0)
    {
LABEL_3:
      *(_QWORD *)(a1 + 224) = off_24C9F2970;
      if ((*(char *)(a1 + 279) & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_16;
    }
  }
  else if ((*(char *)(a1 + 303) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*(void **)(a1 + 280));
  *(_QWORD *)(a1 + 224) = off_24C9F2970;
  if ((*(char *)(a1 + 279) & 0x80000000) == 0)
  {
LABEL_4:
    if ((*(char *)(a1 + 255) & 0x80000000) == 0)
      goto LABEL_5;
    goto LABEL_17;
  }
LABEL_16:
  operator delete(*(void **)(a1 + 256));
  if ((*(char *)(a1 + 255) & 0x80000000) == 0)
  {
LABEL_5:
    *(_QWORD *)(a1 + 168) = off_24C9F2948;
    if ((*(char *)(a1 + 223) & 0x80000000) == 0)
      goto LABEL_6;
    goto LABEL_18;
  }
LABEL_17:
  operator delete(*(void **)(a1 + 232));
  *(_QWORD *)(a1 + 168) = off_24C9F2948;
  if ((*(char *)(a1 + 223) & 0x80000000) == 0)
  {
LABEL_6:
    if ((*(char *)(a1 + 199) & 0x80000000) == 0)
      goto LABEL_7;
    goto LABEL_19;
  }
LABEL_18:
  operator delete(*(void **)(a1 + 200));
  if ((*(char *)(a1 + 199) & 0x80000000) == 0)
  {
LABEL_7:
    *(_QWORD *)(a1 + 112) = off_24C9F2920;
    if ((*(char *)(a1 + 167) & 0x80000000) == 0)
      goto LABEL_8;
    goto LABEL_20;
  }
LABEL_19:
  operator delete(*(void **)(a1 + 176));
  *(_QWORD *)(a1 + 112) = off_24C9F2920;
  if ((*(char *)(a1 + 167) & 0x80000000) == 0)
  {
LABEL_8:
    if ((*(char *)(a1 + 143) & 0x80000000) == 0)
      goto LABEL_9;
    goto LABEL_21;
  }
LABEL_20:
  operator delete(*(void **)(a1 + 144));
  if ((*(char *)(a1 + 143) & 0x80000000) == 0)
  {
LABEL_9:
    *(_QWORD *)(a1 + 56) = off_24C9F28F8;
    if ((*(char *)(a1 + 111) & 0x80000000) == 0)
      goto LABEL_10;
    goto LABEL_22;
  }
LABEL_21:
  operator delete(*(void **)(a1 + 120));
  *(_QWORD *)(a1 + 56) = off_24C9F28F8;
  if ((*(char *)(a1 + 111) & 0x80000000) == 0)
  {
LABEL_10:
    if ((*(char *)(a1 + 87) & 0x80000000) == 0)
      goto LABEL_11;
    goto LABEL_23;
  }
LABEL_22:
  operator delete(*(void **)(a1 + 88));
  if ((*(char *)(a1 + 87) & 0x80000000) == 0)
  {
LABEL_11:
    *(_QWORD *)a1 = off_24C9F28D0;
    if ((*(char *)(a1 + 55) & 0x80000000) == 0)
      goto LABEL_12;
LABEL_24:
    operator delete(*(void **)(a1 + 32));
    if ((*(char *)(a1 + 31) & 0x80000000) == 0)
      return a1;
    goto LABEL_25;
  }
LABEL_23:
  operator delete(*(void **)(a1 + 64));
  *(_QWORD *)a1 = off_24C9F28D0;
  if (*(char *)(a1 + 55) < 0)
    goto LABEL_24;
LABEL_12:
  if ((*(char *)(a1 + 31) & 0x80000000) == 0)
    return a1;
LABEL_25:
  operator delete(*(void **)(a1 + 8));
  return a1;
}

void sub_20EFA45BC(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  void *v6;
  uint64_t v7;
  std::mutex **v8;
  unint64_t v9;
  char *v10;
  int v11;
  char *v12;
  char *v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  void *__p;
  char *v18;
  char v19;
  void *v20;
  char *v21;
  unsigned __int8 v22;

  if (*(_BYTE *)(a1 + 344))
  {
    *(_BYTE *)a3 = 0;
    *(_BYTE *)(a3 + 24) = 0;
    *(_QWORD *)(a3 + 32) = 0;
    *(_QWORD *)(a3 + 40) = 0;
    *(_QWORD *)(a3 + 48) = 0;
    *(_BYTE *)(a3 + 56) = 1;
    do
    {
      (*(void (**)(void **__return_ptr, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 328) + 16))(&__p, *(_QWORD *)(a1 + 328), a2, 1);
      if (v19)
      {
        v7 = *(_QWORD *)(a1 + 336);
        v8 = (std::mutex **)operator new();
        *v8 = (std::mutex *)v7;
        std::mutex::lock((std::mutex *)v7);
        if (!*(_BYTE *)(v7 + 152))
          sub_20E866B34();
        v9 = *(_QWORD *)(v7 + 136);
        if (v9 >= *(_QWORD *)(v7 + 144))
        {
          v10 = sub_20EFA5074((void ***)(v7 + 128), (uint64_t)&__p);
        }
        else
        {
          sub_20ECA8424(*(_QWORD **)(v7 + 136), (uint64_t)&__p);
          v10 = (char *)(v9 + 24);
          *(_QWORD *)(v7 + 136) = v9 + 24;
        }
        *(_QWORD *)(v7 + 136) = v10;
        std::mutex::unlock(*v8);
        MEMORY[0x212BC6398](v8, 0x20C4093837F09);
      }
      sub_20EFA5354((unint64_t *)(a3 + 32), *(void **)(a3 + 40), (char *)v20, v21, (v21 - (_BYTE *)v20) >> 3);
      v11 = v22;
      if (v20)
      {
        v21 = (char *)v20;
        operator delete(v20);
      }
      if (v19)
      {
        v12 = (char *)__p;
        if (__p)
        {
          v13 = v18;
          v6 = __p;
          if (v18 != __p)
          {
            do
            {
              v14 = (std::__shared_weak_count *)*((_QWORD *)v13 - 1);
              if (v14)
              {
                p_shared_owners = (unint64_t *)&v14->__shared_owners_;
                do
                  v16 = __ldaxr(p_shared_owners);
                while (__stlxr(v16 - 1, p_shared_owners));
                if (!v16)
                {
                  ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
                  std::__shared_weak_count::__release_weak(v14);
                }
              }
              v13 -= 16;
            }
            while (v13 != v12);
            v6 = __p;
          }
          v18 = v12;
          operator delete(v6);
        }
      }
    }
    while (!v11);
  }
  else
  {
    (*(void (**)(_QWORD, uint64_t, _QWORD))(**(_QWORD **)(a1 + 328) + 16))(*(_QWORD *)(a1 + 328), a2, 0);
  }
}

void sub_20EFA47BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::mutex **a9, uint64_t a10, char *a11)
{
  char **v11;
  uint64_t v12;
  uint64_t v13;

  *(_QWORD *)(v12 + 136) = v13;
  sub_20EA0228C(&a9);
  sub_20EF8D260(&a11);
  sub_20EF8D260(v11);
  _Unwind_Resume(a1);
}

void sub_20EFA47F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  char **v3;
  va_list va;

  va_start(va, a3);
  sub_20EF8D260((char **)va);
  sub_20EF8D260(v3);
  _Unwind_Resume(a1);
}

void sub_20EFA4858(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  BOOL v4;
  uint64_t v5;
  std::mutex **v6;
  void **v7;
  unint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  void *v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;

  (*(void (**)(_QWORD *__return_ptr))(**(_QWORD **)(a1 + 328) + 24))((_QWORD *)a2);
  if (*(_BYTE *)(a1 + 344))
    v4 = *(_BYTE *)(a2 + 88) == 0;
  else
    v4 = 1;
  if (!v4 && *(_BYTE *)(a2 + 48))
  {
    v5 = *(_QWORD *)(a1 + 336);
    v6 = (std::mutex **)operator new();
    *v6 = (std::mutex *)v5;
    std::mutex::lock((std::mutex *)v5);
    if (!*(_BYTE *)(v5 + 152))
      sub_20E866B34();
    v7 = (void **)(a2 + 24);
    v8 = *(_QWORD *)(v5 + 136);
    if (v8 >= *(_QWORD *)(v5 + 144))
    {
      v9 = sub_20EFA5074((void ***)(v5 + 128), a2 + 24);
    }
    else
    {
      sub_20ECA8424(*(_QWORD **)(v5 + 136), a2 + 24);
      v9 = (char *)(v8 + 24);
      *(_QWORD *)(v5 + 136) = v8 + 24;
    }
    *(_QWORD *)(v5 + 136) = v9;
    std::mutex::unlock(*v6);
    MEMORY[0x212BC6398](v6, 0x20C4093837F09);
    if (*(_BYTE *)(a2 + 48))
    {
      v10 = (char *)*v7;
      if (*v7)
      {
        v11 = *(char **)(a2 + 32);
        v12 = *v7;
        if (v11 != v10)
        {
          do
          {
            v13 = (std::__shared_weak_count *)*((_QWORD *)v11 - 1);
            if (v13)
            {
              p_shared_owners = (unint64_t *)&v13->__shared_owners_;
              do
                v15 = __ldaxr(p_shared_owners);
              while (__stlxr(v15 - 1, p_shared_owners));
              if (!v15)
              {
                ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
                std::__shared_weak_count::__release_weak(v13);
              }
            }
            v11 -= 16;
          }
          while (v11 != v10);
          v12 = *v7;
        }
        *(_QWORD *)(a2 + 32) = v10;
        operator delete(v12);
      }
      *(_BYTE *)(a2 + 48) = 0;
    }
  }
}

void sub_20EFA49D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::mutex **a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  *(_QWORD *)(v10 + 136) = v11;
  sub_20EA0228C(&a9);
  sub_20EFA4A50(v9);
  _Unwind_Resume(a1);
}

void sub_20EFA49F4(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  MEMORY[0x212BC6398](v2, 0x20C4093837F09);
  sub_20EFA4A50(v1);
  _Unwind_Resume(a1);
}

void sub_20EFA4A20(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20EFA4A50(v1);
  _Unwind_Resume(a1);
}

void sub_20EFA4A34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::mutex **a9)
{
  uint64_t v9;

  sub_20EA0228C(&a9);
  sub_20EFA4A50(v9);
  _Unwind_Resume(a1);
}

uint64_t sub_20EFA4A50(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;

  if (*(_BYTE *)(a1 + 88))
  {
    v2 = *(void **)(a1 + 56);
    if (v2)
    {
      *(_QWORD *)(a1 + 64) = v2;
      operator delete(v2);
    }
    if (*(_BYTE *)(a1 + 48))
    {
      v3 = *(_QWORD *)(a1 + 24);
      if (v3)
      {
        v4 = *(_QWORD *)(a1 + 32);
        v5 = *(void **)(a1 + 24);
        if (v4 != v3)
        {
          do
          {
            v6 = *(std::__shared_weak_count **)(v4 - 8);
            if (v6)
            {
              p_shared_owners = (unint64_t *)&v6->__shared_owners_;
              do
                v8 = __ldaxr(p_shared_owners);
              while (__stlxr(v8 - 1, p_shared_owners));
              if (!v8)
              {
                ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
                std::__shared_weak_count::__release_weak(v6);
              }
            }
            v4 -= 16;
          }
          while (v4 != v3);
          v5 = *(void **)(a1 + 24);
        }
        *(_QWORD *)(a1 + 32) = v3;
        operator delete(v5);
      }
    }
  }
  return a1;
}

void sub_20EFA4B08(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  sub_20EFA4858(a1 - 56, a2);
}

uint64_t sub_20EFA4B10(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 328) + 32))(*(_QWORD *)(a1 + 328));
}

uint64_t sub_20EFA4B20(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 216) + 32))(*(_QWORD *)(a1 + 216));
}

uint64_t sub_20EFA4B30(uint64_t a1, unsigned __int8 *a2)
{
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 328) + 40))(*(_QWORD *)(a1 + 328));
  return *a2;
}

uint64_t sub_20EFA4B60(uint64_t a1, unsigned __int8 *a2)
{
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 160) + 40))(*(_QWORD *)(a1 + 160));
  return *a2;
}

uint64_t sub_20EFA4B90(uint64_t result, uint64_t *a2)
{
  uint64_t v2;

  v2 = *a2;
  if (!*(_BYTE *)(result + 344))
    *(_BYTE *)(result + 344) = 1;
  *(_QWORD *)(result + 336) = v2;
  return result;
}

uint64_t sub_20EFA4BB4(uint64_t result, uint64_t *a2)
{
  uint64_t v2;

  v2 = *a2;
  if (!*(_BYTE *)(result + 120))
    *(_BYTE *)(result + 120) = 1;
  *(_QWORD *)(result + 112) = v2;
  return result;
}

uint64_t sub_20EFA4BD8(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_24C9F2650;
  a1[7] = &unk_24C9F2698;
  a1[14] = &unk_24C9F26C0;
  a1[21] = &unk_24C9F26E8;
  a1[28] = &unk_24C9F2710;
  v2 = a1[41];
  a1[41] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return sub_20EFA43D0((uint64_t)a1);
}

void sub_20EFA4C3C(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_24C9F2650;
  a1[7] = &unk_24C9F2698;
  a1[14] = &unk_24C9F26C0;
  a1[21] = &unk_24C9F26E8;
  a1[28] = &unk_24C9F2710;
  v2 = a1[41];
  a1[41] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  sub_20EFA43D0((uint64_t)a1);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20EFA4CB4(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  *a1 = &unk_24C9F2698;
  a1[7] = &unk_24C9F26C0;
  a1[14] = &unk_24C9F26E8;
  a1[21] = &unk_24C9F2710;
  v2 = a1[34];
  a1[34] = 0;
  *(a1 - 7) = &off_24C9F2650;
  v3 = (uint64_t)(a1 - 7);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return sub_20EFA43D0(v3);
}

void sub_20EFA4D18(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  *a1 = &unk_24C9F2698;
  a1[7] = &unk_24C9F26C0;
  a1[14] = &unk_24C9F26E8;
  a1[21] = &unk_24C9F2710;
  v2 = a1[34];
  a1[34] = 0;
  *(a1 - 7) = &off_24C9F2650;
  v3 = (uint64_t)(a1 - 7);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  sub_20EFA43D0(v3);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20EFA4D90(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  *(a1 - 7) = &unk_24C9F2698;
  *a1 = &unk_24C9F26C0;
  a1[7] = &unk_24C9F26E8;
  a1[14] = &unk_24C9F2710;
  v2 = a1[27];
  a1[27] = 0;
  *(a1 - 14) = &off_24C9F2650;
  v3 = (uint64_t)(a1 - 14);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return sub_20EFA43D0(v3);
}

void sub_20EFA4DF4(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  *(a1 - 7) = &unk_24C9F2698;
  *a1 = &unk_24C9F26C0;
  a1[7] = &unk_24C9F26E8;
  a1[14] = &unk_24C9F2710;
  v2 = a1[27];
  a1[27] = 0;
  *(a1 - 14) = &off_24C9F2650;
  v3 = (uint64_t)(a1 - 14);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  sub_20EFA43D0(v3);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20EFA4E6C(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  *(a1 - 14) = &unk_24C9F2698;
  *(a1 - 7) = &unk_24C9F26C0;
  *a1 = &unk_24C9F26E8;
  a1[7] = &unk_24C9F2710;
  v2 = a1[20];
  a1[20] = 0;
  *(a1 - 21) = &off_24C9F2650;
  v3 = (uint64_t)(a1 - 21);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return sub_20EFA43D0(v3);
}

void sub_20EFA4ED0(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  *(a1 - 14) = &unk_24C9F2698;
  *(a1 - 7) = &unk_24C9F26C0;
  *a1 = &unk_24C9F26E8;
  a1[7] = &unk_24C9F2710;
  v2 = a1[20];
  a1[20] = 0;
  *(a1 - 21) = &off_24C9F2650;
  v3 = (uint64_t)(a1 - 21);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  sub_20EFA43D0(v3);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20EFA4F48(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  *(a1 - 21) = &unk_24C9F2698;
  *(a1 - 14) = &unk_24C9F26C0;
  *(a1 - 7) = &unk_24C9F26E8;
  *a1 = &unk_24C9F2710;
  v2 = a1[13];
  a1[13] = 0;
  *(a1 - 28) = &off_24C9F2650;
  v3 = (uint64_t)(a1 - 28);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return sub_20EFA43D0(v3);
}

void sub_20EFA4FAC(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  *(a1 - 21) = &unk_24C9F2698;
  *(a1 - 14) = &unk_24C9F26C0;
  *(a1 - 7) = &unk_24C9F26E8;
  *a1 = &unk_24C9F2710;
  v2 = a1[13];
  a1[13] = 0;
  *(a1 - 28) = &off_24C9F2650;
  v3 = (uint64_t)(a1 - 28);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  sub_20EFA43D0(v3);
  JUMPOUT(0x212BC6398);
}

char *sub_20EFA5074(void ***a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v6;
  char *v7;
  void **v8;
  void **v9;
  void **v10;
  __int128 v11;
  void **v12;
  void **v13;
  void *v14;
  char *v15;
  char *v16;
  char *v17;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  char *v22;
  char *v23;

  v2 = 0xAAAAAAAAAAAAAAABLL * (a1[1] - *a1);
  v3 = v2 + 1;
  if (v2 + 1 > 0xAAAAAAAAAAAAAAALL)
    sub_20E867F44();
  if (0x5555555555555556 * (a1[2] - *a1) > v3)
    v3 = 0x5555555555555556 * (a1[2] - *a1);
  if (0xAAAAAAAAAAAAAAABLL * (a1[2] - *a1) >= 0x555555555555555)
    v6 = 0xAAAAAAAAAAAAAAALL;
  else
    v6 = v3;
  if (v6)
  {
    if (v6 > 0xAAAAAAAAAAAAAAALL)
      sub_20E877A38();
    v7 = (char *)operator new(24 * v6);
  }
  else
  {
    v7 = 0;
  }
  v22 = &v7[24 * v2];
  v23 = &v7[24 * v6];
  sub_20ECA8424(v22, a2);
  v8 = (void **)v22;
  v9 = *a1;
  v10 = a1[1];
  if (v10 == *a1)
  {
    v12 = a1[1];
  }
  else
  {
    do
    {
      *(v8 - 3) = 0;
      *(v8 - 2) = 0;
      v8 -= 3;
      v8[2] = 0;
      v11 = *(_OWORD *)(v10 - 3);
      v10 -= 3;
      *(_OWORD *)v8 = v11;
      v8[2] = v10[2];
      *v10 = 0;
      v10[1] = 0;
      v10[2] = 0;
    }
    while (v10 != v9);
    v12 = *a1;
    v10 = a1[1];
  }
  *a1 = v8;
  a1[1] = (void **)(v22 + 24);
  a1[2] = (void **)v23;
  if (v10 != v12)
  {
    v13 = v10;
    do
    {
      v16 = (char *)*(v13 - 3);
      v13 -= 3;
      v15 = v16;
      if (v16)
      {
        v17 = (char *)*(v10 - 2);
        if (v17 == v15)
        {
          v14 = v15;
        }
        else
        {
          do
          {
            v18 = (std::__shared_weak_count *)*((_QWORD *)v17 - 1);
            if (v18)
            {
              p_shared_owners = (unint64_t *)&v18->__shared_owners_;
              do
                v20 = __ldaxr(p_shared_owners);
              while (__stlxr(v20 - 1, p_shared_owners));
              if (!v20)
              {
                ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
                std::__shared_weak_count::__release_weak(v18);
              }
            }
            v17 -= 16;
          }
          while (v17 != v15);
          v14 = *v13;
        }
        *(v10 - 2) = v15;
        operator delete(v14);
      }
      v10 = v13;
    }
    while (v13 != v12);
    v10 = v12;
  }
  if (v10)
    operator delete(v10);
  return v22 + 24;
}

void sub_20EFA5264(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20EFA5278((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20EFA5278(uint64_t a1)
{
  void **v2;
  void **v3;
  void **v4;
  void *v5;
  char *v6;
  char *v7;
  char *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;

  v2 = *(void ***)(a1 + 8);
  v3 = *(void ***)(a1 + 16);
  if (v3 != v2)
  {
    v4 = *(void ***)(a1 + 16);
    do
    {
      v7 = (char *)*(v4 - 3);
      v4 -= 3;
      v6 = v7;
      *(_QWORD *)(a1 + 16) = v4;
      if (v7)
      {
        v8 = (char *)*(v3 - 2);
        v5 = v6;
        if (v8 != v6)
        {
          do
          {
            v9 = (std::__shared_weak_count *)*((_QWORD *)v8 - 1);
            if (v9)
            {
              p_shared_owners = (unint64_t *)&v9->__shared_owners_;
              do
                v11 = __ldaxr(p_shared_owners);
              while (__stlxr(v11 - 1, p_shared_owners));
              if (!v11)
              {
                ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
                std::__shared_weak_count::__release_weak(v9);
              }
            }
            v8 -= 16;
          }
          while (v8 != v6);
          v5 = *v4;
        }
        *(v3 - 2) = v6;
        operator delete(v5);
        v4 = *(void ***)(a1 + 16);
      }
      v3 = v4;
    }
    while (v4 != v2);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

char *sub_20EFA5354(unint64_t *a1, void *a2, char *__src, char *a4, uint64_t a5)
{
  unint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v11;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  _BYTE *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  int64_t v25;
  unint64_t v26;
  char *v27;
  size_t v28;
  uint64_t v29;
  uint64_t *v30;
  _QWORD *v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  char *v35;
  char *v36;
  char *v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  __int128 *v41;
  _OWORD *v42;
  uint64_t v43;
  __int128 v44;
  uint64_t v45;
  char *v46;
  char *v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _OWORD *v51;
  __int128 *v52;
  uint64_t v53;
  __int128 v54;
  uint64_t v55;
  char *v56;
  size_t v57;
  uint64_t v58;
  uint64_t v59;
  _OWORD *v60;
  __int128 *v61;
  uint64_t v62;
  __int128 v63;
  uint64_t v64;
  char *v65;
  unint64_t v68;

  v6 = *a1;
  v7 = (uint64_t)a2 - *a1;
  v8 = (char *)(*a1 + (v7 & 0xFFFFFFFFFFFFFFF8));
  v9 = a5 - 1;
  if (a5 < 1)
    return v8;
  v11 = __src;
  v13 = v7 >> 3;
  v15 = a1[1];
  v14 = a1[2];
  if (a5 > (uint64_t)(v14 - v15) >> 3)
  {
    v16 = a5 + ((uint64_t)(v15 - v6) >> 3);
    if (v16 >> 61)
      sub_20E92CED8();
    v17 = v14 - v6;
    if (v17 >> 2 > v16)
      v16 = v17 >> 2;
    if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8)
      v18 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v18 = v16;
    if (v18)
    {
      if (v18 >> 61)
        sub_20E877A38();
      v19 = *a1 + (v7 & 0xFFFFFFFFFFFFFFF8);
      v20 = v18;
      v21 = operator new(8 * v18);
      v18 = v20;
      v8 = (char *)v19;
      v13 = v7 >> 3;
      v11 = __src;
    }
    else
    {
      v21 = 0;
    }
    v35 = &v21[8 * v13];
    v36 = &v35[8 * a5];
    v37 = v35;
    v38 = v11;
    if ((v9 & 0x1FFFFFFFFFFFFFFFuLL) < 7)
      goto LABEL_56;
    v37 = &v21[8 * v13];
    v38 = v11;
    if ((unint64_t)(&v21[v7 & 0xFFFFFFFFFFFFFFF8] - v11) < 0x20)
      goto LABEL_56;
    v39 = (v9 & 0x1FFFFFFFFFFFFFFFLL) + 1;
    v40 = 8 * (v39 & 0x3FFFFFFFFFFFFFFCLL);
    v37 = &v35[v40];
    v38 = &v11[v40];
    v41 = (__int128 *)(v11 + 16);
    v42 = &v21[8 * v13 + 16];
    v43 = v39 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v44 = *v41;
      *(v42 - 1) = *(v41 - 1);
      *v42 = v44;
      v41 += 2;
      v42 += 2;
      v43 -= 4;
    }
    while (v43);
    if (v39 != (v39 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_56:
      do
      {
        v45 = *(_QWORD *)v38;
        v38 += 8;
        *(_QWORD *)v37 = v45;
        v37 += 8;
      }
      while (v37 != v36);
    }
    v46 = &v21[8 * v13];
    if ((void *)v6 != a2)
    {
      v47 = v8;
      v46 = &v21[8 * v13];
      if ((unint64_t)(v7 - 8) < 0x68)
        goto LABEL_57;
      v47 = v8;
      v46 = &v21[8 * v13];
      if ((v7 & 0xFFFFFFFFFFFFFFF8) + v6 - (unint64_t)&v21[v7 & 0xFFFFFFFFFFFFFFF8] < 0x20)
        goto LABEL_57;
      v48 = ((unint64_t)(v7 - 8) >> 3) + 1;
      v49 = 8 * (v48 & 0x3FFFFFFFFFFFFFFCLL);
      v47 = &v8[-v49];
      v46 = &v35[-v49];
      v50 = 8 * v13 - 16;
      v51 = &v21[v50];
      v52 = (__int128 *)(v6 + v50);
      v53 = v48 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v54 = *v52;
        *(v51 - 1) = *(v52 - 1);
        *v51 = v54;
        v51 -= 2;
        v52 -= 2;
        v53 -= 4;
      }
      while (v53);
      if (v48 != (v48 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_57:
        do
        {
          v55 = *((_QWORD *)v47 - 1);
          v47 -= 8;
          *((_QWORD *)v46 - 1) = v55;
          v46 -= 8;
        }
        while (v47 != (char *)v6);
      }
    }
    v56 = &v21[8 * v18];
    v57 = v15 - (_QWORD)v8;
    if (v57)
      memmove(&v35[8 * a5], v8, v57);
    *a1 = (unint64_t)v46;
    a1[1] = (unint64_t)&v36[v57];
    a1[2] = (unint64_t)v56;
    if (v6)
      operator delete((void *)v6);
    return v35;
  }
  v22 = v15 - (_QWORD)v8;
  v23 = (uint64_t)(v15 - (_QWORD)v8) >> 3;
  if (v23 >= a5)
  {
    v24 = &__src[8 * a5];
    v26 = a1[1];
  }
  else
  {
    v24 = &__src[8 * v23];
    v25 = a4 - v24;
    if (a4 != v24)
    {
      v68 = *a1 + (v7 & 0xFFFFFFFFFFFFFFF8);
      memmove((void *)a1[1], &__src[8 * v23], a4 - v24);
      v13 = v7 >> 3;
      v8 = (char *)v68;
    }
    v26 = v15 + v25;
    a1[1] = v15 + v25;
    if (v22 < 1)
      return v8;
  }
  v27 = &v8[8 * a5];
  v28 = v26 - (_QWORD)v27;
  v29 = (uint64_t)(v26 - (_QWORD)v27) >> 3;
  v30 = (uint64_t *)(v26 - 8 * a5);
  v31 = (_QWORD *)v26;
  if ((unint64_t)v30 < v15)
  {
    v32 = (v7 & 0xFFFFFFFFFFFFFFF8) + v28;
    v33 = v32 + v6 + 8;
    if (v15 > v33)
      v33 = v15;
    v34 = v33 + ~v6 - v32;
    if (v34 < 0x58)
    {
      v31 = (_QWORD *)v26;
      do
      {
LABEL_45:
        v64 = *v30++;
        *v31++ = v64;
      }
      while ((unint64_t)v30 < v15);
      goto LABEL_46;
    }
    v31 = (_QWORD *)v26;
    if ((unint64_t)&v27[-(v7 & 0xFFFFFFFFFFFFFFF8) - v6] < 0x20)
      goto LABEL_45;
    v58 = (v34 >> 3) + 1;
    v59 = 8 * (v58 & 0x3FFFFFFFFFFFFFFCLL);
    v30 = (uint64_t *)((char *)v30 + v59);
    v31 = (_QWORD *)(v26 + v59);
    v60 = (_OWORD *)(v26 + 16);
    v61 = (__int128 *)(8 * v29 + 8 * v13 + v6 + 16);
    v62 = v58 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v63 = *v61;
      *(v60 - 1) = *(v61 - 1);
      *v60 = v63;
      v60 += 2;
      v61 += 2;
      v62 -= 4;
    }
    while (v62);
    if (v58 != (v58 & 0x3FFFFFFFFFFFFFFCLL))
      goto LABEL_45;
  }
LABEL_46:
  a1[1] = (unint64_t)v31;
  if ((char *)v26 != v27)
  {
    v65 = v8;
    memmove((void *)(v26 - 8 * v29), v8, v28);
    v8 = v65;
  }
  if (v24 != v11)
  {
    v35 = v8;
    memmove(v8, v11, v24 - v11);
    return v35;
  }
  return v8;
}

uint64_t sub_20EFA5704(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5, uint64_t *a6, uint64_t a7)
{
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  size_t v21;
  int v22;
  uint64_t v23;
  void **v24;
  uint64_t v25;
  float v26;
  _QWORD *v27;
  unint64_t *v28;
  unint64_t v29;
  unsigned __int8 v30;
  _QWORD *v31;
  char *v32;
  char *v33;
  char *v34;
  __int128 v35;
  unint64_t *v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  std::__shared_weak_count *v40;
  unint64_t *p_shared_owners;
  unint64_t v42;
  unint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t *v52;
  unint64_t v53;
  unsigned __int8 v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  uint64_t v64;
  unint64_t v65;
  std::__shared_weak_count *v66;
  unint64_t *v67;
  unint64_t v68;
  uint64_t v69;
  _QWORD *v70;
  _QWORD *v71;
  void *v72;
  std::__shared_weak_count *v73;
  unint64_t *v74;
  unint64_t v75;
  std::__shared_weak_count *v76;
  unint64_t *v77;
  unint64_t v78;
  uint64_t v79;
  _QWORD *v80;
  _QWORD *v81;
  void *v82;
  _BYTE *v83;
  _BYTE *v84;
  __int128 v85;
  char *v86;
  unint64_t *v87;
  unint64_t v88;
  unint64_t *v89;
  unint64_t v90;
  uint64_t v91;
  std::__shared_weak_count *v92;
  unint64_t *v93;
  unint64_t v94;
  std::__shared_weak_count *v95;
  unint64_t *v96;
  unint64_t v97;
  std::__shared_weak_count *v98;
  unint64_t *v99;
  unint64_t v100;
  std::__shared_weak_count *v101;
  unint64_t *v102;
  unint64_t v103;
  char *v104;
  std::__shared_weak_count *v105;
  unint64_t *v106;
  unint64_t v107;
  uint64_t v108;
  _QWORD *v109;
  std::__shared_weak_count *v110;
  unint64_t *v111;
  std::__shared_weak_count *v112;
  unint64_t v113;
  unint64_t *p_shared_weak_owners;
  unint64_t v115;
  unint64_t v116;
  unint64_t *v117;
  unint64_t v118;
  unint64_t v119;
  unint64_t *v120;
  unint64_t v121;
  _QWORD *v122;
  uint64_t v123;
  uint64_t v124;
  unint64_t *v125;
  unint64_t v126;
  uint64_t v127;
  unint64_t v128;
  unint64_t *v129;
  unint64_t v130;
  uint64_t v131;
  unint64_t *v132;
  unint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  unint64_t v137;
  uint64_t v138;
  _BYTE *v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  char *v179;
  char *v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  char *v187;
  unint64_t *v188;
  unint64_t v189;
  __int128 v191;
  void *v192[2];
  uint64_t v193;
  __int128 v194;
  __int128 v195;
  _OWORD v196[2];
  void *__p[2];
  uint64_t v198;
  __int128 v199;
  __int128 v200;
  __int128 v201;
  uint64_t v202;
  void *__dst[2];
  uint64_t v204;
  int v205;
  uint64_t v206;
  uint64_t v207;
  std::__shared_weak_count *v208;
  std::__shared_weak_count *v209;
  std::__shared_weak_count *v210;
  __int128 v211;
  _BYTE v212[32];
  _BYTE v213[24];
  __int128 v214;
  __int128 v215;
  uint64_t (**v216)();
  __int128 v217;
  uint64_t v218;
  uint64_t (**v219)();
  __int128 v220;
  uint64_t (**v221)();
  __int128 v222;
  __int128 v223;
  __int128 v224;
  uint64_t v225;

  v225 = *MEMORY[0x24BDAC8D0];
  if (*(char *)(a3 + 23) < 0)
  {
    sub_20E860C04(__dst, *(void **)a3, *(_QWORD *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)__dst = *(_OWORD *)a3;
    v204 = *(_QWORD *)(a3 + 16);
  }
  *(_OWORD *)v192 = *(_OWORD *)(a3 + 24);
  v193 = *(_QWORD *)(a3 + 40);
  *(_QWORD *)(a3 + 32) = 0;
  *(_QWORD *)(a3 + 40) = 0;
  *(_QWORD *)(a3 + 24) = 0;
  v14 = *(_OWORD *)(a3 + 64);
  v194 = *(_OWORD *)(a3 + 48);
  v195 = v14;
  v196[0] = *(_OWORD *)(a3 + 80);
  *(_OWORD *)((char *)v196 + 9) = *(_OWORD *)(a3 + 89);
  *(_OWORD *)__p = *(_OWORD *)(a3 + 112);
  v198 = *(_QWORD *)(a3 + 128);
  *(_QWORD *)(a3 + 112) = 0;
  *(_QWORD *)(a3 + 120) = 0;
  *(_QWORD *)(a3 + 128) = 0;
  v202 = *(_QWORD *)(a3 + 184);
  v15 = *(_OWORD *)(a3 + 168);
  v16 = *(_OWORD *)(a3 + 136);
  v200 = *(_OWORD *)(a3 + 152);
  v201 = v15;
  v199 = v16;
  v18 = *a6;
  v17 = a6[1];
  *(_QWORD *)&v191 = *a6;
  *((_QWORD *)&v191 + 1) = v17;
  if (v17)
  {
    v19 = (unint64_t *)(v17 + 8);
    do
      v20 = __ldxr(v19);
    while (__stxr(v20 + 1, v19));
  }
  v21 = HIBYTE(v204);
  if (v204 < 0)
    v21 = (size_t)__dst[1];
  if (!v21)
  {
    v23 = 0;
    goto LABEL_104;
  }
  v22 = *(unsigned __int8 *)(a3 + 192);
  if (SHIBYTE(v193) < 0)
  {
    if (v204 >= 0)
      v24 = __dst;
    else
      v24 = (void **)__dst[0];
    sub_20E867CBC(v192, v24, v21);
  }
  else if (SHIBYTE(v204) < 0)
  {
    sub_20E867BF8(v192, __dst[0], (size_t)__dst[1]);
  }
  else
  {
    *(_OWORD *)v192 = *(_OWORD *)__dst;
    v193 = v204;
  }
  v207 = 0;
  if (v22)
  {
    v25 = operator new();
    *(_OWORD *)v25 = *(_OWORD *)(a3 + 200);
    sub_20E96A108(v25 + 16, a5);
    v26 = *(float *)(v25 + 4);
    if ((v26 > 1.0 || v26 < 0.0)
      && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/MappingIO/src/KeyFrameIO/KeyframeIOInterface.cpp", 51, (uint64_t)"ratio <= 1.0f && ratio >= 0.0f", 30, (uint64_t)&unk_2102698A6, 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v207 = v25;
  }
  v27 = operator new(0x68uLL);
  v27[1] = 0;
  v27[2] = 0;
  *v27 = &off_24C9F29E0;
  *(_QWORD *)v212 = v18;
  *(_QWORD *)&v212[8] = v17;
  if (v17)
  {
    v28 = (unint64_t *)(v17 + 8);
    do
      v29 = __ldxr(v28);
    while (__stxr(v29 + 1, v28));
  }
  v30 = atomic_load((unsigned __int8 *)&qword_254A6DA78);
  if ((v30 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DA78))
  {
    sub_20FDBEA28(qword_254A6DA60);
    __cxa_atexit((void (*)(void *))sub_20FDBEE1C, qword_254A6DA60, &dword_20E81F000);
    __cxa_guard_release(&qword_254A6DA78);
  }
  v31 = operator new(0x20uLL);
  v31[1] = 0;
  v31[2] = 0;
  *v31 = &off_24C9F2A30;
  v31[3] = &off_24CA1F778;
  *(_QWORD *)&v224 = v31 + 3;
  *((_QWORD *)&v224 + 1) = v31;
  v223 = 0uLL;
  v32 = (char *)operator new(0x30uLL);
  v33 = v32;
  *((_QWORD *)v32 + 1) = 0;
  *((_QWORD *)v32 + 2) = 0;
  *(_QWORD *)v32 = &off_24C9F1F50;
  v34 = v32 + 24;
  v35 = *(_OWORD *)v212;
  if (*(_QWORD *)&v212[8])
  {
    v36 = (unint64_t *)(*(_QWORD *)&v212[8] + 8);
    do
      v37 = __ldxr(v36);
    while (__stxr(v37 + 1, v36));
    *(_OWORD *)(v32 + 24) = v35;
    do
      v38 = __ldxr(v36);
    while (__stxr(v38 + 1, v36));
    *((_QWORD *)v32 + 5) = qword_254A6DA60;
    do
      v39 = __ldaxr(v36);
    while (__stlxr(v39 - 1, v36));
    if (v39)
    {
      v27[3] = v34;
      v27[4] = v32;
      v40 = (std::__shared_weak_count *)*((_QWORD *)&v224 + 1);
      v27[5] = v224;
      v27[6] = v40;
      if (v40)
      {
LABEL_37:
        p_shared_owners = (unint64_t *)&v40->__shared_owners_;
        do
          v42 = __ldxr(p_shared_owners);
        while (__stxr(v42 + 1, p_shared_owners));
        *((_BYTE *)v27 + 56) = 0;
        *((_BYTE *)v27 + 72) = 0;
        *((_BYTE *)v27 + 80) = 0;
        *((_BYTE *)v27 + 96) = 0;
        do
          v43 = __ldaxr(p_shared_owners);
        while (__stlxr(v43 - 1, p_shared_owners));
        if (!v43)
        {
          ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
          std::__shared_weak_count::__release_weak(v40);
        }
        goto LABEL_45;
      }
    }
    else
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v35 + 1) + 16))(*((_QWORD *)&v35 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v35 + 1));
      v27[3] = v34;
      v27[4] = v33;
      v40 = (std::__shared_weak_count *)*((_QWORD *)&v224 + 1);
      v27[5] = v224;
      v27[6] = v40;
      if (v40)
        goto LABEL_37;
    }
  }
  else
  {
    *(_OWORD *)(v32 + 24) = *(unint64_t *)v212;
    *((_QWORD *)v32 + 5) = qword_254A6DA60;
    v27[3] = v34;
    v27[4] = v32;
    v40 = (std::__shared_weak_count *)*((_QWORD *)&v224 + 1);
    v27[5] = v224;
    v27[6] = v40;
    if (v40)
      goto LABEL_37;
  }
  *((_BYTE *)v27 + 56) = 0;
  *((_BYTE *)v27 + 72) = 0;
  *((_BYTE *)v27 + 80) = 0;
  *((_BYTE *)v27 + 96) = 0;
LABEL_45:
  v44 = (std::__shared_weak_count *)*((_QWORD *)&v223 + 1);
  if (*((_QWORD *)&v223 + 1))
  {
    v45 = (unint64_t *)(*((_QWORD *)&v223 + 1) + 8);
    do
      v46 = __ldaxr(v45);
    while (__stlxr(v46 - 1, v45));
    if (!v46)
    {
      ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
      std::__shared_weak_count::__release_weak(v44);
    }
  }
  v47 = *(std::__shared_weak_count **)&v212[8];
  if (*(_QWORD *)&v212[8])
  {
    v48 = (unint64_t *)(*(_QWORD *)&v212[8] + 8);
    do
      v49 = __ldaxr(v48);
    while (__stlxr(v49 - 1, v48));
    if (!v49)
    {
      ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
      std::__shared_weak_count::__release_weak(v47);
    }
  }
  *(_QWORD *)&v211 = v27 + 3;
  *((_QWORD *)&v211 + 1) = v27;
  v50 = (std::__shared_weak_count *)operator new(0x80uLL);
  v50->__shared_owners_ = 0;
  v51 = (unint64_t *)&v50->__shared_owners_;
  v50->__shared_weak_owners_ = 0;
  v50->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9F2A80;
  *(_OWORD *)v212 = v191;
  if (*((_QWORD *)&v191 + 1))
  {
    v52 = (unint64_t *)(*((_QWORD *)&v191 + 1) + 8);
    do
      v53 = __ldxr(v52);
    while (__stxr(v53 + 1, v52));
  }
  v54 = atomic_load((unsigned __int8 *)&qword_254A6DA78);
  if ((v54 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DA78))
  {
    sub_20FDBEA28(qword_254A6DA60);
    __cxa_atexit((void (*)(void *))sub_20FDBEE1C, qword_254A6DA60, &dword_20E81F000);
    __cxa_guard_release(&qword_254A6DA78);
  }
  v55 = (std::__shared_weak_count *)operator new(0x20uLL);
  v55->__shared_owners_ = 0;
  v56 = (unint64_t *)&v55->__shared_owners_;
  v55->__shared_weak_owners_ = 0;
  v55->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9F2A30;
  v55[1].__vftable = (std::__shared_weak_count_vtbl *)&off_24CA1F778;
  *(_QWORD *)&v224 = v55 + 1;
  *((_QWORD *)&v224 + 1) = v55;
  v223 = 0uLL;
  sub_20EF6FABC((uint64_t)&v50[1], (uint64_t *)v212, (uint64_t)qword_254A6DA60, (uint64_t *)&v224);
  do
    v57 = __ldaxr(v56);
  while (__stlxr(v57 - 1, v56));
  if (!v57)
  {
    ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
    std::__shared_weak_count::__release_weak(v55);
  }
  v58 = (std::__shared_weak_count *)*((_QWORD *)&v223 + 1);
  if (*((_QWORD *)&v223 + 1))
  {
    v59 = (unint64_t *)(*((_QWORD *)&v223 + 1) + 8);
    do
      v60 = __ldaxr(v59);
    while (__stlxr(v60 - 1, v59));
    if (!v60)
    {
      ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
      std::__shared_weak_count::__release_weak(v58);
    }
  }
  v61 = *(std::__shared_weak_count **)&v212[8];
  if (*(_QWORD *)&v212[8])
  {
    v62 = (unint64_t *)(*(_QWORD *)&v212[8] + 8);
    do
      v63 = __ldaxr(v62);
    while (__stlxr(v63 - 1, v62));
    if (!v63)
    {
      ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
      std::__shared_weak_count::__release_weak(v61);
    }
  }
  v209 = v50 + 1;
  v210 = v50;
  v23 = operator new();
  v64 = v207;
  v207 = 0;
  *(_QWORD *)&v223 = v64;
  *(_OWORD *)v212 = v211;
  v211 = 0uLL;
  *(_QWORD *)&v224 = v50 + 1;
  *((_QWORD *)&v224 + 1) = v50;
  v209 = 0;
  v210 = 0;
  v205 = 63;
  sub_20E8C450C(&v206, &v205);
  sub_20EF7324C(v23, (__int128 *)v192, (uint64_t *)&v223, a4, v212, &v224, a7, v206);
  do
    v65 = __ldaxr(v51);
  while (__stlxr(v65 - 1, v51));
  if (!v65)
  {
    ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
    std::__shared_weak_count::__release_weak(v50);
  }
  v66 = *(std::__shared_weak_count **)&v212[8];
  if (*(_QWORD *)&v212[8])
  {
    v67 = (unint64_t *)(*(_QWORD *)&v212[8] + 8);
    do
      v68 = __ldaxr(v67);
    while (__stlxr(v68 - 1, v67));
    if (!v68)
    {
      ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
      std::__shared_weak_count::__release_weak(v66);
    }
  }
  v69 = v223;
  if ((_QWORD)v223)
  {
    v70 = *(_QWORD **)(v223 + 32);
    if (v70)
    {
      do
      {
        v71 = (_QWORD *)*v70;
        operator delete(v70);
        v70 = v71;
      }
      while (v71);
    }
    v72 = *(void **)(v69 + 16);
    *(_QWORD *)(v69 + 16) = 0;
    if (v72)
      operator delete(v72);
    MEMORY[0x212BC6398](v69, 0x10A0C4007E045F8);
  }
  v73 = v210;
  if (v210)
  {
    v74 = (unint64_t *)&v210->__shared_owners_;
    do
      v75 = __ldaxr(v74);
    while (__stlxr(v75 - 1, v74));
    if (!v75)
    {
      ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
      std::__shared_weak_count::__release_weak(v73);
    }
  }
  v76 = (std::__shared_weak_count *)*((_QWORD *)&v211 + 1);
  if (*((_QWORD *)&v211 + 1))
  {
    v77 = (unint64_t *)(*((_QWORD *)&v211 + 1) + 8);
    do
      v78 = __ldaxr(v77);
    while (__stlxr(v78 - 1, v77));
    if (!v78)
    {
      ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
      std::__shared_weak_count::__release_weak(v76);
    }
  }
  v79 = v207;
  if (v207)
  {
    v80 = *(_QWORD **)(v207 + 32);
    if (v80)
    {
      do
      {
        v81 = (_QWORD *)*v80;
        operator delete(v80);
        v80 = v81;
      }
      while (v81);
    }
    v82 = *(void **)(v79 + 16);
    *(_QWORD *)(v79 + 16) = 0;
    if (v82)
      operator delete(v82);
    MEMORY[0x212BC6398](v79, 0x10A0C4007E045F8);
  }
LABEL_104:
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_QWORD *)a1 = off_24C9F2998;
  v83 = (_BYTE *)operator new();
  v84 = v83;
  v206 = v23;
  if (v23)
  {
    sub_210218050("MappingIO", 9uLL, a2, 4, &v223);
    v85 = v223;
    v211 = v223;
    v223 = 0uLL;
    v86 = (char *)operator new(0x178uLL);
    *((_QWORD *)v86 + 1) = 0;
    *((_QWORD *)v86 + 2) = 0;
    *(_QWORD *)v86 = &off_24C9F2AD0;
    v209 = (std::__shared_weak_count *)sub_20EFA3D78((uint64_t)(v86 + 24), &v206);
    v210 = (std::__shared_weak_count *)v86;
    v207 = 0;
    v208 = 0;
    *(_QWORD *)v212 = &off_24C9F2B20;
    if (v86[327] < 0)
    {
      sub_20E860C04(&v212[8], *((void **)v86 + 38), *((_QWORD *)v86 + 39));
    }
    else
    {
      *(_OWORD *)&v212[8] = *((_OWORD *)v86 + 19);
      *(_QWORD *)&v212[24] = *((_QWORD *)v86 + 40);
    }
    if (v86[351] < 0)
    {
      sub_20E860C04(v213, *((void **)v86 + 41), *((_QWORD *)v86 + 42));
    }
    else
    {
      *(_OWORD *)v213 = *(_OWORD *)(v86 + 328);
      *(_QWORD *)&v213[16] = *((_QWORD *)v86 + 43);
    }
    v214 = v85;
    v211 = 0uLL;
    v224 = v85;
    if (*((_QWORD *)&v85 + 1))
    {
      v87 = (unint64_t *)(*((_QWORD *)&v85 + 1) + 8);
      do
        v88 = __ldxr(v87);
      while (__stxr(v88 + 1, v87));
    }
    sub_20EFB5BBC((uint64_t *)&v215, (uint64_t)&v224, (uint64_t *)&v209);
    if (*((_QWORD *)&v85 + 1))
    {
      v89 = (unint64_t *)(*((_QWORD *)&v85 + 1) + 8);
      do
        v90 = __ldaxr(v89);
      while (__stlxr(v90 - 1, v89));
      if (!v90)
      {
        (*(void (**)(_QWORD))(**((_QWORD **)&v85 + 1) + 16))(*((_QWORD *)&v85 + 1));
        std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v85 + 1));
      }
    }
    *(_QWORD *)v84 = &off_24C9F2B20;
    *(_OWORD *)(v84 + 8) = *(_OWORD *)&v212[8];
    *((_QWORD *)v84 + 3) = *(_QWORD *)&v212[24];
    memset(&v212[8], 0, 24);
    *((_OWORD *)v84 + 2) = *(_OWORD *)v213;
    *((_QWORD *)v84 + 6) = *(_QWORD *)&v213[16];
    memset(v213, 0, sizeof(v213));
    *(_OWORD *)(v84 + 56) = v214;
    v214 = 0uLL;
    v91 = v215;
    *(_QWORD *)&v215 = 0;
    *((_QWORD *)v84 + 9) = v91;
    v84[80] = 1;
    sub_20EFD0900((uint64_t)v212);
    v92 = v210;
    if (v210)
    {
      v93 = (unint64_t *)&v210->__shared_owners_;
      do
        v94 = __ldaxr(v93);
      while (__stlxr(v94 - 1, v93));
      if (!v94)
      {
        ((void (*)(std::__shared_weak_count *))v92->__on_zero_shared)(v92);
        std::__shared_weak_count::__release_weak(v92);
      }
    }
    v95 = v208;
    if (v208)
    {
      v96 = (unint64_t *)&v208->__shared_owners_;
      do
        v97 = __ldaxr(v96);
      while (__stlxr(v97 - 1, v96));
      if (!v97)
      {
        ((void (*)(std::__shared_weak_count *))v95->__on_zero_shared)(v95);
        std::__shared_weak_count::__release_weak(v95);
      }
    }
    v98 = (std::__shared_weak_count *)*((_QWORD *)&v211 + 1);
    if (*((_QWORD *)&v211 + 1))
    {
      v99 = (unint64_t *)(*((_QWORD *)&v211 + 1) + 8);
      do
        v100 = __ldaxr(v99);
      while (__stlxr(v100 - 1, v99));
      if (!v100)
      {
        ((void (*)(std::__shared_weak_count *))v98->__on_zero_shared)(v98);
        std::__shared_weak_count::__release_weak(v98);
      }
    }
    v101 = (std::__shared_weak_count *)*((_QWORD *)&v223 + 1);
    if (*((_QWORD *)&v223 + 1))
    {
      v102 = (unint64_t *)(*((_QWORD *)&v223 + 1) + 8);
      do
        v103 = __ldaxr(v102);
      while (__stlxr(v103 - 1, v102));
      if (!v103)
      {
        ((void (*)(std::__shared_weak_count *))v101->__on_zero_shared)(v101);
        std::__shared_weak_count::__release_weak(v101);
      }
    }
  }
  else
  {
    *v83 = 0;
    v83[80] = 0;
  }
  v104 = (char *)operator new(0x20uLL);
  strcpy(v104, "Mapping IO error forward");
  *(_OWORD *)(v84 + 120) = 0u;
  *((_QWORD *)v84 + 11) = &off_24C9F50E8;
  *((_QWORD *)v84 + 12) = v104;
  *(_OWORD *)(v84 + 104) = xmmword_2102DBFB0;
  *(_OWORD *)(v84 + 136) = 0u;
  *((_QWORD *)v84 + 19) = 0;
  v105 = (std::__shared_weak_count *)operator new(0x58uLL);
  v105->__shared_owners_ = 0;
  v106 = (unint64_t *)&v105->__shared_owners_;
  v105->__shared_weak_owners_ = 0;
  v105->__vftable = (std::__shared_weak_count_vtbl *)&unk_24C9B6A90;
  MEMORY[0x212BC5E10](&v105[1]);
  do
    v107 = __ldxr(v106);
  while (__stxr(v107 + 1, v106));
  v108 = operator new();
  *(_BYTE *)(v108 + 8) = 1;
  *(_QWORD *)(v108 + 48) = 0;
  *(_QWORD *)(v108 + 32) = 0;
  *(_QWORD *)(v108 + 40) = 0;
  *(_QWORD *)v108 = &off_24C9F5180;
  *(_QWORD *)(v108 + 16) = &unk_24C9F51F8;
  *(_QWORD *)(v108 + 24) = &unk_24C9F5238;
  *(_QWORD *)(v108 + 56) = 0;
  *(_QWORD *)(v108 + 64) = 0;
  *(_QWORD *)(v108 + 72) = v105 + 1;
  *(_QWORD *)(v108 + 80) = v105;
  v109 = (_QWORD *)operator new();
  *v109 = &off_24C9F5320;
  *(_QWORD *)(v108 + 88) = v109;
  *(_QWORD *)(v108 + 96) = v108 + 96;
  *(_QWORD *)(v108 + 104) = v108 + 96;
  *(_QWORD *)(v108 + 112) = 0;
  *(_QWORD *)(v108 + 120) = v108 + 120;
  *(_QWORD *)(v108 + 128) = v108 + 120;
  *(_QWORD *)(v108 + 136) = 0;
  v110 = (std::__shared_weak_count *)operator new();
  v110->__shared_owners_ = 0;
  v111 = (unint64_t *)&v110->__shared_owners_;
  v110->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9F5370;
  v110->__shared_weak_owners_ = 0;
  v110[1].__vftable = (std::__shared_weak_count_vtbl *)v108;
  v112 = *(std::__shared_weak_count **)(v108 + 40);
  if (v112)
  {
    if (v112->__shared_owners_ != -1)
      goto LABEL_155;
    do
      v113 = __ldxr(v111);
    while (__stxr(v113 + 1, v111));
    p_shared_weak_owners = (unint64_t *)&v110->__shared_weak_owners_;
    do
      v115 = __ldxr(p_shared_weak_owners);
    while (__stxr(v115 + 1, p_shared_weak_owners));
    *(_QWORD *)(v108 + 32) = v108;
    *(_QWORD *)(v108 + 40) = v110;
    std::__shared_weak_count::__release_weak(v112);
  }
  else
  {
    do
      v116 = __ldxr(v111);
    while (__stxr(v116 + 1, v111));
    v117 = (unint64_t *)&v110->__shared_weak_owners_;
    do
      v118 = __ldxr(v117);
    while (__stxr(v118 + 1, v117));
    *(_QWORD *)(v108 + 32) = v108;
    *(_QWORD *)(v108 + 40) = v110;
  }
  do
    v119 = __ldaxr(v111);
  while (__stlxr(v119 - 1, v111));
  if (!v119)
  {
    ((void (*)(std::__shared_weak_count *))v110->__on_zero_shared)(v110);
    std::__shared_weak_count::__release_weak(v110);
  }
LABEL_155:
  *(_QWORD *)v212 = &off_24C9F5118;
  strcpy(&v212[8], "channel");
  *(_QWORD *)&v212[16] = v224;
  *(_QWORD *)&v212[23] = *(_QWORD *)((char *)&v224 + 7);
  v212[31] = 7;
  *(_QWORD *)&v224 = 0;
  *(_QWORD *)((char *)&v224 + 7) = 0;
  *(_QWORD *)v213 = 0x7974706D45;
  *(_QWORD *)&v213[8] = v223;
  *(_QWORD *)&v213[15] = *(_QWORD *)((char *)&v223 + 7);
  v213[23] = 5;
  *(_QWORD *)&v223 = 0;
  *(_QWORD *)((char *)&v223 + 7) = 0;
  v214 = 0uLL;
  v120 = (unint64_t *)&v110->__shared_weak_owners_;
  *(_QWORD *)&v215 = v108;
  *((_QWORD *)&v215 + 1) = v110;
  do
    v121 = __ldxr(v120);
  while (__stxr(v121 + 1, v120));
  v216 = &off_24C9B46A0;
  v122 = (_QWORD *)operator new();
  *v122 = &off_24C9CC2D8;
  v122[1] = v108;
  v122[2] = v110;
  *(_QWORD *)&v217 = v122;
  v124 = *((_QWORD *)&v215 + 1);
  v123 = v215;
  if (!*((_QWORD *)&v215 + 1))
  {
    *((_QWORD *)&v217 + 1) = v215;
    v218 = 0;
    if ((_QWORD)v215)
      v128 = v215 + 16;
    else
      v128 = 0;
    goto LABEL_174;
  }
  v125 = (unint64_t *)(*((_QWORD *)&v215 + 1) + 16);
  do
    v126 = __ldxr(v125);
  while (__stxr(v126 + 1, v125));
  v127 = *((_QWORD *)&v215 + 1);
  *((_QWORD *)&v217 + 1) = v123;
  v218 = v124;
  if ((_QWORD)v215)
    v128 = v215 + 16;
  else
    v128 = 0;
  if (!*((_QWORD *)&v215 + 1))
  {
    v123 = v215;
LABEL_174:
    v131 = 0;
    v219 = &off_24C9F5148;
    v220 = v128;
    goto LABEL_175;
  }
  v129 = (unint64_t *)(*((_QWORD *)&v215 + 1) + 16);
  do
    v130 = __ldxr(v129);
  while (__stxr(v130 + 1, v129));
  v131 = *((_QWORD *)&v215 + 1);
  v123 = v215;
  v219 = &off_24C9F5148;
  *(_QWORD *)&v220 = v128;
  *((_QWORD *)&v220 + 1) = v127;
  if (*((_QWORD *)&v215 + 1))
  {
    v132 = (unint64_t *)(*((_QWORD *)&v215 + 1) + 16);
    do
      v133 = __ldxr(v132);
    while (__stxr(v133 + 1, v132));
  }
LABEL_175:
  if (v123)
    v134 = v123 + 24;
  else
    v134 = 0;
  v221 = &off_24C9B2310;
  *(_QWORD *)&v222 = v134;
  *((_QWORD *)&v222 + 1) = v131;
  v135 = operator new();
  *(_QWORD *)v135 = &off_24C9F5118;
  *(_OWORD *)(v135 + 8) = *(_OWORD *)&v212[8];
  *(_QWORD *)(v135 + 24) = *(_QWORD *)&v212[24];
  memset(&v212[8], 0, 24);
  *(_OWORD *)(v135 + 32) = *(_OWORD *)v213;
  *(_QWORD *)(v135 + 48) = *(_QWORD *)&v213[16];
  memset(v213, 0, sizeof(v213));
  *(_OWORD *)(v135 + 56) = v214;
  v214 = 0uLL;
  *(_OWORD *)(v135 + 72) = v215;
  v215 = 0uLL;
  *(_QWORD *)(v135 + 88) = &off_24C9B46A0;
  *(_OWORD *)(v135 + 96) = v217;
  v136 = v218;
  *((_QWORD *)&v217 + 1) = 0;
  v218 = 0;
  *(_QWORD *)(v135 + 112) = v136;
  *(_QWORD *)(v135 + 120) = &off_24C9F5148;
  *(_OWORD *)(v135 + 128) = v220;
  v220 = 0uLL;
  *(_QWORD *)&v217 = 0;
  *(_QWORD *)(v135 + 144) = &off_24C9B2310;
  *(_OWORD *)(v135 + 152) = v222;
  v222 = 0uLL;
  *((_QWORD *)v84 + 20) = v135;
  sub_20EFD1B80((uint64_t)v212);
  do
    v137 = __ldaxr(v106);
  while (__stlxr(v137 - 1, v106));
  if (!v137)
  {
    ((void (*)(std::__shared_weak_count *))v105->__on_zero_shared)(v105);
    std::__shared_weak_count::__release_weak(v105);
  }
  v138 = v224;
  *((_QWORD *)v84 + 21) = &off_24C9F53C0;
  *((_QWORD *)v84 + 22) = 0x65646F4E647746;
  *((_QWORD *)v84 + 23) = v138;
  *(_QWORD *)(v84 + 191) = *(_QWORD *)((char *)&v224 + 7);
  v84[199] = 7;
  *(_QWORD *)&v224 = 0;
  *(_QWORD *)((char *)&v224 + 7) = 0;
  *(_OWORD *)(v84 + 200) = 0u;
  *(_OWORD *)(v84 + 216) = 0u;
  *((_QWORD *)v84 + 29) = 0;
  v212[23] = 7;
  strcpy(v212, "channel");
  v139 = v84 + 240;
  sub_20EFD1D64((uint64_t *)v84 + 30, (uint64_t)v212);
  v140 = *((_QWORD *)v84 + 30);
  if (v84[80])
  {
    v141 = *((_QWORD *)v84 + 9);
    *(_QWORD *)v212 = &off_24C9F2B80;
    (*(void (**)(_BYTE *__return_ptr))(**(_QWORD **)(v141 + 96) + 16))(&v212[8]);
    (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)(v140 + 120) + 16))(v140 + 120, v212);
    v142 = *(_QWORD *)&v212[8];
    *(_OWORD *)v212 = (unint64_t)&off_24C9F2B80;
    if (v142)
      (*(void (**)(uint64_t))(*(_QWORD *)v142 + 8))(v142);
    v143 = *((_QWORD *)v84 + 30);
    v144 = *((_QWORD *)v84 + 9);
    *(_QWORD *)v212 = &off_24C9B46D8;
    (*(void (**)(_BYTE *__return_ptr))(**(_QWORD **)(v144 + 264) + 16))(&v212[8]);
    (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)(v143 + 288) + 16))(v143 + 288, v212);
    v145 = *(_QWORD *)&v212[8];
    *(_OWORD *)v212 = (unint64_t)&off_24C9B46D8;
    if (v145)
      (*(void (**)(uint64_t))(*(_QWORD *)v145 + 8))(v145);
    v146 = *((_QWORD *)v84 + 30);
    v147 = *((_QWORD *)v84 + 9);
    *(_QWORD *)v212 = &off_24C9B4710;
    (*(void (**)(_BYTE *__return_ptr))(**(_QWORD **)(v147 + 600) + 16))(&v212[8]);
    (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)(v146 + 1128) + 16))(v146 + 1128, v212);
    v148 = *(_QWORD *)&v212[8];
    *(_OWORD *)v212 = (unint64_t)&off_24C9B4710;
    if (v148)
      (*(void (**)(uint64_t))(*(_QWORD *)v148 + 8))(v148);
    v149 = *((_QWORD *)v84 + 30);
    v150 = *((_QWORD *)v84 + 9);
    *(_QWORD *)v212 = &off_24C9B4748;
    (*(void (**)(_BYTE *__return_ptr))(**(_QWORD **)(v150 + 432) + 16))(&v212[8]);
    (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)(v149 + 456) + 16))(v149 + 456, v212);
    v151 = *(_QWORD *)&v212[8];
    *(_OWORD *)v212 = (unint64_t)&off_24C9B4748;
    if (v151)
      (*(void (**)(uint64_t))(*(_QWORD *)v151 + 8))(v151);
    v152 = *((_QWORD *)v84 + 9);
    v153 = *((_QWORD *)v84 + 30);
    *(_QWORD *)v212 = &off_24C9F2BF0;
    (*(void (**)(_BYTE *__return_ptr))(**(_QWORD **)(v153 + 600) + 16))(&v212[8]);
    (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)(v152 + 120) + 16))(v152 + 120, v212);
    v154 = *(_QWORD *)&v212[8];
    *(_OWORD *)v212 = (unint64_t)&off_24C9F2BF0;
    if (v154)
      (*(void (**)(uint64_t))(*(_QWORD *)v154 + 8))(v154);
    v155 = *((_QWORD *)v84 + 9);
    v156 = *((_QWORD *)v84 + 30);
    *(_QWORD *)v212 = &off_24C9F2CC8;
    (*(void (**)(_BYTE *__return_ptr))(**(_QWORD **)(v156 + 768) + 16))(&v212[8]);
    (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)(v155 + 288) + 16))(v155 + 288, v212);
    v157 = *(_QWORD *)&v212[8];
    *(_OWORD *)v212 = (unint64_t)&off_24C9F2CC8;
    if (v157)
      (*(void (**)(uint64_t))(*(_QWORD *)v157 + 8))(v157);
    v158 = *((_QWORD *)v84 + 9);
    v159 = *((_QWORD *)v84 + 30);
    *(_QWORD *)v212 = &off_24C9F2CC8;
    (*(void (**)(_BYTE *__return_ptr))(**(_QWORD **)(v159 + 936) + 16))(&v212[8]);
    (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)(v158 + 288) + 16))(v158 + 288, v212);
    v160 = *(_QWORD *)&v212[8];
    *(_OWORD *)v212 = (unint64_t)&off_24C9F2CC8;
    if (v160)
      (*(void (**)(uint64_t))(*(_QWORD *)v160 + 8))(v160);
    v161 = *(_QWORD *)v139;
    *(_QWORD *)v212 = &off_24C9F2BF0;
    (*(void (**)(_BYTE *__return_ptr))(**(_QWORD **)(v161 + 600) + 16))(&v212[8]);
    (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)(v161 + 960) + 16))(v161 + 960, v212);
    v162 = *(_QWORD *)&v212[8];
    *(_OWORD *)v212 = (unint64_t)&off_24C9F2BF0;
    if (v162)
      (*(void (**)(uint64_t))(*(_QWORD *)v162 + 8))(v162);
    v163 = *((_QWORD *)v84 + 9);
    v164 = *((_QWORD *)v84 + 20);
    *(_QWORD *)v212 = &off_24C9B46A0;
    (*(void (**)(_BYTE *__return_ptr))(**(_QWORD **)(v164 + 96) + 16))(&v212[8]);
    (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)(v163 + 144) + 16))(v163 + 144, v212);
    v165 = *(_QWORD *)&v212[8];
    *(_OWORD *)v212 = (unint64_t)&off_24C9B46A0;
    if (v165)
      (*(void (**)(uint64_t))(*(_QWORD *)v165 + 8))(v165);
    v166 = *((_QWORD *)v84 + 9);
    v167 = *((_QWORD *)v84 + 20);
    *(_QWORD *)v212 = &off_24C9B46A0;
    (*(void (**)(_BYTE *__return_ptr))(**(_QWORD **)(v167 + 96) + 16))(&v212[8]);
    (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)(v166 + 312) + 16))(v166 + 312, v212);
    v168 = *(_QWORD *)&v212[8];
    *(_OWORD *)v212 = (unint64_t)&off_24C9B46A0;
    if (v168)
      (*(void (**)(uint64_t))(*(_QWORD *)v168 + 8))(v168);
    v169 = *((_QWORD *)v84 + 9);
    v170 = *((_QWORD *)v84 + 20);
    *(_QWORD *)v212 = &off_24C9B46A0;
    (*(void (**)(_BYTE *__return_ptr))(**(_QWORD **)(v170 + 96) + 16))(&v212[8]);
    (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)(v169 + 648) + 16))(v169 + 648, v212);
    v171 = *(_QWORD *)&v212[8];
    *(_OWORD *)v212 = (unint64_t)&off_24C9B46A0;
    if (v171)
      (*(void (**)(uint64_t))(*(_QWORD *)v171 + 8))(v171);
    v172 = *((_QWORD *)v84 + 9);
    v173 = *((_QWORD *)v84 + 20);
    *(_QWORD *)v212 = &off_24C9B46A0;
    (*(void (**)(_BYTE *__return_ptr))(**(_QWORD **)(v173 + 96) + 16))(&v212[8]);
    (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)(v172 + 816) + 16))(v172 + 816, v212);
    v174 = *(_QWORD *)&v212[8];
    *(_OWORD *)v212 = (unint64_t)&off_24C9B46A0;
    if (v174)
      (*(void (**)(uint64_t))(*(_QWORD *)v174 + 8))(v174);
    v175 = *((_QWORD *)v84 + 9);
    v176 = *((_QWORD *)v84 + 20);
    *(_QWORD *)v212 = &off_24C9B46A0;
    (*(void (**)(_BYTE *__return_ptr))(**(_QWORD **)(v176 + 96) + 16))(&v212[8]);
    (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)(v175 + 480) + 16))(v175 + 480, v212);
    v177 = *(_QWORD *)&v212[8];
    *(_OWORD *)v212 = (unint64_t)&off_24C9B46A0;
    if (v177)
      (*(void (**)(uint64_t))(*(_QWORD *)v177 + 8))(v177);
  }
  else
  {
    (*(void (**)(_QWORD))(**(_QWORD **)(v140 + 96) + 32))(*(_QWORD *)(v140 + 96));
    (*(void (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)v139 + 264) + 32))(*(_QWORD *)(*(_QWORD *)v139 + 264));
    (*(void (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)v139 + 432) + 32))(*(_QWORD *)(*(_QWORD *)v139 + 432));
    (*(void (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)v139 + 1104) + 32))(*(_QWORD *)(*(_QWORD *)v139
                                                                                                + 1104));
  }
  sub_20E8B43E8((std::string *)(v84 + 200), "Forwards inputs and outputs to/from mapping IO", 0x2EuLL);
  v178 = *(_QWORD *)v139;
  if (*(char *)(*(_QWORD *)v139 + 31) < 0)
  {
    *(_QWORD *)(v178 + 16) = 20;
    v179 = *(char **)(v178 + 8);
  }
  else
  {
    v179 = (char *)(v178 + 8);
    *(_BYTE *)(v178 + 31) = 20;
  }
  strcpy(v179, "Location Fwd Channel");
  if (*(char *)(v178 + 55) < 0)
  {
    *(_QWORD *)(v178 + 40) = 22;
    v180 = *(char **)(v178 + 32);
  }
  else
  {
    v180 = (char *)(v178 + 32);
    *(_BYTE *)(v178 + 55) = 22;
  }
  strcpy(v180, "Forwards location info");
  v181 = *(_QWORD *)v139;
  sub_20E8B43E8((std::string *)(*(_QWORD *)v139 + 176), "Save Bundle Fwd Channel", 0x17uLL);
  sub_20E8B43E8((std::string *)(v181 + 200), "Forwards save bundle to mapping IO", 0x22uLL);
  v182 = *(_QWORD *)v139;
  sub_20E8B43E8((std::string *)(*(_QWORD *)v139 + 344), "Frame Debug Fwd Channel", 0x17uLL);
  sub_20E8B43E8((std::string *)(v182 + 368), "Forwards frames for debugging purposes (save to disk)", 0x35uLL);
  v183 = *(_QWORD *)v139;
  sub_20E8B43E8((std::string *)(*(_QWORD *)v139 + 512), "Loaded data Fwd Channel", 0x17uLL);
  sub_20E8B43E8((std::string *)(v183 + 536), "Forwards loaded submap data to output", 0x25uLL);
  v184 = *(_QWORD *)v139;
  sub_20E8B43E8((std::string *)(*(_QWORD *)v139 + 680), "Location request Fwd Channel", 0x1CuLL);
  sub_20E8B43E8((std::string *)(v184 + 704), "Forwards a location request instance", 0x24uLL);
  v185 = *(_QWORD *)v139;
  sub_20E8B43E8((std::string *)(*(_QWORD *)v139 + 848), "Restart load data Fwd Channel", 0x1DuLL);
  sub_20E8B43E8((std::string *)(v185 + 872), "Forwards data loaded at restart", 0x1FuLL);
  v186 = *(_QWORD *)v139;
  sub_20E8B43E8((std::string *)(*(_QWORD *)v139 + 1016), "Pause / resume request Fwd Channel", 0x22uLL);
  sub_20E8B43E8((std::string *)(v186 + 1040), "Forwards a pause / resume request instance", 0x2AuLL);
  if (v206)
    (*(void (**)(uint64_t))(*(_QWORD *)v206 + 8))(v206);
  *(_QWORD *)(a1 + 56) = v84;
  *(_QWORD *)(a1 + 64) = sub_20EFDC560;
  if (*(char *)(a1 + 31) < 0)
  {
    *(_QWORD *)(a1 + 16) = 18;
    v187 = *(char **)(a1 + 8);
  }
  else
  {
    *(_BYTE *)(a1 + 31) = 18;
    v187 = (char *)(a1 + 8);
  }
  strcpy(v187, "MappingIONodeGroup");
  sub_20E8B43E8((std::string *)(a1 + 32), "Node group for mapping IO", 0x19uLL);
  if (!*((_QWORD *)&v191 + 1))
    goto LABEL_225;
  v188 = (unint64_t *)(*((_QWORD *)&v191 + 1) + 8);
  do
    v189 = __ldaxr(v188);
  while (__stlxr(v189 - 1, v188));
  if (!v189)
  {
    (*(void (**)(_QWORD))(**((_QWORD **)&v191 + 1) + 16))(*((_QWORD *)&v191 + 1));
    std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v191 + 1));
    if ((SHIBYTE(v198) & 0x80000000) == 0)
    {
LABEL_226:
      if ((SHIBYTE(v193) & 0x80000000) == 0)
        goto LABEL_227;
LABEL_231:
      operator delete(v192[0]);
      if ((SHIBYTE(v204) & 0x80000000) == 0)
        return a1;
LABEL_232:
      operator delete(__dst[0]);
      return a1;
    }
  }
  else
  {
LABEL_225:
    if ((SHIBYTE(v198) & 0x80000000) == 0)
      goto LABEL_226;
  }
  operator delete(__p[0]);
  if (SHIBYTE(v193) < 0)
    goto LABEL_231;
LABEL_227:
  if (SHIBYTE(v204) < 0)
    goto LABEL_232;
  return a1;
}

void sub_20EFA6E1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void *__p,uint64_t a38,int a39,__int16 a40,char a41,char a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,char a50,uint64_t a51,uint64_t a52)
{
  std::__shared_weak_count *v52;
  void *v54;

  __cxa_guard_abort(&qword_254A6DA78);
  sub_20E86665C((uint64_t)&a52);
  std::__shared_weak_count::~__shared_weak_count(v52);
  operator delete(v54);
  sub_20E86665C((uint64_t)&a50);
  sub_20EF7659C(&a46);
  sub_20E86665C((uint64_t)&a13);
  sub_20EF7674C((uint64_t)&a15);
  if (a42 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t sub_20EFA73A4@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  _BYTE v5[128];
  _BYTE v6[128];
  _QWORD v7[17];

  v7[16] = *MEMORY[0x24BDAC8D0];
  v3 = *(_QWORD *)(a1 + 56);
  if (*(_BYTE *)(v3 + 80))
  {
    sub_20EFA7924((uint64_t)v5, v3);
    sub_20EFAAADC((uint64_t)v6, v3 + 88);
    sub_20EFAB868((uint64_t)v7, v3 + 168);
    sub_20EBA4824(a2, (uint64_t)v5, 3uLL);
    sub_20EBA8C18((uint64_t)v7);
  }
  else
  {
    sub_20EFAAADC((uint64_t)v5, v3 + 88);
    sub_20EFAB868((uint64_t)v6, v3 + 168);
    sub_20EBA4824(a2, (uint64_t)v5, 2uLL);
  }
  sub_20EBA8C18((uint64_t)v6);
  return sub_20EBA8C18((uint64_t)v5);
}

void sub_20EFA74A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  uint64_t v10;

  sub_20EBA8C18(v10);
  sub_20EBA8C18((uint64_t)&a10);
  _Unwind_Resume(a1);
}

void sub_20EFA74E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10)
{
  char *v10;

  do
  {
    v10 -= 128;
    sub_20EBA8C18((uint64_t)v10);
  }
  while (v10 != &a10);
  _Unwind_Resume(a1);
}

uint64_t sub_20EFA750C(uint64_t a1)
{
  uint64_t v1;
  _QWORD **v2;
  _QWORD **v3;

  v1 = *(_QWORD *)(a1 + 56);
  if (*(_BYTE *)(v1 + 80))
  {
    v2 = *(_QWORD ***)(v1 + 72);
    (*(void (**)(_QWORD *))(*v2[9] + 64))(v2[9]);
    (*(void (**)(_QWORD *))(*v2[30] + 64))(v2[30]);
    (*(void (**)(_QWORD *))(*v2[51] + 64))(v2[51]);
    (*(void (**)(_QWORD *))(*v2[72] + 64))(v2[72]);
    (*(void (**)(_QWORD *))(*v2[93] + 64))(v2[93]);
  }
  (*(void (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v1 + 160) + 72) + 64))(*(_QWORD *)(*(_QWORD *)(v1 + 160)
                                                                                                  + 72));
  v3 = *(_QWORD ***)(v1 + 240);
  (*(void (**)(_QWORD *))(*v3[9] + 64))(v3[9]);
  (*(void (**)(_QWORD *))(*v3[30] + 64))(v3[30]);
  (*(void (**)(_QWORD *))(*v3[51] + 64))(v3[51]);
  (*(void (**)(_QWORD *))(*v3[72] + 64))(v3[72]);
  (*(void (**)(_QWORD *))(*v3[93] + 64))(v3[93]);
  (*(void (**)(_QWORD *))(*v3[114] + 64))(v3[114]);
  return (*(uint64_t (**)(_QWORD *))(*v3[135] + 64))(v3[135]);
}

uint64_t sub_20EFA7608(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = off_24C9F2998;
  v2 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 56) = 0;
  if (v2)
    (*(void (**)(void))(a1 + 64))();
  *(_QWORD *)a1 = off_24CA1E1D8;
  if (*(char *)(a1 + 55) < 0)
  {
    operator delete(*(void **)(a1 + 32));
    if ((*(char *)(a1 + 31) & 0x80000000) == 0)
      return a1;
  }
  else if ((*(char *)(a1 + 31) & 0x80000000) == 0)
  {
    return a1;
  }
  operator delete(*(void **)(a1 + 8));
  return a1;
}

void sub_20EFA7690(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = off_24C9F2998;
  v2 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 56) = 0;
  if (v2)
    (*(void (**)(void))(a1 + 64))();
  *(_QWORD *)a1 = off_24CA1E1D8;
  if (*(char *)(a1 + 55) < 0)
  {
    operator delete(*(void **)(a1 + 32));
    if ((*(char *)(a1 + 31) & 0x80000000) == 0)
LABEL_8:
      JUMPOUT(0x212BC6398);
  }
  else if ((*(char *)(a1 + 31) & 0x80000000) == 0)
  {
    goto LABEL_8;
  }
  operator delete(*(void **)(a1 + 8));
  goto LABEL_8;
}

void sub_20EFA771C(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9F29E0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_20EFA772C(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9F29E0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC6398);
}

void sub_20EFA775C(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;

  v2 = *(std::__shared_weak_count **)(a1 + 48);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = *(std::__shared_weak_count **)(a1 + 32);
    if (!v5)
      return;
  }
  else
  {
LABEL_5:
    v5 = *(std::__shared_weak_count **)(a1 + 32);
    if (!v5)
      return;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
}

void sub_20EFA77FC(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9F2A30;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_20EFA780C(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9F2A30;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC6398);
}

void sub_20EFA7844(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9F2A80;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_20EFA7854(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9F2A80;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC6398);
}

void sub_20EFA7884(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;

  v2 = *(std::__shared_weak_count **)(a1 + 48);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = *(std::__shared_weak_count **)(a1 + 32);
    if (!v5)
      return;
  }
  else
  {
LABEL_5:
    v5 = *(std::__shared_weak_count **)(a1 + 32);
    if (!v5)
      return;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
}

void sub_20EFA7924(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  __int128 *v8;
  char *v9;
  __int128 *v10;
  char *v11;
  __int128 v12;
  uint64_t v13;
  void **v14;
  char *v15;
  void **v16;
  char *v17;
  int v20;
  size_t v21;
  unint64_t v22;
  __int128 *v23;
  uint64_t v24;
  uint64_t v25;
  __int128 *p_dst;
  char *v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  __int128 v31;
  std::__shared_weak_count *v32;
  std::__shared_weak_count *v33;
  std::__shared_weak_count *v34;
  uint64_t v35;
  _QWORD *v36;
  unint64_t *p_shared_owners;
  unint64_t v38;
  _QWORD *v39;
  __int128 v40;
  char *v41;
  std::__shared_weak_count *v42;
  std::__shared_weak_count *v43;
  std::__shared_weak_count *v44;
  uint64_t v45;
  _QWORD *v46;
  unint64_t *v47;
  unint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  __int128 v51;
  char *v52;
  uint64_t v53;
  unsigned __int8 v54;
  uint64_t v55;
  __int128 *v56;
  char *v57;
  __int128 *v58;
  char *v59;
  char *v60;
  uint64_t v61;
  __int128 v62;
  uint64_t v63;
  __int128 v64;
  uint64_t v65;
  void **v66;
  char *v67;
  void **v68;
  char *v69;
  int v72;
  size_t v73;
  unint64_t v74;
  __int128 *v75;
  uint64_t v76;
  uint64_t v77;
  __int128 *v78;
  char *v79;
  uint64_t v80;
  __int128 v81;
  uint64_t v82;
  __int128 v83;
  std::__shared_weak_count *v84;
  std::__shared_weak_count *v85;
  std::__shared_weak_count *v86;
  uint64_t v87;
  _QWORD *v88;
  unint64_t *v89;
  unint64_t v90;
  _QWORD *v91;
  __int128 v92;
  char *v93;
  std::__shared_weak_count *v94;
  std::__shared_weak_count *v95;
  std::__shared_weak_count *v96;
  uint64_t v97;
  _QWORD *v98;
  unint64_t *v99;
  unint64_t v100;
  _QWORD *v101;
  uint64_t v102;
  __int128 v103;
  char *v104;
  uint64_t v105;
  uint64_t *v106;
  __int128 v107;
  uint64_t v108;
  __int128 *v109;
  char *v110;
  __int128 *v111;
  char *v112;
  char *v113;
  uint64_t v114;
  __int128 v115;
  uint64_t v116;
  __int128 v117;
  uint64_t v118;
  void **v119;
  char *v120;
  void **v121;
  char *v122;
  int v125;
  size_t v126;
  unint64_t v127;
  __int128 *v128;
  uint64_t v129;
  uint64_t v130;
  __int128 *v131;
  char *v132;
  uint64_t v133;
  __int128 v134;
  uint64_t v135;
  __int128 v136;
  std::__shared_weak_count *v137;
  std::__shared_weak_count *v138;
  std::__shared_weak_count *v139;
  uint64_t v140;
  _QWORD *v141;
  unint64_t *v142;
  unint64_t v143;
  _QWORD *v144;
  __int128 v145;
  char *v146;
  std::__shared_weak_count *v147;
  std::__shared_weak_count *v148;
  std::__shared_weak_count *v149;
  uint64_t v150;
  _QWORD *v151;
  unint64_t *v152;
  unint64_t v153;
  _QWORD *v154;
  uint64_t v155;
  __int128 v156;
  char *v157;
  uint64_t v158;
  uint64_t v159;
  __int128 *v160;
  char *v161;
  __int128 *v162;
  char *v163;
  char *v164;
  uint64_t v165;
  __int128 v166;
  uint64_t v167;
  __int128 v168;
  uint64_t v169;
  void **v170;
  char *v171;
  void **v172;
  char *v173;
  int v176;
  size_t v177;
  unint64_t v178;
  __int128 *v179;
  uint64_t v180;
  uint64_t v181;
  __int128 *v182;
  char *v183;
  uint64_t v184;
  __int128 v185;
  uint64_t v186;
  __int128 v187;
  std::__shared_weak_count *v188;
  std::__shared_weak_count *v189;
  std::__shared_weak_count *v190;
  uint64_t v191;
  _QWORD *v192;
  unint64_t *v193;
  unint64_t v194;
  _QWORD *v195;
  __int128 v196;
  char *v197;
  std::__shared_weak_count *v198;
  std::__shared_weak_count *v199;
  std::__shared_weak_count *v200;
  uint64_t v201;
  _QWORD *v202;
  unint64_t *v203;
  unint64_t v204;
  _QWORD *v205;
  uint64_t v206;
  __int128 v207;
  char *v208;
  uint64_t v209;
  uint64_t *v210;
  __int128 v211;
  uint64_t v212;
  __int128 *v213;
  char *v214;
  __int128 *v215;
  char *v216;
  char *v217;
  uint64_t v218;
  __int128 v219;
  uint64_t v220;
  __int128 v221;
  uint64_t v222;
  void **v223;
  char *v224;
  void **v225;
  char *v226;
  int v229;
  size_t v230;
  unint64_t v231;
  __int128 *v232;
  uint64_t v233;
  uint64_t v234;
  __int128 *v235;
  char *v236;
  uint64_t v237;
  __int128 v238;
  uint64_t v239;
  __int128 v240;
  std::__shared_weak_count *v241;
  std::__shared_weak_count *v242;
  std::__shared_weak_count *v243;
  uint64_t v244;
  _QWORD *v245;
  unint64_t *v246;
  unint64_t v247;
  _QWORD *v248;
  __int128 v249;
  char *v250;
  std::__shared_weak_count *v251;
  std::__shared_weak_count *v252;
  std::__shared_weak_count *v253;
  uint64_t v254;
  _QWORD *v255;
  unint64_t *v256;
  unint64_t v257;
  _QWORD *v258;
  __int128 v259;
  char *v260;
  _BOOL4 v261;
  char *v262;
  char *v263;
  char *v264;
  char *v265;
  void *v266;
  __int128 v267;
  int v268;
  size_t v269;
  unint64_t v270;
  __int128 *v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t *v274;
  uint64_t v275;
  uint64_t v276;
  void *v277[2];
  uint64_t v278;
  void *v279[2];
  uint64_t v280;
  void *v281;
  char *v282;
  unint64_t v283;
  void *v284;
  char *v285;
  unint64_t v286;
  _QWORD *v287;
  _QWORD *v288;
  uint64_t v289;
  void *v290[2];
  uint64_t v291;
  __int128 v292;
  __int128 v293;
  unint64_t v294;
  __int128 __p;
  _BYTE v296[24];
  uint64_t v297;
  __int128 v298;
  uint64_t v299;
  __int128 __dst;
  int64_t v301;

  v284 = 0;
  v285 = 0;
  v286 = 0;
  v281 = 0;
  v282 = 0;
  v283 = 0;
  v4 = *(_QWORD *)(a2 + 72);
  if (v4)
  {
    v275 = a2;
    v276 = a1;
    if ((*(char *)(v4 + 31) & 0x80000000) == 0)
    {
LABEL_3:
      v5 = *(_OWORD *)(v4 + 8);
      v301 = *(_QWORD *)(v4 + 24);
      __dst = v5;
      goto LABEL_7;
    }
  }
  else
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/Node.h", 220, (uint64_t)"channels_", 9, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v4 = *(_QWORD *)(a2 + 72);
    v275 = a2;
    v276 = a1;
    if ((*(char *)(v4 + 31) & 0x80000000) == 0)
      goto LABEL_3;
  }
  sub_20E860C04(&__dst, *(void **)(v4 + 8), *(_QWORD *)(v4 + 16));
LABEL_7:
  v6 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v4 + 96) + 48))(*(_QWORD *)(v4 + 96));
  sub_20EFAFE38();
  if (byte_254A60D2F < 0)
  {
    sub_20E860C04(&v298, (void *)xmmword_254A60D18, *((unint64_t *)&xmmword_254A60D18 + 1));
  }
  else
  {
    v298 = xmmword_254A60D18;
    v299 = unk_254A60D28;
  }
  v7 = HIBYTE(v299);
  if (v299 >= 0)
  {
    v8 = &v298;
  }
  else
  {
    v7 = *((_QWORD *)&v298 + 1);
    v8 = (__int128 *)v298;
  }
  if (v7 >= 4)
  {
    v9 = (char *)v8 + v7;
    v10 = v8;
    do
    {
      v11 = (char *)memchr(v10, 118, v7 - 3);
      if (!v11)
        break;
      if (*(_DWORD *)v11 == 1684631414)
      {
        if (v11 == v9 || v11 - (char *)v8 == -1)
          break;
        *(_QWORD *)&v292 = v6;
        DWORD2(v292) = 4;
        if (SHIBYTE(v301) < 0)
        {
          sub_20E860C04(&v293, (void *)__dst, *((unint64_t *)&__dst + 1));
        }
        else
        {
          v293 = __dst;
          v294 = v301;
        }
        if (*(char *)(v4 + 55) < 0)
        {
          sub_20E860C04(&__p, *(void **)(v4 + 32), *(_QWORD *)(v4 + 40));
        }
        else
        {
          v267 = *(_OWORD *)(v4 + 32);
          *(_QWORD *)v296 = *(_QWORD *)(v4 + 48);
          __p = v267;
        }
        sub_20EFB08A4();
        if ((byte_254A60E1F & 0x80000000) == 0)
        {
          *(_OWORD *)&v296[8] = xmmword_254A60E08;
          v297 = unk_254A60E18;
          goto LABEL_34;
        }
        goto LABEL_31;
      }
      v10 = (__int128 *)(v11 + 1);
      v7 = v9 - (char *)v10;
    }
    while (v9 - (char *)v10 >= 4);
  }
  *(_QWORD *)&v292 = v6;
  DWORD2(v292) = 2;
  if (SHIBYTE(v301) < 0)
  {
    sub_20E860C04(&v293, (void *)__dst, *((unint64_t *)&__dst + 1));
  }
  else
  {
    v293 = __dst;
    v294 = v301;
  }
  if (*(char *)(v4 + 55) < 0)
  {
    sub_20E860C04(&__p, *(void **)(v4 + 32), *(_QWORD *)(v4 + 40));
  }
  else
  {
    v12 = *(_OWORD *)(v4 + 32);
    *(_QWORD *)v296 = *(_QWORD *)(v4 + 48);
    __p = v12;
  }
  sub_20EFB08A4();
  if (byte_254A60E1F < 0)
  {
LABEL_31:
    sub_20E860C04(&v296[8], (void *)xmmword_254A60E08, *((unint64_t *)&xmmword_254A60E08 + 1));
  }
  else
  {
    *(_OWORD *)&v296[8] = xmmword_254A60E08;
    v297 = unk_254A60E18;
  }
LABEL_34:
  v285 = sub_20EBA558C((char **)&v284, (uint64_t)&v292);
  if ((SHIBYTE(v297) & 0x80000000) == 0)
  {
    if ((v296[7] & 0x80000000) == 0)
      goto LABEL_36;
LABEL_32:
    operator delete((void *)__p);
    if ((SHIBYTE(v294) & 0x80000000) == 0)
      goto LABEL_37;
    goto LABEL_33;
  }
  operator delete(*(void **)&v296[8]);
  if ((v296[7] & 0x80000000) != 0)
    goto LABEL_32;
LABEL_36:
  if (SHIBYTE(v294) < 0)
LABEL_33:
    operator delete((void *)v293);
LABEL_37:
  sub_20EFAFF90();
  if (byte_254A60E67 < 0)
  {
    sub_20E860C04(v290, (void *)xmmword_254A60E50, *((unint64_t *)&xmmword_254A60E50 + 1));
  }
  else
  {
    *(_OWORD *)v290 = xmmword_254A60E50;
    v291 = unk_254A60E60;
  }
  v13 = HIBYTE(v291);
  if (v291 >= 0)
  {
    v14 = v290;
  }
  else
  {
    v13 = (uint64_t)v290[1];
    v14 = (void **)v290[0];
  }
  if (v13 >= 18)
  {
    v15 = (char *)v14 + v13;
    v16 = v14;
    do
    {
      v17 = (char *)memchr(v16, 67, v13 - 17);
      if (!v17)
        break;
      if (*(_QWORD *)v17 == 0x456C656E6E616843
        && *((_QWORD *)v17 + 1) == 0x696F763C726F7272
        && *((_WORD *)v17 + 8) == 15972)
      {
        if (v17 != v15 && v17 - (char *)v14 != -1)
          goto LABEL_81;
        break;
      }
      v16 = (void **)(v17 + 1);
      v13 = v15 - (char *)v16;
    }
    while (v15 - (char *)v16 >= 18);
  }
  *(_QWORD *)&v292 = v6 + 1;
  DWORD2(v292) = 3;
  v20 = SHIBYTE(v301);
  if (v301 >= 0)
    v21 = HIBYTE(v301);
  else
    v21 = *((_QWORD *)&__dst + 1);
  v22 = v21 + 6;
  if (v21 + 6 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v22 >= 0x17)
  {
    v24 = (v22 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v22 | 7) != 0x17)
      v24 = v22 | 7;
    v25 = v24 + 1;
    v23 = (__int128 *)operator new(v24 + 1);
    *((_QWORD *)&v293 + 1) = v21 + 6;
    v294 = v25 | 0x8000000000000000;
    *(_QWORD *)&v293 = v23;
  }
  else
  {
    v294 = 0;
    v293 = 0uLL;
    v23 = &v293;
    HIBYTE(v294) = v21 + 6;
    if (!v21)
      goto LABEL_73;
  }
  if (v20 >= 0)
    p_dst = &__dst;
  else
    p_dst = (__int128 *)__dst;
  memmove(v23, p_dst, v21);
LABEL_73:
  strcpy((char *)v23 + v21, ".Error");
  *(_WORD *)&v296[7] = 0;
  LOBYTE(__p) = 0;
  HIBYTE(v297) = 0;
  v27 = v285;
  if ((unint64_t)v285 >= v286)
  {
    v285 = sub_20EBA558C((char **)&v284, (uint64_t)&v292);
    if (SHIBYTE(v297) < 0)
    {
      operator delete(*(void **)&v296[8]);
      if ((v296[7] & 0x80000000) == 0)
        goto LABEL_80;
    }
    else if ((v296[7] & 0x80000000) == 0)
    {
      goto LABEL_80;
    }
LABEL_75:
    operator delete((void *)__p);
    if (SHIBYTE(v294) < 0)
      goto LABEL_76;
    goto LABEL_81;
  }
  v28 = v292;
  *((_DWORD *)v285 + 2) = DWORD2(v292);
  *(_QWORD *)v27 = v28;
  v29 = v293;
  *((_QWORD *)v27 + 4) = v294;
  *((_OWORD *)v27 + 1) = v29;
  v294 = 0;
  v293 = 0uLL;
  v30 = *(_QWORD *)v296;
  *(_OWORD *)(v27 + 40) = __p;
  *((_QWORD *)v27 + 7) = v30;
  *(_QWORD *)v296 = 0;
  __p = 0uLL;
  v31 = *(_OWORD *)&v296[8];
  *((_QWORD *)v27 + 10) = v297;
  *((_OWORD *)v27 + 4) = v31;
  *(_QWORD *)&v296[8] = 0;
  *(_QWORD *)&v296[16] = 0;
  v297 = 0;
  v285 = v27 + 88;
  if ((v296[7] & 0x80000000) != 0)
    goto LABEL_75;
LABEL_80:
  if (SHIBYTE(v294) < 0)
  {
LABEL_76:
    operator delete((void *)v293);
    v32 = *(std::__shared_weak_count **)(v4 + 136);
    if (!v32)
      goto LABEL_85;
    goto LABEL_82;
  }
LABEL_81:
  v32 = *(std::__shared_weak_count **)(v4 + 136);
  if (!v32)
  {
LABEL_85:
    v287 = 0;
    v288 = 0;
    v289 = 0;
    v36 = 0;
    goto LABEL_100;
  }
LABEL_82:
  v33 = std::__shared_weak_count::lock(v32);
  *((_QWORD *)&v292 + 1) = v33;
  if (!v33)
    goto LABEL_85;
  v34 = v33;
  v35 = *(_QWORD *)(v4 + 128);
  *(_QWORD *)&v292 = v35;
  if (v35)
  {
    (*(void (**)(_QWORD **__return_ptr))(*(_QWORD *)v35 + 24))(&v287);
  }
  else
  {
    v287 = 0;
    v288 = 0;
    v289 = 0;
  }
  p_shared_owners = (unint64_t *)&v34->__shared_owners_;
  do
    v38 = __ldaxr(p_shared_owners);
  while (__stlxr(v38 - 1, p_shared_owners));
  if (v38)
  {
    v36 = v287;
    v39 = v288;
    if (v287 == v288)
      goto LABEL_100;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
    std::__shared_weak_count::__release_weak(v34);
    v36 = v287;
    v39 = v288;
    if (v287 == v288)
      goto LABEL_100;
  }
  do
  {
    *(_QWORD *)&v292 = v6;
    *((_QWORD *)&v292 + 1) = *v36;
    v294 = 0;
    v293 = 0uLL;
    v41 = v282;
    if ((unint64_t)v282 < v283)
    {
      *(_OWORD *)v282 = v292;
      v40 = v293;
      *((_QWORD *)v41 + 4) = v294;
      *((_OWORD *)v41 + 1) = v40;
      v282 = v41 + 40;
    }
    else
    {
      v282 = sub_20EBA5F8C(&v281, (uint64_t)&v292);
      if (SHIBYTE(v294) < 0)
        operator delete((void *)v293);
    }
    ++v36;
  }
  while (v36 != v39);
  v36 = v287;
LABEL_100:
  if (v36)
  {
    v288 = v36;
    operator delete(v36);
  }
  v42 = *(std::__shared_weak_count **)(v4 + 136);
  if (!v42 || (v43 = std::__shared_weak_count::lock(v42), (*((_QWORD *)&v292 + 1) = v43) == 0))
  {
    v287 = 0;
    v288 = 0;
    v289 = 0;
    v46 = 0;
    goto LABEL_121;
  }
  v44 = v43;
  v45 = *(_QWORD *)(v4 + 128);
  *(_QWORD *)&v292 = v45;
  if (v45)
  {
    (*(void (**)(_QWORD **__return_ptr))(*(_QWORD *)v45 + 32))(&v287);
  }
  else
  {
    v287 = 0;
    v288 = 0;
    v289 = 0;
  }
  v47 = (unint64_t *)&v44->__shared_owners_;
  do
    v48 = __ldaxr(v47);
  while (__stlxr(v48 - 1, v47));
  if (v48)
  {
    v46 = v287;
    v49 = v288;
    if (v287 == v288)
      goto LABEL_121;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
    std::__shared_weak_count::__release_weak(v44);
    v46 = v287;
    v49 = v288;
    if (v287 == v288)
      goto LABEL_121;
  }
  v50 = v6 + 1;
  do
  {
    *(_QWORD *)&v292 = v50;
    *((_QWORD *)&v292 + 1) = *v46;
    v294 = 0;
    v293 = 0uLL;
    v52 = v282;
    if ((unint64_t)v282 < v283)
    {
      *(_OWORD *)v282 = v292;
      v51 = v293;
      *((_QWORD *)v52 + 4) = v294;
      *((_OWORD *)v52 + 1) = v51;
      v282 = v52 + 40;
    }
    else
    {
      v282 = sub_20EBA5F8C(&v281, (uint64_t)&v292);
      if (SHIBYTE(v294) < 0)
        operator delete((void *)v293);
    }
    ++v46;
  }
  while (v46 != v49);
  v46 = v287;
LABEL_121:
  if (v46)
  {
    v288 = v46;
    operator delete(v46);
  }
  if (SHIBYTE(v291) < 0)
  {
    operator delete(v290[0]);
    if ((SHIBYTE(v299) & 0x80000000) == 0)
    {
LABEL_125:
      if ((SHIBYTE(v301) & 0x80000000) == 0)
        goto LABEL_126;
LABEL_130:
      operator delete((void *)__dst);
      if ((*(char *)(v4 + 199) & 0x80000000) == 0)
        goto LABEL_127;
LABEL_131:
      sub_20E860C04(&__dst, *(void **)(v4 + 176), *(_QWORD *)(v4 + 184));
      goto LABEL_132;
    }
  }
  else if ((SHIBYTE(v299) & 0x80000000) == 0)
  {
    goto LABEL_125;
  }
  operator delete((void *)v298);
  if (SHIBYTE(v301) < 0)
    goto LABEL_130;
LABEL_126:
  if (*(char *)(v4 + 199) < 0)
    goto LABEL_131;
LABEL_127:
  __dst = *(_OWORD *)(v4 + 176);
  v301 = *(_QWORD *)(v4 + 192);
LABEL_132:
  v53 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v4 + 264) + 48))(*(_QWORD *)(v4 + 264));
  v54 = atomic_load((unsigned __int8 *)&qword_254A60A08);
  if ((v54 & 1) != 0 || !__cxa_guard_acquire(&qword_254A60A08))
    goto LABEL_133;
  sub_20EFB1228();
  v268 = byte_254A60F6F;
  if (byte_254A60F6F >= 0)
    v269 = byte_254A60F6F;
  else
    v269 = qword_254A60F60;
  v270 = v269 + 1;
  if (v269 + 1 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v270 >= 0x17)
  {
    v272 = (v270 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v270 | 7) != 0x17)
      v272 = v270 | 7;
    v273 = v272 + 1;
    v271 = (__int128 *)operator new(v272 + 1);
    *((_QWORD *)&xmmword_254A60F40 + 1) = v269 + 1;
    unk_254A60F50 = v273 | 0x8000000000000000;
    *(_QWORD *)&xmmword_254A60F40 = v271;
    goto LABEL_741;
  }
  v271 = &xmmword_254A60F40;
  unk_254A60F50 = 0;
  xmmword_254A60F40 = 0uLL;
  byte_254A60F57 = v269 + 1;
  if (v269)
  {
LABEL_741:
    if (v268 >= 0)
      v274 = &qword_254A60F58;
    else
      v274 = (uint64_t *)qword_254A60F58;
    memmove(v271, v274, v269);
  }
  *(_WORD *)((char *)v271 + v269) = 38;
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A60F40, &dword_20E81F000);
  __cxa_guard_release(&qword_254A60A08);
LABEL_133:
  if (byte_254A60F57 < 0)
  {
    sub_20E860C04(&v298, (void *)xmmword_254A60F40, *((unint64_t *)&xmmword_254A60F40 + 1));
  }
  else
  {
    v298 = xmmword_254A60F40;
    v299 = unk_254A60F50;
  }
  v55 = HIBYTE(v299);
  if (v299 >= 0)
  {
    v56 = &v298;
  }
  else
  {
    v55 = *((_QWORD *)&v298 + 1);
    v56 = (__int128 *)v298;
  }
  if (v55 >= 4)
  {
    v57 = (char *)v56 + v55;
    v58 = v56;
    do
    {
      v59 = (char *)memchr(v58, 118, v55 - 3);
      if (!v59)
        break;
      if (*(_DWORD *)v59 == 1684631414)
      {
        if (v59 == v57 || v59 - (char *)v56 == -1)
          break;
        *(_QWORD *)&v292 = v53;
        DWORD2(v292) = 4;
        if (SHIBYTE(v301) < 0)
        {
          sub_20E860C04(&v293, (void *)__dst, *((unint64_t *)&__dst + 1));
        }
        else
        {
          v293 = __dst;
          v294 = v301;
        }
        if (*(char *)(v4 + 223) < 0)
        {
          sub_20E860C04(&__p, *(void **)(v4 + 200), *(_QWORD *)(v4 + 208));
        }
        else
        {
          __p = *(_OWORD *)(v4 + 200);
          *(_QWORD *)v296 = *(_QWORD *)(v4 + 216);
        }
        sub_20EFB19E4();
        if (byte_254A61047 < 0)
        {
          sub_20E860C04(&v296[8], (void *)xmmword_254A61030, *((unint64_t *)&xmmword_254A61030 + 1));
        }
        else
        {
          *(_OWORD *)&v296[8] = xmmword_254A61030;
          v297 = unk_254A61040;
        }
        v60 = v285;
        if ((unint64_t)v285 < v286)
          goto LABEL_159;
        goto LABEL_162;
      }
      v58 = (__int128 *)(v59 + 1);
      v55 = v57 - (char *)v58;
    }
    while (v57 - (char *)v58 >= 4);
  }
  *(_QWORD *)&v292 = v53;
  DWORD2(v292) = 2;
  if (SHIBYTE(v301) < 0)
  {
    sub_20E860C04(&v293, (void *)__dst, *((unint64_t *)&__dst + 1));
  }
  else
  {
    v293 = __dst;
    v294 = v301;
  }
  if (*(char *)(v4 + 223) < 0)
  {
    sub_20E860C04(&__p, *(void **)(v4 + 200), *(_QWORD *)(v4 + 208));
  }
  else
  {
    __p = *(_OWORD *)(v4 + 200);
    *(_QWORD *)v296 = *(_QWORD *)(v4 + 216);
  }
  sub_20EFB19E4();
  if (byte_254A61047 < 0)
  {
    sub_20E860C04(&v296[8], (void *)xmmword_254A61030, *((unint64_t *)&xmmword_254A61030 + 1));
  }
  else
  {
    *(_OWORD *)&v296[8] = xmmword_254A61030;
    v297 = unk_254A61040;
  }
  v60 = v285;
  if ((unint64_t)v285 >= v286)
  {
LABEL_162:
    v285 = sub_20EBA558C((char **)&v284, (uint64_t)&v292);
    if (SHIBYTE(v297) < 0)
    {
      operator delete(*(void **)&v296[8]);
      if ((v296[7] & 0x80000000) == 0)
        goto LABEL_164;
    }
    else if ((v296[7] & 0x80000000) == 0)
    {
      goto LABEL_164;
    }
LABEL_160:
    operator delete((void *)__p);
    if ((SHIBYTE(v294) & 0x80000000) == 0)
      goto LABEL_165;
    goto LABEL_161;
  }
LABEL_159:
  v61 = v292;
  *((_DWORD *)v60 + 2) = DWORD2(v292);
  *(_QWORD *)v60 = v61;
  v62 = v293;
  *((_QWORD *)v60 + 4) = v294;
  *((_OWORD *)v60 + 1) = v62;
  v294 = 0;
  v293 = 0uLL;
  v63 = *(_QWORD *)v296;
  *(_OWORD *)(v60 + 40) = __p;
  *((_QWORD *)v60 + 7) = v63;
  *(_QWORD *)v296 = 0;
  __p = 0uLL;
  v64 = *(_OWORD *)&v296[8];
  *((_QWORD *)v60 + 10) = v297;
  *((_OWORD *)v60 + 4) = v64;
  *(_QWORD *)&v296[8] = 0;
  *(_QWORD *)&v296[16] = 0;
  v297 = 0;
  v285 = v60 + 88;
  if ((v296[7] & 0x80000000) != 0)
    goto LABEL_160;
LABEL_164:
  if (SHIBYTE(v294) < 0)
LABEL_161:
    operator delete((void *)v293);
LABEL_165:
  sub_20EFAFF90();
  if (byte_254A60E67 < 0)
  {
    sub_20E860C04(v290, (void *)xmmword_254A60E50, *((unint64_t *)&xmmword_254A60E50 + 1));
  }
  else
  {
    *(_OWORD *)v290 = xmmword_254A60E50;
    v291 = unk_254A60E60;
  }
  v65 = HIBYTE(v291);
  if (v291 >= 0)
  {
    v66 = v290;
  }
  else
  {
    v65 = (uint64_t)v290[1];
    v66 = (void **)v290[0];
  }
  if (v65 >= 18)
  {
    v67 = (char *)v66 + v65;
    v68 = v66;
    do
    {
      v69 = (char *)memchr(v68, 67, v65 - 17);
      if (!v69)
        break;
      if (*(_QWORD *)v69 == 0x456C656E6E616843
        && *((_QWORD *)v69 + 1) == 0x696F763C726F7272
        && *((_WORD *)v69 + 8) == 15972)
      {
        if (v69 != v67 && v69 - (char *)v66 != -1)
          goto LABEL_209;
        break;
      }
      v68 = (void **)(v69 + 1);
      v65 = v67 - (char *)v68;
    }
    while (v67 - (char *)v68 >= 18);
  }
  *(_QWORD *)&v292 = v53 + 1;
  DWORD2(v292) = 3;
  v72 = SHIBYTE(v301);
  if (v301 >= 0)
    v73 = HIBYTE(v301);
  else
    v73 = *((_QWORD *)&__dst + 1);
  v74 = v73 + 6;
  if (v73 + 6 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v74 >= 0x17)
  {
    v76 = (v74 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v74 | 7) != 0x17)
      v76 = v74 | 7;
    v77 = v76 + 1;
    v75 = (__int128 *)operator new(v76 + 1);
    *((_QWORD *)&v293 + 1) = v73 + 6;
    v294 = v77 | 0x8000000000000000;
    *(_QWORD *)&v293 = v75;
  }
  else
  {
    v294 = 0;
    v293 = 0uLL;
    v75 = &v293;
    HIBYTE(v294) = v73 + 6;
    if (!v73)
      goto LABEL_201;
  }
  if (v72 >= 0)
    v78 = &__dst;
  else
    v78 = (__int128 *)__dst;
  memmove(v75, v78, v73);
LABEL_201:
  strcpy((char *)v75 + v73, ".Error");
  *(_WORD *)&v296[7] = 0;
  LOBYTE(__p) = 0;
  HIBYTE(v297) = 0;
  v79 = v285;
  if ((unint64_t)v285 >= v286)
  {
    v285 = sub_20EBA558C((char **)&v284, (uint64_t)&v292);
    if (SHIBYTE(v297) < 0)
    {
      operator delete(*(void **)&v296[8]);
      if ((v296[7] & 0x80000000) == 0)
        goto LABEL_208;
    }
    else if ((v296[7] & 0x80000000) == 0)
    {
      goto LABEL_208;
    }
LABEL_203:
    operator delete((void *)__p);
    if (SHIBYTE(v294) < 0)
      goto LABEL_204;
    goto LABEL_209;
  }
  v80 = v292;
  *((_DWORD *)v285 + 2) = DWORD2(v292);
  *(_QWORD *)v79 = v80;
  v81 = v293;
  *((_QWORD *)v79 + 4) = v294;
  *((_OWORD *)v79 + 1) = v81;
  v294 = 0;
  v293 = 0uLL;
  v82 = *(_QWORD *)v296;
  *(_OWORD *)(v79 + 40) = __p;
  *((_QWORD *)v79 + 7) = v82;
  *(_QWORD *)v296 = 0;
  __p = 0uLL;
  v83 = *(_OWORD *)&v296[8];
  *((_QWORD *)v79 + 10) = v297;
  *((_OWORD *)v79 + 4) = v83;
  *(_QWORD *)&v296[8] = 0;
  *(_QWORD *)&v296[16] = 0;
  v297 = 0;
  v285 = v79 + 88;
  if ((v296[7] & 0x80000000) != 0)
    goto LABEL_203;
LABEL_208:
  if (SHIBYTE(v294) < 0)
  {
LABEL_204:
    operator delete((void *)v293);
    v84 = *(std::__shared_weak_count **)(v4 + 304);
    if (!v84)
      goto LABEL_213;
    goto LABEL_210;
  }
LABEL_209:
  v84 = *(std::__shared_weak_count **)(v4 + 304);
  if (!v84)
  {
LABEL_213:
    v287 = 0;
    v288 = 0;
    v289 = 0;
    v88 = 0;
    goto LABEL_230;
  }
LABEL_210:
  v85 = std::__shared_weak_count::lock(v84);
  *((_QWORD *)&v292 + 1) = v85;
  if (!v85)
    goto LABEL_213;
  v86 = v85;
  v87 = *(_QWORD *)(v4 + 296);
  *(_QWORD *)&v292 = v87;
  if (v87)
  {
    (*(void (**)(_QWORD **__return_ptr))(*(_QWORD *)v87 + 24))(&v287);
  }
  else
  {
    v287 = 0;
    v288 = 0;
    v289 = 0;
  }
  v89 = (unint64_t *)&v86->__shared_owners_;
  do
    v90 = __ldaxr(v89);
  while (__stlxr(v90 - 1, v89));
  if (v90)
  {
    v88 = v287;
    v91 = v288;
    if (v287 == v288)
      goto LABEL_230;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v86->__on_zero_shared)(v86);
    std::__shared_weak_count::__release_weak(v86);
    v88 = v287;
    v91 = v288;
    if (v287 == v288)
      goto LABEL_230;
  }
  do
  {
    *(_QWORD *)&v292 = v53;
    *((_QWORD *)&v292 + 1) = *v88;
    v294 = 0;
    v293 = 0uLL;
    v93 = v282;
    if ((unint64_t)v282 < v283)
    {
      *(_OWORD *)v282 = v292;
      v92 = v293;
      *((_QWORD *)v93 + 4) = v294;
      *((_OWORD *)v93 + 1) = v92;
      v282 = v93 + 40;
    }
    else
    {
      v282 = sub_20EBA5F8C(&v281, (uint64_t)&v292);
      if (SHIBYTE(v294) < 0)
        operator delete((void *)v293);
    }
    ++v88;
  }
  while (v88 != v91);
  v88 = v287;
LABEL_230:
  if (v88)
  {
    v288 = v88;
    operator delete(v88);
  }
  v94 = *(std::__shared_weak_count **)(v4 + 304);
  if (!v94 || (v95 = std::__shared_weak_count::lock(v94), (*((_QWORD *)&v292 + 1) = v95) == 0))
  {
    v287 = 0;
    v288 = 0;
    v289 = 0;
    v98 = 0;
    goto LABEL_251;
  }
  v96 = v95;
  v97 = *(_QWORD *)(v4 + 296);
  *(_QWORD *)&v292 = v97;
  if (v97)
  {
    (*(void (**)(_QWORD **__return_ptr))(*(_QWORD *)v97 + 32))(&v287);
  }
  else
  {
    v287 = 0;
    v288 = 0;
    v289 = 0;
  }
  v99 = (unint64_t *)&v96->__shared_owners_;
  do
    v100 = __ldaxr(v99);
  while (__stlxr(v100 - 1, v99));
  if (v100)
  {
    v98 = v287;
    v101 = v288;
    if (v287 == v288)
      goto LABEL_251;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v96->__on_zero_shared)(v96);
    std::__shared_weak_count::__release_weak(v96);
    v98 = v287;
    v101 = v288;
    if (v287 == v288)
      goto LABEL_251;
  }
  v102 = v53 + 1;
  do
  {
    *(_QWORD *)&v292 = v102;
    *((_QWORD *)&v292 + 1) = *v98;
    v294 = 0;
    v293 = 0uLL;
    v104 = v282;
    if ((unint64_t)v282 < v283)
    {
      *(_OWORD *)v282 = v292;
      v103 = v293;
      *((_QWORD *)v104 + 4) = v294;
      *((_OWORD *)v104 + 1) = v103;
      v282 = v104 + 40;
    }
    else
    {
      v282 = sub_20EBA5F8C(&v281, (uint64_t)&v292);
      if (SHIBYTE(v294) < 0)
        operator delete((void *)v293);
    }
    ++v98;
  }
  while (v98 != v101);
  v98 = v287;
LABEL_251:
  if (v98)
  {
    v288 = v98;
    operator delete(v98);
  }
  if (SHIBYTE(v291) < 0)
  {
    operator delete(v290[0]);
    if ((SHIBYTE(v299) & 0x80000000) == 0)
    {
LABEL_255:
      if ((SHIBYTE(v301) & 0x80000000) == 0)
        goto LABEL_256;
LABEL_260:
      operator delete((void *)__dst);
      if ((*(char *)(v4 + 367) & 0x80000000) == 0)
        goto LABEL_257;
      goto LABEL_261;
    }
  }
  else if ((SHIBYTE(v299) & 0x80000000) == 0)
  {
    goto LABEL_255;
  }
  operator delete((void *)v298);
  if (SHIBYTE(v301) < 0)
    goto LABEL_260;
LABEL_256:
  if ((*(char *)(v4 + 367) & 0x80000000) == 0)
  {
LABEL_257:
    __dst = *(_OWORD *)(v4 + 344);
    v301 = *(_QWORD *)(v4 + 360);
    goto LABEL_262;
  }
LABEL_261:
  sub_20E860C04(&__dst, *(void **)(v4 + 344), *(_QWORD *)(v4 + 352));
LABEL_262:
  v105 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v4 + 432) + 48))(*(_QWORD *)(v4 + 432));
  v106 = sub_20EBA60E8();
  if (*((char *)v106 + 23) < 0)
  {
    sub_20E860C04(&v298, (void *)*v106, v106[1]);
  }
  else
  {
    v107 = *(_OWORD *)v106;
    v299 = v106[2];
    v298 = v107;
  }
  v108 = HIBYTE(v299);
  if (v299 >= 0)
  {
    v109 = &v298;
  }
  else
  {
    v108 = *((_QWORD *)&v298 + 1);
    v109 = (__int128 *)v298;
  }
  if (v108 >= 4)
  {
    v110 = (char *)v109 + v108;
    v111 = v109;
    do
    {
      v112 = (char *)memchr(v111, 118, v108 - 3);
      if (!v112)
        break;
      if (*(_DWORD *)v112 == 1684631414)
      {
        if (v112 == v110 || v112 - (char *)v109 == -1)
          break;
        *(_QWORD *)&v292 = v105;
        DWORD2(v292) = 4;
        if (SHIBYTE(v301) < 0)
        {
          sub_20E860C04(&v293, (void *)__dst, *((unint64_t *)&__dst + 1));
        }
        else
        {
          v293 = __dst;
          v294 = v301;
        }
        if (*(char *)(v4 + 391) < 0)
        {
          sub_20E860C04(&__p, *(void **)(v4 + 368), *(_QWORD *)(v4 + 376));
        }
        else
        {
          __p = *(_OWORD *)(v4 + 368);
          *(_QWORD *)v296 = *(_QWORD *)(v4 + 384);
        }
        sub_20EFB1B9C();
        if (byte_254A6108F < 0)
        {
          sub_20E860C04(&v296[8], (void *)xmmword_254A61078, *((unint64_t *)&xmmword_254A61078 + 1));
        }
        else
        {
          *(_OWORD *)&v296[8] = xmmword_254A61078;
          v297 = unk_254A61088;
        }
        v113 = v285;
        if ((unint64_t)v285 < v286)
          goto LABEL_288;
        goto LABEL_291;
      }
      v111 = (__int128 *)(v112 + 1);
      v108 = v110 - (char *)v111;
    }
    while (v110 - (char *)v111 >= 4);
  }
  *(_QWORD *)&v292 = v105;
  DWORD2(v292) = 2;
  if (SHIBYTE(v301) < 0)
  {
    sub_20E860C04(&v293, (void *)__dst, *((unint64_t *)&__dst + 1));
  }
  else
  {
    v293 = __dst;
    v294 = v301;
  }
  if (*(char *)(v4 + 391) < 0)
  {
    sub_20E860C04(&__p, *(void **)(v4 + 368), *(_QWORD *)(v4 + 376));
  }
  else
  {
    __p = *(_OWORD *)(v4 + 368);
    *(_QWORD *)v296 = *(_QWORD *)(v4 + 384);
  }
  sub_20EFB1B9C();
  if (byte_254A6108F < 0)
  {
    sub_20E860C04(&v296[8], (void *)xmmword_254A61078, *((unint64_t *)&xmmword_254A61078 + 1));
  }
  else
  {
    *(_OWORD *)&v296[8] = xmmword_254A61078;
    v297 = unk_254A61088;
  }
  v113 = v285;
  if ((unint64_t)v285 >= v286)
  {
LABEL_291:
    v285 = sub_20EBA558C((char **)&v284, (uint64_t)&v292);
    if (SHIBYTE(v297) < 0)
    {
      operator delete(*(void **)&v296[8]);
      if ((v296[7] & 0x80000000) == 0)
        goto LABEL_293;
    }
    else if ((v296[7] & 0x80000000) == 0)
    {
      goto LABEL_293;
    }
LABEL_289:
    operator delete((void *)__p);
    if ((SHIBYTE(v294) & 0x80000000) == 0)
      goto LABEL_294;
    goto LABEL_290;
  }
LABEL_288:
  v114 = v292;
  *((_DWORD *)v113 + 2) = DWORD2(v292);
  *(_QWORD *)v113 = v114;
  v115 = v293;
  *((_QWORD *)v113 + 4) = v294;
  *((_OWORD *)v113 + 1) = v115;
  v294 = 0;
  v293 = 0uLL;
  v116 = *(_QWORD *)v296;
  *(_OWORD *)(v113 + 40) = __p;
  *((_QWORD *)v113 + 7) = v116;
  *(_QWORD *)v296 = 0;
  __p = 0uLL;
  v117 = *(_OWORD *)&v296[8];
  *((_QWORD *)v113 + 10) = v297;
  *((_OWORD *)v113 + 4) = v117;
  *(_QWORD *)&v296[8] = 0;
  *(_QWORD *)&v296[16] = 0;
  v297 = 0;
  v285 = v113 + 88;
  if ((v296[7] & 0x80000000) != 0)
    goto LABEL_289;
LABEL_293:
  if (SHIBYTE(v294) < 0)
LABEL_290:
    operator delete((void *)v293);
LABEL_294:
  sub_20EFAFF90();
  if (byte_254A60E67 < 0)
  {
    sub_20E860C04(v290, (void *)xmmword_254A60E50, *((unint64_t *)&xmmword_254A60E50 + 1));
  }
  else
  {
    *(_OWORD *)v290 = xmmword_254A60E50;
    v291 = unk_254A60E60;
  }
  v118 = HIBYTE(v291);
  if (v291 >= 0)
  {
    v119 = v290;
  }
  else
  {
    v118 = (uint64_t)v290[1];
    v119 = (void **)v290[0];
  }
  if (v118 >= 18)
  {
    v120 = (char *)v119 + v118;
    v121 = v119;
    do
    {
      v122 = (char *)memchr(v121, 67, v118 - 17);
      if (!v122)
        break;
      if (*(_QWORD *)v122 == 0x456C656E6E616843
        && *((_QWORD *)v122 + 1) == 0x696F763C726F7272
        && *((_WORD *)v122 + 8) == 15972)
      {
        if (v122 != v120 && v122 - (char *)v119 != -1)
          goto LABEL_338;
        break;
      }
      v121 = (void **)(v122 + 1);
      v118 = v120 - (char *)v121;
    }
    while (v120 - (char *)v121 >= 18);
  }
  *(_QWORD *)&v292 = v105 + 1;
  DWORD2(v292) = 3;
  v125 = SHIBYTE(v301);
  if (v301 >= 0)
    v126 = HIBYTE(v301);
  else
    v126 = *((_QWORD *)&__dst + 1);
  v127 = v126 + 6;
  if (v126 + 6 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v127 >= 0x17)
  {
    v129 = (v127 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v127 | 7) != 0x17)
      v129 = v127 | 7;
    v130 = v129 + 1;
    v128 = (__int128 *)operator new(v129 + 1);
    *((_QWORD *)&v293 + 1) = v126 + 6;
    v294 = v130 | 0x8000000000000000;
    *(_QWORD *)&v293 = v128;
  }
  else
  {
    v294 = 0;
    v293 = 0uLL;
    v128 = &v293;
    HIBYTE(v294) = v126 + 6;
    if (!v126)
      goto LABEL_330;
  }
  if (v125 >= 0)
    v131 = &__dst;
  else
    v131 = (__int128 *)__dst;
  memmove(v128, v131, v126);
LABEL_330:
  strcpy((char *)v128 + v126, ".Error");
  *(_WORD *)&v296[7] = 0;
  LOBYTE(__p) = 0;
  HIBYTE(v297) = 0;
  v132 = v285;
  if ((unint64_t)v285 >= v286)
  {
    v285 = sub_20EBA558C((char **)&v284, (uint64_t)&v292);
    if (SHIBYTE(v297) < 0)
    {
      operator delete(*(void **)&v296[8]);
      if ((v296[7] & 0x80000000) == 0)
        goto LABEL_337;
    }
    else if ((v296[7] & 0x80000000) == 0)
    {
      goto LABEL_337;
    }
LABEL_332:
    operator delete((void *)__p);
    if (SHIBYTE(v294) < 0)
      goto LABEL_333;
    goto LABEL_338;
  }
  v133 = v292;
  *((_DWORD *)v285 + 2) = DWORD2(v292);
  *(_QWORD *)v132 = v133;
  v134 = v293;
  *((_QWORD *)v132 + 4) = v294;
  *((_OWORD *)v132 + 1) = v134;
  v294 = 0;
  v293 = 0uLL;
  v135 = *(_QWORD *)v296;
  *(_OWORD *)(v132 + 40) = __p;
  *((_QWORD *)v132 + 7) = v135;
  *(_QWORD *)v296 = 0;
  __p = 0uLL;
  v136 = *(_OWORD *)&v296[8];
  *((_QWORD *)v132 + 10) = v297;
  *((_OWORD *)v132 + 4) = v136;
  *(_QWORD *)&v296[8] = 0;
  *(_QWORD *)&v296[16] = 0;
  v297 = 0;
  v285 = v132 + 88;
  if ((v296[7] & 0x80000000) != 0)
    goto LABEL_332;
LABEL_337:
  if (SHIBYTE(v294) < 0)
  {
LABEL_333:
    operator delete((void *)v293);
    v137 = *(std::__shared_weak_count **)(v4 + 472);
    if (!v137)
      goto LABEL_342;
    goto LABEL_339;
  }
LABEL_338:
  v137 = *(std::__shared_weak_count **)(v4 + 472);
  if (!v137)
  {
LABEL_342:
    v287 = 0;
    v288 = 0;
    v289 = 0;
    v141 = 0;
    goto LABEL_359;
  }
LABEL_339:
  v138 = std::__shared_weak_count::lock(v137);
  *((_QWORD *)&v292 + 1) = v138;
  if (!v138)
    goto LABEL_342;
  v139 = v138;
  v140 = *(_QWORD *)(v4 + 464);
  *(_QWORD *)&v292 = v140;
  if (v140)
  {
    (*(void (**)(_QWORD **__return_ptr))(*(_QWORD *)v140 + 24))(&v287);
  }
  else
  {
    v287 = 0;
    v288 = 0;
    v289 = 0;
  }
  v142 = (unint64_t *)&v139->__shared_owners_;
  do
    v143 = __ldaxr(v142);
  while (__stlxr(v143 - 1, v142));
  if (v143)
  {
    v141 = v287;
    v144 = v288;
    if (v287 == v288)
      goto LABEL_359;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v139->__on_zero_shared)(v139);
    std::__shared_weak_count::__release_weak(v139);
    v141 = v287;
    v144 = v288;
    if (v287 == v288)
      goto LABEL_359;
  }
  do
  {
    *(_QWORD *)&v292 = v105;
    *((_QWORD *)&v292 + 1) = *v141;
    v294 = 0;
    v293 = 0uLL;
    v146 = v282;
    if ((unint64_t)v282 < v283)
    {
      *(_OWORD *)v282 = v292;
      v145 = v293;
      *((_QWORD *)v146 + 4) = v294;
      *((_OWORD *)v146 + 1) = v145;
      v282 = v146 + 40;
    }
    else
    {
      v282 = sub_20EBA5F8C(&v281, (uint64_t)&v292);
      if (SHIBYTE(v294) < 0)
        operator delete((void *)v293);
    }
    ++v141;
  }
  while (v141 != v144);
  v141 = v287;
LABEL_359:
  if (v141)
  {
    v288 = v141;
    operator delete(v141);
  }
  v147 = *(std::__shared_weak_count **)(v4 + 472);
  if (!v147 || (v148 = std::__shared_weak_count::lock(v147), (*((_QWORD *)&v292 + 1) = v148) == 0))
  {
    v287 = 0;
    v288 = 0;
    v289 = 0;
    v151 = 0;
    goto LABEL_380;
  }
  v149 = v148;
  v150 = *(_QWORD *)(v4 + 464);
  *(_QWORD *)&v292 = v150;
  if (v150)
  {
    (*(void (**)(_QWORD **__return_ptr))(*(_QWORD *)v150 + 32))(&v287);
  }
  else
  {
    v287 = 0;
    v288 = 0;
    v289 = 0;
  }
  v152 = (unint64_t *)&v149->__shared_owners_;
  do
    v153 = __ldaxr(v152);
  while (__stlxr(v153 - 1, v152));
  if (v153)
  {
    v151 = v287;
    v154 = v288;
    if (v287 == v288)
      goto LABEL_380;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v149->__on_zero_shared)(v149);
    std::__shared_weak_count::__release_weak(v149);
    v151 = v287;
    v154 = v288;
    if (v287 == v288)
      goto LABEL_380;
  }
  v155 = v105 + 1;
  do
  {
    *(_QWORD *)&v292 = v155;
    *((_QWORD *)&v292 + 1) = *v151;
    v294 = 0;
    v293 = 0uLL;
    v157 = v282;
    if ((unint64_t)v282 < v283)
    {
      *(_OWORD *)v282 = v292;
      v156 = v293;
      *((_QWORD *)v157 + 4) = v294;
      *((_OWORD *)v157 + 1) = v156;
      v282 = v157 + 40;
    }
    else
    {
      v282 = sub_20EBA5F8C(&v281, (uint64_t)&v292);
      if (SHIBYTE(v294) < 0)
        operator delete((void *)v293);
    }
    ++v151;
  }
  while (v151 != v154);
  v151 = v287;
LABEL_380:
  if (v151)
  {
    v288 = v151;
    operator delete(v151);
  }
  if (SHIBYTE(v291) < 0)
  {
    operator delete(v290[0]);
    if ((SHIBYTE(v299) & 0x80000000) == 0)
    {
LABEL_384:
      if ((SHIBYTE(v301) & 0x80000000) == 0)
        goto LABEL_385;
LABEL_389:
      operator delete((void *)__dst);
      if ((*(char *)(v4 + 535) & 0x80000000) == 0)
        goto LABEL_386;
      goto LABEL_390;
    }
  }
  else if ((SHIBYTE(v299) & 0x80000000) == 0)
  {
    goto LABEL_384;
  }
  operator delete((void *)v298);
  if (SHIBYTE(v301) < 0)
    goto LABEL_389;
LABEL_385:
  if ((*(char *)(v4 + 535) & 0x80000000) == 0)
  {
LABEL_386:
    __dst = *(_OWORD *)(v4 + 512);
    v301 = *(_QWORD *)(v4 + 528);
    goto LABEL_391;
  }
LABEL_390:
  sub_20E860C04(&__dst, *(void **)(v4 + 512), *(_QWORD *)(v4 + 520));
LABEL_391:
  v158 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v4 + 600) + 48))(*(_QWORD *)(v4 + 600));
  sub_20EFB1D54();
  if (byte_254A610D7 < 0)
  {
    sub_20E860C04(&v298, (void *)xmmword_254A610C0, *((unint64_t *)&xmmword_254A610C0 + 1));
  }
  else
  {
    v298 = xmmword_254A610C0;
    v299 = unk_254A610D0;
  }
  v159 = HIBYTE(v299);
  if (v299 >= 0)
  {
    v160 = &v298;
  }
  else
  {
    v159 = *((_QWORD *)&v298 + 1);
    v160 = (__int128 *)v298;
  }
  if (v159 >= 4)
  {
    v161 = (char *)v160 + v159;
    v162 = v160;
    do
    {
      v163 = (char *)memchr(v162, 118, v159 - 3);
      if (!v163)
        break;
      if (*(_DWORD *)v163 == 1684631414)
      {
        if (v163 == v161 || v163 - (char *)v160 == -1)
          break;
        *(_QWORD *)&v292 = v158;
        DWORD2(v292) = 4;
        if (SHIBYTE(v301) < 0)
        {
          sub_20E860C04(&v293, (void *)__dst, *((unint64_t *)&__dst + 1));
        }
        else
        {
          v293 = __dst;
          v294 = v301;
        }
        if (*(char *)(v4 + 559) < 0)
        {
          sub_20E860C04(&__p, *(void **)(v4 + 536), *(_QWORD *)(v4 + 544));
        }
        else
        {
          __p = *(_OWORD *)(v4 + 536);
          *(_QWORD *)v296 = *(_QWORD *)(v4 + 552);
        }
        sub_20EFB2668();
        if (byte_254A611C7 < 0)
        {
          sub_20E860C04(&v296[8], (void *)xmmword_254A611B0, *((unint64_t *)&xmmword_254A611B0 + 1));
        }
        else
        {
          *(_OWORD *)&v296[8] = xmmword_254A611B0;
          v297 = unk_254A611C0;
        }
        v164 = v285;
        if ((unint64_t)v285 < v286)
          goto LABEL_417;
        goto LABEL_420;
      }
      v162 = (__int128 *)(v163 + 1);
      v159 = v161 - (char *)v162;
    }
    while (v161 - (char *)v162 >= 4);
  }
  *(_QWORD *)&v292 = v158;
  DWORD2(v292) = 2;
  if (SHIBYTE(v301) < 0)
  {
    sub_20E860C04(&v293, (void *)__dst, *((unint64_t *)&__dst + 1));
  }
  else
  {
    v293 = __dst;
    v294 = v301;
  }
  if (*(char *)(v4 + 559) < 0)
  {
    sub_20E860C04(&__p, *(void **)(v4 + 536), *(_QWORD *)(v4 + 544));
  }
  else
  {
    __p = *(_OWORD *)(v4 + 536);
    *(_QWORD *)v296 = *(_QWORD *)(v4 + 552);
  }
  sub_20EFB2668();
  if (byte_254A611C7 < 0)
  {
    sub_20E860C04(&v296[8], (void *)xmmword_254A611B0, *((unint64_t *)&xmmword_254A611B0 + 1));
  }
  else
  {
    *(_OWORD *)&v296[8] = xmmword_254A611B0;
    v297 = unk_254A611C0;
  }
  v164 = v285;
  if ((unint64_t)v285 >= v286)
  {
LABEL_420:
    v285 = sub_20EBA558C((char **)&v284, (uint64_t)&v292);
    if (SHIBYTE(v297) < 0)
    {
      operator delete(*(void **)&v296[8]);
      if ((v296[7] & 0x80000000) == 0)
        goto LABEL_422;
    }
    else if ((v296[7] & 0x80000000) == 0)
    {
      goto LABEL_422;
    }
LABEL_418:
    operator delete((void *)__p);
    if ((SHIBYTE(v294) & 0x80000000) == 0)
      goto LABEL_423;
    goto LABEL_419;
  }
LABEL_417:
  v165 = v292;
  *((_DWORD *)v164 + 2) = DWORD2(v292);
  *(_QWORD *)v164 = v165;
  v166 = v293;
  *((_QWORD *)v164 + 4) = v294;
  *((_OWORD *)v164 + 1) = v166;
  v294 = 0;
  v293 = 0uLL;
  v167 = *(_QWORD *)v296;
  *(_OWORD *)(v164 + 40) = __p;
  *((_QWORD *)v164 + 7) = v167;
  *(_QWORD *)v296 = 0;
  __p = 0uLL;
  v168 = *(_OWORD *)&v296[8];
  *((_QWORD *)v164 + 10) = v297;
  *((_OWORD *)v164 + 4) = v168;
  *(_QWORD *)&v296[8] = 0;
  *(_QWORD *)&v296[16] = 0;
  v297 = 0;
  v285 = v164 + 88;
  if ((v296[7] & 0x80000000) != 0)
    goto LABEL_418;
LABEL_422:
  if (SHIBYTE(v294) < 0)
LABEL_419:
    operator delete((void *)v293);
LABEL_423:
  sub_20EFAFF90();
  if (byte_254A60E67 < 0)
  {
    sub_20E860C04(v290, (void *)xmmword_254A60E50, *((unint64_t *)&xmmword_254A60E50 + 1));
  }
  else
  {
    *(_OWORD *)v290 = xmmword_254A60E50;
    v291 = unk_254A60E60;
  }
  v169 = HIBYTE(v291);
  if (v291 >= 0)
  {
    v170 = v290;
  }
  else
  {
    v169 = (uint64_t)v290[1];
    v170 = (void **)v290[0];
  }
  if (v169 >= 18)
  {
    v171 = (char *)v170 + v169;
    v172 = v170;
    do
    {
      v173 = (char *)memchr(v172, 67, v169 - 17);
      if (!v173)
        break;
      if (*(_QWORD *)v173 == 0x456C656E6E616843
        && *((_QWORD *)v173 + 1) == 0x696F763C726F7272
        && *((_WORD *)v173 + 8) == 15972)
      {
        if (v173 != v171 && v173 - (char *)v170 != -1)
          goto LABEL_467;
        break;
      }
      v172 = (void **)(v173 + 1);
      v169 = v171 - (char *)v172;
    }
    while (v171 - (char *)v172 >= 18);
  }
  *(_QWORD *)&v292 = v158 + 1;
  DWORD2(v292) = 3;
  v176 = SHIBYTE(v301);
  if (v301 >= 0)
    v177 = HIBYTE(v301);
  else
    v177 = *((_QWORD *)&__dst + 1);
  v178 = v177 + 6;
  if (v177 + 6 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v178 >= 0x17)
  {
    v180 = (v178 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v178 | 7) != 0x17)
      v180 = v178 | 7;
    v181 = v180 + 1;
    v179 = (__int128 *)operator new(v180 + 1);
    *((_QWORD *)&v293 + 1) = v177 + 6;
    v294 = v181 | 0x8000000000000000;
    *(_QWORD *)&v293 = v179;
  }
  else
  {
    v294 = 0;
    v293 = 0uLL;
    v179 = &v293;
    HIBYTE(v294) = v177 + 6;
    if (!v177)
      goto LABEL_459;
  }
  if (v176 >= 0)
    v182 = &__dst;
  else
    v182 = (__int128 *)__dst;
  memmove(v179, v182, v177);
LABEL_459:
  strcpy((char *)v179 + v177, ".Error");
  *(_WORD *)&v296[7] = 0;
  LOBYTE(__p) = 0;
  HIBYTE(v297) = 0;
  v183 = v285;
  if ((unint64_t)v285 >= v286)
  {
    v285 = sub_20EBA558C((char **)&v284, (uint64_t)&v292);
    if (SHIBYTE(v297) < 0)
    {
      operator delete(*(void **)&v296[8]);
      if ((v296[7] & 0x80000000) == 0)
        goto LABEL_466;
    }
    else if ((v296[7] & 0x80000000) == 0)
    {
      goto LABEL_466;
    }
LABEL_461:
    operator delete((void *)__p);
    if (SHIBYTE(v294) < 0)
      goto LABEL_462;
    goto LABEL_467;
  }
  v184 = v292;
  *((_DWORD *)v285 + 2) = DWORD2(v292);
  *(_QWORD *)v183 = v184;
  v185 = v293;
  *((_QWORD *)v183 + 4) = v294;
  *((_OWORD *)v183 + 1) = v185;
  v294 = 0;
  v293 = 0uLL;
  v186 = *(_QWORD *)v296;
  *(_OWORD *)(v183 + 40) = __p;
  *((_QWORD *)v183 + 7) = v186;
  *(_QWORD *)v296 = 0;
  __p = 0uLL;
  v187 = *(_OWORD *)&v296[8];
  *((_QWORD *)v183 + 10) = v297;
  *((_OWORD *)v183 + 4) = v187;
  *(_QWORD *)&v296[8] = 0;
  *(_QWORD *)&v296[16] = 0;
  v297 = 0;
  v285 = v183 + 88;
  if ((v296[7] & 0x80000000) != 0)
    goto LABEL_461;
LABEL_466:
  if (SHIBYTE(v294) < 0)
  {
LABEL_462:
    operator delete((void *)v293);
    v188 = *(std::__shared_weak_count **)(v4 + 640);
    if (!v188)
      goto LABEL_471;
    goto LABEL_468;
  }
LABEL_467:
  v188 = *(std::__shared_weak_count **)(v4 + 640);
  if (!v188)
  {
LABEL_471:
    v287 = 0;
    v288 = 0;
    v289 = 0;
    v192 = 0;
    goto LABEL_488;
  }
LABEL_468:
  v189 = std::__shared_weak_count::lock(v188);
  *((_QWORD *)&v292 + 1) = v189;
  if (!v189)
    goto LABEL_471;
  v190 = v189;
  v191 = *(_QWORD *)(v4 + 632);
  *(_QWORD *)&v292 = v191;
  if (v191)
  {
    (*(void (**)(_QWORD **__return_ptr))(*(_QWORD *)v191 + 24))(&v287);
  }
  else
  {
    v287 = 0;
    v288 = 0;
    v289 = 0;
  }
  v193 = (unint64_t *)&v190->__shared_owners_;
  do
    v194 = __ldaxr(v193);
  while (__stlxr(v194 - 1, v193));
  if (v194)
  {
    v192 = v287;
    v195 = v288;
    if (v287 == v288)
      goto LABEL_488;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v190->__on_zero_shared)(v190);
    std::__shared_weak_count::__release_weak(v190);
    v192 = v287;
    v195 = v288;
    if (v287 == v288)
      goto LABEL_488;
  }
  do
  {
    *(_QWORD *)&v292 = v158;
    *((_QWORD *)&v292 + 1) = *v192;
    v294 = 0;
    v293 = 0uLL;
    v197 = v282;
    if ((unint64_t)v282 < v283)
    {
      *(_OWORD *)v282 = v292;
      v196 = v293;
      *((_QWORD *)v197 + 4) = v294;
      *((_OWORD *)v197 + 1) = v196;
      v282 = v197 + 40;
    }
    else
    {
      v282 = sub_20EBA5F8C(&v281, (uint64_t)&v292);
      if (SHIBYTE(v294) < 0)
        operator delete((void *)v293);
    }
    ++v192;
  }
  while (v192 != v195);
  v192 = v287;
LABEL_488:
  if (v192)
  {
    v288 = v192;
    operator delete(v192);
  }
  v198 = *(std::__shared_weak_count **)(v4 + 640);
  if (!v198 || (v199 = std::__shared_weak_count::lock(v198), (*((_QWORD *)&v292 + 1) = v199) == 0))
  {
    v287 = 0;
    v288 = 0;
    v289 = 0;
    v202 = 0;
    goto LABEL_509;
  }
  v200 = v199;
  v201 = *(_QWORD *)(v4 + 632);
  *(_QWORD *)&v292 = v201;
  if (v201)
  {
    (*(void (**)(_QWORD **__return_ptr))(*(_QWORD *)v201 + 32))(&v287);
  }
  else
  {
    v287 = 0;
    v288 = 0;
    v289 = 0;
  }
  v203 = (unint64_t *)&v200->__shared_owners_;
  do
    v204 = __ldaxr(v203);
  while (__stlxr(v204 - 1, v203));
  if (v204)
  {
    v202 = v287;
    v205 = v288;
    if (v287 == v288)
      goto LABEL_509;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v200->__on_zero_shared)(v200);
    std::__shared_weak_count::__release_weak(v200);
    v202 = v287;
    v205 = v288;
    if (v287 == v288)
      goto LABEL_509;
  }
  v206 = v158 + 1;
  do
  {
    *(_QWORD *)&v292 = v206;
    *((_QWORD *)&v292 + 1) = *v202;
    v294 = 0;
    v293 = 0uLL;
    v208 = v282;
    if ((unint64_t)v282 < v283)
    {
      *(_OWORD *)v282 = v292;
      v207 = v293;
      *((_QWORD *)v208 + 4) = v294;
      *((_OWORD *)v208 + 1) = v207;
      v282 = v208 + 40;
    }
    else
    {
      v282 = sub_20EBA5F8C(&v281, (uint64_t)&v292);
      if (SHIBYTE(v294) < 0)
        operator delete((void *)v293);
    }
    ++v202;
  }
  while (v202 != v205);
  v202 = v287;
LABEL_509:
  if (v202)
  {
    v288 = v202;
    operator delete(v202);
  }
  if (SHIBYTE(v291) < 0)
  {
    operator delete(v290[0]);
    if ((SHIBYTE(v299) & 0x80000000) == 0)
    {
LABEL_513:
      if ((SHIBYTE(v301) & 0x80000000) == 0)
        goto LABEL_514;
LABEL_518:
      operator delete((void *)__dst);
      if ((*(char *)(v4 + 703) & 0x80000000) == 0)
        goto LABEL_515;
      goto LABEL_519;
    }
  }
  else if ((SHIBYTE(v299) & 0x80000000) == 0)
  {
    goto LABEL_513;
  }
  operator delete((void *)v298);
  if (SHIBYTE(v301) < 0)
    goto LABEL_518;
LABEL_514:
  if ((*(char *)(v4 + 703) & 0x80000000) == 0)
  {
LABEL_515:
    __dst = *(_OWORD *)(v4 + 680);
    v301 = *(_QWORD *)(v4 + 696);
    goto LABEL_520;
  }
LABEL_519:
  sub_20E860C04(&__dst, *(void **)(v4 + 680), *(_QWORD *)(v4 + 688));
LABEL_520:
  v209 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v4 + 768) + 48))(*(_QWORD *)(v4 + 768));
  v210 = sub_20EBA60E8();
  if (*((char *)v210 + 23) < 0)
  {
    sub_20E860C04(&v298, (void *)*v210, v210[1]);
  }
  else
  {
    v211 = *(_OWORD *)v210;
    v299 = v210[2];
    v298 = v211;
  }
  v212 = HIBYTE(v299);
  if (v299 >= 0)
  {
    v213 = &v298;
  }
  else
  {
    v212 = *((_QWORD *)&v298 + 1);
    v213 = (__int128 *)v298;
  }
  if (v212 >= 4)
  {
    v214 = (char *)v213 + v212;
    v215 = v213;
    do
    {
      v216 = (char *)memchr(v215, 118, v212 - 3);
      if (!v216)
        break;
      if (*(_DWORD *)v216 == 1684631414)
      {
        if (v216 == v214 || v216 - (char *)v213 == -1)
          break;
        *(_QWORD *)&v292 = v209;
        DWORD2(v292) = 4;
        if (SHIBYTE(v301) < 0)
        {
          sub_20E860C04(&v293, (void *)__dst, *((unint64_t *)&__dst + 1));
        }
        else
        {
          v293 = __dst;
          v294 = v301;
        }
        if (*(char *)(v4 + 727) < 0)
        {
          sub_20E860C04(&__p, *(void **)(v4 + 704), *(_QWORD *)(v4 + 712));
        }
        else
        {
          __p = *(_OWORD *)(v4 + 704);
          *(_QWORD *)v296 = *(_QWORD *)(v4 + 720);
        }
        sub_20EFB2820();
        if (byte_254A6120F < 0)
        {
          sub_20E860C04(&v296[8], (void *)xmmword_254A611F8, *((unint64_t *)&xmmword_254A611F8 + 1));
        }
        else
        {
          *(_OWORD *)&v296[8] = xmmword_254A611F8;
          v297 = unk_254A61208;
        }
        v217 = v285;
        if ((unint64_t)v285 < v286)
          goto LABEL_546;
        goto LABEL_549;
      }
      v215 = (__int128 *)(v216 + 1);
      v212 = v214 - (char *)v215;
    }
    while (v214 - (char *)v215 >= 4);
  }
  *(_QWORD *)&v292 = v209;
  DWORD2(v292) = 2;
  if (SHIBYTE(v301) < 0)
  {
    sub_20E860C04(&v293, (void *)__dst, *((unint64_t *)&__dst + 1));
  }
  else
  {
    v293 = __dst;
    v294 = v301;
  }
  if (*(char *)(v4 + 727) < 0)
  {
    sub_20E860C04(&__p, *(void **)(v4 + 704), *(_QWORD *)(v4 + 712));
  }
  else
  {
    __p = *(_OWORD *)(v4 + 704);
    *(_QWORD *)v296 = *(_QWORD *)(v4 + 720);
  }
  sub_20EFB2820();
  if (byte_254A6120F < 0)
  {
    sub_20E860C04(&v296[8], (void *)xmmword_254A611F8, *((unint64_t *)&xmmword_254A611F8 + 1));
  }
  else
  {
    *(_OWORD *)&v296[8] = xmmword_254A611F8;
    v297 = unk_254A61208;
  }
  v217 = v285;
  if ((unint64_t)v285 >= v286)
  {
LABEL_549:
    v285 = sub_20EBA558C((char **)&v284, (uint64_t)&v292);
    if (SHIBYTE(v297) < 0)
    {
      operator delete(*(void **)&v296[8]);
      if ((v296[7] & 0x80000000) == 0)
        goto LABEL_551;
    }
    else if ((v296[7] & 0x80000000) == 0)
    {
      goto LABEL_551;
    }
LABEL_547:
    operator delete((void *)__p);
    if ((SHIBYTE(v294) & 0x80000000) == 0)
      goto LABEL_552;
    goto LABEL_548;
  }
LABEL_546:
  v218 = v292;
  *((_DWORD *)v217 + 2) = DWORD2(v292);
  *(_QWORD *)v217 = v218;
  v219 = v293;
  *((_QWORD *)v217 + 4) = v294;
  *((_OWORD *)v217 + 1) = v219;
  v294 = 0;
  v293 = 0uLL;
  v220 = *(_QWORD *)v296;
  *(_OWORD *)(v217 + 40) = __p;
  *((_QWORD *)v217 + 7) = v220;
  *(_QWORD *)v296 = 0;
  __p = 0uLL;
  v221 = *(_OWORD *)&v296[8];
  *((_QWORD *)v217 + 10) = v297;
  *((_OWORD *)v217 + 4) = v221;
  *(_QWORD *)&v296[8] = 0;
  *(_QWORD *)&v296[16] = 0;
  v297 = 0;
  v285 = v217 + 88;
  if ((v296[7] & 0x80000000) != 0)
    goto LABEL_547;
LABEL_551:
  if (SHIBYTE(v294) < 0)
LABEL_548:
    operator delete((void *)v293);
LABEL_552:
  sub_20EFAFF90();
  if (byte_254A60E67 < 0)
  {
    sub_20E860C04(v290, (void *)xmmword_254A60E50, *((unint64_t *)&xmmword_254A60E50 + 1));
  }
  else
  {
    *(_OWORD *)v290 = xmmword_254A60E50;
    v291 = unk_254A60E60;
  }
  v222 = HIBYTE(v291);
  if (v291 >= 0)
  {
    v223 = v290;
  }
  else
  {
    v222 = (uint64_t)v290[1];
    v223 = (void **)v290[0];
  }
  if (v222 >= 18)
  {
    v224 = (char *)v223 + v222;
    v225 = v223;
    do
    {
      v226 = (char *)memchr(v225, 67, v222 - 17);
      if (!v226)
        break;
      if (*(_QWORD *)v226 == 0x456C656E6E616843
        && *((_QWORD *)v226 + 1) == 0x696F763C726F7272
        && *((_WORD *)v226 + 8) == 15972)
      {
        if (v226 != v224 && v226 - (char *)v223 != -1)
          goto LABEL_596;
        break;
      }
      v225 = (void **)(v226 + 1);
      v222 = v224 - (char *)v225;
    }
    while (v224 - (char *)v225 >= 18);
  }
  *(_QWORD *)&v292 = v209 + 1;
  DWORD2(v292) = 3;
  v229 = SHIBYTE(v301);
  if (v301 >= 0)
    v230 = HIBYTE(v301);
  else
    v230 = *((_QWORD *)&__dst + 1);
  v231 = v230 + 6;
  if (v230 + 6 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v231 >= 0x17)
  {
    v233 = (v231 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v231 | 7) != 0x17)
      v233 = v231 | 7;
    v234 = v233 + 1;
    v232 = (__int128 *)operator new(v233 + 1);
    *((_QWORD *)&v293 + 1) = v230 + 6;
    v294 = v234 | 0x8000000000000000;
    *(_QWORD *)&v293 = v232;
  }
  else
  {
    v294 = 0;
    v293 = 0uLL;
    v232 = &v293;
    HIBYTE(v294) = v230 + 6;
    if (!v230)
      goto LABEL_588;
  }
  if (v229 >= 0)
    v235 = &__dst;
  else
    v235 = (__int128 *)__dst;
  memmove(v232, v235, v230);
LABEL_588:
  strcpy((char *)v232 + v230, ".Error");
  *(_WORD *)&v296[7] = 0;
  LOBYTE(__p) = 0;
  HIBYTE(v297) = 0;
  v236 = v285;
  if ((unint64_t)v285 >= v286)
  {
    v285 = sub_20EBA558C((char **)&v284, (uint64_t)&v292);
    if (SHIBYTE(v297) < 0)
    {
      operator delete(*(void **)&v296[8]);
      if ((v296[7] & 0x80000000) == 0)
        goto LABEL_595;
    }
    else if ((v296[7] & 0x80000000) == 0)
    {
      goto LABEL_595;
    }
LABEL_590:
    operator delete((void *)__p);
    if (SHIBYTE(v294) < 0)
      goto LABEL_591;
    goto LABEL_596;
  }
  v237 = v292;
  *((_DWORD *)v285 + 2) = DWORD2(v292);
  *(_QWORD *)v236 = v237;
  v238 = v293;
  *((_QWORD *)v236 + 4) = v294;
  *((_OWORD *)v236 + 1) = v238;
  v294 = 0;
  v293 = 0uLL;
  v239 = *(_QWORD *)v296;
  *(_OWORD *)(v236 + 40) = __p;
  *((_QWORD *)v236 + 7) = v239;
  *(_QWORD *)v296 = 0;
  __p = 0uLL;
  v240 = *(_OWORD *)&v296[8];
  *((_QWORD *)v236 + 10) = v297;
  *((_OWORD *)v236 + 4) = v240;
  *(_QWORD *)&v296[8] = 0;
  *(_QWORD *)&v296[16] = 0;
  v297 = 0;
  v285 = v236 + 88;
  if ((v296[7] & 0x80000000) != 0)
    goto LABEL_590;
LABEL_595:
  if (SHIBYTE(v294) < 0)
  {
LABEL_591:
    operator delete((void *)v293);
    v241 = *(std::__shared_weak_count **)(v4 + 808);
    if (!v241)
      goto LABEL_600;
    goto LABEL_597;
  }
LABEL_596:
  v241 = *(std::__shared_weak_count **)(v4 + 808);
  if (!v241)
  {
LABEL_600:
    v287 = 0;
    v288 = 0;
    v289 = 0;
    v245 = 0;
    goto LABEL_617;
  }
LABEL_597:
  v242 = std::__shared_weak_count::lock(v241);
  *((_QWORD *)&v292 + 1) = v242;
  if (!v242)
    goto LABEL_600;
  v243 = v242;
  v244 = *(_QWORD *)(v4 + 800);
  *(_QWORD *)&v292 = v244;
  if (v244)
  {
    (*(void (**)(_QWORD **__return_ptr))(*(_QWORD *)v244 + 24))(&v287);
  }
  else
  {
    v287 = 0;
    v288 = 0;
    v289 = 0;
  }
  v246 = (unint64_t *)&v243->__shared_owners_;
  do
    v247 = __ldaxr(v246);
  while (__stlxr(v247 - 1, v246));
  if (v247)
  {
    v245 = v287;
    v248 = v288;
    if (v287 == v288)
      goto LABEL_617;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v243->__on_zero_shared)(v243);
    std::__shared_weak_count::__release_weak(v243);
    v245 = v287;
    v248 = v288;
    if (v287 == v288)
      goto LABEL_617;
  }
  do
  {
    *(_QWORD *)&v292 = v209;
    *((_QWORD *)&v292 + 1) = *v245;
    v294 = 0;
    v293 = 0uLL;
    v250 = v282;
    if ((unint64_t)v282 < v283)
    {
      *(_OWORD *)v282 = v292;
      v249 = v293;
      *((_QWORD *)v250 + 4) = v294;
      *((_OWORD *)v250 + 1) = v249;
      v282 = v250 + 40;
    }
    else
    {
      v282 = sub_20EBA5F8C(&v281, (uint64_t)&v292);
      if (SHIBYTE(v294) < 0)
        operator delete((void *)v293);
    }
    ++v245;
  }
  while (v245 != v248);
  v245 = v287;
LABEL_617:
  if (v245)
  {
    v288 = v245;
    operator delete(v245);
  }
  v251 = *(std::__shared_weak_count **)(v4 + 808);
  if (!v251 || (v252 = std::__shared_weak_count::lock(v251), (*((_QWORD *)&v292 + 1) = v252) == 0))
  {
    v287 = 0;
    v288 = 0;
    v289 = 0;
    v255 = 0;
    goto LABEL_638;
  }
  v253 = v252;
  v254 = *(_QWORD *)(v4 + 800);
  *(_QWORD *)&v292 = v254;
  if (v254)
  {
    (*(void (**)(_QWORD **__return_ptr))(*(_QWORD *)v254 + 32))(&v287);
  }
  else
  {
    v287 = 0;
    v288 = 0;
    v289 = 0;
  }
  v256 = (unint64_t *)&v253->__shared_owners_;
  do
    v257 = __ldaxr(v256);
  while (__stlxr(v257 - 1, v256));
  if (v257)
  {
    v255 = v287;
    v258 = v288;
    if (v287 == v288)
      goto LABEL_638;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v253->__on_zero_shared)(v253);
    std::__shared_weak_count::__release_weak(v253);
    v255 = v287;
    v258 = v288;
    if (v287 == v288)
      goto LABEL_638;
  }
  do
  {
    *(_QWORD *)&v292 = v209 + 1;
    *((_QWORD *)&v292 + 1) = *v255;
    v294 = 0;
    v293 = 0uLL;
    v260 = v282;
    if ((unint64_t)v282 < v283)
    {
      *(_OWORD *)v282 = v292;
      v259 = v293;
      *((_QWORD *)v260 + 4) = v294;
      *((_OWORD *)v260 + 1) = v259;
      v282 = v260 + 40;
    }
    else
    {
      v282 = sub_20EBA5F8C(&v281, (uint64_t)&v292);
      if (SHIBYTE(v294) < 0)
        operator delete((void *)v293);
    }
    ++v255;
  }
  while (v255 != v258);
  v255 = v287;
LABEL_638:
  if (v255)
  {
    v288 = v255;
    operator delete(v255);
  }
  if (SHIBYTE(v291) < 0)
  {
    operator delete(v290[0]);
    if ((SHIBYTE(v299) & 0x80000000) == 0)
    {
LABEL_642:
      if ((SHIBYTE(v301) & 0x80000000) == 0)
        goto LABEL_643;
LABEL_647:
      operator delete((void *)__dst);
      if ((*(char *)(v275 + 31) & 0x80000000) == 0)
        goto LABEL_644;
      goto LABEL_648;
    }
  }
  else if ((SHIBYTE(v299) & 0x80000000) == 0)
  {
    goto LABEL_642;
  }
  operator delete((void *)v298);
  if (SHIBYTE(v301) < 0)
    goto LABEL_647;
LABEL_643:
  if ((*(char *)(v275 + 31) & 0x80000000) == 0)
  {
LABEL_644:
    *(_OWORD *)v279 = *(_OWORD *)(v275 + 8);
    v280 = *(_QWORD *)(v275 + 24);
    goto LABEL_649;
  }
LABEL_648:
  sub_20E860C04(v279, *(void **)(v275 + 8), *(_QWORD *)(v275 + 16));
LABEL_649:
  v261 = *(_QWORD *)(v275 + 56) != 0;
  if (*(char *)(v275 + 55) < 0)
  {
    sub_20E860C04(v277, *(void **)(v275 + 32), *(_QWORD *)(v275 + 40));
  }
  else
  {
    *(_OWORD *)v277 = *(_OWORD *)(v275 + 32);
    v278 = *(_QWORD *)(v275 + 48);
  }
  sub_20EBA690C(v276, (__int128 *)v279, v261, (uint64_t *)&v284, (uint64_t *)&v281, (__int128 *)v277);
  if (SHIBYTE(v278) < 0)
  {
    operator delete(v277[0]);
    if ((SHIBYTE(v280) & 0x80000000) == 0)
    {
LABEL_654:
      v262 = (char *)v281;
      if (v281)
        goto LABEL_655;
LABEL_665:
      v264 = (char *)v284;
      if (!v284)
        return;
LABEL_666:
      v265 = v285;
      v266 = v264;
      if (v285 == v264)
      {
LABEL_677:
        v285 = v264;
        operator delete(v266);
        return;
      }
      while (1)
      {
        while (*(v265 - 1) < 0)
        {
          operator delete(*((void **)v265 - 3));
          if (*(v265 - 25) < 0)
            goto LABEL_668;
LABEL_674:
          if ((*(v265 - 49) & 0x80000000) == 0)
            goto LABEL_669;
LABEL_675:
          operator delete(*((void **)v265 - 9));
          v265 -= 88;
          if (v265 == v264)
          {
LABEL_676:
            v266 = v284;
            goto LABEL_677;
          }
        }
        if ((*(v265 - 25) & 0x80000000) == 0)
          goto LABEL_674;
LABEL_668:
        operator delete(*((void **)v265 - 6));
        if (*(v265 - 49) < 0)
          goto LABEL_675;
LABEL_669:
        v265 -= 88;
        if (v265 == v264)
          goto LABEL_676;
      }
    }
  }
  else if ((SHIBYTE(v280) & 0x80000000) == 0)
  {
    goto LABEL_654;
  }
  operator delete(v279[0]);
  v262 = (char *)v281;
  if (!v281)
    goto LABEL_665;
LABEL_655:
  v263 = v282;
  if (v282 == v262)
  {
    v282 = v262;
    operator delete(v262);
    v264 = (char *)v284;
    if (!v284)
      return;
    goto LABEL_666;
  }
  do
  {
    if (*(v263 - 1) < 0)
      operator delete(*((void **)v263 - 3));
    v263 -= 40;
  }
  while (v263 != v262);
  v282 = v262;
  operator delete(v281);
  v264 = (char *)v284;
  if (v284)
    goto LABEL_666;
}

void sub_20EFAA754(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,char a39,uint64_t a40,void *__p,uint64_t a42,int a43,__int16 a44,char a45,char a46,void *a47,uint64_t a48,int a49,__int16 a50,char a51,char a52)
{
  uint64_t v52;

  __cxa_guard_abort(&qword_254A60A08);
  if (*(char *)(v52 - 105) < 0)
    operator delete(*(void **)(v52 - 128));
  sub_20EBA4920(&a24);
  sub_20EBA4990(&a27);
  _Unwind_Resume(a1);
}

void sub_20EFAAADC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  unsigned __int8 v7;
  uint64_t v8;
  __int128 *v9;
  char *v10;
  __int128 *v11;
  char *v12;
  __int128 v13;
  char *v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  __int128 v18;
  uint64_t *v19;
  __int128 v20;
  uint64_t v21;
  void **v22;
  char *v23;
  void **v24;
  char *v25;
  uint64_t v28;
  int v29;
  size_t v30;
  unint64_t v31;
  __int128 *v32;
  uint64_t v33;
  uint64_t v34;
  __int128 *p_dst;
  char *v36;
  uint64_t v37;
  __int128 v38;
  uint64_t v39;
  __int128 v40;
  std::__shared_weak_count *v41;
  std::__shared_weak_count *v42;
  std::__shared_weak_count *v43;
  uint64_t v44;
  _QWORD *v45;
  unint64_t *p_shared_owners;
  unint64_t v47;
  _QWORD *v48;
  __int128 v49;
  char *v50;
  std::__shared_weak_count *v51;
  std::__shared_weak_count *v52;
  std::__shared_weak_count *v53;
  uint64_t v54;
  _QWORD *v55;
  unint64_t *v56;
  unint64_t v57;
  _QWORD *v58;
  uint64_t v59;
  __int128 v60;
  char *v61;
  _BOOL4 v62;
  char *v63;
  char *v64;
  char *v65;
  char *v66;
  void *v67;
  __int128 v68;
  uint64_t v69;
  int v70;
  size_t v71;
  unint64_t v72;
  __int128 *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t *v76;
  uint64_t v77;
  void *v78[2];
  uint64_t v79;
  void *v80[2];
  uint64_t v81;
  void *v82;
  char *v83;
  unint64_t v84;
  void *v85;
  char *v86;
  unint64_t v87;
  _QWORD *v88;
  _QWORD *v89;
  uint64_t v90;
  void *v91[2];
  uint64_t v92;
  __int128 v93;
  __int128 v94;
  unint64_t v95;
  __int128 __p;
  _BYTE v97[24];
  uint64_t v98;
  __int128 v99;
  uint64_t v100;
  __int128 __dst;
  int64_t v102;

  v85 = 0;
  v86 = 0;
  v87 = 0;
  v82 = 0;
  v83 = 0;
  v84 = 0;
  v4 = *(_QWORD *)(a2 + 72);
  if (!v4)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/Node.h", 220, (uint64_t)"channels_", 9, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v4 = *(_QWORD *)(a2 + 72);
    if ((*(char *)(v4 + 31) & 0x80000000) == 0)
      goto LABEL_3;
LABEL_6:
    sub_20E860C04(&__dst, *(void **)(v4 + 8), *(_QWORD *)(v4 + 16));
    goto LABEL_7;
  }
  if (*(char *)(v4 + 31) < 0)
    goto LABEL_6;
LABEL_3:
  v5 = *(_OWORD *)(v4 + 8);
  v102 = *(_QWORD *)(v4 + 24);
  __dst = v5;
LABEL_7:
  v6 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v4 + 96) + 48))(*(_QWORD *)(v4 + 96));
  v7 = atomic_load((unsigned __int8 *)&qword_254A60B08);
  if ((v7 & 1) != 0 || !__cxa_guard_acquire(&qword_254A60B08))
    goto LABEL_8;
  v69 = a1;
  sub_20EFB29D8();
  v70 = byte_254A6126F;
  if (byte_254A6126F >= 0)
    v71 = byte_254A6126F;
  else
    v71 = qword_254A61260;
  v72 = v71 + 1;
  if (v71 + 1 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v72 >= 0x17)
  {
    v74 = (v72 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v72 | 7) != 0x17)
      v74 = v72 | 7;
    v75 = v74 + 1;
    v73 = (__int128 *)operator new(v74 + 1);
    *((_QWORD *)&xmmword_254A61240 + 1) = v71 + 1;
    unk_254A61250 = v75 | 0x8000000000000000;
    *(_QWORD *)&xmmword_254A61240 = v73;
    goto LABEL_189;
  }
  v73 = &xmmword_254A61240;
  unk_254A61250 = 0;
  xmmword_254A61240 = 0uLL;
  byte_254A61257 = v71 + 1;
  if (v71)
  {
LABEL_189:
    if (v70 >= 0)
      v76 = &qword_254A61258;
    else
      v76 = (uint64_t *)qword_254A61258;
    memmove(v73, v76, v71);
  }
  *(_WORD *)((char *)v73 + v71) = 38;
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A61240, &dword_20E81F000);
  __cxa_guard_release(&qword_254A60B08);
  a1 = v69;
LABEL_8:
  if (byte_254A61257 < 0)
  {
    sub_20E860C04(&v99, (void *)xmmword_254A61240, *((unint64_t *)&xmmword_254A61240 + 1));
  }
  else
  {
    v99 = xmmword_254A61240;
    v100 = unk_254A61250;
  }
  v8 = HIBYTE(v100);
  if (v100 >= 0)
  {
    v9 = &v99;
  }
  else
  {
    v8 = *((_QWORD *)&v99 + 1);
    v9 = (__int128 *)v99;
  }
  if (v8 >= 4)
  {
    v10 = (char *)v9 + v8;
    v11 = v9;
    do
    {
      v12 = (char *)memchr(v11, 118, v8 - 3);
      if (!v12)
        break;
      if (*(_DWORD *)v12 == 1684631414)
      {
        if (v12 == v10 || v12 - (char *)v9 == -1)
          break;
        *(_QWORD *)&v93 = v6;
        DWORD2(v93) = 4;
        if (SHIBYTE(v102) < 0)
        {
          sub_20E860C04(&v94, (void *)__dst, *((unint64_t *)&__dst + 1));
        }
        else
        {
          v94 = __dst;
          v95 = v102;
        }
        if (*(char *)(v4 + 55) < 0)
        {
          sub_20E860C04(&__p, *(void **)(v4 + 32), *(_QWORD *)(v4 + 40));
        }
        else
        {
          v68 = *(_OWORD *)(v4 + 32);
          *(_QWORD *)v97 = *(_QWORD *)(v4 + 48);
          __p = v68;
        }
        sub_20EFB2EC8();
        if (byte_254A612FF < 0)
        {
          sub_20E860C04(&v97[8], (void *)xmmword_254A612E8, *((unint64_t *)&xmmword_254A612E8 + 1));
        }
        else
        {
          *(_OWORD *)&v97[8] = xmmword_254A612E8;
          v98 = unk_254A612F8;
        }
        v14 = v86;
        if ((unint64_t)v86 < v87)
          goto LABEL_34;
        goto LABEL_37;
      }
      v11 = (__int128 *)(v12 + 1);
      v8 = v10 - (char *)v11;
    }
    while (v10 - (char *)v11 >= 4);
  }
  *(_QWORD *)&v93 = v6;
  DWORD2(v93) = 2;
  if (SHIBYTE(v102) < 0)
  {
    sub_20E860C04(&v94, (void *)__dst, *((unint64_t *)&__dst + 1));
  }
  else
  {
    v94 = __dst;
    v95 = v102;
  }
  if (*(char *)(v4 + 55) < 0)
  {
    sub_20E860C04(&__p, *(void **)(v4 + 32), *(_QWORD *)(v4 + 40));
  }
  else
  {
    v13 = *(_OWORD *)(v4 + 32);
    *(_QWORD *)v97 = *(_QWORD *)(v4 + 48);
    __p = v13;
  }
  sub_20EFB2EC8();
  if (byte_254A612FF < 0)
  {
    sub_20E860C04(&v97[8], (void *)xmmword_254A612E8, *((unint64_t *)&xmmword_254A612E8 + 1));
  }
  else
  {
    *(_OWORD *)&v97[8] = xmmword_254A612E8;
    v98 = unk_254A612F8;
  }
  v14 = v86;
  if ((unint64_t)v86 >= v87)
  {
LABEL_37:
    v86 = sub_20EBA558C((char **)&v85, (uint64_t)&v93);
    if (SHIBYTE(v98) < 0)
    {
      operator delete(*(void **)&v97[8]);
      if ((v97[7] & 0x80000000) == 0)
        goto LABEL_39;
    }
    else if ((v97[7] & 0x80000000) == 0)
    {
      goto LABEL_39;
    }
LABEL_35:
    operator delete((void *)__p);
    if ((SHIBYTE(v95) & 0x80000000) == 0)
      goto LABEL_40;
    goto LABEL_36;
  }
LABEL_34:
  v15 = v93;
  *((_DWORD *)v14 + 2) = DWORD2(v93);
  *(_QWORD *)v14 = v15;
  v16 = v94;
  *((_QWORD *)v14 + 4) = v95;
  *((_OWORD *)v14 + 1) = v16;
  v95 = 0;
  v94 = 0uLL;
  v17 = *(_QWORD *)v97;
  *(_OWORD *)(v14 + 40) = __p;
  *((_QWORD *)v14 + 7) = v17;
  *(_QWORD *)v97 = 0;
  __p = 0uLL;
  v18 = *(_OWORD *)&v97[8];
  *((_QWORD *)v14 + 10) = v98;
  *((_OWORD *)v14 + 4) = v18;
  *(_QWORD *)&v97[8] = 0;
  *(_QWORD *)&v97[16] = 0;
  v98 = 0;
  v86 = v14 + 88;
  if ((v97[7] & 0x80000000) != 0)
    goto LABEL_35;
LABEL_39:
  if (SHIBYTE(v95) < 0)
LABEL_36:
    operator delete((void *)v94);
LABEL_40:
  v19 = sub_20EBA4AA4();
  if (*((char *)v19 + 23) < 0)
  {
    sub_20E860C04(v91, (void *)*v19, v19[1]);
  }
  else
  {
    v20 = *(_OWORD *)v19;
    v92 = v19[2];
    *(_OWORD *)v91 = v20;
  }
  v77 = a2;
  v21 = HIBYTE(v92);
  if (v92 >= 0)
  {
    v22 = v91;
  }
  else
  {
    v21 = (uint64_t)v91[1];
    v22 = (void **)v91[0];
  }
  if (v21 >= 18)
  {
    v23 = (char *)v22 + v21;
    v24 = v22;
    do
    {
      v25 = (char *)memchr(v24, 67, v21 - 17);
      if (!v25)
        break;
      if (*(_QWORD *)v25 == 0x456C656E6E616843
        && *((_QWORD *)v25 + 1) == 0x696F763C726F7272
        && *((_WORD *)v25 + 8) == 15972)
      {
        if (v25 != v23 && v25 - (char *)v22 != -1)
          goto LABEL_84;
        break;
      }
      v24 = (void **)(v25 + 1);
      v21 = v23 - (char *)v24;
    }
    while (v23 - (char *)v24 >= 18);
  }
  v28 = a1;
  *(_QWORD *)&v93 = v6 + 1;
  DWORD2(v93) = 3;
  v29 = SHIBYTE(v102);
  if (v102 >= 0)
    v30 = HIBYTE(v102);
  else
    v30 = *((_QWORD *)&__dst + 1);
  v31 = v30 + 6;
  if (v30 + 6 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v31 >= 0x17)
  {
    v33 = (v31 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v31 | 7) != 0x17)
      v33 = v31 | 7;
    v34 = v33 + 1;
    v32 = (__int128 *)operator new(v33 + 1);
    *((_QWORD *)&v94 + 1) = v30 + 6;
    v95 = v34 | 0x8000000000000000;
    *(_QWORD *)&v94 = v32;
  }
  else
  {
    v95 = 0;
    v94 = 0uLL;
    v32 = &v94;
    HIBYTE(v95) = v30 + 6;
    if (!v30)
      goto LABEL_76;
  }
  if (v29 >= 0)
    p_dst = &__dst;
  else
    p_dst = (__int128 *)__dst;
  memmove(v32, p_dst, v30);
LABEL_76:
  strcpy((char *)v32 + v30, ".Error");
  *(_WORD *)&v97[7] = 0;
  LOBYTE(__p) = 0;
  HIBYTE(v98) = 0;
  v36 = v86;
  if ((unint64_t)v86 >= v87)
  {
    a1 = v28;
    v86 = sub_20EBA558C((char **)&v85, (uint64_t)&v93);
    if (SHIBYTE(v98) < 0)
    {
      operator delete(*(void **)&v97[8]);
      if ((v97[7] & 0x80000000) == 0)
        goto LABEL_83;
    }
    else if ((v97[7] & 0x80000000) == 0)
    {
      goto LABEL_83;
    }
LABEL_78:
    operator delete((void *)__p);
    if (SHIBYTE(v95) < 0)
      goto LABEL_79;
    goto LABEL_84;
  }
  v37 = v93;
  *((_DWORD *)v86 + 2) = DWORD2(v93);
  *(_QWORD *)v36 = v37;
  v38 = v94;
  *((_QWORD *)v36 + 4) = v95;
  *((_OWORD *)v36 + 1) = v38;
  v95 = 0;
  v94 = 0uLL;
  v39 = *(_QWORD *)v97;
  *(_OWORD *)(v36 + 40) = __p;
  *((_QWORD *)v36 + 7) = v39;
  *(_QWORD *)v97 = 0;
  __p = 0uLL;
  v40 = *(_OWORD *)&v97[8];
  *((_QWORD *)v36 + 10) = v98;
  *((_OWORD *)v36 + 4) = v40;
  *(_QWORD *)&v97[8] = 0;
  *(_QWORD *)&v97[16] = 0;
  v98 = 0;
  v86 = v36 + 88;
  a1 = v28;
  if ((v97[7] & 0x80000000) != 0)
    goto LABEL_78;
LABEL_83:
  if (SHIBYTE(v95) < 0)
  {
LABEL_79:
    operator delete((void *)v94);
    v41 = *(std::__shared_weak_count **)(v4 + 136);
    if (!v41)
      goto LABEL_88;
    goto LABEL_85;
  }
LABEL_84:
  v41 = *(std::__shared_weak_count **)(v4 + 136);
  if (!v41)
  {
LABEL_88:
    v88 = 0;
    v89 = 0;
    v90 = 0;
    v45 = 0;
    goto LABEL_103;
  }
LABEL_85:
  v42 = std::__shared_weak_count::lock(v41);
  *((_QWORD *)&v93 + 1) = v42;
  if (!v42)
    goto LABEL_88;
  v43 = v42;
  v44 = *(_QWORD *)(v4 + 128);
  *(_QWORD *)&v93 = v44;
  if (v44)
  {
    (*(void (**)(_QWORD **__return_ptr))(*(_QWORD *)v44 + 24))(&v88);
  }
  else
  {
    v88 = 0;
    v89 = 0;
    v90 = 0;
  }
  p_shared_owners = (unint64_t *)&v43->__shared_owners_;
  do
    v47 = __ldaxr(p_shared_owners);
  while (__stlxr(v47 - 1, p_shared_owners));
  if (v47)
  {
    v45 = v88;
    v48 = v89;
    if (v88 == v89)
      goto LABEL_103;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
    std::__shared_weak_count::__release_weak(v43);
    v45 = v88;
    v48 = v89;
    if (v88 == v89)
      goto LABEL_103;
  }
  do
  {
    *(_QWORD *)&v93 = v6;
    *((_QWORD *)&v93 + 1) = *v45;
    v95 = 0;
    v94 = 0uLL;
    v50 = v83;
    if ((unint64_t)v83 < v84)
    {
      *(_OWORD *)v83 = v93;
      v49 = v94;
      *((_QWORD *)v50 + 4) = v95;
      *((_OWORD *)v50 + 1) = v49;
      v83 = v50 + 40;
    }
    else
    {
      v83 = sub_20EBA5F8C(&v82, (uint64_t)&v93);
      if (SHIBYTE(v95) < 0)
        operator delete((void *)v94);
    }
    ++v45;
  }
  while (v45 != v48);
  v45 = v88;
LABEL_103:
  if (v45)
  {
    v89 = v45;
    operator delete(v45);
  }
  v51 = *(std::__shared_weak_count **)(v4 + 136);
  if (!v51 || (v52 = std::__shared_weak_count::lock(v51), (*((_QWORD *)&v93 + 1) = v52) == 0))
  {
    v88 = 0;
    v89 = 0;
    v90 = 0;
    v55 = 0;
    goto LABEL_124;
  }
  v53 = v52;
  v54 = *(_QWORD *)(v4 + 128);
  *(_QWORD *)&v93 = v54;
  if (v54)
  {
    (*(void (**)(_QWORD **__return_ptr))(*(_QWORD *)v54 + 32))(&v88);
  }
  else
  {
    v88 = 0;
    v89 = 0;
    v90 = 0;
  }
  v56 = (unint64_t *)&v53->__shared_owners_;
  do
    v57 = __ldaxr(v56);
  while (__stlxr(v57 - 1, v56));
  if (v57)
  {
    v55 = v88;
    v58 = v89;
    if (v88 == v89)
      goto LABEL_124;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
    std::__shared_weak_count::__release_weak(v53);
    v55 = v88;
    v58 = v89;
    if (v88 == v89)
      goto LABEL_124;
  }
  v59 = v6 + 1;
  do
  {
    *(_QWORD *)&v93 = v59;
    *((_QWORD *)&v93 + 1) = *v55;
    v95 = 0;
    v94 = 0uLL;
    v61 = v83;
    if ((unint64_t)v83 < v84)
    {
      *(_OWORD *)v83 = v93;
      v60 = v94;
      *((_QWORD *)v61 + 4) = v95;
      *((_OWORD *)v61 + 1) = v60;
      v83 = v61 + 40;
    }
    else
    {
      v83 = sub_20EBA5F8C(&v82, (uint64_t)&v93);
      if (SHIBYTE(v95) < 0)
        operator delete((void *)v94);
    }
    ++v55;
  }
  while (v55 != v58);
  v55 = v88;
LABEL_124:
  if (v55)
  {
    v89 = v55;
    operator delete(v55);
  }
  if (SHIBYTE(v92) < 0)
  {
    operator delete(v91[0]);
    if ((SHIBYTE(v100) & 0x80000000) == 0)
    {
LABEL_128:
      if ((SHIBYTE(v102) & 0x80000000) == 0)
        goto LABEL_129;
LABEL_133:
      operator delete((void *)__dst);
      if ((*(char *)(v77 + 31) & 0x80000000) == 0)
        goto LABEL_130;
      goto LABEL_134;
    }
  }
  else if ((SHIBYTE(v100) & 0x80000000) == 0)
  {
    goto LABEL_128;
  }
  operator delete((void *)v99);
  if (SHIBYTE(v102) < 0)
    goto LABEL_133;
LABEL_129:
  if ((*(char *)(v77 + 31) & 0x80000000) == 0)
  {
LABEL_130:
    *(_OWORD *)v80 = *(_OWORD *)(v77 + 8);
    v81 = *(_QWORD *)(v77 + 24);
    goto LABEL_135;
  }
LABEL_134:
  sub_20E860C04(v80, *(void **)(v77 + 8), *(_QWORD *)(v77 + 16));
LABEL_135:
  v62 = *(_QWORD *)(v77 + 56) != 0;
  if (*(char *)(v77 + 55) < 0)
  {
    sub_20E860C04(v78, *(void **)(v77 + 32), *(_QWORD *)(v77 + 40));
  }
  else
  {
    *(_OWORD *)v78 = *(_OWORD *)(v77 + 32);
    v79 = *(_QWORD *)(v77 + 48);
  }
  sub_20EBA690C(a1, (__int128 *)v80, v62, (uint64_t *)&v85, (uint64_t *)&v82, (__int128 *)v78);
  if (SHIBYTE(v79) < 0)
  {
    operator delete(v78[0]);
    if ((SHIBYTE(v81) & 0x80000000) == 0)
    {
LABEL_140:
      v63 = (char *)v82;
      if (v82)
        goto LABEL_141;
LABEL_151:
      v65 = (char *)v85;
      if (!v85)
        return;
LABEL_152:
      v66 = v86;
      v67 = v65;
      if (v86 == v65)
      {
LABEL_163:
        v86 = v65;
        operator delete(v67);
        return;
      }
      while (1)
      {
        while (*(v66 - 1) < 0)
        {
          operator delete(*((void **)v66 - 3));
          if (*(v66 - 25) < 0)
            goto LABEL_154;
LABEL_160:
          if ((*(v66 - 49) & 0x80000000) == 0)
            goto LABEL_155;
LABEL_161:
          operator delete(*((void **)v66 - 9));
          v66 -= 88;
          if (v66 == v65)
          {
LABEL_162:
            v67 = v85;
            goto LABEL_163;
          }
        }
        if ((*(v66 - 25) & 0x80000000) == 0)
          goto LABEL_160;
LABEL_154:
        operator delete(*((void **)v66 - 6));
        if (*(v66 - 49) < 0)
          goto LABEL_161;
LABEL_155:
        v66 -= 88;
        if (v66 == v65)
          goto LABEL_162;
      }
    }
  }
  else if ((SHIBYTE(v81) & 0x80000000) == 0)
  {
    goto LABEL_140;
  }
  operator delete(v80[0]);
  v63 = (char *)v82;
  if (!v82)
    goto LABEL_151;
LABEL_141:
  v64 = v83;
  if (v83 == v63)
  {
    v83 = v63;
    operator delete(v63);
    v65 = (char *)v85;
    if (!v85)
      return;
    goto LABEL_152;
  }
  do
  {
    if (*(v64 - 1) < 0)
      operator delete(*((void **)v64 - 3));
    v64 -= 40;
  }
  while (v64 != v63);
  v83 = v63;
  operator delete(v82);
  v65 = (char *)v85;
  if (v85)
    goto LABEL_152;
}

void sub_20EFAB6CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,char a39,uint64_t a40,void *__p,uint64_t a42,int a43,__int16 a44,char a45,char a46,void *a47,uint64_t a48,int a49,__int16 a50,char a51,char a52)
{
  uint64_t v52;

  __cxa_guard_abort(&qword_254A60B08);
  if (*(char *)(v52 - 105) < 0)
    operator delete(*(void **)(v52 - 128));
  sub_20EBA4920(&a24);
  sub_20EBA4990(&a27);
  _Unwind_Resume(a1);
}

void sub_20EFAB868(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  unsigned __int8 v7;
  uint64_t v8;
  __int128 *v9;
  char *v10;
  __int128 *v11;
  char *v12;
  __int128 v13;
  char *v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  __int128 v18;
  uint64_t *v19;
  __int128 v20;
  uint64_t v21;
  void **v22;
  char *v23;
  void **v24;
  char *v25;
  int v28;
  size_t v29;
  unint64_t v30;
  __int128 *v31;
  uint64_t v32;
  uint64_t v33;
  __int128 *p_dst;
  char *v35;
  uint64_t v36;
  __int128 v37;
  uint64_t v38;
  __int128 v39;
  std::__shared_weak_count *v40;
  std::__shared_weak_count *v41;
  std::__shared_weak_count *v42;
  uint64_t v43;
  _QWORD *v44;
  unint64_t *p_shared_owners;
  unint64_t v46;
  _QWORD *v47;
  __int128 v48;
  char *v49;
  std::__shared_weak_count *v50;
  std::__shared_weak_count *v51;
  std::__shared_weak_count *v52;
  uint64_t v53;
  _QWORD *v54;
  unint64_t *v55;
  unint64_t v56;
  _QWORD *v57;
  uint64_t v58;
  __int128 v59;
  char *v60;
  uint64_t v61;
  uint64_t *v62;
  __int128 v63;
  uint64_t v64;
  __int128 *v65;
  char *v66;
  __int128 *v67;
  char *v68;
  __int128 *v69;
  __int128 v70;
  char *v71;
  uint64_t v72;
  __int128 v73;
  uint64_t v74;
  __int128 v75;
  uint64_t *v76;
  __int128 v77;
  uint64_t v78;
  void **v79;
  char *v80;
  void **v81;
  char *v82;
  int v85;
  size_t v86;
  unint64_t v87;
  __int128 *v88;
  uint64_t v89;
  uint64_t v90;
  __int128 *v91;
  char *v92;
  uint64_t v93;
  __int128 v94;
  uint64_t v95;
  __int128 v96;
  std::__shared_weak_count *v97;
  std::__shared_weak_count *v98;
  std::__shared_weak_count *v99;
  uint64_t v100;
  _QWORD *v101;
  unint64_t *v102;
  unint64_t v103;
  _QWORD *v104;
  __int128 v105;
  char *v106;
  std::__shared_weak_count *v107;
  std::__shared_weak_count *v108;
  std::__shared_weak_count *v109;
  uint64_t v110;
  _QWORD *v111;
  unint64_t *v112;
  unint64_t v113;
  _QWORD *v114;
  uint64_t v115;
  __int128 v116;
  char *v117;
  uint64_t v118;
  uint64_t *v119;
  __int128 v120;
  uint64_t v121;
  __int128 *v122;
  char *v123;
  __int128 *v124;
  char *v125;
  char *v126;
  uint64_t v127;
  __int128 v128;
  uint64_t v129;
  __int128 v130;
  uint64_t *v131;
  __int128 v132;
  uint64_t v133;
  void **v134;
  char *v135;
  void **v136;
  char *v137;
  int v140;
  size_t v141;
  unint64_t v142;
  __int128 *v143;
  uint64_t v144;
  uint64_t v145;
  __int128 *v146;
  char *v147;
  uint64_t v148;
  __int128 v149;
  uint64_t v150;
  __int128 v151;
  std::__shared_weak_count *v152;
  std::__shared_weak_count *v153;
  std::__shared_weak_count *v154;
  uint64_t v155;
  _QWORD *v156;
  unint64_t *v157;
  unint64_t v158;
  _QWORD *v159;
  __int128 v160;
  char *v161;
  std::__shared_weak_count *v162;
  std::__shared_weak_count *v163;
  std::__shared_weak_count *v164;
  uint64_t v165;
  _QWORD *v166;
  unint64_t *v167;
  unint64_t v168;
  _QWORD *v169;
  uint64_t v170;
  __int128 v171;
  char *v172;
  uint64_t v173;
  unsigned __int8 v174;
  uint64_t v175;
  __int128 *v176;
  char *v177;
  __int128 *v178;
  char *v179;
  char *v180;
  uint64_t v181;
  __int128 v182;
  uint64_t v183;
  __int128 v184;
  uint64_t *v185;
  __int128 v186;
  uint64_t v187;
  void **v188;
  char *v189;
  void **v190;
  char *v191;
  int v194;
  size_t v195;
  unint64_t v196;
  __int128 *v197;
  uint64_t v198;
  uint64_t v199;
  __int128 *v200;
  char *v201;
  uint64_t v202;
  __int128 v203;
  uint64_t v204;
  __int128 v205;
  std::__shared_weak_count *v206;
  std::__shared_weak_count *v207;
  std::__shared_weak_count *v208;
  uint64_t v209;
  _QWORD *v210;
  unint64_t *v211;
  unint64_t v212;
  _QWORD *v213;
  __int128 v214;
  char *v215;
  std::__shared_weak_count *v216;
  std::__shared_weak_count *v217;
  std::__shared_weak_count *v218;
  uint64_t v219;
  _QWORD *v220;
  unint64_t *v221;
  unint64_t v222;
  _QWORD *v223;
  uint64_t v224;
  __int128 v225;
  char *v226;
  uint64_t v227;
  unsigned __int8 v228;
  uint64_t v229;
  __int128 *v230;
  char *v231;
  __int128 *v232;
  char *v233;
  char *v234;
  uint64_t v235;
  __int128 v236;
  uint64_t v237;
  __int128 v238;
  uint64_t *v239;
  __int128 v240;
  uint64_t v241;
  void **v242;
  char *v243;
  void **v244;
  char *v245;
  int v248;
  size_t v249;
  unint64_t v250;
  __int128 *v251;
  uint64_t v252;
  uint64_t v253;
  __int128 *v254;
  char *v255;
  uint64_t v256;
  __int128 v257;
  uint64_t v258;
  __int128 v259;
  std::__shared_weak_count *v260;
  std::__shared_weak_count *v261;
  std::__shared_weak_count *v262;
  uint64_t v263;
  _QWORD *v264;
  unint64_t *v265;
  unint64_t v266;
  _QWORD *v267;
  __int128 v268;
  char *v269;
  std::__shared_weak_count *v270;
  std::__shared_weak_count *v271;
  std::__shared_weak_count *v272;
  uint64_t v273;
  _QWORD *v274;
  unint64_t *v275;
  unint64_t v276;
  _QWORD *v277;
  uint64_t v278;
  __int128 v279;
  char *v280;
  uint64_t v281;
  uint64_t v282;
  __int128 *v283;
  char *v284;
  __int128 *v285;
  char *v286;
  char *v287;
  uint64_t v288;
  __int128 v289;
  uint64_t v290;
  __int128 v291;
  uint64_t *v292;
  __int128 v293;
  uint64_t v294;
  void **v295;
  char *v296;
  void **v297;
  char *v298;
  int v301;
  size_t v302;
  unint64_t v303;
  __int128 *v304;
  uint64_t v305;
  uint64_t v306;
  __int128 *v307;
  char *v308;
  uint64_t v309;
  __int128 v310;
  uint64_t v311;
  __int128 v312;
  std::__shared_weak_count *v313;
  std::__shared_weak_count *v314;
  std::__shared_weak_count *v315;
  uint64_t v316;
  _QWORD *v317;
  unint64_t *v318;
  unint64_t v319;
  _QWORD *v320;
  __int128 v321;
  char *v322;
  std::__shared_weak_count *v323;
  std::__shared_weak_count *v324;
  std::__shared_weak_count *v325;
  uint64_t v326;
  _QWORD *v327;
  unint64_t *v328;
  unint64_t v329;
  _QWORD *v330;
  uint64_t v331;
  __int128 v332;
  char *v333;
  uint64_t v334;
  uint64_t v335;
  __int128 *v336;
  char *v337;
  __int128 *v338;
  char *v339;
  char *v340;
  uint64_t v341;
  __int128 v342;
  uint64_t v343;
  __int128 v344;
  uint64_t *v345;
  __int128 v346;
  uint64_t v347;
  void **v348;
  char *v349;
  void **v350;
  char *v351;
  int v354;
  size_t v355;
  unint64_t v356;
  __int128 *v357;
  uint64_t v358;
  uint64_t v359;
  __int128 *v360;
  char *v361;
  uint64_t v362;
  __int128 v363;
  uint64_t v364;
  __int128 v365;
  std::__shared_weak_count *v366;
  std::__shared_weak_count *v367;
  std::__shared_weak_count *v368;
  uint64_t v369;
  _QWORD *v370;
  unint64_t *v371;
  unint64_t v372;
  _QWORD *v373;
  __int128 v374;
  char *v375;
  std::__shared_weak_count *v376;
  std::__shared_weak_count *v377;
  std::__shared_weak_count *v378;
  uint64_t v379;
  _QWORD *v380;
  unint64_t *v381;
  unint64_t v382;
  _QWORD *v383;
  __int128 v384;
  char *v385;
  _BOOL4 v386;
  char *v387;
  char *v388;
  char *v389;
  char *v390;
  void *v391;
  __int128 v392;
  __int128 *v393;
  __int128 v394;
  int v395;
  size_t v396;
  unint64_t v397;
  __int128 *v398;
  int v399;
  size_t v400;
  unint64_t v401;
  __int128 *v402;
  int v403;
  size_t v404;
  unint64_t v405;
  __int128 *v406;
  uint64_t v407;
  uint64_t v408;
  uint64_t *v409;
  uint64_t v410;
  uint64_t v411;
  uint64_t *v412;
  uint64_t v413;
  uint64_t v414;
  uint64_t *v415;
  uint64_t v416;
  uint64_t v417;
  void *v418[2];
  uint64_t v419;
  void *v420[2];
  uint64_t v421;
  void *v422;
  char *v423;
  unint64_t v424;
  void *v425;
  char *v426;
  unint64_t v427;
  _QWORD *v428;
  _QWORD *v429;
  uint64_t v430;
  void *v431[2];
  uint64_t v432;
  __int128 v433;
  __int128 v434;
  unint64_t v435;
  __int128 __p;
  _BYTE v437[24];
  uint64_t v438;
  __int128 v439;
  uint64_t v440;
  __int128 __dst;
  int64_t v442;

  v425 = 0;
  v426 = 0;
  v427 = 0;
  v422 = 0;
  v423 = 0;
  v424 = 0;
  v4 = *(_QWORD *)(a2 + 72);
  if (!v4)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/Node.h", 220, (uint64_t)"channels_", 9, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v4 = *(_QWORD *)(a2 + 72);
    v416 = a2;
    v417 = a1;
    if ((*(char *)(v4 + 31) & 0x80000000) == 0)
      goto LABEL_3;
LABEL_6:
    sub_20E860C04(&__dst, *(void **)(v4 + 8), *(_QWORD *)(v4 + 16));
    goto LABEL_7;
  }
  v416 = a2;
  v417 = a1;
  if (*(char *)(v4 + 31) < 0)
    goto LABEL_6;
LABEL_3:
  v5 = *(_OWORD *)(v4 + 8);
  v442 = *(_QWORD *)(v4 + 24);
  __dst = v5;
LABEL_7:
  v6 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v4 + 96) + 48))(*(_QWORD *)(v4 + 96));
  v7 = atomic_load((unsigned __int8 *)&qword_254A60B58);
  if ((v7 & 1) != 0 || !__cxa_guard_acquire(&qword_254A60B58))
    goto LABEL_8;
  sub_20EFB3080();
  v395 = byte_254A6135F;
  if (byte_254A6135F >= 0)
    v396 = byte_254A6135F;
  else
    v396 = qword_254A61350;
  v397 = v396 + 1;
  if (v396 + 1 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v397 >= 0x17)
  {
    v407 = (v397 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v397 | 7) != 0x17)
      v407 = v397 | 7;
    v408 = v407 + 1;
    v398 = (__int128 *)operator new(v407 + 1);
    *((_QWORD *)&xmmword_254A61330 + 1) = v396 + 1;
    unk_254A61340 = v408 | 0x8000000000000000;
    *(_QWORD *)&xmmword_254A61330 = v398;
    goto LABEL_1041;
  }
  v398 = &xmmword_254A61330;
  unk_254A61340 = 0;
  xmmword_254A61330 = 0uLL;
  byte_254A61347 = v396 + 1;
  if (v396)
  {
LABEL_1041:
    if (v395 >= 0)
      v409 = &qword_254A61348;
    else
      v409 = (uint64_t *)qword_254A61348;
    memmove(v398, v409, v396);
  }
  *(_WORD *)((char *)v398 + v396) = 38;
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A61330, &dword_20E81F000);
  __cxa_guard_release(&qword_254A60B58);
LABEL_8:
  if (byte_254A61347 < 0)
  {
    sub_20E860C04(&v439, (void *)xmmword_254A61330, *((unint64_t *)&xmmword_254A61330 + 1));
  }
  else
  {
    v439 = xmmword_254A61330;
    v440 = unk_254A61340;
  }
  v8 = HIBYTE(v440);
  if (v440 >= 0)
  {
    v9 = &v439;
  }
  else
  {
    v8 = *((_QWORD *)&v439 + 1);
    v9 = (__int128 *)v439;
  }
  if (v8 >= 4)
  {
    v10 = (char *)v9 + v8;
    v11 = v9;
    do
    {
      v12 = (char *)memchr(v11, 118, v8 - 3);
      if (!v12)
        break;
      if (*(_DWORD *)v12 == 1684631414)
      {
        if (v12 == v10 || v12 - (char *)v9 == -1)
          break;
        *(_QWORD *)&v433 = v6;
        DWORD2(v433) = 4;
        if (SHIBYTE(v442) < 0)
        {
          sub_20E860C04(&v434, (void *)__dst, *((unint64_t *)&__dst + 1));
        }
        else
        {
          v434 = __dst;
          v435 = v442;
        }
        if (*(char *)(v4 + 55) < 0)
        {
          sub_20E860C04(&__p, *(void **)(v4 + 32), *(_QWORD *)(v4 + 40));
        }
        else
        {
          v392 = *(_OWORD *)(v4 + 32);
          *(_QWORD *)v437 = *(_QWORD *)(v4 + 48);
          __p = v392;
        }
        sub_20EFB3B9C();
        if (byte_254A61467 < 0)
        {
          sub_20E860C04(&v437[8], (void *)xmmword_254A61450, *((unint64_t *)&xmmword_254A61450 + 1));
        }
        else
        {
          *(_OWORD *)&v437[8] = xmmword_254A61450;
          v438 = unk_254A61460;
        }
        v14 = v426;
        if ((unint64_t)v426 < v427)
          goto LABEL_34;
        goto LABEL_37;
      }
      v11 = (__int128 *)(v12 + 1);
      v8 = v10 - (char *)v11;
    }
    while (v10 - (char *)v11 >= 4);
  }
  *(_QWORD *)&v433 = v6;
  DWORD2(v433) = 2;
  if (SHIBYTE(v442) < 0)
  {
    sub_20E860C04(&v434, (void *)__dst, *((unint64_t *)&__dst + 1));
  }
  else
  {
    v434 = __dst;
    v435 = v442;
  }
  if (*(char *)(v4 + 55) < 0)
  {
    sub_20E860C04(&__p, *(void **)(v4 + 32), *(_QWORD *)(v4 + 40));
  }
  else
  {
    v13 = *(_OWORD *)(v4 + 32);
    *(_QWORD *)v437 = *(_QWORD *)(v4 + 48);
    __p = v13;
  }
  sub_20EFB3B9C();
  if (byte_254A61467 < 0)
  {
    sub_20E860C04(&v437[8], (void *)xmmword_254A61450, *((unint64_t *)&xmmword_254A61450 + 1));
  }
  else
  {
    *(_OWORD *)&v437[8] = xmmword_254A61450;
    v438 = unk_254A61460;
  }
  v14 = v426;
  if ((unint64_t)v426 >= v427)
  {
LABEL_37:
    v426 = sub_20EBA558C((char **)&v425, (uint64_t)&v433);
    if (SHIBYTE(v438) < 0)
    {
      operator delete(*(void **)&v437[8]);
      if ((v437[7] & 0x80000000) == 0)
        goto LABEL_39;
    }
    else if ((v437[7] & 0x80000000) == 0)
    {
      goto LABEL_39;
    }
LABEL_35:
    operator delete((void *)__p);
    if ((SHIBYTE(v435) & 0x80000000) == 0)
      goto LABEL_40;
    goto LABEL_36;
  }
LABEL_34:
  v15 = v433;
  *((_DWORD *)v14 + 2) = DWORD2(v433);
  *(_QWORD *)v14 = v15;
  v16 = v434;
  *((_QWORD *)v14 + 4) = v435;
  *((_OWORD *)v14 + 1) = v16;
  v435 = 0;
  v434 = 0uLL;
  v17 = *(_QWORD *)v437;
  *(_OWORD *)(v14 + 40) = __p;
  *((_QWORD *)v14 + 7) = v17;
  *(_QWORD *)v437 = 0;
  __p = 0uLL;
  v18 = *(_OWORD *)&v437[8];
  *((_QWORD *)v14 + 10) = v438;
  *((_OWORD *)v14 + 4) = v18;
  *(_QWORD *)&v437[8] = 0;
  *(_QWORD *)&v437[16] = 0;
  v438 = 0;
  v426 = v14 + 88;
  if ((v437[7] & 0x80000000) != 0)
    goto LABEL_35;
LABEL_39:
  if (SHIBYTE(v435) < 0)
LABEL_36:
    operator delete((void *)v434);
LABEL_40:
  v19 = sub_20EBA4AA4();
  if (*((char *)v19 + 23) < 0)
  {
    sub_20E860C04(v431, (void *)*v19, v19[1]);
  }
  else
  {
    v20 = *(_OWORD *)v19;
    v432 = v19[2];
    *(_OWORD *)v431 = v20;
  }
  v21 = HIBYTE(v432);
  if (v432 >= 0)
  {
    v22 = v431;
  }
  else
  {
    v21 = (uint64_t)v431[1];
    v22 = (void **)v431[0];
  }
  if (v21 >= 18)
  {
    v23 = (char *)v22 + v21;
    v24 = v22;
    do
    {
      v25 = (char *)memchr(v24, 67, v21 - 17);
      if (!v25)
        break;
      if (*(_QWORD *)v25 == 0x456C656E6E616843
        && *((_QWORD *)v25 + 1) == 0x696F763C726F7272
        && *((_WORD *)v25 + 8) == 15972)
      {
        if (v25 != v23 && v25 - (char *)v22 != -1)
          goto LABEL_84;
        break;
      }
      v24 = (void **)(v25 + 1);
      v21 = v23 - (char *)v24;
    }
    while (v23 - (char *)v24 >= 18);
  }
  *(_QWORD *)&v433 = v6 + 1;
  DWORD2(v433) = 3;
  v28 = SHIBYTE(v442);
  if (v442 >= 0)
    v29 = HIBYTE(v442);
  else
    v29 = *((_QWORD *)&__dst + 1);
  v30 = v29 + 6;
  if (v29 + 6 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v30 >= 0x17)
  {
    v32 = (v30 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v30 | 7) != 0x17)
      v32 = v30 | 7;
    v33 = v32 + 1;
    v31 = (__int128 *)operator new(v32 + 1);
    *((_QWORD *)&v434 + 1) = v29 + 6;
    v435 = v33 | 0x8000000000000000;
    *(_QWORD *)&v434 = v31;
  }
  else
  {
    v435 = 0;
    v434 = 0uLL;
    v31 = &v434;
    HIBYTE(v435) = v29 + 6;
    if (!v29)
      goto LABEL_76;
  }
  if (v28 >= 0)
    p_dst = &__dst;
  else
    p_dst = (__int128 *)__dst;
  memmove(v31, p_dst, v29);
LABEL_76:
  strcpy((char *)v31 + v29, ".Error");
  *(_WORD *)&v437[7] = 0;
  LOBYTE(__p) = 0;
  HIBYTE(v438) = 0;
  v35 = v426;
  if ((unint64_t)v426 >= v427)
  {
    v426 = sub_20EBA558C((char **)&v425, (uint64_t)&v433);
    if (SHIBYTE(v438) < 0)
    {
      operator delete(*(void **)&v437[8]);
      if ((v437[7] & 0x80000000) == 0)
        goto LABEL_83;
    }
    else if ((v437[7] & 0x80000000) == 0)
    {
      goto LABEL_83;
    }
LABEL_78:
    operator delete((void *)__p);
    if (SHIBYTE(v435) < 0)
      goto LABEL_79;
    goto LABEL_84;
  }
  v36 = v433;
  *((_DWORD *)v426 + 2) = DWORD2(v433);
  *(_QWORD *)v35 = v36;
  v37 = v434;
  *((_QWORD *)v35 + 4) = v435;
  *((_OWORD *)v35 + 1) = v37;
  v435 = 0;
  v434 = 0uLL;
  v38 = *(_QWORD *)v437;
  *(_OWORD *)(v35 + 40) = __p;
  *((_QWORD *)v35 + 7) = v38;
  *(_QWORD *)v437 = 0;
  __p = 0uLL;
  v39 = *(_OWORD *)&v437[8];
  *((_QWORD *)v35 + 10) = v438;
  *((_OWORD *)v35 + 4) = v39;
  *(_QWORD *)&v437[8] = 0;
  *(_QWORD *)&v437[16] = 0;
  v438 = 0;
  v426 = v35 + 88;
  if ((v437[7] & 0x80000000) != 0)
    goto LABEL_78;
LABEL_83:
  if (SHIBYTE(v435) < 0)
  {
LABEL_79:
    operator delete((void *)v434);
    v40 = *(std::__shared_weak_count **)(v4 + 136);
    if (!v40)
      goto LABEL_88;
    goto LABEL_85;
  }
LABEL_84:
  v40 = *(std::__shared_weak_count **)(v4 + 136);
  if (!v40)
  {
LABEL_88:
    v428 = 0;
    v429 = 0;
    v430 = 0;
    v44 = 0;
    goto LABEL_103;
  }
LABEL_85:
  v41 = std::__shared_weak_count::lock(v40);
  *((_QWORD *)&v433 + 1) = v41;
  if (!v41)
    goto LABEL_88;
  v42 = v41;
  v43 = *(_QWORD *)(v4 + 128);
  *(_QWORD *)&v433 = v43;
  if (v43)
  {
    (*(void (**)(_QWORD **__return_ptr))(*(_QWORD *)v43 + 24))(&v428);
  }
  else
  {
    v428 = 0;
    v429 = 0;
    v430 = 0;
  }
  p_shared_owners = (unint64_t *)&v42->__shared_owners_;
  do
    v46 = __ldaxr(p_shared_owners);
  while (__stlxr(v46 - 1, p_shared_owners));
  if (v46)
  {
    v44 = v428;
    v47 = v429;
    if (v428 == v429)
      goto LABEL_103;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
    std::__shared_weak_count::__release_weak(v42);
    v44 = v428;
    v47 = v429;
    if (v428 == v429)
      goto LABEL_103;
  }
  do
  {
    *(_QWORD *)&v433 = v6;
    *((_QWORD *)&v433 + 1) = *v44;
    v435 = 0;
    v434 = 0uLL;
    v49 = v423;
    if ((unint64_t)v423 < v424)
    {
      *(_OWORD *)v423 = v433;
      v48 = v434;
      *((_QWORD *)v49 + 4) = v435;
      *((_OWORD *)v49 + 1) = v48;
      v423 = v49 + 40;
    }
    else
    {
      v423 = sub_20EBA5F8C(&v422, (uint64_t)&v433);
      if (SHIBYTE(v435) < 0)
        operator delete((void *)v434);
    }
    ++v44;
  }
  while (v44 != v47);
  v44 = v428;
LABEL_103:
  if (v44)
  {
    v429 = v44;
    operator delete(v44);
  }
  v50 = *(std::__shared_weak_count **)(v4 + 136);
  if (!v50 || (v51 = std::__shared_weak_count::lock(v50), (*((_QWORD *)&v433 + 1) = v51) == 0))
  {
    v428 = 0;
    v429 = 0;
    v430 = 0;
    v54 = 0;
    goto LABEL_124;
  }
  v52 = v51;
  v53 = *(_QWORD *)(v4 + 128);
  *(_QWORD *)&v433 = v53;
  if (v53)
  {
    (*(void (**)(_QWORD **__return_ptr))(*(_QWORD *)v53 + 32))(&v428);
  }
  else
  {
    v428 = 0;
    v429 = 0;
    v430 = 0;
  }
  v55 = (unint64_t *)&v52->__shared_owners_;
  do
    v56 = __ldaxr(v55);
  while (__stlxr(v56 - 1, v55));
  if (v56)
  {
    v54 = v428;
    v57 = v429;
    if (v428 == v429)
      goto LABEL_124;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
    std::__shared_weak_count::__release_weak(v52);
    v54 = v428;
    v57 = v429;
    if (v428 == v429)
      goto LABEL_124;
  }
  v58 = v6 + 1;
  do
  {
    *(_QWORD *)&v433 = v58;
    *((_QWORD *)&v433 + 1) = *v54;
    v435 = 0;
    v434 = 0uLL;
    v60 = v423;
    if ((unint64_t)v423 < v424)
    {
      *(_OWORD *)v423 = v433;
      v59 = v434;
      *((_QWORD *)v60 + 4) = v435;
      *((_OWORD *)v60 + 1) = v59;
      v423 = v60 + 40;
    }
    else
    {
      v423 = sub_20EBA5F8C(&v422, (uint64_t)&v433);
      if (SHIBYTE(v435) < 0)
        operator delete((void *)v434);
    }
    ++v54;
  }
  while (v54 != v57);
  v54 = v428;
LABEL_124:
  if (v54)
  {
    v429 = v54;
    operator delete(v54);
  }
  if (SHIBYTE(v432) < 0)
  {
    operator delete(v431[0]);
    if ((SHIBYTE(v440) & 0x80000000) == 0)
    {
LABEL_128:
      if ((SHIBYTE(v442) & 0x80000000) == 0)
        goto LABEL_129;
LABEL_133:
      operator delete((void *)__dst);
      if ((*(char *)(v4 + 199) & 0x80000000) == 0)
        goto LABEL_130;
      goto LABEL_134;
    }
  }
  else if ((SHIBYTE(v440) & 0x80000000) == 0)
  {
    goto LABEL_128;
  }
  operator delete((void *)v439);
  if (SHIBYTE(v442) < 0)
    goto LABEL_133;
LABEL_129:
  if ((*(char *)(v4 + 199) & 0x80000000) == 0)
  {
LABEL_130:
    __dst = *(_OWORD *)(v4 + 176);
    v442 = *(_QWORD *)(v4 + 192);
    goto LABEL_135;
  }
LABEL_134:
  sub_20E860C04(&__dst, *(void **)(v4 + 176), *(_QWORD *)(v4 + 184));
LABEL_135:
  v61 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v4 + 264) + 48))(*(_QWORD *)(v4 + 264));
  v62 = sub_20EC6E994();
  if (*((char *)v62 + 23) < 0)
  {
    sub_20E860C04(&v439, (void *)*v62, v62[1]);
  }
  else
  {
    v63 = *(_OWORD *)v62;
    v440 = v62[2];
    v439 = v63;
  }
  v64 = HIBYTE(v440);
  if (v440 >= 0)
  {
    v65 = &v439;
  }
  else
  {
    v64 = *((_QWORD *)&v439 + 1);
    v65 = (__int128 *)v439;
  }
  if (v64 >= 4)
  {
    v66 = (char *)v65 + v64;
    v67 = v65;
    do
    {
      v68 = (char *)memchr(v67, 118, v64 - 3);
      if (!v68)
        break;
      if (*(_DWORD *)v68 == 1684631414)
      {
        if (v68 == v66 || v68 - (char *)v65 == -1)
          break;
        *(_QWORD *)&v433 = v61;
        DWORD2(v433) = 4;
        if (SHIBYTE(v442) < 0)
        {
          sub_20E860C04(&v434, (void *)__dst, *((unint64_t *)&__dst + 1));
        }
        else
        {
          v434 = __dst;
          v435 = v442;
        }
        if (*(char *)(v4 + 223) < 0)
        {
          sub_20E860C04(&__p, *(void **)(v4 + 200), *(_QWORD *)(v4 + 208));
        }
        else
        {
          __p = *(_OWORD *)(v4 + 200);
          *(_QWORD *)v437 = *(_QWORD *)(v4 + 216);
        }
        v393 = sub_20EC744A4();
        if (*((char *)v393 + 23) < 0)
        {
          sub_20E860C04(&v437[8], *(void **)v393, *((_QWORD *)v393 + 1));
        }
        else
        {
          v394 = *v393;
          v438 = *((_QWORD *)v393 + 2);
          *(_OWORD *)&v437[8] = v394;
        }
        v71 = v426;
        if ((unint64_t)v426 < v427)
          goto LABEL_161;
        goto LABEL_164;
      }
      v67 = (__int128 *)(v68 + 1);
      v64 = v66 - (char *)v67;
    }
    while (v66 - (char *)v67 >= 4);
  }
  *(_QWORD *)&v433 = v61;
  DWORD2(v433) = 2;
  if (SHIBYTE(v442) < 0)
  {
    sub_20E860C04(&v434, (void *)__dst, *((unint64_t *)&__dst + 1));
  }
  else
  {
    v434 = __dst;
    v435 = v442;
  }
  if (*(char *)(v4 + 223) < 0)
  {
    sub_20E860C04(&__p, *(void **)(v4 + 200), *(_QWORD *)(v4 + 208));
  }
  else
  {
    __p = *(_OWORD *)(v4 + 200);
    *(_QWORD *)v437 = *(_QWORD *)(v4 + 216);
  }
  v69 = sub_20EC744A4();
  if (*((char *)v69 + 23) < 0)
  {
    sub_20E860C04(&v437[8], *(void **)v69, *((_QWORD *)v69 + 1));
  }
  else
  {
    v70 = *v69;
    v438 = *((_QWORD *)v69 + 2);
    *(_OWORD *)&v437[8] = v70;
  }
  v71 = v426;
  if ((unint64_t)v426 >= v427)
  {
LABEL_164:
    v426 = sub_20EBA558C((char **)&v425, (uint64_t)&v433);
    if (SHIBYTE(v438) < 0)
    {
      operator delete(*(void **)&v437[8]);
      if ((v437[7] & 0x80000000) == 0)
        goto LABEL_166;
    }
    else if ((v437[7] & 0x80000000) == 0)
    {
      goto LABEL_166;
    }
LABEL_162:
    operator delete((void *)__p);
    if ((SHIBYTE(v435) & 0x80000000) == 0)
      goto LABEL_167;
    goto LABEL_163;
  }
LABEL_161:
  v72 = v433;
  *((_DWORD *)v71 + 2) = DWORD2(v433);
  *(_QWORD *)v71 = v72;
  v73 = v434;
  *((_QWORD *)v71 + 4) = v435;
  *((_OWORD *)v71 + 1) = v73;
  v435 = 0;
  v434 = 0uLL;
  v74 = *(_QWORD *)v437;
  *(_OWORD *)(v71 + 40) = __p;
  *((_QWORD *)v71 + 7) = v74;
  *(_QWORD *)v437 = 0;
  __p = 0uLL;
  v75 = *(_OWORD *)&v437[8];
  *((_QWORD *)v71 + 10) = v438;
  *((_OWORD *)v71 + 4) = v75;
  *(_QWORD *)&v437[8] = 0;
  *(_QWORD *)&v437[16] = 0;
  v438 = 0;
  v426 = v71 + 88;
  if ((v437[7] & 0x80000000) != 0)
    goto LABEL_162;
LABEL_166:
  if (SHIBYTE(v435) < 0)
LABEL_163:
    operator delete((void *)v434);
LABEL_167:
  v76 = sub_20EBA4AA4();
  if (*((char *)v76 + 23) < 0)
  {
    sub_20E860C04(v431, (void *)*v76, v76[1]);
  }
  else
  {
    v77 = *(_OWORD *)v76;
    v432 = v76[2];
    *(_OWORD *)v431 = v77;
  }
  v78 = HIBYTE(v432);
  if (v432 >= 0)
  {
    v79 = v431;
  }
  else
  {
    v78 = (uint64_t)v431[1];
    v79 = (void **)v431[0];
  }
  if (v78 >= 18)
  {
    v80 = (char *)v79 + v78;
    v81 = v79;
    do
    {
      v82 = (char *)memchr(v81, 67, v78 - 17);
      if (!v82)
        break;
      if (*(_QWORD *)v82 == 0x456C656E6E616843
        && *((_QWORD *)v82 + 1) == 0x696F763C726F7272
        && *((_WORD *)v82 + 8) == 15972)
      {
        if (v82 != v80 && v82 - (char *)v79 != -1)
          goto LABEL_211;
        break;
      }
      v81 = (void **)(v82 + 1);
      v78 = v80 - (char *)v81;
    }
    while (v80 - (char *)v81 >= 18);
  }
  *(_QWORD *)&v433 = v61 + 1;
  DWORD2(v433) = 3;
  v85 = SHIBYTE(v442);
  if (v442 >= 0)
    v86 = HIBYTE(v442);
  else
    v86 = *((_QWORD *)&__dst + 1);
  v87 = v86 + 6;
  if (v86 + 6 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v87 >= 0x17)
  {
    v89 = (v87 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v87 | 7) != 0x17)
      v89 = v87 | 7;
    v90 = v89 + 1;
    v88 = (__int128 *)operator new(v89 + 1);
    *((_QWORD *)&v434 + 1) = v86 + 6;
    v435 = v90 | 0x8000000000000000;
    *(_QWORD *)&v434 = v88;
  }
  else
  {
    v435 = 0;
    v434 = 0uLL;
    v88 = &v434;
    HIBYTE(v435) = v86 + 6;
    if (!v86)
      goto LABEL_203;
  }
  if (v85 >= 0)
    v91 = &__dst;
  else
    v91 = (__int128 *)__dst;
  memmove(v88, v91, v86);
LABEL_203:
  strcpy((char *)v88 + v86, ".Error");
  *(_WORD *)&v437[7] = 0;
  LOBYTE(__p) = 0;
  HIBYTE(v438) = 0;
  v92 = v426;
  if ((unint64_t)v426 >= v427)
  {
    v426 = sub_20EBA558C((char **)&v425, (uint64_t)&v433);
    if (SHIBYTE(v438) < 0)
    {
      operator delete(*(void **)&v437[8]);
      if ((v437[7] & 0x80000000) == 0)
        goto LABEL_210;
    }
    else if ((v437[7] & 0x80000000) == 0)
    {
      goto LABEL_210;
    }
LABEL_205:
    operator delete((void *)__p);
    if (SHIBYTE(v435) < 0)
      goto LABEL_206;
    goto LABEL_211;
  }
  v93 = v433;
  *((_DWORD *)v426 + 2) = DWORD2(v433);
  *(_QWORD *)v92 = v93;
  v94 = v434;
  *((_QWORD *)v92 + 4) = v435;
  *((_OWORD *)v92 + 1) = v94;
  v435 = 0;
  v434 = 0uLL;
  v95 = *(_QWORD *)v437;
  *(_OWORD *)(v92 + 40) = __p;
  *((_QWORD *)v92 + 7) = v95;
  *(_QWORD *)v437 = 0;
  __p = 0uLL;
  v96 = *(_OWORD *)&v437[8];
  *((_QWORD *)v92 + 10) = v438;
  *((_OWORD *)v92 + 4) = v96;
  *(_QWORD *)&v437[8] = 0;
  *(_QWORD *)&v437[16] = 0;
  v438 = 0;
  v426 = v92 + 88;
  if ((v437[7] & 0x80000000) != 0)
    goto LABEL_205;
LABEL_210:
  if (SHIBYTE(v435) < 0)
  {
LABEL_206:
    operator delete((void *)v434);
    v97 = *(std::__shared_weak_count **)(v4 + 304);
    if (!v97)
      goto LABEL_215;
    goto LABEL_212;
  }
LABEL_211:
  v97 = *(std::__shared_weak_count **)(v4 + 304);
  if (!v97)
  {
LABEL_215:
    v428 = 0;
    v429 = 0;
    v430 = 0;
    v101 = 0;
    goto LABEL_232;
  }
LABEL_212:
  v98 = std::__shared_weak_count::lock(v97);
  *((_QWORD *)&v433 + 1) = v98;
  if (!v98)
    goto LABEL_215;
  v99 = v98;
  v100 = *(_QWORD *)(v4 + 296);
  *(_QWORD *)&v433 = v100;
  if (v100)
  {
    (*(void (**)(_QWORD **__return_ptr))(*(_QWORD *)v100 + 24))(&v428);
  }
  else
  {
    v428 = 0;
    v429 = 0;
    v430 = 0;
  }
  v102 = (unint64_t *)&v99->__shared_owners_;
  do
    v103 = __ldaxr(v102);
  while (__stlxr(v103 - 1, v102));
  if (v103)
  {
    v101 = v428;
    v104 = v429;
    if (v428 == v429)
      goto LABEL_232;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v99->__on_zero_shared)(v99);
    std::__shared_weak_count::__release_weak(v99);
    v101 = v428;
    v104 = v429;
    if (v428 == v429)
      goto LABEL_232;
  }
  do
  {
    *(_QWORD *)&v433 = v61;
    *((_QWORD *)&v433 + 1) = *v101;
    v435 = 0;
    v434 = 0uLL;
    v106 = v423;
    if ((unint64_t)v423 < v424)
    {
      *(_OWORD *)v423 = v433;
      v105 = v434;
      *((_QWORD *)v106 + 4) = v435;
      *((_OWORD *)v106 + 1) = v105;
      v423 = v106 + 40;
    }
    else
    {
      v423 = sub_20EBA5F8C(&v422, (uint64_t)&v433);
      if (SHIBYTE(v435) < 0)
        operator delete((void *)v434);
    }
    ++v101;
  }
  while (v101 != v104);
  v101 = v428;
LABEL_232:
  if (v101)
  {
    v429 = v101;
    operator delete(v101);
  }
  v107 = *(std::__shared_weak_count **)(v4 + 304);
  if (!v107 || (v108 = std::__shared_weak_count::lock(v107), (*((_QWORD *)&v433 + 1) = v108) == 0))
  {
    v428 = 0;
    v429 = 0;
    v430 = 0;
    v111 = 0;
    goto LABEL_253;
  }
  v109 = v108;
  v110 = *(_QWORD *)(v4 + 296);
  *(_QWORD *)&v433 = v110;
  if (v110)
  {
    (*(void (**)(_QWORD **__return_ptr))(*(_QWORD *)v110 + 32))(&v428);
  }
  else
  {
    v428 = 0;
    v429 = 0;
    v430 = 0;
  }
  v112 = (unint64_t *)&v109->__shared_owners_;
  do
    v113 = __ldaxr(v112);
  while (__stlxr(v113 - 1, v112));
  if (v113)
  {
    v111 = v428;
    v114 = v429;
    if (v428 == v429)
      goto LABEL_253;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v109->__on_zero_shared)(v109);
    std::__shared_weak_count::__release_weak(v109);
    v111 = v428;
    v114 = v429;
    if (v428 == v429)
      goto LABEL_253;
  }
  v115 = v61 + 1;
  do
  {
    *(_QWORD *)&v433 = v115;
    *((_QWORD *)&v433 + 1) = *v111;
    v435 = 0;
    v434 = 0uLL;
    v117 = v423;
    if ((unint64_t)v423 < v424)
    {
      *(_OWORD *)v423 = v433;
      v116 = v434;
      *((_QWORD *)v117 + 4) = v435;
      *((_OWORD *)v117 + 1) = v116;
      v423 = v117 + 40;
    }
    else
    {
      v423 = sub_20EBA5F8C(&v422, (uint64_t)&v433);
      if (SHIBYTE(v435) < 0)
        operator delete((void *)v434);
    }
    ++v111;
  }
  while (v111 != v114);
  v111 = v428;
LABEL_253:
  if (v111)
  {
    v429 = v111;
    operator delete(v111);
  }
  if (SHIBYTE(v432) < 0)
  {
    operator delete(v431[0]);
    if ((SHIBYTE(v440) & 0x80000000) == 0)
    {
LABEL_257:
      if ((SHIBYTE(v442) & 0x80000000) == 0)
        goto LABEL_258;
LABEL_262:
      operator delete((void *)__dst);
      if ((*(char *)(v4 + 367) & 0x80000000) == 0)
        goto LABEL_259;
      goto LABEL_263;
    }
  }
  else if ((SHIBYTE(v440) & 0x80000000) == 0)
  {
    goto LABEL_257;
  }
  operator delete((void *)v439);
  if (SHIBYTE(v442) < 0)
    goto LABEL_262;
LABEL_258:
  if ((*(char *)(v4 + 367) & 0x80000000) == 0)
  {
LABEL_259:
    __dst = *(_OWORD *)(v4 + 344);
    v442 = *(_QWORD *)(v4 + 360);
    goto LABEL_264;
  }
LABEL_263:
  sub_20E860C04(&__dst, *(void **)(v4 + 344), *(_QWORD *)(v4 + 352));
LABEL_264:
  v118 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v4 + 432) + 48))(*(_QWORD *)(v4 + 432));
  v119 = sub_20EC74864();
  if (*((char *)v119 + 23) < 0)
  {
    sub_20E860C04(&v439, (void *)*v119, v119[1]);
  }
  else
  {
    v120 = *(_OWORD *)v119;
    v440 = v119[2];
    v439 = v120;
  }
  v121 = HIBYTE(v440);
  if (v440 >= 0)
  {
    v122 = &v439;
  }
  else
  {
    v121 = *((_QWORD *)&v439 + 1);
    v122 = (__int128 *)v439;
  }
  if (v121 >= 4)
  {
    v123 = (char *)v122 + v121;
    v124 = v122;
    do
    {
      v125 = (char *)memchr(v124, 118, v121 - 3);
      if (!v125)
        break;
      if (*(_DWORD *)v125 == 1684631414)
      {
        if (v125 == v123 || v125 - (char *)v122 == -1)
          break;
        *(_QWORD *)&v433 = v118;
        DWORD2(v433) = 4;
        if (SHIBYTE(v442) < 0)
        {
          sub_20E860C04(&v434, (void *)__dst, *((unint64_t *)&__dst + 1));
        }
        else
        {
          v434 = __dst;
          v435 = v442;
        }
        if (*(char *)(v4 + 391) < 0)
        {
          sub_20E860C04(&__p, *(void **)(v4 + 368), *(_QWORD *)(v4 + 376));
        }
        else
        {
          __p = *(_OWORD *)(v4 + 368);
          *(_QWORD *)v437 = *(_QWORD *)(v4 + 384);
        }
        sub_20EFB3D54();
        if (byte_254A614AF < 0)
        {
          sub_20E860C04(&v437[8], (void *)xmmword_254A61498, *((unint64_t *)&xmmword_254A61498 + 1));
        }
        else
        {
          *(_OWORD *)&v437[8] = xmmword_254A61498;
          v438 = unk_254A614A8;
        }
        v126 = v426;
        if ((unint64_t)v426 < v427)
          goto LABEL_290;
        goto LABEL_293;
      }
      v124 = (__int128 *)(v125 + 1);
      v121 = v123 - (char *)v124;
    }
    while (v123 - (char *)v124 >= 4);
  }
  *(_QWORD *)&v433 = v118;
  DWORD2(v433) = 2;
  if (SHIBYTE(v442) < 0)
  {
    sub_20E860C04(&v434, (void *)__dst, *((unint64_t *)&__dst + 1));
  }
  else
  {
    v434 = __dst;
    v435 = v442;
  }
  if (*(char *)(v4 + 391) < 0)
  {
    sub_20E860C04(&__p, *(void **)(v4 + 368), *(_QWORD *)(v4 + 376));
  }
  else
  {
    __p = *(_OWORD *)(v4 + 368);
    *(_QWORD *)v437 = *(_QWORD *)(v4 + 384);
  }
  sub_20EFB3D54();
  if (byte_254A614AF < 0)
  {
    sub_20E860C04(&v437[8], (void *)xmmword_254A61498, *((unint64_t *)&xmmword_254A61498 + 1));
  }
  else
  {
    *(_OWORD *)&v437[8] = xmmword_254A61498;
    v438 = unk_254A614A8;
  }
  v126 = v426;
  if ((unint64_t)v426 >= v427)
  {
LABEL_293:
    v426 = sub_20EBA558C((char **)&v425, (uint64_t)&v433);
    if (SHIBYTE(v438) < 0)
    {
      operator delete(*(void **)&v437[8]);
      if ((v437[7] & 0x80000000) == 0)
        goto LABEL_295;
    }
    else if ((v437[7] & 0x80000000) == 0)
    {
      goto LABEL_295;
    }
LABEL_291:
    operator delete((void *)__p);
    if ((SHIBYTE(v435) & 0x80000000) == 0)
      goto LABEL_296;
    goto LABEL_292;
  }
LABEL_290:
  v127 = v433;
  *((_DWORD *)v126 + 2) = DWORD2(v433);
  *(_QWORD *)v126 = v127;
  v128 = v434;
  *((_QWORD *)v126 + 4) = v435;
  *((_OWORD *)v126 + 1) = v128;
  v435 = 0;
  v434 = 0uLL;
  v129 = *(_QWORD *)v437;
  *(_OWORD *)(v126 + 40) = __p;
  *((_QWORD *)v126 + 7) = v129;
  *(_QWORD *)v437 = 0;
  __p = 0uLL;
  v130 = *(_OWORD *)&v437[8];
  *((_QWORD *)v126 + 10) = v438;
  *((_OWORD *)v126 + 4) = v130;
  *(_QWORD *)&v437[8] = 0;
  *(_QWORD *)&v437[16] = 0;
  v438 = 0;
  v426 = v126 + 88;
  if ((v437[7] & 0x80000000) != 0)
    goto LABEL_291;
LABEL_295:
  if (SHIBYTE(v435) < 0)
LABEL_292:
    operator delete((void *)v434);
LABEL_296:
  v131 = sub_20EBA4AA4();
  if (*((char *)v131 + 23) < 0)
  {
    sub_20E860C04(v431, (void *)*v131, v131[1]);
  }
  else
  {
    v132 = *(_OWORD *)v131;
    v432 = v131[2];
    *(_OWORD *)v431 = v132;
  }
  v133 = HIBYTE(v432);
  if (v432 >= 0)
  {
    v134 = v431;
  }
  else
  {
    v133 = (uint64_t)v431[1];
    v134 = (void **)v431[0];
  }
  if (v133 >= 18)
  {
    v135 = (char *)v134 + v133;
    v136 = v134;
    do
    {
      v137 = (char *)memchr(v136, 67, v133 - 17);
      if (!v137)
        break;
      if (*(_QWORD *)v137 == 0x456C656E6E616843
        && *((_QWORD *)v137 + 1) == 0x696F763C726F7272
        && *((_WORD *)v137 + 8) == 15972)
      {
        if (v137 != v135 && v137 - (char *)v134 != -1)
          goto LABEL_340;
        break;
      }
      v136 = (void **)(v137 + 1);
      v133 = v135 - (char *)v136;
    }
    while (v135 - (char *)v136 >= 18);
  }
  *(_QWORD *)&v433 = v118 + 1;
  DWORD2(v433) = 3;
  v140 = SHIBYTE(v442);
  if (v442 >= 0)
    v141 = HIBYTE(v442);
  else
    v141 = *((_QWORD *)&__dst + 1);
  v142 = v141 + 6;
  if (v141 + 6 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v142 >= 0x17)
  {
    v144 = (v142 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v142 | 7) != 0x17)
      v144 = v142 | 7;
    v145 = v144 + 1;
    v143 = (__int128 *)operator new(v144 + 1);
    *((_QWORD *)&v434 + 1) = v141 + 6;
    v435 = v145 | 0x8000000000000000;
    *(_QWORD *)&v434 = v143;
  }
  else
  {
    v435 = 0;
    v434 = 0uLL;
    v143 = &v434;
    HIBYTE(v435) = v141 + 6;
    if (!v141)
      goto LABEL_332;
  }
  if (v140 >= 0)
    v146 = &__dst;
  else
    v146 = (__int128 *)__dst;
  memmove(v143, v146, v141);
LABEL_332:
  strcpy((char *)v143 + v141, ".Error");
  *(_WORD *)&v437[7] = 0;
  LOBYTE(__p) = 0;
  HIBYTE(v438) = 0;
  v147 = v426;
  if ((unint64_t)v426 >= v427)
  {
    v426 = sub_20EBA558C((char **)&v425, (uint64_t)&v433);
    if (SHIBYTE(v438) < 0)
    {
      operator delete(*(void **)&v437[8]);
      if ((v437[7] & 0x80000000) == 0)
        goto LABEL_339;
    }
    else if ((v437[7] & 0x80000000) == 0)
    {
      goto LABEL_339;
    }
LABEL_334:
    operator delete((void *)__p);
    if (SHIBYTE(v435) < 0)
      goto LABEL_335;
    goto LABEL_340;
  }
  v148 = v433;
  *((_DWORD *)v426 + 2) = DWORD2(v433);
  *(_QWORD *)v147 = v148;
  v149 = v434;
  *((_QWORD *)v147 + 4) = v435;
  *((_OWORD *)v147 + 1) = v149;
  v435 = 0;
  v434 = 0uLL;
  v150 = *(_QWORD *)v437;
  *(_OWORD *)(v147 + 40) = __p;
  *((_QWORD *)v147 + 7) = v150;
  *(_QWORD *)v437 = 0;
  __p = 0uLL;
  v151 = *(_OWORD *)&v437[8];
  *((_QWORD *)v147 + 10) = v438;
  *((_OWORD *)v147 + 4) = v151;
  *(_QWORD *)&v437[8] = 0;
  *(_QWORD *)&v437[16] = 0;
  v438 = 0;
  v426 = v147 + 88;
  if ((v437[7] & 0x80000000) != 0)
    goto LABEL_334;
LABEL_339:
  if (SHIBYTE(v435) < 0)
  {
LABEL_335:
    operator delete((void *)v434);
    v152 = *(std::__shared_weak_count **)(v4 + 472);
    if (!v152)
      goto LABEL_344;
    goto LABEL_341;
  }
LABEL_340:
  v152 = *(std::__shared_weak_count **)(v4 + 472);
  if (!v152)
  {
LABEL_344:
    v428 = 0;
    v429 = 0;
    v430 = 0;
    v156 = 0;
    goto LABEL_361;
  }
LABEL_341:
  v153 = std::__shared_weak_count::lock(v152);
  *((_QWORD *)&v433 + 1) = v153;
  if (!v153)
    goto LABEL_344;
  v154 = v153;
  v155 = *(_QWORD *)(v4 + 464);
  *(_QWORD *)&v433 = v155;
  if (v155)
  {
    (*(void (**)(_QWORD **__return_ptr))(*(_QWORD *)v155 + 24))(&v428);
  }
  else
  {
    v428 = 0;
    v429 = 0;
    v430 = 0;
  }
  v157 = (unint64_t *)&v154->__shared_owners_;
  do
    v158 = __ldaxr(v157);
  while (__stlxr(v158 - 1, v157));
  if (v158)
  {
    v156 = v428;
    v159 = v429;
    if (v428 == v429)
      goto LABEL_361;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v154->__on_zero_shared)(v154);
    std::__shared_weak_count::__release_weak(v154);
    v156 = v428;
    v159 = v429;
    if (v428 == v429)
      goto LABEL_361;
  }
  do
  {
    *(_QWORD *)&v433 = v118;
    *((_QWORD *)&v433 + 1) = *v156;
    v435 = 0;
    v434 = 0uLL;
    v161 = v423;
    if ((unint64_t)v423 < v424)
    {
      *(_OWORD *)v423 = v433;
      v160 = v434;
      *((_QWORD *)v161 + 4) = v435;
      *((_OWORD *)v161 + 1) = v160;
      v423 = v161 + 40;
    }
    else
    {
      v423 = sub_20EBA5F8C(&v422, (uint64_t)&v433);
      if (SHIBYTE(v435) < 0)
        operator delete((void *)v434);
    }
    ++v156;
  }
  while (v156 != v159);
  v156 = v428;
LABEL_361:
  if (v156)
  {
    v429 = v156;
    operator delete(v156);
  }
  v162 = *(std::__shared_weak_count **)(v4 + 472);
  if (!v162 || (v163 = std::__shared_weak_count::lock(v162), (*((_QWORD *)&v433 + 1) = v163) == 0))
  {
    v428 = 0;
    v429 = 0;
    v430 = 0;
    v166 = 0;
    goto LABEL_382;
  }
  v164 = v163;
  v165 = *(_QWORD *)(v4 + 464);
  *(_QWORD *)&v433 = v165;
  if (v165)
  {
    (*(void (**)(_QWORD **__return_ptr))(*(_QWORD *)v165 + 32))(&v428);
  }
  else
  {
    v428 = 0;
    v429 = 0;
    v430 = 0;
  }
  v167 = (unint64_t *)&v164->__shared_owners_;
  do
    v168 = __ldaxr(v167);
  while (__stlxr(v168 - 1, v167));
  if (v168)
  {
    v166 = v428;
    v169 = v429;
    if (v428 == v429)
      goto LABEL_382;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v164->__on_zero_shared)(v164);
    std::__shared_weak_count::__release_weak(v164);
    v166 = v428;
    v169 = v429;
    if (v428 == v429)
      goto LABEL_382;
  }
  v170 = v118 + 1;
  do
  {
    *(_QWORD *)&v433 = v170;
    *((_QWORD *)&v433 + 1) = *v166;
    v435 = 0;
    v434 = 0uLL;
    v172 = v423;
    if ((unint64_t)v423 < v424)
    {
      *(_OWORD *)v423 = v433;
      v171 = v434;
      *((_QWORD *)v172 + 4) = v435;
      *((_OWORD *)v172 + 1) = v171;
      v423 = v172 + 40;
    }
    else
    {
      v423 = sub_20EBA5F8C(&v422, (uint64_t)&v433);
      if (SHIBYTE(v435) < 0)
        operator delete((void *)v434);
    }
    ++v166;
  }
  while (v166 != v169);
  v166 = v428;
LABEL_382:
  if (v166)
  {
    v429 = v166;
    operator delete(v166);
  }
  if (SHIBYTE(v432) < 0)
  {
    operator delete(v431[0]);
    if ((SHIBYTE(v440) & 0x80000000) == 0)
    {
LABEL_386:
      if ((SHIBYTE(v442) & 0x80000000) == 0)
        goto LABEL_387;
LABEL_391:
      operator delete((void *)__dst);
      if ((*(char *)(v4 + 535) & 0x80000000) == 0)
        goto LABEL_388;
LABEL_392:
      sub_20E860C04(&__dst, *(void **)(v4 + 512), *(_QWORD *)(v4 + 520));
      goto LABEL_393;
    }
  }
  else if ((SHIBYTE(v440) & 0x80000000) == 0)
  {
    goto LABEL_386;
  }
  operator delete((void *)v439);
  if (SHIBYTE(v442) < 0)
    goto LABEL_391;
LABEL_387:
  if (*(char *)(v4 + 535) < 0)
    goto LABEL_392;
LABEL_388:
  __dst = *(_OWORD *)(v4 + 512);
  v442 = *(_QWORD *)(v4 + 528);
LABEL_393:
  v173 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v4 + 600) + 48))(*(_QWORD *)(v4 + 600));
  v174 = atomic_load((unsigned __int8 *)&qword_254A60BE8);
  if ((v174 & 1) != 0 || !__cxa_guard_acquire(&qword_254A60BE8))
    goto LABEL_394;
  sub_20EFB3F0C();
  v399 = byte_254A6150F;
  if (byte_254A6150F >= 0)
    v400 = byte_254A6150F;
  else
    v400 = qword_254A61500;
  v401 = v400 + 1;
  if (v400 + 1 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v401 >= 0x17)
  {
    v410 = (v401 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v401 | 7) != 0x17)
      v410 = v401 | 7;
    v411 = v410 + 1;
    v402 = (__int128 *)operator new(v410 + 1);
    *((_QWORD *)&xmmword_254A614E0 + 1) = v400 + 1;
    unk_254A614F0 = v411 | 0x8000000000000000;
    *(_QWORD *)&xmmword_254A614E0 = v402;
    goto LABEL_1049;
  }
  v402 = &xmmword_254A614E0;
  unk_254A614F0 = 0;
  xmmword_254A614E0 = 0uLL;
  byte_254A614F7 = v400 + 1;
  if (v400)
  {
LABEL_1049:
    if (v399 >= 0)
      v412 = &qword_254A614F8;
    else
      v412 = (uint64_t *)qword_254A614F8;
    memmove(v402, v412, v400);
  }
  *(_WORD *)((char *)v402 + v400) = 38;
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A614E0, &dword_20E81F000);
  __cxa_guard_release(&qword_254A60BE8);
LABEL_394:
  if (byte_254A614F7 < 0)
  {
    sub_20E860C04(&v439, (void *)xmmword_254A614E0, *((unint64_t *)&xmmword_254A614E0 + 1));
  }
  else
  {
    v439 = xmmword_254A614E0;
    v440 = unk_254A614F0;
  }
  v175 = HIBYTE(v440);
  if (v440 >= 0)
  {
    v176 = &v439;
  }
  else
  {
    v175 = *((_QWORD *)&v439 + 1);
    v176 = (__int128 *)v439;
  }
  if (v175 >= 4)
  {
    v177 = (char *)v176 + v175;
    v178 = v176;
    do
    {
      v179 = (char *)memchr(v178, 118, v175 - 3);
      if (!v179)
        break;
      if (*(_DWORD *)v179 == 1684631414)
      {
        if (v179 == v177 || v179 - (char *)v176 == -1)
          break;
        *(_QWORD *)&v433 = v173;
        DWORD2(v433) = 4;
        if (SHIBYTE(v442) < 0)
        {
          sub_20E860C04(&v434, (void *)__dst, *((unint64_t *)&__dst + 1));
        }
        else
        {
          v434 = __dst;
          v435 = v442;
        }
        if (*(char *)(v4 + 559) < 0)
        {
          sub_20E860C04(&__p, *(void **)(v4 + 536), *(_QWORD *)(v4 + 544));
        }
        else
        {
          __p = *(_OWORD *)(v4 + 536);
          *(_QWORD *)v437 = *(_QWORD *)(v4 + 552);
        }
        sub_20EFB4CC4();
        if (byte_254A61677 < 0)
        {
          sub_20E860C04(&v437[8], (void *)xmmword_254A61660, *((unint64_t *)&xmmword_254A61660 + 1));
        }
        else
        {
          *(_OWORD *)&v437[8] = xmmword_254A61660;
          v438 = unk_254A61670;
        }
        v180 = v426;
        if ((unint64_t)v426 < v427)
          goto LABEL_420;
        goto LABEL_423;
      }
      v178 = (__int128 *)(v179 + 1);
      v175 = v177 - (char *)v178;
    }
    while (v177 - (char *)v178 >= 4);
  }
  *(_QWORD *)&v433 = v173;
  DWORD2(v433) = 2;
  if (SHIBYTE(v442) < 0)
  {
    sub_20E860C04(&v434, (void *)__dst, *((unint64_t *)&__dst + 1));
  }
  else
  {
    v434 = __dst;
    v435 = v442;
  }
  if (*(char *)(v4 + 559) < 0)
  {
    sub_20E860C04(&__p, *(void **)(v4 + 536), *(_QWORD *)(v4 + 544));
  }
  else
  {
    __p = *(_OWORD *)(v4 + 536);
    *(_QWORD *)v437 = *(_QWORD *)(v4 + 552);
  }
  sub_20EFB4CC4();
  if (byte_254A61677 < 0)
  {
    sub_20E860C04(&v437[8], (void *)xmmword_254A61660, *((unint64_t *)&xmmword_254A61660 + 1));
  }
  else
  {
    *(_OWORD *)&v437[8] = xmmword_254A61660;
    v438 = unk_254A61670;
  }
  v180 = v426;
  if ((unint64_t)v426 >= v427)
  {
LABEL_423:
    v426 = sub_20EBA558C((char **)&v425, (uint64_t)&v433);
    if (SHIBYTE(v438) < 0)
    {
      operator delete(*(void **)&v437[8]);
      if ((v437[7] & 0x80000000) == 0)
        goto LABEL_425;
    }
    else if ((v437[7] & 0x80000000) == 0)
    {
      goto LABEL_425;
    }
LABEL_421:
    operator delete((void *)__p);
    if ((SHIBYTE(v435) & 0x80000000) == 0)
      goto LABEL_426;
    goto LABEL_422;
  }
LABEL_420:
  v181 = v433;
  *((_DWORD *)v180 + 2) = DWORD2(v433);
  *(_QWORD *)v180 = v181;
  v182 = v434;
  *((_QWORD *)v180 + 4) = v435;
  *((_OWORD *)v180 + 1) = v182;
  v435 = 0;
  v434 = 0uLL;
  v183 = *(_QWORD *)v437;
  *(_OWORD *)(v180 + 40) = __p;
  *((_QWORD *)v180 + 7) = v183;
  *(_QWORD *)v437 = 0;
  __p = 0uLL;
  v184 = *(_OWORD *)&v437[8];
  *((_QWORD *)v180 + 10) = v438;
  *((_OWORD *)v180 + 4) = v184;
  *(_QWORD *)&v437[8] = 0;
  *(_QWORD *)&v437[16] = 0;
  v438 = 0;
  v426 = v180 + 88;
  if ((v437[7] & 0x80000000) != 0)
    goto LABEL_421;
LABEL_425:
  if (SHIBYTE(v435) < 0)
LABEL_422:
    operator delete((void *)v434);
LABEL_426:
  v185 = sub_20EBA4AA4();
  if (*((char *)v185 + 23) < 0)
  {
    sub_20E860C04(v431, (void *)*v185, v185[1]);
  }
  else
  {
    v186 = *(_OWORD *)v185;
    v432 = v185[2];
    *(_OWORD *)v431 = v186;
  }
  v187 = HIBYTE(v432);
  if (v432 >= 0)
  {
    v188 = v431;
  }
  else
  {
    v187 = (uint64_t)v431[1];
    v188 = (void **)v431[0];
  }
  if (v187 >= 18)
  {
    v189 = (char *)v188 + v187;
    v190 = v188;
    do
    {
      v191 = (char *)memchr(v190, 67, v187 - 17);
      if (!v191)
        break;
      if (*(_QWORD *)v191 == 0x456C656E6E616843
        && *((_QWORD *)v191 + 1) == 0x696F763C726F7272
        && *((_WORD *)v191 + 8) == 15972)
      {
        if (v191 != v189 && v191 - (char *)v188 != -1)
          goto LABEL_470;
        break;
      }
      v190 = (void **)(v191 + 1);
      v187 = v189 - (char *)v190;
    }
    while (v189 - (char *)v190 >= 18);
  }
  *(_QWORD *)&v433 = v173 + 1;
  DWORD2(v433) = 3;
  v194 = SHIBYTE(v442);
  if (v442 >= 0)
    v195 = HIBYTE(v442);
  else
    v195 = *((_QWORD *)&__dst + 1);
  v196 = v195 + 6;
  if (v195 + 6 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v196 >= 0x17)
  {
    v198 = (v196 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v196 | 7) != 0x17)
      v198 = v196 | 7;
    v199 = v198 + 1;
    v197 = (__int128 *)operator new(v198 + 1);
    *((_QWORD *)&v434 + 1) = v195 + 6;
    v435 = v199 | 0x8000000000000000;
    *(_QWORD *)&v434 = v197;
  }
  else
  {
    v435 = 0;
    v434 = 0uLL;
    v197 = &v434;
    HIBYTE(v435) = v195 + 6;
    if (!v195)
      goto LABEL_462;
  }
  if (v194 >= 0)
    v200 = &__dst;
  else
    v200 = (__int128 *)__dst;
  memmove(v197, v200, v195);
LABEL_462:
  strcpy((char *)v197 + v195, ".Error");
  *(_WORD *)&v437[7] = 0;
  LOBYTE(__p) = 0;
  HIBYTE(v438) = 0;
  v201 = v426;
  if ((unint64_t)v426 >= v427)
  {
    v426 = sub_20EBA558C((char **)&v425, (uint64_t)&v433);
    if (SHIBYTE(v438) < 0)
    {
      operator delete(*(void **)&v437[8]);
      if ((v437[7] & 0x80000000) == 0)
        goto LABEL_469;
    }
    else if ((v437[7] & 0x80000000) == 0)
    {
      goto LABEL_469;
    }
LABEL_464:
    operator delete((void *)__p);
    if (SHIBYTE(v435) < 0)
      goto LABEL_465;
    goto LABEL_470;
  }
  v202 = v433;
  *((_DWORD *)v426 + 2) = DWORD2(v433);
  *(_QWORD *)v201 = v202;
  v203 = v434;
  *((_QWORD *)v201 + 4) = v435;
  *((_OWORD *)v201 + 1) = v203;
  v435 = 0;
  v434 = 0uLL;
  v204 = *(_QWORD *)v437;
  *(_OWORD *)(v201 + 40) = __p;
  *((_QWORD *)v201 + 7) = v204;
  *(_QWORD *)v437 = 0;
  __p = 0uLL;
  v205 = *(_OWORD *)&v437[8];
  *((_QWORD *)v201 + 10) = v438;
  *((_OWORD *)v201 + 4) = v205;
  *(_QWORD *)&v437[8] = 0;
  *(_QWORD *)&v437[16] = 0;
  v438 = 0;
  v426 = v201 + 88;
  if ((v437[7] & 0x80000000) != 0)
    goto LABEL_464;
LABEL_469:
  if (SHIBYTE(v435) < 0)
  {
LABEL_465:
    operator delete((void *)v434);
    v206 = *(std::__shared_weak_count **)(v4 + 640);
    if (!v206)
      goto LABEL_474;
    goto LABEL_471;
  }
LABEL_470:
  v206 = *(std::__shared_weak_count **)(v4 + 640);
  if (!v206)
  {
LABEL_474:
    v428 = 0;
    v429 = 0;
    v430 = 0;
    v210 = 0;
    goto LABEL_491;
  }
LABEL_471:
  v207 = std::__shared_weak_count::lock(v206);
  *((_QWORD *)&v433 + 1) = v207;
  if (!v207)
    goto LABEL_474;
  v208 = v207;
  v209 = *(_QWORD *)(v4 + 632);
  *(_QWORD *)&v433 = v209;
  if (v209)
  {
    (*(void (**)(_QWORD **__return_ptr))(*(_QWORD *)v209 + 24))(&v428);
  }
  else
  {
    v428 = 0;
    v429 = 0;
    v430 = 0;
  }
  v211 = (unint64_t *)&v208->__shared_owners_;
  do
    v212 = __ldaxr(v211);
  while (__stlxr(v212 - 1, v211));
  if (v212)
  {
    v210 = v428;
    v213 = v429;
    if (v428 == v429)
      goto LABEL_491;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v208->__on_zero_shared)(v208);
    std::__shared_weak_count::__release_weak(v208);
    v210 = v428;
    v213 = v429;
    if (v428 == v429)
      goto LABEL_491;
  }
  do
  {
    *(_QWORD *)&v433 = v173;
    *((_QWORD *)&v433 + 1) = *v210;
    v435 = 0;
    v434 = 0uLL;
    v215 = v423;
    if ((unint64_t)v423 < v424)
    {
      *(_OWORD *)v423 = v433;
      v214 = v434;
      *((_QWORD *)v215 + 4) = v435;
      *((_OWORD *)v215 + 1) = v214;
      v423 = v215 + 40;
    }
    else
    {
      v423 = sub_20EBA5F8C(&v422, (uint64_t)&v433);
      if (SHIBYTE(v435) < 0)
        operator delete((void *)v434);
    }
    ++v210;
  }
  while (v210 != v213);
  v210 = v428;
LABEL_491:
  if (v210)
  {
    v429 = v210;
    operator delete(v210);
  }
  v216 = *(std::__shared_weak_count **)(v4 + 640);
  if (!v216 || (v217 = std::__shared_weak_count::lock(v216), (*((_QWORD *)&v433 + 1) = v217) == 0))
  {
    v428 = 0;
    v429 = 0;
    v430 = 0;
    v220 = 0;
    goto LABEL_512;
  }
  v218 = v217;
  v219 = *(_QWORD *)(v4 + 632);
  *(_QWORD *)&v433 = v219;
  if (v219)
  {
    (*(void (**)(_QWORD **__return_ptr))(*(_QWORD *)v219 + 32))(&v428);
  }
  else
  {
    v428 = 0;
    v429 = 0;
    v430 = 0;
  }
  v221 = (unint64_t *)&v218->__shared_owners_;
  do
    v222 = __ldaxr(v221);
  while (__stlxr(v222 - 1, v221));
  if (v222)
  {
    v220 = v428;
    v223 = v429;
    if (v428 == v429)
      goto LABEL_512;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v218->__on_zero_shared)(v218);
    std::__shared_weak_count::__release_weak(v218);
    v220 = v428;
    v223 = v429;
    if (v428 == v429)
      goto LABEL_512;
  }
  v224 = v173 + 1;
  do
  {
    *(_QWORD *)&v433 = v224;
    *((_QWORD *)&v433 + 1) = *v220;
    v435 = 0;
    v434 = 0uLL;
    v226 = v423;
    if ((unint64_t)v423 < v424)
    {
      *(_OWORD *)v423 = v433;
      v225 = v434;
      *((_QWORD *)v226 + 4) = v435;
      *((_OWORD *)v226 + 1) = v225;
      v423 = v226 + 40;
    }
    else
    {
      v423 = sub_20EBA5F8C(&v422, (uint64_t)&v433);
      if (SHIBYTE(v435) < 0)
        operator delete((void *)v434);
    }
    ++v220;
  }
  while (v220 != v223);
  v220 = v428;
LABEL_512:
  if (v220)
  {
    v429 = v220;
    operator delete(v220);
  }
  if (SHIBYTE(v432) < 0)
  {
    operator delete(v431[0]);
    if ((SHIBYTE(v440) & 0x80000000) == 0)
    {
LABEL_516:
      if ((SHIBYTE(v442) & 0x80000000) == 0)
        goto LABEL_517;
LABEL_521:
      operator delete((void *)__dst);
      if ((*(char *)(v4 + 703) & 0x80000000) == 0)
        goto LABEL_518;
LABEL_522:
      sub_20E860C04(&__dst, *(void **)(v4 + 680), *(_QWORD *)(v4 + 688));
      goto LABEL_523;
    }
  }
  else if ((SHIBYTE(v440) & 0x80000000) == 0)
  {
    goto LABEL_516;
  }
  operator delete((void *)v439);
  if (SHIBYTE(v442) < 0)
    goto LABEL_521;
LABEL_517:
  if (*(char *)(v4 + 703) < 0)
    goto LABEL_522;
LABEL_518:
  __dst = *(_OWORD *)(v4 + 680);
  v442 = *(_QWORD *)(v4 + 696);
LABEL_523:
  v227 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v4 + 768) + 48))(*(_QWORD *)(v4 + 768));
  v228 = atomic_load((unsigned __int8 *)&qword_254A60C80);
  if ((v228 & 1) != 0 || !__cxa_guard_acquire(&qword_254A60C80))
    goto LABEL_524;
  sub_20EFB4E7C();
  v403 = byte_254A616D7;
  if (byte_254A616D7 >= 0)
    v404 = byte_254A616D7;
  else
    v404 = qword_254A616C8;
  v405 = v404 + 1;
  if (v404 + 1 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v405 >= 0x17)
  {
    v413 = (v405 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v405 | 7) != 0x17)
      v413 = v405 | 7;
    v414 = v413 + 1;
    v406 = (__int128 *)operator new(v413 + 1);
    *((_QWORD *)&xmmword_254A616A8 + 1) = v404 + 1;
    unk_254A616B8 = v414 | 0x8000000000000000;
    *(_QWORD *)&xmmword_254A616A8 = v406;
    goto LABEL_1057;
  }
  unk_254A616B8 = 0;
  xmmword_254A616A8 = 0uLL;
  v406 = &xmmword_254A616A8;
  byte_254A616BF = v404 + 1;
  if (v404)
  {
LABEL_1057:
    if (v403 >= 0)
      v415 = &qword_254A616C0;
    else
      v415 = (uint64_t *)qword_254A616C0;
    memmove(v406, v415, v404);
  }
  *(_WORD *)((char *)v406 + v404) = 38;
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A616A8, &dword_20E81F000);
  __cxa_guard_release(&qword_254A60C80);
LABEL_524:
  if (byte_254A616BF < 0)
  {
    sub_20E860C04(&v439, (void *)xmmword_254A616A8, *((unint64_t *)&xmmword_254A616A8 + 1));
  }
  else
  {
    v439 = xmmword_254A616A8;
    v440 = unk_254A616B8;
  }
  v229 = HIBYTE(v440);
  if (v440 >= 0)
  {
    v230 = &v439;
  }
  else
  {
    v229 = *((_QWORD *)&v439 + 1);
    v230 = (__int128 *)v439;
  }
  if (v229 >= 4)
  {
    v231 = (char *)v230 + v229;
    v232 = v230;
    do
    {
      v233 = (char *)memchr(v232, 118, v229 - 3);
      if (!v233)
        break;
      if (*(_DWORD *)v233 == 1684631414)
      {
        if (v233 == v231 || v233 - (char *)v230 == -1)
          break;
        *(_QWORD *)&v433 = v227;
        DWORD2(v433) = 4;
        if (SHIBYTE(v442) < 0)
        {
          sub_20E860C04(&v434, (void *)__dst, *((unint64_t *)&__dst + 1));
        }
        else
        {
          v434 = __dst;
          v435 = v442;
        }
        if (*(char *)(v4 + 727) < 0)
        {
          sub_20E860C04(&__p, *(void **)(v4 + 704), *(_QWORD *)(v4 + 712));
        }
        else
        {
          __p = *(_OWORD *)(v4 + 704);
          *(_QWORD *)v437 = *(_QWORD *)(v4 + 720);
        }
        sub_20EFB5638();
        if (byte_254A617AF < 0)
        {
          sub_20E860C04(&v437[8], (void *)xmmword_254A61798, *((unint64_t *)&xmmword_254A61798 + 1));
        }
        else
        {
          *(_OWORD *)&v437[8] = xmmword_254A61798;
          v438 = unk_254A617A8;
        }
        v234 = v426;
        if ((unint64_t)v426 < v427)
          goto LABEL_550;
        goto LABEL_553;
      }
      v232 = (__int128 *)(v233 + 1);
      v229 = v231 - (char *)v232;
    }
    while (v231 - (char *)v232 >= 4);
  }
  *(_QWORD *)&v433 = v227;
  DWORD2(v433) = 2;
  if (SHIBYTE(v442) < 0)
  {
    sub_20E860C04(&v434, (void *)__dst, *((unint64_t *)&__dst + 1));
  }
  else
  {
    v434 = __dst;
    v435 = v442;
  }
  if (*(char *)(v4 + 727) < 0)
  {
    sub_20E860C04(&__p, *(void **)(v4 + 704), *(_QWORD *)(v4 + 712));
  }
  else
  {
    __p = *(_OWORD *)(v4 + 704);
    *(_QWORD *)v437 = *(_QWORD *)(v4 + 720);
  }
  sub_20EFB5638();
  if (byte_254A617AF < 0)
  {
    sub_20E860C04(&v437[8], (void *)xmmword_254A61798, *((unint64_t *)&xmmword_254A61798 + 1));
  }
  else
  {
    *(_OWORD *)&v437[8] = xmmword_254A61798;
    v438 = unk_254A617A8;
  }
  v234 = v426;
  if ((unint64_t)v426 >= v427)
  {
LABEL_553:
    v426 = sub_20EBA558C((char **)&v425, (uint64_t)&v433);
    if (SHIBYTE(v438) < 0)
    {
      operator delete(*(void **)&v437[8]);
      if ((v437[7] & 0x80000000) == 0)
        goto LABEL_555;
    }
    else if ((v437[7] & 0x80000000) == 0)
    {
      goto LABEL_555;
    }
LABEL_551:
    operator delete((void *)__p);
    if ((SHIBYTE(v435) & 0x80000000) == 0)
      goto LABEL_556;
    goto LABEL_552;
  }
LABEL_550:
  v235 = v433;
  *((_DWORD *)v234 + 2) = DWORD2(v433);
  *(_QWORD *)v234 = v235;
  v236 = v434;
  *((_QWORD *)v234 + 4) = v435;
  *((_OWORD *)v234 + 1) = v236;
  v435 = 0;
  v434 = 0uLL;
  v237 = *(_QWORD *)v437;
  *(_OWORD *)(v234 + 40) = __p;
  *((_QWORD *)v234 + 7) = v237;
  *(_QWORD *)v437 = 0;
  __p = 0uLL;
  v238 = *(_OWORD *)&v437[8];
  *((_QWORD *)v234 + 10) = v438;
  *((_OWORD *)v234 + 4) = v238;
  *(_QWORD *)&v437[8] = 0;
  *(_QWORD *)&v437[16] = 0;
  v438 = 0;
  v426 = v234 + 88;
  if ((v437[7] & 0x80000000) != 0)
    goto LABEL_551;
LABEL_555:
  if (SHIBYTE(v435) < 0)
LABEL_552:
    operator delete((void *)v434);
LABEL_556:
  v239 = sub_20EBA4AA4();
  if (*((char *)v239 + 23) < 0)
  {
    sub_20E860C04(v431, (void *)*v239, v239[1]);
  }
  else
  {
    v240 = *(_OWORD *)v239;
    v432 = v239[2];
    *(_OWORD *)v431 = v240;
  }
  v241 = HIBYTE(v432);
  if (v432 >= 0)
  {
    v242 = v431;
  }
  else
  {
    v241 = (uint64_t)v431[1];
    v242 = (void **)v431[0];
  }
  if (v241 >= 18)
  {
    v243 = (char *)v242 + v241;
    v244 = v242;
    do
    {
      v245 = (char *)memchr(v244, 67, v241 - 17);
      if (!v245)
        break;
      if (*(_QWORD *)v245 == 0x456C656E6E616843
        && *((_QWORD *)v245 + 1) == 0x696F763C726F7272
        && *((_WORD *)v245 + 8) == 15972)
      {
        if (v245 != v243 && v245 - (char *)v242 != -1)
          goto LABEL_600;
        break;
      }
      v244 = (void **)(v245 + 1);
      v241 = v243 - (char *)v244;
    }
    while (v243 - (char *)v244 >= 18);
  }
  *(_QWORD *)&v433 = v227 + 1;
  DWORD2(v433) = 3;
  v248 = SHIBYTE(v442);
  if (v442 >= 0)
    v249 = HIBYTE(v442);
  else
    v249 = *((_QWORD *)&__dst + 1);
  v250 = v249 + 6;
  if (v249 + 6 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v250 >= 0x17)
  {
    v252 = (v250 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v250 | 7) != 0x17)
      v252 = v250 | 7;
    v253 = v252 + 1;
    v251 = (__int128 *)operator new(v252 + 1);
    *((_QWORD *)&v434 + 1) = v249 + 6;
    v435 = v253 | 0x8000000000000000;
    *(_QWORD *)&v434 = v251;
  }
  else
  {
    v435 = 0;
    v434 = 0uLL;
    v251 = &v434;
    HIBYTE(v435) = v249 + 6;
    if (!v249)
      goto LABEL_592;
  }
  if (v248 >= 0)
    v254 = &__dst;
  else
    v254 = (__int128 *)__dst;
  memmove(v251, v254, v249);
LABEL_592:
  strcpy((char *)v251 + v249, ".Error");
  *(_WORD *)&v437[7] = 0;
  LOBYTE(__p) = 0;
  HIBYTE(v438) = 0;
  v255 = v426;
  if ((unint64_t)v426 >= v427)
  {
    v426 = sub_20EBA558C((char **)&v425, (uint64_t)&v433);
    if (SHIBYTE(v438) < 0)
    {
      operator delete(*(void **)&v437[8]);
      if ((v437[7] & 0x80000000) == 0)
        goto LABEL_599;
    }
    else if ((v437[7] & 0x80000000) == 0)
    {
      goto LABEL_599;
    }
LABEL_594:
    operator delete((void *)__p);
    if (SHIBYTE(v435) < 0)
      goto LABEL_595;
    goto LABEL_600;
  }
  v256 = v433;
  *((_DWORD *)v426 + 2) = DWORD2(v433);
  *(_QWORD *)v255 = v256;
  v257 = v434;
  *((_QWORD *)v255 + 4) = v435;
  *((_OWORD *)v255 + 1) = v257;
  v435 = 0;
  v434 = 0uLL;
  v258 = *(_QWORD *)v437;
  *(_OWORD *)(v255 + 40) = __p;
  *((_QWORD *)v255 + 7) = v258;
  *(_QWORD *)v437 = 0;
  __p = 0uLL;
  v259 = *(_OWORD *)&v437[8];
  *((_QWORD *)v255 + 10) = v438;
  *((_OWORD *)v255 + 4) = v259;
  *(_QWORD *)&v437[8] = 0;
  *(_QWORD *)&v437[16] = 0;
  v438 = 0;
  v426 = v255 + 88;
  if ((v437[7] & 0x80000000) != 0)
    goto LABEL_594;
LABEL_599:
  if (SHIBYTE(v435) < 0)
  {
LABEL_595:
    operator delete((void *)v434);
    v260 = *(std::__shared_weak_count **)(v4 + 808);
    if (!v260)
      goto LABEL_604;
    goto LABEL_601;
  }
LABEL_600:
  v260 = *(std::__shared_weak_count **)(v4 + 808);
  if (!v260)
  {
LABEL_604:
    v428 = 0;
    v429 = 0;
    v430 = 0;
    v264 = 0;
    goto LABEL_621;
  }
LABEL_601:
  v261 = std::__shared_weak_count::lock(v260);
  *((_QWORD *)&v433 + 1) = v261;
  if (!v261)
    goto LABEL_604;
  v262 = v261;
  v263 = *(_QWORD *)(v4 + 800);
  *(_QWORD *)&v433 = v263;
  if (v263)
  {
    (*(void (**)(_QWORD **__return_ptr))(*(_QWORD *)v263 + 24))(&v428);
  }
  else
  {
    v428 = 0;
    v429 = 0;
    v430 = 0;
  }
  v265 = (unint64_t *)&v262->__shared_owners_;
  do
    v266 = __ldaxr(v265);
  while (__stlxr(v266 - 1, v265));
  if (v266)
  {
    v264 = v428;
    v267 = v429;
    if (v428 == v429)
      goto LABEL_621;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v262->__on_zero_shared)(v262);
    std::__shared_weak_count::__release_weak(v262);
    v264 = v428;
    v267 = v429;
    if (v428 == v429)
      goto LABEL_621;
  }
  do
  {
    *(_QWORD *)&v433 = v227;
    *((_QWORD *)&v433 + 1) = *v264;
    v435 = 0;
    v434 = 0uLL;
    v269 = v423;
    if ((unint64_t)v423 < v424)
    {
      *(_OWORD *)v423 = v433;
      v268 = v434;
      *((_QWORD *)v269 + 4) = v435;
      *((_OWORD *)v269 + 1) = v268;
      v423 = v269 + 40;
    }
    else
    {
      v423 = sub_20EBA5F8C(&v422, (uint64_t)&v433);
      if (SHIBYTE(v435) < 0)
        operator delete((void *)v434);
    }
    ++v264;
  }
  while (v264 != v267);
  v264 = v428;
LABEL_621:
  if (v264)
  {
    v429 = v264;
    operator delete(v264);
  }
  v270 = *(std::__shared_weak_count **)(v4 + 808);
  if (!v270 || (v271 = std::__shared_weak_count::lock(v270), (*((_QWORD *)&v433 + 1) = v271) == 0))
  {
    v428 = 0;
    v429 = 0;
    v430 = 0;
    v274 = 0;
    goto LABEL_642;
  }
  v272 = v271;
  v273 = *(_QWORD *)(v4 + 800);
  *(_QWORD *)&v433 = v273;
  if (v273)
  {
    (*(void (**)(_QWORD **__return_ptr))(*(_QWORD *)v273 + 32))(&v428);
  }
  else
  {
    v428 = 0;
    v429 = 0;
    v430 = 0;
  }
  v275 = (unint64_t *)&v272->__shared_owners_;
  do
    v276 = __ldaxr(v275);
  while (__stlxr(v276 - 1, v275));
  if (v276)
  {
    v274 = v428;
    v277 = v429;
    if (v428 == v429)
      goto LABEL_642;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v272->__on_zero_shared)(v272);
    std::__shared_weak_count::__release_weak(v272);
    v274 = v428;
    v277 = v429;
    if (v428 == v429)
      goto LABEL_642;
  }
  v278 = v227 + 1;
  do
  {
    *(_QWORD *)&v433 = v278;
    *((_QWORD *)&v433 + 1) = *v274;
    v435 = 0;
    v434 = 0uLL;
    v280 = v423;
    if ((unint64_t)v423 < v424)
    {
      *(_OWORD *)v423 = v433;
      v279 = v434;
      *((_QWORD *)v280 + 4) = v435;
      *((_OWORD *)v280 + 1) = v279;
      v423 = v280 + 40;
    }
    else
    {
      v423 = sub_20EBA5F8C(&v422, (uint64_t)&v433);
      if (SHIBYTE(v435) < 0)
        operator delete((void *)v434);
    }
    ++v274;
  }
  while (v274 != v277);
  v274 = v428;
LABEL_642:
  if (v274)
  {
    v429 = v274;
    operator delete(v274);
  }
  if (SHIBYTE(v432) < 0)
  {
    operator delete(v431[0]);
    if ((SHIBYTE(v440) & 0x80000000) == 0)
    {
LABEL_646:
      if ((SHIBYTE(v442) & 0x80000000) == 0)
        goto LABEL_647;
LABEL_651:
      operator delete((void *)__dst);
      if ((*(char *)(v4 + 871) & 0x80000000) == 0)
        goto LABEL_648;
      goto LABEL_652;
    }
  }
  else if ((SHIBYTE(v440) & 0x80000000) == 0)
  {
    goto LABEL_646;
  }
  operator delete((void *)v439);
  if (SHIBYTE(v442) < 0)
    goto LABEL_651;
LABEL_647:
  if ((*(char *)(v4 + 871) & 0x80000000) == 0)
  {
LABEL_648:
    __dst = *(_OWORD *)(v4 + 848);
    v442 = *(_QWORD *)(v4 + 864);
    goto LABEL_653;
  }
LABEL_652:
  sub_20E860C04(&__dst, *(void **)(v4 + 848), *(_QWORD *)(v4 + 856));
LABEL_653:
  v281 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v4 + 936) + 48))(*(_QWORD *)(v4 + 936));
  sub_20EFAFE38();
  if (byte_254A60D2F < 0)
  {
    sub_20E860C04(&v439, (void *)xmmword_254A60D18, *((unint64_t *)&xmmword_254A60D18 + 1));
  }
  else
  {
    v439 = xmmword_254A60D18;
    v440 = unk_254A60D28;
  }
  v282 = HIBYTE(v440);
  if (v440 >= 0)
  {
    v283 = &v439;
  }
  else
  {
    v282 = *((_QWORD *)&v439 + 1);
    v283 = (__int128 *)v439;
  }
  if (v282 >= 4)
  {
    v284 = (char *)v283 + v282;
    v285 = v283;
    do
    {
      v286 = (char *)memchr(v285, 118, v282 - 3);
      if (!v286)
        break;
      if (*(_DWORD *)v286 == 1684631414)
      {
        if (v286 == v284 || v286 - (char *)v283 == -1)
          break;
        *(_QWORD *)&v433 = v281;
        DWORD2(v433) = 4;
        if (SHIBYTE(v442) < 0)
        {
          sub_20E860C04(&v434, (void *)__dst, *((unint64_t *)&__dst + 1));
        }
        else
        {
          v434 = __dst;
          v435 = v442;
        }
        if (*(char *)(v4 + 895) < 0)
        {
          sub_20E860C04(&__p, *(void **)(v4 + 872), *(_QWORD *)(v4 + 880));
        }
        else
        {
          __p = *(_OWORD *)(v4 + 872);
          *(_QWORD *)v437 = *(_QWORD *)(v4 + 888);
        }
        sub_20EFB57F0();
        if (byte_254A617F7 < 0)
        {
          sub_20E860C04(&v437[8], (void *)xmmword_254A617E0, *((unint64_t *)&xmmword_254A617E0 + 1));
        }
        else
        {
          *(_OWORD *)&v437[8] = xmmword_254A617E0;
          v438 = unk_254A617F0;
        }
        v287 = v426;
        if ((unint64_t)v426 < v427)
          goto LABEL_679;
        goto LABEL_682;
      }
      v285 = (__int128 *)(v286 + 1);
      v282 = v284 - (char *)v285;
    }
    while (v284 - (char *)v285 >= 4);
  }
  *(_QWORD *)&v433 = v281;
  DWORD2(v433) = 2;
  if (SHIBYTE(v442) < 0)
  {
    sub_20E860C04(&v434, (void *)__dst, *((unint64_t *)&__dst + 1));
  }
  else
  {
    v434 = __dst;
    v435 = v442;
  }
  if (*(char *)(v4 + 895) < 0)
  {
    sub_20E860C04(&__p, *(void **)(v4 + 872), *(_QWORD *)(v4 + 880));
  }
  else
  {
    __p = *(_OWORD *)(v4 + 872);
    *(_QWORD *)v437 = *(_QWORD *)(v4 + 888);
  }
  sub_20EFB57F0();
  if (byte_254A617F7 < 0)
  {
    sub_20E860C04(&v437[8], (void *)xmmword_254A617E0, *((unint64_t *)&xmmword_254A617E0 + 1));
  }
  else
  {
    *(_OWORD *)&v437[8] = xmmword_254A617E0;
    v438 = unk_254A617F0;
  }
  v287 = v426;
  if ((unint64_t)v426 >= v427)
  {
LABEL_682:
    v426 = sub_20EBA558C((char **)&v425, (uint64_t)&v433);
    if (SHIBYTE(v438) < 0)
    {
      operator delete(*(void **)&v437[8]);
      if ((v437[7] & 0x80000000) == 0)
        goto LABEL_684;
    }
    else if ((v437[7] & 0x80000000) == 0)
    {
      goto LABEL_684;
    }
LABEL_680:
    operator delete((void *)__p);
    if ((SHIBYTE(v435) & 0x80000000) == 0)
      goto LABEL_685;
    goto LABEL_681;
  }
LABEL_679:
  v288 = v433;
  *((_DWORD *)v287 + 2) = DWORD2(v433);
  *(_QWORD *)v287 = v288;
  v289 = v434;
  *((_QWORD *)v287 + 4) = v435;
  *((_OWORD *)v287 + 1) = v289;
  v435 = 0;
  v434 = 0uLL;
  v290 = *(_QWORD *)v437;
  *(_OWORD *)(v287 + 40) = __p;
  *((_QWORD *)v287 + 7) = v290;
  *(_QWORD *)v437 = 0;
  __p = 0uLL;
  v291 = *(_OWORD *)&v437[8];
  *((_QWORD *)v287 + 10) = v438;
  *((_OWORD *)v287 + 4) = v291;
  *(_QWORD *)&v437[8] = 0;
  *(_QWORD *)&v437[16] = 0;
  v438 = 0;
  v426 = v287 + 88;
  if ((v437[7] & 0x80000000) != 0)
    goto LABEL_680;
LABEL_684:
  if (SHIBYTE(v435) < 0)
LABEL_681:
    operator delete((void *)v434);
LABEL_685:
  v292 = sub_20EBA4AA4();
  if (*((char *)v292 + 23) < 0)
  {
    sub_20E860C04(v431, (void *)*v292, v292[1]);
  }
  else
  {
    v293 = *(_OWORD *)v292;
    v432 = v292[2];
    *(_OWORD *)v431 = v293;
  }
  v294 = HIBYTE(v432);
  if (v432 >= 0)
  {
    v295 = v431;
  }
  else
  {
    v294 = (uint64_t)v431[1];
    v295 = (void **)v431[0];
  }
  if (v294 >= 18)
  {
    v296 = (char *)v295 + v294;
    v297 = v295;
    do
    {
      v298 = (char *)memchr(v297, 67, v294 - 17);
      if (!v298)
        break;
      if (*(_QWORD *)v298 == 0x456C656E6E616843
        && *((_QWORD *)v298 + 1) == 0x696F763C726F7272
        && *((_WORD *)v298 + 8) == 15972)
      {
        if (v298 != v296 && v298 - (char *)v295 != -1)
          goto LABEL_729;
        break;
      }
      v297 = (void **)(v298 + 1);
      v294 = v296 - (char *)v297;
    }
    while (v296 - (char *)v297 >= 18);
  }
  *(_QWORD *)&v433 = v281 + 1;
  DWORD2(v433) = 3;
  v301 = SHIBYTE(v442);
  if (v442 >= 0)
    v302 = HIBYTE(v442);
  else
    v302 = *((_QWORD *)&__dst + 1);
  v303 = v302 + 6;
  if (v302 + 6 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v303 >= 0x17)
  {
    v305 = (v303 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v303 | 7) != 0x17)
      v305 = v303 | 7;
    v306 = v305 + 1;
    v304 = (__int128 *)operator new(v305 + 1);
    *((_QWORD *)&v434 + 1) = v302 + 6;
    v435 = v306 | 0x8000000000000000;
    *(_QWORD *)&v434 = v304;
  }
  else
  {
    v435 = 0;
    v434 = 0uLL;
    v304 = &v434;
    HIBYTE(v435) = v302 + 6;
    if (!v302)
      goto LABEL_721;
  }
  if (v301 >= 0)
    v307 = &__dst;
  else
    v307 = (__int128 *)__dst;
  memmove(v304, v307, v302);
LABEL_721:
  strcpy((char *)v304 + v302, ".Error");
  *(_WORD *)&v437[7] = 0;
  LOBYTE(__p) = 0;
  HIBYTE(v438) = 0;
  v308 = v426;
  if ((unint64_t)v426 >= v427)
  {
    v426 = sub_20EBA558C((char **)&v425, (uint64_t)&v433);
    if (SHIBYTE(v438) < 0)
    {
      operator delete(*(void **)&v437[8]);
      if ((v437[7] & 0x80000000) == 0)
        goto LABEL_728;
    }
    else if ((v437[7] & 0x80000000) == 0)
    {
      goto LABEL_728;
    }
LABEL_723:
    operator delete((void *)__p);
    if (SHIBYTE(v435) < 0)
      goto LABEL_724;
    goto LABEL_729;
  }
  v309 = v433;
  *((_DWORD *)v426 + 2) = DWORD2(v433);
  *(_QWORD *)v308 = v309;
  v310 = v434;
  *((_QWORD *)v308 + 4) = v435;
  *((_OWORD *)v308 + 1) = v310;
  v435 = 0;
  v434 = 0uLL;
  v311 = *(_QWORD *)v437;
  *(_OWORD *)(v308 + 40) = __p;
  *((_QWORD *)v308 + 7) = v311;
  *(_QWORD *)v437 = 0;
  __p = 0uLL;
  v312 = *(_OWORD *)&v437[8];
  *((_QWORD *)v308 + 10) = v438;
  *((_OWORD *)v308 + 4) = v312;
  *(_QWORD *)&v437[8] = 0;
  *(_QWORD *)&v437[16] = 0;
  v438 = 0;
  v426 = v308 + 88;
  if ((v437[7] & 0x80000000) != 0)
    goto LABEL_723;
LABEL_728:
  if (SHIBYTE(v435) < 0)
  {
LABEL_724:
    operator delete((void *)v434);
    v313 = *(std::__shared_weak_count **)(v4 + 976);
    if (!v313)
      goto LABEL_733;
    goto LABEL_730;
  }
LABEL_729:
  v313 = *(std::__shared_weak_count **)(v4 + 976);
  if (!v313)
  {
LABEL_733:
    v428 = 0;
    v429 = 0;
    v430 = 0;
    v317 = 0;
    goto LABEL_750;
  }
LABEL_730:
  v314 = std::__shared_weak_count::lock(v313);
  *((_QWORD *)&v433 + 1) = v314;
  if (!v314)
    goto LABEL_733;
  v315 = v314;
  v316 = *(_QWORD *)(v4 + 968);
  *(_QWORD *)&v433 = v316;
  if (v316)
  {
    (*(void (**)(_QWORD **__return_ptr))(*(_QWORD *)v316 + 24))(&v428);
  }
  else
  {
    v428 = 0;
    v429 = 0;
    v430 = 0;
  }
  v318 = (unint64_t *)&v315->__shared_owners_;
  do
    v319 = __ldaxr(v318);
  while (__stlxr(v319 - 1, v318));
  if (v319)
  {
    v317 = v428;
    v320 = v429;
    if (v428 == v429)
      goto LABEL_750;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v315->__on_zero_shared)(v315);
    std::__shared_weak_count::__release_weak(v315);
    v317 = v428;
    v320 = v429;
    if (v428 == v429)
      goto LABEL_750;
  }
  do
  {
    *(_QWORD *)&v433 = v281;
    *((_QWORD *)&v433 + 1) = *v317;
    v435 = 0;
    v434 = 0uLL;
    v322 = v423;
    if ((unint64_t)v423 < v424)
    {
      *(_OWORD *)v423 = v433;
      v321 = v434;
      *((_QWORD *)v322 + 4) = v435;
      *((_OWORD *)v322 + 1) = v321;
      v423 = v322 + 40;
    }
    else
    {
      v423 = sub_20EBA5F8C(&v422, (uint64_t)&v433);
      if (SHIBYTE(v435) < 0)
        operator delete((void *)v434);
    }
    ++v317;
  }
  while (v317 != v320);
  v317 = v428;
LABEL_750:
  if (v317)
  {
    v429 = v317;
    operator delete(v317);
  }
  v323 = *(std::__shared_weak_count **)(v4 + 976);
  if (!v323 || (v324 = std::__shared_weak_count::lock(v323), (*((_QWORD *)&v433 + 1) = v324) == 0))
  {
    v428 = 0;
    v429 = 0;
    v430 = 0;
    v327 = 0;
    goto LABEL_771;
  }
  v325 = v324;
  v326 = *(_QWORD *)(v4 + 968);
  *(_QWORD *)&v433 = v326;
  if (v326)
  {
    (*(void (**)(_QWORD **__return_ptr))(*(_QWORD *)v326 + 32))(&v428);
  }
  else
  {
    v428 = 0;
    v429 = 0;
    v430 = 0;
  }
  v328 = (unint64_t *)&v325->__shared_owners_;
  do
    v329 = __ldaxr(v328);
  while (__stlxr(v329 - 1, v328));
  if (v329)
  {
    v327 = v428;
    v330 = v429;
    if (v428 == v429)
      goto LABEL_771;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v325->__on_zero_shared)(v325);
    std::__shared_weak_count::__release_weak(v325);
    v327 = v428;
    v330 = v429;
    if (v428 == v429)
      goto LABEL_771;
  }
  v331 = v281 + 1;
  do
  {
    *(_QWORD *)&v433 = v331;
    *((_QWORD *)&v433 + 1) = *v327;
    v435 = 0;
    v434 = 0uLL;
    v333 = v423;
    if ((unint64_t)v423 < v424)
    {
      *(_OWORD *)v423 = v433;
      v332 = v434;
      *((_QWORD *)v333 + 4) = v435;
      *((_OWORD *)v333 + 1) = v332;
      v423 = v333 + 40;
    }
    else
    {
      v423 = sub_20EBA5F8C(&v422, (uint64_t)&v433);
      if (SHIBYTE(v435) < 0)
        operator delete((void *)v434);
    }
    ++v327;
  }
  while (v327 != v330);
  v327 = v428;
LABEL_771:
  if (v327)
  {
    v429 = v327;
    operator delete(v327);
  }
  if (SHIBYTE(v432) < 0)
  {
    operator delete(v431[0]);
    if ((SHIBYTE(v440) & 0x80000000) == 0)
    {
LABEL_775:
      if ((SHIBYTE(v442) & 0x80000000) == 0)
        goto LABEL_776;
LABEL_780:
      operator delete((void *)__dst);
      if ((*(char *)(v4 + 1039) & 0x80000000) == 0)
        goto LABEL_777;
      goto LABEL_781;
    }
  }
  else if ((SHIBYTE(v440) & 0x80000000) == 0)
  {
    goto LABEL_775;
  }
  operator delete((void *)v439);
  if (SHIBYTE(v442) < 0)
    goto LABEL_780;
LABEL_776:
  if ((*(char *)(v4 + 1039) & 0x80000000) == 0)
  {
LABEL_777:
    __dst = *(_OWORD *)(v4 + 1016);
    v442 = *(_QWORD *)(v4 + 1032);
    goto LABEL_782;
  }
LABEL_781:
  sub_20E860C04(&__dst, *(void **)(v4 + 1016), *(_QWORD *)(v4 + 1024));
LABEL_782:
  v334 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v4 + 1104) + 48))(*(_QWORD *)(v4 + 1104));
  sub_20EFB1D54();
  if (byte_254A610D7 < 0)
  {
    sub_20E860C04(&v439, (void *)xmmword_254A610C0, *((unint64_t *)&xmmword_254A610C0 + 1));
  }
  else
  {
    v439 = xmmword_254A610C0;
    v440 = unk_254A610D0;
  }
  v335 = HIBYTE(v440);
  if (v440 >= 0)
  {
    v336 = &v439;
  }
  else
  {
    v335 = *((_QWORD *)&v439 + 1);
    v336 = (__int128 *)v439;
  }
  if (v335 >= 4)
  {
    v337 = (char *)v336 + v335;
    v338 = v336;
    do
    {
      v339 = (char *)memchr(v338, 118, v335 - 3);
      if (!v339)
        break;
      if (*(_DWORD *)v339 == 1684631414)
      {
        if (v339 == v337 || v339 - (char *)v336 == -1)
          break;
        *(_QWORD *)&v433 = v334;
        DWORD2(v433) = 4;
        if (SHIBYTE(v442) < 0)
        {
          sub_20E860C04(&v434, (void *)__dst, *((unint64_t *)&__dst + 1));
        }
        else
        {
          v434 = __dst;
          v435 = v442;
        }
        if (*(char *)(v4 + 1063) < 0)
        {
          sub_20E860C04(&__p, *(void **)(v4 + 1040), *(_QWORD *)(v4 + 1048));
        }
        else
        {
          __p = *(_OWORD *)(v4 + 1040);
          *(_QWORD *)v437 = *(_QWORD *)(v4 + 1056);
        }
        sub_20EFB59A8();
        if (byte_254A6183F < 0)
        {
          sub_20E860C04(&v437[8], (void *)xmmword_254A61828, *((unint64_t *)&xmmword_254A61828 + 1));
        }
        else
        {
          *(_OWORD *)&v437[8] = xmmword_254A61828;
          v438 = unk_254A61838;
        }
        v340 = v426;
        if ((unint64_t)v426 < v427)
          goto LABEL_808;
        goto LABEL_811;
      }
      v338 = (__int128 *)(v339 + 1);
      v335 = v337 - (char *)v338;
    }
    while (v337 - (char *)v338 >= 4);
  }
  *(_QWORD *)&v433 = v334;
  DWORD2(v433) = 2;
  if (SHIBYTE(v442) < 0)
  {
    sub_20E860C04(&v434, (void *)__dst, *((unint64_t *)&__dst + 1));
  }
  else
  {
    v434 = __dst;
    v435 = v442;
  }
  if (*(char *)(v4 + 1063) < 0)
  {
    sub_20E860C04(&__p, *(void **)(v4 + 1040), *(_QWORD *)(v4 + 1048));
  }
  else
  {
    __p = *(_OWORD *)(v4 + 1040);
    *(_QWORD *)v437 = *(_QWORD *)(v4 + 1056);
  }
  sub_20EFB59A8();
  if (byte_254A6183F < 0)
  {
    sub_20E860C04(&v437[8], (void *)xmmword_254A61828, *((unint64_t *)&xmmword_254A61828 + 1));
  }
  else
  {
    *(_OWORD *)&v437[8] = xmmword_254A61828;
    v438 = unk_254A61838;
  }
  v340 = v426;
  if ((unint64_t)v426 >= v427)
  {
LABEL_811:
    v426 = sub_20EBA558C((char **)&v425, (uint64_t)&v433);
    if (SHIBYTE(v438) < 0)
    {
      operator delete(*(void **)&v437[8]);
      if ((v437[7] & 0x80000000) == 0)
        goto LABEL_813;
    }
    else if ((v437[7] & 0x80000000) == 0)
    {
      goto LABEL_813;
    }
LABEL_809:
    operator delete((void *)__p);
    if ((SHIBYTE(v435) & 0x80000000) == 0)
      goto LABEL_814;
    goto LABEL_810;
  }
LABEL_808:
  v341 = v433;
  *((_DWORD *)v340 + 2) = DWORD2(v433);
  *(_QWORD *)v340 = v341;
  v342 = v434;
  *((_QWORD *)v340 + 4) = v435;
  *((_OWORD *)v340 + 1) = v342;
  v435 = 0;
  v434 = 0uLL;
  v343 = *(_QWORD *)v437;
  *(_OWORD *)(v340 + 40) = __p;
  *((_QWORD *)v340 + 7) = v343;
  *(_QWORD *)v437 = 0;
  __p = 0uLL;
  v344 = *(_OWORD *)&v437[8];
  *((_QWORD *)v340 + 10) = v438;
  *((_OWORD *)v340 + 4) = v344;
  *(_QWORD *)&v437[8] = 0;
  *(_QWORD *)&v437[16] = 0;
  v438 = 0;
  v426 = v340 + 88;
  if ((v437[7] & 0x80000000) != 0)
    goto LABEL_809;
LABEL_813:
  if (SHIBYTE(v435) < 0)
LABEL_810:
    operator delete((void *)v434);
LABEL_814:
  v345 = sub_20EBA4AA4();
  if (*((char *)v345 + 23) < 0)
  {
    sub_20E860C04(v431, (void *)*v345, v345[1]);
  }
  else
  {
    v346 = *(_OWORD *)v345;
    v432 = v345[2];
    *(_OWORD *)v431 = v346;
  }
  v347 = HIBYTE(v432);
  if (v432 >= 0)
  {
    v348 = v431;
  }
  else
  {
    v347 = (uint64_t)v431[1];
    v348 = (void **)v431[0];
  }
  if (v347 >= 18)
  {
    v349 = (char *)v348 + v347;
    v350 = v348;
    do
    {
      v351 = (char *)memchr(v350, 67, v347 - 17);
      if (!v351)
        break;
      if (*(_QWORD *)v351 == 0x456C656E6E616843
        && *((_QWORD *)v351 + 1) == 0x696F763C726F7272
        && *((_WORD *)v351 + 8) == 15972)
      {
        if (v351 != v349 && v351 - (char *)v348 != -1)
          goto LABEL_858;
        break;
      }
      v350 = (void **)(v351 + 1);
      v347 = v349 - (char *)v350;
    }
    while (v349 - (char *)v350 >= 18);
  }
  *(_QWORD *)&v433 = v334 + 1;
  DWORD2(v433) = 3;
  v354 = SHIBYTE(v442);
  if (v442 >= 0)
    v355 = HIBYTE(v442);
  else
    v355 = *((_QWORD *)&__dst + 1);
  v356 = v355 + 6;
  if (v355 + 6 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v356 >= 0x17)
  {
    v358 = (v356 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v356 | 7) != 0x17)
      v358 = v356 | 7;
    v359 = v358 + 1;
    v357 = (__int128 *)operator new(v358 + 1);
    *((_QWORD *)&v434 + 1) = v355 + 6;
    v435 = v359 | 0x8000000000000000;
    *(_QWORD *)&v434 = v357;
  }
  else
  {
    v435 = 0;
    v434 = 0uLL;
    v357 = &v434;
    HIBYTE(v435) = v355 + 6;
    if (!v355)
      goto LABEL_850;
  }
  if (v354 >= 0)
    v360 = &__dst;
  else
    v360 = (__int128 *)__dst;
  memmove(v357, v360, v355);
LABEL_850:
  strcpy((char *)v357 + v355, ".Error");
  *(_WORD *)&v437[7] = 0;
  LOBYTE(__p) = 0;
  HIBYTE(v438) = 0;
  v361 = v426;
  if ((unint64_t)v426 >= v427)
  {
    v426 = sub_20EBA558C((char **)&v425, (uint64_t)&v433);
    if (SHIBYTE(v438) < 0)
    {
      operator delete(*(void **)&v437[8]);
      if ((v437[7] & 0x80000000) == 0)
        goto LABEL_857;
    }
    else if ((v437[7] & 0x80000000) == 0)
    {
      goto LABEL_857;
    }
LABEL_852:
    operator delete((void *)__p);
    if (SHIBYTE(v435) < 0)
      goto LABEL_853;
    goto LABEL_858;
  }
  v362 = v433;
  *((_DWORD *)v426 + 2) = DWORD2(v433);
  *(_QWORD *)v361 = v362;
  v363 = v434;
  *((_QWORD *)v361 + 4) = v435;
  *((_OWORD *)v361 + 1) = v363;
  v435 = 0;
  v434 = 0uLL;
  v364 = *(_QWORD *)v437;
  *(_OWORD *)(v361 + 40) = __p;
  *((_QWORD *)v361 + 7) = v364;
  *(_QWORD *)v437 = 0;
  __p = 0uLL;
  v365 = *(_OWORD *)&v437[8];
  *((_QWORD *)v361 + 10) = v438;
  *((_OWORD *)v361 + 4) = v365;
  *(_QWORD *)&v437[8] = 0;
  *(_QWORD *)&v437[16] = 0;
  v438 = 0;
  v426 = v361 + 88;
  if ((v437[7] & 0x80000000) != 0)
    goto LABEL_852;
LABEL_857:
  if (SHIBYTE(v435) < 0)
  {
LABEL_853:
    operator delete((void *)v434);
    v366 = *(std::__shared_weak_count **)(v4 + 1144);
    if (!v366)
      goto LABEL_862;
    goto LABEL_859;
  }
LABEL_858:
  v366 = *(std::__shared_weak_count **)(v4 + 1144);
  if (!v366)
  {
LABEL_862:
    v428 = 0;
    v429 = 0;
    v430 = 0;
    v370 = 0;
    goto LABEL_879;
  }
LABEL_859:
  v367 = std::__shared_weak_count::lock(v366);
  *((_QWORD *)&v433 + 1) = v367;
  if (!v367)
    goto LABEL_862;
  v368 = v367;
  v369 = *(_QWORD *)(v4 + 1136);
  *(_QWORD *)&v433 = v369;
  if (v369)
  {
    (*(void (**)(_QWORD **__return_ptr))(*(_QWORD *)v369 + 24))(&v428);
  }
  else
  {
    v428 = 0;
    v429 = 0;
    v430 = 0;
  }
  v371 = (unint64_t *)&v368->__shared_owners_;
  do
    v372 = __ldaxr(v371);
  while (__stlxr(v372 - 1, v371));
  if (v372)
  {
    v370 = v428;
    v373 = v429;
    if (v428 == v429)
      goto LABEL_879;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v368->__on_zero_shared)(v368);
    std::__shared_weak_count::__release_weak(v368);
    v370 = v428;
    v373 = v429;
    if (v428 == v429)
      goto LABEL_879;
  }
  do
  {
    *(_QWORD *)&v433 = v334;
    *((_QWORD *)&v433 + 1) = *v370;
    v435 = 0;
    v434 = 0uLL;
    v375 = v423;
    if ((unint64_t)v423 < v424)
    {
      *(_OWORD *)v423 = v433;
      v374 = v434;
      *((_QWORD *)v375 + 4) = v435;
      *((_OWORD *)v375 + 1) = v374;
      v423 = v375 + 40;
    }
    else
    {
      v423 = sub_20EBA5F8C(&v422, (uint64_t)&v433);
      if (SHIBYTE(v435) < 0)
        operator delete((void *)v434);
    }
    ++v370;
  }
  while (v370 != v373);
  v370 = v428;
LABEL_879:
  if (v370)
  {
    v429 = v370;
    operator delete(v370);
  }
  v376 = *(std::__shared_weak_count **)(v4 + 1144);
  if (!v376 || (v377 = std::__shared_weak_count::lock(v376), (*((_QWORD *)&v433 + 1) = v377) == 0))
  {
    v428 = 0;
    v429 = 0;
    v430 = 0;
    v380 = 0;
    goto LABEL_900;
  }
  v378 = v377;
  v379 = *(_QWORD *)(v4 + 1136);
  *(_QWORD *)&v433 = v379;
  if (v379)
  {
    (*(void (**)(_QWORD **__return_ptr))(*(_QWORD *)v379 + 32))(&v428);
  }
  else
  {
    v428 = 0;
    v429 = 0;
    v430 = 0;
  }
  v381 = (unint64_t *)&v378->__shared_owners_;
  do
    v382 = __ldaxr(v381);
  while (__stlxr(v382 - 1, v381));
  if (v382)
  {
    v380 = v428;
    v383 = v429;
    if (v428 == v429)
      goto LABEL_900;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v378->__on_zero_shared)(v378);
    std::__shared_weak_count::__release_weak(v378);
    v380 = v428;
    v383 = v429;
    if (v428 == v429)
      goto LABEL_900;
  }
  do
  {
    *(_QWORD *)&v433 = v334 + 1;
    *((_QWORD *)&v433 + 1) = *v380;
    v435 = 0;
    v434 = 0uLL;
    v385 = v423;
    if ((unint64_t)v423 < v424)
    {
      *(_OWORD *)v423 = v433;
      v384 = v434;
      *((_QWORD *)v385 + 4) = v435;
      *((_OWORD *)v385 + 1) = v384;
      v423 = v385 + 40;
    }
    else
    {
      v423 = sub_20EBA5F8C(&v422, (uint64_t)&v433);
      if (SHIBYTE(v435) < 0)
        operator delete((void *)v434);
    }
    ++v380;
  }
  while (v380 != v383);
  v380 = v428;
LABEL_900:
  if (v380)
  {
    v429 = v380;
    operator delete(v380);
  }
  if (SHIBYTE(v432) < 0)
  {
    operator delete(v431[0]);
    if ((SHIBYTE(v440) & 0x80000000) == 0)
    {
LABEL_904:
      if ((SHIBYTE(v442) & 0x80000000) == 0)
        goto LABEL_905;
LABEL_909:
      operator delete((void *)__dst);
      if ((*(char *)(v416 + 31) & 0x80000000) == 0)
        goto LABEL_906;
      goto LABEL_910;
    }
  }
  else if ((SHIBYTE(v440) & 0x80000000) == 0)
  {
    goto LABEL_904;
  }
  operator delete((void *)v439);
  if (SHIBYTE(v442) < 0)
    goto LABEL_909;
LABEL_905:
  if ((*(char *)(v416 + 31) & 0x80000000) == 0)
  {
LABEL_906:
    *(_OWORD *)v420 = *(_OWORD *)(v416 + 8);
    v421 = *(_QWORD *)(v416 + 24);
    goto LABEL_911;
  }
LABEL_910:
  sub_20E860C04(v420, *(void **)(v416 + 8), *(_QWORD *)(v416 + 16));
LABEL_911:
  v386 = *(_QWORD *)(v416 + 56) != 0;
  if (*(char *)(v416 + 55) < 0)
  {
    sub_20E860C04(v418, *(void **)(v416 + 32), *(_QWORD *)(v416 + 40));
  }
  else
  {
    *(_OWORD *)v418 = *(_OWORD *)(v416 + 32);
    v419 = *(_QWORD *)(v416 + 48);
  }
  sub_20EBA690C(v417, (__int128 *)v420, v386, (uint64_t *)&v425, (uint64_t *)&v422, (__int128 *)v418);
  if (SHIBYTE(v419) < 0)
  {
    operator delete(v418[0]);
    if ((SHIBYTE(v421) & 0x80000000) == 0)
    {
LABEL_916:
      v387 = (char *)v422;
      if (v422)
        goto LABEL_917;
LABEL_927:
      v389 = (char *)v425;
      if (!v425)
        return;
LABEL_928:
      v390 = v426;
      v391 = v389;
      if (v426 == v389)
      {
LABEL_939:
        v426 = v389;
        operator delete(v391);
        return;
      }
      while (1)
      {
        while (*(v390 - 1) < 0)
        {
          operator delete(*((void **)v390 - 3));
          if (*(v390 - 25) < 0)
            goto LABEL_930;
LABEL_936:
          if ((*(v390 - 49) & 0x80000000) == 0)
            goto LABEL_931;
LABEL_937:
          operator delete(*((void **)v390 - 9));
          v390 -= 88;
          if (v390 == v389)
          {
LABEL_938:
            v391 = v425;
            goto LABEL_939;
          }
        }
        if ((*(v390 - 25) & 0x80000000) == 0)
          goto LABEL_936;
LABEL_930:
        operator delete(*((void **)v390 - 6));
        if (*(v390 - 49) < 0)
          goto LABEL_937;
LABEL_931:
        v390 -= 88;
        if (v390 == v389)
          goto LABEL_938;
      }
    }
  }
  else if ((SHIBYTE(v421) & 0x80000000) == 0)
  {
    goto LABEL_916;
  }
  operator delete(v420[0]);
  v387 = (char *)v422;
  if (!v422)
    goto LABEL_927;
LABEL_917:
  v388 = v423;
  if (v423 == v387)
  {
    v423 = v387;
    operator delete(v387);
    v389 = (char *)v425;
    if (!v425)
      return;
    goto LABEL_928;
  }
  do
  {
    if (*(v388 - 1) < 0)
      operator delete(*((void **)v388 - 3));
    v388 -= 40;
  }
  while (v388 != v387);
  v423 = v387;
  operator delete(v422);
  v389 = (char *)v425;
  if (v425)
    goto LABEL_928;
}

void sub_20EFAF974(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,char a39,uint64_t a40,void *__p,uint64_t a42,int a43,__int16 a44,char a45,char a46,void *a47,uint64_t a48,int a49,__int16 a50,char a51,char a52)
{
  uint64_t v52;

  __cxa_guard_abort(&qword_254A60C80);
  if (*(char *)(v52 - 105) < 0)
    operator delete(*(void **)(v52 - 128));
  sub_20EBA4920(&a24);
  sub_20EBA4990(&a27);
  _Unwind_Resume(a1);
}

void sub_20EFAFE38()
{
  unsigned __int8 v0;
  int v1;
  size_t v2;
  unint64_t v3;
  __int128 *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;

  v0 = atomic_load((unsigned __int8 *)&qword_254A60950);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A60950))
  {
    sub_20EFB00E8();
    v1 = byte_254A60D47;
    if (byte_254A60D47 >= 0)
      v2 = byte_254A60D47;
    else
      v2 = qword_254A60D38;
    v3 = v2 + 1;
    if (v2 + 1 >= 0x7FFFFFFFFFFFFFF8)
      sub_20E860B7C();
    if (v3 >= 0x17)
    {
      v5 = (v3 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v3 | 7) != 0x17)
        v5 = v3 | 7;
      v6 = v5 + 1;
      v4 = (__int128 *)operator new(v5 + 1);
      *((_QWORD *)&xmmword_254A60D18 + 1) = v2 + 1;
      unk_254A60D28 = v6 | 0x8000000000000000;
      *(_QWORD *)&xmmword_254A60D18 = v4;
    }
    else
    {
      v4 = &xmmword_254A60D18;
      unk_254A60D28 = 0;
      xmmword_254A60D18 = 0uLL;
      byte_254A60D2F = v2 + 1;
      if (!v2)
      {
LABEL_18:
        *(_WORD *)((char *)v4 + v2) = 38;
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A60D18, &dword_20E81F000);
        __cxa_guard_release(&qword_254A60950);
        return;
      }
    }
    if (v1 >= 0)
      v7 = &qword_254A60D30;
    else
      v7 = (uint64_t *)qword_254A60D30;
    memmove(v4, v7, v2);
    goto LABEL_18;
  }
}

void sub_20EFAFF78(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A60950);
  _Unwind_Resume(a1);
}

void sub_20EFAFF90()
{
  unsigned __int8 v0;
  int v1;
  size_t v2;
  unint64_t v3;
  __int128 *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;

  v0 = atomic_load((unsigned __int8 *)&qword_254A609B8);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A609B8))
  {
    sub_20EFB0A5C();
    v1 = byte_254A60E7F;
    if (byte_254A60E7F >= 0)
      v2 = byte_254A60E7F;
    else
      v2 = qword_254A60E70;
    v3 = v2 + 1;
    if (v2 + 1 >= 0x7FFFFFFFFFFFFFF8)
      sub_20E860B7C();
    if (v3 >= 0x17)
    {
      v5 = (v3 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v3 | 7) != 0x17)
        v5 = v3 | 7;
      v6 = v5 + 1;
      v4 = (__int128 *)operator new(v5 + 1);
      *((_QWORD *)&xmmword_254A60E50 + 1) = v2 + 1;
      unk_254A60E60 = v6 | 0x8000000000000000;
      *(_QWORD *)&xmmword_254A60E50 = v4;
    }
    else
    {
      v4 = &xmmword_254A60E50;
      unk_254A60E60 = 0;
      xmmword_254A60E50 = 0uLL;
      byte_254A60E67 = v2 + 1;
      if (!v2)
      {
LABEL_18:
        *(_WORD *)((char *)v4 + v2) = 38;
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A60E50, &dword_20E81F000);
        __cxa_guard_release(&qword_254A609B8);
        return;
      }
    }
    if (v1 >= 0)
      v7 = &qword_254A60E68;
    else
      v7 = (uint64_t *)qword_254A60E68;
    memmove(v4, v7, v2);
    goto LABEL_18;
  }
}

void sub_20EFB00D0(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A609B8);
  _Unwind_Resume(a1);
}

void sub_20EFB00E8()
{
  unsigned __int8 v0;
  int v1;
  size_t v2;
  unint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  __int128 *v8;

  v0 = atomic_load((unsigned __int8 *)&qword_254A60958);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A60958))
  {
    sub_20EFB0268();
    v1 = byte_254A60D5F;
    if (byte_254A60D5F >= 0)
      v2 = byte_254A60D5F;
    else
      v2 = *((_QWORD *)&xmmword_254A60D48 + 1);
    v3 = v2 + 6;
    if (v2 + 6 >= 0x7FFFFFFFFFFFFFF8)
      sub_20E860B7C();
    if (v3 >= 0x17)
    {
      v5 = (v3 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v3 | 7) != 0x17)
        v5 = v3 | 7;
      v6 = v5 + 1;
      v7 = (char *)operator new(v5 + 1);
      qword_254A60D38 = v2 + 6;
      unk_254A60D40 = v6 | 0x8000000000000000;
      qword_254A60D30 = (uint64_t)v7;
      *(_DWORD *)v7 = 1936617315;
      *((_WORD *)v7 + 2) = 8308;
      v4 = v7 + 6;
    }
    else
    {
      qword_254A60D38 = 0;
      unk_254A60D40 = 0;
      qword_254A60D30 = 0x2074736E6F63;
      byte_254A60D47 = v2 + 6;
      v4 = (char *)&qword_254A60D30 + 6;
      if (!v2)
      {
LABEL_18:
        v4[v2] = 0;
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &qword_254A60D30, &dword_20E81F000);
        __cxa_guard_release(&qword_254A60958);
        return;
      }
    }
    if (v1 >= 0)
      v8 = &xmmword_254A60D48;
    else
      v8 = (__int128 *)xmmword_254A60D48;
    memmove(v4, v8, v2);
    goto LABEL_18;
  }
}

void sub_20EFB0250(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A60958);
  _Unwind_Resume(a1);
}

void sub_20EFB0268()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_254A60960);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A60960))
  {
    sub_20EFB0320();
    if (byte_254A60D77 < 0)
    {
      sub_20E860C04(&xmmword_254A60D48, (void *)qword_254A60D60, unk_254A60D68);
    }
    else
    {
      xmmword_254A60D48 = *(_OWORD *)&qword_254A60D60;
      unk_254A60D58 = unk_254A60D70;
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A60D48, &dword_20E81F000);
    __cxa_guard_release(&qword_254A60960);
  }
}

void sub_20EFB0308(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A60960);
  _Unwind_Resume(a1);
}

void sub_20EFB0320()
{
  unsigned __int8 v0;
  void *__p[2];
  char v2;

  v0 = atomic_load((unsigned __int8 *)&qword_254A60968);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A60968))
  {
    sub_20EFB05C8(__p);
    sub_20EFB03F4((char *)__p);
    if (v2 < 0)
      operator delete(__p[0]);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &qword_254A60D60, &dword_20E81F000);
    __cxa_guard_release(&qword_254A60968);
  }
}

void sub_20EFB03B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A60968);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A60968);
  _Unwind_Resume(a1);
}

void sub_20EFB03F4(char *a1)
{
  unsigned __int8 v2;
  int64x2_t v3;
  int8x16_t v4;
  void **v5;
  void **v6;
  void *v7;
  void *__p;
  void **v9;
  void *__dst[2];
  uint64_t v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v2 = atomic_load((unsigned __int8 *)&qword_254A60970);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254A60970))
  {
    sub_20EFB07A4();
    if (byte_254A60DBF < 0)
    {
      sub_20E860C04(&xmmword_254A60D78, (void *)xmmword_254A60DA8, *((unint64_t *)&xmmword_254A60DA8 + 1));
    }
    else
    {
      xmmword_254A60D78 = xmmword_254A60DA8;
      unk_254A60D88 = unk_254A60DB8;
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A60D78, &dword_20E81F000);
    __cxa_guard_release(&qword_254A60970);
  }
  if (byte_254A60D8F < 0)
  {
    sub_20E860C04(__dst, (void *)xmmword_254A60D78, *((unint64_t *)&xmmword_254A60D78 + 1));
  }
  else
  {
    *(_OWORD *)__dst = xmmword_254A60D78;
    v11 = unk_254A60D88;
  }
  sub_20E877C80(&__p, (uint64_t)__dst, 1uLL);
  sub_21023CE38(a1, (uint64_t *)&__p, (std::string *)&qword_254A60D60, v3, v4);
  v5 = (void **)__p;
  if (__p)
  {
    v6 = v9;
    v7 = __p;
    if (v9 != __p)
    {
      do
      {
        if (*((char *)v6 - 1) < 0)
          operator delete(*(v6 - 3));
        v6 -= 3;
      }
      while (v6 != v5);
      v7 = __p;
    }
    v9 = v5;
    operator delete(v7);
  }
  if (SHIBYTE(v11) < 0)
    operator delete(__dst[0]);
}

void sub_20EFB0580(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A60970);
  _Unwind_Resume(a1);
}

void sub_20EFB059C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  sub_20E89FB98(&a10);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_20EFB05C8(_QWORD *__dst)
{
  unsigned __int8 v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  size_t v5;

  v2 = atomic_load((unsigned __int8 *)&qword_254A60988);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254A60988))
  {
    sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::concurrency::ChannelOutput<cv3d::vio::mapping_io::SubmapLoadResult>]", qword_254A60DC0);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254A60DC0, &dword_20E81F000);
    __cxa_guard_release(&qword_254A60988);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_254A60990);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_254A60990))
  {
    v5 = sub_20E8A2354(qword_254A60DC0, "<", 0);
    sub_20E89FC08(qword_254A60DC0, 0, v5, qword_254A60DD8);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254A60DD8, &dword_20E81F000);
    __cxa_guard_release(&qword_254A60990);
  }
  v4 = atomic_load((unsigned __int8 *)&qword_254A60998);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_254A60998))
  {
    sub_21023CD84((uint64_t)qword_254A60DD8, (uint64_t)&xmmword_254A60DF0);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A60DF0, &dword_20E81F000);
    __cxa_guard_release(&qword_254A60998);
  }
  if (byte_254A60E07 < 0)
  {
    sub_20E860C04(__dst, (void *)xmmword_254A60DF0, *((unint64_t *)&xmmword_254A60DF0 + 1));
  }
  else
  {
    *(_OWORD *)__dst = xmmword_254A60DF0;
    __dst[2] = unk_254A60E00;
  }
}

void sub_20EFB075C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A60998);
  _Unwind_Resume(a1);
}

void sub_20EFB0774(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A60990);
  _Unwind_Resume(a1);
}

void sub_20EFB078C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A60988);
  _Unwind_Resume(a1);
}

void sub_20EFB07A4()
{
  unsigned __int8 v0;
  unsigned __int8 v1;

  v0 = atomic_load((unsigned __int8 *)&qword_254A60978);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A60978))
  {
    sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::vio::mapping_io::SubmapLoadResult]", qword_254A60D90);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254A60D90, &dword_20E81F000);
    __cxa_guard_release(&qword_254A60978);
  }
  v1 = atomic_load((unsigned __int8 *)&qword_254A60980);
  if ((v1 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_254A60980))
    {
      sub_21023CD84((uint64_t)qword_254A60D90, (uint64_t)&xmmword_254A60DA8);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A60DA8, &dword_20E81F000);
      __cxa_guard_release(&qword_254A60980);
    }
  }
}

void sub_20EFB0874(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A60980);
  _Unwind_Resume(a1);
}

void sub_20EFB088C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A60978);
  _Unwind_Resume(a1);
}

void sub_20EFB08A4()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_254A609A0);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A609A0))
  {
    sub_20EFB095C();
    if (byte_254A60E4F < 0)
    {
      sub_20E860C04(&xmmword_254A60E08, (void *)xmmword_254A60E38, *((unint64_t *)&xmmword_254A60E38 + 1));
    }
    else
    {
      xmmword_254A60E08 = xmmword_254A60E38;
      unk_254A60E18 = unk_254A60E48;
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A60E08, &dword_20E81F000);
    __cxa_guard_release(&qword_254A609A0);
  }
}

void sub_20EFB0944(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A609A0);
  _Unwind_Resume(a1);
}

void sub_20EFB095C()
{
  unsigned __int8 v0;
  unsigned __int8 v1;

  v0 = atomic_load((unsigned __int8 *)&qword_254A609A8);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A609A8))
  {
    sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::concurrency::ReturnOrThrow<cv3d::vio::mapping_io::SubmapLoadResult, cv3d::vio::mapping_io::MappingIONodeGroupError> (const std::shared_ptr<const cv3d::vio::mapping_io::MapLocationInfo> &)]", qword_254A60E20);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254A60E20, &dword_20E81F000);
    __cxa_guard_release(&qword_254A609A8);
  }
  v1 = atomic_load((unsigned __int8 *)&qword_254A609B0);
  if ((v1 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_254A609B0))
    {
      sub_21023CD84((uint64_t)qword_254A60E20, (uint64_t)&xmmword_254A60E38);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A60E38, &dword_20E81F000);
      __cxa_guard_release(&qword_254A609B0);
    }
  }
}

void sub_20EFB0A2C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A609B0);
  _Unwind_Resume(a1);
}

void sub_20EFB0A44(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A609A8);
  _Unwind_Resume(a1);
}

void sub_20EFB0A5C()
{
  unsigned __int8 v0;
  int v1;
  size_t v2;
  unint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  __int128 *v8;

  v0 = atomic_load((unsigned __int8 *)&qword_254A609C0);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A609C0))
  {
    sub_20EFB0BDC();
    v1 = byte_254A60E97;
    if (byte_254A60E97 >= 0)
      v2 = byte_254A60E97;
    else
      v2 = *((_QWORD *)&xmmword_254A60E80 + 1);
    v3 = v2 + 6;
    if (v2 + 6 >= 0x7FFFFFFFFFFFFFF8)
      sub_20E860B7C();
    if (v3 >= 0x17)
    {
      v5 = (v3 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v3 | 7) != 0x17)
        v5 = v3 | 7;
      v6 = v5 + 1;
      v7 = (char *)operator new(v5 + 1);
      qword_254A60E70 = v2 + 6;
      unk_254A60E78 = v6 | 0x8000000000000000;
      qword_254A60E68 = (uint64_t)v7;
      *(_DWORD *)v7 = 1936617315;
      *((_WORD *)v7 + 2) = 8308;
      v4 = v7 + 6;
    }
    else
    {
      qword_254A60E70 = 0;
      unk_254A60E78 = 0;
      qword_254A60E68 = 0x2074736E6F63;
      byte_254A60E7F = v2 + 6;
      v4 = (char *)&qword_254A60E68 + 6;
      if (!v2)
      {
LABEL_18:
        v4[v2] = 0;
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &qword_254A60E68, &dword_20E81F000);
        __cxa_guard_release(&qword_254A609C0);
        return;
      }
    }
    if (v1 >= 0)
      v8 = &xmmword_254A60E80;
    else
      v8 = (__int128 *)xmmword_254A60E80;
    memmove(v4, v8, v2);
    goto LABEL_18;
  }
}

void sub_20EFB0BC4(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A609C0);
  _Unwind_Resume(a1);
}

void sub_20EFB0BDC()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_254A609C8);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A609C8))
  {
    sub_20EFB0C94();
    if (byte_254A60EAF < 0)
    {
      sub_20E860C04(&xmmword_254A60E80, (void *)qword_254A60E98, unk_254A60EA0);
    }
    else
    {
      xmmword_254A60E80 = *(_OWORD *)&qword_254A60E98;
      unk_254A60E90 = unk_254A60EA8;
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A60E80, &dword_20E81F000);
    __cxa_guard_release(&qword_254A609C8);
  }
}

void sub_20EFB0C7C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A609C8);
  _Unwind_Resume(a1);
}

void sub_20EFB0C94()
{
  unsigned __int8 v0;
  void *__p[2];
  char v2;

  v0 = atomic_load((unsigned __int8 *)&qword_254A609D0);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A609D0))
  {
    sub_20EFB0F4C(__p);
    sub_20EFB0D70((std::string *)&qword_254A60E98, (char *)__p);
    if (v2 < 0)
      operator delete(__p[0]);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &qword_254A60E98, &dword_20E81F000);
    __cxa_guard_release(&qword_254A609D0);
  }
}

void sub_20EFB0D30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A609D0);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A609D0);
  _Unwind_Resume(a1);
}

void sub_20EFB0D70(std::string *a1, char *a2)
{
  unsigned __int8 v4;
  int64x2_t v5;
  int8x16_t v6;
  void **v7;
  void **v8;
  void *v9;
  void *__p;
  void **v11;
  void *__dst[2];
  uint64_t v13;
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  v4 = atomic_load((unsigned __int8 *)&qword_254A609D8);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_254A609D8))
  {
    sub_20EFB1128();
    if (byte_254A60EF7 < 0)
    {
      sub_20E860C04(&xmmword_254A60EB0, (void *)xmmword_254A60EE0, *((unint64_t *)&xmmword_254A60EE0 + 1));
    }
    else
    {
      xmmword_254A60EB0 = xmmword_254A60EE0;
      unk_254A60EC0 = unk_254A60EF0;
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A60EB0, &dword_20E81F000);
    __cxa_guard_release(&qword_254A609D8);
  }
  if (byte_254A60EC7 < 0)
  {
    sub_20E860C04(__dst, (void *)xmmword_254A60EB0, *((unint64_t *)&xmmword_254A60EB0 + 1));
  }
  else
  {
    *(_OWORD *)__dst = xmmword_254A60EB0;
    v13 = unk_254A60EC0;
  }
  sub_20E877C80(&__p, (uint64_t)__dst, 1uLL);
  sub_21023CE38(a2, (uint64_t *)&__p, a1, v5, v6);
  v7 = (void **)__p;
  if (__p)
  {
    v8 = v11;
    v9 = __p;
    if (v11 != __p)
    {
      do
      {
        if (*((char *)v8 - 1) < 0)
          operator delete(*(v8 - 3));
        v8 -= 3;
      }
      while (v8 != v7);
      v9 = __p;
    }
    v11 = v7;
    operator delete(v9);
  }
  if (SHIBYTE(v13) < 0)
    operator delete(__dst[0]);
}

void sub_20EFB0F04(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A609D8);
  _Unwind_Resume(a1);
}

void sub_20EFB0F20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  sub_20E89FB98(&a10);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_20EFB0F4C(_QWORD *__dst)
{
  unsigned __int8 v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  size_t v5;

  v2 = atomic_load((unsigned __int8 *)&qword_254A609F0);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254A609F0))
  {
    sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::concurrency::ChannelError<cv3d::vio::mapping_io::MappingIONodeGroupError>]", qword_254A60EF8);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254A60EF8, &dword_20E81F000);
    __cxa_guard_release(&qword_254A609F0);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_254A609F8);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_254A609F8))
  {
    v5 = sub_20E8A2354(qword_254A60EF8, "<", 0);
    sub_20E89FC08(qword_254A60EF8, 0, v5, qword_254A60F10);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254A60F10, &dword_20E81F000);
    __cxa_guard_release(&qword_254A609F8);
  }
  v4 = atomic_load((unsigned __int8 *)&qword_254A60A00);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_254A60A00))
  {
    sub_21023CD84((uint64_t)qword_254A60F10, (uint64_t)&xmmword_254A60F28);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A60F28, &dword_20E81F000);
    __cxa_guard_release(&qword_254A60A00);
  }
  if (byte_254A60F3F < 0)
  {
    sub_20E860C04(__dst, (void *)xmmword_254A60F28, *((unint64_t *)&xmmword_254A60F28 + 1));
  }
  else
  {
    *(_OWORD *)__dst = xmmword_254A60F28;
    __dst[2] = unk_254A60F38;
  }
}

void sub_20EFB10E0(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A60A00);
  _Unwind_Resume(a1);
}

void sub_20EFB10F8(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A609F8);
  _Unwind_Resume(a1);
}

void sub_20EFB1110(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A609F0);
  _Unwind_Resume(a1);
}

void sub_20EFB1128()
{
  unsigned __int8 v0;
  unsigned __int8 v1;

  v0 = atomic_load((unsigned __int8 *)&qword_254A609E0);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A609E0))
  {
    sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::vio::mapping_io::MappingIONodeGroupError]", qword_254A60EC8);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254A60EC8, &dword_20E81F000);
    __cxa_guard_release(&qword_254A609E0);
  }
  v1 = atomic_load((unsigned __int8 *)&qword_254A609E8);
  if ((v1 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_254A609E8))
    {
      sub_21023CD84((uint64_t)qword_254A60EC8, (uint64_t)&xmmword_254A60EE0);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A60EE0, &dword_20E81F000);
      __cxa_guard_release(&qword_254A609E8);
    }
  }
}

void sub_20EFB11F8(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A609E8);
  _Unwind_Resume(a1);
}

void sub_20EFB1210(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A609E0);
  _Unwind_Resume(a1);
}

void sub_20EFB1228()
{
  unsigned __int8 v0;
  int v1;
  size_t v2;
  unint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  __int128 *v8;

  v0 = atomic_load((unsigned __int8 *)&qword_254A60A10);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A60A10))
  {
    sub_20EFB13A8();
    v1 = byte_254A60F87;
    if (byte_254A60F87 >= 0)
      v2 = byte_254A60F87;
    else
      v2 = *((_QWORD *)&xmmword_254A60F70 + 1);
    v3 = v2 + 6;
    if (v2 + 6 >= 0x7FFFFFFFFFFFFFF8)
      sub_20E860B7C();
    if (v3 >= 0x17)
    {
      v5 = (v3 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v3 | 7) != 0x17)
        v5 = v3 | 7;
      v6 = v5 + 1;
      v7 = (char *)operator new(v5 + 1);
      qword_254A60F60 = v2 + 6;
      unk_254A60F68 = v6 | 0x8000000000000000;
      qword_254A60F58 = (uint64_t)v7;
      *(_DWORD *)v7 = 1936617315;
      *((_WORD *)v7 + 2) = 8308;
      v4 = v7 + 6;
    }
    else
    {
      qword_254A60F60 = 0;
      unk_254A60F68 = 0;
      qword_254A60F58 = 0x2074736E6F63;
      byte_254A60F6F = v2 + 6;
      v4 = (char *)&qword_254A60F58 + 6;
      if (!v2)
      {
LABEL_18:
        v4[v2] = 0;
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &qword_254A60F58, &dword_20E81F000);
        __cxa_guard_release(&qword_254A60A10);
        return;
      }
    }
    if (v1 >= 0)
      v8 = &xmmword_254A60F70;
    else
      v8 = (__int128 *)xmmword_254A60F70;
    memmove(v4, v8, v2);
    goto LABEL_18;
  }
}

void sub_20EFB1390(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A60A10);
  _Unwind_Resume(a1);
}

void sub_20EFB13A8()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_254A60A18);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A60A18))
  {
    sub_20EFB1460();
    if (byte_254A60F9F < 0)
    {
      sub_20E860C04(&xmmword_254A60F70, (void *)qword_254A60F88, unk_254A60F90);
    }
    else
    {
      xmmword_254A60F70 = *(_OWORD *)&qword_254A60F88;
      unk_254A60F80 = unk_254A60F98;
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A60F70, &dword_20E81F000);
    __cxa_guard_release(&qword_254A60A18);
  }
}

void sub_20EFB1448(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A60A18);
  _Unwind_Resume(a1);
}

void sub_20EFB1460()
{
  unsigned __int8 v0;
  void *__p[2];
  char v2;

  v0 = atomic_load((unsigned __int8 *)&qword_254A60A20);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A60A20))
  {
    sub_20EFB1708(__p);
    sub_20EFB1534((char *)__p);
    if (v2 < 0)
      operator delete(__p[0]);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &qword_254A60F88, &dword_20E81F000);
    __cxa_guard_release(&qword_254A60A20);
  }
}

void sub_20EFB14F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A60A20);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A60A20);
  _Unwind_Resume(a1);
}

void sub_20EFB1534(char *a1)
{
  unsigned __int8 v2;
  int64x2_t v3;
  int8x16_t v4;
  void **v5;
  void **v6;
  void *v7;
  void *__p;
  void **v9;
  void *__dst[2];
  uint64_t v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v2 = atomic_load((unsigned __int8 *)&qword_254A60A28);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254A60A28))
  {
    sub_20EFB18E4();
    if (byte_254A60FE7 < 0)
    {
      sub_20E860C04(&xmmword_254A60FA0, (void *)xmmword_254A60FD0, *((unint64_t *)&xmmword_254A60FD0 + 1));
    }
    else
    {
      xmmword_254A60FA0 = xmmword_254A60FD0;
      unk_254A60FB0 = unk_254A60FE0;
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A60FA0, &dword_20E81F000);
    __cxa_guard_release(&qword_254A60A28);
  }
  if (byte_254A60FB7 < 0)
  {
    sub_20E860C04(__dst, (void *)xmmword_254A60FA0, *((unint64_t *)&xmmword_254A60FA0 + 1));
  }
  else
  {
    *(_OWORD *)__dst = xmmword_254A60FA0;
    v11 = unk_254A60FB0;
  }
  sub_20E877C80(&__p, (uint64_t)__dst, 1uLL);
  sub_21023CE38(a1, (uint64_t *)&__p, (std::string *)&qword_254A60F88, v3, v4);
  v5 = (void **)__p;
  if (__p)
  {
    v6 = v9;
    v7 = __p;
    if (v9 != __p)
    {
      do
      {
        if (*((char *)v6 - 1) < 0)
          operator delete(*(v6 - 3));
        v6 -= 3;
      }
      while (v6 != v5);
      v7 = __p;
    }
    v9 = v5;
    operator delete(v7);
  }
  if (SHIBYTE(v11) < 0)
    operator delete(__dst[0]);
}

void sub_20EFB16C0(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A60A28);
  _Unwind_Resume(a1);
}

void sub_20EFB16DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  sub_20E89FB98(&a10);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_20EFB1708(_QWORD *__dst)
{
  unsigned __int8 v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  size_t v5;

  v2 = atomic_load((unsigned __int8 *)&qword_254A60A40);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254A60A40))
  {
    sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::concurrency::ChannelOutput<cv3d::vio::mapping_io::SubmapSaveResult>]", qword_254A60FE8);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254A60FE8, &dword_20E81F000);
    __cxa_guard_release(&qword_254A60A40);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_254A60A48);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_254A60A48))
  {
    v5 = sub_20E8A2354(qword_254A60FE8, "<", 0);
    sub_20E89FC08(qword_254A60FE8, 0, v5, qword_254A61000);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254A61000, &dword_20E81F000);
    __cxa_guard_release(&qword_254A60A48);
  }
  v4 = atomic_load((unsigned __int8 *)&qword_254A60A50);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_254A60A50))
  {
    sub_21023CD84((uint64_t)qword_254A61000, (uint64_t)&xmmword_254A61018);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A61018, &dword_20E81F000);
    __cxa_guard_release(&qword_254A60A50);
  }
  if (byte_254A6102F < 0)
  {
    sub_20E860C04(__dst, (void *)xmmword_254A61018, *((unint64_t *)&xmmword_254A61018 + 1));
  }
  else
  {
    *(_OWORD *)__dst = xmmword_254A61018;
    __dst[2] = unk_254A61028;
  }
}

void sub_20EFB189C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A60A50);
  _Unwind_Resume(a1);
}

void sub_20EFB18B4(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A60A48);
  _Unwind_Resume(a1);
}

void sub_20EFB18CC(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A60A40);
  _Unwind_Resume(a1);
}

void sub_20EFB18E4()
{
  unsigned __int8 v0;
  unsigned __int8 v1;

  v0 = atomic_load((unsigned __int8 *)&qword_254A60A30);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A60A30))
  {
    sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::vio::mapping_io::SubmapSaveResult]", qword_254A60FB8);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254A60FB8, &dword_20E81F000);
    __cxa_guard_release(&qword_254A60A30);
  }
  v1 = atomic_load((unsigned __int8 *)&qword_254A60A38);
  if ((v1 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_254A60A38))
    {
      sub_21023CD84((uint64_t)qword_254A60FB8, (uint64_t)&xmmword_254A60FD0);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A60FD0, &dword_20E81F000);
      __cxa_guard_release(&qword_254A60A38);
    }
  }
}

void sub_20EFB19B4(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A60A38);
  _Unwind_Resume(a1);
}

void sub_20EFB19CC(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A60A30);
  _Unwind_Resume(a1);
}

void sub_20EFB19E4()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_254A60A58);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A60A58))
  {
    sub_20EFB1A9C();
    if (byte_254A61077 < 0)
    {
      sub_20E860C04(&xmmword_254A61030, (void *)xmmword_254A61060, *((unint64_t *)&xmmword_254A61060 + 1));
    }
    else
    {
      xmmword_254A61030 = xmmword_254A61060;
      unk_254A61040 = unk_254A61070;
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A61030, &dword_20E81F000);
    __cxa_guard_release(&qword_254A60A58);
  }
}

void sub_20EFB1A84(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A60A58);
  _Unwind_Resume(a1);
}

void sub_20EFB1A9C()
{
  unsigned __int8 v0;
  unsigned __int8 v1;

  v0 = atomic_load((unsigned __int8 *)&qword_254A60A60);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A60A60))
  {
    sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::concurrency::ReturnOrThrow<cv3d::vio::mapping_io::SubmapSaveResult, cv3d::vio::mapping_io::MappingIONodeGroupError> (const std::shared_ptr<const cv3d::vio::mapping_io::SubmapSaveBundle> &)]", qword_254A61048);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254A61048, &dword_20E81F000);
    __cxa_guard_release(&qword_254A60A60);
  }
  v1 = atomic_load((unsigned __int8 *)&qword_254A60A68);
  if ((v1 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_254A60A68))
    {
      sub_21023CD84((uint64_t)qword_254A61048, (uint64_t)&xmmword_254A61060);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A61060, &dword_20E81F000);
      __cxa_guard_release(&qword_254A60A68);
    }
  }
}

void sub_20EFB1B6C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A60A68);
  _Unwind_Resume(a1);
}

void sub_20EFB1B84(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A60A60);
  _Unwind_Resume(a1);
}

void sub_20EFB1B9C()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_254A60A70);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A60A70))
  {
    sub_20EFB1C54();
    if (byte_254A610BF < 0)
    {
      sub_20E860C04(&xmmword_254A61078, (void *)xmmword_254A610A8, *((unint64_t *)&xmmword_254A610A8 + 1));
    }
    else
    {
      xmmword_254A61078 = xmmword_254A610A8;
      unk_254A61088 = unk_254A610B8;
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A61078, &dword_20E81F000);
    __cxa_guard_release(&qword_254A60A70);
  }
}

void sub_20EFB1C3C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A60A70);
  _Unwind_Resume(a1);
}

void sub_20EFB1C54()
{
  unsigned __int8 v0;
  unsigned __int8 v1;

  v0 = atomic_load((unsigned __int8 *)&qword_254A60A78);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A60A78))
  {
    sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::concurrency::ReturnOrThrow<void, cv3d::vio::mapping_io::MappingIONodeGroupError> (const std::shared_ptr<const cv3d::vio::feature_detection::VIOFrameDebugEvent> &)]", qword_254A61090);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254A61090, &dword_20E81F000);
    __cxa_guard_release(&qword_254A60A78);
  }
  v1 = atomic_load((unsigned __int8 *)&qword_254A60A80);
  if ((v1 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_254A60A80))
    {
      sub_21023CD84((uint64_t)qword_254A61090, (uint64_t)&xmmword_254A610A8);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A610A8, &dword_20E81F000);
      __cxa_guard_release(&qword_254A60A80);
    }
  }
}

void sub_20EFB1D24(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A60A80);
  _Unwind_Resume(a1);
}

void sub_20EFB1D3C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A60A78);
  _Unwind_Resume(a1);
}

void sub_20EFB1D54()
{
  unsigned __int8 v0;
  int v1;
  size_t v2;
  unint64_t v3;
  __int128 *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;

  v0 = atomic_load((unsigned __int8 *)&qword_254A60A88);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A60A88))
  {
    sub_20EFB1EAC();
    v1 = byte_254A610EF;
    if (byte_254A610EF >= 0)
      v2 = byte_254A610EF;
    else
      v2 = qword_254A610E0;
    v3 = v2 + 1;
    if (v2 + 1 >= 0x7FFFFFFFFFFFFFF8)
      sub_20E860B7C();
    if (v3 >= 0x17)
    {
      v5 = (v3 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v3 | 7) != 0x17)
        v5 = v3 | 7;
      v6 = v5 + 1;
      v4 = (__int128 *)operator new(v5 + 1);
      *((_QWORD *)&xmmword_254A610C0 + 1) = v2 + 1;
      unk_254A610D0 = v6 | 0x8000000000000000;
      *(_QWORD *)&xmmword_254A610C0 = v4;
    }
    else
    {
      v4 = &xmmword_254A610C0;
      unk_254A610D0 = 0;
      xmmword_254A610C0 = 0uLL;
      byte_254A610D7 = v2 + 1;
      if (!v2)
      {
LABEL_18:
        *(_WORD *)((char *)v4 + v2) = 38;
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A610C0, &dword_20E81F000);
        __cxa_guard_release(&qword_254A60A88);
        return;
      }
    }
    if (v1 >= 0)
      v7 = &qword_254A610D8;
    else
      v7 = (uint64_t *)qword_254A610D8;
    memmove(v4, v7, v2);
    goto LABEL_18;
  }
}

void sub_20EFB1E94(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A60A88);
  _Unwind_Resume(a1);
}

void sub_20EFB1EAC()
{
  unsigned __int8 v0;
  int v1;
  size_t v2;
  unint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  __int128 *v8;

  v0 = atomic_load((unsigned __int8 *)&qword_254A60A90);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A60A90))
  {
    sub_20EFB202C();
    v1 = byte_254A61107;
    if (byte_254A61107 >= 0)
      v2 = byte_254A61107;
    else
      v2 = *((_QWORD *)&xmmword_254A610F0 + 1);
    v3 = v2 + 6;
    if (v2 + 6 >= 0x7FFFFFFFFFFFFFF8)
      sub_20E860B7C();
    if (v3 >= 0x17)
    {
      v5 = (v3 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v3 | 7) != 0x17)
        v5 = v3 | 7;
      v6 = v5 + 1;
      v7 = (char *)operator new(v5 + 1);
      qword_254A610E0 = v2 + 6;
      unk_254A610E8 = v6 | 0x8000000000000000;
      qword_254A610D8 = (uint64_t)v7;
      *(_DWORD *)v7 = 1936617315;
      *((_WORD *)v7 + 2) = 8308;
      v4 = v7 + 6;
    }
    else
    {
      qword_254A610E0 = 0;
      unk_254A610E8 = 0;
      qword_254A610D8 = 0x2074736E6F63;
      byte_254A610EF = v2 + 6;
      v4 = (char *)&qword_254A610D8 + 6;
      if (!v2)
      {
LABEL_18:
        v4[v2] = 0;
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &qword_254A610D8, &dword_20E81F000);
        __cxa_guard_release(&qword_254A60A90);
        return;
      }
    }
    if (v1 >= 0)
      v8 = &xmmword_254A610F0;
    else
      v8 = (__int128 *)xmmword_254A610F0;
    memmove(v4, v8, v2);
    goto LABEL_18;
  }
}

void sub_20EFB2014(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A60A90);
  _Unwind_Resume(a1);
}

void sub_20EFB202C()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_254A60A98);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A60A98))
  {
    sub_20EFB20E4();
    if (byte_254A6111F < 0)
    {
      sub_20E860C04(&xmmword_254A610F0, (void *)qword_254A61108, unk_254A61110);
    }
    else
    {
      xmmword_254A610F0 = *(_OWORD *)&qword_254A61108;
      unk_254A61100 = unk_254A61118;
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A610F0, &dword_20E81F000);
    __cxa_guard_release(&qword_254A60A98);
  }
}

void sub_20EFB20CC(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A60A98);
  _Unwind_Resume(a1);
}

void sub_20EFB20E4()
{
  unsigned __int8 v0;
  void *__p[2];
  char v2;

  v0 = atomic_load((unsigned __int8 *)&qword_254A60AA0);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A60AA0))
  {
    sub_20EFB238C(__p);
    sub_20EFB21B8((char *)__p);
    if (v2 < 0)
      operator delete(__p[0]);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &qword_254A61108, &dword_20E81F000);
    __cxa_guard_release(&qword_254A60AA0);
  }
}

void sub_20EFB2178(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A60AA0);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A60AA0);
  _Unwind_Resume(a1);
}

void sub_20EFB21B8(char *a1)
{
  unsigned __int8 v2;
  int64x2_t v3;
  int8x16_t v4;
  void **v5;
  void **v6;
  void *v7;
  void *__p;
  void **v9;
  void *__dst[2];
  uint64_t v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v2 = atomic_load((unsigned __int8 *)&qword_254A60AA8);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254A60AA8))
  {
    sub_20EFB2568();
    if (byte_254A61167 < 0)
    {
      sub_20E860C04(&xmmword_254A61120, (void *)xmmword_254A61150, *((unint64_t *)&xmmword_254A61150 + 1));
    }
    else
    {
      xmmword_254A61120 = xmmword_254A61150;
      unk_254A61130 = unk_254A61160;
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A61120, &dword_20E81F000);
    __cxa_guard_release(&qword_254A60AA8);
  }
  if (byte_254A61137 < 0)
  {
    sub_20E860C04(__dst, (void *)xmmword_254A61120, *((unint64_t *)&xmmword_254A61120 + 1));
  }
  else
  {
    *(_OWORD *)__dst = xmmword_254A61120;
    v11 = unk_254A61130;
  }
  sub_20E877C80(&__p, (uint64_t)__dst, 1uLL);
  sub_21023CE38(a1, (uint64_t *)&__p, (std::string *)&qword_254A61108, v3, v4);
  v5 = (void **)__p;
  if (__p)
  {
    v6 = v9;
    v7 = __p;
    if (v9 != __p)
    {
      do
      {
        if (*((char *)v6 - 1) < 0)
          operator delete(*(v6 - 3));
        v6 -= 3;
      }
      while (v6 != v5);
      v7 = __p;
    }
    v9 = v5;
    operator delete(v7);
  }
  if (SHIBYTE(v11) < 0)
    operator delete(__dst[0]);
}

void sub_20EFB2344(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A60AA8);
  _Unwind_Resume(a1);
}

void sub_20EFB2360(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  sub_20E89FB98(&a10);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_20EFB238C(_QWORD *__dst)
{
  unsigned __int8 v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  size_t v5;

  v2 = atomic_load((unsigned __int8 *)&qword_254A60AC0);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254A60AC0))
  {
    sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::concurrency::ChannelOutput<cv3d::vio::mapping_io::PauseResumeRequest>]", qword_254A61168);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254A61168, &dword_20E81F000);
    __cxa_guard_release(&qword_254A60AC0);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_254A60AC8);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_254A60AC8))
  {
    v5 = sub_20E8A2354(qword_254A61168, "<", 0);
    sub_20E89FC08(qword_254A61168, 0, v5, qword_254A61180);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254A61180, &dword_20E81F000);
    __cxa_guard_release(&qword_254A60AC8);
  }
  v4 = atomic_load((unsigned __int8 *)&qword_254A60AD0);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_254A60AD0))
  {
    sub_21023CD84((uint64_t)qword_254A61180, (uint64_t)&xmmword_254A61198);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A61198, &dword_20E81F000);
    __cxa_guard_release(&qword_254A60AD0);
  }
  if (byte_254A611AF < 0)
  {
    sub_20E860C04(__dst, (void *)xmmword_254A61198, *((unint64_t *)&xmmword_254A61198 + 1));
  }
  else
  {
    *(_OWORD *)__dst = xmmword_254A61198;
    __dst[2] = unk_254A611A8;
  }
}

void sub_20EFB2520(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A60AD0);
  _Unwind_Resume(a1);
}

void sub_20EFB2538(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A60AC8);
  _Unwind_Resume(a1);
}

void sub_20EFB2550(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A60AC0);
  _Unwind_Resume(a1);
}

void sub_20EFB2568()
{
  unsigned __int8 v0;
  unsigned __int8 v1;

  v0 = atomic_load((unsigned __int8 *)&qword_254A60AB0);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A60AB0))
  {
    sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::vio::mapping_io::PauseResumeRequest]", qword_254A61138);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254A61138, &dword_20E81F000);
    __cxa_guard_release(&qword_254A60AB0);
  }
  v1 = atomic_load((unsigned __int8 *)&qword_254A60AB8);
  if ((v1 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_254A60AB8))
    {
      sub_21023CD84((uint64_t)qword_254A61138, (uint64_t)&xmmword_254A61150);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A61150, &dword_20E81F000);
      __cxa_guard_release(&qword_254A60AB8);
    }
  }
}

void sub_20EFB2638(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A60AB8);
  _Unwind_Resume(a1);
}

void sub_20EFB2650(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A60AB0);
  _Unwind_Resume(a1);
}

void sub_20EFB2668()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_254A60AD8);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A60AD8))
  {
    sub_20EFB2720();
    if (byte_254A611F7 < 0)
    {
      sub_20E860C04(&xmmword_254A611B0, (void *)xmmword_254A611E0, *((unint64_t *)&xmmword_254A611E0 + 1));
    }
    else
    {
      xmmword_254A611B0 = xmmword_254A611E0;
      unk_254A611C0 = unk_254A611F0;
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A611B0, &dword_20E81F000);
    __cxa_guard_release(&qword_254A60AD8);
  }
}

void sub_20EFB2708(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A60AD8);
  _Unwind_Resume(a1);
}

void sub_20EFB2720()
{
  unsigned __int8 v0;
  unsigned __int8 v1;

  v0 = atomic_load((unsigned __int8 *)&qword_254A60AE0);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A60AE0))
  {
    sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::concurrency::ReturnOrThrow<cv3d::vio::mapping_io::PauseResumeRequest, cv3d::vio::mapping_io::MappingIONodeGroupError> (const cv3d::vio::mapping_io::PauseResumeRequest &)]", qword_254A611C8);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254A611C8, &dword_20E81F000);
    __cxa_guard_release(&qword_254A60AE0);
  }
  v1 = atomic_load((unsigned __int8 *)&qword_254A60AE8);
  if ((v1 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_254A60AE8))
    {
      sub_21023CD84((uint64_t)qword_254A611C8, (uint64_t)&xmmword_254A611E0);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A611E0, &dword_20E81F000);
      __cxa_guard_release(&qword_254A60AE8);
    }
  }
}

void sub_20EFB27F0(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A60AE8);
  _Unwind_Resume(a1);
}

void sub_20EFB2808(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A60AE0);
  _Unwind_Resume(a1);
}

void sub_20EFB2820()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_254A60AF0);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A60AF0))
  {
    sub_20EFB28D8();
    if (byte_254A6123F < 0)
    {
      sub_20E860C04(&xmmword_254A611F8, (void *)xmmword_254A61228, *((unint64_t *)&xmmword_254A61228 + 1));
    }
    else
    {
      xmmword_254A611F8 = xmmword_254A61228;
      unk_254A61208 = unk_254A61238;
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A611F8, &dword_20E81F000);
    __cxa_guard_release(&qword_254A60AF0);
  }
}

void sub_20EFB28C0(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A60AF0);
  _Unwind_Resume(a1);
}

void sub_20EFB28D8()
{
  unsigned __int8 v0;
  unsigned __int8 v1;

  v0 = atomic_load((unsigned __int8 *)&qword_254A60AF8);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A60AF8))
  {
    sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::concurrency::ReturnOrThrow<void, cv3d::vio::mapping_io::MappingIONodeGroupError> (const std::reference_wrapper<cv3d::kit::concurrency::DoubleBuffer<std::vector<cv3d::vio::mapping_io::SubmapLoadBundle>>> &)]", qword_254A61210);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254A61210, &dword_20E81F000);
    __cxa_guard_release(&qword_254A60AF8);
  }
  v1 = atomic_load((unsigned __int8 *)&qword_254A60B00);
  if ((v1 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_254A60B00))
    {
      sub_21023CD84((uint64_t)qword_254A61210, (uint64_t)&xmmword_254A61228);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A61228, &dword_20E81F000);
      __cxa_guard_release(&qword_254A60B00);
    }
  }
}

void sub_20EFB29A8(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A60B00);
  _Unwind_Resume(a1);
}

void sub_20EFB29C0(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A60AF8);
  _Unwind_Resume(a1);
}

void sub_20EFB29D8()
{
  unsigned __int8 v0;
  int v1;
  size_t v2;
  unint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  __int128 *v8;

  v0 = atomic_load((unsigned __int8 *)&qword_254A60B10);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A60B10))
  {
    sub_20EFB2B58();
    v1 = byte_254A61287;
    if (byte_254A61287 >= 0)
      v2 = byte_254A61287;
    else
      v2 = *((_QWORD *)&xmmword_254A61270 + 1);
    v3 = v2 + 6;
    if (v2 + 6 >= 0x7FFFFFFFFFFFFFF8)
      sub_20E860B7C();
    if (v3 >= 0x17)
    {
      v5 = (v3 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v3 | 7) != 0x17)
        v5 = v3 | 7;
      v6 = v5 + 1;
      v7 = (char *)operator new(v5 + 1);
      qword_254A61260 = v2 + 6;
      unk_254A61268 = v6 | 0x8000000000000000;
      qword_254A61258 = (uint64_t)v7;
      *(_DWORD *)v7 = 1936617315;
      *((_WORD *)v7 + 2) = 8308;
      v4 = v7 + 6;
    }
    else
    {
      qword_254A61260 = 0;
      unk_254A61268 = 0;
      qword_254A61258 = 0x2074736E6F63;
      byte_254A6126F = v2 + 6;
      v4 = (char *)&qword_254A61258 + 6;
      if (!v2)
      {
LABEL_18:
        v4[v2] = 0;
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &qword_254A61258, &dword_20E81F000);
        __cxa_guard_release(&qword_254A60B10);
        return;
      }
    }
    if (v1 >= 0)
      v8 = &xmmword_254A61270;
    else
      v8 = (__int128 *)xmmword_254A61270;
    memmove(v4, v8, v2);
    goto LABEL_18;
  }
}

void sub_20EFB2B40(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A60B10);
  _Unwind_Resume(a1);
}

void sub_20EFB2B58()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_254A60B18);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A60B18))
  {
    sub_20EFB2C10();
    if (byte_254A6129F < 0)
    {
      sub_20E860C04(&xmmword_254A61270, (void *)qword_254A61288, unk_254A61290);
    }
    else
    {
      xmmword_254A61270 = *(_OWORD *)&qword_254A61288;
      unk_254A61280 = unk_254A61298;
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A61270, &dword_20E81F000);
    __cxa_guard_release(&qword_254A60B18);
  }
}

void sub_20EFB2BF8(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A60B18);
  _Unwind_Resume(a1);
}

void sub_20EFB2C10()
{
  unsigned __int8 v0;
  void *__p[2];
  char v2;

  v0 = atomic_load((unsigned __int8 *)&qword_254A60B20);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A60B20))
  {
    sub_20EFB2CEC(__p);
    sub_20EFB0D70((std::string *)&qword_254A61288, (char *)__p);
    if (v2 < 0)
      operator delete(__p[0]);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &qword_254A61288, &dword_20E81F000);
    __cxa_guard_release(&qword_254A60B20);
  }
}

void sub_20EFB2CAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A60B20);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A60B20);
  _Unwind_Resume(a1);
}

void sub_20EFB2CEC(_QWORD *__dst)
{
  unsigned __int8 v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  size_t v5;

  v2 = atomic_load((unsigned __int8 *)&qword_254A60B28);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254A60B28))
  {
    sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::concurrency::ChannelOutput<cv3d::vio::mapping_io::MappingIONodeGroupError>]", qword_254A612A0);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254A612A0, &dword_20E81F000);
    __cxa_guard_release(&qword_254A60B28);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_254A60B30);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_254A60B30))
  {
    v5 = sub_20E8A2354(qword_254A612A0, "<", 0);
    sub_20E89FC08(qword_254A612A0, 0, v5, qword_254A612B8);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254A612B8, &dword_20E81F000);
    __cxa_guard_release(&qword_254A60B30);
  }
  v4 = atomic_load((unsigned __int8 *)&qword_254A60B38);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_254A60B38))
  {
    sub_21023CD84((uint64_t)qword_254A612B8, (uint64_t)&xmmword_254A612D0);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A612D0, &dword_20E81F000);
    __cxa_guard_release(&qword_254A60B38);
  }
  if (byte_254A612E7 < 0)
  {
    sub_20E860C04(__dst, (void *)xmmword_254A612D0, *((unint64_t *)&xmmword_254A612D0 + 1));
  }
  else
  {
    *(_OWORD *)__dst = xmmword_254A612D0;
    __dst[2] = unk_254A612E0;
  }
}

void sub_20EFB2E80(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A60B38);
  _Unwind_Resume(a1);
}

void sub_20EFB2E98(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A60B30);
  _Unwind_Resume(a1);
}

void sub_20EFB2EB0(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A60B28);
  _Unwind_Resume(a1);
}

void sub_20EFB2EC8()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_254A60B40);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A60B40))
  {
    sub_20EFB2F80();
    if (byte_254A6132F < 0)
    {
      sub_20E860C04(&xmmword_254A612E8, (void *)xmmword_254A61318, *((unint64_t *)&xmmword_254A61318 + 1));
    }
    else
    {
      xmmword_254A612E8 = xmmword_254A61318;
      unk_254A612F8 = unk_254A61328;
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A612E8, &dword_20E81F000);
    __cxa_guard_release(&qword_254A60B40);
  }
}

void sub_20EFB2F68(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A60B40);
  _Unwind_Resume(a1);
}

void sub_20EFB2F80()
{
  unsigned __int8 v0;
  unsigned __int8 v1;

  v0 = atomic_load((unsigned __int8 *)&qword_254A60B48);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A60B48))
  {
    sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::vio::mapping_io::MappingIONodeGroupError (const cv3d::vio::mapping_io::MappingIONodeGroupError &)]", qword_254A61300);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254A61300, &dword_20E81F000);
    __cxa_guard_release(&qword_254A60B48);
  }
  v1 = atomic_load((unsigned __int8 *)&qword_254A60B50);
  if ((v1 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_254A60B50))
    {
      sub_21023CD84((uint64_t)qword_254A61300, (uint64_t)&xmmword_254A61318);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A61318, &dword_20E81F000);
      __cxa_guard_release(&qword_254A60B50);
    }
  }
}

void sub_20EFB3050(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A60B50);
  _Unwind_Resume(a1);
}

void sub_20EFB3068(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A60B48);
  _Unwind_Resume(a1);
}

void sub_20EFB3080()
{
  unsigned __int8 v0;
  int v1;
  size_t v2;
  unint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  __int128 *v8;

  v0 = atomic_load((unsigned __int8 *)&qword_254A60B60);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A60B60))
  {
    sub_20EFB3200();
    v1 = byte_254A61377;
    if (byte_254A61377 >= 0)
      v2 = byte_254A61377;
    else
      v2 = *((_QWORD *)&xmmword_254A61360 + 1);
    v3 = v2 + 6;
    if (v2 + 6 >= 0x7FFFFFFFFFFFFFF8)
      sub_20E860B7C();
    if (v3 >= 0x17)
    {
      v5 = (v3 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v3 | 7) != 0x17)
        v5 = v3 | 7;
      v6 = v5 + 1;
      v7 = (char *)operator new(v5 + 1);
      qword_254A61350 = v2 + 6;
      unk_254A61358 = v6 | 0x8000000000000000;
      qword_254A61348 = (uint64_t)v7;
      *(_DWORD *)v7 = 1936617315;
      *((_WORD *)v7 + 2) = 8308;
      v4 = v7 + 6;
    }
    else
    {
      qword_254A61350 = 0;
      unk_254A61358 = 0;
      qword_254A61348 = 0x2074736E6F63;
      byte_254A6135F = v2 + 6;
      v4 = (char *)&qword_254A61348 + 6;
      if (!v2)
      {
LABEL_18:
        v4[v2] = 0;
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &qword_254A61348, &dword_20E81F000);
        __cxa_guard_release(&qword_254A60B60);
        return;
      }
    }
    if (v1 >= 0)
      v8 = &xmmword_254A61360;
    else
      v8 = (__int128 *)xmmword_254A61360;
    memmove(v4, v8, v2);
    goto LABEL_18;
  }
}

void sub_20EFB31E8(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A60B60);
  _Unwind_Resume(a1);
}

void sub_20EFB3200()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_254A60B68);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A60B68))
  {
    sub_20EFB32B8();
    if (byte_254A6138F < 0)
    {
      sub_20E860C04(&xmmword_254A61360, (void *)qword_254A61378, unk_254A61380);
    }
    else
    {
      xmmword_254A61360 = *(_OWORD *)&qword_254A61378;
      unk_254A61370 = unk_254A61388;
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A61360, &dword_20E81F000);
    __cxa_guard_release(&qword_254A60B68);
  }
}

void sub_20EFB32A0(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A60B68);
  _Unwind_Resume(a1);
}

void sub_20EFB32B8()
{
  unsigned __int8 v0;
  void *__p[2];
  char v2;

  v0 = atomic_load((unsigned __int8 *)&qword_254A60B70);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A60B70))
  {
    sub_20EFB3574(__p);
    sub_20EFB338C((char *)__p);
    if (v2 < 0)
      operator delete(__p[0]);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &qword_254A61378, &dword_20E81F000);
    __cxa_guard_release(&qword_254A60B70);
  }
}

void sub_20EFB334C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A60B70);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A60B70);
  _Unwind_Resume(a1);
}

void sub_20EFB338C(char *a1)
{
  unsigned __int8 v2;
  int64x2_t v3;
  int8x16_t v4;
  void **v5;
  void **v6;
  void *v7;
  void *__p;
  void **v9;
  void *v10[2];
  char v11;
  void *__dst[2];
  uint64_t v13;
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  v2 = atomic_load((unsigned __int8 *)&qword_254A60B78);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254A60B78))
  {
    sub_20E8610C0(v10, "std::shared_ptr");
    sub_20EFB3750((char *)v10);
    if (v11 < 0)
      operator delete(v10[0]);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A61390, &dword_20E81F000);
    __cxa_guard_release(&qword_254A60B78);
  }
  if (byte_254A613A7 < 0)
  {
    sub_20E860C04(__dst, (void *)xmmword_254A61390, *((unint64_t *)&xmmword_254A61390 + 1));
  }
  else
  {
    *(_OWORD *)__dst = xmmword_254A61390;
    v13 = unk_254A613A0;
  }
  sub_20E877C80(&__p, (uint64_t)__dst, 1uLL);
  sub_21023CE38(a1, (uint64_t *)&__p, (std::string *)&qword_254A61378, v3, v4);
  v5 = (void **)__p;
  if (__p)
  {
    v6 = v9;
    v7 = __p;
    if (v9 != __p)
    {
      do
      {
        if (*((char *)v6 - 1) < 0)
          operator delete(*(v6 - 3));
        v6 -= 3;
      }
      while (v6 != v5);
      v7 = __p;
    }
    v9 = v5;
    operator delete(v7);
  }
  if (SHIBYTE(v13) < 0)
    operator delete(__dst[0]);
}

void sub_20EFB3504(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A60B78);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A60B78);
  _Unwind_Resume(a1);
}

void sub_20EFB3548(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  sub_20E89FB98((void **)&a9);
  if (a20 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_20EFB3574(_QWORD *__dst)
{
  unsigned __int8 v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  size_t v5;

  v2 = atomic_load((unsigned __int8 *)&qword_254A60BA0);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254A60BA0))
  {
    sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::concurrency::ChannelOutput<std::shared_ptr<const cv3d::vio::mapping_io::MapLocationInfo>>]", qword_254A61408);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254A61408, &dword_20E81F000);
    __cxa_guard_release(&qword_254A60BA0);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_254A60BA8);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_254A60BA8))
  {
    v5 = sub_20E8A2354(qword_254A61408, "<", 0);
    sub_20E89FC08(qword_254A61408, 0, v5, qword_254A61420);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254A61420, &dword_20E81F000);
    __cxa_guard_release(&qword_254A60BA8);
  }
  v4 = atomic_load((unsigned __int8 *)&qword_254A60BB0);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_254A60BB0))
  {
    sub_21023CD84((uint64_t)qword_254A61420, (uint64_t)&xmmword_254A61438);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A61438, &dword_20E81F000);
    __cxa_guard_release(&qword_254A60BB0);
  }
  if (byte_254A6144F < 0)
  {
    sub_20E860C04(__dst, (void *)xmmword_254A61438, *((unint64_t *)&xmmword_254A61438 + 1));
  }
  else
  {
    *(_OWORD *)__dst = xmmword_254A61438;
    __dst[2] = unk_254A61448;
  }
}

void sub_20EFB3708(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A60BB0);
  _Unwind_Resume(a1);
}

void sub_20EFB3720(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A60BA8);
  _Unwind_Resume(a1);
}

void sub_20EFB3738(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A60BA0);
  _Unwind_Resume(a1);
}

void sub_20EFB3750(char *a1)
{
  unsigned __int8 v2;
  int64x2_t v3;
  int8x16_t v4;
  void **v5;
  void **v6;
  void *v7;
  int v8;
  size_t v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  __int128 *v15;
  void *__p;
  void **v17;
  void *__dst[2];
  uint64_t v19;
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  v2 = atomic_load((unsigned __int8 *)&qword_254A60B80);
  if ((v2 & 1) != 0 || !__cxa_guard_acquire(&qword_254A60B80))
    goto LABEL_2;
  sub_20EFB39E4();
  v8 = byte_254A613D7;
  if (byte_254A613D7 >= 0)
    v9 = byte_254A613D7;
  else
    v9 = *((_QWORD *)&xmmword_254A613C0 + 1);
  v10 = v9 + 6;
  if (v9 + 6 >= 0x7FFFFFFFFFFFFFF8)
    sub_20E860B7C();
  if (v10 >= 0x17)
  {
    v12 = (v10 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v10 | 7) != 0x17)
      v12 = v10 | 7;
    v13 = v12 + 1;
    v14 = (char *)operator new(v12 + 1);
    *((_QWORD *)&xmmword_254A613A8 + 1) = v9 + 6;
    unk_254A613B8 = v13 | 0x8000000000000000;
    *(_QWORD *)&xmmword_254A613A8 = v14;
    *(_DWORD *)v14 = 1936617315;
    *((_WORD *)v14 + 2) = 8308;
    v11 = v14 + 6;
    goto LABEL_27;
  }
  unk_254A613B8 = 0;
  xmmword_254A613A8 = 0x2074736E6F63uLL;
  byte_254A613BF = v9 + 6;
  v11 = (char *)&xmmword_254A613A8 + 6;
  if (v9)
  {
LABEL_27:
    if (v8 >= 0)
      v15 = &xmmword_254A613C0;
    else
      v15 = (__int128 *)xmmword_254A613C0;
    memmove(v11, v15, v9);
  }
  v11[v9] = 0;
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A613A8, &dword_20E81F000);
  __cxa_guard_release(&qword_254A60B80);
LABEL_2:
  if (byte_254A613BF < 0)
  {
    sub_20E860C04(__dst, (void *)xmmword_254A613A8, *((unint64_t *)&xmmword_254A613A8 + 1));
  }
  else
  {
    *(_OWORD *)__dst = xmmword_254A613A8;
    v19 = unk_254A613B8;
  }
  sub_20E877C80(&__p, (uint64_t)__dst, 1uLL);
  sub_21023CE38(a1, (uint64_t *)&__p, (std::string *)&xmmword_254A61390, v3, v4);
  v5 = (void **)__p;
  if (__p)
  {
    v6 = v17;
    v7 = __p;
    if (v17 != __p)
    {
      do
      {
        if (*((char *)v6 - 1) < 0)
          operator delete(*(v6 - 3));
        v6 -= 3;
      }
      while (v6 != v5);
      v7 = __p;
    }
    v17 = v5;
    operator delete(v7);
  }
  if (SHIBYTE(v19) < 0)
    operator delete(__dst[0]);
}

void sub_20EFB399C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A60B80);
  _Unwind_Resume(a1);
}

void sub_20EFB39B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  sub_20E89FB98(&a10);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_20EFB39E4()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_254A60B88);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A60B88))
  {
    sub_20EFB3A9C();
    if (byte_254A61407 < 0)
    {
      sub_20E860C04(&xmmword_254A613C0, (void *)xmmword_254A613F0, *((unint64_t *)&xmmword_254A613F0 + 1));
    }
    else
    {
      xmmword_254A613C0 = xmmword_254A613F0;
      unk_254A613D0 = unk_254A61400;
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A613C0, &dword_20E81F000);
    __cxa_guard_release(&qword_254A60B88);
  }
}

void sub_20EFB3A84(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A60B88);
  _Unwind_Resume(a1);
}

void sub_20EFB3A9C()
{
  unsigned __int8 v0;
  unsigned __int8 v1;

  v0 = atomic_load((unsigned __int8 *)&qword_254A60B90);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A60B90))
  {
    sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::vio::mapping_io::MapLocationInfo]", qword_254A613D8);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254A613D8, &dword_20E81F000);
    __cxa_guard_release(&qword_254A60B90);
  }
  v1 = atomic_load((unsigned __int8 *)&qword_254A60B98);
  if ((v1 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_254A60B98))
    {
      sub_21023CD84((uint64_t)qword_254A613D8, (uint64_t)&xmmword_254A613F0);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A613F0, &dword_20E81F000);
      __cxa_guard_release(&qword_254A60B98);
    }
  }
}

void sub_20EFB3B6C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A60B98);
  _Unwind_Resume(a1);
}

void sub_20EFB3B84(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A60B90);
  _Unwind_Resume(a1);
}

void sub_20EFB3B9C()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_254A60BB8);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A60BB8))
  {
    sub_20EFB3C54();
    if (byte_254A61497 < 0)
    {
      sub_20E860C04(&xmmword_254A61450, (void *)xmmword_254A61480, *((unint64_t *)&xmmword_254A61480 + 1));
    }
    else
    {
      xmmword_254A61450 = xmmword_254A61480;
      unk_254A61460 = unk_254A61490;
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A61450, &dword_20E81F000);
    __cxa_guard_release(&qword_254A60BB8);
  }
}

void sub_20EFB3C3C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A60BB8);
  _Unwind_Resume(a1);
}

void sub_20EFB3C54()
{
  unsigned __int8 v0;
  unsigned __int8 v1;

  v0 = atomic_load((unsigned __int8 *)&qword_254A60BC0);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A60BC0))
  {
    sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = std::shared_ptr<const cv3d::vio::mapping_io::MapLocationInfo> (const std::shared_ptr<const cv3d::vio::mapping_io::MapLocationInfo> &)]", qword_254A61468);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254A61468, &dword_20E81F000);
    __cxa_guard_release(&qword_254A60BC0);
  }
  v1 = atomic_load((unsigned __int8 *)&qword_254A60BC8);
  if ((v1 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_254A60BC8))
    {
      sub_21023CD84((uint64_t)qword_254A61468, (uint64_t)&xmmword_254A61480);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A61480, &dword_20E81F000);
      __cxa_guard_release(&qword_254A60BC8);
    }
  }
}

void sub_20EFB3D24(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A60BC8);
  _Unwind_Resume(a1);
}

void sub_20EFB3D3C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A60BC0);
  _Unwind_Resume(a1);
}

void sub_20EFB3D54()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_254A60BD0);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A60BD0))
  {
    sub_20EFB3E0C();
    if (byte_254A614DF < 0)
    {
      sub_20E860C04(&xmmword_254A61498, (void *)xmmword_254A614C8, *((unint64_t *)&xmmword_254A614C8 + 1));
    }
    else
    {
      xmmword_254A61498 = xmmword_254A614C8;
      unk_254A614A8 = unk_254A614D8;
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A61498, &dword_20E81F000);
    __cxa_guard_release(&qword_254A60BD0);
  }
}

void sub_20EFB3DF4(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A60BD0);
  _Unwind_Resume(a1);
}

void sub_20EFB3E0C()
{
  unsigned __int8 v0;
  unsigned __int8 v1;

  v0 = atomic_load((unsigned __int8 *)&qword_254A60BD8);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A60BD8))
  {
    sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = std::shared_ptr<const cv3d::vio::feature_detection::VIOFrameDebugEvent> (const std::shared_ptr<const cv3d::vio::feature_detection::VIOFrameDebugEvent> &)]", qword_254A614B0);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254A614B0, &dword_20E81F000);
    __cxa_guard_release(&qword_254A60BD8);
  }
  v1 = atomic_load((unsigned __int8 *)&qword_254A60BE0);
  if ((v1 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_254A60BE0))
    {
      sub_21023CD84((uint64_t)qword_254A614B0, (uint64_t)&xmmword_254A614C8);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A614C8, &dword_20E81F000);
      __cxa_guard_release(&qword_254A60BE0);
    }
  }
}

void sub_20EFB3EDC(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A60BE0);
  _Unwind_Resume(a1);
}

void sub_20EFB3EF4(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A60BD8);
  _Unwind_Resume(a1);
}

void sub_20EFB3F0C()
{
  unsigned __int8 v0;
  int v1;
  size_t v2;
  unint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  __int128 *v8;

  v0 = atomic_load((unsigned __int8 *)&qword_254A60BF0);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A60BF0))
  {
    sub_20EFB408C();
    v1 = byte_254A61527;
    if (byte_254A61527 >= 0)
      v2 = byte_254A61527;
    else
      v2 = *((_QWORD *)&xmmword_254A61510 + 1);
    v3 = v2 + 6;
    if (v2 + 6 >= 0x7FFFFFFFFFFFFFF8)
      sub_20E860B7C();
    if (v3 >= 0x17)
    {
      v5 = (v3 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v3 | 7) != 0x17)
        v5 = v3 | 7;
      v6 = v5 + 1;
      v7 = (char *)operator new(v5 + 1);
      qword_254A61500 = v2 + 6;
      unk_254A61508 = v6 | 0x8000000000000000;
      qword_254A614F8 = (uint64_t)v7;
      *(_DWORD *)v7 = 1936617315;
      *((_WORD *)v7 + 2) = 8308;
      v4 = v7 + 6;
    }
    else
    {
      qword_254A61500 = 0;
      unk_254A61508 = 0;
      qword_254A614F8 = 0x2074736E6F63;
      byte_254A6150F = v2 + 6;
      v4 = (char *)&qword_254A614F8 + 6;
      if (!v2)
      {
LABEL_18:
        v4[v2] = 0;
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &qword_254A614F8, &dword_20E81F000);
        __cxa_guard_release(&qword_254A60BF0);
        return;
      }
    }
    if (v1 >= 0)
      v8 = &xmmword_254A61510;
    else
      v8 = (__int128 *)xmmword_254A61510;
    memmove(v4, v8, v2);
    goto LABEL_18;
  }
}

void sub_20EFB4074(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A60BF0);
  _Unwind_Resume(a1);
}

void sub_20EFB408C()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_254A60BF8);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A60BF8))
  {
    sub_20EFB4144();
    if (byte_254A6153F < 0)
    {
      sub_20E860C04(&xmmword_254A61510, (void *)qword_254A61528, unk_254A61530);
    }
    else
    {
      xmmword_254A61510 = *(_OWORD *)&qword_254A61528;
      unk_254A61520 = unk_254A61538;
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A61510, &dword_20E81F000);
    __cxa_guard_release(&qword_254A60BF8);
  }
}

void sub_20EFB412C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A60BF8);
  _Unwind_Resume(a1);
}

void sub_20EFB4144()
{
  unsigned __int8 v0;
  void *__p[2];
  char v2;

  v0 = atomic_load((unsigned __int8 *)&qword_254A60C00);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A60C00))
  {
    sub_20EFB43EC(__p);
    sub_20EFB4218((char *)__p);
    if (v2 < 0)
      operator delete(__p[0]);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &qword_254A61528, &dword_20E81F000);
    __cxa_guard_release(&qword_254A60C00);
  }
}

void sub_20EFB41D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A60C00);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A60C00);
  _Unwind_Resume(a1);
}

void sub_20EFB4218(char *a1)
{
  unsigned __int8 v2;
  int64x2_t v3;
  int8x16_t v4;
  void **v5;
  void **v6;
  void *v7;
  void *__p;
  void **v9;
  void *__dst[2];
  uint64_t v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v2 = atomic_load((unsigned __int8 *)&qword_254A60C08);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254A60C08))
  {
    sub_20EFB45C8();
    if (byte_254A6156F < 0)
    {
      sub_20E860C04(&xmmword_254A61540, (void *)qword_254A61558, unk_254A61560);
    }
    else
    {
      xmmword_254A61540 = *(_OWORD *)&qword_254A61558;
      unk_254A61550 = unk_254A61568;
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A61540, &dword_20E81F000);
    __cxa_guard_release(&qword_254A60C08);
  }
  if (byte_254A61557 < 0)
  {
    sub_20E860C04(__dst, (void *)xmmword_254A61540, *((unint64_t *)&xmmword_254A61540 + 1));
  }
  else
  {
    *(_OWORD *)__dst = xmmword_254A61540;
    v11 = unk_254A61550;
  }
  sub_20E877C80(&__p, (uint64_t)__dst, 1uLL);
  sub_21023CE38(a1, (uint64_t *)&__p, (std::string *)&qword_254A61528, v3, v4);
  v5 = (void **)__p;
  if (__p)
  {
    v6 = v9;
    v7 = __p;
    if (v9 != __p)
    {
      do
      {
        if (*((char *)v6 - 1) < 0)
          operator delete(*(v6 - 3));
        v6 -= 3;
      }
      while (v6 != v5);
      v7 = __p;
    }
    v9 = v5;
    operator delete(v7);
  }
  if (SHIBYTE(v11) < 0)
    operator delete(__dst[0]);
}

void sub_20EFB43A4(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A60C08);
  _Unwind_Resume(a1);
}

void sub_20EFB43C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  sub_20E89FB98(&a10);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_20EFB43EC(_QWORD *__dst)
{
  unsigned __int8 v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  size_t v5;

  v2 = atomic_load((unsigned __int8 *)&qword_254A60C50);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254A60C50))
  {
    sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::concurrency::ChannelOutput<cv3d::kit::concurrency::SingleConsumer<const cv3d::vio::mapping_io::SubmapLoadBundle>>]", qword_254A61618);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254A61618, &dword_20E81F000);
    __cxa_guard_release(&qword_254A60C50);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_254A60C58);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_254A60C58))
  {
    v5 = sub_20E8A2354(qword_254A61618, "<", 0);
    sub_20E89FC08(qword_254A61618, 0, v5, qword_254A61630);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254A61630, &dword_20E81F000);
    __cxa_guard_release(&qword_254A60C58);
  }
  v4 = atomic_load((unsigned __int8 *)&qword_254A60C60);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_254A60C60))
  {
    sub_21023CD84((uint64_t)qword_254A61630, (uint64_t)&xmmword_254A61648);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A61648, &dword_20E81F000);
    __cxa_guard_release(&qword_254A60C60);
  }
  if (byte_254A6165F < 0)
  {
    sub_20E860C04(__dst, (void *)xmmword_254A61648, *((unint64_t *)&xmmword_254A61648 + 1));
  }
  else
  {
    *(_OWORD *)__dst = xmmword_254A61648;
    __dst[2] = unk_254A61658;
  }
}

void sub_20EFB4580(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A60C60);
  _Unwind_Resume(a1);
}

void sub_20EFB4598(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A60C58);
  _Unwind_Resume(a1);
}

void sub_20EFB45B0(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A60C50);
  _Unwind_Resume(a1);
}

void sub_20EFB45C8()
{
  unsigned __int8 v0;
  void *__p[2];
  char v2;

  v0 = atomic_load((unsigned __int8 *)&qword_254A60C10);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A60C10))
  {
    sub_20EFB4930(__p);
    sub_20EFB469C((char *)__p);
    if (v2 < 0)
      operator delete(__p[0]);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &qword_254A61558, &dword_20E81F000);
    __cxa_guard_release(&qword_254A60C10);
  }
}

void sub_20EFB465C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A60C10);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A60C10);
  _Unwind_Resume(a1);
}

void sub_20EFB469C(char *a1)
{
  unsigned __int8 v2;
  int64x2_t v3;
  int8x16_t v4;
  void **v5;
  void **v6;
  void *v7;
  int v8;
  size_t v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  __int128 *v15;
  void *__p;
  void **v17;
  void *__dst[2];
  uint64_t v19;
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  v2 = atomic_load((unsigned __int8 *)&qword_254A60C18);
  if ((v2 & 1) != 0 || !__cxa_guard_acquire(&qword_254A60C18))
    goto LABEL_2;
  sub_20EFB4B0C();
  v8 = byte_254A6159F;
  if (byte_254A6159F >= 0)
    v9 = byte_254A6159F;
  else
    v9 = *((_QWORD *)&xmmword_254A61588 + 1);
  v10 = v9 + 6;
  if (v9 + 6 >= 0x7FFFFFFFFFFFFFF8)
    sub_20E860B7C();
  if (v10 >= 0x17)
  {
    v12 = (v10 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v10 | 7) != 0x17)
      v12 = v10 | 7;
    v13 = v12 + 1;
    v14 = (char *)operator new(v12 + 1);
    *((_QWORD *)&xmmword_254A61570 + 1) = v9 + 6;
    unk_254A61580 = v13 | 0x8000000000000000;
    *(_QWORD *)&xmmword_254A61570 = v14;
    *(_DWORD *)v14 = 1936617315;
    *((_WORD *)v14 + 2) = 8308;
    v11 = v14 + 6;
    goto LABEL_27;
  }
  unk_254A61580 = 0;
  xmmword_254A61570 = 0x2074736E6F63uLL;
  byte_254A61587 = v9 + 6;
  v11 = (char *)&xmmword_254A61570 + 6;
  if (v9)
  {
LABEL_27:
    if (v8 >= 0)
      v15 = &xmmword_254A61588;
    else
      v15 = (__int128 *)xmmword_254A61588;
    memmove(v11, v15, v9);
  }
  v11[v9] = 0;
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A61570, &dword_20E81F000);
  __cxa_guard_release(&qword_254A60C18);
LABEL_2:
  if (byte_254A61587 < 0)
  {
    sub_20E860C04(__dst, (void *)xmmword_254A61570, *((unint64_t *)&xmmword_254A61570 + 1));
  }
  else
  {
    *(_OWORD *)__dst = xmmword_254A61570;
    v19 = unk_254A61580;
  }
  sub_20E877C80(&__p, (uint64_t)__dst, 1uLL);
  sub_21023CE38(a1, (uint64_t *)&__p, (std::string *)&qword_254A61558, v3, v4);
  v5 = (void **)__p;
  if (__p)
  {
    v6 = v17;
    v7 = __p;
    if (v17 != __p)
    {
      do
      {
        if (*((char *)v6 - 1) < 0)
          operator delete(*(v6 - 3));
        v6 -= 3;
      }
      while (v6 != v5);
      v7 = __p;
    }
    v17 = v5;
    operator delete(v7);
  }
  if (SHIBYTE(v19) < 0)
    operator delete(__dst[0]);
}

void sub_20EFB48E8(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A60C18);
  _Unwind_Resume(a1);
}

void sub_20EFB4904(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  sub_20E89FB98(&a10);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_20EFB4930(_QWORD *__dst)
{
  unsigned __int8 v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  size_t v5;

  v2 = atomic_load((unsigned __int8 *)&qword_254A60C38);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254A60C38))
  {
    sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::concurrency::SingleConsumer<const cv3d::vio::mapping_io::SubmapLoadBundle>]", qword_254A615D0);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254A615D0, &dword_20E81F000);
    __cxa_guard_release(&qword_254A60C38);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_254A60C40);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_254A60C40))
  {
    v5 = sub_20E8A2354(qword_254A615D0, "<", 0);
    sub_20E89FC08(qword_254A615D0, 0, v5, qword_254A615E8);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254A615E8, &dword_20E81F000);
    __cxa_guard_release(&qword_254A60C40);
  }
  v4 = atomic_load((unsigned __int8 *)&qword_254A60C48);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_254A60C48))
  {
    sub_21023CD84((uint64_t)qword_254A615E8, (uint64_t)&xmmword_254A61600);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A61600, &dword_20E81F000);
    __cxa_guard_release(&qword_254A60C48);
  }
  if (byte_254A61617 < 0)
  {
    sub_20E860C04(__dst, (void *)xmmword_254A61600, *((unint64_t *)&xmmword_254A61600 + 1));
  }
  else
  {
    *(_OWORD *)__dst = xmmword_254A61600;
    __dst[2] = unk_254A61610;
  }
}

void sub_20EFB4AC4(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A60C48);
  _Unwind_Resume(a1);
}

void sub_20EFB4ADC(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A60C40);
  _Unwind_Resume(a1);
}

void sub_20EFB4AF4(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A60C38);
  _Unwind_Resume(a1);
}

void sub_20EFB4B0C()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_254A60C20);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A60C20))
  {
    sub_20EFB4BC4();
    if (byte_254A615CF < 0)
    {
      sub_20E860C04(&xmmword_254A61588, (void *)xmmword_254A615B8, *((unint64_t *)&xmmword_254A615B8 + 1));
    }
    else
    {
      xmmword_254A61588 = xmmword_254A615B8;
      unk_254A61598 = unk_254A615C8;
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A61588, &dword_20E81F000);
    __cxa_guard_release(&qword_254A60C20);
  }
}

void sub_20EFB4BAC(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A60C20);
  _Unwind_Resume(a1);
}

void sub_20EFB4BC4()
{
  unsigned __int8 v0;
  unsigned __int8 v1;

  v0 = atomic_load((unsigned __int8 *)&qword_254A60C28);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A60C28))
  {
    sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::vio::mapping_io::SubmapLoadBundle]", qword_254A615A0);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254A615A0, &dword_20E81F000);
    __cxa_guard_release(&qword_254A60C28);
  }
  v1 = atomic_load((unsigned __int8 *)&qword_254A60C30);
  if ((v1 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_254A60C30))
    {
      sub_21023CD84((uint64_t)qword_254A615A0, (uint64_t)&xmmword_254A615B8);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A615B8, &dword_20E81F000);
      __cxa_guard_release(&qword_254A60C30);
    }
  }
}

void sub_20EFB4C94(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A60C30);
  _Unwind_Resume(a1);
}

void sub_20EFB4CAC(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A60C28);
  _Unwind_Resume(a1);
}

void sub_20EFB4CC4()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_254A60C68);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A60C68))
  {
    sub_20EFB4D7C();
    if (byte_254A616A7 < 0)
    {
      sub_20E860C04(&xmmword_254A61660, (void *)xmmword_254A61690, *((unint64_t *)&xmmword_254A61690 + 1));
    }
    else
    {
      xmmword_254A61660 = xmmword_254A61690;
      unk_254A61670 = unk_254A616A0;
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A61660, &dword_20E81F000);
    __cxa_guard_release(&qword_254A60C68);
  }
}

void sub_20EFB4D64(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A60C68);
  _Unwind_Resume(a1);
}

void sub_20EFB4D7C()
{
  unsigned __int8 v0;
  unsigned __int8 v1;

  v0 = atomic_load((unsigned __int8 *)&qword_254A60C70);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A60C70))
  {
    sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::concurrency::SingleConsumer<cv3d::kit::concurrency::OptionalReturn<const cv3d::vio::mapping_io::SubmapLoadBundle>> (const cv3d::vio::mapping_io::SubmapLoadResult &)]", qword_254A61678);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254A61678, &dword_20E81F000);
    __cxa_guard_release(&qword_254A60C70);
  }
  v1 = atomic_load((unsigned __int8 *)&qword_254A60C78);
  if ((v1 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_254A60C78))
    {
      sub_21023CD84((uint64_t)qword_254A61678, (uint64_t)&xmmword_254A61690);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A61690, &dword_20E81F000);
      __cxa_guard_release(&qword_254A60C78);
    }
  }
}

void sub_20EFB4E4C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A60C78);
  _Unwind_Resume(a1);
}

void sub_20EFB4E64(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A60C70);
  _Unwind_Resume(a1);
}

void sub_20EFB4E7C()
{
  unsigned __int8 v0;
  int v1;
  size_t v2;
  unint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  __int128 *v8;

  v0 = atomic_load((unsigned __int8 *)&qword_254A60C88);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A60C88))
  {
    sub_20EFB4FFC();
    v1 = byte_254A616EF;
    if (byte_254A616EF >= 0)
      v2 = byte_254A616EF;
    else
      v2 = *((_QWORD *)&xmmword_254A616D8 + 1);
    v3 = v2 + 6;
    if (v2 + 6 >= 0x7FFFFFFFFFFFFFF8)
      sub_20E860B7C();
    if (v3 >= 0x17)
    {
      v5 = (v3 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v3 | 7) != 0x17)
        v5 = v3 | 7;
      v6 = v5 + 1;
      v7 = (char *)operator new(v5 + 1);
      qword_254A616C8 = v2 + 6;
      unk_254A616D0 = v6 | 0x8000000000000000;
      qword_254A616C0 = (uint64_t)v7;
      *(_DWORD *)v7 = 1936617315;
      *((_WORD *)v7 + 2) = 8308;
      v4 = v7 + 6;
    }
    else
    {
      qword_254A616C8 = 0;
      unk_254A616D0 = 0;
      qword_254A616C0 = 0x2074736E6F63;
      byte_254A616D7 = v2 + 6;
      v4 = (char *)&qword_254A616C0 + 6;
      if (!v2)
      {
LABEL_18:
        v4[v2] = 0;
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &qword_254A616C0, &dword_20E81F000);
        __cxa_guard_release(&qword_254A60C88);
        return;
      }
    }
    if (v1 >= 0)
      v8 = &xmmword_254A616D8;
    else
      v8 = (__int128 *)xmmword_254A616D8;
    memmove(v4, v8, v2);
    goto LABEL_18;
  }
}

void sub_20EFB4FE4(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A60C88);
  _Unwind_Resume(a1);
}

void sub_20EFB4FFC()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_254A60C90);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A60C90))
  {
    sub_20EFB50B4();
    if (byte_254A61707 < 0)
    {
      sub_20E860C04(&xmmword_254A616D8, (void *)qword_254A616F0, unk_254A616F8);
    }
    else
    {
      xmmword_254A616D8 = *(_OWORD *)&qword_254A616F0;
      unk_254A616E8 = unk_254A61700;
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A616D8, &dword_20E81F000);
    __cxa_guard_release(&qword_254A60C90);
  }
}

void sub_20EFB509C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A60C90);
  _Unwind_Resume(a1);
}

void sub_20EFB50B4()
{
  unsigned __int8 v0;
  void *__p[2];
  char v2;

  v0 = atomic_load((unsigned __int8 *)&qword_254A60C98);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A60C98))
  {
    sub_20EFB535C(__p);
    sub_20EFB5188((char *)__p);
    if (v2 < 0)
      operator delete(__p[0]);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &qword_254A616F0, &dword_20E81F000);
    __cxa_guard_release(&qword_254A60C98);
  }
}

void sub_20EFB5148(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A60C98);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A60C98);
  _Unwind_Resume(a1);
}

void sub_20EFB5188(char *a1)
{
  unsigned __int8 v2;
  int64x2_t v3;
  int8x16_t v4;
  void **v5;
  void **v6;
  void *v7;
  void *__p;
  void **v9;
  void *__dst[2];
  uint64_t v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v2 = atomic_load((unsigned __int8 *)&qword_254A60CA0);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254A60CA0))
  {
    sub_20EFB5538();
    if (byte_254A6174F < 0)
    {
      sub_20E860C04(&xmmword_254A61708, (void *)xmmword_254A61738, *((unint64_t *)&xmmword_254A61738 + 1));
    }
    else
    {
      xmmword_254A61708 = xmmword_254A61738;
      unk_254A61718 = unk_254A61748;
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A61708, &dword_20E81F000);
    __cxa_guard_release(&qword_254A60CA0);
  }
  if (byte_254A6171F < 0)
  {
    sub_20E860C04(__dst, (void *)xmmword_254A61708, *((unint64_t *)&xmmword_254A61708 + 1));
  }
  else
  {
    *(_OWORD *)__dst = xmmword_254A61708;
    v11 = unk_254A61718;
  }
  sub_20E877C80(&__p, (uint64_t)__dst, 1uLL);
  sub_21023CE38(a1, (uint64_t *)&__p, (std::string *)&qword_254A616F0, v3, v4);
  v5 = (void **)__p;
  if (__p)
  {
    v6 = v9;
    v7 = __p;
    if (v9 != __p)
    {
      do
      {
        if (*((char *)v6 - 1) < 0)
          operator delete(*(v6 - 3));
        v6 -= 3;
      }
      while (v6 != v5);
      v7 = __p;
    }
    v9 = v5;
    operator delete(v7);
  }
  if (SHIBYTE(v11) < 0)
    operator delete(__dst[0]);
}

void sub_20EFB5314(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A60CA0);
  _Unwind_Resume(a1);
}

void sub_20EFB5330(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  sub_20E89FB98(&a10);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_20EFB535C(_QWORD *__dst)
{
  unsigned __int8 v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  size_t v5;

  v2 = atomic_load((unsigned __int8 *)&qword_254A60CB8);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254A60CB8))
  {
    sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::concurrency::ChannelOutput<cv3d::vio::mapping_io::LocationRequest>]", qword_254A61750);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254A61750, &dword_20E81F000);
    __cxa_guard_release(&qword_254A60CB8);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_254A60CC0);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_254A60CC0))
  {
    v5 = sub_20E8A2354(qword_254A61750, "<", 0);
    sub_20E89FC08(qword_254A61750, 0, v5, qword_254A61768);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254A61768, &dword_20E81F000);
    __cxa_guard_release(&qword_254A60CC0);
  }
  v4 = atomic_load((unsigned __int8 *)&qword_254A60CC8);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_254A60CC8))
  {
    sub_21023CD84((uint64_t)qword_254A61768, (uint64_t)&xmmword_254A61780);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A61780, &dword_20E81F000);
    __cxa_guard_release(&qword_254A60CC8);
  }
  if (byte_254A61797 < 0)
  {
    sub_20E860C04(__dst, (void *)xmmword_254A61780, *((unint64_t *)&xmmword_254A61780 + 1));
  }
  else
  {
    *(_OWORD *)__dst = xmmword_254A61780;
    __dst[2] = unk_254A61790;
  }
}

void sub_20EFB54F0(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A60CC8);
  _Unwind_Resume(a1);
}

void sub_20EFB5508(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A60CC0);
  _Unwind_Resume(a1);
}

void sub_20EFB5520(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A60CB8);
  _Unwind_Resume(a1);
}

void sub_20EFB5538()
{
  unsigned __int8 v0;
  unsigned __int8 v1;

  v0 = atomic_load((unsigned __int8 *)&qword_254A60CA8);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A60CA8))
  {
    sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::vio::mapping_io::LocationRequest]", qword_254A61720);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254A61720, &dword_20E81F000);
    __cxa_guard_release(&qword_254A60CA8);
  }
  v1 = atomic_load((unsigned __int8 *)&qword_254A60CB0);
  if ((v1 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_254A60CB0))
    {
      sub_21023CD84((uint64_t)qword_254A61720, (uint64_t)&xmmword_254A61738);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A61738, &dword_20E81F000);
      __cxa_guard_release(&qword_254A60CB0);
    }
  }
}

void sub_20EFB5608(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A60CB0);
  _Unwind_Resume(a1);
}

void sub_20EFB5620(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A60CA8);
  _Unwind_Resume(a1);
}

void sub_20EFB5638()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_254A60CD0);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A60CD0))
  {
    sub_20EFB56F0();
    if (byte_254A617DF < 0)
    {
      sub_20E860C04(&xmmword_254A61798, (void *)xmmword_254A617C8, *((unint64_t *)&xmmword_254A617C8 + 1));
    }
    else
    {
      xmmword_254A61798 = xmmword_254A617C8;
      unk_254A617A8 = unk_254A617D8;
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A61798, &dword_20E81F000);
    __cxa_guard_release(&qword_254A60CD0);
  }
}

void sub_20EFB56D8(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A60CD0);
  _Unwind_Resume(a1);
}

void sub_20EFB56F0()
{
  unsigned __int8 v0;
  unsigned __int8 v1;

  v0 = atomic_load((unsigned __int8 *)&qword_254A60CD8);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A60CD8))
  {
    sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::concurrency::OptionalReturn<cv3d::vio::mapping_io::LocationRequest> (const cv3d::vio::mapping_io::SubmapSaveResult &)]", qword_254A617B0);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254A617B0, &dword_20E81F000);
    __cxa_guard_release(&qword_254A60CD8);
  }
  v1 = atomic_load((unsigned __int8 *)&qword_254A60CE0);
  if ((v1 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_254A60CE0))
    {
      sub_21023CD84((uint64_t)qword_254A617B0, (uint64_t)&xmmword_254A617C8);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A617C8, &dword_20E81F000);
      __cxa_guard_release(&qword_254A60CE0);
    }
  }
}

void sub_20EFB57C0(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A60CE0);
  _Unwind_Resume(a1);
}

void sub_20EFB57D8(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A60CD8);
  _Unwind_Resume(a1);
}

void sub_20EFB57F0()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_254A60CE8);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A60CE8))
  {
    sub_20EFB58A8();
    if (byte_254A61827 < 0)
    {
      sub_20E860C04(&xmmword_254A617E0, (void *)xmmword_254A61810, *((unint64_t *)&xmmword_254A61810 + 1));
    }
    else
    {
      xmmword_254A617E0 = xmmword_254A61810;
      unk_254A617F0 = unk_254A61820;
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A617E0, &dword_20E81F000);
    __cxa_guard_release(&qword_254A60CE8);
  }
}

void sub_20EFB5890(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A60CE8);
  _Unwind_Resume(a1);
}

void sub_20EFB58A8()
{
  unsigned __int8 v0;
  unsigned __int8 v1;

  v0 = atomic_load((unsigned __int8 *)&qword_254A60CF0);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A60CF0))
  {
    sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::concurrency::OptionalReturn<cv3d::vio::mapping_io::SubmapLoadResult> (const cv3d::vio::mapping_io::SubmapSaveResult &)]", qword_254A617F8);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254A617F8, &dword_20E81F000);
    __cxa_guard_release(&qword_254A60CF0);
  }
  v1 = atomic_load((unsigned __int8 *)&qword_254A60CF8);
  if ((v1 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_254A60CF8))
    {
      sub_21023CD84((uint64_t)qword_254A617F8, (uint64_t)&xmmword_254A61810);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A61810, &dword_20E81F000);
      __cxa_guard_release(&qword_254A60CF8);
    }
  }
}

void sub_20EFB5978(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A60CF8);
  _Unwind_Resume(a1);
}

void sub_20EFB5990(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A60CF0);
  _Unwind_Resume(a1);
}

void sub_20EFB59A8()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_254A60D00);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A60D00))
  {
    sub_20EFB5A60();
    if (byte_254A6186F < 0)
    {
      sub_20E860C04(&xmmword_254A61828, (void *)xmmword_254A61858, *((unint64_t *)&xmmword_254A61858 + 1));
    }
    else
    {
      xmmword_254A61828 = xmmword_254A61858;
      unk_254A61838 = unk_254A61868;
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A61828, &dword_20E81F000);
    __cxa_guard_release(&qword_254A60D00);
  }
}

void sub_20EFB5A48(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A60D00);
  _Unwind_Resume(a1);
}

void sub_20EFB5A60()
{
  unsigned __int8 v0;
  unsigned __int8 v1;

  v0 = atomic_load((unsigned __int8 *)&qword_254A60D08);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A60D08))
  {
    sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::vio::mapping_io::PauseResumeRequest (const cv3d::vio::mapping_io::PauseResumeRequest &)]", qword_254A61840);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254A61840, &dword_20E81F000);
    __cxa_guard_release(&qword_254A60D08);
  }
  v1 = atomic_load((unsigned __int8 *)&qword_254A60D10);
  if ((v1 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_254A60D10))
    {
      sub_21023CD84((uint64_t)qword_254A61840, (uint64_t)&xmmword_254A61858);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A61858, &dword_20E81F000);
      __cxa_guard_release(&qword_254A60D10);
    }
  }
}

void sub_20EFB5B30(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A60D10);
  _Unwind_Resume(a1);
}

void sub_20EFB5B48(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A60D08);
  _Unwind_Resume(a1);
}

void sub_20EFB5B6C(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9F2AD0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_20EFB5B7C(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9F2AD0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20EFB5BAC(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void sub_20EFB5BBC(uint64_t *a1, uint64_t a2, uint64_t *a3)
{
  unint64_t *v6;
  void *v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t *v12;
  unint64_t v13;
  __int128 v14;
  unint64_t *v15;
  unint64_t v16;
  void *v17;
  void *v18;
  char v19;
  unint64_t *v20;
  unint64_t v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  _QWORD *v25;
  std::__shared_weak_count *v26;
  unint64_t *p_shared_owners;
  std::__shared_weak_count *v28;
  unint64_t v29;
  unint64_t *p_shared_weak_owners;
  unint64_t v31;
  unint64_t v32;
  unint64_t *v33;
  unint64_t v34;
  unint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  __int128 v42;
  void *v43;
  __int128 v44;
  unint64_t *v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t *v50;
  unint64_t v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t *v54;
  unint64_t v55;
  uint64_t v56;
  unint64_t *v57;
  unint64_t v58;
  uint64_t v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  std::__shared_weak_count *v63;
  unint64_t *v64;
  unint64_t v65;
  unint64_t *v66;
  void *v67;
  unint64_t *v68;
  unint64_t v69;
  std::__shared_weak_count *v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t *v73;
  unint64_t v74;
  __int128 v75;
  unint64_t *v76;
  unint64_t v77;
  void *v78;
  void *v79;
  char v80;
  unint64_t *v81;
  unint64_t v82;
  char *v83;
  __int128 v84;
  uint64_t v85;
  _QWORD *v86;
  std::__shared_weak_count *v87;
  unint64_t *v88;
  std::__shared_weak_count *v89;
  unint64_t v90;
  unint64_t *v91;
  unint64_t v92;
  unint64_t v93;
  unint64_t *v94;
  unint64_t v95;
  unint64_t v96;
  std::__shared_weak_count *v97;
  unint64_t *v98;
  unint64_t v99;
  std::__shared_weak_count *v100;
  unint64_t *v101;
  unint64_t v102;
  __int128 v103;
  void *v104;
  void *v105;
  char *v106;
  unint64_t *v107;
  unint64_t v108;
  _QWORD *v109;
  uint64_t v110;
  uint64_t v111;
  unint64_t *v112;
  unint64_t v113;
  uint64_t v114;
  unint64_t v115;
  unint64_t *v116;
  unint64_t v117;
  uint64_t v118;
  unint64_t *v119;
  unint64_t v120;
  uint64_t v121;
  std::__shared_weak_count *v122;
  unint64_t *v123;
  unint64_t v124;
  std::__shared_weak_count *v125;
  unint64_t *v126;
  unint64_t v127;
  unint64_t *v128;
  void *v129;
  unint64_t *v130;
  unint64_t v131;
  std::__shared_weak_count *v132;
  uint64_t v133;
  uint64_t v134;
  unint64_t *v135;
  unint64_t v136;
  __int128 v137;
  unint64_t *v138;
  unint64_t v139;
  __int128 v140;
  char v141;
  unint64_t *v142;
  unint64_t v143;
  char *v144;
  __int128 v145;
  uint64_t v146;
  _QWORD *v147;
  std::__shared_weak_count *v148;
  unint64_t *v149;
  std::__shared_weak_count *v150;
  unint64_t v151;
  unint64_t *v152;
  unint64_t v153;
  unint64_t v154;
  unint64_t *v155;
  unint64_t v156;
  unint64_t v157;
  std::__shared_weak_count *v158;
  unint64_t *v159;
  unint64_t v160;
  std::__shared_weak_count *v161;
  unint64_t *v162;
  unint64_t v163;
  __int128 v164;
  void *v165;
  void *v166;
  char *v167;
  unint64_t *v168;
  unint64_t v169;
  _QWORD *v170;
  uint64_t v171;
  uint64_t v172;
  unint64_t *v173;
  unint64_t v174;
  uint64_t v175;
  unint64_t v176;
  unint64_t *v177;
  unint64_t v178;
  uint64_t v179;
  unint64_t *v180;
  unint64_t v181;
  uint64_t v182;
  std::__shared_weak_count *v183;
  unint64_t *v184;
  unint64_t v185;
  std::__shared_weak_count *v186;
  unint64_t *v187;
  unint64_t v188;
  std::__shared_weak_count *v189;
  void *v190;
  unint64_t *v191;
  unint64_t v192;
  std::__shared_weak_count *v193;
  uint64_t v194;
  uint64_t v195;
  unint64_t *v196;
  unint64_t v197;
  __int128 v198;
  unint64_t *v199;
  unint64_t v200;
  void *v201;
  void *v202;
  char v203;
  unint64_t *v204;
  unint64_t v205;
  char *v206;
  __int128 v207;
  uint64_t v208;
  _QWORD *v209;
  std::__shared_weak_count *v210;
  unint64_t *v211;
  std::__shared_weak_count *v212;
  unint64_t v213;
  unint64_t *v214;
  unint64_t v215;
  unint64_t v216;
  unint64_t *v217;
  unint64_t v218;
  unint64_t v219;
  std::__shared_weak_count *v220;
  unint64_t *v221;
  unint64_t v222;
  std::__shared_weak_count *v223;
  unint64_t *v224;
  unint64_t v225;
  __int128 v226;
  uint64_t v227;
  void *v228;
  char *v229;
  unint64_t *v230;
  unint64_t v231;
  _QWORD *v232;
  uint64_t v233;
  uint64_t v234;
  unint64_t *v235;
  unint64_t v236;
  uint64_t v237;
  unint64_t v238;
  unint64_t *v239;
  unint64_t v240;
  uint64_t v241;
  unint64_t *v242;
  unint64_t v243;
  uint64_t v244;
  std::__shared_weak_count *v245;
  unint64_t *v246;
  unint64_t v247;
  std::__shared_weak_count *v248;
  unint64_t *v249;
  unint64_t v250;
  uint64_t v251;
  void *v252;
  unint64_t *v253;
  unint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  unint64_t *v258;
  unint64_t v259;
  __int128 v260;
  unint64_t *v261;
  unint64_t v262;
  void *v263;
  void *v264;
  char v265;
  unint64_t *v266;
  unint64_t v267;
  uint64_t v268;
  __int128 v269;
  uint64_t v270;
  _QWORD *v271;
  std::__shared_weak_count *v272;
  unint64_t *v273;
  std::__shared_weak_count *v274;
  unint64_t v275;
  unint64_t *v276;
  unint64_t v277;
  unint64_t v278;
  unint64_t *v279;
  unint64_t v280;
  unint64_t v281;
  std::__shared_weak_count *v282;
  unint64_t *v283;
  unint64_t v284;
  std::__shared_weak_count *v285;
  unint64_t *v286;
  unint64_t v287;
  __int128 v288;
  __int128 v289;
  unint64_t *v290;
  unint64_t v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  unint64_t *v295;
  unint64_t v296;
  uint64_t v297;
  unint64_t v298;
  unint64_t *v299;
  unint64_t v300;
  uint64_t v301;
  unint64_t *v302;
  unint64_t v303;
  uint64_t v304;
  std::__shared_weak_count *v305;
  unint64_t *v306;
  unint64_t v307;
  std::__shared_weak_count *v308;
  unint64_t *v309;
  unint64_t v310;
  uint64_t v311;
  __int128 v312;
  __int128 v313;
  __int128 v314;
  __int128 v315;
  __int128 v316;
  uint64_t v317;
  __int128 v318;
  __int128 v319;
  __int128 v320;
  __int128 v321;
  __int128 v322;
  __int128 v323;
  __int128 v324;
  uint64_t v325;
  __int128 v326;
  __int128 v327;
  __int128 v328;
  __int128 v329;
  uint64_t v330;
  __int128 v331;
  __int128 v332;
  __int128 v333;
  __int128 v334;
  __int128 v335;
  __int128 v336;
  __int128 v337;
  __int128 v338;
  unint64_t *v339;
  unint64_t v340;
  std::__shared_weak_count *v341;
  unint64_t *v342;
  unint64_t v343;
  std::__shared_weak_count *v344;
  unint64_t *v345;
  unint64_t v346;
  std::__shared_weak_count *v347;
  unint64_t *v348;
  unint64_t v349;
  std::__shared_weak_count *v350;
  unint64_t *v351;
  unint64_t v352;
  std::__shared_weak_count *v353;
  unint64_t *v354;
  unint64_t v355;
  std::__shared_weak_count *v356;
  unint64_t *v357;
  unint64_t v358;
  std::__shared_weak_count *v359;
  unint64_t *v360;
  unint64_t v361;
  std::__shared_weak_count *v362;
  unint64_t *v363;
  unint64_t v364;
  uint64_t *v365;
  std::__shared_weak_count *v366;
  void *v367[3];
  uint64_t v368;
  __int128 v369;
  void *v370;
  __int128 v371;
  __int128 v372;
  uint64_t (**v373)();
  __int128 v374;
  uint64_t v375;
  uint64_t (**v376)();
  __int128 v377;
  uint64_t (**v378)();
  __int128 v379;
  uint64_t v380;
  std::__shared_weak_count *v381;
  void *v382;
  std::__shared_weak_count *v383;
  void *__dst[3];
  void *v385;
  __int128 v386;
  uint64_t v387;
  __int128 v388;
  __int128 v389;
  uint64_t (**v390)();
  __int128 v391;
  uint64_t v392;
  uint64_t (**v393)();
  __int128 v394;
  uint64_t (**v395)();
  __int128 v396;
  uint64_t v397;
  std::__shared_weak_count *v398;
  void *v399;
  std::__shared_weak_count *v400;
  void *__p[3];
  void *v402;
  __int128 v403;
  void *v404;
  __int128 v405;
  __int128 v406;
  uint64_t (**v407)();
  __int128 v408;
  uint64_t v409;
  uint64_t (**v410)();
  __int128 v411;
  uint64_t (**v412)();
  __int128 v413;
  uint64_t v414;
  std::__shared_weak_count *v415;
  void *v416;
  std::__shared_weak_count *v417;
  void *v418[3];
  void *v419;
  __int128 v420;
  void *v421;
  __int128 v422;
  __int128 v423;
  uint64_t (**v424)();
  __int128 v425;
  uint64_t v426;
  uint64_t (**v427)();
  __int128 v428;
  uint64_t (**v429)();
  __int128 v430;
  uint64_t v431;
  std::__shared_weak_count *v432;
  void *v433;
  std::__shared_weak_count *v434;
  uint64_t (**v435)();
  __int128 v436;
  void *v437;
  __int128 v438;
  void *v439;
  __int128 v440;
  __int128 v441;
  uint64_t (**v442)();
  __int128 v443;
  uint64_t v444;
  uint64_t (**v445)();
  __int128 v446;
  uint64_t (**v447)();
  __int128 v448;
  void *v449[2];
  void *v450;
  void *v451[4];
  void *__src[4];
  _OWORD v453[2];
  __int128 v454;
  __int128 v455;
  _QWORD v456[2];
  __int128 v457;
  _QWORD v458[2];
  __int128 v459;
  _QWORD v460[5];

  v460[2] = *MEMORY[0x24BDAC8D0];
  v7 = *(void **)a2;
  v6 = *(unint64_t **)(a2 + 8);
  v433 = *(void **)a2;
  v434 = (std::__shared_weak_count *)v6;
  if (v6)
  {
    v8 = v6 + 1;
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  v10 = *a3;
  v11 = (unint64_t *)a3[1];
  v431 = *a3;
  v432 = (std::__shared_weak_count *)v11;
  if (v11)
  {
    v12 = v11 + 1;
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  if (*(char *)(v10 + 31) < 0)
  {
    sub_20E860C04(__dst, *(void **)(v10 + 8), *(_QWORD *)(v10 + 16));
  }
  else
  {
    v14 = *(_OWORD *)(v10 + 8);
    __dst[2] = *(void **)(v10 + 24);
    *(_OWORD *)__dst = v14;
  }
  if (*(char *)(v10 + 55) < 0)
  {
    sub_20E860C04(v367, *(void **)(v10 + 32), *(_QWORD *)(v10 + 40));
  }
  else
  {
    *(_OWORD *)v367 = *(_OWORD *)(v10 + 32);
    v367[2] = *(void **)(v10 + 48);
  }
  v451[0] = v7;
  v451[1] = v6;
  v434 = 0;
  v433 = 0;
  v449[0] = (void *)v10;
  v449[1] = v11;
  if (v11)
  {
    v15 = v11 + 1;
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
  }
  if (SHIBYTE(__dst[2]) < 0)
  {
    sub_20E860C04(v418, __dst[0], (unint64_t)__dst[1]);
  }
  else
  {
    *(_OWORD *)v418 = *(_OWORD *)__dst;
    v418[2] = __dst[2];
  }
  if (SHIBYTE(v367[2]) < 0)
  {
    sub_20E860C04(__p, v367[0], (unint64_t)v367[1]);
  }
  else
  {
    *(_OWORD *)__p = *(_OWORD *)v367;
    __p[2] = v367[2];
  }
  *(void **)((char *)&v455 + 7) = *(void **)((char *)&__dst[1] + 7);
  v18 = __dst[0];
  v17 = __dst[1];
  BYTE7(v455) = HIBYTE(__dst[1]);
  v19 = HIBYTE(__dst[2]);
  memset(__dst, 0, sizeof(__dst));
  *(_QWORD *)&v457 = v17;
  *(_QWORD *)((char *)&v457 + 7) = *(_QWORD *)((char *)&v455 + 7);
  *(_QWORD *)((char *)&v455 + 7) = 0;
  *(_QWORD *)&v455 = 0;
  __src[0] = v7;
  __src[1] = v6;
  if (v6)
  {
    v20 = v6 + 1;
    do
      v21 = __ldxr(v20);
    while (__stxr(v21 + 1, v20));
  }
  v22 = operator new();
  *(_QWORD *)&v459 = v457;
  *(_QWORD *)((char *)&v459 + 7) = *(_QWORD *)((char *)&v457 + 7);
  *(_QWORD *)&v457 = 0;
  *(_QWORD *)((char *)&v457 + 7) = 0;
  v23 = *(_OWORD *)__src;
  __src[0] = 0;
  __src[1] = 0;
  *(_BYTE *)(v22 + 8) = 1;
  *(_QWORD *)(v22 + 32) = 0;
  *(_QWORD *)(v22 + 40) = 0;
  *(_QWORD *)v22 = &off_24C9F2E00;
  *(_QWORD *)(v22 + 16) = &unk_24C9F2E78;
  *(_QWORD *)(v22 + 24) = &unk_24C9F2EB8;
  v24 = v459;
  *(_QWORD *)(v22 + 63) = *(_QWORD *)((char *)&v459 + 7);
  *(_QWORD *)(v22 + 48) = v18;
  *(_QWORD *)(v22 + 56) = v24;
  *(_BYTE *)(v22 + 71) = v19;
  *(_QWORD *)&v459 = 0;
  *(_QWORD *)((char *)&v459 + 7) = 0;
  *(_OWORD *)(v22 + 72) = v23;
  v453[0] = 0uLL;
  v25 = (_QWORD *)operator new();
  *v25 = &off_24C9F2FC0;
  v25[1] = v10;
  v25[2] = v11;
  v449[1] = 0;
  v449[0] = 0;
  *(_QWORD *)(v22 + 144) = 0;
  *(_QWORD *)(v22 + 88) = v25;
  *(_QWORD *)(v22 + 96) = v22 + 96;
  *(_QWORD *)(v22 + 104) = v22 + 96;
  *(_QWORD *)(v22 + 112) = 0;
  *(_QWORD *)(v22 + 120) = v22 + 120;
  *(_QWORD *)(v22 + 128) = v22 + 120;
  *(_QWORD *)(v22 + 136) = 0;
  if (!*(_QWORD *)(v22 + 72)
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 109, (uint64_t)"scheduler_", 10, (uint64_t)"scheduler must be valid", 23, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v26 = (std::__shared_weak_count *)operator new();
  v26->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v26->__shared_owners_;
  v26->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9F34B0;
  v26->__shared_weak_owners_ = 0;
  v26[1].__vftable = (std::__shared_weak_count_vtbl *)v22;
  v28 = *(std::__shared_weak_count **)(v22 + 40);
  if (v28)
  {
    if (v28->__shared_owners_ != -1)
      goto LABEL_40;
    do
      v29 = __ldxr(p_shared_owners);
    while (__stxr(v29 + 1, p_shared_owners));
    p_shared_weak_owners = (unint64_t *)&v26->__shared_weak_owners_;
    do
      v31 = __ldxr(p_shared_weak_owners);
    while (__stxr(v31 + 1, p_shared_weak_owners));
    *(_QWORD *)(v22 + 32) = v22;
    *(_QWORD *)(v22 + 40) = v26;
    std::__shared_weak_count::__release_weak(v28);
  }
  else
  {
    do
      v32 = __ldxr(p_shared_owners);
    while (__stxr(v32 + 1, p_shared_owners));
    v33 = (unint64_t *)&v26->__shared_weak_owners_;
    do
      v34 = __ldxr(v33);
    while (__stxr(v34 + 1, v33));
    *(_QWORD *)(v22 + 32) = v22;
    *(_QWORD *)(v22 + 40) = v26;
  }
  do
    v35 = __ldaxr(p_shared_owners);
  while (__stlxr(v35 - 1, p_shared_owners));
  if (!v35)
  {
    ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
    std::__shared_weak_count::__release_weak(v26);
  }
LABEL_40:
  v36 = (std::__shared_weak_count *)*((_QWORD *)&v453[0] + 1);
  if (*((_QWORD *)&v453[0] + 1))
  {
    v37 = (unint64_t *)(*((_QWORD *)&v453[0] + 1) + 8);
    do
      v38 = __ldaxr(v37);
    while (__stlxr(v38 - 1, v37));
    if (!v38)
    {
      ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
      std::__shared_weak_count::__release_weak(v36);
    }
  }
  *(_QWORD *)&v453[0] = v22;
  *((_QWORD *)&v453[0] + 1) = v26;
  v39 = (std::__shared_weak_count *)__src[1];
  if (__src[1])
  {
    v40 = (unint64_t *)((char *)__src[1] + 8);
    do
      v41 = __ldaxr(v40);
    while (__stlxr(v41 - 1, v40));
    if (!v41)
    {
      ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
      std::__shared_weak_count::__release_weak(v39);
    }
  }
  v42 = *(_OWORD *)v451;
  v451[0] = 0;
  v451[1] = 0;
  v436 = *(_OWORD *)v418;
  v435 = &off_24C9F2B50;
  v437 = v418[2];
  memset(v418, 0, sizeof(v418));
  v438 = *(_OWORD *)__p;
  v43 = __p[2];
  memset(__p, 0, sizeof(__p));
  v440 = v42;
  __src[1] = 0;
  __src[0] = 0;
  v44 = v453[0];
  v439 = v43;
  v441 = v453[0];
  v453[0] = 0uLL;
  if (*((_QWORD *)&v441 + 1))
  {
    v45 = (unint64_t *)(*((_QWORD *)&v44 + 1) + 16);
    do
      v46 = __ldxr(v45);
    while (__stxr(v46 + 1, v45));
  }
  v442 = &off_24C9F2B80;
  v47 = operator new();
  *(_QWORD *)v47 = &off_24C9F3500;
  *(_OWORD *)(v47 + 8) = v44;
  *(_QWORD *)&v443 = v47;
  v49 = *((_QWORD *)&v441 + 1);
  v48 = v441;
  if (!*((_QWORD *)&v441 + 1))
  {
    *((_QWORD *)&v443 + 1) = v441;
    v444 = 0;
    if ((_QWORD)v441)
      v53 = v441 + 16;
    else
      v53 = 0;
    goto LABEL_70;
  }
  v50 = (unint64_t *)(*((_QWORD *)&v441 + 1) + 16);
  do
    v51 = __ldxr(v50);
  while (__stxr(v51 + 1, v50));
  v52 = *((_QWORD *)&v441 + 1);
  *((_QWORD *)&v443 + 1) = v48;
  v444 = v49;
  if ((_QWORD)v441)
    v53 = v441 + 16;
  else
    v53 = 0;
  if (!*((_QWORD *)&v441 + 1))
  {
    v48 = v441;
LABEL_70:
    v56 = 0;
    v445 = &off_24C9F2BB8;
    v446 = v53;
    goto LABEL_71;
  }
  v54 = (unint64_t *)(*((_QWORD *)&v441 + 1) + 16);
  do
    v55 = __ldxr(v54);
  while (__stxr(v55 + 1, v54));
  v56 = *((_QWORD *)&v441 + 1);
  v48 = v441;
  v445 = &off_24C9F2BB8;
  *(_QWORD *)&v446 = v53;
  *((_QWORD *)&v446 + 1) = v52;
  if (*((_QWORD *)&v441 + 1))
  {
    v57 = (unint64_t *)(*((_QWORD *)&v441 + 1) + 16);
    do
      v58 = __ldxr(v57);
    while (__stxr(v58 + 1, v57));
  }
LABEL_71:
  if (v48)
    v59 = v48 + 24;
  else
    v59 = 0;
  v447 = &off_24C9F2C28;
  *(_QWORD *)&v448 = v59;
  *((_QWORD *)&v448 + 1) = v56;
  if ((SHIBYTE(__p[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v418[2]) & 0x80000000) == 0)
      goto LABEL_76;
LABEL_79:
    operator delete(v418[0]);
    v60 = (std::__shared_weak_count *)v449[1];
    if (!v449[1])
      goto LABEL_84;
    goto LABEL_80;
  }
  operator delete(__p[0]);
  if (SHIBYTE(v418[2]) < 0)
    goto LABEL_79;
LABEL_76:
  v60 = (std::__shared_weak_count *)v449[1];
  if (!v449[1])
    goto LABEL_84;
LABEL_80:
  v61 = (unint64_t *)&v60->__shared_owners_;
  do
    v62 = __ldaxr(v61);
  while (__stlxr(v62 - 1, v61));
  if (!v62)
  {
    ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
    std::__shared_weak_count::__release_weak(v60);
  }
LABEL_84:
  v63 = (std::__shared_weak_count *)v451[1];
  if (!v451[1])
    goto LABEL_88;
  v64 = (unint64_t *)((char *)v451[1] + 8);
  do
    v65 = __ldaxr(v64);
  while (__stlxr(v65 - 1, v64));
  if (!v65)
  {
    ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
    std::__shared_weak_count::__release_weak(v63);
    if ((SHIBYTE(v367[2]) & 0x80000000) == 0)
    {
LABEL_89:
      if ((SHIBYTE(__dst[2]) & 0x80000000) == 0)
        goto LABEL_90;
LABEL_94:
      operator delete(__dst[0]);
      if (v431)
        goto LABEL_96;
      goto LABEL_95;
    }
  }
  else
  {
LABEL_88:
    if ((SHIBYTE(v367[2]) & 0x80000000) == 0)
      goto LABEL_89;
  }
  operator delete(v367[0]);
  if (SHIBYTE(__dst[2]) < 0)
    goto LABEL_94;
LABEL_90:
  if (v431)
    goto LABEL_96;
LABEL_95:
  if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/Channel.h", 542, (uint64_t)"worker", 6, (uint64_t)"Callable must be valid", 22, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
LABEL_96:
  v67 = *(void **)a2;
  v66 = *(unint64_t **)(a2 + 8);
  v416 = *(void **)a2;
  v417 = (std::__shared_weak_count *)v66;
  if (v66)
  {
    v68 = v66 + 1;
    do
      v69 = __ldxr(v68);
    while (__stxr(v69 + 1, v68));
  }
  v71 = *a3;
  v70 = (std::__shared_weak_count *)a3[1];
  if (*a3)
    v72 = *a3 + 56;
  else
    v72 = 0;
  v414 = v72;
  v415 = v70;
  if (v70)
  {
    v73 = (unint64_t *)&v70->__shared_owners_;
    do
      v74 = __ldxr(v73);
    while (__stxr(v74 + 1, v73));
  }
  if (*(char *)(v72 + 31) < 0)
  {
    sub_20E860C04(v367, *(void **)(v72 + 8), *(_QWORD *)(v72 + 16));
  }
  else
  {
    v75 = *(_OWORD *)(v72 + 8);
    v367[2] = *(void **)(v72 + 24);
    *(_OWORD *)v367 = v75;
  }
  if (*(char *)(v71 + 111) < 0)
  {
    sub_20E860C04(v453, *(void **)(v71 + 88), *(_QWORD *)(v71 + 96));
  }
  else
  {
    v453[0] = *(_OWORD *)(v71 + 88);
    *(_QWORD *)&v453[1] = *(_QWORD *)(v71 + 104);
  }
  v449[0] = v67;
  v449[1] = v66;
  v417 = 0;
  v416 = 0;
  *(_QWORD *)&v459 = v72;
  *((_QWORD *)&v459 + 1) = v70;
  if (v70)
  {
    v76 = (unint64_t *)&v70->__shared_owners_;
    do
      v77 = __ldxr(v76);
    while (__stxr(v77 + 1, v76));
  }
  if (SHIBYTE(v367[2]) < 0)
  {
    sub_20E860C04(__p, v367[0], (unint64_t)v367[1]);
  }
  else
  {
    *(_OWORD *)__p = *(_OWORD *)v367;
    __p[2] = v367[2];
  }
  if (SBYTE7(v453[1]) < 0)
  {
    sub_20E860C04(__dst, *(void **)&v453[0], *((unint64_t *)&v453[0] + 1));
  }
  else
  {
    *(_OWORD *)__dst = v453[0];
    __dst[2] = *(void **)&v453[1];
  }
  *(void **)((char *)&v454 + 7) = *(void **)((char *)&v367[1] + 7);
  v79 = v367[0];
  v78 = v367[1];
  BYTE7(v454) = HIBYTE(v367[1]);
  v80 = HIBYTE(v367[2]);
  memset(v367, 0, sizeof(v367));
  *(_QWORD *)&v455 = v78;
  *(_QWORD *)((char *)&v455 + 7) = *(_QWORD *)((char *)&v454 + 7);
  *(_QWORD *)((char *)&v454 + 7) = 0;
  *(_QWORD *)&v454 = 0;
  v451[0] = v67;
  v451[1] = v66;
  if (v66)
  {
    v81 = v66 + 1;
    do
      v82 = __ldxr(v81);
    while (__stxr(v82 + 1, v81));
  }
  v83 = (char *)operator new();
  *(_QWORD *)&v457 = v455;
  *(_QWORD *)((char *)&v457 + 7) = *(_QWORD *)((char *)&v455 + 7);
  *(_QWORD *)&v455 = 0;
  *(_QWORD *)((char *)&v455 + 7) = 0;
  v84 = *(_OWORD *)v451;
  v451[0] = 0;
  v451[1] = 0;
  v83[8] = 1;
  *((_QWORD *)v83 + 4) = 0;
  *((_QWORD *)v83 + 5) = 0;
  *(_QWORD *)v83 = &off_24C9F3578;
  *((_QWORD *)v83 + 2) = &unk_24C9F35F0;
  *((_QWORD *)v83 + 3) = &unk_24C9F3630;
  v85 = v457;
  *(_QWORD *)(v83 + 63) = *(_QWORD *)((char *)&v457 + 7);
  *((_QWORD *)v83 + 6) = v79;
  *((_QWORD *)v83 + 7) = v85;
  v83[71] = v80;
  *(_QWORD *)&v457 = 0;
  *(_QWORD *)((char *)&v457 + 7) = 0;
  *(_OWORD *)(v83 + 72) = v84;
  __src[1] = 0;
  __src[0] = 0;
  v86 = (_QWORD *)operator new();
  *v86 = &off_24C9F3718;
  v86[1] = v72;
  v86[2] = v70;
  v459 = 0uLL;
  *((_QWORD *)v83 + 18) = 0;
  *((_QWORD *)v83 + 11) = v86;
  *((_QWORD *)v83 + 12) = v83 + 96;
  *((_QWORD *)v83 + 13) = v83 + 96;
  *((_QWORD *)v83 + 14) = 0;
  *((_QWORD *)v83 + 15) = v83 + 120;
  *((_QWORD *)v83 + 16) = v83 + 120;
  *((_QWORD *)v83 + 17) = 0;
  if (!*((_QWORD *)v83 + 9)
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 109, (uint64_t)"scheduler_", 10, (uint64_t)"scheduler must be valid", 23, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v87 = (std::__shared_weak_count *)operator new();
  v87->__shared_owners_ = 0;
  v88 = (unint64_t *)&v87->__shared_owners_;
  v87->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9F3C08;
  v87->__shared_weak_owners_ = 0;
  v87[1].__vftable = (std::__shared_weak_count_vtbl *)v83;
  v89 = (std::__shared_weak_count *)*((_QWORD *)v83 + 5);
  if (v89)
  {
    if (v89->__shared_owners_ != -1)
      goto LABEL_138;
    do
      v90 = __ldxr(v88);
    while (__stxr(v90 + 1, v88));
    v91 = (unint64_t *)&v87->__shared_weak_owners_;
    do
      v92 = __ldxr(v91);
    while (__stxr(v92 + 1, v91));
    *((_QWORD *)v83 + 4) = v83;
    *((_QWORD *)v83 + 5) = v87;
    std::__shared_weak_count::__release_weak(v89);
  }
  else
  {
    do
      v93 = __ldxr(v88);
    while (__stxr(v93 + 1, v88));
    v94 = (unint64_t *)&v87->__shared_weak_owners_;
    do
      v95 = __ldxr(v94);
    while (__stxr(v95 + 1, v94));
    *((_QWORD *)v83 + 4) = v83;
    *((_QWORD *)v83 + 5) = v87;
  }
  do
    v96 = __ldaxr(v88);
  while (__stlxr(v96 - 1, v88));
  if (!v96)
  {
    ((void (*)(std::__shared_weak_count *))v87->__on_zero_shared)(v87);
    std::__shared_weak_count::__release_weak(v87);
  }
LABEL_138:
  v97 = (std::__shared_weak_count *)__src[1];
  if (__src[1])
  {
    v98 = (unint64_t *)((char *)__src[1] + 8);
    do
      v99 = __ldaxr(v98);
    while (__stlxr(v99 - 1, v98));
    if (!v99)
    {
      ((void (*)(std::__shared_weak_count *))v97->__on_zero_shared)(v97);
      std::__shared_weak_count::__release_weak(v97);
    }
  }
  __src[0] = v83;
  __src[1] = v87;
  v100 = (std::__shared_weak_count *)v451[1];
  if (v451[1])
  {
    v101 = (unint64_t *)((char *)v451[1] + 8);
    do
      v102 = __ldaxr(v101);
    while (__stlxr(v102 - 1, v101));
    if (!v102)
    {
      ((void (*)(std::__shared_weak_count *))v100->__on_zero_shared)(v100);
      std::__shared_weak_count::__release_weak(v100);
    }
  }
  v103 = *(_OWORD *)v449;
  v449[0] = 0;
  v449[1] = 0;
  *(_OWORD *)&v418[1] = *(_OWORD *)__p;
  v418[0] = &off_24C9F2C60;
  v419 = __p[2];
  memset(__p, 0, sizeof(__p));
  v420 = *(_OWORD *)__dst;
  v104 = __dst[2];
  memset(__dst, 0, sizeof(__dst));
  v422 = v103;
  v451[1] = 0;
  v451[0] = 0;
  v105 = __src[0];
  v106 = (char *)__src[1];
  v421 = v104;
  v423 = *(_OWORD *)__src;
  __src[0] = 0;
  __src[1] = 0;
  if (*((_QWORD *)&v423 + 1))
  {
    v107 = (unint64_t *)(v106 + 16);
    do
      v108 = __ldxr(v107);
    while (__stxr(v108 + 1, v107));
  }
  v424 = &off_24C9B46D8;
  v109 = (_QWORD *)operator new();
  *v109 = &off_24C9DF550;
  v109[1] = v105;
  v109[2] = v106;
  *(_QWORD *)&v425 = v109;
  v111 = *((_QWORD *)&v423 + 1);
  v110 = v423;
  if (!*((_QWORD *)&v423 + 1))
  {
    *((_QWORD *)&v425 + 1) = v423;
    v426 = 0;
    if ((_QWORD)v423)
      v115 = v423 + 16;
    else
      v115 = 0;
    goto LABEL_168;
  }
  v112 = (unint64_t *)(*((_QWORD *)&v423 + 1) + 16);
  do
    v113 = __ldxr(v112);
  while (__stxr(v113 + 1, v112));
  v114 = *((_QWORD *)&v423 + 1);
  *((_QWORD *)&v425 + 1) = v110;
  v426 = v111;
  if ((_QWORD)v423)
    v115 = v423 + 16;
  else
    v115 = 0;
  if (!*((_QWORD *)&v423 + 1))
  {
    v110 = v423;
LABEL_168:
    v118 = 0;
    v427 = &off_24C9F2C90;
    v428 = v115;
    goto LABEL_169;
  }
  v116 = (unint64_t *)(*((_QWORD *)&v423 + 1) + 16);
  do
    v117 = __ldxr(v116);
  while (__stxr(v117 + 1, v116));
  v118 = *((_QWORD *)&v423 + 1);
  v110 = v423;
  v427 = &off_24C9F2C90;
  *(_QWORD *)&v428 = v115;
  *((_QWORD *)&v428 + 1) = v114;
  if (*((_QWORD *)&v423 + 1))
  {
    v119 = (unint64_t *)(*((_QWORD *)&v423 + 1) + 16);
    do
      v120 = __ldxr(v119);
    while (__stxr(v120 + 1, v119));
  }
LABEL_169:
  if (v110)
    v121 = v110 + 24;
  else
    v121 = 0;
  v429 = &off_24C9F2C28;
  *(_QWORD *)&v430 = v121;
  *((_QWORD *)&v430 + 1) = v118;
  if ((SHIBYTE(__dst[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(__p[2]) & 0x80000000) == 0)
      goto LABEL_174;
LABEL_177:
    operator delete(__p[0]);
    v122 = (std::__shared_weak_count *)*((_QWORD *)&v459 + 1);
    if (!*((_QWORD *)&v459 + 1))
      goto LABEL_182;
    goto LABEL_178;
  }
  operator delete(__dst[0]);
  if (SHIBYTE(__p[2]) < 0)
    goto LABEL_177;
LABEL_174:
  v122 = (std::__shared_weak_count *)*((_QWORD *)&v459 + 1);
  if (!*((_QWORD *)&v459 + 1))
    goto LABEL_182;
LABEL_178:
  v123 = (unint64_t *)&v122->__shared_owners_;
  do
    v124 = __ldaxr(v123);
  while (__stlxr(v124 - 1, v123));
  if (!v124)
  {
    ((void (*)(std::__shared_weak_count *))v122->__on_zero_shared)(v122);
    std::__shared_weak_count::__release_weak(v122);
  }
LABEL_182:
  v125 = (std::__shared_weak_count *)v449[1];
  if (!v449[1])
    goto LABEL_186;
  v126 = (unint64_t *)((char *)v449[1] + 8);
  do
    v127 = __ldaxr(v126);
  while (__stlxr(v127 - 1, v126));
  if (!v127)
  {
    ((void (*)(std::__shared_weak_count *))v125->__on_zero_shared)(v125);
    std::__shared_weak_count::__release_weak(v125);
    if ((SBYTE7(v453[1]) & 0x80000000) == 0)
    {
LABEL_187:
      if ((SHIBYTE(v367[2]) & 0x80000000) == 0)
        goto LABEL_188;
LABEL_192:
      operator delete(v367[0]);
      if (v414)
        goto LABEL_194;
      goto LABEL_193;
    }
  }
  else
  {
LABEL_186:
    if ((SBYTE7(v453[1]) & 0x80000000) == 0)
      goto LABEL_187;
  }
  operator delete(*(void **)&v453[0]);
  if (SHIBYTE(v367[2]) < 0)
    goto LABEL_192;
LABEL_188:
  if (v414)
    goto LABEL_194;
LABEL_193:
  if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/Channel.h", 542, (uint64_t)"worker", 6, (uint64_t)"Callable must be valid", 22, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
LABEL_194:
  v129 = *(void **)a2;
  v128 = *(unint64_t **)(a2 + 8);
  v399 = *(void **)a2;
  v400 = (std::__shared_weak_count *)v128;
  if (v128)
  {
    v130 = v128 + 1;
    do
      v131 = __ldxr(v130);
    while (__stxr(v131 + 1, v130));
  }
  v133 = *a3;
  v132 = (std::__shared_weak_count *)a3[1];
  if (*a3)
    v134 = *a3 + 112;
  else
    v134 = 0;
  v397 = v134;
  v398 = v132;
  if (v132)
  {
    v135 = (unint64_t *)&v132->__shared_owners_;
    do
      v136 = __ldxr(v135);
    while (__stxr(v136 + 1, v135));
  }
  if (*(char *)(v134 + 31) < 0)
  {
    sub_20E860C04(v453, *(void **)(v134 + 8), *(_QWORD *)(v134 + 16));
  }
  else
  {
    v137 = *(_OWORD *)(v134 + 8);
    *(_QWORD *)&v453[1] = *(_QWORD *)(v134 + 24);
    v453[0] = v137;
  }
  if (*(char *)(v133 + 167) < 0)
  {
    sub_20E860C04(__src, *(void **)(v133 + 144), *(_QWORD *)(v133 + 152));
  }
  else
  {
    *(_OWORD *)__src = *(_OWORD *)(v133 + 144);
    __src[2] = *(void **)(v133 + 160);
  }
  *(_QWORD *)&v459 = v129;
  *((_QWORD *)&v459 + 1) = v128;
  v399 = 0;
  v400 = 0;
  *(_QWORD *)&v457 = v134;
  *((_QWORD *)&v457 + 1) = v132;
  if (v132)
  {
    v138 = (unint64_t *)&v132->__shared_owners_;
    do
      v139 = __ldxr(v138);
    while (__stxr(v139 + 1, v138));
  }
  if (SBYTE7(v453[1]) < 0)
  {
    sub_20E860C04(__dst, *(void **)&v453[0], *((unint64_t *)&v453[0] + 1));
  }
  else
  {
    *(_OWORD *)__dst = v453[0];
    __dst[2] = *(void **)&v453[1];
  }
  if (SHIBYTE(__src[2]) < 0)
  {
    sub_20E860C04(v367, __src[0], (unint64_t)__src[1]);
  }
  else
  {
    *(_OWORD *)v367 = *(_OWORD *)__src;
    v367[2] = __src[2];
  }
  *(_QWORD *)((char *)v460 + 7) = *(_QWORD *)((char *)v453 + 15);
  v140 = v453[0];
  HIBYTE(v460[0]) = HIBYTE(v453[0]);
  v141 = BYTE7(v453[1]);
  memset(v453, 0, 24);
  *(_QWORD *)&v454 = *((_QWORD *)&v140 + 1);
  *(_QWORD *)((char *)&v454 + 7) = *(_QWORD *)((char *)v460 + 7);
  *(_QWORD *)((char *)v460 + 7) = 0;
  v460[0] = 0;
  v449[0] = v129;
  v449[1] = v128;
  if (v128)
  {
    v142 = v128 + 1;
    do
      v143 = __ldxr(v142);
    while (__stxr(v143 + 1, v142));
  }
  v144 = (char *)operator new();
  *(_QWORD *)&v455 = v454;
  *(_QWORD *)((char *)&v455 + 7) = *(_QWORD *)((char *)&v454 + 7);
  *(_QWORD *)&v454 = 0;
  *(_QWORD *)((char *)&v454 + 7) = 0;
  v145 = *(_OWORD *)v449;
  v449[0] = 0;
  v449[1] = 0;
  v144[8] = 1;
  *((_QWORD *)v144 + 4) = 0;
  *((_QWORD *)v144 + 5) = 0;
  *(_QWORD *)v144 = &off_24C9F3C58;
  *((_QWORD *)v144 + 2) = &unk_24C9F3CD0;
  *((_QWORD *)v144 + 3) = &unk_24C9F3D10;
  v146 = v455;
  *(_QWORD *)(v144 + 63) = *(_QWORD *)((char *)&v455 + 7);
  *((_QWORD *)v144 + 6) = v140;
  *((_QWORD *)v144 + 7) = v146;
  v144[71] = v141;
  *(_QWORD *)&v455 = 0;
  *(_QWORD *)((char *)&v455 + 7) = 0;
  *(_OWORD *)(v144 + 72) = v145;
  v451[1] = 0;
  v451[0] = 0;
  v147 = (_QWORD *)operator new();
  *v147 = &off_24C9F3DF8;
  v147[1] = v134;
  v147[2] = v132;
  v457 = 0uLL;
  *((_QWORD *)v144 + 18) = 0;
  *((_QWORD *)v144 + 11) = v147;
  *((_QWORD *)v144 + 12) = v144 + 96;
  *((_QWORD *)v144 + 13) = v144 + 96;
  *((_QWORD *)v144 + 14) = 0;
  *((_QWORD *)v144 + 15) = v144 + 120;
  *((_QWORD *)v144 + 16) = v144 + 120;
  *((_QWORD *)v144 + 17) = 0;
  if (!*((_QWORD *)v144 + 9)
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 109, (uint64_t)"scheduler_", 10, (uint64_t)"scheduler must be valid", 23, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v148 = (std::__shared_weak_count *)operator new();
  v148->__shared_owners_ = 0;
  v149 = (unint64_t *)&v148->__shared_owners_;
  v148->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9F4298;
  v148->__shared_weak_owners_ = 0;
  v148[1].__vftable = (std::__shared_weak_count_vtbl *)v144;
  v150 = (std::__shared_weak_count *)*((_QWORD *)v144 + 5);
  if (v150)
  {
    if (v150->__shared_owners_ != -1)
      goto LABEL_236;
    do
      v151 = __ldxr(v149);
    while (__stxr(v151 + 1, v149));
    v152 = (unint64_t *)&v148->__shared_weak_owners_;
    do
      v153 = __ldxr(v152);
    while (__stxr(v153 + 1, v152));
    *((_QWORD *)v144 + 4) = v144;
    *((_QWORD *)v144 + 5) = v148;
    std::__shared_weak_count::__release_weak(v150);
  }
  else
  {
    do
      v154 = __ldxr(v149);
    while (__stxr(v154 + 1, v149));
    v155 = (unint64_t *)&v148->__shared_weak_owners_;
    do
      v156 = __ldxr(v155);
    while (__stxr(v156 + 1, v155));
    *((_QWORD *)v144 + 4) = v144;
    *((_QWORD *)v144 + 5) = v148;
  }
  do
    v157 = __ldaxr(v149);
  while (__stlxr(v157 - 1, v149));
  if (!v157)
  {
    ((void (*)(std::__shared_weak_count *))v148->__on_zero_shared)(v148);
    std::__shared_weak_count::__release_weak(v148);
  }
LABEL_236:
  v158 = (std::__shared_weak_count *)v451[1];
  if (v451[1])
  {
    v159 = (unint64_t *)((char *)v451[1] + 8);
    do
      v160 = __ldaxr(v159);
    while (__stlxr(v160 - 1, v159));
    if (!v160)
    {
      ((void (*)(std::__shared_weak_count *))v158->__on_zero_shared)(v158);
      std::__shared_weak_count::__release_weak(v158);
    }
  }
  v451[0] = v144;
  v451[1] = v148;
  v161 = (std::__shared_weak_count *)v449[1];
  if (v449[1])
  {
    v162 = (unint64_t *)((char *)v449[1] + 8);
    do
      v163 = __ldaxr(v162);
    while (__stlxr(v163 - 1, v162));
    if (!v163)
    {
      ((void (*)(std::__shared_weak_count *))v161->__on_zero_shared)(v161);
      std::__shared_weak_count::__release_weak(v161);
    }
  }
  v164 = v459;
  v459 = 0uLL;
  *(_OWORD *)&__p[1] = *(_OWORD *)__dst;
  __p[0] = &off_24C9F2D00;
  v402 = __dst[2];
  memset(__dst, 0, sizeof(__dst));
  v403 = *(_OWORD *)v367;
  v165 = v367[2];
  memset(v367, 0, sizeof(v367));
  v405 = v164;
  v449[1] = 0;
  v449[0] = 0;
  v166 = v451[0];
  v167 = (char *)v451[1];
  v404 = v165;
  v406 = *(_OWORD *)v451;
  v451[0] = 0;
  v451[1] = 0;
  if (*((_QWORD *)&v406 + 1))
  {
    v168 = (unint64_t *)(v167 + 16);
    do
      v169 = __ldxr(v168);
    while (__stxr(v169 + 1, v168));
  }
  v407 = &off_24C9B4748;
  v170 = (_QWORD *)operator new();
  *v170 = &off_24C9F42E8;
  v170[1] = v166;
  v170[2] = v167;
  *(_QWORD *)&v408 = v170;
  v172 = *((_QWORD *)&v406 + 1);
  v171 = v406;
  if (!*((_QWORD *)&v406 + 1))
  {
    *((_QWORD *)&v408 + 1) = v406;
    v409 = 0;
    if ((_QWORD)v406)
      v176 = v406 + 16;
    else
      v176 = 0;
    goto LABEL_266;
  }
  v173 = (unint64_t *)(*((_QWORD *)&v406 + 1) + 16);
  do
    v174 = __ldxr(v173);
  while (__stxr(v174 + 1, v173));
  v175 = *((_QWORD *)&v406 + 1);
  *((_QWORD *)&v408 + 1) = v171;
  v409 = v172;
  if ((_QWORD)v406)
    v176 = v406 + 16;
  else
    v176 = 0;
  if (!*((_QWORD *)&v406 + 1))
  {
    v171 = v406;
LABEL_266:
    v179 = 0;
    v410 = &off_24C9B2520;
    v411 = v176;
    goto LABEL_267;
  }
  v177 = (unint64_t *)(*((_QWORD *)&v406 + 1) + 16);
  do
    v178 = __ldxr(v177);
  while (__stxr(v178 + 1, v177));
  v179 = *((_QWORD *)&v406 + 1);
  v171 = v406;
  v410 = &off_24C9B2520;
  *(_QWORD *)&v411 = v176;
  *((_QWORD *)&v411 + 1) = v175;
  if (*((_QWORD *)&v406 + 1))
  {
    v180 = (unint64_t *)(*((_QWORD *)&v406 + 1) + 16);
    do
      v181 = __ldxr(v180);
    while (__stxr(v181 + 1, v180));
  }
LABEL_267:
  if (v171)
    v182 = v171 + 24;
  else
    v182 = 0;
  v412 = &off_24C9F2C28;
  *(_QWORD *)&v413 = v182;
  *((_QWORD *)&v413 + 1) = v179;
  if ((SHIBYTE(v367[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(__dst[2]) & 0x80000000) == 0)
      goto LABEL_272;
LABEL_275:
    operator delete(__dst[0]);
    v183 = (std::__shared_weak_count *)*((_QWORD *)&v457 + 1);
    if (!*((_QWORD *)&v457 + 1))
      goto LABEL_280;
    goto LABEL_276;
  }
  operator delete(v367[0]);
  if (SHIBYTE(__dst[2]) < 0)
    goto LABEL_275;
LABEL_272:
  v183 = (std::__shared_weak_count *)*((_QWORD *)&v457 + 1);
  if (!*((_QWORD *)&v457 + 1))
    goto LABEL_280;
LABEL_276:
  v184 = (unint64_t *)&v183->__shared_owners_;
  do
    v185 = __ldaxr(v184);
  while (__stlxr(v185 - 1, v184));
  if (!v185)
  {
    ((void (*)(std::__shared_weak_count *))v183->__on_zero_shared)(v183);
    std::__shared_weak_count::__release_weak(v183);
  }
LABEL_280:
  v186 = (std::__shared_weak_count *)*((_QWORD *)&v459 + 1);
  if (!*((_QWORD *)&v459 + 1))
    goto LABEL_284;
  v187 = (unint64_t *)(*((_QWORD *)&v459 + 1) + 8);
  do
    v188 = __ldaxr(v187);
  while (__stlxr(v188 - 1, v187));
  if (!v188)
  {
    ((void (*)(std::__shared_weak_count *))v186->__on_zero_shared)(v186);
    std::__shared_weak_count::__release_weak(v186);
    if ((SHIBYTE(__src[2]) & 0x80000000) == 0)
    {
LABEL_285:
      if ((SBYTE7(v453[1]) & 0x80000000) == 0)
        goto LABEL_286;
LABEL_290:
      operator delete(*(void **)&v453[0]);
      if (v397)
        goto LABEL_292;
      goto LABEL_291;
    }
  }
  else
  {
LABEL_284:
    if ((SHIBYTE(__src[2]) & 0x80000000) == 0)
      goto LABEL_285;
  }
  operator delete(__src[0]);
  if (SBYTE7(v453[1]) < 0)
    goto LABEL_290;
LABEL_286:
  if (v397)
    goto LABEL_292;
LABEL_291:
  if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/Channel.h", 542, (uint64_t)"worker", 6, (uint64_t)"Callable must be valid", 22, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
LABEL_292:
  v190 = *(void **)a2;
  v189 = *(std::__shared_weak_count **)(a2 + 8);
  v382 = *(void **)a2;
  v383 = v189;
  if (v189)
  {
    v191 = (unint64_t *)&v189->__shared_owners_;
    do
      v192 = __ldxr(v191);
    while (__stxr(v192 + 1, v191));
  }
  v194 = *a3;
  v193 = (std::__shared_weak_count *)a3[1];
  if (*a3)
    v195 = *a3 + 168;
  else
    v195 = 0;
  v380 = v195;
  v381 = v193;
  if (v193)
  {
    v196 = (unint64_t *)&v193->__shared_owners_;
    do
      v197 = __ldxr(v196);
    while (__stxr(v197 + 1, v196));
  }
  if (*(char *)(v195 + 31) < 0)
  {
    sub_20E860C04(__src, *(void **)(v195 + 8), *(_QWORD *)(v195 + 16));
  }
  else
  {
    v198 = *(_OWORD *)(v195 + 8);
    __src[2] = *(void **)(v195 + 24);
    *(_OWORD *)__src = v198;
  }
  if (*(char *)(v194 + 223) < 0)
  {
    sub_20E860C04(v451, *(void **)(v194 + 200), *(_QWORD *)(v194 + 208));
  }
  else
  {
    *(_OWORD *)v451 = *(_OWORD *)(v194 + 200);
    v451[2] = *(void **)(v194 + 216);
  }
  *(_QWORD *)&v457 = v190;
  *((_QWORD *)&v457 + 1) = v189;
  v382 = 0;
  v383 = 0;
  *(_QWORD *)&v455 = v195;
  *((_QWORD *)&v455 + 1) = v193;
  if (v193)
  {
    v199 = (unint64_t *)&v193->__shared_owners_;
    do
      v200 = __ldxr(v199);
    while (__stxr(v200 + 1, v199));
  }
  if (SHIBYTE(__src[2]) < 0)
  {
    sub_20E860C04(v367, __src[0], (unint64_t)__src[1]);
  }
  else
  {
    *(_OWORD *)v367 = *(_OWORD *)__src;
    v367[2] = __src[2];
  }
  v365 = a1;
  if (SHIBYTE(v451[2]) < 0)
  {
    sub_20E860C04(v453, v451[0], (unint64_t)v451[1]);
  }
  else
  {
    v453[0] = *(_OWORD *)v451;
    *(void **)&v453[1] = v451[2];
  }
  *(void **)((char *)v458 + 7) = *(void **)((char *)&__src[1] + 7);
  v201 = __src[0];
  v202 = __src[1];
  HIBYTE(v458[0]) = HIBYTE(__src[1]);
  v203 = HIBYTE(__src[2]);
  memset(__src, 0, 24);
  v460[0] = v202;
  *(_QWORD *)((char *)v460 + 7) = *(_QWORD *)((char *)v458 + 7);
  *(_QWORD *)((char *)v458 + 7) = 0;
  v458[0] = 0;
  *(_QWORD *)&v459 = v190;
  *((_QWORD *)&v459 + 1) = v189;
  if (v189)
  {
    v204 = (unint64_t *)&v189->__shared_owners_;
    do
      v205 = __ldxr(v204);
    while (__stxr(v205 + 1, v204));
  }
  v206 = (char *)operator new();
  *(_QWORD *)&v454 = v460[0];
  *(_QWORD *)((char *)&v454 + 7) = *(_QWORD *)((char *)v460 + 7);
  v460[0] = 0;
  *(_QWORD *)((char *)v460 + 7) = 0;
  v207 = v459;
  v459 = 0uLL;
  v206[8] = 1;
  *((_QWORD *)v206 + 4) = 0;
  *((_QWORD *)v206 + 5) = 0;
  *(_QWORD *)v206 = &off_24C9F4350;
  *((_QWORD *)v206 + 2) = &unk_24C9F43C8;
  *((_QWORD *)v206 + 3) = &unk_24C9F4408;
  v208 = v454;
  *(_QWORD *)(v206 + 63) = *(_QWORD *)((char *)&v454 + 7);
  *((_QWORD *)v206 + 6) = v201;
  *((_QWORD *)v206 + 7) = v208;
  v206[71] = v203;
  *(_QWORD *)&v454 = 0;
  *(_QWORD *)((char *)&v454 + 7) = 0;
  *(_OWORD *)(v206 + 72) = v207;
  v449[1] = 0;
  v449[0] = 0;
  v209 = (_QWORD *)operator new();
  *v209 = &off_24C9F44F0;
  v209[1] = v195;
  v209[2] = v193;
  v455 = 0uLL;
  *((_QWORD *)v206 + 18) = 0;
  *((_QWORD *)v206 + 11) = v209;
  *((_QWORD *)v206 + 12) = v206 + 96;
  *((_QWORD *)v206 + 13) = v206 + 96;
  *((_QWORD *)v206 + 14) = 0;
  *((_QWORD *)v206 + 15) = v206 + 120;
  *((_QWORD *)v206 + 16) = v206 + 120;
  *((_QWORD *)v206 + 17) = 0;
  if (!*((_QWORD *)v206 + 9)
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 109, (uint64_t)"scheduler_", 10, (uint64_t)"scheduler must be valid", 23, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v210 = (std::__shared_weak_count *)operator new();
  v210->__shared_owners_ = 0;
  v211 = (unint64_t *)&v210->__shared_owners_;
  v210->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9F4990;
  v210->__shared_weak_owners_ = 0;
  v210[1].__vftable = (std::__shared_weak_count_vtbl *)v206;
  v212 = (std::__shared_weak_count *)*((_QWORD *)v206 + 5);
  if (v212)
  {
    if (v212->__shared_owners_ != -1)
      goto LABEL_334;
    do
      v213 = __ldxr(v211);
    while (__stxr(v213 + 1, v211));
    v214 = (unint64_t *)&v210->__shared_weak_owners_;
    do
      v215 = __ldxr(v214);
    while (__stxr(v215 + 1, v214));
    *((_QWORD *)v206 + 4) = v206;
    *((_QWORD *)v206 + 5) = v210;
    std::__shared_weak_count::__release_weak(v212);
  }
  else
  {
    do
      v216 = __ldxr(v211);
    while (__stxr(v216 + 1, v211));
    v217 = (unint64_t *)&v210->__shared_weak_owners_;
    do
      v218 = __ldxr(v217);
    while (__stxr(v218 + 1, v217));
    *((_QWORD *)v206 + 4) = v206;
    *((_QWORD *)v206 + 5) = v210;
  }
  do
    v219 = __ldaxr(v211);
  while (__stlxr(v219 - 1, v211));
  if (!v219)
  {
    ((void (*)(std::__shared_weak_count *))v210->__on_zero_shared)(v210);
    std::__shared_weak_count::__release_weak(v210);
  }
LABEL_334:
  v220 = (std::__shared_weak_count *)v449[1];
  if (v449[1])
  {
    v221 = (unint64_t *)((char *)v449[1] + 8);
    do
      v222 = __ldaxr(v221);
    while (__stlxr(v222 - 1, v221));
    if (!v222)
    {
      ((void (*)(std::__shared_weak_count *))v220->__on_zero_shared)(v220);
      std::__shared_weak_count::__release_weak(v220);
    }
  }
  v449[0] = v206;
  v449[1] = v210;
  v223 = (std::__shared_weak_count *)*((_QWORD *)&v459 + 1);
  if (*((_QWORD *)&v459 + 1))
  {
    v224 = (unint64_t *)(*((_QWORD *)&v459 + 1) + 8);
    do
      v225 = __ldaxr(v224);
    while (__stlxr(v225 - 1, v224));
    if (!v225)
    {
      ((void (*)(std::__shared_weak_count *))v223->__on_zero_shared)(v223);
      std::__shared_weak_count::__release_weak(v223);
    }
  }
  v226 = v457;
  v457 = 0uLL;
  *(_OWORD *)&__dst[1] = *(_OWORD *)v367;
  __dst[0] = &off_24C9F2D30;
  v385 = v367[2];
  memset(v367, 0, sizeof(v367));
  v386 = v453[0];
  v227 = *(_QWORD *)&v453[1];
  memset(v453, 0, 24);
  v388 = v226;
  v459 = 0uLL;
  v228 = v449[0];
  v229 = (char *)v449[1];
  v387 = v227;
  v389 = *(_OWORD *)v449;
  v449[0] = 0;
  v449[1] = 0;
  if (*((_QWORD *)&v389 + 1))
  {
    v230 = (unint64_t *)(v229 + 16);
    do
      v231 = __ldxr(v230);
    while (__stxr(v231 + 1, v230));
  }
  v390 = &off_24C9B4710;
  v232 = (_QWORD *)operator new();
  *v232 = &off_24C9D4BE0;
  v232[1] = v228;
  v232[2] = v229;
  *(_QWORD *)&v391 = v232;
  v234 = *((_QWORD *)&v389 + 1);
  v233 = v389;
  if (!*((_QWORD *)&v389 + 1))
  {
    *((_QWORD *)&v391 + 1) = v389;
    v392 = 0;
    if ((_QWORD)v389)
      v238 = v389 + 16;
    else
      v238 = 0;
    goto LABEL_364;
  }
  v235 = (unint64_t *)(*((_QWORD *)&v389 + 1) + 16);
  do
    v236 = __ldxr(v235);
  while (__stxr(v236 + 1, v235));
  v237 = *((_QWORD *)&v389 + 1);
  *((_QWORD *)&v391 + 1) = v233;
  v392 = v234;
  if ((_QWORD)v389)
    v238 = v389 + 16;
  else
    v238 = 0;
  if (!*((_QWORD *)&v389 + 1))
  {
    v233 = v389;
LABEL_364:
    v241 = 0;
    v393 = &off_24C9F2D60;
    v394 = v238;
    goto LABEL_365;
  }
  v239 = (unint64_t *)(*((_QWORD *)&v389 + 1) + 16);
  do
    v240 = __ldxr(v239);
  while (__stxr(v240 + 1, v239));
  v241 = *((_QWORD *)&v389 + 1);
  v233 = v389;
  v393 = &off_24C9F2D60;
  *(_QWORD *)&v394 = v238;
  *((_QWORD *)&v394 + 1) = v237;
  if (*((_QWORD *)&v389 + 1))
  {
    v242 = (unint64_t *)(*((_QWORD *)&v389 + 1) + 16);
    do
      v243 = __ldxr(v242);
    while (__stxr(v243 + 1, v242));
  }
LABEL_365:
  if (v233)
    v244 = v233 + 24;
  else
    v244 = 0;
  v395 = &off_24C9F2C28;
  *(_QWORD *)&v396 = v244;
  *((_QWORD *)&v396 + 1) = v241;
  if ((SBYTE7(v453[1]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v367[2]) & 0x80000000) == 0)
      goto LABEL_370;
LABEL_373:
    operator delete(v367[0]);
    v245 = (std::__shared_weak_count *)*((_QWORD *)&v455 + 1);
    if (!*((_QWORD *)&v455 + 1))
      goto LABEL_378;
    goto LABEL_374;
  }
  operator delete(*(void **)&v453[0]);
  if (SHIBYTE(v367[2]) < 0)
    goto LABEL_373;
LABEL_370:
  v245 = (std::__shared_weak_count *)*((_QWORD *)&v455 + 1);
  if (!*((_QWORD *)&v455 + 1))
    goto LABEL_378;
LABEL_374:
  v246 = (unint64_t *)&v245->__shared_owners_;
  do
    v247 = __ldaxr(v246);
  while (__stlxr(v247 - 1, v246));
  if (!v247)
  {
    ((void (*)(std::__shared_weak_count *))v245->__on_zero_shared)(v245);
    std::__shared_weak_count::__release_weak(v245);
  }
LABEL_378:
  v248 = (std::__shared_weak_count *)*((_QWORD *)&v457 + 1);
  if (!*((_QWORD *)&v457 + 1))
    goto LABEL_382;
  v249 = (unint64_t *)(*((_QWORD *)&v457 + 1) + 8);
  do
    v250 = __ldaxr(v249);
  while (__stlxr(v250 - 1, v249));
  if (!v250)
  {
    ((void (*)(std::__shared_weak_count *))v248->__on_zero_shared)(v248);
    std::__shared_weak_count::__release_weak(v248);
    if ((SHIBYTE(v451[2]) & 0x80000000) == 0)
    {
LABEL_383:
      if ((SHIBYTE(__src[2]) & 0x80000000) == 0)
        goto LABEL_384;
LABEL_388:
      operator delete(__src[0]);
      if (v380)
        goto LABEL_390;
      goto LABEL_389;
    }
  }
  else
  {
LABEL_382:
    if ((SHIBYTE(v451[2]) & 0x80000000) == 0)
      goto LABEL_383;
  }
  operator delete(v451[0]);
  if (SHIBYTE(__src[2]) < 0)
    goto LABEL_388;
LABEL_384:
  if (v380)
    goto LABEL_390;
LABEL_389:
  if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/Channel.h", 542, (uint64_t)"worker", 6, (uint64_t)"Callable must be valid", 22, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
LABEL_390:
  v252 = *(void **)a2;
  v251 = *(_QWORD *)(a2 + 8);
  if (v251)
  {
    v253 = (unint64_t *)(v251 + 8);
    do
      v254 = __ldxr(v253);
    while (__stxr(v254 + 1, v253));
  }
  v256 = *a3;
  v255 = a3[1];
  if (*a3)
    v257 = *a3 + 224;
  else
    v257 = 0;
  v366 = (std::__shared_weak_count *)a3[1];
  if (v255)
  {
    v258 = (unint64_t *)(v255 + 8);
    do
      v259 = __ldxr(v258);
    while (__stxr(v259 + 1, v258));
  }
  if (*(char *)(v257 + 31) < 0)
  {
    sub_20E860C04(v451, *(void **)(v257 + 8), *(_QWORD *)(v257 + 16));
  }
  else
  {
    v260 = *(_OWORD *)(v257 + 8);
    v451[2] = *(void **)(v257 + 24);
    *(_OWORD *)v451 = v260;
  }
  if (*(char *)(v256 + 279) < 0)
  {
    sub_20E860C04(v449, *(void **)(v256 + 256), *(_QWORD *)(v256 + 264));
  }
  else
  {
    *(_OWORD *)v449 = *(_OWORD *)(v256 + 256);
    v450 = *(void **)(v256 + 272);
  }
  *(_QWORD *)&v455 = v252;
  *((_QWORD *)&v455 + 1) = v251;
  *(_QWORD *)&v454 = v257;
  *((_QWORD *)&v454 + 1) = v255;
  if (v255)
  {
    v261 = (unint64_t *)(v255 + 8);
    do
      v262 = __ldxr(v261);
    while (__stxr(v262 + 1, v261));
  }
  if (SHIBYTE(v451[2]) < 0)
  {
    sub_20E860C04(v453, v451[0], (unint64_t)v451[1]);
  }
  else
  {
    v453[0] = *(_OWORD *)v451;
    *(void **)&v453[1] = v451[2];
  }
  if (SHIBYTE(v450) < 0)
  {
    sub_20E860C04(__src, v449[0], (unint64_t)v449[1]);
  }
  else
  {
    *(_OWORD *)__src = *(_OWORD *)v449;
    __src[2] = v450;
  }
  *(void **)((char *)v456 + 7) = *(void **)((char *)&v451[1] + 7);
  v263 = v451[0];
  v264 = v451[1];
  HIBYTE(v456[0]) = HIBYTE(v451[1]);
  v265 = HIBYTE(v451[2]);
  memset(v451, 0, 24);
  *((_QWORD *)&v457 + 1) = v251;
  v458[0] = v264;
  *(_QWORD *)((char *)v458 + 7) = *(_QWORD *)((char *)v456 + 7);
  *(_QWORD *)((char *)v456 + 7) = 0;
  v456[0] = 0;
  *(_QWORD *)&v457 = v252;
  if (v251)
  {
    v266 = (unint64_t *)(v251 + 8);
    do
      v267 = __ldxr(v266);
    while (__stxr(v267 + 1, v266));
  }
  v268 = operator new();
  v460[0] = v458[0];
  *(_QWORD *)((char *)v460 + 7) = *(_QWORD *)((char *)v458 + 7);
  v458[0] = 0;
  *(_QWORD *)((char *)v458 + 7) = 0;
  v269 = v457;
  v457 = 0uLL;
  *(_BYTE *)(v268 + 8) = 1;
  *(_QWORD *)(v268 + 32) = 0;
  *(_QWORD *)(v268 + 40) = 0;
  *(_QWORD *)v268 = &off_24C9F49E0;
  *(_QWORD *)(v268 + 16) = &unk_24C9F4A58;
  *(_QWORD *)(v268 + 24) = &unk_24C9F4A98;
  v270 = v460[0];
  *(_QWORD *)(v268 + 63) = *(_QWORD *)((char *)v460 + 7);
  *(_QWORD *)(v268 + 48) = v263;
  *(_QWORD *)(v268 + 56) = v270;
  *(_BYTE *)(v268 + 71) = v265;
  v460[0] = 0;
  *(_QWORD *)((char *)v460 + 7) = 0;
  *(_OWORD *)(v268 + 72) = v269;
  v459 = 0uLL;
  v271 = (_QWORD *)operator new();
  *v271 = &off_24C9F4B80;
  v271[1] = v257;
  v271[2] = v255;
  v454 = 0uLL;
  *(_QWORD *)(v268 + 144) = 0;
  *(_QWORD *)(v268 + 88) = v271;
  *(_QWORD *)(v268 + 96) = v268 + 96;
  *(_QWORD *)(v268 + 104) = v268 + 96;
  *(_QWORD *)(v268 + 112) = 0;
  *(_QWORD *)(v268 + 120) = v268 + 120;
  *(_QWORD *)(v268 + 128) = v268 + 120;
  *(_QWORD *)(v268 + 136) = 0;
  if (!*(_QWORD *)(v268 + 72)
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 109, (uint64_t)"scheduler_", 10, (uint64_t)"scheduler must be valid", 23, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v272 = (std::__shared_weak_count *)operator new();
  v272->__shared_owners_ = 0;
  v273 = (unint64_t *)&v272->__shared_owners_;
  v272->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9F5020;
  v272->__shared_weak_owners_ = 0;
  v272[1].__vftable = (std::__shared_weak_count_vtbl *)v268;
  v274 = *(std::__shared_weak_count **)(v268 + 40);
  if (v274)
  {
    if (v274->__shared_owners_ != -1)
      goto LABEL_432;
    do
      v275 = __ldxr(v273);
    while (__stxr(v275 + 1, v273));
    v276 = (unint64_t *)&v272->__shared_weak_owners_;
    do
      v277 = __ldxr(v276);
    while (__stxr(v277 + 1, v276));
    *(_QWORD *)(v268 + 32) = v268;
    *(_QWORD *)(v268 + 40) = v272;
    std::__shared_weak_count::__release_weak(v274);
  }
  else
  {
    do
      v278 = __ldxr(v273);
    while (__stxr(v278 + 1, v273));
    v279 = (unint64_t *)&v272->__shared_weak_owners_;
    do
      v280 = __ldxr(v279);
    while (__stxr(v280 + 1, v279));
    *(_QWORD *)(v268 + 32) = v268;
    *(_QWORD *)(v268 + 40) = v272;
  }
  do
    v281 = __ldaxr(v273);
  while (__stlxr(v281 - 1, v273));
  if (!v281)
  {
    ((void (*)(std::__shared_weak_count *))v272->__on_zero_shared)(v272);
    std::__shared_weak_count::__release_weak(v272);
  }
LABEL_432:
  v282 = (std::__shared_weak_count *)*((_QWORD *)&v459 + 1);
  if (*((_QWORD *)&v459 + 1))
  {
    v283 = (unint64_t *)(*((_QWORD *)&v459 + 1) + 8);
    do
      v284 = __ldaxr(v283);
    while (__stlxr(v284 - 1, v283));
    if (!v284)
    {
      ((void (*)(std::__shared_weak_count *))v282->__on_zero_shared)(v282);
      std::__shared_weak_count::__release_weak(v282);
    }
  }
  *(_QWORD *)&v459 = v268;
  *((_QWORD *)&v459 + 1) = v272;
  v285 = (std::__shared_weak_count *)*((_QWORD *)&v457 + 1);
  if (*((_QWORD *)&v457 + 1))
  {
    v286 = (unint64_t *)(*((_QWORD *)&v457 + 1) + 8);
    do
      v287 = __ldaxr(v286);
    while (__stlxr(v287 - 1, v286));
    if (!v287)
    {
      ((void (*)(std::__shared_weak_count *))v285->__on_zero_shared)(v285);
      std::__shared_weak_count::__release_weak(v285);
    }
  }
  v288 = v455;
  v455 = 0uLL;
  v367[0] = &off_24C9F2D98;
  *(_OWORD *)&v367[1] = v453[0];
  v368 = *(_QWORD *)&v453[1];
  memset(v453, 0, 24);
  v369 = *(_OWORD *)__src;
  v370 = __src[2];
  memset(__src, 0, 24);
  v371 = v288;
  v457 = 0uLL;
  v289 = v459;
  v372 = v459;
  v459 = 0uLL;
  if (*((_QWORD *)&v372 + 1))
  {
    v290 = (unint64_t *)(*((_QWORD *)&v289 + 1) + 16);
    do
      v291 = __ldxr(v290);
    while (__stxr(v291 + 1, v290));
  }
  v373 = &off_24C9F2DC8;
  v292 = operator new();
  *(_QWORD *)v292 = &off_24C9F5070;
  *(_OWORD *)(v292 + 8) = v289;
  *(_QWORD *)&v374 = v292;
  v294 = *((_QWORD *)&v372 + 1);
  v293 = v372;
  if (!*((_QWORD *)&v372 + 1))
  {
    *((_QWORD *)&v374 + 1) = v372;
    v375 = 0;
    if ((_QWORD)v372)
      v298 = v372 + 16;
    else
      v298 = 0;
    goto LABEL_462;
  }
  v295 = (unint64_t *)(*((_QWORD *)&v372 + 1) + 16);
  do
    v296 = __ldxr(v295);
  while (__stxr(v296 + 1, v295));
  v297 = *((_QWORD *)&v372 + 1);
  *((_QWORD *)&v374 + 1) = v293;
  v375 = v294;
  if ((_QWORD)v372)
    v298 = v372 + 16;
  else
    v298 = 0;
  if (!*((_QWORD *)&v372 + 1))
  {
    v293 = v372;
LABEL_462:
    v301 = 0;
    v376 = &off_24C9B2520;
    v377 = v298;
    goto LABEL_463;
  }
  v299 = (unint64_t *)(*((_QWORD *)&v372 + 1) + 16);
  do
    v300 = __ldxr(v299);
  while (__stxr(v300 + 1, v299));
  v301 = *((_QWORD *)&v372 + 1);
  v293 = v372;
  v376 = &off_24C9B2520;
  *(_QWORD *)&v377 = v298;
  *((_QWORD *)&v377 + 1) = v297;
  if (*((_QWORD *)&v372 + 1))
  {
    v302 = (unint64_t *)(*((_QWORD *)&v372 + 1) + 16);
    do
      v303 = __ldxr(v302);
    while (__stxr(v303 + 1, v302));
  }
LABEL_463:
  if (v293)
    v304 = v293 + 24;
  else
    v304 = 0;
  v378 = &off_24C9F2C28;
  *(_QWORD *)&v379 = v304;
  *((_QWORD *)&v379 + 1) = v301;
  if ((SHIBYTE(__src[2]) & 0x80000000) == 0)
  {
    if ((SBYTE7(v453[1]) & 0x80000000) == 0)
      goto LABEL_468;
LABEL_471:
    operator delete(*(void **)&v453[0]);
    v305 = (std::__shared_weak_count *)*((_QWORD *)&v454 + 1);
    if (!*((_QWORD *)&v454 + 1))
      goto LABEL_476;
    goto LABEL_472;
  }
  operator delete(__src[0]);
  if (SBYTE7(v453[1]) < 0)
    goto LABEL_471;
LABEL_468:
  v305 = (std::__shared_weak_count *)*((_QWORD *)&v454 + 1);
  if (!*((_QWORD *)&v454 + 1))
    goto LABEL_476;
LABEL_472:
  v306 = (unint64_t *)&v305->__shared_owners_;
  do
    v307 = __ldaxr(v306);
  while (__stlxr(v307 - 1, v306));
  if (!v307)
  {
    ((void (*)(std::__shared_weak_count *))v305->__on_zero_shared)(v305);
    std::__shared_weak_count::__release_weak(v305);
  }
LABEL_476:
  v308 = (std::__shared_weak_count *)*((_QWORD *)&v455 + 1);
  if (!*((_QWORD *)&v455 + 1))
    goto LABEL_480;
  v309 = (unint64_t *)(*((_QWORD *)&v455 + 1) + 8);
  do
    v310 = __ldaxr(v309);
  while (__stlxr(v310 - 1, v309));
  if (!v310)
  {
    ((void (*)(std::__shared_weak_count *))v308->__on_zero_shared)(v308);
    std::__shared_weak_count::__release_weak(v308);
    if ((SHIBYTE(v450) & 0x80000000) == 0)
    {
LABEL_481:
      if ((SHIBYTE(v451[2]) & 0x80000000) == 0)
        goto LABEL_482;
      goto LABEL_486;
    }
  }
  else
  {
LABEL_480:
    if ((SHIBYTE(v450) & 0x80000000) == 0)
      goto LABEL_481;
  }
  operator delete(v449[0]);
  if ((SHIBYTE(v451[2]) & 0x80000000) == 0)
  {
LABEL_482:
    if (v257)
      goto LABEL_488;
    goto LABEL_487;
  }
LABEL_486:
  operator delete(v451[0]);
  if (v257)
    goto LABEL_488;
LABEL_487:
  if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/Channel.h", 542, (uint64_t)"worker", 6, (uint64_t)"Callable must be valid", 22, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
LABEL_488:
  v311 = operator new();
  *(_QWORD *)v311 = &off_24C9F2B50;
  *(_QWORD *)(v311 + 88) = &off_24C9F2B80;
  *(_QWORD *)(v311 + 168) = &off_24C9F2C60;
  *(_QWORD *)(v311 + 256) = &off_24C9B46D8;
  *(_QWORD *)(v311 + 336) = &off_24C9F2D00;
  *(_QWORD *)(v311 + 424) = &off_24C9B4748;
  *(_QWORD *)(v311 + 24) = v437;
  v312 = v436;
  v436 = 0uLL;
  v437 = 0;
  *(_QWORD *)(v311 + 48) = v439;
  v313 = v438;
  v438 = 0uLL;
  v439 = 0;
  v314 = v440;
  v440 = 0uLL;
  *(_OWORD *)(v311 + 8) = v312;
  *(_OWORD *)(v311 + 32) = v313;
  v315 = v441;
  v441 = 0uLL;
  v316 = v443;
  v317 = v444;
  *((_QWORD *)&v443 + 1) = 0;
  v444 = 0;
  *(_QWORD *)(v311 + 112) = v317;
  *(_QWORD *)(v311 + 120) = &off_24C9F2BB8;
  *(_OWORD *)(v311 + 56) = v314;
  *(_OWORD *)(v311 + 72) = v315;
  v318 = v446;
  v319 = v448;
  v448 = 0uLL;
  *(_QWORD *)(v311 + 192) = v419;
  *(_OWORD *)(v311 + 96) = v316;
  v320 = *(_OWORD *)&v418[1];
  v418[1] = 0;
  v418[2] = 0;
  v419 = 0;
  *(_QWORD *)(v311 + 216) = v421;
  *(_OWORD *)(v311 + 128) = v318;
  v321 = v420;
  v420 = 0uLL;
  v421 = 0;
  *(_OWORD *)(v311 + 152) = v319;
  v322 = v422;
  v422 = 0uLL;
  *(_OWORD *)(v311 + 176) = v320;
  *(_OWORD *)(v311 + 200) = v321;
  v323 = v423;
  v423 = 0uLL;
  *(_OWORD *)(v311 + 344) = *(_OWORD *)&__p[1];
  v324 = v425;
  v325 = v426;
  *((_QWORD *)&v425 + 1) = 0;
  v426 = 0;
  *(_QWORD *)(v311 + 280) = v325;
  *(_QWORD *)(v311 + 288) = &off_24C9F2C90;
  *(_OWORD *)(v311 + 224) = v322;
  *(_OWORD *)(v311 + 240) = v323;
  v326 = v430;
  v430 = 0uLL;
  *(_QWORD *)(v311 + 360) = v402;
  *(_QWORD *)&v443 = 0;
  v446 = 0uLL;
  *(_QWORD *)(v311 + 144) = &off_24C9F2C28;
  *(_OWORD *)(v311 + 264) = v324;
  *(_OWORD *)(v311 + 296) = v428;
  *(_QWORD *)&v425 = 0;
  v428 = 0uLL;
  *(_QWORD *)(v311 + 312) = &off_24C9F2C28;
  *(_OWORD *)(v311 + 320) = v326;
  __p[1] = 0;
  __p[2] = 0;
  v402 = 0;
  v327 = v403;
  *(_QWORD *)(v311 + 384) = v404;
  *(_OWORD *)(v311 + 368) = v327;
  v403 = 0uLL;
  v404 = 0;
  v328 = v405;
  v405 = 0uLL;
  v329 = v406;
  *(_OWORD *)(v311 + 392) = v328;
  *(_OWORD *)(v311 + 408) = v329;
  v406 = 0uLL;
  *(_OWORD *)(v311 + 432) = v408;
  v330 = v409;
  *((_QWORD *)&v408 + 1) = 0;
  v409 = 0;
  *(_QWORD *)(v311 + 448) = v330;
  *(_QWORD *)(v311 + 456) = &off_24C9B2520;
  *(_OWORD *)(v311 + 464) = v411;
  *(_QWORD *)&v408 = 0;
  v411 = 0uLL;
  *(_QWORD *)(v311 + 480) = &off_24C9F2C28;
  *(_OWORD *)(v311 + 488) = v413;
  v413 = 0uLL;
  *(_QWORD *)(v311 + 504) = &off_24C9F2D30;
  v331 = *(_OWORD *)&__dst[1];
  *(_QWORD *)(v311 + 528) = v385;
  *(_OWORD *)(v311 + 512) = v331;
  __dst[1] = 0;
  __dst[2] = 0;
  v385 = 0;
  v332 = v386;
  *(_QWORD *)(v311 + 552) = v387;
  *(_OWORD *)(v311 + 536) = v332;
  v386 = 0uLL;
  v387 = 0;
  v333 = v388;
  v388 = 0uLL;
  v334 = v389;
  *(_OWORD *)(v311 + 560) = v333;
  *(_OWORD *)(v311 + 576) = v334;
  v389 = 0uLL;
  *(_QWORD *)(v311 + 592) = &off_24C9B4710;
  *(_OWORD *)(v311 + 600) = v391;
  *(_QWORD *)(v311 + 616) = v392;
  *((_QWORD *)&v391 + 1) = 0;
  v392 = 0;
  *(_QWORD *)(v311 + 624) = &off_24C9F2D60;
  *(_OWORD *)(v311 + 632) = v394;
  v394 = 0uLL;
  *(_QWORD *)&v391 = 0;
  *(_QWORD *)(v311 + 648) = &off_24C9F2C28;
  *(_OWORD *)(v311 + 656) = v396;
  v396 = 0uLL;
  *(_QWORD *)(v311 + 672) = &off_24C9F2D98;
  v335 = *(_OWORD *)&v367[1];
  *(_QWORD *)(v311 + 696) = v368;
  *(_OWORD *)(v311 + 680) = v335;
  v367[1] = 0;
  v367[2] = 0;
  v368 = 0;
  v336 = v369;
  *(_QWORD *)(v311 + 720) = v370;
  *(_OWORD *)(v311 + 704) = v336;
  v369 = 0uLL;
  v370 = 0;
  v337 = v371;
  v371 = 0uLL;
  v338 = v372;
  *(_OWORD *)(v311 + 728) = v337;
  *(_OWORD *)(v311 + 744) = v338;
  v372 = 0uLL;
  *(_QWORD *)(v311 + 760) = &off_24C9F2DC8;
  *(_OWORD *)(v311 + 768) = v374;
  *(_QWORD *)(v311 + 784) = v375;
  *((_QWORD *)&v374 + 1) = 0;
  v375 = 0;
  *(_QWORD *)(v311 + 792) = &off_24C9B2520;
  *(_OWORD *)(v311 + 800) = v377;
  v377 = 0uLL;
  *(_QWORD *)&v374 = 0;
  *(_QWORD *)(v311 + 816) = &off_24C9F2C28;
  *(_OWORD *)(v311 + 824) = v379;
  v379 = 0uLL;
  *v365 = v311;
  sub_20EFCFF8C((uint64_t)v367);
  if (v366)
  {
    v339 = (unint64_t *)&v366->__shared_owners_;
    do
      v340 = __ldaxr(v339);
    while (__stlxr(v340 - 1, v339));
    if (!v340)
    {
      ((void (*)(std::__shared_weak_count *))v366->__on_zero_shared)(v366);
      std::__shared_weak_count::__release_weak(v366);
    }
  }
  sub_20EFD0170((uint64_t)__dst);
  v341 = v381;
  if (v381)
  {
    v342 = (unint64_t *)&v381->__shared_owners_;
    do
      v343 = __ldaxr(v342);
    while (__stlxr(v343 - 1, v342));
    if (!v343)
    {
      ((void (*)(std::__shared_weak_count *))v341->__on_zero_shared)(v341);
      std::__shared_weak_count::__release_weak(v341);
    }
  }
  v344 = v383;
  if (v383)
  {
    v345 = (unint64_t *)&v383->__shared_owners_;
    do
      v346 = __ldaxr(v345);
    while (__stlxr(v346 - 1, v345));
    if (!v346)
    {
      ((void (*)(std::__shared_weak_count *))v344->__on_zero_shared)(v344);
      std::__shared_weak_count::__release_weak(v344);
    }
  }
  sub_20EFD0354((uint64_t)__p);
  v347 = v398;
  if (v398)
  {
    v348 = (unint64_t *)&v398->__shared_owners_;
    do
      v349 = __ldaxr(v348);
    while (__stlxr(v349 - 1, v348));
    if (!v349)
    {
      ((void (*)(std::__shared_weak_count *))v347->__on_zero_shared)(v347);
      std::__shared_weak_count::__release_weak(v347);
    }
  }
  v350 = v400;
  if (v400)
  {
    v351 = (unint64_t *)&v400->__shared_owners_;
    do
      v352 = __ldaxr(v351);
    while (__stlxr(v352 - 1, v351));
    if (!v352)
    {
      ((void (*)(std::__shared_weak_count *))v350->__on_zero_shared)(v350);
      std::__shared_weak_count::__release_weak(v350);
    }
  }
  sub_20EFD0538((uint64_t)v418);
  v353 = v415;
  if (v415)
  {
    v354 = (unint64_t *)&v415->__shared_owners_;
    do
      v355 = __ldaxr(v354);
    while (__stlxr(v355 - 1, v354));
    if (!v355)
    {
      ((void (*)(std::__shared_weak_count *))v353->__on_zero_shared)(v353);
      std::__shared_weak_count::__release_weak(v353);
    }
  }
  v356 = v417;
  if (v417)
  {
    v357 = (unint64_t *)&v417->__shared_owners_;
    do
      v358 = __ldaxr(v357);
    while (__stlxr(v358 - 1, v357));
    if (!v358)
    {
      ((void (*)(std::__shared_weak_count *))v356->__on_zero_shared)(v356);
      std::__shared_weak_count::__release_weak(v356);
    }
  }
  sub_20EFD071C((uint64_t)&v435);
  v359 = v432;
  if (v432)
  {
    v360 = (unint64_t *)&v432->__shared_owners_;
    do
      v361 = __ldaxr(v360);
    while (__stlxr(v361 - 1, v360));
    if (!v361)
    {
      ((void (*)(std::__shared_weak_count *))v359->__on_zero_shared)(v359);
      std::__shared_weak_count::__release_weak(v359);
    }
  }
  v362 = v434;
  if (v434)
  {
    v363 = (unint64_t *)&v434->__shared_owners_;
    do
      v364 = __ldaxr(v363);
    while (__stlxr(v364 - 1, v363));
    if (!v364)
    {
      ((void (*)(std::__shared_weak_count *))v362->__on_zero_shared)(v362);
      std::__shared_weak_count::__release_weak(v362);
    }
  }
}

void sub_20EFB8370(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, _Unwind_Exception *exception_objecta, char a15, uint64_t a16, char a17, uint64_t a18, void *a19, void *a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41,uint64_t a42,char a43,uint64_t a44,void *a45,void *a46,uint64_t a47,uint64_t a48,void *a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a67;
  char a69;
  void *a71;
  uint64_t v71;

  if (*(char *)(v71 - 233) < 0)
  {
    operator delete(*(void **)(v71 - 256));
    sub_20E86665C(v71 - 224);
    sub_20E86665C(v71 - 208);
    if ((SLOBYTE(STACK[0x447]) & 0x80000000) == 0)
    {
LABEL_3:
      if ((SLOBYTE(STACK[0x467]) & 0x80000000) == 0)
        goto LABEL_5;
      goto LABEL_4;
    }
  }
  else
  {
    sub_20E86665C(v71 - 224);
    sub_20E86665C(v71 - 208);
    if ((SLOBYTE(STACK[0x447]) & 0x80000000) == 0)
      goto LABEL_3;
  }
  operator delete((void *)STACK[0x430]);
  if ((SLOBYTE(STACK[0x467]) & 0x80000000) == 0)
  {
LABEL_5:
    sub_20E86665C((uint64_t)&a15);
    sub_20E86665C((uint64_t)&a17);
    sub_20EFD0170((uint64_t)&a45);
    sub_20E86665C((uint64_t)&a41);
    sub_20E86665C((uint64_t)&a43);
    sub_20EFD0354((uint64_t)&a71);
    sub_20E86665C((uint64_t)&a67);
    sub_20E86665C((uint64_t)&a69);
    sub_20EFD0538((uint64_t)&STACK[0x2C0]);
    sub_20E86665C((uint64_t)&STACK[0x2A0]);
    sub_20E86665C((uint64_t)&STACK[0x2B0]);
    sub_20EFD071C((uint64_t)&STACK[0x388]);
    sub_20E86665C((uint64_t)&STACK[0x368]);
    sub_20E86665C((uint64_t)&STACK[0x378]);
    _Unwind_Resume(a1);
  }
LABEL_4:
  operator delete((void *)STACK[0x450]);
  goto LABEL_5;
}

void sub_20EFB88F8()
{
  int v0;
  void *v1;
  uint64_t v2;

  sub_20E86665C(v2 - 144);
  if (v0 < 0)
    operator delete(v1);
  JUMPOUT(0x20EFB881CLL);
}

void sub_20EFB8914(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  void *__p;
  std::__shared_weak_count *v72;
  uint64_t v73;
  uint64_t v74;

  if (v72)
  {
    std::__shared_weak_count::__release_weak(v72);
    sub_20E86665C(v73);
    sub_20E86665C(v74);
    if ((SLOBYTE(STACK[0x227]) & 0x80000000) == 0)
    {
LABEL_3:
      if ((SLOBYTE(STACK[0x20F]) & 0x80000000) == 0)
      {
LABEL_5:
        sub_20E86665C((uint64_t)&STACK[0x430]);
        sub_20E86665C((uint64_t)&STACK[0x450]);
        JUMPOUT(0x20EFB8A00);
      }
LABEL_4:
      operator delete(__p);
      goto LABEL_5;
    }
  }
  else
  {
    sub_20E86665C(v73);
    sub_20E86665C(v74);
    if ((SLOBYTE(STACK[0x227]) & 0x80000000) == 0)
      goto LABEL_3;
  }
  operator delete((void *)STACK[0x210]);
  if ((SLOBYTE(STACK[0x20F]) & 0x80000000) == 0)
    goto LABEL_5;
  goto LABEL_4;
}

void sub_20EFB8990()
{
  uint64_t v0;

  (*(void (**)(uint64_t))(*(_QWORD *)v0 + 8))(v0);
  sub_20E86665C((uint64_t)&STACK[0x450]);
  JUMPOUT(0x20EFB89F8);
}

void sub_20EFB8A80()
{
  int v0;
  void *v1;

  sub_20E86665C((uint64_t)&STACK[0x430]);
  if (v0 < 0)
    operator delete(v1);
  JUMPOUT(0x20EFB8A00);
}

void sub_20EFB8A9C()
{
  std::__shared_weak_count *v0;
  uint64_t v1;
  uint64_t v2;

  if (v0)
  {
    std::__shared_weak_count::__release_weak(v0);
    sub_20E86665C(v1);
    sub_20E86665C(v2);
    if ((SLOBYTE(STACK[0x2F7]) & 0x80000000) == 0)
    {
LABEL_3:
      if ((SLOBYTE(STACK[0x2DF]) & 0x80000000) == 0)
      {
LABEL_5:
        sub_20E86665C((uint64_t)&STACK[0x450]);
        sub_20E86665C((uint64_t)&STACK[0x470]);
        JUMPOUT(0x20EFB8B8CLL);
      }
LABEL_4:
      operator delete((void *)STACK[0x2C8]);
      goto LABEL_5;
    }
  }
  else
  {
    sub_20E86665C(v1);
    sub_20E86665C(v2);
    if ((SLOBYTE(STACK[0x2F7]) & 0x80000000) == 0)
      goto LABEL_3;
  }
  operator delete((void *)STACK[0x2E0]);
  if ((SLOBYTE(STACK[0x2DF]) & 0x80000000) == 0)
    goto LABEL_5;
  goto LABEL_4;
}

void sub_20EFB8B1C()
{
  uint64_t v0;

  (*(void (**)(uint64_t))(*(_QWORD *)v0 + 8))(v0);
  sub_20E86665C((uint64_t)&STACK[0x470]);
  JUMPOUT(0x20EFB8B84);
}

void sub_20EFB8C0C()
{
  void *v0;
  int v1;

  sub_20E86665C((uint64_t)&STACK[0x450]);
  if (v1 < 0)
    operator delete(v0);
  JUMPOUT(0x20EFB8B8CLL);
}

void sub_20EFB8C28()
{
  std::__shared_weak_count *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  if (v0)
  {
    std::__shared_weak_count::__release_weak(v0);
    sub_20E86665C(v1);
    sub_20E86665C(v2);
    if ((SLOBYTE(STACK[0x3BF]) & 0x80000000) == 0)
    {
LABEL_3:
      if ((SLOBYTE(STACK[0x3A7]) & 0x80000000) == 0)
      {
LABEL_5:
        sub_20E86665C((uint64_t)&STACK[0x470]);
        sub_20E86665C(v3 - 256);
        JUMPOUT(0x20EFB8D14);
      }
LABEL_4:
      operator delete((void *)STACK[0x390]);
      goto LABEL_5;
    }
  }
  else
  {
    sub_20E86665C(v1);
    sub_20E86665C(v2);
    if ((SLOBYTE(STACK[0x3BF]) & 0x80000000) == 0)
      goto LABEL_3;
  }
  operator delete((void *)STACK[0x3A8]);
  if ((SLOBYTE(STACK[0x3A7]) & 0x80000000) == 0)
    goto LABEL_5;
  goto LABEL_4;
}

void sub_20EFB8CA4()
{
  uint64_t v0;
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v0 + 8))(v0);
  sub_20E86665C(v1 - 256);
  JUMPOUT(0x20EFB8D0CLL);
}

void sub_20EFB8DA8()
{
  void *v0;
  int v1;

  sub_20E86665C((uint64_t)&STACK[0x470]);
  if (v1 < 0)
    operator delete(v0);
  JUMPOUT(0x20EFB8D14);
}

void sub_20EFB8DC4(uint64_t a1)
{
  sub_20EFD0900(a1);
  JUMPOUT(0x212BC6398);
}

void sub_20EFB8DFC(uint64_t a1)
{
  sub_20EFD071C(a1);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20EFB8E20(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24C9F2B80;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void sub_20EFB8E60(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24C9F2B80;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20EFB8EB0(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
}

_QWORD *sub_20EFB8EC0(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_24C9F2BB8;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_20EFB8EF8(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_24C9F2BB8;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x212BC6398);
}

void sub_20EFB8F40(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  uint64_t (**v12)();
  uint64_t v13;
  uint64_t v14;
  std::__shared_weak_count *v15;

  v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3)
  {
    v5 = std::__shared_weak_count::lock(v3);
    v15 = v5;
    if (v5)
    {
      v6 = v5;
      v7 = *(_QWORD *)(a1 + 8);
      v14 = v7;
      if (v7)
      {
        v8 = *(_QWORD *)(a2 + 8);
        *(_QWORD *)(a2 + 8) = 0;
        v12 = &off_24C9F2BF0;
        v13 = v8;
        (*(void (**)(uint64_t, uint64_t (***)()))(*(_QWORD *)v7 + 16))(v7, &v12);
        v9 = v13;
        v12 = &off_24C9F2BF0;
        v13 = 0;
        if (v9)
          (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
      }
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v11 = __ldaxr(p_shared_owners);
      while (__stlxr(v11 - 1, p_shared_owners));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
}

void sub_20EFB9014(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  if (a3)
    (*(void (**)(uint64_t))(*(_QWORD *)a3 + 8))(a3);
  sub_20E86665C((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_20EFB9040(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24C9F2BF0;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void sub_20EFB9080(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24C9F2BF0;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20EFB90D0(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
}

_QWORD *sub_20EFB90E0(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_24C9F2C28;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_20EFB9118(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_24C9F2C28;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x212BC6398);
}

void sub_20EFB9160(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  uint64_t (**v12)();
  uint64_t v13;
  uint64_t v14;
  std::__shared_weak_count *v15;

  v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3)
  {
    v5 = std::__shared_weak_count::lock(v3);
    v15 = v5;
    if (v5)
    {
      v6 = v5;
      v7 = *(_QWORD *)(a1 + 8);
      v14 = v7;
      if (v7)
      {
        v8 = *(_QWORD *)(a2 + 8);
        *(_QWORD *)(a2 + 8) = 0;
        v12 = &off_24C9B46A0;
        v13 = v8;
        (*(void (**)(uint64_t, uint64_t (***)()))(*(_QWORD *)v7 + 16))(v7, &v12);
        v9 = v13;
        v12 = &off_24C9B46A0;
        v13 = 0;
        if (v9)
          (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
      }
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v11 = __ldaxr(p_shared_owners);
      while (__stlxr(v11 - 1, p_shared_owners));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
}

void sub_20EFB9234(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  if (a3)
    (*(void (**)(uint64_t))(*(_QWORD *)a3 + 8))(a3);
  sub_20E86665C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20EFB9260(uint64_t a1)
{
  sub_20EFD0538(a1);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20EFB9284(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_24C9F2C90;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_20EFB92BC(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_24C9F2C90;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x212BC6398);
}

void sub_20EFB9304(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  uint64_t (**v12)();
  uint64_t v13;
  uint64_t v14;
  std::__shared_weak_count *v15;

  v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3)
  {
    v5 = std::__shared_weak_count::lock(v3);
    v15 = v5;
    if (v5)
    {
      v6 = v5;
      v7 = *(_QWORD *)(a1 + 8);
      v14 = v7;
      if (v7)
      {
        v8 = *(_QWORD *)(a2 + 8);
        *(_QWORD *)(a2 + 8) = 0;
        v12 = &off_24C9F2CC8;
        v13 = v8;
        (*(void (**)(uint64_t, uint64_t (***)()))(*(_QWORD *)v7 + 16))(v7, &v12);
        v9 = v13;
        v12 = &off_24C9F2CC8;
        v13 = 0;
        if (v9)
          (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
      }
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v11 = __ldaxr(p_shared_owners);
      while (__stlxr(v11 - 1, p_shared_owners));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
}

void sub_20EFB93D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  if (a3)
    (*(void (**)(uint64_t))(*(_QWORD *)a3 + 8))(a3);
  sub_20E86665C((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_20EFB9404(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24C9F2CC8;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void sub_20EFB9444(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24C9F2CC8;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20EFB9494(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
}

void sub_20EFB94A4(uint64_t a1)
{
  sub_20EFD0354(a1);
  JUMPOUT(0x212BC6398);
}

void sub_20EFB94C8(uint64_t a1)
{
  sub_20EFD0170(a1);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20EFB94EC(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_24C9F2D60;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_20EFB9524(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_24C9F2D60;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x212BC6398);
}

void sub_20EFB956C(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  uint64_t (**v12)();
  uint64_t v13;
  uint64_t v14;
  std::__shared_weak_count *v15;

  v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3)
  {
    v5 = std::__shared_weak_count::lock(v3);
    v15 = v5;
    if (v5)
    {
      v6 = v5;
      v7 = *(_QWORD *)(a1 + 8);
      v14 = v7;
      if (v7)
      {
        v8 = *(_QWORD *)(a2 + 8);
        *(_QWORD *)(a2 + 8) = 0;
        v12 = &off_24C9B4710;
        v13 = v8;
        (*(void (**)(uint64_t, uint64_t (***)()))(*(_QWORD *)v7 + 16))(v7, &v12);
        v9 = v13;
        v12 = &off_24C9B4710;
        v13 = 0;
        if (v9)
          (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
      }
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v11 = __ldaxr(p_shared_owners);
      while (__stlxr(v11 - 1, p_shared_owners));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
}

void sub_20EFB9640(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  if (a3)
    (*(void (**)(uint64_t))(*(_QWORD *)a3 + 8))(a3);
  sub_20E86665C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20EFB966C(uint64_t a1)
{
  sub_20EFCFF8C(a1);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20EFB9690(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24C9F2DC8;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void sub_20EFB96D0(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24C9F2DC8;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20EFB9720(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
}

void sub_20EFB9734(uint64_t a1)
{
  sub_20EFBB0CC(a1);
  JUMPOUT(0x212BC6398);
}

void sub_20EFB9758(_QWORD *a1, std::__shared_weak_count_vtbl **a2)
{
  uint64_t *v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  uint64_t v8;
  _QWORD *v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t *p_shared_weak_owners;
  unint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  unint64_t v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  std::mutex **v28;
  uint64_t **v29;
  std::__shared_weak_count *v30;
  std::__shared_weak_count *v31;
  std::__shared_weak_count *v32;
  uint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  unint64_t *v36;
  unint64_t v37;
  uint64_t **v38;
  std::__shared_weak_count *v39;
  std::__shared_weak_count *v40;
  std::__shared_weak_count *v41;
  uint64_t v42;
  unint64_t *v43;
  unint64_t v44;
  unint64_t *v45;
  unint64_t v46;
  char *v47;
  _QWORD *v48;
  uint64_t v49;
  unint64_t *v50;
  unint64_t v51;
  std::__shared_weak_count_vtbl *v52;
  std::__shared_weak_count_vtbl *v53;
  unint64_t *v54;
  unint64_t v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  __int128 *v60;
  uint64_t v61;
  __int128 v62;
  std::__shared_weak_count *v63;
  __int128 v64;
  uint64_t v65;
  __int128 *v66;
  _BYTE v67[24];
  _BYTE *v68;
  uint64_t v69;

  v69 = *MEMORY[0x24BDAC8D0];
  if (!(*(unsigned int (**)(_QWORD *))(*a1 + 48))(a1))
    return;
  if (!a1[9]
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 234, (uint64_t)"scheduler_", 10, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v4 = (uint64_t *)a1[18];
  if (v4)
  {
    v5 = (std::__shared_weak_count *)operator new(0x28uLL);
    v6 = v5;
    v5->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    v5->__shared_weak_owners_ = 0;
    v5->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9F3010;
    v8 = (uint64_t)a2[1];
    v5[1].__vftable = *a2;
    v9 = &v5[1].__vftable;
    v5[1].__shared_owners_ = v8;
    if (v8)
    {
      v10 = (unint64_t *)(v8 + 8);
      do
        v11 = __ldxr(v10);
      while (__stxr(v11 + 1, v10));
      v4 = (uint64_t *)a1[18];
    }
    v63 = v5;
    p_shared_weak_owners = (unint64_t *)&v5->__shared_weak_owners_;
    do
      v13 = __ldxr(p_shared_weak_owners);
    while (__stxr(v13 + 1, p_shared_weak_owners));
    v14 = (_QWORD *)operator new();
    *v14 = v4 + 7;
    std::mutex::lock((std::mutex *)(v4 + 7));
    *(_QWORD *)&v64 = v14;
    *((_QWORD *)&v64 + 1) = v4;
    if (!*((_BYTE *)v4 + 48))
      sub_20E866B34();
    v15 = v4[4];
    v16 = *v4;
    v17 = (_QWORD *)(*v4 + 16 * v15);
    do
      v18 = __ldxr(p_shared_owners);
    while (__stxr(v18 + 1, p_shared_owners));
    *v17 = v9;
    v19 = v16 + 16 * v15;
    v20 = *(std::__shared_weak_count **)(v19 + 8);
    *(_QWORD *)(v19 + 8) = v6;
    if (v20)
    {
      v21 = (unint64_t *)&v20->__shared_owners_;
      do
        v22 = __ldaxr(v21);
      while (__stlxr(v22 - 1, v21));
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
        std::__shared_weak_count::__release_weak(v20);
      }
    }
    v23 = (v4[1] - *v4) >> 4;
    v24 = v4[5];
    v25 = v4[4] + 1;
    if (v25 >= v23)
      v26 = (v4[1] - *v4) >> 4;
    else
      v26 = 0;
    v4[4] = v25 - v26;
    if (v24 == v23)
    {
      v27 = v4[3] + 1;
      if (v27 < v23)
        v23 = 0;
      v4[3] = v27 - v23;
      v28 = (std::mutex **)v64;
      if (!(_QWORD)v64)
      {
LABEL_37:
        v38 = (uint64_t **)a1[9];
        v64 = 0uLL;
        v39 = (std::__shared_weak_count *)a1[5];
        if (v39)
        {
          v40 = std::__shared_weak_count::lock(v39);
          if (v40)
          {
            v41 = v40;
            v42 = a1[4];
            v43 = (unint64_t *)&v40->__shared_weak_owners_;
            do
              v44 = __ldxr(v43);
            while (__stxr(v44 + 1, v43));
            *(_QWORD *)&v64 = v42;
            *((_QWORD *)&v64 + 1) = v40;
            v45 = (unint64_t *)&v40->__shared_owners_;
            do
              v46 = __ldaxr(v45);
            while (__stlxr(v46 - 1, v45));
            if (!v46)
            {
              ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
              std::__shared_weak_count::__release_weak(v41);
            }
          }
          else
          {
            v64 = 0uLL;
          }
        }
        v47 = (char *)operator new(0x30uLL);
        *(_QWORD *)v47 = &off_24C9F3060;
        *(_OWORD *)(v47 + 8) = v64;
        v64 = 0uLL;
        *((_QWORD *)v47 + 3) = v9;
        *((_QWORD *)v47 + 4) = v6;
        v65 = 0;
        v66 = 0;
        v68 = v47;
        sub_210216F3C(*v38, (uint64_t)v67);
        v48 = v68;
        if (v68 == v67)
        {
          v49 = 4;
          v48 = v67;
        }
        else
        {
          if (!v68)
            goto LABEL_51;
          v49 = 5;
        }
        (*(void (**)(void))(*v48 + 8 * v49))();
LABEL_51:
        if (v63)
        {
          v50 = (unint64_t *)&v63->__shared_owners_;
          do
            v51 = __ldaxr(v50);
          while (__stlxr(v51 - 1, v50));
          if (!v51)
          {
            ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
            std::__shared_weak_count::__release_weak(v63);
          }
        }
        return;
      }
    }
    else
    {
      v4[5] = v24 + 1;
      v28 = (std::mutex **)v64;
      if (!(_QWORD)v64)
        goto LABEL_37;
    }
    std::mutex::unlock(*v28);
    MEMORY[0x212BC6398](v28, 0x20C4093837F09);
    goto LABEL_37;
  }
  v29 = (uint64_t **)a1[9];
  v62 = 0uLL;
  v30 = (std::__shared_weak_count *)a1[5];
  if (v30)
  {
    v31 = std::__shared_weak_count::lock(v30);
    if (v31)
    {
      v32 = v31;
      v33 = a1[4];
      v34 = (unint64_t *)&v31->__shared_weak_owners_;
      do
        v35 = __ldxr(v34);
      while (__stxr(v35 + 1, v34));
      *(_QWORD *)&v62 = v33;
      *((_QWORD *)&v62 + 1) = v31;
      v36 = (unint64_t *)&v31->__shared_owners_;
      do
        v37 = __ldaxr(v36);
      while (__stlxr(v37 - 1, v36));
      if (!v37)
      {
        ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
        std::__shared_weak_count::__release_weak(v32);
      }
    }
    else
    {
      v62 = 0uLL;
    }
  }
  v52 = *a2;
  v53 = a2[1];
  if (v53)
  {
    v54 = (unint64_t *)&v53->~__shared_weak_count_0;
    do
      v55 = __ldxr(v54);
    while (__stxr(v55 + 1, v54));
  }
  v56 = (char *)operator new(0x28uLL);
  *(_QWORD *)v56 = &off_24C9F30E0;
  *(_OWORD *)(v56 + 8) = v62;
  *((_QWORD *)v56 + 3) = v52;
  *((_QWORD *)v56 + 4) = v53;
  v66 = (__int128 *)v56;
  sub_210216F3C(*v29, (uint64_t)&v64);
  v60 = v66;
  if (v66 == &v64)
  {
    v61 = 4;
    v60 = &v64;
  }
  else
  {
    if (!v66)
      return;
    v61 = 5;
  }
  (*(void (**)(__int128 *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v60 + 8 * v61))(v60, v57, v58, v59);
}

void sub_20EFB9BB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, char *a18)
{
  char *v18;
  char *v20;
  uint64_t v21;

  v20 = a18;
  if (a18 == v18)
  {
    v21 = 4;
    v20 = &a15;
  }
  else
  {
    if (!a18)
    {
      sub_20EBB635C((uint64_t)&a9);
      _Unwind_Resume(a1);
    }
    v21 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v20 + 8 * v21))();
  sub_20EBB635C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20EFB9C0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,char *a23)
{
  char *v23;
  char *v25;
  uint64_t v26;

  v25 = a23;
  if (a23 == v23)
  {
    v26 = 4;
    v25 = &a20;
  }
  else
  {
    if (!a23)
      goto LABEL_6;
    v26 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v25 + 8 * v26))();
LABEL_6:
  sub_20EA02254((uint64_t)&a15);
  sub_20E86665C((uint64_t)&a13);
  _Unwind_Resume(a1);
}

void sub_20EFB9C5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  std::__shared_weak_count *v5;
  uint64_t v7;
  va_list va;
  uint64_t v9;
  va_list va1;

  va_start(va1, a5);
  va_start(va, a5);
  v7 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  sub_20EA0228C((std::mutex ***)va1);
  std::__shared_weak_count::__release_weak(v5);
  sub_20E86665C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20EFB9C80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  std::__shared_weak_count *v5;
  uint64_t v6;
  va_list va;

  va_start(va, a5);
  MEMORY[0x212BC6398](v6, 0x20C4093837F09);
  std::__shared_weak_count::__release_weak(v5);
  sub_20E86665C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20EFB9CB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  std::__shared_weak_count *v13;

  std::__shared_weak_count::__release_weak(v13);
  sub_20E86665C((uint64_t)&a13);
  _Unwind_Resume(a1);
}

uint64_t sub_20EFB9CD4(uint64_t result)
{
  atomic_store(1u, (unsigned __int8 *)(result + 8));
  return result;
}

uint64_t sub_20EFB9CE4(uint64_t result)
{
  atomic_store(0, (unsigned __int8 *)(result + 8));
  return result;
}

uint64_t sub_20EFB9CF0(uint64_t a1)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)(a1 + 8));
  return v1 & 1;
}

void sub_20EFB9D00(_QWORD *a1, std::__shared_weak_count_vtbl **a2, std::__shared_weak_count_vtbl **a3)
{
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t *p_shared_weak_owners;
  unint64_t v17;
  uint64_t *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  std::__shared_weak_count **v22;
  unint64_t v23;
  uint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  std::mutex **v33;
  uint64_t **v34;
  std::__shared_weak_count *v35;
  std::__shared_weak_count *v36;
  std::__shared_weak_count *v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  unint64_t *v41;
  unint64_t v42;
  uint64_t **v43;
  std::__shared_weak_count *v44;
  std::__shared_weak_count *v45;
  std::__shared_weak_count *v46;
  uint64_t v47;
  unint64_t *v48;
  unint64_t v49;
  unint64_t *v50;
  unint64_t v51;
  char *v52;
  std::string *v53;
  uint64_t v54;
  uint64_t *v55;
  unint64_t v56;
  unint64_t *v57;
  unint64_t v58;
  std::__shared_weak_count_vtbl *v59;
  std::__shared_weak_count_vtbl *v60;
  unint64_t *v61;
  unint64_t v62;
  _QWORD *v63;
  char *v64;
  __int128 *v65;
  uint64_t v66;
  _QWORD *v67;
  _QWORD *v68;
  _QWORD *v69;
  __int128 *v70;
  std::string *v71;
  std::runtime_error *exception;
  std::runtime_error *v73;
  std::__shared_weak_count *v74[2];
  _QWORD *v75;
  std::__shared_weak_count *v76;
  std::__shared_weak_count *v77;
  std::runtime_error v78;
  std::__shared_weak_count *v79;
  std::__shared_weak_count *v80;
  __int128 v81;
  _QWORD *v82;
  __int128 *v83;
  _QWORD v84[3];
  std::string v85;
  std::string *v86;
  uint64_t v87;

  v87 = *MEMORY[0x24BDAC8D0];
  if (((*(uint64_t (**)(_QWORD *))(*a1 + 48))(a1) & 1) == 0)
  {
    *(_QWORD *)&v81 = "Invalid operation. Interface is disabled for ";
    *((_QWORD *)&v81 + 1) = 45;
    v69 = (_QWORD *)a1[6];
    v68 = a1 + 6;
    v67 = v69;
    v70 = (__int128 *)*((unsigned __int8 *)v68 + 23);
    if ((char)v70 < 0)
      v70 = (__int128 *)v68[1];
    else
      v67 = v68;
    v82 = v67;
    v83 = v70;
    sub_20E8778D4((uint64_t)&v81, (uint64_t)v84, 0, 0, &v85);
    if ((v85.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v71 = &v85;
    else
      v71 = (std::string *)v85.__r_.__value_.__r.__words[0];
    std::runtime_error::runtime_error(&v78, (const char *)v71);
    v78.__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v73 = std::runtime_error::runtime_error(exception, &v78);
    v73->__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    __cxa_throw(v73, (struct type_info *)&unk_24CA1E2D0, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  if (!a1[9]
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 294, (uint64_t)"scheduler_", 10, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  if (a1[18])
  {
    v6 = (std::__shared_weak_count *)operator new(0x20uLL);
    v6->__shared_weak_owners_ = 0;
    v6->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9F3160;
    v6[1].__vftable = *a3;
    v77 = v6;
    v75 = &v6[1].__vftable;
    v76 = v6;
    v6->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    *a3 = 0;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    if (!a1[18]
      && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 414, (uint64_t)"limiting_buffer_", 16, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v9 = (std::__shared_weak_count *)operator new(0x28uLL);
    v10 = v9;
    v9->__shared_owners_ = 0;
    v11 = (unint64_t *)&v9->__shared_owners_;
    v9->__shared_weak_owners_ = 0;
    v9->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9F3010;
    v12 = (uint64_t)a2[1];
    v9[1].__vftable = *a2;
    v13 = v9 + 1;
    v9[1].__shared_owners_ = v12;
    if (v12)
    {
      v14 = (unint64_t *)(v12 + 8);
      do
        v15 = __ldxr(v14);
      while (__stxr(v15 + 1, v14));
    }
    v79 = v9 + 1;
    v80 = v9;
    p_shared_weak_owners = (unint64_t *)&v9->__shared_weak_owners_;
    do
      v17 = __ldxr(p_shared_weak_owners);
    while (__stxr(v17 + 1, p_shared_weak_owners));
    v18 = (uint64_t *)a1[18];
    v19 = (_QWORD *)operator new();
    *v19 = v18 + 7;
    std::mutex::lock((std::mutex *)(v18 + 7));
    *(_QWORD *)&v81 = v19;
    *((_QWORD *)&v81 + 1) = v18;
    if (!*((_BYTE *)v18 + 48))
      sub_20E866B34();
    v20 = v18[4];
    v21 = *v18;
    v22 = (std::__shared_weak_count **)(*v18 + 16 * v20);
    do
      v23 = __ldxr(v11);
    while (__stxr(v23 + 1, v11));
    *v22 = v13;
    v24 = v21 + 16 * v20;
    v25 = *(std::__shared_weak_count **)(v24 + 8);
    *(_QWORD *)(v24 + 8) = v10;
    if (v25)
    {
      v26 = (unint64_t *)&v25->__shared_owners_;
      do
        v27 = __ldaxr(v26);
      while (__stlxr(v27 - 1, v26));
      if (!v27)
      {
        ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
        std::__shared_weak_count::__release_weak(v25);
      }
    }
    v28 = (v18[1] - *v18) >> 4;
    v29 = v18[5];
    v30 = v18[4] + 1;
    if (v30 >= v28)
      v31 = (v18[1] - *v18) >> 4;
    else
      v31 = 0;
    v18[4] = v30 - v31;
    if (v29 == v28)
    {
      v32 = v18[3] + 1;
      if (v32 < v28)
        v28 = 0;
      v18[3] = v32 - v28;
      v33 = (std::mutex **)v81;
      if (!(_QWORD)v81)
      {
LABEL_40:
        v43 = (uint64_t **)a1[9];
        v81 = 0uLL;
        v44 = (std::__shared_weak_count *)a1[5];
        if (v44)
        {
          v45 = std::__shared_weak_count::lock(v44);
          if (v45)
          {
            v46 = v45;
            v47 = a1[4];
            v48 = (unint64_t *)&v45->__shared_weak_owners_;
            do
              v49 = __ldxr(v48);
            while (__stxr(v49 + 1, v48));
            *(_QWORD *)&v81 = v47;
            *((_QWORD *)&v81 + 1) = v45;
            v50 = (unint64_t *)&v45->__shared_owners_;
            do
              v51 = __ldaxr(v50);
            while (__stlxr(v51 - 1, v50));
            if (!v51)
            {
              ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
              std::__shared_weak_count::__release_weak(v46);
            }
          }
          else
          {
            v81 = 0uLL;
          }
        }
        v52 = (char *)operator new(0x38uLL);
        *(_QWORD *)v52 = &off_24C9F31B0;
        *(_OWORD *)(v52 + 8) = v81;
        v81 = 0uLL;
        *((_QWORD *)v52 + 3) = v13;
        *((_QWORD *)v52 + 4) = v10;
        v82 = 0;
        v83 = 0;
        *((_QWORD *)v52 + 5) = v75;
        *((_QWORD *)v52 + 6) = v76;
        v84[0] = 0;
        v84[1] = 0;
        v86 = (std::string *)v52;
        sub_210216F3C(*v43, (uint64_t)&v85);
        v53 = v86;
        if (v86 == &v85)
        {
          v54 = 4;
          v53 = &v85;
        }
        else
        {
          if (!v86)
            goto LABEL_54;
          v54 = 5;
        }
        (*(void (**)(void))(v53->__r_.__value_.__r.__words[0] + 8 * v54))();
LABEL_54:
        if (v80)
        {
          v55 = &v80->__shared_owners_;
          do
            v56 = __ldaxr((unint64_t *)v55);
          while (__stlxr(v56 - 1, (unint64_t *)v55));
          if (!v56)
          {
            ((void (*)(std::__shared_weak_count *))v80->__on_zero_shared)(v80);
            std::__shared_weak_count::__release_weak(v80);
          }
        }
        if (v77)
        {
          v57 = (unint64_t *)&v77->__shared_owners_;
          do
            v58 = __ldaxr(v57);
          while (__stlxr(v58 - 1, v57));
          if (!v58)
          {
            ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
            std::__shared_weak_count::__release_weak(v77);
          }
        }
        return;
      }
    }
    else
    {
      v18[5] = v29 + 1;
      v33 = (std::mutex **)v81;
      if (!(_QWORD)v81)
        goto LABEL_40;
    }
    std::mutex::unlock(*v33);
    MEMORY[0x212BC6398](v33, 0x20C4093837F09);
    goto LABEL_40;
  }
  v34 = (uint64_t **)a1[9];
  *(_OWORD *)v74 = 0uLL;
  v35 = (std::__shared_weak_count *)a1[5];
  if (v35)
  {
    v36 = std::__shared_weak_count::lock(v35);
    if (v36)
    {
      v37 = v36;
      v38 = (std::__shared_weak_count *)a1[4];
      v39 = (unint64_t *)&v36->__shared_weak_owners_;
      do
        v40 = __ldxr(v39);
      while (__stxr(v40 + 1, v39));
      v74[0] = v38;
      v74[1] = v36;
      v41 = (unint64_t *)&v36->__shared_owners_;
      do
        v42 = __ldaxr(v41);
      while (__stlxr(v42 - 1, v41));
      if (!v42)
      {
        ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
        std::__shared_weak_count::__release_weak(v37);
      }
    }
    else
    {
      *(_OWORD *)v74 = 0uLL;
    }
  }
  v59 = *a2;
  v60 = a2[1];
  if (v60)
  {
    v61 = (unint64_t *)&v60->~__shared_weak_count_0;
    do
      v62 = __ldxr(v61);
    while (__stxr(v62 + 1, v61));
  }
  v63 = operator new(0x20uLL);
  v63[1] = 0;
  v63[2] = 0;
  *v63 = &off_24C9F3160;
  v63[3] = *a3;
  *a3 = 0;
  v64 = (char *)operator new(0x38uLL);
  *(_QWORD *)v64 = &off_24C9F3230;
  *(_OWORD *)(v64 + 8) = *(_OWORD *)v74;
  *((_QWORD *)v64 + 3) = v59;
  *((_QWORD *)v64 + 4) = v60;
  *((_QWORD *)v64 + 5) = v63 + 3;
  *((_QWORD *)v64 + 6) = v63;
  v83 = (__int128 *)v64;
  sub_210216F3C(*v34, (uint64_t)&v81);
  v65 = v83;
  if (v83 == &v81)
  {
    v66 = 4;
    v65 = &v81;
  }
  else
  {
    if (!v83)
      return;
    v66 = 5;
  }
  (*(void (**)(__int128 *))(*(_QWORD *)v65 + 8 * v66))(v65);
}

void sub_20EFBA3DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, std::runtime_error a20,std::exception_ptr a21,uint64_t a22,uint64_t a23,std::exception_ptr a24)
{
  std::__assoc_sub_state **v24;
  uint64_t v25;
  std::__assoc_sub_state *v26;
  std::exception_ptr v27;

  if (a2)
  {
    __cxa_begin_catch(exception_object);
    std::current_exception();
    __cxa_end_catch();
    v26 = *v24;
    if (*v24)
    {
      std::exception_ptr::exception_ptr(&a24, &a21);
      v27.__ptr_ = &a24;
      std::__assoc_sub_state::set_exception(v26, v27);
      std::exception_ptr::~exception_ptr(&a24);
      std::exception_ptr::~exception_ptr(&a21);
      std::runtime_error::~runtime_error(&a20);
      if (*(char *)(v25 - 97) < 0)
        operator delete(*(void **)(v25 - 120));
      JUMPOUT(0x20EFBA2ECLL);
    }
    sub_20E96CE78(3u);
  }
  _Unwind_Resume(exception_object);
}

void sub_20EFBA450(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, std::runtime_error a20,std::exception_ptr a21,uint64_t a22,uint64_t a23,std::exception_ptr a24)
{
  uint64_t v24;

  std::exception_ptr::~exception_ptr(&a21);
  std::runtime_error::~runtime_error(&a20);
  if (*(char *)(v24 - 97) < 0)
  {
    operator delete(*(void **)(v24 - 120));
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void sub_20EFBA4A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,char *a28)
{
  char *v28;
  char *v30;
  uint64_t v31;

  v30 = a28;
  if (a28 == v28)
  {
    v31 = 4;
    v30 = &a25;
  }
  else
  {
    if (!a28)
    {
      sub_20EBB7258(&a9);
      _Unwind_Resume(a1);
    }
    v31 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v30 + 8 * v31))();
  sub_20EBB7258(&a9);
  _Unwind_Resume(a1);
}

void sub_20EFBA4F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  uint64_t v10;

  sub_20E86665C(v10);
  if (a10)
  {
    std::__shared_weak_count::__release_weak(a10);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void sub_20EFBA524(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  va_list va;
  uint64_t v15;
  uint64_t v16;
  va_list va1;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  va_list va2;
  uint64_t v24;
  va_list va3;

  va_start(va3, a8);
  va_start(va2, a8);
  va_start(va1, a8);
  va_start(va, a8);
  v13 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v16 = va_arg(va2, _QWORD);
  v18 = va_arg(va2, _QWORD);
  v19 = va_arg(va2, _QWORD);
  v20 = va_arg(va2, _QWORD);
  v21 = va_arg(va2, _QWORD);
  va_copy(va3, va2);
  v22 = va_arg(va3, _QWORD);
  v24 = va_arg(va3, _QWORD);
  v11 = *(_QWORD **)(v9 - 96);
  if (v11 == v8)
  {
    v12 = 4;
    v11 = (_QWORD *)(v9 - 120);
  }
  else
  {
    if (!v11)
      goto LABEL_6;
    v12 = 5;
  }
  (*(void (**)(void))(*v11 + 8 * v12))();
LABEL_6:
  sub_20EA031A8((uint64_t *)va3);
  sub_20E86665C((uint64_t)va2);
  sub_20E86665C((uint64_t)va);
  sub_20E86665C((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_20EFBA5C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  uint64_t v9;
  va_list va;
  uint64_t v11;
  va_list va1;

  va_start(va1, a8);
  va_start(va, a8);
  v9 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  sub_20E86665C((uint64_t)va);
  sub_20E86665C((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_20EFBA5E0(uint64_t a1)
{
  uint64_t *v1;

  v1 = *(uint64_t **)(a1 + 72);
  if (v1)
  {
    sub_210217048(*v1);
  }
  else
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 167, (uint64_t)"scheduler_ != nullptr", 21, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    sub_210217048(**(_QWORD **)(a1 + 72));
  }
}

_QWORD *sub_20EFBA654(_QWORD *a1, uint64_t a2)
{
  uint64_t **v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *result;
  uint64_t v12;
  _BYTE v13[24];
  _BYTE *v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v4 = (uint64_t **)a1[9];
  if (!v4)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 181, (uint64_t)"scheduler_", 10, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v4 = (uint64_t **)a1[9];
  }
  v6 = a1[4];
  v5 = a1[5];
  if (v5)
  {
    v7 = (unint64_t *)(v5 + 16);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  v9 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v10 = operator new(0x28uLL);
  *v10 = &off_24C9F32B0;
  v10[1] = v6;
  v10[2] = v5;
  v10[3] = &off_24C9F2BF0;
  v10[4] = v9;
  v14 = v10;
  sub_210216F3C(*v4, (uint64_t)v13);
  result = v14;
  if (v14 == v13)
  {
    v12 = 4;
    result = v13;
  }
  else
  {
    if (!v14)
      return result;
    v12 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v12))();
}

void sub_20EFBA784(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v13;

  if (a13 == v13)
  {
    (*(void (**)(void))(a10 + 32))();
    _Unwind_Resume(exception_object);
  }
  if (a13)
  {
    (*(void (**)(void))(*(_QWORD *)a13 + 40))();
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20EFBA7F8(_QWORD *a1, uint64_t a2)
{
  uint64_t **v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *result;
  uint64_t v12;
  _BYTE v13[24];
  _BYTE *v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v4 = (uint64_t **)a1[9];
  if (!v4)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 202, (uint64_t)"scheduler_", 10, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v4 = (uint64_t **)a1[9];
  }
  v6 = a1[4];
  v5 = a1[5];
  if (v5)
  {
    v7 = (unint64_t *)(v5 + 16);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  v9 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v10 = operator new(0x28uLL);
  *v10 = &off_24C9F3330;
  v10[1] = v6;
  v10[2] = v5;
  v10[3] = &off_24C9B46A0;
  v10[4] = v9;
  v14 = v10;
  sub_210216F3C(*v4, (uint64_t)v13);
  result = v14;
  if (v14 == v13)
  {
    v12 = 4;
    result = v13;
  }
  else
  {
    if (!v14)
      return result;
    v12 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v12))();
}

void sub_20EFBA928(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v13;

  if (a13 == v13)
  {
    (*(void (**)(void))(a10 + 32))();
    _Unwind_Resume(exception_object);
  }
  if (a13)
  {
    (*(void (**)(void))(*(_QWORD *)a13 + 40))();
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_20EFBA99C@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  unint64_t *v5;
  int v6;
  unint64_t v7;
  uint64_t **v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *p_shared_weak_owners;
  unint64_t v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v22;
  _BYTE v23[24];
  _BYTE *v24;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  v4 = operator new();
  *(_QWORD *)(v4 + 8) = 0;
  v5 = (unint64_t *)(v4 + 8);
  *(_QWORD *)(v4 + 24) = 850045863;
  *(_QWORD *)(v4 + 16) = 0;
  *(_OWORD *)(v4 + 32) = 0u;
  *(_OWORD *)(v4 + 48) = 0u;
  *(_OWORD *)(v4 + 64) = 0u;
  *(_QWORD *)(v4 + 80) = 0;
  *(_QWORD *)(v4 + 88) = 1018212795;
  *(_OWORD *)(v4 + 96) = 0u;
  *(_OWORD *)(v4 + 112) = 0u;
  *(_OWORD *)(v4 + 124) = 0u;
  *(_QWORD *)v4 = &off_24C9B80A0;
  v22 = v4;
  std::mutex::lock((std::mutex *)(v4 + 24));
  v6 = *(_DWORD *)(v4 + 136);
  if ((v6 & 2) != 0)
    sub_20E96CE78(1u);
  do
    v7 = __ldxr(v5);
  while (__stxr(v7 + 1, v5));
  *(_DWORD *)(v4 + 136) = v6 | 2;
  std::mutex::unlock((std::mutex *)(v4 + 24));
  v8 = (uint64_t **)a1[9];
  v9 = (std::__shared_weak_count *)a1[5];
  if (v9)
  {
    v10 = std::__shared_weak_count::lock(v9);
    v11 = v10;
    if (v10)
    {
      v12 = a1[4];
      p_shared_weak_owners = (unint64_t *)&v10->__shared_weak_owners_;
      do
        v14 = __ldxr(p_shared_weak_owners);
      while (__stxr(v14 + 1, p_shared_weak_owners));
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        v16 = __ldaxr(p_shared_owners);
      while (__stlxr(v16 - 1, p_shared_owners));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    else
    {
      v12 = 0;
    }
  }
  else
  {
    v12 = 0;
    v11 = 0;
  }
  v17 = operator new(0x20uLL);
  *v17 = &off_24C9F33B0;
  v17[1] = v12;
  v17[2] = v11;
  v17[3] = &v22;
  v24 = v17;
  sub_210216F3C(*v8, (uint64_t)v23);
  v18 = v24;
  if (v24 == v23)
  {
    v19 = 4;
    v18 = v23;
    goto LABEL_17;
  }
  if (v24)
  {
    v19 = 5;
LABEL_17:
    (*(void (**)(_QWORD *))(*v18 + 8 * v19))(v18);
  }
  std::__assoc_sub_state::wait((std::__assoc_sub_state *)v4);
  sub_20EA04D14(v4, a2);
  do
    v20 = __ldaxr(v5);
  while (__stlxr(v20 - 1, v5));
  if (!v20)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
  return sub_20EA04DE8(&v22);
}

void sub_20EFBABB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  unint64_t *v10;
  unint64_t v12;

  do
    v12 = __ldaxr(v10);
  while (__stlxr(v12 - 1, v10));
  if (!v12)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
    sub_20EA04DE8(&a9);
    _Unwind_Resume(a1);
  }
  sub_20EA04DE8(&a9);
  _Unwind_Resume(a1);
}

uint64_t *sub_20EFBAC7C@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  unint64_t *v5;
  int v6;
  unint64_t v7;
  uint64_t **v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *p_shared_weak_owners;
  unint64_t v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v22;
  _BYTE v23[24];
  _BYTE *v24;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  v4 = operator new();
  *(_QWORD *)(v4 + 8) = 0;
  v5 = (unint64_t *)(v4 + 8);
  *(_QWORD *)(v4 + 24) = 850045863;
  *(_QWORD *)(v4 + 16) = 0;
  *(_OWORD *)(v4 + 32) = 0u;
  *(_OWORD *)(v4 + 48) = 0u;
  *(_OWORD *)(v4 + 64) = 0u;
  *(_QWORD *)(v4 + 80) = 0;
  *(_QWORD *)(v4 + 88) = 1018212795;
  *(_OWORD *)(v4 + 96) = 0u;
  *(_OWORD *)(v4 + 112) = 0u;
  *(_OWORD *)(v4 + 124) = 0u;
  *(_QWORD *)v4 = &off_24C9B80A0;
  v22 = v4;
  std::mutex::lock((std::mutex *)(v4 + 24));
  v6 = *(_DWORD *)(v4 + 136);
  if ((v6 & 2) != 0)
    sub_20E96CE78(1u);
  do
    v7 = __ldxr(v5);
  while (__stxr(v7 + 1, v5));
  *(_DWORD *)(v4 + 136) = v6 | 2;
  std::mutex::unlock((std::mutex *)(v4 + 24));
  v8 = (uint64_t **)a1[9];
  v9 = (std::__shared_weak_count *)a1[5];
  if (v9)
  {
    v10 = std::__shared_weak_count::lock(v9);
    v11 = v10;
    if (v10)
    {
      v12 = a1[4];
      p_shared_weak_owners = (unint64_t *)&v10->__shared_weak_owners_;
      do
        v14 = __ldxr(p_shared_weak_owners);
      while (__stxr(v14 + 1, p_shared_weak_owners));
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        v16 = __ldaxr(p_shared_owners);
      while (__stlxr(v16 - 1, p_shared_owners));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    else
    {
      v12 = 0;
    }
  }
  else
  {
    v12 = 0;
    v11 = 0;
  }
  v17 = operator new(0x20uLL);
  *v17 = &off_24C9F3430;
  v17[1] = v12;
  v17[2] = v11;
  v17[3] = &v22;
  v24 = v17;
  sub_210216F3C(*v8, (uint64_t)v23);
  v18 = v24;
  if (v24 == v23)
  {
    v19 = 4;
    v18 = v23;
    goto LABEL_17;
  }
  if (v24)
  {
    v19 = 5;
LABEL_17:
    (*(void (**)(_QWORD *))(*v18 + 8 * v19))(v18);
  }
  std::__assoc_sub_state::wait((std::__assoc_sub_state *)v4);
  sub_20EA04D14(v4, a2);
  do
    v20 = __ldaxr(v5);
  while (__stlxr(v20 - 1, v5));
  if (!v20)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
  return sub_20EA04DE8(&v22);
}

void sub_20EFBAE94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  unint64_t *v10;
  unint64_t v12;

  do
    v12 = __ldaxr(v10);
  while (__stlxr(v12 - 1, v10));
  if (!v12)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
    sub_20EA04DE8(&a9);
    _Unwind_Resume(a1);
  }
  sub_20EA04DE8(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20EFBAF5C(uint64_t a1)
{
  return sub_20EFBB0CC(a1 - 16);
}

void sub_20EFBAF64(uint64_t a1)
{
  sub_20EFBB0CC(a1 - 16);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20EFBAF8C(uint64_t a1, uint64_t a2)
{
  return sub_20EFBA654((_QWORD *)(a1 - 16), a2);
}

uint64_t *sub_20EFBAF94@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_20EFBA99C((_QWORD *)(a1 - 16), a2);
}

uint64_t *sub_20EFBAF9C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_20EFBAC7C((_QWORD *)(a1 - 16), a2);
}

uint64_t sub_20EFBAFA4(uint64_t a1)
{
  return a1 - 16;
}

uint64_t sub_20EFBAFAC(uint64_t a1)
{
  return sub_20EFBB0CC(a1 - 24);
}

void sub_20EFBAFB4(uint64_t a1)
{
  sub_20EFBB0CC(a1 - 24);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20EFBAFDC(uint64_t a1, uint64_t a2)
{
  return sub_20EFBA7F8((_QWORD *)(a1 - 24), a2);
}

uint64_t sub_20EFBAFE4(uint64_t a1)
{
  return a1 - 24;
}

uint64_t sub_20EFBAFEC(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_20EFBB054(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20EFBB0BC(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8));
}

uint64_t sub_20EFBB0CC(uint64_t a1)
{
  char **v2;
  char *v3;
  char *v4;
  char *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;

  *(_QWORD *)a1 = &off_24C9F2E00;
  *(_QWORD *)(a1 + 16) = &unk_24C9F2E78;
  *(_QWORD *)(a1 + 24) = &unk_24C9F2EB8;
  v2 = *(char ***)(a1 + 144);
  *(_QWORD *)(a1 + 144) = 0;
  if (v2)
  {
    std::mutex::~mutex((std::mutex *)(v2 + 7));
    if (*((_BYTE *)v2 + 48))
    {
      v3 = *v2;
      if (*v2)
      {
        v4 = v2[1];
        v5 = *v2;
        if (v4 != v3)
        {
          do
          {
            v6 = (std::__shared_weak_count *)*((_QWORD *)v4 - 1);
            if (v6)
            {
              p_shared_owners = (unint64_t *)&v6->__shared_owners_;
              do
                v8 = __ldaxr(p_shared_owners);
              while (__stlxr(v8 - 1, p_shared_owners));
              if (!v8)
              {
                ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
                std::__shared_weak_count::__release_weak(v6);
              }
            }
            v4 -= 16;
          }
          while (v4 != v3);
          v5 = *v2;
        }
        v2[1] = v3;
        operator delete(v5);
      }
    }
    MEMORY[0x212BC6398](v2, 0x1022C400958DFA3);
  }
  if (*(_QWORD *)(a1 + 136))
  {
    v9 = *(_QWORD *)(a1 + 120);
    v10 = *(uint64_t **)(a1 + 128);
    v11 = *v10;
    *(_QWORD *)(v11 + 8) = *(_QWORD *)(v9 + 8);
    **(_QWORD **)(v9 + 8) = v11;
    *(_QWORD *)(a1 + 136) = 0;
    if (v10 != (uint64_t *)(a1 + 120))
    {
      do
      {
        v12 = (uint64_t *)v10[1];
        (*(void (**)(uint64_t *))v10[2])(v10 + 2);
        operator delete(v10);
        v10 = v12;
      }
      while (v12 != (uint64_t *)(a1 + 120));
    }
  }
  if (*(_QWORD *)(a1 + 112))
  {
    v13 = *(_QWORD *)(a1 + 96);
    v14 = *(uint64_t **)(a1 + 104);
    v15 = *v14;
    *(_QWORD *)(v15 + 8) = *(_QWORD *)(v13 + 8);
    **(_QWORD **)(v13 + 8) = v15;
    *(_QWORD *)(a1 + 112) = 0;
    if (v14 != (uint64_t *)(a1 + 96))
    {
      do
      {
        v16 = (uint64_t *)v14[1];
        (*(void (**)(uint64_t *))v14[2])(v14 + 2);
        operator delete(v14);
        v14 = v16;
      }
      while (v16 != (uint64_t *)(a1 + 96));
    }
  }
  v17 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 88) = 0;
  if (v17)
    (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  v18 = *(std::__shared_weak_count **)(a1 + 80);
  if (!v18)
    goto LABEL_27;
  v19 = (unint64_t *)&v18->__shared_owners_;
  do
    v20 = __ldaxr(v19);
  while (__stlxr(v20 - 1, v19));
  if (v20)
  {
LABEL_27:
    if ((*(char *)(a1 + 71) & 0x80000000) == 0)
      goto LABEL_29;
    goto LABEL_28;
  }
  ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
  std::__shared_weak_count::__release_weak(v18);
  if (*(char *)(a1 + 71) < 0)
LABEL_28:
    operator delete(*(void **)(a1 + 48));
LABEL_29:
  v21 = *(std::__shared_weak_count **)(a1 + 40);
  if (v21)
    std::__shared_weak_count::__release_weak(v21);
  return a1;
}

void sub_20EFBB2E0(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9F3010;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_20EFBB2F0(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9F3010;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC6398);
}

void sub_20EFBB320(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 32);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

_QWORD *sub_20EFBB37C(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  *a1 = &off_24C9F3060;
  v2 = (std::__shared_weak_count *)a1[4];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = (std::__shared_weak_count *)a1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  return a1;
}

void sub_20EFBB3C0(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  *a1 = &off_24C9F3060;
  v2 = (std::__shared_weak_count *)a1[4];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = (std::__shared_weak_count *)a1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20EFBB414(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;

  result = operator new(0x30uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = &off_24C9F3060;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = a1[4];
  result[3] = a1[3];
  result[4] = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 16);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  return result;
}

_QWORD *sub_20EFBB484(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;

  v3 = result[1];
  v2 = result[2];
  *a2 = &off_24C9F3060;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  v6 = result[4];
  a2[3] = result[3];
  a2[4] = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 16);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  return result;
}

void sub_20EFBB4D4(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  v2 = *(std::__shared_weak_count **)(a1 + 32);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
}

void sub_20EFBB510(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  v2 = (std::__shared_weak_count *)__p[4];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = (std::__shared_weak_count *)__p[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  operator delete(__p);
}

void sub_20EFBB548(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  char v21;

  v2 = (std::__shared_weak_count *)a1[4];
  if (!v2)
  {
    v3 = 0;
    v5 = 0;
    v4 = (std::__shared_weak_count *)a1[2];
    if (v4)
      goto LABEL_6;
    goto LABEL_11;
  }
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
  {
    v5 = 0;
    v4 = (std::__shared_weak_count *)a1[2];
    if (v4)
      goto LABEL_6;
LABEL_11:
    v7 = 0;
    v8 = 0;
    goto LABEL_12;
  }
  v4 = (std::__shared_weak_count *)a1[2];
  v5 = a1[3];
  if (!v4)
    goto LABEL_11;
LABEL_6:
  v6 = std::__shared_weak_count::lock(v4);
  v7 = v6;
  if (v6)
  {
    v8 = a1[1];
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
LABEL_12:
    if (!v3)
      goto LABEL_15;
    goto LABEL_13;
  }
  v8 = 0;
  if (!v3)
    goto LABEL_15;
LABEL_13:
  v11 = (unint64_t *)&v3->__shared_owners_;
  do
    v12 = __ldxr(v11);
  while (__stxr(v12 + 1, v11));
LABEL_15:
  if (v8)
  {
    if (v5)
    {
      LOBYTE(v20) = 0;
      v21 = 0;
      sub_20EFBB86C((uint64_t *)(v8 + 88), v5, &v20);
      if (v21)
        sub_20EFBBCDC(&v20);
    }
  }
  if (v3)
  {
    v13 = (unint64_t *)&v3->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  if (v7)
  {
    v15 = (unint64_t *)&v7->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
    do
      v17 = __ldaxr(v15);
    while (__stlxr(v17 - 1, v15));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  if (v3)
  {
    v18 = (unint64_t *)&v3->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_20EFBB710(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;

  if (a10)
    sub_20EFBBCDC(&a9);
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  if (v11)
  {
    v15 = (unint64_t *)&v11->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
    do
      v17 = __ldaxr(v15);
    while (__stlxr(v17 - 1, v15));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (v10)
  {
    v18 = (unint64_t *)&v10->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20EFBB7F4(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__110shared_ptrIKNS_3vio10mapping_io15MapLocationInf"
                     "oEEENS7_16SubmapLoadResultENS7_23MappingIONodeGroupErrorESB_Lb0EE25EnqueueMessageAndDispatchIZNKSD_"
                     "4SendERKSA_EUlT_T0_E_EEvSG_SH_EUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__110shared_ptrIKNS_3vio10mapping_io15Map"
                                "LocationInfoEEENS7_16SubmapLoadResultENS7_23MappingIONodeGroupErrorESB_Lb0EE25EnqueueMes"
                                "sageAndDispatchIZNKSD_4SendERKSA_EUlT_T0_E_EEvSG_SH_EUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__110shared_ptrIKNS_3vio10mapping_io15MapLocationInfoEEENS7_16SubmapLoadResultENS7_23MappingIONodeGroupErrorESB_Lb0EE25EnqueueMessageAndDispatchIZNKSD_4SendERKSA_EUlT_T0_E_EEvSG_SH_EUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__110shared_ptrIKNS_3vio10mapping_io15MapLocationInfoEEENS7_16SubmapLoadResultENS7_23MappingIONodeGroupErrorESB_Lb0EE25EnqueueMessageAndDispatchIZNKSD_4SendERKSA_EUlT_T0_E_EEvSG_SH_EUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20EFBB860()
{
  return &unk_24C9F30C0;
}

void sub_20EFBB86C(uint64_t *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t *i;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  void *v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  std::exception_ptr v16;
  void *v17;
  char *v18;
  char v19;
  void *__p;
  void *v21;

  v6 = *a1;
  if (!v6)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/ProcessorInputMessageHandlingStrategy.h", 228, (uint64_t)"callable_", 9, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v6 = *a1;
  }
  (*(void (**)(void **__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v6 + 16))(&v17, v6, a2);
  for (i = (uint64_t *)a1[2]; i != a1 + 1; i = (uint64_t *)i[1])
    (*(void (**)(uint64_t *, void **))(i[2] + 16))(i + 2, &v17);
  if (*((_BYTE *)a3 + 8))
  {
    v8 = *a3;
    if (!*a3)
      sub_20E96CE78(3u);
    std::mutex::lock((std::mutex *)(v8 + 24));
    if ((*(_BYTE *)(v8 + 136) & 1) != 0
      || (v16.__ptr_ = 0, v9 = *(_QWORD *)(v8 + 16), std::exception_ptr::~exception_ptr(&v16), v9))
    {
      sub_20E96CE78(2u);
    }
    sub_20EF90154(v8 + 144, (uint64_t)&v17);
    *(_DWORD *)(v8 + 136) |= 5u;
    std::condition_variable::notify_all((std::condition_variable *)(v8 + 88));
    std::mutex::unlock((std::mutex *)(v8 + 24));
  }
  if (__p)
  {
    v21 = __p;
    operator delete(__p);
  }
  if (v19)
  {
    v10 = (char *)v17;
    if (v17)
    {
      v11 = v18;
      v12 = v17;
      if (v18 != v17)
      {
        do
        {
          v13 = (std::__shared_weak_count *)*((_QWORD *)v11 - 1);
          if (v13)
          {
            p_shared_owners = (unint64_t *)&v13->__shared_owners_;
            do
              v15 = __ldaxr(p_shared_owners);
            while (__stlxr(v15 - 1, p_shared_owners));
            if (!v15)
            {
              ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
              std::__shared_weak_count::__release_weak(v13);
            }
          }
          v11 -= 16;
        }
        while (v11 != v10);
        v12 = v17;
      }
      v18 = v10;
      operator delete(v12);
    }
  }
}

void sub_20EFBBA38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t *a11, uint64_t a12, int a13, __int16 a14, char a15, unsigned __int8 a16, std::exception_ptr a17, char *a18)
{
  uint64_t v18;
  uint64_t v19;
  void *v22;
  uint64_t v23;
  uint64_t i;
  uint64_t *v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;

  sub_20EF8D260(&a18);
  if (a2 == 2)
  {
    v22 = __cxa_begin_catch(a1);
    if (*(_QWORD *)(v19 + 48)
      || !sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/ProcessorInputMessageHandlingStrategy.h", 186, (uint64_t)"!error_downstream_.empty()", 26, (uint64_t)"It is mandated that all errors are handled and enforced by a processor. Add an error handler with AddErrorHandler()", 115, (void (*)(void **))sub_21023DDB0))
    {
      v23 = v19 + 32;
      for (i = *(_QWORD *)(v19 + 40); i != v23; i = *(_QWORD *)(i + 8))
        (*(void (**)(uint64_t, void *))(*(_QWORD *)(i + 16) + 16))(i + 16, v22);
      if (*(_BYTE *)(v18 + 8))
      {
        std::current_exception();
        sub_20EFBBC7C(*(std::__assoc_sub_state **)v18, &a17);
        std::exception_ptr::~exception_ptr(&a17);
      }
      __cxa_end_catch();
      JUMPOUT(0x20EFBBA00);
    }
    abort();
  }
  if (a2 == 1)
  {
    v25 = (uint64_t *)__cxa_begin_catch(a1);
    v26 = *v25;
    a10 = *(_QWORD *)(*(_QWORD *)(*v25 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL;
    a9 = (*(uint64_t (**)(void))(v26 + 16))();
    sub_20E9B0CC4("Caught unexpected exception of type: ", (const char *)&a10, "\n", "message: ", (const char *)&a9, "\n");
    if ((a16 & 0x80u) == 0)
      v27 = (uint64_t *)&a11;
    else
      v27 = a11;
    if ((a16 & 0x80u) == 0)
      v28 = a16;
    else
      v28 = a12;
    sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/ProcessorInputMessageHandlingStrategy.h", 140, (uint64_t)"", 0, (uint64_t)v27, v28, (void (*)(void **))sub_21023DDB0);
    abort();
  }
  _Unwind_Resume(a1);
}

void sub_20EFBBC4C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  __cxa_end_catch();
  JUMPOUT(0x20EFBBC6CLL);
}

void sub_20EFBBC7C(std::__assoc_sub_state *a1, const std::exception_ptr *a2)
{
  std::exception_ptr v3;
  std::exception_ptr v4;

  if (!a1)
    sub_20E96CE78(3u);
  std::exception_ptr::exception_ptr(&v4, a2);
  v3.__ptr_ = &v4;
  std::__assoc_sub_state::set_exception(a1, v3);
  std::exception_ptr::~exception_ptr(&v4);
}

void sub_20EFBBCC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10)
{
  std::exception_ptr::~exception_ptr(&a10);
  _Unwind_Resume(a1);
}

uint64_t *sub_20EFBBCDC(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  const std::error_category *v7;
  std::logic_error *exception;
  std::logic_error *v9;
  std::logic_error v10;
  std::logic_error v11;
  std::exception_ptr v12;

  v2 = *a1;
  if (!v2)
    return a1;
  if ((*(_BYTE *)(v2 + 136) & 1) == 0)
  {
    v12.__ptr_ = 0;
    v3 = *(_QWORD *)(v2 + 16);
    std::exception_ptr::~exception_ptr(&v12);
    v2 = *a1;
    if (!v3 && *(uint64_t *)(v2 + 8) >= 1)
    {
      v7 = std::future_category();
      MEMORY[0x212BC5AF8](&v10, 4, v7);
      exception = (std::logic_error *)__cxa_allocate_exception(0x20uLL);
      v9 = std::logic_error::logic_error(exception, &v10);
      v9->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB810] + 16);
      v9[1] = v11;
      __cxa_throw(v9, MEMORY[0x24BEDB6E0], (void (*)(void *))MEMORY[0x24BEDAD80]);
    }
  }
  v4 = (unint64_t *)(v2 + 8);
  do
    v5 = __ldaxr(v4);
  while (__stlxr(v5 - 1, v4));
  if (v5)
    return a1;
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 16))(v2);
  return a1;
}

void sub_20EFBBDC8(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__assoc_sub_state *a10, std::logic_error a11)
{
  uint64_t v11;
  std::exception_ptr v12;

  __cxa_begin_catch(a1);
  std::current_exception();
  __cxa_end_catch();
  v12.__ptr_ = (void *)(v11 - 32);
  std::__assoc_sub_state::set_exception(a10, v12);
  std::exception_ptr::~exception_ptr((std::exception_ptr *)(v11 - 32));
  std::logic_error::~logic_error(&a11);
  JUMPOUT(0x20EFBBD24);
}

_QWORD *sub_20EFBBE04(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;

  *a1 = &off_24C9F30E0;
  v2 = (std::__shared_weak_count *)a1[4];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      v5 = (std::__shared_weak_count *)a1[2];
      if (!v5)
        return a1;
      goto LABEL_6;
    }
  }
  v5 = (std::__shared_weak_count *)a1[2];
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
  return a1;
}

void sub_20EFBBE80(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;

  *a1 = &off_24C9F30E0;
  v2 = (std::__shared_weak_count *)a1[4];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)a1[2];
    if (!v5)
      goto LABEL_9;
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[2];
    if (!v5)
      goto LABEL_9;
  }
  std::__shared_weak_count::__release_weak(v5);
LABEL_9:
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20EFBBF0C(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;

  result = operator new(0x28uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = &off_24C9F30E0;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = a1[4];
  result[3] = a1[3];
  result[4] = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  return result;
}

_QWORD *sub_20EFBBF7C(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;

  v3 = result[1];
  v2 = result[2];
  *a2 = &off_24C9F30E0;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  v6 = result[4];
  a2[3] = result[3];
  a2[4] = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  return result;
}

void sub_20EFBBFCC(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;

  v2 = *(std::__shared_weak_count **)(a1 + 32);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    v5 = *(std::__shared_weak_count **)(a1 + 16);
    if (!v5)
      return;
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  v5 = *(std::__shared_weak_count **)(a1 + 16);
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
}

void sub_20EFBC03C(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;

  v2 = (std::__shared_weak_count *)__p[4];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      v5 = (std::__shared_weak_count *)__p[2];
      if (!v5)
        goto LABEL_7;
      goto LABEL_6;
    }
  }
  v5 = (std::__shared_weak_count *)__p[2];
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
LABEL_7:
  operator delete(__p);
}

void sub_20EFBC0AC(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v8;
  char v9;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 8);
      if (v5)
      {
        LOBYTE(v8) = 0;
        v9 = 0;
        sub_20EFBB86C((uint64_t *)(v5 + 88), a1 + 24, &v8);
        if (v9)
          sub_20EFBBCDC(&v8);
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_20EFBC154(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v13;

  if (a10)
    sub_20EFBBCDC(&a9);
  p_shared_owners = (unint64_t *)&v10->__shared_owners_;
  do
    v13 = __ldaxr(p_shared_owners);
  while (__stlxr(v13 - 1, p_shared_owners));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20EFBC1A0(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__110shared_ptrIKNS_3vio10mapping_io15MapLocationInf"
                     "oEEENS7_16SubmapLoadResultENS7_23MappingIONodeGroupErrorESB_Lb0EE4SendERKSA_EUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__110shared_ptrIKNS_3vio10mapping_io15Map"
                                "LocationInfoEEENS7_16SubmapLoadResultENS7_23MappingIONodeGroupErrorESB_Lb0EE4SendERKSA_EUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__110shared_ptrIKNS_3vio10mapping_io15MapLocationInfoEEENS7_16SubmapLoadResultENS7_23MappingIONodeGroupErrorESB_Lb0EE4SendERKSA_EUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__110shared_ptrIKNS_3vio10mapping_io15MapLocationInfoEEENS7_16SubmapLoadResultENS7_23MappingIONodeGroupErrorESB_Lb0EE4SendERKSA_EUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20EFBC20C()
{
  return &unk_24C9F3140;
}

void sub_20EFBC218(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9F3160;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_20EFBC228(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9F3160;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC6398);
}

uint64_t *sub_20EFBC258(uint64_t a1)
{
  return sub_20EFBBCDC((uint64_t *)(a1 + 24));
}

_QWORD *sub_20EFBC264(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;

  *a1 = &off_24C9F31B0;
  v2 = (std::__shared_weak_count *)a1[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
      goto LABEL_7;
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  v5 = (std::__shared_weak_count *)a1[4];
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
LABEL_7:
  v6 = (std::__shared_weak_count *)a1[2];
  if (v6)
    std::__shared_weak_count::__release_weak(v6);
  return a1;
}

void sub_20EFBC2EC(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;

  *a1 = &off_24C9F31B0;
  v2 = (std::__shared_weak_count *)a1[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
    {
LABEL_7:
      v6 = (std::__shared_weak_count *)a1[2];
      if (v6)
        std::__shared_weak_count::__release_weak(v6);
      JUMPOUT(0x212BC6398);
    }
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
      goto LABEL_7;
  }
  std::__shared_weak_count::__release_weak(v5);
  goto LABEL_7;
}

_QWORD *sub_20EFBC384(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;

  result = operator new(0x38uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = &off_24C9F31B0;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = a1[4];
  result[3] = a1[3];
  result[4] = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 16);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  v10 = a1[6];
  result[5] = a1[5];
  result[6] = v10;
  if (v10)
  {
    v11 = (unint64_t *)(v10 + 8);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  return result;
}

_QWORD *sub_20EFBC414(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;

  v3 = result[1];
  v2 = result[2];
  *a2 = &off_24C9F31B0;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  v6 = result[4];
  a2[3] = result[3];
  a2[4] = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 16);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  v9 = result[6];
  a2[5] = result[5];
  a2[6] = v9;
  if (v9)
  {
    v10 = (unint64_t *)(v9 + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  return result;
}

void sub_20EFBC484(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;

  v2 = (std::__shared_weak_count *)a1[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
      goto LABEL_7;
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  v5 = (std::__shared_weak_count *)a1[4];
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
LABEL_7:
  v6 = (std::__shared_weak_count *)a1[2];
  if (v6)
    std::__shared_weak_count::__release_weak(v6);
}

void sub_20EFBC504(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;

  v2 = (std::__shared_weak_count *)__p[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)__p[4];
    if (!v5)
      goto LABEL_7;
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  v5 = (std::__shared_weak_count *)__p[4];
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
LABEL_7:
  v6 = (std::__shared_weak_count *)__p[2];
  if (v6)
    std::__shared_weak_count::__release_weak(v6);
  operator delete(__p);
}

void sub_20EFBC580(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t *v13;
  std::runtime_error_vtbl **v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  std::runtime_error *exception;
  std::runtime_error *v23;
  std::runtime_error *v24;
  std::runtime_error *v25;
  std::runtime_error v26;
  std::runtime_error v27;

  v2 = (std::__shared_weak_count *)a1[4];
  if (!v2)
  {
    v3 = 0;
    v5 = 0;
    v4 = (std::__shared_weak_count *)a1[2];
    if (v4)
      goto LABEL_6;
LABEL_11:
    v7 = 0;
    v8 = 0;
    goto LABEL_12;
  }
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
  {
    v5 = 0;
    v4 = (std::__shared_weak_count *)a1[2];
    if (v4)
      goto LABEL_6;
    goto LABEL_11;
  }
  v4 = (std::__shared_weak_count *)a1[2];
  v5 = a1[3];
  if (!v4)
    goto LABEL_11;
LABEL_6:
  v6 = std::__shared_weak_count::lock(v4);
  v7 = v6;
  if (!v6)
  {
    v8 = 0;
    if (!v3)
      goto LABEL_15;
    goto LABEL_13;
  }
  v8 = a1[1];
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  do
    v10 = __ldxr(p_shared_owners);
  while (__stxr(v10 + 1, p_shared_owners));
LABEL_12:
  if (!v3)
    goto LABEL_15;
LABEL_13:
  v11 = (unint64_t *)&v3->__shared_owners_;
  do
    v12 = __ldxr(v11);
  while (__stxr(v12 + 1, v11));
LABEL_15:
  if (!v8)
  {
    std::runtime_error::runtime_error(&v27, "Processor is no longer available.");
    v27.__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v23 = std::runtime_error::runtime_error(exception, &v27);
    v23->__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    __cxa_throw(v23, (struct type_info *)&unk_24CA1E2D0, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  if (!v5)
  {
    std::runtime_error::runtime_error(&v26, "Message was dropped.");
    v26.__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    v24 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v25 = std::runtime_error::runtime_error(v24, &v26);
    v25->__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    __cxa_throw(v25, (struct type_info *)&unk_24CA1E2D0, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  v13 = (uint64_t *)(v8 + 88);
  v14 = (std::runtime_error_vtbl **)a1[5];
  v26.__vftable = *v14;
  *v14 = 0;
  LOBYTE(v26.__imp_.__imp_) = 1;
  sub_20EFBB86C(v13, v5, (uint64_t *)&v26);
  if (LOBYTE(v26.__imp_.__imp_))
    sub_20EFBBCDC((uint64_t *)&v26);
  if (v3)
  {
    v15 = (unint64_t *)&v3->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  if (v7)
  {
    v17 = (unint64_t *)&v7->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
    do
      v19 = __ldaxr(v17);
    while (__stlxr(v19 - 1, v17));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  if (v3)
  {
    v20 = (unint64_t *)&v3->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_20EFBC85C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10, uint64_t a11, uint64_t a12, std::runtime_error a13, std::exception_ptr a14)
{
  std::__shared_weak_count *v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;

  std::exception_ptr::~exception_ptr(&a14);
  std::runtime_error::~runtime_error(&a13);
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v18 = __ldaxr(p_shared_owners);
    while (__stlxr(v18 - 1, p_shared_owners));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  if (v15)
  {
    v19 = (unint64_t *)&v15->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
    do
      v21 = __ldaxr(v19);
    while (__stlxr(v21 - 1, v19));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  if (v14)
  {
    v22 = (unint64_t *)&v14->__shared_owners_;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  _Unwind_Resume(a1);
}

void sub_20EFBC888(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::runtime_error a10, std::exception_ptr a11, uint64_t a12, uint64_t a13, uint64_t a14, std::exception_ptr a15)
{
  uint64_t v15;
  std::__assoc_sub_state **v16;
  std::__assoc_sub_state *v17;
  std::exception_ptr v18;

  __cxa_begin_catch(a1);
  std::current_exception();
  __cxa_end_catch();
  v17 = *v16;
  if (v17)
  {
    std::exception_ptr::exception_ptr(&a15, &a11);
    v18.__ptr_ = &a15;
    std::__assoc_sub_state::set_exception(v17, v18);
    std::exception_ptr::~exception_ptr(&a15);
    std::exception_ptr::~exception_ptr(&a11);
    std::runtime_error::~runtime_error(&a10);
    if (!v15)
      JUMPOUT(0x20EFBC694);
    JUMPOUT(0x20EFBC664);
  }
  sub_20E96CE78(3u);
}

void sub_20EFBC8E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::runtime_error a10, std::exception_ptr a11, uint64_t a12, uint64_t a13, uint64_t a14, std::exception_ptr a15)
{
  std::__shared_weak_count *v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t *v23;
  unint64_t v24;

  std::exception_ptr::~exception_ptr(&a11);
  std::runtime_error::~runtime_error(&a10);
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v19 = __ldaxr(p_shared_owners);
    while (__stlxr(v19 - 1, p_shared_owners));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  if (v16)
  {
    v20 = (unint64_t *)&v16->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
    do
      v22 = __ldaxr(v20);
    while (__stlxr(v22 - 1, v20));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  if (v15)
  {
    v23 = (unint64_t *)&v15->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  _Unwind_Resume(a1);
}

void sub_20EFBC910(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;

  if (a11)
    sub_20EFBBCDC(&a10);
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v15 = __ldaxr(p_shared_owners);
    while (__stlxr(v15 - 1, p_shared_owners));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (v12)
  {
    v16 = (unint64_t *)&v12->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
    do
      v18 = __ldaxr(v16);
    while (__stlxr(v18 - 1, v16));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (v11)
  {
    v19 = (unint64_t *)&v11->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  _Unwind_Resume(a1);
}

uint64_t sub_20EFBC9FC(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__110shared_ptrIKNS_3vio10mapping_io15MapLocationInf"
                     "oEEENS7_16SubmapLoadResultENS7_23MappingIONodeGroupErrorESB_Lb0EE25EnqueueMessageAndDispatchIZNKSD_"
                     "7ProcessERKSA_NS4_7promiseISB_EEEUlT_T0_E_EEvSG_SJ_EUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__110shared_ptrIKNS_3vio10mapping_io15Map"
                                "LocationInfoEEENS7_16SubmapLoadResultENS7_23MappingIONodeGroupErrorESB_Lb0EE25EnqueueMes"
                                "sageAndDispatchIZNKSD_7ProcessERKSA_NS4_7promiseISB_EEEUlT_T0_E_EEvSG_SJ_EUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__110shared_ptrIKNS_3vio10mapping_io15MapLocationInfoEEENS7_16SubmapLoadResultENS7_23MappingIONodeGroupErrorESB_Lb0EE25EnqueueMessageAndDispatchIZNKSD_7ProcessERKSA_NS4_7promiseISB_EEEUlT_T0_E_EEvSG_SJ_EUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__110shared_ptrIKNS_3vio10mapping_io15MapLocationInfoEEENS7_16SubmapLoadResultENS7_23MappingIONodeGroupErrorESB_Lb0EE25EnqueueMessageAndDispatchIZNKSD_7ProcessERKSA_NS4_7promiseISB_EEEUlT_T0_E_EEvSG_SJ_EUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20EFBCA68()
{
  return &unk_24C9F3210;
}

_QWORD *sub_20EFBCA74(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;

  *a1 = &off_24C9F3230;
  v2 = (std::__shared_weak_count *)a1[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
      goto LABEL_11;
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
      goto LABEL_11;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_11:
  v8 = (std::__shared_weak_count *)a1[2];
  if (v8)
    std::__shared_weak_count::__release_weak(v8);
  return a1;
}

void sub_20EFBCB28(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;

  *a1 = &off_24C9F3230;
  v2 = (std::__shared_weak_count *)a1[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
      goto LABEL_11;
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
      goto LABEL_11;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_11:
  v8 = (std::__shared_weak_count *)a1[2];
  if (v8)
    std::__shared_weak_count::__release_weak(v8);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20EFBCBEC(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;

  result = operator new(0x38uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = &off_24C9F3230;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = a1[4];
  result[3] = a1[3];
  result[4] = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  v10 = a1[6];
  result[5] = a1[5];
  result[6] = v10;
  if (v10)
  {
    v11 = (unint64_t *)(v10 + 8);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  return result;
}

_QWORD *sub_20EFBCC7C(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;

  v3 = result[1];
  v2 = result[2];
  *a2 = &off_24C9F3230;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  v6 = result[4];
  a2[3] = result[3];
  a2[4] = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  v9 = result[6];
  a2[5] = result[5];
  a2[6] = v9;
  if (v9)
  {
    v10 = (unint64_t *)(v9 + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  return result;
}

void sub_20EFBCCEC(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;

  v2 = (std::__shared_weak_count *)a1[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
      goto LABEL_11;
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
      goto LABEL_11;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_11:
  v8 = (std::__shared_weak_count *)a1[2];
  if (v8)
    std::__shared_weak_count::__release_weak(v8);
}

void sub_20EFBCD98(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;

  v2 = (std::__shared_weak_count *)__p[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)__p[4];
    if (!v5)
      goto LABEL_11;
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)__p[4];
    if (!v5)
      goto LABEL_11;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_11:
  v8 = (std::__shared_weak_count *)__p[2];
  if (v8)
    std::__shared_weak_count::__release_weak(v8);
  operator delete(__p);
}

void sub_20EFBCE40(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  uint64_t v4;
  std::runtime_error_vtbl **v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::runtime_error *exception;
  std::runtime_error *v9;
  std::runtime_error v10;

  v2 = (std::__shared_weak_count *)a1[2];
  if (!v2 || (v3 = std::__shared_weak_count::lock(v2)) == 0 || (v4 = a1[1]) == 0)
  {
    std::runtime_error::runtime_error(&v10, "Invalid operation. Processor is released.");
    v10.__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v9 = std::runtime_error::runtime_error(exception, &v10);
    v9->__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    __cxa_throw(v9, (struct type_info *)&unk_24CA1E2D0, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  v5 = (std::runtime_error_vtbl **)a1[5];
  v10.__vftable = *v5;
  *v5 = 0;
  LOBYTE(v10.__imp_.__imp_) = 1;
  sub_20EFBB86C((uint64_t *)(v4 + 88), (uint64_t)(a1 + 3), (uint64_t *)&v10);
  if (LOBYTE(v10.__imp_.__imp_))
    sub_20EFBBCDC((uint64_t *)&v10);
  p_shared_owners = (unint64_t *)&v3->__shared_owners_;
  do
    v7 = __ldaxr(p_shared_owners);
  while (__stlxr(v7 - 1, p_shared_owners));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
}

void sub_20EFBCF50(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::runtime_error a10, std::exception_ptr a11)
{
  __break(1u);
}

void sub_20EFBCFC8(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::runtime_error a10, std::exception_ptr a11)
{
  uint64_t v11;

  std::exception_ptr::~exception_ptr((std::exception_ptr *)&a9);
  std::runtime_error::~runtime_error(&a10);
  if (v11)
    JUMPOUT(0x20EFBCFFCLL);
  JUMPOUT(0x20EFBD02CLL);
}

uint64_t sub_20EFBD034(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__110shared_ptrIKNS_3vio10mapping_io15MapLocationInf"
                     "oEEENS7_16SubmapLoadResultENS7_23MappingIONodeGroupErrorESB_Lb0EE7ProcessERKSA_NS4_7promiseISB_EEEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__110shared_ptrIKNS_3vio10mapping_io15Map"
                                "LocationInfoEEENS7_16SubmapLoadResultENS7_23MappingIONodeGroupErrorESB_Lb0EE7ProcessERKS"
                                "A_NS4_7promiseISB_EEEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__110shared_ptrIKNS_3vio10mapping_io15MapLocationInfoEEENS7_16SubmapLoadResultENS7_23MappingIONodeGroupErrorESB_Lb0EE7ProcessERKSA_NS4_7promiseISB_EEEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__110shared_ptrIKNS_3vio10mapping_io15MapLocationInfoEEENS7_16SubmapLoadResultENS7_23MappingIONodeGroupErrorESB_Lb0EE7ProcessERKSA_NS4_7promiseISB_EEEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20EFBD0A0()
{
  return &unk_24C9F3290;
}

_QWORD *sub_20EFBD0AC(_QWORD *a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;

  *a1 = &off_24C9F32B0;
  v2 = a1[4];
  a1[3] = &off_24C9F2BF0;
  a1[4] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = (std::__shared_weak_count *)a1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  return a1;
}

void sub_20EFBD104(_QWORD *a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;

  *a1 = &off_24C9F32B0;
  v2 = a1[4];
  a1[3] = &off_24C9F2BF0;
  a1[4] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = (std::__shared_weak_count *)a1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20EFBD16C(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;

  v2 = operator new(0x28uLL);
  v3 = v2;
  v5 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  *v2 = &off_24C9F32B0;
  v2[1] = v5;
  v2[2] = v4;
  if (v4)
  {
    v6 = (unint64_t *)(v4 + 16);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  v2[3] = &off_24C9F2BF0;
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32));
  return v3;
}

void sub_20EFBD1E4(_Unwind_Exception *a1)
{
  _QWORD *v1;
  std::__shared_weak_count *v3;

  v3 = (std::__shared_weak_count *)v1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20EFBD204(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  *a2 = &off_24C9F32B0;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  a2[3] = &off_24C9F2BF0;
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32));
}

void sub_20EFBD26C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  std::__shared_weak_count *v3;

  v3 = *(std::__shared_weak_count **)(v1 + 16);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  _Unwind_Resume(exception_object);
}

void sub_20EFBD284(_QWORD *a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;

  v2 = a1[4];
  a1[3] = &off_24C9F2BF0;
  a1[4] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = (std::__shared_weak_count *)a1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
}

void sub_20EFBD2D4(_QWORD *__p)
{
  uint64_t v2;
  std::__shared_weak_count *v3;

  v2 = __p[4];
  __p[3] = &off_24C9F2BF0;
  __p[4] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = (std::__shared_weak_count *)__p[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  operator delete(__p);
}

void sub_20EFBD320(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;

  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = a1[1];
      if (v5)
      {
        v6 = operator new(0x20uLL);
        v7 = a1[4];
        a1[4] = 0;
        v6[2] = &off_24C9F2BF0;
        v6[3] = v7;
        v9 = *(_QWORD *)(v5 + 96);
        v8 = (_QWORD *)(v5 + 96);
        *v6 = v9;
        v6[1] = v8;
        *(_QWORD *)(v9 + 8) = v6;
        *v8 = v6;
        ++v8[2];
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v11 = __ldaxr(p_shared_owners);
      while (__stlxr(v11 - 1, p_shared_owners));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_20EFBD3D4(_Unwind_Exception *exception_object)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v4;

  p_shared_owners = (unint64_t *)&v1->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20EFBD410(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3kit11concurrency6detail9ProcessorINSt3__110shared_ptrIKNS_3vio10mapping_io15MapLocationInfo"
                     "EEENS7_16SubmapLoadResultENS7_23MappingIONodeGroupErrorESB_Lb0EE9SubscribeENS1_12ChannelInputISB_EEEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4cv3d3kit11concurrency6detail9ProcessorINSt3__110shared_ptrIKNS_3vio10mapping_io15MapL"
                                "ocationInfoEEENS7_16SubmapLoadResultENS7_23MappingIONodeGroupErrorESB_Lb0EE9SubscribeENS"
                                "1_12ChannelInputISB_EEEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3kit11concurrency6detail9ProcessorINSt3__110shared_ptrIKNS_3vio10mapping_io15MapLocationInfoEEENS7_16SubmapLoadResultENS7_23MappingIONodeGroupErrorESB_Lb0EE9SubscribeENS1_12ChannelInputISB_EEEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3kit11concurrency6detail9ProcessorINSt3__110shared_ptrIKNS_3vio10mapping_io15MapLocationInfoEEENS7_16SubmapLoadResultENS7_23MappingIONodeGroupErrorESB_Lb0EE9SubscribeENS1_12ChannelInputISB_EEEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20EFBD47C()
{
  return &unk_24C9F3310;
}

_QWORD *sub_20EFBD488(_QWORD *a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;

  *a1 = &off_24C9F3330;
  v2 = a1[4];
  a1[3] = &off_24C9B46A0;
  a1[4] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = (std::__shared_weak_count *)a1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  return a1;
}

void sub_20EFBD4E0(_QWORD *a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;

  *a1 = &off_24C9F3330;
  v2 = a1[4];
  a1[3] = &off_24C9B46A0;
  a1[4] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = (std::__shared_weak_count *)a1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20EFBD548(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;

  v2 = operator new(0x28uLL);
  v3 = v2;
  v5 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  *v2 = &off_24C9F3330;
  v2[1] = v5;
  v2[2] = v4;
  if (v4)
  {
    v6 = (unint64_t *)(v4 + 16);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  v2[3] = &off_24C9B46A0;
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32));
  return v3;
}

void sub_20EFBD5C0(_Unwind_Exception *a1)
{
  _QWORD *v1;
  std::__shared_weak_count *v3;

  v3 = (std::__shared_weak_count *)v1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20EFBD5E0(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  *a2 = &off_24C9F3330;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  a2[3] = &off_24C9B46A0;
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32));
}

void sub_20EFBD648(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  std::__shared_weak_count *v3;

  v3 = *(std::__shared_weak_count **)(v1 + 16);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  _Unwind_Resume(exception_object);
}

void sub_20EFBD660(_QWORD *a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;

  v2 = a1[4];
  a1[3] = &off_24C9B46A0;
  a1[4] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = (std::__shared_weak_count *)a1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
}

void sub_20EFBD6B0(_QWORD *__p)
{
  uint64_t v2;
  std::__shared_weak_count *v3;

  v2 = __p[4];
  __p[3] = &off_24C9B46A0;
  __p[4] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = (std::__shared_weak_count *)__p[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  operator delete(__p);
}

void sub_20EFBD6FC(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;

  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = a1[1];
      if (v5)
      {
        v6 = operator new(0x20uLL);
        v7 = a1[4];
        a1[4] = 0;
        v6[2] = &off_24C9B46A0;
        v6[3] = v7;
        v9 = *(_QWORD *)(v5 + 120);
        v8 = (_QWORD *)(v5 + 120);
        *v6 = v9;
        v6[1] = v8;
        *(_QWORD *)(v9 + 8) = v6;
        *v8 = v6;
        ++v8[2];
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v11 = __ldaxr(p_shared_owners);
      while (__stlxr(v11 - 1, p_shared_owners));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_20EFBD7B0(_Unwind_Exception *exception_object)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v4;

  p_shared_owners = (unint64_t *)&v1->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20EFBD7EC(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3kit11concurrency6detail9ProcessorINSt3__110shared_ptrIKNS_3vio10mapping_io15MapLocationInfo"
                     "EEENS7_16SubmapLoadResultENS7_23MappingIONodeGroupErrorESB_Lb0EE15AddErrorHandlerENS1_12ChannelInputISC_EEEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4cv3d3kit11concurrency6detail9ProcessorINSt3__110shared_ptrIKNS_3vio10mapping_io15MapL"
                                "ocationInfoEEENS7_16SubmapLoadResultENS7_23MappingIONodeGroupErrorESB_Lb0EE15AddErrorHan"
                                "dlerENS1_12ChannelInputISC_EEEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3kit11concurrency6detail9ProcessorINSt3__110shared_ptrIKNS_3vio10mapping_io15MapLocationInfoEEENS7_16SubmapLoadResultENS7_23MappingIONodeGroupErrorESB_Lb0EE15AddErrorHandlerENS1_12ChannelInputISC_EEEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3kit11concurrency6detail9ProcessorINSt3__110shared_ptrIKNS_3vio10mapping_io15MapLocationInfoEEENS7_16SubmapLoadResultENS7_23MappingIONodeGroupErrorESB_Lb0EE15AddErrorHandlerENS1_12ChannelInputISC_EEEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20EFBD858()
{
  return &unk_24C9F3390;
}

_QWORD *sub_20EFBD864(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_24C9F33B0;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_20EFBD89C(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_24C9F33B0;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20EFBD8E4(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x20uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = &off_24C9F33B0;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  result[3] = a1[3];
  return result;
}

_QWORD *sub_20EFBD93C(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = result[1];
  v2 = result[2];
  *a2 = &off_24C9F33B0;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  a2[3] = result[3];
  return result;
}

void sub_20EFBD974(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void sub_20EFBD984(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void sub_20EFBD9B0(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  uint64_t *v6;
  unint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p[2];
  char *v16;
  __int128 v17;
  char *v18;
  uint64_t v19;
  __int128 *v20;

  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = a1[1];
      if (!v5)
      {
LABEL_11:
        p_shared_owners = (unint64_t *)&v4->__shared_owners_;
        do
          v14 = __ldaxr(p_shared_owners);
        while (__stlxr(v14 - 1, p_shared_owners));
        if (!v14)
        {
          ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
          std::__shared_weak_count::__release_weak(v4);
        }
        return;
      }
      v6 = (uint64_t *)a1[3];
      v7 = *(_QWORD *)(v5 + 112);
      v18 = 0;
      v17 = 0uLL;
      if (v7)
      {
        if (v7 >> 61)
          sub_20E92CED8();
        v8 = (char *)operator new(8 * v7);
        v9 = &v8[8 * v7];
        *(_QWORD *)&v17 = v8;
        *((_QWORD *)&v17 + 1) = v8;
        v18 = v9;
        v10 = v5 + 96;
        v11 = *(_QWORD *)(v5 + 104);
        v20 = &v17;
        if (v11 != v10)
        {
          do
          {
LABEL_7:
            v19 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v11 + 24) + 48))(*(_QWORD *)(v11 + 24));
            sub_20E9B2D04((uint64_t *)&v20, &v19);
            v11 = *(_QWORD *)(v11 + 8);
          }
          while (v11 != v10);
          *(_OWORD *)__p = v17;
          v16 = v18;
          v12 = *v6;
          if (*v6)
            goto LABEL_9;
          goto LABEL_18;
        }
      }
      else
      {
        v9 = 0;
        v8 = 0;
        v10 = v5 + 96;
        v11 = *(_QWORD *)(v5 + 104);
        v20 = &v17;
        if (v11 != v10)
          goto LABEL_7;
      }
      *(int64x2_t *)__p = vdupq_n_s64((unint64_t)v8);
      v16 = v9;
      v12 = *v6;
      if (*v6)
      {
LABEL_9:
        sub_20EA04C5C(v12, (uint64_t)__p);
        if (__p[0])
        {
          __p[1] = __p[0];
          operator delete(__p[0]);
        }
        goto LABEL_11;
      }
LABEL_18:
      sub_20E96CE78(3u);
    }
  }
}

void sub_20EFBDB2C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v17;

  if (__p)
    operator delete(__p);
  p_shared_owners = (unint64_t *)&v14->__shared_owners_;
  do
    v17 = __ldaxr(p_shared_owners);
  while (__stlxr(v17 - 1, p_shared_owners));
  if (!v17)
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20EFBDB9C(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__110shared_ptrIKNS_3vio10mapping_io15MapLocationInf"
                     "oEEENS7_16SubmapLoadResultENS7_23MappingIONodeGroupErrorESB_Lb0EE16OutputHandlerIDsEvEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__110shared_ptrIKNS_3vio10mapping_io15Map"
                                "LocationInfoEEENS7_16SubmapLoadResultENS7_23MappingIONodeGroupErrorESB_Lb0EE16OutputHandlerIDsEvEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__110shared_ptrIKNS_3vio10mapping_io15MapLocationInfoEEENS7_16SubmapLoadResultENS7_23MappingIONodeGroupErrorESB_Lb0EE16OutputHandlerIDsEvEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__110shared_ptrIKNS_3vio10mapping_io15MapLocationInfoEEENS7_16SubmapLoadResultENS7_23MappingIONodeGroupErrorESB_Lb0EE16OutputHandlerIDsEvEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20EFBDC08()
{
  return &unk_24C9F3410;
}

_QWORD *sub_20EFBDC14(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_24C9F3430;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_20EFBDC4C(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_24C9F3430;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20EFBDC94(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x20uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = &off_24C9F3430;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  result[3] = a1[3];
  return result;
}

_QWORD *sub_20EFBDCEC(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = result[1];
  v2 = result[2];
  *a2 = &off_24C9F3430;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  a2[3] = result[3];
  return result;
}

void sub_20EFBDD24(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void sub_20EFBDD34(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void sub_20EFBDD60(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  uint64_t *v6;
  unint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p[2];
  char *v16;
  __int128 v17;
  char *v18;
  uint64_t v19;
  __int128 *v20;

  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = a1[1];
      if (!v5)
      {
LABEL_11:
        p_shared_owners = (unint64_t *)&v4->__shared_owners_;
        do
          v14 = __ldaxr(p_shared_owners);
        while (__stlxr(v14 - 1, p_shared_owners));
        if (!v14)
        {
          ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
          std::__shared_weak_count::__release_weak(v4);
        }
        return;
      }
      v6 = (uint64_t *)a1[3];
      v7 = *(_QWORD *)(v5 + 136);
      v18 = 0;
      v17 = 0uLL;
      if (v7)
      {
        if (v7 >> 61)
          sub_20E92CED8();
        v8 = (char *)operator new(8 * v7);
        v9 = &v8[8 * v7];
        *(_QWORD *)&v17 = v8;
        *((_QWORD *)&v17 + 1) = v8;
        v18 = v9;
        v10 = v5 + 120;
        v11 = *(_QWORD *)(v5 + 128);
        v20 = &v17;
        if (v11 != v10)
        {
          do
          {
LABEL_7:
            v19 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v11 + 24) + 48))(*(_QWORD *)(v11 + 24));
            sub_20E9B2D04((uint64_t *)&v20, &v19);
            v11 = *(_QWORD *)(v11 + 8);
          }
          while (v11 != v10);
          *(_OWORD *)__p = v17;
          v16 = v18;
          v12 = *v6;
          if (*v6)
            goto LABEL_9;
          goto LABEL_18;
        }
      }
      else
      {
        v9 = 0;
        v8 = 0;
        v10 = v5 + 120;
        v11 = *(_QWORD *)(v5 + 128);
        v20 = &v17;
        if (v11 != v10)
          goto LABEL_7;
      }
      *(int64x2_t *)__p = vdupq_n_s64((unint64_t)v8);
      v16 = v9;
      v12 = *v6;
      if (*v6)
      {
LABEL_9:
        sub_20EA04C5C(v12, (uint64_t)__p);
        if (__p[0])
        {
          __p[1] = __p[0];
          operator delete(__p[0]);
        }
        goto LABEL_11;
      }
LABEL_18:
      sub_20E96CE78(3u);
    }
  }
}

void sub_20EFBDEDC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v17;

  if (__p)
    operator delete(__p);
  p_shared_owners = (unint64_t *)&v14->__shared_owners_;
  do
    v17 = __ldaxr(p_shared_owners);
  while (__stlxr(v17 - 1, p_shared_owners));
  if (!v17)
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20EFBDF4C(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__110shared_ptrIKNS_3vio10mapping_io15MapLocationInf"
                     "oEEENS7_16SubmapLoadResultENS7_23MappingIONodeGroupErrorESB_Lb0EE15ErrorHandlerIDsEvEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__110shared_ptrIKNS_3vio10mapping_io15Map"
                                "LocationInfoEEENS7_16SubmapLoadResultENS7_23MappingIONodeGroupErrorESB_Lb0EE15ErrorHandlerIDsEvEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__110shared_ptrIKNS_3vio10mapping_io15MapLocationInfoEEENS7_16SubmapLoadResultENS7_23MappingIONodeGroupErrorESB_Lb0EE15ErrorHandlerIDsEvEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__110shared_ptrIKNS_3vio10mapping_io15MapLocationInfoEEENS7_16SubmapLoadResultENS7_23MappingIONodeGroupErrorESB_Lb0EE15ErrorHandlerIDsEvEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20EFBDFB8()
{
  return &unk_24C9F3490;
}

void sub_20EFBDFC8(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20EFBDFEC(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t sub_20EFBE004(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail9ProcessorINS0_IKNS1_3vio10mapping_io15MapLocatio"
                     "nInfoEEENS7_16SubmapLoadResultENS7_23MappingIONodeGroupErrorESB_Lb0EEEE27__shared_ptr_default_deleteISD_SD_EE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail9ProcessorINS0_IKNS1_3vio10mapping_io1"
                                "5MapLocationInfoEEENS7_16SubmapLoadResultENS7_23MappingIONodeGroupErrorESB_Lb0EEEE27__sh"
                                "ared_ptr_default_deleteISD_SD_EE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail9ProcessorINS0_IKNS1_3vio10mapping_io15MapLocationInfoEEENS7_16SubmapLoadResultENS7_23MappingIONodeGroupErrorESB_Lb0EEEE27__shared_ptr_default_deleteISD_SD_EE"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail9ProcessorINS0_IKNS1_3vio10mapping_io15MapLocationInfoEEENS7_16SubmapLoadResultENS7_23MappingIONodeGroupErrorESB_Lb0EEEE27__shared_ptr_default_deleteISD_SD_EE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

uint64_t sub_20EFBE074(uint64_t a1)
{
  std::__shared_weak_count *v2;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_20EFBE0A0(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20EFBE0DC@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *result;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;

  result = (_QWORD *)operator new();
  v6 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  *result = &off_24C9F3500;
  result[1] = v6;
  result[2] = v5;
  if (v5)
  {
    v7 = (unint64_t *)(v5 + 16);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  *a2 = result;
  return result;
}

void sub_20EFBE144(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 8);
      if (v5)
        (*(void (**)(uint64_t))(*(_QWORD *)v5 + 32))(v5);
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_20EFBE1D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20EFBE1E8(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 8);
      if (v5)
        (*(void (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_20EFBE278(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20EFBE28C(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return 0;
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
    return 0;
  v4 = v3;
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
    v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 48))(v5);
  else
    v6 = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (v9)
    return v6;
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return v6;
}

void sub_20EFBE350(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20EFBE364(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return 0;
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
    return 0;
  v4 = v3;
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
    v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 24))(v5);
  else
    v6 = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (v9)
    return v6;
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return v6;
}

void sub_20EFBE428(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20EFBE43C(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3)
  {
    v5 = std::__shared_weak_count::lock(v3);
    if (v5)
    {
      v6 = v5;
      v7 = *(_QWORD *)(a1 + 8);
      if (v7)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v7 + 16))(v7, a2);
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
}

void sub_20EFBE4E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20EFBE4F8(uint64_t a1)
{
  sub_20EFBFE64(a1);
  JUMPOUT(0x212BC6398);
}

void sub_20EFBE51C(_QWORD *a1, std::__shared_weak_count_vtbl **a2)
{
  uint64_t *v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  uint64_t v8;
  _QWORD *v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t *p_shared_weak_owners;
  unint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  unint64_t v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  std::mutex **v28;
  uint64_t **v29;
  std::__shared_weak_count *v30;
  std::__shared_weak_count *v31;
  std::__shared_weak_count *v32;
  uint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  unint64_t *v36;
  unint64_t v37;
  uint64_t **v38;
  std::__shared_weak_count *v39;
  std::__shared_weak_count *v40;
  std::__shared_weak_count *v41;
  uint64_t v42;
  unint64_t *v43;
  unint64_t v44;
  unint64_t *v45;
  unint64_t v46;
  char *v47;
  _QWORD *v48;
  uint64_t v49;
  unint64_t *v50;
  unint64_t v51;
  std::__shared_weak_count_vtbl *v52;
  std::__shared_weak_count_vtbl *v53;
  unint64_t *v54;
  unint64_t v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  __int128 *v60;
  uint64_t v61;
  __int128 v62;
  std::__shared_weak_count *v63;
  __int128 v64;
  uint64_t v65;
  __int128 *v66;
  _BYTE v67[24];
  _BYTE *v68;
  uint64_t v69;

  v69 = *MEMORY[0x24BDAC8D0];
  if (!(*(unsigned int (**)(_QWORD *))(*a1 + 48))(a1))
    return;
  if (!a1[9]
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 234, (uint64_t)"scheduler_", 10, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v4 = (uint64_t *)a1[18];
  if (v4)
  {
    v5 = (std::__shared_weak_count *)operator new(0x28uLL);
    v6 = v5;
    v5->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    v5->__shared_weak_owners_ = 0;
    v5->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9F3768;
    v8 = (uint64_t)a2[1];
    v5[1].__vftable = *a2;
    v9 = &v5[1].__vftable;
    v5[1].__shared_owners_ = v8;
    if (v8)
    {
      v10 = (unint64_t *)(v8 + 8);
      do
        v11 = __ldxr(v10);
      while (__stxr(v11 + 1, v10));
      v4 = (uint64_t *)a1[18];
    }
    v63 = v5;
    p_shared_weak_owners = (unint64_t *)&v5->__shared_weak_owners_;
    do
      v13 = __ldxr(p_shared_weak_owners);
    while (__stxr(v13 + 1, p_shared_weak_owners));
    v14 = (_QWORD *)operator new();
    *v14 = v4 + 7;
    std::mutex::lock((std::mutex *)(v4 + 7));
    *(_QWORD *)&v64 = v14;
    *((_QWORD *)&v64 + 1) = v4;
    if (!*((_BYTE *)v4 + 48))
      sub_20E866B34();
    v15 = v4[4];
    v16 = *v4;
    v17 = (_QWORD *)(*v4 + 16 * v15);
    do
      v18 = __ldxr(p_shared_owners);
    while (__stxr(v18 + 1, p_shared_owners));
    *v17 = v9;
    v19 = v16 + 16 * v15;
    v20 = *(std::__shared_weak_count **)(v19 + 8);
    *(_QWORD *)(v19 + 8) = v6;
    if (v20)
    {
      v21 = (unint64_t *)&v20->__shared_owners_;
      do
        v22 = __ldaxr(v21);
      while (__stlxr(v22 - 1, v21));
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
        std::__shared_weak_count::__release_weak(v20);
      }
    }
    v23 = (v4[1] - *v4) >> 4;
    v24 = v4[5];
    v25 = v4[4] + 1;
    if (v25 >= v23)
      v26 = (v4[1] - *v4) >> 4;
    else
      v26 = 0;
    v4[4] = v25 - v26;
    if (v24 == v23)
    {
      v27 = v4[3] + 1;
      if (v27 < v23)
        v23 = 0;
      v4[3] = v27 - v23;
      v28 = (std::mutex **)v64;
      if (!(_QWORD)v64)
      {
LABEL_37:
        v38 = (uint64_t **)a1[9];
        v64 = 0uLL;
        v39 = (std::__shared_weak_count *)a1[5];
        if (v39)
        {
          v40 = std::__shared_weak_count::lock(v39);
          if (v40)
          {
            v41 = v40;
            v42 = a1[4];
            v43 = (unint64_t *)&v40->__shared_weak_owners_;
            do
              v44 = __ldxr(v43);
            while (__stxr(v44 + 1, v43));
            *(_QWORD *)&v64 = v42;
            *((_QWORD *)&v64 + 1) = v40;
            v45 = (unint64_t *)&v40->__shared_owners_;
            do
              v46 = __ldaxr(v45);
            while (__stlxr(v46 - 1, v45));
            if (!v46)
            {
              ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
              std::__shared_weak_count::__release_weak(v41);
            }
          }
          else
          {
            v64 = 0uLL;
          }
        }
        v47 = (char *)operator new(0x30uLL);
        *(_QWORD *)v47 = &off_24C9F37B8;
        *(_OWORD *)(v47 + 8) = v64;
        v64 = 0uLL;
        *((_QWORD *)v47 + 3) = v9;
        *((_QWORD *)v47 + 4) = v6;
        v65 = 0;
        v66 = 0;
        v68 = v47;
        sub_210216F3C(*v38, (uint64_t)v67);
        v48 = v68;
        if (v68 == v67)
        {
          v49 = 4;
          v48 = v67;
        }
        else
        {
          if (!v68)
            goto LABEL_51;
          v49 = 5;
        }
        (*(void (**)(void))(*v48 + 8 * v49))();
LABEL_51:
        if (v63)
        {
          v50 = (unint64_t *)&v63->__shared_owners_;
          do
            v51 = __ldaxr(v50);
          while (__stlxr(v51 - 1, v50));
          if (!v51)
          {
            ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
            std::__shared_weak_count::__release_weak(v63);
          }
        }
        return;
      }
    }
    else
    {
      v4[5] = v24 + 1;
      v28 = (std::mutex **)v64;
      if (!(_QWORD)v64)
        goto LABEL_37;
    }
    std::mutex::unlock(*v28);
    MEMORY[0x212BC6398](v28, 0x20C4093837F09);
    goto LABEL_37;
  }
  v29 = (uint64_t **)a1[9];
  v62 = 0uLL;
  v30 = (std::__shared_weak_count *)a1[5];
  if (v30)
  {
    v31 = std::__shared_weak_count::lock(v30);
    if (v31)
    {
      v32 = v31;
      v33 = a1[4];
      v34 = (unint64_t *)&v31->__shared_weak_owners_;
      do
        v35 = __ldxr(v34);
      while (__stxr(v35 + 1, v34));
      *(_QWORD *)&v62 = v33;
      *((_QWORD *)&v62 + 1) = v31;
      v36 = (unint64_t *)&v31->__shared_owners_;
      do
        v37 = __ldaxr(v36);
      while (__stlxr(v37 - 1, v36));
      if (!v37)
      {
        ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
        std::__shared_weak_count::__release_weak(v32);
      }
    }
    else
    {
      v62 = 0uLL;
    }
  }
  v52 = *a2;
  v53 = a2[1];
  if (v53)
  {
    v54 = (unint64_t *)&v53->~__shared_weak_count_0;
    do
      v55 = __ldxr(v54);
    while (__stxr(v55 + 1, v54));
  }
  v56 = (char *)operator new(0x28uLL);
  *(_QWORD *)v56 = &off_24C9F3838;
  *(_OWORD *)(v56 + 8) = v62;
  *((_QWORD *)v56 + 3) = v52;
  *((_QWORD *)v56 + 4) = v53;
  v66 = (__int128 *)v56;
  sub_210216F3C(*v29, (uint64_t)&v64);
  v60 = v66;
  if (v66 == &v64)
  {
    v61 = 4;
    v60 = &v64;
  }
  else
  {
    if (!v66)
      return;
    v61 = 5;
  }
  (*(void (**)(__int128 *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v60 + 8 * v61))(v60, v57, v58, v59);
}

void sub_20EFBE97C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, char *a18)
{
  char *v18;
  char *v20;
  uint64_t v21;

  v20 = a18;
  if (a18 == v18)
  {
    v21 = 4;
    v20 = &a15;
  }
  else
  {
    if (!a18)
    {
      sub_20EBB635C((uint64_t)&a9);
      _Unwind_Resume(a1);
    }
    v21 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v20 + 8 * v21))();
  sub_20EBB635C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20EFBE9D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,char *a23)
{
  char *v23;
  char *v25;
  uint64_t v26;

  v25 = a23;
  if (a23 == v23)
  {
    v26 = 4;
    v25 = &a20;
  }
  else
  {
    if (!a23)
      goto LABEL_6;
    v26 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v25 + 8 * v26))();
LABEL_6:
  sub_20EA02254((uint64_t)&a15);
  sub_20E86665C((uint64_t)&a13);
  _Unwind_Resume(a1);
}

void sub_20EFBEA20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  std::__shared_weak_count *v5;
  uint64_t v7;
  va_list va;
  uint64_t v9;
  va_list va1;

  va_start(va1, a5);
  va_start(va, a5);
  v7 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  sub_20EA0228C((std::mutex ***)va1);
  std::__shared_weak_count::__release_weak(v5);
  sub_20E86665C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20EFBEA44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  std::__shared_weak_count *v5;
  uint64_t v6;
  va_list va;

  va_start(va, a5);
  MEMORY[0x212BC6398](v6, 0x20C4093837F09);
  std::__shared_weak_count::__release_weak(v5);
  sub_20E86665C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20EFBEA78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  std::__shared_weak_count *v13;

  std::__shared_weak_count::__release_weak(v13);
  sub_20E86665C((uint64_t)&a13);
  _Unwind_Resume(a1);
}

void sub_20EFBEA98(_QWORD *a1, std::__shared_weak_count_vtbl **a2, std::__shared_weak_count_vtbl **a3)
{
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t *p_shared_weak_owners;
  unint64_t v17;
  uint64_t *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  std::__shared_weak_count **v22;
  unint64_t v23;
  uint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  std::mutex **v33;
  uint64_t **v34;
  std::__shared_weak_count *v35;
  std::__shared_weak_count *v36;
  std::__shared_weak_count *v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  unint64_t *v41;
  unint64_t v42;
  uint64_t **v43;
  std::__shared_weak_count *v44;
  std::__shared_weak_count *v45;
  std::__shared_weak_count *v46;
  uint64_t v47;
  unint64_t *v48;
  unint64_t v49;
  unint64_t *v50;
  unint64_t v51;
  char *v52;
  std::string *v53;
  uint64_t v54;
  uint64_t *v55;
  unint64_t v56;
  unint64_t *v57;
  unint64_t v58;
  std::__shared_weak_count_vtbl *v59;
  std::__shared_weak_count_vtbl *v60;
  unint64_t *v61;
  unint64_t v62;
  _QWORD *v63;
  char *v64;
  __int128 *v65;
  uint64_t v66;
  _QWORD *v67;
  _QWORD *v68;
  _QWORD *v69;
  __int128 *v70;
  std::string *v71;
  std::runtime_error *exception;
  std::runtime_error *v73;
  std::__shared_weak_count *v74[2];
  _QWORD *v75;
  std::__shared_weak_count *v76;
  std::__shared_weak_count *v77;
  std::runtime_error v78;
  std::__shared_weak_count *v79;
  std::__shared_weak_count *v80;
  __int128 v81;
  _QWORD *v82;
  __int128 *v83;
  _QWORD v84[3];
  std::string v85;
  std::string *v86;
  uint64_t v87;

  v87 = *MEMORY[0x24BDAC8D0];
  if (((*(uint64_t (**)(_QWORD *))(*a1 + 48))(a1) & 1) == 0)
  {
    *(_QWORD *)&v81 = "Invalid operation. Interface is disabled for ";
    *((_QWORD *)&v81 + 1) = 45;
    v69 = (_QWORD *)a1[6];
    v68 = a1 + 6;
    v67 = v69;
    v70 = (__int128 *)*((unsigned __int8 *)v68 + 23);
    if ((char)v70 < 0)
      v70 = (__int128 *)v68[1];
    else
      v67 = v68;
    v82 = v67;
    v83 = v70;
    sub_20E8778D4((uint64_t)&v81, (uint64_t)v84, 0, 0, &v85);
    if ((v85.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v71 = &v85;
    else
      v71 = (std::string *)v85.__r_.__value_.__r.__words[0];
    std::runtime_error::runtime_error(&v78, (const char *)v71);
    v78.__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v73 = std::runtime_error::runtime_error(exception, &v78);
    v73->__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    __cxa_throw(v73, (struct type_info *)&unk_24CA1E2D0, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  if (!a1[9]
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 294, (uint64_t)"scheduler_", 10, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  if (a1[18])
  {
    v6 = (std::__shared_weak_count *)operator new(0x20uLL);
    v6->__shared_weak_owners_ = 0;
    v6->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9F38B8;
    v6[1].__vftable = *a3;
    v77 = v6;
    v75 = &v6[1].__vftable;
    v76 = v6;
    v6->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    *a3 = 0;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    if (!a1[18]
      && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 414, (uint64_t)"limiting_buffer_", 16, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v9 = (std::__shared_weak_count *)operator new(0x28uLL);
    v10 = v9;
    v9->__shared_owners_ = 0;
    v11 = (unint64_t *)&v9->__shared_owners_;
    v9->__shared_weak_owners_ = 0;
    v9->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9F3768;
    v12 = (uint64_t)a2[1];
    v9[1].__vftable = *a2;
    v13 = v9 + 1;
    v9[1].__shared_owners_ = v12;
    if (v12)
    {
      v14 = (unint64_t *)(v12 + 8);
      do
        v15 = __ldxr(v14);
      while (__stxr(v15 + 1, v14));
    }
    v79 = v9 + 1;
    v80 = v9;
    p_shared_weak_owners = (unint64_t *)&v9->__shared_weak_owners_;
    do
      v17 = __ldxr(p_shared_weak_owners);
    while (__stxr(v17 + 1, p_shared_weak_owners));
    v18 = (uint64_t *)a1[18];
    v19 = (_QWORD *)operator new();
    *v19 = v18 + 7;
    std::mutex::lock((std::mutex *)(v18 + 7));
    *(_QWORD *)&v81 = v19;
    *((_QWORD *)&v81 + 1) = v18;
    if (!*((_BYTE *)v18 + 48))
      sub_20E866B34();
    v20 = v18[4];
    v21 = *v18;
    v22 = (std::__shared_weak_count **)(*v18 + 16 * v20);
    do
      v23 = __ldxr(v11);
    while (__stxr(v23 + 1, v11));
    *v22 = v13;
    v24 = v21 + 16 * v20;
    v25 = *(std::__shared_weak_count **)(v24 + 8);
    *(_QWORD *)(v24 + 8) = v10;
    if (v25)
    {
      v26 = (unint64_t *)&v25->__shared_owners_;
      do
        v27 = __ldaxr(v26);
      while (__stlxr(v27 - 1, v26));
      if (!v27)
      {
        ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
        std::__shared_weak_count::__release_weak(v25);
      }
    }
    v28 = (v18[1] - *v18) >> 4;
    v29 = v18[5];
    v30 = v18[4] + 1;
    if (v30 >= v28)
      v31 = (v18[1] - *v18) >> 4;
    else
      v31 = 0;
    v18[4] = v30 - v31;
    if (v29 == v28)
    {
      v32 = v18[3] + 1;
      if (v32 < v28)
        v28 = 0;
      v18[3] = v32 - v28;
      v33 = (std::mutex **)v81;
      if (!(_QWORD)v81)
      {
LABEL_40:
        v43 = (uint64_t **)a1[9];
        v81 = 0uLL;
        v44 = (std::__shared_weak_count *)a1[5];
        if (v44)
        {
          v45 = std::__shared_weak_count::lock(v44);
          if (v45)
          {
            v46 = v45;
            v47 = a1[4];
            v48 = (unint64_t *)&v45->__shared_weak_owners_;
            do
              v49 = __ldxr(v48);
            while (__stxr(v49 + 1, v48));
            *(_QWORD *)&v81 = v47;
            *((_QWORD *)&v81 + 1) = v45;
            v50 = (unint64_t *)&v45->__shared_owners_;
            do
              v51 = __ldaxr(v50);
            while (__stlxr(v51 - 1, v50));
            if (!v51)
            {
              ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
              std::__shared_weak_count::__release_weak(v46);
            }
          }
          else
          {
            v81 = 0uLL;
          }
        }
        v52 = (char *)operator new(0x38uLL);
        *(_QWORD *)v52 = &off_24C9F3908;
        *(_OWORD *)(v52 + 8) = v81;
        v81 = 0uLL;
        *((_QWORD *)v52 + 3) = v13;
        *((_QWORD *)v52 + 4) = v10;
        v82 = 0;
        v83 = 0;
        *((_QWORD *)v52 + 5) = v75;
        *((_QWORD *)v52 + 6) = v76;
        v84[0] = 0;
        v84[1] = 0;
        v86 = (std::string *)v52;
        sub_210216F3C(*v43, (uint64_t)&v85);
        v53 = v86;
        if (v86 == &v85)
        {
          v54 = 4;
          v53 = &v85;
        }
        else
        {
          if (!v86)
            goto LABEL_54;
          v54 = 5;
        }
        (*(void (**)(void))(v53->__r_.__value_.__r.__words[0] + 8 * v54))();
LABEL_54:
        if (v80)
        {
          v55 = &v80->__shared_owners_;
          do
            v56 = __ldaxr((unint64_t *)v55);
          while (__stlxr(v56 - 1, (unint64_t *)v55));
          if (!v56)
          {
            ((void (*)(std::__shared_weak_count *))v80->__on_zero_shared)(v80);
            std::__shared_weak_count::__release_weak(v80);
          }
        }
        if (v77)
        {
          v57 = (unint64_t *)&v77->__shared_owners_;
          do
            v58 = __ldaxr(v57);
          while (__stlxr(v58 - 1, v57));
          if (!v58)
          {
            ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
            std::__shared_weak_count::__release_weak(v77);
          }
        }
        return;
      }
    }
    else
    {
      v18[5] = v29 + 1;
      v33 = (std::mutex **)v81;
      if (!(_QWORD)v81)
        goto LABEL_40;
    }
    std::mutex::unlock(*v33);
    MEMORY[0x212BC6398](v33, 0x20C4093837F09);
    goto LABEL_40;
  }
  v34 = (uint64_t **)a1[9];
  *(_OWORD *)v74 = 0uLL;
  v35 = (std::__shared_weak_count *)a1[5];
  if (v35)
  {
    v36 = std::__shared_weak_count::lock(v35);
    if (v36)
    {
      v37 = v36;
      v38 = (std::__shared_weak_count *)a1[4];
      v39 = (unint64_t *)&v36->__shared_weak_owners_;
      do
        v40 = __ldxr(v39);
      while (__stxr(v40 + 1, v39));
      v74[0] = v38;
      v74[1] = v36;
      v41 = (unint64_t *)&v36->__shared_owners_;
      do
        v42 = __ldaxr(v41);
      while (__stlxr(v42 - 1, v41));
      if (!v42)
      {
        ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
        std::__shared_weak_count::__release_weak(v37);
      }
    }
    else
    {
      *(_OWORD *)v74 = 0uLL;
    }
  }
  v59 = *a2;
  v60 = a2[1];
  if (v60)
  {
    v61 = (unint64_t *)&v60->~__shared_weak_count_0;
    do
      v62 = __ldxr(v61);
    while (__stxr(v62 + 1, v61));
  }
  v63 = operator new(0x20uLL);
  v63[1] = 0;
  v63[2] = 0;
  *v63 = &off_24C9F38B8;
  v63[3] = *a3;
  *a3 = 0;
  v64 = (char *)operator new(0x38uLL);
  *(_QWORD *)v64 = &off_24C9F3988;
  *(_OWORD *)(v64 + 8) = *(_OWORD *)v74;
  *((_QWORD *)v64 + 3) = v59;
  *((_QWORD *)v64 + 4) = v60;
  *((_QWORD *)v64 + 5) = v63 + 3;
  *((_QWORD *)v64 + 6) = v63;
  v83 = (__int128 *)v64;
  sub_210216F3C(*v34, (uint64_t)&v81);
  v65 = v83;
  if (v83 == &v81)
  {
    v66 = 4;
    v65 = &v81;
  }
  else
  {
    if (!v83)
      return;
    v66 = 5;
  }
  (*(void (**)(__int128 *))(*(_QWORD *)v65 + 8 * v66))(v65);
}

void sub_20EFBF174(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, std::runtime_error a20,std::exception_ptr a21,uint64_t a22,uint64_t a23,std::exception_ptr a24)
{
  std::__assoc_sub_state **v24;
  uint64_t v25;
  std::__assoc_sub_state *v26;
  std::exception_ptr v27;

  if (a2)
  {
    __cxa_begin_catch(exception_object);
    std::current_exception();
    __cxa_end_catch();
    v26 = *v24;
    if (*v24)
    {
      std::exception_ptr::exception_ptr(&a24, &a21);
      v27.__ptr_ = &a24;
      std::__assoc_sub_state::set_exception(v26, v27);
      std::exception_ptr::~exception_ptr(&a24);
      std::exception_ptr::~exception_ptr(&a21);
      std::runtime_error::~runtime_error(&a20);
      if (*(char *)(v25 - 97) < 0)
        operator delete(*(void **)(v25 - 120));
      JUMPOUT(0x20EFBF084);
    }
    sub_20E96CE78(3u);
  }
  _Unwind_Resume(exception_object);
}

void sub_20EFBF1E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, std::runtime_error a20,std::exception_ptr a21,uint64_t a22,uint64_t a23,std::exception_ptr a24)
{
  uint64_t v24;

  std::exception_ptr::~exception_ptr(&a21);
  std::runtime_error::~runtime_error(&a20);
  if (*(char *)(v24 - 97) < 0)
  {
    operator delete(*(void **)(v24 - 120));
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void sub_20EFBF23C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,char *a28)
{
  char *v28;
  char *v30;
  uint64_t v31;

  v30 = a28;
  if (a28 == v28)
  {
    v31 = 4;
    v30 = &a25;
  }
  else
  {
    if (!a28)
    {
      sub_20EBB7258(&a9);
      _Unwind_Resume(a1);
    }
    v31 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v30 + 8 * v31))();
  sub_20EBB7258(&a9);
  _Unwind_Resume(a1);
}

void sub_20EFBF290(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  uint64_t v10;

  sub_20E86665C(v10);
  if (a10)
  {
    std::__shared_weak_count::__release_weak(a10);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void sub_20EFBF2BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  va_list va;
  uint64_t v15;
  uint64_t v16;
  va_list va1;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  va_list va2;
  uint64_t v24;
  va_list va3;

  va_start(va3, a8);
  va_start(va2, a8);
  va_start(va1, a8);
  va_start(va, a8);
  v13 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v16 = va_arg(va2, _QWORD);
  v18 = va_arg(va2, _QWORD);
  v19 = va_arg(va2, _QWORD);
  v20 = va_arg(va2, _QWORD);
  v21 = va_arg(va2, _QWORD);
  va_copy(va3, va2);
  v22 = va_arg(va3, _QWORD);
  v24 = va_arg(va3, _QWORD);
  v11 = *(_QWORD **)(v9 - 96);
  if (v11 == v8)
  {
    v12 = 4;
    v11 = (_QWORD *)(v9 - 120);
  }
  else
  {
    if (!v11)
      goto LABEL_6;
    v12 = 5;
  }
  (*(void (**)(void))(*v11 + 8 * v12))();
LABEL_6:
  sub_20EA031A8((uint64_t *)va3);
  sub_20E86665C((uint64_t)va2);
  sub_20E86665C((uint64_t)va);
  sub_20E86665C((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_20EFBF35C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  uint64_t v9;
  va_list va;
  uint64_t v11;
  va_list va1;

  va_start(va1, a8);
  va_start(va, a8);
  v9 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  sub_20E86665C((uint64_t)va);
  sub_20E86665C((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_20EFBF378(uint64_t a1)
{
  uint64_t *v1;

  v1 = *(uint64_t **)(a1 + 72);
  if (v1)
  {
    sub_210217048(*v1);
  }
  else
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 167, (uint64_t)"scheduler_ != nullptr", 21, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    sub_210217048(**(_QWORD **)(a1 + 72));
  }
}

_QWORD *sub_20EFBF3EC(_QWORD *a1, uint64_t a2)
{
  uint64_t **v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *result;
  uint64_t v12;
  _BYTE v13[24];
  _BYTE *v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v4 = (uint64_t **)a1[9];
  if (!v4)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 181, (uint64_t)"scheduler_", 10, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v4 = (uint64_t **)a1[9];
  }
  v6 = a1[4];
  v5 = a1[5];
  if (v5)
  {
    v7 = (unint64_t *)(v5 + 16);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  v9 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v10 = operator new(0x28uLL);
  *v10 = &off_24C9F3A08;
  v10[1] = v6;
  v10[2] = v5;
  v10[3] = &off_24C9F2CC8;
  v10[4] = v9;
  v14 = v10;
  sub_210216F3C(*v4, (uint64_t)v13);
  result = v14;
  if (v14 == v13)
  {
    v12 = 4;
    result = v13;
  }
  else
  {
    if (!v14)
      return result;
    v12 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v12))();
}

void sub_20EFBF51C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v13;

  if (a13 == v13)
  {
    (*(void (**)(void))(a10 + 32))();
    _Unwind_Resume(exception_object);
  }
  if (a13)
  {
    (*(void (**)(void))(*(_QWORD *)a13 + 40))();
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20EFBF590(_QWORD *a1, uint64_t a2)
{
  uint64_t **v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *result;
  uint64_t v12;
  _BYTE v13[24];
  _BYTE *v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v4 = (uint64_t **)a1[9];
  if (!v4)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 202, (uint64_t)"scheduler_", 10, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v4 = (uint64_t **)a1[9];
  }
  v6 = a1[4];
  v5 = a1[5];
  if (v5)
  {
    v7 = (unint64_t *)(v5 + 16);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  v9 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v10 = operator new(0x28uLL);
  *v10 = &off_24C9F3A88;
  v10[1] = v6;
  v10[2] = v5;
  v10[3] = &off_24C9B46A0;
  v10[4] = v9;
  v14 = v10;
  sub_210216F3C(*v4, (uint64_t)v13);
  result = v14;
  if (v14 == v13)
  {
    v12 = 4;
    result = v13;
  }
  else
  {
    if (!v14)
      return result;
    v12 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v12))();
}

void sub_20EFBF6C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v13;

  if (a13 == v13)
  {
    (*(void (**)(void))(a10 + 32))();
    _Unwind_Resume(exception_object);
  }
  if (a13)
  {
    (*(void (**)(void))(*(_QWORD *)a13 + 40))();
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_20EFBF734@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  unint64_t *v5;
  int v6;
  unint64_t v7;
  uint64_t **v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *p_shared_weak_owners;
  unint64_t v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v22;
  _BYTE v23[24];
  _BYTE *v24;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  v4 = operator new();
  *(_QWORD *)(v4 + 8) = 0;
  v5 = (unint64_t *)(v4 + 8);
  *(_QWORD *)(v4 + 24) = 850045863;
  *(_QWORD *)(v4 + 16) = 0;
  *(_OWORD *)(v4 + 32) = 0u;
  *(_OWORD *)(v4 + 48) = 0u;
  *(_OWORD *)(v4 + 64) = 0u;
  *(_QWORD *)(v4 + 80) = 0;
  *(_QWORD *)(v4 + 88) = 1018212795;
  *(_OWORD *)(v4 + 96) = 0u;
  *(_OWORD *)(v4 + 112) = 0u;
  *(_OWORD *)(v4 + 124) = 0u;
  *(_QWORD *)v4 = &off_24C9B80A0;
  v22 = v4;
  std::mutex::lock((std::mutex *)(v4 + 24));
  v6 = *(_DWORD *)(v4 + 136);
  if ((v6 & 2) != 0)
    sub_20E96CE78(1u);
  do
    v7 = __ldxr(v5);
  while (__stxr(v7 + 1, v5));
  *(_DWORD *)(v4 + 136) = v6 | 2;
  std::mutex::unlock((std::mutex *)(v4 + 24));
  v8 = (uint64_t **)a1[9];
  v9 = (std::__shared_weak_count *)a1[5];
  if (v9)
  {
    v10 = std::__shared_weak_count::lock(v9);
    v11 = v10;
    if (v10)
    {
      v12 = a1[4];
      p_shared_weak_owners = (unint64_t *)&v10->__shared_weak_owners_;
      do
        v14 = __ldxr(p_shared_weak_owners);
      while (__stxr(v14 + 1, p_shared_weak_owners));
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        v16 = __ldaxr(p_shared_owners);
      while (__stlxr(v16 - 1, p_shared_owners));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    else
    {
      v12 = 0;
    }
  }
  else
  {
    v12 = 0;
    v11 = 0;
  }
  v17 = operator new(0x20uLL);
  *v17 = &off_24C9F3B08;
  v17[1] = v12;
  v17[2] = v11;
  v17[3] = &v22;
  v24 = v17;
  sub_210216F3C(*v8, (uint64_t)v23);
  v18 = v24;
  if (v24 == v23)
  {
    v19 = 4;
    v18 = v23;
    goto LABEL_17;
  }
  if (v24)
  {
    v19 = 5;
LABEL_17:
    (*(void (**)(_QWORD *))(*v18 + 8 * v19))(v18);
  }
  std::__assoc_sub_state::wait((std::__assoc_sub_state *)v4);
  sub_20EA04D14(v4, a2);
  do
    v20 = __ldaxr(v5);
  while (__stlxr(v20 - 1, v5));
  if (!v20)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
  return sub_20EA04DE8(&v22);
}

void sub_20EFBF94C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  unint64_t *v10;
  unint64_t v12;

  do
    v12 = __ldaxr(v10);
  while (__stlxr(v12 - 1, v10));
  if (!v12)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
    sub_20EA04DE8(&a9);
    _Unwind_Resume(a1);
  }
  sub_20EA04DE8(&a9);
  _Unwind_Resume(a1);
}

uint64_t *sub_20EFBFA14@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  unint64_t *v5;
  int v6;
  unint64_t v7;
  uint64_t **v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *p_shared_weak_owners;
  unint64_t v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v22;
  _BYTE v23[24];
  _BYTE *v24;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  v4 = operator new();
  *(_QWORD *)(v4 + 8) = 0;
  v5 = (unint64_t *)(v4 + 8);
  *(_QWORD *)(v4 + 24) = 850045863;
  *(_QWORD *)(v4 + 16) = 0;
  *(_OWORD *)(v4 + 32) = 0u;
  *(_OWORD *)(v4 + 48) = 0u;
  *(_OWORD *)(v4 + 64) = 0u;
  *(_QWORD *)(v4 + 80) = 0;
  *(_QWORD *)(v4 + 88) = 1018212795;
  *(_OWORD *)(v4 + 96) = 0u;
  *(_OWORD *)(v4 + 112) = 0u;
  *(_OWORD *)(v4 + 124) = 0u;
  *(_QWORD *)v4 = &off_24C9B80A0;
  v22 = v4;
  std::mutex::lock((std::mutex *)(v4 + 24));
  v6 = *(_DWORD *)(v4 + 136);
  if ((v6 & 2) != 0)
    sub_20E96CE78(1u);
  do
    v7 = __ldxr(v5);
  while (__stxr(v7 + 1, v5));
  *(_DWORD *)(v4 + 136) = v6 | 2;
  std::mutex::unlock((std::mutex *)(v4 + 24));
  v8 = (uint64_t **)a1[9];
  v9 = (std::__shared_weak_count *)a1[5];
  if (v9)
  {
    v10 = std::__shared_weak_count::lock(v9);
    v11 = v10;
    if (v10)
    {
      v12 = a1[4];
      p_shared_weak_owners = (unint64_t *)&v10->__shared_weak_owners_;
      do
        v14 = __ldxr(p_shared_weak_owners);
      while (__stxr(v14 + 1, p_shared_weak_owners));
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        v16 = __ldaxr(p_shared_owners);
      while (__stlxr(v16 - 1, p_shared_owners));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    else
    {
      v12 = 0;
    }
  }
  else
  {
    v12 = 0;
    v11 = 0;
  }
  v17 = operator new(0x20uLL);
  *v17 = &off_24C9F3B88;
  v17[1] = v12;
  v17[2] = v11;
  v17[3] = &v22;
  v24 = v17;
  sub_210216F3C(*v8, (uint64_t)v23);
  v18 = v24;
  if (v24 == v23)
  {
    v19 = 4;
    v18 = v23;
    goto LABEL_17;
  }
  if (v24)
  {
    v19 = 5;
LABEL_17:
    (*(void (**)(_QWORD *))(*v18 + 8 * v19))(v18);
  }
  std::__assoc_sub_state::wait((std::__assoc_sub_state *)v4);
  sub_20EA04D14(v4, a2);
  do
    v20 = __ldaxr(v5);
  while (__stlxr(v20 - 1, v5));
  if (!v20)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
  return sub_20EA04DE8(&v22);
}

void sub_20EFBFC2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  unint64_t *v10;
  unint64_t v12;

  do
    v12 = __ldaxr(v10);
  while (__stlxr(v12 - 1, v10));
  if (!v12)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
    sub_20EA04DE8(&a9);
    _Unwind_Resume(a1);
  }
  sub_20EA04DE8(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20EFBFCF4(uint64_t a1)
{
  return sub_20EFBFE64(a1 - 16);
}

void sub_20EFBFCFC(uint64_t a1)
{
  sub_20EFBFE64(a1 - 16);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20EFBFD24(uint64_t a1, uint64_t a2)
{
  return sub_20EFBF3EC((_QWORD *)(a1 - 16), a2);
}

uint64_t *sub_20EFBFD2C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_20EFBF734((_QWORD *)(a1 - 16), a2);
}

uint64_t *sub_20EFBFD34@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_20EFBFA14((_QWORD *)(a1 - 16), a2);
}

uint64_t sub_20EFBFD3C(uint64_t a1)
{
  return a1 - 16;
}

uint64_t sub_20EFBFD44(uint64_t a1)
{
  return sub_20EFBFE64(a1 - 24);
}

void sub_20EFBFD4C(uint64_t a1)
{
  sub_20EFBFE64(a1 - 24);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20EFBFD74(uint64_t a1, uint64_t a2)
{
  return sub_20EFBF590((_QWORD *)(a1 - 24), a2);
}

uint64_t sub_20EFBFD7C(uint64_t a1)
{
  return a1 - 24;
}

uint64_t sub_20EFBFD84(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_20EFBFDEC(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20EFBFE54(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8));
}

uint64_t sub_20EFBFE64(uint64_t a1)
{
  char **v2;
  char *v3;
  char *v4;
  char *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;

  *(_QWORD *)a1 = &off_24C9F3578;
  *(_QWORD *)(a1 + 16) = &unk_24C9F35F0;
  *(_QWORD *)(a1 + 24) = &unk_24C9F3630;
  v2 = *(char ***)(a1 + 144);
  *(_QWORD *)(a1 + 144) = 0;
  if (v2)
  {
    std::mutex::~mutex((std::mutex *)(v2 + 7));
    if (*((_BYTE *)v2 + 48))
    {
      v3 = *v2;
      if (*v2)
      {
        v4 = v2[1];
        v5 = *v2;
        if (v4 != v3)
        {
          do
          {
            v6 = (std::__shared_weak_count *)*((_QWORD *)v4 - 1);
            if (v6)
            {
              p_shared_owners = (unint64_t *)&v6->__shared_owners_;
              do
                v8 = __ldaxr(p_shared_owners);
              while (__stlxr(v8 - 1, p_shared_owners));
              if (!v8)
              {
                ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
                std::__shared_weak_count::__release_weak(v6);
              }
            }
            v4 -= 16;
          }
          while (v4 != v3);
          v5 = *v2;
        }
        v2[1] = v3;
        operator delete(v5);
      }
    }
    MEMORY[0x212BC6398](v2, 0x1022C400958DFA3);
  }
  if (*(_QWORD *)(a1 + 136))
  {
    v9 = *(_QWORD *)(a1 + 120);
    v10 = *(uint64_t **)(a1 + 128);
    v11 = *v10;
    *(_QWORD *)(v11 + 8) = *(_QWORD *)(v9 + 8);
    **(_QWORD **)(v9 + 8) = v11;
    *(_QWORD *)(a1 + 136) = 0;
    if (v10 != (uint64_t *)(a1 + 120))
    {
      do
      {
        v12 = (uint64_t *)v10[1];
        (*(void (**)(uint64_t *))v10[2])(v10 + 2);
        operator delete(v10);
        v10 = v12;
      }
      while (v12 != (uint64_t *)(a1 + 120));
    }
  }
  if (*(_QWORD *)(a1 + 112))
  {
    v13 = *(_QWORD *)(a1 + 96);
    v14 = *(uint64_t **)(a1 + 104);
    v15 = *v14;
    *(_QWORD *)(v15 + 8) = *(_QWORD *)(v13 + 8);
    **(_QWORD **)(v13 + 8) = v15;
    *(_QWORD *)(a1 + 112) = 0;
    if (v14 != (uint64_t *)(a1 + 96))
    {
      do
      {
        v16 = (uint64_t *)v14[1];
        (*(void (**)(uint64_t *))v14[2])(v14 + 2);
        operator delete(v14);
        v14 = v16;
      }
      while (v16 != (uint64_t *)(a1 + 96));
    }
  }
  v17 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 88) = 0;
  if (v17)
    (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  v18 = *(std::__shared_weak_count **)(a1 + 80);
  if (!v18)
    goto LABEL_27;
  v19 = (unint64_t *)&v18->__shared_owners_;
  do
    v20 = __ldaxr(v19);
  while (__stlxr(v20 - 1, v19));
  if (v20)
  {
LABEL_27:
    if ((*(char *)(a1 + 71) & 0x80000000) == 0)
      goto LABEL_29;
    goto LABEL_28;
  }
  ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
  std::__shared_weak_count::__release_weak(v18);
  if (*(char *)(a1 + 71) < 0)
LABEL_28:
    operator delete(*(void **)(a1 + 48));
LABEL_29:
  v21 = *(std::__shared_weak_count **)(a1 + 40);
  if (v21)
    std::__shared_weak_count::__release_weak(v21);
  return a1;
}

void sub_20EFC0078(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9F3768;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_20EFC0088(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9F3768;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC6398);
}

void sub_20EFC00B8(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 32);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

_QWORD *sub_20EFC0114(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  *a1 = &off_24C9F37B8;
  v2 = (std::__shared_weak_count *)a1[4];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = (std::__shared_weak_count *)a1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  return a1;
}

void sub_20EFC0158(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  *a1 = &off_24C9F37B8;
  v2 = (std::__shared_weak_count *)a1[4];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = (std::__shared_weak_count *)a1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20EFC01AC(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;

  result = operator new(0x30uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = &off_24C9F37B8;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = a1[4];
  result[3] = a1[3];
  result[4] = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 16);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  return result;
}

_QWORD *sub_20EFC021C(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;

  v3 = result[1];
  v2 = result[2];
  *a2 = &off_24C9F37B8;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  v6 = result[4];
  a2[3] = result[3];
  a2[4] = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 16);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  return result;
}

void sub_20EFC026C(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  v2 = *(std::__shared_weak_count **)(a1 + 32);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
}

void sub_20EFC02A8(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  v2 = (std::__shared_weak_count *)__p[4];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = (std::__shared_weak_count *)__p[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  operator delete(__p);
}

void sub_20EFC02E0(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  char v21;

  v2 = (std::__shared_weak_count *)a1[4];
  if (!v2)
  {
    v3 = 0;
    v5 = 0;
    v4 = (std::__shared_weak_count *)a1[2];
    if (v4)
      goto LABEL_6;
    goto LABEL_11;
  }
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
  {
    v5 = 0;
    v4 = (std::__shared_weak_count *)a1[2];
    if (v4)
      goto LABEL_6;
LABEL_11:
    v7 = 0;
    v8 = 0;
    goto LABEL_12;
  }
  v4 = (std::__shared_weak_count *)a1[2];
  v5 = a1[3];
  if (!v4)
    goto LABEL_11;
LABEL_6:
  v6 = std::__shared_weak_count::lock(v4);
  v7 = v6;
  if (v6)
  {
    v8 = a1[1];
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
LABEL_12:
    if (!v3)
      goto LABEL_15;
    goto LABEL_13;
  }
  v8 = 0;
  if (!v3)
    goto LABEL_15;
LABEL_13:
  v11 = (unint64_t *)&v3->__shared_owners_;
  do
    v12 = __ldxr(v11);
  while (__stxr(v12 + 1, v11));
LABEL_15:
  if (v8)
  {
    if (v5)
    {
      LOBYTE(v20) = 0;
      v21 = 0;
      sub_20EFC0604((uint64_t *)(v8 + 88), v5, &v20);
      if (v21)
        sub_20EFC0C34(&v20);
    }
  }
  if (v3)
  {
    v13 = (unint64_t *)&v3->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  if (v7)
  {
    v15 = (unint64_t *)&v7->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
    do
      v17 = __ldaxr(v15);
    while (__stlxr(v17 - 1, v15));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  if (v3)
  {
    v18 = (unint64_t *)&v3->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_20EFC04A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;

  if (a10)
    sub_20EFC0C34(&a9);
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  if (v11)
  {
    v15 = (unint64_t *)&v11->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
    do
      v17 = __ldaxr(v15);
    while (__stlxr(v17 - 1, v15));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (v10)
  {
    v18 = (unint64_t *)&v10->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20EFC058C(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__110shared_ptrIKNS_3vio10mapping_io16SubmapSaveBund"
                     "leEEENS7_16SubmapSaveResultENS7_23MappingIONodeGroupErrorESB_Lb0EE25EnqueueMessageAndDispatchIZNKSD"
                     "_4SendERKSA_EUlT_T0_E_EEvSG_SH_EUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__110shared_ptrIKNS_3vio10mapping_io16Sub"
                                "mapSaveBundleEEENS7_16SubmapSaveResultENS7_23MappingIONodeGroupErrorESB_Lb0EE25EnqueueMe"
                                "ssageAndDispatchIZNKSD_4SendERKSA_EUlT_T0_E_EEvSG_SH_EUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__110shared_ptrIKNS_3vio10mapping_io16SubmapSaveBundleEEENS7_16SubmapSaveResultENS7_23MappingIONodeGroupErrorESB_Lb0EE25EnqueueMessageAndDispatchIZNKSD_4SendERKSA_EUlT_T0_E_EEvSG_SH_EUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__110shared_ptrIKNS_3vio10mapping_io16SubmapSaveBundleEEENS7_16SubmapSaveResultENS7_23MappingIONodeGroupErrorESB_Lb0EE25EnqueueMessageAndDispatchIZNKSD_4SendERKSA_EUlT_T0_E_EEvSG_SH_EUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20EFC05F8()
{
  return &unk_24C9F3818;
}

void sub_20EFC0604(uint64_t *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t *i;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  void *v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  std::exception_ptr v16;
  __int128 v17;
  uint64_t v18;
  void *v19;
  char *v20;
  char v21;
  void *__p;
  void *v23;
  char v24;

  v6 = *a1;
  if (!v6)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/ProcessorInputMessageHandlingStrategy.h", 228, (uint64_t)"callable_", 9, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v6 = *a1;
  }
  (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v6 + 16))(&v17, v6, a2);
  for (i = (uint64_t *)a1[2]; i != a1 + 1; i = (uint64_t *)i[1])
    (*(void (**)(uint64_t *, __int128 *))(i[2] + 16))(i + 2, &v17);
  if (*((_BYTE *)a3 + 8))
  {
    v8 = *a3;
    if (!*a3)
      sub_20E96CE78(3u);
    std::mutex::lock((std::mutex *)(v8 + 24));
    if ((*(_BYTE *)(v8 + 136) & 1) != 0
      || (v16.__ptr_ = 0, v9 = *(_QWORD *)(v8 + 16), std::exception_ptr::~exception_ptr(&v16), v9))
    {
      sub_20E96CE78(2u);
    }
    *(_OWORD *)(v8 + 144) = v17;
    *(_QWORD *)(v8 + 160) = v18;
    sub_20EFC0A90((_BYTE *)(v8 + 168), (uint64_t)&v19);
    *(_DWORD *)(v8 + 136) |= 5u;
    std::condition_variable::notify_all((std::condition_variable *)(v8 + 88));
    std::mutex::unlock((std::mutex *)(v8 + 24));
  }
  if (v24)
  {
    if (__p)
    {
      v23 = __p;
      operator delete(__p);
    }
    if (v21)
    {
      v10 = (char *)v19;
      if (v19)
      {
        v11 = v20;
        v12 = v19;
        if (v20 != v19)
        {
          do
          {
            v13 = (std::__shared_weak_count *)*((_QWORD *)v11 - 1);
            if (v13)
            {
              p_shared_owners = (unint64_t *)&v13->__shared_owners_;
              do
                v15 = __ldaxr(p_shared_owners);
              while (__stlxr(v15 - 1, p_shared_owners));
              if (!v15)
              {
                ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
                std::__shared_weak_count::__release_weak(v13);
              }
            }
            v11 -= 16;
          }
          while (v11 != v10);
          v12 = v19;
        }
        v20 = v10;
        operator delete(v12);
      }
    }
  }
}

void sub_20EFC07EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t *a11, uint64_t a12, int a13, __int16 a14, char a15, unsigned __int8 a16, std::exception_ptr a17, char a18)
{
  uint64_t v18;
  uint64_t v19;
  void *v22;
  uint64_t v23;
  uint64_t i;
  uint64_t *v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;

  sub_20EFA4A50((uint64_t)&a18);
  if (a2 == 2)
  {
    v22 = __cxa_begin_catch(a1);
    if (*(_QWORD *)(v19 + 48)
      || !sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/ProcessorInputMessageHandlingStrategy.h", 186, (uint64_t)"!error_downstream_.empty()", 26, (uint64_t)"It is mandated that all errors are handled and enforced by a processor. Add an error handler with AddErrorHandler()", 115, (void (*)(void **))sub_21023DDB0))
    {
      v23 = v19 + 32;
      for (i = *(_QWORD *)(v19 + 40); i != v23; i = *(_QWORD *)(i + 8))
        (*(void (**)(uint64_t, void *))(*(_QWORD *)(i + 16) + 16))(i + 16, v22);
      if (*(_BYTE *)(v18 + 8))
      {
        std::current_exception();
        sub_20EFC0A30(*(std::__assoc_sub_state **)v18, &a17);
        std::exception_ptr::~exception_ptr(&a17);
      }
      __cxa_end_catch();
      JUMPOUT(0x20EFC07B4);
    }
    abort();
  }
  if (a2 == 1)
  {
    v25 = (uint64_t *)__cxa_begin_catch(a1);
    v26 = *v25;
    a10 = *(_QWORD *)(*(_QWORD *)(*v25 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL;
    a9 = (*(uint64_t (**)(void))(v26 + 16))();
    sub_20E9B0CC4("Caught unexpected exception of type: ", (const char *)&a10, "\n", "message: ", (const char *)&a9, "\n");
    if ((a16 & 0x80u) == 0)
      v27 = (uint64_t *)&a11;
    else
      v27 = a11;
    if ((a16 & 0x80u) == 0)
      v28 = a16;
    else
      v28 = a12;
    sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/ProcessorInputMessageHandlingStrategy.h", 140, (uint64_t)"", 0, (uint64_t)v27, v28, (void (*)(void **))sub_21023DDB0);
    abort();
  }
  _Unwind_Resume(a1);
}

void sub_20EFC0A00(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  __cxa_end_catch();
  JUMPOUT(0x20EFC0A20);
}

void sub_20EFC0A30(std::__assoc_sub_state *a1, const std::exception_ptr *a2)
{
  std::exception_ptr v3;
  std::exception_ptr v4;

  if (!a1)
    sub_20E96CE78(3u);
  std::exception_ptr::exception_ptr(&v4, a2);
  v3.__ptr_ = &v4;
  std::__assoc_sub_state::set_exception(a1, v3);
  std::exception_ptr::~exception_ptr(&v4);
}

void sub_20EFC0A7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10)
{
  std::exception_ptr::~exception_ptr(&a10);
  _Unwind_Resume(a1);
}

_BYTE *sub_20EFC0A90(_BYTE *a1, uint64_t a2)
{
  *a1 = 0;
  a1[64] = 0;
  if (*(_BYTE *)(a2 + 64))
  {
    sub_20EF90154((uint64_t)a1, a2);
    a1[64] = 1;
  }
  return a1;
}

void sub_20EFC0AE0(_Unwind_Exception *exception_object)
{
  char **v1;
  char *v3;
  char *v4;
  char *v5;
  char *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  if (*((_BYTE *)v1 + 64))
  {
    v3 = v1[4];
    if (v3)
    {
      v1[5] = v3;
      operator delete(v3);
    }
    if (*((_BYTE *)v1 + 24))
    {
      v4 = *v1;
      if (*v1)
      {
        v5 = v1[1];
        v6 = *v1;
        if (v5 != v4)
        {
          do
          {
            v7 = (std::__shared_weak_count *)*((_QWORD *)v5 - 1);
            if (v7)
            {
              p_shared_owners = (unint64_t *)&v7->__shared_owners_;
              do
                v9 = __ldaxr(p_shared_owners);
              while (__stlxr(v9 - 1, p_shared_owners));
              if (!v9)
              {
                ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
                std::__shared_weak_count::__release_weak(v7);
              }
            }
            v5 -= 16;
          }
          while (v5 != v4);
          v6 = *v1;
        }
        v1[1] = v4;
        operator delete(v6);
      }
    }
  }
  _Unwind_Resume(exception_object);
}

char **sub_20EFC0B7C(char **a1)
{
  char *v2;
  char *v3;
  char *v4;
  char *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;

  if (*((_BYTE *)a1 + 64))
  {
    v2 = a1[4];
    if (v2)
    {
      a1[5] = v2;
      operator delete(v2);
    }
    if (*((_BYTE *)a1 + 24))
    {
      v3 = *a1;
      if (*a1)
      {
        v4 = a1[1];
        v5 = *a1;
        if (v4 != v3)
        {
          do
          {
            v6 = (std::__shared_weak_count *)*((_QWORD *)v4 - 1);
            if (v6)
            {
              p_shared_owners = (unint64_t *)&v6->__shared_owners_;
              do
                v8 = __ldaxr(p_shared_owners);
              while (__stlxr(v8 - 1, p_shared_owners));
              if (!v8)
              {
                ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
                std::__shared_weak_count::__release_weak(v6);
              }
            }
            v4 -= 16;
          }
          while (v4 != v3);
          v5 = *a1;
        }
        a1[1] = v3;
        operator delete(v5);
      }
    }
  }
  return a1;
}

uint64_t *sub_20EFC0C34(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  const std::error_category *v7;
  std::logic_error *exception;
  std::logic_error *v9;
  std::logic_error v10;
  std::logic_error v11;
  std::exception_ptr v12;

  v2 = *a1;
  if (!v2)
    return a1;
  if ((*(_BYTE *)(v2 + 136) & 1) == 0)
  {
    v12.__ptr_ = 0;
    v3 = *(_QWORD *)(v2 + 16);
    std::exception_ptr::~exception_ptr(&v12);
    v2 = *a1;
    if (!v3 && *(uint64_t *)(v2 + 8) >= 1)
    {
      v7 = std::future_category();
      MEMORY[0x212BC5AF8](&v10, 4, v7);
      exception = (std::logic_error *)__cxa_allocate_exception(0x20uLL);
      v9 = std::logic_error::logic_error(exception, &v10);
      v9->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB810] + 16);
      v9[1] = v11;
      __cxa_throw(v9, MEMORY[0x24BEDB6E0], (void (*)(void *))MEMORY[0x24BEDAD80]);
    }
  }
  v4 = (unint64_t *)(v2 + 8);
  do
    v5 = __ldaxr(v4);
  while (__stlxr(v5 - 1, v4));
  if (v5)
    return a1;
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 16))(v2);
  return a1;
}

void sub_20EFC0D20(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__assoc_sub_state *a10, std::logic_error a11)
{
  uint64_t v11;
  std::exception_ptr v12;

  __cxa_begin_catch(a1);
  std::current_exception();
  __cxa_end_catch();
  v12.__ptr_ = (void *)(v11 - 32);
  std::__assoc_sub_state::set_exception(a10, v12);
  std::exception_ptr::~exception_ptr((std::exception_ptr *)(v11 - 32));
  std::logic_error::~logic_error(&a11);
  JUMPOUT(0x20EFC0C7CLL);
}

_QWORD *sub_20EFC0D5C(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;

  *a1 = &off_24C9F3838;
  v2 = (std::__shared_weak_count *)a1[4];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      v5 = (std::__shared_weak_count *)a1[2];
      if (!v5)
        return a1;
      goto LABEL_6;
    }
  }
  v5 = (std::__shared_weak_count *)a1[2];
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
  return a1;
}

void sub_20EFC0DD8(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;

  *a1 = &off_24C9F3838;
  v2 = (std::__shared_weak_count *)a1[4];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)a1[2];
    if (!v5)
      goto LABEL_9;
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[2];
    if (!v5)
      goto LABEL_9;
  }
  std::__shared_weak_count::__release_weak(v5);
LABEL_9:
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20EFC0E64(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;

  result = operator new(0x28uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = &off_24C9F3838;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = a1[4];
  result[3] = a1[3];
  result[4] = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  return result;
}

_QWORD *sub_20EFC0ED4(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;

  v3 = result[1];
  v2 = result[2];
  *a2 = &off_24C9F3838;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  v6 = result[4];
  a2[3] = result[3];
  a2[4] = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  return result;
}

void sub_20EFC0F24(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;

  v2 = *(std::__shared_weak_count **)(a1 + 32);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    v5 = *(std::__shared_weak_count **)(a1 + 16);
    if (!v5)
      return;
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  v5 = *(std::__shared_weak_count **)(a1 + 16);
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
}

void sub_20EFC0F94(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;

  v2 = (std::__shared_weak_count *)__p[4];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      v5 = (std::__shared_weak_count *)__p[2];
      if (!v5)
        goto LABEL_7;
      goto LABEL_6;
    }
  }
  v5 = (std::__shared_weak_count *)__p[2];
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
LABEL_7:
  operator delete(__p);
}

void sub_20EFC1004(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v8;
  char v9;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 8);
      if (v5)
      {
        LOBYTE(v8) = 0;
        v9 = 0;
        sub_20EFC0604((uint64_t *)(v5 + 88), a1 + 24, &v8);
        if (v9)
          sub_20EFC0C34(&v8);
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_20EFC10AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v13;

  if (a10)
    sub_20EFC0C34(&a9);
  p_shared_owners = (unint64_t *)&v10->__shared_owners_;
  do
    v13 = __ldaxr(p_shared_owners);
  while (__stlxr(v13 - 1, p_shared_owners));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20EFC10F8(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__110shared_ptrIKNS_3vio10mapping_io16SubmapSaveBund"
                     "leEEENS7_16SubmapSaveResultENS7_23MappingIONodeGroupErrorESB_Lb0EE4SendERKSA_EUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__110shared_ptrIKNS_3vio10mapping_io16Sub"
                                "mapSaveBundleEEENS7_16SubmapSaveResultENS7_23MappingIONodeGroupErrorESB_Lb0EE4SendERKSA_EUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__110shared_ptrIKNS_3vio10mapping_io16SubmapSaveBundleEEENS7_16SubmapSaveResultENS7_23MappingIONodeGroupErrorESB_Lb0EE4SendERKSA_EUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__110shared_ptrIKNS_3vio10mapping_io16SubmapSaveBundleEEENS7_16SubmapSaveResultENS7_23MappingIONodeGroupErrorESB_Lb0EE4SendERKSA_EUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20EFC1164()
{
  return &unk_24C9F3898;
}

void sub_20EFC1170(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9F38B8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_20EFC1180(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9F38B8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC6398);
}

uint64_t *sub_20EFC11B0(uint64_t a1)
{
  return sub_20EFC0C34((uint64_t *)(a1 + 24));
}

_QWORD *sub_20EFC11BC(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;

  *a1 = &off_24C9F3908;
  v2 = (std::__shared_weak_count *)a1[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
      goto LABEL_7;
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  v5 = (std::__shared_weak_count *)a1[4];
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
LABEL_7:
  v6 = (std::__shared_weak_count *)a1[2];
  if (v6)
    std::__shared_weak_count::__release_weak(v6);
  return a1;
}

void sub_20EFC1244(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;

  *a1 = &off_24C9F3908;
  v2 = (std::__shared_weak_count *)a1[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
    {
LABEL_7:
      v6 = (std::__shared_weak_count *)a1[2];
      if (v6)
        std::__shared_weak_count::__release_weak(v6);
      JUMPOUT(0x212BC6398);
    }
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
      goto LABEL_7;
  }
  std::__shared_weak_count::__release_weak(v5);
  goto LABEL_7;
}

_QWORD *sub_20EFC12DC(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;

  result = operator new(0x38uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = &off_24C9F3908;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = a1[4];
  result[3] = a1[3];
  result[4] = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 16);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  v10 = a1[6];
  result[5] = a1[5];
  result[6] = v10;
  if (v10)
  {
    v11 = (unint64_t *)(v10 + 8);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  return result;
}

_QWORD *sub_20EFC136C(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;

  v3 = result[1];
  v2 = result[2];
  *a2 = &off_24C9F3908;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  v6 = result[4];
  a2[3] = result[3];
  a2[4] = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 16);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  v9 = result[6];
  a2[5] = result[5];
  a2[6] = v9;
  if (v9)
  {
    v10 = (unint64_t *)(v9 + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  return result;
}

void sub_20EFC13DC(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;

  v2 = (std::__shared_weak_count *)a1[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
      goto LABEL_7;
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  v5 = (std::__shared_weak_count *)a1[4];
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
LABEL_7:
  v6 = (std::__shared_weak_count *)a1[2];
  if (v6)
    std::__shared_weak_count::__release_weak(v6);
}

void sub_20EFC145C(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;

  v2 = (std::__shared_weak_count *)__p[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)__p[4];
    if (!v5)
      goto LABEL_7;
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  v5 = (std::__shared_weak_count *)__p[4];
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
LABEL_7:
  v6 = (std::__shared_weak_count *)__p[2];
  if (v6)
    std::__shared_weak_count::__release_weak(v6);
  operator delete(__p);
}

void sub_20EFC14D8(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t *v13;
  std::runtime_error_vtbl **v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  std::runtime_error *exception;
  std::runtime_error *v23;
  std::runtime_error *v24;
  std::runtime_error *v25;
  std::runtime_error v26;
  std::runtime_error v27;

  v2 = (std::__shared_weak_count *)a1[4];
  if (!v2)
  {
    v3 = 0;
    v5 = 0;
    v4 = (std::__shared_weak_count *)a1[2];
    if (v4)
      goto LABEL_6;
LABEL_11:
    v7 = 0;
    v8 = 0;
    goto LABEL_12;
  }
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
  {
    v5 = 0;
    v4 = (std::__shared_weak_count *)a1[2];
    if (v4)
      goto LABEL_6;
    goto LABEL_11;
  }
  v4 = (std::__shared_weak_count *)a1[2];
  v5 = a1[3];
  if (!v4)
    goto LABEL_11;
LABEL_6:
  v6 = std::__shared_weak_count::lock(v4);
  v7 = v6;
  if (!v6)
  {
    v8 = 0;
    if (!v3)
      goto LABEL_15;
    goto LABEL_13;
  }
  v8 = a1[1];
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  do
    v10 = __ldxr(p_shared_owners);
  while (__stxr(v10 + 1, p_shared_owners));
LABEL_12:
  if (!v3)
    goto LABEL_15;
LABEL_13:
  v11 = (unint64_t *)&v3->__shared_owners_;
  do
    v12 = __ldxr(v11);
  while (__stxr(v12 + 1, v11));
LABEL_15:
  if (!v8)
  {
    std::runtime_error::runtime_error(&v27, "Processor is no longer available.");
    v27.__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v23 = std::runtime_error::runtime_error(exception, &v27);
    v23->__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    __cxa_throw(v23, (struct type_info *)&unk_24CA1E2D0, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  if (!v5)
  {
    std::runtime_error::runtime_error(&v26, "Message was dropped.");
    v26.__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    v24 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v25 = std::runtime_error::runtime_error(v24, &v26);
    v25->__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    __cxa_throw(v25, (struct type_info *)&unk_24CA1E2D0, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  v13 = (uint64_t *)(v8 + 88);
  v14 = (std::runtime_error_vtbl **)a1[5];
  v26.__vftable = *v14;
  *v14 = 0;
  LOBYTE(v26.__imp_.__imp_) = 1;
  sub_20EFC0604(v13, v5, (uint64_t *)&v26);
  if (LOBYTE(v26.__imp_.__imp_))
    sub_20EFC0C34((uint64_t *)&v26);
  if (v3)
  {
    v15 = (unint64_t *)&v3->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  if (v7)
  {
    v17 = (unint64_t *)&v7->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
    do
      v19 = __ldaxr(v17);
    while (__stlxr(v19 - 1, v17));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  if (v3)
  {
    v20 = (unint64_t *)&v3->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_20EFC17B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10, uint64_t a11, uint64_t a12, std::runtime_error a13, std::exception_ptr a14)
{
  std::__shared_weak_count *v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;

  std::exception_ptr::~exception_ptr(&a14);
  std::runtime_error::~runtime_error(&a13);
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v18 = __ldaxr(p_shared_owners);
    while (__stlxr(v18 - 1, p_shared_owners));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  if (v15)
  {
    v19 = (unint64_t *)&v15->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
    do
      v21 = __ldaxr(v19);
    while (__stlxr(v21 - 1, v19));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  if (v14)
  {
    v22 = (unint64_t *)&v14->__shared_owners_;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  _Unwind_Resume(a1);
}

void sub_20EFC17E0(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::runtime_error a10, std::exception_ptr a11, uint64_t a12, uint64_t a13, uint64_t a14, std::exception_ptr a15)
{
  uint64_t v15;
  std::__assoc_sub_state **v16;
  std::__assoc_sub_state *v17;
  std::exception_ptr v18;

  __cxa_begin_catch(a1);
  std::current_exception();
  __cxa_end_catch();
  v17 = *v16;
  if (v17)
  {
    std::exception_ptr::exception_ptr(&a15, &a11);
    v18.__ptr_ = &a15;
    std::__assoc_sub_state::set_exception(v17, v18);
    std::exception_ptr::~exception_ptr(&a15);
    std::exception_ptr::~exception_ptr(&a11);
    std::runtime_error::~runtime_error(&a10);
    if (!v15)
      JUMPOUT(0x20EFC15ECLL);
    JUMPOUT(0x20EFC15BCLL);
  }
  sub_20E96CE78(3u);
}

void sub_20EFC183C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::runtime_error a10, std::exception_ptr a11, uint64_t a12, uint64_t a13, uint64_t a14, std::exception_ptr a15)
{
  std::__shared_weak_count *v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t *v23;
  unint64_t v24;

  std::exception_ptr::~exception_ptr(&a11);
  std::runtime_error::~runtime_error(&a10);
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v19 = __ldaxr(p_shared_owners);
    while (__stlxr(v19 - 1, p_shared_owners));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  if (v16)
  {
    v20 = (unint64_t *)&v16->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
    do
      v22 = __ldaxr(v20);
    while (__stlxr(v22 - 1, v20));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  if (v15)
  {
    v23 = (unint64_t *)&v15->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  _Unwind_Resume(a1);
}

void sub_20EFC1868(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;

  if (a11)
    sub_20EFC0C34(&a10);
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v15 = __ldaxr(p_shared_owners);
    while (__stlxr(v15 - 1, p_shared_owners));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (v12)
  {
    v16 = (unint64_t *)&v12->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
    do
      v18 = __ldaxr(v16);
    while (__stlxr(v18 - 1, v16));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (v11)
  {
    v19 = (unint64_t *)&v11->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  _Unwind_Resume(a1);
}

uint64_t sub_20EFC1954(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__110shared_ptrIKNS_3vio10mapping_io16SubmapSaveBund"
                     "leEEENS7_16SubmapSaveResultENS7_23MappingIONodeGroupErrorESB_Lb0EE25EnqueueMessageAndDispatchIZNKSD"
                     "_7ProcessERKSA_NS4_7promiseISB_EEEUlT_T0_E_EEvSG_SJ_EUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__110shared_ptrIKNS_3vio10mapping_io16Sub"
                                "mapSaveBundleEEENS7_16SubmapSaveResultENS7_23MappingIONodeGroupErrorESB_Lb0EE25EnqueueMe"
                                "ssageAndDispatchIZNKSD_7ProcessERKSA_NS4_7promiseISB_EEEUlT_T0_E_EEvSG_SJ_EUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__110shared_ptrIKNS_3vio10mapping_io16SubmapSaveBundleEEENS7_16SubmapSaveResultENS7_23MappingIONodeGroupErrorESB_Lb0EE25EnqueueMessageAndDispatchIZNKSD_7ProcessERKSA_NS4_7promiseISB_EEEUlT_T0_E_EEvSG_SJ_EUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__110shared_ptrIKNS_3vio10mapping_io16SubmapSaveBundleEEENS7_16SubmapSaveResultENS7_23MappingIONodeGroupErrorESB_Lb0EE25EnqueueMessageAndDispatchIZNKSD_7ProcessERKSA_NS4_7promiseISB_EEEUlT_T0_E_EEvSG_SJ_EUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20EFC19C0()
{
  return &unk_24C9F3968;
}

_QWORD *sub_20EFC19CC(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;

  *a1 = &off_24C9F3988;
  v2 = (std::__shared_weak_count *)a1[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
      goto LABEL_11;
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
      goto LABEL_11;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_11:
  v8 = (std::__shared_weak_count *)a1[2];
  if (v8)
    std::__shared_weak_count::__release_weak(v8);
  return a1;
}

void sub_20EFC1A80(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;

  *a1 = &off_24C9F3988;
  v2 = (std::__shared_weak_count *)a1[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
      goto LABEL_11;
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
      goto LABEL_11;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_11:
  v8 = (std::__shared_weak_count *)a1[2];
  if (v8)
    std::__shared_weak_count::__release_weak(v8);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20EFC1B44(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;

  result = operator new(0x38uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = &off_24C9F3988;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = a1[4];
  result[3] = a1[3];
  result[4] = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  v10 = a1[6];
  result[5] = a1[5];
  result[6] = v10;
  if (v10)
  {
    v11 = (unint64_t *)(v10 + 8);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  return result;
}

_QWORD *sub_20EFC1BD4(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;

  v3 = result[1];
  v2 = result[2];
  *a2 = &off_24C9F3988;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  v6 = result[4];
  a2[3] = result[3];
  a2[4] = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  v9 = result[6];
  a2[5] = result[5];
  a2[6] = v9;
  if (v9)
  {
    v10 = (unint64_t *)(v9 + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  return result;
}

void sub_20EFC1C44(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;

  v2 = (std::__shared_weak_count *)a1[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
      goto LABEL_11;
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
      goto LABEL_11;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_11:
  v8 = (std::__shared_weak_count *)a1[2];
  if (v8)
    std::__shared_weak_count::__release_weak(v8);
}

void sub_20EFC1CF0(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;

  v2 = (std::__shared_weak_count *)__p[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)__p[4];
    if (!v5)
      goto LABEL_11;
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)__p[4];
    if (!v5)
      goto LABEL_11;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_11:
  v8 = (std::__shared_weak_count *)__p[2];
  if (v8)
    std::__shared_weak_count::__release_weak(v8);
  operator delete(__p);
}

void sub_20EFC1D98(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  uint64_t v4;
  std::runtime_error_vtbl **v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::runtime_error *exception;
  std::runtime_error *v9;
  std::runtime_error v10;

  v2 = (std::__shared_weak_count *)a1[2];
  if (!v2 || (v3 = std::__shared_weak_count::lock(v2)) == 0 || (v4 = a1[1]) == 0)
  {
    std::runtime_error::runtime_error(&v10, "Invalid operation. Processor is released.");
    v10.__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v9 = std::runtime_error::runtime_error(exception, &v10);
    v9->__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    __cxa_throw(v9, (struct type_info *)&unk_24CA1E2D0, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  v5 = (std::runtime_error_vtbl **)a1[5];
  v10.__vftable = *v5;
  *v5 = 0;
  LOBYTE(v10.__imp_.__imp_) = 1;
  sub_20EFC0604((uint64_t *)(v4 + 88), (uint64_t)(a1 + 3), (uint64_t *)&v10);
  if (LOBYTE(v10.__imp_.__imp_))
    sub_20EFC0C34((uint64_t *)&v10);
  p_shared_owners = (unint64_t *)&v3->__shared_owners_;
  do
    v7 = __ldaxr(p_shared_owners);
  while (__stlxr(v7 - 1, p_shared_owners));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
}

void sub_20EFC1EA8(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::runtime_error a10, std::exception_ptr a11)
{
  __break(1u);
}

void sub_20EFC1F20(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::runtime_error a10, std::exception_ptr a11)
{
  uint64_t v11;

  std::exception_ptr::~exception_ptr((std::exception_ptr *)&a9);
  std::runtime_error::~runtime_error(&a10);
  if (v11)
    JUMPOUT(0x20EFC1F54);
  JUMPOUT(0x20EFC1F84);
}

uint64_t sub_20EFC1F8C(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__110shared_ptrIKNS_3vio10mapping_io16SubmapSaveBund"
                     "leEEENS7_16SubmapSaveResultENS7_23MappingIONodeGroupErrorESB_Lb0EE7ProcessERKSA_NS4_7promiseISB_EEEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__110shared_ptrIKNS_3vio10mapping_io16Sub"
                                "mapSaveBundleEEENS7_16SubmapSaveResultENS7_23MappingIONodeGroupErrorESB_Lb0EE7ProcessERK"
                                "SA_NS4_7promiseISB_EEEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__110shared_ptrIKNS_3vio10mapping_io16SubmapSaveBundleEEENS7_16SubmapSaveResultENS7_23MappingIONodeGroupErrorESB_Lb0EE7ProcessERKSA_NS4_7promiseISB_EEEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__110shared_ptrIKNS_3vio10mapping_io16SubmapSaveBundleEEENS7_16SubmapSaveResultENS7_23MappingIONodeGroupErrorESB_Lb0EE7ProcessERKSA_NS4_7promiseISB_EEEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20EFC1FF8()
{
  return &unk_24C9F39E8;
}

_QWORD *sub_20EFC2004(_QWORD *a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;

  *a1 = &off_24C9F3A08;
  v2 = a1[4];
  a1[3] = &off_24C9F2CC8;
  a1[4] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = (std::__shared_weak_count *)a1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  return a1;
}

void sub_20EFC205C(_QWORD *a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;

  *a1 = &off_24C9F3A08;
  v2 = a1[4];
  a1[3] = &off_24C9F2CC8;
  a1[4] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = (std::__shared_weak_count *)a1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20EFC20C4(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;

  v2 = operator new(0x28uLL);
  v3 = v2;
  v5 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  *v2 = &off_24C9F3A08;
  v2[1] = v5;
  v2[2] = v4;
  if (v4)
  {
    v6 = (unint64_t *)(v4 + 16);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  v2[3] = &off_24C9F2CC8;
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32));
  return v3;
}

void sub_20EFC213C(_Unwind_Exception *a1)
{
  _QWORD *v1;
  std::__shared_weak_count *v3;

  v3 = (std::__shared_weak_count *)v1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20EFC215C(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  *a2 = &off_24C9F3A08;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  a2[3] = &off_24C9F2CC8;
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32));
}

void sub_20EFC21C4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  std::__shared_weak_count *v3;

  v3 = *(std::__shared_weak_count **)(v1 + 16);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  _Unwind_Resume(exception_object);
}

void sub_20EFC21DC(_QWORD *a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;

  v2 = a1[4];
  a1[3] = &off_24C9F2CC8;
  a1[4] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = (std::__shared_weak_count *)a1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
}

void sub_20EFC222C(_QWORD *__p)
{
  uint64_t v2;
  std::__shared_weak_count *v3;

  v2 = __p[4];
  __p[3] = &off_24C9F2CC8;
  __p[4] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = (std::__shared_weak_count *)__p[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  operator delete(__p);
}

void sub_20EFC2278(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;

  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = a1[1];
      if (v5)
      {
        v6 = operator new(0x20uLL);
        v7 = a1[4];
        a1[4] = 0;
        v6[2] = &off_24C9F2CC8;
        v6[3] = v7;
        v9 = *(_QWORD *)(v5 + 96);
        v8 = (_QWORD *)(v5 + 96);
        *v6 = v9;
        v6[1] = v8;
        *(_QWORD *)(v9 + 8) = v6;
        *v8 = v6;
        ++v8[2];
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v11 = __ldaxr(p_shared_owners);
      while (__stlxr(v11 - 1, p_shared_owners));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_20EFC232C(_Unwind_Exception *exception_object)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v4;

  p_shared_owners = (unint64_t *)&v1->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20EFC2368(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3kit11concurrency6detail9ProcessorINSt3__110shared_ptrIKNS_3vio10mapping_io16SubmapSaveBundl"
                     "eEEENS7_16SubmapSaveResultENS7_23MappingIONodeGroupErrorESB_Lb0EE9SubscribeENS1_12ChannelInputISB_EEEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4cv3d3kit11concurrency6detail9ProcessorINSt3__110shared_ptrIKNS_3vio10mapping_io16Subm"
                                "apSaveBundleEEENS7_16SubmapSaveResultENS7_23MappingIONodeGroupErrorESB_Lb0EE9SubscribeEN"
                                "S1_12ChannelInputISB_EEEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3kit11concurrency6detail9ProcessorINSt3__110shared_ptrIKNS_3vio10mapping_io16SubmapSaveBundleEEENS7_16SubmapSaveResultENS7_23MappingIONodeGroupErrorESB_Lb0EE9SubscribeENS1_12ChannelInputISB_EEEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3kit11concurrency6detail9ProcessorINSt3__110shared_ptrIKNS_3vio10mapping_io16SubmapSaveBundleEEENS7_16SubmapSaveResultENS7_23MappingIONodeGroupErrorESB_Lb0EE9SubscribeENS1_12ChannelInputISB_EEEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20EFC23D4()
{
  return &unk_24C9F3A68;
}

_QWORD *sub_20EFC23E0(_QWORD *a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;

  *a1 = &off_24C9F3A88;
  v2 = a1[4];
  a1[3] = &off_24C9B46A0;
  a1[4] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = (std::__shared_weak_count *)a1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  return a1;
}

void sub_20EFC2438(_QWORD *a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;

  *a1 = &off_24C9F3A88;
  v2 = a1[4];
  a1[3] = &off_24C9B46A0;
  a1[4] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = (std::__shared_weak_count *)a1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20EFC24A0(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;

  v2 = operator new(0x28uLL);
  v3 = v2;
  v5 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  *v2 = &off_24C9F3A88;
  v2[1] = v5;
  v2[2] = v4;
  if (v4)
  {
    v6 = (unint64_t *)(v4 + 16);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  v2[3] = &off_24C9B46A0;
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32));
  return v3;
}

void sub_20EFC2518(_Unwind_Exception *a1)
{
  _QWORD *v1;
  std::__shared_weak_count *v3;

  v3 = (std::__shared_weak_count *)v1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20EFC2538(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  *a2 = &off_24C9F3A88;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  a2[3] = &off_24C9B46A0;
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32));
}

void sub_20EFC25A0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  std::__shared_weak_count *v3;

  v3 = *(std::__shared_weak_count **)(v1 + 16);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  _Unwind_Resume(exception_object);
}

void sub_20EFC25B8(_QWORD *a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;

  v2 = a1[4];
  a1[3] = &off_24C9B46A0;
  a1[4] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = (std::__shared_weak_count *)a1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
}

void sub_20EFC2608(_QWORD *__p)
{
  uint64_t v2;
  std::__shared_weak_count *v3;

  v2 = __p[4];
  __p[3] = &off_24C9B46A0;
  __p[4] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = (std::__shared_weak_count *)__p[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  operator delete(__p);
}

void sub_20EFC2654(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;

  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = a1[1];
      if (v5)
      {
        v6 = operator new(0x20uLL);
        v7 = a1[4];
        a1[4] = 0;
        v6[2] = &off_24C9B46A0;
        v6[3] = v7;
        v9 = *(_QWORD *)(v5 + 120);
        v8 = (_QWORD *)(v5 + 120);
        *v6 = v9;
        v6[1] = v8;
        *(_QWORD *)(v9 + 8) = v6;
        *v8 = v6;
        ++v8[2];
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v11 = __ldaxr(p_shared_owners);
      while (__stlxr(v11 - 1, p_shared_owners));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_20EFC2708(_Unwind_Exception *exception_object)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v4;

  p_shared_owners = (unint64_t *)&v1->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20EFC2744(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3kit11concurrency6detail9ProcessorINSt3__110shared_ptrIKNS_3vio10mapping_io16SubmapSaveBundl"
                     "eEEENS7_16SubmapSaveResultENS7_23MappingIONodeGroupErrorESB_Lb0EE15AddErrorHandlerENS1_12ChannelInputISC_EEEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4cv3d3kit11concurrency6detail9ProcessorINSt3__110shared_ptrIKNS_3vio10mapping_io16Subm"
                                "apSaveBundleEEENS7_16SubmapSaveResultENS7_23MappingIONodeGroupErrorESB_Lb0EE15AddErrorHa"
                                "ndlerENS1_12ChannelInputISC_EEEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3kit11concurrency6detail9ProcessorINSt3__110shared_ptrIKNS_3vio10mapping_io16SubmapSaveBundleEEENS7_16SubmapSaveResultENS7_23MappingIONodeGroupErrorESB_Lb0EE15AddErrorHandlerENS1_12ChannelInputISC_EEEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3kit11concurrency6detail9ProcessorINSt3__110shared_ptrIKNS_3vio10mapping_io16SubmapSaveBundleEEENS7_16SubmapSaveResultENS7_23MappingIONodeGroupErrorESB_Lb0EE15AddErrorHandlerENS1_12ChannelInputISC_EEEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20EFC27B0()
{
  return &unk_24C9F3AE8;
}

_QWORD *sub_20EFC27BC(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_24C9F3B08;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_20EFC27F4(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_24C9F3B08;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20EFC283C(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x20uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = &off_24C9F3B08;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  result[3] = a1[3];
  return result;
}

_QWORD *sub_20EFC2894(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = result[1];
  v2 = result[2];
  *a2 = &off_24C9F3B08;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  a2[3] = result[3];
  return result;
}

void sub_20EFC28CC(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void sub_20EFC28DC(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void sub_20EFC2908(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  uint64_t *v6;
  unint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p[2];
  char *v16;
  __int128 v17;
  char *v18;
  uint64_t v19;
  __int128 *v20;

  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = a1[1];
      if (!v5)
      {
LABEL_11:
        p_shared_owners = (unint64_t *)&v4->__shared_owners_;
        do
          v14 = __ldaxr(p_shared_owners);
        while (__stlxr(v14 - 1, p_shared_owners));
        if (!v14)
        {
          ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
          std::__shared_weak_count::__release_weak(v4);
        }
        return;
      }
      v6 = (uint64_t *)a1[3];
      v7 = *(_QWORD *)(v5 + 112);
      v18 = 0;
      v17 = 0uLL;
      if (v7)
      {
        if (v7 >> 61)
          sub_20E92CED8();
        v8 = (char *)operator new(8 * v7);
        v9 = &v8[8 * v7];
        *(_QWORD *)&v17 = v8;
        *((_QWORD *)&v17 + 1) = v8;
        v18 = v9;
        v10 = v5 + 96;
        v11 = *(_QWORD *)(v5 + 104);
        v20 = &v17;
        if (v11 != v10)
        {
          do
          {
LABEL_7:
            v19 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v11 + 24) + 48))(*(_QWORD *)(v11 + 24));
            sub_20E9B2D04((uint64_t *)&v20, &v19);
            v11 = *(_QWORD *)(v11 + 8);
          }
          while (v11 != v10);
          *(_OWORD *)__p = v17;
          v16 = v18;
          v12 = *v6;
          if (*v6)
            goto LABEL_9;
          goto LABEL_18;
        }
      }
      else
      {
        v9 = 0;
        v8 = 0;
        v10 = v5 + 96;
        v11 = *(_QWORD *)(v5 + 104);
        v20 = &v17;
        if (v11 != v10)
          goto LABEL_7;
      }
      *(int64x2_t *)__p = vdupq_n_s64((unint64_t)v8);
      v16 = v9;
      v12 = *v6;
      if (*v6)
      {
LABEL_9:
        sub_20EA04C5C(v12, (uint64_t)__p);
        if (__p[0])
        {
          __p[1] = __p[0];
          operator delete(__p[0]);
        }
        goto LABEL_11;
      }
LABEL_18:
      sub_20E96CE78(3u);
    }
  }
}

void sub_20EFC2A84(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v17;

  if (__p)
    operator delete(__p);
  p_shared_owners = (unint64_t *)&v14->__shared_owners_;
  do
    v17 = __ldaxr(p_shared_owners);
  while (__stlxr(v17 - 1, p_shared_owners));
  if (!v17)
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20EFC2AF4(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__110shared_ptrIKNS_3vio10mapping_io16SubmapSaveBund"
                     "leEEENS7_16SubmapSaveResultENS7_23MappingIONodeGroupErrorESB_Lb0EE16OutputHandlerIDsEvEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__110shared_ptrIKNS_3vio10mapping_io16Sub"
                                "mapSaveBundleEEENS7_16SubmapSaveResultENS7_23MappingIONodeGroupErrorESB_Lb0EE16OutputHandlerIDsEvEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__110shared_ptrIKNS_3vio10mapping_io16SubmapSaveBundleEEENS7_16SubmapSaveResultENS7_23MappingIONodeGroupErrorESB_Lb0EE16OutputHandlerIDsEvEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__110shared_ptrIKNS_3vio10mapping_io16SubmapSaveBundleEEENS7_16SubmapSaveResultENS7_23MappingIONodeGroupErrorESB_Lb0EE16OutputHandlerIDsEvEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20EFC2B60()
{
  return &unk_24C9F3B68;
}

_QWORD *sub_20EFC2B6C(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_24C9F3B88;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_20EFC2BA4(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_24C9F3B88;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20EFC2BEC(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x20uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = &off_24C9F3B88;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  result[3] = a1[3];
  return result;
}

_QWORD *sub_20EFC2C44(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = result[1];
  v2 = result[2];
  *a2 = &off_24C9F3B88;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  a2[3] = result[3];
  return result;
}

void sub_20EFC2C7C(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void sub_20EFC2C8C(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void sub_20EFC2CB8(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  uint64_t *v6;
  unint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p[2];
  char *v16;
  __int128 v17;
  char *v18;
  uint64_t v19;
  __int128 *v20;

  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = a1[1];
      if (!v5)
      {
LABEL_11:
        p_shared_owners = (unint64_t *)&v4->__shared_owners_;
        do
          v14 = __ldaxr(p_shared_owners);
        while (__stlxr(v14 - 1, p_shared_owners));
        if (!v14)
        {
          ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
          std::__shared_weak_count::__release_weak(v4);
        }
        return;
      }
      v6 = (uint64_t *)a1[3];
      v7 = *(_QWORD *)(v5 + 136);
      v18 = 0;
      v17 = 0uLL;
      if (v7)
      {
        if (v7 >> 61)
          sub_20E92CED8();
        v8 = (char *)operator new(8 * v7);
        v9 = &v8[8 * v7];
        *(_QWORD *)&v17 = v8;
        *((_QWORD *)&v17 + 1) = v8;
        v18 = v9;
        v10 = v5 + 120;
        v11 = *(_QWORD *)(v5 + 128);
        v20 = &v17;
        if (v11 != v10)
        {
          do
          {
LABEL_7:
            v19 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v11 + 24) + 48))(*(_QWORD *)(v11 + 24));
            sub_20E9B2D04((uint64_t *)&v20, &v19);
            v11 = *(_QWORD *)(v11 + 8);
          }
          while (v11 != v10);
          *(_OWORD *)__p = v17;
          v16 = v18;
          v12 = *v6;
          if (*v6)
            goto LABEL_9;
          goto LABEL_18;
        }
      }
      else
      {
        v9 = 0;
        v8 = 0;
        v10 = v5 + 120;
        v11 = *(_QWORD *)(v5 + 128);
        v20 = &v17;
        if (v11 != v10)
          goto LABEL_7;
      }
      *(int64x2_t *)__p = vdupq_n_s64((unint64_t)v8);
      v16 = v9;
      v12 = *v6;
      if (*v6)
      {
LABEL_9:
        sub_20EA04C5C(v12, (uint64_t)__p);
        if (__p[0])
        {
          __p[1] = __p[0];
          operator delete(__p[0]);
        }
        goto LABEL_11;
      }
LABEL_18:
      sub_20E96CE78(3u);
    }
  }
}

void sub_20EFC2E34(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v17;

  if (__p)
    operator delete(__p);
  p_shared_owners = (unint64_t *)&v14->__shared_owners_;
  do
    v17 = __ldaxr(p_shared_owners);
  while (__stlxr(v17 - 1, p_shared_owners));
  if (!v17)
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20EFC2EA4(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__110shared_ptrIKNS_3vio10mapping_io16SubmapSaveBund"
                     "leEEENS7_16SubmapSaveResultENS7_23MappingIONodeGroupErrorESB_Lb0EE15ErrorHandlerIDsEvEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__110shared_ptrIKNS_3vio10mapping_io16Sub"
                                "mapSaveBundleEEENS7_16SubmapSaveResultENS7_23MappingIONodeGroupErrorESB_Lb0EE15ErrorHandlerIDsEvEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__110shared_ptrIKNS_3vio10mapping_io16SubmapSaveBundleEEENS7_16SubmapSaveResultENS7_23MappingIONodeGroupErrorESB_Lb0EE15ErrorHandlerIDsEvEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__110shared_ptrIKNS_3vio10mapping_io16SubmapSaveBundleEEENS7_16SubmapSaveResultENS7_23MappingIONodeGroupErrorESB_Lb0EE15ErrorHandlerIDsEvEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20EFC2F10()
{
  return &unk_24C9F3BE8;
}

void sub_20EFC2F20(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20EFC2F44(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t sub_20EFC2F5C(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail9ProcessorINS0_IKNS1_3vio10mapping_io16SubmapSave"
                     "BundleEEENS7_16SubmapSaveResultENS7_23MappingIONodeGroupErrorESB_Lb0EEEE27__shared_ptr_default_deleteISD_SD_EE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail9ProcessorINS0_IKNS1_3vio10mapping_io1"
                                "6SubmapSaveBundleEEENS7_16SubmapSaveResultENS7_23MappingIONodeGroupErrorESB_Lb0EEEE27__s"
                                "hared_ptr_default_deleteISD_SD_EE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail9ProcessorINS0_IKNS1_3vio10mapping_io16SubmapSaveBundleEEENS7_16SubmapSaveResultENS7_23MappingIONodeGroupErrorESB_Lb0EEEE27__shared_ptr_default_deleteISD_SD_EE"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail9ProcessorINS0_IKNS1_3vio10mapping_io16SubmapSaveBundleEEENS7_16SubmapSaveResultENS7_23MappingIONodeGroupErrorESB_Lb0EEEE27__shared_ptr_default_deleteISD_SD_EE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

void sub_20EFC2FD0(uint64_t a1)
{
  sub_20EFC4908(a1);
  JUMPOUT(0x212BC6398);
}

void sub_20EFC2FF4(_QWORD *a1, std::__shared_weak_count_vtbl **a2)
{
  uint64_t *v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  uint64_t v8;
  _QWORD *v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t *p_shared_weak_owners;
  unint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  unint64_t v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  std::mutex **v28;
  uint64_t **v29;
  std::__shared_weak_count *v30;
  std::__shared_weak_count *v31;
  std::__shared_weak_count *v32;
  uint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  unint64_t *v36;
  unint64_t v37;
  uint64_t **v38;
  std::__shared_weak_count *v39;
  std::__shared_weak_count *v40;
  std::__shared_weak_count *v41;
  uint64_t v42;
  unint64_t *v43;
  unint64_t v44;
  unint64_t *v45;
  unint64_t v46;
  char *v47;
  _QWORD *v48;
  uint64_t v49;
  unint64_t *v50;
  unint64_t v51;
  std::__shared_weak_count_vtbl *v52;
  std::__shared_weak_count_vtbl *v53;
  unint64_t *v54;
  unint64_t v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  __int128 *v60;
  uint64_t v61;
  __int128 v62;
  std::__shared_weak_count *v63;
  __int128 v64;
  uint64_t v65;
  __int128 *v66;
  _BYTE v67[24];
  _BYTE *v68;
  uint64_t v69;

  v69 = *MEMORY[0x24BDAC8D0];
  if (!(*(unsigned int (**)(_QWORD *))(*a1 + 48))(a1))
    return;
  if (!a1[9]
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 234, (uint64_t)"scheduler_", 10, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v4 = (uint64_t *)a1[18];
  if (v4)
  {
    v5 = (std::__shared_weak_count *)operator new(0x28uLL);
    v6 = v5;
    v5->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    v5->__shared_weak_owners_ = 0;
    v5->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9F3E48;
    v8 = (uint64_t)a2[1];
    v5[1].__vftable = *a2;
    v9 = &v5[1].__vftable;
    v5[1].__shared_owners_ = v8;
    if (v8)
    {
      v10 = (unint64_t *)(v8 + 8);
      do
        v11 = __ldxr(v10);
      while (__stxr(v11 + 1, v10));
      v4 = (uint64_t *)a1[18];
    }
    v63 = v5;
    p_shared_weak_owners = (unint64_t *)&v5->__shared_weak_owners_;
    do
      v13 = __ldxr(p_shared_weak_owners);
    while (__stxr(v13 + 1, p_shared_weak_owners));
    v14 = (_QWORD *)operator new();
    *v14 = v4 + 7;
    std::mutex::lock((std::mutex *)(v4 + 7));
    *(_QWORD *)&v64 = v14;
    *((_QWORD *)&v64 + 1) = v4;
    if (!*((_BYTE *)v4 + 48))
      sub_20E866B34();
    v15 = v4[4];
    v16 = *v4;
    v17 = (_QWORD *)(*v4 + 16 * v15);
    do
      v18 = __ldxr(p_shared_owners);
    while (__stxr(v18 + 1, p_shared_owners));
    *v17 = v9;
    v19 = v16 + 16 * v15;
    v20 = *(std::__shared_weak_count **)(v19 + 8);
    *(_QWORD *)(v19 + 8) = v6;
    if (v20)
    {
      v21 = (unint64_t *)&v20->__shared_owners_;
      do
        v22 = __ldaxr(v21);
      while (__stlxr(v22 - 1, v21));
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
        std::__shared_weak_count::__release_weak(v20);
      }
    }
    v23 = (v4[1] - *v4) >> 4;
    v24 = v4[5];
    v25 = v4[4] + 1;
    if (v25 >= v23)
      v26 = (v4[1] - *v4) >> 4;
    else
      v26 = 0;
    v4[4] = v25 - v26;
    if (v24 == v23)
    {
      v27 = v4[3] + 1;
      if (v27 < v23)
        v23 = 0;
      v4[3] = v27 - v23;
      v28 = (std::mutex **)v64;
      if (!(_QWORD)v64)
      {
LABEL_37:
        v38 = (uint64_t **)a1[9];
        v64 = 0uLL;
        v39 = (std::__shared_weak_count *)a1[5];
        if (v39)
        {
          v40 = std::__shared_weak_count::lock(v39);
          if (v40)
          {
            v41 = v40;
            v42 = a1[4];
            v43 = (unint64_t *)&v40->__shared_weak_owners_;
            do
              v44 = __ldxr(v43);
            while (__stxr(v44 + 1, v43));
            *(_QWORD *)&v64 = v42;
            *((_QWORD *)&v64 + 1) = v40;
            v45 = (unint64_t *)&v40->__shared_owners_;
            do
              v46 = __ldaxr(v45);
            while (__stlxr(v46 - 1, v45));
            if (!v46)
            {
              ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
              std::__shared_weak_count::__release_weak(v41);
            }
          }
          else
          {
            v64 = 0uLL;
          }
        }
        v47 = (char *)operator new(0x30uLL);
        *(_QWORD *)v47 = &off_24C9F3E98;
        *(_OWORD *)(v47 + 8) = v64;
        v64 = 0uLL;
        *((_QWORD *)v47 + 3) = v9;
        *((_QWORD *)v47 + 4) = v6;
        v65 = 0;
        v66 = 0;
        v68 = v47;
        sub_210216F3C(*v38, (uint64_t)v67);
        v48 = v68;
        if (v68 == v67)
        {
          v49 = 4;
          v48 = v67;
        }
        else
        {
          if (!v68)
            goto LABEL_51;
          v49 = 5;
        }
        (*(void (**)(void))(*v48 + 8 * v49))();
LABEL_51:
        if (v63)
        {
          v50 = (unint64_t *)&v63->__shared_owners_;
          do
            v51 = __ldaxr(v50);
          while (__stlxr(v51 - 1, v50));
          if (!v51)
          {
            ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
            std::__shared_weak_count::__release_weak(v63);
          }
        }
        return;
      }
    }
    else
    {
      v4[5] = v24 + 1;
      v28 = (std::mutex **)v64;
      if (!(_QWORD)v64)
        goto LABEL_37;
    }
    std::mutex::unlock(*v28);
    MEMORY[0x212BC6398](v28, 0x20C4093837F09);
    goto LABEL_37;
  }
  v29 = (uint64_t **)a1[9];
  v62 = 0uLL;
  v30 = (std::__shared_weak_count *)a1[5];
  if (v30)
  {
    v31 = std::__shared_weak_count::lock(v30);
    if (v31)
    {
      v32 = v31;
      v33 = a1[4];
      v34 = (unint64_t *)&v31->__shared_weak_owners_;
      do
        v35 = __ldxr(v34);
      while (__stxr(v35 + 1, v34));
      *(_QWORD *)&v62 = v33;
      *((_QWORD *)&v62 + 1) = v31;
      v36 = (unint64_t *)&v31->__shared_owners_;
      do
        v37 = __ldaxr(v36);
      while (__stlxr(v37 - 1, v36));
      if (!v37)
      {
        ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
        std::__shared_weak_count::__release_weak(v32);
      }
    }
    else
    {
      v62 = 0uLL;
    }
  }
  v52 = *a2;
  v53 = a2[1];
  if (v53)
  {
    v54 = (unint64_t *)&v53->~__shared_weak_count_0;
    do
      v55 = __ldxr(v54);
    while (__stxr(v55 + 1, v54));
  }
  v56 = (char *)operator new(0x28uLL);
  *(_QWORD *)v56 = &off_24C9F3F18;
  *(_OWORD *)(v56 + 8) = v62;
  *((_QWORD *)v56 + 3) = v52;
  *((_QWORD *)v56 + 4) = v53;
  v66 = (__int128 *)v56;
  sub_210216F3C(*v29, (uint64_t)&v64);
  v60 = v66;
  if (v66 == &v64)
  {
    v61 = 4;
    v60 = &v64;
  }
  else
  {
    if (!v66)
      return;
    v61 = 5;
  }
  (*(void (**)(__int128 *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v60 + 8 * v61))(v60, v57, v58, v59);
}

void sub_20EFC3454(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, char *a18)
{
  char *v18;
  char *v20;
  uint64_t v21;

  v20 = a18;
  if (a18 == v18)
  {
    v21 = 4;
    v20 = &a15;
  }
  else
  {
    if (!a18)
    {
      sub_20EBB635C((uint64_t)&a9);
      _Unwind_Resume(a1);
    }
    v21 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v20 + 8 * v21))();
  sub_20EBB635C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20EFC34A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,char *a23)
{
  char *v23;
  char *v25;
  uint64_t v26;

  v25 = a23;
  if (a23 == v23)
  {
    v26 = 4;
    v25 = &a20;
  }
  else
  {
    if (!a23)
      goto LABEL_6;
    v26 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v25 + 8 * v26))();
LABEL_6:
  sub_20EA02254((uint64_t)&a15);
  sub_20E86665C((uint64_t)&a13);
  _Unwind_Resume(a1);
}

void sub_20EFC34F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  std::__shared_weak_count *v5;
  uint64_t v7;
  va_list va;
  uint64_t v9;
  va_list va1;

  va_start(va1, a5);
  va_start(va, a5);
  v7 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  sub_20EA0228C((std::mutex ***)va1);
  std::__shared_weak_count::__release_weak(v5);
  sub_20E86665C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20EFC351C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  std::__shared_weak_count *v5;
  uint64_t v6;
  va_list va;

  va_start(va, a5);
  MEMORY[0x212BC6398](v6, 0x20C4093837F09);
  std::__shared_weak_count::__release_weak(v5);
  sub_20E86665C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20EFC3550(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  std::__shared_weak_count *v13;

  std::__shared_weak_count::__release_weak(v13);
  sub_20E86665C((uint64_t)&a13);
  _Unwind_Resume(a1);
}

uint64_t sub_20EFC3570(uint64_t result)
{
  atomic_store(1u, (unsigned __int8 *)(result + 8));
  return result;
}

uint64_t sub_20EFC3580(uint64_t result)
{
  atomic_store(0, (unsigned __int8 *)(result + 8));
  return result;
}

uint64_t sub_20EFC358C(uint64_t a1)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)(a1 + 8));
  return v1 & 1;
}

void sub_20EFC359C(_QWORD *a1, std::__shared_weak_count_vtbl **a2, std::__shared_weak_count_vtbl **a3)
{
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t *p_shared_weak_owners;
  unint64_t v17;
  uint64_t *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  std::__shared_weak_count **v22;
  unint64_t v23;
  uint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  std::mutex **v33;
  uint64_t **v34;
  std::__shared_weak_count *v35;
  std::__shared_weak_count *v36;
  std::__shared_weak_count *v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  unint64_t *v41;
  unint64_t v42;
  uint64_t **v43;
  std::__shared_weak_count *v44;
  std::__shared_weak_count *v45;
  std::__shared_weak_count *v46;
  uint64_t v47;
  unint64_t *v48;
  unint64_t v49;
  unint64_t *v50;
  unint64_t v51;
  char *v52;
  std::string *v53;
  uint64_t v54;
  uint64_t *v55;
  unint64_t v56;
  unint64_t *v57;
  unint64_t v58;
  std::__shared_weak_count_vtbl *v59;
  std::__shared_weak_count_vtbl *v60;
  unint64_t *v61;
  unint64_t v62;
  _QWORD *v63;
  char *v64;
  __int128 *v65;
  uint64_t v66;
  _QWORD *v67;
  _QWORD *v68;
  _QWORD *v69;
  __int128 *v70;
  std::string *v71;
  std::runtime_error *exception;
  std::runtime_error *v73;
  std::__shared_weak_count *v74[2];
  _QWORD *v75;
  std::__shared_weak_count *v76;
  std::__shared_weak_count *v77;
  std::runtime_error v78;
  std::__shared_weak_count *v79;
  std::__shared_weak_count *v80;
  __int128 v81;
  _QWORD *v82;
  __int128 *v83;
  _QWORD v84[3];
  std::string v85;
  std::string *v86;
  uint64_t v87;

  v87 = *MEMORY[0x24BDAC8D0];
  if (((*(uint64_t (**)(_QWORD *))(*a1 + 48))(a1) & 1) == 0)
  {
    *(_QWORD *)&v81 = "Invalid operation. Interface is disabled for ";
    *((_QWORD *)&v81 + 1) = 45;
    v69 = (_QWORD *)a1[6];
    v68 = a1 + 6;
    v67 = v69;
    v70 = (__int128 *)*((unsigned __int8 *)v68 + 23);
    if ((char)v70 < 0)
      v70 = (__int128 *)v68[1];
    else
      v67 = v68;
    v82 = v67;
    v83 = v70;
    sub_20E8778D4((uint64_t)&v81, (uint64_t)v84, 0, 0, &v85);
    if ((v85.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v71 = &v85;
    else
      v71 = (std::string *)v85.__r_.__value_.__r.__words[0];
    std::runtime_error::runtime_error(&v78, (const char *)v71);
    v78.__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v73 = std::runtime_error::runtime_error(exception, &v78);
    v73->__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    __cxa_throw(v73, (struct type_info *)&unk_24CA1E2D0, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  if (!a1[9]
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 294, (uint64_t)"scheduler_", 10, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  if (a1[18])
  {
    v6 = (std::__shared_weak_count *)operator new(0x20uLL);
    v6->__shared_weak_owners_ = 0;
    v6->__vftable = (std::__shared_weak_count_vtbl *)&unk_24C9B85F0;
    v6[1].__vftable = *a3;
    v77 = v6;
    v75 = &v6[1].__vftable;
    v76 = v6;
    v6->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    *a3 = 0;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    if (!a1[18]
      && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 414, (uint64_t)"limiting_buffer_", 16, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v9 = (std::__shared_weak_count *)operator new(0x28uLL);
    v10 = v9;
    v9->__shared_owners_ = 0;
    v11 = (unint64_t *)&v9->__shared_owners_;
    v9->__shared_weak_owners_ = 0;
    v9->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9F3E48;
    v12 = (uint64_t)a2[1];
    v9[1].__vftable = *a2;
    v13 = v9 + 1;
    v9[1].__shared_owners_ = v12;
    if (v12)
    {
      v14 = (unint64_t *)(v12 + 8);
      do
        v15 = __ldxr(v14);
      while (__stxr(v15 + 1, v14));
    }
    v79 = v9 + 1;
    v80 = v9;
    p_shared_weak_owners = (unint64_t *)&v9->__shared_weak_owners_;
    do
      v17 = __ldxr(p_shared_weak_owners);
    while (__stxr(v17 + 1, p_shared_weak_owners));
    v18 = (uint64_t *)a1[18];
    v19 = (_QWORD *)operator new();
    *v19 = v18 + 7;
    std::mutex::lock((std::mutex *)(v18 + 7));
    *(_QWORD *)&v81 = v19;
    *((_QWORD *)&v81 + 1) = v18;
    if (!*((_BYTE *)v18 + 48))
      sub_20E866B34();
    v20 = v18[4];
    v21 = *v18;
    v22 = (std::__shared_weak_count **)(*v18 + 16 * v20);
    do
      v23 = __ldxr(v11);
    while (__stxr(v23 + 1, v11));
    *v22 = v13;
    v24 = v21 + 16 * v20;
    v25 = *(std::__shared_weak_count **)(v24 + 8);
    *(_QWORD *)(v24 + 8) = v10;
    if (v25)
    {
      v26 = (unint64_t *)&v25->__shared_owners_;
      do
        v27 = __ldaxr(v26);
      while (__stlxr(v27 - 1, v26));
      if (!v27)
      {
        ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
        std::__shared_weak_count::__release_weak(v25);
      }
    }
    v28 = (v18[1] - *v18) >> 4;
    v29 = v18[5];
    v30 = v18[4] + 1;
    if (v30 >= v28)
      v31 = (v18[1] - *v18) >> 4;
    else
      v31 = 0;
    v18[4] = v30 - v31;
    if (v29 == v28)
    {
      v32 = v18[3] + 1;
      if (v32 < v28)
        v28 = 0;
      v18[3] = v32 - v28;
      v33 = (std::mutex **)v81;
      if (!(_QWORD)v81)
      {
LABEL_40:
        v43 = (uint64_t **)a1[9];
        v81 = 0uLL;
        v44 = (std::__shared_weak_count *)a1[5];
        if (v44)
        {
          v45 = std::__shared_weak_count::lock(v44);
          if (v45)
          {
            v46 = v45;
            v47 = a1[4];
            v48 = (unint64_t *)&v45->__shared_weak_owners_;
            do
              v49 = __ldxr(v48);
            while (__stxr(v49 + 1, v48));
            *(_QWORD *)&v81 = v47;
            *((_QWORD *)&v81 + 1) = v45;
            v50 = (unint64_t *)&v45->__shared_owners_;
            do
              v51 = __ldaxr(v50);
            while (__stlxr(v51 - 1, v50));
            if (!v51)
            {
              ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
              std::__shared_weak_count::__release_weak(v46);
            }
          }
          else
          {
            v81 = 0uLL;
          }
        }
        v52 = (char *)operator new(0x38uLL);
        *(_QWORD *)v52 = &off_24C9F3F98;
        *(_OWORD *)(v52 + 8) = v81;
        v81 = 0uLL;
        *((_QWORD *)v52 + 3) = v13;
        *((_QWORD *)v52 + 4) = v10;
        v82 = 0;
        v83 = 0;
        *((_QWORD *)v52 + 5) = v75;
        *((_QWORD *)v52 + 6) = v76;
        v84[0] = 0;
        v84[1] = 0;
        v86 = (std::string *)v52;
        sub_210216F3C(*v43, (uint64_t)&v85);
        v53 = v86;
        if (v86 == &v85)
        {
          v54 = 4;
          v53 = &v85;
        }
        else
        {
          if (!v86)
            goto LABEL_54;
          v54 = 5;
        }
        (*(void (**)(void))(v53->__r_.__value_.__r.__words[0] + 8 * v54))();
LABEL_54:
        if (v80)
        {
          v55 = &v80->__shared_owners_;
          do
            v56 = __ldaxr((unint64_t *)v55);
          while (__stlxr(v56 - 1, (unint64_t *)v55));
          if (!v56)
          {
            ((void (*)(std::__shared_weak_count *))v80->__on_zero_shared)(v80);
            std::__shared_weak_count::__release_weak(v80);
          }
        }
        if (v77)
        {
          v57 = (unint64_t *)&v77->__shared_owners_;
          do
            v58 = __ldaxr(v57);
          while (__stlxr(v58 - 1, v57));
          if (!v58)
          {
            ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
            std::__shared_weak_count::__release_weak(v77);
          }
        }
        return;
      }
    }
    else
    {
      v18[5] = v29 + 1;
      v33 = (std::mutex **)v81;
      if (!(_QWORD)v81)
        goto LABEL_40;
    }
    std::mutex::unlock(*v33);
    MEMORY[0x212BC6398](v33, 0x20C4093837F09);
    goto LABEL_40;
  }
  v34 = (uint64_t **)a1[9];
  *(_OWORD *)v74 = 0uLL;
  v35 = (std::__shared_weak_count *)a1[5];
  if (v35)
  {
    v36 = std::__shared_weak_count::lock(v35);
    if (v36)
    {
      v37 = v36;
      v38 = (std::__shared_weak_count *)a1[4];
      v39 = (unint64_t *)&v36->__shared_weak_owners_;
      do
        v40 = __ldxr(v39);
      while (__stxr(v40 + 1, v39));
      v74[0] = v38;
      v74[1] = v36;
      v41 = (unint64_t *)&v36->__shared_owners_;
      do
        v42 = __ldaxr(v41);
      while (__stlxr(v42 - 1, v41));
      if (!v42)
      {
        ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
        std::__shared_weak_count::__release_weak(v37);
      }
    }
    else
    {
      *(_OWORD *)v74 = 0uLL;
    }
  }
  v59 = *a2;
  v60 = a2[1];
  if (v60)
  {
    v61 = (unint64_t *)&v60->~__shared_weak_count_0;
    do
      v62 = __ldxr(v61);
    while (__stxr(v62 + 1, v61));
  }
  v63 = operator new(0x20uLL);
  v63[1] = 0;
  v63[2] = 0;
  *v63 = &unk_24C9B85F0;
  v63[3] = *a3;
  *a3 = 0;
  v64 = (char *)operator new(0x38uLL);
  *(_QWORD *)v64 = &off_24C9F4018;
  *(_OWORD *)(v64 + 8) = *(_OWORD *)v74;
  *((_QWORD *)v64 + 3) = v59;
  *((_QWORD *)v64 + 4) = v60;
  *((_QWORD *)v64 + 5) = v63 + 3;
  *((_QWORD *)v64 + 6) = v63;
  v83 = (__int128 *)v64;
  sub_210216F3C(*v34, (uint64_t)&v81);
  v65 = v83;
  if (v83 == &v81)
  {
    v66 = 4;
    v65 = &v81;
  }
  else
  {
    if (!v83)
      return;
    v66 = 5;
  }
  (*(void (**)(__int128 *))(*(_QWORD *)v65 + 8 * v66))(v65);
}

void sub_20EFC3C80(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, std::runtime_error a20,std::exception_ptr a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27)
{
  std::promise<void> *v27;
  uint64_t v28;
  std::exception_ptr v29;

  if (a2)
  {
    __cxa_begin_catch(exception_object);
    std::current_exception();
    __cxa_end_catch();
    v29.__ptr_ = &a21;
    std::promise<void>::set_exception(v27, v29);
    std::exception_ptr::~exception_ptr(&a21);
    std::runtime_error::~runtime_error(&a20);
    if (*(char *)(v28 - 97) < 0)
      operator delete(*(void **)(v28 - 120));
    JUMPOUT(0x20EFC3B90);
  }
  _Unwind_Resume(exception_object);
}

void sub_20EFC3D90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  va_list va;
  uint64_t v15;
  uint64_t v16;
  va_list va1;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  va_list va2;
  uint64_t v24;
  va_list va3;

  va_start(va3, a8);
  va_start(va2, a8);
  va_start(va1, a8);
  va_start(va, a8);
  v13 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v16 = va_arg(va2, _QWORD);
  v18 = va_arg(va2, _QWORD);
  v19 = va_arg(va2, _QWORD);
  v20 = va_arg(va2, _QWORD);
  v21 = va_arg(va2, _QWORD);
  va_copy(va3, va2);
  v22 = va_arg(va3, _QWORD);
  v24 = va_arg(va3, _QWORD);
  v11 = *(_QWORD **)(v9 - 96);
  if (v11 == v8)
  {
    v12 = 4;
    v11 = (_QWORD *)(v9 - 120);
  }
  else
  {
    if (!v11)
      goto LABEL_6;
    v12 = 5;
  }
  (*(void (**)(void))(*v11 + 8 * v12))();
LABEL_6:
  sub_20EA031A8((uint64_t *)va3);
  sub_20E86665C((uint64_t)va2);
  sub_20E86665C((uint64_t)va);
  sub_20E86665C((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_20EFC3E30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  uint64_t v9;
  va_list va;
  uint64_t v11;
  va_list va1;

  va_start(va1, a8);
  va_start(va, a8);
  v9 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  sub_20E86665C((uint64_t)va);
  sub_20E86665C((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_20EFC3E4C(uint64_t a1)
{
  uint64_t *v1;

  v1 = *(uint64_t **)(a1 + 72);
  if (v1)
  {
    sub_210217048(*v1);
  }
  else
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 167, (uint64_t)"scheduler_ != nullptr", 21, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    sub_210217048(**(_QWORD **)(a1 + 72));
  }
}

_QWORD *sub_20EFC3EC0(_QWORD *a1)
{
  uint64_t **v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *result;
  uint64_t v9;
  _BYTE v10[24];
  _BYTE *v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v2 = (uint64_t **)a1[9];
  if (!v2)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 181, (uint64_t)"scheduler_", 10, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v2 = (uint64_t **)a1[9];
  }
  v4 = a1[4];
  v3 = a1[5];
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = operator new(0x20uLL);
  *v7 = &off_24C9F4098;
  v7[1] = v4;
  v7[2] = v3;
  v11 = v7;
  sub_210216F3C(*v2, (uint64_t)v10);
  result = v11;
  if (v11 == v10)
  {
    v9 = 4;
    result = v10;
  }
  else
  {
    if (!v11)
      return result;
    v9 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v9))();
}

void sub_20EFC3FD0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v13;

  if (a13 == v13)
  {
    (*(void (**)(void))(a10 + 32))();
    _Unwind_Resume(exception_object);
  }
  if (a13)
  {
    (*(void (**)(void))(*(_QWORD *)a13 + 40))();
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20EFC4034(_QWORD *a1, uint64_t a2)
{
  uint64_t **v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *result;
  uint64_t v12;
  _BYTE v13[24];
  _BYTE *v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v4 = (uint64_t **)a1[9];
  if (!v4)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 202, (uint64_t)"scheduler_", 10, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v4 = (uint64_t **)a1[9];
  }
  v6 = a1[4];
  v5 = a1[5];
  if (v5)
  {
    v7 = (unint64_t *)(v5 + 16);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  v9 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v10 = operator new(0x28uLL);
  *v10 = &off_24C9F4118;
  v10[1] = v6;
  v10[2] = v5;
  v10[3] = &off_24C9B46A0;
  v10[4] = v9;
  v14 = v10;
  sub_210216F3C(*v4, (uint64_t)v13);
  result = v14;
  if (v14 == v13)
  {
    v12 = 4;
    result = v13;
  }
  else
  {
    if (!v14)
      return result;
    v12 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v12))();
}

void sub_20EFC4164(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v13;

  if (a13 == v13)
  {
    (*(void (**)(void))(a10 + 32))();
    _Unwind_Resume(exception_object);
  }
  if (a13)
  {
    (*(void (**)(void))(*(_QWORD *)a13 + 40))();
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_20EFC41D8@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  unint64_t *v5;
  int v6;
  unint64_t v7;
  uint64_t **v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *p_shared_weak_owners;
  unint64_t v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v22;
  _BYTE v23[24];
  _BYTE *v24;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  v4 = operator new();
  *(_QWORD *)(v4 + 8) = 0;
  v5 = (unint64_t *)(v4 + 8);
  *(_QWORD *)(v4 + 24) = 850045863;
  *(_QWORD *)(v4 + 16) = 0;
  *(_OWORD *)(v4 + 32) = 0u;
  *(_OWORD *)(v4 + 48) = 0u;
  *(_OWORD *)(v4 + 64) = 0u;
  *(_QWORD *)(v4 + 80) = 0;
  *(_QWORD *)(v4 + 88) = 1018212795;
  *(_OWORD *)(v4 + 96) = 0u;
  *(_OWORD *)(v4 + 112) = 0u;
  *(_OWORD *)(v4 + 124) = 0u;
  *(_QWORD *)v4 = &off_24C9B80A0;
  v22 = v4;
  std::mutex::lock((std::mutex *)(v4 + 24));
  v6 = *(_DWORD *)(v4 + 136);
  if ((v6 & 2) != 0)
    sub_20E96CE78(1u);
  do
    v7 = __ldxr(v5);
  while (__stxr(v7 + 1, v5));
  *(_DWORD *)(v4 + 136) = v6 | 2;
  std::mutex::unlock((std::mutex *)(v4 + 24));
  v8 = (uint64_t **)a1[9];
  v9 = (std::__shared_weak_count *)a1[5];
  if (v9)
  {
    v10 = std::__shared_weak_count::lock(v9);
    v11 = v10;
    if (v10)
    {
      v12 = a1[4];
      p_shared_weak_owners = (unint64_t *)&v10->__shared_weak_owners_;
      do
        v14 = __ldxr(p_shared_weak_owners);
      while (__stxr(v14 + 1, p_shared_weak_owners));
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        v16 = __ldaxr(p_shared_owners);
      while (__stlxr(v16 - 1, p_shared_owners));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    else
    {
      v12 = 0;
    }
  }
  else
  {
    v12 = 0;
    v11 = 0;
  }
  v17 = operator new(0x20uLL);
  *v17 = &off_24C9F4198;
  v17[1] = v12;
  v17[2] = v11;
  v17[3] = &v22;
  v24 = v17;
  sub_210216F3C(*v8, (uint64_t)v23);
  v18 = v24;
  if (v24 == v23)
  {
    v19 = 4;
    v18 = v23;
    goto LABEL_17;
  }
  if (v24)
  {
    v19 = 5;
LABEL_17:
    (*(void (**)(_QWORD *))(*v18 + 8 * v19))(v18);
  }
  std::__assoc_sub_state::wait((std::__assoc_sub_state *)v4);
  sub_20EA04D14(v4, a2);
  do
    v20 = __ldaxr(v5);
  while (__stlxr(v20 - 1, v5));
  if (!v20)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
  return sub_20EA04DE8(&v22);
}

void sub_20EFC43F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  unint64_t *v10;
  unint64_t v12;

  do
    v12 = __ldaxr(v10);
  while (__stlxr(v12 - 1, v10));
  if (!v12)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
    sub_20EA04DE8(&a9);
    _Unwind_Resume(a1);
  }
  sub_20EA04DE8(&a9);
  _Unwind_Resume(a1);
}

uint64_t *sub_20EFC44B8@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  unint64_t *v5;
  int v6;
  unint64_t v7;
  uint64_t **v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *p_shared_weak_owners;
  unint64_t v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v22;
  _BYTE v23[24];
  _BYTE *v24;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  v4 = operator new();
  *(_QWORD *)(v4 + 8) = 0;
  v5 = (unint64_t *)(v4 + 8);
  *(_QWORD *)(v4 + 24) = 850045863;
  *(_QWORD *)(v4 + 16) = 0;
  *(_OWORD *)(v4 + 32) = 0u;
  *(_OWORD *)(v4 + 48) = 0u;
  *(_OWORD *)(v4 + 64) = 0u;
  *(_QWORD *)(v4 + 80) = 0;
  *(_QWORD *)(v4 + 88) = 1018212795;
  *(_OWORD *)(v4 + 96) = 0u;
  *(_OWORD *)(v4 + 112) = 0u;
  *(_OWORD *)(v4 + 124) = 0u;
  *(_QWORD *)v4 = &off_24C9B80A0;
  v22 = v4;
  std::mutex::lock((std::mutex *)(v4 + 24));
  v6 = *(_DWORD *)(v4 + 136);
  if ((v6 & 2) != 0)
    sub_20E96CE78(1u);
  do
    v7 = __ldxr(v5);
  while (__stxr(v7 + 1, v5));
  *(_DWORD *)(v4 + 136) = v6 | 2;
  std::mutex::unlock((std::mutex *)(v4 + 24));
  v8 = (uint64_t **)a1[9];
  v9 = (std::__shared_weak_count *)a1[5];
  if (v9)
  {
    v10 = std::__shared_weak_count::lock(v9);
    v11 = v10;
    if (v10)
    {
      v12 = a1[4];
      p_shared_weak_owners = (unint64_t *)&v10->__shared_weak_owners_;
      do
        v14 = __ldxr(p_shared_weak_owners);
      while (__stxr(v14 + 1, p_shared_weak_owners));
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        v16 = __ldaxr(p_shared_owners);
      while (__stlxr(v16 - 1, p_shared_owners));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    else
    {
      v12 = 0;
    }
  }
  else
  {
    v12 = 0;
    v11 = 0;
  }
  v17 = operator new(0x20uLL);
  *v17 = &off_24C9F4218;
  v17[1] = v12;
  v17[2] = v11;
  v17[3] = &v22;
  v24 = v17;
  sub_210216F3C(*v8, (uint64_t)v23);
  v18 = v24;
  if (v24 == v23)
  {
    v19 = 4;
    v18 = v23;
    goto LABEL_17;
  }
  if (v24)
  {
    v19 = 5;
LABEL_17:
    (*(void (**)(_QWORD *))(*v18 + 8 * v19))(v18);
  }
  std::__assoc_sub_state::wait((std::__assoc_sub_state *)v4);
  sub_20EA04D14(v4, a2);
  do
    v20 = __ldaxr(v5);
  while (__stlxr(v20 - 1, v5));
  if (!v20)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
  return sub_20EA04DE8(&v22);
}

void sub_20EFC46D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  unint64_t *v10;
  unint64_t v12;

  do
    v12 = __ldaxr(v10);
  while (__stlxr(v12 - 1, v10));
  if (!v12)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
    sub_20EA04DE8(&a9);
    _Unwind_Resume(a1);
  }
  sub_20EA04DE8(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20EFC4798(uint64_t a1)
{
  return sub_20EFC4908(a1 - 16);
}

void sub_20EFC47A0(uint64_t a1)
{
  sub_20EFC4908(a1 - 16);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20EFC47C8(uint64_t a1)
{
  return sub_20EFC3EC0((_QWORD *)(a1 - 16));
}

uint64_t *sub_20EFC47D0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_20EFC41D8((_QWORD *)(a1 - 16), a2);
}

uint64_t *sub_20EFC47D8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_20EFC44B8((_QWORD *)(a1 - 16), a2);
}

uint64_t sub_20EFC47E0(uint64_t a1)
{
  return a1 - 16;
}

uint64_t sub_20EFC47E8(uint64_t a1)
{
  return sub_20EFC4908(a1 - 24);
}

void sub_20EFC47F0(uint64_t a1)
{
  sub_20EFC4908(a1 - 24);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20EFC4818(uint64_t a1, uint64_t a2)
{
  return sub_20EFC4034((_QWORD *)(a1 - 24), a2);
}

uint64_t sub_20EFC4820(uint64_t a1)
{
  return a1 - 24;
}

uint64_t sub_20EFC4828(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_20EFC4890(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20EFC48F8(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8));
}

uint64_t sub_20EFC4908(uint64_t a1)
{
  char **v2;
  char *v3;
  char *v4;
  char *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;

  *(_QWORD *)a1 = &off_24C9F3C58;
  *(_QWORD *)(a1 + 16) = &unk_24C9F3CD0;
  *(_QWORD *)(a1 + 24) = &unk_24C9F3D10;
  v2 = *(char ***)(a1 + 144);
  *(_QWORD *)(a1 + 144) = 0;
  if (v2)
  {
    std::mutex::~mutex((std::mutex *)(v2 + 7));
    if (*((_BYTE *)v2 + 48))
    {
      v3 = *v2;
      if (*v2)
      {
        v4 = v2[1];
        v5 = *v2;
        if (v4 != v3)
        {
          do
          {
            v6 = (std::__shared_weak_count *)*((_QWORD *)v4 - 1);
            if (v6)
            {
              p_shared_owners = (unint64_t *)&v6->__shared_owners_;
              do
                v8 = __ldaxr(p_shared_owners);
              while (__stlxr(v8 - 1, p_shared_owners));
              if (!v8)
              {
                ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
                std::__shared_weak_count::__release_weak(v6);
              }
            }
            v4 -= 16;
          }
          while (v4 != v3);
          v5 = *v2;
        }
        v2[1] = v3;
        operator delete(v5);
      }
    }
    MEMORY[0x212BC6398](v2, 0x1022C400958DFA3);
  }
  if (*(_QWORD *)(a1 + 136))
  {
    v9 = *(_QWORD *)(a1 + 120);
    v10 = *(uint64_t **)(a1 + 128);
    v11 = *v10;
    *(_QWORD *)(v11 + 8) = *(_QWORD *)(v9 + 8);
    **(_QWORD **)(v9 + 8) = v11;
    *(_QWORD *)(a1 + 136) = 0;
    if (v10 != (uint64_t *)(a1 + 120))
    {
      do
      {
        v12 = (uint64_t *)v10[1];
        (*(void (**)(uint64_t *))v10[2])(v10 + 2);
        operator delete(v10);
        v10 = v12;
      }
      while (v12 != (uint64_t *)(a1 + 120));
    }
  }
  if (*(_QWORD *)(a1 + 112))
  {
    v14 = *(_QWORD *)(a1 + 96);
    v13 = *(uint64_t **)(a1 + 104);
    v15 = *v13;
    *(_QWORD *)(v15 + 8) = *(_QWORD *)(v14 + 8);
    **(_QWORD **)(v14 + 8) = v15;
    *(_QWORD *)(a1 + 112) = 0;
    if (v13 != (uint64_t *)(a1 + 96))
    {
      do
      {
        v16 = (uint64_t *)v13[1];
        operator delete(v13);
        v13 = v16;
      }
      while (v16 != (uint64_t *)(a1 + 96));
    }
  }
  v17 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 88) = 0;
  if (v17)
    (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  v18 = *(std::__shared_weak_count **)(a1 + 80);
  if (!v18)
    goto LABEL_27;
  v19 = (unint64_t *)&v18->__shared_owners_;
  do
    v20 = __ldaxr(v19);
  while (__stlxr(v20 - 1, v19));
  if (v20)
  {
LABEL_27:
    if ((*(char *)(a1 + 71) & 0x80000000) == 0)
      goto LABEL_29;
    goto LABEL_28;
  }
  ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
  std::__shared_weak_count::__release_weak(v18);
  if (*(char *)(a1 + 71) < 0)
LABEL_28:
    operator delete(*(void **)(a1 + 48));
LABEL_29:
  v21 = *(std::__shared_weak_count **)(a1 + 40);
  if (v21)
    std::__shared_weak_count::__release_weak(v21);
  return a1;
}

void sub_20EFC4B08(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9F3E48;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_20EFC4B18(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9F3E48;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC6398);
}

void sub_20EFC4B48(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 32);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

_QWORD *sub_20EFC4BA4(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  *a1 = &off_24C9F3E98;
  v2 = (std::__shared_weak_count *)a1[4];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = (std::__shared_weak_count *)a1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  return a1;
}

void sub_20EFC4BE8(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  *a1 = &off_24C9F3E98;
  v2 = (std::__shared_weak_count *)a1[4];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = (std::__shared_weak_count *)a1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20EFC4C3C(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;

  result = operator new(0x30uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = &off_24C9F3E98;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = a1[4];
  result[3] = a1[3];
  result[4] = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 16);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  return result;
}

_QWORD *sub_20EFC4CAC(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;

  v3 = result[1];
  v2 = result[2];
  *a2 = &off_24C9F3E98;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  v6 = result[4];
  a2[3] = result[3];
  a2[4] = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 16);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  return result;
}

void sub_20EFC4CFC(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  v2 = *(std::__shared_weak_count **)(a1 + 32);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
}

void sub_20EFC4D38(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  v2 = (std::__shared_weak_count *)__p[4];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = (std::__shared_weak_count *)__p[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  operator delete(__p);
}

void sub_20EFC4D70(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  _BYTE v20[8];
  char v21;

  v2 = (std::__shared_weak_count *)a1[4];
  if (!v2)
  {
    v3 = 0;
    v5 = 0;
    v4 = (std::__shared_weak_count *)a1[2];
    if (v4)
      goto LABEL_6;
    goto LABEL_11;
  }
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
  {
    v5 = 0;
    v4 = (std::__shared_weak_count *)a1[2];
    if (v4)
      goto LABEL_6;
LABEL_11:
    v7 = 0;
    v8 = 0;
    goto LABEL_12;
  }
  v4 = (std::__shared_weak_count *)a1[2];
  v5 = a1[3];
  if (!v4)
    goto LABEL_11;
LABEL_6:
  v6 = std::__shared_weak_count::lock(v4);
  v7 = v6;
  if (v6)
  {
    v8 = a1[1];
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
LABEL_12:
    if (!v3)
      goto LABEL_15;
    goto LABEL_13;
  }
  v8 = 0;
  if (!v3)
    goto LABEL_15;
LABEL_13:
  v11 = (unint64_t *)&v3->__shared_owners_;
  do
    v12 = __ldxr(v11);
  while (__stxr(v12 + 1, v11));
LABEL_15:
  if (v8)
  {
    if (v5)
    {
      v20[0] = 0;
      v21 = 0;
      sub_20EFC5094((uint64_t *)(v8 + 88), v5, (uint64_t)v20);
      if (v21)
        MEMORY[0x212BC623C](v20);
    }
  }
  if (v3)
  {
    v13 = (unint64_t *)&v3->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  if (v7)
  {
    v15 = (unint64_t *)&v7->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
    do
      v17 = __ldaxr(v15);
    while (__stlxr(v17 - 1, v15));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  if (v3)
  {
    v18 = (unint64_t *)&v3->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_20EFC4F38(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;

  if (a10)
    MEMORY[0x212BC623C](&a9);
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  if (v11)
  {
    v15 = (unint64_t *)&v11->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
    do
      v17 = __ldaxr(v15);
    while (__stlxr(v17 - 1, v15));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (v10)
  {
    v18 = (unint64_t *)&v10->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20EFC501C(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__110shared_ptrIKNS_3vio17feature_detection18VIOFram"
                     "eDebugEventEEEvNS6_10mapping_io23MappingIONodeGroupErrorEvLb0EE25EnqueueMessageAndDispatchIZNKSD_4S"
                     "endERKSA_EUlT_T0_E_EEvSG_SH_EUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__110shared_ptrIKNS_3vio17feature_detecti"
                                "on18VIOFrameDebugEventEEEvNS6_10mapping_io23MappingIONodeGroupErrorEvLb0EE25EnqueueMessa"
                                "geAndDispatchIZNKSD_4SendERKSA_EUlT_T0_E_EEvSG_SH_EUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__110shared_ptrIKNS_3vio17feature_detection18VIOFrameDebugEventEEEvNS6_10mapping_io23MappingIONodeGroupErrorEvLb0EE25EnqueueMessageAndDispatchIZNKSD_4SendERKSA_EUlT_T0_E_EEvSG_SH_EUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__110shared_ptrIKNS_3vio17feature_detection18VIOFrameDebugEventEEEvNS6_10mapping_io23MappingIONodeGroupErrorEvLb0EE25EnqueueMessageAndDispatchIZNKSD_4SendERKSA_EUlT_T0_E_EEvSG_SH_EUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20EFC5088()
{
  return &unk_24C9F3EF8;
}

void sub_20EFC5094(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = *a1;
  if (!v6)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/ProcessorInputMessageHandlingStrategy.h", 276, (uint64_t)"callable_", 9, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v6 = *a1;
  }
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 16))(v6, a2);
  if (*(_BYTE *)(a3 + 8))
    std::promise<void>::set_value((std::promise<void> *)a3);
}

void sub_20EFC512C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, std::exception_ptr a17)
{
  __break(1u);
}

void sub_20EFC5314(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  __cxa_end_catch();
  JUMPOUT(0x20EFC5334);
}

_QWORD *sub_20EFC5344(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;

  *a1 = &off_24C9F3F18;
  v2 = (std::__shared_weak_count *)a1[4];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      v5 = (std::__shared_weak_count *)a1[2];
      if (!v5)
        return a1;
      goto LABEL_6;
    }
  }
  v5 = (std::__shared_weak_count *)a1[2];
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
  return a1;
}

void sub_20EFC53C0(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;

  *a1 = &off_24C9F3F18;
  v2 = (std::__shared_weak_count *)a1[4];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)a1[2];
    if (!v5)
      goto LABEL_9;
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[2];
    if (!v5)
      goto LABEL_9;
  }
  std::__shared_weak_count::__release_weak(v5);
LABEL_9:
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20EFC544C(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;

  result = operator new(0x28uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = &off_24C9F3F18;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = a1[4];
  result[3] = a1[3];
  result[4] = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  return result;
}

_QWORD *sub_20EFC54BC(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;

  v3 = result[1];
  v2 = result[2];
  *a2 = &off_24C9F3F18;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  v6 = result[4];
  a2[3] = result[3];
  a2[4] = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  return result;
}

void sub_20EFC550C(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;

  v2 = *(std::__shared_weak_count **)(a1 + 32);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    v5 = *(std::__shared_weak_count **)(a1 + 16);
    if (!v5)
      return;
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  v5 = *(std::__shared_weak_count **)(a1 + 16);
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
}

void sub_20EFC557C(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;

  v2 = (std::__shared_weak_count *)__p[4];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      v5 = (std::__shared_weak_count *)__p[2];
      if (!v5)
        goto LABEL_7;
      goto LABEL_6;
    }
  }
  v5 = (std::__shared_weak_count *)__p[2];
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
LABEL_7:
  operator delete(__p);
}

void sub_20EFC55EC(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  _BYTE v8[8];
  char v9;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 8);
      if (v5)
      {
        v8[0] = 0;
        v9 = 0;
        sub_20EFC5094((uint64_t *)(v5 + 88), a1 + 24, (uint64_t)v8);
        if (v9)
          MEMORY[0x212BC623C](v8);
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_20EFC5694(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v13;

  if (a10)
    MEMORY[0x212BC623C](&a9);
  p_shared_owners = (unint64_t *)&v10->__shared_owners_;
  do
    v13 = __ldaxr(p_shared_owners);
  while (__stlxr(v13 - 1, p_shared_owners));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20EFC56E0(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__110shared_ptrIKNS_3vio17feature_detection18VIOFram"
                     "eDebugEventEEEvNS6_10mapping_io23MappingIONodeGroupErrorEvLb0EE4SendERKSA_EUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__110shared_ptrIKNS_3vio17feature_detecti"
                                "on18VIOFrameDebugEventEEEvNS6_10mapping_io23MappingIONodeGroupErrorEvLb0EE4SendERKSA_EUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__110shared_ptrIKNS_3vio17feature_detection18VIOFrameDebugEventEEEvNS6_10mapping_io23MappingIONodeGroupErrorEvLb0EE4SendERKSA_EUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__110shared_ptrIKNS_3vio17feature_detection18VIOFrameDebugEventEEEvNS6_10mapping_io23MappingIONodeGroupErrorEvLb0EE4SendERKSA_EUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20EFC574C()
{
  return &unk_24C9F3F78;
}

_QWORD *sub_20EFC5758(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;

  *a1 = &off_24C9F3F98;
  v2 = (std::__shared_weak_count *)a1[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
      goto LABEL_7;
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  v5 = (std::__shared_weak_count *)a1[4];
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
LABEL_7:
  v6 = (std::__shared_weak_count *)a1[2];
  if (v6)
    std::__shared_weak_count::__release_weak(v6);
  return a1;
}

void sub_20EFC57E0(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;

  *a1 = &off_24C9F3F98;
  v2 = (std::__shared_weak_count *)a1[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
    {
LABEL_7:
      v6 = (std::__shared_weak_count *)a1[2];
      if (v6)
        std::__shared_weak_count::__release_weak(v6);
      JUMPOUT(0x212BC6398);
    }
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
      goto LABEL_7;
  }
  std::__shared_weak_count::__release_weak(v5);
  goto LABEL_7;
}

_QWORD *sub_20EFC5878(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;

  result = operator new(0x38uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = &off_24C9F3F98;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = a1[4];
  result[3] = a1[3];
  result[4] = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 16);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  v10 = a1[6];
  result[5] = a1[5];
  result[6] = v10;
  if (v10)
  {
    v11 = (unint64_t *)(v10 + 8);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  return result;
}

_QWORD *sub_20EFC5908(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;

  v3 = result[1];
  v2 = result[2];
  *a2 = &off_24C9F3F98;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  v6 = result[4];
  a2[3] = result[3];
  a2[4] = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 16);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  v9 = result[6];
  a2[5] = result[5];
  a2[6] = v9;
  if (v9)
  {
    v10 = (unint64_t *)(v9 + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  return result;
}

void sub_20EFC5978(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;

  v2 = (std::__shared_weak_count *)a1[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
      goto LABEL_7;
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  v5 = (std::__shared_weak_count *)a1[4];
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
LABEL_7:
  v6 = (std::__shared_weak_count *)a1[2];
  if (v6)
    std::__shared_weak_count::__release_weak(v6);
}

void sub_20EFC59F8(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;

  v2 = (std::__shared_weak_count *)__p[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)__p[4];
    if (!v5)
      goto LABEL_7;
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  v5 = (std::__shared_weak_count *)__p[4];
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
LABEL_7:
  v6 = (std::__shared_weak_count *)__p[2];
  if (v6)
    std::__shared_weak_count::__release_weak(v6);
  operator delete(__p);
}

void sub_20EFC5A74(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t *v13;
  std::runtime_error_vtbl **v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  std::runtime_error *exception;
  std::runtime_error *v23;
  std::runtime_error *v24;
  std::runtime_error *v25;
  std::runtime_error v26;
  std::runtime_error v27;

  v2 = (std::__shared_weak_count *)a1[4];
  if (!v2)
  {
    v3 = 0;
    v5 = 0;
    v4 = (std::__shared_weak_count *)a1[2];
    if (v4)
      goto LABEL_6;
LABEL_11:
    v7 = 0;
    v8 = 0;
    goto LABEL_12;
  }
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
  {
    v5 = 0;
    v4 = (std::__shared_weak_count *)a1[2];
    if (v4)
      goto LABEL_6;
    goto LABEL_11;
  }
  v4 = (std::__shared_weak_count *)a1[2];
  v5 = a1[3];
  if (!v4)
    goto LABEL_11;
LABEL_6:
  v6 = std::__shared_weak_count::lock(v4);
  v7 = v6;
  if (!v6)
  {
    v8 = 0;
    if (!v3)
      goto LABEL_15;
    goto LABEL_13;
  }
  v8 = a1[1];
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  do
    v10 = __ldxr(p_shared_owners);
  while (__stxr(v10 + 1, p_shared_owners));
LABEL_12:
  if (!v3)
    goto LABEL_15;
LABEL_13:
  v11 = (unint64_t *)&v3->__shared_owners_;
  do
    v12 = __ldxr(v11);
  while (__stxr(v12 + 1, v11));
LABEL_15:
  if (!v8)
  {
    std::runtime_error::runtime_error(&v27, "Processor is no longer available.");
    v27.__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v23 = std::runtime_error::runtime_error(exception, &v27);
    v23->__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    __cxa_throw(v23, (struct type_info *)&unk_24CA1E2D0, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  if (!v5)
  {
    std::runtime_error::runtime_error(&v26, "Message was dropped.");
    v26.__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    v24 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v25 = std::runtime_error::runtime_error(v24, &v26);
    v25->__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    __cxa_throw(v25, (struct type_info *)&unk_24CA1E2D0, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  v13 = (uint64_t *)(v8 + 88);
  v14 = (std::runtime_error_vtbl **)a1[5];
  v26.__vftable = *v14;
  *v14 = 0;
  LOBYTE(v26.__imp_.__imp_) = 1;
  sub_20EFC5094(v13, v5, (uint64_t)&v26);
  if (LOBYTE(v26.__imp_.__imp_))
    MEMORY[0x212BC623C](&v26);
  if (v3)
  {
    v15 = (unint64_t *)&v3->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  if (v7)
  {
    v17 = (unint64_t *)&v7->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
    do
      v19 = __ldaxr(v17);
    while (__stlxr(v19 - 1, v17));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  if (v3)
  {
    v20 = (unint64_t *)&v3->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_20EFC5D28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::runtime_error a11, std::exception_ptr a12, std::runtime_error a13, std::exception_ptr a14)
{
  std::__shared_weak_count *v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;

  std::exception_ptr::~exception_ptr(&a14);
  std::runtime_error::~runtime_error(&a13);
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v18 = __ldaxr(p_shared_owners);
    while (__stlxr(v18 - 1, p_shared_owners));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  if (v15)
  {
    v19 = (unint64_t *)&v15->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
    do
      v21 = __ldaxr(v19);
    while (__stlxr(v21 - 1, v19));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  if (v14)
  {
    v22 = (unint64_t *)&v14->__shared_owners_;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  _Unwind_Resume(a1);
}

uint64_t sub_20EFC5E80(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__110shared_ptrIKNS_3vio17feature_detection18VIOFram"
                     "eDebugEventEEEvNS6_10mapping_io23MappingIONodeGroupErrorEvLb0EE25EnqueueMessageAndDispatchIZNKSD_7P"
                     "rocessERKSA_NS4_7promiseIvEEEUlT_T0_E_EEvSG_SJ_EUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__110shared_ptrIKNS_3vio17feature_detecti"
                                "on18VIOFrameDebugEventEEEvNS6_10mapping_io23MappingIONodeGroupErrorEvLb0EE25EnqueueMessa"
                                "geAndDispatchIZNKSD_7ProcessERKSA_NS4_7promiseIvEEEUlT_T0_E_EEvSG_SJ_EUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__110shared_ptrIKNS_3vio17feature_detection18VIOFrameDebugEventEEEvNS6_10mapping_io23MappingIONodeGroupErrorEvLb0EE25EnqueueMessageAndDispatchIZNKSD_7ProcessERKSA_NS4_7promiseIvEEEUlT_T0_E_EEvSG_SJ_EUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__110shared_ptrIKNS_3vio17feature_detection18VIOFrameDebugEventEEEvNS6_10mapping_io23MappingIONodeGroupErrorEvLb0EE25EnqueueMessageAndDispatchIZNKSD_7ProcessERKSA_NS4_7promiseIvEEEUlT_T0_E_EEvSG_SJ_EUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20EFC5EEC()
{
  return &unk_24C9F3FF8;
}

_QWORD *sub_20EFC5EF8(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;

  *a1 = &off_24C9F4018;
  v2 = (std::__shared_weak_count *)a1[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
      goto LABEL_11;
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
      goto LABEL_11;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_11:
  v8 = (std::__shared_weak_count *)a1[2];
  if (v8)
    std::__shared_weak_count::__release_weak(v8);
  return a1;
}

void sub_20EFC5FAC(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;

  *a1 = &off_24C9F4018;
  v2 = (std::__shared_weak_count *)a1[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
      goto LABEL_11;
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
      goto LABEL_11;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_11:
  v8 = (std::__shared_weak_count *)a1[2];
  if (v8)
    std::__shared_weak_count::__release_weak(v8);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20EFC6070(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;

  result = operator new(0x38uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = &off_24C9F4018;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = a1[4];
  result[3] = a1[3];
  result[4] = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  v10 = a1[6];
  result[5] = a1[5];
  result[6] = v10;
  if (v10)
  {
    v11 = (unint64_t *)(v10 + 8);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  return result;
}

_QWORD *sub_20EFC6100(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;

  v3 = result[1];
  v2 = result[2];
  *a2 = &off_24C9F4018;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  v6 = result[4];
  a2[3] = result[3];
  a2[4] = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  v9 = result[6];
  a2[5] = result[5];
  a2[6] = v9;
  if (v9)
  {
    v10 = (unint64_t *)(v9 + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  return result;
}

void sub_20EFC6170(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;

  v2 = (std::__shared_weak_count *)a1[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
      goto LABEL_11;
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
      goto LABEL_11;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_11:
  v8 = (std::__shared_weak_count *)a1[2];
  if (v8)
    std::__shared_weak_count::__release_weak(v8);
}

void sub_20EFC621C(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;

  v2 = (std::__shared_weak_count *)__p[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)__p[4];
    if (!v5)
      goto LABEL_11;
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)__p[4];
    if (!v5)
      goto LABEL_11;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_11:
  v8 = (std::__shared_weak_count *)__p[2];
  if (v8)
    std::__shared_weak_count::__release_weak(v8);
  operator delete(__p);
}

void sub_20EFC62C4(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  uint64_t v4;
  std::runtime_error_vtbl **v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::runtime_error *exception;
  std::runtime_error *v9;
  std::runtime_error v10;

  v2 = (std::__shared_weak_count *)a1[2];
  if (!v2 || (v3 = std::__shared_weak_count::lock(v2)) == 0 || (v4 = a1[1]) == 0)
  {
    std::runtime_error::runtime_error(&v10, "Invalid operation. Processor is released.");
    v10.__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v9 = std::runtime_error::runtime_error(exception, &v10);
    v9->__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    __cxa_throw(v9, (struct type_info *)&unk_24CA1E2D0, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  v5 = (std::runtime_error_vtbl **)a1[5];
  v10.__vftable = *v5;
  *v5 = 0;
  LOBYTE(v10.__imp_.__imp_) = 1;
  sub_20EFC5094((uint64_t *)(v4 + 88), (uint64_t)(a1 + 3), (uint64_t)&v10);
  if (LOBYTE(v10.__imp_.__imp_))
    MEMORY[0x212BC623C](&v10);
  p_shared_owners = (unint64_t *)&v3->__shared_owners_;
  do
    v7 = __ldaxr(p_shared_owners);
  while (__stlxr(v7 - 1, p_shared_owners));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
}

void sub_20EFC63D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10, std::runtime_error a11)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (LOBYTE(a11.__imp_.__imp_))
    MEMORY[0x212BC623C](&a11);
  p_shared_owners = (unint64_t *)&v11->__shared_owners_;
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20EFC6480(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__110shared_ptrIKNS_3vio17feature_detection18VIOFram"
                     "eDebugEventEEEvNS6_10mapping_io23MappingIONodeGroupErrorEvLb0EE7ProcessERKSA_NS4_7promiseIvEEEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__110shared_ptrIKNS_3vio17feature_detecti"
                                "on18VIOFrameDebugEventEEEvNS6_10mapping_io23MappingIONodeGroupErrorEvLb0EE7ProcessERKSA_"
                                "NS4_7promiseIvEEEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__110shared_ptrIKNS_3vio17feature_detection18VIOFrameDebugEventEEEvNS6_10mapping_io23MappingIONodeGroupErrorEvLb0EE7ProcessERKSA_NS4_7promiseIvEEEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__110shared_ptrIKNS_3vio17feature_detection18VIOFrameDebugEventEEEvNS6_10mapping_io23MappingIONodeGroupErrorEvLb0EE7ProcessERKSA_NS4_7promiseIvEEEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20EFC64EC()
{
  return &unk_24C9F4078;
}

_QWORD *sub_20EFC64F8(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_24C9F4098;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_20EFC6530(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_24C9F4098;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20EFC6578(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x20uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *result = &off_24C9F4098;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  return result;
}

uint64_t sub_20EFC65C8(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = *(_QWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 16);
  *a2 = &off_24C9F4098;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

void sub_20EFC65F8(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void sub_20EFC6608(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void sub_20EFC6634(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 8);
      if (v5)
      {
        v6 = operator new(0x18uLL);
        v8 = *(_QWORD *)(v5 + 96);
        v7 = (_QWORD *)(v5 + 96);
        *v6 = v8;
        v6[1] = v7;
        *(_QWORD *)(v8 + 8) = v6;
        *v7 = v6;
        ++v7[2];
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v10 = __ldaxr(p_shared_owners);
      while (__stlxr(v10 - 1, p_shared_owners));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_20EFC66C8(_Unwind_Exception *exception_object)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v4;

  p_shared_owners = (unint64_t *)&v1->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20EFC6704(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3kit11concurrency6detail9ProcessorINSt3__110shared_ptrIKNS_3vio17feature_detection18VIOFrame"
                     "DebugEventEEEvNS6_10mapping_io23MappingIONodeGroupErrorEvLb0EE9SubscribeENS1_12ChannelInputIvEEEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4cv3d3kit11concurrency6detail9ProcessorINSt3__110shared_ptrIKNS_3vio17feature_detectio"
                                "n18VIOFrameDebugEventEEEvNS6_10mapping_io23MappingIONodeGroupErrorEvLb0EE9SubscribeENS1_"
                                "12ChannelInputIvEEEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3kit11concurrency6detail9ProcessorINSt3__110shared_ptrIKNS_3vio17feature_detection18VIOFrameDebugEventEEEvNS6_10mapping_io23MappingIONodeGroupErrorEvLb0EE9SubscribeENS1_12ChannelInputIvEEEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3kit11concurrency6detail9ProcessorINSt3__110shared_ptrIKNS_3vio17feature_detection18VIOFrameDebugEventEEEvNS6_10mapping_io23MappingIONodeGroupErrorEvLb0EE9SubscribeENS1_12ChannelInputIvEEEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20EFC6770()
{
  return &unk_24C9F40F8;
}

_QWORD *sub_20EFC677C(_QWORD *a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;

  *a1 = &off_24C9F4118;
  v2 = a1[4];
  a1[3] = &off_24C9B46A0;
  a1[4] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = (std::__shared_weak_count *)a1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  return a1;
}

void sub_20EFC67D4(_QWORD *a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;

  *a1 = &off_24C9F4118;
  v2 = a1[4];
  a1[3] = &off_24C9B46A0;
  a1[4] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = (std::__shared_weak_count *)a1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20EFC683C(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;

  v2 = operator new(0x28uLL);
  v3 = v2;
  v5 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  *v2 = &off_24C9F4118;
  v2[1] = v5;
  v2[2] = v4;
  if (v4)
  {
    v6 = (unint64_t *)(v4 + 16);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  v2[3] = &off_24C9B46A0;
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32));
  return v3;
}

void sub_20EFC68B4(_Unwind_Exception *a1)
{
  _QWORD *v1;
  std::__shared_weak_count *v3;

  v3 = (std::__shared_weak_count *)v1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20EFC68D4(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  *a2 = &off_24C9F4118;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  a2[3] = &off_24C9B46A0;
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32));
}

void sub_20EFC693C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  std::__shared_weak_count *v3;

  v3 = *(std::__shared_weak_count **)(v1 + 16);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  _Unwind_Resume(exception_object);
}

void sub_20EFC6954(_QWORD *a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;

  v2 = a1[4];
  a1[3] = &off_24C9B46A0;
  a1[4] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = (std::__shared_weak_count *)a1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
}

void sub_20EFC69A4(_QWORD *__p)
{
  uint64_t v2;
  std::__shared_weak_count *v3;

  v2 = __p[4];
  __p[3] = &off_24C9B46A0;
  __p[4] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = (std::__shared_weak_count *)__p[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  operator delete(__p);
}

void sub_20EFC69F0(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;

  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = a1[1];
      if (v5)
      {
        v6 = operator new(0x20uLL);
        v7 = a1[4];
        a1[4] = 0;
        v6[2] = &off_24C9B46A0;
        v6[3] = v7;
        v9 = *(_QWORD *)(v5 + 120);
        v8 = (_QWORD *)(v5 + 120);
        *v6 = v9;
        v6[1] = v8;
        *(_QWORD *)(v9 + 8) = v6;
        *v8 = v6;
        ++v8[2];
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v11 = __ldaxr(p_shared_owners);
      while (__stlxr(v11 - 1, p_shared_owners));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_20EFC6AA4(_Unwind_Exception *exception_object)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v4;

  p_shared_owners = (unint64_t *)&v1->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20EFC6AE0(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3kit11concurrency6detail9ProcessorINSt3__110shared_ptrIKNS_3vio17feature_detection18VIOFrame"
                     "DebugEventEEEvNS6_10mapping_io23MappingIONodeGroupErrorEvLb0EE15AddErrorHandlerENS1_12ChannelInputISC_EEEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4cv3d3kit11concurrency6detail9ProcessorINSt3__110shared_ptrIKNS_3vio17feature_detectio"
                                "n18VIOFrameDebugEventEEEvNS6_10mapping_io23MappingIONodeGroupErrorEvLb0EE15AddErrorHandl"
                                "erENS1_12ChannelInputISC_EEEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3kit11concurrency6detail9ProcessorINSt3__110shared_ptrIKNS_3vio17feature_detection18VIOFrameDebugEventEEEvNS6_10mapping_io23MappingIONodeGroupErrorEvLb0EE15AddErrorHandlerENS1_12ChannelInputISC_EEEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3kit11concurrency6detail9ProcessorINSt3__110shared_ptrIKNS_3vio17feature_detection18VIOFrameDebugEventEEEvNS6_10mapping_io23MappingIONodeGroupErrorEvLb0EE15AddErrorHandlerENS1_12ChannelInputISC_EEEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20EFC6B4C()
{
  return &unk_24C9F4178;
}

_QWORD *sub_20EFC6B58(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_24C9F4198;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_20EFC6B90(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_24C9F4198;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20EFC6BD8(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x20uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = &off_24C9F4198;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  result[3] = a1[3];
  return result;
}

_QWORD *sub_20EFC6C30(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = result[1];
  v2 = result[2];
  *a2 = &off_24C9F4198;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  a2[3] = result[3];
  return result;
}

void sub_20EFC6C68(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void sub_20EFC6C78(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void sub_20EFC6CA4(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  void *__p;
  void *v9;
  uint64_t v10;

  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      if (a1[1])
      {
        v5 = (uint64_t *)a1[3];
        __p = 0;
        v9 = 0;
        v10 = 0;
        if (!*v5)
          sub_20E96CE78(3u);
        sub_20EA04C5C(*v5, (uint64_t)&__p);
        if (__p)
        {
          v9 = __p;
          operator delete(__p);
        }
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_20EFC6D5C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (__p)
    operator delete(__p);
  p_shared_owners = (unint64_t *)&v11->__shared_owners_;
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20EFC6DA8(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__110shared_ptrIKNS_3vio17feature_detection18VIOFram"
                     "eDebugEventEEEvNS6_10mapping_io23MappingIONodeGroupErrorEvLb0EE16OutputHandlerIDsEvEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__110shared_ptrIKNS_3vio17feature_detecti"
                                "on18VIOFrameDebugEventEEEvNS6_10mapping_io23MappingIONodeGroupErrorEvLb0EE16OutputHandlerIDsEvEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__110shared_ptrIKNS_3vio17feature_detection18VIOFrameDebugEventEEEvNS6_10mapping_io23MappingIONodeGroupErrorEvLb0EE16OutputHandlerIDsEvEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__110shared_ptrIKNS_3vio17feature_detection18VIOFrameDebugEventEEEvNS6_10mapping_io23MappingIONodeGroupErrorEvLb0EE16OutputHandlerIDsEvEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20EFC6E14()
{
  return &unk_24C9F41F8;
}

_QWORD *sub_20EFC6E20(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_24C9F4218;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_20EFC6E58(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_24C9F4218;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20EFC6EA0(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x20uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = &off_24C9F4218;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  result[3] = a1[3];
  return result;
}

_QWORD *sub_20EFC6EF8(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = result[1];
  v2 = result[2];
  *a2 = &off_24C9F4218;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  a2[3] = result[3];
  return result;
}

void sub_20EFC6F30(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void sub_20EFC6F40(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void sub_20EFC6F6C(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  uint64_t *v6;
  unint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p[2];
  char *v16;
  __int128 v17;
  char *v18;
  uint64_t v19;
  __int128 *v20;

  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = a1[1];
      if (!v5)
      {
LABEL_11:
        p_shared_owners = (unint64_t *)&v4->__shared_owners_;
        do
          v14 = __ldaxr(p_shared_owners);
        while (__stlxr(v14 - 1, p_shared_owners));
        if (!v14)
        {
          ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
          std::__shared_weak_count::__release_weak(v4);
        }
        return;
      }
      v6 = (uint64_t *)a1[3];
      v7 = *(_QWORD *)(v5 + 136);
      v18 = 0;
      v17 = 0uLL;
      if (v7)
      {
        if (v7 >> 61)
          sub_20E92CED8();
        v8 = (char *)operator new(8 * v7);
        v9 = &v8[8 * v7];
        *(_QWORD *)&v17 = v8;
        *((_QWORD *)&v17 + 1) = v8;
        v18 = v9;
        v10 = v5 + 120;
        v11 = *(_QWORD *)(v5 + 128);
        v20 = &v17;
        if (v11 != v10)
        {
          do
          {
LABEL_7:
            v19 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v11 + 24) + 48))(*(_QWORD *)(v11 + 24));
            sub_20E9B2D04((uint64_t *)&v20, &v19);
            v11 = *(_QWORD *)(v11 + 8);
          }
          while (v11 != v10);
          *(_OWORD *)__p = v17;
          v16 = v18;
          v12 = *v6;
          if (*v6)
            goto LABEL_9;
          goto LABEL_18;
        }
      }
      else
      {
        v9 = 0;
        v8 = 0;
        v10 = v5 + 120;
        v11 = *(_QWORD *)(v5 + 128);
        v20 = &v17;
        if (v11 != v10)
          goto LABEL_7;
      }
      *(int64x2_t *)__p = vdupq_n_s64((unint64_t)v8);
      v16 = v9;
      v12 = *v6;
      if (*v6)
      {
LABEL_9:
        sub_20EA04C5C(v12, (uint64_t)__p);
        if (__p[0])
        {
          __p[1] = __p[0];
          operator delete(__p[0]);
        }
        goto LABEL_11;
      }
LABEL_18:
      sub_20E96CE78(3u);
    }
  }
}

void sub_20EFC70E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v17;

  if (__p)
    operator delete(__p);
  p_shared_owners = (unint64_t *)&v14->__shared_owners_;
  do
    v17 = __ldaxr(p_shared_owners);
  while (__stlxr(v17 - 1, p_shared_owners));
  if (!v17)
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20EFC7158(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__110shared_ptrIKNS_3vio17feature_detection18VIOFram"
                     "eDebugEventEEEvNS6_10mapping_io23MappingIONodeGroupErrorEvLb0EE15ErrorHandlerIDsEvEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__110shared_ptrIKNS_3vio17feature_detecti"
                                "on18VIOFrameDebugEventEEEvNS6_10mapping_io23MappingIONodeGroupErrorEvLb0EE15ErrorHandlerIDsEvEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__110shared_ptrIKNS_3vio17feature_detection18VIOFrameDebugEventEEEvNS6_10mapping_io23MappingIONodeGroupErrorEvLb0EE15ErrorHandlerIDsEvEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__110shared_ptrIKNS_3vio17feature_detection18VIOFrameDebugEventEEEvNS6_10mapping_io23MappingIONodeGroupErrorEvLb0EE15ErrorHandlerIDsEvEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20EFC71C4()
{
  return &unk_24C9F4278;
}

void sub_20EFC71D4(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20EFC71F8(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t sub_20EFC7210(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail9ProcessorINS0_IKNS1_3vio17feature_detection18VIO"
                     "FrameDebugEventEEEvNS6_10mapping_io23MappingIONodeGroupErrorEvLb0EEEE27__shared_ptr_default_deleteISD_SD_EE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail9ProcessorINS0_IKNS1_3vio17feature_det"
                                "ection18VIOFrameDebugEventEEEvNS6_10mapping_io23MappingIONodeGroupErrorEvLb0EEEE27__shar"
                                "ed_ptr_default_deleteISD_SD_EE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail9ProcessorINS0_IKNS1_3vio17feature_detection18VIOFrameDebugEventEEEvNS6_10mapping_io23MappingIONodeGroupErrorEvLb0EEEE27__shared_ptr_default_deleteISD_SD_EE"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail9ProcessorINS0_IKNS1_3vio17feature_detection18VIOFrameDebugEventEEEvNS6_10mapping_io23MappingIONodeGroupErrorEvLb0EEEE27__shared_ptr_default_deleteISD_SD_EE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

uint64_t sub_20EFC7280(uint64_t a1)
{
  std::__shared_weak_count *v2;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_20EFC72AC(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20EFC72E8@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *result;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;

  result = (_QWORD *)operator new();
  v6 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  *result = &off_24C9F42E8;
  result[1] = v6;
  result[2] = v5;
  if (v5)
  {
    v7 = (unint64_t *)(v5 + 16);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  *a2 = result;
  return result;
}

void sub_20EFC7350(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 8);
      if (v5)
        (*(void (**)(uint64_t))(*(_QWORD *)v5 + 32))(v5);
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_20EFC73E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20EFC73F4(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 8);
      if (v5)
        (*(void (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_20EFC7484(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20EFC7498(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return 0;
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
    return 0;
  v4 = v3;
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
    v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 48))(v5);
  else
    v6 = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (v9)
    return v6;
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return v6;
}

void sub_20EFC755C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20EFC7570(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return 0;
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
    return 0;
  v4 = v3;
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
    v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 24))(v5);
  else
    v6 = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (v9)
    return v6;
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return v6;
}

void sub_20EFC7634(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20EFC7648(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3)
  {
    v5 = std::__shared_weak_count::lock(v3);
    if (v5)
    {
      v6 = v5;
      v7 = *(_QWORD *)(a1 + 8);
      if (v7)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v7 + 16))(v7, a2);
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
}

void sub_20EFC76EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20EFC7704(uint64_t a1)
{
  sub_20EFC8F34(a1);
  JUMPOUT(0x212BC6398);
}

void sub_20EFC7728(_QWORD *a1, _BYTE *a2)
{
  uint64_t *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t *p_shared_weak_owners;
  std::__shared_weak_count *v8;
  unint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  std::__shared_weak_count **v13;
  unint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  std::mutex **v24;
  uint64_t **v25;
  std::__shared_weak_count *v26;
  std::__shared_weak_count *v27;
  std::__shared_weak_count *v28;
  uint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  unint64_t *v32;
  unint64_t v33;
  uint64_t **v34;
  std::__shared_weak_count *v35;
  std::__shared_weak_count *v36;
  std::__shared_weak_count *v37;
  uint64_t v38;
  unint64_t *v39;
  unint64_t v40;
  unint64_t *v41;
  unint64_t v42;
  char *v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t *v46;
  unint64_t v47;
  char v48;
  _QWORD *v49;
  __int128 *v50;
  uint64_t v51;
  __int128 v52;
  uint64_t v53;
  __int128 *v54;
  _BYTE v55[24];
  _BYTE *v56;
  uint64_t v57;

  v57 = *MEMORY[0x24BDAC8D0];
  if (!(*(unsigned int (**)(_QWORD *))(*a1 + 48))(a1))
    return;
  if (!a1[9]
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 234, (uint64_t)"scheduler_", 10, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v4 = (uint64_t *)a1[18];
  if (v4)
  {
    v5 = (std::__shared_weak_count *)operator new(0x20uLL);
    v5->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    v5->__shared_weak_owners_ = 0;
    p_shared_weak_owners = (unint64_t *)&v5->__shared_weak_owners_;
    v5->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9D4740;
    LOBYTE(v5[1].__vftable) = *a2;
    v8 = v5 + 1;
    do
      v9 = __ldxr(p_shared_weak_owners);
    while (__stxr(v9 + 1, p_shared_weak_owners));
    v10 = (_QWORD *)operator new();
    *v10 = v4 + 7;
    std::mutex::lock((std::mutex *)(v4 + 7));
    *(_QWORD *)&v52 = v10;
    *((_QWORD *)&v52 + 1) = v4;
    if (!*((_BYTE *)v4 + 48))
      sub_20E866B34();
    v11 = v4[4];
    v12 = *v4;
    v13 = (std::__shared_weak_count **)(*v4 + 16 * v11);
    do
      v14 = __ldxr(p_shared_owners);
    while (__stxr(v14 + 1, p_shared_owners));
    *v13 = v8;
    v15 = v12 + 16 * v11;
    v16 = *(std::__shared_weak_count **)(v15 + 8);
    *(_QWORD *)(v15 + 8) = v5;
    if (v16)
    {
      v17 = (unint64_t *)&v16->__shared_owners_;
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
    v19 = (v4[1] - *v4) >> 4;
    v20 = v4[5];
    v21 = v4[4] + 1;
    if (v21 >= v19)
      v22 = (v4[1] - *v4) >> 4;
    else
      v22 = 0;
    v4[4] = v21 - v22;
    if (v20 == v19)
    {
      v23 = v4[3] + 1;
      if (v23 < v19)
        v19 = 0;
      v4[3] = v23 - v19;
      v24 = (std::mutex **)v52;
      if (!(_QWORD)v52)
      {
LABEL_33:
        v34 = (uint64_t **)a1[9];
        v52 = 0uLL;
        v35 = (std::__shared_weak_count *)a1[5];
        if (v35)
        {
          v36 = std::__shared_weak_count::lock(v35);
          if (v36)
          {
            v37 = v36;
            v38 = a1[4];
            v39 = (unint64_t *)&v36->__shared_weak_owners_;
            do
              v40 = __ldxr(v39);
            while (__stxr(v40 + 1, v39));
            *(_QWORD *)&v52 = v38;
            *((_QWORD *)&v52 + 1) = v36;
            v41 = (unint64_t *)&v36->__shared_owners_;
            do
              v42 = __ldaxr(v41);
            while (__stlxr(v42 - 1, v41));
            if (!v42)
            {
              ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
              std::__shared_weak_count::__release_weak(v37);
            }
          }
          else
          {
            v52 = 0uLL;
          }
        }
        v43 = (char *)operator new(0x30uLL);
        *(_QWORD *)v43 = &off_24C9F4540;
        *(_OWORD *)(v43 + 8) = v52;
        v52 = 0uLL;
        *((_QWORD *)v43 + 3) = v8;
        *((_QWORD *)v43 + 4) = v5;
        v53 = 0;
        v54 = 0;
        v56 = v43;
        sub_210216F3C(*v34, (uint64_t)v55);
        v44 = v56;
        if (v56 == v55)
        {
          v45 = 4;
          v44 = v55;
        }
        else
        {
          if (!v56)
            goto LABEL_47;
          v45 = 5;
        }
        (*(void (**)(_QWORD *))(*v44 + 8 * v45))(v44);
LABEL_47:
        if (v5)
        {
          v46 = (unint64_t *)&v5->__shared_owners_;
          do
            v47 = __ldaxr(v46);
          while (__stlxr(v47 - 1, v46));
          if (!v47)
          {
            ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
            std::__shared_weak_count::__release_weak(v5);
          }
        }
        return;
      }
    }
    else
    {
      v4[5] = v20 + 1;
      v24 = (std::mutex **)v52;
      if (!(_QWORD)v52)
        goto LABEL_33;
    }
    std::mutex::unlock(*v24);
    MEMORY[0x212BC6398](v24, 0x20C4093837F09);
    goto LABEL_33;
  }
  v25 = (uint64_t **)a1[9];
  v26 = (std::__shared_weak_count *)a1[5];
  if (v26)
  {
    v27 = std::__shared_weak_count::lock(v26);
    v28 = v27;
    if (v27)
    {
      v29 = a1[4];
      v30 = (unint64_t *)&v27->__shared_weak_owners_;
      do
        v31 = __ldxr(v30);
      while (__stxr(v31 + 1, v30));
      v32 = (unint64_t *)&v27->__shared_owners_;
      do
        v33 = __ldaxr(v32);
      while (__stlxr(v33 - 1, v32));
      if (!v33)
      {
        ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
        std::__shared_weak_count::__release_weak(v28);
      }
    }
    else
    {
      v29 = 0;
    }
  }
  else
  {
    v29 = 0;
    v28 = 0;
  }
  v48 = *a2;
  v49 = operator new(0x20uLL);
  *v49 = &off_24C9F45C0;
  v49[1] = v29;
  v49[2] = v28;
  *((_BYTE *)v49 + 24) = v48;
  v54 = (__int128 *)v49;
  sub_210216F3C(*v25, (uint64_t)&v52);
  v50 = v54;
  if (v54 == &v52)
  {
    v51 = 4;
    v50 = &v52;
  }
  else
  {
    if (!v54)
      return;
    v51 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v50 + 8 * v51))();
}

void sub_20EFC7B3C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  uint64_t v19;

  if (a14 == v19)
  {
    (*(void (**)(void))(a11 + 32))();
    _Unwind_Resume(exception_object);
  }
  if (a14)
  {
    (*(void (**)(void))(*(_QWORD *)a14 + 40))();
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_20EFC7C30(_QWORD *a1, char *a2, std::__shared_weak_count_vtbl **a3)
{
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t *p_shared_weak_owners;
  std::__shared_weak_count *v12;
  unint64_t v13;
  uint64_t *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  std::__shared_weak_count **v18;
  unint64_t v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  std::mutex **v29;
  uint64_t **v30;
  std::__shared_weak_count *v31;
  std::__shared_weak_count *v32;
  std::__shared_weak_count *v33;
  uint64_t v34;
  unint64_t *v35;
  unint64_t v36;
  unint64_t *v37;
  unint64_t v38;
  uint64_t **v39;
  std::__shared_weak_count *v40;
  std::__shared_weak_count *v41;
  std::__shared_weak_count *v42;
  uint64_t v43;
  unint64_t *v44;
  unint64_t v45;
  unint64_t *v46;
  unint64_t v47;
  char *v48;
  std::string *v49;
  uint64_t v50;
  uint64_t *v51;
  unint64_t v52;
  unint64_t *v53;
  unint64_t v54;
  _QWORD *v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  __int128 *v61;
  uint64_t v62;
  _QWORD *v63;
  _QWORD *v64;
  _QWORD *v65;
  __int128 *v66;
  std::string *v67;
  std::runtime_error *exception;
  std::runtime_error *v69;
  __int128 v70;
  char v71;
  _QWORD *v72;
  std::__shared_weak_count *v73;
  std::__shared_weak_count *v74;
  std::runtime_error v75;
  std::__shared_weak_count *v76;
  std::__shared_weak_count *v77;
  __int128 v78;
  _QWORD *v79;
  __int128 *v80;
  _QWORD v81[3];
  std::string v82;
  std::string *v83;
  uint64_t v84;

  v84 = *MEMORY[0x24BDAC8D0];
  if (((*(uint64_t (**)(_QWORD *))(*a1 + 48))(a1) & 1) == 0)
  {
    *(_QWORD *)&v78 = "Invalid operation. Interface is disabled for ";
    *((_QWORD *)&v78 + 1) = 45;
    v65 = (_QWORD *)a1[6];
    v64 = a1 + 6;
    v63 = v65;
    v66 = (__int128 *)*((unsigned __int8 *)v64 + 23);
    if ((char)v66 < 0)
      v66 = (__int128 *)v64[1];
    else
      v63 = v64;
    v79 = v63;
    v80 = v66;
    sub_20E8778D4((uint64_t)&v78, (uint64_t)v81, 0, 0, &v82);
    if ((v82.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v67 = &v82;
    else
      v67 = (std::string *)v82.__r_.__value_.__r.__words[0];
    std::runtime_error::runtime_error(&v75, (const char *)v67);
    v75.__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v69 = std::runtime_error::runtime_error(exception, &v75);
    v69->__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    __cxa_throw(v69, (struct type_info *)&unk_24CA1E2D0, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  if (!a1[9]
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 294, (uint64_t)"scheduler_", 10, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  if (a1[18])
  {
    v6 = (std::__shared_weak_count *)operator new(0x20uLL);
    v6->__shared_weak_owners_ = 0;
    v6->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9F4640;
    v6[1].__vftable = *a3;
    v74 = v6;
    v72 = &v6[1].__vftable;
    v73 = v6;
    v6->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    *a3 = 0;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    if (!a1[18]
      && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 414, (uint64_t)"limiting_buffer_", 16, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v9 = (std::__shared_weak_count *)operator new(0x20uLL);
    v9->__shared_owners_ = 0;
    v10 = (unint64_t *)&v9->__shared_owners_;
    v9->__shared_weak_owners_ = 0;
    p_shared_weak_owners = (unint64_t *)&v9->__shared_weak_owners_;
    v9->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9D4740;
    LOBYTE(v9[1].__vftable) = *a2;
    v12 = v9 + 1;
    v76 = v9 + 1;
    v77 = v9;
    do
      v13 = __ldxr(p_shared_weak_owners);
    while (__stxr(v13 + 1, p_shared_weak_owners));
    v14 = (uint64_t *)a1[18];
    v15 = (_QWORD *)operator new();
    *v15 = v14 + 7;
    std::mutex::lock((std::mutex *)(v14 + 7));
    *(_QWORD *)&v78 = v15;
    *((_QWORD *)&v78 + 1) = v14;
    if (!*((_BYTE *)v14 + 48))
      sub_20E866B34();
    v16 = v14[4];
    v17 = *v14;
    v18 = (std::__shared_weak_count **)(*v14 + 16 * v16);
    do
      v19 = __ldxr(v10);
    while (__stxr(v19 + 1, v10));
    *v18 = v12;
    v20 = v17 + 16 * v16;
    v21 = *(std::__shared_weak_count **)(v20 + 8);
    *(_QWORD *)(v20 + 8) = v9;
    if (v21)
    {
      v22 = (unint64_t *)&v21->__shared_owners_;
      do
        v23 = __ldaxr(v22);
      while (__stlxr(v23 - 1, v22));
      if (!v23)
      {
        ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
        std::__shared_weak_count::__release_weak(v21);
      }
    }
    v24 = (v14[1] - *v14) >> 4;
    v25 = v14[5];
    v26 = v14[4] + 1;
    if (v26 >= v24)
      v27 = (v14[1] - *v14) >> 4;
    else
      v27 = 0;
    v14[4] = v26 - v27;
    if (v25 == v24)
    {
      v28 = v14[3] + 1;
      if (v28 < v24)
        v24 = 0;
      v14[3] = v28 - v24;
      v29 = (std::mutex **)v78;
      if (!(_QWORD)v78)
      {
LABEL_37:
        v39 = (uint64_t **)a1[9];
        v78 = 0uLL;
        v40 = (std::__shared_weak_count *)a1[5];
        if (v40)
        {
          v41 = std::__shared_weak_count::lock(v40);
          if (v41)
          {
            v42 = v41;
            v43 = a1[4];
            v44 = (unint64_t *)&v41->__shared_weak_owners_;
            do
              v45 = __ldxr(v44);
            while (__stxr(v45 + 1, v44));
            *(_QWORD *)&v78 = v43;
            *((_QWORD *)&v78 + 1) = v41;
            v46 = (unint64_t *)&v41->__shared_owners_;
            do
              v47 = __ldaxr(v46);
            while (__stlxr(v47 - 1, v46));
            if (!v47)
            {
              ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
              std::__shared_weak_count::__release_weak(v42);
            }
          }
          else
          {
            v78 = 0uLL;
          }
        }
        v48 = (char *)operator new(0x38uLL);
        *(_QWORD *)v48 = &off_24C9F4690;
        *(_OWORD *)(v48 + 8) = v78;
        v78 = 0uLL;
        *((_QWORD *)v48 + 3) = v12;
        *((_QWORD *)v48 + 4) = v9;
        v79 = 0;
        v80 = 0;
        *((_QWORD *)v48 + 5) = v72;
        *((_QWORD *)v48 + 6) = v73;
        v81[0] = 0;
        v81[1] = 0;
        v83 = (std::string *)v48;
        sub_210216F3C(*v39, (uint64_t)&v82);
        v49 = v83;
        if (v83 == &v82)
        {
          v50 = 4;
          v49 = &v82;
        }
        else
        {
          if (!v83)
            goto LABEL_51;
          v50 = 5;
        }
        (*(void (**)(void))(v49->__r_.__value_.__r.__words[0] + 8 * v50))();
LABEL_51:
        if (v77)
        {
          v51 = &v77->__shared_owners_;
          do
            v52 = __ldaxr((unint64_t *)v51);
          while (__stlxr(v52 - 1, (unint64_t *)v51));
          if (!v52)
          {
            ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
            std::__shared_weak_count::__release_weak(v77);
          }
        }
        if (v74)
        {
          v53 = (unint64_t *)&v74->__shared_owners_;
          do
            v54 = __ldaxr(v53);
          while (__stlxr(v54 - 1, v53));
          if (!v54)
          {
            ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
            std::__shared_weak_count::__release_weak(v74);
          }
        }
        return;
      }
    }
    else
    {
      v14[5] = v25 + 1;
      v29 = (std::mutex **)v78;
      if (!(_QWORD)v78)
        goto LABEL_37;
    }
    std::mutex::unlock(*v29);
    MEMORY[0x212BC6398](v29, 0x20C4093837F09);
    goto LABEL_37;
  }
  v30 = (uint64_t **)a1[9];
  v70 = 0uLL;
  v31 = (std::__shared_weak_count *)a1[5];
  if (v31)
  {
    v32 = std::__shared_weak_count::lock(v31);
    if (v32)
    {
      v33 = v32;
      v34 = a1[4];
      v35 = (unint64_t *)&v32->__shared_weak_owners_;
      do
        v36 = __ldxr(v35);
      while (__stxr(v36 + 1, v35));
      *(_QWORD *)&v70 = v34;
      *((_QWORD *)&v70 + 1) = v32;
      v37 = (unint64_t *)&v32->__shared_owners_;
      do
        v38 = __ldaxr(v37);
      while (__stlxr(v38 - 1, v37));
      if (!v38)
      {
        ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
        std::__shared_weak_count::__release_weak(v33);
      }
    }
    else
    {
      v70 = 0uLL;
    }
  }
  v71 = *a2;
  v55 = operator new(0x20uLL);
  v55[1] = 0;
  v55[2] = 0;
  *v55 = &off_24C9F4640;
  v55[3] = *a3;
  *a3 = 0;
  v56 = (char *)operator new(0x30uLL);
  *(_QWORD *)v56 = &off_24C9F4710;
  *(_OWORD *)(v56 + 8) = v70;
  v56[24] = v71;
  *((_QWORD *)v56 + 4) = v55 + 3;
  *((_QWORD *)v56 + 5) = v55;
  v80 = (__int128 *)v56;
  sub_210216F3C(*v30, (uint64_t)&v78);
  v61 = v80;
  if (v80 == &v78)
  {
    v62 = 4;
    v61 = &v78;
  }
  else
  {
    if (!v80)
      return;
    v62 = 5;
  }
  (*(void (**)(__int128 *, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v61 + 8 * v62))(v61, v57, v58, v59, v60);
}

void sub_20EFC824C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, std::runtime_error a18, std::exception_ptr a19, uint64_t a20,uint64_t a21,std::exception_ptr a22)
{
  std::__assoc_sub_state **v22;
  uint64_t v23;
  std::__assoc_sub_state *v24;
  std::exception_ptr v25;

  if (a2)
  {
    __cxa_begin_catch(exception_object);
    std::current_exception();
    __cxa_end_catch();
    v24 = *v22;
    if (*v22)
    {
      std::exception_ptr::exception_ptr(&a22, &a19);
      v25.__ptr_ = &a22;
      std::__assoc_sub_state::set_exception(v24, v25);
      std::exception_ptr::~exception_ptr(&a22);
      std::exception_ptr::~exception_ptr(&a19);
      std::runtime_error::~runtime_error(&a18);
      if (*(char *)(v23 - 81) < 0)
        operator delete(*(void **)(v23 - 104));
      JUMPOUT(0x20EFC8160);
    }
    sub_20E96CE78(3u);
  }
  _Unwind_Resume(exception_object);
}

void sub_20EFC82C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, std::runtime_error a18, std::exception_ptr a19, uint64_t a20,uint64_t a21,std::exception_ptr a22)
{
  uint64_t v22;

  std::exception_ptr::~exception_ptr(&a19);
  std::runtime_error::~runtime_error(&a18);
  if (*(char *)(v22 - 81) < 0)
  {
    operator delete(*(void **)(v22 - 104));
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void sub_20EFC8314(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,char *a26)
{
  char *v26;
  char *v28;
  uint64_t v29;

  v28 = a26;
  if (a26 == v26)
  {
    v29 = 4;
    v28 = &a23;
  }
  else
  {
    if (!a26)
    {
      sub_20EA25E90((uint64_t)&a9);
      _Unwind_Resume(a1);
    }
    v29 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v28 + 8 * v29))();
  sub_20EA25E90((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20EFC8368(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10)
  {
    std::__shared_weak_count::__release_weak(a10);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void sub_20EFC838C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  va_list va;
  uint64_t v13;
  uint64_t v14;
  va_list va1;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  va_list va2;
  uint64_t v22;
  va_list va3;

  va_start(va3, a6);
  va_start(va2, a6);
  va_start(va1, a6);
  va_start(va, a6);
  v11 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v14 = va_arg(va2, _QWORD);
  v16 = va_arg(va2, _QWORD);
  v17 = va_arg(va2, _QWORD);
  v18 = va_arg(va2, _QWORD);
  v19 = va_arg(va2, _QWORD);
  va_copy(va3, va2);
  v20 = va_arg(va3, _QWORD);
  v22 = va_arg(va3, _QWORD);
  v9 = *(_QWORD **)(v7 - 80);
  if (v9 == v6)
  {
    v10 = 4;
    v9 = (_QWORD *)(v7 - 104);
  }
  else
  {
    if (!v9)
      goto LABEL_6;
    v10 = 5;
  }
  (*(void (**)(void))(*v9 + 8 * v10))();
LABEL_6:
  sub_20EA031A8((uint64_t *)va3);
  sub_20E86665C((uint64_t)va2);
  sub_20E86665C((uint64_t)va);
  sub_20E86665C((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_20EFC842C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  uint64_t v7;
  va_list va;
  uint64_t v9;
  va_list va1;

  va_start(va1, a6);
  va_start(va, a6);
  v7 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  sub_20E86665C((uint64_t)va);
  sub_20E86665C((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_20EFC8448(uint64_t a1)
{
  uint64_t *v1;

  v1 = *(uint64_t **)(a1 + 72);
  if (v1)
  {
    sub_210217048(*v1);
  }
  else
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 167, (uint64_t)"scheduler_ != nullptr", 21, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    sub_210217048(**(_QWORD **)(a1 + 72));
  }
}

_QWORD *sub_20EFC84BC(_QWORD *a1, uint64_t a2)
{
  uint64_t **v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *result;
  uint64_t v12;
  _BYTE v13[24];
  _BYTE *v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v4 = (uint64_t **)a1[9];
  if (!v4)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 181, (uint64_t)"scheduler_", 10, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v4 = (uint64_t **)a1[9];
  }
  v6 = a1[4];
  v5 = a1[5];
  if (v5)
  {
    v7 = (unint64_t *)(v5 + 16);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  v9 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v10 = operator new(0x28uLL);
  *v10 = &off_24C9F4790;
  v10[1] = v6;
  v10[2] = v5;
  v10[3] = &off_24C9B4710;
  v10[4] = v9;
  v14 = v10;
  sub_210216F3C(*v4, (uint64_t)v13);
  result = v14;
  if (v14 == v13)
  {
    v12 = 4;
    result = v13;
  }
  else
  {
    if (!v14)
      return result;
    v12 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v12))();
}

void sub_20EFC85EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v13;

  if (a13 == v13)
  {
    (*(void (**)(void))(a10 + 32))();
    _Unwind_Resume(exception_object);
  }
  if (a13)
  {
    (*(void (**)(void))(*(_QWORD *)a13 + 40))();
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20EFC8660(_QWORD *a1, uint64_t a2)
{
  uint64_t **v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *result;
  uint64_t v12;
  _BYTE v13[24];
  _BYTE *v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v4 = (uint64_t **)a1[9];
  if (!v4)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 202, (uint64_t)"scheduler_", 10, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v4 = (uint64_t **)a1[9];
  }
  v6 = a1[4];
  v5 = a1[5];
  if (v5)
  {
    v7 = (unint64_t *)(v5 + 16);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  v9 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v10 = operator new(0x28uLL);
  *v10 = &off_24C9F4810;
  v10[1] = v6;
  v10[2] = v5;
  v10[3] = &off_24C9B46A0;
  v10[4] = v9;
  v14 = v10;
  sub_210216F3C(*v4, (uint64_t)v13);
  result = v14;
  if (v14 == v13)
  {
    v12 = 4;
    result = v13;
  }
  else
  {
    if (!v14)
      return result;
    v12 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v12))();
}

void sub_20EFC8790(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v13;

  if (a13 == v13)
  {
    (*(void (**)(void))(a10 + 32))();
    _Unwind_Resume(exception_object);
  }
  if (a13)
  {
    (*(void (**)(void))(*(_QWORD *)a13 + 40))();
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_20EFC8804@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  unint64_t *v5;
  int v6;
  unint64_t v7;
  uint64_t **v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *p_shared_weak_owners;
  unint64_t v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v22;
  _BYTE v23[24];
  _BYTE *v24;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  v4 = operator new();
  *(_QWORD *)(v4 + 8) = 0;
  v5 = (unint64_t *)(v4 + 8);
  *(_QWORD *)(v4 + 24) = 850045863;
  *(_QWORD *)(v4 + 16) = 0;
  *(_OWORD *)(v4 + 32) = 0u;
  *(_OWORD *)(v4 + 48) = 0u;
  *(_OWORD *)(v4 + 64) = 0u;
  *(_QWORD *)(v4 + 80) = 0;
  *(_QWORD *)(v4 + 88) = 1018212795;
  *(_OWORD *)(v4 + 96) = 0u;
  *(_OWORD *)(v4 + 112) = 0u;
  *(_OWORD *)(v4 + 124) = 0u;
  *(_QWORD *)v4 = &off_24C9B80A0;
  v22 = v4;
  std::mutex::lock((std::mutex *)(v4 + 24));
  v6 = *(_DWORD *)(v4 + 136);
  if ((v6 & 2) != 0)
    sub_20E96CE78(1u);
  do
    v7 = __ldxr(v5);
  while (__stxr(v7 + 1, v5));
  *(_DWORD *)(v4 + 136) = v6 | 2;
  std::mutex::unlock((std::mutex *)(v4 + 24));
  v8 = (uint64_t **)a1[9];
  v9 = (std::__shared_weak_count *)a1[5];
  if (v9)
  {
    v10 = std::__shared_weak_count::lock(v9);
    v11 = v10;
    if (v10)
    {
      v12 = a1[4];
      p_shared_weak_owners = (unint64_t *)&v10->__shared_weak_owners_;
      do
        v14 = __ldxr(p_shared_weak_owners);
      while (__stxr(v14 + 1, p_shared_weak_owners));
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        v16 = __ldaxr(p_shared_owners);
      while (__stlxr(v16 - 1, p_shared_owners));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    else
    {
      v12 = 0;
    }
  }
  else
  {
    v12 = 0;
    v11 = 0;
  }
  v17 = operator new(0x20uLL);
  *v17 = &off_24C9F4890;
  v17[1] = v12;
  v17[2] = v11;
  v17[3] = &v22;
  v24 = v17;
  sub_210216F3C(*v8, (uint64_t)v23);
  v18 = v24;
  if (v24 == v23)
  {
    v19 = 4;
    v18 = v23;
    goto LABEL_17;
  }
  if (v24)
  {
    v19 = 5;
LABEL_17:
    (*(void (**)(_QWORD *))(*v18 + 8 * v19))(v18);
  }
  std::__assoc_sub_state::wait((std::__assoc_sub_state *)v4);
  sub_20EA04D14(v4, a2);
  do
    v20 = __ldaxr(v5);
  while (__stlxr(v20 - 1, v5));
  if (!v20)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
  return sub_20EA04DE8(&v22);
}

void sub_20EFC8A1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  unint64_t *v10;
  unint64_t v12;

  do
    v12 = __ldaxr(v10);
  while (__stlxr(v12 - 1, v10));
  if (!v12)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
    sub_20EA04DE8(&a9);
    _Unwind_Resume(a1);
  }
  sub_20EA04DE8(&a9);
  _Unwind_Resume(a1);
}

uint64_t *sub_20EFC8AE4@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  unint64_t *v5;
  int v6;
  unint64_t v7;
  uint64_t **v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *p_shared_weak_owners;
  unint64_t v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v22;
  _BYTE v23[24];
  _BYTE *v24;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  v4 = operator new();
  *(_QWORD *)(v4 + 8) = 0;
  v5 = (unint64_t *)(v4 + 8);
  *(_QWORD *)(v4 + 24) = 850045863;
  *(_QWORD *)(v4 + 16) = 0;
  *(_OWORD *)(v4 + 32) = 0u;
  *(_OWORD *)(v4 + 48) = 0u;
  *(_OWORD *)(v4 + 64) = 0u;
  *(_QWORD *)(v4 + 80) = 0;
  *(_QWORD *)(v4 + 88) = 1018212795;
  *(_OWORD *)(v4 + 96) = 0u;
  *(_OWORD *)(v4 + 112) = 0u;
  *(_OWORD *)(v4 + 124) = 0u;
  *(_QWORD *)v4 = &off_24C9B80A0;
  v22 = v4;
  std::mutex::lock((std::mutex *)(v4 + 24));
  v6 = *(_DWORD *)(v4 + 136);
  if ((v6 & 2) != 0)
    sub_20E96CE78(1u);
  do
    v7 = __ldxr(v5);
  while (__stxr(v7 + 1, v5));
  *(_DWORD *)(v4 + 136) = v6 | 2;
  std::mutex::unlock((std::mutex *)(v4 + 24));
  v8 = (uint64_t **)a1[9];
  v9 = (std::__shared_weak_count *)a1[5];
  if (v9)
  {
    v10 = std::__shared_weak_count::lock(v9);
    v11 = v10;
    if (v10)
    {
      v12 = a1[4];
      p_shared_weak_owners = (unint64_t *)&v10->__shared_weak_owners_;
      do
        v14 = __ldxr(p_shared_weak_owners);
      while (__stxr(v14 + 1, p_shared_weak_owners));
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        v16 = __ldaxr(p_shared_owners);
      while (__stlxr(v16 - 1, p_shared_owners));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    else
    {
      v12 = 0;
    }
  }
  else
  {
    v12 = 0;
    v11 = 0;
  }
  v17 = operator new(0x20uLL);
  *v17 = &off_24C9F4910;
  v17[1] = v12;
  v17[2] = v11;
  v17[3] = &v22;
  v24 = v17;
  sub_210216F3C(*v8, (uint64_t)v23);
  v18 = v24;
  if (v24 == v23)
  {
    v19 = 4;
    v18 = v23;
    goto LABEL_17;
  }
  if (v24)
  {
    v19 = 5;
LABEL_17:
    (*(void (**)(_QWORD *))(*v18 + 8 * v19))(v18);
  }
  std::__assoc_sub_state::wait((std::__assoc_sub_state *)v4);
  sub_20EA04D14(v4, a2);
  do
    v20 = __ldaxr(v5);
  while (__stlxr(v20 - 1, v5));
  if (!v20)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
  return sub_20EA04DE8(&v22);
}

void sub_20EFC8CFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  unint64_t *v10;
  unint64_t v12;

  do
    v12 = __ldaxr(v10);
  while (__stlxr(v12 - 1, v10));
  if (!v12)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
    sub_20EA04DE8(&a9);
    _Unwind_Resume(a1);
  }
  sub_20EA04DE8(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20EFC8DC4(uint64_t a1)
{
  return sub_20EFC8F34(a1 - 16);
}

void sub_20EFC8DCC(uint64_t a1)
{
  sub_20EFC8F34(a1 - 16);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20EFC8DF4(uint64_t a1, uint64_t a2)
{
  return sub_20EFC84BC((_QWORD *)(a1 - 16), a2);
}

uint64_t *sub_20EFC8DFC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_20EFC8804((_QWORD *)(a1 - 16), a2);
}

uint64_t *sub_20EFC8E04@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_20EFC8AE4((_QWORD *)(a1 - 16), a2);
}

uint64_t sub_20EFC8E0C(uint64_t a1)
{
  return a1 - 16;
}

uint64_t sub_20EFC8E14(uint64_t a1)
{
  return sub_20EFC8F34(a1 - 24);
}

void sub_20EFC8E1C(uint64_t a1)
{
  sub_20EFC8F34(a1 - 24);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20EFC8E44(uint64_t a1, uint64_t a2)
{
  return sub_20EFC8660((_QWORD *)(a1 - 24), a2);
}

uint64_t sub_20EFC8E4C(uint64_t a1)
{
  return a1 - 24;
}

uint64_t sub_20EFC8E54(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_20EFC8EBC(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20EFC8F24(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8));
}

uint64_t sub_20EFC8F34(uint64_t a1)
{
  char **v2;
  char *v3;
  char *v4;
  char *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;

  *(_QWORD *)a1 = &off_24C9F4350;
  *(_QWORD *)(a1 + 16) = &unk_24C9F43C8;
  *(_QWORD *)(a1 + 24) = &unk_24C9F4408;
  v2 = *(char ***)(a1 + 144);
  *(_QWORD *)(a1 + 144) = 0;
  if (v2)
  {
    std::mutex::~mutex((std::mutex *)(v2 + 7));
    if (*((_BYTE *)v2 + 48))
    {
      v3 = *v2;
      if (*v2)
      {
        v4 = v2[1];
        v5 = *v2;
        if (v4 != v3)
        {
          do
          {
            v6 = (std::__shared_weak_count *)*((_QWORD *)v4 - 1);
            if (v6)
            {
              p_shared_owners = (unint64_t *)&v6->__shared_owners_;
              do
                v8 = __ldaxr(p_shared_owners);
              while (__stlxr(v8 - 1, p_shared_owners));
              if (!v8)
              {
                ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
                std::__shared_weak_count::__release_weak(v6);
              }
            }
            v4 -= 16;
          }
          while (v4 != v3);
          v5 = *v2;
        }
        v2[1] = v3;
        operator delete(v5);
      }
    }
    MEMORY[0x212BC6398](v2, 0x1022C400958DFA3);
  }
  if (*(_QWORD *)(a1 + 136))
  {
    v9 = *(_QWORD *)(a1 + 120);
    v10 = *(uint64_t **)(a1 + 128);
    v11 = *v10;
    *(_QWORD *)(v11 + 8) = *(_QWORD *)(v9 + 8);
    **(_QWORD **)(v9 + 8) = v11;
    *(_QWORD *)(a1 + 136) = 0;
    if (v10 != (uint64_t *)(a1 + 120))
    {
      do
      {
        v12 = (uint64_t *)v10[1];
        (*(void (**)(uint64_t *))v10[2])(v10 + 2);
        operator delete(v10);
        v10 = v12;
      }
      while (v12 != (uint64_t *)(a1 + 120));
    }
  }
  if (*(_QWORD *)(a1 + 112))
  {
    v13 = *(_QWORD *)(a1 + 96);
    v14 = *(uint64_t **)(a1 + 104);
    v15 = *v14;
    *(_QWORD *)(v15 + 8) = *(_QWORD *)(v13 + 8);
    **(_QWORD **)(v13 + 8) = v15;
    *(_QWORD *)(a1 + 112) = 0;
    if (v14 != (uint64_t *)(a1 + 96))
    {
      do
      {
        v16 = (uint64_t *)v14[1];
        (*(void (**)(uint64_t *))v14[2])(v14 + 2);
        operator delete(v14);
        v14 = v16;
      }
      while (v16 != (uint64_t *)(a1 + 96));
    }
  }
  v17 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 88) = 0;
  if (v17)
    (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  v18 = *(std::__shared_weak_count **)(a1 + 80);
  if (!v18)
    goto LABEL_27;
  v19 = (unint64_t *)&v18->__shared_owners_;
  do
    v20 = __ldaxr(v19);
  while (__stlxr(v20 - 1, v19));
  if (v20)
  {
LABEL_27:
    if ((*(char *)(a1 + 71) & 0x80000000) == 0)
      goto LABEL_29;
    goto LABEL_28;
  }
  ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
  std::__shared_weak_count::__release_weak(v18);
  if (*(char *)(a1 + 71) < 0)
LABEL_28:
    operator delete(*(void **)(a1 + 48));
LABEL_29:
  v21 = *(std::__shared_weak_count **)(a1 + 40);
  if (v21)
    std::__shared_weak_count::__release_weak(v21);
  return a1;
}

_QWORD *sub_20EFC9148(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  *a1 = &off_24C9F4540;
  v2 = (std::__shared_weak_count *)a1[4];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = (std::__shared_weak_count *)a1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  return a1;
}

void sub_20EFC918C(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  *a1 = &off_24C9F4540;
  v2 = (std::__shared_weak_count *)a1[4];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = (std::__shared_weak_count *)a1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20EFC91E0(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;

  result = operator new(0x30uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = &off_24C9F4540;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = a1[4];
  result[3] = a1[3];
  result[4] = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 16);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  return result;
}

_QWORD *sub_20EFC9250(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;

  v3 = result[1];
  v2 = result[2];
  *a2 = &off_24C9F4540;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  v6 = result[4];
  a2[3] = result[3];
  a2[4] = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 16);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  return result;
}

void sub_20EFC92A0(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  v2 = *(std::__shared_weak_count **)(a1 + 32);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
}

void sub_20EFC92DC(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  v2 = (std::__shared_weak_count *)__p[4];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = (std::__shared_weak_count *)__p[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  operator delete(__p);
}

void sub_20EFC9314(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  char v21;

  v2 = (std::__shared_weak_count *)a1[4];
  if (!v2)
  {
    v3 = 0;
    v5 = 0;
    v4 = (std::__shared_weak_count *)a1[2];
    if (v4)
      goto LABEL_6;
    goto LABEL_11;
  }
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
  {
    v5 = 0;
    v4 = (std::__shared_weak_count *)a1[2];
    if (v4)
      goto LABEL_6;
LABEL_11:
    v7 = 0;
    v8 = 0;
    goto LABEL_12;
  }
  v4 = (std::__shared_weak_count *)a1[2];
  v5 = a1[3];
  if (!v4)
    goto LABEL_11;
LABEL_6:
  v6 = std::__shared_weak_count::lock(v4);
  v7 = v6;
  if (v6)
  {
    v8 = a1[1];
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
LABEL_12:
    if (!v3)
      goto LABEL_15;
    goto LABEL_13;
  }
  v8 = 0;
  if (!v3)
    goto LABEL_15;
LABEL_13:
  v11 = (unint64_t *)&v3->__shared_owners_;
  do
    v12 = __ldxr(v11);
  while (__stxr(v12 + 1, v11));
LABEL_15:
  if (v8)
  {
    if (v5)
    {
      LOBYTE(v20) = 0;
      v21 = 0;
      sub_20EFC9638((uint64_t *)(v8 + 88), v5, &v20);
      if (v21)
        sub_20EFC9B34(&v20);
    }
  }
  if (v3)
  {
    v13 = (unint64_t *)&v3->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  if (v7)
  {
    v15 = (unint64_t *)&v7->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
    do
      v17 = __ldaxr(v15);
    while (__stlxr(v17 - 1, v15));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  if (v3)
  {
    v18 = (unint64_t *)&v3->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_20EFC94DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;

  if (a10)
    sub_20EFC9B34(&a9);
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  if (v11)
  {
    v15 = (unint64_t *)&v11->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
    do
      v17 = __ldaxr(v15);
    while (__stlxr(v17 - 1, v15));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (v10)
  {
    v18 = (unint64_t *)&v10->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20EFC95C0(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3vio10mapping_io18PauseResumeRequestES6_NS5_23Mapping"
                     "IONodeGroupErrorES6_Lb0EE25EnqueueMessageAndDispatchIZNKS8_4SendERKS6_EUlT_T0_E_EEvSB_SC_EUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3vio10mapping_io18PauseResumeRequestES6_NS"
                                "5_23MappingIONodeGroupErrorES6_Lb0EE25EnqueueMessageAndDispatchIZNKS8_4SendERKS6_EUlT_T0"
                                "_E_EEvSB_SC_EUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3vio10mapping_io18PauseResumeRequestES6_NS5_23MappingIONodeGroupErrorES6_Lb0EE25EnqueueMessageAndDispatchIZNKS8_4SendERKS6_EUlT_T0_E_EEvSB_SC_EUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3vio10mapping_io18PauseResumeRequestES6_NS5_23MappingIONodeGroupErrorES6_Lb0EE25EnqueueMessageAndDispatchIZNKS8_4SendERKS6_EUlT_T0_E_EEvSB_SC_EUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20EFC962C()
{
  return &unk_24C9F45A0;
}

void sub_20EFC9638(uint64_t *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  unsigned __int8 v7;
  BOOL v8;
  uint64_t v9;
  uint64_t i;
  unsigned __int8 v11;
  uint64_t *j;
  uint64_t v13;
  uint64_t v14;
  std::exception_ptr v15;
  char v16;

  v6 = *a1;
  if (!v6)
  {
    sub_21023D70C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/ProcessorInputMessageHandlingStrategy.h", 228, (uint64_t)"callable_", 9, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0);
    v7 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
    if ((v7 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
    {
      __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
      __cxa_guard_release(&qword_254A6DE78);
    }
    if (byte_254A6DE68)
      v8 = byte_254A6DE70 == 0;
    else
      v8 = 0;
    if (!v8)
    {
      v9 = qword_254A6DE40;
      for (i = qword_254A6DE48; v9 != i; v9 += 16)
        (*(void (**)(_QWORD, const char *, uint64_t, const char *, _QWORD))v9)(*(_QWORD *)(v9 + 8), "callable_", 9, "", 0);
    }
    v11 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
    if ((v11 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
    {
      __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
      __cxa_guard_release(&qword_254A6DE78);
    }
    if (!byte_254A6DE68)
      abort();
    qword_254A6DE58(unk_254A6DE60, "callable_", 9, "", 0);
    v6 = *a1;
  }
  v16 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 16))(v6, a2);
  for (j = (uint64_t *)a1[2]; j != a1 + 1; j = (uint64_t *)j[1])
    (*(void (**)(uint64_t *, char *))(j[2] + 16))(j + 2, &v16);
  if (*((_BYTE *)a3 + 8))
  {
    v13 = *a3;
    if (!*a3)
      sub_20E96CE78(3u);
    std::mutex::lock((std::mutex *)(v13 + 24));
    if ((*(_BYTE *)(v13 + 136) & 1) != 0
      || (v15.__ptr_ = 0, v14 = *(_QWORD *)(v13 + 16), std::exception_ptr::~exception_ptr(&v15), v14))
    {
      sub_20E96CE78(2u);
    }
    *(_BYTE *)(v13 + 140) = v16;
    *(_DWORD *)(v13 + 136) |= 5u;
    std::condition_variable::notify_all((std::condition_variable *)(v13 + 88));
    std::mutex::unlock((std::mutex *)(v13 + 24));
  }
}

void sub_20EFC98A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t *a12, uint64_t a13, int a14, __int16 a15, char a16, unsigned __int8 a17, std::exception_ptr a18)
{
  uint64_t v18;
  uint64_t v19;
  std::mutex *v20;
  void *v23;
  uint64_t v24;
  uint64_t i;
  uint64_t *v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;

  std::mutex::unlock(v20);
  if (a2 == 2)
  {
    v23 = __cxa_begin_catch(a1);
    if (*(_QWORD *)(v19 + 48)
      || !sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/ProcessorInputMessageHandlingStrategy.h", 186, (uint64_t)"!error_downstream_.empty()", 26, (uint64_t)"It is mandated that all errors are handled and enforced by a processor. Add an error handler with AddErrorHandler()", 115, (void (*)(void **))sub_21023DDB0))
    {
      v24 = v19 + 32;
      for (i = *(_QWORD *)(v19 + 40); i != v24; i = *(_QWORD *)(i + 8))
        (*(void (**)(uint64_t, void *))(*(_QWORD *)(i + 16) + 16))(i + 16, v23);
      if (*(_BYTE *)(v18 + 8))
      {
        std::current_exception();
        sub_20EFC9AD4(*(std::__assoc_sub_state **)v18, &a18);
        std::exception_ptr::~exception_ptr(&a18);
      }
      __cxa_end_catch();
      JUMPOUT(0x20EFC97ECLL);
    }
    abort();
  }
  if (a2 == 1)
  {
    v26 = (uint64_t *)__cxa_begin_catch(a1);
    v27 = *v26;
    a11 = *(_QWORD *)(*(_QWORD *)(*v26 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL;
    a10 = (*(uint64_t (**)(void))(v27 + 16))();
    sub_20E9B0CC4("Caught unexpected exception of type: ", (const char *)&a11, "\n", "message: ", (const char *)&a10, "\n");
    if ((a17 & 0x80u) == 0)
      v28 = (uint64_t *)&a12;
    else
      v28 = a12;
    if ((a17 & 0x80u) == 0)
      v29 = a17;
    else
      v29 = a13;
    sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/ProcessorInputMessageHandlingStrategy.h", 140, (uint64_t)"", 0, (uint64_t)v28, v29, (void (*)(void **))sub_21023DDB0);
    abort();
  }
  _Unwind_Resume(a1);
}

void sub_20EFC9AA4(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  __cxa_end_catch();
  JUMPOUT(0x20EFC9AC4);
}

void sub_20EFC9AD4(std::__assoc_sub_state *a1, const std::exception_ptr *a2)
{
  std::exception_ptr v3;
  std::exception_ptr v4;

  if (!a1)
    sub_20E96CE78(3u);
  std::exception_ptr::exception_ptr(&v4, a2);
  v3.__ptr_ = &v4;
  std::__assoc_sub_state::set_exception(a1, v3);
  std::exception_ptr::~exception_ptr(&v4);
}

void sub_20EFC9B20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10)
{
  std::exception_ptr::~exception_ptr(&a10);
  _Unwind_Resume(a1);
}

uint64_t *sub_20EFC9B34(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  const std::error_category *v7;
  std::logic_error *exception;
  std::logic_error *v9;
  std::logic_error v10;
  std::logic_error v11;
  std::exception_ptr v12;

  v2 = *a1;
  if (!v2)
    return a1;
  if ((*(_BYTE *)(v2 + 136) & 1) == 0)
  {
    v12.__ptr_ = 0;
    v3 = *(_QWORD *)(v2 + 16);
    std::exception_ptr::~exception_ptr(&v12);
    v2 = *a1;
    if (!v3 && *(uint64_t *)(v2 + 8) >= 1)
    {
      v7 = std::future_category();
      MEMORY[0x212BC5AF8](&v10, 4, v7);
      exception = (std::logic_error *)__cxa_allocate_exception(0x20uLL);
      v9 = std::logic_error::logic_error(exception, &v10);
      v9->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB810] + 16);
      v9[1] = v11;
      __cxa_throw(v9, MEMORY[0x24BEDB6E0], (void (*)(void *))MEMORY[0x24BEDAD80]);
    }
  }
  v4 = (unint64_t *)(v2 + 8);
  do
    v5 = __ldaxr(v4);
  while (__stlxr(v5 - 1, v4));
  if (v5)
    return a1;
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 16))(v2);
  return a1;
}

void sub_20EFC9C20(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__assoc_sub_state *a10, std::logic_error a11)
{
  uint64_t v11;
  std::exception_ptr v12;

  __cxa_begin_catch(a1);
  std::current_exception();
  __cxa_end_catch();
  v12.__ptr_ = (void *)(v11 - 32);
  std::__assoc_sub_state::set_exception(a10, v12);
  std::exception_ptr::~exception_ptr((std::exception_ptr *)(v11 - 32));
  std::logic_error::~logic_error(&a11);
  JUMPOUT(0x20EFC9B7CLL);
}

_QWORD *sub_20EFC9C5C(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_24C9F45C0;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_20EFC9C94(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_24C9F45C0;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20EFC9CDC(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x20uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *result = &off_24C9F45C0;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  *((_BYTE *)result + 24) = *(_BYTE *)(a1 + 24);
  return result;
}

uint64_t sub_20EFC9D34(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = *(_QWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 16);
  *(_QWORD *)a2 = &off_24C9F45C0;
  *(_QWORD *)(a2 + 8) = v3;
  *(_QWORD *)(a2 + 16) = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  *(_BYTE *)(a2 + 24) = *(_BYTE *)(result + 24);
  return result;
}

void sub_20EFC9D6C(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void sub_20EFC9D7C(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void sub_20EFC9DA8(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v8;
  char v9;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 8);
      if (v5)
      {
        LOBYTE(v8) = 0;
        v9 = 0;
        sub_20EFC9638((uint64_t *)(v5 + 88), a1 + 24, &v8);
        if (v9)
          sub_20EFC9B34(&v8);
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_20EFC9E50(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v13;

  if (a10)
    sub_20EFC9B34(&a9);
  p_shared_owners = (unint64_t *)&v10->__shared_owners_;
  do
    v13 = __ldaxr(p_shared_owners);
  while (__stlxr(v13 - 1, p_shared_owners));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20EFC9E9C(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3vio10mapping_io18PauseResumeRequestES6_NS5_23Mapping"
                     "IONodeGroupErrorES6_Lb0EE4SendERKS6_EUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3vio10mapping_io18PauseResumeRequestES6_NS"
                                "5_23MappingIONodeGroupErrorES6_Lb0EE4SendERKS6_EUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3vio10mapping_io18PauseResumeRequestES6_NS5_23MappingIONodeGroupErrorES6_Lb0EE4SendERKS6_EUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3vio10mapping_io18PauseResumeRequestES6_NS5_23MappingIONodeGroupErrorES6_Lb0EE4SendERKS6_EUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20EFC9F08()
{
  return &unk_24C9F4620;
}

void sub_20EFC9F14(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9F4640;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_20EFC9F24(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9F4640;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC6398);
}

uint64_t *sub_20EFC9F54(uint64_t a1)
{
  return sub_20EFC9B34((uint64_t *)(a1 + 24));
}

_QWORD *sub_20EFC9F60(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;

  *a1 = &off_24C9F4690;
  v2 = (std::__shared_weak_count *)a1[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
      goto LABEL_7;
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  v5 = (std::__shared_weak_count *)a1[4];
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
LABEL_7:
  v6 = (std::__shared_weak_count *)a1[2];
  if (v6)
    std::__shared_weak_count::__release_weak(v6);
  return a1;
}

void sub_20EFC9FE8(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;

  *a1 = &off_24C9F4690;
  v2 = (std::__shared_weak_count *)a1[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
    {
LABEL_7:
      v6 = (std::__shared_weak_count *)a1[2];
      if (v6)
        std::__shared_weak_count::__release_weak(v6);
      JUMPOUT(0x212BC6398);
    }
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
      goto LABEL_7;
  }
  std::__shared_weak_count::__release_weak(v5);
  goto LABEL_7;
}

_QWORD *sub_20EFCA080(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;

  result = operator new(0x38uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = &off_24C9F4690;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = a1[4];
  result[3] = a1[3];
  result[4] = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 16);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  v10 = a1[6];
  result[5] = a1[5];
  result[6] = v10;
  if (v10)
  {
    v11 = (unint64_t *)(v10 + 8);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  return result;
}

_QWORD *sub_20EFCA110(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;

  v3 = result[1];
  v2 = result[2];
  *a2 = &off_24C9F4690;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  v6 = result[4];
  a2[3] = result[3];
  a2[4] = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 16);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  v9 = result[6];
  a2[5] = result[5];
  a2[6] = v9;
  if (v9)
  {
    v10 = (unint64_t *)(v9 + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  return result;
}

void sub_20EFCA180(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;

  v2 = (std::__shared_weak_count *)a1[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
      goto LABEL_7;
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  v5 = (std::__shared_weak_count *)a1[4];
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
LABEL_7:
  v6 = (std::__shared_weak_count *)a1[2];
  if (v6)
    std::__shared_weak_count::__release_weak(v6);
}

void sub_20EFCA200(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;

  v2 = (std::__shared_weak_count *)__p[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)__p[4];
    if (!v5)
      goto LABEL_7;
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  v5 = (std::__shared_weak_count *)__p[4];
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
LABEL_7:
  v6 = (std::__shared_weak_count *)__p[2];
  if (v6)
    std::__shared_weak_count::__release_weak(v6);
  operator delete(__p);
}

void sub_20EFCA27C(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t *v13;
  std::runtime_error_vtbl **v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  std::runtime_error *exception;
  std::runtime_error *v23;
  std::runtime_error *v24;
  std::runtime_error *v25;
  std::runtime_error v26;
  std::runtime_error v27;

  v2 = (std::__shared_weak_count *)a1[4];
  if (!v2)
  {
    v3 = 0;
    v5 = 0;
    v4 = (std::__shared_weak_count *)a1[2];
    if (v4)
      goto LABEL_6;
LABEL_11:
    v7 = 0;
    v8 = 0;
    goto LABEL_12;
  }
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
  {
    v5 = 0;
    v4 = (std::__shared_weak_count *)a1[2];
    if (v4)
      goto LABEL_6;
    goto LABEL_11;
  }
  v4 = (std::__shared_weak_count *)a1[2];
  v5 = a1[3];
  if (!v4)
    goto LABEL_11;
LABEL_6:
  v6 = std::__shared_weak_count::lock(v4);
  v7 = v6;
  if (!v6)
  {
    v8 = 0;
    if (!v3)
      goto LABEL_15;
    goto LABEL_13;
  }
  v8 = a1[1];
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  do
    v10 = __ldxr(p_shared_owners);
  while (__stxr(v10 + 1, p_shared_owners));
LABEL_12:
  if (!v3)
    goto LABEL_15;
LABEL_13:
  v11 = (unint64_t *)&v3->__shared_owners_;
  do
    v12 = __ldxr(v11);
  while (__stxr(v12 + 1, v11));
LABEL_15:
  if (!v8)
  {
    std::runtime_error::runtime_error(&v27, "Processor is no longer available.");
    v27.__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v23 = std::runtime_error::runtime_error(exception, &v27);
    v23->__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    __cxa_throw(v23, (struct type_info *)&unk_24CA1E2D0, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  if (!v5)
  {
    std::runtime_error::runtime_error(&v26, "Message was dropped.");
    v26.__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    v24 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v25 = std::runtime_error::runtime_error(v24, &v26);
    v25->__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    __cxa_throw(v25, (struct type_info *)&unk_24CA1E2D0, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  v13 = (uint64_t *)(v8 + 88);
  v14 = (std::runtime_error_vtbl **)a1[5];
  v26.__vftable = *v14;
  *v14 = 0;
  LOBYTE(v26.__imp_.__imp_) = 1;
  sub_20EFC9638(v13, v5, (uint64_t *)&v26);
  if (LOBYTE(v26.__imp_.__imp_))
    sub_20EFC9B34((uint64_t *)&v26);
  if (v3)
  {
    v15 = (unint64_t *)&v3->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  if (v7)
  {
    v17 = (unint64_t *)&v7->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
    do
      v19 = __ldaxr(v17);
    while (__stlxr(v19 - 1, v17));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  if (v3)
  {
    v20 = (unint64_t *)&v3->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_20EFCA558(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10, uint64_t a11, uint64_t a12, std::runtime_error a13, std::exception_ptr a14)
{
  std::__shared_weak_count *v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;

  std::exception_ptr::~exception_ptr(&a14);
  std::runtime_error::~runtime_error(&a13);
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v18 = __ldaxr(p_shared_owners);
    while (__stlxr(v18 - 1, p_shared_owners));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  if (v15)
  {
    v19 = (unint64_t *)&v15->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
    do
      v21 = __ldaxr(v19);
    while (__stlxr(v21 - 1, v19));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  if (v14)
  {
    v22 = (unint64_t *)&v14->__shared_owners_;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  _Unwind_Resume(a1);
}

void sub_20EFCA584(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::runtime_error a10, std::exception_ptr a11, uint64_t a12, uint64_t a13, uint64_t a14, std::exception_ptr a15)
{
  uint64_t v15;
  std::__assoc_sub_state **v16;
  std::__assoc_sub_state *v17;
  std::exception_ptr v18;

  __cxa_begin_catch(a1);
  std::current_exception();
  __cxa_end_catch();
  v17 = *v16;
  if (v17)
  {
    std::exception_ptr::exception_ptr(&a15, &a11);
    v18.__ptr_ = &a15;
    std::__assoc_sub_state::set_exception(v17, v18);
    std::exception_ptr::~exception_ptr(&a15);
    std::exception_ptr::~exception_ptr(&a11);
    std::runtime_error::~runtime_error(&a10);
    if (!v15)
      JUMPOUT(0x20EFCA390);
    JUMPOUT(0x20EFCA360);
  }
  sub_20E96CE78(3u);
}

void sub_20EFCA5E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::runtime_error a10, std::exception_ptr a11, uint64_t a12, uint64_t a13, uint64_t a14, std::exception_ptr a15)
{
  std::__shared_weak_count *v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t *v23;
  unint64_t v24;

  std::exception_ptr::~exception_ptr(&a11);
  std::runtime_error::~runtime_error(&a10);
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v19 = __ldaxr(p_shared_owners);
    while (__stlxr(v19 - 1, p_shared_owners));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  if (v16)
  {
    v20 = (unint64_t *)&v16->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
    do
      v22 = __ldaxr(v20);
    while (__stlxr(v22 - 1, v20));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  if (v15)
  {
    v23 = (unint64_t *)&v15->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  _Unwind_Resume(a1);
}

void sub_20EFCA60C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;

  if (a11)
    sub_20EFC9B34(&a10);
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v15 = __ldaxr(p_shared_owners);
    while (__stlxr(v15 - 1, p_shared_owners));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (v12)
  {
    v16 = (unint64_t *)&v12->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
    do
      v18 = __ldaxr(v16);
    while (__stlxr(v18 - 1, v16));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (v11)
  {
    v19 = (unint64_t *)&v11->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  _Unwind_Resume(a1);
}

uint64_t sub_20EFCA6F8(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3vio10mapping_io18PauseResumeRequestES6_NS5_23Mapping"
                     "IONodeGroupErrorES6_Lb0EE25EnqueueMessageAndDispatchIZNKS8_7ProcessERKS6_NSt3__17promiseIS6_EEEUlT_"
                     "T0_E_EEvSB_SF_EUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3vio10mapping_io18PauseResumeRequestES6_NS"
                                "5_23MappingIONodeGroupErrorES6_Lb0EE25EnqueueMessageAndDispatchIZNKS8_7ProcessERKS6_NSt3"
                                "__17promiseIS6_EEEUlT_T0_E_EEvSB_SF_EUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3vio10mapping_io18PauseResumeRequestES6_NS5_23MappingIONodeGroupErrorES6_Lb0EE25EnqueueMessageAndDispatchIZNKS8_7ProcessERKS6_NSt3__17promiseIS6_EEEUlT_T0_E_EEvSB_SF_EUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3vio10mapping_io18PauseResumeRequestES6_NS5_23MappingIONodeGroupErrorES6_Lb0EE25EnqueueMessageAndDispatchIZNKS8_7ProcessERKS6_NSt3__17promiseIS6_EEEUlT_T0_E_EEvSB_SF_EUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20EFCA764()
{
  return &unk_24C9F46F0;
}

_QWORD *sub_20EFCA770(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;

  *a1 = &off_24C9F4710;
  v2 = (std::__shared_weak_count *)a1[5];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      v5 = (std::__shared_weak_count *)a1[2];
      if (!v5)
        return a1;
      goto LABEL_6;
    }
  }
  v5 = (std::__shared_weak_count *)a1[2];
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
  return a1;
}

void sub_20EFCA7EC(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;

  *a1 = &off_24C9F4710;
  v2 = (std::__shared_weak_count *)a1[5];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)a1[2];
    if (!v5)
      goto LABEL_9;
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[2];
    if (!v5)
      goto LABEL_9;
  }
  std::__shared_weak_count::__release_weak(v5);
LABEL_9:
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20EFCA878(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;

  result = operator new(0x30uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *result = &off_24C9F4710;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  *((_BYTE *)result + 24) = *(_BYTE *)(a1 + 24);
  v7 = *(_QWORD *)(a1 + 40);
  result[4] = *(_QWORD *)(a1 + 32);
  result[5] = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  return result;
}

uint64_t sub_20EFCA8F0(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;

  v3 = *(_QWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 16);
  *(_QWORD *)a2 = &off_24C9F4710;
  *(_QWORD *)(a2 + 8) = v3;
  *(_QWORD *)(a2 + 16) = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  *(_BYTE *)(a2 + 24) = *(_BYTE *)(result + 24);
  v6 = *(_QWORD *)(result + 40);
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(result + 32);
  *(_QWORD *)(a2 + 40) = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  return result;
}

void sub_20EFCA948(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;

  v2 = *(std::__shared_weak_count **)(a1 + 40);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    v5 = *(std::__shared_weak_count **)(a1 + 16);
    if (!v5)
      return;
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  v5 = *(std::__shared_weak_count **)(a1 + 16);
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
}

void sub_20EFCA9B8(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;

  v2 = (std::__shared_weak_count *)__p[5];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      v5 = (std::__shared_weak_count *)__p[2];
      if (!v5)
        goto LABEL_7;
      goto LABEL_6;
    }
  }
  v5 = (std::__shared_weak_count *)__p[2];
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
LABEL_7:
  operator delete(__p);
}

void sub_20EFCAA28(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  uint64_t v4;
  std::runtime_error_vtbl **v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::runtime_error *exception;
  std::runtime_error *v9;
  std::runtime_error v10;

  v2 = (std::__shared_weak_count *)a1[2];
  if (!v2 || (v3 = std::__shared_weak_count::lock(v2)) == 0 || (v4 = a1[1]) == 0)
  {
    std::runtime_error::runtime_error(&v10, "Invalid operation. Processor is released.");
    v10.__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v9 = std::runtime_error::runtime_error(exception, &v10);
    v9->__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    __cxa_throw(v9, (struct type_info *)&unk_24CA1E2D0, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  v5 = (std::runtime_error_vtbl **)a1[4];
  v10.__vftable = *v5;
  *v5 = 0;
  LOBYTE(v10.__imp_.__imp_) = 1;
  sub_20EFC9638((uint64_t *)(v4 + 88), (uint64_t)(a1 + 3), (uint64_t *)&v10);
  if (LOBYTE(v10.__imp_.__imp_))
    sub_20EFC9B34((uint64_t *)&v10);
  p_shared_owners = (unint64_t *)&v3->__shared_owners_;
  do
    v7 = __ldaxr(p_shared_owners);
  while (__stlxr(v7 - 1, p_shared_owners));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
}

void sub_20EFCAB38(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::runtime_error a10, std::exception_ptr a11)
{
  __break(1u);
}

void sub_20EFCABB0(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::runtime_error a10, std::exception_ptr a11)
{
  uint64_t v11;

  std::exception_ptr::~exception_ptr((std::exception_ptr *)&a9);
  std::runtime_error::~runtime_error(&a10);
  if (v11)
    JUMPOUT(0x20EFCABE4);
  JUMPOUT(0x20EFCAC14);
}

uint64_t sub_20EFCAC1C(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3vio10mapping_io18PauseResumeRequestES6_NS5_23Mapping"
                     "IONodeGroupErrorES6_Lb0EE7ProcessERKS6_NSt3__17promiseIS6_EEEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3vio10mapping_io18PauseResumeRequestES6_NS"
                                "5_23MappingIONodeGroupErrorES6_Lb0EE7ProcessERKS6_NSt3__17promiseIS6_EEEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3vio10mapping_io18PauseResumeRequestES6_NS5_23MappingIONodeGroupErrorES6_Lb0EE7ProcessERKS6_NSt3__17promiseIS6_EEEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3vio10mapping_io18PauseResumeRequestES6_NS5_23MappingIONodeGroupErrorES6_Lb0EE7ProcessERKS6_NSt3__17promiseIS6_EEEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20EFCAC88()
{
  return &unk_24C9F4770;
}

_QWORD *sub_20EFCAC94(_QWORD *a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;

  *a1 = &off_24C9F4790;
  v2 = a1[4];
  a1[3] = &off_24C9B4710;
  a1[4] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = (std::__shared_weak_count *)a1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  return a1;
}

void sub_20EFCACEC(_QWORD *a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;

  *a1 = &off_24C9F4790;
  v2 = a1[4];
  a1[3] = &off_24C9B4710;
  a1[4] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = (std::__shared_weak_count *)a1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20EFCAD54(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;

  v2 = operator new(0x28uLL);
  v3 = v2;
  v5 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  *v2 = &off_24C9F4790;
  v2[1] = v5;
  v2[2] = v4;
  if (v4)
  {
    v6 = (unint64_t *)(v4 + 16);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  v2[3] = &off_24C9B4710;
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32));
  return v3;
}

void sub_20EFCADCC(_Unwind_Exception *a1)
{
  _QWORD *v1;
  std::__shared_weak_count *v3;

  v3 = (std::__shared_weak_count *)v1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20EFCADEC(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  *a2 = &off_24C9F4790;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  a2[3] = &off_24C9B4710;
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32));
}

void sub_20EFCAE54(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  std::__shared_weak_count *v3;

  v3 = *(std::__shared_weak_count **)(v1 + 16);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  _Unwind_Resume(exception_object);
}

void sub_20EFCAE6C(_QWORD *a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;

  v2 = a1[4];
  a1[3] = &off_24C9B4710;
  a1[4] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = (std::__shared_weak_count *)a1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
}

void sub_20EFCAEBC(_QWORD *__p)
{
  uint64_t v2;
  std::__shared_weak_count *v3;

  v2 = __p[4];
  __p[3] = &off_24C9B4710;
  __p[4] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = (std::__shared_weak_count *)__p[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  operator delete(__p);
}

void sub_20EFCAF08(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;

  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = a1[1];
      if (v5)
      {
        v6 = operator new(0x20uLL);
        v7 = a1[4];
        a1[4] = 0;
        v6[2] = &off_24C9B4710;
        v6[3] = v7;
        v9 = *(_QWORD *)(v5 + 96);
        v8 = (_QWORD *)(v5 + 96);
        *v6 = v9;
        v6[1] = v8;
        *(_QWORD *)(v9 + 8) = v6;
        *v8 = v6;
        ++v8[2];
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v11 = __ldaxr(p_shared_owners);
      while (__stlxr(v11 - 1, p_shared_owners));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_20EFCAFBC(_Unwind_Exception *exception_object)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v4;

  p_shared_owners = (unint64_t *)&v1->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20EFCAFF8(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3kit11concurrency6detail9ProcessorINS_3vio10mapping_io18PauseResumeRequestES6_NS5_23MappingI"
                     "ONodeGroupErrorES6_Lb0EE9SubscribeENS1_12ChannelInputIS6_EEEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4cv3d3kit11concurrency6detail9ProcessorINS_3vio10mapping_io18PauseResumeRequestES6_NS5"
                                "_23MappingIONodeGroupErrorES6_Lb0EE9SubscribeENS1_12ChannelInputIS6_EEEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3kit11concurrency6detail9ProcessorINS_3vio10mapping_io18PauseResumeRequestES6_NS5_23MappingIONodeGroupErrorES6_Lb0EE9SubscribeENS1_12ChannelInputIS6_EEEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3kit11concurrency6detail9ProcessorINS_3vio10mapping_io18PauseResumeRequestES6_NS5_23MappingIONodeGroupErrorES6_Lb0EE9SubscribeENS1_12ChannelInputIS6_EEEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20EFCB064()
{
  return &unk_24C9F47F0;
}

_QWORD *sub_20EFCB070(_QWORD *a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;

  *a1 = &off_24C9F4810;
  v2 = a1[4];
  a1[3] = &off_24C9B46A0;
  a1[4] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = (std::__shared_weak_count *)a1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  return a1;
}

void sub_20EFCB0C8(_QWORD *a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;

  *a1 = &off_24C9F4810;
  v2 = a1[4];
  a1[3] = &off_24C9B46A0;
  a1[4] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = (std::__shared_weak_count *)a1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20EFCB130(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;

  v2 = operator new(0x28uLL);
  v3 = v2;
  v5 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  *v2 = &off_24C9F4810;
  v2[1] = v5;
  v2[2] = v4;
  if (v4)
  {
    v6 = (unint64_t *)(v4 + 16);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  v2[3] = &off_24C9B46A0;
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32));
  return v3;
}

void sub_20EFCB1A8(_Unwind_Exception *a1)
{
  _QWORD *v1;
  std::__shared_weak_count *v3;

  v3 = (std::__shared_weak_count *)v1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20EFCB1C8(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  *a2 = &off_24C9F4810;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  a2[3] = &off_24C9B46A0;
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32));
}

void sub_20EFCB230(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  std::__shared_weak_count *v3;

  v3 = *(std::__shared_weak_count **)(v1 + 16);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  _Unwind_Resume(exception_object);
}

void sub_20EFCB248(_QWORD *a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;

  v2 = a1[4];
  a1[3] = &off_24C9B46A0;
  a1[4] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = (std::__shared_weak_count *)a1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
}

void sub_20EFCB298(_QWORD *__p)
{
  uint64_t v2;
  std::__shared_weak_count *v3;

  v2 = __p[4];
  __p[3] = &off_24C9B46A0;
  __p[4] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = (std::__shared_weak_count *)__p[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  operator delete(__p);
}

void sub_20EFCB2E4(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;

  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = a1[1];
      if (v5)
      {
        v6 = operator new(0x20uLL);
        v7 = a1[4];
        a1[4] = 0;
        v6[2] = &off_24C9B46A0;
        v6[3] = v7;
        v9 = *(_QWORD *)(v5 + 120);
        v8 = (_QWORD *)(v5 + 120);
        *v6 = v9;
        v6[1] = v8;
        *(_QWORD *)(v9 + 8) = v6;
        *v8 = v6;
        ++v8[2];
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v11 = __ldaxr(p_shared_owners);
      while (__stlxr(v11 - 1, p_shared_owners));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_20EFCB398(_Unwind_Exception *exception_object)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v4;

  p_shared_owners = (unint64_t *)&v1->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20EFCB3D4(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3kit11concurrency6detail9ProcessorINS_3vio10mapping_io18PauseResumeRequestES6_NS5_23MappingI"
                     "ONodeGroupErrorES6_Lb0EE15AddErrorHandlerENS1_12ChannelInputIS7_EEEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4cv3d3kit11concurrency6detail9ProcessorINS_3vio10mapping_io18PauseResumeRequestES6_NS5"
                                "_23MappingIONodeGroupErrorES6_Lb0EE15AddErrorHandlerENS1_12ChannelInputIS7_EEEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3kit11concurrency6detail9ProcessorINS_3vio10mapping_io18PauseResumeRequestES6_NS5_23MappingIONodeGroupErrorES6_Lb0EE15AddErrorHandlerENS1_12ChannelInputIS7_EEEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3kit11concurrency6detail9ProcessorINS_3vio10mapping_io18PauseResumeRequestES6_NS5_23MappingIONodeGroupErrorES6_Lb0EE15AddErrorHandlerENS1_12ChannelInputIS7_EEEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20EFCB440()
{
  return &unk_24C9F4870;
}

_QWORD *sub_20EFCB44C(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_24C9F4890;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_20EFCB484(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_24C9F4890;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20EFCB4CC(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x20uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = &off_24C9F4890;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  result[3] = a1[3];
  return result;
}

_QWORD *sub_20EFCB524(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = result[1];
  v2 = result[2];
  *a2 = &off_24C9F4890;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  a2[3] = result[3];
  return result;
}

void sub_20EFCB55C(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void sub_20EFCB56C(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void sub_20EFCB598(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  uint64_t *v6;
  unint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p[2];
  char *v16;
  __int128 v17;
  char *v18;
  uint64_t v19;
  __int128 *v20;

  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = a1[1];
      if (!v5)
      {
LABEL_11:
        p_shared_owners = (unint64_t *)&v4->__shared_owners_;
        do
          v14 = __ldaxr(p_shared_owners);
        while (__stlxr(v14 - 1, p_shared_owners));
        if (!v14)
        {
          ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
          std::__shared_weak_count::__release_weak(v4);
        }
        return;
      }
      v6 = (uint64_t *)a1[3];
      v7 = *(_QWORD *)(v5 + 112);
      v18 = 0;
      v17 = 0uLL;
      if (v7)
      {
        if (v7 >> 61)
          sub_20E92CED8();
        v8 = (char *)operator new(8 * v7);
        v9 = &v8[8 * v7];
        *(_QWORD *)&v17 = v8;
        *((_QWORD *)&v17 + 1) = v8;
        v18 = v9;
        v10 = v5 + 96;
        v11 = *(_QWORD *)(v5 + 104);
        v20 = &v17;
        if (v11 != v10)
        {
          do
          {
LABEL_7:
            v19 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v11 + 24) + 48))(*(_QWORD *)(v11 + 24));
            sub_20E9B2D04((uint64_t *)&v20, &v19);
            v11 = *(_QWORD *)(v11 + 8);
          }
          while (v11 != v10);
          *(_OWORD *)__p = v17;
          v16 = v18;
          v12 = *v6;
          if (*v6)
            goto LABEL_9;
          goto LABEL_18;
        }
      }
      else
      {
        v9 = 0;
        v8 = 0;
        v10 = v5 + 96;
        v11 = *(_QWORD *)(v5 + 104);
        v20 = &v17;
        if (v11 != v10)
          goto LABEL_7;
      }
      *(int64x2_t *)__p = vdupq_n_s64((unint64_t)v8);
      v16 = v9;
      v12 = *v6;
      if (*v6)
      {
LABEL_9:
        sub_20EA04C5C(v12, (uint64_t)__p);
        if (__p[0])
        {
          __p[1] = __p[0];
          operator delete(__p[0]);
        }
        goto LABEL_11;
      }
LABEL_18:
      sub_20E96CE78(3u);
    }
  }
}

void sub_20EFCB714(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v17;

  if (__p)
    operator delete(__p);
  p_shared_owners = (unint64_t *)&v14->__shared_owners_;
  do
    v17 = __ldaxr(p_shared_owners);
  while (__stlxr(v17 - 1, p_shared_owners));
  if (!v17)
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20EFCB784(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3vio10mapping_io18PauseResumeRequestES6_NS5_23Mapping"
                     "IONodeGroupErrorES6_Lb0EE16OutputHandlerIDsEvEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3vio10mapping_io18PauseResumeRequestES6_NS"
                                "5_23MappingIONodeGroupErrorES6_Lb0EE16OutputHandlerIDsEvEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3vio10mapping_io18PauseResumeRequestES6_NS5_23MappingIONodeGroupErrorES6_Lb0EE16OutputHandlerIDsEvEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3vio10mapping_io18PauseResumeRequestES6_NS5_23MappingIONodeGroupErrorES6_Lb0EE16OutputHandlerIDsEvEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20EFCB7F0()
{
  return &unk_24C9F48F0;
}

_QWORD *sub_20EFCB7FC(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_24C9F4910;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_20EFCB834(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_24C9F4910;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20EFCB87C(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x20uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = &off_24C9F4910;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  result[3] = a1[3];
  return result;
}

_QWORD *sub_20EFCB8D4(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = result[1];
  v2 = result[2];
  *a2 = &off_24C9F4910;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  a2[3] = result[3];
  return result;
}

void sub_20EFCB90C(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void sub_20EFCB91C(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void sub_20EFCB948(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  uint64_t *v6;
  unint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p[2];
  char *v16;
  __int128 v17;
  char *v18;
  uint64_t v19;
  __int128 *v20;

  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = a1[1];
      if (!v5)
      {
LABEL_11:
        p_shared_owners = (unint64_t *)&v4->__shared_owners_;
        do
          v14 = __ldaxr(p_shared_owners);
        while (__stlxr(v14 - 1, p_shared_owners));
        if (!v14)
        {
          ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
          std::__shared_weak_count::__release_weak(v4);
        }
        return;
      }
      v6 = (uint64_t *)a1[3];
      v7 = *(_QWORD *)(v5 + 136);
      v18 = 0;
      v17 = 0uLL;
      if (v7)
      {
        if (v7 >> 61)
          sub_20E92CED8();
        v8 = (char *)operator new(8 * v7);
        v9 = &v8[8 * v7];
        *(_QWORD *)&v17 = v8;
        *((_QWORD *)&v17 + 1) = v8;
        v18 = v9;
        v10 = v5 + 120;
        v11 = *(_QWORD *)(v5 + 128);
        v20 = &v17;
        if (v11 != v10)
        {
          do
          {
LABEL_7:
            v19 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v11 + 24) + 48))(*(_QWORD *)(v11 + 24));
            sub_20E9B2D04((uint64_t *)&v20, &v19);
            v11 = *(_QWORD *)(v11 + 8);
          }
          while (v11 != v10);
          *(_OWORD *)__p = v17;
          v16 = v18;
          v12 = *v6;
          if (*v6)
            goto LABEL_9;
          goto LABEL_18;
        }
      }
      else
      {
        v9 = 0;
        v8 = 0;
        v10 = v5 + 120;
        v11 = *(_QWORD *)(v5 + 128);
        v20 = &v17;
        if (v11 != v10)
          goto LABEL_7;
      }
      *(int64x2_t *)__p = vdupq_n_s64((unint64_t)v8);
      v16 = v9;
      v12 = *v6;
      if (*v6)
      {
LABEL_9:
        sub_20EA04C5C(v12, (uint64_t)__p);
        if (__p[0])
        {
          __p[1] = __p[0];
          operator delete(__p[0]);
        }
        goto LABEL_11;
      }
LABEL_18:
      sub_20E96CE78(3u);
    }
  }
}

void sub_20EFCBAC4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v17;

  if (__p)
    operator delete(__p);
  p_shared_owners = (unint64_t *)&v14->__shared_owners_;
  do
    v17 = __ldaxr(p_shared_owners);
  while (__stlxr(v17 - 1, p_shared_owners));
  if (!v17)
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20EFCBB34(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3vio10mapping_io18PauseResumeRequestES6_NS5_23Mapping"
                     "IONodeGroupErrorES6_Lb0EE15ErrorHandlerIDsEvEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3vio10mapping_io18PauseResumeRequestES6_NS"
                                "5_23MappingIONodeGroupErrorES6_Lb0EE15ErrorHandlerIDsEvEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3vio10mapping_io18PauseResumeRequestES6_NS5_23MappingIONodeGroupErrorES6_Lb0EE15ErrorHandlerIDsEvEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3vio10mapping_io18PauseResumeRequestES6_NS5_23MappingIONodeGroupErrorES6_Lb0EE15ErrorHandlerIDsEvEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20EFCBBA0()
{
  return &unk_24C9F4970;
}

void sub_20EFCBBB0(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20EFCBBD4(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t sub_20EFCBBEC(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail9ProcessorINS1_3vio10mapping_io18PauseResumeReque"
                     "stES8_NS7_23MappingIONodeGroupErrorES8_Lb0EEEE27__shared_ptr_default_deleteISA_SA_EE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail9ProcessorINS1_3vio10mapping_io18Pause"
                                "ResumeRequestES8_NS7_23MappingIONodeGroupErrorES8_Lb0EEEE27__shared_ptr_default_deleteISA_SA_EE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail9ProcessorINS1_3vio10mapping_io18PauseResumeRequestES8_NS7_23MappingIONodeGroupErrorES8_Lb0EEEE27__shared_ptr_default_deleteISA_SA_EE"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail9ProcessorINS1_3vio10mapping_io18PauseResumeRequestES8_NS7_23MappingIONodeGroupErrorES8_Lb0EEEE27__shared_ptr_default_deleteISA_SA_EE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

void sub_20EFCBC60(uint64_t a1)
{
  sub_20EFCD458(a1);
  JUMPOUT(0x212BC6398);
}

void sub_20EFCBC84(_QWORD *a1, std::__shared_weak_count_vtbl **a2)
{
  uint64_t *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t *p_shared_weak_owners;
  std::__shared_weak_count *v8;
  unint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  std::__shared_weak_count **v13;
  unint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  std::mutex **v24;
  uint64_t **v25;
  std::__shared_weak_count *v26;
  std::__shared_weak_count *v27;
  std::__shared_weak_count *v28;
  uint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  unint64_t *v32;
  unint64_t v33;
  uint64_t **v34;
  std::__shared_weak_count *v35;
  std::__shared_weak_count *v36;
  std::__shared_weak_count *v37;
  uint64_t v38;
  unint64_t *v39;
  unint64_t v40;
  unint64_t *v41;
  unint64_t v42;
  char *v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t *v46;
  unint64_t v47;
  std::__shared_weak_count_vtbl *v48;
  __int128 *v49;
  __int128 *v50;
  uint64_t v51;
  __int128 v52;
  uint64_t v53;
  __int128 *v54;
  _BYTE v55[24];
  _BYTE *v56;
  uint64_t v57;

  v57 = *MEMORY[0x24BDAC8D0];
  if (!(*(unsigned int (**)(_QWORD *))(*a1 + 48))(a1))
    return;
  if (!a1[9]
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 234, (uint64_t)"scheduler_", 10, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v4 = (uint64_t *)a1[18];
  if (v4)
  {
    v5 = (std::__shared_weak_count *)operator new(0x20uLL);
    v5->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    v5->__shared_weak_owners_ = 0;
    p_shared_weak_owners = (unint64_t *)&v5->__shared_weak_owners_;
    v5->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9F4BD0;
    v5[1].__vftable = *a2;
    v8 = v5 + 1;
    do
      v9 = __ldxr(p_shared_weak_owners);
    while (__stxr(v9 + 1, p_shared_weak_owners));
    v10 = (_QWORD *)operator new();
    *v10 = v4 + 7;
    std::mutex::lock((std::mutex *)(v4 + 7));
    *(_QWORD *)&v52 = v10;
    *((_QWORD *)&v52 + 1) = v4;
    if (!*((_BYTE *)v4 + 48))
      sub_20E866B34();
    v11 = v4[4];
    v12 = *v4;
    v13 = (std::__shared_weak_count **)(*v4 + 16 * v11);
    do
      v14 = __ldxr(p_shared_owners);
    while (__stxr(v14 + 1, p_shared_owners));
    *v13 = v8;
    v15 = v12 + 16 * v11;
    v16 = *(std::__shared_weak_count **)(v15 + 8);
    *(_QWORD *)(v15 + 8) = v5;
    if (v16)
    {
      v17 = (unint64_t *)&v16->__shared_owners_;
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
    v19 = (v4[1] - *v4) >> 4;
    v20 = v4[5];
    v21 = v4[4] + 1;
    if (v21 >= v19)
      v22 = (v4[1] - *v4) >> 4;
    else
      v22 = 0;
    v4[4] = v21 - v22;
    if (v20 == v19)
    {
      v23 = v4[3] + 1;
      if (v23 < v19)
        v19 = 0;
      v4[3] = v23 - v19;
      v24 = (std::mutex **)v52;
      if (!(_QWORD)v52)
      {
LABEL_33:
        v34 = (uint64_t **)a1[9];
        v52 = 0uLL;
        v35 = (std::__shared_weak_count *)a1[5];
        if (v35)
        {
          v36 = std::__shared_weak_count::lock(v35);
          if (v36)
          {
            v37 = v36;
            v38 = a1[4];
            v39 = (unint64_t *)&v36->__shared_weak_owners_;
            do
              v40 = __ldxr(v39);
            while (__stxr(v40 + 1, v39));
            *(_QWORD *)&v52 = v38;
            *((_QWORD *)&v52 + 1) = v36;
            v41 = (unint64_t *)&v36->__shared_owners_;
            do
              v42 = __ldaxr(v41);
            while (__stlxr(v42 - 1, v41));
            if (!v42)
            {
              ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
              std::__shared_weak_count::__release_weak(v37);
            }
          }
          else
          {
            v52 = 0uLL;
          }
        }
        v43 = (char *)operator new(0x30uLL);
        *(_QWORD *)v43 = &off_24C9F4C20;
        *(_OWORD *)(v43 + 8) = v52;
        v52 = 0uLL;
        *((_QWORD *)v43 + 3) = v8;
        *((_QWORD *)v43 + 4) = v5;
        v53 = 0;
        v54 = 0;
        v56 = v43;
        sub_210216F3C(*v34, (uint64_t)v55);
        v44 = v56;
        if (v56 == v55)
        {
          v45 = 4;
          v44 = v55;
        }
        else
        {
          if (!v56)
            goto LABEL_47;
          v45 = 5;
        }
        (*(void (**)(_QWORD *))(*v44 + 8 * v45))(v44);
LABEL_47:
        if (v5)
        {
          v46 = (unint64_t *)&v5->__shared_owners_;
          do
            v47 = __ldaxr(v46);
          while (__stlxr(v47 - 1, v46));
          if (!v47)
          {
            ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
            std::__shared_weak_count::__release_weak(v5);
          }
        }
        return;
      }
    }
    else
    {
      v4[5] = v20 + 1;
      v24 = (std::mutex **)v52;
      if (!(_QWORD)v52)
        goto LABEL_33;
    }
    std::mutex::unlock(*v24);
    MEMORY[0x212BC6398](v24, 0x20C4093837F09);
    goto LABEL_33;
  }
  v25 = (uint64_t **)a1[9];
  v26 = (std::__shared_weak_count *)a1[5];
  if (v26)
  {
    v27 = std::__shared_weak_count::lock(v26);
    v28 = v27;
    if (v27)
    {
      v29 = a1[4];
      v30 = (unint64_t *)&v27->__shared_weak_owners_;
      do
        v31 = __ldxr(v30);
      while (__stxr(v31 + 1, v30));
      v32 = (unint64_t *)&v27->__shared_owners_;
      do
        v33 = __ldaxr(v32);
      while (__stlxr(v33 - 1, v32));
      if (!v33)
      {
        ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
        std::__shared_weak_count::__release_weak(v28);
      }
    }
    else
    {
      v29 = 0;
    }
  }
  else
  {
    v29 = 0;
    v28 = 0;
  }
  v48 = *a2;
  v49 = (__int128 *)operator new(0x20uLL);
  *(_QWORD *)v49 = &off_24C9F4CA0;
  *((_QWORD *)v49 + 1) = v29;
  *((_QWORD *)v49 + 2) = v28;
  *((_QWORD *)v49 + 3) = v48;
  v54 = v49;
  sub_210216F3C(*v25, (uint64_t)&v52);
  v50 = v54;
  if (v54 == &v52)
  {
    v51 = 4;
    v50 = &v52;
  }
  else
  {
    if (!v54)
      return;
    v51 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v50 + 8 * v51))();
}

void sub_20EFCC094(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  uint64_t v19;

  if (a14 == v19)
  {
    (*(void (**)(void))(a11 + 32))();
    _Unwind_Resume(exception_object);
  }
  if (a14)
  {
    (*(void (**)(void))(*(_QWORD *)a14 + 40))();
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20EFCC188(uint64_t result)
{
  atomic_store(1u, (unsigned __int8 *)(result + 8));
  return result;
}

uint64_t sub_20EFCC198(uint64_t result)
{
  atomic_store(0, (unsigned __int8 *)(result + 8));
  return result;
}

uint64_t sub_20EFCC1A4(uint64_t a1)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)(a1 + 8));
  return v1 & 1;
}

void sub_20EFCC1B4(_QWORD *a1, std::__shared_weak_count_vtbl **a2, std::__shared_weak_count_vtbl **a3)
{
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t *p_shared_weak_owners;
  std::__shared_weak_count *v12;
  unint64_t v13;
  uint64_t *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  std::__shared_weak_count **v18;
  unint64_t v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  std::mutex **v29;
  uint64_t **v30;
  std::__shared_weak_count *v31;
  std::__shared_weak_count *v32;
  std::__shared_weak_count *v33;
  uint64_t v34;
  unint64_t *v35;
  unint64_t v36;
  unint64_t *v37;
  unint64_t v38;
  uint64_t **v39;
  std::__shared_weak_count *v40;
  std::__shared_weak_count *v41;
  std::__shared_weak_count *v42;
  uint64_t v43;
  unint64_t *v44;
  unint64_t v45;
  unint64_t *v46;
  unint64_t v47;
  char *v48;
  std::string *v49;
  uint64_t v50;
  uint64_t *v51;
  unint64_t v52;
  unint64_t *v53;
  unint64_t v54;
  _QWORD *v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  __int128 *v61;
  uint64_t v62;
  _QWORD *v63;
  _QWORD *v64;
  _QWORD *v65;
  __int128 *v66;
  std::string *v67;
  std::runtime_error *exception;
  std::runtime_error *v69;
  __int128 v70;
  std::__shared_weak_count_vtbl *v71;
  _QWORD *v72;
  std::__shared_weak_count *v73;
  std::__shared_weak_count *v74;
  std::runtime_error v75;
  std::__shared_weak_count *v76;
  std::__shared_weak_count *v77;
  __int128 v78;
  _QWORD *v79;
  __int128 *v80;
  _QWORD v81[3];
  std::string v82;
  std::string *v83;
  uint64_t v84;

  v84 = *MEMORY[0x24BDAC8D0];
  if (((*(uint64_t (**)(_QWORD *))(*a1 + 48))(a1) & 1) == 0)
  {
    *(_QWORD *)&v78 = "Invalid operation. Interface is disabled for ";
    *((_QWORD *)&v78 + 1) = 45;
    v65 = (_QWORD *)a1[6];
    v64 = a1 + 6;
    v63 = v65;
    v66 = (__int128 *)*((unsigned __int8 *)v64 + 23);
    if ((char)v66 < 0)
      v66 = (__int128 *)v64[1];
    else
      v63 = v64;
    v79 = v63;
    v80 = v66;
    sub_20E8778D4((uint64_t)&v78, (uint64_t)v81, 0, 0, &v82);
    if ((v82.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v67 = &v82;
    else
      v67 = (std::string *)v82.__r_.__value_.__r.__words[0];
    std::runtime_error::runtime_error(&v75, (const char *)v67);
    v75.__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v69 = std::runtime_error::runtime_error(exception, &v75);
    v69->__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    __cxa_throw(v69, (struct type_info *)&unk_24CA1E2D0, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  if (!a1[9]
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 294, (uint64_t)"scheduler_", 10, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  if (a1[18])
  {
    v6 = (std::__shared_weak_count *)operator new(0x20uLL);
    v6->__shared_weak_owners_ = 0;
    v6->__vftable = (std::__shared_weak_count_vtbl *)&unk_24C9B85F0;
    v6[1].__vftable = *a3;
    v74 = v6;
    v72 = &v6[1].__vftable;
    v73 = v6;
    v6->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    *a3 = 0;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    if (!a1[18]
      && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 414, (uint64_t)"limiting_buffer_", 16, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v9 = (std::__shared_weak_count *)operator new(0x20uLL);
    v9->__shared_owners_ = 0;
    v10 = (unint64_t *)&v9->__shared_owners_;
    v9->__shared_weak_owners_ = 0;
    p_shared_weak_owners = (unint64_t *)&v9->__shared_weak_owners_;
    v9->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9F4BD0;
    v9[1].__vftable = *a2;
    v12 = v9 + 1;
    v76 = v9 + 1;
    v77 = v9;
    do
      v13 = __ldxr(p_shared_weak_owners);
    while (__stxr(v13 + 1, p_shared_weak_owners));
    v14 = (uint64_t *)a1[18];
    v15 = (_QWORD *)operator new();
    *v15 = v14 + 7;
    std::mutex::lock((std::mutex *)(v14 + 7));
    *(_QWORD *)&v78 = v15;
    *((_QWORD *)&v78 + 1) = v14;
    if (!*((_BYTE *)v14 + 48))
      sub_20E866B34();
    v16 = v14[4];
    v17 = *v14;
    v18 = (std::__shared_weak_count **)(*v14 + 16 * v16);
    do
      v19 = __ldxr(v10);
    while (__stxr(v19 + 1, v10));
    *v18 = v12;
    v20 = v17 + 16 * v16;
    v21 = *(std::__shared_weak_count **)(v20 + 8);
    *(_QWORD *)(v20 + 8) = v9;
    if (v21)
    {
      v22 = (unint64_t *)&v21->__shared_owners_;
      do
        v23 = __ldaxr(v22);
      while (__stlxr(v23 - 1, v22));
      if (!v23)
      {
        ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
        std::__shared_weak_count::__release_weak(v21);
      }
    }
    v24 = (v14[1] - *v14) >> 4;
    v25 = v14[5];
    v26 = v14[4] + 1;
    if (v26 >= v24)
      v27 = (v14[1] - *v14) >> 4;
    else
      v27 = 0;
    v14[4] = v26 - v27;
    if (v25 == v24)
    {
      v28 = v14[3] + 1;
      if (v28 < v24)
        v24 = 0;
      v14[3] = v28 - v24;
      v29 = (std::mutex **)v78;
      if (!(_QWORD)v78)
      {
LABEL_37:
        v39 = (uint64_t **)a1[9];
        v78 = 0uLL;
        v40 = (std::__shared_weak_count *)a1[5];
        if (v40)
        {
          v41 = std::__shared_weak_count::lock(v40);
          if (v41)
          {
            v42 = v41;
            v43 = a1[4];
            v44 = (unint64_t *)&v41->__shared_weak_owners_;
            do
              v45 = __ldxr(v44);
            while (__stxr(v45 + 1, v44));
            *(_QWORD *)&v78 = v43;
            *((_QWORD *)&v78 + 1) = v41;
            v46 = (unint64_t *)&v41->__shared_owners_;
            do
              v47 = __ldaxr(v46);
            while (__stlxr(v47 - 1, v46));
            if (!v47)
            {
              ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
              std::__shared_weak_count::__release_weak(v42);
            }
          }
          else
          {
            v78 = 0uLL;
          }
        }
        v48 = (char *)operator new(0x38uLL);
        *(_QWORD *)v48 = &off_24C9F4D20;
        *(_OWORD *)(v48 + 8) = v78;
        v78 = 0uLL;
        *((_QWORD *)v48 + 3) = v12;
        *((_QWORD *)v48 + 4) = v9;
        v79 = 0;
        v80 = 0;
        *((_QWORD *)v48 + 5) = v72;
        *((_QWORD *)v48 + 6) = v73;
        v81[0] = 0;
        v81[1] = 0;
        v83 = (std::string *)v48;
        sub_210216F3C(*v39, (uint64_t)&v82);
        v49 = v83;
        if (v83 == &v82)
        {
          v50 = 4;
          v49 = &v82;
        }
        else
        {
          if (!v83)
            goto LABEL_51;
          v50 = 5;
        }
        (*(void (**)(void))(v49->__r_.__value_.__r.__words[0] + 8 * v50))();
LABEL_51:
        if (v77)
        {
          v51 = &v77->__shared_owners_;
          do
            v52 = __ldaxr((unint64_t *)v51);
          while (__stlxr(v52 - 1, (unint64_t *)v51));
          if (!v52)
          {
            ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
            std::__shared_weak_count::__release_weak(v77);
          }
        }
        if (v74)
        {
          v53 = (unint64_t *)&v74->__shared_owners_;
          do
            v54 = __ldaxr(v53);
          while (__stlxr(v54 - 1, v53));
          if (!v54)
          {
            ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
            std::__shared_weak_count::__release_weak(v74);
          }
        }
        return;
      }
    }
    else
    {
      v14[5] = v25 + 1;
      v29 = (std::mutex **)v78;
      if (!(_QWORD)v78)
        goto LABEL_37;
    }
    std::mutex::unlock(*v29);
    MEMORY[0x212BC6398](v29, 0x20C4093837F09);
    goto LABEL_37;
  }
  v30 = (uint64_t **)a1[9];
  v70 = 0uLL;
  v31 = (std::__shared_weak_count *)a1[5];
  if (v31)
  {
    v32 = std::__shared_weak_count::lock(v31);
    if (v32)
    {
      v33 = v32;
      v34 = a1[4];
      v35 = (unint64_t *)&v32->__shared_weak_owners_;
      do
        v36 = __ldxr(v35);
      while (__stxr(v36 + 1, v35));
      *(_QWORD *)&v70 = v34;
      *((_QWORD *)&v70 + 1) = v32;
      v37 = (unint64_t *)&v32->__shared_owners_;
      do
        v38 = __ldaxr(v37);
      while (__stlxr(v38 - 1, v37));
      if (!v38)
      {
        ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
        std::__shared_weak_count::__release_weak(v33);
      }
    }
    else
    {
      v70 = 0uLL;
    }
  }
  v71 = *a2;
  v55 = operator new(0x20uLL);
  v55[1] = 0;
  v55[2] = 0;
  *v55 = &unk_24C9B85F0;
  v55[3] = *a3;
  *a3 = 0;
  v56 = (char *)operator new(0x30uLL);
  *(_QWORD *)v56 = &off_24C9F4DA0;
  *(_OWORD *)(v56 + 8) = v70;
  *((_QWORD *)v56 + 3) = v71;
  *((_QWORD *)v56 + 4) = v55 + 3;
  *((_QWORD *)v56 + 5) = v55;
  v80 = (__int128 *)v56;
  sub_210216F3C(*v30, (uint64_t)&v78);
  v61 = v80;
  if (v80 == &v78)
  {
    v62 = 4;
    v61 = &v78;
  }
  else
  {
    if (!v80)
      return;
    v62 = 5;
  }
  (*(void (**)(__int128 *, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v61 + 8 * v62))(v61, v57, v58, v59, v60);
}

void sub_20EFCC7D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, std::runtime_error a18, std::exception_ptr a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25)
{
  std::promise<void> *v25;
  uint64_t v26;
  std::exception_ptr v27;

  if (a2)
  {
    __cxa_begin_catch(exception_object);
    std::current_exception();
    __cxa_end_catch();
    v27.__ptr_ = &a19;
    std::promise<void>::set_exception(v25, v27);
    std::exception_ptr::~exception_ptr(&a19);
    std::runtime_error::~runtime_error(&a18);
    if (*(char *)(v26 - 81) < 0)
      operator delete(*(void **)(v26 - 104));
    JUMPOUT(0x20EFCC6ECLL);
  }
  _Unwind_Resume(exception_object);
}

void sub_20EFCC8E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  va_list va;
  uint64_t v13;
  uint64_t v14;
  va_list va1;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  va_list va2;
  uint64_t v22;
  va_list va3;

  va_start(va3, a6);
  va_start(va2, a6);
  va_start(va1, a6);
  va_start(va, a6);
  v11 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v14 = va_arg(va2, _QWORD);
  v16 = va_arg(va2, _QWORD);
  v17 = va_arg(va2, _QWORD);
  v18 = va_arg(va2, _QWORD);
  v19 = va_arg(va2, _QWORD);
  va_copy(va3, va2);
  v20 = va_arg(va3, _QWORD);
  v22 = va_arg(va3, _QWORD);
  v9 = *(_QWORD **)(v7 - 80);
  if (v9 == v6)
  {
    v10 = 4;
    v9 = (_QWORD *)(v7 - 104);
  }
  else
  {
    if (!v9)
      goto LABEL_6;
    v10 = 5;
  }
  (*(void (**)(void))(*v9 + 8 * v10))();
LABEL_6:
  sub_20EA031A8((uint64_t *)va3);
  sub_20E86665C((uint64_t)va2);
  sub_20E86665C((uint64_t)va);
  sub_20E86665C((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_20EFCC980(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  uint64_t v7;
  va_list va;
  uint64_t v9;
  va_list va1;

  va_start(va1, a6);
  va_start(va, a6);
  v7 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  sub_20E86665C((uint64_t)va);
  sub_20E86665C((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_20EFCC99C(uint64_t a1)
{
  uint64_t *v1;

  v1 = *(uint64_t **)(a1 + 72);
  if (v1)
  {
    sub_210217048(*v1);
  }
  else
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 167, (uint64_t)"scheduler_ != nullptr", 21, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    sub_210217048(**(_QWORD **)(a1 + 72));
  }
}

_QWORD *sub_20EFCCA10(_QWORD *a1)
{
  uint64_t **v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *result;
  uint64_t v9;
  _BYTE v10[24];
  _BYTE *v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v2 = (uint64_t **)a1[9];
  if (!v2)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 181, (uint64_t)"scheduler_", 10, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v2 = (uint64_t **)a1[9];
  }
  v4 = a1[4];
  v3 = a1[5];
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = operator new(0x20uLL);
  *v7 = &off_24C9F4E20;
  v7[1] = v4;
  v7[2] = v3;
  v11 = v7;
  sub_210216F3C(*v2, (uint64_t)v10);
  result = v11;
  if (v11 == v10)
  {
    v9 = 4;
    result = v10;
  }
  else
  {
    if (!v11)
      return result;
    v9 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v9))();
}

void sub_20EFCCB20(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v13;

  if (a13 == v13)
  {
    (*(void (**)(void))(a10 + 32))();
    _Unwind_Resume(exception_object);
  }
  if (a13)
  {
    (*(void (**)(void))(*(_QWORD *)a13 + 40))();
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20EFCCB84(_QWORD *a1, uint64_t a2)
{
  uint64_t **v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *result;
  uint64_t v12;
  _BYTE v13[24];
  _BYTE *v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v4 = (uint64_t **)a1[9];
  if (!v4)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 202, (uint64_t)"scheduler_", 10, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v4 = (uint64_t **)a1[9];
  }
  v6 = a1[4];
  v5 = a1[5];
  if (v5)
  {
    v7 = (unint64_t *)(v5 + 16);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  v9 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v10 = operator new(0x28uLL);
  *v10 = &off_24C9F4EA0;
  v10[1] = v6;
  v10[2] = v5;
  v10[3] = &off_24C9B46A0;
  v10[4] = v9;
  v14 = v10;
  sub_210216F3C(*v4, (uint64_t)v13);
  result = v14;
  if (v14 == v13)
  {
    v12 = 4;
    result = v13;
  }
  else
  {
    if (!v14)
      return result;
    v12 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v12))();
}

void sub_20EFCCCB4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v13;

  if (a13 == v13)
  {
    (*(void (**)(void))(a10 + 32))();
    _Unwind_Resume(exception_object);
  }
  if (a13)
  {
    (*(void (**)(void))(*(_QWORD *)a13 + 40))();
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_20EFCCD28@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  unint64_t *v5;
  int v6;
  unint64_t v7;
  uint64_t **v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *p_shared_weak_owners;
  unint64_t v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v22;
  _BYTE v23[24];
  _BYTE *v24;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  v4 = operator new();
  *(_QWORD *)(v4 + 8) = 0;
  v5 = (unint64_t *)(v4 + 8);
  *(_QWORD *)(v4 + 24) = 850045863;
  *(_QWORD *)(v4 + 16) = 0;
  *(_OWORD *)(v4 + 32) = 0u;
  *(_OWORD *)(v4 + 48) = 0u;
  *(_OWORD *)(v4 + 64) = 0u;
  *(_QWORD *)(v4 + 80) = 0;
  *(_QWORD *)(v4 + 88) = 1018212795;
  *(_OWORD *)(v4 + 96) = 0u;
  *(_OWORD *)(v4 + 112) = 0u;
  *(_OWORD *)(v4 + 124) = 0u;
  *(_QWORD *)v4 = &off_24C9B80A0;
  v22 = v4;
  std::mutex::lock((std::mutex *)(v4 + 24));
  v6 = *(_DWORD *)(v4 + 136);
  if ((v6 & 2) != 0)
    sub_20E96CE78(1u);
  do
    v7 = __ldxr(v5);
  while (__stxr(v7 + 1, v5));
  *(_DWORD *)(v4 + 136) = v6 | 2;
  std::mutex::unlock((std::mutex *)(v4 + 24));
  v8 = (uint64_t **)a1[9];
  v9 = (std::__shared_weak_count *)a1[5];
  if (v9)
  {
    v10 = std::__shared_weak_count::lock(v9);
    v11 = v10;
    if (v10)
    {
      v12 = a1[4];
      p_shared_weak_owners = (unint64_t *)&v10->__shared_weak_owners_;
      do
        v14 = __ldxr(p_shared_weak_owners);
      while (__stxr(v14 + 1, p_shared_weak_owners));
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        v16 = __ldaxr(p_shared_owners);
      while (__stlxr(v16 - 1, p_shared_owners));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    else
    {
      v12 = 0;
    }
  }
  else
  {
    v12 = 0;
    v11 = 0;
  }
  v17 = operator new(0x20uLL);
  *v17 = &off_24C9F4F20;
  v17[1] = v12;
  v17[2] = v11;
  v17[3] = &v22;
  v24 = v17;
  sub_210216F3C(*v8, (uint64_t)v23);
  v18 = v24;
  if (v24 == v23)
  {
    v19 = 4;
    v18 = v23;
    goto LABEL_17;
  }
  if (v24)
  {
    v19 = 5;
LABEL_17:
    (*(void (**)(_QWORD *))(*v18 + 8 * v19))(v18);
  }
  std::__assoc_sub_state::wait((std::__assoc_sub_state *)v4);
  sub_20EA04D14(v4, a2);
  do
    v20 = __ldaxr(v5);
  while (__stlxr(v20 - 1, v5));
  if (!v20)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
  return sub_20EA04DE8(&v22);
}

void sub_20EFCCF40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  unint64_t *v10;
  unint64_t v12;

  do
    v12 = __ldaxr(v10);
  while (__stlxr(v12 - 1, v10));
  if (!v12)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
    sub_20EA04DE8(&a9);
    _Unwind_Resume(a1);
  }
  sub_20EA04DE8(&a9);
  _Unwind_Resume(a1);
}

uint64_t *sub_20EFCD008@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  unint64_t *v5;
  int v6;
  unint64_t v7;
  uint64_t **v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *p_shared_weak_owners;
  unint64_t v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v22;
  _BYTE v23[24];
  _BYTE *v24;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  v4 = operator new();
  *(_QWORD *)(v4 + 8) = 0;
  v5 = (unint64_t *)(v4 + 8);
  *(_QWORD *)(v4 + 24) = 850045863;
  *(_QWORD *)(v4 + 16) = 0;
  *(_OWORD *)(v4 + 32) = 0u;
  *(_OWORD *)(v4 + 48) = 0u;
  *(_OWORD *)(v4 + 64) = 0u;
  *(_QWORD *)(v4 + 80) = 0;
  *(_QWORD *)(v4 + 88) = 1018212795;
  *(_OWORD *)(v4 + 96) = 0u;
  *(_OWORD *)(v4 + 112) = 0u;
  *(_OWORD *)(v4 + 124) = 0u;
  *(_QWORD *)v4 = &off_24C9B80A0;
  v22 = v4;
  std::mutex::lock((std::mutex *)(v4 + 24));
  v6 = *(_DWORD *)(v4 + 136);
  if ((v6 & 2) != 0)
    sub_20E96CE78(1u);
  do
    v7 = __ldxr(v5);
  while (__stxr(v7 + 1, v5));
  *(_DWORD *)(v4 + 136) = v6 | 2;
  std::mutex::unlock((std::mutex *)(v4 + 24));
  v8 = (uint64_t **)a1[9];
  v9 = (std::__shared_weak_count *)a1[5];
  if (v9)
  {
    v10 = std::__shared_weak_count::lock(v9);
    v11 = v10;
    if (v10)
    {
      v12 = a1[4];
      p_shared_weak_owners = (unint64_t *)&v10->__shared_weak_owners_;
      do
        v14 = __ldxr(p_shared_weak_owners);
      while (__stxr(v14 + 1, p_shared_weak_owners));
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        v16 = __ldaxr(p_shared_owners);
      while (__stlxr(v16 - 1, p_shared_owners));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    else
    {
      v12 = 0;
    }
  }
  else
  {
    v12 = 0;
    v11 = 0;
  }
  v17 = operator new(0x20uLL);
  *v17 = &off_24C9F4FA0;
  v17[1] = v12;
  v17[2] = v11;
  v17[3] = &v22;
  v24 = v17;
  sub_210216F3C(*v8, (uint64_t)v23);
  v18 = v24;
  if (v24 == v23)
  {
    v19 = 4;
    v18 = v23;
    goto LABEL_17;
  }
  if (v24)
  {
    v19 = 5;
LABEL_17:
    (*(void (**)(_QWORD *))(*v18 + 8 * v19))(v18);
  }
  std::__assoc_sub_state::wait((std::__assoc_sub_state *)v4);
  sub_20EA04D14(v4, a2);
  do
    v20 = __ldaxr(v5);
  while (__stlxr(v20 - 1, v5));
  if (!v20)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
  return sub_20EA04DE8(&v22);
}

void sub_20EFCD220(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  unint64_t *v10;
  unint64_t v12;

  do
    v12 = __ldaxr(v10);
  while (__stlxr(v12 - 1, v10));
  if (!v12)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
    sub_20EA04DE8(&a9);
    _Unwind_Resume(a1);
  }
  sub_20EA04DE8(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20EFCD2E8(uint64_t a1)
{
  return sub_20EFCD458(a1 - 16);
}

void sub_20EFCD2F0(uint64_t a1)
{
  sub_20EFCD458(a1 - 16);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20EFCD318(uint64_t a1)
{
  return sub_20EFCCA10((_QWORD *)(a1 - 16));
}

uint64_t *sub_20EFCD320@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_20EFCCD28((_QWORD *)(a1 - 16), a2);
}

uint64_t *sub_20EFCD328@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_20EFCD008((_QWORD *)(a1 - 16), a2);
}

uint64_t sub_20EFCD330(uint64_t a1)
{
  return a1 - 16;
}

uint64_t sub_20EFCD338(uint64_t a1)
{
  return sub_20EFCD458(a1 - 24);
}

void sub_20EFCD340(uint64_t a1)
{
  sub_20EFCD458(a1 - 24);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20EFCD368(uint64_t a1, uint64_t a2)
{
  return sub_20EFCCB84((_QWORD *)(a1 - 24), a2);
}

uint64_t sub_20EFCD370(uint64_t a1)
{
  return a1 - 24;
}

uint64_t sub_20EFCD378(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_20EFCD3E0(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20EFCD448(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8));
}

uint64_t sub_20EFCD458(uint64_t a1)
{
  char **v2;
  char *v3;
  char *v4;
  char *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;

  *(_QWORD *)a1 = &off_24C9F49E0;
  *(_QWORD *)(a1 + 16) = &unk_24C9F4A58;
  *(_QWORD *)(a1 + 24) = &unk_24C9F4A98;
  v2 = *(char ***)(a1 + 144);
  *(_QWORD *)(a1 + 144) = 0;
  if (v2)
  {
    std::mutex::~mutex((std::mutex *)(v2 + 7));
    if (*((_BYTE *)v2 + 48))
    {
      v3 = *v2;
      if (*v2)
      {
        v4 = v2[1];
        v5 = *v2;
        if (v4 != v3)
        {
          do
          {
            v6 = (std::__shared_weak_count *)*((_QWORD *)v4 - 1);
            if (v6)
            {
              p_shared_owners = (unint64_t *)&v6->__shared_owners_;
              do
                v8 = __ldaxr(p_shared_owners);
              while (__stlxr(v8 - 1, p_shared_owners));
              if (!v8)
              {
                ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
                std::__shared_weak_count::__release_weak(v6);
              }
            }
            v4 -= 16;
          }
          while (v4 != v3);
          v5 = *v2;
        }
        v2[1] = v3;
        operator delete(v5);
      }
    }
    MEMORY[0x212BC6398](v2, 0x1022C400958DFA3);
  }
  if (*(_QWORD *)(a1 + 136))
  {
    v9 = *(_QWORD *)(a1 + 120);
    v10 = *(uint64_t **)(a1 + 128);
    v11 = *v10;
    *(_QWORD *)(v11 + 8) = *(_QWORD *)(v9 + 8);
    **(_QWORD **)(v9 + 8) = v11;
    *(_QWORD *)(a1 + 136) = 0;
    if (v10 != (uint64_t *)(a1 + 120))
    {
      do
      {
        v12 = (uint64_t *)v10[1];
        (*(void (**)(uint64_t *))v10[2])(v10 + 2);
        operator delete(v10);
        v10 = v12;
      }
      while (v12 != (uint64_t *)(a1 + 120));
    }
  }
  if (*(_QWORD *)(a1 + 112))
  {
    v14 = *(_QWORD *)(a1 + 96);
    v13 = *(uint64_t **)(a1 + 104);
    v15 = *v13;
    *(_QWORD *)(v15 + 8) = *(_QWORD *)(v14 + 8);
    **(_QWORD **)(v14 + 8) = v15;
    *(_QWORD *)(a1 + 112) = 0;
    if (v13 != (uint64_t *)(a1 + 96))
    {
      do
      {
        v16 = (uint64_t *)v13[1];
        operator delete(v13);
        v13 = v16;
      }
      while (v16 != (uint64_t *)(a1 + 96));
    }
  }
  v17 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 88) = 0;
  if (v17)
    (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  v18 = *(std::__shared_weak_count **)(a1 + 80);
  if (!v18)
    goto LABEL_27;
  v19 = (unint64_t *)&v18->__shared_owners_;
  do
    v20 = __ldaxr(v19);
  while (__stlxr(v20 - 1, v19));
  if (v20)
  {
LABEL_27:
    if ((*(char *)(a1 + 71) & 0x80000000) == 0)
      goto LABEL_29;
    goto LABEL_28;
  }
  ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
  std::__shared_weak_count::__release_weak(v18);
  if (*(char *)(a1 + 71) < 0)
LABEL_28:
    operator delete(*(void **)(a1 + 48));
LABEL_29:
  v21 = *(std::__shared_weak_count **)(a1 + 40);
  if (v21)
    std::__shared_weak_count::__release_weak(v21);
  return a1;
}

void sub_20EFCD658(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9F4BD0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_20EFCD668(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9F4BD0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20EFCD6A0(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  *a1 = &off_24C9F4C20;
  v2 = (std::__shared_weak_count *)a1[4];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = (std::__shared_weak_count *)a1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  return a1;
}

void sub_20EFCD6E4(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  *a1 = &off_24C9F4C20;
  v2 = (std::__shared_weak_count *)a1[4];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = (std::__shared_weak_count *)a1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20EFCD738(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;

  result = operator new(0x30uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = &off_24C9F4C20;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = a1[4];
  result[3] = a1[3];
  result[4] = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 16);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  return result;
}

_QWORD *sub_20EFCD7A8(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;

  v3 = result[1];
  v2 = result[2];
  *a2 = &off_24C9F4C20;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  v6 = result[4];
  a2[3] = result[3];
  a2[4] = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 16);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  return result;
}

void sub_20EFCD7F8(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  v2 = *(std::__shared_weak_count **)(a1 + 32);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
}

void sub_20EFCD834(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  v2 = (std::__shared_weak_count *)__p[4];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = (std::__shared_weak_count *)__p[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  operator delete(__p);
}

void sub_20EFCD86C(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  _BYTE v20[8];
  char v21;

  v2 = (std::__shared_weak_count *)a1[4];
  if (!v2)
  {
    v3 = 0;
    v5 = 0;
    v4 = (std::__shared_weak_count *)a1[2];
    if (v4)
      goto LABEL_6;
    goto LABEL_11;
  }
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
  {
    v5 = 0;
    v4 = (std::__shared_weak_count *)a1[2];
    if (v4)
      goto LABEL_6;
LABEL_11:
    v7 = 0;
    v8 = 0;
    goto LABEL_12;
  }
  v4 = (std::__shared_weak_count *)a1[2];
  v5 = a1[3];
  if (!v4)
    goto LABEL_11;
LABEL_6:
  v6 = std::__shared_weak_count::lock(v4);
  v7 = v6;
  if (v6)
  {
    v8 = a1[1];
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
LABEL_12:
    if (!v3)
      goto LABEL_15;
    goto LABEL_13;
  }
  v8 = 0;
  if (!v3)
    goto LABEL_15;
LABEL_13:
  v11 = (unint64_t *)&v3->__shared_owners_;
  do
    v12 = __ldxr(v11);
  while (__stxr(v12 + 1, v11));
LABEL_15:
  if (v8)
  {
    if (v5)
    {
      v20[0] = 0;
      v21 = 0;
      sub_20EFCDB90((uint64_t *)(v8 + 88), v5, (uint64_t)v20);
      if (v21)
        MEMORY[0x212BC623C](v20);
    }
  }
  if (v3)
  {
    v13 = (unint64_t *)&v3->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  if (v7)
  {
    v15 = (unint64_t *)&v7->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
    do
      v17 = __ldaxr(v15);
    while (__stlxr(v17 - 1, v15));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  if (v3)
  {
    v18 = (unint64_t *)&v3->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_20EFCDA34(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;

  if (a10)
    MEMORY[0x212BC623C](&a9);
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  if (v11)
  {
    v15 = (unint64_t *)&v11->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
    do
      v17 = __ldaxr(v15);
    while (__stlxr(v17 - 1, v15));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (v10)
  {
    v18 = (unint64_t *)&v10->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20EFCDB18(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__117reference_wrapperINS1_12DoubleBufferINS4_6vecto"
                     "rINS_3vio10mapping_io16SubmapLoadBundleENS4_9allocatorISA_EEEEEEEEvNS9_23MappingIONodeGroupErrorEvL"
                     "b0EE25EnqueueMessageAndDispatchIZNKSH_4SendERKSF_EUlT_T0_E_EEvSK_SL_EUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__117reference_wrapperINS1_12DoubleBuffer"
                                "INS4_6vectorINS_3vio10mapping_io16SubmapLoadBundleENS4_9allocatorISA_EEEEEEEEvNS9_23Mapp"
                                "ingIONodeGroupErrorEvLb0EE25EnqueueMessageAndDispatchIZNKSH_4SendERKSF_EUlT_T0_E_EEvSK_SL_EUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__117reference_wrapperINS1_12DoubleBufferINS4_6vectorINS_3vio10mapping_io16SubmapLoadBundleENS4_9allocatorISA_EEEEEEEEvNS9_23MappingIONodeGroupErrorEvLb0EE25EnqueueMessageAndDispatchIZNKSH_4SendERKSF_EUlT_T0_E_EEvSK_SL_EUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__117reference_wrapperINS1_12DoubleBufferINS4_6vectorINS_3vio10mapping_io16SubmapLoadBundleENS4_9allocatorISA_EEEEEEEEvNS9_23MappingIONodeGroupErrorEvLb0EE25EnqueueMessageAndDispatchIZNKSH_4SendERKSF_EUlT_T0_E_EEvSK_SL_EUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20EFCDB84()
{
  return &unk_24C9F4C80;
}

void sub_20EFCDB90(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = *a1;
  if (!v6)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/ProcessorInputMessageHandlingStrategy.h", 276, (uint64_t)"callable_", 9, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v6 = *a1;
  }
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 16))(v6, a2);
  if (*(_BYTE *)(a3 + 8))
    std::promise<void>::set_value((std::promise<void> *)a3);
}

void sub_20EFCDC28(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, std::exception_ptr a17)
{
  __break(1u);
}

void sub_20EFCDE10(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  __cxa_end_catch();
  JUMPOUT(0x20EFCDE30);
}

_QWORD *sub_20EFCDE40(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_24C9F4CA0;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_20EFCDE78(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_24C9F4CA0;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20EFCDEC0(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x20uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = &off_24C9F4CA0;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  result[3] = a1[3];
  return result;
}

_QWORD *sub_20EFCDF18(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = result[1];
  v2 = result[2];
  *a2 = &off_24C9F4CA0;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  a2[3] = result[3];
  return result;
}

void sub_20EFCDF50(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void sub_20EFCDF60(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void sub_20EFCDF8C(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  _BYTE v8[8];
  char v9;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 8);
      if (v5)
      {
        v8[0] = 0;
        v9 = 0;
        sub_20EFCDB90((uint64_t *)(v5 + 88), a1 + 24, (uint64_t)v8);
        if (v9)
          MEMORY[0x212BC623C](v8);
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_20EFCE034(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v13;

  if (a10)
    MEMORY[0x212BC623C](&a9);
  p_shared_owners = (unint64_t *)&v10->__shared_owners_;
  do
    v13 = __ldaxr(p_shared_owners);
  while (__stlxr(v13 - 1, p_shared_owners));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20EFCE080(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__117reference_wrapperINS1_12DoubleBufferINS4_6vecto"
                     "rINS_3vio10mapping_io16SubmapLoadBundleENS4_9allocatorISA_EEEEEEEEvNS9_23MappingIONodeGroupErrorEvL"
                     "b0EE4SendERKSF_EUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__117reference_wrapperINS1_12DoubleBuffer"
                                "INS4_6vectorINS_3vio10mapping_io16SubmapLoadBundleENS4_9allocatorISA_EEEEEEEEvNS9_23Mapp"
                                "ingIONodeGroupErrorEvLb0EE4SendERKSF_EUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__117reference_wrapperINS1_12DoubleBufferINS4_6vectorINS_3vio10mapping_io16SubmapLoadBundleENS4_9allocatorISA_EEEEEEEEvNS9_23MappingIONodeGroupErrorEvLb0EE4SendERKSF_EUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__117reference_wrapperINS1_12DoubleBufferINS4_6vectorINS_3vio10mapping_io16SubmapLoadBundleENS4_9allocatorISA_EEEEEEEEvNS9_23MappingIONodeGroupErrorEvLb0EE4SendERKSF_EUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20EFCE0EC()
{
  return &unk_24C9F4D00;
}

_QWORD *sub_20EFCE0F8(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;

  *a1 = &off_24C9F4D20;
  v2 = (std::__shared_weak_count *)a1[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
      goto LABEL_7;
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  v5 = (std::__shared_weak_count *)a1[4];
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
LABEL_7:
  v6 = (std::__shared_weak_count *)a1[2];
  if (v6)
    std::__shared_weak_count::__release_weak(v6);
  return a1;
}

void sub_20EFCE180(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;

  *a1 = &off_24C9F4D20;
  v2 = (std::__shared_weak_count *)a1[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
    {
LABEL_7:
      v6 = (std::__shared_weak_count *)a1[2];
      if (v6)
        std::__shared_weak_count::__release_weak(v6);
      JUMPOUT(0x212BC6398);
    }
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
      goto LABEL_7;
  }
  std::__shared_weak_count::__release_weak(v5);
  goto LABEL_7;
}

_QWORD *sub_20EFCE218(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;

  result = operator new(0x38uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = &off_24C9F4D20;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = a1[4];
  result[3] = a1[3];
  result[4] = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 16);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  v10 = a1[6];
  result[5] = a1[5];
  result[6] = v10;
  if (v10)
  {
    v11 = (unint64_t *)(v10 + 8);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  return result;
}

_QWORD *sub_20EFCE2A8(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;

  v3 = result[1];
  v2 = result[2];
  *a2 = &off_24C9F4D20;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  v6 = result[4];
  a2[3] = result[3];
  a2[4] = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 16);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  v9 = result[6];
  a2[5] = result[5];
  a2[6] = v9;
  if (v9)
  {
    v10 = (unint64_t *)(v9 + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  return result;
}

void sub_20EFCE318(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;

  v2 = (std::__shared_weak_count *)a1[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
      goto LABEL_7;
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  v5 = (std::__shared_weak_count *)a1[4];
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
LABEL_7:
  v6 = (std::__shared_weak_count *)a1[2];
  if (v6)
    std::__shared_weak_count::__release_weak(v6);
}

void sub_20EFCE398(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;

  v2 = (std::__shared_weak_count *)__p[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)__p[4];
    if (!v5)
      goto LABEL_7;
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  v5 = (std::__shared_weak_count *)__p[4];
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
LABEL_7:
  v6 = (std::__shared_weak_count *)__p[2];
  if (v6)
    std::__shared_weak_count::__release_weak(v6);
  operator delete(__p);
}

void sub_20EFCE414(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t *v13;
  std::runtime_error_vtbl **v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  std::runtime_error *exception;
  std::runtime_error *v23;
  std::runtime_error *v24;
  std::runtime_error *v25;
  std::runtime_error v26;
  std::runtime_error v27;

  v2 = (std::__shared_weak_count *)a1[4];
  if (!v2)
  {
    v3 = 0;
    v5 = 0;
    v4 = (std::__shared_weak_count *)a1[2];
    if (v4)
      goto LABEL_6;
LABEL_11:
    v7 = 0;
    v8 = 0;
    goto LABEL_12;
  }
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
  {
    v5 = 0;
    v4 = (std::__shared_weak_count *)a1[2];
    if (v4)
      goto LABEL_6;
    goto LABEL_11;
  }
  v4 = (std::__shared_weak_count *)a1[2];
  v5 = a1[3];
  if (!v4)
    goto LABEL_11;
LABEL_6:
  v6 = std::__shared_weak_count::lock(v4);
  v7 = v6;
  if (!v6)
  {
    v8 = 0;
    if (!v3)
      goto LABEL_15;
    goto LABEL_13;
  }
  v8 = a1[1];
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  do
    v10 = __ldxr(p_shared_owners);
  while (__stxr(v10 + 1, p_shared_owners));
LABEL_12:
  if (!v3)
    goto LABEL_15;
LABEL_13:
  v11 = (unint64_t *)&v3->__shared_owners_;
  do
    v12 = __ldxr(v11);
  while (__stxr(v12 + 1, v11));
LABEL_15:
  if (!v8)
  {
    std::runtime_error::runtime_error(&v27, "Processor is no longer available.");
    v27.__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v23 = std::runtime_error::runtime_error(exception, &v27);
    v23->__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    __cxa_throw(v23, (struct type_info *)&unk_24CA1E2D0, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  if (!v5)
  {
    std::runtime_error::runtime_error(&v26, "Message was dropped.");
    v26.__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    v24 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v25 = std::runtime_error::runtime_error(v24, &v26);
    v25->__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    __cxa_throw(v25, (struct type_info *)&unk_24CA1E2D0, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  v13 = (uint64_t *)(v8 + 88);
  v14 = (std::runtime_error_vtbl **)a1[5];
  v26.__vftable = *v14;
  *v14 = 0;
  LOBYTE(v26.__imp_.__imp_) = 1;
  sub_20EFCDB90(v13, v5, (uint64_t)&v26);
  if (LOBYTE(v26.__imp_.__imp_))
    MEMORY[0x212BC623C](&v26);
  if (v3)
  {
    v15 = (unint64_t *)&v3->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  if (v7)
  {
    v17 = (unint64_t *)&v7->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
    do
      v19 = __ldaxr(v17);
    while (__stlxr(v19 - 1, v17));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  if (v3)
  {
    v20 = (unint64_t *)&v3->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_20EFCE6C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::runtime_error a11, std::exception_ptr a12, std::runtime_error a13, std::exception_ptr a14)
{
  std::__shared_weak_count *v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;

  std::exception_ptr::~exception_ptr(&a14);
  std::runtime_error::~runtime_error(&a13);
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v18 = __ldaxr(p_shared_owners);
    while (__stlxr(v18 - 1, p_shared_owners));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  if (v15)
  {
    v19 = (unint64_t *)&v15->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
    do
      v21 = __ldaxr(v19);
    while (__stlxr(v21 - 1, v19));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  if (v14)
  {
    v22 = (unint64_t *)&v14->__shared_owners_;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  _Unwind_Resume(a1);
}

uint64_t sub_20EFCE820(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__117reference_wrapperINS1_12DoubleBufferINS4_6vecto"
                     "rINS_3vio10mapping_io16SubmapLoadBundleENS4_9allocatorISA_EEEEEEEEvNS9_23MappingIONodeGroupErrorEvL"
                     "b0EE25EnqueueMessageAndDispatchIZNKSH_7ProcessERKSF_NS4_7promiseIvEEEUlT_T0_E_EEvSK_SN_EUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__117reference_wrapperINS1_12DoubleBuffer"
                                "INS4_6vectorINS_3vio10mapping_io16SubmapLoadBundleENS4_9allocatorISA_EEEEEEEEvNS9_23Mapp"
                                "ingIONodeGroupErrorEvLb0EE25EnqueueMessageAndDispatchIZNKSH_7ProcessERKSF_NS4_7promiseIv"
                                "EEEUlT_T0_E_EEvSK_SN_EUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__117reference_wrapperINS1_12DoubleBufferINS4_6vectorINS_3vio10mapping_io16SubmapLoadBundleENS4_9allocatorISA_EEEEEEEEvNS9_23MappingIONodeGroupErrorEvLb0EE25EnqueueMessageAndDispatchIZNKSH_7ProcessERKSF_NS4_7promiseIvEEEUlT_T0_E_EEvSK_SN_EUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__117reference_wrapperINS1_12DoubleBufferINS4_6vectorINS_3vio10mapping_io16SubmapLoadBundleENS4_9allocatorISA_EEEEEEEEvNS9_23MappingIONodeGroupErrorEvLb0EE25EnqueueMessageAndDispatchIZNKSH_7ProcessERKSF_NS4_7promiseIvEEEUlT_T0_E_EEvSK_SN_EUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20EFCE88C()
{
  return &unk_24C9F4D80;
}

_QWORD *sub_20EFCE898(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;

  *a1 = &off_24C9F4DA0;
  v2 = (std::__shared_weak_count *)a1[5];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      v5 = (std::__shared_weak_count *)a1[2];
      if (!v5)
        return a1;
      goto LABEL_6;
    }
  }
  v5 = (std::__shared_weak_count *)a1[2];
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
  return a1;
}

void sub_20EFCE914(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;

  *a1 = &off_24C9F4DA0;
  v2 = (std::__shared_weak_count *)a1[5];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)a1[2];
    if (!v5)
      goto LABEL_9;
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[2];
    if (!v5)
      goto LABEL_9;
  }
  std::__shared_weak_count::__release_weak(v5);
LABEL_9:
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20EFCE9A0(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  result = operator new(0x30uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = &off_24C9F4DA0;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = a1[4];
  result[3] = a1[3];
  result[4] = v7;
  v8 = a1[5];
  result[5] = v8;
  if (v8)
  {
    v9 = (unint64_t *)(v8 + 8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  return result;
}

_QWORD *sub_20EFCEA18(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;

  v3 = result[1];
  v2 = result[2];
  *a2 = &off_24C9F4DA0;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  a2[3] = result[3];
  v6 = result[5];
  a2[4] = result[4];
  a2[5] = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  return result;
}

void sub_20EFCEA70(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;

  v2 = *(std::__shared_weak_count **)(a1 + 40);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    v5 = *(std::__shared_weak_count **)(a1 + 16);
    if (!v5)
      return;
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  v5 = *(std::__shared_weak_count **)(a1 + 16);
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
}

void sub_20EFCEAE0(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;

  v2 = (std::__shared_weak_count *)__p[5];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      v5 = (std::__shared_weak_count *)__p[2];
      if (!v5)
        goto LABEL_7;
      goto LABEL_6;
    }
  }
  v5 = (std::__shared_weak_count *)__p[2];
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
LABEL_7:
  operator delete(__p);
}

void sub_20EFCEB50(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  uint64_t v4;
  std::runtime_error_vtbl **v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::runtime_error *exception;
  std::runtime_error *v9;
  std::runtime_error v10;

  v2 = (std::__shared_weak_count *)a1[2];
  if (!v2 || (v3 = std::__shared_weak_count::lock(v2)) == 0 || (v4 = a1[1]) == 0)
  {
    std::runtime_error::runtime_error(&v10, "Invalid operation. Processor is released.");
    v10.__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v9 = std::runtime_error::runtime_error(exception, &v10);
    v9->__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    __cxa_throw(v9, (struct type_info *)&unk_24CA1E2D0, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  v5 = (std::runtime_error_vtbl **)a1[4];
  v10.__vftable = *v5;
  *v5 = 0;
  LOBYTE(v10.__imp_.__imp_) = 1;
  sub_20EFCDB90((uint64_t *)(v4 + 88), (uint64_t)(a1 + 3), (uint64_t)&v10);
  if (LOBYTE(v10.__imp_.__imp_))
    MEMORY[0x212BC623C](&v10);
  p_shared_owners = (unint64_t *)&v3->__shared_owners_;
  do
    v7 = __ldaxr(p_shared_owners);
  while (__stlxr(v7 - 1, p_shared_owners));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
}

void sub_20EFCEC64(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10, std::runtime_error a11)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (LOBYTE(a11.__imp_.__imp_))
    MEMORY[0x212BC623C](&a11);
  p_shared_owners = (unint64_t *)&v11->__shared_owners_;
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20EFCED0C(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__117reference_wrapperINS1_12DoubleBufferINS4_6vecto"
                     "rINS_3vio10mapping_io16SubmapLoadBundleENS4_9allocatorISA_EEEEEEEEvNS9_23MappingIONodeGroupErrorEvL"
                     "b0EE7ProcessERKSF_NS4_7promiseIvEEEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__117reference_wrapperINS1_12DoubleBuffer"
                                "INS4_6vectorINS_3vio10mapping_io16SubmapLoadBundleENS4_9allocatorISA_EEEEEEEEvNS9_23Mapp"
                                "ingIONodeGroupErrorEvLb0EE7ProcessERKSF_NS4_7promiseIvEEEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__117reference_wrapperINS1_12DoubleBufferINS4_6vectorINS_3vio10mapping_io16SubmapLoadBundleENS4_9allocatorISA_EEEEEEEEvNS9_23MappingIONodeGroupErrorEvLb0EE7ProcessERKSF_NS4_7promiseIvEEEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__117reference_wrapperINS1_12DoubleBufferINS4_6vectorINS_3vio10mapping_io16SubmapLoadBundleENS4_9allocatorISA_EEEEEEEEvNS9_23MappingIONodeGroupErrorEvLb0EE7ProcessERKSF_NS4_7promiseIvEEEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20EFCED78()
{
  return &unk_24C9F4E00;
}

_QWORD *sub_20EFCED84(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_24C9F4E20;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_20EFCEDBC(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_24C9F4E20;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20EFCEE04(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x20uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *result = &off_24C9F4E20;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  return result;
}

uint64_t sub_20EFCEE54(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = *(_QWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 16);
  *a2 = &off_24C9F4E20;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

void sub_20EFCEE84(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void sub_20EFCEE94(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void sub_20EFCEEC0(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 8);
      if (v5)
      {
        v6 = operator new(0x18uLL);
        v8 = *(_QWORD *)(v5 + 96);
        v7 = (_QWORD *)(v5 + 96);
        *v6 = v8;
        v6[1] = v7;
        *(_QWORD *)(v8 + 8) = v6;
        *v7 = v6;
        ++v7[2];
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v10 = __ldaxr(p_shared_owners);
      while (__stlxr(v10 - 1, p_shared_owners));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_20EFCEF54(_Unwind_Exception *exception_object)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v4;

  p_shared_owners = (unint64_t *)&v1->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20EFCEF90(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3kit11concurrency6detail9ProcessorINSt3__117reference_wrapperINS1_12DoubleBufferINS4_6vector"
                     "INS_3vio10mapping_io16SubmapLoadBundleENS4_9allocatorISA_EEEEEEEEvNS9_23MappingIONodeGroupErrorEvLb"
                     "0EE9SubscribeENS1_12ChannelInputIvEEEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4cv3d3kit11concurrency6detail9ProcessorINSt3__117reference_wrapperINS1_12DoubleBufferI"
                                "NS4_6vectorINS_3vio10mapping_io16SubmapLoadBundleENS4_9allocatorISA_EEEEEEEEvNS9_23Mappi"
                                "ngIONodeGroupErrorEvLb0EE9SubscribeENS1_12ChannelInputIvEEEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3kit11concurrency6detail9ProcessorINSt3__117reference_wrapperINS1_12DoubleBufferINS4_6vectorINS_3vio10mapping_io16SubmapLoadBundleENS4_9allocatorISA_EEEEEEEEvNS9_23MappingIONodeGroupErrorEvLb0EE9SubscribeENS1_12ChannelInputIvEEEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3kit11concurrency6detail9ProcessorINSt3__117reference_wrapperINS1_12DoubleBufferINS4_6vectorINS_3vio10mapping_io16SubmapLoadBundleENS4_9allocatorISA_EEEEEEEEvNS9_23MappingIONodeGroupErrorEvLb0EE9SubscribeENS1_12ChannelInputIvEEEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20EFCEFFC()
{
  return &unk_24C9F4E80;
}

_QWORD *sub_20EFCF008(_QWORD *a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;

  *a1 = &off_24C9F4EA0;
  v2 = a1[4];
  a1[3] = &off_24C9B46A0;
  a1[4] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = (std::__shared_weak_count *)a1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  return a1;
}

void sub_20EFCF060(_QWORD *a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;

  *a1 = &off_24C9F4EA0;
  v2 = a1[4];
  a1[3] = &off_24C9B46A0;
  a1[4] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = (std::__shared_weak_count *)a1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20EFCF0C8(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;

  v2 = operator new(0x28uLL);
  v3 = v2;
  v5 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  *v2 = &off_24C9F4EA0;
  v2[1] = v5;
  v2[2] = v4;
  if (v4)
  {
    v6 = (unint64_t *)(v4 + 16);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  v2[3] = &off_24C9B46A0;
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32));
  return v3;
}

void sub_20EFCF140(_Unwind_Exception *a1)
{
  _QWORD *v1;
  std::__shared_weak_count *v3;

  v3 = (std::__shared_weak_count *)v1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20EFCF160(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  *a2 = &off_24C9F4EA0;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  a2[3] = &off_24C9B46A0;
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32));
}

void sub_20EFCF1C8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  std::__shared_weak_count *v3;

  v3 = *(std::__shared_weak_count **)(v1 + 16);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  _Unwind_Resume(exception_object);
}

void sub_20EFCF1E0(_QWORD *a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;

  v2 = a1[4];
  a1[3] = &off_24C9B46A0;
  a1[4] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = (std::__shared_weak_count *)a1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
}

void sub_20EFCF230(_QWORD *__p)
{
  uint64_t v2;
  std::__shared_weak_count *v3;

  v2 = __p[4];
  __p[3] = &off_24C9B46A0;
  __p[4] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = (std::__shared_weak_count *)__p[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  operator delete(__p);
}

void sub_20EFCF27C(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;

  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = a1[1];
      if (v5)
      {
        v6 = operator new(0x20uLL);
        v7 = a1[4];
        a1[4] = 0;
        v6[2] = &off_24C9B46A0;
        v6[3] = v7;
        v9 = *(_QWORD *)(v5 + 120);
        v8 = (_QWORD *)(v5 + 120);
        *v6 = v9;
        v6[1] = v8;
        *(_QWORD *)(v9 + 8) = v6;
        *v8 = v6;
        ++v8[2];
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v11 = __ldaxr(p_shared_owners);
      while (__stlxr(v11 - 1, p_shared_owners));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_20EFCF330(_Unwind_Exception *exception_object)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v4;

  p_shared_owners = (unint64_t *)&v1->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20EFCF36C(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3kit11concurrency6detail9ProcessorINSt3__117reference_wrapperINS1_12DoubleBufferINS4_6vector"
                     "INS_3vio10mapping_io16SubmapLoadBundleENS4_9allocatorISA_EEEEEEEEvNS9_23MappingIONodeGroupErrorEvLb"
                     "0EE15AddErrorHandlerENS1_12ChannelInputISG_EEEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4cv3d3kit11concurrency6detail9ProcessorINSt3__117reference_wrapperINS1_12DoubleBufferI"
                                "NS4_6vectorINS_3vio10mapping_io16SubmapLoadBundleENS4_9allocatorISA_EEEEEEEEvNS9_23Mappi"
                                "ngIONodeGroupErrorEvLb0EE15AddErrorHandlerENS1_12ChannelInputISG_EEEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3kit11concurrency6detail9ProcessorINSt3__117reference_wrapperINS1_12DoubleBufferINS4_6vectorINS_3vio10mapping_io16SubmapLoadBundleENS4_9allocatorISA_EEEEEEEEvNS9_23MappingIONodeGroupErrorEvLb0EE15AddErrorHandlerENS1_12ChannelInputISG_EEEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3kit11concurrency6detail9ProcessorINSt3__117reference_wrapperINS1_12DoubleBufferINS4_6vectorINS_3vio10mapping_io16SubmapLoadBundleENS4_9allocatorISA_EEEEEEEEvNS9_23MappingIONodeGroupErrorEvLb0EE15AddErrorHandlerENS1_12ChannelInputISG_EEEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20EFCF3D8()
{
  return &unk_24C9F4F00;
}

_QWORD *sub_20EFCF3E4(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_24C9F4F20;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_20EFCF41C(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_24C9F4F20;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20EFCF464(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x20uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = &off_24C9F4F20;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  result[3] = a1[3];
  return result;
}

_QWORD *sub_20EFCF4BC(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = result[1];
  v2 = result[2];
  *a2 = &off_24C9F4F20;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  a2[3] = result[3];
  return result;
}

void sub_20EFCF4F4(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void sub_20EFCF504(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void sub_20EFCF530(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  void *__p;
  void *v9;
  uint64_t v10;

  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      if (a1[1])
      {
        v5 = (uint64_t *)a1[3];
        __p = 0;
        v9 = 0;
        v10 = 0;
        if (!*v5)
          sub_20E96CE78(3u);
        sub_20EA04C5C(*v5, (uint64_t)&__p);
        if (__p)
        {
          v9 = __p;
          operator delete(__p);
        }
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_20EFCF5E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (__p)
    operator delete(__p);
  p_shared_owners = (unint64_t *)&v11->__shared_owners_;
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20EFCF634(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__117reference_wrapperINS1_12DoubleBufferINS4_6vecto"
                     "rINS_3vio10mapping_io16SubmapLoadBundleENS4_9allocatorISA_EEEEEEEEvNS9_23MappingIONodeGroupErrorEvL"
                     "b0EE16OutputHandlerIDsEvEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__117reference_wrapperINS1_12DoubleBuffer"
                                "INS4_6vectorINS_3vio10mapping_io16SubmapLoadBundleENS4_9allocatorISA_EEEEEEEEvNS9_23Mapp"
                                "ingIONodeGroupErrorEvLb0EE16OutputHandlerIDsEvEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__117reference_wrapperINS1_12DoubleBufferINS4_6vectorINS_3vio10mapping_io16SubmapLoadBundleENS4_9allocatorISA_EEEEEEEEvNS9_23MappingIONodeGroupErrorEvLb0EE16OutputHandlerIDsEvEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__117reference_wrapperINS1_12DoubleBufferINS4_6vectorINS_3vio10mapping_io16SubmapLoadBundleENS4_9allocatorISA_EEEEEEEEvNS9_23MappingIONodeGroupErrorEvLb0EE16OutputHandlerIDsEvEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20EFCF6A0()
{
  return &unk_24C9F4F80;
}

_QWORD *sub_20EFCF6AC(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_24C9F4FA0;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_20EFCF6E4(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_24C9F4FA0;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20EFCF72C(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x20uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = &off_24C9F4FA0;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  result[3] = a1[3];
  return result;
}

_QWORD *sub_20EFCF784(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = result[1];
  v2 = result[2];
  *a2 = &off_24C9F4FA0;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  a2[3] = result[3];
  return result;
}

void sub_20EFCF7BC(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void sub_20EFCF7CC(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void sub_20EFCF7F8(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  uint64_t *v6;
  unint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p[2];
  char *v16;
  __int128 v17;
  char *v18;
  uint64_t v19;
  __int128 *v20;

  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = a1[1];
      if (!v5)
      {
LABEL_11:
        p_shared_owners = (unint64_t *)&v4->__shared_owners_;
        do
          v14 = __ldaxr(p_shared_owners);
        while (__stlxr(v14 - 1, p_shared_owners));
        if (!v14)
        {
          ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
          std::__shared_weak_count::__release_weak(v4);
        }
        return;
      }
      v6 = (uint64_t *)a1[3];
      v7 = *(_QWORD *)(v5 + 136);
      v18 = 0;
      v17 = 0uLL;
      if (v7)
      {
        if (v7 >> 61)
          sub_20E92CED8();
        v8 = (char *)operator new(8 * v7);
        v9 = &v8[8 * v7];
        *(_QWORD *)&v17 = v8;
        *((_QWORD *)&v17 + 1) = v8;
        v18 = v9;
        v10 = v5 + 120;
        v11 = *(_QWORD *)(v5 + 128);
        v20 = &v17;
        if (v11 != v10)
        {
          do
          {
LABEL_7:
            v19 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v11 + 24) + 48))(*(_QWORD *)(v11 + 24));
            sub_20E9B2D04((uint64_t *)&v20, &v19);
            v11 = *(_QWORD *)(v11 + 8);
          }
          while (v11 != v10);
          *(_OWORD *)__p = v17;
          v16 = v18;
          v12 = *v6;
          if (*v6)
            goto LABEL_9;
          goto LABEL_18;
        }
      }
      else
      {
        v9 = 0;
        v8 = 0;
        v10 = v5 + 120;
        v11 = *(_QWORD *)(v5 + 128);
        v20 = &v17;
        if (v11 != v10)
          goto LABEL_7;
      }
      *(int64x2_t *)__p = vdupq_n_s64((unint64_t)v8);
      v16 = v9;
      v12 = *v6;
      if (*v6)
      {
LABEL_9:
        sub_20EA04C5C(v12, (uint64_t)__p);
        if (__p[0])
        {
          __p[1] = __p[0];
          operator delete(__p[0]);
        }
        goto LABEL_11;
      }
LABEL_18:
      sub_20E96CE78(3u);
    }
  }
}

void sub_20EFCF974(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v17;

  if (__p)
    operator delete(__p);
  p_shared_owners = (unint64_t *)&v14->__shared_owners_;
  do
    v17 = __ldaxr(p_shared_owners);
  while (__stlxr(v17 - 1, p_shared_owners));
  if (!v17)
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20EFCF9E4(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__117reference_wrapperINS1_12DoubleBufferINS4_6vecto"
                     "rINS_3vio10mapping_io16SubmapLoadBundleENS4_9allocatorISA_EEEEEEEEvNS9_23MappingIONodeGroupErrorEvL"
                     "b0EE15ErrorHandlerIDsEvEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__117reference_wrapperINS1_12DoubleBuffer"
                                "INS4_6vectorINS_3vio10mapping_io16SubmapLoadBundleENS4_9allocatorISA_EEEEEEEEvNS9_23Mapp"
                                "ingIONodeGroupErrorEvLb0EE15ErrorHandlerIDsEvEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__117reference_wrapperINS1_12DoubleBufferINS4_6vectorINS_3vio10mapping_io16SubmapLoadBundleENS4_9allocatorISA_EEEEEEEEvNS9_23MappingIONodeGroupErrorEvLb0EE15ErrorHandlerIDsEvEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__117reference_wrapperINS1_12DoubleBufferINS4_6vectorINS_3vio10mapping_io16SubmapLoadBundleENS4_9allocatorISA_EEEEEEEEvNS9_23MappingIONodeGroupErrorEvLb0EE15ErrorHandlerIDsEvEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20EFCFA50()
{
  return &unk_24C9F5000;
}

void sub_20EFCFA60(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20EFCFA84(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t sub_20EFCFA9C(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail9ProcessorINS_17reference_wrapperINS3_12DoubleBuf"
                     "ferINS_6vectorINS1_3vio10mapping_io16SubmapLoadBundleENS_9allocatorISB_EEEEEEEEvNSA_23MappingIONode"
                     "GroupErrorEvLb0EEEE27__shared_ptr_default_deleteISI_SI_EE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail9ProcessorINS_17reference_wrapperINS3_"
                                "12DoubleBufferINS_6vectorINS1_3vio10mapping_io16SubmapLoadBundleENS_9allocatorISB_EEEEEE"
                                "EEvNSA_23MappingIONodeGroupErrorEvLb0EEEE27__shared_ptr_default_deleteISI_SI_EE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail9ProcessorINS_17reference_wrapperINS3_12DoubleBufferINS_6vectorINS1_3vio10mapping_io16SubmapLoadBundleENS_9allocatorISB_EEEEEEEEvNSA_23MappingIONodeGroupErrorEvLb0EEEE27__shared_ptr_default_deleteISI_SI_EE"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail9ProcessorINS_17reference_wrapperINS3_12DoubleBufferINS_6vectorINS1_3vio10mapping_io16SubmapLoadBundleENS_9allocatorISB_EEEEEEEEvNSA_23MappingIONodeGroupErrorEvLb0EEEE27__shared_ptr_default_deleteISI_SI_EE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

uint64_t sub_20EFCFB0C(uint64_t a1)
{
  std::__shared_weak_count *v2;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_20EFCFB38(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20EFCFB74@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *result;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;

  result = (_QWORD *)operator new();
  v6 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  *result = &off_24C9F5070;
  result[1] = v6;
  result[2] = v5;
  if (v5)
  {
    v7 = (unint64_t *)(v5 + 16);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  *a2 = result;
  return result;
}

void sub_20EFCFBDC(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 8);
      if (v5)
        (*(void (**)(uint64_t))(*(_QWORD *)v5 + 32))(v5);
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_20EFCFC6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20EFCFC80(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 8);
      if (v5)
        (*(void (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_20EFCFD10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20EFCFD24(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return 0;
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
    return 0;
  v4 = v3;
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
    v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 48))(v5);
  else
    v6 = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (v9)
    return v6;
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return v6;
}

void sub_20EFCFDE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20EFCFDFC(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return 0;
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
    return 0;
  v4 = v3;
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
    v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 24))(v5);
  else
    v6 = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (v9)
    return v6;
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return v6;
}

void sub_20EFCFEC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20EFCFED4(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3)
  {
    v5 = std::__shared_weak_count::lock(v3);
    if (v5)
    {
      v6 = v5;
      v7 = *(_QWORD *)(a1 + 8);
      if (v7)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v7 + 16))(v7, a2);
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
}

void sub_20EFCFF78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20EFCFF8C(uint64_t a1)
{
  _QWORD *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_weak_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;

  *(_QWORD *)a1 = &off_24C9F2D98;
  v2 = (_QWORD *)(a1 + 72);
  if (*(_QWORD *)(a1 + 72))
  {
    v3 = *(std::__shared_weak_count **)(a1 + 80);
    if (v3)
    {
      p_shared_weak_owners = (unint64_t *)&v3->__shared_weak_owners_;
      do
        v5 = __ldxr(p_shared_weak_owners);
      while (__stxr(v5 + 1, p_shared_weak_owners));
      v6 = *(std::__shared_weak_count **)(a1 + 80);
      *v2 = 0;
      *(_QWORD *)(a1 + 80) = 0;
      if (v6)
      {
        p_shared_owners = (unint64_t *)&v6->__shared_owners_;
        do
          v8 = __ldaxr(p_shared_owners);
        while (__stlxr(v8 - 1, p_shared_owners));
        if (!v8)
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
      }
      while (v3->__shared_owners_ != -1)
        sched_yield();
    }
    else
    {
      *v2 = 0;
      *(_QWORD *)(a1 + 80) = 0;
    }
    v9 = *(uint64_t **)(a1 + 56);
    if (v9)
      sub_210217048(*v9);
    if (v3)
      std::__shared_weak_count::__release_weak(v3);
  }
  *(_QWORD *)(a1 + 144) = &off_24C9F2C28;
  v10 = *(std::__shared_weak_count **)(a1 + 160);
  if (v10)
    std::__shared_weak_count::__release_weak(v10);
  *(_QWORD *)(a1 + 120) = &off_24C9B2520;
  v11 = *(std::__shared_weak_count **)(a1 + 136);
  if (v11)
    std::__shared_weak_count::__release_weak(v11);
  v12 = *(std::__shared_weak_count **)(a1 + 112);
  if (v12)
    std::__shared_weak_count::__release_weak(v12);
  v13 = *(_QWORD *)(a1 + 96);
  *(_QWORD *)(a1 + 88) = &off_24C9F2DC8;
  *(_QWORD *)(a1 + 96) = 0;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v14 = *(std::__shared_weak_count **)(a1 + 80);
  if (v14)
  {
    v15 = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  v17 = *(std::__shared_weak_count **)(a1 + 64);
  if (!v17)
    goto LABEL_34;
  v18 = (unint64_t *)&v17->__shared_owners_;
  do
    v19 = __ldaxr(v18);
  while (__stlxr(v19 - 1, v18));
  if (v19)
  {
LABEL_34:
    if ((*(char *)(a1 + 55) & 0x80000000) == 0)
      goto LABEL_35;
LABEL_38:
    operator delete(*(void **)(a1 + 32));
    if ((*(char *)(a1 + 31) & 0x80000000) == 0)
      return a1;
    goto LABEL_39;
  }
  ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
  std::__shared_weak_count::__release_weak(v17);
  if (*(char *)(a1 + 55) < 0)
    goto LABEL_38;
LABEL_35:
  if ((*(char *)(a1 + 31) & 0x80000000) == 0)
    return a1;
LABEL_39:
  operator delete(*(void **)(a1 + 8));
  return a1;
}

uint64_t sub_20EFD0170(uint64_t a1)
{
  _QWORD *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_weak_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;

  *(_QWORD *)a1 = &off_24C9F2D30;
  v2 = (_QWORD *)(a1 + 72);
  if (*(_QWORD *)(a1 + 72))
  {
    v3 = *(std::__shared_weak_count **)(a1 + 80);
    if (v3)
    {
      p_shared_weak_owners = (unint64_t *)&v3->__shared_weak_owners_;
      do
        v5 = __ldxr(p_shared_weak_owners);
      while (__stxr(v5 + 1, p_shared_weak_owners));
      v6 = *(std::__shared_weak_count **)(a1 + 80);
      *v2 = 0;
      *(_QWORD *)(a1 + 80) = 0;
      if (v6)
      {
        p_shared_owners = (unint64_t *)&v6->__shared_owners_;
        do
          v8 = __ldaxr(p_shared_owners);
        while (__stlxr(v8 - 1, p_shared_owners));
        if (!v8)
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
      }
      while (v3->__shared_owners_ != -1)
        sched_yield();
    }
    else
    {
      *v2 = 0;
      *(_QWORD *)(a1 + 80) = 0;
    }
    v9 = *(uint64_t **)(a1 + 56);
    if (v9)
      sub_210217048(*v9);
    if (v3)
      std::__shared_weak_count::__release_weak(v3);
  }
  *(_QWORD *)(a1 + 144) = &off_24C9F2C28;
  v10 = *(std::__shared_weak_count **)(a1 + 160);
  if (v10)
    std::__shared_weak_count::__release_weak(v10);
  *(_QWORD *)(a1 + 120) = &off_24C9F2D60;
  v11 = *(std::__shared_weak_count **)(a1 + 136);
  if (v11)
    std::__shared_weak_count::__release_weak(v11);
  v12 = *(std::__shared_weak_count **)(a1 + 112);
  if (v12)
    std::__shared_weak_count::__release_weak(v12);
  v13 = *(_QWORD *)(a1 + 96);
  *(_QWORD *)(a1 + 88) = &off_24C9B4710;
  *(_QWORD *)(a1 + 96) = 0;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v14 = *(std::__shared_weak_count **)(a1 + 80);
  if (v14)
  {
    v15 = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  v17 = *(std::__shared_weak_count **)(a1 + 64);
  if (!v17)
    goto LABEL_34;
  v18 = (unint64_t *)&v17->__shared_owners_;
  do
    v19 = __ldaxr(v18);
  while (__stlxr(v19 - 1, v18));
  if (v19)
  {
LABEL_34:
    if ((*(char *)(a1 + 55) & 0x80000000) == 0)
      goto LABEL_35;
LABEL_38:
    operator delete(*(void **)(a1 + 32));
    if ((*(char *)(a1 + 31) & 0x80000000) == 0)
      return a1;
    goto LABEL_39;
  }
  ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
  std::__shared_weak_count::__release_weak(v17);
  if (*(char *)(a1 + 55) < 0)
    goto LABEL_38;
LABEL_35:
  if ((*(char *)(a1 + 31) & 0x80000000) == 0)
    return a1;
LABEL_39:
  operator delete(*(void **)(a1 + 8));
  return a1;
}

uint64_t sub_20EFD0354(uint64_t a1)
{
  _QWORD *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_weak_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;

  *(_QWORD *)a1 = &off_24C9F2D00;
  v2 = (_QWORD *)(a1 + 72);
  if (*(_QWORD *)(a1 + 72))
  {
    v3 = *(std::__shared_weak_count **)(a1 + 80);
    if (v3)
    {
      p_shared_weak_owners = (unint64_t *)&v3->__shared_weak_owners_;
      do
        v5 = __ldxr(p_shared_weak_owners);
      while (__stxr(v5 + 1, p_shared_weak_owners));
      v6 = *(std::__shared_weak_count **)(a1 + 80);
      *v2 = 0;
      *(_QWORD *)(a1 + 80) = 0;
      if (v6)
      {
        p_shared_owners = (unint64_t *)&v6->__shared_owners_;
        do
          v8 = __ldaxr(p_shared_owners);
        while (__stlxr(v8 - 1, p_shared_owners));
        if (!v8)
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
      }
      while (v3->__shared_owners_ != -1)
        sched_yield();
    }
    else
    {
      *v2 = 0;
      *(_QWORD *)(a1 + 80) = 0;
    }
    v9 = *(uint64_t **)(a1 + 56);
    if (v9)
      sub_210217048(*v9);
    if (v3)
      std::__shared_weak_count::__release_weak(v3);
  }
  *(_QWORD *)(a1 + 144) = &off_24C9F2C28;
  v10 = *(std::__shared_weak_count **)(a1 + 160);
  if (v10)
    std::__shared_weak_count::__release_weak(v10);
  *(_QWORD *)(a1 + 120) = &off_24C9B2520;
  v11 = *(std::__shared_weak_count **)(a1 + 136);
  if (v11)
    std::__shared_weak_count::__release_weak(v11);
  v12 = *(std::__shared_weak_count **)(a1 + 112);
  if (v12)
    std::__shared_weak_count::__release_weak(v12);
  v13 = *(_QWORD *)(a1 + 96);
  *(_QWORD *)(a1 + 88) = &off_24C9B4748;
  *(_QWORD *)(a1 + 96) = 0;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v14 = *(std::__shared_weak_count **)(a1 + 80);
  if (v14)
  {
    v15 = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  v17 = *(std::__shared_weak_count **)(a1 + 64);
  if (!v17)
    goto LABEL_34;
  v18 = (unint64_t *)&v17->__shared_owners_;
  do
    v19 = __ldaxr(v18);
  while (__stlxr(v19 - 1, v18));
  if (v19)
  {
LABEL_34:
    if ((*(char *)(a1 + 55) & 0x80000000) == 0)
      goto LABEL_35;
LABEL_38:
    operator delete(*(void **)(a1 + 32));
    if ((*(char *)(a1 + 31) & 0x80000000) == 0)
      return a1;
    goto LABEL_39;
  }
  ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
  std::__shared_weak_count::__release_weak(v17);
  if (*(char *)(a1 + 55) < 0)
    goto LABEL_38;
LABEL_35:
  if ((*(char *)(a1 + 31) & 0x80000000) == 0)
    return a1;
LABEL_39:
  operator delete(*(void **)(a1 + 8));
  return a1;
}

uint64_t sub_20EFD0538(uint64_t a1)
{
  _QWORD *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_weak_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;

  *(_QWORD *)a1 = &off_24C9F2C60;
  v2 = (_QWORD *)(a1 + 72);
  if (*(_QWORD *)(a1 + 72))
  {
    v3 = *(std::__shared_weak_count **)(a1 + 80);
    if (v3)
    {
      p_shared_weak_owners = (unint64_t *)&v3->__shared_weak_owners_;
      do
        v5 = __ldxr(p_shared_weak_owners);
      while (__stxr(v5 + 1, p_shared_weak_owners));
      v6 = *(std::__shared_weak_count **)(a1 + 80);
      *v2 = 0;
      *(_QWORD *)(a1 + 80) = 0;
      if (v6)
      {
        p_shared_owners = (unint64_t *)&v6->__shared_owners_;
        do
          v8 = __ldaxr(p_shared_owners);
        while (__stlxr(v8 - 1, p_shared_owners));
        if (!v8)
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
      }
      while (v3->__shared_owners_ != -1)
        sched_yield();
    }
    else
    {
      *v2 = 0;
      *(_QWORD *)(a1 + 80) = 0;
    }
    v9 = *(uint64_t **)(a1 + 56);
    if (v9)
      sub_210217048(*v9);
    if (v3)
      std::__shared_weak_count::__release_weak(v3);
  }
  *(_QWORD *)(a1 + 144) = &off_24C9F2C28;
  v10 = *(std::__shared_weak_count **)(a1 + 160);
  if (v10)
    std::__shared_weak_count::__release_weak(v10);
  *(_QWORD *)(a1 + 120) = &off_24C9F2C90;
  v11 = *(std::__shared_weak_count **)(a1 + 136);
  if (v11)
    std::__shared_weak_count::__release_weak(v11);
  v12 = *(std::__shared_weak_count **)(a1 + 112);
  if (v12)
    std::__shared_weak_count::__release_weak(v12);
  v13 = *(_QWORD *)(a1 + 96);
  *(_QWORD *)(a1 + 88) = &off_24C9B46D8;
  *(_QWORD *)(a1 + 96) = 0;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v14 = *(std::__shared_weak_count **)(a1 + 80);
  if (v14)
  {
    v15 = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  v17 = *(std::__shared_weak_count **)(a1 + 64);
  if (!v17)
    goto LABEL_34;
  v18 = (unint64_t *)&v17->__shared_owners_;
  do
    v19 = __ldaxr(v18);
  while (__stlxr(v19 - 1, v18));
  if (v19)
  {
LABEL_34:
    if ((*(char *)(a1 + 55) & 0x80000000) == 0)
      goto LABEL_35;
LABEL_38:
    operator delete(*(void **)(a1 + 32));
    if ((*(char *)(a1 + 31) & 0x80000000) == 0)
      return a1;
    goto LABEL_39;
  }
  ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
  std::__shared_weak_count::__release_weak(v17);
  if (*(char *)(a1 + 55) < 0)
    goto LABEL_38;
LABEL_35:
  if ((*(char *)(a1 + 31) & 0x80000000) == 0)
    return a1;
LABEL_39:
  operator delete(*(void **)(a1 + 8));
  return a1;
}

uint64_t sub_20EFD071C(uint64_t a1)
{
  _QWORD *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_weak_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;

  *(_QWORD *)a1 = &off_24C9F2B50;
  v2 = (_QWORD *)(a1 + 72);
  if (*(_QWORD *)(a1 + 72))
  {
    v3 = *(std::__shared_weak_count **)(a1 + 80);
    if (v3)
    {
      p_shared_weak_owners = (unint64_t *)&v3->__shared_weak_owners_;
      do
        v5 = __ldxr(p_shared_weak_owners);
      while (__stxr(v5 + 1, p_shared_weak_owners));
      v6 = *(std::__shared_weak_count **)(a1 + 80);
      *v2 = 0;
      *(_QWORD *)(a1 + 80) = 0;
      if (v6)
      {
        p_shared_owners = (unint64_t *)&v6->__shared_owners_;
        do
          v8 = __ldaxr(p_shared_owners);
        while (__stlxr(v8 - 1, p_shared_owners));
        if (!v8)
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
      }
      while (v3->__shared_owners_ != -1)
        sched_yield();
    }
    else
    {
      *v2 = 0;
      *(_QWORD *)(a1 + 80) = 0;
    }
    v9 = *(uint64_t **)(a1 + 56);
    if (v9)
      sub_210217048(*v9);
    if (v3)
      std::__shared_weak_count::__release_weak(v3);
  }
  *(_QWORD *)(a1 + 144) = &off_24C9F2C28;
  v10 = *(std::__shared_weak_count **)(a1 + 160);
  if (v10)
    std::__shared_weak_count::__release_weak(v10);
  *(_QWORD *)(a1 + 120) = &off_24C9F2BB8;
  v11 = *(std::__shared_weak_count **)(a1 + 136);
  if (v11)
    std::__shared_weak_count::__release_weak(v11);
  v12 = *(std::__shared_weak_count **)(a1 + 112);
  if (v12)
    std::__shared_weak_count::__release_weak(v12);
  v13 = *(_QWORD *)(a1 + 96);
  *(_QWORD *)(a1 + 88) = &off_24C9F2B80;
  *(_QWORD *)(a1 + 96) = 0;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v14 = *(std::__shared_weak_count **)(a1 + 80);
  if (v14)
  {
    v15 = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  v17 = *(std::__shared_weak_count **)(a1 + 64);
  if (!v17)
    goto LABEL_34;
  v18 = (unint64_t *)&v17->__shared_owners_;
  do
    v19 = __ldaxr(v18);
  while (__stlxr(v19 - 1, v18));
  if (v19)
  {
LABEL_34:
    if ((*(char *)(a1 + 55) & 0x80000000) == 0)
      goto LABEL_35;
LABEL_38:
    operator delete(*(void **)(a1 + 32));
    if ((*(char *)(a1 + 31) & 0x80000000) == 0)
      return a1;
    goto LABEL_39;
  }
  ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
  std::__shared_weak_count::__release_weak(v17);
  if (*(char *)(a1 + 55) < 0)
    goto LABEL_38;
LABEL_35:
  if ((*(char *)(a1 + 31) & 0x80000000) == 0)
    return a1;
LABEL_39:
  operator delete(*(void **)(a1 + 8));
  return a1;
}

uint64_t sub_20EFD0900(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;

  *(_QWORD *)a1 = &off_24C9F2B20;
  v2 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 72) = 0;
  if (v2)
  {
    sub_20EFCFF8C(v2 + 672);
    sub_20EFD0170(v2 + 504);
    sub_20EFD0354(v2 + 336);
    sub_20EFD0538(v2 + 168);
    v3 = sub_20EFD071C(v2);
    MEMORY[0x212BC6398](v3, 0x10B2C40BB27B6B6);
  }
  v4 = *(std::__shared_weak_count **)(a1 + 64);
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
      v7 = *(_QWORD *)(a1 + 72);
      *(_QWORD *)(a1 + 72) = 0;
      if (!v7)
        goto LABEL_9;
      goto LABEL_8;
    }
  }
  v7 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 72) = 0;
  if (v7)
  {
LABEL_8:
    sub_20EFCFF8C(v7 + 672);
    sub_20EFD0170(v7 + 504);
    sub_20EFD0354(v7 + 336);
    sub_20EFD0538(v7 + 168);
    v8 = sub_20EFD071C(v7);
    MEMORY[0x212BC6398](v8, 0x10B2C40BB27B6B6);
  }
LABEL_9:
  v9 = *(std::__shared_weak_count **)(a1 + 64);
  if (!v9)
    goto LABEL_13;
  v10 = (unint64_t *)&v9->__shared_owners_;
  do
    v11 = __ldaxr(v10);
  while (__stlxr(v11 - 1, v10));
  if (v11)
  {
LABEL_13:
    if ((*(char *)(a1 + 55) & 0x80000000) == 0)
      goto LABEL_14;
LABEL_19:
    operator delete(*(void **)(a1 + 32));
    if ((*(char *)(a1 + 31) & 0x80000000) == 0)
      return a1;
    goto LABEL_20;
  }
  ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
  std::__shared_weak_count::__release_weak(v9);
  if (*(char *)(a1 + 55) < 0)
    goto LABEL_19;
LABEL_14:
  if ((*(char *)(a1 + 31) & 0x80000000) == 0)
    return a1;
LABEL_20:
  operator delete(*(void **)(a1 + 8));
  return a1;
}

void sub_20EFD0A80(uint64_t a1)
{
  sub_20EFDC428(a1);
  JUMPOUT(0x212BC6398);
}

void sub_20EFD0AA8(uint64_t a1)
{
  sub_20EFD1B80(a1);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20EFD0ACC(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_24C9F5148;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_20EFD0B04(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_24C9F5148;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x212BC6398);
}

void sub_20EFD0B4C(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  uint64_t (**v12)();
  uint64_t v13;
  uint64_t v14;
  std::__shared_weak_count *v15;

  v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3)
  {
    v5 = std::__shared_weak_count::lock(v3);
    v15 = v5;
    if (v5)
    {
      v6 = v5;
      v7 = *(_QWORD *)(a1 + 8);
      v14 = v7;
      if (v7)
      {
        v8 = *(_QWORD *)(a2 + 8);
        *(_QWORD *)(a2 + 8) = 0;
        v12 = &off_24C9B46A0;
        v13 = v8;
        (*(void (**)(uint64_t, uint64_t (***)()))(*(_QWORD *)v7 + 16))(v7, &v12);
        v9 = v13;
        v12 = &off_24C9B46A0;
        v13 = 0;
        if (v9)
          (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
      }
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v11 = __ldaxr(p_shared_owners);
      while (__stlxr(v11 - 1, p_shared_owners));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
}

void sub_20EFD0C20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  if (a3)
    (*(void (**)(uint64_t))(*(_QWORD *)a3 + 8))(a3);
  sub_20E86665C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20EFD0C50(uint64_t a1)
{
  sub_20EFD13BC(a1);
  JUMPOUT(0x212BC6398);
}

void sub_20EFD0C74(uint64_t *a1, uint64_t a2)
{
  std::recursive_mutex *v4;
  uint64_t v5;
  char v6;

  if ((*(unsigned int (**)(uint64_t *))(*a1 + 48))(a1))
  {
    v4 = (std::recursive_mutex *)a1[9];
    if (!v4)
    {
      if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/SynchronousProcessor.h", 177, (uint64_t)"sync_", 5, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
        abort();
      }
      v4 = (std::recursive_mutex *)a1[9];
    }
    std::recursive_mutex::lock(v4);
    LOBYTE(v5) = 0;
    v6 = 0;
    sub_20EFD1518(a1 + 11, a2, &v5);
    if (v6)
      sub_20EFD18AC(&v5);
    std::recursive_mutex::unlock(v4);
  }
}

void sub_20EFD0D30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  std::recursive_mutex *v10;

  if (a10)
    sub_20EFD18AC(&a9);
  std::recursive_mutex::unlock(v10);
  _Unwind_Resume(a1);
}

void sub_20EFD0D58(uint64_t *a1, uint64_t a2, uint64_t *a3)
{
  std::recursive_mutex *v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  std::string *v11;
  std::runtime_error *exception;
  std::runtime_error *v13;
  uint64_t v14;
  char v15;
  std::string v16;
  std::runtime_error v17;
  _QWORD v18[4];
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  if (((*(uint64_t (**)(uint64_t *))(*a1 + 48))(a1) & 1) == 0)
  {
    v18[0] = "Invalid operation. Interface is disabled for ";
    v18[1] = 45;
    v9 = a1[6];
    v8 = a1 + 6;
    v7 = (_QWORD *)v9;
    v10 = *((unsigned __int8 *)v8 + 23);
    if ((v10 & 0x80u) != 0)
      v10 = v8[1];
    else
      v7 = v8;
    v18[2] = v7;
    v18[3] = v10;
    sub_20E8778D4((uint64_t)v18, (uint64_t)&v19, 0, 0, &v16);
    if ((v16.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v11 = &v16;
    else
      v11 = (std::string *)v16.__r_.__value_.__r.__words[0];
    std::runtime_error::runtime_error(&v17, (const char *)v11);
    v17.__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v13 = std::runtime_error::runtime_error(exception, &v17);
    v13->__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    __cxa_throw(v13, (struct type_info *)&unk_24CA1E2D0, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  v6 = (std::recursive_mutex *)a1[9];
  if (!v6)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/SynchronousProcessor.h", 211, (uint64_t)"sync_", 5, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v6 = (std::recursive_mutex *)a1[9];
  }
  std::recursive_mutex::lock(v6);
  v14 = *a3;
  *a3 = 0;
  v15 = 1;
  sub_20EFD1518(a1 + 11, a2, &v14);
  if (v15)
    sub_20EFD18AC(&v14);
  std::recursive_mutex::unlock(v6);
}

void sub_20EFD0EF0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, std::runtime_error a18, std::exception_ptr a19, std::exception_ptr a20)
{
  std::__assoc_sub_state **v20;
  std::__assoc_sub_state *v21;
  std::exception_ptr v22;

  if (a2)
  {
    __cxa_begin_catch(exception_object);
    std::current_exception();
    __cxa_end_catch();
    v21 = *v20;
    if (v21)
    {
      std::exception_ptr::exception_ptr(&a20, &a19);
      v22.__ptr_ = &a20;
      std::__assoc_sub_state::set_exception(v21, v22);
      std::exception_ptr::~exception_ptr(&a20);
      std::exception_ptr::~exception_ptr(&a19);
      std::runtime_error::~runtime_error(&a18);
      if (a17 < 0)
        operator delete(__p);
      JUMPOUT(0x20EFD0E1CLL);
    }
    sub_20E96CE78(3u);
  }
  _Unwind_Resume(exception_object);
}

void sub_20EFD0F64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, std::runtime_error a18, std::exception_ptr a19, std::exception_ptr a20)
{
  std::exception_ptr::~exception_ptr(&a19);
  std::runtime_error::~runtime_error(&a18);
  if (a17 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void sub_20EFD0FC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, __int16 a11, char a12, char a13)
{
  std::recursive_mutex *v13;

  if ((_BYTE)a11)
    sub_20EFD18AC(&a10);
  std::recursive_mutex::unlock(v13);
  _Unwind_Resume(a1);
}

void sub_20EFD0FE8(uint64_t a1)
{
  std::recursive_mutex *v1;
  std::recursive_mutex *v3;

  v1 = *(std::recursive_mutex **)(a1 + 72);
  if (v1)
  {
    std::recursive_mutex::lock(*(std::recursive_mutex **)(a1 + 72));
    std::recursive_mutex::unlock(v1);
  }
  else
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/SynchronousProcessor.h", 138, (uint64_t)"sync_", 5, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v3 = *(std::recursive_mutex **)(a1 + 72);
    std::recursive_mutex::lock(v3);
    std::recursive_mutex::unlock(v3);
  }
}

void sub_20EFD106C(uint64_t a1, uint64_t a2)
{
  std::recursive_mutex *v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;

  v4 = *(std::recursive_mutex **)(a1 + 72);
  if (!v4)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/SynchronousProcessor.h", 148, (uint64_t)"sync_", 5, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v4 = *(std::recursive_mutex **)(a1 + 72);
  }
  std::recursive_mutex::lock(v4);
  v5 = operator new(0x20uLL);
  v6 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v5[2] = &off_24C9B46A0;
  v5[3] = v6;
  v8 = *(_QWORD *)(a1 + 96);
  v7 = (_QWORD *)(a1 + 96);
  *v5 = v8;
  v5[1] = v7;
  *(_QWORD *)(v8 + 8) = v5;
  *v7 = v5;
  ++v7[2];
  std::recursive_mutex::unlock(v4);
}

void sub_20EFD111C(_Unwind_Exception *a1)
{
  std::recursive_mutex *v1;

  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_20EFD1130(uint64_t a1)
{
  std::recursive_mutex *v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;

  v2 = *(std::recursive_mutex **)(a1 + 72);
  if (!v2)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/SynchronousProcessor.h", 159, (uint64_t)"sync_", 5, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v2 = *(std::recursive_mutex **)(a1 + 72);
  }
  std::recursive_mutex::lock(v2);
  v3 = operator new(0x18uLL);
  v5 = *(_QWORD *)(a1 + 120);
  v4 = (_QWORD *)(a1 + 120);
  *v3 = v5;
  v3[1] = v4;
  *(_QWORD *)(v5 + 8) = v3;
  *v4 = v3;
  ++v4[2];
  std::recursive_mutex::unlock(v2);
}

void sub_20EFD11C0(_Unwind_Exception *a1)
{
  std::recursive_mutex *v1;

  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_20EFD11D4(uint64_t a1@<X0>, int64x2_t *a2@<X8>)
{
  std::recursive_mutex *v4;

  v4 = *(std::recursive_mutex **)(a1 + 72);
  std::recursive_mutex::lock(v4);
  sub_20EFD19D4(a2, a1 + 96);
  std::recursive_mutex::unlock(v4);
}

void sub_20EFD1218(_Unwind_Exception *a1)
{
  std::recursive_mutex *v1;

  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_20EFD122C(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  std::recursive_mutex *v3;

  v3 = *(std::recursive_mutex **)(a1 + 72);
  std::recursive_mutex::lock(v3);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  std::recursive_mutex::unlock(v3);
}

uint64_t sub_20EFD1260(uint64_t a1)
{
  return sub_20EFD13BC(a1 - 16);
}

void sub_20EFD1268(uint64_t a1)
{
  sub_20EFD13BC(a1 - 16);
  JUMPOUT(0x212BC6398);
}

void sub_20EFD1290(uint64_t a1, uint64_t a2)
{
  sub_20EFD106C(a1 - 16, a2);
}

void sub_20EFD1298(uint64_t a1@<X0>, int64x2_t *a2@<X8>)
{
  std::recursive_mutex *v4;

  v4 = *(std::recursive_mutex **)(a1 + 56);
  std::recursive_mutex::lock(v4);
  sub_20EFD19D4(a2, a1 + 80);
  std::recursive_mutex::unlock(v4);
}

void sub_20EFD12DC(_Unwind_Exception *a1)
{
  std::recursive_mutex *v1;

  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_20EFD12F0(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  std::recursive_mutex *v3;

  v3 = *(std::recursive_mutex **)(a1 + 56);
  std::recursive_mutex::lock(v3);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  std::recursive_mutex::unlock(v3);
}

uint64_t sub_20EFD1324(uint64_t a1)
{
  return a1 - 16;
}

uint64_t sub_20EFD132C(uint64_t a1)
{
  return sub_20EFD13BC(a1 - 24);
}

void sub_20EFD1334(uint64_t a1)
{
  sub_20EFD13BC(a1 - 24);
  JUMPOUT(0x212BC6398);
}

void sub_20EFD135C(uint64_t a1)
{
  sub_20EFD1130(a1 - 24);
}

uint64_t sub_20EFD1364(uint64_t a1)
{
  return a1 - 24;
}

void sub_20EFD1370()
{
  JUMPOUT(0x212BC6398);
}

std::runtime_error *sub_20EFD1384@<X0>(uint64_t a1@<X1>, std::runtime_error *a2@<X8>)
{
  std::runtime_error *result;

  result = std::runtime_error::runtime_error(a2, (const std::runtime_error *)a1);
  result->__vftable = (std::runtime_error_vtbl *)&off_24C9F2020;
  LODWORD(result[1].__vftable) = *(_DWORD *)(a1 + 16);
  return result;
}

uint64_t sub_20EFD13BC(uint64_t a1)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  std::__shared_weak_count *v15;

  *(_QWORD *)a1 = &off_24C9F5180;
  *(_QWORD *)(a1 + 16) = &unk_24C9F51F8;
  *(_QWORD *)(a1 + 24) = &unk_24C9F5238;
  if (*(_QWORD *)(a1 + 136))
  {
    v2 = (uint64_t *)(a1 + 120);
    v4 = *(_QWORD *)(a1 + 120);
    v3 = *(uint64_t **)(a1 + 128);
    v5 = *v3;
    *(_QWORD *)(v5 + 8) = *(_QWORD *)(v4 + 8);
    **(_QWORD **)(v4 + 8) = v5;
    *(_QWORD *)(a1 + 136) = 0;
    if (v3 != (uint64_t *)(a1 + 120))
    {
      do
      {
        v6 = (uint64_t *)v3[1];
        operator delete(v3);
        v3 = v6;
      }
      while (v6 != v2);
    }
  }
  if (*(_QWORD *)(a1 + 112))
  {
    v7 = *(_QWORD *)(a1 + 96);
    v8 = *(uint64_t **)(a1 + 104);
    v9 = *v8;
    *(_QWORD *)(v9 + 8) = *(_QWORD *)(v7 + 8);
    **(_QWORD **)(v7 + 8) = v9;
    *(_QWORD *)(a1 + 112) = 0;
    if (v8 != (uint64_t *)(a1 + 96))
    {
      do
      {
        v10 = (uint64_t *)v8[1];
        (*(void (**)(uint64_t *))v8[2])(v8 + 2);
        operator delete(v8);
        v8 = v10;
      }
      while (v10 != (uint64_t *)(a1 + 96));
    }
  }
  v11 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 88) = 0;
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  v12 = *(std::__shared_weak_count **)(a1 + 80);
  if (!v12)
    goto LABEL_13;
  p_shared_owners = (unint64_t *)&v12->__shared_owners_;
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (v14)
  {
LABEL_13:
    if ((*(char *)(a1 + 71) & 0x80000000) == 0)
      goto LABEL_14;
LABEL_18:
    operator delete(*(void **)(a1 + 48));
    v15 = *(std::__shared_weak_count **)(a1 + 40);
    if (!v15)
      return a1;
    goto LABEL_15;
  }
  ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
  std::__shared_weak_count::__release_weak(v12);
  if (*(char *)(a1 + 71) < 0)
    goto LABEL_18;
LABEL_14:
  v15 = *(std::__shared_weak_count **)(a1 + 40);
  if (v15)
LABEL_15:
    std::__shared_weak_count::__release_weak(v15);
  return a1;
}

void sub_20EFD1518(uint64_t *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  unsigned __int8 v7;
  BOOL v8;
  uint64_t v9;
  uint64_t i;
  unsigned __int8 v11;
  _QWORD *v12;
  _QWORD *j;
  uint64_t v14;
  uint64_t v15;
  std::exception_ptr v16;
  std::runtime_error v17;
  int v18;

  v6 = *a1;
  if (!v6)
  {
    sub_21023D70C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/ProcessorInputMessageHandlingStrategy.h", 228, (uint64_t)"callable_", 9, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0);
    v7 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
    if ((v7 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
    {
      __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
      __cxa_guard_release(&qword_254A6DE78);
    }
    if (byte_254A6DE68)
      v8 = byte_254A6DE70 == 0;
    else
      v8 = 0;
    if (!v8)
    {
      v9 = qword_254A6DE40;
      for (i = qword_254A6DE48; v9 != i; v9 += 16)
        (*(void (**)(_QWORD, const char *, uint64_t, const char *, _QWORD))v9)(*(_QWORD *)(v9 + 8), "callable_", 9, "", 0);
    }
    v11 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
    if ((v11 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
    {
      __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
      __cxa_guard_release(&qword_254A6DE78);
    }
    if (!byte_254A6DE68)
      abort();
    qword_254A6DE58(unk_254A6DE60, "callable_", 9, "", 0);
    v6 = *a1;
  }
  (*(void (**)(std::runtime_error *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v6 + 16))(&v17, v6, a2);
  v12 = a1 + 1;
  for (j = (_QWORD *)a1[2]; j != v12; j = (_QWORD *)j[1])
    (*(void (**)(_QWORD *, std::runtime_error *))(j[2] + 16))(j + 2, &v17);
  if (*((_BYTE *)a3 + 8))
  {
    v14 = *a3;
    if (!v14)
      sub_20E96CE78(3u);
    std::mutex::lock((std::mutex *)(v14 + 24));
    if ((*(_BYTE *)(v14 + 136) & 1) != 0
      || (v16.__ptr_ = 0, v15 = *(_QWORD *)(v14 + 16), std::exception_ptr::~exception_ptr(&v16), v15))
    {
      sub_20E96CE78(2u);
    }
    std::runtime_error::runtime_error((std::runtime_error *)(v14 + 144), &v17);
    *(_QWORD *)(v14 + 144) = &off_24C9F2020;
    *(_DWORD *)(v14 + 160) = v18;
    *(_DWORD *)(v14 + 136) |= 5u;
    std::condition_variable::notify_all((std::condition_variable *)(v14 + 88));
    std::mutex::unlock((std::mutex *)(v14 + 24));
  }
  std::runtime_error::~runtime_error(&v17);
}

void sub_20EFD17A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t *a11, uint64_t a12, int a13, __int16 a14, char a15, unsigned __int8 a16, std::runtime_error a17)
{
  std::mutex *v17;
  uint64_t *v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;

  std::mutex::unlock(v17);
  std::runtime_error::~runtime_error(&a17);
  if (a2 == 1)
  {
    v20 = (uint64_t *)__cxa_begin_catch(a1);
    v21 = *v20;
    a10 = *(_QWORD *)(*(_QWORD *)(*v20 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL;
    a9 = (*(uint64_t (**)(void))(v21 + 16))();
    sub_20E9B0CC4("Caught unexpected exception of type: ", (const char *)&a10, "\n", "message: ", (const char *)&a9, "\n");
    if ((a16 & 0x80u) == 0)
      v22 = (uint64_t *)&a11;
    else
      v22 = a11;
    if ((a16 & 0x80u) == 0)
      v23 = a16;
    else
      v23 = a12;
    sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/ProcessorInputMessageHandlingStrategy.h", 140, (uint64_t)"", 0, (uint64_t)v22, v23, (void (*)(void **))sub_21023DDB0);
    abort();
  }
  _Unwind_Resume(a1);
}

void sub_20EFD1880(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  __cxa_end_catch();
  JUMPOUT(0x20EFD18A0);
}

uint64_t *sub_20EFD18AC(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  const std::error_category *v7;
  std::logic_error *exception;
  std::logic_error *v9;
  std::logic_error v10;
  std::logic_error v11;
  std::exception_ptr v12;

  v2 = *a1;
  if (!v2)
    return a1;
  if ((*(_BYTE *)(v2 + 136) & 1) == 0)
  {
    v12.__ptr_ = 0;
    v3 = *(_QWORD *)(v2 + 16);
    std::exception_ptr::~exception_ptr(&v12);
    v2 = *a1;
    if (!v3 && *(uint64_t *)(v2 + 8) >= 1)
    {
      v7 = std::future_category();
      MEMORY[0x212BC5AF8](&v10, 4, v7);
      exception = (std::logic_error *)__cxa_allocate_exception(0x20uLL);
      v9 = std::logic_error::logic_error(exception, &v10);
      v9->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB810] + 16);
      v9[1] = v11;
      __cxa_throw(v9, MEMORY[0x24BEDB6E0], (void (*)(void *))MEMORY[0x24BEDAD80]);
    }
  }
  v4 = (unint64_t *)(v2 + 8);
  do
    v5 = __ldaxr(v4);
  while (__stlxr(v5 - 1, v4));
  if (v5)
    return a1;
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 16))(v2);
  return a1;
}

void sub_20EFD1998(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__assoc_sub_state *a10, std::logic_error a11)
{
  uint64_t v11;
  std::exception_ptr v12;

  __cxa_begin_catch(a1);
  std::current_exception();
  __cxa_end_catch();
  v12.__ptr_ = (void *)(v11 - 32);
  std::__assoc_sub_state::set_exception(a10, v12);
  std::exception_ptr::~exception_ptr((std::exception_ptr *)(v11 - 32));
  std::logic_error::~logic_error(&a11);
  JUMPOUT(0x20EFD18F4);
}

char *sub_20EFD19D4(int64x2_t *a1, uint64_t a2)
{
  unint64_t v4;
  char *result;
  char *v6;
  uint64_t v7;
  int64x2_t v8;
  int64x2_t v9;
  char *v10;
  uint64_t v11;
  int64x2_t *v12;

  v4 = *(_QWORD *)(a2 + 16);
  v10 = 0;
  v9 = 0uLL;
  if (v4)
  {
    if (v4 >> 61)
      sub_20E92CED8();
    result = (char *)operator new(8 * v4);
    v6 = &result[8 * v4];
    v9.i64[0] = (uint64_t)result;
    v9.i64[1] = (uint64_t)result;
    v10 = v6;
    v7 = *(_QWORD *)(a2 + 8);
    v12 = &v9;
    if (v7 != a2)
      goto LABEL_4;
LABEL_7:
    v8 = vdupq_n_s64((unint64_t)result);
    goto LABEL_8;
  }
  v6 = 0;
  result = 0;
  v7 = *(_QWORD *)(a2 + 8);
  v12 = &v9;
  if (v7 == a2)
    goto LABEL_7;
  do
  {
LABEL_4:
    v11 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v7 + 24) + 48))(*(_QWORD *)(v7 + 24));
    result = (char *)sub_20E9B2D04((uint64_t *)&v12, &v11);
    v7 = *(_QWORD *)(v7 + 8);
  }
  while (v7 != a2);
  v8 = v9;
  v6 = v10;
LABEL_8:
  *a1 = v8;
  a1[1].i64[0] = (uint64_t)v6;
  return result;
}

void sub_20EFD1AB0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20EFD1AD4(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20EFD1AF8(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t sub_20EFD1B10(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail20SynchronousProcessorINS1_3vio10mapping_io23Mapp"
                     "ingIONodeGroupErrorES8_vS8_Lb0EEEE27__shared_ptr_default_deleteIS9_S9_EE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail20SynchronousProcessorINS1_3vio10mappi"
                                "ng_io23MappingIONodeGroupErrorES8_vS8_Lb0EEEE27__shared_ptr_default_deleteIS9_S9_EE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail20SynchronousProcessorINS1_3vio10mapping_io23MappingIONodeGroupErrorES8_vS8_Lb0EEEE27__shared_ptr_default_deleteIS9_S9_EE"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail20SynchronousProcessorINS1_3vio10mapping_io23MappingIONodeGroupErrorES8_vS8_Lb0EEEE27__shared_ptr_default_deleteIS9_S9_EE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

uint64_t sub_20EFD1B80(uint64_t a1)
{
  _QWORD *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_weak_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;

  *(_QWORD *)a1 = &off_24C9F5118;
  v2 = (_QWORD *)(a1 + 72);
  if (*(_QWORD *)(a1 + 72))
  {
    v3 = *(std::__shared_weak_count **)(a1 + 80);
    if (v3)
    {
      p_shared_weak_owners = (unint64_t *)&v3->__shared_weak_owners_;
      do
        v5 = __ldxr(p_shared_weak_owners);
      while (__stxr(v5 + 1, p_shared_weak_owners));
      v6 = *(std::__shared_weak_count **)(a1 + 80);
      *v2 = 0;
      *(_QWORD *)(a1 + 80) = 0;
      if (v6)
      {
        p_shared_owners = (unint64_t *)&v6->__shared_owners_;
        do
          v8 = __ldaxr(p_shared_owners);
        while (__stlxr(v8 - 1, p_shared_owners));
        if (!v8)
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
      }
      while (v3->__shared_owners_ != -1)
        sched_yield();
    }
    else
    {
      *v2 = 0;
      *(_QWORD *)(a1 + 80) = 0;
    }
    v9 = *(uint64_t **)(a1 + 56);
    if (v9)
      sub_210217048(*v9);
    if (v3)
      std::__shared_weak_count::__release_weak(v3);
  }
  *(_QWORD *)(a1 + 144) = &off_24C9B2310;
  v10 = *(std::__shared_weak_count **)(a1 + 160);
  if (v10)
    std::__shared_weak_count::__release_weak(v10);
  *(_QWORD *)(a1 + 120) = &off_24C9F5148;
  v11 = *(std::__shared_weak_count **)(a1 + 136);
  if (v11)
    std::__shared_weak_count::__release_weak(v11);
  v12 = *(std::__shared_weak_count **)(a1 + 112);
  if (v12)
    std::__shared_weak_count::__release_weak(v12);
  v13 = *(_QWORD *)(a1 + 96);
  *(_QWORD *)(a1 + 88) = &off_24C9B46A0;
  *(_QWORD *)(a1 + 96) = 0;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v14 = *(std::__shared_weak_count **)(a1 + 80);
  if (v14)
  {
    v15 = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  v17 = *(std::__shared_weak_count **)(a1 + 64);
  if (!v17)
    goto LABEL_34;
  v18 = (unint64_t *)&v17->__shared_owners_;
  do
    v19 = __ldaxr(v18);
  while (__stlxr(v19 - 1, v18));
  if (v19)
  {
LABEL_34:
    if ((*(char *)(a1 + 55) & 0x80000000) == 0)
      goto LABEL_35;
LABEL_38:
    operator delete(*(void **)(a1 + 32));
    if ((*(char *)(a1 + 31) & 0x80000000) == 0)
      return a1;
    goto LABEL_39;
  }
  ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
  std::__shared_weak_count::__release_weak(v17);
  if (*(char *)(a1 + 55) < 0)
    goto LABEL_38;
LABEL_35:
  if ((*(char *)(a1 + 31) & 0x80000000) == 0)
    return a1;
LABEL_39:
  operator delete(*(void **)(a1 + 8));
  return a1;
}

void sub_20EFD1D64(uint64_t *a1, uint64_t a2)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  void *v7;
  char v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  _QWORD *v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  std::__shared_weak_count *v15;
  unint64_t v16;
  unint64_t *p_shared_weak_owners;
  unint64_t v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t *v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t *v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t *v44;
  unint64_t v45;
  _QWORD *v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  __int128 v50;
  uint64_t v51;
  __int128 v52;
  uint64_t v53;
  _QWORD *v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  std::__shared_weak_count *v57;
  unint64_t v58;
  unint64_t *v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t *v62;
  unint64_t v63;
  unint64_t v64;
  std::__shared_weak_count *v65;
  unint64_t *v66;
  unint64_t v67;
  std::__shared_weak_count *v68;
  unint64_t *v69;
  unint64_t v70;
  std::__shared_weak_count *v71;
  unint64_t *v72;
  unint64_t v73;
  std::__shared_weak_count *v74;
  unint64_t *v75;
  unint64_t v76;
  std::__shared_weak_count *v77;
  unint64_t *v78;
  unint64_t v79;
  _QWORD *v80;
  std::__shared_weak_count *v81;
  unint64_t *v82;
  unint64_t v83;
  void *v84;
  char v85;
  char *v86;
  __int128 v87;
  uint64_t v88;
  _QWORD *v89;
  std::__shared_weak_count *v90;
  unint64_t *v91;
  std::__shared_weak_count *v92;
  unint64_t v93;
  unint64_t *v94;
  unint64_t v95;
  unint64_t v96;
  unint64_t *v97;
  unint64_t v98;
  unint64_t v99;
  std::__shared_weak_count *v100;
  unint64_t *v101;
  unint64_t v102;
  std::__shared_weak_count *v103;
  unint64_t *v104;
  unint64_t v105;
  char *v106;
  void *v107;
  unint64_t *v108;
  unint64_t v109;
  _QWORD *v110;
  uint64_t v111;
  uint64_t v112;
  unint64_t *v113;
  unint64_t v114;
  uint64_t v115;
  unint64_t v116;
  unint64_t *v117;
  unint64_t v118;
  uint64_t v119;
  unint64_t *v120;
  unint64_t v121;
  uint64_t v122;
  std::__shared_weak_count *v123;
  unint64_t *v124;
  unint64_t v125;
  _QWORD *v126;
  std::__shared_weak_count *v127;
  unint64_t *v128;
  unint64_t v129;
  void *v130;
  char v131;
  uint64_t v132;
  __int128 v133;
  uint64_t v134;
  _QWORD *v135;
  std::__shared_weak_count *v136;
  unint64_t *v137;
  std::__shared_weak_count *v138;
  unint64_t v139;
  unint64_t *v140;
  unint64_t v141;
  unint64_t v142;
  unint64_t *v143;
  unint64_t v144;
  unint64_t v145;
  std::__shared_weak_count *v146;
  unint64_t *v147;
  unint64_t v148;
  std::__shared_weak_count *v149;
  unint64_t *v150;
  unint64_t v151;
  __int128 v152;
  unint64_t *v153;
  unint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  unint64_t *v158;
  unint64_t v159;
  uint64_t v160;
  unint64_t v161;
  unint64_t *v162;
  unint64_t v163;
  uint64_t v164;
  unint64_t *v165;
  unint64_t v166;
  uint64_t v167;
  std::__shared_weak_count *v168;
  unint64_t *v169;
  unint64_t v170;
  _QWORD *v171;
  std::__shared_weak_count *v172;
  unint64_t *v173;
  unint64_t v174;
  void *v175;
  char v176;
  uint64_t v177;
  __int128 v178;
  uint64_t v179;
  _QWORD *v180;
  std::__shared_weak_count *v181;
  unint64_t *v182;
  std::__shared_weak_count *v183;
  unint64_t v184;
  unint64_t *v185;
  unint64_t v186;
  unint64_t v187;
  unint64_t *v188;
  unint64_t v189;
  unint64_t v190;
  std::__shared_weak_count *v191;
  unint64_t *v192;
  unint64_t v193;
  std::__shared_weak_count *v194;
  unint64_t *v195;
  unint64_t v196;
  __int128 v197;
  unint64_t *v198;
  unint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  unint64_t *v203;
  unint64_t v204;
  uint64_t v205;
  unint64_t v206;
  unint64_t *v207;
  unint64_t v208;
  uint64_t v209;
  unint64_t *v210;
  unint64_t v211;
  uint64_t v212;
  std::__shared_weak_count *v213;
  unint64_t *v214;
  unint64_t v215;
  _QWORD *v216;
  std::__shared_weak_count *v217;
  unint64_t *v218;
  unint64_t v219;
  void *v220;
  char v221;
  uint64_t v222;
  __int128 v223;
  uint64_t v224;
  _QWORD *v225;
  std::__shared_weak_count *v226;
  unint64_t *v227;
  std::__shared_weak_count *v228;
  unint64_t v229;
  unint64_t *v230;
  unint64_t v231;
  unint64_t v232;
  unint64_t *v233;
  unint64_t v234;
  unint64_t v235;
  std::__shared_weak_count *v236;
  unint64_t *v237;
  unint64_t v238;
  std::__shared_weak_count *v239;
  unint64_t *v240;
  unint64_t v241;
  __int128 v242;
  unint64_t *v243;
  unint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  unint64_t *v248;
  unint64_t v249;
  uint64_t v250;
  unint64_t v251;
  unint64_t *v252;
  unint64_t v253;
  uint64_t v254;
  unint64_t *v255;
  unint64_t v256;
  uint64_t v257;
  std::__shared_weak_count *v258;
  unint64_t *v259;
  unint64_t v260;
  _QWORD *v261;
  std::__shared_weak_count *v262;
  unint64_t *v263;
  unint64_t v264;
  void *v265;
  char v266;
  uint64_t v267;
  __int128 v268;
  uint64_t v269;
  _QWORD *v270;
  std::__shared_weak_count *v271;
  unint64_t *v272;
  std::__shared_weak_count *v273;
  unint64_t v274;
  unint64_t *v275;
  unint64_t v276;
  unint64_t v277;
  unint64_t *v278;
  unint64_t v279;
  unint64_t v280;
  std::__shared_weak_count *v281;
  unint64_t *v282;
  unint64_t v283;
  std::__shared_weak_count *v284;
  unint64_t *v285;
  unint64_t v286;
  __int128 v287;
  unint64_t *v288;
  unint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  unint64_t *v293;
  unint64_t v294;
  uint64_t v295;
  unint64_t v296;
  unint64_t *v297;
  unint64_t v298;
  uint64_t v299;
  unint64_t *v300;
  unint64_t v301;
  uint64_t v302;
  std::__shared_weak_count *v303;
  unint64_t *v304;
  unint64_t v305;
  uint64_t v306;
  __int128 v307;
  __int128 v308;
  __int128 v309;
  __int128 v310;
  __int128 v311;
  uint64_t v312;
  __int128 v313;
  __int128 v314;
  uint64_t v315;
  __int128 v316;
  __int128 v317;
  __int128 v318;
  __int128 v319;
  __int128 v320;
  __int128 v321;
  __int128 v322;
  __int128 v323;
  uint64_t v324;
  __int128 v325;
  __int128 v326;
  __int128 v327;
  __int128 v328;
  __int128 v329;
  __int128 v330;
  __int128 v331;
  __int128 v332;
  __int128 v333;
  __int128 v334;
  __int128 v335;
  __int128 v336;
  __int128 v337;
  __int128 v338;
  __int128 v339;
  __int128 v340;
  std::__shared_weak_count *v341;
  unint64_t *v342;
  unint64_t v343;
  std::__shared_weak_count *v344;
  unint64_t *v345;
  unint64_t v346;
  std::__shared_weak_count *v347;
  unint64_t *v348;
  unint64_t v349;
  std::__shared_weak_count *v350;
  unint64_t *v351;
  unint64_t v352;
  std::__shared_weak_count *v353;
  unint64_t *v354;
  unint64_t v355;
  std::__shared_weak_count *v356;
  unint64_t *v357;
  unint64_t v358;
  std::__shared_weak_count *v359;
  unint64_t *v360;
  unint64_t v361;
  uint64_t *v362;
  void *v363[5];
  std::__shared_weak_count *v364;
  void *v365[5];
  std::__shared_weak_count *v366;
  void *v367[5];
  std::__shared_weak_count *v368;
  void *v369[3];
  void *__p[7];
  __int128 v371;
  __int128 v372;
  uint64_t (**v373)();
  __int128 v374;
  uint64_t v375;
  uint64_t (**v376)();
  __int128 v377;
  uint64_t (**v378)();
  __int128 v379;
  uint64_t v380;
  std::__shared_weak_count *v381;
  void *v382[4];
  _QWORD v383[7];
  __int128 v384;
  __int128 v385;
  uint64_t (**v386)();
  __int128 v387;
  uint64_t v388;
  uint64_t (**v389)();
  __int128 v390;
  uint64_t (**v391)();
  __int128 v392;
  uint64_t v393;
  std::__shared_weak_count *v394;
  void *v395[2];
  uint64_t v396;
  _BYTE v397[24];
  uint64_t v398;
  __int128 v399;
  uint64_t v400;
  __int128 v401;
  __int128 v402;
  __int128 v403;
  uint64_t v404;
  __int128 v405;
  __int128 v406;
  uint64_t v407;
  std::__shared_weak_count *v408;
  void *__dst[3];
  _QWORD v410[7];
  __int128 v411;
  __int128 v412;
  uint64_t (**v413)();
  __int128 v414;
  uint64_t v415;
  uint64_t (**v416)();
  __int128 v417;
  uint64_t (**v418)();
  __int128 v419;
  _QWORD *v420;
  std::__shared_weak_count *v421;
  _QWORD v422[2];
  _QWORD v423[7];
  __int128 v424;
  __int128 v425;
  uint64_t (**v426)();
  __int128 v427;
  uint64_t v428;
  uint64_t (**v429)();
  __int128 v430;
  uint64_t (**v431)();
  __int128 v432;
  _QWORD v433[2];
  _QWORD v434[7];
  __int128 v435;
  __int128 v436;
  uint64_t (**v437)();
  __int128 v438;
  uint64_t v439;
  uint64_t (**v440)();
  __int128 v441;
  uint64_t (**v442)();
  __int128 v443;
  _QWORD v444[2];
  _QWORD v445[7];
  __int128 v446;
  __int128 v447;
  uint64_t (**v448)();
  __int128 v449;
  uint64_t v450;
  uint64_t (**v451)();
  __int128 v452;
  uint64_t (**v453)();
  __int128 v454;
  _QWORD v455[2];
  _QWORD v456[2];
  _QWORD v457[2];
  __int128 v458;
  _QWORD v459[2];
  _QWORD v460[2];
  __int128 v461;
  _QWORD v462[2];
  __int128 v463;
  _QWORD v464[5];

  v464[2] = *MEMORY[0x24BDAC8D0];
  v4 = (std::__shared_weak_count *)operator new(0x58uLL);
  v4->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  v4->__shared_weak_owners_ = 0;
  v4->__vftable = (std::__shared_weak_count_vtbl *)&unk_24C9B6A90;
  MEMORY[0x212BC5E10](&v4[1]);
  v420 = &v4[1].__vftable;
  v421 = v4;
  if (*(char *)(a2 + 23) < 0)
  {
    sub_20E860C04(__dst, *(void **)a2, *(_QWORD *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)__dst = *(_OWORD *)a2;
    __dst[2] = *(void **)(a2 + 16);
  }
  v362 = a1;
  do
    v6 = __ldxr(p_shared_owners);
  while (__stxr(v6 + 1, p_shared_owners));
  v7 = __dst[0];
  v423[0] = __dst[1];
  *(void **)((char *)v423 + 7) = *(void **)((char *)&__dst[1] + 7);
  v8 = HIBYTE(__dst[2]);
  memset(__dst, 0, sizeof(__dst));
  v408 = 0;
  v407 = 0;
  *(_QWORD *)((char *)v434 + 7) = 0;
  v434[0] = 0;
  v383[0] = v4 + 1;
  v383[1] = v4;
  __p[0] = 0;
  __p[1] = 0;
  v9 = operator new();
  v445[0] = v434[0];
  *(_QWORD *)((char *)v445 + 7) = *(_QWORD *)((char *)v434 + 7);
  v434[0] = 0;
  *(_QWORD *)((char *)v434 + 7) = 0;
  v10 = *(_OWORD *)v383;
  v383[0] = 0;
  v383[1] = 0;
  *(_BYTE *)(v9 + 8) = 1;
  *(_QWORD *)(v9 + 32) = 0;
  *(_QWORD *)(v9 + 40) = 0;
  *(_QWORD *)v9 = &off_24C9F55B8;
  *(_QWORD *)(v9 + 16) = &unk_24C9F5630;
  *(_QWORD *)(v9 + 24) = &unk_24C9F5670;
  v11 = v445[0];
  *(_QWORD *)(v9 + 63) = *(_QWORD *)((char *)v445 + 7);
  *(_QWORD *)(v9 + 48) = 0;
  *(_QWORD *)(v9 + 56) = v11;
  *(_BYTE *)(v9 + 71) = 0;
  v445[0] = 0;
  *(_QWORD *)((char *)v445 + 7) = 0;
  *(_OWORD *)(v9 + 72) = v10;
  *(_QWORD *)&v397[8] = 0;
  *(_QWORD *)v397 = 0;
  v12 = (_QWORD *)operator new();
  *v12 = &off_24C9F5758;
  *(_QWORD *)(v9 + 88) = v12;
  *(_QWORD *)(v9 + 96) = v9 + 96;
  *(_QWORD *)(v9 + 104) = v9 + 96;
  *(_QWORD *)(v9 + 112) = 0;
  *(_QWORD *)(v9 + 120) = v9 + 120;
  *(_QWORD *)(v9 + 128) = v9 + 120;
  *(_QWORD *)(v9 + 136) = 0;
  v13 = (std::__shared_weak_count *)operator new();
  v13->__shared_owners_ = 0;
  v14 = (unint64_t *)&v13->__shared_owners_;
  v13->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9F57A8;
  v13->__shared_weak_owners_ = 0;
  v13[1].__vftable = (std::__shared_weak_count_vtbl *)v9;
  v15 = *(std::__shared_weak_count **)(v9 + 40);
  if (v15)
  {
    if (v15->__shared_owners_ != -1)
      goto LABEL_19;
    do
      v16 = __ldxr(v14);
    while (__stxr(v16 + 1, v14));
    p_shared_weak_owners = (unint64_t *)&v13->__shared_weak_owners_;
    do
      v18 = __ldxr(p_shared_weak_owners);
    while (__stxr(v18 + 1, p_shared_weak_owners));
    *(_QWORD *)(v9 + 32) = v9;
    *(_QWORD *)(v9 + 40) = v13;
    std::__shared_weak_count::__release_weak(v15);
  }
  else
  {
    do
      v19 = __ldxr(v14);
    while (__stxr(v19 + 1, v14));
    v20 = (unint64_t *)&v13->__shared_weak_owners_;
    do
      v21 = __ldxr(v20);
    while (__stxr(v21 + 1, v20));
    *(_QWORD *)(v9 + 32) = v9;
    *(_QWORD *)(v9 + 40) = v13;
  }
  do
    v22 = __ldaxr(v14);
  while (__stlxr(v22 - 1, v14));
  if (!v22)
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
  }
LABEL_19:
  if (*(_QWORD *)&v397[8])
  {
    v23 = (unint64_t *)(*(_QWORD *)&v397[8] + 8);
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      (*(void (**)(_QWORD))(**(_QWORD **)&v397[8] + 16))(*(_QWORD *)&v397[8]);
      std::__shared_weak_count::__release_weak(*(std::__shared_weak_count **)&v397[8]);
    }
  }
  *(_QWORD *)v397 = v9;
  *(_QWORD *)&v397[8] = v13;
  if (v383[1])
  {
    v25 = (unint64_t *)(v383[1] + 8);
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      (*(void (**)(_QWORD))(*(_QWORD *)v383[1] + 16))(v383[1]);
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v383[1]);
    }
  }
  v410[0] = &off_24C9F53F0;
  v410[1] = v7;
  v410[2] = v423[0];
  *(_QWORD *)((char *)&v410[2] + 7) = *(_QWORD *)((char *)v423 + 7);
  HIBYTE(v410[3]) = v8;
  v423[0] = 0;
  *(_QWORD *)((char *)v423 + 7) = 0;
  v410[4] = 0x7974706D45;
  v410[5] = v445[0];
  *(_QWORD *)((char *)&v410[5] + 7) = *(_QWORD *)((char *)v445 + 7);
  HIBYTE(v410[6]) = 5;
  v445[0] = 0;
  *(_QWORD *)((char *)v445 + 7) = 0;
  v411 = 0uLL;
  v383[0] = 0;
  v383[1] = 0;
  v27 = *(_QWORD *)v397;
  v28 = *(_QWORD *)&v397[8];
  v412 = *(_OWORD *)v397;
  *(_QWORD *)v397 = 0;
  *(_QWORD *)&v397[8] = 0;
  if (*((_QWORD *)&v412 + 1))
  {
    v29 = (unint64_t *)(v28 + 16);
    do
      v30 = __ldxr(v29);
    while (__stxr(v30 + 1, v29));
  }
  v413 = &off_24C9F2B80;
  v31 = (_QWORD *)operator new();
  *v31 = &off_24C9F3500;
  v31[1] = v27;
  v31[2] = v28;
  *(_QWORD *)&v414 = v31;
  v33 = *((_QWORD *)&v412 + 1);
  v32 = v412;
  if (!*((_QWORD *)&v412 + 1))
  {
    *((_QWORD *)&v414 + 1) = v412;
    v415 = 0;
    if ((_QWORD)v412)
      v37 = v412 + 16;
    else
      v37 = 0;
    goto LABEL_49;
  }
  v34 = (unint64_t *)(*((_QWORD *)&v412 + 1) + 16);
  do
    v35 = __ldxr(v34);
  while (__stxr(v35 + 1, v34));
  v36 = *((_QWORD *)&v412 + 1);
  *((_QWORD *)&v414 + 1) = v32;
  v415 = v33;
  if ((_QWORD)v412)
    v37 = v412 + 16;
  else
    v37 = 0;
  if (!*((_QWORD *)&v412 + 1))
  {
    v32 = v412;
LABEL_49:
    v40 = 0;
    v416 = &off_24C9F5420;
    v417 = v37;
    goto LABEL_50;
  }
  v38 = (unint64_t *)(*((_QWORD *)&v412 + 1) + 16);
  do
    v39 = __ldxr(v38);
  while (__stxr(v39 + 1, v38));
  v40 = *((_QWORD *)&v412 + 1);
  v32 = v412;
  v416 = &off_24C9F5420;
  *(_QWORD *)&v417 = v37;
  *((_QWORD *)&v417 + 1) = v36;
  if (*((_QWORD *)&v412 + 1))
  {
    v41 = (unint64_t *)(*((_QWORD *)&v412 + 1) + 16);
    do
      v42 = __ldxr(v41);
    while (__stxr(v42 + 1, v41));
  }
LABEL_50:
  if (v32)
    v43 = v32 + 24;
  else
    v43 = 0;
  v418 = &off_24C9B2310;
  *(_QWORD *)&v419 = v43;
  *((_QWORD *)&v419 + 1) = v40;
  if (!__p[1])
    goto LABEL_57;
  v44 = (unint64_t *)((char *)__p[1] + 8);
  do
    v45 = __ldaxr(v44);
  while (__stlxr(v45 - 1, v44));
  if (!v45)
  {
    (*(void (**)(void *))(*(_QWORD *)__p[1] + 16))(__p[1]);
    std::__shared_weak_count::__release_weak((std::__shared_weak_count *)__p[1]);
    if ((*(char *)(a2 + 23) & 0x80000000) == 0)
      goto LABEL_58;
  }
  else
  {
LABEL_57:
    if ((*(char *)(a2 + 23) & 0x80000000) == 0)
    {
LABEL_58:
      *(_OWORD *)v395 = *(_OWORD *)a2;
      v396 = *(_QWORD *)(a2 + 16);
      goto LABEL_61;
    }
  }
  sub_20E860C04(v395, *(void **)a2, *(_QWORD *)(a2 + 8));
LABEL_61:
  v46 = v420;
  v47 = v421;
  if (v421)
  {
    v48 = (unint64_t *)&v421->__shared_owners_;
    do
      v49 = __ldxr(v48);
    while (__stxr(v49 + 1, v48));
  }
  v50 = *(_OWORD *)v395;
  v395[1] = 0;
  v383[2] = v396;
  __p[0] = (void *)0x7974706D45;
  __p[1] = (void *)v457[0];
  *(void **)((char *)&__p[1] + 7) = *(void **)((char *)v457 + 7);
  HIBYTE(__p[2]) = 5;
  *(_OWORD *)v383 = v50;
  v395[0] = 0;
  v396 = 0;
  v457[0] = 0;
  *(_QWORD *)((char *)v457 + 7) = 0;
  v394 = 0;
  v393 = 0;
  *(_QWORD *)&v461 = 0;
  *(_QWORD *)((char *)&v461 + 7) = 0;
  v434[0] = v46;
  v434[1] = v47;
  *(_OWORD *)v423 = 0uLL;
  v51 = operator new();
  *(_QWORD *)&v463 = v461;
  *(_QWORD *)((char *)&v463 + 7) = *(_QWORD *)((char *)&v461 + 7);
  *(_QWORD *)&v461 = 0;
  *(_QWORD *)((char *)&v461 + 7) = 0;
  v52 = *(_OWORD *)v434;
  *(_OWORD *)v434 = 0uLL;
  *(_BYTE *)(v51 + 8) = 1;
  *(_QWORD *)(v51 + 32) = 0;
  *(_QWORD *)(v51 + 40) = 0;
  *(_QWORD *)v51 = &off_24C9DF310;
  *(_QWORD *)(v51 + 16) = &unk_24C9DF388;
  *(_QWORD *)(v51 + 24) = &unk_24C9DF3C8;
  v53 = v463;
  *(_QWORD *)(v51 + 63) = *(_QWORD *)((char *)&v463 + 7);
  *(_QWORD *)(v51 + 48) = 0;
  *(_QWORD *)(v51 + 56) = v53;
  *(_BYTE *)(v51 + 71) = 0;
  *(_QWORD *)&v463 = 0;
  *(_QWORD *)((char *)&v463 + 7) = 0;
  *(_OWORD *)(v51 + 72) = v52;
  *(_OWORD *)v445 = 0uLL;
  v54 = (_QWORD *)operator new();
  *v54 = &off_24C9F57F8;
  *(_QWORD *)(v51 + 88) = v54;
  *(_QWORD *)(v51 + 96) = v51 + 96;
  *(_QWORD *)(v51 + 104) = v51 + 96;
  *(_QWORD *)(v51 + 112) = 0;
  *(_QWORD *)(v51 + 120) = v51 + 120;
  *(_QWORD *)(v51 + 128) = v51 + 120;
  *(_QWORD *)(v51 + 136) = 0;
  v55 = (std::__shared_weak_count *)operator new();
  v55->__shared_owners_ = 0;
  v56 = (unint64_t *)&v55->__shared_owners_;
  v55->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9DF500;
  v55->__shared_weak_owners_ = 0;
  v55[1].__vftable = (std::__shared_weak_count_vtbl *)v51;
  v57 = *(std::__shared_weak_count **)(v51 + 40);
  if (v57)
  {
    if (v57->__shared_owners_ != -1)
      goto LABEL_77;
    do
      v58 = __ldxr(v56);
    while (__stxr(v58 + 1, v56));
    v59 = (unint64_t *)&v55->__shared_weak_owners_;
    do
      v60 = __ldxr(v59);
    while (__stxr(v60 + 1, v59));
    *(_QWORD *)(v51 + 32) = v51;
    *(_QWORD *)(v51 + 40) = v55;
    std::__shared_weak_count::__release_weak(v57);
  }
  else
  {
    do
      v61 = __ldxr(v56);
    while (__stxr(v61 + 1, v56));
    v62 = (unint64_t *)&v55->__shared_weak_owners_;
    do
      v63 = __ldxr(v62);
    while (__stxr(v63 + 1, v62));
    *(_QWORD *)(v51 + 32) = v51;
    *(_QWORD *)(v51 + 40) = v55;
  }
  do
    v64 = __ldaxr(v56);
  while (__stlxr(v64 - 1, v56));
  if (!v64)
  {
    ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
    std::__shared_weak_count::__release_weak(v55);
  }
LABEL_77:
  v65 = (std::__shared_weak_count *)v445[1];
  if (v445[1])
  {
    v66 = (unint64_t *)(v445[1] + 8);
    do
      v67 = __ldaxr(v66);
    while (__stlxr(v67 - 1, v66));
    if (!v67)
    {
      ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
      std::__shared_weak_count::__release_weak(v65);
    }
  }
  v445[0] = v51;
  v445[1] = v55;
  v68 = (std::__shared_weak_count *)v434[1];
  if (v434[1])
  {
    v69 = (unint64_t *)(v434[1] + 8);
    do
      v70 = __ldaxr(v69);
    while (__stlxr(v70 - 1, v69));
    if (!v70)
    {
      ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
      std::__shared_weak_count::__release_weak(v68);
    }
  }
  *(_OWORD *)v434 = 0uLL;
  sub_20ED1CD6C((uint64_t)v397, (__int128 *)v383, (__int128 *)__p, (uint64_t)v445, (uint64_t)v434);
  v71 = (std::__shared_weak_count *)v434[1];
  if (v434[1])
  {
    v72 = (unint64_t *)(v434[1] + 8);
    do
      v73 = __ldaxr(v72);
    while (__stlxr(v73 - 1, v72));
    if (!v73)
    {
      ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
      std::__shared_weak_count::__release_weak(v71);
    }
  }
  v74 = (std::__shared_weak_count *)v445[1];
  if (v445[1])
  {
    v75 = (unint64_t *)(v445[1] + 8);
    do
      v76 = __ldaxr(v75);
    while (__stlxr(v76 - 1, v75));
    if (!v76)
    {
      ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
      std::__shared_weak_count::__release_weak(v74);
    }
  }
  v77 = (std::__shared_weak_count *)v423[1];
  if (!v423[1])
    goto LABEL_101;
  v78 = (unint64_t *)(v423[1] + 8);
  do
    v79 = __ldaxr(v78);
  while (__stlxr(v79 - 1, v78));
  if (!v79)
  {
    ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
    std::__shared_weak_count::__release_weak(v77);
    if ((SHIBYTE(__p[2]) & 0x80000000) == 0)
    {
LABEL_102:
      if ((SHIBYTE(v383[2]) & 0x80000000) == 0)
        goto LABEL_103;
LABEL_107:
      operator delete((void *)v383[0]);
      if ((*(char *)(a2 + 23) & 0x80000000) == 0)
        goto LABEL_104;
      goto LABEL_108;
    }
  }
  else
  {
LABEL_101:
    if ((SHIBYTE(__p[2]) & 0x80000000) == 0)
      goto LABEL_102;
  }
  operator delete(__p[0]);
  if (SHIBYTE(v383[2]) < 0)
    goto LABEL_107;
LABEL_103:
  if ((*(char *)(a2 + 23) & 0x80000000) == 0)
  {
LABEL_104:
    *(_OWORD *)v382 = *(_OWORD *)a2;
    v382[2] = *(void **)(a2 + 16);
    goto LABEL_109;
  }
LABEL_108:
  sub_20E860C04(v382, *(void **)a2, *(_QWORD *)(a2 + 8));
LABEL_109:
  v80 = v420;
  v81 = v421;
  if (v421)
  {
    v82 = (unint64_t *)&v421->__shared_owners_;
    do
      v83 = __ldxr(v82);
    while (__stxr(v83 + 1, v82));
  }
  v84 = v382[0];
  *(void **)&v461 = v382[1];
  *(void **)((char *)&v461 + 7) = *(void **)((char *)&v382[1] + 7);
  v85 = HIBYTE(v382[2]);
  v381 = 0;
  memset(v382, 0, 24);
  *(_QWORD *)&v458 = v456[0];
  *(_QWORD *)((char *)&v458 + 7) = *(_QWORD *)((char *)v456 + 7);
  v456[0] = 0;
  *(_QWORD *)((char *)v456 + 7) = 0;
  v380 = 0;
  *(_QWORD *)&v463 = 0;
  *(_QWORD *)((char *)&v463 + 7) = 0;
  v445[0] = v80;
  v445[1] = v81;
  *(_OWORD *)v434 = 0uLL;
  v86 = (char *)operator new();
  v423[0] = v463;
  *(_QWORD *)((char *)v423 + 7) = *(_QWORD *)((char *)&v463 + 7);
  *(_QWORD *)&v463 = 0;
  *(_QWORD *)((char *)&v463 + 7) = 0;
  v87 = *(_OWORD *)v445;
  *(_OWORD *)v445 = 0uLL;
  v86[8] = 1;
  *((_QWORD *)v86 + 4) = 0;
  *((_QWORD *)v86 + 5) = 0;
  *(_QWORD *)v86 = &off_24C9F5838;
  *((_QWORD *)v86 + 2) = &unk_24C9F58B0;
  *((_QWORD *)v86 + 3) = &unk_24C9F58F0;
  v88 = v423[0];
  *(_QWORD *)(v86 + 63) = *(_QWORD *)((char *)v423 + 7);
  *((_QWORD *)v86 + 6) = 0;
  *((_QWORD *)v86 + 7) = v88;
  v86[71] = 0;
  v423[0] = 0;
  *(_QWORD *)((char *)v423 + 7) = 0;
  *(_OWORD *)(v86 + 72) = v87;
  __p[0] = 0;
  __p[1] = 0;
  v89 = (_QWORD *)operator new();
  *v89 = &off_24C9F59C8;
  *((_QWORD *)v86 + 11) = v89;
  *((_QWORD *)v86 + 12) = v86 + 96;
  *((_QWORD *)v86 + 13) = v86 + 96;
  *((_QWORD *)v86 + 14) = 0;
  *((_QWORD *)v86 + 15) = v86 + 120;
  *((_QWORD *)v86 + 16) = v86 + 120;
  *((_QWORD *)v86 + 17) = 0;
  v90 = (std::__shared_weak_count *)operator new();
  v90->__shared_owners_ = 0;
  v91 = (unint64_t *)&v90->__shared_owners_;
  v90->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9F5A18;
  v90->__shared_weak_owners_ = 0;
  v90[1].__vftable = (std::__shared_weak_count_vtbl *)v86;
  v92 = (std::__shared_weak_count *)*((_QWORD *)v86 + 5);
  if (v92)
  {
    if (v92->__shared_owners_ != -1)
      goto LABEL_125;
    do
      v93 = __ldxr(v91);
    while (__stxr(v93 + 1, v91));
    v94 = (unint64_t *)&v90->__shared_weak_owners_;
    do
      v95 = __ldxr(v94);
    while (__stxr(v95 + 1, v94));
    *((_QWORD *)v86 + 4) = v86;
    *((_QWORD *)v86 + 5) = v90;
    std::__shared_weak_count::__release_weak(v92);
  }
  else
  {
    do
      v96 = __ldxr(v91);
    while (__stxr(v96 + 1, v91));
    v97 = (unint64_t *)&v90->__shared_weak_owners_;
    do
      v98 = __ldxr(v97);
    while (__stxr(v98 + 1, v97));
    *((_QWORD *)v86 + 4) = v86;
    *((_QWORD *)v86 + 5) = v90;
  }
  do
    v99 = __ldaxr(v91);
  while (__stlxr(v99 - 1, v91));
  if (!v99)
  {
    ((void (*)(std::__shared_weak_count *))v90->__on_zero_shared)(v90);
    std::__shared_weak_count::__release_weak(v90);
  }
LABEL_125:
  v100 = (std::__shared_weak_count *)__p[1];
  if (__p[1])
  {
    v101 = (unint64_t *)((char *)__p[1] + 8);
    do
      v102 = __ldaxr(v101);
    while (__stlxr(v102 - 1, v101));
    if (!v102)
    {
      ((void (*)(std::__shared_weak_count *))v100->__on_zero_shared)(v100);
      std::__shared_weak_count::__release_weak(v100);
    }
  }
  __p[0] = v86;
  __p[1] = v90;
  v103 = (std::__shared_weak_count *)v445[1];
  if (v445[1])
  {
    v104 = (unint64_t *)(v445[1] + 8);
    do
      v105 = __ldaxr(v104);
    while (__stlxr(v105 - 1, v104));
    if (!v105)
    {
      ((void (*)(std::__shared_weak_count *))v103->__on_zero_shared)(v103);
      std::__shared_weak_count::__release_weak(v103);
    }
  }
  v383[0] = &off_24C9F5458;
  v383[1] = v84;
  v383[2] = v461;
  *(_QWORD *)((char *)&v383[2] + 7) = *(_QWORD *)((char *)&v461 + 7);
  HIBYTE(v383[3]) = v85;
  *(_QWORD *)&v461 = 0;
  *(_QWORD *)((char *)&v461 + 7) = 0;
  v383[4] = 0x7974706D45;
  v383[5] = v458;
  *(_QWORD *)((char *)&v383[5] + 7) = *(_QWORD *)((char *)&v458 + 7);
  HIBYTE(v383[6]) = 5;
  *(_QWORD *)&v458 = 0;
  *(_QWORD *)((char *)&v458 + 7) = 0;
  v384 = 0uLL;
  *(_OWORD *)v445 = 0uLL;
  v107 = __p[0];
  v106 = (char *)__p[1];
  v385 = *(_OWORD *)__p;
  __p[0] = 0;
  __p[1] = 0;
  if (*((_QWORD *)&v385 + 1))
  {
    v108 = (unint64_t *)(v106 + 16);
    do
      v109 = __ldxr(v108);
    while (__stxr(v109 + 1, v108));
  }
  v386 = &off_24C9B4748;
  v110 = (_QWORD *)operator new();
  *v110 = &off_24C9F42E8;
  v110[1] = v107;
  v110[2] = v106;
  *(_QWORD *)&v387 = v110;
  v112 = *((_QWORD *)&v385 + 1);
  v111 = v385;
  if (!*((_QWORD *)&v385 + 1))
  {
    *((_QWORD *)&v387 + 1) = v385;
    v388 = 0;
    if ((_QWORD)v385)
      v116 = v385 + 16;
    else
      v116 = 0;
    goto LABEL_155;
  }
  v113 = (unint64_t *)(*((_QWORD *)&v385 + 1) + 16);
  do
    v114 = __ldxr(v113);
  while (__stxr(v114 + 1, v113));
  v115 = *((_QWORD *)&v385 + 1);
  *((_QWORD *)&v387 + 1) = v111;
  v388 = v112;
  if ((_QWORD)v385)
    v116 = v385 + 16;
  else
    v116 = 0;
  if (!*((_QWORD *)&v385 + 1))
  {
    v111 = v385;
LABEL_155:
    v119 = 0;
    v389 = &off_24C9DECB0;
    v390 = v116;
    goto LABEL_156;
  }
  v117 = (unint64_t *)(*((_QWORD *)&v385 + 1) + 16);
  do
    v118 = __ldxr(v117);
  while (__stxr(v118 + 1, v117));
  v119 = *((_QWORD *)&v385 + 1);
  v111 = v385;
  v389 = &off_24C9DECB0;
  *(_QWORD *)&v390 = v116;
  *((_QWORD *)&v390 + 1) = v115;
  if (*((_QWORD *)&v385 + 1))
  {
    v120 = (unint64_t *)(*((_QWORD *)&v385 + 1) + 16);
    do
      v121 = __ldxr(v120);
    while (__stxr(v121 + 1, v120));
  }
LABEL_156:
  if (v111)
    v122 = v111 + 24;
  else
    v122 = 0;
  v391 = &off_24C9B2310;
  *(_QWORD *)&v392 = v122;
  *((_QWORD *)&v392 + 1) = v119;
  v123 = (std::__shared_weak_count *)v434[1];
  if (!v434[1])
    goto LABEL_163;
  v124 = (unint64_t *)(v434[1] + 8);
  do
    v125 = __ldaxr(v124);
  while (__stlxr(v125 - 1, v124));
  if (!v125)
  {
    ((void (*)(std::__shared_weak_count *))v123->__on_zero_shared)(v123);
    std::__shared_weak_count::__release_weak(v123);
    if ((*(char *)(a2 + 23) & 0x80000000) == 0)
      goto LABEL_164;
  }
  else
  {
LABEL_163:
    if ((*(char *)(a2 + 23) & 0x80000000) == 0)
    {
LABEL_164:
      *(_OWORD *)v369 = *(_OWORD *)a2;
      v369[2] = *(void **)(a2 + 16);
      goto LABEL_167;
    }
  }
  sub_20E860C04(v369, *(void **)a2, *(_QWORD *)(a2 + 8));
LABEL_167:
  v126 = v420;
  v127 = v421;
  if (v421)
  {
    v128 = (unint64_t *)&v421->__shared_owners_;
    do
      v129 = __ldxr(v128);
    while (__stxr(v129 + 1, v128));
  }
  v130 = v369[0];
  *(void **)&v458 = v369[1];
  *(void **)((char *)&v458 + 7) = *(void **)((char *)&v369[1] + 7);
  v131 = HIBYTE(v369[2]);
  v368 = 0;
  memset(v369, 0, sizeof(v369));
  v464[0] = v455[0];
  *(_QWORD *)((char *)v464 + 7) = *(_QWORD *)((char *)v455 + 7);
  v455[0] = 0;
  *(_QWORD *)((char *)v455 + 7) = 0;
  v367[4] = 0;
  *(_QWORD *)&v461 = 0;
  *(_QWORD *)((char *)&v461 + 7) = 0;
  v434[0] = v126;
  v434[1] = v127;
  *(_OWORD *)v423 = 0uLL;
  v132 = operator new();
  *(_QWORD *)&v463 = v461;
  *(_QWORD *)((char *)&v463 + 7) = *(_QWORD *)((char *)&v461 + 7);
  *(_QWORD *)&v461 = 0;
  *(_QWORD *)((char *)&v461 + 7) = 0;
  v133 = *(_OWORD *)v434;
  *(_OWORD *)v434 = 0uLL;
  *(_BYTE *)(v132 + 8) = 1;
  *(_QWORD *)(v132 + 32) = 0;
  *(_QWORD *)(v132 + 40) = 0;
  *(_QWORD *)v132 = &off_24C9F5A68;
  *(_QWORD *)(v132 + 16) = &unk_24C9F5AE0;
  *(_QWORD *)(v132 + 24) = &unk_24C9F5B20;
  v134 = v463;
  *(_QWORD *)(v132 + 63) = *(_QWORD *)((char *)&v463 + 7);
  *(_QWORD *)(v132 + 48) = 0;
  *(_QWORD *)(v132 + 56) = v134;
  *(_BYTE *)(v132 + 71) = 0;
  *(_QWORD *)&v463 = 0;
  *(_QWORD *)((char *)&v463 + 7) = 0;
  *(_OWORD *)(v132 + 72) = v133;
  *(_OWORD *)v445 = 0uLL;
  v135 = (_QWORD *)operator new();
  *v135 = &off_24C9F5C18;
  *(_QWORD *)(v132 + 88) = v135;
  *(_QWORD *)(v132 + 96) = v132 + 96;
  *(_QWORD *)(v132 + 104) = v132 + 96;
  *(_QWORD *)(v132 + 112) = 0;
  *(_QWORD *)(v132 + 120) = v132 + 120;
  *(_QWORD *)(v132 + 128) = v132 + 120;
  *(_QWORD *)(v132 + 136) = 0;
  v136 = (std::__shared_weak_count *)operator new();
  v136->__shared_owners_ = 0;
  v137 = (unint64_t *)&v136->__shared_owners_;
  v136->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9F5C68;
  v136->__shared_weak_owners_ = 0;
  v136[1].__vftable = (std::__shared_weak_count_vtbl *)v132;
  v138 = *(std::__shared_weak_count **)(v132 + 40);
  if (v138)
  {
    if (v138->__shared_owners_ != -1)
      goto LABEL_183;
    do
      v139 = __ldxr(v137);
    while (__stxr(v139 + 1, v137));
    v140 = (unint64_t *)&v136->__shared_weak_owners_;
    do
      v141 = __ldxr(v140);
    while (__stxr(v141 + 1, v140));
    *(_QWORD *)(v132 + 32) = v132;
    *(_QWORD *)(v132 + 40) = v136;
    std::__shared_weak_count::__release_weak(v138);
  }
  else
  {
    do
      v142 = __ldxr(v137);
    while (__stxr(v142 + 1, v137));
    v143 = (unint64_t *)&v136->__shared_weak_owners_;
    do
      v144 = __ldxr(v143);
    while (__stxr(v144 + 1, v143));
    *(_QWORD *)(v132 + 32) = v132;
    *(_QWORD *)(v132 + 40) = v136;
  }
  do
    v145 = __ldaxr(v137);
  while (__stlxr(v145 - 1, v137));
  if (!v145)
  {
    ((void (*)(std::__shared_weak_count *))v136->__on_zero_shared)(v136);
    std::__shared_weak_count::__release_weak(v136);
  }
LABEL_183:
  v146 = (std::__shared_weak_count *)v445[1];
  if (v445[1])
  {
    v147 = (unint64_t *)(v445[1] + 8);
    do
      v148 = __ldaxr(v147);
    while (__stlxr(v148 - 1, v147));
    if (!v148)
    {
      ((void (*)(std::__shared_weak_count *))v146->__on_zero_shared)(v146);
      std::__shared_weak_count::__release_weak(v146);
    }
  }
  v445[0] = v132;
  v445[1] = v136;
  v149 = (std::__shared_weak_count *)v434[1];
  if (v434[1])
  {
    v150 = (unint64_t *)(v434[1] + 8);
    do
      v151 = __ldaxr(v150);
    while (__stlxr(v151 - 1, v150));
    if (!v151)
    {
      ((void (*)(std::__shared_weak_count *))v149->__on_zero_shared)(v149);
      std::__shared_weak_count::__release_weak(v149);
    }
  }
  __p[0] = &off_24C9F5488;
  __p[1] = v130;
  __p[2] = (void *)v458;
  *(void **)((char *)&__p[2] + 7) = *(void **)((char *)&v458 + 7);
  HIBYTE(__p[3]) = v131;
  *(_QWORD *)&v458 = 0;
  *(_QWORD *)((char *)&v458 + 7) = 0;
  __p[4] = (void *)0x7974706D45;
  __p[5] = (void *)v464[0];
  *(void **)((char *)&__p[5] + 7) = *(void **)((char *)v464 + 7);
  HIBYTE(__p[6]) = 5;
  v464[0] = 0;
  *(_QWORD *)((char *)v464 + 7) = 0;
  v371 = 0uLL;
  *(_OWORD *)v434 = 0uLL;
  v152 = *(_OWORD *)v445;
  v372 = *(_OWORD *)v445;
  *(_OWORD *)v445 = 0uLL;
  if (*((_QWORD *)&v372 + 1))
  {
    v153 = (unint64_t *)(*((_QWORD *)&v152 + 1) + 16);
    do
      v154 = __ldxr(v153);
    while (__stxr(v154 + 1, v153));
  }
  v373 = &off_24C9F2BF0;
  v155 = operator new();
  *(_QWORD *)v155 = &off_24C9F5CB8;
  *(_OWORD *)(v155 + 8) = v152;
  *(_QWORD *)&v374 = v155;
  v157 = *((_QWORD *)&v372 + 1);
  v156 = v372;
  if (!*((_QWORD *)&v372 + 1))
  {
    *((_QWORD *)&v374 + 1) = v372;
    v375 = 0;
    if ((_QWORD)v372)
      v161 = v372 + 16;
    else
      v161 = 0;
    goto LABEL_213;
  }
  v158 = (unint64_t *)(*((_QWORD *)&v372 + 1) + 16);
  do
    v159 = __ldxr(v158);
  while (__stxr(v159 + 1, v158));
  v160 = *((_QWORD *)&v372 + 1);
  *((_QWORD *)&v374 + 1) = v156;
  v375 = v157;
  if ((_QWORD)v372)
    v161 = v372 + 16;
  else
    v161 = 0;
  if (!*((_QWORD *)&v372 + 1))
  {
    v156 = v372;
LABEL_213:
    v164 = 0;
    v376 = &off_24C9F54B8;
    v377 = v161;
    goto LABEL_214;
  }
  v162 = (unint64_t *)(*((_QWORD *)&v372 + 1) + 16);
  do
    v163 = __ldxr(v162);
  while (__stxr(v163 + 1, v162));
  v164 = *((_QWORD *)&v372 + 1);
  v156 = v372;
  v376 = &off_24C9F54B8;
  *(_QWORD *)&v377 = v161;
  *((_QWORD *)&v377 + 1) = v160;
  if (*((_QWORD *)&v372 + 1))
  {
    v165 = (unint64_t *)(*((_QWORD *)&v372 + 1) + 16);
    do
      v166 = __ldxr(v165);
    while (__stxr(v166 + 1, v165));
  }
LABEL_214:
  if (v156)
    v167 = v156 + 24;
  else
    v167 = 0;
  v378 = &off_24C9B2310;
  *(_QWORD *)&v379 = v167;
  *((_QWORD *)&v379 + 1) = v164;
  v168 = (std::__shared_weak_count *)v423[1];
  if (!v423[1])
    goto LABEL_221;
  v169 = (unint64_t *)(v423[1] + 8);
  do
    v170 = __ldaxr(v169);
  while (__stlxr(v170 - 1, v169));
  if (!v170)
  {
    ((void (*)(std::__shared_weak_count *))v168->__on_zero_shared)(v168);
    std::__shared_weak_count::__release_weak(v168);
    if ((*(char *)(a2 + 23) & 0x80000000) == 0)
      goto LABEL_222;
  }
  else
  {
LABEL_221:
    if ((*(char *)(a2 + 23) & 0x80000000) == 0)
    {
LABEL_222:
      *(_OWORD *)v367 = *(_OWORD *)a2;
      v367[2] = *(void **)(a2 + 16);
      goto LABEL_225;
    }
  }
  sub_20E860C04(v367, *(void **)a2, *(_QWORD *)(a2 + 8));
LABEL_225:
  v171 = v420;
  v172 = v421;
  if (v421)
  {
    v173 = (unint64_t *)&v421->__shared_owners_;
    do
      v174 = __ldxr(v173);
    while (__stxr(v174 + 1, v173));
  }
  v175 = v367[0];
  v464[0] = v367[1];
  *(void **)((char *)v464 + 7) = *(void **)((char *)&v367[1] + 7);
  v176 = HIBYTE(v367[2]);
  v366 = 0;
  memset(v367, 0, 24);
  v462[0] = v444[0];
  *(_QWORD *)((char *)v462 + 7) = *(_QWORD *)((char *)v444 + 7);
  v444[0] = 0;
  *(_QWORD *)((char *)v444 + 7) = 0;
  v365[4] = 0;
  *(_QWORD *)&v458 = 0;
  *(_QWORD *)((char *)&v458 + 7) = 0;
  v423[0] = v171;
  v423[1] = v172;
  v463 = 0uLL;
  v177 = operator new();
  *(_QWORD *)&v461 = v458;
  *(_QWORD *)((char *)&v461 + 7) = *(_QWORD *)((char *)&v458 + 7);
  *(_QWORD *)&v458 = 0;
  *(_QWORD *)((char *)&v458 + 7) = 0;
  v178 = *(_OWORD *)v423;
  *(_OWORD *)v423 = 0uLL;
  *(_BYTE *)(v177 + 8) = 1;
  *(_QWORD *)(v177 + 32) = 0;
  *(_QWORD *)(v177 + 40) = 0;
  *(_QWORD *)v177 = &off_24C9F5D30;
  *(_QWORD *)(v177 + 16) = &unk_24C9F5DA8;
  *(_QWORD *)(v177 + 24) = &unk_24C9F5DE8;
  v179 = v461;
  *(_QWORD *)(v177 + 63) = *(_QWORD *)((char *)&v461 + 7);
  *(_QWORD *)(v177 + 48) = 0;
  *(_QWORD *)(v177 + 56) = v179;
  *(_BYTE *)(v177 + 71) = 0;
  *(_QWORD *)&v461 = 0;
  *(_QWORD *)((char *)&v461 + 7) = 0;
  *(_OWORD *)(v177 + 72) = v178;
  *(_OWORD *)v434 = 0uLL;
  v180 = (_QWORD *)operator new();
  *v180 = &off_24C9F5EE0;
  *(_QWORD *)(v177 + 88) = v180;
  *(_QWORD *)(v177 + 96) = v177 + 96;
  *(_QWORD *)(v177 + 104) = v177 + 96;
  *(_QWORD *)(v177 + 112) = 0;
  *(_QWORD *)(v177 + 120) = v177 + 120;
  *(_QWORD *)(v177 + 128) = v177 + 120;
  *(_QWORD *)(v177 + 136) = 0;
  v181 = (std::__shared_weak_count *)operator new();
  v181->__shared_owners_ = 0;
  v182 = (unint64_t *)&v181->__shared_owners_;
  v181->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9F5F30;
  v181->__shared_weak_owners_ = 0;
  v181[1].__vftable = (std::__shared_weak_count_vtbl *)v177;
  v183 = *(std::__shared_weak_count **)(v177 + 40);
  if (v183)
  {
    if (v183->__shared_owners_ != -1)
      goto LABEL_241;
    do
      v184 = __ldxr(v182);
    while (__stxr(v184 + 1, v182));
    v185 = (unint64_t *)&v181->__shared_weak_owners_;
    do
      v186 = __ldxr(v185);
    while (__stxr(v186 + 1, v185));
    *(_QWORD *)(v177 + 32) = v177;
    *(_QWORD *)(v177 + 40) = v181;
    std::__shared_weak_count::__release_weak(v183);
  }
  else
  {
    do
      v187 = __ldxr(v182);
    while (__stxr(v187 + 1, v182));
    v188 = (unint64_t *)&v181->__shared_weak_owners_;
    do
      v189 = __ldxr(v188);
    while (__stxr(v189 + 1, v188));
    *(_QWORD *)(v177 + 32) = v177;
    *(_QWORD *)(v177 + 40) = v181;
  }
  do
    v190 = __ldaxr(v182);
  while (__stlxr(v190 - 1, v182));
  if (!v190)
  {
    ((void (*)(std::__shared_weak_count *))v181->__on_zero_shared)(v181);
    std::__shared_weak_count::__release_weak(v181);
  }
LABEL_241:
  v191 = (std::__shared_weak_count *)v434[1];
  if (v434[1])
  {
    v192 = (unint64_t *)(v434[1] + 8);
    do
      v193 = __ldaxr(v192);
    while (__stlxr(v193 - 1, v192));
    if (!v193)
    {
      ((void (*)(std::__shared_weak_count *))v191->__on_zero_shared)(v191);
      std::__shared_weak_count::__release_weak(v191);
    }
  }
  v434[0] = v177;
  v434[1] = v181;
  v194 = (std::__shared_weak_count *)v423[1];
  if (v423[1])
  {
    v195 = (unint64_t *)(v423[1] + 8);
    do
      v196 = __ldaxr(v195);
    while (__stlxr(v196 - 1, v195));
    if (!v196)
    {
      ((void (*)(std::__shared_weak_count *))v194->__on_zero_shared)(v194);
      std::__shared_weak_count::__release_weak(v194);
    }
  }
  v445[0] = &off_24C9F54F0;
  v445[1] = v175;
  v445[2] = v464[0];
  *(_QWORD *)((char *)&v445[2] + 7) = *(_QWORD *)((char *)v464 + 7);
  HIBYTE(v445[3]) = v176;
  v464[0] = 0;
  *(_QWORD *)((char *)v464 + 7) = 0;
  v445[4] = 0x7974706D45;
  v445[5] = v462[0];
  *(_QWORD *)((char *)&v445[5] + 7) = *(_QWORD *)((char *)v462 + 7);
  HIBYTE(v445[6]) = 5;
  v462[0] = 0;
  *(_QWORD *)((char *)v462 + 7) = 0;
  v446 = 0uLL;
  *(_OWORD *)v423 = 0uLL;
  v197 = *(_OWORD *)v434;
  v447 = *(_OWORD *)v434;
  *(_OWORD *)v434 = 0uLL;
  if (*((_QWORD *)&v447 + 1))
  {
    v198 = (unint64_t *)(*((_QWORD *)&v197 + 1) + 16);
    do
      v199 = __ldxr(v198);
    while (__stxr(v199 + 1, v198));
  }
  v448 = &off_24C9F2CC8;
  v200 = operator new();
  *(_QWORD *)v200 = &off_24C9F5F80;
  *(_OWORD *)(v200 + 8) = v197;
  *(_QWORD *)&v449 = v200;
  v202 = *((_QWORD *)&v447 + 1);
  v201 = v447;
  if (!*((_QWORD *)&v447 + 1))
  {
    *((_QWORD *)&v449 + 1) = v447;
    v450 = 0;
    if ((_QWORD)v447)
      v206 = v447 + 16;
    else
      v206 = 0;
    goto LABEL_271;
  }
  v203 = (unint64_t *)(*((_QWORD *)&v447 + 1) + 16);
  do
    v204 = __ldxr(v203);
  while (__stxr(v204 + 1, v203));
  v205 = *((_QWORD *)&v447 + 1);
  *((_QWORD *)&v449 + 1) = v201;
  v450 = v202;
  if ((_QWORD)v447)
    v206 = v447 + 16;
  else
    v206 = 0;
  if (!*((_QWORD *)&v447 + 1))
  {
    v201 = v447;
LABEL_271:
    v209 = 0;
    v451 = &off_24C9F5520;
    v452 = v206;
    goto LABEL_272;
  }
  v207 = (unint64_t *)(*((_QWORD *)&v447 + 1) + 16);
  do
    v208 = __ldxr(v207);
  while (__stxr(v208 + 1, v207));
  v209 = *((_QWORD *)&v447 + 1);
  v201 = v447;
  v451 = &off_24C9F5520;
  *(_QWORD *)&v452 = v206;
  *((_QWORD *)&v452 + 1) = v205;
  if (*((_QWORD *)&v447 + 1))
  {
    v210 = (unint64_t *)(*((_QWORD *)&v447 + 1) + 16);
    do
      v211 = __ldxr(v210);
    while (__stxr(v211 + 1, v210));
  }
LABEL_272:
  if (v201)
    v212 = v201 + 24;
  else
    v212 = 0;
  v453 = &off_24C9B2310;
  *(_QWORD *)&v454 = v212;
  *((_QWORD *)&v454 + 1) = v209;
  v213 = (std::__shared_weak_count *)*((_QWORD *)&v463 + 1);
  if (!*((_QWORD *)&v463 + 1))
    goto LABEL_279;
  v214 = (unint64_t *)(*((_QWORD *)&v463 + 1) + 8);
  do
    v215 = __ldaxr(v214);
  while (__stlxr(v215 - 1, v214));
  if (!v215)
  {
    ((void (*)(std::__shared_weak_count *))v213->__on_zero_shared)(v213);
    std::__shared_weak_count::__release_weak(v213);
    if ((*(char *)(a2 + 23) & 0x80000000) == 0)
      goto LABEL_280;
  }
  else
  {
LABEL_279:
    if ((*(char *)(a2 + 23) & 0x80000000) == 0)
    {
LABEL_280:
      *(_OWORD *)v365 = *(_OWORD *)a2;
      v365[2] = *(void **)(a2 + 16);
      goto LABEL_283;
    }
  }
  sub_20E860C04(v365, *(void **)a2, *(_QWORD *)(a2 + 8));
LABEL_283:
  v216 = v420;
  v217 = v421;
  if (v421)
  {
    v218 = (unint64_t *)&v421->__shared_owners_;
    do
      v219 = __ldxr(v218);
    while (__stxr(v219 + 1, v218));
  }
  v220 = v365[0];
  v462[0] = v365[1];
  *(void **)((char *)v462 + 7) = *(void **)((char *)&v365[1] + 7);
  v221 = HIBYTE(v365[2]);
  v364 = 0;
  memset(v365, 0, 24);
  v460[0] = v433[0];
  *(_QWORD *)((char *)v460 + 7) = *(_QWORD *)((char *)v433 + 7);
  v433[0] = 0;
  *(_QWORD *)((char *)v433 + 7) = 0;
  v363[4] = 0;
  v464[0] = 0;
  *(_QWORD *)((char *)v464 + 7) = 0;
  *(_QWORD *)&v463 = v216;
  *((_QWORD *)&v463 + 1) = v217;
  v461 = 0uLL;
  v222 = operator new();
  *(_QWORD *)&v458 = v464[0];
  *(_QWORD *)((char *)&v458 + 7) = *(_QWORD *)((char *)v464 + 7);
  v464[0] = 0;
  *(_QWORD *)((char *)v464 + 7) = 0;
  v223 = v463;
  v463 = 0uLL;
  *(_BYTE *)(v222 + 8) = 1;
  *(_QWORD *)(v222 + 32) = 0;
  *(_QWORD *)(v222 + 40) = 0;
  *(_QWORD *)v222 = &off_24C9F5FF8;
  *(_QWORD *)(v222 + 16) = &unk_24C9F6070;
  *(_QWORD *)(v222 + 24) = &unk_24C9F60B0;
  v224 = v458;
  *(_QWORD *)(v222 + 63) = *(_QWORD *)((char *)&v458 + 7);
  *(_QWORD *)(v222 + 48) = 0;
  *(_QWORD *)(v222 + 56) = v224;
  *(_BYTE *)(v222 + 71) = 0;
  *(_QWORD *)&v458 = 0;
  *(_QWORD *)((char *)&v458 + 7) = 0;
  *(_OWORD *)(v222 + 72) = v223;
  *(_OWORD *)v423 = 0uLL;
  v225 = (_QWORD *)operator new();
  *v225 = &off_24C9F6188;
  *(_QWORD *)(v222 + 88) = v225;
  *(_QWORD *)(v222 + 96) = v222 + 96;
  *(_QWORD *)(v222 + 104) = v222 + 96;
  *(_QWORD *)(v222 + 112) = 0;
  *(_QWORD *)(v222 + 120) = v222 + 120;
  *(_QWORD *)(v222 + 128) = v222 + 120;
  *(_QWORD *)(v222 + 136) = 0;
  v226 = (std::__shared_weak_count *)operator new();
  v226->__shared_owners_ = 0;
  v227 = (unint64_t *)&v226->__shared_owners_;
  v226->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9F61D8;
  v226->__shared_weak_owners_ = 0;
  v226[1].__vftable = (std::__shared_weak_count_vtbl *)v222;
  v228 = *(std::__shared_weak_count **)(v222 + 40);
  if (v228)
  {
    if (v228->__shared_owners_ != -1)
      goto LABEL_299;
    do
      v229 = __ldxr(v227);
    while (__stxr(v229 + 1, v227));
    v230 = (unint64_t *)&v226->__shared_weak_owners_;
    do
      v231 = __ldxr(v230);
    while (__stxr(v231 + 1, v230));
    *(_QWORD *)(v222 + 32) = v222;
    *(_QWORD *)(v222 + 40) = v226;
    std::__shared_weak_count::__release_weak(v228);
  }
  else
  {
    do
      v232 = __ldxr(v227);
    while (__stxr(v232 + 1, v227));
    v233 = (unint64_t *)&v226->__shared_weak_owners_;
    do
      v234 = __ldxr(v233);
    while (__stxr(v234 + 1, v233));
    *(_QWORD *)(v222 + 32) = v222;
    *(_QWORD *)(v222 + 40) = v226;
  }
  do
    v235 = __ldaxr(v227);
  while (__stlxr(v235 - 1, v227));
  if (!v235)
  {
    ((void (*)(std::__shared_weak_count *))v226->__on_zero_shared)(v226);
    std::__shared_weak_count::__release_weak(v226);
  }
LABEL_299:
  v236 = (std::__shared_weak_count *)v423[1];
  if (v423[1])
  {
    v237 = (unint64_t *)(v423[1] + 8);
    do
      v238 = __ldaxr(v237);
    while (__stlxr(v238 - 1, v237));
    if (!v238)
    {
      ((void (*)(std::__shared_weak_count *))v236->__on_zero_shared)(v236);
      std::__shared_weak_count::__release_weak(v236);
    }
  }
  v423[0] = v222;
  v423[1] = v226;
  v239 = (std::__shared_weak_count *)*((_QWORD *)&v463 + 1);
  if (*((_QWORD *)&v463 + 1))
  {
    v240 = (unint64_t *)(*((_QWORD *)&v463 + 1) + 8);
    do
      v241 = __ldaxr(v240);
    while (__stlxr(v241 - 1, v240));
    if (!v241)
    {
      ((void (*)(std::__shared_weak_count *))v239->__on_zero_shared)(v239);
      std::__shared_weak_count::__release_weak(v239);
    }
  }
  v434[0] = &off_24C9F5558;
  v434[1] = v220;
  v434[2] = v462[0];
  *(_QWORD *)((char *)&v434[2] + 7) = *(_QWORD *)((char *)v462 + 7);
  HIBYTE(v434[3]) = v221;
  v462[0] = 0;
  *(_QWORD *)((char *)v462 + 7) = 0;
  v434[4] = 0x7974706D45;
  v434[5] = v460[0];
  *(_QWORD *)((char *)&v434[5] + 7) = *(_QWORD *)((char *)v460 + 7);
  HIBYTE(v434[6]) = 5;
  v460[0] = 0;
  *(_QWORD *)((char *)v460 + 7) = 0;
  v435 = 0uLL;
  v463 = 0uLL;
  v242 = *(_OWORD *)v423;
  v436 = *(_OWORD *)v423;
  *(_OWORD *)v423 = 0uLL;
  if (*((_QWORD *)&v436 + 1))
  {
    v243 = (unint64_t *)(*((_QWORD *)&v242 + 1) + 16);
    do
      v244 = __ldxr(v243);
    while (__stxr(v244 + 1, v243));
  }
  v437 = &off_24C9F2CC8;
  v245 = operator new();
  *(_QWORD *)v245 = &off_24C9F5F80;
  *(_OWORD *)(v245 + 8) = v242;
  *(_QWORD *)&v438 = v245;
  v247 = *((_QWORD *)&v436 + 1);
  v246 = v436;
  if (!*((_QWORD *)&v436 + 1))
  {
    *((_QWORD *)&v438 + 1) = v436;
    v439 = 0;
    if ((_QWORD)v436)
      v251 = v436 + 16;
    else
      v251 = 0;
    goto LABEL_329;
  }
  v248 = (unint64_t *)(*((_QWORD *)&v436 + 1) + 16);
  do
    v249 = __ldxr(v248);
  while (__stxr(v249 + 1, v248));
  v250 = *((_QWORD *)&v436 + 1);
  *((_QWORD *)&v438 + 1) = v246;
  v439 = v247;
  if ((_QWORD)v436)
    v251 = v436 + 16;
  else
    v251 = 0;
  if (!*((_QWORD *)&v436 + 1))
  {
    v246 = v436;
LABEL_329:
    v254 = 0;
    v440 = &off_24C9F2BB8;
    v441 = v251;
    goto LABEL_330;
  }
  v252 = (unint64_t *)(*((_QWORD *)&v436 + 1) + 16);
  do
    v253 = __ldxr(v252);
  while (__stxr(v253 + 1, v252));
  v254 = *((_QWORD *)&v436 + 1);
  v246 = v436;
  v440 = &off_24C9F2BB8;
  *(_QWORD *)&v441 = v251;
  *((_QWORD *)&v441 + 1) = v250;
  if (*((_QWORD *)&v436 + 1))
  {
    v255 = (unint64_t *)(*((_QWORD *)&v436 + 1) + 16);
    do
      v256 = __ldxr(v255);
    while (__stxr(v256 + 1, v255));
  }
LABEL_330:
  if (v246)
    v257 = v246 + 24;
  else
    v257 = 0;
  v442 = &off_24C9B2310;
  *(_QWORD *)&v443 = v257;
  *((_QWORD *)&v443 + 1) = v254;
  v258 = (std::__shared_weak_count *)*((_QWORD *)&v461 + 1);
  if (!*((_QWORD *)&v461 + 1))
    goto LABEL_337;
  v259 = (unint64_t *)(*((_QWORD *)&v461 + 1) + 8);
  do
    v260 = __ldaxr(v259);
  while (__stlxr(v260 - 1, v259));
  if (!v260)
  {
    ((void (*)(std::__shared_weak_count *))v258->__on_zero_shared)(v258);
    std::__shared_weak_count::__release_weak(v258);
    if ((*(char *)(a2 + 23) & 0x80000000) == 0)
      goto LABEL_338;
  }
  else
  {
LABEL_337:
    if ((*(char *)(a2 + 23) & 0x80000000) == 0)
    {
LABEL_338:
      *(_OWORD *)v363 = *(_OWORD *)a2;
      v363[2] = *(void **)(a2 + 16);
      goto LABEL_341;
    }
  }
  sub_20E860C04(v363, *(void **)a2, *(_QWORD *)(a2 + 8));
LABEL_341:
  v261 = v420;
  v262 = v421;
  if (v421)
  {
    v263 = (unint64_t *)&v421->__shared_owners_;
    do
      v264 = __ldxr(v263);
    while (__stxr(v264 + 1, v263));
  }
  v265 = v363[0];
  v460[0] = v363[1];
  *(void **)((char *)v460 + 7) = *(void **)((char *)&v363[1] + 7);
  v266 = HIBYTE(v363[2]);
  memset(v363, 0, 24);
  v459[0] = v422[0];
  *(_QWORD *)((char *)v459 + 7) = *(_QWORD *)((char *)v422 + 7);
  v422[0] = 0;
  *(_QWORD *)((char *)v422 + 7) = 0;
  *((_QWORD *)&v461 + 1) = v262;
  v462[0] = 0;
  *(_QWORD *)((char *)v462 + 7) = 0;
  *(_QWORD *)&v461 = v261;
  v458 = 0uLL;
  v267 = operator new();
  v464[0] = v462[0];
  *(_QWORD *)((char *)v464 + 7) = *(_QWORD *)((char *)v462 + 7);
  v462[0] = 0;
  *(_QWORD *)((char *)v462 + 7) = 0;
  v268 = v461;
  v461 = 0uLL;
  *(_BYTE *)(v267 + 8) = 1;
  *(_QWORD *)(v267 + 32) = 0;
  *(_QWORD *)(v267 + 40) = 0;
  *(_QWORD *)v267 = &off_24C9F6228;
  *(_QWORD *)(v267 + 16) = &unk_24C9F62A0;
  *(_QWORD *)(v267 + 24) = &unk_24C9F62E0;
  v269 = v464[0];
  *(_QWORD *)(v267 + 63) = *(_QWORD *)((char *)v464 + 7);
  *(_QWORD *)(v267 + 48) = 0;
  *(_QWORD *)(v267 + 56) = v269;
  *(_BYTE *)(v267 + 71) = 0;
  v464[0] = 0;
  *(_QWORD *)((char *)v464 + 7) = 0;
  *(_OWORD *)(v267 + 72) = v268;
  v463 = 0uLL;
  v270 = (_QWORD *)operator new();
  *v270 = &off_24C9F63A0;
  *(_QWORD *)(v267 + 88) = v270;
  *(_QWORD *)(v267 + 96) = v267 + 96;
  *(_QWORD *)(v267 + 104) = v267 + 96;
  *(_QWORD *)(v267 + 112) = 0;
  *(_QWORD *)(v267 + 120) = v267 + 120;
  *(_QWORD *)(v267 + 128) = v267 + 120;
  *(_QWORD *)(v267 + 136) = 0;
  v271 = (std::__shared_weak_count *)operator new();
  v271->__shared_owners_ = 0;
  v272 = (unint64_t *)&v271->__shared_owners_;
  v271->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9F63F0;
  v271->__shared_weak_owners_ = 0;
  v271[1].__vftable = (std::__shared_weak_count_vtbl *)v267;
  v273 = *(std::__shared_weak_count **)(v267 + 40);
  if (v273)
  {
    if (v273->__shared_owners_ != -1)
      goto LABEL_357;
    do
      v274 = __ldxr(v272);
    while (__stxr(v274 + 1, v272));
    v275 = (unint64_t *)&v271->__shared_weak_owners_;
    do
      v276 = __ldxr(v275);
    while (__stxr(v276 + 1, v275));
    *(_QWORD *)(v267 + 32) = v267;
    *(_QWORD *)(v267 + 40) = v271;
    std::__shared_weak_count::__release_weak(v273);
  }
  else
  {
    do
      v277 = __ldxr(v272);
    while (__stxr(v277 + 1, v272));
    v278 = (unint64_t *)&v271->__shared_weak_owners_;
    do
      v279 = __ldxr(v278);
    while (__stxr(v279 + 1, v278));
    *(_QWORD *)(v267 + 32) = v267;
    *(_QWORD *)(v267 + 40) = v271;
  }
  do
    v280 = __ldaxr(v272);
  while (__stlxr(v280 - 1, v272));
  if (!v280)
  {
    ((void (*)(std::__shared_weak_count *))v271->__on_zero_shared)(v271);
    std::__shared_weak_count::__release_weak(v271);
  }
LABEL_357:
  v281 = (std::__shared_weak_count *)*((_QWORD *)&v463 + 1);
  if (*((_QWORD *)&v463 + 1))
  {
    v282 = (unint64_t *)(*((_QWORD *)&v463 + 1) + 8);
    do
      v283 = __ldaxr(v282);
    while (__stlxr(v283 - 1, v282));
    if (!v283)
    {
      ((void (*)(std::__shared_weak_count *))v281->__on_zero_shared)(v281);
      std::__shared_weak_count::__release_weak(v281);
    }
  }
  *(_QWORD *)&v463 = v267;
  *((_QWORD *)&v463 + 1) = v271;
  v284 = (std::__shared_weak_count *)*((_QWORD *)&v461 + 1);
  if (*((_QWORD *)&v461 + 1))
  {
    v285 = (unint64_t *)(*((_QWORD *)&v461 + 1) + 8);
    do
      v286 = __ldaxr(v285);
    while (__stlxr(v286 - 1, v285));
    if (!v286)
    {
      ((void (*)(std::__shared_weak_count *))v284->__on_zero_shared)(v284);
      std::__shared_weak_count::__release_weak(v284);
    }
  }
  v423[0] = &off_24C9F5588;
  v423[1] = v265;
  v423[2] = v460[0];
  *(_QWORD *)((char *)&v423[2] + 7) = *(_QWORD *)((char *)v460 + 7);
  HIBYTE(v423[3]) = v266;
  v460[0] = 0;
  *(_QWORD *)((char *)v460 + 7) = 0;
  v423[4] = 0x7974706D45;
  v423[5] = v459[0];
  *(_QWORD *)((char *)&v423[5] + 7) = *(_QWORD *)((char *)v459 + 7);
  HIBYTE(v423[6]) = 5;
  v459[0] = 0;
  *(_QWORD *)((char *)v459 + 7) = 0;
  v424 = 0uLL;
  v461 = 0uLL;
  v287 = v463;
  v425 = v463;
  v463 = 0uLL;
  if (*((_QWORD *)&v425 + 1))
  {
    v288 = (unint64_t *)(*((_QWORD *)&v287 + 1) + 16);
    do
      v289 = __ldxr(v288);
    while (__stxr(v289 + 1, v288));
  }
  v426 = &off_24C9B4710;
  v290 = operator new();
  *(_QWORD *)v290 = &off_24C9D4BE0;
  *(_OWORD *)(v290 + 8) = v287;
  *(_QWORD *)&v427 = v290;
  v292 = *((_QWORD *)&v425 + 1);
  v291 = v425;
  if (!*((_QWORD *)&v425 + 1))
  {
    *((_QWORD *)&v427 + 1) = v425;
    v428 = 0;
    if ((_QWORD)v425)
      v296 = v425 + 16;
    else
      v296 = 0;
    goto LABEL_387;
  }
  v293 = (unint64_t *)(*((_QWORD *)&v425 + 1) + 16);
  do
    v294 = __ldxr(v293);
  while (__stxr(v294 + 1, v293));
  v295 = *((_QWORD *)&v425 + 1);
  *((_QWORD *)&v427 + 1) = v291;
  v428 = v292;
  if ((_QWORD)v425)
    v296 = v425 + 16;
  else
    v296 = 0;
  if (!*((_QWORD *)&v425 + 1))
  {
    v291 = v425;
LABEL_387:
    v299 = 0;
    v429 = &off_24C9F2D60;
    v430 = v296;
    goto LABEL_388;
  }
  v297 = (unint64_t *)(*((_QWORD *)&v425 + 1) + 16);
  do
    v298 = __ldxr(v297);
  while (__stxr(v298 + 1, v297));
  v299 = *((_QWORD *)&v425 + 1);
  v291 = v425;
  v429 = &off_24C9F2D60;
  *(_QWORD *)&v430 = v296;
  *((_QWORD *)&v430 + 1) = v295;
  if (*((_QWORD *)&v425 + 1))
  {
    v300 = (unint64_t *)(*((_QWORD *)&v425 + 1) + 16);
    do
      v301 = __ldxr(v300);
    while (__stxr(v301 + 1, v300));
  }
LABEL_388:
  if (v291)
    v302 = v291 + 24;
  else
    v302 = 0;
  v431 = &off_24C9B2310;
  *(_QWORD *)&v432 = v302;
  *((_QWORD *)&v432 + 1) = v299;
  v303 = (std::__shared_weak_count *)*((_QWORD *)&v458 + 1);
  if (*((_QWORD *)&v458 + 1))
  {
    v304 = (unint64_t *)(*((_QWORD *)&v458 + 1) + 8);
    do
      v305 = __ldaxr(v304);
    while (__stlxr(v305 - 1, v304));
    if (!v305)
    {
      ((void (*)(std::__shared_weak_count *))v303->__on_zero_shared)(v303);
      std::__shared_weak_count::__release_weak(v303);
    }
  }
  v306 = operator new();
  *(_QWORD *)v306 = &off_24C9F53F0;
  *(_QWORD *)(v306 + 88) = &off_24C9F2B80;
  *(_QWORD *)(v306 + 336) = &off_24C9F5458;
  *(_QWORD *)(v306 + 424) = &off_24C9B4748;
  *(_QWORD *)(v306 + 504) = &off_24C9F5488;
  *(_QWORD *)(v306 + 592) = &off_24C9F2BF0;
  *(_QWORD *)(v306 + 624) = &off_24C9F54B8;
  *(_QWORD *)(v306 + 672) = &off_24C9F54F0;
  *(_QWORD *)(v306 + 792) = &off_24C9F5520;
  *(_QWORD *)(v306 + 840) = &off_24C9F5558;
  *(_QWORD *)(v306 + 960) = &off_24C9F2BB8;
  *(_QWORD *)(v306 + 1008) = &off_24C9F5588;
  *(_QWORD *)(v306 + 1096) = &off_24C9B4710;
  *(_QWORD *)(v306 + 1128) = &off_24C9F2D60;
  *(_QWORD *)(v306 + 24) = v410[3];
  v307 = *(_OWORD *)&v410[1];
  memset(&v410[1], 0, 24);
  *(_QWORD *)(v306 + 48) = v410[6];
  v308 = *(_OWORD *)&v410[4];
  memset(&v410[4], 0, 24);
  v309 = v411;
  v411 = 0uLL;
  *(_OWORD *)(v306 + 8) = v307;
  *(_OWORD *)(v306 + 32) = v308;
  v310 = v412;
  v412 = 0uLL;
  *(_OWORD *)(v306 + 344) = *(_OWORD *)&v383[1];
  v311 = v414;
  v312 = v415;
  *((_QWORD *)&v414 + 1) = 0;
  v415 = 0;
  *(_QWORD *)(v306 + 112) = v312;
  *(_QWORD *)(v306 + 120) = &off_24C9F5420;
  *(_OWORD *)(v306 + 56) = v309;
  *(_OWORD *)(v306 + 72) = v310;
  v313 = v417;
  v314 = v419;
  v419 = 0uLL;
  *(_QWORD *)(v306 + 168) = &off_24C9DEC20;
  v315 = v400;
  *(_QWORD *)(v306 + 192) = v398;
  *(_QWORD *)(v306 + 216) = v315;
  *(_QWORD *)(v306 + 256) = &off_24C9B46D8;
  *(_QWORD *)(v306 + 280) = v404;
  *(_QWORD *)(v306 + 288) = &off_24C9D12B0;
  *(_OWORD *)(v306 + 96) = v311;
  *(_OWORD *)(v306 + 128) = v313;
  *(_OWORD *)(v306 + 152) = v314;
  *(_OWORD *)(v306 + 176) = *(_OWORD *)&v397[8];
  *(_OWORD *)(v306 + 200) = v399;
  v316 = v402;
  *(_OWORD *)(v306 + 224) = v401;
  *(_OWORD *)(v306 + 240) = v316;
  v317 = v403;
  v318 = v405;
  v319 = v406;
  *(_QWORD *)(v306 + 360) = v383[3];
  memset(&v383[1], 0, 24);
  *(_QWORD *)(v306 + 384) = v383[6];
  *(_OWORD *)(v306 + 264) = v317;
  v320 = *(_OWORD *)&v383[4];
  memset(&v383[4], 0, 24);
  *(_OWORD *)(v306 + 296) = v318;
  v321 = v384;
  v384 = 0uLL;
  *(_OWORD *)(v306 + 320) = v319;
  *(_OWORD *)(v306 + 368) = v320;
  v322 = v385;
  v385 = 0uLL;
  *(_OWORD *)(v306 + 536) = *(_OWORD *)&__p[4];
  v323 = v387;
  v324 = v388;
  *((_QWORD *)&v387 + 1) = 0;
  v388 = 0;
  *(_QWORD *)(v306 + 448) = v324;
  *(_QWORD *)(v306 + 456) = &off_24C9DECB0;
  *(_OWORD *)(v306 + 392) = v321;
  *(_OWORD *)(v306 + 408) = v322;
  v325 = v392;
  v392 = 0uLL;
  *(void **)(v306 + 528) = __p[3];
  *(_OWORD *)(v306 + 432) = v323;
  *(_OWORD *)(v306 + 464) = v390;
  v326 = *(_OWORD *)&__p[1];
  memset(&__p[1], 0, 24);
  *(void **)(v306 + 552) = __p[6];
  memset(&__p[4], 0, 24);
  *(_QWORD *)&v414 = 0;
  v417 = 0uLL;
  *(_QWORD *)(v306 + 144) = &off_24C9B2310;
  *(_OWORD *)&v397[8] = 0uLL;
  v398 = 0;
  v399 = 0uLL;
  v400 = 0;
  v401 = 0uLL;
  v402 = 0uLL;
  v403 = 0uLL;
  v404 = 0;
  *(_QWORD *)&v405 = 0;
  *(_QWORD *)(v306 + 312) = &off_24C9B2310;
  *((_QWORD *)&v405 + 1) = 0;
  v406 = 0uLL;
  *(_QWORD *)&v387 = 0;
  v390 = 0uLL;
  *(_QWORD *)(v306 + 480) = &off_24C9B2310;
  *(_OWORD *)(v306 + 488) = v325;
  *(_OWORD *)(v306 + 512) = v326;
  v327 = v371;
  v328 = v372;
  v371 = 0uLL;
  *(_OWORD *)(v306 + 560) = v327;
  *(_OWORD *)(v306 + 576) = v328;
  v372 = 0uLL;
  *(_OWORD *)(v306 + 600) = v374;
  *(_QWORD *)(v306 + 616) = v375;
  *((_QWORD *)&v374 + 1) = 0;
  v375 = 0;
  *(_OWORD *)(v306 + 632) = v377;
  v377 = 0uLL;
  *(_QWORD *)&v374 = 0;
  *(_QWORD *)(v306 + 648) = &off_24C9B2310;
  *(_OWORD *)(v306 + 656) = v379;
  v379 = 0uLL;
  v329 = *(_OWORD *)&v445[1];
  *(_QWORD *)(v306 + 696) = v445[3];
  *(_OWORD *)(v306 + 680) = v329;
  memset(&v445[1], 0, 24);
  v330 = *(_OWORD *)&v445[4];
  *(_QWORD *)(v306 + 720) = v445[6];
  *(_OWORD *)(v306 + 704) = v330;
  memset(&v445[4], 0, 24);
  v331 = v446;
  v446 = 0uLL;
  v332 = v447;
  *(_OWORD *)(v306 + 728) = v331;
  *(_OWORD *)(v306 + 744) = v332;
  v447 = 0uLL;
  *(_QWORD *)(v306 + 760) = &off_24C9F2CC8;
  *(_OWORD *)(v306 + 768) = v449;
  *(_QWORD *)(v306 + 784) = v450;
  *((_QWORD *)&v449 + 1) = 0;
  v450 = 0;
  *(_OWORD *)(v306 + 800) = v452;
  *(_QWORD *)&v449 = 0;
  v452 = 0uLL;
  *(_QWORD *)(v306 + 816) = &off_24C9B2310;
  *(_OWORD *)(v306 + 824) = v454;
  v454 = 0uLL;
  v333 = *(_OWORD *)&v434[1];
  *(_QWORD *)(v306 + 864) = v434[3];
  *(_OWORD *)(v306 + 848) = v333;
  memset(&v434[1], 0, 24);
  v334 = *(_OWORD *)&v434[4];
  *(_QWORD *)(v306 + 888) = v434[6];
  *(_OWORD *)(v306 + 872) = v334;
  memset(&v434[4], 0, 24);
  v335 = v435;
  v435 = 0uLL;
  v336 = v436;
  *(_OWORD *)(v306 + 896) = v335;
  *(_OWORD *)(v306 + 912) = v336;
  v436 = 0uLL;
  *(_QWORD *)(v306 + 928) = &off_24C9F2CC8;
  *(_OWORD *)(v306 + 936) = v438;
  *(_QWORD *)(v306 + 952) = v439;
  *((_QWORD *)&v438 + 1) = 0;
  v439 = 0;
  *(_OWORD *)(v306 + 968) = v441;
  *(_QWORD *)&v438 = 0;
  v441 = 0uLL;
  *(_QWORD *)(v306 + 984) = &off_24C9B2310;
  *(_OWORD *)(v306 + 992) = v443;
  v443 = 0uLL;
  v337 = *(_OWORD *)&v423[1];
  *(_QWORD *)(v306 + 1032) = v423[3];
  *(_OWORD *)(v306 + 1016) = v337;
  memset(&v423[1], 0, 24);
  v338 = *(_OWORD *)&v423[4];
  *(_QWORD *)(v306 + 1056) = v423[6];
  *(_OWORD *)(v306 + 1040) = v338;
  memset(&v423[4], 0, 24);
  v339 = v424;
  v424 = 0uLL;
  v340 = v425;
  *(_OWORD *)(v306 + 1064) = v339;
  *(_OWORD *)(v306 + 1080) = v340;
  v425 = 0uLL;
  *(_OWORD *)(v306 + 1104) = v427;
  *(_QWORD *)(v306 + 1120) = v428;
  *((_QWORD *)&v427 + 1) = 0;
  v428 = 0;
  *(_OWORD *)(v306 + 1136) = v430;
  *(_QWORD *)&v427 = 0;
  v430 = 0uLL;
  *(_QWORD *)(v306 + 1152) = &off_24C9B2310;
  *(_OWORD *)(v306 + 1160) = v432;
  v432 = 0uLL;
  *v362 = v306;
  sub_20EFDB74C((uint64_t)v423);
  if (SHIBYTE(v363[2]) < 0)
    operator delete(v363[0]);
  sub_20EFDB930((uint64_t)v434);
  v341 = v364;
  if (v364)
  {
    v342 = (unint64_t *)&v364->__shared_owners_;
    do
      v343 = __ldaxr(v342);
    while (__stlxr(v343 - 1, v342));
    if (!v343)
    {
      ((void (*)(std::__shared_weak_count *))v341->__on_zero_shared)(v341);
      std::__shared_weak_count::__release_weak(v341);
      if ((SHIBYTE(v365[2]) & 0x80000000) == 0)
        goto LABEL_404;
      goto LABEL_403;
    }
  }
  if (SHIBYTE(v365[2]) < 0)
LABEL_403:
    operator delete(v365[0]);
LABEL_404:
  sub_20EFDBB14((uint64_t)v445);
  v344 = v366;
  if (v366)
  {
    v345 = (unint64_t *)&v366->__shared_owners_;
    do
      v346 = __ldaxr(v345);
    while (__stlxr(v346 - 1, v345));
    if (!v346)
    {
      ((void (*)(std::__shared_weak_count *))v344->__on_zero_shared)(v344);
      std::__shared_weak_count::__release_weak(v344);
      if ((SHIBYTE(v367[2]) & 0x80000000) == 0)
        goto LABEL_410;
      goto LABEL_409;
    }
  }
  if (SHIBYTE(v367[2]) < 0)
LABEL_409:
    operator delete(v367[0]);
LABEL_410:
  sub_20EFDBCF8((uint64_t)__p);
  v347 = v368;
  if (v368)
  {
    v348 = (unint64_t *)&v368->__shared_owners_;
    do
      v349 = __ldaxr(v348);
    while (__stlxr(v349 - 1, v348));
    if (!v349)
    {
      ((void (*)(std::__shared_weak_count *))v347->__on_zero_shared)(v347);
      std::__shared_weak_count::__release_weak(v347);
      if ((SHIBYTE(v369[2]) & 0x80000000) == 0)
        goto LABEL_416;
      goto LABEL_415;
    }
  }
  if (SHIBYTE(v369[2]) < 0)
LABEL_415:
    operator delete(v369[0]);
LABEL_416:
  sub_20EFDBEDC((uint64_t)v383);
  v350 = v381;
  if (v381)
  {
    v351 = (unint64_t *)&v381->__shared_owners_;
    do
      v352 = __ldaxr(v351);
    while (__stlxr(v352 - 1, v351));
    if (!v352)
    {
      ((void (*)(std::__shared_weak_count *))v350->__on_zero_shared)(v350);
      std::__shared_weak_count::__release_weak(v350);
      if ((SHIBYTE(v382[2]) & 0x80000000) == 0)
        goto LABEL_422;
      goto LABEL_421;
    }
  }
  if (SHIBYTE(v382[2]) < 0)
LABEL_421:
    operator delete(v382[0]);
LABEL_422:
  sub_20ED217F4((uint64_t)v397);
  v353 = v394;
  if (v394)
  {
    v354 = (unint64_t *)&v394->__shared_owners_;
    do
      v355 = __ldaxr(v354);
    while (__stlxr(v355 - 1, v354));
    if (!v355)
    {
      ((void (*)(std::__shared_weak_count *))v353->__on_zero_shared)(v353);
      std::__shared_weak_count::__release_weak(v353);
      if ((SHIBYTE(v396) & 0x80000000) == 0)
        goto LABEL_428;
      goto LABEL_427;
    }
  }
  if (SHIBYTE(v396) < 0)
LABEL_427:
    operator delete(v395[0]);
LABEL_428:
  sub_20EFDC0C0((uint64_t)v410);
  v356 = v408;
  if (!v408)
    goto LABEL_432;
  v357 = (unint64_t *)&v408->__shared_owners_;
  do
    v358 = __ldaxr(v357);
  while (__stlxr(v358 - 1, v357));
  if (v358)
  {
LABEL_432:
    if ((SHIBYTE(__dst[2]) & 0x80000000) == 0)
      goto LABEL_434;
    goto LABEL_433;
  }
  ((void (*)(std::__shared_weak_count *))v356->__on_zero_shared)(v356);
  std::__shared_weak_count::__release_weak(v356);
  if (SHIBYTE(__dst[2]) < 0)
LABEL_433:
    operator delete(__dst[0]);
LABEL_434:
  v359 = v421;
  if (v421)
  {
    v360 = (unint64_t *)&v421->__shared_owners_;
    do
      v361 = __ldaxr(v360);
    while (__stlxr(v361 - 1, v360));
    if (!v361)
    {
      ((void (*)(std::__shared_weak_count *))v359->__on_zero_shared)(v359);
      std::__shared_weak_count::__release_weak(v359);
    }
  }
}

void sub_20EFD454C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,char a34,uint64_t a35,void *a36,uint64_t a37,int a38,__int16 a39,char a40,char a41,uint64_t a42,char a43,uint64_t a44,void *a45,uint64_t a46,int a47,__int16 a48,char a49,char a50,char a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a72;
  void *a73;
  char a74;
  char a75;

  sub_20EFDB930((uint64_t)&STACK[0x510]);
  sub_20E9AF634((uint64_t)&a25);
  if (a32 < 0)
    operator delete(__p);
  sub_20EFDBB14((uint64_t)&STACK[0x5D0]);
  sub_20E9AF634((uint64_t)&a34);
  if (a41 < 0)
    operator delete(a36);
  sub_20EFDBCF8((uint64_t)&a51);
  sub_20E9AF634((uint64_t)&a43);
  if (a50 < 0)
    operator delete(a45);
  sub_20EFDBEDC((uint64_t)&a75);
  sub_20E9AF634((uint64_t)&a72);
  if (a74 < 0)
    operator delete(a73);
  sub_20ED217F4((uint64_t)&STACK[0x2B8]);
  sub_20E9AF634((uint64_t)&STACK[0x290]);
  if (SLOBYTE(STACK[0x2B7]) < 0)
    operator delete((void *)STACK[0x2A0]);
  sub_20EFDC0C0((uint64_t)&STACK[0x388]);
  sub_20E9AF634((uint64_t)&STACK[0x360]);
  if ((SLOBYTE(STACK[0x387]) & 0x80000000) == 0)
  {
    sub_20E9AF634((uint64_t)&STACK[0x430]);
    _Unwind_Resume(a1);
  }
  operator delete((void *)STACK[0x370]);
  sub_20E9AF634((uint64_t)&STACK[0x430]);
  _Unwind_Resume(a1);
}

void sub_20EFD4918()
{
  std::__shared_weak_count *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  if (v0)
  {
    std::__shared_weak_count::__release_weak(v0);
    sub_20E86665C(v2);
    sub_20E86665C(v1);
    if ((SLOBYTE(STACK[0x607]) & 0x80000000) == 0)
    {
LABEL_3:
      if ((SLOBYTE(STACK[0x5EF]) & 0x80000000) == 0)
      {
LABEL_5:
        sub_20E86665C((uint64_t)&STACK[0x450]);
        sub_20E86665C((uint64_t)&STACK[0x510]);
        sub_20E9AF634(v3 - 144);
        JUMPOUT(0x20EFD4860);
      }
LABEL_4:
      operator delete((void *)STACK[0x5D8]);
      goto LABEL_5;
    }
  }
  else
  {
    sub_20E86665C(v2);
    sub_20E86665C(v1);
    if ((SLOBYTE(STACK[0x607]) & 0x80000000) == 0)
      goto LABEL_3;
  }
  operator delete((void *)STACK[0x5F0]);
  if ((SLOBYTE(STACK[0x5EF]) & 0x80000000) == 0)
    goto LABEL_5;
  goto LABEL_4;
}

void sub_20EFD49A0()
{
  void *v0;
  uint64_t v1;
  int v2;
  uint64_t v3;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  sub_20E9AF634((uint64_t)&STACK[0x510]);
  sub_20E9AF634((uint64_t)&STACK[0x450]);
  sub_20E9AF634(v3 - 144);
  if (v2 < 0)
    operator delete(v0);
  JUMPOUT(0x20EFD4860);
}

void sub_20EFD4A60(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,void *__p,uint64_t a44,int a45,__int16 a46,char a47,char a48,void *a49,uint64_t a50,int a51,__int16 a52,char a53,char a54)
{
  std::__shared_weak_count *v54;
  uint64_t v55;
  uint64_t v56;

  if (v54)
  {
    std::__shared_weak_count::__release_weak(v54);
    sub_20E86665C(v56);
    sub_20E86665C(v55);
    if ((a54 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a48 & 0x80000000) == 0)
      {
LABEL_5:
        sub_20E86665C((uint64_t)&STACK[0x510]);
        sub_20E86665C((uint64_t)&STACK[0x5D0]);
        sub_20E9AF634((uint64_t)&STACK[0x450]);
        JUMPOUT(0x20EFD4880);
      }
LABEL_4:
      operator delete(__p);
      goto LABEL_5;
    }
  }
  else
  {
    sub_20E86665C(v56);
    sub_20E86665C(v55);
    if ((a54 & 0x80000000) == 0)
      goto LABEL_3;
  }
  operator delete(a49);
  if ((a48 & 0x80000000) == 0)
    goto LABEL_5;
  goto LABEL_4;
}

void sub_20EFD4AE8()
{
  void *v0;
  uint64_t v1;
  int v2;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  sub_20E9AF634((uint64_t)&STACK[0x5D0]);
  sub_20E9AF634((uint64_t)&STACK[0x510]);
  sub_20E9AF634((uint64_t)&STACK[0x450]);
  if (v2 < 0)
    operator delete(v0);
  JUMPOUT(0x20EFD4880);
}

void sub_20EFD4BA8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,char a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  void *__p;
  char a73;
  std::__shared_weak_count *v73;
  uint64_t v74;
  uint64_t v75;

  if (v73)
  {
    std::__shared_weak_count::__release_weak(v73);
    sub_20E86665C(v75);
    sub_20E86665C(v74);
    if ((SLOBYTE(STACK[0x217]) & 0x80000000) == 0)
    {
LABEL_3:
      if ((a73 & 0x80000000) == 0)
      {
LABEL_5:
        sub_20E86665C((uint64_t)&STACK[0x5D0]);
        sub_20E86665C((uint64_t)&a42);
        sub_20E9AF634((uint64_t)&STACK[0x510]);
        JUMPOUT(0x20EFD48A0);
      }
LABEL_4:
      operator delete(__p);
      goto LABEL_5;
    }
  }
  else
  {
    sub_20E86665C(v75);
    sub_20E86665C(v74);
    if ((SLOBYTE(STACK[0x217]) & 0x80000000) == 0)
      goto LABEL_3;
  }
  operator delete((void *)STACK[0x200]);
  if ((a73 & 0x80000000) == 0)
    goto LABEL_5;
  goto LABEL_4;
}

void sub_20EFD4C30(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,char a42)
{
  void *v42;
  uint64_t v43;
  int v44;

  (*(void (**)(uint64_t))(*(_QWORD *)v43 + 8))(v43);
  sub_20E9AF634((uint64_t)&a42);
  sub_20E9AF634((uint64_t)&STACK[0x5D0]);
  sub_20E9AF634((uint64_t)&STACK[0x510]);
  if (v44 < 0)
    operator delete(v42);
  JUMPOUT(0x20EFD48A0);
}

void sub_20EFD4CF0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,void *__p,uint64_t a43,int a44,__int16 a45,char a46,char a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  void *a72;
  char a73;

  sub_20E86665C((uint64_t)&STACK[0x510]);
  sub_20E86665C((uint64_t)&STACK[0x5D0]);
  sub_20E9AF634((uint64_t)&STACK[0x450]);
  if (a47 < 0)
  {
    operator delete(__p);
    if ((a73 & 0x80000000) == 0)
      goto LABEL_6;
  }
  else if ((a73 & 0x80000000) == 0)
  {
    goto LABEL_6;
  }
  operator delete(a72);
LABEL_6:
  JUMPOUT(0x20EFD48C0);
}

void sub_20EFD4DE8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,char a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a69;
  std::__shared_weak_count *v69;
  uint64_t v70;
  uint64_t v71;

  if (v69)
  {
    std::__shared_weak_count::__release_weak(v69);
    sub_20E86665C(v71);
    sub_20E86665C(v70);
    if ((SLOBYTE(STACK[0x3BF]) & 0x80000000) == 0)
    {
LABEL_3:
      if ((SLOBYTE(STACK[0x3A7]) & 0x80000000) == 0)
      {
LABEL_5:
        sub_20E86665C((uint64_t)&a69);
        sub_20E86665C((uint64_t)&STACK[0x2B8]);
        sub_20E9AF634((uint64_t)&a42);
        JUMPOUT(0x20EFD48E0);
      }
LABEL_4:
      operator delete((void *)STACK[0x390]);
      goto LABEL_5;
    }
  }
  else
  {
    sub_20E86665C(v71);
    sub_20E86665C(v70);
    if ((SLOBYTE(STACK[0x3BF]) & 0x80000000) == 0)
      goto LABEL_3;
  }
  operator delete((void *)STACK[0x3A8]);
  if ((SLOBYTE(STACK[0x3A7]) & 0x80000000) == 0)
    goto LABEL_5;
  goto LABEL_4;
}

void sub_20EFD4E70(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,char a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a69;
  void *v69;
  uint64_t v70;
  int v71;

  (*(void (**)(uint64_t))(*(_QWORD *)v70 + 8))(v70);
  sub_20E9AF634((uint64_t)&STACK[0x2B8]);
  sub_20E9AF634((uint64_t)&a69);
  sub_20E9AF634((uint64_t)&a42);
  if (v71 < 0)
    operator delete(v69);
  JUMPOUT(0x20EFD48E0);
}

void sub_20EFD4F30(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void sub_20EFD4F48(uint64_t a1)
{
  sub_20EFDC2A4(a1);
  JUMPOUT(0x212BC6398);
}

void sub_20EFD4F84(uint64_t a1)
{
  sub_20EFDC0C0(a1);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20EFD4FA8(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_24C9F5420;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_20EFD4FE0(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_24C9F5420;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x212BC6398);
}

void sub_20EFD5028(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  uint64_t (**v12)();
  uint64_t v13;
  uint64_t v14;
  std::__shared_weak_count *v15;

  v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3)
  {
    v5 = std::__shared_weak_count::lock(v3);
    v15 = v5;
    if (v5)
    {
      v6 = v5;
      v7 = *(_QWORD *)(a1 + 8);
      v14 = v7;
      if (v7)
      {
        v8 = *(_QWORD *)(a2 + 8);
        *(_QWORD *)(a2 + 8) = 0;
        v12 = &off_24C9F2B80;
        v13 = v8;
        (*(void (**)(uint64_t, uint64_t (***)()))(*(_QWORD *)v7 + 16))(v7, &v12);
        v9 = v13;
        v12 = &off_24C9F2B80;
        v13 = 0;
        if (v9)
          (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
      }
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v11 = __ldaxr(p_shared_owners);
      while (__stlxr(v11 - 1, p_shared_owners));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
}

void sub_20EFD50FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  if (a3)
    (*(void (**)(uint64_t))(*(_QWORD *)a3 + 8))(a3);
  sub_20E86665C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20EFD5128(uint64_t a1)
{
  sub_20EFDBEDC(a1);
  JUMPOUT(0x212BC6398);
}

void sub_20EFD514C(uint64_t a1)
{
  sub_20EFDBCF8(a1);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20EFD5170(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_24C9F54B8;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_20EFD51A8(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_24C9F54B8;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x212BC6398);
}

void sub_20EFD51F0(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  uint64_t (**v12)();
  uint64_t v13;
  uint64_t v14;
  std::__shared_weak_count *v15;

  v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3)
  {
    v5 = std::__shared_weak_count::lock(v3);
    v15 = v5;
    if (v5)
    {
      v6 = v5;
      v7 = *(_QWORD *)(a1 + 8);
      v14 = v7;
      if (v7)
      {
        v8 = *(_QWORD *)(a2 + 8);
        *(_QWORD *)(a2 + 8) = 0;
        v12 = &off_24C9CC570;
        v13 = v8;
        (*(void (**)(uint64_t, uint64_t (***)()))(*(_QWORD *)v7 + 16))(v7, &v12);
        v9 = v13;
        v12 = &off_24C9CC570;
        v13 = 0;
        if (v9)
          (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
      }
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v11 = __ldaxr(p_shared_owners);
      while (__stlxr(v11 - 1, p_shared_owners));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
}

void sub_20EFD52C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  if (a3)
    (*(void (**)(uint64_t))(*(_QWORD *)a3 + 8))(a3);
  sub_20E86665C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20EFD52F0(uint64_t a1)
{
  sub_20EFDBB14(a1);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20EFD5314(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_24C9F5520;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_20EFD534C(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_24C9F5520;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x212BC6398);
}

void sub_20EFD5394(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  uint64_t (**v12)();
  uint64_t v13;
  uint64_t v14;
  std::__shared_weak_count *v15;

  v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3)
  {
    v5 = std::__shared_weak_count::lock(v3);
    v15 = v5;
    if (v5)
    {
      v6 = v5;
      v7 = *(_QWORD *)(a1 + 8);
      v14 = v7;
      if (v7)
      {
        v8 = *(_QWORD *)(a2 + 8);
        *(_QWORD *)(a2 + 8) = 0;
        v12 = &off_24C9B4668;
        v13 = v8;
        (*(void (**)(uint64_t, uint64_t (***)()))(*(_QWORD *)v7 + 16))(v7, &v12);
        v9 = v13;
        v12 = &off_24C9B4668;
        v13 = 0;
        if (v9)
          (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
      }
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v11 = __ldaxr(p_shared_owners);
      while (__stlxr(v11 - 1, p_shared_owners));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
}

void sub_20EFD5468(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  if (a3)
    (*(void (**)(uint64_t))(*(_QWORD *)a3 + 8))(a3);
  sub_20E86665C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20EFD5494(uint64_t a1)
{
  sub_20EFDB930(a1);
  JUMPOUT(0x212BC6398);
}

void sub_20EFD54B8(uint64_t a1)
{
  sub_20EFDB74C(a1);
  JUMPOUT(0x212BC6398);
}

void sub_20EFD54E0(uint64_t a1)
{
  sub_20EFD5C38(a1);
  JUMPOUT(0x212BC6398);
}

void sub_20EFD5504(uint64_t *a1, uint64_t a2)
{
  std::recursive_mutex *v4;
  uint64_t v5;
  char v6;

  if ((*(unsigned int (**)(uint64_t *))(*a1 + 48))(a1))
  {
    v4 = (std::recursive_mutex *)a1[9];
    if (!v4)
    {
      if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/SynchronousProcessor.h", 177, (uint64_t)"sync_", 5, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
        abort();
      }
      v4 = (std::recursive_mutex *)a1[9];
    }
    std::recursive_mutex::lock(v4);
    LOBYTE(v5) = 0;
    v6 = 0;
    sub_20EFD5D94(a1 + 11, a2, &v5);
    if (v6)
      sub_20EFD6158(&v5);
    std::recursive_mutex::unlock(v4);
  }
}

void sub_20EFD55C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  std::recursive_mutex *v10;

  if (a10)
    sub_20EFD6158(&a9);
  std::recursive_mutex::unlock(v10);
  _Unwind_Resume(a1);
}

void sub_20EFD55E8(uint64_t *a1, uint64_t a2, uint64_t *a3)
{
  std::recursive_mutex *v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  std::string *v11;
  std::runtime_error *exception;
  std::runtime_error *v13;
  uint64_t v14;
  char v15;
  std::string v16;
  std::runtime_error v17;
  _QWORD v18[4];
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  if (((*(uint64_t (**)(uint64_t *))(*a1 + 48))(a1) & 1) == 0)
  {
    v18[0] = "Invalid operation. Interface is disabled for ";
    v18[1] = 45;
    v9 = a1[6];
    v8 = a1 + 6;
    v7 = (_QWORD *)v9;
    v10 = *((unsigned __int8 *)v8 + 23);
    if ((v10 & 0x80u) != 0)
      v10 = v8[1];
    else
      v7 = v8;
    v18[2] = v7;
    v18[3] = v10;
    sub_20E8778D4((uint64_t)v18, (uint64_t)&v19, 0, 0, &v16);
    if ((v16.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v11 = &v16;
    else
      v11 = (std::string *)v16.__r_.__value_.__r.__words[0];
    std::runtime_error::runtime_error(&v17, (const char *)v11);
    v17.__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v13 = std::runtime_error::runtime_error(exception, &v17);
    v13->__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    __cxa_throw(v13, (struct type_info *)&unk_24CA1E2D0, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  v6 = (std::recursive_mutex *)a1[9];
  if (!v6)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/SynchronousProcessor.h", 211, (uint64_t)"sync_", 5, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v6 = (std::recursive_mutex *)a1[9];
  }
  std::recursive_mutex::lock(v6);
  v14 = *a3;
  *a3 = 0;
  v15 = 1;
  sub_20EFD5D94(a1 + 11, a2, &v14);
  if (v15)
    sub_20EFD6158(&v14);
  std::recursive_mutex::unlock(v6);
}

void sub_20EFD5780(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, std::runtime_error a18, std::exception_ptr a19, std::exception_ptr a20)
{
  std::__assoc_sub_state **v20;
  std::__assoc_sub_state *v21;
  std::exception_ptr v22;

  if (a2)
  {
    __cxa_begin_catch(exception_object);
    std::current_exception();
    __cxa_end_catch();
    v21 = *v20;
    if (v21)
    {
      std::exception_ptr::exception_ptr(&a20, &a19);
      v22.__ptr_ = &a20;
      std::__assoc_sub_state::set_exception(v21, v22);
      std::exception_ptr::~exception_ptr(&a20);
      std::exception_ptr::~exception_ptr(&a19);
      std::runtime_error::~runtime_error(&a18);
      if (a17 < 0)
        operator delete(__p);
      JUMPOUT(0x20EFD56ACLL);
    }
    sub_20E96CE78(3u);
  }
  _Unwind_Resume(exception_object);
}

void sub_20EFD57F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, std::runtime_error a18, std::exception_ptr a19, std::exception_ptr a20)
{
  std::exception_ptr::~exception_ptr(&a19);
  std::runtime_error::~runtime_error(&a18);
  if (a17 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void sub_20EFD5854(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, __int16 a11, char a12, char a13)
{
  std::recursive_mutex *v13;

  if ((_BYTE)a11)
    sub_20EFD6158(&a10);
  std::recursive_mutex::unlock(v13);
  _Unwind_Resume(a1);
}

void sub_20EFD5878(uint64_t a1)
{
  std::recursive_mutex *v1;
  std::recursive_mutex *v3;

  v1 = *(std::recursive_mutex **)(a1 + 72);
  if (v1)
  {
    std::recursive_mutex::lock(*(std::recursive_mutex **)(a1 + 72));
    std::recursive_mutex::unlock(v1);
  }
  else
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/SynchronousProcessor.h", 138, (uint64_t)"sync_", 5, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v3 = *(std::recursive_mutex **)(a1 + 72);
    std::recursive_mutex::lock(v3);
    std::recursive_mutex::unlock(v3);
  }
}

void sub_20EFD58FC(uint64_t a1, uint64_t a2)
{
  std::recursive_mutex *v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;

  v4 = *(std::recursive_mutex **)(a1 + 72);
  if (!v4)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/SynchronousProcessor.h", 148, (uint64_t)"sync_", 5, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v4 = *(std::recursive_mutex **)(a1 + 72);
  }
  std::recursive_mutex::lock(v4);
  v5 = operator new(0x20uLL);
  v6 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v5[2] = &off_24C9F2B80;
  v5[3] = v6;
  v8 = *(_QWORD *)(a1 + 96);
  v7 = (_QWORD *)(a1 + 96);
  *v5 = v8;
  v5[1] = v7;
  *(_QWORD *)(v8 + 8) = v5;
  *v7 = v5;
  ++v7[2];
  std::recursive_mutex::unlock(v4);
}

void sub_20EFD59AC(_Unwind_Exception *a1)
{
  std::recursive_mutex *v1;

  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_20EFD59C0(uint64_t a1)
{
  std::recursive_mutex *v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;

  v2 = *(std::recursive_mutex **)(a1 + 72);
  if (!v2)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/SynchronousProcessor.h", 159, (uint64_t)"sync_", 5, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v2 = *(std::recursive_mutex **)(a1 + 72);
  }
  std::recursive_mutex::lock(v2);
  v3 = operator new(0x18uLL);
  v5 = *(_QWORD *)(a1 + 120);
  v4 = (_QWORD *)(a1 + 120);
  *v3 = v5;
  v3[1] = v4;
  *(_QWORD *)(v5 + 8) = v3;
  *v4 = v3;
  ++v4[2];
  std::recursive_mutex::unlock(v2);
}

void sub_20EFD5A50(_Unwind_Exception *a1)
{
  std::recursive_mutex *v1;

  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_20EFD5A64(uint64_t a1@<X0>, int64x2_t *a2@<X8>)
{
  std::recursive_mutex *v4;

  v4 = *(std::recursive_mutex **)(a1 + 72);
  std::recursive_mutex::lock(v4);
  sub_20EFD6280(a2, a1 + 96);
  std::recursive_mutex::unlock(v4);
}

void sub_20EFD5AA8(_Unwind_Exception *a1)
{
  std::recursive_mutex *v1;

  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_20EFD5ABC(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  std::recursive_mutex *v3;

  v3 = *(std::recursive_mutex **)(a1 + 72);
  std::recursive_mutex::lock(v3);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  std::recursive_mutex::unlock(v3);
}

uint64_t sub_20EFD5AF0(uint64_t a1)
{
  return sub_20EFD5C38(a1 - 16);
}

void sub_20EFD5AF8(uint64_t a1)
{
  sub_20EFD5C38(a1 - 16);
  JUMPOUT(0x212BC6398);
}

void sub_20EFD5B20(uint64_t a1, uint64_t a2)
{
  sub_20EFD58FC(a1 - 16, a2);
}

void sub_20EFD5B28(uint64_t a1@<X0>, int64x2_t *a2@<X8>)
{
  std::recursive_mutex *v4;

  v4 = *(std::recursive_mutex **)(a1 + 56);
  std::recursive_mutex::lock(v4);
  sub_20EFD6280(a2, a1 + 80);
  std::recursive_mutex::unlock(v4);
}

void sub_20EFD5B6C(_Unwind_Exception *a1)
{
  std::recursive_mutex *v1;

  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_20EFD5B80(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  std::recursive_mutex *v3;

  v3 = *(std::recursive_mutex **)(a1 + 56);
  std::recursive_mutex::lock(v3);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  std::recursive_mutex::unlock(v3);
}

uint64_t sub_20EFD5BB4(uint64_t a1)
{
  return a1 - 16;
}

uint64_t sub_20EFD5BBC(uint64_t a1)
{
  return sub_20EFD5C38(a1 - 24);
}

void sub_20EFD5BC4(uint64_t a1)
{
  sub_20EFD5C38(a1 - 24);
  JUMPOUT(0x212BC6398);
}

void sub_20EFD5BEC(uint64_t a1)
{
  sub_20EFD59C0(a1 - 24);
}

uint64_t sub_20EFD5BF4(uint64_t a1)
{
  return a1 - 24;
}

void sub_20EFD5C00()
{
  JUMPOUT(0x212BC6398);
}

void sub_20EFD5C14(_QWORD *a1@<X1>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = a1[1];
  *a2 = *a1;
  a2[1] = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
}

uint64_t sub_20EFD5C38(uint64_t a1)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  std::__shared_weak_count *v15;

  *(_QWORD *)a1 = &off_24C9F55B8;
  *(_QWORD *)(a1 + 16) = &unk_24C9F5630;
  *(_QWORD *)(a1 + 24) = &unk_24C9F5670;
  if (*(_QWORD *)(a1 + 136))
  {
    v2 = (uint64_t *)(a1 + 120);
    v4 = *(_QWORD *)(a1 + 120);
    v3 = *(uint64_t **)(a1 + 128);
    v5 = *v3;
    *(_QWORD *)(v5 + 8) = *(_QWORD *)(v4 + 8);
    **(_QWORD **)(v4 + 8) = v5;
    *(_QWORD *)(a1 + 136) = 0;
    if (v3 != (uint64_t *)(a1 + 120))
    {
      do
      {
        v6 = (uint64_t *)v3[1];
        operator delete(v3);
        v3 = v6;
      }
      while (v6 != v2);
    }
  }
  if (*(_QWORD *)(a1 + 112))
  {
    v7 = *(_QWORD *)(a1 + 96);
    v8 = *(uint64_t **)(a1 + 104);
    v9 = *v8;
    *(_QWORD *)(v9 + 8) = *(_QWORD *)(v7 + 8);
    **(_QWORD **)(v7 + 8) = v9;
    *(_QWORD *)(a1 + 112) = 0;
    if (v8 != (uint64_t *)(a1 + 96))
    {
      do
      {
        v10 = (uint64_t *)v8[1];
        (*(void (**)(uint64_t *))v8[2])(v8 + 2);
        operator delete(v8);
        v8 = v10;
      }
      while (v10 != (uint64_t *)(a1 + 96));
    }
  }
  v11 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 88) = 0;
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  v12 = *(std::__shared_weak_count **)(a1 + 80);
  if (!v12)
    goto LABEL_13;
  p_shared_owners = (unint64_t *)&v12->__shared_owners_;
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (v14)
  {
LABEL_13:
    if ((*(char *)(a1 + 71) & 0x80000000) == 0)
      goto LABEL_14;
LABEL_18:
    operator delete(*(void **)(a1 + 48));
    v15 = *(std::__shared_weak_count **)(a1 + 40);
    if (!v15)
      return a1;
    goto LABEL_15;
  }
  ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
  std::__shared_weak_count::__release_weak(v12);
  if (*(char *)(a1 + 71) < 0)
    goto LABEL_18;
LABEL_14:
  v15 = *(std::__shared_weak_count **)(a1 + 40);
  if (v15)
LABEL_15:
    std::__shared_weak_count::__release_weak(v15);
  return a1;
}

void sub_20EFD5D94(uint64_t *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  unsigned __int8 v7;
  BOOL v8;
  uint64_t v9;
  uint64_t i;
  unsigned __int8 v11;
  _QWORD *v12;
  _QWORD *j;
  uint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  std::exception_ptr v22;
  uint64_t v23;
  std::__shared_weak_count *v24;

  v6 = *a1;
  if (!v6)
  {
    sub_21023D70C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/ProcessorInputMessageHandlingStrategy.h", 228, (uint64_t)"callable_", 9, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0);
    v7 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
    if ((v7 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
    {
      __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
      __cxa_guard_release(&qword_254A6DE78);
    }
    if (byte_254A6DE68)
      v8 = byte_254A6DE70 == 0;
    else
      v8 = 0;
    if (!v8)
    {
      v9 = qword_254A6DE40;
      for (i = qword_254A6DE48; v9 != i; v9 += 16)
        (*(void (**)(_QWORD, const char *, uint64_t, const char *, _QWORD))v9)(*(_QWORD *)(v9 + 8), "callable_", 9, "", 0);
    }
    v11 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
    if ((v11 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
    {
      __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
      __cxa_guard_release(&qword_254A6DE78);
    }
    if (!byte_254A6DE68)
      abort();
    qword_254A6DE58(unk_254A6DE60, "callable_", 9, "", 0);
    v6 = *a1;
  }
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v6 + 16))(&v23, v6, a2);
  v12 = a1 + 1;
  for (j = (_QWORD *)a1[2]; j != v12; j = (_QWORD *)j[1])
    (*(void (**)(_QWORD *, uint64_t *))(j[2] + 16))(j + 2, &v23);
  if (*((_BYTE *)a3 + 8))
  {
    v14 = *a3;
    if (!v14)
      sub_20E96CE78(3u);
    std::mutex::lock((std::mutex *)(v14 + 24));
    if ((*(_BYTE *)(v14 + 136) & 1) != 0
      || (v22.__ptr_ = 0, v15 = *(_QWORD *)(v14 + 16), std::exception_ptr::~exception_ptr(&v22), v15))
    {
      sub_20E96CE78(2u);
    }
    v16 = v24;
    *(_QWORD *)(v14 + 144) = v23;
    *(_QWORD *)(v14 + 152) = v16;
    if (v16)
    {
      p_shared_owners = (unint64_t *)&v16->__shared_owners_;
      do
        v18 = __ldxr(p_shared_owners);
      while (__stxr(v18 + 1, p_shared_owners));
    }
    *(_DWORD *)(v14 + 136) |= 5u;
    std::condition_variable::notify_all((std::condition_variable *)(v14 + 88));
    std::mutex::unlock((std::mutex *)(v14 + 24));
  }
  v19 = v24;
  if (v24)
  {
    v20 = (unint64_t *)&v24->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
}

void sub_20EFD6050(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t *a12, uint64_t a13, int a14, __int16 a15, char a16, unsigned __int8 a17, char a18)
{
  std::mutex *v18;
  uint64_t *v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;

  std::mutex::unlock(v18);
  sub_20E86665C((uint64_t)&a18);
  if (a2 == 1)
  {
    v21 = (uint64_t *)__cxa_begin_catch(a1);
    v22 = *v21;
    a11 = *(_QWORD *)(*(_QWORD *)(*v21 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL;
    a10 = (*(uint64_t (**)(void))(v22 + 16))();
    sub_20E9B0CC4("Caught unexpected exception of type: ", (const char *)&a11, "\n", "message: ", (const char *)&a10, "\n");
    if ((a17 & 0x80u) == 0)
      v23 = (uint64_t *)&a12;
    else
      v23 = a12;
    if ((a17 & 0x80u) == 0)
      v24 = a17;
    else
      v24 = a13;
    sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/ProcessorInputMessageHandlingStrategy.h", 140, (uint64_t)"", 0, (uint64_t)v23, v24, (void (*)(void **))sub_21023DDB0);
    abort();
  }
  _Unwind_Resume(a1);
}

void sub_20EFD612C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  __cxa_end_catch();
  JUMPOUT(0x20EFD614CLL);
}

uint64_t *sub_20EFD6158(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  const std::error_category *v7;
  std::logic_error *exception;
  std::logic_error *v9;
  std::logic_error v10;
  std::logic_error v11;
  std::exception_ptr v12;

  v2 = *a1;
  if (!v2)
    return a1;
  if ((*(_BYTE *)(v2 + 136) & 1) == 0)
  {
    v12.__ptr_ = 0;
    v3 = *(_QWORD *)(v2 + 16);
    std::exception_ptr::~exception_ptr(&v12);
    v2 = *a1;
    if (!v3 && *(uint64_t *)(v2 + 8) >= 1)
    {
      v7 = std::future_category();
      MEMORY[0x212BC5AF8](&v10, 4, v7);
      exception = (std::logic_error *)__cxa_allocate_exception(0x20uLL);
      v9 = std::logic_error::logic_error(exception, &v10);
      v9->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB810] + 16);
      v9[1] = v11;
      __cxa_throw(v9, MEMORY[0x24BEDB6E0], (void (*)(void *))MEMORY[0x24BEDAD80]);
    }
  }
  v4 = (unint64_t *)(v2 + 8);
  do
    v5 = __ldaxr(v4);
  while (__stlxr(v5 - 1, v4));
  if (v5)
    return a1;
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 16))(v2);
  return a1;
}

void sub_20EFD6244(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__assoc_sub_state *a10, std::logic_error a11)
{
  uint64_t v11;
  std::exception_ptr v12;

  __cxa_begin_catch(a1);
  std::current_exception();
  __cxa_end_catch();
  v12.__ptr_ = (void *)(v11 - 32);
  std::__assoc_sub_state::set_exception(a10, v12);
  std::exception_ptr::~exception_ptr((std::exception_ptr *)(v11 - 32));
  std::logic_error::~logic_error(&a11);
  JUMPOUT(0x20EFD61A0);
}

char *sub_20EFD6280(int64x2_t *a1, uint64_t a2)
{
  unint64_t v4;
  char *result;
  char *v6;
  uint64_t v7;
  int64x2_t v8;
  int64x2_t v9;
  char *v10;
  uint64_t v11;
  int64x2_t *v12;

  v4 = *(_QWORD *)(a2 + 16);
  v10 = 0;
  v9 = 0uLL;
  if (v4)
  {
    if (v4 >> 61)
      sub_20E92CED8();
    result = (char *)operator new(8 * v4);
    v6 = &result[8 * v4];
    v9.i64[0] = (uint64_t)result;
    v9.i64[1] = (uint64_t)result;
    v10 = v6;
    v7 = *(_QWORD *)(a2 + 8);
    v12 = &v9;
    if (v7 != a2)
      goto LABEL_4;
LABEL_7:
    v8 = vdupq_n_s64((unint64_t)result);
    goto LABEL_8;
  }
  v6 = 0;
  result = 0;
  v7 = *(_QWORD *)(a2 + 8);
  v12 = &v9;
  if (v7 == a2)
    goto LABEL_7;
  do
  {
LABEL_4:
    v11 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v7 + 24) + 48))(*(_QWORD *)(v7 + 24));
    result = (char *)sub_20E9B2D04((uint64_t *)&v12, &v11);
    v7 = *(_QWORD *)(v7 + 8);
  }
  while (v7 != a2);
  v8 = v9;
  v6 = v10;
LABEL_8:
  *a1 = v8;
  a1[1].i64[0] = (uint64_t)v6;
  return result;
}

void sub_20EFD635C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20EFD6380(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20EFD63A4(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t sub_20EFD63BC(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail20SynchronousProcessorINS0_IKNS1_3vio10mapping_io"
                     "15MapLocationInfoEEESA_vSA_Lb0EEEE27__shared_ptr_default_deleteISB_SB_EE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail20SynchronousProcessorINS0_IKNS1_3vio1"
                                "0mapping_io15MapLocationInfoEEESA_vSA_Lb0EEEE27__shared_ptr_default_deleteISB_SB_EE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail20SynchronousProcessorINS0_IKNS1_3vio10mapping_io15MapLocationInfoEEESA_vSA_Lb0EEEE27__shared_ptr_default_deleteISB_SB_EE"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail20SynchronousProcessorINS0_IKNS1_3vio10mapping_io15MapLocationInfoEEESA_vSA_Lb0EEEE27__shared_ptr_default_deleteISB_SB_EE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

void sub_20EFD6430()
{
  JUMPOUT(0x212BC6398);
}

void sub_20EFD6444(_QWORD *a1@<X1>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = a1[1];
  *a2 = *a1;
  a2[1] = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
}

void sub_20EFD646C(uint64_t a1)
{
  sub_20EFD6BC4(a1);
  JUMPOUT(0x212BC6398);
}

void sub_20EFD6490(uint64_t *a1, uint64_t a2)
{
  std::recursive_mutex *v4;
  uint64_t v5;
  char v6;

  if ((*(unsigned int (**)(uint64_t *))(*a1 + 48))(a1))
  {
    v4 = (std::recursive_mutex *)a1[9];
    if (!v4)
    {
      if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/SynchronousProcessor.h", 177, (uint64_t)"sync_", 5, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
        abort();
      }
      v4 = (std::recursive_mutex *)a1[9];
    }
    std::recursive_mutex::lock(v4);
    LOBYTE(v5) = 0;
    v6 = 0;
    sub_20EFD6D20(a1 + 11, a2, &v5);
    if (v6)
      sub_20EFD70E4(&v5);
    std::recursive_mutex::unlock(v4);
  }
}

void sub_20EFD654C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  std::recursive_mutex *v10;

  if (a10)
    sub_20EFD70E4(&a9);
  std::recursive_mutex::unlock(v10);
  _Unwind_Resume(a1);
}

void sub_20EFD6574(uint64_t *a1, uint64_t a2, uint64_t *a3)
{
  std::recursive_mutex *v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  std::string *v11;
  std::runtime_error *exception;
  std::runtime_error *v13;
  uint64_t v14;
  char v15;
  std::string v16;
  std::runtime_error v17;
  _QWORD v18[4];
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  if (((*(uint64_t (**)(uint64_t *))(*a1 + 48))(a1) & 1) == 0)
  {
    v18[0] = "Invalid operation. Interface is disabled for ";
    v18[1] = 45;
    v9 = a1[6];
    v8 = a1 + 6;
    v7 = (_QWORD *)v9;
    v10 = *((unsigned __int8 *)v8 + 23);
    if ((v10 & 0x80u) != 0)
      v10 = v8[1];
    else
      v7 = v8;
    v18[2] = v7;
    v18[3] = v10;
    sub_20E8778D4((uint64_t)v18, (uint64_t)&v19, 0, 0, &v16);
    if ((v16.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v11 = &v16;
    else
      v11 = (std::string *)v16.__r_.__value_.__r.__words[0];
    std::runtime_error::runtime_error(&v17, (const char *)v11);
    v17.__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v13 = std::runtime_error::runtime_error(exception, &v17);
    v13->__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    __cxa_throw(v13, (struct type_info *)&unk_24CA1E2D0, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  v6 = (std::recursive_mutex *)a1[9];
  if (!v6)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/SynchronousProcessor.h", 211, (uint64_t)"sync_", 5, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v6 = (std::recursive_mutex *)a1[9];
  }
  std::recursive_mutex::lock(v6);
  v14 = *a3;
  *a3 = 0;
  v15 = 1;
  sub_20EFD6D20(a1 + 11, a2, &v14);
  if (v15)
    sub_20EFD70E4(&v14);
  std::recursive_mutex::unlock(v6);
}

void sub_20EFD670C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, std::runtime_error a18, std::exception_ptr a19, std::exception_ptr a20)
{
  std::__assoc_sub_state **v20;
  std::__assoc_sub_state *v21;
  std::exception_ptr v22;

  if (a2)
  {
    __cxa_begin_catch(exception_object);
    std::current_exception();
    __cxa_end_catch();
    v21 = *v20;
    if (v21)
    {
      std::exception_ptr::exception_ptr(&a20, &a19);
      v22.__ptr_ = &a20;
      std::__assoc_sub_state::set_exception(v21, v22);
      std::exception_ptr::~exception_ptr(&a20);
      std::exception_ptr::~exception_ptr(&a19);
      std::runtime_error::~runtime_error(&a18);
      if (a17 < 0)
        operator delete(__p);
      JUMPOUT(0x20EFD6638);
    }
    sub_20E96CE78(3u);
  }
  _Unwind_Resume(exception_object);
}

void sub_20EFD6780(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, std::runtime_error a18, std::exception_ptr a19, std::exception_ptr a20)
{
  std::exception_ptr::~exception_ptr(&a19);
  std::runtime_error::~runtime_error(&a18);
  if (a17 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void sub_20EFD67E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, __int16 a11, char a12, char a13)
{
  std::recursive_mutex *v13;

  if ((_BYTE)a11)
    sub_20EFD70E4(&a10);
  std::recursive_mutex::unlock(v13);
  _Unwind_Resume(a1);
}

void sub_20EFD6804(uint64_t a1)
{
  std::recursive_mutex *v1;
  std::recursive_mutex *v3;

  v1 = *(std::recursive_mutex **)(a1 + 72);
  if (v1)
  {
    std::recursive_mutex::lock(*(std::recursive_mutex **)(a1 + 72));
    std::recursive_mutex::unlock(v1);
  }
  else
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/SynchronousProcessor.h", 138, (uint64_t)"sync_", 5, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v3 = *(std::recursive_mutex **)(a1 + 72);
    std::recursive_mutex::lock(v3);
    std::recursive_mutex::unlock(v3);
  }
}

void sub_20EFD6888(uint64_t a1, uint64_t a2)
{
  std::recursive_mutex *v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;

  v4 = *(std::recursive_mutex **)(a1 + 72);
  if (!v4)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/SynchronousProcessor.h", 148, (uint64_t)"sync_", 5, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v4 = *(std::recursive_mutex **)(a1 + 72);
  }
  std::recursive_mutex::lock(v4);
  v5 = operator new(0x20uLL);
  v6 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v5[2] = &off_24C9B4748;
  v5[3] = v6;
  v8 = *(_QWORD *)(a1 + 96);
  v7 = (_QWORD *)(a1 + 96);
  *v5 = v8;
  v5[1] = v7;
  *(_QWORD *)(v8 + 8) = v5;
  *v7 = v5;
  ++v7[2];
  std::recursive_mutex::unlock(v4);
}

void sub_20EFD6938(_Unwind_Exception *a1)
{
  std::recursive_mutex *v1;

  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_20EFD694C(uint64_t a1)
{
  std::recursive_mutex *v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;

  v2 = *(std::recursive_mutex **)(a1 + 72);
  if (!v2)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/SynchronousProcessor.h", 159, (uint64_t)"sync_", 5, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v2 = *(std::recursive_mutex **)(a1 + 72);
  }
  std::recursive_mutex::lock(v2);
  v3 = operator new(0x18uLL);
  v5 = *(_QWORD *)(a1 + 120);
  v4 = (_QWORD *)(a1 + 120);
  *v3 = v5;
  v3[1] = v4;
  *(_QWORD *)(v5 + 8) = v3;
  *v4 = v3;
  ++v4[2];
  std::recursive_mutex::unlock(v2);
}

void sub_20EFD69DC(_Unwind_Exception *a1)
{
  std::recursive_mutex *v1;

  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_20EFD69F0(uint64_t a1@<X0>, int64x2_t *a2@<X8>)
{
  std::recursive_mutex *v4;

  v4 = *(std::recursive_mutex **)(a1 + 72);
  std::recursive_mutex::lock(v4);
  sub_20EFD720C(a2, a1 + 96);
  std::recursive_mutex::unlock(v4);
}

void sub_20EFD6A34(_Unwind_Exception *a1)
{
  std::recursive_mutex *v1;

  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_20EFD6A48(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  std::recursive_mutex *v3;

  v3 = *(std::recursive_mutex **)(a1 + 72);
  std::recursive_mutex::lock(v3);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  std::recursive_mutex::unlock(v3);
}

uint64_t sub_20EFD6A7C(uint64_t a1)
{
  return sub_20EFD6BC4(a1 - 16);
}

void sub_20EFD6A84(uint64_t a1)
{
  sub_20EFD6BC4(a1 - 16);
  JUMPOUT(0x212BC6398);
}

void sub_20EFD6AAC(uint64_t a1, uint64_t a2)
{
  sub_20EFD6888(a1 - 16, a2);
}

void sub_20EFD6AB4(uint64_t a1@<X0>, int64x2_t *a2@<X8>)
{
  std::recursive_mutex *v4;

  v4 = *(std::recursive_mutex **)(a1 + 56);
  std::recursive_mutex::lock(v4);
  sub_20EFD720C(a2, a1 + 80);
  std::recursive_mutex::unlock(v4);
}

void sub_20EFD6AF8(_Unwind_Exception *a1)
{
  std::recursive_mutex *v1;

  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_20EFD6B0C(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  std::recursive_mutex *v3;

  v3 = *(std::recursive_mutex **)(a1 + 56);
  std::recursive_mutex::lock(v3);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  std::recursive_mutex::unlock(v3);
}

uint64_t sub_20EFD6B40(uint64_t a1)
{
  return a1 - 16;
}

uint64_t sub_20EFD6B48(uint64_t a1)
{
  return sub_20EFD6BC4(a1 - 24);
}

void sub_20EFD6B50(uint64_t a1)
{
  sub_20EFD6BC4(a1 - 24);
  JUMPOUT(0x212BC6398);
}

void sub_20EFD6B78(uint64_t a1)
{
  sub_20EFD694C(a1 - 24);
}

uint64_t sub_20EFD6B80(uint64_t a1)
{
  return a1 - 24;
}

void sub_20EFD6B8C()
{
  JUMPOUT(0x212BC6398);
}

void sub_20EFD6BA0(_QWORD *a1@<X1>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = a1[1];
  *a2 = *a1;
  a2[1] = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
}

uint64_t sub_20EFD6BC4(uint64_t a1)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  std::__shared_weak_count *v15;

  *(_QWORD *)a1 = &off_24C9F5838;
  *(_QWORD *)(a1 + 16) = &unk_24C9F58B0;
  *(_QWORD *)(a1 + 24) = &unk_24C9F58F0;
  if (*(_QWORD *)(a1 + 136))
  {
    v2 = (uint64_t *)(a1 + 120);
    v4 = *(_QWORD *)(a1 + 120);
    v3 = *(uint64_t **)(a1 + 128);
    v5 = *v3;
    *(_QWORD *)(v5 + 8) = *(_QWORD *)(v4 + 8);
    **(_QWORD **)(v4 + 8) = v5;
    *(_QWORD *)(a1 + 136) = 0;
    if (v3 != (uint64_t *)(a1 + 120))
    {
      do
      {
        v6 = (uint64_t *)v3[1];
        operator delete(v3);
        v3 = v6;
      }
      while (v6 != v2);
    }
  }
  if (*(_QWORD *)(a1 + 112))
  {
    v7 = *(_QWORD *)(a1 + 96);
    v8 = *(uint64_t **)(a1 + 104);
    v9 = *v8;
    *(_QWORD *)(v9 + 8) = *(_QWORD *)(v7 + 8);
    **(_QWORD **)(v7 + 8) = v9;
    *(_QWORD *)(a1 + 112) = 0;
    if (v8 != (uint64_t *)(a1 + 96))
    {
      do
      {
        v10 = (uint64_t *)v8[1];
        (*(void (**)(uint64_t *))v8[2])(v8 + 2);
        operator delete(v8);
        v8 = v10;
      }
      while (v10 != (uint64_t *)(a1 + 96));
    }
  }
  v11 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 88) = 0;
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  v12 = *(std::__shared_weak_count **)(a1 + 80);
  if (!v12)
    goto LABEL_13;
  p_shared_owners = (unint64_t *)&v12->__shared_owners_;
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (v14)
  {
LABEL_13:
    if ((*(char *)(a1 + 71) & 0x80000000) == 0)
      goto LABEL_14;
LABEL_18:
    operator delete(*(void **)(a1 + 48));
    v15 = *(std::__shared_weak_count **)(a1 + 40);
    if (!v15)
      return a1;
    goto LABEL_15;
  }
  ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
  std::__shared_weak_count::__release_weak(v12);
  if (*(char *)(a1 + 71) < 0)
    goto LABEL_18;
LABEL_14:
  v15 = *(std::__shared_weak_count **)(a1 + 40);
  if (v15)
LABEL_15:
    std::__shared_weak_count::__release_weak(v15);
  return a1;
}

void sub_20EFD6D20(uint64_t *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  unsigned __int8 v7;
  BOOL v8;
  uint64_t v9;
  uint64_t i;
  unsigned __int8 v11;
  _QWORD *v12;
  _QWORD *j;
  uint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  std::exception_ptr v22;
  uint64_t v23;
  std::__shared_weak_count *v24;

  v6 = *a1;
  if (!v6)
  {
    sub_21023D70C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/ProcessorInputMessageHandlingStrategy.h", 228, (uint64_t)"callable_", 9, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0);
    v7 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
    if ((v7 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
    {
      __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
      __cxa_guard_release(&qword_254A6DE78);
    }
    if (byte_254A6DE68)
      v8 = byte_254A6DE70 == 0;
    else
      v8 = 0;
    if (!v8)
    {
      v9 = qword_254A6DE40;
      for (i = qword_254A6DE48; v9 != i; v9 += 16)
        (*(void (**)(_QWORD, const char *, uint64_t, const char *, _QWORD))v9)(*(_QWORD *)(v9 + 8), "callable_", 9, "", 0);
    }
    v11 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
    if ((v11 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
    {
      __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
      __cxa_guard_release(&qword_254A6DE78);
    }
    if (!byte_254A6DE68)
      abort();
    qword_254A6DE58(unk_254A6DE60, "callable_", 9, "", 0);
    v6 = *a1;
  }
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v6 + 16))(&v23, v6, a2);
  v12 = a1 + 1;
  for (j = (_QWORD *)a1[2]; j != v12; j = (_QWORD *)j[1])
    (*(void (**)(_QWORD *, uint64_t *))(j[2] + 16))(j + 2, &v23);
  if (*((_BYTE *)a3 + 8))
  {
    v14 = *a3;
    if (!v14)
      sub_20E96CE78(3u);
    std::mutex::lock((std::mutex *)(v14 + 24));
    if ((*(_BYTE *)(v14 + 136) & 1) != 0
      || (v22.__ptr_ = 0, v15 = *(_QWORD *)(v14 + 16), std::exception_ptr::~exception_ptr(&v22), v15))
    {
      sub_20E96CE78(2u);
    }
    v16 = v24;
    *(_QWORD *)(v14 + 144) = v23;
    *(_QWORD *)(v14 + 152) = v16;
    if (v16)
    {
      p_shared_owners = (unint64_t *)&v16->__shared_owners_;
      do
        v18 = __ldxr(p_shared_owners);
      while (__stxr(v18 + 1, p_shared_owners));
    }
    *(_DWORD *)(v14 + 136) |= 5u;
    std::condition_variable::notify_all((std::condition_variable *)(v14 + 88));
    std::mutex::unlock((std::mutex *)(v14 + 24));
  }
  v19 = v24;
  if (v24)
  {
    v20 = (unint64_t *)&v24->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
}

void sub_20EFD6FDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t *a12, uint64_t a13, int a14, __int16 a15, char a16, unsigned __int8 a17, char a18)
{
  std::mutex *v18;
  uint64_t *v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;

  std::mutex::unlock(v18);
  sub_20E86665C((uint64_t)&a18);
  if (a2 == 1)
  {
    v21 = (uint64_t *)__cxa_begin_catch(a1);
    v22 = *v21;
    a11 = *(_QWORD *)(*(_QWORD *)(*v21 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL;
    a10 = (*(uint64_t (**)(void))(v22 + 16))();
    sub_20E9B0CC4("Caught unexpected exception of type: ", (const char *)&a11, "\n", "message: ", (const char *)&a10, "\n");
    if ((a17 & 0x80u) == 0)
      v23 = (uint64_t *)&a12;
    else
      v23 = a12;
    if ((a17 & 0x80u) == 0)
      v24 = a17;
    else
      v24 = a13;
    sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/ProcessorInputMessageHandlingStrategy.h", 140, (uint64_t)"", 0, (uint64_t)v23, v24, (void (*)(void **))sub_21023DDB0);
    abort();
  }
  _Unwind_Resume(a1);
}

void sub_20EFD70B8(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  __cxa_end_catch();
  JUMPOUT(0x20EFD70D8);
}

uint64_t *sub_20EFD70E4(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  const std::error_category *v7;
  std::logic_error *exception;
  std::logic_error *v9;
  std::logic_error v10;
  std::logic_error v11;
  std::exception_ptr v12;

  v2 = *a1;
  if (!v2)
    return a1;
  if ((*(_BYTE *)(v2 + 136) & 1) == 0)
  {
    v12.__ptr_ = 0;
    v3 = *(_QWORD *)(v2 + 16);
    std::exception_ptr::~exception_ptr(&v12);
    v2 = *a1;
    if (!v3 && *(uint64_t *)(v2 + 8) >= 1)
    {
      v7 = std::future_category();
      MEMORY[0x212BC5AF8](&v10, 4, v7);
      exception = (std::logic_error *)__cxa_allocate_exception(0x20uLL);
      v9 = std::logic_error::logic_error(exception, &v10);
      v9->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB810] + 16);
      v9[1] = v11;
      __cxa_throw(v9, MEMORY[0x24BEDB6E0], (void (*)(void *))MEMORY[0x24BEDAD80]);
    }
  }
  v4 = (unint64_t *)(v2 + 8);
  do
    v5 = __ldaxr(v4);
  while (__stlxr(v5 - 1, v4));
  if (v5)
    return a1;
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 16))(v2);
  return a1;
}

void sub_20EFD71D0(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__assoc_sub_state *a10, std::logic_error a11)
{
  uint64_t v11;
  std::exception_ptr v12;

  __cxa_begin_catch(a1);
  std::current_exception();
  __cxa_end_catch();
  v12.__ptr_ = (void *)(v11 - 32);
  std::__assoc_sub_state::set_exception(a10, v12);
  std::exception_ptr::~exception_ptr((std::exception_ptr *)(v11 - 32));
  std::logic_error::~logic_error(&a11);
  JUMPOUT(0x20EFD712CLL);
}

char *sub_20EFD720C(int64x2_t *a1, uint64_t a2)
{
  unint64_t v4;
  char *result;
  char *v6;
  uint64_t v7;
  int64x2_t v8;
  int64x2_t v9;
  char *v10;
  uint64_t v11;
  int64x2_t *v12;

  v4 = *(_QWORD *)(a2 + 16);
  v10 = 0;
  v9 = 0uLL;
  if (v4)
  {
    if (v4 >> 61)
      sub_20E92CED8();
    result = (char *)operator new(8 * v4);
    v6 = &result[8 * v4];
    v9.i64[0] = (uint64_t)result;
    v9.i64[1] = (uint64_t)result;
    v10 = v6;
    v7 = *(_QWORD *)(a2 + 8);
    v12 = &v9;
    if (v7 != a2)
      goto LABEL_4;
LABEL_7:
    v8 = vdupq_n_s64((unint64_t)result);
    goto LABEL_8;
  }
  v6 = 0;
  result = 0;
  v7 = *(_QWORD *)(a2 + 8);
  v12 = &v9;
  if (v7 == a2)
    goto LABEL_7;
  do
  {
LABEL_4:
    v11 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v7 + 24) + 48))(*(_QWORD *)(v7 + 24));
    result = (char *)sub_20E9B2D04((uint64_t *)&v12, &v11);
    v7 = *(_QWORD *)(v7 + 8);
  }
  while (v7 != a2);
  v8 = v9;
  v6 = v10;
LABEL_8:
  *a1 = v8;
  a1[1].i64[0] = (uint64_t)v6;
  return result;
}

void sub_20EFD72E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20EFD730C(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20EFD7330(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t sub_20EFD7348(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail20SynchronousProcessorINS0_IKNS1_3vio17feature_de"
                     "tection18VIOFrameDebugEventEEESA_vSA_Lb0EEEE27__shared_ptr_default_deleteISB_SB_EE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail20SynchronousProcessorINS0_IKNS1_3vio1"
                                "7feature_detection18VIOFrameDebugEventEEESA_vSA_Lb0EEEE27__shared_ptr_default_deleteISB_SB_EE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail20SynchronousProcessorINS0_IKNS1_3vio17feature_detection18VIOFrameDebugEventEEESA_vSA_Lb0EEEE27__shared_ptr_default_deleteISB_SB_EE"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail20SynchronousProcessorINS0_IKNS1_3vio17feature_detection18VIOFrameDebugEventEEESA_vSA_Lb0EEEE27__shared_ptr_default_deleteISB_SB_EE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

void sub_20EFD73BC(uint64_t a1)
{
  sub_20EFD7CC8(a1);
  JUMPOUT(0x212BC6398);
}

void sub_20EFD73E0(uint64_t *a1, uint64_t a2)
{
  std::recursive_mutex *v4;
  uint64_t v5;
  char v6;

  if ((*(unsigned int (**)(uint64_t *))(*a1 + 48))(a1))
  {
    v4 = (std::recursive_mutex *)a1[9];
    if (!v4)
    {
      if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/SynchronousProcessor.h", 177, (uint64_t)"sync_", 5, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
        abort();
      }
      v4 = (std::recursive_mutex *)a1[9];
    }
    std::recursive_mutex::lock(v4);
    LOBYTE(v5) = 0;
    v6 = 0;
    sub_20EFD7E24(a1 + 11, a2, &v5);
    if (v6)
      sub_20EFD81A0(&v5);
    std::recursive_mutex::unlock(v4);
  }
}

void sub_20EFD749C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  std::recursive_mutex *v10;

  if (a10)
    sub_20EFD81A0(&a9);
  std::recursive_mutex::unlock(v10);
  _Unwind_Resume(a1);
}

uint64_t sub_20EFD74C4(uint64_t result)
{
  atomic_store(1u, (unsigned __int8 *)(result + 8));
  return result;
}

uint64_t sub_20EFD74D4(uint64_t result)
{
  atomic_store(0, (unsigned __int8 *)(result + 8));
  return result;
}

uint64_t sub_20EFD74E0(uint64_t a1)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)(a1 + 8));
  return v1 & 1;
}

void sub_20EFD74F0(uint64_t *a1, uint64_t a2, uint64_t *a3)
{
  std::recursive_mutex *v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  std::string *v11;
  std::runtime_error *exception;
  std::runtime_error *v13;
  uint64_t v14;
  char v15;
  std::string v16;
  std::runtime_error v17;
  _QWORD v18[4];
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  if (((*(uint64_t (**)(uint64_t *))(*a1 + 48))(a1) & 1) == 0)
  {
    v18[0] = "Invalid operation. Interface is disabled for ";
    v18[1] = 45;
    v9 = a1[6];
    v8 = a1 + 6;
    v7 = (_QWORD *)v9;
    v10 = *((unsigned __int8 *)v8 + 23);
    if ((v10 & 0x80u) != 0)
      v10 = v8[1];
    else
      v7 = v8;
    v18[2] = v7;
    v18[3] = v10;
    sub_20E8778D4((uint64_t)v18, (uint64_t)&v19, 0, 0, &v16);
    if ((v16.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v11 = &v16;
    else
      v11 = (std::string *)v16.__r_.__value_.__r.__words[0];
    std::runtime_error::runtime_error(&v17, (const char *)v11);
    v17.__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v13 = std::runtime_error::runtime_error(exception, &v17);
    v13->__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    __cxa_throw(v13, (struct type_info *)&unk_24CA1E2D0, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  v6 = (std::recursive_mutex *)a1[9];
  if (!v6)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/SynchronousProcessor.h", 211, (uint64_t)"sync_", 5, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v6 = (std::recursive_mutex *)a1[9];
  }
  std::recursive_mutex::lock(v6);
  v14 = *a3;
  *a3 = 0;
  v15 = 1;
  sub_20EFD7E24(a1 + 11, a2, &v14);
  if (v15)
    sub_20EFD81A0(&v14);
  std::recursive_mutex::unlock(v6);
}

void sub_20EFD7688(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, std::runtime_error a18, std::exception_ptr a19, std::exception_ptr a20)
{
  std::__assoc_sub_state **v20;
  std::__assoc_sub_state *v21;
  std::exception_ptr v22;

  if (a2)
  {
    __cxa_begin_catch(exception_object);
    std::current_exception();
    __cxa_end_catch();
    v21 = *v20;
    if (v21)
    {
      std::exception_ptr::exception_ptr(&a20, &a19);
      v22.__ptr_ = &a20;
      std::__assoc_sub_state::set_exception(v21, v22);
      std::exception_ptr::~exception_ptr(&a20);
      std::exception_ptr::~exception_ptr(&a19);
      std::runtime_error::~runtime_error(&a18);
      if (a17 < 0)
        operator delete(__p);
      JUMPOUT(0x20EFD75B4);
    }
    sub_20E96CE78(3u);
  }
  _Unwind_Resume(exception_object);
}

void sub_20EFD76FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, std::runtime_error a18, std::exception_ptr a19, std::exception_ptr a20)
{
  std::exception_ptr::~exception_ptr(&a19);
  std::runtime_error::~runtime_error(&a18);
  if (a17 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void sub_20EFD775C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, __int16 a11, char a12, char a13)
{
  std::recursive_mutex *v13;

  if ((_BYTE)a11)
    sub_20EFD81A0(&a10);
  std::recursive_mutex::unlock(v13);
  _Unwind_Resume(a1);
}

void sub_20EFD7780(uint64_t a1)
{
  std::recursive_mutex *v1;
  std::recursive_mutex *v3;

  v1 = *(std::recursive_mutex **)(a1 + 72);
  if (v1)
  {
    std::recursive_mutex::lock(*(std::recursive_mutex **)(a1 + 72));
    std::recursive_mutex::unlock(v1);
  }
  else
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/SynchronousProcessor.h", 138, (uint64_t)"sync_", 5, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v3 = *(std::recursive_mutex **)(a1 + 72);
    std::recursive_mutex::lock(v3);
    std::recursive_mutex::unlock(v3);
  }
}

void sub_20EFD7804(uint64_t a1, uint64_t a2)
{
  std::recursive_mutex *v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;

  v4 = *(std::recursive_mutex **)(a1 + 72);
  if (v4)
  {
    std::recursive_mutex::lock(*(std::recursive_mutex **)(a1 + 72));
    if (!*(_QWORD *)(a1 + 112))
      goto LABEL_7;
    goto LABEL_6;
  }
  if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/SynchronousProcessor.h", 148, (uint64_t)"sync_", 5, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v4 = *(std::recursive_mutex **)(a1 + 72);
  std::recursive_mutex::lock(v4);
  if (*(_QWORD *)(a1 + 112))
  {
LABEL_6:
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/ProcessorInputMessageHandlingStrategy.h", 128, (uint64_t)"downstream_.empty()", 19, (uint64_t)"It is mandated that there is only one output handler for a single consumer", 74, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
  }
LABEL_7:
  v5 = operator new(0x20uLL);
  v6 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v5[2] = &off_24C9CC570;
  v5[3] = v6;
  v8 = *(_QWORD *)(a1 + 96);
  v7 = (_QWORD *)(a1 + 96);
  *v5 = v8;
  v5[1] = v7;
  *(_QWORD *)(v8 + 8) = v5;
  *v7 = v5;
  ++v7[2];
  std::recursive_mutex::unlock(v4);
}

void sub_20EFD790C(_Unwind_Exception *a1)
{
  std::recursive_mutex *v1;

  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_20EFD7920(uint64_t a1)
{
  std::recursive_mutex *v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;

  v2 = *(std::recursive_mutex **)(a1 + 72);
  if (v2)
  {
    std::recursive_mutex::lock(*(std::recursive_mutex **)(a1 + 72));
    if (!*(_QWORD *)(a1 + 136))
      goto LABEL_7;
    goto LABEL_6;
  }
  if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/SynchronousProcessor.h", 159, (uint64_t)"sync_", 5, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v2 = *(std::recursive_mutex **)(a1 + 72);
  std::recursive_mutex::lock(v2);
  if (*(_QWORD *)(a1 + 136))
  {
LABEL_6:
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/ProcessorInputMessageHandlingStrategy.h", 114, (uint64_t)"error_downstream_.empty()", 25, (uint64_t)"It is mandated that there is only one error handler for a single consumer", 73, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
  }
LABEL_7:
  v3 = operator new(0x18uLL);
  v5 = *(_QWORD *)(a1 + 120);
  v4 = (_QWORD *)(a1 + 120);
  *v3 = v5;
  v3[1] = v4;
  *(_QWORD *)(v5 + 8) = v3;
  *v4 = v3;
  ++v4[2];
  std::recursive_mutex::unlock(v2);
}

void sub_20EFD7A08(_Unwind_Exception *a1)
{
  std::recursive_mutex *v1;

  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_20EFD7A1C(uint64_t a1@<X0>, int64x2_t *a2@<X8>)
{
  std::recursive_mutex *v4;

  v4 = *(std::recursive_mutex **)(a1 + 72);
  std::recursive_mutex::lock(v4);
  sub_20EFD82C8(a2, a1 + 96);
  std::recursive_mutex::unlock(v4);
}

void sub_20EFD7A60(_Unwind_Exception *a1)
{
  std::recursive_mutex *v1;

  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_20EFD7A74(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  std::recursive_mutex *v3;

  v3 = *(std::recursive_mutex **)(a1 + 72);
  std::recursive_mutex::lock(v3);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  std::recursive_mutex::unlock(v3);
}

uint64_t sub_20EFD7AA8(uint64_t a1)
{
  return sub_20EFD7CC8(a1 - 16);
}

void sub_20EFD7AB0(uint64_t a1)
{
  sub_20EFD7CC8(a1 - 16);
  JUMPOUT(0x212BC6398);
}

void sub_20EFD7AD8(uint64_t a1, uint64_t a2)
{
  sub_20EFD7804(a1 - 16, a2);
}

void sub_20EFD7AE0(uint64_t a1@<X0>, int64x2_t *a2@<X8>)
{
  std::recursive_mutex *v4;

  v4 = *(std::recursive_mutex **)(a1 + 56);
  std::recursive_mutex::lock(v4);
  sub_20EFD82C8(a2, a1 + 80);
  std::recursive_mutex::unlock(v4);
}

void sub_20EFD7B24(_Unwind_Exception *a1)
{
  std::recursive_mutex *v1;

  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_20EFD7B38(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  std::recursive_mutex *v3;

  v3 = *(std::recursive_mutex **)(a1 + 56);
  std::recursive_mutex::lock(v3);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  std::recursive_mutex::unlock(v3);
}

uint64_t sub_20EFD7B6C(uint64_t a1)
{
  return a1 - 16;
}

uint64_t sub_20EFD7B74(uint64_t a1)
{
  return sub_20EFD7CC8(a1 - 24);
}

void sub_20EFD7B7C(uint64_t a1)
{
  sub_20EFD7CC8(a1 - 24);
  JUMPOUT(0x212BC6398);
}

void sub_20EFD7BA4(uint64_t a1)
{
  sub_20EFD7920(a1 - 24);
}

uint64_t sub_20EFD7BAC(uint64_t a1)
{
  return a1 - 24;
}

void sub_20EFD7BB8()
{
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20EFD7BCC@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  _QWORD *result;
  __int128 v4;
  uint64_t v5;
  char v6;

  LOBYTE(v4) = 0;
  v6 = 0;
  if (*(_BYTE *)(a1 + 24))
  {
    result = sub_20ECA8424(&v4, a1);
    *(_OWORD *)a2 = v4;
    *(_QWORD *)(a2 + 16) = v5;
    *(_BYTE *)(a2 + 24) = 1;
  }
  else
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 24) = 0;
  }
  return result;
}

void sub_20EFD7C44(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, char *__p, char *a10, uint64_t a11, char a12)
{
  char *v13;
  char *v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;

  if (a12 && __p)
  {
    v13 = a10;
    v14 = __p;
    if (a10 != __p)
    {
      do
      {
        v15 = (std::__shared_weak_count *)*((_QWORD *)v13 - 1);
        if (v15)
        {
          p_shared_owners = (unint64_t *)&v15->__shared_owners_;
          do
            v17 = __ldaxr(p_shared_owners);
          while (__stlxr(v17 - 1, p_shared_owners));
          if (!v17)
          {
            ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
            std::__shared_weak_count::__release_weak(v15);
          }
        }
        v13 -= 16;
      }
      while (v13 != __p);
      v14 = __p;
    }
    operator delete(v14);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20EFD7CC8(uint64_t a1)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  std::__shared_weak_count *v15;

  *(_QWORD *)a1 = &off_24C9F5A68;
  *(_QWORD *)(a1 + 16) = &unk_24C9F5AE0;
  *(_QWORD *)(a1 + 24) = &unk_24C9F5B20;
  if (*(_QWORD *)(a1 + 136))
  {
    v2 = (uint64_t *)(a1 + 120);
    v4 = *(_QWORD *)(a1 + 120);
    v3 = *(uint64_t **)(a1 + 128);
    v5 = *v3;
    *(_QWORD *)(v5 + 8) = *(_QWORD *)(v4 + 8);
    **(_QWORD **)(v4 + 8) = v5;
    *(_QWORD *)(a1 + 136) = 0;
    if (v3 != (uint64_t *)(a1 + 120))
    {
      do
      {
        v6 = (uint64_t *)v3[1];
        operator delete(v3);
        v3 = v6;
      }
      while (v6 != v2);
    }
  }
  if (*(_QWORD *)(a1 + 112))
  {
    v7 = *(_QWORD *)(a1 + 96);
    v8 = *(uint64_t **)(a1 + 104);
    v9 = *v8;
    *(_QWORD *)(v9 + 8) = *(_QWORD *)(v7 + 8);
    **(_QWORD **)(v7 + 8) = v9;
    *(_QWORD *)(a1 + 112) = 0;
    if (v8 != (uint64_t *)(a1 + 96))
    {
      do
      {
        v10 = (uint64_t *)v8[1];
        (*(void (**)(uint64_t *))v8[2])(v8 + 2);
        operator delete(v8);
        v8 = v10;
      }
      while (v10 != (uint64_t *)(a1 + 96));
    }
  }
  v11 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 88) = 0;
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  v12 = *(std::__shared_weak_count **)(a1 + 80);
  if (!v12)
    goto LABEL_13;
  p_shared_owners = (unint64_t *)&v12->__shared_owners_;
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (v14)
  {
LABEL_13:
    if ((*(char *)(a1 + 71) & 0x80000000) == 0)
      goto LABEL_14;
LABEL_18:
    operator delete(*(void **)(a1 + 48));
    v15 = *(std::__shared_weak_count **)(a1 + 40);
    if (!v15)
      return a1;
    goto LABEL_15;
  }
  ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
  std::__shared_weak_count::__release_weak(v12);
  if (*(char *)(a1 + 71) < 0)
    goto LABEL_18;
LABEL_14:
  v15 = *(std::__shared_weak_count **)(a1 + 40);
  if (v15)
LABEL_15:
    std::__shared_weak_count::__release_weak(v15);
  return a1;
}

void sub_20EFD7E24(uint64_t *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  _QWORD *v7;
  _QWORD *i;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  void *v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  std::exception_ptr v17;
  void *__p;
  char *v19;
  char v20;

  v6 = *a1;
  if (!v6)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/ProcessorInputMessageHandlingStrategy.h", 251, (uint64_t)"callable_", 9, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v6 = *a1;
  }
  (*(void (**)(void **__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v6 + 16))(&__p, v6, a2);
  if (v20)
  {
    v7 = a1 + 1;
    for (i = (_QWORD *)a1[2]; i != v7; i = (_QWORD *)i[1])
      (*(void (**)(_QWORD *, void **))(i[2] + 16))(i + 2, &__p);
  }
  if (*((_BYTE *)a3 + 8))
  {
    v9 = *a3;
    if (!*a3)
      sub_20E96CE78(3u);
    std::mutex::lock((std::mutex *)(v9 + 24));
    if ((*(_BYTE *)(v9 + 136) & 1) != 0
      || (v17.__ptr_ = 0, v10 = *(_QWORD *)(v9 + 16), std::exception_ptr::~exception_ptr(&v17), v10))
    {
      sub_20E96CE78(2u);
    }
    *(_BYTE *)(v9 + 144) = 0;
    *(_BYTE *)(v9 + 168) = 0;
    if (v20)
    {
      sub_20ECA8424((_QWORD *)(v9 + 144), (uint64_t)&__p);
      *(_BYTE *)(v9 + 168) = 1;
    }
    *(_DWORD *)(v9 + 136) |= 5u;
    std::condition_variable::notify_all((std::condition_variable *)(v9 + 88));
    std::mutex::unlock((std::mutex *)(v9 + 24));
  }
  if (v20)
  {
    v11 = (char *)__p;
    if (__p)
    {
      v12 = v19;
      v13 = __p;
      if (v19 != __p)
      {
        do
        {
          v14 = (std::__shared_weak_count *)*((_QWORD *)v12 - 1);
          if (v14)
          {
            p_shared_owners = (unint64_t *)&v14->__shared_owners_;
            do
              v16 = __ldaxr(p_shared_owners);
            while (__stlxr(v16 - 1, p_shared_owners));
            if (!v16)
            {
              ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
              std::__shared_weak_count::__release_weak(v14);
            }
          }
          v12 -= 16;
        }
        while (v12 != v11);
        v13 = __p;
      }
      v19 = v11;
      operator delete(v13);
    }
  }
}

void sub_20EFD800C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t *a12, uint64_t a13, int a14, __int16 a15, char a16, unsigned __int8 a17, char *a18)
{
  std::mutex *v18;
  void **v19;
  uint64_t v20;
  char *v23;
  char *v24;
  void *v25;
  std::__shared_weak_count *v26;
  unint64_t *p_shared_owners;
  unint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;

  v33 = v20;
  if (*(_BYTE *)(v20 + 168))
  {
    v23 = (char *)*v19;
    if (*v19)
    {
      v24 = *(char **)(v20 + 152);
      v25 = *v19;
      if (v24 != v23)
      {
        do
        {
          v26 = (std::__shared_weak_count *)*((_QWORD *)v24 - 1);
          if (v26)
          {
            p_shared_owners = (unint64_t *)&v26->__shared_owners_;
            do
              v28 = __ldaxr(p_shared_owners);
            while (__stlxr(v28 - 1, p_shared_owners));
            if (!v28)
            {
              ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
              std::__shared_weak_count::__release_weak(v26);
            }
          }
          v24 -= 16;
        }
        while (v24 != v23);
        v25 = *v19;
      }
      *(_QWORD *)(v33 + 152) = v23;
      operator delete(v25);
    }
  }
  std::mutex::unlock(v18);
  sub_20EC06BE0(&a18);
  if (a2 == 1)
  {
    v29 = (uint64_t *)__cxa_begin_catch(a1);
    v30 = *v29;
    a11 = *(_QWORD *)(*(_QWORD *)(*v29 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL;
    a10 = (*(uint64_t (**)(void))(v30 + 16))();
    sub_20E9B0CC4("Caught unexpected exception of type: ", (const char *)&a11, "\n", "message: ", (const char *)&a10, "\n");
    if ((a17 & 0x80u) == 0)
      v31 = (uint64_t *)&a12;
    else
      v31 = a12;
    if ((a17 & 0x80u) == 0)
      v32 = a17;
    else
      v32 = a13;
    sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/ProcessorInputMessageHandlingStrategy.h", 140, (uint64_t)"", 0, (uint64_t)v31, v32, (void (*)(void **))sub_21023DDB0);
    abort();
  }
  _Unwind_Resume(a1);
}

void sub_20EFD8174(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  __cxa_end_catch();
  JUMPOUT(0x20EFD8194);
}

uint64_t *sub_20EFD81A0(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  const std::error_category *v7;
  std::logic_error *exception;
  std::logic_error *v9;
  std::logic_error v10;
  std::logic_error v11;
  std::exception_ptr v12;

  v2 = *a1;
  if (!v2)
    return a1;
  if ((*(_BYTE *)(v2 + 136) & 1) == 0)
  {
    v12.__ptr_ = 0;
    v3 = *(_QWORD *)(v2 + 16);
    std::exception_ptr::~exception_ptr(&v12);
    v2 = *a1;
    if (!v3 && *(uint64_t *)(v2 + 8) >= 1)
    {
      v7 = std::future_category();
      MEMORY[0x212BC5AF8](&v10, 4, v7);
      exception = (std::logic_error *)__cxa_allocate_exception(0x20uLL);
      v9 = std::logic_error::logic_error(exception, &v10);
      v9->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB810] + 16);
      v9[1] = v11;
      __cxa_throw(v9, MEMORY[0x24BEDB6E0], (void (*)(void *))MEMORY[0x24BEDAD80]);
    }
  }
  v4 = (unint64_t *)(v2 + 8);
  do
    v5 = __ldaxr(v4);
  while (__stlxr(v5 - 1, v4));
  if (v5)
    return a1;
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 16))(v2);
  return a1;
}

void sub_20EFD828C(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__assoc_sub_state *a10, std::logic_error a11)
{
  uint64_t v11;
  std::exception_ptr v12;

  __cxa_begin_catch(a1);
  std::current_exception();
  __cxa_end_catch();
  v12.__ptr_ = (void *)(v11 - 32);
  std::__assoc_sub_state::set_exception(a10, v12);
  std::exception_ptr::~exception_ptr((std::exception_ptr *)(v11 - 32));
  std::logic_error::~logic_error(&a11);
  JUMPOUT(0x20EFD81E8);
}

char *sub_20EFD82C8(int64x2_t *a1, uint64_t a2)
{
  unint64_t v4;
  char *result;
  char *v6;
  uint64_t v7;
  int64x2_t v8;
  int64x2_t v9;
  char *v10;
  uint64_t v11;
  int64x2_t *v12;

  v4 = *(_QWORD *)(a2 + 16);
  v10 = 0;
  v9 = 0uLL;
  if (v4)
  {
    if (v4 >> 61)
      sub_20E92CED8();
    result = (char *)operator new(8 * v4);
    v6 = &result[8 * v4];
    v9.i64[0] = (uint64_t)result;
    v9.i64[1] = (uint64_t)result;
    v10 = v6;
    v7 = *(_QWORD *)(a2 + 8);
    v12 = &v9;
    if (v7 != a2)
      goto LABEL_4;
LABEL_7:
    v8 = vdupq_n_s64((unint64_t)result);
    goto LABEL_8;
  }
  v6 = 0;
  result = 0;
  v7 = *(_QWORD *)(a2 + 8);
  v12 = &v9;
  if (v7 == a2)
    goto LABEL_7;
  do
  {
LABEL_4:
    v11 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v7 + 24) + 48))(*(_QWORD *)(v7 + 24));
    result = (char *)sub_20E9B2D04((uint64_t *)&v12, &v11);
    v7 = *(_QWORD *)(v7 + 8);
  }
  while (v7 != a2);
  v8 = v9;
  v6 = v10;
LABEL_8:
  *a1 = v8;
  a1[1].i64[0] = (uint64_t)v6;
  return result;
}

void sub_20EFD83A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20EFD83C8(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20EFD83EC(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t sub_20EFD8404(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail20SynchronousProcessorINS1_3vio10mapping_io16Subm"
                     "apLoadResultENS3_14SingleConsumerIKNS7_16SubmapLoadBundleEEEvNS_8optionalISB_EELb0EEEE27__shared_pt"
                     "r_default_deleteISF_SF_EE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail20SynchronousProcessorINS1_3vio10mappi"
                                "ng_io16SubmapLoadResultENS3_14SingleConsumerIKNS7_16SubmapLoadBundleEEEvNS_8optionalISB_"
                                "EELb0EEEE27__shared_ptr_default_deleteISF_SF_EE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail20SynchronousProcessorINS1_3vio10mapping_io16SubmapLoadResultENS3_14SingleConsumerIKNS7_16SubmapLoadBundleEEEvNS_8optionalISB_EELb0EEEE27__shared_ptr_default_deleteISF_SF_EE"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail20SynchronousProcessorINS1_3vio10mapping_io16SubmapLoadResultENS3_14SingleConsumerIKNS7_16SubmapLoadBundleEEEvNS_8optionalISB_EELb0EEEE27__shared_ptr_default_deleteISF_SF_EE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

uint64_t sub_20EFD8474(uint64_t a1)
{
  std::__shared_weak_count *v2;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_20EFD84A0(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20EFD84DC@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *result;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;

  result = (_QWORD *)operator new();
  v6 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  *result = &off_24C9F5CB8;
  result[1] = v6;
  result[2] = v5;
  if (v5)
  {
    v7 = (unint64_t *)(v5 + 16);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  *a2 = result;
  return result;
}

void sub_20EFD8544(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 8);
      if (v5)
        (*(void (**)(uint64_t))(*(_QWORD *)v5 + 32))(v5);
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_20EFD85D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20EFD85E8(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 8);
      if (v5)
        (*(void (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_20EFD8678(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20EFD868C(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return 0;
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
    return 0;
  v4 = v3;
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
    v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 48))(v5);
  else
    v6 = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (v9)
    return v6;
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return v6;
}

void sub_20EFD8750(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20EFD8764(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return 0;
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
    return 0;
  v4 = v3;
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
    v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 24))(v5);
  else
    v6 = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (v9)
    return v6;
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return v6;
}

void sub_20EFD8828(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20EFD883C(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3)
  {
    v5 = std::__shared_weak_count::lock(v3);
    if (v5)
    {
      v6 = v5;
      v7 = *(_QWORD *)(a1 + 8);
      if (v7)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v7 + 16))(v7, a2);
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
}

void sub_20EFD88E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20EFD88F8(uint64_t a1)
{
  sub_20EFD906C(a1);
  JUMPOUT(0x212BC6398);
}

void sub_20EFD891C(uint64_t *a1, uint64_t a2)
{
  std::recursive_mutex *v4;
  uint64_t v5;
  char v6;

  if ((*(unsigned int (**)(uint64_t *))(*a1 + 48))(a1))
  {
    v4 = (std::recursive_mutex *)a1[9];
    if (!v4)
    {
      if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/SynchronousProcessor.h", 177, (uint64_t)"sync_", 5, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
        abort();
      }
      v4 = (std::recursive_mutex *)a1[9];
    }
    std::recursive_mutex::lock(v4);
    LOBYTE(v5) = 0;
    v6 = 0;
    sub_20EFD91C8(a1 + 11, a2, &v5);
    if (v6)
      sub_20EFD9400(&v5);
    std::recursive_mutex::unlock(v4);
  }
}

void sub_20EFD89D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  std::recursive_mutex *v10;

  if (a10)
    sub_20EFD9400(&a9);
  std::recursive_mutex::unlock(v10);
  _Unwind_Resume(a1);
}

uint64_t sub_20EFD8A00(uint64_t result)
{
  atomic_store(1u, (unsigned __int8 *)(result + 8));
  return result;
}

uint64_t sub_20EFD8A10(uint64_t result)
{
  atomic_store(0, (unsigned __int8 *)(result + 8));
  return result;
}

uint64_t sub_20EFD8A1C(uint64_t a1)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)(a1 + 8));
  return v1 & 1;
}

void sub_20EFD8A2C(uint64_t *a1, uint64_t a2, uint64_t *a3)
{
  std::recursive_mutex *v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  std::string *v11;
  std::runtime_error *exception;
  std::runtime_error *v13;
  uint64_t v14;
  char v15;
  std::string v16;
  std::runtime_error v17;
  _QWORD v18[4];
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  if (((*(uint64_t (**)(uint64_t *))(*a1 + 48))(a1) & 1) == 0)
  {
    v18[0] = "Invalid operation. Interface is disabled for ";
    v18[1] = 45;
    v9 = a1[6];
    v8 = a1 + 6;
    v7 = (_QWORD *)v9;
    v10 = *((unsigned __int8 *)v8 + 23);
    if ((v10 & 0x80u) != 0)
      v10 = v8[1];
    else
      v7 = v8;
    v18[2] = v7;
    v18[3] = v10;
    sub_20E8778D4((uint64_t)v18, (uint64_t)&v19, 0, 0, &v16);
    if ((v16.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v11 = &v16;
    else
      v11 = (std::string *)v16.__r_.__value_.__r.__words[0];
    std::runtime_error::runtime_error(&v17, (const char *)v11);
    v17.__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v13 = std::runtime_error::runtime_error(exception, &v17);
    v13->__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    __cxa_throw(v13, (struct type_info *)&unk_24CA1E2D0, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  v6 = (std::recursive_mutex *)a1[9];
  if (!v6)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/SynchronousProcessor.h", 211, (uint64_t)"sync_", 5, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v6 = (std::recursive_mutex *)a1[9];
  }
  std::recursive_mutex::lock(v6);
  v14 = *a3;
  *a3 = 0;
  v15 = 1;
  sub_20EFD91C8(a1 + 11, a2, &v14);
  if (v15)
    sub_20EFD9400(&v14);
  std::recursive_mutex::unlock(v6);
}

void sub_20EFD8BC4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, std::runtime_error a18, std::exception_ptr a19, std::exception_ptr a20)
{
  std::__assoc_sub_state **v20;
  std::__assoc_sub_state *v21;
  std::exception_ptr v22;

  if (a2)
  {
    __cxa_begin_catch(exception_object);
    std::current_exception();
    __cxa_end_catch();
    v21 = *v20;
    if (v21)
    {
      std::exception_ptr::exception_ptr(&a20, &a19);
      v22.__ptr_ = &a20;
      std::__assoc_sub_state::set_exception(v21, v22);
      std::exception_ptr::~exception_ptr(&a20);
      std::exception_ptr::~exception_ptr(&a19);
      std::runtime_error::~runtime_error(&a18);
      if (a17 < 0)
        operator delete(__p);
      JUMPOUT(0x20EFD8AF0);
    }
    sub_20E96CE78(3u);
  }
  _Unwind_Resume(exception_object);
}

void sub_20EFD8C38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, std::runtime_error a18, std::exception_ptr a19, std::exception_ptr a20)
{
  std::exception_ptr::~exception_ptr(&a19);
  std::runtime_error::~runtime_error(&a18);
  if (a17 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void sub_20EFD8C98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, __int16 a11, char a12, char a13)
{
  std::recursive_mutex *v13;

  if ((_BYTE)a11)
    sub_20EFD9400(&a10);
  std::recursive_mutex::unlock(v13);
  _Unwind_Resume(a1);
}

void sub_20EFD8CBC(uint64_t a1)
{
  std::recursive_mutex *v1;
  std::recursive_mutex *v3;

  v1 = *(std::recursive_mutex **)(a1 + 72);
  if (v1)
  {
    std::recursive_mutex::lock(*(std::recursive_mutex **)(a1 + 72));
    std::recursive_mutex::unlock(v1);
  }
  else
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/SynchronousProcessor.h", 138, (uint64_t)"sync_", 5, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v3 = *(std::recursive_mutex **)(a1 + 72);
    std::recursive_mutex::lock(v3);
    std::recursive_mutex::unlock(v3);
  }
}

void sub_20EFD8D40(uint64_t a1, uint64_t a2)
{
  std::recursive_mutex *v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;

  v4 = *(std::recursive_mutex **)(a1 + 72);
  if (!v4)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/SynchronousProcessor.h", 148, (uint64_t)"sync_", 5, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v4 = *(std::recursive_mutex **)(a1 + 72);
  }
  std::recursive_mutex::lock(v4);
  v5 = operator new(0x20uLL);
  v6 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v5[2] = &off_24C9B4668;
  v5[3] = v6;
  v8 = *(_QWORD *)(a1 + 96);
  v7 = (_QWORD *)(a1 + 96);
  *v5 = v8;
  v5[1] = v7;
  *(_QWORD *)(v8 + 8) = v5;
  *v7 = v5;
  ++v7[2];
  std::recursive_mutex::unlock(v4);
}

void sub_20EFD8DF0(_Unwind_Exception *a1)
{
  std::recursive_mutex *v1;

  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_20EFD8E04(uint64_t a1)
{
  std::recursive_mutex *v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;

  v2 = *(std::recursive_mutex **)(a1 + 72);
  if (!v2)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/SynchronousProcessor.h", 159, (uint64_t)"sync_", 5, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v2 = *(std::recursive_mutex **)(a1 + 72);
  }
  std::recursive_mutex::lock(v2);
  v3 = operator new(0x18uLL);
  v5 = *(_QWORD *)(a1 + 120);
  v4 = (_QWORD *)(a1 + 120);
  *v3 = v5;
  v3[1] = v4;
  *(_QWORD *)(v5 + 8) = v3;
  *v4 = v3;
  ++v4[2];
  std::recursive_mutex::unlock(v2);
}

void sub_20EFD8E94(_Unwind_Exception *a1)
{
  std::recursive_mutex *v1;

  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_20EFD8EA8(uint64_t a1@<X0>, int64x2_t *a2@<X8>)
{
  std::recursive_mutex *v4;

  v4 = *(std::recursive_mutex **)(a1 + 72);
  std::recursive_mutex::lock(v4);
  sub_20EFD9528(a2, a1 + 96);
  std::recursive_mutex::unlock(v4);
}

void sub_20EFD8EEC(_Unwind_Exception *a1)
{
  std::recursive_mutex *v1;

  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_20EFD8F00(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  std::recursive_mutex *v3;

  v3 = *(std::recursive_mutex **)(a1 + 72);
  std::recursive_mutex::lock(v3);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  std::recursive_mutex::unlock(v3);
}

uint64_t sub_20EFD8F34(uint64_t a1)
{
  return sub_20EFD906C(a1 - 16);
}

void sub_20EFD8F3C(uint64_t a1)
{
  sub_20EFD906C(a1 - 16);
  JUMPOUT(0x212BC6398);
}

void sub_20EFD8F64(uint64_t a1, uint64_t a2)
{
  sub_20EFD8D40(a1 - 16, a2);
}

void sub_20EFD8F6C(uint64_t a1@<X0>, int64x2_t *a2@<X8>)
{
  std::recursive_mutex *v4;

  v4 = *(std::recursive_mutex **)(a1 + 56);
  std::recursive_mutex::lock(v4);
  sub_20EFD9528(a2, a1 + 80);
  std::recursive_mutex::unlock(v4);
}

void sub_20EFD8FB0(_Unwind_Exception *a1)
{
  std::recursive_mutex *v1;

  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_20EFD8FC4(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  std::recursive_mutex *v3;

  v3 = *(std::recursive_mutex **)(a1 + 56);
  std::recursive_mutex::lock(v3);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  std::recursive_mutex::unlock(v3);
}

uint64_t sub_20EFD8FF8(uint64_t a1)
{
  return a1 - 16;
}

uint64_t sub_20EFD9000(uint64_t a1)
{
  return sub_20EFD906C(a1 - 24);
}

void sub_20EFD9008(uint64_t a1)
{
  sub_20EFD906C(a1 - 24);
  JUMPOUT(0x212BC6398);
}

void sub_20EFD9030(uint64_t a1)
{
  sub_20EFD8E04(a1 - 24);
}

uint64_t sub_20EFD9038(uint64_t a1)
{
  return a1 - 24;
}

void sub_20EFD9044()
{
  JUMPOUT(0x212BC6398);
}

__n128 sub_20EFD9058@<Q0>(__n128 *a1@<X1>, __n128 *a2@<X8>)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  a2[1].n128_u64[0] = a1[1].n128_u64[0];
  return result;
}

uint64_t sub_20EFD906C(uint64_t a1)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  std::__shared_weak_count *v15;

  *(_QWORD *)a1 = &off_24C9F5D30;
  *(_QWORD *)(a1 + 16) = &unk_24C9F5DA8;
  *(_QWORD *)(a1 + 24) = &unk_24C9F5DE8;
  if (*(_QWORD *)(a1 + 136))
  {
    v2 = (uint64_t *)(a1 + 120);
    v4 = *(_QWORD *)(a1 + 120);
    v3 = *(uint64_t **)(a1 + 128);
    v5 = *v3;
    *(_QWORD *)(v5 + 8) = *(_QWORD *)(v4 + 8);
    **(_QWORD **)(v4 + 8) = v5;
    *(_QWORD *)(a1 + 136) = 0;
    if (v3 != (uint64_t *)(a1 + 120))
    {
      do
      {
        v6 = (uint64_t *)v3[1];
        operator delete(v3);
        v3 = v6;
      }
      while (v6 != v2);
    }
  }
  if (*(_QWORD *)(a1 + 112))
  {
    v7 = *(_QWORD *)(a1 + 96);
    v8 = *(uint64_t **)(a1 + 104);
    v9 = *v8;
    *(_QWORD *)(v9 + 8) = *(_QWORD *)(v7 + 8);
    **(_QWORD **)(v7 + 8) = v9;
    *(_QWORD *)(a1 + 112) = 0;
    if (v8 != (uint64_t *)(a1 + 96))
    {
      do
      {
        v10 = (uint64_t *)v8[1];
        (*(void (**)(uint64_t *))v8[2])(v8 + 2);
        operator delete(v8);
        v8 = v10;
      }
      while (v10 != (uint64_t *)(a1 + 96));
    }
  }
  v11 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 88) = 0;
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  v12 = *(std::__shared_weak_count **)(a1 + 80);
  if (!v12)
    goto LABEL_13;
  p_shared_owners = (unint64_t *)&v12->__shared_owners_;
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (v14)
  {
LABEL_13:
    if ((*(char *)(a1 + 71) & 0x80000000) == 0)
      goto LABEL_14;
LABEL_18:
    operator delete(*(void **)(a1 + 48));
    v15 = *(std::__shared_weak_count **)(a1 + 40);
    if (!v15)
      return a1;
    goto LABEL_15;
  }
  ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
  std::__shared_weak_count::__release_weak(v12);
  if (*(char *)(a1 + 71) < 0)
    goto LABEL_18;
LABEL_14:
  v15 = *(std::__shared_weak_count **)(a1 + 40);
  if (v15)
LABEL_15:
    std::__shared_weak_count::__release_weak(v15);
  return a1;
}

void sub_20EFD91C8(uint64_t *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  _QWORD *v7;
  _QWORD *i;
  uint64_t v9;
  uint64_t v10;
  std::exception_ptr v11;
  __int128 v12;
  uint64_t v13;

  v6 = *a1;
  if (!v6)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/ProcessorInputMessageHandlingStrategy.h", 251, (uint64_t)"callable_", 9, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v6 = *a1;
  }
  (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v6 + 16))(&v12, v6, a2);
  if ((_BYTE)v13)
  {
    v7 = a1 + 1;
    for (i = (_QWORD *)a1[2]; i != v7; i = (_QWORD *)i[1])
      (*(void (**)(_QWORD *, __int128 *))(i[2] + 16))(i + 2, &v12);
  }
  if (*((_BYTE *)a3 + 8))
  {
    v9 = *a3;
    if (!v9)
      sub_20E96CE78(3u);
    std::mutex::lock((std::mutex *)(v9 + 24));
    if ((*(_BYTE *)(v9 + 136) & 1) != 0
      || (v11.__ptr_ = 0, v10 = *(_QWORD *)(v9 + 16), std::exception_ptr::~exception_ptr(&v11), v10))
    {
      sub_20E96CE78(2u);
    }
    *(_OWORD *)(v9 + 144) = v12;
    *(_QWORD *)(v9 + 160) = v13;
    *(_DWORD *)(v9 + 136) |= 5u;
    std::condition_variable::notify_all((std::condition_variable *)(v9 + 88));
    std::mutex::unlock((std::mutex *)(v9 + 24));
  }
}

void sub_20EFD9310(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t *a11, uint64_t a12, int a13, __int16 a14, char a15, unsigned __int8 a16)
{
  std::mutex *v16;
  uint64_t *v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;

  std::mutex::unlock(v16);
  if (a2 == 1)
  {
    v19 = (uint64_t *)__cxa_begin_catch(a1);
    v20 = *v19;
    a10 = *(_QWORD *)(*(_QWORD *)(*v19 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL;
    a9 = (*(uint64_t (**)(void))(v20 + 16))();
    sub_20E9B0CC4("Caught unexpected exception of type: ", (const char *)&a10, "\n", "message: ", (const char *)&a9, "\n");
    if ((a16 & 0x80u) == 0)
      v21 = (uint64_t *)&a11;
    else
      v21 = a11;
    if ((a16 & 0x80u) == 0)
      v22 = a16;
    else
      v22 = a12;
    sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/ProcessorInputMessageHandlingStrategy.h", 140, (uint64_t)"", 0, (uint64_t)v21, v22, (void (*)(void **))sub_21023DDB0);
    abort();
  }
  _Unwind_Resume(a1);
}

void sub_20EFD93D4(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  __cxa_end_catch();
  JUMPOUT(0x20EFD93F4);
}

uint64_t *sub_20EFD9400(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  const std::error_category *v7;
  std::logic_error *exception;
  std::logic_error *v9;
  std::logic_error v10;
  std::logic_error v11;
  std::exception_ptr v12;

  v2 = *a1;
  if (!v2)
    return a1;
  if ((*(_BYTE *)(v2 + 136) & 1) == 0)
  {
    v12.__ptr_ = 0;
    v3 = *(_QWORD *)(v2 + 16);
    std::exception_ptr::~exception_ptr(&v12);
    v2 = *a1;
    if (!v3 && *(uint64_t *)(v2 + 8) >= 1)
    {
      v7 = std::future_category();
      MEMORY[0x212BC5AF8](&v10, 4, v7);
      exception = (std::logic_error *)__cxa_allocate_exception(0x20uLL);
      v9 = std::logic_error::logic_error(exception, &v10);
      v9->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB810] + 16);
      v9[1] = v11;
      __cxa_throw(v9, MEMORY[0x24BEDB6E0], (void (*)(void *))MEMORY[0x24BEDAD80]);
    }
  }
  v4 = (unint64_t *)(v2 + 8);
  do
    v5 = __ldaxr(v4);
  while (__stlxr(v5 - 1, v4));
  if (v5)
    return a1;
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 16))(v2);
  return a1;
}

void sub_20EFD94EC(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__assoc_sub_state *a10, std::logic_error a11)
{
  uint64_t v11;
  std::exception_ptr v12;

  __cxa_begin_catch(a1);
  std::current_exception();
  __cxa_end_catch();
  v12.__ptr_ = (void *)(v11 - 32);
  std::__assoc_sub_state::set_exception(a10, v12);
  std::exception_ptr::~exception_ptr((std::exception_ptr *)(v11 - 32));
  std::logic_error::~logic_error(&a11);
  JUMPOUT(0x20EFD9448);
}

char *sub_20EFD9528(int64x2_t *a1, uint64_t a2)
{
  unint64_t v4;
  char *result;
  char *v6;
  uint64_t v7;
  int64x2_t v8;
  int64x2_t v9;
  char *v10;
  uint64_t v11;
  int64x2_t *v12;

  v4 = *(_QWORD *)(a2 + 16);
  v10 = 0;
  v9 = 0uLL;
  if (v4)
  {
    if (v4 >> 61)
      sub_20E92CED8();
    result = (char *)operator new(8 * v4);
    v6 = &result[8 * v4];
    v9.i64[0] = (uint64_t)result;
    v9.i64[1] = (uint64_t)result;
    v10 = v6;
    v7 = *(_QWORD *)(a2 + 8);
    v12 = &v9;
    if (v7 != a2)
      goto LABEL_4;
LABEL_7:
    v8 = vdupq_n_s64((unint64_t)result);
    goto LABEL_8;
  }
  v6 = 0;
  result = 0;
  v7 = *(_QWORD *)(a2 + 8);
  v12 = &v9;
  if (v7 == a2)
    goto LABEL_7;
  do
  {
LABEL_4:
    v11 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v7 + 24) + 48))(*(_QWORD *)(v7 + 24));
    result = (char *)sub_20E9B2D04((uint64_t *)&v12, &v11);
    v7 = *(_QWORD *)(v7 + 8);
  }
  while (v7 != a2);
  v8 = v9;
  v6 = v10;
LABEL_8:
  *a1 = v8;
  a1[1].i64[0] = (uint64_t)v6;
  return result;
}

void sub_20EFD9604(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20EFD9628(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20EFD964C(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t sub_20EFD9664(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail20SynchronousProcessorINS1_3vio10mapping_io16Subm"
                     "apSaveResultENS7_15LocationRequestEvNS_8optionalIS9_EELb0EEEE27__shared_ptr_default_deleteISC_SC_EE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail20SynchronousProcessorINS1_3vio10mappi"
                                "ng_io16SubmapSaveResultENS7_15LocationRequestEvNS_8optionalIS9_EELb0EEEE27__shared_ptr_d"
                                "efault_deleteISC_SC_EE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail20SynchronousProcessorINS1_3vio10mapping_io16SubmapSaveResultENS7_15LocationRequestEvNS_8optionalIS9_EELb0EEEE27__shared_ptr_default_deleteISC_SC_EE"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail20SynchronousProcessorINS1_3vio10mapping_io16SubmapSaveResultENS7_15LocationRequestEvNS_8optionalIS9_EELb0EEEE27__shared_ptr_default_deleteISC_SC_EE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

uint64_t sub_20EFD96D4(uint64_t a1)
{
  std::__shared_weak_count *v2;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_20EFD9700(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20EFD973C@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *result;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;

  result = (_QWORD *)operator new();
  v6 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  *result = &off_24C9F5F80;
  result[1] = v6;
  result[2] = v5;
  if (v5)
  {
    v7 = (unint64_t *)(v5 + 16);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  *a2 = result;
  return result;
}

void sub_20EFD97A4(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 8);
      if (v5)
        (*(void (**)(uint64_t))(*(_QWORD *)v5 + 32))(v5);
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_20EFD9834(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20EFD9848(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 8);
      if (v5)
        (*(void (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_20EFD98D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20EFD98EC(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return 0;
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
    return 0;
  v4 = v3;
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
    v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 48))(v5);
  else
    v6 = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (v9)
    return v6;
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return v6;
}

void sub_20EFD99B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20EFD99C4(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return 0;
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
    return 0;
  v4 = v3;
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
    v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 24))(v5);
  else
    v6 = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (v9)
    return v6;
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return v6;
}

void sub_20EFD9A88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20EFD9A9C(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3)
  {
    v5 = std::__shared_weak_count::lock(v3);
    if (v5)
    {
      v6 = v5;
      v7 = *(_QWORD *)(a1 + 8);
      if (v7)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v7 + 16))(v7, a2);
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
}

void sub_20EFD9B40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20EFD9B58(uint64_t a1)
{
  sub_20EFDA298(a1);
  JUMPOUT(0x212BC6398);
}

void sub_20EFD9B7C(uint64_t *a1, uint64_t a2)
{
  std::recursive_mutex *v4;
  uint64_t v5;
  char v6;

  if ((*(unsigned int (**)(uint64_t *))(*a1 + 48))(a1))
  {
    v4 = (std::recursive_mutex *)a1[9];
    if (!v4)
    {
      if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/SynchronousProcessor.h", 177, (uint64_t)"sync_", 5, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
        abort();
      }
      v4 = (std::recursive_mutex *)a1[9];
    }
    std::recursive_mutex::lock(v4);
    LOBYTE(v5) = 0;
    v6 = 0;
    sub_20EFDA3F4(a1 + 11, a2, &v5);
    if (v6)
      sub_20EFDA6D0(&v5);
    std::recursive_mutex::unlock(v4);
  }
}

void sub_20EFD9C38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  std::recursive_mutex *v10;

  if (a10)
    sub_20EFDA6D0(&a9);
  std::recursive_mutex::unlock(v10);
  _Unwind_Resume(a1);
}

void sub_20EFD9C60(uint64_t *a1, uint64_t a2, uint64_t *a3)
{
  std::recursive_mutex *v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  std::string *v11;
  std::runtime_error *exception;
  std::runtime_error *v13;
  uint64_t v14;
  char v15;
  std::string v16;
  std::runtime_error v17;
  _QWORD v18[4];
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  if (((*(uint64_t (**)(uint64_t *))(*a1 + 48))(a1) & 1) == 0)
  {
    v18[0] = "Invalid operation. Interface is disabled for ";
    v18[1] = 45;
    v9 = a1[6];
    v8 = a1 + 6;
    v7 = (_QWORD *)v9;
    v10 = *((unsigned __int8 *)v8 + 23);
    if ((v10 & 0x80u) != 0)
      v10 = v8[1];
    else
      v7 = v8;
    v18[2] = v7;
    v18[3] = v10;
    sub_20E8778D4((uint64_t)v18, (uint64_t)&v19, 0, 0, &v16);
    if ((v16.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v11 = &v16;
    else
      v11 = (std::string *)v16.__r_.__value_.__r.__words[0];
    std::runtime_error::runtime_error(&v17, (const char *)v11);
    v17.__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v13 = std::runtime_error::runtime_error(exception, &v17);
    v13->__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    __cxa_throw(v13, (struct type_info *)&unk_24CA1E2D0, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  v6 = (std::recursive_mutex *)a1[9];
  if (!v6)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/SynchronousProcessor.h", 211, (uint64_t)"sync_", 5, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v6 = (std::recursive_mutex *)a1[9];
  }
  std::recursive_mutex::lock(v6);
  v14 = *a3;
  *a3 = 0;
  v15 = 1;
  sub_20EFDA3F4(a1 + 11, a2, &v14);
  if (v15)
    sub_20EFDA6D0(&v14);
  std::recursive_mutex::unlock(v6);
}

void sub_20EFD9DF8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, std::runtime_error a18, std::exception_ptr a19, std::exception_ptr a20)
{
  std::__assoc_sub_state **v20;
  std::__assoc_sub_state *v21;
  std::exception_ptr v22;

  if (a2)
  {
    __cxa_begin_catch(exception_object);
    std::current_exception();
    __cxa_end_catch();
    v21 = *v20;
    if (v21)
    {
      std::exception_ptr::exception_ptr(&a20, &a19);
      v22.__ptr_ = &a20;
      std::__assoc_sub_state::set_exception(v21, v22);
      std::exception_ptr::~exception_ptr(&a20);
      std::exception_ptr::~exception_ptr(&a19);
      std::runtime_error::~runtime_error(&a18);
      if (a17 < 0)
        operator delete(__p);
      JUMPOUT(0x20EFD9D24);
    }
    sub_20E96CE78(3u);
  }
  _Unwind_Resume(exception_object);
}

void sub_20EFD9E6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, std::runtime_error a18, std::exception_ptr a19, std::exception_ptr a20)
{
  std::exception_ptr::~exception_ptr(&a19);
  std::runtime_error::~runtime_error(&a18);
  if (a17 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void sub_20EFD9ECC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, __int16 a11, char a12, char a13)
{
  std::recursive_mutex *v13;

  if ((_BYTE)a11)
    sub_20EFDA6D0(&a10);
  std::recursive_mutex::unlock(v13);
  _Unwind_Resume(a1);
}

void sub_20EFD9EF0(uint64_t a1)
{
  std::recursive_mutex *v1;
  std::recursive_mutex *v3;

  v1 = *(std::recursive_mutex **)(a1 + 72);
  if (v1)
  {
    std::recursive_mutex::lock(*(std::recursive_mutex **)(a1 + 72));
    std::recursive_mutex::unlock(v1);
  }
  else
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/SynchronousProcessor.h", 138, (uint64_t)"sync_", 5, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v3 = *(std::recursive_mutex **)(a1 + 72);
    std::recursive_mutex::lock(v3);
    std::recursive_mutex::unlock(v3);
  }
}

void sub_20EFD9F74(uint64_t a1, uint64_t a2)
{
  std::recursive_mutex *v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;

  v4 = *(std::recursive_mutex **)(a1 + 72);
  if (!v4)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/SynchronousProcessor.h", 148, (uint64_t)"sync_", 5, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v4 = *(std::recursive_mutex **)(a1 + 72);
  }
  std::recursive_mutex::lock(v4);
  v5 = operator new(0x20uLL);
  v6 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v5[2] = &off_24C9F2BF0;
  v5[3] = v6;
  v8 = *(_QWORD *)(a1 + 96);
  v7 = (_QWORD *)(a1 + 96);
  *v5 = v8;
  v5[1] = v7;
  *(_QWORD *)(v8 + 8) = v5;
  *v7 = v5;
  ++v7[2];
  std::recursive_mutex::unlock(v4);
}

void sub_20EFDA024(_Unwind_Exception *a1)
{
  std::recursive_mutex *v1;

  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_20EFDA038(uint64_t a1)
{
  std::recursive_mutex *v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;

  v2 = *(std::recursive_mutex **)(a1 + 72);
  if (!v2)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/SynchronousProcessor.h", 159, (uint64_t)"sync_", 5, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v2 = *(std::recursive_mutex **)(a1 + 72);
  }
  std::recursive_mutex::lock(v2);
  v3 = operator new(0x18uLL);
  v5 = *(_QWORD *)(a1 + 120);
  v4 = (_QWORD *)(a1 + 120);
  *v3 = v5;
  v3[1] = v4;
  *(_QWORD *)(v5 + 8) = v3;
  *v4 = v3;
  ++v4[2];
  std::recursive_mutex::unlock(v2);
}

void sub_20EFDA0C8(_Unwind_Exception *a1)
{
  std::recursive_mutex *v1;

  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_20EFDA0DC(uint64_t a1@<X0>, int64x2_t *a2@<X8>)
{
  std::recursive_mutex *v4;

  v4 = *(std::recursive_mutex **)(a1 + 72);
  std::recursive_mutex::lock(v4);
  sub_20EFDA7F8(a2, a1 + 96);
  std::recursive_mutex::unlock(v4);
}

void sub_20EFDA120(_Unwind_Exception *a1)
{
  std::recursive_mutex *v1;

  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_20EFDA134(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  std::recursive_mutex *v3;

  v3 = *(std::recursive_mutex **)(a1 + 72);
  std::recursive_mutex::lock(v3);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  std::recursive_mutex::unlock(v3);
}

uint64_t sub_20EFDA168(uint64_t a1)
{
  return sub_20EFDA298(a1 - 16);
}

void sub_20EFDA170(uint64_t a1)
{
  sub_20EFDA298(a1 - 16);
  JUMPOUT(0x212BC6398);
}

void sub_20EFDA198(uint64_t a1, uint64_t a2)
{
  sub_20EFD9F74(a1 - 16, a2);
}

void sub_20EFDA1A0(uint64_t a1@<X0>, int64x2_t *a2@<X8>)
{
  std::recursive_mutex *v4;

  v4 = *(std::recursive_mutex **)(a1 + 56);
  std::recursive_mutex::lock(v4);
  sub_20EFDA7F8(a2, a1 + 80);
  std::recursive_mutex::unlock(v4);
}

void sub_20EFDA1E4(_Unwind_Exception *a1)
{
  std::recursive_mutex *v1;

  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_20EFDA1F8(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  std::recursive_mutex *v3;

  v3 = *(std::recursive_mutex **)(a1 + 56);
  std::recursive_mutex::lock(v3);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  std::recursive_mutex::unlock(v3);
}

uint64_t sub_20EFDA22C(uint64_t a1)
{
  return a1 - 16;
}

uint64_t sub_20EFDA234(uint64_t a1)
{
  return sub_20EFDA298(a1 - 24);
}

void sub_20EFDA23C(uint64_t a1)
{
  sub_20EFDA298(a1 - 24);
  JUMPOUT(0x212BC6398);
}

void sub_20EFDA264(uint64_t a1)
{
  sub_20EFDA038(a1 - 24);
}

uint64_t sub_20EFDA26C(uint64_t a1)
{
  return a1 - 24;
}

void sub_20EFDA278()
{
  JUMPOUT(0x212BC6398);
}

_BYTE *sub_20EFDA28C@<X0>(uint64_t a1@<X1>, _BYTE *a2@<X8>)
{
  return sub_20EFC0A90(a2, a1 + 24);
}

uint64_t sub_20EFDA298(uint64_t a1)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  std::__shared_weak_count *v15;

  *(_QWORD *)a1 = &off_24C9F5FF8;
  *(_QWORD *)(a1 + 16) = &unk_24C9F6070;
  *(_QWORD *)(a1 + 24) = &unk_24C9F60B0;
  if (*(_QWORD *)(a1 + 136))
  {
    v2 = (uint64_t *)(a1 + 120);
    v4 = *(_QWORD *)(a1 + 120);
    v3 = *(uint64_t **)(a1 + 128);
    v5 = *v3;
    *(_QWORD *)(v5 + 8) = *(_QWORD *)(v4 + 8);
    **(_QWORD **)(v4 + 8) = v5;
    *(_QWORD *)(a1 + 136) = 0;
    if (v3 != (uint64_t *)(a1 + 120))
    {
      do
      {
        v6 = (uint64_t *)v3[1];
        operator delete(v3);
        v3 = v6;
      }
      while (v6 != v2);
    }
  }
  if (*(_QWORD *)(a1 + 112))
  {
    v7 = *(_QWORD *)(a1 + 96);
    v8 = *(uint64_t **)(a1 + 104);
    v9 = *v8;
    *(_QWORD *)(v9 + 8) = *(_QWORD *)(v7 + 8);
    **(_QWORD **)(v7 + 8) = v9;
    *(_QWORD *)(a1 + 112) = 0;
    if (v8 != (uint64_t *)(a1 + 96))
    {
      do
      {
        v10 = (uint64_t *)v8[1];
        (*(void (**)(uint64_t *))v8[2])(v8 + 2);
        operator delete(v8);
        v8 = v10;
      }
      while (v10 != (uint64_t *)(a1 + 96));
    }
  }
  v11 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 88) = 0;
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  v12 = *(std::__shared_weak_count **)(a1 + 80);
  if (!v12)
    goto LABEL_13;
  p_shared_owners = (unint64_t *)&v12->__shared_owners_;
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (v14)
  {
LABEL_13:
    if ((*(char *)(a1 + 71) & 0x80000000) == 0)
      goto LABEL_14;
LABEL_18:
    operator delete(*(void **)(a1 + 48));
    v15 = *(std::__shared_weak_count **)(a1 + 40);
    if (!v15)
      return a1;
    goto LABEL_15;
  }
  ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
  std::__shared_weak_count::__release_weak(v12);
  if (*(char *)(a1 + 71) < 0)
    goto LABEL_18;
LABEL_14:
  v15 = *(std::__shared_weak_count **)(a1 + 40);
  if (v15)
LABEL_15:
    std::__shared_weak_count::__release_weak(v15);
  return a1;
}

void sub_20EFDA3F4(uint64_t *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  _QWORD *v7;
  _QWORD *i;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  void *v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  std::exception_ptr v17;
  void *v18;
  char *v19;
  char v20;
  void *__p;
  void *v22;
  char v23;

  v6 = *a1;
  if (!v6)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/ProcessorInputMessageHandlingStrategy.h", 251, (uint64_t)"callable_", 9, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v6 = *a1;
  }
  (*(void (**)(void **__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v6 + 16))(&v18, v6, a2);
  if (v23)
  {
    v7 = a1 + 1;
    for (i = (_QWORD *)a1[2]; i != v7; i = (_QWORD *)i[1])
      (*(void (**)(_QWORD *, void **))(i[2] + 16))(i + 2, &v18);
  }
  if (*((_BYTE *)a3 + 8))
  {
    v9 = *a3;
    if (!*a3)
      sub_20E96CE78(3u);
    std::mutex::lock((std::mutex *)(v9 + 24));
    if ((*(_BYTE *)(v9 + 136) & 1) != 0
      || (v17.__ptr_ = 0, v10 = *(_QWORD *)(v9 + 16), std::exception_ptr::~exception_ptr(&v17), v10))
    {
      sub_20E96CE78(2u);
    }
    sub_20EFC0A90((_BYTE *)(v9 + 144), (uint64_t)&v18);
    *(_DWORD *)(v9 + 136) |= 5u;
    std::condition_variable::notify_all((std::condition_variable *)(v9 + 88));
    std::mutex::unlock((std::mutex *)(v9 + 24));
  }
  if (v23)
  {
    if (__p)
    {
      v22 = __p;
      operator delete(__p);
    }
    if (v20)
    {
      v11 = (char *)v18;
      if (v18)
      {
        v12 = v19;
        v13 = v18;
        if (v19 != v18)
        {
          do
          {
            v14 = (std::__shared_weak_count *)*((_QWORD *)v12 - 1);
            if (v14)
            {
              p_shared_owners = (unint64_t *)&v14->__shared_owners_;
              do
                v16 = __ldaxr(p_shared_owners);
              while (__stlxr(v16 - 1, p_shared_owners));
              if (!v16)
              {
                ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
                std::__shared_weak_count::__release_weak(v14);
              }
            }
            v12 -= 16;
          }
          while (v12 != v11);
          v13 = v18;
        }
        v19 = v11;
        operator delete(v13);
      }
    }
  }
}

void sub_20EFDA5C8(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, _QWORD *a11, uint64_t a12, int a13, __int16 a14, char a15, unsigned __int8 a16, char *a17)
{
  uint64_t *v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;

  sub_20EFC0B7C(&a17);
  if (a2 == 1)
  {
    v19 = (uint64_t *)__cxa_begin_catch(a1);
    v20 = *v19;
    a10 = *(_QWORD *)(*(_QWORD *)(*v19 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL;
    a9 = (*(uint64_t (**)(void))(v20 + 16))();
    sub_20E9B0CC4("Caught unexpected exception of type: ", (const char *)&a10, "\n", "message: ", (const char *)&a9, "\n");
    if ((a16 & 0x80u) == 0)
      v21 = &a11;
    else
      v21 = a11;
    if ((a16 & 0x80u) == 0)
      v22 = a16;
    else
      v22 = a12;
    sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/ProcessorInputMessageHandlingStrategy.h", 140, (uint64_t)"", 0, (uint64_t)v21, v22, (void (*)(void **))sub_21023DDB0);
    abort();
  }
  _Unwind_Resume(a1);
}

void sub_20EFDA6A4(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  __cxa_end_catch();
  JUMPOUT(0x20EFDA6C4);
}

uint64_t *sub_20EFDA6D0(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  const std::error_category *v7;
  std::logic_error *exception;
  std::logic_error *v9;
  std::logic_error v10;
  std::logic_error v11;
  std::exception_ptr v12;

  v2 = *a1;
  if (!v2)
    return a1;
  if ((*(_BYTE *)(v2 + 136) & 1) == 0)
  {
    v12.__ptr_ = 0;
    v3 = *(_QWORD *)(v2 + 16);
    std::exception_ptr::~exception_ptr(&v12);
    v2 = *a1;
    if (!v3 && *(uint64_t *)(v2 + 8) >= 1)
    {
      v7 = std::future_category();
      MEMORY[0x212BC5AF8](&v10, 4, v7);
      exception = (std::logic_error *)__cxa_allocate_exception(0x20uLL);
      v9 = std::logic_error::logic_error(exception, &v10);
      v9->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB810] + 16);
      v9[1] = v11;
      __cxa_throw(v9, MEMORY[0x24BEDB6E0], (void (*)(void *))MEMORY[0x24BEDAD80]);
    }
  }
  v4 = (unint64_t *)(v2 + 8);
  do
    v5 = __ldaxr(v4);
  while (__stlxr(v5 - 1, v4));
  if (v5)
    return a1;
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 16))(v2);
  return a1;
}

void sub_20EFDA7BC(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__assoc_sub_state *a10, std::logic_error a11)
{
  uint64_t v11;
  std::exception_ptr v12;

  __cxa_begin_catch(a1);
  std::current_exception();
  __cxa_end_catch();
  v12.__ptr_ = (void *)(v11 - 32);
  std::__assoc_sub_state::set_exception(a10, v12);
  std::exception_ptr::~exception_ptr((std::exception_ptr *)(v11 - 32));
  std::logic_error::~logic_error(&a11);
  JUMPOUT(0x20EFDA718);
}

char *sub_20EFDA7F8(int64x2_t *a1, uint64_t a2)
{
  unint64_t v4;
  char *result;
  char *v6;
  uint64_t v7;
  int64x2_t v8;
  int64x2_t v9;
  char *v10;
  uint64_t v11;
  int64x2_t *v12;

  v4 = *(_QWORD *)(a2 + 16);
  v10 = 0;
  v9 = 0uLL;
  if (v4)
  {
    if (v4 >> 61)
      sub_20E92CED8();
    result = (char *)operator new(8 * v4);
    v6 = &result[8 * v4];
    v9.i64[0] = (uint64_t)result;
    v9.i64[1] = (uint64_t)result;
    v10 = v6;
    v7 = *(_QWORD *)(a2 + 8);
    v12 = &v9;
    if (v7 != a2)
      goto LABEL_4;
LABEL_7:
    v8 = vdupq_n_s64((unint64_t)result);
    goto LABEL_8;
  }
  v6 = 0;
  result = 0;
  v7 = *(_QWORD *)(a2 + 8);
  v12 = &v9;
  if (v7 == a2)
    goto LABEL_7;
  do
  {
LABEL_4:
    v11 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v7 + 24) + 48))(*(_QWORD *)(v7 + 24));
    result = (char *)sub_20E9B2D04((uint64_t *)&v12, &v11);
    v7 = *(_QWORD *)(v7 + 8);
  }
  while (v7 != a2);
  v8 = v9;
  v6 = v10;
LABEL_8:
  *a1 = v8;
  a1[1].i64[0] = (uint64_t)v6;
  return result;
}

void sub_20EFDA8D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20EFDA8F8(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20EFDA91C(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t sub_20EFDA934(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail20SynchronousProcessorINS1_3vio10mapping_io16Subm"
                     "apSaveResultENS7_16SubmapLoadResultEvNS_8optionalIS9_EELb0EEEE27__shared_ptr_default_deleteISC_SC_EE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail20SynchronousProcessorINS1_3vio10mappi"
                                "ng_io16SubmapSaveResultENS7_16SubmapLoadResultEvNS_8optionalIS9_EELb0EEEE27__shared_ptr_"
                                "default_deleteISC_SC_EE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail20SynchronousProcessorINS1_3vio10mapping_io16SubmapSaveResultENS7_16SubmapLoadResultEvNS_8optionalIS9_EELb0EEEE27__shared_ptr_default_deleteISC_SC_EE"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail20SynchronousProcessorINS1_3vio10mapping_io16SubmapSaveResultENS7_16SubmapLoadResultEvNS_8optionalIS9_EELb0EEEE27__shared_ptr_default_deleteISC_SC_EE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

void sub_20EFDA9A8(uint64_t a1)
{
  sub_20EFDB0E4(a1);
  JUMPOUT(0x212BC6398);
}

void sub_20EFDA9CC(uint64_t *a1, uint64_t a2)
{
  std::recursive_mutex *v4;
  uint64_t v5;
  char v6;

  if ((*(unsigned int (**)(uint64_t *))(*a1 + 48))(a1))
  {
    v4 = (std::recursive_mutex *)a1[9];
    if (!v4)
    {
      if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/SynchronousProcessor.h", 177, (uint64_t)"sync_", 5, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
        abort();
      }
      v4 = (std::recursive_mutex *)a1[9];
    }
    std::recursive_mutex::lock(v4);
    LOBYTE(v5) = 0;
    v6 = 0;
    sub_20EFDB240(a1 + 11, a2, &v5);
    if (v6)
      sub_20EFC9B34(&v5);
    std::recursive_mutex::unlock(v4);
  }
}

void sub_20EFDAA88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  std::recursive_mutex *v10;

  if (a10)
    sub_20EFC9B34(&a9);
  std::recursive_mutex::unlock(v10);
  _Unwind_Resume(a1);
}

void sub_20EFDAAB0(uint64_t *a1, uint64_t a2, uint64_t *a3)
{
  std::recursive_mutex *v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  std::string *v11;
  std::runtime_error *exception;
  std::runtime_error *v13;
  uint64_t v14;
  char v15;
  std::string v16;
  std::runtime_error v17;
  _QWORD v18[4];
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  if (((*(uint64_t (**)(uint64_t *))(*a1 + 48))(a1) & 1) == 0)
  {
    v18[0] = "Invalid operation. Interface is disabled for ";
    v18[1] = 45;
    v9 = a1[6];
    v8 = a1 + 6;
    v7 = (_QWORD *)v9;
    v10 = *((unsigned __int8 *)v8 + 23);
    if ((v10 & 0x80u) != 0)
      v10 = v8[1];
    else
      v7 = v8;
    v18[2] = v7;
    v18[3] = v10;
    sub_20E8778D4((uint64_t)v18, (uint64_t)&v19, 0, 0, &v16);
    if ((v16.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v11 = &v16;
    else
      v11 = (std::string *)v16.__r_.__value_.__r.__words[0];
    std::runtime_error::runtime_error(&v17, (const char *)v11);
    v17.__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v13 = std::runtime_error::runtime_error(exception, &v17);
    v13->__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    __cxa_throw(v13, (struct type_info *)&unk_24CA1E2D0, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  v6 = (std::recursive_mutex *)a1[9];
  if (!v6)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/SynchronousProcessor.h", 211, (uint64_t)"sync_", 5, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v6 = (std::recursive_mutex *)a1[9];
  }
  std::recursive_mutex::lock(v6);
  v14 = *a3;
  *a3 = 0;
  v15 = 1;
  sub_20EFDB240(a1 + 11, a2, &v14);
  if (v15)
    sub_20EFC9B34(&v14);
  std::recursive_mutex::unlock(v6);
}

void sub_20EFDAC48(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, std::runtime_error a18, std::exception_ptr a19, std::exception_ptr a20)
{
  std::__assoc_sub_state **v20;
  std::__assoc_sub_state *v21;
  std::exception_ptr v22;

  if (a2)
  {
    __cxa_begin_catch(exception_object);
    std::current_exception();
    __cxa_end_catch();
    v21 = *v20;
    if (v21)
    {
      std::exception_ptr::exception_ptr(&a20, &a19);
      v22.__ptr_ = &a20;
      std::__assoc_sub_state::set_exception(v21, v22);
      std::exception_ptr::~exception_ptr(&a20);
      std::exception_ptr::~exception_ptr(&a19);
      std::runtime_error::~runtime_error(&a18);
      if (a17 < 0)
        operator delete(__p);
      JUMPOUT(0x20EFDAB74);
    }
    sub_20E96CE78(3u);
  }
  _Unwind_Resume(exception_object);
}

void sub_20EFDACBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, std::runtime_error a18, std::exception_ptr a19, std::exception_ptr a20)
{
  std::exception_ptr::~exception_ptr(&a19);
  std::runtime_error::~runtime_error(&a18);
  if (a17 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void sub_20EFDAD1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, __int16 a11, char a12, char a13)
{
  std::recursive_mutex *v13;

  if ((_BYTE)a11)
    sub_20EFC9B34(&a10);
  std::recursive_mutex::unlock(v13);
  _Unwind_Resume(a1);
}

void sub_20EFDAD40(uint64_t a1)
{
  std::recursive_mutex *v1;
  std::recursive_mutex *v3;

  v1 = *(std::recursive_mutex **)(a1 + 72);
  if (v1)
  {
    std::recursive_mutex::lock(*(std::recursive_mutex **)(a1 + 72));
    std::recursive_mutex::unlock(v1);
  }
  else
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/SynchronousProcessor.h", 138, (uint64_t)"sync_", 5, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v3 = *(std::recursive_mutex **)(a1 + 72);
    std::recursive_mutex::lock(v3);
    std::recursive_mutex::unlock(v3);
  }
}

void sub_20EFDADC4(uint64_t a1, uint64_t a2)
{
  std::recursive_mutex *v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;

  v4 = *(std::recursive_mutex **)(a1 + 72);
  if (!v4)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/SynchronousProcessor.h", 148, (uint64_t)"sync_", 5, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v4 = *(std::recursive_mutex **)(a1 + 72);
  }
  std::recursive_mutex::lock(v4);
  v5 = operator new(0x20uLL);
  v6 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v5[2] = &off_24C9B4710;
  v5[3] = v6;
  v8 = *(_QWORD *)(a1 + 96);
  v7 = (_QWORD *)(a1 + 96);
  *v5 = v8;
  v5[1] = v7;
  *(_QWORD *)(v8 + 8) = v5;
  *v7 = v5;
  ++v7[2];
  std::recursive_mutex::unlock(v4);
}

void sub_20EFDAE74(_Unwind_Exception *a1)
{
  std::recursive_mutex *v1;

  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_20EFDAE88(uint64_t a1)
{
  std::recursive_mutex *v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;

  v2 = *(std::recursive_mutex **)(a1 + 72);
  if (!v2)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/SynchronousProcessor.h", 159, (uint64_t)"sync_", 5, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v2 = *(std::recursive_mutex **)(a1 + 72);
  }
  std::recursive_mutex::lock(v2);
  v3 = operator new(0x18uLL);
  v5 = *(_QWORD *)(a1 + 120);
  v4 = (_QWORD *)(a1 + 120);
  *v3 = v5;
  v3[1] = v4;
  *(_QWORD *)(v5 + 8) = v3;
  *v4 = v3;
  ++v4[2];
  std::recursive_mutex::unlock(v2);
}

void sub_20EFDAF18(_Unwind_Exception *a1)
{
  std::recursive_mutex *v1;

  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_20EFDAF2C(uint64_t a1@<X0>, int64x2_t *a2@<X8>)
{
  std::recursive_mutex *v4;

  v4 = *(std::recursive_mutex **)(a1 + 72);
  std::recursive_mutex::lock(v4);
  sub_20EFDB5A0(a2, a1 + 96);
  std::recursive_mutex::unlock(v4);
}

void sub_20EFDAF70(_Unwind_Exception *a1)
{
  std::recursive_mutex *v1;

  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_20EFDAF84(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  std::recursive_mutex *v3;

  v3 = *(std::recursive_mutex **)(a1 + 72);
  std::recursive_mutex::lock(v3);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  std::recursive_mutex::unlock(v3);
}

uint64_t sub_20EFDAFB8(uint64_t a1)
{
  return sub_20EFDB0E4(a1 - 16);
}

void sub_20EFDAFC0(uint64_t a1)
{
  sub_20EFDB0E4(a1 - 16);
  JUMPOUT(0x212BC6398);
}

void sub_20EFDAFE8(uint64_t a1, uint64_t a2)
{
  sub_20EFDADC4(a1 - 16, a2);
}

void sub_20EFDAFF0(uint64_t a1@<X0>, int64x2_t *a2@<X8>)
{
  std::recursive_mutex *v4;

  v4 = *(std::recursive_mutex **)(a1 + 56);
  std::recursive_mutex::lock(v4);
  sub_20EFDB5A0(a2, a1 + 80);
  std::recursive_mutex::unlock(v4);
}

void sub_20EFDB034(_Unwind_Exception *a1)
{
  std::recursive_mutex *v1;

  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_20EFDB048(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  std::recursive_mutex *v3;

  v3 = *(std::recursive_mutex **)(a1 + 56);
  std::recursive_mutex::lock(v3);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  std::recursive_mutex::unlock(v3);
}

uint64_t sub_20EFDB07C(uint64_t a1)
{
  return a1 - 16;
}

uint64_t sub_20EFDB084(uint64_t a1)
{
  return sub_20EFDB0E4(a1 - 24);
}

void sub_20EFDB08C(uint64_t a1)
{
  sub_20EFDB0E4(a1 - 24);
  JUMPOUT(0x212BC6398);
}

void sub_20EFDB0B4(uint64_t a1)
{
  sub_20EFDAE88(a1 - 24);
}

uint64_t sub_20EFDB0BC(uint64_t a1)
{
  return a1 - 24;
}

void sub_20EFDB0C8()
{
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20EFDB0DC(uint64_t a1, unsigned __int8 *a2)
{
  return *a2;
}

uint64_t sub_20EFDB0E4(uint64_t a1)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  std::__shared_weak_count *v15;

  *(_QWORD *)a1 = &off_24C9F6228;
  *(_QWORD *)(a1 + 16) = &unk_24C9F62A0;
  *(_QWORD *)(a1 + 24) = &unk_24C9F62E0;
  if (*(_QWORD *)(a1 + 136))
  {
    v2 = (uint64_t *)(a1 + 120);
    v4 = *(_QWORD *)(a1 + 120);
    v3 = *(uint64_t **)(a1 + 128);
    v5 = *v3;
    *(_QWORD *)(v5 + 8) = *(_QWORD *)(v4 + 8);
    **(_QWORD **)(v4 + 8) = v5;
    *(_QWORD *)(a1 + 136) = 0;
    if (v3 != (uint64_t *)(a1 + 120))
    {
      do
      {
        v6 = (uint64_t *)v3[1];
        operator delete(v3);
        v3 = v6;
      }
      while (v6 != v2);
    }
  }
  if (*(_QWORD *)(a1 + 112))
  {
    v7 = *(_QWORD *)(a1 + 96);
    v8 = *(uint64_t **)(a1 + 104);
    v9 = *v8;
    *(_QWORD *)(v9 + 8) = *(_QWORD *)(v7 + 8);
    **(_QWORD **)(v7 + 8) = v9;
    *(_QWORD *)(a1 + 112) = 0;
    if (v8 != (uint64_t *)(a1 + 96))
    {
      do
      {
        v10 = (uint64_t *)v8[1];
        (*(void (**)(uint64_t *))v8[2])(v8 + 2);
        operator delete(v8);
        v8 = v10;
      }
      while (v10 != (uint64_t *)(a1 + 96));
    }
  }
  v11 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 88) = 0;
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  v12 = *(std::__shared_weak_count **)(a1 + 80);
  if (!v12)
    goto LABEL_13;
  p_shared_owners = (unint64_t *)&v12->__shared_owners_;
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (v14)
  {
LABEL_13:
    if ((*(char *)(a1 + 71) & 0x80000000) == 0)
      goto LABEL_14;
LABEL_18:
    operator delete(*(void **)(a1 + 48));
    v15 = *(std::__shared_weak_count **)(a1 + 40);
    if (!v15)
      return a1;
    goto LABEL_15;
  }
  ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
  std::__shared_weak_count::__release_weak(v12);
  if (*(char *)(a1 + 71) < 0)
    goto LABEL_18;
LABEL_14:
  v15 = *(std::__shared_weak_count **)(a1 + 40);
  if (v15)
LABEL_15:
    std::__shared_weak_count::__release_weak(v15);
  return a1;
}

void sub_20EFDB240(uint64_t *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  unsigned __int8 v7;
  BOOL v8;
  uint64_t v9;
  uint64_t i;
  unsigned __int8 v11;
  _QWORD *v12;
  _QWORD *j;
  uint64_t v14;
  uint64_t v15;
  std::exception_ptr v16;
  char v17;

  v6 = *a1;
  if (!v6)
  {
    sub_21023D70C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/ProcessorInputMessageHandlingStrategy.h", 228, (uint64_t)"callable_", 9, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0);
    v7 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
    if ((v7 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
    {
      __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
      __cxa_guard_release(&qword_254A6DE78);
    }
    if (byte_254A6DE68)
      v8 = byte_254A6DE70 == 0;
    else
      v8 = 0;
    if (!v8)
    {
      v9 = qword_254A6DE40;
      for (i = qword_254A6DE48; v9 != i; v9 += 16)
        (*(void (**)(_QWORD, const char *, uint64_t, const char *, _QWORD))v9)(*(_QWORD *)(v9 + 8), "callable_", 9, "", 0);
    }
    v11 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
    if ((v11 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
    {
      __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
      __cxa_guard_release(&qword_254A6DE78);
    }
    if (!byte_254A6DE68)
      abort();
    qword_254A6DE58(unk_254A6DE60, "callable_", 9, "", 0);
    v6 = *a1;
  }
  v17 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 16))(v6, a2);
  v12 = a1 + 1;
  for (j = (_QWORD *)a1[2]; j != v12; j = (_QWORD *)j[1])
    (*(void (**)(_QWORD *, char *))(j[2] + 16))(j + 2, &v17);
  if (*((_BYTE *)a3 + 8))
  {
    v14 = *a3;
    if (!v14)
      sub_20E96CE78(3u);
    std::mutex::lock((std::mutex *)(v14 + 24));
    if ((*(_BYTE *)(v14 + 136) & 1) != 0
      || (v16.__ptr_ = 0, v15 = *(_QWORD *)(v14 + 16), std::exception_ptr::~exception_ptr(&v16), v15))
    {
      sub_20E96CE78(2u);
    }
    *(_BYTE *)(v14 + 140) = v17;
    *(_DWORD *)(v14 + 136) |= 5u;
    std::condition_variable::notify_all((std::condition_variable *)(v14 + 88));
    std::mutex::unlock((std::mutex *)(v14 + 24));
  }
}

void sub_20EFDB4AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t *a11, uint64_t a12, int a13, __int16 a14, char a15, unsigned __int8 a16)
{
  std::mutex *v16;
  uint64_t *v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;

  std::mutex::unlock(v16);
  if (a2 == 1)
  {
    v19 = (uint64_t *)__cxa_begin_catch(a1);
    v20 = *v19;
    a10 = *(_QWORD *)(*(_QWORD *)(*v19 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL;
    a9 = (*(uint64_t (**)(void))(v20 + 16))();
    sub_20E9B0CC4("Caught unexpected exception of type: ", (const char *)&a10, "\n", "message: ", (const char *)&a9, "\n");
    if ((a16 & 0x80u) == 0)
      v21 = (uint64_t *)&a11;
    else
      v21 = a11;
    if ((a16 & 0x80u) == 0)
      v22 = a16;
    else
      v22 = a12;
    sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/ProcessorInputMessageHandlingStrategy.h", 140, (uint64_t)"", 0, (uint64_t)v21, v22, (void (*)(void **))sub_21023DDB0);
    abort();
  }
  _Unwind_Resume(a1);
}

void sub_20EFDB574(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  __cxa_end_catch();
  JUMPOUT(0x20EFDB594);
}

char *sub_20EFDB5A0(int64x2_t *a1, uint64_t a2)
{
  unint64_t v4;
  char *result;
  char *v6;
  uint64_t v7;
  int64x2_t v8;
  int64x2_t v9;
  char *v10;
  uint64_t v11;
  int64x2_t *v12;

  v4 = *(_QWORD *)(a2 + 16);
  v10 = 0;
  v9 = 0uLL;
  if (v4)
  {
    if (v4 >> 61)
      sub_20E92CED8();
    result = (char *)operator new(8 * v4);
    v6 = &result[8 * v4];
    v9.i64[0] = (uint64_t)result;
    v9.i64[1] = (uint64_t)result;
    v10 = v6;
    v7 = *(_QWORD *)(a2 + 8);
    v12 = &v9;
    if (v7 != a2)
      goto LABEL_4;
LABEL_7:
    v8 = vdupq_n_s64((unint64_t)result);
    goto LABEL_8;
  }
  v6 = 0;
  result = 0;
  v7 = *(_QWORD *)(a2 + 8);
  v12 = &v9;
  if (v7 == a2)
    goto LABEL_7;
  do
  {
LABEL_4:
    v11 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v7 + 24) + 48))(*(_QWORD *)(v7 + 24));
    result = (char *)sub_20E9B2D04((uint64_t *)&v12, &v11);
    v7 = *(_QWORD *)(v7 + 8);
  }
  while (v7 != a2);
  v8 = v9;
  v6 = v10;
LABEL_8:
  *a1 = v8;
  a1[1].i64[0] = (uint64_t)v6;
  return result;
}

void sub_20EFDB67C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20EFDB6A0(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20EFDB6C4(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t sub_20EFDB6DC(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail20SynchronousProcessorINS1_3vio10mapping_io18Paus"
                     "eResumeRequestES8_vS8_Lb0EEEE27__shared_ptr_default_deleteIS9_S9_EE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail20SynchronousProcessorINS1_3vio10mappi"
                                "ng_io18PauseResumeRequestES8_vS8_Lb0EEEE27__shared_ptr_default_deleteIS9_S9_EE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail20SynchronousProcessorINS1_3vio10mapping_io18PauseResumeRequestES8_vS8_Lb0EEEE27__shared_ptr_default_deleteIS9_S9_EE"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail20SynchronousProcessorINS1_3vio10mapping_io18PauseResumeRequestES8_vS8_Lb0EEEE27__shared_ptr_default_deleteIS9_S9_EE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

uint64_t sub_20EFDB74C(uint64_t a1)
{
  _QWORD *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_weak_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;

  *(_QWORD *)a1 = &off_24C9F5588;
  v2 = (_QWORD *)(a1 + 72);
  if (*(_QWORD *)(a1 + 72))
  {
    v3 = *(std::__shared_weak_count **)(a1 + 80);
    if (v3)
    {
      p_shared_weak_owners = (unint64_t *)&v3->__shared_weak_owners_;
      do
        v5 = __ldxr(p_shared_weak_owners);
      while (__stxr(v5 + 1, p_shared_weak_owners));
      v6 = *(std::__shared_weak_count **)(a1 + 80);
      *v2 = 0;
      *(_QWORD *)(a1 + 80) = 0;
      if (v6)
      {
        p_shared_owners = (unint64_t *)&v6->__shared_owners_;
        do
          v8 = __ldaxr(p_shared_owners);
        while (__stlxr(v8 - 1, p_shared_owners));
        if (!v8)
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
      }
      while (v3->__shared_owners_ != -1)
        sched_yield();
    }
    else
    {
      *v2 = 0;
      *(_QWORD *)(a1 + 80) = 0;
    }
    v9 = *(uint64_t **)(a1 + 56);
    if (v9)
      sub_210217048(*v9);
    if (v3)
      std::__shared_weak_count::__release_weak(v3);
  }
  *(_QWORD *)(a1 + 144) = &off_24C9B2310;
  v10 = *(std::__shared_weak_count **)(a1 + 160);
  if (v10)
    std::__shared_weak_count::__release_weak(v10);
  *(_QWORD *)(a1 + 120) = &off_24C9F2D60;
  v11 = *(std::__shared_weak_count **)(a1 + 136);
  if (v11)
    std::__shared_weak_count::__release_weak(v11);
  v12 = *(std::__shared_weak_count **)(a1 + 112);
  if (v12)
    std::__shared_weak_count::__release_weak(v12);
  v13 = *(_QWORD *)(a1 + 96);
  *(_QWORD *)(a1 + 88) = &off_24C9B4710;
  *(_QWORD *)(a1 + 96) = 0;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v14 = *(std::__shared_weak_count **)(a1 + 80);
  if (v14)
  {
    v15 = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  v17 = *(std::__shared_weak_count **)(a1 + 64);
  if (!v17)
    goto LABEL_34;
  v18 = (unint64_t *)&v17->__shared_owners_;
  do
    v19 = __ldaxr(v18);
  while (__stlxr(v19 - 1, v18));
  if (v19)
  {
LABEL_34:
    if ((*(char *)(a1 + 55) & 0x80000000) == 0)
      goto LABEL_35;
LABEL_38:
    operator delete(*(void **)(a1 + 32));
    if ((*(char *)(a1 + 31) & 0x80000000) == 0)
      return a1;
    goto LABEL_39;
  }
  ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
  std::__shared_weak_count::__release_weak(v17);
  if (*(char *)(a1 + 55) < 0)
    goto LABEL_38;
LABEL_35:
  if ((*(char *)(a1 + 31) & 0x80000000) == 0)
    return a1;
LABEL_39:
  operator delete(*(void **)(a1 + 8));
  return a1;
}

uint64_t sub_20EFDB930(uint64_t a1)
{
  _QWORD *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_weak_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;

  *(_QWORD *)a1 = &off_24C9F5558;
  v2 = (_QWORD *)(a1 + 72);
  if (*(_QWORD *)(a1 + 72))
  {
    v3 = *(std::__shared_weak_count **)(a1 + 80);
    if (v3)
    {
      p_shared_weak_owners = (unint64_t *)&v3->__shared_weak_owners_;
      do
        v5 = __ldxr(p_shared_weak_owners);
      while (__stxr(v5 + 1, p_shared_weak_owners));
      v6 = *(std::__shared_weak_count **)(a1 + 80);
      *v2 = 0;
      *(_QWORD *)(a1 + 80) = 0;
      if (v6)
      {
        p_shared_owners = (unint64_t *)&v6->__shared_owners_;
        do
          v8 = __ldaxr(p_shared_owners);
        while (__stlxr(v8 - 1, p_shared_owners));
        if (!v8)
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
      }
      while (v3->__shared_owners_ != -1)
        sched_yield();
    }
    else
    {
      *v2 = 0;
      *(_QWORD *)(a1 + 80) = 0;
    }
    v9 = *(uint64_t **)(a1 + 56);
    if (v9)
      sub_210217048(*v9);
    if (v3)
      std::__shared_weak_count::__release_weak(v3);
  }
  *(_QWORD *)(a1 + 144) = &off_24C9B2310;
  v10 = *(std::__shared_weak_count **)(a1 + 160);
  if (v10)
    std::__shared_weak_count::__release_weak(v10);
  *(_QWORD *)(a1 + 120) = &off_24C9F2BB8;
  v11 = *(std::__shared_weak_count **)(a1 + 136);
  if (v11)
    std::__shared_weak_count::__release_weak(v11);
  v12 = *(std::__shared_weak_count **)(a1 + 112);
  if (v12)
    std::__shared_weak_count::__release_weak(v12);
  v13 = *(_QWORD *)(a1 + 96);
  *(_QWORD *)(a1 + 88) = &off_24C9F2CC8;
  *(_QWORD *)(a1 + 96) = 0;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v14 = *(std::__shared_weak_count **)(a1 + 80);
  if (v14)
  {
    v15 = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  v17 = *(std::__shared_weak_count **)(a1 + 64);
  if (!v17)
    goto LABEL_34;
  v18 = (unint64_t *)&v17->__shared_owners_;
  do
    v19 = __ldaxr(v18);
  while (__stlxr(v19 - 1, v18));
  if (v19)
  {
LABEL_34:
    if ((*(char *)(a1 + 55) & 0x80000000) == 0)
      goto LABEL_35;
LABEL_38:
    operator delete(*(void **)(a1 + 32));
    if ((*(char *)(a1 + 31) & 0x80000000) == 0)
      return a1;
    goto LABEL_39;
  }
  ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
  std::__shared_weak_count::__release_weak(v17);
  if (*(char *)(a1 + 55) < 0)
    goto LABEL_38;
LABEL_35:
  if ((*(char *)(a1 + 31) & 0x80000000) == 0)
    return a1;
LABEL_39:
  operator delete(*(void **)(a1 + 8));
  return a1;
}

uint64_t sub_20EFDBB14(uint64_t a1)
{
  _QWORD *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_weak_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;

  *(_QWORD *)a1 = &off_24C9F54F0;
  v2 = (_QWORD *)(a1 + 72);
  if (*(_QWORD *)(a1 + 72))
  {
    v3 = *(std::__shared_weak_count **)(a1 + 80);
    if (v3)
    {
      p_shared_weak_owners = (unint64_t *)&v3->__shared_weak_owners_;
      do
        v5 = __ldxr(p_shared_weak_owners);
      while (__stxr(v5 + 1, p_shared_weak_owners));
      v6 = *(std::__shared_weak_count **)(a1 + 80);
      *v2 = 0;
      *(_QWORD *)(a1 + 80) = 0;
      if (v6)
      {
        p_shared_owners = (unint64_t *)&v6->__shared_owners_;
        do
          v8 = __ldaxr(p_shared_owners);
        while (__stlxr(v8 - 1, p_shared_owners));
        if (!v8)
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
      }
      while (v3->__shared_owners_ != -1)
        sched_yield();
    }
    else
    {
      *v2 = 0;
      *(_QWORD *)(a1 + 80) = 0;
    }
    v9 = *(uint64_t **)(a1 + 56);
    if (v9)
      sub_210217048(*v9);
    if (v3)
      std::__shared_weak_count::__release_weak(v3);
  }
  *(_QWORD *)(a1 + 144) = &off_24C9B2310;
  v10 = *(std::__shared_weak_count **)(a1 + 160);
  if (v10)
    std::__shared_weak_count::__release_weak(v10);
  *(_QWORD *)(a1 + 120) = &off_24C9F5520;
  v11 = *(std::__shared_weak_count **)(a1 + 136);
  if (v11)
    std::__shared_weak_count::__release_weak(v11);
  v12 = *(std::__shared_weak_count **)(a1 + 112);
  if (v12)
    std::__shared_weak_count::__release_weak(v12);
  v13 = *(_QWORD *)(a1 + 96);
  *(_QWORD *)(a1 + 88) = &off_24C9F2CC8;
  *(_QWORD *)(a1 + 96) = 0;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v14 = *(std::__shared_weak_count **)(a1 + 80);
  if (v14)
  {
    v15 = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  v17 = *(std::__shared_weak_count **)(a1 + 64);
  if (!v17)
    goto LABEL_34;
  v18 = (unint64_t *)&v17->__shared_owners_;
  do
    v19 = __ldaxr(v18);
  while (__stlxr(v19 - 1, v18));
  if (v19)
  {
LABEL_34:
    if ((*(char *)(a1 + 55) & 0x80000000) == 0)
      goto LABEL_35;
LABEL_38:
    operator delete(*(void **)(a1 + 32));
    if ((*(char *)(a1 + 31) & 0x80000000) == 0)
      return a1;
    goto LABEL_39;
  }
  ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
  std::__shared_weak_count::__release_weak(v17);
  if (*(char *)(a1 + 55) < 0)
    goto LABEL_38;
LABEL_35:
  if ((*(char *)(a1 + 31) & 0x80000000) == 0)
    return a1;
LABEL_39:
  operator delete(*(void **)(a1 + 8));
  return a1;
}

uint64_t sub_20EFDBCF8(uint64_t a1)
{
  _QWORD *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_weak_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;

  *(_QWORD *)a1 = &off_24C9F5488;
  v2 = (_QWORD *)(a1 + 72);
  if (*(_QWORD *)(a1 + 72))
  {
    v3 = *(std::__shared_weak_count **)(a1 + 80);
    if (v3)
    {
      p_shared_weak_owners = (unint64_t *)&v3->__shared_weak_owners_;
      do
        v5 = __ldxr(p_shared_weak_owners);
      while (__stxr(v5 + 1, p_shared_weak_owners));
      v6 = *(std::__shared_weak_count **)(a1 + 80);
      *v2 = 0;
      *(_QWORD *)(a1 + 80) = 0;
      if (v6)
      {
        p_shared_owners = (unint64_t *)&v6->__shared_owners_;
        do
          v8 = __ldaxr(p_shared_owners);
        while (__stlxr(v8 - 1, p_shared_owners));
        if (!v8)
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
      }
      while (v3->__shared_owners_ != -1)
        sched_yield();
    }
    else
    {
      *v2 = 0;
      *(_QWORD *)(a1 + 80) = 0;
    }
    v9 = *(uint64_t **)(a1 + 56);
    if (v9)
      sub_210217048(*v9);
    if (v3)
      std::__shared_weak_count::__release_weak(v3);
  }
  *(_QWORD *)(a1 + 144) = &off_24C9B2310;
  v10 = *(std::__shared_weak_count **)(a1 + 160);
  if (v10)
    std::__shared_weak_count::__release_weak(v10);
  *(_QWORD *)(a1 + 120) = &off_24C9F54B8;
  v11 = *(std::__shared_weak_count **)(a1 + 136);
  if (v11)
    std::__shared_weak_count::__release_weak(v11);
  v12 = *(std::__shared_weak_count **)(a1 + 112);
  if (v12)
    std::__shared_weak_count::__release_weak(v12);
  v13 = *(_QWORD *)(a1 + 96);
  *(_QWORD *)(a1 + 88) = &off_24C9F2BF0;
  *(_QWORD *)(a1 + 96) = 0;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v14 = *(std::__shared_weak_count **)(a1 + 80);
  if (v14)
  {
    v15 = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  v17 = *(std::__shared_weak_count **)(a1 + 64);
  if (!v17)
    goto LABEL_34;
  v18 = (unint64_t *)&v17->__shared_owners_;
  do
    v19 = __ldaxr(v18);
  while (__stlxr(v19 - 1, v18));
  if (v19)
  {
LABEL_34:
    if ((*(char *)(a1 + 55) & 0x80000000) == 0)
      goto LABEL_35;
LABEL_38:
    operator delete(*(void **)(a1 + 32));
    if ((*(char *)(a1 + 31) & 0x80000000) == 0)
      return a1;
    goto LABEL_39;
  }
  ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
  std::__shared_weak_count::__release_weak(v17);
  if (*(char *)(a1 + 55) < 0)
    goto LABEL_38;
LABEL_35:
  if ((*(char *)(a1 + 31) & 0x80000000) == 0)
    return a1;
LABEL_39:
  operator delete(*(void **)(a1 + 8));
  return a1;
}

uint64_t sub_20EFDBEDC(uint64_t a1)
{
  _QWORD *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_weak_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;

  *(_QWORD *)a1 = &off_24C9F5458;
  v2 = (_QWORD *)(a1 + 72);
  if (*(_QWORD *)(a1 + 72))
  {
    v3 = *(std::__shared_weak_count **)(a1 + 80);
    if (v3)
    {
      p_shared_weak_owners = (unint64_t *)&v3->__shared_weak_owners_;
      do
        v5 = __ldxr(p_shared_weak_owners);
      while (__stxr(v5 + 1, p_shared_weak_owners));
      v6 = *(std::__shared_weak_count **)(a1 + 80);
      *v2 = 0;
      *(_QWORD *)(a1 + 80) = 0;
      if (v6)
      {
        p_shared_owners = (unint64_t *)&v6->__shared_owners_;
        do
          v8 = __ldaxr(p_shared_owners);
        while (__stlxr(v8 - 1, p_shared_owners));
        if (!v8)
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
      }
      while (v3->__shared_owners_ != -1)
        sched_yield();
    }
    else
    {
      *v2 = 0;
      *(_QWORD *)(a1 + 80) = 0;
    }
    v9 = *(uint64_t **)(a1 + 56);
    if (v9)
      sub_210217048(*v9);
    if (v3)
      std::__shared_weak_count::__release_weak(v3);
  }
  *(_QWORD *)(a1 + 144) = &off_24C9B2310;
  v10 = *(std::__shared_weak_count **)(a1 + 160);
  if (v10)
    std::__shared_weak_count::__release_weak(v10);
  *(_QWORD *)(a1 + 120) = &off_24C9DECB0;
  v11 = *(std::__shared_weak_count **)(a1 + 136);
  if (v11)
    std::__shared_weak_count::__release_weak(v11);
  v12 = *(std::__shared_weak_count **)(a1 + 112);
  if (v12)
    std::__shared_weak_count::__release_weak(v12);
  v13 = *(_QWORD *)(a1 + 96);
  *(_QWORD *)(a1 + 88) = &off_24C9B4748;
  *(_QWORD *)(a1 + 96) = 0;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v14 = *(std::__shared_weak_count **)(a1 + 80);
  if (v14)
  {
    v15 = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  v17 = *(std::__shared_weak_count **)(a1 + 64);
  if (!v17)
    goto LABEL_34;
  v18 = (unint64_t *)&v17->__shared_owners_;
  do
    v19 = __ldaxr(v18);
  while (__stlxr(v19 - 1, v18));
  if (v19)
  {
LABEL_34:
    if ((*(char *)(a1 + 55) & 0x80000000) == 0)
      goto LABEL_35;
LABEL_38:
    operator delete(*(void **)(a1 + 32));
    if ((*(char *)(a1 + 31) & 0x80000000) == 0)
      return a1;
    goto LABEL_39;
  }
  ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
  std::__shared_weak_count::__release_weak(v17);
  if (*(char *)(a1 + 55) < 0)
    goto LABEL_38;
LABEL_35:
  if ((*(char *)(a1 + 31) & 0x80000000) == 0)
    return a1;
LABEL_39:
  operator delete(*(void **)(a1 + 8));
  return a1;
}

uint64_t sub_20EFDC0C0(uint64_t a1)
{
  _QWORD *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_weak_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;

  *(_QWORD *)a1 = &off_24C9F53F0;
  v2 = (_QWORD *)(a1 + 72);
  if (*(_QWORD *)(a1 + 72))
  {
    v3 = *(std::__shared_weak_count **)(a1 + 80);
    if (v3)
    {
      p_shared_weak_owners = (unint64_t *)&v3->__shared_weak_owners_;
      do
        v5 = __ldxr(p_shared_weak_owners);
      while (__stxr(v5 + 1, p_shared_weak_owners));
      v6 = *(std::__shared_weak_count **)(a1 + 80);
      *v2 = 0;
      *(_QWORD *)(a1 + 80) = 0;
      if (v6)
      {
        p_shared_owners = (unint64_t *)&v6->__shared_owners_;
        do
          v8 = __ldaxr(p_shared_owners);
        while (__stlxr(v8 - 1, p_shared_owners));
        if (!v8)
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
      }
      while (v3->__shared_owners_ != -1)
        sched_yield();
    }
    else
    {
      *v2 = 0;
      *(_QWORD *)(a1 + 80) = 0;
    }
    v9 = *(uint64_t **)(a1 + 56);
    if (v9)
      sub_210217048(*v9);
    if (v3)
      std::__shared_weak_count::__release_weak(v3);
  }
  *(_QWORD *)(a1 + 144) = &off_24C9B2310;
  v10 = *(std::__shared_weak_count **)(a1 + 160);
  if (v10)
    std::__shared_weak_count::__release_weak(v10);
  *(_QWORD *)(a1 + 120) = &off_24C9F5420;
  v11 = *(std::__shared_weak_count **)(a1 + 136);
  if (v11)
    std::__shared_weak_count::__release_weak(v11);
  v12 = *(std::__shared_weak_count **)(a1 + 112);
  if (v12)
    std::__shared_weak_count::__release_weak(v12);
  v13 = *(_QWORD *)(a1 + 96);
  *(_QWORD *)(a1 + 88) = &off_24C9F2B80;
  *(_QWORD *)(a1 + 96) = 0;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v14 = *(std::__shared_weak_count **)(a1 + 80);
  if (v14)
  {
    v15 = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  v17 = *(std::__shared_weak_count **)(a1 + 64);
  if (!v17)
    goto LABEL_34;
  v18 = (unint64_t *)&v17->__shared_owners_;
  do
    v19 = __ldaxr(v18);
  while (__stlxr(v19 - 1, v18));
  if (v19)
  {
LABEL_34:
    if ((*(char *)(a1 + 55) & 0x80000000) == 0)
      goto LABEL_35;
LABEL_38:
    operator delete(*(void **)(a1 + 32));
    if ((*(char *)(a1 + 31) & 0x80000000) == 0)
      return a1;
    goto LABEL_39;
  }
  ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
  std::__shared_weak_count::__release_weak(v17);
  if (*(char *)(a1 + 55) < 0)
    goto LABEL_38;
LABEL_35:
  if ((*(char *)(a1 + 31) & 0x80000000) == 0)
    return a1;
LABEL_39:
  operator delete(*(void **)(a1 + 8));
  return a1;
}

uint64_t sub_20EFDC2A4(uint64_t a1)
{
  uint64_t *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  *(_QWORD *)a1 = &off_24C9F53C0;
  v2 = (uint64_t *)(a1 + 72);
  sub_20EFDC3B0((uint64_t *)(a1 + 72));
  v3 = *(std::__shared_weak_count **)(a1 + 64);
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  if (!v3)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v3->__shared_owners_;
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (!v5)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
    sub_20EFDC3B0(v2);
    v6 = *(std::__shared_weak_count **)(a1 + 64);
    if (!v6)
      goto LABEL_11;
  }
  else
  {
LABEL_5:
    sub_20EFDC3B0(v2);
    v6 = *(std::__shared_weak_count **)(a1 + 64);
    if (!v6)
      goto LABEL_11;
  }
  v7 = (unint64_t *)&v6->__shared_owners_;
  do
    v8 = __ldaxr(v7);
  while (__stlxr(v8 - 1, v7));
  if (!v8)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
LABEL_11:
  if (*(char *)(a1 + 55) < 0)
  {
    operator delete(*(void **)(a1 + 32));
    if ((*(char *)(a1 + 31) & 0x80000000) == 0)
      return a1;
  }
  else if ((*(char *)(a1 + 31) & 0x80000000) == 0)
  {
    return a1;
  }
  operator delete(*(void **)(a1 + 8));
  return a1;
}

uint64_t *sub_20EFDC3B0(uint64_t *result)
{
  uint64_t v1;

  v1 = *result;
  *result = 0;
  if (v1)
  {
    sub_20EFDB74C(v1 + 1008);
    sub_20EFDB930(v1 + 840);
    sub_20EFDBB14(v1 + 672);
    sub_20EFDBCF8(v1 + 504);
    sub_20EFDBEDC(v1 + 336);
    sub_20ED217F4(v1 + 168);
    sub_20EFDC0C0(v1);
    JUMPOUT(0x212BC6398);
  }
  return result;
}

uint64_t sub_20EFDC428(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;

  *(_QWORD *)a1 = &off_24C9F50E8;
  v2 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 72) = 0;
  if (v2)
  {
    v3 = sub_20EFD1B80(v2);
    MEMORY[0x212BC6398](v3, 0x10B2C4085F70915);
  }
  v4 = *(std::__shared_weak_count **)(a1 + 64);
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
      v7 = *(_QWORD *)(a1 + 72);
      *(_QWORD *)(a1 + 72) = 0;
      if (!v7)
        goto LABEL_9;
      goto LABEL_8;
    }
  }
  v7 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 72) = 0;
  if (v7)
  {
LABEL_8:
    v8 = sub_20EFD1B80(v7);
    MEMORY[0x212BC6398](v8, 0x10B2C4085F70915);
  }
LABEL_9:
  v9 = *(std::__shared_weak_count **)(a1 + 64);
  if (!v9)
    goto LABEL_13;
  v10 = (unint64_t *)&v9->__shared_owners_;
  do
    v11 = __ldaxr(v10);
  while (__stlxr(v11 - 1, v10));
  if (v11)
  {
LABEL_13:
    if ((*(char *)(a1 + 55) & 0x80000000) == 0)
      goto LABEL_14;
LABEL_19:
    operator delete(*(void **)(a1 + 32));
    if ((*(char *)(a1 + 31) & 0x80000000) == 0)
      return a1;
    goto LABEL_20;
  }
  ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
  std::__shared_weak_count::__release_weak(v9);
  if (*(char *)(a1 + 55) < 0)
    goto LABEL_19;
LABEL_14:
  if ((*(char *)(a1 + 31) & 0x80000000) == 0)
    return a1;
LABEL_20:
  operator delete(*(void **)(a1 + 8));
  return a1;
}

uint64_t sub_20EFDC560(uint64_t result)
{
  uint64_t v1;

  if (result)
  {
    v1 = result;
    sub_20EFDC2A4(result + 168);
    sub_20EFDC428(v1 + 88);
    if (*(_BYTE *)(v1 + 80))
      sub_20EFD0900(v1);
    JUMPOUT(0x212BC6398);
  }
  return result;
}

uint64_t sub_20EFDC5B8(uint64_t a1, double a2)
{
  char *v3;
  void **v4;
  __int128 __dst;
  uint64_t v7;

  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_QWORD *)a1 = off_24C9F6440;
  *(double *)(a1 + 104) = a2;
  *(_BYTE *)(a1 + 112) = 0;
  *(_BYTE *)(a1 + 120) = 0;
  v3 = (char *)operator new(0x48uLL);
  strcpy(v3, "Determines if a map save request should be forwarded to the engine");
  strcpy((char *)(a1 + 8), "Save Trigger");
  *(_BYTE *)(a1 + 21) = 0;
  *(_WORD *)(a1 + 22) = 0;
  *(_BYTE *)(a1 + 31) = 12;
  sub_20E860C04(&__dst, v3, 0x42uLL);
  v4 = (void **)(a1 + 32);
  if (*(char *)(a1 + 55) < 0)
    operator delete(*v4);
  *(_OWORD *)v4 = __dst;
  *(_QWORD *)(a1 + 48) = v7;
  operator delete(v3);
  return a1;
}

void sub_20EFDC6AC(_Unwind_Exception *a1)
{
  uint64_t v1;
  void *v2;

  operator delete(v2);
  sub_20EFDC6DC(v1);
  _Unwind_Resume(a1);
}

void sub_20EFDC6C8(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20EFDC6DC(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20EFDC6DC(uint64_t a1)
{
  *(_QWORD *)a1 = off_24C9F64A8;
  if (*(char *)(a1 + 103) < 0)
  {
    operator delete(*(void **)(a1 + 80));
    if ((*(char *)(a1 + 79) & 0x80000000) == 0)
    {
LABEL_3:
      *(_QWORD *)a1 = off_24C9F64D0;
      if ((*(char *)(a1 + 55) & 0x80000000) == 0)
        goto LABEL_4;
LABEL_8:
      operator delete(*(void **)(a1 + 32));
      if ((*(char *)(a1 + 31) & 0x80000000) == 0)
        return a1;
      goto LABEL_9;
    }
  }
  else if ((*(char *)(a1 + 79) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*(void **)(a1 + 56));
  *(_QWORD *)a1 = off_24C9F64D0;
  if (*(char *)(a1 + 55) < 0)
    goto LABEL_8;
LABEL_4:
  if ((*(char *)(a1 + 31) & 0x80000000) == 0)
    return a1;
LABEL_9:
  operator delete(*(void **)(a1 + 8));
  return a1;
}

uint64_t sub_20EFDC788(uint64_t a1, uint64_t a2)
{
  double v2;
  int v3;
  double v4;
  unsigned __int8 v5;
  int v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v10;
  uint64_t v11;
  size_t v12;
  const char *v13;
  unsigned __int8 v15;
  const char *v16;
  size_t v17;
  _BYTE *v18;
  unint64_t v19;
  const char *v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  NSObject *v29;
  size_t v30;
  std::__shared_weak_count_vtbl *v31;
  std::__shared_weak_count *v32;
  std::__shared_weak_count *v33;
  unint64_t *p_shared_owners;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  uint64_t v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  void *v62;
  std::__shared_weak_count *v63;
  unint64_t *v64;
  unint64_t v65;
  uint64_t *v66[3];
  int v67;
  const char *v68;
  int v69;
  const char *v70;
  uint64_t v71;
  std::__shared_weak_count *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  _BYTE object[24];
  __int128 v77;
  void *__p[2];
  unint64_t v79;
  char v80;
  uint64_t v81;

  v81 = *MEMORY[0x24BDAC8D0];
  v2 = *(double *)(a2 + 112) + *(double *)(a2 + 120);
  v3 = *(unsigned __int8 *)(a1 + 120);
  if (*(_BYTE *)(a1 + 120))
  {
    v4 = *(double *)(a1 + 112);
    if (v2 > v4 && v2 - v4 > *(double *)(a1 + 104))
    {
      *(double *)(a1 + 112) = v2;
      kdebug_trace();
      v5 = atomic_load((unsigned __int8 *)&qword_254A61878);
      if ((v5 & 1) == 0 && __cxa_guard_acquire(&qword_254A61878))
      {
        sub_21021D3D8(v66);
        sub_20E8610C0(object, "cv3d.vio.mapping_io");
        sub_20E8C4068(v66, (uint64_t)object, &qword_254A61870);
        if ((object[23] & 0x80000000) != 0)
          operator delete(*(void **)object);
        __cxa_guard_release(&qword_254A61878);
      }
      v73 = qword_254A61870;
      if (**(int **)(qword_254A61870 + 56) > 2)
        goto LABEL_101;
      v6 = *(unsigned __int8 *)(qword_254A61870 + 72);
      v7 = sub_20E8C31DC(qword_254A61870, "OSLogSurrogateAppender", 1, 0);
      v8 = v7;
      if (!v6 && v7 == 0)
        goto LABEL_101;
      v66[0] = &v73;
      v66[1] = (uint64_t *)std::chrono::steady_clock::now().__d_.__rep_;
      v66[2] = (uint64_t *)std::chrono::system_clock::now().__d_.__rep_;
      v67 = 2;
      v68 = "unknown file";
      v69 = 52;
      v71 = 0;
      v72 = 0;
      v70 = "unknown function";
      v10 = *v66[0];
      v11 = *v66[0] + 16;
      if (*(char *)(*v66[0] + 39) < 0)
      {
        v13 = *(const char **)(v10 + 16);
        v12 = *(_QWORD *)(v10 + 24);
      }
      else
      {
        v12 = *(unsigned __int8 *)(*v66[0] + 39);
        v13 = (const char *)(*v66[0] + 16);
      }
      v15 = atomic_load((unsigned __int8 *)&qword_254A4A510);
      if ((v15 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
      {
        sub_20E9E46F8((uint64_t)object);
        sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)object);
        if ((_BYTE)v77 && (object[23] & 0x80000000) != 0)
          operator delete(*(void **)object);
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
        __cxa_guard_release(&qword_254A4A510);
      }
      if (byte_254A4A4F8[23] >= 0)
        v16 = byte_254A4A4F8;
      else
        v16 = *(const char **)byte_254A4A4F8;
      if (byte_254A4A4F8[23] >= 0)
        v17 = byte_254A4A4F8[23];
      else
        v17 = *(_QWORD *)&byte_254A4A4F8[8];
      *(_QWORD *)object = os_log_create(v16, v13);
      v18 = &object[8];
      if (v17 > 0x7FFFFFFFFFFFFFF7)
        sub_20E860B7C();
      if (v17 >= 0x17)
      {
        v19 = v8;
        v20 = v13;
        v21 = v10;
        v22 = v6;
        v23 = v11;
        v24 = (v17 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v17 | 7) != 0x17)
          v24 = v17 | 7;
        v25 = v24 + 1;
        v18 = operator new(v24 + 1);
        *(_QWORD *)&object[16] = v17;
        *(_QWORD *)&v77 = v25 | 0x8000000000000000;
        *(_QWORD *)&object[8] = v18;
        v11 = v23;
        v6 = v22;
        v10 = v21;
        v13 = v20;
        v8 = v19;
      }
      else
      {
        BYTE7(v77) = v17;
        if (!v17)
        {
LABEL_31:
          v18[v17] = 0;
          BYTE8(v77) = 1;
          v26 = __p;
          if (v12 > 0x7FFFFFFFFFFFFFF7)
            sub_20E860B7C();
          if (v12 >= 0x17)
          {
            v27 = (v12 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v12 | 7) != 0x17)
              v27 = v12 | 7;
            v28 = v27 + 1;
            v26 = operator new(v27 + 1);
            __p[1] = (void *)v12;
            v79 = v28 | 0x8000000000000000;
            __p[0] = v26;
          }
          else
          {
            HIBYTE(v79) = v12;
            if (!v12)
              goto LABEL_39;
          }
          memmove(v26, v13, v12);
LABEL_39:
          *((_BYTE *)v26 + v12) = 0;
          v80 = 1;
          v29 = *(NSObject **)object;
          if (SHIBYTE(v79) < 0)
            operator delete(__p[0]);
          if (BYTE8(v77) && SBYTE7(v77) < 0)
            operator delete(*(void **)&object[8]);
          if (*(_QWORD *)object)
            os_release(*(void **)object);
          if (v8 && *(_QWORD *)(v8 + 24))
          {
            v30 = _os_log_pack_size();
            v31 = (std::__shared_weak_count_vtbl *)operator new(v30, (std::align_val_t)8uLL);
            v32 = (std::__shared_weak_count *)operator new();
            v33 = v32;
            v32->__shared_owners_ = 0;
            p_shared_owners = (unint64_t *)&v32->__shared_owners_;
            v32->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
            v32->__shared_weak_owners_ = 0;
            v32[1].__vftable = v31;
            *(_QWORD *)object = v31;
            *(_QWORD *)&object[8] = v31;
            *(_QWORD *)&object[16] = v32;
            do
              v35 = __ldxr(p_shared_owners);
            while (__stxr(v35 + 1, p_shared_owners));
            v77 = 0uLL;
            __p[0] = 0;
            do
              v36 = __ldaxr(p_shared_owners);
            while (__stlxr(v36 - 1, p_shared_owners));
            if (!v36)
            {
              ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
              std::__shared_weak_count::__release_weak(v33);
            }
            v37 = *(_QWORD *)object;
            v38 = _os_log_pack_fill();
            *(_DWORD *)v38 = 134217984;
            *(double *)(v38 + 4) = v2;
            v39 = operator new();
            v40 = *(unsigned __int8 *)(v10 + 39);
            if ((v40 & 0x80u) == 0)
              v41 = v11;
            else
              v41 = *(_QWORD *)(v10 + 16);
            if ((v40 & 0x80u) != 0)
              v40 = *(_QWORD *)(v10 + 24);
            *(_QWORD *)v39 = v37;
            *(_OWORD *)(v39 + 8) = *(_OWORD *)&object[8];
            *(_QWORD *)&object[8] = 0;
            *(_QWORD *)&object[16] = 0;
            *(_OWORD *)(v39 + 24) = v77;
            v77 = 0uLL;
            *(_QWORD *)(v39 + 40) = v41;
            *(_QWORD *)(v39 + 48) = v40;
            *(_BYTE *)(v39 + 56) = 2;
            v74 = 0;
            v75 = v39;
            (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(v8 + 24) + 40))(*(_QWORD *)(v8 + 24), &v75);
            v42 = v75;
            v75 = 0;
            if (v42)
            {
              v43 = *(std::__shared_weak_count **)(v42 + 32);
              if (v43)
              {
                v44 = (unint64_t *)&v43->__shared_owners_;
                do
                  v45 = __ldaxr(v44);
                while (__stlxr(v45 - 1, v44));
                if (!v45)
                {
                  ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
                  std::__shared_weak_count::__release_weak(v43);
                }
              }
              v46 = *(std::__shared_weak_count **)(v42 + 16);
              if (v46)
              {
                v47 = (unint64_t *)&v46->__shared_owners_;
                do
                  v48 = __ldaxr(v47);
                while (__stlxr(v48 - 1, v47));
                if (!v48)
                {
                  ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
                  std::__shared_weak_count::__release_weak(v46);
                }
              }
              MEMORY[0x212BC6398](v42, 0x10F0C40B62ED6C6);
              v49 = v74;
              v74 = 0;
              if (v49)
              {
                v50 = *(std::__shared_weak_count **)(v49 + 32);
                if (v50)
                {
                  v51 = (unint64_t *)&v50->__shared_owners_;
                  do
                    v52 = __ldaxr(v51);
                  while (__stlxr(v52 - 1, v51));
                  if (!v52)
                  {
                    ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
                    std::__shared_weak_count::__release_weak(v50);
                  }
                }
                v53 = *(std::__shared_weak_count **)(v49 + 16);
                if (v53)
                {
                  v54 = (unint64_t *)&v53->__shared_owners_;
                  do
                    v55 = __ldaxr(v54);
                  while (__stlxr(v55 - 1, v54));
                  if (!v55)
                  {
                    ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
                    std::__shared_weak_count::__release_weak(v53);
                  }
                }
                MEMORY[0x212BC6398](v49, 0x10F0C40B62ED6C6);
              }
            }
            v56 = (std::__shared_weak_count *)*((_QWORD *)&v77 + 1);
            if (*((_QWORD *)&v77 + 1))
            {
              v57 = (unint64_t *)(*((_QWORD *)&v77 + 1) + 8);
              do
                v58 = __ldaxr(v57);
              while (__stlxr(v58 - 1, v57));
              if (!v58)
              {
                ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
                std::__shared_weak_count::__release_weak(v56);
              }
            }
            v59 = *(std::__shared_weak_count **)&object[16];
            if (*(_QWORD *)&object[16])
            {
              v60 = (unint64_t *)(*(_QWORD *)&object[16] + 8);
              do
                v61 = __ldaxr(v60);
              while (__stlxr(v61 - 1, v60));
              if (!v61)
              {
                ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
                std::__shared_weak_count::__release_weak(v59);
              }
            }
          }
          else
          {
            os_log_type_enabled(v29, OS_LOG_TYPE_DEBUG);
            *(_DWORD *)object = 134217984;
            *(double *)&object[4] = v2;
            v62 = (void *)_os_log_send_and_compose_impl();
            if (v62)
              free(v62);
          }
          if (v6)
          {
            sub_20E8C003C((uint64_t)v66, "Requesting save with at timestamp [%f]", v2);
            sub_20E863570((uint64_t)v66);
          }
          sub_20E863570((uint64_t)v66);
          v63 = v72;
          if (v72)
          {
            v64 = (unint64_t *)&v72->__shared_owners_;
            do
              v65 = __ldaxr(v64);
            while (__stlxr(v65 - 1, v64));
            if (!v65)
            {
              ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
              std::__shared_weak_count::__release_weak(v63);
            }
          }
LABEL_101:
          v3 = 1;
          return (v3 << 8);
        }
      }
      memmove(v18, v16, v17);
      goto LABEL_31;
    }
    v3 = 0;
  }
  else
  {
    *(double *)(a1 + 112) = v2;
    *(_BYTE *)(a1 + 120) = 1;
  }
  return (v3 << 8);
}

void sub_20EFDCF90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,char a29)
{
  if (a29)
  {
    if (a28 < 0)
      operator delete(__p);
  }
  __cxa_guard_abort(&qword_254A4A510);
  sub_20E863714((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void sub_20EFDCFD0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a28 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A61878);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A61878);
  _Unwind_Resume(a1);
}

void sub_20EFDD014(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  va_list va1;
  uint64_t v17;
  va_list va2;
  va_list va3;

  va_start(va3, a3);
  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v15 = va_arg(va2, _QWORD);
  va_copy(va3, va2);
  v17 = va_arg(va3, _QWORD);
  sub_20E86E8C4((uint64_t *)va2);
  sub_20E86E8C4((uint64_t *)va1);
  sub_20E86E658((uint64_t)va3);
  sub_20E863714((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20EFDD040(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  sub_20E86E658((uint64_t)va1);
  sub_20E863714((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20EFDD05C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v3;
  va_list va;

  va_start(va, a3);
  MEMORY[0x212BC6398](v3, 0x10D0C40B950D02ALL);
  sub_20E863714((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20EFDD088(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E863714((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20EFDD09C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *object,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29,char a30)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  sub_20E860DA4(exception_object);
}

uint64_t sub_20EFDD118(uint64_t a1)
{
  *(_QWORD *)a1 = off_24C9F64A8;
  if (*(char *)(a1 + 103) < 0)
  {
    operator delete(*(void **)(a1 + 80));
    if ((*(char *)(a1 + 79) & 0x80000000) == 0)
    {
LABEL_3:
      *(_QWORD *)a1 = off_24C9F64D0;
      if ((*(char *)(a1 + 55) & 0x80000000) == 0)
        goto LABEL_4;
LABEL_8:
      operator delete(*(void **)(a1 + 32));
      if ((*(char *)(a1 + 31) & 0x80000000) == 0)
        return a1;
      goto LABEL_9;
    }
  }
  else if ((*(char *)(a1 + 79) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*(void **)(a1 + 56));
  *(_QWORD *)a1 = off_24C9F64D0;
  if (*(char *)(a1 + 55) < 0)
    goto LABEL_8;
LABEL_4:
  if ((*(char *)(a1 + 31) & 0x80000000) == 0)
    return a1;
LABEL_9:
  operator delete(*(void **)(a1 + 8));
  return a1;
}

void sub_20EFDD1C4(uint64_t a1)
{
  *(_QWORD *)a1 = off_24C9F64A8;
  if (*(char *)(a1 + 103) < 0)
  {
    operator delete(*(void **)(a1 + 80));
    if ((*(char *)(a1 + 79) & 0x80000000) == 0)
    {
LABEL_3:
      *(_QWORD *)a1 = off_24C9F64D0;
      if ((*(char *)(a1 + 55) & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_8;
    }
  }
  else if ((*(char *)(a1 + 79) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*(void **)(a1 + 56));
  *(_QWORD *)a1 = off_24C9F64D0;
  if ((*(char *)(a1 + 55) & 0x80000000) == 0)
  {
LABEL_4:
    if ((*(char *)(a1 + 31) & 0x80000000) == 0)
      goto LABEL_10;
    goto LABEL_9;
  }
LABEL_8:
  operator delete(*(void **)(a1 + 32));
  if ((*(char *)(a1 + 31) & 0x80000000) == 0)
LABEL_10:
    JUMPOUT(0x212BC6398);
LABEL_9:
  operator delete(*(void **)(a1 + 8));
  goto LABEL_10;
}

uint64_t sub_20EFDD284(uint64_t a1)
{
  unsigned __int8 *v2;
  int v3;
  unint64_t v4;
  unint64_t v5;
  const char *v6;
  size_t v7;
  _DWORD *v8;
  int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  char *v13;
  char *v14;
  int v15;
  unint64_t v16;
  unint64_t v17;
  const char *v19;
  size_t v20;
  int v21;
  unint64_t v22;
  unint64_t v23;
  const char *v25;
  size_t v26;
  unsigned __int8 v27;
  const char *v28;
  size_t v29;
  __int128 *v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  NSObject *v36;
  size_t v37;
  std::__shared_weak_count_vtbl *v38;
  std::__shared_weak_count *v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  unint64_t v43;
  void *v44;
  _DWORD *v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  char *v57;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  std::__shared_weak_count *v64;
  int v65;
  unint64_t *v66;
  unint64_t v67;
  std::__shared_weak_count *v68;
  unint64_t *v69;
  unint64_t v70;
  int v71;
  void *v72;
  std::__shared_weak_count *v73;
  unint64_t *v74;
  unint64_t v75;
  uint64_t v76;
  unsigned __int8 v77;
  const char *v78;
  size_t v79;
  __int128 *v80;
  uint64_t v81;
  uint64_t v82;
  void *v83;
  uint64_t v84;
  uint64_t v85;
  NSObject *v86;
  size_t v87;
  std::__shared_weak_count_vtbl *v88;
  std::__shared_weak_count *v89;
  std::__shared_weak_count *v90;
  unint64_t *v91;
  unint64_t v92;
  unint64_t v93;
  void *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  std::__shared_weak_count *v99;
  unint64_t *v100;
  unint64_t v101;
  std::__shared_weak_count *v102;
  unint64_t *v103;
  unint64_t v104;
  char *v105;
  std::__shared_weak_count *v106;
  unint64_t *v107;
  unint64_t v108;
  std::__shared_weak_count *v109;
  unint64_t *v110;
  unint64_t v111;
  std::__shared_weak_count *v112;
  int v113;
  unint64_t *v114;
  unint64_t v115;
  std::__shared_weak_count *v116;
  unint64_t *v117;
  unint64_t v118;
  void *v119;
  std::__shared_weak_count *v120;
  unint64_t *v121;
  unint64_t v122;
  unsigned __int8 v123;
  const char *v124;
  size_t v125;
  __int128 *v126;
  uint64_t v127;
  uint64_t v128;
  void *p_p;
  uint64_t v130;
  uint64_t v131;
  NSObject *v132;
  size_t v133;
  std::__shared_weak_count_vtbl *v134;
  std::__shared_weak_count *v135;
  std::__shared_weak_count *v136;
  unint64_t *p_shared_owners;
  unint64_t v138;
  unint64_t v139;
  void *v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  std::__shared_weak_count *v145;
  unint64_t *v146;
  unint64_t v147;
  std::__shared_weak_count *v148;
  unint64_t *v149;
  unint64_t v150;
  char *v151;
  std::__shared_weak_count *v152;
  unint64_t *v153;
  unint64_t v154;
  std::__shared_weak_count *v155;
  unint64_t *v156;
  unint64_t v157;
  std::__shared_weak_count *v158;
  int v159;
  unint64_t *v160;
  unint64_t v161;
  std::__shared_weak_count *v162;
  unint64_t *v163;
  unint64_t v164;
  void *v165;
  unint64_t *v166;
  unsigned __int8 v167;
  uint64_t v168;
  const char *v169;
  NSObject *v170;
  uint64_t v171;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  int v179;
  int v180;
  int v181;
  uint64_t *v182;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep rep;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v184;
  int v185;
  const char *v186;
  int v187;
  const char *v188;
  uint64_t v189;
  std::__shared_weak_count *v190;
  uint64_t v191;
  char v192;
  char *category[2];
  _QWORD v194[2];
  void *object;
  __int128 v196;
  __int128 v197;
  void *__p;
  size_t v199;
  unint64_t v200;
  char v201;
  uint64_t v202;

  v202 = *MEMORY[0x24BDAC8D0];
  v2 = (unsigned __int8 *)(a1 + 128);
  v192 = *(_BYTE *)(a1 + 128);
  if (v192 == 2)
  {
    if (*(_BYTE *)(a1 + 44))
    {
      if (*(_DWORD *)(a1 + 48) < *(_DWORD *)(a1 + 12))
      {
        v8 = (_DWORD *)(a1 + 8);
        if (*(_DWORD *)(a1 + 36) < *(_DWORD *)(a1 + 8))
          goto LABEL_296;
        sub_20EFDECA0(&v191);
        if (**(int **)(v191 + 56) <= 3)
        {
          v9 = *(unsigned __int8 *)(v191 + 72);
          v10 = sub_20E8C31DC(v191, "OSLogSurrogateAppender", 1, 0);
          v11 = v10 ? v10 + 16 : 0;
          if (v9 || v10)
          {
            v182 = &v191;
            rep = std::chrono::steady_clock::now().__d_.__rep_;
            v184 = std::chrono::system_clock::now().__d_.__rep_;
            v185 = 3;
            v186 = "unknown file";
            v187 = 83;
            v189 = 0;
            v190 = 0;
            v188 = "unknown function";
            v12 = (uint64_t *)(v191 + 16);
            if (*(char *)(v191 + 39) < 0)
            {
              v14 = *(char **)(v191 + 16);
              v13 = *(char **)(v191 + 24);
            }
            else
            {
              v13 = (char *)*(unsigned __int8 *)(v191 + 39);
              v14 = (char *)(*v182 + 16);
            }
            category[0] = v14;
            category[1] = v13;
            v167 = atomic_load((unsigned __int8 *)&qword_254A4A510);
            if ((v167 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
            {
              sub_20E9E46F8((uint64_t)&object);
              sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)&object);
              if ((_BYTE)v197 && SHIBYTE(v196) < 0)
                operator delete(object);
              __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
              __cxa_guard_release(&qword_254A4A510);
            }
            v168 = byte_254A4A4F8[23];
            if (byte_254A4A4F8[23] >= 0)
            {
              v169 = byte_254A4A4F8;
            }
            else
            {
              v168 = *(_QWORD *)&byte_254A4A4F8[8];
              v169 = *(const char **)byte_254A4A4F8;
            }
            v194[0] = v169;
            v194[1] = v168;
            object = os_log_create(v169, category[0]);
            sub_20E86E5A8(&v196, (uint64_t)v194);
            sub_20E86E5A8(&__p, (uint64_t)category);
            v170 = object;
            sub_20E86E44C((uint64_t)&object);
            sub_20EFDF000(v11, v12, v170, OS_LOG_TYPE_INFO, (int *)(a1 + 8));
            if (v9)
            {
              sub_20E8C003C((uint64_t)&v182, "Switching to VO because VIO has been failing health check for %u frames", *v8);
              sub_20E863570((uint64_t)&v182);
            }
            sub_20E863714((uint64_t)&v182);
          }
        }
        goto LABEL_295;
      }
      sub_20EFDECA0(&v191);
      if (**(int **)(v191 + 56) <= 3)
      {
        v21 = *(unsigned __int8 *)(v191 + 72);
        v22 = sub_20E8C31DC(v191, "OSLogSurrogateAppender", 1, 0);
        v23 = v22;
        if (v21 || v22 != 0)
        {
          v181 = v21;
          v182 = &v191;
          rep = std::chrono::steady_clock::now().__d_.__rep_;
          v184 = std::chrono::system_clock::now().__d_.__rep_;
          v185 = 3;
          v186 = "unknown file";
          v187 = 77;
          v189 = 0;
          v190 = 0;
          v188 = "unknown function";
          v25 = (const char *)(v191 + 16);
          v175 = v191 + 16;
          v178 = v191;
          if (*(char *)(v191 + 39) < 0)
          {
            v25 = *(const char **)(v191 + 16);
            v26 = *(_QWORD *)(v191 + 24);
          }
          else
          {
            v26 = *(unsigned __int8 *)(v191 + 39);
          }
          v123 = atomic_load((unsigned __int8 *)&qword_254A4A510);
          if ((v123 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
          {
            sub_20E9E46F8((uint64_t)&object);
            sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)&object);
            if ((_BYTE)v197 && SHIBYTE(v196) < 0)
              operator delete(object);
            __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
            __cxa_guard_release(&qword_254A4A510);
          }
          if (byte_254A4A4F8[23] >= 0)
            v124 = byte_254A4A4F8;
          else
            v124 = *(const char **)byte_254A4A4F8;
          if (byte_254A4A4F8[23] >= 0)
            v125 = byte_254A4A4F8[23];
          else
            v125 = *(_QWORD *)&byte_254A4A4F8[8];
          object = os_log_create(v124, v25);
          v126 = &v196;
          if (v125 > 0x7FFFFFFFFFFFFFF7)
            sub_20E860B7C();
          if (v125 >= 0x17)
          {
            v127 = (v125 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v125 | 7) != 0x17)
              v127 = v125 | 7;
            v128 = v127 + 1;
            v126 = (__int128 *)operator new(v127 + 1);
            *((_QWORD *)&v196 + 1) = v125;
            *(_QWORD *)&v197 = v128 | 0x8000000000000000;
            *(_QWORD *)&v196 = v126;
          }
          else
          {
            BYTE7(v197) = v125;
            if (!v125)
            {
LABEL_220:
              *((_BYTE *)v126 + v125) = 0;
              BYTE8(v197) = 1;
              p_p = &__p;
              if (v26 > 0x7FFFFFFFFFFFFFF7)
                sub_20E860B7C();
              if (v26 >= 0x17)
              {
                v130 = (v26 & 0xFFFFFFFFFFFFFFF8) + 8;
                if ((v26 | 7) != 0x17)
                  v130 = v26 | 7;
                v131 = v130 + 1;
                p_p = operator new(v130 + 1);
                v199 = v26;
                v200 = v131 | 0x8000000000000000;
                __p = p_p;
              }
              else
              {
                HIBYTE(v200) = v26;
                if (!v26)
                  goto LABEL_228;
              }
              memmove(p_p, v25, v26);
LABEL_228:
              *((_BYTE *)p_p + v26) = 0;
              v201 = 1;
              v132 = object;
              if (SHIBYTE(v200) < 0)
                operator delete(__p);
              if (BYTE8(v197) && SBYTE7(v197) < 0)
                operator delete((void *)v196);
              if (object)
                os_release(object);
              if (v23 && *(_QWORD *)(v23 + 24))
              {
                v133 = _os_log_pack_size();
                v134 = (std::__shared_weak_count_vtbl *)operator new(v133, (std::align_val_t)8uLL);
                v135 = (std::__shared_weak_count *)operator new();
                v136 = v135;
                v135->__shared_owners_ = 0;
                p_shared_owners = (unint64_t *)&v135->__shared_owners_;
                v135->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
                v135->__shared_weak_owners_ = 0;
                v135[1].__vftable = v134;
                object = v134;
                *(_QWORD *)&v196 = v134;
                *((_QWORD *)&v196 + 1) = v135;
                do
                  v138 = __ldxr(p_shared_owners);
                while (__stxr(v138 + 1, p_shared_owners));
                v197 = 0uLL;
                __p = 0;
                do
                  v139 = __ldaxr(p_shared_owners);
                while (__stlxr(v139 - 1, p_shared_owners));
                if (!v139)
                {
                  ((void (*)(std::__shared_weak_count *))v135->__on_zero_shared)(v135);
                  std::__shared_weak_count::__release_weak(v136);
                }
                v140 = object;
                *(_WORD *)_os_log_pack_fill() = 0;
                v141 = operator new();
                v142 = *(unsigned __int8 *)(v178 + 39);
                v143 = v175;
                if ((v142 & 0x80u) != 0)
                {
                  v143 = *(_QWORD *)(v178 + 16);
                  v142 = *(_QWORD *)(v178 + 24);
                }
                *(_QWORD *)v141 = v140;
                *(_OWORD *)(v141 + 8) = v196;
                v196 = 0uLL;
                *(_OWORD *)(v141 + 24) = v197;
                v197 = 0uLL;
                *(_QWORD *)(v141 + 40) = v143;
                *(_QWORD *)(v141 + 48) = v142;
                *(_BYTE *)(v141 + 56) = 1;
                category[0] = 0;
                v194[0] = v141;
                (*(void (**)(_QWORD, _QWORD *))(**(_QWORD **)(v23 + 24) + 40))(*(_QWORD *)(v23 + 24), v194);
                v144 = v194[0];
                v194[0] = 0;
                if (v144)
                {
                  v145 = *(std::__shared_weak_count **)(v144 + 32);
                  if (v145)
                  {
                    v146 = (unint64_t *)&v145->__shared_owners_;
                    do
                      v147 = __ldaxr(v146);
                    while (__stlxr(v147 - 1, v146));
                    if (!v147)
                    {
                      ((void (*)(std::__shared_weak_count *))v145->__on_zero_shared)(v145);
                      std::__shared_weak_count::__release_weak(v145);
                    }
                  }
                  v148 = *(std::__shared_weak_count **)(v144 + 16);
                  if (v148)
                  {
                    v149 = (unint64_t *)&v148->__shared_owners_;
                    do
                      v150 = __ldaxr(v149);
                    while (__stlxr(v150 - 1, v149));
                    if (!v150)
                    {
                      ((void (*)(std::__shared_weak_count *))v148->__on_zero_shared)(v148);
                      std::__shared_weak_count::__release_weak(v148);
                    }
                  }
                  MEMORY[0x212BC6398](v144, 0x10F0C40B62ED6C6);
                  v151 = category[0];
                  category[0] = 0;
                  if (v151)
                  {
                    v152 = (std::__shared_weak_count *)*((_QWORD *)v151 + 4);
                    if (v152)
                    {
                      v153 = (unint64_t *)&v152->__shared_owners_;
                      do
                        v154 = __ldaxr(v153);
                      while (__stlxr(v154 - 1, v153));
                      if (!v154)
                      {
                        ((void (*)(std::__shared_weak_count *))v152->__on_zero_shared)(v152);
                        std::__shared_weak_count::__release_weak(v152);
                      }
                    }
                    v155 = (std::__shared_weak_count *)*((_QWORD *)v151 + 2);
                    if (v155)
                    {
                      v156 = (unint64_t *)&v155->__shared_owners_;
                      do
                        v157 = __ldaxr(v156);
                      while (__stlxr(v157 - 1, v156));
                      if (!v157)
                      {
                        ((void (*)(std::__shared_weak_count *))v155->__on_zero_shared)(v155);
                        std::__shared_weak_count::__release_weak(v155);
                      }
                    }
                    MEMORY[0x212BC6398](v151, 0x10F0C40B62ED6C6);
                  }
                }
                v158 = (std::__shared_weak_count *)*((_QWORD *)&v197 + 1);
                v159 = v181;
                if (*((_QWORD *)&v197 + 1))
                {
                  v160 = (unint64_t *)(*((_QWORD *)&v197 + 1) + 8);
                  do
                    v161 = __ldaxr(v160);
                  while (__stlxr(v161 - 1, v160));
                  if (!v161)
                  {
                    ((void (*)(std::__shared_weak_count *))v158->__on_zero_shared)(v158);
                    std::__shared_weak_count::__release_weak(v158);
                  }
                }
                v162 = (std::__shared_weak_count *)*((_QWORD *)&v196 + 1);
                if (*((_QWORD *)&v196 + 1))
                {
                  v163 = (unint64_t *)(*((_QWORD *)&v196 + 1) + 8);
                  do
                    v164 = __ldaxr(v163);
                  while (__stlxr(v164 - 1, v163));
                  if (!v164)
                  {
                    ((void (*)(std::__shared_weak_count *))v162->__on_zero_shared)(v162);
                    std::__shared_weak_count::__release_weak(v162);
                  }
                }
              }
              else
              {
                os_log_type_enabled(v132, OS_LOG_TYPE_INFO);
                LOWORD(object) = 0;
                v165 = (void *)_os_log_send_and_compose_impl();
                v159 = v181;
                if (v165)
                  free(v165);
              }
              if (v159)
              {
                sub_20E8C003C((uint64_t)&v182, "Switching to VO because IMU and camera do not agree on motion.");
                sub_20E863570((uint64_t)&v182);
              }
              sub_20E863570((uint64_t)&v182);
              v120 = v190;
              if (!v190)
                goto LABEL_295;
              v166 = (unint64_t *)&v190->__shared_owners_;
              do
                v122 = __ldaxr(v166);
              while (__stlxr(v122 - 1, v166));
              goto LABEL_285;
            }
          }
          memmove(v126, v124, v125);
          goto LABEL_220;
        }
      }
LABEL_295:
      *(_BYTE *)(a1 + 128) = 1;
      *(_QWORD *)(a1 + 72) = *(_QWORD *)(a1 + 120);
      *(_QWORD *)(a1 + 32) = 0;
      *(_DWORD *)(a1 + 40) = -1;
      *(_BYTE *)(a1 + 44) = 0;
      *(_DWORD *)(a1 + 48) = 0;
      kdebug_trace();
      goto LABEL_296;
    }
    sub_20EFDECA0(&v191);
    if (**(int **)(v191 + 56) > 3)
      goto LABEL_295;
    v15 = *(unsigned __int8 *)(v191 + 72);
    v16 = sub_20E8C31DC(v191, "OSLogSurrogateAppender", 1, 0);
    v17 = v16;
    if (!v15 && v16 == 0)
      goto LABEL_295;
    v180 = v15;
    v182 = &v191;
    rep = std::chrono::steady_clock::now().__d_.__rep_;
    v184 = std::chrono::system_clock::now().__d_.__rep_;
    v185 = 3;
    v186 = "unknown file";
    v187 = 73;
    v189 = 0;
    v190 = 0;
    v188 = "unknown function";
    v19 = (const char *)(v191 + 16);
    v174 = v191 + 16;
    v177 = v191;
    if (*(char *)(v191 + 39) < 0)
    {
      v19 = *(const char **)(v191 + 16);
      v20 = *(_QWORD *)(v191 + 24);
    }
    else
    {
      v20 = *(unsigned __int8 *)(v191 + 39);
    }
    v77 = atomic_load((unsigned __int8 *)&qword_254A4A510);
    if ((v77 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
    {
      sub_20E9E46F8((uint64_t)&object);
      sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)&object);
      if ((_BYTE)v197 && SHIBYTE(v196) < 0)
        operator delete(object);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
      __cxa_guard_release(&qword_254A4A510);
    }
    if (byte_254A4A4F8[23] >= 0)
      v78 = byte_254A4A4F8;
    else
      v78 = *(const char **)byte_254A4A4F8;
    if (byte_254A4A4F8[23] >= 0)
      v79 = byte_254A4A4F8[23];
    else
      v79 = *(_QWORD *)&byte_254A4A4F8[8];
    object = os_log_create(v78, v19);
    v80 = &v196;
    if (v79 > 0x7FFFFFFFFFFFFFF7)
      sub_20E860B7C();
    if (v79 >= 0x17)
    {
      v81 = (v79 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v79 | 7) != 0x17)
        v81 = v79 | 7;
      v82 = v81 + 1;
      v80 = (__int128 *)operator new(v81 + 1);
      *((_QWORD *)&v196 + 1) = v79;
      *(_QWORD *)&v197 = v82 | 0x8000000000000000;
      *(_QWORD *)&v196 = v80;
    }
    else
    {
      BYTE7(v197) = v79;
      if (!v79)
      {
LABEL_138:
        *((_BYTE *)v80 + v79) = 0;
        BYTE8(v197) = 1;
        v83 = &__p;
        if (v20 > 0x7FFFFFFFFFFFFFF7)
          sub_20E860B7C();
        if (v20 >= 0x17)
        {
          v84 = (v20 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v20 | 7) != 0x17)
            v84 = v20 | 7;
          v85 = v84 + 1;
          v83 = operator new(v84 + 1);
          v199 = v20;
          v200 = v85 | 0x8000000000000000;
          __p = v83;
        }
        else
        {
          HIBYTE(v200) = v20;
          if (!v20)
            goto LABEL_146;
        }
        memmove(v83, v19, v20);
LABEL_146:
        *((_BYTE *)v83 + v20) = 0;
        v201 = 1;
        v86 = object;
        if (SHIBYTE(v200) < 0)
          operator delete(__p);
        if (BYTE8(v197) && SBYTE7(v197) < 0)
          operator delete((void *)v196);
        if (object)
          os_release(object);
        if (v17 && *(_QWORD *)(v17 + 24))
        {
          v87 = _os_log_pack_size();
          v88 = (std::__shared_weak_count_vtbl *)operator new(v87, (std::align_val_t)8uLL);
          v89 = (std::__shared_weak_count *)operator new();
          v90 = v89;
          v89->__shared_owners_ = 0;
          v91 = (unint64_t *)&v89->__shared_owners_;
          v89->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
          v89->__shared_weak_owners_ = 0;
          v89[1].__vftable = v88;
          object = v88;
          *(_QWORD *)&v196 = v88;
          *((_QWORD *)&v196 + 1) = v89;
          do
            v92 = __ldxr(v91);
          while (__stxr(v92 + 1, v91));
          v197 = 0uLL;
          __p = 0;
          do
            v93 = __ldaxr(v91);
          while (__stlxr(v93 - 1, v91));
          if (!v93)
          {
            ((void (*)(std::__shared_weak_count *))v89->__on_zero_shared)(v89);
            std::__shared_weak_count::__release_weak(v90);
          }
          v94 = object;
          *(_WORD *)_os_log_pack_fill() = 0;
          v95 = operator new();
          v96 = *(unsigned __int8 *)(v177 + 39);
          v97 = v174;
          if ((v96 & 0x80u) != 0)
          {
            v97 = *(_QWORD *)(v177 + 16);
            v96 = *(_QWORD *)(v177 + 24);
          }
          *(_QWORD *)v95 = v94;
          *(_OWORD *)(v95 + 8) = v196;
          v196 = 0uLL;
          *(_OWORD *)(v95 + 24) = v197;
          v197 = 0uLL;
          *(_QWORD *)(v95 + 40) = v97;
          *(_QWORD *)(v95 + 48) = v96;
          *(_BYTE *)(v95 + 56) = 1;
          category[0] = 0;
          v194[0] = v95;
          (*(void (**)(_QWORD, _QWORD *))(**(_QWORD **)(v17 + 24) + 40))(*(_QWORD *)(v17 + 24), v194);
          v98 = v194[0];
          v194[0] = 0;
          if (v98)
          {
            v99 = *(std::__shared_weak_count **)(v98 + 32);
            if (v99)
            {
              v100 = (unint64_t *)&v99->__shared_owners_;
              do
                v101 = __ldaxr(v100);
              while (__stlxr(v101 - 1, v100));
              if (!v101)
              {
                ((void (*)(std::__shared_weak_count *))v99->__on_zero_shared)(v99);
                std::__shared_weak_count::__release_weak(v99);
              }
            }
            v102 = *(std::__shared_weak_count **)(v98 + 16);
            if (v102)
            {
              v103 = (unint64_t *)&v102->__shared_owners_;
              do
                v104 = __ldaxr(v103);
              while (__stlxr(v104 - 1, v103));
              if (!v104)
              {
                ((void (*)(std::__shared_weak_count *))v102->__on_zero_shared)(v102);
                std::__shared_weak_count::__release_weak(v102);
              }
            }
            MEMORY[0x212BC6398](v98, 0x10F0C40B62ED6C6);
            v105 = category[0];
            category[0] = 0;
            if (v105)
            {
              v106 = (std::__shared_weak_count *)*((_QWORD *)v105 + 4);
              if (v106)
              {
                v107 = (unint64_t *)&v106->__shared_owners_;
                do
                  v108 = __ldaxr(v107);
                while (__stlxr(v108 - 1, v107));
                if (!v108)
                {
                  ((void (*)(std::__shared_weak_count *))v106->__on_zero_shared)(v106);
                  std::__shared_weak_count::__release_weak(v106);
                }
              }
              v109 = (std::__shared_weak_count *)*((_QWORD *)v105 + 2);
              if (v109)
              {
                v110 = (unint64_t *)&v109->__shared_owners_;
                do
                  v111 = __ldaxr(v110);
                while (__stlxr(v111 - 1, v110));
                if (!v111)
                {
                  ((void (*)(std::__shared_weak_count *))v109->__on_zero_shared)(v109);
                  std::__shared_weak_count::__release_weak(v109);
                }
              }
              MEMORY[0x212BC6398](v105, 0x10F0C40B62ED6C6);
            }
          }
          v112 = (std::__shared_weak_count *)*((_QWORD *)&v197 + 1);
          v113 = v180;
          if (*((_QWORD *)&v197 + 1))
          {
            v114 = (unint64_t *)(*((_QWORD *)&v197 + 1) + 8);
            do
              v115 = __ldaxr(v114);
            while (__stlxr(v115 - 1, v114));
            if (!v115)
            {
              ((void (*)(std::__shared_weak_count *))v112->__on_zero_shared)(v112);
              std::__shared_weak_count::__release_weak(v112);
            }
          }
          v116 = (std::__shared_weak_count *)*((_QWORD *)&v196 + 1);
          if (*((_QWORD *)&v196 + 1))
          {
            v117 = (unint64_t *)(*((_QWORD *)&v196 + 1) + 8);
            do
              v118 = __ldaxr(v117);
            while (__stlxr(v118 - 1, v117));
            if (!v118)
            {
              ((void (*)(std::__shared_weak_count *))v116->__on_zero_shared)(v116);
              std::__shared_weak_count::__release_weak(v116);
            }
          }
        }
        else
        {
          os_log_type_enabled(v86, OS_LOG_TYPE_INFO);
          LOWORD(object) = 0;
          v119 = (void *)_os_log_send_and_compose_impl();
          v113 = v180;
          if (v119)
            free(v119);
        }
        if (v113)
        {
          sub_20E8C003C((uint64_t)&v182, "Switching to VO because VIO was re-initialized.");
          sub_20E863570((uint64_t)&v182);
        }
        sub_20E863570((uint64_t)&v182);
        v120 = v190;
        if (!v190)
          goto LABEL_295;
        v121 = (unint64_t *)&v190->__shared_owners_;
        do
          v122 = __ldaxr(v121);
        while (__stlxr(v122 - 1, v121));
LABEL_285:
        if (!v122)
        {
          ((void (*)(std::__shared_weak_count *))v120->__on_zero_shared)(v120);
          std::__shared_weak_count::__release_weak(v120);
        }
        goto LABEL_295;
      }
    }
    memmove(v80, v78, v79);
    goto LABEL_138;
  }
  if (v192 == 1 && *(_DWORD *)(a1 + 32) >= *(_DWORD *)(a1 + 4))
  {
    *(_BYTE *)(a1 + 128) = 2;
    if (*(_DWORD *)(a1 + 48)
      && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Odometry/src/AdaptiveVIOLogic.cpp", 47, (uint64_t)"data_.num_frames_wt_imu_and_camera_discrepancy == 0u", 52, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0)|| *(_DWORD *)(a1 + 36)&& sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Odometry/src/AdaptiveVIOLogic.cpp", 48, (uint64_t)"data_.num_failed_vio_windows == 0u", 34, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    sub_20EFDECA0(&v191);
    if (**(int **)(v191 + 56) > 3)
      goto LABEL_121;
    v3 = *(unsigned __int8 *)(v191 + 72);
    v4 = sub_20E8C31DC(v191, "OSLogSurrogateAppender", 1, 0);
    v5 = v4;
    if (!v3 && !v4)
      goto LABEL_121;
    v179 = v3;
    v182 = &v191;
    rep = std::chrono::steady_clock::now().__d_.__rep_;
    v184 = std::chrono::system_clock::now().__d_.__rep_;
    v185 = 3;
    v186 = "unknown file";
    v187 = 52;
    v189 = 0;
    v190 = 0;
    v188 = "unknown function";
    v6 = (const char *)(v191 + 16);
    v173 = v191 + 16;
    v176 = v191;
    if (*(char *)(v191 + 39) < 0)
    {
      v6 = *(const char **)(v191 + 16);
      v7 = *(_QWORD *)(v191 + 24);
    }
    else
    {
      v7 = *(unsigned __int8 *)(v191 + 39);
    }
    v27 = atomic_load((unsigned __int8 *)&qword_254A4A510);
    if ((v27 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
    {
      sub_20E9E46F8((uint64_t)&object);
      sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)&object);
      if ((_BYTE)v197 && SHIBYTE(v196) < 0)
        operator delete(object);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
      __cxa_guard_release(&qword_254A4A510);
    }
    if (byte_254A4A4F8[23] >= 0)
      v28 = byte_254A4A4F8;
    else
      v28 = *(const char **)byte_254A4A4F8;
    if (byte_254A4A4F8[23] >= 0)
      v29 = byte_254A4A4F8[23];
    else
      v29 = *(_QWORD *)&byte_254A4A4F8[8];
    object = os_log_create(v28, v6);
    v30 = &v196;
    if (v29 > 0x7FFFFFFFFFFFFFF7)
      sub_20E860B7C();
    if (v29 >= 0x17)
    {
      v31 = (v29 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v29 | 7) != 0x17)
        v31 = v29 | 7;
      v32 = v31 + 1;
      v30 = (__int128 *)operator new(v31 + 1);
      *((_QWORD *)&v196 + 1) = v29;
      *(_QWORD *)&v197 = v32 | 0x8000000000000000;
      *(_QWORD *)&v196 = v30;
    }
    else
    {
      BYTE7(v197) = v29;
      if (!v29)
      {
LABEL_54:
        *((_BYTE *)v30 + v29) = 0;
        BYTE8(v197) = 1;
        v33 = &__p;
        if (v7 > 0x7FFFFFFFFFFFFFF7)
          sub_20E860B7C();
        if (v7 >= 0x17)
        {
          v34 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v7 | 7) != 0x17)
            v34 = v7 | 7;
          v35 = v34 + 1;
          v33 = operator new(v34 + 1);
          v199 = v7;
          v200 = v35 | 0x8000000000000000;
          __p = v33;
        }
        else
        {
          HIBYTE(v200) = v7;
          if (!v7)
            goto LABEL_62;
        }
        memmove(v33, v6, v7);
LABEL_62:
        *((_BYTE *)v33 + v7) = 0;
        v201 = 1;
        v36 = object;
        if (SHIBYTE(v200) < 0)
          operator delete(__p);
        if (BYTE8(v197) && SBYTE7(v197) < 0)
          operator delete((void *)v196);
        if (object)
          os_release(object);
        if (v5 && *(_QWORD *)(v5 + 24))
        {
          v37 = _os_log_pack_size();
          v38 = (std::__shared_weak_count_vtbl *)operator new(v37, (std::align_val_t)8uLL);
          v39 = (std::__shared_weak_count *)operator new();
          v40 = v39;
          v39->__shared_owners_ = 0;
          v41 = (unint64_t *)&v39->__shared_owners_;
          v39->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
          v39->__shared_weak_owners_ = 0;
          v39[1].__vftable = v38;
          object = v38;
          *(_QWORD *)&v196 = v38;
          *((_QWORD *)&v196 + 1) = v39;
          do
            v42 = __ldxr(v41);
          while (__stxr(v42 + 1, v41));
          v197 = 0uLL;
          __p = 0;
          do
            v43 = __ldaxr(v41);
          while (__stlxr(v43 - 1, v41));
          if (!v43)
          {
            ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
            std::__shared_weak_count::__release_weak(v40);
          }
          v44 = object;
          v45 = (_DWORD *)_os_log_pack_fill();
          v46 = *(_DWORD *)(a1 + 4);
          *v45 = 67109120;
          v45[1] = v46;
          v47 = operator new();
          v48 = *(unsigned __int8 *)(v176 + 39);
          v49 = v173;
          if ((v48 & 0x80u) != 0)
          {
            v49 = *(_QWORD *)(v176 + 16);
            v48 = *(_QWORD *)(v176 + 24);
          }
          *(_QWORD *)v47 = v44;
          *(_OWORD *)(v47 + 8) = v196;
          v196 = 0uLL;
          *(_OWORD *)(v47 + 24) = v197;
          v197 = 0uLL;
          *(_QWORD *)(v47 + 40) = v49;
          *(_QWORD *)(v47 + 48) = v48;
          *(_BYTE *)(v47 + 56) = 1;
          category[0] = 0;
          v194[0] = v47;
          (*(void (**)(_QWORD, _QWORD *))(**(_QWORD **)(v5 + 24) + 40))(*(_QWORD *)(v5 + 24), v194);
          v50 = v194[0];
          v194[0] = 0;
          if (v50)
          {
            v51 = *(std::__shared_weak_count **)(v50 + 32);
            if (v51)
            {
              v52 = (unint64_t *)&v51->__shared_owners_;
              do
                v53 = __ldaxr(v52);
              while (__stlxr(v53 - 1, v52));
              if (!v53)
              {
                ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
                std::__shared_weak_count::__release_weak(v51);
              }
            }
            v54 = *(std::__shared_weak_count **)(v50 + 16);
            if (v54)
            {
              v55 = (unint64_t *)&v54->__shared_owners_;
              do
                v56 = __ldaxr(v55);
              while (__stlxr(v56 - 1, v55));
              if (!v56)
              {
                ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
                std::__shared_weak_count::__release_weak(v54);
              }
            }
            MEMORY[0x212BC6398](v50, 0x10F0C40B62ED6C6);
            v57 = category[0];
            category[0] = 0;
            if (v57)
            {
              v58 = (std::__shared_weak_count *)*((_QWORD *)v57 + 4);
              if (v58)
              {
                v59 = (unint64_t *)&v58->__shared_owners_;
                do
                  v60 = __ldaxr(v59);
                while (__stlxr(v60 - 1, v59));
                if (!v60)
                {
                  ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
                  std::__shared_weak_count::__release_weak(v58);
                }
              }
              v61 = (std::__shared_weak_count *)*((_QWORD *)v57 + 2);
              if (v61)
              {
                v62 = (unint64_t *)&v61->__shared_owners_;
                do
                  v63 = __ldaxr(v62);
                while (__stlxr(v63 - 1, v62));
                if (!v63)
                {
                  ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
                  std::__shared_weak_count::__release_weak(v61);
                }
              }
              MEMORY[0x212BC6398](v57, 0x10F0C40B62ED6C6);
            }
          }
          v64 = (std::__shared_weak_count *)*((_QWORD *)&v197 + 1);
          v65 = v179;
          if (*((_QWORD *)&v197 + 1))
          {
            v66 = (unint64_t *)(*((_QWORD *)&v197 + 1) + 8);
            do
              v67 = __ldaxr(v66);
            while (__stlxr(v67 - 1, v66));
            if (!v67)
            {
              ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
              std::__shared_weak_count::__release_weak(v64);
            }
          }
          v68 = (std::__shared_weak_count *)*((_QWORD *)&v196 + 1);
          if (*((_QWORD *)&v196 + 1))
          {
            v69 = (unint64_t *)(*((_QWORD *)&v196 + 1) + 8);
            do
              v70 = __ldaxr(v69);
            while (__stlxr(v70 - 1, v69));
            if (!v70)
            {
              ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
              std::__shared_weak_count::__release_weak(v68);
            }
          }
        }
        else
        {
          os_log_type_enabled(v36, OS_LOG_TYPE_INFO);
          v71 = *(_DWORD *)(a1 + 4);
          LODWORD(object) = 67109120;
          HIDWORD(object) = v71;
          v72 = (void *)_os_log_send_and_compose_impl();
          v65 = v179;
          if (v72)
            free(v72);
        }
        if (v65)
        {
          sub_20E8C003C((uint64_t)&v182, "Switching to VIO from VO because VIO health check has been succeeding for %u frames", *(_DWORD *)(a1 + 4));
          sub_20E863570((uint64_t)&v182);
        }
        sub_20E863570((uint64_t)&v182);
        v73 = v190;
        if (v190)
        {
          v74 = (unint64_t *)&v190->__shared_owners_;
          do
            v75 = __ldaxr(v74);
          while (__stlxr(v75 - 1, v74));
          if (!v75)
          {
            ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
            std::__shared_weak_count::__release_weak(v73);
          }
        }
LABEL_121:
        ++*(_DWORD *)(a1 + 56);
        v76 = *(_QWORD *)(a1 + 120);
        *(_QWORD *)(a1 + 64) = v76;
        *(_QWORD *)(a1 + 80) = v76;
        kdebug_trace();
        kdebug_trace();
        goto LABEL_296;
      }
    }
    memmove(v30, v28, v29);
    goto LABEL_54;
  }
LABEL_296:
  v171 = *(_QWORD *)(a1 + 160);
  if (v171)
    (*(void (**)(uint64_t, char *, unsigned __int8 *))(*(_QWORD *)v171 + 48))(v171, &v192, v2);
  return *v2;
}

void sub_20EFDE9E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34,char a35)
{
  if (a35)
  {
    if (a34 < 0)
      operator delete(__p);
  }
  __cxa_guard_abort(&qword_254A4A510);
  sub_20E863714((uint64_t)&a14);
  _Unwind_Resume(a1);
}

void sub_20EFDEA3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *object,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35,char a36)
{
  sub_20E86E8C4(&a27);
  sub_20E86E8C4(&a25);
  sub_20E86E658((uint64_t)&object);
  sub_20E863714((uint64_t)&a14);
  _Unwind_Resume(a1);
}

void sub_20EFDEB3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  sub_20E863714((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20EFDEB50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  sub_20E863714((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20EFDEB7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  sub_20E863714((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20EFDEB90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  sub_20E863714((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20EFDEBA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *object,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35,char a36)
{
  if (a36 && a35 < 0)
    operator delete(__p);
  if (object)
    os_release(object);
  sub_20E863714((uint64_t)&a14);
  _Unwind_Resume(a1);
}

void sub_20EFDEBE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *object,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35,char a36)
{
  if (a36 && a35 < 0)
    operator delete(__p);
  if (object)
    os_release(object);
  sub_20E863714((uint64_t)&a14);
  _Unwind_Resume(a1);
}

void sub_20EFDEC18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  sub_20E863714((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20EFDEC30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *object,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35,char a36)
{
  if (a36 && a35 < 0)
    operator delete(__p);
  if (object)
    os_release(object);
  sub_20E863714((uint64_t)&a14);
  _Unwind_Resume(a1);
}

void sub_20EFDEC84(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
    sub_20E860DA4(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_20EFDECA0(_QWORD *a1)
{
  unsigned __int8 v2;
  void *__p[2];
  char v4;
  uint64_t *v5;

  v2 = atomic_load((unsigned __int8 *)&qword_254A61888);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254A61888))
  {
    sub_21021D3D8(&v5);
    sub_20E8610C0(__p, "cv3d.vio.odometry");
    sub_20E8C4068(&v5, (uint64_t)__p, &qword_254A61880);
    if (v4 < 0)
      operator delete(__p[0]);
    __cxa_guard_release(&qword_254A61888);
  }
  *a1 = qword_254A61880;
}

void sub_20EFDED3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A61888);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A61888);
  _Unwind_Resume(a1);
}

uint64_t sub_20EFDED94(uint64_t a1, int a2, double a3)
{
  if (*(_BYTE *)(a1 + 128) != 2
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Odometry/src/AdaptiveVIOLogic.cpp", 113, (uint64_t)"adaptive_vio_state_ == cv_types::AdaptiveVIOState::kVIOSLAM", 59, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
    goto LABEL_11;
  }
  if (!*(_BYTE *)a1)
    return *(unsigned __int8 *)(a1 + 128);
  if (*(double *)(a1 + 120) != a3
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Odometry/src/AdaptiveVIOLogic.cpp", 120, (uint64_t)"cva::exactlyEqual(timestamp, last_update_timestamp_)", 52, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
LABEL_11:
    abort();
  }
  *(_QWORD *)(a1 + 104) += a2 ^ 1u;
  if (((a2 ^ 1) & 1) != 0)
  {
    kdebug_trace();
    ++*(_DWORD *)(a1 + 48);
  }
  else
  {
    *(_DWORD *)(a1 + 48) = 0;
  }
  return sub_20EFDD284(a1);
}

uint64_t sub_20EFDEEBC(uint64_t a1, uint64_t a2, int a3, uint64_t a4, __int16 a5, double a6)
{
  int v10;
  uint64_t v12;
  BOOL v14;
  int v15;
  uint64_t v16;

  if (!*(_BYTE *)a1)
    return *(unsigned __int8 *)(a1 + 128);
  v10 = a2;
  v12 = a2 & 0xFF00000000;
  if ((a2 & 0xFF00000000) != 0 && *(_DWORD *)(a1 + 40) >= (int)a2)
    return *(unsigned __int8 *)(a1 + 128);
  if (*(double *)(a1 + 120) >= a6
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Odometry/src/AdaptiveVIOLogic.cpp", 157, (uint64_t)"current_state_timestamp > last_update_timestamp_", 48, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  *(double *)(a1 + 120) = a6;
  if (v12)
    *(_DWORD *)(a1 + 40) = v10;
  if (!*(_BYTE *)(a1 + 44) && (a3 & 1) == 0)
    return *(unsigned __int8 *)(a1 + 128);
  *(_BYTE *)(a1 + 44) = a3;
  if (*(_BYTE *)(a4 + 456)
    && (*(double *)(a4 + 448) >= *(double *)(a1 + 16) ? (v14 = a3 == 0) : (v14 = 1),
        !v14 && ((a5 & 0xFF00) == 0 || (_BYTE)a5)))
  {
    *(_QWORD *)(a1 + 32) = (*(_DWORD *)(a1 + 32) + 1);
  }
  else
  {
    v15 = *(_DWORD *)(a1 + 36) + 1;
    *(_DWORD *)(a1 + 32) = 0;
    *(_DWORD *)(a1 + 36) = v15;
  }
  v16 = *(_QWORD *)(a1 + 96);
  if (*(_BYTE *)(a1 + 128) == 2)
    ++v16;
  ++*(_QWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 96) = v16;
  return sub_20EFDD284(a1);
}

void sub_20EFDF000(uint64_t a1, uint64_t *a2, os_log_t oslog, os_log_type_t type, int *a5)
{
  size_t v9;
  std::__shared_weak_count_vtbl *v10;
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  unint64_t v15;
  std::__shared_weak_count_vtbl *v16;
  _DWORD *v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  int v35;
  void *v36;
  uint64_t v37;
  std::__shared_weak_count_vtbl *v38;
  __int128 v39;
  __int128 v40;
  uint64_t v41;
  uint64_t v42;

  v42 = *MEMORY[0x24BDAC8D0];
  if (a1 && *(_QWORD *)(a1 + 8))
  {
    v9 = _os_log_pack_size();
    v10 = (std::__shared_weak_count_vtbl *)operator new(v9, (std::align_val_t)8uLL);
    v11 = (std::__shared_weak_count *)operator new();
    v12 = v11;
    v11->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    v11->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
    v11->__shared_weak_owners_ = 0;
    v11[1].__vftable = v10;
    v38 = v10;
    *(_QWORD *)&v39 = v10;
    *((_QWORD *)&v39 + 1) = v11;
    do
      v14 = __ldxr(p_shared_owners);
    while (__stxr(v14 + 1, p_shared_owners));
    v40 = 0uLL;
    v41 = 0;
    do
      v15 = __ldaxr(p_shared_owners);
    while (__stlxr(v15 - 1, p_shared_owners));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v12);
    }
    v16 = v38;
    v17 = (_DWORD *)_os_log_pack_fill();
    v18 = *a5;
    *v17 = 67109120;
    v17[1] = v18;
    v19 = operator new();
    v20 = *((unsigned __int8 *)a2 + 23);
    if ((v20 & 0x80u) == 0)
      v21 = a2;
    else
      v21 = (uint64_t *)*a2;
    if ((v20 & 0x80u) != 0)
      v20 = a2[1];
    *(_QWORD *)v19 = v16;
    *(_OWORD *)(v19 + 8) = v39;
    v39 = 0uLL;
    *(_OWORD *)(v19 + 24) = v40;
    v40 = 0uLL;
    *(_QWORD *)(v19 + 40) = v21;
    *(_QWORD *)(v19 + 48) = v20;
    *(_BYTE *)(v19 + 56) = type;
    v37 = v19;
    (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8), &v37);
    v22 = v37;
    v37 = 0;
    if (v22)
    {
      v23 = *(std::__shared_weak_count **)(v22 + 32);
      if (v23)
      {
        v24 = (unint64_t *)&v23->__shared_owners_;
        do
          v25 = __ldaxr(v24);
        while (__stlxr(v25 - 1, v24));
        if (!v25)
        {
          ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
          std::__shared_weak_count::__release_weak(v23);
        }
      }
      v26 = *(std::__shared_weak_count **)(v22 + 16);
      if (v26)
      {
        v27 = (unint64_t *)&v26->__shared_owners_;
        do
          v28 = __ldaxr(v27);
        while (__stlxr(v28 - 1, v27));
        if (!v28)
        {
          ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
          std::__shared_weak_count::__release_weak(v26);
        }
      }
      MEMORY[0x212BC6398](v22, 0x10F0C40B62ED6C6);
    }
    v29 = (std::__shared_weak_count *)*((_QWORD *)&v40 + 1);
    if (*((_QWORD *)&v40 + 1))
    {
      v30 = (unint64_t *)(*((_QWORD *)&v40 + 1) + 8);
      do
        v31 = __ldaxr(v30);
      while (__stlxr(v31 - 1, v30));
      if (!v31)
      {
        ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
        std::__shared_weak_count::__release_weak(v29);
      }
    }
    v32 = (std::__shared_weak_count *)*((_QWORD *)&v39 + 1);
    if (*((_QWORD *)&v39 + 1))
    {
      v33 = (unint64_t *)(*((_QWORD *)&v39 + 1) + 8);
      do
        v34 = __ldaxr(v33);
      while (__stlxr(v34 - 1, v33));
      if (!v34)
      {
        ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
        std::__shared_weak_count::__release_weak(v32);
      }
    }
  }
  else
  {
    os_log_type_enabled(oslog, type);
    v35 = *a5;
    LODWORD(v38) = 67109120;
    HIDWORD(v38) = v35;
    v36 = (void *)_os_log_send_and_compose_impl();
    if (v36)
      free(v36);
  }
}

void sub_20EFDF3E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  va_list va1;
  va_list va2;

  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v6 = va_arg(va2, _QWORD);
  sub_20E86E8C4((uint64_t *)va1);
  sub_20E86E8C4((uint64_t *)va);
  sub_20E86E658((uint64_t)va2);
  _Unwind_Resume(a1);
}

void sub_20EFDF408(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_20E86E658((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20EFDF41C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BC6398](v1, 0x10D0C40B950D02ALL);
  _Unwind_Resume(a1);
}

uint64_t *sub_20EFDF440@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *result;
  uint64_t (*v10)(_QWORD *, _QWORD *, uint64_t);
  uint64_t v11;
  _QWORD v12[3];
  void *__p;
  __int128 v14;

  __p = operator new(0x28uLL);
  v14 = xmmword_2102DBA80;
  strcpy((char *)__p, "AdaptiveVIOLogicConfig parameters");
  sub_20E8B30B4(a2, (__int128 *)&__p, 80, 40);
  if (SHIBYTE(v14) < 0)
    operator delete(__p);
  __p = (void *)nullsub_1(a2);
  v4 = sub_20EAA14D8((_BYTE *)a1);
  sub_20E8B2F9C((uint64_t *)&__p, "AdaptiveVIOLogicConfig.enable_adaptive_vio", v4, "Enable/disable adaptive VIO logic");
  __p = (void *)nullsub_1(a2);
  v5 = sub_20EA9DCF0((unsigned int *)(a1 + 4));
  sub_20E8B2F9C((uint64_t *)&__p, "AdaptiveVIOLogicConfig.min_num_successful_windows_to_switch_to_vio", v5, "Minimum number of consecutive successful VIO windows (processed frames) to switch to VIO");
  __p = (void *)nullsub_1(a2);
  v6 = sub_20EA9DB90((double *)(a1 + 16));
  sub_20E8B2F9C((uint64_t *)&__p, "AdaptiveVIOLogicConfig.min_health_to_consider_vio_healthy", v6, "Minimum Health to consider VIO healthy for Moving SLAM.");
  __p = (void *)nullsub_1(a2);
  v7 = sub_20EA9DCF0((unsigned int *)(a1 + 12));
  sub_20E8B2F9C((uint64_t *)&__p, "AdaptiveVIOLogicConfig.min_num_frames_wt_imu_cam_motion_discrepancy_to_switch_to_vo", v7, " Minimum number of consecutive frames with IMU-camera motion discrepancy before we switch to Vision-only SLAM.");
  __p = (void *)nullsub_1(a2);
  v8 = operator new();
  *(_QWORD *)v8 = &off_24C9C34F8;
  *(_QWORD *)(v8 + 8) = &unk_24C9C3568;
  *(_QWORD *)(v8 + 120) = 0;
  *(_OWORD *)(v8 + 16) = 0u;
  *(_OWORD *)(v8 + 32) = 0u;
  *(_OWORD *)(v8 + 48) = 0u;
  *(_OWORD *)(v8 + 64) = 0u;
  *(_OWORD *)(v8 + 80) = 0u;
  *(_OWORD *)(v8 + 96) = 0u;
  *(_QWORD *)(v8 + 109) = 0;
  v11 = (uint64_t)off_24C9F64E8 + 1;
  v12[0] = a1;
  sub_20EAA8294((uint64_t *)(v8 + 120), &v11);
  result = sub_20E8B2F9C((uint64_t *)&__p, "AdaptiveVIOLogicConfig.initial_adaptive_vio_state", v8, "Initial adaptive VIO state. See 'AdaptiveVIOState'");
  if (v11 && (v11 & 1) == 0)
  {
    v10 = *(uint64_t (**)(_QWORD *, _QWORD *, uint64_t))(v11 & 0xFFFFFFFFFFFFFFFELL);
    if (v10)
      return (uint64_t *)v10(v12, v12, 2);
  }
  return result;
}

void sub_20EFDF640(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  uint64_t v19;

  sub_20E869298(v19);
  _Unwind_Resume(a1);
}

uint64_t sub_20EFDF6A4(uint64_t result, _WORD *a2, unsigned int a3)
{
  uint64_t v4;

  if (a3 == 4)
    goto LABEL_2;
  v4 = result;
  if (a3 <= 1)
  {
    *(_QWORD *)a2 = *(_QWORD *)result;
    return result;
  }
  if (a3 != 2)
  {
    if (a3 != 3)
    {
LABEL_2:
      *(_QWORD *)a2 = &unk_24C9F64F8;
      a2[4] = 0;
      return result;
    }
    result = *(_QWORD *)(*(_QWORD *)a2 + 8) & 0x7FFFFFFFFFFFFFFFLL;
    if (result == ((unint64_t)"ZN4cv3d3vio8odometry28GetProgramOptionsDescriptionERNS1_22AdaptiveVIOLogicConfigEE3$_5" & 0x7FFFFFFFFFFFFFFFLL)
      || (result = strcmp((const char *)result, (const char *)((unint64_t)"ZN4cv3d3vio8odometry28GetProgramOptionsDescriptionERNS1_22AdaptiveVIOLogicConfigEE3$_5" & 0x7FFFFFFFFFFFFFFFLL)), !(_DWORD)result))
    {
      *(_QWORD *)a2 = v4;
    }
    else
    {
      *(_QWORD *)a2 = 0;
    }
  }
  return result;
}

uint64_t sub_20EFDF750(uint64_t result, _DWORD *a2)
{
  *(_BYTE *)(*(_QWORD *)result + 24) = *a2;
  return result;
}

uint64_t *sub_20EFDF760@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *__p;
  __int128 v13;

  __p = operator new(0x20uLL);
  v13 = xmmword_2102DB470;
  strcpy((char *)__p, "BodyCropperConfig parameters");
  sub_20E8B30B4(a2, (__int128 *)&__p, 180, 160);
  if (SHIBYTE(v13) < 0)
    operator delete(__p);
  __p = (void *)nullsub_1(a2);
  v4 = sub_20EAA14D8((_BYTE *)a1);
  sub_20E8B2F9C((uint64_t *)&__p, "BodyCropperConfig.body_cropping_enabled", v4, "Enables cropping of feature points that fall on the body.");
  __p = (void *)nullsub_1(a2);
  v5 = sub_20EA9DB90((double *)(a1 + 8));
  sub_20E8B2F9C((uint64_t *)&__p, "BodyCropperConfig.top_x_axis_offset_meters", v5, "X coordinate of top of body cropping region.");
  __p = (void *)nullsub_1(a2);
  v6 = sub_20EA9DB90((double *)(a1 + 16));
  sub_20E8B2F9C((uint64_t *)&__p, "BodyCropperConfig.bottom_x_axis_offset_meters", v6, "X coordinate of bottom of body cropping region.");
  __p = (void *)nullsub_1(a2);
  v7 = sub_20EA9DB90((double *)(a1 + 24));
  sub_20E8B2F9C((uint64_t *)&__p, "BodyCropperConfig.half_body_width_meters", v7, "Half of body width (y axis).");
  __p = (void *)nullsub_1(a2);
  v8 = sub_20EA9DB90((double *)(a1 + 32));
  sub_20E8B2F9C((uint64_t *)&__p, "BodyCropperConfig.body_length_meters", v8, "Body length (z-axis).");
  __p = (void *)nullsub_1(a2);
  v9 = sub_20EA9DB90((double *)(a1 + 40));
  sub_20E8B2F9C((uint64_t *)&__p, "BodyCropperConfig.lens_to_body_offset_meters", v9, "Offset from lens to top of cropping region.");
  __p = (void *)nullsub_1(a2);
  v10 = sub_20EAA14D8((_BYTE *)(a1 + 48));
  return sub_20E8B2F9C((uint64_t *)&__p, "BodyCropperConfig.required_vio_initialized", v10, "Whether to require vio to be initlaized before triggering body cropping.");
}

void sub_20EFDF930(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;

  sub_20E869298(v15);
  _Unwind_Resume(a1);
}

uint64_t sub_20EFDF994@<X0>(int *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  void **v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  size_t v9;
  void **v10;
  unint64_t v11;
  unint64_t v12;
  const void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _BYTE __p[24];
  void **v24;
  void **v25;
  uint64_t v26;
  _BYTE v27[24];
  int v28;
  void *__dst[2];
  unint64_t v30;
  _BYTE *v31;

  *(_QWORD *)__p = operator new(0x20uLL);
  *(_OWORD *)&__p[8] = xmmword_2102DBFF0;
  strcpy(*(char **)__p, "CalibrationChangeDetectorConfig");
  sub_20E8B30B4(a2, (__int128 *)__p, 80, 40);
  if ((__p[23] & 0x80000000) != 0)
    operator delete(*(void **)__p);
  v26 = nullsub_1(a2);
  v4 = operator new();
  *(_QWORD *)(v4 + 109) = 0;
  *(_OWORD *)(v4 + 80) = 0u;
  *(_OWORD *)(v4 + 96) = 0u;
  *(_OWORD *)(v4 + 48) = 0u;
  *(_OWORD *)(v4 + 64) = 0u;
  *(_OWORD *)(v4 + 16) = 0u;
  *(_OWORD *)(v4 + 32) = 0u;
  *(_QWORD *)v4 = &off_24C9F6518;
  *(_QWORD *)(v4 + 8) = &unk_24C9F6590;
  *(_QWORD *)(v4 + 152) = &unk_24C9F65B8;
  *(_QWORD *)(v4 + 168) = 0;
  v5 = (void **)(v4 + 168);
  *(_QWORD *)(v4 + 176) = 0;
  *(_QWORD *)(v4 + 184) = 0;
  *(_QWORD *)(v4 + 120) = (char *)off_24C9F6730 + 1;
  *(_QWORD *)(v4 + 128) = a1;
  v6 = operator new();
  *(_QWORD *)v6 = &off_24C9F66F8;
  *(_DWORD *)(v6 + 8) = *a1;
  *(_QWORD *)(v4 + 160) = v6;
  v28 = 0;
  v7 = operator new();
  *(_QWORD *)(v7 + 272) = 0;
  *(_OWORD *)(v7 + 240) = 0u;
  *(_OWORD *)(v7 + 256) = 0u;
  *(_OWORD *)(v7 + 208) = 0u;
  *(_OWORD *)(v7 + 224) = 0u;
  *(_OWORD *)(v7 + 176) = 0u;
  *(_OWORD *)(v7 + 192) = 0u;
  *(_OWORD *)(v7 + 144) = 0u;
  *(_OWORD *)(v7 + 160) = 0u;
  *(_OWORD *)(v7 + 112) = 0u;
  *(_OWORD *)(v7 + 128) = 0u;
  *(_OWORD *)(v7 + 80) = 0u;
  *(_OWORD *)(v7 + 96) = 0u;
  *(_OWORD *)(v7 + 48) = 0u;
  *(_OWORD *)(v7 + 64) = 0u;
  *(_OWORD *)(v7 + 16) = 0u;
  *(_OWORD *)(v7 + 32) = 0u;
  *(_OWORD *)v7 = 0u;
  sub_20E863438(v7);
  *(_QWORD *)__p = v7;
  sub_20E86A980((_QWORD *)(v7 + 16), (uint64_t)off_24C9F6798[*a1], qword_210398520[*a1]);
  v8 = *(_DWORD *)(v7 + 120);
  if ((v8 & 0x10) != 0)
  {
    v11 = *(_QWORD *)(v7 + 112);
    v12 = *(_QWORD *)(v7 + 72);
    if (v11 < v12)
    {
      *(_QWORD *)(v7 + 112) = v12;
      v11 = v12;
    }
    v13 = *(const void **)(v7 + 64);
    v9 = v11 - (_QWORD)v13;
    if (v11 - (unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
      goto LABEL_30;
  }
  else
  {
    if ((v8 & 8) == 0)
    {
      v9 = 0;
      HIBYTE(v30) = 0;
      v10 = __dst;
      goto LABEL_16;
    }
    v13 = *(const void **)(v7 + 40);
    v9 = *(_QWORD *)(v7 + 56) - (_QWORD)v13;
    if (v9 >= 0x7FFFFFFFFFFFFFF8)
LABEL_30:
      sub_20E860B7C();
  }
  if (v9 >= 0x17)
  {
    v14 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17)
      v14 = v9 | 7;
    v15 = v14 + 1;
    v10 = (void **)operator new(v14 + 1);
    __dst[1] = (void *)v9;
    v30 = v15 | 0x8000000000000000;
    __dst[0] = v10;
    goto LABEL_15;
  }
  HIBYTE(v30) = v9;
  v10 = __dst;
  if (v9)
LABEL_15:
    memmove(v10, v13, v9);
LABEL_16:
  *((_BYTE *)v10 + v9) = 0;
  v16 = *(_QWORD *)__p;
  if (*(_QWORD *)__p)
  {
    v17 = MEMORY[0x24BEDB7F0];
    v18 = *MEMORY[0x24BEDB7F0];
    **(_QWORD **)__p = *MEMORY[0x24BEDB7F0];
    v19 = *(_QWORD *)(v17 + 72);
    *(_QWORD *)(v16 + *(_QWORD *)(v18 - 24)) = *(_QWORD *)(v17 + 64);
    *(_QWORD *)(v16 + 24) = MEMORY[0x24BEDB848] + 16;
    *(_QWORD *)(v16 + 16) = v19;
    if (*(char *)(v16 + 111) < 0)
      operator delete(*(void **)(v16 + 88));
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x212BC6290](v16 + 128);
    MEMORY[0x212BC6398](v16, 0x10B2C40EED050F3);
  }
  *(_QWORD *)__p = v27;
  *(_QWORD *)&__p[8] = __dst;
  *(_QWORD *)&__p[16] = v27;
  v24 = __dst;
  v25 = __dst;
  if (v28 == -1)
    sub_20E877AB8();
  v31 = __p;
  ((void (*)(_BYTE **, _BYTE *))off_24C9F6750[v28])(&v31, v27);
  if (SHIBYTE(v30) < 0)
    operator delete(__dst[0]);
  if (v28 == -1)
    sub_20E877AB8();
  __dst[0] = &v31;
  ((void (*)(_BYTE *__return_ptr, void **, _BYTE *))off_24C9F6780[v28])(__p, __dst, v27);
  if (v28 != -1)
    ((void (*)(void **, _BYTE *))off_24C9F6768[v28])(__dst, v27);
  if (*(char *)(v4 + 191) < 0)
    operator delete(*v5);
  *(_OWORD *)v5 = *(_OWORD *)__p;
  *(_QWORD *)(v4 + 184) = *(_QWORD *)&__p[16];
  sub_20E8B2F9C(&v26, "CalibrationChangeDetectorConfig.detection_algorithm", v4, "Detection algorithm. Valid values are \"none\", \"parameterdifference\", and \"triangulationerror\".");
  *(_QWORD *)__p = nullsub_1(a2);
  v20 = sub_20EA9DB90((double *)a1 + 1);
  sub_20E8B2F9C((uint64_t *)__p, "CalibrationChangeDetectorConfig.detection_interval", v20, "Detection interval in seconds.");
  *(_QWORD *)__p = nullsub_1(a2);
  v21 = sub_20EAA14D8((_BYTE *)a1 + 16);
  sub_20E8B2F9C((uint64_t *)__p, "CalibrationChangeDetectorConfig.wait_for_all_cameras", v21, "Defer the notification of calibration change until the result becomes conclusive for all cameras.");
  sub_20EFEA8B0((double *)a1 + 3, __p);
  sub_20E8B32F0(a2, (uint64_t)__p);
  sub_20E869298((uint64_t)__p);
  sub_20F129D70(a1 + 12, __p);
  sub_20E8B32F0(a2, (uint64_t)__p);
  sub_20E869298((uint64_t)__p);
  sub_20EFE4D70((uint64_t)(a1 + 24), __p);
  sub_20E8B32F0(a2, (uint64_t)__p);
  return sub_20E869298((uint64_t)__p);
}

void sub_20EFDFE5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,int a30)
{
  uint64_t v30;

  sub_20E869298((uint64_t)&__p);
  sub_20E869298(v30);
  _Unwind_Resume(a1);
}

void sub_20EFDFF40(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  __int128 *v4;
  int v5;
  size_t v6;
  unint64_t v7;
  std::string::value_type *v8;
  std::string::size_type v9;
  int v10;
  size_t v11;
  unint64_t v12;
  char *p_dst;
  uint64_t v14;
  uint64_t v15;
  _WORD *v16;
  __int128 *v17;
  std::string *v18;
  __int128 v19;
  int v20;
  const std::string::value_type *v21;
  std::string::size_type v22;
  std::string *v23;
  __int128 v24;
  std::string *v25;
  __int128 v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  __int128 *v30;
  const std::string::value_type *v31;
  std::string::size_type v32;
  std::string *v33;
  __int128 v34;
  std::string *v35;
  __int128 v36;
  size_t v37;
  unint64_t v38;
  std::string::value_type *v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  const void *v43;
  std::string *v44;
  __int128 v45;
  std::string *v46;
  std::string::size_type size;
  std::string v48;
  std::string __dst;
  std::string v50;

  if ((*(char *)(a1 + 47) & 0x80000000) == 0)
  {
    if (*(_BYTE *)(a1 + 47))
      v4 = (__int128 *)(a1 + 24);
    else
      v4 = &xmmword_253CFBB28;
    if (!*(_QWORD *)(a1 + 80))
      goto LABEL_21;
LABEL_11:
    if (*(char *)(a1 + 111) < 0)
    {
      if (!*(_QWORD *)(a1 + 96))
        goto LABEL_21;
    }
    else if (!*(_BYTE *)(a1 + 111))
    {
      goto LABEL_21;
    }
    v5 = *((char *)v4 + 23);
    if (v5 >= 0)
      v6 = *((unsigned __int8 *)v4 + 23);
    else
      v6 = *((_QWORD *)v4 + 1);
    v7 = v6 + 2;
    if (v6 + 2 > 0x7FFFFFFFFFFFFFF7)
      sub_20E860B7C();
    if (v7 >= 0x17)
    {
      v14 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v7 | 7) != 0x17)
        v14 = v7 | 7;
      v15 = v14 + 1;
      v16 = operator new(v14 + 1);
      v48.__r_.__value_.__l.__size_ = v6 + 2;
      v48.__r_.__value_.__r.__words[2] = v15 | 0x8000000000000000;
      v48.__r_.__value_.__r.__words[0] = (std::string::size_type)v16;
      *v16 = 15707;
      v8 = (std::string::value_type *)(v16 + 1);
    }
    else
    {
      v48.__r_.__value_.__r.__words[2] = 0;
      *((_BYTE *)&v48.__r_.__value_.__s + 23) = v6 + 2;
      v8 = &v48.__r_.__value_.__s.__data_[2];
      *(_OWORD *)&v48.__r_.__value_.__l.__data_ = 0x3D5BuLL;
      if (!v6)
        goto LABEL_38;
    }
    if (v5 >= 0)
      v17 = v4;
    else
      v17 = *(__int128 **)v4;
    memmove(v8, v17, v6);
LABEL_38:
    v8[v6] = 0;
    v18 = std::string::append(&v48, "(=", 2uLL);
    v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
    __dst.__r_.__value_.__r.__words[2] = v18->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = v19;
    v18->__r_.__value_.__l.__size_ = 0;
    v18->__r_.__value_.__r.__words[2] = 0;
    v18->__r_.__value_.__r.__words[0] = 0;
    v20 = *(char *)(a1 + 111);
    if (v20 >= 0)
      v21 = (const std::string::value_type *)(a1 + 88);
    else
      v21 = *(const std::string::value_type **)(a1 + 88);
    if (v20 >= 0)
      v22 = *(unsigned __int8 *)(a1 + 111);
    else
      v22 = *(_QWORD *)(a1 + 96);
    v23 = std::string::append(&__dst, v21, v22);
    v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
    v50.__r_.__value_.__r.__words[2] = v23->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v50.__r_.__value_.__l.__data_ = v24;
    v23->__r_.__value_.__l.__size_ = 0;
    v23->__r_.__value_.__r.__words[2] = 0;
    v23->__r_.__value_.__r.__words[0] = 0;
    v25 = std::string::append(&v50, ")]", 2uLL);
    v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
    a2->__r_.__value_.__r.__words[2] = v25->__r_.__value_.__r.__words[2];
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = v26;
    v25->__r_.__value_.__l.__size_ = 0;
    v25->__r_.__value_.__r.__words[2] = 0;
    v25->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v50.__r_.__value_.__l.__data_);
      if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_46:
        if ((SHIBYTE(v48.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_47;
        goto LABEL_51;
      }
    }
    else if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      goto LABEL_46;
    }
    operator delete(__dst.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v48.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_47:
      if (!*(_QWORD *)(a1 + 48))
        return;
      goto LABEL_52;
    }
LABEL_51:
    operator delete(v48.__r_.__value_.__l.__data_);
    if (!*(_QWORD *)(a1 + 48))
      return;
LABEL_52:
    v27 = *(_BYTE *)(a1 + 79);
    if (v27 < 0)
    {
      if (!*(_QWORD *)(a1 + 64))
        return;
    }
    else if (!*(_BYTE *)(a1 + 79))
    {
      return;
    }
    if (v27 >= 0)
      v37 = *(unsigned __int8 *)(a1 + 79);
    else
      v37 = *(_QWORD *)(a1 + 64);
    v38 = v37 + 3;
    if (v37 + 3 > 0x7FFFFFFFFFFFFFF7)
      sub_20E860B7C();
    if (v38 >= 0x17)
    {
      v40 = (v38 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v38 | 7) != 0x17)
        v40 = v38 | 7;
      v41 = v40 + 1;
      v42 = (char *)operator new(v40 + 1);
      __dst.__r_.__value_.__l.__size_ = v37 + 3;
      __dst.__r_.__value_.__r.__words[2] = v41 | 0x8000000000000000;
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v42;
      *(_WORD *)v42 = 10272;
      v39 = v42 + 3;
      v42[2] = 61;
    }
    else
    {
      __dst.__r_.__value_.__r.__words[2] = 0;
      *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = 0x3D2820uLL;
      *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v37 + 3;
      v39 = &__dst.__r_.__value_.__s.__data_[3];
      if (!v37)
      {
LABEL_88:
        v39[v37] = 0;
        v44 = std::string::append(&__dst, ")", 1uLL);
        v45 = *(_OWORD *)&v44->__r_.__value_.__l.__data_;
        v50.__r_.__value_.__r.__words[2] = v44->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v50.__r_.__value_.__l.__data_ = v45;
        v44->__r_.__value_.__l.__size_ = 0;
        v44->__r_.__value_.__r.__words[2] = 0;
        v44->__r_.__value_.__r.__words[0] = 0;
        if ((v50.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v46 = &v50;
        else
          v46 = (std::string *)v50.__r_.__value_.__r.__words[0];
        if ((v50.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          size = HIBYTE(v50.__r_.__value_.__r.__words[2]);
        else
          size = v50.__r_.__value_.__l.__size_;
        std::string::append(a2, (const std::string::value_type *)v46, size);
        goto LABEL_95;
      }
    }
    if (v27 >= 0)
      v43 = (const void *)(a1 + 56);
    else
      v43 = *(const void **)(a1 + 56);
    memmove(v39, v43, v37);
    goto LABEL_88;
  }
  if (*(_QWORD *)(a1 + 32))
    v4 = (__int128 *)(a1 + 24);
  else
    v4 = &xmmword_253CFBB28;
  if (*(_QWORD *)(a1 + 80))
    goto LABEL_11;
LABEL_21:
  if (!*(_QWORD *)(a1 + 48))
    goto LABEL_56;
  v9 = *(unsigned __int8 *)(a1 + 79);
  if ((*(char *)(a1 + 79) & 0x80000000) == 0)
  {
    if (*(_BYTE *)(a1 + 79))
      goto LABEL_24;
LABEL_56:
    if (*((char *)v4 + 23) < 0)
    {
      sub_20E860C04(a2, *(void **)v4, *((_QWORD *)v4 + 1));
    }
    else
    {
      *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *v4;
      a2->__r_.__value_.__r.__words[2] = *((_QWORD *)v4 + 2);
    }
    return;
  }
  if (!*(_QWORD *)(a1 + 64))
    goto LABEL_56;
LABEL_24:
  v10 = *((char *)v4 + 23);
  if (v10 >= 0)
    v11 = *((unsigned __int8 *)v4 + 23);
  else
    v11 = *((_QWORD *)v4 + 1);
  v12 = v11 + 3;
  if (v11 + 3 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v12 >= 0x17)
  {
    v28 = (v12 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v12 | 7) != 0x17)
      v28 = v12 | 7;
    v29 = v28 + 1;
    p_dst = (char *)operator new(v28 + 1);
    __dst.__r_.__value_.__l.__size_ = v11 + 3;
    __dst.__r_.__value_.__r.__words[2] = v29 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    goto LABEL_62;
  }
  memset(&__dst, 0, sizeof(__dst));
  p_dst = (char *)&__dst;
  *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v11 + 3;
  if (v11)
  {
LABEL_62:
    if (v10 >= 0)
      v30 = v4;
    else
      v30 = *(__int128 **)v4;
    memmove(p_dst, v30, v11);
  }
  *(_DWORD *)&p_dst[v11] = 4007968;
  if ((v9 & 0x80u) == 0)
    v31 = (const std::string::value_type *)(a1 + 56);
  else
    v31 = *(const std::string::value_type **)(a1 + 56);
  if ((v9 & 0x80u) == 0)
    v32 = v9;
  else
    v32 = *(_QWORD *)(a1 + 64);
  v33 = std::string::append(&__dst, v31, v32);
  v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
  v50.__r_.__value_.__r.__words[2] = v33->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v50.__r_.__value_.__l.__data_ = v34;
  v33->__r_.__value_.__l.__size_ = 0;
  v33->__r_.__value_.__r.__words[2] = 0;
  v33->__r_.__value_.__r.__words[0] = 0;
  v35 = std::string::append(&v50, ")", 1uLL);
  v36 = *(_OWORD *)&v35->__r_.__value_.__l.__data_;
  a2->__r_.__value_.__r.__words[2] = v35->__r_.__value_.__r.__words[2];
  *(_OWORD *)&a2->__r_.__value_.__l.__data_ = v36;
  v35->__r_.__value_.__l.__size_ = 0;
  v35->__r_.__value_.__r.__words[2] = 0;
  v35->__r_.__value_.__r.__words[0] = 0;
LABEL_95:
  if ((SHIBYTE(v50.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return;
LABEL_99:
    operator delete(__dst.__r_.__value_.__l.__data_);
    return;
  }
  operator delete(v50.__r_.__value_.__l.__data_);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_99;
}

void sub_20EFE0450(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  uint64_t v28;

  if (a28 < 0)
  {
    operator delete(__p);
    if ((a21 & 0x80000000) == 0)
    {
LABEL_3:
      if ((*(char *)(v28 + 23) & 0x80000000) == 0)
LABEL_8:
        _Unwind_Resume(exception_object);
LABEL_7:
      operator delete(*(void **)v28);
      goto LABEL_8;
    }
  }
  else if ((a21 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a16);
  if ((*(char *)(v28 + 23) & 0x80000000) == 0)
    goto LABEL_8;
  goto LABEL_7;
}

BOOL sub_20EFE0554(uint64_t a1)
{
  return !*(_BYTE *)(a1 + 115) && *(_QWORD *)(a1 + 80) == 0;
}

uint64_t sub_20EFE0574(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 114))
    return 0xFFFFFFFFLL;
  else
    return *(_BYTE *)(a1 + 115) == 0;
}

uint64_t sub_20EFE0594(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 112);
}

uint64_t sub_20EFE059C(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 116);
}

BOOL sub_20EFE05A4(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v2 = *(_QWORD *)(a1 + 48);
  if (v2)
  {
    v4 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v2 + 24))(*(_QWORD *)(a1 + 48));
    v5 = *a2;
    *a2 = v4;
    if (v5)
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  }
  return v2 != 0;
}

uint64_t sub_20EFE05FC(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t result;
  _DWORD *v6;
  _DWORD *v7;
  uint64_t v8;
  uint64_t (*v9)();
  std::runtime_error v10;

  if (*a2)
    v4 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a2 + 16))(*a2);
  else
    v4 = MEMORY[0x24BEDB7C8];
  result = *(_QWORD *)(v4 + 8) & 0x7FFFFFFFFFFFFFFFLL;
  if (result == ((unint64_t)"N4cv3d3vio8odometry31CalibrationChangeDetectorConfig9AlgorithmE" & 0x7FFFFFFFFFFFFFFFLL)
    || (result = strcmp((const char *)result, (const char *)((unint64_t)"N4cv3d3vio8odometry31CalibrationChangeDetectorConfig9AlgorithmE" & 0x7FFFFFFFFFFFFFFFLL)), !(_DWORD)result))
  {
    v6 = (_DWORD *)(*a2 + 8);
    v7 = *(_DWORD **)(a1 + 16);
    if (!v7)
      goto LABEL_10;
    goto LABEL_9;
  }
  v6 = 0;
  v7 = *(_DWORD **)(a1 + 16);
  if (v7)
LABEL_9:
    *v7 = *v6;
LABEL_10:
  v8 = *(_QWORD *)(a1 + 120);
  v9 = nullsub_602;
  if (!v8)
    v9 = 0;
  if (v9)
  {
    if (!v8)
    {
      std::runtime_error::runtime_error(&v10, "call to empty boost::function");
      v10.__vftable = (std::runtime_error_vtbl *)&unk_24C9ABB38;
      sub_20E86DD10(&v10);
    }
    return (*(uint64_t (**)(uint64_t, _DWORD *))((v8 & 0xFFFFFFFFFFFFFFFELL) + 8))(a1 + 128, v6);
  }
  return result;
}

void sub_20EFE06F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::runtime_error a9)
{
  std::runtime_error::~runtime_error(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20EFE0708(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = &off_24C9F6518;
  *(_QWORD *)(a1 + 8) = &unk_24C9F6590;
  *(_QWORD *)(a1 + 152) = &unk_24C9F65B8;
  if (*(char *)(a1 + 191) < 0)
  {
    operator delete(*(void **)(a1 + 168));
    v2 = *(_QWORD *)(a1 + 160);
    if (!v2)
      return sub_20EFE117C(a1);
    goto LABEL_3;
  }
  v2 = *(_QWORD *)(a1 + 160);
  if (v2)
LABEL_3:
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return sub_20EFE117C(a1);
}

void sub_20EFE0770(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = &off_24C9F6518;
  *(_QWORD *)(a1 + 8) = &unk_24C9F6590;
  *(_QWORD *)(a1 + 152) = &unk_24C9F65B8;
  if (*(char *)(a1 + 191) < 0)
  {
    operator delete(*(void **)(a1 + 168));
    v2 = *(_QWORD *)(a1 + 160);
    if (!v2)
      goto LABEL_4;
  }
  else
  {
    v2 = *(_QWORD *)(a1 + 160);
    if (!v2)
    {
LABEL_4:
      sub_20EFE117C(a1);
      JUMPOUT(0x212BC6398);
    }
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  goto LABEL_4;
}

void sub_20EFE07EC(uint64_t a1, uint64_t *a2, _QWORD *a3)
{
  char *v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  void **v11;
  char *v12;
  void **v13;
  char *v14;
  std::ios_base *v15;
  std::bad_cast_vtbl *v16;
  int v17;
  std::string::size_type v18;
  std::string::size_type size;
  std::string *v20;
  unsigned __int8 v21;
  unsigned __int8 v22;
  unsigned __int8 v23;
  std::string *v24;
  size_t v25;
  unint64_t v26;
  uint64_t v27;
  size_t v28;
  void *v29;
  std::string::size_type v30;
  unsigned __int8 *v31;
  std::string::size_type v32;
  void *v33;
  std::string *v34;
  int v35;
  std::string *v36;
  std::string::size_type v37;
  std::string::size_type v38;
  int v39;
  int v42;
  std::string *v43;
  std::string::size_type v44;
  std::string::size_type v45;
  uint64_t v46;
  uint64_t v49;
  uint64_t v50;
  BOOL v51;
  std::string *v52;
  std::runtime_error *exception;
  uint64_t *v54;
  void *__p[2];
  uint64_t v56;
  std::bad_cast v57;
  void *v58;
  std::ios_base v59;
  uint64_t v60;
  int v61;
  _QWORD __sb[8];
  std::string v63;
  std::string v64;

  if (*a3 == a3[1])
  {
    v7 = *(_QWORD *)(a1 + 80);
    if (v7)
    {
      v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 24))(v7);
      v9 = *a2;
      *a2 = v8;
      if (v9)
        (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
      return;
    }
  }
  sub_20E8B84BC(a2);
  v5 = (char *)sub_20E8B850C(a3, 0);
  v54 = a2;
  if (v5[23] < 0)
  {
    sub_20E860C04(__p, *(void **)v5, *((_QWORD *)v5 + 1));
  }
  else
  {
    v6 = *(_OWORD *)v5;
    v56 = *((_QWORD *)v5 + 2);
    *(_OWORD *)__p = v6;
  }
  v10 = (char *)HIBYTE(v56);
  v11 = (void **)__p[0];
  v12 = (char *)__p[1];
  std::streambuf::basic_streambuf();
  v13 = __p;
  if ((char)v10 >= 0)
  {
    v14 = v10;
  }
  else
  {
    v13 = v11;
    v14 = v12;
  }
  __sb[0] = &off_24C9C2750;
  __sb[2] = v13;
  __sb[3] = v13;
  __sb[4] = &v14[(_QWORD)v13];
  v58 = 0;
  v59.__vftable = (std::ios_base_vtbl *)(MEMORY[0x24BEDB820] + 64);
  v57.__vftable = (std::bad_cast_vtbl *)(MEMORY[0x24BEDB820] + 24);
  std::ios_base::init(&v59, __sb);
  v60 = 0;
  v61 = -1;
  v15 = (std::ios_base *)((char *)&v57 + (unint64_t)v57.__vftable[-1].~bad_cast);
  v15->__exceptions_ = 1;
  std::ios_base::clear(v15, v15->__rdstate_);
  v16 = v57.__vftable;
  *(_DWORD *)((char *)&v57 + (unint64_t)v57.__vftable[-1].~bad_cast + 8) &= ~0x1000u;
  *(std::ios_base_vtbl **)((char *)&v59.__vftable + (unint64_t)v16[-1].~bad_cast) = (std::ios_base_vtbl *)6;
  memset(&v64, 0, sizeof(v64));
  sub_20EA94AF4((uint64_t *)&v57, (uint64_t)&v64);
  v17 = SHIBYTE(v64.__r_.__value_.__r.__words[2]);
  v18 = v64.__r_.__value_.__r.__words[0];
  if ((v64.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v64.__r_.__value_.__r.__words[2]);
  else
    size = v64.__r_.__value_.__l.__size_;
  memset(&v63, 0, sizeof(v63));
  std::string::reserve(&v63, size);
  if (v17 >= 0)
    v20 = &v64;
  else
    v20 = (std::string *)v18;
  while (size)
  {
    while (1)
    {
      v21 = __tolower(v20->__r_.__value_.__s.__data_[0]);
      v22 = v21;
      v23 = HIBYTE(v63.__r_.__value_.__r.__words[2]);
      if (SHIBYTE(v63.__r_.__value_.__r.__words[2]) < 0)
        break;
      if (HIBYTE(v63.__r_.__value_.__r.__words[2]) == 22)
      {
        v24 = &v63;
        v25 = 22;
        goto LABEL_26;
      }
      *((_BYTE *)&v63.__r_.__value_.__s + 23) = (*((_BYTE *)&v63.__r_.__value_.__s + 23) + 1) & 0x7F;
      *(_WORD *)((char *)&v63.__r_.__value_.__l.__data_ + v23) = v21;
      v20 = (std::string *)((char *)v20 + 1);
      if (!--size)
        goto LABEL_42;
    }
    v25 = (v63.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
    if (v63.__r_.__value_.__l.__size_ == v25)
    {
      if ((v63.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) == 0x7FFFFFFFFFFFFFF8)
        sub_20E860B7C();
      v24 = (std::string *)v63.__r_.__value_.__r.__words[0];
      if (v25 > 0x3FFFFFFFFFFFFFF2)
      {
        v28 = 0x7FFFFFFFFFFFFFF7;
      }
      else
      {
LABEL_26:
        if (v25 + 1 > 2 * v25)
          v26 = v25 + 1;
        else
          v26 = 2 * v25;
        v27 = (v26 & 0x7FFFFFFFFFFFFFF8) + 8;
        if ((v26 | 7) != 0x17)
          v27 = v26 | 7;
        if (v26 >= 0x17)
          v28 = v27 + 1;
        else
          v28 = 23;
      }
      v29 = operator new(v28);
      v30 = (std::string::size_type)v29;
      if (!v25 || (memmove(v29, v24, v25), v25 != 22))
        operator delete(v24);
      v63.__r_.__value_.__r.__words[0] = v30;
      v63.__r_.__value_.__r.__words[2] = v28 | 0x8000000000000000;
      goto LABEL_39;
    }
    v25 = v63.__r_.__value_.__l.__size_;
    v30 = v63.__r_.__value_.__r.__words[0];
LABEL_39:
    v63.__r_.__value_.__l.__size_ = v25 + 1;
    v31 = (unsigned __int8 *)(v30 + v25);
    *v31 = v22;
    v31[1] = 0;
    v20 = (std::string *)((char *)v20 + 1);
    --size;
  }
LABEL_42:
  if (SHIBYTE(v64.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v64.__r_.__value_.__l.__data_);
  v64 = v63;
  v32 = HIBYTE(v63.__r_.__value_.__r.__words[2]);
  if ((v63.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v32 = v64.__r_.__value_.__l.__size_;
  switch(v32)
  {
    case 1uLL:
      v33 = (void *)v64.__r_.__value_.__r.__words[0];
      v34 = &v64;
      if ((v63.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v34 = (std::string *)v64.__r_.__value_.__r.__words[0];
      v35 = v34->__r_.__value_.__s.__data_[0];
      if (v35 == 48)
        goto LABEL_89;
      if (v35 == 49)
        goto LABEL_75;
      if (v35 != 50)
        goto LABEL_92;
LABEL_63:
      v42 = 2;
      if (SHIBYTE(v63.__r_.__value_.__r.__words[2]) < 0)
LABEL_76:
        operator delete(v33);
LABEL_77:
      if ((*((_BYTE *)&v59.__precision_ + (unint64_t)v57.__vftable[-1].~bad_cast) & 5) != 0)
      {
        std::istream::~istream();
        std::streambuf::~streambuf();
        goto LABEL_85;
      }
      v51 = std::istream::get() == -1;
      std::istream::~istream();
      std::streambuf::~streambuf();
      if (!v51)
      {
LABEL_85:
        std::bad_cast::bad_cast(&v57);
        v57.__vftable = (std::bad_cast_vtbl *)&unk_24C9C28C0;
        v58 = &unk_24C9AB9F0;
        v59.__vftable = (std::ios_base_vtbl *)&unk_24C9F66D8;
        sub_20EA9F254((uint64_t)&v57);
      }
      v49 = operator new();
      *(_QWORD *)v49 = &off_24C9F66F8;
      *(_DWORD *)(v49 + 8) = v42;
      v50 = *v54;
      *v54 = v49;
      if (v50)
        (*(void (**)(uint64_t))(*(_QWORD *)v50 + 8))(v50);
      if (SHIBYTE(v56) < 0)
        operator delete(__p[0]);
      return;
    case 4uLL:
      v33 = (void *)v64.__r_.__value_.__r.__words[0];
      v52 = &v64;
      if ((v63.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v52 = (std::string *)v64.__r_.__value_.__r.__words[0];
      if (LODWORD(v52->__r_.__value_.__l.__data_) != 1701736302)
        goto LABEL_92;
LABEL_89:
      v42 = 0;
      if (SHIBYTE(v63.__r_.__value_.__r.__words[2]) < 0)
        goto LABEL_76;
      goto LABEL_77;
    case 0x12uLL:
      v33 = (void *)v64.__r_.__value_.__r.__words[0];
      v36 = &v64;
      if ((v63.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v36 = (std::string *)v64.__r_.__value_.__r.__words[0];
      v37 = v36->__r_.__value_.__r.__words[0];
      v38 = v36->__r_.__value_.__l.__size_;
      v39 = LOWORD(v36->__r_.__value_.__r.__words[2]);
      if (v37 != 0x6C75676E61697274 || v38 != 0x7272656E6F697461 || v39 != 29295)
        goto LABEL_92;
      goto LABEL_63;
    case 0x13uLL:
      v33 = (void *)v64.__r_.__value_.__r.__words[0];
      v43 = &v64;
      if ((v63.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v43 = (std::string *)v64.__r_.__value_.__r.__words[0];
      v44 = v43->__r_.__value_.__r.__words[0];
      v45 = v43->__r_.__value_.__l.__size_;
      v46 = *(std::string::size_type *)((char *)&v43->__r_.__value_.__r.__words[1] + 3);
      if (v44 != 0x6574656D61726170 || v45 != 0x6572656666696472 || v46 != 0x65636E6572656666)
        goto LABEL_92;
LABEL_75:
      v42 = 1;
      if (SHIBYTE(v63.__r_.__value_.__r.__words[2]) < 0)
        goto LABEL_76;
      goto LABEL_77;
    default:
LABEL_92:
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::operator+<char>();
      std::runtime_error::runtime_error(exception, &v63);
      __cxa_throw(exception, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
  }
}

void sub_20EFE0DC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, char a18)
{
  if (a2 == 2)
  {
    __cxa_begin_catch(a1);
    __cxa_end_catch();
    JUMPOUT(0x20EFE0C50);
  }
  std::istream::~istream();
  std::streambuf::~streambuf();
  if (a2 == 1)
  {
    __cxa_begin_catch(a1);
    sub_20E8B898C(&a18, &__p);
    sub_20EA9ED20((uint64_t)&a18);
  }
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_20EFE0DD4()
{
  int v0;
  void *v1;
  uint64_t v2;

  if (*(char *)(v2 - 113) < 0)
  {
    operator delete(*(void **)(v2 - 136));
    if ((v0 & 1) == 0)
      goto LABEL_6;
  }
  else if (!v0)
  {
LABEL_6:
    if (*(char *)(v2 - 89) < 0)
      operator delete(*(void **)(v2 - 112));
    JUMPOUT(0x20EFE0EF8);
  }
  __cxa_free_exception(v1);
  goto LABEL_6;
}

void sub_20EFE0E14(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::exception a15)
{
  std::exception::~exception(&a15);
  if (a2 == 1)
  {
    __cxa_begin_catch(a1);
    sub_20E8B898C(&a15, &a11);
    sub_20EA9ED20((uint64_t)&a15);
  }
  JUMPOUT(0x20EFE0EACLL);
}

void sub_20EFE0E28()
{
  uint64_t v0;

  if (*(char *)(v0 - 89) < 0)
    operator delete(*(void **)(v0 - 112));
  JUMPOUT(0x20EFE0EF8);
}

void sub_20EFE0E34()
{
  JUMPOUT(0x20EFE0E3CLL);
}

void sub_20EFE0E48()
{
  uint64_t v0;

  MEMORY[0x212BC6290](v0);
  JUMPOUT(0x20EFE0E58);
}

void sub_20EFE0E64()
{
  JUMPOUT(0x20EFE0E6CLL);
}

void sub_20EFE0E94(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  sub_20E8B9BA0((uint64_t)va);
  __cxa_end_catch();
  JUMPOUT(0x20EFE0EACLL);
}

void sub_20EFE0ECC()
{
  uint64_t v0;

  if (*(char *)(v0 - 113) < 0)
    operator delete(*(void **)(v0 - 136));
  if (*(char *)(v0 - 89) < 0)
    operator delete(*(void **)(v0 - 112));
  JUMPOUT(0x20EFE0EF8);
}

void *sub_20EFE0F14()
{
  return &unk_24C9F66D8;
}

uint64_t sub_20EFE0F20(uint64_t a1)
{
  return a1 + 168;
}

void *sub_20EFE0F28()
{
  return &unk_24C9F66D8;
}

uint64_t sub_20EFE0F34(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)(a1 - 8) = &off_24C9F6518;
  v2 = a1 - 8;
  *(_QWORD *)a1 = &unk_24C9F6590;
  *(_QWORD *)(a1 + 144) = &unk_24C9F65B8;
  if (*(char *)(a1 + 183) < 0)
  {
    operator delete(*(void **)(a1 + 160));
    v3 = *(_QWORD *)(a1 + 152);
    if (!v3)
      return sub_20EFE117C(v2);
    goto LABEL_3;
  }
  v3 = *(_QWORD *)(a1 + 152);
  if (v3)
LABEL_3:
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return sub_20EFE117C(v2);
}

void sub_20EFE0FA4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)(a1 - 8) = &off_24C9F6518;
  v2 = a1 - 8;
  *(_QWORD *)a1 = &unk_24C9F6590;
  *(_QWORD *)(a1 + 144) = &unk_24C9F65B8;
  if (*(char *)(a1 + 183) < 0)
  {
    operator delete(*(void **)(a1 + 160));
    v3 = *(_QWORD *)(a1 + 152);
    if (!v3)
      goto LABEL_4;
  }
  else
  {
    v3 = *(_QWORD *)(a1 + 152);
    if (!v3)
    {
LABEL_4:
      sub_20EFE117C(v2);
      JUMPOUT(0x212BC6398);
    }
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  goto LABEL_4;
}

uint64_t sub_20EFE1028(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)(a1 - 152) = &off_24C9F6518;
  v2 = a1 - 152;
  *(_QWORD *)(a1 - 144) = &unk_24C9F6590;
  *(_QWORD *)a1 = &unk_24C9F65B8;
  if (*(char *)(a1 + 39) < 0)
  {
    operator delete(*(void **)(a1 + 16));
    v3 = *(_QWORD *)(a1 + 8);
    if (!v3)
      return sub_20EFE117C(v2);
    goto LABEL_3;
  }
  v3 = *(_QWORD *)(a1 + 8);
  if (v3)
LABEL_3:
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return sub_20EFE117C(v2);
}

void sub_20EFE1098(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)(a1 - 152) = &off_24C9F6518;
  v2 = a1 - 152;
  *(_QWORD *)(a1 - 144) = &unk_24C9F6590;
  *(_QWORD *)a1 = &unk_24C9F65B8;
  if (*(char *)(a1 + 39) < 0)
  {
    operator delete(*(void **)(a1 + 16));
    v3 = *(_QWORD *)(a1 + 8);
    if (!v3)
      goto LABEL_4;
  }
  else
  {
    v3 = *(_QWORD *)(a1 + 8);
    if (!v3)
    {
LABEL_4:
      sub_20EFE117C(v2);
      JUMPOUT(0x212BC6398);
    }
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  goto LABEL_4;
}

uint64_t sub_20EFE111C(uint64_t a1)
{
  return a1 + 16;
}

void sub_20EFE1128(uint64_t a1)
{
  sub_20EFE117C(a1);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20EFE114C(uint64_t a1)
{
  return sub_20EFE117C(a1 - 8);
}

void sub_20EFE1154(uint64_t a1)
{
  sub_20EFE117C(a1 - 8);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20EFE117C(uint64_t a1)
{
  uint64_t v2;
  void (*v3)(uint64_t, uint64_t, uint64_t);
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)a1 = &off_24C9F6650;
  *(_QWORD *)(a1 + 8) = &unk_24C9F66C0;
  v2 = *(_QWORD *)(a1 + 120);
  if (v2)
  {
    if ((v2 & 1) == 0)
    {
      v3 = *(void (**)(uint64_t, uint64_t, uint64_t))(v2 & 0xFFFFFFFFFFFFFFFELL);
      if (v3)
        v3(a1 + 128, a1 + 128, 2);
    }
    *(_QWORD *)(a1 + 120) = 0;
  }
  if (*(char *)(a1 + 111) < 0)
    operator delete(*(void **)(a1 + 88));
  v4 = *(_QWORD *)(a1 + 80);
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  if (*(char *)(a1 + 79) < 0)
    operator delete(*(void **)(a1 + 56));
  v5 = *(_QWORD *)(a1 + 48);
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  return a1;
}

void sub_20EFE124C()
{
  JUMPOUT(0x212BC6398);
}

void *sub_20EFE1260()
{
  return &unk_24C9F66D8;
}

uint64_t sub_20EFE126C(uint64_t a1)
{
  uint64_t result;

  result = operator new();
  *(_QWORD *)result = &off_24C9F66F8;
  *(_DWORD *)(result + 8) = *(_DWORD *)(a1 + 8);
  return result;
}

uint64_t sub_20EFE12B4(uint64_t result, _WORD *a2, unsigned int a3)
{
  uint64_t v4;

  if (a3 == 4)
    goto LABEL_2;
  v4 = result;
  if (a3 <= 1)
  {
    *(_QWORD *)a2 = *(_QWORD *)result;
    return result;
  }
  if (a3 != 2)
  {
    if (a3 != 3)
    {
LABEL_2:
      *(_QWORD *)a2 = &unk_24C9F6740;
      a2[4] = 0;
      return result;
    }
    result = *(_QWORD *)(*(_QWORD *)a2 + 8) & 0x7FFFFFFFFFFFFFFFLL;
    if (result == ((unint64_t)"Z40CreateProgramOptionValueWithSavedCurrentIN4cv3d3vio8odometry31CalibrationChange"
                                      "DetectorConfig9AlgorithmEEPN5boost15program_options11typed_valueIT_cEERS8_EUlRKS4_E_" & 0x7FFFFFFFFFFFFFFFLL)
      || (result = strcmp((const char *)result, (const char *)((unint64_t)"Z40CreateProgramOptionValueWithSavedCurrentIN4cv3d3vio8odometry31CalibrationChangeDetectorConfig9AlgorithmEEPN5boost15program_options11typed_valueIT_cEERS8_EUlRKS4_E_" & 0x7FFFFFFFFFFFFFFFLL)), !(_DWORD)result))
    {
      *(_QWORD *)a2 = v4;
    }
    else
    {
      *(_QWORD *)a2 = 0;
    }
  }
  return result;
}

_DWORD **sub_20EFE1360(_DWORD **result, _DWORD *a2)
{
  **result = *a2;
  return result;
}

void sub_20EFE1370(uint64_t a1, std::string::size_type a2, const std::string::value_type *a3, size_t a4, std::string::size_type a5, uint64_t a6, int *a7, float64x2_t a8)
{
  double v13;
  unsigned int v16;
  int8x8_t v17;
  int v18;
  unint64_t v19;
  uint8x8_t v20;
  unint64_t v21;
  uint64_t **v22;
  uint64_t *v23;
  uint64_t v24;
  unint64_t v26;
  uint64_t v28;
  float64x2_t v29;
  double v30;
  int v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t *v36;
  size_t v37;
  void **v38;
  const double *v39;
  float64x2_t v40;
  int v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t *v44;
  char *v45;
  int v46;
  int64_t v47;
  size_t v48;
  size_t v49;
  double v50;
  size_t v51;
  size_t v52;
  double v53;
  std::string *p_b;
  uint64_t *v55;
  unsigned int v56;
  __int128 v57;
  _QWORD *v58;
  char v59;
  void *v60;
  size_t v61;
  double v62;
  std::string::size_type v63;
  __int128 v64;
  uint64_t v65;
  uint64_t v66;
  void **v67;
  uint64_t v68;
  uint64_t v69;
  size_t v70;
  const char *v71;
  unsigned __int8 v72;
  unsigned __int8 v73;
  const char *v74;
  size_t v75;
  std::string::size_type *v76;
  int v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  const char *v82;
  unint64_t v83;
  uint64_t v84;
  uint64_t v85;
  NSObject *v86;
  size_t v87;
  void *v88;
  _QWORD *v89;
  size_t v90;
  size_t v91;
  void **v92;
  void *v93;
  uint64_t v94;
  unsigned __int16 v95;
  BOOL v96;
  char v97;
  unsigned __int16 v98;
  BOOL v99;
  char v100;
  uint64_t v101;
  uint64_t v102;
  void **v103;
  char v104;
  _QWORD *v105;
  uint64_t v106;
  std::__shared_weak_count *v107;
  unint64_t *v108;
  unint64_t v109;
  char *v110;
  unint64_t *v111;
  unint64_t v112;
  std::__shared_weak_count *v113;
  unint64_t *v114;
  unint64_t v115;
  unint64_t v116;
  std::__shared_weak_count *v117;
  unint64_t *v118;
  unint64_t v119;
  std::string::size_type v120;
  char *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  __int128 v127;
  std::string::size_type v128;
  std::__shared_weak_count *v129;
  unint64_t *v130;
  unint64_t v131;
  std::__shared_weak_count *v132;
  unint64_t *v133;
  unint64_t v134;
  void **v135;
  std::__shared_weak_count *v136;
  unint64_t *v137;
  unint64_t v138;
  std::__shared_weak_count *v139;
  unint64_t *v140;
  unint64_t v141;
  std::__shared_weak_count *v142;
  unint64_t *v143;
  unint64_t v144;
  std::__shared_weak_count *v145;
  unint64_t *v146;
  unint64_t v147;
  const char *v148;
  std::__shared_weak_count *v149;
  unint64_t *v150;
  unint64_t v151;
  uint64_t v152;
  uint64_t v153;
  std::string *v154;
  __int128 v155;
  void **v156;
  uint64_t v157;
  uint64_t v158;
  const std::string::value_type *v159;
  std::string::size_type v160;
  std::string *v161;
  __int128 v162;
  _QWORD *v163;
  uint64_t v164;
  _QWORD *v165;
  uint64_t v166;
  uint64_t v167;
  char *v168;
  std::string *v169;
  std::string::size_type size;
  uint64_t v171;
  char *v172;
  std::string *v173;
  std::string::size_type v174;
  uint64_t v175;
  char *v176;
  std::string *v177;
  std::string::size_type v178;
  uint64_t v179;
  char *v180;
  std::string *v181;
  std::string::size_type v182;
  size_t v183;
  void **p_dst;
  float64_t v185;
  const void **v186;
  const void *v187;
  uint64_t v188;
  uint64_t v189;
  const char *v190;
  uint64_t v191;
  uint64_t v192;
  size_t v193;
  const char *v194;
  unsigned __int8 v195;
  const char *v196;
  size_t v197;
  std::string::size_type *p_size;
  uint64_t v199;
  uint64_t v200;
  char *v201;
  uint64_t v202;
  uint64_t v203;
  NSObject *v204;
  size_t v205;
  void *v206;
  _QWORD *v207;
  size_t v208;
  size_t v209;
  void **v210;
  void *v211;
  int v212;
  uint64_t v213;
  uint64_t v214;
  void **v215;
  char v216;
  _QWORD *v217;
  uint64_t v218;
  std::__shared_weak_count *v219;
  unint64_t *p_shared_owners;
  unint64_t v221;
  char *v222;
  unint64_t *v223;
  unint64_t v224;
  std::__shared_weak_count *v225;
  unint64_t *v226;
  unint64_t v227;
  unint64_t v228;
  std::__shared_weak_count *v229;
  unint64_t *v230;
  unint64_t v231;
  std::string::size_type v232;
  char *v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  __int128 v239;
  std::string::size_type v240;
  std::__shared_weak_count *v241;
  unint64_t *v242;
  unint64_t v243;
  std::__shared_weak_count *v244;
  unint64_t *v245;
  unint64_t v246;
  void **v247;
  std::__shared_weak_count *v248;
  unint64_t *v249;
  unint64_t v250;
  std::__shared_weak_count *v251;
  unint64_t *v252;
  unint64_t v253;
  std::__shared_weak_count *v254;
  unint64_t *v255;
  unint64_t v256;
  std::__shared_weak_count *v257;
  unint64_t *v258;
  unint64_t v259;
  const char *v260;
  unint64_t *v261;
  uint64_t v262;
  int v263;
  __int128 v264;
  unint64_t v265;
  float64x2_t v266;
  std::string v267;
  int v268;
  const char *v269;
  int v270;
  const char *v271;
  uint64_t v272;
  std::__shared_weak_count *v273;
  void **__dst;
  size_t v275;
  int64_t v276;
  uint64_t *v277;
  double v278;
  uint64_t v279;
  std::string v280;
  int v281;
  float64x2_t v282;
  double v283;
  float64x2_t v284;
  __int128 v285;
  double v286;
  __int128 __p;
  uint64_t v288;
  __int16 v289;
  int v290;
  char v291;
  uint64_t v292;
  std::string __b;
  char *v294;
  std::__shared_weak_count *v295;
  void **v296;
  __int128 v297;
  std::string v298;
  __int128 v299;
  char *v300;
  size_t v301;
  unint64_t v302;
  char v303;
  _QWORD v304[5];

  v13 = a8.f64[0];
  v304[2] = *MEMORY[0x24BDAC8D0];
  if (*(_DWORD *)a2 >= 0x10000u
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/ComputerVisionTypes/include/VIO/ComputerVisionTypes/CameraStreamId.h", 49, (uint64_t)"camera_id <= 0xffff", 19, (uint64_t)"Camera ID cannot exceeds 16 bits", 32, (void (*)(void **))sub_21023DDB0))
  {
    goto LABEL_447;
  }
  v16 = *(_DWORD *)(a2 + 4);
  if (v16 >= 0x10000)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/ComputerVisionTypes/include/VIO/ComputerVisionTypes/CameraStreamId.h", 50, (uint64_t)"stream_id <= 0xffff", 19, (uint64_t)"Stream ID cannot exceeds 16 bits", 32, (void (*)(void **))sub_21023DDB0))
    {
      goto LABEL_447;
    }
    v16 = *(_DWORD *)(a2 + 4);
  }
  v17 = *(int8x8_t *)(a1 + 24);
  if (v17)
  {
    v18 = *(_DWORD *)a2;
    v19 = (unsigned __int16)v16 | ((unsigned __int16)*(_DWORD *)a2 << 16);
    v20 = (uint8x8_t)vcnt_s8(v17);
    v20.i16[0] = vaddlv_u8(v20);
    if (v20.u32[0] > 1uLL)
    {
      v21 = (unsigned __int16)v16 | ((unsigned __int16)v18 << 16);
      if (*(_QWORD *)&v17 <= v19)
        v21 = v19 % *(_QWORD *)&v17;
    }
    else
    {
      v21 = (v17.i32[0] - 1) & v19;
    }
    v22 = *(uint64_t ***)(*(_QWORD *)(a1 + 16) + 8 * v21);
    if (v22)
    {
      v23 = *v22;
      if (v23)
      {
        if (v20.u32[0] < 2uLL)
        {
          v24 = *(_QWORD *)&v17 - 1;
          while (1)
          {
            v28 = v23[1];
            if (v28 == v19)
            {
              if (*((_DWORD *)v23 + 4) == v18 && *((_DWORD *)v23 + 5) == v16)
                goto LABEL_33;
            }
            else if ((v28 & v24) != v21)
            {
              goto LABEL_32;
            }
            v23 = (uint64_t *)*v23;
            if (!v23)
              goto LABEL_32;
          }
        }
        do
        {
          v26 = v23[1];
          if (v26 == v19)
          {
            if (*((_DWORD *)v23 + 4) == v18 && *((_DWORD *)v23 + 5) == v16)
              goto LABEL_33;
          }
          else
          {
            if (v26 >= *(_QWORD *)&v17)
              v26 %= *(_QWORD *)&v17;
            if (v26 != v21)
              break;
          }
          v23 = (uint64_t *)*v23;
        }
        while (v23);
      }
    }
  }
LABEL_32:
  if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Odometry/src/CalibrationChangeNotifier.cpp", 39, (uint64_t)"status_.count(camera_stream_id)", 31, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
LABEL_447:
    abort();
  }
LABEL_33:
  a8.f64[0] = *(float64_t *)(a5 + 16);
  *(_QWORD *)&a8.f64[0] = *(_OWORD *)&vabsq_f64(a8);
  v29 = vabsq_f64(*(float64x2_t *)a5);
  v30 = *(double *)a1;
  if (v29.f64[0] <= *(double *)a1 && v29.f64[1] <= v30 && a8.f64[0] <= v30)
  {
    if (*(_BYTE *)(a6 + 32))
    {
      v39 = (const double *)(a1 + 8);
      v40 = vld1q_dup_f64(v39);
      if ((vmaxv_u16((uint16x4_t)vcltz_s16(vshl_n_s16(vmovn_s32(vuzp1q_s32((int32x4_t)vcgtq_f64(vabsq_f64(*(float64x2_t *)a6), v40), (int32x4_t)vcgtq_f64(vabsq_f64(*(float64x2_t *)(a6 + 16)), v40))), 0xFuLL))) & 1) != 0)
      {
        sub_20EFE3464(&v292);
        if (**(int **)(v292 + 56) > 4)
          return;
        v41 = *(unsigned __int8 *)(v292 + 72);
        v42 = sub_20E8C31DC(v292, "OSLogSurrogateAppender", 1, 0);
        v43 = v42;
        if (!v41 && !v42)
          return;
        sub_20E863438((uint64_t)&v277);
        v44 = sub_20E86A980(&v279, (uint64_t)"CCD: Abnormal intrinsics calibration update: ", 45);
        v264 = *(_OWORD *)(a6 + 16);
        v266 = *(float64x2_t *)a6;
        v45 = (char *)v44 + *(_QWORD *)(*v44 - 24);
        v46 = *((_DWORD *)v45 + 2);
        v48 = *((_QWORD *)v45 + 2);
        v47 = *((_QWORD *)v45 + 3);
        if (v47)
        {
          if (v47 <= (uint64_t)(v48 + 2))
            v49 = v48 + 2;
          else
            v49 = v47;
          v50 = __exp10((double)-(uint64_t)v48);
          v51 = v49 + ~v48;
          v52 = v51 - 1;
          if (v51 - 1 > 0x7FFFFFFFFFFFFFF7)
            sub_20E860B7C();
          v53 = v50;
          if (v52 >= 0x17)
          {
            v152 = (v52 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v52 | 7) != 0x17)
              v152 = v52 | 7;
            v153 = v152 + 1;
            p_b = (std::string *)operator new(v152 + 1);
            __b.__r_.__value_.__l.__size_ = v51 - 1;
            __b.__r_.__value_.__r.__words[2] = v153 | 0x8000000000000000;
            __b.__r_.__value_.__r.__words[0] = (std::string::size_type)p_b;
          }
          else
          {
            *((_BYTE *)&__b.__r_.__value_.__s + 23) = v51 - 1;
            p_b = &__b;
            if (v51 == 1)
            {
              LODWORD(v51) = 1;
              goto LABEL_239;
            }
          }
        }
        else
        {
          v53 = __exp10((double)-(uint64_t)v48);
          v52 = 3;
          *((_BYTE *)&__b.__r_.__value_.__s + 23) = 3;
          p_b = &__b;
          LODWORD(v51) = 4;
        }
        memset(p_b, 32, v52);
LABEL_239:
        p_b->__r_.__value_.__s.__data_[v52] = 0;
        v154 = std::string::append(&__b, "0 ", 2uLL);
        v155 = *(_OWORD *)&v154->__r_.__value_.__l.__data_;
        v267.__r_.__value_.__r.__words[2] = v154->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v267.__r_.__value_.__l.__data_ = v155;
        v154->__r_.__value_.__l.__size_ = 0;
        v154->__r_.__value_.__r.__words[2] = 0;
        v154->__r_.__value_.__r.__words[0] = 0;
        if (v48 > 0x7FFFFFFFFFFFFFF7)
          sub_20E860B7C();
        if (v48 >= 0x17)
        {
          v157 = (v48 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v48 | 7) != 0x17)
            v157 = v48 | 7;
          v158 = v157 + 1;
          v156 = (void **)operator new(v157 + 1);
          *(_QWORD *)&v297 = v48;
          *((_QWORD *)&v297 + 1) = v158 | 0x8000000000000000;
          v296 = v156;
        }
        else
        {
          HIBYTE(v297) = v48;
          v156 = (void **)&v296;
          if (!v48)
          {
LABEL_247:
            *((_BYTE *)v156 + v48) = 0;
            if (v297 >= 0)
              v159 = (const std::string::value_type *)&v296;
            else
              v159 = (const std::string::value_type *)v296;
            if (v297 >= 0)
              v160 = HIBYTE(v297);
            else
              v160 = v297;
            v161 = std::string::append(&v267, v159, v160);
            v162 = *(_OWORD *)&v161->__r_.__value_.__l.__data_;
            v298.__r_.__value_.__r.__words[2] = v161->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v298.__r_.__value_.__l.__data_ = v162;
            v161->__r_.__value_.__l.__size_ = 0;
            v161->__r_.__value_.__r.__words[2] = 0;
            v161->__r_.__value_.__r.__words[0] = 0;
            if (SHIBYTE(v297) < 0)
            {
              operator delete(v296);
              if ((SHIBYTE(v267.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              {
LABEL_255:
                if ((SHIBYTE(__b.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                  goto LABEL_256;
LABEL_269:
                operator delete(__b.__r_.__value_.__l.__data_);
LABEL_256:
                *(uint64_t *)((char *)v44 + *(_QWORD *)(*v44 - 24) + 24) = 0;
                v267.__r_.__value_.__s.__data_[0] = 91;
                sub_20E86A980(v44, (uint64_t)&v267, 1);
                v163 = v44 + 1;
                v165 = v44 + 2;
                v164 = *v44;
                v166 = (int)v51 + (int)v48 + 1;
                v167 = (int)v48 - 3;
                v168 = (char *)v44 + *(_QWORD *)(*v44 - 24);
                if ((v168[9] & 1) != 0)
                {
                  if (v266.f64[0] != 0.0)
                  {
                    *((_QWORD *)v168 + 3) = v166;
                    *(_DWORD *)((char *)v163 + *(_QWORD *)(v164 - 24)) |= 0x400u;
                    *(_QWORD *)((char *)v165 + *(_QWORD *)(v164 - 24)) = v167;
                    std::ostream::operator<<();
                    goto LABEL_271;
                  }
                }
                else if (fabs(v266.f64[0]) >= v53)
                {
                  *((_QWORD *)v168 + 3) = v166;
                  *(_DWORD *)((char *)v163 + *(_QWORD *)(v164 - 24)) = *(_DWORD *)((_BYTE *)v163 + *(_QWORD *)(v164 - 24)) & 0xFFFFFEFB | 4;
                  *(_DWORD *)((char *)v163 + *(_QWORD *)(v164 - 24)) |= 0x400u;
                  *(_QWORD *)((char *)v165 + *(_QWORD *)(v164 - 24)) = (int)v48;
                  std::ostream::operator<<();
                  goto LABEL_271;
                }
                if ((v298.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                  v169 = &v298;
                else
                  v169 = (std::string *)v298.__r_.__value_.__r.__words[0];
                if ((v298.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                  size = HIBYTE(v298.__r_.__value_.__r.__words[2]);
                else
                  size = v298.__r_.__value_.__l.__size_;
                sub_20E86A980(v44, (uint64_t)v169, size);
LABEL_271:
                v267.__r_.__value_.__s.__data_[0] = 44;
                sub_20E86A980(v44, (uint64_t)&v267, 1);
                v171 = *v44;
                v172 = (char *)v44 + *(_QWORD *)(*v44 - 24);
                if ((v172[9] & 1) != 0)
                {
                  if (v266.f64[1] != 0.0)
                  {
                    *((_QWORD *)v172 + 3) = v166;
                    *(_DWORD *)((char *)v163 + *(_QWORD *)(v171 - 24)) |= 0x400u;
                    *(_QWORD *)((char *)v165 + *(_QWORD *)(v171 - 24)) = v167;
                    std::ostream::operator<<();
                    goto LABEL_283;
                  }
                }
                else if (fabs(v266.f64[1]) >= v53)
                {
                  *((_QWORD *)v172 + 3) = v166;
                  *(_DWORD *)((char *)v163 + *(_QWORD *)(v171 - 24)) = *(_DWORD *)((_BYTE *)v163 + *(_QWORD *)(v171 - 24)) & 0xFFFFFEFB | 4;
                  *(_DWORD *)((char *)v163 + *(_QWORD *)(v171 - 24)) |= 0x400u;
                  *(_QWORD *)((char *)v165 + *(_QWORD *)(v171 - 24)) = (int)v48;
                  std::ostream::operator<<();
                  goto LABEL_283;
                }
                if ((v298.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                  v173 = &v298;
                else
                  v173 = (std::string *)v298.__r_.__value_.__r.__words[0];
                if ((v298.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                  v174 = HIBYTE(v298.__r_.__value_.__r.__words[2]);
                else
                  v174 = v298.__r_.__value_.__l.__size_;
                sub_20E86A980(v44, (uint64_t)v173, v174);
LABEL_283:
                v267.__r_.__value_.__s.__data_[0] = 44;
                sub_20E86A980(v44, (uint64_t)&v267, 1);
                v175 = *v44;
                v176 = (char *)v44 + *(_QWORD *)(*v44 - 24);
                if ((v176[9] & 1) != 0)
                {
                  if (*(double *)&v264 != 0.0)
                  {
                    *((_QWORD *)v176 + 3) = v166;
                    *(_DWORD *)((char *)v163 + *(_QWORD *)(v175 - 24)) |= 0x400u;
                    *(_QWORD *)((char *)v165 + *(_QWORD *)(v175 - 24)) = v167;
                    std::ostream::operator<<();
                    goto LABEL_295;
                  }
                }
                else if (fabs(*(double *)&v264) >= v53)
                {
                  *((_QWORD *)v176 + 3) = v166;
                  *(_DWORD *)((char *)v163 + *(_QWORD *)(v175 - 24)) = *(_DWORD *)((_BYTE *)v163 + *(_QWORD *)(v175 - 24)) & 0xFFFFFEFB | 4;
                  *(_DWORD *)((char *)v163 + *(_QWORD *)(v175 - 24)) |= 0x400u;
                  *(_QWORD *)((char *)v165 + *(_QWORD *)(v175 - 24)) = (int)v48;
                  std::ostream::operator<<();
                  goto LABEL_295;
                }
                if ((v298.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                  v177 = &v298;
                else
                  v177 = (std::string *)v298.__r_.__value_.__r.__words[0];
                if ((v298.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                  v178 = HIBYTE(v298.__r_.__value_.__r.__words[2]);
                else
                  v178 = v298.__r_.__value_.__l.__size_;
                sub_20E86A980(v44, (uint64_t)v177, v178);
LABEL_295:
                v267.__r_.__value_.__s.__data_[0] = 44;
                sub_20E86A980(v44, (uint64_t)&v267, 1);
                v179 = *v44;
                v180 = (char *)v44 + *(_QWORD *)(*v44 - 24);
                if ((v180[9] & 1) != 0)
                {
                  if (*((double *)&v264 + 1) != 0.0)
                  {
                    *((_QWORD *)v180 + 3) = v166;
                    *(_DWORD *)((char *)v163 + *(_QWORD *)(v179 - 24)) |= 0x400u;
                    *(_QWORD *)((char *)v165 + *(_QWORD *)(v179 - 24)) = v167;
                    std::ostream::operator<<();
                    goto LABEL_307;
                  }
                }
                else if (fabs(*((double *)&v264 + 1)) >= v53)
                {
                  *((_QWORD *)v180 + 3) = v166;
                  *(_DWORD *)((char *)v163 + *(_QWORD *)(v179 - 24)) = *(_DWORD *)((_BYTE *)v163 + *(_QWORD *)(v179 - 24)) & 0xFFFFFEFB | 4;
                  *(_DWORD *)((char *)v163 + *(_QWORD *)(v179 - 24)) |= 0x400u;
                  *(_QWORD *)((char *)v165 + *(_QWORD *)(v179 - 24)) = (int)v48;
                  std::ostream::operator<<();
                  goto LABEL_307;
                }
                if ((v298.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                  v181 = &v298;
                else
                  v181 = (std::string *)v298.__r_.__value_.__r.__words[0];
                if ((v298.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                  v182 = HIBYTE(v298.__r_.__value_.__r.__words[2]);
                else
                  v182 = v298.__r_.__value_.__l.__size_;
                sub_20E86A980(v44, (uint64_t)v181, v182);
LABEL_307:
                sub_20E86A980(v44, (uint64_t)"   ]", 4);
                *(_DWORD *)((char *)v44 + *(_QWORD *)(*v44 - 24) + 8) = v46;
                if (SHIBYTE(v298.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v298.__r_.__value_.__l.__data_);
                v263 = v41;
                if ((__p & 0x10) != 0)
                {
                  v185 = v286;
                  if (*(_QWORD *)&v286 < *(_QWORD *)&v283)
                  {
                    v286 = v283;
                    v185 = v283;
                  }
                  v186 = (const void **)&v282.f64[1];
                }
                else
                {
                  if ((__p & 8) == 0)
                  {
                    v183 = 0;
                    HIBYTE(v276) = 0;
                    p_dst = (void **)&__dst;
                    goto LABEL_324;
                  }
                  v186 = (const void **)&v280.__r_.__value_.__r.__words[2];
                  v185 = v282.f64[0];
                }
                v187 = *v186;
                v183 = *(_QWORD *)&v185 - (_QWORD)*v186;
                if (v183 > 0x7FFFFFFFFFFFFFF7)
                  sub_20E860B7C();
                if (v183 >= 0x17)
                {
                  v188 = (v183 & 0xFFFFFFFFFFFFFFF8) + 8;
                  if ((v183 | 7) != 0x17)
                    v188 = v183 | 7;
                  v189 = v188 + 1;
                  p_dst = (void **)operator new(v188 + 1);
                  v275 = v183;
                  v276 = v189 | 0x8000000000000000;
                  __dst = p_dst;
                }
                else
                {
                  HIBYTE(v276) = LOBYTE(v185) - *(_BYTE *)v186;
                  p_dst = (void **)&__dst;
                  if (!v183)
                  {
LABEL_324:
                    *((_BYTE *)p_dst + v183) = 0;
                    v267.__r_.__value_.__r.__words[0] = (std::string::size_type)&v292;
                    v267.__r_.__value_.__r.__words[1] = std::chrono::steady_clock::now().__d_.__rep_;
                    v267.__r_.__value_.__r.__words[2] = std::chrono::system_clock::now().__d_.__rep_;
                    v268 = 4;
                    v269 = "unknown file";
                    v270 = 51;
                    v272 = 0;
                    v273 = 0;
                    v271 = "unknown function";
                    if (v276 >= 0)
                      v190 = (const char *)&__dst;
                    else
                      v190 = (const char *)__dst;
                    v191 = *(_QWORD *)v267.__r_.__value_.__l.__data_;
                    v192 = *(_QWORD *)v267.__r_.__value_.__l.__data_ + 16;
                    if (*(char *)(*(_QWORD *)v267.__r_.__value_.__l.__data_ + 39) < 0)
                    {
                      v194 = *(const char **)(v191 + 16);
                      v193 = *(_QWORD *)(v191 + 24);
                    }
                    else
                    {
                      v193 = *(unsigned __int8 *)(*(_QWORD *)v267.__r_.__value_.__l.__data_ + 39);
                      v194 = (const char *)(*(_QWORD *)v267.__r_.__value_.__l.__data_ + 16);
                    }
                    v195 = atomic_load((unsigned __int8 *)&qword_254A4A510);
                    if ((v195 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
                    {
                      sub_20E9E46F8((uint64_t)&v298);
                      sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)&v298);
                      if ((_BYTE)v299 && SHIBYTE(v298.__r_.__value_.__r.__words[2]) < 0)
                        operator delete(v298.__r_.__value_.__l.__data_);
                      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
                      __cxa_guard_release(&qword_254A4A510);
                    }
                    if (byte_254A4A4F8[23] >= 0)
                      v196 = byte_254A4A4F8;
                    else
                      v196 = *(const char **)byte_254A4A4F8;
                    if (byte_254A4A4F8[23] >= 0)
                      v197 = byte_254A4A4F8[23];
                    else
                      v197 = *(_QWORD *)&byte_254A4A4F8[8];
                    v298.__r_.__value_.__r.__words[0] = (std::string::size_type)os_log_create(v196, v194);
                    p_size = &v298.__r_.__value_.__l.__size_;
                    if (v197 > 0x7FFFFFFFFFFFFFF7)
                      sub_20E860B7C();
                    if (v197 >= 0x17)
                    {
                      v199 = (v197 & 0xFFFFFFFFFFFFFFF8) + 8;
                      if ((v197 | 7) != 0x17)
                        v199 = v197 | 7;
                      v200 = v199 + 1;
                      p_size = (std::string::size_type *)operator new(v199 + 1);
                      v298.__r_.__value_.__r.__words[2] = v197;
                      *(_QWORD *)&v299 = v200 | 0x8000000000000000;
                      v298.__r_.__value_.__l.__size_ = (std::string::size_type)p_size;
                    }
                    else
                    {
                      BYTE7(v299) = v197;
                      if (!v197)
                      {
LABEL_345:
                        *((_BYTE *)p_size + v197) = 0;
                        BYTE8(v299) = 1;
                        v201 = (char *)&v300;
                        if (v193 > 0x7FFFFFFFFFFFFFF7)
                          sub_20E860B7C();
                        if (v193 >= 0x17)
                        {
                          v202 = (v193 & 0xFFFFFFFFFFFFFFF8) + 8;
                          if ((v193 | 7) != 0x17)
                            v202 = v193 | 7;
                          v203 = v202 + 1;
                          v201 = (char *)operator new(v202 + 1);
                          v301 = v193;
                          v302 = v203 | 0x8000000000000000;
                          v300 = v201;
                        }
                        else
                        {
                          HIBYTE(v302) = v193;
                          if (!v193)
                          {
LABEL_353:
                            v201[v193] = 0;
                            v303 = 1;
                            v204 = v298.__r_.__value_.__r.__words[0];
                            if (SHIBYTE(v302) < 0)
                              operator delete(v300);
                            if (BYTE8(v299) && SBYTE7(v299) < 0)
                              operator delete((void *)v298.__r_.__value_.__l.__size_);
                            if (v298.__r_.__value_.__r.__words[0])
                              os_release(v298.__r_.__value_.__l.__data_);
                            if (!v43 || !*(_QWORD *)(v43 + 24))
                            {
                              os_log_type_enabled(v204, OS_LOG_TYPE_ERROR);
                              LODWORD(v298.__r_.__value_.__l.__data_) = 136315138;
                              *(std::string::size_type *)((char *)v298.__r_.__value_.__r.__words + 4) = (std::string::size_type)v190;
                              v211 = (void *)_os_log_send_and_compose_impl();
                              v212 = v263;
                              if (v211)
                                free(v211);
                              goto LABEL_432;
                            }
                            v205 = _os_log_pack_size();
                            v206 = operator new(v205, (std::align_val_t)8uLL);
                            v207 = (_QWORD *)operator new();
                            *v207 = &off_24C9ABB80;
                            v207[1] = 0;
                            v207[2] = 0;
                            v207[3] = v206;
                            __b.__r_.__value_.__r.__words[0] = (std::string::size_type)v206;
                            __b.__r_.__value_.__l.__size_ = (std::string::size_type)v206;
                            v294 = 0;
                            v295 = 0;
                            __b.__r_.__value_.__r.__words[2] = (std::string::size_type)v207;
                            v208 = strlen(v190);
                            if (v208 > 0x7FFFFFFFFFFFFFF7)
                              sub_20E860B7C();
                            v209 = v208;
                            if (v208 >= 0x17)
                            {
                              v213 = (v208 & 0xFFFFFFFFFFFFFFF8) + 8;
                              if ((v208 | 7) != 0x17)
                                v213 = v208 | 7;
                              v214 = v213 + 1;
                              v210 = (void **)operator new(v213 + 1);
                              *(_QWORD *)&v297 = v209;
                              *((_QWORD *)&v297 + 1) = v214 | 0x8000000000000000;
                              v296 = v210;
                            }
                            else
                            {
                              HIBYTE(v297) = v208;
                              v210 = (void **)&v296;
                              if (!v208)
                              {
LABEL_372:
                                *((_BYTE *)v210 + v209) = 0;
                                v215 = v296;
                                v304[0] = v297;
                                *(_QWORD *)((char *)v304 + 7) = *(_QWORD *)((char *)&v297 + 7);
                                v216 = HIBYTE(v297);
                                v217 = operator new(0x38uLL);
                                v217[1] = 0;
                                v217[2] = 0;
                                v217[3] = off_24C9ABC20;
                                *v217 = &off_24C9ABBD0;
                                v218 = v304[0];
                                v217[4] = v215;
                                v217[5] = v218;
                                *(_QWORD *)((char *)v217 + 47) = *(_QWORD *)((char *)v304 + 7);
                                *((_BYTE *)v217 + 55) = v216;
                                v304[0] = 0;
                                *(_QWORD *)((char *)v304 + 7) = 0;
                                v219 = v295;
                                v294 = (char *)(v217 + 3);
                                v295 = (std::__shared_weak_count *)v217;
                                if (v219)
                                {
                                  p_shared_owners = (unint64_t *)&v219->__shared_owners_;
                                  do
                                    v221 = __ldaxr(p_shared_owners);
                                  while (__stlxr(v221 - 1, p_shared_owners));
                                  if (!v221)
                                  {
                                    ((void (*)(std::__shared_weak_count *))v219->__on_zero_shared)(v219);
                                    std::__shared_weak_count::__release_weak(v219);
                                  }
                                }
                                v298 = __b;
                                v222 = v294;
                                if (__b.__r_.__value_.__r.__words[2])
                                {
                                  v223 = (unint64_t *)(__b.__r_.__value_.__r.__words[2] + 8);
                                  do
                                    v224 = __ldxr(v223);
                                  while (__stxr(v224 + 1, v223));
                                }
                                v225 = v295;
                                *(_QWORD *)&v299 = v222;
                                *((_QWORD *)&v299 + 1) = v295;
                                if (v295)
                                {
                                  v226 = (unint64_t *)&v295->__shared_owners_;
                                  do
                                    v227 = __ldxr(v226);
                                  while (__stxr(v227 + 1, v226));
                                  v300 = v222;
                                  do
                                    v228 = __ldaxr(v226);
                                  while (__stlxr(v228 - 1, v226));
                                  if (!v228)
                                  {
                                    ((void (*)(std::__shared_weak_count *))v225->__on_zero_shared)(v225);
                                    std::__shared_weak_count::__release_weak(v225);
                                  }
                                }
                                else
                                {
                                  v300 = v222;
                                }
                                v229 = (std::__shared_weak_count *)__b.__r_.__value_.__r.__words[2];
                                if (__b.__r_.__value_.__r.__words[2])
                                {
                                  v230 = (unint64_t *)(__b.__r_.__value_.__r.__words[2] + 8);
                                  do
                                    v231 = __ldaxr(v230);
                                  while (__stlxr(v231 - 1, v230));
                                  if (!v231)
                                  {
                                    ((void (*)(std::__shared_weak_count *))v229->__on_zero_shared)(v229);
                                    std::__shared_weak_count::__release_weak(v229);
                                  }
                                }
                                v232 = v298.__r_.__value_.__r.__words[0];
                                if (v300[31] >= 0)
                                  v233 = v300 + 8;
                                else
                                  v233 = (char *)*((_QWORD *)v300 + 1);
                                v234 = _os_log_pack_fill();
                                *(_DWORD *)v234 = 136315138;
                                *(_QWORD *)(v234 + 4) = v233;
                                v235 = operator new();
                                v236 = *(unsigned __int8 *)(v191 + 39);
                                v237 = *(_QWORD *)(v191 + 16);
                                v238 = *(_QWORD *)(v191 + 24);
                                v239 = v299;
                                *(_OWORD *)(v235 + 8) = *(_OWORD *)&v298.__r_.__value_.__r.__words[1];
                                if ((v236 & 0x80u) != 0)
                                  v236 = v238;
                                else
                                  v237 = v192;
                                *(_QWORD *)v235 = v232;
                                *(_OWORD *)&v298.__r_.__value_.__r.__words[1] = 0uLL;
                                *(_OWORD *)(v235 + 24) = v239;
                                v299 = 0uLL;
                                *(_QWORD *)(v235 + 40) = v237;
                                *(_QWORD *)(v235 + 48) = v236;
                                *(_BYTE *)(v235 + 56) = 16;
                                v296 = 0;
                                __b.__r_.__value_.__r.__words[0] = v235;
                                (*(void (**)(_QWORD, std::string *))(**(_QWORD **)(v43 + 24) + 40))(*(_QWORD *)(v43 + 24), &__b);
                                v240 = __b.__r_.__value_.__r.__words[0];
                                __b.__r_.__value_.__r.__words[0] = 0;
                                v212 = v263;
                                if (v240)
                                {
                                  v241 = *(std::__shared_weak_count **)(v240 + 32);
                                  if (v241)
                                  {
                                    v242 = (unint64_t *)&v241->__shared_owners_;
                                    do
                                      v243 = __ldaxr(v242);
                                    while (__stlxr(v243 - 1, v242));
                                    if (!v243)
                                    {
                                      ((void (*)(std::__shared_weak_count *))v241->__on_zero_shared)(v241);
                                      std::__shared_weak_count::__release_weak(v241);
                                    }
                                  }
                                  v244 = *(std::__shared_weak_count **)(v240 + 16);
                                  if (v244)
                                  {
                                    v245 = (unint64_t *)&v244->__shared_owners_;
                                    do
                                      v246 = __ldaxr(v245);
                                    while (__stlxr(v246 - 1, v245));
                                    if (!v246)
                                    {
                                      ((void (*)(std::__shared_weak_count *))v244->__on_zero_shared)(v244);
                                      std::__shared_weak_count::__release_weak(v244);
                                    }
                                  }
                                  MEMORY[0x212BC6398](v240, 0x10F0C40B62ED6C6);
                                  v247 = v296;
                                  v296 = 0;
                                  if (v247)
                                  {
                                    v248 = (std::__shared_weak_count *)v247[4];
                                    if (v248)
                                    {
                                      v249 = (unint64_t *)&v248->__shared_owners_;
                                      do
                                        v250 = __ldaxr(v249);
                                      while (__stlxr(v250 - 1, v249));
                                      if (!v250)
                                      {
                                        ((void (*)(std::__shared_weak_count *))v248->__on_zero_shared)(v248);
                                        std::__shared_weak_count::__release_weak(v248);
                                      }
                                    }
                                    v251 = (std::__shared_weak_count *)v247[2];
                                    if (v251)
                                    {
                                      v252 = (unint64_t *)&v251->__shared_owners_;
                                      do
                                        v253 = __ldaxr(v252);
                                      while (__stlxr(v253 - 1, v252));
                                      if (!v253)
                                      {
                                        ((void (*)(std::__shared_weak_count *))v251->__on_zero_shared)(v251);
                                        std::__shared_weak_count::__release_weak(v251);
                                      }
                                    }
                                    MEMORY[0x212BC6398](v247, 0x10F0C40B62ED6C6);
                                  }
                                }
                                v254 = (std::__shared_weak_count *)*((_QWORD *)&v299 + 1);
                                if (*((_QWORD *)&v299 + 1))
                                {
                                  v255 = (unint64_t *)(*((_QWORD *)&v299 + 1) + 8);
                                  do
                                    v256 = __ldaxr(v255);
                                  while (__stlxr(v256 - 1, v255));
                                  if (!v256)
                                  {
                                    ((void (*)(std::__shared_weak_count *))v254->__on_zero_shared)(v254);
                                    std::__shared_weak_count::__release_weak(v254);
                                  }
                                }
                                v257 = (std::__shared_weak_count *)v298.__r_.__value_.__r.__words[2];
                                if (v298.__r_.__value_.__r.__words[2])
                                {
                                  v258 = (unint64_t *)(v298.__r_.__value_.__r.__words[2] + 8);
                                  do
                                    v259 = __ldaxr(v258);
                                  while (__stlxr(v259 - 1, v258));
                                  if (!v259)
                                  {
                                    ((void (*)(std::__shared_weak_count *))v257->__on_zero_shared)(v257);
                                    std::__shared_weak_count::__release_weak(v257);
                                  }
                                }
LABEL_432:
                                if (v212)
                                {
                                  v260 = (const char *)&__dst;
                                  if (v276 < 0)
                                    v260 = (const char *)__dst;
                                  sub_20E8C003C((uint64_t)&v267, "%s", v260);
                                  sub_20E863570((uint64_t)&v267);
                                }
                                sub_20E863570((uint64_t)&v267);
                                v149 = v273;
                                if (!v273)
                                  goto LABEL_441;
                                v261 = (unint64_t *)&v273->__shared_owners_;
                                do
                                  v151 = __ldaxr(v261);
                                while (__stlxr(v151 - 1, v261));
                                goto LABEL_439;
                              }
                            }
                            memcpy(v210, v190, v209);
                            goto LABEL_372;
                          }
                        }
                        memmove(v201, v194, v193);
                        goto LABEL_353;
                      }
                    }
                    memmove(p_size, v196, v197);
                    goto LABEL_345;
                  }
                }
                memmove(p_dst, v187, v183);
                goto LABEL_324;
              }
            }
            else if ((SHIBYTE(v267.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            {
              goto LABEL_255;
            }
            operator delete(v267.__r_.__value_.__l.__data_);
            if ((SHIBYTE(__b.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              goto LABEL_256;
            goto LABEL_269;
          }
        }
        memset(v156, 32, v48);
        goto LABEL_247;
      }
    }
    v277 = (uint64_t *)a2;
    *((double *)sub_20EFE3558((float *)(a1 + 16), (int *)a2, (uint64_t)&unk_2102DB95C, &v277) + 4) = v13;
    if (!*((_BYTE *)a7 + 4))
    {
      v277 = (uint64_t *)a2;
      v55 = sub_20EFE3558((float *)(a1 + 16), (int *)a2, (uint64_t)&unk_2102DB95C, &v277);
      ++*((_DWORD *)v55 + 10);
    }
    LODWORD(v277) = 0;
    v278 = 0.0;
    LODWORD(v279) = 0;
    memset(&v280, 0, sizeof(v280));
    LOBYTE(v284.f64[0]) = 0;
    LOBYTE(v286) = 0;
    v288 = 0;
    __p = 0uLL;
    LOBYTE(v290) = 0;
    v291 = 0;
    v298.__r_.__value_.__r.__words[0] = a2;
    LODWORD(v277) = *((_DWORD *)sub_20EFE3558((float *)(a1 + 16), (int *)a2, (uint64_t)&unk_2102DB95C, (uint64_t **)&v298)
                    + 10);
    v298.__r_.__value_.__r.__words[0] = a2;
    v278 = v13
         - *((double *)sub_20EFE3558((float *)(a1 + 16), (int *)a2, (uint64_t)&unk_2102DB95C, (uint64_t **)&v298) + 3);
    if (*(_DWORD *)a2 < 0x10000u
      || !sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/ComputerVisionTypes/include/VIO/ComputerVisionTypes/CameraStreamId.h", 49, (uint64_t)"camera_id <= 0xffff", 19, (uint64_t)"Camera ID cannot exceeds 16 bits", 32, (void (*)(void **))sub_21023DDB0))
    {
      v56 = *(_DWORD *)(a2 + 4);
      if (v56 < 0x10000)
        goto LABEL_66;
      if (!sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/ComputerVisionTypes/include/VIO/ComputerVisionTypes/CameraStreamId.h", 50, (uint64_t)"stream_id <= 0xffff", 19, (uint64_t)"Stream ID cannot exceeds 16 bits", 32, (void (*)(void **))sub_21023DDB0))
      {
        LOWORD(v56) = *(_WORD *)(a2 + 4);
LABEL_66:
        LODWORD(v279) = (unsigned __int16)v56 | ((unsigned __int16)*(_DWORD *)a2 << 16);
        sub_20E8B43E8(&v280, a3, a4);
        v281 = 0;
        v282 = *(float64x2_t *)a5;
        v283 = *(double *)(a5 + 16);
        if (LOBYTE(v286) == *(unsigned __int8 *)(a6 + 32))
        {
          if (LOBYTE(v286))
          {
            v57 = *(_OWORD *)(a6 + 16);
            v284 = *(float64x2_t *)a6;
            v285 = v57;
            v58 = (_QWORD *)(a1 + 64);
            if (&__p == (__int128 *)(a1 + 64))
              goto LABEL_140;
            goto LABEL_73;
          }
        }
        else
        {
          if (!LOBYTE(v286))
          {
            v64 = *(_OWORD *)(a6 + 16);
            v284 = *(float64x2_t *)a6;
            v285 = v64;
            LOBYTE(v286) = 1;
            v58 = (_QWORD *)(a1 + 64);
            if (&__p == (__int128 *)(a1 + 64))
            {
LABEL_140:
              v94 = *(_QWORD *)(a1 + 88);
              if (v94)
              {
                v95 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v94 + 16))(v94);
                if ((_BYTE)v95)
                  v96 = 0;
                else
                  v96 = v95 >= 0x100u;
                v97 = !v96;
                LOBYTE(v289) = v97;
                v98 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 88) + 24))(*(_QWORD *)(a1 + 88));
                if ((_BYTE)v98)
                  v99 = 0;
                else
                  v99 = v98 >= 0x100u;
                v100 = !v99;
                HIBYTE(v289) = v100;
              }
              else
              {
                v289 = 257;
              }
              v290 = *a7;
              v291 = *((_BYTE *)a7 + 4);
              sub_20FDBF50C((void (****)(_QWORD, xpc_object_t *, xpc_object_t *))(a1 + 56), (unsigned int *)&v277);
              if (SHIBYTE(v288) < 0)
              {
                operator delete((void *)__p);
                if ((SHIBYTE(v280.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                  return;
              }
              else if ((SHIBYTE(v280.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              {
                return;
              }
              operator delete(v280.__r_.__value_.__l.__data_);
              return;
            }
LABEL_73:
            v59 = *(_BYTE *)(a1 + 87);
            if (SHIBYTE(v288) < 0)
            {
              if (v59 >= 0)
                v60 = v58;
              else
                v60 = *(void **)(a1 + 64);
              if (v59 >= 0)
                v61 = *(unsigned __int8 *)(a1 + 87);
              else
                v61 = *(_QWORD *)(a1 + 72);
              sub_20E867CBC((void **)&__p, v60, v61);
            }
            else if ((*(_BYTE *)(a1 + 87) & 0x80) != 0)
            {
              sub_20E867BF8(&__p, *(void **)(a1 + 64), *(_QWORD *)(a1 + 72));
            }
            else
            {
              __p = *(_OWORD *)v58;
              v288 = v58[2];
            }
            goto LABEL_140;
          }
          LOBYTE(v286) = 0;
        }
        v58 = (_QWORD *)(a1 + 64);
        if (&__p == (__int128 *)(a1 + 64))
          goto LABEL_140;
        goto LABEL_73;
      }
    }
    abort();
  }
  sub_20EFE3464(&v292);
  if (**(int **)(v292 + 56) > 4)
    return;
  v33 = *(unsigned __int8 *)(v292 + 72);
  v34 = sub_20E8C31DC(v292, "OSLogSurrogateAppender", 1, 0);
  v35 = v34;
  if (!v33 && !v34)
    return;
  sub_20E863438((uint64_t)&v277);
  v36 = sub_20E86A980(&v279, (uint64_t)"CCD: Abnormal extrinsics calibration update: ", 45);
  v298.__r_.__value_.__r.__words[0] = a5;
  sub_20EB32EA4(v36, (__int128 **)&v298);
  v265 = v35;
  if ((__p & 0x10) != 0)
  {
    v62 = v286;
    if (*(_QWORD *)&v286 < *(_QWORD *)&v283)
    {
      v286 = v283;
      v62 = v283;
    }
    v63 = *(_QWORD *)&v282.f64[1];
    v37 = *(_QWORD *)&v62 - *(_QWORD *)&v282.f64[1];
    if (*(_QWORD *)&v62 - *(_QWORD *)&v282.f64[1] > 0x7FFFFFFFFFFFFFF7uLL)
      goto LABEL_161;
  }
  else
  {
    if ((__p & 8) == 0)
    {
      v37 = 0;
      HIBYTE(v276) = 0;
      v38 = (void **)&__dst;
      goto LABEL_95;
    }
    v63 = v280.__r_.__value_.__r.__words[2];
    v37 = *(_QWORD *)&v282.f64[0] - v280.__r_.__value_.__r.__words[2];
    if (*(_QWORD *)&v282.f64[0] - v280.__r_.__value_.__r.__words[2] > 0x7FFFFFFFFFFFFFF7)
LABEL_161:
      sub_20E860B7C();
  }
  if (v37 >= 0x17)
  {
    v65 = (v37 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v37 | 7) != 0x17)
      v65 = v37 | 7;
    v66 = v65 + 1;
    v38 = (void **)operator new(v65 + 1);
    v275 = v37;
    v276 = v66 | 0x8000000000000000;
    __dst = v38;
    goto LABEL_94;
  }
  HIBYTE(v276) = v37;
  v38 = (void **)&__dst;
  if (v37)
LABEL_94:
    memmove(v38, (const void *)v63, v37);
LABEL_95:
  *((_BYTE *)v38 + v37) = 0;
  v267.__r_.__value_.__r.__words[0] = (std::string::size_type)&v292;
  v267.__r_.__value_.__r.__words[1] = std::chrono::steady_clock::now().__d_.__rep_;
  v267.__r_.__value_.__r.__words[2] = std::chrono::system_clock::now().__d_.__rep_;
  v268 = 4;
  v269 = "unknown file";
  v270 = 45;
  v272 = 0;
  v273 = 0;
  v271 = "unknown function";
  if (v276 >= 0)
    v67 = (void **)&__dst;
  else
    v67 = __dst;
  v68 = *(_QWORD *)v267.__r_.__value_.__l.__data_;
  v69 = *(_QWORD *)v267.__r_.__value_.__l.__data_ + 16;
  if (*(char *)(*(_QWORD *)v267.__r_.__value_.__l.__data_ + 39) < 0)
  {
    v71 = *(const char **)(v68 + 16);
    v70 = *(_QWORD *)(v68 + 24);
    v73 = atomic_load((unsigned __int8 *)&qword_254A4A510);
    if ((v73 & 1) != 0)
      goto LABEL_102;
  }
  else
  {
    v70 = *(unsigned __int8 *)(*(_QWORD *)v267.__r_.__value_.__l.__data_ + 39);
    v71 = (const char *)(*(_QWORD *)v267.__r_.__value_.__l.__data_ + 16);
    v72 = atomic_load((unsigned __int8 *)&qword_254A4A510);
    if ((v72 & 1) != 0)
      goto LABEL_102;
  }
  if (__cxa_guard_acquire(&qword_254A4A510))
  {
    sub_20E9E46F8((uint64_t)&v298);
    sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)&v298);
    if ((_BYTE)v299 && SHIBYTE(v298.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v298.__r_.__value_.__l.__data_);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
    __cxa_guard_release(&qword_254A4A510);
  }
LABEL_102:
  if (byte_254A4A4F8[23] >= 0)
    v74 = byte_254A4A4F8;
  else
    v74 = *(const char **)byte_254A4A4F8;
  if (byte_254A4A4F8[23] >= 0)
    v75 = byte_254A4A4F8[23];
  else
    v75 = *(_QWORD *)&byte_254A4A4F8[8];
  v298.__r_.__value_.__r.__words[0] = (std::string::size_type)os_log_create(v74, v71);
  v76 = &v298.__r_.__value_.__l.__size_;
  if (v75 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v75 >= 0x17)
  {
    v77 = v33;
    v78 = v69;
    v79 = (v75 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v75 | 7) != 0x17)
      v79 = v75 | 7;
    v80 = v79 + 1;
    v76 = (std::string::size_type *)operator new(v79 + 1);
    v298.__r_.__value_.__r.__words[2] = v75;
    *(_QWORD *)&v299 = v80 | 0x8000000000000000;
    v298.__r_.__value_.__l.__size_ = (std::string::size_type)v76;
    v69 = v78;
    v33 = v77;
    goto LABEL_115;
  }
  BYTE7(v299) = v75;
  if (v75)
LABEL_115:
    memmove(v76, v74, v75);
  *((_BYTE *)v76 + v75) = 0;
  BYTE8(v299) = 1;
  v81 = (char *)&v300;
  if (v70 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  v82 = (const char *)v67;
  if (v70 >= 0x17)
  {
    v84 = (v70 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v70 | 7) != 0x17)
      v84 = v70 | 7;
    v85 = v84 + 1;
    v83 = v265;
    v81 = (char *)operator new(v84 + 1);
    v301 = v70;
    v302 = v85 | 0x8000000000000000;
    v300 = v81;
    goto LABEL_123;
  }
  HIBYTE(v302) = v70;
  v83 = v265;
  if (v70)
LABEL_123:
    memmove(v81, v71, v70);
  v81[v70] = 0;
  v303 = 1;
  v86 = v298.__r_.__value_.__r.__words[0];
  if (SHIBYTE(v302) < 0)
    operator delete(v300);
  if (BYTE8(v299) && SBYTE7(v299) < 0)
    operator delete((void *)v298.__r_.__value_.__l.__size_);
  if (v298.__r_.__value_.__r.__words[0])
    os_release(v298.__r_.__value_.__l.__data_);
  if (!v83 || !*(_QWORD *)(v83 + 24))
  {
    os_log_type_enabled(v86, OS_LOG_TYPE_ERROR);
    LODWORD(v298.__r_.__value_.__l.__data_) = 136315138;
    *(std::string::size_type *)((char *)v298.__r_.__value_.__r.__words + 4) = (std::string::size_type)v82;
    v93 = (void *)_os_log_send_and_compose_impl();
    if (v93)
      free(v93);
    goto LABEL_227;
  }
  v87 = _os_log_pack_size();
  v88 = operator new(v87, (std::align_val_t)8uLL);
  v89 = (_QWORD *)operator new();
  *v89 = &off_24C9ABB80;
  v89[1] = 0;
  v89[2] = 0;
  v89[3] = v88;
  __b.__r_.__value_.__r.__words[0] = (std::string::size_type)v88;
  __b.__r_.__value_.__l.__size_ = (std::string::size_type)v88;
  v294 = 0;
  v295 = 0;
  __b.__r_.__value_.__r.__words[2] = (std::string::size_type)v89;
  v90 = strlen(v82);
  if (v90 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  v91 = v90;
  if (v90 >= 0x17)
  {
    v101 = (v90 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v90 | 7) != 0x17)
      v101 = v90 | 7;
    v102 = v101 + 1;
    v92 = (void **)operator new(v101 + 1);
    *(_QWORD *)&v297 = v91;
    *((_QWORD *)&v297 + 1) = v102 | 0x8000000000000000;
    v296 = v92;
    goto LABEL_165;
  }
  HIBYTE(v297) = v90;
  v92 = (void **)&v296;
  if (v90)
LABEL_165:
    memcpy(v92, v82, v91);
  *((_BYTE *)v92 + v91) = 0;
  v103 = v296;
  v304[0] = v297;
  *(_QWORD *)((char *)v304 + 7) = *(_QWORD *)((char *)&v297 + 7);
  v104 = HIBYTE(v297);
  v105 = operator new(0x38uLL);
  v105[1] = 0;
  v105[2] = 0;
  v105[3] = off_24C9ABC20;
  *v105 = &off_24C9ABBD0;
  v106 = v304[0];
  v105[4] = v103;
  v105[5] = v106;
  *(_QWORD *)((char *)v105 + 47) = *(_QWORD *)((char *)v304 + 7);
  *((_BYTE *)v105 + 55) = v104;
  v304[0] = 0;
  *(_QWORD *)((char *)v304 + 7) = 0;
  v107 = v295;
  v294 = (char *)(v105 + 3);
  v295 = (std::__shared_weak_count *)v105;
  if (v107)
  {
    v108 = (unint64_t *)&v107->__shared_owners_;
    do
      v109 = __ldaxr(v108);
    while (__stlxr(v109 - 1, v108));
    if (!v109)
    {
      ((void (*)(std::__shared_weak_count *))v107->__on_zero_shared)(v107);
      std::__shared_weak_count::__release_weak(v107);
    }
  }
  v298 = __b;
  v110 = v294;
  if (__b.__r_.__value_.__r.__words[2])
  {
    v111 = (unint64_t *)(__b.__r_.__value_.__r.__words[2] + 8);
    do
      v112 = __ldxr(v111);
    while (__stxr(v112 + 1, v111));
  }
  v113 = v295;
  *(_QWORD *)&v299 = v110;
  *((_QWORD *)&v299 + 1) = v295;
  if (v295)
  {
    v114 = (unint64_t *)&v295->__shared_owners_;
    do
      v115 = __ldxr(v114);
    while (__stxr(v115 + 1, v114));
    v300 = v110;
    do
      v116 = __ldaxr(v114);
    while (__stlxr(v116 - 1, v114));
    if (!v116)
    {
      ((void (*)(std::__shared_weak_count *))v113->__on_zero_shared)(v113);
      std::__shared_weak_count::__release_weak(v113);
    }
  }
  else
  {
    v300 = v110;
  }
  v117 = (std::__shared_weak_count *)__b.__r_.__value_.__r.__words[2];
  if (__b.__r_.__value_.__r.__words[2])
  {
    v118 = (unint64_t *)(__b.__r_.__value_.__r.__words[2] + 8);
    do
      v119 = __ldaxr(v118);
    while (__stlxr(v119 - 1, v118));
    if (!v119)
    {
      ((void (*)(std::__shared_weak_count *))v117->__on_zero_shared)(v117);
      std::__shared_weak_count::__release_weak(v117);
    }
  }
  v120 = v298.__r_.__value_.__r.__words[0];
  if (v300[31] >= 0)
    v121 = v300 + 8;
  else
    v121 = (char *)*((_QWORD *)v300 + 1);
  v122 = _os_log_pack_fill();
  *(_DWORD *)v122 = 136315138;
  *(_QWORD *)(v122 + 4) = v121;
  v123 = operator new();
  v124 = *(unsigned __int8 *)(v68 + 39);
  v125 = *(_QWORD *)(v68 + 16);
  v126 = *(_QWORD *)(v68 + 24);
  v127 = v299;
  *(_OWORD *)(v123 + 8) = *(_OWORD *)&v298.__r_.__value_.__r.__words[1];
  if ((v124 & 0x80u) != 0)
    v124 = v126;
  else
    v125 = v69;
  *(_QWORD *)v123 = v120;
  *(_OWORD *)&v298.__r_.__value_.__r.__words[1] = 0uLL;
  *(_OWORD *)(v123 + 24) = v127;
  v299 = 0uLL;
  *(_QWORD *)(v123 + 40) = v125;
  *(_QWORD *)(v123 + 48) = v124;
  *(_BYTE *)(v123 + 56) = 16;
  v296 = 0;
  __b.__r_.__value_.__r.__words[0] = v123;
  (*(void (**)(_QWORD, std::string *))(**(_QWORD **)(v83 + 24) + 40))(*(_QWORD *)(v83 + 24), &__b);
  v128 = __b.__r_.__value_.__r.__words[0];
  __b.__r_.__value_.__r.__words[0] = 0;
  if (v128)
  {
    v129 = *(std::__shared_weak_count **)(v128 + 32);
    if (v129)
    {
      v130 = (unint64_t *)&v129->__shared_owners_;
      do
        v131 = __ldaxr(v130);
      while (__stlxr(v131 - 1, v130));
      if (!v131)
      {
        ((void (*)(std::__shared_weak_count *))v129->__on_zero_shared)(v129);
        std::__shared_weak_count::__release_weak(v129);
      }
    }
    v132 = *(std::__shared_weak_count **)(v128 + 16);
    if (v132)
    {
      v133 = (unint64_t *)&v132->__shared_owners_;
      do
        v134 = __ldaxr(v133);
      while (__stlxr(v134 - 1, v133));
      if (!v134)
      {
        ((void (*)(std::__shared_weak_count *))v132->__on_zero_shared)(v132);
        std::__shared_weak_count::__release_weak(v132);
      }
    }
    MEMORY[0x212BC6398](v128, 0x10F0C40B62ED6C6);
    v135 = v296;
    v296 = 0;
    if (v135)
    {
      v136 = (std::__shared_weak_count *)v135[4];
      if (v136)
      {
        v137 = (unint64_t *)&v136->__shared_owners_;
        do
          v138 = __ldaxr(v137);
        while (__stlxr(v138 - 1, v137));
        if (!v138)
        {
          ((void (*)(std::__shared_weak_count *))v136->__on_zero_shared)(v136);
          std::__shared_weak_count::__release_weak(v136);
        }
      }
      v139 = (std::__shared_weak_count *)v135[2];
      if (v139)
      {
        v140 = (unint64_t *)&v139->__shared_owners_;
        do
          v141 = __ldaxr(v140);
        while (__stlxr(v141 - 1, v140));
        if (!v141)
        {
          ((void (*)(std::__shared_weak_count *))v139->__on_zero_shared)(v139);
          std::__shared_weak_count::__release_weak(v139);
        }
      }
      MEMORY[0x212BC6398](v135, 0x10F0C40B62ED6C6);
    }
  }
  v142 = (std::__shared_weak_count *)*((_QWORD *)&v299 + 1);
  if (*((_QWORD *)&v299 + 1))
  {
    v143 = (unint64_t *)(*((_QWORD *)&v299 + 1) + 8);
    do
      v144 = __ldaxr(v143);
    while (__stlxr(v144 - 1, v143));
    if (!v144)
    {
      ((void (*)(std::__shared_weak_count *))v142->__on_zero_shared)(v142);
      std::__shared_weak_count::__release_weak(v142);
    }
  }
  v145 = (std::__shared_weak_count *)v298.__r_.__value_.__r.__words[2];
  if (v298.__r_.__value_.__r.__words[2])
  {
    v146 = (unint64_t *)(v298.__r_.__value_.__r.__words[2] + 8);
    do
      v147 = __ldaxr(v146);
    while (__stlxr(v147 - 1, v146));
    if (!v147)
    {
      ((void (*)(std::__shared_weak_count *))v145->__on_zero_shared)(v145);
      std::__shared_weak_count::__release_weak(v145);
    }
  }
LABEL_227:
  if (v33)
  {
    v148 = (const char *)&__dst;
    if (v276 < 0)
      v148 = (const char *)__dst;
    sub_20E8C003C((uint64_t)&v267, "%s", v148);
    sub_20E863570((uint64_t)&v267);
  }
  sub_20E863570((uint64_t)&v267);
  v149 = v273;
  if (!v273)
    goto LABEL_441;
  v150 = (unint64_t *)&v273->__shared_owners_;
  do
    v151 = __ldaxr(v150);
  while (__stlxr(v151 - 1, v150));
LABEL_439:
  if (!v151)
  {
    ((void (*)(std::__shared_weak_count *))v149->__on_zero_shared)(v149);
    std::__shared_weak_count::__release_weak(v149);
  }
LABEL_441:
  if (SHIBYTE(v276) < 0)
    operator delete(__dst);
  v277 = (uint64_t *)*MEMORY[0x24BEDB7F0];
  v262 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  *(uint64_t **)((char *)&v277 + *(v277 - 3)) = *(uint64_t **)(MEMORY[0x24BEDB7F0] + 64);
  v279 = v262;
  v280.__r_.__value_.__r.__words[0] = MEMORY[0x24BEDB848] + 16;
  if (SHIBYTE(v285) < 0)
    operator delete(*(void **)&v284.f64[1]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x212BC6290]((char *)&__p + 8);
}

void sub_20EFE317C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31,char a32)
{
  uint64_t v32;

  if (*(_BYTE *)(v32 - 184) && *(char *)(v32 - 185) < 0)
    operator delete(*(void **)(v32 - 208));
  __cxa_guard_abort(&qword_254A4A510);
  sub_20E863714((uint64_t)&a17);
  if (a31 < 0)
    operator delete(__p);
  sub_20E863784((uint64_t)&a32);
  _Unwind_Resume(a1);
}

void sub_20EFE3450(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  sub_20E973890((uint64_t)&a29);
  _Unwind_Resume(a1);
}

void sub_20EFE3464(_QWORD *a1)
{
  unsigned __int8 v2;
  void *__p[2];
  char v4;
  uint64_t *v5;

  v2 = atomic_load((unsigned __int8 *)&qword_254A61898);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254A61898))
  {
    sub_21021D3D8(&v5);
    sub_20E8610C0(__p, "cv3d.vio.odometry");
    sub_20E8C4068(&v5, (uint64_t)__p, &qword_254A61890);
    if (v4 < 0)
      operator delete(__p[0]);
    __cxa_guard_release(&qword_254A61898);
  }
  *a1 = qword_254A61890;
}

void sub_20EFE3500(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A61898);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A61898);
  _Unwind_Resume(a1);
}

uint64_t *sub_20EFE3558(float *a1, int *a2, uint64_t a3, uint64_t **a4)
{
  unint64_t v4;
  unsigned int v8;
  int v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  uint64_t **v13;
  uint64_t *v14;
  unint64_t v15;
  uint64_t v17;
  _QWORD *v20;
  uint64_t v21;
  float v22;
  float v23;
  _QWORD *v24;
  _QWORD *v25;
  _BOOL8 v26;
  unint64_t v27;
  unint64_t v28;
  size_t prime;
  void *v30;
  _QWORD *v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t *v34;
  size_t v35;
  size_t v36;
  size_t v37;
  _QWORD *i;
  size_t v39;
  uint64_t v40;
  unint64_t v41;
  uint8x8_t v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  size_t v46;
  _QWORD *v47;
  unint64_t v48;

  if (*a2 >= 0x10000
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/ComputerVisionTypes/include/VIO/ComputerVisionTypes/CameraStreamId.h", 49, (uint64_t)"camera_id <= 0xffff", 19, (uint64_t)"Camera ID cannot exceeds 16 bits", 32, (void (*)(void **))sub_21023DDB0))
  {
    goto LABEL_106;
  }
  v8 = a2[1];
  if (v8 >= 0x10000)
  {
    if (!sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/ComputerVisionTypes/include/VIO/ComputerVisionTypes/CameraStreamId.h", 50, (uint64_t)"stream_id <= 0xffff", 19, (uint64_t)"Stream ID cannot exceeds 16 bits", 32, (void (*)(void **))sub_21023DDB0))
    {
      v8 = a2[1];
      goto LABEL_6;
    }
LABEL_106:
    abort();
  }
LABEL_6:
  v9 = *a2;
  v10 = (unsigned __int16)v8 | ((unsigned __int16)*a2 << 16);
  v11 = *((_QWORD *)a1 + 1);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    if (v12.u32[0] > 1uLL)
    {
      v4 = (unsigned __int16)v8 | ((unsigned __int16)v9 << 16);
      if (v11 <= v10)
        v4 = v10 % v11;
    }
    else
    {
      v4 = ((_DWORD)v11 - 1) & v10;
    }
    v13 = *(uint64_t ***)(*(_QWORD *)a1 + 8 * v4);
    if (v13)
    {
      v14 = *v13;
      if (*v13)
      {
        if (v12.u32[0] < 2uLL)
        {
          while (1)
          {
            v17 = v14[1];
            if (v17 == v10)
            {
              if (*((_DWORD *)v14 + 4) == v9 && *((_DWORD *)v14 + 5) == v8)
                return v14;
            }
            else if ((v17 & (v11 - 1)) != v4)
            {
              goto LABEL_36;
            }
            v14 = (uint64_t *)*v14;
            if (!v14)
              goto LABEL_36;
          }
        }
        do
        {
          v15 = v14[1];
          if (v15 == v10)
          {
            if (*((_DWORD *)v14 + 4) == v9 && *((_DWORD *)v14 + 5) == v8)
              return v14;
          }
          else
          {
            if (v15 >= v11)
              v15 %= v11;
            if (v15 != v4)
              break;
          }
          v14 = (uint64_t *)*v14;
        }
        while (v14);
      }
    }
  }
LABEL_36:
  v20 = operator new(0x30uLL);
  *v20 = 0;
  v20[1] = v10;
  v21 = **a4;
  v20[4] = 0;
  v20[5] = 0;
  v20[2] = v21;
  v20[3] = 0;
  v22 = (float)(unint64_t)(*((_QWORD *)a1 + 3) + 1);
  v23 = a1[8];
  if (v11 && (float)(v23 * (float)v11) >= v22)
  {
    v10 = v4;
    v24 = *(_QWORD **)a1;
    v25 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
    if (!v25)
      goto LABEL_98;
LABEL_86:
    *v20 = *v25;
LABEL_104:
    *v25 = v20;
    goto LABEL_105;
  }
  v26 = 1;
  if (v11 >= 3)
    v26 = (v11 & (v11 - 1)) != 0;
  v27 = v26 | (2 * v11);
  v28 = vcvtps_u32_f32(v22 / v23);
  if (v27 <= v28)
    prime = v28;
  else
    prime = v27;
  if (prime == 1)
  {
    prime = 2;
  }
  else if ((prime & (prime - 1)) != 0)
  {
    prime = std::__next_prime(prime);
    v11 = *((_QWORD *)a1 + 1);
  }
  if (prime > v11)
  {
LABEL_50:
    if (prime >> 61)
      sub_20E877A38();
    v30 = operator new(8 * prime);
    v31 = *(_QWORD **)a1;
    *(_QWORD *)a1 = v30;
    if (v31)
      operator delete(v31);
    v32 = 0;
    *((_QWORD *)a1 + 1) = prime;
    do
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v32++) = 0;
    while (prime != v32);
    v34 = (uint64_t *)(a1 + 4);
    v33 = (_QWORD *)*((_QWORD *)a1 + 2);
    if (!v33)
      goto LABEL_82;
    v35 = v33[1];
    v36 = prime - 1;
    if ((prime & (prime - 1)) == 0)
    {
      v37 = v35 & v36;
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v37) = v34;
      for (i = (_QWORD *)*v33; *v33; i = (_QWORD *)*v33)
      {
        v39 = i[1] & v36;
        if (v39 == v37)
        {
          v33 = i;
        }
        else if (*(_QWORD *)(*(_QWORD *)a1 + 8 * v39))
        {
          *v33 = *i;
          v40 = 8 * v39;
          *i = **(_QWORD **)(*(_QWORD *)a1 + v40);
          **(_QWORD **)(*(_QWORD *)a1 + v40) = i;
        }
        else
        {
          *(_QWORD *)(*(_QWORD *)a1 + 8 * v39) = v33;
          v33 = i;
          v37 = v39;
        }
      }
      goto LABEL_82;
    }
    if (v35 >= prime)
      v35 %= prime;
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v35) = v34;
    v44 = (_QWORD *)*v33;
    if (!*v33)
    {
LABEL_82:
      v11 = prime;
      if ((prime & (prime - 1)) != 0)
        goto LABEL_83;
LABEL_97:
      v10 = ((_DWORD)v11 - 1) & v10;
      v24 = *(_QWORD **)a1;
      v25 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v10);
      if (!v25)
        goto LABEL_98;
      goto LABEL_86;
    }
    while (1)
    {
      v46 = v44[1];
      if (v46 >= prime)
        v46 %= prime;
      if (v46 == v35)
        goto LABEL_76;
      if (*(_QWORD *)(*(_QWORD *)a1 + 8 * v46))
      {
        *v33 = *v44;
        v45 = 8 * v46;
        *v44 = **(_QWORD **)(*(_QWORD *)a1 + v45);
        **(_QWORD **)(*(_QWORD *)a1 + v45) = v44;
        v44 = v33;
LABEL_76:
        v33 = v44;
        v44 = (_QWORD *)*v44;
        if (!v44)
          goto LABEL_82;
      }
      else
      {
        *(_QWORD *)(*(_QWORD *)a1 + 8 * v46) = v33;
        v33 = v44;
        v44 = (_QWORD *)*v44;
        v35 = v46;
        if (!v44)
          goto LABEL_82;
      }
    }
  }
  if (prime < v11)
  {
    v41 = vcvtps_u32_f32((float)*((unint64_t *)a1 + 3) / a1[8]);
    if (v11 < 3 || (v42 = (uint8x8_t)vcnt_s8((int8x8_t)v11), v42.i16[0] = vaddlv_u8(v42), v42.u32[0] > 1uLL))
    {
      v41 = std::__next_prime(v41);
    }
    else
    {
      v43 = 1 << -(char)__clz(v41 - 1);
      if (v41 >= 2)
        v41 = v43;
    }
    if (prime <= v41)
      prime = v41;
    if (prime < v11)
    {
      if (!prime)
      {
        v47 = *(_QWORD **)a1;
        *(_QWORD *)a1 = 0;
        if (v47)
          operator delete(v47);
        v11 = 0;
        *((_QWORD *)a1 + 1) = 0;
        goto LABEL_97;
      }
      goto LABEL_50;
    }
    v11 = *((_QWORD *)a1 + 1);
  }
  if ((v11 & (v11 - 1)) == 0)
    goto LABEL_97;
LABEL_83:
  if (v11 <= v10)
    v10 %= v11;
  v24 = *(_QWORD **)a1;
  v25 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v10);
  if (v25)
    goto LABEL_86;
LABEL_98:
  *v20 = *((_QWORD *)a1 + 2);
  *((_QWORD *)a1 + 2) = v20;
  v24[v10] = a1 + 4;
  if (*v20)
  {
    v48 = *(_QWORD *)(*v20 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v48 >= v11)
        v48 %= v11;
    }
    else
    {
      v48 &= v11 - 1;
    }
    v25 = (_QWORD *)(*(_QWORD *)a1 + 8 * v48);
    goto LABEL_104;
  }
LABEL_105:
  ++*((_QWORD *)a1 + 3);
  return v20;
}

void sub_20EFE3AA4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20EFE3AB8(uint64_t result, _OWORD *a2, __int128 *a3, unsigned int a4, char a5, int a6, double a7, double a8, double a9, double a10, double a11)
{
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t *v25;
  unsigned __int8 v26;
  char *v28;
  size_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t k;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  __int128 v36;
  __int128 v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t *v43;
  unsigned __int8 v44;
  int v46;
  char *v47;
  size_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t i;
  uint64_t v52;
  uint64_t *v53;
  unsigned __int8 v54;
  int v56;
  char *v57;
  size_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t j;
  uint64_t v62;
  int v63;
  int v64;
  __uint64_t v65[2];
  int v66;
  double v67[3];
  char v68;
  void *v69;
  char v70;
  char v71;
  void *v72;
  char v73;
  char v74;
  void *v75;
  char v76;
  void *__p;
  char v78;
  uint64_t v79;

  v21 = result;
  v79 = *MEMORY[0x24BDAC8D0];
  if (*(_QWORD *)(result + 144))
  {
    v22 = *(_QWORD *)(result + 136);
    if (v22)
    {
      if (*(double *)(*(_QWORD *)(result + 104) + 72 * v22 - 16) < a7)
        goto LABEL_7;
    }
    else if (*(double *)(*(_QWORD *)(result + 104)
                        + 8 * ((uint64_t)(*(_QWORD *)(result + 112) - *(_QWORD *)(result + 104)) >> 3)
                        - 16) < a7)
    {
      goto LABEL_7;
    }
    result = sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Odometry/src/CalibrationConvergenceDetector.cpp", 39, (uint64_t)"samples_.empty() || samples_.back().timestamp < timestamp", 57, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0);
    if ((_DWORD)result)
      abort();
  }
LABEL_7:
  if (*(_DWORD *)(v21 + 16) <= a4 && (a5 & 1) == 0 && a6 && *(double *)(v21 + 24) <= a9 && *(double *)(v21 + 96) <= a11)
  {
    v23 = 0;
    *(_DWORD *)(v21 + 152) = 0;
    v24 = *(_QWORD *)(v21 + 144);
    if (*(double *)(v21 + 8) > a8)
    {
LABEL_13:
      if (!v24)
        goto LABEL_83;
      v25 = sub_210219C18();
      v26 = atomic_load((unsigned __int8 *)&qword_254A6DDD0);
      if ((v26 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DDD0))
      {
        __cxa_atexit((void (*)(void *))sub_21021A250, &stru_254A5A410, &dword_20E81F000);
        __cxa_guard_release(&qword_254A6DDD0);
      }
      if (!atomic_load(&qword_254A5A450))
      {
LABEL_47:
        result = os_signpost_enabled((os_log_t)*v25);
        if ((_DWORD)result)
        {
          v66 = 134217984;
          v67[0] = a8;
          result = _os_signpost_emit_unreliably_with_name_impl();
        }
        if (*(_QWORD *)(v21 + 144) || !*(_DWORD *)(v21 + 152))
        {
LABEL_50:
          if (*(_DWORD *)(v21 + 152) > *(_DWORD *)(v21 + 20))
          {
            v43 = sub_210219C18();
            v44 = atomic_load((unsigned __int8 *)&qword_254A6DDD0);
            if ((v44 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DDD0))
            {
              __cxa_atexit((void (*)(void *))sub_21021A250, &stru_254A5A410, &dword_20E81F000);
              __cxa_guard_release(&qword_254A6DDD0);
            }
            if (!atomic_load(&qword_254A5A450))
              goto LABEL_81;
            v46 = *(_DWORD *)(v21 + 152);
            v66 = 67109120;
            LODWORD(v67[0]) = v46;
            v47 = (char *)_os_log_send_and_compose_impl();
            v48 = strlen(v47);
            v65[0] = 0;
            pthread_threadid_np(0, v65);
            v49 = v65[0];
            timespec_get((timespec *)v65, 1);
            sub_210219E20(&v66, 0xEEEEB0B5B2B2EEEELL, "CCDUpdateCalibration", 0x14uLL, (__int128 *)(v43 + 1), (__int128 *)(v43 + 5), "CCD: resetting convergence detection due to low confidence (%d)", 0x3FuLL, v47, v48, v49, v65);
            std::mutex::lock(&stru_254A5A410);
            v50 = qword_254A5A458;
            for (i = unk_254A5A460; v50 != i; v50 += 40)
            {
              v52 = *(_QWORD *)(v50 + 32);
              if (!v52)
                sub_20E86D37C();
              (*(void (**)(uint64_t, int *))(*(_QWORD *)v52 + 48))(v52, &v66);
            }
            std::mutex::unlock(&stru_254A5A410);
            if (v78 < 0)
            {
              operator delete(__p);
              if ((v76 & 0x80000000) == 0)
              {
LABEL_58:
                if (!v74)
                {
LABEL_74:
                  if (v71 && v70 < 0)
                    operator delete(v69);
                  if (v68 < 0)
                    operator delete(*(void **)((char *)v67 + 4));
                  if (v47)
                    free(v47);
LABEL_81:
                  result = os_signpost_enabled((os_log_t)*v43);
                  if ((_DWORD)result)
                  {
                    v63 = *(_DWORD *)(v21 + 152);
                    v66 = 67109120;
                    LODWORD(v67[0]) = v63;
                    result = _os_signpost_emit_unreliably_with_name_impl();
                  }
                  goto LABEL_83;
                }
LABEL_72:
                if (v73 < 0)
                  operator delete(v72);
                goto LABEL_74;
              }
            }
            else if ((v76 & 0x80000000) == 0)
            {
              goto LABEL_58;
            }
            operator delete(v75);
            if (!v74)
              goto LABEL_74;
            goto LABEL_72;
          }
LABEL_83:
          *(_QWORD *)(v21 + 128) = 0;
          *(_QWORD *)(v21 + 136) = 0;
          *(_DWORD *)(v21 + 152) = 0;
          *(_QWORD *)(v21 + 144) = 0;
          return result;
        }
        v53 = sub_210219C18();
        v54 = atomic_load((unsigned __int8 *)&qword_254A6DDD0);
        if ((v54 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DDD0))
        {
          __cxa_atexit((void (*)(void *))sub_21021A250, &stru_254A5A410, &dword_20E81F000);
          __cxa_guard_release(&qword_254A6DDD0);
        }
        if (!atomic_load(&qword_254A5A450))
        {
LABEL_95:
          result = os_signpost_enabled((os_log_t)*v53);
          if ((_DWORD)result)
          {
            v64 = *(_DWORD *)(v21 + 152);
            v66 = 67109120;
            LODWORD(v67[0]) = v64;
            result = _os_signpost_emit_unreliably_with_name_impl();
          }
          goto LABEL_50;
        }
        v56 = *(_DWORD *)(v21 + 152);
        v66 = 67109120;
        LODWORD(v67[0]) = v56;
        v57 = (char *)_os_log_send_and_compose_impl();
        v58 = strlen(v57);
        v65[0] = 0;
        pthread_threadid_np(0, v65);
        v59 = v65[0];
        timespec_get((timespec *)v65, 1);
        sub_210219E20(&v66, 0xEEEEB0B5B2B2EEEELL, "CCDUpdateCalibration", 0x14uLL, (__int128 *)(v53 + 1), (__int128 *)(v53 + 5), "CCD: waiting for confident parameters (%d)", 0x2AuLL, v57, v58, v59, v65);
        std::mutex::lock(&stru_254A5A410);
        v60 = qword_254A5A458;
        for (j = unk_254A5A460; v60 != j; v60 += 40)
        {
          v62 = *(_QWORD *)(v60 + 32);
          if (!v62)
            sub_20E86D37C();
          (*(void (**)(uint64_t, int *))(*(_QWORD *)v62 + 48))(v62, &v66);
        }
        std::mutex::unlock(&stru_254A5A410);
        if (v78 < 0)
        {
          operator delete(__p);
          if ((v76 & 0x80000000) == 0)
          {
LABEL_68:
            if (!v74)
            {
LABEL_88:
              if (v71 && v70 < 0)
                operator delete(v69);
              if (v68 < 0)
                operator delete(*(void **)((char *)v67 + 4));
              if (v57)
                free(v57);
              goto LABEL_95;
            }
LABEL_86:
            if (v73 < 0)
              operator delete(v72);
            goto LABEL_88;
          }
        }
        else if ((v76 & 0x80000000) == 0)
        {
          goto LABEL_68;
        }
        operator delete(v75);
        if (!v74)
          goto LABEL_88;
        goto LABEL_86;
      }
      v66 = 134217984;
      v67[0] = a8;
      v28 = (char *)_os_log_send_and_compose_impl();
      v29 = strlen(v28);
      v65[0] = 0;
      pthread_threadid_np(0, v65);
      v30 = v65[0];
      timespec_get((timespec *)v65, 1);
      sub_210219E20(&v66, 0xEEEEB0B5B2B2EEEELL, "CCDUpdateCalibration", 0x14uLL, (__int128 *)(v25 + 1), (__int128 *)(v25 + 5), "CCD: resetting convergence detection due to low health (%f)", 0x3BuLL, v28, v29, v30, v65);
      std::mutex::lock(&stru_254A5A410);
      v31 = qword_254A5A458;
      for (k = unk_254A5A460; v31 != k; v31 += 40)
      {
        v33 = *(_QWORD *)(v31 + 32);
        if (!v33)
          sub_20E86D37C();
        (*(void (**)(uint64_t, int *))(*(_QWORD *)v33 + 48))(v33, &v66);
      }
      std::mutex::unlock(&stru_254A5A410);
      if (v78 < 0)
      {
        operator delete(__p);
        if ((v76 & 0x80000000) == 0)
        {
LABEL_21:
          if (!v74)
          {
LABEL_40:
            if (v71 && v70 < 0)
              operator delete(v69);
            if (v68 < 0)
              operator delete(*(void **)((char *)v67 + 4));
            if (v28)
              free(v28);
            goto LABEL_47;
          }
LABEL_38:
          if (v73 < 0)
            operator delete(v72);
          goto LABEL_40;
        }
      }
      else if ((v76 & 0x80000000) == 0)
      {
        goto LABEL_21;
      }
      operator delete(v75);
      if (!v74)
        goto LABEL_40;
      goto LABEL_38;
    }
  }
  else
  {
    v23 = *(_DWORD *)(v21 + 152) + 1;
    *(_DWORD *)(v21 + 152) = v23;
    v24 = *(_QWORD *)(v21 + 144);
    if (*(double *)(v21 + 8) > a8)
      goto LABEL_13;
  }
  if (v24)
  {
    if (v23 > *(_DWORD *)(v21 + 20))
      goto LABEL_50;
  }
  else if (v23)
  {
    goto LABEL_83;
  }
  v34 = *(_QWORD *)(v21 + 104) + 72 * *(_QWORD *)(v21 + 136);
  v35 = *((_QWORD *)a3 + 2);
  v36 = *a3;
  v37 = a2[1];
  *(_OWORD *)v34 = *a2;
  *(_OWORD *)(v34 + 16) = v37;
  *(_OWORD *)(v34 + 32) = v36;
  *(_QWORD *)(v34 + 48) = v35;
  *(double *)(v34 + 56) = a7;
  *(double *)(v34 + 64) = a10;
  v38 = 0x8E38E38E38E38E39 * ((uint64_t)(*(_QWORD *)(v21 + 112) - *(_QWORD *)(v21 + 104)) >> 3);
  v39 = *(_QWORD *)(v21 + 144);
  v40 = *(_QWORD *)(v21 + 136) + 1;
  if (v40 >= v38)
    v41 = 0x8E38E38E38E38E39 * ((uint64_t)(*(_QWORD *)(v21 + 112) - *(_QWORD *)(v21 + 104)) >> 3);
  else
    v41 = 0;
  *(_QWORD *)(v21 + 136) = v40 - v41;
  if (v39 == v38)
  {
    v42 = *(_QWORD *)(v21 + 128) + 1;
    if (v42 < v38)
      v38 = 0;
    *(_QWORD *)(v21 + 128) = v42 - v38;
  }
  else
  {
    *(_QWORD *)(v21 + 144) = v39 + 1;
  }
  return result;
}

void sub_20EFE4440(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  void *v15;
  va_list va;

  va_start(va, a15);
  sub_20E96E218((uint64_t)va);
  if (v15)
  {
    free(v15);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_20EFE44D0@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  unsigned __int8 v9;
  unint64_t v10;
  char *v12;
  size_t v13;
  __darwin_time_t tv_sec;
  uint64_t v15;
  uint64_t i;
  uint64_t v17;
  unint64_t v18;
  __int128 *v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  char v23;
  double v24;
  float64x2_t v25;
  unint64_t v26;
  uint64_t v27;
  float64x2_t v28;
  float64x2_t v29;
  float64x2_t v30;
  float64x2_t *v31;
  float64x2_t v32;
  float64x2_t v33;
  float64x2_t v34;
  float64x2_t v35;
  float64x2_t v36;
  float64x2_t v37;
  float64x2_t v38;
  uint64_t v39;
  float64x2_t v40;
  float64x2_t v41;
  float64x2_t v42;
  float64x2_t *v43;
  float64x2_t v44;
  float64x2_t v45;
  float64x2_t v46;
  float64x2_t v47;
  float64x2_t v48;
  uint64_t *v49;
  unsigned __int8 v50;
  char *v52;
  size_t v53;
  __darwin_time_t v54;
  uint64_t v55;
  uint64_t j;
  uint64_t v57;
  int64x2_t v58;
  float64x2_t v59;
  float64x2_t v60;
  uint64_t v61;
  float64x2_t v62;
  float64x2_t v63;
  float64x2_t v64;
  float64x2_t v65;
  float64x2_t v66;
  float64x2_t v67;
  float64x2_t v68;
  float64x2_t v69;
  float64x2_t v70;
  timespec v71;
  int v72;
  _BYTE v73[14];
  __int16 v74;
  float64_t v75;
  _BYTE v76[10];
  __int16 v77;
  float64_t v78;
  __int16 v79;
  float64_t v80;
  __int16 v81;
  void *v82;
  char v83;
  char v84;
  void *v85;
  char v86;
  void *__p;
  char v88;
  uint64_t v89;

  v2 = result;
  v89 = *MEMORY[0x24BDAC8D0];
  v4 = *(_QWORD *)(result + 144);
  v5 = *(_QWORD *)(result + 104);
  v6 = 0x8E38E38E38E38E39 * ((*(_QWORD *)(result + 112) - v5) >> 3);
  if (v6 > v4)
  {
    v7 = sub_210219C18();
    v8 = (uint64_t)(*(_QWORD *)(v2 + 112) - *(_QWORD *)(v2 + 104)) >> 3;
    v9 = atomic_load((unsigned __int8 *)&qword_254A6DDD0);
    if ((v9 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DDD0))
    {
      __cxa_atexit((void (*)(void *))sub_21021A250, &stru_254A5A410, &dword_20E81F000);
      __cxa_guard_release(&qword_254A6DDD0);
    }
    v10 = 0x8E38E38E38E38E39 * v8;
    if (!atomic_load(&qword_254A5A450))
      goto LABEL_30;
    v72 = 67109376;
    *(_DWORD *)v73 = v4;
    *(_WORD *)&v73[4] = 2048;
    *(_QWORD *)&v73[6] = 0x8E38E38E38E38E39 * v8;
    v12 = (char *)_os_log_send_and_compose_impl();
    v13 = strlen(v12);
    v71.tv_sec = 0;
    pthread_threadid_np(0, (__uint64_t *)&v71);
    tv_sec = v71.tv_sec;
    timespec_get(&v71, 1);
    sub_210219E20(&v72, 0xEEEEB0B5B2B2EEEELL, "CCDIsConverged", 0xEuLL, (__int128 *)(v7 + 1), (__int128 *)(v7 + 5), "CCD: collecting calibration parameters (%u/%zu)", 0x2FuLL, v12, v13, tv_sec, &v71);
    std::mutex::lock(&stru_254A5A410);
    v15 = qword_254A5A458;
    for (i = unk_254A5A460; v15 != i; v15 += 40)
    {
      v17 = *(_QWORD *)(v15 + 32);
      if (!v17)
        sub_20E86D37C();
      (*(void (**)(uint64_t, int *))(*(_QWORD *)v17 + 48))(v17, &v72);
    }
    std::mutex::unlock(&stru_254A5A410);
    if (v88 < 0)
    {
      operator delete(__p);
      if ((v86 & 0x80000000) == 0)
      {
LABEL_9:
        if (!v84)
        {
LABEL_23:
          if (BYTE2(v80) && SBYTE1(v80) < 0)
            operator delete(*(void **)v76);
          if (SHIBYTE(v75) < 0)
            operator delete(*(void **)&v73[4]);
          if (v12)
            free(v12);
LABEL_30:
          result = os_signpost_enabled((os_log_t)*v7);
          if ((_DWORD)result)
          {
            v72 = 67109376;
            *(_DWORD *)v73 = v4;
            *(_WORD *)&v73[4] = 2048;
            *(_QWORD *)&v73[6] = v10;
            result = _os_signpost_emit_unreliably_with_name_impl();
          }
LABEL_56:
          v23 = 0;
          *(_BYTE *)a2 = 0;
          goto LABEL_57;
        }
LABEL_21:
        if (v83 < 0)
          operator delete(v82);
        goto LABEL_23;
      }
    }
    else if ((v86 & 0x80000000) == 0)
    {
      goto LABEL_9;
    }
    operator delete(v85);
    if (!v84)
      goto LABEL_23;
    goto LABEL_21;
  }
  v18 = *(_QWORD *)(result + 128);
  if (*(_DWORD *)result != 1)
  {
    v24 = (double)v4;
    if (v4)
    {
      v25 = 0uLL;
      v26 = *(_QWORD *)(result + 128);
      v27 = *(_QWORD *)(result + 144);
      v28 = 0uLL;
      v29 = 0uLL;
      v30 = 0uLL;
      do
      {
        v31 = (float64x2_t *)(v5 + 72 * (v26 % v6));
        v32.f64[0] = v31[3].f64[0];
        v32.f64[1] = v31[4].f64[0];
        v30 = vaddq_f64(v30, v32);
        v29 = vaddq_f64(v29, v31[2]);
        v28 = vaddq_f64(v28, v31[1]);
        v25 = vaddq_f64(v25, *v31);
        ++v26;
        --v27;
      }
      while (v27);
      v33 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v24, 0);
      v34 = vdivq_f64(v30, v33);
      v35 = vdivq_f64(v29, v33);
      v36 = vdivq_f64(v28, v33);
      v37 = vdivq_f64(v25, v33);
      v38 = 0uLL;
      v39 = *(_QWORD *)(result + 144);
      v40 = 0uLL;
      v41 = 0uLL;
      v42 = 0uLL;
      do
      {
        v43 = (float64x2_t *)(v5 + 72 * (v18 % v6));
        v44.f64[0] = v43[3].f64[0];
        v44.f64[1] = v43[4].f64[0];
        v45 = vsubq_f64(v44, v34);
        v46 = vsubq_f64(v43[2], v35);
        v47 = vsubq_f64(v43[1], v36);
        v48 = vsubq_f64(*v43, v37);
        v42 = vaddq_f64(v42, vmulq_f64(v45, v45));
        v41 = vaddq_f64(v41, vmulq_f64(v46, v46));
        v40 = vaddq_f64(v40, vmulq_f64(v47, v47));
        v38 = vaddq_f64(v38, vmulq_f64(v48, v48));
        ++v18;
        --v39;
      }
      while (v39);
      v67 = v41;
      v69 = v42;
      v63 = v40;
      v65 = v38;
      v58 = (int64x2_t)v36;
      v59 = v35;
      v60 = v37;
      v61 = *(_QWORD *)&v34.f64[0];
    }
    else
    {
      v58 = vdupq_lane_s64(COERCE__INT64(0.0 / v24), 0);
      v59 = (float64x2_t)v58;
      v60 = (float64x2_t)v58;
      v61 = v58.i64[0];
      v63 = 0u;
      v65 = 0u;
      v67 = 0u;
      v69 = 0u;
    }
    v62 = (float64x2_t)vdupq_lane_s64(COERCE__INT64((double)(v4 - 1)), 0);
    v49 = sub_210219C18();
    v50 = atomic_load((unsigned __int8 *)&qword_254A6DDD0);
    if ((v50 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DDD0))
    {
      __cxa_atexit((void (*)(void *))sub_21021A250, &stru_254A5A410, &dword_20E81F000);
      __cxa_guard_release(&qword_254A6DDD0);
    }
    v68 = vdivq_f64(v67, v62);
    v70 = vdivq_f64(v69, v62);
    v64 = vdivq_f64(v63, v62);
    v66 = vdivq_f64(v65, v62);
    if (!atomic_load(&qword_254A5A450))
    {
LABEL_53:
      result = os_signpost_enabled((os_log_t)*v49);
      if ((_DWORD)result)
      {
        v72 = 134219520;
        *(float64_t *)v73 = v66.f64[0];
        *(_WORD *)&v73[8] = 2048;
        *(float64_t *)((unint64_t)&v72 | 0xE) = v66.f64[1];
        v74 = 2048;
        v75 = v64.f64[0];
        *(_WORD *)v76 = 2048;
        *(float64_t *)&v76[2] = v64.f64[1];
        v77 = 2048;
        v78 = v68.f64[0];
        v79 = 2048;
        v80 = v68.f64[1];
        v81 = 2048;
        v82 = *(void **)&v70.f64[0];
        result = _os_signpost_emit_unreliably_with_name_impl();
      }
      if ((vminv_u8((uint8x8_t)vcltz_s8(vshl_n_s8(vmovn_s16(vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vcgtq_f64(vmulq_f64(*(float64x2_t *)(v2 + 32), *(float64x2_t *)(v2 + 32)), v66), (int32x4_t)vcgtq_f64(vmulq_f64(*(float64x2_t *)(v2 + 48), *(float64x2_t *)(v2 + 48)), v64)), (int16x8_t)vuzp1q_s32((int32x4_t)vcgtq_f64(vmulq_f64(*(float64x2_t *)(v2 + 64), *(float64x2_t *)(v2 + 64)),
                                                                  v68),
                                                     (int32x4_t)vcgtq_f64(vmulq_f64(*(float64x2_t *)(v2 + 80), *(float64x2_t *)(v2 + 80)), v70)))), 7uLL))) & 1) != 0)
      {
        *(float64x2_t *)a2 = v60;
        *(int64x2_t *)(a2 + 16) = v58;
        *(float64x2_t *)(a2 + 32) = v59;
        v23 = 1;
        *(_QWORD *)(a2 + 48) = v61;
        goto LABEL_57;
      }
      goto LABEL_56;
    }
    v72 = 134219520;
    *(float64_t *)v73 = v66.f64[0];
    *(_WORD *)&v73[8] = 2048;
    *(float64_t *)((unint64_t)&v72 | 0xE) = v66.f64[1];
    v74 = 2048;
    v75 = v64.f64[0];
    *(_WORD *)v76 = 2048;
    *(float64_t *)&v76[2] = v64.f64[1];
    v77 = 2048;
    v78 = v68.f64[0];
    v79 = 2048;
    v80 = v68.f64[1];
    v81 = 2048;
    v82 = *(void **)&v70.f64[0];
    v52 = (char *)_os_log_send_and_compose_impl();
    v53 = strlen(v52);
    v71.tv_sec = 0;
    pthread_threadid_np(0, (__uint64_t *)&v71);
    v54 = v71.tv_sec;
    timespec_get(&v71, 1);
    sub_210219E20(&v72, 0xEEEEB0B5B2B2EEEELL, "CCDIsConverged", 0xEuLL, (__int128 *)(v49 + 1), (__int128 *)(v49 + 5), "CCD: parameter variance = [%e, %e, %e, %e, %e, %e, %e]", 0x36uLL, v52, v53, v54, &v71);
    std::mutex::lock(&stru_254A5A410);
    v55 = qword_254A5A458;
    for (j = unk_254A5A460; v55 != j; v55 += 40)
    {
      v57 = *(_QWORD *)(v55 + 32);
      if (!v57)
        sub_20E86D37C();
      (*(void (**)(uint64_t, int *))(*(_QWORD *)v57 + 48))(v57, &v72);
    }
    std::mutex::unlock(&stru_254A5A410);
    if (v88 < 0)
    {
      operator delete(__p);
      if ((v86 & 0x80000000) == 0)
      {
LABEL_40:
        if (!v84)
        {
LABEL_46:
          if (BYTE2(v80) && SBYTE1(v80) < 0)
            operator delete(*(void **)v76);
          if (SHIBYTE(v75) < 0)
            operator delete(*(void **)&v73[4]);
          if (v52)
            free(v52);
          goto LABEL_53;
        }
LABEL_44:
        if (v83 < 0)
          operator delete(v82);
        goto LABEL_46;
      }
    }
    else if ((v86 & 0x80000000) == 0)
    {
      goto LABEL_40;
    }
    operator delete(v85);
    if (!v84)
      goto LABEL_46;
    goto LABEL_44;
  }
  v19 = (__int128 *)(v5 + 72 * v18);
  v20 = *v19;
  v21 = v19[1];
  v22 = v19[2];
  *(_QWORD *)(a2 + 48) = *((_QWORD *)v19 + 6);
  *(_OWORD *)(a2 + 16) = v21;
  *(_OWORD *)(a2 + 32) = v22;
  *(_OWORD *)a2 = v20;
  v23 = 1;
LABEL_57:
  *(_BYTE *)(a2 + 56) = v23;
  return result;
}

void sub_20EFE4CF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  void *v33;

  sub_20E96E218((uint64_t)&a33);
  if (v33)
    free(v33);
  _Unwind_Resume(a1);
}

uint64_t *sub_20EFE4D70@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(__int128 *, __int128 *, uint64_t);
  _OWORD *v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  void *v18;
  void *v19;
  _OWORD *v20;
  void *__p;
  __int128 v22;

  __p = operator new(0x28uLL);
  v22 = xmmword_2102E0950;
  strcpy((char *)__p, "CalibrationConvergenceDetectorConfig");
  sub_20E8B30B4(a2, (__int128 *)&__p, 80, 40);
  if (SHIBYTE(v22) < 0)
    operator delete(__p);
  __p = (void *)nullsub_1(a2);
  v4 = sub_20EA9DCF0((unsigned int *)a1);
  sub_20E8B2F9C((uint64_t *)&__p, "CalibrationConvergenceDetectorConfig.window_size", v4, "Window size for convergence detection.");
  __p = (void *)nullsub_1(a2);
  v5 = sub_20EA9DB90((double *)(a1 + 8));
  sub_20E8B2F9C((uint64_t *)&__p, "CalibrationConvergenceDetectorConfig.min_slam_health", v5, "Minimum SLAM health required to qualify the estimated calibration.");
  __p = (void *)nullsub_1(a2);
  v6 = sub_20EA9DCF0((unsigned int *)(a1 + 16));
  sub_20E8B2F9C((uint64_t *)&__p, "CalibrationConvergenceDetectorConfig.min_inlier_points", v6, "Minimum number of inlier points in the latest state.");
  __p = (void *)nullsub_1(a2);
  v7 = sub_20EA9DCF0((unsigned int *)(a1 + 20));
  sub_20E8B2F9C((uint64_t *)&__p, "CalibrationConvergenceDetectorConfig.max_consecutive_low_confidence_frames", v7, "Max consecutive frames of low confidence before resetting calibration change detector.");
  __p = (void *)nullsub_1(a2);
  v8 = sub_20EA9DB90((double *)(a1 + 24));
  sub_20E8B2F9C((uint64_t *)&__p, "CalibrationConvergenceDetectorConfig.min_avg_inlier_tracks_vergence_angle", v8, "Min average vergence angle within this bundle in degree.");
  v17 = nullsub_1(a2);
  v9 = operator new();
  *(_QWORD *)(v9 + 120) = 0;
  *(_OWORD *)(v9 + 16) = 0u;
  *(_OWORD *)(v9 + 32) = 0u;
  *(_OWORD *)(v9 + 48) = 0u;
  *(_OWORD *)(v9 + 64) = 0u;
  *(_OWORD *)(v9 + 80) = 0u;
  *(_OWORD *)(v9 + 96) = 0u;
  *(_QWORD *)(v9 + 109) = 0;
  *(_QWORD *)v9 = &off_24C9C2E20;
  *(_QWORD *)(v9 + 8) = &unk_24C9C2E98;
  *(_QWORD *)(v9 + 152) = &unk_24C9C2EC0;
  *(_OWORD *)(v9 + 160) = 0u;
  *(_OWORD *)(v9 + 176) = 0u;
  __p = (char *)off_24C9F67B0 + 1;
  *(_QWORD *)&v22 = a1 + 32;
  sub_20EAA459C((uint64_t *)(v9 + 120), (uint64_t *)&__p);
  if (__p)
  {
    if ((__p & 1) == 0)
    {
      v10 = *(void (**)(__int128 *, __int128 *, uint64_t))((unint64_t)__p & 0xFFFFFFFFFFFFFFFELL);
      if (v10)
        v10(&v22, &v22, 2);
    }
    __p = 0;
  }
  v11 = operator new(0x40uLL);
  v19 = v11 + 4;
  v20 = v11 + 4;
  v18 = v11;
  v12 = *(_OWORD *)(a1 + 48);
  *v11 = *(_OWORD *)(a1 + 32);
  v11[1] = v12;
  v13 = *(_OWORD *)(a1 + 80);
  v11[2] = *(_OWORD *)(a1 + 64);
  v11[3] = v13;
  v14 = sub_20EAA2D64(v9, (uint64_t)&v18);
  if (v18)
  {
    v19 = v18;
    operator delete(v18);
  }
  sub_20E8B2F9C(&v17, "CalibrationConvergenceDetectorConfig.max_parameter_change", v14, "Maximum parameter update in steady state, [fx, fy, cx, cy, rx, ry, rz, temperature] in pixel, radian, and Celsius.");
  __p = (void *)nullsub_1(a2);
  v15 = sub_20EA9DB90((double *)(a1 + 96));
  return sub_20E8B2F9C((uint64_t *)&__p, "CalibrationConvergenceDetectorConfig.min_camera_lux", v15, "Min camera lux estimate.");
}

void sub_20EFE5038(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  uint64_t v18;

  sub_20E869298(v18);
  _Unwind_Resume(a1);
}

uint64_t sub_20EFE50C4(uint64_t result, _WORD *a2, unsigned int a3)
{
  uint64_t v4;

  if (a3 == 4)
    goto LABEL_2;
  v4 = result;
  if (a3 <= 1)
  {
    *(_QWORD *)a2 = *(_QWORD *)result;
    return result;
  }
  if (a3 != 2)
  {
    if (a3 != 3)
    {
LABEL_2:
      *(_QWORD *)a2 = &unk_24C9F67C0;
      a2[4] = 0;
      return result;
    }
    result = *(_QWORD *)(*(_QWORD *)a2 + 8) & 0x7FFFFFFFFFFFFFFFLL;
    if (result == ((unint64_t)"Z47CreateProgramOptionValueOrArrayWithSavedCurrentIdLm8EEPN5boost15program_options"
                                      "11typed_valueINSt3__16vectorIT_NS3_9allocatorIS5_EEEEcEERNS3_5arrayIS5_XT0_EEEEUlR"
                                      "KNS4_IdNS6_IdEEEEE_" & 0x7FFFFFFFFFFFFFFFLL)
      || (result = strcmp((const char *)result, (const char *)((unint64_t)"Z47CreateProgramOptionValueOrArrayWithSavedCurrentIdLm8EEPN5boost15program_options11typed_valueINSt3__16vectorIT_NS3_9allocatorIS5_EEEEcEERNS3_5arrayIS5_XT0_EEEEUlRKNS4_IdNS6_IdEEEEE_" & 0x7FFFFFFFFFFFFFFFLL)), !(_DWORD)result))
    {
      *(_QWORD *)a2 = v4;
    }
    else
    {
      *(_QWORD *)a2 = 0;
    }
  }
  return result;
}

__n128 sub_20EFE5170(_QWORD *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  __n128 result;
  _QWORD *v6;
  __int128 v7;
  __int128 v8;

  v2 = *a2;
  v3 = (a2[1] - *a2) >> 3;
  if (v3 == 8)
  {
    v6 = (_QWORD *)*a1;
    result = *(__n128 *)v2;
    v7 = *(_OWORD *)(v2 + 16);
    v8 = *(_OWORD *)(v2 + 48);
    *((_OWORD *)v6 + 2) = *(_OWORD *)(v2 + 32);
    *((_OWORD *)v6 + 3) = v8;
    *(__n128 *)v6 = result;
    *((_OWORD *)v6 + 1) = v7;
  }
  else
  {
    if (v3 != 1)
    {
      sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/ProgramOptions/include/Kit/ProgramOptions/ProgramOptionsParserUtil.h", 161, (uint64_t)"", 0, (uint64_t)"invalid size of array parameter", 31, (void (*)(void **))sub_21023DDB0);
      abort();
    }
    v4 = (_QWORD *)*a1;
    *v4 = *(_QWORD *)v2;
    v4[1] = *(_QWORD *)v2;
    v4[2] = *(_QWORD *)v2;
    v4[3] = *(_QWORD *)v2;
    v4[4] = *(_QWORD *)v2;
    v4[5] = *(_QWORD *)v2;
    v4[6] = *(_QWORD *)v2;
    result.n128_u64[0] = *(_QWORD *)v2;
    v4[7] = *(_QWORD *)v2;
  }
  return result;
}

uint64_t sub_20EFE5230(uint64_t a1, int *a2, uint64_t a3, double a4)
{
  unint64_t v4;
  int v8;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  uint64_t **v12;
  uint64_t *v13;
  unint64_t v15;
  uint64_t v17;
  unint64_t v18;
  __int128 v19;
  __int128 v20;
  _QWORD *v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  float v25;
  float v26;
  unint64_t *v27;
  _QWORD *v28;
  _BOOL8 v29;
  unint64_t v30;
  unint64_t v31;
  size_t prime;
  void *v33;
  void *v34;
  uint64_t v35;
  _QWORD *v36;
  size_t v37;
  size_t v38;
  size_t v39;
  _QWORD *i;
  size_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint8x8_t v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  size_t v49;
  uint64_t v50;
  void *v51;
  unint64_t v52;
  char v53;
  uint64_t v55;
  int v56;
  __int128 v57;
  __int128 v58;
  uint64_t v59;
  unint64_t v60;
  unint64_t v61;
  uint8x8_t v62;
  uint64_t **v63;
  uint64_t *v64;
  unint64_t v65;
  uint64_t v67;
  char *v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  float v73;
  float v74;
  _BOOL8 v75;
  unint64_t v76;
  unint64_t v77;
  size_t v78;
  void *v79;
  void *v80;
  uint64_t v81;
  _QWORD *v82;
  uint64_t v83;
  size_t v84;
  size_t v85;
  size_t v86;
  _QWORD *j;
  size_t v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  uint8x8_t v92;
  uint64_t v93;
  _QWORD *v94;
  uint64_t v95;
  size_t v96;
  uint64_t v97;
  uint64_t v98;
  _QWORD *v99;
  void *v100;
  unint64_t v101;
  int64x2_t v102;
  int64x2_t v103;
  __int128 v104;
  int *v106;
  _OWORD v107[4];
  uint64_t v108;
  __int128 v109;
  uint64_t v110;
  _BYTE v111[1464];
  uint64_t v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  _OWORD v117[2];
  double v118;
  _BYTE v119[72];
  uint64_t v120;
  __int128 v121;
  uint64_t v122;
  _BYTE v123[1448];
  __int128 v124;
  uint64_t v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  _OWORD v130[2];
  double v131;
  uint64_t v132;

  v132 = *MEMORY[0x24BDAC8D0];
  sub_20EB81E74((uint64_t)v107, a3);
  *(_OWORD *)&v119[24] = v107[1];
  *(_OWORD *)&v119[40] = v107[2];
  *(_OWORD *)&v119[56] = v107[3];
  v118 = a4;
  v106 = a2;
  *(_QWORD *)v119 = *(_QWORD *)a2;
  v120 = v108;
  *(_OWORD *)&v119[8] = v107[0];
  v122 = v110;
  v121 = v109;
  sub_20E972C70(v123, (uint64_t)v111);
  v125 = v112;
  v124 = *(_OWORD *)&v111[1448];
  v126 = v113;
  v113 = 0u;
  v128 = v115;
  v129 = v116;
  v130[0] = v117[0];
  v127 = v114;
  *(_OWORD *)((char *)v130 + 9) = *(_OWORD *)((char *)v117 + 9);
  v131 = v118;
  if (*(_DWORD *)v119 >= 0x10000u
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/ComputerVisionTypes/include/VIO/ComputerVisionTypes/CameraStreamId.h", 49, (uint64_t)"camera_id <= 0xffff", 19, (uint64_t)"Camera ID cannot exceeds 16 bits", 32, (void (*)(void **))sub_21023DDB0))
  {
    goto LABEL_216;
  }
  v8 = *(_DWORD *)&v119[4];
  if (*(_DWORD *)&v119[4] >= 0x10000u)
  {
    if (!sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/ComputerVisionTypes/include/VIO/ComputerVisionTypes/CameraStreamId.h", 50, (uint64_t)"stream_id <= 0xffff", 19, (uint64_t)"Stream ID cannot exceeds 16 bits", 32, (void (*)(void **))sub_21023DDB0))
    {
      v8 = *(_DWORD *)&v119[4];
      goto LABEL_6;
    }
LABEL_216:
    abort();
  }
LABEL_6:
  v9 = (unsigned __int16)v8 | (*(unsigned __int16 *)v119 << 16);
  v10 = *(_QWORD *)(a1 + 216);
  if (v10)
  {
    v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    if (v11.u32[0] > 1uLL)
    {
      v4 = (unsigned __int16)v8 | (*(unsigned __int16 *)v119 << 16);
      if (v10 <= v9)
        v4 = v9 % v10;
    }
    else
    {
      v4 = ((_DWORD)v10 - 1) & v9;
    }
    v12 = *(uint64_t ***)(*(_QWORD *)(a1 + 208) + 8 * v4);
    if (v12)
    {
      v13 = *v12;
      if (v13)
      {
        if (v11.u32[0] < 2uLL)
        {
          while (1)
          {
            v17 = v13[1];
            if (v17 == v9)
            {
              if (*((_DWORD *)v13 + 4) == *(_DWORD *)v119 && *((_DWORD *)v13 + 5) == v8)
                goto LABEL_86;
            }
            else if ((v17 & (v10 - 1)) != v4)
            {
              goto LABEL_33;
            }
            v13 = (uint64_t *)*v13;
            if (!v13)
              goto LABEL_33;
          }
        }
        do
        {
          v15 = v13[1];
          if (v15 == v9)
          {
            if (*((_DWORD *)v13 + 4) == *(_DWORD *)v119 && *((_DWORD *)v13 + 5) == v8)
            {
LABEL_86:
              sub_20EB8188C((uint64_t)&v119[8]);
              sub_20EB8188C((uint64_t)v107);
              return 0;
            }
          }
          else
          {
            if (v15 >= v10)
              v15 %= v10;
            if (v15 != v4)
              break;
          }
          v13 = (uint64_t *)*v13;
        }
        while (v13);
      }
    }
  }
LABEL_33:
  v18 = (unint64_t)operator new(0x6A0uLL);
  v19 = *(_OWORD *)&v119[8];
  *(_OWORD *)(v18 + 40) = *(_OWORD *)&v119[24];
  v20 = *(_OWORD *)&v119[56];
  *(_OWORD *)(v18 + 56) = *(_OWORD *)&v119[40];
  *(_OWORD *)(v18 + 72) = v20;
  v21 = (_QWORD *)(a1 + 224);
  *(_QWORD *)v18 = 0;
  *(_QWORD *)(v18 + 8) = v9;
  *(_QWORD *)(v18 + 16) = *(_QWORD *)v119;
  *(_QWORD *)(v18 + 88) = v120;
  *(_OWORD *)(v18 + 24) = v19;
  v22 = v121;
  *(_QWORD *)(v18 + 112) = v122;
  *(_OWORD *)(v18 + 96) = v22;
  sub_20E972C70((_BYTE *)(v18 + 120), (uint64_t)v123);
  *(_OWORD *)(v18 + 1568) = v124;
  *(_OWORD *)(v18 + 1592) = v126;
  v23 = v127;
  *(_OWORD *)(v18 + 1624) = v128;
  v24 = v130[0];
  *(_OWORD *)(v18 + 1640) = v129;
  *(_QWORD *)(v18 + 1584) = v125;
  v126 = 0uLL;
  *(_OWORD *)(v18 + 1656) = v24;
  *(_OWORD *)(v18 + 1608) = v23;
  *(_OWORD *)(v18 + 1665) = *(_OWORD *)((char *)v130 + 9);
  *(double *)(v18 + 1688) = v131;
  v25 = (float)(unint64_t)(*(_QWORD *)(a1 + 232) + 1);
  v26 = *(float *)(a1 + 240);
  if (!v10 || (float)(v26 * (float)v10) < v25)
  {
    v29 = v10 < 3 || (v10 & (v10 - 1)) != 0;
    v30 = v29 | (2 * v10);
    v31 = vcvtps_u32_f32(v25 / v26);
    if (v30 <= v31)
      prime = v31;
    else
      prime = v30;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
    }
    v10 = *(_QWORD *)(a1 + 216);
    if (prime > v10)
    {
LABEL_48:
      if (prime >> 61)
        sub_20E877A38();
      v33 = operator new(8 * prime);
      v34 = *(void **)(a1 + 208);
      *(_QWORD *)(a1 + 208) = v33;
      if (v34)
        operator delete(v34);
      v35 = 0;
      *(_QWORD *)(a1 + 216) = prime;
      do
        *(_QWORD *)(*(_QWORD *)(a1 + 208) + 8 * v35++) = 0;
      while (prime != v35);
      v36 = (_QWORD *)*v21;
      if (!*v21)
        goto LABEL_80;
      v37 = v36[1];
      v38 = prime - 1;
      if ((prime & (prime - 1)) == 0)
      {
        v39 = v37 & v38;
        *(_QWORD *)(*(_QWORD *)(a1 + 208) + 8 * v39) = v21;
        for (i = (_QWORD *)*v36; *v36; i = (_QWORD *)*v36)
        {
          v41 = i[1] & v38;
          if (v41 == v39)
          {
            v36 = i;
          }
          else
          {
            v42 = *(_QWORD *)(a1 + 208);
            if (*(_QWORD *)(v42 + 8 * v41))
            {
              *v36 = *i;
              v43 = 8 * v41;
              *i = **(_QWORD **)(*(_QWORD *)(a1 + 208) + v43);
              **(_QWORD **)(*(_QWORD *)(a1 + 208) + v43) = i;
            }
            else
            {
              *(_QWORD *)(v42 + 8 * v41) = v36;
              v36 = i;
              v39 = v41;
            }
          }
        }
        goto LABEL_80;
      }
      if (v37 >= prime)
        v37 %= prime;
      *(_QWORD *)(*(_QWORD *)(a1 + 208) + 8 * v37) = v21;
      v47 = (_QWORD *)*v36;
      if (!*v36)
      {
LABEL_80:
        v10 = prime;
        if ((prime & (prime - 1)) != 0)
          goto LABEL_81;
        goto LABEL_97;
      }
      while (1)
      {
        v49 = v47[1];
        if (v49 >= prime)
          v49 %= prime;
        if (v49 == v37)
          goto LABEL_74;
        v50 = *(_QWORD *)(a1 + 208);
        if (*(_QWORD *)(v50 + 8 * v49))
        {
          *v36 = *v47;
          v48 = 8 * v49;
          *v47 = **(_QWORD **)(*(_QWORD *)(a1 + 208) + v48);
          **(_QWORD **)(*(_QWORD *)(a1 + 208) + v48) = v47;
          v47 = v36;
LABEL_74:
          v36 = v47;
          v47 = (_QWORD *)*v47;
          if (!v47)
            goto LABEL_80;
        }
        else
        {
          *(_QWORD *)(v50 + 8 * v49) = v36;
          v36 = v47;
          v47 = (_QWORD *)*v47;
          v37 = v49;
          if (!v47)
            goto LABEL_80;
        }
      }
    }
    if (prime < v10)
    {
      v44 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 232) / *(float *)(a1 + 240));
      if (v10 < 3 || (v45 = (uint8x8_t)vcnt_s8((int8x8_t)v10), v45.i16[0] = vaddlv_u8(v45), v45.u32[0] > 1uLL))
      {
        v44 = std::__next_prime(v44);
      }
      else
      {
        v46 = 1 << -(char)__clz(v44 - 1);
        if (v44 >= 2)
          v44 = v46;
      }
      if (prime <= v44)
        prime = v44;
      if (prime < v10)
      {
        if (!prime)
        {
          v51 = *(void **)(a1 + 208);
          *(_QWORD *)(a1 + 208) = 0;
          if (v51)
            operator delete(v51);
          v10 = 0;
          *(_QWORD *)(a1 + 216) = 0;
          goto LABEL_97;
        }
        goto LABEL_48;
      }
      v10 = *(_QWORD *)(a1 + 216);
    }
    if ((v10 & (v10 - 1)) != 0)
    {
LABEL_81:
      if (v10 <= v9)
      {
        v4 = v9 % v10;
        v27 = *(unint64_t **)(*(_QWORD *)(a1 + 208) + 8 * (v9 % v10));
        v28 = (_QWORD *)v18;
        if (v27)
          goto LABEL_36;
      }
      else
      {
        v4 = v9;
        v27 = *(unint64_t **)(*(_QWORD *)(a1 + 208) + 8 * v9);
        v28 = (_QWORD *)v18;
        if (v27)
          goto LABEL_36;
      }
      goto LABEL_98;
    }
LABEL_97:
    v4 = ((_DWORD)v10 - 1) & v9;
    v27 = *(unint64_t **)(*(_QWORD *)(a1 + 208) + 8 * v4);
    v28 = (_QWORD *)v18;
    if (v27)
      goto LABEL_36;
    goto LABEL_98;
  }
  v27 = *(unint64_t **)(*(_QWORD *)(a1 + 208) + 8 * v4);
  v28 = (_QWORD *)v18;
  if (v27)
  {
LABEL_36:
    *v28 = *v27;
    *v27 = v18;
    goto LABEL_104;
  }
LABEL_98:
  *v28 = *(_QWORD *)(a1 + 224);
  *(_QWORD *)(a1 + 224) = v18;
  *(_QWORD *)(*(_QWORD *)(a1 + 208) + 8 * v4) = v21;
  if (*(_QWORD *)v18)
  {
    v52 = *(_QWORD *)(*(_QWORD *)v18 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v52 >= v10)
        v52 %= v10;
    }
    else
    {
      v52 &= v10 - 1;
    }
    *(_QWORD *)(*(_QWORD *)(a1 + 208) + 8 * v52) = v18;
  }
LABEL_104:
  ++*(_QWORD *)(a1 + 232);
  sub_20EB8188C((uint64_t)&v119[8]);
  sub_20EB8188C((uint64_t)v107);
  sub_20EFE9CC0(a1 + 288, v106, v106, (unsigned int *)(a1 + 104));
  if ((v53 & 1) == 0)
    return 0;
  if (*(_BYTE *)(a3 + 1536))
    v55 = a3 + 96;
  else
    v55 = 0;
  v56 = *(_DWORD *)(v55 + 992);
  if (v56 == -1)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Util/include/VIO/Util/Variant.h", 255, (uint64_t)"!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v56 = *(_DWORD *)(v55 + 992);
  }
  if (!v56)
  {
    sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Geometry/include/VIO/Geometry/LensModel.h", 1745, (uint64_t)"", 0, (uint64_t)"Empty variant lens model invoked.", 33, (void (*)(void **))sub_21023DDB0);
    abort();
  }
  v102 = *(int64x2_t *)v55;
  v103 = *(int64x2_t *)(v55 + 32);
  v104 = *(_OWORD *)(v55 + 16);
  v57 = *(_OWORD *)(a3 + 48);
  *(_OWORD *)&v119[32] = *(_OWORD *)(a3 + 32);
  *(_OWORD *)&v119[48] = v57;
  *(_QWORD *)&v119[64] = *(_QWORD *)(a3 + 64);
  v58 = *(_OWORD *)a3;
  *(_OWORD *)&v119[16] = *(_OWORD *)(a3 + 16);
  *(_OWORD *)v119 = v58;
  v59 = *(_QWORD *)v106;
  if (*(_QWORD *)v106 >= 0x10000
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/ComputerVisionTypes/include/VIO/ComputerVisionTypes/CameraStreamId.h", 49, (uint64_t)"camera_id <= 0xffff", 19, (uint64_t)"Camera ID cannot exceeds 16 bits", 32, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  if (HIDWORD(v59) >= 0x10000
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/ComputerVisionTypes/include/VIO/ComputerVisionTypes/CameraStreamId.h", 50, (uint64_t)"stream_id <= 0xffff", 19, (uint64_t)"Stream ID cannot exceeds 16 bits", 32, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v60 = ((_DWORD)v59 << 16) | (unint64_t)WORD2(v59);
  v61 = *(_QWORD *)(a1 + 256);
  if (v61)
  {
    v62 = (uint8x8_t)vcnt_s8((int8x8_t)v61);
    v62.i16[0] = vaddlv_u8(v62);
    if (v62.u32[0] > 1uLL)
    {
      v18 = ((_DWORD)v59 << 16) | (unint64_t)WORD2(v59);
      if (v61 <= v60)
        v18 = v60 % v61;
    }
    else
    {
      v18 = ((_DWORD)v61 - 1) & v60;
    }
    v63 = *(uint64_t ***)(*(_QWORD *)(a1 + 248) + 8 * v18);
    if (v63)
    {
      v64 = *v63;
      if (v64)
      {
        if (v62.u32[0] < 2uLL)
        {
          while (1)
          {
            v67 = v64[1];
            if (v67 == v60)
            {
              if (*((_DWORD *)v64 + 4) == (_DWORD)v59 && *((_DWORD *)v64 + 5) == HIDWORD(v59))
                return 0;
            }
            else if ((v67 & (v61 - 1)) != v18)
            {
              goto LABEL_147;
            }
            v64 = (uint64_t *)*v64;
            if (!v64)
              goto LABEL_147;
          }
        }
        do
        {
          v65 = v64[1];
          if (v65 == v60)
          {
            if (*((_DWORD *)v64 + 4) == (_DWORD)v59 && *((_DWORD *)v64 + 5) == HIDWORD(v59))
              return 0;
          }
          else
          {
            if (v65 >= v61)
              v65 %= v61;
            if (v65 != v18)
              break;
          }
          v64 = (uint64_t *)*v64;
        }
        while (v64);
      }
    }
  }
LABEL_147:
  v69 = (char *)operator new(0x88uLL);
  *(_QWORD *)&v70 = v104;
  *((_QWORD *)&v70 + 1) = v103.i64[1];
  *(_QWORD *)v69 = 0;
  *((_QWORD *)v69 + 1) = v60;
  *((_QWORD *)v69 + 2) = v59;
  *(int64x2_t *)(v69 + 24) = vzip1q_s64(v102, v103);
  *(_OWORD *)(v69 + 40) = v70;
  v71 = *(_OWORD *)v119;
  *(_OWORD *)(v69 + 72) = *(_OWORD *)&v119[16];
  v72 = *(_OWORD *)&v119[48];
  *(_OWORD *)(v69 + 88) = *(_OWORD *)&v119[32];
  *(_OWORD *)(v69 + 104) = v72;
  *((_QWORD *)v69 + 15) = *(_QWORD *)&v119[64];
  *(_OWORD *)(v69 + 56) = v71;
  v73 = (float)(unint64_t)(*(_QWORD *)(a1 + 272) + 1);
  *((double *)v69 + 16) = a4;
  v74 = *(float *)(a1 + 280);
  if ((((float)(v74 * (float)v61) >= v73) & ~(v61 == 0)) != 0)
    goto LABEL_193;
  v75 = 1;
  if (v61 >= 3)
    v75 = (v61 & (v61 - 1)) != 0;
  v76 = v75 | (2 * v61);
  v77 = vcvtps_u32_f32(v73 / v74);
  if (v76 <= v77)
    v78 = v77;
  else
    v78 = v76;
  if (v78 == 1)
  {
    v78 = 2;
  }
  else if ((v78 & (v78 - 1)) != 0)
  {
    v78 = std::__next_prime(v78);
    v61 = *(_QWORD *)(a1 + 256);
  }
  if (v78 > v61)
    goto LABEL_158;
  if (v78 >= v61)
    goto LABEL_206;
  v91 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 272) / *(float *)(a1 + 280));
  if (v61 < 3 || (v92 = (uint8x8_t)vcnt_s8((int8x8_t)v61), v92.i16[0] = vaddlv_u8(v92), v92.u32[0] > 1uLL))
  {
    v91 = std::__next_prime(v91);
  }
  else
  {
    v93 = 1 << -(char)__clz(v91 - 1);
    if (v91 >= 2)
      v91 = v93;
  }
  if (v78 <= v91)
    v78 = v91;
  if (v78 >= v61)
  {
    v61 = *(_QWORD *)(a1 + 256);
LABEL_206:
    if ((v61 & (v61 - 1)) != 0)
      goto LABEL_191;
LABEL_207:
    v18 = ((_DWORD)v61 - 1) & v60;
    v98 = *(_QWORD *)(a1 + 248);
    v99 = *(_QWORD **)(v98 + 8 * v18);
    if (v99)
      goto LABEL_194;
    goto LABEL_208;
  }
  if (!v78)
  {
    v100 = *(void **)(a1 + 248);
    *(_QWORD *)(a1 + 248) = 0;
    if (v100)
      operator delete(v100);
    v61 = 0;
    *(_QWORD *)(a1 + 256) = 0;
    goto LABEL_207;
  }
LABEL_158:
  if (v78 >> 61)
    sub_20E877A38();
  v79 = operator new(8 * v78);
  v80 = *(void **)(a1 + 248);
  *(_QWORD *)(a1 + 248) = v79;
  if (v80)
    operator delete(v80);
  v81 = 0;
  *(_QWORD *)(a1 + 256) = v78;
  do
    *(_QWORD *)(*(_QWORD *)(a1 + 248) + 8 * v81++) = 0;
  while (v78 != v81);
  v82 = *(_QWORD **)(a1 + 264);
  if (v82)
  {
    v83 = a1 + 264;
    v84 = v82[1];
    v85 = v78 - 1;
    if ((v78 & (v78 - 1)) == 0)
    {
      v86 = v84 & v85;
      *(_QWORD *)(*(_QWORD *)(a1 + 248) + 8 * v86) = v83;
      for (j = (_QWORD *)*v82; *v82; j = (_QWORD *)*v82)
      {
        v88 = j[1] & v85;
        if (v88 == v86)
        {
          v82 = j;
        }
        else
        {
          v89 = *(_QWORD *)(a1 + 248);
          if (*(_QWORD *)(v89 + 8 * v88))
          {
            *v82 = *j;
            v90 = 8 * v88;
            *j = **(_QWORD **)(*(_QWORD *)(a1 + 248) + v90);
            **(_QWORD **)(*(_QWORD *)(a1 + 248) + v90) = j;
          }
          else
          {
            *(_QWORD *)(v89 + 8 * v88) = v82;
            v82 = j;
            v86 = v88;
          }
        }
      }
      goto LABEL_190;
    }
    if (v84 >= v78)
      v84 %= v78;
    *(_QWORD *)(*(_QWORD *)(a1 + 248) + 8 * v84) = v83;
    v94 = (_QWORD *)*v82;
    if (*v82)
    {
      while (1)
      {
        v96 = v94[1];
        if (v96 >= v78)
          v96 %= v78;
        if (v96 == v84)
          goto LABEL_184;
        v97 = *(_QWORD *)(a1 + 248);
        if (*(_QWORD *)(v97 + 8 * v96))
        {
          *v82 = *v94;
          v95 = 8 * v96;
          *v94 = **(_QWORD **)(*(_QWORD *)(a1 + 248) + v95);
          **(_QWORD **)(*(_QWORD *)(a1 + 248) + v95) = v94;
          v94 = v82;
LABEL_184:
          v82 = v94;
          v94 = (_QWORD *)*v94;
          if (!v94)
            break;
        }
        else
        {
          *(_QWORD *)(v97 + 8 * v96) = v82;
          v82 = v94;
          v94 = (_QWORD *)*v94;
          v84 = v96;
          if (!v94)
            break;
        }
      }
    }
  }
LABEL_190:
  v61 = v78;
  if ((v78 & (v78 - 1)) == 0)
    goto LABEL_207;
LABEL_191:
  if (v61 <= v60)
  {
    v18 = v60 % v61;
    v98 = *(_QWORD *)(a1 + 248);
    v99 = *(_QWORD **)(v98 + 8 * (v60 % v61));
    if (v99)
      goto LABEL_194;
    goto LABEL_208;
  }
  v18 = v60;
LABEL_193:
  v98 = *(_QWORD *)(a1 + 248);
  v99 = *(_QWORD **)(v98 + 8 * v18);
  if (v99)
  {
LABEL_194:
    *(_QWORD *)v69 = *v99;
LABEL_214:
    *v99 = v69;
    goto LABEL_215;
  }
LABEL_208:
  *(_QWORD *)v69 = *(_QWORD *)(a1 + 264);
  *(_QWORD *)(a1 + 264) = v69;
  *(_QWORD *)(v98 + 8 * v18) = a1 + 264;
  if (*(_QWORD *)v69)
  {
    v101 = *(_QWORD *)(*(_QWORD *)v69 + 8);
    if ((v61 & (v61 - 1)) != 0)
    {
      if (v101 >= v61)
        v101 %= v61;
    }
    else
    {
      v101 &= v61 - 1;
    }
    v99 = (_QWORD *)(*(_QWORD *)(a1 + 248) + 8 * v101);
    goto LABEL_214;
  }
LABEL_215:
  ++*(_QWORD *)(a1 + 272);
  return 1;
}

void sub_20EFE5FC8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_20EFE5FDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  uint64_t v11;
  va_list va;
  uint64_t v13;
  uint64_t v14;
  va_list va1;

  va_start(va1, a9);
  va_start(va, a9);
  v11 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  sub_20EFE9C7C((uint64_t)va);
  sub_20EB8188C(v9);
  sub_20EB8188C((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_20EFE6004(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_list va;

  va_start(va, a12);
  sub_20EB8188C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20EFE6018(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  uint64_t v12;
  va_list va;

  va_start(va, a12);
  sub_20EB8188C(v12);
  sub_20EB8188C((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20EFE6038(_QWORD *a1, int *a2, uint64_t a3, int64x2_t *a4, uint64_t a5, unsigned int a6, char a7, int a8, double a9, double a10, double a11, double a12)
{
  uint64_t *v24;
  _QWORD *v25;
  uint64_t *v26;
  uint64_t *v28;
  __int128 v29;
  uint64_t *v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  uint64_t *v34;
  uint64_t *v35;
  uint64_t *v36;
  uint64_t *v37;
  uint64_t *v38;
  uint64_t *v39;
  double v40;
  int64x2_t v41;
  int64x2_t v42;
  int64x2_t v43;
  __int128 v44;
  uint64_t v45;

  v24 = sub_20EB8DE00(a1 + 26, a2);
  if (!v24)
    goto LABEL_16;
  if (*((double *)v24 + 211) > a9)
    return 0;
  v25 = a1 + 31;
  v26 = sub_20EB8DE00(a1 + 31, a2);
  if (!v26)
    goto LABEL_16;
  if (*((double *)v26 + 16) > a9)
    return 0;
  v42 = a4[1];
  v43 = a4[2];
  v41 = *a4;
  v28 = sub_20EB8DE00(a1 + 31, a2);
  if (!v28)
    goto LABEL_16;
  *((_QWORD *)&v29 + 1) = v43.i64[1];
  *(_QWORD *)&v29 = v42.i64[0];
  *(_OWORD *)(v28 + 5) = v29;
  *(int64x2_t *)(v28 + 3) = vzip1q_s64(v41, v43);
  v30 = sub_20EB8DE00(a1 + 31, a2);
  if (!v30)
    goto LABEL_16;
  *(_OWORD *)(v30 + 7) = *(_OWORD *)a5;
  v31 = *(_OWORD *)(a5 + 16);
  v32 = *(_OWORD *)(a5 + 32);
  v33 = *(_OWORD *)(a5 + 48);
  v30[15] = *(_QWORD *)(a5 + 64);
  *(_OWORD *)(v30 + 13) = v33;
  *(_OWORD *)(v30 + 11) = v32;
  *(_OWORD *)(v30 + 9) = v31;
  v34 = sub_20EB8DE00(a1 + 31, a2);
  if (!v34
    || (*((double *)v34 + 16) = a9, (v35 = sub_20EB8DE00(a1 + 36, a2)) == 0)
    || (v36 = v35, (v37 = sub_20EB8DE00(v25, a2)) == 0)
    || (v38 = v37, (v39 = sub_20EB8DE00(v25, a2)) == 0))
  {
LABEL_16:
    sub_20E89FD20("unordered_map::at: key not found");
  }
  v44 = 0uLL;
  v45 = 0;
  sub_20E9733B8((float64x2_t *)(v39 + 7), (double *)&v44);
  if (*(_BYTE *)(a3 + 8))
    v40 = *(double *)a3;
  else
    v40 = 0.0;
  sub_20EFE3AB8((uint64_t)(v36 + 3), v38 + 3, &v44, a6, a7, a8, a9, a10, a11, v40, a12);
  return 1;
}

void sub_20EFE621C(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v4;
  unint64_t prime;
  _QWORD *i;
  double *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::ios_base *v12;
  uint64_t *v13;
  int64x2_t v14;
  int *v15;
  uint64_t *v16;
  uint64_t *v17;
  float64x2_t v18;
  float64x2_t v19;
  double v21;
  double v23;
  float64x2_t v25;
  float64x2_t v27;
  float64x2_t v29;
  float64x2_t v30;
  double v31;
  float64x2_t v32;
  float64x2_t v37;
  int v40;
  unint64_t v41;
  unint64_t v42;
  unsigned int v43;
  uint64_t v44;
  size_t v45;
  const char *v46;
  _QWORD *v47;
  _QWORD *v48;
  uint64_t *v49;
  uint64_t *v50;
  uint64_t *v51;
  int v52;
  float64x2_t v53;
  float64x2_t v54;
  float64x2_t v55;
  float64x2_t v56;
  float64x2_t v57;
  double v58;
  BOOL v59;
  float64x2_t v60;
  double v61;
  BOOL v62;
  int v63;
  unint64_t v64;
  unint64_t v65;
  uint64_t v66;
  const char *v67;
  size_t v68;
  unsigned __int8 v69;
  unsigned __int8 v70;
  const char *v71;
  size_t v72;
  char *v73;
  int v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  NSObject *v78;
  int v79;
  uint64_t v80;
  uint64_t v81;
  size_t v82;
  std::__shared_weak_count_vtbl *v83;
  std::__shared_weak_count *v84;
  std::__shared_weak_count *v85;
  unint64_t *p_shared_owners;
  unint64_t v87;
  unint64_t v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  __int128 v95;
  void *v96;
  std::__shared_weak_count *v97;
  unint64_t *v98;
  unint64_t v99;
  std::__shared_weak_count *v100;
  unint64_t *v101;
  unint64_t v102;
  uint64_t v103;
  std::__shared_weak_count *v104;
  unint64_t *v105;
  unint64_t v106;
  std::__shared_weak_count *v107;
  unint64_t *v108;
  unint64_t v109;
  std::__shared_weak_count *v110;
  unint64_t *v111;
  unint64_t v112;
  std::__shared_weak_count *v113;
  unint64_t *v114;
  unint64_t v115;
  void *v116;
  unsigned int v117;
  std::__shared_weak_count *v118;
  unint64_t *v119;
  unint64_t v120;
  unsigned __int8 v121;
  const char *v122;
  size_t v123;
  char *v124;
  uint64_t v125;
  uint64_t v126;
  char *v127;
  NSObject *v128;
  uint64_t v129;
  uint64_t v130;
  size_t v131;
  std::__shared_weak_count_vtbl *v132;
  std::__shared_weak_count *v133;
  std::__shared_weak_count *v134;
  unint64_t *v135;
  unint64_t v136;
  unint64_t v137;
  uint64_t v138;
  uint64_t v139;
  char *v140;
  uint64_t v141;
  const char *v142;
  uint64_t v143;
  __int128 v144;
  int v145;
  void *v146;
  std::__shared_weak_count *v147;
  unint64_t *v148;
  unint64_t v149;
  std::__shared_weak_count *v150;
  unint64_t *v151;
  unint64_t v152;
  uint64_t v153;
  std::__shared_weak_count *v154;
  unint64_t *v155;
  unint64_t v156;
  std::__shared_weak_count *v157;
  unint64_t *v158;
  unint64_t v159;
  std::__shared_weak_count *v160;
  unint64_t *v161;
  unint64_t v162;
  std::__shared_weak_count *v163;
  unint64_t *v164;
  unint64_t v165;
  void *v166;
  std::__shared_weak_count *v167;
  unint64_t *v168;
  unint64_t v169;
  uint64_t *v170;
  double v171;
  uint64_t *v172;
  int v173;
  unint64_t v174;
  unint64_t v175;
  _QWORD *v177;
  _QWORD *v178;
  _QWORD *v179;
  size_t v180;
  _BYTE *v181;
  unint64_t v182;
  const void **v183;
  const void *v184;
  uint64_t v185;
  uint64_t v186;
  _BYTE *v187;
  uint64_t v188;
  _QWORD *v189;
  size_t v190;
  void *v191;
  float64_t v192;
  const void **v193;
  const void *v194;
  uint64_t v195;
  uint64_t v196;
  void **v197;
  uint64_t v198;
  const char *v199;
  size_t v200;
  unsigned __int8 v201;
  const char *v202;
  size_t v203;
  _BYTE *v204;
  uint64_t v205;
  uint64_t v206;
  char *v207;
  uint64_t v208;
  uint64_t v209;
  NSObject *v210;
  size_t v211;
  std::__shared_weak_count_vtbl *v212;
  std::__shared_weak_count *v213;
  size_t v214;
  size_t v215;
  uint64_t *v216;
  void *v217;
  int v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  char v222;
  _QWORD *v223;
  uint64_t v224;
  std::__shared_weak_count *v225;
  unint64_t *v226;
  unint64_t v227;
  char *v228;
  unint64_t *v229;
  unint64_t v230;
  std::__shared_weak_count *v231;
  unint64_t *v232;
  unint64_t v233;
  unint64_t v234;
  std::__shared_weak_count *v235;
  unint64_t *v236;
  unint64_t v237;
  uint64_t v238;
  char *v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  const char *v243;
  uint64_t v244;
  std::__shared_weak_count *v245;
  unint64_t *v246;
  unint64_t v247;
  std::__shared_weak_count *v248;
  unint64_t *v249;
  unint64_t v250;
  uint64_t v251;
  std::__shared_weak_count *v252;
  unint64_t *v253;
  unint64_t v254;
  std::__shared_weak_count *v255;
  unint64_t *v256;
  unint64_t v257;
  std::__shared_weak_count *v258;
  unint64_t *v259;
  unint64_t v260;
  std::__shared_weak_count *v261;
  unint64_t *v262;
  unint64_t v263;
  void **v264;
  std::__shared_weak_count *v265;
  unint64_t *v266;
  unint64_t v267;
  uint64_t v268;
  uint64_t *j;
  uint64_t v270;
  uint64_t v271;
  _QWORD *__src;
  const char *__srca;
  const char *v274;
  int v275;
  uint64_t v276;
  unsigned __int16 v277;
  int v278;
  int v279;
  float64x2_t v280;
  float64x2_t v281;
  float64x2_t v282;
  _QWORD *v283;
  double v284;
  float64x2_t v285;
  double v286;
  float64x2_t v287;
  const char *v288;
  _QWORD *v289;
  int v290;
  void *v291[2];
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep rep;
  int v293;
  const char *v294;
  int v295;
  const char *v296;
  uint64_t v297;
  std::__shared_weak_count *v298;
  void *v299[2];
  int64_t v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  _QWORD v304[3];
  uint64_t v305;
  unint64_t v306;
  __int128 v307;
  __int128 v308;
  int v309;
  uint64_t v310[19];
  __int128 v311;
  std::__shared_weak_count *v312;
  char *v313;
  std::__shared_weak_count *v314;
  uint64_t *v315;
  __int128 v316;
  _OWORD object[3];
  float64x2_t v318;
  double v319;
  double v320;
  void *v321;
  char v322;
  double v323;
  int v324;
  uint64_t v325;
  _QWORD v326[2];
  _BYTE v327[24];
  __int128 v328;
  char *v329;
  const char *v330;
  unint64_t v331;
  std::__shared_weak_count *v332;
  uint64_t v333;

  v333 = *MEMORY[0x24BDAC8D0];
  v4 = *(_QWORD *)(a1 + 232);
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_DWORD *)(a2 + 32) = 1065353216;
  prime = (unint64_t)(float)v4;
  if (prime == 1)
  {
    prime = 2;
  }
  else
  {
    if ((prime & (prime - 1)) != 0)
      prime = std::__next_prime(prime);
    if (!prime)
      goto LABEL_7;
  }
  sub_20E8D2B3C(a2, prime);
LABEL_7:
  for (i = *(_QWORD **)(a1 + 224); i; i = (_QWORD *)*i)
  {
    *(_QWORD *)&object[0] = i[2];
    BYTE8(object[0]) = 0;
    sub_20EFEA18C(a2, (int *)object, (uint64_t)object);
  }
  v289 = (_QWORD *)(a1 + 248);
  v7 = (double *)(a1 + 264);
  while (1)
  {
    v7 = *(double **)v7;
    if (!v7)
      break;
    if (v7[16] - *(double *)(a1 + 328) < *(double *)(a1 + 16))
      return;
  }
  v8 = MEMORY[0x24BEDB870];
  v9 = MEMORY[0x24BEDB870] + 64;
  v10 = *(_QWORD *)(MEMORY[0x24BEDB800] + 8);
  v11 = *(_QWORD *)(MEMORY[0x24BEDB800] + 16);
  v310[0] = MEMORY[0x24BEDB870] + 64;
  v302 = v10;
  *(uint64_t *)((char *)&v302 + *(_QWORD *)(v10 - 24)) = v11;
  v12 = (std::ios_base *)((char *)&v302 + *(_QWORD *)(v302 - 24));
  v276 = a2;
  std::ios_base::init(v12, &v303);
  v12[1].__vftable = 0;
  v12[1].__fmtflags_ = -1;
  v302 = v8 + 24;
  v310[0] = v9;
  std::streambuf::basic_streambuf();
  v303 = MEMORY[0x24BEDB848] + 16;
  v307 = 0u;
  v308 = 0u;
  v309 = 16;
  v13 = *(uint64_t **)(a1 + 304);
  if (v13)
  {
    v283 = (_QWORD *)(a1 + 208);
    v14 = vdupq_n_s64(0x4066800000000000uLL);
    v281 = (float64x2_t)v14;
    v282 = (float64x2_t)vdupq_n_s64(0x400921FB54442D18uLL);
    v14.i64[0] = 0x400921FB54442D18;
    v280 = (float64x2_t)v14;
    do
    {
      sub_20EFE44D0((uint64_t)(v13 + 3), (uint64_t)object);
      v15 = (int *)(v13 + 2);
      if (LOBYTE(v318.f64[1]))
      {
        v16 = sub_20EB8DE00(v289, (int *)v13 + 4);
        if (!v16 || (v17 = sub_20EB8DE00(v283, (int *)v13 + 4)) == 0)
LABEL_422:
          sub_20E89FD20("unordered_map::at: key not found");
        *(_QWORD *)&v18.f64[0] = v17[5];
        _Q1 = *(float64x2_t *)(v17 + 3);
        v21 = *((double *)v17 + 8);
        _Q3 = *((float64x2_t *)v17 + 3);
        v23 = *((double *)v17 + 11);
        _Q5 = *(float64x2_t *)(v17 + 9);
        *(_QWORD *)&v19.f64[0] = v16[9];
        v25 = *(float64x2_t *)(v16 + 7);
        _D16 = *((double *)v16 + 12);
        v27 = *((float64x2_t *)v16 + 5);
        _D18 = *((double *)v16 + 15);
        v29 = *(float64x2_t *)(v16 + 13);
        v30 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v25, _Q1.f64[0]), v27, _Q3.f64[0]), v29, _Q5.f64[0]);
        v31 = vmlad_n_f64(vmlad_n_f64(v19.f64[0] * _Q1.f64[0], _D16, _Q3.f64[0]), _D18, _Q5.f64[0]);
        v32 = vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(v25, _Q1, 1), v27, _Q3, 1), v29, _Q5, 1);
        __asm
        {
          FMLA            D1, D16, V3.D[1]
          FMLA            D1, D18, V5.D[1]
        }
        object[0] = v30;
        *(float64x2_t *)((char *)&object[1] + 8) = v32;
        *(double *)&object[1] = v31;
        *((_QWORD *)&object[2] + 1) = *(_QWORD *)&_Q1.f64[0];
        v318 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v25, v18.f64[0]), v27, v21), v29, v23);
        v319 = vmulq_f64(v19, v18).f64[0] + _D16 * v21 + _D18 * v23;
        memset(v327, 0, sizeof(v327));
        sub_20E9733B8((float64x2_t *)object, (double *)v327);
        _Q0.f64[0] = *(float64_t *)&v327[16];
        v37.f64[1] = v282.f64[1];
        v37.f64[0] = 180.0;
        _Q1 = vmulq_f64(vdivq_f64(*(float64x2_t *)v327, v282), v281);
        _D8 = _Q1.f64[1];
        *(_QWORD *)&v284 = *(_OWORD *)&vmulq_f64(vdivq_f64(_Q0, v280), v37);
        v286 = _Q1.f64[0];
        __asm { FMLA            D0, D8, V1.D[1] }
        if (vmlad_n_f64(_Q0.f64[0], v284, v284) > *(double *)(a1 + 48) * *(double *)(a1 + 48))
        {
          if (*v15 >= 0x10000
            && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/ComputerVisionTypes/include/VIO/ComputerVisionTypes/CameraStreamId.h", 49, (uint64_t)"camera_id <= 0xffff", 19, (uint64_t)"Camera ID cannot exceeds 16 bits", 32, (void (*)(void **))sub_21023DDB0)|| *((_DWORD *)v13 + 5) >= 0x10000u&& sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/ComputerVisionTypes/include/VIO/ComputerVisionTypes/CameraStreamId.h", 50, (uint64_t)"stream_id <= 0xffff", 19, (uint64_t)"Stream ID cannot exceeds 16 bits", 32, (void (*)(void **))sub_21023DDB0))
          {
            goto LABEL_425;
          }
          kdebug_trace();
          sub_20EFE8688(&v315);
          if (*(int *)v315[7] > 2)
            goto LABEL_148;
          v40 = *((unsigned __int8 *)v315 + 72);
          v41 = sub_20E8C31DC((uint64_t)v315, "OSLogSurrogateAppender", 1, 0);
          v42 = v41;
          if (!v40 && !v41)
            goto LABEL_148;
          *(_QWORD *)v327 = &v315;
          *(std::chrono::steady_clock::time_point *)&v327[8] = std::chrono::steady_clock::now();
          *(std::chrono::system_clock::time_point *)&v327[16] = std::chrono::system_clock::now();
          LODWORD(v328) = 2;
          *((_QWORD *)&v328 + 1) = "unknown file";
          LODWORD(v329) = 205;
          v330 = "unknown function";
          v331 = 0;
          v332 = 0;
          if (*v15 >= 0x10000
            && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/ComputerVisionTypes/include/VIO/ComputerVisionTypes/CameraStreamId.h", 49, (uint64_t)"camera_id <= 0xffff", 19, (uint64_t)"Camera ID cannot exceeds 16 bits", 32, (void (*)(void **))sub_21023DDB0))
          {
LABEL_426:
            abort();
          }
          v43 = *((_DWORD *)v13 + 5);
          if (v43 >= 0x10000)
          {
            if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/ComputerVisionTypes/include/VIO/ComputerVisionTypes/CameraStreamId.h", 50, (uint64_t)"stream_id <= 0xffff", 19, (uint64_t)"Stream ID cannot exceeds 16 bits", 32, (void (*)(void **))sub_21023DDB0))
            {
              goto LABEL_426;
            }
            LOWORD(v43) = *((_WORD *)v13 + 10);
          }
          v277 = v43;
          v44 = **(_QWORD **)v327;
          if (*(char *)(**(_QWORD **)v327 + 39) < 0)
          {
            v46 = *(const char **)(v44 + 16);
            v45 = *(_QWORD *)(v44 + 24);
          }
          else
          {
            v45 = *(unsigned __int8 *)(**(_QWORD **)v327 + 39);
            v46 = (const char *)(v44 + 16);
          }
          v270 = **(_QWORD **)v327;
          v271 = v44 + 16;
          v275 = *v15;
          v70 = atomic_load((unsigned __int8 *)&qword_254A4A510);
          if ((v70 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
          {
            sub_20E9E46F8((uint64_t)v291);
            sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)v291);
            if ((_BYTE)v293 && SHIBYTE(rep) < 0)
              operator delete(v291[0]);
            __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
            __cxa_guard_release(&qword_254A4A510);
          }
          if (byte_254A4A4F8[23] >= 0)
            v71 = byte_254A4A4F8;
          else
            v71 = *(const char **)byte_254A4A4F8;
          if (byte_254A4A4F8[23] >= 0)
            v72 = byte_254A4A4F8[23];
          else
            v72 = *(_QWORD *)&byte_254A4A4F8[8];
          *(_QWORD *)&object[0] = os_log_create(v71, v46);
          if (v72 > 0x7FFFFFFFFFFFFFF7)
            sub_20E860B7C();
          __srca = v46;
          if (v72 >= 0x17)
          {
            v74 = v40;
            v75 = (v72 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v72 | 7) != 0x17)
              v75 = v72 | 7;
            v76 = v75 + 1;
            v73 = (char *)operator new(v75 + 1);
            *((_QWORD *)&object[1] + 1) = v76 | 0x8000000000000000;
            *((_QWORD *)&object[0] + 1) = v73;
            *(_QWORD *)&object[1] = v72;
            v40 = v74;
          }
          else
          {
            HIBYTE(object[1]) = v72;
            v73 = (char *)object + 8;
            if (!v72)
            {
LABEL_75:
              v73[v72] = 0;
              LOBYTE(object[2]) = 1;
              if (v45 > 0x7FFFFFFFFFFFFFF7)
                sub_20E860B7C();
              a2 = v276;
              if (v45 >= 0x17)
              {
                v79 = v40;
                v80 = (v45 & 0xFFFFFFFFFFFFFFF8) + 8;
                if ((v45 | 7) != 0x17)
                  v80 = v45 | 7;
                v81 = v80 + 1;
                v77 = (char *)operator new(v80 + 1);
                *(_QWORD *)&v318.f64[1] = v81 | 0x8000000000000000;
                *((_QWORD *)&object[2] + 1) = v77;
                *(_QWORD *)&v318.f64[0] = v45;
                v40 = v79;
              }
              else
              {
                HIBYTE(v318.f64[1]) = v45;
                v77 = (char *)&object[2] + 8;
                if (!v45)
                {
                  BYTE8(object[2]) = 0;
                  LOBYTE(v319) = 1;
                  v78 = *(NSObject **)&object[0];
                  if ((SHIBYTE(v318.f64[1]) & 0x80000000) == 0)
                    goto LABEL_79;
LABEL_85:
                  operator delete(*((void **)&object[2] + 1));
                  if (LOBYTE(object[2]))
                    goto LABEL_86;
                  goto LABEL_88;
                }
              }
              memmove(v77, __srca, v45);
              v77[v45] = 0;
              LOBYTE(v319) = 1;
              v78 = *(NSObject **)&object[0];
              if (SHIBYTE(v318.f64[1]) < 0)
                goto LABEL_85;
LABEL_79:
              if (LOBYTE(object[2]))
              {
LABEL_86:
                if (SHIBYTE(object[1]) < 0)
                  operator delete(*((void **)&object[0] + 1));
              }
LABEL_88:
              if (*(_QWORD *)&object[0])
                os_release(*(void **)&object[0]);
              v279 = v277 | ((unsigned __int16)v275 << 16);
              if (v42 && *(_QWORD *)(v42 + 24))
              {
                v82 = _os_log_pack_size();
                v83 = (std::__shared_weak_count_vtbl *)operator new(v82, (std::align_val_t)8uLL);
                v84 = (std::__shared_weak_count *)operator new();
                v85 = v84;
                v84->__shared_owners_ = 0;
                p_shared_owners = (unint64_t *)&v84->__shared_owners_;
                v84->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
                v84->__shared_weak_owners_ = 0;
                v84[1].__vftable = v83;
                *(_QWORD *)&object[0] = v83;
                *((_QWORD *)&object[0] + 1) = v83;
                *(_QWORD *)&object[1] = v84;
                do
                  v87 = __ldxr(p_shared_owners);
                while (__stxr(v87 + 1, p_shared_owners));
                memset((char *)&object[1] + 8, 0, 24);
                do
                  v88 = __ldaxr(p_shared_owners);
                while (__stlxr(v88 - 1, p_shared_owners));
                if (!v88)
                {
                  ((void (*)(std::__shared_weak_count *))v84->__on_zero_shared)(v84);
                  std::__shared_weak_count::__release_weak(v85);
                }
                v89 = *(_QWORD *)&object[0];
                v90 = _os_log_pack_fill();
                *(_DWORD *)v90 = 67109888;
                *(_DWORD *)(v90 + 4) = v279;
                *(_WORD *)(v90 + 8) = 2048;
                *(double *)(v90 + 10) = v286;
                *(_WORD *)(v90 + 18) = 2048;
                *(double *)(v90 + 20) = _D8;
                *(_WORD *)(v90 + 28) = 2048;
                *(double *)(v90 + 30) = v284;
                v91 = (char *)operator new();
                v92 = *(unsigned __int8 *)(v270 + 39);
                v93 = *(_QWORD *)(v270 + 16);
                v94 = *(_QWORD *)(v270 + 24);
                v95 = *(_OWORD *)((char *)&object[1] + 8);
                *(_OWORD *)(v91 + 8) = *(_OWORD *)((char *)object + 8);
                if ((v92 & 0x80u) != 0)
                  v92 = v94;
                else
                  v93 = v271;
                *(_QWORD *)v91 = v89;
                *((_QWORD *)&object[0] + 1) = 0;
                *(_QWORD *)&object[1] = 0;
                *(_OWORD *)(v91 + 24) = v95;
                *((_QWORD *)&object[1] + 1) = 0;
                *(_QWORD *)&object[2] = 0;
                *((_QWORD *)v91 + 5) = v93;
                *((_QWORD *)v91 + 6) = v92;
                v91[56] = 2;
                *(_QWORD *)&v311 = 0;
                v291[0] = v91;
                (*(void (**)(_QWORD, void **))(**(_QWORD **)(v42 + 24) + 40))(*(_QWORD *)(v42 + 24), v291);
                v96 = v291[0];
                v291[0] = 0;
                if (v96)
                {
                  v97 = (std::__shared_weak_count *)*((_QWORD *)v96 + 4);
                  if (v97)
                  {
                    v98 = (unint64_t *)&v97->__shared_owners_;
                    do
                      v99 = __ldaxr(v98);
                    while (__stlxr(v99 - 1, v98));
                    if (!v99)
                    {
                      ((void (*)(std::__shared_weak_count *))v97->__on_zero_shared)(v97);
                      std::__shared_weak_count::__release_weak(v97);
                    }
                  }
                  v100 = (std::__shared_weak_count *)*((_QWORD *)v96 + 2);
                  if (v100)
                  {
                    v101 = (unint64_t *)&v100->__shared_owners_;
                    do
                      v102 = __ldaxr(v101);
                    while (__stlxr(v102 - 1, v101));
                    if (!v102)
                    {
                      ((void (*)(std::__shared_weak_count *))v100->__on_zero_shared)(v100);
                      std::__shared_weak_count::__release_weak(v100);
                    }
                  }
                  MEMORY[0x212BC6398](v96, 0x10F0C40B62ED6C6);
                  v103 = v311;
                  *(_QWORD *)&v311 = 0;
                  if (v103)
                  {
                    v104 = *(std::__shared_weak_count **)(v103 + 32);
                    if (v104)
                    {
                      v105 = (unint64_t *)&v104->__shared_owners_;
                      do
                        v106 = __ldaxr(v105);
                      while (__stlxr(v106 - 1, v105));
                      if (!v106)
                      {
                        ((void (*)(std::__shared_weak_count *))v104->__on_zero_shared)(v104);
                        std::__shared_weak_count::__release_weak(v104);
                      }
                    }
                    v107 = *(std::__shared_weak_count **)(v103 + 16);
                    if (v107)
                    {
                      v108 = (unint64_t *)&v107->__shared_owners_;
                      do
                        v109 = __ldaxr(v108);
                      while (__stlxr(v109 - 1, v108));
                      if (!v109)
                      {
                        ((void (*)(std::__shared_weak_count *))v107->__on_zero_shared)(v107);
                        std::__shared_weak_count::__release_weak(v107);
                      }
                    }
                    MEMORY[0x212BC6398](v103, 0x10F0C40B62ED6C6);
                  }
                }
                v110 = *(std::__shared_weak_count **)&object[2];
                if (*(_QWORD *)&object[2])
                {
                  v111 = (unint64_t *)(*(_QWORD *)&object[2] + 8);
                  do
                    v112 = __ldaxr(v111);
                  while (__stlxr(v112 - 1, v111));
                  if (!v112)
                  {
                    ((void (*)(std::__shared_weak_count *))v110->__on_zero_shared)(v110);
                    std::__shared_weak_count::__release_weak(v110);
                  }
                }
                v113 = *(std::__shared_weak_count **)&object[1];
                if (*(_QWORD *)&object[1])
                {
                  v114 = (unint64_t *)(*(_QWORD *)&object[1] + 8);
                  do
                    v115 = __ldaxr(v114);
                  while (__stlxr(v115 - 1, v114));
                  if (!v115)
                  {
                    ((void (*)(std::__shared_weak_count *))v113->__on_zero_shared)(v113);
                    std::__shared_weak_count::__release_weak(v113);
                  }
                }
              }
              else
              {
                os_log_type_enabled(v78, OS_LOG_TYPE_DEBUG);
                LODWORD(object[0]) = 67109888;
                DWORD1(object[0]) = v279;
                WORD4(object[0]) = 2048;
                *(double *)((char *)object + 10) = v286;
                WORD1(object[1]) = 2048;
                *(double *)((char *)&object[1] + 4) = _D8;
                WORD6(object[1]) = 2048;
                *(double *)((char *)&object[1] + 14) = v284;
                v116 = (void *)_os_log_send_and_compose_impl();
                if (v116)
                  free(v116);
              }
              if (v40)
              {
                if (*v15 >= 0x10000
                  && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/ComputerVisionTypes/include/VIO/ComputerVisionTypes/CameraStreamId.h", 49, (uint64_t)"camera_id <= 0xffff", 19, (uint64_t)"Camera ID cannot exceeds 16 bits", 32, (void (*)(void **))sub_21023DDB0))
                {
LABEL_431:
                  abort();
                }
                v117 = *((_DWORD *)v13 + 5);
                if (v117 >= 0x10000)
                {
                  if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/ComputerVisionTypes/include/VIO/ComputerVisionTypes/CameraStreamId.h", 50, (uint64_t)"stream_id <= 0xffff", 19, (uint64_t)"Stream ID cannot exceeds 16 bits", 32, (void (*)(void **))sub_21023DDB0))
                  {
                    goto LABEL_431;
                  }
                  LOWORD(v117) = *((_WORD *)v13 + 10);
                }
                sub_20E8C003C((uint64_t)v327, "CCD: ChangeDetectorResultExtrinsics: SourceID %u, Rx %f, Ry %f, Rz %f", (unsigned __int16)v117 | ((unsigned __int16)*v15 << 16), v286, _D8, v284);
                sub_20E863570((uint64_t)v327);
              }
              sub_20E863570((uint64_t)v327);
              v118 = v332;
              if (v332)
              {
                v119 = (unint64_t *)&v332->__shared_owners_;
                do
                  v120 = __ldaxr(v119);
                while (__stlxr(v120 - 1, v119));
                if (!v120)
                {
                  ((void (*)(std::__shared_weak_count *))v118->__on_zero_shared)(v118);
                  std::__shared_weak_count::__release_weak(v118);
                }
              }
LABEL_148:
              *(_QWORD *)&object[0] = v13 + 2;
              *((_BYTE *)sub_20EFEA530(a2, (int *)v13 + 4, (_QWORD **)object) + 24) = 2;
              goto LABEL_233;
            }
          }
          memmove(v73, v71, v72);
          goto LABEL_75;
        }
        v49 = sub_20EB8DE00(v289, (int *)v13 + 4);
        if (!v49)
          goto LABEL_422;
        v50 = sub_20EB8DE00(v283, (int *)v13 + 4);
        if (!v50)
          goto LABEL_422;
        if (*((_BYTE *)v50 + 1560))
          v51 = v50 + 15;
        else
          v51 = 0;
        v52 = *((_DWORD *)v51 + 248);
        if (v52 == -1)
        {
          if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Util/include/VIO/Util/Variant.h", 255, (uint64_t)"!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
          {
            goto LABEL_425;
          }
          v52 = *((_DWORD *)v51 + 248);
        }
        if (!v52)
        {
          sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Geometry/include/VIO/Geometry/LensModel.h", 1745, (uint64_t)"", 0, (uint64_t)"Empty variant lens model invoked.", 33, (void (*)(void **))sub_21023DDB0);
LABEL_425:
          abort();
        }
        v53 = *((float64x2_t *)v51 + 1);
        v54 = (float64x2_t)vzip1q_s64(*(int64x2_t *)v51, *((int64x2_t *)v51 + 2));
        *(_QWORD *)&v53.f64[1] = v51[5];
        v55 = *(float64x2_t *)(v49 + 3);
        v56 = vsubq_f64(*(float64x2_t *)(v49 + 5), v53);
        v57 = vabdq_f64(v55, v54);
        v58 = *(double *)(a1 + 32);
        v59 = v57.f64[0] <= v58 && v57.f64[1] <= v58;
        if (!v59
          || ((v60 = vabsq_f64(v56), v61 = *(double *)(a1 + 40), v60.f64[0] <= v61)
            ? (v62 = v60.f64[1] <= v61)
            : (v62 = 0),
              !v62))
        {
          v285 = vsubq_f64(v55, v54);
          v287 = v56;
          kdebug_trace();
          sub_20EFE8688(&v315);
          if (*(int *)v315[7] > 2)
            goto LABEL_232;
          v63 = *((unsigned __int8 *)v315 + 72);
          v64 = sub_20E8C31DC((uint64_t)v315, "OSLogSurrogateAppender", 1, 0);
          v65 = v64;
          if (!v63 && !v64)
            goto LABEL_232;
          v278 = v63;
          *(_QWORD *)v327 = &v315;
          *(std::chrono::steady_clock::time_point *)&v327[8] = std::chrono::steady_clock::now();
          *(std::chrono::system_clock::time_point *)&v327[16] = std::chrono::system_clock::now();
          LODWORD(v328) = 2;
          *((_QWORD *)&v328 + 1) = "unknown file";
          LODWORD(v329) = 188;
          v330 = "unknown function";
          v331 = 0;
          v332 = 0;
          v66 = **(_QWORD **)v327;
          v67 = (const char *)(**(_QWORD **)v327 + 16);
          v274 = v67;
          if (*(char *)(**(_QWORD **)v327 + 39) < 0)
          {
            v67 = *(const char **)(v66 + 16);
            v68 = *(_QWORD *)(v66 + 24);
            __src = **(_QWORD ***)v327;
            v121 = atomic_load((unsigned __int8 *)&qword_254A4A510);
            if ((v121 & 1) == 0)
            {
LABEL_243:
              if (__cxa_guard_acquire(&qword_254A4A510))
              {
                sub_20E9E46F8((uint64_t)v291);
                sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)v291);
                if ((_BYTE)v293 && SHIBYTE(rep) < 0)
                  operator delete(v291[0]);
                __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
                __cxa_guard_release(&qword_254A4A510);
              }
            }
          }
          else
          {
            v68 = *(unsigned __int8 *)(**(_QWORD **)v327 + 39);
            __src = **(_QWORD ***)v327;
            v69 = atomic_load((unsigned __int8 *)&qword_254A4A510);
            if ((v69 & 1) == 0)
              goto LABEL_243;
          }
          if (byte_254A4A4F8[23] >= 0)
            v122 = byte_254A4A4F8;
          else
            v122 = *(const char **)byte_254A4A4F8;
          if (byte_254A4A4F8[23] >= 0)
            v123 = byte_254A4A4F8[23];
          else
            v123 = *(_QWORD *)&byte_254A4A4F8[8];
          *(_QWORD *)&object[0] = os_log_create(v122, v67);
          if (v123 > 0x7FFFFFFFFFFFFFF7)
            sub_20E860B7C();
          if (v123 >= 0x17)
          {
            v125 = (v123 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v123 | 7) != 0x17)
              v125 = v123 | 7;
            v126 = v125 + 1;
            v124 = (char *)operator new(v125 + 1);
            *((_QWORD *)&object[1] + 1) = v126 | 0x8000000000000000;
            *((_QWORD *)&object[0] + 1) = v124;
            *(_QWORD *)&object[1] = v123;
          }
          else
          {
            HIBYTE(object[1]) = v123;
            v124 = (char *)object + 8;
            if (!v123)
            {
LABEL_164:
              v124[v123] = 0;
              LOBYTE(object[2]) = 1;
              if (v68 > 0x7FFFFFFFFFFFFFF7)
                sub_20E860B7C();
              a2 = v276;
              if (v68 >= 0x17)
              {
                v129 = (v68 & 0xFFFFFFFFFFFFFFF8) + 8;
                if ((v68 | 7) != 0x17)
                  v129 = v68 | 7;
                v130 = v129 + 1;
                v127 = (char *)operator new(v129 + 1);
                *(_QWORD *)&v318.f64[1] = v130 | 0x8000000000000000;
                *((_QWORD *)&object[2] + 1) = v127;
                *(_QWORD *)&v318.f64[0] = v68;
              }
              else
              {
                HIBYTE(v318.f64[1]) = v68;
                v127 = (char *)&object[2] + 8;
                if (!v68)
                {
                  BYTE8(object[2]) = 0;
                  LOBYTE(v319) = 1;
                  v128 = *(NSObject **)&object[0];
                  if ((SHIBYTE(v318.f64[1]) & 0x80000000) == 0)
                    goto LABEL_168;
LABEL_174:
                  operator delete(*((void **)&object[2] + 1));
                  if (LOBYTE(object[2]))
                    goto LABEL_175;
                  goto LABEL_177;
                }
              }
              memmove(v127, v67, v68);
              v127[v68] = 0;
              LOBYTE(v319) = 1;
              v128 = *(NSObject **)&object[0];
              if (SHIBYTE(v318.f64[1]) < 0)
                goto LABEL_174;
LABEL_168:
              if (LOBYTE(object[2]))
              {
LABEL_175:
                if (SHIBYTE(object[1]) < 0)
                  operator delete(*((void **)&object[0] + 1));
              }
LABEL_177:
              if (*(_QWORD *)&object[0])
                os_release(*(void **)&object[0]);
              if (v65 && *(_QWORD *)(v65 + 24))
              {
                v131 = _os_log_pack_size();
                v132 = (std::__shared_weak_count_vtbl *)operator new(v131, (std::align_val_t)8uLL);
                v133 = (std::__shared_weak_count *)operator new();
                v134 = v133;
                v133->__shared_owners_ = 0;
                v135 = (unint64_t *)&v133->__shared_owners_;
                v133->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
                v133->__shared_weak_owners_ = 0;
                v133[1].__vftable = v132;
                *(_QWORD *)&object[0] = v132;
                *((_QWORD *)&object[0] + 1) = v132;
                *(_QWORD *)&object[1] = v133;
                do
                  v136 = __ldxr(v135);
                while (__stxr(v136 + 1, v135));
                memset((char *)&object[1] + 8, 0, 24);
                do
                  v137 = __ldaxr(v135);
                while (__stlxr(v137 - 1, v135));
                if (!v137)
                {
                  ((void (*)(std::__shared_weak_count *))v133->__on_zero_shared)(v133);
                  std::__shared_weak_count::__release_weak(v134);
                }
                v138 = *(_QWORD *)&object[0];
                v139 = _os_log_pack_fill();
                *(_DWORD *)v139 = 134218752;
                *(float64_t *)(v139 + 4) = v285.f64[0];
                *(_WORD *)(v139 + 12) = 2048;
                *(float64_t *)(v139 + 14) = v285.f64[1];
                *(_WORD *)(v139 + 22) = 2048;
                *(float64_t *)(v139 + 24) = v287.f64[0];
                *(_WORD *)(v139 + 32) = 2048;
                *(float64_t *)(v139 + 34) = v287.f64[1];
                v140 = (char *)operator new();
                v141 = *((unsigned __int8 *)__src + 39);
                v142 = (const char *)__src[2];
                v143 = __src[3];
                v144 = *(_OWORD *)((char *)&object[1] + 8);
                *(_OWORD *)(v140 + 8) = *(_OWORD *)((char *)object + 8);
                if ((v141 & 0x80u) != 0)
                  v141 = v143;
                else
                  v142 = v274;
                *(_QWORD *)v140 = v138;
                *((_QWORD *)&object[0] + 1) = 0;
                *(_QWORD *)&object[1] = 0;
                *(_OWORD *)(v140 + 24) = v144;
                *((_QWORD *)&object[1] + 1) = 0;
                *(_QWORD *)&object[2] = 0;
                *((_QWORD *)v140 + 5) = v142;
                *((_QWORD *)v140 + 6) = v141;
                v140[56] = 2;
                *(_QWORD *)&v311 = 0;
                v291[0] = v140;
                (*(void (**)(_QWORD, void **))(**(_QWORD **)(v65 + 24) + 40))(*(_QWORD *)(v65 + 24), v291);
                v145 = v278;
                v146 = v291[0];
                v291[0] = 0;
                if (v146)
                {
                  v147 = (std::__shared_weak_count *)*((_QWORD *)v146 + 4);
                  if (v147)
                  {
                    v148 = (unint64_t *)&v147->__shared_owners_;
                    do
                      v149 = __ldaxr(v148);
                    while (__stlxr(v149 - 1, v148));
                    if (!v149)
                    {
                      ((void (*)(std::__shared_weak_count *))v147->__on_zero_shared)(v147);
                      std::__shared_weak_count::__release_weak(v147);
                    }
                  }
                  v150 = (std::__shared_weak_count *)*((_QWORD *)v146 + 2);
                  if (v150)
                  {
                    v151 = (unint64_t *)&v150->__shared_owners_;
                    do
                      v152 = __ldaxr(v151);
                    while (__stlxr(v152 - 1, v151));
                    if (!v152)
                    {
                      ((void (*)(std::__shared_weak_count *))v150->__on_zero_shared)(v150);
                      std::__shared_weak_count::__release_weak(v150);
                    }
                  }
                  MEMORY[0x212BC6398](v146, 0x10F0C40B62ED6C6);
                  v153 = v311;
                  *(_QWORD *)&v311 = 0;
                  if (v153)
                  {
                    v154 = *(std::__shared_weak_count **)(v153 + 32);
                    if (v154)
                    {
                      v155 = (unint64_t *)&v154->__shared_owners_;
                      do
                        v156 = __ldaxr(v155);
                      while (__stlxr(v156 - 1, v155));
                      if (!v156)
                      {
                        ((void (*)(std::__shared_weak_count *))v154->__on_zero_shared)(v154);
                        std::__shared_weak_count::__release_weak(v154);
                      }
                    }
                    v157 = *(std::__shared_weak_count **)(v153 + 16);
                    if (v157)
                    {
                      v158 = (unint64_t *)&v157->__shared_owners_;
                      do
                        v159 = __ldaxr(v158);
                      while (__stlxr(v159 - 1, v158));
                      if (!v159)
                      {
                        ((void (*)(std::__shared_weak_count *))v157->__on_zero_shared)(v157);
                        std::__shared_weak_count::__release_weak(v157);
                      }
                    }
                    MEMORY[0x212BC6398](v153, 0x10F0C40B62ED6C6);
                  }
                }
                v160 = *(std::__shared_weak_count **)&object[2];
                if (*(_QWORD *)&object[2])
                {
                  v161 = (unint64_t *)(*(_QWORD *)&object[2] + 8);
                  do
                    v162 = __ldaxr(v161);
                  while (__stlxr(v162 - 1, v161));
                  if (!v162)
                  {
                    ((void (*)(std::__shared_weak_count *))v160->__on_zero_shared)(v160);
                    std::__shared_weak_count::__release_weak(v160);
                  }
                }
                v163 = *(std::__shared_weak_count **)&object[1];
                if (*(_QWORD *)&object[1])
                {
                  v164 = (unint64_t *)(*(_QWORD *)&object[1] + 8);
                  do
                    v165 = __ldaxr(v164);
                  while (__stlxr(v165 - 1, v164));
                  if (!v165)
                  {
                    ((void (*)(std::__shared_weak_count *))v163->__on_zero_shared)(v163);
                    std::__shared_weak_count::__release_weak(v163);
                  }
                }
              }
              else
              {
                os_log_type_enabled(v128, OS_LOG_TYPE_DEBUG);
                LODWORD(object[0]) = 134218752;
                *(float64_t *)((char *)object + 4) = v285.f64[0];
                WORD6(object[0]) = 2048;
                *(float64_t *)((unint64_t)object | 0xE) = v285.f64[1];
                WORD3(object[1]) = 2048;
                *((_QWORD *)&object[1] + 1) = *(_QWORD *)&v287.f64[0];
                LOWORD(object[2]) = 2048;
                *(float64_t *)((char *)&object[2] + 2) = v287.f64[1];
                v166 = (void *)_os_log_send_and_compose_impl();
                v145 = v278;
                if (v166)
                  free(v166);
              }
              if (v145)
              {
                sub_20E8C003C((uint64_t)v327, "CCD: ChangeDetectorResultIntrinsics: Fx %f, Fy %f, Cx %f, Cy %f", v285.f64[0], v285.f64[1], v287.f64[0], v287.f64[1]);
                sub_20E863570((uint64_t)v327);
              }
              sub_20E863570((uint64_t)v327);
              v167 = v332;
              if (v332)
              {
                v168 = (unint64_t *)&v332->__shared_owners_;
                do
                  v169 = __ldaxr(v168);
                while (__stlxr(v169 - 1, v168));
                if (!v169)
                {
                  ((void (*)(std::__shared_weak_count *))v167->__on_zero_shared)(v167);
                  std::__shared_weak_count::__release_weak(v167);
                }
              }
LABEL_232:
              *(_QWORD *)&object[0] = v13 + 2;
              *((_BYTE *)sub_20EFEA530(a2, (int *)v13 + 4, (_QWORD **)object) + 24) = 3;
              goto LABEL_233;
            }
          }
          memmove(v124, v122, v123);
          goto LABEL_164;
        }
        *(_QWORD *)&object[0] = v13 + 2;
        *((_BYTE *)sub_20EFEA530(a2, (int *)v13 + 4, (_QWORD **)object) + 24) = 1;
      }
      else
      {
        *(_QWORD *)&object[0] = v13 + 2;
        *((_BYTE *)sub_20EFEA530(a2, (int *)v13 + 4, (_QWORD **)object) + 24) = 0;
        sub_20E86A980(&v302, (uint64_t)"[", 1);
        v47 = (_QWORD *)std::ostream::operator<<();
        sub_20E86A980(v47, (uint64_t)":", 1);
        v48 = (_QWORD *)std::ostream::operator<<();
        sub_20E86A980(v48, (uint64_t)"]", 1);
      }
LABEL_233:
      v170 = sub_20EB8DE00(v289, (int *)v13 + 4);
      if (!v170)
        sub_20E89FD20("unordered_map::at: key not found");
      v171 = *(double *)(a1 + 328);
      if (v171 < *((double *)v170 + 16))
        v171 = *((double *)v170 + 16);
      *(double *)(a1 + 328) = v171;
      v13 = (uint64_t *)*v13;
    }
    while (v13);
  }
  v172 = *(uint64_t **)(a2 + 16);
  if (v172)
  {
    while (*((_BYTE *)v172 + 24))
    {
      v172 = (uint64_t *)*v172;
      if (!v172)
        goto LABEL_419;
    }
    sub_20EFE8688(&v301);
    if (**(int **)(v301 + 56) > 2)
      goto LABEL_416;
    v173 = *(unsigned __int8 *)(v301 + 72);
    v174 = sub_20E8C31DC(v301, "OSLogSurrogateAppender", 1, 0);
    v175 = v174;
    if (!v173 && v174 == 0)
      goto LABEL_416;
    sub_20E863438((uint64_t)object);
    v177 = sub_20E86A980(&object[1], (uint64_t)"CCD: ", 5);
    LOBYTE(v291[0]) = 0;
    v178 = sub_20EFE877C(v177, v291);
    v179 = sub_20E86A980(v178, (uint64_t)": waiting for ", 14);
    if ((v309 & 0x10) != 0)
    {
      v182 = *((_QWORD *)&v308 + 1);
      if (*((_QWORD *)&v308 + 1) < v306)
      {
        *((_QWORD *)&v308 + 1) = v306;
        v182 = v306;
      }
      v183 = (const void **)&v305;
    }
    else
    {
      if ((v309 & 8) == 0)
      {
        v180 = 0;
        v327[23] = 0;
        v181 = v327;
        goto LABEL_272;
      }
      v183 = (const void **)v304;
      v182 = v304[2];
    }
    v184 = *v183;
    v180 = v182 - (_QWORD)*v183;
    if (v180 > 0x7FFFFFFFFFFFFFF7)
      sub_20E860B7C();
    if (v180 >= 0x17)
    {
      v185 = (v180 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v180 | 7) != 0x17)
        v185 = v180 | 7;
      v186 = v185 + 1;
      v181 = operator new(v185 + 1);
      *(_QWORD *)&v327[8] = v180;
      *(_QWORD *)&v327[16] = v186 | 0x8000000000000000;
      *(_QWORD *)v327 = v181;
    }
    else
    {
      v327[23] = v182 - *(_BYTE *)v183;
      v181 = v327;
      if (!v180)
      {
LABEL_272:
        v181[v180] = 0;
        if (v327[23] >= 0)
          v187 = v327;
        else
          v187 = *(_BYTE **)v327;
        if (v327[23] >= 0)
          v188 = v327[23];
        else
          v188 = *(_QWORD *)&v327[8];
        v189 = sub_20E86A980(v179, (uint64_t)v187, v188);
        sub_20E86A980(v189, (uint64_t)" to converge", 12);
        if ((v327[23] & 0x80000000) != 0)
          operator delete(*(void **)v327);
        v290 = v173;
        if ((v324 & 0x10) != 0)
        {
          v192 = v323;
          if (*(_QWORD *)&v323 < *(_QWORD *)&v320)
          {
            v323 = v320;
            v192 = v320;
          }
          v193 = (const void **)&v319;
        }
        else
        {
          if ((v324 & 8) == 0)
          {
            v190 = 0;
            HIBYTE(v300) = 0;
            v191 = v299;
            goto LABEL_295;
          }
          v193 = (const void **)&object[2] + 1;
          v192 = v318.f64[1];
        }
        v194 = *v193;
        v190 = *(_QWORD *)&v192 - (_QWORD)*v193;
        if (v190 > 0x7FFFFFFFFFFFFFF7)
          sub_20E860B7C();
        if (v190 >= 0x17)
        {
          v195 = (v190 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v190 | 7) != 0x17)
            v195 = v190 | 7;
          v196 = v195 + 1;
          v191 = operator new(v195 + 1);
          v299[1] = (void *)v190;
          v300 = v196 | 0x8000000000000000;
          v299[0] = v191;
        }
        else
        {
          HIBYTE(v300) = LOBYTE(v192) - *(_BYTE *)v193;
          v191 = v299;
          if (!v190)
          {
LABEL_295:
            *((_BYTE *)v191 + v190) = 0;
            v291[0] = &v301;
            v291[1] = (void *)std::chrono::steady_clock::now().__d_.__rep_;
            rep = std::chrono::system_clock::now().__d_.__rep_;
            v293 = 2;
            v294 = "unknown file";
            v295 = 121;
            v297 = 0;
            v298 = 0;
            v296 = "unknown function";
            if (v300 >= 0)
              v197 = v299;
            else
              v197 = (void **)v299[0];
            v198 = *(_QWORD *)v291[0];
            v199 = (const char *)(*(_QWORD *)v291[0] + 16);
            v288 = v199;
            if (*(char *)(*(_QWORD *)v291[0] + 39) < 0)
            {
              v199 = *(const char **)(v198 + 16);
              v200 = *(_QWORD *)(v198 + 24);
            }
            else
            {
              v200 = *(unsigned __int8 *)(*(_QWORD *)v291[0] + 39);
            }
            v201 = atomic_load((unsigned __int8 *)&qword_254A4A510);
            if ((v201 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
            {
              sub_20E9E46F8((uint64_t)v327);
              sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)v327);
              if ((_BYTE)v328 && (v327[23] & 0x80000000) != 0)
                operator delete(*(void **)v327);
              __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
              __cxa_guard_release(&qword_254A4A510);
            }
            if (byte_254A4A4F8[23] >= 0)
              v202 = byte_254A4A4F8;
            else
              v202 = *(const char **)byte_254A4A4F8;
            if (byte_254A4A4F8[23] >= 0)
              v203 = byte_254A4A4F8[23];
            else
              v203 = *(_QWORD *)&byte_254A4A4F8[8];
            *(_QWORD *)v327 = os_log_create(v202, v199);
            v204 = &v327[8];
            if (v203 > 0x7FFFFFFFFFFFFFF7)
              sub_20E860B7C();
            if (v203 >= 0x17)
            {
              v205 = (v203 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v203 | 7) != 0x17)
                v205 = v203 | 7;
              v206 = v205 + 1;
              v204 = operator new(v205 + 1);
              *(_QWORD *)&v327[16] = v203;
              *(_QWORD *)&v328 = v206 | 0x8000000000000000;
              *(_QWORD *)&v327[8] = v204;
            }
            else
            {
              BYTE7(v328) = v203;
              if (!v203)
              {
LABEL_316:
                v204[v203] = 0;
                BYTE8(v328) = 1;
                v207 = (char *)&v329;
                if (v200 > 0x7FFFFFFFFFFFFFF7)
                  sub_20E860B7C();
                a2 = v276;
                if (v200 >= 0x17)
                {
                  v208 = (v200 & 0xFFFFFFFFFFFFFFF8) + 8;
                  if ((v200 | 7) != 0x17)
                    v208 = v200 | 7;
                  v209 = v208 + 1;
                  v207 = (char *)operator new(v208 + 1);
                  v330 = (const char *)v200;
                  v331 = v209 | 0x8000000000000000;
                  v329 = v207;
                }
                else
                {
                  HIBYTE(v331) = v200;
                  if (!v200)
                  {
LABEL_324:
                    v207[v200] = 0;
                    LOBYTE(v332) = 1;
                    v210 = *(NSObject **)v327;
                    if (SHIBYTE(v331) < 0)
                      operator delete(v329);
                    if (BYTE8(v328) && SBYTE7(v328) < 0)
                      operator delete(*(void **)&v327[8]);
                    if (*(_QWORD *)v327)
                      os_release(*(void **)v327);
                    if (!v175 || !*(_QWORD *)(v175 + 24))
                    {
                      os_log_type_enabled(v210, OS_LOG_TYPE_DEBUG);
                      *(_DWORD *)v327 = 136315138;
                      *(_QWORD *)&v327[4] = v197;
                      v217 = (void *)_os_log_send_and_compose_impl();
                      v218 = v290;
                      if (v217)
                        free(v217);
                      goto LABEL_402;
                    }
                    v211 = _os_log_pack_size();
                    v212 = (std::__shared_weak_count_vtbl *)operator new(v211, (std::align_val_t)8uLL);
                    v213 = (std::__shared_weak_count *)operator new();
                    v213->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
                    v213->__shared_owners_ = 0;
                    v213->__shared_weak_owners_ = 0;
                    v213[1].__vftable = v212;
                    *(_QWORD *)&v311 = v212;
                    *((_QWORD *)&v311 + 1) = v212;
                    v314 = 0;
                    v312 = v213;
                    v313 = 0;
                    v214 = strlen((const char *)v197);
                    if (v214 > 0x7FFFFFFFFFFFFFF7)
                      sub_20E860B7C();
                    v215 = v214;
                    if (v214 >= 0x17)
                    {
                      v219 = (v214 & 0xFFFFFFFFFFFFFFF8) + 8;
                      if ((v214 | 7) != 0x17)
                        v219 = v214 | 7;
                      v220 = v219 + 1;
                      v216 = (uint64_t *)operator new(v219 + 1);
                      *((_QWORD *)&v316 + 1) = v220 | 0x8000000000000000;
                      v315 = v216;
                      *(_QWORD *)&v316 = v215;
                    }
                    else
                    {
                      HIBYTE(v316) = v214;
                      v216 = (uint64_t *)&v315;
                      if (!v214)
                      {
LABEL_343:
                        *((_BYTE *)v216 + v215) = 0;
                        v221 = (uint64_t)v315;
                        v326[0] = v316;
                        *(_QWORD *)((char *)v326 + 7) = *(_QWORD *)((char *)&v316 + 7);
                        v222 = HIBYTE(v316);
                        v223 = operator new(0x38uLL);
                        v223[1] = 0;
                        v223[2] = 0;
                        v223[3] = off_24C9ABC20;
                        *v223 = &off_24C9ABBD0;
                        v224 = v326[0];
                        v223[4] = v221;
                        v223[5] = v224;
                        *(_QWORD *)((char *)v223 + 47) = *(_QWORD *)((char *)v326 + 7);
                        *((_BYTE *)v223 + 55) = v222;
                        v326[0] = 0;
                        *(_QWORD *)((char *)v326 + 7) = 0;
                        v225 = v314;
                        v313 = (char *)(v223 + 3);
                        v314 = (std::__shared_weak_count *)v223;
                        if (v225)
                        {
                          v226 = (unint64_t *)&v225->__shared_owners_;
                          do
                            v227 = __ldaxr(v226);
                          while (__stlxr(v227 - 1, v226));
                          if (!v227)
                          {
                            ((void (*)(std::__shared_weak_count *))v225->__on_zero_shared)(v225);
                            std::__shared_weak_count::__release_weak(v225);
                          }
                        }
                        *(_OWORD *)v327 = v311;
                        v228 = v313;
                        *(_QWORD *)&v327[16] = v312;
                        if (v312)
                        {
                          v229 = (unint64_t *)&v312->__shared_owners_;
                          do
                            v230 = __ldxr(v229);
                          while (__stxr(v230 + 1, v229));
                        }
                        v231 = v314;
                        *(_QWORD *)&v328 = v228;
                        *((_QWORD *)&v328 + 1) = v314;
                        if (v314)
                        {
                          v232 = (unint64_t *)&v314->__shared_owners_;
                          do
                            v233 = __ldxr(v232);
                          while (__stxr(v233 + 1, v232));
                          v329 = v228;
                          do
                            v234 = __ldaxr(v232);
                          while (__stlxr(v234 - 1, v232));
                          if (!v234)
                          {
                            ((void (*)(std::__shared_weak_count *))v231->__on_zero_shared)(v231);
                            std::__shared_weak_count::__release_weak(v231);
                          }
                        }
                        else
                        {
                          v329 = v228;
                        }
                        v235 = v312;
                        if (v312)
                        {
                          v236 = (unint64_t *)&v312->__shared_owners_;
                          do
                            v237 = __ldaxr(v236);
                          while (__stlxr(v237 - 1, v236));
                          if (!v237)
                          {
                            ((void (*)(std::__shared_weak_count *))v235->__on_zero_shared)(v235);
                            std::__shared_weak_count::__release_weak(v235);
                          }
                        }
                        v238 = *(_QWORD *)v327;
                        if (v329[31] >= 0)
                          v239 = v329 + 8;
                        else
                          v239 = (char *)*((_QWORD *)v329 + 1);
                        v240 = _os_log_pack_fill();
                        *(_DWORD *)v240 = 136315138;
                        *(_QWORD *)(v240 + 4) = v239;
                        v241 = operator new();
                        v242 = *(unsigned __int8 *)(v198 + 39);
                        v243 = v288;
                        if ((v242 & 0x80u) != 0)
                        {
                          v243 = *(const char **)(v198 + 16);
                          v242 = *(_QWORD *)(v198 + 24);
                        }
                        *(_QWORD *)v241 = v238;
                        *(_OWORD *)(v241 + 8) = *(_OWORD *)&v327[8];
                        *(_QWORD *)&v327[8] = 0;
                        *(_QWORD *)&v327[16] = 0;
                        *(_OWORD *)(v241 + 24) = v328;
                        v328 = 0uLL;
                        *(_QWORD *)(v241 + 40) = v243;
                        *(_QWORD *)(v241 + 48) = v242;
                        *(_BYTE *)(v241 + 56) = 2;
                        v315 = 0;
                        *(_QWORD *)&v311 = v241;
                        (*(void (**)(_QWORD, __int128 *))(**(_QWORD **)(v175 + 24) + 40))(*(_QWORD *)(v175 + 24), &v311);
                        v244 = v311;
                        *(_QWORD *)&v311 = 0;
                        v218 = v290;
                        if (v244)
                        {
                          v245 = *(std::__shared_weak_count **)(v244 + 32);
                          if (v245)
                          {
                            v246 = (unint64_t *)&v245->__shared_owners_;
                            do
                              v247 = __ldaxr(v246);
                            while (__stlxr(v247 - 1, v246));
                            if (!v247)
                            {
                              ((void (*)(std::__shared_weak_count *))v245->__on_zero_shared)(v245);
                              std::__shared_weak_count::__release_weak(v245);
                            }
                          }
                          v248 = *(std::__shared_weak_count **)(v244 + 16);
                          if (v248)
                          {
                            v249 = (unint64_t *)&v248->__shared_owners_;
                            do
                              v250 = __ldaxr(v249);
                            while (__stlxr(v250 - 1, v249));
                            if (!v250)
                            {
                              ((void (*)(std::__shared_weak_count *))v248->__on_zero_shared)(v248);
                              std::__shared_weak_count::__release_weak(v248);
                            }
                          }
                          MEMORY[0x212BC6398](v244, 0x10F0C40B62ED6C6);
                          v251 = (uint64_t)v315;
                          v315 = 0;
                          if (v251)
                          {
                            v252 = *(std::__shared_weak_count **)(v251 + 32);
                            if (v252)
                            {
                              v253 = (unint64_t *)&v252->__shared_owners_;
                              do
                                v254 = __ldaxr(v253);
                              while (__stlxr(v254 - 1, v253));
                              if (!v254)
                              {
                                ((void (*)(std::__shared_weak_count *))v252->__on_zero_shared)(v252);
                                std::__shared_weak_count::__release_weak(v252);
                              }
                            }
                            v255 = *(std::__shared_weak_count **)(v251 + 16);
                            if (v255)
                            {
                              v256 = (unint64_t *)&v255->__shared_owners_;
                              do
                                v257 = __ldaxr(v256);
                              while (__stlxr(v257 - 1, v256));
                              if (!v257)
                              {
                                ((void (*)(std::__shared_weak_count *))v255->__on_zero_shared)(v255);
                                std::__shared_weak_count::__release_weak(v255);
                              }
                            }
                            MEMORY[0x212BC6398](v251, 0x10F0C40B62ED6C6);
                          }
                        }
                        v258 = (std::__shared_weak_count *)*((_QWORD *)&v328 + 1);
                        if (*((_QWORD *)&v328 + 1))
                        {
                          v259 = (unint64_t *)(*((_QWORD *)&v328 + 1) + 8);
                          do
                            v260 = __ldaxr(v259);
                          while (__stlxr(v260 - 1, v259));
                          if (!v260)
                          {
                            ((void (*)(std::__shared_weak_count *))v258->__on_zero_shared)(v258);
                            std::__shared_weak_count::__release_weak(v258);
                          }
                        }
                        v261 = *(std::__shared_weak_count **)&v327[16];
                        if (*(_QWORD *)&v327[16])
                        {
                          v262 = (unint64_t *)(*(_QWORD *)&v327[16] + 8);
                          do
                            v263 = __ldaxr(v262);
                          while (__stlxr(v263 - 1, v262));
                          if (!v263)
                          {
                            ((void (*)(std::__shared_weak_count *))v261->__on_zero_shared)(v261);
                            std::__shared_weak_count::__release_weak(v261);
                          }
                        }
LABEL_402:
                        if (v218)
                        {
                          v264 = v299;
                          if (v300 < 0)
                            v264 = (void **)v299[0];
                          sub_20E8C003C((uint64_t)v291, "%s", (const char *)v264);
                          sub_20E863570((uint64_t)v291);
                        }
                        sub_20E863570((uint64_t)v291);
                        v265 = v298;
                        if (v298)
                        {
                          v266 = (unint64_t *)&v298->__shared_owners_;
                          do
                            v267 = __ldaxr(v266);
                          while (__stlxr(v267 - 1, v266));
                          if (!v267)
                          {
                            ((void (*)(std::__shared_weak_count *))v265->__on_zero_shared)(v265);
                            std::__shared_weak_count::__release_weak(v265);
                          }
                        }
                        if (SHIBYTE(v300) < 0)
                          operator delete(v299[0]);
                        *(_QWORD *)&object[0] = *MEMORY[0x24BEDB7F0];
                        v268 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
                        *(_QWORD *)((char *)object + *(_QWORD *)(*(_QWORD *)&object[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
                        *(_QWORD *)&object[1] = v268;
                        *((_QWORD *)&object[1] + 1) = MEMORY[0x24BEDB848] + 16;
                        if (v322 < 0)
                          operator delete(v321);
                        std::streambuf::~streambuf();
                        std::iostream::~basic_iostream();
                        MEMORY[0x212BC6290](&v325);
LABEL_416:
                        if (*(_BYTE *)(a1 + 24))
                        {
                          for (j = *(uint64_t **)(a2 + 16); j; j = (uint64_t *)*j)
                            *((_BYTE *)j + 24) = 0;
                        }
                        goto LABEL_419;
                      }
                    }
                    memcpy(v216, v197, v215);
                    goto LABEL_343;
                  }
                }
                memmove(v207, v199, v200);
                goto LABEL_324;
              }
            }
            memmove(v204, v202, v203);
            goto LABEL_316;
          }
        }
        memmove(v191, v194, v190);
        goto LABEL_295;
      }
    }
    memmove(v181, v184, v180);
    goto LABEL_272;
  }
LABEL_419:
  v302 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&v302 + *(_QWORD *)(v302 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  v303 = MEMORY[0x24BEDB848] + 16;
  if (SBYTE7(v308) < 0)
    operator delete((void *)v307);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x212BC6290](v310);
}

void sub_20EFE8350(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,void *a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,void *__p,uint64_t a51,int a52,__int16 a53,char a54,char a55,uint64_t a56,char a57)
{
  uint64_t v57;

  if (*(_BYTE *)(v57 - 168) && *(char *)(v57 - 169) < 0)
    operator delete(*(void **)(v57 - 192));
  __cxa_guard_abort(&qword_254A4A510);
  sub_20E863714((uint64_t)&a41);
  if (a55 < 0)
    operator delete(__p);
  sub_20E863784((uint64_t)&STACK[0x2B0]);
  sub_20E9977BC((uint64_t)&a57);
  sub_20E8C25A8(a25);
  _Unwind_Resume(a1);
}

void sub_20EFE8688(_QWORD *a1)
{
  unsigned __int8 v2;
  void *__p[2];
  char v4;
  uint64_t *v5;

  v2 = atomic_load((unsigned __int8 *)&qword_254A618A8);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254A618A8))
  {
    sub_21021D3D8(&v5);
    sub_20E8610C0(__p, "cv3d.vio.odometry");
    sub_20E8C4068(&v5, (uint64_t)__p, &qword_254A618A0);
    if (v4 < 0)
      operator delete(__p[0]);
    __cxa_guard_release(&qword_254A618A8);
  }
  *a1 = qword_254A618A0;
}

void sub_20EFE8724(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A618A8);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A618A8);
  _Unwind_Resume(a1);
}

_QWORD *sub_20EFE877C(_QWORD *a1, _BYTE *a2)
{
  const char *v3;
  uint64_t v4;

  switch(*a2)
  {
    case 0:
      v3 = "Inconclusive";
      v4 = 12;
      goto LABEL_11;
    case 1:
      v3 = "Calibration did not change";
      goto LABEL_9;
    case 2:
      v3 = "Extrinsics changed";
      goto LABEL_6;
    case 3:
      v3 = "Intrinsics changed";
LABEL_6:
      v4 = 18;
      goto LABEL_11;
    case 4:
      v3 = "Splay alignment changed";
      v4 = 23;
      goto LABEL_11;
    case 5:
      v3 = "Vergence alignment changed";
LABEL_9:
      v4 = 26;
      goto LABEL_11;
    case 6:
      v3 = "Depth triangulation changed";
      v4 = 27;
LABEL_11:
      sub_20E86A980(a1, (uint64_t)v3, v4);
      break;
    default:
      return a1;
  }
  return a1;
}

uint64_t sub_20EFE883C(_QWORD *a1, int *a2)
{
  double *v4;
  double *v5;
  uint64_t *v6;
  float64x2_t v7;
  uint64_t *v8;
  unsigned int v9;
  float64x2_t v10;
  int8x16_t v11;
  float64x2_t v12;
  float64x2_t v13;
  __int128 v14;
  uint64_t *v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t *v21;
  int v22;
  unint64_t v23;
  unint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  _QWORD *v28;
  size_t v29;
  void **v30;
  unint64_t v31;
  const void *v32;
  uint64_t v33;
  uint64_t v34;
  const char *v35;
  uint64_t v36;
  uint64_t v37;
  size_t v38;
  const char *v39;
  unsigned __int8 v40;
  unsigned __int8 v41;
  const char *v42;
  size_t v43;
  _BYTE *v44;
  uint64_t v45;
  unint64_t v46;
  const char *v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  void **v52;
  NSObject *v53;
  uint64_t v54;
  uint64_t v55;
  size_t v56;
  std::__shared_weak_count_vtbl *v57;
  std::__shared_weak_count *v58;
  size_t v59;
  size_t v60;
  _QWORD *v61;
  void *v62;
  uint64_t v63;
  uint64_t v64;
  _QWORD *v65;
  char v66;
  _QWORD *v67;
  uint64_t v68;
  std::__shared_weak_count *v69;
  unint64_t *p_shared_owners;
  unint64_t v71;
  void *v72;
  unint64_t *v73;
  unint64_t v74;
  std::__shared_weak_count *v75;
  unint64_t *v76;
  unint64_t v77;
  unint64_t v78;
  std::__shared_weak_count *v79;
  unint64_t *v80;
  unint64_t v81;
  uint64_t v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  __int128 v89;
  uint64_t v90;
  std::__shared_weak_count *v91;
  unint64_t *v92;
  unint64_t v93;
  std::__shared_weak_count *v94;
  unint64_t *v95;
  unint64_t v96;
  _QWORD *v97;
  std::__shared_weak_count *v98;
  unint64_t *v99;
  unint64_t v100;
  std::__shared_weak_count *v101;
  unint64_t *v102;
  unint64_t v103;
  std::__shared_weak_count *v104;
  unint64_t *v105;
  unint64_t v106;
  std::__shared_weak_count *v107;
  unint64_t *v108;
  unint64_t v109;
  const char *v110;
  std::__shared_weak_count *v111;
  unint64_t *v112;
  unint64_t v113;
  uint64_t v114;
  double v116;
  double v117;
  double v118;
  double v119;
  const char *v120;
  _QWORD v121[3];
  int v122;
  const char *v123;
  int v124;
  const char *v125;
  uint64_t v126;
  std::__shared_weak_count *v127;
  void *__dst[2];
  int64_t v129;
  _QWORD v130[2];
  _QWORD v131[3];
  const void *v132;
  uint64_t v133;
  const void *v134;
  unint64_t v135;
  void *__p;
  char v137;
  unint64_t v138;
  int v139;
  uint64_t v140;
  uint64_t v141;
  __int128 v142;
  std::__shared_weak_count *v143;
  char *v144;
  std::__shared_weak_count *v145;
  _QWORD *v146;
  __int128 v147;
  _BYTE v148[24];
  __int128 v149;
  void *v150[2];
  unint64_t v151;
  char v152;
  _QWORD v153[5];

  v153[2] = *MEMORY[0x24BDAC8D0];
  v4 = (double *)sub_20EB8DE00(a1 + 31, a2);
  if (!v4)
    goto LABEL_159;
  v5 = v4;
  v116 = v4[3];
  v119 = v4[4];
  v117 = v4[5];
  v118 = v4[6];
  v6 = sub_20EB8DE00(a1 + 26, a2);
  if (!v6)
    goto LABEL_159;
  if (*((_BYTE *)v6 + 1560))
    v8 = v6 + 15;
  else
    v8 = 0;
  v9 = *((_DWORD *)v8 + 248);
  if (v9 != -1)
  {
    v7.f64[0] = 1.0;
    if (v9 > 7)
      goto LABEL_12;
    goto LABEL_11;
  }
  if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Util/include/VIO/Util/Variant.h", 239, (uint64_t)"!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v9 = *((_DWORD *)v8 + 248);
  v7.f64[0] = 1.0;
  if (v9 <= 7)
  {
LABEL_11:
    if (!v9)
    {
      sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Geometry/include/VIO/Geometry/LensModel.h", 1728, (uint64_t)"", 0, (uint64_t)"Empty variant lens model invoked.", 33, (void (*)(void **))sub_21023DDB0);
      abort();
    }
  }
LABEL_12:
  v10.f64[0] = v119;
  v10.f64[1] = v118;
  v11 = (int8x16_t)vabdq_f64((float64x2_t)*(unint64_t *)&v116, *(float64x2_t *)v8);
  v12 = (float64x2_t)vdupq_n_s64(0x3DDB7CDFD9D7BDBBuLL);
  v13 = (float64x2_t)vmvnq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vcgeq_f64(v12, (float64x2_t)vextq_s8(v11, v11, 8uLL)), (int32x4_t)vcgeq_f64(v12, vabdq_f64((float64x2_t)*(unint64_t *)&v117, *((float64x2_t *)v8 + 1)))), (int16x8_t)vuzp1q_s32((int32x4_t)vcgeq_f64(v12, vabdq_f64(v10, *((float64x2_t *)v8 + 2))), (int32x4_t)vcgeq_f64(v12, vabdq_f64((float64x2_t)0, *((float64x2_t *)v8 + 3))))));
  if ((vmaxv_u8((uint8x8_t)vmovn_s16((int16x8_t)v13)) & 1) != 0
    || (*(_QWORD *)&v13.f64[0] = v8[8], vabdq_f64(v7, v13).f64[0] > 1.0e-10))
  {
    *(_OWORD *)v8 = *(unint64_t *)&v116;
    *((_OWORD *)v8 + 1) = *(unint64_t *)&v117;
    *(double *)&v14 = v119;
    *((double *)&v14 + 1) = v118;
    *((_OWORD *)v8 + 2) = v14;
    *((_OWORD *)v8 + 3) = 0u;
    v8[8] = *(_QWORD *)&v7.f64[0];
    *((double *)v8 + 9) = 1.0 / v116;
    *((double *)v8 + 10) = -0.0 / (v116 * v119);
    *((double *)v8 + 11) = -(v117 * v119 + v118 * -0.0) / (v116 * v119);
    v8[12] = 0;
    *((double *)v8 + 13) = 1.0 / v119;
    *((double *)v8 + 14) = -v118 / v119;
    v8[15] = 0;
    v8[16] = 0;
    *(_OWORD *)(v8 + 17) = xmmword_2102E3C70;
    v8[19] = 0x7FF8000000000000;
    *((_BYTE *)v8 + 160) = 0;
  }
  v15 = sub_20EB8DE00(a1 + 26, a2);
  if (!v15)
    goto LABEL_159;
  *(_OWORD *)(v15 + 3) = *(_OWORD *)(v5 + 7);
  v16 = *(_OWORD *)(v5 + 9);
  v17 = *(_OWORD *)(v5 + 11);
  v18 = *(_OWORD *)(v5 + 13);
  v15[11] = *((_QWORD *)v5 + 15);
  *(_OWORD *)(v15 + 9) = v18;
  *(_OWORD *)(v15 + 7) = v17;
  *(_OWORD *)(v15 + 5) = v16;
  v19 = *((_QWORD *)v5 + 16);
  v20 = sub_20EB8DE00(a1 + 26, a2);
  if (!v20 || (v20[211] = v19, (v21 = sub_20EB8DE00(a1 + 36, a2)) == 0))
LABEL_159:
    sub_20E89FD20("unordered_map::at: key not found");
  v21[19] = 0;
  v21[20] = 0;
  *((_DWORD *)v21 + 44) = 0;
  v21[21] = 0;
  sub_20EFE8688(&v141);
  if (**(int **)(v141 + 56) > 2)
    return 1;
  v22 = *(unsigned __int8 *)(v141 + 72);
  v23 = sub_20E8C31DC(v141, "OSLogSurrogateAppender", 1, 0);
  v24 = v23;
  if (!v22 && !v23)
    return 1;
  sub_20E863438((uint64_t)v130);
  v25 = sub_20E86A980(v131, (uint64_t)"CCD: ", 5);
  sub_20E86A980(v25, (uint64_t)"[", 1);
  v26 = (_QWORD *)std::ostream::operator<<();
  sub_20E86A980(v26, (uint64_t)":", 1);
  v27 = (_QWORD *)std::ostream::operator<<();
  v28 = sub_20E86A980(v27, (uint64_t)"]", 1);
  sub_20E86A980(v28, (uint64_t)" resetting reference calibration at ", 36);
  std::ostream::operator<<();
  if ((v139 & 0x10) != 0)
  {
    v31 = v138;
    if (v138 < v135)
    {
      v138 = v135;
      v31 = v135;
    }
    v32 = v134;
    v29 = v31 - (_QWORD)v134;
    if (v31 - (unint64_t)v134 > 0x7FFFFFFFFFFFFFF7)
      goto LABEL_79;
  }
  else
  {
    if ((v139 & 8) == 0)
    {
      v29 = 0;
      HIBYTE(v129) = 0;
      v30 = __dst;
      goto LABEL_34;
    }
    v32 = v132;
    v29 = v133 - (_QWORD)v132;
    if ((unint64_t)(v133 - (_QWORD)v132) > 0x7FFFFFFFFFFFFFF7)
LABEL_79:
      sub_20E860B7C();
  }
  if (v29 >= 0x17)
  {
    v33 = (v29 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v29 | 7) != 0x17)
      v33 = v29 | 7;
    v34 = v33 + 1;
    v30 = (void **)operator new(v33 + 1);
    __dst[1] = (void *)v29;
    v129 = v34 | 0x8000000000000000;
    __dst[0] = v30;
    goto LABEL_33;
  }
  HIBYTE(v129) = v29;
  v30 = __dst;
  if (v29)
LABEL_33:
    memmove(v30, v32, v29);
LABEL_34:
  *((_BYTE *)v30 + v29) = 0;
  v121[0] = &v141;
  v121[1] = std::chrono::steady_clock::now().__d_.__rep_;
  v121[2] = std::chrono::system_clock::now().__d_.__rep_;
  v122 = 2;
  v123 = "unknown file";
  v124 = 142;
  v126 = 0;
  v127 = 0;
  v125 = "unknown function";
  if (v129 >= 0)
    v35 = (const char *)__dst;
  else
    v35 = (const char *)__dst[0];
  v36 = *(_QWORD *)v121[0];
  v37 = *(_QWORD *)v121[0] + 16;
  if (*(char *)(*(_QWORD *)v121[0] + 39) < 0)
  {
    v39 = *(const char **)(v36 + 16);
    v38 = *(_QWORD *)(v36 + 24);
    v41 = atomic_load((unsigned __int8 *)&qword_254A4A510);
    if ((v41 & 1) != 0)
      goto LABEL_41;
  }
  else
  {
    v38 = *(unsigned __int8 *)(*(_QWORD *)v121[0] + 39);
    v39 = (const char *)(*(_QWORD *)v121[0] + 16);
    v40 = atomic_load((unsigned __int8 *)&qword_254A4A510);
    if ((v40 & 1) != 0)
      goto LABEL_41;
  }
  if (__cxa_guard_acquire(&qword_254A4A510))
  {
    sub_20E9E46F8((uint64_t)v148);
    sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)v148);
    if ((_BYTE)v149 && (v148[23] & 0x80000000) != 0)
      operator delete(*(void **)v148);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
    __cxa_guard_release(&qword_254A4A510);
  }
LABEL_41:
  if (byte_254A4A4F8[23] >= 0)
    v42 = byte_254A4A4F8;
  else
    v42 = *(const char **)byte_254A4A4F8;
  if (byte_254A4A4F8[23] >= 0)
    v43 = byte_254A4A4F8[23];
  else
    v43 = *(_QWORD *)&byte_254A4A4F8[8];
  *(_QWORD *)v148 = os_log_create(v42, v39);
  v44 = &v148[8];
  if (v43 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v43 >= 0x17)
  {
    v120 = v39;
    v45 = v36;
    v46 = v24;
    v47 = v35;
    v48 = v37;
    v49 = v22;
    v50 = (v43 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v43 | 7) != 0x17)
      v50 = v43 | 7;
    v51 = v50 + 1;
    v44 = operator new(v50 + 1);
    *(_QWORD *)&v148[16] = v43;
    *(_QWORD *)&v149 = v51 | 0x8000000000000000;
    *(_QWORD *)&v148[8] = v44;
    v22 = v49;
    v37 = v48;
    v35 = v47;
    v24 = v46;
    v36 = v45;
    v39 = v120;
    goto LABEL_54;
  }
  BYTE7(v149) = v43;
  if (v43)
LABEL_54:
    memmove(v44, v42, v43);
  v44[v43] = 0;
  BYTE8(v149) = 1;
  v52 = v150;
  if (v38 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v38 >= 0x17)
  {
    v54 = (v38 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v38 | 7) != 0x17)
      v54 = v38 | 7;
    v55 = v54 + 1;
    v52 = (void **)operator new(v54 + 1);
    v150[1] = (void *)v38;
    v151 = v55 | 0x8000000000000000;
    v150[0] = v52;
  }
  else
  {
    HIBYTE(v151) = v38;
    if (!v38)
    {
      LOBYTE(v150[0]) = 0;
      v152 = 1;
      v53 = *(NSObject **)v148;
      if ((SHIBYTE(v151) & 0x80000000) == 0)
        goto LABEL_59;
      goto LABEL_65;
    }
  }
  memmove(v52, v39, v38);
  *((_BYTE *)v52 + v38) = 0;
  v152 = 1;
  v53 = *(NSObject **)v148;
  if ((SHIBYTE(v151) & 0x80000000) == 0)
  {
LABEL_59:
    if (!BYTE8(v149))
      goto LABEL_68;
    goto LABEL_66;
  }
LABEL_65:
  operator delete(v150[0]);
  if (!BYTE8(v149))
    goto LABEL_68;
LABEL_66:
  if (SBYTE7(v149) < 0)
    operator delete(*(void **)&v148[8]);
LABEL_68:
  if (*(_QWORD *)v148)
    os_release(*(void **)v148);
  if (!v24 || !*(_QWORD *)(v24 + 24))
  {
    os_log_type_enabled(v53, OS_LOG_TYPE_DEBUG);
    *(_DWORD *)v148 = 136315138;
    *(_QWORD *)&v148[4] = v35;
    v62 = (void *)_os_log_send_and_compose_impl();
    if (v62)
      free(v62);
    goto LABEL_144;
  }
  v56 = _os_log_pack_size();
  v57 = (std::__shared_weak_count_vtbl *)operator new(v56, (std::align_val_t)8uLL);
  v58 = (std::__shared_weak_count *)operator new();
  v58->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
  v58->__shared_owners_ = 0;
  v58->__shared_weak_owners_ = 0;
  v58[1].__vftable = v57;
  *(_QWORD *)&v142 = v57;
  *((_QWORD *)&v142 + 1) = v57;
  v144 = 0;
  v145 = 0;
  v143 = v58;
  v59 = strlen(v35);
  if (v59 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  v60 = v59;
  if (v59 >= 0x17)
  {
    v63 = (v59 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v59 | 7) != 0x17)
      v63 = v59 | 7;
    v64 = v63 + 1;
    v61 = operator new(v63 + 1);
    *(_QWORD *)&v147 = v60;
    *((_QWORD *)&v147 + 1) = v64 | 0x8000000000000000;
    v146 = v61;
    goto LABEL_83;
  }
  HIBYTE(v147) = v59;
  v61 = &v146;
  if (v59)
LABEL_83:
    memcpy(v61, v35, v60);
  *((_BYTE *)v61 + v60) = 0;
  v65 = v146;
  v153[0] = v147;
  *(_QWORD *)((char *)v153 + 7) = *(_QWORD *)((char *)&v147 + 7);
  v66 = HIBYTE(v147);
  v67 = operator new(0x38uLL);
  v67[1] = 0;
  v67[2] = 0;
  v67[3] = off_24C9ABC20;
  *v67 = &off_24C9ABBD0;
  v68 = v153[0];
  v67[4] = v65;
  v67[5] = v68;
  *(_QWORD *)((char *)v67 + 47) = *(_QWORD *)((char *)v153 + 7);
  *((_BYTE *)v67 + 55) = v66;
  v153[0] = 0;
  *(_QWORD *)((char *)v153 + 7) = 0;
  v69 = v145;
  v144 = (char *)(v67 + 3);
  v145 = (std::__shared_weak_count *)v67;
  if (v69)
  {
    p_shared_owners = (unint64_t *)&v69->__shared_owners_;
    do
      v71 = __ldaxr(p_shared_owners);
    while (__stlxr(v71 - 1, p_shared_owners));
    if (!v71)
    {
      ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
      std::__shared_weak_count::__release_weak(v69);
    }
  }
  *(_OWORD *)v148 = v142;
  v72 = v144;
  *(_QWORD *)&v148[16] = v143;
  if (v143)
  {
    v73 = (unint64_t *)&v143->__shared_owners_;
    do
      v74 = __ldxr(v73);
    while (__stxr(v74 + 1, v73));
  }
  v75 = v145;
  *(_QWORD *)&v149 = v72;
  *((_QWORD *)&v149 + 1) = v145;
  if (v145)
  {
    v76 = (unint64_t *)&v145->__shared_owners_;
    do
      v77 = __ldxr(v76);
    while (__stxr(v77 + 1, v76));
    v150[0] = v72;
    do
      v78 = __ldaxr(v76);
    while (__stlxr(v78 - 1, v76));
    if (!v78)
    {
      ((void (*)(std::__shared_weak_count *))v75->__on_zero_shared)(v75);
      std::__shared_weak_count::__release_weak(v75);
    }
  }
  else
  {
    v150[0] = v72;
  }
  v79 = v143;
  if (v143)
  {
    v80 = (unint64_t *)&v143->__shared_owners_;
    do
      v81 = __ldaxr(v80);
    while (__stlxr(v81 - 1, v80));
    if (!v81)
    {
      ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
      std::__shared_weak_count::__release_weak(v79);
    }
  }
  v82 = *(_QWORD *)v148;
  if (*((char *)v150[0] + 31) >= 0)
    v83 = (char *)v150[0] + 8;
  else
    v83 = (char *)*((_QWORD *)v150[0] + 1);
  v84 = _os_log_pack_fill();
  *(_DWORD *)v84 = 136315138;
  *(_QWORD *)(v84 + 4) = v83;
  v85 = operator new();
  v86 = *(unsigned __int8 *)(v36 + 39);
  v87 = *(_QWORD *)(v36 + 16);
  v88 = *(_QWORD *)(v36 + 24);
  v89 = v149;
  *(_OWORD *)(v85 + 8) = *(_OWORD *)&v148[8];
  if ((v86 & 0x80u) != 0)
    v86 = v88;
  else
    v87 = v37;
  *(_QWORD *)v85 = v82;
  *(_QWORD *)&v148[8] = 0;
  *(_QWORD *)&v148[16] = 0;
  *(_OWORD *)(v85 + 24) = v89;
  v149 = 0uLL;
  *(_QWORD *)(v85 + 40) = v87;
  *(_QWORD *)(v85 + 48) = v86;
  *(_BYTE *)(v85 + 56) = 2;
  v146 = 0;
  *(_QWORD *)&v142 = v85;
  (*(void (**)(_QWORD, __int128 *))(**(_QWORD **)(v24 + 24) + 40))(*(_QWORD *)(v24 + 24), &v142);
  v90 = v142;
  *(_QWORD *)&v142 = 0;
  if (v90)
  {
    v91 = *(std::__shared_weak_count **)(v90 + 32);
    if (v91)
    {
      v92 = (unint64_t *)&v91->__shared_owners_;
      do
        v93 = __ldaxr(v92);
      while (__stlxr(v93 - 1, v92));
      if (!v93)
      {
        ((void (*)(std::__shared_weak_count *))v91->__on_zero_shared)(v91);
        std::__shared_weak_count::__release_weak(v91);
      }
    }
    v94 = *(std::__shared_weak_count **)(v90 + 16);
    if (v94)
    {
      v95 = (unint64_t *)&v94->__shared_owners_;
      do
        v96 = __ldaxr(v95);
      while (__stlxr(v96 - 1, v95));
      if (!v96)
      {
        ((void (*)(std::__shared_weak_count *))v94->__on_zero_shared)(v94);
        std::__shared_weak_count::__release_weak(v94);
      }
    }
    MEMORY[0x212BC6398](v90, 0x10F0C40B62ED6C6);
    v97 = v146;
    v146 = 0;
    if (v97)
    {
      v98 = (std::__shared_weak_count *)v97[4];
      if (v98)
      {
        v99 = (unint64_t *)&v98->__shared_owners_;
        do
          v100 = __ldaxr(v99);
        while (__stlxr(v100 - 1, v99));
        if (!v100)
        {
          ((void (*)(std::__shared_weak_count *))v98->__on_zero_shared)(v98);
          std::__shared_weak_count::__release_weak(v98);
        }
      }
      v101 = (std::__shared_weak_count *)v97[2];
      if (v101)
      {
        v102 = (unint64_t *)&v101->__shared_owners_;
        do
          v103 = __ldaxr(v102);
        while (__stlxr(v103 - 1, v102));
        if (!v103)
        {
          ((void (*)(std::__shared_weak_count *))v101->__on_zero_shared)(v101);
          std::__shared_weak_count::__release_weak(v101);
        }
      }
      MEMORY[0x212BC6398](v97, 0x10F0C40B62ED6C6);
    }
  }
  v104 = (std::__shared_weak_count *)*((_QWORD *)&v149 + 1);
  if (*((_QWORD *)&v149 + 1))
  {
    v105 = (unint64_t *)(*((_QWORD *)&v149 + 1) + 8);
    do
      v106 = __ldaxr(v105);
    while (__stlxr(v106 - 1, v105));
    if (!v106)
    {
      ((void (*)(std::__shared_weak_count *))v104->__on_zero_shared)(v104);
      std::__shared_weak_count::__release_weak(v104);
    }
  }
  v107 = *(std::__shared_weak_count **)&v148[16];
  if (*(_QWORD *)&v148[16])
  {
    v108 = (unint64_t *)(*(_QWORD *)&v148[16] + 8);
    do
      v109 = __ldaxr(v108);
    while (__stlxr(v109 - 1, v108));
    if (!v109)
    {
      ((void (*)(std::__shared_weak_count *))v107->__on_zero_shared)(v107);
      std::__shared_weak_count::__release_weak(v107);
    }
  }
LABEL_144:
  if (v22)
  {
    v110 = (const char *)__dst;
    if (v129 < 0)
      v110 = (const char *)__dst[0];
    sub_20E8C003C((uint64_t)v121, "%s", v110);
    sub_20E863570((uint64_t)v121);
  }
  sub_20E863570((uint64_t)v121);
  v111 = v127;
  if (v127)
  {
    v112 = (unint64_t *)&v127->__shared_owners_;
    do
      v113 = __ldaxr(v112);
    while (__stlxr(v113 - 1, v112));
    if (!v113)
    {
      ((void (*)(std::__shared_weak_count *))v111->__on_zero_shared)(v111);
      std::__shared_weak_count::__release_weak(v111);
    }
  }
  if (SHIBYTE(v129) < 0)
    operator delete(__dst[0]);
  v130[0] = *MEMORY[0x24BEDB7F0];
  v114 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  *(_QWORD *)((char *)v130 + *(_QWORD *)(v130[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
  v131[0] = v114;
  v131[1] = MEMORY[0x24BEDB848] + 16;
  if (v137 < 0)
    operator delete(__p);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x212BC6290](&v140);
  return 1;
}

void sub_20EFE95A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33,char a34)
{
  uint64_t v34;

  if (*(_BYTE *)(v34 - 184) && *(char *)(v34 - 185) < 0)
    operator delete(*(void **)(v34 - 208));
  __cxa_guard_abort(&qword_254A4A510);
  sub_20E863714((uint64_t)&a19);
  if (a33 < 0)
  {
    operator delete(__p);
    sub_20E863784((uint64_t)&a34);
    _Unwind_Resume(a1);
  }
  sub_20E863784((uint64_t)&a34);
  _Unwind_Resume(a1);
}

float64x2_t sub_20EFE96FC@<Q0>(uint64_t a1@<X0>, int *a2@<X1>, uint64_t a3@<X8>)
{
  _QWORD *v6;
  uint64_t *v7;
  uint64_t *v8;
  _QWORD *v9;
  uint64_t *v10;
  float64x2_t v11;
  float64x2_t v12;
  float64x2_t v13;
  float64x2_t v15;
  float64x2_t v17;
  double v19;
  double v21;
  float64x2_t v23;
  double v24;
  float64x2_t v25;
  uint64_t *v30;
  uint64_t *v31;
  uint64_t *v32;
  uint64_t *v33;
  int v34;
  float64x2_t v35;
  float64x2_t result;
  float64x2_t v37;
  float64x2_t v38;
  double v39;
  float64x2_t v40;
  float64_t v41;
  float64x2_t v42;
  double v43;
  __int128 v44;
  uint64_t v45;
  __int128 v46;
  uint64_t v47;

  v6 = (_QWORD *)(a1 + 248);
  v7 = sub_20EB8DE00((_QWORD *)(a1 + 248), a2);
  if (!v7)
    goto LABEL_13;
  v8 = v7;
  v9 = (_QWORD *)(a1 + 208);
  v10 = sub_20EB8DE00(v9, a2);
  if (!v10)
    goto LABEL_13;
  *(_QWORD *)&v11.f64[0] = v8[9];
  v13 = *(float64x2_t *)(v8 + 7);
  _D2 = *((double *)v8 + 12);
  v15 = *((float64x2_t *)v8 + 5);
  _D4 = *((double *)v8 + 15);
  v17 = *(float64x2_t *)(v8 + 13);
  *(_QWORD *)&v12.f64[0] = v10[5];
  _Q7 = *(float64x2_t *)(v10 + 3);
  v19 = *((double *)v10 + 8);
  _Q17 = *((float64x2_t *)v10 + 3);
  v21 = *((double *)v10 + 11);
  _Q19 = *(float64x2_t *)(v10 + 9);
  v23 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v13, _Q7.f64[0]), v15, _Q17.f64[0]), v17, _Q19.f64[0]);
  v24 = vmlad_n_f64(vmlad_n_f64(v11.f64[0] * _Q7.f64[0], _D2, _Q17.f64[0]), _D4, _Q19.f64[0]);
  v25 = vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(v13, _Q7, 1), v15, _Q17, 1), v17, _Q19, 1);
  __asm
  {
    FMLA            D7, D2, V17.D[1]
    FMLA            D7, D4, V19.D[1]
  }
  v38 = v23;
  v39 = v24;
  v40 = v25;
  v41 = _Q7.f64[0];
  v42 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v13, v12.f64[0]), v15, v19), v17, v21);
  v43 = vmulq_f64(v11, v12).f64[0] + _D2 * v19 + _D4 * v21;
  v45 = 0;
  v44 = 0uLL;
  sub_20E9733B8(&v38, (double *)&v44);
  v46 = v44;
  v47 = v45;
  v30 = sub_20EB8DE00(v6, a2);
  if (!v30 || (v31 = v30, (v32 = sub_20EB8DE00(v9, a2)) == 0))
LABEL_13:
    sub_20E89FD20("unordered_map::at: key not found");
  if (*((_BYTE *)v32 + 1560))
    v33 = v32 + 15;
  else
    v33 = 0;
  v34 = *((_DWORD *)v33 + 248);
  if (v34 == -1)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Util/include/VIO/Util/Variant.h", 255, (uint64_t)"!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      goto LABEL_15;
    }
    v34 = *((_DWORD *)v33 + 248);
  }
  if (!v34)
  {
    sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Geometry/include/VIO/Geometry/LensModel.h", 1745, (uint64_t)"", 0, (uint64_t)"Empty variant lens model invoked.", 33, (void (*)(void **))sub_21023DDB0);
LABEL_15:
    abort();
  }
  v35 = *((float64x2_t *)v33 + 1);
  *(_QWORD *)&v35.f64[1] = v33[5];
  result = vsubq_f64(*(float64x2_t *)(v31 + 3), (float64x2_t)vzip1q_s64(*(int64x2_t *)v33, *((int64x2_t *)v33 + 2)));
  v37 = vsubq_f64(*(float64x2_t *)(v31 + 5), v35);
  *(_OWORD *)a3 = v46;
  *(_QWORD *)(a3 + 16) = v47;
  *(float64x2_t *)(a3 + 40) = v37;
  *(float64x2_t *)(a3 + 24) = result;
  return result;
}

__n128 sub_20EFE9908@<Q0>(uint64_t a1@<X0>, int *a2@<X1>, int *a3@<X2>, uint64_t a4@<X8>)
{
  _QWORD *v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;
  float64x2_t v12;
  float64x2_t v13;
  _QWORD *v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t *v17;
  float64x2_t v19;
  float64x2_t v20;
  double v21;
  double v22;
  double v23;
  float64x2_t v24;
  float64x2_t v25;
  float64x2_t v27;
  float64x2_t v28;
  float64_t v29;
  float64x2_t v30;
  double v35;
  double v37;
  double v40;
  __n128 result;
  int8x16_t v49;
  int8x16_t v50;
  int8x16_t v51;
  double v52;
  float64x2_t v53;
  float64x2_t v54;
  float64x2_t v55;
  float64x2_t v56;
  float64x2_t v57;
  double v58;
  float64x2_t v59;
  double v60;
  float64x2_t v61;
  double v62;
  float64x2_t v63;
  double v64;
  float64x2_t v65;
  double v66;

  v8 = (_QWORD *)(a1 + 248);
  v9 = sub_20EB8DE00((_QWORD *)(a1 + 248), a3);
  if (!v9)
    goto LABEL_6;
  v10 = v9;
  v11 = sub_20EB8DE00(v8, a2);
  if (!v11)
    goto LABEL_6;
  *(_QWORD *)&v12.f64[0] = v10[9];
  v59 = v12;
  v57 = *(float64x2_t *)(v10 + 7);
  *(_QWORD *)&v13.f64[1] = v10[8];
  v60 = *((double *)v10 + 12);
  v58 = *((double *)v10 + 15);
  *(_QWORD *)&v13.f64[0] = v11[9];
  v55 = *((float64x2_t *)v10 + 5);
  v56 = v13;
  *(_QWORD *)&v13.f64[0] = v11[12];
  v53 = *(float64x2_t *)(v10 + 13);
  v54 = v13;
  v50 = *((int8x16_t *)v11 + 5);
  v51 = *(int8x16_t *)(v11 + 7);
  v52 = *((double *)v11 + 15);
  v14 = (_QWORD *)(a1 + 208);
  v49 = *(int8x16_t *)(v11 + 13);
  v15 = sub_20EB8DE00(v14, a3);
  if (!v15 || (v16 = v15, (v17 = sub_20EB8DE00(v14, a2)) == 0))
LABEL_6:
    sub_20E89FD20("unordered_map::at: key not found");
  _Q18 = v57;
  v19 = v55;
  v20 = v53;
  v21 = *(double *)vextq_s8(v51, v51, 8uLL).i64;
  v22 = *(double *)vextq_s8(v50, v50, 8uLL).i64;
  v23 = *(double *)vextq_s8(v49, v49, 8uLL).i64;
  *(_QWORD *)&_Q18.f64[1] = vextq_s8((int8x16_t)_Q18, (int8x16_t)_Q18, 8uLL).u64[0];
  *(_QWORD *)&v19.f64[1] = vextq_s8((int8x16_t)v19, (int8x16_t)v19, 8uLL).u64[0];
  *(_QWORD *)&v20.f64[1] = vextq_s8((int8x16_t)v20, (int8x16_t)v20, 8uLL).u64[0];
  v24 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(_Q18, *(double *)v51.i64), v19, *(double *)v50.i64), v20, *(double *)v49.i64);
  v25 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(_Q18, v21), v19, v22), v20, v23);
  _D4 = v59.f64[0] * v21 + v60 * v22 + v58 * v23;
  v27.f64[1] = v54.f64[1];
  v28 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(_Q18, v56.f64[0]), v19, v54.f64[0]), v20, v52);
  v29 = vmulq_f64(v59, v56).f64[0] + v60 * v54.f64[0] + v58 * v52;
  *(_QWORD *)&v27.f64[0] = v16[5];
  v30 = *(float64x2_t *)(v16 + 3);
  _D16 = *((double *)v16 + 8);
  _Q17 = *((float64x2_t *)v16 + 3);
  *(_QWORD *)&_Q18.f64[0] = v16[11];
  _Q19 = *(float64x2_t *)(v16 + 9);
  *(_QWORD *)&v20.f64[0] = v17[5];
  _Q21 = *(float64x2_t *)(v17 + 3);
  v35 = *((double *)v17 + 8);
  _Q23 = *((float64x2_t *)v17 + 3);
  v37 = *((double *)v17 + 11);
  _Q25 = *(float64x2_t *)(v17 + 9);
  _Q26 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v30, _Q21.f64[0]), _Q17, _Q23.f64[0]), _Q19, _Q25.f64[0]);
  v40 = vmlad_n_f64(vmlad_n_f64(v27.f64[0] * _Q21.f64[0], _D16, _Q23.f64[0]), _Q18.f64[0], _Q25.f64[0]);
  _Q28 = vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(v30, _Q21, 1), _Q17, _Q23, 1), _Q19, _Q25, 1);
  __asm
  {
    FMLA            D21, D16, V23.D[1]
    FMLA            D21, D18, V25.D[1]
  }
  _Q7 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v30, v20.f64[0]), _Q17, v35), _Q19, v37);
  v27.f64[0] = vmulq_f64(v27, v20).f64[0] + _D16 * v35 + _Q18.f64[0] * v37;
  __asm
  {
    FMLA            D17, D4, V26.D[1]
    FMLA            D19, D4, V28.D[1]
    FMLA            D1, D4, V7.D[1]
  }
  v62 = _Q17.f64[0] + v29 * v40;
  v61 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v24, _Q26.f64[0]), v25, _Q26, 1), v28, v40);
  v64 = _Q19.f64[0] + v29 * _Q21.f64[0];
  v63 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v24, _Q28.f64[0]), v25, _Q28, 1), v28, _Q21.f64[0]);
  v66 = _D1 + v29 * v27.f64[0];
  v65 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v24, _Q7.f64[0]), v25, _Q7, 1), v28, v27.f64[0]);
  *(_QWORD *)(a4 + 8) = 0;
  *(_QWORD *)(a4 + 16) = 0;
  *(_QWORD *)a4 = 0;
  sub_20E9733B8(&v61, (double *)a4);
  return result;
}

void sub_20EFE9B88(_QWORD *a1)
{
  sub_20EFE9BAC(a1);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20EFE9BAC(_QWORD *a1)
{
  _QWORD *v2;
  void *v3;
  _QWORD *v4;
  _QWORD *v5;
  void *v6;
  _QWORD *v7;
  _QWORD *v8;
  void *v9;
  _QWORD *v11;
  void *v12;

  *a1 = &off_24C9F67E0;
  v2 = (_QWORD *)a1[38];
  if (v2)
  {
    do
    {
      v11 = (_QWORD *)*v2;
      v12 = (void *)v2[16];
      if (v12)
      {
        v2[17] = v12;
        operator delete(v12);
      }
      operator delete(v2);
      v2 = v11;
    }
    while (v11);
  }
  v3 = (void *)a1[36];
  a1[36] = 0;
  if (v3)
    operator delete(v3);
  v4 = (_QWORD *)a1[33];
  if (v4)
  {
    do
    {
      v5 = (_QWORD *)*v4;
      operator delete(v4);
      v4 = v5;
    }
    while (v5);
  }
  v6 = (void *)a1[31];
  a1[31] = 0;
  if (v6)
    operator delete(v6);
  v7 = (_QWORD *)a1[28];
  if (v7)
  {
    do
    {
      v8 = (_QWORD *)*v7;
      sub_20EB8188C((uint64_t)(v7 + 3));
      operator delete(v7);
      v7 = v8;
    }
    while (v8);
  }
  v9 = (void *)a1[26];
  a1[26] = 0;
  if (v9)
    operator delete(v9);
  return a1;
}

uint64_t sub_20EFE9C7C(uint64_t a1)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      sub_20EB8188C((uint64_t)v2 + 24);
    operator delete(v2);
  }
  return a1;
}

char *sub_20EFE9CC0(uint64_t a1, int *a2, _QWORD *a3, unsigned int *a4)
{
  unint64_t v4;
  unsigned int v9;
  int v10;
  unint64_t v11;
  unint64_t v12;
  uint8x8_t v13;
  char **v14;
  char *result;
  unint64_t v16;
  uint64_t v18;
  char *v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  float v26;
  float v27;
  _BOOL8 v28;
  unint64_t v29;
  unint64_t v30;
  size_t prime;
  unint64_t v32;
  uint8x8_t v33;
  uint64_t v34;
  _QWORD *v35;
  unint64_t v36;

  if (*a2 >= 0x10000
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/ComputerVisionTypes/include/VIO/ComputerVisionTypes/CameraStreamId.h", 49, (uint64_t)"camera_id <= 0xffff", 19, (uint64_t)"Camera ID cannot exceeds 16 bits", 32, (void (*)(void **))sub_21023DDB0))
  {
    goto LABEL_76;
  }
  v9 = a2[1];
  if (v9 >= 0x10000)
  {
    if (!sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/ComputerVisionTypes/include/VIO/ComputerVisionTypes/CameraStreamId.h", 50, (uint64_t)"stream_id <= 0xffff", 19, (uint64_t)"Stream ID cannot exceeds 16 bits", 32, (void (*)(void **))sub_21023DDB0))
    {
      v9 = a2[1];
      goto LABEL_6;
    }
LABEL_76:
    abort();
  }
LABEL_6:
  v10 = *a2;
  v11 = (unsigned __int16)v9 | ((unsigned __int16)*a2 << 16);
  v12 = *(_QWORD *)(a1 + 8);
  if (v12)
  {
    v13 = (uint8x8_t)vcnt_s8((int8x8_t)v12);
    v13.i16[0] = vaddlv_u8(v13);
    if (v13.u32[0] > 1uLL)
    {
      v4 = (unsigned __int16)v9 | ((unsigned __int16)v10 << 16);
      if (v12 <= v11)
        v4 = v11 % v12;
    }
    else
    {
      v4 = ((_DWORD)v12 - 1) & v11;
    }
    v14 = *(char ***)(*(_QWORD *)a1 + 8 * v4);
    if (v14)
    {
      result = *v14;
      if (*v14)
      {
        if (v13.u32[0] < 2uLL)
        {
          while (1)
          {
            v18 = *((_QWORD *)result + 1);
            if (v18 == v11)
            {
              if (*((_DWORD *)result + 4) == v10 && *((_DWORD *)result + 5) == v9)
                return result;
            }
            else if ((v18 & (v12 - 1)) != v4)
            {
              goto LABEL_36;
            }
            result = *(char **)result;
            if (!result)
              goto LABEL_36;
          }
        }
        do
        {
          v16 = *((_QWORD *)result + 1);
          if (v16 == v11)
          {
            if (*((_DWORD *)result + 4) == v10 && *((_DWORD *)result + 5) == v9)
              return result;
          }
          else
          {
            if (v16 >= v12)
              v16 %= v12;
            if (v16 != v4)
              break;
          }
          result = *(char **)result;
        }
        while (result);
      }
    }
  }
LABEL_36:
  v20 = (char *)operator new(0xB8uLL);
  v21 = *((_OWORD *)a4 + 4);
  *(_OWORD *)(v20 + 72) = *((_OWORD *)a4 + 3);
  *(_OWORD *)(v20 + 88) = v21;
  *(_OWORD *)(v20 + 104) = *((_OWORD *)a4 + 5);
  *(_OWORD *)(v20 + 24) = *(_OWORD *)a4;
  v22 = *((_OWORD *)a4 + 2);
  *(_OWORD *)(v20 + 40) = *((_OWORD *)a4 + 1);
  *(_QWORD *)v20 = 0;
  *((_QWORD *)v20 + 1) = v11;
  *((_QWORD *)v20 + 2) = *a3;
  v23 = *((_QWORD *)a4 + 12);
  *(_OWORD *)(v20 + 56) = v22;
  v24 = *a4;
  *((_QWORD *)v20 + 15) = v23;
  *((_QWORD *)v20 + 16) = 0;
  *((_QWORD *)v20 + 17) = 0;
  *((_QWORD *)v20 + 18) = 0;
  if ((_DWORD)v24)
  {
    v25 = (char *)operator new(72 * v24);
    *((_QWORD *)v20 + 16) = v25;
    *((_QWORD *)v20 + 18) = &v25[72 * v24];
    bzero(v25, 72 * ((72 * v24 - 72) / 0x48uLL) + 72);
    *((_QWORD *)v20 + 17) = &v25[72 * ((72 * v24 - 72) / 0x48uLL) + 72];
  }
  *((_QWORD *)v20 + 19) = 0;
  *((_QWORD *)v20 + 20) = 0;
  *((_DWORD *)v20 + 44) = 0;
  *((_QWORD *)v20 + 21) = 0;
  v26 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v27 = *(float *)(a1 + 32);
  if (v12 && (float)(v27 * (float)v12) >= v26)
  {
    v11 = v4;
  }
  else
  {
    v28 = v12 < 3 || (v12 & (v12 - 1)) != 0;
    v29 = v28 | (2 * v12);
    v30 = vcvtps_u32_f32(v26 / v27);
    if (v29 <= v30)
      prime = v30;
    else
      prime = v29;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v12 = *(_QWORD *)(a1 + 8);
    }
    if (prime > v12)
      goto LABEL_52;
    if (prime < v12)
    {
      v32 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v12 < 3 || (v33 = (uint8x8_t)vcnt_s8((int8x8_t)v12), v33.i16[0] = vaddlv_u8(v33), v33.u32[0] > 1uLL))
      {
        v32 = std::__next_prime(v32);
      }
      else
      {
        v34 = 1 << -(char)__clz(v32 - 1);
        if (v32 >= 2)
          v32 = v34;
      }
      if (prime <= v32)
        prime = v32;
      if (prime < v12)
LABEL_52:
        sub_20E8D2B3C(a1, prime);
    }
    v12 = *(_QWORD *)(a1 + 8);
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v12 <= v11)
        v11 %= v12;
    }
    else
    {
      v11 = ((_DWORD)v12 - 1) & v11;
    }
  }
  v35 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v11);
  if (v35)
  {
    *(_QWORD *)v20 = *v35;
    *v35 = v20;
  }
  else
  {
    *(_QWORD *)v20 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v20;
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v11) = a1 + 16;
    if (*(_QWORD *)v20)
    {
      v36 = *(_QWORD *)(*(_QWORD *)v20 + 8);
      if ((v12 & (v12 - 1)) != 0)
      {
        if (v36 >= v12)
          v36 %= v12;
      }
      else
      {
        v36 &= v12 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v36) = v20;
    }
  }
  result = v20;
  ++*(_QWORD *)(a1 + 24);
  return result;
}

void sub_20EFEA118(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20EFEA140((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20EFEA12C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20EFEA140((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20EFEA140(uint64_t a1)
{
  _QWORD *v2;
  void *v3;

  v2 = *(_QWORD **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
    {
      v3 = (void *)v2[16];
      if (v3)
      {
        v2[17] = v3;
        operator delete(v3);
      }
    }
    operator delete(v2);
  }
  return a1;
}

uint64_t *sub_20EFEA18C(uint64_t a1, int *a2, uint64_t a3)
{
  unint64_t v3;
  unsigned int v7;
  int v8;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  uint64_t **v12;
  uint64_t *v13;
  unint64_t v14;
  uint64_t v16;
  _QWORD *v19;
  float v20;
  float v21;
  _BOOL8 v22;
  unint64_t v23;
  unint64_t v24;
  size_t prime;
  unint64_t v26;
  uint8x8_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  unint64_t v31;

  if (*a2 >= 0x10000
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/ComputerVisionTypes/include/VIO/ComputerVisionTypes/CameraStreamId.h", 49, (uint64_t)"camera_id <= 0xffff", 19, (uint64_t)"Camera ID cannot exceeds 16 bits", 32, (void (*)(void **))sub_21023DDB0))
  {
    goto LABEL_74;
  }
  v7 = a2[1];
  if (v7 >= 0x10000)
  {
    if (!sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/ComputerVisionTypes/include/VIO/ComputerVisionTypes/CameraStreamId.h", 50, (uint64_t)"stream_id <= 0xffff", 19, (uint64_t)"Stream ID cannot exceeds 16 bits", 32, (void (*)(void **))sub_21023DDB0))
    {
      v7 = a2[1];
      goto LABEL_6;
    }
LABEL_74:
    abort();
  }
LABEL_6:
  v8 = *a2;
  v9 = (unsigned __int16)v7 | ((unsigned __int16)*a2 << 16);
  v10 = *(_QWORD *)(a1 + 8);
  if (v10)
  {
    v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    if (v11.u32[0] > 1uLL)
    {
      v3 = (unsigned __int16)v7 | ((unsigned __int16)v8 << 16);
      if (v10 <= v9)
        v3 = v9 % v10;
    }
    else
    {
      v3 = ((_DWORD)v10 - 1) & v9;
    }
    v12 = *(uint64_t ***)(*(_QWORD *)a1 + 8 * v3);
    if (v12)
    {
      v13 = *v12;
      if (*v12)
      {
        if (v11.u32[0] < 2uLL)
        {
          while (1)
          {
            v16 = v13[1];
            if (v16 == v9)
            {
              if (*((_DWORD *)v13 + 4) == v8 && *((_DWORD *)v13 + 5) == v7)
                return v13;
            }
            else if ((v16 & (v10 - 1)) != v3)
            {
              goto LABEL_36;
            }
            v13 = (uint64_t *)*v13;
            if (!v13)
              goto LABEL_36;
          }
        }
        do
        {
          v14 = v13[1];
          if (v14 == v9)
          {
            if (*((_DWORD *)v13 + 4) == v8 && *((_DWORD *)v13 + 5) == v7)
              return v13;
          }
          else
          {
            if (v14 >= v10)
              v14 %= v10;
            if (v14 != v3)
              break;
          }
          v13 = (uint64_t *)*v13;
        }
        while (v13);
      }
    }
  }
LABEL_36:
  v19 = operator new(0x20uLL);
  *v19 = 0;
  v19[1] = v9;
  v19[2] = *(_QWORD *)a3;
  *((_DWORD *)v19 + 6) = *(_DWORD *)(a3 + 8);
  v20 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v21 = *(float *)(a1 + 32);
  if (v10 && (float)(v21 * (float)v10) >= v20)
  {
    v9 = v3;
  }
  else
  {
    v22 = 1;
    if (v10 >= 3)
      v22 = (v10 & (v10 - 1)) != 0;
    v23 = v22 | (2 * v10);
    v24 = vcvtps_u32_f32(v20 / v21);
    if (v23 <= v24)
      prime = v24;
    else
      prime = v23;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v10 = *(_QWORD *)(a1 + 8);
    }
    if (prime > v10)
      goto LABEL_49;
    if (prime < v10)
    {
      v26 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v10 < 3 || (v27 = (uint8x8_t)vcnt_s8((int8x8_t)v10), v27.i16[0] = vaddlv_u8(v27), v27.u32[0] > 1uLL))
      {
        v26 = std::__next_prime(v26);
      }
      else
      {
        v28 = 1 << -(char)__clz(v26 - 1);
        if (v26 >= 2)
          v26 = v28;
      }
      if (prime <= v26)
        prime = v26;
      if (prime < v10)
LABEL_49:
        sub_20E8D2B3C(a1, prime);
    }
    v10 = *(_QWORD *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v10 <= v9)
        v9 %= v10;
    }
    else
    {
      v9 = ((_DWORD)v10 - 1) & v9;
    }
  }
  v29 = *(_QWORD *)a1;
  v30 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v9);
  if (v30)
  {
    *v19 = *v30;
LABEL_72:
    *v30 = v19;
    goto LABEL_73;
  }
  *v19 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v19;
  *(_QWORD *)(v29 + 8 * v9) = a1 + 16;
  if (*v19)
  {
    v31 = *(_QWORD *)(*v19 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v31 >= v10)
        v31 %= v10;
    }
    else
    {
      v31 &= v10 - 1;
    }
    v30 = (_QWORD *)(*(_QWORD *)a1 + 8 * v31);
    goto LABEL_72;
  }
LABEL_73:
  ++*(_QWORD *)(a1 + 24);
  return v19;
}

void sub_20EFEA51C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_20EFEA530(uint64_t a1, int *a2, _QWORD **a3)
{
  unint64_t v3;
  unsigned int v7;
  int v8;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  void **v12;
  _QWORD *v13;
  unint64_t v15;
  uint64_t v17;
  float v18;
  float v19;
  _BOOL8 v20;
  unint64_t v21;
  unint64_t v22;
  size_t prime;
  unint64_t v24;
  uint8x8_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  unint64_t v29;

  if (*a2 >= 0x10000
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/ComputerVisionTypes/include/VIO/ComputerVisionTypes/CameraStreamId.h", 49, (uint64_t)"camera_id <= 0xffff", 19, (uint64_t)"Camera ID cannot exceeds 16 bits", 32, (void (*)(void **))sub_21023DDB0))
  {
    goto LABEL_72;
  }
  v7 = a2[1];
  if (v7 >= 0x10000)
  {
    if (!sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/ComputerVisionTypes/include/VIO/ComputerVisionTypes/CameraStreamId.h", 50, (uint64_t)"stream_id <= 0xffff", 19, (uint64_t)"Stream ID cannot exceeds 16 bits", 32, (void (*)(void **))sub_21023DDB0))
    {
      v7 = a2[1];
      goto LABEL_6;
    }
LABEL_72:
    abort();
  }
LABEL_6:
  v8 = *a2;
  v9 = (unsigned __int16)v7 | ((unsigned __int16)*a2 << 16);
  v10 = *(_QWORD *)(a1 + 8);
  if (v10)
  {
    v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    if (v11.u32[0] > 1uLL)
    {
      v3 = (unsigned __int16)v7 | ((unsigned __int16)v8 << 16);
      if (v10 <= v9)
        v3 = v9 % v10;
    }
    else
    {
      v3 = ((_DWORD)v10 - 1) & v9;
    }
    v12 = *(void ***)(*(_QWORD *)a1 + 8 * v3);
    if (v12)
    {
      v13 = *v12;
      if (*v12)
      {
        if (v11.u32[0] < 2uLL)
        {
          while (1)
          {
            v17 = v13[1];
            if (v17 == v9)
            {
              if (*((_DWORD *)v13 + 4) == v8 && *((_DWORD *)v13 + 5) == v7)
                return v13;
            }
            else if ((v17 & (v10 - 1)) != v3)
            {
              goto LABEL_33;
            }
            v13 = (_QWORD *)*v13;
            if (!v13)
              goto LABEL_33;
          }
        }
        do
        {
          v15 = v13[1];
          if (v15 == v9)
          {
            if (*((_DWORD *)v13 + 4) == v8 && *((_DWORD *)v13 + 5) == v7)
              return v13;
          }
          else
          {
            if (v15 >= v10)
              v15 %= v10;
            if (v15 != v3)
              break;
          }
          v13 = (_QWORD *)*v13;
        }
        while (v13);
      }
    }
  }
LABEL_33:
  v13 = operator new(0x20uLL);
  *v13 = 0;
  v13[1] = v9;
  v13[2] = **a3;
  *((_BYTE *)v13 + 24) = 0;
  v18 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v19 = *(float *)(a1 + 32);
  if (v10 && (float)(v19 * (float)v10) >= v18)
  {
    v9 = v3;
  }
  else
  {
    v20 = 1;
    if (v10 >= 3)
      v20 = (v10 & (v10 - 1)) != 0;
    v21 = v20 | (2 * v10);
    v22 = vcvtps_u32_f32(v18 / v19);
    if (v21 <= v22)
      prime = v22;
    else
      prime = v21;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v10 = *(_QWORD *)(a1 + 8);
    }
    if (prime > v10)
      goto LABEL_46;
    if (prime < v10)
    {
      v24 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v10 < 3 || (v25 = (uint8x8_t)vcnt_s8((int8x8_t)v10), v25.i16[0] = vaddlv_u8(v25), v25.u32[0] > 1uLL))
      {
        v24 = std::__next_prime(v24);
      }
      else
      {
        v26 = 1 << -(char)__clz(v24 - 1);
        if (v24 >= 2)
          v24 = v26;
      }
      if (prime <= v24)
        prime = v24;
      if (prime < v10)
LABEL_46:
        sub_20E8D2B3C(a1, prime);
    }
    v10 = *(_QWORD *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v10 <= v9)
        v9 %= v10;
    }
    else
    {
      v9 = ((_DWORD)v10 - 1) & v9;
    }
  }
  v27 = *(_QWORD *)a1;
  v28 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v9);
  if (v28)
  {
    *v13 = *v28;
LABEL_69:
    *v28 = v13;
    goto LABEL_70;
  }
  *v13 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v13;
  *(_QWORD *)(v27 + 8 * v9) = a1 + 16;
  if (*v13)
  {
    v29 = *(_QWORD *)(*v13 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v29 >= v10)
        v29 %= v10;
    }
    else
    {
      v29 &= v10 - 1;
    }
    v28 = (_QWORD *)(*(_QWORD *)a1 + 8 * v29);
    goto LABEL_69;
  }
LABEL_70:
  ++*(_QWORD *)(a1 + 24);
  return v13;
}

void sub_20EFEA89C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_20EFEA8B0@<X0>(double *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *__p;
  __int128 v9;

  __p = operator new(0x30uLL);
  v9 = xmmword_2102DC8D0;
  strcpy((char *)__p, "CalibrationParameterChangeDetectorConfig");
  sub_20E8B30B4(a2, (__int128 *)&__p, 80, 40);
  if (SHIBYTE(v9) < 0)
    operator delete(__p);
  __p = (void *)nullsub_1(a2);
  v4 = sub_20EA9DB90(a1);
  sub_20E8B2F9C((uint64_t *)&__p, "CalibrationParameterChangeDetectorConfig.camera_intrinsics_focal_length_delta_threshold_px", v4, "Focal length delta to trigger calibration update.");
  __p = (void *)nullsub_1(a2);
  v5 = sub_20EA9DB90(a1 + 1);
  sub_20E8B2F9C((uint64_t *)&__p, "CalibrationParameterChangeDetectorConfig.camera_intrinsics_principal_point_delta_threshold_px", v5, "Principal point delta to trigger calibration update.");
  __p = (void *)nullsub_1(a2);
  v6 = sub_20EA9DB90(a1 + 2);
  return sub_20E8B2F9C((uint64_t *)&__p, "CalibrationParameterChangeDetectorConfig.camera_orientation_relative_change_threshold_deg", v6, "Threshold for the sequential change in camera orientation to be considered significant.");
}

void sub_20EFEA9C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;

  sub_20E869298(v15);
  _Unwind_Resume(a1);
}

void sub_20EFEAA10()
{
  JUMPOUT(0x212BC6398);
}

BOOL sub_20EFEAA24(double *a1, uint64_t *a2, uint64_t *a3, _QWORD *a4, unsigned int a5, char a6, char a7)
{
  return sub_20EFEAA44(a1, *a2, a2[1], a3, a4, a5, a6, a7);
}

BOOL sub_20EFEAA44(double *a1, uint64_t a2, uint64_t a3, uint64_t *a4, _QWORD *a5, unsigned int a6, char a7, char a8)
{
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  unsigned __int8 v20;
  uint64_t v21;
  uint64_t *v22;
  unsigned __int8 v23;
  int v25;
  char *v26;
  size_t v27;
  __darwin_time_t tv_sec;
  uint64_t v29;
  uint64_t i;
  uint64_t v31;
  unsigned __int8 v32;
  _QWORD *v33;
  _BOOL4 v34;
  int v35;
  uint64_t v36;
  unsigned int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unsigned int v41;
  uint64_t v42;
  BOOL v43;
  unint64_t v44;
  unint64_t v45;
  unsigned __int8 v46;
  uint64_t v47;
  uint64_t j;
  unsigned __int8 v49;
  unsigned __int8 v50;
  uint64_t v51;
  uint64_t k;
  unsigned __int8 v53;
  unsigned __int8 v54;
  uint64_t v55;
  uint64_t m;
  unsigned __int8 v57;
  unsigned __int8 v58;
  uint64_t v59;
  uint64_t n;
  unsigned __int8 v61;
  unsigned __int8 v62;
  uint64_t v63;
  uint64_t ii;
  unsigned __int8 v65;
  unint64_t v66;
  unint64_t v67;
  unsigned int v68;
  uint64_t *v69;
  unint64_t v70;
  unsigned int v71;
  unsigned int v72;
  double v73;
  double v74;
  double v75;
  double *v76;
  timespec *v77;
  unsigned __int8 v78;
  int v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  std::ios_base *v83;
  _QWORD *v84;
  _QWORD *v85;
  _QWORD *v86;
  _QWORD *v87;
  _QWORD *v88;
  _QWORD *v89;
  size_t v90;
  void **p_dst;
  unint64_t v92;
  void **v93;
  void *v94;
  uint64_t v95;
  uint64_t v96;
  void **v97;
  uint64_t v98;
  const char *v99;
  size_t v100;
  unsigned __int8 v101;
  unsigned __int8 v102;
  const char *v103;
  size_t v104;
  _BYTE *v105;
  uint64_t v106;
  uint64_t v107;
  void *v108;
  NSObject *v109;
  unint64_t v110;
  uint64_t v111;
  uint64_t v112;
  size_t v113;
  std::__shared_weak_count_vtbl *v114;
  std::__shared_weak_count *v115;
  size_t v116;
  size_t v117;
  _QWORD *v118;
  void *v119;
  uint64_t v120;
  uint64_t v121;
  _QWORD *v122;
  char v123;
  _QWORD *v124;
  uint64_t v125;
  std::__shared_weak_count *v126;
  unint64_t *p_shared_owners;
  unint64_t v128;
  void *v129;
  std::__shared_weak_count *v130;
  unint64_t *v131;
  unint64_t v132;
  std::__shared_weak_count *v133;
  unint64_t *v134;
  unint64_t v135;
  unint64_t v136;
  std::__shared_weak_count *v137;
  unint64_t *v138;
  unint64_t v139;
  uint64_t v140;
  char *v141;
  uint64_t v142;
  char *v143;
  uint64_t v144;
  const char *v145;
  uint64_t v146;
  __int128 v147;
  void *v148;
  std::__shared_weak_count *v149;
  unint64_t *v150;
  unint64_t v151;
  std::__shared_weak_count *v152;
  unint64_t *v153;
  unint64_t v154;
  _QWORD *v155;
  std::__shared_weak_count *v156;
  unint64_t *v157;
  unint64_t v158;
  std::__shared_weak_count *v159;
  unint64_t *v160;
  unint64_t v161;
  std::__shared_weak_count *v162;
  unint64_t *v163;
  unint64_t v164;
  std::__shared_weak_count *v165;
  unint64_t *v166;
  unint64_t v167;
  const char *v168;
  uint64_t *v169;
  unint64_t v170;
  _QWORD *v171;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v172;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v173;
  int v174;
  const char *v175;
  int v176;
  const char *v177;
  std::__shared_weak_count *v178;
  unint64_t *v179;
  unint64_t v180;
  unint64_t v181;
  uint64_t v182;
  unint64_t *v183;
  unint64_t v184;
  std::__shared_weak_count *v185;
  unint64_t *v186;
  unint64_t v187;
  std::__shared_weak_count *v188;
  unint64_t *v189;
  unint64_t v190;
  std::__shared_weak_count *v191;
  unint64_t *v192;
  unint64_t v193;
  int v194;
  double v195;
  double v196;
  double *v197;
  unint64_t v198;
  _DWORD *v199;
  _DWORD *v200;
  _DWORD *v201;
  _DWORD *v202;
  int v203;
  unint64_t v204;
  double v205;
  unsigned int v206;
  unsigned int v207;
  uint64_t v208;
  uint64_t v209;
  int v210;
  double v211;
  int v212;
  double v213;
  int v214;
  double v215;
  int v216;
  double v217;
  int v218;
  double v219;
  int v220;
  double v221;
  int v222;
  double v223;
  int v224;
  double v225;
  uint64_t v226;
  int v227;
  BOOL v228;
  double v229;
  BOOL v230;
  double v231;
  double v232;
  BOOL v233;
  double v234;
  BOOL v235;
  double v236;
  BOOL v237;
  double v238;
  BOOL v239;
  double v240;
  BOOL v241;
  double v242;
  BOOL v243;
  double v244;
  double v245;
  double v246;
  unsigned int v247;
  double v248;
  char *v249;
  int v250;
  unsigned int v251;
  uint64_t v252;
  int v253;
  unint64_t v254;
  unint64_t v255;
  _QWORD *v257;
  size_t v258;
  void **v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  unsigned int v263;
  double v264;
  unsigned __int8 v265;
  uint64_t jj;
  uint64_t v267;
  unsigned __int8 v268;
  unsigned __int8 v269;
  uint64_t kk;
  uint64_t v271;
  unsigned __int8 v272;
  unsigned __int8 v273;
  uint64_t mm;
  uint64_t v275;
  unsigned __int8 v276;
  unsigned __int8 v277;
  uint64_t nn;
  uint64_t v279;
  unsigned __int8 v280;
  int v281;
  double *v282;
  uint64_t v283;
  unsigned __int8 v284;
  uint64_t i1;
  uint64_t v286;
  unsigned __int8 v287;
  unsigned __int8 v288;
  uint64_t i2;
  uint64_t v290;
  unsigned __int8 v291;
  unsigned __int8 v292;
  uint64_t i3;
  uint64_t v294;
  unsigned __int8 v295;
  unsigned __int8 v296;
  uint64_t i4;
  uint64_t v298;
  unsigned __int8 v299;
  int v300;
  double *v301;
  unint64_t v303;
  void **v304;
  void *v305;
  uint64_t v306;
  uint64_t v307;
  const char *v308;
  uint64_t v309;
  const char *v310;
  size_t v311;
  unsigned __int8 v312;
  const char *v313;
  size_t v314;
  _BYTE *v315;
  uint64_t v316;
  unint64_t v317;
  const char *v318;
  uint64_t v319;
  uint64_t v320;
  void *v321;
  uint64_t v322;
  uint64_t v323;
  NSObject *v324;
  size_t v325;
  std::__shared_weak_count_vtbl *v326;
  std::__shared_weak_count *v327;
  size_t v328;
  size_t v329;
  _QWORD *v330;
  void *v331;
  int v332;
  uint64_t v333;
  uint64_t v334;
  _QWORD *v335;
  char v336;
  _QWORD *v337;
  uint64_t v338;
  std::__shared_weak_count *v339;
  unint64_t *v340;
  unint64_t v341;
  void *v342;
  unint64_t *v343;
  unint64_t v344;
  std::__shared_weak_count *v345;
  unint64_t *v346;
  unint64_t v347;
  unint64_t v348;
  std::__shared_weak_count *v349;
  unint64_t *v350;
  unint64_t v351;
  uint64_t v352;
  char *v353;
  uint64_t v354;
  char *v355;
  uint64_t v356;
  char *v357;
  uint64_t v358;
  __int128 v359;
  void *v360;
  std::__shared_weak_count *v361;
  unint64_t *v362;
  unint64_t v363;
  std::__shared_weak_count *v364;
  unint64_t *v365;
  unint64_t v366;
  _QWORD *v367;
  std::__shared_weak_count *v368;
  unint64_t *v369;
  unint64_t v370;
  std::__shared_weak_count *v371;
  unint64_t *v372;
  unint64_t v373;
  std::__shared_weak_count *v374;
  unint64_t *v375;
  unint64_t v376;
  std::__shared_weak_count *v377;
  unint64_t *v378;
  unint64_t v379;
  const char *v380;
  std::__shared_weak_count *v381;
  unint64_t *v382;
  unint64_t v383;
  uint64_t v384;
  uint64_t v385;
  uint64_t v386;
  uint64_t v387;
  int v388;
  unint64_t v389;
  unint64_t v390;
  _QWORD *v392;
  _QWORD *v393;
  _QWORD *v394;
  size_t v395;
  void **v396;
  unint64_t v397;
  void **v398;
  void *v399;
  uint64_t v400;
  uint64_t v401;
  void **v402;
  uint64_t v403;
  const char *v404;
  size_t v405;
  unsigned __int8 v406;
  unsigned __int8 v407;
  const char *v408;
  size_t v409;
  _BYTE *v410;
  uint64_t v411;
  uint64_t v412;
  int v413;
  void *v414;
  NSObject *v415;
  uint64_t v416;
  uint64_t v417;
  size_t v418;
  std::__shared_weak_count_vtbl *v419;
  std::__shared_weak_count *v420;
  size_t v421;
  size_t v422;
  _QWORD *v423;
  void *v424;
  uint64_t v425;
  uint64_t v426;
  _QWORD *v427;
  char v428;
  _QWORD *v429;
  uint64_t v430;
  std::__shared_weak_count *v431;
  unint64_t *v432;
  unint64_t v433;
  void *v434;
  unint64_t *v435;
  unint64_t v436;
  std::__shared_weak_count *v437;
  unint64_t *v438;
  unint64_t v439;
  unint64_t v440;
  std::__shared_weak_count *v441;
  unint64_t *v442;
  unint64_t v443;
  uint64_t v444;
  char *v445;
  uint64_t v446;
  char *v447;
  uint64_t v448;
  const char *v449;
  uint64_t v450;
  __int128 v451;
  void *v452;
  std::__shared_weak_count *v453;
  unint64_t *v454;
  unint64_t v455;
  std::__shared_weak_count *v456;
  unint64_t *v457;
  unint64_t v458;
  _QWORD *v459;
  std::__shared_weak_count *v460;
  unint64_t *v461;
  unint64_t v462;
  std::__shared_weak_count *v463;
  unint64_t *v464;
  unint64_t v465;
  std::__shared_weak_count *v466;
  unint64_t *v467;
  unint64_t v468;
  std::__shared_weak_count *v469;
  unint64_t *v470;
  unint64_t v471;
  const char *v472;
  std::__shared_weak_count *v473;
  unint64_t *v474;
  unint64_t v475;
  _QWORD *v476;
  const char *v477;
  size_t v478;
  _BOOL4 v480;
  uint64_t v481;
  double *v482;
  uint64_t v483;
  void *v484;
  void *v485;
  _DWORD *v486;
  uint64_t v487;
  void *v488;
  void *v489;
  void *v490;
  _QWORD *v491;
  void *v492;
  _DWORD *v493;
  void *v494;
  uint64_t v495;
  _QWORD *v496;
  uint64_t v497;
  uint64_t v498;
  const char *v499;
  void *v500;
  void *v501;
  double *v502;
  uint64_t v503;
  uint64_t v504;
  unsigned int v505;
  uint64_t v506;
  unint64_t v507;
  unint64_t v508;
  uint64_t v509;
  uint64_t v510;
  uint64_t v511;
  const char *v512;
  const char *v513;
  char *__sa;
  char *__s;
  unsigned int v516;
  _DWORD *v517;
  unsigned int v518;
  char *v519;
  char *v520;
  unsigned int v521;
  int v522;
  int v523;
  int v524;
  unsigned int v525;
  _DWORD *v526;
  uint64_t v527;
  timespec v528;
  uint64_t v529;
  _DWORD v530[2];
  _QWORD v531[2];
  uint64_t v532;
  int v533;
  _QWORD v534[2];
  uint64_t v535;
  int v536;
  _QWORD v537[2];
  uint64_t v538;
  int v539;
  _QWORD v540[2];
  uint64_t v541;
  int v542;
  _QWORD v543[2];
  uint64_t v544;
  int v545;
  _QWORD v546[2];
  uint64_t v547;
  int v548;
  _QWORD v549[2];
  uint64_t v550;
  int v551;
  uint64_t *v552;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep rep;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v554;
  int v555;
  const char *v556;
  int v557;
  const char *v558;
  void *v559;
  std::__shared_weak_count *v560;
  void **__dst;
  size_t v562;
  int64_t v563;
  uint64_t v564;
  void *v565[2];
  std::__shared_weak_count *v566;
  char *v567;
  std::__shared_weak_count *v568;
  _QWORD *v569;
  __int128 v570;
  _BYTE object[24];
  __int128 v572;
  void *v573;
  size_t v574;
  unint64_t v575;
  std::__shared_weak_count *v576;
  _QWORD v577[2];
  void *v578;
  void *v579;
  uint64_t v580;
  _QWORD v581[2];
  _BYTE v582[16];
  unint64_t v583;
  void *v584;
  unint64_t v585;
  char v586;
  __int128 v587;
  __int128 v588;
  void *__p;
  uint64_t v590;
  char v591;
  uint64_t v592;

  v11 = a5;
  v12 = (uint64_t)a1;
  v592 = *MEMORY[0x24BDAC8D0];
  v480 = sub_20EFEF280(a1, a2, a3, *a4, a4[1], a5);
  sub_20EFF3AFC(v12, v480);
  sub_20EFF4344(v12, a8);
  v19 = *(_BYTE *)(v12 + 108);
  if (v19)
  {
    if (!*(_BYTE *)(v12 + 109))
    {
      *(_BYTE *)(v12 + 337) = 1;
      v32 = atomic_load((unsigned __int8 *)&qword_254A618B0);
      v496 = v11;
      if ((v32 & 1) != 0)
        goto LABEL_5;
      goto LABEL_16;
    }
    v19 = *(_DWORD *)(v12 + 140) < *(_DWORD *)(v12 + 100);
  }
  *(_BYTE *)(v12 + 337) = v19;
  v20 = atomic_load((unsigned __int8 *)&qword_254A618B0);
  v496 = v11;
  if ((v20 & 1) != 0)
    goto LABEL_5;
LABEL_16:
  if (__cxa_guard_acquire(&qword_254A618B0))
  {
    qword_254A618C8 = 0;
    qword_254A618D0 = 0;
    v33 = operator new(0x20uLL);
    v33[1] = 0;
    v33[2] = 0;
    *v33 = &off_24C9F6898;
    *((_WORD *)v33 + 12) = 0;
    qword_254A618C8 = (uint64_t)(v33 + 3);
    qword_254A618D0 = (uint64_t)v33;
    __cxa_atexit((void (*)(void *))sub_20EFF38D8, &qword_254A618C8, &dword_20E81F000);
    __cxa_guard_release(&qword_254A618B0);
    v11 = v496;
  }
LABEL_5:
  if (!sub_20EFF3940((BOOL **)&qword_254A618C8, 0, v13, v14, v15, v16, v17, v18, *(unsigned __int8 *)(v12 + 337)))goto LABEL_31;
  v21 = v12;
  v22 = sub_210219C18();
  v23 = atomic_load((unsigned __int8 *)&qword_254A6DDD0);
  if ((v23 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DDD0))
  {
    __cxa_atexit((void (*)(void *))sub_21021A250, &stru_254A5A410, &dword_20E81F000);
    __cxa_guard_release(&qword_254A6DDD0);
  }
  if (atomic_load(&qword_254A5A450))
  {
    v25 = *(unsigned __int8 *)(v21 + 337);
    LODWORD(v578) = 67109120;
    HIDWORD(v578) = v25;
    v26 = (char *)_os_log_send_and_compose_impl();
    v27 = strlen(v26);
    v528.tv_sec = 0;
    pthread_threadid_np(0, (__uint64_t *)&v528);
    tv_sec = v528.tv_sec;
    timespec_get(&v528, 1);
    sub_210219E20(&v578, 0xEEEEB0B5B2B2EEEELL, "CameraAllocation", 0x10uLL, (__int128 *)(v22 + 1), (__int128 *)(v22 + 5), "[CA] Low inlier mode: %{BOOL}d", 0x1EuLL, v26, v27, tv_sec, &v528);
    std::mutex::lock(&stru_254A5A410);
    v29 = qword_254A5A458;
    for (i = unk_254A5A460; v29 != i; v29 += 40)
    {
      v31 = *(_QWORD *)(v29 + 32);
      if (!v31)
        sub_20E86D37C();
      (*(void (**)(uint64_t, void **))(*(_QWORD *)v31 + 48))(v31, &v578);
    }
    std::mutex::unlock(&stru_254A5A410);
    if (v591 < 0)
    {
      operator delete(__p);
      v11 = v496;
      if ((SHIBYTE(v588) & 0x80000000) == 0)
      {
LABEL_13:
        if (!(_BYTE)v587)
        {
LABEL_22:
          if ((_BYTE)v583 && (v582[15] & 0x80000000) != 0)
            operator delete((void *)v581[1]);
          if (SHIBYTE(v581[0]) < 0)
            operator delete(v579);
          if (v26)
            free(v26);
          goto LABEL_29;
        }
LABEL_20:
        if (v586 < 0)
          operator delete(v584);
        goto LABEL_22;
      }
    }
    else
    {
      v11 = v496;
      if ((SHIBYTE(v588) & 0x80000000) == 0)
        goto LABEL_13;
    }
    operator delete(*((void **)&v587 + 1));
    if (!(_BYTE)v587)
      goto LABEL_22;
    goto LABEL_20;
  }
LABEL_29:
  v34 = os_signpost_enabled((os_log_t)*v22);
  v12 = v21;
  if (v34)
  {
    v35 = *(unsigned __int8 *)(v21 + 337);
    LODWORD(v578) = 67109120;
    HIDWORD(v578) = v35;
    _os_signpost_emit_unreliably_with_name_impl();
  }
LABEL_31:
  if ((a7 & 1) == 0)
  {
    sub_20EFF2E4C(v12, *a4, a4[1], 1.0, 1.0);
    return 1;
  }
  if (!*(_BYTE *)(v12 + 337))
  {
    v194 = *(unsigned __int8 *)(v12 + 336);
    if (v194 == 2)
    {
      v195 = *(double *)(v12 + 24);
      v197 = (double *)(v12 + 24);
      goto LABEL_560;
    }
    if (v194 == 1)
    {
      v195 = *(double *)(v12 + 16);
    }
    else
    {
      if (!*(_BYTE *)(v12 + 336))
      {
LABEL_322:
        v194 = 0;
        v195 = *(double *)(v12 + 8);
        goto LABEL_323;
      }
      v195 = 0.0;
    }
LABEL_323:
    if (v194 == 1)
    {
      v197 = (double *)(v12 + 16);
    }
    else
    {
      v196 = 0.0;
      if (v194)
      {
LABEL_561:
        sub_20EFF2E4C(v12, *a4, a4[1], v195, 1.0 - v196);
        return v480;
      }
      v197 = (double *)(v12 + 8);
    }
LABEL_560:
    v196 = *v197;
    goto LABEL_561;
  }
  if (*(_DWORD *)(v12 + 96) <= a6 && !*(_BYTE *)(v12 + 336))
    goto LABEL_322;
  v528.tv_sec = 0;
  v528.tv_nsec = 0;
  v529 = 0;
  v530[0] = -1;
  v531[1] = 0;
  v532 = 0;
  v531[0] = 0;
  v533 = -1;
  v534[1] = 0;
  v535 = 0;
  v534[0] = 0;
  v536 = -1;
  v537[1] = 0;
  v538 = 0;
  v537[0] = 0;
  v539 = -1;
  v540[1] = 0;
  v540[0] = 0;
  v541 = 0;
  v542 = -1;
  v543[1] = 0;
  v543[0] = 0;
  v544 = 0;
  v545 = -1;
  v546[1] = 0;
  v546[0] = 0;
  v547 = 0;
  v548 = -1;
  v549[1] = 0;
  v549[0] = 0;
  v550 = 0;
  v551 = -1;
  v36 = *a4;
  v481 = a4[1];
  v503 = v12;
  if (*a4 != v481)
  {
    v516 = 0;
    v37 = 0;
    v482 = (double *)(v12 + 64);
    v502 = (double *)(v12 + 56);
    v494 = *(void **)(MEMORY[0x24BEDB7F0] + 16);
    v492 = *(void **)(MEMORY[0x24BEDB7F0] + 24);
    v491 = *(_QWORD **)(MEMORY[0x24BEDB7F0] + 32);
    v490 = *(void **)(MEMORY[0x24BEDB7F0] + 40);
    v489 = *(void **)(MEMORY[0x24BEDB7F0] + 48);
    v488 = *(void **)(MEMORY[0x24BEDB7F0] + 8);
    v484 = *(void **)(MEMORY[0x24BEDB7F0] + 64);
    v485 = (void *)*MEMORY[0x24BEDB7F0];
    v483 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
    v487 = MEMORY[0x24BEDB848] + 16;
    while (1)
    {
      v38 = *(_QWORD *)(v36 + 32) - *(_QWORD *)(v36 + 24);
      if (v38)
        break;
LABEL_37:
      v36 += 240;
      if (v36 == v481)
        goto LABEL_327;
    }
    v39 = 0;
    v507 = *(_QWORD *)(v36 + 32) - *(_QWORD *)(v36 + 24);
    v511 = v38 >> 4;
    v521 = *(_DWORD *)v36;
    v505 = *(_DWORD *)v36 << 16;
    v504 = v36;
    while (1)
    {
      __sa = (char *)(*(_QWORD *)(v36 + 24) + 16 * v39);
      v40 = *(_QWORD *)__sa;
      if (!*(_BYTE *)(*(_QWORD *)__sa + 48))
        goto LABEL_42;
      v525 = *(_DWORD *)(v40 + 40);
      if (*(_DWORD *)(v40 + 32) >= v525)
        v41 = *(_DWORD *)(v40 + 40);
      else
        v41 = *(_DWORD *)(v40 + 32);
      v518 = v37;
      if (*(_BYTE *)(v40 + 184))
      {
        v42 = *(_QWORD *)(v40 + 88) - *(_QWORD *)(v40 + 80);
        if (v42)
          v43 = v42 == *(_QWORD *)(v40 + 168) - *(_QWORD *)(v40 + 160);
        else
          v43 = 0;
        if (!v43 || (v44 = (uint64_t)(*(_QWORD *)(v40 + 64) - *(_QWORD *)(v40 + 56)) >> 5, v44 != v42 >> 6))
        {
LABEL_58:
          sub_21023D70C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/FeatureDetection/include/VIO/FeatureDetection/PointDescriptorStore.h", 184, (uint64_t)"HasValidSize()", 14, (uint64_t)"Descriptor size mis-match", 25, (void (*)(void **))sub_21023DDB0);
          v46 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
          if ((v46 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
          {
            __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
            __cxa_guard_release(&qword_254A6DE78);
          }
          if (!byte_254A6DE68 || byte_254A6DE70)
          {
            v47 = qword_254A6DE40;
            for (j = qword_254A6DE48; v47 != j; v47 += 16)
              (*(void (**)(_QWORD, const char *, uint64_t, const char *, uint64_t))v47)(*(_QWORD *)(v47 + 8), "HasValidSize()", 14, "Descriptor size mis-match", 25);
          }
          v49 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
          if ((v49 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
          {
            __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
            __cxa_guard_release(&qword_254A6DE78);
          }
          if (!byte_254A6DE68)
            abort();
          qword_254A6DE58(unk_254A6DE60, "HasValidSize()", 14, "Descriptor size mis-match", 25);
          v44 = (uint64_t)(*(_QWORD *)(v40 + 64) - *(_QWORD *)(v40 + 56)) >> 5;
          v45 = *(_QWORD *)(v40 + 16);
          goto LABEL_66;
        }
      }
      else
      {
        if (*(_QWORD *)(v40 + 160) != *(_QWORD *)(v40 + 168))
          goto LABEL_58;
        v44 = (uint64_t)(*(_QWORD *)(v40 + 64) - *(_QWORD *)(v40 + 56)) >> 5;
        if (v44 != (uint64_t)(*(_QWORD *)(v40 + 88) - *(_QWORD *)(v40 + 80)) >> 6)
          goto LABEL_58;
      }
      v45 = *(_QWORD *)(v40 + 16);
      if (v45 > v44)
        goto LABEL_58;
LABEL_66:
      if (v521 >= 0x10000)
      {
        sub_21023D70C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/ComputerVisionTypes/include/VIO/ComputerVisionTypes/CameraStreamId.h", 38, (uint64_t)"camera_id <= 0xffff", 19, (uint64_t)"Camera ID cannot exceeds 16 bits", 32, (void (*)(void **))sub_21023DDB0);
        v50 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
        if ((v50 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
        {
          __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
          __cxa_guard_release(&qword_254A6DE78);
        }
        if (!byte_254A6DE68 || byte_254A6DE70)
        {
          v51 = qword_254A6DE40;
          for (k = qword_254A6DE48; v51 != k; v51 += 16)
            (*(void (**)(_QWORD, const char *, uint64_t, const char *, uint64_t))v51)(*(_QWORD *)(v51 + 8), "camera_id <= 0xffff", 19, "Camera ID cannot exceeds 16 bits", 32);
        }
        v53 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
        if ((v53 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
        {
          __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
          __cxa_guard_release(&qword_254A6DE78);
        }
        if (!byte_254A6DE68)
          abort();
        qword_254A6DE58(unk_254A6DE60, "camera_id <= 0xffff", 19, "Camera ID cannot exceeds 16 bits", 32);
      }
      if (v39 >= 0x10000)
      {
        sub_21023D70C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/ComputerVisionTypes/include/VIO/ComputerVisionTypes/CameraStreamId.h", 39, (uint64_t)"stream_id <= 0xffff", 19, (uint64_t)"Stream ID cannot exceeds 16 bits", 32, (void (*)(void **))sub_21023DDB0);
        v54 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
        if ((v54 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
        {
          __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
          __cxa_guard_release(&qword_254A6DE78);
        }
        if (!byte_254A6DE68 || byte_254A6DE70)
        {
          v55 = qword_254A6DE40;
          for (m = qword_254A6DE48; v55 != m; v55 += 16)
            (*(void (**)(_QWORD, const char *, uint64_t, const char *, uint64_t))v55)(*(_QWORD *)(v55 + 8), "stream_id <= 0xffff", 19, "Stream ID cannot exceeds 16 bits", 32);
        }
        v57 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
        if ((v57 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
        {
          __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
          __cxa_guard_release(&qword_254A6DE78);
        }
        if (!byte_254A6DE68)
          abort();
        qword_254A6DE58(unk_254A6DE60, "stream_id <= 0xffff", 19, "Stream ID cannot exceeds 16 bits", 32);
      }
      if (v521 >= 0x10000)
      {
        sub_21023D70C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/ComputerVisionTypes/include/VIO/ComputerVisionTypes/CameraStreamId.h", 49, (uint64_t)"camera_id <= 0xffff", 19, (uint64_t)"Camera ID cannot exceeds 16 bits", 32, (void (*)(void **))sub_21023DDB0);
        v58 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
        if ((v58 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
        {
          __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
          __cxa_guard_release(&qword_254A6DE78);
        }
        if (!byte_254A6DE68 || byte_254A6DE70)
        {
          v59 = qword_254A6DE40;
          for (n = qword_254A6DE48; v59 != n; v59 += 16)
            (*(void (**)(_QWORD, const char *, uint64_t, const char *, uint64_t))v59)(*(_QWORD *)(v59 + 8), "camera_id <= 0xffff", 19, "Camera ID cannot exceeds 16 bits", 32);
        }
        v61 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
        if ((v61 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
        {
          __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
          __cxa_guard_release(&qword_254A6DE78);
        }
        if (!byte_254A6DE68)
          abort();
        qword_254A6DE58(unk_254A6DE60, "camera_id <= 0xffff", 19, "Camera ID cannot exceeds 16 bits", 32);
      }
      if (v39 >= 0x10000)
      {
        sub_21023D70C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/ComputerVisionTypes/include/VIO/ComputerVisionTypes/CameraStreamId.h", 50, (uint64_t)"stream_id <= 0xffff", 19, (uint64_t)"Stream ID cannot exceeds 16 bits", 32, (void (*)(void **))sub_21023DDB0);
        v62 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
        if ((v62 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
        {
          __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
          __cxa_guard_release(&qword_254A6DE78);
        }
        if (!byte_254A6DE68 || byte_254A6DE70)
        {
          v63 = qword_254A6DE40;
          for (ii = qword_254A6DE48; v63 != ii; v63 += 16)
            (*(void (**)(_QWORD, const char *, uint64_t, const char *, uint64_t))v63)(*(_QWORD *)(v63 + 8), "stream_id <= 0xffff", 19, "Stream ID cannot exceeds 16 bits", 32);
        }
        v65 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
        if ((v65 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
        {
          __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
          __cxa_guard_release(&qword_254A6DE78);
        }
        if (!byte_254A6DE68)
          abort();
        qword_254A6DE58(unk_254A6DE60, "stream_id <= 0xffff", 19, "Stream ID cannot exceeds 16 bits", 32);
      }
      v66 = (unsigned __int16)v39 | v505;
      v67 = v11[1];
      v68 = v518;
      if ((v67 & (v67 - 1)) != 0)
      {
        v70 = (unsigned __int16)v39 | v505;
        if (v67 <= v66)
          v70 = v66 % v67;
        v69 = *(uint64_t **)(*v11 + 8 * v70);
        do
        {
          do
            v69 = (uint64_t *)*v69;
          while (v69[1] != v66);
        }
        while (*((_DWORD *)v69 + 4) != (_DWORD)v66);
      }
      else
      {
        v69 = *(uint64_t **)(*v11 + 8 * (((_DWORD)v67 - 1) & v66));
        do
        {
          do
            v69 = (uint64_t *)*v69;
          while (v69[1] != v66);
        }
        while (*((_DWORD *)v69 + 4) != (_DWORD)v66);
      }
      v71 = v44 - v45;
      v72 = *((_DWORD *)v69 + 5);
      v73 = 1.0 / (double)v41;
      v74 = (double)v71;
      if (!v41)
        v73 = 1.0;
      if (!v71)
        v74 = 1.0;
      v75 = v73 + (double)v72 / v74;
      if (v507 >= 0x11)
      {
        v76 = v502;
        if (!*(_BYTE *)(v503 + 336))
          goto LABEL_120;
        if (*(_BYTE *)(v503 + 336) == 1)
        {
          v76 = v482;
LABEL_120:
          v75 = v75 * *v76;
        }
      }
      v77 = &v528 + 2 * v518;
      *(double *)&v77->tv_sec = v75;
      LODWORD(v77->tv_nsec) = v72;
      HIDWORD(v77->tv_nsec) = v525;
      LODWORD(v77[1].tv_sec) = v41;
      HIDWORD(v77[1].tv_sec) = v71;
      LODWORD(v77[1].tv_nsec) = v66;
      v78 = atomic_load((unsigned __int8 *)&qword_254A618C0);
      if ((v78 & 1) == 0 && __cxa_guard_acquire(&qword_254A618C0))
      {
        sub_21021D3D8(object);
        sub_20E8610C0(&v578, "cv3d.vio.odometry");
        sub_20E8C4068((uint64_t **)object, (uint64_t)&v578, &qword_254A618B8);
        if (SHIBYTE(v580) < 0)
          operator delete(v578);
        __cxa_guard_release(&qword_254A618C0);
        v11 = v496;
        v68 = v518;
      }
      v564 = qword_254A618B8;
      if (**(int **)(qword_254A618B8 + 56) > 2)
        goto LABEL_41;
      v79 = *(unsigned __int8 *)(qword_254A618B8 + 72);
      v508 = sub_20E8C31DC(qword_254A618B8, "OSLogSurrogateAppender", 1, 0);
      if (!v79 && !v508)
        goto LABEL_41;
      v80 = MEMORY[0x24BEDB858];
      v81 = MEMORY[0x24BEDB858] + 104;
      v590 = MEMORY[0x24BEDB858] + 104;
      v82 = MEMORY[0x24BEDB858] + 64;
      v580 = MEMORY[0x24BEDB858] + 64;
      v578 = v494;
      *(void **)((char *)&v578 + *((_QWORD *)v494 - 3)) = v492;
      v579 = 0;
      v83 = (std::ios_base *)((char *)&v578 + *((_QWORD *)v578 - 3));
      std::ios_base::init(v83, v581);
      v83[1].__vftable = 0;
      v83[1].__fmtflags_ = -1;
      v580 = (uint64_t)v491;
      *(_QWORD *)((char *)&v581[-1] + *(v491 - 3)) = v490;
      v578 = v488;
      *(void **)((char *)&v578 + *((_QWORD *)v488 - 3)) = v489;
      v590 = v81;
      v578 = (void *)(v80 + 24);
      v580 = v82;
      std::streambuf::basic_streambuf();
      v581[0] = v487;
      v587 = 0u;
      v588 = 0u;
      LODWORD(__p) = 24;
      sub_20E86A980(&v580, (uint64_t)"[CA] camera: [", 14);
      v11 = v496;
      v84 = (_QWORD *)std::ostream::operator<<();
      sub_20E86A980(v84, (uint64_t)",", 1);
      v85 = (_QWORD *)std::ostream::operator<<();
      *(_QWORD *)((char *)v85 + *(_QWORD *)(*v85 - 24) + 16) = 3;
      sub_20E86A980(v85, (uint64_t)" num_inliers: ", 14);
      v86 = (_QWORD *)std::ostream::operator<<();
      sub_20E86A980(v86, (uint64_t)" num_budget_points: ", 20);
      v87 = (_QWORD *)std::ostream::operator<<();
      sub_20E86A980(v87, (uint64_t)" num_pts_after_pruning: ", 24);
      v88 = (_QWORD *)std::ostream::operator<<();
      sub_20E86A980(v88, (uint64_t)" weight: ", 9);
      v89 = (_QWORD *)std::ostream::operator<<();
      sub_20E86A980(v89, (uint64_t)" reloc_only: ", 13);
      std::ostream::operator<<();
      if ((__p & 0x10) != 0)
      {
        v92 = *((_QWORD *)&v588 + 1);
        v93 = &v584;
        if (*((_QWORD *)&v588 + 1) < v585)
        {
          *((_QWORD *)&v588 + 1) = v585;
          v92 = v585;
          v93 = &v584;
        }
      }
      else
      {
        if ((__p & 8) == 0)
        {
          v90 = 0;
          HIBYTE(v563) = 0;
          p_dst = (void **)&__dst;
          goto LABEL_139;
        }
        v92 = v583;
        v93 = (void **)v582;
      }
      v94 = *v93;
      v90 = v92 - (_QWORD)*v93;
      if (v90 > 0x7FFFFFFFFFFFFFF7)
        sub_20E860B7C();
      if (v90 >= 0x17)
      {
        v95 = (v90 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v90 | 7) != 0x17)
          v95 = v90 | 7;
        v96 = v95 + 1;
        p_dst = (void **)operator new(v95 + 1);
        v563 = v96 | 0x8000000000000000;
        __dst = p_dst;
        v562 = v90;
LABEL_138:
        memmove(p_dst, v94, v90);
        goto LABEL_139;
      }
      HIBYTE(v563) = v92 - *(_BYTE *)v93;
      p_dst = (void **)&__dst;
      if (v90)
        goto LABEL_138;
LABEL_139:
      *((_BYTE *)p_dst + v90) = 0;
      v552 = &v564;
      rep = std::chrono::steady_clock::now().__d_.__rep_;
      v554 = std::chrono::system_clock::now().__d_.__rep_;
      v555 = 2;
      v556 = "unknown file";
      v557 = 356;
      v558 = "unknown function";
      v559 = 0;
      v560 = 0;
      v97 = (void **)&__dst;
      if (v563 < 0)
        v97 = __dst;
      __s = (char *)v97;
      v98 = *v552;
      v99 = (const char *)(*v552 + 16);
      v497 = *v552;
      v499 = v99;
      if (*(char *)(*v552 + 39) < 0)
      {
        v99 = *(const char **)(v98 + 16);
        v100 = *(_QWORD *)(v98 + 24);
        v102 = atomic_load((unsigned __int8 *)&qword_254A4A510);
        if ((v102 & 1) != 0)
          goto LABEL_145;
      }
      else
      {
        v100 = *(unsigned __int8 *)(*v552 + 39);
        v101 = atomic_load((unsigned __int8 *)&qword_254A4A510);
        if ((v101 & 1) != 0)
          goto LABEL_145;
      }
      if (__cxa_guard_acquire(&qword_254A4A510))
      {
        sub_20E9E46F8((uint64_t)v565);
        sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)v565);
        if ((_BYTE)v567 && SHIBYTE(v566) < 0)
          operator delete(v565[0]);
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
        __cxa_guard_release(&qword_254A4A510);
        v11 = v496;
      }
LABEL_145:
      if (byte_254A4A4F8[23] >= 0)
        v103 = byte_254A4A4F8;
      else
        v103 = *(const char **)byte_254A4A4F8;
      if (byte_254A4A4F8[23] >= 0)
        v104 = byte_254A4A4F8[23];
      else
        v104 = *(_QWORD *)&byte_254A4A4F8[8];
      *(_QWORD *)object = os_log_create(v103, v99);
      if (v104 > 0x7FFFFFFFFFFFFFF7)
        sub_20E860B7C();
      if (v104 >= 0x17)
      {
        v106 = (v104 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v104 | 7) != 0x17)
          v106 = v104 | 7;
        v107 = v106 + 1;
        v105 = operator new(v106 + 1);
        *(_QWORD *)&v572 = v107 | 0x8000000000000000;
        *(_QWORD *)&object[8] = v105;
        *(_QWORD *)&object[16] = v104;
LABEL_158:
        memmove(v105, v103, v104);
        goto LABEL_159;
      }
      BYTE7(v572) = v104;
      v105 = &object[8];
      if (v104)
        goto LABEL_158;
LABEL_159:
      v105[v104] = 0;
      BYTE8(v572) = 1;
      if (v100 > 0x7FFFFFFFFFFFFFF7)
        sub_20E860B7C();
      v68 = v518;
      if (v100 >= 0x17)
      {
        v111 = (v100 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v100 | 7) != 0x17)
          v111 = v100 | 7;
        v112 = v111 + 1;
        v108 = operator new(v111 + 1);
        v575 = v112 | 0x8000000000000000;
        v573 = v108;
        v574 = v100;
      }
      else
      {
        HIBYTE(v575) = v100;
        v108 = &v573;
        if (!v100)
        {
          LOBYTE(v573) = 0;
          LOBYTE(v576) = 1;
          v109 = *(NSObject **)object;
          if ((SHIBYTE(v575) & 0x80000000) == 0)
            goto LABEL_163;
          goto LABEL_169;
        }
      }
      memmove(v108, v99, v100);
      *((_BYTE *)v108 + v100) = 0;
      LOBYTE(v576) = 1;
      v109 = *(NSObject **)object;
      if ((SHIBYTE(v575) & 0x80000000) == 0)
      {
LABEL_163:
        v110 = v508;
        if (!BYTE8(v572))
          goto LABEL_172;
        goto LABEL_170;
      }
LABEL_169:
      operator delete(v573);
      v110 = v508;
      if (!BYTE8(v572))
        goto LABEL_172;
LABEL_170:
      if (SBYTE7(v572) < 0)
        operator delete(*(void **)&object[8]);
LABEL_172:
      if (*(_QWORD *)object)
        os_release(*(void **)object);
      if (!v110 || !*(_QWORD *)(v110 + 24))
      {
        os_log_type_enabled(v109, OS_LOG_TYPE_DEBUG);
        *(_DWORD *)object = 136315138;
        *(_QWORD *)&object[4] = __s;
        v119 = (void *)_os_log_send_and_compose_impl();
        if (v119)
          free(v119);
        goto LABEL_247;
      }
      v113 = _os_log_pack_size();
      v114 = (std::__shared_weak_count_vtbl *)operator new(v113, (std::align_val_t)8uLL);
      v115 = (std::__shared_weak_count *)operator new();
      v115->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
      v115->__shared_owners_ = 0;
      v115->__shared_weak_owners_ = 0;
      v115[1].__vftable = v114;
      v565[0] = v114;
      v565[1] = v114;
      v566 = v115;
      v567 = 0;
      v568 = 0;
      v116 = strlen(__s);
      if (v116 > 0x7FFFFFFFFFFFFFF7)
        sub_20E860B7C();
      v117 = v116;
      if (v116 >= 0x17)
      {
        v120 = (v116 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v116 | 7) != 0x17)
          v120 = v116 | 7;
        v121 = v120 + 1;
        v118 = operator new(v120 + 1);
        *((_QWORD *)&v570 + 1) = v121 | 0x8000000000000000;
        v569 = v118;
        *(_QWORD *)&v570 = v117;
      }
      else
      {
        HIBYTE(v570) = v116;
        v118 = &v569;
        if (!v116)
          goto LABEL_186;
      }
      memcpy(v118, __s, v117);
LABEL_186:
      *((_BYTE *)v118 + v117) = 0;
      v122 = v569;
      v577[0] = v570;
      *(_QWORD *)((char *)v577 + 7) = *(_QWORD *)((char *)&v570 + 7);
      v123 = HIBYTE(v570);
      v124 = operator new(0x38uLL);
      v124[1] = 0;
      v124[2] = 0;
      v124[3] = off_24C9ABC20;
      *v124 = &off_24C9ABBD0;
      v125 = v577[0];
      v124[4] = v122;
      v124[5] = v125;
      *(_QWORD *)((char *)v124 + 47) = *(_QWORD *)((char *)v577 + 7);
      *((_BYTE *)v124 + 55) = v123;
      v577[0] = 0;
      *(_QWORD *)((char *)v577 + 7) = 0;
      v126 = v568;
      v567 = (char *)(v124 + 3);
      v568 = (std::__shared_weak_count *)v124;
      if (!v126)
        goto LABEL_190;
      p_shared_owners = (unint64_t *)&v126->__shared_owners_;
      do
        v128 = __ldaxr(p_shared_owners);
      while (__stlxr(v128 - 1, p_shared_owners));
      if (!v128)
      {
        ((void (*)(std::__shared_weak_count *))v126->__on_zero_shared)(v126);
        std::__shared_weak_count::__release_weak(v126);
        *(_OWORD *)object = *(_OWORD *)v565;
        v129 = v567;
        v130 = v566;
        *(_QWORD *)&object[16] = v566;
        if (!v566)
          goto LABEL_193;
      }
      else
      {
LABEL_190:
        *(_OWORD *)object = *(_OWORD *)v565;
        v129 = v567;
        v130 = v566;
        *(_QWORD *)&object[16] = v566;
        if (!v566)
          goto LABEL_193;
      }
      v131 = (unint64_t *)&v130->__shared_owners_;
      do
        v132 = __ldxr(v131);
      while (__stxr(v132 + 1, v131));
LABEL_193:
      v133 = v568;
      *(_QWORD *)&v572 = v129;
      *((_QWORD *)&v572 + 1) = v568;
      if (v568)
      {
        v134 = (unint64_t *)&v568->__shared_owners_;
        do
          v135 = __ldxr(v134);
        while (__stxr(v135 + 1, v134));
        v573 = v129;
        do
          v136 = __ldaxr(v134);
        while (__stlxr(v136 - 1, v134));
        if (!v136)
        {
          ((void (*)(std::__shared_weak_count *))v133->__on_zero_shared)(v133);
          std::__shared_weak_count::__release_weak(v133);
        }
      }
      else
      {
        v573 = v129;
      }
      v137 = v566;
      if (v566)
      {
        v138 = (unint64_t *)&v566->__shared_owners_;
        do
          v139 = __ldaxr(v138);
        while (__stlxr(v139 - 1, v138));
        if (!v139)
        {
          ((void (*)(std::__shared_weak_count *))v137->__on_zero_shared)(v137);
          std::__shared_weak_count::__release_weak(v137);
        }
      }
      v140 = *(_QWORD *)object;
      if (*((char *)v573 + 31) >= 0)
        v141 = (char *)v573 + 8;
      else
        v141 = (char *)*((_QWORD *)v573 + 1);
      v142 = _os_log_pack_fill();
      *(_DWORD *)v142 = 136315138;
      *(_QWORD *)(v142 + 4) = v141;
      v143 = (char *)operator new();
      v144 = *(unsigned __int8 *)(v497 + 39);
      v145 = *(const char **)(v497 + 16);
      v146 = *(_QWORD *)(v497 + 24);
      v147 = v572;
      *(_OWORD *)(v143 + 8) = *(_OWORD *)&object[8];
      if ((v144 & 0x80u) != 0)
        v144 = v146;
      else
        v145 = v499;
      *(_QWORD *)v143 = v140;
      *(_QWORD *)&object[8] = 0;
      *(_QWORD *)&object[16] = 0;
      *(_OWORD *)(v143 + 24) = v147;
      v572 = 0uLL;
      *((_QWORD *)v143 + 5) = v145;
      *((_QWORD *)v143 + 6) = v144;
      v143[56] = 2;
      v569 = 0;
      v565[0] = v143;
      (*(void (**)(_QWORD, void **))(**(_QWORD **)(v508 + 24) + 40))(*(_QWORD *)(v508 + 24), v565);
      v148 = v565[0];
      v565[0] = 0;
      if (!v148)
        goto LABEL_237;
      v149 = (std::__shared_weak_count *)*((_QWORD *)v148 + 4);
      if (!v149)
        goto LABEL_217;
      v150 = (unint64_t *)&v149->__shared_owners_;
      do
        v151 = __ldaxr(v150);
      while (__stlxr(v151 - 1, v150));
      if (!v151)
      {
        ((void (*)(std::__shared_weak_count *))v149->__on_zero_shared)(v149);
        std::__shared_weak_count::__release_weak(v149);
        v152 = (std::__shared_weak_count *)*((_QWORD *)v148 + 2);
        if (!v152)
          goto LABEL_225;
      }
      else
      {
LABEL_217:
        v152 = (std::__shared_weak_count *)*((_QWORD *)v148 + 2);
        if (!v152)
          goto LABEL_225;
      }
      v153 = (unint64_t *)&v152->__shared_owners_;
      do
        v154 = __ldaxr(v153);
      while (__stlxr(v154 - 1, v153));
      if (!v154)
      {
        ((void (*)(std::__shared_weak_count *))v152->__on_zero_shared)(v152);
        std::__shared_weak_count::__release_weak(v152);
      }
LABEL_225:
      MEMORY[0x212BC6398](v148, 0x10F0C40B62ED6C6);
      v155 = v569;
      v569 = 0;
      if (!v155)
        goto LABEL_237;
      v156 = (std::__shared_weak_count *)v155[4];
      if (!v156)
        goto LABEL_230;
      v157 = (unint64_t *)&v156->__shared_owners_;
      do
        v158 = __ldaxr(v157);
      while (__stlxr(v158 - 1, v157));
      if (!v158)
      {
        ((void (*)(std::__shared_weak_count *))v156->__on_zero_shared)(v156);
        std::__shared_weak_count::__release_weak(v156);
        v159 = (std::__shared_weak_count *)v155[2];
        if (v159)
        {
LABEL_231:
          v160 = (unint64_t *)&v159->__shared_owners_;
          do
            v161 = __ldaxr(v160);
          while (__stlxr(v161 - 1, v160));
          if (!v161)
          {
            ((void (*)(std::__shared_weak_count *))v159->__on_zero_shared)(v159);
            std::__shared_weak_count::__release_weak(v159);
          }
        }
      }
      else
      {
LABEL_230:
        v159 = (std::__shared_weak_count *)v155[2];
        if (v159)
          goto LABEL_231;
      }
      MEMORY[0x212BC6398](v155, 0x10F0C40B62ED6C6);
LABEL_237:
      v162 = (std::__shared_weak_count *)*((_QWORD *)&v572 + 1);
      if (!*((_QWORD *)&v572 + 1))
        goto LABEL_241;
      v163 = (unint64_t *)(*((_QWORD *)&v572 + 1) + 8);
      do
        v164 = __ldaxr(v163);
      while (__stlxr(v164 - 1, v163));
      if (!v164)
      {
        ((void (*)(std::__shared_weak_count *))v162->__on_zero_shared)(v162);
        std::__shared_weak_count::__release_weak(v162);
        v165 = *(std::__shared_weak_count **)&object[16];
        if (!*(_QWORD *)&object[16])
          goto LABEL_247;
      }
      else
      {
LABEL_241:
        v165 = *(std::__shared_weak_count **)&object[16];
        if (!*(_QWORD *)&object[16])
          goto LABEL_247;
      }
      v166 = (unint64_t *)&v165->__shared_owners_;
      do
        v167 = __ldaxr(v166);
      while (__stlxr(v167 - 1, v166));
      if (!v167)
      {
        ((void (*)(std::__shared_weak_count *))v165->__on_zero_shared)(v165);
        std::__shared_weak_count::__release_weak(v165);
      }
LABEL_247:
      if (v79)
      {
        v168 = (const char *)&__dst;
        if (v563 < 0)
          v168 = (const char *)__dst;
        sub_20E8C003C((uint64_t)&v552, "%s", v168);
        sub_20E863570((uint64_t)&v552);
      }
      v169 = v552;
      if (!v552)
        goto LABEL_278;
      v170 = (unint64_t)v559;
      if (!v559)
        goto LABEL_278;
      v171 = (_QWORD *)(*v552 + 16);
      if (*(char *)(*v552 + 39) < 0)
        v171 = (_QWORD *)*v171;
      v172 = rep;
      v173 = v554;
      v174 = v555;
      v175 = v556;
      v176 = v557;
      v177 = v558;
      v178 = v560;
      v565[0] = v559;
      v565[1] = v560;
      if (v560)
      {
        v179 = (unint64_t *)&v560->__shared_owners_;
        do
          v180 = __ldxr(v179);
        while (__stxr(v180 + 1, v179));
        *(_QWORD *)&object[8] = v172;
        *(_QWORD *)&object[16] = v173;
        LODWORD(v572) = v174;
        *((_QWORD *)&v572 + 1) = v175;
        LODWORD(v573) = v176;
        v574 = (size_t)v177;
        v575 = v170;
        v576 = v178;
        do
          v181 = __ldxr(v179);
        while (__stxr(v181 + 1, v179));
        *(_QWORD *)object = v171;
        v182 = *v169;
        if (v174 < **(_DWORD **)(*v169 + 56))
        {
LABEL_261:
          if (!v178)
            goto LABEL_268;
          goto LABEL_265;
        }
      }
      else
      {
        *(_QWORD *)&object[8] = rep;
        *(_QWORD *)&object[16] = v554;
        LODWORD(v572) = v555;
        *((_QWORD *)&v572 + 1) = v556;
        LODWORD(v573) = v557;
        v574 = (size_t)v558;
        v575 = (unint64_t)v559;
        v576 = 0;
        *(_QWORD *)object = v171;
        v182 = *v552;
        if (v555 < **(_DWORD **)(*v552 + 56))
          goto LABEL_261;
      }
      sub_20E8C3FC4(v182, (uint64_t)object);
      v178 = v576;
      if (!v576)
        goto LABEL_268;
LABEL_265:
      v183 = (unint64_t *)&v178->__shared_owners_;
      do
        v184 = __ldaxr(v183);
      while (__stlxr(v184 - 1, v183));
      if (!v184)
      {
        ((void (*)(std::__shared_weak_count *))v178->__on_zero_shared)(v178);
        std::__shared_weak_count::__release_weak(v178);
        v185 = (std::__shared_weak_count *)v565[1];
        if (!v565[1])
          goto LABEL_274;
        goto LABEL_269;
      }
LABEL_268:
      v185 = (std::__shared_weak_count *)v565[1];
      if (!v565[1])
        goto LABEL_274;
LABEL_269:
      v186 = (unint64_t *)&v185->__shared_owners_;
      do
        v187 = __ldaxr(v186);
      while (__stlxr(v187 - 1, v186));
      if (!v187)
      {
        ((void (*)(std::__shared_weak_count *))v185->__on_zero_shared)(v185);
        std::__shared_weak_count::__release_weak(v185);
      }
LABEL_274:
      v188 = v560;
      v560 = 0;
      v559 = 0;
      if (!v188)
        goto LABEL_283;
      v189 = (unint64_t *)&v188->__shared_owners_;
      do
        v190 = __ldaxr(v189);
      while (__stlxr(v190 - 1, v189));
      if (v190)
      {
LABEL_278:
        v191 = v560;
        if (v560)
          goto LABEL_279;
        goto LABEL_283;
      }
      ((void (*)(std::__shared_weak_count *))v188->__on_zero_shared)(v188);
      std::__shared_weak_count::__release_weak(v188);
      v191 = v560;
      if (v560)
      {
LABEL_279:
        v192 = (unint64_t *)&v191->__shared_owners_;
        do
          v193 = __ldaxr(v192);
        while (__stlxr(v193 - 1, v192));
        if (!v193)
        {
          ((void (*)(std::__shared_weak_count *))v191->__on_zero_shared)(v191);
          std::__shared_weak_count::__release_weak(v191);
        }
      }
LABEL_283:
      if (SHIBYTE(v563) < 0)
        operator delete(__dst);
      v578 = v485;
      *(void **)((char *)&v578 + *((_QWORD *)v485 - 3)) = v484;
      v580 = v483;
      v581[0] = MEMORY[0x24BEDB848] + 16;
      if (SBYTE7(v588) < 0)
        operator delete((void *)v587);
      std::streambuf::~streambuf();
      std::iostream::~basic_iostream();
      MEMORY[0x212BC6290](&v590);
LABEL_41:
      v516 += v525;
      v37 = v68 + 1;
      v36 = v504;
LABEL_42:
      if (++v39 == v511)
        goto LABEL_37;
    }
  }
  v516 = 0;
LABEL_327:
  if (*(_BYTE *)(v503 + 110))
  {
    if (!*(_BYTE *)(v503 + 336))
    {
      v260 = *a4;
      v506 = a4[1];
      if (*a4 != v506)
      {
        while (1)
        {
          v509 = v260;
          v261 = *(_QWORD *)(v260 + 32) - *(_QWORD *)(v260 + 24);
          if ((unint64_t)v261 >= 0x11)
            break;
LABEL_427:
          v260 = v509 + 240;
          if (v509 + 240 == v506)
            goto LABEL_329;
        }
        v262 = 0;
        v527 = v261 >> 4;
        v263 = *(_DWORD *)v260;
        v523 = *(_DWORD *)v260 << 16;
        v264 = 0.0;
        while (1)
        {
          if (v263 >= 0x10000)
          {
            sub_21023D70C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/ComputerVisionTypes/include/VIO/ComputerVisionTypes/CameraStreamId.h", 38, (uint64_t)"camera_id <= 0xffff", 19, (uint64_t)"Camera ID cannot exceeds 16 bits", 32, (void (*)(void **))sub_21023DDB0);
            v265 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
            if ((v265 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
            {
              __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
              __cxa_guard_release(&qword_254A6DE78);
            }
            if (!byte_254A6DE68 || byte_254A6DE70)
            {
              v267 = qword_254A6DE40;
              for (jj = qword_254A6DE48; v267 != jj; v267 += 16)
                (*(void (**)(_QWORD, const char *, uint64_t, const char *, uint64_t))v267)(*(_QWORD *)(v267 + 8), "camera_id <= 0xffff", 19, "Camera ID cannot exceeds 16 bits", 32);
            }
            v268 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
            if ((v268 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
            {
              __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
              __cxa_guard_release(&qword_254A6DE78);
            }
            if (!byte_254A6DE68)
              abort();
            qword_254A6DE58(unk_254A6DE60, "camera_id <= 0xffff", 19, "Camera ID cannot exceeds 16 bits", 32);
          }
          if (v262 >= 0x10000)
          {
            sub_21023D70C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/ComputerVisionTypes/include/VIO/ComputerVisionTypes/CameraStreamId.h", 39, (uint64_t)"stream_id <= 0xffff", 19, (uint64_t)"Stream ID cannot exceeds 16 bits", 32, (void (*)(void **))sub_21023DDB0);
            v269 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
            if ((v269 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
            {
              __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
              __cxa_guard_release(&qword_254A6DE78);
            }
            if (!byte_254A6DE68 || byte_254A6DE70)
            {
              v271 = qword_254A6DE40;
              for (kk = qword_254A6DE48; v271 != kk; v271 += 16)
                (*(void (**)(_QWORD, const char *, uint64_t, const char *, uint64_t))v271)(*(_QWORD *)(v271 + 8), "stream_id <= 0xffff", 19, "Stream ID cannot exceeds 16 bits", 32);
            }
            v272 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
            if ((v272 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
            {
              __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
              __cxa_guard_release(&qword_254A6DE78);
            }
            if (!byte_254A6DE68)
              abort();
            qword_254A6DE58(unk_254A6DE60, "stream_id <= 0xffff", 19, "Stream ID cannot exceeds 16 bits", 32);
          }
          if (v263 >= 0x10000)
          {
            sub_21023D70C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/ComputerVisionTypes/include/VIO/ComputerVisionTypes/CameraStreamId.h", 49, (uint64_t)"camera_id <= 0xffff", 19, (uint64_t)"Camera ID cannot exceeds 16 bits", 32, (void (*)(void **))sub_21023DDB0);
            v273 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
            if ((v273 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
            {
              __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
              __cxa_guard_release(&qword_254A6DE78);
            }
            if (!byte_254A6DE68 || byte_254A6DE70)
            {
              v275 = qword_254A6DE40;
              for (mm = qword_254A6DE48; v275 != mm; v275 += 16)
                (*(void (**)(_QWORD, const char *, uint64_t, const char *, uint64_t))v275)(*(_QWORD *)(v275 + 8), "camera_id <= 0xffff", 19, "Camera ID cannot exceeds 16 bits", 32);
            }
            v276 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
            if ((v276 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
            {
              __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
              __cxa_guard_release(&qword_254A6DE78);
            }
            if (!byte_254A6DE68)
              abort();
            qword_254A6DE58(unk_254A6DE60, "camera_id <= 0xffff", 19, "Camera ID cannot exceeds 16 bits", 32);
          }
          if (v262 >= 0x10000)
          {
            sub_21023D70C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/ComputerVisionTypes/include/VIO/ComputerVisionTypes/CameraStreamId.h", 50, (uint64_t)"stream_id <= 0xffff", 19, (uint64_t)"Stream ID cannot exceeds 16 bits", 32, (void (*)(void **))sub_21023DDB0);
            v277 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
            if ((v277 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
            {
              __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
              __cxa_guard_release(&qword_254A6DE78);
            }
            if (!byte_254A6DE68 || byte_254A6DE70)
            {
              v279 = qword_254A6DE40;
              for (nn = qword_254A6DE48; v279 != nn; v279 += 16)
                (*(void (**)(_QWORD, const char *, uint64_t, const char *, uint64_t))v279)(*(_QWORD *)(v279 + 8), "stream_id <= 0xffff", 19, "Stream ID cannot exceeds 16 bits", 32);
            }
            v280 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
            if ((v280 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
            {
              __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
              __cxa_guard_release(&qword_254A6DE78);
            }
            if (!byte_254A6DE68)
              abort();
            qword_254A6DE58(unk_254A6DE60, "stream_id <= 0xffff", 19, "Stream ID cannot exceeds 16 bits", 32);
          }
          v281 = (unsigned __int16)v262 | v523;
          if (v530[0] == v281)
            break;
          v282 = (double *)v531;
          if (v533 == v281)
            goto LABEL_475;
          v282 = (double *)v534;
          if (v536 == v281)
            goto LABEL_475;
          v282 = (double *)v537;
          if (v539 == v281)
            goto LABEL_475;
          v282 = (double *)v540;
          if (v542 == v281)
            goto LABEL_475;
          v282 = (double *)v543;
          if (v545 == v281)
            goto LABEL_475;
          v282 = (double *)v546;
          if (v548 == v281)
            goto LABEL_475;
          v282 = (double *)v549;
          if (v551 == v281)
            goto LABEL_475;
LABEL_477:
          if (++v262 == v527)
          {
            v283 = 0;
            while (1)
            {
              if (v263 >= 0x10000)
              {
                sub_21023D70C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/ComputerVisionTypes/include/VIO/ComputerVisionTypes/CameraStreamId.h", 38, (uint64_t)"camera_id <= 0xffff", 19, (uint64_t)"Camera ID cannot exceeds 16 bits", 32, (void (*)(void **))sub_21023DDB0);
                v284 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
                if ((v284 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
                {
                  __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
                  __cxa_guard_release(&qword_254A6DE78);
                }
                if (!byte_254A6DE68 || byte_254A6DE70)
                {
                  v286 = qword_254A6DE40;
                  for (i1 = qword_254A6DE48; v286 != i1; v286 += 16)
                    (*(void (**)(_QWORD, const char *, uint64_t, const char *, uint64_t))v286)(*(_QWORD *)(v286 + 8), "camera_id <= 0xffff", 19, "Camera ID cannot exceeds 16 bits", 32);
                }
                v287 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
                if ((v287 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
                {
                  __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
                  __cxa_guard_release(&qword_254A6DE78);
                }
                if (!byte_254A6DE68)
                  abort();
                qword_254A6DE58(unk_254A6DE60, "camera_id <= 0xffff", 19, "Camera ID cannot exceeds 16 bits", 32);
              }
              if (v283 >= 0x10000)
              {
                sub_21023D70C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/ComputerVisionTypes/include/VIO/ComputerVisionTypes/CameraStreamId.h", 39, (uint64_t)"stream_id <= 0xffff", 19, (uint64_t)"Stream ID cannot exceeds 16 bits", 32, (void (*)(void **))sub_21023DDB0);
                v288 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
                if ((v288 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
                {
                  __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
                  __cxa_guard_release(&qword_254A6DE78);
                }
                if (!byte_254A6DE68 || byte_254A6DE70)
                {
                  v290 = qword_254A6DE40;
                  for (i2 = qword_254A6DE48; v290 != i2; v290 += 16)
                    (*(void (**)(_QWORD, const char *, uint64_t, const char *, uint64_t))v290)(*(_QWORD *)(v290 + 8), "stream_id <= 0xffff", 19, "Stream ID cannot exceeds 16 bits", 32);
                }
                v291 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
                if ((v291 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
                {
                  __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
                  __cxa_guard_release(&qword_254A6DE78);
                }
                if (!byte_254A6DE68)
                  abort();
                qword_254A6DE58(unk_254A6DE60, "stream_id <= 0xffff", 19, "Stream ID cannot exceeds 16 bits", 32);
              }
              if (v263 >= 0x10000)
              {
                sub_21023D70C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/ComputerVisionTypes/include/VIO/ComputerVisionTypes/CameraStreamId.h", 49, (uint64_t)"camera_id <= 0xffff", 19, (uint64_t)"Camera ID cannot exceeds 16 bits", 32, (void (*)(void **))sub_21023DDB0);
                v292 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
                if ((v292 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
                {
                  __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
                  __cxa_guard_release(&qword_254A6DE78);
                }
                if (!byte_254A6DE68 || byte_254A6DE70)
                {
                  v294 = qword_254A6DE40;
                  for (i3 = qword_254A6DE48; v294 != i3; v294 += 16)
                    (*(void (**)(_QWORD, const char *, uint64_t, const char *, uint64_t))v294)(*(_QWORD *)(v294 + 8), "camera_id <= 0xffff", 19, "Camera ID cannot exceeds 16 bits", 32);
                }
                v295 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
                if ((v295 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
                {
                  __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
                  __cxa_guard_release(&qword_254A6DE78);
                }
                if (!byte_254A6DE68)
                  abort();
                qword_254A6DE58(unk_254A6DE60, "camera_id <= 0xffff", 19, "Camera ID cannot exceeds 16 bits", 32);
              }
              if (v283 >= 0x10000)
              {
                sub_21023D70C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/ComputerVisionTypes/include/VIO/ComputerVisionTypes/CameraStreamId.h", 50, (uint64_t)"stream_id <= 0xffff", 19, (uint64_t)"Stream ID cannot exceeds 16 bits", 32, (void (*)(void **))sub_21023DDB0);
                v296 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
                if ((v296 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
                {
                  __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
                  __cxa_guard_release(&qword_254A6DE78);
                }
                if (!byte_254A6DE68 || byte_254A6DE70)
                {
                  v298 = qword_254A6DE40;
                  for (i4 = qword_254A6DE48; v298 != i4; v298 += 16)
                    (*(void (**)(_QWORD, const char *, uint64_t, const char *, uint64_t))v298)(*(_QWORD *)(v298 + 8), "stream_id <= 0xffff", 19, "Stream ID cannot exceeds 16 bits", 32);
                }
                v299 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
                if ((v299 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
                {
                  __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
                  __cxa_guard_release(&qword_254A6DE78);
                }
                if (!byte_254A6DE68)
                  abort();
                qword_254A6DE58(unk_254A6DE60, "stream_id <= 0xffff", 19, "Stream ID cannot exceeds 16 bits", 32);
              }
              v300 = (unsigned __int16)v283 | v523;
              if (v530[0] == v300)
              {
                v301 = (double *)&v528;
              }
              else
              {
                v301 = (double *)v531;
                if (v533 != v300)
                {
                  v301 = (double *)v534;
                  if (v536 != v300)
                  {
                    v301 = (double *)v537;
                    if (v539 != v300)
                    {
                      v301 = (double *)v540;
                      if (v542 != v300)
                      {
                        v301 = (double *)v543;
                        if (v545 != v300)
                        {
                          v301 = (double *)v546;
                          if (v548 != v300)
                          {
                            v301 = (double *)v549;
                            if (v551 != v300)
                              goto LABEL_541;
                          }
                        }
                      }
                    }
                  }
                }
              }
              *v301 = v264;
LABEL_541:
              if (++v283 == v527)
                goto LABEL_427;
            }
          }
        }
        v282 = (double *)&v528;
LABEL_475:
        if (v264 < *v282)
          v264 = *v282;
        goto LABEL_477;
      }
    }
  }
LABEL_329:
  if (v516)
  {
    v198 = 0;
    v199 = (_DWORD *)(v503 + 144);
    v200 = (_DWORD *)(v503 + 168);
    v201 = (_DWORD *)(v503 + 192);
    v202 = (_DWORD *)(v503 + 216);
    v526 = (_DWORD *)(v503 + 240);
    v203 = (int)(*(double *)(v503 + 72) * (double)v516);
    v517 = (_DWORD *)(v503 + 264);
    v493 = (_DWORD *)(v503 + 288);
    v486 = (_DWORD *)(v503 + 312);
    do
    {
      v208 = v530[v198 / 4];
      if ((_DWORD)v208 != -1)
      {
        v209 = v503 + 144;
        if (*v199 != (_DWORD)v208)
        {
          v209 = v503 + 168;
          if (*v200 != (_DWORD)v208)
          {
            v209 = v503 + 192;
            if (*v201 != (_DWORD)v208)
            {
              v209 = v503 + 216;
              if (*v202 != (_DWORD)v208)
              {
                v209 = v503 + 240;
                if (*v526 != (_DWORD)v208)
                {
                  v209 = v503 + 264;
                  if (*v517 != (_DWORD)v208)
                  {
                    v209 = v503 + 288;
                    if (*v493 != (_DWORD)v208)
                    {
                      if (*v486 == (_DWORD)v208)
                        v209 = v503 + 312;
                      else
                        v209 = v503 + 336;
                    }
                  }
                }
              }
            }
          }
        }
        sub_20EFF39D4((uint64_t)v199, v208, v209);
        LODWORD(v204) = *(_DWORD *)((char *)&v528.tv_nsec + v198 + 4);
        v205 = (double)v204;
        v206 = (*(double *)(v503 + 80) * v205);
        v207 = *(_DWORD *)((char *)&v528 + v198 + 16);
        if (v207 < v206)
          v206 = *(_DWORD *)((char *)&v528 + v198 + 16);
        if (v206 <= 1)
          v206 = 1;
        *(double *)(v209 + 8) = (double)v206 / v205;
        *(_DWORD *)((char *)&v528 + v198 + 16) = v207 - v206;
        v203 -= v206;
      }
      v198 += 32;
    }
    while (v198 != 256);
    v210 = v530[0];
    v211 = *(double *)&v528.tv_sec + 0.0;
    v212 = v533;
    v213 = *(double *)v531;
    v214 = v536;
    v215 = *(double *)v534;
    v216 = v539;
    v217 = *(double *)v537;
    v218 = v542;
    v219 = *(double *)v540;
    v220 = v545;
    v221 = *(double *)v543;
    v222 = v548;
    v223 = *(double *)v546;
    v224 = v551;
    v225 = *(double *)v549;
    do
    {
      v226 = 0;
      v227 = 0;
      if ((_DWORD)v529)
        v228 = v210 == -1;
      else
        v228 = 1;
      if (v228)
        v229 = 0.0;
      else
        v229 = v211;
      if ((_DWORD)v532)
        v230 = v212 == -1;
      else
        v230 = 1;
      v231 = -0.0;
      if (v230)
        v232 = -0.0;
      else
        v232 = v213;
      if ((_DWORD)v535)
        v233 = v214 == -1;
      else
        v233 = 1;
      if (v233)
        v234 = -0.0;
      else
        v234 = v215;
      if ((_DWORD)v538)
        v235 = v216 == -1;
      else
        v235 = 1;
      if (v235)
        v236 = -0.0;
      else
        v236 = v217;
      if ((_DWORD)v541)
        v237 = v218 == -1;
      else
        v237 = 1;
      if (v237)
        v238 = -0.0;
      else
        v238 = v219;
      if ((_DWORD)v544)
        v239 = v220 == -1;
      else
        v239 = 1;
      if (v239)
        v240 = -0.0;
      else
        v240 = v221;
      if ((_DWORD)v547)
        v241 = v222 == -1;
      else
        v241 = 1;
      if (v241)
        v242 = -0.0;
      else
        v242 = v223;
      if ((_DWORD)v550)
        v243 = v224 == -1;
      else
        v243 = 1;
      v244 = v229 + v232 + v234 + v236 + v238 + v240 + v242;
      if (!v243)
        v231 = v225;
      v245 = v244 + v231;
      if (v245 == 0.0)
        v246 = 1.0;
      else
        v246 = 1.0 / v245;
      do
      {
        v249 = (char *)&v528 + v226 * 4;
        v250 = v530[v226];
        if (v250 != -1)
        {
          v251 = *((_DWORD *)v249 + 4);
          if (v251)
          {
            v252 = v503 + 144;
            if (*v199 != v250)
            {
              v252 = v503 + 168;
              if (*v200 != v250)
              {
                v252 = v503 + 192;
                if (*v201 != v250)
                {
                  v252 = v503 + 216;
                  if (*v202 != v250)
                  {
                    v252 = v503 + 240;
                    if (*v526 != v250)
                    {
                      v252 = v503 + 264;
                      if (*v517 != v250)
                      {
                        v252 = v503 + 288;
                        if (*v493 != v250)
                        {
                          v252 = v503 + 312;
                          if (*v486 != v250)
                          {
                            sub_20E863438((uint64_t)&v578);
                            sub_20E86A980(&v580, (uint64_t)"Query source ID does not exist.\nQuery source ID: ", 49);
                            v476 = (_QWORD *)std::ostream::operator<<();
                            sub_20E86A980(v476, (uint64_t)".\nAvailable source IDs: ", 24);
                            sub_20EEA5904((uint64_t)v199, v503 + 336, (uint64_t)&v578);
                            v477 = object;
                            sub_20E923E88(&v578, object);
                            if (object[23] < 0)
                              v477 = *(const char **)object;
                            v478 = strlen(v477);
                            sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/ComputerVisionTypes/include/VIO/ComputerVisionTypes/CameraAllocationInfo.h", 122, (uint64_t)"", 0, (uint64_t)v477, v478, (void (*)(void **))sub_21023DDB0);
                            abort();
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
            v247 = (v246 * *(double *)((char *)&v528.tv_sec + v226 * 4) * (double)v203);
            if (v251 < v247)
              v247 = *((_DWORD *)v249 + 4);
            LODWORD(v234) = *(_DWORD *)((char *)&v528.tv_nsec + v226 * 4 + 4);
            v248 = (double)v247 / (double)*(unint64_t *)&v234;
            v234 = *(double *)(v252 + 8);
            *(double *)(v252 + 8) = v234 + v248;
            *((_DWORD *)v249 + 4) = v251 - v247;
            v227 += v247;
          }
        }
        v226 += 8;
      }
      while (v226 != 64);
      v203 -= v227;
    }
    while (v227 && v203 > *(_DWORD *)(v503 + 104));
    sub_20EFF37E4(&v564);
    if (**(int **)(v564 + 56) > 2)
      goto LABEL_699;
    v253 = *(unsigned __int8 *)(v564 + 72);
    v254 = sub_20E8C31DC(v564, "OSLogSurrogateAppender", 1, 0);
    v255 = v254;
    if (!v253 && v254 == 0)
      goto LABEL_699;
    sub_20E863438((uint64_t)&v578);
    sub_20E86A980(&v580, (uint64_t)"[CA] Allocation budgets: ", 25);
    v257 = (_QWORD *)std::ostream::operator<<();
    sub_20E86A980(v257, (uint64_t)": Remaining target points: ", 27);
    std::ostream::operator<<();
    v522 = v253;
    if ((__p & 0x10) != 0)
    {
      v303 = *((_QWORD *)&v588 + 1);
      if (*((_QWORD *)&v588 + 1) < v585)
      {
        *((_QWORD *)&v588 + 1) = v585;
        v303 = v585;
      }
      v304 = &v584;
    }
    else
    {
      if ((__p & 8) == 0)
      {
        v258 = 0;
        HIBYTE(v563) = 0;
        v259 = (void **)&__dst;
        goto LABEL_577;
      }
      v304 = (void **)v582;
      v303 = v583;
    }
    v305 = *v304;
    v258 = v303 - (_QWORD)*v304;
    if (v258 > 0x7FFFFFFFFFFFFFF7)
      sub_20E860B7C();
    if (v258 >= 0x17)
    {
      v306 = (v258 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v258 | 7) != 0x17)
        v306 = v258 | 7;
      v307 = v306 + 1;
      v259 = (void **)operator new(v306 + 1);
      v563 = v307 | 0x8000000000000000;
      __dst = v259;
      v562 = v258;
    }
    else
    {
      HIBYTE(v563) = v303 - *(_BYTE *)v304;
      v259 = (void **)&__dst;
      if (!v258)
      {
LABEL_577:
        *((_BYTE *)v259 + v258) = 0;
        v552 = &v564;
        rep = std::chrono::steady_clock::now().__d_.__rep_;
        v554 = std::chrono::system_clock::now().__d_.__rep_;
        v555 = 2;
        v556 = "unknown file";
        v557 = 481;
        v560 = 0;
        v558 = "unknown function";
        v559 = 0;
        if (v563 >= 0)
          v308 = (const char *)&__dst;
        else
          v308 = (const char *)__dst;
        v309 = *v552;
        v310 = (const char *)(*v552 + 16);
        v519 = (char *)v310;
        if (*(char *)(*v552 + 39) < 0)
        {
          v310 = *(const char **)(v309 + 16);
          v311 = *(_QWORD *)(v309 + 24);
        }
        else
        {
          v311 = *(unsigned __int8 *)(*v552 + 39);
        }
        v312 = atomic_load((unsigned __int8 *)&qword_254A4A510);
        if ((v312 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
        {
          sub_20E9E46F8((uint64_t)object);
          sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)object);
          if ((_BYTE)v572 && (object[23] & 0x80000000) != 0)
            operator delete(*(void **)object);
          __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
          __cxa_guard_release(&qword_254A4A510);
        }
        if (byte_254A4A4F8[23] >= 0)
          v313 = byte_254A4A4F8;
        else
          v313 = *(const char **)byte_254A4A4F8;
        if (byte_254A4A4F8[23] >= 0)
          v314 = byte_254A4A4F8[23];
        else
          v314 = *(_QWORD *)&byte_254A4A4F8[8];
        *(_QWORD *)object = os_log_create(v313, v310);
        v315 = &object[8];
        if (v314 > 0x7FFFFFFFFFFFFFF7)
          sub_20E860B7C();
        if (v314 >= 0x17)
        {
          v512 = v310;
          v316 = v309;
          v317 = v255;
          v318 = v308;
          v319 = (v314 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v314 | 7) != 0x17)
            v319 = v314 | 7;
          v320 = v319 + 1;
          v315 = operator new(v319 + 1);
          *(_QWORD *)&v572 = v320 | 0x8000000000000000;
          *(_QWORD *)&object[8] = v315;
          *(_QWORD *)&object[16] = v314;
          v308 = v318;
          v255 = v317;
          v309 = v316;
          v310 = v512;
        }
        else
        {
          BYTE7(v572) = v314;
          if (!v314)
          {
LABEL_598:
            v315[v314] = 0;
            BYTE8(v572) = 1;
            v321 = &v573;
            if (v311 > 0x7FFFFFFFFFFFFFF7)
              sub_20E860B7C();
            v202 = (_DWORD *)(v503 + 216);
            if (v311 >= 0x17)
            {
              v322 = (v311 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v311 | 7) != 0x17)
                v322 = v311 | 7;
              v323 = v322 + 1;
              v321 = operator new(v322 + 1);
              v575 = v323 | 0x8000000000000000;
              v573 = v321;
              v574 = v311;
              v201 = (_DWORD *)(v503 + 192);
            }
            else
            {
              HIBYTE(v575) = v311;
              v201 = (_DWORD *)(v503 + 192);
              if (!v311)
              {
LABEL_606:
                *((_BYTE *)v321 + v311) = 0;
                LOBYTE(v576) = 1;
                v324 = *(NSObject **)object;
                if (SHIBYTE(v575) < 0)
                  operator delete(v573);
                if (BYTE8(v572) && SBYTE7(v572) < 0)
                  operator delete(*(void **)&object[8]);
                if (*(_QWORD *)object)
                  os_release(*(void **)object);
                if (!v255 || !*(_QWORD *)(v255 + 24))
                {
                  os_log_type_enabled(v324, OS_LOG_TYPE_DEBUG);
                  *(_DWORD *)object = 136315138;
                  *(_QWORD *)&object[4] = v308;
                  v331 = (void *)_os_log_send_and_compose_impl();
                  v332 = v522;
                  if (v331)
                    free(v331);
                  goto LABEL_685;
                }
                v325 = _os_log_pack_size();
                v326 = (std::__shared_weak_count_vtbl *)operator new(v325, (std::align_val_t)8uLL);
                v327 = (std::__shared_weak_count *)operator new();
                v327->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
                v327->__shared_owners_ = 0;
                v327->__shared_weak_owners_ = 0;
                v327[1].__vftable = v326;
                v565[0] = v326;
                v565[1] = v326;
                v568 = 0;
                v566 = v327;
                v567 = 0;
                v328 = strlen(v308);
                if (v328 > 0x7FFFFFFFFFFFFFF7)
                  sub_20E860B7C();
                v329 = v328;
                if (v328 >= 0x17)
                {
                  v333 = (v328 & 0xFFFFFFFFFFFFFFF8) + 8;
                  if ((v328 | 7) != 0x17)
                    v333 = v328 | 7;
                  v334 = v333 + 1;
                  v330 = operator new(v333 + 1);
                  *((_QWORD *)&v570 + 1) = v334 | 0x8000000000000000;
                  v569 = v330;
                  *(_QWORD *)&v570 = v329;
                  v201 = (_DWORD *)(v503 + 192);
                }
                else
                {
                  HIBYTE(v570) = v328;
                  v330 = &v569;
                  if (!v328)
                  {
LABEL_625:
                    *((_BYTE *)v330 + v329) = 0;
                    v335 = v569;
                    v577[0] = v570;
                    *(_QWORD *)((char *)v577 + 7) = *(_QWORD *)((char *)&v570 + 7);
                    v336 = HIBYTE(v570);
                    v337 = operator new(0x38uLL);
                    v337[1] = 0;
                    v337[2] = 0;
                    v337[3] = off_24C9ABC20;
                    *v337 = &off_24C9ABBD0;
                    v338 = v577[0];
                    v337[4] = v335;
                    v337[5] = v338;
                    *(_QWORD *)((char *)v337 + 47) = *(_QWORD *)((char *)v577 + 7);
                    *((_BYTE *)v337 + 55) = v336;
                    v577[0] = 0;
                    *(_QWORD *)((char *)v577 + 7) = 0;
                    v339 = v568;
                    v567 = (char *)(v337 + 3);
                    v568 = (std::__shared_weak_count *)v337;
                    if (v339)
                    {
                      v340 = (unint64_t *)&v339->__shared_owners_;
                      do
                        v341 = __ldaxr(v340);
                      while (__stlxr(v341 - 1, v340));
                      if (!v341)
                      {
                        ((void (*)(std::__shared_weak_count *))v339->__on_zero_shared)(v339);
                        std::__shared_weak_count::__release_weak(v339);
                      }
                    }
                    *(_OWORD *)object = *(_OWORD *)v565;
                    v342 = v567;
                    *(_QWORD *)&object[16] = v566;
                    if (v566)
                    {
                      v343 = (unint64_t *)&v566->__shared_owners_;
                      do
                        v344 = __ldxr(v343);
                      while (__stxr(v344 + 1, v343));
                    }
                    v345 = v568;
                    *(_QWORD *)&v572 = v342;
                    *((_QWORD *)&v572 + 1) = v568;
                    if (v568)
                    {
                      v346 = (unint64_t *)&v568->__shared_owners_;
                      do
                        v347 = __ldxr(v346);
                      while (__stxr(v347 + 1, v346));
                      v573 = v342;
                      do
                        v348 = __ldaxr(v346);
                      while (__stlxr(v348 - 1, v346));
                      if (!v348)
                      {
                        ((void (*)(std::__shared_weak_count *))v345->__on_zero_shared)(v345);
                        std::__shared_weak_count::__release_weak(v345);
                      }
                    }
                    else
                    {
                      v573 = v342;
                    }
                    v349 = v566;
                    if (v566)
                    {
                      v350 = (unint64_t *)&v566->__shared_owners_;
                      do
                        v351 = __ldaxr(v350);
                      while (__stlxr(v351 - 1, v350));
                      if (!v351)
                      {
                        ((void (*)(std::__shared_weak_count *))v349->__on_zero_shared)(v349);
                        std::__shared_weak_count::__release_weak(v349);
                      }
                    }
                    v352 = *(_QWORD *)object;
                    if (*((char *)v573 + 31) >= 0)
                      v353 = (char *)v573 + 8;
                    else
                      v353 = (char *)*((_QWORD *)v573 + 1);
                    v354 = _os_log_pack_fill();
                    *(_DWORD *)v354 = 136315138;
                    *(_QWORD *)(v354 + 4) = v353;
                    v355 = (char *)operator new();
                    v356 = *(unsigned __int8 *)(v309 + 39);
                    v357 = *(char **)(v309 + 16);
                    v358 = *(_QWORD *)(v309 + 24);
                    v359 = v572;
                    *(_OWORD *)(v355 + 8) = *(_OWORD *)&object[8];
                    if ((v356 & 0x80u) != 0)
                      v356 = v358;
                    else
                      v357 = v519;
                    *(_QWORD *)v355 = v352;
                    *(_QWORD *)&object[8] = 0;
                    *(_QWORD *)&object[16] = 0;
                    *(_OWORD *)(v355 + 24) = v359;
                    v572 = 0uLL;
                    *((_QWORD *)v355 + 5) = v357;
                    *((_QWORD *)v355 + 6) = v356;
                    v355[56] = 2;
                    v569 = 0;
                    v565[0] = v355;
                    (*(void (**)(_QWORD, void **))(**(_QWORD **)(v255 + 24) + 40))(*(_QWORD *)(v255 + 24), v565);
                    v360 = v565[0];
                    v565[0] = 0;
                    v332 = v522;
                    if (v360)
                    {
                      v361 = (std::__shared_weak_count *)*((_QWORD *)v360 + 4);
                      if (v361)
                      {
                        v362 = (unint64_t *)&v361->__shared_owners_;
                        do
                          v363 = __ldaxr(v362);
                        while (__stlxr(v363 - 1, v362));
                        if (!v363)
                        {
                          ((void (*)(std::__shared_weak_count *))v361->__on_zero_shared)(v361);
                          std::__shared_weak_count::__release_weak(v361);
                        }
                      }
                      v364 = (std::__shared_weak_count *)*((_QWORD *)v360 + 2);
                      if (v364)
                      {
                        v365 = (unint64_t *)&v364->__shared_owners_;
                        do
                          v366 = __ldaxr(v365);
                        while (__stlxr(v366 - 1, v365));
                        if (!v366)
                        {
                          ((void (*)(std::__shared_weak_count *))v364->__on_zero_shared)(v364);
                          std::__shared_weak_count::__release_weak(v364);
                        }
                      }
                      MEMORY[0x212BC6398](v360, 0x10F0C40B62ED6C6);
                      v367 = v569;
                      v569 = 0;
                      if (v367)
                      {
                        v368 = (std::__shared_weak_count *)v367[4];
                        if (v368)
                        {
                          v369 = (unint64_t *)&v368->__shared_owners_;
                          do
                            v370 = __ldaxr(v369);
                          while (__stlxr(v370 - 1, v369));
                          if (!v370)
                          {
                            ((void (*)(std::__shared_weak_count *))v368->__on_zero_shared)(v368);
                            std::__shared_weak_count::__release_weak(v368);
                          }
                        }
                        v371 = (std::__shared_weak_count *)v367[2];
                        if (v371)
                        {
                          v372 = (unint64_t *)&v371->__shared_owners_;
                          do
                            v373 = __ldaxr(v372);
                          while (__stlxr(v373 - 1, v372));
                          if (!v373)
                          {
                            ((void (*)(std::__shared_weak_count *))v371->__on_zero_shared)(v371);
                            std::__shared_weak_count::__release_weak(v371);
                          }
                        }
                        MEMORY[0x212BC6398](v367, 0x10F0C40B62ED6C6);
                      }
                    }
                    v374 = (std::__shared_weak_count *)*((_QWORD *)&v572 + 1);
                    if (*((_QWORD *)&v572 + 1))
                    {
                      v375 = (unint64_t *)(*((_QWORD *)&v572 + 1) + 8);
                      do
                        v376 = __ldaxr(v375);
                      while (__stlxr(v376 - 1, v375));
                      if (!v376)
                      {
                        ((void (*)(std::__shared_weak_count *))v374->__on_zero_shared)(v374);
                        std::__shared_weak_count::__release_weak(v374);
                      }
                    }
                    v377 = *(std::__shared_weak_count **)&object[16];
                    if (*(_QWORD *)&object[16])
                    {
                      v378 = (unint64_t *)(*(_QWORD *)&object[16] + 8);
                      do
                        v379 = __ldaxr(v378);
                      while (__stlxr(v379 - 1, v378));
                      if (!v379)
                      {
                        ((void (*)(std::__shared_weak_count *))v377->__on_zero_shared)(v377);
                        std::__shared_weak_count::__release_weak(v377);
                      }
                    }
LABEL_685:
                    if (v332)
                    {
                      v380 = (const char *)&__dst;
                      if (v563 < 0)
                        v380 = (const char *)__dst;
                      sub_20E8C003C((uint64_t)&v552, "%s", v380);
                      sub_20E863570((uint64_t)&v552);
                    }
                    sub_20E863570((uint64_t)&v552);
                    v381 = v560;
                    if (v560)
                    {
                      v382 = (unint64_t *)&v560->__shared_owners_;
                      do
                        v383 = __ldaxr(v382);
                      while (__stlxr(v383 - 1, v382));
                      if (!v383)
                      {
                        ((void (*)(std::__shared_weak_count *))v381->__on_zero_shared)(v381);
                        std::__shared_weak_count::__release_weak(v381);
                      }
                    }
                    if (SHIBYTE(v563) < 0)
                      operator delete(__dst);
                    v578 = (void *)*MEMORY[0x24BEDB7F0];
                    v384 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
                    *(void **)((char *)&v578 + *((_QWORD *)v578 - 3)) = *(void **)(MEMORY[0x24BEDB7F0] + 64);
                    v580 = v384;
                    v581[0] = MEMORY[0x24BEDB848] + 16;
                    if (SBYTE7(v588) < 0)
                      operator delete((void *)v587);
                    std::streambuf::~streambuf();
                    std::iostream::~basic_iostream();
                    MEMORY[0x212BC6290](&v590);
LABEL_699:
                    v385 = 0;
                    v500 = *(void **)(MEMORY[0x24BEDB7F0] + 64);
                    v501 = (void *)*MEMORY[0x24BEDB7F0];
                    v498 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
                    v495 = MEMORY[0x24BEDB848] + 16;
                    while (1)
                    {
                      v386 = v530[8 * v385];
                      if (v530[8 * v385] == -1)
                        goto LABEL_701;
                      v387 = v503 + 144;
                      if (*v199 != (_DWORD)v386)
                      {
                        v387 = v503 + 168;
                        if (*v200 != (_DWORD)v386)
                        {
                          v387 = (uint64_t)v201;
                          if (*v201 != (_DWORD)v386)
                          {
                            v387 = (uint64_t)v202;
                            if (*v202 != (_DWORD)v386)
                            {
                              v387 = v503 + 240;
                              if (*v526 != (_DWORD)v386)
                              {
                                v387 = v503 + 264;
                                if (*v517 != (_DWORD)v386)
                                {
                                  v387 = v503 + 288;
                                  if (*v493 != (_DWORD)v386)
                                  {
                                    if (*v486 == (_DWORD)v386)
                                      v387 = v503 + 312;
                                    else
                                      v387 = v503 + 336;
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                      sub_20EFF39D4((uint64_t)v199, v386, v387);
                      sub_20EFF37E4(&v564);
                      if (**(int **)(v564 + 56) > 2)
                        goto LABEL_701;
                      v388 = *(unsigned __int8 *)(v564 + 72);
                      v389 = sub_20E8C31DC(v564, "OSLogSurrogateAppender", 1, 0);
                      v390 = v389;
                      if (!v388 && v389 == 0)
                        goto LABEL_701;
                      sub_20E863438((uint64_t)&v578);
                      sub_20E86A980(&v580, (uint64_t)"[CA] camera: [", 14);
                      v392 = (_QWORD *)std::ostream::operator<<();
                      sub_20E86A980(v392, (uint64_t)",", 1);
                      v393 = (_QWORD *)std::ostream::operator<<();
                      sub_20E86A980(v393, (uint64_t)" updated usage_ratio: ", 22);
                      v394 = (_QWORD *)std::ostream::operator<<();
                      sub_20E86A980(v394, (uint64_t)" expected_points: ", 18);
                      std::ostream::operator<<();
                      v524 = v388;
                      if ((__p & 0x10) != 0)
                      {
                        v397 = *((_QWORD *)&v588 + 1);
                        v398 = &v584;
                        if (*((_QWORD *)&v588 + 1) < v585)
                        {
                          *((_QWORD *)&v588 + 1) = v585;
                          v397 = v585;
                          v398 = &v584;
                        }
                      }
                      else
                      {
                        if ((__p & 8) == 0)
                        {
                          v395 = 0;
                          HIBYTE(v563) = 0;
                          v396 = (void **)&__dst;
                          goto LABEL_732;
                        }
                        v397 = v583;
                        v398 = (void **)v582;
                      }
                      v399 = *v398;
                      v395 = v397 - (_QWORD)*v398;
                      if (v395 > 0x7FFFFFFFFFFFFFF7)
                        sub_20E860B7C();
                      if (v395 >= 0x17)
                        break;
                      HIBYTE(v563) = v397 - *(_BYTE *)v398;
                      v396 = (void **)&__dst;
                      if (v395)
                        goto LABEL_731;
LABEL_732:
                      *((_BYTE *)v396 + v395) = 0;
                      v552 = &v564;
                      rep = std::chrono::steady_clock::now().__d_.__rep_;
                      v554 = std::chrono::system_clock::now().__d_.__rep_;
                      v555 = 2;
                      v556 = "unknown file";
                      v557 = 496;
                      v558 = "unknown function";
                      v559 = 0;
                      v560 = 0;
                      v402 = (void **)&__dst;
                      if (v563 < 0)
                        v402 = __dst;
                      v520 = (char *)v402;
                      v403 = *v552;
                      v404 = (const char *)(*v552 + 16);
                      v513 = v404;
                      if (*(char *)(*v552 + 39) < 0)
                      {
                        v404 = *(const char **)(v403 + 16);
                        v405 = *(_QWORD *)(v403 + 24);
                        v510 = *v552;
                        v407 = atomic_load((unsigned __int8 *)&qword_254A4A510);
                        if ((v407 & 1) != 0)
                          goto LABEL_738;
                      }
                      else
                      {
                        v405 = *(unsigned __int8 *)(*v552 + 39);
                        v510 = *v552;
                        v406 = atomic_load((unsigned __int8 *)&qword_254A4A510);
                        if ((v406 & 1) != 0)
                          goto LABEL_738;
                      }
                      if (__cxa_guard_acquire(&qword_254A4A510))
                      {
                        sub_20E9E46F8((uint64_t)v565);
                        sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)v565);
                        if ((_BYTE)v567 && SHIBYTE(v566) < 0)
                          operator delete(v565[0]);
                        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
                        __cxa_guard_release(&qword_254A4A510);
                      }
LABEL_738:
                      if (byte_254A4A4F8[23] >= 0)
                        v408 = byte_254A4A4F8;
                      else
                        v408 = *(const char **)byte_254A4A4F8;
                      if (byte_254A4A4F8[23] >= 0)
                        v409 = byte_254A4A4F8[23];
                      else
                        v409 = *(_QWORD *)&byte_254A4A4F8[8];
                      *(_QWORD *)object = os_log_create(v408, v404);
                      if (v409 > 0x7FFFFFFFFFFFFFF7)
                        sub_20E860B7C();
                      if (v409 >= 0x17)
                      {
                        v411 = (v409 & 0xFFFFFFFFFFFFFFF8) + 8;
                        if ((v409 | 7) != 0x17)
                          v411 = v409 | 7;
                        v412 = v411 + 1;
                        v410 = operator new(v411 + 1);
                        *(_QWORD *)&v572 = v412 | 0x8000000000000000;
                        *(_QWORD *)&object[8] = v410;
                        *(_QWORD *)&object[16] = v409;
LABEL_751:
                        memmove(v410, v408, v409);
                        goto LABEL_752;
                      }
                      BYTE7(v572) = v409;
                      v410 = &object[8];
                      if (v409)
                        goto LABEL_751;
LABEL_752:
                      v410[v409] = 0;
                      BYTE8(v572) = 1;
                      if (v405 > 0x7FFFFFFFFFFFFFF7)
                        sub_20E860B7C();
                      v201 = (_DWORD *)(v503 + 192);
                      v413 = v524;
                      if (v405 >= 0x17)
                      {
                        v416 = (v405 & 0xFFFFFFFFFFFFFFF8) + 8;
                        if ((v405 | 7) != 0x17)
                          v416 = v405 | 7;
                        v417 = v416 + 1;
                        v414 = operator new(v416 + 1);
                        v575 = v417 | 0x8000000000000000;
                        v573 = v414;
                        v574 = v405;
                      }
                      else
                      {
                        HIBYTE(v575) = v405;
                        v414 = &v573;
                        if (!v405)
                        {
                          LOBYTE(v573) = 0;
                          LOBYTE(v576) = 1;
                          v415 = *(NSObject **)object;
                          if ((SHIBYTE(v575) & 0x80000000) == 0)
                            goto LABEL_756;
                          goto LABEL_762;
                        }
                      }
                      memmove(v414, v404, v405);
                      *((_BYTE *)v414 + v405) = 0;
                      LOBYTE(v576) = 1;
                      v415 = *(NSObject **)object;
                      if ((SHIBYTE(v575) & 0x80000000) == 0)
                      {
LABEL_756:
                        v202 = (_DWORD *)(v503 + 216);
                        if (!BYTE8(v572))
                          goto LABEL_765;
                        goto LABEL_763;
                      }
LABEL_762:
                      operator delete(v573);
                      v202 = (_DWORD *)(v503 + 216);
                      if (!BYTE8(v572))
                        goto LABEL_765;
LABEL_763:
                      if (SBYTE7(v572) < 0)
                        operator delete(*(void **)&object[8]);
LABEL_765:
                      if (*(_QWORD *)object)
                        os_release(*(void **)object);
                      if (!v390 || !*(_QWORD *)(v390 + 24))
                      {
                        os_log_type_enabled(v415, OS_LOG_TYPE_DEBUG);
                        *(_DWORD *)object = 136315138;
                        *(_QWORD *)&object[4] = v520;
                        v424 = (void *)_os_log_send_and_compose_impl();
                        if (!v424)
                          goto LABEL_838;
                        free(v424);
                        if (!v524)
                          goto LABEL_842;
                        goto LABEL_839;
                      }
                      v418 = _os_log_pack_size();
                      v419 = (std::__shared_weak_count_vtbl *)operator new(v418, (std::align_val_t)8uLL);
                      v420 = (std::__shared_weak_count *)operator new();
                      v420->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
                      v420->__shared_owners_ = 0;
                      v420->__shared_weak_owners_ = 0;
                      v420[1].__vftable = v419;
                      v565[0] = v419;
                      v565[1] = v419;
                      v566 = v420;
                      v567 = 0;
                      v568 = 0;
                      v421 = strlen(v520);
                      if (v421 > 0x7FFFFFFFFFFFFFF7)
                        sub_20E860B7C();
                      v422 = v421;
                      if (v421 >= 0x17)
                      {
                        v425 = (v421 & 0xFFFFFFFFFFFFFFF8) + 8;
                        if ((v421 | 7) != 0x17)
                          v425 = v421 | 7;
                        v426 = v425 + 1;
                        v423 = operator new(v425 + 1);
                        *((_QWORD *)&v570 + 1) = v426 | 0x8000000000000000;
                        v569 = v423;
                        *(_QWORD *)&v570 = v422;
LABEL_779:
                        memcpy(v423, v520, v422);
                        goto LABEL_780;
                      }
                      HIBYTE(v570) = v421;
                      v423 = &v569;
                      if (v421)
                        goto LABEL_779;
LABEL_780:
                      *((_BYTE *)v423 + v422) = 0;
                      v427 = v569;
                      v577[0] = v570;
                      *(_QWORD *)((char *)v577 + 7) = *(_QWORD *)((char *)&v570 + 7);
                      v428 = HIBYTE(v570);
                      v429 = operator new(0x38uLL);
                      v429[1] = 0;
                      v429[2] = 0;
                      v429[3] = off_24C9ABC20;
                      *v429 = &off_24C9ABBD0;
                      v430 = v577[0];
                      v429[4] = v427;
                      v429[5] = v430;
                      *(_QWORD *)((char *)v429 + 47) = *(_QWORD *)((char *)v577 + 7);
                      *((_BYTE *)v429 + 55) = v428;
                      v577[0] = 0;
                      *(_QWORD *)((char *)v577 + 7) = 0;
                      v431 = v568;
                      v567 = (char *)(v429 + 3);
                      v568 = (std::__shared_weak_count *)v429;
                      v413 = v524;
                      if (v431)
                      {
                        v432 = (unint64_t *)&v431->__shared_owners_;
                        do
                          v433 = __ldaxr(v432);
                        while (__stlxr(v433 - 1, v432));
                        if (!v433)
                        {
                          ((void (*)(std::__shared_weak_count *))v431->__on_zero_shared)(v431);
                          std::__shared_weak_count::__release_weak(v431);
                        }
                      }
                      *(_OWORD *)object = *(_OWORD *)v565;
                      v434 = v567;
                      *(_QWORD *)&object[16] = v566;
                      if (v566)
                      {
                        v435 = (unint64_t *)&v566->__shared_owners_;
                        do
                          v436 = __ldxr(v435);
                        while (__stxr(v436 + 1, v435));
                      }
                      v437 = v568;
                      *(_QWORD *)&v572 = v434;
                      *((_QWORD *)&v572 + 1) = v568;
                      if (v568)
                      {
                        v438 = (unint64_t *)&v568->__shared_owners_;
                        do
                          v439 = __ldxr(v438);
                        while (__stxr(v439 + 1, v438));
                        v573 = v434;
                        do
                          v440 = __ldaxr(v438);
                        while (__stlxr(v440 - 1, v438));
                        if (!v440)
                        {
                          ((void (*)(std::__shared_weak_count *))v437->__on_zero_shared)(v437);
                          std::__shared_weak_count::__release_weak(v437);
                        }
                      }
                      else
                      {
                        v573 = v434;
                      }
                      v441 = v566;
                      if (v566)
                      {
                        v442 = (unint64_t *)&v566->__shared_owners_;
                        do
                          v443 = __ldaxr(v442);
                        while (__stlxr(v443 - 1, v442));
                        if (!v443)
                        {
                          ((void (*)(std::__shared_weak_count *))v441->__on_zero_shared)(v441);
                          std::__shared_weak_count::__release_weak(v441);
                        }
                      }
                      v444 = *(_QWORD *)object;
                      if (*((char *)v573 + 31) >= 0)
                        v445 = (char *)v573 + 8;
                      else
                        v445 = (char *)*((_QWORD *)v573 + 1);
                      v446 = _os_log_pack_fill();
                      *(_DWORD *)v446 = 136315138;
                      *(_QWORD *)(v446 + 4) = v445;
                      v447 = (char *)operator new();
                      v448 = *(unsigned __int8 *)(v510 + 39);
                      v449 = *(const char **)(v510 + 16);
                      v450 = *(_QWORD *)(v510 + 24);
                      v451 = v572;
                      *(_OWORD *)(v447 + 8) = *(_OWORD *)&object[8];
                      if ((v448 & 0x80u) != 0)
                        v448 = v450;
                      else
                        v449 = v513;
                      *(_QWORD *)v447 = v444;
                      *(_QWORD *)&object[8] = 0;
                      *(_QWORD *)&object[16] = 0;
                      *(_OWORD *)(v447 + 24) = v451;
                      v572 = 0uLL;
                      *((_QWORD *)v447 + 5) = v449;
                      *((_QWORD *)v447 + 6) = v448;
                      v447[56] = 2;
                      v569 = 0;
                      v565[0] = v447;
                      (*(void (**)(_QWORD, void **))(**(_QWORD **)(v390 + 24) + 40))(*(_QWORD *)(v390 + 24), v565);
                      v202 = (_DWORD *)(v503 + 216);
                      v452 = v565[0];
                      v565[0] = 0;
                      if (v452)
                      {
                        v453 = (std::__shared_weak_count *)*((_QWORD *)v452 + 4);
                        if (v453)
                        {
                          v454 = (unint64_t *)&v453->__shared_owners_;
                          do
                            v455 = __ldaxr(v454);
                          while (__stlxr(v455 - 1, v454));
                          if (!v455)
                          {
                            ((void (*)(std::__shared_weak_count *))v453->__on_zero_shared)(v453);
                            std::__shared_weak_count::__release_weak(v453);
                          }
                        }
                        v456 = (std::__shared_weak_count *)*((_QWORD *)v452 + 2);
                        if (v456)
                        {
                          v457 = (unint64_t *)&v456->__shared_owners_;
                          do
                            v458 = __ldaxr(v457);
                          while (__stlxr(v458 - 1, v457));
                          if (!v458)
                          {
                            ((void (*)(std::__shared_weak_count *))v456->__on_zero_shared)(v456);
                            std::__shared_weak_count::__release_weak(v456);
                          }
                        }
                        MEMORY[0x212BC6398](v452, 0x10F0C40B62ED6C6);
                        v459 = v569;
                        v569 = 0;
                        if (v459)
                        {
                          v460 = (std::__shared_weak_count *)v459[4];
                          if (v460)
                          {
                            v461 = (unint64_t *)&v460->__shared_owners_;
                            do
                              v462 = __ldaxr(v461);
                            while (__stlxr(v462 - 1, v461));
                            if (!v462)
                            {
                              ((void (*)(std::__shared_weak_count *))v460->__on_zero_shared)(v460);
                              std::__shared_weak_count::__release_weak(v460);
                            }
                          }
                          v463 = (std::__shared_weak_count *)v459[2];
                          if (v463)
                          {
                            v464 = (unint64_t *)&v463->__shared_owners_;
                            do
                              v465 = __ldaxr(v464);
                            while (__stlxr(v465 - 1, v464));
                            if (!v465)
                            {
                              ((void (*)(std::__shared_weak_count *))v463->__on_zero_shared)(v463);
                              std::__shared_weak_count::__release_weak(v463);
                            }
                          }
                          MEMORY[0x212BC6398](v459, 0x10F0C40B62ED6C6);
                        }
                      }
                      v466 = (std::__shared_weak_count *)*((_QWORD *)&v572 + 1);
                      if (!*((_QWORD *)&v572 + 1))
                        goto LABEL_834;
                      v467 = (unint64_t *)(*((_QWORD *)&v572 + 1) + 8);
                      do
                        v468 = __ldaxr(v467);
                      while (__stlxr(v468 - 1, v467));
                      if (!v468)
                      {
                        ((void (*)(std::__shared_weak_count *))v466->__on_zero_shared)(v466);
                        std::__shared_weak_count::__release_weak(v466);
                        v469 = *(std::__shared_weak_count **)&object[16];
                        if (!*(_QWORD *)&object[16])
                          goto LABEL_838;
                      }
                      else
                      {
LABEL_834:
                        v469 = *(std::__shared_weak_count **)&object[16];
                        if (!*(_QWORD *)&object[16])
                          goto LABEL_838;
                      }
                      v470 = (unint64_t *)&v469->__shared_owners_;
                      do
                        v471 = __ldaxr(v470);
                      while (__stlxr(v471 - 1, v470));
                      if (v471)
                      {
LABEL_838:
                        if (!v413)
                          goto LABEL_842;
                        goto LABEL_839;
                      }
                      ((void (*)(std::__shared_weak_count *))v469->__on_zero_shared)(v469);
                      std::__shared_weak_count::__release_weak(v469);
                      if (!v524)
                        goto LABEL_842;
LABEL_839:
                      v472 = (const char *)&__dst;
                      if (v563 < 0)
                        v472 = (const char *)__dst;
                      sub_20E8C003C((uint64_t)&v552, "%s", v472);
                      sub_20E863570((uint64_t)&v552);
LABEL_842:
                      sub_20E863570((uint64_t)&v552);
                      v473 = v560;
                      if (v560)
                      {
                        v474 = (unint64_t *)&v560->__shared_owners_;
                        do
                          v475 = __ldaxr(v474);
                        while (__stlxr(v475 - 1, v474));
                        if (!v475)
                        {
                          ((void (*)(std::__shared_weak_count *))v473->__on_zero_shared)(v473);
                          std::__shared_weak_count::__release_weak(v473);
                          if ((SHIBYTE(v563) & 0x80000000) == 0)
                            goto LABEL_848;
LABEL_847:
                          operator delete(__dst);
                          goto LABEL_848;
                        }
                      }
                      if (SHIBYTE(v563) < 0)
                        goto LABEL_847;
LABEL_848:
                      v578 = v501;
                      *(void **)((char *)&v578 + *((_QWORD *)v501 - 3)) = v500;
                      v580 = v498;
                      v581[0] = v495;
                      if (SBYTE7(v588) < 0)
                        operator delete((void *)v587);
                      std::streambuf::~streambuf();
                      std::iostream::~basic_iostream();
                      MEMORY[0x212BC6290](&v590);
LABEL_701:
                      if (++v385 == 8)
                        return v480;
                    }
                    v400 = (v395 & 0xFFFFFFFFFFFFFFF8) + 8;
                    if ((v395 | 7) != 0x17)
                      v400 = v395 | 7;
                    v401 = v400 + 1;
                    v396 = (void **)operator new(v400 + 1);
                    v563 = v401 | 0x8000000000000000;
                    __dst = v396;
                    v562 = v395;
LABEL_731:
                    memmove(v396, v399, v395);
                    goto LABEL_732;
                  }
                }
                memcpy(v330, v308, v329);
                goto LABEL_625;
              }
            }
            memmove(v321, v310, v311);
            goto LABEL_606;
          }
        }
        memmove(v315, v313, v314);
        goto LABEL_598;
      }
    }
    memmove(v259, v305, v258);
    goto LABEL_577;
  }
  return v480;
}

void sub_20EFEED8C(_Unwind_Exception *a1)
{
  if (LOBYTE(STACK[0x358]) && SLOBYTE(STACK[0x357]) < 0)
    operator delete((void *)STACK[0x340]);
  __cxa_guard_abort(&qword_254A4A510);
  sub_20E863714((uint64_t)&STACK[0x298]);
  if (SLOBYTE(STACK[0x2F7]) < 0)
  {
    operator delete((void *)STACK[0x2E0]);
    sub_20E863784((uint64_t)&STACK[0x3A0]);
    _Unwind_Resume(a1);
  }
  sub_20E863784((uint64_t)&STACK[0x3A0]);
  _Unwind_Resume(a1);
}

BOOL sub_20EFEF280(double *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, _QWORD *a6)
{
  unint64_t v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  unsigned int v13;
  double v14;
  double v15;
  unint64_t v16;
  uint64_t v17;
  unsigned int v18;
  unsigned __int8 v19;
  uint64_t v20;
  uint64_t v21;
  unsigned __int8 v22;
  unsigned __int8 v23;
  uint64_t v24;
  uint64_t v25;
  unsigned __int8 v26;
  unsigned __int8 v27;
  uint64_t v28;
  uint64_t v29;
  unsigned __int8 v30;
  unsigned __int8 v31;
  uint64_t v32;
  uint64_t v33;
  unsigned __int8 v34;
  int8x8_t v35;
  unint64_t v36;
  uint8x8_t v37;
  unint64_t v38;
  uint64_t **v39;
  uint64_t *v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  int8x8_t v44;
  uint8x8_t v45;
  unint64_t v46;
  uint64_t **v47;
  uint64_t *v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  BOOL v54;
  unint64_t v55;
  unint64_t v56;
  uint64_t v57;
  unsigned __int8 v58;
  int v59;
  _QWORD *v60;
  _QWORD *v61;
  _QWORD *v62;
  _QWORD *v63;
  _QWORD *v64;
  _QWORD *v65;
  _QWORD *v66;
  _QWORD *v67;
  size_t v68;
  void **v69;
  unint64_t v70;
  void **v71;
  void *v72;
  uint64_t v73;
  uint64_t v74;
  void **v75;
  uint64_t v76;
  size_t v77;
  const char *v78;
  unsigned __int8 v79;
  unsigned __int8 v80;
  const char *v81;
  size_t v82;
  _BYTE *v83;
  uint64_t v84;
  uint64_t v85;
  char *v86;
  NSObject *v87;
  unint64_t v88;
  uint64_t v89;
  uint64_t v90;
  size_t v91;
  std::__shared_weak_count_vtbl *v92;
  std::__shared_weak_count *v93;
  size_t v94;
  size_t v95;
  uint64_t *v96;
  void *v97;
  int v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  char v102;
  _QWORD *v103;
  uint64_t v104;
  std::__shared_weak_count *v105;
  unint64_t *v106;
  unint64_t v107;
  char *v108;
  unint64_t *v109;
  unint64_t v110;
  std::__shared_weak_count *v111;
  unint64_t *v112;
  unint64_t v113;
  unint64_t v114;
  std::__shared_weak_count *v115;
  unint64_t *v116;
  unint64_t v117;
  uint64_t v118;
  char *v119;
  uint64_t v120;
  char *v121;
  uint64_t v122;
  uint64_t v123;
  void *v124;
  std::__shared_weak_count *v125;
  unint64_t *v126;
  unint64_t v127;
  std::__shared_weak_count *v128;
  unint64_t *v129;
  unint64_t v130;
  uint64_t v131;
  std::__shared_weak_count *v132;
  unint64_t *v133;
  unint64_t v134;
  std::__shared_weak_count *v135;
  unint64_t *v136;
  unint64_t v137;
  std::__shared_weak_count *v138;
  unint64_t *v139;
  unint64_t v140;
  std::__shared_weak_count *v141;
  unint64_t *v142;
  unint64_t v143;
  const char *v144;
  std::__shared_weak_count *v145;
  unint64_t *v146;
  unint64_t v147;
  unsigned int v148;
  int8x8_t v149;
  unint64_t v150;
  uint8x8_t v151;
  unint64_t v152;
  uint64_t **v153;
  uint64_t *v154;
  unint64_t v155;
  uint64_t v156;
  uint8x8_t v157;
  unint64_t v158;
  uint64_t **v159;
  uint64_t *v160;
  uint64_t v161;
  unint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  BOOL v166;
  unint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  int v172;
  _QWORD *v173;
  _QWORD *v174;
  _QWORD *v175;
  _QWORD *v176;
  _QWORD *v177;
  _QWORD *v178;
  _QWORD *v179;
  size_t v180;
  void **p_dst;
  unint64_t v182;
  void **v183;
  void *v184;
  uint64_t v185;
  uint64_t v186;
  void **v187;
  uint64_t v188;
  size_t v189;
  const char *v190;
  unsigned __int8 v191;
  unsigned __int8 v192;
  const char *v193;
  size_t v194;
  _BYTE *v195;
  uint64_t v196;
  uint64_t v197;
  char *v198;
  char *v199;
  uint64_t v200;
  uint64_t v201;
  NSObject *v202;
  size_t v203;
  std::__shared_weak_count_vtbl *v204;
  std::__shared_weak_count *v205;
  size_t v206;
  size_t v207;
  uint64_t *v208;
  void *v209;
  int v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  char v214;
  _QWORD *v215;
  uint64_t v216;
  std::__shared_weak_count *v217;
  unint64_t *p_shared_owners;
  unint64_t v219;
  char *v220;
  unint64_t *v221;
  unint64_t v222;
  std::__shared_weak_count *v223;
  unint64_t *v224;
  unint64_t v225;
  unint64_t v226;
  std::__shared_weak_count *v227;
  unint64_t *v228;
  unint64_t v229;
  uint64_t v230;
  char *v231;
  uint64_t v232;
  char *v233;
  uint64_t v234;
  uint64_t v235;
  void *v236;
  std::__shared_weak_count *v237;
  unint64_t *v238;
  unint64_t v239;
  std::__shared_weak_count *v240;
  unint64_t *v241;
  unint64_t v242;
  uint64_t v243;
  std::__shared_weak_count *v244;
  unint64_t *v245;
  unint64_t v246;
  std::__shared_weak_count *v247;
  unint64_t *v248;
  unint64_t v249;
  std::__shared_weak_count *v250;
  unint64_t *v251;
  unint64_t v252;
  std::__shared_weak_count *v253;
  unint64_t *v254;
  unint64_t v255;
  const char *v256;
  std::__shared_weak_count *v257;
  unint64_t *v258;
  unint64_t v259;
  double v260;
  double v261;
  double v262;
  double v263;
  double v264;
  _BOOL8 v265;
  int v266;
  unint64_t v267;
  unint64_t v268;
  int v269;
  unint64_t v270;
  unint64_t v271;
  uint64_t v272;
  uint64_t v273;
  size_t v274;
  const char *v275;
  unsigned __int8 v276;
  _QWORD *v277;
  _QWORD *v278;
  _QWORD *v279;
  _QWORD *v280;
  _QWORD *v281;
  _QWORD *v282;
  _QWORD *v283;
  size_t v284;
  void **v285;
  unint64_t v286;
  const void *v287;
  uint64_t v288;
  uint64_t v289;
  void **v290;
  uint64_t v291;
  const char *v292;
  size_t v293;
  unsigned __int8 v294;
  unsigned __int8 v295;
  const char *v296;
  size_t v297;
  _BYTE *v298;
  _BOOL8 v299;
  int v300;
  uint64_t v301;
  uint64_t v302;
  char *v303;
  const char *v304;
  unint64_t v305;
  NSObject *v306;
  uint64_t v307;
  uint64_t v308;
  size_t v309;
  std::__shared_weak_count_vtbl *v310;
  std::__shared_weak_count *v311;
  size_t v312;
  size_t v313;
  uint64_t *v314;
  void *v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t v318;
  char v319;
  _QWORD *v320;
  uint64_t v321;
  std::__shared_weak_count *v322;
  unint64_t *v323;
  unint64_t v324;
  char *v325;
  unint64_t *v326;
  unint64_t v327;
  std::__shared_weak_count *v328;
  unint64_t *v329;
  unint64_t v330;
  unint64_t v331;
  unsigned __int8 v332;
  const char *v333;
  size_t v334;
  _BYTE *v335;
  unint64_t v336;
  const char *v337;
  _BOOL8 v338;
  uint64_t v339;
  int v340;
  uint64_t v341;
  uint64_t v342;
  void *v343;
  uint64_t v344;
  uint64_t v345;
  NSObject *v346;
  size_t v347;
  std::__shared_weak_count_vtbl *v348;
  std::__shared_weak_count *v349;
  std::__shared_weak_count *v350;
  unint64_t *v351;
  unint64_t v352;
  unint64_t v353;
  uint64_t v354;
  uint64_t v355;
  uint64_t v356;
  uint64_t v357;
  uint64_t v358;
  uint64_t v359;
  __int128 v360;
  uint64_t *v361;
  std::__shared_weak_count *v362;
  unint64_t *v363;
  unint64_t v364;
  std::__shared_weak_count *v365;
  unint64_t *v366;
  unint64_t v367;
  void *v368;
  std::__shared_weak_count *v369;
  unint64_t *v370;
  unint64_t v371;
  std::__shared_weak_count *v372;
  unint64_t *v373;
  unint64_t v374;
  std::__shared_weak_count *v375;
  unint64_t *v376;
  unint64_t v377;
  std::__shared_weak_count *v378;
  unint64_t *v379;
  unint64_t v380;
  void *v381;
  std::__shared_weak_count *v382;
  unint64_t *v383;
  unint64_t v384;
  std::__shared_weak_count *v385;
  unint64_t *v386;
  unint64_t v387;
  uint64_t v388;
  char *v389;
  uint64_t v390;
  char *v391;
  uint64_t v392;
  const char *v393;
  void *v394;
  std::__shared_weak_count *v395;
  unint64_t *v396;
  unint64_t v397;
  std::__shared_weak_count *v398;
  unint64_t *v399;
  unint64_t v400;
  uint64_t v401;
  std::__shared_weak_count *v402;
  unint64_t *v403;
  unint64_t v404;
  std::__shared_weak_count *v405;
  unint64_t *v406;
  unint64_t v407;
  std::__shared_weak_count *v408;
  unint64_t *v409;
  unint64_t v410;
  std::__shared_weak_count *v411;
  unint64_t *v412;
  unint64_t v413;
  const char *v414;
  std::__shared_weak_count *v415;
  unint64_t *v416;
  unint64_t v417;
  uint64_t v418;
  double *v420;
  uint64_t v421;
  uint64_t v422;
  uint64_t v423;
  uint64_t v424;
  uint64_t v425;
  uint64_t v426;
  const char *__src;
  int v429;
  unint64_t v431;
  uint64_t v432;
  unint64_t v433;
  uint64_t v434;
  char *v435;
  char *v436;
  uint64_t v437;
  int v438;
  unsigned int v439;
  unint64_t v440;
  unint64_t v441;
  char *__s;
  char *__sa;
  uint64_t v444;
  uint64_t v445;
  const char *v447;
  unsigned int v448;
  unsigned int v449;
  uint64_t v450;
  unint64_t v451;
  uint64_t *v452;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep rep;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v454;
  int v455;
  const char *v456;
  int v457;
  const char *v458;
  uint64_t v459;
  std::__shared_weak_count *v460;
  void **__dst;
  size_t v462;
  int64_t v463;
  uint64_t v464;
  void *v465[2];
  std::__shared_weak_count *v466;
  char *v467;
  std::__shared_weak_count *v468;
  uint64_t *v469;
  __int128 v470;
  _BYTE object[24];
  __int128 v472;
  void *v473[2];
  unint64_t v474;
  const void *v475;
  unint64_t v476;
  void *__p;
  char v478;
  unint64_t v479;
  int v480;
  _BYTE v481[160];
  _BYTE v482[24];
  __int128 v483;
  char *v484;
  const char *v485;
  unint64_t v486;
  std::__shared_weak_count *v487;
  _QWORD v488[5];

  v488[2] = *MEMORY[0x24BDAC8D0];
  v445 = a2;
  if (a2 == a3 && a4 == a5)
  {
    v7 = 0.0;
    v8 = 0.0;
    v9 = 0.0;
    v10 = 0.0;
    v11 = 0.0;
    v12 = 0.0;
    goto LABEL_488;
  }
  v13 = 0;
  v439 = 0;
  v420 = a1;
  v423 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
  v424 = *MEMORY[0x24BEDB7F0];
  v422 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  v11 = 0.0;
  v10 = 0.0;
  v9 = 0.0;
  v8 = 0.0;
  v14 = 0.0;
  v15 = 0.0;
  v421 = MEMORY[0x24BEDB848] + 16;
  do
  {
    v16 = 0x6FB586FB586FB587 * ((uint64_t)(*(_QWORD *)(v445 + 16) - *(_QWORD *)(v445 + 8)) >> 3);
    v444 = a4;
    if (v16 != (uint64_t)(*(_QWORD *)(a4 + 32) - *(_QWORD *)(a4 + 24)) >> 4)
    {
      if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Odometry/src/CameraAllocator.cpp", 124, (uint64_t)"camera_features.NumStreams() == descriptors.NumStreams()", 56, (uint64_t)"NumStreams mismatch", 19, (void (*)(void **))sub_21023DDB0))
      {
        abort();
      }
      v16 = 0x6FB586FB586FB587 * ((uint64_t)(*(_QWORD *)(v445 + 16) - *(_QWORD *)(v445 + 8)) >> 3);
    }
    if (v16 < 2)
    {
      v148 = *(_DWORD *)v445;
      if (*(_DWORD *)v445 >= 0x10000u)
      {
        if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/ComputerVisionTypes/include/VIO/ComputerVisionTypes/CameraStreamId.h", 38, (uint64_t)"camera_id <= 0xffff", 19, (uint64_t)"Camera ID cannot exceeds 16 bits", 32, (void (*)(void **))sub_21023DDB0))
        {
          abort();
        }
        if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/ComputerVisionTypes/include/VIO/ComputerVisionTypes/CameraStreamId.h", 49, (uint64_t)"camera_id <= 0xffff", 19, (uint64_t)"Camera ID cannot exceeds 16 bits", 32, (void (*)(void **))sub_21023DDB0))
        {
          abort();
        }
      }
      v149 = (int8x8_t)a6[1];
      if (!*(_QWORD *)&v149)
        goto LABEL_476;
      v150 = v148 << 16;
      v151 = (uint8x8_t)vcnt_s8(v149);
      v151.i16[0] = vaddlv_u8(v151);
      if (v151.u32[0] > 1uLL)
      {
        v152 = v148 << 16;
        if (*(_QWORD *)&v149 <= v150)
          v152 = v150 % *(_QWORD *)&v149;
      }
      else
      {
        v152 = (v149.i32[0] - 1) & v150;
      }
      v153 = *(uint64_t ***)(*a6 + 8 * v152);
      if (!v153)
        goto LABEL_476;
      v154 = *v153;
      if (!v154)
        goto LABEL_476;
      if (v151.u32[0] < 2uLL)
      {
        while (1)
        {
          v156 = v154[1];
          if (v156 == v150)
          {
            if (*((_DWORD *)v154 + 4) == (_DWORD)v150)
              goto LABEL_303;
          }
          else if ((v156 & (*(_QWORD *)&v149 - 1)) != v152)
          {
            goto LABEL_476;
          }
          v154 = (uint64_t *)*v154;
          if (!v154)
            goto LABEL_476;
        }
      }
      while (1)
      {
        v155 = v154[1];
        if (v155 == v150)
        {
          if (*((_DWORD *)v154 + 4) == (_DWORD)v150)
          {
LABEL_303:
            if (v148 >= 0x10000)
            {
              if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/ComputerVisionTypes/include/VIO/ComputerVisionTypes/CameraStreamId.h", 49, (uint64_t)"camera_id <= 0xffff", 19, (uint64_t)"Camera ID cannot exceeds 16 bits", 32, (void (*)(void **))sub_21023DDB0))
              {
                abort();
              }
              v149 = (int8x8_t)a6[1];
            }
            if (!*(_QWORD *)&v149)
              goto LABEL_737;
            v157 = (uint8x8_t)vcnt_s8(v149);
            v157.i16[0] = vaddlv_u8(v157);
            if (v157.u32[0] > 1uLL)
            {
              v158 = v148 << 16;
              if (*(_QWORD *)&v149 <= v150)
                v158 = v150 % *(_QWORD *)&v149;
            }
            else
            {
              v158 = (v149.i32[0] - 1) & v150;
            }
            v159 = *(uint64_t ***)(*a6 + 8 * v158);
            if (!v159 || (v160 = *v159) == 0)
LABEL_737:
              sub_20E89FD20("unordered_map::at: key not found");
            if (v157.u32[0] < 2uLL)
            {
              v161 = *(_QWORD *)&v149 - 1;
              while (1)
              {
                v163 = v160[1];
                if (v163 == v150)
                {
                  if (*((_DWORD *)v160 + 4) == (_DWORD)v150)
                    goto LABEL_326;
                }
                else if ((v163 & v161) != v158)
                {
                  goto LABEL_737;
                }
                v160 = (uint64_t *)*v160;
                if (!v160)
                  goto LABEL_737;
              }
            }
            while (1)
            {
              v162 = v160[1];
              if (v162 == v150)
              {
                if (*((_DWORD *)v160 + 4) == (_DWORD)v150)
                {
LABEL_326:
                  v449 = v13;
                  v164 = **(_QWORD **)(v444 + 24);
                  if (!*(_BYTE *)(v164 + 184))
                  {
                    if (*(_QWORD *)(v164 + 160) == *(_QWORD *)(v164 + 168))
                    {
                      v167 = (uint64_t)(*(_QWORD *)(v164 + 64) - *(_QWORD *)(v164 + 56)) >> 5;
                      if (v167 == (uint64_t)(*(_QWORD *)(v164 + 88) - *(_QWORD *)(v164 + 80)) >> 6)
                        goto LABEL_336;
                    }
                    goto LABEL_337;
                  }
                  v165 = *(_QWORD *)(v164 + 88) - *(_QWORD *)(v164 + 80);
                  if (v165)
                    v166 = v165 == *(_QWORD *)(v164 + 168) - *(_QWORD *)(v164 + 160);
                  else
                    v166 = 0;
                  if (!v166)
                    goto LABEL_337;
                  v167 = (uint64_t)(*(_QWORD *)(v164 + 64) - *(_QWORD *)(v164 + 56)) >> 5;
                  if (v167 != v165 >> 6)
                    goto LABEL_337;
LABEL_336:
                  if (*(_QWORD *)(v164 + 16) > v167)
                  {
LABEL_337:
                    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/FeatureDetection/include/VIO/FeatureDetection/PointDescriptorStore.h", 184, (uint64_t)"HasValidSize()", 14, (uint64_t)"Descriptor size mis-match", 25, (void (*)(void **))sub_21023DDB0))
                    {
                      abort();
                    }
                  }
                  v168 = *(_QWORD *)(v445 + 8);
                  v170 = *(_QWORD *)(v168 + 72);
                  v169 = *(_QWORD *)(v168 + 80);
                  LODWORD(v6) = *((_DWORD *)v160 + 5);
                  sub_20EFF37E4(&v464);
                  v171 = (v169 - v170) >> 3;
                  v13 = v449;
                  if (**(int **)(v464 + 56) > 2)
                    goto LABEL_475;
                  v172 = *(unsigned __int8 *)(v464 + 72);
                  v441 = sub_20E8C31DC(v464, "OSLogSurrogateAppender", 1, 0);
                  v438 = v172;
                  if (!v172 && !v441)
                    goto LABEL_475;
                  sub_20E863438((uint64_t)object);
                  v173 = sub_20E86A980(&object[16], (uint64_t)"[CA] mono_stream_camera_recall:  ", 33);
                  sub_20E86A980(v173, (uint64_t)"[", 1);
                  v174 = (_QWORD *)std::ostream::operator<<();
                  sub_20E86A980(v174, (uint64_t)",", 1);
                  v175 = (_QWORD *)std::ostream::operator<<();
                  v176 = sub_20E86A980(v175, (uint64_t)"]", 1);
                  v177 = sub_20E86A980(v176, (uint64_t)" | ", 3);
                  *(_QWORD *)((char *)v177 + *(_QWORD *)(*v177 - 24) + 24) = 4;
                  v178 = (_QWORD *)std::ostream::operator<<();
                  sub_20E86A980(v178, (uint64_t)"/", 1);
                  v179 = (_QWORD *)std::ostream::operator<<();
                  sub_20E86A980(v179, (uint64_t)" num_temporal_matches: ", 23);
                  std::ostream::operator<<();
                  __sa = (char *)v171;
                  if ((v480 & 0x10) != 0)
                  {
                    v182 = v479;
                    v183 = (void **)&v475;
                    if (v479 < v476)
                    {
                      v479 = v476;
                      v182 = v476;
                      v183 = (void **)&v475;
                    }
                  }
                  else
                  {
                    if ((v480 & 8) == 0)
                    {
                      v180 = 0;
                      HIBYTE(v463) = 0;
                      p_dst = (void **)&__dst;
                      goto LABEL_355;
                    }
                    v182 = v474;
                    v183 = v473;
                  }
                  v184 = *v183;
                  v180 = v182 - (_QWORD)*v183;
                  if (v180 > 0x7FFFFFFFFFFFFFF7)
                    sub_20E860B7C();
                  if (v180 >= 0x17)
                  {
                    v185 = (v180 & 0xFFFFFFFFFFFFFFF8) + 8;
                    if ((v180 | 7) != 0x17)
                      v185 = v180 | 7;
                    v186 = v185 + 1;
                    p_dst = (void **)operator new(v185 + 1);
                    v462 = v180;
                    v463 = v186 | 0x8000000000000000;
                    __dst = p_dst;
                  }
                  else
                  {
                    HIBYTE(v463) = v182 - *(_BYTE *)v183;
                    p_dst = (void **)&__dst;
                    if (!v180)
                    {
LABEL_355:
                      *((_BYTE *)p_dst + v180) = 0;
                      v452 = &v464;
                      rep = std::chrono::steady_clock::now().__d_.__rep_;
                      v454 = std::chrono::system_clock::now().__d_.__rep_;
                      v455 = 2;
                      v456 = "unknown file";
                      v457 = 192;
                      v458 = "unknown function";
                      v459 = 0;
                      v460 = 0;
                      v187 = (void **)&__dst;
                      if (v463 < 0)
                        v187 = __dst;
                      v436 = (char *)v187;
                      v188 = *v452;
                      v432 = *v452;
                      if (*(char *)(*v452 + 39) < 0)
                      {
                        v190 = *(const char **)(v188 + 16);
                        v189 = *(_QWORD *)(v188 + 24);
                        v434 = *v452 + 16;
                        v192 = atomic_load((unsigned __int8 *)&qword_254A4A510);
                        if ((v192 & 1) == 0)
                        {
LABEL_479:
                          if (__cxa_guard_acquire(&qword_254A4A510))
                          {
                            sub_20E9E46F8((uint64_t)v465);
                            sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)v465);
                            if ((_BYTE)v467 && SHIBYTE(v466) < 0)
                              operator delete(v465[0]);
                            __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
                            __cxa_guard_release(&qword_254A4A510);
                          }
                        }
                      }
                      else
                      {
                        v189 = *(unsigned __int8 *)(*v452 + 39);
                        v190 = (const char *)(*v452 + 16);
                        v434 = (uint64_t)v190;
                        v191 = atomic_load((unsigned __int8 *)&qword_254A4A510);
                        if ((v191 & 1) == 0)
                          goto LABEL_479;
                      }
                      if (byte_254A4A4F8[23] >= 0)
                        v193 = byte_254A4A4F8;
                      else
                        v193 = *(const char **)byte_254A4A4F8;
                      if (byte_254A4A4F8[23] >= 0)
                        v194 = byte_254A4A4F8[23];
                      else
                        v194 = *(_QWORD *)&byte_254A4A4F8[8];
                      *(_QWORD *)v482 = os_log_create(v193, v190);
                      if (v194 > 0x7FFFFFFFFFFFFFF7)
                        sub_20E860B7C();
                      if (v194 >= 0x17)
                      {
                        v196 = (v194 & 0xFFFFFFFFFFFFFFF8) + 8;
                        if ((v194 | 7) != 0x17)
                          v196 = v194 | 7;
                        v197 = v196 + 1;
                        v195 = operator new(v196 + 1);
                        *(_QWORD *)&v482[16] = v194;
                        *(_QWORD *)&v483 = v197 | 0x8000000000000000;
                        *(_QWORD *)&v482[8] = v195;
                      }
                      else
                      {
                        BYTE7(v483) = v194;
                        v195 = &v482[8];
                        if (!v194)
                        {
LABEL_375:
                          v195[v194] = 0;
                          BYTE8(v483) = 1;
                          if (v189 > 0x7FFFFFFFFFFFFFF7)
                            sub_20E860B7C();
                          v13 = v449;
                          v198 = __sa;
                          if (v189 >= 0x17)
                          {
                            v200 = (v189 & 0xFFFFFFFFFFFFFFF8) + 8;
                            if ((v189 | 7) != 0x17)
                              v200 = v189 | 7;
                            v201 = v200 + 1;
                            v199 = (char *)operator new(v200 + 1);
                            v485 = (const char *)v189;
                            v486 = v201 | 0x8000000000000000;
                            v484 = v199;
                          }
                          else
                          {
                            HIBYTE(v486) = v189;
                            v199 = (char *)&v484;
                            if (!v189)
                            {
LABEL_383:
                              v199[v189] = 0;
                              LOBYTE(v487) = 1;
                              v202 = *(NSObject **)v482;
                              if (SHIBYTE(v486) < 0)
                                operator delete(v484);
                              if (BYTE8(v483) && SBYTE7(v483) < 0)
                                operator delete(*(void **)&v482[8]);
                              if (*(_QWORD *)v482)
                                os_release(*(void **)v482);
                              if (v441 && *(_QWORD *)(v441 + 24))
                              {
                                v203 = _os_log_pack_size();
                                v204 = (std::__shared_weak_count_vtbl *)operator new(v203, (std::align_val_t)8uLL);
                                v205 = (std::__shared_weak_count *)operator new();
                                v205->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
                                v205->__shared_owners_ = 0;
                                v205->__shared_weak_owners_ = 0;
                                v205[1].__vftable = v204;
                                v465[0] = v204;
                                v465[1] = v204;
                                v466 = v205;
                                v467 = 0;
                                v468 = 0;
                                v206 = strlen(v436);
                                if (v206 > 0x7FFFFFFFFFFFFFF7)
                                  sub_20E860B7C();
                                v207 = v206;
                                if (v206 >= 0x17)
                                {
                                  v211 = (v206 & 0xFFFFFFFFFFFFFFF8) + 8;
                                  if ((v206 | 7) != 0x17)
                                    v211 = v206 | 7;
                                  v212 = v211 + 1;
                                  v208 = (uint64_t *)operator new(v211 + 1);
                                  *(_QWORD *)&v470 = v207;
                                  *((_QWORD *)&v470 + 1) = v212 | 0x8000000000000000;
                                  v469 = v208;
                                }
                                else
                                {
                                  HIBYTE(v470) = v206;
                                  v208 = (uint64_t *)&v469;
                                  if (!v206)
                                    goto LABEL_402;
                                }
                                memcpy(v208, v436, v207);
LABEL_402:
                                *((_BYTE *)v208 + v207) = 0;
                                v213 = (uint64_t)v469;
                                v488[0] = v470;
                                *(_QWORD *)((char *)v488 + 7) = *(_QWORD *)((char *)&v470 + 7);
                                v214 = HIBYTE(v470);
                                v215 = operator new(0x38uLL);
                                v215[1] = 0;
                                v215[2] = 0;
                                v215[3] = off_24C9ABC20;
                                *v215 = &off_24C9ABBD0;
                                v216 = v488[0];
                                v215[4] = v213;
                                v215[5] = v216;
                                *(_QWORD *)((char *)v215 + 47) = *(_QWORD *)((char *)v488 + 7);
                                *((_BYTE *)v215 + 55) = v214;
                                v488[0] = 0;
                                *(_QWORD *)((char *)v488 + 7) = 0;
                                v217 = v468;
                                v467 = (char *)(v215 + 3);
                                v468 = (std::__shared_weak_count *)v215;
                                v198 = __sa;
                                if (v217)
                                {
                                  p_shared_owners = (unint64_t *)&v217->__shared_owners_;
                                  do
                                    v219 = __ldaxr(p_shared_owners);
                                  while (__stlxr(v219 - 1, p_shared_owners));
                                  if (!v219)
                                  {
                                    ((void (*)(std::__shared_weak_count *))v217->__on_zero_shared)(v217);
                                    std::__shared_weak_count::__release_weak(v217);
                                  }
                                }
                                *(_OWORD *)v482 = *(_OWORD *)v465;
                                v220 = v467;
                                *(_QWORD *)&v482[16] = v466;
                                if (v466)
                                {
                                  v221 = (unint64_t *)&v466->__shared_owners_;
                                  do
                                    v222 = __ldxr(v221);
                                  while (__stxr(v222 + 1, v221));
                                }
                                v223 = v468;
                                *(_QWORD *)&v483 = v220;
                                *((_QWORD *)&v483 + 1) = v468;
                                if (v468)
                                {
                                  v224 = (unint64_t *)&v468->__shared_owners_;
                                  do
                                    v225 = __ldxr(v224);
                                  while (__stxr(v225 + 1, v224));
                                  v484 = v220;
                                  do
                                    v226 = __ldaxr(v224);
                                  while (__stlxr(v226 - 1, v224));
                                  if (!v226)
                                  {
                                    ((void (*)(std::__shared_weak_count *))v223->__on_zero_shared)(v223);
                                    std::__shared_weak_count::__release_weak(v223);
                                  }
                                }
                                else
                                {
                                  v484 = v220;
                                }
                                v227 = v466;
                                if (v466)
                                {
                                  v228 = (unint64_t *)&v466->__shared_owners_;
                                  do
                                    v229 = __ldaxr(v228);
                                  while (__stlxr(v229 - 1, v228));
                                  if (!v229)
                                  {
                                    ((void (*)(std::__shared_weak_count *))v227->__on_zero_shared)(v227);
                                    std::__shared_weak_count::__release_weak(v227);
                                  }
                                }
                                v230 = *(_QWORD *)v482;
                                if (v484[31] >= 0)
                                  v231 = v484 + 8;
                                else
                                  v231 = (char *)*((_QWORD *)v484 + 1);
                                v232 = _os_log_pack_fill();
                                *(_DWORD *)v232 = 136315138;
                                *(_QWORD *)(v232 + 4) = v231;
                                v233 = (char *)operator new();
                                v234 = *(unsigned __int8 *)(v432 + 39);
                                v235 = v434;
                                if ((v234 & 0x80u) != 0)
                                {
                                  v235 = *(_QWORD *)(v432 + 16);
                                  v234 = *(_QWORD *)(v432 + 24);
                                }
                                *(_QWORD *)v233 = v230;
                                *(_OWORD *)(v233 + 8) = *(_OWORD *)&v482[8];
                                *(_QWORD *)&v482[8] = 0;
                                *(_QWORD *)&v482[16] = 0;
                                *(_OWORD *)(v233 + 24) = v483;
                                v483 = 0uLL;
                                *((_QWORD *)v233 + 5) = v235;
                                *((_QWORD *)v233 + 6) = v234;
                                v233[56] = 2;
                                v469 = 0;
                                v465[0] = v233;
                                (*(void (**)(_QWORD, void **))(**(_QWORD **)(v441 + 24) + 40))(*(_QWORD *)(v441 + 24), v465);
                                v236 = v465[0];
                                v465[0] = 0;
                                v210 = v438;
                                if (v236)
                                {
                                  v237 = (std::__shared_weak_count *)*((_QWORD *)v236 + 4);
                                  if (v237)
                                  {
                                    v238 = (unint64_t *)&v237->__shared_owners_;
                                    do
                                      v239 = __ldaxr(v238);
                                    while (__stlxr(v239 - 1, v238));
                                    if (!v239)
                                    {
                                      ((void (*)(std::__shared_weak_count *))v237->__on_zero_shared)(v237);
                                      std::__shared_weak_count::__release_weak(v237);
                                    }
                                  }
                                  v240 = (std::__shared_weak_count *)*((_QWORD *)v236 + 2);
                                  if (v240)
                                  {
                                    v241 = (unint64_t *)&v240->__shared_owners_;
                                    do
                                      v242 = __ldaxr(v241);
                                    while (__stlxr(v242 - 1, v241));
                                    if (!v242)
                                    {
                                      ((void (*)(std::__shared_weak_count *))v240->__on_zero_shared)(v240);
                                      std::__shared_weak_count::__release_weak(v240);
                                    }
                                  }
                                  MEMORY[0x212BC6398](v236, 0x10F0C40B62ED6C6);
                                  v243 = (uint64_t)v469;
                                  v469 = 0;
                                  if (v243)
                                  {
                                    v244 = *(std::__shared_weak_count **)(v243 + 32);
                                    if (v244)
                                    {
                                      v245 = (unint64_t *)&v244->__shared_owners_;
                                      do
                                        v246 = __ldaxr(v245);
                                      while (__stlxr(v246 - 1, v245));
                                      if (!v246)
                                      {
                                        ((void (*)(std::__shared_weak_count *))v244->__on_zero_shared)(v244);
                                        std::__shared_weak_count::__release_weak(v244);
                                      }
                                    }
                                    v247 = *(std::__shared_weak_count **)(v243 + 16);
                                    if (v247)
                                    {
                                      v248 = (unint64_t *)&v247->__shared_owners_;
                                      do
                                        v249 = __ldaxr(v248);
                                      while (__stlxr(v249 - 1, v248));
                                      if (!v249)
                                      {
                                        ((void (*)(std::__shared_weak_count *))v247->__on_zero_shared)(v247);
                                        std::__shared_weak_count::__release_weak(v247);
                                      }
                                    }
                                    MEMORY[0x212BC6398](v243, 0x10F0C40B62ED6C6);
                                  }
                                }
                                v250 = (std::__shared_weak_count *)*((_QWORD *)&v483 + 1);
                                if (*((_QWORD *)&v483 + 1))
                                {
                                  v251 = (unint64_t *)(*((_QWORD *)&v483 + 1) + 8);
                                  do
                                    v252 = __ldaxr(v251);
                                  while (__stlxr(v252 - 1, v251));
                                  if (!v252)
                                  {
                                    ((void (*)(std::__shared_weak_count *))v250->__on_zero_shared)(v250);
                                    std::__shared_weak_count::__release_weak(v250);
                                  }
                                }
                                v253 = *(std::__shared_weak_count **)&v482[16];
                                if (*(_QWORD *)&v482[16])
                                {
                                  v254 = (unint64_t *)(*(_QWORD *)&v482[16] + 8);
                                  do
                                    v255 = __ldaxr(v254);
                                  while (__stlxr(v255 - 1, v254));
                                  if (!v255)
                                  {
                                    ((void (*)(std::__shared_weak_count *))v253->__on_zero_shared)(v253);
                                    std::__shared_weak_count::__release_weak(v253);
                                  }
                                }
                              }
                              else
                              {
                                os_log_type_enabled(v202, OS_LOG_TYPE_DEBUG);
                                *(_DWORD *)v482 = 136315138;
                                *(_QWORD *)&v482[4] = v436;
                                v209 = (void *)_os_log_send_and_compose_impl();
                                v210 = v438;
                                if (v209)
                                  free(v209);
                              }
                              if (v210)
                              {
                                v256 = (const char *)&__dst;
                                if (v463 < 0)
                                  v256 = (const char *)__dst;
                                sub_20E8C003C((uint64_t)&v452, "%s", v256);
                                sub_20E863570((uint64_t)&v452);
                              }
                              sub_20E863570((uint64_t)&v452);
                              v257 = v460;
                              if (v460)
                              {
                                v258 = (unint64_t *)&v460->__shared_owners_;
                                do
                                  v259 = __ldaxr(v258);
                                while (__stlxr(v259 - 1, v258));
                                if (!v259)
                                {
                                  ((void (*)(std::__shared_weak_count *))v257->__on_zero_shared)(v257);
                                  std::__shared_weak_count::__release_weak(v257);
                                }
                              }
                              v171 = (uint64_t)v198;
                              if (SHIBYTE(v463) < 0)
                                operator delete(__dst);
                              *(_QWORD *)object = v424;
                              *(_QWORD *)&object[*(_QWORD *)(v424 - 24)] = v423;
                              *(_QWORD *)&object[16] = v422;
                              *(_QWORD *)&v472 = MEMORY[0x24BEDB848] + 16;
                              if (v478 < 0)
                                operator delete(__p);
                              std::streambuf::~streambuf();
                              std::iostream::~basic_iostream();
                              MEMORY[0x212BC6290](v481);
LABEL_475:
                              v9 = v9 + (double)v6;
                              v8 = v8 + (double)(unint64_t)v171;
                              goto LABEL_476;
                            }
                          }
                          memmove(v199, v190, v189);
                          goto LABEL_383;
                        }
                      }
                      memmove(v195, v193, v194);
                      goto LABEL_375;
                    }
                  }
                  memmove(p_dst, v184, v180);
                  goto LABEL_355;
                }
              }
              else
              {
                if (v162 >= *(_QWORD *)&v149)
                  v162 %= *(_QWORD *)&v149;
                if (v162 != v158)
                  goto LABEL_737;
              }
              v160 = (uint64_t *)*v160;
              if (!v160)
                goto LABEL_737;
            }
          }
        }
        else
        {
          if (v155 >= *(_QWORD *)&v149)
            v155 %= *(_QWORD *)&v149;
          if (v155 != v152)
            goto LABEL_476;
        }
        v154 = (uint64_t *)*v154;
        if (!v154)
          goto LABEL_476;
      }
    }
    v17 = 0;
    v433 = v16;
    while (2)
    {
      v448 = v13;
      v18 = *(_DWORD *)v445;
      if (*(_DWORD *)v445 >= 0x10000u)
      {
        sub_21023D70C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/ComputerVisionTypes/include/VIO/ComputerVisionTypes/CameraStreamId.h", 38, (uint64_t)"camera_id <= 0xffff", 19, (uint64_t)"Camera ID cannot exceeds 16 bits", 32, (void (*)(void **))sub_21023DDB0);
        v19 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
        if ((v19 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
        {
          __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
          __cxa_guard_release(&qword_254A6DE78);
        }
        if (!byte_254A6DE68 || byte_254A6DE70)
        {
          v20 = qword_254A6DE40;
          v21 = qword_254A6DE48;
          while (v20 != v21)
          {
            (*(void (**)(_QWORD, const char *, uint64_t, const char *, uint64_t))v20)(*(_QWORD *)(v20 + 8), "camera_id <= 0xffff", 19, "Camera ID cannot exceeds 16 bits", 32);
            v20 += 16;
          }
        }
        v22 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
        if ((v22 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
        {
          __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
          __cxa_guard_release(&qword_254A6DE78);
        }
        if (!byte_254A6DE68)
          abort();
        qword_254A6DE58(unk_254A6DE60, "camera_id <= 0xffff", 19, "Camera ID cannot exceeds 16 bits", 32);
      }
      if (v17 >= 0x10000)
      {
        sub_21023D70C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/ComputerVisionTypes/include/VIO/ComputerVisionTypes/CameraStreamId.h", 39, (uint64_t)"stream_id <= 0xffff", 19, (uint64_t)"Stream ID cannot exceeds 16 bits", 32, (void (*)(void **))sub_21023DDB0);
        v23 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
        if ((v23 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
        {
          __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
          __cxa_guard_release(&qword_254A6DE78);
        }
        if (!byte_254A6DE68 || byte_254A6DE70)
        {
          v24 = qword_254A6DE40;
          v25 = qword_254A6DE48;
          while (v24 != v25)
          {
            (*(void (**)(_QWORD, const char *, uint64_t, const char *, uint64_t))v24)(*(_QWORD *)(v24 + 8), "stream_id <= 0xffff", 19, "Stream ID cannot exceeds 16 bits", 32);
            v24 += 16;
          }
        }
        v26 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
        if ((v26 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
        {
          __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
          __cxa_guard_release(&qword_254A6DE78);
        }
        if (!byte_254A6DE68)
          abort();
        qword_254A6DE58(unk_254A6DE60, "stream_id <= 0xffff", 19, "Stream ID cannot exceeds 16 bits", 32);
      }
      if (v18 >= 0x10000)
      {
        sub_21023D70C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/ComputerVisionTypes/include/VIO/ComputerVisionTypes/CameraStreamId.h", 49, (uint64_t)"camera_id <= 0xffff", 19, (uint64_t)"Camera ID cannot exceeds 16 bits", 32, (void (*)(void **))sub_21023DDB0);
        v27 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
        if ((v27 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
        {
          __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
          __cxa_guard_release(&qword_254A6DE78);
        }
        if (!byte_254A6DE68 || byte_254A6DE70)
        {
          v28 = qword_254A6DE40;
          v29 = qword_254A6DE48;
          while (v28 != v29)
          {
            (*(void (**)(_QWORD, const char *, uint64_t, const char *, uint64_t))v28)(*(_QWORD *)(v28 + 8), "camera_id <= 0xffff", 19, "Camera ID cannot exceeds 16 bits", 32);
            v28 += 16;
          }
        }
        v30 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
        if ((v30 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
        {
          __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
          __cxa_guard_release(&qword_254A6DE78);
        }
        if (!byte_254A6DE68)
          abort();
        qword_254A6DE58(unk_254A6DE60, "camera_id <= 0xffff", 19, "Camera ID cannot exceeds 16 bits", 32);
      }
      if (v17 >= 0x10000)
      {
        sub_21023D70C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/ComputerVisionTypes/include/VIO/ComputerVisionTypes/CameraStreamId.h", 50, (uint64_t)"stream_id <= 0xffff", 19, (uint64_t)"Stream ID cannot exceeds 16 bits", 32, (void (*)(void **))sub_21023DDB0);
        v31 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
        if ((v31 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
        {
          __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
          __cxa_guard_release(&qword_254A6DE78);
        }
        if (!byte_254A6DE68 || byte_254A6DE70)
        {
          v32 = qword_254A6DE40;
          v33 = qword_254A6DE48;
          while (v32 != v33)
          {
            (*(void (**)(_QWORD, const char *, uint64_t, const char *, uint64_t))v32)(*(_QWORD *)(v32 + 8), "stream_id <= 0xffff", 19, "Stream ID cannot exceeds 16 bits", 32);
            v32 += 16;
          }
        }
        v34 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
        if ((v34 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
        {
          __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
          __cxa_guard_release(&qword_254A6DE78);
        }
        if (!byte_254A6DE68)
          abort();
        qword_254A6DE58(unk_254A6DE60, "stream_id <= 0xffff", 19, "Stream ID cannot exceeds 16 bits", 32);
      }
      v35 = (int8x8_t)a6[1];
      if (!*(_QWORD *)&v35)
        goto LABEL_10;
      v36 = (unsigned __int16)v17 | ((unsigned __int16)v18 << 16);
      v37 = (uint8x8_t)vcnt_s8(v35);
      v37.i16[0] = vaddlv_u8(v37);
      if (v37.u32[0] > 1uLL)
      {
        v38 = (unsigned __int16)v17 | ((unsigned __int16)v18 << 16);
        if (*(_QWORD *)&v35 <= v36)
          v38 = v36 % *(_QWORD *)&v35;
      }
      else
      {
        v38 = (v35.i32[0] - 1) & v36;
      }
      v39 = *(uint64_t ***)(*a6 + 8 * v38);
      if (!v39)
        goto LABEL_10;
      v40 = *v39;
      if (!v40)
        goto LABEL_10;
      if (v37.u32[0] < 2uLL)
      {
        v41 = *(_QWORD *)&v35 - 1;
        while (1)
        {
          v43 = v40[1];
          if (v43 == v36)
          {
            if (*((_DWORD *)v40 + 4) == (_DWORD)v36)
              goto LABEL_72;
          }
          else if ((v43 & v41) != v38)
          {
            goto LABEL_10;
          }
          v40 = (uint64_t *)*v40;
          if (!v40)
            goto LABEL_10;
        }
      }
      while (1)
      {
        v42 = v40[1];
        if (v42 == v36)
          break;
        if (v42 >= *(_QWORD *)&v35)
          v42 %= *(_QWORD *)&v35;
        if (v42 != v38)
          goto LABEL_10;
LABEL_61:
        v40 = (uint64_t *)*v40;
        if (!v40)
          goto LABEL_10;
      }
      if (*((_DWORD *)v40 + 4) != (_DWORD)v36)
        goto LABEL_61;
LABEL_72:
      if (v18 >= 0x10000
        && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/ComputerVisionTypes/include/VIO/ComputerVisionTypes/CameraStreamId.h", 49, (uint64_t)"camera_id <= 0xffff", 19, (uint64_t)"Camera ID cannot exceeds 16 bits", 32, (void (*)(void **))sub_21023DDB0))
      {
        abort();
      }
      if (v17 >= 0x10000
        && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/ComputerVisionTypes/include/VIO/ComputerVisionTypes/CameraStreamId.h", 50, (uint64_t)"stream_id <= 0xffff", 19, (uint64_t)"Stream ID cannot exceeds 16 bits", 32, (void (*)(void **))sub_21023DDB0))
      {
        abort();
      }
      v44 = (int8x8_t)a6[1];
      if (!*(_QWORD *)&v44)
        goto LABEL_732;
      v45 = (uint8x8_t)vcnt_s8(v44);
      v45.i16[0] = vaddlv_u8(v45);
      if (v45.u32[0] > 1uLL)
      {
        v46 = (unsigned __int16)v17 | ((unsigned __int16)v18 << 16);
        if (*(_QWORD *)&v44 <= v36)
          v46 = v36 % *(_QWORD *)&v44;
      }
      else
      {
        v46 = (v44.i32[0] - 1) & v36;
      }
      v47 = *(uint64_t ***)(*a6 + 8 * v46);
      if (!v47 || (v48 = *v47) == 0)
LABEL_732:
        sub_20E89FD20("unordered_map::at: key not found");
      if (v45.u32[0] < 2uLL)
      {
        v49 = *(_QWORD *)&v44 - 1;
        while (1)
        {
          v51 = v48[1];
          if (v51 == v36)
          {
            if (*((_DWORD *)v48 + 4) == (_DWORD)v36)
              goto LABEL_96;
          }
          else if ((v51 & v49) != v46)
          {
            goto LABEL_732;
          }
          v48 = (uint64_t *)*v48;
          if (!v48)
            goto LABEL_732;
        }
      }
      while (2)
      {
        v50 = v48[1];
        if (v50 != v36)
        {
          if (v50 >= *(_QWORD *)&v44)
            v50 %= *(_QWORD *)&v44;
          if (v50 != v46)
            goto LABEL_732;
LABEL_86:
          v48 = (uint64_t *)*v48;
          if (!v48)
            goto LABEL_732;
          continue;
        }
        break;
      }
      if (*((_DWORD *)v48 + 4) != (_DWORD)v36)
        goto LABEL_86;
LABEL_96:
      v52 = *(_QWORD *)(*(_QWORD *)(v444 + 24) + 16 * v17);
      if (*(_BYTE *)(v52 + 184))
      {
        v53 = *(_QWORD *)(v52 + 88) - *(_QWORD *)(v52 + 80);
        if (v53)
          v54 = v53 == *(_QWORD *)(v52 + 168) - *(_QWORD *)(v52 + 160);
        else
          v54 = 0;
        if (!v54 || (v55 = (uint64_t)(*(_QWORD *)(v52 + 64) - *(_QWORD *)(v52 + 56)) >> 5, v55 != v53 >> 6))
        {
LABEL_107:
          if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/FeatureDetection/include/VIO/FeatureDetection/PointDescriptorStore.h", 184, (uint64_t)"HasValidSize()", 14, (uint64_t)"Descriptor size mis-match", 25, (void (*)(void **))sub_21023DDB0))
          {
            abort();
          }
          v55 = (uint64_t)(*(_QWORD *)(v52 + 64) - *(_QWORD *)(v52 + 56)) >> 5;
          v56 = *(_QWORD *)(v52 + 16);
          goto LABEL_109;
        }
      }
      else
      {
        if (*(_QWORD *)(v52 + 160) != *(_QWORD *)(v52 + 168))
          goto LABEL_107;
        v55 = (uint64_t)(*(_QWORD *)(v52 + 64) - *(_QWORD *)(v52 + 56)) >> 5;
        if (v55 != (uint64_t)(*(_QWORD *)(v52 + 88) - *(_QWORD *)(v52 + 80)) >> 6)
          goto LABEL_107;
      }
      v56 = *(_QWORD *)(v52 + 16);
      if (v56 > v55)
        goto LABEL_107;
LABEL_109:
      v57 = *(_QWORD *)(v445 + 8) + 440 * v17;
      if (*(_BYTE *)(v57 + 120))
      {
        ++v448;
        v14 = v14 + (double)(unint64_t)((uint64_t)(*(_QWORD *)(v57 + 104) - *(_QWORD *)(v57 + 96)) >> 3);
      }
      LODWORD(v6) = *((_DWORD *)v48 + 5);
      v435 = *(char **)(v57 + 72);
      v437 = *(_QWORD *)(v57 + 80);
      v58 = atomic_load((unsigned __int8 *)&qword_254A618C0);
      if ((v58 & 1) == 0 && __cxa_guard_acquire(&qword_254A618C0))
      {
        sub_21021D3D8(v482);
        sub_20E8610C0(object, "cv3d.vio.odometry");
        sub_20E8C4068((uint64_t **)v482, (uint64_t)object, &qword_254A618B8);
        if ((object[23] & 0x80000000) != 0)
          operator delete(*(void **)object);
        __cxa_guard_release(&qword_254A618C0);
      }
      v440 = v55 - v56;
      v464 = qword_254A618B8;
      v13 = v448;
      v16 = v433;
      if (**(int **)(qword_254A618B8 + 56) > 2)
        goto LABEL_247;
      v59 = *(unsigned __int8 *)(qword_254A618B8 + 72);
      v431 = sub_20E8C31DC(qword_254A618B8, "OSLogSurrogateAppender", 1, 0);
      v429 = v59;
      if (!v59 && !v431)
        goto LABEL_247;
      sub_20E863438((uint64_t)object);
      v60 = sub_20E86A980(&object[16], (uint64_t)"[CA] multi_stream_camera_recall: ", 33);
      sub_20E86A980(v60, (uint64_t)"[", 1);
      v61 = (_QWORD *)std::ostream::operator<<();
      sub_20E86A980(v61, (uint64_t)",", 1);
      v62 = (_QWORD *)std::ostream::operator<<();
      v63 = sub_20E86A980(v62, (uint64_t)"]", 1);
      v64 = sub_20E86A980(v63, (uint64_t)" | ", 3);
      *(_QWORD *)((char *)v64 + *(_QWORD *)(*v64 - 24) + 24) = 4;
      v65 = (_QWORD *)std::ostream::operator<<();
      sub_20E86A980(v65, (uint64_t)"/", 1);
      v66 = (_QWORD *)std::ostream::operator<<();
      sub_20E86A980(v66, (uint64_t)" num_temporal_matches: ", 23);
      v67 = (_QWORD *)std::ostream::operator<<();
      sub_20E86A980(v67, (uint64_t)" num_stereo_matches: ", 21);
      std::ostream::operator<<();
      if ((v480 & 0x10) != 0)
      {
        v70 = v479;
        v71 = (void **)&v475;
        if (v479 < v476)
        {
          v479 = v476;
          v70 = v476;
          v71 = (void **)&v475;
        }
      }
      else
      {
        if ((v480 & 8) == 0)
        {
          v68 = 0;
          HIBYTE(v463) = 0;
          v69 = (void **)&__dst;
          goto LABEL_129;
        }
        v70 = v474;
        v71 = v473;
      }
      v72 = *v71;
      v68 = v70 - (_QWORD)*v71;
      if (v68 > 0x7FFFFFFFFFFFFFF7)
        sub_20E860B7C();
      if (v68 >= 0x17)
      {
        v73 = (v68 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v68 | 7) != 0x17)
          v73 = v68 | 7;
        v74 = v73 + 1;
        v69 = (void **)operator new(v73 + 1);
        v462 = v68;
        v463 = v74 | 0x8000000000000000;
        __dst = v69;
LABEL_128:
        memmove(v69, v72, v68);
        goto LABEL_129;
      }
      HIBYTE(v463) = v70 - *(_BYTE *)v71;
      v69 = (void **)&__dst;
      if (v68)
        goto LABEL_128;
LABEL_129:
      *((_BYTE *)v69 + v68) = 0;
      v452 = &v464;
      rep = std::chrono::steady_clock::now().__d_.__rep_;
      v454 = std::chrono::system_clock::now().__d_.__rep_;
      v455 = 2;
      v456 = "unknown file";
      v457 = 165;
      v458 = "unknown function";
      v459 = 0;
      v460 = 0;
      v75 = (void **)&__dst;
      if (v463 < 0)
        v75 = __dst;
      __s = (char *)v75;
      v76 = *v452;
      if (*(char *)(*v452 + 39) < 0)
      {
        v78 = *(const char **)(v76 + 16);
        v77 = *(_QWORD *)(v76 + 24);
        v425 = *v452 + 16;
        v426 = *v452;
        v80 = atomic_load((unsigned __int8 *)&qword_254A4A510);
        if ((v80 & 1) == 0)
        {
LABEL_274:
          if (__cxa_guard_acquire(&qword_254A4A510))
          {
            sub_20E9E46F8((uint64_t)v465);
            sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)v465);
            if ((_BYTE)v467 && SHIBYTE(v466) < 0)
              operator delete(v465[0]);
            __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
            __cxa_guard_release(&qword_254A4A510);
          }
        }
      }
      else
      {
        v77 = *(unsigned __int8 *)(*v452 + 39);
        v78 = (const char *)(*v452 + 16);
        v425 = (uint64_t)v78;
        v426 = *v452;
        v79 = atomic_load((unsigned __int8 *)&qword_254A4A510);
        if ((v79 & 1) == 0)
          goto LABEL_274;
      }
      if (byte_254A4A4F8[23] >= 0)
        v81 = byte_254A4A4F8;
      else
        v81 = *(const char **)byte_254A4A4F8;
      if (byte_254A4A4F8[23] >= 0)
        v82 = byte_254A4A4F8[23];
      else
        v82 = *(_QWORD *)&byte_254A4A4F8[8];
      *(_QWORD *)v482 = os_log_create(v81, v78);
      if (v82 > 0x7FFFFFFFFFFFFFF7)
        sub_20E860B7C();
      __src = v78;
      if (v82 >= 0x17)
      {
        v84 = (v82 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v82 | 7) != 0x17)
          v84 = v82 | 7;
        v85 = v84 + 1;
        v83 = operator new(v84 + 1);
        *(_QWORD *)&v482[16] = v82;
        *(_QWORD *)&v483 = v85 | 0x8000000000000000;
        *(_QWORD *)&v482[8] = v83;
LABEL_148:
        memmove(v83, v81, v82);
        goto LABEL_149;
      }
      BYTE7(v483) = v82;
      v83 = &v482[8];
      if (v82)
        goto LABEL_148;
LABEL_149:
      v83[v82] = 0;
      BYTE8(v483) = 1;
      if (v77 > 0x7FFFFFFFFFFFFFF7)
        sub_20E860B7C();
      v13 = v448;
      v16 = v433;
      if (v77 >= 0x17)
      {
        v89 = (v77 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v77 | 7) != 0x17)
          v89 = v77 | 7;
        v90 = v89 + 1;
        v86 = (char *)operator new(v89 + 1);
        v485 = (const char *)v77;
        v486 = v90 | 0x8000000000000000;
        v484 = v86;
      }
      else
      {
        HIBYTE(v486) = v77;
        v86 = (char *)&v484;
        if (!v77)
        {
          LOBYTE(v484) = 0;
          LOBYTE(v487) = 1;
          v87 = *(NSObject **)v482;
          if ((SHIBYTE(v486) & 0x80000000) == 0)
            goto LABEL_153;
LABEL_159:
          operator delete(v484);
          v88 = v431;
          if (BYTE8(v483))
            goto LABEL_160;
          goto LABEL_162;
        }
      }
      memmove(v86, __src, v77);
      v86[v77] = 0;
      LOBYTE(v487) = 1;
      v87 = *(NSObject **)v482;
      if (SHIBYTE(v486) < 0)
        goto LABEL_159;
LABEL_153:
      v88 = v431;
      if (BYTE8(v483))
      {
LABEL_160:
        if (SBYTE7(v483) < 0)
          operator delete(*(void **)&v482[8]);
      }
LABEL_162:
      if (*(_QWORD *)v482)
        os_release(*(void **)v482);
      if (!v88 || !*(_QWORD *)(v88 + 24))
      {
        os_log_type_enabled(v87, OS_LOG_TYPE_DEBUG);
        *(_DWORD *)v482 = 136315138;
        *(_QWORD *)&v482[4] = __s;
        v97 = (void *)_os_log_send_and_compose_impl();
        v98 = v429;
        if (!v97)
          goto LABEL_234;
        free(v97);
        if (!v429)
          goto LABEL_238;
LABEL_235:
        v144 = (const char *)&__dst;
        if (v463 < 0)
          v144 = (const char *)__dst;
        sub_20E8C003C((uint64_t)&v452, "%s", v144);
        sub_20E863570((uint64_t)&v452);
        goto LABEL_238;
      }
      v91 = _os_log_pack_size();
      v92 = (std::__shared_weak_count_vtbl *)operator new(v91, (std::align_val_t)8uLL);
      v93 = (std::__shared_weak_count *)operator new();
      v93->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
      v93->__shared_owners_ = 0;
      v93->__shared_weak_owners_ = 0;
      v93[1].__vftable = v92;
      v465[0] = v92;
      v465[1] = v92;
      v466 = v93;
      v467 = 0;
      v468 = 0;
      v94 = strlen(__s);
      if (v94 > 0x7FFFFFFFFFFFFFF7)
        sub_20E860B7C();
      v95 = v94;
      if (v94 >= 0x17)
      {
        v99 = (v94 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v94 | 7) != 0x17)
          v99 = v94 | 7;
        v100 = v99 + 1;
        v96 = (uint64_t *)operator new(v99 + 1);
        *(_QWORD *)&v470 = v95;
        *((_QWORD *)&v470 + 1) = v100 | 0x8000000000000000;
        v469 = v96;
      }
      else
      {
        HIBYTE(v470) = v94;
        v96 = (uint64_t *)&v469;
        if (!v94)
          goto LABEL_177;
      }
      memcpy(v96, __s, v95);
LABEL_177:
      *((_BYTE *)v96 + v95) = 0;
      v101 = (uint64_t)v469;
      v488[0] = v470;
      *(_QWORD *)((char *)v488 + 7) = *(_QWORD *)((char *)&v470 + 7);
      v102 = HIBYTE(v470);
      v103 = operator new(0x38uLL);
      v103[1] = 0;
      v103[2] = 0;
      v103[3] = off_24C9ABC20;
      *v103 = &off_24C9ABBD0;
      v104 = v488[0];
      v103[4] = v101;
      v103[5] = v104;
      *(_QWORD *)((char *)v103 + 47) = *(_QWORD *)((char *)v488 + 7);
      *((_BYTE *)v103 + 55) = v102;
      v488[0] = 0;
      *(_QWORD *)((char *)v488 + 7) = 0;
      v105 = v468;
      v467 = (char *)(v103 + 3);
      v468 = (std::__shared_weak_count *)v103;
      v13 = v448;
      if (v105)
      {
        v106 = (unint64_t *)&v105->__shared_owners_;
        do
          v107 = __ldaxr(v106);
        while (__stlxr(v107 - 1, v106));
        if (!v107)
        {
          ((void (*)(std::__shared_weak_count *))v105->__on_zero_shared)(v105);
          std::__shared_weak_count::__release_weak(v105);
        }
      }
      *(_OWORD *)v482 = *(_OWORD *)v465;
      v108 = v467;
      *(_QWORD *)&v482[16] = v466;
      if (v466)
      {
        v109 = (unint64_t *)&v466->__shared_owners_;
        do
          v110 = __ldxr(v109);
        while (__stxr(v110 + 1, v109));
      }
      v111 = v468;
      *(_QWORD *)&v483 = v108;
      *((_QWORD *)&v483 + 1) = v468;
      if (v468)
      {
        v112 = (unint64_t *)&v468->__shared_owners_;
        do
          v113 = __ldxr(v112);
        while (__stxr(v113 + 1, v112));
        v484 = v108;
        do
          v114 = __ldaxr(v112);
        while (__stlxr(v114 - 1, v112));
        if (!v114)
        {
          ((void (*)(std::__shared_weak_count *))v111->__on_zero_shared)(v111);
          std::__shared_weak_count::__release_weak(v111);
        }
      }
      else
      {
        v484 = v108;
      }
      v115 = v466;
      if (v466)
      {
        v116 = (unint64_t *)&v466->__shared_owners_;
        do
          v117 = __ldaxr(v116);
        while (__stlxr(v117 - 1, v116));
        if (!v117)
        {
          ((void (*)(std::__shared_weak_count *))v115->__on_zero_shared)(v115);
          std::__shared_weak_count::__release_weak(v115);
        }
      }
      v118 = *(_QWORD *)v482;
      if (v484[31] >= 0)
        v119 = v484 + 8;
      else
        v119 = (char *)*((_QWORD *)v484 + 1);
      v120 = _os_log_pack_fill();
      *(_DWORD *)v120 = 136315138;
      *(_QWORD *)(v120 + 4) = v119;
      v121 = (char *)operator new();
      v122 = *(unsigned __int8 *)(v426 + 39);
      v123 = v425;
      if ((v122 & 0x80u) != 0)
      {
        v123 = *(_QWORD *)(v426 + 16);
        v122 = *(_QWORD *)(v426 + 24);
      }
      *(_QWORD *)v121 = v118;
      *(_OWORD *)(v121 + 8) = *(_OWORD *)&v482[8];
      *(_QWORD *)&v482[8] = 0;
      *(_QWORD *)&v482[16] = 0;
      *(_OWORD *)(v121 + 24) = v483;
      v483 = 0uLL;
      *((_QWORD *)v121 + 5) = v123;
      *((_QWORD *)v121 + 6) = v122;
      v121[56] = 2;
      v469 = 0;
      v465[0] = v121;
      (*(void (**)(_QWORD, void **))(**(_QWORD **)(v431 + 24) + 40))(*(_QWORD *)(v431 + 24), v465);
      v124 = v465[0];
      v465[0] = 0;
      v16 = v433;
      if (v124)
      {
        v125 = (std::__shared_weak_count *)*((_QWORD *)v124 + 4);
        if (v125)
        {
          v126 = (unint64_t *)&v125->__shared_owners_;
          do
            v127 = __ldaxr(v126);
          while (__stlxr(v127 - 1, v126));
          if (!v127)
          {
            ((void (*)(std::__shared_weak_count *))v125->__on_zero_shared)(v125);
            std::__shared_weak_count::__release_weak(v125);
          }
        }
        v128 = (std::__shared_weak_count *)*((_QWORD *)v124 + 2);
        if (v128)
        {
          v129 = (unint64_t *)&v128->__shared_owners_;
          do
            v130 = __ldaxr(v129);
          while (__stlxr(v130 - 1, v129));
          if (!v130)
          {
            ((void (*)(std::__shared_weak_count *))v128->__on_zero_shared)(v128);
            std::__shared_weak_count::__release_weak(v128);
          }
        }
        MEMORY[0x212BC6398](v124, 0x10F0C40B62ED6C6);
        v131 = (uint64_t)v469;
        v469 = 0;
        if (v131)
        {
          v132 = *(std::__shared_weak_count **)(v131 + 32);
          if (v132)
          {
            v133 = (unint64_t *)&v132->__shared_owners_;
            do
              v134 = __ldaxr(v133);
            while (__stlxr(v134 - 1, v133));
            if (!v134)
            {
              ((void (*)(std::__shared_weak_count *))v132->__on_zero_shared)(v132);
              std::__shared_weak_count::__release_weak(v132);
            }
          }
          v135 = *(std::__shared_weak_count **)(v131 + 16);
          if (v135)
          {
            v136 = (unint64_t *)&v135->__shared_owners_;
            do
              v137 = __ldaxr(v136);
            while (__stlxr(v137 - 1, v136));
            if (!v137)
            {
              ((void (*)(std::__shared_weak_count *))v135->__on_zero_shared)(v135);
              std::__shared_weak_count::__release_weak(v135);
            }
          }
          MEMORY[0x212BC6398](v131, 0x10F0C40B62ED6C6);
        }
      }
      v138 = (std::__shared_weak_count *)*((_QWORD *)&v483 + 1);
      v98 = v429;
      if (*((_QWORD *)&v483 + 1))
      {
        v139 = (unint64_t *)(*((_QWORD *)&v483 + 1) + 8);
        do
          v140 = __ldaxr(v139);
        while (__stlxr(v140 - 1, v139));
        if (!v140)
        {
          ((void (*)(std::__shared_weak_count *))v138->__on_zero_shared)(v138);
          std::__shared_weak_count::__release_weak(v138);
          v141 = *(std::__shared_weak_count **)&v482[16];
          if (*(_QWORD *)&v482[16])
            goto LABEL_231;
          goto LABEL_234;
        }
      }
      v141 = *(std::__shared_weak_count **)&v482[16];
      if (!*(_QWORD *)&v482[16])
        goto LABEL_234;
LABEL_231:
      v142 = (unint64_t *)&v141->__shared_owners_;
      do
        v143 = __ldaxr(v142);
      while (__stlxr(v143 - 1, v142));
      if (!v143)
      {
        ((void (*)(std::__shared_weak_count *))v141->__on_zero_shared)(v141);
        std::__shared_weak_count::__release_weak(v141);
        if (!v429)
          goto LABEL_238;
        goto LABEL_235;
      }
LABEL_234:
      if (v98)
        goto LABEL_235;
LABEL_238:
      sub_20E863570((uint64_t)&v452);
      v145 = v460;
      if (!v460)
        goto LABEL_242;
      v146 = (unint64_t *)&v460->__shared_owners_;
      do
        v147 = __ldaxr(v146);
      while (__stlxr(v147 - 1, v146));
      if (!v147)
      {
        ((void (*)(std::__shared_weak_count *))v145->__on_zero_shared)(v145);
        std::__shared_weak_count::__release_weak(v145);
        if (SHIBYTE(v463) < 0)
LABEL_243:
          operator delete(__dst);
      }
      else
      {
LABEL_242:
        if (SHIBYTE(v463) < 0)
          goto LABEL_243;
      }
      *(_QWORD *)object = v424;
      *(_QWORD *)&object[*(_QWORD *)(v424 - 24)] = v423;
      *(_QWORD *)&object[16] = v422;
      *(_QWORD *)&v472 = v421;
      if (v478 < 0)
        operator delete(__p);
      std::streambuf::~streambuf();
      std::iostream::~basic_iostream();
      MEMORY[0x212BC6290](v481);
LABEL_247:
      ++v439;
      v11 = v11 + (double)v6;
      v15 = v15 + (double)v440;
      v10 = v10 + (double)(unint64_t)((v437 - (uint64_t)v435) >> 3);
LABEL_10:
      if (++v17 != v16)
        continue;
      break;
    }
LABEL_476:
    a4 = v444 + 240;
    v445 += 104;
  }
  while (v445 != a3 || a4 != a5);
  v12 = 0.0;
  v7 = 0.0;
  if (v13)
    v7 = v14 / (double)v13;
  a1 = v420;
  if (v439)
    v12 = v15 / (double)v439;
LABEL_488:
  if (v10 == 0.0)
    v260 = 1.0;
  else
    v260 = v10;
  v261 = v11 / v260;
  if (v8 == 0.0)
    v262 = 1.0;
  else
    v262 = v8;
  v263 = v9 / v262;
  if (v12 == 0.0)
    v12 = 1.0;
  v264 = v7 / v12;
  v265 = v261 < a1[5] && v263 > a1[4] || v264 < a1[6] && v263 > a1[4];
  sub_20EFF37E4(&v464);
  if (**(int **)(v464 + 56) <= 2)
  {
    v266 = *(unsigned __int8 *)(v464 + 72);
    v267 = sub_20E8C31DC(v464, "OSLogSurrogateAppender", 1, 0);
    v268 = v267;
    if (v266 || v267)
    {
      sub_20E863438((uint64_t)object);
      v277 = sub_20E86A980(&object[16], (uint64_t)"[CA] ", 5);
      v278 = sub_20E86A980(v277, (uint64_t)"\n", 1);
      sub_20E86A980(v278, (uint64_t)" multi-cam inlier_ratio: ", 25);
      v279 = (_QWORD *)std::ostream::operator<<();
      v280 = sub_20E86A980(v279, (uint64_t)", \n", 3);
      sub_20E86A980(v280, (uint64_t)" mono-cam inlier_ratio: ", 24);
      v281 = (_QWORD *)std::ostream::operator<<();
      v282 = sub_20E86A980(v281, (uint64_t)", \n", 3);
      sub_20E86A980(v282, (uint64_t)" stereo_texture_ratio: ", 23);
      v283 = (_QWORD *)std::ostream::operator<<();
      sub_20E86A980(v283, (uint64_t)" num_sce_to_pri_streams: ", 25);
      std::ostream::operator<<();
      v451 = v268;
      if ((v480 & 0x10) != 0)
      {
        v286 = v479;
        if (v479 < v476)
        {
          v479 = v476;
          v286 = v476;
        }
        v287 = v475;
        v284 = v286 - (_QWORD)v475;
        if (v286 - (unint64_t)v475 > 0x7FFFFFFFFFFFFFF7)
          goto LABEL_570;
      }
      else
      {
        if ((v480 & 8) == 0)
        {
          v284 = 0;
          HIBYTE(v463) = 0;
          v285 = (void **)&__dst;
          goto LABEL_525;
        }
        v287 = v473[0];
        v284 = v474 - (unint64_t)v473[0];
        if (v474 - (unint64_t)v473[0] > 0x7FFFFFFFFFFFFFF7)
LABEL_570:
          sub_20E860B7C();
      }
      if (v284 >= 0x17)
      {
        v288 = (v284 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v284 | 7) != 0x17)
          v288 = v284 | 7;
        v289 = v288 + 1;
        v285 = (void **)operator new(v288 + 1);
        v462 = v284;
        v463 = v289 | 0x8000000000000000;
        __dst = v285;
      }
      else
      {
        HIBYTE(v463) = v284;
        v285 = (void **)&__dst;
        if (!v284)
        {
LABEL_525:
          *((_BYTE *)v285 + v284) = 0;
          v452 = &v464;
          rep = std::chrono::steady_clock::now().__d_.__rep_;
          v454 = std::chrono::system_clock::now().__d_.__rep_;
          v455 = 2;
          v456 = "unknown file";
          v457 = 240;
          v459 = 0;
          v460 = 0;
          v458 = "unknown function";
          if (v463 >= 0)
            v290 = (void **)&__dst;
          else
            v290 = __dst;
          v291 = *v452;
          v292 = (const char *)(*v452 + 16);
          v447 = v292;
          if (*(char *)(*v452 + 39) < 0)
          {
            v292 = *(const char **)(v291 + 16);
            v293 = *(_QWORD *)(v291 + 24);
            v295 = atomic_load((unsigned __int8 *)&qword_254A4A510);
            if ((v295 & 1) != 0)
              goto LABEL_532;
          }
          else
          {
            v293 = *(unsigned __int8 *)(*v452 + 39);
            v294 = atomic_load((unsigned __int8 *)&qword_254A4A510);
            if ((v294 & 1) != 0)
              goto LABEL_532;
          }
          if (__cxa_guard_acquire(&qword_254A4A510))
          {
            sub_20E9E46F8((uint64_t)v482);
            sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)v482);
            if ((_BYTE)v483 && (v482[23] & 0x80000000) != 0)
              operator delete(*(void **)v482);
            __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
            __cxa_guard_release(&qword_254A4A510);
          }
LABEL_532:
          if (byte_254A4A4F8[23] >= 0)
            v296 = byte_254A4A4F8;
          else
            v296 = *(const char **)byte_254A4A4F8;
          if (byte_254A4A4F8[23] >= 0)
            v297 = byte_254A4A4F8[23];
          else
            v297 = *(_QWORD *)&byte_254A4A4F8[8];
          *(_QWORD *)v482 = os_log_create(v296, v292);
          v298 = &v482[8];
          if (v297 > 0x7FFFFFFFFFFFFFF7)
            sub_20E860B7C();
          if (v297 >= 0x17)
          {
            v299 = v265;
            v300 = v266;
            v301 = (v297 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v297 | 7) != 0x17)
              v301 = v297 | 7;
            v302 = v301 + 1;
            v298 = operator new(v301 + 1);
            *(_QWORD *)&v482[16] = v297;
            *(_QWORD *)&v483 = v302 | 0x8000000000000000;
            *(_QWORD *)&v482[8] = v298;
            v266 = v300;
            v265 = v299;
          }
          else
          {
            BYTE7(v483) = v297;
            if (!v297)
            {
LABEL_546:
              v298[v297] = 0;
              BYTE8(v483) = 1;
              v303 = (char *)&v484;
              if (v293 > 0x7FFFFFFFFFFFFFF7)
                sub_20E860B7C();
              v304 = (const char *)v290;
              if (v293 >= 0x17)
              {
                v307 = (v293 & 0xFFFFFFFFFFFFFFF8) + 8;
                if ((v293 | 7) != 0x17)
                  v307 = v293 | 7;
                v308 = v307 + 1;
                v305 = v451;
                v303 = (char *)operator new(v307 + 1);
                v485 = (const char *)v293;
                v486 = v308 | 0x8000000000000000;
                v484 = v303;
              }
              else
              {
                HIBYTE(v486) = v293;
                v305 = v451;
                if (!v293)
                {
                  LOBYTE(v484) = 0;
                  LOBYTE(v487) = 1;
                  v306 = *(NSObject **)v482;
                  if ((SHIBYTE(v486) & 0x80000000) == 0)
                    goto LABEL_550;
                  goto LABEL_556;
                }
              }
              memmove(v303, v292, v293);
              v303[v293] = 0;
              LOBYTE(v487) = 1;
              v306 = *(NSObject **)v482;
              if ((SHIBYTE(v486) & 0x80000000) == 0)
              {
LABEL_550:
                if (!BYTE8(v483))
                  goto LABEL_559;
                goto LABEL_557;
              }
LABEL_556:
              operator delete(v484);
              if (!BYTE8(v483))
                goto LABEL_559;
LABEL_557:
              if (SBYTE7(v483) < 0)
                operator delete(*(void **)&v482[8]);
LABEL_559:
              if (*(_QWORD *)v482)
                os_release(*(void **)v482);
              if (!v305 || !*(_QWORD *)(v305 + 24))
              {
                os_log_type_enabled(v306, OS_LOG_TYPE_DEBUG);
                *(_DWORD *)v482 = 136315138;
                *(_QWORD *)&v482[4] = v304;
                v315 = (void *)_os_log_send_and_compose_impl();
                if (v315)
                  free(v315);
LABEL_717:
                if (v266)
                {
                  v414 = (const char *)&__dst;
                  if (v463 < 0)
                    v414 = (const char *)__dst;
                  sub_20E8C003C((uint64_t)&v452, "%s", v414);
                  sub_20E863570((uint64_t)&v452);
                }
                sub_20E863570((uint64_t)&v452);
                v415 = v460;
                if (v460)
                {
                  v416 = (unint64_t *)&v460->__shared_owners_;
                  do
                    v417 = __ldaxr(v416);
                  while (__stlxr(v417 - 1, v416));
                  if (!v417)
                  {
                    ((void (*)(std::__shared_weak_count *))v415->__on_zero_shared)(v415);
                    std::__shared_weak_count::__release_weak(v415);
                  }
                }
                if (SHIBYTE(v463) < 0)
                  operator delete(__dst);
                *(_QWORD *)object = *MEMORY[0x24BEDB7F0];
                v418 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
                *(_QWORD *)&object[*(_QWORD *)(*(_QWORD *)object - 24)] = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
                *(_QWORD *)&object[16] = v418;
                *(_QWORD *)&v472 = MEMORY[0x24BEDB848] + 16;
                if (v478 < 0)
                  operator delete(__p);
                std::streambuf::~streambuf();
                std::iostream::~basic_iostream();
                MEMORY[0x212BC6290](v481);
                if (!v265)
                  return v265;
LABEL_506:
                sub_20EFF37E4(&v469);
                if (*(int *)v469[7] > 3)
                  return v265;
                v269 = *((unsigned __int8 *)v469 + 72);
                v270 = sub_20E8C31DC((uint64_t)v469, "OSLogSurrogateAppender", 1, 0);
                v271 = v270;
                if (!v269 && !v270)
                  return v265;
                *(_QWORD *)v482 = &v469;
                *(std::chrono::steady_clock::time_point *)&v482[8] = std::chrono::steady_clock::now();
                *(std::chrono::system_clock::time_point *)&v482[16] = std::chrono::system_clock::now();
                LODWORD(v483) = 3;
                *((_QWORD *)&v483 + 1) = "unknown file";
                LODWORD(v484) = 250;
                v486 = 0;
                v487 = 0;
                v485 = "unknown function";
                v272 = **(_QWORD **)v482;
                v273 = **(_QWORD **)v482 + 16;
                v450 = **(_QWORD **)v482;
                if (*(char *)(**(_QWORD **)v482 + 39) < 0)
                {
                  v275 = *(const char **)(v272 + 16);
                  v274 = *(_QWORD *)(v272 + 24);
                  v332 = atomic_load((unsigned __int8 *)&qword_254A4A510);
                  if ((v332 & 1) != 0)
                    goto LABEL_591;
                }
                else
                {
                  v274 = *(unsigned __int8 *)(**(_QWORD **)v482 + 39);
                  v275 = (const char *)(v272 + 16);
                  v276 = atomic_load((unsigned __int8 *)&qword_254A4A510);
                  if ((v276 & 1) != 0)
                    goto LABEL_591;
                }
                if (__cxa_guard_acquire(&qword_254A4A510))
                {
                  sub_20E9E46F8((uint64_t)object);
                  sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)object);
                  if ((_BYTE)v472 && (object[23] & 0x80000000) != 0)
                    operator delete(*(void **)object);
                  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
                  __cxa_guard_release(&qword_254A4A510);
                }
LABEL_591:
                if (byte_254A4A4F8[23] >= 0)
                  v333 = byte_254A4A4F8;
                else
                  v333 = *(const char **)byte_254A4A4F8;
                if (byte_254A4A4F8[23] >= 0)
                  v334 = byte_254A4A4F8[23];
                else
                  v334 = *(_QWORD *)&byte_254A4A4F8[8];
                *(_QWORD *)object = os_log_create(v333, v275);
                v335 = &object[8];
                if (v334 > 0x7FFFFFFFFFFFFFF7)
                  sub_20E860B7C();
                if (v334 >= 0x17)
                {
                  v336 = v271;
                  v337 = v275;
                  v338 = v265;
                  v339 = v273;
                  v340 = v269;
                  v341 = (v334 & 0xFFFFFFFFFFFFFFF8) + 8;
                  if ((v334 | 7) != 0x17)
                    v341 = v334 | 7;
                  v342 = v341 + 1;
                  v335 = operator new(v341 + 1);
                  *(_QWORD *)&v472 = v342 | 0x8000000000000000;
                  *(_QWORD *)&object[8] = v335;
                  *(_QWORD *)&object[16] = v334;
                  v269 = v340;
                  v273 = v339;
                  v265 = v338;
                  v275 = v337;
                  v271 = v336;
                }
                else
                {
                  BYTE7(v472) = v334;
                  if (!v334)
                  {
LABEL_605:
                    v335[v334] = 0;
                    BYTE8(v472) = 1;
                    v343 = v473;
                    if (v274 > 0x7FFFFFFFFFFFFFF7)
                      sub_20E860B7C();
                    if (v274 >= 0x17)
                    {
                      v344 = (v274 & 0xFFFFFFFFFFFFFFF8) + 8;
                      if ((v274 | 7) != 0x17)
                        v344 = v274 | 7;
                      v345 = v344 + 1;
                      v343 = operator new(v344 + 1);
                      v474 = v345 | 0x8000000000000000;
                      v473[0] = v343;
                      v473[1] = (void *)v274;
                    }
                    else
                    {
                      HIBYTE(v474) = v274;
                      if (!v274)
                        goto LABEL_613;
                    }
                    memmove(v343, v275, v274);
LABEL_613:
                    *((_BYTE *)v343 + v274) = 0;
                    LOBYTE(v475) = 1;
                    v346 = *(NSObject **)object;
                    if (SHIBYTE(v474) < 0)
                      operator delete(v473[0]);
                    if (BYTE8(v472) && SBYTE7(v472) < 0)
                      operator delete(*(void **)&object[8]);
                    if (*(_QWORD *)object)
                      os_release(*(void **)object);
                    if (v271 && *(_QWORD *)(v271 + 24))
                    {
                      v347 = _os_log_pack_size();
                      v348 = (std::__shared_weak_count_vtbl *)operator new(v347, (std::align_val_t)8uLL);
                      v349 = (std::__shared_weak_count *)operator new();
                      v350 = v349;
                      v349->__shared_owners_ = 0;
                      v351 = (unint64_t *)&v349->__shared_owners_;
                      v349->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
                      v349->__shared_weak_owners_ = 0;
                      v349[1].__vftable = v348;
                      *(_QWORD *)object = v348;
                      *(_QWORD *)&object[8] = v348;
                      *(_QWORD *)&object[16] = v349;
                      do
                        v352 = __ldxr(v351);
                      while (__stxr(v352 + 1, v351));
                      v472 = 0uLL;
                      v473[0] = 0;
                      do
                        v353 = __ldaxr(v351);
                      while (__stlxr(v353 - 1, v351));
                      if (!v353)
                      {
                        ((void (*)(std::__shared_weak_count *))v349->__on_zero_shared)(v349);
                        std::__shared_weak_count::__release_weak(v350);
                      }
                      v354 = *(_QWORD *)object;
                      v355 = _os_log_pack_fill();
                      *(_DWORD *)v355 = 134218496;
                      *(double *)(v355 + 4) = v261;
                      *(_WORD *)(v355 + 12) = 2048;
                      *(double *)(v355 + 14) = v263;
                      *(_WORD *)(v355 + 22) = 2048;
                      *(double *)(v355 + 24) = v264;
                      v356 = operator new();
                      v357 = *(unsigned __int8 *)(v450 + 39);
                      v358 = *(_QWORD *)(v450 + 16);
                      v359 = *(_QWORD *)(v450 + 24);
                      v360 = v472;
                      *(_OWORD *)(v356 + 8) = *(_OWORD *)&object[8];
                      if ((v357 & 0x80u) != 0)
                        v357 = v359;
                      else
                        v358 = v273;
                      *(_QWORD *)v356 = v354;
                      *(_QWORD *)&object[8] = 0;
                      *(_QWORD *)&object[16] = 0;
                      *(_OWORD *)(v356 + 24) = v360;
                      v472 = 0uLL;
                      *(_QWORD *)(v356 + 40) = v358;
                      *(_QWORD *)(v356 + 48) = v357;
                      *(_BYTE *)(v356 + 56) = 1;
                      v465[0] = 0;
                      v452 = (uint64_t *)v356;
                      (*(void (**)(_QWORD, uint64_t **))(**(_QWORD **)(v271 + 24) + 40))(*(_QWORD *)(v271 + 24), &v452);
                      v361 = v452;
                      v452 = 0;
                      if (v361)
                      {
                        v362 = (std::__shared_weak_count *)v361[4];
                        if (v362)
                        {
                          v363 = (unint64_t *)&v362->__shared_owners_;
                          do
                            v364 = __ldaxr(v363);
                          while (__stlxr(v364 - 1, v363));
                          if (!v364)
                          {
                            ((void (*)(std::__shared_weak_count *))v362->__on_zero_shared)(v362);
                            std::__shared_weak_count::__release_weak(v362);
                          }
                        }
                        v365 = (std::__shared_weak_count *)v361[2];
                        if (v365)
                        {
                          v366 = (unint64_t *)&v365->__shared_owners_;
                          do
                            v367 = __ldaxr(v366);
                          while (__stlxr(v367 - 1, v366));
                          if (!v367)
                          {
                            ((void (*)(std::__shared_weak_count *))v365->__on_zero_shared)(v365);
                            std::__shared_weak_count::__release_weak(v365);
                          }
                        }
                        MEMORY[0x212BC6398](v361, 0x10F0C40B62ED6C6);
                        v368 = v465[0];
                        v465[0] = 0;
                        if (v368)
                        {
                          v369 = (std::__shared_weak_count *)*((_QWORD *)v368 + 4);
                          if (v369)
                          {
                            v370 = (unint64_t *)&v369->__shared_owners_;
                            do
                              v371 = __ldaxr(v370);
                            while (__stlxr(v371 - 1, v370));
                            if (!v371)
                            {
                              ((void (*)(std::__shared_weak_count *))v369->__on_zero_shared)(v369);
                              std::__shared_weak_count::__release_weak(v369);
                            }
                          }
                          v372 = (std::__shared_weak_count *)*((_QWORD *)v368 + 2);
                          if (v372)
                          {
                            v373 = (unint64_t *)&v372->__shared_owners_;
                            do
                              v374 = __ldaxr(v373);
                            while (__stlxr(v374 - 1, v373));
                            if (!v374)
                            {
                              ((void (*)(std::__shared_weak_count *))v372->__on_zero_shared)(v372);
                              std::__shared_weak_count::__release_weak(v372);
                            }
                          }
                          MEMORY[0x212BC6398](v368, 0x10F0C40B62ED6C6);
                        }
                      }
                      v375 = (std::__shared_weak_count *)*((_QWORD *)&v472 + 1);
                      if (*((_QWORD *)&v472 + 1))
                      {
                        v376 = (unint64_t *)(*((_QWORD *)&v472 + 1) + 8);
                        do
                          v377 = __ldaxr(v376);
                        while (__stlxr(v377 - 1, v376));
                        if (!v377)
                        {
                          ((void (*)(std::__shared_weak_count *))v375->__on_zero_shared)(v375);
                          std::__shared_weak_count::__release_weak(v375);
                        }
                      }
                      v378 = *(std::__shared_weak_count **)&object[16];
                      if (*(_QWORD *)&object[16])
                      {
                        v379 = (unint64_t *)(*(_QWORD *)&object[16] + 8);
                        do
                          v380 = __ldaxr(v379);
                        while (__stlxr(v380 - 1, v379));
                        if (!v380)
                        {
                          ((void (*)(std::__shared_weak_count *))v378->__on_zero_shared)(v378);
                          std::__shared_weak_count::__release_weak(v378);
                        }
                      }
                    }
                    else
                    {
                      os_log_type_enabled(v346, OS_LOG_TYPE_INFO);
                      *(_DWORD *)object = 134218496;
                      *(double *)&object[4] = v261;
                      *(_WORD *)&object[12] = 2048;
                      *(double *)&object[14] = v263;
                      *(_WORD *)&object[22] = 2048;
                      *(double *)&v472 = v264;
                      v381 = (void *)_os_log_send_and_compose_impl();
                      if (v381)
                        free(v381);
                    }
                    if (v269)
                    {
                      sub_20E8C003C((uint64_t)v482, "[CA] Stereo tracking has poor quality: Primary cameras inlier ratio: %f Secondary cameras inlier ratio: %f Stereo match ratio: %f", v261, v263, v264);
                      sub_20E863570((uint64_t)v482);
                    }
                    sub_20E863570((uint64_t)v482);
                    v382 = v487;
                    if (v487)
                    {
                      v383 = (unint64_t *)&v487->__shared_owners_;
                      do
                        v384 = __ldaxr(v383);
                      while (__stlxr(v384 - 1, v383));
                      if (!v384)
                      {
                        ((void (*)(std::__shared_weak_count *))v382->__on_zero_shared)(v382);
                        std::__shared_weak_count::__release_weak(v382);
                      }
                    }
                    return v265;
                  }
                }
                memmove(v335, v333, v334);
                goto LABEL_605;
              }
              v309 = _os_log_pack_size();
              v310 = (std::__shared_weak_count_vtbl *)operator new(v309, (std::align_val_t)8uLL);
              v311 = (std::__shared_weak_count *)operator new();
              v311->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
              v311->__shared_owners_ = 0;
              v311->__shared_weak_owners_ = 0;
              v311[1].__vftable = v310;
              v465[0] = v310;
              v465[1] = v310;
              v467 = 0;
              v468 = 0;
              v466 = v311;
              v312 = strlen(v304);
              if (v312 > 0x7FFFFFFFFFFFFFF7)
                sub_20E860B7C();
              v313 = v312;
              if (v312 >= 0x17)
              {
                v316 = (v312 & 0xFFFFFFFFFFFFFFF8) + 8;
                if ((v312 | 7) != 0x17)
                  v316 = v312 | 7;
                v317 = v316 + 1;
                v314 = (uint64_t *)operator new(v316 + 1);
                *(_QWORD *)&v470 = v313;
                *((_QWORD *)&v470 + 1) = v317 | 0x8000000000000000;
                v469 = v314;
              }
              else
              {
                HIBYTE(v470) = v312;
                v314 = (uint64_t *)&v469;
                if (!v312)
                {
LABEL_575:
                  *((_BYTE *)v314 + v313) = 0;
                  v318 = (uint64_t)v469;
                  v488[0] = v470;
                  *(_QWORD *)((char *)v488 + 7) = *(_QWORD *)((char *)&v470 + 7);
                  v319 = HIBYTE(v470);
                  v320 = operator new(0x38uLL);
                  v320[1] = 0;
                  v320[2] = 0;
                  v320[3] = off_24C9ABC20;
                  *v320 = &off_24C9ABBD0;
                  v321 = v488[0];
                  v320[4] = v318;
                  v320[5] = v321;
                  *(_QWORD *)((char *)v320 + 47) = *(_QWORD *)((char *)v488 + 7);
                  *((_BYTE *)v320 + 55) = v319;
                  v488[0] = 0;
                  *(_QWORD *)((char *)v488 + 7) = 0;
                  v322 = v468;
                  v467 = (char *)(v320 + 3);
                  v468 = (std::__shared_weak_count *)v320;
                  if (v322)
                  {
                    v323 = (unint64_t *)&v322->__shared_owners_;
                    do
                      v324 = __ldaxr(v323);
                    while (__stlxr(v324 - 1, v323));
                    if (!v324)
                    {
                      ((void (*)(std::__shared_weak_count *))v322->__on_zero_shared)(v322);
                      std::__shared_weak_count::__release_weak(v322);
                    }
                  }
                  *(_OWORD *)v482 = *(_OWORD *)v465;
                  v325 = v467;
                  *(_QWORD *)&v482[16] = v466;
                  if (v466)
                  {
                    v326 = (unint64_t *)&v466->__shared_owners_;
                    do
                      v327 = __ldxr(v326);
                    while (__stxr(v327 + 1, v326));
                  }
                  v328 = v468;
                  *(_QWORD *)&v483 = v325;
                  *((_QWORD *)&v483 + 1) = v468;
                  if (v468)
                  {
                    v329 = (unint64_t *)&v468->__shared_owners_;
                    do
                      v330 = __ldxr(v329);
                    while (__stxr(v330 + 1, v329));
                    v484 = v325;
                    do
                      v331 = __ldaxr(v329);
                    while (__stlxr(v331 - 1, v329));
                    if (!v331)
                    {
                      ((void (*)(std::__shared_weak_count *))v328->__on_zero_shared)(v328);
                      std::__shared_weak_count::__release_weak(v328);
                    }
                  }
                  else
                  {
                    v484 = v325;
                  }
                  v385 = v466;
                  if (v466)
                  {
                    v386 = (unint64_t *)&v466->__shared_owners_;
                    do
                      v387 = __ldaxr(v386);
                    while (__stlxr(v387 - 1, v386));
                    if (!v387)
                    {
                      ((void (*)(std::__shared_weak_count *))v385->__on_zero_shared)(v385);
                      std::__shared_weak_count::__release_weak(v385);
                    }
                  }
                  v388 = *(_QWORD *)v482;
                  if (v484[31] >= 0)
                    v389 = v484 + 8;
                  else
                    v389 = (char *)*((_QWORD *)v484 + 1);
                  v390 = _os_log_pack_fill();
                  *(_DWORD *)v390 = 136315138;
                  *(_QWORD *)(v390 + 4) = v389;
                  v391 = (char *)operator new();
                  v392 = *(unsigned __int8 *)(v291 + 39);
                  v393 = v447;
                  if ((v392 & 0x80u) != 0)
                  {
                    v393 = *(const char **)(v291 + 16);
                    v392 = *(_QWORD *)(v291 + 24);
                  }
                  *(_QWORD *)v391 = v388;
                  *(_OWORD *)(v391 + 8) = *(_OWORD *)&v482[8];
                  *(_QWORD *)&v482[8] = 0;
                  *(_QWORD *)&v482[16] = 0;
                  *(_OWORD *)(v391 + 24) = v483;
                  v483 = 0uLL;
                  *((_QWORD *)v391 + 5) = v393;
                  *((_QWORD *)v391 + 6) = v392;
                  v391[56] = 2;
                  v469 = 0;
                  v465[0] = v391;
                  (*(void (**)(_QWORD, void **))(**(_QWORD **)(v305 + 24) + 40))(*(_QWORD *)(v305 + 24), v465);
                  v394 = v465[0];
                  v465[0] = 0;
                  if (v394)
                  {
                    v395 = (std::__shared_weak_count *)*((_QWORD *)v394 + 4);
                    if (v395)
                    {
                      v396 = (unint64_t *)&v395->__shared_owners_;
                      do
                        v397 = __ldaxr(v396);
                      while (__stlxr(v397 - 1, v396));
                      if (!v397)
                      {
                        ((void (*)(std::__shared_weak_count *))v395->__on_zero_shared)(v395);
                        std::__shared_weak_count::__release_weak(v395);
                      }
                    }
                    v398 = (std::__shared_weak_count *)*((_QWORD *)v394 + 2);
                    if (v398)
                    {
                      v399 = (unint64_t *)&v398->__shared_owners_;
                      do
                        v400 = __ldaxr(v399);
                      while (__stlxr(v400 - 1, v399));
                      if (!v400)
                      {
                        ((void (*)(std::__shared_weak_count *))v398->__on_zero_shared)(v398);
                        std::__shared_weak_count::__release_weak(v398);
                      }
                    }
                    MEMORY[0x212BC6398](v394, 0x10F0C40B62ED6C6);
                    v401 = (uint64_t)v469;
                    v469 = 0;
                    if (v401)
                    {
                      v402 = *(std::__shared_weak_count **)(v401 + 32);
                      if (v402)
                      {
                        v403 = (unint64_t *)&v402->__shared_owners_;
                        do
                          v404 = __ldaxr(v403);
                        while (__stlxr(v404 - 1, v403));
                        if (!v404)
                        {
                          ((void (*)(std::__shared_weak_count *))v402->__on_zero_shared)(v402);
                          std::__shared_weak_count::__release_weak(v402);
                        }
                      }
                      v405 = *(std::__shared_weak_count **)(v401 + 16);
                      if (v405)
                      {
                        v406 = (unint64_t *)&v405->__shared_owners_;
                        do
                          v407 = __ldaxr(v406);
                        while (__stlxr(v407 - 1, v406));
                        if (!v407)
                        {
                          ((void (*)(std::__shared_weak_count *))v405->__on_zero_shared)(v405);
                          std::__shared_weak_count::__release_weak(v405);
                        }
                      }
                      MEMORY[0x212BC6398](v401, 0x10F0C40B62ED6C6);
                    }
                  }
                  v408 = (std::__shared_weak_count *)*((_QWORD *)&v483 + 1);
                  if (*((_QWORD *)&v483 + 1))
                  {
                    v409 = (unint64_t *)(*((_QWORD *)&v483 + 1) + 8);
                    do
                      v410 = __ldaxr(v409);
                    while (__stlxr(v410 - 1, v409));
                    if (!v410)
                    {
                      ((void (*)(std::__shared_weak_count *))v408->__on_zero_shared)(v408);
                      std::__shared_weak_count::__release_weak(v408);
                    }
                  }
                  v411 = *(std::__shared_weak_count **)&v482[16];
                  if (*(_QWORD *)&v482[16])
                  {
                    v412 = (unint64_t *)(*(_QWORD *)&v482[16] + 8);
                    do
                      v413 = __ldaxr(v412);
                    while (__stlxr(v413 - 1, v412));
                    if (!v413)
                    {
                      ((void (*)(std::__shared_weak_count *))v411->__on_zero_shared)(v411);
                      std::__shared_weak_count::__release_weak(v411);
                    }
                  }
                  goto LABEL_717;
                }
              }
              memcpy(v314, v304, v313);
              goto LABEL_575;
            }
          }
          memmove(v298, v296, v297);
          goto LABEL_546;
        }
      }
      memmove(v285, v287, v284);
      goto LABEL_525;
    }
  }
  if (v265)
    goto LABEL_506;
  return v265;
}

void sub_20EFF297C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  void *__p;
  uint64_t v71;

  if (LOBYTE(STACK[0x208]))
  {
    if (SLOBYTE(STACK[0x207]) < 0)
      operator delete(__p);
  }
  __cxa_guard_abort(&qword_254A4A510);
  sub_20E863714(v71 - 256);
  _Unwind_Resume(a1);
}

void sub_20EFF29BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,char a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,void *__p,uint64_t a60,int a61,__int16 a62,char a63)
{
  char a64;
  void *object;
  uint64_t v72;

  if (*(_BYTE *)(v72 - 232) && *(char *)(v72 - 233) < 0)
    operator delete(*(void **)(v72 - 256));
  __cxa_guard_abort(&qword_254A4A510);
  sub_20E863714((uint64_t)&a50);
  if (a64 < 0)
  {
    operator delete(__p);
    sub_20E863784((uint64_t)&object);
    _Unwind_Resume(a1);
  }
  sub_20E863784((uint64_t)&object);
  _Unwind_Resume(a1);
}

uint64_t sub_20EFF2E4C(uint64_t result, uint64_t a2, uint64_t a3, double a4, double a5)
{
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  double v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  unsigned __int8 v15;
  unsigned __int8 v16;
  unsigned __int8 v17;
  unsigned __int8 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void (*v22)(uint64_t, const char *, uint64_t, const char *, uint64_t);
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(uint64_t, const char *, uint64_t, const char *, uint64_t);
  uint64_t v27;
  unsigned int v28;
  uint64_t v29;
  unsigned __int8 v30;
  BOOL v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void (*v35)(uint64_t, const char *, uint64_t, const char *, uint64_t);
  unsigned __int8 v36;
  unsigned __int8 v37;
  unsigned __int8 v38;
  uint64_t (*v39)(void);
  unsigned __int8 v40;
  unsigned __int8 v41;
  unsigned __int8 v42;
  unsigned __int8 v43;
  unsigned __int8 v44;
  unsigned __int8 v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  void (*v49)(uint64_t, const char *, uint64_t, const char *, uint64_t);
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  void (*v53)(uint64_t, const char *, uint64_t, const char *, uint64_t);
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  void (*v57)(uint64_t, const char *, uint64_t, const char *, uint64_t);
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  void (*v61)(uint64_t, const char *, uint64_t, const char *, uint64_t);
  uint64_t v63;
  uint64_t v64;
  int v65;
  uint64_t v66;
  BOOL v67;

  if (a2 != a3)
  {
    v7 = 0;
    v64 = result + 144;
    while (1)
    {
      v9 = *(_QWORD *)(a2 + 24);
      v8 = *(_QWORD *)(a2 + 32);
      v67 = v8 - v9 == 16;
      v10 = v8 - v9;
      v63 = a2;
      if (v10)
        break;
LABEL_3:
      a2 = v63 + 240;
      if (v63 + 240 == a3)
      {
        if (v7 < 9)
          return result;
        result = sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Odometry/src/CameraAllocator.cpp", 516, (uint64_t)"stream_index <= cv_types::CameraAllocationInfo::kMaxNumberOfStreams", 67, (uint64_t)"Exceed maximum number of streams", 32, (void (*)(void **))sub_21023DDB0);
        if (!(_DWORD)result)
          return result;
LABEL_107:
        abort();
      }
    }
    v66 = v10 >> 4;
    v65 = *(_DWORD *)a2 << 16;
    if (v10 == 16)
      v11 = a4;
    else
      v11 = a5;
    if (*(_DWORD *)a2 < 0x10000u)
    {
      v12 = 0;
      v13 = v7;
      while (1)
      {
        if (v12 >= 0x10000)
        {
          sub_21023D70C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/ComputerVisionTypes/include/VIO/ComputerVisionTypes/CameraStreamId.h", 39, (uint64_t)"stream_id <= 0xffff", 19, (uint64_t)"Stream ID cannot exceeds 16 bits", 32, (void (*)(void **))sub_21023DDB0);
          v15 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
          if ((v15 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
          {
            __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
            __cxa_guard_release(&qword_254A6DE78);
          }
          if (!byte_254A6DE68 || byte_254A6DE70)
          {
            v20 = qword_254A6DE40;
            v19 = qword_254A6DE48;
            while (v20 != v19)
            {
              v22 = *(void (**)(uint64_t, const char *, uint64_t, const char *, uint64_t))v20;
              v21 = *(_QWORD *)(v20 + 8);
              v20 += 16;
              v22(v21, "stream_id <= 0xffff", 19, "Stream ID cannot exceeds 16 bits", 32);
            }
          }
          v16 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
          if ((v16 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
          {
            __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
            __cxa_guard_release(&qword_254A6DE78);
          }
          if (!byte_254A6DE68)
            goto LABEL_107;
          qword_254A6DE58(unk_254A6DE60, "stream_id <= 0xffff", 19, "Stream ID cannot exceeds 16 bits", 32);
          sub_21023D70C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/ComputerVisionTypes/include/VIO/ComputerVisionTypes/CameraStreamId.h", 50, (uint64_t)"stream_id <= 0xffff", 19, (uint64_t)"Stream ID cannot exceeds 16 bits", 32, (void (*)(void **))sub_21023DDB0);
          v17 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
          if ((v17 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
          {
            __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
            __cxa_guard_release(&qword_254A6DE78);
          }
          if (!byte_254A6DE68 || byte_254A6DE70)
          {
            v24 = qword_254A6DE40;
            v23 = qword_254A6DE48;
            while (v24 != v23)
            {
              v26 = *(void (**)(uint64_t, const char *, uint64_t, const char *, uint64_t))v24;
              v25 = *(_QWORD *)(v24 + 8);
              v24 += 16;
              v26(v25, "stream_id <= 0xffff", 19, "Stream ID cannot exceeds 16 bits", 32);
            }
          }
          v18 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
          if ((v18 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
          {
            __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
            __cxa_guard_release(&qword_254A6DE78);
          }
          if (!byte_254A6DE68)
            goto LABEL_107;
          result = qword_254A6DE58(unk_254A6DE60, "stream_id <= 0xffff", 19, "Stream ID cannot exceeds 16 bits", 32);
        }
        v7 = v13 + 1;
        v14 = v64 + 24 * v13;
        *(_DWORD *)v14 = (unsigned __int16)v12 | v65;
        *(double *)(v14 + 8) = v11;
        *(_BYTE *)(v14 + 16) = v67;
        ++v12;
        ++v13;
        if (v12 == v66)
          goto LABEL_3;
      }
    }
    v27 = 0;
    v28 = v7;
    while (1)
    {
      sub_21023D70C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/ComputerVisionTypes/include/VIO/ComputerVisionTypes/CameraStreamId.h", 38, (uint64_t)"camera_id <= 0xffff", 19, (uint64_t)"Camera ID cannot exceeds 16 bits", 32, (void (*)(void **))sub_21023DDB0);
      v30 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
      if ((v30 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
      {
        __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
        __cxa_guard_release(&qword_254A6DE78);
      }
      if (byte_254A6DE68)
        v31 = byte_254A6DE70 == 0;
      else
        v31 = 0;
      if (!v31)
      {
        v33 = qword_254A6DE40;
        v32 = qword_254A6DE48;
        while (v33 != v32)
        {
          v35 = *(void (**)(uint64_t, const char *, uint64_t, const char *, uint64_t))v33;
          v34 = *(_QWORD *)(v33 + 8);
          v33 += 16;
          v35(v34, "camera_id <= 0xffff", 19, "Camera ID cannot exceeds 16 bits", 32);
        }
      }
      v36 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
      if ((v36 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
      {
        __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
        __cxa_guard_release(&qword_254A6DE78);
      }
      if (!byte_254A6DE68)
        goto LABEL_107;
      qword_254A6DE58(unk_254A6DE60, "camera_id <= 0xffff", 19, "Camera ID cannot exceeds 16 bits", 32);
      if (v27 >= 0x10000)
      {
        sub_21023D70C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/ComputerVisionTypes/include/VIO/ComputerVisionTypes/CameraStreamId.h", 39, (uint64_t)"stream_id <= 0xffff", 19, (uint64_t)"Stream ID cannot exceeds 16 bits", 32, (void (*)(void **))sub_21023DDB0);
        v40 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
        if ((v40 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
        {
          __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
          __cxa_guard_release(&qword_254A6DE78);
        }
        if (!byte_254A6DE68 || byte_254A6DE70)
        {
          v51 = qword_254A6DE40;
          v50 = qword_254A6DE48;
          while (v51 != v50)
          {
            v53 = *(void (**)(uint64_t, const char *, uint64_t, const char *, uint64_t))v51;
            v52 = *(_QWORD *)(v51 + 8);
            v51 += 16;
            v53(v52, "stream_id <= 0xffff", 19, "Stream ID cannot exceeds 16 bits", 32);
          }
        }
        v41 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
        if ((v41 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
        {
          __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
          __cxa_guard_release(&qword_254A6DE78);
        }
        if (!byte_254A6DE68)
          goto LABEL_107;
        qword_254A6DE58(unk_254A6DE60, "stream_id <= 0xffff", 19, "Stream ID cannot exceeds 16 bits", 32);
        sub_21023D70C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/ComputerVisionTypes/include/VIO/ComputerVisionTypes/CameraStreamId.h", 49, (uint64_t)"camera_id <= 0xffff", 19, (uint64_t)"Camera ID cannot exceeds 16 bits", 32, (void (*)(void **))sub_21023DDB0);
        v42 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
        if ((v42 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
        {
          __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
          __cxa_guard_release(&qword_254A6DE78);
        }
        if (!byte_254A6DE68 || byte_254A6DE70)
        {
          v55 = qword_254A6DE40;
          v54 = qword_254A6DE48;
          while (v55 != v54)
          {
            v57 = *(void (**)(uint64_t, const char *, uint64_t, const char *, uint64_t))v55;
            v56 = *(_QWORD *)(v55 + 8);
            v55 += 16;
            v57(v56, "camera_id <= 0xffff", 19, "Camera ID cannot exceeds 16 bits", 32);
          }
        }
        v43 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
        if ((v43 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
        {
          __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
          __cxa_guard_release(&qword_254A6DE78);
        }
        if (!byte_254A6DE68)
          goto LABEL_107;
        qword_254A6DE58(unk_254A6DE60, "camera_id <= 0xffff", 19, "Camera ID cannot exceeds 16 bits", 32);
        sub_21023D70C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/ComputerVisionTypes/include/VIO/ComputerVisionTypes/CameraStreamId.h", 50, (uint64_t)"stream_id <= 0xffff", 19, (uint64_t)"Stream ID cannot exceeds 16 bits", 32, (void (*)(void **))sub_21023DDB0);
        v44 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
        if ((v44 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
        {
          __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
          __cxa_guard_release(&qword_254A6DE78);
        }
        if (!byte_254A6DE68 || byte_254A6DE70)
        {
          v59 = qword_254A6DE40;
          v58 = qword_254A6DE48;
          while (v59 != v58)
          {
            v61 = *(void (**)(uint64_t, const char *, uint64_t, const char *, uint64_t))v59;
            v60 = *(_QWORD *)(v59 + 8);
            v59 += 16;
            v61(v60, "stream_id <= 0xffff", 19, "Stream ID cannot exceeds 16 bits", 32);
          }
        }
        v45 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
        if ((v45 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
        {
          __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
          __cxa_guard_release(&qword_254A6DE78);
        }
        if (!byte_254A6DE68)
          goto LABEL_107;
        v39 = (uint64_t (*)(void))qword_254A6DE58;
      }
      else
      {
        sub_21023D70C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/ComputerVisionTypes/include/VIO/ComputerVisionTypes/CameraStreamId.h", 49, (uint64_t)"camera_id <= 0xffff", 19, (uint64_t)"Camera ID cannot exceeds 16 bits", 32, (void (*)(void **))sub_21023DDB0);
        v37 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
        if ((v37 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
        {
          __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
          __cxa_guard_release(&qword_254A6DE78);
        }
        if (!byte_254A6DE68 || byte_254A6DE70)
        {
          v47 = qword_254A6DE40;
          v46 = qword_254A6DE48;
          while (v47 != v46)
          {
            v49 = *(void (**)(uint64_t, const char *, uint64_t, const char *, uint64_t))v47;
            v48 = *(_QWORD *)(v47 + 8);
            v47 += 16;
            v49(v48, "camera_id <= 0xffff", 19, "Camera ID cannot exceeds 16 bits", 32);
          }
        }
        v38 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
        if ((v38 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
        {
          __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
          __cxa_guard_release(&qword_254A6DE78);
        }
        if (!byte_254A6DE68)
          goto LABEL_107;
        v39 = (uint64_t (*)(void))qword_254A6DE58;
      }
      result = v39();
      v7 = v28 + 1;
      v29 = v64 + 24 * v28;
      *(_DWORD *)v29 = (unsigned __int16)v27 | v65;
      *(double *)(v29 + 8) = v11;
      *(_BYTE *)(v29 + 16) = v67;
      ++v27;
      ++v28;
      if (v27 == v66)
        goto LABEL_3;
    }
  }
  return result;
}

void sub_20EFF37E4(_QWORD *a1)
{
  unsigned __int8 v2;
  void *__p[2];
  char v4;
  uint64_t *v5;

  v2 = atomic_load((unsigned __int8 *)&qword_254A618C0);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254A618C0))
  {
    sub_21021D3D8(&v5);
    sub_20E8610C0(__p, "cv3d.vio.odometry");
    sub_20E8C4068(&v5, (uint64_t)__p, &qword_254A618B8);
    if (v4 < 0)
      operator delete(__p[0]);
    __cxa_guard_release(&qword_254A618C0);
  }
  *a1 = qword_254A618B8;
}

void sub_20EFF3880(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A618C0);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A618C0);
  _Unwind_Resume(a1);
}

uint64_t sub_20EFF38D8(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 8);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

uint64_t sub_20EFF3940(BOOL **a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9)
{
  BOOL *v9;
  BOOL v10;
  uint64_t result;

  v9 = *a1;
  v10 = (*a1)[1] && a9 == **a1;
  result = !v10;
  if (!v10)
  {
    *v9 = a9 != 0;
    v9[1] = 1;
  }
  return result;
}

void sub_20EFF398C(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9F6898;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_20EFF399C(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9F6898;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20EFF39D4(uint64_t result, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  const char *v4;
  size_t v5;
  uint64_t v6;
  _QWORD v8[2];
  char v9;
  _DWORD v10[4];
  _QWORD v11[33];

  if (result + 192 == a3)
  {
    v6 = result;
    sub_20E863438((uint64_t)v10);
    sub_20E86A980(v11, (uint64_t)"Query source ID does not exist.\nQuery source ID: ", 49);
    v3 = (_QWORD *)std::ostream::operator<<();
    sub_20E86A980(v3, (uint64_t)".\nAvailable source IDs: ", 24);
    sub_20EEA5904(v6, a3, (uint64_t)v10);
    v4 = (const char *)v8;
    sub_20E923E88(v10, v8);
    if (v9 < 0)
      v4 = (const char *)v8[0];
    v5 = strlen(v4);
    sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/ComputerVisionTypes/include/VIO/ComputerVisionTypes/CameraAllocationInfo.h", 122, (uint64_t)"", 0, (uint64_t)v4, v5, (void (*)(void **))sub_21023DDB0);
    abort();
  }
  return result;
}

void sub_20EFF3AB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
  if (a16 < 0)
  {
    operator delete(__p);
    sub_20E863784((uint64_t)&a17);
    _Unwind_Resume(a1);
  }
  sub_20E863784((uint64_t)&a17);
  _Unwind_Resume(a1);
}

void sub_20EFF3AFC(uint64_t a1, int a2)
{
  int v3;
  int v4;
  int v5;
  int v6;
  BOOL v7;
  uint64_t v8;
  int v9;
  size_t v10;
  void **v11;
  unint64_t v12;
  unint64_t v13;
  const void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  char *__s;
  unsigned __int8 v28;
  uint64_t *v29;
  unsigned __int8 v30;
  char *v32;
  size_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t i;
  uint64_t v37;
  _QWORD *v38;
  size_t v39;
  void *v40[2];
  char v41;
  __uint64_t v42[2];
  int v43;
  void *__dst[2];
  unint64_t v45;
  __int128 *v46;
  __int128 v47;
  __uint64_t *v48;
  void **v49;
  void *v50;
  char v51;
  char v52;
  void *v53;
  char v54;
  char v55;
  void *v56;
  char v57;
  void *__p;
  char v59;
  uint64_t v60;

  v60 = *MEMORY[0x24BDAC8D0];
  v3 = *(_DWORD *)(a1 + 136);
  if (a2)
  {
    v4 = v3 + 1;
    *(_DWORD *)(a1 + 136) = v3 + 1;
    v5 = *(unsigned __int8 *)(a1 + 336);
    if (v5 != 2 || v3 < 0)
    {
      if (v5 != 1)
      {
        if (!*(_BYTE *)(a1 + 336) && v4 >= *(_DWORD *)(a1 + 88))
          *(_BYTE *)(a1 + 336) = 1;
        goto LABEL_21;
      }
      if (v4 < *(_DWORD *)(a1 + 92))
        goto LABEL_21;
      *(_BYTE *)(a1 + 336) = 2;
    }
LABEL_20:
    *(_DWORD *)(a1 + 136) = 0;
    goto LABEL_21;
  }
  *(_DWORD *)(a1 + 136) = v3 - 1;
  v6 = *(unsigned __int8 *)(a1 + 336);
  if (*(_BYTE *)(a1 + 336))
    v7 = 0;
  else
    v7 = v3 <= 0;
  if (v7)
    goto LABEL_20;
  if (v6 == 1)
  {
    if (*(_DWORD *)(a1 + 92) > 1 - v3)
      goto LABEL_21;
    *(_BYTE *)(a1 + 336) = 0;
    goto LABEL_20;
  }
  if (v6 == 2 && *(_DWORD *)(a1 + 88) <= 1 - v3)
    *(_BYTE *)(a1 + 336) = 1;
LABEL_21:
  v43 = 0;
  v8 = operator new();
  *(_QWORD *)(v8 + 272) = 0;
  *(_OWORD *)(v8 + 240) = 0u;
  *(_OWORD *)(v8 + 256) = 0u;
  *(_OWORD *)(v8 + 208) = 0u;
  *(_OWORD *)(v8 + 224) = 0u;
  *(_OWORD *)(v8 + 176) = 0u;
  *(_OWORD *)(v8 + 192) = 0u;
  *(_OWORD *)(v8 + 144) = 0u;
  *(_OWORD *)(v8 + 160) = 0u;
  *(_OWORD *)(v8 + 112) = 0u;
  *(_OWORD *)(v8 + 128) = 0u;
  *(_OWORD *)(v8 + 80) = 0u;
  *(_OWORD *)(v8 + 96) = 0u;
  *(_OWORD *)(v8 + 48) = 0u;
  *(_OWORD *)(v8 + 64) = 0u;
  *(_OWORD *)(v8 + 16) = 0u;
  *(_OWORD *)(v8 + 32) = 0u;
  *(_OWORD *)v8 = 0u;
  sub_20E863438(v8);
  *(_QWORD *)&v47 = v8;
  sub_20E86A980((_QWORD *)(v8 + 16), (uint64_t)off_24C9F6930[*(char *)(a1 + 336)], qword_210398720[*(char *)(a1 + 336)]);
  v9 = *(_DWORD *)(v8 + 120);
  if ((v9 & 0x10) != 0)
  {
    v12 = *(_QWORD *)(v8 + 112);
    v13 = *(_QWORD *)(v8 + 72);
    if (v12 < v13)
    {
      *(_QWORD *)(v8 + 112) = v13;
      v12 = v13;
    }
    v14 = *(const void **)(v8 + 64);
    v10 = v12 - (_QWORD)v14;
    if (v12 - (unint64_t)v14 >= 0x7FFFFFFFFFFFFFF8)
      goto LABEL_59;
  }
  else
  {
    if ((v9 & 8) == 0)
    {
      v10 = 0;
      HIBYTE(v45) = 0;
      v11 = __dst;
      goto LABEL_34;
    }
    v14 = *(const void **)(v8 + 40);
    v10 = *(_QWORD *)(v8 + 56) - (_QWORD)v14;
    if (v10 >= 0x7FFFFFFFFFFFFFF8)
LABEL_59:
      sub_20E860B7C();
  }
  if (v10 >= 0x17)
  {
    v15 = (v10 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v10 | 7) != 0x17)
      v15 = v10 | 7;
    v16 = v15 + 1;
    v11 = (void **)operator new(v15 + 1);
    __dst[1] = (void *)v10;
    v45 = v16 | 0x8000000000000000;
    __dst[0] = v11;
    goto LABEL_33;
  }
  HIBYTE(v45) = v10;
  v11 = __dst;
  if (v10)
LABEL_33:
    memmove(v11, v14, v10);
LABEL_34:
  *((_BYTE *)v11 + v10) = 0;
  v17 = v47;
  if ((_QWORD)v47)
  {
    v18 = MEMORY[0x24BEDB7F0];
    v19 = *MEMORY[0x24BEDB7F0];
    *(_QWORD *)v47 = *MEMORY[0x24BEDB7F0];
    v20 = *(_QWORD *)(v18 + 72);
    *(_QWORD *)(v17 + *(_QWORD *)(v19 - 24)) = *(_QWORD *)(v18 + 64);
    *(_QWORD *)(v17 + 24) = MEMORY[0x24BEDB848] + 16;
    *(_QWORD *)(v17 + 16) = v20;
    if (*(char *)(v17 + 111) < 0)
      operator delete(*(void **)(v17 + 88));
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x212BC6290](v17 + 128);
    MEMORY[0x212BC6398](v17, 0x10B2C40EED050F3);
  }
  *(_QWORD *)&v47 = v42;
  *((_QWORD *)&v47 + 1) = __dst;
  v48 = v42;
  v49 = __dst;
  v50 = __dst;
  if (v43 == -1)
    sub_20E877AB8();
  v46 = &v47;
  ((void (*)(__int128 **, __uint64_t *))off_24C9F68E8[v43])(&v46, v42);
  if (SHIBYTE(v45) < 0)
    operator delete(__dst[0]);
  if (v43 == -1)
    sub_20E877AB8();
  *(_QWORD *)&v47 = __dst;
  ((void (*)(void **__return_ptr, __int128 *, __uint64_t *))off_24C9F6918[v43])(v40, &v47, v42);
  if (v43 != -1)
    ((void (*)(__int128 *, __uint64_t *))off_24C9F6900[v43])(&v47, v42);
  if (v41 >= 0)
    __s = (char *)v40;
  else
    __s = (char *)v40[0];
  v28 = atomic_load((unsigned __int8 *)&qword_254A618D8);
  if ((v28 & 1) == 0 && __cxa_guard_acquire(&qword_254A618D8))
  {
    qword_254A618F0 = 0;
    qword_254A618F8 = 0;
    v38 = operator new(0x38uLL);
    v38[1] = 0;
    v38[2] = 0;
    *((_BYTE *)v38 + 24) = 0;
    *v38 = &off_24C9E9FB0;
    *((_BYTE *)v38 + 48) = 0;
    qword_254A618F0 = (uint64_t)(v38 + 3);
    qword_254A618F8 = (uint64_t)v38;
    __cxa_atexit((void (*)(void *))sub_20EE09DC0, &qword_254A618F0, &dword_20E81F000);
    __cxa_guard_release(&qword_254A618D8);
  }
  if (sub_20EE09E28(&qword_254A618F0, 0, v21, v22, v23, v24, v25, v26, __s, v39))
  {
    v29 = sub_210219C18();
    v30 = atomic_load((unsigned __int8 *)&qword_254A6DDD0);
    if ((v30 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DDD0))
    {
      __cxa_atexit((void (*)(void *))sub_21021A250, &stru_254A5A410, &dword_20E81F000);
      __cxa_guard_release(&qword_254A6DDD0);
    }
    if (!atomic_load(&qword_254A5A450))
      goto LABEL_71;
    LODWORD(v47) = 136446210;
    *(_QWORD *)((char *)&v47 + 4) = __s;
    v32 = (char *)_os_log_send_and_compose_impl();
    v33 = strlen(v32);
    v42[0] = 0;
    pthread_threadid_np(0, v42);
    v34 = v42[0];
    timespec_get((timespec *)v42, 1);
    sub_210219E20(&v47, 0xEEEEB0B5B2B2EEEELL, "CameraAllocation", 0x10uLL, (__int128 *)(v29 + 1), (__int128 *)(v29 + 5), "[CA] CameraAllocationState: %{public}s", 0x26uLL, v32, v33, v34, v42);
    std::mutex::lock(&stru_254A5A410);
    v35 = qword_254A5A458;
    for (i = unk_254A5A460; v35 != i; v35 += 40)
    {
      v37 = *(_QWORD *)(v35 + 32);
      if (!v37)
        sub_20E86D37C();
      (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)v37 + 48))(v37, &v47);
    }
    std::mutex::unlock(&stru_254A5A410);
    if (v59 < 0)
    {
      operator delete(__p);
      if ((v57 & 0x80000000) == 0)
      {
LABEL_56:
        if (!v55)
        {
LABEL_64:
          if (v52 && v51 < 0)
            operator delete(v50);
          if (SHIBYTE(v49) < 0)
            operator delete(*((void **)&v47 + 1));
          if (v32)
            free(v32);
LABEL_71:
          if (os_signpost_enabled((os_log_t)*v29))
          {
            LODWORD(v47) = 136446210;
            *(_QWORD *)((char *)&v47 + 4) = __s;
            _os_signpost_emit_unreliably_with_name_impl();
          }
          goto LABEL_73;
        }
LABEL_62:
        if (v54 < 0)
          operator delete(v53);
        goto LABEL_64;
      }
    }
    else if ((v57 & 0x80000000) == 0)
    {
      goto LABEL_56;
    }
    operator delete(v56);
    if (!v55)
      goto LABEL_64;
    goto LABEL_62;
  }
LABEL_73:
  if (v41 < 0)
    operator delete(v40[0]);
}

void sub_20EFF41B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,char a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,void *a38,uint64_t a39,int a40,__int16 a41,char a42,char a43,char a44,void *a45,uint64_t a46,int a47,__int16 a48,char a49,char a50,char a51,void *a52,uint64_t a53,int a54,__int16 a55,char a56,char a57,void *a58,uint64_t a59,int a60,__int16 a61,char a62,char a63)
{
  __cxa_guard_abort(&qword_254A618D8);
  if (a19 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

unint64_t sub_20EFF4344(uint64_t a1, char a2)
{
  unsigned int v2;
  unsigned __int8 v3;
  unint64_t result;
  int v5;
  unint64_t v6;
  _QWORD *v8;
  _QWORD *v9;
  size_t v10;
  void **v11;
  unint64_t v12;
  const void *v13;
  uint64_t v14;
  uint64_t v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  size_t v19;
  const char *v20;
  unsigned __int8 v21;
  unsigned __int8 v22;
  const char *v23;
  size_t v24;
  _BYTE *v25;
  uint64_t v26;
  unint64_t v27;
  const char *v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void **v33;
  NSObject *v34;
  uint64_t v35;
  uint64_t v36;
  size_t v37;
  std::__shared_weak_count_vtbl *v38;
  std::__shared_weak_count *v39;
  size_t v40;
  size_t v41;
  _QWORD *v42;
  void *v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  char v47;
  _QWORD *v48;
  uint64_t v49;
  std::__shared_weak_count *v50;
  unint64_t *p_shared_owners;
  unint64_t v52;
  void *v53;
  unint64_t *v54;
  unint64_t v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  unint64_t v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  __int128 v70;
  uint64_t v71;
  std::__shared_weak_count *v72;
  unint64_t *v73;
  unint64_t v74;
  std::__shared_weak_count *v75;
  unint64_t *v76;
  unint64_t v77;
  _QWORD *v78;
  std::__shared_weak_count *v79;
  unint64_t *v80;
  unint64_t v81;
  std::__shared_weak_count *v82;
  unint64_t *v83;
  unint64_t v84;
  std::__shared_weak_count *v85;
  unint64_t *v86;
  unint64_t v87;
  std::__shared_weak_count *v88;
  unint64_t *v89;
  unint64_t v90;
  const char *v91;
  std::__shared_weak_count *v92;
  unint64_t *v93;
  unint64_t v94;
  uint64_t v95;
  const char *v96;
  _QWORD v97[3];
  int v98;
  const char *v99;
  int v100;
  const char *v101;
  uint64_t v102;
  std::__shared_weak_count *v103;
  void *__dst[2];
  int64_t v105;
  void *v106[2];
  _QWORD v107[3];
  const void *v108;
  uint64_t v109;
  const void *v110;
  unint64_t v111;
  void *__p;
  char v113;
  unint64_t v114;
  int v115;
  uint64_t v116;
  uint64_t v117;
  __int128 v118;
  std::__shared_weak_count *v119;
  char *v120;
  std::__shared_weak_count *v121;
  _QWORD *v122;
  __int128 v123;
  _BYTE v124[24];
  __int128 v125;
  void *v126[2];
  unint64_t v127;
  char v128;
  _QWORD v129[5];

  v129[2] = *MEMORY[0x24BDAC8D0];
  if ((a2 & 1) != 0)
    v2 = 0;
  else
    v2 = *(_DWORD *)(a1 + 140) + 1;
  if (v2 >= *(_DWORD *)(a1 + 100))
    v2 = *(_DWORD *)(a1 + 100);
  *(_DWORD *)(a1 + 140) = v2;
  v3 = atomic_load((unsigned __int8 *)&qword_254A618E8);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_254A618E8))
  {
    sub_21021D3D8(v124);
    sub_20E8610C0(v106, "cv3d.vio.odometry");
    sub_20E8C4068((uint64_t **)v124, (uint64_t)v106, &qword_254A618E0);
    if (SHIBYTE(v107[0]) < 0)
      operator delete(v106[0]);
    __cxa_guard_release(&qword_254A618E8);
  }
  result = qword_254A618E0;
  v117 = qword_254A618E0;
  if (**(int **)(qword_254A618E0 + 56) <= 2)
  {
    v5 = *(unsigned __int8 *)(qword_254A618E0 + 72);
    result = sub_20E8C31DC(qword_254A618E0, "OSLogSurrogateAppender", 1, 0);
    v6 = result;
    if (v5 || result != 0)
    {
      sub_20E863438((uint64_t)v106);
      sub_20E86A980(v107, (uint64_t)"[CA] is low light: ", 19);
      v8 = (_QWORD *)std::ostream::operator<<();
      sub_20E86A980(v8, (uint64_t)" regular_count: ", 16);
      v9 = (_QWORD *)std::ostream::operator<<();
      sub_20E86A980(v9, (uint64_t)" smoothed indicator: ", 21);
      std::ostream::operator<<();
      if ((v115 & 0x10) != 0)
      {
        v12 = v114;
        if (v114 < v111)
        {
          v114 = v111;
          v12 = v111;
        }
        v13 = v110;
        v10 = v12 - (_QWORD)v110;
        if (v12 - (unint64_t)v110 > 0x7FFFFFFFFFFFFFF7)
          goto LABEL_70;
      }
      else
      {
        if ((v115 & 8) == 0)
        {
          v10 = 0;
          HIBYTE(v105) = 0;
          v11 = __dst;
          goto LABEL_25;
        }
        v13 = v108;
        v10 = v109 - (_QWORD)v108;
        if ((unint64_t)(v109 - (_QWORD)v108) > 0x7FFFFFFFFFFFFFF7)
LABEL_70:
          sub_20E860B7C();
      }
      if (v10 >= 0x17)
      {
        v14 = (v10 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v10 | 7) != 0x17)
          v14 = v10 | 7;
        v15 = v14 + 1;
        v11 = (void **)operator new(v14 + 1);
        __dst[1] = (void *)v10;
        v105 = v15 | 0x8000000000000000;
        __dst[0] = v11;
      }
      else
      {
        HIBYTE(v105) = v10;
        v11 = __dst;
        if (!v10)
        {
LABEL_25:
          *((_BYTE *)v11 + v10) = 0;
          v97[0] = &v117;
          v97[1] = std::chrono::steady_clock::now().__d_.__rep_;
          v97[2] = std::chrono::system_clock::now().__d_.__rep_;
          v98 = 2;
          v99 = "unknown file";
          v100 = 105;
          v102 = 0;
          v103 = 0;
          v101 = "unknown function";
          if (v105 >= 0)
            v16 = (const char *)__dst;
          else
            v16 = (const char *)__dst[0];
          v17 = *(_QWORD *)v97[0];
          v18 = *(_QWORD *)v97[0] + 16;
          if (*(char *)(*(_QWORD *)v97[0] + 39) < 0)
          {
            v20 = *(const char **)(v17 + 16);
            v19 = *(_QWORD *)(v17 + 24);
            v22 = atomic_load((unsigned __int8 *)&qword_254A4A510);
            if ((v22 & 1) != 0)
              goto LABEL_32;
          }
          else
          {
            v19 = *(unsigned __int8 *)(*(_QWORD *)v97[0] + 39);
            v20 = (const char *)(*(_QWORD *)v97[0] + 16);
            v21 = atomic_load((unsigned __int8 *)&qword_254A4A510);
            if ((v21 & 1) != 0)
              goto LABEL_32;
          }
          if (__cxa_guard_acquire(&qword_254A4A510))
          {
            sub_20E9E46F8((uint64_t)v124);
            sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)v124);
            if ((_BYTE)v125 && (v124[23] & 0x80000000) != 0)
              operator delete(*(void **)v124);
            __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
            __cxa_guard_release(&qword_254A4A510);
          }
LABEL_32:
          if (byte_254A4A4F8[23] >= 0)
            v23 = byte_254A4A4F8;
          else
            v23 = *(const char **)byte_254A4A4F8;
          if (byte_254A4A4F8[23] >= 0)
            v24 = byte_254A4A4F8[23];
          else
            v24 = *(_QWORD *)&byte_254A4A4F8[8];
          *(_QWORD *)v124 = os_log_create(v23, v20);
          v25 = &v124[8];
          if (v24 > 0x7FFFFFFFFFFFFFF7)
            sub_20E860B7C();
          if (v24 >= 0x17)
          {
            v96 = v20;
            v26 = v17;
            v27 = v6;
            v28 = v16;
            v29 = v5;
            v30 = v18;
            v31 = (v24 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v24 | 7) != 0x17)
              v31 = v24 | 7;
            v32 = v31 + 1;
            v25 = operator new(v31 + 1);
            *(_QWORD *)&v124[16] = v24;
            *(_QWORD *)&v125 = v32 | 0x8000000000000000;
            *(_QWORD *)&v124[8] = v25;
            v18 = v30;
            v5 = v29;
            v16 = v28;
            v6 = v27;
            v17 = v26;
            v20 = v96;
          }
          else
          {
            BYTE7(v125) = v24;
            if (!v24)
            {
LABEL_46:
              v25[v24] = 0;
              BYTE8(v125) = 1;
              v33 = v126;
              if (v19 > 0x7FFFFFFFFFFFFFF7)
                sub_20E860B7C();
              if (v19 >= 0x17)
              {
                v35 = (v19 & 0xFFFFFFFFFFFFFFF8) + 8;
                if ((v19 | 7) != 0x17)
                  v35 = v19 | 7;
                v36 = v35 + 1;
                v33 = (void **)operator new(v35 + 1);
                v126[1] = (void *)v19;
                v127 = v36 | 0x8000000000000000;
                v126[0] = v33;
              }
              else
              {
                HIBYTE(v127) = v19;
                if (!v19)
                {
                  LOBYTE(v126[0]) = 0;
                  v128 = 1;
                  v34 = *(NSObject **)v124;
                  if ((SHIBYTE(v127) & 0x80000000) == 0)
                    goto LABEL_50;
                  goto LABEL_56;
                }
              }
              memmove(v33, v20, v19);
              *((_BYTE *)v33 + v19) = 0;
              v128 = 1;
              v34 = *(NSObject **)v124;
              if ((SHIBYTE(v127) & 0x80000000) == 0)
              {
LABEL_50:
                if (!BYTE8(v125))
                  goto LABEL_59;
                goto LABEL_57;
              }
LABEL_56:
              operator delete(v126[0]);
              if (!BYTE8(v125))
                goto LABEL_59;
LABEL_57:
              if (SBYTE7(v125) < 0)
                operator delete(*(void **)&v124[8]);
LABEL_59:
              if (*(_QWORD *)v124)
                os_release(*(void **)v124);
              if (!v6 || !*(_QWORD *)(v6 + 24))
              {
                os_log_type_enabled(v34, OS_LOG_TYPE_DEBUG);
                *(_DWORD *)v124 = 136315138;
                *(_QWORD *)&v124[4] = v16;
                v43 = (void *)_os_log_send_and_compose_impl();
                if (v43)
                  free(v43);
                goto LABEL_135;
              }
              v37 = _os_log_pack_size();
              v38 = (std::__shared_weak_count_vtbl *)operator new(v37, (std::align_val_t)8uLL);
              v39 = (std::__shared_weak_count *)operator new();
              v39->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
              v39->__shared_owners_ = 0;
              v39->__shared_weak_owners_ = 0;
              v39[1].__vftable = v38;
              *(_QWORD *)&v118 = v38;
              *((_QWORD *)&v118 + 1) = v38;
              v120 = 0;
              v121 = 0;
              v119 = v39;
              v40 = strlen(v16);
              if (v40 > 0x7FFFFFFFFFFFFFF7)
                sub_20E860B7C();
              v41 = v40;
              if (v40 >= 0x17)
              {
                v44 = (v40 & 0xFFFFFFFFFFFFFFF8) + 8;
                if ((v40 | 7) != 0x17)
                  v44 = v40 | 7;
                v45 = v44 + 1;
                v42 = operator new(v44 + 1);
                *(_QWORD *)&v123 = v41;
                *((_QWORD *)&v123 + 1) = v45 | 0x8000000000000000;
                v122 = v42;
              }
              else
              {
                HIBYTE(v123) = v40;
                v42 = &v122;
                if (!v40)
                {
LABEL_75:
                  *((_BYTE *)v42 + v41) = 0;
                  v46 = v122;
                  v129[0] = v123;
                  *(_QWORD *)((char *)v129 + 7) = *(_QWORD *)((char *)&v123 + 7);
                  v47 = HIBYTE(v123);
                  v48 = operator new(0x38uLL);
                  v48[1] = 0;
                  v48[2] = 0;
                  v48[3] = off_24C9ABC20;
                  *v48 = &off_24C9ABBD0;
                  v49 = v129[0];
                  v48[4] = v46;
                  v48[5] = v49;
                  *(_QWORD *)((char *)v48 + 47) = *(_QWORD *)((char *)v129 + 7);
                  *((_BYTE *)v48 + 55) = v47;
                  v129[0] = 0;
                  *(_QWORD *)((char *)v129 + 7) = 0;
                  v50 = v121;
                  v120 = (char *)(v48 + 3);
                  v121 = (std::__shared_weak_count *)v48;
                  if (v50)
                  {
                    p_shared_owners = (unint64_t *)&v50->__shared_owners_;
                    do
                      v52 = __ldaxr(p_shared_owners);
                    while (__stlxr(v52 - 1, p_shared_owners));
                    if (!v52)
                    {
                      ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
                      std::__shared_weak_count::__release_weak(v50);
                    }
                  }
                  *(_OWORD *)v124 = v118;
                  v53 = v120;
                  *(_QWORD *)&v124[16] = v119;
                  if (v119)
                  {
                    v54 = (unint64_t *)&v119->__shared_owners_;
                    do
                      v55 = __ldxr(v54);
                    while (__stxr(v55 + 1, v54));
                  }
                  v56 = v121;
                  *(_QWORD *)&v125 = v53;
                  *((_QWORD *)&v125 + 1) = v121;
                  if (v121)
                  {
                    v57 = (unint64_t *)&v121->__shared_owners_;
                    do
                      v58 = __ldxr(v57);
                    while (__stxr(v58 + 1, v57));
                    v126[0] = v53;
                    do
                      v59 = __ldaxr(v57);
                    while (__stlxr(v59 - 1, v57));
                    if (!v59)
                    {
                      ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
                      std::__shared_weak_count::__release_weak(v56);
                    }
                  }
                  else
                  {
                    v126[0] = v53;
                  }
                  v60 = v119;
                  if (v119)
                  {
                    v61 = (unint64_t *)&v119->__shared_owners_;
                    do
                      v62 = __ldaxr(v61);
                    while (__stlxr(v62 - 1, v61));
                    if (!v62)
                    {
                      ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
                      std::__shared_weak_count::__release_weak(v60);
                    }
                  }
                  v63 = *(_QWORD *)v124;
                  if (*((char *)v126[0] + 31) >= 0)
                    v64 = (char *)v126[0] + 8;
                  else
                    v64 = (char *)*((_QWORD *)v126[0] + 1);
                  v65 = _os_log_pack_fill();
                  *(_DWORD *)v65 = 136315138;
                  *(_QWORD *)(v65 + 4) = v64;
                  v66 = operator new();
                  v67 = *(unsigned __int8 *)(v17 + 39);
                  v68 = *(_QWORD *)(v17 + 16);
                  v69 = *(_QWORD *)(v17 + 24);
                  v70 = v125;
                  *(_OWORD *)(v66 + 8) = *(_OWORD *)&v124[8];
                  if ((v67 & 0x80u) != 0)
                    v67 = v69;
                  else
                    v68 = v18;
                  *(_QWORD *)v66 = v63;
                  *(_QWORD *)&v124[8] = 0;
                  *(_QWORD *)&v124[16] = 0;
                  *(_OWORD *)(v66 + 24) = v70;
                  v125 = 0uLL;
                  *(_QWORD *)(v66 + 40) = v68;
                  *(_QWORD *)(v66 + 48) = v67;
                  *(_BYTE *)(v66 + 56) = 2;
                  v122 = 0;
                  *(_QWORD *)&v118 = v66;
                  (*(void (**)(_QWORD, __int128 *))(**(_QWORD **)(v6 + 24) + 40))(*(_QWORD *)(v6 + 24), &v118);
                  v71 = v118;
                  *(_QWORD *)&v118 = 0;
                  if (v71)
                  {
                    v72 = *(std::__shared_weak_count **)(v71 + 32);
                    if (v72)
                    {
                      v73 = (unint64_t *)&v72->__shared_owners_;
                      do
                        v74 = __ldaxr(v73);
                      while (__stlxr(v74 - 1, v73));
                      if (!v74)
                      {
                        ((void (*)(std::__shared_weak_count *))v72->__on_zero_shared)(v72);
                        std::__shared_weak_count::__release_weak(v72);
                      }
                    }
                    v75 = *(std::__shared_weak_count **)(v71 + 16);
                    if (v75)
                    {
                      v76 = (unint64_t *)&v75->__shared_owners_;
                      do
                        v77 = __ldaxr(v76);
                      while (__stlxr(v77 - 1, v76));
                      if (!v77)
                      {
                        ((void (*)(std::__shared_weak_count *))v75->__on_zero_shared)(v75);
                        std::__shared_weak_count::__release_weak(v75);
                      }
                    }
                    MEMORY[0x212BC6398](v71, 0x10F0C40B62ED6C6);
                    v78 = v122;
                    v122 = 0;
                    if (v78)
                    {
                      v79 = (std::__shared_weak_count *)v78[4];
                      if (v79)
                      {
                        v80 = (unint64_t *)&v79->__shared_owners_;
                        do
                          v81 = __ldaxr(v80);
                        while (__stlxr(v81 - 1, v80));
                        if (!v81)
                        {
                          ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
                          std::__shared_weak_count::__release_weak(v79);
                        }
                      }
                      v82 = (std::__shared_weak_count *)v78[2];
                      if (v82)
                      {
                        v83 = (unint64_t *)&v82->__shared_owners_;
                        do
                          v84 = __ldaxr(v83);
                        while (__stlxr(v84 - 1, v83));
                        if (!v84)
                        {
                          ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
                          std::__shared_weak_count::__release_weak(v82);
                        }
                      }
                      MEMORY[0x212BC6398](v78, 0x10F0C40B62ED6C6);
                    }
                  }
                  v85 = (std::__shared_weak_count *)*((_QWORD *)&v125 + 1);
                  if (*((_QWORD *)&v125 + 1))
                  {
                    v86 = (unint64_t *)(*((_QWORD *)&v125 + 1) + 8);
                    do
                      v87 = __ldaxr(v86);
                    while (__stlxr(v87 - 1, v86));
                    if (!v87)
                    {
                      ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
                      std::__shared_weak_count::__release_weak(v85);
                    }
                  }
                  v88 = *(std::__shared_weak_count **)&v124[16];
                  if (*(_QWORD *)&v124[16])
                  {
                    v89 = (unint64_t *)(*(_QWORD *)&v124[16] + 8);
                    do
                      v90 = __ldaxr(v89);
                    while (__stlxr(v90 - 1, v89));
                    if (!v90)
                    {
                      ((void (*)(std::__shared_weak_count *))v88->__on_zero_shared)(v88);
                      std::__shared_weak_count::__release_weak(v88);
                    }
                  }
LABEL_135:
                  if (v5)
                  {
                    v91 = (const char *)__dst;
                    if (v105 < 0)
                      v91 = (const char *)__dst[0];
                    sub_20E8C003C((uint64_t)v97, "%s", v91);
                    sub_20E863570((uint64_t)v97);
                  }
                  sub_20E863570((uint64_t)v97);
                  v92 = v103;
                  if (v103)
                  {
                    v93 = (unint64_t *)&v103->__shared_owners_;
                    do
                      v94 = __ldaxr(v93);
                    while (__stlxr(v94 - 1, v93));
                    if (!v94)
                    {
                      ((void (*)(std::__shared_weak_count *))v92->__on_zero_shared)(v92);
                      std::__shared_weak_count::__release_weak(v92);
                    }
                  }
                  if (SHIBYTE(v105) < 0)
                    operator delete(__dst[0]);
                  v106[0] = *(void **)MEMORY[0x24BEDB7F0];
                  v95 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
                  *(void **)((char *)v106 + *((_QWORD *)v106[0] - 3)) = *(void **)(MEMORY[0x24BEDB7F0] + 64);
                  v107[0] = v95;
                  v107[1] = MEMORY[0x24BEDB848] + 16;
                  if (v113 < 0)
                    operator delete(__p);
                  std::streambuf::~streambuf();
                  std::iostream::~basic_iostream();
                  return MEMORY[0x212BC6290](&v116);
                }
              }
              memcpy(v42, v16, v41);
              goto LABEL_75;
            }
          }
          memmove(v25, v23, v24);
          goto LABEL_46;
        }
      }
      memmove(v11, v13, v10);
      goto LABEL_25;
    }
  }
  return result;
}

void sub_20EFF4E7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  uint64_t v33;

  if (*(_BYTE *)(v33 - 168) && *(char *)(v33 - 169) < 0)
    operator delete(*(void **)(v33 - 192));
  __cxa_guard_abort(&qword_254A4A510);
  sub_20E863714((uint64_t)&a13);
  if (a27 < 0)
  {
    operator delete(__p);
    sub_20E863784((uint64_t)&a28);
    _Unwind_Resume(a1);
  }
  sub_20E863784((uint64_t)&a28);
  _Unwind_Resume(a1);
}

uint64_t *sub_20EFF502C@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *__p;
  __int128 v28;

  __p = operator new(0x20uLL);
  v28 = xmmword_2102DB480;
  strcpy((char *)__p, "CameraAllocator parameters");
  sub_20E8B30B4(a2, (__int128 *)&__p, 180, 160);
  if (SHIBYTE(v28) < 0)
    operator delete(__p);
  __p = (void *)nullsub_1(a2);
  v4 = sub_20EA9DB90((double *)a1);
  sub_20E8B2F9C((uint64_t *)&__p, "CameraAllocatorConfig.ratio_of_mono_camera_features_nominal", v4, "The ratio of total detected features that will come from the mono cameras.");
  __p = (void *)nullsub_1(a2);
  v5 = sub_20EA9DB90((double *)(a1 + 8));
  sub_20E8B2F9C((uint64_t *)&__p, "CameraAllocatorConfig.ratio_of_mono_camera_features_transition_state", v5, "The ratio of total detected features that will come from the mono cameras during transition");
  __p = (void *)nullsub_1(a2);
  v6 = sub_20EA9DB90((double *)(a1 + 16));
  sub_20E8B2F9C((uint64_t *)&__p, "CameraAllocatorConfig.ratio_of_mono_camera_features_low_texture", v6, "The ratio of total detected features that will come from the mono cameras in low texture scenarios.");
  __p = (void *)nullsub_1(a2);
  v7 = sub_20EA9DB90((double *)(a1 + 24));
  sub_20E8B2F9C((uint64_t *)&__p, "CameraAllocatorConfig.minimum_inlier_ratio_for_mono_stream_cameras_for_nominal_performance", v7, "The ratio of secondary stream mono inliers vs mono correspondences to be considered nominal performance in secondary cameras.");
  __p = (void *)nullsub_1(a2);
  v8 = sub_20EA9DB90((double *)(a1 + 32));
  sub_20E8B2F9C((uint64_t *)&__p, "CameraAllocatorConfig.minimum_inlier_ratio_for_multi_stream_cameras_for_nominal_performance", v8, "The ratio of stereo camera inliers vs stereo camera correspondences to be considered nominal performance in stereo cameras.");
  __p = (void *)nullsub_1(a2);
  v9 = sub_20EA9DB90((double *)(a1 + 40));
  sub_20E8B2F9C((uint64_t *)&__p, "CameraAllocatorConfig.minimum_stereo_match_ratio_for_multi_stream_cameras_for_nominal_texture", v9, "Minimum ratio of stereo matches to stereo obervations to be considered nominal texture.");
  __p = (void *)nullsub_1(a2);
  v10 = sub_20EA9DCF0((unsigned int *)(a1 + 80));
  __p = (void *)nullsub_1(a2);
  v11 = sub_20EA9DCF0((unsigned int *)(a1 + 84));
  __p = (void *)nullsub_1(a2);
  v12 = sub_20EA9DB90((double *)(a1 + 48));
  __p = (void *)nullsub_1(a2);
  v13 = sub_20EA9DB90((double *)(a1 + 56));
  __p = (void *)nullsub_1(a2);
  v14 = sub_20EAA14D8((_BYTE *)(a1 + 100));
  sub_20E8B2F9C((uint64_t *)&__p, "CameraAllocatorConfig.enable_low_inlier_mode_detection", v14, "enable_low_inlier_mode_detection.");
  __p = (void *)nullsub_1(a2);
  v15 = sub_20EA9DCF0((unsigned int *)(a1 + 88));
  sub_20E8B2F9C((uint64_t *)&__p, "CameraAllocatorConfig.min_inliers_to_trigger_re_allocation", v15, "Number of inliers required to trigger camera usage re-allocation.");
  __p = (void *)nullsub_1(a2);
  v16 = sub_20EAA14D8((_BYTE *)(a1 + 102));
  sub_20E8B2F9C((uint64_t *)&__p, "CameraAllocatorConfig.same_multi_streams_camera_usage_in_stereo_dominant_mode", v16, "Flag to make camera usage within a multi-stremas camera the same in stereo dominant mode.");
  __p = (void *)nullsub_1(a2);
  v17 = sub_20EAA14D8((_BYTE *)(a1 + 101));
  sub_20E8B2F9C((uint64_t *)&__p, "CameraAllocatorConfig.enable_low_inlier_mode_only_in_low_light", v17, "Optionally to enable low liner mode only in light.");
  __p = (void *)nullsub_1(a2);
  v18 = sub_20EA9DCF0((unsigned int *)(a1 + 92));
  sub_20E8B2F9C((uint64_t *)&__p, "CameraAllocatorConfig.num_regular_lighting_counts_to_exit_low_light_condition", v18, "Number of regular lighting counts to exit low light condition.");
  __p = (void *)nullsub_1(a2);
  v19 = sub_20EA9DB90((double *)(a1 + 64));
  sub_20E8B2F9C((uint64_t *)&__p, "CameraAllocatorConfig.active_camera_ratio", v19, "Active camera ratio for camera allocation.");
  __p = (void *)nullsub_1(a2);
  v20 = sub_20EA9DB90((double *)(a1 + 72));
  sub_20E8B2F9C((uint64_t *)&__p, "CameraAllocatorConfig.minimum_camera_stream_usage", v20, "Minimum camera stream usage.");
  __p = (void *)nullsub_1(a2);
  v21 = sub_20EA9DCF0((unsigned int *)(a1 + 96));
  sub_20E8B2F9C((uint64_t *)&__p, "CameraAllocatorConfig.min_target_budget_points_allowed", v21, "Minimum target points allowed.");
  __p = (void *)nullsub_1(a2);
  v22 = sub_20EAA14D8((_BYTE *)(a1 + 103));
  sub_20E8B2F9C((uint64_t *)&__p, "CameraAllocatorConfig.enable_visual_slam_camera_allocation", v22, "Flag to indicate we should use visual SLAM camera allocation strategy.");
  __p = (void *)nullsub_1(a2);
  v23 = sub_20EA9DCF0((unsigned int *)(a1 + 104));
  sub_20E8B2F9C((uint64_t *)&__p, "CameraAllocatorConfig.max_num_2d_3d_pnp_inlier_to_increase_mono_usage", v23, "Maximum number of 2D-3D PnP inliers to increase mono usage. Above this threshold we don't increase features on mono cameras.");
  __p = (void *)nullsub_1(a2);
  v24 = sub_20EA9DB90((double *)(a1 + 112));
  sub_20E8B2F9C((uint64_t *)&__p, "CameraAllocatorConfig.visual_slam_primary_stereo_low_usage_ratio", v24, "VisualSLAM low usage ratio for the primary stereo camera streams.");
  __p = (void *)nullsub_1(a2);
  v25 = sub_20EA9DB90((double *)(a1 + 120));
  return sub_20E8B2F9C((uint64_t *)&__p, "CameraAllocatorConfig.visual_slam_primary_stereo_low_usage_ratio_in_low_light", v25, "VisualSLAM low usage ratio for the primary stereo camera streams in low light.");
}

void sub_20EFF54CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;

  sub_20E869298(v15);
  _Unwind_Resume(a1);
}

uint64_t sub_20EFF55A8(uint64_t a1, char a2, unsigned int a3, double a4, double a5, double a6, double a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unsigned int v18;
  unsigned int v19;
  int v20;
  unsigned int v21;
  _BYTE v23[76];

  *(_OWORD *)&v23[4] = *(_OWORD *)a9;
  *(_OWORD *)&v23[20] = *(_OWORD *)(a9 + 16);
  *(_OWORD *)&v23[36] = *(_OWORD *)(a9 + 32);
  *(_OWORD *)&v23[52] = *(_OWORD *)(a9 + 48);
  *(_QWORD *)&v23[68] = *(_QWORD *)(a9 + 64);
  v9 = *(_QWORD *)(a1 + 56) + 120 * *(_QWORD *)(a1 + 88);
  *(double *)v9 = a4;
  *(_BYTE *)(v9 + 8) = a2;
  *(double *)(v9 + 16) = a5;
  *(double *)(v9 + 24) = a6;
  *(double *)(v9 + 32) = a7;
  *(_DWORD *)(v9 + 40) = a3;
  *(_OWORD *)(v9 + 60) = *(_OWORD *)&v23[16];
  *(_OWORD *)(v9 + 76) = *(_OWORD *)&v23[32];
  *(_OWORD *)(v9 + 92) = *(_OWORD *)&v23[48];
  *(_OWORD *)(v9 + 104) = *(_OWORD *)&v23[60];
  *(_OWORD *)(v9 + 44) = *(_OWORD *)v23;
  v10 = *(_QWORD *)(a1 + 56);
  v11 = 0xEEEEEEEEEEEEEEEFLL * ((*(_QWORD *)(a1 + 64) - v10) >> 3);
  v12 = *(_QWORD *)(a1 + 96);
  v13 = *(_QWORD *)(a1 + 88) + 1;
  if (v13 >= v11)
    v14 = 0xEEEEEEEEEEEEEEEFLL * ((*(_QWORD *)(a1 + 64) - v10) >> 3);
  else
    v14 = 0;
  *(_QWORD *)(a1 + 88) = v13 - v14;
  if (v12 == v11)
  {
    v15 = *(_QWORD *)(a1 + 80) + 1;
    if (v15 >= v11)
      v16 = v11;
    else
      v16 = 0;
    *(_QWORD *)(a1 + 80) = v15 - v16;
    v17 = v11;
    if ((a2 & 1) != 0)
    {
LABEL_12:
      v18 = *(_DWORD *)(a1 + 104) + 1;
      *(_DWORD *)(a1 + 104) = v18;
      if (*(_DWORD *)(a1 + 8) > a3)
        goto LABEL_13;
      goto LABEL_16;
    }
  }
  else
  {
    v17 = v12 + 1;
    *(_QWORD *)(a1 + 96) = v17;
    if ((a2 & 1) != 0)
      goto LABEL_12;
  }
  if (*(double *)(a1 + 24) > a6)
    goto LABEL_12;
  v18 = 0;
  *(_DWORD *)(a1 + 104) = 0;
  if (*(_DWORD *)(a1 + 8) > a3)
  {
LABEL_13:
    v19 = *(_DWORD *)(a1 + 108) + 1;
    *(_DWORD *)(a1 + 108) = v19;
    if (!v17)
      goto LABEL_24;
    goto LABEL_17;
  }
LABEL_16:
  v19 = 0;
  *(_DWORD *)(a1 + 108) = 0;
  if (!v17)
  {
LABEL_24:
    v21 = 0;
    *(_DWORD *)(a1 + 112) = 0;
    v20 = 1;
    return (v21 >= *(_DWORD *)(a1 + 40)) & ~v20;
  }
LABEL_17:
  if (v17 == v18 || v18 >= *(_DWORD *)(a1 + 32) || v19 >= *(_DWORD *)(a1 + 36))
    goto LABEL_24;
  if (v13 != v14)
    v11 = v13 - v14;
  if (!*(_DWORD *)(v10 + 120 * v11 - 80))
    goto LABEL_24;
  v20 = 0;
  v21 = *(_DWORD *)(a1 + 112) + 1;
  *(_DWORD *)(a1 + 112) = v21;
  return (v21 >= *(_DWORD *)(a1 + 40)) & ~v20;
}

void sub_20EFF577C()
{
  sub_20E860B90("vector");
}

uint64_t *sub_20EFF5790@<X0>(unsigned int *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  void *__p;
  __int128 v8;

  __p = operator new(0x20uLL);
  v8 = xmmword_2102DBF70;
  strcpy((char *)__p, "CameraFeaturePruner parameters");
  sub_20E8B30B4(a2, (__int128 *)&__p, 180, 160);
  if (SHIBYTE(v8) < 0)
    operator delete(__p);
  __p = (void *)nullsub_1(a2);
  v4 = sub_20EA9DCF0(a1);
  sub_20E8B2F9C((uint64_t *)&__p, "CameraFeaturePruner::Config.reduced_camera_feature_limit", v4, "Limit for the number of camera features to track for the mono cameras in nominal cases.");
  __p = (void *)nullsub_1(a2);
  v5 = sub_20EA9DCF0(a1 + 1);
  return sub_20E8B2F9C((uint64_t *)&__p, "CameraFeaturePruner::Config.enhanced_camera_feature_limit", v5, "Limit for the number of camera features to track for the mono cameras when the stereo camera has low feature counts.");
}

void sub_20EFF5870(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;

  sub_20E869298(v15);
  _Unwind_Resume(a1);
}

uint64_t *sub_20EFF58AC@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  void *__p;
  __int128 v8;

  __p = operator new(0x28uLL);
  v8 = xmmword_2102DC910;
  strcpy((char *)__p, "ConfinedSpaceMonitorConfig parameters");
  sub_20E8B30B4(a2, (__int128 *)&__p, 80, 40);
  if (SHIBYTE(v8) < 0)
    operator delete(__p);
  __p = (void *)nullsub_1(a2);
  v4 = sub_20EA9DB90((double *)(a1 + 8));
  sub_20E8B2F9C((uint64_t *)&__p, "ConfinedSpaceMonitorConfig.max_displacement_m", v4, "Maximum distance from origin for a confined space in meters.");
  __p = (void *)nullsub_1(a2);
  v5 = sub_20EAA14D8((_BYTE *)a1);
  return sub_20E8B2F9C((uint64_t *)&__p, "ConfinedSpaceMonitorConfig.enabled", v5, "A flag indicating wether the monitor is enabled.");
}

void sub_20EFF5994(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;

  sub_20E869298(v15);
  _Unwind_Resume(a1);
}

uint64_t sub_20EFF59D0(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  __int128 v11;
  __int128 v12;
  _QWORD *v18;
  _WORD *v19;
  std::__shared_weak_count *v20;
  unint64_t *p_shared_owners;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;

  v6 = a2[1];
  *(_QWORD *)a1 = *a2;
  *(_QWORD *)(a1 + 8) = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  *(_BYTE *)(a1 + 16) = 0;
  *(_BYTE *)(a1 + 32) = 0;
  v9 = *a2;
  *(_WORD *)(a1 + 40) = *(_WORD *)*a2;
  v10 = (_BYTE *)(a1 + 48);
  if (*(char *)(v9 + 31) < 0)
  {
    sub_20E860C04(v10, *(void **)(v9 + 8), *(_QWORD *)(v9 + 16));
  }
  else
  {
    v11 = *(_OWORD *)(v9 + 8);
    *(_QWORD *)(a1 + 64) = *(_QWORD *)(v9 + 24);
    *(_OWORD *)v10 = v11;
  }
  v12 = *(_OWORD *)(v9 + 32);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(v9 + 48);
  *(_OWORD *)(a1 + 72) = v12;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_BYTE *)(a1 + 160) = 0;
  __asm { FMOV            V0.2D, #-1.0 }
  *(_OWORD *)(a1 + 168) = _Q0;
  *(_QWORD *)(a1 + 184) = 0xBFF0000000000000;
  *(_BYTE *)(a1 + 192) = 0;
  *(_OWORD *)(a1 + 200) = _Q0;
  *(_QWORD *)(a1 + 216) = 0xBFF0000000000000;
  v18 = (_QWORD *)operator new();
  v19 = (_WORD *)*a2;
  v20 = (std::__shared_weak_count *)a2[1];
  if (v20)
  {
    p_shared_owners = (unint64_t *)&v20->__shared_owners_;
    do
      v22 = __ldxr(p_shared_owners);
    while (__stxr(v22 + 1, p_shared_owners));
    *v18 = v19;
    v18[1] = v20;
    do
      v23 = __ldxr(p_shared_owners);
    while (__stxr(v23 + 1, p_shared_owners));
    v18[2] = a3;
    *(_QWORD *)(a1 + 224) = v18;
    do
      v24 = __ldaxr(p_shared_owners);
    while (__stlxr(v24 - 1, p_shared_owners));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  else
  {
    *v18 = v19;
    v18[1] = 0;
    v18[2] = a3;
    *(_QWORD *)(a1 + 224) = v18;
  }
  *(_WORD *)(a1 + 232) = 0;
  return a1;
}

void sub_20EFF5B38(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20E86665C(v1);
  _Unwind_Resume(a1);
}

void sub_20EFF5B4C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  sub_20EFF5B68(v2);
  sub_20E86665C(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20EFF5B68(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    operator delete(v2);
  }
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

void sub_20EFF5BB8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, char a7)
{
  unint64_t *v7;
  double v11;
  unsigned int v12;
  double v13;
  int64x2_t v14;
  float64x2_t v16;
  float64x2_t v17;
  int8x16_t v18;
  float64x2_t v19;
  float64x2_t v27;
  float64x2_t v28;
  float64x2_t v29;
  float64x2_t v30;
  float64x2_t v31;
  __int128 v32;
  void **v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  char *v37;
  double v38;
  char *v39;
  uint64_t v40;
  float64x2_t v44;
  unint64_t v49;
  char *v50;
  char *v51;
  char *v52;
  char *v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  char *v57;
  char *v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  unint64_t v65;
  unint64_t v66;
  char *v67;
  char *v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  char *v75;
  unint64_t v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  unint64_t v82;
  unint64_t v83;
  unint64_t v84;
  unint64_t v85;
  unint64_t v86;
  uint64_t v87;
  _QWORD *v88;
  double v89;
  _OWORD *v90;
  unint64_t v91;
  unint64_t v92;
  uint64_t v93;
  float64x2_t v98;
  float64x2_t *v100;
  unint64_t v103;
  unint64_t v104;
  uint64_t v105;
  _QWORD *v106;
  unint64_t v107;
  uint64_t *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  std::__shared_weak_count *v113;
  unint64_t *p_shared_owners;
  unint64_t v115;
  double v116;
  unint64_t *v117;
  double v118;
  double v119;
  double v120;
  unsigned int v121;
  unint64_t *v122;
  unint64_t v123;
  std::__shared_weak_count *v124;
  unint64_t *v125;
  unint64_t v126;
  unint64_t *v127;
  unint64_t v128;
  std::__shared_weak_count *v129;
  unint64_t *v130;
  unint64_t v131;
  float64x2_t v132;
  float64x2_t v133;
  float64x2_t v134;
  float64_t v135;
  float64x2_t v136;
  float64x2_t v137;
  __int128 v138;
  float64x2_t v139;
  uint64_t v140;
  std::__shared_weak_count *v141;
  double v142;
  char v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  std::__shared_weak_count *v148;
  uint64_t v149;
  _BYTE v150[24];
  _BYTE *v151;
  uint64_t v152;

  v152 = *MEMORY[0x24BDAC8D0];
  v146 = a2;
  v144 = a4;
  v145 = a3;
  v143 = a7;
  v7 = *(unint64_t **)a1;
  if (!**(_BYTE **)a1)
    return;
  v11 = *(double *)(a5 + 32);
  v142 = v11;
  v12 = atomic_load(v7 + 16);
  if (*(_BYTE *)(a1 + 32))
  {
    if (*(_DWORD *)(a1 + 16) < v12)
    {
      *(_DWORD *)(a1 + 16) = v12;
      *(double *)(a1 + 24) = v11;
      *(_QWORD *)(a1 + 144) = 0;
      *(_QWORD *)(a1 + 152) = 0;
      *(_QWORD *)(a1 + 136) = 0;
      *(_QWORD *)(a1 + 96) = 0;
      *(_QWORD *)(a1 + 104) = 0;
    }
    if (*(_BYTE *)(a5 + 16))
    {
LABEL_6:
      v13 = *(double *)(a5 + 32);
      v17.f64[0] = *(float64_t *)(a5 + 64);
      v14 = *(int64x2_t *)(a5 + 48);
      _Q1 = *(float64x2_t *)(a5 + 72);
      *(_QWORD *)&v32 = *(_QWORD *)(a5 + 112);
      _Q2 = *(int64x2_t *)(a5 + 96);
      v16 = (float64x2_t)vzip1q_s64(v14, (int64x2_t)_Q1);
      v30 = (float64x2_t)vzip2q_s64(v14, (int64x2_t)_Q1);
      v17.f64[1] = *(float64_t *)(a5 + 88);
      v18 = vextq_s8((int8x16_t)v30, (int8x16_t)vdupq_laneq_s64(_Q2, 1), 8uLL);
      _Q1.f64[0] = *(float64_t *)(a5 + 208);
      v19 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v16, *(double *)(a5 + 192)), v30, *(float64x2_t *)(a5 + 192), 1), v17, _Q1.f64[0]);
      _D3 = *(_QWORD *)(a5 + 200);
      __asm { FMLA            D5, D3, V2.D[1] }
      _Q1.f64[0] = _D5 + *(double *)&v32 * _Q1.f64[0];
      v27 = vnegq_f64(v19);
      v28 = vnegq_f64(_Q1);
      v29 = (float64x2_t)*(unint64_t *)(a5 + 96);
      *(_QWORD *)&v30.f64[1] = v18.i64[0];
      v31 = (float64x2_t)v18.u64[1];
      v32 = (unint64_t)v32;
      v33 = (void **)(a1 + 112);
      v34 = *(_QWORD *)(a1 + 152);
      if (v34)
      {
        v35 = vextq_s8((int8x16_t)v16, (int8x16_t)v16, 8uLL).u64[0];
        v36 = *(_QWORD *)(a1 + 144);
        if (v36)
        {
          v37 = (char *)*v33;
        }
        else
        {
          v37 = *(char **)(a1 + 112);
          v36 = 0xF0F0F0F0F0F0F0F1 * ((uint64_t)(*(_QWORD *)(a1 + 120) - (_QWORD)v37) >> 3);
        }
        v39 = &v37[136 * v36];
        v40 = *((_QWORD *)v39 - 15);
        _D4 = *((_QWORD *)v39 - 7);
        _D6 = *((double *)v39 - 3);
        _Q7 = *(float64x2_t *)(v39 - 40);
        _Q1.f64[1] = *((float64_t *)v39 - 11);
        v44 = vmlsq_lane_f64(vmlsq_laneq_f64(vmulq_n_f64((float64x2_t)vzip1q_s64(*(int64x2_t *)(v39 - 136), *(int64x2_t *)(v39 - 104)), vnegq_f64(_Q7).f64[0]), (float64x2_t)vzip2q_s64(*(int64x2_t *)(v39 - 136), *(int64x2_t *)(v39 - 104)), _Q7, 1), _Q1, _D6, 0);
        _D2 = *((_QWORD *)v39 - 8);
        __asm
        {
          FMLS            D1, D2, V7.D[1]
          FMLS            D1, D4, V6.D[0]
        }
        _Q2.f64[0] = v16.f64[0];
        *(_QWORD *)&_Q2.f64[1] = v35;
        _Q0 = vaddq_f64(v27, vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(_Q2, v44.f64[0]), v30, v44, 1), v17, _Q1.f64[0]));
        *(_QWORD *)&_Q1.f64[0] = *(_OWORD *)&vaddq_f64(v28, vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v29, v44.f64[0]), v31, v44, 1), (float64x2_t)(unint64_t)v32, _Q1.f64[0]));
        _D3 = _Q0.f64[1];
        __asm { FMLA            D2, D3, V0.D[1] }
        v38 = sqrt(vmlad_n_f64(_Q2.f64[0], _Q1.f64[0], _Q1.f64[0]));
        *(double *)(a1 + 104) = *(double *)(a1 + 104) + v38;
      }
      else
      {
        v37 = (char *)*v33;
        v38 = 0.0;
      }
      if (v34 != 0xF0F0F0F0F0F0F0F1 * ((uint64_t)(*(_QWORD *)(a1 + 120) - (_QWORD)v37) >> 3)
        || (v49 = (2 * v34) | 1, v34 == v49))
      {
        v50 = v37;
        goto LABEL_34;
      }
      v132 = v31;
      v133 = v29;
      v134 = v27;
      v135 = v28.f64[0];
      v136 = v30;
      v137 = v16;
      v138 = (unint64_t)v32;
      v139 = v17;
      v147 = 0;
      v148 = 0;
      v149 = 0;
      if (v49 >= 0x1E1E1E1E1E1E1E2)
        sub_20E867F44();
      v51 = (char *)operator new(136 * v49);
      v50 = v51;
      v52 = &v51[136 * v49];
      HIDWORD(_Q1.f64[0]) = unk_210398794;
      v53 = v51;
      do
      {
        *((_OWORD *)v53 + 4) = xmmword_210398780;
        *((_OWORD *)v53 + 5) = unk_210398790;
        *((_OWORD *)v53 + 6) = xmmword_2103987A0;
        *((_OWORD *)v53 + 7) = unk_2103987B0;
        *(_OWORD *)v53 = xmmword_210398740;
        *((_OWORD *)v53 + 1) = *(_OWORD *)algn_210398750;
        *((_OWORD *)v53 + 2) = xmmword_210398760;
        *((_OWORD *)v53 + 3) = unk_210398770;
        *((_QWORD *)v53 + 16) = 0;
        v53 += 136;
      }
      while (v53 != v52);
      if (v34 >= v49)
        v54 = (2 * v34) | 1;
      else
        v54 = v34;
      v32 = v138;
      v17 = v139;
      v30 = v136;
      v16 = v137;
      v27 = v134;
      v28.f64[0] = v135;
      v31 = v132;
      v29 = v133;
      if (v34 <= v49)
      {
        if (v34)
        {
          v65 = *(_QWORD *)(a1 + 136);
          v66 = v34;
          v67 = v51;
          do
          {
            v68 = &v37[136 * (v65 % v34)];
            v69 = *(_OWORD *)v68;
            v70 = *((_OWORD *)v68 + 1);
            v71 = *((_OWORD *)v68 + 3);
            *((_OWORD *)v67 + 2) = *((_OWORD *)v68 + 2);
            *((_OWORD *)v67 + 3) = v71;
            *(_OWORD *)v67 = v69;
            *((_OWORD *)v67 + 1) = v70;
            v72 = *((_OWORD *)v68 + 4);
            v73 = *((_OWORD *)v68 + 5);
            v74 = *((_OWORD *)v68 + 7);
            *((_OWORD *)v67 + 6) = *((_OWORD *)v68 + 6);
            *((_OWORD *)v67 + 7) = v74;
            *((_OWORD *)v67 + 4) = v72;
            *((_OWORD *)v67 + 5) = v73;
            *((_QWORD *)v67 + 16) = *((_QWORD *)v68 + 16);
            ++v65;
            v67 += 136;
            --v66;
          }
          while (v66);
        }
        else if (!v37)
        {
LABEL_33:
          *(_QWORD *)(a1 + 112) = v50;
          *(_QWORD *)(a1 + 120) = v52;
          *(_QWORD *)(a1 + 128) = v52;
          *(_QWORD *)(a1 + 136) = 0;
          *(_QWORD *)(a1 + 144) = v54 % v49;
          *(_QWORD *)(a1 + 152) = v54;
LABEL_34:
          v28.f64[1] = 1.0;
          v77 = &v50[136 * *(_QWORD *)(a1 + 144)];
          *((float64x2_t *)v77 + 2) = v30;
          *((float64x2_t *)v77 + 3) = v31;
          *(float64x2_t *)v77 = v16;
          *((float64x2_t *)v77 + 1) = v29;
          *((float64x2_t *)v77 + 4) = v17;
          *((_OWORD *)v77 + 5) = v32;
          *((float64x2_t *)v77 + 6) = v27;
          *((float64x2_t *)v77 + 7) = v28;
          *((double *)v77 + 16) = v13;
          v78 = *(_QWORD *)(a1 + 112);
          v79 = *(_QWORD *)(a1 + 120);
          v80 = 0xF0F0F0F0F0F0F0F1 * ((v79 - v78) >> 3);
          v81 = *(_QWORD *)(a1 + 152);
          v82 = *(_QWORD *)(a1 + 144) + 1;
          if (v82 >= v80)
            v83 = 0xF0F0F0F0F0F0F0F1 * ((v79 - v78) >> 3);
          else
            v83 = 0;
          *(_QWORD *)(a1 + 144) = v82 - v83;
          if (v81 == v80)
          {
            v84 = *(_QWORD *)(a1 + 136) + 1;
            if (v84 >= v80)
              v85 = 0xF0F0F0F0F0F0F0F1 * ((v79 - v78) >> 3);
            else
              v85 = 0;
            *(_QWORD *)(a1 + 136) = v84 - v85;
            if (!v80)
            {
LABEL_49:
              if (v34)
              {
                LODWORD(_Q1.f64[0]) = *(_DWORD *)(a1 + 80);
                if (*(double *)(a1 + 104) >= *(double *)(a1 + 88) * (double)*(unint64_t *)&_Q1.f64[0])
                  *(double *)(a1 + 96) = v38 + *(double *)(a1 + 96);
              }
              goto LABEL_52;
            }
          }
          else
          {
            *(_QWORD *)(a1 + 152) = v81 + 1;
            if (v81 == -1)
              goto LABEL_49;
          }
          v86 = *(_QWORD *)(a1 + 136);
          do
          {
            v87 = v78 + 136 * v86;
            v89 = *(double *)(v87 + 128);
            v88 = (_QWORD *)(v87 + 128);
            LODWORD(_Q1.f64[0]) = *(_DWORD *)(a1 + 80);
            _Q1.f64[0] = v13 - (double)*(unint64_t *)&_Q1.f64[0];
            if (v89 >= _Q1.f64[0])
              break;
            v90 = (_OWORD *)(v78 + 136 * v86);
            v91 = 0xF0F0F0F0F0F0F0F1 * ((v79 - v78) >> 3);
            v92 = (v86 + 1) % v91;
            v93 = v78 + 136 * (v86 % v91);
            _Q0.f64[0] = *(float64_t *)(v93 + 16);
            _D3 = *(_QWORD *)(v93 + 80);
            _D5 = *(double *)(v93 + 112);
            _Q6 = *(float64x2_t *)(v93 + 96);
            _Q0.f64[1] = *(float64_t *)(v93 + 48);
            v98 = vmlsq_lane_f64(vmlsq_laneq_f64(vmulq_n_f64((float64x2_t)vzip1q_s64(*(int64x2_t *)v93, *(int64x2_t *)(v93 + 32)), vnegq_f64(_Q6).f64[0]), (float64x2_t)vzip2q_s64(*(int64x2_t *)v93, *(int64x2_t *)(v93 + 32)), _Q6, 1), _Q0, _D5, 0);
            _D1 = *(_QWORD *)(v93 + 72);
            __asm
            {
              FMLS            D0, D1, V6.D[1]
              FMLS            D0, D3, V5.D[0]
            }
            v100 = (float64x2_t *)(v78 + 136 * v92);
            _Q2 = vaddq_f64(v100[6], vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*v100, v98.f64[0]), v100[2], v98, 1), v100[4], _Q0.f64[0]));
            *(_QWORD *)&_Q0.f64[0] = *(_OWORD *)&vaddq_f64(v100[7], vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v100[1], v98.f64[0]), v100[3], v98, 1), v100[5], _Q0.f64[0]));
            _D3 = _Q2.f64[1];
            __asm { FMLA            D1, D3, V2.D[1] }
            *(double *)(a1 + 104) = *(double *)(a1 + 104) - sqrt(vmlad_n_f64(_Q1.f64[0], _Q0.f64[0], _Q0.f64[0]));
            v90[4] = xmmword_210398780;
            v90[5] = unk_210398790;
            v90[6] = xmmword_2103987A0;
            v90[7] = unk_2103987B0;
            *v90 = xmmword_210398740;
            v90[1] = *(_OWORD *)algn_210398750;
            HIDWORD(_Q1.f64[0]) = unk_210398774;
            v90[2] = xmmword_210398760;
            v90[3] = unk_210398770;
            *v88 = 0;
            v78 = *(_QWORD *)(a1 + 112);
            v79 = *(_QWORD *)(a1 + 120);
            v103 = 0xF0F0F0F0F0F0F0F1 * ((v79 - v78) >> 3);
            v104 = *(_QWORD *)(a1 + 136) + 1;
            if (v104 < v103)
              v103 = 0;
            v86 = v104 - v103;
            *(_QWORD *)(a1 + 136) = v104 - v103;
            v105 = *(_QWORD *)(a1 + 152) - 1;
            *(_QWORD *)(a1 + 152) = v105;
          }
          while (v105);
          goto LABEL_49;
        }
      }
      else
      {
        v55 = *(_QWORD *)(a1 + 136);
        v56 = v54;
        v57 = v51;
        do
        {
          v58 = &v37[136 * (v55 % v34)];
          v59 = *(_OWORD *)v58;
          v60 = *((_OWORD *)v58 + 1);
          v61 = *((_OWORD *)v58 + 3);
          *((_OWORD *)v57 + 2) = *((_OWORD *)v58 + 2);
          *((_OWORD *)v57 + 3) = v61;
          *(_OWORD *)v57 = v59;
          *((_OWORD *)v57 + 1) = v60;
          v62 = *((_OWORD *)v58 + 4);
          v63 = *((_OWORD *)v58 + 5);
          v64 = *((_OWORD *)v58 + 7);
          *((_OWORD *)v57 + 6) = *((_OWORD *)v58 + 6);
          *((_OWORD *)v57 + 7) = v64;
          *((_OWORD *)v57 + 4) = v62;
          *((_OWORD *)v57 + 5) = v63;
          *((_QWORD *)v57 + 16) = *((_QWORD *)v58 + 16);
          ++v55;
          v57 += 136;
          --v56;
        }
        while (v56);
      }
      *(_QWORD *)(a1 + 120) = v37;
      v75 = v37;
      v76 = v54;
      operator delete(v75);
      v54 = v76;
      v31 = v132;
      v29 = v133;
      v27 = v134;
      v28.f64[0] = v135;
      v30 = v136;
      v16 = v137;
      v32 = v138;
      v17 = v139;
      *v33 = 0;
      *(_QWORD *)(a1 + 120) = 0;
      *(_QWORD *)(a1 + 128) = 0;
      goto LABEL_33;
    }
  }
  else
  {
    *(_DWORD *)(a1 + 16) = v12;
    *(double *)(a1 + 24) = v11;
    *(_BYTE *)(a1 + 32) = 1;
    if (*(_BYTE *)(a5 + 16))
      goto LABEL_6;
  }
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 144) = 0;
  *(_QWORD *)(a1 + 152) = 0;
  *(_QWORD *)(a1 + 136) = 0;
LABEL_52:
  v140 = 0;
  v141 = 0;
  v106 = operator new(0x50uLL);
  *v106 = &off_24C9F6958;
  v106[1] = &v140;
  v106[2] = v7;
  v106[3] = &v143;
  v106[4] = a1;
  v106[5] = &v146;
  v106[6] = &v145;
  v106[7] = &v144;
  v106[8] = a5;
  v106[9] = &v142;
  v151 = v106;
  v108 = (uint64_t *)a6[10];
  if (!v108)
    goto LABEL_65;
  if (*a6 == a6[1])
  {
    v111 = 5;
    do
      v108 = (uint64_t *)*v108;
    while (v108);
    goto LABEL_70;
  }
  do
  {
    v109 = *a6;
    v110 = a6[1];
    if (*a6 != v110)
    {
      while ((unsigned __int16)HIWORD(*((_DWORD *)v108 + 4)) != *(_DWORD *)v109
           || 0x6FB586FB586FB587 * ((uint64_t)(*(_QWORD *)(v109 + 16) - *(_QWORD *)(v109 + 8)) >> 3) <= (unint64_t)(unsigned __int16)*((_DWORD *)v108 + 4))
      {
        v109 += 104;
        if (v109 == v110)
          goto LABEL_55;
      }
      LODWORD(v147) = *((_DWORD *)v108 + 4);
      if (!v151)
        sub_20E86D37C();
      (*(void (**)(_BYTE *, uint64_t *, uint64_t *))(*(_QWORD *)v151 + 48))(v151, &v147, v108 + 3);
    }
LABEL_55:
    v108 = (uint64_t *)*v108;
  }
  while (v108);
  v106 = v151;
  if (v151 == v150)
  {
    v111 = 4;
    v106 = v150;
    goto LABEL_70;
  }
  if (v151)
  {
LABEL_65:
    v111 = 5;
LABEL_70:
    (*(void (**)(void))(*v106 + 8 * v111))();
  }
  v112 = v140;
  if (v140)
  {
    v113 = v141;
    if (v141)
    {
      p_shared_owners = (unint64_t *)&v141->__shared_owners_;
      do
        v115 = __ldxr(p_shared_owners);
      while (__stxr(v115 + 1, p_shared_owners));
    }
    v116 = v142;
    v117 = *(unint64_t **)a1;
    if (*(_BYTE *)(a1 + 192))
    {
      v118 = *(double *)(a1 + 208);
    }
    else
    {
      *(double *)(a1 + 200) = v142;
      *(double *)(a1 + 208) = v116;
      *(_BYTE *)(a1 + 192) = 1;
      v118 = v116;
    }
    *(double *)(a1 + 216) = v116;
    LODWORD(v107) = *((_DWORD *)v117 + 8);
    v119 = (double)v107 + -0.01;
    if (v116 - v118 >= v119)
    {
      sub_20FDC3AB0(*(uint64_t **)(a1 + 224), "com.apple.AppleCV3D.SLAM.ContextSnapshot", 0x28uLL, v112);
      *(_QWORD *)(a1 + 208) = *(_QWORD *)(a1 + 216);
    }
    if (*(_BYTE *)(a1 + 160))
    {
      v120 = *(double *)(a1 + 176);
    }
    else
    {
      *(double *)(a1 + 168) = v116;
      *(double *)(a1 + 176) = v116;
      *(_BYTE *)(a1 + 160) = 1;
      v120 = v116;
    }
    *(double *)(a1 + 184) = v116;
    LODWORD(v119) = *((_DWORD *)v117 + 9);
    if (v116 - v120 >= (double)*(unint64_t *)&v119 + -0.01)
    {
      sub_20FDC3AB0(*(uint64_t **)(a1 + 224), "com.apple.AppleCV3D.SLAM.FastTrackContextSnapshot", 0x31uLL, v112);
      *(_QWORD *)(a1 + 176) = *(_QWORD *)(a1 + 184);
    }
    v121 = *(unsigned __int16 *)(v112 + 712);
    if (v121 >= 0x100 && !*(_WORD *)(v112 + 712) && *(_BYTE *)(a1 + 233) && *(_BYTE *)(a1 + 232))
    {
      if (v113)
      {
        v127 = (unint64_t *)&v113->__shared_owners_;
        do
          v128 = __ldxr(v127);
        while (__stxr(v128 + 1, v127));
      }
      v147 = v112;
      v148 = v113;
      sub_20FDC4330(*(uint64_t **)(a1 + 224), &v147);
      v129 = v148;
      if (v148)
      {
        v130 = (unint64_t *)&v148->__shared_owners_;
        do
          v131 = __ldaxr(v130);
        while (__stlxr(v131 - 1, v130));
        if (!v131)
        {
          ((void (*)(std::__shared_weak_count *))v129->__on_zero_shared)(v129);
          std::__shared_weak_count::__release_weak(v129);
        }
      }
    }
    *(_WORD *)(a1 + 232) = v121;
    if (v113)
    {
      v122 = (unint64_t *)&v113->__shared_owners_;
      do
        v123 = __ldaxr(v122);
      while (__stlxr(v123 - 1, v122));
      if (!v123)
      {
        ((void (*)(std::__shared_weak_count *))v113->__on_zero_shared)(v113);
        std::__shared_weak_count::__release_weak(v113);
      }
    }
  }
  v124 = v141;
  if (v141)
  {
    v125 = (unint64_t *)&v141->__shared_owners_;
    do
      v126 = __ldaxr(v125);
    while (__stlxr(v126 - 1, v125));
    if (!v126)
    {
      ((void (*)(std::__shared_weak_count *))v124->__on_zero_shared)(v124);
      std::__shared_weak_count::__release_weak(v124);
    }
  }
}

void sub_20EFF650C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,char a27)
{
  uint64_t v27;

  sub_20E86665C(v27 - 168);
  sub_20E86665C((uint64_t)&a25);
  sub_20E86665C((uint64_t)&a27);
  _Unwind_Resume(a1);
}

void sub_20EFF6530(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)(v1 - 168);
  if (v3)
  {
    *(_QWORD *)(v1 - 160) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_20EFF654C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,char a27)
{
  sub_20E86665C((uint64_t)&a25);
  sub_20E86665C((uint64_t)&a27);
  _Unwind_Resume(a1);
}

void sub_20EFF6568(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  sub_20E86665C((uint64_t)&a27);
  _Unwind_Resume(a1);
}

void sub_20EFF657C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  uint64_t v27;
  _QWORD *v29;
  uint64_t v30;

  v29 = *(_QWORD **)(v27 - 120);
  if (v29 == (_QWORD *)(v27 - 144))
  {
    v30 = 4;
    v29 = (_QWORD *)(v27 - 144);
  }
  else
  {
    if (!v29)
      goto LABEL_6;
    v30 = 5;
  }
  (*(void (**)(void))(*v29 + 8 * v30))();
LABEL_6:
  sub_20E86665C((uint64_t)&a27);
  _Unwind_Resume(a1);
}

_QWORD *sub_20EFF65C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  _QWORD *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  char v16;
  _QWORD *result;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  __int16 v31;
  int v32;
  _BYTE v33[24];
  _BYTE *v34;
  _DWORD v35[6];
  _DWORD *v36;
  uint64_t v37;

  v37 = *MEMORY[0x24BDAC8D0];
  v31 = 0;
  v29 = 0;
  v30 = 0;
  v10 = operator new(0x30uLL);
  *v10 = &off_24C9F69E8;
  v10[1] = a5;
  v10[2] = (char *)&v31 + 1;
  v10[3] = &v31;
  v10[4] = &v30;
  v10[5] = &v29;
  v36 = v10;
  v11 = (uint64_t *)a5[10];
  if (v11)
  {
    if (*a5 == a5[1])
    {
      v14 = 5;
      do
        v11 = (uint64_t *)*v11;
      while (v11);
      goto LABEL_19;
    }
    do
    {
      v12 = *a5;
      v13 = a5[1];
      if (*a5 != v13)
      {
        while ((unsigned __int16)HIWORD(*((_DWORD *)v11 + 4)) != *(_DWORD *)v12
             || 0x6FB586FB586FB587 * ((uint64_t)(*(_QWORD *)(v12 + 16) - *(_QWORD *)(v12 + 8)) >> 3) <= (unint64_t)(unsigned __int16)*((_DWORD *)v11 + 4))
        {
          v12 += 104;
          if (v12 == v13)
            goto LABEL_4;
        }
        v32 = *((_DWORD *)v11 + 4);
        if (!v36)
          sub_20E86D37C();
        (*(void (**)(_DWORD *, int *, uint64_t *))(*(_QWORD *)v36 + 48))(v36, &v32, v11 + 3);
      }
LABEL_4:
      v11 = (uint64_t *)*v11;
    }
    while (v11);
    v10 = v36;
    if (v36 == v35)
    {
      v14 = 4;
      v10 = v35;
      goto LABEL_19;
    }
    if (!v36)
      goto LABEL_20;
  }
  v14 = 5;
LABEL_19:
  (*(void (**)(void))(*v10 + 8 * v14))();
LABEL_20:
  v15 = HIBYTE(v31);
  if (HIBYTE(v31))
  {
    v15 = v31;
    v26 = v30;
    v27 = v29;
    v16 = 1;
  }
  else
  {
    v16 = 0;
  }
  v25 = v15;
  v28 = v16;
  result = operator new(0x30uLL);
  *result = &off_24C9F6A68;
  result[1] = a1;
  result[2] = a3;
  result[3] = a4;
  result[4] = &v25;
  result[5] = a2;
  v34 = result;
  v21 = (uint64_t *)a5[10];
  if (v21)
  {
    if (*a5 == a5[1])
    {
      v24 = 5;
      do
        v21 = (uint64_t *)*v21;
      while (v21);
      return (_QWORD *)(*(uint64_t (**)(_QWORD *, uint64_t, uint64_t *, uint64_t))(*result + 8 * v24))(result, v18, v19, v20);
    }
    do
    {
      v22 = *a5;
      v23 = a5[1];
      if (*a5 != v23)
      {
        v19 = v21 + 3;
        while ((unsigned __int16)HIWORD(*((_DWORD *)v21 + 4)) != *(_DWORD *)v22
             || 0x6FB586FB586FB587 * ((uint64_t)(*(_QWORD *)(v22 + 16) - *(_QWORD *)(v22 + 8)) >> 3) <= (unint64_t)(unsigned __int16)*((_DWORD *)v21 + 4))
        {
          v22 += 104;
          if (v22 == v23)
            goto LABEL_26;
        }
        v35[0] = *((_DWORD *)v21 + 4);
        if (!v34)
          sub_20E86D37C();
        (*(void (**)(_BYTE *, _DWORD *, uint64_t *))(*(_QWORD *)v34 + 48))(v34, v35, v19);
      }
LABEL_26:
      v21 = (uint64_t *)*v21;
    }
    while (v21);
    result = v34;
    if (v34 == v33)
    {
      v24 = 4;
      result = v33;
      return (_QWORD *)(*(uint64_t (**)(_QWORD *, uint64_t, uint64_t *, uint64_t))(*result + 8 * v24))(result, v18, v19, v20);
    }
    if (!v34)
      return result;
  }
  v24 = 5;
  return (_QWORD *)(*(uint64_t (**)(_QWORD *, uint64_t, uint64_t *, uint64_t))(*result + 8 * v24))(result, v18, v19, v20);
}

void sub_20EFF6898(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t *a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23)
{
  if (a19 == &a16)
  {
    (*(void (**)(void))(a16 + 32))();
    _Unwind_Resume(exception_object);
  }
  if (!a19)
    _Unwind_Resume(exception_object);
  (*(void (**)(void))(*a19 + 40))();
  _Unwind_Resume(exception_object);
}

void sub_20EFF6928()
{
  JUMPOUT(0x212BC6398);
}

__n128 sub_20EFF693C(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x50uLL);
  *(_QWORD *)v2 = &off_24C9F6958;
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(v2 + 40) = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(v2 + 56) = *(_OWORD *)(a1 + 56);
  *((_QWORD *)v2 + 9) = *(_QWORD *)(a1 + 72);
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_20EFF6994(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  *(_QWORD *)a2 = &off_24C9F6958;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  v3 = *(_OWORD *)(a1 + 40);
  v4 = *(_OWORD *)(a1 + 56);
  *(_QWORD *)(a2 + 72) = *(_QWORD *)(a1 + 72);
  *(_OWORD *)(a2 + 56) = v4;
  *(_OWORD *)(a2 + 40) = v3;
  *(__n128 *)(a2 + 24) = result;
  return result;
}

void sub_20EFF69D4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  _QWORD *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  void **v13;
  int v14;
  void *__p[2];
  uint64_t v16;
  unsigned __int8 v17;
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  v5 = *(_QWORD *)(a3 + 56);
  v4 = *(_QWORD *)(a3 + 64);
  if (v4)
  {
    v6 = (unint64_t *)(v4 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
    v8 = *(_QWORD **)(a1 + 8);
    if (*v8)
      goto LABEL_13;
    do
      v9 = __ldxr(v6);
    while (__stxr(v9 + 1, v6));
  }
  else
  {
    v8 = *(_QWORD **)(a1 + 8);
    if (*v8)
      goto LABEL_13;
  }
  v10 = (std::__shared_weak_count *)v8[1];
  *v8 = v5;
  v8[1] = v4;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
LABEL_13:
  sub_20FDBE67C(*(_QWORD *)(a1 + 16), (uint64_t)__p);
  v13 = (void **)(v5 + 112);
  v14 = v17;
  if (*(unsigned __int8 *)(v5 + 136) == v17)
  {
    if (*(_BYTE *)(v5 + 136))
    {
      if (*(char *)(v5 + 135) < 0)
        operator delete(*v13);
      *(_OWORD *)v13 = *(_OWORD *)__p;
      *(_QWORD *)(v5 + 128) = v16;
    }
  }
  else if (*(_BYTE *)(v5 + 136))
  {
    if (*(char *)(v5 + 135) < 0)
    {
      operator delete(*v13);
      v14 = v17;
    }
    *(_BYTE *)(v5 + 136) = 0;
    if (v14 && SHIBYTE(v16) < 0)
      operator delete(__p[0]);
  }
  else
  {
    *(_OWORD *)v13 = *(_OWORD *)__p;
    *(_QWORD *)(v5 + 128) = v16;
    *(_BYTE *)(v5 + 136) = 1;
  }
  __asm { BR              X10 }
}

void sub_20EFF6B3C(double a1, double a2, double a3)
{
  std::__shared_weak_count *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void **v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  _QWORD v10[13];

  qmemcpy(v10, "platform0", 9);
  v7 = (void **)(v5 + 168);
  if (*(_BYTE *)(v5 + 192))
  {
    if (*(char *)(v5 + 191) < 0)
      operator delete(*v7);
    *v7 = (void *)v10[0];
    *(_BYTE *)(v5 + 176) = v10[1];
    *(_BYTE *)(v5 + 177) = 0;
    *(_BYTE *)(v5 + 191) = 9;
  }
  else
  {
    *v7 = (void *)v10[0];
    *(_BYTE *)(v5 + 176) = v10[1];
    *(_BYTE *)(v5 + 177) = 0;
    *(_WORD *)(v5 + 191) = 265;
  }
  LODWORD(a3) = *(_DWORD *)(v6 + 80);
  *(_WORD *)(v5 + 256) = (*(double *)(v6 + 104) < *(double *)(v6 + 88) * (double)*(unint64_t *)&a3) | 0x100;
  *(_QWORD *)(v5 + 288) = **(_QWORD **)(v4 + 40);
  *(_BYTE *)(v5 + 296) = 1;
  *(_QWORD *)(v5 + 328) = **(_QWORD **)(v4 + 48);
  *(_BYTE *)(v5 + 336) = 1;
  *(_QWORD *)(v5 + 368) = **(_QWORD **)(v4 + 56);
  *(_BYTE *)(v5 + 376) = 1;
  *(_WORD *)(v5 + 408) = *(unsigned __int8 *)(*(_QWORD *)(v4 + 64) + 16) ^ 1 | 0x100;
  *(_QWORD *)(v5 + 672) = *(_QWORD *)(v6 + 96);
  *(_BYTE *)(v5 + 680) = 1;
  *(_WORD *)(v5 + 744) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)v6 + 56) + 24))(*(_QWORD *)(*(_QWORD *)v6 + 56));
  if (!*(_BYTE *)(v6 + 32))
    sub_20E866B34();
  *(double *)(v5 + 776) = **(double **)(v4 + 72) - *(double *)(v6 + 24);
  *(_BYTE *)(v5 + 784) = 1;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_20EFF6D18(_Unwind_Exception *exception_object)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v4;

  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20EFF6D60(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3vio8odometry16ContextCAManager29PopulateAndMaybeEmitTelemetryEyyyRKNS0_8metadata15VIOPoseMe"
                     "tadataERKNS0_17CameraSetFeaturesINS0_13MapDataTraitsILb0EEEEENS0_8cv_types14VSPlatformTypeEE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4cv3d3vio8odometry16ContextCAManager29PopulateAndMaybeEmitTelemetryEyyyRKNS0_8metadata"
                                "15VIOPoseMetadataERKNS0_17CameraSetFeaturesINS0_13MapDataTraitsILb0EEEEENS0_8cv_types14V"
                                "SPlatformTypeEE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3vio8odometry16ContextCAManager29PopulateAndMaybeEmitTelemetryEyyyRKNS0_8metadata15VIOPoseMetadataERKNS0_17CameraSetFeaturesINS0_13MapDataTraitsILb0EEEEENS0_8cv_types14VSPlatformTypeEE3$_0"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3vio8odometry16ContextCAManager29PopulateAndMaybeEmitTelemetryEyyyRKNS0_8metadata15VIOPoseMetadataERKNS0_17CameraSetFeaturesINS0_13MapDataTraitsILb0EEEEENS0_8cv_types14VSPlatformTypeEE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20EFF6DCC()
{
  return &unk_24C9F69C8;
}

void sub_20EFF6DDC()
{
  JUMPOUT(0x212BC6398);
}

__n128 sub_20EFF6DF0(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x30uLL);
  *(_QWORD *)v2 = &off_24C9F69E8;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  *((_QWORD *)v2 + 5) = *(_QWORD *)(a1 + 40);
  return result;
}

__n128 sub_20EFF6E38(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  *(_QWORD *)a2 = &off_24C9F69E8;
  result = *(__n128 *)(a1 + 8);
  v3 = *(_OWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 40) = *(_QWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_20EFF6E68(uint64_t result, _DWORD *a2)
{
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  BOOL v8;
  BOOL *v9;
  double v10;
  double *v11;
  double *v12;
  double v13;

  v2 = (unint64_t)*a2 >> 16;
  v3 = *(_QWORD *)(*(_QWORD *)(result + 8) + 24);
  if (0xEEEEEEEEEEEEEEEFLL * ((*(_QWORD *)(*(_QWORD *)(result + 8) + 32) - v3) >> 4) > v2)
  {
    v4 = (unsigned __int16)*a2;
    v6 = (uint64_t *)(v3 + 240 * v2 + 24);
    v5 = *v6;
    if (v4 < (v6[1] - *v6) >> 4)
    {
      v7 = *(_QWORD *)(v5 + 16 * v4);
      if (*(_BYTE *)(v7 + 129))
      {
        v8 = 1;
        v9 = *(BOOL **)(result + 24);
        **(_BYTE **)(result + 16) = 1;
        if (!*v9)
        {
          if (!*(_BYTE *)(v7 + 129))
            sub_20E866B34();
          v8 = *(_BYTE *)(v7 + 128) != 0;
        }
        *v9 = v8;
        v10 = *(double *)(v7 + 136);
        v11 = *(double **)(result + 32);
        v12 = *(double **)(result + 40);
        if (*v11 >= v10)
          v10 = *v11;
        *v11 = v10;
        v13 = *(double *)(v7 + 144);
        if (*v12 >= v13)
          v13 = *v12;
        *v12 = v13;
      }
    }
  }
  return result;
}

uint64_t sub_20EFF6F2C(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3vio8odometry22AggregateSmudgeMetricsERKNS0_17CameraSetFeaturesINS0_13MapDataTraitsILb0EEEEEE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4cv3d3vio8odometry22AggregateSmudgeMetricsERKNS0_17CameraSetFeaturesINS0_13MapDataTrai"
                                "tsILb0EEEEEE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3vio8odometry22AggregateSmudgeMetricsERKNS0_17CameraSetFeaturesINS0_13MapDataTraitsILb0EEEEEE3$_0"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3vio8odometry22AggregateSmudgeMetricsERKNS0_17CameraSetFeaturesINS0_13MapDataTraitsILb0EEEEEE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20EFF6F98()
{
  return &unk_24C9F6A48;
}

void sub_20EFF6FA8()
{
  JUMPOUT(0x212BC6398);
}

__n128 sub_20EFF6FBC(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x30uLL);
  *(_QWORD *)v2 = &off_24C9F6A68;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  *((_QWORD *)v2 + 5) = *(_QWORD *)(a1 + 40);
  return result;
}

__n128 sub_20EFF7004(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  *(_QWORD *)a2 = &off_24C9F6A68;
  result = *(__n128 *)(a1 + 8);
  v3 = *(_OWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 40) = *(_QWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

_QWORD *sub_20EFF7034(_QWORD *result, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned __int8 *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int8 *v15;

  v3 = (uint64_t *)result[1];
  if (*((_BYTE *)v3 + 16))
  {
    v4 = *v3;
    v5 = *(_QWORD *)(a3 + 56);
    *(_QWORD *)v5 = v4;
    *(_BYTE *)(v5 + 8) = 1;
  }
  v6 = *(_QWORD *)(a3 + 56);
  v7 = *(unsigned int *)(result[2] + 192);
  if (!*(_BYTE *)(v6 + 48))
    *(_BYTE *)(v6 + 48) = 1;
  *(_QWORD *)(v6 + 40) = v7;
  *(_WORD *)(*(_QWORD *)(a3 + 56) + 224) = *(unsigned __int8 *)(result[2] + 170) | 0x100;
  v8 = *(_QWORD *)(a3 + 56);
  *(_QWORD *)(v8 + 440) = *(_QWORD *)(result[3] + 352);
  *(_BYTE *)(v8 + 448) = 1;
  v9 = (unsigned __int8 *)result[4];
  if (v9[24])
  {
    *(_WORD *)(*(_QWORD *)(a3 + 56) + 480) = *v9 | 0x100;
    v10 = *(_QWORD *)(a3 + 56);
    *(_QWORD *)(v10 + 512) = *((_QWORD *)v9 + 1);
    *(_BYTE *)(v10 + 520) = 1;
    v11 = *((_QWORD *)v9 + 2);
    v12 = *(_QWORD *)(a3 + 56);
    *(_QWORD *)(v12 + 552) = v11;
    *(_BYTE *)(v12 + 560) = 1;
  }
  v13 = *(_QWORD *)(a3 + 56);
  *(_QWORD *)(v13 + 592) = *(_QWORD *)(result[2] + 64);
  *(_BYTE *)(v13 + 600) = 1;
  v14 = *(_QWORD *)(a3 + 56);
  *(double *)(v14 + 632) = *(double *)(result[2] + 72) * 57.2957795;
  *(_BYTE *)(v14 + 640) = 1;
  v15 = (unsigned __int8 *)result[5];
  if (v15[1])
    *(_WORD *)(*(_QWORD *)(a3 + 56) + 712) = *v15 | 0x100;
  return result;
}

uint64_t sub_20EFF7130(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3vio8odometry24PopulateContextTelemetryERKNSt3__18optionalINS0_3lux16EstimationResultEEERKNS"
                     "3_IbEERKNS0_19batch_least_squares15BAHealthMetricsERKNS1_28FrontEndOdometryUpdateResultERKNS0_17Cam"
                     "eraSetFeaturesINS0_13MapDataTraitsILb0EEEEEE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4cv3d3vio8odometry24PopulateContextTelemetryERKNSt3__18optionalINS0_3lux16EstimationRe"
                                "sultEEERKNS3_IbEERKNS0_19batch_least_squares15BAHealthMetricsERKNS1_28FrontEndOdometryUp"
                                "dateResultERKNS0_17CameraSetFeaturesINS0_13MapDataTraitsILb0EEEEEE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3vio8odometry24PopulateContextTelemetryERKNSt3__18optionalINS0_3lux16EstimationResultEEERKNS3_IbEERKNS0_19batch_least_squares15BAHealthMetricsERKNS1_28FrontEndOdometryUpdateResultERKNS0_17CameraSetFeaturesINS0_13MapDataTraitsILb0EEEEEE3$_0"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3vio8odometry24PopulateContextTelemetryERKNSt3__18optionalINS0_3lux16EstimationResultEEERKNS3_IbEERKNS0_19batch_least_squares15BAHealthMetricsERKNS1_28FrontEndOdometryUpdateResultERKNS0_17CameraSetFeaturesINS0_13MapDataTraitsILb0EEEEEE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20EFF719C()
{
  return &unk_24C9F6AC8;
}

void sub_20EFF71A8(_QWORD *a1)
{
  unsigned __int8 v2;
  void *__p[2];
  char v4;
  uint64_t *v5;

  v2 = atomic_load((unsigned __int8 *)&qword_254A61908);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254A61908))
  {
    sub_21021D3D8(&v5);
    sub_20E8610C0(__p, "cv3d.vio.odometry");
    sub_20E8C4068(&v5, (uint64_t)__p, &qword_254A61900);
    if (v4 < 0)
      operator delete(__p[0]);
    __cxa_guard_release(&qword_254A61908);
  }
  *a1 = qword_254A61900;
}

void sub_20EFF7244(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A61908);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A61908);
  _Unwind_Resume(a1);
}

_QWORD *sub_20EFF729C(uint64_t a1, uint64_t *a2)
{
  _QWORD *result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  std::locale::id *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  const std::locale::facet *v14;
  size_t v15;
  _BYTE *v16;
  int v17;
  _QWORD *v18;
  BOOL v19;
  size_t v20;
  void *v21;
  unint64_t v22;
  const void *v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  _BYTE *v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  const void **v31;
  const void *v32;
  uint64_t v33;
  uint64_t v34;
  void **v35;
  uint64_t v36;
  const char *v37;
  size_t v38;
  unsigned __int8 v39;
  const char *v40;
  size_t v41;
  _BYTE *v42;
  _QWORD *v43;
  uint64_t v44;
  void **v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  void **v49;
  uint64_t v50;
  uint64_t v51;
  NSObject *v52;
  size_t v53;
  std::__shared_weak_count_vtbl *v54;
  std::__shared_weak_count *v55;
  size_t v56;
  size_t v57;
  _QWORD *v58;
  void *v59;
  uint64_t v60;
  uint64_t v61;
  _QWORD *v62;
  char v63;
  _QWORD *v64;
  uint64_t v65;
  std::__shared_weak_count *v66;
  unint64_t *p_shared_owners;
  unint64_t v68;
  void *v69;
  unint64_t *v70;
  unint64_t v71;
  std::__shared_weak_count *v72;
  unint64_t *v73;
  unint64_t v74;
  unint64_t v75;
  std::__shared_weak_count *v76;
  unint64_t *v77;
  unint64_t v78;
  uint64_t v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  const char *v84;
  uint64_t v85;
  __int128 v86;
  uint64_t v87;
  std::__shared_weak_count *v88;
  unint64_t *v89;
  unint64_t v90;
  std::__shared_weak_count *v91;
  unint64_t *v92;
  unint64_t v93;
  _QWORD *v94;
  std::__shared_weak_count *v95;
  unint64_t *v96;
  unint64_t v97;
  std::__shared_weak_count *v98;
  unint64_t *v99;
  unint64_t v100;
  std::__shared_weak_count *v101;
  unint64_t *v102;
  unint64_t v103;
  std::__shared_weak_count *v104;
  unint64_t *v105;
  unint64_t v106;
  void **v107;
  std::__shared_weak_count *v108;
  unint64_t *v109;
  unint64_t v110;
  uint64_t v111;
  const char *v112;
  const char *v113;
  _QWORD v114[3];
  int v115;
  const char *v116;
  int v117;
  const char *v118;
  uint64_t v119;
  std::__shared_weak_count *v120;
  void *v121[2];
  int64_t v122;
  _QWORD v123[2];
  uint64_t v124;
  uint64_t v125;
  _BYTE v126[8];
  const void *v127;
  unint64_t v128;
  const void *v129;
  unint64_t v130;
  void *__p;
  char v132;
  unint64_t v133;
  int v134;
  _BYTE v135[152];
  uint64_t v136;
  __int128 v137;
  std::__shared_weak_count *v138;
  char *v139;
  std::__shared_weak_count *v140;
  _QWORD *v141;
  __int128 v142;
  _BYTE __dst[24];
  __int128 v144;
  void *v145[2];
  unint64_t v146;
  char v147;
  _QWORD v148[5];

  v148[2] = *MEMORY[0x24BDAC8D0];
  result = (_QWORD *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 128) + 16))(*(_QWORD *)(a1 + 128));
  if ((*((_BYTE *)result + *(_QWORD *)(*result - 24) + 32) & 1) != 0)
  {
    if (*(_BYTE *)(a1 + 146))
      return result;
    sub_20EFF71A8(&v136);
    result = (_QWORD *)v136;
    if (**(int **)(v136 + 56) > 5
      || ((v17 = *(unsigned __int8 *)(v136 + 72),
           result = (_QWORD *)sub_20E8C31DC(v136, "OSLogSurrogateAppender", 1, 0),
           v18 = result,
           !v17)
        ? (v19 = result == 0)
        : (v19 = 0),
          v19))
    {
LABEL_175:
      *(_BYTE *)(a1 + 146) = 1;
      return result;
    }
    sub_20E863438((uint64_t)v123);
    sub_20E86A980(&v124, (uint64_t)"DataCollectionDiagnostics: Compass file stream has become bad.", 62);
    if ((v134 & 0x10) != 0)
    {
      v30 = v133;
      if (v133 < v130)
      {
        v133 = v130;
        v30 = v130;
      }
      v31 = &v129;
    }
    else
    {
      if ((v134 & 8) == 0)
      {
        v20 = 0;
        HIBYTE(v122) = 0;
        v21 = v121;
        goto LABEL_53;
      }
      v31 = &v127;
      v30 = v128;
    }
    v32 = *v31;
    v20 = v30 - (_QWORD)*v31;
    if (v20 > 0x7FFFFFFFFFFFFFF7)
      sub_20E860B7C();
    if (v20 >= 0x17)
    {
      v33 = (v20 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v20 | 7) != 0x17)
        v33 = v20 | 7;
      v34 = v33 + 1;
      v21 = operator new(v33 + 1);
      v121[1] = (void *)v20;
      v122 = v34 | 0x8000000000000000;
      v121[0] = v21;
    }
    else
    {
      HIBYTE(v122) = v30 - *(_BYTE *)v31;
      v21 = v121;
      if (!v20)
      {
LABEL_53:
        *((_BYTE *)v21 + v20) = 0;
        v114[0] = &v136;
        v114[1] = std::chrono::steady_clock::now().__d_.__rep_;
        v114[2] = std::chrono::system_clock::now().__d_.__rep_;
        v115 = 5;
        v116 = "unknown file";
        v117 = 122;
        v119 = 0;
        v120 = 0;
        v118 = "unknown function";
        if (v122 >= 0)
          v35 = v121;
        else
          v35 = (void **)v121[0];
        v36 = *(_QWORD *)v114[0];
        v37 = (const char *)(*(_QWORD *)v114[0] + 16);
        v113 = v37;
        if (*(char *)(*(_QWORD *)v114[0] + 39) < 0)
        {
          v37 = *(const char **)(v36 + 16);
          v38 = *(_QWORD *)(v36 + 24);
        }
        else
        {
          v38 = *(unsigned __int8 *)(*(_QWORD *)v114[0] + 39);
        }
        v39 = atomic_load((unsigned __int8 *)&qword_254A4A510);
        if ((v39 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
        {
          sub_20E9E46F8((uint64_t)__dst);
          sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)__dst);
          if ((_BYTE)v144 && (__dst[23] & 0x80000000) != 0)
            operator delete(*(void **)__dst);
          __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
          __cxa_guard_release(&qword_254A4A510);
        }
        if (byte_254A4A4F8[23] >= 0)
          v40 = byte_254A4A4F8;
        else
          v40 = *(const char **)byte_254A4A4F8;
        if (byte_254A4A4F8[23] >= 0)
          v41 = byte_254A4A4F8[23];
        else
          v41 = *(_QWORD *)&byte_254A4A4F8[8];
        *(_QWORD *)__dst = os_log_create(v40, v37);
        v42 = &__dst[8];
        if (v41 > 0x7FFFFFFFFFFFFFF7)
          sub_20E860B7C();
        if (v41 >= 0x17)
        {
          v112 = v37;
          v43 = v18;
          v44 = v36;
          v45 = v35;
          v46 = v17;
          v47 = (v41 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v41 | 7) != 0x17)
            v47 = v41 | 7;
          v48 = v47 + 1;
          v42 = operator new(v47 + 1);
          *(_QWORD *)&__dst[16] = v41;
          *(_QWORD *)&v144 = v48 | 0x8000000000000000;
          *(_QWORD *)&__dst[8] = v42;
          v17 = v46;
          v35 = v45;
          v36 = v44;
          v18 = v43;
          v37 = v112;
        }
        else
        {
          BYTE7(v144) = v41;
          if (!v41)
          {
LABEL_74:
            v42[v41] = 0;
            BYTE8(v144) = 1;
            v49 = v145;
            if (v38 > 0x7FFFFFFFFFFFFFF7)
              sub_20E860B7C();
            if (v38 >= 0x17)
            {
              v50 = (v38 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v38 | 7) != 0x17)
                v50 = v38 | 7;
              v51 = v50 + 1;
              v49 = (void **)operator new(v50 + 1);
              v145[1] = (void *)v38;
              v146 = v51 | 0x8000000000000000;
              v145[0] = v49;
            }
            else
            {
              HIBYTE(v146) = v38;
              if (!v38)
              {
LABEL_82:
                *((_BYTE *)v49 + v38) = 0;
                v147 = 1;
                v52 = *(NSObject **)__dst;
                if (SHIBYTE(v146) < 0)
                  operator delete(v145[0]);
                if (BYTE8(v144) && SBYTE7(v144) < 0)
                  operator delete(*(void **)&__dst[8]);
                if (*(_QWORD *)__dst)
                  os_release(*(void **)__dst);
                if (!v18 || !v18[3])
                {
                  os_log_type_enabled(v52, OS_LOG_TYPE_ERROR);
                  *(_DWORD *)__dst = 136315138;
                  *(_QWORD *)&__dst[4] = v35;
                  v59 = (void *)_os_log_send_and_compose_impl();
                  if (v59)
                    free(v59);
                  goto LABEL_161;
                }
                v53 = _os_log_pack_size();
                v54 = (std::__shared_weak_count_vtbl *)operator new(v53, (std::align_val_t)8uLL);
                v55 = (std::__shared_weak_count *)operator new();
                v55->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
                v55->__shared_owners_ = 0;
                v55->__shared_weak_owners_ = 0;
                v55[1].__vftable = v54;
                *(_QWORD *)&v137 = v54;
                *((_QWORD *)&v137 + 1) = v54;
                v139 = 0;
                v140 = 0;
                v138 = v55;
                v56 = strlen((const char *)v35);
                if (v56 > 0x7FFFFFFFFFFFFFF7)
                  sub_20E860B7C();
                v57 = v56;
                if (v56 >= 0x17)
                {
                  v60 = (v56 & 0xFFFFFFFFFFFFFFF8) + 8;
                  if ((v56 | 7) != 0x17)
                    v60 = v56 | 7;
                  v61 = v60 + 1;
                  v58 = operator new(v60 + 1);
                  *(_QWORD *)&v142 = v57;
                  *((_QWORD *)&v142 + 1) = v61 | 0x8000000000000000;
                  v141 = v58;
                }
                else
                {
                  HIBYTE(v142) = v56;
                  v58 = &v141;
                  if (!v56)
                  {
LABEL_101:
                    *((_BYTE *)v58 + v57) = 0;
                    v62 = v141;
                    v148[0] = v142;
                    *(_QWORD *)((char *)v148 + 7) = *(_QWORD *)((char *)&v142 + 7);
                    v63 = HIBYTE(v142);
                    v64 = operator new(0x38uLL);
                    v64[1] = 0;
                    v64[2] = 0;
                    v64[3] = off_24C9ABC20;
                    *v64 = &off_24C9ABBD0;
                    v65 = v148[0];
                    v64[4] = v62;
                    v64[5] = v65;
                    *(_QWORD *)((char *)v64 + 47) = *(_QWORD *)((char *)v148 + 7);
                    *((_BYTE *)v64 + 55) = v63;
                    v148[0] = 0;
                    *(_QWORD *)((char *)v148 + 7) = 0;
                    v66 = v140;
                    v139 = (char *)(v64 + 3);
                    v140 = (std::__shared_weak_count *)v64;
                    if (v66)
                    {
                      p_shared_owners = (unint64_t *)&v66->__shared_owners_;
                      do
                        v68 = __ldaxr(p_shared_owners);
                      while (__stlxr(v68 - 1, p_shared_owners));
                      if (!v68)
                      {
                        ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
                        std::__shared_weak_count::__release_weak(v66);
                      }
                    }
                    *(_OWORD *)__dst = v137;
                    v69 = v139;
                    *(_QWORD *)&__dst[16] = v138;
                    if (v138)
                    {
                      v70 = (unint64_t *)&v138->__shared_owners_;
                      do
                        v71 = __ldxr(v70);
                      while (__stxr(v71 + 1, v70));
                    }
                    v72 = v140;
                    *(_QWORD *)&v144 = v69;
                    *((_QWORD *)&v144 + 1) = v140;
                    if (v140)
                    {
                      v73 = (unint64_t *)&v140->__shared_owners_;
                      do
                        v74 = __ldxr(v73);
                      while (__stxr(v74 + 1, v73));
                      v145[0] = v69;
                      do
                        v75 = __ldaxr(v73);
                      while (__stlxr(v75 - 1, v73));
                      if (!v75)
                      {
                        ((void (*)(std::__shared_weak_count *))v72->__on_zero_shared)(v72);
                        std::__shared_weak_count::__release_weak(v72);
                      }
                    }
                    else
                    {
                      v145[0] = v69;
                    }
                    v76 = v138;
                    if (v138)
                    {
                      v77 = (unint64_t *)&v138->__shared_owners_;
                      do
                        v78 = __ldaxr(v77);
                      while (__stlxr(v78 - 1, v77));
                      if (!v78)
                      {
                        ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
                        std::__shared_weak_count::__release_weak(v76);
                      }
                    }
                    v79 = *(_QWORD *)__dst;
                    if (*((char *)v145[0] + 31) >= 0)
                      v80 = (char *)v145[0] + 8;
                    else
                      v80 = (char *)*((_QWORD *)v145[0] + 1);
                    v81 = _os_log_pack_fill();
                    *(_DWORD *)v81 = 136315138;
                    *(_QWORD *)(v81 + 4) = v80;
                    v82 = operator new();
                    v83 = *(unsigned __int8 *)(v36 + 39);
                    v84 = *(const char **)(v36 + 16);
                    v85 = *(_QWORD *)(v36 + 24);
                    v86 = v144;
                    *(_OWORD *)(v82 + 8) = *(_OWORD *)&__dst[8];
                    if ((v83 & 0x80u) != 0)
                      v83 = v85;
                    else
                      v84 = v113;
                    *(_QWORD *)v82 = v79;
                    *(_QWORD *)&__dst[8] = 0;
                    *(_QWORD *)&__dst[16] = 0;
                    *(_OWORD *)(v82 + 24) = v86;
                    v144 = 0uLL;
                    *(_QWORD *)(v82 + 40) = v84;
                    *(_QWORD *)(v82 + 48) = v83;
                    *(_BYTE *)(v82 + 56) = 16;
                    v141 = 0;
                    *(_QWORD *)&v137 = v82;
                    (*(void (**)(_QWORD, __int128 *))(*(_QWORD *)v18[3] + 40))(v18[3], &v137);
                    v87 = v137;
                    *(_QWORD *)&v137 = 0;
                    if (v87)
                    {
                      v88 = *(std::__shared_weak_count **)(v87 + 32);
                      if (v88)
                      {
                        v89 = (unint64_t *)&v88->__shared_owners_;
                        do
                          v90 = __ldaxr(v89);
                        while (__stlxr(v90 - 1, v89));
                        if (!v90)
                        {
                          ((void (*)(std::__shared_weak_count *))v88->__on_zero_shared)(v88);
                          std::__shared_weak_count::__release_weak(v88);
                        }
                      }
                      v91 = *(std::__shared_weak_count **)(v87 + 16);
                      if (v91)
                      {
                        v92 = (unint64_t *)&v91->__shared_owners_;
                        do
                          v93 = __ldaxr(v92);
                        while (__stlxr(v93 - 1, v92));
                        if (!v93)
                        {
                          ((void (*)(std::__shared_weak_count *))v91->__on_zero_shared)(v91);
                          std::__shared_weak_count::__release_weak(v91);
                        }
                      }
                      MEMORY[0x212BC6398](v87, 0x10F0C40B62ED6C6);
                      v94 = v141;
                      v141 = 0;
                      if (v94)
                      {
                        v95 = (std::__shared_weak_count *)v94[4];
                        if (v95)
                        {
                          v96 = (unint64_t *)&v95->__shared_owners_;
                          do
                            v97 = __ldaxr(v96);
                          while (__stlxr(v97 - 1, v96));
                          if (!v97)
                          {
                            ((void (*)(std::__shared_weak_count *))v95->__on_zero_shared)(v95);
                            std::__shared_weak_count::__release_weak(v95);
                          }
                        }
                        v98 = (std::__shared_weak_count *)v94[2];
                        if (v98)
                        {
                          v99 = (unint64_t *)&v98->__shared_owners_;
                          do
                            v100 = __ldaxr(v99);
                          while (__stlxr(v100 - 1, v99));
                          if (!v100)
                          {
                            ((void (*)(std::__shared_weak_count *))v98->__on_zero_shared)(v98);
                            std::__shared_weak_count::__release_weak(v98);
                          }
                        }
                        MEMORY[0x212BC6398](v94, 0x10F0C40B62ED6C6);
                      }
                    }
                    v101 = (std::__shared_weak_count *)*((_QWORD *)&v144 + 1);
                    if (*((_QWORD *)&v144 + 1))
                    {
                      v102 = (unint64_t *)(*((_QWORD *)&v144 + 1) + 8);
                      do
                        v103 = __ldaxr(v102);
                      while (__stlxr(v103 - 1, v102));
                      if (!v103)
                      {
                        ((void (*)(std::__shared_weak_count *))v101->__on_zero_shared)(v101);
                        std::__shared_weak_count::__release_weak(v101);
                      }
                    }
                    v104 = *(std::__shared_weak_count **)&__dst[16];
                    if (*(_QWORD *)&__dst[16])
                    {
                      v105 = (unint64_t *)(*(_QWORD *)&__dst[16] + 8);
                      do
                        v106 = __ldaxr(v105);
                      while (__stlxr(v106 - 1, v105));
                      if (!v106)
                      {
                        ((void (*)(std::__shared_weak_count *))v104->__on_zero_shared)(v104);
                        std::__shared_weak_count::__release_weak(v104);
                      }
                    }
LABEL_161:
                    if (v17)
                    {
                      v107 = v121;
                      if (v122 < 0)
                        v107 = (void **)v121[0];
                      sub_20E8C003C((uint64_t)v114, "%s", (const char *)v107);
                      sub_20E863570((uint64_t)v114);
                    }
                    sub_20E863570((uint64_t)v114);
                    v108 = v120;
                    if (v120)
                    {
                      v109 = (unint64_t *)&v120->__shared_owners_;
                      do
                        v110 = __ldaxr(v109);
                      while (__stlxr(v110 - 1, v109));
                      if (!v110)
                      {
                        ((void (*)(std::__shared_weak_count *))v108->__on_zero_shared)(v108);
                        std::__shared_weak_count::__release_weak(v108);
                      }
                    }
                    if (SHIBYTE(v122) < 0)
                      operator delete(v121[0]);
                    v123[0] = *MEMORY[0x24BEDB7F0];
                    v111 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
                    *(_QWORD *)((char *)v123 + *(_QWORD *)(v123[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
                    v124 = v111;
                    v125 = MEMORY[0x24BEDB848] + 16;
                    if (v132 < 0)
                      operator delete(__p);
                    std::streambuf::~streambuf();
                    std::iostream::~basic_iostream();
                    result = (_QWORD *)MEMORY[0x212BC6290](v135);
                    goto LABEL_175;
                  }
                }
                memcpy(v58, v35, v57);
                goto LABEL_101;
              }
            }
            memmove(v49, v37, v38);
            goto LABEL_82;
          }
        }
        memmove(v42, v40, v41);
        goto LABEL_74;
      }
    }
    memmove(v21, v32, v20);
    goto LABEL_53;
  }
  sub_20E863438((uint64_t)v123);
  v5 = v124;
  *(_DWORD *)((char *)&v124 + *(_QWORD *)(v124 - 24) + 8) = *(_DWORD *)((_BYTE *)&v124 + *(_QWORD *)(v124 - 24) + 8) & 0xFFFFFEFB | 4;
  *(_QWORD *)&v126[*(_QWORD *)(v5 - 24)] = 6;
  v6 = *a2;
  v7 = a2[1];
  if (*a2 != v7)
  {
    v8 = (std::locale::id *)MEMORY[0x24BEDB350];
    do
    {
      v9 = (_QWORD *)std::ostream::operator<<();
      sub_20E86A980(v9, (uint64_t)",", 1);
      v10 = (_QWORD *)std::ostream::operator<<();
      sub_20E86A980(v10, (uint64_t)",", 1);
      v11 = (_QWORD *)std::ostream::operator<<();
      sub_20E86A980(v11, (uint64_t)",", 1);
      v12 = (_QWORD *)std::ostream::operator<<();
      sub_20E86A980(v12, (uint64_t)",", 1);
      v13 = (_QWORD *)std::ostream::operator<<();
      std::ios_base::getloc((const std::ios_base *)((char *)v13 + *(_QWORD *)(*v13 - 24)));
      v14 = std::locale::use_facet((const std::locale *)__dst, v8);
      ((void (*)(const std::locale::facet *, uint64_t))v14->__vftable[2].~facet_0)(v14, 10);
      std::locale::~locale((std::locale *)__dst);
      std::ostream::put();
      std::ostream::flush();
      v6 += 24;
    }
    while (v6 != v7);
  }
  if ((v134 & 0x10) != 0)
  {
    v22 = v133;
    if (v133 < v130)
    {
      v133 = v130;
      v22 = v130;
    }
    v23 = v129;
    v15 = v22 - (_QWORD)v129;
    if (v22 - (unint64_t)v129 > 0x7FFFFFFFFFFFFFF7)
      goto LABEL_40;
  }
  else
  {
    if ((v134 & 8) == 0)
    {
      v15 = 0;
      __dst[23] = 0;
      v16 = __dst;
      goto LABEL_27;
    }
    v23 = v127;
    v15 = v128 - (_QWORD)v127;
    if (v128 - (unint64_t)v127 > 0x7FFFFFFFFFFFFFF7)
LABEL_40:
      sub_20E860B7C();
  }
  if (v15 >= 0x17)
  {
    v24 = (v15 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v15 | 7) != 0x17)
      v24 = v15 | 7;
    v25 = v24 + 1;
    v16 = operator new(v24 + 1);
    *(_QWORD *)&__dst[8] = v15;
    *(_QWORD *)&__dst[16] = v25 | 0x8000000000000000;
    *(_QWORD *)__dst = v16;
  }
  else
  {
    __dst[23] = v15;
    v16 = __dst;
    if (!v15)
      goto LABEL_27;
  }
  memmove(v16, v23, v15);
LABEL_27:
  v16[v15] = 0;
  v26 = (_QWORD *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 128) + 16))(*(_QWORD *)(a1 + 128));
  if (__dst[23] >= 0)
    v27 = __dst;
  else
    v27 = *(_BYTE **)__dst;
  if (__dst[23] >= 0)
    v28 = __dst[23];
  else
    v28 = *(_QWORD *)&__dst[8];
  sub_20E86A980(v26, (uint64_t)v27, v28);
  if ((__dst[23] & 0x80000000) != 0)
    operator delete(*(void **)__dst);
  v123[0] = *MEMORY[0x24BEDB7F0];
  v29 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  *(_QWORD *)((char *)v123 + *(_QWORD *)(v123[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
  v124 = v29;
  v125 = MEMORY[0x24BEDB848] + 16;
  if (v132 < 0)
    operator delete(__p);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return (_QWORD *)MEMORY[0x212BC6290](v135);
}

void sub_20EFF7F98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,char a28)
{
  uint64_t v28;

  if (*(_BYTE *)(v28 - 168) && *(char *)(v28 - 169) < 0)
    operator delete(*(void **)(v28 - 192));
  __cxa_guard_abort(&qword_254A4A510);
  sub_20E863714((uint64_t)&a13);
  if (a27 < 0)
  {
    operator delete(__p);
    sub_20E863784((uint64_t)&a28);
    _Unwind_Resume(a1);
  }
  sub_20E863784((uint64_t)&a28);
  _Unwind_Resume(a1);
}

void sub_20EFF8150()
{
  JUMPOUT(0x212BC6398);
}

void sub_20EFF8164(uint64_t *a1@<X1>, uint64_t *a2@<X2>, uint64_t *a3@<X3>, uint64_t a4@<X4>, uint64_t **a5@<X5>, uint64_t a6@<X8>)
{
  sub_20E8A7DB8(a1, a2, a3, a4, a5, a6);
}

unint64_t sub_20EFF817C()
{
  return (unint64_t)((double)std::chrono::system_clock::now().__d_.__rep_ / 1000000.0);
}

void sub_20EFF81A8(uint64_t a1@<X8>)
{
  _OWORD *v2;
  __int128 v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  _QWORD v9[2];
  _OWORD v10[2];
  int v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  sub_20E8965F4();
  v8 = v6;
  sub_20E893368((unsigned int *)v10, &v8);
  v9[0] = (LODWORD(v10[0]) | ((unint64_t)BYTE4(v10[0]) << 32) | ((unint64_t)BYTE5(v10[0]) << 40)) & 0xFFFFFFFFFFFFFFLL | ((unint64_t)BYTE7(v10[0]) << 56) | ((unint64_t)(HIWORD(DWORD1(v10[0])) & 0xF | 0x40u) << 48);
  v9[1] = ((unint64_t)BYTE12(v10[0]) << 32) | ((unint64_t)BYTE13(v10[0]) << 40) | DWORD2(v10[0]) & 0xFFFFFF00 | ((unint64_t)HIDWORD(v10[0]) << 32) & 0xFF00000000000000 | ((unint64_t)BYTE14(v10[0]) << 48) | BYTE8(v10[0]) & 0x3F | 0x80;
  sub_2102323F4((unsigned __int8 *)v9, v10);
  v2 = operator new(0x28uLL);
  *(_QWORD *)a1 = v2;
  *(_OWORD *)(a1 + 8) = xmmword_2102E0950;
  v3 = v10[1];
  *v2 = v10[0];
  v2[1] = v3;
  *((_DWORD *)v2 + 8) = v11;
  *((_BYTE *)v2 + 36) = 0;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)())v7->__on_zero_shared)();
      std::__shared_weak_count::__release_weak(v7);
    }
  }
}

void sub_20EFF82EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E896798((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20EFF8300(uint64_t a1)
{
  char **v2;
  char *v3;
  char *v4;
  char *v5;
  char *v6;
  char *v7;
  char *v8;
  char *v9;
  char *v10;

  *(_BYTE *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0x404E000000000000;
  *(_QWORD *)(a1 + 16) = 0;
  v2 = (char **)(a1 + 16);
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  v3 = (char *)operator new(0xA0uLL);
  *v2 = v3;
  v4 = v3 + 160;
  *(_QWORD *)(a1 + 32) = v3 + 160;
  memset_pattern16(v3, &unk_210398D60, 0xA0uLL);
  *(_QWORD *)(a1 + 24) = v4;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0x404E000000000000;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  v5 = (char *)operator new(0xA0uLL);
  *(_QWORD *)(a1 + 72) = v5;
  v6 = v5 + 160;
  *(_QWORD *)(a1 + 88) = v5 + 160;
  memset_pattern16(v5, &unk_210398D60, 0xA0uLL);
  *(_QWORD *)(a1 + 80) = v6;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 120) = 0x404E000000000000;
  *(_QWORD *)(a1 + 136) = 0;
  *(_QWORD *)(a1 + 144) = 0;
  *(_QWORD *)(a1 + 128) = 0;
  v7 = (char *)operator new(0xA0uLL);
  *(_QWORD *)(a1 + 128) = v7;
  v8 = v7 + 160;
  *(_QWORD *)(a1 + 144) = v7 + 160;
  memset_pattern16(v7, &unk_210398D60, 0xA0uLL);
  *(_QWORD *)(a1 + 136) = v8;
  *(_QWORD *)(a1 + 152) = 0;
  *(_QWORD *)(a1 + 160) = 0;
  *(_QWORD *)(a1 + 168) = 0;
  *(_QWORD *)(a1 + 176) = 0x404E000000000000;
  *(_QWORD *)(a1 + 192) = 0;
  *(_QWORD *)(a1 + 200) = 0;
  *(_QWORD *)(a1 + 184) = 0;
  v9 = (char *)operator new(0xA0uLL);
  *(_QWORD *)(a1 + 184) = v9;
  v10 = v9 + 160;
  *(_QWORD *)(a1 + 200) = v9 + 160;
  memset_pattern16(v9, &unk_210398D60, 0xA0uLL);
  *(_QWORD *)(a1 + 192) = v10;
  *(_QWORD *)(a1 + 216) = 0;
  *(_QWORD *)(a1 + 224) = 0;
  *(_QWORD *)(a1 + 208) = 0;
  return a1;
}

void sub_20EFF842C(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void *v2;
  void **v3;
  void *v4;
  void *v6;
  void *v7;

  v4 = v2;
  v1[17] = v4;
  operator delete(v4);
  v6 = (void *)v1[9];
  if (v6)
  {
    v1[10] = v6;
    operator delete(v6);
    v7 = *v3;
    if (!*v3)
LABEL_3:
      _Unwind_Resume(a1);
  }
  else
  {
    v7 = *v3;
    if (!*v3)
      goto LABEL_3;
  }
  v1[3] = v7;
  operator delete(v7);
  _Unwind_Resume(a1);
}

uint64_t sub_20EFF8490(uint64_t a1, double a2)
{
  char *v4;
  uint64_t v5;
  char *v6;
  char *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  char *v11;
  char *v12;

  *(double *)a1 = a2;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  v4 = (char *)operator new(0x1C20uLL);
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 24) = v4 + 7200;
  v5 = -7200;
  do
  {
    v6 = &v4[v5];
    *((_OWORD *)v6 + 450) = xmmword_21030D330;
    *((_QWORD *)v6 + 902) = 0;
    *((_QWORD *)v6 + 904) = 0;
    *((_QWORD *)v6 + 903) = 0;
    *((_QWORD *)v6 + 905) = 0xBFF0000000000000;
    *((_QWORD *)v6 + 906) = 0;
    *((_QWORD *)v6 + 908) = 0;
    *((_QWORD *)v6 + 907) = 0;
    v5 += 72;
  }
  while (v5);
  *(_QWORD *)(a1 + 16) = v4 + 7200;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(double *)(a1 + 56) = a2;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  v7 = (char *)operator new(0xC80uLL);
  *(_QWORD *)(a1 + 64) = v7;
  v8 = v7 + 3200;
  *(_QWORD *)(a1 + 80) = v7 + 3200;
  bzero(v7, 0xC80uLL);
  *(_QWORD *)(a1 + 72) = v8;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  *(double *)(a1 + 112) = a2;
  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 136) = 0;
  *(_QWORD *)(a1 + 120) = 0;
  v9 = (char *)operator new(0x3840uLL);
  *(_QWORD *)(a1 + 120) = v9;
  *(_QWORD *)(a1 + 136) = v9 + 14400;
  v10 = -14400;
  do
  {
    v11 = &v9[v10];
    *((_QWORD *)v11 + 1800) = 0;
    v12 = &v9[v10 + 14408];
    *((_OWORD *)v12 + 4) = xmmword_210398E18;
    *((_OWORD *)v12 + 5) = unk_210398E28;
    *((_OWORD *)v12 + 6) = xmmword_210398E38;
    *((_OWORD *)v12 + 7) = unk_210398E48;
    *(_OWORD *)v12 = xmmword_210398DD8;
    *((_OWORD *)v12 + 1) = unk_210398DE8;
    *((_OWORD *)v12 + 2) = xmmword_210398DF8;
    *((_OWORD *)v12 + 3) = unk_210398E08;
    *((_QWORD *)v11 + 1817) = 0;
    v10 += 144;
  }
  while (v10);
  *(_QWORD *)(a1 + 128) = v9 + 14400;
  *(_QWORD *)(a1 + 152) = 0;
  *(_QWORD *)(a1 + 160) = 0;
  *(_QWORD *)(a1 + 144) = 0;
  return a1;
}

void sub_20EFF85E4(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void *v2;
  void *v4;

  v1[9] = v2;
  operator delete(v2);
  v4 = (void *)v1[1];
  if (v4)
  {
    v1[2] = v4;
    operator delete(v4);
  }
  _Unwind_Resume(a1);
}

void sub_20EFF8618(char **a1, uint64_t a2)
{
  unint64_t v4;
  char *v5;
  uint64_t v6;
  char *v7;
  char *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;

  v5 = a1[1];
  v4 = (unint64_t)a1[2];
  if ((unint64_t)v5 < v4)
  {
    *(_QWORD *)v5 = *(_QWORD *)a2;
    v6 = *(_QWORD *)(a2 + 8);
    *((_DWORD *)v5 + 4) = *(_DWORD *)(a2 + 16);
    *((_QWORD *)v5 + 1) = v6;
    *((_DWORD *)v5 + 5) = *(_DWORD *)(a2 + 20);
    v7 = v5 + 24;
LABEL_3:
    a1[1] = v7;
    return;
  }
  v8 = *a1;
  v9 = 0xAAAAAAAAAAAAAAABLL * ((v5 - *a1) >> 3);
  v10 = v9 + 1;
  if (v9 + 1 > 0xAAAAAAAAAAAAAAALL)
    sub_20E867F44();
  v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v4 - (_QWORD)v8) >> 3);
  if (2 * v11 > v10)
    v10 = 2 * v11;
  if (v11 >= 0x555555555555555)
    v12 = 0xAAAAAAAAAAAAAAALL;
  else
    v12 = v10;
  if (v12 > 0xAAAAAAAAAAAAAAALL)
    sub_20E877A38();
  v13 = 24 * v12;
  v14 = (char *)operator new(24 * v12);
  v15 = &v14[24 * v9];
  *(_QWORD *)v15 = *(_QWORD *)a2;
  *((_QWORD *)v15 + 1) = *(_QWORD *)(a2 + 8);
  *((_DWORD *)v15 + 4) = *(_DWORD *)(a2 + 16);
  *((_DWORD *)v15 + 5) = *(_DWORD *)(a2 + 20);
  v7 = v15 + 24;
  if (v5 != v8)
  {
    v16 = 0;
    do
    {
      v17 = &v15[v16];
      *((_QWORD *)v17 - 3) = *(_QWORD *)&v5[v16 - 24];
      v18 = *(_QWORD *)&v5[v16 - 16];
      *((_DWORD *)v17 - 2) = *(_DWORD *)&v5[v16 - 8];
      *((_QWORD *)v17 - 2) = v18;
      *((_DWORD *)v17 - 1) = *(_DWORD *)&v5[v16 - 4];
      v16 -= 24;
    }
    while (&v5[v16] != v8);
    v15 += v16;
  }
  *a1 = v15;
  a1[1] = v7;
  a1[2] = &v14[v13];
  if (!v8)
    goto LABEL_3;
  operator delete(v8);
  a1[1] = v7;
}

_QWORD *sub_20EFF8794(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  v2 = (void *)a1[23];
  if (v2)
  {
    a1[24] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[16];
  if (v3)
  {
    a1[17] = v3;
    operator delete(v3);
  }
  v4 = (void *)a1[9];
  if (v4)
  {
    a1[10] = v4;
    operator delete(v4);
  }
  v5 = (void *)a1[2];
  if (v5)
  {
    a1[3] = v5;
    operator delete(v5);
  }
  return a1;
}

uint64_t sub_20EFF87F4(uint64_t a1)
{
  uint64_t v2;
  char v4;

  v2 = *(unsigned int *)(a1 + 168);
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, uint64_t))off_24C9F6B38[v2])(&v4, a1);
  *(_DWORD *)(a1 + 168) = -1;
  return a1;
}

uint64_t sub_20EFF884C(uint64_t a1, uint64_t a2)
{
  void *v4;
  _QWORD *v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  v5 = (_QWORD *)(a1 + 16);
  v4 = *(void **)(a1 + 16);
  if (v4)
  {
    *(_QWORD *)(a1 + 24) = v4;
    operator delete(v4);
    *v5 = 0;
    v5[1] = 0;
    v5[2] = 0;
  }
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  v7 = *(void **)(a1 + 72);
  *(_QWORD *)(a1 + 40) = v6;
  v8 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a1 + 48) = v8;
  v9 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a2 + 56) = 0;
  *(_QWORD *)(a1 + 56) = v9;
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  if (v7)
  {
    *(_QWORD *)(a1 + 80) = v7;
    operator delete(v7);
    *(_QWORD *)(a1 + 72) = 0;
    *(_QWORD *)(a1 + 80) = 0;
    *(_QWORD *)(a1 + 88) = 0;
  }
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  v10 = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a2 + 72) = 0;
  *(_QWORD *)(a2 + 80) = 0;
  *(_QWORD *)(a2 + 88) = 0;
  *(_QWORD *)(a2 + 96) = 0;
  v11 = *(void **)(a1 + 128);
  *(_QWORD *)(a1 + 96) = v10;
  v12 = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a2 + 104) = 0;
  *(_QWORD *)(a1 + 104) = v12;
  v13 = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a2 + 112) = 0;
  *(_QWORD *)(a1 + 112) = v13;
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  if (v11)
  {
    *(_QWORD *)(a1 + 136) = v11;
    operator delete(v11);
    *(_QWORD *)(a1 + 128) = 0;
    *(_QWORD *)(a1 + 136) = 0;
    *(_QWORD *)(a1 + 144) = 0;
  }
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  v14 = *(_QWORD *)(a2 + 152);
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  *(_QWORD *)(a2 + 128) = 0;
  *(_QWORD *)(a2 + 136) = 0;
  *(_QWORD *)(a2 + 144) = 0;
  *(_QWORD *)(a2 + 152) = 0;
  v15 = *(void **)(a1 + 184);
  *(_QWORD *)(a1 + 152) = v14;
  v16 = *(_QWORD *)(a2 + 160);
  *(_QWORD *)(a2 + 160) = 0;
  *(_QWORD *)(a1 + 160) = v16;
  v17 = *(_QWORD *)(a2 + 168);
  *(_QWORD *)(a2 + 168) = 0;
  *(_QWORD *)(a1 + 168) = v17;
  *(_QWORD *)(a1 + 176) = *(_QWORD *)(a2 + 176);
  if (v15)
  {
    *(_QWORD *)(a1 + 192) = v15;
    operator delete(v15);
    *(_QWORD *)(a1 + 184) = 0;
    *(_QWORD *)(a1 + 192) = 0;
    *(_QWORD *)(a1 + 200) = 0;
  }
  *(_OWORD *)(a1 + 184) = *(_OWORD *)(a2 + 184);
  v18 = *(_QWORD *)(a2 + 208);
  *(_QWORD *)(a1 + 200) = *(_QWORD *)(a2 + 200);
  *(_QWORD *)(a2 + 184) = 0;
  *(_QWORD *)(a2 + 192) = 0;
  *(_QWORD *)(a2 + 200) = 0;
  *(_QWORD *)(a2 + 208) = 0;
  *(_QWORD *)(a1 + 208) = v18;
  v19 = *(_QWORD *)(a2 + 216);
  *(_QWORD *)(a2 + 216) = 0;
  *(_QWORD *)(a1 + 216) = v19;
  v20 = *(_QWORD *)(a2 + 224);
  *(_QWORD *)(a2 + 224) = 0;
  *(_QWORD *)(a1 + 224) = v20;
  return a1;
}

uint64_t sub_20EFF89E0(uint64_t a1, __int128 *a2, __int128 *a3, __int128 *a4, __int128 *a5)
{
  char *v10;
  char *v11;
  __int128 v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  __int128 v26;
  __int128 v27;
  __int128 *v28;
  uint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *p_shared_owners;
  __int128 v32;
  unint64_t v33;
  __int128 v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  __int128 v38;
  _QWORD *v39;
  _QWORD *v40;
  _QWORD *v41;
  uint64_t v42;
  _QWORD *v43;
  _QWORD *v44;
  unint64_t v45;
  __int128 *v46;
  uint64_t v47;
  uint64_t v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  uint64_t v53;
  char v54;
  __int128 v55;
  uint64_t v56;
  __int128 v57;
  uint64_t v58;
  __int128 v59;
  uint64_t v60;
  __int128 v61;
  uint64_t v62;
  __int128 v63;
  uint64_t v64;
  __int128 v65;
  char v66;
  std::string v67;
  _BYTE v68[32];
  uint64_t v69;
  __int128 v70;
  uint64_t v71;
  __int128 v72;
  uint64_t v73;
  uint64_t v74;
  __int128 v75;
  uint64_t v76;
  __int128 v77;
  uint64_t v78;
  int v79;
  uint64_t v80;
  std::string __p;
  uint64_t v82;
  __int128 v83;
  uint64_t v84;
  uint64_t v85;
  __int128 v86;
  uint64_t v87;
  __int128 v88;
  uint64_t v89;
  uint64_t v90;
  __int128 v91;
  uint64_t v92;
  __int128 v93;
  uint64_t v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  uint64_t v98;
  char v99;
  void *v100[2];
  uint64_t v101;
  __int128 v102;
  uint64_t v103;
  __int128 v104;
  uint64_t v105;
  __int128 v106;
  uint64_t v107;
  __int128 v108;
  uint64_t v109;
  uint64_t (**v110)();
  __int128 v111;
  uint64_t (**v112)();
  __int128 v113;
  uint64_t (**v114)();
  __int128 v115;
  __int128 v116;
  uint64_t v117;
  char v118;
  uint64_t (**v119)();
  _QWORD *v120;
  uint64_t (**v121)();
  _QWORD *v122;
  uint64_t v123;

  v123 = *MEMORY[0x24BDAC8D0];
  *(_OWORD *)a1 = xmmword_210398D50;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  v10 = (char *)operator new(0xC800uLL);
  *(_QWORD *)(a1 + 16) = v10;
  *(_QWORD *)(a1 + 24) = v10;
  *(_QWORD *)(a1 + 32) = v10 + 51200;
  v11 = (char *)operator new(0x12C0uLL);
  *(_BYTE *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 40) = v11;
  *(_QWORD *)(a1 + 48) = v11;
  *(_QWORD *)(a1 + 56) = v11 + 4800;
  *(_BYTE *)(a1 + 368) = 0;
  v49 = a1 + 376;
  *(_BYTE *)(a1 + 376) = 0;
  *(_BYTE *)(a1 + 1016) = 0;
  if (!*(_BYTE *)a2)
    goto LABEL_51;
  v12 = a2[1];
  v50 = *a2;
  v51 = v12;
  LOBYTE(v52) = 0;
  v54 = 0;
  if (*((_BYTE *)a2 + 56))
  {
    if (*((char *)a2 + 55) < 0)
    {
      sub_20E860C04(&v52, *((void **)a2 + 4), *((_QWORD *)a2 + 5));
    }
    else
    {
      v52 = a2[2];
      v53 = *((_QWORD *)a2 + 6);
    }
    v54 = 1;
  }
  if (*((char *)a5 + 23) < 0)
  {
    sub_20E860C04(&v55, *(void **)a5, *((_QWORD *)a5 + 1));
  }
  else
  {
    v55 = *a5;
    v56 = *((_QWORD *)a5 + 2);
  }
  memset(&__p, 0, sizeof(__p));
  sub_20E8A9678(&__p, (std::string *)"diagnostics", (std::string *)"");
  if (*((char *)a3 + 23) < 0)
  {
    sub_20E860C04(&v57, *(void **)a3, *((_QWORD *)a3 + 1));
  }
  else
  {
    v57 = *a3;
    v58 = *((_QWORD *)a3 + 2);
  }
  sub_20E8A944C((uint64_t)&v57, (std::__fs::filesystem::path *)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  LOBYTE(v59) = 0;
  LOBYTE(v70) = 0;
  v13 = (_QWORD *)operator new();
  sub_210220838((uint64_t)v13, "ManualDiagnostics", 0x1388uLL, 0);
  *v13 = &off_24CA1E9F0;
  v13[1] = &unk_24CA1EA38;
  v14 = v13 + 1;
  v95 = v50;
  v96 = v51;
  LOBYTE(v97) = 0;
  v99 = 0;
  if (v54)
  {
    v97 = v52;
    v98 = v53;
    v53 = 0;
    v52 = 0uLL;
    v99 = 1;
  }
  *(_OWORD *)v100 = v55;
  v15 = v56;
  v56 = 0;
  v55 = 0uLL;
  v102 = v57;
  v101 = v15;
  v103 = v58;
  v57 = 0uLL;
  v58 = 0;
  LOBYTE(v104) = 0;
  v118 = 0;
  if ((_BYTE)v70)
  {
    v104 = v59;
    v105 = v60;
    v60 = 0;
    v59 = 0uLL;
    v106 = v61;
    v107 = v62;
    v61 = 0uLL;
    v16 = v64;
    v108 = v63;
    v62 = 0;
    v63 = 0uLL;
    v64 = 0;
    v109 = v16;
    v110 = &off_24CA1F288;
    v17 = *(_OWORD *)v68;
    v111 = v65;
    v65 = 0uLL;
    v113 = *(_OWORD *)&v67.__r_.__value_.__l.__data_;
    *(_OWORD *)&v67.__r_.__value_.__l.__data_ = 0uLL;
    v112 = &off_24CA1F288;
    v114 = &off_24CA1F288;
    *(_OWORD *)v68 = 0uLL;
    v117 = v69;
    v115 = v17;
    v116 = *(_OWORD *)&v68[16];
    v118 = 1;
  }
  v119 = &off_24C9B1898;
  v18 = (_QWORD *)operator new();
  *v18 = &off_24CA1E9A8;
  v18[1] = v14;
  v120 = v18;
  if (!*(_BYTE *)(a1 + 368))
  {
    v23 = v96;
    *(_OWORD *)(a1 + 64) = v95;
    *(_OWORD *)(a1 + 80) = v23;
    *(_BYTE *)(a1 + 96) = 0;
    *(_BYTE *)(a1 + 120) = 0;
    if (v99)
    {
      *(_OWORD *)(a1 + 96) = v97;
      *(_QWORD *)(a1 + 112) = v98;
      v98 = 0;
      v97 = 0uLL;
      *(_BYTE *)(a1 + 120) = 1;
    }
    v24 = *(_OWORD *)v100;
    *(_BYTE *)(a1 + 176) = 0;
    *(_OWORD *)(a1 + 128) = v24;
    *(_QWORD *)(a1 + 144) = v101;
    v100[1] = 0;
    v101 = 0;
    v100[0] = 0;
    *(_OWORD *)(a1 + 152) = v102;
    *(_QWORD *)(a1 + 168) = v103;
    v102 = 0uLL;
    v103 = 0;
    *(_BYTE *)(a1 + 344) = 0;
    if (v118)
    {
      *(_OWORD *)(a1 + 176) = v104;
      *(_QWORD *)(a1 + 192) = v105;
      v105 = 0;
      v104 = 0uLL;
      *(_OWORD *)(a1 + 200) = v106;
      *(_QWORD *)(a1 + 216) = v107;
      v106 = 0uLL;
      v25 = v109;
      *(_OWORD *)(a1 + 224) = v108;
      v107 = 0;
      v108 = 0uLL;
      v109 = 0;
      *(_QWORD *)(a1 + 240) = v25;
      *(_QWORD *)(a1 + 248) = &off_24CA1F288;
      v26 = v115;
      *(_OWORD *)(a1 + 256) = v111;
      v111 = 0uLL;
      *(_QWORD *)(a1 + 272) = &off_24CA1F288;
      *(_OWORD *)(a1 + 280) = v113;
      v113 = 0uLL;
      *(_QWORD *)(a1 + 296) = &off_24CA1F288;
      v115 = 0uLL;
      v27 = v116;
      *(_QWORD *)(a1 + 336) = v117;
      *(_OWORD *)(a1 + 304) = v26;
      *(_OWORD *)(a1 + 320) = v27;
      *(_BYTE *)(a1 + 344) = 1;
    }
    *(_QWORD *)(a1 + 352) = &off_24C9B1898;
    *(_QWORD *)(a1 + 360) = v18;
    *(_BYTE *)(a1 + 368) = 1;
LABEL_33:
    v120 = 0;
    sub_20EFFA30C((uint64_t)&v104);
    if ((SHIBYTE(v103) & 0x80000000) == 0)
      goto LABEL_25;
    goto LABEL_34;
  }
  sub_20EFFA434(a1 + 64, (uint64_t)&v95);
  v19 = v120;
  v120 = 0;
  v20 = *(_QWORD *)(a1 + 360);
  *(_QWORD *)(a1 + 360) = v19;
  if (!v20)
    goto LABEL_33;
  (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
  v21 = v120;
  v120 = 0;
  if (v21)
  {
    (*(void (**)(_QWORD *))(*v21 + 8))(v21);
    v22 = v120;
    v120 = 0;
    if (v22)
      (*(void (**)(_QWORD *))(*v22 + 8))(v22);
  }
  sub_20EFFA30C((uint64_t)&v104);
  if ((SHIBYTE(v103) & 0x80000000) == 0)
  {
LABEL_25:
    if ((SHIBYTE(v101) & 0x80000000) == 0)
      goto LABEL_26;
    goto LABEL_35;
  }
LABEL_34:
  operator delete((void *)v102);
  if ((SHIBYTE(v101) & 0x80000000) == 0)
  {
LABEL_26:
    if (!v99)
      goto LABEL_38;
    goto LABEL_36;
  }
LABEL_35:
  operator delete(v100[0]);
  if (!v99)
    goto LABEL_38;
LABEL_36:
  if (SHIBYTE(v98) < 0)
    operator delete((void *)v97);
LABEL_38:
  sub_20EFFA30C((uint64_t)&v59);
  if (SHIBYTE(v58) < 0)
  {
    operator delete((void *)v57);
    if ((SHIBYTE(v56) & 0x80000000) == 0)
    {
LABEL_40:
      if (!v54)
        goto LABEL_46;
LABEL_44:
      if (SHIBYTE(v53) < 0)
        operator delete((void *)v52);
      goto LABEL_46;
    }
  }
  else if ((SHIBYTE(v56) & 0x80000000) == 0)
  {
    goto LABEL_40;
  }
  operator delete((void *)v55);
  if (v54)
    goto LABEL_44;
LABEL_46:
  *(_QWORD *)&v95 = &off_24C9F6B88;
  *((_QWORD *)&v96 + 1) = &v95;
  (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)(a1 + 352) + 40))(a1 + 352, &v95);
  v28 = (__int128 *)*((_QWORD *)&v96 + 1);
  if (*((__int128 **)&v96 + 1) == &v95)
  {
    v29 = 4;
    v28 = &v95;
  }
  else
  {
    if (!*((_QWORD *)&v96 + 1))
      goto LABEL_51;
    v29 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v28 + 8 * v29))();
LABEL_51:
  if (!*((_BYTE *)a2 + 1))
    return a1;
  v30 = (std::__shared_weak_count *)operator new(0x20uLL);
  v30->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v30->__shared_owners_;
  v30->__shared_weak_owners_ = 0;
  v30->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9F6C08;
  v30[1].__vftable = (std::__shared_weak_count_vtbl *)&off_24C9F6AF8;
  v32 = a2[1];
  v50 = *a2;
  v51 = v32;
  LOBYTE(v52) = 0;
  v54 = 0;
  if (*((_BYTE *)a2 + 56))
  {
    if (*((char *)a2 + 55) < 0)
    {
      sub_20E860C04(&v52, *((void **)a2 + 4), *((_QWORD *)a2 + 5));
    }
    else
    {
      v52 = a2[2];
      v53 = *((_QWORD *)a2 + 6);
    }
    v54 = 1;
  }
  if (*((char *)a5 + 23) < 0)
  {
    sub_20E860C04(&v55, *(void **)a5, *((_QWORD *)a5 + 1));
  }
  else
  {
    v55 = *a5;
    v56 = *((_QWORD *)a5 + 2);
  }
  memset(&__p, 0, sizeof(__p));
  sub_20E8A9678(&__p, (std::string *)"diagnostics", (std::string *)"");
  if (*((char *)a3 + 23) < 0)
  {
    sub_20E860C04(&v57, *(void **)a3, *((_QWORD *)a3 + 1));
  }
  else
  {
    v57 = *a3;
    v58 = *((_QWORD *)a3 + 2);
  }
  sub_20E8A944C((uint64_t)&v57, (std::__fs::filesystem::path *)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if ((*((char *)a4 + 23) & 0x80000000) == 0)
      goto LABEL_65;
LABEL_67:
    sub_20E860C04(&v59, *(void **)a4, *((_QWORD *)a4 + 1));
    goto LABEL_68;
  }
  if (*((char *)a4 + 23) < 0)
    goto LABEL_67;
LABEL_65:
  v59 = *a4;
  v60 = *((_QWORD *)a4 + 2);
LABEL_68:
  *(_QWORD *)&v61 = v30 + 1;
  *((_QWORD *)&v61 + 1) = v30;
  do
    v33 = __ldxr(p_shared_owners);
  while (__stxr(v33 + 1, p_shared_owners));
  LOBYTE(v62) = 0;
  v66 = 0;
  sub_20EFF8490((uint64_t)&__p, *((double *)&v51 + 1));
  v67 = __p;
  *(_OWORD *)&__p.__r_.__value_.__r.__words[1] = 0u;
  v34 = v83;
  v83 = 0u;
  *(_OWORD *)&v68[8] = v34;
  v35 = v82;
  v36 = v84;
  v82 = 0;
  v84 = 0;
  *(_QWORD *)v68 = v35;
  *(_QWORD *)&v68[24] = v36;
  v69 = v85;
  v70 = v86;
  v37 = v89;
  v71 = v87;
  v86 = 0u;
  v38 = v88;
  v88 = 0u;
  v72 = v38;
  v87 = 0;
  v89 = 0;
  v73 = v37;
  v74 = v90;
  v75 = v91;
  v77 = v93;
  v76 = v92;
  v78 = v94;
  v79 = 0;
  sub_20EFF8300((uint64_t)&v80);
  if (*((double *)a2 + 3) >= *((double *)a2 + 2)
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Odometry/src/DataCollectionDiagnostics.cpp", 440, (uint64_t)"config.automatic_data_prior_active_duration < config.automatic_data_minimum_duration && \"We need this property to guarantee that a dataset's recording is only initiated when \" \"there is enough budget left to accommodate the window of buffered data.\"", 249, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v39 = (_QWORD *)operator new();
  sub_210220838((uint64_t)v39, "AutomaticDiagnostics", 0x1388uLL, 0);
  *v39 = &off_24CA1E9F0;
  v39[1] = &unk_24CA1EA38;
  sub_20EFFA654((uint64_t)&v95, (uint64_t)&v50);
  v121 = &off_24C9B1898;
  v40 = (_QWORD *)operator new();
  *v40 = &off_24CA1E9A8;
  v40[1] = v39 + 1;
  v122 = v40;
  if (*(_BYTE *)(a1 + 1016))
  {
    sub_20EFFAA54(v49, (uint64_t)&v95);
    v41 = v122;
    v122 = 0;
    v42 = *(_QWORD *)(a1 + 1008);
    *(_QWORD *)(a1 + 1008) = v41;
    if (v42)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v42 + 8))(v42);
      v43 = v122;
      v122 = 0;
      if (v43)
      {
        (*(void (**)(_QWORD *))(*v43 + 8))(v43);
        v44 = v122;
        v122 = 0;
        if (v44)
          (*(void (**)(_QWORD *))(*v44 + 8))(v44);
      }
      goto LABEL_79;
    }
  }
  else
  {
    sub_20EFFA654(v49, (uint64_t)&v95);
    *(_QWORD *)(a1 + 1000) = &off_24C9B1898;
    *(_QWORD *)(a1 + 1008) = v122;
    *(_BYTE *)(a1 + 1016) = 1;
  }
  v122 = 0;
LABEL_79:
  sub_20EFFAFE4((uint64_t)&v95);
  sub_20EFFAFE4((uint64_t)&v50);
  do
    v45 = __ldaxr(p_shared_owners);
  while (__stlxr(v45 - 1, p_shared_owners));
  if (!v45)
  {
    ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
    std::__shared_weak_count::__release_weak(v30);
  }
  *(_QWORD *)&v95 = &off_24C9F6C58;
  *((_QWORD *)&v96 + 1) = &v95;
  (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)(a1 + 1000) + 40))(a1 + 1000, &v95);
  v46 = (__int128 *)*((_QWORD *)&v96 + 1);
  if (*((__int128 **)&v96 + 1) == &v95)
  {
    v47 = 4;
    v46 = &v95;
    goto LABEL_87;
  }
  if (*((_QWORD *)&v96 + 1))
  {
    v47 = 5;
LABEL_87:
    (*(void (**)(void))(*(_QWORD *)v46 + 8 * v47))();
  }
  return a1;
}

