void sub_20FD24FB8()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_254A6C1E0);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A6C1E0))
  {
    sub_20FD25070();
    if (byte_254A6C38F < 0)
    {
      sub_20E860C04(&xmmword_254A6C348, (void *)xmmword_254A6C378, *((unint64_t *)&xmmword_254A6C378 + 1));
    }
    else
    {
      xmmword_254A6C348 = xmmword_254A6C378;
      qword_254A6C358 = unk_254A6C388;
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A6C348, &dword_20E81F000);
    __cxa_guard_release(&qword_254A6C1E0);
  }
}

void sub_20FD25058(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A6C1E0);
  _Unwind_Resume(a1);
}

void sub_20FD25070()
{
  unsigned __int8 v0;
  unsigned __int8 v1;

  v0 = atomic_load((unsigned __int8 *)&qword_254A6C1E8);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A6C1E8))
  {
    sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::dgn::ArchivingOptionsSample]", qword_254A6C360);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254A6C360, &dword_20E81F000);
    __cxa_guard_release(&qword_254A6C1E8);
  }
  v1 = atomic_load((unsigned __int8 *)&qword_254A6C1F0);
  if ((v1 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_254A6C1F0))
    {
      sub_21023CD84((uint64_t)qword_254A6C360, (uint64_t)&xmmword_254A6C378);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A6C378, &dword_20E81F000);
      __cxa_guard_release(&qword_254A6C1F0);
    }
  }
}

void sub_20FD25140(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A6C1F0);
  _Unwind_Resume(a1);
}

void sub_20FD25158(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A6C1E8);
  _Unwind_Resume(a1);
}

void sub_20FD25170(uint64_t a1, uint64_t *a2)
{
  _OWORD *v4;
  uint64_t v5;
  int v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  __int128 v15;
  uint64_t v16;

  v4 = *(_OWORD **)a1;
  v5 = *a2;
  v6 = *(unsigned __int8 *)(*a2 + 104);
  *(_OWORD *)(*a2 + 88) = *(_OWORD *)*(_QWORD *)a1;
  if (v6)
  {
    if (*(_BYTE *)sub_2101FF5A0((uint64_t *)v5))
    {
LABEL_3:
      v7 = (char *)sub_2101FF5A0((uint64_t *)v5);
      ++*(_QWORD *)(v5 + 112);
      *(_QWORD *)&v15 = 0;
      sub_2100DA8B0(v7, &v15);
      *((_QWORD *)v4 + 2) = v15;
      *((_BYTE *)v4 + 24) = 1;
      goto LABEL_7;
    }
  }
  else
  {
    *(_BYTE *)(v5 + 104) = 1;
    if (*(_BYTE *)sub_2101FF5A0((uint64_t *)v5))
      goto LABEL_3;
  }
  ++*(_QWORD *)(v5 + 112);
  if (*((_BYTE *)v4 + 24))
    *((_BYTE *)v4 + 24) = 0;
LABEL_7:
  v8 = *(_QWORD *)(a1 + 8);
  v9 = *a2;
  v10 = *(unsigned __int8 *)(*a2 + 104);
  *(_OWORD *)(*a2 + 88) = *(_OWORD *)v8;
  if (v10)
  {
    if (*(_BYTE *)sub_2101FF5A0((uint64_t *)v9))
    {
LABEL_9:
      v11 = (char *)sub_2101FF5A0((uint64_t *)v9);
      ++*(_QWORD *)(v9 + 112);
      *(_QWORD *)&v15 = 0;
      sub_2100DA9F8(v11, &v15);
      *(_QWORD *)(v8 + 16) = v15;
      *(_BYTE *)(v8 + 24) = 1;
      goto LABEL_13;
    }
  }
  else
  {
    *(_BYTE *)(v9 + 104) = 1;
    if (*(_BYTE *)sub_2101FF5A0((uint64_t *)v9))
      goto LABEL_9;
  }
  ++*(_QWORD *)(v9 + 112);
  if (*(_BYTE *)(v8 + 24))
    *(_BYTE *)(v8 + 24) = 0;
LABEL_13:
  v12 = *(_QWORD *)(a1 + 16);
  v13 = *a2;
  v14 = *(unsigned __int8 *)(v13 + 104);
  *(_OWORD *)(v13 + 88) = *(_OWORD *)v12;
  if (v14)
  {
    if (*(_BYTE *)sub_2101FF5A0((uint64_t *)v13))
    {
LABEL_15:
      *(_QWORD *)&v15 = 0;
      BYTE8(v15) = 0;
      v16 = *(_QWORD *)(v13 + 8);
      sub_20FD242AC((int *)&v16, v13, (uint64_t)&v15);
      *(_OWORD *)(v12 + 16) = v15;
      *(_BYTE *)(v12 + 32) = 1;
      return;
    }
  }
  else
  {
    *(_BYTE *)(v13 + 104) = 1;
    if (*(_BYTE *)sub_2101FF5A0((uint64_t *)v13))
      goto LABEL_15;
  }
  ++*(_QWORD *)(v13 + 112);
  if (*(_BYTE *)(v12 + 32))
    *(_BYTE *)(v12 + 32) = 0;
}

void sub_20FD25354(uint64_t *a1, uint64_t a2)
{
  void **v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  _QWORD v10[3];

  v10[2] = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)sub_2101FF5A0(a1))
  {
    v4 = (void **)sub_2101FF5A0(a1);
    ++a1[14];
    v9 = 0uLL;
    v8 = 0;
    sub_2100DADB0(v4, (uint64_t)&v8);
    v5 = v8;
    v10[0] = v9;
    *(_QWORD *)((char *)v10 + 7) = *(_QWORD *)((char *)&v9 + 7);
    v6 = HIBYTE(v9);
    if (*(_BYTE *)(a2 + 24))
    {
      if (*(char *)(a2 + 23) < 0)
        operator delete(*(void **)a2);
      *(_BYTE *)(a2 + 24) = 0;
    }
    v7 = v10[0];
    *(_QWORD *)a2 = v5;
    *(_QWORD *)(a2 + 8) = v7;
    *(_QWORD *)(a2 + 15) = *(_QWORD *)((char *)v10 + 7);
    *(_BYTE *)(a2 + 23) = v6;
    *(_BYTE *)(a2 + 24) = 1;
  }
  else
  {
    ++a1[14];
    if (*(_BYTE *)(a2 + 24))
    {
      if (*(char *)(a2 + 23) < 0)
        operator delete(*(void **)a2);
      *(_BYTE *)(a2 + 24) = 0;
    }
  }
}

void sub_20FD25458(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FD25478()
{
  JUMPOUT(0x212BC6398);
}

void sub_20FD2548C(uint64_t a1)
{
  char v1;
  uint64_t v2;
  uint64_t v3;
  unsigned __int8 v4;
  char v5;
  int v6;
  char v7;
  uint64_t v8;
  char v9;
  char v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  const char *v15;
  __int128 v16;
  const char *v17;
  uint64_t v18;
  const char *v19;
  uint64_t v20;
  const char *v21;
  uint64_t v22;
  uint64_t v23;
  unsigned __int8 v24;
  char v25;
  const char *v26;
  uint64_t v27;
  unsigned __int8 v28[16];
  const char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  const char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  const char *v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  char v41;
  char v42;
  std::string v43;
  char v44;
  char v45;
  uint64_t (**v46)();
  void (**v47)();
  void *v48;
  void *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  std::__shared_weak_count *v53;
  char v54;
  char v55;
  _BYTE v56[24];
  _OWORD v57[3];
  __int128 v58;
  _BYTE __p[24];
  char v60;
  _BYTE v61[23];
  _BYTE v62[23];
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  uint64_t v67;

  v67 = *MEMORY[0x24BDAC8D0];
  v2 = *(_QWORD *)(a1 + 8);
  (*(void (**)(uint64_t *__return_ptr, _QWORD, _QWORD, uint64_t))(**(_QWORD **)(**(_QWORD **)(a1 + 16) + 24)
                                                                         + 368))(&v51, *(_QWORD *)(**(_QWORD **)(a1 + 16) + 24), **(_QWORD **)(a1 + 16), 8);
  v3 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v52 + 16))(v52);
  v15 = 0;
  sub_20E9EECEC(&v46, (uint64_t *)&v15, v3, 0x2800uLL);
  v46 = &off_24CA064D0;
  v47 = (void (**)())&unk_24CA06618;
  v15 = "message_id";
  v16 = xmmword_2103B83C0;
  v17 = "export_diagnostics_command";
  v18 = 26;
  LOBYTE(v19) = 0;
  v45 = 0;
  *(_DWORD *)v56 = 1;
  sub_20E9EDADC(v50, v56);
  sub_20E9EDE6C(v50, (_QWORD *)&v16 + 1);
  v54 = 0;
  sub_20E9ED7B4(v50, &v54);
  if (v54)
  {
    if (!v45)
    {
      v56[0] = 0;
      v56[16] = 0;
      LOBYTE(v57[0]) = 0;
      BYTE8(v58) = 0;
      __p[0] = 0;
      v60 = 0;
      v19 = "event_info";
      v20 = 10;
      v21 = "cause_time";
      v22 = 10;
      LOBYTE(v23) = 0;
      v25 = 0;
      v26 = "run_options";
      v27 = 11;
      sub_20FCF2B98((uint64_t)v28, (uint64_t *)v57);
      if (v60 && (__p[23] & 0x80000000) != 0)
        operator delete(*(void **)__p);
      v45 = 1;
    }
    *(_DWORD *)v56 = 1;
    sub_20E9EDADC(v50, v56);
    *(_DWORD *)v56 = 1;
    sub_20E9EDADC(v50, v56);
    v61[0] = 0;
    sub_20E9ED7B4(v50, v61);
    if (v61[0])
    {
      if (!v25)
      {
        v23 = 0;
        v24 = 0;
        v25 = 1;
      }
      *(_DWORD *)v56 = 2;
      sub_20E9EDADC(v50, v56);
      if (*(_DWORD *)v56 < 2u)
      {
        *(_QWORD *)v56 = 0;
        v56[8] = 0;
        sub_20E9EDD84(v50, v56);
        v62[0] = 0;
        sub_20E9ED7B4(v50, v62);
        v4 = v62[0];
        v23 = *(_QWORD *)v56;
      }
      else
      {
        sub_20E9EDD84(v50, &v23);
        v56[0] = 0;
        sub_20E9ED7B4(v50, v56);
        v4 = v56[0];
      }
      v24 = v4;
    }
    else if (v25)
    {
      v25 = 0;
    }
    *(_DWORD *)v56 = 1;
    sub_20E9EDADC(v50, v56);
    v55 = 0;
    sub_20E9ED7B4(v50, &v55);
    if (v55)
    {
      if (!v42)
      {
        v29 = "size_limit";
        v30 = 10;
        v31 = 0;
        v32 = 0;
        v33 = "duration_limit";
        v34 = 14;
        v35 = 0;
        v36 = 0;
        v37 = "time_point_limit";
        v38 = 16;
        LOBYTE(v39) = 0;
        v41 = 0;
        v42 = 1;
      }
      *(_DWORD *)v56 = 1;
      sub_20E9EDADC(v50, v56);
      v56[0] = 0;
      sub_20E9ED7B4(v50, v56);
      if (v56[0])
      {
        if (!(_BYTE)v32)
        {
          v31 = 0;
          LOBYTE(v32) = 1;
        }
        sub_20E9EDE6C(v50, &v31);
      }
      else if ((_BYTE)v32)
      {
        LOBYTE(v32) = 0;
      }
      v56[0] = 0;
      sub_20E9ED7B4(v50, v56);
      if (v56[0])
      {
        if (!(_BYTE)v36)
        {
          v35 = 0;
          LOBYTE(v36) = 1;
        }
        sub_20E9EDD84(v50, &v35);
      }
      else if ((_BYTE)v36)
      {
        LOBYTE(v36) = 0;
      }
      v61[0] = 0;
      sub_20E9ED7B4(v50, v61);
      if (v61[0])
      {
        if (!v41)
        {
          v39 = 0;
          v40 = 0;
          v41 = 1;
        }
        *(_DWORD *)v56 = 2;
        sub_20E9EDADC(v50, v56);
        if (*(_DWORD *)v56 < 2u)
        {
          *(_QWORD *)v56 = 0;
          v56[8] = 0;
          sub_20E9EDD84(v50, v56);
          v62[0] = 0;
          sub_20E9ED7B4(v50, v62);
          v9 = v62[0];
          v39 = *(_QWORD *)v56;
        }
        else
        {
          sub_20E9EDD84(v50, &v39);
          v56[0] = 0;
          sub_20E9ED7B4(v50, v56);
          v9 = v56[0];
        }
        v40 = v9;
      }
      else if (v41)
      {
        v41 = 0;
      }
    }
    else if (v42)
    {
      v42 = 0;
    }
    v56[0] = 0;
    sub_20E9ED7B4(v50, v56);
    if (v56[0])
    {
      if (!v44)
      {
        memset(&v43, 0, sizeof(v43));
        v44 = 1;
      }
      sub_20E9EE280(v50, &v43);
    }
    else if (v44)
    {
      if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v43.__r_.__value_.__l.__data_);
      v44 = 0;
    }
    v8 = *((_QWORD *)&v16 + 1);
    if (!v45)
    {
      v5 = 0;
      v6 = 0;
      v7 = 1;
      goto LABEL_68;
    }
    v10 = v25;
    if (v25)
    {
      *(_QWORD *)v56 = v23;
      *(_QWORD *)&v56[8] = v24;
      v10 = 1;
    }
    else
    {
      v56[0] = 0;
    }
    v56[16] = v10;
    sub_20FCF2D18(v28, (uint64_t)v57);
    v5 = v56[0];
    *(_OWORD *)v62 = *(_OWORD *)&v56[1];
    *(_QWORD *)&v62[15] = *(_QWORD *)&v56[16];
    v63 = v57[0];
    v64 = v57[1];
    v65 = v57[2];
    v66 = v58;
    if (v60)
    {
      v1 = __p[0];
      *(_OWORD *)v61 = *(_OWORD *)&__p[1];
      *(_QWORD *)&v61[15] = *(_QWORD *)&__p[16];
      v6 = 1;
      if (!v45)
        goto LABEL_67;
    }
    else
    {
      v6 = 0;
      v1 = 0;
      if (!v45)
      {
LABEL_67:
        v7 = 0;
        goto LABEL_68;
      }
    }
    v7 = 0;
    if (v44 && SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v43.__r_.__value_.__l.__data_);
      goto LABEL_67;
    }
  }
  else
  {
    if (v45 && v44 && SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v43.__r_.__value_.__l.__data_);
    v5 = 0;
    v6 = 0;
    v7 = 1;
    v8 = *((_QWORD *)&v16 + 1);
  }
LABEL_68:
  v46 = &off_24C9B71C0;
  v47 = (void (**)())&unk_24C9B7308;
  v11 = v50;
  v50 = 0;
  if (v11)
  {
    sub_20E9EF740((_QWORD *)(v11 + 8));
    MEMORY[0x212BC6398](v11, 0x10F2C40853B94B7);
  }
  v47 = off_24C9B7428;
  if (v48)
  {
    v49 = v48;
    operator delete(v48);
  }
  v12 = v53;
  if (!v53)
    goto LABEL_76;
  p_shared_owners = (unint64_t *)&v53->__shared_owners_;
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
    sub_20FD23E60(v2);
    *(_QWORD *)v2 = v8;
    *(_BYTE *)(v2 + 8) = 0;
    *(_BYTE *)(v2 + 128) = 0;
    if ((v7 & 1) != 0)
      goto LABEL_80;
  }
  else
  {
LABEL_76:
    sub_20FD23E60(v2);
    *(_QWORD *)v2 = v8;
    *(_BYTE *)(v2 + 8) = 0;
    *(_BYTE *)(v2 + 128) = 0;
    if ((v7 & 1) != 0)
      goto LABEL_80;
  }
  *(_BYTE *)(v2 + 8) = v5;
  *(_OWORD *)(v2 + 9) = *(_OWORD *)v62;
  *(_QWORD *)(v2 + 24) = *(_QWORD *)&v62[15];
  *(_OWORD *)(v2 + 32) = v63;
  *(_OWORD *)(v2 + 48) = v64;
  *(_OWORD *)(v2 + 64) = v65;
  *(_OWORD *)(v2 + 80) = v66;
  *(_BYTE *)(v2 + 96) = 0;
  *(_BYTE *)(v2 + 120) = 0;
  if (v6)
  {
    *(_BYTE *)(v2 + 96) = v1;
    *(_OWORD *)(v2 + 97) = *(_OWORD *)v61;
    *(_QWORD *)(v2 + 112) = *(_QWORD *)&v61[15];
    *(_BYTE *)(v2 + 120) = 1;
  }
  *(_BYTE *)(v2 + 128) = 1;
LABEL_80:
  *(_BYTE *)(v2 + 136) = 1;
  *(_BYTE *)(v2 + 144) = 1;
}

void sub_20FD25BB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47,char a48,int a49,char a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,char a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  void *__p;
  char a73;
  char a74;

  if (a74 && a73 < 0)
    operator delete(__p);
  if (a50 && a48 && a47 < 0)
    operator delete(a42);
  sub_20E9EEE68(&a51);
  sub_21022EAD8((uint64_t)&a58);
  _Unwind_Resume(a1);
}

void sub_20FD25C28()
{
  JUMPOUT(0x212BC6398);
}

void sub_20FD25C3C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  char *v3;
  char *v4;
  unsigned __int8 v5;
  uint64_t v6;
  _BYTE *v7;
  char v8;
  __int128 v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  int v14;
  char v15;
  int v16;
  int v17;
  int v18;
  char *v19;
  char *v20;
  unsigned int v21;
  char v22;
  char v23;
  void *v24;
  char v25;
  void *v26;
  void *v27;
  char v28;
  int v29;
  char v30;
  char v31;
  void **v32;
  char v33;
  char v34;
  void **v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  void **v39;
  uint64_t *v40;
  void **v41;
  int v42;
  void **v43;
  void *v44;
  unsigned __int8 *v45;
  int v46;
  int v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  void **v51;
  void **v52;
  void *v53;
  _QWORD *exception;
  _QWORD *v55;
  unsigned __int8 v56;
  unsigned __int8 v57;
  unsigned __int8 v58;
  char v59;
  void *v60;
  void *v61;
  char v62;
  char v63;
  void *v64;
  char v65;
  __int128 v66;
  __int128 v67;
  char v68;
  int v69;
  void *v70;
  int v71;
  char v72;
  unsigned __int8 v73;
  char v74;
  unint64_t v75;
  int v76;
  __int128 v77;
  __int128 v78;
  uint64_t v79;
  __int128 v80;
  __int128 v81;
  uint64_t v82;
  _BYTE v83[7];
  std::string v84;
  unsigned __int8 *v85[3];
  unint64_t v86;
  char v87;
  _BYTE v88[7];
  const char *v89;
  uint64_t v90;
  char v91;
  _BYTE v92[15];
  __int128 v93;
  void *v94;
  __int128 v95;
  char v96;
  __int128 v97;
  char v98;
  _BYTE v99[15];
  void *v100;
  _BYTE v101[15];
  char v102;
  __int128 v103;
  uint64_t v104;
  __int128 v105;
  char v106;
  _BYTE v107[15];
  void *v108;
  _BYTE v109[15];
  char v110;
  char v111;
  __int128 v112;
  char v113;
  _BYTE v114[15];
  void *v115;
  _BYTE v116[15];
  char v117;
  __int128 v118;
  uint64_t v119;
  __int128 v120;
  void *v121;
  _BYTE v122[15];
  char v123;
  char v124;
  char v125;
  char v126;
  char v127;
  uint64_t (**v128)();
  uint64_t v129;
  uint64_t *v130;
  void (*v131)(uint64_t *);
  uint64_t v132;
  __int128 v133;
  __int128 v134;
  __int128 v135;
  __int128 v136;
  char v137;
  uint64_t v138;
  __int128 v139;
  void *v140[2];
  void *v141;
  _BYTE v142[24];
  void *v143[2];
  __int128 v144;
  void *v145[3];
  _BYTE v146[24];
  __int128 v147;
  char v148;
  _BYTE v149[15];
  void *v150;
  __int128 v151;
  char v152;
  __int128 v153;
  char v154;
  _BYTE v155[15];
  void *v156;
  __int128 v157;
  __int128 v158;
  uint64_t v159;
  __int128 v160;
  void *v161;
  __int128 v162;
  char v163;
  char v164;
  char v165;
  _QWORD v166[2];
  _QWORD v167[2];
  _QWORD v168[3];
  __int128 v169;
  _QWORD v170[2];
  _QWORD v171[2];
  _QWORD v172[2];
  _QWORD v173[3];
  __int128 v174;
  _BYTE __s[31];
  char v176;
  void *v177;
  char v178;
  char v179;
  void *v180;
  char v181;
  void *__p;
  char v183;
  char v184;
  char v185;
  char v186;
  uint64_t v187;

  v187 = *MEMORY[0x24BDAC8D0];
  v1 = *(_QWORD *)(a1 + 8);
  sub_2102232E4(**(std::__fs::filesystem::path ***)(a1 + 16), &v84);
  sub_2101F84CC((uint64_t *)&v84, (uint64_t *)v85);
  sub_20EB98380((uint64_t)&v139, v85[0]);
  v129 = 0x300000000;
  v128 = (uint64_t (**)())&unk_24CA1DDD0;
  v2 = operator new();
  *(_BYTE *)v2 = v139;
  *(_QWORD *)(v2 + 8) = *((_QWORD *)&v139 + 1);
  LOBYTE(v139) = 0;
  *((_QWORD *)&v139 + 1) = 0;
  v130 = (uint64_t *)v2;
  v131 = (void (*)(uint64_t *))sub_210204328;
  v132 = v2;
  v137 = 0;
  v138 = 0;
  v133 = 0u;
  v134 = 0u;
  v135 = 0u;
  LOBYTE(v136) = 0;
  sub_20EB911C0((uint64_t *)&v139 + 1, 0);
  v128 = &off_24CA062E0;
  sub_2101FF2E8((uint64_t)&v128);
  *(_QWORD *)&v136 = "version";
  *((_QWORD *)&v136 + 1) = 7;
  if (!v137)
    v137 = 1;
  v3 = (char *)sub_2101FF5A0((uint64_t *)&v128);
  ++v138;
  *(_QWORD *)&v139 = 0;
  sub_2100DA8B0(v3, &v139);
  if (DWORD1(v139))
  {
    exception = __cxa_allocate_exception(8uLL);
    *exception = &off_24CA1FAE0;
    __cxa_throw(exception, (struct type_info *)&unk_24CA1FAF8, (void (*)(void *))std::exception::~exception);
  }
  sub_2101FF2E8((uint64_t)&v128);
  *(_QWORD *)&v136 = "response_id";
  *((_QWORD *)&v136 + 1) = 11;
  if (!v137)
    v137 = 1;
  if (*(_BYTE *)sub_2101FF5A0((uint64_t *)&v128))
  {
    v4 = (char *)sub_2101FF5A0((uint64_t *)&v128);
    ++v138;
    *(_QWORD *)&v139 = 0;
    sub_2100DA8B0(v4, &v139);
    v5 = v139;
    v75 = v139 & 0xFFFFFFFFFFFFFF00;
    v6 = 1;
  }
  else
  {
    v6 = 0;
    v5 = 0;
    v75 = 0;
    ++v138;
  }
  *(_QWORD *)&v136 = "export_diagnostics_response";
  *((_QWORD *)&v136 + 1) = 27;
  if (!v137)
    v137 = 1;
  v7 = (_BYTE *)sub_2101FF5A0((uint64_t *)&v128);
  v73 = v5;
  v10 = *v7;
  v74 = v6;
  if (!*v7)
  {
    v14 = 0;
    v15 = 0;
    v16 = 0;
    v71 = 0;
    v17 = 0;
    v76 = 0;
    ++v138;
    goto LABEL_75;
  }
  __s[0] = 0;
  __s[24] = 0;
  v176 = 0;
  v186 = 0;
  *(_QWORD *)&v139 = "run_results";
  *((_QWORD *)&v139 + 1) = 11;
  sub_20FCF387C((uint64_t)v140, (uint64_t)__s);
  if (v186 && v185)
  {
    if (v184)
    {
      if (v183 < 0)
        operator delete(__p);
      if (v181 < 0)
        operator delete(v180);
    }
    if (v179 && v178 < 0)
      operator delete(v177);
  }
  if (__s[24])
  {
    v11 = *(_QWORD *)__s;
    if (*(_QWORD *)__s)
    {
      v12 = *(_QWORD *)&__s[8];
      v13 = *(void **)__s;
      if (*(_QWORD *)&__s[8] != *(_QWORD *)__s)
      {
        do
        {
          if (*(char *)(v12 - 1) < 0)
            operator delete(*(void **)(v12 - 24));
          v12 -= 24;
        }
        while (v12 != v11);
        v13 = *(void **)__s;
      }
      *(_QWORD *)&__s[8] = v11;
      operator delete(v13);
    }
  }
  v18 = v129;
  sub_2101FF2E8((uint64_t)&v128);
  *(_QWORD *)&v136 = "version";
  *((_QWORD *)&v136 + 1) = 7;
  if (!v137)
    v137 = 1;
  v19 = (char *)sub_2101FF5A0((uint64_t *)&v128);
  ++v138;
  *(_QWORD *)__s = 0;
  sub_2100DA8B0(v19, __s);
  if (*(_DWORD *)&__s[4])
    goto LABEL_168;
  if (v18 >= 1)
  {
    if (v18 != 2)
    {
LABEL_41:
      v136 = v139;
      if (!v137)
        v137 = 1;
      goto LABEL_46;
    }
    *(_QWORD *)&v136 = "min_version";
    *((_QWORD *)&v136 + 1) = 11;
    if (!v137)
      v137 = 1;
    v20 = (char *)sub_2101FF5A0((uint64_t *)&v128);
    ++v138;
    *(_QWORD *)__s = 0;
    sub_2100DA8B0(v20, __s);
    v21 = *(_DWORD *)__s;
    if (!HIDWORD(*(_QWORD *)__s))
    {
      if (*(_DWORD *)__s >= 2u)
      {
        v56 = atomic_load((unsigned __int8 *)&qword_254A6C1F8);
        if ((v56 & 1) == 0 && __cxa_guard_acquire(&qword_254A6C1F8))
        {
          v57 = atomic_load((unsigned __int8 *)&qword_254A6C200);
          if ((v57 & 1) == 0 && __cxa_guard_acquire(&qword_254A6C200))
          {
            sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::dgn::ExportDiagnosticsResponseSample]", &xmmword_254A6C3A8);
            __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A6C3A8, &dword_20E81F000);
            __cxa_guard_release(&qword_254A6C200);
          }
          v58 = atomic_load((unsigned __int8 *)&qword_254A6C208);
          if ((v58 & 1) == 0 && __cxa_guard_acquire(&qword_254A6C208))
          {
            if (byte_254A6C3BF < 0)
            {
              sub_20E860C04(__s, (void *)xmmword_254A6C3A8, *((unint64_t *)&xmmword_254A6C3A8 + 1));
            }
            else
            {
              *(_OWORD *)__s = xmmword_254A6C3A8;
              *(_QWORD *)&__s[16] = unk_254A6C3B8;
            }
            sub_210236E50((std::string *)__s, "std::__1::", 10, "std::", 5uLL, 0, 0, (uint64_t)&xmmword_254A6C3C0);
            if ((__s[23] & 0x80000000) != 0)
              operator delete(*(void **)__s);
            __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A6C3C0, &dword_20E81F000);
            __cxa_guard_release(&qword_254A6C208);
          }
          if (byte_254A6C3D7 < 0)
          {
            sub_20E860C04(&xmmword_254A6C390, (void *)xmmword_254A6C3C0, *((unint64_t *)&xmmword_254A6C3C0 + 1));
          }
          else
          {
            xmmword_254A6C390 = xmmword_254A6C3C0;
            qword_254A6C3A0 = unk_254A6C3D0;
          }
          __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A6C390, &dword_20E81F000);
          __cxa_guard_release(&qword_254A6C1F8);
        }
        sub_20E9F5C70((std::string *)&xmmword_254A6C390, v21, 1u);
      }
      goto LABEL_41;
    }
LABEL_168:
    v55 = __cxa_allocate_exception(8uLL);
    *v55 = &off_24CA1FAE0;
    __cxa_throw(v55, (struct type_info *)&unk_24CA1FAF8, (void (*)(void *))std::exception::~exception);
  }
  v136 = v139;
  if (!v137)
    v137 = 1;
LABEL_46:
  *(_QWORD *)__s = v129;
  sub_20FD27034(__s, (uint64_t)&v128, v140);
  v132 = *(_QWORD *)(*((_QWORD *)&v133 + 1) - 8);
  v138 = *(_QWORD *)(v135 - 8);
  *((_QWORD *)&v133 + 1) -= 8;
  *(_QWORD *)&v135 = v135 - 8;
  v15 = v139;
  *(_QWORD *)__s = *(_QWORD *)((char *)&v139 + 1);
  *(_QWORD *)&__s[7] = *((_QWORD *)&v139 + 1);
  *(_OWORD *)&__s[15] = *(_OWORD *)v140;
  if (v142[16])
  {
    v6 = (uint64_t)v141;
    v9 = *(_OWORD *)v142;
    *(_QWORD *)&v142[8] = 0;
    v14 = 1;
    v141 = 0;
    *(_QWORD *)v142 = 0;
    v174 = *(_OWORD *)v143;
    if (v165)
      goto LABEL_48;
LABEL_54:
    v8 = 0;
    v16 = 0;
    v71 = 0;
    v69 = 0;
    v76 = 0;
    if (v142[16])
      goto LABEL_66;
    goto LABEL_74;
  }
  v14 = 0;
  v6 = 0;
  v174 = *(_OWORD *)v143;
  if (!v165)
    goto LABEL_54;
LABEL_48:
  v8 = v144;
  v173[0] = *(_QWORD *)((char *)&v144 + 1);
  v24 = v145[0];
  *(_QWORD *)((char *)v173 + 7) = *((_QWORD *)&v144 + 1);
  v172[0] = v145[1];
  *(void **)((char *)v172 + 7) = *(void **)((char *)&v145[1] + 7);
  v25 = HIBYTE(v145[2]);
  memset(v145, 0, sizeof(v145));
  v82 = *(_QWORD *)&v146[16];
  v80 = v147;
  v81 = *(_OWORD *)v146;
  v72 = v25;
  v70 = v24;
  if (!v164)
  {
    v63 = 0;
    v16 = 0;
    v71 = 0;
    v69 = 0;
    v76 = 1;
    if (v142[16])
      goto LABEL_66;
    goto LABEL_74;
  }
  v171[0] = *(_QWORD *)v149;
  *(_QWORD *)((char *)v171 + 7) = *(_QWORD *)&v149[7];
  if (v152)
  {
    v26 = v150;
    v170[0] = v151;
    *(_QWORD *)((char *)v170 + 7) = *(_QWORD *)((char *)&v151 + 7);
    v22 = HIBYTE(v151);
    v151 = 0uLL;
    v150 = 0;
    v16 = 1;
    v169 = v153;
    if (v163)
      goto LABEL_51;
  }
  else
  {
    v16 = 0;
    v26 = 0;
    v169 = v153;
    if (v163)
    {
LABEL_51:
      v59 = v154;
      v168[0] = *(_QWORD *)v155;
      v27 = v156;
      *(_QWORD *)((char *)v168 + 7) = *(_QWORD *)&v155[7];
      v167[0] = v157;
      *(_QWORD *)((char *)v167 + 7) = *(_QWORD *)((char *)&v157 + 7);
      v28 = HIBYTE(v157);
      v156 = 0;
      v157 = 0uLL;
      v79 = v159;
      v77 = v160;
      v78 = v158;
      v60 = v161;
      v61 = v27;
      *(_QWORD *)((char *)v166 + 7) = *(_QWORD *)((char *)&v162 + 7);
      v166[0] = v162;
      v62 = HIBYTE(v162);
      v63 = v148;
      v161 = 0;
      v71 = 1;
      v162 = 0uLL;
      v68 = v22;
      v64 = v26;
      v65 = v28;
      if (!v152)
        goto LABEL_65;
      goto LABEL_60;
    }
  }
  v59 = 0;
  v71 = 0;
  v68 = v22;
  v64 = v26;
  v65 = v23;
  v63 = v148;
  if (!v152)
    goto LABEL_65;
LABEL_60:
  if (SHIBYTE(v151) < 0)
  {
    v66 = v9;
    v29 = v16;
    v30 = v144;
    v31 = v139;
    operator delete(v150);
    if (SHIBYTE(v145[2]) < 0)
      operator delete(v145[0]);
    v69 = 1;
    v76 = 1;
    v15 = v31;
    v8 = v30;
    v16 = v29;
    v9 = v66;
    if (!v142[16])
      goto LABEL_74;
    goto LABEL_66;
  }
LABEL_65:
  v69 = 1;
  v76 = 1;
  if (v142[16])
  {
LABEL_66:
    v32 = (void **)v141;
    if (v141)
    {
      v67 = v9;
      v33 = v8;
      v34 = v15;
      v35 = *(void ***)v142;
      v36 = v141;
      if (*(void **)v142 != v141)
      {
        do
        {
          if (*((char *)v35 - 1) < 0)
            operator delete(*(v35 - 3));
          v35 -= 3;
        }
        while (v35 != v32);
        v36 = v141;
      }
      *(_QWORD *)v142 = v32;
      operator delete(v36);
      v15 = v34;
      v8 = v33;
      v9 = v67;
    }
  }
LABEL_74:
  v17 = v69;
LABEL_75:
  v37 = *((_QWORD *)&v133 + 1);
  v38 = v135;
  v132 = *(_QWORD *)(*((_QWORD *)&v133 + 1) - 8);
  v138 = *(_QWORD *)(v135 - 8);
  *((_QWORD *)&v133 + 1) -= 8;
  *(_QWORD *)&v135 = v135 - 8;
  v132 = *(_QWORD *)(v37 - 16);
  v138 = *(_QWORD *)(v38 - 16);
  *((_QWORD *)&v133 + 1) = v37 - 16;
  *(_QWORD *)&v135 = v38 - 16;
  v85[1] = "response_id";
  v85[2] = (unsigned __int8 *)11;
  v86 = v75 | v73;
  v87 = v74;
  *(_DWORD *)&v88[3] = *(_DWORD *)&v83[3];
  *(_DWORD *)v88 = *(_DWORD *)v83;
  v89 = "export_diagnostics_response";
  v90 = 27;
  v91 = 0;
  v127 = 0;
  v39 = (void **)v9;
  if (v10)
  {
    v91 = v15;
    *(_QWORD *)v92 = *(_QWORD *)__s;
    *(_QWORD *)&v92[7] = *(_QWORD *)&__s[7];
    v93 = *(_OWORD *)&__s[15];
    LOBYTE(v94) = 0;
    v96 = 0;
    if (v14)
    {
      v39 = 0;
      v94 = (void *)v6;
      v95 = v9;
      v96 = 1;
      v6 = 0;
    }
    v97 = v174;
    v98 = 0;
    v126 = 0;
    if (v76)
    {
      v98 = v8;
      *(_QWORD *)v99 = v173[0];
      *(_QWORD *)&v99[7] = *(_QWORD *)((char *)v173 + 7);
      v100 = v70;
      *(_QWORD *)v101 = v172[0];
      *(_QWORD *)&v101[7] = *(_QWORD *)((char *)v172 + 7);
      v102 = v72;
      v172[0] = 0;
      *(_QWORD *)((char *)v172 + 7) = 0;
      v104 = v82;
      v103 = v81;
      v105 = v80;
      v106 = 0;
      v125 = 0;
      if (v17)
      {
        v106 = v63;
        *(_QWORD *)v107 = v171[0];
        *(_QWORD *)&v107[7] = *(_QWORD *)((char *)v171 + 7);
        LOBYTE(v108) = 0;
        v111 = 0;
        if (v16)
        {
          v108 = v64;
          *(_QWORD *)v109 = v170[0];
          *(_QWORD *)&v109[7] = *(_QWORD *)((char *)v170 + 7);
          v110 = v68;
          v170[0] = 0;
          *(_QWORD *)((char *)v170 + 7) = 0;
          v111 = 1;
          v68 = 0;
          v64 = 0;
        }
        v112 = v169;
        v113 = 0;
        v124 = 0;
        if (v71)
        {
          v113 = v59;
          *(_QWORD *)v114 = v168[0];
          *(_QWORD *)&v114[7] = *(_QWORD *)((char *)v168 + 7);
          v115 = v61;
          *(_QWORD *)&v116[7] = *(_QWORD *)((char *)v167 + 7);
          *(_QWORD *)v116 = v167[0];
          v117 = v65;
          v167[0] = 0;
          *(_QWORD *)((char *)v167 + 7) = 0;
          v118 = v78;
          v119 = v79;
          v120 = v77;
          *(_QWORD *)&v122[7] = *(_QWORD *)((char *)v166 + 7);
          v121 = v60;
          *(_QWORD *)v122 = v166[0];
          v123 = v62;
          v166[0] = 0;
          *(_QWORD *)((char *)v166 + 7) = 0;
          v124 = 1;
          v65 = 0;
          v62 = 0;
          v60 = 0;
          v61 = 0;
        }
        v125 = 1;
      }
      v72 = 0;
      v70 = 0;
      v126 = 1;
    }
    v127 = 1;
  }
  v128 = (uint64_t (**)())&unk_24CA1DDD0;
  if (*((_QWORD *)&v134 + 1))
  {
    *(_QWORD *)&v135 = *((_QWORD *)&v134 + 1);
    operator delete(*((void **)&v134 + 1));
  }
  if ((_QWORD)v133)
  {
    *((_QWORD *)&v133 + 1) = v133;
    operator delete((void *)v133);
  }
  v40 = v130;
  v130 = 0;
  if (v40)
    v131(v40);
  *(_QWORD *)&v139 = v86;
  BYTE8(v139) = v87;
  sub_20FCF3C8C((uint64_t)&v91, (uint64_t)v140);
  if (v127)
  {
    if (v126)
    {
      if (v125)
      {
        if (v124)
        {
          if (v123 < 0)
            operator delete(v121);
          if (v117 < 0)
            operator delete(v115);
        }
        if (v111 && v110 < 0)
          operator delete(v108);
      }
      if (v102 < 0)
        operator delete(v100);
    }
    if (v96)
    {
      v41 = (void **)v94;
      if (v94)
      {
        v42 = v17;
        v43 = (void **)v95;
        v44 = v94;
        if ((void *)v95 != v94)
        {
          do
          {
            if (*((char *)v43 - 1) < 0)
              operator delete(*(v43 - 3));
            v43 -= 3;
          }
          while (v43 != v41);
          v44 = v94;
        }
        *(_QWORD *)&v95 = v41;
        operator delete(v44);
        v17 = v42;
      }
    }
  }
  if (v10)
  {
    if (v76)
    {
      if (v17)
      {
        if (v71)
        {
          if (v62 < 0)
            operator delete(v60);
          if (v65 < 0)
            operator delete(v61);
        }
        if (v16 && v68 < 0)
          operator delete(v64);
      }
      if (v72 < 0)
        operator delete(v70);
    }
    if (v14 && v6)
    {
      if (v39 != (void **)v6)
      {
        do
        {
          if (*((char *)v39 - 1) < 0)
            operator delete(*(v39 - 3));
          v39 -= 3;
        }
        while (v39 != (void **)v6);
        v39 = (void **)v6;
      }
      operator delete(v39);
    }
  }
  v45 = v85[0];
  v85[0] = 0;
  if (v45)
  {
    sub_20EB911C0((uint64_t *)v45 + 1, *v45);
    MEMORY[0x212BC6398](v45, 0x1022C40B06DCE69);
  }
  if (SHIBYTE(v84.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v84.__r_.__value_.__l.__data_);
  sub_20FD26FA8(v1);
  *(_OWORD *)v1 = v139;
  *(_BYTE *)(v1 + 16) = 0;
  *(_BYTE *)(v1 + 176) = 0;
  if (!(_BYTE)v150)
  {
    *(_BYTE *)(v1 + 184) = 1;
    *(_BYTE *)(v1 + 192) = 1;
    return;
  }
  *(_BYTE *)(v1 + 40) = 0;
  v46 = v142[0];
  if (v142[0])
  {
    *(_OWORD *)(v1 + 16) = *(_OWORD *)v140;
    *(_QWORD *)(v1 + 32) = v141;
    v140[0] = 0;
    v140[1] = 0;
    v141 = 0;
    *(_BYTE *)(v1 + 40) = 1;
  }
  *(_BYTE *)(v1 + 48) = 0;
  *(_BYTE *)(v1 + 168) = 0;
  if (v149[7])
  {
    *(_OWORD *)(v1 + 48) = *(_OWORD *)&v142[8];
    *(_BYTE *)(v1 + 64) = 0;
    *(_BYTE *)(v1 + 160) = 0;
    if (v148)
    {
      *(_BYTE *)(v1 + 88) = 0;
      v47 = BYTE8(v144);
      if (BYTE8(v144))
      {
        v48 = *(_OWORD *)v143;
        *(_QWORD *)(v1 + 80) = v144;
        *(_OWORD *)(v1 + 64) = v48;
        v143[1] = 0;
        *(_QWORD *)&v144 = 0;
        v143[0] = 0;
        *(_BYTE *)(v1 + 88) = 1;
      }
      *(_BYTE *)(v1 + 96) = 0;
      *(_BYTE *)(v1 + 152) = 0;
      if (BYTE8(v147))
      {
        v49 = *(_OWORD *)v145;
        *(void **)(v1 + 112) = v145[2];
        *(_OWORD *)(v1 + 96) = v49;
        v145[1] = 0;
        v145[0] = 0;
        *(_QWORD *)(v1 + 120) = *(_QWORD *)v146;
        v50 = *(_OWORD *)&v146[8];
        *(_QWORD *)(v1 + 144) = v147;
        *(_OWORD *)(v1 + 128) = v50;
        v145[2] = 0;
        *(_OWORD *)&v146[8] = 0uLL;
        *(_QWORD *)&v147 = 0;
        *(_BYTE *)(v1 + 152) = 1;
      }
      *(_BYTE *)(v1 + 160) = 1;
      *(_BYTE *)(v1 + 168) = 1;
      *(_BYTE *)(v1 + 176) = 1;
      *(_BYTE *)(v1 + 184) = 1;
      *(_BYTE *)(v1 + 192) = 1;
      if (v47 && SBYTE7(v144) < 0)
      {
        operator delete(v143[0]);
        v46 = v142[0];
      }
      goto LABEL_157;
    }
    *(_BYTE *)(v1 + 168) = 1;
  }
  *(_BYTE *)(v1 + 176) = 1;
  *(_BYTE *)(v1 + 184) = 1;
  *(_BYTE *)(v1 + 192) = 1;
LABEL_157:
  if (v46)
  {
    v51 = (void **)v140[0];
    if (v140[0])
    {
      v52 = (void **)v140[1];
      v53 = v140[0];
      if (v140[1] != v140[0])
      {
        do
        {
          if (*((char *)v52 - 1) < 0)
            operator delete(*(v52 - 3));
          v52 -= 3;
        }
        while (v52 != v51);
        v53 = v140[0];
      }
      v140[1] = v51;
      operator delete(v53);
    }
  }
}

void sub_20FD26C2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void *a37,uint64_t a38,int a39,__int16 a40,char a41,char a42,uint64_t *a43)
{
  unint64_t v44;
  unint64_t v45;
  void *v46;

  if (SLOBYTE(STACK[0x527]) < 0)
    operator delete((void *)STACK[0x510]);
  __cxa_guard_abort(&qword_254A6C208);
  __cxa_guard_abort(&qword_254A6C1F8);
  if (LOBYTE(STACK[0x468]))
  {
    if (LOBYTE(STACK[0x460]))
    {
      if (LOBYTE(STACK[0x458]))
      {
        if (SLOBYTE(STACK[0x457]) < 0)
          operator delete((void *)STACK[0x440]);
        if (SLOBYTE(STACK[0x417]) < 0)
          operator delete((void *)STACK[0x400]);
      }
      if (LOBYTE(STACK[0x3D8]) && SLOBYTE(STACK[0x3D7]) < 0)
        operator delete((void *)STACK[0x3C0]);
    }
    if (SLOBYTE(STACK[0x387]) < 0)
      operator delete((void *)STACK[0x370]);
  }
  if (LOBYTE(STACK[0x348]))
  {
    v44 = STACK[0x330];
    if (STACK[0x330])
    {
      v45 = STACK[0x338];
      v46 = (void *)STACK[0x330];
      if (STACK[0x338] != v44)
      {
        do
        {
          if (*(char *)(v45 - 1) < 0)
            operator delete(*(void **)(v45 - 24));
          v45 -= 24;
        }
        while (v45 != v44);
        v46 = (void *)STACK[0x330];
      }
      STACK[0x338] = v44;
      operator delete(v46);
    }
  }
  sub_2101FF284((uint64_t)&STACK[0x298]);
  sub_2101F8734(&a43);
  if (a42 < 0)
    operator delete(a37);
  _Unwind_Resume(a1);
}

void sub_20FD26FA8(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 192))
  {
    if (*(_BYTE *)(a1 + 184))
    {
      if (*(_BYTE *)(a1 + 176))
        sub_20E8DDADC(a1 + 16);
    }
    else if (*(_BYTE *)(a1 + 112))
    {
      if (*(_BYTE *)(a1 + 104))
      {
        if (*(char *)(a1 + 103) < 0)
          operator delete(*(void **)(a1 + 80));
        if (*(char *)(a1 + 71) < 0)
          operator delete(*(void **)(a1 + 48));
      }
      if (*(_BYTE *)(a1 + 40) && *(char *)(a1 + 39) < 0)
        operator delete(*(void **)(a1 + 16));
    }
    *(_BYTE *)(a1 + 192) = 0;
  }
}

void sub_20FD27034(_DWORD *a1, uint64_t a2, _OWORD *a3)
{
  int v6;
  char *v7;
  int v8;
  char *v9;
  unsigned int v10;
  int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *exception;
  unint64_t v16;

  sub_2101FF2E8(a2);
  v6 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "version";
  *(_QWORD *)(a2 + 96) = 7;
  if (!v6)
    *(_BYTE *)(a2 + 104) = 1;
  v7 = (char *)sub_2101FF5A0((uint64_t *)a2);
  ++*(_QWORD *)(a2 + 112);
  v16 = 0;
  sub_2100DA8B0(v7, &v16);
  if (HIDWORD(v16))
    goto LABEL_14;
  if (*a1 != 2)
    goto LABEL_9;
  v8 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "min_version";
  *(_QWORD *)(a2 + 96) = 11;
  if (!v8)
    *(_BYTE *)(a2 + 104) = 1;
  v9 = (char *)sub_2101FF5A0((uint64_t *)a2);
  ++*(_QWORD *)(a2 + 112);
  v16 = 0;
  sub_2100DA8B0(v9, &v16);
  v10 = v16;
  if (HIDWORD(v16))
  {
LABEL_14:
    exception = __cxa_allocate_exception(8uLL);
    *exception = &off_24CA1FAE0;
    __cxa_throw(exception, (struct type_info *)&unk_24CA1FAF8, (void (*)(void *))std::exception::~exception);
  }
  if (v16 >= 2)
  {
    sub_20FD271F0();
    sub_20E9F5C70((std::string *)&xmmword_254A6C3D8, v10, 1u);
  }
LABEL_9:
  sub_2101FF2E8(a2);
  v11 = *(unsigned __int8 *)(a2 + 104);
  *(_OWORD *)(a2 + 88) = *a3;
  if (!v11)
    *(_BYTE *)(a2 + 104) = 1;
  sub_20FD273A8((uint64_t *)a2, (uint64_t)(a3 + 1));
  v12 = *(unsigned __int8 *)(a2 + 104);
  *(_OWORD *)(a2 + 88) = a3[3];
  if (!v12)
    *(_BYTE *)(a2 + 104) = 1;
  sub_20FD27504(a2, (uint64_t)(a3 + 4));
  v13 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(v13 - 8);
  v14 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a2 + 112) = *(_QWORD *)(v14 - 8);
  *(_QWORD *)(a2 + 48) = v13 - 8;
  *(_QWORD *)(a2 + 72) = v14 - 8;
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(v13 - 16);
  *(_QWORD *)(a2 + 112) = *(_QWORD *)(v14 - 16);
  *(_QWORD *)(a2 + 48) = v13 - 16;
  *(_QWORD *)(a2 + 72) = v14 - 16;
}

void sub_20FD271F0()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_254A6C210);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A6C210))
  {
    sub_20FD272A8();
    if (byte_254A6C41F < 0)
    {
      sub_20E860C04(&xmmword_254A6C3D8, (void *)xmmword_254A6C408, *((unint64_t *)&xmmword_254A6C408 + 1));
    }
    else
    {
      xmmword_254A6C3D8 = xmmword_254A6C408;
      qword_254A6C3E8 = unk_254A6C418;
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A6C3D8, &dword_20E81F000);
    __cxa_guard_release(&qword_254A6C210);
  }
}

void sub_20FD27290(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A6C210);
  _Unwind_Resume(a1);
}

void sub_20FD272A8()
{
  unsigned __int8 v0;
  unsigned __int8 v1;

  v0 = atomic_load((unsigned __int8 *)&qword_254A6C218);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A6C218))
  {
    sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::dgn::RunResultsSample]", qword_254A6C3F0);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254A6C3F0, &dword_20E81F000);
    __cxa_guard_release(&qword_254A6C218);
  }
  v1 = atomic_load((unsigned __int8 *)&qword_254A6C220);
  if ((v1 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_254A6C220))
    {
      sub_21023CD84((uint64_t)qword_254A6C3F0, (uint64_t)&xmmword_254A6C408);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A6C408, &dword_20E81F000);
      __cxa_guard_release(&qword_254A6C220);
    }
  }
}

void sub_20FD27378(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A6C220);
  _Unwind_Resume(a1);
}

void sub_20FD27390(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A6C218);
  _Unwind_Resume(a1);
}

void sub_20FD273A8(uint64_t *a1, uint64_t a2)
{
  unsigned __int8 *v4;
  void **v5;
  void **v6;
  void **v7;
  void **v8;
  void **v9;
  void **v10;
  __int128 v11;
  uint64_t v12;
  char v13;

  if (*(_BYTE *)sub_2101FF5A0(a1))
  {
    v11 = 0uLL;
    v12 = 0;
    v13 = 0;
    v4 = (unsigned __int8 *)sub_2101FF5A0(a1);
    ++a1[14];
    sub_21020097C((uint64_t)&v13, v4, (void **)&v11);
    if (*(_BYTE *)(a2 + 24))
    {
      v5 = *(void ***)a2;
      if (*(_QWORD *)a2)
      {
        v6 = *(void ***)(a2 + 8);
        v7 = *(void ***)a2;
        if (v6 != v5)
        {
          do
          {
            if (*((char *)v6 - 1) < 0)
              operator delete(*(v6 - 3));
            v6 -= 3;
          }
          while (v6 != v5);
          v7 = *(void ***)a2;
        }
        *(_QWORD *)(a2 + 8) = v5;
        operator delete(v7);
      }
    }
    *(_OWORD *)a2 = v11;
    *(_QWORD *)(a2 + 16) = v12;
    *(_BYTE *)(a2 + 24) = 1;
  }
  else
  {
    ++a1[14];
    if (*(_BYTE *)(a2 + 24))
    {
      v8 = *(void ***)a2;
      if (*(_QWORD *)a2)
      {
        v9 = *(void ***)(a2 + 8);
        v10 = *(void ***)a2;
        if (v9 != v8)
        {
          do
          {
            if (*((char *)v9 - 1) < 0)
              operator delete(*(v9 - 3));
            v9 -= 3;
          }
          while (v9 != v8);
          v10 = *(void ***)a2;
        }
        *(_QWORD *)(a2 + 8) = v8;
        operator delete(v10);
      }
      *(_BYTE *)(a2 + 24) = 0;
    }
  }
}

void sub_20FD274F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  sub_20E89FB98(&a9);
  _Unwind_Resume(a1);
}

void sub_20FD27504(uint64_t a1, uint64_t a2)
{
  int v4;
  int v5;
  char *v6;
  int v7;
  char *v8;
  unsigned int v9;
  int v10;
  void **v11;
  int v12;
  char *v13;
  int v14;
  int v15;
  void **v16;
  int v17;
  char *v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;
  int v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  __int128 v28;
  _QWORD *exception;
  __int128 v30;
  void *__p;
  char v32;
  char v33;
  void *v34;
  char v35;
  void *v36;
  char v37;
  char v38;
  char v39;
  __int128 v40;
  __int128 v41;
  void *v42;
  __int128 v43;
  uint64_t v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  uint64_t v48;
  unsigned __int8 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  uint64_t v53;
  __int128 v54;
  uint64_t v55;
  __int128 v56;
  __int128 v57;
  uint64_t v58;
  char v59;
  char v60;

  if (!*(_BYTE *)sub_2101FF5A0((uint64_t *)a1))
  {
    ++*(_QWORD *)(a1 + 112);
    sub_20FD27A80(a2);
    return;
  }
  sub_20FD27BB0((uint64_t)&v30);
  sub_20FCF3220((uint64_t)&v40, (int *)&v30);
  if (v39)
  {
    if (!v38)
      goto LABEL_6;
    if (v37 < 0)
    {
      operator delete(v36);
      if ((v35 & 0x80000000) == 0)
      {
LABEL_6:
        if (!v33)
          goto LABEL_9;
LABEL_7:
        if (v32 < 0)
          operator delete(__p);
        goto LABEL_9;
      }
    }
    else if ((v35 & 0x80000000) == 0)
    {
      goto LABEL_6;
    }
    operator delete(v34);
    if (!v33)
      goto LABEL_9;
    goto LABEL_7;
  }
LABEL_9:
  v4 = *(_DWORD *)(a1 + 8);
  sub_2101FF2E8(a1);
  v5 = *(unsigned __int8 *)(a1 + 104);
  *(_QWORD *)(a1 + 88) = "version";
  *(_QWORD *)(a1 + 96) = 7;
  if (!v5)
    *(_BYTE *)(a1 + 104) = 1;
  v6 = (char *)sub_2101FF5A0((uint64_t *)a1);
  ++*(_QWORD *)(a1 + 112);
  *(_QWORD *)&v30 = 0;
  sub_2100DA8B0(v6, &v30);
  if (DWORD1(v30))
    goto LABEL_50;
  if (v4 < 1)
  {
    sub_2101FF2E8(a1);
    v15 = *(unsigned __int8 *)(a1 + 104);
    *(_OWORD *)(a1 + 88) = v40;
    if (!v15)
      *(_BYTE *)(a1 + 104) = 1;
    v16 = (void **)sub_2101FF5A0((uint64_t *)a1);
    ++*(_QWORD *)(a1 + 112);
    __p = 0;
    v30 = 0uLL;
    sub_2100DADB0(v16, (uint64_t)&v30);
    if (SHIBYTE(v42) < 0)
      operator delete((void *)v41);
    v41 = v30;
    v42 = __p;
    v17 = *(unsigned __int8 *)(a1 + 104);
    *(_OWORD *)(a1 + 88) = v43;
    if (!v17)
      *(_BYTE *)(a1 + 104) = 1;
    v18 = (char *)sub_2101FF5A0((uint64_t *)a1);
    ++*(_QWORD *)(a1 + 112);
    *(_QWORD *)&v30 = 0;
    sub_2100DA9F8(v18, &v30);
    v44 = v30;
    v19 = *(unsigned __int8 *)(a1 + 104);
    *(_OWORD *)(a1 + 88) = v45;
    if (!v19)
      *(_BYTE *)(a1 + 104) = 1;
    goto LABEL_36;
  }
  if (v4 == 2)
  {
    v7 = *(unsigned __int8 *)(a1 + 104);
    *(_QWORD *)(a1 + 88) = "min_version";
    *(_QWORD *)(a1 + 96) = 11;
    if (!v7)
      *(_BYTE *)(a1 + 104) = 1;
    v8 = (char *)sub_2101FF5A0((uint64_t *)a1);
    ++*(_QWORD *)(a1 + 112);
    *(_QWORD *)&v30 = 0;
    sub_2100DA8B0(v8, &v30);
    v9 = v30;
    if (!DWORD1(v30))
    {
      if (v30 >= 2)
      {
        sub_20FD27C5C();
        sub_20E9F5C70((std::string *)&xmmword_254A6C420, v9, 1u);
      }
      goto LABEL_18;
    }
LABEL_50:
    exception = __cxa_allocate_exception(8uLL);
    *exception = &off_24CA1FAE0;
    __cxa_throw(exception, (struct type_info *)&unk_24CA1FAF8, (void (*)(void *))std::exception::~exception);
  }
LABEL_18:
  sub_2101FF2E8(a1);
  v10 = *(unsigned __int8 *)(a1 + 104);
  *(_OWORD *)(a1 + 88) = v40;
  if (!v10)
    *(_BYTE *)(a1 + 104) = 1;
  v11 = (void **)sub_2101FF5A0((uint64_t *)a1);
  ++*(_QWORD *)(a1 + 112);
  __p = 0;
  v30 = 0uLL;
  sub_2100DADB0(v11, (uint64_t)&v30);
  if (SHIBYTE(v42) < 0)
    operator delete((void *)v41);
  v41 = v30;
  v42 = __p;
  v12 = *(unsigned __int8 *)(a1 + 104);
  *(_OWORD *)(a1 + 88) = v43;
  if (!v12)
    *(_BYTE *)(a1 + 104) = 1;
  v13 = (char *)sub_2101FF5A0((uint64_t *)a1);
  ++*(_QWORD *)(a1 + 112);
  *(_QWORD *)&v30 = 0;
  sub_2100DA9F8(v13, &v30);
  v44 = v30;
  v14 = *(unsigned __int8 *)(a1 + 104);
  *(_OWORD *)(a1 + 88) = v45;
  if (!v14)
    *(_BYTE *)(a1 + 104) = 1;
LABEL_36:
  sub_20FD27E14(a1, (uint64_t)&v46);
  v20 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(v20 - 8);
  v21 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(v21 - 8);
  *(_QWORD *)(a1 + 48) = v20 - 8;
  *(_QWORD *)(a1 + 72) = v21 - 8;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(v20 - 16);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(v21 - 16);
  *(_QWORD *)(a1 + 48) = v20 - 16;
  *(_QWORD *)(a1 + 72) = v21 - 16;
  sub_20FD27A80(a2);
  v22 = v41;
  *(_OWORD *)a2 = v40;
  *(_OWORD *)(a2 + 16) = v22;
  v23 = v44;
  *(_QWORD *)(a2 + 32) = v42;
  v41 = 0uLL;
  v42 = 0;
  *(_OWORD *)(a2 + 40) = v43;
  *(_QWORD *)(a2 + 56) = v23;
  *(_OWORD *)(a2 + 64) = v45;
  *(_BYTE *)(a2 + 80) = 0;
  *(_BYTE *)(a2 + 256) = 0;
  if (v60)
  {
    *(_OWORD *)(a2 + 80) = v46;
    *(_BYTE *)(a2 + 96) = 0;
    *(_BYTE *)(a2 + 120) = 0;
    v24 = v49;
    if (v49)
    {
      *(_OWORD *)(a2 + 96) = v47;
      *(_QWORD *)(a2 + 112) = v48;
      v48 = 0;
      v47 = 0uLL;
      *(_BYTE *)(a2 + 120) = 1;
    }
    v25 = v50;
    *(_BYTE *)(a2 + 144) = 0;
    *(_OWORD *)(a2 + 128) = v25;
    *(_BYTE *)(a2 + 248) = 0;
    if (v59)
    {
      v26 = v52;
      *(_OWORD *)(a2 + 144) = v51;
      v27 = v55;
      *(_QWORD *)(a2 + 176) = v53;
      *(_OWORD *)(a2 + 160) = v26;
      v52 = 0uLL;
      *(_OWORD *)(a2 + 184) = v54;
      *(_QWORD *)(a2 + 200) = v27;
      v28 = v57;
      *(_OWORD *)(a2 + 208) = v56;
      *(_OWORD *)(a2 + 224) = v28;
      *(_QWORD *)(a2 + 240) = v58;
      v53 = 0;
      v57 = 0uLL;
      v58 = 0;
      *(_BYTE *)(a2 + 248) = 1;
    }
    *(_BYTE *)(a2 + 256) = 1;
    *(_BYTE *)(a2 + 264) = 1;
    if (v24 && SHIBYTE(v48) < 0)
    {
      operator delete((void *)v47);
      if (SHIBYTE(v42) < 0)
        operator delete((void *)v41);
    }
  }
  else
  {
    *(_BYTE *)(a2 + 264) = 1;
  }
}

void sub_20FD27A2C(_Unwind_Exception *a1, uint64_t a2, void *a3, uint64_t a4, int a5, __int16 a6, char a7, char a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,...)
{
  va_list va;

  va_start(va, a20);
  if (a8 < 0)
  {
    operator delete(a3);
    sub_20FD27B14((uint64_t)va);
    _Unwind_Resume(a1);
  }
  sub_20FD27B14((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FD27A80(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 264))
    return;
  if (!*(_BYTE *)(a1 + 256))
    goto LABEL_11;
  if (!*(_BYTE *)(a1 + 248))
    goto LABEL_6;
  if (*(char *)(a1 + 247) < 0)
  {
    operator delete(*(void **)(a1 + 224));
    if ((*(char *)(a1 + 183) & 0x80000000) == 0)
    {
LABEL_6:
      if (*(_BYTE *)(a1 + 120))
        goto LABEL_7;
      goto LABEL_11;
    }
  }
  else if ((*(char *)(a1 + 183) & 0x80000000) == 0)
  {
    goto LABEL_6;
  }
  operator delete(*(void **)(a1 + 160));
  if (*(_BYTE *)(a1 + 120))
  {
LABEL_7:
    if (*(char *)(a1 + 119) < 0)
      operator delete(*(void **)(a1 + 96));
  }
LABEL_11:
  if (*(char *)(a1 + 39) < 0)
    operator delete(*(void **)(a1 + 16));
  *(_BYTE *)(a1 + 264) = 0;
}

uint64_t sub_20FD27B14(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 256))
    goto LABEL_10;
  if (!*(_BYTE *)(a1 + 248))
    goto LABEL_5;
  if ((*(char *)(a1 + 247) & 0x80000000) == 0)
  {
    if ((*(char *)(a1 + 183) & 0x80000000) == 0)
      goto LABEL_5;
LABEL_9:
    operator delete(*(void **)(a1 + 160));
    if (!*(_BYTE *)(a1 + 120))
      goto LABEL_10;
    goto LABEL_6;
  }
  operator delete(*(void **)(a1 + 224));
  if (*(char *)(a1 + 183) < 0)
    goto LABEL_9;
LABEL_5:
  if (!*(_BYTE *)(a1 + 120))
    goto LABEL_10;
LABEL_6:
  if (*(char *)(a1 + 119) < 0)
    operator delete(*(void **)(a1 + 96));
LABEL_10:
  if (*(char *)(a1 + 39) < 0)
    operator delete(*(void **)(a1 + 16));
  return a1;
}

uint64_t sub_20FD27BB0(uint64_t a1)
{
  __int128 __p;
  char v4;
  char v5;
  void *v6;
  char v7;
  void *v8;
  char v9;
  char v10;
  char v11;

  LOBYTE(__p) = 0;
  v11 = 0;
  sub_20EA5B348(a1, 0, &__p);
  if (!v11)
    return a1;
  if (!v10)
    goto LABEL_5;
  if (v9 < 0)
  {
    operator delete(v8);
    if ((v7 & 0x80000000) == 0)
    {
LABEL_5:
      if (!v5)
        return a1;
      goto LABEL_6;
    }
  }
  else if ((v7 & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(v6);
  if (!v5)
    return a1;
LABEL_6:
  if (v4 < 0)
    operator delete((void *)__p);
  return a1;
}

void sub_20FD27C48(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E89F09C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FD27C5C()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_254A6C228);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A6C228))
  {
    sub_20FD27D14();
    if (byte_254A6C467 < 0)
    {
      sub_20E860C04(&xmmword_254A6C420, (void *)xmmword_254A6C450, *((unint64_t *)&xmmword_254A6C450 + 1));
    }
    else
    {
      xmmword_254A6C420 = xmmword_254A6C450;
      qword_254A6C430 = unk_254A6C460;
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A6C420, &dword_20E81F000);
    __cxa_guard_release(&qword_254A6C228);
  }
}

void sub_20FD27CFC(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A6C228);
  _Unwind_Resume(a1);
}

void sub_20FD27D14()
{
  unsigned __int8 v0;
  unsigned __int8 v1;

  v0 = atomic_load((unsigned __int8 *)&qword_254A6C230);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A6C230))
  {
    sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::dgn::ErrorSample]", qword_254A6C438);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254A6C438, &dword_20E81F000);
    __cxa_guard_release(&qword_254A6C230);
  }
  v1 = atomic_load((unsigned __int8 *)&qword_254A6C238);
  if ((v1 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_254A6C238))
    {
      sub_21023CD84((uint64_t)qword_254A6C438, (uint64_t)&xmmword_254A6C450);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A6C450, &dword_20E81F000);
      __cxa_guard_release(&qword_254A6C238);
    }
  }
}

void sub_20FD27DE4(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A6C238);
  _Unwind_Resume(a1);
}

void sub_20FD27DFC(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A6C230);
  _Unwind_Resume(a1);
}

void sub_20FD27E14(uint64_t a1, uint64_t a2)
{
  int v4;
  int v5;
  char *v6;
  int v7;
  char *v8;
  unsigned int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  _QWORD *exception;
  void *__p[2];
  char v22;
  char v23;
  void *v24;
  char v25;
  void *v26;
  char v27;
  char v28;
  __int128 v29;
  void *v30[2];
  uint64_t v31;
  unsigned __int8 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  uint64_t v36;
  __int128 v37;
  uint64_t v38;
  __int128 v39;
  __int128 v40;
  uint64_t v41;
  char v42;

  if (*(_BYTE *)sub_2101FF5A0((uint64_t *)a1))
  {
    LOBYTE(__p[0]) = 0;
    v23 = 0;
    LOBYTE(v24) = 0;
    v28 = 0;
    sub_20FCF2E48((uint64_t)&v29, (__int128 *)__p);
    if (!v28)
      goto LABEL_5;
    if (v27 < 0)
    {
      operator delete(v26);
      if ((v25 & 0x80000000) == 0)
      {
LABEL_5:
        if (!v23)
          goto LABEL_8;
LABEL_6:
        if (v22 < 0)
          operator delete(__p[0]);
LABEL_8:
        v4 = *(_DWORD *)(a1 + 8);
        sub_2101FF2E8(a1);
        v5 = *(unsigned __int8 *)(a1 + 104);
        *(_QWORD *)(a1 + 88) = "version";
        *(_QWORD *)(a1 + 96) = 7;
        if (!v5)
          *(_BYTE *)(a1 + 104) = 1;
        v6 = (char *)sub_2101FF5A0((uint64_t *)a1);
        ++*(_QWORD *)(a1 + 112);
        __p[0] = 0;
        sub_2100DA8B0(v6, __p);
        if (!HIDWORD(__p[0]))
        {
          if (v4 < 1)
          {
            sub_2101FF2E8(a1);
            v12 = *(unsigned __int8 *)(a1 + 104);
            *(_OWORD *)(a1 + 88) = v29;
            if (!v12)
              *(_BYTE *)(a1 + 104) = 1;
            sub_20FD25354((uint64_t *)a1, (uint64_t)v30);
            v13 = *(unsigned __int8 *)(a1 + 104);
            *(_OWORD *)(a1 + 88) = v33;
            if (!v13)
              *(_BYTE *)(a1 + 104) = 1;
LABEL_37:
            sub_20FD284A4(a1, (uint64_t)&v34);
            v14 = *(_QWORD *)(a1 + 48);
            *(_QWORD *)(a1 + 32) = *(_QWORD *)(v14 - 8);
            v15 = *(_QWORD *)(a1 + 72);
            *(_QWORD *)(a1 + 112) = *(_QWORD *)(v15 - 8);
            *(_QWORD *)(a1 + 48) = v14 - 8;
            *(_QWORD *)(a1 + 72) = v15 - 8;
            *(_QWORD *)(a1 + 32) = *(_QWORD *)(v14 - 16);
            *(_QWORD *)(a1 + 112) = *(_QWORD *)(v15 - 16);
            *(_QWORD *)(a1 + 48) = v14 - 16;
            *(_QWORD *)(a1 + 72) = v15 - 16;
            if (!*(_BYTE *)(a2 + 176))
            {
LABEL_45:
              *(_OWORD *)a2 = v29;
              *(_BYTE *)(a2 + 16) = 0;
              *(_BYTE *)(a2 + 40) = 0;
              v16 = v32;
              if (v32)
              {
                *(_OWORD *)(a2 + 16) = *(_OWORD *)v30;
                *(_QWORD *)(a2 + 32) = v31;
                v30[1] = 0;
                v31 = 0;
                v30[0] = 0;
                *(_BYTE *)(a2 + 40) = 1;
              }
              v17 = v33;
              *(_BYTE *)(a2 + 64) = 0;
              *(_OWORD *)(a2 + 48) = v17;
              *(_BYTE *)(a2 + 168) = 0;
              if (v42)
              {
                v18 = v35;
                *(_OWORD *)(a2 + 64) = v34;
                *(_OWORD *)(a2 + 80) = v18;
                *(_QWORD *)(a2 + 96) = v36;
                v35 = 0uLL;
                *(_OWORD *)(a2 + 104) = v37;
                *(_QWORD *)(a2 + 120) = v38;
                v19 = v40;
                *(_OWORD *)(a2 + 128) = v39;
                *(_OWORD *)(a2 + 144) = v19;
                *(_QWORD *)(a2 + 160) = v41;
                v36 = 0;
                v40 = 0uLL;
                v41 = 0;
                *(_BYTE *)(a2 + 168) = 1;
              }
              *(_BYTE *)(a2 + 176) = 1;
              if (v16)
              {
                if (SHIBYTE(v31) < 0)
                  operator delete(v30[0]);
              }
              return;
            }
            if (*(_BYTE *)(a2 + 168))
            {
              if ((*(char *)(a2 + 167) & 0x80000000) == 0)
              {
                if ((*(char *)(a2 + 103) & 0x80000000) == 0)
                  goto LABEL_41;
LABEL_56:
                operator delete(*(void **)(a2 + 80));
                if (*(_BYTE *)(a2 + 40))
                {
LABEL_42:
                  if (*(char *)(a2 + 39) < 0)
                    operator delete(*(void **)(a2 + 16));
                }
LABEL_44:
                *(_BYTE *)(a2 + 176) = 0;
                goto LABEL_45;
              }
              operator delete(*(void **)(a2 + 144));
              if (*(char *)(a2 + 103) < 0)
                goto LABEL_56;
            }
LABEL_41:
            if (*(_BYTE *)(a2 + 40))
              goto LABEL_42;
            goto LABEL_44;
          }
          if (v4 != 2)
          {
LABEL_17:
            sub_2101FF2E8(a1);
            v10 = *(unsigned __int8 *)(a1 + 104);
            *(_OWORD *)(a1 + 88) = v29;
            if (!v10)
              *(_BYTE *)(a1 + 104) = 1;
            sub_20FD25354((uint64_t *)a1, (uint64_t)v30);
            v11 = *(unsigned __int8 *)(a1 + 104);
            *(_OWORD *)(a1 + 88) = v33;
            if (!v11)
              *(_BYTE *)(a1 + 104) = 1;
            goto LABEL_37;
          }
          v7 = *(unsigned __int8 *)(a1 + 104);
          *(_QWORD *)(a1 + 88) = "min_version";
          *(_QWORD *)(a1 + 96) = 11;
          if (!v7)
            *(_BYTE *)(a1 + 104) = 1;
          v8 = (char *)sub_2101FF5A0((uint64_t *)a1);
          ++*(_QWORD *)(a1 + 112);
          __p[0] = 0;
          sub_2100DA8B0(v8, __p);
          v9 = __p[0];
          if (!((unint64_t)__p[0] >> 32))
          {
            if (LODWORD(__p[0]) >= 2)
            {
              sub_20FD282EC();
              sub_20E9F5C70((std::string *)&xmmword_254A6C468, v9, 1u);
            }
            goto LABEL_17;
          }
        }
        exception = __cxa_allocate_exception(8uLL);
        *exception = &off_24CA1FAE0;
        __cxa_throw(exception, (struct type_info *)&unk_24CA1FAF8, (void (*)(void *))std::exception::~exception);
      }
    }
    else if ((v25 & 0x80000000) == 0)
    {
      goto LABEL_5;
    }
    operator delete(v24);
    if (!v23)
      goto LABEL_8;
    goto LABEL_6;
  }
  ++*(_QWORD *)(a1 + 112);
  if (*(_BYTE *)(a2 + 176))
  {
    if (*(_BYTE *)(a2 + 168))
    {
      if (*(char *)(a2 + 167) < 0)
        operator delete(*(void **)(a2 + 144));
      if (*(char *)(a2 + 103) < 0)
        operator delete(*(void **)(a2 + 80));
    }
    if (*(_BYTE *)(a2 + 40) && *(char *)(a2 + 39) < 0)
      operator delete(*(void **)(a2 + 16));
    *(_BYTE *)(a2 + 176) = 0;
  }
}

void sub_20FD28240(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20FCF5518((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20FD28254(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  sub_20FD28268((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20FD28268(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 168))
  {
    if ((*(char *)(a1 + 167) & 0x80000000) == 0)
    {
      if ((*(char *)(a1 + 103) & 0x80000000) == 0)
        goto LABEL_4;
LABEL_8:
      operator delete(*(void **)(a1 + 80));
      if (!*(_BYTE *)(a1 + 40))
        return a1;
      goto LABEL_5;
    }
    operator delete(*(void **)(a1 + 144));
    if (*(char *)(a1 + 103) < 0)
      goto LABEL_8;
  }
LABEL_4:
  if (!*(_BYTE *)(a1 + 40))
    return a1;
LABEL_5:
  if ((*(char *)(a1 + 39) & 0x80000000) == 0)
    return a1;
  operator delete(*(void **)(a1 + 16));
  return a1;
}

void sub_20FD282EC()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_254A6C240);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A6C240))
  {
    sub_20FD283A4();
    if (byte_254A6C4AF < 0)
    {
      sub_20E860C04(&xmmword_254A6C468, (void *)xmmword_254A6C498, *((unint64_t *)&xmmword_254A6C498 + 1));
    }
    else
    {
      xmmword_254A6C468 = xmmword_254A6C498;
      qword_254A6C478 = unk_254A6C4A8;
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A6C468, &dword_20E81F000);
    __cxa_guard_release(&qword_254A6C240);
  }
}

void sub_20FD2838C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A6C240);
  _Unwind_Resume(a1);
}

void sub_20FD283A4()
{
  unsigned __int8 v0;
  unsigned __int8 v1;

  v0 = atomic_load((unsigned __int8 *)&qword_254A6C248);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A6C248))
  {
    sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::dgn::ErrorInfoSample]", qword_254A6C480);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254A6C480, &dword_20E81F000);
    __cxa_guard_release(&qword_254A6C248);
  }
  v1 = atomic_load((unsigned __int8 *)&qword_254A6C250);
  if ((v1 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_254A6C250))
    {
      sub_21023CD84((uint64_t)qword_254A6C480, (uint64_t)&xmmword_254A6C498);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A6C498, &dword_20E81F000);
      __cxa_guard_release(&qword_254A6C250);
    }
  }
}

void sub_20FD28474(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A6C250);
  _Unwind_Resume(a1);
}

void sub_20FD2848C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A6C248);
  _Unwind_Resume(a1);
}

__n128 sub_20FD284A4(uint64_t a1, uint64_t a2)
{
  __n128 result;
  int v5;
  int v6;
  char *v7;
  int v8;
  char *v9;
  unsigned int v10;
  int v11;
  void **v12;
  int v13;
  char *v14;
  int v15;
  int v16;
  void **v17;
  int v18;
  char *v19;
  int v20;
  void **v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  _QWORD *exception;
  int v27;
  __int16 v28;
  __int128 v29;
  _BYTE __p[24];
  _BYTE v31[24];
  __n128 v32;
  _OWORD v33[2];
  __int128 v34;
  uint64_t v35;
  uint64_t v36;

  v36 = *MEMORY[0x24BDAC8D0];
  if (!*(_BYTE *)sub_2101FF5A0((uint64_t *)a1))
  {
    ++*(_QWORD *)(a1 + 112);
    if (!*(_BYTE *)(a2 + 104))
      return result;
    if (*(char *)(a2 + 103) < 0)
    {
      operator delete(*(void **)(a2 + 80));
      if ((*(char *)(a2 + 39) & 0x80000000) == 0)
        goto LABEL_23;
    }
    else if ((*(char *)(a2 + 39) & 0x80000000) == 0)
    {
LABEL_23:
      *(_BYTE *)(a2 + 104) = 0;
      return result;
    }
    operator delete(*(void **)(a2 + 16));
    goto LABEL_23;
  }
  *(_QWORD *)&v29 = "file";
  *((_QWORD *)&v29 + 1) = 4;
  strcpy(__p, "unknown file");
  *(_QWORD *)&__p[13] = v34;
  *(_WORD *)&__p[21] = WORD4(v34);
  __p[23] = 12;
  *(_QWORD *)v31 = "line";
  *(_OWORD *)&v31[8] = xmmword_2102EF2F0;
  v32.n128_u64[0] = (unint64_t)"function";
  v32.n128_u64[1] = 8;
  strcpy((char *)v33, "unknown function");
  *(_WORD *)((char *)&v33[1] + 5) = v28;
  *(_DWORD *)((char *)&v33[1] + 1) = v27;
  BYTE7(v33[1]) = 16;
  v5 = *(_DWORD *)(a1 + 8);
  sub_2101FF2E8(a1);
  v6 = *(unsigned __int8 *)(a1 + 104);
  *(_QWORD *)(a1 + 88) = "version";
  *(_QWORD *)(a1 + 96) = 7;
  if (!v6)
    *(_BYTE *)(a1 + 104) = 1;
  v7 = (char *)sub_2101FF5A0((uint64_t *)a1);
  ++*(_QWORD *)(a1 + 112);
  *(_QWORD *)&v34 = 0;
  sub_2100DA8B0(v7, &v34);
  if (DWORD1(v34))
    goto LABEL_44;
  if (v5 >= 1)
  {
    if (v5 != 2)
    {
LABEL_11:
      sub_2101FF2E8(a1);
      v11 = *(unsigned __int8 *)(a1 + 104);
      *(_OWORD *)(a1 + 88) = v29;
      if (!v11)
        *(_BYTE *)(a1 + 104) = 1;
      v12 = (void **)sub_2101FF5A0((uint64_t *)a1);
      ++*(_QWORD *)(a1 + 112);
      v35 = 0;
      v34 = 0uLL;
      sub_2100DADB0(v12, (uint64_t)&v34);
      if ((__p[23] & 0x80000000) != 0)
        operator delete(*(void **)__p);
      *(_OWORD *)__p = v34;
      *(_QWORD *)&__p[16] = v35;
      v13 = *(unsigned __int8 *)(a1 + 104);
      *(_OWORD *)(a1 + 88) = *(_OWORD *)v31;
      if (!v13)
        *(_BYTE *)(a1 + 104) = 1;
      v14 = (char *)sub_2101FF5A0((uint64_t *)a1);
      ++*(_QWORD *)(a1 + 112);
      *(_QWORD *)&v34 = 0;
      sub_2100DA8B0(v14, &v34);
      *(_QWORD *)&v31[16] = v34;
      v15 = *(unsigned __int8 *)(a1 + 104);
      *(__n128 *)(a1 + 88) = v32;
      if (!v15)
        *(_BYTE *)(a1 + 104) = 1;
      goto LABEL_32;
    }
    v8 = *(unsigned __int8 *)(a1 + 104);
    *(_QWORD *)(a1 + 88) = "min_version";
    *(_QWORD *)(a1 + 96) = 11;
    if (!v8)
      *(_BYTE *)(a1 + 104) = 1;
    v9 = (char *)sub_2101FF5A0((uint64_t *)a1);
    ++*(_QWORD *)(a1 + 112);
    *(_QWORD *)&v34 = 0;
    sub_2100DA8B0(v9, &v34);
    v10 = v34;
    if (!DWORD1(v34))
    {
      if (v34 >= 2)
      {
        sub_20FD28A50();
        sub_20E9F5C70((std::string *)&xmmword_254A6C4B0, v10, 1u);
      }
      goto LABEL_11;
    }
LABEL_44:
    exception = __cxa_allocate_exception(8uLL);
    *exception = &off_24CA1FAE0;
    __cxa_throw(exception, (struct type_info *)&unk_24CA1FAF8, (void (*)(void *))std::exception::~exception);
  }
  sub_2101FF2E8(a1);
  v16 = *(unsigned __int8 *)(a1 + 104);
  *(_OWORD *)(a1 + 88) = v29;
  if (!v16)
    *(_BYTE *)(a1 + 104) = 1;
  v17 = (void **)sub_2101FF5A0((uint64_t *)a1);
  ++*(_QWORD *)(a1 + 112);
  v35 = 0;
  v34 = 0uLL;
  sub_2100DADB0(v17, (uint64_t)&v34);
  if ((__p[23] & 0x80000000) != 0)
    operator delete(*(void **)__p);
  *(_OWORD *)__p = v34;
  *(_QWORD *)&__p[16] = v35;
  v18 = *(unsigned __int8 *)(a1 + 104);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)v31;
  if (!v18)
    *(_BYTE *)(a1 + 104) = 1;
  v19 = (char *)sub_2101FF5A0((uint64_t *)a1);
  ++*(_QWORD *)(a1 + 112);
  *(_QWORD *)&v34 = 0;
  sub_2100DA8B0(v19, &v34);
  *(_QWORD *)&v31[16] = v34;
  v20 = *(unsigned __int8 *)(a1 + 104);
  *(__n128 *)(a1 + 88) = v32;
  if (!v20)
    *(_BYTE *)(a1 + 104) = 1;
LABEL_32:
  v21 = (void **)sub_2101FF5A0((uint64_t *)a1);
  ++*(_QWORD *)(a1 + 112);
  v35 = 0;
  v34 = 0uLL;
  sub_2100DADB0(v21, (uint64_t)&v34);
  if (SBYTE7(v33[1]) < 0)
    operator delete(*(void **)&v33[0]);
  v33[0] = v34;
  *(_QWORD *)&v33[1] = v35;
  v22 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(v22 - 8);
  v23 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(v23 - 8);
  *(_QWORD *)(a1 + 48) = v22 - 8;
  *(_QWORD *)(a1 + 72) = v23 - 8;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(v22 - 16);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(v23 - 16);
  *(_QWORD *)(a1 + 48) = v22 - 16;
  *(_QWORD *)(a1 + 72) = v23 - 16;
  if (!*(_BYTE *)(a2 + 104))
    goto LABEL_38;
  if (*(char *)(a2 + 103) < 0)
  {
    operator delete(*(void **)(a2 + 80));
    if ((*(char *)(a2 + 39) & 0x80000000) == 0)
      goto LABEL_37;
LABEL_41:
    operator delete(*(void **)(a2 + 16));
    goto LABEL_37;
  }
  if (*(char *)(a2 + 39) < 0)
    goto LABEL_41;
LABEL_37:
  *(_BYTE *)(a2 + 104) = 0;
LABEL_38:
  v24 = *(_OWORD *)__p;
  *(_OWORD *)a2 = v29;
  *(_OWORD *)(a2 + 16) = v24;
  *(_QWORD *)(a2 + 32) = *(_QWORD *)&__p[16];
  *(_OWORD *)(a2 + 40) = *(_OWORD *)v31;
  *(_QWORD *)(a2 + 56) = *(_QWORD *)&v31[16];
  result = v32;
  *(_QWORD *)(a2 + 96) = *(_QWORD *)&v33[1];
  v25 = v33[0];
  *(__n128 *)(a2 + 64) = result;
  *(_OWORD *)(a2 + 80) = v25;
  *(_BYTE *)(a2 + 104) = 1;
  return result;
}

void sub_20FD289B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v3;
  va_list va;

  va_start(va, a3);
  if (*(char *)(v3 - 73) < 0)
  {
    operator delete(*(void **)(v3 - 96));
    sub_20FD289F8((uint64_t)va);
    _Unwind_Resume(a1);
  }
  sub_20FD289F8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20FD289F8(uint64_t a1)
{
  if (*(char *)(a1 + 103) < 0)
  {
    operator delete(*(void **)(a1 + 80));
    if ((*(char *)(a1 + 39) & 0x80000000) == 0)
      return a1;
  }
  else if ((*(char *)(a1 + 39) & 0x80000000) == 0)
  {
    return a1;
  }
  operator delete(*(void **)(a1 + 16));
  return a1;
}

void sub_20FD28A50()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_254A6C258);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A6C258))
  {
    sub_20FD28B08();
    if (byte_254A6C4F7 < 0)
    {
      sub_20E860C04(&xmmword_254A6C4B0, (void *)xmmword_254A6C4E0, *((unint64_t *)&xmmword_254A6C4E0 + 1));
    }
    else
    {
      xmmword_254A6C4B0 = xmmword_254A6C4E0;
      qword_254A6C4C0 = unk_254A6C4F0;
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A6C4B0, &dword_20E81F000);
    __cxa_guard_release(&qword_254A6C258);
  }
}

void sub_20FD28AF0(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A6C258);
  _Unwind_Resume(a1);
}

void sub_20FD28B08()
{
  unsigned __int8 v0;
  unsigned __int8 v1;

  v0 = atomic_load((unsigned __int8 *)&qword_254A6C260);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A6C260))
  {
    sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::dgn::ErrorLocationSample]", qword_254A6C4C8);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254A6C4C8, &dword_20E81F000);
    __cxa_guard_release(&qword_254A6C260);
  }
  v1 = atomic_load((unsigned __int8 *)&qword_254A6C268);
  if ((v1 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_254A6C268))
    {
      sub_21023CD84((uint64_t)qword_254A6C4C8, (uint64_t)&xmmword_254A6C4E0);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A6C4E0, &dword_20E81F000);
      __cxa_guard_release(&qword_254A6C268);
    }
  }
}

void sub_20FD28BD8(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A6C268);
  _Unwind_Resume(a1);
}

void sub_20FD28BF0(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A6C260);
  _Unwind_Resume(a1);
}

uint64_t sub_20FD28C08(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 192))
    return a1;
  if (*(_BYTE *)(a1 + 184))
  {
    if (*(_BYTE *)(a1 + 176))
      sub_20E8DDADC(a1 + 16);
    return a1;
  }
  if (!*(_BYTE *)(a1 + 112))
    return a1;
  if (*(_BYTE *)(a1 + 104))
  {
    if (*(char *)(a1 + 103) < 0)
      operator delete(*(void **)(a1 + 80));
    if (*(char *)(a1 + 71) < 0)
      operator delete(*(void **)(a1 + 48));
  }
  if (!*(_BYTE *)(a1 + 40) || (*(char *)(a1 + 39) & 0x80000000) == 0)
    return a1;
  operator delete(*(void **)(a1 + 16));
  return a1;
}

void sub_20FD28CA4()
{
  JUMPOUT(0x212BC6398);
}

void sub_20FD28CB8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  void **v3;
  void **v4;
  void *v5;
  void **v6;
  void **v7;
  void *v8;
  char *v9;
  _BYTE *v10;
  void **v11;
  void **v12;
  void *v13;
  char *v14;
  unint64_t v15;
  std::string *v16;
  int64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  void **v21;
  void **v22;
  void *v23;
  uint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *p_shared_owners;
  unint64_t v27;
  int v28;
  int v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  void **v33;
  void **v34;
  void *v35;
  void *v36[2];
  void *v37[2];
  void *v38;
  unsigned __int8 v39;
  void *v40[2];
  __int128 v41;
  void *v42;
  unsigned __int8 v43;
  __int128 v44;
  void *__p;
  uint64_t v46;
  __int128 v47;
  uint64_t v48;
  char v49;
  char v50;
  char v51;
  char v52;
  uint64_t v53[2];
  void *v54;
  char v55;
  const char *v56;
  uint64_t v57;
  _QWORD v58[2];
  uint64_t v59;
  void *v60;
  char *v61;
  uint64_t v62;
  char v63;
  uint64_t v64;
  std::string v65;
  uint64_t v66[3];
  uint64_t v67;
  std::string v68;
  char v69;
  const char *v70;
  uint64_t v71;
  std::string v72;
  const char *v73;
  __int128 v74;
  const char *v75;
  uint64_t v76;
  char v77[17];
  __int16 v78;
  char v79;
  char v80;
  char v81;
  uint64_t (**v82)();
  void (**v83)();
  void *v84;
  void *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  std::__shared_weak_count *v89;
  char v90;
  char v91;
  char v92;
  char v93;

  v1 = *(_QWORD *)(a1 + 8);
  (*(void (**)(uint64_t *__return_ptr, _QWORD, _QWORD, uint64_t))(**(_QWORD **)(**(_QWORD **)(a1 + 16) + 24)
                                                                         + 368))(&v87, *(_QWORD *)(**(_QWORD **)(a1 + 16) + 24), **(_QWORD **)(a1 + 16), 8);
  v2 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v88 + 16))(v88);
  v53[0] = 0;
  sub_20E9EECEC(&v82, v53, v2, 0x2800uLL);
  v82 = &off_24CA064D0;
  v83 = (void (**)())&unk_24CA06618;
  v53[0] = (uint64_t)"response_id";
  v53[1] = 11;
  LOBYTE(v54) = 0;
  v55 = 0;
  v56 = "export_diagnostics_response";
  v57 = 27;
  LOBYTE(v58[0]) = 0;
  v81 = 0;
  LODWORD(v36[0]) = 1;
  sub_20E9EDADC(v86, v36);
  LOBYTE(v36[0]) = 0;
  sub_20E9ED7B4(v86, v36);
  if (LOBYTE(v36[0]))
  {
    if (!v55)
    {
      v54 = 0;
      v55 = 1;
    }
    sub_20E9EDE6C(v86, &v54);
  }
  else if (v55)
  {
    v55 = 0;
  }
  v90 = 0;
  sub_20E9ED7B4(v86, &v90);
  if (v90)
  {
    if (!v81)
    {
      LOBYTE(v36[0]) = 0;
      LOBYTE(v37[1]) = 0;
      LOBYTE(v38) = 0;
      v49 = 0;
      v58[0] = "run_results";
      v58[1] = 11;
      sub_20FCF387C((uint64_t)&v59, (uint64_t)v36);
      if (v49 && (_BYTE)v48)
      {
        if (BYTE8(v47))
        {
          if (SBYTE7(v47) < 0)
            operator delete(__p);
          if (SBYTE7(v44) < 0)
            operator delete(v42);
        }
        if (BYTE8(v41) && SBYTE7(v41) < 0)
          operator delete(v40[0]);
      }
      if (LOBYTE(v37[1]))
      {
        v3 = (void **)v36[0];
        if (v36[0])
        {
          v4 = (void **)v36[1];
          v5 = v36[0];
          if (v36[1] != v36[0])
          {
            do
            {
              if (*((char *)v4 - 1) < 0)
                operator delete(*(v4 - 3));
              v4 -= 3;
            }
            while (v4 != v3);
            v5 = v36[0];
          }
          v36[1] = v3;
          operator delete(v5);
        }
      }
      v81 = 1;
    }
    LODWORD(v36[0]) = 1;
    sub_20E9EDADC(v86, v36);
    LODWORD(v36[0]) = 1;
    sub_20E9EDADC(v86, v36);
    v93 = 0;
    sub_20E9ED7B4(v86, &v93);
    if (!v93)
    {
      if (v63)
      {
        v11 = (void **)v60;
        if (v60)
        {
          v12 = (void **)v61;
          v13 = v60;
          if (v61 != v60)
          {
            do
            {
              if (*((char *)v12 - 1) < 0)
                operator delete(*(v12 - 3));
              v12 -= 3;
            }
            while (v12 != v11);
            v13 = v60;
          }
          v61 = (char *)v11;
          operator delete(v13);
        }
        v63 = 0;
      }
      goto LABEL_81;
    }
    if (v63)
    {
      v10 = v60;
      v9 = v61;
    }
    else
    {
      v10 = 0;
      v9 = 0;
      v60 = 0;
      v61 = 0;
      v62 = 0;
      v63 = 1;
    }
    v36[0] = (void *)(0xAAAAAAAAAAAAAAABLL * ((v9 - v10) >> 3));
    sub_20E9EDE6C(v86, v36);
    v14 = v61;
    v15 = 0xAAAAAAAAAAAAAAABLL * ((v61 - (_BYTE *)v60) >> 3);
    if (v36[0] <= (void *)v15)
    {
      if (v36[0] >= (void *)v15)
      {
        v16 = (std::string *)v60;
        v17 = v61 - (_BYTE *)v60;
        if (v61 == v60)
          goto LABEL_81;
      }
      else
      {
        v18 = (char *)v60 + 24 * (uint64_t)v36[0];
        while (v14 != v18)
        {
          if (*(v14 - 1) < 0)
            operator delete(*((void **)v14 - 3));
          v14 -= 24;
        }
        v61 = v18;
        v16 = (std::string *)v60;
        v17 = v18 - (_BYTE *)v60;
        if (v18 == v60)
          goto LABEL_81;
      }
    }
    else
    {
      sub_20EAC040C((char **)&v60, (unint64_t)v36[0] - v15);
      v16 = (std::string *)v60;
      v17 = v61 - (_BYTE *)v60;
      if (v61 == v60)
        goto LABEL_81;
    }
    v19 = v86;
    v20 = 24 * (v17 / 24);
    do
    {
      sub_20E9EE280(v19, v16++);
      v20 -= 24;
    }
    while (v20);
LABEL_81:
    v91 = 0;
    sub_20E9ED7B4(v86, &v91);
    if (v91)
    {
      if (!v80)
      {
        sub_20FD27BB0((uint64_t)v36);
        sub_20FCF3220((uint64_t)&v64, (int *)v36);
        if ((_BYTE)__p)
        {
          if (BYTE8(v44))
          {
            if (SBYTE7(v44) < 0)
              operator delete(v42);
            if (SBYTE7(v41) < 0)
              operator delete(v40[0]);
          }
          if (v39 && SHIBYTE(v38) < 0)
            operator delete(v37[0]);
        }
        v80 = 1;
      }
      LODWORD(v36[0]) = 1;
      sub_20E9EDADC(v86, v36);
      sub_20E9EE280(v86, &v65);
      sub_20E9EDD84(v86, v66);
      v92 = 0;
      sub_20E9ED7B4(v86, &v92);
      if (v92)
      {
        if (!v79)
        {
          LOBYTE(v36[0]) = 0;
          LOBYTE(v37[1]) = 0;
          LOBYTE(v38) = 0;
          v43 = 0;
          sub_20FCF2E48((uint64_t)&v67, (__int128 *)v36);
          if (v43)
          {
            if (SHIBYTE(v42) < 0)
              operator delete((void *)v41);
            if (SHIBYTE(v40[0]) < 0)
              operator delete(v38);
          }
          if (LOBYTE(v37[1]) && SHIBYTE(v37[0]) < 0)
            operator delete(v36[0]);
          v79 = 1;
        }
        LODWORD(v36[0]) = 1;
        sub_20E9EDADC(v86, v36);
        LOBYTE(v36[0]) = 0;
        sub_20E9ED7B4(v86, v36);
        if (LOBYTE(v36[0]))
        {
          if (!v69)
          {
            memset(&v68, 0, sizeof(v68));
            v69 = 1;
          }
          sub_20E9EE280(v86, &v68);
        }
        else if (v69)
        {
          if (SHIBYTE(v68.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v68.__r_.__value_.__l.__data_);
          v69 = 0;
        }
        v93 = 0;
        sub_20E9ED7B4(v86, &v93);
        if (v93)
        {
          if (!HIBYTE(v78))
          {
            v70 = "file";
            v71 = 4;
            strcpy((char *)&v72, "unknown file");
            v72.__r_.__value_.__s.__data_[13] = 0;
            HIWORD(v72.__r_.__value_.__r.__words[1]) = 0;
            *((_BYTE *)&v72.__r_.__value_.__s + 23) = 12;
            v73 = "line";
            v74 = xmmword_2102EF2F0;
            v75 = "function";
            v76 = 8;
            strcpy(v77, "unknown function");
            v78 = 272;
          }
          LODWORD(v36[0]) = 1;
          sub_20E9EDADC(v86, v36);
          sub_20E9EE280(v86, &v72);
          sub_20E9EDE6C(v86, (_QWORD *)&v74 + 1);
          sub_20E9EE280(v86, (std::string *)v77);
        }
        else if (HIBYTE(v78))
        {
          if ((char)v78 < 0)
            operator delete(*(void **)v77);
          if (SHIBYTE(v72.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v72.__r_.__value_.__l.__data_);
          HIBYTE(v78) = 0;
        }
      }
      else if (v79)
      {
        if (HIBYTE(v78))
        {
          if ((char)v78 < 0)
            operator delete(*(void **)v77);
          if (SHIBYTE(v72.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v72.__r_.__value_.__l.__data_);
        }
        if (v69 && SHIBYTE(v68.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v68.__r_.__value_.__l.__data_);
        v79 = 0;
      }
    }
    else if (v80)
    {
      if (v79)
      {
        if (HIBYTE(v78))
        {
          if ((char)v78 < 0)
            operator delete(*(void **)v77);
          if (SHIBYTE(v72.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v72.__r_.__value_.__l.__data_);
        }
        if (v69 && SHIBYTE(v68.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v68.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v65.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v65.__r_.__value_.__l.__data_);
      v80 = 0;
    }
    goto LABEL_145;
  }
  if (v81)
  {
    if (v80)
    {
      if (v79)
      {
        if (HIBYTE(v78))
        {
          if ((char)v78 < 0)
            operator delete(*(void **)v77);
          if (SHIBYTE(v72.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v72.__r_.__value_.__l.__data_);
        }
        if (v69 && SHIBYTE(v68.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v68.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v65.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v65.__r_.__value_.__l.__data_);
    }
    if (v63)
    {
      v6 = (void **)v60;
      if (v60)
      {
        v7 = (void **)v61;
        v8 = v60;
        if (v61 != v60)
        {
          do
          {
            if (*((char *)v7 - 1) < 0)
              operator delete(*(v7 - 3));
            v7 -= 3;
          }
          while (v7 != v6);
          v8 = v60;
        }
        v61 = (char *)v6;
        operator delete(v8);
      }
    }
    v81 = 0;
  }
LABEL_145:
  v36[0] = v54;
  LOBYTE(v36[1]) = v55;
  sub_20FCF3C8C((uint64_t)v58, (uint64_t)v37);
  if (v81)
  {
    if (v80)
    {
      if (v79)
      {
        if (HIBYTE(v78))
        {
          if ((char)v78 < 0)
            operator delete(*(void **)v77);
          if (SHIBYTE(v72.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v72.__r_.__value_.__l.__data_);
        }
        if (v69 && SHIBYTE(v68.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v68.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v65.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v65.__r_.__value_.__l.__data_);
    }
    if (v63)
    {
      v21 = (void **)v60;
      if (v60)
      {
        v22 = (void **)v61;
        v23 = v60;
        if (v61 != v60)
        {
          do
          {
            if (*((char *)v22 - 1) < 0)
              operator delete(*(v22 - 3));
            v22 -= 3;
          }
          while (v22 != v21);
          v23 = v60;
        }
        v61 = (char *)v21;
        operator delete(v23);
      }
    }
  }
  v82 = &off_24C9B71C0;
  v83 = (void (**)())&unk_24C9B7308;
  v24 = v86;
  v86 = 0;
  if (v24)
  {
    sub_20E9EF740((_QWORD *)(v24 + 8));
    MEMORY[0x212BC6398](v24, 0x10F2C40853B94B7);
  }
  v83 = off_24C9B7428;
  if (v84)
  {
    v85 = v84;
    operator delete(v84);
  }
  v25 = v89;
  if (v89)
  {
    p_shared_owners = (unint64_t *)&v89->__shared_owners_;
    do
      v27 = __ldaxr(p_shared_owners);
    while (__stlxr(v27 - 1, p_shared_owners));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  sub_20FD26FA8(v1);
  *(_OWORD *)v1 = *(_OWORD *)v36;
  *(_BYTE *)(v1 + 16) = 0;
  *(_BYTE *)(v1 + 176) = 0;
  if (!v52)
  {
    *(_BYTE *)(v1 + 184) = 1;
    *(_BYTE *)(v1 + 192) = 1;
    return;
  }
  *(_BYTE *)(v1 + 40) = 0;
  v28 = v39;
  if (v39)
  {
    *(_OWORD *)(v1 + 16) = *(_OWORD *)v37;
    *(_QWORD *)(v1 + 32) = v38;
    v37[0] = 0;
    v37[1] = 0;
    v38 = 0;
    *(_BYTE *)(v1 + 40) = 1;
  }
  *(_BYTE *)(v1 + 48) = 0;
  *(_BYTE *)(v1 + 168) = 0;
  if (v51)
  {
    *(_OWORD *)(v1 + 48) = *(_OWORD *)v40;
    *(_BYTE *)(v1 + 64) = 0;
    *(_BYTE *)(v1 + 160) = 0;
    if (v50)
    {
      *(_BYTE *)(v1 + 88) = 0;
      v29 = v43;
      if (v43)
      {
        v30 = v41;
        *(_QWORD *)(v1 + 80) = v42;
        *(_OWORD *)(v1 + 64) = v30;
        v42 = 0;
        v41 = 0uLL;
        *(_BYTE *)(v1 + 88) = 1;
      }
      *(_BYTE *)(v1 + 96) = 0;
      *(_BYTE *)(v1 + 152) = 0;
      if (v49)
      {
        v31 = v44;
        *(_QWORD *)(v1 + 112) = __p;
        *(_OWORD *)(v1 + 96) = v31;
        v44 = 0uLL;
        *(_QWORD *)(v1 + 120) = v46;
        v32 = v47;
        *(_QWORD *)(v1 + 144) = v48;
        *(_OWORD *)(v1 + 128) = v32;
        __p = 0;
        v47 = 0uLL;
        v48 = 0;
        *(_BYTE *)(v1 + 152) = 1;
      }
      *(_BYTE *)(v1 + 160) = 1;
      *(_BYTE *)(v1 + 168) = 1;
      *(_BYTE *)(v1 + 176) = 1;
      *(_BYTE *)(v1 + 184) = 1;
      *(_BYTE *)(v1 + 192) = 1;
      if (v29 && SHIBYTE(v42) < 0)
      {
        operator delete((void *)v41);
        v28 = v39;
      }
      goto LABEL_192;
    }
    *(_BYTE *)(v1 + 168) = 1;
  }
  *(_BYTE *)(v1 + 176) = 1;
  *(_BYTE *)(v1 + 184) = 1;
  *(_BYTE *)(v1 + 192) = 1;
LABEL_192:
  if (v28)
  {
    v33 = (void **)v37[0];
    if (v37[0])
    {
      v34 = (void **)v37[1];
      v35 = v37[0];
      if (v37[1] != v37[0])
      {
        do
        {
          if (*((char *)v34 - 1) < 0)
            operator delete(*(v34 - 3));
          v34 -= 3;
        }
        while (v34 != v33);
        v35 = v37[0];
      }
      v37[1] = v33;
      operator delete(v35);
    }
  }
}

void sub_20FD297CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29,char a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,void **a52,uint64_t a53,uint64_t a54,char a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,void *a60,uint64_t a61,int a62,__int16 a63)
{
  char a65;
  void *a72;
  char a73;
  char a74;
  void *a75;
  char a76;
  uint64_t v76;
  void **v78;
  void **v79;

  if (a30)
  {
    if (a29 < 0)
      operator delete(__p);
    if (a22 < 0)
      operator delete(a17);
  }
  if (a16 && a15 < 0)
    operator delete(a10);
  if (LOBYTE(STACK[0x250]))
  {
    if (LOBYTE(STACK[0x248]))
    {
      if (LOBYTE(STACK[0x240]))
      {
        if (LOBYTE(STACK[0x238]))
        {
          if (SLOBYTE(STACK[0x237]) < 0)
            operator delete((void *)STACK[0x220]);
          if (a76 < 0)
            operator delete(a75);
        }
        if (a74 && a73 < 0)
          operator delete(a72);
      }
      if (a65 < 0)
        operator delete(a60);
    }
    if (a55 && a52)
    {
      v78 = (void **)a53;
      v79 = a52;
      if ((void **)a53 != a52)
      {
        do
        {
          if (*((char *)v78 - 1) < 0)
            operator delete(*(v78 - 3));
          v78 -= 3;
        }
        while (v78 != a52);
        v79 = a52;
      }
      operator delete(v79);
    }
  }
  sub_20E9EEE68((_QWORD *)(v76 - 152));
  sub_21022EAD8(v76 - 96);
  _Unwind_Resume(a1);
}

uint64_t sub_20FD299F8(uint64_t a1)
{
  void *v2;
  uint64_t v3;

  *(_QWORD *)a1 = &off_24CA1DB50;
  v2 = *(void **)(a1 + 48);
  if (v2)
  {
    *(_QWORD *)(a1 + 56) = v2;
    operator delete(v2);
  }
  v3 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  if (v3)
    (*(void (**)(void))(a1 + 24))();
  return a1;
}

void sub_20FD29A4C(uint64_t a1)
{
  void *v2;
  uint64_t v3;

  *(_QWORD *)a1 = &off_24CA1DB50;
  v2 = *(void **)(a1 + 48);
  if (v2)
  {
    *(_QWORD *)(a1 + 56) = v2;
    operator delete(v2);
  }
  v3 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  if (v3)
    (*(void (**)(void))(a1 + 24))();
  JUMPOUT(0x212BC6398);
}

void sub_20FD29AB0(uint64_t a1, uint64_t *a2)
{
  void *__p[2];
  char v4;
  _BYTE v5[24];
  int v6;
  char v7;
  char *v8;

  v6 = 0;
  sub_20FD29BB8((uint64_t)&v8, (uint64_t)v5, a2);
  if (v6 == -1)
    sub_20E877AB8();
  v8 = &v7;
  ((void (*)(void **__return_ptr, char **, _BYTE *))off_24CA061E8[v6])(__p, &v8, v5);
  if (v6 != -1)
    ((void (*)(char **, _BYTE *))off_24CA06188[v6])(&v8, v5);
  sub_2101FB61C(a1, (uint64_t)__p);
  if (v4 < 0)
    operator delete(__p[0]);
}

void sub_20FD29B74(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FD29B90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_20E877A60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FD29BA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_20E877A60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FD29BB8(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;
  int v6;
  size_t v7;
  void **v8;
  unint64_t v9;
  unint64_t v10;
  const void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *__dst[2];
  unint64_t v20;
  _QWORD v21[5];
  _QWORD *v22;

  v5 = operator new();
  *(_OWORD *)v5 = 0u;
  *(_OWORD *)(v5 + 16) = 0u;
  *(_OWORD *)(v5 + 32) = 0u;
  *(_OWORD *)(v5 + 48) = 0u;
  *(_OWORD *)(v5 + 64) = 0u;
  *(_OWORD *)(v5 + 80) = 0u;
  *(_OWORD *)(v5 + 96) = 0u;
  *(_OWORD *)(v5 + 112) = 0u;
  *(_OWORD *)(v5 + 128) = 0u;
  *(_OWORD *)(v5 + 144) = 0u;
  *(_OWORD *)(v5 + 160) = 0u;
  *(_OWORD *)(v5 + 176) = 0u;
  *(_OWORD *)(v5 + 192) = 0u;
  *(_OWORD *)(v5 + 208) = 0u;
  *(_OWORD *)(v5 + 224) = 0u;
  *(_OWORD *)(v5 + 240) = 0u;
  *(_OWORD *)(v5 + 256) = 0u;
  *(_QWORD *)(v5 + 272) = 0;
  sub_20E863438(v5);
  v21[0] = v5;
  sub_210233CA0((_QWORD *)(v5 + 16), a3);
  v6 = *(_DWORD *)(v5 + 120);
  if ((v6 & 0x10) != 0)
  {
    v9 = *(_QWORD *)(v5 + 112);
    v10 = *(_QWORD *)(v5 + 72);
    if (v9 < v10)
    {
      *(_QWORD *)(v5 + 112) = v10;
      v9 = v10;
    }
    v11 = *(const void **)(v5 + 64);
    v7 = v9 - (_QWORD)v11;
    if (v9 - (unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
      goto LABEL_22;
  }
  else
  {
    if ((v6 & 8) == 0)
    {
      v7 = 0;
      HIBYTE(v20) = 0;
      v8 = __dst;
      goto LABEL_14;
    }
    v11 = *(const void **)(v5 + 40);
    v7 = *(_QWORD *)(v5 + 56) - (_QWORD)v11;
    if (v7 >= 0x7FFFFFFFFFFFFFF8)
LABEL_22:
      sub_20E860B7C();
  }
  if (v7 >= 0x17)
  {
    v12 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17)
      v12 = v7 | 7;
    v13 = v12 + 1;
    v8 = (void **)operator new(v12 + 1);
    __dst[1] = (void *)v7;
    v20 = v13 | 0x8000000000000000;
    __dst[0] = v8;
    goto LABEL_13;
  }
  HIBYTE(v20) = v7;
  v8 = __dst;
  if (v7)
LABEL_13:
    memmove(v8, v11, v7);
LABEL_14:
  *((_BYTE *)v8 + v7) = 0;
  v14 = v21[0];
  if (v21[0])
  {
    v15 = MEMORY[0x24BEDB7F0];
    v16 = *MEMORY[0x24BEDB7F0];
    *(_QWORD *)v21[0] = *MEMORY[0x24BEDB7F0];
    v17 = *(_QWORD *)(v15 + 72);
    *(_QWORD *)(v14 + *(_QWORD *)(v16 - 24)) = *(_QWORD *)(v15 + 64);
    *(_QWORD *)(v14 + 24) = MEMORY[0x24BEDB848] + 16;
    *(_QWORD *)(v14 + 16) = v17;
    if (*(char *)(v14 + 111) < 0)
      operator delete(*(void **)(v14 + 88));
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x212BC6290](v14 + 128);
    MEMORY[0x212BC6398](v14, 0x10B2C40EED050F3);
  }
  v21[0] = a2;
  v21[1] = __dst;
  v21[2] = a2;
  v21[3] = __dst;
  v21[4] = __dst;
  v18 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v18 == -1)
    sub_20E877AB8();
  v22 = v21;
  ((void (*)(_QWORD **, uint64_t))off_24CA061B8[v18])(&v22, a2);
  if (SHIBYTE(v20) < 0)
    operator delete(__dst[0]);
}

void sub_20FD29E08(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BC6398](v1, 0x10B2C40EED050F3);
  _Unwind_Resume(a1);
}

void sub_20FD29E2C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FD29E48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_20FD0DE48((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20FD29E5C(int *a1, uint64_t a2, uint64_t a3)
{
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  unsigned __int8 *v11;
  int v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  const char *v18;
  uint64_t v19;
  int v20;

  sub_2101FA8A4(a2);
  v18 = "version";
  v19 = 7;
  v20 = 1;
  if (**(unsigned __int8 **)(a2 + 40) > 1u
    || (v6 = *(unsigned __int8 *)(a2 + 88), *(_QWORD *)(a2 + 72) = "version", *(_QWORD *)(a2 + 80) = 7, v6))
  {
    sub_2101FB154(a2, &v20);
    v7 = *a1;
    if (*a1 >= 1)
      goto LABEL_4;
LABEL_14:
    sub_2101FA8A4(a2);
    if (**(unsigned __int8 **)(a2 + 40) > 1u
      || (v10 = *(unsigned __int8 *)(a2 + 88), *(_OWORD *)(a2 + 72) = *(_OWORD *)a3, v10))
    {
      if (*(_BYTE *)(a3 + 32))
        goto LABEL_21;
    }
    else
    {
      *(_BYTE *)(a2 + 88) = 1;
      if (*(_BYTE *)(a3 + 32))
        goto LABEL_21;
    }
LABEL_17:
    LOBYTE(v18) = 0;
    v19 = 0;
    v11 = (unsigned __int8 *)sub_2101FA67C(a2);
    v12 = *v11;
    *v11 = 0;
    LOBYTE(v18) = v12;
    v13 = *((_QWORD *)v11 + 1);
    *((_QWORD *)v11 + 1) = v19;
    v19 = v13;
    sub_20EB911C0(&v19, v12);
    goto LABEL_22;
  }
  *(_BYTE *)(a2 + 88) = 1;
  sub_2101FB154(a2, &v20);
  v7 = *a1;
  if (*a1 < 1)
    goto LABEL_14;
LABEL_4:
  if (v7 == 2)
  {
    v18 = "min_version";
    v19 = 11;
    v20 = 1;
    if (**(unsigned __int8 **)(a2 + 40) <= 1u)
    {
      v8 = *(unsigned __int8 *)(a2 + 88);
      *(_QWORD *)(a2 + 72) = "min_version";
      *(_QWORD *)(a2 + 80) = 11;
      if (!v8)
        *(_BYTE *)(a2 + 88) = 1;
    }
    sub_2101FB154(a2, &v20);
  }
  sub_2101FA8A4(a2);
  if (**(unsigned __int8 **)(a2 + 40) > 1u
    || (v9 = *(unsigned __int8 *)(a2 + 88), *(_OWORD *)(a2 + 72) = *(_OWORD *)a3, v9))
  {
    if (!*(_BYTE *)(a3 + 32))
      goto LABEL_17;
  }
  else
  {
    *(_BYTE *)(a2 + 88) = 1;
    if (!*(_BYTE *)(a3 + 32))
      goto LABEL_17;
  }
LABEL_21:
  v18 = *(const char **)(a2 + 8);
  sub_20FD2A0B8((int *)&v18, a2, (__int128 *)(a3 + 16));
LABEL_22:
  v14 = *(unsigned __int8 *)(a2 + 88);
  v15 = *(_QWORD *)(a2 + 56);
  v17 = *(_QWORD *)(v15 - 8);
  v16 = v15 - 8;
  *(_QWORD *)(a2 + 40) = v17;
  *(_QWORD *)(a2 + 56) = v16;
  if (v14)
    *(_BYTE *)(a2 + 88) = 0;
  *(_QWORD *)(a2 + 40) = *(_QWORD *)(v16 - 8);
  *(_QWORD *)(a2 + 56) = v16 - 8;
}

void sub_20FD2A088(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unsigned __int8 a10)
{
  uint64_t *v10;

  sub_20EB911C0(v10, a10);
  _Unwind_Resume(a1);
}

void sub_20FD2A0A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unsigned __int8 a10)
{
  uint64_t *v10;

  sub_20EB911C0(v10, a10);
  _Unwind_Resume(a1);
}

void sub_20FD2A0B8(int *a1, uint64_t a2, __int128 *a3)
{
  int v6;
  int v7;
  int v8;
  unsigned __int8 *v9;
  uint64_t v10;
  int v11;
  _BYTE *v12;
  _QWORD *v13;
  BOOL v14;
  int v15;
  unsigned __int8 *v17;
  int v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  const char *v22;
  uint64_t v23;
  int v24;
  __int128 v25;

  sub_2101FA8A4(a2);
  v22 = "version";
  v23 = 7;
  v24 = 2;
  if (**(unsigned __int8 **)(a2 + 40) > 1u
    || (v6 = *(unsigned __int8 *)(a2 + 88), *(_QWORD *)(a2 + 72) = "version", *(_QWORD *)(a2 + 80) = 7, v6))
  {
    sub_2101FB154(a2, &v24);
    v7 = *a1;
    if (*a1 >= 1)
      goto LABEL_4;
LABEL_20:
    v25 = *a3;
    v9 = *(unsigned __int8 **)(a2 + 40);
    if (*v9 <= 1u)
    {
      *(_QWORD *)(a2 + 72) = "ns";
      v10 = a2 + 72;
      v12 = (_BYTE *)(a2 + 88);
      v15 = *(unsigned __int8 *)(a2 + 88);
      *(_QWORD *)(a2 + 80) = 2;
      v13 = (_QWORD *)(a2 + 80);
      if (!v15)
        *v12 = 1;
      goto LABEL_29;
    }
    v13 = (_QWORD *)(a2 + 80);
    v10 = a2 + 72;
    v12 = (_BYTE *)(a2 + 88);
    if (!*(_BYTE *)(a2 + 88) || *(_QWORD *)(a2 + 80) != 7)
      goto LABEL_29;
    if (**(_DWORD **)v10 != *(_DWORD *)"version" || *(_DWORD *)(*(_QWORD *)v10 + 3) != *(_DWORD *)"sion")
      goto LABEL_29;
    goto LABEL_30;
  }
  *(_BYTE *)(a2 + 88) = 1;
  sub_2101FB154(a2, &v24);
  v7 = *a1;
  if (*a1 < 1)
    goto LABEL_20;
LABEL_4:
  if (v7 == 2)
  {
    v22 = "min_version";
    v23 = 11;
    v24 = 2;
    if (**(unsigned __int8 **)(a2 + 40) <= 1u)
    {
      v8 = *(unsigned __int8 *)(a2 + 88);
      *(_QWORD *)(a2 + 72) = "min_version";
      *(_QWORD *)(a2 + 80) = 11;
      if (!v8)
        *(_BYTE *)(a2 + 88) = 1;
    }
    sub_2101FB154(a2, &v24);
  }
  v25 = *a3;
  v9 = *(unsigned __int8 **)(a2 + 40);
  if (*v9 <= 1u)
  {
    *(_QWORD *)(a2 + 72) = "ns";
    v10 = a2 + 72;
    v12 = (_BYTE *)(a2 + 88);
    v11 = *(unsigned __int8 *)(a2 + 88);
    *(_QWORD *)(a2 + 80) = 2;
    v13 = (_QWORD *)(a2 + 80);
    if (!v11)
      *v12 = 1;
    goto LABEL_29;
  }
  v13 = (_QWORD *)(a2 + 80);
  v10 = a2 + 72;
  v12 = (_BYTE *)(a2 + 88);
  if (!*(_BYTE *)(a2 + 88)
    || *(_QWORD *)(a2 + 80) != 7
    || (**(_DWORD **)v10 == *(_DWORD *)"version"
      ? (v14 = *(_DWORD *)(*(_QWORD *)v10 + 3) == *(_DWORD *)"sion")
      : (v14 = 0),
        !v14))
  {
LABEL_29:
    LOBYTE(v22) = 5;
    v23 = v25;
    v17 = (unsigned __int8 *)sub_2101FA67C(a2);
    v18 = *v17;
    *v17 = 5;
    LOBYTE(v22) = v18;
    v19 = *((_QWORD *)v17 + 1);
    *((_QWORD *)v17 + 1) = v23;
    v23 = v19;
    sub_20EB911C0(&v23, v18);
    v9 = *(unsigned __int8 **)(a2 + 40);
  }
LABEL_30:
  if (*v9 <= 1u)
  {
    v20 = *v12;
    *(_QWORD *)v10 = "clock_type";
    *v13 = 10;
    if (!v20)
      *v12 = 1;
  }
  v22 = (char *)&v25 + 8;
  sub_20FD2A3F0(a2, (unsigned __int8 **)&v22);
  v21 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a2 + 40) = *(_QWORD *)(v21 - 8);
  *(_QWORD *)(a2 + 56) = v21 - 8;
  if (*(_BYTE *)(a2 + 88))
    *(_BYTE *)(a2 + 88) = 0;
}

void sub_20FD2A3C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unsigned __int8 a10)
{
  uint64_t *v10;

  sub_20EB911C0(v10, a10);
  _Unwind_Resume(a1);
}

void sub_20FD2A3D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unsigned __int8 a10)
{
  uint64_t *v10;

  sub_20EB911C0(v10, a10);
  _Unwind_Resume(a1);
}

void sub_20FD2A3F0(uint64_t a1, unsigned __int8 **a2)
{
  uint64_t v3;
  BOOL v4;
  int *v5;
  int v6;
  int v7;
  BOOL v8;
  unsigned __int8 *v9;
  int v10;
  uint64_t v11;
  unsigned __int8 *v12;
  void *__p[2];
  char v14;
  char v15[8];
  uint64_t v16;
  int v17;
  char v18;
  char *v19;

  if ((*(_BYTE *)(a1 + 12) & 2) != 0)
  {
    v12 = *a2;
    v17 = 0;
    sub_20FD2A5A0((uint64_t)&v19, (uint64_t)v15, v12);
    if (v17 == -1)
      sub_20E877AB8();
    v19 = &v18;
    ((void (*)(void **__return_ptr, char **, char *))off_24CA061E8[v17])(__p, &v19, v15);
    if (v17 != -1)
      ((void (*)(char **, char *))off_24CA06188[v17])(&v19, v15);
    sub_2101FB61C(a1, (uint64_t)__p);
    if (v14 < 0)
      operator delete(__p[0]);
  }
  else
  {
    v3 = **a2;
    if (*(_BYTE *)(a1 + 88))
      v4 = *(_QWORD *)(a1 + 80) == 7;
    else
      v4 = 0;
    if (!v4
      || ((v5 = *(int **)(a1 + 72), v6 = *v5, v7 = *(int *)((char *)v5 + 3), v6 == *(_DWORD *)"version")
        ? (v8 = v7 == *(_DWORD *)"sion")
        : (v8 = 0),
          !v8))
    {
      v15[0] = 6;
      v16 = v3;
      v9 = (unsigned __int8 *)sub_2101FA67C(a1);
      v10 = *v9;
      *v9 = 6;
      v15[0] = v10;
      v11 = *((_QWORD *)v9 + 1);
      *((_QWORD *)v9 + 1) = v16;
      v16 = v11;
      sub_20EB911C0(&v16, v10);
    }
  }
}

void sub_20FD2A544(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, unsigned __int8 a13)
{
  uint64_t *v13;

  sub_20EB911C0(v13, a13);
  _Unwind_Resume(a1);
}

void sub_20FD2A55C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FD2A578(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_20E877A60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FD2A58C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_20E877A60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FD2A5A0(uint64_t a1, uint64_t a2, unsigned __int8 *a3)
{
  uint64_t v5;
  int v6;
  size_t v7;
  void **v8;
  unint64_t v9;
  unint64_t v10;
  const void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *__dst[2];
  unint64_t v20;
  _QWORD v21[5];
  _QWORD *v22;

  v5 = operator new();
  *(_OWORD *)v5 = 0u;
  *(_OWORD *)(v5 + 16) = 0u;
  *(_OWORD *)(v5 + 32) = 0u;
  *(_OWORD *)(v5 + 48) = 0u;
  *(_OWORD *)(v5 + 64) = 0u;
  *(_OWORD *)(v5 + 80) = 0u;
  *(_OWORD *)(v5 + 96) = 0u;
  *(_OWORD *)(v5 + 112) = 0u;
  *(_OWORD *)(v5 + 128) = 0u;
  *(_OWORD *)(v5 + 144) = 0u;
  *(_OWORD *)(v5 + 160) = 0u;
  *(_OWORD *)(v5 + 176) = 0u;
  *(_OWORD *)(v5 + 192) = 0u;
  *(_OWORD *)(v5 + 208) = 0u;
  *(_OWORD *)(v5 + 224) = 0u;
  *(_OWORD *)(v5 + 240) = 0u;
  *(_OWORD *)(v5 + 256) = 0u;
  *(_QWORD *)(v5 + 272) = 0;
  sub_20E863438(v5);
  v21[0] = v5;
  sub_20E86A980((_QWORD *)(v5 + 16), (uint64_t)(&off_24CA1F840)[2 * *a3], (uint64_t)(&off_24CA1F840)[2 * *a3 + 1]);
  v6 = *(_DWORD *)(v5 + 120);
  if ((v6 & 0x10) != 0)
  {
    v9 = *(_QWORD *)(v5 + 112);
    v10 = *(_QWORD *)(v5 + 72);
    if (v9 < v10)
    {
      *(_QWORD *)(v5 + 112) = v10;
      v9 = v10;
    }
    v11 = *(const void **)(v5 + 64);
    v7 = v9 - (_QWORD)v11;
    if (v9 - (unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
      goto LABEL_22;
  }
  else
  {
    if ((v6 & 8) == 0)
    {
      v7 = 0;
      HIBYTE(v20) = 0;
      v8 = __dst;
      goto LABEL_14;
    }
    v11 = *(const void **)(v5 + 40);
    v7 = *(_QWORD *)(v5 + 56) - (_QWORD)v11;
    if (v7 >= 0x7FFFFFFFFFFFFFF8)
LABEL_22:
      sub_20E860B7C();
  }
  if (v7 >= 0x17)
  {
    v12 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17)
      v12 = v7 | 7;
    v13 = v12 + 1;
    v8 = (void **)operator new(v12 + 1);
    __dst[1] = (void *)v7;
    v20 = v13 | 0x8000000000000000;
    __dst[0] = v8;
    goto LABEL_13;
  }
  HIBYTE(v20) = v7;
  v8 = __dst;
  if (v7)
LABEL_13:
    memmove(v8, v11, v7);
LABEL_14:
  *((_BYTE *)v8 + v7) = 0;
  v14 = v21[0];
  if (v21[0])
  {
    v15 = MEMORY[0x24BEDB7F0];
    v16 = *MEMORY[0x24BEDB7F0];
    *(_QWORD *)v21[0] = *MEMORY[0x24BEDB7F0];
    v17 = *(_QWORD *)(v15 + 72);
    *(_QWORD *)(v14 + *(_QWORD *)(v16 - 24)) = *(_QWORD *)(v15 + 64);
    *(_QWORD *)(v14 + 24) = MEMORY[0x24BEDB848] + 16;
    *(_QWORD *)(v14 + 16) = v17;
    if (*(char *)(v14 + 111) < 0)
      operator delete(*(void **)(v14 + 88));
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x212BC6290](v14 + 128);
    MEMORY[0x212BC6398](v14, 0x10B2C40EED050F3);
  }
  v21[0] = a2;
  v21[1] = __dst;
  v21[2] = a2;
  v21[3] = __dst;
  v21[4] = __dst;
  v18 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v18 == -1)
    sub_20E877AB8();
  v22 = v21;
  ((void (*)(_QWORD **, uint64_t))off_24CA061B8[v18])(&v22, a2);
  if (SHIBYTE(v20) < 0)
    operator delete(__dst[0]);
}

void sub_20FD2A800(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BC6398](v1, 0x10B2C40EED050F3);
  _Unwind_Resume(a1);
}

void sub_20FD2A824(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FD2A840(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_20FD0DE48((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20FD2A854(_DWORD *a1, uint64_t a2, const char *a3)
{
  int v6;
  int v7;
  uint64_t v8;
  const char *v9;
  uint64_t v10;
  int v11;
  uint64_t v12;

  sub_2101FA8A4(a2);
  v9 = "version";
  v10 = 7;
  v11 = 1;
  if (**(unsigned __int8 **)(a2 + 40) <= 1u)
  {
    v6 = *(unsigned __int8 *)(a2 + 88);
    *(_QWORD *)(a2 + 72) = "version";
    *(_QWORD *)(a2 + 80) = 7;
    if (!v6)
      *(_BYTE *)(a2 + 88) = 1;
  }
  sub_2101FB154(a2, &v11);
  if (*a1 == 2)
  {
    v9 = "min_version";
    v10 = 11;
    v11 = 1;
    if (**(unsigned __int8 **)(a2 + 40) <= 1u)
    {
      v7 = *(unsigned __int8 *)(a2 + 88);
      *(_QWORD *)(a2 + 72) = "min_version";
      *(_QWORD *)(a2 + 80) = 11;
      if (!v7)
        *(_BYTE *)(a2 + 88) = 1;
    }
    sub_2101FB154(a2, &v11);
  }
  v9 = a3;
  v10 = (uint64_t)(a3 + 128);
  sub_2101FA8A4(a2);
  v12 = a2;
  sub_20FD2A990((uint64_t *)&v9, &v12);
  v8 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a2 + 40) = *(_QWORD *)(v8 - 8);
  *(_QWORD *)(a2 + 56) = v8 - 8;
  if (*(_BYTE *)(a2 + 88))
    *(_BYTE *)(a2 + 88) = 0;
  *(_QWORD *)(a2 + 40) = *(_QWORD *)(v8 - 16);
  *(_QWORD *)(a2 + 56) = v8 - 16;
}

void sub_20FD2A990(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  int v7;
  int v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned __int8 *v13;
  int v14;
  uint64_t v15;
  int v16;
  unsigned __int8 *v17;
  int v18;
  uint64_t v19;
  const char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v4 = *a1;
  v5 = *a2;
  if (**(unsigned __int8 **)(*a2 + 40) > 1u
    || (v6 = *(unsigned __int8 *)(v5 + 88), *(_OWORD *)(v5 + 72) = *(_OWORD *)v4, v6))
  {
    if (*(_BYTE *)(v4 + 120))
    {
LABEL_4:
      v7 = *(_DWORD *)(v5 + 8);
      sub_2101FA8A4(v5);
      v20 = "version";
      v21 = 7;
      LODWORD(v22) = 1;
      if (**(unsigned __int8 **)(v5 + 40) <= 1u)
      {
        v8 = *(unsigned __int8 *)(v5 + 88);
        *(_QWORD *)(v5 + 72) = "version";
        *(_QWORD *)(v5 + 80) = 7;
        if (!v8)
          *(_BYTE *)(v5 + 88) = 1;
      }
      sub_2101FB154(v5, &v22);
      if (v7 == 2)
      {
        v20 = "min_version";
        v21 = 11;
        LODWORD(v22) = 1;
        if (**(unsigned __int8 **)(v5 + 40) <= 1u)
        {
          v9 = *(unsigned __int8 *)(v5 + 88);
          *(_QWORD *)(v5 + 72) = "min_version";
          *(_QWORD *)(v5 + 80) = 11;
          if (!v9)
            *(_BYTE *)(v5 + 88) = 1;
        }
        sub_2101FB154(v5, &v22);
      }
      v20 = (const char *)(v4 + 16);
      v21 = v4 + 48;
      v22 = v4 + 80;
      sub_2101FA8A4(v5);
      v23 = v5;
      sub_20FD2AC44((uint64_t *)&v20, &v23);
      v10 = *(_QWORD *)(v5 + 56);
      *(_QWORD *)(v5 + 40) = *(_QWORD *)(v10 - 8);
      *(_QWORD *)(v5 + 56) = v10 - 8;
      if (*(_BYTE *)(v5 + 88))
        *(_BYTE *)(v5 + 88) = 0;
      *(_QWORD *)(v5 + 40) = *(_QWORD *)(v10 - 16);
      *(_QWORD *)(v5 + 56) = v10 - 16;
      v11 = a1[1];
      v12 = *a2;
      if (**(unsigned __int8 **)(*a2 + 40) > 1u)
        goto LABEL_19;
      goto LABEL_18;
    }
  }
  else
  {
    *(_BYTE *)(v5 + 88) = 1;
    if (*(_BYTE *)(v4 + 120))
      goto LABEL_4;
  }
  LOBYTE(v20) = 0;
  v21 = 0;
  v13 = (unsigned __int8 *)sub_2101FA67C(v5);
  v14 = *v13;
  *v13 = 0;
  LOBYTE(v20) = v14;
  v15 = *((_QWORD *)v13 + 1);
  *((_QWORD *)v13 + 1) = v21;
  v21 = v15;
  sub_20EB911C0(&v21, v14);
  v11 = a1[1];
  v12 = *a2;
  if (**(unsigned __int8 **)(*a2 + 40) > 1u)
    goto LABEL_19;
LABEL_18:
  v16 = *(unsigned __int8 *)(v12 + 88);
  *(_OWORD *)(v12 + 72) = *(_OWORD *)v11;
  if (!v16)
  {
    *(_BYTE *)(v12 + 88) = 1;
    if (*(_BYTE *)(v11 + 40))
      goto LABEL_20;
    goto LABEL_22;
  }
LABEL_19:
  if (*(_BYTE *)(v11 + 40))
  {
LABEL_20:
    sub_2101FB61C(v12, v11 + 16);
    return;
  }
LABEL_22:
  LOBYTE(v20) = 0;
  v21 = 0;
  v17 = (unsigned __int8 *)sub_2101FA67C(v12);
  v18 = *v17;
  *v17 = v20;
  LOBYTE(v20) = v18;
  v19 = *((_QWORD *)v17 + 1);
  *((_QWORD *)v17 + 1) = v21;
  v21 = v19;
  sub_20EB911C0(&v21, v18);
}

void sub_20FD2AC14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned __int8 a9)
{
  uint64_t *v9;

  sub_20EB911C0(v9, a9);
  _Unwind_Resume(a1);
}

void sub_20FD2AC2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned __int8 a9)
{
  uint64_t *v9;

  sub_20EB911C0(v9, a9);
  _Unwind_Resume(a1);
}

void sub_20FD2AC44(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  int *v7;
  int v8;
  int v9;
  BOOL v10;
  uint64_t v11;
  unsigned __int8 *v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  int *v18;
  int v19;
  int v20;
  BOOL v21;
  uint64_t v22;
  unsigned __int8 *v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  unsigned __int8 *v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  v4 = *a1;
  v5 = *a2;
  if (**(unsigned __int8 **)(*a2 + 40) > 1u
    || (v6 = *(unsigned __int8 *)(v5 + 88), *(_OWORD *)(v5 + 72) = *(_OWORD *)v4, v6))
  {
    if (*(_BYTE *)(v4 + 24))
      goto LABEL_4;
LABEL_12:
    LOBYTE(v32) = 0;
    v33 = 0;
    v12 = (unsigned __int8 *)sub_2101FA67C(v5);
    goto LABEL_13;
  }
  *(_BYTE *)(v5 + 88) = 1;
  if (!*(_BYTE *)(v4 + 24))
    goto LABEL_12;
LABEL_4:
  if (!*(_BYTE *)(v5 + 88)
    || *(_QWORD *)(v5 + 80) != 7
    || ((v7 = *(int **)(v5 + 72), v8 = *v7, v9 = *(int *)((char *)v7 + 3), v8 == *(_DWORD *)"version")
      ? (v10 = v9 == *(_DWORD *)"sion")
      : (v10 = 0),
        !v10))
  {
    v11 = *(_QWORD *)(v4 + 16);
    LOBYTE(v32) = 6;
    v33 = v11;
    v12 = (unsigned __int8 *)sub_2101FA67C(v5);
LABEL_13:
    v13 = *v12;
    *v12 = v32;
    LOBYTE(v32) = v13;
    v14 = *((_QWORD *)v12 + 1);
    *((_QWORD *)v12 + 1) = v33;
    v33 = v14;
    sub_20EB911C0(&v33, v13);
  }
  v15 = a1[1];
  v16 = *a2;
  if (**(unsigned __int8 **)(*a2 + 40) > 1u
    || (v17 = *(unsigned __int8 *)(v16 + 88), *(_OWORD *)(v16 + 72) = *(_OWORD *)v15, v17))
  {
    if (*(_BYTE *)(v15 + 24))
      goto LABEL_17;
LABEL_25:
    LOBYTE(v32) = 0;
    v33 = 0;
    v23 = (unsigned __int8 *)sub_2101FA67C(v16);
    goto LABEL_26;
  }
  *(_BYTE *)(v16 + 88) = 1;
  if (!*(_BYTE *)(v15 + 24))
    goto LABEL_25;
LABEL_17:
  if (!*(_BYTE *)(v16 + 88)
    || *(_QWORD *)(v16 + 80) != 7
    || ((v18 = *(int **)(v16 + 72), v19 = *v18, v20 = *(int *)((char *)v18 + 3), v19 == *(_DWORD *)"version")
      ? (v21 = v20 == *(_DWORD *)"sion")
      : (v21 = 0),
        !v21))
  {
    v22 = *(_QWORD *)(v15 + 16);
    LOBYTE(v32) = 5;
    v33 = v22;
    v23 = (unsigned __int8 *)sub_2101FA67C(v16);
LABEL_26:
    v24 = *v23;
    *v23 = v32;
    LOBYTE(v32) = v24;
    v25 = *((_QWORD *)v23 + 1);
    *((_QWORD *)v23 + 1) = v33;
    v33 = v25;
    sub_20EB911C0(&v33, v24);
  }
  v26 = a1[2];
  v27 = *a2;
  if (**(unsigned __int8 **)(*a2 + 40) > 1u
    || (v28 = *(unsigned __int8 *)(v27 + 88), *(_OWORD *)(v27 + 72) = *(_OWORD *)v26, v28))
  {
    if (*(_BYTE *)(v26 + 32))
    {
LABEL_30:
      v32 = *(_QWORD *)(v27 + 8);
      sub_20FD2A0B8((int *)&v32, v27, (__int128 *)(v26 + 16));
      return;
    }
  }
  else
  {
    *(_BYTE *)(v27 + 88) = 1;
    if (*(_BYTE *)(v26 + 32))
      goto LABEL_30;
  }
  LOBYTE(v32) = 0;
  v33 = 0;
  v29 = (unsigned __int8 *)sub_2101FA67C(v27);
  v30 = *v29;
  *v29 = 0;
  LOBYTE(v32) = v30;
  v31 = *((_QWORD *)v29 + 1);
  *((_QWORD *)v29 + 1) = v33;
  v33 = v31;
  sub_20EB911C0(&v33, v30);
}

void sub_20FD2AECC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned __int8 a9)
{
  uint64_t *v9;

  sub_20EB911C0(v9, a9);
  _Unwind_Resume(a1);
}

void sub_20FD2AEE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned __int8 a9)
{
  uint64_t *v9;

  sub_20EB911C0(v9, a9);
  _Unwind_Resume(a1);
}

void sub_20FD2AEFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned __int8 a9)
{
  uint64_t *v9;

  sub_20EB911C0(v9, a9);
  _Unwind_Resume(a1);
}

void sub_20FD2AF14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned __int8 a9)
{
  uint64_t *v9;

  sub_20EB911C0(v9, a9);
  _Unwind_Resume(a1);
}

void sub_20FD2AF2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned __int8 a9)
{
  uint64_t *v9;

  sub_20EB911C0(v9, a9);
  _Unwind_Resume(a1);
}

void sub_20FD2AF44(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int8 *v10;
  int v11;
  uint64_t v12;
  int v13;
  int v14;
  int v15;
  int v16;
  uint64_t v17;
  unsigned __int8 *v18;
  int v19;
  uint64_t v20;
  const char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v4 = *a1;
  v5 = *a2;
  if (**(unsigned __int8 **)(*a2 + 40) > 1u
    || (v6 = *(unsigned __int8 *)(v5 + 88), *(_OWORD *)(v5 + 72) = *(_OWORD *)v4, v6))
  {
    if (*(_BYTE *)(v4 + 40))
      goto LABEL_4;
LABEL_7:
    LOBYTE(v21) = 0;
    v22 = 0;
    v10 = (unsigned __int8 *)sub_2101FA67C(v5);
    v11 = *v10;
    *v10 = 0;
    LOBYTE(v21) = v11;
    v12 = *((_QWORD *)v10 + 1);
    *((_QWORD *)v10 + 1) = v22;
    v22 = v12;
    sub_20EB911C0(&v22, v11);
    v8 = a1[1];
    v9 = *a2;
    if (**(unsigned __int8 **)(v9 + 40) > 1u)
      goto LABEL_9;
    goto LABEL_8;
  }
  *(_BYTE *)(v5 + 88) = 1;
  if (!*(_BYTE *)(v4 + 40))
    goto LABEL_7;
LABEL_4:
  v7 = *(_QWORD *)(v4 + 16);
  v21 = (const char *)(0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(v4 + 24) - v7) >> 3));
  v22 = v7;
  sub_2101FD0E0(v5, (unint64_t *)&v21);
  v8 = a1[1];
  v9 = *a2;
  if (**(unsigned __int8 **)(v9 + 40) > 1u)
  {
LABEL_9:
    if (*(_BYTE *)(v8 + 280))
      goto LABEL_10;
LABEL_22:
    LOBYTE(v21) = 0;
    v22 = 0;
    v18 = (unsigned __int8 *)sub_2101FA67C(v9);
    v19 = *v18;
    *v18 = v21;
    LOBYTE(v21) = v19;
    v20 = *((_QWORD *)v18 + 1);
    *((_QWORD *)v18 + 1) = v22;
    v22 = v20;
    sub_20EB911C0(&v22, v19);
    return;
  }
LABEL_8:
  v13 = *(unsigned __int8 *)(v9 + 88);
  *(_OWORD *)(v9 + 72) = *(_OWORD *)v8;
  if (v13)
    goto LABEL_9;
  *(_BYTE *)(v9 + 88) = 1;
  if (!*(_BYTE *)(v8 + 280))
    goto LABEL_22;
LABEL_10:
  v14 = *(_DWORD *)(v9 + 8);
  sub_2101FA8A4(v9);
  v21 = "version";
  v22 = 7;
  LODWORD(v23) = 1;
  if (**(unsigned __int8 **)(v9 + 40) <= 1u)
  {
    v15 = *(unsigned __int8 *)(v9 + 88);
    *(_QWORD *)(v9 + 72) = "version";
    *(_QWORD *)(v9 + 80) = 7;
    if (!v15)
      *(_BYTE *)(v9 + 88) = 1;
  }
  sub_2101FB154(v9, &v23);
  if (v14 == 2)
  {
    v21 = "min_version";
    v22 = 11;
    LODWORD(v23) = 1;
    if (**(unsigned __int8 **)(v9 + 40) <= 1u)
    {
      v16 = *(unsigned __int8 *)(v9 + 88);
      *(_QWORD *)(v9 + 72) = "min_version";
      *(_QWORD *)(v9 + 80) = 11;
      if (!v16)
        *(_BYTE *)(v9 + 88) = 1;
    }
    sub_2101FB154(v9, &v23);
  }
  v21 = (const char *)(v8 + 16);
  v22 = v8 + 56;
  v23 = v8 + 80;
  sub_2101FA8A4(v9);
  v24 = v9;
  sub_20FD2B208((uint64_t)&v21, &v24);
  v17 = *(_QWORD *)(v9 + 56);
  *(_QWORD *)(v9 + 40) = *(_QWORD *)(v17 - 8);
  *(_QWORD *)(v9 + 56) = v17 - 8;
  if (*(_BYTE *)(v9 + 88))
    *(_BYTE *)(v9 + 88) = 0;
  *(_QWORD *)(v9 + 40) = *(_QWORD *)(v17 - 16);
  *(_QWORD *)(v9 + 56) = v17 - 16;
}

void sub_20FD2B1D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned __int8 a9)
{
  uint64_t *v9;

  sub_20EB911C0(v9, a9);
  _Unwind_Resume(a1);
}

void sub_20FD2B1F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned __int8 a9)
{
  uint64_t *v9;

  sub_20EB911C0(v9, a9);
  _Unwind_Resume(a1);
}

void sub_20FD2B208(uint64_t a1, uint64_t *a2)
{
  _OWORD *v4;
  uint64_t v5;
  int v6;
  _OWORD *v7;
  uint64_t v8;
  int v9;
  uint64_t *v10;
  int *v11;
  int v12;
  int v13;
  uint64_t v15;
  unsigned __int8 *v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  int v22;
  int v23;
  int v24;
  uint64_t v25;
  unsigned __int8 *v26;
  int v27;
  uint64_t v28;
  const char *v29;
  uint64_t v30;
  int v31;
  uint64_t v32;

  v4 = *(_OWORD **)a1;
  v5 = *a2;
  if (**(unsigned __int8 **)(*a2 + 40) <= 1u)
  {
    v6 = *(unsigned __int8 *)(v5 + 88);
    *(_OWORD *)(v5 + 72) = *v4;
    if (!v6)
      *(_BYTE *)(v5 + 88) = 1;
  }
  sub_2101FB61C(v5, (uint64_t)(v4 + 1));
  v7 = *(_OWORD **)(a1 + 8);
  v8 = *a2;
  if (**(unsigned __int8 **)(*a2 + 40) > 1u)
  {
    v10 = (uint64_t *)(v7 + 1);
    if (!*(_BYTE *)(v8 + 88))
    {
LABEL_14:
      v15 = *v10;
      LOBYTE(v29) = 5;
      v30 = v15;
      v16 = (unsigned __int8 *)sub_2101FA67C(v8);
      v17 = *v16;
      *v16 = 5;
      LOBYTE(v29) = v17;
      v18 = *((_QWORD *)v16 + 1);
      *((_QWORD *)v16 + 1) = v30;
      v30 = v18;
      sub_20EB911C0(&v30, v17);
      goto LABEL_15;
    }
  }
  else
  {
    v9 = *(unsigned __int8 *)(v8 + 88);
    *(_OWORD *)(v8 + 72) = *v7;
    if (!v9)
      *(_BYTE *)(v8 + 88) = 1;
    v10 = (uint64_t *)(v7 + 1);
  }
  if (*(_QWORD *)(v8 + 80) != 7)
    goto LABEL_14;
  v11 = *(int **)(v8 + 72);
  v12 = *v11;
  v13 = *(int *)((char *)v11 + 3);
  if (v12 != *(_DWORD *)"version" || v13 != *(_DWORD *)"sion")
    goto LABEL_14;
LABEL_15:
  v19 = *(_QWORD *)(a1 + 16);
  v20 = *a2;
  if (**(unsigned __int8 **)(v20 + 40) > 1u
    || (v21 = *(unsigned __int8 *)(v20 + 88), *(_OWORD *)(v20 + 72) = *(_OWORD *)v19, v21))
  {
    if (*(_BYTE *)(v19 + 192))
      goto LABEL_18;
LABEL_30:
    LOBYTE(v29) = 0;
    v30 = 0;
    v26 = (unsigned __int8 *)sub_2101FA67C(v20);
    v27 = *v26;
    *v26 = 0;
    LOBYTE(v29) = v27;
    v28 = *((_QWORD *)v26 + 1);
    *((_QWORD *)v26 + 1) = v30;
    v30 = v28;
    sub_20EB911C0(&v30, v27);
    return;
  }
  *(_BYTE *)(v20 + 88) = 1;
  if (!*(_BYTE *)(v19 + 192))
    goto LABEL_30;
LABEL_18:
  v22 = *(_DWORD *)(v20 + 8);
  sub_2101FA8A4(v20);
  v29 = "version";
  v30 = 7;
  v31 = 1;
  if (**(unsigned __int8 **)(v20 + 40) <= 1u)
  {
    v23 = *(unsigned __int8 *)(v20 + 88);
    *(_QWORD *)(v20 + 72) = "version";
    *(_QWORD *)(v20 + 80) = 7;
    if (!v23)
      *(_BYTE *)(v20 + 88) = 1;
  }
  sub_2101FB154(v20, &v31);
  if (v22 == 2)
  {
    v29 = "min_version";
    v30 = 11;
    v31 = 1;
    if (**(unsigned __int8 **)(v20 + 40) <= 1u)
    {
      v24 = *(unsigned __int8 *)(v20 + 88);
      *(_QWORD *)(v20 + 72) = "min_version";
      *(_QWORD *)(v20 + 80) = 11;
      if (!v24)
        *(_BYTE *)(v20 + 88) = 1;
    }
    sub_2101FB154(v20, &v31);
  }
  v29 = (const char *)(v19 + 16);
  v30 = v19 + 64;
  sub_2101FA8A4(v20);
  v32 = v20;
  sub_20FD2B4FC((uint64_t *)&v29, &v32);
  v25 = *(_QWORD *)(v20 + 56);
  *(_QWORD *)(v20 + 40) = *(_QWORD *)(v25 - 8);
  *(_QWORD *)(v20 + 56) = v25 - 8;
  if (*(_BYTE *)(v20 + 88))
    *(_BYTE *)(v20 + 88) = 0;
  *(_QWORD *)(v20 + 40) = *(_QWORD *)(v25 - 16);
  *(_QWORD *)(v20 + 56) = v25 - 16;
}

void sub_20FD2B4CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned __int8 a9)
{
  uint64_t *v9;

  sub_20EB911C0(v9, a9);
  _Unwind_Resume(a1);
}

void sub_20FD2B4E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned __int8 a9)
{
  uint64_t *v9;

  sub_20EB911C0(v9, a9);
  _Unwind_Resume(a1);
}

void sub_20FD2B4FC(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  unsigned __int8 *v9;
  int v10;
  uint64_t v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  unsigned __int8 *v17;
  uint64_t v18;
  int v19;
  _BOOL4 v20;
  int *v21;
  int v22;
  int v23;
  unsigned __int8 *v25;
  int v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  int v30;
  _BOOL4 v31;
  int *v32;
  int v33;
  int v34;
  unsigned __int8 *v36;
  int v37;
  uint64_t v38;
  _BYTE *v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int v45;

  v4 = *a1;
  v5 = *a2;
  if (**(unsigned __int8 **)(*a2 + 40) > 1u
    || (v6 = *(unsigned __int8 *)(v5 + 88), *(_OWORD *)(v5 + 72) = *(_OWORD *)v4, v6))
  {
    if (*(_BYTE *)(v4 + 40))
      goto LABEL_4;
  }
  else
  {
    *(_BYTE *)(v5 + 88) = 1;
    if (*(_BYTE *)(v4 + 40))
    {
LABEL_4:
      sub_2101FB61C(v5, v4 + 16);
      v7 = a1[1];
      v8 = *a2;
      if (**(unsigned __int8 **)(v8 + 40) > 1u)
        goto LABEL_9;
      goto LABEL_8;
    }
  }
  v44 = 0;
  v9 = (unsigned __int8 *)sub_2101FA67C(v5);
  v10 = *v9;
  *v9 = 0;
  v11 = *((_QWORD *)v9 + 1);
  *((_QWORD *)v9 + 1) = v44;
  v44 = v11;
  sub_20EB911C0(&v44, v10);
  v7 = a1[1];
  v8 = *a2;
  if (**(unsigned __int8 **)(v8 + 40) > 1u)
    goto LABEL_9;
LABEL_8:
  v12 = *(unsigned __int8 *)(v8 + 88);
  *(_OWORD *)(v8 + 72) = *(_OWORD *)v7;
  if (!v12)
  {
    *(_BYTE *)(v8 + 88) = 1;
    if (*(_BYTE *)(v7 + 120))
      goto LABEL_10;
LABEL_33:
    v44 = 0;
    v25 = (unsigned __int8 *)sub_2101FA67C(v8);
    v26 = *v25;
    *v25 = 0;
    v27 = *((_QWORD *)v25 + 1);
    *((_QWORD *)v25 + 1) = v44;
    v44 = v27;
    sub_20EB911C0(&v44, v26);
    return;
  }
LABEL_9:
  if (!*(_BYTE *)(v7 + 120))
    goto LABEL_33;
LABEL_10:
  v13 = *(_DWORD *)(v8 + 8);
  sub_2101FA8A4(v8);
  v44 = 7;
  v45 = 1;
  if (**(unsigned __int8 **)(v8 + 40) > 1u
    || (v14 = *(unsigned __int8 *)(v8 + 88), *(_QWORD *)(v8 + 72) = "version", *(_QWORD *)(v8 + 80) = 7, v14))
  {
    sub_2101FB154(v8, &v45);
    if (v13 >= 1)
      goto LABEL_13;
  }
  else
  {
    *(_BYTE *)(v8 + 88) = 1;
    sub_2101FB154(v8, &v45);
    if (v13 >= 1)
    {
LABEL_13:
      if (v13 == 2)
      {
        v44 = 11;
        v45 = 1;
        if (**(unsigned __int8 **)(v8 + 40) <= 1u)
        {
          v15 = *(unsigned __int8 *)(v8 + 88);
          *(_QWORD *)(v8 + 72) = "min_version";
          *(_QWORD *)(v8 + 80) = 11;
          if (!v15)
            *(_BYTE *)(v8 + 88) = 1;
        }
        sub_2101FB154(v8, &v45);
      }
      sub_2101FA8A4(v8);
      if (**(unsigned __int8 **)(v8 + 40) <= 1u)
      {
        v16 = *(unsigned __int8 *)(v8 + 88);
        *(_OWORD *)(v8 + 72) = *(_OWORD *)(v7 + 16);
        if (!v16)
          *(_BYTE *)(v8 + 88) = 1;
      }
      sub_2101FB61C(v8, v7 + 32);
      v17 = *(unsigned __int8 **)(v8 + 40);
      if (*v17 >= 2u)
      {
        v18 = *(_QWORD *)(v8 + 80);
        v20 = *(_BYTE *)(v8 + 88) != 0;
      }
      else
      {
        v18 = *(_QWORD *)(v7 + 64);
        v19 = *(unsigned __int8 *)(v8 + 88);
        *(_QWORD *)(v8 + 72) = *(_QWORD *)(v7 + 56);
        *(_QWORD *)(v8 + 80) = v18;
        v20 = 1;
        if (!v19)
          *(_BYTE *)(v8 + 88) = 1;
      }
      if (v20 && v18 == 7)
      {
        v21 = *(int **)(v8 + 72);
        v22 = *v21;
        v23 = *(int *)((char *)v21 + 3);
        if (v22 == *(_DWORD *)"version" && v23 == *(_DWORD *)"sion")
          goto LABEL_49;
      }
      goto LABEL_48;
    }
  }
  sub_2101FA8A4(v8);
  if (**(unsigned __int8 **)(v8 + 40) <= 1u)
  {
    v28 = *(unsigned __int8 *)(v8 + 88);
    *(_OWORD *)(v8 + 72) = *(_OWORD *)(v7 + 16);
    if (!v28)
      *(_BYTE *)(v8 + 88) = 1;
  }
  sub_2101FB61C(v8, v7 + 32);
  v17 = *(unsigned __int8 **)(v8 + 40);
  if (*v17 >= 2u)
  {
    v29 = *(_QWORD *)(v8 + 80);
    v31 = *(_BYTE *)(v8 + 88) != 0;
  }
  else
  {
    v29 = *(_QWORD *)(v7 + 64);
    v30 = *(unsigned __int8 *)(v8 + 88);
    *(_QWORD *)(v8 + 72) = *(_QWORD *)(v7 + 56);
    *(_QWORD *)(v8 + 80) = v29;
    v31 = 1;
    if (!v30)
      *(_BYTE *)(v8 + 88) = 1;
  }
  if (v31 && v29 == 7)
  {
    v32 = *(int **)(v8 + 72);
    v33 = *v32;
    v34 = *(int *)((char *)v32 + 3);
    if (v33 == *(_DWORD *)"version" && v34 == *(_DWORD *)"sion")
      goto LABEL_49;
  }
LABEL_48:
  v44 = *(_QWORD *)(v7 + 72);
  v36 = (unsigned __int8 *)sub_2101FA67C(v8);
  v37 = *v36;
  *v36 = 6;
  v38 = *((_QWORD *)v36 + 1);
  *((_QWORD *)v36 + 1) = v44;
  v44 = v38;
  sub_20EB911C0(&v44, v37);
  v17 = *(unsigned __int8 **)(v8 + 40);
LABEL_49:
  v39 = (_BYTE *)(v8 + 88);
  if (*v17 <= 1u)
  {
    v40 = *(unsigned __int8 *)(v8 + 88);
    *(_OWORD *)(v8 + 72) = *(_OWORD *)(v7 + 80);
    if (!v40)
      *v39 = 1;
  }
  sub_2101FB61C(v8, v7 + 96);
  v41 = *(_QWORD *)(v8 + 56);
  v43 = *(_QWORD *)(v41 - 8);
  v42 = v41 - 8;
  *(_QWORD *)(v8 + 40) = v43;
  *(_QWORD *)(v8 + 56) = v42;
  if (*(_BYTE *)(v8 + 88))
    *v39 = 0;
  *(_QWORD *)(v8 + 40) = *(_QWORD *)(v42 - 8);
  *(_QWORD *)(v8 + 56) = v42 - 8;
}

void sub_20FD2B950(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unsigned __int8 a10)
{
  uint64_t *v10;

  sub_20EB911C0(v10, a10);
  _Unwind_Resume(a1);
}

void sub_20FD2B970(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unsigned __int8 a10)
{
  uint64_t *v10;

  sub_20EB911C0(v10, a10);
  _Unwind_Resume(a1);
}

void sub_20FD2B988(_QWORD *a1)
{
  if (a1)
  {
    sub_20FD2B988(*a1);
    sub_20FD2B988(a1[1]);
    if (*((_BYTE *)a1 + 224))
      sub_20E8DDADC((uint64_t)(a1 + 8));
    operator delete(a1);
  }
}

uint64_t sub_20FD2B9D0(uint64_t a1, const char *a2, uint64_t a3)
{
  uint64_t result;
  char v6;
  _DWORD v7[6];
  int v8;
  _QWORD **v9;
  const char *v10;
  _DWORD *v11;
  const char *v12;
  const char *v13;
  _QWORD *v14;

  v8 = 0;
  sub_20E9EBBAC(v7, "Could not open diagnostics ");
  if (*(_QWORD *)a2)
  {
    v9 = (_QWORD **)v7;
    v10 = a2;
    v11 = v7;
    v12 = a2;
    v13 = a2;
    if (v8 != -1)
    {
      v14 = &v9;
      ((void (*)(_QWORD **, _DWORD *))off_24CA06930[v8])(&v14, v7);
      goto LABEL_6;
    }
LABEL_12:
    sub_20E877AB8();
  }
  v9 = (_QWORD **)v7;
  v10 = "nullptr";
  v11 = v7;
  v12 = "nullptr";
  v13 = "nullptr";
  if (v8 == -1)
    goto LABEL_12;
  v14 = &v9;
  ((void (*)(_QWORD **, _DWORD *))off_24CA061A0[v8])(&v14, v7);
LABEL_6:
  v9 = (_QWORD **)v7;
  v10 = " at application group folder ";
  v11 = v7;
  v12 = " at application group folder ";
  v13 = " at application group folder ";
  if (v8 == -1)
    sub_20E877AB8();
  v14 = &v9;
  ((void (*)(_QWORD **, _DWORD *))off_24CA06948[v8])(&v14, v7);
  sub_20EB04FEC((uint64_t)&v6, (uint64_t)v7, a3);
  v9 = (_QWORD **)v7;
  v10 = ". Target requires entitlement 'com.apple.security.application-groups' value 'group.com.apple.cv3d'.";
  v11 = v7;
  v12 = ". Target requires entitlement 'com.apple.security.application-groups' value 'group.com.apple.cv3d'.";
  v13 = ". Target requires entitlement 'com.apple.security.application-groups' value 'group.com.apple.cv3d'.";
  if (v8 == -1)
    sub_20E877AB8();
  v14 = &v9;
  ((void (*)(_QWORD **, _DWORD *))off_24CA06960[v8])(&v14, v7);
  if (v8 == -1)
    sub_20E877AB8();
  v9 = &v14;
  result = ((uint64_t (*)(_QWORD ***, _DWORD *))off_24CA061E8[v8])(&v9, v7);
  if (v8 != -1)
    return ((uint64_t (*)(_QWORD ***, _DWORD *))off_24CA06188[v8])(&v9, v7);
  return result;
}

void sub_20FD2BBB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E877A60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FD2BBC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E877A60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FD2BBDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E877A60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FD2BBF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E877A60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FD2BC04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E877A60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FD2BC18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E877A60((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20FD2BC2C(uint64_t a1, const char *a2, const char *a3)
{
  uint64_t result;
  _DWORD v6[6];
  int v7;
  _QWORD **v8;
  const char *v9;
  _DWORD *v10;
  const char *v11;
  const char *v12;
  _QWORD *v13;

  v7 = 0;
  sub_20E9EC940(v6, "failed to create diagnostics ");
  if (*(_QWORD *)a2)
  {
    v8 = (_QWORD **)v6;
    v9 = a2;
    v10 = v6;
    v11 = a2;
    v12 = a2;
    if (v7 != -1)
    {
      v13 = &v8;
      ((void (*)(_QWORD **, _DWORD *))off_24CA06930[v7])(&v13, v6);
      goto LABEL_6;
    }
LABEL_12:
    sub_20E877AB8();
  }
  v8 = (_QWORD **)v6;
  v9 = "nullptr";
  v10 = v6;
  v11 = "nullptr";
  v12 = "nullptr";
  if (v7 == -1)
    goto LABEL_12;
  v13 = &v8;
  ((void (*)(_QWORD **, _DWORD *))off_24CA061A0[v7])(&v13, v6);
LABEL_6:
  v8 = (_QWORD **)v6;
  v9 = ", reason: ";
  v10 = v6;
  v11 = ", reason: ";
  v12 = ", reason: ";
  if (v7 == -1)
    sub_20E877AB8();
  v13 = &v8;
  ((void (*)(_QWORD **, _DWORD *))off_24CA06200[v7])(&v13, v6);
  v8 = (_QWORD **)v6;
  v9 = a3;
  v10 = v6;
  v11 = a3;
  v12 = a3;
  if (v7 == -1)
    sub_20E877AB8();
  v13 = &v8;
  ((void (*)(_QWORD **, _DWORD *))off_24CA06468[v7])(&v13, v6);
  if (v7 == -1)
    sub_20E877AB8();
  v8 = &v13;
  result = ((uint64_t (*)(_QWORD ***, _DWORD *))off_24CA061E8[v7])(&v8, v6);
  if (v7 != -1)
    return ((uint64_t (*)(_QWORD ***, _DWORD *))off_24CA06188[v7])(&v8, v6);
  return result;
}

void sub_20FD2BDF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E877A60((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20FD2BE0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E877A60((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20FD2BE20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E877A60((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20FD2BE34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E877A60((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20FD2BE48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E877A60((uint64_t)&a9);
  _Unwind_Resume(a1);
}

size_t sub_20FD2BE5C(_QWORD **a1)
{
  _DWORD *v1;
  const char *v2;
  uint64_t v3;
  size_t result;
  size_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  char v9;

  v1 = (_DWORD *)**a1;
  v2 = (const char *)(*a1)[1];
  v3 = v1[6];
  if ((_DWORD)v3 != -1)
    ((void (*)(char *, _DWORD *))off_24CA06188[v3])(&v9, v1);
  v1[6] = -1;
  result = strlen(v2);
  if (result >= 0x7FFFFFFFFFFFFFF8)
    sub_20E860B7C();
  v5 = result;
  if (result >= 0x17)
  {
    v7 = (result & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((result | 7) != 0x17)
      v7 = result | 7;
    v8 = v7 + 1;
    v6 = operator new(v7 + 1);
    *((_QWORD *)v1 + 1) = v5;
    *((_QWORD *)v1 + 2) = v8 | 0x8000000000000000;
    *(_QWORD *)v1 = v6;
  }
  else
  {
    *((_BYTE *)v1 + 23) = result;
    v6 = v1;
    if (!result)
      goto LABEL_11;
  }
  result = (size_t)memmove(v6, v2, v5);
LABEL_11:
  *((_BYTE *)v6 + v5) = 0;
  v1[6] = 1;
  return result;
}

void sub_20FD2BF48(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  char v5;
  void *v6;
  const char *v7;
  size_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  void *v14;
  _BYTE v15[15];
  char v16;
  void *__p[2];
  unint64_t v18;
  _QWORD v19[3];

  v19[2] = *MEMORY[0x24BDAC8D0];
  v2 = *a1;
  v3 = *(_QWORD *)(*a1 + 16);
  *(_QWORD *)((char *)v19 + 7) = *(_QWORD *)(a2 + 15);
  v4 = *(void **)a2;
  v19[0] = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 23);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v14 = v4;
  *(_QWORD *)v15 = v19[0];
  *(_QWORD *)&v15[7] = *(_QWORD *)((char *)v19 + 7);
  v16 = v5;
  memset(v19, 0, 15);
  v6 = __p;
  v7 = *(const char **)(v2 + 24);
  v8 = strlen(v7);
  if (v8 >= 0x7FFFFFFFFFFFFFF8)
    sub_20E860B7C();
  v9 = (void *)v8;
  if (v8 >= 0x17)
  {
    v11 = (v8 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v8 | 7) != 0x17)
      v11 = v8 | 7;
    v12 = v11 + 1;
    v6 = operator new(v11 + 1);
    __p[1] = v9;
    v18 = v12 | 0x8000000000000000;
    __p[0] = v6;
LABEL_9:
    memmove(v6, v7, (size_t)v9);
    *((_BYTE *)v9 + (_QWORD)v6) = 0;
    v10 = *(unsigned int *)(v3 + 24);
    if ((_DWORD)v10 == -1)
      goto LABEL_11;
    goto LABEL_10;
  }
  HIBYTE(v18) = v8;
  if (v8)
    goto LABEL_9;
  LOBYTE(__p[0]) = 0;
  v10 = *(unsigned int *)(v3 + 24);
  if ((_DWORD)v10 != -1)
LABEL_10:
    ((void (*)(char *, uint64_t))off_24CA06188[v10])(&v13, v3);
LABEL_11:
  *(_DWORD *)(v3 + 24) = -1;
  sub_20E877C80((_QWORD *)v3, (uint64_t)&v14, 2uLL);
  *(_DWORD *)(v3 + 24) = 2;
  if ((SHIBYTE(v18) & 0x80000000) == 0)
  {
    if ((v16 & 0x80000000) == 0)
      return;
LABEL_15:
    operator delete(v14);
    return;
  }
  operator delete(__p[0]);
  if (v16 < 0)
    goto LABEL_15;
}

void sub_20FD2C100(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a2)
    sub_20E860DA4(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_20FD2C144(uint64_t a1, void **a2)
{
  const void *v3;
  _BYTE *v4;
  _QWORD *v5;
  size_t v6;
  size_t v7;
  void *v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  size_t v18;
  size_t v19;
  void *v20;
  char *v21;
  void **v22;
  void **v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  void **v27;

  v3 = *(const void **)(*(_QWORD *)a1 + 32);
  v5 = a2[1];
  v4 = a2[2];
  if (v5 < (_QWORD *)v4)
  {
    v6 = strlen(*(const char **)(*(_QWORD *)a1 + 32));
    if (v6 > 0x7FFFFFFFFFFFFFF7)
      sub_20E860B7C();
    v7 = v6;
    if (v6 >= 0x17)
    {
      v14 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v6 | 7) != 0x17)
        v14 = v6 | 7;
      v15 = v14 + 1;
      v8 = operator new(v14 + 1);
      v5[1] = v7;
      v5[2] = v15 | 0x8000000000000000;
      *v5 = v8;
    }
    else
    {
      *((_BYTE *)v5 + 23) = v6;
      v8 = v5;
      if (!v6)
        goto LABEL_19;
    }
    memmove(v8, v3, v7);
LABEL_19:
    *((_BYTE *)v8 + v7) = 0;
    v16 = (char *)(v5 + 3);
    a2[1] = v5 + 3;
    goto LABEL_39;
  }
  v9 = 0xAAAAAAAAAAAAAAABLL * (((char *)v5 - (_BYTE *)*a2) >> 3);
  if (v9 + 1 > 0xAAAAAAAAAAAAAAALL)
    sub_20E867F44();
  v10 = 0xAAAAAAAAAAAAAAABLL * ((v4 - (_BYTE *)*a2) >> 3);
  v11 = 2 * v10;
  if (2 * v10 <= v9 + 1)
    v11 = v9 + 1;
  if (v10 >= 0x555555555555555)
    v12 = 0xAAAAAAAAAAAAAAALL;
  else
    v12 = v11;
  if (v12)
  {
    if (v12 > 0xAAAAAAAAAAAAAAALL)
      sub_20E877A38();
    v13 = (char *)operator new(24 * v12);
  }
  else
  {
    v13 = 0;
  }
  v17 = &v13[24 * v9];
  v18 = strlen((const char *)v3);
  if (v18 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  v19 = v18;
  if (v18 >= 0x17)
  {
    v24 = (v18 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v18 | 7) != 0x17)
      v24 = v18 | 7;
    v25 = v24 + 1;
    v20 = operator new(v24 + 1);
    *((_QWORD *)v17 + 1) = v19;
    *((_QWORD *)v17 + 2) = v25 | 0x8000000000000000;
    *(_QWORD *)v17 = v20;
  }
  else
  {
    v17[23] = v18;
    v20 = v17;
    if (!v18)
    {
      v21 = &v13[24 * v12];
      *v17 = 0;
      v16 = v17 + 24;
      v22 = (void **)*a2;
      v23 = (void **)a2[1];
      if (v23 == *a2)
        goto LABEL_36;
      do
      {
LABEL_30:
        v26 = *(_OWORD *)(v23 - 3);
        *((_QWORD *)v17 - 1) = *(v23 - 1);
        *(_OWORD *)(v17 - 24) = v26;
        v17 -= 24;
        *(v23 - 2) = 0;
        *(v23 - 1) = 0;
        *(v23 - 3) = 0;
        v23 -= 3;
      }
      while (v23 != v22);
      v23 = (void **)*a2;
      v27 = (void **)a2[1];
      *a2 = v17;
      a2[1] = v16;
      a2[2] = v21;
      while (v27 != v23)
      {
        if (*((char *)v27 - 1) < 0)
          operator delete(*(v27 - 3));
        v27 -= 3;
      }
      goto LABEL_37;
    }
  }
  memmove(v20, v3, v19);
  v21 = &v13[24 * v12];
  *((_BYTE *)v20 + v19) = 0;
  v16 = v17 + 24;
  v22 = (void **)*a2;
  v23 = (void **)a2[1];
  if (v23 != *a2)
    goto LABEL_30;
LABEL_36:
  *a2 = v17;
  a2[1] = v16;
  a2[2] = v21;
LABEL_37:
  if (v23)
    operator delete(v23);
LABEL_39:
  a2[1] = v16;
}

void sub_20FD2C3D4(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

void sub_20FD2C3EC(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_20FD2C3F8()
{
  JUMPOUT(0x212BC6398);
}

void sub_20FD2C40C(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  __int128 *v3;
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  std::mutex *v14;
  _BYTE *v15;
  uint64_t v16;
  __int128 v17;
  void *__dst[2];
  uint64_t v19;
  void *v20;
  std::__shared_weak_count *v21;
  void *__p[2];
  uint64_t v23;
  uint64_t v24;
  _BYTE v25[20];
  int v26;
  uint64_t v27;

  v27 = *MEMORY[0x24BDAC8D0];
  v2 = *(_QWORD *)(a1 + 8);
  v1 = *(_QWORD **)(a1 + 16);
  v3 = (__int128 *)v1[1];
  if (*((char *)v3 + 23) < 0)
  {
    sub_20E860C04(__dst, *(void **)v3, *((_QWORD *)v3 + 1));
  }
  else
  {
    v4 = *v3;
    v19 = *((_QWORD *)v3 + 2);
    *(_OWORD *)__dst = v4;
  }
  v6 = v1[2];
  v5 = v1[3];
  v7 = *(unsigned __int8 *)(v5 + 16);
  v17 = *(_OWORD *)v1[4];
  if (*(_BYTE *)(v5 + 16))
  {
    v8 = *(_QWORD *)v5;
    v9 = *(_QWORD *)(v5 + 8);
  }
  else
  {
    sub_20E8965F4();
    __p[0] = v20;
    sub_20E893368((unsigned int *)v25, (uint64_t *)__p);
    v8 = (*(unsigned int *)v25 | ((unint64_t)v25[4] << 32) | ((unint64_t)v25[5] << 40)) & 0xFFFFFFFFFFFFFFLL | ((unint64_t)v25[7] << 56) | ((unint64_t)(HIWORD(*(_DWORD *)&v25[4]) & 0xF | 0x40u) << 48);
    v9 = ((unint64_t)v25[12] << 32) | ((unint64_t)v25[13] << 40) | *(_DWORD *)&v25[8] & 0xFFFFFF00 | ((unint64_t)*(unsigned int *)&v25[12] << 32) & 0xFF00000000000000 | ((unint64_t)v25[14] << 48) | v25[8] & 0x3F | 0x80;
  }
  v10 = operator new();
  if (SHIBYTE(v19) < 0)
  {
    sub_20E860C04(__p, __dst[0], (unint64_t)__dst[1]);
  }
  else
  {
    *(_OWORD *)__p = *(_OWORD *)__dst;
    v23 = v19;
  }
  if (SHIBYTE(v23) < 0)
  {
    sub_20E860C04((_BYTE *)v10, __p[0], (unint64_t)__p[1]);
  }
  else
  {
    *(_OWORD *)v10 = *(_OWORD *)__p;
    *(_QWORD *)(v10 + 16) = v23;
  }
  *(_QWORD *)(v10 + 32) = v8;
  *(_QWORD *)(v10 + 24) = v6;
  *(_QWORD *)(v10 + 40) = v9;
  *(_QWORD *)v25 = 0x400000001;
  *(_DWORD *)&v25[8] = 0;
  *(_QWORD *)&v25[12] = 1;
  v26 = 0;
  sub_20FD0E078(v10 + 48, (_OWORD *)(v10 + 32), (__n128 *)v25);
  *(_OWORD *)(v10 + 280) = v17;
  *(_QWORD *)(v10 + 296) = 0;
  if (SHIBYTE(v23) < 0)
  {
    operator delete(__p[0]);
    if (v7)
      goto LABEL_22;
  }
  else if (v7)
  {
    goto LABEL_22;
  }
  v11 = v21;
  if (v21)
  {
    p_shared_owners = (unint64_t *)&v21->__shared_owners_;
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
LABEL_22:
  sub_20FD0F3AC(v10);
  if (*(_BYTE *)(v10 + 288))
  {
    v14 = *(std::mutex **)(v10 + 280);
    v15 = (_BYTE *)operator new();
    *(_QWORD *)v15 = v14;
    v15[8] = 1;
    std::mutex::lock(v14);
  }
  else
  {
    v15 = 0;
  }
  __p[0] = v15;
  v16 = *(_QWORD *)(v10 + 24);
  v24 = 3600000000000;
  *(_OWORD *)v25 = *(_OWORD *)(v10 + 32);
  v25[16] = 1;
  sub_20FD0F448(v10, v16, &v24, v25);
  if (v15)
  {
    if (v15[8])
      std::mutex::unlock(*(std::mutex **)v15);
    MEMORY[0x212BC6398](v15, 0x1020C405F07FB98);
  }
  if (SHIBYTE(v19) < 0)
    operator delete(__dst[0]);
  if (*(_BYTE *)(v2 + 128))
  {
    if (*(_BYTE *)(v2 + 120))
    {
      sub_20FD205B8((uint64_t *)(v2 + 8), 0);
    }
    else if (*(_BYTE *)(v2 + 112))
    {
      if (*(_BYTE *)(v2 + 104))
      {
        if (*(char *)(v2 + 103) < 0)
          operator delete(*(void **)(v2 + 80));
        if (*(char *)(v2 + 71) < 0)
          operator delete(*(void **)(v2 + 48));
      }
      if (*(_BYTE *)(v2 + 40) && *(char *)(v2 + 39) < 0)
        operator delete(*(void **)(v2 + 16));
    }
  }
  *(_QWORD *)v2 = &off_24CA06A20;
  *(_QWORD *)(v2 + 8) = v10;
  *(_BYTE *)(v2 + 120) = 1;
  *(_BYTE *)(v2 + 128) = 1;
}

void sub_20FD2C788(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, std::__shared_weak_count *a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  uint64_t v25;
  int v26;
  unint64_t *p_shared_owners;
  unint64_t v29;

  if (a25 < 0)
    operator delete(__p);
  MEMORY[0x212BC6398](v25, 0x1032C40AA77330FLL);
  if (!v26)
  {
    if (a18)
    {
      p_shared_owners = (unint64_t *)&a18->__shared_owners_;
      do
        v29 = __ldaxr(p_shared_owners);
      while (__stlxr(v29 - 1, p_shared_owners));
      if (!v29)
      {
        ((void (*)(std::__shared_weak_count *))a18->__on_zero_shared)(a18);
        std::__shared_weak_count::__release_weak(a18);
      }
    }
  }
  if (a16 < 0)
  {
    operator delete(a11);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void sub_20FD2C8E8()
{
  JUMPOUT(0x212BC6398);
}

void sub_20FD2C8FC(uint64_t a1)
{
  __int128 **v1;
  uint64_t v2;
  uint64_t *v3;
  __int128 *v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  __int128 *v9;
  uint64_t v10;
  __int128 *v11;
  uint64_t v12;
  std::mutex *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  __int128 v20;
  unint64_t *v21;
  unint64_t v22;
  std::unique_lock<std::mutex>::mutex_type *v23;
  pthread_t *v24;
  std::__thread_struct *v25;
  _QWORD *v26;
  int v27;
  std::thread *v28;
  uint64_t v29;
  uint64_t v30;
  unsigned __int8 v31;
  unint64_t *v32;
  unint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  unint64_t *v36;
  unint64_t v37;
  std::thread **v38;
  int v39;
  std::unique_lock<std::mutex>::mutex_type *v40;
  std::__shared_weak_count *v41;
  std::unique_lock<std::mutex> __lk;
  uint64_t v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  int v47;
  uint64_t v48;

  v48 = *MEMORY[0x24BDAC8D0];
  v2 = *(_QWORD *)(a1 + 8);
  v1 = *(__int128 ***)(a1 + 16);
  v4 = *v1;
  v3 = (uint64_t *)v1[1];
  v6 = *v3;
  v5 = (std::__shared_weak_count *)v3[1];
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }
  v10 = (uint64_t)v1[2];
  v9 = v1[3];
  v11 = v1[4];
  v13 = *(std::mutex **)v11;
  v12 = *((_QWORD *)v11 + 1);
  v39 = *((unsigned __int8 *)v9 + 16);
  if (*((_BYTE *)v9 + 16))
  {
    v14 = *(_QWORD *)v9;
    v15 = *((_QWORD *)v9 + 1);
  }
  else
  {
    sub_20E8965F4();
    __lk.__m_ = v40;
    sub_20E893368((unsigned int *)&v44, (uint64_t *)&__lk);
    v14 = (v44 | ((unint64_t)BYTE4(v44) << 32) | ((unint64_t)BYTE5(v44) << 40)) & 0xFFFFFFFFFFFFFFLL | ((unint64_t)HIBYTE(v44) << 56) | ((unint64_t)(HIWORD(HIDWORD(v44)) & 0xF | 0x40u) << 48);
    v15 = ((unint64_t)v46 << 32) | ((unint64_t)BYTE1(v46) << 40) | v45 & 0xFFFFFF00 | ((unint64_t)v46 << 32) & 0xFF00000000000000 | ((unint64_t)BYTE2(v46) << 48) | v45 & 0x3F | 0x80;
  }
  v16 = operator new();
  v17 = v16;
  if (v5)
  {
    v18 = (unint64_t *)&v5->__shared_owners_;
    do
      v19 = __ldxr(v18);
    while (__stxr(v19 + 1, v18));
  }
  *(_QWORD *)v16 = &off_24CA06060;
  if (*((char *)v4 + 23) < 0)
  {
    sub_20E860C04((_BYTE *)(v16 + 8), *(void **)v4, *((_QWORD *)v4 + 1));
  }
  else
  {
    v20 = *v4;
    *(_QWORD *)(v16 + 24) = *((_QWORD *)v4 + 2);
    *(_OWORD *)(v16 + 8) = v20;
  }
  *(_QWORD *)(v17 + 32) = v6;
  *(_QWORD *)(v17 + 40) = v5;
  if (v5)
  {
    v21 = (unint64_t *)&v5->__shared_owners_;
    do
      v22 = __ldxr(v21);
    while (__stxr(v22 + 1, v21));
  }
  *(_QWORD *)(v17 + 56) = v14;
  *(_QWORD *)(v17 + 48) = v10;
  *(_QWORD *)(v17 + 64) = v15;
  sub_20FD0EC98(v17 + 72, v17 + 8, (unsigned __int8 *)(v17 + 56));
  v44 = 0x400000001;
  v45 = 0;
  v46 = 1;
  v47 = 0;
  sub_20FD0E078(v17 + 96, (_OWORD *)(v17 + 56), (__n128 *)&v44);
  *(_QWORD *)(v17 + 328) = v13;
  *(_QWORD *)(v17 + 336) = v12;
  v38 = (std::thread **)(v17 + 344);
  *(_QWORD *)(v17 + 344) = 0;
  *(_QWORD *)(v17 + 352) = 850045863;
  *(_OWORD *)(v17 + 360) = 0u;
  *(_OWORD *)(v17 + 376) = 0u;
  *(_OWORD *)(v17 + 392) = 0u;
  *(_QWORD *)(v17 + 408) = 0;
  *(_QWORD *)(v17 + 416) = 850045863;
  *(_OWORD *)(v17 + 424) = 0u;
  *(_OWORD *)(v17 + 440) = 0u;
  *(_OWORD *)(v17 + 456) = 0u;
  *(_OWORD *)(v17 + 466) = 0u;
  *(_QWORD *)(v17 + 488) = 1018212795;
  *(_OWORD *)(v17 + 496) = 0u;
  *(_OWORD *)(v17 + 512) = 0u;
  *(_QWORD *)(v17 + 528) = 0;
  *(_QWORD *)(v17 + 536) = 1018212795;
  *(_OWORD *)(v17 + 560) = 0u;
  *(_OWORD *)(v17 + 576) = 0u;
  *(_OWORD *)(v17 + 544) = 0u;
  if ((_BYTE)v12)
  {
    v23 = (std::unique_lock<std::mutex>::mutex_type *)operator new();
    v23->__m_.__sig = (uint64_t)v13;
    v23->__m_.__opaque[0] = 1;
    std::mutex::lock(v13);
  }
  else
  {
    v23 = 0;
  }
  __lk.__m_ = v23;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v10 + 128))(v10, v17 + 8);
  v43 = 3600000000000;
  LOBYTE(v44) = 0;
  BYTE4(v46) = 0;
  sub_20FD0F448(v17 + 8, v10, &v43, (unsigned __int8 *)&v44);
  if (v23)
  {
    if (v23->__m_.__opaque[0])
      std::mutex::unlock((std::mutex *)v23->__m_.__sig);
    MEMORY[0x212BC6398](v23, 0x1020C405F07FB98);
  }
  sub_20FD1B460(v17);
  v24 = (pthread_t *)operator new();
  v25 = (std::__thread_struct *)operator new();
  std::__thread_struct::__thread_struct(v25);
  __lk.__m_ = (std::unique_lock<std::mutex>::mutex_type *)v25;
  v26 = (_QWORD *)operator new();
  __lk.__m_ = 0;
  *v26 = v25;
  v26[1] = sub_20FD1B97C;
  v26[2] = v17;
  v43 = (uint64_t)v26;
  v27 = pthread_create(v24, 0, (void *(__cdecl *)(void *))sub_20FD20644, v26);
  if (v27)
  {
    std::__throw_system_error(v27, "thread constructor failed");
    __break(1u);
  }
  v28 = *v38;
  *v38 = (std::thread *)v24;
  if (v28)
  {
    std::thread::~thread(v28);
    MEMORY[0x212BC6398](v29, 0x20C4093837F09, v30);
  }
  __lk.__m_ = (std::unique_lock<std::mutex>::mutex_type *)(v17 + 352);
  __lk.__owns_ = 1;
  std::mutex::lock((std::mutex *)(v17 + 352));
  while (1)
  {
    v31 = atomic_load((unsigned __int8 *)(v17 + 480));
    if ((v31 & 1) != 0)
      break;
    std::condition_variable::wait((std::condition_variable *)(v17 + 488), &__lk);
  }
  if (__lk.__owns_)
    std::mutex::unlock(__lk.__m_);
  if (!v5)
    goto LABEL_35;
  v32 = (unint64_t *)&v5->__shared_owners_;
  do
    v33 = __ldaxr(v32);
  while (__stlxr(v33 - 1, v32));
  if (!v33)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
    if (v39)
      goto LABEL_36;
  }
  else
  {
LABEL_35:
    if (v39)
      goto LABEL_36;
  }
  if (v41)
  {
    v36 = (unint64_t *)&v41->__shared_owners_;
    do
      v37 = __ldaxr(v36);
    while (__stlxr(v37 - 1, v36));
    if (!v37)
    {
      ((void (*)())v41->__on_zero_shared)();
      std::__shared_weak_count::__release_weak(v41);
    }
  }
LABEL_36:
  if (v5)
  {
    v34 = (unint64_t *)&v5->__shared_owners_;
    do
      v35 = __ldaxr(v34);
    while (__stlxr(v35 - 1, v34));
    if (!v35)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  if (*(_BYTE *)(v2 + 128))
    sub_20FD2CFAC(v2);
  *(_QWORD *)v2 = &off_24CA060C0;
  *(_QWORD *)(v2 + 8) = v17;
  *(_BYTE *)(v2 + 120) = 1;
  *(_BYTE *)(v2 + 128) = 1;
}

void sub_20FD2CE18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, int a8, ...)
{
  std::__shared_weak_count *v8;
  uint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v12;
  uint64_t v13;
  va_list va;
  uint64_t v15;
  uint64_t v16;
  va_list va1;

  va_start(va1, a8);
  va_start(va, a8);
  v13 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  sub_20E86665C((uint64_t)va1);
  MEMORY[0x212BC6398](v9, 0x10B3C4012E545FFLL);
  if (!a8)
    sub_20E896798((uint64_t)va);
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  _Unwind_Resume(a1);
}

uint64_t sub_20FD2CFAC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  if (*(_BYTE *)(a1 + 120))
  {
    v2 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = 0;
    if (v2)
    {
      v3 = sub_20FD1B660(v2);
      MEMORY[0x212BC6398](v3, 0x10B3C4012E545FFLL);
    }
    return a1;
  }
  if (!*(_BYTE *)(a1 + 112))
    return a1;
  if (!*(_BYTE *)(a1 + 104))
    goto LABEL_9;
  if (*(char *)(a1 + 103) < 0)
  {
    operator delete(*(void **)(a1 + 80));
    if (*(char *)(a1 + 71) < 0)
      goto LABEL_13;
LABEL_9:
    if (*(_BYTE *)(a1 + 40))
      goto LABEL_10;
    return a1;
  }
  if ((*(char *)(a1 + 71) & 0x80000000) == 0)
    goto LABEL_9;
LABEL_13:
  operator delete(*(void **)(a1 + 48));
  if (!*(_BYTE *)(a1 + 40))
    return a1;
LABEL_10:
  if ((*(char *)(a1 + 39) & 0x80000000) == 0)
    return a1;
  operator delete(*(void **)(a1 + 16));
  return a1;
}

_DWORD *sub_20FD2D064(_DWORD ***a1)
{
  return sub_20E991A58(**a1, (char *)(*a1)[1]);
}

void sub_20FD2D070(uint64_t a1, uint64_t a2)
{
  sub_20FD2D080((uint64_t *)(*(_QWORD *)a1 + 16), a2);
}

void sub_20FD2D080(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  void *v3;
  char v4;
  void *v5;
  const char *v6;
  size_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  void *v13;
  _BYTE v14[15];
  char v15;
  void *__p[2];
  unint64_t v17;
  _QWORD v18[3];

  v18[2] = *MEMORY[0x24BDAC8D0];
  v2 = *a1;
  *(_QWORD *)((char *)v18 + 7) = *(_QWORD *)(a2 + 15);
  v3 = *(void **)a2;
  v18[0] = *(_QWORD *)(a2 + 8);
  v4 = *(_BYTE *)(a2 + 23);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v13 = v3;
  *(_QWORD *)v14 = v18[0];
  *(_QWORD *)&v14[7] = *(_QWORD *)((char *)v18 + 7);
  v15 = v4;
  memset(v18, 0, 15);
  v5 = __p;
  v6 = (const char *)a1[1];
  v7 = strlen(v6);
  if (v7 >= 0x7FFFFFFFFFFFFFF8)
    sub_20E860B7C();
  v8 = (void *)v7;
  if (v7 >= 0x17)
  {
    v10 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17)
      v10 = v7 | 7;
    v11 = v10 + 1;
    v5 = operator new(v10 + 1);
    __p[1] = v8;
    v17 = v11 | 0x8000000000000000;
    __p[0] = v5;
LABEL_9:
    memmove(v5, v6, (size_t)v8);
    *((_BYTE *)v8 + (_QWORD)v5) = 0;
    v9 = *(unsigned int *)(v2 + 24);
    if ((_DWORD)v9 == -1)
      goto LABEL_11;
    goto LABEL_10;
  }
  HIBYTE(v17) = v7;
  if (v7)
    goto LABEL_9;
  LOBYTE(__p[0]) = 0;
  v9 = *(unsigned int *)(v2 + 24);
  if ((_DWORD)v9 != -1)
LABEL_10:
    ((void (*)(char *, uint64_t))off_24CA06188[v9])(&v12, v2);
LABEL_11:
  *(_DWORD *)(v2 + 24) = -1;
  sub_20E877C80((_QWORD *)v2, (uint64_t)&v13, 2uLL);
  *(_DWORD *)(v2 + 24) = 2;
  if ((SHIBYTE(v17) & 0x80000000) == 0)
  {
    if ((v15 & 0x80000000) == 0)
      return;
LABEL_15:
    operator delete(v13);
    return;
  }
  operator delete(__p[0]);
  if (v15 < 0)
    goto LABEL_15;
}

void sub_20FD2D234(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a2)
    sub_20E860DA4(exception_object);
  _Unwind_Resume(exception_object);
}

char *sub_20FD2D278(uint64_t a1, uint64_t a2)
{
  const char *v3;
  char *v4;
  size_t v5;
  size_t v6;
  void *v7;
  char *result;
  uint64_t v9;
  uint64_t v10;

  v3 = *(const char **)(*(_QWORD *)a1 + 32);
  v4 = *(char **)(a2 + 8);
  if ((unint64_t)v4 >= *(_QWORD *)(a2 + 16))
  {
    result = sub_20FD2D370((void **)a2, v3);
    *(_QWORD *)(a2 + 8) = result;
    return result;
  }
  v5 = strlen(*(const char **)(*(_QWORD *)a1 + 32));
  if (v5 >= 0x7FFFFFFFFFFFFFF8)
    sub_20E860B7C();
  v6 = v5;
  if (v5 >= 0x17)
  {
    v9 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v9 = v5 | 7;
    v10 = v9 + 1;
    v7 = operator new(v9 + 1);
    *((_QWORD *)v4 + 1) = v6;
    *((_QWORD *)v4 + 2) = v10 | 0x8000000000000000;
    *(_QWORD *)v4 = v7;
  }
  else
  {
    v4[23] = v5;
    v7 = v4;
    if (!v5)
      goto LABEL_11;
  }
  memmove(v7, v3, v6);
LABEL_11:
  *((_BYTE *)v7 + v6) = 0;
  result = v4 + 24;
  *(_QWORD *)(a2 + 8) = v4 + 24;
  *(_QWORD *)(a2 + 8) = v4 + 24;
  return result;
}

void sub_20FD2D368(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

char *sub_20FD2D370(void **a1, const char *a2)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v6;
  char *v7;
  char *v8;
  size_t v9;
  size_t v10;
  char *v11;
  char *v12;
  void **v13;
  void **v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  __int128 v18;
  void **v19;
  char *v21;
  char *v22;
  char *v23;

  v3 = 0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[1] - (_BYTE *)*a1) >> 3);
  v4 = v3 + 1;
  if (v3 + 1 > 0xAAAAAAAAAAAAAAALL)
    sub_20E867F44();
  if (0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) > v4)
    v4 = 0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3);
  if (0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) >= 0x555555555555555)
    v6 = 0xAAAAAAAAAAAAAAALL;
  else
    v6 = v4;
  if (v6)
  {
    if (v6 > 0xAAAAAAAAAAAAAAALL)
      sub_20E877A38();
    v7 = (char *)operator new(24 * v6);
  }
  else
  {
    v7 = 0;
  }
  v8 = &v7[24 * v3];
  v21 = v8;
  v22 = v8;
  v23 = &v7[24 * v6];
  v9 = strlen(a2);
  if (v9 >= 0x7FFFFFFFFFFFFFF8)
    sub_20E860B7C();
  v10 = v9;
  if (v9 >= 0x17)
  {
    v15 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17)
      v15 = v9 | 7;
    v16 = v15 + 1;
    v17 = (char *)operator new(v15 + 1);
    *((_QWORD *)v8 + 1) = v10;
    *((_QWORD *)v8 + 2) = v16 | 0x8000000000000000;
    *(_QWORD *)v8 = v17;
    v8 = v17;
  }
  else
  {
    v8[23] = v9;
    if (!v9)
    {
      *v8 = 0;
      v11 = v8;
      v12 = v8 + 24;
      v13 = (void **)*a1;
      v14 = (void **)a1[1];
      if (v14 == *a1)
        goto LABEL_26;
      goto LABEL_20;
    }
  }
  memmove(v8, a2, v10);
  v8[v10] = 0;
  v11 = v21;
  v12 = v22 + 24;
  v13 = (void **)*a1;
  v14 = (void **)a1[1];
  if (v14 == *a1)
  {
LABEL_26:
    *a1 = v11;
    a1[1] = v12;
    a1[2] = v23;
    goto LABEL_27;
  }
  do
  {
LABEL_20:
    v18 = *(_OWORD *)(v14 - 3);
    *((_QWORD *)v11 - 1) = *(v14 - 1);
    *(_OWORD *)(v11 - 24) = v18;
    v11 -= 24;
    *(v14 - 2) = 0;
    *(v14 - 1) = 0;
    *(v14 - 3) = 0;
    v14 -= 3;
  }
  while (v14 != v13);
  v14 = (void **)*a1;
  v19 = (void **)a1[1];
  *a1 = v11;
  a1[1] = v12;
  a1[2] = v23;
  while (v19 != v14)
  {
    if (*((char *)v19 - 1) < 0)
      operator delete(*(v19 - 3));
    v19 -= 3;
  }
LABEL_27:
  if (v14)
    operator delete(v14);
  return v12;
}

void sub_20FD2D56C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E877E3C((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20FD2D580(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::mutex *v11;
  _QWORD *v12;
  _QWORD *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;

  *(_QWORD *)a1 = off_24C9BFEC0;
  if (*(_BYTE *)(a1 + 232))
  {
    v2 = *(_QWORD *)(a1 + 208);
    if (v2)
    {
      v3 = *(_QWORD *)(a1 + 216);
      v4 = *(void **)(a1 + 208);
      if (v3 != v2)
      {
        do
        {
          if (*(char *)(v3 - 1) < 0)
            operator delete(*(void **)(v3 - 24));
          v3 -= 24;
        }
        while (v3 != v2);
        v4 = *(void **)(a1 + 208);
      }
      *(_QWORD *)(a1 + 216) = v2;
      operator delete(v4);
    }
  }
  if (*(_BYTE *)(a1 + 200))
  {
    v5 = *(_QWORD *)(a1 + 176);
    if (v5)
    {
      v6 = *(_QWORD *)(a1 + 184);
      v7 = *(void **)(a1 + 176);
      if (v6 != v5)
      {
        do
        {
          if (*(char *)(v6 - 1) < 0)
            operator delete(*(void **)(v6 - 24));
          v6 -= 32;
        }
        while (v6 != v5);
        v7 = *(void **)(a1 + 176);
      }
      *(_QWORD *)(a1 + 184) = v5;
      operator delete(v7);
    }
  }
  v8 = *(std::__shared_weak_count **)(a1 + 160);
  if (!v8)
    goto LABEL_23;
  p_shared_owners = (unint64_t *)&v8->__shared_owners_;
  do
    v10 = __ldaxr(p_shared_owners);
  while (__stlxr(v10 - 1, p_shared_owners));
  if (!v10)
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
    if (!*(_BYTE *)(a1 + 144))
      goto LABEL_27;
  }
  else
  {
LABEL_23:
    if (!*(_BYTE *)(a1 + 144))
      goto LABEL_27;
  }
  if (*(char *)(a1 + 143) < 0)
    operator delete(*(void **)(a1 + 120));
LABEL_27:
  v11 = *(std::mutex **)(a1 + 112);
  *(_QWORD *)(a1 + 112) = 0;
  if (v11)
  {
    std::mutex::~mutex(v11);
    MEMORY[0x212BC6398]();
  }
  v12 = *(_QWORD **)(a1 + 40);
  if (v12)
  {
    v13 = *(_QWORD **)(a1 + 48);
    v14 = *(void **)(a1 + 40);
    if (v13 != v12)
    {
      do
      {
        v16 = *--v13;
        v15 = v16;
        *v13 = 0;
        if (v16)
          (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
      }
      while (v13 != v12);
      v14 = *(void **)(a1 + 40);
    }
    *(_QWORD *)(a1 + 48) = v12;
    operator delete(v14);
  }
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

void sub_20FD2D748(uint64_t a1)
{
  sub_20FD2D580(a1);
  JUMPOUT(0x212BC6398);
}

void sub_20FD2D76C(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  int v4;
  std::mutex *v6;
  _QWORD *v7;
  _QWORD *v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char *v25;
  char *v26;
  char *v27;
  char *v28;
  uint64_t v29;
  __int128 v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  _QWORD *v34;
  std::__shared_weak_count *v35;
  unint64_t *p_shared_owners;
  unint64_t v37;
  uint64_t v38;
  std::mutex *v39;
  int v40;
  _BYTE v41[24];
  uint64_t *v42;
  void *v43;
  __int128 __p;
  uint64_t v45;

  v4 = *(unsigned __int8 *)(a1 + 104);
  if (*(_BYTE *)(a1 + 104))
  {
    while (atomic_load((unint64_t *)(a1 + 88)))
      sched_yield();
    v6 = 0;
    if (*(_QWORD *)(a1 + 152))
      goto LABEL_15;
  }
  else
  {
    v6 = *(std::mutex **)(a1 + 112);
    std::mutex::lock(v6);
    if (*(_QWORD *)(a1 + 152))
      goto LABEL_15;
  }
  if (!*(_BYTE *)(a1 + 144))
  {
    v33 = (uint64_t *)operator new();
    LOBYTE(v43) = 0;
    LOBYTE(v45) = 0;
    *(_OWORD *)v41 = 0uLL;
    sub_20FD0C34C(v33, (char *)&v43, (uint64_t *)v41);
    v42 = v33;
    if ((_BYTE)v45 && SHIBYTE(__p) < 0)
      operator delete(v43);
    v34 = (_QWORD *)operator new();
    *v34 = &off_24C9BFF50;
    v34[1] = 0;
    v34[2] = 0;
    v34[3] = v33;
    v42 = 0;
    v35 = *(std::__shared_weak_count **)(a1 + 160);
    *(_QWORD *)(a1 + 152) = v33;
    *(_QWORD *)(a1 + 160) = v34;
    if (!v35)
      goto LABEL_55;
    p_shared_owners = (unint64_t *)&v35->__shared_owners_;
    do
      v37 = __ldaxr(p_shared_owners);
    while (__stlxr(v37 - 1, p_shared_owners));
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
      std::__shared_weak_count::__release_weak(v35);
      v12 = v42;
      if (!v42)
        goto LABEL_15;
    }
    else
    {
LABEL_55:
      v12 = v42;
      if (!v42)
        goto LABEL_15;
    }
LABEL_14:
    sub_20FD0D068(v12, 0);
    MEMORY[0x212BC6398](v12, 0x20C4093837F09);
    goto LABEL_15;
  }
  v7 = (_QWORD *)operator new();
  v43 = 0;
  *(_QWORD *)&__p = 0;
  sub_20FD0C34C(v7, (char *)(a1 + 120), (uint64_t *)&v43);
  v8 = (_QWORD *)operator new();
  *v8 = &off_24C9BFF50;
  v8[1] = 0;
  v8[2] = 0;
  v8[3] = v7;
  *(_QWORD *)v41 = 0;
  v9 = *(std::__shared_weak_count **)(a1 + 160);
  *(_QWORD *)(a1 + 152) = v7;
  *(_QWORD *)(a1 + 160) = v8;
  if (v9)
  {
    v10 = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  v12 = *(uint64_t **)v41;
  if (*(_QWORD *)v41)
    goto LABEL_14;
LABEL_15:
  v13 = *(_QWORD *)(a1 + 152);
  v14 = *(_QWORD *)(a1 + 80);
  memset(v41, 0, sizeof(v41));
  if (v14)
  {
    v40 = v4;
    v39 = v6;
    if (v14 >> 59)
      sub_20E867F44();
    v38 = a2;
    v15 = 0;
    *(_QWORD *)v41 = operator new(32 * v14);
    *(_QWORD *)&v41[8] = *(_QWORD *)v41;
    *(_QWORD *)&v41[16] = *(_QWORD *)v41 + 32 * v14;
    do
    {
      v17 = *(_QWORD *)(a1 + 40);
      v18 = (*(_QWORD *)(a1 + 64) + v15) % (unint64_t)((*(_QWORD *)(a1 + 48) - v17) >> 3);
      v43 = (void *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v17 + 8 * v18) + 16))(*(_QWORD *)(v17 + 8 * v18));
      (*(void (**)(__int128 *__return_ptr, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v17 + 8 * v18) + 24))(&__p, *(_QWORD *)(v17 + 8 * v18), v13, 1);
      v19 = *(_QWORD *)&v41[8];
      if (*(_QWORD *)&v41[8] < *(_QWORD *)&v41[16])
      {
        **(_QWORD **)&v41[8] = v43;
        v16 = __p;
        *(_QWORD *)(v19 + 24) = v45;
        *(_OWORD *)(v19 + 8) = v16;
        *(_QWORD *)&v41[8] = v19 + 32;
      }
      else
      {
        v20 = *(_QWORD *)v41;
        v21 = (uint64_t)(*(_QWORD *)&v41[8] - *(_QWORD *)v41) >> 5;
        v22 = v21 + 1;
        if ((unint64_t)(v21 + 1) >> 59)
          sub_20E867F44();
        v23 = *(_QWORD *)&v41[16] - *(_QWORD *)v41;
        if ((uint64_t)(*(_QWORD *)&v41[16] - *(_QWORD *)v41) >> 4 > v22)
          v22 = v23 >> 4;
        if ((unint64_t)v23 >= 0x7FFFFFFFFFFFFFE0)
          v24 = 0x7FFFFFFFFFFFFFFLL;
        else
          v24 = v22;
        if (v24)
        {
          if (v24 >> 59)
            sub_20E877A38();
          v25 = (char *)operator new(32 * v24);
        }
        else
        {
          v25 = 0;
        }
        v26 = &v25[32 * v21];
        v27 = &v25[32 * v24];
        *(_QWORD *)v26 = v43;
        *(_OWORD *)(v26 + 8) = __p;
        *((_QWORD *)v26 + 3) = v45;
        __p = 0uLL;
        v45 = 0;
        v28 = v26 + 32;
        if (v19 == v20)
        {
          *(_QWORD *)v41 = v26;
          *(_QWORD *)&v41[8] = v26 + 32;
          *(_QWORD *)&v41[16] = &v25[32 * v24];
        }
        else
        {
          do
          {
            v29 = *(_QWORD *)(v19 - 32);
            v19 -= 32;
            *((_QWORD *)v26 - 4) = v29;
            v26 -= 32;
            v30 = *(_OWORD *)(v19 + 8);
            *((_QWORD *)v26 + 3) = *(_QWORD *)(v19 + 24);
            *(_OWORD *)(v26 + 8) = v30;
            *(_QWORD *)(v19 + 16) = 0;
            *(_QWORD *)(v19 + 24) = 0;
            *(_QWORD *)(v19 + 8) = 0;
          }
          while (v19 != v20);
          v31 = *(_QWORD *)&v41[8];
          v19 = *(_QWORD *)v41;
          *(_QWORD *)v41 = v26;
          *(_QWORD *)&v41[8] = v28;
          *(_QWORD *)&v41[16] = v27;
          while (v31 != v19)
          {
            if (*(char *)(v31 - 1) < 0)
              operator delete(*(void **)(v31 - 24));
            v31 -= 32;
          }
        }
        if (v19)
          operator delete((void *)v19);
        *(_QWORD *)&v41[8] = v28;
        if (SHIBYTE(v45) < 0)
          operator delete((void *)__p);
      }
      ++v15;
    }
    while (v15 != *(_QWORD *)(a1 + 80));
    v32 = *(_QWORD *)&v41[16];
    v6 = v39;
    *(_OWORD *)v38 = *(_OWORD *)v41;
    *(_QWORD *)(v38 + 16) = v32;
    if (!v40)
      goto LABEL_44;
  }
  else
  {
    *(_OWORD *)a2 = 0uLL;
    *(_QWORD *)(a2 + 16) = 0;
    if (!v4)
LABEL_44:
      std::mutex::unlock(v6);
  }
}

void sub_20FD2DBC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::mutex *a11, int a12, int a13, char a14, uint64_t a15, uint64_t a16, uint64_t *a17, void *__p, void *a19, int a20,__int16 a21,char a22,char a23,char a24,int a25,__int16 a26,char a27)
{
  int v27;
  std::mutex *v28;
  int v30;

  v30 = v27;
  sub_20EA5C30C(&a17);
  if (!v30)
    std::mutex::unlock(v28);
  _Unwind_Resume(a1);
}

void sub_20FD2DCAC(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  int v4;
  std::mutex *v6;
  unint64_t v7;
  uint64_t v8;
  __int128 v9;
  _OWORD *v10;
  __int128 v11;
  unint64_t v12;
  void *__p[2];
  uint64_t v14;

  v4 = *(unsigned __int8 *)(a1 + 104);
  if (*(_BYTE *)(a1 + 104))
  {
    while (atomic_load((unint64_t *)(a1 + 88)))
      sched_yield();
    v6 = 0;
  }
  else
  {
    v6 = *(std::mutex **)(a1 + 112);
    std::mutex::lock(v6);
  }
  v7 = *(_QWORD *)(a1 + 80);
  v12 = 0;
  v11 = 0uLL;
  sub_20E9099B8((uint64_t)&v11, v7);
  if (*(_QWORD *)(a1 + 80))
  {
    v8 = 0;
    do
    {
      (*(void (**)(void **__return_ptr))(**(_QWORD **)(*(_QWORD *)(a1 + 40)
                                                                + 8
                                                                * ((v8 + *(_QWORD *)(a1 + 64))
                                                                 % (unint64_t)((uint64_t)(*(_QWORD *)(a1 + 48)
                                                                                              - *(_QWORD *)(a1 + 40)) >> 3)))
                                                  + 32))(__p);
      v10 = (_OWORD *)*((_QWORD *)&v11 + 1);
      if (*((_QWORD *)&v11 + 1) < v12)
      {
        v9 = *(_OWORD *)__p;
        *(_QWORD *)(*((_QWORD *)&v11 + 1) + 16) = v14;
        *v10 = v9;
        *((_QWORD *)&v11 + 1) = (char *)v10 + 24;
      }
      else
      {
        *((_QWORD *)&v11 + 1) = sub_20E8780F0((void **)&v11, (uint64_t)__p);
        if (SHIBYTE(v14) < 0)
          operator delete(__p[0]);
      }
      ++v8;
    }
    while (v8 != *(_QWORD *)(a1 + 80));
  }
  *(_OWORD *)a2 = v11;
  *(_QWORD *)(a2 + 16) = v12;
  if (!v4)
    std::mutex::unlock(v6);
}

void sub_20FD2DDF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  std::mutex *v17;
  int v18;

  sub_20E89FB98((void **)&a9);
  if (!v18)
  {
    std::mutex::unlock(v17);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void sub_20FD2DE50(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 __p;
  __int16 v9;
  void *__dst[2];
  uint64_t v11;

  v4 = (_QWORD *)operator new();
  if (*(char *)(a1 + 31) < 0)
  {
    sub_20E860C04(__dst, *(void **)(a1 + 8), *(_QWORD *)(a1 + 16));
  }
  else
  {
    *(_OWORD *)__dst = *(_OWORD *)(a1 + 8);
    v11 = *(_QWORD *)(a1 + 24);
  }
  v5 = *(_QWORD *)(a1 + 32);
  v6 = *(_QWORD *)(a1 + 96);
  v7 = *(_QWORD *)(a1 + 104);
  *(_QWORD *)&__p = 0x6D25203A5425;
  v9 = 262;
  sub_20EA5C440((uint64_t)v4, (__int128 *)__dst, v5, v6, v7, &__p);
  *v4 = &off_24CA06AA8;
  if (HIBYTE(v9) && (char)v9 < 0)
    operator delete((void *)__p);
  if (SHIBYTE(v11) < 0)
    operator delete(__dst[0]);
  *a2 = v4;
}

void sub_20FD2DF48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  uint64_t v21;

  MEMORY[0x212BC6398](v21, 0x10B3C40AB4A3A93);
  _Unwind_Resume(a1);
}

_QWORD *sub_20FD2DF9C(_QWORD *a1, uint64_t a2, unint64_t a3)
{
  uint64_t v6;
  double *v7;
  double *v8;
  uint64_t v9;
  CFAbsoluteTime Current;
  uint64_t v11;
  uint64_t v12;
  double *v13;

  *a1 = &off_24CA06B38;
  if (a3)
  {
    if (a3 >> 61)
      sub_20E867F44();
    v6 = 8 * a3;
    v7 = (double *)operator new(8 * a3);
    v8 = &v7[a3];
    bzero(v7, 8 * a3);
    v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2);
    Current = CFAbsoluteTimeGetCurrent();
    a1[1] = v9;
    *v7 = (double)v9 / 1000000000.0 - Current;
    if (a3 != 1)
    {
      v11 = 8;
      do
      {
        v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2);
        v7[(unint64_t)v11 / 8] = (double)v12 / 1000000000.0 - CFAbsoluteTimeGetCurrent();
        v11 += 8;
      }
      while (v6 != v11);
    }
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  std::__sort<std::__less<double,double> &,double *>();
  v13 = v8 - 1;
  if (*v7 >= 0.0)
    v13 = v7;
  a1[2] = *(_QWORD *)v13;
  operator delete(v7);
  return a1;
}

void sub_20FD2E0F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  void *v10;

  operator delete(v10);
  _Unwind_Resume(a1);
}

void sub_20FD2E138()
{
  JUMPOUT(0x212BC6398);
}

double sub_20FD2E14C(uint64_t a1, uint64_t a2)
{
  return (double)(a2 / 1000000000) - *(double *)(a1 + 16);
}

void sub_20FD2E178(uint64_t a1)
{
  std::mutex *v2;
  char *v3;
  char *v4;
  size_t v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  unsigned __int8 v13;
  void **v14;
  void **v15;
  void *v16;
  uint64_t v17;
  int v18;
  std::__shared_weak_count *v19;
  unint64_t *p_shared_owners;
  unint64_t v21;
  _BYTE v22[64];
  void *v23;
  char v24;
  char v25;
  _BYTE v26[32];
  void *v27;
  void **v28;
  char v29;
  void *__p;
  char v31;
  char v32;
  void *v33;
  char v34;
  void *v35;
  char v36;
  char v37;
  char v38;
  char v39;

  v2 = (std::mutex *)(a1 + 24);
  std::mutex::lock((std::mutex *)(a1 + 24));
  v3 = *(char **)(a1 + 88);
  v4 = *(char **)(a1 + 96);
  v5 = v4 - v3;
  if (v4 == v3)
  {
    std::mutex::unlock(v2);
  }
  else
  {
    if ((v5 & 0x8000000000000000) != 0)
      sub_20E867F44();
    v6 = (uint64_t *)operator new(v5);
    v7 = v6;
    do
    {
      *v7 = *(_QWORD *)v3;
      v8 = *((_QWORD *)v3 + 1);
      v7[1] = v8;
      if (v8)
      {
        v9 = (unint64_t *)(v8 + 8);
        do
          v10 = __ldxr(v9);
        while (__stxr(v10 + 1, v9));
      }
      v3 += 16;
      v7 += 2;
    }
    while (v3 != v4);
    std::mutex::unlock(v2);
    if (v7 != v6)
    {
      v11 = v6;
      while (1)
      {
        v12 = *v11;
        v26[0] = 0;
        v26[24] = 0;
        v22[0] = 0;
        v22[56] = 0;
        LOBYTE(v23) = 0;
        v25 = 0;
        v13 = atomic_load((unsigned __int8 *)&qword_254A6D9D0);
        if ((v13 & 1) == 0)
        {
          v17 = v12;
          v18 = __cxa_guard_acquire(&qword_254A6D9D0);
          v12 = v17;
          if (v18)
          {
            __cxa_atexit((void (*)(void *))nullsub_1020, &off_254A54FD0, &dword_20E81F000);
            __cxa_guard_release(&qword_254A6D9D0);
            v12 = v17;
          }
        }
        sub_20FCFDCB0(v12, (uint64_t)v26, (uint64_t)v22, (uint64_t)&off_254A54FD0, (uint64_t)&v27);
        if (!v39 || !v38)
          goto LABEL_21;
        if (!v37)
          break;
        if (v36 < 0)
        {
          operator delete(v35);
          if ((v34 & 0x80000000) == 0)
            break;
        }
        else if ((v34 & 0x80000000) == 0)
        {
          break;
        }
        operator delete(v33);
        if (v32)
        {
LABEL_19:
          if (v31 < 0)
            operator delete(__p);
        }
LABEL_21:
        if (v29)
        {
          v14 = (void **)v27;
          if (v27)
          {
            v15 = v28;
            v16 = v27;
            if (v28 != v27)
            {
              do
              {
                if (*((char *)v15 - 1) < 0)
                  operator delete(*(v15 - 3));
                v15 -= 3;
              }
              while (v15 != v14);
              v16 = v27;
            }
            v28 = v14;
            operator delete(v16);
          }
        }
        if (v25 && v24 < 0)
          operator delete(v23);
        v11 += 2;
        if (v11 == v7)
        {
          do
          {
            v19 = (std::__shared_weak_count *)*(v7 - 1);
            if (v19)
            {
              p_shared_owners = (unint64_t *)&v19->__shared_owners_;
              do
                v21 = __ldaxr(p_shared_owners);
              while (__stlxr(v21 - 1, p_shared_owners));
              if (!v21)
              {
                ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
                std::__shared_weak_count::__release_weak(v19);
              }
            }
            v7 -= 2;
          }
          while (v7 != v6);
          v7 = v6;
          goto LABEL_45;
        }
      }
      if (v32)
        goto LABEL_19;
      goto LABEL_21;
    }
LABEL_45:
    operator delete(v7);
  }
}

void sub_20FD2E428(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_20FD2E43C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,char a23)
{
  char *v23;
  char *v24;
  std::__shared_weak_count *v26;
  unint64_t *p_shared_owners;
  unint64_t v28;

  if (a23 && a22 < 0)
    operator delete(__p);
  while (1)
  {
    v26 = (std::__shared_weak_count *)*((_QWORD *)v24 - 1);
    if (v26)
    {
      p_shared_owners = (unint64_t *)&v26->__shared_owners_;
      do
        v28 = __ldaxr(p_shared_owners);
      while (__stlxr(v28 - 1, p_shared_owners));
      if (!v28)
      {
        ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
        std::__shared_weak_count::__release_weak(v26);
      }
    }
    v24 -= 16;
    if (v24 == v23)
    {
      operator delete(v23);
      _Unwind_Resume(a1);
    }
  }
}

uint64_t sub_20FD2E4B4(uint64_t a1)
{
  std::mutex *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;

  v2 = (std::mutex *)(a1 + 24);
  std::mutex::lock((std::mutex *)(a1 + 24));
  if (*(_BYTE *)(a1 + 112))
  {
    *(_BYTE *)(a1 + 112) = 0;
    (*(void (**)(_QWORD))(a1 + 16))(sub_20FD2E178);
  }
  std::mutex::unlock(v2);
  v3 = *(_QWORD *)(a1 + 88);
  if (v3)
  {
    v4 = *(_QWORD *)(a1 + 96);
    v5 = *(void **)(a1 + 88);
    if (v4 != v3)
    {
      do
      {
        v6 = *(std::__shared_weak_count **)(v4 - 8);
        if (v6)
        {
          p_shared_owners = (unint64_t *)&v6->__shared_owners_;
          do
            v8 = __ldaxr(p_shared_owners);
          while (__stlxr(v8 - 1, p_shared_owners));
          if (!v8)
          {
            ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
            std::__shared_weak_count::__release_weak(v6);
          }
        }
        v4 -= 16;
      }
      while (v4 != v3);
      v5 = *(void **)(a1 + 88);
    }
    *(_QWORD *)(a1 + 96) = v3;
    operator delete(v5);
  }
  std::mutex::~mutex(v2);
  return a1;
}

void sub_20FD2E590(uint64_t a1, uint64_t *a2)
{
  std::mutex *v4;
  char *v5;
  char *v6;
  char *v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  unint64_t *v21;
  unint64_t v22;
  char *v23;
  __int128 v24;
  char *v25;
  std::__shared_weak_count *v26;
  unint64_t *p_shared_owners;
  unint64_t v28;

  v4 = (std::mutex *)(a1 + 24);
  std::mutex::lock((std::mutex *)(a1 + 24));
  v5 = *(char **)(a1 + 88);
  v6 = *(char **)(a1 + 96);
  v7 = v5;
  if (v5 != v6)
  {
    v7 = *(char **)(a1 + 88);
    while (*(_QWORD *)v7 != *a2)
    {
      v7 += 16;
      if (v7 == v6)
      {
        v7 = *(char **)(a1 + 96);
        break;
      }
    }
  }
  if (v7 == v6)
  {
    v8 = *(_QWORD *)(a1 + 104);
    v9 = *a2;
    if ((unint64_t)v6 >= v8)
    {
      v14 = (v6 - v5) >> 4;
      v15 = v14 + 1;
      if ((unint64_t)(v14 + 1) >> 60)
        sub_20E867F44();
      v16 = v8 - (_QWORD)v5;
      if (v16 >> 3 > v15)
        v15 = v16 >> 3;
      if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF0)
        v17 = 0xFFFFFFFFFFFFFFFLL;
      else
        v17 = v15;
      if (v17 >> 60)
        sub_20E877A38();
      v18 = a2[1];
      v19 = (char *)operator new(16 * v17);
      v20 = &v19[16 * v14];
      *(_QWORD *)v20 = v9;
      *((_QWORD *)v20 + 1) = v18;
      if (v18)
      {
        v21 = (unint64_t *)(v18 + 8);
        do
          v22 = __ldxr(v21);
        while (__stxr(v22 + 1, v21));
        v5 = *(char **)(a1 + 88);
        v6 = *(char **)(a1 + 96);
      }
      v23 = &v19[16 * v17];
      v13 = v20 + 16;
      if (v6 == v5)
      {
        *(_QWORD *)(a1 + 88) = v20;
        *(_QWORD *)(a1 + 96) = v13;
        *(_QWORD *)(a1 + 104) = v23;
      }
      else
      {
        do
        {
          v24 = *((_OWORD *)v6 - 1);
          v6 -= 16;
          *((_OWORD *)v20 - 1) = v24;
          v20 -= 16;
          *(_QWORD *)v6 = 0;
          *((_QWORD *)v6 + 1) = 0;
        }
        while (v6 != v5);
        v5 = *(char **)(a1 + 88);
        v25 = *(char **)(a1 + 96);
        *(_QWORD *)(a1 + 88) = v20;
        *(_QWORD *)(a1 + 96) = v13;
        *(_QWORD *)(a1 + 104) = v23;
        while (v25 != v5)
        {
          v26 = (std::__shared_weak_count *)*((_QWORD *)v25 - 1);
          if (v26)
          {
            p_shared_owners = (unint64_t *)&v26->__shared_owners_;
            do
              v28 = __ldaxr(p_shared_owners);
            while (__stlxr(v28 - 1, p_shared_owners));
            if (!v28)
            {
              ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
              std::__shared_weak_count::__release_weak(v26);
            }
          }
          v25 -= 16;
        }
      }
      if (v5)
        operator delete(v5);
    }
    else
    {
      v10 = a2[1];
      *(_QWORD *)v6 = v9;
      *((_QWORD *)v6 + 1) = v10;
      if (v10)
      {
        v11 = (unint64_t *)(v10 + 8);
        do
          v12 = __ldxr(v11);
        while (__stxr(v12 + 1, v11));
      }
      v13 = v6 + 16;
    }
    *(_QWORD *)(a1 + 96) = v13;
    if (!*(_BYTE *)(a1 + 112))
    {
      *(_BYTE *)(a1 + 112) = 1;
      (*(void (**)(_QWORD, uint64_t))(a1 + 8))(*(_QWORD *)a1, a1);
    }
  }
  std::mutex::unlock(v4);
}

void sub_20FD2E778(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_20FD2E78C(uint64_t a1, uint64_t a2)
{
  std::mutex *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;

  v4 = (std::mutex *)(a1 + 24);
  std::mutex::lock((std::mutex *)(a1 + 24));
  v5 = *(_QWORD **)(a1 + 88);
  v6 = *(_QWORD **)(a1 + 96);
  if (v5 != v6)
  {
    v7 = *(_QWORD **)(a1 + 88);
    while (*v7 != a2)
    {
      v7 += 2;
      if (v7 == v6)
        goto LABEL_5;
    }
    if (v7 == v6 || (v8 = v7 + 2, v7 + 2 == v6))
    {
      v9 = v7;
      if (v7 != v6)
        goto LABEL_23;
    }
    else
    {
      v9 = v7;
      do
      {
        v10 = v8;
        v11 = *v8;
        if (*v8 != a2)
        {
          v12 = v7[3];
          *v8 = 0;
          v8[1] = 0;
          v13 = (std::__shared_weak_count *)v9[1];
          *v9 = v11;
          v9[1] = v12;
          if (v13)
          {
            p_shared_owners = (unint64_t *)&v13->__shared_owners_;
            do
              v15 = __ldaxr(p_shared_owners);
            while (__stlxr(v15 - 1, p_shared_owners));
            if (!v15)
            {
              ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
              std::__shared_weak_count::__release_weak(v13);
            }
          }
          v9 += 2;
        }
        v8 = v10 + 2;
        v7 = v10;
      }
      while (v10 + 2 != v6);
      v5 = *(_QWORD **)(a1 + 88);
      v6 = *(_QWORD **)(a1 + 96);
      if (v9 != v6)
      {
LABEL_23:
        while (v6 != v9)
        {
          v16 = (std::__shared_weak_count *)*(v6 - 1);
          if (v16)
          {
            v17 = (unint64_t *)&v16->__shared_owners_;
            do
              v18 = __ldaxr(v17);
            while (__stlxr(v18 - 1, v17));
            if (!v18)
            {
              ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
              std::__shared_weak_count::__release_weak(v16);
            }
          }
          v6 -= 2;
        }
        *(_QWORD *)(a1 + 96) = v9;
        if (*(_QWORD **)(a1 + 88) != v9)
          goto LABEL_32;
        goto LABEL_30;
      }
    }
LABEL_5:
    if (v5 != v6)
      goto LABEL_32;
  }
LABEL_30:
  if (*(_BYTE *)(a1 + 112))
  {
    *(_BYTE *)(a1 + 112) = 0;
    (*(void (**)(_QWORD))(a1 + 16))(sub_20FD2E178);
  }
LABEL_32:
  std::mutex::unlock(v4);
}

void sub_20FD2E998(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_20FD2E9AC(uint64_t a1)
{
  std::mutex *v2;
  unsigned __int8 v3;

  v2 = *(std::mutex **)a1;
  std::mutex::lock(*(std::mutex **)a1);
  *(_BYTE *)(a1 + 32) = 0;
  v3 = atomic_load((unsigned __int8 *)&qword_254A6DA58);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DA58))
  {
    qword_254A6D9E0 = (uint64_t)sub_20FD2E178;
    *(_QWORD *)algn_254A6D9E8 = sub_21023DA10;
    qword_254A6D9F0 = (uint64_t)sub_21023DC24;
    unk_254A6D9F8 = 850045863;
    xmmword_254A6DA00 = 0u;
    unk_254A6DA10 = 0u;
    xmmword_254A6DA20 = 0u;
    unk_254A6DA30 = 0u;
    xmmword_254A6DA40 = 0u;
    byte_254A6DA50 = 0;
    __cxa_atexit((void (*)(void *))sub_20FD2E4B4, &qword_254A6D9E0, &dword_20E81F000);
    __cxa_guard_release(&qword_254A6DA58);
  }
  sub_20FD2E78C((uint64_t)&qword_254A6D9E0, *(_QWORD *)(a1 + 16));
  std::mutex::unlock(v2);
}

void sub_20FD2EA74(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_20FD2EA88(uint64_t a1)
{
  std::mutex *v2;
  unsigned __int8 v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10[2];

  v2 = *(std::mutex **)a1;
  std::mutex::lock(*(std::mutex **)a1);
  if (*(_BYTE *)(a1 + 32))
    goto LABEL_2;
  *(_BYTE *)(a1 + 32) = 1;
  v3 = atomic_load((unsigned __int8 *)&qword_254A6DA58);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DA58))
  {
    qword_254A6D9E0 = (uint64_t)sub_20FD2E178;
    *(_QWORD *)algn_254A6D9E8 = sub_21023DA10;
    qword_254A6D9F0 = (uint64_t)sub_21023DC24;
    unk_254A6D9F8 = 850045863;
    xmmword_254A6DA00 = 0u;
    unk_254A6DA10 = 0u;
    xmmword_254A6DA20 = 0u;
    unk_254A6DA30 = 0u;
    xmmword_254A6DA40 = 0u;
    byte_254A6DA50 = 0;
    __cxa_atexit((void (*)(void *))sub_20FD2E4B4, &qword_254A6D9E0, &dword_20E81F000);
    __cxa_guard_release(&qword_254A6DA58);
  }
  v4 = *(_QWORD *)(a1 + 16);
  v5 = *(std::__shared_weak_count **)(a1 + 24);
  v10[0] = v4;
  v10[1] = (uint64_t)v5;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  sub_20FD2E590((uint64_t)&qword_254A6D9E0, v10);
  if (!v5)
    goto LABEL_2;
  v8 = (unint64_t *)&v5->__shared_owners_;
  do
    v9 = __ldaxr(v8);
  while (__stlxr(v9 - 1, v8));
  if (v9)
  {
LABEL_2:
    std::mutex::unlock(v2);
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
    std::mutex::unlock(v2);
  }
}

void sub_20FD2EBCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::mutex *v9;

  sub_20E86665C((uint64_t)&a9);
  std::mutex::unlock(v9);
  _Unwind_Resume(a1);
}

void sub_20FD2EBE8(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  std::mutex *v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _BYTE *v24;
  int v25;
  uint64_t v26;
  __int128 v27;
  void *v28;
  char v29;
  unsigned __int8 v30;
  __int128 v31;
  uint64_t v32;
  uint64_t v33;
  __int128 v34;
  uint64_t v35;
  char v36;
  char v37;
  uint64_t v38;
  std::__shared_weak_count *v39;
  __int128 v40;
  __int128 v41;
  char v42;
  char v43;
  void *v44;
  char v45;
  void *__p;
  char v47;
  char v48;
  char v49;
  char v50;
  __int128 v51;
  char v52;
  uint64_t v53;

  v53 = *MEMORY[0x24BDAC8D0];
  v12 = *(std::mutex **)a1;
  std::mutex::lock(*(std::mutex **)a1);
  v13 = *(std::__shared_weak_count **)(a1 + 24);
  v38 = *(_QWORD *)(a1 + 16);
  v39 = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v15 = __ldxr(p_shared_owners);
    while (__stxr(v15 + 1, p_shared_owners));
  }
  LOBYTE(v51) = 0;
  v52 = 0;
  sub_20FD1F638(a2, &v38, a3, &v51, a4, a5, (uint64_t)&v40);
  v16 = v39;
  if (!v39)
    goto LABEL_8;
  v17 = (unint64_t *)&v39->__shared_owners_;
  do
    v18 = __ldaxr(v17);
  while (__stlxr(v18 - 1, v17));
  if (!v18)
  {
    ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
    std::__shared_weak_count::__release_weak(v16);
    if (v50)
      goto LABEL_9;
  }
  else
  {
LABEL_8:
    if (v50)
    {
LABEL_9:
      v19 = (_QWORD *)operator new();
      v20 = *((_QWORD *)&v40 + 1);
      *((_QWORD *)&v40 + 1) = 0;
      *v19 = &off_24CA060C0;
      v19[1] = v20;
      v21 = *(_QWORD *)(a1 + 40);
      *(_QWORD *)(a1 + 40) = v19;
      if (v21)
        (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
      *(_BYTE *)(a6 + 120) = 1;
      goto LABEL_12;
    }
  }
  v27 = v40;
  v24 = sub_20E89EFE4(&v28, &v41);
  *(_OWORD *)a6 = v27;
  *(_BYTE *)(a6 + 16) = 0;
  *(_BYTE *)(a6 + 112) = 0;
  if (v37)
  {
    *(_BYTE *)(a6 + 40) = 0;
    v25 = v30;
    if (v30)
    {
      *(_OWORD *)(a6 + 16) = *(_OWORD *)v24;
      *(_QWORD *)(a6 + 32) = *((_QWORD *)v24 + 2);
      *((_QWORD *)v24 + 1) = 0;
      *((_QWORD *)v24 + 2) = 0;
      *(_QWORD *)v24 = 0;
      *(_BYTE *)(a6 + 40) = 1;
    }
    *(_BYTE *)(a6 + 48) = 0;
    *(_BYTE *)(a6 + 104) = 0;
    if (v36)
    {
      v26 = v33;
      *(_QWORD *)(a6 + 64) = v32;
      *(_OWORD *)(a6 + 48) = v31;
      v31 = 0uLL;
      *(_QWORD *)(a6 + 72) = v26;
      *(_OWORD *)(a6 + 80) = v34;
      *(_QWORD *)(a6 + 96) = v35;
      v32 = 0;
      v34 = 0uLL;
      v35 = 0;
      *(_BYTE *)(a6 + 104) = 1;
    }
    *(_BYTE *)(a6 + 112) = 1;
    *(_BYTE *)(a6 + 120) = 0;
    if (v25 && v29 < 0)
      operator delete(v28);
  }
  else
  {
    *(_BYTE *)(a6 + 120) = 0;
  }
LABEL_12:
  if (v50)
  {
    v22 = *((_QWORD *)&v40 + 1);
    *((_QWORD *)&v40 + 1) = 0;
    if (v22)
    {
      v23 = sub_20FD1B660(v22);
      MEMORY[0x212BC6398](v23, 0x10B3C4012E545FFLL);
    }
  }
  else if (v49)
  {
    if (v48)
    {
      if (v47 < 0)
        operator delete(__p);
      if (v45 < 0)
        operator delete(v44);
    }
    if (v43 && v42 < 0)
      operator delete((void *)v41);
  }
  std::mutex::unlock(v12);
}

void sub_20FD2EEB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  std::mutex *v27;

  sub_20FD2CFAC((uint64_t)&a27);
  std::mutex::unlock(v27);
  _Unwind_Resume(a1);
}

void sub_20FD2EED0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  std::mutex *v17;
  va_list va;

  va_start(va, a17);
  sub_20E86665C((uint64_t)va);
  std::mutex::unlock(v17);
  _Unwind_Resume(a1);
}

_QWORD *sub_20FD2EEEC(uint64_t a1, _QWORD *a2)
{
  std::mutex *v4;
  int v5;
  const char *v6;
  uint64_t v7;
  std::mutex *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  unsigned __int8 *v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  _BYTE v20[37];
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  sub_20E86A980(a2, (uint64_t)"{abort_trigger: ", 16);
  v4 = *(std::mutex **)a1;
  std::mutex::lock(*(std::mutex **)a1);
  v5 = *(unsigned __int8 *)(a1 + 32);
  std::mutex::unlock(v4);
  if (v5)
    v6 = "true";
  else
    v6 = "false";
  if (v5)
    v7 = 4;
  else
    v7 = 5;
  sub_20E86A980(a2, (uint64_t)v6, v7);
  sub_20E86A980(a2, (uint64_t)", client_trigger: ", 18);
  v8 = *(std::mutex **)a1;
  std::mutex::lock(*(std::mutex **)a1);
  v9 = *(_QWORD *)(a1 + 40);
  std::mutex::unlock(v8);
  if (v9)
  {
    v10 = sub_20E86A980(a2, (uint64_t)"{uuid: ", 7);
    v11 = *(_QWORD *)(a1 + 40);
    if (!v11)
    {
      if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Diagnostics/src/Triggers.cpp", 166, (uint64_t)"diagnostics_client_", 19, (uint64_t)&unk_2102BCFFF, 0, (void (*)(void **))sub_21023DDB0))
      {
        abort();
      }
      v11 = *(_QWORD *)(a1 + 40);
    }
    v12 = (unsigned __int8 *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 16))(v11);
    sub_2102323F4(v12, v20);
    v13 = sub_20E86A980(v10, (uint64_t)v20, 36);
    v14 = sub_20E86A980(v13, (uint64_t)", at: ", 6);
    v15 = *(_QWORD *)(a1 + 40);
    if (!v15)
    {
      if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Diagnostics/src/Triggers.cpp", 166, (uint64_t)"diagnostics_client_", 19, (uint64_t)&unk_2102BCFFF, 0, (void (*)(void **))sub_21023DDB0))
      {
        abort();
      }
      v15 = *(_QWORD *)(a1 + 40);
    }
    v16 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 24))(v15);
    v17 = *(unsigned __int8 *)(v16 + 23);
    if ((v17 & 0x80u) == 0)
      v18 = (_BYTE *)v16;
    else
      v18 = *(_BYTE **)v16;
    if ((v17 & 0x80u) != 0)
      v17 = *(_QWORD *)(v16 + 8);
    sub_20EB052B4(v14, v18, &v18[v17], 0x22u, 0x5Cu);
    sub_20E86A980(v14, (uint64_t)"}", 1);
  }
  else
  {
    sub_20E86A980(a2, (uint64_t)"null", 4);
  }
  sub_20E86A980(a2, (uint64_t)"}", 1);
  return a2;
}

uint64_t *sub_20FD2F128(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  _QWORD *v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t v12;

  v4 = operator new();
  v6 = *a2;
  v5 = (std::__shared_weak_count *)a2[1];
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }
  v9 = operator new(0x58uLL);
  v9[1] = 0;
  v9[2] = 0;
  *v9 = &off_24CA06B88;
  v9[3] = 850045863;
  *((_OWORD *)v9 + 2) = 0u;
  *((_OWORD *)v9 + 3) = 0u;
  *((_OWORD *)v9 + 4) = 0u;
  v9[10] = 0;
  *(_QWORD *)v4 = v9 + 3;
  *(_QWORD *)(v4 + 8) = v9;
  *(_QWORD *)(v4 + 16) = v6;
  *(_QWORD *)(v4 + 24) = v5;
  if (!v5)
  {
    *(_BYTE *)(v4 + 32) = 0;
    *(_QWORD *)(v4 + 40) = 0;
    *a1 = v4;
    if (*a2)
      return a1;
    goto LABEL_14;
  }
  v10 = (unint64_t *)&v5->__shared_owners_;
  do
    v11 = __ldxr(v10);
  while (__stxr(v11 + 1, v10));
  *(_BYTE *)(v4 + 32) = 0;
  *(_QWORD *)(v4 + 40) = 0;
  *a1 = v4;
  do
    v12 = __ldaxr(v10);
  while (__stlxr(v12 - 1, v10));
  if (!v12)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
  if (!*a2)
  {
LABEL_14:
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Diagnostics/src/Triggers.cpp", 192, (uint64_t)"engine", 6, (uint64_t)&unk_2102BCFFF, 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
  }
  return a1;
}

void sub_20FD2F28C(_Unwind_Exception *a1)
{
  _QWORD **v1;

  sub_20FD2F2CC(v1);
  _Unwind_Resume(a1);
}

void sub_20FD2F2A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  sub_20E86665C((uint64_t)&a9);
  MEMORY[0x212BC6398](v9, 0x1020C402BFA8F76);
  _Unwind_Resume(a1);
}

_QWORD **sub_20FD2F2CC(_QWORD **a1)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    v3 = sub_20FD2F310(v2);
    MEMORY[0x212BC6398](v3, 0x1020C402BFA8F76);
  }
  return a1;
}

_QWORD *sub_20FD2F310(_QWORD *a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  sub_20FD2E9AC((uint64_t)a1);
  v2 = a1[5];
  a1[5] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = (std::__shared_weak_count *)a1[3];
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  v6 = (std::__shared_weak_count *)a1[1];
  if (!v6)
    return a1;
  v7 = (unint64_t *)&v6->__shared_owners_;
  do
    v8 = __ldaxr(v7);
  while (__stlxr(v8 - 1, v7));
  if (v8)
    return a1;
  ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
  std::__shared_weak_count::__release_weak(v6);
  return a1;
}

void sub_20FD2F3D0(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24CA06B88;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_20FD2F3E0(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24CA06B88;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC6398);
}

void sub_20FD2F410(uint64_t a1)
{
  std::mutex::~mutex((std::mutex *)(a1 + 24));
}

uint64_t sub_20FD2F41C@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  void (*v53)(_QWORD *, _QWORD *, uint64_t);
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  char __p[20];
  char v89;
  uint64_t v90;
  _QWORD v91[3];

  v89 = 19;
  strcpy(__p, "BAFilter parameters");
  sub_20E8B30B4(a2, (__int128 *)__p, 180, 160);
  if (v89 < 0)
    operator delete(*(void **)__p);
  *(_QWORD *)__p = nullsub_1(a2);
  v4 = sub_20EAA71FC((int *)(a1 + 248));
  sub_20E8B2F9C((uint64_t *)__p, "BAFilterConfig.fg_vio_health_module_version", v4, "FG-VIO health module version.");
  *(_QWORD *)__p = nullsub_1(a2);
  v5 = sub_20EA9DB90((double *)(a1 + 256));
  sub_20E8B2F9C((uint64_t *)__p, "BAFilterConfig.health_sensing_factor", v5, "Health sensing factor override. Larger value means more larger health values range");
  *(_QWORD *)__p = nullsub_1(a2);
  v6 = sub_20EA9DB90((double *)a1);
  sub_20E8B2F9C((uint64_t *)__p, "BAFilterConfig.feature_inlier_threshold_in_std", v6, "Threshold (in feature measurement standard deviations) for the point feature inliers to be admitted into the bundle.");
  *(_QWORD *)__p = nullsub_1(a2);
  v7 = sub_20EA9DB90((double *)(a1 + 8));
  sub_20E8B2F9C((uint64_t *)__p, "BAFilterConfig.line_inlier_threshold_in_std", v7, "Threshold (in feature measurement standard deviations) for the line feature inliers to be admitted into the bundle.");
  *(_QWORD *)__p = nullsub_1(a2);
  v8 = sub_20EA9DB90((double *)(a1 + 24));
  sub_20E8B2F9C((uint64_t *)__p, "BAFilterConfig.feature_inlier_threshold_in_std_before_ba", v8, "Minimum reprojection error at which point tracks are removed from the bundle (in feature standard deviations). It used before solving BA to only use inlier tracks to update states admitted into the bundle.");
  *(_QWORD *)__p = nullsub_1(a2);
  v9 = sub_20EA9DB90((double *)(a1 + 56));
  sub_20E8B2F9C((uint64_t *)__p, "BAFilterConfig.line_inlier_threshold_in_std_before_ba", v9, "Minimum reprojection error at which line tracks are removed from the bundle (in feature standard deviations). It used before solving BA to only use inlier tracks to update states admitted into the bundle.");
  *(_QWORD *)__p = nullsub_1(a2);
  v10 = sub_20EA9DB90((double *)(a1 + 40));
  sub_20E8B2F9C((uint64_t *)__p, "BAFilterConfig.feature_inlier_threshold_in_std_for_pcl", v10, "Maximum reprojection error at which tracks are propagated into the point cloud.");
  *(_QWORD *)__p = nullsub_1(a2);
  v11 = sub_20EA9DB90((double *)(a1 + 64));
  sub_20E8B2F9C((uint64_t *)__p, "BAFilterConfig.map_feature_inlier_threshold_in_std", v11, "Threshold (in feature measurement standard deviations) for the feature inlies to be admitted into the map.");
  *(_QWORD *)__p = nullsub_1(a2);
  v12 = sub_20EA9DB90((double *)(a1 + 1400));
  sub_20E8B2F9C((uint64_t *)__p, "BAFilterConfig.min_health_for_masking_tracks", v12, "Minimum health required to mask the tracks using reprojection check.");
  *(_QWORD *)__p = nullsub_1(a2);
  v13 = sub_20EA9DB90((double *)(a1 + 48));
  sub_20E8B2F9C((uint64_t *)__p, "BAFilterConfig.max_feature_depth_threshold", v13, "Front-End filter maximum allowed depth for triangulated points");
  *(_QWORD *)__p = nullsub_1(a2);
  v14 = sub_20EA9DB90((double *)(a1 + 72));
  sub_20E8B2F9C((uint64_t *)__p, "BAFilterConfig.vergence_angle_threshold", v14, "Threshold (in degree) for point landmark's vergence angle to be admitted into the bundle.");
  *(_QWORD *)__p = nullsub_1(a2);
  v15 = sub_20EA9DB90((double *)(a1 + 80));
  sub_20E8B2F9C((uint64_t *)__p, "BAFilterConfig.line_vergence_angle_threshold", v15, "Threshold (in degree) for line landmark's vergence angle to be admitted into the bundle.");
  *(_QWORD *)__p = nullsub_1(a2);
  v16 = sub_20EA9DB90((double *)(a1 + 88));
  sub_20E8B2F9C((uint64_t *)__p, "BAFilterConfig.map_vergence_angle_threshold", v16, "Threshold (in degree) for landmark's vergence angle to be admitted into the map.");
  *(_QWORD *)__p = nullsub_1(a2);
  v17 = sub_20EA9DB90((double *)(a1 + 96));
  sub_20E8B2F9C((uint64_t *)__p, "BAFilterConfig.focal_plane_threshold", v17, "Threshold for distance between z=0 plane in camera coordinates and location of a point feature when determining inliers.");
  *(_QWORD *)__p = nullsub_1(a2);
  v18 = sub_20EA9DB90((double *)(a1 + 104));
  sub_20E8B2F9C((uint64_t *)__p, "BAFilterConfig.focal_plane_threshold_for_lines", v18, "Threshold for distance between z=0 plane in camera coordinates and location of a line feature when determining inliers.");
  *(_QWORD *)__p = nullsub_1(a2);
  v19 = sub_20EA9DB90((double *)(a1 + 128));
  sub_20E8B2F9C((uint64_t *)__p, "BAFilterConfig.time_interval_for_orientation_observability_from_planes_s", v19, "Time interval to determine the orientation observability using plane normals. [Unit:sec].");
  *(_QWORD *)__p = nullsub_1(a2);
  v20 = sub_20EB8894C(a1 + 1248);
  sub_20E8B2F9C((uint64_t *)__p, "BAFilterConfig.sandbox_path", v20, "Path for sandbox output.");
  *(_QWORD *)__p = nullsub_1(a2);
  v21 = sub_20EB8894C(a1 + 1224);
  sub_20E8B2F9C((uint64_t *)__p, "BAFilterConfig.output_health_statistics_path", v21, "Output health statistics path.");
  *(_QWORD *)__p = nullsub_1(a2);
  v22 = sub_20EAA14D8((_BYTE *)(a1 + 264));
  sub_20E8B2F9C((uint64_t *)__p, "BAFilterConfig.condition_on_first_position", v22, "Condition BA on first frame position unless map estimates are present.");
  *(_QWORD *)__p = nullsub_1(a2);
  v23 = sub_20EAA1CB0((unint64_t *)(a1 + 1288));
  sub_20E8B2F9C((uint64_t *)__p, "BAFilterConfig.min_num_inlier_track_length", v23, "Minimum length for the inlier point track to be considered as a prior.");
  *(_QWORD *)__p = nullsub_1(a2);
  v24 = sub_20EAA1CB0((unint64_t *)(a1 + 1304));
  sub_20E8B2F9C((uint64_t *)__p, "BAFilterConfig.min_num_inlier_track_length_for_pcl", v24, "Minimum length for the inlier point track to be considered for point cloud.");
  *(_QWORD *)__p = nullsub_1(a2);
  v25 = sub_20EAA1CB0((unint64_t *)(a1 + 1312));
  sub_20E8B2F9C((uint64_t *)__p, "BAFilterConfig.min_num_line_inlier_track_length", v25, "Minimum length for the inlier line track to be considered as a prior.");
  *(_QWORD *)__p = nullsub_1(a2);
  v26 = sub_20EA9DCF0((unsigned int *)(a1 + 252));
  sub_20E8B2F9C((uint64_t *)__p, "BAFilterConfig.num_ba_steps_at_initialization", v26, "Number of BA steps at first window.");
  *(_QWORD *)__p = nullsub_1(a2);
  v27 = sub_20EA9DB90((double *)(a1 + 1344));
  sub_20E8B2F9C((uint64_t *)__p, "BAFilterConfig.extrinsics_orientation_prior_covariance_x", v27, "Prior covariance on the orientation components of the extrinsics (z).");
  *(_QWORD *)__p = nullsub_1(a2);
  v28 = sub_20EA9DB90((double *)(a1 + 1352));
  sub_20E8B2F9C((uint64_t *)__p, "BAFilterConfig.extrinsics_orientation_prior_covariance_y", v28, "Prior covariance on the orientation components of the extrinsics (y).");
  *(_QWORD *)__p = nullsub_1(a2);
  v29 = sub_20EA9DB90((double *)(a1 + 1360));
  sub_20E8B2F9C((uint64_t *)__p, "BAFilterConfig.extrinsics_orientation_prior_covariance_z", v29, "Prior covariance on the orientation components of the extrinsics (z).");
  *(_QWORD *)__p = nullsub_1(a2);
  v30 = sub_20EA9DB90((double *)(a1 + 1368));
  sub_20E8B2F9C((uint64_t *)__p, "BAFilterConfig.extrinsics_position_prior_covariance_x", v30, "Prior covariance on the position components of the extrinsics (x).");
  *(_QWORD *)__p = nullsub_1(a2);
  v31 = sub_20EA9DB90((double *)(a1 + 1376));
  sub_20E8B2F9C((uint64_t *)__p, "BAFilterConfig.extrinsics_position_prior_covariance_y", v31, "Prior covariance on the position components of the extrinsics (y).");
  *(_QWORD *)__p = nullsub_1(a2);
  v32 = sub_20EA9DB90((double *)(a1 + 1384));
  sub_20E8B2F9C((uint64_t *)__p, "BAFilterConfig.extrinsics_position_prior_covariance_z", v32, "Prior covariance on the position components of the extrinsics (z).");
  *(_QWORD *)__p = nullsub_1(a2);
  v33 = sub_20EE859FC(a1 + 1320);
  *(_BYTE *)(v33 + 114) = 1;
  *(_BYTE *)(v33 + 112) = 1;
  sub_20E8B2F9C((uint64_t *)__p, "BAFilterConfig.initial_camera_intrinsic_bias", v33, "Initial biases in camera intrinsic calibration model, only applied to camera [0:0]. Unit: pixel.");
  *(_QWORD *)__p = nullsub_1(a2);
  v34 = sub_20EAA14D8((_BYTE *)(a1 + 1432));
  sub_20E8B2F9C((uint64_t *)__p, "BAFilterConfig.enable_enrichment_tracks", v34, "Enable point clound enrichment tracks generation.");
  *(_QWORD *)__p = nullsub_1(a2);
  v35 = sub_20EAA14D8((_BYTE *)(a1 + 1434));
  sub_20E8B2F9C((uint64_t *)__p, "BAFilterConfig.marginalize_cov_in_bad_geometry_frame", v35, "Marginalize covariance in bad-geometry frames, only used in adaptive keyframing.");
  *(_QWORD *)__p = nullsub_1(a2);
  v36 = sub_20EAA14D8((_BYTE *)(a1 + 1435));
  sub_20E8B2F9C((uint64_t *)__p, "BAFilterConfig.prioritize_reusing_vio_landmarks_from_prev_ba", v36, "Prioritize reusing VIO landmarks from previous BA in current BA.");
  *(_QWORD *)__p = nullsub_1(a2);
  v37 = sub_20EAA14D8((_BYTE *)(a1 + 1488));
  sub_20E8B2F9C((uint64_t *)__p, "BAFilterConfig.use_stereo_tracks_only_in_light_ba", v37, "Only use stereo tracks when in light BA.");
  *(_QWORD *)__p = nullsub_1(a2);
  v38 = sub_20EAA14D8((_BYTE *)(a1 + 1482));
  sub_20E8B2F9C((uint64_t *)__p, "BAFilterConfig.limit_num_mono_tracks_to_triangulate", v38, "Whether to limit the number of mono-tracks, to triangulate, to a maximum.");
  *(_QWORD *)__p = nullsub_1(a2);
  v39 = sub_20EA9DCF0((unsigned int *)(a1 + 1484));
  sub_20E8B2F9C((uint64_t *)__p, "BAFilterConfig.max_num_mono_tracks_to_triangulate_per_stream", v39, "Maximum number of mono-tracks to triangulate if enabled.");
  *(_QWORD *)__p = nullsub_1(a2);
  v40 = sub_20EA9DCF0((unsigned int *)(a1 + 1440));
  sub_20E8B2F9C((uint64_t *)__p, "BAFilterConfig.max_num_frames", v40, "Maximum number of frames in the sliding window.");
  *(_QWORD *)__p = nullsub_1(a2);
  v41 = sub_20EA9DCF0((unsigned int *)(a1 + 1444));
  sub_20E8B2F9C((uint64_t *)__p, "BAFilterConfig.num_free_newest_frames_in_light_ba", v41, "Number of newest frames set to free in light VIO BA.");
  *(_QWORD *)__p = nullsub_1(a2);
  v42 = sub_20EAA14D8((_BYTE *)(a1 + 1448));
  sub_20E8B2F9C((uint64_t *)__p, "BAFilterConfig.use_only_angular_velocity_in_rolling_shutter_compensation", v42, "Use only angular velocity in rolling shutter compensation");
  *(_QWORD *)__p = nullsub_1(a2);
  v43 = sub_20EAA14D8((_BYTE *)(a1 + 1449));
  sub_20E8B2F9C((uint64_t *)__p, "BAFilterConfig.use_local_fixed_map_track_set", v43, "Use a private map track set for local map.");
  *(_QWORD *)__p = nullsub_1(a2);
  v44 = sub_20EA9DCF0((unsigned int *)(a1 + 1452));
  sub_20E8B2F9C((uint64_t *)__p, "BAFilterConfig.max_num_map_constraints", v44, "Maximum number of map constraints per sliding window (no limit by default, 0 to not allow any).");
  *(_QWORD *)__p = nullsub_1(a2);
  v45 = sub_20EB8894C(a1 + 1456);
  sub_20E8B2F9C((uint64_t *)__p, "BAFilterConfig.map_constraint_classifier_ll_weights", v45, "Last layer weights overrides for the map constraints classifier (blank for model defaults). Comma-separated list.");
  *(_QWORD *)__p = nullsub_1(a2);
  v46 = sub_20EAA14D8((_BYTE *)(a1 + 1480));
  sub_20E8B2F9C((uint64_t *)__p, "BAFilterConfig.map_constraint_classifier_use_inference", v46, "Whether to use inference (true, default) or analytical information gain (false).");
  *(_QWORD *)__p = nullsub_1(a2);
  v47 = sub_20EAA14D8((_BYTE *)(a1 + 1481));
  sub_20E8B2F9C((uint64_t *)__p, "BAFilterConfig.map_constraint_classifier_dump_training_data", v47, " Whether to write out scores and feature vectors for classifier training. Only takes effect if map_constraint_classifier_use_inference is also set. Off by default.");
  *(_QWORD *)__p = nullsub_1(a2);
  v48 = sub_20EAA14D8((_BYTE *)(a1 + 1489));
  sub_20E8B2F9C((uint64_t *)__p, "BAFilterConfig.only_use_main_camera_for_map_creation", v48, "Whether to only use the main camera (DCAM) for map creation.");
  *(_QWORD *)__p = nullsub_1(a2);
  v49 = sub_20EAA14D8((_BYTE *)(a1 + 1496));
  sub_20E8B2F9C((uint64_t *)__p, "BAFilterConfig.ignore_step_size_in_health_estimation", v49, "Whether to ignore the step size in health estimation.");
  *(_QWORD *)__p = nullsub_1(a2);
  v50 = sub_20EAA14D8((_BYTE *)(a1 + 1436));
  sub_20E8B2F9C((uint64_t *)__p, "BAFilterConfig.enable_debug", v50, "Enable debugging information.");
  *(_QWORD *)__p = nullsub_1(a2);
  v51 = sub_20EAA1770(a1 + 144);
  sub_20E8B2F9C((uint64_t *)__p, "BAFilterConfig.conservative_tracking_speeds_m_s_sq", v51, "Square speed thresholds to enable each conservative mode when the speed is lower than the threshold. Unit [(m/s)^2].");
  *(_QWORD *)__p = nullsub_1(a2);
  v52 = operator new();
  *(_QWORD *)v52 = &off_24C9C34F8;
  *(_QWORD *)(v52 + 8) = &unk_24C9C3568;
  *(_QWORD *)(v52 + 120) = 0;
  *(_OWORD *)(v52 + 16) = 0u;
  *(_OWORD *)(v52 + 32) = 0u;
  *(_OWORD *)(v52 + 48) = 0u;
  *(_OWORD *)(v52 + 64) = 0u;
  *(_OWORD *)(v52 + 80) = 0u;
  *(_OWORD *)(v52 + 96) = 0u;
  *(_QWORD *)(v52 + 109) = 0;
  v90 = (uint64_t)off_24CA06BC8 + 1;
  v91[0] = a1;
  sub_20EAA8294((uint64_t *)(v52 + 120), &v90);
  sub_20E8B2F9C((uint64_t *)__p, "BAFilterConfig.gyro_scale_estimate_update_algorithm", v52, "Selects which algorithm for adoptting gyro scale estimate update.");
  if (v90)
  {
    if ((v90 & 1) == 0)
    {
      v53 = *(void (**)(_QWORD *, _QWORD *, uint64_t))(v90 & 0xFFFFFFFFFFFFFFFELL);
      if (v53)
        v53(v91, v91, 2);
    }
    v90 = 0;
  }
  *(_QWORD *)__p = nullsub_1(a2);
  v54 = sub_20EA9DB90((double *)(a1 + 176));
  sub_20E8B2F9C((uint64_t *)__p, "BAFilterConfig.gyro_scale_estimate_update_variance", v54, "The variance of using gyro scale estimate update as a prior.");
  *(_QWORD *)__p = nullsub_1(a2);
  v55 = sub_20EAA14D8((_BYTE *)(a1 + 232));
  sub_20E8B2F9C((uint64_t *)__p, "BAFilterConfig.limit_triangulation_depth_only_in_conservative_mode2", v55, "Apply the limit of triangulation depth only in conservative tracking mode #2.");
  *(_QWORD *)__p = nullsub_1(a2);
  v56 = sub_20EAA1770(a1 + 184);
  sub_20E8B2F9C((uint64_t *)__p, "BAFilterConfig.conservative_tracking_feature_inlier_threshold_scale", v56, "The scale of feature inlier threshold (front-end and map) in each conservative mode.");
  *(_QWORD *)__p = nullsub_1(a2);
  v57 = sub_20EA9DB90((double *)(a1 + 32));
  sub_20E8B2F9C((uint64_t *)__p, "BAFilterConfig.multi_view_feature_inlier_threshold_in_std_before_ba", v57, "Minimum reprojection error at which multi-view tracks are removed from the bundle in feature standard deviations)");
  *(_QWORD *)__p = nullsub_1(a2);
  v58 = sub_20EAA1CB0((unint64_t *)(a1 + 1296));
  sub_20E8B2F9C((uint64_t *)__p, "BAFilterConfig.min_num_inlier_multi_view_track_length", v58, "Minimum length for an multi-view inlier track to be considered as a prior.");
  *(_QWORD *)__p = nullsub_1(a2);
  v59 = sub_20EAA14D8((_BYTE *)(a1 + 1497));
  sub_20E8B2F9C((uint64_t *)__p, "BAFilterConfig.classify_inlier_slam_features_prior_BA", v59, "Flag to reject outlier SLAM features prior BA through reprojection check.");
  *(_QWORD *)__p = nullsub_1(a2);
  v60 = sub_20EAA14D8((_BYTE *)(a1 + 1498));
  sub_20E8B2F9C((uint64_t *)__p, "BAFilterConfig.triangulate_slam_features_prior_BA", v60, "Flag to triangulate SLAM features prior BA through reprojection check, instead of using its original depth.");
  *(_QWORD *)__p = nullsub_1(a2);
  v61 = sub_20EAA14D8((_BYTE *)(a1 + 1499));
  sub_20E8B2F9C((uint64_t *)__p, "BAFilterConfig.enable_incremental_triangulation", v61, "Flag to enable incremental trinagulation.");
  *(_QWORD *)__p = nullsub_1(a2);
  v62 = sub_20EAA14D8((_BYTE *)(a1 + 1500));
  sub_20E8B2F9C((uint64_t *)__p, "BAFilterConfig.use_incrmental_triangulation_for_BA", v62, "Flag to optionally using incremental triangulation for BA.");
  *(_QWORD *)__p = nullsub_1(a2);
  v63 = sub_20EAA14D8((_BYTE *)(a1 + 1501));
  sub_20E8B2F9C((uint64_t *)__p, "BAFilterConfig.refine_triangulation_structure_before_ba_for_vio_tracks", v63, "Refine triangulation structure (bearing and depth) before BA for only VIO tracks.");
  *(_QWORD *)__p = nullsub_1(a2);
  v64 = sub_20EAA14D8((_BYTE *)(a1 + 1502));
  sub_20E8B2F9C((uint64_t *)__p, "BAFilterConfig.enforce_anchor_camera_only_triangulation_of_non_anchored_states", v64, "Enforce anchor camera only triangulation of non anchored states for outlier rejection.");
  *(_QWORD *)__p = nullsub_1(a2);
  v65 = sub_20EAA14D8((_BYTE *)(a1 + 1503));
  sub_20E8B2F9C((uint64_t *)__p, "BAFilterConfig.enforce_anchor_camera_only_filtering", v65, "Enforce anchor camera only filtering for outlier rejection.");
  *(_QWORD *)__p = nullsub_1(a2);
  v66 = sub_20EAA14D8((_BYTE *)(a1 + 1504));
  sub_20E8B2F9C((uint64_t *)__p, "BAFilterConfig.incremental_triangulate_only_valid_tracks", v66, "Incremental triangulate only valid tracks. Gives mis-classified outlier tracks a chance to become inlier again.");
  *(_QWORD *)__p = nullsub_1(a2);
  v67 = sub_20EA9DB90((double *)(a1 + 1408));
  sub_20E8B2F9C((uint64_t *)__p, "BAFilterConfig.minimum_angular_speed_to_scale_gyro_noise_model", v67, "Minimum angular speed needed to scale gyro noise model. Unit [Rad/s].");
  *(_QWORD *)__p = nullsub_1(a2);
  v68 = sub_20EA9DB90((double *)(a1 + 1416));
  sub_20E8B2F9C((uint64_t *)__p, "BAFilterConfig.gyro_bias_sigma_scale_factor_due_to_fast_rotation", v68, "Gyro bias sigma scale factor during fast rotation.");
  *(_QWORD *)__p = nullsub_1(a2);
  v69 = sub_20EA9DB90((double *)(a1 + 1424));
  sub_20E8B2F9C((uint64_t *)__p, "BAFilterConfig.gyro_noise_sigma_scale_factor_due_to_fast_rotation", v69, "Gyro noise sigma scale factor during fast rotation.");
  *(_QWORD *)__p = nullsub_1(a2);
  v70 = sub_20EAA14D8((_BYTE *)(a1 + 1438));
  sub_20E8B2F9C((uint64_t *)__p, "BAFilterConfig.sync_inertial_sensor_model", v70, "sync_inertial_sensor_model.");
  *(_QWORD *)__p = nullsub_1(a2);
  v71 = sub_20EAA1CB0((unint64_t *)(a1 + 1512));
  sub_20E8B2F9C((uint64_t *)__p, "BAFilterConfig.max_num_successful_triangulated_tracks_when_initializing", v71, "Parameter for setting a limit on successfully triangulated tracks prior to initialization.");
  *(_QWORD *)__p = nullsub_1(a2);
  v72 = sub_20EAA1CB0((unint64_t *)(a1 + 1520));
  sub_20E8B2F9C((uint64_t *)__p, "BAFilterConfig.max_num_successful_triangulated_tracks", v72, "Parameter for setting a limit on successfully triangulated tracks.");
  *(_QWORD *)__p = nullsub_1(a2);
  v73 = sub_20EAA1CB0((unint64_t *)(a1 + 1528));
  sub_20E8B2F9C((uint64_t *)__p, "BAFilterConfig.min_track_length_for_reusing_vio_landmarks_from_prev_ba", v73, "Parameter that sets a lower limit on length for using previously cached tracks. It takes effect only when prioritize_reusing_vio_landmarks_from_prev_ba is true.");
  *(_QWORD *)__p = nullsub_1(a2);
  v74 = sub_20EAA1CB0((unint64_t *)(a1 + 1528));
  sub_20E8B2F9C((uint64_t *)__p, "BAFilterConfig.min_track_length_for_reusing_vio_landmarks_from_prev_ba", v74, "Parameter that sets a lower limit on length for using previously cached tracks. It takes effect only when prioritize_reusing_vio_landmarks_from_prev_ba is true.");
  *(_QWORD *)__p = nullsub_1(a2);
  v75 = sub_20EAA1770(a1 + 208);
  sub_20E8B2F9C((uint64_t *)__p, "BAFilterConfig.low_inliers_conservative_tracking_feature_inlier_threshold_scale", v75, "The scale of feature inlier threshold (front-end and map) in each conservative mode.");
  *(_QWORD *)__p = nullsub_1(a2);
  v76 = sub_20EAA14D8((_BYTE *)(a1 + 1544));
  sub_20E8B2F9C((uint64_t *)__p, "BAFilterConfig.enable_stereo_based_outlier_rejection", v76, "Enable stereo outlier rejection for reducing moving object drift.");
  *(_QWORD *)__p = nullsub_1(a2);
  v77 = sub_20EA9DB90((double *)(a1 + 1552));
  sub_20E8B2F9C((uint64_t *)__p, "BAFilterConfig.min_stereo_outlier_pixel_error_sigma_scaling", v77, "Scaling factor applied to feature signma for determining outliers.");
  *(_QWORD *)__p = nullsub_1(a2);
  v78 = sub_20EA9DB90((double *)(a1 + 1560));
  sub_20E8B2F9C((uint64_t *)__p, "BAFilterConfig.min_stereo_outlier_pixel_error_sigma_scaling_low_light", v78, "Scaling factor applied to feature signma for determining outliers in low light.");
  *(_QWORD *)__p = nullsub_1(a2);
  v79 = sub_20EA9DB90((double *)(a1 + 1568));
  sub_20E8B2F9C((uint64_t *)__p, "BAFilterConfig.max_stereo_outlier_error_sq_in_std", v79, "Maximum error to be considered a ~correct~ but not neccearily ~inlier~ match.");
  *(_QWORD *)__p = nullsub_1(a2);
  v80 = sub_20EA9DB90((double *)(a1 + 1576));
  sub_20E8B2F9C((uint64_t *)__p, "BAFilterConfig.max_stereo_track_depth_m", v80, "Max depth of stereo feature to be used for outlier rejection.");
  *(_QWORD *)__p = nullsub_1(a2);
  v81 = sub_20EA9DB90((double *)(a1 + 1584));
  sub_20E8B2F9C((uint64_t *)__p, "BAFilterConfig.max_valid_cached_stereo_position_window_s", v81, "Maximum time difference between current image and stereo feature to be used for outlier rejection.");
  *(_QWORD *)__p = nullsub_1(a2);
  v82 = sub_20EA9DCF0((unsigned int *)(a1 + 1592));
  sub_20E8B2F9C((uint64_t *)__p, "BAFilterConfig.min_num_inlier_tracks_to_enable_stereo_outlier_rejection", v82, "Minimum number of tracks required for stereo outlier rejection to run.");
  *(_QWORD *)__p = nullsub_1(a2);
  v83 = sub_20EA9DB90((double *)(a1 + 1600));
  sub_20E8B2F9C((uint64_t *)__p, "BAFilterConfig.max_rotation_rate_to_enable_stereo_outlier_rejection_rad", v83, "Maximum rotation rate of the last two states in the bundle to enable stereo based utlier rejection.");
  *(_QWORD *)__p = nullsub_1(a2);
  v84 = sub_20EA9DCF0((unsigned int *)(a1 + 1536));
  sub_20E8B2F9C((uint64_t *)__p, "BAFilterConfig.num_logged_initial_states", v84, "Number of logged initial states before first BA solve. If the value is larger than state size in the BA, only max state size will be logged.");
  *(_QWORD *)__p = nullsub_1(a2);
  v85 = sub_20EA9DB90((double *)(a1 + 1760));
  sub_20E8B2F9C((uint64_t *)__p, "BAFilterConfig.max_nearby_semantics_keyframe_dist_sq_m", v85, "Maximum distance squared to consider semantics keyframes to be nearby.");
  *(_QWORD *)__p = nullsub_1(a2);
  v86 = sub_20EA9DB90((double *)(a1 + 1768));
  sub_20E8B2F9C((uint64_t *)__p, "BAFilterConfig.max_nearby_semantics_keyframe_angle_diff_deg", v86, "Maximum angle difference (deg) to consider semantics keyframes to be nearby.");
  sub_20FD381D4(a1 + 272, __p);
  sub_20E8B32F0(a2, (uint64_t)__p);
  sub_20E869298((uint64_t)__p);
  sub_20FDB947C(a1 + 1144, __p);
  sub_20E8B32F0(a2, (uint64_t)__p);
  sub_20E869298((uint64_t)__p);
  sub_20FDB6568(a1 + 1200, __p);
  sub_20E8B32F0(a2, (uint64_t)__p);
  sub_20E869298((uint64_t)__p);
  sub_20FDBAAB0(a1 + 1112, __p);
  sub_20E8B32F0(a2, (uint64_t)__p);
  sub_20E869298((uint64_t)__p);
  sub_20FDBA614(a1 + 1608, __p);
  sub_20E8B32F0(a2, (uint64_t)__p);
  return sub_20E869298((uint64_t)__p);
}

void sub_20FD30530(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  uint64_t v14;

  sub_20E869298((uint64_t)&__p);
  sub_20E869298(v14);
  _Unwind_Resume(a1);
}

uint64_t sub_20FD30830(uint64_t result, _WORD *a2, unsigned int a3)
{
  uint64_t v4;

  if (a3 == 4)
    goto LABEL_2;
  v4 = result;
  if (a3 <= 1)
  {
    *(_QWORD *)a2 = *(_QWORD *)result;
    return result;
  }
  if (a3 != 2)
  {
    if (a3 != 3)
    {
LABEL_2:
      *(_QWORD *)a2 = &unk_24CA06BD8;
      a2[4] = 0;
      return result;
    }
    result = *(_QWORD *)(*(_QWORD *)a2 + 8) & 0x7FFFFFFFFFFFFFFFLL;
    if (result == ((unint64_t)"ZN4cv3d3vio31batch_least_squares_unsanitized28GetProgramOptionsDescriptionERNS0_19"
                                      "batch_least_squares14BAFilterConfigEE4$_49" & 0x7FFFFFFFFFFFFFFFLL)
      || (result = strcmp((const char *)result, (const char *)((unint64_t)"ZN4cv3d3vio31batch_least_squares_unsanitized28GetProgramOptionsDescriptionERNS0_19batch_least_squares14BAFilterConfigEE4$_49" & 0x7FFFFFFFFFFFFFFFLL)), !(_DWORD)result))
    {
      *(_QWORD *)a2 = v4;
    }
    else
    {
      *(_QWORD *)a2 = 0;
    }
  }
  return result;
}

uint64_t sub_20FD308DC(uint64_t result, _DWORD *a2)
{
  *(_BYTE *)(*(_QWORD *)result + 168) = *a2;
  return result;
}

void sub_20FD308EC(uint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4, unint64_t a5)
{
  unint64_t v10;
  BOOL v11;
  BOOL v12;
  unint64_t v13;
  char *v14;
  _BYTE *v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  char *v25;
  char *v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  char *v31;
  char *v32;
  _BYTE *v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  char *v41;
  char *v42;
  char *v43;
  char *v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t *v53;
  unint64_t v54;
  char v55;
  uint64_t v56;

  v10 = 0xCF3CF3CF3CF3CF3DLL * ((uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 3);
  v11 = a2 >= v10;
  v12 = a2 > v10;
  v13 = a2 - v10;
  if (v12)
  {
    sub_20FD31048((char **)a1, v13);
  }
  else if (!v11)
  {
    *(_QWORD *)(a1 + 8) = *(_QWORD *)a1 + 168 * a2;
  }
  v15 = *(_BYTE **)(a1 + 24);
  v14 = *(char **)(a1 + 32);
  v16 = 0xAAAAAAAAAAAAAAABLL * ((v14 - v15) >> 5);
  v17 = a3 - v16;
  if (a3 <= v16)
  {
    if (a3 >= v16)
      goto LABEL_25;
    v31 = &v15[96 * a3];
    goto LABEL_22;
  }
  v18 = *(_QWORD *)(a1 + 40);
  if (0xAAAAAAAAAAAAAAABLL * ((v18 - (uint64_t)v14) >> 5) >= v17)
  {
    bzero(*(void **)(a1 + 32), 96 * ((96 * v17 - 96) / 0x60) + 96);
    v31 = &v14[96 * ((96 * v17 - 96) / 0x60) + 96];
LABEL_22:
    *(_QWORD *)(a1 + 32) = v31;
    goto LABEL_25;
  }
  if (a3 > 0x2AAAAAAAAAAAAAALL)
    sub_20E867F44();
  v19 = 0xAAAAAAAAAAAAAAABLL * ((v18 - (uint64_t)v15) >> 5);
  v20 = 2 * v19;
  if (2 * v19 <= a3)
    v20 = a3;
  if (v19 >= 0x155555555555555)
    v21 = 0x2AAAAAAAAAAAAAALL;
  else
    v21 = v20;
  if (v21 > 0x2AAAAAAAAAAAAAALL)
LABEL_51:
    sub_20E877A38();
  v22 = 96 * v21;
  v23 = (char *)operator new(96 * v21);
  v24 = &v23[32 * ((v14 - v15) >> 5)];
  v25 = &v23[v22];
  bzero(v24, 96 * ((96 * v17 - 96) / 0x60) + 96);
  v26 = &v24[96 * ((96 * v17 - 96) / 0x60) + 96];
  if (v14 == v15)
  {
    *(_QWORD *)(a1 + 24) = v24;
    *(_QWORD *)(a1 + 32) = v26;
    *(_QWORD *)(a1 + 40) = v25;
    if (!v14)
      goto LABEL_25;
    goto LABEL_24;
  }
  do
  {
    v27 = *((_OWORD *)v14 - 5);
    *((_OWORD *)v24 - 6) = *((_OWORD *)v14 - 6);
    *((_OWORD *)v24 - 5) = v27;
    v28 = *((_OWORD *)v14 - 4);
    v29 = *((_OWORD *)v14 - 3);
    v30 = *((_OWORD *)v14 - 1);
    *((_OWORD *)v24 - 2) = *((_OWORD *)v14 - 2);
    *((_OWORD *)v24 - 1) = v30;
    *((_OWORD *)v24 - 4) = v28;
    *((_OWORD *)v24 - 3) = v29;
    v24 -= 96;
    v14 -= 96;
  }
  while (v14 != v15);
  v14 = *(char **)(a1 + 24);
  *(_QWORD *)(a1 + 24) = v24;
  *(_QWORD *)(a1 + 32) = v26;
  *(_QWORD *)(a1 + 40) = v25;
  if (v14)
LABEL_24:
    operator delete(v14);
LABEL_25:
  v33 = *(_BYTE **)(a1 + 48);
  v32 = *(char **)(a1 + 56);
  v34 = (v32 - v33) >> 6;
  v35 = a4 - v34;
  if (a4 <= v34)
  {
    if (a4 >= v34)
      goto LABEL_42;
    v48 = &v33[64 * a4];
    goto LABEL_41;
  }
  v36 = *(_QWORD *)(a1 + 64);
  if (v35 <= (v36 - (uint64_t)v32) >> 6)
  {
    bzero(*(void **)(a1 + 56), v35 << 6);
    v48 = &v32[64 * v35];
LABEL_41:
    *(_QWORD *)(a1 + 56) = v48;
    goto LABEL_42;
  }
  if (a4 >> 58)
    sub_20E867F44();
  v37 = v36 - (_QWORD)v33;
  v38 = v37 >> 5;
  if (v37 >> 5 <= a4)
    v38 = a4;
  v11 = (unint64_t)v37 >= 0x7FFFFFFFFFFFFFC0;
  v39 = 0x3FFFFFFFFFFFFFFLL;
  if (!v11)
    v39 = v38;
  if (v39 >> 58)
    goto LABEL_51;
  v40 = v39 << 6;
  v41 = (char *)operator new(v39 << 6);
  v42 = &v41[64 * v34];
  v43 = &v41[v40];
  bzero(v42, v35 << 6);
  v44 = &v42[64 * v35];
  if (v32 != v33)
  {
    do
    {
      v45 = *((_OWORD *)v32 - 4);
      v46 = *((_OWORD *)v32 - 3);
      v47 = *((_OWORD *)v32 - 1);
      *((_OWORD *)v42 - 2) = *((_OWORD *)v32 - 2);
      *((_OWORD *)v42 - 1) = v47;
      *((_OWORD *)v42 - 4) = v45;
      *((_OWORD *)v42 - 3) = v46;
      v42 -= 64;
      v32 -= 64;
    }
    while (v32 != v33);
    v32 = *(char **)(a1 + 48);
  }
  *(_QWORD *)(a1 + 48) = v42;
  *(_QWORD *)(a1 + 56) = v44;
  *(_QWORD *)(a1 + 64) = v43;
  if (v32)
    operator delete(v32);
LABEL_42:
  v49 = *(_QWORD *)(a1 + 72);
  v50 = *(_QWORD *)(a1 + 80);
  v51 = (v50 - v49) >> 3;
  if (a5 <= v51)
  {
    if (a5 < v51)
    {
      v50 = v49 + 8 * a5;
      *(_QWORD *)(a1 + 80) = v50;
    }
  }
  else
  {
    sub_20E93D8FC(a1 + 72, a5 - v51);
    v49 = *(_QWORD *)(a1 + 72);
    v50 = *(_QWORD *)(a1 + 80);
  }
  v52 = 15 * a2
      + ((v50 - v49) >> 3)
      + ((uint64_t)(*(_QWORD *)(a1 + 32) - *(_QWORD *)(a1 + 24)) >> 4)
      + ((uint64_t)(*(_QWORD *)(a1 + 56) - *(_QWORD *)(a1 + 48)) >> 3);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a1 + 96);
  v56 = 0;
  if (v52 * v52)
    sub_20F0052C8(a1 + 96, v52 * v52, &v56);
  v54 = *(_QWORD *)(a1 + 120);
  v53 = (unint64_t *)(a1 + 120);
  v53[1] = v54;
  v55 = 1;
  if (v52)
    sub_20EEBEDD0(v53, v52, &v55);
}

void sub_20FD30C88(uint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  char **v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  BOOL v12;
  BOOL v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;

  v9 = *(_QWORD *)(a1 + 48);
  v10 = *(_QWORD *)(a1 + 56);
  v8 = (char **)(a1 + 48);
  v11 = (v10 - v9) >> 5;
  v12 = a2 >= v11;
  v13 = a2 > v11;
  v14 = a2 - v11;
  if (v13)
  {
    sub_20F156988(v8, v14);
  }
  else if (!v12)
  {
    *(_QWORD *)(a1 + 56) = v9 + 32 * a2;
  }
  v15 = *(_QWORD *)(a1 + 96);
  v16 = (*(_QWORD *)(a1 + 104) - v15) >> 5;
  if (a2 <= v16)
  {
    if (a2 < v16)
      *(_QWORD *)(a1 + 104) = v15 + 32 * a2;
  }
  else
  {
    sub_20FD31260((char **)(a1 + 96), a2 - v16);
  }
  v17 = *(_QWORD *)(a1 + 72);
  v18 = (*(_QWORD *)(a1 + 80) - v17) >> 5;
  if (a3 <= v18)
  {
    if (a3 < v18)
      *(_QWORD *)(a1 + 80) = v17 + 32 * a3;
  }
  else
  {
    sub_20F156988((char **)(a1 + 72), a3 - v18);
  }
  v19 = *(_QWORD *)(a1 + 120);
  v20 = (*(_QWORD *)(a1 + 128) - v19) >> 5;
  if (a3 <= v20)
  {
    if (a3 < v20)
    {
      *(_QWORD *)(a1 + 128) = v19 + 32 * a3;
      sub_20FD30D80(a1, a4);
      return;
    }
  }
  else
  {
    sub_20FD31260((char **)(a1 + 120), a3 - v20);
  }
  sub_20FD30D80(a1, a4);
}

void sub_20FD30D80(uint64_t a1, unint64_t a2)
{
  unint64_t v4;
  BOOL v5;
  BOOL v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t i;
  _QWORD *v12;
  _QWORD *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  char *v23;
  char *v24;
  __int128 v25;
  _QWORD *v26;
  _QWORD *v27;
  void *v28;
  void *v29;
  _QWORD *v30;
  _QWORD *v31;
  void *v32;
  void *v33;

  v4 = 0xCF3CF3CF3CF3CF3DLL * ((uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 3);
  v5 = a2 >= v4;
  v6 = a2 > v4;
  v7 = a2 - v4;
  if (v6)
  {
    sub_20FD31048((char **)a1, v7);
  }
  else if (!v5)
  {
    *(_QWORD *)(a1 + 8) = *(_QWORD *)a1 + 168 * a2;
  }
  v9 = *(_QWORD *)(a1 + 24);
  v8 = *(_QWORD *)(a1 + 32);
  v10 = 0x4EC4EC4EC4EC4EC5 * ((v8 - v9) >> 7);
  if (a2 <= v10)
  {
    if (a2 < v10)
    {
      for (i = v9 + 1664 * a2; v8 != i; v8 = sub_20EB8188C(v8 - 1664))
        ;
      *(_QWORD *)(a1 + 32) = i;
    }
  }
  else
  {
    sub_20F024C2C((char **)(a1 + 24), a2 - v10);
  }
  v13 = *(_QWORD **)(a1 + 168);
  v12 = *(_QWORD **)(a1 + 176);
  v14 = 0xAAAAAAAAAAAAAAABLL * (v12 - v13);
  v15 = a2 - v14;
  if (a2 <= v14)
  {
    if (a2 < v14)
    {
      v30 = &v13[3 * a2];
      if (v12 != v30)
      {
        v31 = *(_QWORD **)(a1 + 176);
        do
        {
          v33 = (void *)*(v31 - 3);
          v31 -= 3;
          v32 = v33;
          if (v33)
          {
            *(v12 - 2) = v32;
            operator delete(v32);
          }
          v12 = v31;
        }
        while (v31 != v30);
      }
      *(_QWORD *)(a1 + 176) = v30;
    }
  }
  else
  {
    v16 = *(_QWORD *)(a1 + 184);
    if (0xAAAAAAAAAAAAAAABLL * ((v16 - (uint64_t)v12) >> 3) >= v15)
    {
      bzero(*(void **)(a1 + 176), 24 * ((24 * v15 - 24) / 0x18) + 24);
      *(_QWORD *)(a1 + 176) = &v12[3 * ((24 * v15 - 24) / 0x18) + 3];
    }
    else
    {
      if (a2 > 0xAAAAAAAAAAAAAAALL)
        sub_20E867F44();
      v17 = 0xAAAAAAAAAAAAAAABLL * ((v16 - (uint64_t)v13) >> 3);
      v18 = 2 * v17;
      if (2 * v17 <= a2)
        v18 = a2;
      if (v17 >= 0x555555555555555)
        v19 = 0xAAAAAAAAAAAAAAALL;
      else
        v19 = v18;
      if (v19 > 0xAAAAAAAAAAAAAAALL)
        sub_20E877A38();
      v20 = 24 * v19;
      v21 = (char *)operator new(24 * v19);
      v22 = &v21[8 * (v12 - v13)];
      v23 = &v21[v20];
      bzero(v22, 24 * ((24 * v15 - 24) / 0x18) + 24);
      v24 = &v22[24 * ((24 * v15 - 24) / 0x18) + 24];
      if (v12 == v13)
      {
        *(_QWORD *)(a1 + 168) = v22;
        *(_QWORD *)(a1 + 176) = v24;
        *(_QWORD *)(a1 + 184) = v23;
      }
      else
      {
        do
        {
          v25 = *(_OWORD *)(v12 - 3);
          v12 -= 3;
          *(_OWORD *)(v22 - 24) = v25;
          v22 -= 24;
          *((_QWORD *)v22 + 2) = v12[2];
          *v12 = 0;
          v12[1] = 0;
          v12[2] = 0;
        }
        while (v12 != v13);
        v12 = *(_QWORD **)(a1 + 168);
        v26 = *(_QWORD **)(a1 + 176);
        *(_QWORD *)(a1 + 168) = v22;
        *(_QWORD *)(a1 + 176) = v24;
        *(_QWORD *)(a1 + 184) = v23;
        if (v26 != v12)
        {
          v27 = v26;
          do
          {
            v29 = (void *)*(v27 - 3);
            v27 -= 3;
            v28 = v29;
            if (v29)
            {
              *(v26 - 2) = v28;
              operator delete(v28);
            }
            v26 = v27;
          }
          while (v27 != v12);
        }
      }
      if (v12)
        operator delete(v12);
    }
  }
}

void sub_20FD31048(char **a1, unint64_t a2)
{
  char *v4;
  char *v5;
  char *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  size_t v12;
  char *v13;
  char *v14;
  size_t v15;
  char *v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;

  v5 = a1[1];
  v4 = a1[2];
  if (0xCF3CF3CF3CF3CF3DLL * ((v4 - v5) >> 3) >= a2)
  {
    if (a2)
    {
      v12 = 168 * ((168 * a2 - 168) / 0xA8) + 168;
      bzero(a1[1], v12);
      v5 += v12;
    }
    a1[1] = v5;
  }
  else
  {
    v6 = *a1;
    v7 = 0xCF3CF3CF3CF3CF3DLL * ((v5 - *a1) >> 3);
    v8 = v7 + a2;
    if (v7 + a2 > 0x186186186186186)
      sub_20E867F44();
    v9 = 0xCF3CF3CF3CF3CF3DLL * ((v4 - v6) >> 3);
    if (2 * v9 > v8)
      v8 = 2 * v9;
    if (v9 >= 0xC30C30C30C30C3)
      v10 = 0x186186186186186;
    else
      v10 = v8;
    if (v10)
    {
      if (v10 > 0x186186186186186)
        sub_20E877A38();
      v11 = (char *)operator new(168 * v10);
    }
    else
    {
      v11 = 0;
    }
    v13 = &v11[168 * v7];
    v14 = &v11[168 * v10];
    v15 = 168 * ((168 * a2 - 168) / 0xA8) + 168;
    bzero(v13, v15);
    v16 = &v13[v15];
    if (v5 != v6)
    {
      do
      {
        v17 = *(_OWORD *)(v5 - 168);
        v18 = *(_OWORD *)(v5 - 152);
        *(_OWORD *)(v13 - 136) = *(_OWORD *)(v5 - 136);
        *(_OWORD *)(v13 - 152) = v18;
        *(_OWORD *)(v13 - 168) = v17;
        v19 = *(_OWORD *)(v5 - 120);
        v20 = *(_OWORD *)(v5 - 104);
        v21 = *(_OWORD *)(v5 - 88);
        *(_OWORD *)(v13 - 72) = *(_OWORD *)(v5 - 72);
        *(_OWORD *)(v13 - 88) = v21;
        *(_OWORD *)(v13 - 104) = v20;
        *(_OWORD *)(v13 - 120) = v19;
        v22 = *(_OWORD *)(v5 - 56);
        v23 = *(_OWORD *)(v5 - 40);
        v24 = *(_OWORD *)(v5 - 24);
        *((_QWORD *)v13 - 1) = *((_QWORD *)v5 - 1);
        *(_OWORD *)(v13 - 24) = v24;
        *(_OWORD *)(v13 - 40) = v23;
        *(_OWORD *)(v13 - 56) = v22;
        v13 -= 168;
        v5 -= 168;
      }
      while (v5 != v6);
      v5 = *a1;
    }
    *a1 = v13;
    a1[1] = v16;
    a1[2] = v14;
    if (v5)
      operator delete(v5);
  }
}

void sub_20FD31260(char **a1, unint64_t a2)
{
  char *v4;
  char *v5;
  char *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  size_t v14;
  char *v15;
  char *v16;
  __int128 v17;

  v5 = a1[1];
  v4 = a1[2];
  if (a2 <= (v4 - v5) >> 5)
  {
    if (a2)
    {
      v12 = 32 * a2;
      bzero(a1[1], 32 * a2);
      v5 += v12;
    }
    a1[1] = v5;
  }
  else
  {
    v6 = *a1;
    v7 = (v5 - *a1) >> 5;
    v8 = v7 + a2;
    if ((v7 + a2) >> 59)
      sub_20E867F44();
    v9 = v4 - v6;
    if (v9 >> 4 > v8)
      v8 = v9 >> 4;
    if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFE0)
      v10 = 0x7FFFFFFFFFFFFFFLL;
    else
      v10 = v8;
    if (v10)
    {
      if (v10 >> 59)
        sub_20E877A38();
      v11 = (char *)operator new(32 * v10);
    }
    else
    {
      v11 = 0;
    }
    v13 = &v11[32 * v7];
    v14 = 32 * a2;
    v15 = &v11[32 * v10];
    bzero(v13, v14);
    v16 = &v13[v14];
    if (v5 != v6)
    {
      do
      {
        v17 = *((_OWORD *)v5 - 2);
        *((_QWORD *)v13 - 2) = *((_QWORD *)v5 - 2);
        *((_OWORD *)v13 - 2) = v17;
        *((_QWORD *)v13 - 1) = *((_QWORD *)v5 - 1);
        v13 -= 32;
        v5 -= 32;
      }
      while (v5 != v6);
      v5 = *a1;
    }
    *a1 = v13;
    a1[1] = v16;
    a1[2] = v15;
    if (v5)
      operator delete(v5);
  }
}

void sub_20FD31398(uint64_t *a1, _BYTE *a2, _QWORD *a3, uint64_t a4)
{
  _BYTE *v6;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  BOOL v28;
  uint64_t v29;
  _BYTE *v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  _QWORD *v40;
  BOOL v41;
  uint64_t v42;
  _QWORD *v43;
  BOOL v44;
  uint64_t v45;

  v6 = a2;
  if (a2
    && *a2
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/BatchLeastSquaresUnsanitized/src/BundleSeeding.cpp", 248, (uint64_t)"propagation_mask == nullptr || !propagation_mask[0]", 51, (uint64_t)&unk_2102BFA83, 0, (void (*)(void **))sub_21023DDB0))
  {
    goto LABEL_22;
  }
  v8 = a3[12];
  v9 = *a1;
  v10 = a1[1];
  if (v8 == 0xCF3CF3CF3CF3CF3DLL * ((v10 - *a1) >> 3))
    goto LABEL_7;
  if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/BatchLeastSquaresUnsanitized/src/BundleSeeding.cpp", 249, (uint64_t)"inertial_measurements.NumFrames() == bundle.num_frames()", 56, (uint64_t)&unk_2102BFA83, 0, (void (*)(void **))sub_21023DDB0))
  {
LABEL_22:
    abort();
  }
  v9 = *a1;
  v10 = a1[1];
  v8 = 0xCF3CF3CF3CF3CF3DLL * ((v10 - *a1) >> 3);
LABEL_7:
  if (v8 >= 2)
  {
    if (v6)
    {
      v11 = 0;
      v12 = 1;
      do
      {
        if (v6[v12])
        {
          v16 = v9 + v11;
          v17 = *(_OWORD *)(v16 + 144);
          *(_OWORD *)(v16 + 296) = *(_OWORD *)(v16 + 128);
          *(_OWORD *)(v16 + 312) = v17;
          v18 = *(_OWORD *)(v16 + 32);
          *(_OWORD *)(v16 + 216) = *(_OWORD *)(v16 + 48);
          v19 = *(_OWORD *)(v16 + 80);
          *(_OWORD *)(v16 + 232) = *(_OWORD *)(v16 + 64);
          *(_OWORD *)(v16 + 248) = v19;
          v20 = *(_OWORD *)(v16 + 112);
          *(_OWORD *)(v16 + 264) = *(_OWORD *)(v16 + 96);
          *(_OWORD *)(v16 + 280) = v20;
          v21 = *(_OWORD *)(v16 + 16);
          *(_OWORD *)(v16 + 168) = *(_OWORD *)v16;
          *(_OWORD *)(v16 + 184) = v21;
          *(_QWORD *)(v16 + 328) = *(_QWORD *)(v16 + 160);
          *(_OWORD *)(v16 + 200) = v18;
          v22 = v12 + a3[9];
          v23 = a3[6];
          v24 = a3[5];
          v25 = (a3[7] - v23) >> 3;
          if (v12 == a3[12])
          {
            v14 = 1;
            v13 = a3[5];
          }
          else
          {
            v13 = *(_QWORD *)(v23 + 8 * (v22 % v25)) + 1;
            v14 = v13 == v24;
          }
          v15 = *(_QWORD *)(v23 + 8 * ((v22 - 1) % v25));
          v40 = a3;
          v41 = v15 == v24;
          v42 = v15;
          v43 = a3;
          v44 = v14;
          v45 = v13;
          sub_20FDBADB8(*a1 + v11 + 168, a4, (uint64_t)&v40);
          v9 = *a1;
          v10 = a1[1];
        }
        ++v12;
        v11 += 168;
      }
      while (v12 < 0xCF3CF3CF3CF3CF3DLL * ((v10 - v9) >> 3));
    }
    else
    {
      v26 = 1;
      do
      {
        v30 = &v6[v9];
        v31 = *((_OWORD *)v30 + 9);
        *(_OWORD *)(v30 + 296) = *((_OWORD *)v30 + 8);
        *(_OWORD *)(v30 + 312) = v31;
        v32 = *((_OWORD *)v30 + 2);
        *(_OWORD *)(v30 + 216) = *((_OWORD *)v30 + 3);
        v33 = *((_OWORD *)v30 + 5);
        *(_OWORD *)(v30 + 232) = *((_OWORD *)v30 + 4);
        *(_OWORD *)(v30 + 248) = v33;
        v34 = *((_OWORD *)v30 + 7);
        *(_OWORD *)(v30 + 264) = *((_OWORD *)v30 + 6);
        *(_OWORD *)(v30 + 280) = v34;
        v35 = *((_OWORD *)v30 + 1);
        *(_OWORD *)(v30 + 168) = *(_OWORD *)v30;
        *(_OWORD *)(v30 + 184) = v35;
        *((_QWORD *)v30 + 41) = *((_QWORD *)v30 + 20);
        *(_OWORD *)(v30 + 200) = v32;
        v36 = v26 + a3[9];
        v37 = a3[6];
        v38 = a3[5];
        v39 = (a3[7] - v37) >> 3;
        if (v26 == a3[12])
        {
          v28 = 1;
          v27 = a3[5];
        }
        else
        {
          v27 = *(_QWORD *)(v37 + 8 * (v36 % v39)) + 1;
          v28 = v27 == v38;
        }
        v29 = *(_QWORD *)(v37 + 8 * ((v36 - 1) % v39));
        v40 = a3;
        v41 = v29 == v38;
        v42 = v29;
        v43 = a3;
        v44 = v28;
        v45 = v27;
        v6 += 168;
        sub_20FDBADB8((uint64_t)&v6[*a1], a4, (uint64_t)&v40);
        ++v26;
        v9 = *a1;
      }
      while (v26 < 0xCF3CF3CF3CF3CF3DLL * ((a1[1] - *a1) >> 3));
    }
  }
}

BOOL sub_20FD316C8(_BOOL8 result, _QWORD *a2, _BYTE *a3, uint64_t *a4, uint64_t *a5, double a6, double a7, double a8, double a9, double a10, double a11, int64x2_t a12)
{
  uint64_t *v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int8x16_t v22;
  float64x2_t v24;
  float64x2_t v27;
  int8x16_t v29;
  int8x16_t v30;
  int64x2_t v31;
  int8x16_t v32;
  float64x2_t v33;
  float64x2_t v36;
  int8x16_t v42;
  float64x2_t v43;
  int8x16_t v44;
  float64x2_t v45;
  unint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  double v50;
  float64x2_t v51;
  float64x2_t v52;
  double v53;
  float64x2_t v55;
  double v58;
  float64x2_t v59;
  float64_t *v60;
  double v61;
  double v62;
  double v63;
  double v64;
  double v65;
  double v66;
  double v67;
  double v68;
  double v69;
  double v70;
  float64_t v71;
  double v72;
  double v73;
  float64x2_t v74;
  float64x2_t v75;
  float64x2_t v76;
  float64x2_t v77;
  float64x2_t v78;
  float64x2_t v79;
  float64x2_t v80;
  float64x2_t v81;
  float64x2_t v82;
  float64x2_t v83;
  float64x2_t v84;
  float64x2_t v85;
  float64x2_t v86;
  float64x2_t v87;
  float64x2_t v88;
  float64x2_t v89;
  float64x2_t v90;
  float64x2_t v92;
  float64x2_t v93;
  float64x2_t v94;
  float64x2_t v95;
  int64x2_t v96;
  int8x16_t v98;
  float64x2_t v99;
  double v100;
  unint64_t v101;
  float64x2_t v102;
  float64x2_t v103;
  float64x2_t v104;
  float64x2_t v105;
  float64x2_t v106;
  float64x2_t v107;
  float64x2_t v108;
  double v109;
  double v111;
  float64x2_t v112;
  float64x2_t v113;
  float64x2_t v114;
  float64x2_t v115;
  uint64_t v116;
  uint64_t v117;
  int v118;
  uint64_t v119;
  unint64_t v120;
  unint64_t v121;
  uint64_t v122;
  uint64_t v123;
  float64x2_t v124;
  float64x2_t v125;
  float64x2_t v126;
  float64x2_t v127;
  float64x2_t v128;
  float64x2_t v129;
  float64x2_t v130;
  float64x2_t v131;
  float64x2_t v132;
  float64x2_t v133;
  float64x2_t v134;
  float64x2_t v135;
  float64x2_t v136;
  float64x2_t v137;
  double v138;
  float64x2_t v139;
  float64x2_t v140;
  double v141;
  int8x16_t v142;
  double v143;

  if (!a3)
    return result;
  v15 = (uint64_t *)result;
  if (*a3)
  {
    result = sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/BatchLeastSquaresUnsanitized/src/BundleSeeding.cpp", 275, (uint64_t)"propagation_mask == nullptr || !propagation_mask[0]", 51, (uint64_t)&unk_2102BFA83, 0, (void (*)(void **))sub_21023DDB0);
    if (result)
      goto LABEL_28;
  }
  if (0xCF3CF3CF3CF3CF3DLL * ((v15[1] - *v15) >> 3) != (uint64_t)(a2[1] - *a2) >> 2)
  {
    result = sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/BatchLeastSquaresUnsanitized/src/BundleSeeding.cpp", 276, (uint64_t)"bundle.num_frames() == state_ids.size()", 39, (uint64_t)&unk_2102BFA83, 0, (void (*)(void **))sub_21023DDB0);
    if (result)
      goto LABEL_28;
  }
  v16 = *a5;
  if (*(_QWORD *)(*a5 + 16) - *(_QWORD *)(*a5 + 8) != 3328)
  {
    result = sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/BatchLeastSquaresUnsanitized/src/BundleSeeding.cpp", 280, (uint64_t)"camera_vision_models.front().NumStreams() == 2u", 47, (uint64_t)"We must be using a stereo camera in vision-only", 47, (void (*)(void **))sub_21023DDB0);
    if (result)
      goto LABEL_28;
    v16 = *a5;
  }
  v17 = *(_DWORD *)v16;
  if (*(_DWORD *)v16 < 0x10000u)
    goto LABEL_12;
  result = sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/ComputerVisionTypes/include/VIO/ComputerVisionTypes/CameraStreamId.h", 38, (uint64_t)"camera_id <= 0xffff", 19, (uint64_t)"Camera ID cannot exceeds 16 bits", 32, (void (*)(void **))sub_21023DDB0);
  if (result)
LABEL_28:
    abort();
  v16 = *a5;
LABEL_12:
  v19 = *v15;
  v18 = v15[1];
  if (0xCF3CF3CF3CF3CF3DLL * ((v18 - *v15) >> 3) >= 2)
  {
    v20 = *(_QWORD *)(v16 + 8);
    a12.i64[0] = *(_QWORD *)(v20 + 16);
    _Q0 = (int64x2_t)vextq_s8(*(int8x16_t *)v20, *(int8x16_t *)v20, 8uLL);
    v141 = *(double *)_Q0.i64;
    v142 = *(int8x16_t *)v20;
    _Q0.i64[0] = *(_QWORD *)(v20 + 40);
    v22 = *(int8x16_t *)(v20 + 24);
    _D1 = *(_QWORD *)(v20 + 64);
    v24 = *(float64x2_t *)(v20 + 48);
    _D4 = vextq_s8((int8x16_t)v24, (int8x16_t)v24, 8uLL).u64[0];
    _Q7 = (float64x2_t)vzip1q_s64(*(int64x2_t *)v20, (int64x2_t)v22);
    *(_QWORD *)&v27.f64[0] = vextq_s8((int8x16_t)_Q7, (int8x16_t)_Q7, 8uLL).u64[0];
    _Q16 = (float64x2_t)vzip2q_s64(*(int64x2_t *)v20, (int64x2_t)v22);
    v143 = *(double *)a12.i64;
    v29 = (int8x16_t)vzip1q_s64(a12, _Q0);
    v30 = vextq_s8((int8x16_t)_Q16, (int8x16_t)vdupq_laneq_s64((int64x2_t)v24, 1), 8uLL);
    v31 = vdupq_laneq_s64((int64x2_t)v30, 1);
    v32 = vextq_s8((int8x16_t)vdupq_lane_s64(*(uint64_t *)&_Q16.f64[0], 0), v30, 8uLL);
    *(_QWORD *)&v33.f64[0] = v29.i64[0];
    *(_QWORD *)&v33.f64[1] = vextq_s8(v29, v29, 8uLL).u64[0];
    _D19 = *(double *)(v20 + 88);
    _Q22 = *(float64x2_t *)(v20 + 72);
    *(_QWORD *)&_Q16.f64[1] = vextq_s8((int8x16_t)_Q16, (int8x16_t)_Q16, 8uLL).u64[0];
    v36 = (float64x2_t)vzip1q_s64((int64x2_t)_Q7, (int64x2_t)v32);
    _Q7.f64[1] = v27.f64[0];
    _Q25 = vmlsq_lane_f64(vmlsq_laneq_f64(vmulq_n_f64(_Q7, vnegq_f64(_Q22).f64[0]), _Q16, _Q22, 1), v33, _D19, 0);
    __asm
    {
      FMLS            D7, D4, V22.D[1]
      FMLS            D7, D1, V19.D[0]
    }
    v42.i64[0] = *(_QWORD *)&v27.f64[0];
    v42.i64[1] = vextq_s8(v32, v32, 8uLL).u64[0];
    v43 = (float64x2_t)vzip1q_s64((int64x2_t)v24, v31);
    v44 = vextq_s8(v42, (int8x16_t)vdupq_laneq_s64((int64x2_t)v29, 1), 8uLL);
    v139 = v36;
    v136 = vmlsq_lane_f64(vmlsq_laneq_f64(vmulq_n_f64(v36, vnegq_f64(_Q25).f64[0]), (float64x2_t)v42, _Q25, 1), v43, _Q7.f64[0], 0);
    v137 = v43;
    __asm
    {
      FMLS            D16, D0, V25.D[1]
      FMLS            D16, D1, V7.D[0]
    }
    v134 = (float64x2_t)v29.u64[0];
    *(_QWORD *)&v27.f64[1] = v44.i64[0];
    v140 = v27;
    v133 = (float64x2_t)v44.u64[1];
    v132 = (float64x2_t)(unint64_t)_D1;
    _Q16.f64[1] = 1.0;
    v135 = _Q16;
    v130 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v24.f64[0], 0);
    v131 = (float64x2_t)vdupq_lane_s64(v22.i64[0], 0);
    v45 = (float64x2_t)vdupq_lane_s64(vextq_s8(v22, v22, 8uLL).i64[0], 0);
    v128 = (float64x2_t)vdupq_lane_s64(_D4, 0);
    v129 = v45;
    v126 = (float64x2_t)vdupq_lane_s64(_D1, 0);
    v127 = (float64x2_t)vdupq_lane_s64(_Q0.i64[0], 0);
    v138 = _Q25.f64[0];
    v46 = 1;
    v124 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&_Q7.f64[0], 0);
    v125 = (float64x2_t)vdupq_laneq_s64((int64x2_t)_Q25, 1);
    do
    {
      if (a3[v46])
      {
        v118 = *(_DWORD *)(*a2 + 4 * v46);
        if (v17 >= 0x10000)
        {
          result = sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/ComputerVisionTypes/include/VIO/ComputerVisionTypes/CameraStreamId.h", 49, (uint64_t)"camera_id <= 0xffff", 19, (uint64_t)"Camera ID cannot exceeds 16 bits", 32, (void (*)(void **))sub_21023DDB0);
          if (result)
            goto LABEL_28;
        }
        v119 = a4[5];
        if (v119)
        {
          v120 = a4[3];
          v47 = *a4;
          v121 = 0xCCCCCCCCCCCCCCCDLL * ((a4[1] - *a4) >> 5);
          v122 = a4[5];
          while (1)
          {
            v48 = v120 % v121;
            v123 = v47 + 160 * (v120 % v121);
            if (v17 << 16 == *(_DWORD *)(v123 + 16) && v118 == *(_DWORD *)(v123 + 12))
              break;
            ++v120;
            if (!--v122)
              goto LABEL_14;
          }
        }
        else
        {
LABEL_14:
          result = sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/BatchLeastSquaresUnsanitized/src/BundleSeeding.cpp", 299, (uint64_t)"iter != incremental_poses_per_frame.end()", 41, (uint64_t)"Camera incremental pose must exist", 34, (void (*)(void **))sub_21023DDB0);
          if (result)
            goto LABEL_28;
          v47 = *a4;
          v48 = (a4[3] + v119) % (0xCCCCCCCCCCCCCCCDLL * ((a4[1] - *a4) >> 5));
        }
        v49 = *v15 + 168 * (v46 - 1);
        v50 = *(double *)(v49 + 160);
        v45.f64[0] = *(float64_t *)(v49 + 16);
        v51 = *(float64x2_t *)v49;
        v24.f64[0] = *(float64_t *)(v49 + 40);
        v52 = *(float64x2_t *)(v49 + 24);
        v53 = *(double *)(v49 + 64);
        _Q0 = *(float64x2_t *)(v49 + 48);
        v55.f64[0] = v45.f64[0];
        v55.f64[1] = v24.f64[0];
        _D7 = *(_QWORD *)(v49 + 152);
        __asm { FMLA            D17, D7, V0.D[1] }
        v58 = -(_D17 + v53 * v50);
        v59 = vnegq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)vzip1q_s64(*(int64x2_t *)v49, (int64x2_t)v52), *(double *)(v49 + 144)), (float64x2_t)vzip2q_s64(*(int64x2_t *)v49, (int64x2_t)v52), *(float64x2_t *)(v49 + 144), 1), v55, v50));
        v60 = (float64_t *)(v47 + 160 * v48);
        v55.f64[0] = v60[6];
        v61 = v60[7];
        v63 = v60[8];
        v62 = v60[9];
        v64 = v60[10];
        v65 = v60[11];
        v67 = v60[12];
        v66 = v60[13];
        v68 = v60[14];
        v69 = v60[15];
        v70 = v59.f64[1];
        v71 = v59.f64[0];
        v72 = v58;
        v59.f64[0] = v60[16];
        v73 = v60[17];
        v74 = vmlaq_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v139, v55.f64[0]), v140, v64), v137, v68), (float64x2_t)0, v136);
        v75 = vmlaq_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v134, v55.f64[0]), v133, v64), v132, v68), (float64x2_t)0, v135);
        v76 = vmlaq_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v139, v61), v140, v65), v137, v69), (float64x2_t)0, v136);
        v77 = vmlaq_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v134, v61), v133, v65), v132, v69), (float64x2_t)0, v135);
        v78 = vmlaq_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v139, v63), v140, v67), v137, v59.f64[0]), (float64x2_t)0, v136);
        v79 = vmlaq_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v134, v63), v133, v67), v132, v59.f64[0]), (float64x2_t)0, v135);
        v80 = vaddq_f64(v136, vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v139, v62), v140, v66), v137, v73));
        v81 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v134, v62), v133, v66), v132, v73);
        v82 = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_n_f64(v74, *(double *)v142.i64), v131, v76), v130, v78), (float64x2_t)0, v80);
        v83 = vmlaq_f64(vmulq_n_f64(v74, v141), v129, v76);
        v84 = vmlaq_f64(vmulq_n_f64(v74, v143), v127, v76);
        v85 = vmlaq_f64(vmulq_n_f64(v74, v138), v125, v76);
        v86 = vmlaq_f64(vmlaq_f64(vmulq_n_f64(v75, *(double *)v142.i64), v131, v77), v130, v79);
        v87 = vmlaq_f64(vmlaq_f64(v83, v128, v78), (float64x2_t)0, v80);
        v88 = vmlaq_f64(v84, v126, v78);
        v89 = vmlaq_f64(v85, v124, v78);
        v90 = vmlaq_f64(vmlaq_f64(vmulq_n_f64(v75, v141), v129, v77), v128, v79);
        _Q6 = vmlaq_f64(v88, (float64x2_t)0, v80);
        v92 = vaddq_f64(v80, v89);
        v93 = vmlaq_f64(vmlaq_f64(vmulq_n_f64(v75, v143), v127, v77), v126, v79);
        v94 = vmlaq_f64(vmlaq_f64(vmulq_n_f64(v75, v138), v125, v77), v124, v79);
        *(_QWORD *)&v79.f64[0] = *(_QWORD *)&v71 ^ 0x8000000000000000;
        *(_QWORD *)&v70 ^= 0x8000000000000000;
        *(_QWORD *)&v72 ^= 0x8000000000000000;
        v95 = vaddq_f64(v135, v81);
        v96 = (int64x2_t)vmlaq_f64(v86, (float64x2_t)0, v95);
        _Q20 = (int64x2_t)vmlaq_f64(v90, (float64x2_t)0, v95);
        *(_QWORD *)&v93.f64[0] = *(_OWORD *)&vmlaq_f64(v93, (float64x2_t)0, v95);
        *(_QWORD *)&v95.f64[0] = *(_OWORD *)&vaddq_f64(v95, v94);
        *(_QWORD *)&v51.f64[1] = vdupq_laneq_s64((int64x2_t)v51, 1).u64[0];
        v98 = vextq_s8((int8x16_t)v52, (int8x16_t)v24, 8uLL);
        v99 = vmlaq_f64(vmlaq_f64(vmulq_f64(v51, (float64x2_t)vdupq_n_s64(*(_QWORD *)&v71 ^ 0x8000000000000000)), (float64x2_t)vdupq_n_s64(*(unint64_t *)&v70), v52), (float64x2_t)vdupq_n_s64(*(unint64_t *)&v72), _Q0);
        v24.f64[0] = vmulq_f64(v45, v79).f64[0] + v24.f64[0] * v70 + v53 * v72;
        *(_QWORD *)&v100 = *(_QWORD *)&v95.f64[0] ^ 0x8000000000000000;
        v101 = *(_QWORD *)&v92.f64[1] ^ 0x8000000000000000;
        *(_QWORD *)&v52.f64[0] = vdupq_lane_s64(*(uint64_t *)&v52.f64[0], 0).u64[0];
        *(_QWORD *)&v52.f64[1] = v98.i64[0];
        v77.f64[0] = v45.f64[0];
        v102 = vmlaq_f64(vmlaq_f64(vmulq_f64((float64x2_t)vzip1q_s64((int64x2_t)v82, (int64x2_t)v87), (float64x2_t)vdupq_n_s64(*(_QWORD *)&v92.f64[0] ^ 0x8000000000000000)), (float64x2_t)vdupq_n_s64(*(_QWORD *)&v92.f64[1] ^ 0x8000000000000000), (float64x2_t)vzip2q_s64((int64x2_t)v82, (int64x2_t)v87)), (float64x2_t)vdupq_n_s64(*(_QWORD *)&v95.f64[0] ^ 0x8000000000000000), (float64x2_t)vzip1q_s64(v96, _Q20));
        v103 = vmlaq_n_f64(vmulq_n_f64(v51, v82.f64[0]), v52, v87.f64[0]);
        v104 = vmlaq_n_f64(vmulq_n_f64((float64x2_t)*(unint64_t *)&v77.f64[0], v82.f64[0]), (float64x2_t)v98.u64[1], v87.f64[0]);
        v105 = vmlaq_laneq_f64(vmulq_laneq_f64(v51, v82, 1), v52, v87, 1);
        v106 = vmlaq_laneq_f64(vmulq_laneq_f64((float64x2_t)*(unint64_t *)&v77.f64[0], v82, 1), (float64x2_t)v98.u64[1], v87, 1);
        v107 = vmlaq_n_f64(vmulq_n_f64(v51, *(double *)v96.i64), v52, *(double *)_Q20.i64);
        v108 = vmlaq_n_f64(vmulq_n_f64((float64x2_t)*(unint64_t *)&v77.f64[0], *(double *)v96.i64), (float64x2_t)v98.u64[1], *(double *)_Q20.i64);
        v109 = v53;
        _Q20.i64[0] = v101;
        __asm { FMLA            D1, D20, V6.D[1] }
        v111 = vmlad_n_f64(_D1, v100, v93.f64[0]);
        v112 = vmlaq_n_f64(v103, _Q0, _Q6.f64[0]);
        v113 = vmlaq_laneq_f64(v105, _Q0, _Q6, 1);
        v114 = vmlaq_n_f64(v107, _Q0, v93.f64[0]);
        v115 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v51, v102.f64[0]), v52, v102, 1), _Q0, v111);
        *(_QWORD *)&_Q0.f64[0] = *(_OWORD *)&vaddq_f64(v24, vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)*(unint64_t *)&v77.f64[0], v102.f64[0]), (float64x2_t)v98.u64[1], v102, 1), (float64x2_t)*(unint64_t *)&v109, v111));
        v24.f64[1] = 1.0;
        v45 = vmlaq_f64(v112, (float64x2_t)0, v99);
        v116 = *v15 + 168 * v46;
        *(float64x2_t *)(v116 + 144) = vaddq_f64(v99, v115);
        *(float64_t *)(v116 + 160) = _Q0.f64[0];
        v117 = *v15 + 168 * v46;
        *(_QWORD *)(v117 + 16) = *(_OWORD *)&vmlaq_f64(vmlaq_n_f64(v104, (float64x2_t)*(unint64_t *)&v109, _Q6.f64[0]), (float64x2_t)0, v24);
        *(float64x2_t *)v117 = v45;
        *(_QWORD *)(v117 + 40) = *(_OWORD *)&vmlaq_f64(vmlaq_laneq_f64(v106, (float64x2_t)*(unint64_t *)&v109, _Q6, 1), (float64x2_t)0, v24);
        *(float64x2_t *)(v117 + 24) = vmlaq_f64(v113, (float64x2_t)0, v99);
        *(_QWORD *)(v117 + 64) = *(_OWORD *)&vmlaq_f64(vmlaq_n_f64(v108, (float64x2_t)*(unint64_t *)&v109, v93.f64[0]), (float64x2_t)0, v24);
        *(float64x2_t *)(v117 + 48) = vmlaq_f64(v114, (float64x2_t)0, v99);
        v19 = *v15;
        v18 = v15[1];
      }
      v46 = (v46 + 1);
    }
    while (0xCF3CF3CF3CF3CF3DLL * ((v18 - v19) >> 3) > v46);
  }
  return result;
}

void sub_20FD31E58(double *a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  _BYTE *v19;
  void *__p;
  _BYTE *v21;
  char *v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  _BYTE *v27;
  uint64_t v28;

  v8 = *(unsigned int *)(a2 + 104);
  __p = 0;
  v21 = 0;
  v22 = 0;
  if (v8)
  {
    __p = operator new(56 * v8);
    v21 = __p;
    v22 = (char *)__p + 56 * v8;
  }
  sub_20F1C4690(&__p, (uint64_t)a1);
  v9 = *(_QWORD *)(a2 + 40);
  if (v9)
  {
    v10 = 0;
    v11 = 0;
    v12 = *(_QWORD *)(a2 + 40);
    do
    {
      v13 = v12 >> 1;
      v14 = (v12 >> 1) + v11;
      if (*(double *)(*(_QWORD *)a2
                     + 56
                     * ((v14 + *(_QWORD *)(a2 + 24))
                      % (unint64_t)(0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 3)))) <= *a1 + 0.0001)
      {
        v11 = v14 + 1;
        v10 = v14 + 1 == v9;
        v13 = v12 + ~v13;
      }
      v12 = v13;
    }
    while (v13);
  }
  else
  {
    v11 = 0;
    v10 = 1;
  }
  v25 = *(_QWORD *)(a2 + 40);
  v26 = a2;
  LOBYTE(v27) = v10;
  v28 = v11;
  v23 = a2;
  v24 = 1;
  if (v10)
    v15 = 0;
  else
    v15 = v9 - v11;
  sub_20FD32070((char **)&__p, (uint64_t)v21, (uint64_t)&v26, (uint64_t)&v23, v15);
  v16 = *a3;
  v17 = a3[1];
  v18 = __p;
  v19 = v21;
  if (!__p
    && v21
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_2102BFA83, 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v26 = 0x6DB6DB6DB6DB6DB7 * ((v19 - v18) >> 3);
  v27 = v18;
  sub_20FDBB1B0(v16 + 168 * (1022611261 * ((unint64_t)(v17 - v16) >> 3) - 1), a4, &v26);
  if (__p)
  {
    v21 = __p;
    operator delete(__p);
  }
}

void sub_20FD3204C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20FD32070(char **a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  char *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  unint64_t v26;
  __int128 v27;
  __int128 v28;
  char *v29;
  _QWORD *v30;
  uint64_t v31;
  char *v32;
  char *v33;
  unint64_t v34;
  __int128 v35;
  __int128 v36;
  char *v37;
  char *v38;
  uint64_t v39;
  char *v40;
  char *v41;
  __int128 v42;
  __int128 v43;
  char *v44;
  char *i;
  __int128 v46;
  __int128 v47;
  char *v48;
  uint64_t v49;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  __int128 v55;
  __int128 v56;
  uint64_t v57;
  unint64_t v58;
  char *v59;
  __int128 v60;
  __int128 v61;
  char *v62;
  uint64_t v63;
  __int128 v64;
  __int128 v65;
  _QWORD *v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  __int128 v70;
  __int128 v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  __int128 v76;
  __int128 v77;

  v5 = *a1;
  v6 = (a2 - (uint64_t)*a1) / 56;
  v7 = (uint64_t)&(*a1)[56 * v6];
  if (a5 < 1)
    return v7;
  v12 = (unint64_t)a1[1];
  v11 = a1[2];
  if (0x6DB6DB6DB6DB6DB7 * ((uint64_t)&v11[-v12] >> 3) >= a5)
  {
    v17 = *(_QWORD **)a3;
    v18 = *(_QWORD *)(a3 + 16);
    v19 = v18 + a5;
    v20 = *(_QWORD *)(*(_QWORD *)a3 + 40);
    v21 = v18 + a5 == v20;
    v22 = v12 - v7;
    v23 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v12 - v7) >> 3);
    if (v23 >= a5)
    {
      v24 = a1[1];
      goto LABEL_40;
    }
    v19 = v18 + v23;
    v21 = v18 + v23 == v20;
    if (*(_BYTE *)(a4 + 8))
    {
      if (v19 != v20)
      {
        v24 = a1[1];
        v25 = v18 + v23;
        do
        {
          v26 = *v17
              + 56 * ((v25 + v17[3]) % (unint64_t)(0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v17[1] - *v17) >> 3)));
          *(_QWORD *)v24 = *(_QWORD *)v26;
          v27 = *(_OWORD *)(v26 + 8);
          *((_QWORD *)v24 + 3) = *(_QWORD *)(v26 + 24);
          *(_OWORD *)(v24 + 8) = v27;
          v28 = *(_OWORD *)(v26 + 32);
          *((_QWORD *)v24 + 6) = *(_QWORD *)(v26 + 48);
          *((_OWORD *)v24 + 2) = v28;
          ++v25;
          v24 += 56;
        }
        while (v25 != v17[5]);
        goto LABEL_37;
      }
    }
    else
    {
      v49 = *(_QWORD *)(a4 + 16);
      if (v19 == v20 || v19 != v49)
      {
        v51 = v49 - 1;
        v24 = a1[1];
        v52 = v19;
        do
        {
          do
          {
            v53 = v52;
            v54 = *v17
                + 56 * ((v52 + v17[3]) % (unint64_t)(0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v17[1] - *v17) >> 3)));
            *(_QWORD *)v24 = *(_QWORD *)v54;
            v55 = *(_OWORD *)(v54 + 8);
            *((_QWORD *)v24 + 3) = *(_QWORD *)(v54 + 24);
            *(_OWORD *)(v24 + 8) = v55;
            v56 = *(_OWORD *)(v54 + 32);
            *((_QWORD *)v24 + 6) = *(_QWORD *)(v54 + 48);
            *((_OWORD *)v24 + 2) = v56;
            v52 = v53 + 1;
            v24 += 56;
          }
          while (v53 + 1 == v17[5]);
        }
        while (v51 != v53);
LABEL_37:
        a1[1] = v24;
        if (v22 < 1)
          return v7;
        goto LABEL_40;
      }
    }
    v24 = a1[1];
    a1[1] = (char *)v12;
    if (v22 < 1)
      return v7;
LABEL_40:
    v57 = v7 + 56 * a5;
    v58 = (unint64_t)&v24[-56 * a5];
    v59 = v24;
    if (v58 < v12)
    {
      v59 = v24;
      do
      {
        *(_QWORD *)v59 = *(_QWORD *)v58;
        v60 = *(_OWORD *)(v58 + 8);
        *((_QWORD *)v59 + 3) = *(_QWORD *)(v58 + 24);
        *(_OWORD *)(v59 + 8) = v60;
        v61 = *(_OWORD *)(v58 + 32);
        *((_QWORD *)v59 + 6) = *(_QWORD *)(v58 + 48);
        *((_OWORD *)v59 + 2) = v61;
        v59 += 56;
        v58 += 56;
      }
      while (v58 < v12);
    }
    a1[1] = v59;
    if (v24 != (char *)v57)
    {
      v62 = v24 - 24;
      v63 = 8 * ((uint64_t)&v24[-v57] >> 3);
      do
      {
        *((_QWORD *)v62 - 4) = *(_QWORD *)(v7 + v63 - 56);
        v64 = *(_OWORD *)(v7 + v63 - 48);
        *((_QWORD *)v62 - 1) = *(_QWORD *)(v7 + v63 - 32);
        *(_OWORD *)(v62 - 24) = v64;
        v65 = *(_OWORD *)(v7 + v63 - 24);
        *((_QWORD *)v62 + 2) = *(_QWORD *)(v7 + v63 - 8);
        *(_OWORD *)v62 = v65;
        v62 -= 56;
        v63 -= 56;
      }
      while (v63);
    }
    v66 = *(_QWORD **)a3;
    v67 = *(_QWORD *)(a3 + 16);
    if (v21)
    {
      if (!*(_BYTE *)(a3 + 8))
      {
        v68 = v7;
        do
        {
          v69 = *v66
              + 56 * ((v67 + v66[3]) % (unint64_t)(0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v66[1] - *v66) >> 3)));
          *(_QWORD *)v68 = *(_QWORD *)v69;
          v70 = *(_OWORD *)(v69 + 8);
          *(_QWORD *)(v68 + 24) = *(_QWORD *)(v69 + 24);
          *(_OWORD *)(v68 + 8) = v70;
          v71 = *(_OWORD *)(v69 + 32);
          *(_QWORD *)(v68 + 48) = *(_QWORD *)(v69 + 48);
          *(_OWORD *)(v68 + 32) = v71;
          ++v67;
          v68 += 56;
        }
        while (v67 != v66[5]);
      }
    }
    else if (*(_BYTE *)(a3 + 8) || v67 != v19)
    {
      v72 = v67 + 1;
      v73 = v7;
      do
      {
        do
        {
          v74 = v72;
          v75 = *v66
              + 56 * ((v72 + v66[3] - 1) % (unint64_t)(0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v66[1] - *v66) >> 3)));
          *(_QWORD *)v73 = *(_QWORD *)v75;
          v76 = *(_OWORD *)(v75 + 8);
          *(_QWORD *)(v73 + 24) = *(_QWORD *)(v75 + 24);
          *(_OWORD *)(v73 + 8) = v76;
          v77 = *(_OWORD *)(v75 + 32);
          *(_QWORD *)(v73 + 48) = *(_QWORD *)(v75 + 48);
          *(_OWORD *)(v73 + 32) = v77;
          v72 = v74 + 1;
          v73 += 56;
        }
        while (v74 == v66[5]);
      }
      while (v19 != v74);
    }
    return v7;
  }
  v13 = a5 + 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v12 - (_QWORD)v5) >> 3);
  if (v13 > 0x492492492492492)
    sub_20EABADD4();
  v14 = 0x6DB6DB6DB6DB6DB7 * ((v11 - v5) >> 3);
  if (2 * v14 > v13)
    v13 = 2 * v14;
  if (v14 >= 0x249249249249249)
    v15 = 0x492492492492492;
  else
    v15 = v13;
  if (v15)
  {
    if (v15 > 0x492492492492492)
      sub_20E877A38();
    v16 = (char *)operator new(56 * v15);
  }
  else
  {
    v16 = 0;
  }
  v29 = &v16[56 * v6];
  v30 = *(_QWORD **)a3;
  v31 = *(_QWORD *)(a3 + 16);
  v32 = &v29[56 * a5];
  v33 = v29;
  do
  {
    v34 = *v30 + 56 * ((v31 + v30[3]) % (unint64_t)(0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v30[1] - *v30) >> 3)));
    *(_QWORD *)v33 = *(_QWORD *)v34;
    v35 = *(_OWORD *)(v34 + 8);
    *((_QWORD *)v33 + 3) = *(_QWORD *)(v34 + 24);
    *(_OWORD *)(v33 + 8) = v35;
    v36 = *(_OWORD *)(v34 + 32);
    *((_QWORD *)v33 + 6) = *(_QWORD *)(v34 + 48);
    *((_OWORD *)v33 + 2) = v36;
    ++v31;
    v33 += 56;
  }
  while (v33 != v32);
  v37 = *a1;
  v38 = &v16[56 * v6];
  if (*a1 != (char *)v7)
  {
    v39 = 56 * v6;
    v40 = v16;
    do
    {
      v41 = &v40[v39];
      *((_QWORD *)v41 - 7) = *(_QWORD *)&v5[v39 - 56];
      v42 = *(_OWORD *)&v5[v39 - 48];
      *((_QWORD *)v41 - 4) = *(_QWORD *)&v5[v39 - 32];
      *((_OWORD *)v41 - 3) = v42;
      v43 = *(_OWORD *)&v5[v39 - 24];
      *((_QWORD *)v41 - 1) = *(_QWORD *)&v5[v39 - 8];
      *(_OWORD *)(v41 - 24) = v43;
      v5 -= 56;
      v40 -= 56;
    }
    while (&v5[v39] != v37);
    v38 = &v40[56 * v6];
  }
  v44 = &v16[56 * v15];
  for (i = a1[1]; (char *)v7 != i; v7 += 56)
  {
    *(_QWORD *)v32 = *(_QWORD *)v7;
    v46 = *(_OWORD *)(v7 + 8);
    *((_QWORD *)v32 + 3) = *(_QWORD *)(v7 + 24);
    *(_OWORD *)(v32 + 8) = v46;
    v47 = *(_OWORD *)(v7 + 32);
    *((_QWORD *)v32 + 6) = *(_QWORD *)(v7 + 48);
    *((_OWORD *)v32 + 2) = v47;
    v32 += 56;
  }
  v48 = *a1;
  *a1 = v38;
  a1[1] = v32;
  a1[2] = v44;
  if (v48)
    operator delete(v48);
  return (uint64_t)v29;
}

double sub_20FD32664(_QWORD *a1, _QWORD *a2)
{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  double v7;
  float64x2_t v8;
  float64x2_t v9;
  float64x2_t v10;
  float64x2_t v11;
  float64x2_t v12;
  const double *v31;
  double v32;
  double v34;
  double v35;
  double v36;
  double v39;
  float64x2_t v40;
  float64x2_t v43;
  double v44;
  float64_t v45;
  float64x2_t v46;
  int64x2_t v47;
  float64x2_t v48;
  double v49;
  double v50;
  float64x2x3_t v52;

  v3 = 0xCF3CF3CF3CF3CF3DLL * ((uint64_t)(a1[1] - *a1) >> 3);
  if ((_DWORD)v3)
  {
    v4 = 1022611261 * ((uint64_t)(a1[1] - *a1) >> 3);
    v5 = *a1 + 48;
    v6 = *a2 + 48;
    v7 = 0.0;
    do
    {
      v31 = (const double *)(v5 - 48);
      v52 = vld3q_f64(v31);
      v32 = *(double *)(v5 + 16);
      _Q20 = *(_OWORD *)v5;
      v34 = *(double *)(v6 - 32);
      v35 = *(double *)(v6 - 8);
      v36 = *(double *)(v6 + 16);
      v11 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v52.val[0], *(double *)(v6 - 48)), v52.val[1], *(float64x2_t *)(v6 - 48), 1), v52.val[2], v34);
      _D5 = *(_QWORD *)(v6 - 40);
      __asm { FMLA            D6, D5, V20.D[1] }
      v39 = _D6 + v32 * v34;
      v40 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v52.val[0], *(double *)(v6 - 24)), v52.val[1], *(float64x2_t *)(v6 - 24), 1), v52.val[2], v35);
      _D21 = *(_QWORD *)(v6 - 16);
      __asm { FMLA            D5, D21, V20.D[1] }
      *(double *)_Q16.i64 = _D5 + v32 * v35;
      v43 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v52.val[0], *(double *)v6), v52.val[1], *(float64x2_t *)v6, 1), v52.val[2], v36);
      v52.val[1].f64[0] = *(float64_t *)(v6 + 8);
      __asm { FMLA            D17, D18, V20.D[1] }
      v44 = v52.val[0].f64[0] + v32 * v36;
      if (v44 >= 0.0)
      {
        if (v11.f64[0] >= -v40.f64[1])
        {
          v8 = (float64x2_t)vzip1q_s64(_Q16, (int64x2_t)v43);
          *(_QWORD *)&v9.f64[0] = vdupq_laneq_s64((int64x2_t)v43, 1).u64[0];
          v9.f64[1] = v39;
          v10 = vsubq_f64(v8, v9);
          v11.f64[0] = v44 + 1.0 + v11.f64[0] + v40.f64[1];
        }
        else
        {
          v10.f64[0] = v43.f64[0] + v39;
          v10.f64[1] = *(double *)_Q16.i64 + v43.f64[1];
          v11.f64[0] = v44 + 1.0 - (v11.f64[0] + v40.f64[1]);
        }
      }
      else if (v11.f64[0] <= v40.f64[1])
      {
        v47 = (int64x2_t)vaddq_f64((float64x2_t)vdupq_laneq_s64((int64x2_t)v11, 1), v40);
        *(_QWORD *)&v48.f64[1] = _Q16.i64[0];
        v48.f64[0] = 1.0 - v44;
        v43.f64[0] = v40.f64[1] - v11.f64[0];
        v11 = vaddq_f64(v48, v43);
        v10 = (float64x2_t)vzip1q_s64(v47, (int64x2_t)v11);
      }
      else
      {
        v45 = v11.f64[0] - v40.f64[1];
        v11.f64[0] = 1.0 - v44;
        v46 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v40.f64[0], 0);
        v46.f64[0] = v45;
        v10 = vaddq_f64(v11, v46);
        v11.f64[0] = v10.f64[0];
      }
      v12 = vmulq_n_f64(v10, 0.5 / sqrt(v11.f64[0]));
      _Q16 = (int64x2_t)vsubq_f64(*(float64x2_t *)(v6 + 72), *(float64x2_t *)(v5 + 72));
      _D20 = vaddq_f64(v12, v12).f64[1];
      __asm { FMLA            D19, D20, V4.D[1] }
      _D3 = vsubq_f64(*(float64x2_t *)(v6 + 24), *(float64x2_t *)(v5 + 24)).f64[1];
      __asm { FMLA            D19, D3, V5.D[1] }
      _D3 = vsubq_f64(*(float64x2_t *)(v6 + 40), *(float64x2_t *)(v5 + 40)).f64[1];
      __asm { FMLA            D19, D3, V6.D[1] }
      _D3 = vsubq_f64(*(float64x2_t *)(v6 + 56), *(float64x2_t *)(v5 + 56)).f64[1];
      __asm { FMLA            D19, D3, V7.D[1] }
      _D3 = _Q16.i64[1];
      __asm { FMLA            D19, D3, V16.D[1] }
      _D3 = vsubq_f64(*(float64x2_t *)(v6 + 88), *(float64x2_t *)(v5 + 88)).f64[1];
      __asm { FMLA            D19, D3, V17.D[1] }
      _D3 = vsubq_f64(*(float64x2_t *)(v6 + 104), *(float64x2_t *)(v5 + 104)).f64[1];
      __asm { FMLA            D19, D3, V18.D[1] }
      v7 = v7 + _D19;
      v5 += 168;
      v6 += 168;
      --v4;
    }
    while (v4);
  }
  else
  {
    v7 = 0.0;
  }
  v49 = (double)v3;
  v50 = sqrt(v7);
  if (!(_DWORD)v3)
    v49 = 1.0;
  return v50 / v49;
}

uint64_t sub_20FD328C8(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v14;
  unsigned int v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  char *v25;
  _BOOL4 v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  BOOL v34;
  BOOL v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  __int128 v46;
  __int128 v47;
  BOOL v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  __int128 v54;
  __int128 v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v64;
  uint64_t v65;
  __int128 v66;
  uint64_t v67;
  __int128 v68;
  uint64_t v69;
  void *__p;
  char *v71;
  char *v72;

  v5 = a1;
  *(_QWORD *)(a1 + 64) = 0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  sub_20FD33090((void **)a1, *((unsigned int *)a2 + 24));
  v6 = *(_QWORD *)(a3 + 8);
  v7 = v6 - *(_QWORD *)a3;
  if (v6 != *(_QWORD *)a3)
  {
    v8 = v7 >> 2;
    if ((unint64_t)(v7 >> 2) <= 1)
      v8 = 1;
    v65 = v8;
    v9 = **(_DWORD **)a3;
    v10 = *a2 + 56 * a2[3];
    v11 = *(_QWORD *)v10;
    v68 = *(_OWORD *)(v10 + 8);
    v69 = *(_QWORD *)(v10 + 24);
    v66 = *(_OWORD *)(v10 + 32);
    v67 = *(_QWORD *)(v10 + 48);
    v12 = (char *)operator new(0x38uLL);
    v71 = v12 + 56;
    v72 = v12 + 56;
    *(_QWORD *)v12 = v11;
    *(_OWORD *)(v12 + 8) = v68;
    *((_QWORD *)v12 + 3) = v69;
    *((_OWORD *)v12 + 2) = v66;
    *((_QWORD *)v12 + 6) = v67;
    __p = v12;
    sub_20FD32E5C(v5, (uint64_t *)&__p, v9);
    if (__p)
    {
      v71 = (char *)__p;
      operator delete(__p);
    }
    if ((unint64_t)v7 >= 8)
    {
      v14 = 1;
      v64 = a3;
      do
      {
        v15 = *(_DWORD *)(*(_QWORD *)a3 + 4 * v14);
        v16 = a2[9] + v14;
        v17 = a2[6];
        v18 = a2[5];
        v19 = (a2[7] - v17) >> 3;
        v20 = *(_QWORD *)(v17 + 8 * ((v16 - 1) % v19));
        if (a2[12] == v14)
        {
          __p = 0;
          v71 = 0;
          v72 = 0;
          v21 = v20 + 1;
          v22 = v18;
          if (v20 + 1 != v18)
            goto LABEL_15;
        }
        else
        {
          v22 = *(_QWORD *)(v17 + 8 * (v16 % v19)) + 1;
          __p = 0;
          v71 = 0;
          v72 = 0;
          v21 = v20 + 1;
          v26 = v20 + 1 == v18;
          if (v22 != v18)
          {
            if (v22)
              v34 = 1;
            else
              v34 = v21 == v18;
            if (!v34 && v21 == 0)
            {
              v21 = 0;
              v22 = 0;
            }
            else
            {
              v27 = 1;
              if (v22)
                v36 = 0;
              else
                v36 = v21 == v18;
              if (!v36)
                goto LABEL_33;
              v22 = 0;
              v28 = v18;
              if (v18)
                goto LABEL_34;
LABEL_17:
              if (!v27)
              {
                if (!v26)
                {
                  v24 = 0;
                  v29 = *a2;
                  v30 = 0x6DB6DB6DB6DB6DB7 * ((a2[1] - *a2) >> 3);
                  v31 = v18 - v21;
                  v32 = v21 + a2[3];
                  do
                  {
                    v33 = v29 + 56 * (v32 % v30);
                    *(_QWORD *)v24 = *(_QWORD *)v33;
                    *(_OWORD *)(v24 + 8) = *(_OWORD *)(v33 + 8);
                    *((_QWORD *)v24 + 3) = *(_QWORD *)(v33 + 24);
                    *((_OWORD *)v24 + 2) = *(_OWORD *)(v33 + 32);
                    *((_QWORD *)v24 + 6) = *(_QWORD *)(v33 + 48);
                    v24 += 56;
                    ++v32;
                    --v31;
                  }
                  while (v31);
                  goto LABEL_57;
                }
LABEL_52:
                v23 = 0;
                v24 = 0;
                goto LABEL_58;
              }
            }
            if (!v26 && v21 == v22)
              goto LABEL_52;
            v24 = 0;
            v56 = *a2;
            v57 = 0x6DB6DB6DB6DB6DB7 * ((a2[1] - *a2) >> 3);
            v58 = ~v21 + v22;
            v59 = ~v21 + v18;
            v60 = v21 + a2[3];
            do
            {
              do
              {
                v61 = v58;
                v62 = v56 + 56 * (v60 % v57);
                *(_QWORD *)v24 = *(_QWORD *)v62;
                *(_OWORD *)(v24 + 8) = *(_OWORD *)(v62 + 8);
                *((_QWORD *)v24 + 3) = *(_QWORD *)(v62 + 24);
                *((_OWORD *)v24 + 2) = *(_OWORD *)(v62 + 32);
                *((_QWORD *)v24 + 6) = *(_QWORD *)(v62 + 48);
                v58 = v61 - 1;
                v24 += 56;
                ++v60;
                v48 = v59-- != 0;
              }
              while (!v48);
            }
            while (v61);
LABEL_57:
            v23 = 0;
LABEL_58:
            v25 = 0;
            goto LABEL_59;
          }
          a3 = v64;
          if (v21 != v18)
          {
LABEL_15:
            v27 = 0;
            v26 = 0;
            if (!v21)
            {
              v28 = -v18;
              if (!v18)
                goto LABEL_17;
LABEL_34:
              v37 = -v28;
              if ((unint64_t)-v28 >= 0x492492492492493)
                sub_20EABADD4();
              v25 = (char *)operator new(-56 * v28);
              __p = v25;
              v71 = v25;
              v72 = &v25[56 * v37];
              if (v27)
              {
                v38 = v21 != v22 || v26;
                v24 = v25;
                v5 = a1;
                if (v38 == 1)
                {
                  v39 = *a2;
                  v40 = 0x6DB6DB6DB6DB6DB7 * ((a2[1] - *a2) >> 3);
                  v41 = ~v21 + v22;
                  v42 = ~v21 + v18;
                  v43 = v21 + a2[3];
                  v24 = v25;
                  do
                  {
                    do
                    {
                      v44 = v41;
                      v45 = v39 + 56 * (v43 % v40);
                      *(_QWORD *)v24 = *(_QWORD *)v45;
                      v46 = *(_OWORD *)(v45 + 8);
                      *((_QWORD *)v24 + 3) = *(_QWORD *)(v45 + 24);
                      *(_OWORD *)(v24 + 8) = v46;
                      v47 = *(_OWORD *)(v45 + 32);
                      *((_QWORD *)v24 + 6) = *(_QWORD *)(v45 + 48);
                      *((_OWORD *)v24 + 2) = v47;
                      v41 = v44 - 1;
                      v24 += 56;
                      ++v43;
                      v48 = v42-- != 0;
                    }
                    while (!v48);
                  }
                  while (v44);
                }
              }
              else
              {
                v24 = v25;
                v5 = a1;
                if (!v26)
                {
                  v49 = *a2;
                  v50 = 0x6DB6DB6DB6DB6DB7 * ((a2[1] - *a2) >> 3);
                  v51 = v18 - v21;
                  v52 = v21 + a2[3];
                  v24 = v25;
                  do
                  {
                    v53 = v49 + 56 * (v52 % v50);
                    *(_QWORD *)v24 = *(_QWORD *)v53;
                    v54 = *(_OWORD *)(v53 + 8);
                    *((_QWORD *)v24 + 3) = *(_QWORD *)(v53 + 24);
                    *(_OWORD *)(v24 + 8) = v54;
                    v55 = *(_OWORD *)(v53 + 32);
                    *((_QWORD *)v24 + 6) = *(_QWORD *)(v53 + 48);
                    *((_OWORD *)v24 + 2) = v55;
                    v24 += 56;
                    ++v52;
                    --v51;
                  }
                  while (v51);
                }
              }
              v23 = v25;
LABEL_59:
              a3 = v64;
              goto LABEL_60;
            }
LABEL_33:
            v28 = v21 - v22;
            if (v21 != v22)
              goto LABEL_34;
            goto LABEL_17;
          }
        }
        v23 = 0;
        v24 = 0;
        v25 = 0;
LABEL_60:
        v71 = &v25[v24 - v23];
        sub_20FD32E5C(v5, (uint64_t *)&__p, v15);
        if (__p)
        {
          v71 = (char *)__p;
          operator delete(__p);
        }
        ++v14;
      }
      while (v14 != v65);
    }
  }
  return v5;
}

void sub_20FD32DCC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
  void *v22;
  void *v23;

  if (__p)
  {
    operator delete(__p);
    v22 = *(void **)(a10 + 48);
    if (!v22)
    {
LABEL_3:
      v23 = *(void **)a10;
      if (!*(_QWORD *)a10)
        goto LABEL_4;
      goto LABEL_7;
    }
  }
  else
  {
    v22 = *(void **)(a10 + 48);
    if (!v22)
      goto LABEL_3;
  }
  *(_QWORD *)(a10 + 56) = v22;
  operator delete(v22);
  v23 = *(void **)a10;
  if (!*(_QWORD *)a10)
LABEL_4:
    _Unwind_Resume(exception_object);
LABEL_7:
  *(_QWORD *)(a10 + 8) = v23;
  operator delete(v23);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20FD32E5C(uint64_t result, uint64_t *a2, unsigned int a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;

  v3 = *(_QWORD *)result;
  v4 = *(_QWORD *)(result + 8);
  v5 = v4 - *(_QWORD *)result;
  if (v4 != *(_QWORD *)result)
  {
    v7 = *a2;
    v6 = a2[1];
    if (*a2 != v6)
    {
      v8 = v5 >> 5;
      v9 = *(_QWORD *)(result + 40);
      if (!v9)
        goto LABEL_7;
      v10 = *(_QWORD *)(result + 32);
      if (!v10)
        v10 = v5 >> 5;
      if (*(_DWORD *)(v3 + 32 * v10 - 32) < a3)
      {
LABEL_7:
        if (v9 == v8)
        {
          v11 = *(_QWORD *)(result + 24);
          v12 = *(_QWORD *)(v3 + 32 * v11 + 16);
          if (v5 != 32)
          {
            v13 = v8 - 1;
            v14 = v11 + 1;
            do
            {
              *(_QWORD *)(v3 + 32 * (v14 % v8) + 24) -= v12;
              ++v14;
              --v13;
            }
            while (v13);
          }
          if (v12)
          {
            v15 = *(_QWORD *)(result + 48);
            v16 = *(_QWORD *)(result + 56);
            if (v15 + 56 * v12 == v16)
            {
              v18 = *(_QWORD *)(result + 48);
            }
            else
            {
              v17 = 56 * v12;
              v18 = *(_QWORD *)(result + 48);
              do
              {
                *(_QWORD *)v15 = *(_QWORD *)(v15 + v17);
                v19 = *(_OWORD *)(v15 + v17 + 8);
                *(_QWORD *)(v15 + 24) = *(_QWORD *)(v15 + v17 + 24);
                *(_OWORD *)(v15 + 8) = v19;
                v20 = *(_OWORD *)(v15 + v17 + 32);
                *(_QWORD *)(v15 + 48) = *(_QWORD *)(v15 + v17 + 48);
                *(_OWORD *)(v15 + 32) = v20;
                v15 += 56;
                v18 += 56;
              }
              while (v15 + v17 != v16);
              v11 = *(_QWORD *)(result + 24);
              v3 = *(_QWORD *)result;
            }
            *(_QWORD *)(result + 56) = v18;
          }
          v21 = v3 + 32 * v11;
          *(_DWORD *)v21 = 0;
          *(_QWORD *)(v21 + 16) = 0;
          *(_QWORD *)(v21 + 24) = 0;
          *(_QWORD *)(v21 + 8) = 0xBFF0000000000000;
          v4 = *(_QWORD *)(result + 8);
          v22 = (v4 - v3) >> 5;
          v23 = *(_QWORD *)(result + 24) + 1;
          if (v23 < v22)
            v22 = 0;
          *(_QWORD *)(result + 24) = v23 - v22;
          v9 = *(_QWORD *)(result + 40) - 1;
          *(_QWORD *)(result + 40) = v9;
          v7 = *a2;
          v6 = a2[1];
          v3 = *(_QWORD *)result;
        }
        v24 = *(_QWORD *)(v6 - 56);
        v25 = 0x6DB6DB6DB6DB6DB7 * ((v6 - v7) >> 3);
        if (v9)
        {
          v26 = *(_QWORD *)(result + 32);
          v27 = (unint64_t)(v4 - v3) >> 5;
          if (v26)
            v27 = *(_QWORD *)(result + 32);
          v28 = *(_QWORD *)(v3 + 32 * v27 - 8) + v25;
        }
        else
        {
          v28 = v25 - 1;
          v26 = *(_QWORD *)(result + 32);
        }
        v29 = v3 + 32 * v26;
        *(_DWORD *)v29 = a3;
        *(_QWORD *)(v29 + 8) = v24;
        *(_QWORD *)(v29 + 16) = v25;
        *(_QWORD *)(v29 + 24) = v28;
        v30 = (uint64_t)(*(_QWORD *)(result + 8) - *(_QWORD *)result) >> 5;
        v31 = *(_QWORD *)(result + 40);
        v32 = *(_QWORD *)(result + 32) + 1;
        if (v32 >= v30)
          v33 = (uint64_t)(*(_QWORD *)(result + 8) - *(_QWORD *)result) >> 5;
        else
          v33 = 0;
        *(_QWORD *)(result + 32) = v32 - v33;
        if (v31 == v30)
        {
          v34 = *(_QWORD *)(result + 24) + 1;
          if (v34 < v30)
            v30 = 0;
          *(_QWORD *)(result + 24) = v34 - v30;
        }
        else
        {
          *(_QWORD *)(result + 40) = v31 + 1;
        }
        return sub_20F09E0A8((char **)(result + 48), *(_QWORD *)(result + 56), *a2, a2[1], 0x6DB6DB6DB6DB6DB7 * ((a2[1] - *a2) >> 3));
      }
    }
  }
  return result;
}

void sub_20FD33090(void **a1, unint64_t a2)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _OWORD *v15;
  uint64_t v16;
  char *v17;
  __int128 v18;
  BOOL v19;
  char v20;
  unint64_t v21;
  char *v22;
  unint64_t v23;
  _OWORD *v24;
  char *v25;
  __int128 v26;
  void *v27;

  if (a2 != ((_BYTE *)a1[1] - (_BYTE *)*a1) >> 5)
  {
    if (a2)
    {
      if (a2 >> 59)
        sub_20E867F44();
      v4 = operator new(32 * a2);
      v5 = v4;
      v6 = &v4[4 * a2];
      v7 = v4;
      do
      {
        *v7 = 0;
        v7[1] = 0xBFF0000000000000;
        v7[2] = 0;
        v7[3] = 0;
        v7 += 4;
      }
      while (v7 != v6);
      v8 = (unint64_t)a1[5];
      if (v8 >= a2)
        v9 = a2;
      else
        v9 = (unint64_t)a1[5];
      if (v8 <= a2)
      {
        if (v8)
        {
          v21 = (unint64_t)a1[3];
          v22 = (char *)*a1;
          v23 = ((_BYTE *)a1[1] - (_BYTE *)*a1) >> 5;
          v24 = v4;
          do
          {
            v25 = &v22[32 * (v21 % v23)];
            v26 = *((_OWORD *)v25 + 1);
            *v24 = *(_OWORD *)v25;
            v24[1] = v26;
            v24 += 2;
            ++v21;
            --v8;
          }
          while (v8);
        }
      }
      else
      {
        v10 = (char *)*a1;
        v11 = (unint64_t)a1[3];
        v12 = ((_BYTE *)a1[1] - (_BYTE *)*a1) >> 5;
        v13 = v9 - 1;
        v14 = v8 - 1;
        v15 = v4;
        do
        {
          v16 = v13;
          v17 = &v10[32 * (v11 % v12)];
          v18 = *((_OWORD *)v17 + 1);
          v19 = v14-- != 0;
          *v15 = *(_OWORD *)v17;
          v15[1] = v18;
          v15 += 2;
          v20 = v19;
          v13 = v16 - 1;
          ++v11;
        }
        while (v16 || (v20 & 1) == 0);
      }
      v27 = *a1;
      if (*a1)
      {
        a1[1] = v27;
        operator delete(v27);
        *a1 = 0;
        a1[1] = 0;
        a1[2] = 0;
      }
      *a1 = v5;
      a1[1] = v6;
      a1[2] = v6;
      a1[3] = 0;
      a1[4] = (void *)(v9 % a2);
      a1[5] = (void *)v9;
    }
    else
    {
      a1[1] = *a1;
      a1[4] = 0;
      a1[5] = 0;
      a1[3] = 0;
    }
  }
}

void sub_20FD3320C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t *sub_20FD33228(uint64_t *result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  if (!result[5])
    return result;
  v1 = result[4];
  if (v1)
  {
    v2 = *(_QWORD *)(*result + 32 * v1 - 16);
    if (8 * v2 == v2 << 6)
      goto LABEL_4;
LABEL_7:
    v4 = result[7];
    v5 = v4 - 56 * v2;
    v6 = 56 * v2;
    if (v5 + v6 != v4)
    {
      v7 = 8 * (v6 >> 3);
      do
      {
        *(_QWORD *)v5 = *(_QWORD *)(v5 + v7);
        v8 = *(_QWORD *)(v5 + v7 + 24);
        *(_OWORD *)(v5 + 8) = *(_OWORD *)(v5 + v7 + 8);
        *(_QWORD *)(v5 + 24) = v8;
        v9 = *(_QWORD *)(v5 + v7 + 48);
        *(_OWORD *)(v5 + 32) = *(_OWORD *)(v5 + v7 + 32);
        *(_QWORD *)(v5 + 48) = v9;
        v5 += 56;
      }
      while (v5 + v7 != v4);
      v1 = result[4];
    }
    result[7] = v5;
    if (v1)
      goto LABEL_5;
LABEL_12:
    v3 = *result;
    v1 = (result[1] - *result) >> 5;
    goto LABEL_13;
  }
  v2 = *(_QWORD *)(*result + 32 * ((result[1] - *result) >> 5) - 16);
  if (8 * v2 != v2 << 6)
    goto LABEL_7;
LABEL_4:
  if (!v1)
    goto LABEL_12;
LABEL_5:
  v3 = *result;
LABEL_13:
  v10 = v3 + 32 * v1;
  *(_DWORD *)(v10 - 32) = 0;
  *(_QWORD *)(v10 - 16) = 0;
  *(_QWORD *)(v10 - 8) = 0;
  *(_QWORD *)(v10 - 24) = 0xBFF0000000000000;
  v11 = result[4];
  if (!v11)
    v11 = (result[1] - v3) >> 5;
  v12 = result[5] - 1;
  result[4] = v11 - 1;
  result[5] = v12;
  return result;
}

double *sub_20FD33354(_QWORD *a1, double a2)
{
  uint64_t v4;
  uint64_t v5;
  double *result;
  uint64_t v7;
  unint64_t i;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  double *v12;
  unint64_t v13;
  unint64_t v14;
  double *v15;
  double *v16;
  double v17;

  v4 = a1[6];
  v5 = a1[7];
  if (v4 == v5)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/BatchLeastSquaresUnsanitized/src/IMUSampleBuffer.cpp", 455, (uint64_t)"!imu_samples_buffer_.empty()", 28, (uint64_t)"Error the IMU sample buffer cannoty be empty!\n", 46, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v4 = a1[6];
    v5 = a1[7];
  }
  result = (double *)(v5 - 56);
  v7 = a1[5];
  if (v7)
  {
    for (i = a1[3]; ; ++i)
    {
      v9 = *a1 + 32 * (i % ((uint64_t)(a1[1] - *a1) >> 5));
      if (*(double *)(v9 + 8) >= a2)
        break;
      if (!--v7)
        return result;
    }
    v10 = *(_QWORD *)(v9 + 24);
    v11 = v10 - *(_QWORD *)(v9 + 16) + 1;
    result = (double *)(v4 + 56 * v10);
    if (v10 != v11)
    {
      v12 = (double *)(v4 + 56 * v11);
      v13 = 0x6DB6DB6DB6DB6DB7 * (result - v12);
      result = v12;
      do
      {
        v14 = v13 >> 1;
        v15 = &result[7 * (v13 >> 1)];
        v17 = *v15;
        v16 = v15 + 7;
        v13 += ~(v13 >> 1);
        if (v17 < a2)
          result = v16;
        else
          v13 = v14;
      }
      while (v13);
    }
  }
  return result;
}

void sub_20FD33470(_QWORD *a1, uint64_t a2, double a3, double a4)
{
  double *v8;
  double *v9;
  uint64_t v10;
  unint64_t v11;
  void *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  double v20;
  uint64_t v21;
  double *v22;
  float64x2_t v23;
  __int128 v24;
  float64x2_t v25;
  uint64_t v26;
  float64x2_t v27;
  uint64_t v28;
  double v29;
  double v30;
  double v31;
  double v32;
  uint64_t v33;
  double *v34;
  float64x2_t v35;
  __int128 v36;
  float64x2_t v37;
  uint64_t v38;
  float64x2_t v39;
  uint64_t v40;
  double v41;
  double v42;
  double v43;
  double v44;
  float64x2_t v45;
  _OWORD v46[2];

  *(_QWORD *)(a2 + 8) = *(_QWORD *)a2;
  if (a1[5])
  {
    v8 = sub_20FD33354(a1, a3);
    v9 = sub_20FD33354(a1, a4);
    v10 = 0x6DB6DB6DB6DB6DB7 * (v9 - v8);
    v11 = v10 + 3;
    v12 = *(void **)a2;
    if (0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(a2 + 16) - *(_QWORD *)a2) >> 3) < (unint64_t)(v10 + 3))
    {
      if (v11 >= 0x492492492492493)
        sub_20EABADD4();
      v13 = *(_QWORD *)(a2 + 8);
      v14 = (char *)operator new((char *)v9 - (char *)v8 + 168);
      v15 = &v14[v13 - (_QWORD)v12];
      v16 = v15;
      if ((void *)v13 != v12)
      {
        v16 = &v14[v13 - (_QWORD)v12];
        do
        {
          v17 = *(_QWORD *)(v13 - 56);
          v13 -= 56;
          *((_QWORD *)v16 - 7) = v17;
          v16 -= 56;
          v18 = *(_OWORD *)(v13 + 8);
          *((_QWORD *)v16 + 3) = *(_QWORD *)(v13 + 24);
          *(_OWORD *)(v16 + 8) = v18;
          v19 = *(_OWORD *)(v13 + 32);
          *((_QWORD *)v16 + 6) = *(_QWORD *)(v13 + 48);
          *((_OWORD *)v16 + 2) = v19;
        }
        while ((void *)v13 != v12);
      }
      *(_QWORD *)a2 = v16;
      *(_QWORD *)(a2 + 8) = v15;
      *(_QWORD *)(a2 + 16) = &v14[56 * v11];
      if (v12)
        operator delete(v12);
    }
    v20 = *v8;
    if (*v8 <= a3)
    {
      if (*v9 <= a3)
      {
        v25 = *(float64x2_t *)(v9 + 1);
        *(double *)v46 = v9[3];
        v45 = v25;
        v26 = *((_QWORD *)v9 + 6);
        *(_OWORD *)((char *)v46 + 8) = *((_OWORD *)v9 + 2);
        *((_QWORD *)&v46[1] + 1) = v26;
        v44 = a3;
        sub_20F1C4690((void **)a2, (uint64_t)&v44);
      }
    }
    else
    {
      v22 = (double *)a1[6];
      v21 = a1[7];
      v45 = 0u;
      memset(v46, 0, sizeof(v46));
      if (v22 == v8)
      {
        v27 = *(float64x2_t *)(v8 + 1);
        *(double *)v46 = v8[3];
        v45 = v27;
        v28 = *((_QWORD *)v8 + 6);
        *(_OWORD *)((char *)v46 + 8) = *((_OWORD *)v8 + 2);
        *((_QWORD *)&v46[1] + 1) = v28;
      }
      else if ((double *)(v21 - 56) == v8 && v20 <= a3)
      {
        v23 = *(float64x2_t *)(v21 - 48);
        *(_QWORD *)&v46[0] = *(_QWORD *)(v21 - 32);
        v45 = v23;
        v24 = *(_OWORD *)(v21 - 24);
        *((_QWORD *)&v46[1] + 1) = *(_QWORD *)(v21 - 8);
        *(_OWORD *)((char *)v46 + 8) = v24;
      }
      else
      {
        v29 = *(v8 - 7);
        v30 = v20 - v29;
        v31 = 0.0;
        if (v30 != 0.0)
          v31 = (a3 - v29) / v30;
        v46[1] = vaddq_f64(*(float64x2_t *)(v8 - 2), vmulq_n_f64(vsubq_f64(*(float64x2_t *)(v8 + 5), *(float64x2_t *)(v8 - 2)), v31));
        v45 = vaddq_f64(*(float64x2_t *)(v8 - 6), vmulq_n_f64(vsubq_f64(*(float64x2_t *)(v8 + 1), *(float64x2_t *)(v8 - 6)), v31));
        v46[0] = vaddq_f64(*(float64x2_t *)(v8 - 4), vmulq_n_f64(vsubq_f64(*(float64x2_t *)(v8 + 3), *(float64x2_t *)(v8 - 4)), v31));
      }
      v44 = a3;
      sub_20F1C4690((void **)a2, (uint64_t)&v44);
    }
    sub_20F09E0A8((char **)a2, *(_QWORD *)(a2 + 8), (uint64_t)v8, (uint64_t)v9, v10);
    v32 = *v9;
    if (*v9 <= a4)
    {
      if (*v9 < a4 && v32 > a3)
        sub_20F1C4690((void **)a2, (uint64_t)v9);
      v37 = *(float64x2_t *)(v9 + 1);
      *(double *)v46 = v9[3];
      v45 = v37;
      v38 = *((_QWORD *)v9 + 6);
      *(_OWORD *)((char *)v46 + 8) = *((_OWORD *)v9 + 2);
      *((_QWORD *)&v46[1] + 1) = v38;
      v44 = a4;
      sub_20F1C4690((void **)a2, (uint64_t)&v44);
    }
    else
    {
      v34 = (double *)a1[6];
      v33 = a1[7];
      v45 = 0u;
      memset(v46, 0, sizeof(v46));
      if (v34 == v9)
      {
        v39 = *(float64x2_t *)(v9 + 1);
        *(double *)v46 = v9[3];
        v45 = v39;
        v40 = *((_QWORD *)v9 + 6);
        *(_OWORD *)((char *)v46 + 8) = *((_OWORD *)v9 + 2);
        *((_QWORD *)&v46[1] + 1) = v40;
      }
      else if ((double *)(v33 - 56) == v9 && v32 <= a4)
      {
        v35 = *(float64x2_t *)(v33 - 48);
        *(_QWORD *)&v46[0] = *(_QWORD *)(v33 - 32);
        v45 = v35;
        v36 = *(_OWORD *)(v33 - 24);
        *((_QWORD *)&v46[1] + 1) = *(_QWORD *)(v33 - 8);
        *(_OWORD *)((char *)v46 + 8) = v36;
      }
      else
      {
        v41 = *(v9 - 7);
        v42 = v32 - v41;
        v43 = 0.0;
        if (v42 != 0.0)
          v43 = (a4 - v41) / v42;
        v46[1] = vaddq_f64(*(float64x2_t *)(v9 - 2), vmulq_n_f64(vsubq_f64(*(float64x2_t *)(v9 + 5), *(float64x2_t *)(v9 - 2)), v43));
        v45 = vaddq_f64(*(float64x2_t *)(v9 - 6), vmulq_n_f64(vsubq_f64(*(float64x2_t *)(v9 + 1), *(float64x2_t *)(v9 - 6)), v43));
        v46[0] = vaddq_f64(*(float64x2_t *)(v9 - 4), vmulq_n_f64(vsubq_f64(*(float64x2_t *)(v9 + 3), *(float64x2_t *)(v9 - 4)), v43));
      }
      v44 = a4;
      sub_20F1C4690((void **)a2, (uint64_t)&v44);
    }
  }
}

void sub_20FD3384C(char **a1, _QWORD *a2)
{
  unint64_t v4;
  char *v5;
  uint64_t v6;
  char *v7;
  unint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  char *v20;
  char *v21;
  __int128 v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char *v27;
  char *v28;
  char *v29;
  char *v30;
  char *v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;

  *((_OWORD *)a1 + 1) = 0u;
  *((_OWORD *)a1 + 2) = 0u;
  *(_OWORD *)a1 = 0u;
  v4 = a2[5];
  if (v4)
  {
    if (v4 >> 59)
      sub_20E867F44();
    v5 = (char *)operator new(32 * v4);
    v6 = 0;
    *a1 = v5;
    a1[1] = v5;
    a1[2] = &v5[32 * v4];
    while (1)
    {
      v8 = *a2 + 32 * ((a2[3] + v6) % (unint64_t)((uint64_t)(a2[1] - *a2) >> 5));
      v9 = *(_DWORD *)v8;
      v10 = *(_QWORD *)(v8 + 8);
      v12 = *(_QWORD *)(v8 + 16);
      v11 = *(_QWORD *)(v8 + 24);
      v13 = (unint64_t)a1[2];
      if ((unint64_t)v5 < v13)
      {
        *(_DWORD *)v5 = v9;
        *((_QWORD *)v5 + 1) = v10;
        v7 = v5 + 32;
        *((_QWORD *)v5 + 2) = v12;
        *((_QWORD *)v5 + 3) = v11;
      }
      else
      {
        v14 = *a1;
        v15 = (v5 - *a1) >> 5;
        v16 = v15 + 1;
        if ((unint64_t)(v15 + 1) >> 59)
          sub_20E867F44();
        v17 = v13 - (_QWORD)v14;
        if (v17 >> 4 > v16)
          v16 = v17 >> 4;
        if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFE0)
          v18 = 0x7FFFFFFFFFFFFFFLL;
        else
          v18 = v16;
        if (v18)
        {
          if (v18 >> 59)
            sub_20E877A38();
          v19 = (char *)operator new(32 * v18);
        }
        else
        {
          v19 = 0;
        }
        v20 = &v19[32 * v15];
        *(_DWORD *)v20 = v9;
        *((_QWORD *)v20 + 1) = v10;
        v21 = &v19[32 * v18];
        *((_QWORD *)v20 + 2) = v12;
        *((_QWORD *)v20 + 3) = v11;
        v7 = v20 + 32;
        if (v5 == v14)
        {
          *a1 = v20;
          a1[1] = v7;
          a1[2] = v21;
        }
        else
        {
          do
          {
            v22 = *((_OWORD *)v5 - 1);
            *((_OWORD *)v20 - 2) = *((_OWORD *)v5 - 2);
            *((_OWORD *)v20 - 1) = v22;
            v20 -= 32;
            v5 -= 32;
          }
          while (v5 != v14);
          v5 = *a1;
          *a1 = v20;
          a1[1] = v7;
          a1[2] = v21;
          if (!v5)
            goto LABEL_5;
        }
        operator delete(v5);
      }
LABEL_5:
      a1[1] = v7;
      ++v6;
      v5 = v7;
      if (v6 == a2[5])
      {
        v23 = a1[5];
        v4 = (unint64_t)a1[3];
        goto LABEL_25;
      }
    }
  }
  v23 = 0;
LABEL_25:
  v24 = a2[6];
  v25 = a2[7];
  v26 = 0x6DB6DB6DB6DB6DB7 * ((v25 - v24) >> 3);
  if (0x6DB6DB6DB6DB6DB7 * ((uint64_t)&v23[-v4] >> 3) < v26)
  {
    if (v26 >= 0x492492492492493)
      sub_20E92CED8();
    v27 = a1[4];
    v28 = (char *)operator new(v25 - v24);
    v29 = &v28[56 * ((uint64_t)&v27[-v4] / 56)];
    v30 = v29;
    if (v27 != (char *)v4)
    {
      v31 = &v28[56 * ((uint64_t)&v27[-v4] / 56)];
      do
      {
        v32 = *(_OWORD *)(v27 - 56);
        v33 = *(_OWORD *)(v27 - 40);
        v34 = *(_OWORD *)(v27 - 24);
        v30 = v31 - 56;
        *((_QWORD *)v31 - 1) = *((_QWORD *)v27 - 1);
        *(_OWORD *)(v31 - 24) = v34;
        *(_OWORD *)(v31 - 40) = v33;
        *(_OWORD *)(v31 - 56) = v32;
        v27 -= 56;
        v31 -= 56;
      }
      while (v27 != (char *)v4);
    }
    a1[3] = v30;
    a1[4] = v29;
    a1[5] = &v28[8 * ((v25 - v24) >> 3)];
    if (v4)
    {
      operator delete((void *)v4);
      v24 = a2[6];
      v25 = a2[7];
    }
  }
  if (v24 != v25)
  {
    v35 = a1[4];
    do
    {
      if (v35 < a1[5])
      {
        *(_QWORD *)v35 = *(_QWORD *)v24;
        v36 = *(_QWORD *)(v24 + 24);
        *(_OWORD *)(v35 + 8) = *(_OWORD *)(v24 + 8);
        *((_QWORD *)v35 + 3) = v36;
        v37 = *(_QWORD *)(v24 + 48);
        *((_OWORD *)v35 + 2) = *(_OWORD *)(v24 + 32);
        *((_QWORD *)v35 + 6) = v37;
        v35 += 56;
        a1[4] = v35;
      }
      else
      {
        v35 = sub_20FCDFDE4((void **)a1 + 3, (_QWORD *)v24, v24 + 8, v24 + 32);
      }
      a1[4] = v35;
      v24 += 56;
    }
    while (v24 != v25);
  }
}

void sub_20FD33B6C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20E9AA8C8(v1);
  _Unwind_Resume(a1);
}

void sub_20FD33B80(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20E9AA8C8(v1);
  _Unwind_Resume(a1);
}

void sub_20FD33B94(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20E9AA8C8(v1);
  _Unwind_Resume(a1);
}

void sub_20FD33BA8(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20E9AA8C8(v1);
  _Unwind_Resume(a1);
}

void sub_20FD33BBC(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  void *__p[2];
  uint64_t v4;
  void *v5[3];
  void *v6;
  void *v7;

  sub_20FD3384C((char **)v5, a1);
  __p[0] = 0;
  __p[1] = 0;
  v4 = 0;
  sub_20FD33C58((uint64_t)v5, (uint64_t)__p, a2);
  if (SHIBYTE(v4) < 0)
    operator delete(__p[0]);
  if (v6)
  {
    v7 = v6;
    operator delete(v6);
  }
  if (v5[0])
  {
    v5[1] = v5[0];
    operator delete(v5[0]);
  }
}

void sub_20FD33C34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
    operator delete(__p);
  sub_20E9AA8C8((uint64_t)&a16);
  _Unwind_Resume(a1);
}

uint64_t sub_20FD33C58@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  std::ios_base *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  size_t v15;
  void **p_dst;
  unint64_t v17;
  const void *v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  size_t v22;
  char *v23;
  void **v24;
  uint64_t v25;
  void *v26;
  void **__dst;
  size_t v29;
  int64_t v30;
  _QWORD v31[3];
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  const void *v35;
  uint64_t v36;
  const void *v37;
  unint64_t v38;
  __int128 __p;
  __int128 v40;
  int v41;
  uint64_t v42[20];

  v6 = MEMORY[0x24BEDB870];
  v7 = MEMORY[0x24BEDB870] + 64;
  v8 = (uint64_t *)MEMORY[0x24BEDB800];
  v9 = *(_QWORD *)(MEMORY[0x24BEDB800] + 8);
  v10 = *(_QWORD *)(MEMORY[0x24BEDB800] + 16);
  v42[0] = MEMORY[0x24BEDB870] + 64;
  v33 = v9;
  *(uint64_t *)((char *)&v33 + *(_QWORD *)(v9 - 24)) = v10;
  v11 = (std::ios_base *)((char *)&v33 + *(_QWORD *)(v33 - 24));
  std::ios_base::init(v11, &v34);
  v11[1].__vftable = 0;
  v11[1].__fmtflags_ = -1;
  v33 = v6 + 24;
  v42[0] = v7;
  std::streambuf::basic_streambuf();
  v12 = MEMORY[0x24BEDB848];
  v34 = MEMORY[0x24BEDB848] + 16;
  __p = 0u;
  v40 = 0u;
  v41 = 16;
  v31[1] = 1;
  v13 = operator new();
  *(_QWORD *)v13 = &v33;
  *(_QWORD *)(v13 + 8) = &v33;
  *(_BYTE *)(v13 + 16) = 0;
  *(_BYTE *)(v13 + 40) = 0;
  *(_BYTE *)(v13 + 48) = 0;
  *(_BYTE *)(v13 + 72) = 0;
  *(_QWORD *)(v13 + 88) = 0;
  *(_QWORD *)(v13 + 96) = 0;
  *(_QWORD *)(v13 + 80) = 0;
  v31[0] = &off_24C9B4468;
  v31[2] = &unk_24C9B45B8;
  v32 = v13;
  v14 = *(unsigned __int8 *)(a2 + 23);
  if ((v14 & 0x80u) != 0)
    v14 = *(_QWORD *)(a2 + 8);
  if (v14)
    sub_20E9F5254((uint64_t)&__dst, v13 + 8, a2);
  sub_20FD34048((uint64_t)v31, a1);
  if ((v41 & 0x10) != 0)
  {
    v17 = *((_QWORD *)&v40 + 1);
    if (*((_QWORD *)&v40 + 1) < v38)
    {
      *((_QWORD *)&v40 + 1) = v38;
      v17 = v38;
    }
    v18 = v37;
    v15 = v17 - (_QWORD)v37;
    if (v17 - (unint64_t)v37 >= 0x7FFFFFFFFFFFFFF8)
      goto LABEL_41;
  }
  else
  {
    if ((v41 & 8) == 0)
    {
      v15 = 0;
      HIBYTE(v30) = 0;
      p_dst = (void **)&__dst;
      goto LABEL_18;
    }
    v18 = v35;
    v15 = v36 - (_QWORD)v35;
    if ((unint64_t)(v36 - (_QWORD)v35) >= 0x7FFFFFFFFFFFFFF8)
LABEL_41:
      sub_20E860B7C();
  }
  if (v15 >= 0x17)
  {
    v19 = (v15 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v15 | 7) != 0x17)
      v19 = v15 | 7;
    v20 = v19 + 1;
    p_dst = (void **)operator new(v19 + 1);
    v29 = v15;
    v30 = v20 | 0x8000000000000000;
    __dst = p_dst;
    goto LABEL_17;
  }
  HIBYTE(v30) = v15;
  p_dst = (void **)&__dst;
  if (v15)
LABEL_17:
    memmove(p_dst, v18, v15);
LABEL_18:
  *((_BYTE *)p_dst + v15) = 0;
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v21 = SHIBYTE(v30);
  if (v30 >= 0)
    v22 = HIBYTE(v30);
  else
    v22 = v29;
  if (v22)
  {
    if ((v22 & 0x8000000000000000) != 0)
      sub_20E867F44();
    v23 = (char *)operator new(v22);
    bzero(v23, v22);
    *a3 = v23;
    a3[1] = &v23[v22];
    a3[2] = &v23[v22];
    if (v21 >= 0)
      v24 = (void **)&__dst;
    else
      v24 = __dst;
    memmove(v23, v24, v22);
  }
  if (v21 < 0)
    operator delete(__dst);
  v25 = v32;
  if (v32)
  {
    v26 = *(void **)(v32 + 80);
    if (v26)
    {
      *(_QWORD *)(v32 + 88) = v26;
      operator delete(v26);
    }
    if (*(_BYTE *)(v25 + 72))
      free(*(void **)(v25 + 56));
    if (*(_BYTE *)(v25 + 40))
      free(*(void **)(v25 + 24));
    MEMORY[0x212BC6398](v25, 0x1030C408C1A3048);
  }
  v33 = *v8;
  *(uint64_t *)((char *)&v33 + *(_QWORD *)(v33 - 24)) = v8[3];
  v34 = v12 + 16;
  if (SBYTE7(v40) < 0)
    operator delete((void *)__p);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x212BC6290](v42);
}

void sub_20FD33FA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  sub_20E9977BC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FD33FBC(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::ostream::~ostream();
  MEMORY[0x212BC6290](v1);
  _Unwind_Resume(a1);
}

void sub_20FD34048(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  const void *v5;
  int64_t v6;
  unint64_t *v7;
  char *v8;
  _BYTE *v9;
  _BYTE *v10;
  int64_t v11;
  unint64_t *v12;
  unint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t *v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t *v26;
  char *v27;
  char *v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  size_t v35;
  size_t v36;
  BOOL v37;
  char *v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  size_t v46;
  size_t v47;
  char *v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  size_t v54;
  char *v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  size_t v61;
  char *v62;
  char *v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  size_t v72;
  char *v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  size_t v79;
  std::bad_alloc *exception;
  std::bad_alloc *v81;
  unint64_t *__p;
  unint64_t *v83;
  unint64_t *v84;
  unint64_t *v85;
  char v86;
  _BYTE v87[9];
  uint64_t v88;

  v88 = *MEMORY[0x24BDAC8D0];
  __p = 0;
  v83 = 0;
  v5 = *(const void **)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v6 = v4 - *(_QWORD *)a2;
  if (v4 != *(_QWORD *)a2)
  {
    if (v6 < 0)
      sub_20E867F44();
    v7 = (unint64_t *)operator new(v4 - *(_QWORD *)a2);
    v8 = (char *)&v7[4 * (v6 >> 5)];
    __p = v7;
    memcpy(v7, v5, v6);
    v83 = (unint64_t *)v8;
  }
  v84 = 0;
  v85 = 0;
  v10 = *(_BYTE **)(a2 + 24);
  v9 = *(_BYTE **)(a2 + 32);
  v11 = v9 - v10;
  if (v9 != v10)
  {
    if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * (v11 >> 3)) >= 0x492492492492493)
      sub_20E92CED8();
    v12 = (unint64_t *)operator new(v11);
    v13 = &v12[v11 >> 3];
    v84 = v12;
    memcpy(v12, v10, v11);
    v85 = v13;
  }
  v14 = *(_QWORD *)(a1 + 24);
  if (*(_BYTE *)(v14 + 40))
  {
    *(_QWORD *)v87 = v14 + 16;
    sub_20E9F3D4C((uint64_t **)v87, 1u);
  }
  else
  {
    v87[0] = 1;
    std::ostream::write();
  }
  v15 = *(_QWORD *)(a1 + 24);
  if (*(_BYTE *)(v15 + 40))
  {
    *(_QWORD *)v87 = v15 + 16;
    sub_20E9F472C((uint64_t **)v87, ((char *)v83 - (char *)__p) >> 5);
  }
  else
  {
    sub_20E9F4A34();
  }
  if (v83 != __p)
  {
    v16 = __p + 2;
    v17 = 32 * (((char *)v83 - (char *)__p) >> 5);
    do
    {
      v18 = *(_QWORD *)(a1 + 24);
      if (*(_BYTE *)(v18 + 40))
      {
        *(_QWORD *)v87 = v18 + 16;
        sub_20E9F3D4C((uint64_t **)v87, *((_DWORD *)v16 - 4));
      }
      else
      {
        sub_20E9F3FC0((uint64_t)v87, v18 + 8);
      }
      v19 = v16 - 1;
      v20 = *(_QWORD *)(a1 + 24);
      if (*(_BYTE *)(v20 + 40))
      {
        *(_QWORD *)v87 = v20 + 16;
        sub_20E9F4C08((uint64_t)&v86, (uint64_t **)v87, v19);
      }
      else
      {
        v21 = *v19;
        v87[0] = -53;
        *(_QWORD *)&v87[1] = bswap64(v21);
        std::ostream::write();
      }
      v22 = *(_QWORD *)(a1 + 24);
      if (*(_BYTE *)(v22 + 40))
      {
        *(_QWORD *)v87 = v22 + 16;
        sub_20E9F472C((uint64_t **)v87, *v16);
      }
      else
      {
        sub_20E9F4A34();
      }
      v23 = *(_QWORD *)(a1 + 24);
      if (*(_BYTE *)(v23 + 40))
      {
        *(_QWORD *)v87 = v23 + 16;
        sub_20E9F472C((uint64_t **)v87, v16[1]);
      }
      else
      {
        sub_20E9F4A34();
      }
      v16 += 4;
      v17 -= 32;
    }
    while (v17);
  }
  v24 = *(_QWORD *)(a1 + 24);
  if (*(_BYTE *)(v24 + 40))
  {
    *(_QWORD *)v87 = v24 + 16;
    sub_20E9F3D4C((uint64_t **)v87, 1u);
  }
  else
  {
    v87[0] = 1;
    std::ostream::write();
  }
  v25 = *(_QWORD *)(a1 + 24);
  if (*(_BYTE *)(v25 + 40))
  {
    *(_QWORD *)v87 = v25 + 16;
    sub_20E9F472C((uint64_t **)v87, 0x6DB6DB6DB6DB6DB7 * (v85 - v84));
  }
  else
  {
    sub_20E9F4A34();
  }
  v26 = v84;
  if (v85 != v84)
  {
    while (1)
    {
      v29 = *(_QWORD *)(a1 + 24);
      if (*(_BYTE *)(v29 + 40))
      {
        *(_QWORD *)v87 = v29 + 16;
        sub_20E9F4C08((uint64_t)&v86, (uint64_t **)v87, v26);
      }
      else
      {
        v30 = *v26;
        v87[0] = -53;
        *(_QWORD *)&v87[1] = bswap64(v30);
        std::ostream::write();
      }
      v31 = *(_QWORD *)(a1 + 24);
      if (*(_BYTE *)(v31 + 40))
      {
        v32 = v26[1];
        v33 = *(_QWORD *)(v31 + 32);
        v34 = *(_QWORD *)(v31 + 16);
        if ((unint64_t)(v33 - v34) >= 9)
        {
          v38 = *(char **)(v31 + 24);
        }
        else
        {
          if (v33)
            v35 = 2 * v33;
          else
            v35 = 0x2000;
          v36 = v34 + 9;
          while (v35 < v36)
          {
            v37 = (uint64_t)v35 <= 0;
            v35 *= 2;
            if (v37)
            {
              v35 = v36;
              break;
            }
          }
          v38 = (char *)malloc_type_realloc(*(void **)(v31 + 24), v35, 0xAD6A59EEuLL);
          if (!v38)
          {
LABEL_119:
            exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
            v81 = std::bad_alloc::bad_alloc(exception);
            __cxa_throw(v81, MEMORY[0x24BEDB758], MEMORY[0x24BEDB670]);
          }
          *(_QWORD *)(v31 + 24) = v38;
          *(_QWORD *)(v31 + 32) = v35;
          v34 = *(_QWORD *)(v31 + 16);
        }
        v49 = &v38[v34];
        *v49 = -53;
        *(_QWORD *)(v49 + 1) = bswap64(v32);
        v50 = *(_QWORD *)(v31 + 16);
        v51 = v50 + 9;
        *(_QWORD *)(v31 + 16) = v50 + 9;
        v52 = v26[2];
        v53 = *(_QWORD *)(v31 + 32);
        if ((unint64_t)(v53 - (v50 + 9)) >= 9)
        {
          v55 = *(char **)(v31 + 24);
        }
        else
        {
          if (v53)
            v54 = 2 * v53;
          else
            v54 = 0x2000;
          while (v54 < v50 + 18)
          {
            v37 = (uint64_t)v54 <= 0;
            v54 *= 2;
            if (v37)
            {
              v54 = v50 + 18;
              break;
            }
          }
          v55 = (char *)malloc_type_realloc(*(void **)(v31 + 24), v54, 0xAD6A59EEuLL);
          if (!v55)
            goto LABEL_119;
          *(_QWORD *)(v31 + 24) = v55;
          *(_QWORD *)(v31 + 32) = v54;
          v51 = *(_QWORD *)(v31 + 16);
        }
        v56 = &v55[v51];
        *v56 = -53;
        *(_QWORD *)(v56 + 1) = bswap64(v52);
        v57 = *(_QWORD *)(v31 + 16);
        v58 = v57 + 9;
        *(_QWORD *)(v31 + 16) = v57 + 9;
        v59 = v26[3];
        v60 = *(_QWORD *)(v31 + 32);
        if ((unint64_t)(v60 - (v57 + 9)) >= 9)
        {
          v62 = *(char **)(v31 + 24);
        }
        else
        {
          if (v60)
            v61 = 2 * v60;
          else
            v61 = 0x2000;
          while (v61 < v57 + 18)
          {
            v37 = (uint64_t)v61 <= 0;
            v61 *= 2;
            if (v37)
            {
              v61 = v57 + 18;
              break;
            }
          }
          v62 = (char *)malloc_type_realloc(*(void **)(v31 + 24), v61, 0xAD6A59EEuLL);
          if (!v62)
            goto LABEL_119;
          *(_QWORD *)(v31 + 24) = v62;
          *(_QWORD *)(v31 + 32) = v61;
          v58 = *(_QWORD *)(v31 + 16);
        }
        v63 = &v62[v58];
        *v63 = -53;
        *(_QWORD *)(v63 + 1) = bswap64(v59);
        *(_QWORD *)(v31 + 16) += 9;
        v42 = *(_QWORD *)(a1 + 24);
        if (*(_BYTE *)(v42 + 40))
        {
LABEL_55:
          v43 = v26[4];
          v44 = *(_QWORD *)(v42 + 32);
          v45 = *(_QWORD *)(v42 + 16);
          if ((unint64_t)(v44 - v45) >= 9)
          {
            v48 = *(char **)(v42 + 24);
          }
          else
          {
            if (v44)
              v46 = 2 * v44;
            else
              v46 = 0x2000;
            v47 = v45 + 9;
            while (v46 < v47)
            {
              v37 = (uint64_t)v46 <= 0;
              v46 *= 2;
              if (v37)
              {
                v46 = v47;
                break;
              }
            }
            v48 = (char *)malloc_type_realloc(*(void **)(v42 + 24), v46, 0xAD6A59EEuLL);
            if (!v48)
              goto LABEL_119;
            *(_QWORD *)(v42 + 24) = v48;
            *(_QWORD *)(v42 + 32) = v46;
            v45 = *(_QWORD *)(v42 + 16);
          }
          v67 = &v48[v45];
          *v67 = -53;
          *(_QWORD *)(v67 + 1) = bswap64(v43);
          v68 = *(_QWORD *)(v42 + 16);
          v69 = v68 + 9;
          *(_QWORD *)(v42 + 16) = v68 + 9;
          v70 = v26[5];
          v71 = *(_QWORD *)(v42 + 32);
          if ((unint64_t)(v71 - (v68 + 9)) >= 9)
          {
            v73 = *(char **)(v42 + 24);
          }
          else
          {
            if (v71)
              v72 = 2 * v71;
            else
              v72 = 0x2000;
            while (v72 < v68 + 18)
            {
              v37 = (uint64_t)v72 <= 0;
              v72 *= 2;
              if (v37)
              {
                v72 = v68 + 18;
                break;
              }
            }
            v73 = (char *)malloc_type_realloc(*(void **)(v42 + 24), v72, 0xAD6A59EEuLL);
            if (!v73)
              goto LABEL_119;
            *(_QWORD *)(v42 + 24) = v73;
            *(_QWORD *)(v42 + 32) = v72;
            v69 = *(_QWORD *)(v42 + 16);
          }
          v74 = &v73[v69];
          *v74 = -53;
          *(_QWORD *)(v74 + 1) = bswap64(v70);
          v75 = *(_QWORD *)(v42 + 16);
          v76 = v75 + 9;
          *(_QWORD *)(v42 + 16) = v75 + 9;
          v77 = v26[6];
          v78 = *(_QWORD *)(v42 + 32);
          if ((unint64_t)(v78 - (v75 + 9)) >= 9)
          {
            v27 = *(char **)(v42 + 24);
          }
          else
          {
            if (v78)
              v79 = 2 * v78;
            else
              v79 = 0x2000;
            while (v79 < v75 + 18)
            {
              v37 = (uint64_t)v79 <= 0;
              v79 *= 2;
              if (v37)
              {
                v79 = v75 + 18;
                break;
              }
            }
            v27 = (char *)malloc_type_realloc(*(void **)(v42 + 24), v79, 0xAD6A59EEuLL);
            if (!v27)
              goto LABEL_119;
            *(_QWORD *)(v42 + 24) = v27;
            *(_QWORD *)(v42 + 32) = v79;
            v76 = *(_QWORD *)(v42 + 16);
          }
          v28 = &v27[v76];
          *v28 = -53;
          *(_QWORD *)(v28 + 1) = bswap64(v77);
          *(_QWORD *)(v42 + 16) += 9;
          goto LABEL_38;
        }
      }
      else
      {
        v39 = v26[1];
        v87[0] = -53;
        *(_QWORD *)&v87[1] = bswap64(v39);
        std::ostream::write();
        v40 = v26[2];
        v87[0] = -53;
        *(_QWORD *)&v87[1] = bswap64(v40);
        std::ostream::write();
        v41 = v26[3];
        v87[0] = -53;
        *(_QWORD *)&v87[1] = bswap64(v41);
        std::ostream::write();
        v42 = *(_QWORD *)(a1 + 24);
        if (*(_BYTE *)(v42 + 40))
          goto LABEL_55;
      }
      v64 = v26[4];
      v87[0] = -53;
      *(_QWORD *)&v87[1] = bswap64(v64);
      std::ostream::write();
      v65 = v26[5];
      v87[0] = -53;
      *(_QWORD *)&v87[1] = bswap64(v65);
      std::ostream::write();
      v66 = v26[6];
      v87[0] = -53;
      *(_QWORD *)&v87[1] = bswap64(v66);
      std::ostream::write();
LABEL_38:
      v26 += 7;
      if (v26 == v85)
      {
        v26 = v84;
        break;
      }
    }
  }
  if (v26)
    operator delete(v26);
  if (__p)
    operator delete(__p);
}

void sub_20FD34830(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  if (a9)
    operator delete(a9);
  _Unwind_Resume(exception_object);
}

void sub_20FD34864(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E9AA8C8((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20FD34878(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E9AA8C8((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20FD3488C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E9AA8C8((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t *sub_20FD348A0@<X0>(double *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *__p;
  __int128 v10;

  __p = operator new(0x19uLL);
  v10 = xmmword_2102DAFD0;
  strcpy((char *)__p, "Triangulator parameters");
  sub_20E8B30B4(a2, (__int128 *)&__p, 180, 160);
  if (SHIBYTE(v10) < 0)
    operator delete(__p);
  __p = (void *)nullsub_1(a2);
  v4 = sub_20EA9DB90(a1 + 2);
  sub_20E8B2F9C((uint64_t *)&__p, "TriangulatorConfig.min_feature_depth", v4, "Minimal feature depth to mark as a successful triangulation. Unit: meter.");
  __p = (void *)nullsub_1(a2);
  v5 = sub_20EA9DB90(a1 + 3);
  sub_20E8B2F9C((uint64_t *)&__p, "TriangulatorConfig.max_feature_depth", v5, "Maximal feature depth to mark as a successful triangulation. Unit: meter.");
  __p = (void *)nullsub_1(a2);
  v6 = sub_20EA9DB90(a1 + 4);
  sub_20E8B2F9C((uint64_t *)&__p, "TriangulatorConfig.min_vergence_angle_cos_to_check_depth_limits", v6, "Minimal cosine of vergence angle to check above two feature depth limits, effectively below the corresponding vergence angle.");
  __p = (void *)nullsub_1(a2);
  v7 = sub_20EA9DB90(a1 + 5);
  return sub_20E8B2F9C((uint64_t *)&__p, "TriangulatorConfig.min_depth_prior_info_to_enable_anchor_camera_only_triangulation", v7, "Minimum depth prior info required to enable anchor camera only triangulation.");
}

void sub_20FD349E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;

  sub_20E869298(v15);
  _Unwind_Resume(a1);
}

uint64_t sub_20FD34A2C(float64x2_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, float64x2_t *a5, uint64_t a6, float64x2_t *a7, float64x2_t *a8, float64x2_t a9, double a10, float64x2_t a11, double a12, float64x2_t a13, uint64_t a14, float64x2_t *a15, uint64_t a16, int a17)
{
  int8x16_t v17;
  int8x16_t v18;
  int8x16_t v19;
  double v20;
  double v21;
  double v23;
  float64x2_t v25;
  float64x2_t v26;
  double v34;
  double v35;
  unsigned int v41;
  double v43;
  char v44;
  float64x2_t v48;
  double *v51;
  double v52;
  float64_t v53;
  double v54;
  double v56;
  double v57;
  double v58;
  double v59;
  double v61;
  double v62;
  float64x2_t v63;
  unint64_t v64;
  double v65;
  float64x2_t v66;
  float64x2_t v67;
  double v68;
  double v70;
  float64x2_t v72;
  double v73;
  float64x2_t v77;
  double v78;
  float64x2_t v79;
  double v80;
  double v81;
  double v82;
  double v83;
  double v84;
  double v85;
  double v86;
  double v87;
  double v88;
  double v89;
  double v90;
  double v91;
  double v92;
  double v93;
  double v94;
  float64x2_t v96;
  float64x2_t v101;
  float64x2_t v104;
  double v106;
  float64x2_t v107;
  int8x16_t v110;
  int8x16_t v111;
  float64x2_t v112;
  float64x2_t v115;
  float64x2_t v116;
  float64x2_t v117;
  float64x2_t v118;
  float64x2_t v119;
  float64x2_t v121;
  float64x2_t v122;
  float64x2_t v123;
  float64x2_t v132;
  float64x2_t v134;
  float64x2_t v135;
  double v136;
  float64x2_t v137;
  double v138;
  float64x2_t v139;
  double v140;
  float64x2_t v141;
  double v142;
  double v143;
  double v144;
  int8x16_t v145;
  int8x16_t v146;
  float64x2_t v147;
  float64x2_t v148;
  float64x2_t v149;
  int8x16_t v150;
  int8x16_t v151;
  float64_t v152;
  float64x2_t v153;
  float64x2_t v154;
  float64x2_t v155;
  float64x2_t v156;
  float64x2_t v157;
  float64x2_t v158;
  double v159;
  float64x2_t v160;
  double v161;
  float64x2_t v162;
  double v163;
  float64x2_t v164;
  float64x2_t v165;
  float64x2_t v166;
  uint64_t v167;

  v20 = a9.f64[0];
  v167 = *MEMORY[0x24BDAC8D0];
  v21 = *(double *)(a6 + 64);
  _Q21 = *(float64x2_t *)(a6 + 48);
  a9.f64[0] = a7[1].f64[0];
  a11.f64[0] = a8[1].f64[0];
  v17.i64[0] = *(_QWORD *)(a14 + 16);
  v18.i64[0] = *(_QWORD *)(a14 + 40);
  v19.i64[0] = *(_QWORD *)(a14 + 64);
  a13.f64[0] = a15[1].f64[0];
  *(_QWORD *)&v23 = *(_OWORD *)&vsubq_f64(a11, a9);
  _Q1 = vsubq_f64(*a8, *a7);
  v147 = *(float64x2_t *)(a6 + 24);
  v148 = *(float64x2_t *)a6;
  v152 = *(double *)(a6 + 40);
  v25.f64[0] = *(float64_t *)(a6 + 16);
  v25.f64[1] = v152;
  v26 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)vzip1q_s64(*(int64x2_t *)a6, (int64x2_t)v147), _Q1.f64[0]), (float64x2_t)vzip2q_s64(*(int64x2_t *)a6, (int64x2_t)v147), _Q1, 1), v25, v23);
  _Q2 = vmulq_f64(_Q21, _Q1);
  _Q1.f64[0] = _Q1.f64[1];
  v149 = _Q21;
  v150 = v18;
  __asm { FMLA            D2, D1, V21.D[1] }
  _Q2.f64[0] = vmlad_n_f64(_Q2.f64[0], v21, v23);
  v155 = v26;
  v156 = *(float64x2_t *)(a14 + 24);
  _Q0 = vsubq_f64(v26, *a15);
  v153 = *(float64x2_t *)(a14 + 48);
  v154 = *(float64x2_t *)a14;
  v151 = v17;
  *(_QWORD *)&_Q1.f64[0] = v17.i64[0];
  *(_QWORD *)&_Q1.f64[1] = v18.i64[0];
  v145 = (int8x16_t)_Q2;
  v146 = v19;
  *(_QWORD *)&_Q2.f64[0] = *(_OWORD *)&vsubq_f64(_Q2, a13);
  _Q5 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)vzip1q_s64(*(int64x2_t *)a14, (int64x2_t)v156), _Q0.f64[0]), (float64x2_t)vzip2q_s64(*(int64x2_t *)a14, (int64x2_t)v156), _Q0, 1), _Q1, _Q2.f64[0]);
  _Q0.f64[0] = _Q0.f64[1];
  __asm { FMLA            D1, D0, V16.D[1] }
  v34 = vmlad_n_f64(_Q1.f64[0], *(double *)v19.i64, _Q2.f64[0]);
  v162 = _Q5;
  v163 = v34;
  v35 = v34 * v34;
  if (v34 * v34 <= 0.0001)
    return 0;
  v41 = *(_DWORD *)(a16 + 992);
  if (v41 == -1)
  {
    v139 = _Q5;
    v142 = v34;
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Util/include/VIO/Util/Variant.h", 255, (uint64_t)"!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v41 = *(_DWORD *)(a16 + 992);
    _Q5 = v139;
    v34 = v142;
    _D0 = v139.f64[1];
    if (v41 <= 7)
    {
LABEL_4:
      if (v41 > 3)
      {
        if (v41 > 5)
        {
          if (v41 == 6)
          {
            if (v34 == 0.0)
              v52 = 1.0;
            else
              v52 = 1.0 / v34;
            v53 = _Q5.f64[0] * v52;
            v54 = _D0 * v52;
            v166.f64[0] = _Q5.f64[0] * v52;
            v166.f64[1] = _D0 * v52;
            sub_20EB2837C(&v157, v164.f64, &v166, (double *)(a16 + 168), (float64x2_t *)(a16 + 192), (double *)(a16 + 208));
            v158.f64[0] = v52 * v164.f64[0];
            v158.f64[1] = v52 * v164.f64[1];
            v159 = v52 * (-(v164.f64[0] * v53) - v54 * v164.f64[1]);
            v160.f64[0] = v52 * v165.f64[0];
            v160.f64[1] = v52 * v165.f64[1];
            v161 = v52 * (-(v165.f64[0] * v53) - v54 * v165.f64[1]);
            goto LABEL_47;
          }
          v44 = sub_20EB3345C(a16, &v157, (uint64_t)&v158, &v162, 0);
          goto LABEL_46;
        }
        if (v41 == 5)
        {
          v44 = sub_20EB29218(v157.f64, (uint64_t)&v158, &v162, (int64x2_t *)(a16 + 168));
          goto LABEL_46;
        }
      }
      else
      {
        if (v41 <= 1)
        {
          if (!v41)
          {
            sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Geometry/include/VIO/Geometry/LensModel.h", 1745, (uint64_t)"", 0, (uint64_t)"Empty variant lens model invoked.", 33, (void (*)(void **))sub_21023DDB0);
            abort();
          }
          if (v34 >= 0.00000001)
          {
            v43 = 1.0 / v34;
            v157 = vmulq_n_f64(_Q5, v43);
            v158 = (float64x2_t)*(unint64_t *)&v43;
            v160.f64[0] = 0.0;
            v159 = v43 * -(_Q5.f64[0] * v43);
            v160.f64[1] = v43;
            v161 = v43 * -(_D0 * v43);
            goto LABEL_47;
          }
          return 0;
        }
        if (v41 == 2)
        {
          v51 = (double *)(a16 + 168);
          if (*(_DWORD *)(a16 + 212))
            v44 = sub_20FA1E060(&v157, (uint64_t)&v158, &v162, v51, (float64x2_t *)(a16 + 192));
          else
            v44 = sub_20F0BA0C8(&v157, (uint64_t)&v158, &v162, v51);
          goto LABEL_46;
        }
      }
      __asm { FMLA            D2, D0, V5.D[1] }
      if (_D2 >= 0.00000001)
      {
        v56 = v35 + _D2;
        v57 = sqrt(_D2);
        v140 = _D2;
        v143 = v34;
        v58 = atan2(v57, v34);
        v164.f64[0] = 0.0;
        v59 = sub_20F0BA1B0((int64x2_t *)(a16 + 168), v164.f64, v58);
LABEL_43:
        v61 = v59 / v57;
        _Q5 = v162;
        v63 = vmulq_n_f64(v162, (v143 * (v164.f64[0] / v56) - v61) / v140);
        v62 = -(v164.f64[0] / v56);
        v64 = vextq_s8((int8x16_t)v63, (int8x16_t)v63, 8uLL).u64[0];
        goto LABEL_44;
      }
      goto LABEL_38;
    }
  }
  else
  {
    _D0 = _Q5.f64[1];
    if (v41 <= 7)
      goto LABEL_4;
  }
  if (v41 > 0xB)
  {
    if (v41 <= 0xD)
    {
      if (v41 != 13)
        return 0;
      if (v34 < 0.00000001)
        return 0;
      v166 = vdivq_f64(_Q5, (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v34, 0));
      if (!sub_20EB295B8(&v157, &v164, 0, (uint64_t)&v166, (double *)(a16 + 168), (*(double *)a16 + *(double *)(a16 + 32)) * 0.5))return 0;
      _D0 = -v162.f64[1] / (v163 * v163);
      _V3.D[1] = v164.f64[1];
      _V4.D[1] = v165.f64[1];
      v48.f64[0] = 0.0;
      v48.f64[1] = 1.0 / v163;
      __asm { FMLA            D7, D0, V3.D[1] }
      v159 = _D7;
      v158 = vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)COERCE_UNSIGNED_INT64(1.0 / v163), v164.f64[0]), v48, v164, 1);
      __asm { FMLA            D2, D0, V4.D[1] }
      v161 = _D2;
      v160 = vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)COERCE_UNSIGNED_INT64(1.0 / v163), v165.f64[0]), v48, v165, 1);
      goto LABEL_47;
    }
    if (v41 == 14)
      v44 = sub_20EB2498C(&v157, (uint64_t)&v158, 0, (uint64_t)&v162, (double *)(a16 + 168), (*(double *)a16 + *(double *)(a16 + 32)) * 0.5);
    else
      v44 = sub_20EB3F050(a16, &v157, (uint64_t)&v158, &v162, 0);
  }
  else
  {
    if (v41 <= 9)
    {
      if (v41 == 9)
      {
        v44 = sub_20EB372E0(a16, &v157, (uint64_t)&v158, &v162, 0);
        goto LABEL_46;
      }
      __asm { FMLA            D2, D0, V5.D[1] }
      if (_D2 >= 0.00000001)
      {
        v56 = v35 + _D2;
        v57 = sqrt(_D2);
        v140 = _D2;
        v143 = v34;
        v65 = atan2(v57, v34);
        v164.f64[0] = 0.0;
        v59 = sub_20F0BA21C((double *)(a16 + 168), v164.f64, v65);
        goto LABEL_43;
      }
LABEL_38:
      v61 = 1.0 / v34;
      v62 = -(v61 * v61);
      v63.f64[0] = 0.0;
      v64 = 0;
LABEL_44:
      v157 = vmulq_n_f64(_Q5, v61);
      *(_QWORD *)&v63.f64[1] = v64;
      v66 = vmulq_n_f64(v63, _Q5.f64[0]);
      v67 = vmulq_laneq_f64(v63, _Q5, 1);
      v158.f64[1] = v66.f64[1];
      v160.f64[0] = v67.f64[0];
      v159 = v62 * _Q5.f64[0];
      v158.f64[0] = v61 + v66.f64[0];
      v160.f64[1] = v61 + v67.f64[1];
      v161 = vmuld_lane_f64(v62, _Q5, 1);
      goto LABEL_47;
    }
    if (v41 == 10)
      v44 = sub_20EB2450C(&v157, (uint64_t)&v158, 0, (uint64_t)&v162, (double *)(a16 + 168), (*(double *)a16 + *(double *)(a16 + 32)) * 0.5);
    else
      v44 = sub_20EB3AF98(a16, &v157, (uint64_t)&v158, &v162, 0);
  }
LABEL_46:
  if ((v44 & 1) == 0)
    return 0;
LABEL_47:
  v68 = v159;
  _Q11 = v158;
  v70 = v161;
  _Q30 = v160;
  v72 = vsubq_f64(v157, *a5);
  v73 = 1.0 / v20;
  if (a17 == 2)
  {
    v79 = vmulq_f64(v72, v72);
    v80 = vaddvq_f64(v79);
    v81 = v73 * v73;
    v82 = v73 * v73 * v80;
    if (v82 >= 0.00000001)
    {
      v137 = v158;
      v138 = v159;
      v83 = v79.f64[1];
      v84 = sqrt(v80);
      v141 = v160;
      v144 = v161;
      v135 = v72;
      v136 = v79.f64[0];
      v85 = log1p(v82);
      v68 = v138;
      _Q30 = v141;
      v70 = v144;
      v86 = sqrt(v85);
      v87 = v86 / v84;
      *a1 = vmulq_n_f64(v135, v86 / v84);
      *(_QWORD *)&v88 = *(_OWORD *)&vmulq_laneq_f64(v135, v135, 1);
      v89 = v84 * v86;
      v90 = 1.0 / v81;
      if (v81 == 0.0)
        v90 = 1.0;
      v91 = (v90 + v80) * v89;
      if (v91 == 0.0)
        v92 = 1.0;
      else
        v92 = 1.0 / v91;
      v93 = v92 - v87 / v80;
      _Q0.f64[0] = v87 + v136 * v93;
      _Q1.f64[0] = v93 * v88;
      v94 = v83 * v93;
      _Q11 = v137;
      _Q0.f64[1] = _Q1.f64[0];
      _Q1.f64[1] = v87 + v94;
      goto LABEL_63;
    }
    *a1 = vmulq_n_f64(v72, v73);
    _Q0.f64[1] = 0.0;
LABEL_56:
    _Q1.f64[0] = 0.0;
    _Q1.f64[1] = v73;
    _Q0.f64[0] = v73;
    goto LABEL_63;
  }
  if (a17 != 1)
  {
    if (a17)
    {
      sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/BatchLeastSquaresUnsanitized/src/VisionJacobian.cpp", 828, (uint64_t)"", 0, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0);
      abort();
    }
    _Q0.f64[1] = 0.0;
    _Q1.f64[0] = 0.0;
    _Q1.f64[1] = 1.0 / v20;
    _Q0.f64[0] = 1.0 / v20;
    *a1 = vmulq_n_f64(v72, v73);
    goto LABEL_63;
  }
  _Q0 = 0uLL;
  v77 = vmulq_n_f64(v72, v73);
  *a1 = v77;
  v78 = vaddvq_f64(vmulq_f64(v77, v77));
  if (v78 <= 100.0)
    goto LABEL_56;
  *a1 = vmulq_n_f64(v77, sqrt(100.0 / v78));
  _Q1 = 0uLL;
LABEL_63:
  _Q24 = v154;
  v96 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v148, v154.f64[0]), v147, v154, 1), v149, *(double *)v151.i64);
  _D16 = v152;
  _V28.D[1] = v153.f64[1];
  __asm { FMLA            D3, D16, V24.D[1] }
  _V26.D[1] = v156.f64[1];
  v101 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v148, v156.f64[0]), v147, v156, 1), v149, *(double *)v150.i64);
  __asm { FMLA            D5, D16, V26.D[1] }
  _D5 = _D5 + v21 * *(double *)v150.i64;
  v104 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v148, v153.f64[0]), v147, v153, 1), v149, *(double *)v146.i64);
  __asm { FMLA            D7, D16, V28.D[1] }
  v106 = _D7 + v21 * *(double *)v146.i64;
  v107 = (float64x2_t)vextq_s8((int8x16_t)v155, v145, 8uLL);
  _Q17 = (float64x2_t)vzip1q_s64((int64x2_t)v145, (int64x2_t)v155);
  _Q24.f64[1] = v156.f64[1];
  _Q21 = vmlsq_f64(vmulq_f64((float64x2_t)vextq_s8((int8x16_t)v153, v146, 8uLL), _Q17), (float64x2_t)vzip1q_s64((int64x2_t)v146, (int64x2_t)v153), v107);
  v110 = (int8x16_t)vmlsq_f64(vmulq_f64((float64x2_t)vzip1q_s64((int64x2_t)v150, (int64x2_t)v156), v155), v156, _Q17);
  v111 = (int8x16_t)vmlsq_f64(vmulq_f64(_Q24, v107), (float64x2_t)vextq_s8((int8x16_t)v154, v150, 8uLL), v155);
  v112 = vmlsq_f64(vmulq_f64((float64x2_t)vextq_s8((int8x16_t)v154, v151, 8uLL), _Q17), (float64x2_t)vzip1q_s64((int64x2_t)v151, (int64x2_t)v154), v107);
  _D18 = vextq_s8(v110, v110, 8uLL).u64[0];
  *(_QWORD *)&_Q19.f64[0] = vextq_s8(v111, v111, 8uLL).u64[0];
  v115 = vnegq_f64(v96);
  v116 = vnegq_f64(v101);
  v117 = vnegq_f64(v104);
  *(_QWORD *)&v112.f64[1] = vextq_s8((int8x16_t)v112, (int8x16_t)v112, 8uLL).u64[0];
  *(_QWORD *)&_Q19.f64[1] = v110.i64[0];
  *(_QWORD *)&_Q21.f64[1] = vextq_s8((int8x16_t)_Q21, (int8x16_t)_Q21, 8uLL).u64[0];
  v118 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v112, _Q11.f64[0]), _Q19, _Q11, 1), _Q21, v68);
  __asm { FMLA            D17, D18, V11.D[1] }
  v119 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v112, _Q30.f64[0]), _Q19, _Q30, 1), _Q21, v70);
  __asm { FMLA            D17, D18, V30.D[1] }
  _D18 = _Q17.f64[0] + vmlsq_laneq_f64(vmulq_laneq_f64(v153, v155, 1), v155, v153, 1).f64[0] * v70;
  v121 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v115, _Q11.f64[0]), v116, _Q11, 1), v117, v68);
  __asm { FMLS            D21, D5, V11.D[1] }
  v122 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v115, _Q30.f64[0]), v116, _Q30, 1), v117, v70);
  __asm { FMLS            D19, D5, V30.D[1] }
  _Q19.f64[0] = _Q19.f64[0] - v106 * v70;
  v123 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v96, _Q11.f64[0]), v101, _Q11, 1), v104, v68);
  __asm { FMLA            D25, D5, V11.D[1] }
  _Q2 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v96, _Q30.f64[0]), v101, _Q30, 1), v104, v70);
  __asm { FMLA            D3, D5, V30.D[1] }
  _D3 = _D3 + v106 * v70;
  __asm
  {
    FMLA            D5, D18, V0.D[1]
    FMLA            D7, D18, V1.D[1]
  }
  *(float64x2_t *)a2 = vmlaq_laneq_f64(vmulq_n_f64(v118, _Q0.f64[0]), v119, _Q0, 1);
  *(_QWORD *)(a2 + 16) = _D5;
  *(float64x2_t *)(a2 + 24) = vmlaq_laneq_f64(vmulq_n_f64(v118, _Q1.f64[0]), v119, _Q1, 1);
  *(_QWORD *)(a2 + 40) = _D7;
  __asm
  {
    FMLA            D5, D19, V0.D[1]
    FMLA            D7, D19, V1.D[1]
  }
  *(_QWORD *)(a3 + 16) = _D5;
  *(float64x2_t *)a3 = vmlaq_laneq_f64(vmulq_n_f64(v121, _Q0.f64[0]), v122, _Q0, 1);
  *(_QWORD *)(a3 + 40) = _D7;
  *(float64x2_t *)(a3 + 24) = vmlaq_laneq_f64(vmulq_n_f64(v121, _Q1.f64[0]), v122, _Q1, 1);
  v132 = vmlaq_laneq_f64(vmulq_n_f64(v123, _Q0.f64[0]), _Q2, _Q0, 1);
  __asm { FMLA            D5, D3, V0.D[1] }
  v134 = vmlaq_laneq_f64(vmulq_n_f64(v123, _Q1.f64[0]), _Q2, _Q1, 1);
  *(float64x2_t *)a4 = v132;
  *(_QWORD *)(a4 + 16) = _D5;
  __asm { FMLA            D2, D3, V1.D[1] }
  *(float64x2_t *)(a4 + 24) = v134;
  *(float64_t *)(a4 + 40) = _Q2.f64[0];
  return 1;
}

void sub_20FD3540C(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4)
{
  unint64_t v4;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  char *v17;
  unint64_t v18;
  size_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  size_t v23;
  char *v24;
  char *v25;
  char *v26;
  char *v27;
  unint64_t v28;
  char *v29;
  char *v30;
  unint64_t v31;
  __int128 v32;
  char *v33;
  char *v34;
  unint64_t v35;
  uint64_t v36;
  char *v37;
  char v38;
  char *v39;
  unint64_t v40;
  char *v41;
  unint64_t v42;
  size_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  size_t v47;
  char *v48;
  char *v49;
  char *v50;
  char *v51;
  unint64_t v52;
  char *v53;
  char *v54;
  unint64_t v55;
  __int128 v56;
  char *v57;
  char *v58;
  unint64_t v59;
  uint64_t v60;
  char *v61;
  char v62;
  uint64_t v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t v66;
  uint64_t v67;
  unint64_t v68;

  v4 = a4;
  if (a4 >> 61
    && (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/BatchLeastSquaresUnsanitized/src/VisionMeasurements.cpp", 36, (uint64_t)"num_observations <= m_measurements.max_size()", 45, (uint64_t)"Size of requested track matrix exceeded maximum vector size.", 60, (void (*)(void **))sub_21023DDB0)|| (v4 & 0x8000000000000000) != 0&& sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/BatchLeastSquaresUnsanitized/src/VisionMeasurements.cpp", 38, (uint64_t)"num_observations <= m_mask.max_size()", 37, (uint64_t)"Size of requested track mask exceeded maximum vector size.", 58, (void (*)(void **))sub_21023DDB0)))
  {
    abort();
  }
  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = a3;
  *(_QWORD *)(a1 + 16) = v4;
  v8 = *(_QWORD *)(a1 + 176);
  v9 = (*(_QWORD *)(a1 + 184) - v8) >> 2;
  if (a2 <= v9)
  {
    if (a2 < v9)
      *(_QWORD *)(a1 + 184) = v8 + 4 * a2;
  }
  else
  {
    sub_20EAC24FC(a1 + 176, a2 - v9);
    v4 = *(_QWORD *)(a1 + 16);
  }
  v10 = *(_QWORD *)(a1 + 224);
  v11 = (*(_QWORD *)(a1 + 232) - v10) >> 3;
  if (v4 <= v11)
  {
    if (v4 < v11)
      *(_QWORD *)(a1 + 232) = v10 + 8 * v4;
  }
  else
  {
    sub_20EA6462C((void **)(a1 + 224), v4 - v11);
    v4 = *(_QWORD *)(a1 + 16);
  }
  v12 = *(_QWORD *)(a1 + 32);
  v13 = (*(_QWORD *)(a1 + 40) - v12) >> 4;
  if (v4 <= v13)
  {
    if (v4 < v13)
      *(_QWORD *)(a1 + 40) = v12 + 16 * v4;
  }
  else
  {
    sub_20E99C28C((char **)(a1 + 32), v4 - v13);
    v4 = *(_QWORD *)(a1 + 16);
  }
  v14 = *(_QWORD *)(a1 + 56);
  v15 = (*(_QWORD *)(a1 + 64) - v14) >> 2;
  if (v4 <= v15)
  {
    if (v4 < v15)
      *(_QWORD *)(a1 + 64) = v14 + 4 * v4;
  }
  else
  {
    sub_20E9F5694(a1 + 56, v4 - v15);
    v4 = *(_QWORD *)(a1 + 16);
  }
  v17 = *(char **)(a1 + 80);
  v16 = *(char **)(a1 + 88);
  v18 = v16 - v17;
  v19 = v4 - (v16 - v17);
  if (v4 > v16 - v17)
  {
    v20 = *(_QWORD *)(a1 + 96);
    if (v20 - (uint64_t)v16 >= v19)
    {
      bzero(*(void **)(a1 + 88), v4 - (v16 - v17));
      *(_QWORD *)(a1 + 88) = &v17[v4];
      goto LABEL_51;
    }
    if ((v4 & 0x8000000000000000) != 0)
      goto LABEL_91;
    v21 = v20 - (_QWORD)v17;
    v22 = 2 * v21;
    if (2 * v21 <= v4)
      v22 = v4;
    if (v21 >= 0x3FFFFFFFFFFFFFFFLL)
      v23 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v23 = v22;
    v24 = (char *)operator new(v23);
    v25 = &v24[v18];
    v26 = &v24[v23];
    v27 = &v24[v4];
    bzero(&v24[v18], v19);
    if (v16 == v17)
      goto LABEL_49;
    if (v18 >= 8 && (unint64_t)(v17 - v24) >= 0x20)
    {
      if (v18 < 0x20)
      {
        v28 = 0;
        goto LABEL_41;
      }
      v28 = v18 & 0xFFFFFFFFFFFFFFE0;
      v29 = v16 - 16;
      v30 = &v24[v16 - 16 - v17];
      v31 = v18 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        v32 = *(_OWORD *)v29;
        *((_OWORD *)v30 - 1) = *((_OWORD *)v29 - 1);
        *(_OWORD *)v30 = v32;
        v30 -= 32;
        v29 -= 32;
        v31 -= 32;
      }
      while (v31);
      if (v18 == v28)
        goto LABEL_48;
      if ((v18 & 0x18) != 0)
      {
LABEL_41:
        v25 -= v18 & 0xFFFFFFFFFFFFFFF8;
        v33 = &v16[-v28 - 8];
        v34 = (char *)(v33 - v17);
        v35 = v28 - (v18 & 0xFFFFFFFFFFFFFFF8);
        do
        {
          v36 = *(_QWORD *)v33;
          v33 -= 8;
          *(_QWORD *)&v34[(_QWORD)v24] = v36;
          v34 -= 8;
          v35 += 8;
        }
        while (v35);
        v16 -= v18 & 0xFFFFFFFFFFFFFFF8;
        if (v18 == (v18 & 0xFFFFFFFFFFFFFFF8))
          goto LABEL_48;
        goto LABEL_46;
      }
      v25 -= v28;
      v16 -= v28;
    }
LABEL_46:
    v37 = v25 - 1;
    do
    {
      v38 = *--v16;
      *v37-- = v38;
    }
    while (v16 != v17);
LABEL_48:
    v16 = v17;
    v25 = v24;
LABEL_49:
    *(_QWORD *)(a1 + 80) = v25;
    *(_QWORD *)(a1 + 88) = v27;
    *(_QWORD *)(a1 + 96) = v26;
    if (v16)
      operator delete(v16);
    goto LABEL_51;
  }
  if (v4 < v16 - v17)
    *(_QWORD *)(a1 + 88) = &v17[v4];
LABEL_51:
  v39 = *(char **)(a1 + 104);
  v40 = *(_QWORD *)(a1 + 16);
  v41 = *(char **)(a1 + 112);
  v42 = v41 - v39;
  v43 = v40 - (v41 - v39);
  if (v40 > v41 - v39)
  {
    v44 = *(_QWORD *)(a1 + 120);
    if (v44 - (uint64_t)v41 >= v43)
    {
      bzero(*(void **)(a1 + 112), v40 - (v41 - v39));
      *(_QWORD *)(a1 + 112) = &v39[v40];
      goto LABEL_81;
    }
    if ((v40 & 0x8000000000000000) == 0)
    {
      v45 = v44 - (_QWORD)v39;
      v46 = 2 * v45;
      if (2 * v45 <= v40)
        v46 = *(_QWORD *)(a1 + 16);
      if (v45 >= 0x3FFFFFFFFFFFFFFFLL)
        v47 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v47 = v46;
      v48 = (char *)operator new(v47);
      v49 = &v48[v42];
      v50 = &v48[v47];
      v51 = &v48[v40];
      bzero(&v48[v42], v43);
      if (v41 == v39)
        goto LABEL_79;
      if (v42 >= 8 && (unint64_t)(v39 - v48) >= 0x20)
      {
        if (v42 < 0x20)
        {
          v52 = 0;
          goto LABEL_71;
        }
        v52 = v42 & 0xFFFFFFFFFFFFFFE0;
        v53 = v41 - 16;
        v54 = &v48[v41 - 16 - v39];
        v55 = v42 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          v56 = *(_OWORD *)v53;
          *((_OWORD *)v54 - 1) = *((_OWORD *)v53 - 1);
          *(_OWORD *)v54 = v56;
          v54 -= 32;
          v53 -= 32;
          v55 -= 32;
        }
        while (v55);
        if (v42 == v52)
          goto LABEL_78;
        if ((v42 & 0x18) != 0)
        {
LABEL_71:
          v49 -= v42 & 0xFFFFFFFFFFFFFFF8;
          v57 = &v41[-v52 - 8];
          v58 = (char *)(v57 - v39);
          v59 = v52 - (v42 & 0xFFFFFFFFFFFFFFF8);
          do
          {
            v60 = *(_QWORD *)v57;
            v57 -= 8;
            *(_QWORD *)&v58[(_QWORD)v48] = v60;
            v58 -= 8;
            v59 += 8;
          }
          while (v59);
          v41 -= v42 & 0xFFFFFFFFFFFFFFF8;
          if (v42 == (v42 & 0xFFFFFFFFFFFFFFF8))
            goto LABEL_78;
          goto LABEL_76;
        }
        v49 -= v52;
        v41 -= v52;
      }
LABEL_76:
      v61 = v49 - 1;
      do
      {
        v62 = *--v41;
        *v61-- = v62;
      }
      while (v41 != v39);
LABEL_78:
      v41 = v39;
      v49 = v48;
LABEL_79:
      *(_QWORD *)(a1 + 104) = v49;
      *(_QWORD *)(a1 + 112) = v51;
      *(_QWORD *)(a1 + 120) = v50;
      if (v41)
        operator delete(v41);
      goto LABEL_81;
    }
LABEL_91:
    sub_20E867F44();
  }
  if (v40 < v41 - v39)
    *(_QWORD *)(a1 + 112) = &v39[v40];
LABEL_81:
  v63 = *(_QWORD *)(a1 + 152);
  v64 = *(_QWORD *)a1;
  v65 = *(_QWORD *)a1 + 1;
  v66 = (*(_QWORD *)(a1 + 160) - v63) >> 3;
  if (v65 <= v66)
  {
    if (v65 < v66)
      *(_QWORD *)(a1 + 160) = v63 + 8 * v65;
  }
  else
  {
    sub_20EAC9ECC(a1 + 152, v65 - v66);
    v64 = *(_QWORD *)a1;
  }
  v67 = *(_QWORD *)(a1 + 128);
  v68 = (*(_QWORD *)(a1 + 136) - v67) >> 3;
  if (v64 <= v68)
  {
    if (v64 < v68)
      *(_QWORD *)(a1 + 136) = v67 + 8 * v64;
  }
  else
  {
    sub_20EAC9ECC(a1 + 128, v64 - v68);
  }
}

void sub_20FD35918(uint64_t a1, unint64_t a2, unsigned int a3)
{
  unsigned int v6;
  _QWORD *v7;
  void *v8;
  unint64_t v9;
  _QWORD *v10;
  void *v11;
  void *v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  void *v23[2];
  void *v24[2];
  __int128 v25;
  void *__p[2];
  __int128 v27;

  if (*(_QWORD *)(a1 + 16) != a2
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/BatchLeastSquaresUnsanitized/src/VisionMeasurements.cpp", 58, (uint64_t)"num_observations == m_num_observations", 38, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
    goto LABEL_41;
  }
  *(_OWORD *)__p = 0u;
  v27 = 0u;
  *(_OWORD *)v24 = 0u;
  v25 = 0u;
  *(_OWORD *)v23 = 0u;
  v6 = *(_DWORD *)(a1 + 488);
  if (v6 >= a3)
  {
    if (v6 > a3)
    {
      v9 = a3;
      v10 = (_QWORD *)(a1 + 80 * a3 + 312);
      do
      {
        v11 = (void *)*(v10 - 1);
        if (v11)
        {
          *v10 = v11;
          operator delete(v11);
        }
        v12 = (void *)*(v10 - 5);
        if (v12)
        {
          *(v10 - 4) = v12;
          operator delete(v12);
        }
        v13 = (void *)*(v10 - 8);
        if (v13)
        {
          *(v10 - 7) = v13;
          operator delete(v13);
        }
        ++v9;
        v10 += 10;
      }
      while (v9 < *(unsigned int *)(a1 + 488));
    }
    *(_DWORD *)(a1 + 488) = a3;
  }
  else
  {
    v7 = (_QWORD *)(a1 + 80 * v6 + 248);
    do
    {
      ++v6;
      v7 = sub_20FD37EB0(v7, (uint64_t)v23) + 10;
    }
    while (a3 != v6);
    v8 = __p[1];
    *(_DWORD *)(a1 + 488) = a3;
    if (v8)
    {
      *(_QWORD *)&v27 = v8;
      operator delete(v8);
    }
  }
  if (v24[1])
  {
    *(void **)&v25 = v24[1];
    operator delete(v24[1]);
  }
  if (v23[0])
  {
    v23[1] = v23[0];
    operator delete(v23[0]);
  }
  if (a2 >> 61
    && a3
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/BatchLeastSquaresUnsanitized/src/VisionMeasurements.cpp", 62, (uint64_t)"num_secondary_streams == 0 || num_observations <= m_secondary.front().measurements.max_size()", 93, (uint64_t)"Size of requested track matrix exceeded maximum vector size.", 60, (void (*)(void **))sub_21023DDB0))
  {
LABEL_41:
    abort();
  }
  v14 = *(unsigned int *)(a1 + 488);
  if ((_DWORD)v14)
  {
    v15 = a1 + 248;
    v16 = 80 * v14;
    do
    {
      v17 = *(_QWORD *)(v15 + 56);
      v18 = *(_QWORD *)(a1 + 16);
      v19 = (*(_QWORD *)(v15 + 64) - v17) >> 3;
      if (v18 <= v19)
      {
        if (v18 < v19)
          *(_QWORD *)(v15 + 64) = v17 + 8 * v18;
      }
      else
      {
        sub_20EA6462C((void **)(v15 + 56), v18 - v19);
        v18 = *(_QWORD *)(a1 + 16);
      }
      v20 = (uint64_t)(*(_QWORD *)(v15 + 8) - *(_QWORD *)v15) >> 4;
      if (v18 <= v20)
      {
        if (v18 < v20)
          *(_QWORD *)(v15 + 8) = *(_QWORD *)v15 + 16 * v18;
      }
      else
      {
        sub_20E99C28C((char **)v15, v18 - v20);
        v18 = *(_QWORD *)(a1 + 16);
      }
      v21 = *(_QWORD *)(v15 + 24);
      v22 = (*(_QWORD *)(v15 + 32) - v21) >> 2;
      if (v18 > v22)
      {
        sub_20E9F5694(v15 + 24, v18 - v22);
      }
      else if (v18 < v22)
      {
        *(_QWORD *)(v15 + 32) = v21 + 4 * v18;
      }
      v15 += 80;
      v16 -= 80;
    }
    while (v16);
  }
}

void sub_20FD35B68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20EF14A3C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20FD35B7C(_QWORD *a1, unint64_t a2, uint64_t a3, size_t a4)
{
  size_t v7;
  _BYTE *v8;
  _BYTE *v9;
  _BYTE *v10;
  char *v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  __int128 *v20;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;
  _BYTE *v24;
  char *v25;
  char *v26;
  char *v27;
  char *v28;
  _BYTE *v29;
  _BYTE *v30;
  char *v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  char *v38;
  char *v39;
  __int128 *v40;
  uint64_t v41;
  __int128 v42;
  int v43;
  _BYTE *v44;
  _BYTE *v45;
  _BYTE *v46;
  unint64_t v47;
  char *v48;
  _BYTE *v49;
  char *v50;
  unint64_t v51;
  __int128 *v52;
  _OWORD *v53;
  unint64_t v54;
  __int128 v55;
  char *v56;
  int64_t v57;
  unint64_t v58;
  uint64_t v59;
  char *v60;
  char v61;
  _BYTE *v62;
  _BYTE *v63;
  _BYTE *v64;
  unint64_t v65;
  char *v66;
  _BYTE *v67;
  char *v68;
  unint64_t v69;
  __int128 *v70;
  _OWORD *v71;
  unint64_t v72;
  __int128 v73;
  char *v74;
  int64_t v75;
  unint64_t v76;
  uint64_t v77;
  char *v78;
  char v79;
  _BYTE *v80;
  unint64_t v81;
  _BYTE *v82;
  uint64_t v83;
  char *v84;
  uint64_t v85;
  char *v86;
  char *v87;
  uint64_t v88;
  unint64_t v89;
  uint64_t v90;
  char *v91;
  char *v92;
  __int128 *v93;
  uint64_t v94;
  __int128 v95;
  uint64_t v96;
  _BYTE *v97;
  _BYTE *v98;
  char *v99;
  uint64_t v100;
  char *v101;
  char *v102;
  uint64_t v103;
  unint64_t v104;
  uint64_t v105;
  char *v106;
  char *v107;
  __int128 *v108;
  uint64_t v109;
  __int128 v110;
  uint64_t v111;
  _BYTE *v112;
  _BYTE *v113;
  size_t v114;
  char *v115;
  uint64_t v116;
  char *v117;
  char *v118;
  uint64_t v119;
  unint64_t v120;
  uint64_t v121;
  char *v122;
  char *v123;
  __int128 *v124;
  uint64_t v125;
  __int128 v126;
  int v127;

  if (!(a4 >> 61))
  {
    v9 = (_BYTE *)a1[28];
    if (a4 <= (uint64_t)(a1[30] - (_QWORD)v9) >> 3)
      goto LABEL_19;
    v10 = (_BYTE *)a1[29];
    v11 = (char *)operator new(8 * a4);
    v12 = v10 - v9;
    v13 = &v11[(v10 - v9) & 0xFFFFFFFFFFFFFFF8];
    v14 = v13;
    if (v10 != v9)
    {
      if ((unint64_t)(v12 - 8) < 0x58)
      {
        v14 = &v11[(v10 - v9) & 0xFFFFFFFFFFFFFFF8];
        do
        {
LABEL_16:
          v23 = *((_QWORD *)v10 - 1);
          v10 -= 8;
          *((_QWORD *)v14 - 1) = v23;
          v14 -= 8;
        }
        while (v10 != v9);
        goto LABEL_17;
      }
      v14 = &v11[(v10 - v9) & 0xFFFFFFFFFFFFFFF8];
      if (v10 - v11 - (v12 & 0xFFFFFFFFFFFFFFF8) < 0x20)
        goto LABEL_16;
      v15 = v12 >> 3;
      v16 = ((unint64_t)(v12 - 8) >> 3) + 1;
      v17 = 8 * (v16 & 0x3FFFFFFFFFFFFFFCLL);
      v18 = &v10[-v17];
      v14 = &v13[-v17];
      v19 = &v11[8 * v15 - 16];
      v20 = (__int128 *)(v10 - 16);
      v21 = v16 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v22 = *v20;
        *((_OWORD *)v19 - 1) = *(v20 - 1);
        *(_OWORD *)v19 = v22;
        v19 -= 32;
        v20 -= 2;
        v21 -= 4;
      }
      while (v21);
      v10 = v18;
      if (v16 != (v16 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_16;
    }
LABEL_17:
    a1[28] = v14;
    a1[29] = v13;
    a1[30] = &v11[8 * a4];
    if (v9)
      operator delete(v9);
LABEL_19:
    LODWORD(v7) = 0;
    v8 = (_BYTE *)a1[4];
    if (a4 <= (uint64_t)(a1[6] - (_QWORD)v8) >> 4)
      goto LABEL_26;
    goto LABEL_20;
  }
  if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/BatchLeastSquaresUnsanitized/src/VisionMeasurements.cpp", 79, (uint64_t)"num_observations <= m_measurements.max_size()", 45, (uint64_t)"Size of requested track matrix exceeded maximum vector size.", 60, (void (*)(void **))sub_21023DDB0)|| (a4 & 0x8000000000000000) != 0&& sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/BatchLeastSquaresUnsanitized/src/VisionMeasurements.cpp", 81, (uint64_t)"num_observations <= m_mask.max_size()", 37, (uint64_t)"Size of requested track mask exceeded maximum vector size.", 58, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  if (a4 > (uint64_t)(a1[30] - a1[28]) >> 3)
    sub_20E867F44();
  v7 = a4 >> 63;
  v8 = (_BYTE *)a1[4];
  if (a4 > (uint64_t)(a1[6] - (_QWORD)v8) >> 4)
  {
LABEL_20:
    if (a4 >> 60)
      sub_20E867F44();
    v24 = (_BYTE *)a1[5];
    v25 = (char *)operator new(16 * a4);
    v26 = &v25[(v24 - v8) & 0xFFFFFFFFFFFFFFF0];
    v27 = v26;
    if (v24 != v8)
    {
      v28 = &v25[(v24 - v8) & 0xFFFFFFFFFFFFFFF0];
      do
      {
        v27 = v28 - 16;
        *((_OWORD *)v28 - 1) = *((_OWORD *)v24 - 1);
        v24 -= 16;
        v28 -= 16;
      }
      while (v24 != v8);
    }
    a1[4] = v27;
    a1[5] = v26;
    a1[6] = &v25[16 * a4];
    if (v8)
      operator delete(v8);
  }
LABEL_26:
  v29 = (_BYTE *)a1[7];
  if (a4 <= (uint64_t)(a1[9] - (_QWORD)v29) >> 2)
    goto LABEL_38;
  if (a4 >> 62)
    sub_20E867F44();
  v30 = (_BYTE *)a1[8];
  v31 = (char *)operator new(4 * a4);
  v32 = v30 - v29;
  v33 = &v31[(v30 - v29) & 0xFFFFFFFFFFFFFFFCLL];
  v34 = v33;
  if (v30 != v29)
  {
    if ((unint64_t)(v32 - 4) < 0x2C)
    {
      v34 = &v31[(v30 - v29) & 0xFFFFFFFFFFFFFFFCLL];
      do
      {
LABEL_35:
        v43 = *((_DWORD *)v30 - 1);
        v30 -= 4;
        *((_DWORD *)v34 - 1) = v43;
        v34 -= 4;
      }
      while (v30 != v29);
      goto LABEL_36;
    }
    v34 = &v31[(v30 - v29) & 0xFFFFFFFFFFFFFFFCLL];
    if (v30 - v31 - (v32 & 0xFFFFFFFFFFFFFFFCLL) < 0x20)
      goto LABEL_35;
    v35 = v32 >> 2;
    v36 = ((unint64_t)(v32 - 4) >> 2) + 1;
    v37 = 4 * (v36 & 0x7FFFFFFFFFFFFFF8);
    v38 = &v30[-v37];
    v34 = &v33[-v37];
    v39 = &v31[4 * v35 - 16];
    v40 = (__int128 *)(v30 - 16);
    v41 = v36 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v42 = *v40;
      *((_OWORD *)v39 - 1) = *(v40 - 1);
      *(_OWORD *)v39 = v42;
      v39 -= 32;
      v40 -= 2;
      v41 -= 8;
    }
    while (v41);
    v30 = v38;
    if (v36 != (v36 & 0x7FFFFFFFFFFFFFF8))
      goto LABEL_35;
  }
LABEL_36:
  a1[7] = v34;
  a1[8] = v33;
  a1[9] = &v31[4 * a4];
  if (v29)
    operator delete(v29);
LABEL_38:
  v44 = (_BYTE *)a1[10];
  if (a1[12] - (_QWORD)v44 >= a4)
    goto LABEL_60;
  if ((_DWORD)v7)
    goto LABEL_124;
  v45 = (_BYTE *)a1[11];
  v46 = operator new(a4);
  v47 = v45 - v44;
  v48 = &v46[v45 - v44];
  v49 = v48;
  if (v45 != v44)
  {
    if (v47 < 8)
    {
      v50 = &v46[v45 - v44];
      goto LABEL_55;
    }
    v50 = &v46[v45 - v44];
    if ((unint64_t)(v44 - v46) >= 0x20)
    {
      if (v47 < 0x20)
      {
        v51 = 0;
        goto LABEL_50;
      }
      v51 = v47 & 0xFFFFFFFFFFFFFFE0;
      v52 = (__int128 *)(v45 - 16);
      v53 = &v46[v45 - 16 - v44];
      v54 = v47 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        v55 = *v52;
        *(v53 - 1) = *(v52 - 1);
        *v53 = v55;
        v53 -= 2;
        v52 -= 2;
        v54 -= 32;
      }
      while (v54);
      if (v47 == v51)
        goto LABEL_57;
      if ((v47 & 0x18) != 0)
      {
LABEL_50:
        v50 = &v48[-(v47 & 0xFFFFFFFFFFFFFFF8)];
        v56 = &v45[-v51 - 8];
        v57 = v56 - v44;
        v58 = v51 - (v47 & 0xFFFFFFFFFFFFFFF8);
        do
        {
          v59 = *(_QWORD *)v56;
          v56 -= 8;
          *(_QWORD *)&v46[v57] = v59;
          v57 -= 8;
          v58 += 8;
        }
        while (v58);
        v45 -= v47 & 0xFFFFFFFFFFFFFFF8;
        if (v47 == (v47 & 0xFFFFFFFFFFFFFFF8))
          goto LABEL_57;
        goto LABEL_55;
      }
      v50 = &v48[-v51];
      v45 -= v51;
    }
LABEL_55:
    v60 = v50 - 1;
    do
    {
      v61 = *--v45;
      *v60-- = v61;
    }
    while (v45 != v44);
LABEL_57:
    v49 = v46;
  }
  a1[10] = v49;
  a1[11] = v48;
  a1[12] = &v46[a4];
  if (v44)
    operator delete(v44);
LABEL_60:
  v62 = (_BYTE *)a1[13];
  if (a1[15] - (_QWORD)v62 >= a4)
    goto LABEL_82;
  if ((_DWORD)v7)
LABEL_124:
    sub_20E867F44();
  v63 = (_BYTE *)a1[14];
  v64 = operator new(a4);
  v65 = v63 - v62;
  v66 = &v64[v63 - v62];
  v67 = v66;
  if (v63 == v62)
    goto LABEL_80;
  if (v65 < 8)
  {
    v68 = &v64[v63 - v62];
    goto LABEL_77;
  }
  v68 = &v64[v63 - v62];
  if ((unint64_t)(v62 - v64) >= 0x20)
  {
    if (v65 < 0x20)
    {
      v69 = 0;
      goto LABEL_72;
    }
    v69 = v65 & 0xFFFFFFFFFFFFFFE0;
    v70 = (__int128 *)(v63 - 16);
    v71 = &v64[v63 - 16 - v62];
    v72 = v65 & 0xFFFFFFFFFFFFFFE0;
    do
    {
      v73 = *v70;
      *(v71 - 1) = *(v70 - 1);
      *v71 = v73;
      v71 -= 2;
      v70 -= 2;
      v72 -= 32;
    }
    while (v72);
    if (v65 == v69)
      goto LABEL_79;
    if ((v65 & 0x18) != 0)
    {
LABEL_72:
      v68 = &v66[-(v65 & 0xFFFFFFFFFFFFFFF8)];
      v74 = &v63[-v69 - 8];
      v75 = v74 - v62;
      v76 = v69 - (v65 & 0xFFFFFFFFFFFFFFF8);
      do
      {
        v77 = *(_QWORD *)v74;
        v74 -= 8;
        *(_QWORD *)&v64[v75] = v77;
        v75 -= 8;
        v76 += 8;
      }
      while (v76);
      v63 -= v65 & 0xFFFFFFFFFFFFFFF8;
      if (v65 == (v65 & 0xFFFFFFFFFFFFFFF8))
        goto LABEL_79;
      goto LABEL_77;
    }
    v68 = &v66[-v69];
    v63 -= v69;
  }
LABEL_77:
  v78 = v68 - 1;
  do
  {
    v79 = *--v63;
    *v78-- = v79;
  }
  while (v63 != v62);
LABEL_79:
  v67 = v64;
LABEL_80:
  a1[13] = v67;
  a1[14] = v66;
  a1[15] = &v64[a4];
  if (v62)
    operator delete(v62);
LABEL_82:
  v80 = (_BYTE *)a1[19];
  v81 = a2 + 1;
  if (a2 + 1 <= (uint64_t)(a1[21] - (_QWORD)v80) >> 3)
    goto LABEL_94;
  if (v81 >> 61)
    goto LABEL_119;
  v82 = (_BYTE *)a1[20];
  v83 = 8 * v81;
  v84 = (char *)operator new(8 * v81);
  v85 = v82 - v80;
  v86 = &v84[(v82 - v80) & 0xFFFFFFFFFFFFFFF8];
  v87 = v86;
  if (v82 != v80)
  {
    if ((unint64_t)(v85 - 8) < 0x58)
    {
      v87 = &v84[(v82 - v80) & 0xFFFFFFFFFFFFFFF8];
      do
      {
LABEL_91:
        v96 = *((_QWORD *)v82 - 1);
        v82 -= 8;
        *((_QWORD *)v87 - 1) = v96;
        v87 -= 8;
      }
      while (v82 != v80);
      goto LABEL_92;
    }
    v87 = &v84[(v82 - v80) & 0xFFFFFFFFFFFFFFF8];
    if (v82 - v84 - (v85 & 0xFFFFFFFFFFFFFFF8) < 0x20)
      goto LABEL_91;
    v88 = v85 >> 3;
    v89 = ((unint64_t)(v85 - 8) >> 3) + 1;
    v90 = 8 * (v89 & 0x3FFFFFFFFFFFFFFCLL);
    v91 = &v82[-v90];
    v87 = &v86[-v90];
    v92 = &v84[8 * v88 - 16];
    v93 = (__int128 *)(v82 - 16);
    v94 = v89 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v95 = *v93;
      *((_OWORD *)v92 - 1) = *(v93 - 1);
      *(_OWORD *)v92 = v95;
      v92 -= 32;
      v93 -= 2;
      v94 -= 4;
    }
    while (v94);
    v82 = v91;
    if (v89 != (v89 & 0x3FFFFFFFFFFFFFFCLL))
      goto LABEL_91;
  }
LABEL_92:
  a1[19] = v87;
  a1[20] = v86;
  a1[21] = &v84[v83];
  if (v80)
    operator delete(v80);
LABEL_94:
  v97 = (_BYTE *)a1[16];
  if (a2 <= (uint64_t)(a1[18] - (_QWORD)v97) >> 3)
    goto LABEL_106;
  if (a2 >> 61)
LABEL_119:
    sub_20E867F44();
  v98 = (_BYTE *)a1[17];
  v99 = (char *)operator new(8 * a2);
  v100 = v98 - v97;
  v101 = &v99[(v98 - v97) & 0xFFFFFFFFFFFFFFF8];
  v102 = v101;
  if (v98 == v97)
    goto LABEL_104;
  if ((unint64_t)(v100 - 8) < 0x58)
  {
    v102 = &v99[(v98 - v97) & 0xFFFFFFFFFFFFFFF8];
    do
    {
LABEL_103:
      v111 = *((_QWORD *)v98 - 1);
      v98 -= 8;
      *((_QWORD *)v102 - 1) = v111;
      v102 -= 8;
    }
    while (v98 != v97);
    goto LABEL_104;
  }
  v102 = &v99[(v98 - v97) & 0xFFFFFFFFFFFFFFF8];
  if (v98 - v99 - (v100 & 0xFFFFFFFFFFFFFFF8) < 0x20)
    goto LABEL_103;
  v103 = v100 >> 3;
  v104 = ((unint64_t)(v100 - 8) >> 3) + 1;
  v105 = 8 * (v104 & 0x3FFFFFFFFFFFFFFCLL);
  v106 = &v98[-v105];
  v102 = &v101[-v105];
  v107 = &v99[8 * v103 - 16];
  v108 = (__int128 *)(v98 - 16);
  v109 = v104 & 0x3FFFFFFFFFFFFFFCLL;
  do
  {
    v110 = *v108;
    *((_OWORD *)v107 - 1) = *(v108 - 1);
    *(_OWORD *)v107 = v110;
    v107 -= 32;
    v108 -= 2;
    v109 -= 4;
  }
  while (v109);
  v98 = v106;
  if (v104 != (v104 & 0x3FFFFFFFFFFFFFFCLL))
    goto LABEL_103;
LABEL_104:
  a1[16] = v102;
  a1[17] = v101;
  a1[18] = &v99[8 * a2];
  if (v97)
    operator delete(v97);
LABEL_106:
  v112 = (_BYTE *)a1[22];
  if (a2 <= (uint64_t)(a1[24] - (_QWORD)v112) >> 2)
    return;
  if (a2 >> 62)
    sub_20EABADD4();
  v113 = (_BYTE *)a1[23];
  v114 = 4 * a2;
  v115 = (char *)operator new(v114);
  v116 = v113 - v112;
  v117 = &v115[(v113 - v112) & 0xFFFFFFFFFFFFFFFCLL];
  v118 = v117;
  if (v113 != v112)
  {
    if ((unint64_t)(v116 - 4) >= 0x2C)
    {
      v118 = &v115[(v113 - v112) & 0xFFFFFFFFFFFFFFFCLL];
      if (v113 - v115 - (v116 & 0xFFFFFFFFFFFFFFFCLL) >= 0x20)
      {
        v119 = v116 >> 2;
        v120 = ((unint64_t)(v116 - 4) >> 2) + 1;
        v121 = 4 * (v120 & 0x7FFFFFFFFFFFFFF8);
        v122 = &v113[-v121];
        v118 = &v117[-v121];
        v123 = &v115[4 * v119 - 16];
        v124 = (__int128 *)(v113 - 16);
        v125 = v120 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          v126 = *v124;
          *((_OWORD *)v123 - 1) = *(v124 - 1);
          *(_OWORD *)v123 = v126;
          v123 -= 32;
          v124 -= 2;
          v125 -= 8;
        }
        while (v125);
        v113 = v122;
        if (v120 == (v120 & 0x7FFFFFFFFFFFFFF8))
          goto LABEL_116;
      }
    }
    else
    {
      v118 = &v115[(v113 - v112) & 0xFFFFFFFFFFFFFFFCLL];
    }
    do
    {
      v127 = *((_DWORD *)v113 - 1);
      v113 -= 4;
      *((_DWORD *)v118 - 1) = v127;
      v118 -= 4;
    }
    while (v113 != v112);
  }
LABEL_116:
  a1[22] = v118;
  a1[23] = v117;
  a1[24] = &v115[v114];
  if (v112)
    operator delete(v112);
}

void sub_20FD363E4(uint64_t a1, unint64_t a2, unsigned int a3)
{
  unsigned int v6;
  _QWORD *v7;
  void *v8;
  unint64_t v9;
  _QWORD *v10;
  void *v11;
  void *v12;
  void *v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  _BYTE *v18;
  char *v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  __int128 *v28;
  uint64_t v29;
  __int128 v30;
  uint64_t v31;
  _BYTE *v32;
  _BYTE *v33;
  char *v34;
  char *v35;
  char *v36;
  char *v37;
  _BYTE *v38;
  _BYTE *v39;
  char *v40;
  uint64_t v41;
  char *v42;
  char *v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  char *v47;
  char *v48;
  __int128 *v49;
  uint64_t v50;
  __int128 v51;
  int v52;
  void *v53[2];
  void *v54[2];
  __int128 v55;
  void *__p[2];
  __int128 v57;

  *(_OWORD *)__p = 0u;
  v57 = 0u;
  *(_OWORD *)v54 = 0u;
  v55 = 0u;
  *(_OWORD *)v53 = 0u;
  v6 = *(_DWORD *)(a1 + 488);
  if (v6 >= a3)
  {
    if (v6 > a3)
    {
      v9 = a3;
      v10 = (_QWORD *)(a1 + 80 * a3 + 312);
      do
      {
        v11 = (void *)*(v10 - 1);
        if (v11)
        {
          *v10 = v11;
          operator delete(v11);
        }
        v12 = (void *)*(v10 - 5);
        if (v12)
        {
          *(v10 - 4) = v12;
          operator delete(v12);
        }
        v13 = (void *)*(v10 - 8);
        if (v13)
        {
          *(v10 - 7) = v13;
          operator delete(v13);
        }
        ++v9;
        v10 += 10;
      }
      while (v9 < *(unsigned int *)(a1 + 488));
    }
    *(_DWORD *)(a1 + 488) = a3;
  }
  else
  {
    v7 = (_QWORD *)(a1 + 80 * v6 + 248);
    do
    {
      ++v6;
      v7 = sub_20FD37EB0(v7, (uint64_t)v53) + 10;
    }
    while (a3 != v6);
    v8 = __p[1];
    *(_DWORD *)(a1 + 488) = a3;
    if (v8)
    {
      *(_QWORD *)&v57 = v8;
      operator delete(v8);
    }
  }
  if (v54[1])
  {
    *(void **)&v55 = v54[1];
    operator delete(v54[1]);
  }
  if (v53[0])
  {
    v53[1] = v53[0];
    operator delete(v53[0]);
  }
  if (a2 >> 61
    && a3
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/BatchLeastSquaresUnsanitized/src/VisionMeasurements.cpp", 99, (uint64_t)"num_secondary_streams == 0 || num_observations <= m_secondary.front().measurements.max_size()", 93, (uint64_t)"Size of requested track matrix exceeded maximum vector size.", 60, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v14 = *(_DWORD *)(a1 + 488);
  if (v14)
  {
    v15 = a1 + 248;
    v16 = v15 + 80 * v14;
    do
    {
      v17 = *(_BYTE **)(v15 + 56);
      if (a2 <= (uint64_t)(*(_QWORD *)(v15 + 72) - (_QWORD)v17) >> 3)
        goto LABEL_38;
      if (a2 >> 61)
        sub_20E867F44();
      v18 = *(_BYTE **)(v15 + 64);
      v19 = (char *)operator new(8 * a2);
      v20 = v18 - v17;
      v21 = &v19[(v18 - v17) & 0xFFFFFFFFFFFFFFF8];
      v22 = v21;
      if (v18 != v17)
      {
        if ((unint64_t)(v20 - 8) < 0x58)
        {
          v22 = &v19[(v18 - v17) & 0xFFFFFFFFFFFFFFF8];
          do
          {
LABEL_35:
            v31 = *((_QWORD *)v18 - 1);
            v18 -= 8;
            *((_QWORD *)v22 - 1) = v31;
            v22 -= 8;
          }
          while (v18 != v17);
          goto LABEL_36;
        }
        v22 = &v19[(v18 - v17) & 0xFFFFFFFFFFFFFFF8];
        if (v18 - v19 - (v20 & 0xFFFFFFFFFFFFFFF8) < 0x20)
          goto LABEL_35;
        v23 = v20 >> 3;
        v24 = ((unint64_t)(v20 - 8) >> 3) + 1;
        v25 = 8 * (v24 & 0x3FFFFFFFFFFFFFFCLL);
        v26 = &v18[-v25];
        v22 = &v21[-v25];
        v27 = &v19[8 * v23 - 16];
        v28 = (__int128 *)(v18 - 16);
        v29 = v24 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v30 = *v28;
          *((_OWORD *)v27 - 1) = *(v28 - 1);
          *(_OWORD *)v27 = v30;
          v27 -= 32;
          v28 -= 2;
          v29 -= 4;
        }
        while (v29);
        v18 = v26;
        if (v24 != (v24 & 0x3FFFFFFFFFFFFFFCLL))
          goto LABEL_35;
      }
LABEL_36:
      *(_QWORD *)(v15 + 56) = v22;
      *(_QWORD *)(v15 + 64) = v21;
      *(_QWORD *)(v15 + 72) = &v19[8 * a2];
      if (v17)
        operator delete(v17);
LABEL_38:
      v32 = *(_BYTE **)v15;
      if (a2 > (uint64_t)(*(_QWORD *)(v15 + 16) - *(_QWORD *)v15) >> 4)
      {
        if (a2 >> 60)
          sub_20E867F44();
        v33 = *(_BYTE **)(v15 + 8);
        v34 = (char *)operator new(16 * a2);
        v35 = &v34[(v33 - v32) & 0xFFFFFFFFFFFFFFF0];
        v36 = v35;
        if (v33 != v32)
        {
          v37 = &v34[(v33 - v32) & 0xFFFFFFFFFFFFFFF0];
          do
          {
            v36 = v37 - 16;
            *((_OWORD *)v37 - 1) = *((_OWORD *)v33 - 1);
            v33 -= 16;
            v37 -= 16;
          }
          while (v33 != v32);
        }
        *(_QWORD *)v15 = v36;
        *(_QWORD *)(v15 + 8) = v35;
        *(_QWORD *)(v15 + 16) = &v34[16 * a2];
        if (v32)
          operator delete(v32);
      }
      v38 = *(_BYTE **)(v15 + 24);
      if (a2 <= (uint64_t)(*(_QWORD *)(v15 + 40) - (_QWORD)v38) >> 2)
        goto LABEL_25;
      if (a2 >> 62)
        sub_20E867F44();
      v39 = *(_BYTE **)(v15 + 32);
      v40 = (char *)operator new(4 * a2);
      v41 = v39 - v38;
      v42 = &v40[(v39 - v38) & 0xFFFFFFFFFFFFFFFCLL];
      v43 = v42;
      if (v39 != v38)
      {
        if ((unint64_t)(v41 - 4) >= 0x2C)
        {
          v43 = &v40[(v39 - v38) & 0xFFFFFFFFFFFFFFFCLL];
          if (v39 - v40 - (v41 & 0xFFFFFFFFFFFFFFFCLL) >= 0x20)
          {
            v44 = v41 >> 2;
            v45 = ((unint64_t)(v41 - 4) >> 2) + 1;
            v46 = 4 * (v45 & 0x7FFFFFFFFFFFFFF8);
            v47 = &v39[-v46];
            v43 = &v42[-v46];
            v48 = &v40[4 * v44 - 16];
            v49 = (__int128 *)(v39 - 16);
            v50 = v45 & 0x7FFFFFFFFFFFFFF8;
            do
            {
              v51 = *v49;
              *((_OWORD *)v48 - 1) = *(v49 - 1);
              *(_OWORD *)v48 = v51;
              v48 -= 32;
              v49 -= 2;
              v50 -= 8;
            }
            while (v50);
            v39 = v47;
            if (v45 == (v45 & 0x7FFFFFFFFFFFFFF8))
              goto LABEL_55;
          }
        }
        else
        {
          v43 = &v40[(v39 - v38) & 0xFFFFFFFFFFFFFFFCLL];
        }
        do
        {
          v52 = *((_DWORD *)v39 - 1);
          v39 -= 4;
          *((_DWORD *)v43 - 1) = v52;
          v43 -= 4;
        }
        while (v39 != v38);
      }
LABEL_55:
      *(_QWORD *)(v15 + 24) = v43;
      *(_QWORD *)(v15 + 32) = v42;
      *(_QWORD *)(v15 + 40) = &v40[4 * a2];
      if (v38)
        operator delete(v38);
LABEL_25:
      v15 += 80;
    }
    while (v15 != v16);
  }
}

void sub_20FD367D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20EF14A3C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20FD367E4(uint64_t a1, size_t a2, uint64_t a3, int a4, _QWORD *a5, _QWORD *a6, _QWORD *a7, _QWORD *a8, _QWORD *a9, _QWORD *a10, _QWORD *a11)
{
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;

  v19 = *(_QWORD *)(a1 + 16);
  sub_20FD3540C(a1, *(_QWORD *)a1 + 1, *(_QWORD *)(a1 + 8), v19 + a2);
  *(_QWORD *)(*(_QWORD *)(a1 + 160) - 8) = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(*(_QWORD *)(a1 + 136) - 8) = a3;
  if (a2)
  {
    memset((void *)(*(_QWORD *)(a1 + 80) + v19), 1, a2);
    memset((void *)(*(_QWORD *)(a1 + 104) + v19), 1, a2);
  }
  if (a5)
    *a5 = *(_QWORD *)(a1 + 224) + 8 * v19;
  if (a7)
    *a7 = *(_QWORD *)(a1 + 32) + 16 * v19;
  if (a9)
    *a9 = *(_QWORD *)(a1 + 56) + 4 * v19;
  if (a11)
    *a11 = *(_QWORD *)(a1 + 80) + v19;
  *(_DWORD *)(*(_QWORD *)(a1 + 184) - 4) = a4;
  sub_20FD35918(a1, *(_QWORD *)(a1 + 16), *(_DWORD *)(a1 + 488));
  if (a6)
  {
    v20 = *(unsigned int *)(a1 + 488);
    if ((_DWORD)v20)
    {
      v21 = (uint64_t *)(a1 + 304);
      do
      {
        v22 = *v21;
        v21 += 10;
        *a6++ = v22 + 8 * v19;
        --v20;
      }
      while (v20);
    }
  }
  v23 = a10;
  if (a8)
  {
    v24 = *(unsigned int *)(a1 + 488);
    if ((_DWORD)v24)
    {
      v25 = (uint64_t *)(a1 + 248);
      do
      {
        v26 = *v25;
        v25 += 10;
        *a8++ = v26 + 16 * v19;
        --v24;
      }
      while (v24);
    }
  }
  if (a10)
  {
    v27 = *(unsigned int *)(a1 + 488);
    if ((_DWORD)v27)
    {
      v28 = (uint64_t *)(a1 + 272);
      do
      {
        v29 = *v28;
        v28 += 10;
        *v23++ = v29 + 4 * v19;
        --v27;
      }
      while (v27);
    }
  }
}

void sub_20FD36960(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4)
{
  unint64_t v4;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  char *v17;
  unint64_t v18;
  size_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  size_t v23;
  char *v24;
  char *v25;
  char *v26;
  char *v27;
  unint64_t v28;
  char *v29;
  char *v30;
  unint64_t v31;
  __int128 v32;
  char *v33;
  char *v34;
  unint64_t v35;
  uint64_t v36;
  char *v37;
  char v38;
  char *v39;
  unint64_t v40;
  char *v41;
  unint64_t v42;
  size_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  size_t v47;
  char *v48;
  char *v49;
  char *v50;
  char *v51;
  unint64_t v52;
  char *v53;
  char *v54;
  unint64_t v55;
  __int128 v56;
  char *v57;
  char *v58;
  unint64_t v59;
  uint64_t v60;
  char *v61;
  char v62;
  uint64_t v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t v66;
  uint64_t v67;
  unint64_t v68;

  v4 = a4;
  if (a4 >= 0x1555555555555556
    && (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/BatchLeastSquaresUnsanitized/src/VisionMeasurements.cpp", 36, (uint64_t)"num_observations <= m_measurements.max_size()", 45, (uint64_t)"Size of requested track matrix exceeded maximum vector size.", 60, (void (*)(void **))sub_21023DDB0)|| (v4 & 0x8000000000000000) != 0&& sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/BatchLeastSquaresUnsanitized/src/VisionMeasurements.cpp", 38, (uint64_t)"num_observations <= m_mask.max_size()", 37, (uint64_t)"Size of requested track mask exceeded maximum vector size.", 58, (void (*)(void **))sub_21023DDB0)))
  {
    abort();
  }
  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = a3;
  *(_QWORD *)(a1 + 16) = v4;
  v8 = *(_QWORD *)(a1 + 176);
  v9 = (*(_QWORD *)(a1 + 184) - v8) >> 2;
  if (a2 <= v9)
  {
    if (a2 < v9)
      *(_QWORD *)(a1 + 184) = v8 + 4 * a2;
  }
  else
  {
    sub_20EAC24FC(a1 + 176, a2 - v9);
    v4 = *(_QWORD *)(a1 + 16);
  }
  v10 = *(_QWORD *)(a1 + 224);
  v11 = 0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(a1 + 232) - v10) >> 2);
  if (v4 <= v11)
  {
    if (v4 < v11)
      *(_QWORD *)(a1 + 232) = v10 + 12 * v4;
  }
  else
  {
    sub_20FD37D20(a1 + 224, v4 - v11);
    v4 = *(_QWORD *)(a1 + 16);
  }
  v12 = *(_QWORD *)(a1 + 32);
  v13 = (*(_QWORD *)(a1 + 40) - v12) >> 4;
  if (v4 <= v13)
  {
    if (v4 < v13)
      *(_QWORD *)(a1 + 40) = v12 + 16 * v4;
  }
  else
  {
    sub_20E99C28C((char **)(a1 + 32), v4 - v13);
    v4 = *(_QWORD *)(a1 + 16);
  }
  v14 = *(_QWORD *)(a1 + 56);
  v15 = (*(_QWORD *)(a1 + 64) - v14) >> 2;
  if (v4 <= v15)
  {
    if (v4 < v15)
      *(_QWORD *)(a1 + 64) = v14 + 4 * v4;
  }
  else
  {
    sub_20E9F5694(a1 + 56, v4 - v15);
    v4 = *(_QWORD *)(a1 + 16);
  }
  v17 = *(char **)(a1 + 80);
  v16 = *(char **)(a1 + 88);
  v18 = v16 - v17;
  v19 = v4 - (v16 - v17);
  if (v4 > v16 - v17)
  {
    v20 = *(_QWORD *)(a1 + 96);
    if (v20 - (uint64_t)v16 >= v19)
    {
      bzero(*(void **)(a1 + 88), v4 - (v16 - v17));
      *(_QWORD *)(a1 + 88) = &v17[v4];
      goto LABEL_51;
    }
    if ((v4 & 0x8000000000000000) != 0)
      goto LABEL_91;
    v21 = v20 - (_QWORD)v17;
    v22 = 2 * v21;
    if (2 * v21 <= v4)
      v22 = v4;
    if (v21 >= 0x3FFFFFFFFFFFFFFFLL)
      v23 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v23 = v22;
    v24 = (char *)operator new(v23);
    v25 = &v24[v18];
    v26 = &v24[v23];
    v27 = &v24[v4];
    bzero(&v24[v18], v19);
    if (v16 == v17)
      goto LABEL_49;
    if (v18 >= 8 && (unint64_t)(v17 - v24) >= 0x20)
    {
      if (v18 < 0x20)
      {
        v28 = 0;
        goto LABEL_41;
      }
      v28 = v18 & 0xFFFFFFFFFFFFFFE0;
      v29 = v16 - 16;
      v30 = &v24[v16 - 16 - v17];
      v31 = v18 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        v32 = *(_OWORD *)v29;
        *((_OWORD *)v30 - 1) = *((_OWORD *)v29 - 1);
        *(_OWORD *)v30 = v32;
        v30 -= 32;
        v29 -= 32;
        v31 -= 32;
      }
      while (v31);
      if (v18 == v28)
        goto LABEL_48;
      if ((v18 & 0x18) != 0)
      {
LABEL_41:
        v25 -= v18 & 0xFFFFFFFFFFFFFFF8;
        v33 = &v16[-v28 - 8];
        v34 = (char *)(v33 - v17);
        v35 = v28 - (v18 & 0xFFFFFFFFFFFFFFF8);
        do
        {
          v36 = *(_QWORD *)v33;
          v33 -= 8;
          *(_QWORD *)&v34[(_QWORD)v24] = v36;
          v34 -= 8;
          v35 += 8;
        }
        while (v35);
        v16 -= v18 & 0xFFFFFFFFFFFFFFF8;
        if (v18 == (v18 & 0xFFFFFFFFFFFFFFF8))
          goto LABEL_48;
        goto LABEL_46;
      }
      v25 -= v28;
      v16 -= v28;
    }
LABEL_46:
    v37 = v25 - 1;
    do
    {
      v38 = *--v16;
      *v37-- = v38;
    }
    while (v16 != v17);
LABEL_48:
    v16 = v17;
    v25 = v24;
LABEL_49:
    *(_QWORD *)(a1 + 80) = v25;
    *(_QWORD *)(a1 + 88) = v27;
    *(_QWORD *)(a1 + 96) = v26;
    if (v16)
      operator delete(v16);
    goto LABEL_51;
  }
  if (v4 < v16 - v17)
    *(_QWORD *)(a1 + 88) = &v17[v4];
LABEL_51:
  v39 = *(char **)(a1 + 104);
  v40 = *(_QWORD *)(a1 + 16);
  v41 = *(char **)(a1 + 112);
  v42 = v41 - v39;
  v43 = v40 - (v41 - v39);
  if (v40 > v41 - v39)
  {
    v44 = *(_QWORD *)(a1 + 120);
    if (v44 - (uint64_t)v41 >= v43)
    {
      bzero(*(void **)(a1 + 112), v40 - (v41 - v39));
      *(_QWORD *)(a1 + 112) = &v39[v40];
      goto LABEL_81;
    }
    if ((v40 & 0x8000000000000000) == 0)
    {
      v45 = v44 - (_QWORD)v39;
      v46 = 2 * v45;
      if (2 * v45 <= v40)
        v46 = *(_QWORD *)(a1 + 16);
      if (v45 >= 0x3FFFFFFFFFFFFFFFLL)
        v47 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v47 = v46;
      v48 = (char *)operator new(v47);
      v49 = &v48[v42];
      v50 = &v48[v47];
      v51 = &v48[v40];
      bzero(&v48[v42], v43);
      if (v41 == v39)
        goto LABEL_79;
      if (v42 >= 8 && (unint64_t)(v39 - v48) >= 0x20)
      {
        if (v42 < 0x20)
        {
          v52 = 0;
          goto LABEL_71;
        }
        v52 = v42 & 0xFFFFFFFFFFFFFFE0;
        v53 = v41 - 16;
        v54 = &v48[v41 - 16 - v39];
        v55 = v42 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          v56 = *(_OWORD *)v53;
          *((_OWORD *)v54 - 1) = *((_OWORD *)v53 - 1);
          *(_OWORD *)v54 = v56;
          v54 -= 32;
          v53 -= 32;
          v55 -= 32;
        }
        while (v55);
        if (v42 == v52)
          goto LABEL_78;
        if ((v42 & 0x18) != 0)
        {
LABEL_71:
          v49 -= v42 & 0xFFFFFFFFFFFFFFF8;
          v57 = &v41[-v52 - 8];
          v58 = (char *)(v57 - v39);
          v59 = v52 - (v42 & 0xFFFFFFFFFFFFFFF8);
          do
          {
            v60 = *(_QWORD *)v57;
            v57 -= 8;
            *(_QWORD *)&v58[(_QWORD)v48] = v60;
            v58 -= 8;
            v59 += 8;
          }
          while (v59);
          v41 -= v42 & 0xFFFFFFFFFFFFFFF8;
          if (v42 == (v42 & 0xFFFFFFFFFFFFFFF8))
            goto LABEL_78;
          goto LABEL_76;
        }
        v49 -= v52;
        v41 -= v52;
      }
LABEL_76:
      v61 = v49 - 1;
      do
      {
        v62 = *--v41;
        *v61-- = v62;
      }
      while (v41 != v39);
LABEL_78:
      v41 = v39;
      v49 = v48;
LABEL_79:
      *(_QWORD *)(a1 + 104) = v49;
      *(_QWORD *)(a1 + 112) = v51;
      *(_QWORD *)(a1 + 120) = v50;
      if (v41)
        operator delete(v41);
      goto LABEL_81;
    }
LABEL_91:
    sub_20E867F44();
  }
  if (v40 < v41 - v39)
    *(_QWORD *)(a1 + 112) = &v39[v40];
LABEL_81:
  v63 = *(_QWORD *)(a1 + 152);
  v64 = *(_QWORD *)a1;
  v65 = *(_QWORD *)a1 + 1;
  v66 = (*(_QWORD *)(a1 + 160) - v63) >> 3;
  if (v65 <= v66)
  {
    if (v65 < v66)
      *(_QWORD *)(a1 + 160) = v63 + 8 * v65;
  }
  else
  {
    sub_20EAC9ECC(a1 + 152, v65 - v66);
    v64 = *(_QWORD *)a1;
  }
  v67 = *(_QWORD *)(a1 + 128);
  v68 = (*(_QWORD *)(a1 + 136) - v67) >> 3;
  if (v64 <= v68)
  {
    if (v64 < v68)
      *(_QWORD *)(a1 + 136) = v67 + 8 * v64;
  }
  else
  {
    sub_20EAC9ECC(a1 + 128, v64 - v68);
  }
}

void sub_20FD36E88(uint64_t a1, unint64_t a2, unsigned int a3)
{
  unsigned int v6;
  _QWORD *v7;
  void *v8;
  unint64_t v9;
  _QWORD *v10;
  void *v11;
  void *v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  void *v23[2];
  void *v24[2];
  __int128 v25;
  void *__p[2];
  __int128 v27;

  if (*(_QWORD *)(a1 + 16) != a2
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/BatchLeastSquaresUnsanitized/src/VisionMeasurements.cpp", 58, (uint64_t)"num_observations == m_num_observations", 38, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
    goto LABEL_41;
  }
  *(_OWORD *)__p = 0u;
  v27 = 0u;
  *(_OWORD *)v24 = 0u;
  v25 = 0u;
  *(_OWORD *)v23 = 0u;
  v6 = *(_DWORD *)(a1 + 488);
  if (v6 >= a3)
  {
    if (v6 > a3)
    {
      v9 = a3;
      v10 = (_QWORD *)(a1 + 80 * a3 + 312);
      do
      {
        v11 = (void *)*(v10 - 1);
        if (v11)
        {
          *v10 = v11;
          operator delete(v11);
        }
        v12 = (void *)*(v10 - 5);
        if (v12)
        {
          *(v10 - 4) = v12;
          operator delete(v12);
        }
        v13 = (void *)*(v10 - 8);
        if (v13)
        {
          *(v10 - 7) = v13;
          operator delete(v13);
        }
        ++v9;
        v10 += 10;
      }
      while (v9 < *(unsigned int *)(a1 + 488));
    }
    *(_DWORD *)(a1 + 488) = a3;
  }
  else
  {
    v7 = (_QWORD *)(a1 + 80 * v6 + 248);
    do
    {
      ++v6;
      v7 = sub_20FD380B4(v7, (uint64_t)v23) + 10;
    }
    while (a3 != v6);
    v8 = __p[1];
    *(_DWORD *)(a1 + 488) = a3;
    if (v8)
    {
      *(_QWORD *)&v27 = v8;
      operator delete(v8);
    }
  }
  if (v24[1])
  {
    *(void **)&v25 = v24[1];
    operator delete(v24[1]);
  }
  if (v23[0])
  {
    v23[1] = v23[0];
    operator delete(v23[0]);
  }
  if (a2 >= 0x1555555555555556
    && a3
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/BatchLeastSquaresUnsanitized/src/VisionMeasurements.cpp", 62, (uint64_t)"num_secondary_streams == 0 || num_observations <= m_secondary.front().measurements.max_size()", 93, (uint64_t)"Size of requested track matrix exceeded maximum vector size.", 60, (void (*)(void **))sub_21023DDB0))
  {
LABEL_41:
    abort();
  }
  v14 = *(unsigned int *)(a1 + 488);
  if ((_DWORD)v14)
  {
    v15 = a1 + 248;
    v16 = 80 * v14;
    do
    {
      v17 = *(_QWORD *)(v15 + 56);
      v18 = *(_QWORD *)(a1 + 16);
      v19 = 0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(v15 + 64) - v17) >> 2);
      if (v18 <= v19)
      {
        if (v18 < v19)
          *(_QWORD *)(v15 + 64) = v17 + 12 * v18;
      }
      else
      {
        sub_20FD37D20(v15 + 56, v18 - v19);
        v18 = *(_QWORD *)(a1 + 16);
      }
      v20 = (uint64_t)(*(_QWORD *)(v15 + 8) - *(_QWORD *)v15) >> 4;
      if (v18 <= v20)
      {
        if (v18 < v20)
          *(_QWORD *)(v15 + 8) = *(_QWORD *)v15 + 16 * v18;
      }
      else
      {
        sub_20E99C28C((char **)v15, v18 - v20);
        v18 = *(_QWORD *)(a1 + 16);
      }
      v21 = *(_QWORD *)(v15 + 24);
      v22 = (*(_QWORD *)(v15 + 32) - v21) >> 2;
      if (v18 > v22)
      {
        sub_20E9F5694(v15 + 24, v18 - v22);
      }
      else if (v18 < v22)
      {
        *(_QWORD *)(v15 + 32) = v21 + 4 * v18;
      }
      v15 += 80;
      v16 -= 80;
    }
    while (v16);
  }
}

void sub_20FD370F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20EF14A3C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20FD37108(_QWORD *a1, unint64_t a2, uint64_t a3, size_t a4)
{
  size_t v7;
  _BYTE *v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  uint64_t v14;
  int v15;
  _BYTE *v16;
  char *v17;
  char *v18;
  char *v19;
  char *v20;
  _BYTE *v21;
  _BYTE *v22;
  char *v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  char *v30;
  char *v31;
  __int128 *v32;
  uint64_t v33;
  __int128 v34;
  int v35;
  _BYTE *v36;
  _BYTE *v37;
  _BYTE *v38;
  unint64_t v39;
  char *v40;
  _BYTE *v41;
  char *v42;
  unint64_t v43;
  __int128 *v44;
  _OWORD *v45;
  unint64_t v46;
  __int128 v47;
  char *v48;
  int64_t v49;
  unint64_t v50;
  uint64_t v51;
  char *v52;
  char v53;
  _BYTE *v54;
  _BYTE *v55;
  _BYTE *v56;
  unint64_t v57;
  char *v58;
  _BYTE *v59;
  char *v60;
  unint64_t v61;
  __int128 *v62;
  _OWORD *v63;
  unint64_t v64;
  __int128 v65;
  char *v66;
  int64_t v67;
  unint64_t v68;
  uint64_t v69;
  char *v70;
  char v71;
  _BYTE *v72;
  unint64_t v73;
  _BYTE *v74;
  uint64_t v75;
  char *v76;
  uint64_t v77;
  char *v78;
  char *v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t v82;
  char *v83;
  char *v84;
  __int128 *v85;
  uint64_t v86;
  __int128 v87;
  uint64_t v88;
  _BYTE *v89;
  _BYTE *v90;
  char *v91;
  uint64_t v92;
  char *v93;
  char *v94;
  uint64_t v95;
  unint64_t v96;
  uint64_t v97;
  char *v98;
  char *v99;
  __int128 *v100;
  uint64_t v101;
  __int128 v102;
  uint64_t v103;
  _BYTE *v104;
  _BYTE *v105;
  size_t v106;
  char *v107;
  uint64_t v108;
  char *v109;
  char *v110;
  uint64_t v111;
  unint64_t v112;
  uint64_t v113;
  char *v114;
  char *v115;
  __int128 *v116;
  uint64_t v117;
  __int128 v118;
  int v119;

  if (a4 >= 0x1555555555555556)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/BatchLeastSquaresUnsanitized/src/VisionMeasurements.cpp", 79, (uint64_t)"num_observations <= m_measurements.max_size()", 45, (uint64_t)"Size of requested track matrix exceeded maximum vector size.", 60, (void (*)(void **))sub_21023DDB0)|| (a4 & 0x8000000000000000) != 0&& sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/BatchLeastSquaresUnsanitized/src/VisionMeasurements.cpp", 81, (uint64_t)"num_observations <= m_mask.max_size()", 37, (uint64_t)"Size of requested track mask exceeded maximum vector size.", 58, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a1[30] - a1[28]) >> 2) < a4)
      sub_20E867F44();
    v7 = a4 >> 63;
    v8 = (_BYTE *)a1[4];
    if (a4 <= (uint64_t)(a1[6] - (_QWORD)v8) >> 4)
      goto LABEL_21;
LABEL_15:
    if (a4 >> 60)
      sub_20E867F44();
    v16 = (_BYTE *)a1[5];
    v17 = (char *)operator new(16 * a4);
    v18 = &v17[(v16 - v8) & 0xFFFFFFFFFFFFFFF0];
    v19 = v18;
    if (v16 != v8)
    {
      v20 = &v17[(v16 - v8) & 0xFFFFFFFFFFFFFFF0];
      do
      {
        v19 = v20 - 16;
        *((_OWORD *)v20 - 1) = *((_OWORD *)v16 - 1);
        v16 -= 16;
        v20 -= 16;
      }
      while (v16 != v8);
    }
    a1[4] = v19;
    a1[5] = v18;
    a1[6] = &v17[16 * a4];
    if (v8)
      operator delete(v8);
    goto LABEL_21;
  }
  v9 = (char *)a1[28];
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a1[30] - (_QWORD)v9) >> 2) < a4)
  {
    v10 = (char *)a1[29];
    v11 = (char *)operator new(12 * a4);
    v12 = &v11[12 * ((v10 - v9) / 12)];
    v13 = v12;
    if (v10 != v9)
    {
      v13 = &v11[12 * ((v10 - v9) / 12)];
      do
      {
        v14 = *(_QWORD *)(v10 - 12);
        v10 -= 12;
        v15 = *((_DWORD *)v10 + 2);
        *(_QWORD *)(v13 - 12) = v14;
        v13 -= 12;
        *((_DWORD *)v13 + 2) = v15;
      }
      while (v10 != v9);
    }
    a1[28] = v13;
    a1[29] = v12;
    a1[30] = &v11[12 * a4];
    if (v9)
      operator delete(v9);
  }
  LODWORD(v7) = 0;
  v8 = (_BYTE *)a1[4];
  if (a4 > (uint64_t)(a1[6] - (_QWORD)v8) >> 4)
    goto LABEL_15;
LABEL_21:
  v21 = (_BYTE *)a1[7];
  if (a4 <= (uint64_t)(a1[9] - (_QWORD)v21) >> 2)
    goto LABEL_33;
  if (a4 >> 62)
    sub_20E867F44();
  v22 = (_BYTE *)a1[8];
  v23 = (char *)operator new(4 * a4);
  v24 = v22 - v21;
  v25 = &v23[(v22 - v21) & 0xFFFFFFFFFFFFFFFCLL];
  v26 = v25;
  if (v22 != v21)
  {
    if ((unint64_t)(v24 - 4) < 0x2C)
    {
      v26 = &v23[(v22 - v21) & 0xFFFFFFFFFFFFFFFCLL];
      do
      {
LABEL_30:
        v35 = *((_DWORD *)v22 - 1);
        v22 -= 4;
        *((_DWORD *)v26 - 1) = v35;
        v26 -= 4;
      }
      while (v22 != v21);
      goto LABEL_31;
    }
    v26 = &v23[(v22 - v21) & 0xFFFFFFFFFFFFFFFCLL];
    if (v22 - v23 - (v24 & 0xFFFFFFFFFFFFFFFCLL) < 0x20)
      goto LABEL_30;
    v27 = v24 >> 2;
    v28 = ((unint64_t)(v24 - 4) >> 2) + 1;
    v29 = 4 * (v28 & 0x7FFFFFFFFFFFFFF8);
    v30 = &v22[-v29];
    v26 = &v25[-v29];
    v31 = &v23[4 * v27 - 16];
    v32 = (__int128 *)(v22 - 16);
    v33 = v28 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v34 = *v32;
      *((_OWORD *)v31 - 1) = *(v32 - 1);
      *(_OWORD *)v31 = v34;
      v31 -= 32;
      v32 -= 2;
      v33 -= 8;
    }
    while (v33);
    v22 = v30;
    if (v28 != (v28 & 0x7FFFFFFFFFFFFFF8))
      goto LABEL_30;
  }
LABEL_31:
  a1[7] = v26;
  a1[8] = v25;
  a1[9] = &v23[4 * a4];
  if (v21)
    operator delete(v21);
LABEL_33:
  v36 = (_BYTE *)a1[10];
  if (a1[12] - (_QWORD)v36 >= a4)
    goto LABEL_55;
  if ((_DWORD)v7)
    goto LABEL_119;
  v37 = (_BYTE *)a1[11];
  v38 = operator new(a4);
  v39 = v37 - v36;
  v40 = &v38[v37 - v36];
  v41 = v40;
  if (v37 != v36)
  {
    if (v39 < 8)
    {
      v42 = &v38[v37 - v36];
      goto LABEL_50;
    }
    v42 = &v38[v37 - v36];
    if ((unint64_t)(v36 - v38) >= 0x20)
    {
      if (v39 < 0x20)
      {
        v43 = 0;
        goto LABEL_45;
      }
      v43 = v39 & 0xFFFFFFFFFFFFFFE0;
      v44 = (__int128 *)(v37 - 16);
      v45 = &v38[v37 - 16 - v36];
      v46 = v39 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        v47 = *v44;
        *(v45 - 1) = *(v44 - 1);
        *v45 = v47;
        v45 -= 2;
        v44 -= 2;
        v46 -= 32;
      }
      while (v46);
      if (v39 == v43)
        goto LABEL_52;
      if ((v39 & 0x18) != 0)
      {
LABEL_45:
        v42 = &v40[-(v39 & 0xFFFFFFFFFFFFFFF8)];
        v48 = &v37[-v43 - 8];
        v49 = v48 - v36;
        v50 = v43 - (v39 & 0xFFFFFFFFFFFFFFF8);
        do
        {
          v51 = *(_QWORD *)v48;
          v48 -= 8;
          *(_QWORD *)&v38[v49] = v51;
          v49 -= 8;
          v50 += 8;
        }
        while (v50);
        v37 -= v39 & 0xFFFFFFFFFFFFFFF8;
        if (v39 == (v39 & 0xFFFFFFFFFFFFFFF8))
          goto LABEL_52;
        goto LABEL_50;
      }
      v42 = &v40[-v43];
      v37 -= v43;
    }
LABEL_50:
    v52 = v42 - 1;
    do
    {
      v53 = *--v37;
      *v52-- = v53;
    }
    while (v37 != v36);
LABEL_52:
    v41 = v38;
  }
  a1[10] = v41;
  a1[11] = v40;
  a1[12] = &v38[a4];
  if (v36)
    operator delete(v36);
LABEL_55:
  v54 = (_BYTE *)a1[13];
  if (a1[15] - (_QWORD)v54 >= a4)
    goto LABEL_77;
  if ((_DWORD)v7)
LABEL_119:
    sub_20E867F44();
  v55 = (_BYTE *)a1[14];
  v56 = operator new(a4);
  v57 = v55 - v54;
  v58 = &v56[v55 - v54];
  v59 = v58;
  if (v55 == v54)
    goto LABEL_75;
  if (v57 < 8)
  {
    v60 = &v56[v55 - v54];
    goto LABEL_72;
  }
  v60 = &v56[v55 - v54];
  if ((unint64_t)(v54 - v56) >= 0x20)
  {
    if (v57 < 0x20)
    {
      v61 = 0;
      goto LABEL_67;
    }
    v61 = v57 & 0xFFFFFFFFFFFFFFE0;
    v62 = (__int128 *)(v55 - 16);
    v63 = &v56[v55 - 16 - v54];
    v64 = v57 & 0xFFFFFFFFFFFFFFE0;
    do
    {
      v65 = *v62;
      *(v63 - 1) = *(v62 - 1);
      *v63 = v65;
      v63 -= 2;
      v62 -= 2;
      v64 -= 32;
    }
    while (v64);
    if (v57 == v61)
      goto LABEL_74;
    if ((v57 & 0x18) != 0)
    {
LABEL_67:
      v60 = &v58[-(v57 & 0xFFFFFFFFFFFFFFF8)];
      v66 = &v55[-v61 - 8];
      v67 = v66 - v54;
      v68 = v61 - (v57 & 0xFFFFFFFFFFFFFFF8);
      do
      {
        v69 = *(_QWORD *)v66;
        v66 -= 8;
        *(_QWORD *)&v56[v67] = v69;
        v67 -= 8;
        v68 += 8;
      }
      while (v68);
      v55 -= v57 & 0xFFFFFFFFFFFFFFF8;
      if (v57 == (v57 & 0xFFFFFFFFFFFFFFF8))
        goto LABEL_74;
      goto LABEL_72;
    }
    v60 = &v58[-v61];
    v55 -= v61;
  }
LABEL_72:
  v70 = v60 - 1;
  do
  {
    v71 = *--v55;
    *v70-- = v71;
  }
  while (v55 != v54);
LABEL_74:
  v59 = v56;
LABEL_75:
  a1[13] = v59;
  a1[14] = v58;
  a1[15] = &v56[a4];
  if (v54)
    operator delete(v54);
LABEL_77:
  v72 = (_BYTE *)a1[19];
  v73 = a2 + 1;
  if (a2 + 1 <= (uint64_t)(a1[21] - (_QWORD)v72) >> 3)
    goto LABEL_89;
  if (v73 >> 61)
    goto LABEL_114;
  v74 = (_BYTE *)a1[20];
  v75 = 8 * v73;
  v76 = (char *)operator new(8 * v73);
  v77 = v74 - v72;
  v78 = &v76[(v74 - v72) & 0xFFFFFFFFFFFFFFF8];
  v79 = v78;
  if (v74 != v72)
  {
    if ((unint64_t)(v77 - 8) < 0x58)
    {
      v79 = &v76[(v74 - v72) & 0xFFFFFFFFFFFFFFF8];
      do
      {
LABEL_86:
        v88 = *((_QWORD *)v74 - 1);
        v74 -= 8;
        *((_QWORD *)v79 - 1) = v88;
        v79 -= 8;
      }
      while (v74 != v72);
      goto LABEL_87;
    }
    v79 = &v76[(v74 - v72) & 0xFFFFFFFFFFFFFFF8];
    if (v74 - v76 - (v77 & 0xFFFFFFFFFFFFFFF8) < 0x20)
      goto LABEL_86;
    v80 = v77 >> 3;
    v81 = ((unint64_t)(v77 - 8) >> 3) + 1;
    v82 = 8 * (v81 & 0x3FFFFFFFFFFFFFFCLL);
    v83 = &v74[-v82];
    v79 = &v78[-v82];
    v84 = &v76[8 * v80 - 16];
    v85 = (__int128 *)(v74 - 16);
    v86 = v81 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v87 = *v85;
      *((_OWORD *)v84 - 1) = *(v85 - 1);
      *(_OWORD *)v84 = v87;
      v84 -= 32;
      v85 -= 2;
      v86 -= 4;
    }
    while (v86);
    v74 = v83;
    if (v81 != (v81 & 0x3FFFFFFFFFFFFFFCLL))
      goto LABEL_86;
  }
LABEL_87:
  a1[19] = v79;
  a1[20] = v78;
  a1[21] = &v76[v75];
  if (v72)
    operator delete(v72);
LABEL_89:
  v89 = (_BYTE *)a1[16];
  if (a2 <= (uint64_t)(a1[18] - (_QWORD)v89) >> 3)
    goto LABEL_101;
  if (a2 >> 61)
LABEL_114:
    sub_20E867F44();
  v90 = (_BYTE *)a1[17];
  v91 = (char *)operator new(8 * a2);
  v92 = v90 - v89;
  v93 = &v91[(v90 - v89) & 0xFFFFFFFFFFFFFFF8];
  v94 = v93;
  if (v90 == v89)
    goto LABEL_99;
  if ((unint64_t)(v92 - 8) < 0x58)
  {
    v94 = &v91[(v90 - v89) & 0xFFFFFFFFFFFFFFF8];
    do
    {
LABEL_98:
      v103 = *((_QWORD *)v90 - 1);
      v90 -= 8;
      *((_QWORD *)v94 - 1) = v103;
      v94 -= 8;
    }
    while (v90 != v89);
    goto LABEL_99;
  }
  v94 = &v91[(v90 - v89) & 0xFFFFFFFFFFFFFFF8];
  if (v90 - v91 - (v92 & 0xFFFFFFFFFFFFFFF8) < 0x20)
    goto LABEL_98;
  v95 = v92 >> 3;
  v96 = ((unint64_t)(v92 - 8) >> 3) + 1;
  v97 = 8 * (v96 & 0x3FFFFFFFFFFFFFFCLL);
  v98 = &v90[-v97];
  v94 = &v93[-v97];
  v99 = &v91[8 * v95 - 16];
  v100 = (__int128 *)(v90 - 16);
  v101 = v96 & 0x3FFFFFFFFFFFFFFCLL;
  do
  {
    v102 = *v100;
    *((_OWORD *)v99 - 1) = *(v100 - 1);
    *(_OWORD *)v99 = v102;
    v99 -= 32;
    v100 -= 2;
    v101 -= 4;
  }
  while (v101);
  v90 = v98;
  if (v96 != (v96 & 0x3FFFFFFFFFFFFFFCLL))
    goto LABEL_98;
LABEL_99:
  a1[16] = v94;
  a1[17] = v93;
  a1[18] = &v91[8 * a2];
  if (v89)
    operator delete(v89);
LABEL_101:
  v104 = (_BYTE *)a1[22];
  if (a2 <= (uint64_t)(a1[24] - (_QWORD)v104) >> 2)
    return;
  if (a2 >> 62)
    sub_20EABADD4();
  v105 = (_BYTE *)a1[23];
  v106 = 4 * a2;
  v107 = (char *)operator new(v106);
  v108 = v105 - v104;
  v109 = &v107[(v105 - v104) & 0xFFFFFFFFFFFFFFFCLL];
  v110 = v109;
  if (v105 != v104)
  {
    if ((unint64_t)(v108 - 4) >= 0x2C)
    {
      v110 = &v107[(v105 - v104) & 0xFFFFFFFFFFFFFFFCLL];
      if (v105 - v107 - (v108 & 0xFFFFFFFFFFFFFFFCLL) >= 0x20)
      {
        v111 = v108 >> 2;
        v112 = ((unint64_t)(v108 - 4) >> 2) + 1;
        v113 = 4 * (v112 & 0x7FFFFFFFFFFFFFF8);
        v114 = &v105[-v113];
        v110 = &v109[-v113];
        v115 = &v107[4 * v111 - 16];
        v116 = (__int128 *)(v105 - 16);
        v117 = v112 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          v118 = *v116;
          *((_OWORD *)v115 - 1) = *(v116 - 1);
          *(_OWORD *)v115 = v118;
          v115 -= 32;
          v116 -= 2;
          v117 -= 8;
        }
        while (v117);
        v105 = v114;
        if (v112 == (v112 & 0x7FFFFFFFFFFFFFF8))
          goto LABEL_111;
      }
    }
    else
    {
      v110 = &v107[(v105 - v104) & 0xFFFFFFFFFFFFFFFCLL];
    }
    do
    {
      v119 = *((_DWORD *)v105 - 1);
      v105 -= 4;
      *((_DWORD *)v110 - 1) = v119;
      v110 -= 4;
    }
    while (v105 != v104);
  }
LABEL_111:
  a1[22] = v110;
  a1[23] = v109;
  a1[24] = &v107[v106];
  if (v104)
    operator delete(v104);
}

void sub_20FD37948(uint64_t a1, unint64_t a2, unsigned int a3)
{
  unsigned int v6;
  _QWORD *v7;
  void *v8;
  unint64_t v9;
  _QWORD *v10;
  void *v11;
  void *v12;
  void *v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  char *v19;
  char *v20;
  char *v21;
  uint64_t v22;
  int v23;
  _BYTE *v24;
  _BYTE *v25;
  char *v26;
  char *v27;
  char *v28;
  char *v29;
  _BYTE *v30;
  _BYTE *v31;
  char *v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  char *v39;
  char *v40;
  __int128 *v41;
  uint64_t v42;
  __int128 v43;
  int v44;
  void *v45[2];
  void *v46[2];
  __int128 v47;
  void *__p[2];
  __int128 v49;

  *(_OWORD *)__p = 0u;
  v49 = 0u;
  *(_OWORD *)v46 = 0u;
  v47 = 0u;
  *(_OWORD *)v45 = 0u;
  v6 = *(_DWORD *)(a1 + 488);
  if (v6 >= a3)
  {
    if (v6 > a3)
    {
      v9 = a3;
      v10 = (_QWORD *)(a1 + 80 * a3 + 312);
      do
      {
        v11 = (void *)*(v10 - 1);
        if (v11)
        {
          *v10 = v11;
          operator delete(v11);
        }
        v12 = (void *)*(v10 - 5);
        if (v12)
        {
          *(v10 - 4) = v12;
          operator delete(v12);
        }
        v13 = (void *)*(v10 - 8);
        if (v13)
        {
          *(v10 - 7) = v13;
          operator delete(v13);
        }
        ++v9;
        v10 += 10;
      }
      while (v9 < *(unsigned int *)(a1 + 488));
    }
    *(_DWORD *)(a1 + 488) = a3;
  }
  else
  {
    v7 = (_QWORD *)(a1 + 80 * v6 + 248);
    do
    {
      ++v6;
      v7 = sub_20FD380B4(v7, (uint64_t)v45) + 10;
    }
    while (a3 != v6);
    v8 = __p[1];
    *(_DWORD *)(a1 + 488) = a3;
    if (v8)
    {
      *(_QWORD *)&v49 = v8;
      operator delete(v8);
    }
  }
  if (v46[1])
  {
    *(void **)&v47 = v46[1];
    operator delete(v46[1]);
  }
  if (v45[0])
  {
    v45[1] = v45[0];
    operator delete(v45[0]);
  }
  if (a2 >= 0x1555555555555556
    && a3
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/BatchLeastSquaresUnsanitized/src/VisionMeasurements.cpp", 99, (uint64_t)"num_secondary_streams == 0 || num_observations <= m_secondary.front().measurements.max_size()", 93, (uint64_t)"Size of requested track matrix exceeded maximum vector size.", 60, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v14 = *(_DWORD *)(a1 + 488);
  if (v14)
  {
    v15 = a1 + 248;
    v16 = v15 + 80 * v14;
    do
    {
      v17 = *(char **)(v15 + 56);
      if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v15 + 72) - (_QWORD)v17) >> 2) < a2)
      {
        if (a2 >= 0x1555555555555556)
          sub_20E867F44();
        v18 = *(char **)(v15 + 64);
        v19 = (char *)operator new(12 * a2);
        v20 = &v19[12 * ((v18 - v17) / 12)];
        v21 = v20;
        if (v18 != v17)
        {
          v21 = &v19[12 * ((v18 - v17) / 12)];
          do
          {
            v22 = *(_QWORD *)(v18 - 12);
            v18 -= 12;
            v23 = *((_DWORD *)v18 + 2);
            *(_QWORD *)(v21 - 12) = v22;
            v21 -= 12;
            *((_DWORD *)v21 + 2) = v23;
          }
          while (v18 != v17);
        }
        *(_QWORD *)(v15 + 56) = v21;
        *(_QWORD *)(v15 + 64) = v20;
        *(_QWORD *)(v15 + 72) = &v19[12 * a2];
        if (v17)
          operator delete(v17);
      }
      v24 = *(_BYTE **)v15;
      if (a2 > (uint64_t)(*(_QWORD *)(v15 + 16) - *(_QWORD *)v15) >> 4)
      {
        if (a2 >> 60)
          sub_20E867F44();
        v25 = *(_BYTE **)(v15 + 8);
        v26 = (char *)operator new(16 * a2);
        v27 = &v26[(v25 - v24) & 0xFFFFFFFFFFFFFFF0];
        v28 = v27;
        if (v25 != v24)
        {
          v29 = &v26[(v25 - v24) & 0xFFFFFFFFFFFFFFF0];
          do
          {
            v28 = v29 - 16;
            *((_OWORD *)v29 - 1) = *((_OWORD *)v25 - 1);
            v25 -= 16;
            v29 -= 16;
          }
          while (v25 != v24);
        }
        *(_QWORD *)v15 = v28;
        *(_QWORD *)(v15 + 8) = v27;
        *(_QWORD *)(v15 + 16) = &v26[16 * a2];
        if (v24)
          operator delete(v24);
      }
      v30 = *(_BYTE **)(v15 + 24);
      if (a2 <= (uint64_t)(*(_QWORD *)(v15 + 40) - (_QWORD)v30) >> 2)
        goto LABEL_25;
      if (a2 >> 62)
        sub_20E867F44();
      v31 = *(_BYTE **)(v15 + 32);
      v32 = (char *)operator new(4 * a2);
      v33 = v31 - v30;
      v34 = &v32[(v31 - v30) & 0xFFFFFFFFFFFFFFFCLL];
      v35 = v34;
      if (v31 != v30)
      {
        if ((unint64_t)(v33 - 4) >= 0x2C)
        {
          v35 = &v32[(v31 - v30) & 0xFFFFFFFFFFFFFFFCLL];
          if (v31 - v32 - (v33 & 0xFFFFFFFFFFFFFFFCLL) >= 0x20)
          {
            v36 = v33 >> 2;
            v37 = ((unint64_t)(v33 - 4) >> 2) + 1;
            v38 = 4 * (v37 & 0x7FFFFFFFFFFFFFF8);
            v39 = &v31[-v38];
            v35 = &v34[-v38];
            v40 = &v32[4 * v36 - 16];
            v41 = (__int128 *)(v31 - 16);
            v42 = v37 & 0x7FFFFFFFFFFFFFF8;
            do
            {
              v43 = *v41;
              *((_OWORD *)v40 - 1) = *(v41 - 1);
              *(_OWORD *)v40 = v43;
              v40 -= 32;
              v41 -= 2;
              v42 -= 8;
            }
            while (v42);
            v31 = v39;
            if (v37 == (v37 & 0x7FFFFFFFFFFFFFF8))
              goto LABEL_50;
          }
        }
        else
        {
          v35 = &v32[(v31 - v30) & 0xFFFFFFFFFFFFFFFCLL];
        }
        do
        {
          v44 = *((_DWORD *)v31 - 1);
          v31 -= 4;
          *((_DWORD *)v35 - 1) = v44;
          v35 -= 4;
        }
        while (v31 != v30);
      }
LABEL_50:
      *(_QWORD *)(v15 + 24) = v35;
      *(_QWORD *)(v15 + 32) = v34;
      *(_QWORD *)(v15 + 40) = &v32[4 * a2];
      if (v30)
        operator delete(v30);
LABEL_25:
      v15 += 80;
    }
    while (v15 != v16);
  }
}

void sub_20FD37D0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20EF14A3C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20FD37D20(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  _DWORD *v5;
  _DWORD *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  size_t v12;
  char *v13;
  char *v14;
  size_t v15;
  char *v16;
  uint64_t v17;
  int v18;

  v5 = *(_DWORD **)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  if (0xAAAAAAAAAAAAAAABLL * ((v4 - (uint64_t)v5) >> 2) >= a2)
  {
    if (a2)
    {
      v12 = 12 * ((12 * a2 - 12) / 0xC) + 12;
      bzero(*(void **)(a1 + 8), v12);
      v5 = (_DWORD *)((char *)v5 + v12);
    }
    *(_QWORD *)(a1 + 8) = v5;
  }
  else
  {
    v6 = *(_DWORD **)a1;
    v7 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v5 - *(_QWORD *)a1) >> 2);
    v8 = v7 + a2;
    if (v7 + a2 > 0x1555555555555555)
      sub_20E867F44();
    v9 = 0xAAAAAAAAAAAAAAABLL * ((v4 - (uint64_t)v6) >> 2);
    if (2 * v9 > v8)
      v8 = 2 * v9;
    if (v9 >= 0xAAAAAAAAAAAAAAALL)
      v10 = 0x1555555555555555;
    else
      v10 = v8;
    if (v10)
    {
      if (v10 > 0x1555555555555555)
        sub_20E877A38();
      v11 = (char *)operator new(12 * v10);
    }
    else
    {
      v11 = 0;
    }
    v13 = &v11[12 * v7];
    v14 = &v11[12 * v10];
    v15 = 12 * ((12 * a2 - 12) / 0xC) + 12;
    bzero(v13, v15);
    v16 = &v13[v15];
    if (v5 != v6)
    {
      do
      {
        v17 = *(_QWORD *)(v5 - 3);
        v5 -= 3;
        v18 = v5[2];
        *(_QWORD *)(v13 - 12) = v17;
        v13 -= 12;
        *((_DWORD *)v13 + 2) = v18;
      }
      while (v5 != v6);
      v5 = *(_DWORD **)a1;
    }
    *(_QWORD *)a1 = v13;
    *(_QWORD *)(a1 + 8) = v16;
    *(_QWORD *)(a1 + 16) = v14;
    if (v5)
      operator delete(v5);
  }
}

_QWORD *sub_20FD37EB0(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  _BYTE *v5;
  _BYTE *v6;
  uint64_t v7;
  char *v8;

  v4 = sub_20FD37F9C(a1, a2);
  v4[7] = 0;
  v4[8] = 0;
  v4[9] = 0;
  v6 = *(_BYTE **)(a2 + 56);
  v5 = *(_BYTE **)(a2 + 64);
  v7 = v5 - v6;
  if (v5 != v6)
  {
    if (v7 < 0)
      sub_20E867F44();
    v8 = (char *)operator new(v5 - v6);
    a1[7] = v8;
    a1[8] = v8;
    a1[9] = &v8[8 * (v7 >> 3)];
    memcpy(v8, v6, v7 & 0xFFFFFFFFFFFFFFF8);
    a1[8] = &v8[v7 & 0xFFFFFFFFFFFFFFF8];
  }
  return a1;
}

void sub_20FD37F44(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void **v3;
  void *v5;
  void *v6;
  void *v7;

  v3 = v2;
  v5 = *v3;
  if (*v3)
  {
    *(_QWORD *)(v1 + 64) = v5;
    operator delete(v5);
    v6 = *(void **)(v1 + 24);
    if (!v6)
    {
LABEL_3:
      v7 = *(void **)v1;
      if (!*(_QWORD *)v1)
        goto LABEL_4;
      goto LABEL_7;
    }
  }
  else
  {
    v6 = *(void **)(v1 + 24);
    if (!v6)
      goto LABEL_3;
  }
  *(_QWORD *)(v1 + 32) = v6;
  operator delete(v6);
  v7 = *(void **)v1;
  if (!*(_QWORD *)v1)
LABEL_4:
    _Unwind_Resume(exception_object);
LABEL_7:
  *(_QWORD *)(v1 + 8) = v7;
  operator delete(v7);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20FD37F9C(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  const void *v5;
  uint64_t v6;
  char *v7;
  size_t v8;
  _BYTE *v9;
  _BYTE *v10;
  int64_t v11;
  char *v12;
  char *v13;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v5 = *(const void **)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v6 = v4 - *(_QWORD *)a2;
  if (v4 != *(_QWORD *)a2)
  {
    if (v6 < 0)
      sub_20E867F44();
    v7 = (char *)operator new(v4 - *(_QWORD *)a2);
    *a1 = v7;
    a1[1] = v7;
    a1[2] = &v7[16 * (v6 >> 4)];
    v8 = v6 & 0xFFFFFFFFFFFFFFF0;
    memcpy(v7, v5, v8);
    a1[1] = &v7[v8];
  }
  a1[3] = 0;
  a1[4] = 0;
  a1[5] = 0;
  v10 = *(_BYTE **)(a2 + 24);
  v9 = *(_BYTE **)(a2 + 32);
  v11 = v9 - v10;
  if (v9 != v10)
  {
    if (v11 < 0)
      sub_20E867F44();
    v12 = (char *)operator new(v9 - v10);
    a1[3] = v12;
    a1[4] = v12;
    v13 = &v12[4 * (v11 >> 2)];
    a1[5] = v13;
    memcpy(v12, v10, v11);
    a1[4] = v13;
  }
  a1[6] = *(_QWORD *)(a2 + 48);
  return a1;
}

void sub_20FD38080(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void *v4;
  void *v5;

  v4 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 32) = v4;
    operator delete(v4);
  }
  v5 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v5;
    operator delete(v5);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20FD380B4(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  _BYTE *v5;
  _BYTE *v6;
  int64_t v7;
  char *v8;

  v4 = sub_20FD37F9C(a1, a2);
  v4[7] = 0;
  v4[8] = 0;
  v4[9] = 0;
  v6 = *(_BYTE **)(a2 + 56);
  v5 = *(_BYTE **)(a2 + 64);
  v7 = v5 - v6;
  if (v5 != v6)
  {
    if (0xAAAAAAAAAAAAAAABLL * (v7 >> 2) >= 0x1555555555555556)
      sub_20E867F44();
    v8 = (char *)operator new(v7);
    a1[7] = v8;
    a1[8] = v8;
    a1[9] = &v8[4 * (v7 >> 2)];
    memcpy(v8, v6, 12 * ((v7 - 12) / 0xCuLL) + 12);
    a1[8] = &v8[12 * ((v7 - 12) / 0xCuLL) + 12];
  }
  return a1;
}

void sub_20FD38180(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void *v4;
  void *v5;
  void *v6;

  v4 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 64) = v4;
    operator delete(v4);
    v5 = *(void **)(v1 + 24);
    if (!v5)
    {
LABEL_3:
      v6 = *(void **)v1;
      if (!*(_QWORD *)v1)
        goto LABEL_4;
      goto LABEL_7;
    }
  }
  else
  {
    v5 = *(void **)(v1 + 24);
    if (!v5)
      goto LABEL_3;
  }
  *(_QWORD *)(v1 + 32) = v5;
  operator delete(v5);
  v6 = *(void **)v1;
  if (!*(_QWORD *)v1)
LABEL_4:
    _Unwind_Resume(exception_object);
LABEL_7:
  *(_QWORD *)(v1 + 8) = v6;
  operator delete(v6);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20FD381D4@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void (*v40)(_OWORD *, _OWORD *, uint64_t);
  _OWORD *v41;
  __int128 v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  void *__p;
  _OWORD v112[6];
  uint64_t v113;
  void *v114;
  void *v115;
  _OWORD *v116;

  __p = operator new(0x20uLL);
  v112[0] = xmmword_2102DCC80;
  strcpy((char *)__p, "VisualInertialBA parameters");
  sub_20E8B30B4(a2, (__int128 *)&__p, 180, 160);
  if (SHIBYTE(v112[0]) < 0)
    operator delete(__p);
  __p = (void *)nullsub_1(a2);
  v4 = sub_20EAA71FC((int *)a1);
  sub_20E8B2F9C((uint64_t *)&__p, "VisualInertialBundleAdjusterConfig.max_steps", v4, "Number of BA steps per window.");
  __p = (void *)nullsub_1(a2);
  v5 = sub_20EAA71FC((int *)(a1 + 8));
  sub_20E8B2F9C((uint64_t *)&__p, "VisualInertialBundleAdjusterConfig.max_steps_in_light_ba", v5, "Number of BA steps in light VIO BA per window.");
  __p = (void *)nullsub_1(a2);
  v6 = sub_20EAA14D8((_BYTE *)(a1 + 4));
  sub_20E8B2F9C((uint64_t *)&__p, "VisualInertialBundleAdjusterConfig.enable_light_ba", v6, "Enable light VIO BA for or not.");
  __p = (void *)nullsub_1(a2);
  v7 = sub_20EAA14D8((_BYTE *)(a1 + 12));
  sub_20E8B2F9C((uint64_t *)&__p, "VisualInertialBundleAdjusterConfig.disable_calibration_in_light_ba", v7, "If true, disable calibration in light BA. Otherwise, do nothing.");
  __p = (void *)nullsub_1(a2);
  v8 = sub_20EA9DB90((double *)(a1 + 16));
  sub_20E8B2F9C((uint64_t *)&__p, "VisualInertialBundleAdjusterConfig.gyro_sigma_scale_in_light_ba", v8, "The scale of gyro noise standard deviation in light BA only.");
  __p = (void *)nullsub_1(a2);
  v9 = sub_20EA9DB90((double *)(a1 + 24));
  sub_20E8B2F9C((uint64_t *)&__p, "VisualInertialBundleAdjusterConfig.accel_sigma_scale_in_light_ba", v9, "The scale of accelerometer noise standard deviation in light BA only.");
  __p = (void *)nullsub_1(a2);
  v10 = sub_20EF4E784((float *)(a1 + 36));
  sub_20E8B2F9C((uint64_t *)&__p, "VisualInertialBundleAdjusterConfig.initial_damping", v10, "Initial value for the damping factor for each BA window.");
  __p = (void *)nullsub_1(a2);
  v11 = sub_20EAA14D8((_BYTE *)(a1 + 73));
  sub_20E8B2F9C((uint64_t *)&__p, "VisualInertialBundleAdjusterConfig.fix_rotation_around_gravity_vector_degree_of_freedom", v11, "Fix rotation around the gravity vector in the initial pose degree of freedom.");
  __p = (void *)nullsub_1(a2);
  v12 = sub_20EA9DB90((double *)(a1 + 80));
  sub_20E8B2F9C((uint64_t *)&__p, "VisualInertialBundleAdjusterConfig.zero_velocity_constraint_sigma", v12, "Standard deviation for the zero-velocity stationary constraint (m/s).");
  __p = (void *)nullsub_1(a2);
  v13 = sub_20EA9DB90((double *)(a1 + 88));
  sub_20E8B2F9C((uint64_t *)&__p, "VisualInertialBundleAdjusterConfig.zero_displacement_constraint_sigma", v13, "Standard deviation for the zero-displacement stationary constraint (m).");
  __p = (void *)nullsub_1(a2);
  v14 = sub_20EA9DB90((double *)(a1 + 104));
  sub_20E8B2F9C((uint64_t *)&__p, "VisualInertialBundleAdjusterConfig.absolute_position_constraint_sigma", v14, "Standard deviation for the absolute position stationary constraint (m).");
  __p = (void *)nullsub_1(a2);
  v15 = sub_20EAA14D8((_BYTE *)(a1 + 416));
  sub_20E8B2F9C((uint64_t *)&__p, "VisualInertialBundleAdjusterConfig.estimate_extrinsics", v15, "Toggle whether to estimate camera-imu position extrinsics when estimating cam-imu extrinsics.");
  __p = (void *)nullsub_1(a2);
  v16 = sub_20EAA14D8((_BYTE *)(a1 + 484));
  sub_20E8B2F9C((uint64_t *)&__p, "VisualInertialBundleAdjusterConfig.enable_cam_imu_position_extrinsics", v16, "If true, also estimate the transformation between the camera and the IMU.");
  __p = (void *)nullsub_1(a2);
  v17 = sub_20EAA14D8((_BYTE *)(a1 + 417));
  sub_20E8B2F9C((uint64_t *)&__p, "VisualInertialBundleAdjusterConfig.estimate_time_offset", v17, "If true, also estimate the state-IMU sample time offset (if not initializing).");
  __p = (void *)nullsub_1(a2);
  v18 = sub_20EAA14D8((_BYTE *)(a1 + 419));
  sub_20E8B2F9C((uint64_t *)&__p, "VisualInertialBundleAdjusterConfig.estimate_plane_time_offset", v18, "If true, also estimate the Depth-IMU sample time offset.");
  __p = (void *)nullsub_1(a2);
  v19 = sub_20EAA14D8((_BYTE *)(a1 + 418));
  sub_20E8B2F9C((uint64_t *)&__p, "VisualInertialBundleAdjusterConfig.estimate_time_offset_always", v19, "If true, also estimate the state-IMU sample time offset (always).");
  __p = (void *)nullsub_1(a2);
  v20 = sub_20EAA1CB0((unint64_t *)(a1 + 528));
  sub_20E8B2F9C((uint64_t *)&__p, "VisualInertialBundleAdjusterConfig.max_num_map_measurements_for_stationary", v20, "Maximum number of map measurements for stationary state.");
  __p = (void *)nullsub_1(a2);
  v21 = sub_20EAA14D8((_BYTE *)(a1 + 426));
  sub_20E8B2F9C((uint64_t *)&__p, "VisualInertialBundleAdjusterConfig.estimate_intrinsics", v21, "If true, also estimate the intrinsics model.");
  __p = (void *)nullsub_1(a2);
  v22 = sub_20EAA14D8((_BYTE *)(a1 + 427));
  sub_20E8B2F9C((uint64_t *)&__p, "VisualInertialBundleAdjusterConfig.fix_aspect_ratio", v22, "Fix the aspect ratio fx/fy when intrinsics calibration is enabled.");
  __p = (void *)nullsub_1(a2);
  v23 = sub_20EAA14D8((_BYTE *)(a1 + 428));
  sub_20E8B2F9C((uint64_t *)&__p, "VisualInertialBundleAdjusterConfig.intrinsics_estimation_strategy_enabled", v23, "If true, enables intrinsics model estimation strategy.");
  __p = (void *)nullsub_1(a2);
  v24 = sub_20EAA14D8((_BYTE *)(a1 + 429));
  sub_20E8B2F9C((uint64_t *)&__p, "VisualInertialBundleAdjusterConfig.extrinsics_estimation_strategy_enabled", v24, "If true, enables extrinsics model estimation strategy.");
  __p = (void *)nullsub_1(a2);
  v25 = sub_20EAA14D8((_BYTE *)(a1 + 430));
  sub_20E8B2F9C((uint64_t *)&__p, "VisualInertialBundleAdjusterConfig.intrinsics_estimation_strategy_enabled_init", v25, "Enable intrinsic estimation in the first frame when the strategy is enabled.");
  __p = (void *)nullsub_1(a2);
  v26 = sub_20EAA14D8((_BYTE *)(a1 + 431));
  sub_20E8B2F9C((uint64_t *)&__p, "VisualInertialBundleAdjusterConfig.extrinsics_estimation_strategy_enabled_init", v26, "Enable extrinsic estimation in the first frame when the strategy is enabled.");
  __p = (void *)nullsub_1(a2);
  v27 = sub_20EAA14D8((_BYTE *)(a1 + 425));
  sub_20E8B2F9C((uint64_t *)&__p, "VisualInertialBundleAdjusterConfig.estimate_depth_camera_extrinsics", v27, "If true, estimate the depth camera extrinsics parameters");
  __p = (void *)nullsub_1(a2);
  v28 = sub_20EAA14D8((_BYTE *)(a1 + 485));
  sub_20E8B2F9C((uint64_t *)&__p, "VisualInertialBundleAdjusterConfig.enable_depth_cam_imu_position_extrinsics", v28, "If true, estimate the depth camera position extrinsics");
  __p = (void *)nullsub_1(a2);
  v29 = sub_20EA9DB90((double *)(a1 + 288));
  sub_20E8B2F9C((uint64_t *)&__p, "VisualInertialBundleAdjusterConfig.initial_depth_camera_extrinsics_orientation_variance", v29, "Initial depth camera extrinsics orientation variance");
  __p = (void *)nullsub_1(a2);
  v30 = sub_20EA9DB90((double *)(a1 + 296));
  sub_20E8B2F9C((uint64_t *)&__p, "VisualInertialBundleAdjusterConfig.initial_depth_camera_extrinsics_position_variance", v30, "Initial depth camera extrinsics position variance");
  __p = (void *)nullsub_1(a2);
  v31 = sub_20EAA14D8((_BYTE *)(a1 + 432));
  sub_20E8B2F9C((uint64_t *)&__p, "VisualInertialBundleAdjusterConfig.estimate_distortions", v31, "If true, also estimate the camera distortion model");
  __p = (void *)nullsub_1(a2);
  v32 = sub_20EAA14D8((_BYTE *)(a1 + 433));
  sub_20E8B2F9C((uint64_t *)&__p, "VisualInertialBundleAdjusterConfig.estimate_distortions_always", v32, "If true, also estimate the camera distortion model");
  __p = (void *)nullsub_1(a2);
  v33 = sub_20EAA14D8((_BYTE *)(a1 + 434));
  sub_20E8B2F9C((uint64_t *)&__p, "VisualInertialBundleAdjusterConfig.estimate_external_lens_extrinsics", v33, "Estimate external lens rotation with respect to camera.");
  __p = (void *)nullsub_1(a2);
  v34 = sub_20EA9DB90((double *)(a1 + 504));
  sub_20E8B2F9C((uint64_t *)&__p, "VisualInertialBundleAdjusterConfig.map_landmark_cost_threshold", v34, "The threshold for standardrized residual of map measurements (square of residual).");
  __p = (void *)nullsub_1(a2);
  v35 = sub_20EA9DB90((double *)(a1 + 512));
  sub_20E8B2F9C((uint64_t *)&__p, "VisualInertialBundleAdjusterConfig.map_landmark_gating_cost_threshold", v35, "The threshold for normalized (by gate) residual of map measurements (square of residual).");
  __p = (void *)nullsub_1(a2);
  v36 = sub_20EE02AFC((_OWORD *)(a1 + 128));
  sub_20E8B2F9C((uint64_t *)&__p, "VisualInertialBundleAdjusterConfig.initial_intrinsics_bias_variance", v36, "Initial intrinsics bias variance for {fx, fy, cx, cy}, in pixel^2.");
  __p = (void *)nullsub_1(a2);
  v37 = sub_20EE02AFC((_OWORD *)(a1 + 160));
  sub_20E8B2F9C((uint64_t *)&__p, "VisualInertialBundleAdjusterConfig.error_propagation_intrinsics_bias_inverse_sigma", v37, "Inverse sigma value for intrinsics bias term, used during error propagation for {fx, fy, cx, cy} in 1/pixel.");
  __p = (void *)nullsub_1(a2);
  v38 = sub_20EA9DB90((double *)(a1 + 192));
  sub_20E8B2F9C((uint64_t *)&__p, "VisualInertialBundleAdjusterConfig.initial_extrinsics_orientation_prior_rad_sqr", v38, "Initial extrinsics orientation variance, in radians.");
  v113 = nullsub_1(a2);
  v39 = operator new();
  *(_QWORD *)(v39 + 120) = 0;
  *(_OWORD *)(v39 + 16) = 0u;
  *(_OWORD *)(v39 + 32) = 0u;
  *(_OWORD *)(v39 + 48) = 0u;
  *(_OWORD *)(v39 + 64) = 0u;
  *(_OWORD *)(v39 + 80) = 0u;
  *(_OWORD *)(v39 + 96) = 0u;
  *(_QWORD *)(v39 + 109) = 0;
  *(_QWORD *)v39 = &off_24C9C2E20;
  *(_QWORD *)(v39 + 8) = &unk_24C9C2E98;
  *(_QWORD *)(v39 + 152) = &unk_24C9C2EC0;
  *(_OWORD *)(v39 + 160) = 0u;
  *(_OWORD *)(v39 + 176) = 0u;
  __p = (char *)off_24CA06BE8 + 1;
  *(_QWORD *)&v112[0] = a1 + 208;
  sub_20EAA459C((uint64_t *)(v39 + 120), (uint64_t *)&__p);
  if (__p)
  {
    if ((__p & 1) == 0)
    {
      v40 = *(void (**)(_OWORD *, _OWORD *, uint64_t))((unint64_t)__p & 0xFFFFFFFFFFFFFFFELL);
      if (v40)
        v40(v112, v112, 2);
    }
    __p = 0;
  }
  v41 = operator new(0x30uLL);
  v115 = v41 + 3;
  v116 = v41 + 3;
  v114 = v41;
  v42 = *(_OWORD *)(a1 + 224);
  *v41 = *(_OWORD *)(a1 + 208);
  v41[1] = v42;
  v41[2] = *(_OWORD *)(a1 + 240);
  v43 = sub_20EAA2D64(v39, (uint64_t)&v114);
  if (v114)
  {
    v115 = v114;
    operator delete(v114);
  }
  sub_20E8B2F9C(&v113, "VisualInertialBundleAdjusterConfig.error_propagation_extrinsics_inverse_sigma", v43, "error propagation extrinsics variance for orientation and position {rx, ry, rz, tx, ty, tz} in rad^{-1} and m^{-1}.");
  __p = (void *)nullsub_1(a2);
  v44 = sub_20EA9DB90((double *)(a1 + 256));
  sub_20E8B2F9C((uint64_t *)&__p, "VisualInertialBundleAdjusterConfig.initial_radial_distortion_sigma", v44, "Initial distortion standard deviation");
  __p = (void *)nullsub_1(a2);
  v45 = sub_20EA9DB90((double *)(a1 + 264));
  sub_20E8B2F9C((uint64_t *)&__p, "VisualInertialBundleAdjusterConfig.initial_external_lens_extrinsics_sigma_x_in_degree", v45, "Initial standard deviation of external lens rotation around x axis in degrees");
  __p = (void *)nullsub_1(a2);
  v46 = sub_20EA9DB90((double *)(a1 + 272));
  sub_20E8B2F9C((uint64_t *)&__p, "VisualInertialBundleAdjusterConfig.initial_external_lens_extrinsics_sigma_y_in_degree", v46, "Initial standard deviation of external lens rotation around y axis in degrees");
  __p = (void *)nullsub_1(a2);
  v47 = sub_20EA9DB90((double *)(a1 + 280));
  sub_20E8B2F9C((uint64_t *)&__p, "VisualInertialBundleAdjusterConfig.initial_external_lens_extrinsics_sigma_z_in_degree", v47, "Initial standard deviation of external lens rotation around z axis in degrees");
  __p = (void *)nullsub_1(a2);
  v48 = sub_20EA9DB90((double *)(a1 + 112));
  sub_20E8B2F9C((uint64_t *)&__p, "VisualInertialBundleAdjusterConfig.initial_time_offset_variance", v48, "Initial camera to IMU time-offset variance.");
  __p = (void *)nullsub_1(a2);
  v49 = sub_20EA9DB90((double *)(a1 + 120));
  sub_20E8B2F9C((uint64_t *)&__p, "VisualInertialBundleAdjusterConfig.initial_plane_time_offset_variance", v49, "Initial depth sensor to IMU time-offset variance.");
  __p = (void *)nullsub_1(a2);
  v50 = sub_20EA9DCF0((unsigned int *)(a1 + 616));
  sub_20E8B2F9C((uint64_t *)&__p, "VisualInertialBundleAdjusterConfig.max_num_optimized_tracks", v50, "Maximum total number of tracks that are passed to the BA optimizer (potentially a subset of the frontend tracks).");
  __p = (void *)nullsub_1(a2);
  v51 = sub_20EA9DCF0((unsigned int *)(a1 + 624));
  sub_20E8B2F9C((uint64_t *)&__p, "VisualInertialBundleAdjusterConfig.max_num_optimized_slam_tracks", v51, "Maximum total number of SLAM tracks that are passed to the BA optimizer (potentially a subset of the frontend tracks).");
  __p = (void *)nullsub_1(a2);
  v52 = sub_20EA9DCF0((unsigned int *)(a1 + 628));
  sub_20E8B2F9C((uint64_t *)&__p, "VisualInertialBundleAdjusterConfig.min_track_length_slam", v52, "Minimum track length required for classifying as SLAM features.");
  __p = (void *)nullsub_1(a2);
  v53 = sub_20EA9DCF0((unsigned int *)(a1 + 632));
  sub_20E8B2F9C((uint64_t *)&__p, "VisualInertialBundleAdjusterConfig.states_since_last_observation_threshold_for_slam_tracks", v53, "Maximum state count since last observation, after that the slam track gets marginalized.");
  __p = (void *)nullsub_1(a2);
  v54 = sub_20EAA14D8((_BYTE *)(a1 + 636));
  sub_20E8B2F9C((uint64_t *)&__p, "VisualInertialBundleAdjusterConfig.enable_vergence_angle_check_for_new_slam_tracks", v54, "Flag to enable vergence angle check when creating new SLAM tracks.");
  __p = (void *)nullsub_1(a2);
  v55 = sub_20EA9DB90((double *)(a1 + 640));
  sub_20E8B2F9C((uint64_t *)&__p, "VisualInertialBundleAdjusterConfig.new_slam_track_vergence_angle_threshold", v55, "Minimum acceptable vergence angle for new SLAM tracks in degrees.");
  __p = (void *)nullsub_1(a2);
  v56 = sub_20EAA14D8((_BYTE *)(a1 + 648));
  sub_20E8B2F9C((uint64_t *)&__p, "VisualInertialBundleAdjusterConfig.disable_vergence_angle_check_for_new_slam_stereo_tracks", v56, "Flag to disable vergence angle check when creating new stereo SLAM tracks.");
  __p = (void *)nullsub_1(a2);
  v57 = sub_20EAA14D8((_BYTE *)(a1 + 649));
  sub_20E8B2F9C((uint64_t *)&__p, "VisualInertialBundleAdjusterConfig.require_observation_in_latest_frame_for_new_slam_tracks", v57, "Flag to control if new SLAM tracks must contain observation(s) from the latest frame.");
  __p = (void *)nullsub_1(a2);
  v58 = sub_20EAA14D8((_BYTE *)(a1 + 650));
  sub_20E8B2F9C((uint64_t *)&__p, "VisualInertialBundleAdjusterConfig.use_stereo_tracks_for_new_slam_tracks", v58, "Flag to control if new SLAM tracks must contain observation(s) from multiple cameras.");
  __p = (void *)nullsub_1(a2);
  v59 = sub_20EAA14D8((_BYTE *)(a1 + 651));
  sub_20E8B2F9C((uint64_t *)&__p, "VisualInertialBundleAdjusterConfig.enable_distance_check_for_new_slam_tracks", v59, "Flag to enable the new SLAM track distance (from the anchor frame) check.");
  __p = (void *)nullsub_1(a2);
  v60 = sub_20EA9DB90((double *)(a1 + 656));
  sub_20E8B2F9C((uint64_t *)&__p, "VisualInertialBundleAdjusterConfig.new_slam_track_distance_threshold", v60, "Maximum acceptable new SLAM track distance (from the anchor frame) in meters, if enabled.");
  __p = (void *)nullsub_1(a2);
  v61 = sub_20EAA14D8((_BYTE *)(a1 + 664));
  sub_20E8B2F9C((uint64_t *)&__p, "VisualInertialBundleAdjusterConfig.enable_slam_track_reobservation_check", v61, "Flag to enable the SLAM track reobservation error check (mahalanobis distance).");
  __p = (void *)nullsub_1(a2);
  v62 = sub_20EA9DB90((double *)(a1 + 672));
  sub_20E8B2F9C((uint64_t *)&__p, "VisualInertialBundleAdjusterConfig.slam_track_reobservation_check_threshold", v62, "Maximum acceptable SLAM track reobservation error (mahalanobis distance), if enabled.");
  __p = (void *)nullsub_1(a2);
  v63 = sub_20EA9DCF0((unsigned int *)(a1 + 620));
  sub_20E8B2F9C((uint64_t *)&__p, "VisualInertialBundleAdjusterConfig.max_num_optimized_tracks_when_initializing", v63, "Maximum total number of tracks that are passed to the BA optimizer during initialization.");
  __p = (void *)nullsub_1(a2);
  v64 = sub_20EA9DB90((double *)(a1 + 688));
  sub_20E8B2F9C((uint64_t *)&__p, "VisualInertialBundleAdjusterConfig.track_pruning_stereoness_weight", v64, "Track pruning scoring parameter (aptitude for retaining stereo tracks).");
  __p = (void *)nullsub_1(a2);
  v65 = sub_20EA9DB90((double *)(a1 + 696));
  sub_20E8B2F9C((uint64_t *)&__p, "VisualInertialBundleAdjusterConfig.track_pruning_length_weight", v65, "Track pruning scoring parameter (aptitude for retaining longer tracks).");
  __p = (void *)nullsub_1(a2);
  v66 = sub_20EA9DB90((double *)(a1 + 704));
  sub_20E8B2F9C((uint64_t *)&__p, "VisualInertialBundleAdjusterConfig.track_pruning_age_weight", v66, "Track pruning scoring parameter (aptitude for retaining newer tracks).");
  __p = (void *)nullsub_1(a2);
  v67 = sub_20EA9DB90((double *)(a1 + 712));
  sub_20E8B2F9C((uint64_t *)&__p, "VisualInertialBundleAdjusterConfig.track_pruning_life_left_weight", v67, "Track pruning scoring parameter (aptitude for retaining tracks that are not moving away from the field of view).");
  __p = (void *)nullsub_1(a2);
  v68 = sub_20EA9DB90((double *)(a1 + 720));
  sub_20E8B2F9C((uint64_t *)&__p, "VisualInertialBundleAdjusterConfig.track_pruning_centerness_weight", v68, "Track pruning scoring parameter (aptitude for retaining tracks that are closer to the optical center).");
  __p = (void *)nullsub_1(a2);
  v69 = sub_20EA9DB90((double *)(a1 + 728));
  sub_20E8B2F9C((uint64_t *)&__p, "VisualInertialBundleAdjusterConfig.track_pruning_init_stereoness_weight", v69, "Track pruning scoring parameter when initializing (aptitude for retaining stereo tracks).");
  __p = (void *)nullsub_1(a2);
  v70 = sub_20EA9DB90((double *)(a1 + 736));
  sub_20E8B2F9C((uint64_t *)&__p, "VisualInertialBundleAdjusterConfig.track_pruning_init_length_weight", v70, "Track pruning scoring parameter when initializing (aptitude for retaining longer tracks).");
  __p = (void *)nullsub_1(a2);
  v71 = sub_20EA9DB90((double *)(a1 + 744));
  sub_20E8B2F9C((uint64_t *)&__p, "VisualInertialBundleAdjusterConfig.track_pruning_init_age_weight", v71, "Track pruning scoring parameter when initializing (aptitude for retaining newer tracks).");
  __p = (void *)nullsub_1(a2);
  v72 = sub_20EA9DB90((double *)(a1 + 752));
  sub_20E8B2F9C((uint64_t *)&__p, "VisualInertialBundleAdjusterConfig.track_pruning_init_life_left_weight", v72, "Track pruning scoring parameter when initializing (aptitude for retaining tracks that are not moving away from the field of view).");
  __p = (void *)nullsub_1(a2);
  v73 = sub_20EA9DB90((double *)(a1 + 760));
  sub_20E8B2F9C((uint64_t *)&__p, "VisualInertialBundleAdjusterConfig.track_pruning_init_centerness_weight", v73, "Track pruning scoring parameter when initializing (aptitude for retaining tracks that are closer to the optical center).");
  __p = (void *)nullsub_1(a2);
  v74 = sub_20EA9DCF0((unsigned int *)(a1 + 768));
  sub_20E8B2F9C((uint64_t *)&__p, "VisualInertialBundleAdjusterConfig.marginalization_style", v74, "Marginalization kernel implementation choice (0 = FG built-in, 1 = FG-like, 2 = performance, 3 = precision).");
  __p = (void *)nullsub_1(a2);
  v75 = sub_20EA9DCF0((unsigned int *)(a1 + 680));
  sub_20E8B2F9C((uint64_t *)&__p, "VisualInertialBundleAdjusterConfig.cache_relative_pose_and_cov_size", v75, "Cache relative pose and cov size.");
  __p = (void *)nullsub_1(a2);
  v76 = sub_20EAA14D8((_BYTE *)(a1 + 537));
  sub_20E8B2F9C((uint64_t *)&__p, "VisualInertialBundleAdjusterConfig.use_direct_oldest_pose_marginalization", v76, "Directly compute marginalization of the oldest pose.");
  __p = (void *)nullsub_1(a2);
  v77 = sub_20EAA14D8((_BYTE *)(a1 + 538));
  sub_20E8B2F9C((uint64_t *)&__p, "VisualInertialBundleAdjusterConfig.use_preintegrated_imu_factor", v77, "Use preintegrated IMU Factor.");
  __p = (void *)nullsub_1(a2);
  v78 = sub_20EAA14D8((_BYTE *)(a1 + 540));
  sub_20E8B2F9C((uint64_t *)&__p, "VisualInertialBundleAdjusterConfig.use_stationary_factor", v78, "Flag to indicate if stationary factor is enabled or not.");
  __p = (void *)nullsub_1(a2);
  v79 = sub_20EAA14D8((_BYTE *)(a1 + 784));
  sub_20E8B2F9C((uint64_t *)&__p, "VisualInertialBundleAdjusterConfig.use_lp_fg", v79, "Use FG LP interface (off by default).");
  __p = (void *)nullsub_1(a2);
  v80 = sub_20EAA14D8((_BYTE *)(a1 + 785));
  sub_20E8B2F9C((uint64_t *)&__p, "VisualInertialBundleAdjusterConfig.enable_lp_fg_multi_iter_fallback", v80, "Use software fallback for multiple-FG LP iterations (off by default).");
  __p = (void *)nullsub_1(a2);
  v81 = sub_20EAA14D8((_BYTE *)(a1 + 786));
  sub_20E8B2F9C((uint64_t *)&__p, "VisualInertialBundleAdjusterConfig.enable_lp_fg_always_fallback", v81, "Use software fallback for FG LP always (off by default).");
  __p = (void *)nullsub_1(a2);
  v82 = sub_20EAA14D8((_BYTE *)(a1 + 787));
  sub_20E8B2F9C((uint64_t *)&__p, "VisualInertialBundleAdjusterConfig.enable_lp_fg_init_fallback", v82, "Use software fallback for FG LP during initialization where a larger number of constraints may be needed (off by default).");
  __p = (void *)nullsub_1(a2);
  v83 = sub_20EAA14D8((_BYTE *)(a1 + 788));
  sub_20E8B2F9C((uint64_t *)&__p, "VisualInertialBundleAdjusterConfig.enable_lp_fg_debug_logging", v83, "Enable additional debug logging in LP FG (off by default).");
  __p = (void *)nullsub_1(a2);
  v84 = sub_20EAA14D8((_BYTE *)(a1 + 789));
  sub_20E8B2F9C((uint64_t *)&__p, "VisualInertialBundleAdjusterConfig.enable_lp_fg_injection_statistics", v84, "Collect statistics on injected factors in FG LP (off by default).");
  __p = (void *)nullsub_1(a2);
  v85 = sub_20EAA14D8((_BYTE *)(a1 + 790));
  sub_20E8B2F9C((uint64_t *)&__p, "VisualInertialBundleAdjusterConfig.enable_lp_fg_empty_hw_calls", v85, "Empty hardware calls for FG LP (off by default).");
  __p = (void *)nullsub_1(a2);
  v86 = sub_20EAA14D8((_BYTE *)(a1 + 791));
  sub_20E8B2F9C((uint64_t *)&__p, "VisualInertialBundleAdjusterConfig.enable_lp_fg_skip_hw_calls", v86, "Entirely skip over hardware calls for FG LP (off by default).");
  __p = (void *)nullsub_1(a2);
  v87 = sub_20EAA14D8((_BYTE *)(a1 + 792));
  sub_20E8B2F9C((uint64_t *)&__p, "VisualInertialBundleAdjusterConfig.enable_lp_fg_hw_calls_masking", v87, "Mask hardware calls with follow-on SW calls for FG LP (off by default).");
  __p = (void *)nullsub_1(a2);
  v88 = sub_20EAA14D8((_BYTE *)(a1 + 793));
  sub_20E8B2F9C((uint64_t *)&__p, "VisualInertialBundleAdjusterConfig.enable_lp_fg_batched_solve_marginalize", v88, "Enable single-step batched solve / marginalization in FG LP (on by default).");
  __p = (void *)nullsub_1(a2);
  v89 = sub_20EAA14D8((_BYTE *)(a1 + 794));
  sub_20E8B2F9C((uint64_t *)&__p, "VisualInertialBundleAdjusterConfig.enable_lp_fg_two_call_fallback", v89, "Use software fallback for two-call FG LP steps (off by default).");
  __p = (void *)nullsub_1(a2);
  v90 = sub_20EAA14D8((_BYTE *)(a1 + 423));
  sub_20E8B2F9C((uint64_t *)&__p, "VisualInertialBundleAdjusterConfig.estimate_gyro_scale_factor", v90, "Flag to estimate the gyro scale factor.");
  __p = (void *)nullsub_1(a2);
  v91 = sub_20EAA14D8((_BYTE *)(a1 + 424));
  sub_20E8B2F9C((uint64_t *)&__p, "VisualInertialBundleAdjusterConfig.estimate_gyro_skewness", v91, "Flag to estimate the gyro skewness.");
  __p = (void *)nullsub_1(a2);
  v92 = sub_20EAA14D8((_BYTE *)(a1 + 421));
  sub_20E8B2F9C((uint64_t *)&__p, "VisualInertialBundleAdjusterConfig.estimate_accel_scale_factor", v92, "Flag to estimate the accel scale factor.");
  __p = (void *)nullsub_1(a2);
  v93 = sub_20EAA14D8((_BYTE *)(a1 + 422));
  sub_20E8B2F9C((uint64_t *)&__p, "VisualInertialBundleAdjusterConfig.estimate_accel_skewness", v93, "Flag to estimate the accel skewness.");
  __p = (void *)nullsub_1(a2);
  v94 = sub_20EA9DB90((double *)(a1 + 304));
  sub_20E8B2F9C((uint64_t *)&__p, "VisualInertialBundleAdjusterConfig.initial_gyro_scale_variance", v94, "Initial gyro scale variance.");
  __p = (void *)nullsub_1(a2);
  v95 = sub_20EA9DB90((double *)(a1 + 312));
  sub_20E8B2F9C((uint64_t *)&__p, "VisualInertialBundleAdjusterConfig.initial_gyro_skewness_variance", v95, "Initial gyro skewness variance.");
  __p = (void *)nullsub_1(a2);
  v96 = sub_20EA9DB90((double *)(a1 + 320));
  sub_20E8B2F9C((uint64_t *)&__p, "VisualInertialBundleAdjusterConfig.initial_accel_scale_variance", v96, "Initial accel scale variance.");
  __p = (void *)nullsub_1(a2);
  v97 = sub_20EA9DB90((double *)(a1 + 328));
  sub_20E8B2F9C((uint64_t *)&__p, "VisualInertialBundleAdjusterConfig.initial_accel_skewness_variance", v97, "Initial accel skewness variance.");
  __p = (void *)nullsub_1(a2);
  v98 = sub_20EAA1770(a1 + 336);
  sub_20E8B2F9C((uint64_t *)&__p, "VisualInertialBundleAdjusterConfig.error_propagation_imu_intrinsics_inverse_sigma", v98, "Inverse IMU intrinsics sigma used during error propagation for all 3 axes.");
  __p = (void *)nullsub_1(a2);
  v99 = sub_20EAA14D8((_BYTE *)(a1 + 360));
  sub_20E8B2F9C((uint64_t *)&__p, "VisualInertialBundleAdjusterConfig.enable_imu_intrinsic_noise_error_propagation", v99, "Whether to enable noise error propagation in IMU intrinsic estimation.");
  __p = (void *)nullsub_1(a2);
  v100 = sub_20EAA14D8((_BYTE *)(a1 + 812));
  sub_20E8B2F9C((uint64_t *)&__p, "VisualInertialBundleAdjusterConfig.partition_mono_and_stereo_tracks", v100, "Enable partitioning of mono and stereo tracks.");
  __p = (void *)nullsub_1(a2);
  v101 = sub_20EA9DCF0((unsigned int *)(a1 + 804));
  sub_20E8B2F9C((uint64_t *)&__p, "VisualInertialBundleAdjusterConfig.min_temporal_track_length_to_bypass_binning", v101, "Minimal temporal track length to bypass binning based feature selection.");
  __p = (void *)nullsub_1(a2);
  v102 = sub_20EA9DCF0((unsigned int *)(a1 + 808));
  sub_20E8B2F9C((uint64_t *)&__p, "VisualInertialBundleAdjusterConfig.min_track_length_to_bypass_binning", v102, "Minimal track length to bypass binning based feature selection.");
  __p = (void *)nullsub_1(a2);
  v103 = sub_20EAA14D8((_BYTE *)(a1 + 800));
  sub_20E8B2F9C((uint64_t *)&__p, "VisualInertialBundleAdjusterConfig.enable_binning_based_feature_selection_in_ba", v103, "Enable binning-based feature selection in BA.");
  __p = (void *)nullsub_1(a2);
  v104 = sub_20EA9DB90((double *)(a1 + 520));
  sub_20E8B2F9C((uint64_t *)&__p, "VisualInertialBundleAdjusterConfig.readout_time_override_for_all_stream_in_seconds", v104, "Camera rolling-shutter readout time override for all streams. Unit seconds.");
  __p = (void *)nullsub_1(a2);
  v105 = sub_20EA9DCF0((unsigned int *)(a1 + 824));
  sub_20E8B2F9C((uint64_t *)&__p, "VisualInertialBundleAdjusterConfig.min_ba_latest_state_id_to_start_map_tracking_mode", v105, "Min latest state ID in BA after which VIO will operate in map tracking-only mode. Use in debug only.");
  __p = (void *)nullsub_1(a2);
  v106 = sub_20EA9DCF0((unsigned int *)(a1 + 828));
  sub_20E8B2F9C((uint64_t *)&__p, "VisualInertialBundleAdjusterConfig.max_num_optimized_tracks_in_map_tracking_mode", v106, "Maximum total number of tracks that are passed to the BA optimizer in map-tracking mode.");
  __p = (void *)nullsub_1(a2);
  v107 = sub_20EAA14D8((_BYTE *)(a1 + 813));
  sub_20E8B2F9C((uint64_t *)&__p, "VisualInertialBundleAdjusterConfig.enable_consistent_marginalization", v107, "Enable consistent marginalization (disabled by default).");
  __p = (void *)nullsub_1(a2);
  v108 = sub_20EA9DB90((double *)(a1 + 816));
  sub_20E8B2F9C((uint64_t *)&__p, "VisualInertialBundleAdjusterConfig.max_ratio_marginalized_tracks_in_consistent_marginalization", v108, "Max ratio of number of marginalized tracks in consistent marginalization.");
  __p = (void *)nullsub_1(a2);
  v109 = sub_20EA9DB90((double *)(a1 + 832));
  sub_20E8B2F9C((uint64_t *)&__p, "VisualInertialBundleAdjusterConfig.time_interval_for_logging_calibration_parameters", v109, "Time interval in seconds for logging calibration parameters.");
  sub_20FD348A0((double *)(a1 + 368), &__p);
  sub_20E8B32F0(a2, (uint64_t)&__p);
  return sub_20E869298((uint64_t)&__p);
}

void sub_20FD39680(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;

  sub_20E869298((uint64_t)&__p);
  sub_20E869298(v15);
  _Unwind_Resume(a1);
}

uint64_t sub_20FD39A18(uint64_t result, _WORD *a2, unsigned int a3)
{
  uint64_t v4;

  if (a3 == 4)
    goto LABEL_2;
  v4 = result;
  if (a3 <= 1)
  {
    *(_QWORD *)a2 = *(_QWORD *)result;
    return result;
  }
  if (a3 != 2)
  {
    if (a3 != 3)
    {
LABEL_2:
      *(_QWORD *)a2 = &unk_24CA06BF8;
      a2[4] = 0;
      return result;
    }
    result = *(_QWORD *)(*(_QWORD *)a2 + 8) & 0x7FFFFFFFFFFFFFFFLL;
    if (result == ((unint64_t)"Z47CreateProgramOptionValueOrArrayWithSavedCurrentIdLm6EEPN5boost15program_options"
                                      "11typed_valueINSt3__16vectorIT_NS3_9allocatorIS5_EEEEcEERNS3_5arrayIS5_XT0_EEEEUlR"
                                      "KNS4_IdNS6_IdEEEEE_" & 0x7FFFFFFFFFFFFFFFLL)
      || (result = strcmp((const char *)result, (const char *)((unint64_t)"Z47CreateProgramOptionValueOrArrayWithSavedCurrentIdLm6EEPN5boost15program_options11typed_valueINSt3__16vectorIT_NS3_9allocatorIS5_EEEEcEERNS3_5arrayIS5_XT0_EEEEUlRKNS4_IdNS6_IdEEEEE_" & 0x7FFFFFFFFFFFFFFFLL)), !(_DWORD)result))
    {
      *(_QWORD *)a2 = v4;
    }
    else
    {
      *(_QWORD *)a2 = 0;
    }
  }
  return result;
}

__n128 sub_20FD39AC4(_QWORD *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  __n128 result;
  _QWORD *v6;
  __int128 v7;

  v2 = *a2;
  v3 = (a2[1] - *a2) >> 3;
  if (v3 == 6)
  {
    v6 = (_QWORD *)*a1;
    result = *(__n128 *)v2;
    v7 = *(_OWORD *)(v2 + 32);
    *((_OWORD *)v6 + 1) = *(_OWORD *)(v2 + 16);
    *((_OWORD *)v6 + 2) = v7;
    *(__n128 *)v6 = result;
  }
  else
  {
    if (v3 != 1)
    {
      sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/ProgramOptions/include/Kit/ProgramOptions/ProgramOptionsParserUtil.h", 161, (uint64_t)"", 0, (uint64_t)"invalid size of array parameter", 31, (void (*)(void **))sub_21023DDB0);
      abort();
    }
    v4 = (_QWORD *)*a1;
    *v4 = *(_QWORD *)v2;
    v4[1] = *(_QWORD *)v2;
    v4[2] = *(_QWORD *)v2;
    v4[3] = *(_QWORD *)v2;
    v4[4] = *(_QWORD *)v2;
    result.n128_u64[0] = *(_QWORD *)v2;
    v4[5] = *(_QWORD *)v2;
  }
  return result;
}

_QWORD *sub_20FD39B74(uint64_t a1, int a2, uint64_t *a3)
{
  _OWORD *v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  size_t v14;
  uint64_t v15;
  char *v16;
  unint64_t v17;
  uint64_t v18;
  char **v19;
  char *v20;
  unint64_t v21;
  unint64_t v22;
  char *v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char *v30;
  char *v31;
  char *v32;
  char *v33;
  void **v34;
  char *i;
  char *v36;
  _BYTE *v37;
  _BYTE *v38;
  uint64_t v39;
  char *v40;
  size_t v41;
  unsigned int v42;
  unsigned int v43;
  uint64_t v44;
  char *v45;
  char *v46;
  _BYTE *v47;
  _BYTE *v48;
  uint64_t v49;
  char *v50;
  size_t v51;
  _BYTE *v52;
  _BYTE *v53;
  int64_t v54;
  char *v55;
  char *v56;
  char *v57;
  _QWORD *v58;
  _QWORD *v59;
  _BYTE *v60;
  _BYTE *v61;
  uint64_t v62;
  char *v63;
  _BYTE *v64;
  _BYTE *v65;
  int64_t v66;
  char *v67;
  char *v68;
  char *v69;
  void *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  void *v75;
  void *v76;
  void *v77;
  void *v78;
  void *v79;
  void *v80;
  void *v81;
  void *v82;
  void *v83;
  void *v84;
  void *v85;
  void *v86;
  char *v87;
  char *v88;
  char *v89;
  void *v90;
  uint64_t v91;
  unint64_t v92;
  uint64_t v93;
  char *v94;
  void *v95;
  void *v96;
  void *v97;
  void *v98;
  void *v99;
  void *v100;
  void *v101;
  void *v102;
  void *v103;
  void *v104;
  void *v105;
  void *v106;
  uint64_t *v107;
  uint64_t v108;
  uint64_t v109;
  unint64_t v110;
  uint64_t v111;
  unint64_t v112;
  uint64_t v113;
  char *v114;
  void **v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  unint64_t v119;
  unint64_t v120;
  uint64_t v121;
  unint64_t v122;
  unint64_t v123;
  unint64_t v124;
  char *v125;
  char *v126;
  char *v127;
  size_t v128;
  char *v129;
  _QWORD *v130;
  char *v131;
  __int128 v132;
  void **v133;
  void **v134;
  void *v135;
  _QWORD *v136;
  _QWORD *v137;
  _QWORD *v138;
  void *v139;
  uint64_t v140;
  unint64_t v141;
  uint64_t v142;
  _QWORD *v143;
  void *v144;
  void *v145;
  void *v146;
  void *v147;
  void *v148;
  void *v149;
  void *v150;
  void *v151;
  void *v152;
  void *v153;
  void *v154;
  void *v155;
  size_t v156;
  uint64_t v157;
  uint64_t v158;
  char **v159;
  unint64_t v160;
  char *v161;
  char **v162;
  char *v163;
  unint64_t v164;
  uint64_t v165;
  uint64_t v166;
  _QWORD *v167;
  uint64_t v168;
  unint64_t v169;
  uint64_t v170;
  unint64_t v171;
  char *v172;
  char *v173;
  char *v174;
  char *j;
  char *v176;
  char *v177;
  char *v178;
  _BYTE *v179;
  _BYTE *v180;
  int64_t v181;
  char *v182;
  size_t v183;
  unsigned int v184;
  unsigned int v185;
  uint64_t v186;
  char *v187;
  char *v188;
  char *v189;
  _BYTE *v190;
  _BYTE *v191;
  uint64_t v192;
  char *v193;
  size_t v194;
  _BYTE *v195;
  _BYTE *v196;
  int64_t v197;
  char *v198;
  char *v199;
  char *v200;
  _QWORD *v201;
  _QWORD *v202;
  _BYTE *v203;
  _BYTE *v204;
  int64_t v205;
  _BYTE *v206;
  _BYTE *v207;
  int64_t v208;
  char *v209;
  char *v210;
  void *v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  char *v215;
  void *v216;
  void *v217;
  void *v218;
  void *v219;
  void *v220;
  void *v221;
  void *v222;
  void *v223;
  void *v224;
  void *v225;
  void *v226;
  void *v227;
  char *v228;
  char *v229;
  char *v230;
  void *v231;
  uint64_t v232;
  unint64_t v233;
  uint64_t v234;
  char *v235;
  void *v236;
  void *v237;
  void *v238;
  void *v239;
  void *v240;
  void *v241;
  void *v242;
  void *v243;
  void *v244;
  void *v245;
  void *v246;
  void *v247;
  uint64_t *v248;
  uint64_t v249;
  uint64_t v250;
  unint64_t v251;
  uint64_t v252;
  unint64_t v253;
  uint64_t v254;
  void **v256;
  void **v257;
  void **v258;
  unint64_t v259;
  uint64_t *v260;
  uint64_t v261;
  void **v262;
  uint64_t v263;
  unint64_t v264;
  int v265;
  uint64_t v266;
  _QWORD *v267;
  void **v269;
  char *v270;
  uint64_t v271;
  _QWORD *v272;
  char *v273;
  _QWORD *v274;
  _QWORD *v275;
  char *v276;
  uint64_t v277;
  _QWORD *v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  char *v282;
  char *v283;
  char *v284;
  char *v285;
  char *v286;
  char *v287;
  __int128 v288;
  __int128 v289;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  *(_DWORD *)(a1 + 40) = 3;
  *(_OWORD *)(a1 + 48) = 0u;
  v258 = (void **)(a1 + 48);
  v260 = (uint64_t *)(a1 + 72);
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_DWORD *)(a1 + 288) = 2;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_OWORD *)(a1 + 344) = 0u;
  *(_BYTE *)(a1 + 440) = 0;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 360) = 0u;
  *(_OWORD *)(a1 + 376) = 0u;
  *(_OWORD *)(a1 + 392) = 0u;
  *(_OWORD *)(a1 + 408) = 0u;
  *(_OWORD *)(a1 + 424) = 0u;
  *(_QWORD *)(a1 + 456) = 0;
  *(_QWORD *)(a1 + 464) = 0;
  *(_QWORD *)(a1 + 448) = 0;
  v5 = operator new(0x120uLL);
  *v5 = 0u;
  v5[1] = 0u;
  v5[2] = 0u;
  v5[3] = 0u;
  v5[4] = 0u;
  v5[5] = 0u;
  v5[6] = 0u;
  v5[7] = 0u;
  v5[8] = 0u;
  v5[9] = 0u;
  v5[10] = 0u;
  v5[11] = 0u;
  v5[12] = 0u;
  v5[13] = 0u;
  v5[14] = 0u;
  v5[15] = 0u;
  v5[16] = 0u;
  v5[17] = 0u;
  *(_QWORD *)(a1 + 448) = v5;
  *(_QWORD *)(a1 + 456) = v5 + 18;
  *(_BYTE *)(a1 + 500) = 0;
  *(_BYTE *)(a1 + 504) = 0;
  *(_QWORD *)(a1 + 464) = v5 + 18;
  *(_QWORD *)(a1 + 472) = 0;
  *(_QWORD *)(a1 + 480) = 0;
  *(_QWORD *)(a1 + 488) = 0;
  *(_BYTE *)(a1 + 496) = 0;
  *(_OWORD *)(a1 + 512) = 0u;
  *(_OWORD *)(a1 + 528) = 0u;
  *(_OWORD *)(a1 + 544) = 0u;
  *(_OWORD *)(a1 + 560) = 0u;
  *(_OWORD *)(a1 + 576) = 0u;
  *(_OWORD *)(a1 + 592) = 0u;
  *(_OWORD *)(a1 + 608) = 0u;
  *(_OWORD *)(a1 + 624) = 0u;
  *(_OWORD *)(a1 + 640) = 0u;
  *(_OWORD *)(a1 + 656) = 0u;
  *(_DWORD *)(a1 + 288) = a2;
  v267 = (_QWORD *)a1;
  if (a2)
  {
    if (a2 != 1)
    {
      sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/BatchLeastSquaresUnsanitized/src/Window.cpp", 54, (uint64_t)"", 0, (uint64_t)"Invalid landmark parametrization", 32, (void (*)(void **))sub_21023DDB0);
      abort();
    }
    v6 = 0;
  }
  else
  {
    v6 = 1;
  }
  v265 = v6;
  *(_DWORD *)(a1 + 40) = v6;
  v8 = *a3;
  v7 = a3[1];
  v9 = v7 - *a3;
  v10 = v9 >> 2;
  if (v7 != *a3)
  {
    if ((unint64_t)v9 > 0x2AAAAAAAAAAAAAA8)
      sub_20E867F44();
    v11 = 24 * v10;
    v12 = v9 >> 2;
    v13 = (char *)operator new(24 * v10);
    v14 = 24 * ((v11 - 24) / 0x18uLL) + 24;
    bzero(v13, v14);
    v267[6] = v13;
    v267[7] = &v13[v14];
    v267[8] = &v13[24 * v12];
    if (v7 != v8)
    {
      v15 = 0;
      v263 = v12;
      while (1)
      {
        v16 = &v13[24 * v15];
        v17 = *(unsigned int *)(*a3 + 4 * v15);
        v19 = (char **)(v16 + 8);
        v18 = *((_QWORD *)v16 + 1);
        v20 = *(char **)v16;
        v21 = 0xFC0FC0FC0FC0FC1 * ((v18 - *(_QWORD *)v16) >> 3);
        v22 = v17 - v21;
        v271 = v15;
        if (v17 <= v21)
        {
          if (v17 < v21)
          {
            v69 = &v20[520 * v17];
            while ((char *)v18 != v69)
            {
              v70 = *(void **)(v18 - 24);
              if (v70)
              {
                *(_QWORD *)(v18 - 16) = v70;
                operator delete(v70);
              }
              v71 = *(unsigned int *)(v18 - 32);
              if ((_DWORD)v71)
              {
                v72 = 0;
                v73 = 80 * v71;
                do
                {
                  v74 = v18 + v72;
                  v75 = *(void **)(v18 + v72 - 216);
                  if (v75)
                  {
                    *(_QWORD *)(v74 - 208) = v75;
                    operator delete(v75);
                  }
                  v76 = *(void **)(v74 - 248);
                  if (v76)
                  {
                    *(_QWORD *)(v18 + v72 - 240) = v76;
                    operator delete(v76);
                  }
                  v77 = *(void **)(v74 - 272);
                  if (v77)
                  {
                    *(_QWORD *)(v18 + v72 - 264) = v77;
                    operator delete(v77);
                  }
                  v72 += 80;
                }
                while (v73 != v72);
              }
              *(_DWORD *)(v18 - 32) = 0;
              v78 = *(void **)(v18 - 296);
              if (v78)
              {
                *(_QWORD *)(v18 - 288) = v78;
                operator delete(v78);
              }
              v79 = *(void **)(v18 - 320);
              if (v79)
              {
                *(_QWORD *)(v18 - 312) = v79;
                operator delete(v79);
              }
              v80 = *(void **)(v18 - 344);
              if (v80)
              {
                *(_QWORD *)(v18 - 336) = v80;
                operator delete(v80);
              }
              v81 = *(void **)(v18 - 368);
              if (v81)
              {
                *(_QWORD *)(v18 - 360) = v81;
                operator delete(v81);
              }
              v82 = *(void **)(v18 - 392);
              if (v82)
              {
                *(_QWORD *)(v18 - 384) = v82;
                operator delete(v82);
              }
              v83 = *(void **)(v18 - 416);
              if (v83)
              {
                *(_QWORD *)(v18 - 408) = v83;
                operator delete(v83);
              }
              v84 = *(void **)(v18 - 440);
              if (v84)
              {
                *(_QWORD *)(v18 - 432) = v84;
                operator delete(v84);
              }
              v85 = *(void **)(v18 - 464);
              if (v85)
              {
                *(_QWORD *)(v18 - 456) = v85;
                operator delete(v85);
              }
              v86 = *(void **)(v18 - 488);
              if (v86)
              {
                *(_QWORD *)(v18 - 480) = v86;
                operator delete(v86);
              }
              v18 -= 520;
            }
            *v19 = v69;
          }
        }
        else
        {
          v269 = (void **)(v16 + 8);
          v261 = 0xFC0FC0FC0FC0FC1 * ((v18 - *(_QWORD *)v16) >> 3);
          v23 = &v13[24 * v15];
          v26 = *((_QWORD *)v23 + 2);
          v25 = v23 + 16;
          v24 = v26;
          if (0xFC0FC0FC0FC0FC1 * ((v26 - v18) >> 3) >= v22)
          {
            v87 = (char *)(v18 + 520 * v22);
            do
            {
              *(_OWORD *)(v18 + 464) = 0uLL;
              *(_OWORD *)(v18 + 480) = 0uLL;
              *(_OWORD *)(v18 + 432) = 0uLL;
              *(_OWORD *)(v18 + 448) = 0uLL;
              *(_OWORD *)(v18 + 400) = 0uLL;
              *(_OWORD *)(v18 + 416) = 0uLL;
              *(_OWORD *)(v18 + 368) = 0uLL;
              *(_OWORD *)(v18 + 384) = 0uLL;
              *(_OWORD *)(v18 + 336) = 0uLL;
              *(_OWORD *)(v18 + 352) = 0uLL;
              *(_OWORD *)(v18 + 304) = 0uLL;
              *(_OWORD *)(v18 + 320) = 0uLL;
              *(_OWORD *)(v18 + 272) = 0uLL;
              *(_OWORD *)(v18 + 288) = 0uLL;
              *(_OWORD *)(v18 + 240) = 0uLL;
              *(_OWORD *)(v18 + 256) = 0uLL;
              *(_OWORD *)(v18 + 208) = 0uLL;
              *(_OWORD *)(v18 + 224) = 0uLL;
              *(_OWORD *)(v18 + 176) = 0uLL;
              *(_OWORD *)(v18 + 192) = 0uLL;
              *(_OWORD *)(v18 + 144) = 0uLL;
              *(_OWORD *)(v18 + 160) = 0uLL;
              *(_OWORD *)(v18 + 112) = 0uLL;
              *(_OWORD *)(v18 + 128) = 0uLL;
              *(_OWORD *)(v18 + 80) = 0uLL;
              *(_OWORD *)(v18 + 96) = 0uLL;
              *(_OWORD *)(v18 + 48) = 0uLL;
              *(_OWORD *)(v18 + 64) = 0uLL;
              *(_OWORD *)(v18 + 16) = 0uLL;
              *(_OWORD *)(v18 + 32) = 0uLL;
              *(_OWORD *)v18 = 0uLL;
              *(_DWORD *)(v18 + 24) = 3;
              *(_OWORD *)(v18 + 32) = 0uLL;
              *(_OWORD *)(v18 + 48) = 0uLL;
              *(_OWORD *)(v18 + 64) = 0uLL;
              *(_OWORD *)(v18 + 80) = 0uLL;
              *(_OWORD *)(v18 + 96) = 0uLL;
              *(_OWORD *)(v18 + 112) = 0uLL;
              *(_OWORD *)(v18 + 128) = 0uLL;
              *(_OWORD *)(v18 + 144) = 0uLL;
              *(_OWORD *)(v18 + 160) = 0uLL;
              *(_OWORD *)(v18 + 176) = 0uLL;
              *(_OWORD *)(v18 + 192) = 0uLL;
              *(_OWORD *)(v18 + 208) = 0uLL;
              *(_OWORD *)(v18 + 224) = 0uLL;
              *(_QWORD *)(v18 + 240) = 0;
              *(_QWORD *)(v18 + 504) = 0;
              *(_QWORD *)(v18 + 512) = 0;
              *(_QWORD *)(v18 + 496) = 0;
              v18 += 520;
            }
            while ((char *)v18 != v87);
            *v19 = v87;
          }
          else
          {
            v27 = 0xFC0FC0FC0FC0FC1 * ((v24 - (uint64_t)v20) >> 3);
            v28 = 2 * v27;
            if (2 * v27 <= v17)
              v28 = *(unsigned int *)(*a3 + 4 * v15);
            if (v27 >= 0x3F03F03F03F03FLL)
              v29 = 0x7E07E07E07E07ELL;
            else
              v29 = v28;
            if (v29 > 0x7E07E07E07E07ELL)
              sub_20E877A38();
            v30 = (char *)operator new(520 * v29);
            v31 = &v30[520 * v261];
            *((_QWORD *)&v288 + 1) = &v30[520 * v29];
            v32 = &v30[520 * v17];
            do
            {
              *((_OWORD *)v31 + 29) = 0uLL;
              *((_OWORD *)v31 + 30) = 0uLL;
              *((_OWORD *)v31 + 27) = 0uLL;
              *((_OWORD *)v31 + 28) = 0uLL;
              *((_OWORD *)v31 + 25) = 0uLL;
              *((_OWORD *)v31 + 26) = 0uLL;
              *((_OWORD *)v31 + 23) = 0uLL;
              *((_OWORD *)v31 + 24) = 0uLL;
              *((_OWORD *)v31 + 21) = 0uLL;
              *((_OWORD *)v31 + 22) = 0uLL;
              *((_OWORD *)v31 + 19) = 0uLL;
              *((_OWORD *)v31 + 20) = 0uLL;
              *((_OWORD *)v31 + 17) = 0uLL;
              *((_OWORD *)v31 + 18) = 0uLL;
              *((_OWORD *)v31 + 15) = 0uLL;
              *((_OWORD *)v31 + 16) = 0uLL;
              *((_OWORD *)v31 + 13) = 0uLL;
              *((_OWORD *)v31 + 14) = 0uLL;
              *((_OWORD *)v31 + 11) = 0uLL;
              *((_OWORD *)v31 + 12) = 0uLL;
              *((_OWORD *)v31 + 9) = 0uLL;
              *((_OWORD *)v31 + 10) = 0uLL;
              *((_OWORD *)v31 + 7) = 0uLL;
              *((_OWORD *)v31 + 8) = 0uLL;
              *((_OWORD *)v31 + 5) = 0uLL;
              *((_OWORD *)v31 + 6) = 0uLL;
              *((_OWORD *)v31 + 3) = 0uLL;
              *((_OWORD *)v31 + 4) = 0uLL;
              *((_OWORD *)v31 + 1) = 0uLL;
              *((_OWORD *)v31 + 2) = 0uLL;
              *(_OWORD *)v31 = 0uLL;
              *((_DWORD *)v31 + 6) = 3;
              *((_OWORD *)v31 + 2) = 0uLL;
              *((_OWORD *)v31 + 3) = 0uLL;
              *((_OWORD *)v31 + 4) = 0uLL;
              *((_OWORD *)v31 + 5) = 0uLL;
              *((_OWORD *)v31 + 6) = 0uLL;
              *((_OWORD *)v31 + 7) = 0uLL;
              *((_OWORD *)v31 + 8) = 0uLL;
              *((_OWORD *)v31 + 9) = 0uLL;
              *((_OWORD *)v31 + 10) = 0uLL;
              *((_OWORD *)v31 + 11) = 0uLL;
              *((_OWORD *)v31 + 12) = 0uLL;
              *((_OWORD *)v31 + 13) = 0uLL;
              *((_OWORD *)v31 + 14) = 0uLL;
              *((_QWORD *)v31 + 30) = 0;
              *((_QWORD *)v31 + 63) = 0;
              *((_QWORD *)v31 + 64) = 0;
              *((_QWORD *)v31 + 62) = 0;
              v31 += 520;
            }
            while (v31 != v32);
            *(_QWORD *)&v288 = &v30[520 * v17];
            v33 = *(char **)v16;
            v34 = (void **)v16;
            i = *v19;
            v273 = v33;
            if (*v19 == v33)
            {
              *v34 = &v30[520 * v261];
              *v19 = v32;
              *v25 = &v30[520 * v29];
            }
            else
            {
              v257 = v34;
              v279 = 0;
              v36 = &v30[520 * v261];
              do
              {
                v282 = i;
                v284 = v36;
                v278 = (_QWORD *)sub_20FD3B8A4((uint64_t)(v36 - 520), (__int128 *)(i - 520));
                v278[28] = 0;
                v278[29] = 0;
                v274 = v278 + 29;
                v278[30] = 0;
                v38 = (_BYTE *)*((_QWORD *)i - 37);
                v37 = (_BYTE *)*((_QWORD *)i - 36);
                v39 = v37 - v38;
                if (v37 != v38)
                {
                  if (v39 < 0)
                    sub_20E867F44();
                  v40 = (char *)operator new(v37 - v38);
                  v278[28] = v40;
                  *v274 = v40;
                  v278[30] = &v40[8 * (v39 >> 3)];
                  v41 = v39 & 0xFFFFFFFFFFFFFFF8;
                  memcpy(v40, v38, v41);
                  *v274 = &v40[v41];
                }
                v276 = i - 520;
                *((_DWORD *)v284 - 8) = 0;
                v42 = *((_DWORD *)i - 8);
                if (v42)
                {
                  v43 = 0;
                  v286 = v284 - 272;
                  v280 = (uint64_t)&v282[80 * v42 - 272];
                  v44 = -272;
                  do
                  {
                    v45 = &v282[v44];
                    v46 = &v286[80 * v43];
                    *(_QWORD *)v46 = 0;
                    *((_QWORD *)v46 + 1) = 0;
                    *((_QWORD *)v46 + 2) = 0;
                    v48 = *(_BYTE **)&v282[v44];
                    v47 = *(_BYTE **)&v282[v44 + 8];
                    v49 = v47 - v48;
                    if (v47 != v48)
                    {
                      if (v49 < 0)
                        sub_20E867F44();
                      v50 = (char *)operator new((size_t)&v47[-*(_QWORD *)v45]);
                      *(_QWORD *)v46 = v50;
                      *((_QWORD *)v46 + 1) = v50;
                      *((_QWORD *)v46 + 2) = &v50[16 * (v49 >> 4)];
                      v51 = v49 & 0xFFFFFFFFFFFFFFF0;
                      memcpy(v50, v48, v51);
                      *((_QWORD *)v46 + 1) = &v50[v51];
                    }
                    *((_QWORD *)v46 + 3) = 0;
                    *((_QWORD *)v46 + 4) = 0;
                    *((_QWORD *)v46 + 5) = 0;
                    v53 = (_BYTE *)*((_QWORD *)v45 + 3);
                    v52 = (_BYTE *)*((_QWORD *)v45 + 4);
                    v54 = v52 - v53;
                    if (v52 != v53)
                    {
                      if (v54 < 0)
                        sub_20E867F44();
                      v55 = (char *)operator new(v52 - v53);
                      *((_QWORD *)v46 + 3) = v55;
                      *((_QWORD *)v46 + 4) = v55;
                      v56 = &v55[4 * (v54 >> 2)];
                      *((_QWORD *)v46 + 5) = v56;
                      memcpy(v55, v53, v54);
                      *((_QWORD *)v46 + 4) = v56;
                    }
                    *((_QWORD *)v46 + 6) = *((_QWORD *)v45 + 6);
                    v57 = &v286[80 * v43];
                    *((_QWORD *)v57 + 7) = 0;
                    v58 = v57 + 56;
                    v58[1] = 0;
                    v59 = v58 + 1;
                    v58[2] = 0;
                    v61 = (_BYTE *)*((_QWORD *)v45 + 7);
                    v60 = (_BYTE *)*((_QWORD *)v45 + 8);
                    v62 = v60 - v61;
                    if (v60 != v61)
                    {
                      if (v62 < 0)
                        sub_20E867F44();
                      v63 = (char *)operator new(v60 - v61);
                      *v58 = v63;
                      *v59 = v63;
                      v58[2] = &v63[8 * (v62 >> 3)];
                      memcpy(v63, v61, v62 & 0xFFFFFFFFFFFFFFF8);
                      *v59 = &v63[v62 & 0xFFFFFFFFFFFFFFF8];
                    }
                    v43 = *((_DWORD *)v284 - 8) + 1;
                    *((_DWORD *)v284 - 8) = v43;
                    v44 += 80;
                  }
                  while (v45 + 80 != (char *)v280);
                }
                *((_QWORD *)v284 - 3) = 0;
                *((_QWORD *)v284 - 2) = 0;
                *((_QWORD *)v284 - 1) = 0;
                v65 = (_BYTE *)*((_QWORD *)v282 - 3);
                v64 = (_BYTE *)*((_QWORD *)v282 - 2);
                v66 = v64 - v65;
                if (v64 != v65)
                {
                  if (v66 < 0)
                    sub_20EABADD4();
                  v67 = (char *)operator new(v64 - v65);
                  *((_QWORD *)v284 - 3) = v67;
                  *((_QWORD *)v284 - 2) = v67;
                  v68 = &v67[4 * (v66 >> 2)];
                  *((_QWORD *)v284 - 1) = v68;
                  memcpy(v67, v65, v66);
                  *((_QWORD *)v284 - 2) = v68;
                }
                v279 -= 520;
                i = v276;
                v36 = (char *)v278;
              }
              while (v276 != v273);
              v88 = (char *)*v257;
              v89 = (char *)*v269;
              *v257 = v278;
              *(_OWORD *)v269 = v288;
              for (i = v88; v89 != i; v89 -= 520)
              {
                v90 = (void *)*((_QWORD *)v89 - 3);
                if (v90)
                {
                  *((_QWORD *)v89 - 2) = v90;
                  operator delete(v90);
                }
                v91 = *((unsigned int *)v89 - 8);
                if ((_DWORD)v91)
                {
                  v92 = 0;
                  v93 = 80 * v91;
                  do
                  {
                    v94 = &v89[v92];
                    v95 = *(void **)&v89[v92 - 216];
                    if (v95)
                    {
                      *((_QWORD *)v94 - 26) = v95;
                      operator delete(v95);
                    }
                    v96 = (void *)*((_QWORD *)v94 - 31);
                    if (v96)
                    {
                      *(_QWORD *)&v89[v92 - 240] = v96;
                      operator delete(v96);
                    }
                    v97 = (void *)*((_QWORD *)v94 - 34);
                    if (v97)
                    {
                      *(_QWORD *)&v89[v92 - 264] = v97;
                      operator delete(v97);
                    }
                    v92 += 80;
                  }
                  while (v93 != v92);
                }
                *((_DWORD *)v89 - 8) = 0;
                v98 = (void *)*((_QWORD *)v89 - 37);
                if (v98)
                {
                  *((_QWORD *)v89 - 36) = v98;
                  operator delete(v98);
                }
                v99 = (void *)*((_QWORD *)v89 - 40);
                if (v99)
                {
                  *((_QWORD *)v89 - 39) = v99;
                  operator delete(v99);
                }
                v100 = (void *)*((_QWORD *)v89 - 43);
                if (v100)
                {
                  *((_QWORD *)v89 - 42) = v100;
                  operator delete(v100);
                }
                v101 = (void *)*((_QWORD *)v89 - 46);
                if (v101)
                {
                  *((_QWORD *)v89 - 45) = v101;
                  operator delete(v101);
                }
                v102 = (void *)*((_QWORD *)v89 - 49);
                if (v102)
                {
                  *((_QWORD *)v89 - 48) = v102;
                  operator delete(v102);
                }
                v103 = (void *)*((_QWORD *)v89 - 52);
                if (v103)
                {
                  *((_QWORD *)v89 - 51) = v103;
                  operator delete(v103);
                }
                v104 = (void *)*((_QWORD *)v89 - 55);
                if (v104)
                {
                  *((_QWORD *)v89 - 54) = v104;
                  operator delete(v104);
                }
                v105 = (void *)*((_QWORD *)v89 - 58);
                if (v105)
                {
                  *((_QWORD *)v89 - 57) = v105;
                  operator delete(v105);
                }
                v106 = (void *)*((_QWORD *)v89 - 61);
                if (v106)
                {
                  *((_QWORD *)v89 - 60) = v106;
                  operator delete(v106);
                }
              }
            }
            if (i)
              operator delete(i);
          }
        }
        v13 = (char *)*v258;
        v107 = (uint64_t *)((char *)*v258 + 24 * v271);
        v109 = *v107;
        v108 = v107[1];
        if (v109 == v108)
          goto LABEL_9;
        v110 = v108 - v109 - 520;
        if (v110 >= 0x208)
        {
          v112 = v110 / 0x208 + 1;
          v111 = v109 + 520 * (v112 & 0xFFFFFFFFFFFFFELL);
          v113 = v112 & 0xFFFFFFFFFFFFFELL;
          do
          {
            *(_DWORD *)(v109 + 24) = v265;
            *(_DWORD *)(v109 + 544) = v265;
            v109 += 1040;
            v113 -= 2;
          }
          while (v113);
          if (v112 == (v112 & 0xFFFFFFFFFFFFFELL))
            goto LABEL_9;
        }
        else
        {
          v111 = v109;
        }
        do
        {
          *(_DWORD *)(v111 + 24) = v265;
          v111 += 520;
        }
        while (v111 != v108);
LABEL_9:
        v15 = v271 + 1;
        if (v271 + 1 == v263)
        {
          v115 = (void **)v267[9];
          v114 = (char *)v267[10];
          goto LABEL_123;
        }
      }
    }
  }
  v115 = 0;
  v114 = 0;
LABEL_123:
  v117 = *a3;
  v116 = a3[1];
  v118 = v116 - *a3;
  v119 = 0xAAAAAAAAAAAAAAABLL * ((v114 - (char *)v115) >> 3);
  v259 = v118 >> 2;
  v120 = (v118 >> 2) - v119;
  if (v118 >> 2 <= v119)
  {
    v130 = v267;
    if (v118 >> 2 < v119)
      sub_20F103410((uint64_t)v260, &v115[3 * v259]);
  }
  else
  {
    v121 = v267[11];
    if (0xAAAAAAAAAAAAAAABLL * ((v121 - (uint64_t)v114) >> 3) >= v120)
    {
      v156 = 24 * ((24 * v120 - 24) / 0x18) + 24;
      bzero(v114, v156);
      v267[10] = &v114[v156];
      v130 = v267;
      goto LABEL_179;
    }
    if ((unint64_t)v118 > 0x2AAAAAAAAAAAAAA8)
      sub_20E867F44();
    v122 = 0xAAAAAAAAAAAAAAABLL * ((v121 - (uint64_t)v115) >> 3);
    v123 = 0x5555555555555556 * ((v121 - (uint64_t)v115) >> 3);
    if (v123 <= v259)
      v123 = v259;
    if (v122 >= 0x555555555555555)
      v124 = 0xAAAAAAAAAAAAAAALL;
    else
      v124 = v123;
    if (v124 > 0xAAAAAAAAAAAAAAALL)
      sub_20E877A38();
    v125 = (char *)operator new(24 * v124);
    v126 = &v125[8 * ((v114 - (char *)v115) >> 3)];
    v127 = &v125[24 * v124];
    v128 = 24 * ((24 * v120 - 24) / 0x18) + 24;
    bzero(v126, v128);
    v129 = &v126[v128];
    if (v114 == (char *)v115)
    {
      v130 = v267;
      v267[9] = v126;
      v267[10] = v129;
      v267[11] = v127;
      if (v115)
LABEL_178:
        operator delete(v115);
    }
    else
    {
      v130 = v267;
      do
      {
        v131 = v126;
        *((_QWORD *)v126 - 2) = 0;
        *((_QWORD *)v126 - 1) = 0;
        v132 = *(_OWORD *)(v114 - 24);
        v114 -= 24;
        *(_OWORD *)(v126 - 24) = v132;
        v126 -= 24;
        *((_QWORD *)v131 - 1) = *((_QWORD *)v114 + 2);
        *(_QWORD *)v114 = 0;
        *((_QWORD *)v114 + 1) = 0;
        *((_QWORD *)v114 + 2) = 0;
      }
      while (v114 != (char *)v115);
      v115 = (void **)v267[9];
      v133 = (void **)v267[10];
      v267[9] = v126;
      v267[10] = v129;
      v267[11] = v127;
      if (v133 != v115)
      {
        v134 = v133;
        do
        {
          v137 = *(v134 - 3);
          v134 -= 3;
          v136 = v137;
          if (v137)
          {
            v138 = *(v133 - 2);
            v135 = v136;
            if (v138 != v136)
            {
              do
              {
                v139 = (void *)*(v138 - 3);
                if (v139)
                {
                  *(v138 - 2) = v139;
                  operator delete(v139);
                }
                v140 = *((unsigned int *)v138 - 8);
                if ((_DWORD)v140)
                {
                  v141 = 0;
                  v142 = 80 * v140;
                  do
                  {
                    v143 = &v138[v141 / 8];
                    v144 = (void *)v138[v141 / 8 - 27];
                    if (v144)
                    {
                      *(v143 - 26) = v144;
                      operator delete(v144);
                    }
                    v145 = (void *)*(v143 - 31);
                    if (v145)
                    {
                      v138[v141 / 8 - 30] = v145;
                      operator delete(v145);
                    }
                    v146 = (void *)*(v143 - 34);
                    if (v146)
                    {
                      v138[v141 / 8 - 33] = v146;
                      operator delete(v146);
                    }
                    v141 += 80;
                  }
                  while (v142 != v141);
                }
                *((_DWORD *)v138 - 8) = 0;
                v147 = (void *)*(v138 - 37);
                if (v147)
                {
                  *(v138 - 36) = v147;
                  operator delete(v147);
                }
                v148 = (void *)*(v138 - 40);
                if (v148)
                {
                  *(v138 - 39) = v148;
                  operator delete(v148);
                }
                v149 = (void *)*(v138 - 43);
                if (v149)
                {
                  *(v138 - 42) = v149;
                  operator delete(v149);
                }
                v150 = (void *)*(v138 - 46);
                if (v150)
                {
                  *(v138 - 45) = v150;
                  operator delete(v150);
                }
                v151 = (void *)*(v138 - 49);
                if (v151)
                {
                  *(v138 - 48) = v151;
                  operator delete(v151);
                }
                v152 = (void *)*(v138 - 52);
                if (v152)
                {
                  *(v138 - 51) = v152;
                  operator delete(v152);
                }
                v153 = (void *)*(v138 - 55);
                if (v153)
                {
                  *(v138 - 54) = v153;
                  operator delete(v153);
                }
                v154 = (void *)*(v138 - 58);
                if (v154)
                {
                  *(v138 - 57) = v154;
                  operator delete(v154);
                }
                v155 = (void *)*(v138 - 61);
                if (v155)
                {
                  *(v138 - 60) = v155;
                  operator delete(v155);
                }
                v138 -= 65;
              }
              while (v138 != v136);
              v135 = *v134;
            }
            *(v133 - 2) = v136;
            operator delete(v135);
          }
          v133 = v134;
        }
        while (v134 != v115);
        v130 = v267;
      }
      if (v115)
        goto LABEL_178;
    }
  }
LABEL_179:
  if (v116 != v117)
  {
    v157 = 0;
    v158 = *v260;
    do
    {
      v159 = (char **)(v158 + 24 * v157);
      v160 = *(unsigned int *)(*a3 + 4 * v157);
      v162 = v159 + 1;
      v161 = v159[1];
      v163 = *v159;
      v264 = 0xFC0FC0FC0FC0FC1 * ((v161 - *v159) >> 3);
      v266 = v157;
      v164 = v160 - v264;
      if (v160 <= v264)
      {
        if (v160 < v264)
        {
          v210 = &v163[520 * v160];
          while (v161 != v210)
          {
            v211 = (void *)*((_QWORD *)v161 - 3);
            if (v211)
            {
              *((_QWORD *)v161 - 2) = v211;
              operator delete(v211);
            }
            v212 = *((unsigned int *)v161 - 8);
            if ((_DWORD)v212)
            {
              v213 = 0;
              v214 = 80 * v212;
              do
              {
                v215 = &v161[v213];
                v216 = *(void **)&v161[v213 - 216];
                if (v216)
                {
                  *((_QWORD *)v215 - 26) = v216;
                  operator delete(v216);
                }
                v217 = (void *)*((_QWORD *)v215 - 31);
                if (v217)
                {
                  *(_QWORD *)&v161[v213 - 240] = v217;
                  operator delete(v217);
                }
                v218 = (void *)*((_QWORD *)v215 - 34);
                if (v218)
                {
                  *(_QWORD *)&v161[v213 - 264] = v218;
                  operator delete(v218);
                }
                v213 += 80;
              }
              while (v214 != v213);
            }
            *((_DWORD *)v161 - 8) = 0;
            v219 = (void *)*((_QWORD *)v161 - 37);
            if (v219)
            {
              *((_QWORD *)v161 - 36) = v219;
              operator delete(v219);
            }
            v220 = (void *)*((_QWORD *)v161 - 40);
            if (v220)
            {
              *((_QWORD *)v161 - 39) = v220;
              operator delete(v220);
            }
            v221 = (void *)*((_QWORD *)v161 - 43);
            if (v221)
            {
              *((_QWORD *)v161 - 42) = v221;
              operator delete(v221);
            }
            v222 = (void *)*((_QWORD *)v161 - 46);
            if (v222)
            {
              *((_QWORD *)v161 - 45) = v222;
              operator delete(v222);
            }
            v223 = (void *)*((_QWORD *)v161 - 49);
            if (v223)
            {
              *((_QWORD *)v161 - 48) = v223;
              operator delete(v223);
            }
            v224 = (void *)*((_QWORD *)v161 - 52);
            if (v224)
            {
              *((_QWORD *)v161 - 51) = v224;
              operator delete(v224);
            }
            v225 = (void *)*((_QWORD *)v161 - 55);
            if (v225)
            {
              *((_QWORD *)v161 - 54) = v225;
              operator delete(v225);
            }
            v226 = (void *)*((_QWORD *)v161 - 58);
            if (v226)
            {
              *((_QWORD *)v161 - 57) = v226;
              operator delete(v226);
            }
            v227 = (void *)*((_QWORD *)v161 - 61);
            if (v227)
            {
              *((_QWORD *)v161 - 60) = v227;
              operator delete(v227);
            }
            v161 -= 520;
          }
          *v162 = v210;
        }
      }
      else
      {
        v262 = (void **)(v159 + 1);
        v165 = v158 + 24 * v157;
        v168 = *(_QWORD *)(v165 + 16);
        v167 = (_QWORD *)(v165 + 16);
        v166 = v168;
        if (0xFC0FC0FC0FC0FC1 * ((v168 - (uint64_t)v161) >> 3) >= v164)
        {
          v228 = &v161[520 * v164];
          do
          {
            *((_OWORD *)v161 + 29) = 0uLL;
            *((_OWORD *)v161 + 30) = 0uLL;
            *((_OWORD *)v161 + 27) = 0uLL;
            *((_OWORD *)v161 + 28) = 0uLL;
            *((_OWORD *)v161 + 25) = 0uLL;
            *((_OWORD *)v161 + 26) = 0uLL;
            *((_OWORD *)v161 + 23) = 0uLL;
            *((_OWORD *)v161 + 24) = 0uLL;
            *((_OWORD *)v161 + 21) = 0uLL;
            *((_OWORD *)v161 + 22) = 0uLL;
            *((_OWORD *)v161 + 19) = 0uLL;
            *((_OWORD *)v161 + 20) = 0uLL;
            *((_OWORD *)v161 + 17) = 0uLL;
            *((_OWORD *)v161 + 18) = 0uLL;
            *((_OWORD *)v161 + 15) = 0uLL;
            *((_OWORD *)v161 + 16) = 0uLL;
            *((_OWORD *)v161 + 13) = 0uLL;
            *((_OWORD *)v161 + 14) = 0uLL;
            *((_OWORD *)v161 + 11) = 0uLL;
            *((_OWORD *)v161 + 12) = 0uLL;
            *((_OWORD *)v161 + 9) = 0uLL;
            *((_OWORD *)v161 + 10) = 0uLL;
            *((_OWORD *)v161 + 7) = 0uLL;
            *((_OWORD *)v161 + 8) = 0uLL;
            *((_OWORD *)v161 + 5) = 0uLL;
            *((_OWORD *)v161 + 6) = 0uLL;
            *((_OWORD *)v161 + 3) = 0uLL;
            *((_OWORD *)v161 + 4) = 0uLL;
            *((_OWORD *)v161 + 1) = 0uLL;
            *((_OWORD *)v161 + 2) = 0uLL;
            *(_OWORD *)v161 = 0uLL;
            *((_DWORD *)v161 + 6) = 3;
            *((_OWORD *)v161 + 2) = 0uLL;
            *((_OWORD *)v161 + 3) = 0uLL;
            *((_OWORD *)v161 + 4) = 0uLL;
            *((_OWORD *)v161 + 5) = 0uLL;
            *((_OWORD *)v161 + 6) = 0uLL;
            *((_OWORD *)v161 + 7) = 0uLL;
            *((_OWORD *)v161 + 8) = 0uLL;
            *((_OWORD *)v161 + 9) = 0uLL;
            *((_OWORD *)v161 + 10) = 0uLL;
            *((_OWORD *)v161 + 11) = 0uLL;
            *((_OWORD *)v161 + 12) = 0uLL;
            *((_OWORD *)v161 + 13) = 0uLL;
            *((_OWORD *)v161 + 14) = 0uLL;
            *((_QWORD *)v161 + 30) = 0;
            *((_QWORD *)v161 + 63) = 0;
            *((_QWORD *)v161 + 64) = 0;
            *((_QWORD *)v161 + 62) = 0;
            v161 += 520;
          }
          while (v161 != v228);
          *v162 = v228;
        }
        else
        {
          v169 = 0xFC0FC0FC0FC0FC1 * ((v166 - (uint64_t)v163) >> 3);
          v170 = 2 * v169;
          if (2 * v169 <= v160)
            v170 = *(unsigned int *)(*a3 + 4 * v157);
          if (v169 >= 0x3F03F03F03F03FLL)
            v171 = 0x7E07E07E07E07ELL;
          else
            v171 = v170;
          if (v171 > 0x7E07E07E07E07ELL)
            sub_20E877A38();
          v172 = (char *)operator new(520 * v171);
          v173 = &v172[520 * v264];
          *((_QWORD *)&v289 + 1) = &v172[520 * v171];
          v174 = &v172[520 * v160];
          do
          {
            *((_OWORD *)v173 + 29) = 0uLL;
            *((_OWORD *)v173 + 30) = 0uLL;
            *((_OWORD *)v173 + 27) = 0uLL;
            *((_OWORD *)v173 + 28) = 0uLL;
            *((_OWORD *)v173 + 25) = 0uLL;
            *((_OWORD *)v173 + 26) = 0uLL;
            *((_OWORD *)v173 + 23) = 0uLL;
            *((_OWORD *)v173 + 24) = 0uLL;
            *((_OWORD *)v173 + 21) = 0uLL;
            *((_OWORD *)v173 + 22) = 0uLL;
            *((_OWORD *)v173 + 19) = 0uLL;
            *((_OWORD *)v173 + 20) = 0uLL;
            *((_OWORD *)v173 + 17) = 0uLL;
            *((_OWORD *)v173 + 18) = 0uLL;
            *((_OWORD *)v173 + 15) = 0uLL;
            *((_OWORD *)v173 + 16) = 0uLL;
            *((_OWORD *)v173 + 13) = 0uLL;
            *((_OWORD *)v173 + 14) = 0uLL;
            *((_OWORD *)v173 + 11) = 0uLL;
            *((_OWORD *)v173 + 12) = 0uLL;
            *((_OWORD *)v173 + 9) = 0uLL;
            *((_OWORD *)v173 + 10) = 0uLL;
            *((_OWORD *)v173 + 7) = 0uLL;
            *((_OWORD *)v173 + 8) = 0uLL;
            *((_OWORD *)v173 + 5) = 0uLL;
            *((_OWORD *)v173 + 6) = 0uLL;
            *((_OWORD *)v173 + 3) = 0uLL;
            *((_OWORD *)v173 + 4) = 0uLL;
            *((_OWORD *)v173 + 1) = 0uLL;
            *((_OWORD *)v173 + 2) = 0uLL;
            *(_OWORD *)v173 = 0uLL;
            *((_DWORD *)v173 + 6) = 3;
            *((_OWORD *)v173 + 2) = 0uLL;
            *((_OWORD *)v173 + 3) = 0uLL;
            *((_OWORD *)v173 + 4) = 0uLL;
            *((_OWORD *)v173 + 5) = 0uLL;
            *((_OWORD *)v173 + 6) = 0uLL;
            *((_OWORD *)v173 + 7) = 0uLL;
            *((_OWORD *)v173 + 8) = 0uLL;
            *((_OWORD *)v173 + 9) = 0uLL;
            *((_OWORD *)v173 + 10) = 0uLL;
            *((_OWORD *)v173 + 11) = 0uLL;
            *((_OWORD *)v173 + 12) = 0uLL;
            *((_OWORD *)v173 + 13) = 0uLL;
            *((_OWORD *)v173 + 14) = 0uLL;
            *((_QWORD *)v173 + 30) = 0;
            *((_QWORD *)v173 + 63) = 0;
            *((_QWORD *)v173 + 64) = 0;
            *((_QWORD *)v173 + 62) = 0;
            v173 += 520;
          }
          while (v173 != v174);
          *(_QWORD *)&v289 = &v172[520 * v160];
          j = *v162;
          v270 = *v159;
          if (*v162 == *v159)
          {
            *v159 = &v172[520 * v264];
            *v162 = v174;
            *v167 = &v172[520 * v171];
          }
          else
          {
            v256 = (void **)v159;
            v277 = 0;
            v176 = &v172[520 * v264];
            do
            {
              v283 = j;
              v285 = v176;
              v275 = (_QWORD *)sub_20FD3B8A4((uint64_t)(v176 - 520), (__int128 *)(j - 520));
              v275[28] = 0;
              v275[29] = 0;
              v272 = v275 + 29;
              v275[30] = 0;
              v180 = (_BYTE *)*((_QWORD *)j - 37);
              v179 = (_BYTE *)*((_QWORD *)j - 36);
              v181 = v179 - v180;
              if (v179 != v180)
              {
                if (0xAAAAAAAAAAAAAAABLL * (v181 >> 2) > 0x1555555555555555)
                  sub_20E867F44();
                v182 = (char *)operator new(v181);
                v275[28] = v182;
                *v272 = v182;
                v275[30] = &v182[4 * (v181 >> 2)];
                v183 = 12 * ((v181 - 12) / 0xCuLL) + 12;
                memcpy(v182, v180, v183);
                *v272 = &v182[v183];
              }
              v178 = j - 520;
              *((_DWORD *)v285 - 8) = 0;
              v184 = *((_DWORD *)j - 8);
              if (v184)
              {
                v185 = 0;
                v287 = v285 - 272;
                v281 = (uint64_t)&v283[80 * v184 - 272];
                v186 = -272;
                do
                {
                  v188 = &v283[v186];
                  v189 = &v287[80 * v185];
                  *(_QWORD *)v189 = 0;
                  *((_QWORD *)v189 + 1) = 0;
                  *((_QWORD *)v189 + 2) = 0;
                  v191 = *(_BYTE **)&v283[v186];
                  v190 = *(_BYTE **)&v283[v186 + 8];
                  v192 = v190 - v191;
                  if (v190 != v191)
                  {
                    if (v192 < 0)
                      sub_20E867F44();
                    v193 = (char *)operator new((size_t)&v190[-*(_QWORD *)v188]);
                    *(_QWORD *)v189 = v193;
                    *((_QWORD *)v189 + 1) = v193;
                    *((_QWORD *)v189 + 2) = &v193[16 * (v192 >> 4)];
                    v194 = v192 & 0xFFFFFFFFFFFFFFF0;
                    memcpy(v193, v191, v194);
                    *((_QWORD *)v189 + 1) = &v193[v194];
                  }
                  *((_QWORD *)v189 + 3) = 0;
                  *((_QWORD *)v189 + 4) = 0;
                  *((_QWORD *)v189 + 5) = 0;
                  v196 = (_BYTE *)*((_QWORD *)v188 + 3);
                  v195 = (_BYTE *)*((_QWORD *)v188 + 4);
                  v197 = v195 - v196;
                  if (v195 != v196)
                  {
                    if (v197 < 0)
                      sub_20E867F44();
                    v198 = (char *)operator new(v195 - v196);
                    *((_QWORD *)v189 + 3) = v198;
                    *((_QWORD *)v189 + 4) = v198;
                    v199 = &v198[4 * (v197 >> 2)];
                    *((_QWORD *)v189 + 5) = v199;
                    memcpy(v198, v196, v197);
                    *((_QWORD *)v189 + 4) = v199;
                  }
                  *((_QWORD *)v189 + 6) = *((_QWORD *)v188 + 6);
                  v200 = &v287[80 * v185];
                  *((_QWORD *)v200 + 7) = 0;
                  v201 = v200 + 56;
                  v201[1] = 0;
                  v202 = v201 + 1;
                  v201[2] = 0;
                  v204 = (_BYTE *)*((_QWORD *)v188 + 7);
                  v203 = (_BYTE *)*((_QWORD *)v188 + 8);
                  v205 = v203 - v204;
                  if (v203 != v204)
                  {
                    if (0xAAAAAAAAAAAAAAABLL * (v205 >> 2) > 0x1555555555555555)
                      sub_20E867F44();
                    v187 = (char *)operator new(v205);
                    *v201 = v187;
                    *v202 = v187;
                    v201[2] = &v187[4 * (v205 >> 2)];
                    memcpy(v187, v204, 12 * ((v205 - 12) / 0xCuLL) + 12);
                    *v202 = &v187[12 * ((v205 - 12) / 0xCuLL) + 12];
                  }
                  v185 = *((_DWORD *)v285 - 8) + 1;
                  *((_DWORD *)v285 - 8) = v185;
                  v186 += 80;
                }
                while (v188 + 80 != (char *)v281);
              }
              *((_QWORD *)v285 - 3) = 0;
              *((_QWORD *)v285 - 2) = 0;
              *((_QWORD *)v285 - 1) = 0;
              v207 = (_BYTE *)*((_QWORD *)v283 - 3);
              v206 = (_BYTE *)*((_QWORD *)v283 - 2);
              v208 = v206 - v207;
              if (v206 != v207)
              {
                if (v208 < 0)
                  sub_20EABADD4();
                v209 = (char *)operator new(v206 - v207);
                *((_QWORD *)v285 - 3) = v209;
                *((_QWORD *)v285 - 2) = v209;
                v177 = &v209[4 * (v208 >> 2)];
                *((_QWORD *)v285 - 1) = v177;
                memcpy(v209, v207, v208);
                *((_QWORD *)v285 - 2) = v177;
              }
              v277 -= 520;
              j = v178;
              v176 = (char *)v275;
            }
            while (v178 != v270);
            v229 = (char *)*v256;
            v230 = (char *)*v262;
            *v256 = v275;
            *(_OWORD *)v262 = v289;
            for (j = v229; v230 != j; v230 -= 520)
            {
              v231 = (void *)*((_QWORD *)v230 - 3);
              if (v231)
              {
                *((_QWORD *)v230 - 2) = v231;
                operator delete(v231);
              }
              v232 = *((unsigned int *)v230 - 8);
              if ((_DWORD)v232)
              {
                v233 = 0;
                v234 = 80 * v232;
                do
                {
                  v235 = &v230[v233];
                  v236 = *(void **)&v230[v233 - 216];
                  if (v236)
                  {
                    *((_QWORD *)v235 - 26) = v236;
                    operator delete(v236);
                  }
                  v237 = (void *)*((_QWORD *)v235 - 31);
                  if (v237)
                  {
                    *(_QWORD *)&v230[v233 - 240] = v237;
                    operator delete(v237);
                  }
                  v238 = (void *)*((_QWORD *)v235 - 34);
                  if (v238)
                  {
                    *(_QWORD *)&v230[v233 - 264] = v238;
                    operator delete(v238);
                  }
                  v233 += 80;
                }
                while (v234 != v233);
              }
              *((_DWORD *)v230 - 8) = 0;
              v239 = (void *)*((_QWORD *)v230 - 37);
              if (v239)
              {
                *((_QWORD *)v230 - 36) = v239;
                operator delete(v239);
              }
              v240 = (void *)*((_QWORD *)v230 - 40);
              if (v240)
              {
                *((_QWORD *)v230 - 39) = v240;
                operator delete(v240);
              }
              v241 = (void *)*((_QWORD *)v230 - 43);
              if (v241)
              {
                *((_QWORD *)v230 - 42) = v241;
                operator delete(v241);
              }
              v242 = (void *)*((_QWORD *)v230 - 46);
              if (v242)
              {
                *((_QWORD *)v230 - 45) = v242;
                operator delete(v242);
              }
              v243 = (void *)*((_QWORD *)v230 - 49);
              if (v243)
              {
                *((_QWORD *)v230 - 48) = v243;
                operator delete(v243);
              }
              v244 = (void *)*((_QWORD *)v230 - 52);
              if (v244)
              {
                *((_QWORD *)v230 - 51) = v244;
                operator delete(v244);
              }
              v245 = (void *)*((_QWORD *)v230 - 55);
              if (v245)
              {
                *((_QWORD *)v230 - 54) = v245;
                operator delete(v245);
              }
              v246 = (void *)*((_QWORD *)v230 - 58);
              if (v246)
              {
                *((_QWORD *)v230 - 57) = v246;
                operator delete(v246);
              }
              v247 = (void *)*((_QWORD *)v230 - 61);
              if (v247)
              {
                *((_QWORD *)v230 - 60) = v247;
                operator delete(v247);
              }
            }
          }
          if (j)
            operator delete(j);
        }
      }
      v158 = *v260;
      v130 = v267;
      v248 = (uint64_t *)(*v260 + 24 * v266);
      v250 = *v248;
      v249 = v248[1];
      if (v250 == v249)
        goto LABEL_181;
      v251 = v249 - v250 - 520;
      if (v251 >= 0x208)
      {
        v253 = v251 / 0x208 + 1;
        v252 = v250 + 520 * (v253 & 0xFFFFFFFFFFFFFELL);
        v254 = v253 & 0xFFFFFFFFFFFFFELL;
        do
        {
          *(_DWORD *)(v250 + 24) = 0;
          *(_DWORD *)(v250 + 544) = 0;
          v250 += 1040;
          v254 -= 2;
        }
        while (v254);
        if (v253 == (v253 & 0xFFFFFFFFFFFFFELL))
          goto LABEL_181;
      }
      else
      {
        v252 = v250;
      }
      do
      {
        *(_DWORD *)(v252 + 24) = 0;
        v252 += 520;
      }
      while (v252 != v249);
LABEL_181:
      v157 = v266 + 1;
    }
    while (v266 + 1 != v259);
  }
  return v130;
}

void sub_20FD3B330(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void ***a13, uint64_t a14, void ***a15)
{
  uint64_t v15;
  uint64_t v16;

  sub_20F028B60(v16);
  sub_20FD3B6F0(a15);
  sub_20FD3B6F0(a13);
  sub_20FD3B728(v15);
  _Unwind_Resume(a1);
}

void ***sub_20FD3B6F0(void ***a1)
{
  if (*a1)
  {
    sub_20F103410((uint64_t)a1, *a1);
    operator delete(*a1);
  }
  return a1;
}

uint64_t sub_20FD3B728(uint64_t a1)
{
  _QWORD *v2;
  void *v3;
  _QWORD *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;

  v2 = *(_QWORD **)(a1 + 16);
  while (v2)
  {
    v5 = v2;
    v2 = (_QWORD *)*v2;
    v6 = (std::__shared_weak_count *)v5[6];
    if (v6)
    {
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
    operator delete(v5);
  }
  v3 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v3)
    operator delete(v3);
  return a1;
}

_QWORD *sub_20FD3B7B8(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  _QWORD *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;

  v2 = *(void **)(a1 + 496);
  if (v2)
  {
    *(_QWORD *)(a1 + 504) = v2;
    operator delete(v2);
  }
  v3 = *(unsigned int *)(a1 + 488);
  if ((_DWORD)v3)
  {
    v4 = (_QWORD *)(a1 + 312);
    do
    {
      v5 = (void *)*(v4 - 1);
      if (v5)
      {
        *v4 = v5;
        operator delete(v5);
      }
      v6 = (void *)*(v4 - 5);
      if (v6)
      {
        *(v4 - 4) = v6;
        operator delete(v6);
      }
      v7 = (void *)*(v4 - 8);
      if (v7)
      {
        *(v4 - 7) = v7;
        operator delete(v7);
      }
      v4 += 10;
      --v3;
    }
    while (v3);
  }
  *(_DWORD *)(a1 + 488) = 0;
  v8 = *(void **)(a1 + 224);
  if (v8)
  {
    *(_QWORD *)(a1 + 232) = v8;
    operator delete(v8);
  }
  return sub_20F0284F8((_QWORD *)a1);
}

uint64_t sub_20FD3B854(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 520;
    sub_20FD3B7B8(i - 520);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t sub_20FD3B8A4(uint64_t a1, __int128 *a2)
{
  __int128 v4;
  _BYTE *v5;
  _BYTE *v6;
  uint64_t v7;
  char *v8;
  size_t v9;
  _BYTE *v10;
  _BYTE *v11;
  int64_t v12;
  char *v13;
  char *v14;
  _BYTE *v15;
  _BYTE *v16;
  size_t v17;
  char *v18;
  char *v19;
  _BYTE *v20;
  _BYTE *v21;
  size_t v22;
  char *v23;
  char *v24;
  _BYTE *v25;
  _BYTE *v26;
  int64_t v27;
  char *v28;
  char *v29;
  _BYTE *v30;
  _BYTE *v31;
  int64_t v32;
  char *v33;
  char *v34;
  _BYTE *v35;
  _BYTE *v36;
  int64_t v37;
  char *v38;
  char *v39;
  _BYTE *v40;
  _BYTE *v41;
  int64_t v42;
  char *v43;
  char *v44;

  v4 = *a2;
  *(_OWORD *)(a1 + 12) = *(__int128 *)((char *)a2 + 12);
  *(_QWORD *)(a1 + 32) = 0;
  *(_OWORD *)a1 = v4;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  v6 = (_BYTE *)*((_QWORD *)a2 + 4);
  v5 = (_BYTE *)*((_QWORD *)a2 + 5);
  v7 = v5 - v6;
  if (v5 != v6)
  {
    if (v7 < 0)
      sub_20E867F44();
    v8 = (char *)operator new(v5 - v6);
    *(_QWORD *)(a1 + 32) = v8;
    *(_QWORD *)(a1 + 40) = v8;
    *(_QWORD *)(a1 + 48) = &v8[16 * (v7 >> 4)];
    v9 = v7 & 0xFFFFFFFFFFFFFFF0;
    memcpy(v8, v6, v9);
    *(_QWORD *)(a1 + 40) = &v8[v9];
  }
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  v11 = (_BYTE *)*((_QWORD *)a2 + 7);
  v10 = (_BYTE *)*((_QWORD *)a2 + 8);
  v12 = v10 - v11;
  if (v10 != v11)
  {
    if (v12 < 0)
      sub_20E867F44();
    v13 = (char *)operator new(v10 - v11);
    *(_QWORD *)(a1 + 56) = v13;
    *(_QWORD *)(a1 + 64) = v13;
    v14 = &v13[4 * (v12 >> 2)];
    *(_QWORD *)(a1 + 72) = v14;
    memcpy(v13, v11, v12);
    *(_QWORD *)(a1 + 64) = v14;
  }
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  v16 = (_BYTE *)*((_QWORD *)a2 + 10);
  v15 = (_BYTE *)*((_QWORD *)a2 + 11);
  v17 = v15 - v16;
  if (v15 != v16)
  {
    if ((v17 & 0x8000000000000000) != 0)
      sub_20E867F44();
    v18 = (char *)operator new(v15 - v16);
    *(_QWORD *)(a1 + 80) = v18;
    *(_QWORD *)(a1 + 88) = v18;
    v19 = &v18[v17];
    *(_QWORD *)(a1 + 96) = &v18[v17];
    memcpy(v18, v16, v17);
    *(_QWORD *)(a1 + 88) = v19;
  }
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 120) = 0;
  v21 = (_BYTE *)*((_QWORD *)a2 + 13);
  v20 = (_BYTE *)*((_QWORD *)a2 + 14);
  v22 = v20 - v21;
  if (v20 != v21)
  {
    if ((v22 & 0x8000000000000000) != 0)
      sub_20E867F44();
    v23 = (char *)operator new(v20 - v21);
    *(_QWORD *)(a1 + 104) = v23;
    *(_QWORD *)(a1 + 112) = v23;
    v24 = &v23[v22];
    *(_QWORD *)(a1 + 120) = &v23[v22];
    memcpy(v23, v21, v22);
    *(_QWORD *)(a1 + 112) = v24;
  }
  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 136) = 0;
  *(_QWORD *)(a1 + 144) = 0;
  v26 = (_BYTE *)*((_QWORD *)a2 + 16);
  v25 = (_BYTE *)*((_QWORD *)a2 + 17);
  v27 = v25 - v26;
  if (v25 != v26)
  {
    if (v27 < 0)
      sub_20E867F44();
    v28 = (char *)operator new(v25 - v26);
    *(_QWORD *)(a1 + 128) = v28;
    *(_QWORD *)(a1 + 136) = v28;
    v29 = &v28[8 * (v27 >> 3)];
    *(_QWORD *)(a1 + 144) = v29;
    memcpy(v28, v26, v27);
    *(_QWORD *)(a1 + 136) = v29;
  }
  *(_QWORD *)(a1 + 152) = 0;
  *(_QWORD *)(a1 + 160) = 0;
  *(_QWORD *)(a1 + 168) = 0;
  v31 = (_BYTE *)*((_QWORD *)a2 + 19);
  v30 = (_BYTE *)*((_QWORD *)a2 + 20);
  v32 = v30 - v31;
  if (v30 != v31)
  {
    if (v32 < 0)
      sub_20E867F44();
    v33 = (char *)operator new(v30 - v31);
    *(_QWORD *)(a1 + 152) = v33;
    *(_QWORD *)(a1 + 160) = v33;
    v34 = &v33[8 * (v32 >> 3)];
    *(_QWORD *)(a1 + 168) = v34;
    memcpy(v33, v31, v32);
    *(_QWORD *)(a1 + 160) = v34;
  }
  *(_QWORD *)(a1 + 176) = 0;
  *(_QWORD *)(a1 + 184) = 0;
  *(_QWORD *)(a1 + 192) = 0;
  v36 = (_BYTE *)*((_QWORD *)a2 + 22);
  v35 = (_BYTE *)*((_QWORD *)a2 + 23);
  v37 = v35 - v36;
  if (v35 != v36)
  {
    if (v37 < 0)
      sub_20EABADD4();
    v38 = (char *)operator new(v35 - v36);
    *(_QWORD *)(a1 + 176) = v38;
    *(_QWORD *)(a1 + 184) = v38;
    v39 = &v38[4 * (v37 >> 2)];
    *(_QWORD *)(a1 + 192) = v39;
    memcpy(v38, v36, v37);
    *(_QWORD *)(a1 + 184) = v39;
  }
  *(_QWORD *)(a1 + 200) = 0;
  *(_QWORD *)(a1 + 208) = 0;
  *(_QWORD *)(a1 + 216) = 0;
  v41 = (_BYTE *)*((_QWORD *)a2 + 25);
  v40 = (_BYTE *)*((_QWORD *)a2 + 26);
  v42 = v40 - v41;
  if (v40 != v41)
  {
    if (v42 < 0)
      sub_20EABADD4();
    v43 = (char *)operator new(v40 - v41);
    *(_QWORD *)(a1 + 200) = v43;
    *(_QWORD *)(a1 + 208) = v43;
    v44 = &v43[4 * (v42 >> 2)];
    *(_QWORD *)(a1 + 216) = v44;
    memcpy(v43, v41, v42);
    *(_QWORD *)(a1 + 208) = v44;
  }
  return a1;
}

void sub_20FD3BB8C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void **a9, void **a10)
{
  _QWORD *v10;
  void **v11;
  void **v12;
  void **v13;
  void **v14;
  void **v15;
  void **v16;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;

  v18 = *v16;
  if (*v16)
  {
    v10[26] = v18;
    operator delete(v18);
    v19 = *v15;
    if (!*v15)
    {
LABEL_3:
      v20 = *v14;
      if (!*v14)
        goto LABEL_4;
      goto LABEL_14;
    }
  }
  else
  {
    v19 = *v15;
    if (!*v15)
      goto LABEL_3;
  }
  v10[23] = v19;
  operator delete(v19);
  v20 = *v14;
  if (!*v14)
  {
LABEL_4:
    v21 = *v13;
    if (!*v13)
      goto LABEL_5;
    goto LABEL_15;
  }
LABEL_14:
  v10[20] = v20;
  operator delete(v20);
  v21 = *v13;
  if (!*v13)
  {
LABEL_5:
    v22 = *v12;
    if (!*v12)
      goto LABEL_6;
    goto LABEL_16;
  }
LABEL_15:
  v10[17] = v21;
  operator delete(v21);
  v22 = *v12;
  if (!*v12)
  {
LABEL_6:
    v23 = *v11;
    if (!*v11)
      goto LABEL_7;
    goto LABEL_17;
  }
LABEL_16:
  v10[14] = v22;
  operator delete(v22);
  v23 = *v11;
  if (!*v11)
  {
LABEL_7:
    v24 = *a9;
    if (!*a9)
      goto LABEL_9;
    goto LABEL_8;
  }
LABEL_17:
  v10[11] = v23;
  operator delete(v23);
  v24 = *a9;
  if (!*a9)
  {
LABEL_9:
    v25 = *a10;
    if (*a10)
    {
      v10[5] = v25;
      operator delete(v25);
    }
    _Unwind_Resume(exception_object);
  }
LABEL_8:
  v10[8] = v24;
  operator delete(v24);
  goto LABEL_9;
}

void sub_20FD3BCA8()
{
  _QWORD *v0;

  if (!*v0)
    JUMPOUT(0x20FD3BBD4);
  JUMPOUT(0x20FD3BBCCLL);
}

void sub_20FD3BCB8()
{
  _QWORD *v0;

  if (!*v0)
    JUMPOUT(0x20FD3BBE8);
  JUMPOUT(0x20FD3BBE0);
}

uint64_t *sub_20FD3BCC8@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  void (*v5)(_QWORD *, _QWORD *, uint64_t);
  uint64_t v6;
  uint64_t v8;
  _QWORD v9[3];
  char __p[21];
  char v11;

  v11 = 20;
  strcpy(__p, "BinaryLSH parameters");
  sub_20E8B30B4(a2, (__int128 *)__p, 180, 160);
  if (v11 < 0)
    operator delete(*(void **)__p);
  *(_QWORD *)__p = nullsub_1(a2);
  v4 = operator new();
  *(_QWORD *)v4 = &off_24C9C34F8;
  *(_QWORD *)(v4 + 8) = &unk_24C9C3568;
  *(_QWORD *)(v4 + 120) = 0;
  *(_OWORD *)(v4 + 16) = 0u;
  *(_OWORD *)(v4 + 32) = 0u;
  *(_OWORD *)(v4 + 48) = 0u;
  *(_OWORD *)(v4 + 64) = 0u;
  *(_OWORD *)(v4 + 80) = 0u;
  *(_OWORD *)(v4 + 96) = 0u;
  *(_QWORD *)(v4 + 109) = 0;
  v8 = (uint64_t)off_24CA06C08 + 1;
  v9[0] = a1;
  sub_20EAA8294((uint64_t *)(v4 + 120), &v8);
  sub_20E8B2F9C((uint64_t *)__p, "BinaryLSHConfig.hash_type", v4, "Which locally sensitive hash function to use for hashing.");
  if (v8)
  {
    if ((v8 & 1) == 0)
    {
      v5 = *(void (**)(_QWORD *, _QWORD *, uint64_t))(v8 & 0xFFFFFFFFFFFFFFFELL);
      if (v5)
        v5(v9, v9, 2);
    }
    v8 = 0;
  }
  *(_QWORD *)__p = nullsub_1(a2);
  v6 = sub_20EAA1CB0((unint64_t *)(a1 + 8));
  return sub_20E8B2F9C((uint64_t *)__p, "BinaryLSHConfig.num_tables", v6, "The number of hash tables to create.");
}

void sub_20FD3BE2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  uint64_t v18;

  sub_20E869298(v18);
  _Unwind_Resume(a1);
}

uint64_t sub_20FD3BE74(uint64_t result, _WORD *a2, unsigned int a3)
{
  uint64_t v4;

  if (a3 == 4)
    goto LABEL_2;
  v4 = result;
  if (a3 <= 1)
  {
    *(_QWORD *)a2 = *(_QWORD *)result;
    return result;
  }
  if (a3 != 2)
  {
    if (a3 != 3)
    {
LABEL_2:
      *(_QWORD *)a2 = &unk_24CA06C18;
      a2[4] = 0;
      return result;
    }
    result = *(_QWORD *)(*(_QWORD *)a2 + 8) & 0x7FFFFFFFFFFFFFFFLL;
    if (result == ((unint64_t)"ZN4cv3d3vio17place_recognition28GetProgramOptionsDescriptionERNS1_15BinaryLSHConfigEE3$_0" & 0x7FFFFFFFFFFFFFFFLL)
      || (result = strcmp((const char *)result, (const char *)((unint64_t)"ZN4cv3d3vio17place_recognition28GetProgramOptionsDescriptionERNS1_15BinaryLSHConfigEE3$_0" & 0x7FFFFFFFFFFFFFFFLL)), !(_DWORD)result))
    {
      *(_QWORD *)a2 = v4;
    }
    else
    {
      *(_QWORD *)a2 = 0;
    }
  }
  return result;
}

_DWORD **sub_20FD3BF20(_DWORD **result, _DWORD *a2)
{
  **result = *a2;
  return result;
}

uint64_t sub_20FD3BF30(uint64_t a1, __int128 *a2)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  void *v12;
  uint64_t v13;

  v3 = a2[1];
  v4 = a2[2];
  v5 = a2[4];
  *(_OWORD *)(a1 + 48) = a2[3];
  v6 = *a2;
  *(_OWORD *)(a1 + 64) = v5;
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(_OWORD *)a1 = v6;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_QWORD *)(a1 + 184) = 0;
  v7 = *(_DWORD *)(a1 + 48);
  v8 = *(_DWORD *)(a1 + 52) * v7;
  v9 = *(_DWORD *)(a1 + 60);
  v10 = *(_DWORD *)(a1 + 56) * v8;
  *(_DWORD *)(a1 + 112) = v8;
  *(_DWORD *)(a1 + 116) = v10;
  v11 = v10 + v7 + v8 + v9 * v10;
  if (v11)
  {
    sub_20E93DC84(a1 + 120, v11);
    v12 = *(void **)(a1 + 120);
    v13 = *(_QWORD *)(a1 + 128) - (_QWORD)v12;
    if (v13 >= 1)
      bzero(v12, 4 * (((unint64_t)v13 >> 2) - ((unint64_t)v13 > 3)) + 4);
  }
  return a1;
}

void sub_20FD3BFEC(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  void **v2;
  void *v4;
  void *v5;
  void *v6;

  v4 = (void *)v1[21];
  if (v4)
  {
    v1[22] = v4;
    operator delete(v4);
    v5 = (void *)v1[18];
    if (!v5)
    {
LABEL_3:
      v6 = *v2;
      if (!*v2)
        goto LABEL_4;
      goto LABEL_7;
    }
  }
  else
  {
    v5 = (void *)v1[18];
    if (!v5)
      goto LABEL_3;
  }
  v1[19] = v5;
  operator delete(v5);
  v6 = *v2;
  if (!*v2)
LABEL_4:
    _Unwind_Resume(exception_object);
LABEL_7:
  v1[16] = v6;
  operator delete(v6);
  _Unwind_Resume(exception_object);
}

void sub_20FD3C040(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  void *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  double *v16;
  double *v17;
  double i;
  double v19;
  double v20;
  double v21;
  double v22;
  double sinval;
  double cosval;
  __double2 v25;
  double v26;
  double v27;
  unsigned __int8 v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  float v37;
  double v38;
  double v39;
  double v40;
  int v41;
  int v42;
  double v43;
  double v44;
  double v45;
  double v46;
  double v47;
  int v48;
  int v49;
  double v50;
  double v51;
  double v52;
  unsigned int v53;
  unsigned int v54;
  unsigned int v55;
  unsigned int v56;
  unsigned int v57;
  unsigned int v58;
  int v59;
  int v60;
  int v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  _QWORD *v78;
  int v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t v82;
  unint64_t v83;
  double v84;
  double v85;
  double v86;

  if (a4)
  {
    v8 = *(void **)(a1 + 120);
    v9 = *(_QWORD *)(a1 + 128) - (_QWORD)v8;
    if (v9 >= 1)
      bzero(v8, 4 * (((unint64_t)v9 >> 2) - ((unint64_t)v9 > 3)) + 4);
    v10 = *(_QWORD *)(a1 + 144);
    v11 = (*(_QWORD *)(a1 + 152) - v10) >> 3;
    if (4 * a4 <= v11)
    {
      if (4 * a4 < v11)
        *(_QWORD *)(a1 + 152) = v10 + 32 * a4;
    }
    else
    {
      sub_20E93D8FC(a1 + 144, 4 * a4 - v11);
    }
    v12 = *(_QWORD *)(a1 + 168);
    v13 = (*(_QWORD *)(a1 + 176) - v12) >> 2;
    if (a4 <= v13)
    {
      if (a4 < v13)
        *(_QWORD *)(a1 + 176) = v12 + 4 * a4;
    }
    else
    {
      sub_20EAC24FC(a1 + 168, a4 - v13);
    }
    v14 = 0;
    v15 = 0;
    do
    {
      v16 = (double *)(a2 + 32 * v15);
      v17 = (double *)(a3 + 32 * v15);
      for (i = v16[2] - v17[2]; i < -3.14159265; i = i + 6.28318531)
        ;
      while (i > 3.14159265)
        i = i + -6.28318531;
      v85 = v16[1];
      v86 = *v16;
      v19 = v16[3];
      v20 = *v17;
      v21 = v17[1];
      if (v17[3] == 0.0)
        v22 = 1.0;
      else
        v22 = v17[3];
      v25 = __sincos_stret(i);
      cosval = v25.__cosval;
      sinval = v25.__sinval;
      v26 = *(double *)(a1 + 64);
      v27 = *(double *)(a1 + 72);
      v28 = atomic_load((unsigned __int8 *)&qword_254A6C500);
      if ((v28 & 1) == 0)
      {
        v84 = *(double *)(a1 + 72);
        v79 = __cxa_guard_acquire(&qword_254A6C500);
        v27 = v84;
        cosval = v25.__cosval;
        sinval = v25.__sinval;
        if (v79)
        {
          qword_254A6C4F8 = 0x3FDBDFBB9E48C1D9;
          __cxa_guard_release(&qword_254A6C500);
          v27 = v84;
          cosval = v25.__cosval;
          sinval = v25.__sinval;
        }
      }
      v29 = v19 / v22 * cosval;
      v30 = v19 / v22 * sinval;
      v31 = v26 * v29 - v30 * v27 + v86 - (v20 * v29 - v21 * v30);
      v32 = *(double *)a1;
      if (*(double *)a1 <= v31)
      {
        v33 = *(double *)(a1 + 8);
        if (v33 > v31)
        {
          v34 = v26 * v30 + v29 * v27 + v85 - (v20 * v30 + v21 * v29);
          v35 = *(double *)(a1 + 16);
          if (v35 <= v34 && i <= 3.14159265 && i >= -3.14159265)
          {
            v36 = *(double *)(a1 + 24);
            if (v36 > v34)
            {
              v37 = v19 / v22;
              v38 = *(double *)&qword_254A6C4F8
                  * (float)((float)((float)((float)((float)((float)(COERCE_FLOAT(LODWORD(v37) & 0x807FFFFF | 0x3F800000)
                                                                  * -0.33333)
                                                          + 2.0)
                                                  * COERCE_FLOAT(LODWORD(v37) & 0x807FFFFF | 0x3F800000))
                                          + -1.6667)
                                  + (float)((LODWORD(v37) >> 23) - 127))
                          * 0.69315);
              v39 = *(double *)(a1 + 32);
              if (v39 <= v38)
              {
                v40 = *(double *)(a1 + 40);
                if (v40 > v38)
                {
                  v42 = *(_DWORD *)(a1 + 48);
                  v41 = *(_DWORD *)(a1 + 52);
                  v43 = v31 - v32;
                  v44 = v33 - v32;
                  if (v44 == 0.0)
                    v44 = 1.0;
                  v45 = v43 / v44 * (double)v42;
                  v46 = v36 - v35;
                  if (v36 - v35 == 0.0)
                    v46 = 1.0;
                  v47 = (v34 - v35) / v46 * (double)v41;
                  *(double *)(a1 + 80) = v45;
                  *(double *)(a1 + 88) = v47;
                  v49 = *(_DWORD *)(a1 + 56);
                  v48 = *(_DWORD *)(a1 + 60);
                  v50 = (i + 3.14159265) * 0.159154943 * (double)v49;
                  v51 = v40 - v39;
                  if (v40 - v39 == 0.0)
                    v51 = 1.0;
                  v52 = (v38 - v39) / v51 * (double)v48;
                  *(double *)(a1 + 96) = v50;
                  *(double *)(a1 + 104) = v52;
                  v53 = vcvtmd_s64_f64(v45 + -0.5);
                  if ((v53 & 0x80000000) == 0)
                  {
                    v54 = v53 + 1;
                    if ((int)(v53 + 1) < v42)
                    {
                      v55 = vcvtmd_s64_f64(v47 + -0.5);
                      if ((v55 & 0x80000000) == 0)
                      {
                        v56 = v55 + 1;
                        if ((int)(v55 + 1) < v41)
                        {
                          v57 = vcvtmd_s64_f64(v52 + -0.5);
                          if ((v57 & 0x80000000) == 0)
                          {
                            v58 = v57 + 1;
                            if ((int)(v57 + 1) < v48)
                            {
                              v59 = (int)(v49 + vcvtmd_s64_f64(v50 + -0.5)) % v49;
                              v60 = (v59 + 1) % v49;
                              v61 = v53 + v42 * v55 + *(_DWORD *)(a1 + 112) * v59 + *(_DWORD *)(a1 + 116) * v57;
                              v62 = *(_QWORD *)(a1 + 120);
                              ++*(_DWORD *)(v62 + 4 * v61);
                              v63 = 4
                                  * (int)(v54
                                        + *(_DWORD *)(a1 + 48) * v55
                                        + *(_DWORD *)(a1 + 112) * v59
                                        + *(_DWORD *)(a1 + 116) * v57);
                              ++*(_DWORD *)(v62 + v63);
                              v64 = 4
                                  * (int)(v54
                                        + *(_DWORD *)(a1 + 48) * v56
                                        + *(_DWORD *)(a1 + 112) * v59
                                        + *(_DWORD *)(a1 + 116) * v57);
                              ++*(_DWORD *)(v62 + v64);
                              v65 = 4
                                  * (int)(v54
                                        + *(_DWORD *)(a1 + 48) * v56
                                        + *(_DWORD *)(a1 + 112) * v60
                                        + *(_DWORD *)(a1 + 116) * v57);
                              ++*(_DWORD *)(v62 + v65);
                              v66 = 4
                                  * (int)(v54
                                        + *(_DWORD *)(a1 + 48) * v56
                                        + *(_DWORD *)(a1 + 112) * v60
                                        + *(_DWORD *)(a1 + 116) * v58);
                              ++*(_DWORD *)(v62 + v66);
                              v67 = 4
                                  * (int)(v54
                                        + *(_DWORD *)(a1 + 48) * v56
                                        + *(_DWORD *)(a1 + 112) * v59
                                        + *(_DWORD *)(a1 + 116) * v58);
                              ++*(_DWORD *)(v62 + v67);
                              v68 = 4
                                  * (int)(v54
                                        + *(_DWORD *)(a1 + 48) * v55
                                        + *(_DWORD *)(a1 + 112) * v60
                                        + *(_DWORD *)(a1 + 116) * v57);
                              ++*(_DWORD *)(v62 + v68);
                              v69 = 4
                                  * (int)(v54
                                        + *(_DWORD *)(a1 + 48) * v55
                                        + *(_DWORD *)(a1 + 112) * v60
                                        + *(_DWORD *)(a1 + 116) * v58);
                              ++*(_DWORD *)(v62 + v69);
                              v70 = 4
                                  * (int)(v54
                                        + *(_DWORD *)(a1 + 48) * v55
                                        + *(_DWORD *)(a1 + 112) * v59
                                        + *(_DWORD *)(a1 + 116) * v58);
                              ++*(_DWORD *)(v62 + v70);
                              v71 = 4
                                  * (int)(v53
                                        + *(_DWORD *)(a1 + 48) * v56
                                        + *(_DWORD *)(a1 + 112) * v59
                                        + *(_DWORD *)(a1 + 116) * v57);
                              ++*(_DWORD *)(v62 + v71);
                              v72 = 4
                                  * (int)(v53
                                        + *(_DWORD *)(a1 + 48) * v56
                                        + *(_DWORD *)(a1 + 112) * v60
                                        + *(_DWORD *)(a1 + 116) * v57);
                              ++*(_DWORD *)(v62 + v72);
                              v73 = 4
                                  * (int)(v53
                                        + *(_DWORD *)(a1 + 48) * v56
                                        + *(_DWORD *)(a1 + 112) * v60
                                        + *(_DWORD *)(a1 + 116) * v58);
                              ++*(_DWORD *)(v62 + v73);
                              v74 = 4
                                  * (int)(v53
                                        + *(_DWORD *)(a1 + 48) * v56
                                        + *(_DWORD *)(a1 + 112) * v59
                                        + *(_DWORD *)(a1 + 116) * v58);
                              ++*(_DWORD *)(v62 + v74);
                              v75 = 4
                                  * (int)(v53
                                        + *(_DWORD *)(a1 + 48) * v55
                                        + *(_DWORD *)(a1 + 112) * v60
                                        + *(_DWORD *)(a1 + 116) * v57);
                              ++*(_DWORD *)(v62 + v75);
                              v76 = 4
                                  * (int)(v53
                                        + *(_DWORD *)(a1 + 48) * v55
                                        + *(_DWORD *)(a1 + 112) * v60
                                        + *(_DWORD *)(a1 + 116) * v58);
                              ++*(_DWORD *)(v62 + v76);
                              v77 = 4
                                  * (int)(v53
                                        + *(_DWORD *)(a1 + 48) * v55
                                        + *(_DWORD *)(a1 + 112) * v59
                                        + *(_DWORD *)(a1 + 116) * v58);
                              ++*(_DWORD *)(v62 + v77);
                              v78 = (_QWORD *)(*(_QWORD *)(a1 + 144) + 32 * v14);
                              *v78 = *(_QWORD *)(a1 + 80);
                              v78[1] = *(_QWORD *)(a1 + 88);
                              v78[2] = *(_QWORD *)(a1 + 96);
                              v78[3] = *(_QWORD *)(a1 + 104);
                              *(_DWORD *)(*(_QWORD *)(a1 + 168) + 4 * v14++) = v15;
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      ++v15;
    }
    while (v15 != a4);
    v80 = *(_QWORD *)(a1 + 144);
    v81 = (*(_QWORD *)(a1 + 152) - v80) >> 3;
    if (4 * v14 <= v81)
    {
      if (4 * v14 < v81)
        *(_QWORD *)(a1 + 152) = v80 + 32 * v14;
    }
    else
    {
      sub_20E93D8FC(a1 + 144, 4 * v14 - v81);
    }
    v82 = *(_QWORD *)(a1 + 168);
    v83 = (*(_QWORD *)(a1 + 176) - v82) >> 2;
    if (v14 <= v83)
    {
      if (v14 < v83)
        *(_QWORD *)(a1 + 176) = v82 + 4 * v14;
    }
    else
    {
      sub_20EAC24FC(a1 + 168, v14 - v83);
    }
  }
}

double sub_20FD3C770(unint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  unint64_t v5;
  uint64_t v9;
  double *v10;
  double *v11;
  double *v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double *v17;
  unint64_t v18;
  int v19;
  int v20;
  int v21;
  int v22;
  uint64_t v23;
  double v24;
  int v25;
  int v26;
  double *v27;
  double v28;
  double v29;
  double *v30;
  double v31;
  double v32;
  double v33;
  double *v35;
  double *v36;
  uint64_t v37;

  v35 = 0;
  v36 = 0;
  v37 = 0;
  if (a1 <= a2)
    v5 = a2;
  else
    v5 = a1;
  if (a5)
  {
    sub_20E93D8FC((uint64_t)&v35, a5);
    v9 = 0;
    v10 = v35;
    v11 = (double *)(a3 + 24);
    v12 = (double *)(a4 + 24);
    do
    {
      v13 = *v11;
      v11 += 4;
      v14 = v13;
      v15 = *v12;
      v12 += 4;
      v16 = v15;
      if (v15 == 0.0)
        v16 = 1.0;
      v10[v9++] = v14 / v16 * (double)v5;
    }
    while (a5 != v9);
    v17 = v36;
  }
  else
  {
    v17 = 0;
    v10 = 0;
  }
  v18 = (unint64_t)((char *)v17 - (char *)v10) >> 3;
  if ((v18 & 0x80000000) == 0)
    v19 = (unint64_t)((char *)v17 - (char *)v10) >> 3;
  else
    v19 = v18 + 1;
  v20 = ((((char *)v17 - (char *)v10) & 8) != 0) + (v19 >> 1) - 1;
  v21 = v18 - 1;
  if ((int)v18 <= 1)
  {
    v23 = v20;
  }
  else
  {
    v22 = 0;
    v23 = v20;
    do
    {
      v24 = v10[v20];
      v25 = v22;
      v26 = v21;
      while (1)
      {
        v27 = &v10[v25];
        do
        {
          v28 = *v27++;
          v29 = v28;
          ++v25;
        }
        while (v28 < v24);
        v30 = &v10[v26 + 1];
        do
        {
          v31 = *--v30;
          v32 = v31;
          --v26;
        }
        while (v24 < v31);
        if (v25 - 1 > v26 + 1)
          break;
        *(v27 - 1) = v32;
        *v30 = v29;
        if (v25 > v26)
          goto LABEL_16;
      }
      --v25;
      ++v26;
LABEL_16:
      if (v26 < v20)
        v22 = v25;
      if (v25 > v20)
        v21 = v26;
    }
    while (v22 < v21);
  }
  v33 = v10[v23] * 0.25;
  v36 = v10;
  operator delete(v10);
  return v33;
}

void sub_20FD3C8F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20FD3C90C(uint64_t *a1, uint64_t *__sz, _QWORD *a3, _QWORD *a4)
{
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  int64_t v16;
  char *v17;
  int v18;
  _BYTE *v19;
  _BYTE *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  char *v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  __int128 *v33;
  uint64_t v34;
  __int128 v35;
  int v36;
  unsigned int *v37;
  unsigned int *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unsigned int *v45;
  uint64_t *v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  _BYTE *v52;
  _DWORD *v53;
  unint64_t v54;
  unsigned int *v55;
  unsigned int *v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  _OWORD *v61;
  unsigned int *v62;
  uint64_t v63;
  __int128 v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unsigned int v72;
  unsigned int v73;
  unsigned int *v74;
  unint64_t v75;
  unsigned int *v76;
  unint64_t v77;
  unsigned int *v78;
  char v79;
  unsigned int v80;
  BOOL v81;
  unsigned int v82;
  unsigned int v83;
  unint64_t v85;
  char *v86;
  uint64_t v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  uint64_t v92;
  unint64_t v93;
  _BYTE *v94;
  _DWORD *v95;
  int64_t v96;
  unint64_t v97;
  unint64_t v98;
  uint64_t v99;
  uint64_t v100;
  char *v101;
  _OWORD *v102;
  char *v103;
  uint64_t v104;
  __int128 v105;
  int v106;
  uint64_t v107;
  unint64_t v108;
  char *v109;
  char *v110;
  uint64_t v111;
  uint64_t v112;
  unint64_t v113;
  uint64_t v114;
  unint64_t v115;
  _BYTE *v116;
  _DWORD *v117;
  int64_t v118;
  unint64_t v119;
  unint64_t v120;
  uint64_t v121;
  uint64_t v122;
  char *v123;
  _OWORD *v124;
  char *v125;
  uint64_t v126;
  __int128 v127;
  int v128;
  uint64_t v129;
  uint64_t v130;
  unint64_t v132;
  uint64_t v133;
  char *v134;
  __int128 *v135;
  uint64_t v136;
  __int128 v137;
  uint64_t *v138;
  uint64_t v139;
  _QWORD *v140;
  uint64_t *v142;
  unsigned int *__p;
  unsigned int *v144;
  char v145;

  if (a1[1] - *a1 != __sz[1] - *__sz
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/PlaceRecognition/src/MatchingHelpers.cpp", 126, (uint64_t)"query_inds_in.size() == ref_inds_in.size()", 42, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
    goto LABEL_148;
  }
  v8 = (char *)*a3;
  v7 = (char *)a3[1];
  v9 = (uint64_t)&v7[-*a3];
  v138 = __sz;
  if (v9 == a4[1] - *a4)
    goto LABEL_6;
  if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/PlaceRecognition/src/MatchingHelpers.cpp", 127, (uint64_t)"query_inds_out.size() == ref_inds_out.size()", 44, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
LABEL_148:
    abort();
  }
  v8 = (char *)*a3;
  v7 = (char *)a3[1];
  v9 = (uint64_t)&v7[-*a3];
LABEL_6:
  v10 = v9 >> 2;
  v11 = (v9 >> 2) + ((a1[1] - *a1) >> 2);
  if (v11 <= (uint64_t)(a3[2] - (_QWORD)v8) >> 2)
    goto LABEL_15;
  if (v11 >> 62)
    sub_20E867F44();
  v12 = 4 * v11;
  v13 = (char *)operator new(4 * v11);
  v14 = &v13[4 * v10];
  v15 = v14;
  v16 = v7 - v8;
  if (v7 != v8)
  {
    if ((unint64_t)(v16 - 4) < 0x2C || (unint64_t)(v7 - &v13[v9]) < 0x20)
    {
      v17 = v7;
      v15 = &v13[4 * v10];
      do
      {
LABEL_12:
        v18 = *((_DWORD *)v17 - 1);
        v17 -= 4;
        *((_DWORD *)v15 - 1) = v18;
        v15 -= 4;
      }
      while (v17 != v8);
      goto LABEL_13;
    }
    v132 = ((unint64_t)(v16 - 4) >> 2) + 1;
    v133 = 4 * (v132 & 0x7FFFFFFFFFFFFFF8);
    v17 = &v7[-v133];
    v15 = &v14[-v133];
    v134 = &v13[4 * v10 - 16];
    v135 = (__int128 *)(v7 - 16);
    v136 = v132 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v137 = *v135;
      *((_OWORD *)v134 - 1) = *(v135 - 1);
      *(_OWORD *)v134 = v137;
      v134 -= 32;
      v135 -= 2;
      v136 -= 8;
    }
    while (v136);
    if (v132 != (v132 & 0x7FFFFFFFFFFFFFF8))
      goto LABEL_12;
  }
LABEL_13:
  *a3 = v15;
  a3[1] = v14;
  a3[2] = &v13[v12];
  if (v8)
    operator delete(v8);
LABEL_15:
  v142 = a3;
  v20 = (_BYTE *)*a4;
  v19 = (_BYTE *)a4[1];
  v21 = (uint64_t)&v19[-*a4];
  v22 = v21 >> 2;
  v23 = (v21 >> 2) + ((v138[1] - *v138) >> 2);
  if (v23 <= (uint64_t)(a4[2] - *a4) >> 2)
    goto LABEL_27;
  if (v23 >> 62)
    sub_20E867F44();
  v24 = 4 * v23;
  v25 = (char *)operator new(4 * v23);
  v26 = &v25[4 * v22];
  v27 = v26;
  if (v19 != v20)
  {
    v28 = v19 - v20 - 4;
    if (v28 < 0x2C)
    {
      v27 = &v25[4 * v22];
      do
      {
LABEL_24:
        v36 = *((_DWORD *)v19 - 1);
        v19 -= 4;
        *((_DWORD *)v27 - 1) = v36;
        v27 -= 4;
      }
      while (v19 != v20);
      goto LABEL_25;
    }
    v27 = &v25[4 * v22];
    if ((unint64_t)(&v19[-v21] - v25) < 0x20)
      goto LABEL_24;
    v29 = (v28 >> 2) + 1;
    v30 = 4 * (v29 & 0x7FFFFFFFFFFFFFF8);
    v31 = &v19[-v30];
    v27 = &v26[-v30];
    v32 = &v25[4 * v22 - 16];
    v33 = (__int128 *)(v19 - 16);
    v34 = v29 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v35 = *v33;
      *((_OWORD *)v32 - 1) = *(v33 - 1);
      *(_OWORD *)v32 = v35;
      v32 -= 32;
      v33 -= 2;
      v34 -= 8;
    }
    while (v34);
    v19 = v31;
    if (v29 != (v29 & 0x7FFFFFFFFFFFFFF8))
      goto LABEL_24;
  }
LABEL_25:
  *a4 = v27;
  a4[1] = v26;
  a4[2] = &v25[v24];
  if (v20)
    operator delete(v20);
LABEL_27:
  v37 = 0;
  v38 = 0;
  __p = 0;
  v144 = 0;
  v40 = *v142;
  v39 = v142[1];
  v41 = v39 - *v142;
  v42 = v41 >> 2;
  if ((unint64_t)v41 >= 4)
  {
    if ((unint64_t)v41 >= 0x7FFFFFFFFFFFFFFDLL)
      sub_20E92CED8();
    v38 = (unsigned int *)operator new(2 * v41);
    v37 = &v38[2 * v42];
    __p = v38;
    v144 = v38;
  }
  v140 = a4;
  if (v39 != v40)
  {
    v43 = 0;
    if (v42 <= 1)
      v44 = 1;
    else
      v44 = v42;
    v45 = v38;
    v46 = v142;
    while (1)
    {
      while (1)
      {
        v47 = *v46;
        v48 = (char *)*v140;
        if (v38 >= v37)
          break;
        *v38 = *(_DWORD *)(v47 + 4 * v43);
        v38[1] = *(_DWORD *)&v48[4 * v43];
        v38 += 2;
        v46 = v142;
        v144 = v38;
        if (++v43 == v44)
          goto LABEL_62;
      }
      v49 = ((char *)v38 - (char *)v45) >> 3;
      v50 = v49 + 1;
      if ((unint64_t)(v49 + 1) >> 61)
        sub_20E92CED8();
      if (v37 - v45 > v50)
        v50 = v37 - v45;
      if ((unint64_t)((char *)v37 - (char *)v45) >= 0x7FFFFFFFFFFFFFF8)
        v51 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v51 = v50;
      if (v51 >> 61)
        sub_20E877A38();
      v52 = operator new(8 * v51);
      v53 = &v52[8 * v49];
      *v53 = *(_DWORD *)(v47 + 4 * v43);
      v53[1] = *(_DWORD *)&v48[4 * v43];
      if (v38 == v45)
      {
        v56 = (unsigned int *)&v52[8 * v49];
        v46 = v142;
        v37 = (unsigned int *)&v52[8 * v51];
        v38 = v53 + 2;
        __p = v56;
        if (!v45)
          goto LABEL_50;
LABEL_49:
        operator delete(v45);
        goto LABEL_50;
      }
      v54 = (char *)v38 - (char *)v45 - 8;
      v46 = v142;
      if (v54 < 0x168)
        break;
      v58 = ((char *)(v38 - 2) - (char *)v45) & 0xFFFFFFFFFFFFFFF8;
      if (&v52[(char *)v38 - (char *)v45 - 8 - v58] > &v52[(char *)v38 - (char *)v45 - 8]
        || (unsigned int *)((char *)v38 - v58 - 8) > v38 - 2
        || (unint64_t)((char *)v45 - v52) < 0x20)
      {
        break;
      }
      v59 = (v54 >> 3) + 1;
      v60 = 8 * (v59 & 0x3FFFFFFFFFFFFFFCLL);
      v55 = &v38[v60 / 0xFFFFFFFFFFFFFFFCLL];
      v56 = &v53[v60 / 0xFFFFFFFFFFFFFFFCLL];
      v61 = &v52[8 * v49 - 16];
      v62 = v38 - 4;
      v63 = v59 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v64 = *(_OWORD *)v62;
        *(v61 - 1) = *((_OWORD *)v62 - 1);
        *v61 = v64;
        v61 -= 2;
        v62 -= 8;
        v63 -= 4;
      }
      while (v63);
      if (v59 != (v59 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_47;
LABEL_48:
      v37 = (unsigned int *)&v52[8 * v51];
      v38 = v53 + 2;
      __p = v56;
      if (v45)
        goto LABEL_49;
LABEL_50:
      v45 = v56;
      v144 = v38;
      if (++v43 == v44)
        goto LABEL_62;
    }
    v55 = v38;
    v56 = (unsigned int *)&v52[8 * v49];
    do
    {
LABEL_47:
      v57 = *((_QWORD *)v55 - 1);
      v55 -= 2;
      *((_QWORD *)v56 - 1) = v57;
      v56 -= 2;
    }
    while (v55 != v45);
    goto LABEL_48;
  }
  v45 = v38;
LABEL_62:
  v65 = 126 - 2 * __clz(((char *)v38 - (char *)v45) >> 3);
  if (v38 == v45)
    v66 = 0;
  else
    v66 = v65;
  sub_20F9BA068((uint64_t)v45, v38, (uint64_t)&v145, v66, 1);
  v67 = v138;
  v68 = a1[1] - *a1;
  if (v68)
  {
    v69 = 0;
    v139 = v68 >> 2;
    while (1)
    {
      v71 = *a1;
      v72 = *(_DWORD *)(*a1 + 4 * v69);
      v73 = *(_DWORD *)(*v67 + 4 * v69);
      v74 = __p;
      if (v144 != __p)
      {
        v75 = ((char *)v144 - (char *)__p) >> 3;
        do
        {
          v77 = v75 >> 1;
          v78 = &v74[2 * (v75 >> 1)];
          if (*v78 >= v72)
            v79 = 1;
          else
            v79 = -1;
          if (*v78 == v72)
          {
            v80 = v78[1];
            v81 = v80 == v73;
            v79 = v80 >= v73 ? 1 : -1;
            if (v81)
              v79 = 0;
          }
          v76 = v78 + 2;
          v75 += ~v77;
          if (v79 < 0)
            v74 = v76;
          else
            v75 = v77;
        }
        while (v75);
      }
      if (v74 != v144)
      {
        v83 = *v74;
        v82 = v74[1];
        if (v83 == v72 && v82 == v73)
          goto LABEL_69;
      }
      v86 = (char *)v142[1];
      v85 = v142[2];
      if ((unint64_t)v86 < v85)
      {
        *(_DWORD *)v86 = v72;
        v87 = (uint64_t)(v86 + 4);
        goto LABEL_113;
      }
      v88 = (char *)*v142;
      v89 = (uint64_t)&v86[-*v142];
      v90 = v89 >> 2;
      v91 = (v89 >> 2) + 1;
      if (v91 >> 62)
        goto LABEL_147;
      v92 = v85 - (_QWORD)v88;
      if (v92 >> 1 > v91)
        v91 = v92 >> 1;
      v93 = (unint64_t)v92 >= 0x7FFFFFFFFFFFFFFCLL ? 0x3FFFFFFFFFFFFFFFLL : v91;
      if (v93)
      {
        if (v93 >> 62)
          goto LABEL_146;
        v94 = operator new(4 * v93);
        v95 = &v94[4 * v90];
        *v95 = *(_DWORD *)(v71 + 4 * v69);
        v87 = (uint64_t)(v95 + 1);
        v96 = v86 - v88;
        if (v86 == v88)
        {
LABEL_105:
          v67 = v138;
          goto LABEL_111;
        }
      }
      else
      {
        v94 = 0;
        v95 = (_DWORD *)(4 * v90);
        *(_DWORD *)(4 * v90) = v72;
        v87 = 4 * v90 + 4;
        v96 = v86 - v88;
        if (v86 == v88)
          goto LABEL_105;
      }
      v97 = v96 - 4;
      if (v97 < 0x2C)
        break;
      v98 = v86 - v94 - v89;
      v67 = v138;
      if (v98 < 0x20)
        goto LABEL_110;
      v99 = (v97 >> 2) + 1;
      v100 = 4 * (v99 & 0x7FFFFFFFFFFFFFF8);
      v101 = &v86[-v100];
      v95 = (_DWORD *)((char *)v95 - v100);
      v102 = &v94[4 * v90 - 16];
      v103 = v86 - 16;
      v104 = v99 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        v105 = *(_OWORD *)v103;
        *(v102 - 1) = *((_OWORD *)v103 - 1);
        *v102 = v105;
        v102 -= 2;
        v103 -= 32;
        v104 -= 8;
      }
      while (v104);
      v86 = v101;
      if (v99 != (v99 & 0x7FFFFFFFFFFFFFF8))
        goto LABEL_110;
LABEL_111:
      *v142 = (uint64_t)v95;
      v142[1] = v87;
      v142[2] = (uint64_t)&v94[4 * v93];
      if (v88)
        operator delete(v88);
LABEL_113:
      v142[1] = v87;
      v107 = *v67;
      v109 = (char *)v140[1];
      v108 = v140[2];
      if ((unint64_t)v109 >= v108)
      {
        v110 = (char *)*v140;
        v111 = (uint64_t)&v109[-*v140];
        v112 = v111 >> 2;
        v113 = (v111 >> 2) + 1;
        if (v113 >> 62)
LABEL_147:
          sub_20E867F44();
        v114 = v108 - (_QWORD)v110;
        if (v114 >> 1 > v113)
          v113 = v114 >> 1;
        if ((unint64_t)v114 >= 0x7FFFFFFFFFFFFFFCLL)
          v115 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v115 = v113;
        if (v115)
        {
          if (v115 >> 62)
LABEL_146:
            sub_20E877A38();
          v116 = operator new(4 * v115);
          v117 = &v116[4 * v112];
          *v117 = *(_DWORD *)(v107 + 4 * v69);
          v70 = (uint64_t)(v117 + 1);
          v118 = v109 - v110;
          if (v109 != v110)
          {
LABEL_123:
            v119 = v118 - 4;
            if (v119 < 0x2C)
            {
              v67 = v138;
              goto LABEL_131;
            }
            v120 = v109 - v116 - v111;
            v67 = v138;
            if (v120 < 0x20)
              goto LABEL_155;
            v121 = (v119 >> 2) + 1;
            v122 = 4 * (v121 & 0x7FFFFFFFFFFFFFF8);
            v123 = &v109[-v122];
            v117 = (_DWORD *)((char *)v117 - v122);
            v124 = &v116[4 * v112 - 16];
            v125 = v109 - 16;
            v126 = v121 & 0x7FFFFFFFFFFFFFF8;
            do
            {
              v127 = *(_OWORD *)v125;
              *(v124 - 1) = *((_OWORD *)v125 - 1);
              *v124 = v127;
              v124 -= 2;
              v125 -= 32;
              v126 -= 8;
            }
            while (v126);
            v109 = v123;
            if (v121 != (v121 & 0x7FFFFFFFFFFFFFF8))
            {
LABEL_155:
              do
              {
LABEL_131:
                v128 = *((_DWORD *)v109 - 1);
                v109 -= 4;
                *--v117 = v128;
              }
              while (v109 != v110);
            }
LABEL_132:
            *v140 = v117;
            v140[1] = v70;
            v140[2] = &v116[4 * v115];
            if (v110)
              operator delete(v110);
            goto LABEL_68;
          }
        }
        else
        {
          v116 = 0;
          v117 = (_DWORD *)(4 * v112);
          *(_DWORD *)(4 * v112) = *(_DWORD *)(v107 + 4 * v69);
          v70 = 4 * v112 + 4;
          v118 = v109 - v110;
          if (v109 != v110)
            goto LABEL_123;
        }
        v67 = v138;
        goto LABEL_132;
      }
      *(_DWORD *)v109 = *(_DWORD *)(v107 + 4 * v69);
      v70 = (uint64_t)(v109 + 4);
LABEL_68:
      v140[1] = v70;
LABEL_69:
      if (++v69 == v139)
        goto LABEL_134;
    }
    v67 = v138;
    do
    {
LABEL_110:
      v106 = *((_DWORD *)v86 - 1);
      v86 -= 4;
      *--v95 = v106;
    }
    while (v86 != v88);
    goto LABEL_111;
  }
LABEL_134:
  v129 = v142[1];
  v130 = *v142;
  if (v129 - *v142 != v140[1] - *v140)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/PlaceRecognition/src/MatchingHelpers.cpp", 152, (uint64_t)"query_inds_out.size() == ref_inds_out.size()", 44, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v130 = *v142;
    v129 = v142[1];
  }
  if (__p)
    operator delete(__p);
  return (v129 - v130) >> 2;
}

void sub_20FD3D234(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20FD3D260(uint64_t a1, int a2, uint64_t *a3, uint64_t *a4, _QWORD *a5, _QWORD *a6, float a7)
{
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  unint64_t v20;
  double *v21;
  double v22;
  uint64_t v23;
  double v24;
  double v25;
  double v26;
  double v27;
  uint64_t v28;
  double v29;
  double v30;
  double v31;
  double v32;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  char *v39;
  uint64_t v40;
  unint64_t v41;
  char *v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  unint64_t v48;
  _BYTE *v49;
  _DWORD *v50;
  uint64_t v51;
  int64_t v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  _OWORD *v58;
  char *v59;
  uint64_t v60;
  __int128 v61;
  int v62;
  char *v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  unint64_t v69;
  _BYTE *v70;
  _DWORD *v71;
  int64_t v72;
  unint64_t v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  _OWORD *v78;
  char *v79;
  uint64_t v80;
  __int128 v81;
  int v82;
  uint64_t v84;
  uint64_t v85;

  a5[1] = *a5;
  a6[1] = *a6;
  v7 = *(_QWORD *)(a1 + 176) - *(_QWORD *)(a1 + 168);
  if (v7)
  {
    v8 = a6;
    v9 = a5;
    v10 = 0;
    v11 = 0;
    v13 = *(_DWORD *)(a1 + 112);
    v12 = *(_DWORD *)(a1 + 116);
    v14 = *(_DWORD *)(a1 + 48);
    v15 = a2 % v12 % v13 % v14;
    v16 = (a2 - v15) % v12 % v13 / v14;
    v17 = v15 + v14 * v16;
    v18 = (a2 - v17) % v12 / v13;
    v19 = (a2 - (v17 + v18 * v13)) / v12;
    v20 = v7 >> 2;
    v21 = *(double **)(a1 + 144);
    v22 = a7;
    if (v20 <= 1)
      v23 = 1;
    else
      v23 = v20;
    v24 = (double)v15 + 0.5;
    v25 = (double)v16 + 0.5;
    v26 = (double)v18 + 0.5;
    v27 = (double)v19 + 0.5;
    v85 = a1;
    v84 = v23;
    while (1)
    {
      v29 = vabdd_f64(*v21, v24);
      v30 = vabdd_f64(v21[1], v25);
      v31 = vabdd_f64(v21[3], v27);
      v32 = vabdd_f64(v21[2], v26);
      if ((double)*(int *)(a1 + 56) - v32 < v32)
        v32 = (double)*(int *)(a1 + 56) - v32;
      if (v29 >= v22 || v30 >= v22 || v32 >= v22 || v31 >= v22)
        goto LABEL_8;
      v36 = *(int *)(*(_QWORD *)(a1 + 168) + 4 * v11);
      v37 = *a3;
      v39 = (char *)v9[1];
      v38 = v9[2];
      if ((unint64_t)v39 < v38)
      {
        *(_DWORD *)v39 = *(_DWORD *)(v37 + 4 * v36);
        v9[1] = v39 + 4;
        v40 = *a4;
        v42 = (char *)v8[1];
        v41 = v8[2];
        if ((unint64_t)v42 >= v41)
          goto LABEL_46;
        goto LABEL_6;
      }
      v43 = (char *)*v9;
      v44 = (uint64_t)&v39[-*v9];
      v45 = v44 >> 2;
      v46 = (v44 >> 2) + 1;
      if (v46 >> 62)
        sub_20E867F44();
      v47 = v38 - (_QWORD)v43;
      if (v47 >> 1 > v46)
        v46 = v47 >> 1;
      v48 = (unint64_t)v47 >= 0x7FFFFFFFFFFFFFFCLL ? 0x3FFFFFFFFFFFFFFFLL : v46;
      if (v48)
      {
        if (v48 >> 62)
          goto LABEL_69;
        v49 = operator new(4 * v48);
        v50 = &v49[4 * v45];
        *v50 = *(_DWORD *)(v37 + 4 * v36);
        v51 = (uint64_t)(v50 + 1);
        v52 = v39 - v43;
        if (v39 == v43)
        {
LABEL_37:
          v8 = a6;
          goto LABEL_43;
        }
      }
      else
      {
        v49 = 0;
        v50 = (_DWORD *)(4 * v45);
        *(_DWORD *)(4 * v45) = *(_DWORD *)(v37 + 4 * v36);
        v51 = 4 * v45 + 4;
        v52 = v39 - v43;
        if (v39 == v43)
          goto LABEL_37;
      }
      v53 = v52 - 4;
      if (v53 < 0x2C)
        break;
      v54 = v39 - v49 - v44;
      v8 = a6;
      if (v54 < 0x20)
        goto LABEL_42;
      v55 = (v53 >> 2) + 1;
      v56 = 4 * (v55 & 0x7FFFFFFFFFFFFFF8);
      v57 = &v39[-v56];
      v50 = (_DWORD *)((char *)v50 - v56);
      v58 = &v49[4 * v45 - 16];
      v59 = v39 - 16;
      v60 = v55 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        v61 = *(_OWORD *)v59;
        *(v58 - 1) = *((_OWORD *)v59 - 1);
        *v58 = v61;
        v58 -= 2;
        v59 -= 32;
        v60 -= 8;
      }
      while (v60);
      v39 = v57;
      if (v55 != (v55 & 0x7FFFFFFFFFFFFFF8))
        goto LABEL_42;
LABEL_43:
      v63 = &v49[4 * v48];
      v9 = a5;
      *a5 = v50;
      a5[1] = v51;
      a5[2] = v63;
      if (v43)
        operator delete(v43);
      v23 = v84;
      a1 = v85;
      a5[1] = v51;
      v40 = *a4;
      v42 = (char *)v8[1];
      v41 = v8[2];
      if ((unint64_t)v42 >= v41)
      {
LABEL_46:
        v64 = (char *)*v8;
        v65 = (uint64_t)&v42[-*v8];
        v66 = v65 >> 2;
        v67 = (v65 >> 2) + 1;
        if (v67 >> 62)
          sub_20E867F44();
        v68 = v41 - (_QWORD)v64;
        if (v68 >> 1 > v67)
          v67 = v68 >> 1;
        if ((unint64_t)v68 >= 0x7FFFFFFFFFFFFFFCLL)
          v69 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v69 = v67;
        if (v69)
        {
          if (v69 >> 62)
LABEL_69:
            sub_20E877A38();
          v70 = operator new(4 * v69);
          v71 = &v70[4 * v66];
          *v71 = *(_DWORD *)(v40 + 4 * v36);
          v28 = (uint64_t)(v71 + 1);
          v72 = v42 - v64;
          if (v42 != v64)
          {
LABEL_55:
            v73 = v72 - 4;
            if (v73 < 0x2C)
            {
              v8 = a6;
              goto LABEL_63;
            }
            v74 = v42 - v70 - v65;
            v8 = a6;
            if (v74 < 0x20)
              goto LABEL_74;
            v75 = (v73 >> 2) + 1;
            v76 = 4 * (v75 & 0x7FFFFFFFFFFFFFF8);
            v77 = &v42[-v76];
            v71 = (_DWORD *)((char *)v71 - v76);
            v78 = &v70[4 * v66 - 16];
            v79 = v42 - 16;
            v80 = v75 & 0x7FFFFFFFFFFFFFF8;
            do
            {
              v81 = *(_OWORD *)v79;
              *(v78 - 1) = *((_OWORD *)v79 - 1);
              *v78 = v81;
              v78 -= 2;
              v79 -= 32;
              v80 -= 8;
            }
            while (v80);
            v42 = v77;
            if (v75 != (v75 & 0x7FFFFFFFFFFFFFF8))
            {
LABEL_74:
              do
              {
LABEL_63:
                v82 = *((_DWORD *)v42 - 1);
                v42 -= 4;
                *--v71 = v82;
              }
              while (v42 != v64);
            }
LABEL_64:
            *v8 = v71;
            v8[1] = v28;
            v8[2] = &v70[4 * v69];
            if (v64)
              operator delete(v64);
            v23 = v84;
            a1 = v85;
            v9 = a5;
            goto LABEL_7;
          }
        }
        else
        {
          v70 = 0;
          v71 = (_DWORD *)(4 * v66);
          *(_DWORD *)(4 * v66) = *(_DWORD *)(v40 + 4 * v36);
          v28 = 4 * v66 + 4;
          v72 = v42 - v64;
          if (v42 != v64)
            goto LABEL_55;
        }
        v8 = a6;
        goto LABEL_64;
      }
LABEL_6:
      *(_DWORD *)v42 = *(_DWORD *)(v40 + 4 * v36);
      v28 = (uint64_t)(v42 + 4);
LABEL_7:
      v8[1] = v28;
      v10 = (v10 + 1);
LABEL_8:
      v21 += 4;
      if (++v11 == v23)
        return v10;
    }
    v8 = a6;
    do
    {
LABEL_42:
      v62 = *((_DWORD *)v39 - 1);
      v39 -= 4;
      *--v50 = v62;
    }
    while (v39 != v43);
    goto LABEL_43;
  }
  return 0;
}

void sub_20FD3D6C4(uint64_t *a1@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X2>, uint64_t *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, unsigned int **a7@<X6>, unsigned int **a8@<X7>, uint64_t a9@<X8>, double a10@<D0>, uint64x2_t a11, uint64x2_t a12)
{
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unsigned int *v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  float64x2_t *v28;
  unsigned int v29;
  float32x2_t *v30;
  uint64_t v31;
  unsigned int *v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  float64x2_t *v36;
  unsigned int v37;
  float32x2_t *v38;
  uint64_t v39;
  float32x2_t v40;
  float64x2_t v41;
  float64x2_t v42;
  uint64_t v43;
  unsigned int *v44;
  unsigned int *v45;
  unsigned int *v46;
  unsigned int *v47;
  unsigned int v48;
  unsigned int *v49;
  unsigned int v50;
  unsigned int v51;
  BOOL v52;
  uint64_t v53;
  uint64_t v54;
  float64x2_t v57;
  __int128 v59[3];
  int32x2_t v60;
  uint64_t v61;
  float64x2_t v62;

  v19 = (char *)a7[1] - (char *)*a7;
  v20 = (a1[1] - *a1) >> 3;
  if (v19 <= v20)
  {
    if (v19 < v20)
      a1[1] = *a1 + 8 * v19;
  }
  else
  {
    sub_20E93D8FC((uint64_t)a1, v19 - v20);
  }
  v21 = (a2[1] - *a2) >> 3;
  if (v19 <= v21)
  {
    if (v19 < v21)
      a2[1] = *a2 + 8 * v19;
  }
  else
  {
    sub_20E93D8FC((uint64_t)a2, v19 - v21);
  }
  v22 = (uint64_t)v19 >> 2;
  v23 = *a1;
  v24 = *a7;
  v25 = (char *)a7[1] - (char *)*a7;
  if (v25)
  {
    v26 = v25 >> 2;
    v27 = *(_QWORD *)(a5 + 56);
    if (v26 <= 1)
      v26 = 1;
    v28 = (float64x2_t *)*a1;
    do
    {
      v29 = *v24++;
      v30 = (float32x2_t *)(v27 + 32 * v29);
      *v28 = vcvtq_f64_f32(*v30);
      v28[1] = vcvtq_f64_f32(v30[2]);
      v28 += 2;
      --v26;
    }
    while (v26);
  }
  v31 = *a2;
  v32 = *a8;
  v33 = (char *)a8[1] - (char *)*a8;
  if (v33)
  {
    v34 = v33 >> 2;
    v35 = *(_QWORD *)(a6 + 56);
    if (v34 <= 1)
      v34 = 1;
    v36 = (float64x2_t *)*a2;
    do
    {
      v37 = *v32++;
      v38 = (float32x2_t *)(v35 + 32 * v37);
      *v36 = vcvtq_f64_f32(*v38);
      v36[1] = vcvtq_f64_f32(v38[2]);
      v36 += 2;
      --v34;
    }
    while (v34);
  }
  v57 = vcvtq_f64_u64(a11);
  *(double *)&v39 = sub_20FD3C770(a12.u64[0], a12.u64[1], v31, v23, v22);
  v40 = vcvt_f32_f64(vaddq_f64(vmulq_n_f64(v57, a10), v57));
  v41 = vcvtq_f64_f32(vneg_f32(v40));
  v42 = vcvtq_f64_f32(v40);
  v59[0] = (__int128)vzip1q_s64((int64x2_t)v41, (int64x2_t)v42);
  v59[1] = (__int128)vzip2q_s64((int64x2_t)v41, (int64x2_t)v42);
  v59[2] = xmmword_210314980;
  v60 = vmax_s32(vmovn_s64(vcvtq_s64_f64(vrndpq_f64(vdivq_f64(vsubq_f64(v42, v41), (float64x2_t)vdupq_lane_s64(v39, 0))))), (int32x2_t)0x500000005);
  v61 = 0xA0000000CLL;
  v62 = vcvtq_f64_f32(vmul_f32(vcvt_f32_f64(vcvtq_f64_u64(a12)), (float32x2_t)0x3F0000003F000000));
  v43 = sub_20FD3BF30(a9, v59);
  sub_20FD3C040(v43, *a2, *a1, v22);
  v44 = *(unsigned int **)(a9 + 120);
  v45 = *(unsigned int **)(a9 + 128);
  if (v44 == v45)
  {
    v47 = *(unsigned int **)(a9 + 120);
  }
  else
  {
    v46 = v44 + 1;
    v47 = *(unsigned int **)(a9 + 120);
    if (v44 + 1 != v45)
    {
      v48 = *v44;
      v47 = *(unsigned int **)(a9 + 120);
      v49 = v44 + 1;
      do
      {
        v51 = *v49++;
        v50 = v51;
        v52 = v48 >= v51;
        if (v48 <= v51)
          v48 = v50;
        if (!v52)
          v47 = v46;
        v46 = v49;
      }
      while (v49 != v45);
    }
  }
  v53 = *v47;
  v54 = v47 - v44;
  if (!(_DWORD)v53)
    v54 = -1;
  *a3 = v53;
  *a4 = v54;
}

void sub_20FD3D960(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20F426DC8(v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_20FD3D974@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  void *__p;
  __int128 v8;

  __p = operator new(0x20uLL);
  v8 = xmmword_2102DCC80;
  strcpy((char *)__p, "PlaceRecognition parameters");
  sub_20E8B30B4(a2, (__int128 *)&__p, 180, 160);
  if (SHIBYTE(v8) < 0)
    operator delete(__p);
  __p = (void *)nullsub_1(a2);
  v4 = sub_20EB8894C(a1);
  sub_20E8B2F9C((uint64_t *)&__p, "PlaceRecognitionConfig.vocabulary_file", v4, "Path and filename of a Binary Vocabulary Tree (.msgpack)");
  __p = (void *)nullsub_1(a2);
  v5 = sub_20EA9DB90((double *)(a1 + 24));
  return sub_20E8B2F9C((uint64_t *)&__p, "PlaceRecognitionConfig.min_time_gap", v5, "During Query(), the retrieved match's timestamp is no less than query timestamp + min_time_gap (s).");
}

void sub_20FD3DA54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;

  sub_20E869298(v15);
  _Unwind_Resume(a1);
}

double sub_20FD3DA90(int a1, int a2, uint64_t *a3, float64x2_t *a4, float64x2_t *a5, float64x2_t *a6)
{
  uint64_t v6;
  float64x2_t v7;
  float64x2_t v8;
  int v15;
  int v16;
  float64x2_t v18;
  double v22;
  float64x2_t v23;
  float64x2_t v24;
  int8x16_t v26;
  float64x2_t v27;
  float64x2_t v28;
  int64x2_t v29;
  float64x2_t v30;
  uint64_t v31;
  double v32;
  float64x2_t v33;
  unsigned int v34;
  uint64_t v35;
  int v36;
  float64x2_t v37;
  double v38;
  double v39;
  float64x2_t v40;
  double v41;
  int v42;
  int v43;
  int v44;
  int v45;
  int v46;
  int v47;
  int v48;
  double v49;
  double v50;
  float v51;
  double v52;
  float v53;
  double v54;
  float64x2_t v55;
  uint64_t v56;
  unint64_t v57;
  double v58;
  float64x2_t v59;
  float64x2_t v60;
  float64x2_t v61;
  uint64_t v62;
  float v63;
  float64x2_t v64;
  uint64_t v65;
  float64x2_t *v66;
  float64x2_t v67;
  double v68;
  float64x2_t *v69;
  float64x2_t v70;
  float v71;
  float64x2_t *v72;
  float64x2_t v73;
  double v74;
  float64x2_t *v75;
  float64x2_t v76;
  float v77;
  uint64_t v78;
  float64x2_t *v79;
  float64x2_t v80;
  double v81;
  float64x2_t *v82;
  float64x2_t v83;
  float v84;
  uint64_t v85;
  float64x2_t *v86;
  float64x2_t v87;
  double v88;
  float64x2_t *v89;
  float64x2_t v90;
  uint64_t v91;
  float v92;
  float64x2_t *v93;
  float64x2_t v94;
  double v95;
  float64x2_t *v96;
  float64x2_t v97;
  float32x2_t v99;
  float64x2_t v100;
  float64x2_t v101;
  float32x2_t v102;
  float32x2_t v103;
  float32x2_t v104;
  float32x2_t v105;
  float32x2_t v106;
  float64x2_t v108;
  float64x2_t v109;
  float32x2_t v110;
  float32x2_t v111;
  float32x2_t v112;
  float32x2_t v113;
  float64x2_t v114;
  float64x2_t v115;
  float32x2_t v116;
  float32x2_t v117;
  float32x2_t v118;
  float32x2_t v119;
  float64x2_t v120;
  float64x2_t v121;
  float32x2_t v122;
  float32x2_t v123;
  float32x2_t v124;
  float32x2_t v125;
  float64x2_t v126;
  float64x2_t v127;
  float32x2_t v128;
  float32x2_t v129;
  double v130;
  double v131;
  double v132;
  double v133;
  double v134;
  double v135;
  double v136;
  double v137;
  double v138;
  double v139;
  double v140;
  double v141;
  double v142;
  double v143;
  double v144;
  double v145;
  float64x2_t v146;
  float64x2_t v147;
  float64x2_t v148;
  float64x2_t v149;
  float64x2_t v150;
  float64x2_t v151;
  float64x2_t v152;
  float64x2_t v153;
  float64x2_t v154;
  float64x2_t v155;
  float64x2_t v156;
  float64x2_t v157;
  float64x2_t v158;
  float64x2_t v159;
  float64x2_t v160;
  float64x2_t v161;
  float64x2_t v162;
  float64x2_t v163;
  float64x2_t v164;
  float64x2_t v165;
  float64x2_t v166;
  float64x2_t v167;
  float64x2_t v168;
  float64x2_t v169;
  float64x2_t v170;
  float64x2_t v171;
  float64x2_t v172;
  float64x2_t v173;
  float64x2_t v174;
  double v175;
  double v176;
  double v177;
  double v178;
  double v179;
  double v180;
  float64x2_t v181;
  float64x2_t v182;
  float64x2_t v183;
  float64x2_t v184;
  float64x2_t v185;
  float64x2_t v186;
  float64x2_t v187;
  float64x2_t v188;
  float64x2_t v189;
  float64x2_t v190;
  float64x2_t v191;
  float64x2_t v192;
  float64x2_t v193;
  float64x2_t v194;
  float64x2_t v195;
  float64x2_t v196;
  float64x2_t v197;
  float64x2_t v198;
  float64x2_t v199;
  float64x2_t v200;
  float64x2_t v201;
  float64x2_t v202;
  float64x2_t v203;
  float64x2_t v204;
  float64x2_t v205;
  float64x2_t v206;
  float64x2_t v207;
  float64x2_t v208;
  double v209;
  double v210;
  double result;
  float64x2_t v212;
  float64x2_t v213;
  float64x2_t v214;
  float64x2_t v215;
  float64x2_t v216;
  float64x2_t v217;
  float64x2_t v218;
  float64x2_t v219;
  float64x2_t v220;
  float64x2_t v221;
  float64x2_t v222;
  float64x2_t v223;
  float64x2_t v224;
  float64x2_t v225;
  float64x2_t v226;
  float64x2_t v227;
  float64x2_t v228;
  float64x2_t v229;
  float64x2_t v230;
  float64x2_t v231;

  v6 = 0;
  v7 = *a4;
  v8 = *a5;
  _D4 = vsubq_f64(*a4, *a5).f64[1];
  __asm { FMLA            D3, D4, V2.D[1] }
  v15 = (int)(sqrt(_D3) + 0.5);
  if (v15 >= 0)
    v16 = v15;
  else
    v16 = v15 + 1;
  __asm { FMOV            V3.2D, #0.5 }
  v18 = vmulq_f64(vaddq_f64(v7, v8), _Q3);
  _Q4 = vsubq_f64(v8, v7);
  _D1 = _Q4.f64[1];
  __asm { FMLA            D0, D1, V4.D[1] }
  v22 = 1.0 / sqrt(_D0);
  v23 = vmulq_n_f64(_Q4, v22);
  v24 = vsubq_f64(v18, vmulq_n_f64(v23, (double)(v16 >> 1)));
  __asm { FMOV            V1.2D, #7.0 }
  v26 = (int8x16_t)vmulq_f64(v23, _Q1);
  v27 = (float64x2_t)vextq_s8(v26, v26, 8uLL);
  *(_QWORD *)&v28.f64[0] = *(_OWORD *)&vaddq_f64(v24, v27);
  v29 = (int64x2_t)vsubq_f64(v24, v27);
  *(_QWORD *)&v28.f64[1] = v29.i64[1];
  v230 = 0u;
  v231 = 0u;
  v228 = 0u;
  v229 = 0u;
  v226 = 0u;
  v227 = 0u;
  v224 = 0u;
  v225 = 0u;
  v222 = 0u;
  v223 = 0u;
  *(double *)v29.i64 = -v23.f64[1];
  v30 = (float64x2_t)vzip1q_s64(v29, (int64x2_t)v23);
  v220 = 0u;
  v221 = 0u;
  v218 = 0u;
  v219 = 0u;
  v216 = 0u;
  v217 = 0u;
  v214 = 0u;
  v215 = 0u;
  v212 = 0u;
  v213 = 0u;
  v31 = *a3;
  v32 = vmuld_lane_f64(v22, _Q4, 1);
  v33 = vaddq_f64(v23, v23);
  do
  {
    v34 = v6 / 3;
    if (v6 / 3 <= 1)
      v35 = 1;
    else
      v35 = v34;
    if (v15 < 1)
    {
      v41 = 0.0;
      v55.f64[1] = 0.0;
      v37 = 0uLL;
      v56 = v34 + 1;
      if (v56 < 4)
        v57 = v34 + 1;
      else
        v57 = 4;
      if ((int)v35 - 1 > (int)v57)
        goto LABEL_5;
LABEL_41:
      v55.f64[0] = v41;
      v58 = flt_2103BF6D0[v6];
      v59 = vmulq_n_f64(v55, v58);
      v60 = vmulq_n_f64(v37, v58);
      v61 = vmulq_f64(v59, v59);
      v62 = v6 % 3;
      v63 = flt_2103BF70C[3 * (v56 - (v35 - 1)) + v62];
      v64 = vmulq_f64(v60, v60);
      v65 = 32 * (v35 - 1);
      v66 = (float64x2_t *)((char *)&v222 + v65);
      v67 = vaddq_f64(*(float64x2_t *)((char *)&v222 + v65 + 16), vmulq_n_f64(v60, v63));
      *v66 = vaddq_f64(*(float64x2_t *)((char *)&v222 + v65), vmulq_n_f64(v59, v63));
      v66[1] = v67;
      v68 = (float)(v63 * v63);
      v69 = (float64x2_t *)((char *)&v212 + v65);
      v70 = v69[1];
      *v69 = vaddq_f64(*v69, vmulq_n_f64(v61, v68));
      v69[1] = vaddq_f64(v70, vmulq_n_f64(v64, v68));
      if (v35 - 1 < v57)
      {
        v71 = flt_2103BF70C[3 * (v56 - v35) + v62];
        v72 = &v222 + 2 * v35;
        v73 = vaddq_f64(v72[1], vmulq_n_f64(v60, v71));
        *v72 = vaddq_f64(*v72, vmulq_n_f64(v59, v71));
        v72[1] = v73;
        v74 = (float)(v71 * v71);
        v75 = &v212 + 2 * v35;
        v76 = v75[1];
        *v75 = vaddq_f64(*v75, vmulq_n_f64(v61, v74));
        v75[1] = vaddq_f64(v76, vmulq_n_f64(v64, v74));
        if (v35 < v57)
        {
          v77 = flt_2103BF70C[3 * (v56 - (v35 + 1)) + v62];
          v78 = 32 * (v35 + 1);
          v79 = (float64x2_t *)((char *)&v222 + v78);
          v80 = vaddq_f64(*(float64x2_t *)((char *)&v222 + v78 + 16), vmulq_n_f64(v60, v77));
          *v79 = vaddq_f64(*(float64x2_t *)((char *)&v222 + v78), vmulq_n_f64(v59, v77));
          v79[1] = v80;
          v81 = (float)(v77 * v77);
          v82 = (float64x2_t *)((char *)&v212 + v78);
          v83 = v82[1];
          *v82 = vaddq_f64(*v82, vmulq_n_f64(v61, v81));
          v82[1] = vaddq_f64(v83, vmulq_n_f64(v64, v81));
          if (v35 + 1 < v57)
          {
            v84 = flt_2103BF70C[3 * (v56 - (v35 + 2)) + v62];
            v85 = 32 * (v35 + 2);
            v86 = (float64x2_t *)((char *)&v222 + v85);
            v87 = vaddq_f64(*(float64x2_t *)((char *)&v222 + v85 + 16), vmulq_n_f64(v60, v84));
            *v86 = vaddq_f64(*(float64x2_t *)((char *)&v222 + v85), vmulq_n_f64(v59, v84));
            v86[1] = v87;
            v88 = (float)(v84 * v84);
            v89 = (float64x2_t *)((char *)&v212 + v85);
            v90 = v89[1];
            *v89 = vaddq_f64(*v89, vmulq_n_f64(v61, v88));
            v89[1] = vaddq_f64(v90, vmulq_n_f64(v64, v88));
            if (v35 + 2 < v57)
            {
              v91 = v35 + 3;
              v92 = flt_2103BF70C[3 * (v56 - v91) + v62];
              v91 *= 32;
              v93 = (float64x2_t *)((char *)&v222 + v91);
              v94 = vaddq_f64(*(float64x2_t *)((char *)&v222 + v91 + 16), vmulq_n_f64(v60, v92));
              *v93 = vaddq_f64(*(float64x2_t *)((char *)&v222 + v91), vmulq_n_f64(v59, v92));
              v93[1] = v94;
              v95 = (float)(v92 * v92);
              v96 = (float64x2_t *)((char *)&v212 + v91);
              v97 = vaddq_f64(v96[1], vmulq_n_f64(v64, v95));
              *v96 = vaddq_f64(*v96, vmulq_n_f64(v61, v95));
              v96[1] = v97;
            }
          }
        }
      }
      goto LABEL_5;
    }
    v36 = 0;
    v37.f64[0] = 0.0;
    v38 = 0.0;
    v39 = 0.0;
    v40 = v28;
    v41 = 0.0;
    do
    {
      v42 = llround(v40.f64[0]);
      if (a1 - 1 >= v42)
        v43 = v42;
      else
        v43 = a1 - 1;
      if (v42 >= 0)
        v44 = v43;
      else
        v44 = 0;
      v45 = llround(v40.f64[1]);
      if (a2 - 1 >= v45)
        v46 = v45;
      else
        v46 = a2 - 1;
      if (v45 >= 0)
        v47 = v46;
      else
        v47 = 0;
      v48 = v44 + v47 * a1;
      v49 = (double)*(int *)(v31 + 8 * v48);
      v50 = (double)*(int *)(v31 + 8 * v48 + 4);
      v51 = v23.f64[0] * v49 + v32 * v50;
      v52 = v51;
      if (v51 <= 0.0)
        v52 = -0.0;
      v41 = v41 + v52;
      if (v51 >= 0.0)
        v51 = 0.0;
      v39 = v39 - v51;
      v53 = *(double *)v29.i64 * v49 + v23.f64[0] * v50;
      v54 = v53;
      if (v53 <= 0.0)
        v54 = -0.0;
      v37.f64[0] = v37.f64[0] + v54;
      if (v53 >= 0.0)
        v53 = 0.0;
      v38 = v38 - v53;
      v36 += 2;
      v40 = vaddq_f64(v33, v40);
    }
    while (v36 < v15);
    v37.f64[1] = v38;
    v55.f64[1] = v39;
    v56 = v34 + 1;
    if (v56 < 4)
      v57 = v34 + 1;
    else
      v57 = 4;
    if ((int)v35 - 1 <= (int)v57)
      goto LABEL_41;
LABEL_5:
    ++v6;
    v28 = vaddq_f64(v30, v28);
  }
  while (v6 != 15);
  __asm { FMOV            V0.2D, #6.0 }
  v99 = vcvt_f32_f64(vdivq_f64(v222, _Q0));
  v100 = vcvtq_f64_f32(v99);
  v101 = v213;
  v102 = vmul_f32(v99, v99);
  v103 = vsub_f32(vcvt_f32_f64(vdivq_f64(v212, _Q0)), v102);
  v104 = vcvt_f32_f64(vdivq_f64(v223, _Q0));
  *a6 = v100;
  a6[1] = vcvtq_f64_f32(v104);
  v105 = vmul_f32(v104, v104);
  *(float32x2_t *)&v100.f64[0] = vsub_f32(vcvt_f32_f64(vdivq_f64(v101, _Q0)), v105);
  a6[2] = vcvtq_f64_f32(vsqrt_f32(v103));
  a6[3] = vcvtq_f64_f32(vsqrt_f32(*(float32x2_t *)&v100.f64[0]));
  v106 = vadd_f32(vadd_f32(vadd_f32(vadd_f32((float32x2_t)vzip1_s32((int32x2_t)v102, (int32x2_t)v103), 0), (float32x2_t)vzip2_s32((int32x2_t)v102, (int32x2_t)v103)), (float32x2_t)vzip1_s32((int32x2_t)v105, *(int32x2_t *)&v100.f64[0])), (float32x2_t)vzip2_s32((int32x2_t)v105, *(int32x2_t *)&v100.f64[0]));
  __asm { FMOV            V1.2D, #9.0 }
  *(float32x2_t *)&v100.f64[0] = vcvt_f32_f64(vdivq_f64(v224, _Q1));
  v108 = vcvtq_f64_f32(*(float32x2_t *)&v100.f64[0]);
  v109 = v215;
  *(float32x2_t *)&v100.f64[0] = vmul_f32(*(float32x2_t *)&v100.f64[0], *(float32x2_t *)&v100.f64[0]);
  v110 = vsub_f32(vcvt_f32_f64(vdivq_f64(v214, _Q1)), *(float32x2_t *)&v100.f64[0]);
  v111 = vcvt_f32_f64(vdivq_f64(v225, _Q1));
  a6[4] = v108;
  a6[5] = vcvtq_f64_f32(v111);
  v112 = vmul_f32(v111, v111);
  *(float32x2_t *)&v108.f64[0] = vsub_f32(vcvt_f32_f64(vdivq_f64(v109, _Q1)), v112);
  a6[6] = vcvtq_f64_f32(vsqrt_f32(v110));
  a6[7] = vcvtq_f64_f32(vsqrt_f32(*(float32x2_t *)&v108.f64[0]));
  v113 = vadd_f32(vadd_f32(vadd_f32(vadd_f32(v106, (float32x2_t)vzip1_s32(*(int32x2_t *)&v100.f64[0], (int32x2_t)v110)), (float32x2_t)vzip2_s32(*(int32x2_t *)&v100.f64[0], (int32x2_t)v110)), (float32x2_t)vzip1_s32((int32x2_t)v112, *(int32x2_t *)&v108.f64[0])), (float32x2_t)vzip2_s32((int32x2_t)v112, *(int32x2_t *)&v108.f64[0]));
  *(float32x2_t *)&v100.f64[0] = vcvt_f32_f64(vdivq_f64(v226, _Q1));
  v114 = vcvtq_f64_f32(*(float32x2_t *)&v100.f64[0]);
  v115 = v217;
  *(float32x2_t *)&v100.f64[0] = vmul_f32(*(float32x2_t *)&v100.f64[0], *(float32x2_t *)&v100.f64[0]);
  v116 = vsub_f32(vcvt_f32_f64(vdivq_f64(v216, _Q1)), *(float32x2_t *)&v100.f64[0]);
  v117 = vcvt_f32_f64(vdivq_f64(v227, _Q1));
  a6[8] = v114;
  a6[9] = vcvtq_f64_f32(v117);
  v118 = vmul_f32(v117, v117);
  *(float32x2_t *)&v114.f64[0] = vsub_f32(vcvt_f32_f64(vdivq_f64(v115, _Q1)), v118);
  a6[10] = vcvtq_f64_f32(vsqrt_f32(v116));
  a6[11] = vcvtq_f64_f32(vsqrt_f32(*(float32x2_t *)&v114.f64[0]));
  v119 = vadd_f32(vadd_f32(vadd_f32(vadd_f32(v113, (float32x2_t)vzip1_s32(*(int32x2_t *)&v100.f64[0], (int32x2_t)v116)), (float32x2_t)vzip2_s32(*(int32x2_t *)&v100.f64[0], (int32x2_t)v116)), (float32x2_t)vzip1_s32((int32x2_t)v118, *(int32x2_t *)&v114.f64[0])), (float32x2_t)vzip2_s32((int32x2_t)v118, *(int32x2_t *)&v114.f64[0]));
  *(float32x2_t *)&v100.f64[0] = vcvt_f32_f64(vdivq_f64(v228, _Q1));
  v120 = vcvtq_f64_f32(*(float32x2_t *)&v100.f64[0]);
  v121 = v219;
  *(float32x2_t *)&v100.f64[0] = vmul_f32(*(float32x2_t *)&v100.f64[0], *(float32x2_t *)&v100.f64[0]);
  v122 = vsub_f32(vcvt_f32_f64(vdivq_f64(v218, _Q1)), *(float32x2_t *)&v100.f64[0]);
  v123 = vcvt_f32_f64(vdivq_f64(v229, _Q1));
  a6[12] = v120;
  a6[13] = vcvtq_f64_f32(v123);
  v124 = vmul_f32(v123, v123);
  *(float32x2_t *)&_Q1.f64[0] = vsub_f32(vcvt_f32_f64(vdivq_f64(v121, _Q1)), v124);
  a6[14] = vcvtq_f64_f32(vsqrt_f32(v122));
  a6[15] = vcvtq_f64_f32(vsqrt_f32(*(float32x2_t *)&_Q1.f64[0]));
  *(float32x2_t *)&_Q1.f64[0] = vadd_f32(vadd_f32(vadd_f32(vadd_f32(v119, (float32x2_t)vzip1_s32(*(int32x2_t *)&v100.f64[0], (int32x2_t)v122)), (float32x2_t)vzip2_s32(*(int32x2_t *)&v100.f64[0], (int32x2_t)v122)), (float32x2_t)vzip1_s32((int32x2_t)v124, *(int32x2_t *)&_Q1.f64[0])), (float32x2_t)vzip2_s32((int32x2_t)v124, *(int32x2_t *)&_Q1.f64[0]));
  v125 = vcvt_f32_f64(vdivq_f64(v230, _Q0));
  v126 = vcvtq_f64_f32(v125);
  v127 = v221;
  v128 = vmul_f32(v125, v125);
  *(float32x2_t *)&v120.f64[0] = vsub_f32(vcvt_f32_f64(vdivq_f64(v220, _Q0)), v128);
  *(float32x2_t *)&v100.f64[0] = vcvt_f32_f64(vdivq_f64(v231, _Q0));
  a6[16] = v126;
  a6[17] = vcvtq_f64_f32(*(float32x2_t *)&v100.f64[0]);
  *(float32x2_t *)&v100.f64[0] = vmul_f32(*(float32x2_t *)&v100.f64[0], *(float32x2_t *)&v100.f64[0]);
  *(float32x2_t *)&_Q0.f64[0] = vsub_f32(vcvt_f32_f64(vdivq_f64(v127, _Q0)), *(float32x2_t *)&v100.f64[0]);
  a6[18] = vcvtq_f64_f32(vsqrt_f32(*(float32x2_t *)&v120.f64[0]));
  a6[19] = vcvtq_f64_f32(vsqrt_f32(*(float32x2_t *)&_Q0.f64[0]));
  v129 = vadd_f32(vadd_f32(vadd_f32(vadd_f32(*(float32x2_t *)&_Q1.f64[0], (float32x2_t)vzip1_s32((int32x2_t)v128, *(int32x2_t *)&v120.f64[0])), (float32x2_t)vzip2_s32((int32x2_t)v128, *(int32x2_t *)&v120.f64[0])), (float32x2_t)vzip1_s32(*(int32x2_t *)&v100.f64[0], *(int32x2_t *)&_Q0.f64[0])), (float32x2_t)vzip2_s32(*(int32x2_t *)&v100.f64[0], *(int32x2_t *)&_Q0.f64[0]));
  v130 = 0.0;
  v131 = 0.0;
  if (v129.f32[0] == 0.0)
  {
    v129.i32[0] = v129.i32[1];
    if (v129.f32[1] == 0.0)
      goto LABEL_48;
LABEL_82:
    v130 = 1.0 / sqrtf(v129.f32[0]);
  }
  else
  {
    v131 = 1.0 / sqrtf(v129.f32[0]);
    v129.i32[0] = v129.i32[1];
    if (v129.f32[1] != 0.0)
      goto LABEL_82;
  }
LABEL_48:
  v132 = v130 * a6[14].f64[0];
  v133 = v130 * a6[14].f64[1];
  a6[14].f64[0] = v132;
  a6[14].f64[1] = v133;
  v134 = v130 * a6[15].f64[0];
  v135 = v130 * a6[15].f64[1];
  a6[15].f64[0] = v134;
  a6[15].f64[1] = v135;
  v136 = v131 * a6[16].f64[0];
  v137 = a6[18].f64[1];
  v138 = v130 * a6[18].f64[0];
  v139 = v131 * a6[16].f64[1];
  a6[16].f64[0] = v136;
  a6[16].f64[1] = v139;
  v140 = v130 * v137;
  a6[18].f64[0] = v138;
  a6[18].f64[1] = v130 * v137;
  v141 = v131 * a6[17].f64[0];
  v142 = a6[19].f64[1];
  v143 = v130 * a6[19].f64[0];
  v144 = v131 * a6[17].f64[1];
  a6[17].f64[0] = v141;
  a6[17].f64[1] = v144;
  v145 = v130 * v142;
  a6[19].f64[0] = v143;
  a6[19].f64[1] = v130 * v142;
  v146 = (float64x2_t)vdupq_n_s64(0x3FD999999999999AuLL);
  v147 = vmulq_n_f64(*a6, v131);
  v148 = (float64x2_t)vbslq_s8((int8x16_t)vcgtq_f64(v147, v146), (int8x16_t)v146, (int8x16_t)v147);
  v149 = vmulq_n_f64(a6[1], v131);
  v150 = (float64x2_t)vbslq_s8((int8x16_t)vcgtq_f64(v149, v146), (int8x16_t)v146, (int8x16_t)v149);
  *a6 = v148;
  a6[1] = v150;
  v151 = vmulq_n_f64(a6[2], v130);
  v152 = (float64x2_t)vbslq_s8((int8x16_t)vcgtq_f64(v151, v146), (int8x16_t)v146, (int8x16_t)v151);
  v153 = vmulq_n_f64(a6[3], v130);
  v154 = (float64x2_t)vbslq_s8((int8x16_t)vcgtq_f64(v153, v146), (int8x16_t)v146, (int8x16_t)v153);
  a6[2] = v152;
  a6[3] = v154;
  v155 = vmulq_n_f64(a6[4], v131);
  v156 = (float64x2_t)vbslq_s8((int8x16_t)vcgtq_f64(v155, v146), (int8x16_t)v146, (int8x16_t)v155);
  v157 = vmulq_n_f64(a6[5], v131);
  v158 = (float64x2_t)vbslq_s8((int8x16_t)vcgtq_f64(v157, v146), (int8x16_t)v146, (int8x16_t)v157);
  a6[4] = v156;
  a6[5] = v158;
  v159 = vmulq_n_f64(a6[6], v130);
  v160 = (float64x2_t)vbslq_s8((int8x16_t)vcgtq_f64(v159, v146), (int8x16_t)v146, (int8x16_t)v159);
  v161 = vmulq_n_f64(a6[7], v130);
  v162 = (float64x2_t)vbslq_s8((int8x16_t)vcgtq_f64(v161, v146), (int8x16_t)v146, (int8x16_t)v161);
  a6[6] = v160;
  a6[7] = v162;
  v163 = vmulq_n_f64(a6[8], v131);
  v164 = (float64x2_t)vbslq_s8((int8x16_t)vcgtq_f64(v163, v146), (int8x16_t)v146, (int8x16_t)v163);
  v165 = vmulq_n_f64(a6[9], v131);
  v166 = (float64x2_t)vbslq_s8((int8x16_t)vcgtq_f64(v165, v146), (int8x16_t)v146, (int8x16_t)v165);
  a6[8] = v164;
  a6[9] = v166;
  v167 = vmulq_n_f64(a6[10], v130);
  v168 = (float64x2_t)vbslq_s8((int8x16_t)vcgtq_f64(v167, v146), (int8x16_t)v146, (int8x16_t)v167);
  v169 = vmulq_n_f64(a6[11], v130);
  v170 = (float64x2_t)vbslq_s8((int8x16_t)vcgtq_f64(v169, v146), (int8x16_t)v146, (int8x16_t)v169);
  a6[10] = v168;
  a6[11] = v170;
  v171 = vmulq_n_f64(a6[12], v131);
  v172 = (float64x2_t)vbslq_s8((int8x16_t)vcgtq_f64(v171, v146), (int8x16_t)v146, (int8x16_t)v171);
  v173 = vmulq_n_f64(a6[13], v131);
  v174 = (float64x2_t)vbslq_s8((int8x16_t)vcgtq_f64(v173, v146), (int8x16_t)v146, (int8x16_t)v173);
  a6[12] = v172;
  a6[13] = v174;
  if (v132 <= 0.4)
    v175 = v132;
  else
    v175 = 0.4;
  if (v133 > 0.4)
    v133 = 0.4;
  if (v134 <= 0.4)
    v176 = v134;
  else
    v176 = 0.4;
  if (v135 > 0.4)
    v135 = 0.4;
  if (v136 <= 0.4)
    v177 = v136;
  else
    v177 = 0.4;
  if (v139 <= 0.4)
    v178 = v139;
  else
    v178 = 0.4;
  if (v141 <= 0.4)
    v179 = v141;
  else
    v179 = 0.4;
  if (v144 <= 0.4)
    v180 = v144;
  else
    v180 = 0.4;
  if (v138 > 0.4)
    v138 = 0.4;
  if (v140 > 0.4)
    v140 = 0.4;
  if (v143 > 0.4)
    v143 = 0.4;
  v181 = vmulq_f64(v148, v148);
  v182 = (float64x2_t)vdupq_laneq_s64((int64x2_t)v181, 1);
  if (v145 > 0.4)
    v145 = 0.4;
  v183 = vmulq_f64(v150, v150);
  v184 = vaddq_f64(vaddq_f64(vaddq_f64(v181, v182), v183), (float64x2_t)vdupq_laneq_s64((int64x2_t)v183, 1));
  v185 = vmulq_f64(v152, v152);
  v186 = vaddq_f64((float64x2_t)vdupq_laneq_s64((int64x2_t)v185, 1), vaddq_f64(v185, v184));
  v187 = vmulq_f64(v154, v154);
  v188 = vaddq_f64((float64x2_t)vdupq_laneq_s64((int64x2_t)v187, 1), vaddq_f64(v187, v186));
  v189 = vmulq_f64(v156, v156);
  v190 = vaddq_f64(vaddq_f64(v189, v188), (float64x2_t)vdupq_laneq_s64((int64x2_t)v189, 1));
  v191 = vmulq_f64(v158, v158);
  v192 = vaddq_f64(vaddq_f64(v190, v191), (float64x2_t)vdupq_laneq_s64((int64x2_t)v191, 1));
  v193 = vmulq_f64(v160, v160);
  v194 = vaddq_f64((float64x2_t)vdupq_laneq_s64((int64x2_t)v193, 1), vaddq_f64(v193, v192));
  v195 = vmulq_f64(v162, v162);
  v196 = vaddq_f64((float64x2_t)vdupq_laneq_s64((int64x2_t)v195, 1), vaddq_f64(v195, v194));
  v197 = vmulq_f64(v164, v164);
  v198 = vaddq_f64(vaddq_f64(v197, v196), (float64x2_t)vdupq_laneq_s64((int64x2_t)v197, 1));
  v199 = vmulq_f64(v166, v166);
  v200 = vaddq_f64(vaddq_f64(v198, v199), (float64x2_t)vdupq_laneq_s64((int64x2_t)v199, 1));
  v201 = vmulq_f64(v168, v168);
  v202 = vaddq_f64((float64x2_t)vdupq_laneq_s64((int64x2_t)v201, 1), vaddq_f64(v201, v200));
  v203 = vmulq_f64(v170, v170);
  v204 = vaddq_f64((float64x2_t)vdupq_laneq_s64((int64x2_t)v203, 1), vaddq_f64(v203, v202));
  v205 = vmulq_f64(v172, v172);
  v206.f64[1] = v174.f64[1];
  v206.f64[0] = v175;
  v207 = vaddq_f64(vaddq_f64(vaddq_f64(v205, v204), (float64x2_t)vdupq_laneq_s64((int64x2_t)v205, 1)), vmulq_f64(v174, v174));
  v208 = vmulq_f64(v206, v206);
  v209 = v145 * v145
       + v143 * v143
       + v140 * v140
       + v138 * v138
       + v177 * v177
       + v135 * v135
       + v176 * v176
       + v133 * v133
       + vaddq_f64(v208, vaddq_f64(v207, (float64x2_t)vdupq_laneq_s64((int64x2_t)v208, 1))).f64[0]
       + v178 * v178
       + v179 * v179
       + v180 * v180;
  v210 = 0.0;
  if (v209 != 0.0)
    v210 = 1.0 / sqrt(v209);
  *a6 = vmulq_n_f64(v148, v210);
  a6[1] = vmulq_n_f64(v150, v210);
  a6[2] = vmulq_n_f64(v152, v210);
  a6[3] = vmulq_n_f64(v154, v210);
  a6[4] = vmulq_n_f64(v156, v210);
  a6[5] = vmulq_n_f64(v158, v210);
  a6[6] = vmulq_n_f64(v160, v210);
  a6[7] = vmulq_n_f64(v162, v210);
  a6[8] = vmulq_n_f64(v164, v210);
  a6[9] = vmulq_n_f64(v166, v210);
  a6[10] = vmulq_n_f64(v168, v210);
  a6[11] = vmulq_n_f64(v170, v210);
  a6[12] = vmulq_n_f64(v172, v210);
  a6[13] = vmulq_n_f64(v174, v210);
  a6[14].f64[0] = v175 * v210;
  a6[14].f64[1] = v133 * v210;
  a6[15].f64[0] = v176 * v210;
  a6[15].f64[1] = v135 * v210;
  a6[16].f64[0] = v177 * v210;
  a6[16].f64[1] = v178 * v210;
  a6[17].f64[0] = v179 * v210;
  a6[17].f64[1] = v180 * v210;
  a6[18].f64[0] = v138 * v210;
  a6[18].f64[1] = v140 * v210;
  result = v143 * v210;
  a6[19].f64[0] = v143 * v210;
  a6[19].f64[1] = v145 * v210;
  return result;
}

void sub_20FD3E57C(_QWORD *a1, unsigned int a2, char **a3, void **a4, float a5, float a6)
{
  unint64_t v12;
  unint64_t v13;
  void **v14;
  unint64_t v15;
  std::__shared_weak_count_vtbl *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  char *v30;
  int32x4_t *v31;
  unint64_t v32;
  __int32 *v33;
  uint64_t v34;
  int32x4_t *v35;
  uint64_t v36;
  int32x4_t v37;
  char *v38;
  char *v39;
  char *v40;
  void *v41;
  void *v42;
  char *v43;
  uint64_t v44;
  long double v45;
  uint64_t v46;
  double v47;
  unint64_t v48;
  _QWORD *v49;
  double *v50;
  int v51;
  _DWORD *v52;
  double *v53;
  unint64_t v54;
  unint64_t v55;
  double *v56;
  double *v57;
  uint64_t v58;
  int *v59;
  int v60;
  int v61;
  int v62;
  _OWORD *v63;
  unint64_t v64;
  __int128 v65;
  BOOL v66;
  float64x2_t v67;
  float64x2_t v68;
  double v69;
  float64x2_t v70;
  char *v71;
  char *v72;
  __int128 v73;
  char *v74;
  char *v75;
  double v76;
  uint64_t v77;
  __int128 *v78;
  uint64_t v79;
  uint64_t v80;
  __int128 *v81;
  unint64_t v82;
  unint64_t v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  char *v87;
  _OWORD *v88;
  char *v89;
  _OWORD *v90;
  __int128 v91;
  uint64_t v92;
  __int128 *v93;
  _OWORD *i;
  __int128 v95;
  __int128 *v96;
  uint64_t v97;
  _OWORD *v98;
  uint64_t v99;
  uint64_t v100;
  __int128 v101;
  char *v102;
  uint64_t v103;
  char *v104;
  char *v105;
  __int128 v106;
  __int128 *v107;
  __int128 *v108;
  __int128 v109;
  void *v110;
  __int128 *v111;
  __int128 *v112;
  int64_t v113;
  char *v114;
  void *v115;
  int64_t v116;
  char *v117;
  unint64_t v118;
  unint64_t v119;
  char *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  char *v124;
  __int128 *v125;
  _OWORD *v126;
  __int128 v127;
  uint64_t v128;
  char *v129;
  _OWORD *j;
  __int128 v131;
  char *v132;
  uint64_t v133;
  char *v134;
  uint64_t v135;
  uint64_t v136;
  __int128 v137;
  char *v138;
  uint64_t v139;
  char *v140;
  char *v141;
  __int128 v142;
  char *v143;
  char *v144;
  __int128 v145;
  void *v146;
  char *v147;
  __int128 v148;
  __int128 v149;
  char *v150;
  char *v153;
  __int128 v154;
  int v155;
  unint64_t v156;
  char *v157;
  const void *v158;
  uint64_t v159;
  char *v160;
  size_t v161;
  char *v162;
  unint64_t v163;
  unint64_t v164;
  uint64_t v165;
  unint64_t v166;
  unint64_t v167;
  char *v168;
  char *v169;
  int64_t v170;
  char *v171;
  size_t v172;
  char *v173;
  char *v174;
  __int128 v175;
  char *v176;
  char *v177;
  char *v178;
  void *v179;
  void *v180;
  unint64_t v181;
  std::__shared_weak_count *v182;
  unint64_t *v183;
  unint64_t v184;
  std::__shared_weak_count *v185;
  unint64_t *v186;
  unint64_t v187;
  std::__shared_weak_count *v188;
  unint64_t *v189;
  unint64_t v190;
  std::__shared_weak_count *v191;
  unint64_t *v192;
  unint64_t v193;
  std::__shared_weak_count *v194;
  unint64_t *v195;
  unint64_t v196;
  std::__shared_weak_count *v197;
  unint64_t *v198;
  unint64_t v199;
  std::__shared_weak_count *v200;
  char *v201;
  unint64_t v202;
  _QWORD *v203;
  void *__src[2];
  const void *__srca;
  uint64_t v206;
  unint64_t v207;
  unint64_t v208;
  __int128 v209;
  void *v210;
  int v211[2];
  __int128 v212;
  __int128 v213;
  unint64_t v214[4];
  char v215;
  __int128 v216;
  __int128 v217;
  __int128 __p;
  uint64_t v219;
  void *v220;
  void *v221;
  uint64_t v222;
  uint64_t (**v223)();
  char v224;
  __int128 v225;
  __int128 v226;
  _QWORD v227[4];
  char v228;
  __int128 v229;
  __int128 v230;
  __int128 v231;
  uint64_t v232;
  _OWORD v233[5];
  char v234;
  __int128 v235;
  __int128 v236;
  __int128 v237;
  uint64_t v238;
  _QWORD v239[4];
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  void *v243;
  std::__shared_weak_count *v244;
  std::__shared_weak_count *v245;
  void *v246;
  void *v247;
  _BYTE v248[24];
  void *v249[3];
  unsigned __int8 v250;
  int v251;
  int v252;
  void **v253;
  double *v254;
  uint64_t *v255;
  int v256;
  int v257;
  _QWORD *v258;
  double v259;
  uint64_t v260[5];
  __int128 v261;

  v12 = a1[4];
  v13 = a1[6];
  sub_20EDE5988((uint64_t)v239, v12, v12, v13, 1);
  *(_QWORD *)&v233[0] = &off_24C9E9690;
  BYTE8(v233[0]) = 0;
  v234 = 0;
  memset(&v233[1], 0, 57);
  v235 = 0u;
  v236 = 0u;
  v237 = 0u;
  v238 = 0;
  sub_20EDDCF24(v233, v12, v12, v13, 1, 0, 0);
  if (v241 * v242)
    bzero(v243, v241 * v242);
  v222 = 0;
  v223 = &off_24CA06C38;
  v224 = 0;
  v228 = 0;
  v225 = 0u;
  v226 = 0u;
  memset(v227, 0, 25);
  v229 = 0u;
  v230 = 0u;
  v231 = 0u;
  v232 = 0;
  v220 = 0;
  v221 = 0;
  if (a4)
    v14 = a4;
  else
    v14 = &v220;
  v15 = 2 * v12 * v13;
  v16 = (std::__shared_weak_count_vtbl *)*v14;
  v17 = ((_BYTE *)v14[1] - (_BYTE *)*v14) >> 2;
  if (v15 <= v17)
  {
    if (v15 < v17)
      v14[1] = (char *)v16 + 4 * v15;
  }
  else
  {
    sub_20EAC24FC((uint64_t)v14, v15 - v17);
    v16 = (std::__shared_weak_count_vtbl *)*v14;
  }
  v18 = (std::__shared_weak_count *)operator new();
  v18->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v18->__shared_owners_;
  v18->__vftable = (std::__shared_weak_count_vtbl *)&off_24CA06C68;
  v18->__shared_weak_owners_ = 0;
  v18[1].__vftable = v16;
  *(_QWORD *)&v209 = v16;
  *((_QWORD *)&v209 + 1) = v18;
  v200 = v18;
  do
    v20 = __ldxr(p_shared_owners);
  while (__stxr(v20 + 1, p_shared_owners));
  v210 = &off_24CA06C38;
  LOBYTE(v211[0]) = 0;
  v215 = 0;
  v212 = 0u;
  v213 = 0u;
  memset(v214, 0, 25);
  v216 = 0u;
  v217 = 0u;
  __p = 0u;
  v219 = 0;
  LOBYTE(v253) = 0;
  LOBYTE(v254) = 0;
  sub_20FD400DC((uint64_t)&v210, &v209, 2 * v12, 2 * v12, v13, 1, 0, 0, (uint64_t *)&v253);
  sub_20FD400DC((uint64_t)&v223, &v216, v213, *((size_t *)&v213 + 1), v214[0], v212, *((uint64_t *)&v212 + 1), LOBYTE(v211[0]), (uint64_t *)&v214[3]);
  v213 = 0uLL;
  v214[0] = 0;
  v210 = &off_24CA06C38;
  if ((_QWORD)__p)
  {
    *((_QWORD *)&__p + 1) = __p;
    operator delete((void *)__p);
  }
  v21 = (std::__shared_weak_count *)*((_QWORD *)&v217 + 1);
  if (*((_QWORD *)&v217 + 1))
  {
    v22 = (unint64_t *)(*((_QWORD *)&v217 + 1) + 8);
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
  v24 = (std::__shared_weak_count *)*((_QWORD *)&v216 + 1);
  if (*((_QWORD *)&v216 + 1))
  {
    v25 = (unint64_t *)(*((_QWORD *)&v216 + 1) + 8);
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  v27 = (std::__shared_weak_count *)*((_QWORD *)&v209 + 1);
  if (*((_QWORD *)&v209 + 1))
  {
    v28 = (unint64_t *)(*((_QWORD *)&v209 + 1) + 8);
    do
      v29 = __ldaxr(v28);
    while (__stlxr(v29 - 1, v28));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
  if (*((_QWORD *)&v226 + 1) * v227[0])
    bzero((void *)v229, 4 * *((_QWORD *)&v226 + 1) * v227[0]);
  v206 = v231;
  sub_20FD76EF4(v233, (uint64_t)v246, v231, a1[15], v12);
  v31 = (int32x4_t *)*v14;
  v30 = (char *)v14[1];
  if (*v14 != v30)
  {
    v32 = v30 - (char *)v31 - 4;
    v33 = (__int32 *)*v14;
    if (v32 < 0x1C)
      goto LABEL_266;
    v34 = (v32 >> 2) + 1;
    v33 = &v31->i32[v34 & 0x7FFFFFFFFFFFFFF8];
    v35 = v31 + 1;
    v36 = v34 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v37 = vnegq_s32(*v35);
      v35[-1] = vnegq_s32(v35[-1]);
      *v35 = v37;
      v35 += 2;
      v36 -= 8;
    }
    while (v36);
    if (v34 != (v34 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_266:
      do
      {
        *v33 = -*v33;
        ++v33;
      }
      while (v33 != (__int32 *)v30);
    }
  }
  sub_20FD76CB8(v239, (uint64_t)v233, a6);
  v39 = *a3;
  v38 = a3[1];
  if (v38 != *a3)
  {
    v40 = a3[1];
    do
    {
      v42 = (void *)*((_QWORD *)v40 - 3);
      v40 -= 24;
      v41 = v42;
      if (v42)
      {
        *((_QWORD *)v38 - 2) = v41;
        operator delete(v41);
      }
      v38 = v40;
    }
    while (v40 != v39);
  }
  a3[1] = v39;
  v43 = (char *)operator new(0x1000uLL);
  *(_QWORD *)v248 = v43;
  *(_QWORD *)&v248[8] = v43;
  *(_QWORD *)&v248[16] = v43 + 4096;
  v44 = v242;
  if ((unint64_t)(v242 - 15) > 0xFFFFFFFFFFFFFFF7)
  {
LABEL_212:
    *(_QWORD *)&v248[8] = v43;
    operator delete(v43);
    goto LABEL_213;
  }
  v203 = v246;
  v45 = cos(a5);
  v46 = v240;
  v208 = 7;
  v202 = a2;
  do
  {
    if ((unint64_t)(v46 - 15) <= 0xFFFFFFFFFFFFFFF7)
    {
      v47 = (double)(int)v208;
      v48 = 7;
      v49 = v203;
      while (1)
      {
        if (*(unsigned __int8 *)(v49[v208] + v48) == 255)
        {
          v260[0] = v206;
          v259 = v45;
          v50 = *(double **)v248;
          *(_QWORD *)&v248[8] = *(_QWORD *)v248;
          v51 = 2 * v48;
          v52 = (_DWORD *)(*(_QWORD *)(v206 + 8 * (int)v208) + 8 * (_DWORD)v48);
          if (*v52 || v52[1])
          {
            v258 = v246;
            v253 = (void **)&v258;
            v254 = &v259;
            v255 = v260;
            v256 = v46;
            v257 = v242;
            v207 = v48;
            if (*(_QWORD *)v248 < *(_QWORD *)&v248[16])
            {
              **(double **)v248 = (double)(int)v48;
              v50[1] = v47;
              v53 = v50 + 2;
              goto LABEL_63;
            }
            v54 = (uint64_t)(*(_QWORD *)&v248[16] - *(_QWORD *)v248) >> 3;
            if (v54 <= 1)
              v54 = 1;
            if (*(_QWORD *)&v248[16] - *(_QWORD *)v248 >= 0x7FFFFFFFFFFFFFF0uLL)
              v55 = 0xFFFFFFFFFFFFFFFLL;
            else
              v55 = v54;
            if (v55 >> 60)
              sub_20E877A38();
            v56 = (double *)operator new(16 * v55);
            v57 = &v56[2 * v55];
            *v56 = (double)(int)v207;
            v56[1] = v47;
            v53 = v56 + 2;
            *(_QWORD *)v248 = v56;
            *(_QWORD *)&v248[8] = v56 + 2;
            *(_QWORD *)&v248[16] = v57;
            if (v50)
            {
              operator delete(v50);
              v58 = v260[0];
            }
            else
            {
LABEL_63:
              v58 = v206;
            }
            *(_QWORD *)&v248[8] = v53;
            v59 = (int *)(*(_QWORD *)(v58 + 8 * (int)v208) + 4 * v51);
            v252 = *v59;
            v251 = v59[1];
            v250 = 0;
            LODWORD(v249[0]) = 0;
            do
            {
              do
              {
                do
                {
                  v210 = &v253;
                  *(_QWORD *)v211 = &v252;
                  *(_QWORD *)&v212 = &v251;
                  *((_QWORD *)&v212 + 1) = v248;
                  *(_QWORD *)&v213 = v260;
                  *((_QWORD *)&v213 + 1) = v249;
                  v214[0] = (unint64_t)&v250;
                  v61 = (int)*(double *)(*(_QWORD *)&v248[8] - 8);
                  v62 = (int)*(double *)(*(_QWORD *)&v248[8] - 16);
                  *(_BYTE *)(v258[v61] + v62) = -2;
                }
                while ((sub_20FD4038C((uint64_t)&v210, v61 + 1, v62 + 1) & 1) != 0);
              }
              while ((sub_20FD4038C((uint64_t)&v210, v61 - 1, v62 + 1) & 1) != 0
                   || (sub_20FD4038C((uint64_t)&v210, v61 - 1, v62 - 1) & 1) != 0
                   || (sub_20FD4038C((uint64_t)&v210, v61 + 1, v62 - 1) & 1) != 0
                   || (sub_20FD4038C((uint64_t)&v210, v61 + 1, v62) & 1) != 0
                   || (sub_20FD4038C((uint64_t)&v210, v61, v62 + 1) & 1) != 0
                   || (sub_20FD4038C((uint64_t)&v210, v61 - 1, v62) & 1) != 0
                   || (sub_20FD4038C((uint64_t)&v210, v61, v62 - 1) & 1) != 0);
              v60 = (int)v249[0];
              if (!LODWORD(v249[0]) && *(_QWORD *)v248 != *(_QWORD *)&v248[8])
              {
                v63 = (_OWORD *)(*(_QWORD *)&v248[8] - 16);
                if ((unint64_t)(*(_QWORD *)&v248[8] - 16) > *(_QWORD *)v248)
                {
                  v64 = *(_QWORD *)v248 + 16;
                  do
                  {
                    v65 = *(_OWORD *)(v64 - 16);
                    *(_OWORD *)(v64 - 16) = *v63;
                    *v63-- = v65;
                    v66 = v64 >= (unint64_t)v63;
                    v64 += 16;
                  }
                  while (!v66);
                }
              }
              LODWORD(v249[0]) = v60 + 1;
            }
            while (v60 < 1);
            if (v202 > (uint64_t)(*(_QWORD *)&v248[8] - *(_QWORD *)v248) >> 4)
            {
              *(_QWORD *)&v248[8] = *(_QWORD *)v248;
              v49 = v203;
LABEL_84:
              v48 = v207;
              goto LABEL_49;
            }
            v67 = *(float64x2_t *)(*(_QWORD *)&v248[8] - 16);
            v68 = vsubq_f64(v67, **(float64x2_t **)v248);
            v69 = v68.f64[1];
            *(float64x2_t *)__src = v68;
            sub_20FD40620((double **)&v210, v260[0], (int)*(double *)(*(_QWORD *)&v248[8] - 8), (int)v67.f64[0], v252, v251, (uint64_t)v239, v68.f64[0], v68.f64[1], v259);
            v70 = vnegq_f64(*(float64x2_t *)__src);
            sub_20FD40620((double **)v249, v260[0], (int)*(double *)(*(_QWORD *)v248 + 8), (int)**(double **)v248, v252, v251, (uint64_t)v239, v70.f64[0], v70.f64[1], v259);
            if (v249[0] != v249[1])
            {
              v71 = (char *)v249[1] - 16;
              if ((char *)v249[1] - 16 > v249[0])
              {
                v72 = (char *)v249[0] + 16;
                do
                {
                  v73 = *((_OWORD *)v72 - 1);
                  *((_OWORD *)v72 - 1) = *(_OWORD *)v71;
                  *(_OWORD *)v71 = v73;
                  v71 -= 16;
                  v66 = v72 >= v71;
                  v72 += 16;
                }
                while (!v66);
              }
            }
            v75 = (char *)v210;
            v74 = *(char **)v211;
            v76 = *(double *)__src;
            if ((uint64_t)(*(_QWORD *)v211 - (_QWORD)v210) >= 1)
            {
              v77 = (uint64_t)(*(_QWORD *)v211 - (_QWORD)v210) >> 4;
              v78 = *(__int128 **)&v248[8];
              v79 = *(_QWORD *)v248;
              v80 = (uint64_t)(*(_QWORD *)&v248[8] - *(_QWORD *)v248) >> 4;
              v81 = (__int128 *)(*(_QWORD *)v248 + ((*(_QWORD *)&v248[8] - *(_QWORD *)v248) & 0xFFFFFFFFFFFFFFF0));
              if (v77 > (uint64_t)(*(_QWORD *)&v248[16] - *(_QWORD *)&v248[8]) >> 4)
              {
                if ((unint64_t)(v80 + v77) >> 60)
                  sub_20E867F44();
                v82 = (uint64_t)(*(_QWORD *)&v248[16] - *(_QWORD *)v248) >> 3;
                if (v82 <= v80 + v77)
                  v82 = v80 + v77;
                if (*(_QWORD *)&v248[16] - *(_QWORD *)v248 >= 0x7FFFFFFFFFFFFFF0uLL)
                  v83 = 0xFFFFFFFFFFFFFFFLL;
                else
                  v83 = v82;
                if (v83)
                {
                  if (v83 >> 60)
                    sub_20E877A38();
                  v84 = (char *)operator new(16 * v83);
                  v76 = *(double *)__src;
                }
                else
                {
                  v84 = 0;
                }
                v102 = &v84[16 * v80];
                v103 = 16 * v77;
                v104 = &v102[16 * v77];
                v105 = v102;
                do
                {
                  v106 = *(_OWORD *)v75;
                  v75 += 16;
                  *(_OWORD *)v105 = v106;
                  v105 += 16;
                  v103 -= 16;
                }
                while (v103);
                v107 = *(__int128 **)v248;
                if (*(__int128 **)v248 != v81)
                {
                  v108 = v81;
                  do
                  {
                    *((_OWORD *)v102 - 1) = *(v108 - 1);
                    v102 -= 16;
                    --v108;
                  }
                  while (v108 != v107);
                  v78 = *(__int128 **)&v248[8];
                }
                for (; v81 != v78; v104 += 16)
                {
                  v109 = *v81++;
                  *(_OWORD *)v104 = v109;
                }
                v110 = *(void **)v248;
                *(_QWORD *)v248 = v102;
                *(_QWORD *)&v248[8] = v104;
                *(_QWORD *)&v248[16] = &v84[16 * v83];
                if (v110)
                {
                  operator delete(v110);
                  v76 = *(double *)__src;
                }
                goto LABEL_127;
              }
              v85 = *(_QWORD *)&v248[8] - (_QWORD)v81;
              v86 = (uint64_t)(*(_QWORD *)&v248[8] - (_QWORD)v81) >> 4;
              if (v86 >= v77)
              {
                v87 = (char *)v210 + 16 * v77;
                v88 = *(_OWORD **)&v248[8];
                v92 = v77;
                v93 = (__int128 *)(*(_QWORD *)&v248[8] - 16 * v77);
                i = *(_OWORD **)&v248[8];
                if ((unint64_t)v93 < *(_QWORD *)&v248[8])
                  goto LABEL_107;
                goto LABEL_108;
              }
              v87 = (char *)v210 + 16 * v86;
              v88 = *(_OWORD **)&v248[8];
              if (v87 != *(char **)v211)
              {
                v89 = v87;
                v90 = *(_OWORD **)&v248[8];
                do
                {
                  v91 = *(_OWORD *)v89;
                  v89 += 16;
                  *v90++ = v91;
                  ++v88;
                }
                while (v89 != v74);
              }
              *(_QWORD *)&v248[8] = v88;
              if (v85 >= 1)
              {
                v92 = v77;
                v93 = &v88[-v77];
                for (i = v88; v93 < v78; ++i)
                {
LABEL_107:
                  v95 = *v93++;
                  *i = v95;
                }
LABEL_108:
                v96 = &v81[v92];
                *(_QWORD *)&v248[8] = i;
                if (v88 != v96)
                {
                  v97 = v88 - v96;
                  v98 = v88 - 1;
                  v99 = 16 * v97;
                  v100 = v79 + 16 * v80 - 16;
                  do
                  {
                    *v98-- = *(_OWORD *)(v100 + v99);
                    v99 -= 16;
                  }
                  while (v99);
                }
                for (; v75 != v87; ++v81)
                {
                  v101 = *(_OWORD *)v75;
                  v75 += 16;
                  *v81 = v101;
                }
              }
            }
LABEL_127:
            v111 = *(__int128 **)v248;
            v112 = *(__int128 **)&v248[8];
            if ((uint64_t)(*(_QWORD *)&v248[8] - *(_QWORD *)v248) < 1)
            {
LABEL_164:
              v147 = (char *)v249[0];
              v148 = *(_OWORD *)v248;
              *(void **)v248 = v249[0];
              v149 = *(_OWORD *)&v249[1];
              *(_OWORD *)v249 = v148;
              v249[2] = *(void **)&v248[16];
              *(_OWORD *)&v248[8] = v149;
              v150 = (char *)(v149 - 16);
              if (vmlad_n_f64(-(v69 * (double)v252), (double)v251, v76) < 0.0 && v147 != (char *)v149 && v150 > v147)
              {
                v153 = v147 + 16;
                do
                {
                  v261 = *((_OWORD *)v153 - 1);
                  v154 = v261;
                  *((_OWORD *)v153 - 1) = *(_OWORD *)v150;
                  *(_OWORD *)v150 = v154;
                  v150 -= 16;
                  v66 = v153 >= v150;
                  v153 += 16;
                }
                while (!v66);
              }
              v155 = v250;
              v49 = v203;
              v48 = v207;
              if (v250)
                *(_QWORD *)&v248[8] = *(_QWORD *)v248;
              if (v249[0])
              {
                v249[1] = v249[0];
                operator delete(v249[0]);
              }
              if (v210)
              {
                *(_QWORD *)v211 = v210;
                operator delete(v210);
              }
              if (v155)
                goto LABEL_49;
              v157 = a3[1];
              v156 = (unint64_t)a3[2];
              if ((unint64_t)v157 < v156)
              {
                *(_QWORD *)v157 = 0;
                *((_QWORD *)v157 + 1) = 0;
                *((_QWORD *)v157 + 2) = 0;
                v158 = *(const void **)v248;
                v159 = *(_QWORD *)&v248[8] - *(_QWORD *)v248;
                if (*(_QWORD *)&v248[8] != *(_QWORD *)v248)
                {
                  if (v159 < 0)
                    sub_20E867F44();
                  v160 = (char *)operator new(*(_QWORD *)&v248[8] - *(_QWORD *)v248);
                  *(_QWORD *)v157 = v160;
                  *((_QWORD *)v157 + 1) = v160;
                  *((_QWORD *)v157 + 2) = &v160[16 * (v159 >> 4)];
                  v161 = v159 & 0xFFFFFFFFFFFFFFF0;
                  memcpy(v160, v158, v161);
                  *((_QWORD *)v157 + 1) = &v160[v161];
                }
                a3[1] = v157 + 24;
                a3[1] = v157 + 24;
                v49 = v203;
                v48 = v207;
                goto LABEL_49;
              }
              v162 = *a3;
              v163 = 0xAAAAAAAAAAAAAAABLL * ((v157 - *a3) >> 3);
              v164 = v163 + 1;
              if (v163 + 1 > 0xAAAAAAAAAAAAAAALL)
                sub_20E867F44();
              __srca = *(const void **)v248;
              v165 = *(_QWORD *)&v248[8];
              v166 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v156 - (_QWORD)v162) >> 3);
              if (2 * v166 > v164)
                v164 = 2 * v166;
              if (v166 >= 0x555555555555555)
                v167 = 0xAAAAAAAAAAAAAAALL;
              else
                v167 = v164;
              *(_QWORD *)&v213 = a3 + 2;
              if (v167)
              {
                if (v167 > 0xAAAAAAAAAAAAAAALL)
                  sub_20E877A38();
                v168 = (char *)operator new(24 * v167);
              }
              else
              {
                v168 = 0;
              }
              v169 = &v168[24 * v163];
              v210 = v168;
              *(_QWORD *)v211 = v169;
              *((_QWORD *)v169 + 1) = 0;
              v201 = &v168[24 * v167];
              *(_QWORD *)&v212 = v169;
              *((_QWORD *)&v212 + 1) = v201;
              *((_QWORD *)v169 + 2) = 0;
              *(_QWORD *)v169 = 0;
              v170 = v165 - (_QWORD)__srca;
              if (v170)
              {
                if (v170 < 0)
                  sub_20E867F44();
                v171 = (char *)operator new(v170);
                *(_QWORD *)v169 = v171;
                *((_QWORD *)v169 + 2) = &v171[16 * (v170 >> 4)];
                v172 = v170 & 0xFFFFFFFFFFFFFFF0;
                memcpy(v171, __srca, v172);
                *((_QWORD *)v169 + 1) = &v171[v172];
              }
              v173 = v169 + 24;
              *(_QWORD *)&v212 = v169 + 24;
              if (v157 == v162)
              {
                *a3 = v169;
                a3[1] = v173;
                a3[2] = v201;
              }
              else
              {
                do
                {
                  v174 = v169;
                  *((_QWORD *)v169 - 2) = 0;
                  *((_QWORD *)v169 - 1) = 0;
                  v175 = *(_OWORD *)(v157 - 24);
                  v157 -= 24;
                  *(_OWORD *)(v169 - 24) = v175;
                  v169 -= 24;
                  *((_QWORD *)v174 - 1) = *((_QWORD *)v157 + 2);
                  *(_QWORD *)v157 = 0;
                  *((_QWORD *)v157 + 1) = 0;
                  *((_QWORD *)v157 + 2) = 0;
                }
                while (v157 != v162);
                v157 = *a3;
                v176 = a3[1];
                *a3 = v169;
                v177 = (char *)v212;
                *(_OWORD *)(a3 + 1) = v212;
                v173 = v177;
                if (v176 != v157)
                {
                  v178 = v176;
                  do
                  {
                    v180 = (void *)*((_QWORD *)v178 - 3);
                    v178 -= 24;
                    v179 = v180;
                    if (v180)
                    {
                      *((_QWORD *)v176 - 2) = v179;
                      operator delete(v179);
                    }
                    v176 = v178;
                  }
                  while (v178 != v157);
                }
              }
              v49 = v203;
              if (v157)
                operator delete(v157);
              a3[1] = v173;
              goto LABEL_84;
            }
            v113 = (uint64_t)(*(_QWORD *)&v248[8] - *(_QWORD *)v248) >> 4;
            v114 = (char *)v249[1];
            v115 = v249[0];
            v116 = ((char *)v249[1] - (char *)v249[0]) >> 4;
            v117 = (char *)v249[0] + (((char *)v249[1] - (char *)v249[0]) & 0xFFFFFFFFFFFFFFF0);
            if (v113 > ((char *)v249[2] - (char *)v249[1]) >> 4)
            {
              if ((unint64_t)(v116 + v113) >> 60)
                sub_20E867F44();
              v118 = ((char *)v249[2] - (char *)v249[0]) >> 3;
              if (v118 <= v116 + v113)
                v118 = v116 + v113;
              if ((void *)((char *)v249[2] - (char *)v249[0]) >= (void *)0x7FFFFFFFFFFFFFF0)
                v119 = 0xFFFFFFFFFFFFFFFLL;
              else
                v119 = v118;
              if (v119)
              {
                if (v119 >> 60)
                  sub_20E877A38();
                v120 = (char *)operator new(16 * v119);
                v76 = *(double *)__src;
              }
              else
              {
                v120 = 0;
              }
              v138 = &v120[16 * v116];
              v139 = 16 * v113;
              v140 = &v138[16 * v113];
              v141 = v138;
              do
              {
                v142 = *v111++;
                *(_OWORD *)v141 = v142;
                v141 += 16;
                v139 -= 16;
              }
              while (v139);
              v143 = (char *)v249[0];
              if (v249[0] != v117)
              {
                v144 = v117;
                do
                {
                  *((_OWORD *)v138 - 1) = *((_OWORD *)v144 - 1);
                  v138 -= 16;
                  v144 -= 16;
                }
                while (v144 != v143);
                v114 = (char *)v249[1];
              }
              for (; v117 != v114; v140 += 16)
              {
                v145 = *(_OWORD *)v117;
                v117 += 16;
                *(_OWORD *)v140 = v145;
              }
              v146 = v249[0];
              v249[0] = v138;
              v249[1] = v140;
              v249[2] = &v120[16 * v119];
              if (v146)
              {
                operator delete(v146);
                v76 = *(double *)__src;
              }
              goto LABEL_164;
            }
            v121 = (char *)v249[1] - (char *)v117;
            v122 = ((char *)v249[1] - (char *)v117) >> 4;
            if (v122 >= v113)
            {
              v123 = *(_QWORD *)v248 + 16 * v113;
              v124 = (char *)v249[1];
              v128 = 16 * v113;
              v129 = (char *)v249[1] - 16 * v113;
              j = v249[1];
              if (v129 < v249[1])
                goto LABEL_144;
            }
            else
            {
              v123 = *(_QWORD *)v248 + 16 * v122;
              v124 = (char *)v249[1];
              if (v123 != *(_QWORD *)&v248[8])
              {
                v125 = (__int128 *)v123;
                v126 = v249[1];
                do
                {
                  v127 = *v125++;
                  *v126++ = v127;
                  v124 += 16;
                }
                while (v125 != v112);
              }
              v249[1] = v124;
              if (v121 < 1)
                goto LABEL_164;
              v128 = 16 * v113;
              v129 = &v124[-16 * v113];
              for (j = v124; v129 < v114; ++j)
              {
LABEL_144:
                v131 = *(_OWORD *)v129;
                v129 += 16;
                *j = v131;
              }
            }
            v132 = &v117[v128];
            v249[1] = j;
            if (v124 != v132)
            {
              v133 = (v124 - v132) >> 4;
              v134 = v124 - 16;
              v135 = 16 * v133;
              v136 = (uint64_t)v115 + 16 * v116 - 16;
              do
              {
                *(_OWORD *)v134 = *(_OWORD *)(v136 + v135);
                v134 -= 16;
                v135 -= 16;
              }
              while (v135);
            }
            if ((__int128 *)v123 != v111)
            {
              do
              {
                v137 = *v111++;
                *(_OWORD *)v117 = v137;
                v117 += 16;
              }
              while (v111 != (__int128 *)v123);
            }
            goto LABEL_164;
          }
          v49 = v203;
        }
LABEL_49:
        ++v48;
        v46 = v240;
        if (v48 >= v240 - 7)
        {
          v44 = v242;
          break;
        }
      }
    }
    ++v208;
  }
  while (v208 < v44 - 7);
  v43 = *(char **)v248;
  if (*(_QWORD *)v248)
    goto LABEL_212;
  do
LABEL_213:
    v181 = __ldaxr(p_shared_owners);
  while (__stlxr(v181 - 1, p_shared_owners));
  if (!v181)
  {
    ((void (*)(std::__shared_weak_count *))v200->__on_zero_shared)(v200);
    std::__shared_weak_count::__release_weak(v200);
  }
  if (v220)
  {
    v221 = v220;
    operator delete(v220);
  }
  v223 = &off_24CA06C38;
  if ((_QWORD)v231)
  {
    *((_QWORD *)&v231 + 1) = v231;
    operator delete((void *)v231);
  }
  v182 = (std::__shared_weak_count *)*((_QWORD *)&v230 + 1);
  if (*((_QWORD *)&v230 + 1))
  {
    v183 = (unint64_t *)(*((_QWORD *)&v230 + 1) + 8);
    do
      v184 = __ldaxr(v183);
    while (__stlxr(v184 - 1, v183));
    if (!v184)
    {
      ((void (*)(std::__shared_weak_count *))v182->__on_zero_shared)(v182);
      std::__shared_weak_count::__release_weak(v182);
    }
  }
  v185 = (std::__shared_weak_count *)*((_QWORD *)&v229 + 1);
  if (*((_QWORD *)&v229 + 1))
  {
    v186 = (unint64_t *)(*((_QWORD *)&v229 + 1) + 8);
    do
      v187 = __ldaxr(v186);
    while (__stlxr(v187 - 1, v186));
    if (!v187)
    {
      ((void (*)(std::__shared_weak_count *))v185->__on_zero_shared)(v185);
      std::__shared_weak_count::__release_weak(v185);
    }
  }
  *(_QWORD *)&v233[0] = &off_24C9E9690;
  if ((_QWORD)v237)
  {
    *((_QWORD *)&v237 + 1) = v237;
    operator delete((void *)v237);
  }
  v188 = (std::__shared_weak_count *)*((_QWORD *)&v236 + 1);
  if (*((_QWORD *)&v236 + 1))
  {
    v189 = (unint64_t *)(*((_QWORD *)&v236 + 1) + 8);
    do
      v190 = __ldaxr(v189);
    while (__stlxr(v190 - 1, v189));
    if (!v190)
    {
      ((void (*)(std::__shared_weak_count *))v188->__on_zero_shared)(v188);
      std::__shared_weak_count::__release_weak(v188);
    }
  }
  v191 = (std::__shared_weak_count *)*((_QWORD *)&v235 + 1);
  if (*((_QWORD *)&v235 + 1))
  {
    v192 = (unint64_t *)(*((_QWORD *)&v235 + 1) + 8);
    do
      v193 = __ldaxr(v192);
    while (__stlxr(v193 - 1, v192));
    if (!v193)
    {
      ((void (*)(std::__shared_weak_count *))v191->__on_zero_shared)(v191);
      std::__shared_weak_count::__release_weak(v191);
    }
  }
  v239[0] = &off_24C9AFD78;
  if (v246)
  {
    v247 = v246;
    operator delete(v246);
  }
  v194 = v245;
  if (v245)
  {
    v195 = (unint64_t *)&v245->__shared_owners_;
    do
      v196 = __ldaxr(v195);
    while (__stlxr(v196 - 1, v195));
    if (!v196)
    {
      ((void (*)(std::__shared_weak_count *))v194->__on_zero_shared)(v194);
      std::__shared_weak_count::__release_weak(v194);
    }
  }
  v197 = v244;
  if (v244)
  {
    v198 = (unint64_t *)&v244->__shared_owners_;
    do
      v199 = __ldaxr(v198);
    while (__stlxr(v199 - 1, v198));
    if (!v199)
    {
      ((void (*)(std::__shared_weak_count *))v197->__on_zero_shared)(v197);
      std::__shared_weak_count::__release_weak(v197);
    }
  }
}

void sub_20FD3F6D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,void *__p,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,std::__shared_weak_count *a59,uint64_t a60,uint64_t a61,void *a62)
{
  void *v63;
  std::__shared_weak_count *v64;
  unint64_t *p_shared_owners;
  unint64_t v66;
  unint64_t *v67;
  unint64_t v68;
  void *v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  std::__shared_weak_count *v73;
  unint64_t *v74;
  unint64_t v75;
  void *v76;
  std::__shared_weak_count *v77;
  unint64_t *v78;
  unint64_t v79;
  std::__shared_weak_count *v80;
  unint64_t *v81;
  unint64_t v82;

  if (__p)
  {
    operator delete(__p);
    v63 = a62;
    if (!a62)
    {
LABEL_3:
      v64 = (std::__shared_weak_count *)a61;
      if (!a61)
        goto LABEL_11;
LABEL_7:
      p_shared_owners = (unint64_t *)&v64->__shared_owners_;
      do
        v66 = __ldaxr(p_shared_owners);
      while (__stlxr(v66 - 1, p_shared_owners));
      if (!v66)
      {
        ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
        std::__shared_weak_count::__release_weak(v64);
      }
LABEL_11:
      if (a59)
      {
        v67 = (unint64_t *)&a59->__shared_owners_;
        do
          v68 = __ldaxr(v67);
        while (__stlxr(v68 - 1, v67));
        if (!v68)
        {
          ((void (*)(std::__shared_weak_count *))a59->__on_zero_shared)(a59);
          std::__shared_weak_count::__release_weak(a59);
        }
      }
      v69 = (void *)STACK[0x238];
      if (STACK[0x238])
      {
        STACK[0x240] = (unint64_t)v69;
        operator delete(v69);
      }
      v70 = (std::__shared_weak_count *)STACK[0x230];
      if (STACK[0x230])
      {
        v71 = (unint64_t *)&v70->__shared_owners_;
        do
          v72 = __ldaxr(v71);
        while (__stlxr(v72 - 1, v71));
        if (!v72)
        {
          ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
          std::__shared_weak_count::__release_weak(v70);
        }
      }
      v73 = (std::__shared_weak_count *)STACK[0x220];
      if (STACK[0x220])
      {
        v74 = (unint64_t *)&v73->__shared_owners_;
        do
          v75 = __ldaxr(v74);
        while (__stlxr(v75 - 1, v74));
        if (!v75)
        {
          ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
          std::__shared_weak_count::__release_weak(v73);
        }
      }
      STACK[0x250] = (unint64_t)&off_24C9AFD78;
      v76 = (void *)STACK[0x2C8];
      if (STACK[0x2C8])
      {
        STACK[0x2D0] = (unint64_t)v76;
        operator delete(v76);
      }
      v77 = (std::__shared_weak_count *)STACK[0x2C0];
      if (STACK[0x2C0])
      {
        v78 = (unint64_t *)&v77->__shared_owners_;
        do
          v79 = __ldaxr(v78);
        while (__stlxr(v79 - 1, v78));
        if (!v79)
        {
          ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
          std::__shared_weak_count::__release_weak(v77);
        }
      }
      v80 = (std::__shared_weak_count *)STACK[0x2B0];
      if (STACK[0x2B0])
      {
        v81 = (unint64_t *)&v80->__shared_owners_;
        do
          v82 = __ldaxr(v81);
        while (__stlxr(v82 - 1, v81));
        if (!v82)
        {
          ((void (*)(std::__shared_weak_count *))v80->__on_zero_shared)(v80);
          std::__shared_weak_count::__release_weak(v80);
        }
      }
      _Unwind_Resume(a1);
    }
  }
  else
  {
    v63 = a62;
    if (!a62)
      goto LABEL_3;
  }
  operator delete(v63);
  v64 = (std::__shared_weak_count *)a61;
  if (!a61)
    goto LABEL_11;
  goto LABEL_7;
}

void sub_20FD3F6E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,void *a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,std::__shared_weak_count *a59,uint64_t a60,std::__shared_weak_count *a61,void *a62)
{
  unint64_t *v62;
  unint64_t v64;
  void *v65;
  std::__shared_weak_count *v66;
  unint64_t *p_shared_owners;
  unint64_t v68;
  unint64_t *v69;
  unint64_t v70;
  void *v71;
  std::__shared_weak_count *v72;
  unint64_t *v73;
  unint64_t v74;
  std::__shared_weak_count *v75;
  unint64_t *v76;
  unint64_t v77;
  void *v78;
  std::__shared_weak_count *v79;
  unint64_t *v80;
  unint64_t v81;
  std::__shared_weak_count *v82;
  unint64_t *v83;
  unint64_t v84;

  do
    v64 = __ldaxr(v62);
  while (__stlxr(v64 - 1, v62));
  if (!v64)
  {
    ((void (*)(std::__shared_weak_count *))a10->__on_zero_shared)(a10);
    std::__shared_weak_count::__release_weak(a10);
  }
  if (a44)
  {
    operator delete(a44);
    v65 = a62;
    if (!a62)
    {
LABEL_6:
      v66 = a61;
      if (!a61)
        goto LABEL_14;
LABEL_10:
      p_shared_owners = (unint64_t *)&v66->__shared_owners_;
      do
        v68 = __ldaxr(p_shared_owners);
      while (__stlxr(v68 - 1, p_shared_owners));
      if (!v68)
      {
        ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
        std::__shared_weak_count::__release_weak(v66);
      }
LABEL_14:
      if (a59)
      {
        v69 = (unint64_t *)&a59->__shared_owners_;
        do
          v70 = __ldaxr(v69);
        while (__stlxr(v70 - 1, v69));
        if (!v70)
        {
          ((void (*)(std::__shared_weak_count *))a59->__on_zero_shared)(a59);
          std::__shared_weak_count::__release_weak(a59);
        }
      }
      v71 = (void *)STACK[0x238];
      if (STACK[0x238])
      {
        STACK[0x240] = (unint64_t)v71;
        operator delete(v71);
      }
      v72 = (std::__shared_weak_count *)STACK[0x230];
      if (STACK[0x230])
      {
        v73 = (unint64_t *)&v72->__shared_owners_;
        do
          v74 = __ldaxr(v73);
        while (__stlxr(v74 - 1, v73));
        if (!v74)
        {
          ((void (*)(std::__shared_weak_count *))v72->__on_zero_shared)(v72);
          std::__shared_weak_count::__release_weak(v72);
        }
      }
      v75 = (std::__shared_weak_count *)STACK[0x220];
      if (STACK[0x220])
      {
        v76 = (unint64_t *)&v75->__shared_owners_;
        do
          v77 = __ldaxr(v76);
        while (__stlxr(v77 - 1, v76));
        if (!v77)
        {
          ((void (*)(std::__shared_weak_count *))v75->__on_zero_shared)(v75);
          std::__shared_weak_count::__release_weak(v75);
        }
      }
      STACK[0x250] = (unint64_t)&off_24C9AFD78;
      v78 = (void *)STACK[0x2C8];
      if (STACK[0x2C8])
      {
        STACK[0x2D0] = (unint64_t)v78;
        operator delete(v78);
      }
      v79 = (std::__shared_weak_count *)STACK[0x2C0];
      if (STACK[0x2C0])
      {
        v80 = (unint64_t *)&v79->__shared_owners_;
        do
          v81 = __ldaxr(v80);
        while (__stlxr(v81 - 1, v80));
        if (!v81)
        {
          ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
          std::__shared_weak_count::__release_weak(v79);
        }
      }
      v82 = (std::__shared_weak_count *)STACK[0x2B0];
      if (STACK[0x2B0])
      {
        v83 = (unint64_t *)&v82->__shared_owners_;
        do
          v84 = __ldaxr(v83);
        while (__stlxr(v84 - 1, v83));
        if (!v84)
        {
          ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
          std::__shared_weak_count::__release_weak(v82);
        }
      }
      _Unwind_Resume(a1);
    }
  }
  else
  {
    v65 = a62;
    if (!a62)
      goto LABEL_6;
  }
  operator delete(v65);
  v66 = a61;
  if (!a61)
    goto LABEL_14;
  goto LABEL_10;
}

void sub_20FD3F6EC(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,void *__p,uint64_t a42)
{
  unint64_t *v42;
  unint64_t v43;

  sub_20FD3FAFC(&a26);
  sub_20E86665C((uint64_t)&a24);
  do
    v43 = __ldaxr(v42);
  while (__stlxr(v43 - 1, v42));
  if (!v43)
  {
    ((void (*)(std::__shared_weak_count *))a10->__on_zero_shared)(a10);
    std::__shared_weak_count::__release_weak(a10);
  }
  JUMPOUT(0x20FD3F920);
}

void sub_20FD3F78C(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_rethrow();
}

void sub_20FD3F798(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,void *a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,std::__shared_weak_count *a59,uint64_t a60,std::__shared_weak_count *a61,void *a62)
{
  void *v63;
  std::__shared_weak_count *v64;
  unint64_t *p_shared_owners;
  unint64_t v66;
  unint64_t *v67;
  unint64_t v68;
  void *v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  std::__shared_weak_count *v73;
  unint64_t *v74;
  unint64_t v75;
  void *v76;
  std::__shared_weak_count *v77;
  unint64_t *v78;
  unint64_t v79;
  std::__shared_weak_count *v80;
  unint64_t *v81;
  unint64_t v82;

  __cxa_end_catch();
  if (a44)
  {
    operator delete(a44);
    v63 = a62;
    if (!a62)
    {
LABEL_3:
      v64 = a61;
      if (!a61)
        goto LABEL_11;
LABEL_7:
      p_shared_owners = (unint64_t *)&v64->__shared_owners_;
      do
        v66 = __ldaxr(p_shared_owners);
      while (__stlxr(v66 - 1, p_shared_owners));
      if (!v66)
      {
        ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
        std::__shared_weak_count::__release_weak(v64);
      }
LABEL_11:
      if (a59)
      {
        v67 = (unint64_t *)&a59->__shared_owners_;
        do
          v68 = __ldaxr(v67);
        while (__stlxr(v68 - 1, v67));
        if (!v68)
        {
          ((void (*)(std::__shared_weak_count *))a59->__on_zero_shared)(a59);
          std::__shared_weak_count::__release_weak(a59);
        }
      }
      v69 = (void *)STACK[0x238];
      if (STACK[0x238])
      {
        STACK[0x240] = (unint64_t)v69;
        operator delete(v69);
      }
      v70 = (std::__shared_weak_count *)STACK[0x230];
      if (STACK[0x230])
      {
        v71 = (unint64_t *)&v70->__shared_owners_;
        do
          v72 = __ldaxr(v71);
        while (__stlxr(v72 - 1, v71));
        if (!v72)
        {
          ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
          std::__shared_weak_count::__release_weak(v70);
        }
      }
      v73 = (std::__shared_weak_count *)STACK[0x220];
      if (STACK[0x220])
      {
        v74 = (unint64_t *)&v73->__shared_owners_;
        do
          v75 = __ldaxr(v74);
        while (__stlxr(v75 - 1, v74));
        if (!v75)
        {
          ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
          std::__shared_weak_count::__release_weak(v73);
        }
      }
      STACK[0x250] = (unint64_t)&off_24C9AFD78;
      v76 = (void *)STACK[0x2C8];
      if (STACK[0x2C8])
      {
        STACK[0x2D0] = (unint64_t)v76;
        operator delete(v76);
      }
      v77 = (std::__shared_weak_count *)STACK[0x2C0];
      if (STACK[0x2C0])
      {
        v78 = (unint64_t *)&v77->__shared_owners_;
        do
          v79 = __ldaxr(v78);
        while (__stlxr(v79 - 1, v78));
        if (!v79)
        {
          ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
          std::__shared_weak_count::__release_weak(v77);
        }
      }
      v80 = (std::__shared_weak_count *)STACK[0x2B0];
      if (STACK[0x2B0])
      {
        v81 = (unint64_t *)&v80->__shared_owners_;
        do
          v82 = __ldaxr(v81);
        while (__stlxr(v82 - 1, v81));
        if (!v82)
        {
          ((void (*)(std::__shared_weak_count *))v80->__on_zero_shared)(v80);
          std::__shared_weak_count::__release_weak(v80);
        }
      }
      _Unwind_Resume(a1);
    }
  }
  else
  {
    v63 = a62;
    if (!a62)
      goto LABEL_3;
  }
  operator delete(v63);
  v64 = a61;
  if (!a61)
    goto LABEL_11;
  goto LABEL_7;
}

void sub_20FD3F7A8()
{
  void *v0;
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v0 = (void *)STACK[0x238];
  if (STACK[0x238])
  {
    STACK[0x240] = (unint64_t)v0;
    operator delete(v0);
  }
  v1 = (std::__shared_weak_count *)STACK[0x230];
  if (STACK[0x230])
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  if (STACK[0x220])
  {
    v4 = (unint64_t *)(STACK[0x220] + 8);
    do
      v5 = __ldaxr(v4);
    while (__stlxr(v5 - 1, v4));
    JUMPOUT(0x20FD3FA4CLL);
  }
  JUMPOUT(0x20FD3FA68);
}

void sub_20FD3F814(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  unint64_t *v14;
  uint64_t v15;
  void *v16;
  void *v17;
  unint64_t v18;

  v16 = *(void **)v15;
  if (*(_QWORD *)v15)
  {
    *(_QWORD *)(v15 + 8) = v16;
    operator delete(v16);
  }
  *(_QWORD *)(a14 + 8) = v15;
  v17 = (void *)STACK[0x2E0];
  if (STACK[0x2E0])
  {
    STACK[0x2E8] = (unint64_t)v17;
    operator delete(v17);
  }
  do
    v18 = __ldaxr(v14);
  while (__stlxr(v18 - 1, v14));
  if (!v18)
  {
    ((void (*)(std::__shared_weak_count *))a10->__on_zero_shared)(a10);
    std::__shared_weak_count::__release_weak(a10);
  }
  JUMPOUT(0x20FD3F920);
}

_QWORD *sub_20FD3FAFC(_QWORD *a1)
{
  void *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  *a1 = &off_24CA06C38;
  v2 = (void *)a1[15];
  if (v2)
  {
    a1[16] = v2;
    operator delete(v2);
  }
  v3 = (std::__shared_weak_count *)a1[14];
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
      v6 = (std::__shared_weak_count *)a1[12];
      if (v6)
        goto LABEL_8;
      return a1;
    }
  }
  v6 = (std::__shared_weak_count *)a1[12];
  if (!v6)
    return a1;
LABEL_8:
  v7 = (unint64_t *)&v6->__shared_owners_;
  do
    v8 = __ldaxr(v7);
  while (__stlxr(v8 - 1, v7));
  if (v8)
    return a1;
  ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
  std::__shared_weak_count::__release_weak(v6);
  return a1;
}

BOOL sub_20FD3FBC4(uint64_t *a1, int a2, float64x2_t *a3, double a4, double a5)
{
  float64x2_t *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  float64x2_t *v9;
  float64x2_t *v10;
  double v11;
  float64x2_t v12;
  float64x2_t *v13;
  float64x2_t v14;
  float64x2_t v15;
  float64x2_t v16;
  double v17;
  float64x2_t v18;
  float64x2_t v19;
  double v20;
  double v21;
  double v23;
  double v24;
  double v26;
  float64x2_t *v34;
  uint64_t v38;
  double v41;
  float64x2_t v42;
  float64x2_t *v43;
  float64x2_t v44;
  float64x2_t v45;
  float64x2_t v46;
  double v47;
  float64x2_t *v48;
  float64x2_t v49;
  float64x2_t v50;
  double v51;
  double v52;
  double v53;
  float64x2_t v56;
  float64x2_t v59;

  v6 = *a1;
  v5 = (float64x2_t *)a1[1];
  v7 = (unint64_t)(a4 * 0.5 * (double)(unint64_t)(((uint64_t)v5 - *a1) >> 4));
  v8 = 16 * v7;
  v9 = (float64x2_t *)(*a1 + 16 * v7);
  v10 = &v5[-v7];
  v11 = (double)(v10 - v9);
  if (v10 == v9)
  {
    v17 = 0.0;
    v15 = (float64x2_t)vdupq_lane_s64(COERCE__INT64(0.0 / v11), 0);
    v16 = 0uLL;
  }
  else
  {
    v12 = 0uLL;
    v13 = (float64x2_t *)(*a1 + 16 * v7);
    do
    {
      v14 = *v13++;
      v12 = vaddq_f64(v12, v14);
    }
    while (v13 != v10);
    v15 = vdivq_f64(v12, (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v11, 0));
    v16 = 0uLL;
    v17 = 0.0;
    do
    {
      v18 = *v9++;
      v19 = vsubq_f64(v18, v15);
      v17 = v17 + vmulq_f64(v19, v19).f64[0];
      v16 = vaddq_f64(v16, vmulq_laneq_f64(v19, v19, 1));
    }
    while (v9 != v10);
  }
  v20 = fabs(v16.f64[0]);
  v21 = v16.f64[1];
  if (v20 >= 1.0e-300 && v20 >= fabs(v17) * 1.0e-15 && v20 >= fabs(v16.f64[1]) * 1.0e-15)
  {
    v26 = v17 * 0.5
        + v16.f64[1] * 0.5
        - sqrt(v16.f64[1] * v16.f64[1] + v16.f64[0] * (v16.f64[0] * 4.0) + v17 * v17 - (v17 + v17) * v16.f64[1]) * 0.5;
    __asm { FMOV            V7.2D, #1.0 }
    _Q7.f64[0] = v26 / v16.f64[0] - v16.f64[1] / v16.f64[0];
    _Q4 = vdivq_f64(_Q7, (float64x2_t)vdupq_lane_s64(COERCE__INT64(sqrt(_Q7.f64[0] * _Q7.f64[0] + 1.0)), 0));
    v23 = v26 / v11;
    v24 = a5 * a5;
    if (v23 > a5 * a5)
      return v23 <= v24;
  }
  else
  {
    if (v17 > v16.f64[1])
    {
      _Q4 = (float64x2_t)xmmword_2102DD520;
      v23 = v21 / v11;
      v24 = a5 * a5;
      if (v23 <= a5 * a5)
        goto LABEL_17;
      return v23 <= v24;
    }
    _Q4 = (float64x2_t)xmmword_21030D320;
    v23 = v17 / v11;
    v24 = a5 * a5;
    if (v23 > a5 * a5)
      return v23 <= v24;
  }
LABEL_17:
  _D5 = v15.f64[1];
  __asm { FMLA            D6, D5, V4.D[1] }
  v34 = v10 - 1;
  _D5 = vextq_s8((int8x16_t)_Q4, (int8x16_t)_Q4, 8uLL).u64[0];
  while (v8 != -16)
  {
    _Q7 = *(_OWORD *)(v6 + v8);
    __asm { FMLA            D16, D5, V7.D[1] }
    v8 -= 16;
    if (vabdd_f64(_D6, _D16) > a5)
    {
      v6 += v8 + 32;
      break;
    }
  }
  if (v5 == v34)
  {
LABEL_25:
    if (!a2)
      goto LABEL_43;
  }
  else
  {
    v38 = ~v7;
    while (1)
    {
      _Q7 = v5[v38];
      __asm { FMLA            D16, D5, V7.D[1] }
      if (vabdd_f64(_D6, _D16) > a5)
        break;
      if (!(++v38 * 16))
        goto LABEL_25;
    }
    v5 = (float64x2_t *)((char *)v5 + v38 * 16);
    if (!a2)
      goto LABEL_43;
  }
  v41 = (double)(((uint64_t)v5 - v6) >> 4);
  if (v5 == (float64x2_t *)v6)
  {
    v47 = 0.0;
    v45 = (float64x2_t)vdupq_lane_s64(COERCE__INT64(0.0 / v41), 0);
    v46.f64[0] = 0.0;
    v51 = fabs(0.0);
    v52 = 0.0;
    if (v51 < 1.0e-300)
    {
LABEL_38:
      if (v47 <= v52)
        _Q4 = (float64x2_t)xmmword_21030D320;
      else
        _Q4 = (float64x2_t)xmmword_2102DD520;
      goto LABEL_42;
    }
  }
  else
  {
    v42 = 0uLL;
    v43 = (float64x2_t *)v6;
    do
    {
      v44 = *v43++;
      v42 = vaddq_f64(v42, v44);
    }
    while (v43 != v5);
    v45 = vdivq_f64(v42, (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v41, 0));
    v46 = 0uLL;
    v47 = 0.0;
    v48 = (float64x2_t *)v6;
    do
    {
      v49 = *v48++;
      v50 = vsubq_f64(v49, v45);
      v47 = v47 + vmulq_f64(v50, v50).f64[0];
      v46 = vaddq_f64(v46, vmulq_laneq_f64(v50, v50, 1));
    }
    while (v48 != v5);
    v51 = fabs(v46.f64[0]);
    v52 = v46.f64[1];
    if (v51 < 1.0e-300)
      goto LABEL_38;
  }
  if (v51 < fabs(v47) * 1.0e-15 || v51 < fabs(v52) * 1.0e-15)
    goto LABEL_38;
  v53 = (v47 * 0.5 + v52 * 0.5 - sqrt(v52 * v52 + v46.f64[0] * (v46.f64[0] * 4.0) + v47 * v47 - (v47 + v47) * v52) * 0.5)
      / v46.f64[0]
      - v52 / v46.f64[0];
  __asm { FMOV            V5.2D, #1.0 }
  _Q5.f64[0] = v53;
  _Q4 = vdivq_f64(_Q5, (float64x2_t)vdupq_lane_s64(COERCE__INT64(sqrt(v53 * v53 + 1.0)), 0));
LABEL_42:
  _D1 = v45.f64[1];
  __asm { FMLA            D6, D1, V4.D[1] }
LABEL_43:
  v56 = v5[-1];
  _D7 = *(_QWORD *)(v6 + 8);
  __asm { FMLA            D5, D7, V4.D[1] }
  v59 = vmlsq_lane_f64(*(float64x2_t *)v6, _Q4, _D5 - _D6, 0);
  _D7 = v5[-1].f64[1];
  __asm { FMLA            D5, D7, V4.D[1] }
  *a3 = v59;
  a3[1] = vmlsq_lane_f64(v56, _Q4, _D5 - _D6, 0);
  return v23 <= v24;
}

void sub_20FD3FF78(_QWORD *a1)
{
  void *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  *a1 = &off_24CA06C38;
  v2 = (void *)a1[15];
  if (v2)
  {
    a1[16] = v2;
    operator delete(v2);
  }
  v3 = (std::__shared_weak_count *)a1[14];
  if (!v3)
    goto LABEL_7;
  p_shared_owners = (unint64_t *)&v3->__shared_owners_;
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (!v5)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
    v6 = (std::__shared_weak_count *)a1[12];
    if (!v6)
      goto LABEL_13;
  }
  else
  {
LABEL_7:
    v6 = (std::__shared_weak_count *)a1[12];
    if (!v6)
      goto LABEL_13;
  }
  v7 = (unint64_t *)&v6->__shared_owners_;
  do
    v8 = __ldaxr(v7);
  while (__stlxr(v8 - 1, v7));
  if (!v8)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
LABEL_13:
  JUMPOUT(0x212BC6398);
}

void sub_20FD40044(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20FD4006C(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3vio17feature_detection39DetectLineEdgelChainsAndReturnGradientsERKNS0_8cv_types5ImageIhEEjf"
                     "fRNSt3__16vectorINS8_IN3cva6MatrixIdLj2ELj1ELb1EEENS7_9allocatorISB_EEEENSC_ISE_EEEEPNS8_IiNSC_IiEEEEE3$_0")
    return a1 + 24;
  if (((v3 & (unint64_t)"ZN4cv3d3vio17feature_detection39DetectLineEdgelChainsAndReturnGradientsERKNS0_8cv_types5"
                                "ImageIhEEjffRNSt3__16vectorINS8_IN3cva6MatrixIdLj2ELj1ELb1EEENS7_9allocatorISB_EEEENSC_I"
                                "SE_EEEEPNS8_IiNSC_IiEEEEE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3vio17feature_detection39DetectLineEdgelChainsAndReturnGradientsERKNS0_8cv_types5ImageIhEEjffRNSt3__16vectorINS8_IN3cva6MatrixIdLj2ELj1ELb1EEENS7_9allocatorISB_EEEENSC_ISE_EEEEPNS8_IiNSC_IiEEEEE3$_0"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3vio17feature_detection39DetectLineEdgelChainsAndReturnGradientsERKNS0_8cv_types5ImageIhEEjffRNSt3__16vectorINS8_IN3cva6MatrixIdLj2ELj1ELb1EEENS7_9allocatorISB_EEEENSC_ISE_EEEEPNS8_IiNSC_IiEEEEE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

void sub_20FD400DC(uint64_t a1, __int128 *a2, size_t __sz, size_t a4, unint64_t a5, uint64_t a6, uint64_t a7, unsigned int a8, uint64_t *a9)
{
  size_t v17;
  uint64_t v18;
  __int128 v19;
  std::__shared_weak_count *v20;
  unint64_t *p_shared_owners;
  unint64_t v22;
  size_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  _BYTE *v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  BOOL v33;
  unint64_t v34;
  uint64_t v35;
  char *v36;
  char *v37;
  char *v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  char *v43;
  char *v44;
  uint64_t v45;
  __int128 v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  char *v51;

  if (a8)
    v17 = __sz;
  else
    v17 = 0;
  if (a7 + a6 * __sz + v17 > a4
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/ComputerVisionTypes/include/VIO/ComputerVisionTypes/Image.h", 306, (uint64_t)"widthStep >= minimum_width_step", 31, (uint64_t)"widthStep must be at least as big as minimum_width_step.", 56, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v18 = a8;
  v19 = *a2;
  *(_QWORD *)a2 = 0;
  *((_QWORD *)a2 + 1) = 0;
  v20 = *(std::__shared_weak_count **)(a1 + 96);
  *(_OWORD *)(a1 + 88) = v19;
  if (v20)
  {
    p_shared_owners = (unint64_t *)&v20->__shared_owners_;
    do
      v22 = __ldaxr(p_shared_owners);
    while (__stlxr(v22 - 1, p_shared_owners));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  *(_BYTE *)(a1 + 8) = a8;
  *(_QWORD *)(a1 + 32) = __sz;
  *(_QWORD *)(a1 + 40) = a4;
  v23 = a4;
  *(_QWORD *)(a1 + 48) = a5;
  *(_QWORD *)(a1 + 16) = a6;
  *(_QWORD *)(a1 + 24) = a7;
  v24 = *a9;
  *(_BYTE *)(a1 + 80) = *((_BYTE *)a9 + 8);
  v25 = v18 | (4 * a6);
  *(_QWORD *)(a1 + 64) = v25;
  *(_QWORD *)(a1 + 72) = v24;
  *(_QWORD *)(a1 + 56) = v25 + a7;
  v27 = *(_BYTE **)(a1 + 120);
  v26 = *(char **)(a1 + 128);
  v28 = (v26 - v27) >> 3;
  v29 = a5 - v28;
  if (a5 > v28)
  {
    v30 = *(_QWORD *)(a1 + 136);
    if (v29 <= (v30 - (uint64_t)v26) >> 3)
    {
      bzero(*(void **)(a1 + 128), 8 * v29);
      *(_QWORD *)(a1 + 128) = &v26[8 * v29];
    }
    else
    {
      if (a5 >> 61)
        sub_20E867F44();
      v31 = v30 - (_QWORD)v27;
      v32 = v31 >> 2;
      if (v31 >> 2 <= a5)
        v32 = a5;
      v33 = (unint64_t)v31 >= 0x7FFFFFFFFFFFFFF8;
      v34 = 0x1FFFFFFFFFFFFFFFLL;
      if (!v33)
        v34 = v32;
      if (v34 >> 61)
        sub_20E877A38();
      v35 = 8 * v34;
      v36 = (char *)operator new(8 * v34);
      v37 = &v36[8 * v28];
      v50 = v36;
      v51 = &v36[v35];
      bzero(v37, 8 * v29);
      v38 = &v37[8 * v29];
      if (v26 != v27)
      {
        v39 = v26 - v27 - 8;
        if (v39 < 0x58)
          goto LABEL_42;
        if ((unint64_t)(v27 - v50) < 0x20)
          goto LABEL_42;
        v40 = (v39 >> 3) + 1;
        v41 = 8 * (v40 & 0x3FFFFFFFFFFFFFFCLL);
        v42 = &v26[-v41];
        v37 -= v41;
        v43 = &v50[8 * v28 - 16];
        v44 = v26 - 16;
        v45 = v40 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v46 = *(_OWORD *)v44;
          *((_OWORD *)v43 - 1) = *((_OWORD *)v44 - 1);
          *(_OWORD *)v43 = v46;
          v43 -= 32;
          v44 -= 32;
          v45 -= 4;
        }
        while (v45);
        v26 = v42;
        if (v40 != (v40 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_42:
          do
          {
            v47 = *((_QWORD *)v26 - 1);
            v26 -= 8;
            *((_QWORD *)v37 - 1) = v47;
            v37 -= 8;
          }
          while (v26 != v27);
        }
        v26 = *(char **)(a1 + 120);
      }
      *(_QWORD *)(a1 + 120) = v37;
      *(_QWORD *)(a1 + 128) = v38;
      *(_QWORD *)(a1 + 136) = v51;
      if (v26)
        operator delete(v26);
    }
LABEL_34:
    v48 = 0;
    v49 = 0;
    do
    {
      *(_QWORD *)(*(_QWORD *)(a1 + 120) + 8 * v49++) = *(_QWORD *)(a1 + 88) + v48;
      v48 += 4 * v23;
    }
    while (a5 != v49);
    return;
  }
  if (a5 < v28)
    *(_QWORD *)(a1 + 128) = &v27[8 * a5];
  if (a5)
    goto LABEL_34;
}

uint64_t sub_20FD4038C(uint64_t a1, int a2, int a3)
{
  _QWORD **v4;
  uint64_t v5;
  uint64_t v7;
  int *v8;
  int v9;
  int v10;
  int v12;
  int v13;
  int v14;
  uint64_t result;
  double **v16;
  unint64_t v17;
  double *v18;
  double *v19;
  double *v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char *v25;
  double *v26;
  int *v27;
  int v28;
  unsigned int *v29;
  int *v30;
  int v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int v34;
  uint64_t v35;
  double v36;
  int v37;
  int v38;

  v4 = *(_QWORD ***)a1;
  v5 = a3;
  if (*(unsigned __int8 *)(*(_QWORD *)(***(_QWORD ***)a1 + 8 * a2) + a3) != 255)
    return 0;
  v7 = a2;
  v8 = (int *)(*(_QWORD *)(*v4[2] + 8 * a2) + 8 * a3);
  v9 = *v8;
  v10 = v8[1];
  if (!(v9 | v10))
    return 0;
  v12 = (__int16)**(_DWORD **)(a1 + 8);
  v13 = (__int16)**(_DWORD **)(a1 + 16);
  v14 = v9 * v12 + v10 * v13;
  if (v14 < 1
    || *(double *)v4[1]
     * (*(double *)v4[1]
      * (double)(uint64_t)((v9 * v9 + v10 * v10) * (unint64_t)(v12 * v12 + v13 * v13))) > (double)(uint64_t)(v14 * (unint64_t)v14))
  {
    return 0;
  }
  v16 = *(double ***)(a1 + 24);
  v18 = v16[1];
  v17 = (unint64_t)v16[2];
  if ((unint64_t)v18 >= v17)
  {
    v20 = *v16;
    v21 = ((char *)v18 - (char *)*v16) >> 4;
    v22 = v21 + 1;
    if ((unint64_t)(v21 + 1) >> 60)
      sub_20E867F44();
    v23 = v17 - (_QWORD)v20;
    if (v23 >> 3 > v22)
      v22 = v23 >> 3;
    if ((unint64_t)v23 >= 0x7FFFFFFFFFFFFFF0)
      v24 = 0xFFFFFFFFFFFFFFFLL;
    else
      v24 = v22;
    if (v24)
    {
      if (v24 >> 60)
        sub_20E877A38();
      v25 = (char *)operator new(16 * v24);
    }
    else
    {
      v25 = 0;
    }
    v26 = (double *)&v25[16 * v21];
    *v26 = (double)a3;
    v26[1] = (double)a2;
    v19 = v26 + 2;
    if (v18 != v20)
    {
      do
      {
        *((_OWORD *)v26 - 1) = *((_OWORD *)v18 - 1);
        v26 -= 2;
        v18 -= 2;
      }
      while (v18 != v20);
      v18 = *v16;
    }
    *v16 = v26;
    v16[1] = v19;
    v16[2] = (double *)&v25[16 * v24];
    if (v18)
      operator delete(v18);
  }
  else
  {
    *v18 = (double)a3;
    v18[1] = (double)a2;
    v19 = v18 + 2;
  }
  v16[1] = v19;
  v27 = (int *)(*(_QWORD *)(**(_QWORD **)(a1 + 32) + 8 * v7) + 8 * v5);
  v28 = *v27;
  LODWORD(v27) = v27[1];
  v29 = *(unsigned int **)(a1 + 8);
  v30 = *(int **)(a1 + 16);
  *v29 += v28;
  v31 = *v30 + (_DWORD)v27;
  *v30 = v31;
  v32 = *v29;
  if ((*v29 & 0x80000000) == 0)
    v33 = *v29;
  else
    v33 = -v32;
  if (v31 >= 0)
    v34 = v31;
  else
    v34 = -v31;
  if (v33 >> 15 || v34 >= 0x8000)
  {
    *v29 = (int)*v29 / 2;
    v31 = *v30 / 2;
    *v30 = v31;
    v32 = *v29;
  }
  v35 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 8);
  v36 = *(double *)(v35 - 8);
  v37 = (int)((double)a3 - *(double *)(v35 - 16));
  v38 = (int)((double)a2 - v36);
  if (**(_DWORD **)(a1 + 40) == 1)
    v37 = -v37;
  else
    v38 = -v38;
  result = 1;
  if (((v37 * v31 + v38 * v32) & 0x80000000) != 0)
    **(_BYTE **)(a1 + 48) = 1;
  return result;
}

void sub_20FD40620(double **a1, uint64_t a2, int a3, int a4, int a5, int a6, uint64_t a7, double a8, double a9, double a10)
{
  __int16 v12;
  __int16 v13;
  char v20;
  int *v21;
  __int128 v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  double *v27;
  int v28;
  int v29;
  int v30;
  uint64_t v31;
  double *v32;
  _DWORD *v33;
  unsigned int v34;
  _DWORD *v35;
  int v36;
  _DWORD *v37;
  unsigned int v38;
  BOOL v39;
  unsigned int *v40;
  char *v41;
  uint64_t v42;
  _DWORD *v43;
  int v44;
  int v45;
  int *v46;
  int v47;
  int v48;
  int v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  double *v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  unint64_t v57;
  char *v58;
  double *v59;
  double *v60;
  double *v61;
  int v62;
  int v63;
  int v64;
  uint64_t v65;
  unsigned int v66;
  int v67;
  unsigned int v68;
  __int128 v69;
  uint64_t v70;
  uint64_t v71;

  v12 = a6;
  v13 = a5;
  v71 = *MEMORY[0x24BDAC8D0];
  v20 = llround(atan2((double)a6, (double)a5) / 0.785398163);
  v21 = (int *)&qword_2103BF914[(v20 + 2) & 7];
  if ((double)*v21 * a8 + (double)v21[1] * a9 < 0.0)
    v20 += 4;
  *(_QWORD *)&v22 = qword_2103BF914[(v20 + 1) & 7];
  *((_QWORD *)&v22 + 1) = qword_2103BF914[(v20 + 2) & 7];
  v69 = v22;
  v70 = qword_2103BF914[(v20 + 3) & 7];
  v23 = *(_QWORD *)(a7 + 32);
  v24 = *(_DWORD *)(a7 + 48);
  v25 = *(_QWORD *)(a7 + 120);
  a1[1] = 0;
  a1[2] = 0;
  *a1 = 0;
  v26 = (v24 - 1);
  *(_BYTE *)(*(_QWORD *)(v25 + 8 * a3) + a4) = -2;
  if ((_DWORD)v26 != a3)
  {
    v27 = 0;
    v28 = v23 - 1;
    v29 = v13;
    v30 = v12;
    v31 = (v29 * v29 + v30 * v30);
    v65 = v25;
    v64 = v23 - 1;
    v62 = v12;
    v63 = v13;
    do
    {
      if (!a4 || a4 == v28 || !a3)
        break;
      v33 = (_DWORD *)(*(_QWORD *)(a2 + 8 * (DWORD1(v69) + a3)) + 8 * ((int)v69 + a4));
      v34 = *v33 * *v33 + v33[1] * v33[1];
      v66 = v34;
      v35 = (_DWORD *)(*(_QWORD *)(a2 + 8 * (HIDWORD(v69) + a3)) + 8 * (DWORD2(v69) + a4));
      v36 = *v35 * *v35 + v35[1] * v35[1];
      v67 = v36;
      v37 = (_DWORD *)(*(_QWORD *)(a2 + 8 * (HIDWORD(v70) + a3)) + 8 * ((int)v70 + a4));
      v38 = *v37 * *v37 + v37[1] * v37[1];
      v68 = v38;
      v39 = v34 >= v36;
      if ((int)v34 <= v36)
        v34 = v36;
      v40 = v39 ? &v66 : (unsigned int *)&v67;
      v41 = (char *)(v34 >= v38 ? v40 : &v68);
      v42 = v41 - (char *)&v66;
      if (*(int *)((char *)&v66 + (v42 << 30 >> 30)) < 1)
        break;
      v43 = (_DWORD *)&v69 + 2 * (int)(v42 >> 2);
      v44 = *v43 + a4;
      v45 = v43[1] + a3;
      v46 = (int *)(*(_QWORD *)(a2 + 8 * v45) + 8 * v44);
      v47 = *v46;
      v48 = v46[1];
      v49 = v47 * v29 + v48 * v30;
      if (v49 < 1
        || (double)(uint64_t)(v31 * (unint64_t)(v47 * v47 + v48 * v48)) * a10 * a10 > (double)(uint64_t)(v49 * (unint64_t)v49))
      {
        break;
      }
      v50 = (unint64_t)a1[2];
      if ((unint64_t)v27 < v50)
      {
        *v27 = (double)v44;
        v27[1] = (double)v45;
        v32 = v27 + 2;
      }
      else
      {
        v51 = v26;
        v52 = v31;
        v53 = *a1;
        v54 = ((char *)v27 - (char *)*a1) >> 4;
        v55 = v54 + 1;
        if ((unint64_t)(v54 + 1) >> 60)
          sub_20E867F44();
        v56 = v50 - (_QWORD)v53;
        if (v56 >> 3 > v55)
          v55 = v56 >> 3;
        v57 = (unint64_t)v56 >= 0x7FFFFFFFFFFFFFF0 ? 0xFFFFFFFFFFFFFFFLL : v55;
        if (v57)
        {
          if (v57 >> 60)
            sub_20E877A38();
          v58 = (char *)operator new(16 * v57);
        }
        else
        {
          v58 = 0;
        }
        v59 = (double *)&v58[16 * v54];
        *v59 = (double)v44;
        v59[1] = (double)v45;
        v60 = v59;
        v31 = v52;
        if (v27 != v53)
        {
          do
          {
            *((_OWORD *)v60 - 1) = *((_OWORD *)v27 - 1);
            v60 -= 2;
            v27 -= 2;
          }
          while (v27 != v53);
          v27 = *a1;
        }
        v26 = v51;
        v61 = (double *)&v58[16 * v57];
        v32 = v59 + 2;
        *a1 = v60;
        a1[1] = v59 + 2;
        a1[2] = v61;
        if (v27)
          operator delete(v27);
        v25 = v65;
        v28 = v64;
        v30 = v62;
        v29 = v63;
      }
      a1[1] = v32;
      a3 = (int)*(v32 - 1);
      a4 = (int)*(v32 - 2);
      *(_BYTE *)(*(_QWORD *)(v25 + 8 * a3) + a4) = -2;
      v27 = v32;
    }
    while ((_DWORD)v26 != a3);
  }
}

void sub_20FD409F0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v2;

  if (v2)
  {
    *(_QWORD *)(v1 + 8) = v2;
    operator delete(v2);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20FD40A18(_QWORD *a1)
{
  void *v2;
  _QWORD *v3;
  void *v4;
  void (***v5)(_QWORD);
  void (***v6)(_QWORD);
  void *v7;
  void (***v8)(_QWORD);
  void (***v9)(_QWORD);
  void (**v10)(_QWORD);
  BOOL v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  *a1 = &off_24CA06CB8;
  v2 = (void *)a1[38];
  if (v2)
  {
    a1[39] = v2;
    operator delete(v2);
  }
  v3 = (_QWORD *)a1[7];
  a1[7] = 0;
  if (v3)
  {
    v4 = (void *)v3[15];
    if (v4)
    {
      v3[16] = v4;
      operator delete(v4);
    }
    v5 = (void (***)(_QWORD))v3[12];
    if (v5)
    {
      v6 = (void (***)(_QWORD))v3[13];
      v7 = (void *)v3[12];
      if (v6 != v5)
      {
        v8 = v6 - 18;
        v9 = v6 - 18;
        do
        {
          v10 = *v9;
          v9 -= 18;
          (*v10)(v8);
          v11 = v8 == v5;
          v8 = v9;
        }
        while (!v11);
        v7 = (void *)v3[12];
      }
      v3[13] = v5;
      operator delete(v7);
    }
    v12 = (void *)v3[3];
    if (v12)
    {
      v3[4] = v12;
      operator delete(v12);
    }
    MEMORY[0x212BC6398](v3, 0x10A0C404C52BEF7);
  }
  v13 = a1[6];
  a1[6] = 0;
  if (v13)
  {
    sub_20FD42964(v13 + 520, *(_QWORD **)(v13 + 528));
    sub_20F89E908(v13 + 280);
    v14 = *(_QWORD *)(v13 + 96);
    *(_QWORD *)(v13 + 96) = 0;
    if (v14)
      (*(void (**)(void))(v13 + 104))();
    if (*(char *)(v13 + 87) < 0)
      operator delete(*(void **)(v13 + 64));
    MEMORY[0x212BC6398](v13, 0x10B2C40F4DB8327);
  }
  v15 = a1[5];
  a1[5] = 0;
  if (v15)
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 24))(v15);
  v16 = a1[4];
  a1[4] = 0;
  if (v16)
    (*(void (**)(uint64_t))(*(_QWORD *)v16 + 24))(v16);
  v17 = a1[3];
  a1[3] = 0;
  if (v17)
  {
    v18 = sub_20FD429AC(v17);
    MEMORY[0x212BC6398](v18, 0x1020C40DDB2B1B8);
  }
  v19 = a1[2];
  a1[2] = 0;
  if (v19)
    (*(void (**)(uint64_t))(*(_QWORD *)v19 + 24))(v19);
  v20 = a1[1];
  a1[1] = 0;
  if (v20)
  {
    v21 = sub_20FD429AC(v20);
    MEMORY[0x212BC6398](v21, 0x1020C40DDB2B1B8);
  }
  return a1;
}

void sub_20FD40BE4(_QWORD *a1)
{
  sub_20FD40A18(a1);
  JUMPOUT(0x212BC6398);
}

void sub_20FD40C08(uint64_t a1, __int128 *a2, uint64_t a3)
{
  int v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t (**v19)();
  uint64_t v20;
  uint64_t (****v21)();
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  void *v32;
  void (***v33)(_QWORD);
  void (***v34)(_QWORD);
  void *v35;
  void (***v36)(_QWORD);
  void (***v37)(_QWORD);
  void (**v38)(_QWORD);
  BOOL v39;
  void *v40;
  uint64_t v41;
  __int128 v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  int64x2_t v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int16 v60;
  __int128 v61;
  _BYTE v62[48];
  void *__p;
  __int128 v64;
  char v65;
  int v66;

  if (*((_QWORD *)a2 + 15) >> 31
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/FeatureDetection/src/DoGAndFREAKGenerator.cpp", 46, (uint64_t)"config.max_keypoints <= std::numeric_limits<int>::max()", 55, (uint64_t)"config.max_keypoints is outside the range of int", 48, (void (*)(void **))sub_21023DDB0)|| *((_QWORD *)a2 + 10) >> 31&& sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/FeatureDetection/src/DoGAndFREAKGenerator.cpp", 48, (uint64_t)"config.max_subpixel_iterations <= std::numeric_limits<int>::max()", 65, (uint64_t)"config.max_subpixel_iterations is outside the range of int", 58, (void (*)(void **))sub_21023DDB0)|| *((_QWORD *)a2 + 14) >> 31&& sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/FeatureDetection/src/DoGAndFREAKGenerator.cpp",
         50,
         (uint64_t)"config.num_buckets_scale <= std::numeric_limits<int>::max()",
         59,
         (uint64_t)"num_buckets_scale is outside the range of int",
         45,
         (void (*)(void **))sub_21023DDB0)
    || *((_QWORD *)a2 + 12) >> 31
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/FeatureDetection/src/DoGAndFREAKGenerator.cpp", 52, (uint64_t)"config.num_buckets_x <= std::numeric_limits<int>::max()", 55, (uint64_t)"num_buckets_x is outside the range of int", 41, (void (*)(void **))sub_21023DDB0)|| *((_QWORD *)a2 + 13) >> 31&& sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/FeatureDetection/src/DoGAndFREAKGenerator.cpp", 54, (uint64_t)"config.num_buckets_y <= std::numeric_limits<int>::max()", 55, (uint64_t)"num_buckets_y is outside the range of int", 41, (void (*)(void **))sub_21023DDB0))
  {
    goto LABEL_65;
  }
  v6 = *((unsigned __int8 *)a2 + 180);
  if (*((_BYTE *)a2 + 180) && *((_BYTE *)a2 + 176))
  {
    if (!sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/FeatureDetection/src/DoGAndFREAKGenerator.cpp", 58, (uint64_t)"!(config.enable_swproxy_hw_desgen && config.enable_swproxy)", 59, (uint64_t)"Both enable_swproxy and enable_swproxy_hwdesgen should not be true at the same time.", 84, (void (*)(void **))sub_21023DDB0))
    {
      v6 = *((unsigned __int8 *)a2 + 180);
      goto LABEL_15;
    }
LABEL_65:
    abort();
  }
LABEL_15:
  if (v6)
  {
    v61 = *(__int128 *)((char *)a2 + 8);
    *(uint32x2_t *)v62 = vcvt_u32_f32(*(float32x2_t *)((char *)a2 + 184));
    v7 = a2[7];
    *(_OWORD *)&v62[8] = a2[6];
    v62[40] = 0;
    HIBYTE(v64) = 5;
    strcpy((char *)&__p, "/tmp/");
    *(_OWORD *)&v62[24] = v7;
    v65 = *((_BYTE *)a2 + 181);
    v8 = operator new();
    sub_20FDA0734(v8, &v61);
    v9 = *(_QWORD *)(a1 + 48);
    *(_QWORD *)(a1 + 48) = v8;
    if (v9)
    {
      sub_20FD42964(v9 + 520, *(_QWORD **)(v9 + 528));
      sub_20F89E908(v9 + 280);
      v10 = *(_QWORD *)(v9 + 96);
      *(_QWORD *)(v9 + 96) = 0;
      if (v10)
        (*(void (**)(void))(v9 + 104))();
      if (*(char *)(v9 + 87) < 0)
        operator delete(*(void **)(v9 + 64));
      MEMORY[0x212BC6398](v9, 0x10B2C40F4DB8327);
    }
    if (SHIBYTE(v64) < 0)
      operator delete(__p);
    goto LABEL_62;
  }
  v11 = *(_OWORD *)(a3 + 48);
  *(_OWORD *)&v62[16] = *(_OWORD *)(a3 + 32);
  *(_OWORD *)&v62[32] = v11;
  __p = *(void **)(a3 + 64);
  v12 = *(_OWORD *)(a3 + 16);
  v61 = *(_OWORD *)a3;
  *(_OWORD *)v62 = v12;
  v13 = *((_QWORD *)a2 + 21);
  v14 = *((_DWORD *)a2 + 30);
  *(_DWORD *)&v62[32] = v14;
  *(_DWORD *)&v62[36] = v13;
  if (*((_BYTE *)a2 + 129))
    *(_DWORD *)&v62[32] = 2 * v14;
  *(_DWORD *)v62 = *((_QWORD *)a2 + 10);
  *(_DWORD *)&v62[28] = *((_QWORD *)a2 + 14);
  *(int32x2_t *)&v62[20] = vmovn_s64(*((int64x2_t *)a2 + 6));
  v64 = *(__int128 *)((char *)a2 + 216);
  v62[16] = *((_BYTE *)a2 + 48);
  v58 = *(__int128 *)((char *)a2 + 8);
  v59 = *(__int128 *)((char *)a2 + 24);
  v60 = *((unsigned __int8 *)a2 + 176);
  if (!*((_BYTE *)a2 + 4))
  {
    BYTE4(v61) = *((_BYTE *)a2 + 181);
    *(_QWORD *)&v62[4] = *((_QWORD *)a2 + 25);
    *(_DWORD *)&v62[12] = *((_DWORD *)a2 + 52);
    v22 = *((_DWORD *)a2 + 17);
    DWORD2(v61) = *((_DWORD *)a2 + 15);
    HIDWORD(v61) = v22;
    if (*(_DWORD *)a2 >= 2u)
    {
      sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/FeatureDetection/src/DoGAndFREAKGenerator.cpp", 123, (uint64_t)"", 0, (uint64_t)"Unknown pyramid type specified.", 31, (void (*)(void **))sub_21023DDB0);
      abort();
    }
    v23 = operator new();
    *(_DWORD *)v23 = 0;
    *(_BYTE *)(v23 + 4) = 1;
    *(_QWORD *)(v23 + 8) = 0x4120000041A00000;
    *(_DWORD *)(v23 + 16) = 5;
    *(_QWORD *)(v23 + 20) = 0x3F96E9DD3F5425F2;
    *(_DWORD *)(v23 + 28) = 0;
    *(_WORD *)(v23 + 32) = 1;
    *(_OWORD *)(v23 + 36) = xmmword_210378520;
    *(_DWORD *)(v23 + 52) = 100;
    *(_OWORD *)(v23 + 56) = xmmword_210378530;
    *(int64x2_t *)(v23 + 72) = vdupq_n_s64(1uLL);
    *(_QWORD *)(v23 + 208) = 0;
    *(_QWORD *)(v23 + 200) = 0;
    *(_OWORD *)(v23 + 88) = 0u;
    *(_OWORD *)(v23 + 104) = 0u;
    *(_OWORD *)(v23 + 120) = 0u;
    *(_OWORD *)(v23 + 144) = 0u;
    *(_OWORD *)(v23 + 160) = 0u;
    *(_OWORD *)(v23 + 176) = 0u;
    *(_QWORD *)(v23 + 192) = v23 + 200;
    v24 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v23;
    if (v24)
    {
      v25 = sub_20FD429AC(v24);
      MEMORY[0x212BC6398](v25, 0x1020C40DDB2B1B8);
    }
    v26 = operator new();
    *(_OWORD *)(v26 + 8) = xmmword_2103BF960;
    *(int64x2_t *)(v26 + 24) = vdupq_n_s64(3uLL);
    *(_QWORD *)(v26 + 40) = 1;
    *(_WORD *)(v26 + 48) = 0;
    *(_DWORD *)(v26 + 56) = 0;
    *(_QWORD *)(v26 + 60) = 0x3FCCCCCD3F000000;
    *(_QWORD *)v26 = off_24CA06EC8;
    *(_QWORD *)(v26 + 80) = 0;
    *(_QWORD *)(v26 + 88) = 0;
    *(_QWORD *)(v26 + 72) = 0;
    v21 = (uint64_t (****)())(a1 + 16);
    v27 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v26;
    if (v27)
      (*(void (**)(uint64_t))(*(_QWORD *)v27 + 24))(v27);
    sub_20FD66F10(*(_QWORD *)(a1 + 8), (uint64_t)&v61);
    goto LABEL_42;
  }
  LODWORD(v61) = *((_DWORD *)a2 + 44);
  BYTE4(v61) = *((_BYTE *)a2 + 181);
  *(_QWORD *)&v62[4] = *((_QWORD *)a2 + 25);
  *(_DWORD *)&v62[12] = *((_DWORD *)a2 + 52);
  *((_QWORD *)&v59 + 1) = 2;
  v15 = operator new();
  *(_DWORD *)v15 = 0;
  *(_BYTE *)(v15 + 4) = 1;
  *(_QWORD *)(v15 + 8) = 0x4120000041A00000;
  *(_DWORD *)(v15 + 16) = 5;
  *(_QWORD *)(v15 + 20) = 0x3F96E9DD3F5425F2;
  *(_DWORD *)(v15 + 28) = 0;
  *(_WORD *)(v15 + 32) = 1;
  *(_OWORD *)(v15 + 36) = xmmword_210378520;
  *(_DWORD *)(v15 + 52) = 100;
  *(_OWORD *)(v15 + 56) = xmmword_210378530;
  *(int64x2_t *)(v15 + 72) = vdupq_n_s64(1uLL);
  *(_QWORD *)(v15 + 208) = 0;
  *(_QWORD *)(v15 + 200) = 0;
  *(_OWORD *)(v15 + 88) = 0u;
  *(_OWORD *)(v15 + 104) = 0u;
  *(_OWORD *)(v15 + 120) = 0u;
  *(_OWORD *)(v15 + 144) = 0u;
  *(_OWORD *)(v15 + 160) = 0u;
  *(_OWORD *)(v15 + 176) = 0u;
  *(_QWORD *)(v15 + 192) = v15 + 200;
  v16 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = v15;
  if (v16)
  {
    v17 = sub_20FD429AC(v16);
    MEMORY[0x212BC6398](v17, 0x1020C40DDB2B1B8);
  }
  if (*((_BYTE *)a2 + 176))
  {
    *((_QWORD *)&v61 + 1) = *((_QWORD *)a2 + 23);
    if (*((_BYTE *)a2 + 181))
      HIDWORD(v61) = *((_DWORD *)a2 + 49);
    sub_20FD66F10(*(_QWORD *)(a1 + 24), (uint64_t)&v61);
    v18 = operator new();
    *(_OWORD *)(v18 + 8) = xmmword_2103BF960;
    *(int64x2_t *)(v18 + 24) = vdupq_n_s64(3uLL);
    *(_QWORD *)(v18 + 40) = 1;
    *(_WORD *)(v18 + 48) = 0;
    *(_DWORD *)(v18 + 56) = 0;
    *(_QWORD *)(v18 + 60) = 0x3FCCCCCD3F000000;
    v19 = off_24CA06E80;
    *(_QWORD *)v18 = off_24CA06E80;
    *(_QWORD *)(v18 + 80) = 0;
    *(_QWORD *)(v18 + 88) = 0;
    *(_QWORD *)(v18 + 72) = 0;
    v21 = (uint64_t (****)())(a1 + 40);
    v20 = *(_QWORD *)(a1 + 40);
    *(_QWORD *)(a1 + 40) = v18;
    if (!v20)
      goto LABEL_43;
    goto LABEL_41;
  }
  v28 = *((_DWORD *)a2 + 18);
  DWORD2(v61) = *((_DWORD *)a2 + 16);
  HIDWORD(v61) = v28;
  sub_20FD66F10(*(_QWORD *)(a1 + 24), (uint64_t)&v61);
  v29 = operator new();
  *(_OWORD *)(v29 + 8) = xmmword_2103BF960;
  *(int64x2_t *)(v29 + 24) = vdupq_n_s64(3uLL);
  *(_QWORD *)(v29 + 40) = 1;
  *(_WORD *)(v29 + 48) = 0;
  *(_DWORD *)(v29 + 56) = 0;
  *(_QWORD *)(v29 + 60) = 0x3FCCCCCD3F000000;
  v19 = off_24CA06D08;
  *(_QWORD *)v29 = off_24CA06D08;
  *(_QWORD *)(v29 + 80) = 0;
  *(_QWORD *)(v29 + 88) = 0;
  *(_QWORD *)(v29 + 72) = 0;
  v21 = (uint64_t (****)())(a1 + 32);
  v20 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = v29;
  if (v20)
  {
LABEL_41:
    (*(void (**)(uint64_t))(*(_QWORD *)v20 + 24))(v20);
LABEL_42:
    v19 = **v21;
  }
LABEL_43:
  (*v19)();
  *(_BYTE *)(a1 + 64) = *((_BYTE *)a2 + 128);
  v30 = operator new();
  *(_QWORD *)v30 = 36;
  *(_DWORD *)(v30 + 8) = 5;
  *(_QWORD *)(v30 + 12) = 0x404000003F4CCCCDLL;
  *(_DWORD *)(v30 + 20) = 1069547520;
  *(_QWORD *)(v30 + 32) = 0;
  *(_QWORD *)(v30 + 40) = 0;
  *(_QWORD *)(v30 + 24) = 0;
  *(_OWORD *)(v30 + 48) = xmmword_2103BF960;
  *(int64x2_t *)(v30 + 64) = vdupq_n_s64(3uLL);
  *(_QWORD *)(v30 + 80) = 1;
  *(_QWORD *)(v30 + 88) = 0;
  *(_OWORD *)(v30 + 96) = 0u;
  *(_OWORD *)(v30 + 112) = 0u;
  *(_OWORD *)(v30 + 128) = 0u;
  v31 = *(_QWORD **)(a1 + 56);
  *(_QWORD *)(a1 + 56) = v30;
  if (v31)
  {
    v32 = (void *)v31[15];
    if (v32)
    {
      v31[16] = v32;
      operator delete(v32);
    }
    v33 = (void (***)(_QWORD))v31[12];
    if (v33)
    {
      v34 = (void (***)(_QWORD))v31[13];
      v35 = (void *)v31[12];
      if (v34 != v33)
      {
        v36 = v34 - 18;
        v37 = v34 - 18;
        do
        {
          v38 = *v37;
          v37 -= 18;
          (*v38)(v36);
          v39 = v36 == v33;
          v36 = v37;
        }
        while (!v39);
        v35 = (void *)v31[12];
      }
      v31[13] = v33;
      operator delete(v35);
    }
    v40 = (void *)v31[3];
    if (v40)
    {
      v31[4] = v40;
      operator delete(v40);
    }
    MEMORY[0x212BC6398](v31, 0x10A0C404C52BEF7);
    v41 = *(_QWORD *)(a1 + 56);
  }
  else
  {
    v41 = v30;
  }
  v42 = a2[9];
  *(_QWORD *)(v41 + 16) = *((_QWORD *)a2 + 20);
  *(_OWORD *)v41 = v42;
  *(_OWORD *)(v41 + 48) = v58;
  *(_OWORD *)(v41 + 64) = v59;
  *(_QWORD *)(v41 + 80) = 1;
  *(_WORD *)(v41 + 88) = v60;
  sub_20FD755F0(v41 + 48);
  v43 = *(_QWORD *)(v41 + 24);
  v44 = *(_QWORD *)(v41 + 32);
  v45 = *(_QWORD *)v41;
  v66 = 0;
  v46 = (v44 - v43) >> 2;
  if (v45 <= v46)
  {
    if (v45 < v46)
      *(_QWORD *)(v41 + 32) = v43 + 4 * v45;
  }
  else
  {
    sub_20EDB9D10(v41 + 24, v45 - v46, (const float *)&v66);
  }
  *(_OWORD *)(v41 + 48) = v58;
  *(_OWORD *)(v41 + 64) = v59;
  *(_QWORD *)(v41 + 80) = 2;
  *(_WORD *)(v41 + 88) = v60;
  sub_20FD755F0(v41 + 48);
LABEL_62:
  v47 = (int64x2_t)*a2;
  v48 = a2[1];
  *(_OWORD *)(a1 + 104) = a2[2];
  *(_OWORD *)(a1 + 88) = v48;
  *(int64x2_t *)(a1 + 72) = v47;
  v49 = a2[3];
  v50 = a2[4];
  v51 = a2[5];
  *(_OWORD *)(a1 + 168) = a2[6];
  *(_OWORD *)(a1 + 152) = v51;
  *(_OWORD *)(a1 + 136) = v50;
  *(_OWORD *)(a1 + 120) = v49;
  v52 = a2[7];
  v53 = a2[8];
  v54 = a2[9];
  *(_OWORD *)(a1 + 232) = a2[10];
  *(_OWORD *)(a1 + 216) = v54;
  *(_OWORD *)(a1 + 200) = v53;
  *(_OWORD *)(a1 + 184) = v52;
  v55 = a2[11];
  v56 = a2[12];
  v57 = a2[13];
  *(_QWORD *)(a1 + 296) = *((_QWORD *)a2 + 28);
  *(_OWORD *)(a1 + 264) = v56;
  *(_OWORD *)(a1 + 280) = v57;
  *(_OWORD *)(a1 + 248) = v55;
  if ((__int128 *)(a1 + 72) != a2)
    sub_20E867E00((_QWORD *)(a1 + 304), *((char **)a2 + 29), *((char **)a2 + 30), (uint64_t)(*((_QWORD *)a2 + 30) - *((_QWORD *)a2 + 29)) >> 2);
}

void sub_20FD41558(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  uint64_t v34;

  MEMORY[0x212BC6398](v34, 0x10B2C40F4DB8327);
  if (a34 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_20FD4158C(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, double a5, double a6, double a7, double a8, double a9, double a10, double a11, int8x16_t a12)
{
  uint64_t v13;
  _QWORD *v14;

  v13 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)a4 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a4 + 8) = v13;
  *(_QWORD *)(a4 + 64) = *(_QWORD *)(a4 + 56);
  *(_QWORD *)(a4 + 88) = *(_QWORD *)(a4 + 80);
  *(_QWORD *)(a4 + 168) = *(_QWORD *)(a4 + 160);
  *(_BYTE *)(a4 + 184) = 0;
  *(_QWORD *)(a4 + 16) = 0;
  *(_QWORD *)(a4 + 32) = 0;
  if (*(_BYTE *)(a4 + 48))
    *(_BYTE *)(a4 + 48) = 0;
  if (*(_BYTE *)(a1 + 252))
  {
    sub_20FD4161C(*(_QWORD *)(a1 + 48), a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
  }
  else if (*(_BYTE *)(a1 + 76))
  {
    v14 = *(_QWORD **)(a1 + 24);
    if (*(_BYTE *)(a1 + 248))
      sub_20FD418A8(a1, *(uint64_t **)(a1 + 40), v14, a2, a3, a4);
    else
      sub_20FD419A8(a1, *(uint64_t **)(a1 + 32), v14, a2, a3, a4);
  }
  else
  {
    sub_20FD41AA8(a1, *(_QWORD *)(a1 + 16), *(_QWORD **)(a1 + 8), a2, a3, a4);
  }
}

void sub_20FD4161C(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, double a5, double a6, double a7, double a8, double a9, double a10, double a11, int8x16_t a12)
{
  void *v14;
  char *v15;
  unint64_t v16;
  const std::nothrow_t *v17;
  unint64_t v18;
  uint64_t *v19;
  BOOL v20;
  uint64_t *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  _OWORD *v25;
  uint64_t v26;
  float v27;
  float v28;
  void *__p;
  char *v30;
  uint64_t v31;

  *(_QWORD *)(a4 + 64) = *(_QWORD *)(a4 + 56);
  *(_QWORD *)(a4 + 88) = *(_QWORD *)(a4 + 80);
  *(_QWORD *)(a4 + 168) = *(_QWORD *)(a4 + 160);
  *(_BYTE *)(a4 + 184) = 0;
  *(_QWORD *)(a4 + 16) = 0;
  *(_QWORD *)(a4 + 32) = 0;
  if (*(_BYTE *)(a4 + 48))
    *(_BYTE *)(a4 + 48) = 0;
  __p = 0;
  v30 = 0;
  v31 = 0;
  sub_20FDA0D6C(a1, a2, a3, &__p, a5, a6, a7, a8, a9, a10, a11, a12);
  v14 = __p;
  v15 = v30;
  v16 = 0x8E38E38E38E38E39 * ((v30 - (_BYTE *)__p) >> 3);
  if (v30 - (_BYTE *)__p < 9217)
  {
LABEL_7:
    v21 = 0;
    v18 = 0;
  }
  else
  {
    v17 = (const std::nothrow_t *)MEMORY[0x24BEDB6B8];
    v18 = 0x8E38E38E38E38E39 * ((v30 - (_BYTE *)__p) >> 3);
    while (1)
    {
      v19 = (uint64_t *)operator new(72 * v18, v17);
      if (v19)
        break;
      v20 = v18 > 1;
      v18 >>= 1;
      if (!v20)
        goto LABEL_7;
    }
    v21 = v19;
  }
  sub_20FDA3C3C((unint64_t)v14, v15, v16, v21, v18);
  if (v21)
    operator delete(v21);
  if (!*(_BYTE *)(a1 + 88))
    sub_20FDA2E10(&__p, *(_DWORD *)(a1 + 24), *(_DWORD *)(a1 + 32), *(_DWORD *)(a1 + 40), *(_DWORD *)(a1 + 48), *(_QWORD *)a1, *(_QWORD *)(a1 + 8));
  v22 = v30;
  if (v30 != __p)
  {
    v23 = 0;
    if ((unint64_t)((v30 - (_BYTE *)__p) / 72) <= 1)
      v24 = 1;
    else
      v24 = (v30 - (_BYTE *)__p) / 72;
    do
    {
      v25 = (char *)__p + v23 + 8;
      v26 = *(_QWORD *)((char *)__p + v23);
      v28 = pow(1.41421356, (float)((float)BYTE5(v26) * 0.0625));
      v27 = (double)BYTE4(v26) * 3.14159265 * 0.0078125;
      sub_20EDBB530(a4, v26 < 0, v25, (float)(unsigned __int16)v26 * 0.015625, (float)WORD1(v26) * 0.015625, v27, v28, (float)(HIWORD(v26) & 0x7FFF));
      v23 += 72;
      --v24;
    }
    while (v24);
    v22 = (char *)__p;
  }
  if (v22)
  {
    v30 = v22;
    operator delete(v22);
  }
}

void sub_20FD4185C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  void *v11;
  void *v13;

  if (v11)
  {
    operator delete(v11);
    v13 = __p;
    if (!__p)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else
  {
    v13 = __p;
    if (!__p)
      goto LABEL_3;
  }
  operator delete(v13);
  _Unwind_Resume(exception_object);
}

void sub_20FD418A8(uint64_t a1, uint64_t *a2, _QWORD *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  void *v9;
  _BYTE *v10;
  void *__p;
  _BYTE *v12;

  sub_20FD41CC0(a1, a2, a3, a4, a5, &v9);
  *(_QWORD *)(a6 + 64) = *(_QWORD *)(a6 + 56);
  *(_QWORD *)(a6 + 88) = *(_QWORD *)(a6 + 80);
  *(_QWORD *)(a6 + 168) = *(_QWORD *)(a6 + 160);
  *(_BYTE *)(a6 + 184) = 0;
  *(_QWORD *)(a6 + 16) = 0;
  *(_QWORD *)(a6 + 32) = 0;
  if (*(_BYTE *)(a6 + 48))
    *(_BYTE *)(a6 + 48) = 0;
  sub_20EDD53A4((_QWORD *)a6, 0xAAAAAAAAAAAAAAABLL * ((v10 - (_BYTE *)v9) >> 4) - 0x5555555555555555 * ((v12 - (_BYTE *)__p) >> 4));
  sub_20FD42B20(a1, (uint64_t)a2, (uint64_t)&v9, a6);
  *(_QWORD *)(a6 + 16) = sub_20FD42B20(a1, (uint64_t)a2, (uint64_t)&__p, a6);
  if (__p)
  {
    v12 = __p;
    operator delete(__p);
  }
  if (v9)
  {
    v10 = v9;
    operator delete(v9);
  }
}

void sub_20FD41994(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E9AA8C8((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20FD419A8(uint64_t a1, uint64_t *a2, _QWORD *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  void *v9;
  _BYTE *v10;
  void *__p;
  _BYTE *v12;

  sub_20FD42060(a1, a2, a3, a4, a5, &v9);
  *(_QWORD *)(a6 + 64) = *(_QWORD *)(a6 + 56);
  *(_QWORD *)(a6 + 88) = *(_QWORD *)(a6 + 80);
  *(_QWORD *)(a6 + 168) = *(_QWORD *)(a6 + 160);
  *(_BYTE *)(a6 + 184) = 0;
  *(_QWORD *)(a6 + 16) = 0;
  *(_QWORD *)(a6 + 32) = 0;
  if (*(_BYTE *)(a6 + 48))
    *(_BYTE *)(a6 + 48) = 0;
  sub_20EDD53A4((_QWORD *)a6, 0xAAAAAAAAAAAAAAABLL * ((v10 - (_BYTE *)v9) >> 4) - 0x5555555555555555 * ((v12 - (_BYTE *)__p) >> 4));
  sub_20FD53B80(a1, (uint64_t)a2, (uint64_t)&v9, a6);
  *(_QWORD *)(a6 + 16) = sub_20FD53B80(a1, (uint64_t)a2, (uint64_t)&__p, a6);
  if (__p)
  {
    v12 = __p;
    operator delete(__p);
  }
  if (v9)
  {
    v10 = v9;
    operator delete(v9);
  }
}

void sub_20FD41A94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E9AA8C8((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20FD41AA8(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  void *v9;
  _BYTE *v10;
  void *__p;
  _BYTE *v12;

  sub_20FD42400(a1, a2, a3, a4, a5, &v9);
  *(_QWORD *)(a6 + 64) = *(_QWORD *)(a6 + 56);
  *(_QWORD *)(a6 + 88) = *(_QWORD *)(a6 + 80);
  *(_QWORD *)(a6 + 168) = *(_QWORD *)(a6 + 160);
  *(_BYTE *)(a6 + 184) = 0;
  *(_QWORD *)(a6 + 16) = 0;
  *(_QWORD *)(a6 + 32) = 0;
  if (*(_BYTE *)(a6 + 48))
    *(_BYTE *)(a6 + 48) = 0;
  sub_20EDD53A4((_QWORD *)a6, 0xAAAAAAAAAAAAAAABLL * ((v10 - (_BYTE *)v9) >> 4) - 0x5555555555555555 * ((v12 - (_BYTE *)__p) >> 4));
  sub_20FD53EAC(a1, a2, (uint64_t)&v9, a6);
  *(_QWORD *)(a6 + 16) = sub_20FD53EAC(a1, a2, (uint64_t)&__p, a6);
  if (__p)
  {
    v12 = __p;
    operator delete(__p);
  }
  if (v9)
  {
    v10 = v9;
    operator delete(v9);
  }
}

void sub_20FD41B94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E9AA8C8((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20FD41BA8(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  void *v8;
  uint64_t v9;
  void *__p[2];
  uint64_t v11;
  void *v12;
  void *v13;

  if (*(_BYTE *)(a1 + 252)
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/FeatureDetection/src/DoGAndFREAKGenerator.cpp", 223, (uint64_t)"!config_.enable_swproxy_hw_desgen", 33, (uint64_t)"Swproxy hw desgen is not supported in this flow.", 48, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  if (*(_BYTE *)(a1 + 76))
  {
    if (*(_BYTE *)(a1 + 248))
      sub_20FD41CC0(a1, *(uint64_t **)(a1 + 40), *(_QWORD **)(a1 + 24), a2, a3, __p);
    else
      sub_20FD42060(a1, *(uint64_t **)(a1 + 32), *(_QWORD **)(a1 + 24), a2, a3, __p);
  }
  else
  {
    sub_20FD42400(a1, *(_QWORD *)(a1 + 16), *(_QWORD **)(a1 + 8), a2, a3, __p);
  }
  v9 = v11;
  v8 = v12;
  *(_OWORD *)a4 = *(_OWORD *)__p;
  a4[2] = v9;
  __p[1] = 0;
  v11 = 0;
  __p[0] = 0;
  if (v8)
  {
    v13 = v8;
    operator delete(v8);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
  }
}

uint64_t sub_20FD41CC0@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, _QWORD *a6@<X8>)
{
  float32x4_t v12;
  __n128 v13;
  __n128 v14;
  __n128 v15;
  __n128 v16;
  __n128 v17;
  double v18;
  double v19;
  __n128 v20;
  _BYTE *v21;
  _BYTE *v22;
  int64_t v23;
  void *v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t result;
  _BYTE *v35;
  _BYTE *v36;
  int64_t v37;
  char *v38;
  char *v39;
  __int128 v40;
  unint64_t v41;

  if (!a2
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/FeatureDetection/include/VIO/FeatureDetection/DoGAndFREAKGenerator.hpp", 9201, (uint64_t)"pyramid_builder", 15, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0)|| !a3&& sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/FeatureDetection/include/VIO/FeatureDetection/DoGAndFREAKGenerator.hpp", 9202, (uint64_t)"dog_detector", 12, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  kdebug_trace();
  (*(void (**)(uint64_t *, uint64_t))(*a2 + 8))(a2, a4);
  kdebug_trace();
  kdebug_trace();
  sub_20FD6CB04((uint64_t)a3, a2[10], a2[11], a5, v12, v13, v14, v15, v16, v17, v18, v19);
  v40 = 0uLL;
  v41 = 0;
  v22 = (_BYTE *)a3[11];
  v21 = (_BYTE *)a3[12];
  v23 = v21 - v22;
  if (v21 == v22)
  {
    v24 = 0;
    v25 = 0;
    if (!*(_BYTE *)(a1 + 201))
      goto LABEL_15;
    goto LABEL_10;
  }
  if (0xAAAAAAAAAAAAAAABLL * (v23 >> 4) > 0x555555555555555)
    sub_20E867F44();
  v24 = operator new(v23);
  v25 = (unint64_t)v24 + 16 * (v23 >> 4);
  *(_QWORD *)&v40 = v24;
  v41 = v25;
  memcpy(v24, v22, v23);
  *((_QWORD *)&v40 + 1) = v25;
  if (*(_BYTE *)(a1 + 201))
  {
LABEL_10:
    v26 = *(_QWORD *)(a1 + 192);
    v27 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v25 - (_QWORD)v24) >> 4);
    if (v27 > v26)
    {
      v28 = 126 - 2 * __clz(v27);
      if ((void *)v25 == v24)
        v29 = 0;
      else
        v29 = v28;
      v20.n128_f64[0] = sub_20FD65168((uint64_t)v24, v25, v29, 1, v20);
      v25 = (unint64_t)v24 + 48 * v26;
      *((_QWORD *)&v40 + 1) = v25;
    }
  }
LABEL_15:
  if (*(_BYTE *)(a1 + 248))
  {
    if (*(_QWORD *)(a1 + 80) == 640 && *(_QWORD *)(a1 + 88) == 480)
    {
      v30 = *(_QWORD *)(a1 + 112);
      v31 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v25 - (_QWORD)v24) >> 4);
      if (v31 > v30)
      {
        v32 = 126 - 2 * __clz(v31);
        if ((void *)v25 == v24)
          v33 = 0;
        else
          v33 = v32;
        sub_20FD65168((uint64_t)v24, v25, v33, 1, v20);
        v24 = (void *)v40;
        if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)&v40 + 1) - v40) >> 4) <= v30)
          v25 = *((_QWORD *)&v40 + 1);
        else
          v25 = v40 + 48 * v30;
      }
    }
  }
  result = kdebug_trace();
  *a6 = v24;
  a6[1] = v25;
  a6[3] = 0;
  a6[2] = v41;
  a6[4] = 0;
  a6[5] = 0;
  v36 = (_BYTE *)a3[14];
  v35 = (_BYTE *)a3[15];
  v37 = v35 - v36;
  if (v35 != v36)
  {
    if (0xAAAAAAAAAAAAAAABLL * (v37 >> 4) > 0x555555555555555)
      sub_20E867F44();
    v38 = (char *)operator new(v37);
    a6[3] = v38;
    v39 = &v38[16 * (v37 >> 4)];
    a6[5] = v39;
    result = (uint64_t)memcpy(v38, v36, v37);
    a6[4] = v39;
  }
  return result;
}

void sub_20FD42008(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E8E69C4((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20FD42020(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  uint64_t v10;
  void **v11;
  void *v13;
  void *v14;

  v13 = *v11;
  if (*v11)
  {
    *(_QWORD *)(v10 + 32) = v13;
    operator delete(v13);
  }
  v14 = *(void **)v10;
  if (*(_QWORD *)v10)
  {
    *(_QWORD *)(v10 + 8) = v14;
    operator delete(v14);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20FD42060@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, _QWORD *a6@<X8>)
{
  float32x4_t v12;
  __n128 v13;
  __n128 v14;
  __n128 v15;
  __n128 v16;
  __n128 v17;
  double v18;
  double v19;
  __n128 v20;
  _BYTE *v21;
  _BYTE *v22;
  int64_t v23;
  void *v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t result;
  _BYTE *v35;
  _BYTE *v36;
  int64_t v37;
  char *v38;
  char *v39;
  __int128 v40;
  unint64_t v41;

  if (!a2
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/FeatureDetection/include/VIO/FeatureDetection/DoGAndFREAKGenerator.hpp", 9201, (uint64_t)"pyramid_builder", 15, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0)|| !a3&& sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/FeatureDetection/include/VIO/FeatureDetection/DoGAndFREAKGenerator.hpp", 9202, (uint64_t)"dog_detector", 12, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  kdebug_trace();
  (*(void (**)(uint64_t *, uint64_t))(*a2 + 8))(a2, a4);
  kdebug_trace();
  kdebug_trace();
  sub_20FD6CB04((uint64_t)a3, a2[10], a2[11], a5, v12, v13, v14, v15, v16, v17, v18, v19);
  v40 = 0uLL;
  v41 = 0;
  v22 = (_BYTE *)a3[11];
  v21 = (_BYTE *)a3[12];
  v23 = v21 - v22;
  if (v21 == v22)
  {
    v24 = 0;
    v25 = 0;
    if (!*(_BYTE *)(a1 + 201))
      goto LABEL_15;
    goto LABEL_10;
  }
  if (0xAAAAAAAAAAAAAAABLL * (v23 >> 4) > 0x555555555555555)
    sub_20E867F44();
  v24 = operator new(v23);
  v25 = (unint64_t)v24 + 16 * (v23 >> 4);
  *(_QWORD *)&v40 = v24;
  v41 = v25;
  memcpy(v24, v22, v23);
  *((_QWORD *)&v40 + 1) = v25;
  if (*(_BYTE *)(a1 + 201))
  {
LABEL_10:
    v26 = *(_QWORD *)(a1 + 192);
    v27 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v25 - (_QWORD)v24) >> 4);
    if (v27 > v26)
    {
      v28 = 126 - 2 * __clz(v27);
      if ((void *)v25 == v24)
        v29 = 0;
      else
        v29 = v28;
      v20.n128_f64[0] = sub_20FD65168((uint64_t)v24, v25, v29, 1, v20);
      v25 = (unint64_t)v24 + 48 * v26;
      *((_QWORD *)&v40 + 1) = v25;
    }
  }
LABEL_15:
  if (*(_BYTE *)(a1 + 248))
  {
    if (*(_QWORD *)(a1 + 80) == 640 && *(_QWORD *)(a1 + 88) == 480)
    {
      v30 = *(_QWORD *)(a1 + 112);
      v31 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v25 - (_QWORD)v24) >> 4);
      if (v31 > v30)
      {
        v32 = 126 - 2 * __clz(v31);
        if ((void *)v25 == v24)
          v33 = 0;
        else
          v33 = v32;
        sub_20FD65168((uint64_t)v24, v25, v33, 1, v20);
        v24 = (void *)v40;
        if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)&v40 + 1) - v40) >> 4) <= v30)
          v25 = *((_QWORD *)&v40 + 1);
        else
          v25 = v40 + 48 * v30;
      }
    }
  }
  result = kdebug_trace();
  *a6 = v24;
  a6[1] = v25;
  a6[3] = 0;
  a6[2] = v41;
  a6[4] = 0;
  a6[5] = 0;
  v36 = (_BYTE *)a3[14];
  v35 = (_BYTE *)a3[15];
  v37 = v35 - v36;
  if (v35 != v36)
  {
    if (0xAAAAAAAAAAAAAAABLL * (v37 >> 4) > 0x555555555555555)
      sub_20E867F44();
    v38 = (char *)operator new(v37);
    a6[3] = v38;
    v39 = &v38[16 * (v37 >> 4)];
    a6[5] = v39;
    result = (uint64_t)memcpy(v38, v36, v37);
    a6[4] = v39;
  }
  return result;
}

void sub_20FD423A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E8E69C4((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20FD423C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  uint64_t v10;
  void **v11;
  void *v13;
  void *v14;

  v13 = *v11;
  if (*v11)
  {
    *(_QWORD *)(v10 + 32) = v13;
    operator delete(v13);
  }
  v14 = *(void **)v10;
  if (*(_QWORD *)v10)
  {
    *(_QWORD *)(v10 + 8) = v14;
    operator delete(v14);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20FD42400@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, _QWORD *a6@<X8>)
{
  __n128 v12;
  _BYTE *v13;
  _BYTE *v14;
  int64_t v15;
  void *v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t result;
  _BYTE *v27;
  _BYTE *v28;
  int64_t v29;
  char *v30;
  char *v31;
  __int128 v32;
  unint64_t v33;

  if (!a2
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/FeatureDetection/include/VIO/FeatureDetection/DoGAndFREAKGenerator.hpp", 9201, (uint64_t)"pyramid_builder", 15, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0)|| !a3&& sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/FeatureDetection/include/VIO/FeatureDetection/DoGAndFREAKGenerator.hpp", 9202, (uint64_t)"dog_detector", 12, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  kdebug_trace();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 8))(a2, a4);
  kdebug_trace();
  kdebug_trace();
  sub_20FD6702C((uint64_t)a3, *(_QWORD *)(a2 + 80), *(_QWORD **)(a2 + 88), a5);
  v32 = 0uLL;
  v33 = 0;
  v14 = (_BYTE *)a3[11];
  v13 = (_BYTE *)a3[12];
  v15 = v13 - v14;
  if (v13 == v14)
  {
    v16 = 0;
    v17 = 0;
    if (!*(_BYTE *)(a1 + 201))
      goto LABEL_15;
    goto LABEL_10;
  }
  if (0xAAAAAAAAAAAAAAABLL * (v15 >> 4) > 0x555555555555555)
    sub_20E867F44();
  v16 = operator new(v15);
  v17 = (unint64_t)v16 + 16 * (v15 >> 4);
  *(_QWORD *)&v32 = v16;
  v33 = v17;
  memcpy(v16, v14, v15);
  *((_QWORD *)&v32 + 1) = v17;
  if (*(_BYTE *)(a1 + 201))
  {
LABEL_10:
    v18 = *(_QWORD *)(a1 + 192);
    v19 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v17 - (_QWORD)v16) >> 4);
    if (v19 > v18)
    {
      v20 = 126 - 2 * __clz(v19);
      if ((void *)v17 == v16)
        v21 = 0;
      else
        v21 = v20;
      v12.n128_f64[0] = sub_20FD65168((uint64_t)v16, v17, v21, 1, v12);
      v17 = (unint64_t)v16 + 48 * v18;
      *((_QWORD *)&v32 + 1) = v17;
    }
  }
LABEL_15:
  if (*(_BYTE *)(a1 + 248))
  {
    if (*(_QWORD *)(a1 + 80) == 640 && *(_QWORD *)(a1 + 88) == 480)
    {
      v22 = *(_QWORD *)(a1 + 112);
      v23 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v17 - (_QWORD)v16) >> 4);
      if (v23 > v22)
      {
        v24 = 126 - 2 * __clz(v23);
        if ((void *)v17 == v16)
          v25 = 0;
        else
          v25 = v24;
        sub_20FD65168((uint64_t)v16, v17, v25, 1, v12);
        v16 = (void *)v32;
        if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)&v32 + 1) - v32) >> 4) <= v22)
          v17 = *((_QWORD *)&v32 + 1);
        else
          v17 = v32 + 48 * v22;
      }
    }
  }
  result = kdebug_trace();
  *a6 = v16;
  a6[1] = v17;
  a6[3] = 0;
  a6[2] = v33;
  a6[4] = 0;
  a6[5] = 0;
  v28 = (_BYTE *)a3[14];
  v27 = (_BYTE *)a3[15];
  v29 = v27 - v28;
  if (v27 != v28)
  {
    if (0xAAAAAAAAAAAAAAABLL * (v29 >> 4) > 0x555555555555555)
      sub_20E867F44();
    v30 = (char *)operator new(v29);
    a6[3] = v30;
    v31 = &v30[16 * (v29 >> 4)];
    a6[5] = v31;
    result = (uint64_t)memcpy(v30, v28, v29);
    a6[4] = v31;
  }
  return result;
}

void sub_20FD42748(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E8E69C4((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20FD42760(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  uint64_t v10;
  void **v11;
  void *v13;
  void *v14;

  v13 = *v11;
  if (*v11)
  {
    *(_QWORD *)(v10 + 32) = v13;
    operator delete(v13);
  }
  v14 = *(void **)v10;
  if (*(_QWORD *)v10)
  {
    *(_QWORD *)(v10 + 8) = v14;
    operator delete(v14);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20FD427A0(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;

  if (*(_BYTE *)(a1 + 252)
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/FeatureDetection/src/DoGAndFREAKGenerator.cpp", 248, (uint64_t)"!config_.enable_swproxy_hw_desgen", 33, (uint64_t)"Swproxy hw desgen is not supported in this flow.", 48, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  if (*(_BYTE *)(a1 + 76))
  {
    v6 = *(_QWORD *)(a3 + 56);
    if (*(_BYTE *)(a1 + 248))
    {
      v7 = *(_QWORD *)(a1 + 40);
      *(_QWORD *)(a3 + 64) = v6;
      *(_QWORD *)(a3 + 88) = *(_QWORD *)(a3 + 80);
      *(_QWORD *)(a3 + 168) = *(_QWORD *)(a3 + 160);
      *(_BYTE *)(a3 + 184) = 0;
      *(_QWORD *)(a3 + 16) = 0;
      *(_QWORD *)(a3 + 32) = 0;
      if (*(_BYTE *)(a3 + 48))
        *(_BYTE *)(a3 + 48) = 0;
      sub_20EDD53A4((_QWORD *)a3, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a2[1] - *a2) >> 4));
      return sub_20FD42B20(a1, v7, (uint64_t)a2, a3);
    }
    else
    {
      v10 = *(_QWORD *)(a1 + 32);
      *(_QWORD *)(a3 + 64) = v6;
      *(_QWORD *)(a3 + 88) = *(_QWORD *)(a3 + 80);
      *(_QWORD *)(a3 + 168) = *(_QWORD *)(a3 + 160);
      *(_BYTE *)(a3 + 184) = 0;
      *(_QWORD *)(a3 + 16) = 0;
      *(_QWORD *)(a3 + 32) = 0;
      if (*(_BYTE *)(a3 + 48))
        *(_BYTE *)(a3 + 48) = 0;
      sub_20EDD53A4((_QWORD *)a3, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a2[1] - *a2) >> 4));
      return sub_20FD53B80(a1, v10, (uint64_t)a2, a3);
    }
  }
  else
  {
    v9 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a3 + 64) = *(_QWORD *)(a3 + 56);
    *(_QWORD *)(a3 + 88) = *(_QWORD *)(a3 + 80);
    *(_QWORD *)(a3 + 168) = *(_QWORD *)(a3 + 160);
    *(_BYTE *)(a3 + 184) = 0;
    *(_QWORD *)(a3 + 16) = 0;
    *(_QWORD *)(a3 + 32) = 0;
    if (*(_BYTE *)(a3 + 48))
      *(_BYTE *)(a3 + 48) = 0;
    sub_20EDD53A4((_QWORD *)a3, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a2[1] - *a2) >> 4));
    return sub_20FD53EAC(a1, v9, (uint64_t)a2, a3);
  }
}

void sub_20FD42964(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    sub_20FD42964(a1, *a2);
    sub_20FD42964(a1, a2[1]);
    sub_20F89E908((uint64_t)(a2 + 5));
    operator delete(a2);
  }
}

uint64_t sub_20FD429AC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;

  sub_20FD42A94(*(_QWORD **)(a1 + 200));
  v2 = *(_QWORD *)(a1 + 168);
  if (v2)
  {
    v3 = *(_QWORD *)(a1 + 176);
    v4 = *(void **)(a1 + 168);
    if (v3 != v2)
    {
      v5 = *(_QWORD *)(a1 + 176);
      do
      {
        v7 = *(void **)(v5 - 24);
        v5 -= 24;
        v6 = v7;
        if (v7)
        {
          *(_QWORD *)(v3 - 16) = v6;
          operator delete(v6);
        }
        v3 = v5;
      }
      while (v5 != v2);
      v4 = *(void **)(a1 + 168);
    }
    *(_QWORD *)(a1 + 176) = v2;
    operator delete(v4);
  }
  v8 = *(_QWORD *)(a1 + 144);
  if (v8)
  {
    v9 = *(_QWORD *)(a1 + 152);
    v10 = *(void **)(a1 + 144);
    if (v9 != v8)
    {
      v11 = *(_QWORD *)(a1 + 152);
      do
      {
        v13 = *(void **)(v11 - 24);
        v11 -= 24;
        v12 = v13;
        if (v13)
        {
          *(_QWORD *)(v9 - 16) = v12;
          operator delete(v12);
        }
        v9 = v11;
      }
      while (v11 != v8);
      v10 = *(void **)(a1 + 144);
    }
    *(_QWORD *)(a1 + 152) = v8;
    operator delete(v10);
  }
  v14 = *(void **)(a1 + 112);
  if (v14)
  {
    *(_QWORD *)(a1 + 120) = v14;
    operator delete(v14);
  }
  v15 = *(void **)(a1 + 88);
  if (v15)
  {
    *(_QWORD *)(a1 + 96) = v15;
    operator delete(v15);
  }
  return a1;
}

void sub_20FD42A94(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  void *v7;

  if (a1)
  {
    sub_20FD42A94(*a1);
    sub_20FD42A94(a1[1]);
    v2 = a1[5];
    if (v2)
    {
      v3 = a1[6];
      v4 = (void *)a1[5];
      if (v3 != v2)
      {
        v5 = a1[6];
        do
        {
          v7 = *(void **)(v5 - 24);
          v5 -= 24;
          v6 = v7;
          if (v7)
          {
            *(_QWORD *)(v3 - 16) = v6;
            operator delete(v6);
          }
          v3 = v5;
        }
        while (v5 != v2);
        v4 = (void *)a1[5];
      }
      a1[6] = v2;
      operator delete(v4);
    }
    operator delete(a1);
  }
}

uint64_t sub_20FD42B20(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v8;
  float32x2_t *v9;
  uint64_t v10;
  float32x2_t *v11;
  float32x2_t *v12;
  uint64_t v13;
  float32x2_t *v14;
  float32x2_t *v15;
  uint64_t v16;
  float *v18;
  float *v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;

  v22 = *MEMORY[0x24BDAC8D0];
  if (!a2
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/FeatureDetection/include/VIO/FeatureDetection/DoGAndFREAKGenerator.hpp", 9259, (uint64_t)"pyramid_builder", 15, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  if (*(_BYTE *)(a1 + 64))
  {
    kdebug_trace();
    v8 = *(_DWORD *)(a1 + 204);
    if (v8 == 1)
    {
      v10 = *(_QWORD *)(a2 + 80);
      if (*(_BYTE *)(a1 + 209))
      {
        if (*(_BYTE *)(a1 + 208))
        {
          LODWORD(v20) = 1191181824;
          v11 = *(float32x2_t **)a3;
          v12 = *(float32x2_t **)(a3 + 8);
          if (*(float32x2_t **)a3 != v12)
          {
            do
            {
              sub_20FD4D668(&v11[5], &v20, v10, v11[2].f32[0], v11[2].f32[1], v11[1].f32[1]);
              v11 += 6;
            }
            while (v11 != v12);
          }
        }
        else
        {
          LODWORD(v20) = 1191181824;
          v18 = *(float **)a3;
          v19 = *(float **)(a3 + 8);
          if (*(float **)a3 != v19)
          {
            do
            {
              sub_20FD507F0(v18 + 10, &v20, v10, v18[4], v18[5], v18[3]);
              v18 += 12;
            }
            while (v18 != v19);
          }
        }
      }
      else
      {
        sub_20FD43304(*(float32x2_t **)a3, *(float32x2_t **)(a3 + 8), *(_QWORD *)(a2 + 80), *(unsigned __int8 *)(a1 + 208) != 0);
      }
    }
    else if (!v8)
    {
      sub_20FD42E4C((void **)&v20, (int8x16_t **)a3, *(unint64_t **)(a1 + 56), *(_QWORD *)(a2 + 80));
      v9 = *(float32x2_t **)a3;
      if (*(_QWORD *)a3)
      {
        *(_QWORD *)(a3 + 8) = v9;
        operator delete(v9);
      }
      *(_OWORD *)a3 = v20;
      *(_QWORD *)(a3 + 16) = v21;
    }
    kdebug_trace();
  }
  kdebug_trace();
  v13 = *(_QWORD *)(a1 + 312) - *(_QWORD *)(a1 + 304);
  if (v13
    && v13 != 2048
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/FeatureDetection/include/VIO/FeatureDetection/DoGAndFREAKGenerator.hpp", 9286, (uint64_t)"(config_.permutation_matrix.empty() || config_.permutation_matrix.size() == kBitsPerFreakDescriptor)", 100, (uint64_t)"Permutation matrix file size mismatch", 37, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v14 = *(float32x2_t **)a3;
  v15 = *(float32x2_t **)(a3 + 8);
  if (*(float32x2_t **)a3 == v15)
  {
    v16 = 0;
  }
  else
  {
    v16 = 0;
    do
    {
      if (*(_QWORD *)(a1 + 192) <= (unint64_t)((uint64_t)(*(_QWORD *)(a4 + 64) - *(_QWORD *)(a4 + 56)) >> 5))
        break;
      sub_20FD475B8((uint64_t)&v20, *(_QWORD *)(a2 + 80), v14[2].f32[0], v14[2].f32[1], v14[5].f32[0], v14[1].f32[1]);
      sub_20EDBB530(a4, v14[3].i8[4], &v20, v14[2].f32[0], v14[2].f32[1], v14[5].f32[0], v14[1].f32[1], v14[5].f32[1]);
      ++v16;
      v14 += 6;
    }
    while (v14 != v15);
  }
  kdebug_trace();
  return v16;
}

void sub_20FD42E28(_Unwind_Exception *a1, int a2)
{
  if (a2)
    sub_20E860DA4(a1);
  _Unwind_Resume(a1);
}

void sub_20FD42E4C(void **a1, int8x16_t **a2, unint64_t *a3, uint64_t a4)
{
  uint64_t v5;
  unint64_t v8;
  char *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t i;
  unint64_t j;
  uint64_t v14;
  float *v15;
  uint64_t v16;
  unsigned __int8 *v17;
  int v18;
  int v19;
  int v20;
  int8x16_t *v21;
  unint64_t v22;
  char *v23;
  int8x16_t v24;
  double v25;
  float v26;
  float v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  uint64_t v34;
  int8x16_t *v35;
  int8x16_t v36;
  int8x16_t v37;
  __int32 v38;
  __int32 v39;
  unint64_t v40;
  char *v41;
  int8x16_t *v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  char *v47;
  char *v48;
  int8x16_t *v49;
  int8x16_t v50;
  char *v51;
  int8x16_t *v52;
  uint64_t v53;
  __int128 *v54;
  int8x16_t v55;
  int8x16_t v56;
  uint64_t v57;
  int v58;
  char *v59;
  char *v60;
  char *v61;

  v5 = (uint64_t)a3;
  v8 = *a3;
  v60 = 0;
  v61 = 0;
  v59 = 0;
  if (!v8)
  {
    v9 = 0;
    v10 = *(_QWORD *)(a4 + 24);
    if (!v10)
      goto LABEL_16;
    goto LABEL_6;
  }
  if (v8 >> 62)
    sub_20E867F44();
  v9 = (char *)operator new(4 * v8);
  v59 = v9;
  v61 = &v9[4 * v8];
  bzero(v9, 4 * v8);
  v60 = v61;
  v10 = *(_QWORD *)(a4 + 24);
  if (v10)
  {
LABEL_6:
    v11 = *(_QWORD *)(a4 + 32);
    if (v11)
    {
      for (i = 0; i < v10; ++i)
      {
        if (v11)
        {
          for (j = 0; j < v11; ++j)
          {
            v14 = *(_QWORD *)(v5 + 96) + 144 * (j + i * *(_QWORD *)(v5 + 72));
            v15 = *(float **)(v14 + 88);
            v16 = *(_QWORD *)(a4 + 56) + 144 * (j + i * v11);
            v17 = *(unsigned __int8 **)(v16 + 88);
            v18 = *(_DWORD *)(v16 + 40);
            v19 = *(_DWORD *)(v14 + 32);
            v20 = *(_DWORD *)(v14 + 48);
            if (v19 < 10)
              sub_210117218(v15, v17, v18, v19, v20);
            else
              sub_210116BFC(v15, v17, v18, v19, v20);
            v11 = *(_QWORD *)(a4 + 32);
          }
          v10 = *(_QWORD *)(a4 + 24);
        }
      }
    }
  }
LABEL_16:
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v21 = *a2;
  v54 = (__int128 *)a2[1];
  if (v54 != (__int128 *)*a2)
  {
    v22 = 0x5555555555555556 * (((char *)v54 - (char *)*a2) >> 4);
    if (v22 > 0x555555555555555)
      sub_20E867F44();
    v23 = (char *)operator new(32 * (((char *)v54 - (char *)*a2) >> 4));
    *a1 = v23;
    a1[1] = v23;
    a1[2] = &v23[48 * v22];
    v53 = v5;
    do
    {
      v24.i32[0] = v21->i32[3];
      v26 = *(float *)(a4 + 108);
      v27 = (float)((float)((float)((float)((float)((float)(COERCE_FLOAT(v24.i32[0] & 0x807FFFFF | 0x3F800000) * -0.33333)
                                                  + 2.0)
                                          * COERCE_FLOAT(v24.i32[0] & 0x807FFFFF | 0x3F800000))
                                  + -1.6667)
                          + (float)(((unsigned __int32)v24.i32[0] >> 23) - 127))
                  * 0.69315)
          - *(float *)(a4 + 112);
      v58 = 0;
      v28 = vcvtps_s32_f32((float)(v26 * v27) + -0.000001);
      if (v28 < 0)
      {
        v31 = 0;
        v32 = 0;
      }
      else
      {
        v29 = *(_DWORD *)(a4 + 24);
        v30 = *(_DWORD *)(a4 + 32);
        if (v30 * v29 <= v28)
        {
          v31 = v29 - 1;
          v32 = v30 - 1;
        }
        else
        {
          v31 = v28 / v30;
          v32 = v28 % v30;
        }
      }
      *(float *)&v25 = 1.0 / (float)(1 << v31);
      *(float *)v24.i32 = *(float *)v24.i32 * *(float *)&v25;
      sub_20FD87CE4(v5, (uint64_t)v9, &v58, v31, v32, *(float *)v21->i32 * *(float *)&v25, *(float *)&v21->i32[1] * *(float *)&v25, v24, v25);
      v33 = v58;
      if (v58 >= 1)
      {
        v34 = 0;
        v35 = (int8x16_t *)a1[1];
        do
        {
          while (1)
          {
            v55 = *v21;
            v56 = v21[1];
            v57 = v21[2].i64[0];
            v38 = v21[2].i32[3];
            v39 = *(_DWORD *)&v9[4 * v34];
            v40 = (unint64_t)a1[2];
            if ((unint64_t)v35 >= v40)
              break;
            v36 = *v21;
            v37 = v21[1];
            v35[2].i64[0] = v21[2].i64[0];
            *v35 = v36;
            v35[1] = v37;
            v35[2].i32[2] = v39;
            v35[2].i32[3] = v38;
            a1[1] = &v35[3];
            ++v34;
            v35 += 3;
            if (v34 >= v33)
              goto LABEL_19;
          }
          v41 = v9;
          v42 = (int8x16_t *)*a1;
          v43 = 0xAAAAAAAAAAAAAAABLL * (((char *)v35 - (_BYTE *)*a1) >> 4);
          v44 = v43 + 1;
          if (v43 + 1 > 0x555555555555555)
            sub_20E867F44();
          v45 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v40 - (_QWORD)v42) >> 4);
          if (2 * v45 > v44)
            v44 = 2 * v45;
          if (v45 >= 0x2AAAAAAAAAAAAAALL)
            v46 = 0x555555555555555;
          else
            v46 = v44;
          if (v46)
          {
            if (v46 > 0x555555555555555)
              sub_20E877A38();
            v47 = (char *)operator new(48 * v46);
          }
          else
          {
            v47 = 0;
          }
          v48 = &v47[48 * v43];
          *(int8x16_t *)v48 = v55;
          *((int8x16_t *)v48 + 1) = v56;
          *((_QWORD *)v48 + 4) = v57;
          *((_DWORD *)v48 + 10) = v39;
          *((_DWORD *)v48 + 11) = v38;
          v49 = (int8x16_t *)v48;
          v9 = v41;
          if (v35 != v42)
          {
            do
            {
              v50 = v35[-3];
              v24 = v35[-1];
              v49[-2] = v35[-2];
              v49[-1] = v24;
              v49[-3] = v50;
              v49 -= 3;
              v35 -= 3;
            }
            while (v35 != v42);
            v35 = v42;
          }
          v51 = &v47[48 * v46];
          v52 = (int8x16_t *)(v48 + 48);
          *a1 = v49;
          a1[1] = v48 + 48;
          a1[2] = v51;
          if (v35)
          {
            operator delete(v35);
            v33 = v58;
          }
          a1[1] = v52;
          ++v34;
          v35 = v52;
        }
        while (v34 < v33);
LABEL_19:
        v5 = v53;
      }
      v21 += 3;
    }
    while (v21 != (int8x16_t *)v54);
  }
  if (v9)
    operator delete(v9);
}

void sub_20FD432A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  uint64_t v19;
  void *v20;
  void *v22;

  v22 = *(void **)v19;
  if (*(_QWORD *)v19)
  {
    *(_QWORD *)(v19 + 8) = v22;
    operator delete(v22);
  }
  if (v20)
    operator delete(v20);
  _Unwind_Resume(exception_object);
}

unint64_t sub_20FD43304(float32x2_t *a1, float32x2_t *a2, uint64_t a3, int a4)
{
  unint64_t result;
  float v7;
  float32x4_t v8;
  float32x4_t v9;
  float32x4_t v10;
  float32x4_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  float v16;
  float32x2_t v17;
  float32x4_t v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float32x2_t v27;
  float v28;
  float v29;
  float v30;
  int v31;
  int v32;
  int v33;
  float v34;
  float v35;
  _QWORD *v36;
  uint64_t v37;
  uint64x2_t v38;
  float32x2_t v39;
  float32x2_t v40;
  uint64_t v41;
  uint64_t v42;
  uint32x2_t v43;
  float32x2_t v44;
  float32x2_t v45;
  uint64_t v46;
  uint64_t v47;
  float32x4_t v48;
  int v49;
  int v50;
  float v51;
  _QWORD *v52;
  float v53;
  uint64x2_t v54;
  float32x4_t v55;
  float32x4_t v56;
  float32x2_t v57;
  float32x2_t v58;
  uint64_t v59;
  unsigned __int32 v60;
  uint64_t v61;
  float32x4_t v62;
  float32x4_t v63;
  float32x4_t v64;
  int32x4_t v65;
  uint64_t v66;
  uint64_t v67;
  unsigned __int8 *v68;
  int32x4_t v69;
  uint32x4_t v70;
  uint64_t v71;
  unsigned __int8 *v72;
  uint64_t v73;
  unsigned __int8 *v74;
  float32x2_t v75;
  float32x2_t v76;
  int32x2_t v77;
  uint64_t v78;
  float32x4_t v79;
  float32x4_t v80;
  uint64_t v81;
  unsigned __int8 *v82;
  uint64_t v83;
  float32x2_t v84;
  float32x4_t v85;
  float32x4_t v86;
  float32x2_t v87;
  int32x4_t v88;
  float32x4_t v89;
  float v90;
  float v91;
  float32x4_t v92;
  float32x4_t v93;
  float32x4_t v94;
  float32x4_t v95;
  uint64_t v96;
  float32x4_t v97;
  float32x4_t v98;
  float32x4_t v99;
  float32x4_t v100;
  float v101;
  float v102;
  uint64_t v103;
  uint64_t v104;
  float v105;
  float v106;
  unsigned int v107;
  float v108;
  float v109;
  float v110;
  float v111;
  unsigned int v112;
  unsigned int v113;
  float v114;
  float v115;
  float v116;
  int v117;
  int v118;
  int v119;
  float v120;
  float v121;
  float v122;
  float v123;
  _QWORD *v124;
  uint64_t v125;
  unint64_t v126;
  uint64_t v127;
  unint64_t v128;
  float v129;
  float v130;
  float v131;
  float v132;
  float v133;
  float v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  unsigned int v138;
  uint64_t v139;
  float v140;
  float v141;
  float v142;
  float v143;
  unsigned int v144;
  float v145;
  unsigned int v146;
  float v147;
  float v148;
  float v149;
  float v150;
  float v151;
  float v152;
  float v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  float v159;
  float v160;
  unsigned int v161;
  float v162;
  float v163;
  float v164;
  float v165;
  float v166;
  unsigned int v167;
  float v168;
  float v169;
  float v170;
  uint64_t v171;
  unsigned int v172;
  uint64_t v173;
  uint64_t v174;
  float v175;
  float v176;
  unsigned int v177;
  float v178;
  unsigned int v179;
  unsigned int v180;
  float v181;
  float v182;
  float v183;
  uint64_t v184;
  unsigned int v185;
  uint64_t v186;
  float v187;
  float v188;
  unsigned int v189;
  unsigned int v190;
  float v191;
  float v192;
  unsigned int v193;
  float v194;
  float v195;
  float v196;
  uint64_t v197;
  uint64_t v198;
  float v199;
  float v200;
  unsigned int v201;
  unsigned int v202;
  unsigned int v203;
  float v204;
  unsigned int v205;
  float v206;
  unsigned int v207;
  float v208;
  unsigned int v209;
  unsigned int v210;
  float v211;
  float v212;
  float v213;
  unsigned int v214;
  int v215;
  int v216;
  int v217;
  float v218;
  _QWORD *v219;
  uint64_t v220;
  float v221;
  unsigned int v222;
  uint64x2_t v223;
  int32x2_t v224;
  float32x4_t v225;
  float32x2_t v226;
  float32x2_t v227;
  uint64_t v228;
  unsigned __int32 v229;
  float v230;
  float32x4_t v231;
  float32x4_t v232;
  uint64_t v233;
  uint64_t v234;
  unsigned __int8 *v235;
  int32x4_t v236;
  uint32x4_t v237;
  uint64_t v238;
  unsigned __int8 *v239;
  unsigned __int8 *v240;
  unsigned __int8 *v241;
  unsigned __int8 *v242;
  unsigned __int8 *v243;
  unsigned __int8 *v244;
  unsigned __int8 *v245;
  float32x2_t v246;
  float32x2_t v247;
  int32x2_t v248;
  uint64_t v249;
  uint64_t v250;
  float32x4_t v251;
  float32x4_t v252;
  unsigned __int8 *v253;
  unsigned __int8 *v254;
  float32x4_t v255;
  float32x4_t v256;
  uint64_t v257;
  float32x4_t v258;
  float32x2_t v259;
  int32x4_t v260;
  float32x4_t v261;
  float v262;
  float v263;
  float32x4_t v264;
  float v265;
  uint64_t v266;
  float32x4_t v267;
  float32x4_t v268;
  float32x4_t v269;
  float32x4_t v270;
  float v271;
  uint64_t v272;
  uint64_t v273;
  float v274;
  float v275;
  unsigned int v276;
  float v277;
  float v278;
  float v279;
  float v280;
  unsigned int v281;
  float v282;
  unsigned int v283;
  float v284;
  float v285;
  float v286;
  signed int v287;
  int v288;
  int v289;
  signed int v290;
  float v291;
  float v292;
  float v293;
  float v294;
  _QWORD *v295;
  uint64_t v296;
  uint64_t v297;
  unint64_t v298;
  unint64_t v299;
  float v300;
  float v301;
  float v302;
  float v303;
  float v304;
  float v305;
  float v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  unsigned int v310;
  uint64_t v311;
  float v312;
  float v313;
  unsigned int v314;
  float v315;
  float v316;
  float v317;
  unsigned int v318;
  float v319;
  unsigned int v320;
  float v321;
  float v322;
  float v323;
  float v324;
  float v325;
  float v326;
  float v327;
  float v328;
  float v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t v332;
  uint64_t v333;
  uint64_t v334;
  float v335;
  float v336;
  unsigned int v337;
  float v338;
  unsigned int v339;
  float v340;
  unsigned int v341;
  float v342;
  float v343;
  float v344;
  float v345;
  uint64_t v346;
  uint64_t v347;
  uint64_t v348;
  float v349;
  float v350;
  float v351;
  float v352;
  unsigned int v353;
  float v354;
  float v355;
  unsigned int v356;
  unsigned int v357;
  float v358;
  float v359;
  float v360;
  uint64_t v361;
  unsigned int v362;
  uint64_t v363;
  float v364;
  float v365;
  unsigned int v366;
  unsigned int v367;
  float v368;
  float v369;
  unsigned int v370;
  float v371;
  float v372;
  float v373;
  uint64_t v374;
  uint64_t v375;
  float v376;
  float v377;
  unsigned int v378;
  unsigned int v379;
  unsigned int v380;
  float v381;
  unsigned int v382;
  float v383;
  unsigned int v384;
  float v385;
  unsigned int v386;
  unsigned int v387;
  float v388;
  float v389;
  float v390;
  signed int v391;
  int v392;
  int v393;
  float v394;
  _QWORD *v395;
  float v396;
  unsigned int v397;
  uint64x2_t v398;
  int32x2_t v399;
  float32x4_t v400;
  float32x2_t v401;
  float32x2_t v402;
  uint64_t v403;
  unsigned __int32 v404;
  uint64_t v405;
  float32x4_t v406;
  float32x4_t v407;
  float32x4_t v408;
  int32x4_t v409;
  uint64_t v410;
  uint64_t v411;
  unsigned __int8 *v412;
  int32x4_t v413;
  uint32x4_t v414;
  uint64_t v415;
  unsigned __int8 *v416;
  uint64_t v417;
  unsigned __int8 *v418;
  float32x2_t v419;
  float32x2_t v420;
  int32x2_t v421;
  uint64_t v422;
  float32x4_t v423;
  float32x4_t v424;
  uint64_t v425;
  unsigned __int8 *v426;
  uint64_t v427;
  float32x2_t v428;
  float32x4_t v429;
  float32x4_t v430;
  float32x2_t v431;
  int32x4_t v432;
  float32x4_t v433;
  float32x4_t v434;
  uint16x4_t v435;
  float32x4_t v436;
  uint64_t v437;
  float32x4_t v438;
  float32x4_t v439;
  float v440;
  float v441;
  uint64_t v442;
  uint64_t v443;
  float v444;
  float v445;
  unsigned int v446;
  unsigned int v447;
  float v448;
  float v449;
  float v450;
  signed int v451;
  int v452;
  int v453;
  float32x2_t *v454;
  float v455;
  float v456;
  float v457;
  float v458;
  _QWORD *v459;
  uint64_t v460;
  unint64_t v461;
  uint64_t v462;
  unint64_t v463;
  float v464;
  float v465;
  float v466;
  float v467;
  float v468;
  float v469;
  float v470;
  uint64_t v471;
  uint64_t v472;
  uint64_t v473;
  unsigned int v474;
  uint64_t v475;
  float v476;
  float v477;
  unsigned int v478;
  float v479;
  float v480;
  float v481;
  unsigned int v482;
  float v483;
  unsigned int v484;
  float v485;
  float v486;
  float v487;
  float v488;
  float v489;
  float v490;
  float v491;
  float v492;
  uint64_t v493;
  uint64_t v494;
  uint64_t v495;
  uint64_t v496;
  uint64_t v497;
  float v498;
  float v499;
  float v500;
  float v501;
  unsigned int v502;
  float v503;
  unsigned int v504;
  float v505;
  unsigned int v506;
  float v507;
  float v508;
  float v509;
  float v510;
  uint64_t v511;
  uint64_t v512;
  uint64_t v513;
  float v514;
  float v515;
  float v516;
  float v517;
  unsigned int v518;
  float v519;
  unsigned int v520;
  unsigned int v521;
  float v522;
  float v523;
  float v524;
  uint64_t v525;
  unsigned int v526;
  uint64_t v527;
  float v528;
  float v529;
  unsigned int v530;
  unsigned int v531;
  float v532;
  float v533;
  unsigned int v534;
  float v535;
  float v536;
  float v537;
  uint64_t v538;
  uint64_t v539;
  float v540;
  float v541;
  unsigned int v542;
  unsigned int v543;
  unsigned int v544;
  float v545;
  unsigned int v546;
  float v547;
  unsigned int v548;
  float v549;
  unsigned int v550;
  unsigned int v551;
  float v552;
  signed int v553;
  int v554;
  int v555;
  uint64_t v556;
  float v557;
  _QWORD *v558;
  uint64_t v559;
  float v560;
  uint64x2_t v561;
  int32x2_t v562;
  float32x4_t v563;
  float32x2_t v564;
  float32x2_t v565;
  uint64_t v566;
  unsigned __int32 v567;
  float v568;
  float32x4_t v569;
  float32x4_t v570;
  int32x4_t v571;
  uint64_t v572;
  uint64_t v573;
  unsigned __int8 *v574;
  int32x4_t v575;
  uint32x4_t v576;
  uint64_t v577;
  unsigned __int8 *v578;
  float32x2_t v579;
  float32x2_t v580;
  int32x2_t v581;
  uint64_t v582;
  float32x4_t v583;
  float32x4_t v584;
  uint64_t v585;
  float32x2_t v586;
  float32x4_t v587;
  float32x2_t v588;
  int32x4_t v589;
  float32x4_t v590;
  float v591;
  float v592;
  float32x4_t v593;
  float32x4_t v594;
  float32x4_t v595;
  uint64_t v596;
  uint64_t v597;
  unsigned __int8 *v598;
  unsigned __int8 *v599;
  uint64_t v600;
  float32x4_t v601;
  float32x4_t v602;
  int v603;
  float v604;
  uint64_t v605;
  uint64_t v606;
  float v607;
  unsigned int v608;
  float v609;
  float v610;
  float v611;
  float v612;
  unsigned int v613;
  float v614;
  unsigned int v615;
  float v616;
  int32x2_t v617;
  int32x2_t v618;
  int32x2_t v619;
  int32x2_t v620;
  float32x4_t v621;
  int32x2_t v622;
  int32x2_t v623;
  float32x4_t v624;
  float32x4_t v625;
  int v626;
  uint64_t v627;
  uint64_t v628;
  signed int v629;
  int v630;
  float32x4_t v631;
  int32x4_t v632;
  float v633;
  float v634;
  float v635;
  float v636;
  float v637;
  float v638;
  float v639;
  float v640;
  float v641;
  float v642;
  float v643;
  float v644;
  signed int v645;
  int v646;
  int v647;
  float v648;
  float v649;
  float v650;
  float v651;
  _QWORD *v652;
  uint64_t v653;
  uint64_t v654;
  unint64_t v655;
  unint64_t v656;
  float v657;
  float v658;
  float v659;
  float v660;
  float v661;
  float v662;
  uint64_t v663;
  uint64_t v664;
  uint64_t v665;
  uint64_t v666;
  uint64_t v667;
  float v668;
  float v669;
  unsigned int v670;
  unsigned int v671;
  float v672;
  float v673;
  float v674;
  float v675;
  float v676;
  unsigned int v677;
  float v678;
  unsigned int v679;
  float v680;
  int v681;
  int v682;
  float v683;
  float v684;
  float v685;
  float v686;
  unint64_t *v687;
  unint64_t v688;
  unint64_t v689;
  float32x4_t v690;
  float32x4_t v691;
  float32x2_t v692;
  float32x4_t v693;
  float v694;
  float32x4_t v695;
  float32x4_t v696;
  float32x4_t v697;
  int32x4_t v698;
  unint64_t v699;
  float32x2_t v700;
  float v701;
  float32x4_t v702;
  float32x4_t v703;
  float32x4_t v704;
  float32x4_t v705;
  int32x4_t v706;
  uint32x4_t v707;
  unsigned __int8 *v708;
  unint64_t v709;
  unsigned __int8 *v710;
  unint64_t v711;
  unint64_t v712;
  float32x4_t v713;
  float32x4_t v714;
  float32x4_t v715;
  float32x4_t v716;
  float32x4_t v717;
  float32x4_t v718;
  float32x4_t v719;
  float32x4_t v720;
  float32x4_t v721;
  float32x4_t v722;
  float v723;
  float v724;
  uint64_t v725;
  uint64_t v726;
  uint64_t v727;
  unsigned int v728;
  unint64_t v729;
  float v730;
  float v731;
  float v732;
  float v733;
  float v734;
  unsigned int v735;
  unsigned int v736;
  float v737;
  float v738;
  unsigned int v739;
  float v740;
  unsigned int v741;
  float v742;
  float v743;
  float v744;
  float v745;
  float v746;
  float v747;
  float v748;
  uint64_t v749;
  uint64_t v750;
  uint64_t v751;
  unsigned int v752;
  unint64_t v753;
  float v754;
  float v755;
  float v756;
  float v757;
  float v758;
  unsigned int v759;
  unsigned int v760;
  float v761;
  float v762;
  unsigned int v763;
  float v764;
  unsigned int v765;
  float v766;
  float v767;
  float v768;
  signed int v769;
  int v770;
  int v771;
  unint64_t *v772;
  float v773;
  float v774;
  float32x2_t v775;
  float32x2_t v776;
  unsigned __int32 v777;
  float32x4_t v778;
  float32x4_t v779;
  float32x4_t v780;
  float32x4_t v781;
  int32x4_t v782;
  uint64_t v783;
  float32x4_t v784;
  unsigned __int32 v785;
  float32x4_t v786;
  float32x4_t v787;
  float32x4_t v788;
  int32x4_t v789;
  uint32x4_t v790;
  uint64_t v791;
  uint64_t v792;
  float32x4_t v793;
  float32x4_t v794;
  uint64_t v795;
  float32x4_t v796;
  float32x4_t v797;
  float32x4_t v798;
  float32x4_t v799;
  float32x4_t v800;
  float32x4_t v801;
  unint64_t v802;
  unint64_t v803;
  unint64_t v804;
  uint64_t v805;
  unint64_t v806;
  uint64_t v807;
  unint64_t v808;
  unint64_t v809;
  unint64_t v810;
  unint64_t v811;
  unint64_t v812;
  unint64_t v813;
  float32x4_t v814;
  float32x4_t v815;
  float32x4_t v816;
  float v817;
  float v818;
  float v819;
  float v820;
  float v821;
  float v822;
  float v823;
  uint64_t v824;
  uint64_t v825;
  uint64_t v826;
  unsigned int v827;
  unint64_t v828;
  float v829;
  float v830;
  float v831;
  unsigned int v832;
  unsigned int v833;
  float v834;
  float v835;
  float v836;
  float v837;
  unsigned int v838;
  unint64_t v839;
  float v840;
  unsigned int v841;
  float v842;
  float v843;
  float v844;
  float v845;
  float v846;
  uint64_t v847;
  uint64_t v848;
  uint64_t v849;
  unsigned int v850;
  unint64_t v851;
  float v852;
  float v853;
  float v854;
  unsigned int v855;
  unsigned int v856;
  float v857;
  float v858;
  float v859;
  float v860;
  unsigned int v861;
  unint64_t v862;
  float v863;
  unsigned int v864;
  float v865;
  float v866;
  float v867;
  signed int v868;
  int v869;
  int v870;
  float v871;
  float v872;
  float v873;
  float v874;
  unint64_t *v875;
  unint64_t v876;
  unint64_t v877;
  float v878;
  float32x4_t v879;
  float32_t v880;
  float32x4_t v881;
  float32x2_t v882;
  float32x4_t v883;
  float v884;
  float32x4_t v885;
  float32x4_t v886;
  float32x4_t v887;
  int32x4_t v888;
  unint64_t v889;
  float32x2_t v890;
  float v891;
  float32x4_t v892;
  float32x4_t v893;
  float32x4_t v894;
  float32x4_t v895;
  int32x4_t v896;
  uint32x4_t v897;
  unsigned __int8 *v898;
  unint64_t v899;
  unsigned __int8 *v900;
  unint64_t v901;
  unint64_t v902;
  float32x4_t v903;
  float32x4_t v904;
  float32x4_t v905;
  float32x4_t v906;
  float32x4_t v907;
  float32x4_t v908;
  float32x4_t v909;
  float32x4_t v910;
  float32x4_t v911;
  float32x4_t v912;
  float32x4_t v913;
  float v914;
  float v915;
  float v916;
  uint64_t v917;
  uint64_t v918;
  uint64_t v919;
  unsigned int v920;
  unint64_t v921;
  float v922;
  float v923;
  float v924;
  unsigned int v925;
  float v926;
  unsigned int v927;
  float v928;
  float v929;
  float v930;
  unsigned int v931;
  float v932;
  unsigned int v933;
  float v934;
  float v935;
  float v936;
  float v937;
  float v938;
  float v939;
  float v940;
  uint64_t v941;
  uint64_t v942;
  uint64_t v943;
  unsigned int v944;
  unint64_t v945;
  float v946;
  float v947;
  float v948;
  float v949;
  float v950;
  unsigned int v951;
  unsigned int v952;
  float v953;
  float v954;
  unsigned int v955;
  float v956;
  unsigned int v957;
  float v958;
  float v959;
  float v960;
  signed int v961;
  int v962;
  int v963;
  unint64_t *v964;
  float v965;
  float v966;
  float32x2_t v967;
  float32x2_t v968;
  unsigned __int32 v969;
  float32x4_t v970;
  float32x4_t v971;
  float32x4_t v972;
  float32x4_t v973;
  int32x4_t v974;
  uint64_t v975;
  float32x4_t v976;
  unsigned __int32 v977;
  float32x4_t v978;
  float32x4_t v979;
  float32x4_t v980;
  int32x4_t v981;
  uint32x4_t v982;
  uint64_t v983;
  uint64_t v984;
  float32x4_t v985;
  float32x4_t v986;
  uint64_t v987;
  float32x4_t v988;
  float32x4_t v989;
  float32x4_t v990;
  float32x4_t v991;
  float32x4_t v992;
  float32x4_t v993;
  unint64_t v994;
  unint64_t v995;
  unint64_t v996;
  uint64_t v997;
  unint64_t v998;
  uint64_t v999;
  unint64_t v1000;
  unint64_t v1001;
  unint64_t v1002;
  unint64_t v1003;
  unint64_t v1004;
  unint64_t v1005;
  float32x4_t v1006;
  float32x4_t v1007;
  float32x4_t v1008;
  float v1009;
  float v1010;
  float v1011;
  float v1012;
  float v1013;
  float v1014;
  float v1015;
  uint64_t v1016;
  uint64_t v1017;
  uint64_t v1018;
  unsigned int v1019;
  unint64_t v1020;
  float v1021;
  float v1022;
  float v1023;
  unsigned int v1024;
  unsigned int v1025;
  float v1026;
  float v1027;
  float v1028;
  float v1029;
  unsigned int v1030;
  unint64_t v1031;
  float v1032;
  unsigned int v1033;
  float v1034;
  float v1035;
  float v1036;
  float v1037;
  float v1038;
  uint64_t v1039;
  uint64_t v1040;
  uint64_t v1041;
  unsigned int v1042;
  unint64_t v1043;
  float v1044;
  float v1045;
  float v1046;
  unsigned int v1047;
  unsigned int v1048;
  float v1049;
  float v1050;
  float v1051;
  float v1052;
  unsigned int v1053;
  unint64_t v1054;
  float v1055;
  unsigned int v1056;
  float v1057;
  float v1058;
  float v1059;
  signed int v1060;
  int v1061;
  int v1062;
  float v1063;
  float v1064;
  float v1065;
  float v1066;
  unint64_t *v1067;
  unint64_t v1068;
  unint64_t v1069;
  float v1070;
  float32x4_t v1071;
  float32_t v1072;
  float32x4_t v1073;
  float32x2_t v1074;
  float32x4_t v1075;
  float v1076;
  float32x4_t v1077;
  float32x4_t v1078;
  float32x4_t v1079;
  int32x4_t v1080;
  unint64_t v1081;
  float32x2_t v1082;
  float v1083;
  float32x4_t v1084;
  float32x4_t v1085;
  float32x4_t v1086;
  float32x4_t v1087;
  int32x4_t v1088;
  uint32x4_t v1089;
  unsigned __int8 *v1090;
  unint64_t v1091;
  unsigned __int8 *v1092;
  unint64_t v1093;
  unint64_t v1094;
  float32x4_t v1095;
  float32x4_t v1096;
  float32x4_t v1097;
  float32x4_t v1098;
  float32x4_t v1099;
  float32x4_t v1100;
  float32x4_t v1101;
  float32x4_t v1102;
  float32x4_t v1103;
  float32x4_t v1104;
  float32x4_t v1105;
  float v1106;
  float v1107;
  float v1108;
  uint64_t v1109;
  uint64_t v1110;
  uint64_t v1111;
  unsigned int v1112;
  unint64_t v1113;
  float v1114;
  float v1115;
  float v1116;
  unsigned int v1117;
  float v1118;
  unsigned int v1119;
  float v1120;
  float v1121;
  float v1122;
  unsigned int v1123;
  float v1124;
  unsigned int v1125;
  float v1126;
  float v1127;
  float v1128;
  float v1129;
  float v1130;
  float v1131;
  float v1132;
  uint64_t v1133;
  uint64_t v1134;
  uint64_t v1135;
  unsigned int v1136;
  unint64_t v1137;
  float v1138;
  float v1139;
  float v1140;
  float v1141;
  float v1142;
  unsigned int v1143;
  unsigned int v1144;
  float v1145;
  float v1146;
  unsigned int v1147;
  float v1148;
  unsigned int v1149;
  float v1150;
  float v1151;
  float v1152;
  signed int v1153;
  int v1154;
  int v1155;
  unint64_t *v1156;
  float v1157;
  float v1158;
  float32x2_t v1159;
  float32x2_t v1160;
  unsigned __int32 v1161;
  float32x4_t v1162;
  float32x4_t v1163;
  float32x4_t v1164;
  float32x4_t v1165;
  int32x4_t v1166;
  uint64_t v1167;
  float v1168;
  unsigned __int32 v1169;
  float32x4_t v1170;
  float32x4_t v1171;
  float32x4_t v1172;
  int32x4_t v1173;
  uint32x4_t v1174;
  uint64_t v1175;
  uint64_t v1176;
  float32x4_t v1177;
  float32x4_t v1178;
  uint64_t v1179;
  float32x4_t v1180;
  float32x4_t v1181;
  float32x4_t v1182;
  float32x4_t v1183;
  float32x4_t v1184;
  float32x4_t v1185;
  unint64_t v1186;
  unint64_t v1187;
  unint64_t v1188;
  uint64_t v1189;
  unint64_t v1190;
  uint64_t v1191;
  unint64_t v1192;
  unint64_t v1193;
  unint64_t v1194;
  unint64_t v1195;
  unint64_t v1196;
  unint64_t v1197;
  float32x4_t v1198;
  float32x4_t v1199;
  int16x4_t v1200;
  float v1201;
  float v1202;
  float v1203;
  float v1204;
  float v1205;
  float v1206;
  float v1207;
  uint64_t v1208;
  uint64_t v1209;
  uint64_t v1210;
  unsigned int v1211;
  unint64_t v1212;
  float v1213;
  float v1214;
  float v1215;
  unsigned int v1216;
  unsigned int v1217;
  float v1218;
  float v1219;
  float v1220;
  float v1221;
  unsigned int v1222;
  unint64_t v1223;
  float v1224;
  unsigned int v1225;
  float v1226;
  float v1227;
  float v1228;
  float v1229;
  float v1230;
  uint64_t v1231;
  uint64_t v1232;
  uint64_t v1233;
  unsigned int v1234;
  unint64_t v1235;
  float v1236;
  float v1237;
  float v1238;
  unsigned int v1239;
  unsigned int v1240;
  float v1241;
  float v1242;
  float v1243;
  float v1244;
  unsigned int v1245;
  unint64_t v1246;
  float v1247;
  unsigned int v1248;
  float v1249;
  float v1250;
  signed int v1251;
  int v1252;
  int v1253;
  uint64_t v1254;
  float v1255;
  float v1256;
  float v1257;
  float v1258;
  unint64_t *v1259;
  unint64_t v1260;
  unint64_t v1261;
  float v1262;
  float32x4_t v1263;
  float32_t v1264;
  float32x4_t v1265;
  float32x4_t v1266;
  float v1267;
  float32x4_t v1268;
  float32x4_t v1269;
  float32x4_t v1270;
  int32x4_t v1271;
  unint64_t v1272;
  float v1273;
  float32x4_t v1274;
  float32x4_t v1275;
  float32x4_t v1276;
  float32x4_t v1277;
  int32x4_t v1278;
  uint32x4_t v1279;
  unsigned __int8 *v1280;
  unsigned __int8 *v1281;
  unint64_t v1282;
  unsigned __int8 *v1283;
  unsigned __int8 *v1284;
  unint64_t v1285;
  unsigned __int8 *v1286;
  unint64_t v1287;
  float32x4_t v1288;
  float32x4_t v1289;
  float32x4_t v1290;
  uint64_t v1291;
  float32x4_t v1292;
  float v1293;
  float v1294;
  float v1295;
  uint64_t v1296;
  uint64_t v1297;
  uint64_t v1298;
  unsigned int v1299;
  unint64_t v1300;
  float v1301;
  float v1302;
  unsigned int v1303;
  unsigned int v1304;
  float v1305;
  float v1306;
  float v1307;
  float v1308;
  float v1309;
  unsigned int v1310;
  float v1311;
  unsigned int v1312;
  float v1313;
  float32x2_t v1314;
  float v1315;
  float v1316;
  float v1317;
  float v1318;
  float v1319;
  float v1320;
  uint64_t v1321;
  uint64_t v1322;
  uint64_t v1323;
  unint64_t v1324;
  float v1325;
  float v1326;
  unsigned int v1327;
  float v1328;
  float v1329;
  unsigned int v1330;
  float v1331;
  float v1332;
  float v1333;
  unsigned int v1334;
  float v1335;
  unsigned int v1336;
  float v1337;
  float32x2_t v1338;
  float32x2_t v1339;
  float v1340;
  signed int v1341;
  int v1344;
  _BYTE v1345[540];
  __int16 v1346;
  _WORD v1347[63];

  if (a4)
  {
    v1344 = 1191181824;
    result = (unint64_t)memcpy(v1345, "\b", sizeof(v1345));
    if (a1 != a2)
    {
      v12 = *(_DWORD *)(a3 + 24);
      v13 = *(_QWORD *)(a3 + 32);
      v14 = *(_QWORD *)(a3 + 56);
      LODWORD(result) = v13 * v12;
      v15 = v12 - 1;
      v16 = 2.0;
      v17 = (float32x2_t)vdup_n_s32(0xBF8020C5);
      v18 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v1341 = result;
      do
      {
        v27 = a1[2];
        v28 = a1[1].f32[1];
        memset(v1347, 0, sizeof(v1347));
        v30 = *(float *)(a3 + 108);
        v29 = *(float *)(a3 + 112);
        v31 = vcvtms_s32_f32(v30* (float)((float)((float)((float)((float)((float)((float)(COERCE_FLOAT(LODWORD(v28) & 0x807FFFFF | 0x3F800000)* -0.33333)+ v16)* COERCE_FLOAT(LODWORD(v28) & 0x807FFFFF | 0x3F800000))+ -1.6667)+ (float)((LODWORD(v28) >> 23) - 127))* 0.69315)- v29));
        if (v31 < 0)
        {
          v32 = 0;
          v33 = 0;
        }
        else
        {
          v32 = v15;
          v33 = v13 - 1;
          if ((int)result > v31)
          {
            v32 = v31 / (int)v13;
            v33 = v31 % (int)v13;
          }
        }
        v34 = v28 + v28;
        v35 = 1.0 / (float)(1 << v32);
        v36 = (_QWORD *)(v14 + 144 * (v13 * v32 + v33));
        v37 = v36[5];
        v38.i64[0] = v36[4];
        v38.i64[1] = v36[6];
        v39 = vadd_f32(vmul_n_f32(v27, v35), 0);
        v48 = (float32x4_t)vcvtq_f64_u64(v38);
        *(float32x2_t *)v48.f32 = vadd_f32(vcvt_f32_f64((float64x2_t)v48), v17);
        v40 = (float32x2_t)vbic_s8(vbsl_s8((int8x8_t)vcgt_f32(v39, *(float32x2_t *)v48.f32), *(int8x8_t *)v48.f32, (int8x8_t)v39), (int8x8_t)vcltz_f32(v39));
        *(uint32x2_t *)v48.f32 = vcvt_u32_f32(v40);
        v41 = v36[11] + v37 * v48.u32[1];
        v42 = v41 + v37;
        v43 = (uint32x2_t)vadd_s32(*(int32x2_t *)v48.f32, (int32x2_t)0x100000001);
        v44 = vsub_f32(vcvt_f32_u32(v43), v40);
        v45 = vsub_f32(v40, vcvt_f32_u32(*(uint32x2_t *)v48.f32));
        v46 = v48.u32[0];
        v48.i8[0] = *(_BYTE *)(v41 + v48.u32[0]);
        v47 = v43.u32[0];
        v43.i8[0] = *(_BYTE *)(v41 + v43.u32[0]);
        *(float *)v43.i32 = vmuls_lane_f32(v45.f32[0], v44, 1) * (float)v43.u32[0];
        v48.f32[0] = (float)(vmuls_lane_f32(v44.f32[0], v44, 1) * (float)v48.u32[0]) + *(float *)v43.i32;
        v43.i8[0] = *(_BYTE *)(v42 + v46);
        *(float *)v43.i32 = vmuls_lane_f32(v44.f32[0], v45, 1) * (float)v43.u32[0];
        v48.f32[0] = *(float *)v43.i32 + v48.f32[0];
        v43.i8[0] = *(_BYTE *)(v42 + v47);
        v1346 = (int)(float)((float)((float)(vmuls_lane_f32(v45.f32[0], v45, 1) * (float)v43.u32[0]) + v48.f32[0])
                           * 255.0);
        if (v31 < 0)
        {
          v49 = 0;
          v50 = 0;
        }
        else
        {
          v49 = v13 - 1;
          v50 = v15;
          if ((int)result > v31)
          {
            v50 = v31 / (int)v13;
            v49 = v31 % (int)v13;
          }
        }
        v51 = (float)(1 << v50);
        v52 = (_QWORD *)(v14 + 144 * (v13 * v50 + v49));
        *(float32x2_t *)v10.f32 = vmul_n_f32(v27, 1.0 / v51);
        v53 = v34 / v51;
        v54.i64[0] = v52[4];
        v54.i64[1] = v52[6];
        v55 = (float32x4_t)vcvtq_f64_u64(v54);
        *(float32x2_t *)v55.f32 = vadd_f32(vcvt_f32_f64((float64x2_t)v55), v17);
        v56 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v55.f32, 0);
        v56.i32[1] = v55.i32[1];
        *(float32x2_t *)v11.f32 = vmul_n_f32((float32x2_t)0x3F3504F300000000, v53);
        v57.i32[0] = vadd_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v10.f32, 1), *(float32x2_t *)v11.f32).u32[0];
        v58 = vsub_f32(*(float32x2_t *)v10.f32, *(float32x2_t *)v11.f32);
        v11.f32[0] = v53 * 0.5;
        v59 = v52[11];
        v60 = vsubq_f32(v10, v11).u32[0];
        v11.i64[1] = __PAIR64__(v10.u32[0], LODWORD(v53));
        v61 = v52[5];
        v62.i64[0] = v10.i64[0];
        v62.i32[2] = v10.i32[0];
        v62.f32[3] = v53 * 0.5;
        v63 = vaddq_f32(v62, v11);
        v63.i32[0] = v60;
        v64 = (float32x4_t)vbicq_s8(vbslq_s8((int8x16_t)vcgtq_f32(v63, v56), (int8x16_t)v56, (int8x16_t)v63), (int8x16_t)vcltzq_f32(v63));
        v65 = (int32x4_t)vcvtq_u32_f32(v64);
        v66 = v59 + v61 * v65.u32[1];
        v67 = v65.u32[0];
        v68 = (unsigned __int8 *)(v66 + v65.u32[0]);
        v69.i64[0] = 0x100000001;
        v69.i64[1] = 0x100000001;
        v70 = (uint32x4_t)vaddq_s32(v65, v69);
        v71 = v70.u32[0];
        v72 = (unsigned __int8 *)(v66 + v70.u32[0]);
        v73 = v70.u32[3];
        v74 = (unsigned __int8 *)(v66 + v70.u32[3]);
        v57.i32[1] = v58.i32[1];
        v75 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v55.f32, 1);
        v76 = (float32x2_t)vbic_s8(vbsl_s8((int8x8_t)vcgt_f32(v57, v75), (int8x8_t)v75, (int8x8_t)v57), (int8x8_t)vcltz_f32(v57));
        v77 = (int32x2_t)vcvt_u32_f32(v76);
        v78 = v59 + v61 * v77.u32[0];
        v79 = vsubq_f32(vcvtq_f32_u32(v70), v64);
        v80 = vsubq_f32(v64, vcvtq_f32_u32((uint32x4_t)v65));
        v81 = v70.u32[2];
        v82 = (unsigned __int8 *)(v78 + v70.u32[2]);
        v83 = v59 + v61 * v77.u32[1];
        v84 = vsub_f32(vcvt_f32_u32((uint32x2_t)vadd_s32(v77, (int32x2_t)0x100000001)), v76);
        v85.i64[0] = vuzp2q_s32((int32x4_t)v79, (int32x4_t)0).u64[0];
        *(float32x2_t *)&v85.u32[2] = v84;
        v86 = vmulq_f32(v79, v85);
        v87 = vsub_f32(v76, vcvt_f32_u32((uint32x2_t)v77));
        *(int32x2_t *)v88.i8 = vdup_lane_s32(*(int32x2_t *)v80.f32, 1);
        v88.u64[1] = (unint64_t)v87;
        v89 = vmulq_f32(v80, (float32x4_t)vuzp2q_s32((int32x4_t)v80, vzip2q_s32((int32x4_t)v80, v88)));
        v90 = vmuls_lane_f32(v80.f32[0], v84, 1);
        v91 = vmuls_lane_f32(v80.f32[0], v87, 1);
        v80.i32[1] = v80.i32[3];
        v85.i32[1] = v85.i32[0];
        v92 = vmulq_f32(v80, v85);
        v62.f32[0] = vmuls_lane_f32(v79.f32[0], v84, 1);
        v85.f32[0] = vmuls_lane_f32(v79.f32[0], v87, 1);
        v79.i32[1] = v79.i32[3];
        v93 = vmulq_f32(v79, (float32x4_t)v88);
        v88.i16[0] = *v68;
        v88.i16[1] = *(unsigned __int8 *)(v66 + v65.u32[3]);
        v88.i16[2] = *(unsigned __int8 *)(v78 + v65.u32[2]);
        v88.i16[3] = *(unsigned __int8 *)(v83 + v65.u32[3]);
        v94 = vmulq_f32(v86, vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v88.i8)));
        v88.i16[0] = *v72;
        v88.i16[1] = *v74;
        v88.i16[2] = *v82;
        v88.i16[3] = *(unsigned __int8 *)(v83 + v73);
        v95 = vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v88.i8));
        v96 = v78 + v61;
        v97 = vaddq_f32(v94, vmulq_f32(v92, v95));
        v94.i16[0] = *(unsigned __int8 *)(v66 + v61 + v67);
        v94.i16[1] = *(unsigned __int8 *)(v66 + v61 + v65.u32[3]);
        v94.i16[2] = *(unsigned __int8 *)(v78 + v61 + v65.u32[2]);
        v94.i16[3] = *(unsigned __int8 *)(v83 + v61 + v65.u32[3]);
        v98 = vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v94.f32));
        v99 = vaddq_f32(vmulq_f32(v93, v98), v97);
        v97.i16[0] = *(unsigned __int8 *)(v66 + v61 + v71);
        v97.i16[1] = *(unsigned __int8 *)(v66 + v61 + v73);
        v97.i16[2] = *(unsigned __int8 *)(v78 + v61 + v81);
        v97.i16[3] = *(unsigned __int8 *)(v83 + v61 + v73);
        v100 = vmulq_f32(v89, vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v97.f32)));
        *(int16x4_t *)v99.f32 = vmovn_s32((int32x4_t)vcvtq_u32_f32(vmulq_f32(vaddq_f32(v100, v99), v18)));
        *(_QWORD *)&v1347[7] = v99.i64[0];
        v99.i8[0] = *(_BYTE *)(v83 + v67);
        v100.i8[0] = *(_BYTE *)(v83 + v71);
        v100.f32[0] = v90 * (float)v100.u32[0];
        v99.f32[0] = (float)(v62.f32[0] * (float)v99.u32[0]) + v100.f32[0];
        v100.i8[0] = *(_BYTE *)(v83 + v61 + v67);
        v100.f32[0] = v85.f32[0] * (float)v100.u32[0];
        v99.f32[0] = v99.f32[0] + v100.f32[0];
        v100.i8[0] = *(_BYTE *)(v83 + v61 + v71);
        v10.f32[0] = v10.f32[0] - v53;
        v1347[11] = (int)(float)((float)(v99.f32[0] + (float)(v91 * (float)v100.u32[0])) * 255.0);
        if (v55.f32[0] >= v10.f32[0])
          v101 = v10.f32[0];
        else
          v101 = v55.f32[0];
        if (v10.f32[0] >= 0.0)
          v102 = v101;
        else
          v102 = 0.0;
        v103 = v102;
        v104 = (v103 + 1);
        v105 = (float)v104 - v102;
        v106 = v105 * v84.f32[0];
        *(float *)&v107 = (float)v102;
        v108 = v102 - *(float *)&v107;
        v109 = v108 * v84.f32[0];
        v110 = v105 * v87.f32[0];
        v111 = v108 * v87.f32[0];
        v87.i8[0] = *(_BYTE *)(v78 + v103);
        LOBYTE(v107) = *(_BYTE *)(v78 + v104);
        *(float *)&v112 = v109 * (float)v107;
        *(float *)&v113 = (float)(v106 * (float)v87.u32[0]) + *(float *)&v112;
        LOBYTE(v112) = *(_BYTE *)(v96 + v103);
        v114 = *(float *)&v113 + (float)(v110 * (float)v112);
        LOBYTE(v113) = *(_BYTE *)(v96 + v104);
        v1347[12] = (int)(float)((float)(v114 + (float)(v111 * (float)v113)) * 255.0);
        v115 = v34 * 1.4142;
        v116 = v28 * 1.4142;
        v117 = vcvtms_s32_f32(v30* (float)((float)((float)((float)((float)((float)((float)(COERCE_FLOAT(LODWORD(v116) & 0x807FFFFF | 0x3F800000)* -0.33333)+ v16)* COERCE_FLOAT(LODWORD(v116) & 0x807FFFFF | 0x3F800000))+ -1.6667)+ (float)((LODWORD(v116) >> 23) - 127))* 0.69315)- v29));
        if (v117 < 0)
        {
          v118 = 0;
          v119 = 0;
        }
        else
        {
          v118 = v13 - 1;
          v119 = v15;
          if ((int)result > v117)
          {
            v119 = v117 / (int)v13;
            v118 = v117 % (int)v13;
          }
        }
        v120 = 1.0 / (float)(1 << v119);
        v121 = v120 * v27.f32[0];
        v122 = vmuls_lane_f32(v120, v27, 1);
        v123 = v115 / (float)(1 << v119);
        v124 = (_QWORD *)(v14 + 144 * (v13 * v119 + v118));
        v125 = v124[11];
        v126 = v124[4];
        v127 = v124[5];
        v128 = v124[6];
        v129 = (float)(v123 * 0.0) + (float)(v120 * v27.f32[0]);
        v130 = (float)v126 + -1.001;
        if (v130 >= v129)
          v131 = v129;
        else
          v131 = (float)v126 + -1.001;
        if (v129 >= 0.0)
          v132 = v131;
        else
          v132 = 0.0;
        v133 = (float)v128 + -1.001;
        if (v133 >= (float)(v122 - v123))
          v134 = v122 - v123;
        else
          v134 = (float)v128 + -1.001;
        if ((float)(v122 - v123) < 0.0)
          v134 = 0.0;
        v135 = v132;
        v136 = v134;
        v137 = (v135 + 1);
        v138 = v136 + 1;
        v139 = v125 + v127 * v136;
        v140 = (float)v137 - v132;
        v141 = (float)v138 - v134;
        v142 = v132 - (float)v132;
        v143 = v134 - (float)v134;
        v95.i8[0] = *(_BYTE *)(v139 + v135);
        LOBYTE(v90) = *(_BYTE *)(v139 + v137);
        *(float *)&v144 = (float)(v140 * v141) * (float)v95.u32[0];
        v145 = *(float *)&v144 + (float)((float)(v142 * v141) * (float)LODWORD(v90));
        LOBYTE(v144) = *(_BYTE *)(v139 + v127 + v135);
        *(float *)&v146 = (float)(v140 * v143) * (float)v144;
        v147 = *(float *)&v146 + v145;
        LOBYTE(v146) = *(_BYTE *)(v139 + v127 + v137);
        v1347[15] = (int)(float)((float)((float)((float)(v142 * v143) * (float)v146) + v147) * 255.0);
        v148 = v123 * 0.70711;
        v149 = (float)(v123 * 0.70711) + v121;
        if (v130 >= v149)
          v150 = (float)(v123 * 0.70711) + v121;
        else
          v150 = v130;
        if (v149 < 0.0)
          v150 = 0.0;
        v151 = v123 * 0.5;
        v152 = (float)(v123 * 0.5) + v122;
        if (v133 >= v152)
          v153 = (float)(v123 * 0.5) + v122;
        else
          v153 = v133;
        if (v152 < 0.0)
          v153 = 0.0;
        v154 = v150;
        v155 = v153;
        v156 = (v154 + 1);
        v157 = v125 + v127 * v155;
        v158 = v157 + v127;
        v159 = (float)v156 - v150;
        v160 = (float)(v155 + 1) - v153;
        *(float *)&v161 = v159 * v160;
        v162 = v150 - (float)v150;
        v163 = v153 - (float)v153;
        LOBYTE(v7) = *(_BYTE *)(v157 + v154);
        LOBYTE(v161) = *(_BYTE *)(v157 + v156);
        v165 = (float)v161;
        v164 = (float)(v162 * v160) * v165;
        LOBYTE(v165) = *(_BYTE *)(v157 + v127 + v154);
        v166 = (float)((float)(v159 * v160) * (float)LODWORD(v7)) + v164;
        *(float *)&v167 = (float)(v159 * v163) * (float)LODWORD(v165);
        v168 = *(float *)&v167 + v166;
        LOBYTE(v167) = *(_BYTE *)(v157 + v127 + v156);
        v1347[16] = (int)(float)((float)((float)((float)(v162 * v163) * (float)v167) + v168) * 255.0);
        if (v133 >= (float)(v122 - v151))
          v169 = v122 - v151;
        else
          v169 = v133;
        if ((float)(v122 - v151) >= 0.0)
          v170 = v169;
        else
          v170 = 0.0;
        v171 = v170;
        v172 = v171 + 1;
        v173 = v125 + v127 * v171;
        v174 = v173 + v127;
        v175 = (float)v172 - v170;
        v176 = v170 - (float)v170;
        LOBYTE(v165) = *(_BYTE *)(v173 + v154);
        *(float *)&v177 = (float)LODWORD(v165);
        v178 = (float)(v159 * v175) * *(float *)&v177;
        LOBYTE(v177) = *(_BYTE *)(v173 + v156);
        *(float *)&v179 = (float)(v162 * v175) * (float)v177;
        *(float *)&v180 = v178 + *(float *)&v179;
        LOBYTE(v179) = *(_BYTE *)(v173 + v127 + v154);
        v181 = *(float *)&v180 + (float)((float)(v159 * v176) * (float)v179);
        LOBYTE(v180) = *(_BYTE *)(v173 + v127 + v156);
        v1347[17] = (int)(float)((float)(v181 + (float)((float)(v162 * v176) * (float)v180)) * 255.0);
        if (v133 >= (float)(v123 + v122))
          v182 = v123 + v122;
        else
          v182 = v133;
        if ((float)(v123 + v122) >= 0.0)
          v183 = v182;
        else
          v183 = 0.0;
        v184 = v183;
        v185 = v184 + 1;
        v186 = v125 + v127 * v184;
        v187 = (float)v185 - v183;
        v188 = v183 - (float)v183;
        LOBYTE(v123) = *(_BYTE *)(v186 + v135);
        *(float *)&v189 = (float)LODWORD(v123);
        *(float *)&v190 = (float)(v140 * v187) * *(float *)&v189;
        LOBYTE(v189) = *(_BYTE *)(v186 + v137);
        v191 = (float)v189;
        v192 = *(float *)&v190 + (float)((float)(v142 * v187) * v191);
        LOBYTE(v190) = *(_BYTE *)(v186 + v127 + v135);
        *(float *)&v193 = (float)(v140 * v188) * (float)v190;
        v194 = v192 + *(float *)&v193;
        LOBYTE(v193) = *(_BYTE *)(v186 + v127 + v137);
        v1347[18] = (int)(float)((float)(v194 + (float)((float)(v142 * v188) * (float)v193)) * 255.0);
        if (v130 >= (float)(v121 - v148))
          v195 = v121 - v148;
        else
          v195 = v130;
        if ((float)(v121 - v148) >= 0.0)
          v196 = v195;
        else
          v196 = 0.0;
        v197 = v196;
        v198 = (v197 + 1);
        v199 = (float)v198 - v196;
        v200 = v196 - (float)v196;
        *(float *)&v201 = v199 * v176;
        *(float *)&v202 = v200 * v176;
        LOBYTE(v191) = *(_BYTE *)(v173 + v197);
        *(float *)&v203 = (float)LODWORD(v191);
        v204 = (float)(v199 * v175) * *(float *)&v203;
        LOBYTE(v203) = *(_BYTE *)(v173 + v198);
        *(float *)&v205 = (float)(v200 * v175) * (float)v203;
        v206 = v204 + *(float *)&v205;
        LOBYTE(v205) = *(_BYTE *)(v174 + v197);
        *(float *)&v207 = (float)(v199 * v176) * (float)v205;
        v208 = v206 + *(float *)&v207;
        LOBYTE(v207) = *(_BYTE *)(v174 + v198);
        v1347[19] = (int)(float)((float)(v208 + (float)((float)(v200 * v176) * (float)v207)) * 255.0);
        LOBYTE(v201) = *(_BYTE *)(v157 + v197);
        LOBYTE(v202) = *(_BYTE *)(v157 + v198);
        *(float *)&v209 = (float)(v200 * v160) * (float)v202;
        *(float *)&v210 = (float)((float)(v199 * v160) * (float)v201) + *(float *)&v209;
        LOBYTE(v209) = *(_BYTE *)(v158 + v197);
        v211 = *(float *)&v210 + (float)((float)(v199 * v163) * (float)v209);
        LOBYTE(v210) = *(_BYTE *)(v158 + v198);
        v1347[20] = (int)(float)((float)(v211 + (float)((float)(v200 * v163) * (float)v210)) * 255.0);
        v212 = v115 * 1.4142;
        v213 = v116 * 1.4142;
        v214 = 2.0;
        v215 = vcvtms_s32_f32(v30* (float)((float)((float)((float)((float)((float)((float)(COERCE_FLOAT(COERCE_UNSIGNED_INT(v116 * 1.4142) & 0x807FFFFF | 0x3F800000)* -0.33333)+ 2.0)* COERCE_FLOAT(COERCE_UNSIGNED_INT(v116 * 1.4142) & 0x807FFFFF | 0x3F800000))+ -1.6667)+ (float)((COERCE_UNSIGNED_INT(v116 * 1.4142) >> 23) - 127))* 0.69315)- v29));
        if (v215 < 0)
        {
          v216 = 0;
          v217 = 0;
        }
        else
        {
          v216 = v15;
          v217 = v13 - 1;
          if ((int)result > v215)
          {
            v216 = v215 / (int)v13;
            v217 = v215 % (int)v13;
          }
        }
        v218 = (float)(1 << v216);
        v219 = (_QWORD *)(v14 + 144 * (v13 * v216 + v217));
        v220 = v219[11];
        *(float32x2_t *)v9.f32 = vmul_n_f32(v27, 1.0 / v218);
        v221 = v212 / v218;
        *(float *)&v222 = (float)(v212 / v218) * 0.5;
        v223.i64[0] = v219[4];
        v223.i64[1] = v219[6];
        v224 = (int32x2_t)vadd_f32(vcvt_f32_f64(vcvtq_f64_u64(v223)), v17);
        v225 = (float32x4_t)vdupq_lane_s32(v224, 0);
        v225.i32[1] = v224.i32[1];
        *(float32x2_t *)v98.f32 = vmul_n_f32((float32x2_t)0x3F3504F300000000, v221);
        v226.i32[0] = vadd_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v9.f32, 1), *(float32x2_t *)v98.f32).u32[0];
        v227 = vsub_f32(*(float32x2_t *)v9.f32, *(float32x2_t *)v98.f32);
        v98.i32[0] = v222;
        v228 = v219[5];
        v229 = vsubq_f32(v9, v98).u32[0];
        v98.i64[1] = __PAIR64__(v9.u32[0], LODWORD(v221));
        v230 = v9.f32[0] - v221;
        v9.i64[1] = __PAIR64__(v222, v9.u32[0]);
        v231 = vaddq_f32(v9, v98);
        v231.i32[0] = v229;
        v232 = (float32x4_t)vbicq_s8(vbslq_s8((int8x16_t)vcgtq_f32(v231, v225), (int8x16_t)v225, (int8x16_t)v231), (int8x16_t)vcltzq_f32(v231));
        v255 = (float32x4_t)vcvtq_u32_f32(v232);
        v233 = v220 + v228 * v255.u32[1];
        v234 = v255.u32[0];
        v235 = (unsigned __int8 *)(v233 + v255.u32[0]);
        v236.i64[0] = 0x100000001;
        v236.i64[1] = 0x100000001;
        v237 = (uint32x4_t)vaddq_s32((int32x4_t)v255, v236);
        v238 = v237.u32[0];
        v239 = (unsigned __int8 *)(v233 + v237.u32[0]);
        v240 = (unsigned __int8 *)(v233 + v228 + v255.u32[0]);
        v241 = (unsigned __int8 *)(v233 + v228 + v237.u32[0]);
        v242 = (unsigned __int8 *)(v233 + v255.u32[3]);
        v243 = (unsigned __int8 *)(v233 + v237.u32[3]);
        v244 = (unsigned __int8 *)(v233 + v228 + v255.u32[3]);
        v245 = (unsigned __int8 *)(v233 + v228 + v237.u32[3]);
        v226.i32[1] = v227.i32[1];
        v246 = (float32x2_t)vdup_lane_s32(v224, 1);
        v247 = (float32x2_t)vbic_s8(vbsl_s8((int8x8_t)vcgt_f32(v226, v246), (int8x8_t)v246, (int8x8_t)v226), (int8x8_t)vcltz_f32(v226));
        v248 = (int32x2_t)vcvt_u32_f32(v247);
        v249 = v220 + v228 * v248.u32[0];
        v250 = v249 + v228;
        v251 = vsubq_f32(vcvtq_f32_u32(v237), v232);
        v252 = vsubq_f32(v232, vcvtq_f32_u32((uint32x4_t)v255));
        v253 = (unsigned __int8 *)(v249 + v228 + v255.u32[2]);
        v254 = (unsigned __int8 *)(v249 + v228 + v237.u32[2]);
        *(float32x2_t *)v255.f32 = vsub_f32(vcvt_f32_u32((uint32x2_t)vadd_s32(v248, (int32x2_t)0x100000001)), v247);
        v256.i64[0] = vuzp2q_s32((int32x4_t)v251, (int32x4_t)0).u64[0];
        v256.i64[1] = v255.i64[0];
        v257 = v220 + v228 * v248.u32[1];
        v258 = vmulq_f32(v251, v256);
        v259 = vsub_f32(v247, vcvt_f32_u32((uint32x2_t)v248));
        *(int32x2_t *)v260.i8 = vdup_lane_s32(*(int32x2_t *)v252.f32, 1);
        v260.u64[1] = (unint64_t)v259;
        v261 = vmulq_f32(v252, (float32x4_t)vuzp2q_s32((int32x4_t)v252, vzip2q_s32((int32x4_t)v252, v260)));
        v262 = vmuls_lane_f32(v252.f32[0], *(float32x2_t *)v255.f32, 1);
        v263 = vmuls_lane_f32(v252.f32[0], v259, 1);
        v252.i32[1] = v252.i32[3];
        v256.i32[1] = v256.i32[0];
        v264 = vmulq_f32(v252, v256);
        *(float *)v237.i32 = vmuls_lane_f32(v251.f32[0], *(float32x2_t *)v255.f32, 1);
        v265 = vmuls_lane_f32(v251.f32[0], v259, 1);
        v251.i32[1] = v251.i32[3];
        v266 = v257 + v228;
        v267 = vmulq_f32(v251, (float32x4_t)v260);
        v251.i16[0] = *v235;
        v251.i16[1] = *v242;
        v251.i16[2] = *(unsigned __int8 *)(v249 + v255.u32[2]);
        v251.i16[3] = *(unsigned __int8 *)(v257 + v255.u32[3]);
        v268 = vmulq_f32(v258, vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v251.f32)));
        v258.i16[0] = *v239;
        v258.i16[1] = *v243;
        v258.i16[2] = *(unsigned __int8 *)(v249 + v237.u32[2]);
        v258.i16[3] = *(unsigned __int8 *)(v257 + v237.u32[3]);
        v269 = vaddq_f32(v268, vmulq_f32(v264, vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v258.f32))));
        v268.i16[0] = *v240;
        v268.i16[1] = *v244;
        v268.i16[2] = *v253;
        v268.i16[3] = *(unsigned __int8 *)(v266 + v255.u32[3]);
        v270 = vaddq_f32(vmulq_f32(v267, vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v268.f32))), v269);
        v267.i16[0] = *v241;
        v267.i16[1] = *v245;
        v267.i16[2] = *v254;
        v267.i16[3] = *(unsigned __int8 *)(v266 + v237.u32[3]);
        v9 = vmulq_f32(v261, vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v267.f32)));
        *(int16x4_t *)v270.f32 = vmovn_s32((int32x4_t)vcvtq_u32_f32(vmulq_f32(vaddq_f32(v9, v270), v18)));
        *(_QWORD *)&v1347[23] = v270.i64[0];
        v270.i8[0] = *(_BYTE *)(v257 + v234);
        v9.i8[0] = *(_BYTE *)(v257 + v238);
        v270.f32[0] = *(float *)v237.i32 * (float)v270.u32[0];
        *(float *)v237.i32 = v262 * (float)v9.u32[0];
        v270.f32[0] = v270.f32[0] + *(float *)v237.i32;
        v237.i8[0] = *(_BYTE *)(v266 + v234);
        *(float *)v237.i32 = v265 * (float)v237.u32[0];
        v270.f32[0] = v270.f32[0] + *(float *)v237.i32;
        v237.i8[0] = *(_BYTE *)(v266 + v238);
        v1347[27] = (int)(float)((float)(v270.f32[0] + (float)(v263 * (float)v237.u32[0])) * 255.0);
        if (*(float *)v224.i32 >= v230)
          v271 = v230;
        else
          v271 = *(float *)v224.i32;
        if (v230 < 0.0)
          v271 = 0.0;
        v272 = v271;
        v273 = (v272 + 1);
        v274 = (float)v273 - v271;
        v275 = v274 * v255.f32[0];
        *(float *)&v276 = (float)v271;
        v277 = v271 - *(float *)&v276;
        v278 = v277 * v255.f32[0];
        v279 = v274 * v259.f32[0];
        v280 = v277 * v259.f32[0];
        v259.i8[0] = *(_BYTE *)(v249 + v272);
        LOBYTE(v276) = *(_BYTE *)(v249 + v273);
        *(float *)&v281 = v275 * (float)v259.u32[0];
        v282 = *(float *)&v281 + (float)(v278 * (float)v276);
        LOBYTE(v281) = *(_BYTE *)(v250 + v272);
        *(float *)&v283 = v279 * (float)v281;
        v284 = v282 + *(float *)&v283;
        LOBYTE(v283) = *(_BYTE *)(v250 + v273);
        v1347[28] = (int)(float)((float)(v284 + (float)(v280 * (float)v283)) * 255.0);
        v285 = v212 * 1.4142;
        v286 = v213 * 1.4142;
        v287 = vcvtms_s32_f32(v30* (float)((float)((float)((float)((float)((float)((float)(COERCE_FLOAT(LODWORD(v286) & 0x807FFFFF | 0x3F800000)* -0.33333)+ 2.0)* COERCE_FLOAT(LODWORD(v286) & 0x807FFFFF | 0x3F800000))+ -1.6667)+ (float)((LODWORD(v286) >> 23) - 127))* 0.69315)- v29));
        if (v287 < 0)
        {
          v288 = 0;
          v289 = 0;
          v290 = v1341;
        }
        else
        {
          v288 = v15;
          v289 = v13 - 1;
          v290 = v1341;
          if (v1341 > v287)
          {
            v288 = v287 / (int)v13;
            v289 = v287 % (int)v13;
          }
        }
        v291 = (float)(1 << v288);
        v292 = v27.f32[0] * (float)(1.0 / v291);
        v293 = v27.f32[1] * (float)(1.0 / v291);
        v294 = v285 / v291;
        v295 = (_QWORD *)(v14 + 144 * (v13 * v288 + v289));
        v296 = v295[11];
        v298 = v295[4];
        v297 = v295[5];
        v299 = v295[6];
        v300 = (float)((float)(v285 / v291) * 0.0) + v292;
        v301 = (float)v298 + -1.001;
        if (v301 >= v300)
          v302 = v300;
        else
          v302 = (float)v298 + -1.001;
        if (v300 >= 0.0)
          v303 = v302;
        else
          v303 = 0.0;
        v304 = (float)v299 + -1.001;
        if (v304 >= (float)(v293 - v294))
          v305 = v293 - v294;
        else
          v305 = (float)v299 + -1.001;
        if ((float)(v293 - v294) >= 0.0)
          v306 = v305;
        else
          v306 = 0.0;
        v307 = v303;
        v308 = v306;
        v309 = (v307 + 1);
        v310 = v308 + 1;
        v311 = v296 + v297 * v308;
        v312 = (float)v309 - v303;
        v313 = (float)v310 - v306;
        *(float *)&v314 = (float)v303;
        v315 = v303 - *(float *)&v314;
        v316 = (float)(v303 - *(float *)&v314) * v313;
        v317 = v306 - (float)v306;
        LOBYTE(v314) = *(_BYTE *)(v311 + v307);
        LOBYTE(v265) = *(_BYTE *)(v311 + v309);
        *(float *)&v318 = (float)(v312 * v313) * (float)v314;
        v319 = *(float *)&v318 + (float)(v316 * (float)LODWORD(v265));
        LOBYTE(v318) = *(_BYTE *)(v311 + v297 + v307);
        *(float *)&v320 = (float)(v312 * v317) * (float)v318;
        v321 = *(float *)&v320 + v319;
        LOBYTE(v320) = *(_BYTE *)(v311 + v297 + v309);
        v1347[31] = (int)(float)((float)((float)((float)(v315 * v317) * (float)v320) + v321) * 255.0);
        v322 = v294 * 0.70711;
        v323 = (float)(v294 * 0.70711) + v292;
        if (v301 >= v323)
          v324 = (float)(v294 * 0.70711) + v292;
        else
          v324 = v301;
        if (v323 >= 0.0)
          v325 = v324;
        else
          v325 = 0.0;
        v326 = v294 * 0.5;
        v327 = (float)(v294 * 0.5) + v293;
        if (v304 >= v327)
          v328 = (float)(v294 * 0.5) + v293;
        else
          v328 = v304;
        if (v327 >= 0.0)
          v329 = v328;
        else
          v329 = 0.0;
        v330 = v325;
        v331 = v329;
        v332 = (v330 + 1);
        v333 = v296 + v297 * v331;
        v334 = v333 + v297;
        v335 = (float)v332 - v325;
        v336 = (float)(v331 + 1) - v329;
        *(float *)&v337 = v335 * v336;
        v338 = v325 - (float)v325;
        *(float *)&v339 = v338 * v336;
        v340 = v329 - (float)v329;
        LOBYTE(v214) = *(_BYTE *)(v333 + v330);
        LOBYTE(v337) = *(_BYTE *)(v333 + v332);
        LOBYTE(v339) = *(_BYTE *)(v333 + v297 + v330);
        *(float *)&v341 = (float)(v335 * v340) * (float)v339;
        v342 = *(float *)&v341
             + (float)((float)((float)(v335 * v336) * (float)v214) + (float)((float)(v338 * v336) * (float)v337));
        LOBYTE(v341) = *(_BYTE *)(v333 + v297 + v332);
        v1347[32] = (int)(float)((float)((float)((float)(v338 * v340) * (float)v341) + v342) * 255.0);
        v343 = v293 - v326;
        if (v304 >= (float)(v293 - v326))
          v344 = v293 - v326;
        else
          v344 = v304;
        if (v343 >= 0.0)
          v345 = v344;
        else
          v345 = 0.0;
        v346 = v345;
        v347 = v296 + v297 * v346;
        v348 = v347 + v297;
        v349 = (float)(v346 + 1) - v345;
        v350 = v335 * v349;
        v351 = v345 - (float)v345;
        v352 = v335 * v351;
        LOBYTE(v335) = *(_BYTE *)(v347 + v330);
        *(float *)&v353 = (float)LODWORD(v335);
        v354 = v350 * *(float *)&v353;
        LOBYTE(v353) = *(_BYTE *)(v347 + v332);
        v355 = (float)v353;
        *(float *)&v356 = (float)(v338 * v349) * v355;
        *(float *)&v357 = v354 + *(float *)&v356;
        LOBYTE(v356) = *(_BYTE *)(v347 + v297 + v330);
        v358 = *(float *)&v357 + (float)(v352 * (float)v356);
        LOBYTE(v357) = *(_BYTE *)(v347 + v297 + v332);
        v1347[33] = (int)(float)((float)(v358 + (float)((float)(v338 * v351) * (float)v357)) * 255.0);
        if (v304 >= (float)(v294 + v293))
          v359 = v294 + v293;
        else
          v359 = v304;
        if ((float)(v294 + v293) >= 0.0)
          v360 = v359;
        else
          v360 = 0.0;
        v361 = v360;
        v362 = v361 + 1;
        v363 = v296 + v297 * v361;
        v364 = (float)v362 - v360;
        v365 = v360 - (float)v360;
        LOBYTE(v293) = *(_BYTE *)(v363 + v307);
        *(float *)&v366 = (float)LODWORD(v293);
        *(float *)&v367 = (float)(v312 * v364) * *(float *)&v366;
        LOBYTE(v366) = *(_BYTE *)(v363 + v309);
        v368 = (float)v366;
        v369 = *(float *)&v367 + (float)((float)(v315 * v364) * v368);
        LOBYTE(v367) = *(_BYTE *)(v363 + v297 + v307);
        *(float *)&v370 = (float)(v312 * v365) * (float)v367;
        v371 = v369 + *(float *)&v370;
        LOBYTE(v370) = *(_BYTE *)(v363 + v297 + v309);
        v1347[34] = (int)(float)((float)(v371 + (float)((float)(v315 * v365) * (float)v370)) * 255.0);
        if (v301 >= (float)(v292 - v322))
          v372 = v292 - v322;
        else
          v372 = v301;
        if ((float)(v292 - v322) >= 0.0)
          v373 = v372;
        else
          v373 = 0.0;
        v374 = v373;
        v375 = (v374 + 1);
        v376 = (float)v375 - v373;
        v377 = v373 - (float)v373;
        *(float *)&v378 = v376 * v351;
        *(float *)&v379 = v377 * v351;
        LOBYTE(v368) = *(_BYTE *)(v347 + v374);
        *(float *)&v380 = (float)LODWORD(v368);
        v381 = (float)(v376 * v349) * *(float *)&v380;
        LOBYTE(v380) = *(_BYTE *)(v347 + v375);
        *(float *)&v382 = (float)(v377 * v349) * (float)v380;
        v383 = v381 + *(float *)&v382;
        LOBYTE(v382) = *(_BYTE *)(v348 + v374);
        *(float *)&v384 = (float)(v376 * v351) * (float)v382;
        v385 = v383 + *(float *)&v384;
        LOBYTE(v384) = *(_BYTE *)(v348 + v375);
        v1347[35] = (int)(float)((float)(v385 + (float)((float)(v377 * v351) * (float)v384)) * 255.0);
        LOBYTE(v378) = *(_BYTE *)(v333 + v374);
        LOBYTE(v379) = *(_BYTE *)(v333 + v375);
        *(float *)&v386 = (float)(v377 * v336) * (float)v379;
        *(float *)&v387 = (float)((float)(v376 * v336) * (float)v378) + *(float *)&v386;
        LOBYTE(v386) = *(_BYTE *)(v334 + v374);
        v388 = *(float *)&v387 + (float)((float)(v376 * v340) * (float)v386);
        LOBYTE(v387) = *(_BYTE *)(v334 + v375);
        v1347[36] = (int)(float)((float)(v388 + (float)((float)(v377 * v340) * (float)v387)) * 255.0);
        v389 = v285 * 1.4142;
        v390 = v286 * 1.4142;
        v16 = 2.0;
        v391 = vcvtms_s32_f32(v30* (float)((float)((float)((float)((float)((float)((float)(COERCE_FLOAT(LODWORD(v390) & 0x807FFFFF | 0x3F800000)* -0.33333)+ 2.0)* COERCE_FLOAT(LODWORD(v390) & 0x807FFFFF | 0x3F800000))+ -1.6667)+ (float)((LODWORD(v390) >> 23) - 127))* 0.69315)- v29));
        if (v391 < 0)
        {
          v392 = 0;
          v393 = 0;
        }
        else
        {
          v392 = v15;
          v393 = v13 - 1;
          if (v290 > v391)
          {
            v392 = v391 / (int)v13;
            v393 = v391 % (int)v13;
          }
        }
        v394 = (float)(1 << v392);
        v395 = (_QWORD *)(v14 + 144 * (v13 * v392 + v393));
        *(float32x2_t *)v48.f32 = vmul_n_f32(v27, 1.0 / v394);
        v396 = v389 / v394;
        *(float *)&v397 = (float)(v389 / v394) * 0.5;
        v398.i64[0] = v395[4];
        v398.i64[1] = v395[6];
        v399 = (int32x2_t)vadd_f32(vcvt_f32_f64(vcvtq_f64_u64(v398)), v17);
        v400 = (float32x4_t)vdupq_lane_s32(v399, 0);
        v400.i32[1] = v399.i32[1];
        *(float32x2_t *)v255.f32 = vmul_n_f32((float32x2_t)0x3F3504F300000000, v396);
        v401.i32[0] = vadd_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v48.f32, 1), *(float32x2_t *)v255.f32).u32[0];
        v402 = vsub_f32(*(float32x2_t *)v48.f32, *(float32x2_t *)v255.f32);
        v255.i32[0] = v397;
        v403 = v395[11];
        v404 = vsubq_f32(v48, v255).u32[0];
        v255.i64[1] = __PAIR64__(v48.u32[0], LODWORD(v396));
        v405 = v395[5];
        v406.i64[0] = v48.i64[0];
        v406.i64[1] = __PAIR64__(v397, v48.u32[0]);
        v407 = vaddq_f32(v406, v255);
        v407.i32[0] = v404;
        v408 = (float32x4_t)vbicq_s8(vbslq_s8((int8x16_t)vcgtq_f32(v407, v400), (int8x16_t)v400, (int8x16_t)v407), (int8x16_t)vcltzq_f32(v407));
        v409 = (int32x4_t)vcvtq_u32_f32(v408);
        v410 = v403 + v405 * v409.u32[1];
        v411 = v409.u32[0];
        v412 = (unsigned __int8 *)(v410 + v409.u32[0]);
        v413.i64[0] = 0x100000001;
        v413.i64[1] = 0x100000001;
        v414 = (uint32x4_t)vaddq_s32(v409, v413);
        v415 = v414.u32[0];
        v416 = (unsigned __int8 *)(v410 + v414.u32[0]);
        v417 = v409.u32[3];
        v418 = (unsigned __int8 *)(v410 + v409.u32[3]);
        v401.i32[1] = v402.i32[1];
        v419 = (float32x2_t)vdup_lane_s32(v399, 1);
        v420 = (float32x2_t)vbic_s8(vbsl_s8((int8x8_t)vcgt_f32(v401, v419), (int8x8_t)v419, (int8x8_t)v401), (int8x8_t)vcltz_f32(v401));
        v421 = (int32x2_t)vcvt_u32_f32(v420);
        v422 = v403 + v405 * v421.u32[0];
        v423 = vsubq_f32(vcvtq_f32_u32(v414), v408);
        v424 = vsubq_f32(v408, vcvtq_f32_u32((uint32x4_t)v409));
        v425 = v409.u32[2];
        v426 = (unsigned __int8 *)(v422 + v409.u32[2]);
        v427 = v403 + v405 * v421.u32[1];
        v428 = vsub_f32(vcvt_f32_u32((uint32x2_t)vadd_s32(v421, (int32x2_t)0x100000001)), v420);
        v429.i64[0] = vuzp2q_s32((int32x4_t)v423, (int32x4_t)0).u64[0];
        *(float32x2_t *)&v429.u32[2] = v428;
        v430 = vmulq_f32(v423, v429);
        v431 = vsub_f32(v420, vcvt_f32_u32((uint32x2_t)v421));
        *(int32x2_t *)v432.i8 = vdup_lane_s32(*(int32x2_t *)v424.f32, 1);
        v432.u64[1] = (unint64_t)v431;
        v433 = vmulq_f32(v424, (float32x4_t)vuzp2q_s32((int32x4_t)v424, vzip2q_s32((int32x4_t)v424, v432)));
        v408.f32[0] = vmuls_lane_f32(v424.f32[0], v428, 1);
        v420.f32[0] = vmuls_lane_f32(v424.f32[0], v431, 1);
        v424.i32[1] = v424.i32[3];
        v429.i32[1] = v429.i32[0];
        v434 = vmulq_f32(v424, v429);
        *(float *)v421.i32 = vmuls_lane_f32(v423.f32[0], v428, 1);
        v424.f32[0] = vmuls_lane_f32(v423.f32[0], v431, 1);
        v423.i32[1] = v423.i32[3];
        v435.i16[0] = *v412;
        v435.i16[1] = *v418;
        v435.i16[2] = *v426;
        v435.i16[3] = *(unsigned __int8 *)(v427 + v417);
        v436 = vmulq_f32(v430, vcvtq_f32_u32(vmovl_u16(v435)));
        v435.i16[0] = *v416;
        v435.i16[1] = *(unsigned __int8 *)(v410 + v414.u32[3]);
        v435.i16[2] = *(unsigned __int8 *)(v422 + v414.u32[2]);
        v435.i16[3] = *(unsigned __int8 *)(v427 + v414.u32[3]);
        v437 = v422 + v405;
        v438 = vaddq_f32(v436, vmulq_f32(v434, vcvtq_f32_u32(vmovl_u16(v435))));
        v436.i16[0] = *(unsigned __int8 *)(v410 + v405 + v411);
        v436.i16[1] = *(unsigned __int8 *)(v410 + v405 + v417);
        v436.i16[2] = *(unsigned __int8 *)(v422 + v405 + v425);
        v436.i16[3] = *(unsigned __int8 *)(v427 + v405 + v417);
        v439 = vaddq_f32(vmulq_f32(vmulq_f32(v423, (float32x4_t)v432), vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v436.f32))), v438);
        v423.i16[0] = *(unsigned __int8 *)(v410 + v405 + v415);
        v423.i16[1] = *(unsigned __int8 *)(v410 + v405 + v414.u32[3]);
        v423.i16[2] = *(unsigned __int8 *)(v422 + v405 + v414.u32[2]);
        v423.i16[3] = *(unsigned __int8 *)(v427 + v405 + v414.u32[3]);
        v11 = vmulq_f32(v433, vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v423.f32)));
        *(int16x4_t *)v439.f32 = vmovn_s32((int32x4_t)vcvtq_u32_f32(vmulq_f32(vaddq_f32(v11, v439), v18)));
        *(_QWORD *)&v1347[39] = v439.i64[0];
        v439.i8[0] = *(_BYTE *)(v427 + v411);
        v11.i8[0] = *(_BYTE *)(v427 + v415);
        v439.f32[0] = *(float *)v421.i32 * (float)v439.u32[0];
        v408.f32[0] = v439.f32[0] + (float)(v408.f32[0] * (float)v11.u32[0]);
        v439.i8[0] = *(_BYTE *)(v427 + v405 + v411);
        v439.f32[0] = v424.f32[0] * (float)v439.u32[0];
        v408.f32[0] = v408.f32[0] + v439.f32[0];
        v439.i8[0] = *(_BYTE *)(v427 + v405 + v415);
        v1347[43] = (int)(float)((float)(v408.f32[0] + (float)(v420.f32[0] * (float)v439.u32[0])) * 255.0);
        if (*(float *)v399.i32 >= (float)(v48.f32[0] - v396))
          v440 = v48.f32[0] - v396;
        else
          v440 = *(float *)v399.i32;
        if ((float)(v48.f32[0] - v396) >= 0.0)
          v441 = v440;
        else
          v441 = 0.0;
        v442 = v441;
        v443 = (v442 + 1);
        v444 = (float)v443 - v441;
        v445 = v441 - (float)v441;
        LOBYTE(v396) = *(_BYTE *)(v422 + v442);
        v399.i8[0] = *(_BYTE *)(v422 + v443);
        *(float *)&v446 = (float)(v445 * v428.f32[0]) * (float)v399.u32[0];
        *(float *)&v447 = (float)((float)(v444 * v428.f32[0]) * (float)LODWORD(v396)) + *(float *)&v446;
        LOBYTE(v446) = *(_BYTE *)(v437 + v442);
        v448 = *(float *)&v447 + (float)((float)(v444 * v431.f32[0]) * (float)v446);
        LOBYTE(v447) = *(_BYTE *)(v437 + v443);
        v1347[44] = (int)(float)((float)(v448 + (float)((float)(v445 * v431.f32[0]) * (float)v447)) * 255.0);
        v449 = v389 * 1.4142;
        v450 = v390 * 1.4142;
        v451 = vcvtms_s32_f32(v30* (float)((float)((float)((float)((float)((float)((float)(COERCE_FLOAT(LODWORD(v450) & 0x807FFFFF | 0x3F800000)* -0.33333)+ 2.0)* COERCE_FLOAT(LODWORD(v450) & 0x807FFFFF | 0x3F800000))+ -1.6667)+ (float)((LODWORD(v450) >> 23) - 127))* 0.69315)- v29));
        if (v451 < 0)
        {
          v452 = 0;
          v453 = 0;
          v454 = a2;
        }
        else
        {
          v452 = v15;
          v453 = v13 - 1;
          v454 = a2;
          if (v290 > v451)
          {
            v452 = v451 / (int)v13;
            v453 = v451 % (int)v13;
          }
        }
        v455 = (float)(1 << v452);
        v456 = v27.f32[0] * (float)(1.0 / v455);
        v457 = v27.f32[1] * (float)(1.0 / v455);
        v458 = v449 / v455;
        v459 = (_QWORD *)(v14 + 144 * (v13 * v452 + v453));
        v460 = v459[11];
        v461 = v459[4];
        v462 = v459[5];
        v463 = v459[6];
        v464 = (float)((float)(v449 / v455) * 0.0) + v456;
        v465 = (float)v461 + -1.001;
        if (v465 >= v464)
          v466 = v464;
        else
          v466 = (float)v461 + -1.001;
        if (v464 >= 0.0)
          v467 = v466;
        else
          v467 = 0.0;
        v468 = (float)v463 + -1.001;
        if (v468 >= (float)(v457 - v458))
          v469 = v457 - v458;
        else
          v469 = (float)v463 + -1.001;
        if ((float)(v457 - v458) >= 0.0)
          v470 = v469;
        else
          v470 = 0.0;
        v471 = v467;
        v472 = v470;
        v473 = (v471 + 1);
        v474 = v472 + 1;
        v475 = v460 + v462 * v472;
        v476 = (float)v473 - v467;
        v477 = (float)v474 - v470;
        *(float *)&v478 = (float)v467;
        v479 = v467 - *(float *)&v478;
        v480 = (float)(v467 - *(float *)&v478) * v477;
        v481 = v470 - (float)v470;
        LOBYTE(v478) = *(_BYTE *)(v475 + v471);
        v431.i8[0] = *(_BYTE *)(v475 + v473);
        *(float *)&v482 = (float)(v476 * v477) * (float)v478;
        v483 = *(float *)&v482 + (float)(v480 * (float)v431.u32[0]);
        LOBYTE(v482) = *(_BYTE *)(v475 + v462 + v471);
        *(float *)&v484 = (float)(v476 * v481) * (float)v482;
        v485 = *(float *)&v484 + v483;
        LOBYTE(v484) = *(_BYTE *)(v475 + v462 + v473);
        v1347[47] = (int)(float)((float)((float)((float)(v479 * v481) * (float)v484) + v485) * 255.0);
        v486 = v458 * 0.70711;
        v487 = (float)(v458 * 0.70711) + v456;
        if (v465 >= v487)
          v488 = (float)(v458 * 0.70711) + v456;
        else
          v488 = v465;
        if (v487 >= 0.0)
          v489 = v488;
        else
          v489 = 0.0;
        v490 = (float)(v458 * 0.5) + v457;
        if (v468 >= v490)
          v491 = (float)(v458 * 0.5) + v457;
        else
          v491 = v468;
        if (v490 >= 0.0)
          v492 = v491;
        else
          v492 = 0.0;
        v493 = v489;
        v494 = v492;
        v495 = (v493 + 1);
        v496 = v460 + v462 * v494;
        v497 = v496 + v462;
        v498 = (float)v495 - v489;
        v499 = (float)(v494 + 1) - v492;
        v500 = v489 - (float)v489;
        v501 = v492 - (float)v492;
        LOBYTE(v355) = *(_BYTE *)(v496 + v493);
        *(float *)&v502 = (float)LODWORD(v355);
        v503 = (float)(v498 * v499) * *(float *)&v502;
        LOBYTE(v502) = *(_BYTE *)(v496 + v495);
        *(float *)&v504 = (float)v502;
        v505 = (float)(v500 * v499) * *(float *)&v504;
        LOBYTE(v504) = *(_BYTE *)(v496 + v462 + v493);
        *(float *)&v506 = v503 + v505;
        v507 = (float)((float)(v498 * v501) * (float)v504) + *(float *)&v506;
        LOBYTE(v506) = *(_BYTE *)(v496 + v462 + v495);
        v1347[48] = (int)(float)((float)((float)((float)(v500 * v501) * (float)v506) + v507) * 255.0);
        v508 = v457 - (float)(v458 * 0.5);
        if (v468 >= v508)
          v509 = v457 - (float)(v458 * 0.5);
        else
          v509 = v468;
        if (v508 >= 0.0)
          v510 = v509;
        else
          v510 = 0.0;
        v511 = v510;
        v512 = v460 + v462 * v511;
        v513 = v512 + v462;
        v514 = (float)(v511 + 1) - v510;
        v515 = v498 * v514;
        v516 = v510 - (float)v510;
        v517 = v498 * v516;
        LOBYTE(v498) = *(_BYTE *)(v512 + v493);
        *(float *)&v518 = (float)LODWORD(v498);
        v519 = v515 * *(float *)&v518;
        LOBYTE(v518) = *(_BYTE *)(v512 + v495);
        *(float *)&v520 = (float)(v500 * v514) * (float)v518;
        *(float *)&v521 = v519 + *(float *)&v520;
        LOBYTE(v520) = *(_BYTE *)(v512 + v462 + v493);
        v522 = *(float *)&v521 + (float)(v517 * (float)v520);
        LOBYTE(v521) = *(_BYTE *)(v512 + v462 + v495);
        v1347[49] = (int)(float)((float)(v522 + (float)((float)(v500 * v516) * (float)v521)) * 255.0);
        if (v468 >= (float)(v458 + v457))
          v523 = v458 + v457;
        else
          v523 = v468;
        if ((float)(v458 + v457) >= 0.0)
          v524 = v523;
        else
          v524 = 0.0;
        v525 = v524;
        v526 = v525 + 1;
        v527 = v460 + v462 * v525;
        v528 = (float)v526 - v524;
        v529 = v524 - (float)v524;
        LOBYTE(v457) = *(_BYTE *)(v527 + v471);
        *(float *)&v530 = (float)LODWORD(v457);
        *(float *)&v531 = (float)(v476 * v528) * *(float *)&v530;
        LOBYTE(v530) = *(_BYTE *)(v527 + v473);
        v532 = (float)v530;
        v533 = *(float *)&v531 + (float)((float)(v479 * v528) * v532);
        LOBYTE(v531) = *(_BYTE *)(v527 + v462 + v471);
        *(float *)&v534 = (float)(v476 * v529) * (float)v531;
        v535 = v533 + *(float *)&v534;
        LOBYTE(v534) = *(_BYTE *)(v527 + v462 + v473);
        v1347[50] = (int)(float)((float)(v535 + (float)((float)(v479 * v529) * (float)v534)) * 255.0);
        if (v465 >= (float)(v456 - v486))
          v536 = v456 - v486;
        else
          v536 = v465;
        if ((float)(v456 - v486) >= 0.0)
          v537 = v536;
        else
          v537 = 0.0;
        v538 = v537;
        v539 = (v538 + 1);
        v540 = (float)v539 - v537;
        v541 = v537 - (float)v537;
        *(float *)&v542 = v540 * v516;
        *(float *)&v543 = v541 * v516;
        LOBYTE(v532) = *(_BYTE *)(v512 + v538);
        *(float *)&v544 = (float)LODWORD(v532);
        v545 = (float)(v540 * v514) * *(float *)&v544;
        LOBYTE(v544) = *(_BYTE *)(v512 + v539);
        *(float *)&v546 = (float)(v541 * v514) * (float)v544;
        v547 = v545 + *(float *)&v546;
        LOBYTE(v546) = *(_BYTE *)(v513 + v538);
        *(float *)&v548 = (float)(v540 * v516) * (float)v546;
        v549 = v547 + *(float *)&v548;
        LOBYTE(v548) = *(_BYTE *)(v513 + v539);
        v1347[51] = (int)(float)((float)(v549 + (float)((float)(v541 * v516) * (float)v548)) * 255.0);
        LOBYTE(v542) = *(_BYTE *)(v496 + v538);
        LOBYTE(v543) = *(_BYTE *)(v496 + v539);
        *(float *)&v550 = (float)(v541 * v499) * (float)v543;
        *(float *)&v551 = (float)((float)(v540 * v499) * (float)v542) + *(float *)&v550;
        LOBYTE(v550) = *(_BYTE *)(v497 + v538);
        v552 = *(float *)&v551 + (float)((float)(v540 * v501) * (float)v550);
        LOBYTE(v551) = *(_BYTE *)(v497 + v539);
        v1347[52] = (int)(float)((float)(v552 + (float)((float)(v541 * v501) * (float)v551)) * 255.0);
        v553 = vcvtms_s32_f32(v30* (float)((float)((float)((float)((float)((float)((float)(COERCE_FLOAT(COERCE_UNSIGNED_INT(v450 * 1.4142) & 0x807FFFFF | 0x3F800000)* -0.33333)+ 2.0)* COERCE_FLOAT(COERCE_UNSIGNED_INT(v450 * 1.4142) & 0x807FFFFF | 0x3F800000))+ -1.6667)+ (float)((COERCE_UNSIGNED_INT(v450 * 1.4142) >> 23) - 127))* 0.69315)- v29));
        if (v553 < 0)
        {
          v554 = 0;
          v555 = 0;
        }
        else
        {
          v554 = v15;
          v555 = v13 - 1;
          if (v290 > v553)
          {
            v554 = v553 / (int)v13;
            v555 = v553 % (int)v13;
          }
        }
        v556 = 0;
        v557 = (float)(1 << v554);
        v558 = (_QWORD *)(v14 + 144 * (v13 * v554 + v555));
        v559 = v558[11];
        *(float32x2_t *)v8.f32 = vmul_n_f32(v27, 1.0 / v557);
        v560 = (float)(v449 * 1.4142) / v557;
        v561.i64[0] = v558[4];
        v561.i64[1] = v558[6];
        v562 = (int32x2_t)vadd_f32(vcvt_f32_f64(vcvtq_f64_u64(v561)), v17);
        v563 = (float32x4_t)vdupq_lane_s32(v562, 0);
        v563.i32[1] = v562.i32[1];
        *(float32x2_t *)v55.f32 = vmul_n_f32((float32x2_t)0x3F3504F300000000, v560);
        v564.i32[0] = vadd_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v8.f32, 1), *(float32x2_t *)v55.f32).u32[0];
        v565 = vsub_f32(*(float32x2_t *)v8.f32, *(float32x2_t *)v55.f32);
        v55.f32[0] = v560 * 0.5;
        v566 = v558[5];
        v567 = vsubq_f32(v8, v55).u32[0];
        v55.i64[1] = __PAIR64__(v8.u32[0], LODWORD(v560));
        v568 = v8.f32[0] - v560;
        v8.i64[1] = __PAIR64__(v55.u32[0], v8.u32[0]);
        v569 = vaddq_f32(v8, v55);
        v569.i32[0] = v567;
        v570 = (float32x4_t)vbicq_s8(vbslq_s8((int8x16_t)vcgtq_f32(v569, v563), (int8x16_t)v563, (int8x16_t)v569), (int8x16_t)vcltzq_f32(v569));
        v571 = (int32x4_t)vcvtq_u32_f32(v570);
        v572 = v559 + v566 * v571.u32[1];
        v573 = v571.u32[0];
        v574 = (unsigned __int8 *)(v572 + v571.u32[0]);
        v575.i64[0] = 0x100000001;
        v575.i64[1] = 0x100000001;
        v576 = (uint32x4_t)vaddq_s32(v571, v575);
        v577 = v576.u32[0];
        v578 = (unsigned __int8 *)(v572 + v576.u32[0]);
        v564.i32[1] = v565.i32[1];
        v579 = (float32x2_t)vdup_lane_s32(v562, 1);
        v580 = (float32x2_t)vbic_s8(vbsl_s8((int8x8_t)vcgt_f32(v564, v579), (int8x8_t)v579, (int8x8_t)v564), (int8x8_t)vcltz_f32(v564));
        v581 = (int32x2_t)vcvt_u32_f32(v580);
        v582 = v559 + v566 * v581.u32[0];
        v583 = vsubq_f32(vcvtq_f32_u32(v576), v570);
        v584 = vsubq_f32(v570, vcvtq_f32_u32((uint32x4_t)v571));
        v585 = v559 + v566 * v581.u32[1];
        v586 = vsub_f32(vcvt_f32_u32((uint32x2_t)vadd_s32(v581, (int32x2_t)0x100000001)), v580);
        v563.i64[0] = vuzp2q_s32((int32x4_t)v583, (int32x4_t)0).u64[0];
        *(float32x2_t *)&v563.u32[2] = v586;
        v587 = vmulq_f32(v583, v563);
        v588 = vsub_f32(v580, vcvt_f32_u32((uint32x2_t)v581));
        *(int32x2_t *)v589.i8 = vdup_lane_s32(*(int32x2_t *)v584.f32, 1);
        v589.u64[1] = (unint64_t)v588;
        v590 = vmulq_f32(v584, (float32x4_t)vuzp2q_s32((int32x4_t)v584, vzip2q_s32((int32x4_t)v584, v589)));
        v591 = vmuls_lane_f32(v584.f32[0], v586, 1);
        v592 = vmuls_lane_f32(v584.f32[0], v588, 1);
        v584.i32[1] = v584.i32[3];
        v563.i32[1] = v563.i32[0];
        v593 = vmulq_f32(v584, v563);
        *(float *)v576.i32 = vmuls_lane_f32(v583.f32[0], v586, 1);
        v563.f32[0] = vmuls_lane_f32(v583.f32[0], v588, 1);
        v583.i32[1] = v583.i32[3];
        v594 = vmulq_f32(v583, (float32x4_t)v589);
        v583.i16[0] = *v574;
        v583.i16[1] = *(unsigned __int8 *)(v572 + v571.u32[3]);
        v583.i16[2] = *(unsigned __int8 *)(v582 + v571.u32[2]);
        v583.i16[3] = *(unsigned __int8 *)(v585 + v571.u32[3]);
        v595 = vmulq_f32(v587, vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v583.f32)));
        v587.i16[0] = *v578;
        v587.i16[1] = *(unsigned __int8 *)(v572 + v576.u32[3]);
        v587.i16[2] = *(unsigned __int8 *)(v582 + v576.u32[2]);
        v587.i16[3] = *(unsigned __int8 *)(v585 + v576.u32[3]);
        v10 = vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v587.f32));
        v596 = v572 + v566;
        v597 = v582 + v566;
        v598 = (unsigned __int8 *)(v582 + v566 + v571.u32[2]);
        v599 = (unsigned __int8 *)(v582 + v566 + v576.u32[2]);
        v600 = v585 + v566;
        v601 = vaddq_f32(v595, vmulq_f32(v593, v10));
        v595.i16[0] = *(unsigned __int8 *)(v596 + v573);
        v595.i16[1] = *(unsigned __int8 *)(v596 + v571.u32[3]);
        v595.i16[2] = *v598;
        v595.i16[3] = *(unsigned __int8 *)(v600 + v571.u32[3]);
        v602 = vaddq_f32(vmulq_f32(v594, vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v595.f32))), v601);
        v594.i16[0] = *(unsigned __int8 *)(v596 + v577);
        v594.i16[1] = *(unsigned __int8 *)(v596 + v576.u32[3]);
        v594.i16[2] = *v599;
        v594.i16[3] = *(unsigned __int8 *)(v600 + v576.u32[3]);
        v8 = vmulq_f32(v590, vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v594.f32)));
        *(int16x4_t *)v602.f32 = vmovn_s32((int32x4_t)vcvtq_u32_f32(vmulq_f32(vaddq_f32(v8, v602), v18)));
        *(_QWORD *)&v1347[55] = v602.i64[0];
        v602.i8[0] = *(_BYTE *)(v585 + v573);
        v8.i8[0] = *(_BYTE *)(v585 + v577);
        v602.f32[0] = *(float *)v576.i32 * (float)v602.u32[0];
        *(float *)v576.i32 = v591 * (float)v8.u32[0];
        v602.f32[0] = v602.f32[0] + *(float *)v576.i32;
        v576.i8[0] = *(_BYTE *)(v600 + v573);
        *(float *)v576.i32 = v563.f32[0] * (float)v576.u32[0];
        v602.f32[0] = v602.f32[0] + *(float *)v576.i32;
        v576.i8[0] = *(_BYTE *)(v600 + v577);
        v602.f32[0] = v602.f32[0] + (float)(v592 * (float)v576.u32[0]);
        v7 = 255.0;
        v603 = (int)(float)(v602.f32[0] * 255.0);
        if (*(float *)v562.i32 >= v568)
          v604 = v568;
        else
          v604 = *(float *)v562.i32;
        if (v568 < 0.0)
          v604 = 0.0;
        v605 = v604;
        v1347[59] = v603;
        v606 = (v605 + 1);
        v607 = (float)v606 - v604;
        *(float *)&v608 = v607 * v586.f32[0];
        v609 = v604 - (float)v604;
        v610 = v609 * v586.f32[0];
        v611 = v607 * v588.f32[0];
        v612 = v609 * v588.f32[0];
        v588.i8[0] = *(_BYTE *)(v582 + v605);
        *(float *)&v613 = *(float *)&v608 * (float)v588.u32[0];
        LOBYTE(v608) = *(_BYTE *)(v582 + v606);
        v614 = *(float *)&v613 + (float)(v610 * (float)v608);
        LOBYTE(v613) = *(_BYTE *)(v597 + v605);
        *(float *)&v615 = v611 * (float)v613;
        v616 = v614 + *(float *)&v615;
        LOBYTE(v615) = *(_BYTE *)(v597 + v606);
        v1347[60] = (int)(float)((float)(v616 + (float)(v612 * (float)v615)) * 255.0);
        v617 = 0;
        do
        {
          v617 = vsra_n_s32(v617, vmul_s32(vdup_n_s32((unsigned __int16)v1347[*(unsigned __int16 *)&v1345[v556] - 1]- (unsigned __int16)v1347[*(unsigned __int16 *)&v1345[v556 + 2] - 1]), *(int32x2_t *)&v1345[v556 + 4]), 0xFuLL);
          v556 += 12;
        }
        while (v556 != 540);
        if (v617)
        {
          v19 = fabsf((float)v617.i32[1]) + 0.0000001;
          v20 = v19 + (float)v617.i32[0];
          v21 = v20 / (float)(v19 - (float)v617.i32[0]);
          v22 = (float)((float)v617.i32[0] - v19) / v20;
          v23 = 0.7854;
          if (v617.i32[0] < 1)
          {
            v23 = 2.3562;
            v22 = v21;
          }
          v7 = (float)(v22 * (float)(v22 * 0.1821)) + -0.9675;
          v24 = v23 + (float)(v22 * v7);
          if (v617.i32[1] >= 0)
            v25 = v24;
          else
            v25 = 6.2832 - v24;
        }
        else
        {
          v25 = 0.0;
        }
        result = v1341;
        if (v25 >= 0.0)
          v26 = v25;
        else
          v26 = 0.0;
        if (v26 > 6.2832)
          v26 = 6.2832;
        a1[5].f32[0] = v26;
        a1 += 6;
      }
      while (a1 != v454);
    }
  }
  else
  {
    v1344 = 1191181824;
    result = (unint64_t)memcpy(v1345, &unk_2103BFBF0, sizeof(v1345));
    if (a1 != a2)
    {
      v626 = *(_DWORD *)(a3 + 24);
      v627 = *(_QWORD *)(a3 + 32);
      v628 = *(_QWORD *)(a3 + 56);
      v629 = v627 * v626;
      v630 = v626 - 1;
      v631 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v632.i64[0] = 0x100000001;
      v632.i64[1] = 0x100000001;
      do
      {
        v641 = a1[2].f32[0];
        v640 = a1[2].f32[1];
        v642 = a1[1].f32[1];
        memset(v1347, 0, sizeof(v1347));
        v644 = *(float *)(a3 + 108);
        v643 = *(float *)(a3 + 112);
        v645 = vcvtms_s32_f32(v644* (float)((float)((float)((float)((float)((float)((float)(COERCE_FLOAT(LODWORD(v642) & 0x807FFFFF | 0x3F800000)* -0.33333)+ 2.0)* COERCE_FLOAT(LODWORD(v642) & 0x807FFFFF | 0x3F800000))+ -1.6667)+ (float)((LODWORD(v642) >> 23) - 127))* 0.69315)- v643));
        if (v645 < 0)
        {
          v646 = 0;
          v647 = 0;
        }
        else
        {
          v646 = v630;
          v647 = v627 - 1;
          if (v629 > v645)
          {
            v646 = v645 / (int)v627;
            v647 = v645 % (int)v627;
          }
        }
        v648 = v642 + v642;
        v649 = 1.0 / (float)(1 << v646);
        v650 = v641 * v649;
        v651 = v640 * v649;
        v652 = (_QWORD *)(v628 + 144 * (v627 * v646 + v647));
        v653 = v652[11];
        v655 = v652[4];
        v654 = v652[5];
        v656 = v652[6];
        v657 = v650 + 0.0;
        v658 = (float)v655 + -1.001;
        if (v658 >= v657)
          v658 = v657;
        if (v657 >= 0.0)
          v659 = v658;
        else
          v659 = 0.0;
        v660 = v651 + 0.0;
        v661 = (float)v656 + -1.001;
        if (v661 >= v660)
          v661 = v660;
        if (v660 >= 0.0)
          v662 = v661;
        else
          v662 = 0.0;
        v663 = v659;
        v664 = v662;
        v665 = (v663 + 1);
        v666 = v653 + v654 * v664;
        v667 = v666 + v654;
        v668 = (float)v665 - v659;
        v669 = (float)(v664 + 1) - v662;
        *(float *)&v670 = v668 * v669;
        *(float *)&v671 = v659 - (float)v659;
        v672 = *(float *)&v671 * v669;
        v673 = v662 - (float)v662;
        v674 = v668 * v673;
        v675 = *(float *)&v671 * v673;
        LOBYTE(v671) = *(_BYTE *)(v666 + v663);
        v676 = *(float *)&v670 * (float)v671;
        LOBYTE(v670) = *(_BYTE *)(v666 + v665);
        *(float *)&v677 = v672 * (float)v670;
        v678 = v676 + *(float *)&v677;
        LOBYTE(v677) = *(_BYTE *)(v667 + v663);
        *(float *)&v679 = v674 * (float)v677;
        v680 = *(float *)&v679 + v678;
        LOBYTE(v679) = *(_BYTE *)(v667 + v665);
        v1346 = (int)(float)((float)((float)(v675 * (float)v679) + v680) * 255.0);
        if (v645 < 0)
        {
          v681 = 0;
          v682 = 0;
        }
        else
        {
          v681 = v627 - 1;
          v682 = v630;
          if (v629 > v645)
          {
            v682 = v645 / (int)v627;
            v681 = v645 % (int)v627;
          }
        }
        v683 = (float)(1 << v682);
        v684 = v641 * (float)(1.0 / v683);
        v685 = v640 * (float)(1.0 / v683);
        v686 = v648 / v683;
        v687 = (unint64_t *)(v628 + 144 * (v627 * v682 + v681));
        v688 = v687[11];
        v689 = v687[5];
        v690.f32[0] = v684 - (float)(v686 * 0.5);
        v624.f32[0] = (float)v687[4] + -1.001;
        *(float *)v623.i32 = (float)v687[6] + -1.001;
        v691.f32[0] = v686 * 0.70711;
        v692 = vmul_n_f32((float32x2_t)0xBF3504F300000000, v686);
        v693.f32[0] = v685 - (float)(0.5 * v692.f32[0]);
        v694 = v692.f32[1] + v693.f32[0];
        v693.f32[1] = v686 * 0.70711;
        v691.f32[1] = v685 + (float)(0.5 * v692.f32[0]);
        v691.f32[2] = v692.f32[0] + v685;
        v691.f32[3] = v691.f32[1];
        *(float32x2_t *)&v693.u32[2] = v692;
        v695 = vaddq_f32(v691, v693);
        v696 = (float32x4_t)vdupq_lane_s32(v623, 0);
        v697 = (float32x4_t)vbicq_s8(vbslq_s8((int8x16_t)vcgtq_f32(v695, v696), (int8x16_t)v696, (int8x16_t)v695), (int8x16_t)vcltzq_f32(v695));
        v698 = (int32x4_t)vcvtq_u32_f32(v697);
        v699 = v688 + v689 * v698.u32[0];
        v700 = vmul_n_f32((float32x2_t)0xBF3504F300000000, v692.f32[0]);
        v701 = v690.f32[0] + v700.f32[1];
        v690.f32[1] = (float)(v686 * 0.5) + v684;
        v690.f32[2] = v686 + v684;
        v690.f32[3] = v690.f32[1];
        v702.f32[0] = 0.70711 * v692.f32[0];
        *(float32x2_t *)&v702.u32[2] = v700;
        v702.f32[1] = 0.70711 * v692.f32[0];
        v703 = vaddq_f32(v690, v702);
        v704 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v624.f32, 0);
        v705 = (float32x4_t)vbicq_s8(vbslq_s8((int8x16_t)vcgtq_f32(v703, v704), (int8x16_t)v704, (int8x16_t)v703), (int8x16_t)vcltzq_f32(v703));
        v706 = (int32x4_t)vcvtq_u32_f32(v705);
        v707 = (uint32x4_t)vaddq_s32(v706, v632);
        v708 = (unsigned __int8 *)(v699 + v689 + v706.u32[0]);
        v709 = v688 + v689 * v698.u32[1];
        v710 = (unsigned __int8 *)(v709 + v689 + v706.u32[1]);
        v711 = v688 + v689 * v698.u32[2];
        v712 = v688 + v689 * v698.u32[3];
        v713 = vsubq_f32(vcvtq_f32_u32(v707), v705);
        v714 = vsubq_f32(vcvtq_f32_u32((uint32x4_t)vaddq_s32(v698, v632)), v697);
        v715 = vmulq_f32(v713, v714);
        v716 = vsubq_f32(v705, vcvtq_f32_u32((uint32x4_t)v706));
        v717 = vmulq_f32(v716, v714);
        v718 = vsubq_f32(v697, vcvtq_f32_u32((uint32x4_t)v698));
        v706.i16[0] = *(unsigned __int8 *)(v699 + v706.u32[0]);
        v706.i16[1] = *(unsigned __int8 *)(v709 + v706.u32[1]);
        v706.i16[2] = *(unsigned __int8 *)(v711 + v706.u32[2]);
        v706.i16[3] = *(unsigned __int8 *)(v712 + v706.u32[3]);
        v719 = vmulq_f32(v715, vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v706.i8)));
        v706.i16[0] = *(unsigned __int8 *)(v699 + v707.u32[0]);
        v706.i16[1] = *(unsigned __int8 *)(v709 + v707.u32[1]);
        v706.i16[2] = *(unsigned __int8 *)(v711 + v707.u32[2]);
        v706.i16[3] = *(unsigned __int8 *)(v712 + v707.u32[3]);
        v720 = vaddq_f32(v719, vmulq_f32(v717, vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v706.i8))));
        v717.i16[0] = *v708;
        v717.i16[1] = *v710;
        v717.i16[2] = *(unsigned __int8 *)(v711 + v689 + v706.u32[2]);
        v717.i16[3] = *(unsigned __int8 *)(v712 + v689 + v706.u32[3]);
        v721 = vaddq_f32(vmulq_f32(vmulq_f32(v713, v718), vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v717.f32))), v720);
        v717.i16[0] = *(unsigned __int8 *)(v699 + v689 + v707.u32[0]);
        v717.i16[1] = *(unsigned __int8 *)(v709 + v689 + v707.u32[1]);
        v717.i16[2] = *(unsigned __int8 *)(v711 + v689 + v707.u32[2]);
        v717.i16[3] = *(unsigned __int8 *)(v712 + v689 + v707.u32[3]);
        v722 = (float32x4_t)vcvtq_u32_f32(vmulq_f32(vaddq_f32(vmulq_f32(vmulq_f32(v716, v718), vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v717.f32))), v721), v631));
        *(int16x4_t *)v722.f32 = vmovn_s32((int32x4_t)v722);
        *(_QWORD *)&v1347[7] = v722.i64[0];
        if (v624.f32[0] >= v701)
          v723 = v701;
        else
          v723 = v624.f32[0];
        if (v701 < 0.0)
          v723 = 0.0;
        if (*(float *)v623.i32 >= v694)
          v724 = v694;
        else
          v724 = *(float *)v623.i32;
        if (v694 < 0.0)
          v724 = 0.0;
        v725 = v723;
        v726 = v724;
        v727 = (v725 + 1);
        v728 = v726 + 1;
        v729 = v688 + v689 * v726;
        v730 = (float)v727 - v723;
        v731 = (float)v728 - v724;
        v732 = v730 * v731;
        v733 = v723 - (float)v723;
        v734 = v733 * v731;
        *(float *)&v735 = (float)v724;
        *(float *)&v736 = v724 - *(float *)&v735;
        v737 = v730 * *(float *)&v736;
        v738 = v733 * *(float *)&v736;
        LOBYTE(v736) = *(_BYTE *)(v729 + v725);
        LOBYTE(v735) = *(_BYTE *)(v729 + v727);
        *(float *)&v739 = v734 * (float)v735;
        v740 = (float)(v732 * (float)v736) + *(float *)&v739;
        LOBYTE(v739) = *(_BYTE *)(v729 + v689 + v725);
        *(float *)&v741 = v737 * (float)v739;
        v742 = v740 + *(float *)&v741;
        LOBYTE(v741) = *(_BYTE *)(v729 + v689 + v727);
        v1347[11] = (int)(float)((float)(v742 + (float)(v738 * (float)v741)) * 255.0);
        v743 = (float)(v684 - v686) + v700.f32[0];
        if (v624.f32[0] >= v743)
          v744 = (float)(v684 - v686) + v700.f32[0];
        else
          v744 = v624.f32[0];
        if (v743 >= 0.0)
          v745 = v744;
        else
          v745 = 0.0;
        v746 = v692.f32[0] + (float)(v685 - v692.f32[0]);
        if (*(float *)v623.i32 >= v746)
          v747 = v746;
        else
          v747 = *(float *)v623.i32;
        if (v746 >= 0.0)
          v748 = v747;
        else
          v748 = 0.0;
        v749 = v745;
        v750 = v748;
        v751 = (v749 + 1);
        v752 = v750 + 1;
        v753 = v688 + v689 * v750;
        v754 = (float)v751 - v745;
        v755 = (float)v752 - v748;
        v756 = v754 * v755;
        v757 = v745 - (float)v745;
        v758 = v757 * v755;
        *(float *)&v759 = (float)v748;
        *(float *)&v760 = v748 - *(float *)&v759;
        v761 = *(float *)&v760 * v754;
        v762 = v757 * *(float *)&v760;
        LOBYTE(v760) = *(_BYTE *)(v753 + v749);
        LOBYTE(v759) = *(_BYTE *)(v753 + v751);
        *(float *)&v763 = v758 * (float)v759;
        v764 = (float)(v756 * (float)v760) + *(float *)&v763;
        LOBYTE(v763) = *(_BYTE *)(v753 + v689 + v749);
        *(float *)&v765 = v761 * (float)v763;
        v766 = v764 + *(float *)&v765;
        LOBYTE(v765) = *(_BYTE *)(v753 + v689 + v751);
        v1347[12] = (int)(float)((float)(v766 + (float)(v762 * (float)v765)) * 255.0);
        v767 = v648 * 1.4142;
        v768 = v642 * 1.4142;
        v769 = vcvtms_s32_f32(v644* (float)((float)((float)((float)((float)((float)((float)(COERCE_FLOAT(COERCE_UNSIGNED_INT(v642 * 1.4142) & 0x807FFFFF | 0x3F800000)* -0.33333)+ 2.0)* COERCE_FLOAT(COERCE_UNSIGNED_INT(v642 * 1.4142) & 0x807FFFFF | 0x3F800000))+ -1.6667)+ (float)((COERCE_UNSIGNED_INT(v642 * 1.4142) >> 23) - 127))* 0.69315)- v643));
        if (v769 < 0)
        {
          v770 = 0;
          v771 = 0;
        }
        else
        {
          v770 = v627 - 1;
          v771 = v630;
          if (v629 > v769)
          {
            v771 = v769 / (int)v627;
            v770 = v769 % (int)v627;
          }
        }
        v722.f32[0] = (float)(1 << v771);
        v624.f32[0] = v641 * (float)(1.0 / v722.f32[0]);
        *(float *)v623.i32 = v640 * (float)(1.0 / v722.f32[0]);
        v722.f32[0] = v767 / v722.f32[0];
        v772 = (unint64_t *)(v628 + 144 * (v627 * v771 + v770));
        *(float *)v619.i32 = (float)v772[6] + -1.001;
        v773 = v722.f32[0] * 0.5;
        v774 = v722.f32[0] * -0.5;
        v775 = vmul_n_f32((float32x2_t)0x3F3504F300000000, v722.f32[0]);
        v776 = vmul_n_f32((float32x2_t)0x3F3504F300000000, v775.f32[0]);
        *(float32x2_t *)v625.f32 = vadd_f32((float32x2_t)vdup_lane_s32(v623, 0), v776);
        v777 = vsubq_f32(v625, v722).u32[0];
        v722.f32[1] = v722.f32[0] * 0.5;
        v778 = (float32x4_t)vdupq_lane_s32(v619, 0);
        v722.i32[2] = v625.i32[1];
        *(float *)v622.i32 = (float)v772[4] + -1.001;
        v625.f32[2] = v722.f32[0] * -0.5;
        v779 = vaddq_f32(v625, v722);
        v780 = v779;
        v780.i32[0] = v777;
        v780.i32[3] = v779.i32[0];
        v784 = (float32x4_t)vcgtq_f32(v780, v778);
        v781 = (float32x4_t)vbicq_s8(vbslq_s8((int8x16_t)v784, (int8x16_t)v778, (int8x16_t)v780), (int8x16_t)vcltzq_f32(v780));
        v782 = (int32x4_t)vcvtq_u32_f32(v781);
        v783 = v782.u32[0];
        *(float32x2_t *)v779.f32 = vadd_f32(v775, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v624.f32, 0));
        v784.f32[0] = 0.5 * v775.f32[0];
        *(int32x2_t *)v780.f32 = vrev64_s32(*(int32x2_t *)v779.f32);
        v785 = vsub_f32(*(float32x2_t *)v779.f32, v775).u32[0];
        v779.f32[2] = -0.5 * v775.f32[0];
        v779.i32[3] = v775.i32[0];
        v780.i64[1] = v780.i64[0];
        v780.f32[1] = 0.5 * v775.f32[0];
        v786 = vaddq_f32(v779, v780);
        v786.i32[0] = v785;
        v787 = (float32x4_t)vdupq_lane_s32(v622, 0);
        v788 = (float32x4_t)vbicq_s8(vbslq_s8((int8x16_t)vcgtq_f32(v786, v787), (int8x16_t)v787, (int8x16_t)v786), (int8x16_t)vcltzq_f32(v786));
        v789 = (int32x4_t)vcvtq_u32_f32(v788);
        v790 = (uint32x4_t)vaddq_s32(v789, v632);
        v791 = v782.u32[1];
        v792 = v782.u32[2];
        v793 = vsubq_f32(vcvtq_f32_u32(v790), v788);
        v794 = vsubq_f32(v788, vcvtq_f32_u32((uint32x4_t)v789));
        v795 = v782.u32[3];
        v796 = vsubq_f32(vcvtq_f32_u32((uint32x4_t)vaddq_s32(v782, v632)), v781);
        v797 = vsubq_f32(v781, vcvtq_f32_u32((uint32x4_t)v782));
        v798 = vmulq_f32(v793, v796);
        v799 = vmulq_f32(v794, v796);
        v800 = vmulq_f32(v793, v797);
        v801 = vmulq_f32(v794, v797);
        v802 = v772[5];
        v803 = v772[11];
        v804 = v803 + v802 * v783;
        v805 = v789.u32[0];
        v806 = v803 + v802 * v791;
        v807 = v789.u32[1];
        v808 = v803 + v802 * v792;
        v809 = v803 + v802 * v795;
        v794.i16[0] = *(unsigned __int8 *)(v804 + v789.u32[0]);
        v794.i16[1] = *(unsigned __int8 *)(v806 + v789.u32[1]);
        v794.i16[2] = *(unsigned __int8 *)(v808 + v789.u32[2]);
        v794.i16[3] = *(unsigned __int8 *)(v809 + v789.u32[3]);
        v789.i16[0] = *(unsigned __int8 *)(v804 + v790.u32[0]);
        v789.i16[1] = *(unsigned __int8 *)(v806 + v790.u32[1]);
        v789.i16[2] = *(unsigned __int8 *)(v808 + v790.u32[2]);
        v789.i16[3] = *(unsigned __int8 *)(v809 + v790.u32[3]);
        v810 = v804 + v802;
        v811 = v806 + v802;
        v812 = v808 + v802;
        v813 = v809 + v802;
        v814 = vaddq_f32(vmulq_f32(v798, vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v794.f32))), vmulq_f32(v799, vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v789.i8))));
        v789.i16[0] = *(unsigned __int8 *)(v810 + v805);
        v789.i16[1] = *(unsigned __int8 *)(v811 + v807);
        v789.i16[2] = *(unsigned __int8 *)(v812 + v789.u32[2]);
        v789.i16[3] = *(unsigned __int8 *)(v813 + v789.u32[3]);
        v815 = vaddq_f32(vmulq_f32(v800, vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v789.i8))), v814);
        v789.i16[0] = *(unsigned __int8 *)(v810 + v790.u32[0]);
        v789.i16[1] = *(unsigned __int8 *)(v811 + v790.u32[1]);
        v789.i16[2] = *(unsigned __int8 *)(v812 + v790.u32[2]);
        v789.i16[3] = *(unsigned __int8 *)(v813 + v790.u32[3]);
        v816 = (float32x4_t)vcvtq_u32_f32(vmulq_f32(vaddq_f32(vmulq_f32(v801, vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v789.i8))), v815), v631));
        *(int16x4_t *)v816.f32 = vmovn_s32((int32x4_t)v816);
        v817 = v624.f32[0] - v775.f32[1];
        v624.f32[0] = (float)(v624.f32[0] - v775.f32[1]) + (float)(-0.5 * v775.f32[0]);
        if (*(float *)v622.i32 >= v624.f32[0])
          v818 = v624.f32[0];
        else
          v818 = (float)v772[4] + -1.001;
        if (v624.f32[0] >= 0.0)
          v819 = v818;
        else
          v819 = 0.0;
        v820 = *(float *)v623.i32 - v776.f32[1];
        v821 = v774 + v820;
        if (*(float *)v619.i32 >= v821)
          v822 = v821;
        else
          v822 = (float)v772[6] + -1.001;
        if (v821 >= 0.0)
          v823 = v822;
        else
          v823 = 0.0;
        v824 = v819;
        v825 = v823;
        *(_QWORD *)&v1347[15] = v816.i64[0];
        v826 = (v824 + 1);
        v827 = v825 + 1;
        v828 = v803 + v802 * v825;
        v829 = (float)v826 - v819;
        v830 = (float)v827 - v823;
        v831 = v819 - (float)v819;
        *(float *)&v832 = v823 - (float)v823;
        *(float *)&v833 = v829 * v830;
        v834 = v831 * v830;
        v835 = v829 * *(float *)&v832;
        v836 = v831 * *(float *)&v832;
        LOBYTE(v832) = *(_BYTE *)(v828 + v824);
        v837 = *(float *)&v833 * (float)v832;
        LOBYTE(v833) = *(_BYTE *)(v828 + v826);
        *(float *)&v838 = v834 * (float)v833;
        v839 = v828 + v802;
        v840 = v837 + *(float *)&v838;
        LOBYTE(v838) = *(_BYTE *)(v839 + v824);
        *(float *)&v841 = (float)v838;
        v842 = v835 * *(float *)&v841;
        LOBYTE(v841) = *(_BYTE *)(v839 + v826);
        LODWORD(v824) = (int)(float)((float)((float)(v840 + v842) + (float)(v836 * (float)v841)) * 255.0);
        v843 = v817 + v784.f32[0];
        v1347[19] = v824;
        if (*(float *)v622.i32 >= (float)(v817 + v784.f32[0]))
          v844 = v817 + v784.f32[0];
        else
          v844 = *(float *)v622.i32;
        if (v843 >= 0.0)
          v845 = v844;
        else
          v845 = 0.0;
        if (*(float *)v619.i32 >= (float)(v773 + v820))
          *(float *)v619.i32 = v773 + v820;
        if ((float)(v773 + v820) >= 0.0)
          v846 = *(float *)v619.i32;
        else
          v846 = 0.0;
        v847 = v845;
        v848 = v846;
        v849 = (v847 + 1);
        v850 = v848 + 1;
        v851 = v803 + v802 * v848;
        v852 = (float)v849 - v845;
        v853 = (float)v850 - v846;
        v854 = v845 - (float)v845;
        *(float *)&v855 = v846 - (float)v846;
        *(float *)&v856 = v852 * v853;
        v857 = v854 * v853;
        v858 = v852 * *(float *)&v855;
        v859 = v854 * *(float *)&v855;
        LOBYTE(v855) = *(_BYTE *)(v851 + v847);
        v860 = *(float *)&v856 * (float)v855;
        LOBYTE(v856) = *(_BYTE *)(v851 + v849);
        *(float *)&v861 = v857 * (float)v856;
        v862 = v851 + v802;
        v863 = v860 + *(float *)&v861;
        LOBYTE(v861) = *(_BYTE *)(v862 + v847);
        *(float *)&v864 = v858 * (float)v861;
        v865 = v863 + *(float *)&v864;
        LOBYTE(v864) = *(_BYTE *)(v862 + v849);
        LODWORD(v847) = (int)(float)((float)(v865 + (float)(v859 * (float)v864)) * 255.0);
        v866 = v767 * 1.4142;
        v867 = v768 * 1.4142;
        v868 = vcvtms_s32_f32(v644* (float)((float)((float)((float)((float)((float)((float)(COERCE_FLOAT(LODWORD(v867) & 0x807FFFFF | 0x3F800000)* -0.33333)+ 2.0)* COERCE_FLOAT(LODWORD(v867) & 0x807FFFFF | 0x3F800000))+ -1.6667)+ (float)((LODWORD(v867) >> 23) - 127))* 0.69315)- v643));
        v1347[20] = v847;
        if (v868 < 0)
        {
          v869 = 0;
          v870 = 0;
        }
        else
        {
          v869 = v627 - 1;
          v870 = v630;
          if (v629 > v868)
          {
            v870 = v868 / (int)v627;
            v869 = v868 % (int)v627;
          }
        }
        v871 = (float)(1 << v870);
        v872 = v641 * (float)(1.0 / v871);
        v873 = v640 * (float)(1.0 / v871);
        v874 = v866 / v871;
        v875 = (unint64_t *)(v628 + 144 * (v627 * v870 + v869));
        v876 = v875[11];
        v877 = v875[5];
        v878 = (float)(v866 / v871) * 0.5;
        v879.f32[0] = v872 - v878;
        v624.f32[0] = (float)v875[4] + -1.001;
        *(float *)v623.i32 = (float)v875[6] + -1.001;
        v880 = v878 + v872;
        v881.f32[0] = v874 * 0.70711;
        v882 = vmul_n_f32((float32x2_t)0xBF3504F300000000, v874);
        v883.f32[0] = v873 - (float)(0.5 * v882.f32[0]);
        v884 = v882.f32[1] + v883.f32[0];
        v883.f32[1] = v874 * 0.70711;
        v881.f32[1] = v873 + (float)(0.5 * v882.f32[0]);
        v881.f32[2] = v882.f32[0] + v873;
        v881.f32[3] = v881.f32[1];
        *(float32x2_t *)&v883.u32[2] = v882;
        v885 = vaddq_f32(v881, v883);
        v886 = (float32x4_t)vdupq_lane_s32(v623, 0);
        v887 = (float32x4_t)vbicq_s8(vbslq_s8((int8x16_t)vcgtq_f32(v885, v886), (int8x16_t)v886, (int8x16_t)v885), (int8x16_t)vcltzq_f32(v885));
        v888 = (int32x4_t)vcvtq_u32_f32(v887);
        v889 = v876 + v877 * v888.u32[0];
        v890 = vmul_n_f32((float32x2_t)0xBF3504F300000000, v882.f32[0]);
        v891 = v879.f32[0] + v890.f32[1];
        v879.f32[1] = v880;
        v879.f32[2] = v874 + v872;
        v879.f32[3] = v880;
        v892.f32[0] = 0.70711 * v882.f32[0];
        *(float32x2_t *)&v892.u32[2] = v890;
        v892.f32[1] = 0.70711 * v882.f32[0];
        v893 = vaddq_f32(v879, v892);
        v894 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v624.f32, 0);
        v895 = (float32x4_t)vbicq_s8(vbslq_s8((int8x16_t)vcgtq_f32(v893, v894), (int8x16_t)v894, (int8x16_t)v893), (int8x16_t)vcltzq_f32(v893));
        v896 = (int32x4_t)vcvtq_u32_f32(v895);
        v897 = (uint32x4_t)vaddq_s32(v896, v632);
        v898 = (unsigned __int8 *)(v889 + v877 + v896.u32[0]);
        v899 = v876 + v877 * v888.u32[1];
        v900 = (unsigned __int8 *)(v899 + v877 + v896.u32[1]);
        v901 = v876 + v877 * v888.u32[2];
        v902 = v876 + v877 * v888.u32[3];
        v903 = vsubq_f32(vcvtq_f32_u32(v897), v895);
        v904 = vsubq_f32(vcvtq_f32_u32((uint32x4_t)vaddq_s32(v888, v632)), v887);
        v905 = vmulq_f32(v903, v904);
        v906 = vsubq_f32(v895, vcvtq_f32_u32((uint32x4_t)v896));
        v907 = vmulq_f32(v906, v904);
        v908 = vsubq_f32(v887, vcvtq_f32_u32((uint32x4_t)v888));
        v909 = vmulq_f32(v903, v908);
        v910 = vmulq_f32(v906, v908);
        v896.i16[0] = *(unsigned __int8 *)(v889 + v896.u32[0]);
        v896.i16[1] = *(unsigned __int8 *)(v899 + v896.u32[1]);
        v896.i16[2] = *(unsigned __int8 *)(v901 + v896.u32[2]);
        v896.i16[3] = *(unsigned __int8 *)(v902 + v896.u32[3]);
        v911 = vmulq_f32(v905, vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v896.i8)));
        v896.i16[0] = *(unsigned __int8 *)(v889 + v897.u32[0]);
        v896.i16[1] = *(unsigned __int8 *)(v899 + v897.u32[1]);
        v896.i16[2] = *(unsigned __int8 *)(v901 + v897.u32[2]);
        v896.i16[3] = *(unsigned __int8 *)(v902 + v897.u32[3]);
        v912 = vaddq_f32(v911, vmulq_f32(v907, vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v896.i8))));
        v896.i16[0] = *v898;
        v896.i16[1] = *v900;
        v896.i16[2] = *(unsigned __int8 *)(v901 + v877 + v896.u32[2]);
        v896.i16[3] = *(unsigned __int8 *)(v902 + v877 + v896.u32[3]);
        v913 = vaddq_f32(vmulq_f32(v909, vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v896.i8))), v912);
        v896.i16[0] = *(unsigned __int8 *)(v889 + v877 + v897.u32[0]);
        v896.i16[1] = *(unsigned __int8 *)(v899 + v877 + v897.u32[1]);
        v896.i16[2] = *(unsigned __int8 *)(v901 + v877 + v897.u32[2]);
        v896.i16[3] = *(unsigned __int8 *)(v902 + v877 + v897.u32[3]);
        *(int16x4_t *)&v1347[23] = vmovn_s32((int32x4_t)vcvtq_u32_f32(vmulq_f32(vaddq_f32(vmulq_f32(v910, vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v896.i8))), v913), v631)));
        if (v624.f32[0] >= v891)
          v914 = v891;
        else
          v914 = v624.f32[0];
        if (v891 < 0.0)
          v914 = 0.0;
        if (*(float *)v623.i32 >= v884)
          v915 = v884;
        else
          v915 = *(float *)v623.i32;
        if (v884 >= 0.0)
          v916 = v915;
        else
          v916 = 0.0;
        v917 = v914;
        v918 = v916;
        v919 = (v917 + 1);
        v920 = v918 + 1;
        v921 = v876 + v877 * v918;
        v922 = (float)v919 - v914;
        v923 = (float)v920 - v916;
        v924 = v922 * v923;
        *(float *)&v925 = v914 - (float)v914;
        v926 = *(float *)&v925 * v923;
        *(float *)&v927 = (float)v916;
        v928 = v916 - *(float *)&v927;
        v929 = v922 * v928;
        v930 = *(float *)&v925 * v928;
        LOBYTE(v925) = *(_BYTE *)(v921 + v917);
        LOBYTE(v927) = *(_BYTE *)(v921 + v919);
        *(float *)&v931 = v926 * (float)v927;
        v932 = (float)(v924 * (float)v925) + *(float *)&v931;
        LOBYTE(v931) = *(_BYTE *)(v921 + v877 + v917);
        *(float *)&v933 = v929 * (float)v931;
        v934 = v932 + *(float *)&v933;
        LOBYTE(v933) = *(_BYTE *)(v921 + v877 + v919);
        v1347[27] = (int)(float)((float)(v934 + (float)(v930 * (float)v933)) * 255.0);
        v935 = (float)(v872 - v874) + v890.f32[0];
        if (v624.f32[0] >= v935)
          v936 = (float)(v872 - v874) + v890.f32[0];
        else
          v936 = v624.f32[0];
        if (v935 >= 0.0)
          v937 = v936;
        else
          v937 = 0.0;
        v938 = v882.f32[0] + (float)(v873 - v882.f32[0]);
        if (*(float *)v623.i32 >= v938)
          v939 = v938;
        else
          v939 = *(float *)v623.i32;
        if (v938 >= 0.0)
          v940 = v939;
        else
          v940 = 0.0;
        v941 = v937;
        v942 = v940;
        v943 = (v941 + 1);
        v944 = v942 + 1;
        v945 = v876 + v877 * v942;
        v946 = (float)v943 - v937;
        v947 = (float)v944 - v940;
        v948 = v946 * v947;
        v949 = v937 - (float)v937;
        v950 = v949 * v947;
        *(float *)&v951 = (float)v940;
        *(float *)&v952 = v940 - *(float *)&v951;
        v953 = *(float *)&v952 * v946;
        v954 = v949 * *(float *)&v952;
        LOBYTE(v952) = *(_BYTE *)(v945 + v941);
        LOBYTE(v951) = *(_BYTE *)(v945 + v943);
        *(float *)&v955 = v950 * (float)v951;
        v956 = (float)(v948 * (float)v952) + *(float *)&v955;
        LOBYTE(v955) = *(_BYTE *)(v945 + v877 + v941);
        *(float *)&v957 = v953 * (float)v955;
        v958 = v956 + *(float *)&v957;
        LOBYTE(v957) = *(_BYTE *)(v945 + v877 + v943);
        v1347[28] = (int)(float)((float)(v958 + (float)(v954 * (float)v957)) * 255.0);
        v959 = v866 * 1.4142;
        v960 = v867 * 1.4142;
        v961 = vcvtms_s32_f32(v644* (float)((float)((float)((float)((float)((float)((float)(COERCE_FLOAT(LODWORD(v960) & 0x807FFFFF | 0x3F800000)* -0.33333)+ 2.0)* COERCE_FLOAT(LODWORD(v960) & 0x807FFFFF | 0x3F800000))+ -1.6667)+ (float)((LODWORD(v960) >> 23) - 127))* 0.69315)- v643));
        if (v961 < 0)
        {
          v962 = 0;
          v963 = 0;
        }
        else
        {
          v962 = v630;
          v963 = v627 - 1;
          if (v629 > v961)
          {
            v962 = v961 / (int)v627;
            v963 = v961 % (int)v627;
          }
        }
        v816.f32[0] = (float)(1 << v962);
        v624.f32[0] = v641 * (float)(1.0 / v816.f32[0]);
        *(float *)v623.i32 = v640 * (float)(1.0 / v816.f32[0]);
        v816.f32[0] = v959 / v816.f32[0];
        v964 = (unint64_t *)(v628 + 144 * (v627 * v962 + v963));
        v621.f32[0] = (float)v964[6] + -1.001;
        v965 = v816.f32[0] * 0.5;
        v966 = v816.f32[0] * -0.5;
        v967 = vmul_n_f32((float32x2_t)0x3F3504F300000000, v816.f32[0]);
        v968 = vmul_n_f32((float32x2_t)0x3F3504F300000000, v967.f32[0]);
        *(float32x2_t *)v784.f32 = vadd_f32((float32x2_t)vdup_lane_s32(v623, 0), v968);
        v969 = vsubq_f32(v784, v816).u32[0];
        v816.f32[1] = v816.f32[0] * 0.5;
        v970 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v621.f32, 0);
        v816.i32[2] = v784.i32[1];
        *(float *)v622.i32 = (float)v964[4] + -1.001;
        v784.f32[2] = v816.f32[0] * -0.5;
        v971 = vaddq_f32(v784, v816);
        v972 = v971;
        v972.i32[0] = v969;
        v972.i32[3] = v971.i32[0];
        v976 = (float32x4_t)vcgtq_f32(v972, v970);
        v973 = (float32x4_t)vbicq_s8(vbslq_s8((int8x16_t)v976, (int8x16_t)v970, (int8x16_t)v972), (int8x16_t)vcltzq_f32(v972));
        v974 = (int32x4_t)vcvtq_u32_f32(v973);
        v975 = v974.u32[0];
        *(float32x2_t *)v971.f32 = vadd_f32(v967, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v624.f32, 0));
        v976.f32[0] = 0.5 * v967.f32[0];
        *(int32x2_t *)v972.f32 = vrev64_s32(*(int32x2_t *)v971.f32);
        v977 = vsub_f32(*(float32x2_t *)v971.f32, v967).u32[0];
        v971.f32[2] = -0.5 * v967.f32[0];
        v971.i32[3] = v967.i32[0];
        v972.i64[1] = v972.i64[0];
        v972.f32[1] = 0.5 * v967.f32[0];
        v978 = vaddq_f32(v971, v972);
        v978.i32[0] = v977;
        v979 = (float32x4_t)vdupq_lane_s32(v622, 0);
        v980 = (float32x4_t)vbicq_s8(vbslq_s8((int8x16_t)vcgtq_f32(v978, v979), (int8x16_t)v979, (int8x16_t)v978), (int8x16_t)vcltzq_f32(v978));
        v981 = (int32x4_t)vcvtq_u32_f32(v980);
        v982 = (uint32x4_t)vaddq_s32(v981, v632);
        v983 = v974.u32[1];
        v984 = v974.u32[2];
        v985 = vsubq_f32(vcvtq_f32_u32(v982), v980);
        v986 = vsubq_f32(v980, vcvtq_f32_u32((uint32x4_t)v981));
        v987 = v974.u32[3];
        v988 = vsubq_f32(vcvtq_f32_u32((uint32x4_t)vaddq_s32(v974, v632)), v973);
        v989 = vsubq_f32(v973, vcvtq_f32_u32((uint32x4_t)v974));
        v990 = vmulq_f32(v985, v988);
        v991 = vmulq_f32(v986, v988);
        v992 = vmulq_f32(v985, v989);
        v993 = vmulq_f32(v986, v989);
        v994 = v964[5];
        v995 = v964[11];
        v996 = v995 + v994 * v975;
        v997 = v981.u32[0];
        v998 = v995 + v994 * v983;
        v999 = v981.u32[1];
        v1000 = v995 + v994 * v984;
        v1001 = v995 + v994 * v987;
        v986.i16[0] = *(unsigned __int8 *)(v996 + v981.u32[0]);
        v986.i16[1] = *(unsigned __int8 *)(v998 + v981.u32[1]);
        v986.i16[2] = *(unsigned __int8 *)(v1000 + v981.u32[2]);
        v986.i16[3] = *(unsigned __int8 *)(v1001 + v981.u32[3]);
        v981.i16[0] = *(unsigned __int8 *)(v996 + v982.u32[0]);
        v981.i16[1] = *(unsigned __int8 *)(v998 + v982.u32[1]);
        v981.i16[2] = *(unsigned __int8 *)(v1000 + v982.u32[2]);
        v981.i16[3] = *(unsigned __int8 *)(v1001 + v982.u32[3]);
        v1002 = v996 + v994;
        v1003 = v998 + v994;
        v1004 = v1000 + v994;
        v1005 = v1001 + v994;
        v1006 = vaddq_f32(vmulq_f32(v990, vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v986.f32))), vmulq_f32(v991, vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v981.i8))));
        v981.i16[0] = *(unsigned __int8 *)(v1002 + v997);
        v981.i16[1] = *(unsigned __int8 *)(v1003 + v999);
        v981.i16[2] = *(unsigned __int8 *)(v1004 + v981.u32[2]);
        v981.i16[3] = *(unsigned __int8 *)(v1005 + v981.u32[3]);
        v1007 = vaddq_f32(vmulq_f32(v992, vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v981.i8))), v1006);
        v981.i16[0] = *(unsigned __int8 *)(v1002 + v982.u32[0]);
        v981.i16[1] = *(unsigned __int8 *)(v1003 + v982.u32[1]);
        v981.i16[2] = *(unsigned __int8 *)(v1004 + v982.u32[2]);
        v981.i16[3] = *(unsigned __int8 *)(v1005 + v982.u32[3]);
        v1008 = (float32x4_t)vcvtq_u32_f32(vmulq_f32(vaddq_f32(vmulq_f32(v993, vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v981.i8))), v1007), v631));
        *(int16x4_t *)v1008.f32 = vmovn_s32((int32x4_t)v1008);
        v1009 = v624.f32[0] - v967.f32[1];
        v624.f32[0] = (float)(v624.f32[0] - v967.f32[1]) + (float)(-0.5 * v967.f32[0]);
        if (*(float *)v622.i32 >= v624.f32[0])
          v1010 = v624.f32[0];
        else
          v1010 = (float)v964[4] + -1.001;
        if (v624.f32[0] >= 0.0)
          v1011 = v1010;
        else
          v1011 = 0.0;
        v1012 = *(float *)v623.i32 - v968.f32[1];
        v1013 = v966 + v1012;
        if (v621.f32[0] >= v1013)
          v1014 = v1013;
        else
          v1014 = (float)v964[6] + -1.001;
        if (v1013 >= 0.0)
          v1015 = v1014;
        else
          v1015 = 0.0;
        v1016 = v1011;
        v1017 = v1015;
        *(_QWORD *)&v1347[31] = v1008.i64[0];
        v1018 = (v1016 + 1);
        v1019 = v1017 + 1;
        v1020 = v995 + v994 * v1017;
        v1021 = (float)v1018 - v1011;
        v1022 = (float)v1019 - v1015;
        v1023 = v1011 - (float)v1011;
        *(float *)&v1024 = v1015 - (float)v1015;
        *(float *)&v1025 = v1021 * v1022;
        v1026 = v1023 * v1022;
        v1027 = v1021 * *(float *)&v1024;
        v1028 = v1023 * *(float *)&v1024;
        LOBYTE(v1024) = *(_BYTE *)(v1020 + v1016);
        v1029 = *(float *)&v1025 * (float)v1024;
        LOBYTE(v1025) = *(_BYTE *)(v1020 + v1018);
        *(float *)&v1030 = v1026 * (float)v1025;
        v1031 = v1020 + v994;
        v1032 = v1029 + *(float *)&v1030;
        LOBYTE(v1030) = *(_BYTE *)(v1031 + v1016);
        *(float *)&v1033 = (float)v1030;
        v1034 = v1027 * *(float *)&v1033;
        LOBYTE(v1033) = *(_BYTE *)(v1031 + v1018);
        LODWORD(v1016) = (int)(float)((float)((float)(v1032 + v1034) + (float)(v1028 * (float)v1033)) * 255.0);
        v1035 = v1009 + v976.f32[0];
        v1347[35] = v1016;
        if (*(float *)v622.i32 >= (float)(v1009 + v976.f32[0]))
          v1036 = v1009 + v976.f32[0];
        else
          v1036 = *(float *)v622.i32;
        if (v1035 >= 0.0)
          v1037 = v1036;
        else
          v1037 = 0.0;
        if (v621.f32[0] >= (float)(v965 + v1012))
          v621.f32[0] = v965 + v1012;
        if ((float)(v965 + v1012) >= 0.0)
          v1038 = v621.f32[0];
        else
          v1038 = 0.0;
        v1039 = v1037;
        v1040 = v1038;
        v1041 = (v1039 + 1);
        v1042 = v1040 + 1;
        v1043 = v995 + v994 * v1040;
        v1044 = (float)v1041 - v1037;
        v1045 = (float)v1042 - v1038;
        v1046 = v1037 - (float)v1037;
        *(float *)&v1047 = v1038 - (float)v1038;
        *(float *)&v1048 = v1044 * v1045;
        v1049 = v1046 * v1045;
        v1050 = v1044 * *(float *)&v1047;
        v1051 = v1046 * *(float *)&v1047;
        LOBYTE(v1047) = *(_BYTE *)(v1043 + v1039);
        v1052 = *(float *)&v1048 * (float)v1047;
        LOBYTE(v1048) = *(_BYTE *)(v1043 + v1041);
        *(float *)&v1053 = v1049 * (float)v1048;
        v1054 = v1043 + v994;
        v1055 = v1052 + *(float *)&v1053;
        LOBYTE(v1053) = *(_BYTE *)(v1054 + v1039);
        *(float *)&v1056 = v1050 * (float)v1053;
        v1057 = v1055 + *(float *)&v1056;
        LOBYTE(v1056) = *(_BYTE *)(v1054 + v1041);
        v1058 = v959 * 1.4142;
        v1059 = v960 * 1.4142;
        v1060 = vcvtms_s32_f32(v644* (float)((float)((float)((float)((float)((float)((float)(COERCE_FLOAT(LODWORD(v1059) & 0x807FFFFF | 0x3F800000)* -0.33333)+ 2.0)* COERCE_FLOAT(LODWORD(v1059) & 0x807FFFFF | 0x3F800000))+ -1.6667)+ (float)((LODWORD(v1059) >> 23) - 127))* 0.69315)- v643));
        v1347[36] = (int)(float)((float)(v1057 + (float)(v1051 * (float)v1056)) * 255.0);
        if (v1060 < 0)
        {
          v1061 = 0;
          v1062 = 0;
        }
        else
        {
          v1061 = v630;
          v1062 = v627 - 1;
          if (v629 > v1060)
          {
            v1061 = v1060 / (int)v627;
            v1062 = v1060 % (int)v627;
          }
        }
        v1063 = (float)(1 << v1061);
        v1064 = v641 * (float)(1.0 / v1063);
        v1065 = v640 * (float)(1.0 / v1063);
        v1066 = v1058 / v1063;
        v1067 = (unint64_t *)(v628 + 144 * (v627 * v1061 + v1062));
        v1068 = v1067[11];
        v1069 = v1067[5];
        v1070 = (float)(v1058 / v1063) * 0.5;
        v1071.f32[0] = v1064 - v1070;
        v624.f32[0] = (float)v1067[4] + -1.001;
        *(float *)v623.i32 = (float)v1067[6] + -1.001;
        v1072 = v1070 + v1064;
        v1073.f32[0] = v1066 * 0.70711;
        v1074 = vmul_n_f32((float32x2_t)0xBF3504F300000000, v1066);
        v1075.f32[0] = v1065 - (float)(0.5 * v1074.f32[0]);
        v1076 = v1074.f32[1] + v1075.f32[0];
        v1075.f32[1] = v1066 * 0.70711;
        v1073.f32[1] = v1065 + (float)(0.5 * v1074.f32[0]);
        v1073.f32[2] = v1074.f32[0] + v1065;
        v1073.f32[3] = v1073.f32[1];
        *(float32x2_t *)&v1075.u32[2] = v1074;
        v1077 = vaddq_f32(v1073, v1075);
        v1078 = (float32x4_t)vdupq_lane_s32(v623, 0);
        v1079 = (float32x4_t)vbicq_s8(vbslq_s8((int8x16_t)vcgtq_f32(v1077, v1078), (int8x16_t)v1078, (int8x16_t)v1077), (int8x16_t)vcltzq_f32(v1077));
        v1080 = (int32x4_t)vcvtq_u32_f32(v1079);
        v1081 = v1068 + v1069 * v1080.u32[0];
        v1082 = vmul_n_f32((float32x2_t)0xBF3504F300000000, v1074.f32[0]);
        v1083 = v1071.f32[0] + v1082.f32[1];
        v1071.f32[1] = v1072;
        v1071.f32[2] = v1066 + v1064;
        v1071.f32[3] = v1072;
        v1084.f32[0] = 0.70711 * v1074.f32[0];
        *(float32x2_t *)&v1084.u32[2] = v1082;
        v1084.f32[1] = 0.70711 * v1074.f32[0];
        v1085 = vaddq_f32(v1071, v1084);
        v1086 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v624.f32, 0);
        v1087 = (float32x4_t)vbicq_s8(vbslq_s8((int8x16_t)vcgtq_f32(v1085, v1086), (int8x16_t)v1086, (int8x16_t)v1085), (int8x16_t)vcltzq_f32(v1085));
        v1088 = (int32x4_t)vcvtq_u32_f32(v1087);
        v1089 = (uint32x4_t)vaddq_s32(v1088, v632);
        v1090 = (unsigned __int8 *)(v1081 + v1069 + v1088.u32[0]);
        v1091 = v1068 + v1069 * v1080.u32[1];
        v1092 = (unsigned __int8 *)(v1091 + v1069 + v1088.u32[1]);
        v1093 = v1068 + v1069 * v1080.u32[2];
        v1094 = v1068 + v1069 * v1080.u32[3];
        v1095 = vsubq_f32(vcvtq_f32_u32(v1089), v1087);
        v1096 = vsubq_f32(vcvtq_f32_u32((uint32x4_t)vaddq_s32(v1080, v632)), v1079);
        v1097 = vmulq_f32(v1095, v1096);
        v1098 = vsubq_f32(v1087, vcvtq_f32_u32((uint32x4_t)v1088));
        v1099 = vmulq_f32(v1098, v1096);
        v1100 = vsubq_f32(v1079, vcvtq_f32_u32((uint32x4_t)v1080));
        v1101 = vmulq_f32(v1095, v1100);
        v1102 = vmulq_f32(v1098, v1100);
        v1088.i16[0] = *(unsigned __int8 *)(v1081 + v1088.u32[0]);
        v1088.i16[1] = *(unsigned __int8 *)(v1091 + v1088.u32[1]);
        v1088.i16[2] = *(unsigned __int8 *)(v1093 + v1088.u32[2]);
        v1088.i16[3] = *(unsigned __int8 *)(v1094 + v1088.u32[3]);
        v1103 = vmulq_f32(v1097, vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v1088.i8)));
        v1088.i16[0] = *(unsigned __int8 *)(v1081 + v1089.u32[0]);
        v1088.i16[1] = *(unsigned __int8 *)(v1091 + v1089.u32[1]);
        v1088.i16[2] = *(unsigned __int8 *)(v1093 + v1089.u32[2]);
        v1088.i16[3] = *(unsigned __int8 *)(v1094 + v1089.u32[3]);
        v1104 = vaddq_f32(v1103, vmulq_f32(v1099, vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v1088.i8))));
        v1088.i16[0] = *v1090;
        v1088.i16[1] = *v1092;
        v1088.i16[2] = *(unsigned __int8 *)(v1093 + v1069 + v1088.u32[2]);
        v1088.i16[3] = *(unsigned __int8 *)(v1094 + v1069 + v1088.u32[3]);
        v1105 = vaddq_f32(vmulq_f32(v1101, vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v1088.i8))), v1104);
        v1088.i16[0] = *(unsigned __int8 *)(v1081 + v1069 + v1089.u32[0]);
        v1088.i16[1] = *(unsigned __int8 *)(v1091 + v1069 + v1089.u32[1]);
        v1088.i16[2] = *(unsigned __int8 *)(v1093 + v1069 + v1089.u32[2]);
        v1088.i16[3] = *(unsigned __int8 *)(v1094 + v1069 + v1089.u32[3]);
        *(int16x4_t *)&v1347[39] = vmovn_s32((int32x4_t)vcvtq_u32_f32(vmulq_f32(vaddq_f32(vmulq_f32(v1102, vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v1088.i8))), v1105), v631)));
        if (v624.f32[0] >= v1083)
          v1106 = v1083;
        else
          v1106 = v624.f32[0];
        if (v1083 < 0.0)
          v1106 = 0.0;
        if (*(float *)v623.i32 >= v1076)
          v1107 = v1076;
        else
          v1107 = *(float *)v623.i32;
        if (v1076 >= 0.0)
          v1108 = v1107;
        else
          v1108 = 0.0;
        v1109 = v1106;
        v1110 = v1108;
        v1111 = (v1109 + 1);
        v1112 = v1110 + 1;
        v1113 = v1068 + v1069 * v1110;
        v1114 = (float)v1111 - v1106;
        v1115 = (float)v1112 - v1108;
        v1116 = v1114 * v1115;
        *(float *)&v1117 = v1106 - (float)v1106;
        v1118 = *(float *)&v1117 * v1115;
        *(float *)&v1119 = (float)v1108;
        v1120 = v1108 - *(float *)&v1119;
        v1121 = v1114 * v1120;
        v1122 = *(float *)&v1117 * v1120;
        LOBYTE(v1117) = *(_BYTE *)(v1113 + v1109);
        LOBYTE(v1119) = *(_BYTE *)(v1113 + v1111);
        *(float *)&v1123 = v1118 * (float)v1119;
        v1124 = (float)(v1116 * (float)v1117) + *(float *)&v1123;
        LOBYTE(v1123) = *(_BYTE *)(v1113 + v1069 + v1109);
        *(float *)&v1125 = v1121 * (float)v1123;
        v1126 = v1124 + *(float *)&v1125;
        LOBYTE(v1125) = *(_BYTE *)(v1113 + v1069 + v1111);
        v1347[43] = (int)(float)((float)(v1126 + (float)(v1122 * (float)v1125)) * 255.0);
        v1127 = (float)(v1064 - v1066) + v1082.f32[0];
        if (v624.f32[0] >= v1127)
          v1128 = (float)(v1064 - v1066) + v1082.f32[0];
        else
          v1128 = v624.f32[0];
        if (v1127 >= 0.0)
          v1129 = v1128;
        else
          v1129 = 0.0;
        v1130 = v1074.f32[0] + (float)(v1065 - v1074.f32[0]);
        if (*(float *)v623.i32 >= v1130)
          v1131 = v1130;
        else
          v1131 = *(float *)v623.i32;
        if (v1130 >= 0.0)
          v1132 = v1131;
        else
          v1132 = 0.0;
        v1133 = v1129;
        v1134 = v1132;
        v1135 = (v1133 + 1);
        v1136 = v1134 + 1;
        v1137 = v1068 + v1069 * v1134;
        v1138 = (float)v1135 - v1129;
        v1139 = (float)v1136 - v1132;
        v1140 = v1138 * v1139;
        v1141 = v1129 - (float)v1129;
        v1142 = v1141 * v1139;
        *(float *)&v1143 = (float)v1132;
        *(float *)&v1144 = v1132 - *(float *)&v1143;
        v1145 = v1138 * *(float *)&v1144;
        v1146 = v1141 * *(float *)&v1144;
        LOBYTE(v1144) = *(_BYTE *)(v1137 + v1133);
        LOBYTE(v1143) = *(_BYTE *)(v1137 + v1135);
        *(float *)&v1147 = v1142 * (float)v1143;
        v1148 = (float)(v1140 * (float)v1144) + *(float *)&v1147;
        LOBYTE(v1147) = *(_BYTE *)(v1137 + v1069 + v1133);
        *(float *)&v1149 = v1145 * (float)v1147;
        v1150 = v1148 + *(float *)&v1149;
        LOBYTE(v1149) = *(_BYTE *)(v1137 + v1069 + v1135);
        v1347[44] = (int)(float)((float)(v1150 + (float)(v1146 * (float)v1149)) * 255.0);
        v1151 = v1058 * 1.4142;
        v1152 = v1059 * 1.4142;
        v1153 = vcvtms_s32_f32(v644* (float)((float)((float)((float)((float)((float)((float)(COERCE_FLOAT(COERCE_UNSIGNED_INT(v1059 * 1.4142) & 0x807FFFFF | 0x3F800000)* -0.33333)+ 2.0)* COERCE_FLOAT(COERCE_UNSIGNED_INT(v1059 * 1.4142) & 0x807FFFFF | 0x3F800000))+ -1.6667)+ (float)((COERCE_UNSIGNED_INT(v1059 * 1.4142) >> 23) - 127))* 0.69315)- v643));
        if (v1153 < 0)
        {
          v1154 = 0;
          v1155 = 0;
        }
        else
        {
          v1154 = v630;
          v1155 = v627 - 1;
          if (v629 > v1153)
          {
            v1154 = v1153 / (int)v627;
            v1155 = v1153 % (int)v627;
          }
        }
        v1008.f32[0] = (float)(1 << v1154);
        v624.f32[0] = v641 * (float)(1.0 / v1008.f32[0]);
        *(float *)v623.i32 = v640 * (float)(1.0 / v1008.f32[0]);
        v1008.f32[0] = v1151 / v1008.f32[0];
        v1156 = (unint64_t *)(v628 + 144 * (v627 * v1154 + v1155));
        *(float *)v620.i32 = (float)v1156[6] + -1.001;
        v1157 = v1008.f32[0] * 0.5;
        v1158 = v1008.f32[0] * -0.5;
        v1159 = vmul_n_f32((float32x2_t)0x3F3504F300000000, v1008.f32[0]);
        v1160 = vmul_n_f32((float32x2_t)0x3F3504F300000000, v1159.f32[0]);
        *(float32x2_t *)v976.f32 = vadd_f32((float32x2_t)vdup_lane_s32(v623, 0), v1160);
        v1161 = vsubq_f32(v976, v1008).u32[0];
        v1008.f32[1] = v1008.f32[0] * 0.5;
        v1162 = (float32x4_t)vdupq_lane_s32(v620, 0);
        v1008.i32[2] = v976.i32[1];
        *(float *)v622.i32 = (float)v1156[4] + -1.001;
        v976.f32[2] = v1008.f32[0] * -0.5;
        v1163 = vaddq_f32(v976, v1008);
        v1164 = v1163;
        v1164.i32[0] = v1161;
        v1164.i32[3] = v1163.i32[0];
        v1165 = (float32x4_t)vbicq_s8(vbslq_s8((int8x16_t)vcgtq_f32(v1164, v1162), (int8x16_t)v1162, (int8x16_t)v1164), (int8x16_t)vcltzq_f32(v1164));
        v1166 = (int32x4_t)vcvtq_u32_f32(v1165);
        v1167 = v1166.u32[0];
        *(float32x2_t *)v1163.f32 = vadd_f32(v1159, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v624.f32, 0));
        v1168 = 0.5 * v1159.f32[0];
        *(int32x2_t *)v1164.f32 = vrev64_s32(*(int32x2_t *)v1163.f32);
        v1169 = vsub_f32(*(float32x2_t *)v1163.f32, v1159).u32[0];
        v1163.f32[2] = -0.5 * v1159.f32[0];
        v1163.i32[3] = v1159.i32[0];
        v1164.i64[1] = v1164.i64[0];
        v1164.f32[1] = 0.5 * v1159.f32[0];
        v1170 = vaddq_f32(v1163, v1164);
        v1170.i32[0] = v1169;
        v1171 = (float32x4_t)vdupq_lane_s32(v622, 0);
        v1172 = (float32x4_t)vbicq_s8(vbslq_s8((int8x16_t)vcgtq_f32(v1170, v1171), (int8x16_t)v1171, (int8x16_t)v1170), (int8x16_t)vcltzq_f32(v1170));
        v1173 = (int32x4_t)vcvtq_u32_f32(v1172);
        v1174 = (uint32x4_t)vaddq_s32(v1173, v632);
        v1175 = v1166.u32[1];
        v1176 = v1166.u32[2];
        v1177 = vsubq_f32(vcvtq_f32_u32(v1174), v1172);
        v1178 = vsubq_f32(v1172, vcvtq_f32_u32((uint32x4_t)v1173));
        v1179 = v1166.u32[3];
        v1180 = vsubq_f32(vcvtq_f32_u32((uint32x4_t)vaddq_s32(v1166, v632)), v1165);
        v1181 = vsubq_f32(v1165, vcvtq_f32_u32((uint32x4_t)v1166));
        v1182 = vmulq_f32(v1177, v1180);
        v1183 = vmulq_f32(v1178, v1180);
        v1184 = vmulq_f32(v1177, v1181);
        v1185 = vmulq_f32(v1178, v1181);
        v1186 = v1156[5];
        v1187 = v1156[11];
        v1188 = v1187 + v1186 * v1167;
        v1189 = v1173.u32[0];
        v1190 = v1187 + v1186 * v1175;
        v1191 = v1173.u32[1];
        v1192 = v1187 + v1186 * v1176;
        v1193 = v1187 + v1186 * v1179;
        v1178.i16[0] = *(unsigned __int8 *)(v1188 + v1173.u32[0]);
        v1178.i16[1] = *(unsigned __int8 *)(v1190 + v1173.u32[1]);
        v1178.i16[2] = *(unsigned __int8 *)(v1192 + v1173.u32[2]);
        v1178.i16[3] = *(unsigned __int8 *)(v1193 + v1173.u32[3]);
        v1173.i16[0] = *(unsigned __int8 *)(v1188 + v1174.u32[0]);
        v1173.i16[1] = *(unsigned __int8 *)(v1190 + v1174.u32[1]);
        v1173.i16[2] = *(unsigned __int8 *)(v1192 + v1174.u32[2]);
        v1173.i16[3] = *(unsigned __int8 *)(v1193 + v1174.u32[3]);
        v1194 = v1188 + v1186;
        v1195 = v1190 + v1186;
        v1196 = v1192 + v1186;
        v1197 = v1193 + v1186;
        v1198 = vaddq_f32(vmulq_f32(v1182, vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v1178.f32))), vmulq_f32(v1183, vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v1173.i8))));
        v1173.i16[0] = *(unsigned __int8 *)(v1194 + v1189);
        v1173.i16[1] = *(unsigned __int8 *)(v1195 + v1191);
        v1173.i16[2] = *(unsigned __int8 *)(v1196 + v1173.u32[2]);
        v1173.i16[3] = *(unsigned __int8 *)(v1197 + v1173.u32[3]);
        v1199 = vaddq_f32(vmulq_f32(v1184, vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v1173.i8))), v1198);
        v1173.i16[0] = *(unsigned __int8 *)(v1194 + v1174.u32[0]);
        v1173.i16[1] = *(unsigned __int8 *)(v1195 + v1174.u32[1]);
        v1173.i16[2] = *(unsigned __int8 *)(v1196 + v1174.u32[2]);
        v1173.i16[3] = *(unsigned __int8 *)(v1197 + v1174.u32[3]);
        v1200 = vmovn_s32((int32x4_t)vcvtq_u32_f32(vmulq_f32(vaddq_f32(vmulq_f32(v1185, vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v1173.i8))), v1199), v631)));
        v1201 = v624.f32[0] - v1159.f32[1];
        v624.f32[0] = (float)(v624.f32[0] - v1159.f32[1]) + (float)(-0.5 * v1159.f32[0]);
        if (*(float *)v622.i32 >= v624.f32[0])
          v1202 = v624.f32[0];
        else
          v1202 = (float)v1156[4] + -1.001;
        if (v624.f32[0] >= 0.0)
          v1203 = v1202;
        else
          v1203 = 0.0;
        v1204 = *(float *)v623.i32 - v1160.f32[1];
        v1205 = v1158 + v1204;
        if (*(float *)v620.i32 >= v1205)
          v1206 = v1205;
        else
          v1206 = (float)v1156[6] + -1.001;
        if (v1205 >= 0.0)
          v1207 = v1206;
        else
          v1207 = 0.0;
        v1208 = v1203;
        v1209 = v1207;
        *(int16x4_t *)&v1347[47] = v1200;
        v1210 = (v1208 + 1);
        v1211 = v1209 + 1;
        v1212 = v1187 + v1186 * v1209;
        v1213 = (float)v1210 - v1203;
        v1214 = (float)v1211 - v1207;
        v1215 = v1203 - (float)v1203;
        *(float *)&v1216 = v1207 - (float)v1207;
        *(float *)&v1217 = v1213 * v1214;
        v1218 = v1215 * v1214;
        v1219 = v1213 * *(float *)&v1216;
        v1220 = v1215 * *(float *)&v1216;
        LOBYTE(v1216) = *(_BYTE *)(v1212 + v1208);
        v1221 = *(float *)&v1217 * (float)v1216;
        LOBYTE(v1217) = *(_BYTE *)(v1212 + v1210);
        *(float *)&v1222 = v1218 * (float)v1217;
        v1223 = v1212 + v1186;
        v1224 = v1221 + *(float *)&v1222;
        LOBYTE(v1222) = *(_BYTE *)(v1223 + v1208);
        *(float *)&v1225 = (float)v1222;
        v1226 = v1219 * *(float *)&v1225;
        LOBYTE(v1225) = *(_BYTE *)(v1223 + v1210);
        LODWORD(v1208) = (int)(float)((float)((float)(v1224 + v1226) + (float)(v1220 * (float)v1225)) * 255.0);
        v1227 = v1201 + v1168;
        v1347[51] = v1208;
        if (*(float *)v622.i32 >= (float)(v1201 + v1168))
          v1228 = v1201 + v1168;
        else
          v1228 = *(float *)v622.i32;
        if (v1227 >= 0.0)
          v1229 = v1228;
        else
          v1229 = 0.0;
        if (*(float *)v620.i32 >= (float)(v1157 + v1204))
          *(float *)v620.i32 = v1157 + v1204;
        if ((float)(v1157 + v1204) >= 0.0)
          v1230 = *(float *)v620.i32;
        else
          v1230 = 0.0;
        v1231 = v1229;
        v1232 = v1230;
        v1233 = (v1231 + 1);
        v1234 = v1232 + 1;
        v1235 = v1187 + v1186 * v1232;
        v1236 = (float)v1233 - v1229;
        v1237 = (float)v1234 - v1230;
        v1238 = v1229 - (float)v1229;
        *(float *)&v1239 = v1230 - (float)v1230;
        *(float *)&v1240 = v1236 * v1237;
        v1241 = v1238 * v1237;
        v1242 = v1236 * *(float *)&v1239;
        v1243 = v1238 * *(float *)&v1239;
        LOBYTE(v1239) = *(_BYTE *)(v1235 + v1231);
        v1244 = *(float *)&v1240 * (float)v1239;
        LOBYTE(v1240) = *(_BYTE *)(v1235 + v1233);
        *(float *)&v1245 = v1241 * (float)v1240;
        v1246 = v1235 + v1186;
        v1247 = v1244 + *(float *)&v1245;
        LOBYTE(v1245) = *(_BYTE *)(v1246 + v1231);
        *(float *)&v1248 = v1242 * (float)v1245;
        v1249 = v1247 + *(float *)&v1248;
        LOBYTE(v1248) = *(_BYTE *)(v1246 + v1233);
        LODWORD(v1231) = (int)(float)((float)(v1249 + (float)(v1243 * (float)v1248)) * 255.0);
        v1250 = v1151 * 1.4142;
        v1251 = vcvtms_s32_f32(v644* (float)((float)((float)((float)((float)((float)((float)(COERCE_FLOAT(COERCE_UNSIGNED_INT(v1152 * 1.4142) & 0x807FFFFF | 0x3F800000)* -0.33333)+ 2.0)* COERCE_FLOAT(COERCE_UNSIGNED_INT(v1152 * 1.4142) & 0x807FFFFF | 0x3F800000))+ -1.6667)+ (float)((COERCE_UNSIGNED_INT(v1152 * 1.4142) >> 23) - 127))* 0.69315)- v643));
        v1347[52] = v1231;
        if (v1251 < 0)
        {
          v1252 = 0;
          v1253 = 0;
        }
        else
        {
          v1252 = v630;
          v1253 = v627 - 1;
          if (v629 > v1251)
          {
            v1252 = v1251 / (int)v627;
            v1253 = v1251 % (int)v627;
          }
        }
        v1254 = 0;
        v1255 = (float)(1 << v1252);
        v1256 = v641 * (float)(1.0 / v1255);
        v1257 = v640 * (float)(1.0 / v1255);
        v1258 = v1250 / v1255;
        v1259 = (unint64_t *)(v628 + 144 * (v627 * v1252 + v1253));
        v1260 = v1259[11];
        v1261 = v1259[5];
        v1262 = (float)(v1250 / v1255) * 0.5;
        v1263.f32[0] = v1256 - v1262;
        *(float *)v619.i32 = (float)v1259[4] + -1.001;
        *(float *)v618.i32 = (float)v1259[6] + -1.001;
        v1264 = v1262 + v1256;
        v1265.f32[0] = v1258 * 0.70711;
        v620 = (int32x2_t)vmul_n_f32((float32x2_t)0xBF3504F300000000, v1258);
        v1266.f32[0] = v1257 - (float)(0.5 * *(float *)v620.i32);
        v1267 = *(float *)&v620.i32[1] + v1266.f32[0];
        v1266.f32[1] = v1258 * 0.70711;
        v1265.f32[1] = v1257 + (float)(0.5 * *(float *)v620.i32);
        v1265.f32[2] = *(float *)v620.i32 + v1257;
        v1265.f32[3] = v1265.f32[1];
        *(int32x2_t *)&v1266.u32[2] = v620;
        v1268 = vaddq_f32(v1265, v1266);
        v1269 = (float32x4_t)vdupq_lane_s32(v618, 0);
        v1270 = (float32x4_t)vbicq_s8(vbslq_s8((int8x16_t)vcgtq_f32(v1268, v1269), (int8x16_t)v1269, (int8x16_t)v1268), (int8x16_t)vcltzq_f32(v1268));
        v1271 = (int32x4_t)vcvtq_u32_f32(v1270);
        v1272 = v1260 + v1261 * v1271.u32[0];
        v623 = (int32x2_t)vmul_n_f32((float32x2_t)0xBF3504F300000000, *(float *)v620.i32);
        v1273 = v1263.f32[0] + *(float *)&v623.i32[1];
        v1263.f32[1] = v1264;
        v1263.f32[2] = v1258 + v1256;
        v1263.f32[3] = v1264;
        v1274.f32[0] = 0.70711 * *(float *)v620.i32;
        *(int32x2_t *)&v1274.u32[2] = v623;
        v1274.f32[1] = 0.70711 * *(float *)v620.i32;
        v1275 = vaddq_f32(v1263, v1274);
        v1276 = (float32x4_t)vdupq_lane_s32(v619, 0);
        v1277 = (float32x4_t)vbicq_s8(vbslq_s8((int8x16_t)vcgtq_f32(v1275, v1276), (int8x16_t)v1276, (int8x16_t)v1275), (int8x16_t)vcltzq_f32(v1275));
        v1278 = (int32x4_t)vcvtq_u32_f32(v1277);
        v1279 = (uint32x4_t)vaddq_s32(v1278, v632);
        v1280 = (unsigned __int8 *)(v1272 + v1261 + v1278.u32[0]);
        v1281 = (unsigned __int8 *)(v1272 + v1261 + v1279.u32[0]);
        v1282 = v1260 + v1261 * v1271.u32[1];
        v1283 = (unsigned __int8 *)(v1282 + v1261 + v1278.u32[1]);
        v1284 = (unsigned __int8 *)(v1282 + v1261 + v1279.u32[1]);
        v1285 = v1260 + v1261 * v1271.u32[2];
        v1286 = (unsigned __int8 *)(v1285 + v1261 + v1278.u32[2]);
        v1287 = v1260 + v1261 * v1271.u32[3];
        v1288 = vsubq_f32(vcvtq_f32_u32(v1279), v1277);
        v1289 = vsubq_f32(vcvtq_f32_u32((uint32x4_t)vaddq_s32(v1271, v632)), v1270);
        v1290 = vsubq_f32(v1277, vcvtq_f32_u32((uint32x4_t)v1278));
        v624 = vsubq_f32(v1270, vcvtq_f32_u32((uint32x4_t)v1271));
        v625 = vmulq_f32(v1288, v624);
        v1291 = v1278.u32[3];
        v1278.i16[0] = *(unsigned __int8 *)(v1272 + v1278.u32[0]);
        v1278.i16[1] = *(unsigned __int8 *)(v1282 + v1278.u32[1]);
        v1278.i16[2] = *(unsigned __int8 *)(v1285 + v1278.u32[2]);
        v1278.i16[3] = *(unsigned __int8 *)(v1287 + v1278.u32[3]);
        v1279.i16[0] = *(unsigned __int8 *)(v1272 + v1279.u32[0]);
        v1279.i16[1] = *(unsigned __int8 *)(v1282 + v1279.u32[1]);
        v1279.i16[2] = *(unsigned __int8 *)(v1285 + v1279.u32[2]);
        v1279.i16[3] = *(unsigned __int8 *)(v1287 + v1279.u32[3]);
        v1292 = vaddq_f32(vmulq_f32(vmulq_f32(v1288, v1289), vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v1278.i8))), vmulq_f32(vmulq_f32(v1290, v1289), vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v1279.i8))));
        v1279.i16[0] = *v1280;
        v1279.i16[1] = *v1283;
        v1279.i16[2] = *v1286;
        v1279.i16[3] = *(unsigned __int8 *)(v1287 + v1261 + v1291);
        v621 = vaddq_f32(vmulq_f32(v625, vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v1279.i8))), v1292);
        v622.i16[0] = *v1281;
        v622.i16[1] = *v1284;
        v622.i16[2] = *(unsigned __int8 *)(v1285 + v1261 + v1279.u32[2]);
        v622.i16[3] = *(unsigned __int8 *)(v1287 + v1261 + v1279.u32[3]);
        *(int16x4_t *)&v1347[55] = vmovn_s32((int32x4_t)vcvtq_u32_f32(vmulq_f32(vaddq_f32(vmulq_f32(vmulq_f32(v1290, v624), vcvtq_f32_u32(vmovl_u16((uint16x4_t)v622))), v621), v631)));
        if (*(float *)v619.i32 >= v1273)
          v1293 = v1273;
        else
          v1293 = *(float *)v619.i32;
        if (v1273 < 0.0)
          v1293 = 0.0;
        if (*(float *)v618.i32 >= v1267)
          v1294 = v1267;
        else
          v1294 = *(float *)v618.i32;
        if (v1267 >= 0.0)
          v1295 = v1294;
        else
          v1295 = 0.0;
        v1296 = v1293;
        v1297 = v1295;
        v1298 = (v1296 + 1);
        v1299 = v1297 + 1;
        v1300 = v1260 + v1261 * v1297;
        v1301 = (float)v1298 - v1293;
        v1302 = (float)v1299 - v1295;
        *(float *)&v1303 = v1301 * v1302;
        *(float *)&v1304 = v1293 - (float)v1293;
        v1305 = *(float *)&v1304 * v1302;
        v1306 = v1295 - (float)v1295;
        v1307 = v1301 * v1306;
        v1308 = *(float *)&v1304 * v1306;
        LOBYTE(v1304) = *(_BYTE *)(v1300 + v1296);
        v1309 = *(float *)&v1303 * (float)v1304;
        LOBYTE(v1303) = *(_BYTE *)(v1300 + v1298);
        *(float *)&v1310 = v1305 * (float)v1303;
        v1311 = v1309 + *(float *)&v1310;
        LOBYTE(v1310) = *(_BYTE *)(v1300 + v1261 + v1296);
        *(float *)&v1312 = v1307 * (float)v1310;
        v1314.f32[0] = v1311 + *(float *)&v1312;
        LOBYTE(v1312) = *(_BYTE *)(v1300 + v1261 + v1298);
        v1313 = v1314.f32[0] + (float)(v1308 * (float)v1312);
        v1314.i16[1] = 17279;
        v1347[59] = (int)(float)(v1313 * 255.0);
        v1315 = (float)(v1256 - v1258) + *(float *)v623.i32;
        if (*(float *)v619.i32 >= v1315)
          v1316 = (float)(v1256 - v1258) + *(float *)v623.i32;
        else
          v1316 = *(float *)v619.i32;
        if (v1315 >= 0.0)
          v1317 = v1316;
        else
          v1317 = 0.0;
        v1318 = *(float *)v620.i32 + (float)(v1257 - *(float *)v620.i32);
        if (*(float *)v618.i32 >= v1318)
          v1319 = v1318;
        else
          v1319 = *(float *)v618.i32;
        if (v1318 >= 0.0)
          v1320 = v1319;
        else
          v1320 = 0.0;
        v1321 = v1317;
        v1322 = v1320;
        v1323 = (v1321 + 1);
        result = (v1322 + 1);
        v1324 = v1260 + v1261 * v1322;
        v1325 = (float)v1323 - v1317;
        v1326 = (float)result - v1320;
        *(float *)&v1327 = v1325 * v1326;
        v1328 = v1317 - (float)v1317;
        v1329 = v1328 * v1326;
        *(float *)&v1330 = v1320 - (float)v1320;
        v1331 = v1325 * *(float *)&v1330;
        v1332 = v1328 * *(float *)&v1330;
        LOBYTE(v1330) = *(_BYTE *)(v1324 + v1321);
        v1333 = *(float *)&v1327 * (float)v1330;
        LOBYTE(v1327) = *(_BYTE *)(v1324 + v1323);
        *(float *)&v1334 = v1329 * (float)v1327;
        v1335 = v1333 + *(float *)&v1334;
        LOBYTE(v1334) = *(_BYTE *)(v1324 + v1261 + v1321);
        *(float *)&v1336 = v1331 * (float)v1334;
        v1337 = v1335 + *(float *)&v1336;
        LOBYTE(v1336) = *(_BYTE *)(v1324 + v1261 + v1323);
        v1338.f32[0] = (float)(v1337 + (float)(v1332 * (float)v1336)) * 255.0;
        v1347[60] = (int)v1338.f32[0];
        v1339 = 0;
        do
        {
          v1338.i16[0] = v1347[*(unsigned __int16 *)&v1345[v1254] - 1];
          v1314.i16[0] = v1347[*(unsigned __int16 *)&v1345[v1254 + 2] - 1];
          v1340 = (float)v1338.u32[0] - (float)v1314.u32[0];
          v1314 = *(float32x2_t *)&v1345[v1254 + 4];
          v1338 = vmul_n_f32(v1314, v1340);
          v1339 = vadd_f32(v1339, v1338);
          v1254 += 12;
        }
        while (v1254 != 540);
        if (v1339.f32[1] != 0.0 || (v638 = 0.0, v1339.f32[0] != 0.0))
        {
          v633 = fabsf(v1339.f32[1]) + 0.0000001;
          v634 = (float)(v1339.f32[0] + v633) / (float)(v633 - v1339.f32[0]);
          v635 = (float)(v1339.f32[0] - v633) / (float)(v1339.f32[0] + v633);
          v636 = 0.7854;
          if (v1339.f32[0] <= 0.0)
          {
            v636 = 2.3562;
            v635 = v634;
          }
          v637 = v636 + (float)(v635 * (float)((float)(v635 * (float)(v635 * 0.1821)) + -0.9675));
          if (v1339.f32[1] >= 0.0)
            v638 = v637;
          else
            v638 = 6.2832 - v637;
        }
        if (v638 >= 0.0)
          v639 = v638;
        else
          v639 = 0.0;
        if (v639 > 6.2832)
          v639 = 6.2832;
        a1[5].f32[0] = v639;
        a1 += 6;
      }
      while (a1 != a2);
    }
  }
  return result;
}

uint64_t sub_20FD475B8(uint64_t a1, uint64_t a2, float a3, float a4, float a5, float a6)
{
  unsigned int v6;
  unsigned int v11;
  __float2 v12;
  int v13;
  uint64_t v14;
  float v15;
  int v16;
  int v17;
  int v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float v48;
  float v49;
  float v50;
  float v51;
  int v52;
  int v53;
  float v54;
  float v55;
  float v56;
  float v57;
  float v58;
  float v59;
  unint64_t *v60;
  unint64_t v61;
  float v62;
  float v63;
  float v64;
  float v65;
  float v66;
  float v67;
  float v68;
  float v69;
  float v70;
  float v71;
  float v72;
  float v73;
  float v74;
  float v75;
  float v76;
  float v77;
  float v78;
  float v79;
  float v80;
  float v81;
  float v82;
  float v83;
  float v84;
  float v85;
  float v86;
  float v87;
  float v88;
  float v89;
  float v90;
  float v91;
  float v92;
  float v93;
  float v94;
  float v95;
  float v96;
  float v97;
  float v98;
  float v99;
  float v100;
  float v101;
  float v102;
  float v103;
  float v104;
  float v105;
  float v106;
  float v107;
  float v108;
  float v109;
  float v110;
  float v111;
  float v112;
  float v113;
  int v114;
  float v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  int v122;
  int v123;
  float v124;
  float v125;
  float v126;
  float v127;
  float v128;
  float v129;
  float v130;
  unint64_t *v131;
  unint64_t v132;
  float v133;
  float v134;
  float v135;
  float v136;
  float v137;
  float v138;
  float v139;
  float v140;
  float v141;
  float v142;
  float v143;
  float v144;
  float v145;
  float v146;
  float v147;
  float v148;
  float v149;
  float v150;
  float v151;
  float v152;
  float v153;
  float v154;
  float v155;
  float v156;
  float v157;
  float v158;
  float v159;
  float v160;
  float v161;
  float v162;
  float v163;
  float v164;
  float v165;
  float v166;
  float v167;
  float v168;
  float v169;
  float v170;
  float v171;
  float v172;
  float v173;
  float v174;
  BOOL v175;
  float v176;
  float v177;
  int v178;
  float v179;
  float v180;
  float v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  float v187;
  uint64_t v188;
  int v189;
  int v190;
  float v191;
  float v192;
  float v193;
  float v194;
  float v195;
  float v196;
  float v197;
  unint64_t *v198;
  unint64_t v199;
  float v200;
  float v201;
  float v202;
  float v203;
  float v204;
  float v205;
  float v206;
  float v207;
  float v208;
  float v209;
  float v210;
  float v211;
  float v212;
  float v213;
  float v214;
  float v215;
  float v216;
  float v217;
  float v218;
  float v219;
  float v220;
  float v221;
  float v222;
  float v223;
  float v224;
  float v225;
  float v226;
  float v227;
  float v228;
  float v229;
  float v230;
  float v231;
  float v232;
  float v233;
  float v234;
  float v235;
  float v236;
  float v237;
  float v238;
  float v239;
  float v240;
  float v241;
  float v242;
  float v243;
  float v244;
  float v245;
  float v246;
  float v247;
  float v248;
  float v249;
  float v250;
  float v251;
  float v252;
  int v253;
  unint64_t v254;
  unint64_t v255;
  unint64_t v256;
  unint64_t v257;
  unint64_t v258;
  unint64_t v259;
  uint64_t v260;
  int v261;
  int v262;
  float v263;
  float v264;
  float v265;
  float v266;
  float v267;
  float v268;
  unint64_t *v269;
  unint64_t v270;
  float v271;
  float v272;
  float v273;
  float v274;
  float v275;
  float v276;
  float v277;
  float v278;
  float v279;
  float v280;
  float v281;
  float v282;
  float v283;
  float v284;
  float v285;
  float v286;
  float v287;
  float v288;
  float v289;
  float v290;
  float v291;
  float v292;
  float v293;
  float v294;
  float v295;
  float v296;
  float v297;
  float v298;
  float v299;
  float v300;
  float v301;
  float v302;
  float v303;
  float v304;
  float v305;
  float v306;
  float v307;
  float v308;
  float v309;
  float v310;
  float v311;
  float v312;
  float v313;
  float v314;
  float v315;
  float v316;
  float v317;
  unint64_t v318;
  unsigned int v319;
  unint64_t v320;
  unint64_t v321;
  int v322;
  int v323;
  int v324;
  float v325;
  float v326;
  float v327;
  float v328;
  unint64_t *v329;
  unint64_t v330;
  float v331;
  float v332;
  float v333;
  float v334;
  float v335;
  float v336;
  float v337;
  float v338;
  float v339;
  float v340;
  float v341;
  float v342;
  float v343;
  float v344;
  float v345;
  float v346;
  float v347;
  float v348;
  float v349;
  float v350;
  float v351;
  float v352;
  float v353;
  float v354;
  float v355;
  float v356;
  float v357;
  float v358;
  float v359;
  float v360;
  float v361;
  float v362;
  float v363;
  float v364;
  float v365;
  float v366;
  float v367;
  float v368;
  float v369;
  float v370;
  float v371;
  float v372;
  float v373;
  float v374;
  float v375;
  float v376;
  float v377;
  float v378;
  float v379;
  float v380;
  float v381;
  float v382;
  float v383;
  float v384;
  unint64_t v385;
  unint64_t v386;
  unint64_t v387;
  unint64_t v388;
  unint64_t v389;
  unint64_t v390;
  unint64_t v391;
  unint64_t v392;
  unint64_t v393;
  unint64_t v394;
  unint64_t v395;
  unint64_t v396;
  unint64_t v397;
  unint64_t v398;
  unint64_t v399;
  unint64_t v400;
  unint64_t v401;
  unint64_t v402;
  unint64_t v403;
  unint64_t v404;
  unint64_t v405;
  unint64_t v406;
  int v407;
  uint64_t v408;
  int v409;
  int v410;
  float v411;
  unint64_t *v412;
  float v413;
  float v414;
  float v415;
  float v416;
  float v417;
  float v418;
  float v419;
  float v420;
  float v421;
  float v422;
  float v423;
  float v424;
  float v425;
  float v426;
  float v427;
  float v428;
  float v429;
  float v430;
  float v431;
  float v432;
  float v433;
  float v434;
  float v435;
  float v436;
  float v437;
  float v438;
  float v439;
  float v440;
  float v441;
  float v442;
  float v443;
  float v444;
  float v445;
  float v446;
  float v447;
  float v448;
  float v449;
  float v450;
  float v451;
  float v452;
  float v453;
  float v454;
  float v455;
  float v456;
  float v457;
  float v458;
  float v459;
  float v460;
  unsigned int v461;
  unsigned int v462;
  unsigned int v463;
  unsigned int v464;
  float v465;
  float v466;
  unint64_t v467;
  unint64_t v468;
  uint64_t v469;
  uint64_t v470;
  unint64_t v471;
  uint64_t v472;
  uint64_t v473;
  uint64_t v474;
  unint64_t v475;
  uint64_t v476;
  uint64_t v477;
  uint64_t v478;
  unint64_t v479;
  uint64_t v480;
  uint64_t v481;
  uint64_t v482;
  unint64_t v483;
  uint64_t v484;
  uint64_t v485;
  uint64_t v486;
  unint64_t v487;
  unint64_t v488;
  unsigned int v489;
  unsigned int v490;
  float v491;
  uint64_t v492;
  unint64_t v493;
  unint64_t v494;
  uint64_t v495;
  uint64_t v496;
  unsigned int v497;
  unsigned int v498;
  unsigned int v499;
  unsigned int v500;
  unsigned int v501;
  int v502;
  unsigned int v503;
  float v504;
  int v505;
  float v506;
  float v507;
  unsigned int v508;
  unsigned int v509;
  unsigned int v510;
  unsigned int v511;
  unsigned int v512;
  unsigned int v513;
  unsigned int v514;
  unsigned int v515;
  float v516;
  unsigned int v517;
  float v518;
  float v519;
  float v520;
  float v521;
  unint64_t *v522;
  float v523;
  float v524;
  float v525;
  float v526;
  float v527;
  float v528;
  float v529;
  float v530;
  float v531;
  float v532;
  float v533;
  float v534;
  float v535;
  float v536;
  float v537;
  uint64_t v538;
  uint64_t v539;
  uint64_t v540;
  float v541;
  float v542;
  float v543;
  unsigned int v544;
  unsigned int v545;
  float v546;
  float v547;
  float v548;
  unint64_t v549;
  unint64_t v550;
  unint64_t v551;
  float v552;
  unsigned int v553;
  float v554;
  unint64_t v555;
  unsigned int v556;
  float v557;
  float v558;
  float v559;
  float v560;
  float v561;
  float v562;
  float v563;
  float v564;
  float v565;
  float v566;
  uint64_t v567;
  float v568;
  uint64_t v569;
  uint64_t v570;
  float v571;
  float v572;
  float v573;
  unsigned int v574;
  unsigned int v575;
  float v576;
  float v577;
  float v578;
  unint64_t v579;
  float v580;
  unsigned int v581;
  float v582;
  unint64_t v583;
  unsigned int v584;
  float v585;
  float v586;
  float v587;
  float v588;
  float v589;
  float v590;
  float v591;
  float v592;
  float v593;
  float v594;
  uint64_t v595;
  uint64_t v596;
  uint64_t v597;
  float v598;
  float v599;
  float v600;
  unsigned int v601;
  float v602;
  unsigned int v603;
  float v604;
  float v605;
  unint64_t v606;
  float v607;
  unint64_t v608;
  float v609;
  unsigned int v610;
  float v611;
  float v612;
  float v613;
  float v614;
  float v615;
  float v616;
  float v617;
  float v618;
  float v619;
  uint64_t v620;
  float v621;
  uint64_t v622;
  uint64_t v623;
  float v624;
  float v625;
  float v626;
  unsigned int v627;
  unsigned int v628;
  float v629;
  float v630;
  float v631;
  unint64_t v632;
  float v633;
  unsigned int v634;
  float v635;
  unint64_t v636;
  unsigned int v637;
  float v638;
  float v639;
  float v640;
  float v641;
  float v642;
  float v643;
  float v644;
  uint64_t v645;
  uint64_t v646;
  float v647;
  float v648;
  uint64_t v649;
  float v650;
  unsigned int v651;
  unsigned int v652;
  float v653;
  float v654;
  float v655;
  unint64_t v656;
  float v657;
  unsigned int v658;
  unsigned int v659;
  unint64_t v660;
  float v661;
  float v662;
  float v663;
  float v664;
  float v665;
  float v666;
  uint64_t v667;
  float v668;
  uint64_t v669;
  uint64_t v670;
  unint64_t v671;
  float v672;
  float v673;
  unsigned int v674;
  float v675;
  unsigned int v676;
  float v677;
  float v678;
  float v679;
  float v680;
  unsigned int v681;
  unint64_t v682;
  float v683;
  unsigned int v684;
  float v685;
  float v686;
  float v687;
  unsigned int v688;
  unsigned int v689;
  unsigned int v690;
  unsigned int v691;
  unsigned int v692;
  unsigned int v693;
  unsigned int v694;
  unsigned int v695;
  unsigned int v696;
  unsigned int v697;
  unsigned int v698;
  unsigned int v699;
  unsigned int v700;
  unsigned int v701;
  unsigned int v702;
  unsigned int v703;
  uint64_t result;
  unsigned int v705;
  unsigned int v706;
  unsigned int v707;
  unsigned int v708;
  unsigned int v709;
  unsigned int v710;
  unsigned int v711;
  unsigned int v712;
  unsigned int v713;
  unsigned int v714;
  unsigned int v715;
  unsigned int v716;
  unsigned int v717;
  unsigned int v718;
  unsigned int v719;
  unsigned int v720;
  unsigned int v721;
  unsigned int v722;
  unsigned int v723;
  unsigned int v724;
  unsigned int v725;
  unsigned int v726;
  unsigned int v727;
  unsigned int v728;
  unsigned int v729;
  unsigned int v730;
  unsigned int v731;
  unsigned int v732;
  unsigned int v733;
  unsigned int v734;
  unsigned int v735;
  unsigned int v736;
  unsigned int v737;
  unsigned int v738;
  unsigned int v739;
  unsigned int v740;
  unsigned int v741;
  unsigned int v742;
  unsigned int v743;
  unsigned int v744;
  unsigned int v745;
  unint64_t v746;
  unsigned int v747;
  unint64_t v748;
  unsigned int v749;
  unint64_t v750;
  unsigned int v751;
  unsigned int v752;
  unint64_t v753;
  unsigned int v754;
  unint64_t v755;
  unsigned int v756;
  unint64_t v757;
  unsigned int v758;
  unint64_t v759;
  unint64_t v760;
  unsigned int v761;
  unint64_t v762;
  unint64_t v763;
  unint64_t v764;
  unsigned int v765;
  unsigned int v766;
  unsigned int v767;
  unsigned int v768;
  unsigned int v769;
  unint64_t v770;
  unsigned int v771;
  float v772;
  unsigned int v773;
  unint64_t v774;
  unsigned int v775;
  unint64_t v776;
  unsigned int v777;
  unsigned int v778;
  unsigned int v779;
  unint64_t v780;
  unsigned int v781;
  unsigned int v782;
  uint64_t v783;
  unsigned int v784;
  unsigned int v785;
  uint64_t v786;
  unsigned int v787;
  unsigned int v788;
  uint64_t v789;
  unsigned int v790;
  unsigned int v791;
  unsigned int v792;
  unsigned int v793;
  uint64_t v794;
  unsigned int v795;
  unint64_t v796;
  unsigned int v797;
  unsigned int v798;
  unsigned int v799;
  unsigned int v800;
  uint64_t v801;
  unint64_t v802;
  unsigned int v803;
  unsigned int v804;
  unsigned int v805;
  unsigned int v806;
  uint64_t v807;
  unsigned int v808;
  float v809;
  float v810;
  unsigned int v811;
  unsigned int v812;
  unsigned int v813;
  unsigned int v814;
  unsigned int v815;
  unsigned int v816;
  float v817;
  float v818;
  float v819;
  unsigned int v820;
  unsigned int v821;
  unsigned int v822;
  unsigned int v823;
  unsigned int v824;
  float v825;
  unsigned int v826;
  unsigned int v827;
  unsigned int v828;
  float v829;
  unsigned int v830;
  float v831;
  unsigned int v832;
  unsigned int v833;
  unsigned int v834;
  unsigned int v835;
  unsigned int v836;
  unsigned int v837;
  unsigned int v838;
  unsigned int v839;
  unsigned int v840;
  unsigned int v841;
  unsigned int v842;
  uint64_t v843;
  float v844;
  unsigned int v845;
  float v846;
  uint64_t v847;
  float v848;
  uint64_t v849;
  float v850;
  uint64_t v851;
  float v852;
  float v853;
  uint64_t v854;
  float v855;
  float v856;
  float v857;
  float v858;
  float v859;
  float v860;
  float v861;
  float v862;
  float v863;
  float v864;
  float v865;
  float v866;
  float v867;
  float v868;
  float v869;
  float v870;
  unsigned int v871;
  float v872;
  unsigned int v873;
  float v874;
  float v875;
  float v876;
  unsigned int v877;
  unsigned int v878;
  float v879;
  float v880;
  unsigned int v881;
  unsigned int v882;
  float v883;
  float v884;
  unsigned int v885;
  float v886;
  float v887;
  float v888;
  float v889;
  float v890;
  unsigned int v891;
  unsigned int v892;
  float v893;
  unsigned int v894;
  float v895;
  unsigned int v896;
  unsigned int v897;
  float v898;
  unsigned int v899;
  float v900;
  float v901;
  float v902;
  uint64_t v903;
  int v905;
  uint64_t v906;
  uint64_t v907;
  uint64_t v908;
  uint64_t v909;
  uint64_t v910;
  uint64_t v911;
  uint64_t v912;
  uint64_t v913;
  uint64_t v914;
  uint64_t v915;
  uint64_t v916;
  uint64_t v917;
  unint64_t v918;
  unint64_t v919;
  unsigned int v920;
  unint64_t v921;
  unsigned int v922;
  unint64_t v923;
  unsigned int v924;
  unint64_t v925;
  unsigned int v926;
  unint64_t v927;
  unsigned int v928;
  unint64_t v929;
  unsigned int v930;
  unint64_t v931;
  unsigned int v932;
  unint64_t v933;
  unsigned int v934;
  unint64_t v935;
  int v936;
  unint64_t v937;
  int v938;
  unint64_t v939;
  unsigned int v940;
  unint64_t v941;
  unsigned int v942;
  float v943;
  unint64_t v944;
  unint64_t v945;
  unint64_t v946;
  float v947;
  unint64_t v948;
  float v949;
  unint64_t v950;
  uint64_t v951;
  float v952;
  unint64_t v953;
  unsigned int v954;
  float v955;
  unint64_t v956;
  unsigned int v957;
  float v958;
  unint64_t v959;
  unsigned int v960;
  float v961;
  unint64_t v962;
  unsigned int v963;
  float v964;
  unint64_t v965;
  float v966;
  uint64_t v967;
  uint64_t v968;
  uint64_t v969;
  uint64_t v970;
  uint64_t v971;
  uint64_t v972;
  uint64_t v973;
  uint64_t v974;
  uint64_t v975;
  uint64_t v976;
  uint64_t v977;
  uint64_t v978;
  uint64_t v979;
  uint64_t v980;
  uint64_t v981;
  uint64_t v982;
  uint64_t v983;
  uint64_t v984;
  uint64_t v985;
  uint64_t v986;
  unsigned int v987;
  uint64_t v988;
  uint64_t v989;
  uint64_t v990;
  uint64_t v991;
  uint64_t v992;
  uint64_t v993;
  char v994;
  uint64_t v995;
  uint64_t v996;
  BOOL v997;
  uint64_t v998;
  uint64_t v999;
  uint64_t v1000;
  uint64_t v1001;
  uint64_t v1002;
  uint64_t v1003;
  char v1004;
  uint64_t v1005;
  uint64_t v1006;
  uint64_t v1007;
  uint64_t v1008;
  uint64_t v1009;
  uint64_t v1010;
  uint64_t v1011;
  uint64_t v1012;
  float v1013;
  float v1014;
  unsigned int v1015;
  float v1016;
  unsigned int v1017;
  float v1018;
  float v1019;
  unsigned int v1020;
  float v1021;
  float v1022;
  unsigned int v1023;
  uint64_t v1024;
  unsigned int v1025;
  uint64_t v1026;
  uint64_t v1027;
  unsigned int v1028;
  uint64_t v1029;
  uint64_t v1030;
  uint64_t v1031;
  unsigned int v1032;
  uint64_t v1033;
  uint64_t v1034;
  uint64_t v1035;
  unsigned int v1036;
  uint64_t v1037;
  unsigned int v1038;
  float v1039;
  unsigned int v1040;
  unsigned int v1041;
  float v1042;
  unsigned int v1043;
  float v1044;
  unsigned int v1045;
  unsigned int v1046;
  unsigned int v1047;

  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  v12 = __sincosf_stret(a5);
  v13 = *(_DWORD *)(a2 + 24);
  v14 = *(_QWORD *)(a2 + 32);
  v15 = *(float *)(a2 + 108);
  v16 = vcvtms_s32_f32((float)((float)((float)((float)((float)((float)((float)(COERCE_FLOAT(LODWORD(a6) & 0x807FFFFF | 0x3F800000)* -0.33333)+ 2.0)* COERCE_FLOAT(LODWORD(a6) & 0x807FFFFF | 0x3F800000))+ -1.6667)+ (float)((LODWORD(a6) >> 23) - 127))* 0.69315)- *(float *)(a2 + 112))* v15);
  if (v16 < 0)
  {
    v17 = 0;
    v18 = 0;
  }
  else if ((int)v14 * v13 <= v16)
  {
    v17 = v13 - 1;
    v18 = v14 - 1;
  }
  else
  {
    v17 = v16 / (int)v14;
    v18 = v16 % (int)v14;
  }
  v19 = a6 + a6;
  v20 = -v12.__sinval;
  v21 = 1.0 / (float)(1 << v17);
  v22 = v21 * a3;
  v23 = v21 * a4;
  v24 = *(_QWORD *)(a2 + 56);
  v25 = (_QWORD *)(v24 + 144 * (v14 * v17 + v18));
  v26 = v25[11];
  v28 = v25[4];
  v27 = v25[5];
  v29 = v25[6];
  v30 = 0.0;
  v31 = (float)(v12.__cosval * 0.0) * 0.0;
  v32 = (float)(v12.__sinval * 0.0) * 0.0;
  v33 = (float)(v31 + v22) - v32;
  v34 = (float)v28 + -1.001;
  if (v34 >= v33)
    v34 = v33;
  if (v33 >= 0.0)
    v35 = v34;
  else
    v35 = 0.0;
  v36 = v31 + (float)(v32 + v23);
  v37 = (float)v29 + -1.001;
  if (v37 >= v36)
    v37 = v36;
  if (v36 >= 0.0)
    v38 = v37;
  else
    v38 = 0.0;
  v39 = v35;
  v40 = v38;
  v41 = (v39 + 1);
  v42 = v26 + v27 * v40;
  v43 = v42 + v27;
  v44 = (float)v41 - v35;
  v45 = (float)(v40 + 1) - v38;
  v46 = v44 * v45;
  v47 = v35 - (float)v35;
  v48 = v47 * v45;
  v50 = (float)v38;
  v49 = v38 - v50;
  LOBYTE(v50) = *(_BYTE *)(v42 + v39);
  LOBYTE(v11) = *(_BYTE *)(v42 + v41);
  v51 = (float)v11;
  LOBYTE(v11) = *(_BYTE *)(v43 + v39);
  LOBYTE(v6) = *(_BYTE *)(v43 + v41);
  v1044 = *(float *)(a2 + 112);
  if (v16 < 0)
  {
    v53 = 0;
    v52 = 0;
  }
  else if ((int)v14 * v13 <= v16)
  {
    v52 = v13 - 1;
    v53 = v14 - 1;
  }
  else
  {
    v52 = v16 / (int)v14;
    v53 = v16 % (int)v14;
  }
  v54 = v46 * (float)LODWORD(v50);
  v55 = v48 * v51;
  v56 = (float)(1 << v52);
  v1042 = a3;
  v57 = (float)(1.0 / v56) * a3;
  v58 = a4;
  v59 = (float)(1.0 / v56) * a4;
  v60 = (unint64_t *)(v24 + 144 * (v14 * v52 + v53));
  v61 = v60[6];
  v62 = v12.__cosval * (float)(v19 / v56);
  v63 = v57 - (float)(v62 * 0.5);
  v64 = (float)(v19 / v56) * v20;
  v65 = v64 * 0.70711;
  v66 = (float)v60[4] + -1.001;
  if (v66 >= (float)((float)(v64 * 0.70711) + v63))
    v67 = v65 + v63;
  else
    v67 = (float)v60[4] + -1.001;
  if ((float)(v65 + v63) >= 0.0)
    v68 = v67;
  else
    v68 = 0.0;
  v1021 = v68;
  v69 = v12.__sinval * (float)(v19 / v56);
  v70 = v69 * 0.5;
  v71 = v59 - (float)(v69 * 0.5);
  v72 = (float)(v62 * 0.70711) + v71;
  v73 = (float)v61 + -1.001;
  if (v73 >= v72)
    v74 = (float)(v62 * 0.70711) + v71;
  else
    v74 = (float)v61 + -1.001;
  if (v72 >= 0.0)
    v75 = v74;
  else
    v75 = 0.0;
  v76 = v57 + (float)(v62 * 0.5);
  v77 = v65 + v76;
  if (v66 >= v77)
    v78 = v77;
  else
    v78 = (float)v60[4] + -1.001;
  if (v77 >= 0.0)
    v79 = v78;
  else
    v79 = 0.0;
  v1019 = v79;
  v80 = v59 + v70;
  v81 = (float)(v62 * 0.70711) + (float)(v59 + v70);
  if (v73 >= v81)
    v82 = v81;
  else
    v82 = (float)v61 + -1.001;
  if (v81 >= 0.0)
    v83 = v82;
  else
    v83 = 0.0;
  v84 = v64 * 0.0;
  v85 = (float)(v62 + v57) + (float)(v64 * 0.0);
  if (v66 >= v85)
    v86 = (float)(v62 + v57) + (float)(v64 * 0.0);
  else
    v86 = (float)v60[4] + -1.001;
  if (v85 >= 0.0)
    v87 = v86;
  else
    v87 = 0.0;
  v1018 = v87;
  v88 = v62 * 0.0;
  v89 = (float)(v69 + v59) + (float)(v62 * 0.0);
  if (v73 >= v89)
    v90 = (float)(v69 + v59) + (float)(v62 * 0.0);
  else
    v90 = (float)v61 + -1.001;
  if (v89 >= 0.0)
    v91 = v90;
  else
    v91 = 0.0;
  v92 = v64 * -0.70711;
  v93 = v92 + v76;
  if (v66 >= v93)
    v94 = v93;
  else
    v94 = (float)v60[4] + -1.001;
  if (v93 >= 0.0)
    v95 = v94;
  else
    v95 = 0.0;
  v1016 = v95;
  v96 = v62 * -0.70711;
  v97 = (float)(v62 * -0.70711) + v80;
  if (v73 >= v97)
    v98 = v97;
  else
    v98 = (float)v61 + -1.001;
  if (v97 >= 0.0)
    v99 = v98;
  else
    v99 = 0.0;
  v100 = v92 + v63;
  if (v66 >= v100)
    v101 = v100;
  else
    v101 = (float)v60[4] + -1.001;
  if (v100 >= 0.0)
    v102 = v101;
  else
    v102 = 0.0;
  v1014 = v102;
  v103 = v96 + v71;
  if (v73 >= (float)(v96 + v71))
    v104 = v96 + v71;
  else
    v104 = (float)v61 + -1.001;
  v105 = (float)(v57 - v62) + v84;
  if (v103 >= 0.0)
    v106 = v104;
  else
    v106 = 0.0;
  if (v66 >= v105)
    v107 = v105;
  else
    v107 = (float)v60[4] + -1.001;
  v108 = v59 - v69;
  if (v105 >= 0.0)
    v109 = v107;
  else
    v109 = 0.0;
  v1013 = v109;
  v110 = v108 + v88;
  if (v73 >= v110)
    v111 = v110;
  else
    v111 = (float)v61 + -1.001;
  if (v110 >= 0.0)
    v30 = v111;
  v112 = v19 * 1.4142;
  v113 = a6 * 1.4142;
  v114 = vcvtms_s32_f32((float)((float)((float)((float)((float)((float)((float)(COERCE_FLOAT(COERCE_UNSIGNED_INT(a6 * 1.4142) & 0x807FFFFF | 0x3F800000)* -0.33333)+ 2.0)* COERCE_FLOAT(COERCE_UNSIGNED_INT(a6 * 1.4142) & 0x807FFFFF | 0x3F800000))+ -1.6667)+ (float)((COERCE_UNSIGNED_INT(a6 * 1.4142) >> 23) - 127))* 0.69315)- v1044)* v15);
  v115 = (float)v11;
  v902 = v75;
  v116 = v75;
  v901 = v83;
  v117 = v83;
  v900 = v91;
  v118 = v91;
  v898 = v99;
  v119 = v99;
  v895 = v106;
  v120 = v106;
  v893 = v30;
  v121 = v30;
  v1039 = *(float *)(a2 + 108);
  if (v114 < 0)
  {
    v123 = 0;
    v122 = 0;
  }
  else if ((int)v14 * v13 <= v114)
  {
    v122 = v13 - 1;
    v123 = v14 - 1;
  }
  else
  {
    v122 = v114 / (int)v14;
    v123 = v114 % (int)v14;
  }
  v124 = v47 * v49;
  v125 = v54 + v55;
  v126 = (float)(v44 * v49) * v115;
  v127 = (float)(1 << v122);
  v128 = (float)(1.0 / v127) * v1042;
  v129 = (float)(1.0 / v127) * v58;
  v130 = v112 / v127;
  v131 = (unint64_t *)(v24 + 144 * (v14 * v122 + v123));
  v133 = v12.__cosval * v130;
  v134 = v128 + (float)((float)(v12.__cosval * v130) * 0.0);
  v135 = v130 * v20;
  v136 = v134 - (float)(v130 * v20);
  v137 = (float)v131[4] + -1.001;
  if (v137 >= v136)
    v138 = v134 - (float)(v130 * v20);
  else
    v138 = (float)v131[4] + -1.001;
  if (v136 >= 0.0)
    v139 = v138;
  else
    v139 = 0.0;
  v140 = v12.__sinval * v130;
  v141 = v129 + (float)((float)(v12.__sinval * v130) * 0.0);
  v132 = v131[6];
  v142 = (float)v132 + -1.001;
  if (v142 >= (float)(v141 - v133))
    v143 = v141 - v133;
  else
    v143 = (float)v132 + -1.001;
  if ((float)(v141 - v133) >= 0.0)
    v144 = v143;
  else
    v144 = 0.0;
  v145 = v133 * 0.70711;
  v146 = v128 + (float)(v133 * 0.70711);
  v147 = v135 * 0.5;
  v148 = (float)(v135 * 0.5) + v146;
  if (v137 >= v148)
    v149 = (float)(v135 * 0.5) + v146;
  else
    v149 = (float)v131[4] + -1.001;
  if (v148 >= 0.0)
    v150 = v149;
  else
    v150 = 0.0;
  v151 = v140 * 0.70711;
  v152 = v133 * 0.5;
  v153 = (float)(v133 * 0.5) + (float)(v129 + v151);
  if (v142 >= v153)
    v154 = v152 + (float)(v129 + v151);
  else
    v154 = (float)v132 + -1.001;
  if (v153 >= 0.0)
    v155 = v154;
  else
    v155 = 0.0;
  v156 = v135 * -0.5;
  v157 = (float)(v135 * -0.5) + v146;
  if (v137 >= v157)
    v158 = v157;
  else
    v158 = (float)v131[4] + -1.001;
  if (v157 < 0.0)
    v158 = 0.0;
  v159 = v133 * -0.5;
  v160 = (float)(v133 * -0.5) + (float)(v129 + v151);
  if (v142 >= v160)
    v161 = (float)(v133 * -0.5) + (float)(v129 + v151);
  else
    v161 = (float)v132 + -1.001;
  if (v160 >= 0.0)
    v162 = v161;
  else
    v162 = 0.0;
  v163 = v135 + v134;
  if (v137 >= v163)
    v164 = v163;
  else
    v164 = (float)v131[4] + -1.001;
  if (v163 >= 0.0)
    v165 = v164;
  else
    v165 = 0.0;
  v166 = v133 + v141;
  if (v142 >= v166)
    v167 = v166;
  else
    v167 = (float)v132 + -1.001;
  if (v166 >= 0.0)
    v168 = v167;
  else
    v168 = 0.0;
  v169 = v128 - v145;
  if (v137 >= (float)(v156 + v169))
    v170 = v156 + v169;
  else
    v170 = (float)v131[4] + -1.001;
  if ((float)(v156 + v169) >= 0.0)
    v171 = v170;
  else
    v171 = 0.0;
  v172 = v129 - v151;
  if (v142 >= (float)(v159 + v172))
    v173 = v159 + v172;
  else
    v173 = (float)v132 + -1.001;
  if ((float)(v159 + v172) < 0.0)
    v173 = 0.0;
  v174 = v147 + v169;
  if (v137 >= v174)
    v137 = v174;
  v175 = v174 < 0.0;
  v176 = v152 + v172;
  v177 = v113 * 1.4142;
  v178 = vcvtms_s32_f32((float)((float)((float)((float)((float)((float)((float)(COERCE_FLOAT(COERCE_UNSIGNED_INT(v113 * 1.4142) & 0x807FFFFF | 0x3F800000)* -0.33333)+ 2.0)* COERCE_FLOAT(COERCE_UNSIGNED_INT(v113 * 1.4142) & 0x807FFFFF | 0x3F800000))+ -1.6667)+ (float)((COERCE_UNSIGNED_INT(v113 * 1.4142) >> 23) - 127))* 0.69315)- v1044)* v1039);
  if (v175)
    v179 = 0.0;
  else
    v179 = v137;
  if (v142 >= v176)
    v180 = v176;
  else
    v180 = v142;
  v181 = v112 * 1.4142;
  v182 = v1021;
  v1037 = v1018;
  v1035 = v1016;
  v1034 = v1014;
  v1033 = v1013;
  v890 = v139;
  v1031 = v139;
  v889 = v150;
  v1030 = v150;
  v888 = v155;
  v183 = v155;
  v887 = v158;
  v1029 = v158;
  v886 = v162;
  v184 = v162;
  v883 = v165;
  v1027 = v165;
  v884 = v168;
  v185 = v168;
  v880 = v171;
  v1026 = v171;
  v879 = v173;
  v186 = v173;
  if (v176 >= 0.0)
    v187 = v180;
  else
    v187 = 0.0;
  v876 = v179;
  v1024 = v179;
  v875 = v187;
  v188 = v187;
  if (v178 < 0)
  {
    v189 = 0;
    v190 = 0;
  }
  else if ((int)v14 * v13 <= v178)
  {
    v189 = v13 - 1;
    v190 = v14 - 1;
  }
  else
  {
    v189 = v178 / (int)v14;
    v190 = v178 % (int)v14;
  }
  v191 = v126 + v125;
  v192 = v124 * (float)v6;
  v193 = (float)(1 << v189);
  v194 = (float)(1.0 / v193) * v1042;
  v195 = v58;
  v196 = (float)(1.0 / v193) * v58;
  v197 = v181 / v193;
  v198 = (unint64_t *)(v24 + 144 * (v14 * v189 + v190));
  v200 = v12.__cosval * (float)(v181 / v193);
  v201 = v194 - (float)(v200 * 0.5);
  v202 = -v12.__sinval;
  v203 = v197 * v20;
  v204 = (float)(v197 * v20) * 0.70711;
  v205 = (float)v198[4] + -1.001;
  if (v205 >= (float)(v204 + v201))
    v206 = v204 + v201;
  else
    v206 = (float)v198[4] + -1.001;
  if ((float)(v204 + v201) >= 0.0)
    v207 = v206;
  else
    v207 = 0.0;
  v208 = v12.__sinval * v197;
  v209 = v208 * 0.5;
  v210 = v196 - (float)(v208 * 0.5);
  v211 = v200 * 0.70711;
  v212 = (float)(v200 * 0.70711) + v210;
  v199 = v198[6];
  v213 = (float)v199 + -1.001;
  if (v213 >= v212)
    v214 = (float)(v200 * 0.70711) + v210;
  else
    v214 = (float)v199 + -1.001;
  if (v212 >= 0.0)
    v215 = v214;
  else
    v215 = 0.0;
  v216 = v194 + (float)(v200 * 0.5);
  v217 = v204 + v216;
  if (v205 >= v217)
    v218 = v217;
  else
    v218 = (float)v198[4] + -1.001;
  if (v217 >= 0.0)
    v219 = v218;
  else
    v219 = 0.0;
  v220 = v196 + v209;
  v221 = v211 + (float)(v196 + v209);
  if (v213 >= v221)
    v222 = v211 + (float)(v196 + v209);
  else
    v222 = (float)v199 + -1.001;
  if (v221 >= 0.0)
    v223 = v222;
  else
    v223 = 0.0;
  v224 = v203 * 0.0;
  v225 = (float)(v200 + v194) + (float)(v203 * 0.0);
  if (v205 >= v225)
    v226 = (float)(v200 + v194) + (float)(v203 * 0.0);
  else
    v226 = (float)v198[4] + -1.001;
  if (v225 >= 0.0)
    v227 = v226;
  else
    v227 = 0.0;
  v228 = v200 * 0.0;
  v229 = (float)(v208 + v196) + (float)(v200 * 0.0);
  if (v213 >= v229)
    v230 = (float)(v208 + v196) + (float)(v200 * 0.0);
  else
    v230 = (float)v199 + -1.001;
  if (v229 >= 0.0)
    v231 = v230;
  else
    v231 = 0.0;
  v232 = v203 * -0.70711;
  v233 = v232 + v216;
  if (v205 >= v233)
    v234 = v233;
  else
    v234 = (float)v198[4] + -1.001;
  if (v233 < 0.0)
    v234 = 0.0;
  v235 = v200 * -0.70711;
  v236 = (float)(v200 * -0.70711) + v220;
  if (v213 >= v236)
    v237 = v236;
  else
    v237 = (float)v199 + -1.001;
  if (v236 >= 0.0)
    v238 = v237;
  else
    v238 = 0.0;
  v239 = v232 + v201;
  if (v205 >= v239)
    v240 = v239;
  else
    v240 = (float)v198[4] + -1.001;
  if (v239 < 0.0)
    v240 = 0.0;
  v241 = v235 + v210;
  if (v213 >= (float)(v235 + v210))
    v242 = v235 + v210;
  else
    v242 = (float)v199 + -1.001;
  v243 = (float)(v194 - v200) + v224;
  if (v241 >= 0.0)
    v244 = v242;
  else
    v244 = 0.0;
  if (v205 >= v243)
    v245 = v243;
  else
    v245 = (float)v198[4] + -1.001;
  v175 = v243 < 0.0;
  v246 = v196 - v208;
  if (v175)
    v247 = 0.0;
  else
    v247 = v245;
  v248 = v246 + v228;
  if (v213 >= v248)
    v249 = v248;
  else
    v249 = (float)v199 + -1.001;
  if (v248 >= 0.0)
    v250 = v249;
  else
    v250 = 0.0;
  v251 = v181 * 1.4142;
  v252 = v177 * 1.4142;
  v253 = vcvtms_s32_f32((float)((float)((float)((float)((float)((float)((float)(COERCE_FLOAT(LODWORD(v252) & 0x807FFFFF | 0x3F800000)* -0.33333)+ 2.0)* COERCE_FLOAT(LODWORD(v252) & 0x807FFFFF | 0x3F800000))+ -1.6667)+ (float)((LODWORD(v252) >> 23) - 127))* 0.69315)- v1044)* v1039);
  v254 = v198[5];
  v255 = v60[11];
  v256 = v60[5];
  v1011 = (v182 + 1);
  v1012 = v1019;
  v1010 = v1019 + 1;
  v1009 = (v1037 + 1);
  v1008 = (v1035 + 1);
  v1007 = (v1034 + 1);
  v1006 = (v1033 + 1);
  v257 = v131[11];
  v258 = v131[5];
  v1005 = (v1031 + 1);
  v1002 = (v1030 + 1);
  v1000 = (v1029 + 1);
  v999 = (v1027 + 1);
  v998 = (v1026 + 1);
  v996 = (v1024 + 1);
  v259 = v198[11];
  v870 = v207;
  v869 = v215;
  v995 = v215;
  v868 = v219;
  v992 = v207;
  v993 = (v992 + 1);
  v867 = v223;
  v990 = v223;
  v988 = v219;
  v989 = (v988 + 1);
  v866 = v227;
  v865 = v231;
  v986 = v231;
  v863 = v234;
  v862 = v238;
  v982 = v238;
  v985 = v227;
  v984 = (v985 + 1);
  v981 = v234;
  v980 = (v981 + 1);
  v872 = v240;
  v874 = v244;
  v260 = v244;
  v1003 = v240;
  v1001 = (v1003 + 1);
  v861 = v247;
  v864 = v250;
  v991 = v250;
  v983 = v247;
  v979 = (v983 + 1);
  if (v253 < 0)
  {
    v261 = 0;
    v262 = 0;
  }
  else if ((int)v14 * v13 <= v253)
  {
    v261 = v13 - 1;
    v262 = v14 - 1;
  }
  else
  {
    v261 = v253 / (int)v14;
    v262 = v253 % (int)v14;
  }
  v263 = v195;
  v264 = v192 + v191;
  v265 = (float)(1 << v261);
  v266 = (float)(1.0 / v265) * v1042;
  v267 = (float)(1.0 / v265) * v195;
  v268 = v251 / v265;
  v269 = (unint64_t *)(v24 + 144 * (v14 * v261 + v262));
  v271 = v12.__cosval * (float)(v251 / v265);
  v272 = 0.0;
  v273 = v266 + (float)(v271 * 0.0);
  v274 = (float)(v251 / v265) * v202;
  v275 = (float)v269[4] + -1.001;
  if (v275 >= (float)(v273 - v274))
    v276 = v273 - v274;
  else
    v276 = (float)v269[4] + -1.001;
  if ((float)(v273 - v274) >= 0.0)
    v277 = v276;
  else
    v277 = 0.0;
  v278 = v12.__sinval * v268;
  v279 = v267 + (float)((float)(v12.__sinval * v268) * 0.0);
  v270 = v269[6];
  v280 = (float)v270 + -1.001;
  if (v280 >= (float)(v279 - v271))
    v281 = v279 - v271;
  else
    v281 = (float)v270 + -1.001;
  if ((float)(v279 - v271) >= 0.0)
    v282 = v281;
  else
    v282 = 0.0;
  v283 = v271 * 0.70711;
  v284 = v266 + (float)(v271 * 0.70711);
  v285 = v274 * 0.5;
  v286 = (float)(v274 * 0.5) + v284;
  if (v275 >= v286)
    v287 = (float)(v274 * 0.5) + v284;
  else
    v287 = (float)v269[4] + -1.001;
  if (v286 >= 0.0)
    v288 = v287;
  else
    v288 = 0.0;
  v289 = v278 * 0.70711;
  v290 = v271 * 0.5;
  v291 = (float)(v271 * 0.5) + (float)(v267 + (float)(v278 * 0.70711));
  if (v280 >= v291)
    v292 = v290 + (float)(v267 + v289);
  else
    v292 = (float)v270 + -1.001;
  if (v291 >= 0.0)
    v293 = v292;
  else
    v293 = 0.0;
  v294 = v274 * -0.5;
  v295 = (float)(v274 * -0.5) + v284;
  if (v275 >= v295)
    v296 = v295;
  else
    v296 = (float)v269[4] + -1.001;
  if (v295 < 0.0)
    v296 = 0.0;
  v297 = v271 * -0.5;
  v298 = (float)(v271 * -0.5) + (float)(v267 + v289);
  if (v280 >= v298)
    v299 = (float)(v271 * -0.5) + (float)(v267 + v289);
  else
    v299 = (float)v270 + -1.001;
  if (v298 >= 0.0)
    v300 = v299;
  else
    v300 = 0.0;
  v301 = v274 + v273;
  if (v275 >= v301)
    v302 = v301;
  else
    v302 = (float)v269[4] + -1.001;
  if (v301 >= 0.0)
    v303 = v302;
  else
    v303 = 0.0;
  v304 = v271 + v279;
  if (v280 >= v304)
    v305 = v304;
  else
    v305 = (float)v270 + -1.001;
  if (v304 >= 0.0)
    v306 = v305;
  else
    v306 = 0.0;
  v307 = v266 - v283;
  if (v275 >= (float)(v294 + v307))
    v308 = v294 + v307;
  else
    v308 = (float)v269[4] + -1.001;
  if ((float)(v294 + v307) >= 0.0)
    v309 = v308;
  else
    v309 = 0.0;
  v310 = v267 - v289;
  if (v280 >= (float)(v297 + v310))
    v311 = v297 + v310;
  else
    v311 = (float)v270 + -1.001;
  v312 = v285 + v307;
  if ((float)(v297 + v310) >= 0.0)
    v313 = v311;
  else
    v313 = 0.0;
  if (v275 >= v312)
    v275 = v312;
  if (v312 < 0.0)
    v275 = 0.0;
  v314 = v290 + v310;
  if (v280 >= v314)
    v315 = v314;
  else
    v315 = (float)v270 + -1.001;
  v316 = v251 * 1.4142;
  v317 = v252 * 1.4142;
  v318 = v269[5];
  v918 = v255 + v256 * v116;
  v919 = v255 + v256 * v117;
  v921 = v255 + v256 * v118;
  v923 = v255 + v256 * v119;
  v319 = v120;
  v927 = v255 + v256 * v120;
  v931 = v255 + v256 * v121;
  v935 = v257 + v258 * v144;
  v939 = v257 + v258 * v183;
  v925 = v257 + v258 * v184;
  v929 = v257 + v258 * v185;
  v933 = v257 + v258 * v186;
  v937 = v257 + v258 * v188;
  v941 = v259 + v254 * v995;
  v944 = v259 + v254 * v990;
  v945 = v259 + v254 * v986;
  v946 = v259 + v254 * v982;
  v948 = v259 + v254 * v260;
  v950 = v259 + v254 * v991;
  v320 = v269[11];
  v859 = v282;
  v854 = v282;
  v953 = v320 + v318 * v854;
  v857 = v293;
  v851 = v293;
  v956 = v320 + v318 * v851;
  v855 = v300;
  v849 = v300;
  v959 = v320 + v318 * v849;
  v853 = v306;
  v847 = v306;
  v965 = v320 + v318 * v847;
  v848 = v313;
  if (v314 < 0.0)
    v315 = 0.0;
  v844 = v315;
  v845 = v313;
  v962 = v320 + v318 * v313;
  v843 = v315;
  v321 = v320 + v318 * v843;
  v322 = vcvtms_s32_f32((float)((float)((float)((float)((float)((float)((float)(COERCE_FLOAT(COERCE_UNSIGNED_INT(v252 * 1.4142) & 0x807FFFFF | 0x3F800000)* -0.33333)+ 2.0)* COERCE_FLOAT(COERCE_UNSIGNED_INT(v252 * 1.4142) & 0x807FFFFF | 0x3F800000))+ -1.6667)+ (float)((COERCE_UNSIGNED_INT(v252 * 1.4142) >> 23) - 127))* 0.69315)- v1044)* v1039);
  v860 = v277;
  v977 = v277;
  v978 = (v977 + 1);
  v858 = v288;
  v975 = v288;
  v976 = (v975 + 1);
  v856 = v296;
  v974 = v296;
  v973 = (v974 + 1);
  v852 = v303;
  v972 = v303;
  v971 = (v972 + 1);
  v850 = v309;
  v970 = v309;
  v969 = (v970 + 1);
  v846 = v275;
  v968 = v275;
  v967 = (v968 + 1);
  v905 = *(_DWORD *)(a2 + 24);
  v899 = v116;
  v897 = v117;
  v896 = v118;
  v894 = v119;
  v891 = v121;
  v882 = v183;
  v881 = v184;
  v878 = v185;
  v877 = v186;
  v873 = v188;
  v871 = v260;
  if (v322 < 0)
  {
    v323 = 0;
    v324 = 0;
  }
  else if ((int)v14 * v13 <= v322)
  {
    v323 = v13 - 1;
    v324 = v14 - 1;
  }
  else
  {
    v323 = v322 / (int)v14;
    v324 = v322 % (int)v14;
  }
  v819 = v264 * 255.0;
  v325 = (float)(1 << v323);
  v326 = (float)(1.0 / v325) * v1042;
  v327 = (float)(1.0 / v325) * v195;
  v328 = v316 / v325;
  v329 = (unint64_t *)(v24 + 144 * (v14 * v323 + v324));
  v330 = v329[6];
  v331 = v12.__cosval * v328;
  v332 = (float)(v12.__cosval * v328) * 0.5;
  v333 = v326 - v332;
  v334 = v328 * v202;
  v335 = (float)(v328 * v202) * 0.70711;
  v336 = (float)v329[4];
  v337 = v336 + -1.001;
  if ((float)(v336 + -1.001) >= (float)(v335 + (float)(v326 - v332)))
    v338 = v335 + v333;
  else
    v338 = v336 + -1.001;
  if ((float)(v335 + v333) >= 0.0)
    v339 = v338;
  else
    v339 = 0.0;
  v340 = v12.__sinval * v328;
  v341 = (float)(v12.__sinval * v328) * 0.5;
  v342 = v327 - v341;
  v343 = v331 * 0.70711;
  v344 = (float)v330 + -1.001;
  if (v344 >= (float)((float)(v331 * 0.70711) + (float)(v327 - v341)))
    v345 = v343 + v342;
  else
    v345 = (float)v330 + -1.001;
  if ((float)((float)(v331 * 0.70711) + v342) >= 0.0)
    v346 = v345;
  else
    v346 = 0.0;
  v347 = v326 + v332;
  v348 = v335 + (float)(v326 + v332);
  if (v337 >= v348)
    v349 = v348;
  else
    v349 = v337;
  if (v348 >= 0.0)
    v350 = v349;
  else
    v350 = 0.0;
  v351 = v327 + v341;
  v352 = v343 + (float)(v327 + v341);
  if (v344 >= v352)
    v353 = v352;
  else
    v353 = (float)v330 + -1.001;
  if (v352 >= 0.0)
    v354 = v353;
  else
    v354 = 0.0;
  v355 = v334 * 0.0;
  v356 = (float)(v331 + v326) + (float)(v334 * 0.0);
  if (v337 >= v356)
    v357 = (float)(v331 + v326) + (float)(v334 * 0.0);
  else
    v357 = v337;
  if (v356 >= 0.0)
    v358 = v357;
  else
    v358 = 0.0;
  v359 = v331 * 0.0;
  v360 = (float)(v340 + v327) + (float)(v331 * 0.0);
  if (v344 >= v360)
    v361 = (float)(v340 + v327) + (float)(v331 * 0.0);
  else
    v361 = (float)v330 + -1.001;
  if (v360 >= 0.0)
    v362 = v361;
  else
    v362 = 0.0;
  v363 = v334 * -0.70711;
  v364 = (float)(v334 * -0.70711) + v347;
  if (v337 >= v364)
    v365 = v364;
  else
    v365 = v337;
  if (v364 >= 0.0)
    v366 = v365;
  else
    v366 = 0.0;
  v367 = v331 * -0.70711;
  v368 = (float)(v331 * -0.70711) + v351;
  if (v344 >= v368)
    v369 = v367 + v351;
  else
    v369 = (float)v330 + -1.001;
  if (v368 >= 0.0)
    v370 = v369;
  else
    v370 = 0.0;
  v371 = v363 + v333;
  if (v337 >= v371)
    v372 = v371;
  else
    v372 = v337;
  if (v371 >= 0.0)
    v373 = v372;
  else
    v373 = 0.0;
  v374 = v367 + v342;
  if (v344 >= v374)
    v375 = v374;
  else
    v375 = (float)v330 + -1.001;
  v175 = v374 < 0.0;
  v376 = (float)(v326 - v331) + v355;
  if (v175)
    v377 = 0.0;
  else
    v377 = v375;
  if (v337 >= v376)
    v378 = v376;
  else
    v378 = v337;
  v175 = v376 < 0.0;
  v379 = v327 - v340;
  if (v175)
    v380 = 0.0;
  else
    v380 = v378;
  v381 = v379 + v359;
  if (v344 >= v381)
    v382 = v381;
  else
    v382 = (float)v330 + -1.001;
  if (v381 >= 0.0)
    v272 = v382;
  v383 = v316 * 1.4142;
  v384 = v317 * 1.4142;
  v385 = v329[5];
  v386 = v918 + v256;
  v387 = v919 + v256;
  v388 = v921 + v256;
  v389 = v923 + v256;
  v390 = v927 + v256;
  v391 = v931 + v256;
  v392 = v935 + v258;
  v393 = v939 + v258;
  v394 = v925 + v258;
  v395 = v929 + v258;
  v396 = v933 + v258;
  v397 = v937 + v258;
  v398 = v941 + v254;
  v776 = v944 + v254;
  v774 = v945 + v254;
  v770 = v946 + v254;
  v780 = v948 + v254;
  v796 = v950 + v254;
  v746 = v953 + v318;
  v748 = v956 + v318;
  v753 = v959 + v318;
  v757 = v965 + v318;
  v760 = v962 + v318;
  v399 = v321;
  v802 = v321 + v318;
  v400 = v329[11];
  v829 = v346;
  v807 = v346;
  v401 = v400 + v385 * v807;
  v801 = v354;
  v402 = v400 + v385 * v801;
  v817 = v362;
  v810 = v370;
  v794 = v362;
  v403 = v400 + v385 * v794;
  v789 = v370;
  v404 = v400 + v385 * v789;
  v786 = v377;
  v405 = v400 + v385 * v786;
  v783 = v272;
  v406 = v400 + v385 * v783;
  v750 = v401 + v385;
  v755 = v402 + v385;
  v759 = v403 + v385;
  v762 = v404 + v385;
  v763 = v405 + v385;
  v764 = v406 + v385;
  v407 = vcvtms_s32_f32((float)((float)((float)((float)((float)((float)((float)(COERCE_FLOAT(COERCE_UNSIGNED_INT(v317 * 1.4142) & 0x807FFFFF | 0x3F800000)* -0.33333)+ 2.0)* COERCE_FLOAT(COERCE_UNSIGNED_INT(v317 * 1.4142) & 0x807FFFFF | 0x3F800000))+ -1.6667)+ (float)((COERCE_UNSIGNED_INT(v317 * 1.4142) >> 23) - 127))* 0.69315)- v1044)* v1039);
  v831 = v339;
  v917 = v339;
  v408 = (v917 + 1);
  v825 = v350;
  v915 = v350;
  v916 = (v915 + 1);
  v818 = v358;
  v914 = v358;
  v913 = (v914 + 1);
  v809 = v366;
  v912 = v366;
  v911 = (v912 + 1);
  v772 = v373;
  v910 = v373;
  v909 = (v910 + 1);
  v908 = v380;
  v907 = (v908 + 1);
  v1022 = -v12.__sinval;
  v892 = v319;
  if (v407 < 0)
  {
    v409 = 0;
    v410 = 0;
  }
  else if ((int)v14 * v905 <= v407)
  {
    v409 = v905 - 1;
    v410 = v14 - 1;
  }
  else
  {
    v409 = v407 / (int)v14;
    v410 = v407 % (int)v14;
  }
  v411 = (float)(1 << v409);
  v903 = v24;
  v412 = (unint64_t *)(v24 + 144 * (v14 * v409 + v410));
  v413 = (float)v412[6];
  v414 = (float)(1.0 / v411) * v1042;
  v415 = v263;
  v416 = (float)(1.0 / v411) * v263;
  v417 = v383;
  v418 = v383 / v411;
  v419 = v12.__cosval * (float)(v383 / v411);
  v420 = v414 + (float)(v419 * 0.0);
  v421 = (float)(v383 / v411) * v202;
  v422 = (float)v412[4] + -1.001;
  if (v422 >= (float)(v420 - v421))
    v423 = v420 - v421;
  else
    v423 = (float)v412[4] + -1.001;
  if ((float)(v420 - v421) >= 0.0)
    v424 = v423;
  else
    v424 = 0.0;
  v425 = v12.__sinval * v418;
  v426 = v416 + (float)((float)(v12.__sinval * v418) * 0.0);
  v427 = v413 + -1.001;
  if ((float)(v413 + -1.001) >= (float)(v426 - v419))
    v428 = v426 - v419;
  else
    v428 = v413 + -1.001;
  if ((float)(v426 - v419) >= 0.0)
    v429 = v428;
  else
    v429 = 0.0;
  v430 = v419 * 0.70711;
  v431 = v414 + (float)(v419 * 0.70711);
  v432 = (float)(v421 * 0.5) + v431;
  if (v422 >= v432)
    v433 = (float)(v421 * 0.5) + v431;
  else
    v433 = (float)v412[4] + -1.001;
  if (v432 >= 0.0)
    v434 = v433;
  else
    v434 = 0.0;
  v435 = v425 * 0.70711;
  v436 = v416 + (float)(v425 * 0.70711);
  v437 = v419 * 0.5;
  v438 = (float)(v419 * 0.5) + v436;
  if (v427 >= v438)
    v439 = (float)(v419 * 0.5) + v436;
  else
    v439 = v427;
  if (v438 >= 0.0)
    v440 = v439;
  else
    v440 = 0.0;
  v441 = v421 * -0.5;
  v442 = (float)(v421 * -0.5) + v431;
  if (v422 >= v442)
    v443 = v442;
  else
    v443 = (float)v412[4] + -1.001;
  if (v442 >= 0.0)
    v444 = v443;
  else
    v444 = 0.0;
  v445 = v419 * -0.5;
  v446 = (float)(v419 * -0.5) + v436;
  if (v427 >= v446)
    v447 = v445 + v436;
  else
    v447 = v427;
  if (v446 < 0.0)
    v447 = 0.0;
  v448 = v421 + v420;
  if (v422 >= (float)(v421 + v420))
    v449 = v421 + v420;
  else
    v449 = (float)v412[4] + -1.001;
  if (v448 < 0.0)
    v449 = 0.0;
  v450 = v419 + v426;
  if (v427 >= (float)(v419 + v426))
    v451 = v419 + v426;
  else
    v451 = v427;
  if (v450 < 0.0)
    v451 = 0.0;
  v452 = v414 - v430;
  v453 = v441 + v452;
  if (v422 >= (float)(v441 + v452))
    v454 = v441 + v452;
  else
    v454 = (float)v412[4] + -1.001;
  if (v453 >= 0.0)
    v455 = v454;
  else
    v455 = 0.0;
  v456 = v416 - v435;
  v457 = v445 + v456;
  if (v427 >= v457)
    v458 = v457;
  else
    v458 = v427;
  v459 = (float)(v421 * 0.5) + v452;
  if (v457 >= 0.0)
    v460 = v458;
  else
    v460 = 0.0;
  if (v422 >= v459)
    v422 = v459;
  v175 = v459 < 0.0;
  v842 = *(unsigned __int8 *)(v918 + v182);
  v841 = *(unsigned __int8 *)(v386 + v182);
  v840 = *(unsigned __int8 *)(v386 + v1011);
  v839 = *(unsigned __int8 *)(v919 + v1012);
  v920 = *(unsigned __int8 *)(v919 + v1010);
  v838 = *(unsigned __int8 *)(v387 + v1012);
  v837 = *(unsigned __int8 *)(v387 + v1010);
  v834 = *(unsigned __int8 *)(v921 + v1037);
  v835 = *(unsigned __int8 *)(v921 + v1009);
  v836 = *(unsigned __int8 *)(v388 + v1037);
  v922 = *(unsigned __int8 *)(v388 + v1009);
  v830 = *(unsigned __int8 *)(v923 + v1035);
  v832 = *(unsigned __int8 *)(v923 + v1008);
  v833 = *(unsigned __int8 *)(v389 + v1035);
  v924 = *(unsigned __int8 *)(v389 + v1008);
  v826 = *(unsigned __int8 *)(v927 + v1034);
  v827 = *(unsigned __int8 *)(v927 + v1007);
  v828 = *(unsigned __int8 *)(v390 + v1034);
  v928 = *(unsigned __int8 *)(v390 + v1007);
  v823 = *(unsigned __int8 *)(v931 + v1033);
  v824 = *(unsigned __int8 *)(v931 + v1006);
  v932 = *(unsigned __int8 *)(v391 + v1033);
  v461 = *(unsigned __int8 *)(v391 + v1006);
  v822 = *(unsigned __int8 *)(v935 + v1031);
  v462 = *(unsigned __int8 *)(v935 + v1005);
  v821 = *(unsigned __int8 *)(v392 + v1031);
  v820 = *(unsigned __int8 *)(v392 + v1005);
  v815 = *(unsigned __int8 *)(v939 + v1030);
  v816 = *(unsigned __int8 *)(v939 + v1002);
  v814 = *(unsigned __int8 *)(v393 + v1030);
  v813 = *(unsigned __int8 *)(v393 + v1002);
  v808 = *(unsigned __int8 *)(v925 + v1029);
  v811 = *(unsigned __int8 *)(v925 + v1000);
  v812 = *(unsigned __int8 *)(v394 + v1029);
  v926 = *(unsigned __int8 *)(v394 + v1000);
  v803 = *(unsigned __int8 *)(v929 + v1027);
  v804 = *(unsigned __int8 *)(v929 + v999);
  v805 = *(unsigned __int8 *)(v395 + v1027);
  v806 = *(unsigned __int8 *)(v395 + v999);
  v795 = *(unsigned __int8 *)(v933 + v1026);
  v798 = *(unsigned __int8 *)(v933 + v998);
  v799 = *(unsigned __int8 *)(v396 + v1026);
  v800 = *(unsigned __int8 *)(v396 + v998);
  v790 = *(unsigned __int8 *)(v937 + v1024);
  v791 = *(unsigned __int8 *)(v937 + v996);
  v792 = *(unsigned __int8 *)(v397 + v1024);
  v793 = *(unsigned __int8 *)(v397 + v996);
  v787 = *(unsigned __int8 *)(v941 + v992);
  v788 = *(unsigned __int8 *)(v941 + v993);
  v785 = *(unsigned __int8 *)(v398 + v992);
  v784 = *(unsigned __int8 *)(v398 + v993);
  v779 = *(unsigned __int8 *)(v944 + v988);
  v782 = *(unsigned __int8 *)(v944 + v989);
  v778 = *(unsigned __int8 *)(v776 + v988);
  v777 = *(unsigned __int8 *)(v776 + v989);
  v773 = *(unsigned __int8 *)(v774 + v985);
  v775 = *(unsigned __int8 *)(v774 + v984);
  v766 = *(unsigned __int8 *)(v946 + v981);
  v767 = *(unsigned __int8 *)(v946 + v980);
  v768 = *(unsigned __int8 *)(v770 + v981);
  v769 = *(unsigned __int8 *)(v770 + v980);
  v930 = *(unsigned __int8 *)(v948 + v1003);
  v934 = *(unsigned __int8 *)(v948 + v1001);
  v463 = *(unsigned __int8 *)(v780 + v1003);
  v940 = *(unsigned __int8 *)(v780 + v1001);
  v765 = *(unsigned __int8 *)(v950 + v983);
  v771 = *(unsigned __int8 *)(v950 + v979);
  v781 = *(unsigned __int8 *)(v796 + v983);
  v797 = *(unsigned __int8 *)(v796 + v979);
  v745 = *(unsigned __int8 *)(v953 + v977);
  v752 = *(unsigned __int8 *)(v953 + v978);
  v744 = *(unsigned __int8 *)(v746 + v977);
  v747 = *(unsigned __int8 *)(v746 + v978);
  v742 = *(unsigned __int8 *)(v956 + v975);
  v743 = *(unsigned __int8 *)(v956 + v976);
  v741 = *(unsigned __int8 *)(v748 + v975);
  v749 = *(unsigned __int8 *)(v748 + v976);
  v738 = *(unsigned __int8 *)(v959 + v974);
  v739 = *(unsigned __int8 *)(v959 + v973);
  v740 = *(unsigned __int8 *)(v753 + v974);
  v754 = *(unsigned __int8 *)(v753 + v973);
  v735 = *(unsigned __int8 *)(v965 + v972);
  v736 = *(unsigned __int8 *)(v965 + v971);
  v737 = *(unsigned __int8 *)(v757 + v972);
  v758 = *(unsigned __int8 *)(v757 + v971);
  v732 = *(unsigned __int8 *)(v962 + v970);
  v733 = *(unsigned __int8 *)(v962 + v969);
  v734 = *(unsigned __int8 *)(v760 + v970);
  v761 = *(unsigned __int8 *)(v760 + v969);
  v730 = *(unsigned __int8 *)(v399 + v968);
  v731 = *(unsigned __int8 *)(v399 + v967);
  v728 = *(unsigned __int8 *)(v401 + v917);
  v729 = *(unsigned __int8 *)(v401 + v408);
  v727 = *(unsigned __int8 *)(v750 + v917);
  v751 = *(unsigned __int8 *)(v750 + v408);
  v942 = *(unsigned __int8 *)(v402 + v915);
  v464 = *(unsigned __int8 *)(v402 + v916);
  v726 = *(unsigned __int8 *)(v755 + v915);
  v756 = *(unsigned __int8 *)(v755 + v916);
  v724 = *(unsigned __int8 *)(v403 + v914);
  v725 = *(unsigned __int8 *)(v403 + v913);
  v722 = *(unsigned __int8 *)(v404 + v912);
  v723 = *(unsigned __int8 *)(v404 + v911);
  v720 = *(unsigned __int8 *)(v405 + v910);
  v721 = *(unsigned __int8 *)(v405 + v909);
  v465 = v437 + v456;
  if (v175)
    v466 = 0.0;
  else
    v466 = v422;
  if (v427 >= v465)
    v427 = v465;
  v718 = *(unsigned __int8 *)(v406 + v908);
  v719 = *(unsigned __int8 *)(v406 + v907);
  v467 = v412[5];
  v468 = v412[11];
  v469 = v424;
  v470 = (v469 + 1);
  v951 = v429;
  v471 = v468 + v467 * v951;
  v716 = *(unsigned __int8 *)(v471 + v469);
  v717 = *(unsigned __int8 *)(v471 + v470);
  v715 = *(unsigned __int8 *)(v471 + v467 + v469);
  v714 = *(unsigned __int8 *)(v471 + v467 + v470);
  v472 = v434;
  v473 = v440;
  v474 = (v472 + 1);
  v475 = v468 + v467 * v473;
  v713 = *(unsigned __int8 *)(v475 + v472);
  v954 = *(unsigned __int8 *)(v475 + v474);
  v712 = *(unsigned __int8 *)(v475 + v467 + v472);
  v711 = *(unsigned __int8 *)(v475 + v467 + v474);
  v476 = v444;
  v477 = v447;
  v478 = (v476 + 1);
  v479 = v468 + v467 * v477;
  v708 = *(unsigned __int8 *)(v479 + v476);
  v709 = *(unsigned __int8 *)(v479 + v478);
  v710 = *(unsigned __int8 *)(v479 + v467 + v476);
  v957 = *(unsigned __int8 *)(v479 + v467 + v478);
  v480 = v449;
  v481 = v451;
  v482 = (v480 + 1);
  v483 = v468 + v467 * v481;
  v705 = *(unsigned __int8 *)(v483 + v480);
  v706 = *(unsigned __int8 *)(v483 + v482);
  v707 = *(unsigned __int8 *)(v483 + v467 + v480);
  v960 = *(unsigned __int8 *)(v483 + v467 + v482);
  v484 = v455;
  v485 = v460;
  v486 = (v484 + 1);
  v487 = v468 + v467 * v485;
  v488 = v487 + v467;
  v489 = *(unsigned __int8 *)(v487 + v484);
  v490 = *(unsigned __int8 *)(v487 + v486);
  v963 = *(unsigned __int8 *)(v488 + v484);
  v491 = (float)((float)((float)((float)((float)((float)(COERCE_FLOAT(COERCE_UNSIGNED_INT(v384 * 1.4142) & 0x807FFFFF | 0x3F800000)
                                                       * -0.33333)
                                               + 2.0)
                                       * COERCE_FLOAT(COERCE_UNSIGNED_INT(v384 * 1.4142) & 0x807FFFFF | 0x3F800000))
                               + -1.6667)
                       + (float)((COERCE_UNSIGNED_INT(v384 * 1.4142) >> 23) - 127))
               * 0.69315)
       - v1044;
  v1045 = *(unsigned __int8 *)(v488 + v486);
  if (v465 < 0.0)
    v427 = 0.0;
  v492 = v427;
  v493 = v468 + v467 * v492;
  v494 = v493 + v467;
  v495 = v466;
  v496 = (v495 + 1);
  v497 = *(unsigned __int8 *)(v493 + v495);
  v498 = *(unsigned __int8 *)(v493 + v496);
  v499 = *(unsigned __int8 *)(v494 + v495);
  v500 = *(unsigned __int8 *)(v494 + v496);
  v501 = (int)v819;
  v502 = vcvtms_s32_f32(v491 * v1039);
  v906 = v14;
  if (v502 < 0)
  {
    v938 = 0;
    v936 = 0;
    v506 = v415;
    v504 = v1021;
  }
  else
  {
    v1040 = v464;
    v503 = *(unsigned __int8 *)(v935 + v1005);
    v504 = v1021;
    if ((int)v14 * v905 <= v502)
    {
      v938 = v905 - 1;
      v505 = v14 - 1;
    }
    else
    {
      v938 = v502 / (int)v14;
      v505 = v502 % (int)v14;
    }
    v936 = v505;
    v506 = v415;
    v462 = v503;
    v464 = v1040;
  }
  v507 = v417 * 1.4142;
  v966 = (float)((float)((float)((float)((float)((float)v496 - v466)
                                       * (float)((float)(v492 + 1) - v427))
                               * (float)v497)
                       + (float)((float)((float)(v466 - (float)v495)
                                       * (float)((float)(v492 + 1) - v427))
                               * (float)v498))
               + (float)((float)((float)(v427 - (float)v492) * (float)((float)v496 - v466))
                       * (float)v499))
       + (float)((float)((float)(v466 - (float)v495) * (float)(v427 - (float)v492))
               * (float)v500);
  v964 = (float)((float)((float)((float)((float)((float)v486 - v455)
                                       * (float)((float)(v485 + 1) - v460))
                               * (float)v489)
                       + (float)((float)((float)(v455 - (float)v484)
                                       * (float)((float)(v485 + 1) - v460))
                               * (float)v490))
               + (float)((float)((float)(v460 - (float)v485) * (float)((float)v486 - v455))
                       * (float)v963))
       + (float)((float)((float)(v455 - (float)v484) * (float)(v460 - (float)v485))
               * (float)v1045);
  v961 = (float)((float)((float)((float)((float)((float)v482 - v449)
                                       * (float)((float)(v481 + 1) - v451))
                               * (float)v705)
                       + (float)((float)((float)(v449 - (float)v480)
                                       * (float)((float)(v481 + 1) - v451))
                               * (float)v706))
               + (float)((float)((float)(v451 - (float)v481) * (float)((float)v482 - v449))
                       * (float)v707))
       + (float)((float)((float)(v449 - (float)v480) * (float)(v451 - (float)v481))
               * (float)v960);
  v958 = (float)((float)((float)((float)((float)((float)v478 - v444)
                                       * (float)((float)(v477 + 1) - v447))
                               * (float)v708)
                       + (float)((float)((float)(v444 - (float)v476)
                                       * (float)((float)(v477 + 1) - v447))
                               * (float)v709))
               + (float)((float)((float)(v447 - (float)v477) * (float)((float)v478 - v444))
                       * (float)v710))
       + (float)((float)((float)(v444 - (float)v476) * (float)(v447 - (float)v477))
               * (float)v957);
  v955 = (float)((float)((float)(v434 - (float)v472) * (float)(v440 - (float)v473))
               * (float)v711)
       + (float)((float)((float)((float)(v440 - (float)v473) * (float)((float)v474 - v434))
                       * (float)v712)
               + (float)((float)((float)((float)((float)v474 - v434)
                                       * (float)((float)(v473 + 1) - v440))
                               * (float)v713)
                       + (float)((float)((float)(v434 - (float)v472)
                                       * (float)((float)(v473 + 1) - v440))
                               * (float)v954)));
  v952 = (float)((float)((float)(v424 - (float)v469) * (float)(v429 - (float)v951))
               * (float)v714)
       + (float)((float)((float)((float)(v429 - (float)v951)
                               * (float)((float)(v469 + 1) - v424))
                       * (float)v715)
               + (float)((float)((float)((float)((float)(v469 + 1) - v424)
                                       * (float)((float)(v951 + 1) - v429))
                               * (float)v716)
                       + (float)((float)((float)(v424 - (float)v469)
                                       * (float)((float)(v951 + 1) - v429))
                               * (float)v717)));
  v949 = (float)((float)((float)((float)((float)((float)v907 - v380)
                                       * (float)((float)(v783 + 1) - v272))
                               * (float)v718)
                       + (float)((float)((float)(v380 - (float)v908)
                                       * (float)((float)(v783 + 1) - v272))
                               * (float)v719))
               + (float)((float)((float)((float)v907 - v380) * (float)(v272 - (float)v783))
                       * (float)*(unsigned __int8 *)(v764 + v908)))
       + (float)((float)((float)(v380 - (float)v908) * (float)(v272 - (float)v783))
               * (float)*(unsigned __int8 *)(v764 + v907));
  v947 = (float)((float)((float)((float)((float)((float)v909 - v772)
                                       * (float)((float)(v786 + 1) - v377))
                               * (float)v720)
                       + (float)((float)((float)(v772 - (float)v910)
                                       * (float)((float)(v786 + 1) - v377))
                               * (float)v721))
               + (float)((float)((float)(v377 - (float)v786) * (float)((float)v909 - v772))
                       * (float)*(unsigned __int8 *)(v763 + v910)))
       + (float)((float)((float)(v772 - (float)v910) * (float)(v377 - (float)v786))
               * (float)*(unsigned __int8 *)(v763 + v909));
  v943 = (float)((float)((float)(v825 - (float)v915) * (float)(v354 - (float)v801))
               * (float)v756)
       + (float)((float)((float)((float)(v354 - (float)v801) * (float)((float)v916 - v825))
                       * (float)v726)
               + (float)((float)((float)((float)((float)v916 - v825)
                                       * (float)((float)(v801 + 1) - v354))
                               * (float)v942)
                       + (float)((float)((float)(v825 - (float)v915)
                                       * (float)((float)(v801 + 1) - v354))
                               * (float)v464)));
  v508 = (int)(float)((float)((float)((float)((float)((float)((float)((float)v980 - v863)
                                                            * (float)((float)(v982 + 1) - v862))
                                                    * (float)v766)
                                            + (float)((float)((float)(v863 - (float)v981)
                                                            * (float)((float)(v982 + 1) - v862))
                                                    * (float)v767))
                                    + (float)((float)((float)(v862 - (float)v982)
                                                    * (float)((float)v980 - v863))
                                            * (float)v768))
                            + (float)((float)((float)(v863 - (float)v981)
                                            * (float)(v862 - (float)v982))
                                    * (float)v769))
                    * 255.0);
  v509 = (int)(float)((float)((float)((float)((float)((float)((float)((float)v984 - v866)
                                                            * (float)((float)(v986 + 1) - v865))
                                                    * (float)*(unsigned __int8 *)(v945 + v985))
                                            + (float)((float)((float)(v866 - (float)v985)
                                                            * (float)((float)(v986 + 1) - v865))
                                                    * (float)*(unsigned __int8 *)(v945 + v984)))
                                    + (float)((float)((float)((float)v984 - v866)
                                                    * (float)(v865 - (float)v986))
                                            * (float)v773))
                            + (float)((float)((float)(v866 - (float)v985)
                                            * (float)(v865 - (float)v986))
                                    * (float)v775))
                    * 255.0);
  v987 = v509;
  v1041 = (int)(float)((float)((float)((float)((float)(v868 - (float)v988)
                                             * (float)(v867 - (float)v990))
                                     * (float)v777)
                             + (float)((float)((float)((float)(v867 - (float)v990)
                                                     * (float)((float)v989 - v868))
                                             * (float)v778)
                                     + (float)((float)((float)((float)((float)v989 - v868)
                                                             * (float)((float)(v990 + 1) - v867))
                                                     * (float)v779)
                                             + (float)((float)((float)(v868 - (float)v988)
                                                             * (float)((float)(v990 + 1) - v867))
                                                     * (float)v782))))
                     * 255.0);
  v1046 = (int)(float)((float)((float)((float)((float)(v870 - (float)v992)
                                             * (float)(v869 - (float)v995))
                                     * (float)v784)
                             + (float)((float)((float)((float)(v869 - (float)v995)
                                                     * (float)((float)v993 - v870))
                                             * (float)v785)
                                     + (float)((float)((float)((float)((float)v993 - v870)
                                                             * (float)((float)(v995 + 1) - v869))
                                                     * (float)v787)
                                             + (float)((float)((float)(v870 - (float)v992)
                                                             * (float)((float)(v995 + 1) - v869))
                                                     * (float)v788))))
                     * 255.0);
  v510 = (int)(float)((float)((float)((float)((float)((float)((float)((float)v998 - v880)
                                                            * (float)((float)(v877 + 1) - v879))
                                                    * (float)v795)
                                            + (float)((float)((float)(v880 - (float)v1026)
                                                            * (float)((float)(v877 + 1) - v879))
                                                    * (float)v798))
                                    + (float)((float)((float)(v879 - (float)v877)
                                                    * (float)((float)v998 - v880))
                                            * (float)v799))
                            + (float)((float)((float)(v880 - (float)v1026) * (float)(v879 - (float)v877))
                                    * (float)v800))
                    * 255.0);
  v511 = (int)(float)((float)((float)((float)((float)((float)((float)((float)v1000 - v887)
                                                            * (float)((float)(v881 + 1) - v886))
                                                    * (float)v808)
                                            + (float)((float)((float)(v887 - (float)v1029)
                                                            * (float)((float)(v881 + 1) - v886))
                                                    * (float)v811))
                                    + (float)((float)((float)(v886 - (float)v881)
                                                    * (float)((float)v1000 - v887))
                                            * (float)v812))
                            + (float)((float)((float)(v887 - (float)v1029) * (float)(v886 - (float)v881))
                                    * (float)v926))
                    * 255.0);
  v885 = v144;
  v512 = (int)(float)((float)((float)((float)((float)(v890 - (float)v1031) * (float)(v144 - (float)v885))
                                    * (float)v820)
                            + (float)((float)((float)((float)(v144 - (float)v885)
                                                    * (float)((float)v1005 - v890))
                                            * (float)v821)
                                    + (float)((float)((float)((float)((float)v1005 - v890)
                                                            * (float)((float)(v885 + 1) - v144))
                                                    * (float)v822)
                                            + (float)((float)((float)(v890 - (float)v1031)
                                                            * (float)((float)(v885 + 1) - v144))
                                                    * (float)v462))))
                    * 255.0);
  v1032 = v512;
  v513 = (int)(float)((float)((float)((float)((float)((float)((float)((float)v1007 - v1014)
                                                            * (float)((float)(v892 + 1) - v895))
                                                    * (float)v826)
                                            + (float)((float)((float)(v1014 - (float)v1034)
                                                            * (float)((float)(v892 + 1) - v895))
                                                    * (float)v827))
                                    + (float)((float)((float)(v895 - (float)v892)
                                                    * (float)((float)v1007 - v1014))
                                            * (float)v828))
                            + (float)((float)((float)(v1014 - (float)v1034) * (float)(v895 - (float)v892))
                                    * (float)v928))
                    * 255.0);
  v514 = (int)(float)((float)((float)((float)((float)((float)((float)((float)v1009 - v1018)
                                                            * (float)((float)(v896 + 1) - v900))
                                                    * (float)v834)
                                            + (float)((float)((float)(v1018 - (float)v1037)
                                                            * (float)((float)(v896 + 1) - v900))
                                                    * (float)v835))
                                    + (float)((float)((float)(v900 - (float)v896)
                                                    * (float)((float)v1009 - v1018))
                                            * (float)v836))
                            + (float)((float)((float)(v1018 - (float)v1037) * (float)(v900 - (float)v896))
                                    * (float)v922))
                    * 255.0);
  v515 = (int)(float)((float)((float)((float)((float)(v1019 - (float)v1012) * (float)(v901 - (float)v897))
                                    * (float)v837)
                            + (float)((float)((float)((float)(v901 - (float)v897)
                                                    * (float)((float)v1010 - v1019))
                                            * (float)v838)
                                    + (float)((float)((float)((float)((float)v1010 - v1019)
                                                            * (float)((float)(v897 + 1) - v901))
                                                    * (float)v839)
                                            + (float)((float)((float)(v1019 - (float)v1012)
                                                            * (float)((float)(v897 + 1) - v901))
                                                    * (float)v920))))
                    * 255.0);
  v516 = (float)((float)((float)((float)((float)((float)v1001 - v872) * (float)((float)(v871 + 1) - v874))
                               * (float)v930)
                       + (float)((float)((float)(v872 - (float)v1003) * (float)((float)(v871 + 1) - v874))
                               * (float)v934))
               + (float)((float)((float)(v874 - (float)v871) * (float)((float)v1001 - v872)) * (float)v463))
       + (float)((float)((float)(v872 - (float)v1003) * (float)(v874 - (float)v871)) * (float)v940);
  v517 = (int)(float)((float)((float)((float)((float)(v504 - (float)v1021) * (float)(v902 - (float)v899))
                                    * (float)v840)
                            + (float)((float)((float)((float)(v902 - (float)v899)
                                                    * (float)((float)v1011 - v504))
                                            * (float)v841)
                                    + (float)((float)((float)((float)((float)v1011 - v504)
                                                            * (float)((float)(v899 + 1) - v902))
                                                    * (float)v842)
                                            + (float)((float)((float)(v504 - (float)v1021)
                                                            * (float)((float)(v899 + 1) - v902))
                                                    * (float)*(unsigned __int8 *)(v918 + v1011)))))
                    * 255.0);
  v518 = (float)(1 << v938);
  v519 = (float)(1.0 / v518) * v1042;
  v520 = (float)(1.0 / v518) * v506;
  v521 = v507 / v518;
  v522 = (unint64_t *)(v903 + 144 * (v906 * v938 + v936));
  v523 = v12.__cosval * v521;
  v524 = (float)(v12.__cosval * v521) * 0.5;
  v525 = v521 * v1022;
  v526 = (float)v522[4] + -1.001;
  v527 = v519 - v524;
  v528 = (float)(v521 * v1022) * 0.70711;
  if (v526 >= (float)(v528 + (float)(v519 - v524)))
    v529 = v528 + v527;
  else
    v529 = (float)v522[4] + -1.001;
  v530 = v12.__sinval * v521;
  v531 = (float)v522[6] + -1.001;
  if ((float)(v528 + v527) >= 0.0)
    v532 = v529;
  else
    v532 = 0.0;
  v533 = v530 * 0.5;
  v534 = v523 * 0.70711;
  v535 = v520 - (float)(v530 * 0.5);
  if (v531 >= (float)((float)(v523 * 0.70711) + v535))
    v536 = v534 + v535;
  else
    v536 = (float)v522[6] + -1.001;
  if ((float)((float)(v523 * 0.70711) + v535) >= 0.0)
    v537 = v536;
  else
    v537 = 0.0;
  v538 = v532;
  v539 = v537;
  v540 = (v538 + 1);
  v541 = (float)v540 - v532;
  v542 = v532 - (float)v532;
  v543 = (float)(v539 + 1) - v537;
  *(float *)&v544 = v537 - (float)v537;
  *(float *)&v545 = v541 * v543;
  v546 = v542 * v543;
  v547 = *(float *)&v544 * v541;
  v548 = v542 * *(float *)&v544;
  v549 = v522[5];
  v550 = v522[11];
  v551 = v550 + v549 * v539;
  LOBYTE(v544) = *(_BYTE *)(v551 + v538);
  v552 = *(float *)&v545 * (float)v544;
  LOBYTE(v545) = *(_BYTE *)(v551 + v540);
  *(float *)&v553 = v546 * (float)v545;
  v554 = v552 + *(float *)&v553;
  v555 = v551 + v549;
  LOBYTE(v553) = *(_BYTE *)(v555 + v538);
  *(float *)&v556 = v547 * (float)v553;
  v557 = *(float *)&v556 + v554;
  LOBYTE(v556) = *(_BYTE *)(v555 + v540);
  v558 = v548 * (float)v556;
  v559 = v558 + v557;
  v560 = v519 + v524;
  v561 = v528 + (float)(v519 + v524);
  if (v526 >= v561)
    v562 = v561;
  else
    v562 = v526;
  if (v561 >= 0.0)
    v563 = v562;
  else
    v563 = 0.0;
  v564 = v520 + v533;
  v565 = v534 + (float)(v520 + v533);
  if (v531 >= v565)
    v566 = v565;
  else
    v566 = v531;
  v567 = v563;
  if (v565 >= 0.0)
    v568 = v566;
  else
    v568 = 0.0;
  v569 = v568;
  v570 = (v567 + 1);
  v571 = (float)v570 - v563;
  v572 = v563 - (float)v563;
  v573 = (float)(v569 + 1) - v568;
  *(float *)&v574 = v568 - (float)v568;
  *(float *)&v575 = v571 * v573;
  v576 = v572 * v573;
  v577 = *(float *)&v574 * v571;
  v578 = v572 * *(float *)&v574;
  v579 = v550 + v549 * v569;
  LOBYTE(v574) = *(_BYTE *)(v579 + v567);
  v580 = *(float *)&v575 * (float)v574;
  LOBYTE(v575) = *(_BYTE *)(v579 + v570);
  *(float *)&v581 = v576 * (float)v575;
  v582 = v580 + *(float *)&v581;
  v583 = v579 + v549;
  LOBYTE(v581) = *(_BYTE *)(v583 + v567);
  *(float *)&v584 = v577 * (float)v581;
  v585 = *(float *)&v584 + v582;
  LOBYTE(v584) = *(_BYTE *)(v583 + v570);
  v586 = (float)(v578 * (float)v584) + v585;
  v587 = v525 * 0.0;
  v588 = (float)(v523 + v519) + (float)(v525 * 0.0);
  if (v526 >= v588)
    v589 = (float)(v523 + v519) + (float)(v525 * 0.0);
  else
    v589 = v526;
  if (v588 >= 0.0)
    v590 = v589;
  else
    v590 = 0.0;
  v591 = v523 * 0.0;
  v592 = (float)(v530 + v520) + (float)(v523 * 0.0);
  if (v531 >= v592)
    v593 = (float)(v530 + v520) + (float)(v523 * 0.0);
  else
    v593 = v531;
  if (v592 >= 0.0)
    v594 = v593;
  else
    v594 = 0.0;
  v595 = v590;
  v596 = v594;
  v597 = (v595 + 1);
  v598 = (float)v597 - v590;
  v599 = v590 - (float)v590;
  v600 = (float)(v596 + 1) - v594;
  *(float *)&v601 = v594 - (float)v594;
  v602 = v598 * v600;
  *(float *)&v603 = v599 * v600;
  v604 = v598 * *(float *)&v601;
  v605 = v599 * *(float *)&v601;
  v606 = v550 + v549 * v596;
  LOBYTE(v601) = *(_BYTE *)(v606 + v595);
  LOBYTE(v558) = *(_BYTE *)(v606 + v597);
  v607 = *(float *)&v603 * (float)LODWORD(v558);
  v608 = v606 + v549;
  LOBYTE(v603) = *(_BYTE *)(v608 + v595);
  v609 = (float)(v602 * (float)v601) + v607;
  *(float *)&v610 = v604 * (float)v603;
  v611 = v609 + *(float *)&v610;
  LOBYTE(v610) = *(_BYTE *)(v608 + v597);
  v612 = v611 + (float)(v605 * (float)v610);
  v613 = v525 * -0.70711;
  v614 = (float)(v525 * -0.70711) + v560;
  if (v526 >= v614)
    v615 = v614;
  else
    v615 = v526;
  if (v614 >= 0.0)
    v616 = v615;
  else
    v616 = 0.0;
  v617 = v523 * -0.70711;
  v618 = (float)(v523 * -0.70711) + v564;
  if (v531 >= v618)
    v619 = v617 + v564;
  else
    v619 = v531;
  v620 = v616;
  if (v618 >= 0.0)
    v621 = v619;
  else
    v621 = 0.0;
  v622 = v621;
  v623 = (v620 + 1);
  v624 = (float)v623 - v616;
  v625 = v616 - (float)v616;
  v626 = (float)(v622 + 1) - v621;
  *(float *)&v627 = v621 - (float)v621;
  *(float *)&v628 = v624 * v626;
  v629 = v625 * v626;
  v630 = *(float *)&v627 * v624;
  v631 = v625 * *(float *)&v627;
  v632 = v550 + v549 * v622;
  LOBYTE(v627) = *(_BYTE *)(v632 + v620);
  v633 = *(float *)&v628 * (float)v627;
  LOBYTE(v628) = *(_BYTE *)(v632 + v623);
  *(float *)&v634 = v629 * (float)v628;
  v635 = v633 + *(float *)&v634;
  v636 = v632 + v549;
  LOBYTE(v634) = *(_BYTE *)(v636 + v620);
  *(float *)&v637 = v630 * (float)v634;
  v638 = v635 + *(float *)&v637;
  LOBYTE(v637) = *(_BYTE *)(v636 + v623);
  v639 = v638 + (float)(v631 * (float)v637);
  v640 = v613 + v527;
  if (v526 >= v640)
    v641 = v640;
  else
    v641 = v526;
  v642 = v617 + v535;
  if (v640 >= 0.0)
    v643 = v641;
  else
    v643 = 0.0;
  if (v531 >= v642)
    v644 = v642;
  else
    v644 = v531;
  v175 = v642 < 0.0;
  v645 = v643;
  v646 = (v645 + 1);
  v647 = (float)v646 - v643;
  v648 = v643 - (float)v643;
  if (v175)
    v644 = 0.0;
  v649 = v644;
  v650 = (float)(v649 + 1) - v644;
  *(float *)&v651 = v644 - (float)v644;
  *(float *)&v652 = v647 * v650;
  v653 = v648 * v650;
  v654 = *(float *)&v651 * v647;
  v655 = v648 * *(float *)&v651;
  v656 = v550 + v549 * v649;
  LOBYTE(v651) = *(_BYTE *)(v656 + v645);
  v657 = *(float *)&v652 * (float)v651;
  LOBYTE(v652) = *(_BYTE *)(v656 + v646);
  *(float *)&v658 = v653 * (float)v652;
  *(float *)&v659 = v657 + *(float *)&v658;
  v660 = v656 + v549;
  LOBYTE(v658) = *(_BYTE *)(v660 + v645);
  v661 = *(float *)&v659 + (float)(v654 * (float)v658);
  LOBYTE(v659) = *(_BYTE *)(v660 + v646);
  v662 = v661 + (float)(v655 * (float)v659);
  v663 = (float)(v519 - v523) + v587;
  if (v526 >= v663)
    v664 = (float)(v519 - v523) + v587;
  else
    v664 = v526;
  if (v663 < 0.0)
    v664 = 0.0;
  v665 = (float)(v520 - v530) + v591;
  if (v531 >= v665)
    v666 = (float)(v520 - v530) + v591;
  else
    v666 = v531;
  v667 = v664;
  if (v665 >= 0.0)
    v668 = v666;
  else
    v668 = 0.0;
  v669 = v668;
  v670 = (v667 + 1);
  v671 = v550 + v549 * v669;
  v672 = (float)v670 - v664;
  v673 = (float)(v669 + 1) - v668;
  *(float *)&v674 = v664 - (float)v664;
  v675 = v668 - (float)v668;
  *(float *)&v676 = v672 * v673;
  v677 = *(float *)&v674 * v673;
  v678 = v672 * v675;
  v679 = *(float *)&v674 * v675;
  LOBYTE(v674) = *(_BYTE *)(v671 + v667);
  v680 = *(float *)&v676 * (float)v674;
  LOBYTE(v676) = *(_BYTE *)(v671 + v670);
  *(float *)&v681 = v677 * (float)v676;
  v682 = v671 + v549;
  v683 = v680 + *(float *)&v681;
  LOBYTE(v681) = *(_BYTE *)(v682 + v667);
  *(float *)&v684 = v678 * (float)v681;
  v685 = v683 + *(float *)&v684;
  LOBYTE(v684) = *(_BYTE *)(v682 + v670);
  v686 = v958 * 255.0;
  v687 = (float)(v685 + (float)(v679 * (float)v684)) * 255.0;
  LODWORD(v669) = (int)(float)((float)((float)((float)((float)((float)((float)((float)v1008 - v1016)
                                                                     * (float)((float)(v894 + 1) - v898))
                                                             * (float)v830)
                                                     + (float)((float)((float)(v1016 - (float)v1035)
                                                                     * (float)((float)(v894 + 1) - v898))
                                                             * (float)v832))
                                             + (float)((float)((float)(v898 - (float)v894)
                                                             * (float)((float)v1008 - v1016))
                                                     * (float)v833))
                                     + (float)((float)((float)(v1016 - (float)v1035)
                                                     * (float)(v898 - (float)v894))
                                             * (float)v924))
                             * 255.0);
  v688 = (int)(float)((float)((float)((float)((float)((float)((float)((float)v1006 - v1013)
                                                            * (float)((float)(v891 + 1) - v893))
                                                    * (float)v823)
                                            + (float)((float)((float)(v1013 - (float)v1033)
                                                            * (float)((float)(v891 + 1) - v893))
                                                    * (float)v824))
                                    + (float)((float)((float)(v893 - (float)v891)
                                                    * (float)((float)v1006 - v1013))
                                            * (float)v932))
                            + (float)((float)((float)(v1013 - (float)v1033) * (float)(v893 - (float)v891))
                                    * (float)v461))
                    * 255.0);
  v1004 = v512 > v501;
  v689 = (int)(float)((float)((float)((float)((float)(v889 - (float)v1030) * (float)(v888 - (float)v882))
                                    * (float)v813)
                            + (float)((float)((float)((float)(v888 - (float)v882)
                                                    * (float)((float)v1002 - v889))
                                            * (float)v814)
                                    + (float)((float)((float)((float)((float)v1002 - v889)
                                                            * (float)((float)(v882 + 1) - v888))
                                                    * (float)v815)
                                            + (float)((float)((float)(v889 - (float)v1030)
                                                            * (float)((float)(v882 + 1) - v888))
                                                    * (float)v816))))
                    * 255.0);
  v690 = (int)(float)((float)((float)((float)((float)((float)((float)((float)v999 - v883)
                                                            * (float)((float)(v878 + 1) - v884))
                                                    * (float)v803)
                                            + (float)((float)((float)(v883 - (float)v1027)
                                                            * (float)((float)(v878 + 1) - v884))
                                                    * (float)v804))
                                    + (float)((float)((float)(v884 - (float)v878)
                                                    * (float)((float)v999 - v883))
                                            * (float)v805))
                            + (float)((float)((float)(v883 - (float)v1027) * (float)(v884 - (float)v878))
                                    * (float)v806))
                    * 255.0);
  LODWORD(v671) = (int)(float)((float)((float)((float)((float)((float)((float)((float)v996 - v876)
                                                                     * (float)((float)(v873 + 1) - v875))
                                                             * (float)v790)
                                                     + (float)((float)((float)(v876 - (float)v1024)
                                                                     * (float)((float)(v873 + 1) - v875))
                                                             * (float)v791))
                                             + (float)((float)((float)(v875 - (float)v873)
                                                             * (float)((float)v996 - v876))
                                                     * (float)v792))
                                     + (float)((float)((float)(v876 - (float)v1024)
                                                     * (float)(v875 - (float)v873))
                                             * (float)v793))
                             * 255.0);
  v997 = (int)(float)((float)((float)((float)((float)(v870 - (float)v992)
                                            * (float)(v869 - (float)v995))
                                    * (float)v784)
                            + (float)((float)((float)((float)(v869 - (float)v995)
                                                    * (float)((float)v993 - v870))
                                            * (float)v785)
                                    + (float)((float)((float)((float)((float)v993 - v870)
                                                            * (float)((float)(v995 + 1) - v869))
                                                    * (float)v787)
                                            + (float)((float)((float)(v870 - (float)v992)
                                                            * (float)((float)(v995 + 1) - v869))
                                                    * (float)v788))))
                    * 255.0) > v501;
  v994 = v509 > v501;
  v691 = (int)(float)(v516 * 255.0);
  v692 = (int)(float)((float)((float)((float)((float)(v860 - (float)v977)
                                            * (float)(v859 - (float)v854))
                                    * (float)v747)
                            + (float)((float)((float)((float)(v859 - (float)v854)
                                                    * (float)((float)v978 - v860))
                                            * (float)v744)
                                    + (float)((float)((float)((float)((float)v978 - v860)
                                                            * (float)((float)(v854 + 1) - v859))
                                                    * (float)v745)
                                            + (float)((float)((float)(v860 - (float)v977)
                                                            * (float)((float)(v854 + 1) - v859))
                                                    * (float)v752))))
                    * 255.0);
  v693 = (int)(float)((float)((float)((float)((float)((float)((float)((float)v979 - v861)
                                                            * (float)((float)(v991 + 1) - v864))
                                                    * (float)v765)
                                            + (float)((float)((float)(v861 - (float)v983)
                                                            * (float)((float)(v991 + 1) - v864))
                                                    * (float)v771))
                                    + (float)((float)((float)((float)v979 - v861)
                                                    * (float)(v864 - (float)v991))
                                            * (float)v781))
                            + (float)((float)((float)(v861 - (float)v983)
                                            * (float)(v864 - (float)v991))
                                    * (float)v797))
                    * 255.0);
  v694 = (int)(float)((float)((float)((float)((float)(v858 - (float)v975)
                                            * (float)(v857 - (float)v851))
                                    * (float)v749)
                            + (float)((float)((float)((float)(v857 - (float)v851)
                                                    * (float)((float)v976 - v858))
                                            * (float)v741)
                                    + (float)((float)((float)((float)((float)v976 - v858)
                                                            * (float)((float)(v851 + 1) - v857))
                                                    * (float)v742)
                                            + (float)((float)((float)(v858 - (float)v975)
                                                            * (float)((float)(v851 + 1) - v857))
                                                    * (float)v743))))
                    * 255.0);
  v695 = (int)(float)((float)((float)((float)((float)((float)((float)((float)v971 - v852)
                                                            * (float)((float)(v847 + 1) - v853))
                                                    * (float)v735)
                                            + (float)((float)((float)(v852 - (float)v972)
                                                            * (float)((float)(v847 + 1) - v853))
                                                    * (float)v736))
                                    + (float)((float)((float)(v853 - (float)v847)
                                                    * (float)((float)v971 - v852))
                                            * (float)v737))
                            + (float)((float)((float)(v852 - (float)v972)
                                            * (float)(v853 - (float)v847))
                                    * (float)v758))
                    * 255.0);
  LODWORD(v670) = (int)(float)((float)((float)((float)((float)((float)((float)((float)v973 - v856)
                                                                     * (float)((float)(v849 + 1) - v855))
                                                             * (float)v738)
                                                     + (float)((float)((float)(v856 - (float)v974)
                                                                     * (float)((float)(v849 + 1) - v855))
                                                             * (float)v739))
                                             + (float)((float)((float)(v855 - (float)v849)
                                                             * (float)((float)v973 - v856))
                                                     * (float)v740))
                                     + (float)((float)((float)(v856 - (float)v974)
                                                     * (float)(v855 - (float)v849))
                                             * (float)v754))
                             * 255.0);
  v1036 = (int)(float)((float)((float)((float)((float)((float)((float)((float)v969 - v850)
                                                             * (float)((float)(v845 + 1) - v848))
                                                     * (float)v732)
                                             + (float)((float)((float)(v850 - (float)v970)
                                                             * (float)((float)(v845 + 1) - v848))
                                                     * (float)v733))
                                     + (float)((float)((float)(v848 - (float)v845)
                                                     * (float)((float)v969 - v850))
                                             * (float)v734))
                             + (float)((float)((float)(v850 - (float)v970) * (float)(v848 - (float)v845))
                                     * (float)v761))
                     * 255.0);
  v1043 = (int)(float)((float)((float)((float)((float)(v831 - (float)v917)
                                             * (float)(v829 - (float)v807))
                                     * (float)v751)
                             + (float)((float)((float)((float)(v829 - (float)v807)
                                                     * (float)((float)(v917 + 1) - v831))
                                             * (float)v727)
                                     + (float)((float)((float)((float)((float)(v917 + 1) - v831)
                                                             * (float)((float)(v807 + 1) - v829))
                                                     * (float)v728)
                                             + (float)((float)((float)(v831 - (float)v917)
                                                             * (float)((float)(v807 + 1) - v829))
                                                     * (float)v729))))
                     * 255.0);
  v1017 = (int)(float)((float)((float)((float)((float)((float)((float)((float)v967 - v846)
                                                             * (float)((float)(v843 + 1) - v844))
                                                     * (float)v730)
                                             + (float)((float)((float)(v846 - (float)v968)
                                                             * (float)((float)(v843 + 1) - v844))
                                                     * (float)v731))
                                     + (float)((float)((float)(v844 - (float)v843)
                                                     * (float)((float)v967 - v846))
                                             * (float)*(unsigned __int8 *)(v802 + v968)))
                             + (float)((float)((float)(v846 - (float)v968)
                                             * (float)(v844 - (float)v843))
                                     * (float)*(unsigned __int8 *)(v802 + v967)))
                     * 255.0);
  v696 = (int)(float)(v943 * 255.0);
  v1038 = (int)(float)((float)((float)((float)((float)((float)((float)((float)v911 - v809)
                                                             * (float)((float)(v789 + 1) - v810))
                                                     * (float)v722)
                                             + (float)((float)((float)(v809 - (float)v912)
                                                             * (float)((float)(v789 + 1) - v810))
                                                     * (float)v723))
                                     + (float)((float)((float)(v810 - (float)v789)
                                                     * (float)((float)v911 - v809))
                                             * (float)*(unsigned __int8 *)(v762 + v912)))
                             + (float)((float)((float)(v809 - (float)v912)
                                             * (float)(v810 - (float)v789))
                                     * (float)*(unsigned __int8 *)(v762 + v911)))
                     * 255.0);
  v697 = (int)(float)((float)((float)((float)((float)((float)((float)((float)v913 - v818)
                                                            * (float)((float)(v794 + 1) - v817))
                                                    * (float)v724)
                                            + (float)((float)((float)(v818 - (float)v914)
                                                            * (float)((float)(v794 + 1) - v817))
                                                    * (float)v725))
                                    + (float)((float)((float)((float)v913 - v818)
                                                    * (float)(v817 - (float)v794))
                                            * (float)*(unsigned __int8 *)(v759 + v914)))
                            + (float)((float)((float)(v818 - (float)v914)
                                            * (float)(v817 - (float)v794))
                                    * (float)*(unsigned __int8 *)(v759 + v913)))
                    * 255.0);
  v1020 = (int)(float)(v947 * 255.0);
  v1015 = (int)(float)(v952 * 255.0);
  v1047 = (int)(float)(v949 * 255.0);
  v698 = (int)(float)(v955 * 255.0);
  v699 = (int)(float)(v961 * 255.0);
  v700 = (int)(float)(v964 * 255.0);
  v701 = (int)(float)(v966 * 255.0);
  v1028 = (int)(float)(v559 * 255.0);
  v1023 = (int)(float)(v586 * 255.0);
  v1025 = (int)(float)(v612 * 255.0);
  v702 = (int)(float)(v639 * 255.0);
  v703 = (int)(float)(v662 * 255.0);
  *(_BYTE *)a1 = (v517 > v501) | (2 * (v515 > v501)) | (4 * (v514 > v501)) | (8 * (v669 > v501)) | (16 * (v513 > v501)) | (32 * (v688 > v501)) | (v1004 << 6) | ((v689 > v501) << 7);
  *(_BYTE *)(a1 + 1) = (v511 > v501) | (2 * (v690 > v501)) | (4 * (v510 > v501)) | (8 * (v671 > v501)) | (16 * v997) | (32 * ((int)(float)((float)((float)((float)((float)(v868 - (float)v988) * (float)(v867 - (float)v990)) * (float)v777) + (float)((float)((float)((float)(v867 - (float)v990) * (float)((float)v989 - v868)) * (float)v778) + (float)((float)((float)((float)((float)v989 - v868) * (float)((float)(v990 + 1) - v867)) * (float)v779) + (float)((float)((float)(v868 - (float)v988) * (float)((float)(v990 + 1) - v867)) * (float)v782)))) * 255.0) > v501)) | (v994 << 6) | ((v508 > v501) << 7);
  *(_BYTE *)(a1 + 2) = (v691 > v501) | (2 * (v693 > v501)) | (4 * (v692 > v501)) | (8 * (v694 > v501)) | (16 * (v670 > v501)) | (32 * (v695 > v501)) | ((v1036 > v501) << 6) | ((v1017 > v501) << 7);
  *(_BYTE *)(a1 + 3) = (v1043 > v501) | (2 * (v696 > v501)) | (4 * (v697 > v501)) | (8 * (v1038 > v501)) | (16 * (v1020 > v501)) | (32 * (v1047 > v501)) | ((v1015 > v501) << 6) | ((v698 > v501) << 7);
  *(_OWORD *)(a1 + 4) = 0u;
  *(_BYTE *)(a1 + 4) |= ((int)(float)(v958 * 255.0) > v501) | (2 * (v699 > v501)) | (4 * (v700 > v501)) | (8 * (v701 > v501)) | (16 * (v1028 > v501)) | (32 * (v1023 > v501)) | ((v1025 > v501) << 6) | ((v702 > v501) << 7);
  *(_BYTE *)(a1 + 5) |= (4 * (v517 < v515)) | (8 * (v517 < v514)) | ((v515 < v514) << 7) | (16
                                                                                          * (v517 < v669)) | (32 * (v517 < v513)) | ((v517 < v688) << 6) | (v703 > v501) | (2 * ((int)v687 > v501));
  *(_BYTE *)(a1 + 6) |= (v515 < v669) | (8 * (v514 < v669)) | (2 * (v515 < v513)) | (16 * (v514 < v513)) | ((v669 < v513) << 6) | (4 * (v515 < v688)) | (32 * (v514 < v688)) | ((v669 < v688) << 7);
  *(_BYTE *)(a1 + 7) |= (v513 < v688) | (2 * (v1032 < v689)) | (4 * (v1032 < v511)) | ((v689 < v511) << 6) | (8 * (v1032 < v690)) | ((v689 < v690) << 7) | (16 * (v1032 < v510)) | (32 * (v1032 < v671));
  *(_BYTE *)(a1 + 8) |= (v689 < v510) | (4 * (v511 < v690)) | (8 * (v511 < v510)) | (32 * (v690 < v510)) | (2 * (v689 < v671)) | (16 * (v511 < v671)) | ((v690 < v671) << 6) | ((v510 < v671) << 7);
  *(_BYTE *)(a1 + 9) |= (v1046 < v1041) | (2 * (v1046 < v987)) | (32 * (v1041 < v987)) | (4 * (v1046 < v508)) | ((v1041 < v508) << 6) | (8 * (v1046 < v691)) | ((v1041 < v691) << 7) | (16 * (v1046 < v693));
  *(_BYTE *)(a1 + 10) |= (2 * (v987 < v508)) | (4 * (v987 < v691)) | (16 * (v508 < v691)) | (v1041 < v693) | (8 * (v987 < v693)) | (32 * (v508 < v693)) | ((v691 < v693) << 6) | ((v692 < v694) << 7);
  *(_BYTE *)(a1 + 11) |= (v692 < v670) | (16 * (v694 < v670)) | (2 * (v692 < v695)) | (32 * (v694 < v695)) | (4 * (v692 < v1036)) | ((v694 < v1036) << 6) | (8 * (v692 < v1017)) | ((v694 < v1017) << 7);
  *(_BYTE *)(a1 + 12) |= (v670 < v695) | (2 * (v670 < v1036)) | (8 * (v695 < v1036)) | (4 * (v670 < v1017)) | (16 * (v695 < v1017)) | (32 * (v1036 < v1017)) | ((v1043 < v696) << 6) | ((v1043 < v697) << 7);
  *(_BYTE *)(a1 + 13) |= (v1043 < v1038) | (8 * (v696 < v697)) | (16 * (v696 < v1038)) | ((v697 < v1038) << 7) | (2 * (v1043 < v1020)) | (32 * (v696 < v1020)) | (4 * (v1043 < v1047)) | ((v696 < v1047) << 6);
  *(_BYTE *)(a1 + 14) |= (v697 < v1020) | (4 * (v1038 < v1020)) | (2 * (v697 < v1047)) | (8 * (v1038 < v1047)) | (16 * (v1020 < v1047)) | (32 * (v1015 < v698)) | ((v1015 < (int)(float)(v958 * 255.0)) << 6) | ((v1015 < v699) << 7);
  *(_BYTE *)(a1 + 15) |= (4 * (v698 < (int)(float)(v958 * 255.0))) | (8 * (v698 < v699)) | (((int)(float)(v958 * 255.0) < v699) << 6) | (v1015 < v700) | (16 * (v698 < v700)) | (((int)(float)(v958 * 255.0) < v700) << 7) | (2 * (v1015 < v701)) | (32 * (v698 < v701));
  *(_BYTE *)(a1 + 16) |= ((int)(float)(v958 * 255.0) < v701) | (2 * (v699 < v700)) | (4 * (v699 < v701)) | (8 * (v700 < v701)) | (16 * (v1028 < v1023)) | (32 * (v1028 < v1025)) | ((v1028 < v702) << 6) | ((v1028 < v703) << 7);
  *(_BYTE *)(a1 + 17) |= (2 * (v1023 < v1025)) | (4 * (v1023 < v702)) | (32 * (v1025 < v702)) | (8 * (v1023 < v703)) | ((v1025 < v703) << 6) | (v1028 < (int)v687) | (16 * (v1023 < (int)v687)) | ((v1025 < (int)v687) << 7);
  *(_BYTE *)(a1 + 18) |= (8 * (v1032 > v517)) | (16 * (v689 > v517)) | (32 * (v511 > v517)) | ((v690 > v517) << 6) | ((v510 > v517) << 7) | (v702 < v703) | (2 * (v702 < (int)v687)) | (4 * (v703 < (int)v687));
  *(_BYTE *)(a1 + 19) |= (2 * (v1032 > v515)) | (4 * (v689 > v515)) | (8 * (v511 > v515)) | ((v1032 > v514) << 7) | (16 * (v690 > v515)) | (32 * (v510 > v515)) | (v671 > v517) | ((v671 > v515) << 6);
  *(_OWORD *)(a1 + 20) = 0u;
  *(_BYTE *)(a1 + 20) |= (v689 > v514) | (2 * (v511 > v514)) | (32 * (v1032 > v669)) | ((v689 > v669) << 6) | ((v511 > v669) << 7) | (4 * (v690 > v514)) | (8 * (v510 > v514)) | (16 * (v671 > v514));
  *(_BYTE *)(a1 + 21) |= (8 * (v1032 > v513)) | (16 * (v689 > v513)) | (32 * (v511 > v513)) | (v690 > v669) | ((v690 > v513) << 6) | (2 * (v510 > v669)) | ((v510 > v513) << 7) | (4 * (v671 > v669));
  *(_BYTE *)(a1 + 22) |= (2 * (v1032 > v688)) | (4 * (v689 > v688)) | (8 * (v511 > v688)) | (16 * (v690 > v688)) | (32 * (v510 > v688)) | (v671 > v513) | ((v671 > v688) << 6) | ((v1046 > v1032) << 7);
  *(_BYTE *)(a1 + 23) |= (v1041 > v1032) | (32 * (v1046 > v689)) | ((v1041 > v689) << 6) | (2 * (v987 > v1032)) | ((v987 > v689) << 7) | (4 * (v508 > v1032)) | (8 * (v691 > v1032)) | (16 * (v693 > v1032));
  *(_BYTE *)(a1 + 24) |= (8 * (v1046 > v511)) | (16 * (v1041 > v511)) | (32 * (v987 > v511)) | (v508 > v689) | ((v508 > v511) << 6) | (2 * (v691 > v689)) | ((v691 > v511) << 7) | (4 * (v693 > v689));
  *(_BYTE *)(a1 + 25) |= (2 * (v1046 > v690)) | (4 * (v1041 > v690)) | ((v1046 > v510) << 7) | (8 * (v987 > v690)) | (16 * (v508 > v690)) | (32 * (v691 > v690)) | (v693 > v511) | ((v693 > v690) << 6);
  *(_BYTE *)(a1 + 26) |= (v1041 > v510) | (32 * (v1046 > v671)) | ((v1041 > v671) << 6) | (2 * (v987 > v510)) | ((v987 > v671) << 7) | (4 * (v508 > v510)) | (8 * (v691 > v510)) | (16 * (v693 > v510));
  *(_BYTE *)(a1 + 27) |= (v508 > v671) | (2 * (v691 > v671)) | (4
                                                                                          * (v693 > v671)) | (8 * (v692 > v1046)) | (16 * (v694 > v1046)) | (32 * (v670 > v1046)) | ((v695 > v1046) << 6) | ((v1036 > v1046) << 7);
  *(_BYTE *)(a1 + 28) |= (2 * (v692 > v1041)) | (4 * (v694 > v1041)) | ((v692 > v987) << 7) | (8
                                                                                             * (v670 > v1041)) | (16 * (v695 > v1041)) | (32 * (v1036 > v1041)) | (v1017 > v1046) | ((v1017 > v1041) << 6);
  *(_BYTE *)(a1 + 29) |= (v694 > v987) | (32 * (v692 > v508)) | ((v694 > v508) << 6) | (2 * (v670 > v987)) | ((v670 > v508) << 7) | (4 * (v695 > v987)) | (8 * (v1036 > v987)) | (16 * (v1017 > v987));
  *(_BYTE *)(a1 + 30) |= (8 * (v692 > v691)) | (16 * (v694 > v691)) | (32 * (v670 > v691)) | (v695 > v508) | ((v695 > v691) << 6) | (2 * (v1036 > v508)) | ((v1036 > v691) << 7) | (4 * (v1017 > v508));
  *(_BYTE *)(a1 + 31) |= (2 * (v692 > v693)) | (4 * (v694 > v693)) | (8 * (v670 > v693)) | (16 * (v695 > v693)) | (32 * (v1036 > v693)) | (v1017 > v691) | ((v1017 > v693) << 6) | ((v1043 > v692) << 7);
  *(_BYTE *)(a1 + 32) |= (v696 > v692) | (32 * (v1043 > v694)) | ((v696 > v694) << 6) | (2 * (v697 > v692)) | ((v697 > v694) << 7) | (4 * (v1038 > v692)) | (8 * (v1020 > v692)) | (16 * (v1047 > v692));
  *(_BYTE *)(a1 + 33) |= (8 * (v1043 > v670)) | (16 * (v696 > v670)) | (32
                                                                                                  * (v697 > v670)) | (v1038 > v694) | ((v1038 > v670) << 6) | (2 * (v1020 > v694)) | ((v1020 > v670) << 7) | (4 * (v1047 > v694));
  *(_BYTE *)(a1 + 34) |= (2 * (v1043 > v695)) | (4 * (v696 > v695)) | ((v1043 > v1036) << 7) | (8 * (v697 > v695)) | (16 * (v1038 > v695)) | (32 * (v1020 > v695)) | (v1047 > v670) | ((v1047 > v695) << 6);
  *(_BYTE *)(a1 + 35) |= (v696 > v1036) | (32 * (v1043 > v1017)) | ((v696 > v1017) << 6) | (2 * (v697 > v1036)) | ((v697 > v1017) << 7) | (4 * (v1038 > v1036)) | (8 * (v1020 > v1036)) | (16 * (v1047 > v1036));
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 36) = 0u;
  *(_BYTE *)(a1 + 36) |= (v1038 > v1017) | (2 * (v1020 > v1017)) | (4 * (v1047 > v1017)) | (8 * (v1015 > v1043)) | (16 * (v698 > v1043)) | (32 * ((int)(float)(v958 * 255.0) > v1043)) | ((v699 > v1043) << 6) | ((v700 > v1043) << 7);
  *(_BYTE *)(a1 + 37) |= (2 * (v1015 > v696)) | (4 * (v698 > v696)) | ((v1015 > v697) << 7) | (8
                                                                                             * ((int)(float)(v958 * 255.0) > v696)) | (16 * (v699 > v696)) | (32 * (v700 > v696)) | (v701 > v1043) | ((v701 > v696) << 6);
  *(_BYTE *)(a1 + 38) |= (v698 > v697) | (32 * (v1015 > v1038)) | ((v698 > v1038) << 6) | (2
                                                                                         * ((int)(float)(v958 * 255.0) > v697)) | (((int)(float)(v958 * 255.0) > v1038) << 7) | (4 * (v699 > v697)) | (8 * (v700 > v697)) | (16 * (v701 > v697));
  *(_BYTE *)(a1 + 39) |= (8 * (v1015 > v1020)) | (16 * (v698 > v1020)) | (32 * ((int)(float)(v958 * 255.0) > v1020)) | (v699 > v1038) | ((v699 > v1020) << 6) | (2 * (v700 > v1038)) | ((v700 > v1020) << 7) | (4 * (v701 > v1038));
  *(_BYTE *)(a1 + 40) |= (2 * (v1015 > v1047)) | (4 * (v698 > v1047)) | (8 * ((int)(float)(v958 * 255.0) > v1047)) | (16 * (v699 > v1047)) | (32 * (v700 > v1047)) | (v701 > v1020) | ((v701 > v1047) << 6) | ((v1028 > v1015) << 7);
  *(_BYTE *)(a1 + 41) |= (v1023 > v1015) | (32 * (v1028 > v698)) | ((v1023 > v698) << 6) | (2 * (v1025 > v1015)) | ((v1025 > v698) << 7) | (4 * (v702 > v1015)) | (8 * (v703 > v1015)) | (16 * ((int)v687 > v1015));
  *(_BYTE *)(a1 + 42) |= (8 * (v1028 > (int)v686)) | (16 * (v1023 > (int)v686)) | (32 * (v1025 > (int)v686)) | (v702 > v698) | ((v702 > (int)v686) << 6) | (2 * (v703 > v698)) | ((v703 > (int)v686) << 7) | (4 * ((int)v687 > v698));
  *(_BYTE *)(a1 + 43) |= (2 * (v1028 > v699)) | (4 * (v1023 > v699)) | ((v1028 > v700) << 7) | (8 * (v1025 > v699)) | (16 * (v702 > v699)) | (32 * (v703 > v699)) | ((int)v687 > (int)(float)(v958 * 255.0)) | (((int)v687 > v699) << 6);
  result = *(unsigned __int8 *)(a1 + 44);
  *(_BYTE *)(a1 + 44) = (v1023 > v700) | (32 * (v1028 > v701)) | ((v1023 > v701) << 6) | (2 * (v1025 > v700)) | ((v1025 > v701) << 7) | (4 * (v702 > v700)) | (8 * (v703 > v700)) | (16 * ((int)v687 > v700)) | result;
  *(_BYTE *)(a1 + 45) |= (8 * (v517 < v1046)) | (16 * (v515 < v1041)) | (32 * (v514 < v987)) | ((v669 < v508) << 6) | ((v513 < v691) << 7) | (v702 > v701) | (2 * (v703 > v701)) | (4 * ((int)v687 > v701));
  *(_BYTE *)(a1 + 46) |= (16 * (v669 < v1046)) | (32 * (v513 < v1041)) | ((v688 < v987) << 6) | (2 * (v517 < v508)) | (4 * (v515 < v691)) | (v688 < v693) | (8 * (v514 < v693)) | ((v517 < v1043) << 7);
  *(_BYTE *)(a1 + 47) |= (v515 < v696) | (2 * (v514 < v697)) | (4 * (v669 < v1038)) | (32 * (v517 < v1038)) | (8 * (v513 < v1020)) | ((v515 < v1020) << 6) | (16 * (v688 < v1047)) | ((v514 < v1047) << 7);
  *(_BYTE *)(a1 + 48) |= (v669 < v1043) | (2 * (v513 < v696)) | (4 * (v688 < v697)) | (8 * (v517 < v1028)) | (16 * (v515 < v1023)) | (32 * (v514 < v1025)) | ((v669 < v702) << 6) | ((v513 < v703) << 7);
  *(_BYTE *)(a1 + 49) |= ((v1032 < v692) << 7) | (16 * (v669 < v1028)) | (32 * (v513 < v1023)) | ((v688 < v1025) << 6) | (2 * (v517 < v702)) | (4 * (v515 < v703)) | (v688 < (int)v687) | (8 * (v514 < (int)v687));
  *(_BYTE *)(a1 + 50) |= (v689 < v694) | (2 * (v511 < v670)) | (4 * (v690 < v695)) | (32 * (v1032 < v695)) | (8 * (v510 < v1036)) | ((v689 < v1036) << 6) | (16 * (v671 < v1017)) | ((v511 < v1017) << 7);
  *(_BYTE *)(a1 + 51) |= (v690 < v692) | (2 * (v510 < v694)) | (4 * (v671 < v670)) | (8 * (v1032 < v1015)) | (16 * (v689 < v698)) | (32 * (v511 < (int)(float)(v958 * 255.0))) | ((v690 < v699) << 6) | ((v510 < v700) << 7);
  *(_BYTE *)(a1 + 52) |= ((v1046 < v1043) << 7) | (16 * (v690 < v1015)) | (32 * (v510 < v698)) | ((v671 < (int)(float)(v958 * 255.0)) << 6) | (2 * (v1032 < v699)) | (4 * (v689 < v700)) | (v671 < v701) | (8 * (v511 < v701));
  *(_BYTE *)(a1 + 53) |= (v1041 < v696) | (2 * (v987 < v697)) | (4 * (v508 < v1038)) | (32 * (v1046 < v1038)) | (8 * (v691 < v1020)) | ((v1041 < v1020) << 6) | (16 * (v693 < v1047)) | ((v987 < v1047) << 7);
  *(_BYTE *)(a1 + 54) |= (v508 < v1043) | (2 * (v691 < v696)) | (4 * (v693 < v697)) | (8 * (v1046 < v1028)) | (16 * (v1041 < v1023)) | (32 * (v987 < v1025)) | ((v508 < v702) << 6) | ((v691 < v703) << 7);
  *(_BYTE *)(a1 + 55) |= ((v692 < v1015) << 7) | (16 * (v508 < v1028)) | (32 * (v691 < v1023)) | ((v693 < v1025) << 6) | (2 * (v1046 < v702)) | (4 * (v1041 < v703)) | (v693 < (int)v687) | (8 * (v987 < (int)v687));
  *(_BYTE *)(a1 + 56) |= (v694 < v698) | (2 * (v670 < (int)(float)(v958 * 255.0))) | (4 * (v695 < v699)) | (32 * (v692 < v699)) | (8 * (v1036 < v700)) | ((v694 < v700) << 6) | (16 * (v1017 < v701)) | ((v670 < v701) << 7);
  *(_BYTE *)(a1 + 57) |= (v695 < v1015) | (2 * (v1036 < v698)) | (4 * (v1017 < (int)(float)(v958 * 255.0))) | (8 * (v1043 < v1028)) | (16 * (v696 < v1023)) | (32 * (v697 < v1025)) | ((v1038 < v702) << 6) | ((v1020 < v703) << 7);
  *(_BYTE *)(a1 + 58) |= (16 * (v1038 < v1028)) | (32 * (v1020 < v1023)) | ((v1047 < v1025) << 6) | (2 * (v1043 < v702)) | (4 * (v696 < v703)) | (v1047 < (int)v687) | (8 * (v697 < (int)v687));
  return result;
}

_DWORD *sub_20FD4D668(_DWORD *a1, _DWORD *a2, uint64_t a3, float a4, float a5, float a6)
{
  int v8;
  uint64_t v9;
  float v10;
  float v11;
  int v12;
  int v13;
  int v14;
  float v15;
  float v16;
  float v17;
  float v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  float v35;
  float v36;
  unsigned int v37;
  float v38;
  float v39;
  unsigned int v40;
  float v41;
  float v42;
  float v43;
  unsigned int v44;
  float v45;
  unsigned int v46;
  float v47;
  int v48;
  int v49;
  float v50;
  float v51;
  float v52;
  float v53;
  unint64_t *v54;
  unint64_t v55;
  float v56;
  float v57;
  float v58;
  float v59;
  float v60;
  float v61;
  float v62;
  float v63;
  float v64;
  float v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  unint64_t v70;
  float v71;
  float v72;
  unsigned int v73;
  unsigned int v74;
  float v75;
  float v76;
  float v77;
  float v78;
  float v79;
  unsigned int v80;
  float v81;
  unsigned int v82;
  float v83;
  unint64_t v84;
  float v85;
  float v86;
  float v87;
  float v88;
  float v89;
  float v90;
  float v91;
  float v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  unint64_t v96;
  unint64_t v97;
  float v98;
  float v99;
  unsigned int v100;
  float v101;
  float v102;
  unsigned int v103;
  float v104;
  float v105;
  float v106;
  unsigned int v107;
  float v108;
  unsigned int v109;
  float v110;
  unint64_t v111;
  float v112;
  float v113;
  float v114;
  float v115;
  float v116;
  float v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  unint64_t v121;
  unint64_t v122;
  float v123;
  float v124;
  unsigned int v125;
  float v126;
  float v127;
  unsigned int v128;
  float v129;
  float v130;
  float v131;
  unsigned int v132;
  float v133;
  unsigned int v134;
  float v135;
  unint64_t v136;
  float v137;
  float v138;
  float v139;
  float v140;
  float v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  unint64_t v145;
  unint64_t v146;
  float v147;
  float v148;
  unsigned int v149;
  unsigned int v150;
  float v151;
  float v152;
  float v153;
  float v154;
  float v155;
  unsigned int v156;
  float v157;
  unsigned int v158;
  float v159;
  unint64_t v160;
  float v161;
  float v162;
  float v163;
  float v164;
  float v165;
  float v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  unint64_t v170;
  unint64_t v171;
  float v172;
  float v173;
  unsigned int v174;
  float v175;
  float v176;
  unsigned int v177;
  float v178;
  float v179;
  float v180;
  unsigned int v181;
  float v182;
  unsigned int v183;
  float v184;
  unint64_t v185;
  unint64_t v186;
  unint64_t v187;
  unint64_t v188;
  float v189;
  float v190;
  float v191;
  float v192;
  float v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  unint64_t v197;
  unint64_t v198;
  float v199;
  float v200;
  unsigned int v201;
  float v202;
  float v203;
  unsigned int v204;
  float v205;
  float v206;
  float v207;
  float v208;
  unsigned int v209;
  unsigned int v210;
  float v211;
  float v212;
  float v213;
  int v214;
  int v215;
  int v216;
  float v217;
  float v218;
  float v219;
  float v220;
  unint64_t *v221;
  unint64_t v222;
  float v223;
  float v224;
  float v225;
  float v226;
  float v227;
  float v228;
  float v229;
  float v230;
  float v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  unint64_t v235;
  unint64_t v236;
  float v237;
  float v238;
  unsigned int v239;
  float v240;
  float v241;
  unsigned int v242;
  float v243;
  float v244;
  float v245;
  unsigned int v246;
  float v247;
  unsigned int v248;
  float v249;
  unint64_t v250;
  float v251;
  float v252;
  float v253;
  float v254;
  float v255;
  float v256;
  float v257;
  float v258;
  float v259;
  float v260;
  float v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  unint64_t v265;
  unint64_t v266;
  float v267;
  float v268;
  float v269;
  float v270;
  float v271;
  unsigned int v272;
  unsigned int v273;
  float v274;
  float v275;
  unsigned int v276;
  float v277;
  unsigned int v278;
  float v279;
  unint64_t v280;
  float v281;
  float v282;
  float v283;
  float v284;
  float v285;
  float v286;
  float v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  unint64_t v291;
  unint64_t v292;
  float v293;
  float v294;
  float v295;
  unsigned int v296;
  float v297;
  unsigned int v298;
  float v299;
  float v300;
  float v301;
  unsigned int v302;
  unsigned int v303;
  float v304;
  unint64_t v305;
  float v306;
  float v307;
  float v308;
  float v309;
  float v310;
  float v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  unint64_t v315;
  unint64_t v316;
  float v317;
  float v318;
  unsigned int v319;
  unsigned int v320;
  float v321;
  float v322;
  float v323;
  float v324;
  float v325;
  unsigned int v326;
  float v327;
  unsigned int v328;
  float v329;
  unint64_t v330;
  float v331;
  float v332;
  float v333;
  float v334;
  float v335;
  float v336;
  uint64_t v337;
  uint64_t v338;
  uint64_t v339;
  unint64_t v340;
  unint64_t v341;
  float v342;
  float v343;
  unsigned int v344;
  float v345;
  float v346;
  unsigned int v347;
  float v348;
  float v349;
  float v350;
  unsigned int v351;
  float v352;
  unsigned int v353;
  float v354;
  unint64_t v355;
  unint64_t v356;
  unint64_t v357;
  unint64_t v358;
  float v359;
  float v360;
  float v361;
  float v362;
  float v363;
  float v364;
  uint64_t v365;
  uint64_t v366;
  uint64_t v367;
  unint64_t v368;
  unint64_t v369;
  float v370;
  float v371;
  float v372;
  unsigned int v373;
  float v374;
  unsigned int v375;
  float v376;
  float v377;
  float v378;
  unsigned int v379;
  unsigned int v380;
  float v381;
  float v382;
  float v383;
  int v384;
  int v385;
  int v386;
  float v387;
  float v388;
  float v389;
  float v390;
  unint64_t *v391;
  unint64_t v392;
  float v393;
  float v394;
  float v395;
  float v396;
  float v397;
  float v398;
  float v399;
  float v400;
  float v401;
  float v402;
  uint64_t v403;
  uint64_t v404;
  uint64_t v405;
  unint64_t v406;
  unint64_t v407;
  float v408;
  float v409;
  unsigned int v410;
  unsigned int v411;
  float v412;
  float v413;
  float v414;
  float v415;
  float v416;
  unsigned int v417;
  float v418;
  unsigned int v419;
  float v420;
  unint64_t v421;
  float v422;
  float v423;
  float v424;
  float v425;
  float v426;
  float v427;
  float v428;
  float v429;
  uint64_t v430;
  uint64_t v431;
  uint64_t v432;
  unint64_t v433;
  unint64_t v434;
  float v435;
  float v436;
  unsigned int v437;
  float v438;
  float v439;
  unsigned int v440;
  float v441;
  float v442;
  float v443;
  unsigned int v444;
  float v445;
  unsigned int v446;
  float v447;
  unint64_t v448;
  float v449;
  float v450;
  float v451;
  float v452;
  float v453;
  float v454;
  uint64_t v455;
  uint64_t v456;
  uint64_t v457;
  unint64_t v458;
  unint64_t v459;
  float v460;
  float v461;
  unsigned int v462;
  float v463;
  float v464;
  unsigned int v465;
  float v466;
  float v467;
  float v468;
  unsigned int v469;
  float v470;
  unsigned int v471;
  float v472;
  unint64_t v473;
  float v474;
  float v475;
  float v476;
  float v477;
  float v478;
  uint64_t v479;
  uint64_t v480;
  uint64_t v481;
  unint64_t v482;
  unint64_t v483;
  float v484;
  float v485;
  unsigned int v486;
  unsigned int v487;
  float v488;
  float v489;
  float v490;
  float v491;
  float v492;
  unsigned int v493;
  float v494;
  unsigned int v495;
  float v496;
  unint64_t v497;
  float v498;
  float v499;
  float v500;
  float v501;
  float v502;
  float v503;
  uint64_t v504;
  uint64_t v505;
  uint64_t v506;
  unint64_t v507;
  unint64_t v508;
  float v509;
  float v510;
  unsigned int v511;
  float v512;
  float v513;
  unsigned int v514;
  float v515;
  float v516;
  float v517;
  unsigned int v518;
  float v519;
  unsigned int v520;
  float v521;
  unint64_t v522;
  unint64_t v523;
  unint64_t v524;
  unint64_t v525;
  float v526;
  float v527;
  float v528;
  float v529;
  float v530;
  uint64_t v531;
  uint64_t v532;
  uint64_t v533;
  unint64_t v534;
  unint64_t v535;
  float v536;
  float v537;
  unsigned int v538;
  float v539;
  float v540;
  unsigned int v541;
  float v542;
  float v543;
  float v544;
  float v545;
  unsigned int v546;
  unsigned int v547;
  float v548;
  float v549;
  float v550;
  int v551;
  int v552;
  int v553;
  float v554;
  float v555;
  float v556;
  float v557;
  unint64_t *v558;
  unint64_t v559;
  float v560;
  float v561;
  float v562;
  float v563;
  float v564;
  float v565;
  float v566;
  float v567;
  float v568;
  uint64_t v569;
  uint64_t v570;
  uint64_t v571;
  unint64_t v572;
  unint64_t v573;
  float v574;
  float v575;
  unsigned int v576;
  float v577;
  float v578;
  unsigned int v579;
  float v580;
  float v581;
  float v582;
  unsigned int v583;
  float v584;
  unsigned int v585;
  float v586;
  unint64_t v587;
  float v588;
  float v589;
  float v590;
  float v591;
  float v592;
  float v593;
  float v594;
  float v595;
  float v596;
  float v597;
  float v598;
  uint64_t v599;
  uint64_t v600;
  uint64_t v601;
  unint64_t v602;
  unint64_t v603;
  float v604;
  float v605;
  float v606;
  float v607;
  float v608;
  unsigned int v609;
  unsigned int v610;
  float v611;
  float v612;
  unsigned int v613;
  float v614;
  unsigned int v615;
  float v616;
  unint64_t v617;
  float v618;
  float v619;
  float v620;
  float v621;
  float v622;
  float v623;
  float v624;
  uint64_t v625;
  uint64_t v626;
  uint64_t v627;
  unint64_t v628;
  unint64_t v629;
  float v630;
  float v631;
  float v632;
  unsigned int v633;
  float v634;
  unsigned int v635;
  float v636;
  float v637;
  float v638;
  unsigned int v639;
  unsigned int v640;
  float v641;
  unint64_t v642;
  float v643;
  float v644;
  float v645;
  float v646;
  float v647;
  float v648;
  uint64_t v649;
  uint64_t v650;
  uint64_t v651;
  unint64_t v652;
  unint64_t v653;
  float v654;
  float v655;
  unsigned int v656;
  unsigned int v657;
  float v658;
  float v659;
  float v660;
  float v661;
  float v662;
  unsigned int v663;
  float v664;
  unsigned int v665;
  float v666;
  unint64_t v667;
  float v668;
  float v669;
  float v670;
  float v671;
  float v672;
  float v673;
  uint64_t v674;
  uint64_t v675;
  uint64_t v676;
  unint64_t v677;
  unint64_t v678;
  float v679;
  float v680;
  unsigned int v681;
  float v682;
  float v683;
  unsigned int v684;
  float v685;
  float v686;
  float v687;
  unsigned int v688;
  float v689;
  unsigned int v690;
  float v691;
  unint64_t v692;
  unint64_t v693;
  unint64_t v694;
  unint64_t v695;
  float v696;
  float v697;
  float v698;
  float v699;
  float v700;
  float v701;
  uint64_t v702;
  uint64_t v703;
  uint64_t v704;
  unint64_t v705;
  unint64_t v706;
  float v707;
  float v708;
  float v709;
  unsigned int v710;
  float v711;
  unsigned int v712;
  float v713;
  float v714;
  float v715;
  unsigned int v716;
  unsigned int v717;
  float v718;
  float v719;
  float v720;
  int v721;
  int v722;
  int v723;
  float v724;
  float v725;
  float v726;
  float v727;
  unint64_t *v728;
  unint64_t v729;
  float v730;
  float v731;
  float v732;
  float v733;
  float v734;
  float v735;
  float v736;
  float v737;
  float v738;
  float v739;
  uint64_t v740;
  uint64_t v741;
  uint64_t v742;
  unint64_t v743;
  unint64_t v744;
  float v745;
  float v746;
  unsigned int v747;
  unsigned int v748;
  float v749;
  float v750;
  float v751;
  float v752;
  float v753;
  unsigned int v754;
  float v755;
  unsigned int v756;
  float v757;
  unint64_t v758;
  float v759;
  float v760;
  float v761;
  float v762;
  float v763;
  float v764;
  float v765;
  float v766;
  uint64_t v767;
  uint64_t v768;
  uint64_t v769;
  unint64_t v770;
  unint64_t v771;
  float v772;
  float v773;
  unsigned int v774;
  float v775;
  float v776;
  unsigned int v777;
  float v778;
  float v779;
  float v780;
  unsigned int v781;
  float v782;
  unsigned int v783;
  float v784;
  unint64_t v785;
  float v786;
  float v787;
  float v788;
  float v789;
  float v790;
  float v791;
  uint64_t v792;
  uint64_t v793;
  uint64_t v794;
  unint64_t v795;
  unint64_t v796;
  float v797;
  float v798;
  unsigned int v799;
  float v800;
  float v801;
  unsigned int v802;
  float v803;
  float v804;
  float v805;
  unsigned int v806;
  float v807;
  unsigned int v808;
  float v809;
  unint64_t v810;
  float v811;
  float v812;
  float v813;
  float v814;
  float v815;
  uint64_t v816;
  uint64_t v817;
  uint64_t v818;
  unint64_t v819;
  unint64_t v820;
  float v821;
  float v822;
  unsigned int v823;
  unsigned int v824;
  float v825;
  float v826;
  float v827;
  float v828;
  float v829;
  unsigned int v830;
  float v831;
  unsigned int v832;
  float v833;
  unint64_t v834;
  float v835;
  float v836;
  float v837;
  float v838;
  float v839;
  float v840;
  uint64_t v841;
  uint64_t v842;
  uint64_t v843;
  unint64_t v844;
  unint64_t v845;
  float v846;
  float v847;
  unsigned int v848;
  float v849;
  float v850;
  unsigned int v851;
  float v852;
  float v853;
  float v854;
  unsigned int v855;
  float v856;
  unsigned int v857;
  float v858;
  unint64_t v859;
  unint64_t v860;
  unint64_t v861;
  unint64_t v862;
  float v863;
  float v864;
  float v865;
  float v866;
  float v867;
  uint64_t v868;
  uint64_t v869;
  uint64_t v870;
  unint64_t v871;
  unint64_t v872;
  float v873;
  float v874;
  unsigned int v875;
  float v876;
  float v877;
  unsigned int v878;
  float v879;
  float v880;
  float v881;
  float v882;
  unsigned int v883;
  unsigned int v884;
  float v885;
  float v886;
  float v887;
  int v888;
  int v889;
  int v890;
  float v891;
  float v892;
  float v893;
  float v894;
  unint64_t *v895;
  unint64_t v896;
  float v897;
  float v898;
  float v899;
  float v900;
  float v901;
  float v902;
  float v903;
  float v904;
  uint64_t v905;
  uint64_t v906;
  uint64_t v907;
  unint64_t v908;
  unint64_t v909;
  float v910;
  float v911;
  unsigned int v912;
  float v913;
  float v914;
  unsigned int v915;
  float v916;
  float v917;
  float v918;
  unsigned int v919;
  float v920;
  unsigned int v921;
  float v922;
  unint64_t v923;
  float v924;
  float v925;
  float v926;
  float v927;
  float v928;
  float v929;
  float v930;
  float v931;
  float v932;
  float v933;
  float v934;
  uint64_t v935;
  uint64_t v936;
  uint64_t v937;
  unint64_t v938;
  unint64_t v939;
  float v940;
  float v941;
  float v942;
  float v943;
  float v944;
  unsigned int v945;
  unsigned int v946;
  float v947;
  float v948;
  unsigned int v949;
  float v950;
  unsigned int v951;
  float v952;
  unint64_t v953;
  float v954;
  float v955;
  float v956;
  float v957;
  float v958;
  float v959;
  float v960;
  uint64_t v961;
  uint64_t v962;
  uint64_t v963;
  unint64_t v964;
  unint64_t v965;
  float v966;
  float v967;
  float v968;
  unsigned int v969;
  float v970;
  unsigned int v971;
  float v972;
  float v973;
  float v974;
  unsigned int v975;
  unsigned int v976;
  float v977;
  unint64_t v978;
  float v979;
  float v980;
  float v981;
  float v982;
  float v983;
  float v984;
  uint64_t v985;
  uint64_t v986;
  uint64_t v987;
  unint64_t v988;
  unint64_t v989;
  float v990;
  float v991;
  unsigned int v992;
  unsigned int v993;
  float v994;
  float v995;
  float v996;
  float v997;
  float v998;
  unsigned int v999;
  float v1000;
  unsigned int v1001;
  float v1002;
  unint64_t v1003;
  float v1004;
  float v1005;
  float v1006;
  float v1007;
  float v1008;
  float v1009;
  uint64_t v1010;
  uint64_t v1011;
  uint64_t v1012;
  unint64_t v1013;
  unint64_t v1014;
  float v1015;
  float v1016;
  unsigned int v1017;
  float v1018;
  float v1019;
  unsigned int v1020;
  float v1021;
  float v1022;
  float v1023;
  unsigned int v1024;
  float v1025;
  unsigned int v1026;
  float v1027;
  unint64_t v1028;
  unint64_t v1029;
  unint64_t v1030;
  unint64_t v1031;
  float v1032;
  float v1033;
  float v1034;
  float v1035;
  float v1036;
  float v1037;
  uint64_t v1038;
  uint64_t v1039;
  uint64_t v1040;
  unint64_t v1041;
  unint64_t v1042;
  float v1043;
  float v1044;
  float v1045;
  unsigned int v1046;
  float v1047;
  unsigned int v1048;
  float v1049;
  float v1050;
  float v1051;
  unsigned int v1052;
  unsigned int v1053;
  float v1054;
  float v1055;
  int v1056;
  int v1057;
  int v1058;
  float v1059;
  float v1060;
  float v1061;
  float v1062;
  unint64_t *v1063;
  unint64_t v1064;
  float v1065;
  float v1066;
  float v1067;
  float v1068;
  float v1069;
  float v1070;
  float v1071;
  float v1072;
  float v1073;
  float v1074;
  float v1075;
  uint64_t v1076;
  uint64_t v1077;
  uint64_t v1078;
  unint64_t v1079;
  unint64_t v1080;
  float v1081;
  float v1082;
  unsigned int v1083;
  unsigned int v1084;
  float v1085;
  float v1086;
  float v1087;
  float v1088;
  float v1089;
  unsigned int v1090;
  float v1091;
  unsigned int v1092;
  float v1093;
  uint64_t v1094;
  unint64_t v1095;
  float v1096;
  float v1097;
  float v1098;
  float v1099;
  float v1100;
  float v1101;
  float v1102;
  float v1103;
  uint64_t v1104;
  uint64_t v1105;
  uint64_t v1106;
  unint64_t v1107;
  unint64_t v1108;
  float v1109;
  float v1110;
  unsigned int v1111;
  float v1112;
  float v1113;
  unsigned int v1114;
  float v1115;
  float v1116;
  float v1117;
  unsigned int v1118;
  float v1119;
  unsigned int v1120;
  float v1121;
  unint64_t v1122;
  float v1123;
  float v1124;
  float v1125;
  float v1126;
  float v1127;
  float v1128;
  uint64_t v1129;
  uint64_t v1130;
  uint64_t v1131;
  unint64_t v1132;
  unint64_t v1133;
  float v1134;
  float v1135;
  unsigned int v1136;
  float v1137;
  float v1138;
  unsigned int v1139;
  float v1140;
  float v1141;
  float v1142;
  unsigned int v1143;
  float v1144;
  unsigned int v1145;
  float v1146;
  unint64_t v1147;
  float v1148;
  float v1149;
  float v1150;
  float v1151;
  float v1152;
  uint64_t v1153;
  uint64_t v1154;
  uint64_t v1155;
  unint64_t v1156;
  unint64_t v1157;
  float v1158;
  float v1159;
  unsigned int v1160;
  unsigned int v1161;
  float v1162;
  float v1163;
  float v1164;
  float v1165;
  float v1166;
  unsigned int v1167;
  float v1168;
  unsigned int v1169;
  float v1170;
  unint64_t v1171;
  float v1172;
  float v1173;
  float v1174;
  float v1175;
  float v1176;
  uint64_t v1177;
  float v1178;
  uint64_t v1179;
  uint64_t v1180;
  unint64_t v1181;
  unint64_t v1182;
  float v1183;
  float v1184;
  unsigned int v1185;
  float v1186;
  float v1187;
  unsigned int v1188;
  float v1189;
  float v1190;
  float v1191;
  float v1192;
  unsigned int v1193;
  float v1194;
  unsigned int v1195;
  float v1196;
  unint64_t v1197;
  unint64_t v1198;
  unint64_t v1199;
  unint64_t v1200;
  float v1201;
  float v1202;
  float v1203;
  float v1204;
  float v1205;
  float v1206;
  uint64_t v1207;
  uint64_t v1208;
  uint64_t v1209;
  unint64_t v1210;
  unint64_t v1211;
  float v1212;
  float v1213;
  unsigned int v1214;
  unsigned int v1215;
  float v1216;
  float v1217;
  float v1218;
  float v1219;
  float v1220;
  unsigned int v1221;
  float v1222;
  unsigned int v1223;
  float v1224;
  _DWORD *result;
  uint64_t v1226;
  uint64_t v1227;
  int32x2_t v1228;
  float32x2_t *v1229;
  float32x2_t *v1230;
  float32x2_t v1231;
  int32x2_t v1232;
  int v1233;
  float v1234;
  float v1235;
  float v1236;
  float v1237;
  _QWORD v1238[128];

  v8 = *(_DWORD *)(a3 + 24);
  v9 = *(_QWORD *)(a3 + 32);
  v11 = *(float *)(a3 + 108);
  v10 = *(float *)(a3 + 112);
  v12 = vcvtms_s32_f32((float)((float)((float)((float)((float)((float)((float)(COERCE_FLOAT(LODWORD(a6) & 0x807FFFFF | 0x3F800000)* -0.33333)+ 2.0)* COERCE_FLOAT(LODWORD(a6) & 0x807FFFFF | 0x3F800000))+ -1.6667)+ (float)((LODWORD(a6) >> 23) - 127))* 0.69315)- v10)* v11);
  if (v12 < 0)
  {
    v13 = 0;
    v14 = 0;
  }
  else if ((int)v9 * v8 <= v12)
  {
    v13 = v8 - 1;
    v14 = v9 - 1;
  }
  else
  {
    v13 = v12 / (int)v9;
    v14 = v12 % (int)v9;
  }
  v15 = a6 + a6;
  v16 = 1.0 / (float)(1 << v13);
  v17 = v16 * a4;
  v18 = v16 * a5;
  v19 = v9 * v13 + v14;
  v20 = *(_QWORD *)(a3 + 56);
  v21 = (unint64_t *)(v20 + 144 * v19);
  v22 = v21[5];
  v23 = 0.0;
  v24 = v17 + 0.0;
  v25 = (float)v21[4] + -1.001;
  if (v25 >= v24)
    v25 = v24;
  if (v24 >= 0.0)
    v26 = v25;
  else
    v26 = 0.0;
  v27 = v18 + 0.0;
  v28 = (float)v21[6] + -1.001;
  if (v28 >= v27)
    v28 = v27;
  if (v27 >= 0.0)
    v29 = v28;
  else
    v29 = 0.0;
  v30 = v26;
  v31 = v29;
  v32 = (v30 + 1);
  v33 = v21[11] + v22 * v31;
  v34 = v33 + v22;
  v35 = (float)v32 - v26;
  v36 = (float)(v31 + 1) - v29;
  *(float *)&v37 = v35 * v36;
  v38 = v26 - (float)v26;
  v39 = v38 * v36;
  *(float *)&v40 = v29 - (float)v29;
  v41 = v35 * *(float *)&v40;
  v42 = v38 * *(float *)&v40;
  LOBYTE(v40) = *(_BYTE *)(v33 + v30);
  v43 = *(float *)&v37 * (float)v40;
  LOBYTE(v37) = *(_BYTE *)(v33 + v32);
  *(float *)&v44 = v39 * (float)v37;
  v45 = v43 + *(float *)&v44;
  LOBYTE(v44) = *(_BYTE *)(v34 + v30);
  *(float *)&v46 = (float)v44;
  v47 = v41 * *(float *)&v46;
  LOBYTE(v46) = *(_BYTE *)(v34 + v32);
  v1238[0] = 0;
  v1238[1] = (unint64_t)(int)(float)((float)((float)(v42 * (float)v46) + (float)(v47 + v45)) * 255.0) << 32;
  if (v12 < 0)
  {
    v49 = 0;
    v48 = 0;
  }
  else if ((int)v9 * v8 <= v12)
  {
    v48 = v8 - 1;
    v49 = v9 - 1;
  }
  else
  {
    v48 = v12 / (int)v9;
    v49 = v12 % (int)v9;
  }
  v50 = (float)(1 << v48);
  v51 = (float)(1.0 / v50) * a4;
  v52 = (float)(1.0 / v50) * a5;
  v53 = v15 / v50;
  v54 = (unint64_t *)(v20 + 144 * (v9 * v48 + v49));
  v55 = v54[5];
  v56 = v53 * 0.5;
  v57 = v51 - (float)(v53 * 0.5);
  v58 = v53 * 0.0;
  v59 = (float)(v53 * 0.0) * 0.70711;
  v60 = (float)v54[4] + -1.001;
  if (v60 >= (float)(v57 + v59))
    v60 = v57 + v59;
  if ((float)(v57 + v59) < 0.0)
    v60 = 0.0;
  v61 = v58 * 0.5;
  v62 = v52 - (float)(v58 * 0.5);
  v63 = (float)(v53 * 0.70711) + v62;
  v64 = (float)v54[6] + -1.001;
  if (v64 >= v63)
    v64 = (float)(v53 * 0.70711) + v62;
  if (v63 >= 0.0)
    v65 = v64;
  else
    v65 = 0.0;
  v66 = v60;
  v67 = v65;
  v68 = (v66 + 1);
  v69 = v54[11] + v55 * v67;
  v70 = v69 + v55;
  v71 = (float)v68 - v60;
  v72 = (float)(v67 + 1) - v65;
  *(float *)&v73 = v71 * v72;
  *(float *)&v74 = v60 - (float)v60;
  v75 = *(float *)&v74 * v72;
  v76 = v65 - (float)v65;
  v77 = v71 * v76;
  v78 = *(float *)&v74 * v76;
  LOBYTE(v74) = *(_BYTE *)(v69 + v66);
  v79 = *(float *)&v73 * (float)v74;
  LOBYTE(v73) = *(_BYTE *)(v69 + v68);
  *(float *)&v80 = v75 * (float)v73;
  v81 = v79 + *(float *)&v80;
  LOBYTE(v80) = *(_BYTE *)(v70 + v66);
  *(float *)&v82 = v77 * (float)v80;
  v83 = *(float *)&v82 + v81;
  LOBYTE(v82) = *(_BYTE *)(v70 + v68);
  v1238[16] = 0x3F3504F3BF000000;
  v1238[17] = LODWORD(v15) | ((unint64_t)(int)(float)((float)((float)(v78 * (float)v82) + v83)
                                                                         * 255.0) << 32);
  v84 = v54[5];
  v85 = v56 + v51;
  v86 = (float)(v56 + v51) + v59;
  v87 = (float)v54[4] + -1.001;
  if (v87 >= v86)
    v87 = v86;
  if (v86 >= 0.0)
    v88 = v87;
  else
    v88 = 0.0;
  v89 = v52 + v61;
  v90 = (float)(v53 * 0.70711) + (float)(v52 + v61);
  v91 = (float)v54[6] + -1.001;
  if (v91 >= v90)
    v91 = v90;
  if (v90 >= 0.0)
    v92 = v91;
  else
    v92 = 0.0;
  v93 = v88;
  v94 = v92;
  v95 = (v93 + 1);
  v96 = v54[11] + v84 * v94;
  v97 = v96 + v84;
  v98 = (float)v95 - v88;
  v99 = (float)(v94 + 1) - v92;
  *(float *)&v100 = v98 * v99;
  v101 = v88 - (float)v88;
  v102 = v101 * v99;
  *(float *)&v103 = v92 - (float)v92;
  v104 = v98 * *(float *)&v103;
  v105 = v101 * *(float *)&v103;
  LOBYTE(v103) = *(_BYTE *)(v96 + v93);
  v106 = *(float *)&v100 * (float)v103;
  LOBYTE(v100) = *(_BYTE *)(v96 + v95);
  *(float *)&v107 = v102 * (float)v100;
  v108 = v106 + *(float *)&v107;
  LOBYTE(v107) = *(_BYTE *)(v97 + v93);
  *(float *)&v109 = v104 * (float)v107;
  v110 = *(float *)&v109 + v108;
  LOBYTE(v109) = *(_BYTE *)(v97 + v95);
  v1238[18] = 0x3F3504F33F000000;
  v1238[19] = LODWORD(v15) | ((unint64_t)(int)(float)((float)((float)(v105 * (float)v109) + v110)
                                                                         * 255.0) << 32);
  v111 = v54[5];
  v112 = (float)(v53 + v51) + (float)(v58 * 0.0);
  v113 = (float)v54[4] + -1.001;
  if (v113 >= v112)
    v113 = (float)(v53 + v51) + (float)(v58 * 0.0);
  if (v112 >= 0.0)
    v114 = v113;
  else
    v114 = 0.0;
  v115 = v58 + (float)(v58 + v52);
  v116 = (float)v54[6] + -1.001;
  if (v116 >= v115)
    v116 = v58 + (float)(v58 + v52);
  if (v115 >= 0.0)
    v117 = v116;
  else
    v117 = 0.0;
  v118 = v114;
  v119 = v117;
  v120 = (v118 + 1);
  v121 = v54[11] + v111 * v119;
  v122 = v121 + v111;
  v123 = (float)v120 - v114;
  v124 = (float)(v119 + 1) - v117;
  *(float *)&v125 = v123 * v124;
  v126 = v114 - (float)v114;
  v127 = v126 * v124;
  *(float *)&v128 = v117 - (float)v117;
  v129 = v123 * *(float *)&v128;
  v130 = v126 * *(float *)&v128;
  LOBYTE(v128) = *(_BYTE *)(v121 + v118);
  v131 = *(float *)&v125 * (float)v128;
  LOBYTE(v125) = *(_BYTE *)(v121 + v120);
  *(float *)&v132 = v127 * (float)v125;
  v133 = v131 + *(float *)&v132;
  LOBYTE(v132) = *(_BYTE *)(v122 + v118);
  *(float *)&v134 = v129 * (float)v132;
  v135 = *(float *)&v134 + v133;
  LOBYTE(v134) = *(_BYTE *)(v122 + v120);
  v1238[20] = 1065353216;
  v1238[21] = LODWORD(v15) | ((unint64_t)(int)(float)((float)((float)(v130 * (float)v134) + v135)
                                                                         * 255.0) << 32);
  v136 = v54[5];
  v137 = v85 + (float)(v58 * -0.70711);
  v138 = (float)v54[4] + -1.001;
  if (v138 >= v137)
    v138 = v137;
  if (v137 < 0.0)
    v138 = 0.0;
  v139 = (float)(v53 * -0.70711) + v89;
  v140 = (float)v54[6] + -1.001;
  if (v140 >= v139)
    v140 = v139;
  if (v139 >= 0.0)
    v141 = v140;
  else
    v141 = 0.0;
  v142 = v138;
  v143 = v141;
  v144 = (v142 + 1);
  v145 = v54[11] + v136 * v143;
  v146 = v145 + v136;
  v147 = (float)v144 - v138;
  v148 = (float)(v143 + 1) - v141;
  *(float *)&v149 = v147 * v148;
  *(float *)&v150 = v138 - (float)v138;
  v151 = *(float *)&v150 * v148;
  v152 = v141 - (float)v141;
  v153 = v147 * v152;
  v154 = *(float *)&v150 * v152;
  LOBYTE(v150) = *(_BYTE *)(v145 + v142);
  v155 = *(float *)&v149 * (float)v150;
  LOBYTE(v149) = *(_BYTE *)(v145 + v144);
  *(float *)&v156 = (float)v149;
  v157 = v151 * *(float *)&v156;
  LOBYTE(v156) = *(_BYTE *)(v146 + v142);
  *(float *)&v158 = v155 + v157;
  v159 = (float)(v153 * (float)v156) + *(float *)&v158;
  LOBYTE(v158) = *(_BYTE *)(v146 + v144);
  v1238[22] = 0xBF3504F33F000000;
  v1238[23] = LODWORD(v15) | ((unint64_t)(int)(float)((float)((float)(v154 * (float)v158) + v159)
                                                                         * 255.0) << 32);
  v160 = v54[5];
  v161 = v57 + (float)(v58 * -0.70711);
  v162 = (float)v54[4] + -1.001;
  if (v162 >= v161)
    v162 = v161;
  if (v161 >= 0.0)
    v163 = v162;
  else
    v163 = 0.0;
  v164 = (float)(v53 * -0.70711) + v62;
  v165 = (float)v54[6] + -1.001;
  if (v165 >= v164)
    v165 = v164;
  if (v164 >= 0.0)
    v166 = v165;
  else
    v166 = 0.0;
  v167 = v163;
  v168 = v166;
  v169 = (v167 + 1);
  v170 = v54[11] + v160 * v168;
  v171 = v170 + v160;
  v172 = (float)v169 - v163;
  v173 = (float)(v168 + 1) - v166;
  *(float *)&v174 = v172 * v173;
  v175 = v163 - (float)v163;
  v176 = v175 * v173;
  *(float *)&v177 = v166 - (float)v166;
  v178 = v172 * *(float *)&v177;
  v179 = v175 * *(float *)&v177;
  LOBYTE(v177) = *(_BYTE *)(v170 + v167);
  v180 = *(float *)&v174 * (float)v177;
  LOBYTE(v174) = *(_BYTE *)(v170 + v169);
  *(float *)&v181 = v176 * (float)v174;
  v182 = v180 + *(float *)&v181;
  LOBYTE(v181) = *(_BYTE *)(v171 + v167);
  *(float *)&v183 = v178 * (float)v181;
  v184 = *(float *)&v183 + v182;
  LOBYTE(v183) = *(_BYTE *)(v171 + v169);
  v1238[24] = 0xBF3504F3BF000000;
  v1238[25] = LODWORD(v15) | ((unint64_t)(int)(float)((float)((float)(v179 * (float)v183) + v184)
                                                                         * 255.0) << 32);
  v185 = v54[11];
  v187 = v54[4];
  v186 = v54[5];
  v188 = v54[6];
  v189 = (float)(v51 - v53) + (float)(v58 * 0.0);
  v190 = (float)v187 + -1.001;
  if (v190 >= v189)
    v190 = v189;
  if (v189 >= 0.0)
    v191 = v190;
  else
    v191 = 0.0;
  v192 = v58 + (float)(v52 - v58);
  v193 = (float)v188 + -1.001;
  if (v193 >= v192)
    v193 = v192;
  v194 = v191;
  if (v192 >= 0.0)
    v23 = v193;
  v195 = v23;
  v196 = (v194 + 1);
  v197 = v185 + v186 * v195;
  v198 = v197 + v186;
  v199 = (float)v196 - v191;
  v200 = (float)(v195 + 1) - v23;
  *(float *)&v201 = v199 * v200;
  v202 = v191 - (float)v191;
  v203 = v202 * v200;
  *(float *)&v204 = (float)v23;
  v205 = v23 - *(float *)&v204;
  v206 = v199 * v205;
  LOBYTE(v204) = *(_BYTE *)(v197 + v194);
  v207 = v202 * v205;
  v208 = *(float *)&v201 * (float)v204;
  LOBYTE(v201) = *(_BYTE *)(v197 + v196);
  *(float *)&v209 = v203 * (float)v201;
  *(float *)&v210 = v208 + *(float *)&v209;
  LOBYTE(v209) = *(_BYTE *)(v198 + v194);
  v211 = (float)(v206 * (float)v209) + *(float *)&v210;
  LOBYTE(v210) = *(_BYTE *)(v198 + v196);
  v1238[26] = 3212836864;
  v1238[27] = LODWORD(v15) | ((unint64_t)(int)(float)((float)((float)(v207 * (float)v210) + v211)
                                                                         * 255.0) << 32);
  v212 = v15 * 1.4142;
  v213 = a6 * 1.4142;
  v214 = vcvtms_s32_f32((float)((float)((float)((float)((float)((float)((float)(COERCE_FLOAT(COERCE_UNSIGNED_INT(a6 * 1.4142) & 0x807FFFFF | 0x3F800000)* -0.33333)+ 2.0)* COERCE_FLOAT(COERCE_UNSIGNED_INT(a6 * 1.4142) & 0x807FFFFF | 0x3F800000))+ -1.6667)+ (float)((COERCE_UNSIGNED_INT(a6 * 1.4142) >> 23) - 127))* 0.69315)- v10)* v11);
  if (v214 < 0)
  {
    v215 = 0;
    v216 = 0;
  }
  else if ((int)v9 * v8 <= v214)
  {
    v215 = v8 - 1;
    v216 = v9 - 1;
  }
  else
  {
    v215 = v214 / (int)v9;
    v216 = v214 % (int)v9;
  }
  v217 = (float)(1 << v215);
  v218 = (float)(1.0 / v217) * a4;
  v219 = (float)(1.0 / v217) * a5;
  v220 = v212 / v217;
  v221 = (unint64_t *)(v20 + 144 * (v9 * v215 + v216));
  v222 = v221[5];
  v223 = 0.0;
  v224 = v220 * 0.0;
  v225 = (float)(v220 * 0.0) + v218;
  v226 = v225 - (float)(v220 * 0.0);
  v227 = (float)v221[4] + -1.001;
  if (v227 >= v226)
    v227 = v225 - (float)(v220 * 0.0);
  if (v226 >= 0.0)
    v228 = v227;
  else
    v228 = 0.0;
  v229 = v219 + (float)(v224 * 0.0);
  v230 = (float)v221[6] + -1.001;
  if (v230 >= (float)(v229 - v220))
    v230 = v229 - v220;
  if ((float)(v229 - v220) >= 0.0)
    v231 = v230;
  else
    v231 = 0.0;
  v232 = v228;
  v233 = v231;
  v234 = (v232 + 1);
  v235 = v221[11] + v222 * v233;
  v236 = v235 + v222;
  v237 = (float)v234 - v228;
  v238 = (float)(v233 + 1) - v231;
  *(float *)&v239 = v237 * v238;
  v240 = v228 - (float)v228;
  v241 = v240 * v238;
  *(float *)&v242 = v231 - (float)v231;
  v243 = v237 * *(float *)&v242;
  v244 = v240 * *(float *)&v242;
  LOBYTE(v242) = *(_BYTE *)(v235 + v232);
  v245 = *(float *)&v239 * (float)v242;
  LOBYTE(v239) = *(_BYTE *)(v235 + v234);
  *(float *)&v246 = v241 * (float)v239;
  v247 = v245 + *(float *)&v246;
  LOBYTE(v246) = *(_BYTE *)(v236 + v232);
  *(float *)&v248 = v243 * (float)v246;
  v249 = *(float *)&v248 + v247;
  LOBYTE(v248) = *(_BYTE *)(v236 + v234);
  v1238[32] = 0xBF80000000000000;
  v1238[33] = LODWORD(v212) | ((unint64_t)(int)(float)((float)((float)(v244 * (float)v248) + v249)
                                                                          * 255.0) << 32);
  v250 = v221[5];
  v251 = v220 * 0.70711;
  v252 = (float)(v220 * 0.70711) + v218;
  v253 = v224 * 0.5;
  v254 = v252 + (float)(v224 * 0.5);
  v255 = (float)v221[4] + -1.001;
  if (v255 >= v254)
    v255 = v252 + (float)(v224 * 0.5);
  if (v254 >= 0.0)
    v256 = v255;
  else
    v256 = 0.0;
  v257 = v224 * 0.70711;
  v258 = v220 * 0.5;
  v259 = (float)(v220 * 0.5) + (float)(v219 + (float)(v224 * 0.70711));
  v260 = (float)v221[6] + -1.001;
  if (v260 >= v259)
    v260 = v258 + (float)(v219 + v257);
  if (v259 >= 0.0)
    v261 = v260;
  else
    v261 = 0.0;
  v262 = v256;
  v263 = v261;
  v264 = (v262 + 1);
  v265 = v221[11] + v250 * v263;
  v266 = v265 + v250;
  v267 = (float)v264 - v256;
  v268 = (float)(v263 + 1) - v261;
  v269 = v267 * v268;
  v270 = v256 - (float)v256;
  v271 = v270 * v268;
  *(float *)&v272 = (float)v261;
  *(float *)&v273 = v261 - *(float *)&v272;
  v274 = v267 * *(float *)&v273;
  v275 = v270 * *(float *)&v273;
  LOBYTE(v273) = *(_BYTE *)(v265 + v262);
  LOBYTE(v272) = *(_BYTE *)(v265 + v264);
  *(float *)&v276 = v271 * (float)v272;
  v277 = (float)(v269 * (float)v273) + *(float *)&v276;
  LOBYTE(v276) = *(_BYTE *)(v266 + v262);
  *(float *)&v278 = v274 * (float)v276;
  v279 = *(float *)&v278 + v277;
  LOBYTE(v278) = *(_BYTE *)(v266 + v264);
  v1238[34] = 0x3F0000003F3504F3;
  v1238[35] = LODWORD(v212) | ((unint64_t)(int)(float)((float)((float)(v275 * (float)v278) + v279)
                                                                          * 255.0) << 32);
  v280 = v221[5];
  v281 = v224 * -0.5;
  v282 = v252 + (float)(v224 * -0.5);
  v283 = (float)v221[4] + -1.001;
  if (v283 >= v282)
    v283 = v282;
  if (v282 < 0.0)
    v283 = 0.0;
  v284 = v220 * -0.5;
  v285 = (float)(v220 * -0.5) + (float)(v219 + v257);
  v286 = (float)v221[6] + -1.001;
  if (v286 >= v285)
    v286 = (float)(v220 * -0.5) + (float)(v219 + v257);
  if (v285 >= 0.0)
    v287 = v286;
  else
    v287 = 0.0;
  v288 = v283;
  v289 = v287;
  v290 = (v288 + 1);
  v291 = v221[11] + v280 * v289;
  v292 = v291 + v280;
  v293 = (float)v290 - v283;
  v294 = (float)(v289 + 1) - v287;
  v295 = v293 * v294;
  *(float *)&v296 = v283 - (float)v283;
  v297 = *(float *)&v296 * v294;
  *(float *)&v298 = (float)v287;
  v299 = v287 - *(float *)&v298;
  v300 = v293 * v299;
  v301 = *(float *)&v296 * v299;
  LOBYTE(v296) = *(_BYTE *)(v291 + v288);
  LOBYTE(v298) = *(_BYTE *)(v291 + v290);
  *(float *)&v302 = v297 * (float)v298;
  *(float *)&v303 = (float)(v295 * (float)v296) + *(float *)&v302;
  LOBYTE(v302) = *(_BYTE *)(v292 + v288);
  v304 = (float)(v300 * (float)v302) + *(float *)&v303;
  LOBYTE(v303) = *(_BYTE *)(v292 + v290);
  v1238[36] = 0xBF0000003F3504F3;
  v1238[37] = LODWORD(v212) | ((unint64_t)(int)(float)((float)((float)(v301 * (float)v303) + v304)
                                                                          * 255.0) << 32);
  v305 = v221[5];
  v306 = v224 + v225;
  v307 = (float)v221[4] + -1.001;
  if (v307 >= v306)
    v307 = v306;
  if (v306 >= 0.0)
    v308 = v307;
  else
    v308 = 0.0;
  v309 = v220 + v229;
  v310 = (float)v221[6] + -1.001;
  if (v310 >= v309)
    v310 = v309;
  if (v309 >= 0.0)
    v311 = v310;
  else
    v311 = 0.0;
  v312 = v308;
  v313 = v311;
  v314 = (v312 + 1);
  v315 = v221[11] + v305 * v313;
  v316 = v315 + v305;
  v317 = (float)v314 - v308;
  v318 = (float)(v313 + 1) - v311;
  *(float *)&v319 = v317 * v318;
  *(float *)&v320 = v308 - (float)v308;
  v321 = *(float *)&v320 * v318;
  v322 = v311 - (float)v311;
  v323 = v317 * v322;
  v324 = *(float *)&v320 * v322;
  LOBYTE(v320) = *(_BYTE *)(v315 + v312);
  v325 = *(float *)&v319 * (float)v320;
  LOBYTE(v319) = *(_BYTE *)(v315 + v314);
  *(float *)&v326 = v321 * (float)v319;
  v327 = v325 + *(float *)&v326;
  LOBYTE(v326) = *(_BYTE *)(v316 + v312);
  *(float *)&v328 = v323 * (float)v326;
  v329 = *(float *)&v328 + v327;
  LOBYTE(v328) = *(_BYTE *)(v316 + v314);
  v1238[38] = 0x3F80000000000000;
  v1238[39] = LODWORD(v212) | ((unint64_t)(int)(float)((float)((float)(v324 * (float)v328) + v329)
                                                                          * 255.0) << 32);
  v330 = v221[5];
  v331 = v218 - v251;
  v332 = (float)v221[4] + -1.001;
  if (v332 >= (float)(v331 + v281))
    v332 = v331 + v281;
  if ((float)(v331 + v281) >= 0.0)
    v333 = v332;
  else
    v333 = 0.0;
  v334 = v219 - v257;
  v335 = (float)v221[6] + -1.001;
  if (v335 >= (float)(v284 + v334))
    v335 = v284 + v334;
  if ((float)(v284 + v334) >= 0.0)
    v336 = v335;
  else
    v336 = 0.0;
  v337 = v333;
  v338 = v336;
  v339 = (v337 + 1);
  v340 = v221[11] + v330 * v338;
  v341 = v340 + v330;
  v342 = (float)v339 - v333;
  v343 = (float)(v338 + 1) - v336;
  *(float *)&v344 = v342 * v343;
  v345 = v333 - (float)v333;
  v346 = v345 * v343;
  *(float *)&v347 = v336 - (float)v336;
  v348 = v342 * *(float *)&v347;
  v349 = v345 * *(float *)&v347;
  LOBYTE(v347) = *(_BYTE *)(v340 + v337);
  v350 = *(float *)&v344 * (float)v347;
  LOBYTE(v344) = *(_BYTE *)(v340 + v339);
  *(float *)&v351 = v346 * (float)v344;
  v352 = v350 + *(float *)&v351;
  LOBYTE(v351) = *(_BYTE *)(v341 + v337);
  *(float *)&v353 = v348 * (float)v351;
  v354 = *(float *)&v353 + v352;
  LOBYTE(v353) = *(_BYTE *)(v341 + v339);
  v1238[40] = 0xBF000000BF3504F3;
  v1238[41] = LODWORD(v212) | ((unint64_t)(int)(float)((float)((float)(v349 * (float)v353) + v354)
                                                                          * 255.0) << 32);
  v355 = v221[11];
  v357 = v221[4];
  v356 = v221[5];
  v358 = v221[6];
  v359 = v331 + v253;
  v360 = (float)v357 + -1.001;
  if (v360 >= v359)
    v360 = v359;
  if (v359 >= 0.0)
    v361 = v360;
  else
    v361 = 0.0;
  v362 = v258 + v334;
  v363 = (float)v358 + -1.001;
  if (v363 >= v362)
    v363 = v362;
  if (v362 >= 0.0)
    v364 = v363;
  else
    v364 = 0.0;
  v365 = v361;
  v366 = v364;
  v367 = (v365 + 1);
  v368 = v355 + v356 * v366;
  v369 = v368 + v356;
  v370 = (float)v367 - v361;
  v371 = (float)(v366 + 1) - v364;
  v372 = v370 * v371;
  *(float *)&v373 = v361 - (float)v361;
  v374 = *(float *)&v373 * v371;
  *(float *)&v375 = (float)v364;
  v376 = v364 - *(float *)&v375;
  v377 = v370 * v376;
  v378 = *(float *)&v373 * v376;
  LOBYTE(v373) = *(_BYTE *)(v368 + v365);
  LOBYTE(v375) = *(_BYTE *)(v368 + v367);
  *(float *)&v379 = v372 * (float)v373;
  *(float *)&v380 = *(float *)&v379 + (float)(v374 * (float)v375);
  LOBYTE(v379) = *(_BYTE *)(v369 + v365);
  v381 = (float)(v377 * (float)v379) + *(float *)&v380;
  LOBYTE(v380) = *(_BYTE *)(v369 + v367);
  v1238[42] = 0x3F000000BF3504F3;
  v1238[43] = LODWORD(v212) | ((unint64_t)(int)(float)((float)((float)(v378 * (float)v380) + v381)
                                                                          * 255.0) << 32);
  v382 = v212 * 1.4142;
  v383 = v213 * 1.4142;
  v384 = vcvtms_s32_f32((float)((float)((float)((float)((float)((float)((float)(COERCE_FLOAT(LODWORD(v383) & 0x807FFFFF | 0x3F800000)* -0.33333)+ 2.0)* COERCE_FLOAT(LODWORD(v383) & 0x807FFFFF | 0x3F800000))+ -1.6667)+ (float)((LODWORD(v383) >> 23) - 127))* 0.69315)- v10)* v11);
  if (v384 < 0)
  {
    v385 = 0;
    v386 = 0;
  }
  else if ((int)v9 * v8 <= v384)
  {
    v385 = v8 - 1;
    v386 = v9 - 1;
  }
  else
  {
    v385 = v384 / (int)v9;
    v386 = v384 % (int)v9;
  }
  v387 = (float)(1 << v385);
  v388 = (float)(1.0 / v387) * a4;
  v389 = (float)(1.0 / v387) * a5;
  v390 = v382 / v387;
  v391 = (unint64_t *)(v20 + 144 * (v9 * v385 + v386));
  v392 = v391[5];
  v393 = (float)(v382 / v387) * 0.5;
  v394 = v388 - v393;
  v395 = (float)(v382 / v387) * 0.0;
  v396 = v395 * 0.70711;
  v397 = (float)v391[4] + -1.001;
  if (v397 >= (float)((float)(v388 - v393) + (float)(v395 * 0.70711)))
    v397 = v394 + v396;
  if ((float)(v394 + v396) < 0.0)
    v397 = 0.0;
  v398 = v395 * 0.5;
  v399 = v389 - (float)(v395 * 0.5);
  v400 = (float)(v390 * 0.70711) + v399;
  v401 = (float)v391[6] + -1.001;
  if (v401 >= v400)
    v401 = (float)(v390 * 0.70711) + v399;
  if (v400 >= 0.0)
    v402 = v401;
  else
    v402 = 0.0;
  v403 = v397;
  v404 = v402;
  v405 = (v403 + 1);
  v406 = v391[11] + v392 * v404;
  v407 = v406 + v392;
  v408 = (float)v405 - v397;
  v409 = (float)(v404 + 1) - v402;
  *(float *)&v410 = v408 * v409;
  *(float *)&v411 = v397 - (float)v397;
  v412 = *(float *)&v411 * v409;
  v413 = v402 - (float)v402;
  v414 = v408 * v413;
  v415 = *(float *)&v411 * v413;
  LOBYTE(v411) = *(_BYTE *)(v406 + v403);
  v416 = *(float *)&v410 * (float)v411;
  LOBYTE(v410) = *(_BYTE *)(v406 + v405);
  *(float *)&v417 = v412 * (float)v410;
  v418 = v416 + *(float *)&v417;
  LOBYTE(v417) = *(_BYTE *)(v407 + v403);
  *(float *)&v419 = v414 * (float)v417;
  v420 = *(float *)&v419 + v418;
  LOBYTE(v419) = *(_BYTE *)(v407 + v405);
  v1238[48] = 0x3F3504F3BF000000;
  v1238[49] = LODWORD(v382) | ((unint64_t)(int)(float)((float)((float)(v415 * (float)v419) + v420)
                                                                          * 255.0) << 32);
  v421 = v391[5];
  v422 = v393 + v388;
  v423 = (float)(v393 + v388) + v396;
  v424 = (float)v391[4] + -1.001;
  if (v424 >= v423)
    v424 = v423;
  if (v423 >= 0.0)
    v425 = v424;
  else
    v425 = 0.0;
  v426 = v389 + v398;
  v427 = (float)(v390 * 0.70711) + (float)(v389 + v398);
  v428 = (float)v391[6] + -1.001;
  if (v428 >= v427)
    v428 = v427;
  if (v427 >= 0.0)
    v429 = v428;
  else
    v429 = 0.0;
  v430 = v425;
  v431 = v429;
  v432 = (v430 + 1);
  v433 = v391[11] + v421 * v431;
  v434 = v433 + v421;
  v435 = (float)v432 - v425;
  v436 = (float)(v431 + 1) - v429;
  *(float *)&v437 = v435 * v436;
  v438 = v425 - (float)v425;
  v439 = v438 * v436;
  *(float *)&v440 = v429 - (float)v429;
  v441 = v435 * *(float *)&v440;
  v442 = v438 * *(float *)&v440;
  LOBYTE(v440) = *(_BYTE *)(v433 + v430);
  v443 = *(float *)&v437 * (float)v440;
  LOBYTE(v437) = *(_BYTE *)(v433 + v432);
  *(float *)&v444 = v439 * (float)v437;
  v445 = v443 + *(float *)&v444;
  LOBYTE(v444) = *(_BYTE *)(v434 + v430);
  *(float *)&v446 = v441 * (float)v444;
  v447 = *(float *)&v446 + v445;
  LOBYTE(v446) = *(_BYTE *)(v434 + v432);
  v1238[50] = 0x3F3504F33F000000;
  v1238[51] = LODWORD(v382) | ((unint64_t)(int)(float)((float)((float)(v442 * (float)v446) + v447)
                                                                          * 255.0) << 32);
  v448 = v391[5];
  v449 = (float)(v390 + v388) + (float)(v395 * 0.0);
  v450 = (float)v391[4] + -1.001;
  if (v450 >= v449)
    v450 = (float)(v390 + v388) + (float)(v395 * 0.0);
  if (v449 >= 0.0)
    v451 = v450;
  else
    v451 = 0.0;
  v452 = v395 + (float)(v395 + v389);
  v453 = (float)v391[6] + -1.001;
  if (v453 >= v452)
    v453 = v395 + (float)(v395 + v389);
  if (v452 >= 0.0)
    v454 = v453;
  else
    v454 = 0.0;
  v455 = v451;
  v456 = v454;
  v457 = (v455 + 1);
  v458 = v391[11] + v448 * v456;
  v459 = v458 + v448;
  v460 = (float)v457 - v451;
  v461 = (float)(v456 + 1) - v454;
  *(float *)&v462 = v460 * v461;
  v463 = v451 - (float)v451;
  v464 = v463 * v461;
  *(float *)&v465 = v454 - (float)v454;
  v466 = v460 * *(float *)&v465;
  v467 = v463 * *(float *)&v465;
  LOBYTE(v465) = *(_BYTE *)(v458 + v455);
  v468 = *(float *)&v462 * (float)v465;
  LOBYTE(v462) = *(_BYTE *)(v458 + v457);
  *(float *)&v469 = v464 * (float)v462;
  v470 = v468 + *(float *)&v469;
  LOBYTE(v469) = *(_BYTE *)(v459 + v455);
  *(float *)&v471 = v466 * (float)v469;
  v472 = *(float *)&v471 + v470;
  LOBYTE(v471) = *(_BYTE *)(v459 + v457);
  v1238[52] = 1065353216;
  v1238[53] = LODWORD(v382) | ((unint64_t)(int)(float)((float)((float)(v467 * (float)v471) + v472)
                                                                          * 255.0) << 32);
  v473 = v391[5];
  v474 = v422 + (float)(v395 * -0.70711);
  v475 = (float)v391[4] + -1.001;
  if (v475 >= v474)
    v475 = v474;
  if (v474 < 0.0)
    v475 = 0.0;
  v476 = (float)(v390 * -0.70711) + v426;
  v477 = (float)v391[6] + -1.001;
  if (v477 >= v476)
    v477 = v476;
  if (v476 >= 0.0)
    v478 = v477;
  else
    v478 = 0.0;
  v479 = v475;
  v480 = v478;
  v481 = (v479 + 1);
  v482 = v391[11] + v473 * v480;
  v483 = v482 + v473;
  v484 = (float)v481 - v475;
  v485 = (float)(v480 + 1) - v478;
  *(float *)&v486 = v484 * v485;
  *(float *)&v487 = v475 - (float)v475;
  v488 = *(float *)&v487 * v485;
  v489 = v478 - (float)v478;
  v490 = v484 * v489;
  v491 = *(float *)&v487 * v489;
  LOBYTE(v487) = *(_BYTE *)(v482 + v479);
  v492 = *(float *)&v486 * (float)v487;
  LOBYTE(v486) = *(_BYTE *)(v482 + v481);
  *(float *)&v493 = (float)v486;
  v494 = v488 * *(float *)&v493;
  LOBYTE(v493) = *(_BYTE *)(v483 + v479);
  *(float *)&v495 = v492 + v494;
  v496 = (float)(v490 * (float)v493) + *(float *)&v495;
  LOBYTE(v495) = *(_BYTE *)(v483 + v481);
  v1238[54] = 0xBF3504F33F000000;
  v1238[55] = LODWORD(v382) | ((unint64_t)(int)(float)((float)((float)(v491 * (float)v495) + v496)
                                                                          * 255.0) << 32);
  v497 = v391[5];
  v498 = v394 + (float)(v395 * -0.70711);
  v499 = (float)v391[4] + -1.001;
  if (v499 >= v498)
    v499 = v498;
  if (v498 >= 0.0)
    v500 = v499;
  else
    v500 = 0.0;
  v501 = (float)(v390 * -0.70711) + v399;
  v502 = (float)v391[6] + -1.001;
  if (v502 >= v501)
    v502 = v501;
  if (v501 >= 0.0)
    v503 = v502;
  else
    v503 = 0.0;
  v504 = v500;
  v505 = v503;
  v506 = (v504 + 1);
  v507 = v391[11] + v497 * v505;
  v508 = v507 + v497;
  v509 = (float)v506 - v500;
  v510 = (float)(v505 + 1) - v503;
  *(float *)&v511 = v509 * v510;
  v512 = v500 - (float)v500;
  v513 = v512 * v510;
  *(float *)&v514 = v503 - (float)v503;
  v515 = v509 * *(float *)&v514;
  v516 = v512 * *(float *)&v514;
  LOBYTE(v514) = *(_BYTE *)(v507 + v504);
  v517 = *(float *)&v511 * (float)v514;
  LOBYTE(v511) = *(_BYTE *)(v507 + v506);
  *(float *)&v518 = v513 * (float)v511;
  v519 = v517 + *(float *)&v518;
  LOBYTE(v518) = *(_BYTE *)(v508 + v504);
  *(float *)&v520 = v515 * (float)v518;
  v521 = *(float *)&v520 + v519;
  LOBYTE(v520) = *(_BYTE *)(v508 + v506);
  v1238[56] = 0xBF3504F3BF000000;
  v1238[57] = LODWORD(v382) | ((unint64_t)(int)(float)((float)((float)(v516 * (float)v520) + v521)
                                                                          * 255.0) << 32);
  v522 = v391[11];
  v524 = v391[4];
  v523 = v391[5];
  v525 = v391[6];
  v526 = (float)(v388 - v390) + (float)(v395 * 0.0);
  v527 = (float)v524 + -1.001;
  if (v527 >= v526)
    v527 = v526;
  if (v526 >= 0.0)
    v528 = v527;
  else
    v528 = 0.0;
  v529 = v395 + (float)(v389 - v395);
  v530 = (float)v525 + -1.001;
  if (v530 >= v529)
    v530 = v529;
  v531 = v528;
  if (v529 >= 0.0)
    v223 = v530;
  v532 = v223;
  v533 = (v531 + 1);
  v534 = v522 + v523 * v532;
  v535 = v534 + v523;
  v536 = (float)v533 - v528;
  v537 = (float)(v532 + 1) - v223;
  *(float *)&v538 = v536 * v537;
  v539 = v528 - (float)v528;
  v540 = v539 * v537;
  *(float *)&v541 = (float)v223;
  v542 = v223 - *(float *)&v541;
  v543 = v536 * v542;
  LOBYTE(v541) = *(_BYTE *)(v534 + v531);
  v544 = v539 * v542;
  v545 = *(float *)&v538 * (float)v541;
  LOBYTE(v538) = *(_BYTE *)(v534 + v533);
  *(float *)&v546 = v540 * (float)v538;
  *(float *)&v547 = v545 + *(float *)&v546;
  LOBYTE(v546) = *(_BYTE *)(v535 + v531);
  v548 = (float)(v543 * (float)v546) + *(float *)&v547;
  LOBYTE(v547) = *(_BYTE *)(v535 + v533);
  v1238[58] = 3212836864;
  v1238[59] = LODWORD(v382) | ((unint64_t)(int)(float)((float)((float)(v544 * (float)v547) + v548)
                                                                          * 255.0) << 32);
  v549 = v382 * 1.4142;
  v550 = v383 * 1.4142;
  v551 = vcvtms_s32_f32((float)((float)((float)((float)((float)((float)((float)(COERCE_FLOAT(LODWORD(v550) & 0x807FFFFF | 0x3F800000)* -0.33333)+ 2.0)* COERCE_FLOAT(LODWORD(v550) & 0x807FFFFF | 0x3F800000))+ -1.6667)+ (float)((LODWORD(v550) >> 23) - 127))* 0.69315)- v10)* v11);
  if (v551 < 0)
  {
    v552 = 0;
    v553 = 0;
  }
  else if ((int)v9 * v8 <= v551)
  {
    v552 = v8 - 1;
    v553 = v9 - 1;
  }
  else
  {
    v552 = v551 / (int)v9;
    v553 = v551 % (int)v9;
  }
  v554 = (float)(1 << v552);
  v555 = (float)(1.0 / v554) * a4;
  v556 = (float)(1.0 / v554) * a5;
  v557 = v549 / v554;
  v558 = (unint64_t *)(v20 + 144 * (v9 * v552 + v553));
  v559 = v558[5];
  v560 = 0.0;
  v561 = v557 * 0.0;
  v562 = (float)(v557 * 0.0) + v555;
  v563 = v562 - (float)(v557 * 0.0);
  v564 = (float)v558[4] + -1.001;
  if (v564 >= v563)
    v564 = v562 - (float)(v557 * 0.0);
  if (v563 >= 0.0)
    v565 = v564;
  else
    v565 = 0.0;
  v566 = v556 + (float)(v561 * 0.0);
  v567 = (float)v558[6] + -1.001;
  if (v567 >= (float)(v566 - v557))
    v567 = v566 - v557;
  if ((float)(v566 - v557) >= 0.0)
    v568 = v567;
  else
    v568 = 0.0;
  v569 = v565;
  v570 = v568;
  v571 = (v569 + 1);
  v572 = v558[11] + v559 * v570;
  v573 = v572 + v559;
  v574 = (float)v571 - v565;
  v575 = (float)(v570 + 1) - v568;
  *(float *)&v576 = v574 * v575;
  v577 = v565 - (float)v565;
  v578 = v577 * v575;
  *(float *)&v579 = v568 - (float)v568;
  v580 = v574 * *(float *)&v579;
  v581 = v577 * *(float *)&v579;
  LOBYTE(v579) = *(_BYTE *)(v572 + v569);
  v582 = *(float *)&v576 * (float)v579;
  LOBYTE(v576) = *(_BYTE *)(v572 + v571);
  *(float *)&v583 = v578 * (float)v576;
  v584 = v582 + *(float *)&v583;
  LOBYTE(v583) = *(_BYTE *)(v573 + v569);
  *(float *)&v585 = v580 * (float)v583;
  v586 = *(float *)&v585 + v584;
  LOBYTE(v585) = *(_BYTE *)(v573 + v571);
  v1238[64] = 0xBF80000000000000;
  v1238[65] = LODWORD(v549) | ((unint64_t)(int)(float)((float)((float)(v581 * (float)v585) + v586)
                                                                          * 255.0) << 32);
  v587 = v558[5];
  v588 = v557 * 0.70711;
  v589 = (float)(v557 * 0.70711) + v555;
  v590 = v561 * 0.5;
  v591 = v589 + (float)(v561 * 0.5);
  v592 = (float)v558[4] + -1.001;
  if (v592 >= v591)
    v592 = v589 + (float)(v561 * 0.5);
  if (v591 >= 0.0)
    v593 = v592;
  else
    v593 = 0.0;
  v594 = v561 * 0.70711;
  v595 = v557 * 0.5;
  v596 = (float)(v557 * 0.5) + (float)(v556 + (float)(v561 * 0.70711));
  v597 = (float)v558[6] + -1.001;
  if (v597 >= v596)
    v597 = v595 + (float)(v556 + v594);
  if (v596 >= 0.0)
    v598 = v597;
  else
    v598 = 0.0;
  v599 = v593;
  v600 = v598;
  v601 = (v599 + 1);
  v602 = v558[11] + v587 * v600;
  v603 = v602 + v587;
  v604 = (float)v601 - v593;
  v605 = (float)(v600 + 1) - v598;
  v606 = v604 * v605;
  v607 = v593 - (float)v593;
  v608 = v607 * v605;
  *(float *)&v609 = (float)v598;
  *(float *)&v610 = v598 - *(float *)&v609;
  v611 = v604 * *(float *)&v610;
  v612 = v607 * *(float *)&v610;
  LOBYTE(v610) = *(_BYTE *)(v602 + v599);
  LOBYTE(v609) = *(_BYTE *)(v602 + v601);
  *(float *)&v613 = v608 * (float)v609;
  v614 = (float)(v606 * (float)v610) + *(float *)&v613;
  LOBYTE(v613) = *(_BYTE *)(v603 + v599);
  *(float *)&v615 = v611 * (float)v613;
  v616 = *(float *)&v615 + v614;
  LOBYTE(v615) = *(_BYTE *)(v603 + v601);
  v1238[66] = 0x3F0000003F3504F3;
  v1238[67] = LODWORD(v549) | ((unint64_t)(int)(float)((float)((float)(v612 * (float)v615) + v616)
                                                                          * 255.0) << 32);
  v617 = v558[5];
  v618 = v561 * -0.5;
  v619 = v589 + (float)(v561 * -0.5);
  v620 = (float)v558[4] + -1.001;
  if (v620 >= v619)
    v620 = v619;
  if (v619 < 0.0)
    v620 = 0.0;
  v621 = v557 * -0.5;
  v622 = (float)(v557 * -0.5) + (float)(v556 + v594);
  v623 = (float)v558[6] + -1.001;
  if (v623 >= v622)
    v623 = (float)(v557 * -0.5) + (float)(v556 + v594);
  if (v622 >= 0.0)
    v624 = v623;
  else
    v624 = 0.0;
  v625 = v620;
  v626 = v624;
  v627 = (v625 + 1);
  v628 = v558[11] + v617 * v626;
  v629 = v628 + v617;
  v630 = (float)v627 - v620;
  v631 = (float)(v626 + 1) - v624;
  v632 = v630 * v631;
  *(float *)&v633 = v620 - (float)v620;
  v634 = *(float *)&v633 * v631;
  *(float *)&v635 = (float)v624;
  v636 = v624 - *(float *)&v635;
  v637 = v630 * v636;
  v638 = *(float *)&v633 * v636;
  LOBYTE(v633) = *(_BYTE *)(v628 + v625);
  LOBYTE(v635) = *(_BYTE *)(v628 + v627);
  *(float *)&v639 = v634 * (float)v635;
  *(float *)&v640 = (float)(v632 * (float)v633) + *(float *)&v639;
  LOBYTE(v639) = *(_BYTE *)(v629 + v625);
  v641 = (float)(v637 * (float)v639) + *(float *)&v640;
  LOBYTE(v640) = *(_BYTE *)(v629 + v627);
  v1238[68] = 0xBF0000003F3504F3;
  v1238[69] = LODWORD(v549) | ((unint64_t)(int)(float)((float)((float)(v638 * (float)v640) + v641)
                                                                          * 255.0) << 32);
  v642 = v558[5];
  v643 = v561 + v562;
  v644 = (float)v558[4] + -1.001;
  if (v644 >= v643)
    v644 = v643;
  if (v643 >= 0.0)
    v645 = v644;
  else
    v645 = 0.0;
  v646 = v557 + v566;
  v647 = (float)v558[6] + -1.001;
  if (v647 >= v646)
    v647 = v646;
  if (v646 >= 0.0)
    v648 = v647;
  else
    v648 = 0.0;
  v649 = v645;
  v650 = v648;
  v651 = (v649 + 1);
  v652 = v558[11] + v642 * v650;
  v653 = v652 + v642;
  v654 = (float)v651 - v645;
  v655 = (float)(v650 + 1) - v648;
  *(float *)&v656 = v654 * v655;
  *(float *)&v657 = v645 - (float)v645;
  v658 = *(float *)&v657 * v655;
  v659 = v648 - (float)v648;
  v660 = v654 * v659;
  v661 = *(float *)&v657 * v659;
  LOBYTE(v657) = *(_BYTE *)(v652 + v649);
  v662 = *(float *)&v656 * (float)v657;
  LOBYTE(v656) = *(_BYTE *)(v652 + v651);
  *(float *)&v663 = v658 * (float)v656;
  v664 = v662 + *(float *)&v663;
  LOBYTE(v663) = *(_BYTE *)(v653 + v649);
  *(float *)&v665 = v660 * (float)v663;
  v666 = *(float *)&v665 + v664;
  LOBYTE(v665) = *(_BYTE *)(v653 + v651);
  v1238[70] = 0x3F80000000000000;
  v1238[71] = LODWORD(v549) | ((unint64_t)(int)(float)((float)((float)(v661 * (float)v665) + v666)
                                                                          * 255.0) << 32);
  v667 = v558[5];
  v668 = v555 - v588;
  v669 = (float)v558[4] + -1.001;
  if (v669 >= (float)(v668 + v618))
    v669 = v668 + v618;
  if ((float)(v668 + v618) >= 0.0)
    v670 = v669;
  else
    v670 = 0.0;
  v671 = v556 - v594;
  v672 = (float)v558[6] + -1.001;
  if (v672 >= (float)(v621 + v671))
    v672 = v621 + v671;
  if ((float)(v621 + v671) >= 0.0)
    v673 = v672;
  else
    v673 = 0.0;
  v674 = v670;
  v675 = v673;
  v676 = (v674 + 1);
  v677 = v558[11] + v667 * v675;
  v678 = v677 + v667;
  v679 = (float)v676 - v670;
  v680 = (float)(v675 + 1) - v673;
  *(float *)&v681 = v679 * v680;
  v682 = v670 - (float)v670;
  v683 = v682 * v680;
  *(float *)&v684 = v673 - (float)v673;
  v685 = v679 * *(float *)&v684;
  v686 = v682 * *(float *)&v684;
  LOBYTE(v684) = *(_BYTE *)(v677 + v674);
  v687 = *(float *)&v681 * (float)v684;
  LOBYTE(v681) = *(_BYTE *)(v677 + v676);
  *(float *)&v688 = v683 * (float)v681;
  v689 = v687 + *(float *)&v688;
  LOBYTE(v688) = *(_BYTE *)(v678 + v674);
  *(float *)&v690 = v685 * (float)v688;
  v691 = *(float *)&v690 + v689;
  LOBYTE(v690) = *(_BYTE *)(v678 + v676);
  v1238[72] = 0xBF000000BF3504F3;
  v1238[73] = LODWORD(v549) | ((unint64_t)(int)(float)((float)((float)(v686 * (float)v690) + v691)
                                                                          * 255.0) << 32);
  v692 = v558[11];
  v694 = v558[4];
  v693 = v558[5];
  v695 = v558[6];
  v696 = v668 + v590;
  v697 = (float)v694 + -1.001;
  if (v697 >= v696)
    v697 = v696;
  if (v696 >= 0.0)
    v698 = v697;
  else
    v698 = 0.0;
  v699 = v595 + v671;
  v700 = (float)v695 + -1.001;
  if (v700 >= v699)
    v700 = v699;
  if (v699 >= 0.0)
    v701 = v700;
  else
    v701 = 0.0;
  v702 = v698;
  v703 = v701;
  v704 = (v702 + 1);
  v705 = v692 + v693 * v703;
  v706 = v705 + v693;
  v707 = (float)v704 - v698;
  v708 = (float)(v703 + 1) - v701;
  v709 = v707 * v708;
  *(float *)&v710 = v698 - (float)v698;
  v711 = *(float *)&v710 * v708;
  *(float *)&v712 = (float)v701;
  v713 = v701 - *(float *)&v712;
  v714 = v707 * v713;
  v715 = *(float *)&v710 * v713;
  LOBYTE(v710) = *(_BYTE *)(v705 + v702);
  LOBYTE(v712) = *(_BYTE *)(v705 + v704);
  *(float *)&v716 = v709 * (float)v710;
  *(float *)&v717 = *(float *)&v716 + (float)(v711 * (float)v712);
  LOBYTE(v716) = *(_BYTE *)(v706 + v702);
  v718 = (float)(v714 * (float)v716) + *(float *)&v717;
  LOBYTE(v717) = *(_BYTE *)(v706 + v704);
  v1238[74] = 0x3F000000BF3504F3;
  v1238[75] = LODWORD(v549) | ((unint64_t)(int)(float)((float)((float)(v715 * (float)v717) + v718)
                                                                          * 255.0) << 32);
  v719 = v549 * 1.4142;
  v720 = v550 * 1.4142;
  v721 = vcvtms_s32_f32((float)((float)((float)((float)((float)((float)((float)(COERCE_FLOAT(LODWORD(v720) & 0x807FFFFF | 0x3F800000)* -0.33333)+ 2.0)* COERCE_FLOAT(LODWORD(v720) & 0x807FFFFF | 0x3F800000))+ -1.6667)+ (float)((LODWORD(v720) >> 23) - 127))* 0.69315)- v10)* v11);
  if (v721 < 0)
  {
    v722 = 0;
    v723 = 0;
  }
  else if ((int)v9 * v8 <= v721)
  {
    v722 = v8 - 1;
    v723 = v9 - 1;
  }
  else
  {
    v722 = v721 / (int)v9;
    v723 = v721 % (int)v9;
  }
  v724 = (float)(1 << v722);
  v725 = (float)(1.0 / v724) * a4;
  v726 = (float)(1.0 / v724) * a5;
  v727 = v719 / v724;
  v728 = (unint64_t *)(v20 + 144 * (v9 * v722 + v723));
  v729 = v728[5];
  v730 = (float)(v719 / v724) * 0.5;
  v731 = v725 - v730;
  v732 = (float)(v719 / v724) * 0.0;
  v733 = v732 * 0.70711;
  v734 = (float)v728[4] + -1.001;
  if (v734 >= (float)((float)(v725 - v730) + (float)(v732 * 0.70711)))
    v734 = v731 + v733;
  if ((float)(v731 + v733) < 0.0)
    v734 = 0.0;
  v735 = v732 * 0.5;
  v736 = v726 - (float)(v732 * 0.5);
  v737 = (float)(v727 * 0.70711) + v736;
  v738 = (float)v728[6] + -1.001;
  if (v738 >= v737)
    v738 = (float)(v727 * 0.70711) + v736;
  if (v737 >= 0.0)
    v739 = v738;
  else
    v739 = 0.0;
  v740 = v734;
  v741 = v739;
  v742 = (v740 + 1);
  v743 = v728[11] + v729 * v741;
  v744 = v743 + v729;
  v745 = (float)v742 - v734;
  v746 = (float)(v741 + 1) - v739;
  *(float *)&v747 = v745 * v746;
  *(float *)&v748 = v734 - (float)v734;
  v749 = *(float *)&v748 * v746;
  v750 = v739 - (float)v739;
  v751 = v745 * v750;
  v752 = *(float *)&v748 * v750;
  LOBYTE(v748) = *(_BYTE *)(v743 + v740);
  v753 = *(float *)&v747 * (float)v748;
  LOBYTE(v747) = *(_BYTE *)(v743 + v742);
  *(float *)&v754 = v749 * (float)v747;
  v755 = v753 + *(float *)&v754;
  LOBYTE(v754) = *(_BYTE *)(v744 + v740);
  *(float *)&v756 = v751 * (float)v754;
  v757 = *(float *)&v756 + v755;
  LOBYTE(v756) = *(_BYTE *)(v744 + v742);
  v1238[80] = 0x3F3504F3BF000000;
  v1238[81] = LODWORD(v719) | ((unint64_t)(int)(float)((float)((float)(v752 * (float)v756) + v757)
                                                                          * 255.0) << 32);
  v758 = v728[5];
  v759 = v730 + v725;
  v760 = (float)(v730 + v725) + v733;
  v761 = (float)v728[4] + -1.001;
  if (v761 >= v760)
    v761 = v760;
  if (v760 >= 0.0)
    v762 = v761;
  else
    v762 = 0.0;
  v763 = v726 + v735;
  v764 = (float)(v727 * 0.70711) + (float)(v726 + v735);
  v765 = (float)v728[6] + -1.001;
  if (v765 >= v764)
    v765 = v764;
  if (v764 >= 0.0)
    v766 = v765;
  else
    v766 = 0.0;
  v767 = v762;
  v768 = v766;
  v769 = (v767 + 1);
  v770 = v728[11] + v758 * v768;
  v771 = v770 + v758;
  v772 = (float)v769 - v762;
  v773 = (float)(v768 + 1) - v766;
  *(float *)&v774 = v772 * v773;
  v775 = v762 - (float)v762;
  v776 = v775 * v773;
  *(float *)&v777 = v766 - (float)v766;
  v778 = v772 * *(float *)&v777;
  v779 = v775 * *(float *)&v777;
  LOBYTE(v777) = *(_BYTE *)(v770 + v767);
  v780 = *(float *)&v774 * (float)v777;
  LOBYTE(v774) = *(_BYTE *)(v770 + v769);
  *(float *)&v781 = v776 * (float)v774;
  v782 = v780 + *(float *)&v781;
  LOBYTE(v781) = *(_BYTE *)(v771 + v767);
  *(float *)&v783 = v778 * (float)v781;
  v784 = *(float *)&v783 + v782;
  LOBYTE(v783) = *(_BYTE *)(v771 + v769);
  v1238[82] = 0x3F3504F33F000000;
  v1238[83] = LODWORD(v719) | ((unint64_t)(int)(float)((float)((float)(v779 * (float)v783) + v784)
                                                                          * 255.0) << 32);
  v785 = v728[5];
  v786 = (float)(v727 + v725) + (float)(v732 * 0.0);
  v787 = (float)v728[4] + -1.001;
  if (v787 >= v786)
    v787 = (float)(v727 + v725) + (float)(v732 * 0.0);
  if (v786 >= 0.0)
    v788 = v787;
  else
    v788 = 0.0;
  v789 = v732 + (float)(v732 + v726);
  v790 = (float)v728[6] + -1.001;
  if (v790 >= v789)
    v790 = v732 + (float)(v732 + v726);
  if (v789 >= 0.0)
    v791 = v790;
  else
    v791 = 0.0;
  v792 = v788;
  v793 = v791;
  v794 = (v792 + 1);
  v795 = v728[11] + v785 * v793;
  v796 = v795 + v785;
  v797 = (float)v794 - v788;
  v798 = (float)(v793 + 1) - v791;
  *(float *)&v799 = v797 * v798;
  v800 = v788 - (float)v788;
  v801 = v800 * v798;
  *(float *)&v802 = v791 - (float)v791;
  v803 = v797 * *(float *)&v802;
  v804 = v800 * *(float *)&v802;
  LOBYTE(v802) = *(_BYTE *)(v795 + v792);
  v805 = *(float *)&v799 * (float)v802;
  LOBYTE(v799) = *(_BYTE *)(v795 + v794);
  *(float *)&v806 = v801 * (float)v799;
  v807 = v805 + *(float *)&v806;
  LOBYTE(v806) = *(_BYTE *)(v796 + v792);
  *(float *)&v808 = v803 * (float)v806;
  v809 = *(float *)&v808 + v807;
  LOBYTE(v808) = *(_BYTE *)(v796 + v794);
  v1238[84] = 1065353216;
  v1238[85] = LODWORD(v719) | ((unint64_t)(int)(float)((float)((float)(v804 * (float)v808) + v809)
                                                                          * 255.0) << 32);
  v810 = v728[5];
  v811 = v759 + (float)(v732 * -0.70711);
  v812 = (float)v728[4] + -1.001;
  if (v812 >= v811)
    v812 = v811;
  if (v811 < 0.0)
    v812 = 0.0;
  v813 = (float)(v727 * -0.70711) + v763;
  v814 = (float)v728[6] + -1.001;
  if (v814 >= v813)
    v814 = v813;
  if (v813 >= 0.0)
    v815 = v814;
  else
    v815 = 0.0;
  v816 = v812;
  v817 = v815;
  v818 = (v816 + 1);
  v819 = v728[11] + v810 * v817;
  v820 = v819 + v810;
  v821 = (float)v818 - v812;
  v822 = (float)(v817 + 1) - v815;
  *(float *)&v823 = v821 * v822;
  *(float *)&v824 = v812 - (float)v812;
  v825 = *(float *)&v824 * v822;
  v826 = v815 - (float)v815;
  v827 = v821 * v826;
  v828 = *(float *)&v824 * v826;
  LOBYTE(v824) = *(_BYTE *)(v819 + v816);
  v829 = *(float *)&v823 * (float)v824;
  LOBYTE(v823) = *(_BYTE *)(v819 + v818);
  *(float *)&v830 = (float)v823;
  v831 = v825 * *(float *)&v830;
  LOBYTE(v830) = *(_BYTE *)(v820 + v816);
  *(float *)&v832 = v829 + v831;
  v833 = (float)(v827 * (float)v830) + *(float *)&v832;
  LOBYTE(v832) = *(_BYTE *)(v820 + v818);
  v1238[86] = 0xBF3504F33F000000;
  v1238[87] = LODWORD(v719) | ((unint64_t)(int)(float)((float)((float)(v828 * (float)v832) + v833)
                                                                          * 255.0) << 32);
  v834 = v728[5];
  v835 = v731 + (float)(v732 * -0.70711);
  v836 = (float)v728[4] + -1.001;
  if (v836 >= v835)
    v836 = v835;
  if (v835 >= 0.0)
    v837 = v836;
  else
    v837 = 0.0;
  v838 = (float)(v727 * -0.70711) + v736;
  v839 = (float)v728[6] + -1.001;
  if (v839 >= v838)
    v839 = v838;
  if (v838 >= 0.0)
    v840 = v839;
  else
    v840 = 0.0;
  v841 = v837;
  v842 = v840;
  v843 = (v841 + 1);
  v844 = v728[11] + v834 * v842;
  v845 = v844 + v834;
  v846 = (float)v843 - v837;
  v847 = (float)(v842 + 1) - v840;
  *(float *)&v848 = v846 * v847;
  v849 = v837 - (float)v837;
  v850 = v849 * v847;
  *(float *)&v851 = v840 - (float)v840;
  v852 = v846 * *(float *)&v851;
  v853 = v849 * *(float *)&v851;
  LOBYTE(v851) = *(_BYTE *)(v844 + v841);
  v854 = *(float *)&v848 * (float)v851;
  LOBYTE(v848) = *(_BYTE *)(v844 + v843);
  *(float *)&v855 = v850 * (float)v848;
  v856 = v854 + *(float *)&v855;
  LOBYTE(v855) = *(_BYTE *)(v845 + v841);
  *(float *)&v857 = v852 * (float)v855;
  v858 = *(float *)&v857 + v856;
  LOBYTE(v857) = *(_BYTE *)(v845 + v843);
  v1238[88] = 0xBF3504F3BF000000;
  v1238[89] = LODWORD(v719) | ((unint64_t)(int)(float)((float)((float)(v853 * (float)v857) + v858)
                                                                          * 255.0) << 32);
  v859 = v728[11];
  v861 = v728[4];
  v860 = v728[5];
  v862 = v728[6];
  v863 = (float)(v725 - v727) + (float)(v732 * 0.0);
  v864 = (float)v861 + -1.001;
  if (v864 >= v863)
    v864 = v863;
  if (v863 >= 0.0)
    v865 = v864;
  else
    v865 = 0.0;
  v866 = v732 + (float)(v726 - v732);
  v867 = (float)v862 + -1.001;
  if (v867 >= v866)
    v867 = v866;
  v868 = v865;
  if (v866 >= 0.0)
    v560 = v867;
  v869 = v560;
  v870 = (v868 + 1);
  v871 = v859 + v860 * v869;
  v872 = v871 + v860;
  v873 = (float)v870 - v865;
  v874 = (float)(v869 + 1) - v560;
  *(float *)&v875 = v873 * v874;
  v876 = v865 - (float)v865;
  v877 = v876 * v874;
  *(float *)&v878 = (float)v560;
  v879 = v560 - *(float *)&v878;
  v880 = v873 * v879;
  LOBYTE(v878) = *(_BYTE *)(v871 + v868);
  v881 = v876 * v879;
  v882 = *(float *)&v875 * (float)v878;
  LOBYTE(v875) = *(_BYTE *)(v871 + v870);
  *(float *)&v883 = v877 * (float)v875;
  *(float *)&v884 = v882 + *(float *)&v883;
  LOBYTE(v883) = *(_BYTE *)(v872 + v868);
  v885 = (float)(v880 * (float)v883) + *(float *)&v884;
  LOBYTE(v884) = *(_BYTE *)(v872 + v870);
  v1238[90] = 3212836864;
  v1238[91] = LODWORD(v719) | ((unint64_t)(int)(float)((float)((float)(v881 * (float)v884) + v885)
                                                                          * 255.0) << 32);
  v886 = v719 * 1.4142;
  v887 = v720 * 1.4142;
  v888 = vcvtms_s32_f32((float)((float)((float)((float)((float)((float)((float)(COERCE_FLOAT(LODWORD(v887) & 0x807FFFFF | 0x3F800000)* -0.33333)+ 2.0)* COERCE_FLOAT(LODWORD(v887) & 0x807FFFFF | 0x3F800000))+ -1.6667)+ (float)((LODWORD(v887) >> 23) - 127))* 0.69315)- v10)* v11);
  if (v888 < 0)
  {
    v889 = 0;
    v890 = 0;
  }
  else if ((int)v9 * v8 <= v888)
  {
    v889 = v8 - 1;
    v890 = v9 - 1;
  }
  else
  {
    v889 = v888 / (int)v9;
    v890 = v888 % (int)v9;
  }
  v891 = (float)(1 << v889);
  v892 = (float)(1.0 / v891) * a4;
  v893 = (float)(1.0 / v891) * a5;
  v894 = v886 / v891;
  v895 = (unint64_t *)(v20 + 144 * (v9 * v889 + v890));
  v896 = v895[5];
  v897 = (float)(v886 / v891) * 0.0;
  v898 = v897 + v892;
  v899 = (float)(v897 + v892) - v897;
  v900 = (float)v895[4] + -1.001;
  if (v900 >= v899)
    v900 = v898 - (float)(v894 * 0.0);
  if (v899 >= 0.0)
    v901 = v900;
  else
    v901 = 0.0;
  v902 = v893 + (float)(v897 * 0.0);
  v903 = (float)v895[6] + -1.001;
  if (v903 >= (float)(v902 - v894))
    v903 = v902 - v894;
  if ((float)(v902 - v894) >= 0.0)
    v904 = v903;
  else
    v904 = 0.0;
  v905 = v901;
  v906 = v904;
  v907 = (v905 + 1);
  v908 = v895[11] + v896 * v906;
  v909 = v908 + v896;
  v910 = (float)v907 - v901;
  v911 = (float)(v906 + 1) - v904;
  *(float *)&v912 = v910 * v911;
  v913 = v901 - (float)v901;
  v914 = v913 * v911;
  *(float *)&v915 = v904 - (float)v904;
  v916 = v910 * *(float *)&v915;
  v917 = v913 * *(float *)&v915;
  LOBYTE(v915) = *(_BYTE *)(v908 + v905);
  v918 = *(float *)&v912 * (float)v915;
  LOBYTE(v912) = *(_BYTE *)(v908 + v907);
  *(float *)&v919 = v914 * (float)v912;
  v920 = v918 + *(float *)&v919;
  LOBYTE(v919) = *(_BYTE *)(v909 + v905);
  *(float *)&v921 = v916 * (float)v919;
  v922 = *(float *)&v921 + v920;
  LOBYTE(v921) = *(_BYTE *)(v909 + v907);
  v1238[96] = 0xBF80000000000000;
  v1238[97] = LODWORD(v886) | ((unint64_t)(int)(float)((float)((float)(v917 * (float)v921) + v922)
                                                                          * 255.0) << 32);
  v923 = v895[5];
  v924 = v894 * 0.70711;
  v925 = (float)(v894 * 0.70711) + v892;
  v926 = v897 * 0.5;
  v927 = v925 + (float)(v897 * 0.5);
  v928 = (float)v895[4] + -1.001;
  if (v928 >= v927)
    v928 = v925 + (float)(v897 * 0.5);
  if (v927 >= 0.0)
    v929 = v928;
  else
    v929 = 0.0;
  v930 = v897 * 0.70711;
  v931 = v894 * 0.5;
  v932 = (float)(v894 * 0.5) + (float)(v893 + (float)(v897 * 0.70711));
  v933 = (float)v895[6] + -1.001;
  if (v933 >= v932)
    v933 = v931 + (float)(v893 + v930);
  if (v932 >= 0.0)
    v934 = v933;
  else
    v934 = 0.0;
  v935 = v929;
  v936 = v934;
  v937 = (v935 + 1);
  v938 = v895[11] + v923 * v936;
  v939 = v938 + v923;
  v940 = (float)v937 - v929;
  v941 = (float)(v936 + 1) - v934;
  v942 = v940 * v941;
  v943 = v929 - (float)v929;
  v944 = v943 * v941;
  *(float *)&v945 = (float)v934;
  *(float *)&v946 = v934 - *(float *)&v945;
  v947 = v940 * *(float *)&v946;
  v948 = v943 * *(float *)&v946;
  LOBYTE(v946) = *(_BYTE *)(v938 + v935);
  LOBYTE(v945) = *(_BYTE *)(v938 + v937);
  *(float *)&v949 = v944 * (float)v945;
  v950 = (float)(v942 * (float)v946) + *(float *)&v949;
  LOBYTE(v949) = *(_BYTE *)(v939 + v935);
  *(float *)&v951 = v947 * (float)v949;
  v952 = *(float *)&v951 + v950;
  LOBYTE(v951) = *(_BYTE *)(v939 + v937);
  v1238[98] = 0x3F0000003F3504F3;
  v1238[99] = LODWORD(v886) | ((unint64_t)(int)(float)((float)((float)(v948 * (float)v951) + v952)
                                                                          * 255.0) << 32);
  v953 = v895[5];
  v954 = v897 * -0.5;
  v955 = v925 + (float)(v897 * -0.5);
  v956 = (float)v895[4] + -1.001;
  if (v956 >= v955)
    v956 = v955;
  if (v955 < 0.0)
    v956 = 0.0;
  v957 = v894 * -0.5;
  v958 = (float)(v894 * -0.5) + (float)(v893 + v930);
  v959 = (float)v895[6] + -1.001;
  if (v959 >= v958)
    v959 = (float)(v894 * -0.5) + (float)(v893 + v930);
  if (v958 >= 0.0)
    v960 = v959;
  else
    v960 = 0.0;
  v961 = v956;
  v962 = v960;
  v963 = (v961 + 1);
  v964 = v895[11] + v953 * v962;
  v965 = v964 + v953;
  v966 = (float)v963 - v956;
  v967 = (float)(v962 + 1) - v960;
  v968 = v966 * v967;
  *(float *)&v969 = v956 - (float)v956;
  v970 = *(float *)&v969 * v967;
  *(float *)&v971 = (float)v960;
  v972 = v960 - *(float *)&v971;
  v973 = v966 * v972;
  v974 = *(float *)&v969 * v972;
  LOBYTE(v969) = *(_BYTE *)(v964 + v961);
  LOBYTE(v971) = *(_BYTE *)(v964 + v963);
  *(float *)&v975 = v970 * (float)v971;
  *(float *)&v976 = (float)(v968 * (float)v969) + *(float *)&v975;
  LOBYTE(v975) = *(_BYTE *)(v965 + v961);
  v977 = (float)(v973 * (float)v975) + *(float *)&v976;
  LOBYTE(v976) = *(_BYTE *)(v965 + v963);
  v1238[100] = 0xBF0000003F3504F3;
  v1238[101] = LODWORD(v886) | ((unint64_t)(int)(float)((float)((float)(v974 * (float)v976) + v977)
                                                                           * 255.0) << 32);
  v978 = v895[5];
  v979 = v897 + v898;
  v980 = (float)v895[4] + -1.001;
  if (v980 >= v979)
    v980 = v979;
  if (v979 >= 0.0)
    v981 = v980;
  else
    v981 = 0.0;
  v982 = v894 + v902;
  v983 = (float)v895[6] + -1.001;
  if (v983 >= v982)
    v983 = v982;
  if (v982 >= 0.0)
    v984 = v983;
  else
    v984 = 0.0;
  v985 = v981;
  v986 = v984;
  v987 = (v985 + 1);
  v988 = v895[11] + v978 * v986;
  v989 = v988 + v978;
  v990 = (float)v987 - v981;
  v991 = (float)(v986 + 1) - v984;
  *(float *)&v992 = v990 * v991;
  *(float *)&v993 = v981 - (float)v981;
  v994 = *(float *)&v993 * v991;
  v995 = v984 - (float)v984;
  v996 = v990 * v995;
  v997 = *(float *)&v993 * v995;
  LOBYTE(v993) = *(_BYTE *)(v988 + v985);
  v998 = *(float *)&v992 * (float)v993;
  LOBYTE(v992) = *(_BYTE *)(v988 + v987);
  *(float *)&v999 = v994 * (float)v992;
  v1000 = v998 + *(float *)&v999;
  LOBYTE(v999) = *(_BYTE *)(v989 + v985);
  *(float *)&v1001 = v996 * (float)v999;
  v1002 = *(float *)&v1001 + v1000;
  LOBYTE(v1001) = *(_BYTE *)(v989 + v987);
  v1238[102] = 0x3F80000000000000;
  v1238[103] = LODWORD(v886) | ((unint64_t)(int)(float)((float)((float)(v997 * (float)v1001) + v1002)
                                                                           * 255.0) << 32);
  v1003 = v895[5];
  v1004 = v892 - v924;
  v1005 = (float)v895[4] + -1.001;
  if (v1005 >= (float)(v1004 + v954))
    v1005 = v1004 + v954;
  if ((float)(v1004 + v954) >= 0.0)
    v1006 = v1005;
  else
    v1006 = 0.0;
  v1007 = v893 - v930;
  v1008 = (float)v895[6] + -1.001;
  if (v1008 >= (float)(v957 + v1007))
    v1008 = v957 + v1007;
  if ((float)(v957 + v1007) >= 0.0)
    v1009 = v1008;
  else
    v1009 = 0.0;
  v1010 = v1006;
  v1011 = v1009;
  v1012 = (v1010 + 1);
  v1013 = v895[11] + v1003 * v1011;
  v1014 = v1013 + v1003;
  v1015 = (float)v1012 - v1006;
  v1016 = (float)(v1011 + 1) - v1009;
  *(float *)&v1017 = v1015 * v1016;
  v1018 = v1006 - (float)v1006;
  v1019 = v1018 * v1016;
  *(float *)&v1020 = v1009 - (float)v1009;
  v1021 = v1015 * *(float *)&v1020;
  v1022 = v1018 * *(float *)&v1020;
  LOBYTE(v1020) = *(_BYTE *)(v1013 + v1010);
  v1023 = *(float *)&v1017 * (float)v1020;
  LOBYTE(v1017) = *(_BYTE *)(v1013 + v1012);
  *(float *)&v1024 = v1019 * (float)v1017;
  v1025 = v1023 + *(float *)&v1024;
  LOBYTE(v1024) = *(_BYTE *)(v1014 + v1010);
  *(float *)&v1026 = v1021 * (float)v1024;
  v1027 = *(float *)&v1026 + v1025;
  LOBYTE(v1026) = *(_BYTE *)(v1014 + v1012);
  v1238[104] = 0xBF000000BF3504F3;
  v1238[105] = LODWORD(v886) | ((unint64_t)(int)(float)((float)((float)(v1022 * (float)v1026)
                                                                                   + v1027)
                                                                           * 255.0) << 32);
  v1028 = v895[11];
  v1029 = v895[4];
  v1030 = v895[5];
  v1031 = v895[6];
  v1032 = v1004 + v926;
  v1033 = (float)v1029 + -1.001;
  if (v1033 >= v1032)
    v1033 = v1032;
  if (v1032 >= 0.0)
    v1034 = v1033;
  else
    v1034 = 0.0;
  v1035 = v931 + v1007;
  v1036 = (float)v1031 + -1.001;
  if (v1036 >= v1035)
    v1036 = v1035;
  if (v1035 >= 0.0)
    v1037 = v1036;
  else
    v1037 = 0.0;
  v1038 = v1034;
  v1039 = v1037;
  v1040 = (v1038 + 1);
  v1041 = v1028 + v1030 * v1039;
  v1042 = v1041 + v1030;
  v1043 = (float)v1040 - v1034;
  v1044 = (float)(v1039 + 1) - v1037;
  v1045 = v1043 * v1044;
  *(float *)&v1046 = v1034 - (float)v1034;
  v1047 = *(float *)&v1046 * v1044;
  *(float *)&v1048 = (float)v1037;
  v1049 = v1037 - *(float *)&v1048;
  v1050 = v1043 * v1049;
  v1051 = *(float *)&v1046 * v1049;
  LOBYTE(v1046) = *(_BYTE *)(v1041 + v1038);
  LOBYTE(v1048) = *(_BYTE *)(v1041 + v1040);
  *(float *)&v1052 = v1045 * (float)v1046;
  *(float *)&v1053 = *(float *)&v1052 + (float)(v1047 * (float)v1048);
  LOBYTE(v1052) = *(_BYTE *)(v1042 + v1038);
  v1054 = (float)(v1050 * (float)v1052) + *(float *)&v1053;
  LOBYTE(v1053) = *(_BYTE *)(v1042 + v1040);
  v1238[106] = 0x3F000000BF3504F3;
  v1238[107] = LODWORD(v886) | ((unint64_t)(int)(float)((float)((float)(v1051 * (float)v1053)
                                                                                   + v1054)
                                                                           * 255.0) << 32);
  v1055 = v886 * 1.4142;
  v1056 = vcvtms_s32_f32((float)((float)((float)((float)((float)((float)((float)(COERCE_FLOAT(COERCE_UNSIGNED_INT(v887 * 1.4142) & 0x807FFFFF | 0x3F800000)* -0.33333)+ 2.0)* COERCE_FLOAT(COERCE_UNSIGNED_INT(v887 * 1.4142) & 0x807FFFFF | 0x3F800000))+ -1.6667)+ (float)((COERCE_UNSIGNED_INT(v887 * 1.4142) >> 23) - 127))* 0.69315)- v10)* v11);
  if (v1056 < 0)
  {
    v1057 = 0;
    v1058 = 0;
  }
  else if ((int)v9 * v8 <= v1056)
  {
    v1057 = v8 - 1;
    v1058 = v9 - 1;
  }
  else
  {
    v1057 = v1056 / (int)v9;
    v1058 = v1056 % (int)v9;
  }
  v1059 = (float)(1 << v1057);
  v1060 = (float)(1.0 / v1059) * a4;
  v1061 = (float)(1.0 / v1059) * a5;
  v1062 = v1055 / v1059;
  v1063 = (unint64_t *)(v20 + 144 * (v9 * v1057 + v1058));
  v1064 = v1063[5];
  v1065 = (float)(v1055 / v1059) * 0.5;
  v1066 = v1060 - v1065;
  v1067 = (float)(v1055 / v1059) * 0.0;
  v1068 = (float)(v1060 - v1065) + (float)(v1067 * 0.70711);
  v1069 = (float)v1063[4] + -1.001;
  if (v1069 >= v1068)
    v1069 = (float)(v1060 - v1065) + (float)(v1067 * 0.70711);
  if (v1068 >= 0.0)
    v1070 = v1069;
  else
    v1070 = 0.0;
  v1071 = v1067 * 0.5;
  v1072 = v1061 - (float)(v1067 * 0.5);
  v1073 = v1062 * 0.70711;
  v1074 = (float)v1063[6] + -1.001;
  if (v1074 >= (float)((float)(v1062 * 0.70711) + v1072))
    v1074 = v1073 + v1072;
  if ((float)((float)(v1062 * 0.70711) + v1072) >= 0.0)
    v1075 = v1074;
  else
    v1075 = 0.0;
  v1076 = v1070;
  v1077 = v1075;
  v1078 = (v1076 + 1);
  v1079 = v1063[11] + v1064 * v1077;
  v1080 = v1079 + v1064;
  v1081 = (float)v1078 - v1070;
  v1082 = (float)(v1077 + 1) - v1075;
  *(float *)&v1083 = v1081 * v1082;
  *(float *)&v1084 = v1070 - (float)v1070;
  v1085 = *(float *)&v1084 * v1082;
  v1086 = v1075 - (float)v1075;
  v1087 = v1081 * v1086;
  v1088 = *(float *)&v1084 * v1086;
  LOBYTE(v1084) = *(_BYTE *)(v1079 + v1076);
  v1089 = *(float *)&v1083 * (float)v1084;
  LOBYTE(v1083) = *(_BYTE *)(v1079 + v1078);
  *(float *)&v1090 = v1085 * (float)v1083;
  v1091 = v1089 + *(float *)&v1090;
  LOBYTE(v1090) = *(_BYTE *)(v1080 + v1076);
  *(float *)&v1092 = v1087 * (float)v1090;
  v1093 = *(float *)&v1092 + v1091;
  LOBYTE(v1092) = *(_BYTE *)(v1080 + v1078);
  v1094 = LODWORD(v1055);
  v1238[112] = 0x3F3504F3BF000000;
  v1238[113] = LODWORD(v1055) | ((unint64_t)(int)(float)((float)((float)(v1088 * (float)v1092)
                                                                                    + v1093)
                                                                            * 255.0) << 32);
  v1095 = v1063[5];
  v1096 = v1065 + v1060;
  v1097 = v1096 + (float)(v1067 * 0.70711);
  v1098 = (float)v1063[4] + -1.001;
  if (v1098 >= v1097)
    v1098 = v1096 + (float)(v1067 * 0.70711);
  if (v1097 >= 0.0)
    v1099 = v1098;
  else
    v1099 = 0.0;
  v1100 = v1061 + v1071;
  v1101 = v1073 + (float)(v1061 + v1071);
  v1102 = (float)v1063[6] + -1.001;
  if (v1102 >= v1101)
    v1102 = v1101;
  if (v1101 >= 0.0)
    v1103 = v1102;
  else
    v1103 = 0.0;
  v1104 = v1099;
  v1105 = v1103;
  v1106 = (v1104 + 1);
  v1107 = v1063[11] + v1095 * v1105;
  v1108 = v1107 + v1095;
  v1109 = (float)v1106 - v1099;
  v1110 = (float)(v1105 + 1) - v1103;
  *(float *)&v1111 = v1109 * v1110;
  v1112 = v1099 - (float)v1099;
  v1113 = v1112 * v1110;
  *(float *)&v1114 = v1103 - (float)v1103;
  v1115 = v1109 * *(float *)&v1114;
  v1116 = v1112 * *(float *)&v1114;
  LOBYTE(v1114) = *(_BYTE *)(v1107 + v1104);
  v1117 = *(float *)&v1111 * (float)v1114;
  LOBYTE(v1111) = *(_BYTE *)(v1107 + v1106);
  *(float *)&v1118 = v1113 * (float)v1111;
  v1119 = v1117 + *(float *)&v1118;
  LOBYTE(v1118) = *(_BYTE *)(v1108 + v1104);
  *(float *)&v1120 = v1115 * (float)v1118;
  v1121 = *(float *)&v1120 + v1119;
  LOBYTE(v1120) = *(_BYTE *)(v1108 + v1106);
  v1238[114] = 0x3F3504F33F000000;
  v1238[115] = v1094 | ((unint64_t)(int)(float)((float)((float)(v1116 * (float)v1120) + v1121)
                                                                   * 255.0) << 32);
  v1122 = v1063[5];
  v1123 = (float)(v1062 + v1060) + (float)(v1067 * 0.0);
  v1124 = (float)v1063[4] + -1.001;
  if (v1124 >= v1123)
    v1124 = (float)(v1062 + v1060) + (float)(v1067 * 0.0);
  if (v1123 >= 0.0)
    v1125 = v1124;
  else
    v1125 = 0.0;
  v1126 = v1067 + (float)(v1067 + v1061);
  v1127 = (float)v1063[6] + -1.001;
  if (v1127 >= v1126)
    v1127 = v1067 + (float)(v1067 + v1061);
  if (v1126 >= 0.0)
    v1128 = v1127;
  else
    v1128 = 0.0;
  v1129 = v1125;
  v1130 = v1128;
  v1131 = (v1129 + 1);
  v1132 = v1063[11] + v1122 * v1130;
  v1133 = v1132 + v1122;
  v1134 = (float)v1131 - v1125;
  v1135 = (float)(v1130 + 1) - v1128;
  *(float *)&v1136 = v1134 * v1135;
  v1137 = v1125 - (float)v1125;
  v1138 = v1137 * v1135;
  *(float *)&v1139 = v1128 - (float)v1128;
  v1140 = v1134 * *(float *)&v1139;
  v1141 = v1137 * *(float *)&v1139;
  LOBYTE(v1139) = *(_BYTE *)(v1132 + v1129);
  v1142 = *(float *)&v1136 * (float)v1139;
  LOBYTE(v1136) = *(_BYTE *)(v1132 + v1131);
  *(float *)&v1143 = v1138 * (float)v1136;
  v1144 = v1142 + *(float *)&v1143;
  LOBYTE(v1143) = *(_BYTE *)(v1133 + v1129);
  *(float *)&v1145 = v1140 * (float)v1143;
  v1146 = *(float *)&v1145 + v1144;
  LOBYTE(v1145) = *(_BYTE *)(v1133 + v1131);
  v1238[116] = 1065353216;
  v1238[117] = v1094 | ((unint64_t)(int)(float)((float)((float)(v1141 * (float)v1145) + v1146)
                                                                   * 255.0) << 32);
  v1147 = v1063[5];
  v1148 = v1096 + (float)(v1067 * -0.70711);
  v1149 = (float)v1063[4] + -1.001;
  if (v1149 >= v1148)
    v1149 = v1148;
  if (v1148 < 0.0)
    v1149 = 0.0;
  v1150 = (float)(v1062 * -0.70711) + v1100;
  v1151 = (float)v1063[6] + -1.001;
  if (v1151 >= v1150)
    v1151 = v1150;
  if (v1150 >= 0.0)
    v1152 = v1151;
  else
    v1152 = 0.0;
  v1153 = v1149;
  v1154 = v1152;
  v1155 = (v1153 + 1);
  v1156 = v1063[11] + v1147 * v1154;
  v1157 = v1156 + v1147;
  v1158 = (float)v1155 - v1149;
  v1159 = (float)(v1154 + 1) - v1152;
  *(float *)&v1160 = v1158 * v1159;
  *(float *)&v1161 = v1149 - (float)v1149;
  v1162 = *(float *)&v1161 * v1159;
  v1163 = v1152 - (float)v1152;
  v1164 = v1158 * v1163;
  v1165 = *(float *)&v1161 * v1163;
  LOBYTE(v1161) = *(_BYTE *)(v1156 + v1153);
  v1166 = *(float *)&v1160 * (float)v1161;
  LOBYTE(v1160) = *(_BYTE *)(v1156 + v1155);
  *(float *)&v1167 = (float)v1160;
  v1168 = v1162 * *(float *)&v1167;
  LOBYTE(v1167) = *(_BYTE *)(v1157 + v1153);
  *(float *)&v1169 = v1166 + v1168;
  v1170 = (float)(v1164 * (float)v1167) + *(float *)&v1169;
  LOBYTE(v1169) = *(_BYTE *)(v1157 + v1155);
  v1238[118] = 0xBF3504F33F000000;
  v1238[119] = v1094 | ((unint64_t)(int)(float)((float)((float)(v1165 * (float)v1169) + v1170)
                                                                   * 255.0) << 32);
  v1171 = v1063[5];
  v1172 = v1066 + (float)(v1067 * -0.70711);
  v1173 = (float)v1063[4] + -1.001;
  if (v1173 >= v1172)
    v1173 = v1172;
  if (v1172 >= 0.0)
    v1174 = v1173;
  else
    v1174 = 0.0;
  v1175 = (float)(v1062 * -0.70711) + v1072;
  v1176 = (float)v1063[6] + -1.001;
  if (v1176 >= v1175)
    v1176 = v1175;
  v1177 = v1174;
  if (v1175 >= 0.0)
    v1178 = v1176;
  else
    v1178 = 0.0;
  v1179 = v1178;
  v1180 = (v1177 + 1);
  v1181 = v1063[11] + v1171 * v1179;
  v1182 = v1181 + v1171;
  v1183 = (float)v1180 - v1174;
  v1184 = (float)(v1179 + 1) - v1178;
  *(float *)&v1185 = v1183 * v1184;
  v1186 = v1174 - (float)v1174;
  v1187 = v1186 * v1184;
  *(float *)&v1188 = (float)v1178;
  v1189 = v1178 - *(float *)&v1188;
  v1190 = v1183 * v1189;
  LOBYTE(v1188) = *(_BYTE *)(v1181 + v1177);
  v1191 = v1186 * v1189;
  v1192 = *(float *)&v1185 * (float)v1188;
  LOBYTE(v1185) = *(_BYTE *)(v1181 + v1180);
  *(float *)&v1193 = v1187 * (float)v1185;
  v1194 = v1192 + *(float *)&v1193;
  LOBYTE(v1193) = *(_BYTE *)(v1182 + v1177);
  *(float *)&v1195 = v1190 * (float)v1193;
  v1196 = *(float *)&v1195 + v1194;
  LOBYTE(v1195) = *(_BYTE *)(v1182 + v1180);
  v1238[120] = 0xBF3504F3BF000000;
  v1238[121] = v1094 | ((unint64_t)(int)(float)((float)((float)(v1191 * (float)v1195) + v1196)
                                                                   * 255.0) << 32);
  v1197 = v1063[11];
  v1199 = v1063[4];
  v1198 = v1063[5];
  v1200 = v1063[6];
  v1201 = (float)(v1060 - v1062) + (float)(v1067 * 0.0);
  v1202 = (float)v1199 + -1.001;
  if (v1202 >= v1201)
    v1202 = v1201;
  if (v1201 >= 0.0)
    v1203 = v1202;
  else
    v1203 = 0.0;
  v1204 = v1067 + (float)(v1061 - v1067);
  v1205 = (float)v1200 + -1.001;
  if (v1205 >= v1204)
    v1205 = v1204;
  if (v1204 >= 0.0)
    v1206 = v1205;
  else
    v1206 = 0.0;
  v1207 = v1203;
  v1208 = v1206;
  v1209 = (v1207 + 1);
  v1210 = v1197 + v1198 * v1208;
  v1211 = v1210 + v1198;
  v1212 = (float)v1209 - v1203;
  v1213 = (float)(v1208 + 1) - v1206;
  *(float *)&v1214 = v1212 * v1213;
  *(float *)&v1215 = v1203 - (float)v1203;
  v1216 = *(float *)&v1215 * v1213;
  v1217 = v1206 - (float)v1206;
  v1218 = v1212 * v1217;
  v1219 = *(float *)&v1215 * v1217;
  LOBYTE(v1215) = *(_BYTE *)(v1210 + v1207);
  v1220 = *(float *)&v1214 * (float)v1215;
  LOBYTE(v1214) = *(_BYTE *)(v1210 + v1209);
  *(float *)&v1221 = v1216 * (float)v1214;
  v1222 = v1220 + *(float *)&v1221;
  LOBYTE(v1221) = *(_BYTE *)(v1211 + v1207);
  *(float *)&v1223 = v1218 * (float)v1221;
  v1224 = *(float *)&v1223 + v1222;
  LOBYTE(v1223) = *(_BYTE *)(v1211 + v1209);
  v1238[122] = 3212836864;
  v1238[123] = v1094 | ((unint64_t)(int)(float)((float)((float)(v1219 * (float)v1223) + v1224)
                                                                   * 255.0) << 32);
  result = sub_20FD53960(a2);
  v1226 = 0;
  v1227 = *(_QWORD *)a2;
  v1228 = 0;
  do
  {
    v1229 = (float32x2_t *)&v1238[2 * LOWORD(a2[v1226 + 1])];
    v1230 = (float32x2_t *)&v1238[2 * HIWORD(a2[v1226 + 1])];
    v1231 = vsub_f32(*v1229, *v1230);
    v1232 = vcvt_s32_f32(vadd_f32(vmul_n_f32(vmul_n_f32(v1231, 1.0 / sqrtf(vaddv_f32(vmul_f32(v1231, v1231)))), *(float *)&v1227), (float32x2_t)0x3F0000003F000000));
    LODWORD(v1229) = v1229[1].u16[2] - v1230[1].u16[2];
    *(int32x2_t *)&a2[v1226 + 2] = v1232;
    v1228 = vsra_n_s32(v1228, vmul_s32(vdup_n_s32(v1229), v1232), 0xFuLL);
    v1226 += 3;
  }
  while (v1226 != 135);
  v1233 = v1228.i32[0];
  if (v1228)
  {
    v1234 = fabsf((float)v1228.i32[1]) + 0.0000001;
    v1235 = v1234 + (float)v1233;
    v1236 = v1235 / (float)(v1234 - (float)v1233);
    *(float *)v1228.i32 = (float)((float)v1233 - v1234) / v1235;
    v1237 = 0.7854;
    if (v1233 < 1)
    {
      v1237 = 2.3562;
      *(float *)v1228.i32 = v1236;
    }
    *(float *)v1228.i32 = v1237
                        + (float)(*(float *)v1228.i32
                                * (float)((float)(*(float *)v1228.i32 * (float)(*(float *)v1228.i32 * 0.1821)) + -0.9675));
    if (v1228.i32[1] < 0)
      *(float *)v1228.i32 = 6.2832 - *(float *)v1228.i32;
  }
  else
  {
    v1228.i32[0] = 0;
  }
  *a1 = v1228.i32[0];
  return result;
}

_DWORD *sub_20FD507F0(float *a1, _DWORD *a2, uint64_t a3, float a4, float a5, float a6)
{
  int v8;
  uint64_t v9;
  float v10;
  float v11;
  int v12;
  int v13;
  int v14;
  float v15;
  float v16;
  float v17;
  float v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  float v35;
  float v36;
  unsigned int v37;
  float v38;
  float v39;
  unsigned int v40;
  float v41;
  float v42;
  float v43;
  unsigned int v44;
  float v45;
  unsigned int v46;
  float v47;
  int v48;
  int v49;
  float v50;
  float v51;
  float v52;
  float v53;
  unint64_t *v54;
  unint64_t v55;
  float v56;
  float v57;
  float v58;
  float v59;
  float v60;
  float v61;
  float v62;
  float v63;
  float v64;
  float v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  unint64_t v70;
  float v71;
  float v72;
  unsigned int v73;
  unsigned int v74;
  float v75;
  float v76;
  float v77;
  float v78;
  float v79;
  unsigned int v80;
  float v81;
  unsigned int v82;
  float v83;
  unint64_t v84;
  float v85;
  float v86;
  float v87;
  float v88;
  float v89;
  float v90;
  float v91;
  float v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  unint64_t v96;
  unint64_t v97;
  float v98;
  float v99;
  unsigned int v100;
  float v101;
  float v102;
  unsigned int v103;
  float v104;
  float v105;
  float v106;
  unsigned int v107;
  float v108;
  unsigned int v109;
  float v110;
  unint64_t v111;
  float v112;
  float v113;
  float v114;
  float v115;
  float v116;
  float v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  unint64_t v121;
  unint64_t v122;
  float v123;
  float v124;
  unsigned int v125;
  float v126;
  float v127;
  unsigned int v128;
  float v129;
  float v130;
  float v131;
  unsigned int v132;
  float v133;
  unsigned int v134;
  float v135;
  unint64_t v136;
  float v137;
  float v138;
  float v139;
  float v140;
  float v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  unint64_t v145;
  unint64_t v146;
  float v147;
  float v148;
  unsigned int v149;
  unsigned int v150;
  float v151;
  float v152;
  float v153;
  float v154;
  float v155;
  unsigned int v156;
  float v157;
  unsigned int v158;
  float v159;
  unint64_t v160;
  float v161;
  float v162;
  float v163;
  float v164;
  float v165;
  float v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  unint64_t v170;
  unint64_t v171;
  float v172;
  float v173;
  unsigned int v174;
  float v175;
  float v176;
  unsigned int v177;
  float v178;
  float v179;
  float v180;
  unsigned int v181;
  float v182;
  unsigned int v183;
  float v184;
  unint64_t v185;
  unint64_t v186;
  unint64_t v187;
  unint64_t v188;
  float v189;
  float v190;
  float v191;
  float v192;
  float v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  unint64_t v197;
  unint64_t v198;
  float v199;
  float v200;
  unsigned int v201;
  float v202;
  float v203;
  unsigned int v204;
  float v205;
  float v206;
  float v207;
  float v208;
  unsigned int v209;
  unsigned int v210;
  float v211;
  float v212;
  float v213;
  int v214;
  int v215;
  int v216;
  float v217;
  float v218;
  float v219;
  float v220;
  unint64_t *v221;
  unint64_t v222;
  float v223;
  float v224;
  float v225;
  float v226;
  float v227;
  float v228;
  float v229;
  float v230;
  float v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  unint64_t v235;
  unint64_t v236;
  float v237;
  float v238;
  unsigned int v239;
  float v240;
  float v241;
  unsigned int v242;
  float v243;
  float v244;
  float v245;
  unsigned int v246;
  float v247;
  unsigned int v248;
  float v249;
  unint64_t v250;
  float v251;
  float v252;
  float v253;
  float v254;
  float v255;
  float v256;
  float v257;
  float v258;
  float v259;
  float v260;
  float v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  unint64_t v265;
  unint64_t v266;
  float v267;
  float v268;
  float v269;
  float v270;
  float v271;
  unsigned int v272;
  unsigned int v273;
  float v274;
  float v275;
  unsigned int v276;
  float v277;
  unsigned int v278;
  float v279;
  unint64_t v280;
  float v281;
  float v282;
  float v283;
  float v284;
  float v285;
  float v286;
  float v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  unint64_t v291;
  unint64_t v292;
  float v293;
  float v294;
  float v295;
  unsigned int v296;
  float v297;
  unsigned int v298;
  float v299;
  float v300;
  float v301;
  unsigned int v302;
  unsigned int v303;
  float v304;
  unint64_t v305;
  float v306;
  float v307;
  float v308;
  float v309;
  float v310;
  float v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  unint64_t v315;
  unint64_t v316;
  float v317;
  float v318;
  unsigned int v319;
  unsigned int v320;
  float v321;
  float v322;
  float v323;
  float v324;
  float v325;
  unsigned int v326;
  float v327;
  unsigned int v328;
  float v329;
  unint64_t v330;
  float v331;
  float v332;
  float v333;
  float v334;
  float v335;
  float v336;
  uint64_t v337;
  uint64_t v338;
  uint64_t v339;
  unint64_t v340;
  unint64_t v341;
  float v342;
  float v343;
  unsigned int v344;
  float v345;
  float v346;
  unsigned int v347;
  float v348;
  float v349;
  float v350;
  unsigned int v351;
  float v352;
  unsigned int v353;
  float v354;
  unint64_t v355;
  unint64_t v356;
  unint64_t v357;
  unint64_t v358;
  float v359;
  float v360;
  float v361;
  float v362;
  float v363;
  float v364;
  uint64_t v365;
  uint64_t v366;
  uint64_t v367;
  unint64_t v368;
  unint64_t v369;
  float v370;
  float v371;
  float v372;
  unsigned int v373;
  float v374;
  unsigned int v375;
  float v376;
  float v377;
  float v378;
  unsigned int v379;
  unsigned int v380;
  float v381;
  float v382;
  float v383;
  int v384;
  int v385;
  int v386;
  float v387;
  float v388;
  float v389;
  float v390;
  unint64_t *v391;
  unint64_t v392;
  float v393;
  float v394;
  float v395;
  float v396;
  float v397;
  float v398;
  float v399;
  float v400;
  float v401;
  float v402;
  uint64_t v403;
  uint64_t v404;
  uint64_t v405;
  unint64_t v406;
  unint64_t v407;
  float v408;
  float v409;
  unsigned int v410;
  unsigned int v411;
  float v412;
  float v413;
  float v414;
  float v415;
  float v416;
  unsigned int v417;
  float v418;
  unsigned int v419;
  float v420;
  unint64_t v421;
  float v422;
  float v423;
  float v424;
  float v425;
  float v426;
  float v427;
  float v428;
  float v429;
  uint64_t v430;
  uint64_t v431;
  uint64_t v432;
  unint64_t v433;
  unint64_t v434;
  float v435;
  float v436;
  unsigned int v437;
  float v438;
  float v439;
  unsigned int v440;
  float v441;
  float v442;
  float v443;
  unsigned int v444;
  float v445;
  unsigned int v446;
  float v447;
  unint64_t v448;
  float v449;
  float v450;
  float v451;
  float v452;
  float v453;
  float v454;
  uint64_t v455;
  uint64_t v456;
  uint64_t v457;
  unint64_t v458;
  unint64_t v459;
  float v460;
  float v461;
  unsigned int v462;
  float v463;
  float v464;
  unsigned int v465;
  float v466;
  float v467;
  float v468;
  unsigned int v469;
  float v470;
  unsigned int v471;
  float v472;
  unint64_t v473;
  float v474;
  float v475;
  float v476;
  float v477;
  float v478;
  uint64_t v479;
  uint64_t v480;
  uint64_t v481;
  unint64_t v482;
  unint64_t v483;
  float v484;
  float v485;
  unsigned int v486;
  unsigned int v487;
  float v488;
  float v489;
  float v490;
  float v491;
  float v492;
  unsigned int v493;
  float v494;
  unsigned int v495;
  float v496;
  unint64_t v497;
  float v498;
  float v499;
  float v500;
  float v501;
  float v502;
  float v503;
  uint64_t v504;
  uint64_t v505;
  uint64_t v506;
  unint64_t v507;
  unint64_t v508;
  float v509;
  float v510;
  unsigned int v511;
  float v512;
  float v513;
  unsigned int v514;
  float v515;
  float v516;
  float v517;
  unsigned int v518;
  float v519;
  unsigned int v520;
  float v521;
  unint64_t v522;
  unint64_t v523;
  unint64_t v524;
  unint64_t v525;
  float v526;
  float v527;
  float v528;
  float v529;
  float v530;
  uint64_t v531;
  uint64_t v532;
  uint64_t v533;
  unint64_t v534;
  unint64_t v535;
  float v536;
  float v537;
  unsigned int v538;
  float v539;
  float v540;
  unsigned int v541;
  float v542;
  float v543;
  float v544;
  float v545;
  unsigned int v546;
  unsigned int v547;
  float v548;
  float v549;
  float v550;
  int v551;
  int v552;
  int v553;
  float v554;
  float v555;
  float v556;
  float v557;
  unint64_t *v558;
  unint64_t v559;
  float v560;
  float v561;
  float v562;
  float v563;
  float v564;
  float v565;
  float v566;
  float v567;
  float v568;
  uint64_t v569;
  uint64_t v570;
  uint64_t v571;
  unint64_t v572;
  unint64_t v573;
  float v574;
  float v575;
  unsigned int v576;
  float v577;
  float v578;
  unsigned int v579;
  float v580;
  float v581;
  float v582;
  unsigned int v583;
  float v584;
  unsigned int v585;
  float v586;
  unint64_t v587;
  float v588;
  float v589;
  float v590;
  float v591;
  float v592;
  float v593;
  float v594;
  float v595;
  float v596;
  float v597;
  float v598;
  uint64_t v599;
  uint64_t v600;
  uint64_t v601;
  unint64_t v602;
  unint64_t v603;
  float v604;
  float v605;
  float v606;
  float v607;
  float v608;
  unsigned int v609;
  unsigned int v610;
  float v611;
  float v612;
  unsigned int v613;
  float v614;
  unsigned int v615;
  float v616;
  unint64_t v617;
  float v618;
  float v619;
  float v620;
  float v621;
  float v622;
  float v623;
  float v624;
  uint64_t v625;
  uint64_t v626;
  uint64_t v627;
  unint64_t v628;
  unint64_t v629;
  float v630;
  float v631;
  float v632;
  unsigned int v633;
  float v634;
  unsigned int v635;
  float v636;
  float v637;
  float v638;
  unsigned int v639;
  unsigned int v640;
  float v641;
  unint64_t v642;
  float v643;
  float v644;
  float v645;
  float v646;
  float v647;
  float v648;
  uint64_t v649;
  uint64_t v650;
  uint64_t v651;
  unint64_t v652;
  unint64_t v653;
  float v654;
  float v655;
  unsigned int v656;
  unsigned int v657;
  float v658;
  float v659;
  float v660;
  float v661;
  float v662;
  unsigned int v663;
  float v664;
  unsigned int v665;
  float v666;
  unint64_t v667;
  float v668;
  float v669;
  float v670;
  float v671;
  float v672;
  float v673;
  uint64_t v674;
  uint64_t v675;
  uint64_t v676;
  unint64_t v677;
  unint64_t v678;
  float v679;
  float v680;
  unsigned int v681;
  float v682;
  float v683;
  unsigned int v684;
  float v685;
  float v686;
  float v687;
  unsigned int v688;
  float v689;
  unsigned int v690;
  float v691;
  unint64_t v692;
  unint64_t v693;
  unint64_t v694;
  unint64_t v695;
  float v696;
  float v697;
  float v698;
  float v699;
  float v700;
  float v701;
  uint64_t v702;
  uint64_t v703;
  uint64_t v704;
  unint64_t v705;
  unint64_t v706;
  float v707;
  float v708;
  float v709;
  unsigned int v710;
  float v711;
  unsigned int v712;
  float v713;
  float v714;
  float v715;
  unsigned int v716;
  unsigned int v717;
  float v718;
  float v719;
  float v720;
  int v721;
  int v722;
  int v723;
  float v724;
  float v725;
  float v726;
  float v727;
  unint64_t *v728;
  unint64_t v729;
  float v730;
  float v731;
  float v732;
  float v733;
  float v734;
  float v735;
  float v736;
  float v737;
  float v738;
  float v739;
  uint64_t v740;
  uint64_t v741;
  uint64_t v742;
  unint64_t v743;
  unint64_t v744;
  float v745;
  float v746;
  unsigned int v747;
  unsigned int v748;
  float v749;
  float v750;
  float v751;
  float v752;
  float v753;
  unsigned int v754;
  float v755;
  unsigned int v756;
  float v757;
  unint64_t v758;
  float v759;
  float v760;
  float v761;
  float v762;
  float v763;
  float v764;
  float v765;
  float v766;
  uint64_t v767;
  uint64_t v768;
  uint64_t v769;
  unint64_t v770;
  unint64_t v771;
  float v772;
  float v773;
  unsigned int v774;
  float v775;
  float v776;
  unsigned int v777;
  float v778;
  float v779;
  float v780;
  unsigned int v781;
  float v782;
  unsigned int v783;
  float v784;
  unint64_t v785;
  float v786;
  float v787;
  float v788;
  float v789;
  float v790;
  float v791;
  uint64_t v792;
  uint64_t v793;
  uint64_t v794;
  unint64_t v795;
  unint64_t v796;
  float v797;
  float v798;
  unsigned int v799;
  float v800;
  float v801;
  unsigned int v802;
  float v803;
  float v804;
  float v805;
  unsigned int v806;
  float v807;
  unsigned int v808;
  float v809;
  unint64_t v810;
  float v811;
  float v812;
  float v813;
  float v814;
  float v815;
  uint64_t v816;
  uint64_t v817;
  uint64_t v818;
  unint64_t v819;
  unint64_t v820;
  float v821;
  float v822;
  unsigned int v823;
  unsigned int v824;
  float v825;
  float v826;
  float v827;
  float v828;
  float v829;
  unsigned int v830;
  float v831;
  unsigned int v832;
  float v833;
  unint64_t v834;
  float v835;
  float v836;
  float v837;
  float v838;
  float v839;
  float v840;
  uint64_t v841;
  uint64_t v842;
  uint64_t v843;
  unint64_t v844;
  unint64_t v845;
  float v846;
  float v847;
  unsigned int v848;
  float v849;
  float v850;
  unsigned int v851;
  float v852;
  float v853;
  float v854;
  unsigned int v855;
  float v856;
  unsigned int v857;
  float v858;
  unint64_t v859;
  unint64_t v860;
  unint64_t v861;
  unint64_t v862;
  float v863;
  float v864;
  float v865;
  float v866;
  float v867;
  uint64_t v868;
  uint64_t v869;
  uint64_t v870;
  unint64_t v871;
  unint64_t v872;
  float v873;
  float v874;
  unsigned int v875;
  float v876;
  float v877;
  unsigned int v878;
  float v879;
  float v880;
  float v881;
  float v882;
  unsigned int v883;
  unsigned int v884;
  float v885;
  float v886;
  float v887;
  int v888;
  int v889;
  int v890;
  float v891;
  float v892;
  float v893;
  float v894;
  unint64_t *v895;
  unint64_t v896;
  float v897;
  float v898;
  float v899;
  float v900;
  float v901;
  float v902;
  float v903;
  float v904;
  uint64_t v905;
  uint64_t v906;
  uint64_t v907;
  unint64_t v908;
  unint64_t v909;
  float v910;
  float v911;
  unsigned int v912;
  float v913;
  float v914;
  unsigned int v915;
  float v916;
  float v917;
  float v918;
  unsigned int v919;
  float v920;
  unsigned int v921;
  float v922;
  unint64_t v923;
  float v924;
  float v925;
  float v926;
  float v927;
  float v928;
  float v929;
  float v930;
  float v931;
  float v932;
  float v933;
  float v934;
  uint64_t v935;
  uint64_t v936;
  uint64_t v937;
  unint64_t v938;
  unint64_t v939;
  float v940;
  float v941;
  float v942;
  float v943;
  float v944;
  unsigned int v945;
  unsigned int v946;
  float v947;
  float v948;
  unsigned int v949;
  float v950;
  unsigned int v951;
  float v952;
  unint64_t v953;
  float v954;
  float v955;
  float v956;
  float v957;
  float v958;
  float v959;
  float v960;
  uint64_t v961;
  uint64_t v962;
  uint64_t v963;
  unint64_t v964;
  unint64_t v965;
  float v966;
  float v967;
  float v968;
  unsigned int v969;
  float v970;
  unsigned int v971;
  float v972;
  float v973;
  float v974;
  unsigned int v975;
  unsigned int v976;
  float v977;
  unint64_t v978;
  float v979;
  float v980;
  float v981;
  float v982;
  float v983;
  float v984;
  uint64_t v985;
  uint64_t v986;
  uint64_t v987;
  unint64_t v988;
  unint64_t v989;
  float v990;
  float v991;
  unsigned int v992;
  unsigned int v993;
  float v994;
  float v995;
  float v996;
  float v997;
  float v998;
  unsigned int v999;
  float v1000;
  unsigned int v1001;
  float v1002;
  unint64_t v1003;
  float v1004;
  float v1005;
  float v1006;
  float v1007;
  float v1008;
  float v1009;
  uint64_t v1010;
  uint64_t v1011;
  uint64_t v1012;
  unint64_t v1013;
  unint64_t v1014;
  float v1015;
  float v1016;
  unsigned int v1017;
  float v1018;
  float v1019;
  unsigned int v1020;
  float v1021;
  float v1022;
  float v1023;
  unsigned int v1024;
  float v1025;
  unsigned int v1026;
  float v1027;
  unint64_t v1028;
  unint64_t v1029;
  unint64_t v1030;
  unint64_t v1031;
  float v1032;
  float v1033;
  float v1034;
  float v1035;
  float v1036;
  float v1037;
  uint64_t v1038;
  uint64_t v1039;
  uint64_t v1040;
  unint64_t v1041;
  unint64_t v1042;
  float v1043;
  float v1044;
  float v1045;
  unsigned int v1046;
  float v1047;
  unsigned int v1048;
  float v1049;
  float v1050;
  float v1051;
  unsigned int v1052;
  unsigned int v1053;
  float v1054;
  float v1055;
  int v1056;
  int v1057;
  int v1058;
  float v1059;
  float v1060;
  float v1061;
  float v1062;
  unint64_t *v1063;
  unint64_t v1064;
  float v1065;
  float v1066;
  float v1067;
  float v1068;
  float v1069;
  float v1070;
  float v1071;
  float v1072;
  float v1073;
  float v1074;
  float v1075;
  uint64_t v1076;
  uint64_t v1077;
  uint64_t v1078;
  unint64_t v1079;
  unint64_t v1080;
  float v1081;
  float v1082;
  unsigned int v1083;
  unsigned int v1084;
  float v1085;
  float v1086;
  float v1087;
  float v1088;
  float v1089;
  unsigned int v1090;
  float v1091;
  unsigned int v1092;
  float v1093;
  uint64_t v1094;
  unint64_t v1095;
  float v1096;
  float v1097;
  float v1098;
  float v1099;
  float v1100;
  float v1101;
  float v1102;
  float v1103;
  uint64_t v1104;
  uint64_t v1105;
  uint64_t v1106;
  unint64_t v1107;
  unint64_t v1108;
  float v1109;
  float v1110;
  unsigned int v1111;
  float v1112;
  float v1113;
  unsigned int v1114;
  float v1115;
  float v1116;
  float v1117;
  unsigned int v1118;
  float v1119;
  unsigned int v1120;
  float v1121;
  unint64_t v1122;
  float v1123;
  float v1124;
  float v1125;
  float v1126;
  float v1127;
  float v1128;
  uint64_t v1129;
  uint64_t v1130;
  uint64_t v1131;
  unint64_t v1132;
  unint64_t v1133;
  float v1134;
  float v1135;
  unsigned int v1136;
  float v1137;
  float v1138;
  unsigned int v1139;
  float v1140;
  float v1141;
  float v1142;
  unsigned int v1143;
  float v1144;
  unsigned int v1145;
  float v1146;
  unint64_t v1147;
  float v1148;
  float v1149;
  float v1150;
  float v1151;
  float v1152;
  uint64_t v1153;
  uint64_t v1154;
  uint64_t v1155;
  unint64_t v1156;
  unint64_t v1157;
  float v1158;
  float v1159;
  unsigned int v1160;
  unsigned int v1161;
  float v1162;
  float v1163;
  float v1164;
  float v1165;
  float v1166;
  unsigned int v1167;
  float v1168;
  unsigned int v1169;
  float v1170;
  unint64_t v1171;
  float v1172;
  float v1173;
  float v1174;
  float v1175;
  float v1176;
  uint64_t v1177;
  float v1178;
  uint64_t v1179;
  uint64_t v1180;
  unint64_t v1181;
  unint64_t v1182;
  float v1183;
  float v1184;
  unsigned int v1185;
  float v1186;
  float v1187;
  unsigned int v1188;
  float v1189;
  float v1190;
  float v1191;
  float v1192;
  unsigned int v1193;
  float v1194;
  unsigned int v1195;
  float v1196;
  unint64_t v1197;
  unint64_t v1198;
  unint64_t v1199;
  unint64_t v1200;
  float v1201;
  float v1202;
  float v1203;
  float v1204;
  float v1205;
  float v1206;
  uint64_t v1207;
  uint64_t v1208;
  uint64_t v1209;
  unint64_t v1210;
  unint64_t v1211;
  float v1212;
  float v1213;
  unsigned int v1214;
  unsigned int v1215;
  float v1216;
  float v1217;
  float v1218;
  float v1219;
  float v1220;
  unsigned int v1221;
  float v1222;
  unsigned int v1223;
  float v1224;
  _DWORD *result;
  float v1226;
  uint64_t v1227;
  float32x2_t v1228;
  float32x2_t *v1229;
  float32x2_t *v1230;
  float32x2_t v1231;
  float v1232;
  float32x2_t v1233;
  float v1234;
  float v1235;
  BOOL v1236;
  float v1237;
  float v1238;
  _QWORD v1239[128];

  v8 = *(_DWORD *)(a3 + 24);
  v9 = *(_QWORD *)(a3 + 32);
  v11 = *(float *)(a3 + 108);
  v10 = *(float *)(a3 + 112);
  v12 = vcvtms_s32_f32((float)((float)((float)((float)((float)((float)((float)(COERCE_FLOAT(LODWORD(a6) & 0x807FFFFF | 0x3F800000)* -0.33333)+ 2.0)* COERCE_FLOAT(LODWORD(a6) & 0x807FFFFF | 0x3F800000))+ -1.6667)+ (float)((LODWORD(a6) >> 23) - 127))* 0.69315)- v10)* v11);
  if (v12 < 0)
  {
    v13 = 0;
    v14 = 0;
  }
  else if ((int)v9 * v8 <= v12)
  {
    v13 = v8 - 1;
    v14 = v9 - 1;
  }
  else
  {
    v13 = v12 / (int)v9;
    v14 = v12 % (int)v9;
  }
  v15 = a6 + a6;
  v16 = 1.0 / (float)(1 << v13);
  v17 = v16 * a4;
  v18 = v16 * a5;
  v19 = v9 * v13 + v14;
  v20 = *(_QWORD *)(a3 + 56);
  v21 = (unint64_t *)(v20 + 144 * v19);
  v22 = v21[5];
  v23 = 0.0;
  v24 = v17 + 0.0;
  v25 = (float)v21[4] + -1.001;
  if (v25 >= v24)
    v25 = v24;
  if (v24 >= 0.0)
    v26 = v25;
  else
    v26 = 0.0;
  v27 = v18 + 0.0;
  v28 = (float)v21[6] + -1.001;
  if (v28 >= v27)
    v28 = v27;
  if (v27 >= 0.0)
    v29 = v28;
  else
    v29 = 0.0;
  v30 = v26;
  v31 = v29;
  v32 = (v30 + 1);
  v33 = v21[11] + v22 * v31;
  v34 = v33 + v22;
  v35 = (float)v32 - v26;
  v36 = (float)(v31 + 1) - v29;
  *(float *)&v37 = v35 * v36;
  v38 = v26 - (float)v26;
  v39 = v38 * v36;
  *(float *)&v40 = v29 - (float)v29;
  v41 = v35 * *(float *)&v40;
  v42 = v38 * *(float *)&v40;
  LOBYTE(v40) = *(_BYTE *)(v33 + v30);
  v43 = *(float *)&v37 * (float)v40;
  LOBYTE(v37) = *(_BYTE *)(v33 + v32);
  *(float *)&v44 = v39 * (float)v37;
  v45 = v43 + *(float *)&v44;
  LOBYTE(v44) = *(_BYTE *)(v34 + v30);
  *(float *)&v46 = (float)v44;
  v47 = v41 * *(float *)&v46;
  LOBYTE(v46) = *(_BYTE *)(v34 + v32);
  v1239[0] = 0;
  v1239[1] = (unint64_t)(int)(float)((float)((float)(v42 * (float)v46) + (float)(v47 + v45)) * 255.0) << 32;
  if (v12 < 0)
  {
    v49 = 0;
    v48 = 0;
  }
  else if ((int)v9 * v8 <= v12)
  {
    v48 = v8 - 1;
    v49 = v9 - 1;
  }
  else
  {
    v48 = v12 / (int)v9;
    v49 = v12 % (int)v9;
  }
  v50 = (float)(1 << v48);
  v51 = (float)(1.0 / v50) * a4;
  v52 = (float)(1.0 / v50) * a5;
  v53 = v15 / v50;
  v54 = (unint64_t *)(v20 + 144 * (v9 * v48 + v49));
  v55 = v54[5];
  v56 = v53 * 0.5;
  v57 = v51 - (float)(v53 * 0.5);
  v58 = v53 * 0.0;
  v59 = (float)(v53 * 0.0) * 0.70711;
  v60 = (float)v54[4] + -1.001;
  if (v60 >= (float)(v57 + v59))
    v60 = v57 + v59;
  if ((float)(v57 + v59) < 0.0)
    v60 = 0.0;
  v61 = v58 * 0.5;
  v62 = v52 - (float)(v58 * 0.5);
  v63 = (float)(v53 * 0.70711) + v62;
  v64 = (float)v54[6] + -1.001;
  if (v64 >= v63)
    v64 = (float)(v53 * 0.70711) + v62;
  if (v63 >= 0.0)
    v65 = v64;
  else
    v65 = 0.0;
  v66 = v60;
  v67 = v65;
  v68 = (v66 + 1);
  v69 = v54[11] + v55 * v67;
  v70 = v69 + v55;
  v71 = (float)v68 - v60;
  v72 = (float)(v67 + 1) - v65;
  *(float *)&v73 = v71 * v72;
  *(float *)&v74 = v60 - (float)v60;
  v75 = *(float *)&v74 * v72;
  v76 = v65 - (float)v65;
  v77 = v71 * v76;
  v78 = *(float *)&v74 * v76;
  LOBYTE(v74) = *(_BYTE *)(v69 + v66);
  v79 = *(float *)&v73 * (float)v74;
  LOBYTE(v73) = *(_BYTE *)(v69 + v68);
  *(float *)&v80 = v75 * (float)v73;
  v81 = v79 + *(float *)&v80;
  LOBYTE(v80) = *(_BYTE *)(v70 + v66);
  *(float *)&v82 = v77 * (float)v80;
  v83 = *(float *)&v82 + v81;
  LOBYTE(v82) = *(_BYTE *)(v70 + v68);
  v1239[16] = 0x3F3504F3BF000000;
  v1239[17] = LODWORD(v15) | ((unint64_t)(int)(float)((float)((float)(v78 * (float)v82) + v83)
                                                                         * 255.0) << 32);
  v84 = v54[5];
  v85 = v56 + v51;
  v86 = (float)(v56 + v51) + v59;
  v87 = (float)v54[4] + -1.001;
  if (v87 >= v86)
    v87 = v86;
  if (v86 >= 0.0)
    v88 = v87;
  else
    v88 = 0.0;
  v89 = v52 + v61;
  v90 = (float)(v53 * 0.70711) + (float)(v52 + v61);
  v91 = (float)v54[6] + -1.001;
  if (v91 >= v90)
    v91 = v90;
  if (v90 >= 0.0)
    v92 = v91;
  else
    v92 = 0.0;
  v93 = v88;
  v94 = v92;
  v95 = (v93 + 1);
  v96 = v54[11] + v84 * v94;
  v97 = v96 + v84;
  v98 = (float)v95 - v88;
  v99 = (float)(v94 + 1) - v92;
  *(float *)&v100 = v98 * v99;
  v101 = v88 - (float)v88;
  v102 = v101 * v99;
  *(float *)&v103 = v92 - (float)v92;
  v104 = v98 * *(float *)&v103;
  v105 = v101 * *(float *)&v103;
  LOBYTE(v103) = *(_BYTE *)(v96 + v93);
  v106 = *(float *)&v100 * (float)v103;
  LOBYTE(v100) = *(_BYTE *)(v96 + v95);
  *(float *)&v107 = v102 * (float)v100;
  v108 = v106 + *(float *)&v107;
  LOBYTE(v107) = *(_BYTE *)(v97 + v93);
  *(float *)&v109 = v104 * (float)v107;
  v110 = *(float *)&v109 + v108;
  LOBYTE(v109) = *(_BYTE *)(v97 + v95);
  v1239[18] = 0x3F3504F33F000000;
  v1239[19] = LODWORD(v15) | ((unint64_t)(int)(float)((float)((float)(v105 * (float)v109) + v110)
                                                                         * 255.0) << 32);
  v111 = v54[5];
  v112 = (float)(v53 + v51) + (float)(v58 * 0.0);
  v113 = (float)v54[4] + -1.001;
  if (v113 >= v112)
    v113 = (float)(v53 + v51) + (float)(v58 * 0.0);
  if (v112 >= 0.0)
    v114 = v113;
  else
    v114 = 0.0;
  v115 = v58 + (float)(v58 + v52);
  v116 = (float)v54[6] + -1.001;
  if (v116 >= v115)
    v116 = v58 + (float)(v58 + v52);
  if (v115 >= 0.0)
    v117 = v116;
  else
    v117 = 0.0;
  v118 = v114;
  v119 = v117;
  v120 = (v118 + 1);
  v121 = v54[11] + v111 * v119;
  v122 = v121 + v111;
  v123 = (float)v120 - v114;
  v124 = (float)(v119 + 1) - v117;
  *(float *)&v125 = v123 * v124;
  v126 = v114 - (float)v114;
  v127 = v126 * v124;
  *(float *)&v128 = v117 - (float)v117;
  v129 = v123 * *(float *)&v128;
  v130 = v126 * *(float *)&v128;
  LOBYTE(v128) = *(_BYTE *)(v121 + v118);
  v131 = *(float *)&v125 * (float)v128;
  LOBYTE(v125) = *(_BYTE *)(v121 + v120);
  *(float *)&v132 = v127 * (float)v125;
  v133 = v131 + *(float *)&v132;
  LOBYTE(v132) = *(_BYTE *)(v122 + v118);
  *(float *)&v134 = v129 * (float)v132;
  v135 = *(float *)&v134 + v133;
  LOBYTE(v134) = *(_BYTE *)(v122 + v120);
  v1239[20] = 1065353216;
  v1239[21] = LODWORD(v15) | ((unint64_t)(int)(float)((float)((float)(v130 * (float)v134) + v135)
                                                                         * 255.0) << 32);
  v136 = v54[5];
  v137 = v85 + (float)(v58 * -0.70711);
  v138 = (float)v54[4] + -1.001;
  if (v138 >= v137)
    v138 = v137;
  if (v137 < 0.0)
    v138 = 0.0;
  v139 = (float)(v53 * -0.70711) + v89;
  v140 = (float)v54[6] + -1.001;
  if (v140 >= v139)
    v140 = v139;
  if (v139 >= 0.0)
    v141 = v140;
  else
    v141 = 0.0;
  v142 = v138;
  v143 = v141;
  v144 = (v142 + 1);
  v145 = v54[11] + v136 * v143;
  v146 = v145 + v136;
  v147 = (float)v144 - v138;
  v148 = (float)(v143 + 1) - v141;
  *(float *)&v149 = v147 * v148;
  *(float *)&v150 = v138 - (float)v138;
  v151 = *(float *)&v150 * v148;
  v152 = v141 - (float)v141;
  v153 = v147 * v152;
  v154 = *(float *)&v150 * v152;
  LOBYTE(v150) = *(_BYTE *)(v145 + v142);
  v155 = *(float *)&v149 * (float)v150;
  LOBYTE(v149) = *(_BYTE *)(v145 + v144);
  *(float *)&v156 = (float)v149;
  v157 = v151 * *(float *)&v156;
  LOBYTE(v156) = *(_BYTE *)(v146 + v142);
  *(float *)&v158 = v155 + v157;
  v159 = (float)(v153 * (float)v156) + *(float *)&v158;
  LOBYTE(v158) = *(_BYTE *)(v146 + v144);
  v1239[22] = 0xBF3504F33F000000;
  v1239[23] = LODWORD(v15) | ((unint64_t)(int)(float)((float)((float)(v154 * (float)v158) + v159)
                                                                         * 255.0) << 32);
  v160 = v54[5];
  v161 = v57 + (float)(v58 * -0.70711);
  v162 = (float)v54[4] + -1.001;
  if (v162 >= v161)
    v162 = v161;
  if (v161 >= 0.0)
    v163 = v162;
  else
    v163 = 0.0;
  v164 = (float)(v53 * -0.70711) + v62;
  v165 = (float)v54[6] + -1.001;
  if (v165 >= v164)
    v165 = v164;
  if (v164 >= 0.0)
    v166 = v165;
  else
    v166 = 0.0;
  v167 = v163;
  v168 = v166;
  v169 = (v167 + 1);
  v170 = v54[11] + v160 * v168;
  v171 = v170 + v160;
  v172 = (float)v169 - v163;
  v173 = (float)(v168 + 1) - v166;
  *(float *)&v174 = v172 * v173;
  v175 = v163 - (float)v163;
  v176 = v175 * v173;
  *(float *)&v177 = v166 - (float)v166;
  v178 = v172 * *(float *)&v177;
  v179 = v175 * *(float *)&v177;
  LOBYTE(v177) = *(_BYTE *)(v170 + v167);
  v180 = *(float *)&v174 * (float)v177;
  LOBYTE(v174) = *(_BYTE *)(v170 + v169);
  *(float *)&v181 = v176 * (float)v174;
  v182 = v180 + *(float *)&v181;
  LOBYTE(v181) = *(_BYTE *)(v171 + v167);
  *(float *)&v183 = v178 * (float)v181;
  v184 = *(float *)&v183 + v182;
  LOBYTE(v183) = *(_BYTE *)(v171 + v169);
  v1239[24] = 0xBF3504F3BF000000;
  v1239[25] = LODWORD(v15) | ((unint64_t)(int)(float)((float)((float)(v179 * (float)v183) + v184)
                                                                         * 255.0) << 32);
  v185 = v54[11];
  v187 = v54[4];
  v186 = v54[5];
  v188 = v54[6];
  v189 = (float)(v51 - v53) + (float)(v58 * 0.0);
  v190 = (float)v187 + -1.001;
  if (v190 >= v189)
    v190 = v189;
  if (v189 >= 0.0)
    v191 = v190;
  else
    v191 = 0.0;
  v192 = v58 + (float)(v52 - v58);
  v193 = (float)v188 + -1.001;
  if (v193 >= v192)
    v193 = v192;
  v194 = v191;
  if (v192 >= 0.0)
    v23 = v193;
  v195 = v23;
  v196 = (v194 + 1);
  v197 = v185 + v186 * v195;
  v198 = v197 + v186;
  v199 = (float)v196 - v191;
  v200 = (float)(v195 + 1) - v23;
  *(float *)&v201 = v199 * v200;
  v202 = v191 - (float)v191;
  v203 = v202 * v200;
  *(float *)&v204 = (float)v23;
  v205 = v23 - *(float *)&v204;
  v206 = v199 * v205;
  LOBYTE(v204) = *(_BYTE *)(v197 + v194);
  v207 = v202 * v205;
  v208 = *(float *)&v201 * (float)v204;
  LOBYTE(v201) = *(_BYTE *)(v197 + v196);
  *(float *)&v209 = v203 * (float)v201;
  *(float *)&v210 = v208 + *(float *)&v209;
  LOBYTE(v209) = *(_BYTE *)(v198 + v194);
  v211 = (float)(v206 * (float)v209) + *(float *)&v210;
  LOBYTE(v210) = *(_BYTE *)(v198 + v196);
  v1239[26] = 3212836864;
  v1239[27] = LODWORD(v15) | ((unint64_t)(int)(float)((float)((float)(v207 * (float)v210) + v211)
                                                                         * 255.0) << 32);
  v212 = v15 * 1.4142;
  v213 = a6 * 1.4142;
  v214 = vcvtms_s32_f32((float)((float)((float)((float)((float)((float)((float)(COERCE_FLOAT(COERCE_UNSIGNED_INT(a6 * 1.4142) & 0x807FFFFF | 0x3F800000)* -0.33333)+ 2.0)* COERCE_FLOAT(COERCE_UNSIGNED_INT(a6 * 1.4142) & 0x807FFFFF | 0x3F800000))+ -1.6667)+ (float)((COERCE_UNSIGNED_INT(a6 * 1.4142) >> 23) - 127))* 0.69315)- v10)* v11);
  if (v214 < 0)
  {
    v215 = 0;
    v216 = 0;
  }
  else if ((int)v9 * v8 <= v214)
  {
    v215 = v8 - 1;
    v216 = v9 - 1;
  }
  else
  {
    v215 = v214 / (int)v9;
    v216 = v214 % (int)v9;
  }
  v217 = (float)(1 << v215);
  v218 = (float)(1.0 / v217) * a4;
  v219 = (float)(1.0 / v217) * a5;
  v220 = v212 / v217;
  v221 = (unint64_t *)(v20 + 144 * (v9 * v215 + v216));
  v222 = v221[5];
  v223 = 0.0;
  v224 = v220 * 0.0;
  v225 = (float)(v220 * 0.0) + v218;
  v226 = v225 - (float)(v220 * 0.0);
  v227 = (float)v221[4] + -1.001;
  if (v227 >= v226)
    v227 = v225 - (float)(v220 * 0.0);
  if (v226 >= 0.0)
    v228 = v227;
  else
    v228 = 0.0;
  v229 = v219 + (float)(v224 * 0.0);
  v230 = (float)v221[6] + -1.001;
  if (v230 >= (float)(v229 - v220))
    v230 = v229 - v220;
  if ((float)(v229 - v220) >= 0.0)
    v231 = v230;
  else
    v231 = 0.0;
  v232 = v228;
  v233 = v231;
  v234 = (v232 + 1);
  v235 = v221[11] + v222 * v233;
  v236 = v235 + v222;
  v237 = (float)v234 - v228;
  v238 = (float)(v233 + 1) - v231;
  *(float *)&v239 = v237 * v238;
  v240 = v228 - (float)v228;
  v241 = v240 * v238;
  *(float *)&v242 = v231 - (float)v231;
  v243 = v237 * *(float *)&v242;
  v244 = v240 * *(float *)&v242;
  LOBYTE(v242) = *(_BYTE *)(v235 + v232);
  v245 = *(float *)&v239 * (float)v242;
  LOBYTE(v239) = *(_BYTE *)(v235 + v234);
  *(float *)&v246 = v241 * (float)v239;
  v247 = v245 + *(float *)&v246;
  LOBYTE(v246) = *(_BYTE *)(v236 + v232);
  *(float *)&v248 = v243 * (float)v246;
  v249 = *(float *)&v248 + v247;
  LOBYTE(v248) = *(_BYTE *)(v236 + v234);
  v1239[32] = 0xBF80000000000000;
  v1239[33] = LODWORD(v212) | ((unint64_t)(int)(float)((float)((float)(v244 * (float)v248) + v249)
                                                                          * 255.0) << 32);
  v250 = v221[5];
  v251 = v220 * 0.70711;
  v252 = (float)(v220 * 0.70711) + v218;
  v253 = v224 * 0.5;
  v254 = v252 + (float)(v224 * 0.5);
  v255 = (float)v221[4] + -1.001;
  if (v255 >= v254)
    v255 = v252 + (float)(v224 * 0.5);
  if (v254 >= 0.0)
    v256 = v255;
  else
    v256 = 0.0;
  v257 = v224 * 0.70711;
  v258 = v220 * 0.5;
  v259 = (float)(v220 * 0.5) + (float)(v219 + (float)(v224 * 0.70711));
  v260 = (float)v221[6] + -1.001;
  if (v260 >= v259)
    v260 = v258 + (float)(v219 + v257);
  if (v259 >= 0.0)
    v261 = v260;
  else
    v261 = 0.0;
  v262 = v256;
  v263 = v261;
  v264 = (v262 + 1);
  v265 = v221[11] + v250 * v263;
  v266 = v265 + v250;
  v267 = (float)v264 - v256;
  v268 = (float)(v263 + 1) - v261;
  v269 = v267 * v268;
  v270 = v256 - (float)v256;
  v271 = v270 * v268;
  *(float *)&v272 = (float)v261;
  *(float *)&v273 = v261 - *(float *)&v272;
  v274 = v267 * *(float *)&v273;
  v275 = v270 * *(float *)&v273;
  LOBYTE(v273) = *(_BYTE *)(v265 + v262);
  LOBYTE(v272) = *(_BYTE *)(v265 + v264);
  *(float *)&v276 = v271 * (float)v272;
  v277 = (float)(v269 * (float)v273) + *(float *)&v276;
  LOBYTE(v276) = *(_BYTE *)(v266 + v262);
  *(float *)&v278 = v274 * (float)v276;
  v279 = *(float *)&v278 + v277;
  LOBYTE(v278) = *(_BYTE *)(v266 + v264);
  v1239[34] = 0x3F0000003F3504F3;
  v1239[35] = LODWORD(v212) | ((unint64_t)(int)(float)((float)((float)(v275 * (float)v278) + v279)
                                                                          * 255.0) << 32);
  v280 = v221[5];
  v281 = v224 * -0.5;
  v282 = v252 + (float)(v224 * -0.5);
  v283 = (float)v221[4] + -1.001;
  if (v283 >= v282)
    v283 = v282;
  if (v282 < 0.0)
    v283 = 0.0;
  v284 = v220 * -0.5;
  v285 = (float)(v220 * -0.5) + (float)(v219 + v257);
  v286 = (float)v221[6] + -1.001;
  if (v286 >= v285)
    v286 = (float)(v220 * -0.5) + (float)(v219 + v257);
  if (v285 >= 0.0)
    v287 = v286;
  else
    v287 = 0.0;
  v288 = v283;
  v289 = v287;
  v290 = (v288 + 1);
  v291 = v221[11] + v280 * v289;
  v292 = v291 + v280;
  v293 = (float)v290 - v283;
  v294 = (float)(v289 + 1) - v287;
  v295 = v293 * v294;
  *(float *)&v296 = v283 - (float)v283;
  v297 = *(float *)&v296 * v294;
  *(float *)&v298 = (float)v287;
  v299 = v287 - *(float *)&v298;
  v300 = v293 * v299;
  v301 = *(float *)&v296 * v299;
  LOBYTE(v296) = *(_BYTE *)(v291 + v288);
  LOBYTE(v298) = *(_BYTE *)(v291 + v290);
  *(float *)&v302 = v297 * (float)v298;
  *(float *)&v303 = (float)(v295 * (float)v296) + *(float *)&v302;
  LOBYTE(v302) = *(_BYTE *)(v292 + v288);
  v304 = (float)(v300 * (float)v302) + *(float *)&v303;
  LOBYTE(v303) = *(_BYTE *)(v292 + v290);
  v1239[36] = 0xBF0000003F3504F3;
  v1239[37] = LODWORD(v212) | ((unint64_t)(int)(float)((float)((float)(v301 * (float)v303) + v304)
                                                                          * 255.0) << 32);
  v305 = v221[5];
  v306 = v224 + v225;
  v307 = (float)v221[4] + -1.001;
  if (v307 >= v306)
    v307 = v306;
  if (v306 >= 0.0)
    v308 = v307;
  else
    v308 = 0.0;
  v309 = v220 + v229;
  v310 = (float)v221[6] + -1.001;
  if (v310 >= v309)
    v310 = v309;
  if (v309 >= 0.0)
    v311 = v310;
  else
    v311 = 0.0;
  v312 = v308;
  v313 = v311;
  v314 = (v312 + 1);
  v315 = v221[11] + v305 * v313;
  v316 = v315 + v305;
  v317 = (float)v314 - v308;
  v318 = (float)(v313 + 1) - v311;
  *(float *)&v319 = v317 * v318;
  *(float *)&v320 = v308 - (float)v308;
  v321 = *(float *)&v320 * v318;
  v322 = v311 - (float)v311;
  v323 = v317 * v322;
  v324 = *(float *)&v320 * v322;
  LOBYTE(v320) = *(_BYTE *)(v315 + v312);
  v325 = *(float *)&v319 * (float)v320;
  LOBYTE(v319) = *(_BYTE *)(v315 + v314);
  *(float *)&v326 = v321 * (float)v319;
  v327 = v325 + *(float *)&v326;
  LOBYTE(v326) = *(_BYTE *)(v316 + v312);
  *(float *)&v328 = v323 * (float)v326;
  v329 = *(float *)&v328 + v327;
  LOBYTE(v328) = *(_BYTE *)(v316 + v314);
  v1239[38] = 0x3F80000000000000;
  v1239[39] = LODWORD(v212) | ((unint64_t)(int)(float)((float)((float)(v324 * (float)v328) + v329)
                                                                          * 255.0) << 32);
  v330 = v221[5];
  v331 = v218 - v251;
  v332 = (float)v221[4] + -1.001;
  if (v332 >= (float)(v331 + v281))
    v332 = v331 + v281;
  if ((float)(v331 + v281) >= 0.0)
    v333 = v332;
  else
    v333 = 0.0;
  v334 = v219 - v257;
  v335 = (float)v221[6] + -1.001;
  if (v335 >= (float)(v284 + v334))
    v335 = v284 + v334;
  if ((float)(v284 + v334) >= 0.0)
    v336 = v335;
  else
    v336 = 0.0;
  v337 = v333;
  v338 = v336;
  v339 = (v337 + 1);
  v340 = v221[11] + v330 * v338;
  v341 = v340 + v330;
  v342 = (float)v339 - v333;
  v343 = (float)(v338 + 1) - v336;
  *(float *)&v344 = v342 * v343;
  v345 = v333 - (float)v333;
  v346 = v345 * v343;
  *(float *)&v347 = v336 - (float)v336;
  v348 = v342 * *(float *)&v347;
  v349 = v345 * *(float *)&v347;
  LOBYTE(v347) = *(_BYTE *)(v340 + v337);
  v350 = *(float *)&v344 * (float)v347;
  LOBYTE(v344) = *(_BYTE *)(v340 + v339);
  *(float *)&v351 = v346 * (float)v344;
  v352 = v350 + *(float *)&v351;
  LOBYTE(v351) = *(_BYTE *)(v341 + v337);
  *(float *)&v353 = v348 * (float)v351;
  v354 = *(float *)&v353 + v352;
  LOBYTE(v353) = *(_BYTE *)(v341 + v339);
  v1239[40] = 0xBF000000BF3504F3;
  v1239[41] = LODWORD(v212) | ((unint64_t)(int)(float)((float)((float)(v349 * (float)v353) + v354)
                                                                          * 255.0) << 32);
  v355 = v221[11];
  v357 = v221[4];
  v356 = v221[5];
  v358 = v221[6];
  v359 = v331 + v253;
  v360 = (float)v357 + -1.001;
  if (v360 >= v359)
    v360 = v359;
  if (v359 >= 0.0)
    v361 = v360;
  else
    v361 = 0.0;
  v362 = v258 + v334;
  v363 = (float)v358 + -1.001;
  if (v363 >= v362)
    v363 = v362;
  if (v362 >= 0.0)
    v364 = v363;
  else
    v364 = 0.0;
  v365 = v361;
  v366 = v364;
  v367 = (v365 + 1);
  v368 = v355 + v356 * v366;
  v369 = v368 + v356;
  v370 = (float)v367 - v361;
  v371 = (float)(v366 + 1) - v364;
  v372 = v370 * v371;
  *(float *)&v373 = v361 - (float)v361;
  v374 = *(float *)&v373 * v371;
  *(float *)&v375 = (float)v364;
  v376 = v364 - *(float *)&v375;
  v377 = v370 * v376;
  v378 = *(float *)&v373 * v376;
  LOBYTE(v373) = *(_BYTE *)(v368 + v365);
  LOBYTE(v375) = *(_BYTE *)(v368 + v367);
  *(float *)&v379 = v372 * (float)v373;
  *(float *)&v380 = *(float *)&v379 + (float)(v374 * (float)v375);
  LOBYTE(v379) = *(_BYTE *)(v369 + v365);
  v381 = (float)(v377 * (float)v379) + *(float *)&v380;
  LOBYTE(v380) = *(_BYTE *)(v369 + v367);
  v1239[42] = 0x3F000000BF3504F3;
  v1239[43] = LODWORD(v212) | ((unint64_t)(int)(float)((float)((float)(v378 * (float)v380) + v381)
                                                                          * 255.0) << 32);
  v382 = v212 * 1.4142;
  v383 = v213 * 1.4142;
  v384 = vcvtms_s32_f32((float)((float)((float)((float)((float)((float)((float)(COERCE_FLOAT(LODWORD(v383) & 0x807FFFFF | 0x3F800000)* -0.33333)+ 2.0)* COERCE_FLOAT(LODWORD(v383) & 0x807FFFFF | 0x3F800000))+ -1.6667)+ (float)((LODWORD(v383) >> 23) - 127))* 0.69315)- v10)* v11);
  if (v384 < 0)
  {
    v385 = 0;
    v386 = 0;
  }
  else if ((int)v9 * v8 <= v384)
  {
    v385 = v8 - 1;
    v386 = v9 - 1;
  }
  else
  {
    v385 = v384 / (int)v9;
    v386 = v384 % (int)v9;
  }
  v387 = (float)(1 << v385);
  v388 = (float)(1.0 / v387) * a4;
  v389 = (float)(1.0 / v387) * a5;
  v390 = v382 / v387;
  v391 = (unint64_t *)(v20 + 144 * (v9 * v385 + v386));
  v392 = v391[5];
  v393 = (float)(v382 / v387) * 0.5;
  v394 = v388 - v393;
  v395 = (float)(v382 / v387) * 0.0;
  v396 = v395 * 0.70711;
  v397 = (float)v391[4] + -1.001;
  if (v397 >= (float)((float)(v388 - v393) + (float)(v395 * 0.70711)))
    v397 = v394 + v396;
  if ((float)(v394 + v396) < 0.0)
    v397 = 0.0;
  v398 = v395 * 0.5;
  v399 = v389 - (float)(v395 * 0.5);
  v400 = (float)(v390 * 0.70711) + v399;
  v401 = (float)v391[6] + -1.001;
  if (v401 >= v400)
    v401 = (float)(v390 * 0.70711) + v399;
  if (v400 >= 0.0)
    v402 = v401;
  else
    v402 = 0.0;
  v403 = v397;
  v404 = v402;
  v405 = (v403 + 1);
  v406 = v391[11] + v392 * v404;
  v407 = v406 + v392;
  v408 = (float)v405 - v397;
  v409 = (float)(v404 + 1) - v402;
  *(float *)&v410 = v408 * v409;
  *(float *)&v411 = v397 - (float)v397;
  v412 = *(float *)&v411 * v409;
  v413 = v402 - (float)v402;
  v414 = v408 * v413;
  v415 = *(float *)&v411 * v413;
  LOBYTE(v411) = *(_BYTE *)(v406 + v403);
  v416 = *(float *)&v410 * (float)v411;
  LOBYTE(v410) = *(_BYTE *)(v406 + v405);
  *(float *)&v417 = v412 * (float)v410;
  v418 = v416 + *(float *)&v417;
  LOBYTE(v417) = *(_BYTE *)(v407 + v403);
  *(float *)&v419 = v414 * (float)v417;
  v420 = *(float *)&v419 + v418;
  LOBYTE(v419) = *(_BYTE *)(v407 + v405);
  v1239[48] = 0x3F3504F3BF000000;
  v1239[49] = LODWORD(v382) | ((unint64_t)(int)(float)((float)((float)(v415 * (float)v419) + v420)
                                                                          * 255.0) << 32);
  v421 = v391[5];
  v422 = v393 + v388;
  v423 = (float)(v393 + v388) + v396;
  v424 = (float)v391[4] + -1.001;
  if (v424 >= v423)
    v424 = v423;
  if (v423 >= 0.0)
    v425 = v424;
  else
    v425 = 0.0;
  v426 = v389 + v398;
  v427 = (float)(v390 * 0.70711) + (float)(v389 + v398);
  v428 = (float)v391[6] + -1.001;
  if (v428 >= v427)
    v428 = v427;
  if (v427 >= 0.0)
    v429 = v428;
  else
    v429 = 0.0;
  v430 = v425;
  v431 = v429;
  v432 = (v430 + 1);
  v433 = v391[11] + v421 * v431;
  v434 = v433 + v421;
  v435 = (float)v432 - v425;
  v436 = (float)(v431 + 1) - v429;
  *(float *)&v437 = v435 * v436;
  v438 = v425 - (float)v425;
  v439 = v438 * v436;
  *(float *)&v440 = v429 - (float)v429;
  v441 = v435 * *(float *)&v440;
  v442 = v438 * *(float *)&v440;
  LOBYTE(v440) = *(_BYTE *)(v433 + v430);
  v443 = *(float *)&v437 * (float)v440;
  LOBYTE(v437) = *(_BYTE *)(v433 + v432);
  *(float *)&v444 = v439 * (float)v437;
  v445 = v443 + *(float *)&v444;
  LOBYTE(v444) = *(_BYTE *)(v434 + v430);
  *(float *)&v446 = v441 * (float)v444;
  v447 = *(float *)&v446 + v445;
  LOBYTE(v446) = *(_BYTE *)(v434 + v432);
  v1239[50] = 0x3F3504F33F000000;
  v1239[51] = LODWORD(v382) | ((unint64_t)(int)(float)((float)((float)(v442 * (float)v446) + v447)
                                                                          * 255.0) << 32);
  v448 = v391[5];
  v449 = (float)(v390 + v388) + (float)(v395 * 0.0);
  v450 = (float)v391[4] + -1.001;
  if (v450 >= v449)
    v450 = (float)(v390 + v388) + (float)(v395 * 0.0);
  if (v449 >= 0.0)
    v451 = v450;
  else
    v451 = 0.0;
  v452 = v395 + (float)(v395 + v389);
  v453 = (float)v391[6] + -1.001;
  if (v453 >= v452)
    v453 = v395 + (float)(v395 + v389);
  if (v452 >= 0.0)
    v454 = v453;
  else
    v454 = 0.0;
  v455 = v451;
  v456 = v454;
  v457 = (v455 + 1);
  v458 = v391[11] + v448 * v456;
  v459 = v458 + v448;
  v460 = (float)v457 - v451;
  v461 = (float)(v456 + 1) - v454;
  *(float *)&v462 = v460 * v461;
  v463 = v451 - (float)v451;
  v464 = v463 * v461;
  *(float *)&v465 = v454 - (float)v454;
  v466 = v460 * *(float *)&v465;
  v467 = v463 * *(float *)&v465;
  LOBYTE(v465) = *(_BYTE *)(v458 + v455);
  v468 = *(float *)&v462 * (float)v465;
  LOBYTE(v462) = *(_BYTE *)(v458 + v457);
  *(float *)&v469 = v464 * (float)v462;
  v470 = v468 + *(float *)&v469;
  LOBYTE(v469) = *(_BYTE *)(v459 + v455);
  *(float *)&v471 = v466 * (float)v469;
  v472 = *(float *)&v471 + v470;
  LOBYTE(v471) = *(_BYTE *)(v459 + v457);
  v1239[52] = 1065353216;
  v1239[53] = LODWORD(v382) | ((unint64_t)(int)(float)((float)((float)(v467 * (float)v471) + v472)
                                                                          * 255.0) << 32);
  v473 = v391[5];
  v474 = v422 + (float)(v395 * -0.70711);
  v475 = (float)v391[4] + -1.001;
  if (v475 >= v474)
    v475 = v474;
  if (v474 < 0.0)
    v475 = 0.0;
  v476 = (float)(v390 * -0.70711) + v426;
  v477 = (float)v391[6] + -1.001;
  if (v477 >= v476)
    v477 = v476;
  if (v476 >= 0.0)
    v478 = v477;
  else
    v478 = 0.0;
  v479 = v475;
  v480 = v478;
  v481 = (v479 + 1);
  v482 = v391[11] + v473 * v480;
  v483 = v482 + v473;
  v484 = (float)v481 - v475;
  v485 = (float)(v480 + 1) - v478;
  *(float *)&v486 = v484 * v485;
  *(float *)&v487 = v475 - (float)v475;
  v488 = *(float *)&v487 * v485;
  v489 = v478 - (float)v478;
  v490 = v484 * v489;
  v491 = *(float *)&v487 * v489;
  LOBYTE(v487) = *(_BYTE *)(v482 + v479);
  v492 = *(float *)&v486 * (float)v487;
  LOBYTE(v486) = *(_BYTE *)(v482 + v481);
  *(float *)&v493 = (float)v486;
  v494 = v488 * *(float *)&v493;
  LOBYTE(v493) = *(_BYTE *)(v483 + v479);
  *(float *)&v495 = v492 + v494;
  v496 = (float)(v490 * (float)v493) + *(float *)&v495;
  LOBYTE(v495) = *(_BYTE *)(v483 + v481);
  v1239[54] = 0xBF3504F33F000000;
  v1239[55] = LODWORD(v382) | ((unint64_t)(int)(float)((float)((float)(v491 * (float)v495) + v496)
                                                                          * 255.0) << 32);
  v497 = v391[5];
  v498 = v394 + (float)(v395 * -0.70711);
  v499 = (float)v391[4] + -1.001;
  if (v499 >= v498)
    v499 = v498;
  if (v498 >= 0.0)
    v500 = v499;
  else
    v500 = 0.0;
  v501 = (float)(v390 * -0.70711) + v399;
  v502 = (float)v391[6] + -1.001;
  if (v502 >= v501)
    v502 = v501;
  if (v501 >= 0.0)
    v503 = v502;
  else
    v503 = 0.0;
  v504 = v500;
  v505 = v503;
  v506 = (v504 + 1);
  v507 = v391[11] + v497 * v505;
  v508 = v507 + v497;
  v509 = (float)v506 - v500;
  v510 = (float)(v505 + 1) - v503;
  *(float *)&v511 = v509 * v510;
  v512 = v500 - (float)v500;
  v513 = v512 * v510;
  *(float *)&v514 = v503 - (float)v503;
  v515 = v509 * *(float *)&v514;
  v516 = v512 * *(float *)&v514;
  LOBYTE(v514) = *(_BYTE *)(v507 + v504);
  v517 = *(float *)&v511 * (float)v514;
  LOBYTE(v511) = *(_BYTE *)(v507 + v506);
  *(float *)&v518 = v513 * (float)v511;
  v519 = v517 + *(float *)&v518;
  LOBYTE(v518) = *(_BYTE *)(v508 + v504);
  *(float *)&v520 = v515 * (float)v518;
  v521 = *(float *)&v520 + v519;
  LOBYTE(v520) = *(_BYTE *)(v508 + v506);
  v1239[56] = 0xBF3504F3BF000000;
  v1239[57] = LODWORD(v382) | ((unint64_t)(int)(float)((float)((float)(v516 * (float)v520) + v521)
                                                                          * 255.0) << 32);
  v522 = v391[11];
  v524 = v391[4];
  v523 = v391[5];
  v525 = v391[6];
  v526 = (float)(v388 - v390) + (float)(v395 * 0.0);
  v527 = (float)v524 + -1.001;
  if (v527 >= v526)
    v527 = v526;
  if (v526 >= 0.0)
    v528 = v527;
  else
    v528 = 0.0;
  v529 = v395 + (float)(v389 - v395);
  v530 = (float)v525 + -1.001;
  if (v530 >= v529)
    v530 = v529;
  v531 = v528;
  if (v529 >= 0.0)
    v223 = v530;
  v532 = v223;
  v533 = (v531 + 1);
  v534 = v522 + v523 * v532;
  v535 = v534 + v523;
  v536 = (float)v533 - v528;
  v537 = (float)(v532 + 1) - v223;
  *(float *)&v538 = v536 * v537;
  v539 = v528 - (float)v528;
  v540 = v539 * v537;
  *(float *)&v541 = (float)v223;
  v542 = v223 - *(float *)&v541;
  v543 = v536 * v542;
  LOBYTE(v541) = *(_BYTE *)(v534 + v531);
  v544 = v539 * v542;
  v545 = *(float *)&v538 * (float)v541;
  LOBYTE(v538) = *(_BYTE *)(v534 + v533);
  *(float *)&v546 = v540 * (float)v538;
  *(float *)&v547 = v545 + *(float *)&v546;
  LOBYTE(v546) = *(_BYTE *)(v535 + v531);
  v548 = (float)(v543 * (float)v546) + *(float *)&v547;
  LOBYTE(v547) = *(_BYTE *)(v535 + v533);
  v1239[58] = 3212836864;
  v1239[59] = LODWORD(v382) | ((unint64_t)(int)(float)((float)((float)(v544 * (float)v547) + v548)
                                                                          * 255.0) << 32);
  v549 = v382 * 1.4142;
  v550 = v383 * 1.4142;
  v551 = vcvtms_s32_f32((float)((float)((float)((float)((float)((float)((float)(COERCE_FLOAT(LODWORD(v550) & 0x807FFFFF | 0x3F800000)* -0.33333)+ 2.0)* COERCE_FLOAT(LODWORD(v550) & 0x807FFFFF | 0x3F800000))+ -1.6667)+ (float)((LODWORD(v550) >> 23) - 127))* 0.69315)- v10)* v11);
  if (v551 < 0)
  {
    v552 = 0;
    v553 = 0;
  }
  else if ((int)v9 * v8 <= v551)
  {
    v552 = v8 - 1;
    v553 = v9 - 1;
  }
  else
  {
    v552 = v551 / (int)v9;
    v553 = v551 % (int)v9;
  }
  v554 = (float)(1 << v552);
  v555 = (float)(1.0 / v554) * a4;
  v556 = (float)(1.0 / v554) * a5;
  v557 = v549 / v554;
  v558 = (unint64_t *)(v20 + 144 * (v9 * v552 + v553));
  v559 = v558[5];
  v560 = 0.0;
  v561 = v557 * 0.0;
  v562 = (float)(v557 * 0.0) + v555;
  v563 = v562 - (float)(v557 * 0.0);
  v564 = (float)v558[4] + -1.001;
  if (v564 >= v563)
    v564 = v562 - (float)(v557 * 0.0);
  if (v563 >= 0.0)
    v565 = v564;
  else
    v565 = 0.0;
  v566 = v556 + (float)(v561 * 0.0);
  v567 = (float)v558[6] + -1.001;
  if (v567 >= (float)(v566 - v557))
    v567 = v566 - v557;
  if ((float)(v566 - v557) >= 0.0)
    v568 = v567;
  else
    v568 = 0.0;
  v569 = v565;
  v570 = v568;
  v571 = (v569 + 1);
  v572 = v558[11] + v559 * v570;
  v573 = v572 + v559;
  v574 = (float)v571 - v565;
  v575 = (float)(v570 + 1) - v568;
  *(float *)&v576 = v574 * v575;
  v577 = v565 - (float)v565;
  v578 = v577 * v575;
  *(float *)&v579 = v568 - (float)v568;
  v580 = v574 * *(float *)&v579;
  v581 = v577 * *(float *)&v579;
  LOBYTE(v579) = *(_BYTE *)(v572 + v569);
  v582 = *(float *)&v576 * (float)v579;
  LOBYTE(v576) = *(_BYTE *)(v572 + v571);
  *(float *)&v583 = v578 * (float)v576;
  v584 = v582 + *(float *)&v583;
  LOBYTE(v583) = *(_BYTE *)(v573 + v569);
  *(float *)&v585 = v580 * (float)v583;
  v586 = *(float *)&v585 + v584;
  LOBYTE(v585) = *(_BYTE *)(v573 + v571);
  v1239[64] = 0xBF80000000000000;
  v1239[65] = LODWORD(v549) | ((unint64_t)(int)(float)((float)((float)(v581 * (float)v585) + v586)
                                                                          * 255.0) << 32);
  v587 = v558[5];
  v588 = v557 * 0.70711;
  v589 = (float)(v557 * 0.70711) + v555;
  v590 = v561 * 0.5;
  v591 = v589 + (float)(v561 * 0.5);
  v592 = (float)v558[4] + -1.001;
  if (v592 >= v591)
    v592 = v589 + (float)(v561 * 0.5);
  if (v591 >= 0.0)
    v593 = v592;
  else
    v593 = 0.0;
  v594 = v561 * 0.70711;
  v595 = v557 * 0.5;
  v596 = (float)(v557 * 0.5) + (float)(v556 + (float)(v561 * 0.70711));
  v597 = (float)v558[6] + -1.001;
  if (v597 >= v596)
    v597 = v595 + (float)(v556 + v594);
  if (v596 >= 0.0)
    v598 = v597;
  else
    v598 = 0.0;
  v599 = v593;
  v600 = v598;
  v601 = (v599 + 1);
  v602 = v558[11] + v587 * v600;
  v603 = v602 + v587;
  v604 = (float)v601 - v593;
  v605 = (float)(v600 + 1) - v598;
  v606 = v604 * v605;
  v607 = v593 - (float)v593;
  v608 = v607 * v605;
  *(float *)&v609 = (float)v598;
  *(float *)&v610 = v598 - *(float *)&v609;
  v611 = v604 * *(float *)&v610;
  v612 = v607 * *(float *)&v610;
  LOBYTE(v610) = *(_BYTE *)(v602 + v599);
  LOBYTE(v609) = *(_BYTE *)(v602 + v601);
  *(float *)&v613 = v608 * (float)v609;
  v614 = (float)(v606 * (float)v610) + *(float *)&v613;
  LOBYTE(v613) = *(_BYTE *)(v603 + v599);
  *(float *)&v615 = v611 * (float)v613;
  v616 = *(float *)&v615 + v614;
  LOBYTE(v615) = *(_BYTE *)(v603 + v601);
  v1239[66] = 0x3F0000003F3504F3;
  v1239[67] = LODWORD(v549) | ((unint64_t)(int)(float)((float)((float)(v612 * (float)v615) + v616)
                                                                          * 255.0) << 32);
  v617 = v558[5];
  v618 = v561 * -0.5;
  v619 = v589 + (float)(v561 * -0.5);
  v620 = (float)v558[4] + -1.001;
  if (v620 >= v619)
    v620 = v619;
  if (v619 < 0.0)
    v620 = 0.0;
  v621 = v557 * -0.5;
  v622 = (float)(v557 * -0.5) + (float)(v556 + v594);
  v623 = (float)v558[6] + -1.001;
  if (v623 >= v622)
    v623 = (float)(v557 * -0.5) + (float)(v556 + v594);
  if (v622 >= 0.0)
    v624 = v623;
  else
    v624 = 0.0;
  v625 = v620;
  v626 = v624;
  v627 = (v625 + 1);
  v628 = v558[11] + v617 * v626;
  v629 = v628 + v617;
  v630 = (float)v627 - v620;
  v631 = (float)(v626 + 1) - v624;
  v632 = v630 * v631;
  *(float *)&v633 = v620 - (float)v620;
  v634 = *(float *)&v633 * v631;
  *(float *)&v635 = (float)v624;
  v636 = v624 - *(float *)&v635;
  v637 = v630 * v636;
  v638 = *(float *)&v633 * v636;
  LOBYTE(v633) = *(_BYTE *)(v628 + v625);
  LOBYTE(v635) = *(_BYTE *)(v628 + v627);
  *(float *)&v639 = v634 * (float)v635;
  *(float *)&v640 = (float)(v632 * (float)v633) + *(float *)&v639;
  LOBYTE(v639) = *(_BYTE *)(v629 + v625);
  v641 = (float)(v637 * (float)v639) + *(float *)&v640;
  LOBYTE(v640) = *(_BYTE *)(v629 + v627);
  v1239[68] = 0xBF0000003F3504F3;
  v1239[69] = LODWORD(v549) | ((unint64_t)(int)(float)((float)((float)(v638 * (float)v640) + v641)
                                                                          * 255.0) << 32);
  v642 = v558[5];
  v643 = v561 + v562;
  v644 = (float)v558[4] + -1.001;
  if (v644 >= v643)
    v644 = v643;
  if (v643 >= 0.0)
    v645 = v644;
  else
    v645 = 0.0;
  v646 = v557 + v566;
  v647 = (float)v558[6] + -1.001;
  if (v647 >= v646)
    v647 = v646;
  if (v646 >= 0.0)
    v648 = v647;
  else
    v648 = 0.0;
  v649 = v645;
  v650 = v648;
  v651 = (v649 + 1);
  v652 = v558[11] + v642 * v650;
  v653 = v652 + v642;
  v654 = (float)v651 - v645;
  v655 = (float)(v650 + 1) - v648;
  *(float *)&v656 = v654 * v655;
  *(float *)&v657 = v645 - (float)v645;
  v658 = *(float *)&v657 * v655;
  v659 = v648 - (float)v648;
  v660 = v654 * v659;
  v661 = *(float *)&v657 * v659;
  LOBYTE(v657) = *(_BYTE *)(v652 + v649);
  v662 = *(float *)&v656 * (float)v657;
  LOBYTE(v656) = *(_BYTE *)(v652 + v651);
  *(float *)&v663 = v658 * (float)v656;
  v664 = v662 + *(float *)&v663;
  LOBYTE(v663) = *(_BYTE *)(v653 + v649);
  *(float *)&v665 = v660 * (float)v663;
  v666 = *(float *)&v665 + v664;
  LOBYTE(v665) = *(_BYTE *)(v653 + v651);
  v1239[70] = 0x3F80000000000000;
  v1239[71] = LODWORD(v549) | ((unint64_t)(int)(float)((float)((float)(v661 * (float)v665) + v666)
                                                                          * 255.0) << 32);
  v667 = v558[5];
  v668 = v555 - v588;
  v669 = (float)v558[4] + -1.001;
  if (v669 >= (float)(v668 + v618))
    v669 = v668 + v618;
  if ((float)(v668 + v618) >= 0.0)
    v670 = v669;
  else
    v670 = 0.0;
  v671 = v556 - v594;
  v672 = (float)v558[6] + -1.001;
  if (v672 >= (float)(v621 + v671))
    v672 = v621 + v671;
  if ((float)(v621 + v671) >= 0.0)
    v673 = v672;
  else
    v673 = 0.0;
  v674 = v670;
  v675 = v673;
  v676 = (v674 + 1);
  v677 = v558[11] + v667 * v675;
  v678 = v677 + v667;
  v679 = (float)v676 - v670;
  v680 = (float)(v675 + 1) - v673;
  *(float *)&v681 = v679 * v680;
  v682 = v670 - (float)v670;
  v683 = v682 * v680;
  *(float *)&v684 = v673 - (float)v673;
  v685 = v679 * *(float *)&v684;
  v686 = v682 * *(float *)&v684;
  LOBYTE(v684) = *(_BYTE *)(v677 + v674);
  v687 = *(float *)&v681 * (float)v684;
  LOBYTE(v681) = *(_BYTE *)(v677 + v676);
  *(float *)&v688 = v683 * (float)v681;
  v689 = v687 + *(float *)&v688;
  LOBYTE(v688) = *(_BYTE *)(v678 + v674);
  *(float *)&v690 = v685 * (float)v688;
  v691 = *(float *)&v690 + v689;
  LOBYTE(v690) = *(_BYTE *)(v678 + v676);
  v1239[72] = 0xBF000000BF3504F3;
  v1239[73] = LODWORD(v549) | ((unint64_t)(int)(float)((float)((float)(v686 * (float)v690) + v691)
                                                                          * 255.0) << 32);
  v692 = v558[11];
  v694 = v558[4];
  v693 = v558[5];
  v695 = v558[6];
  v696 = v668 + v590;
  v697 = (float)v694 + -1.001;
  if (v697 >= v696)
    v697 = v696;
  if (v696 >= 0.0)
    v698 = v697;
  else
    v698 = 0.0;
  v699 = v595 + v671;
  v700 = (float)v695 + -1.001;
  if (v700 >= v699)
    v700 = v699;
  if (v699 >= 0.0)
    v701 = v700;
  else
    v701 = 0.0;
  v702 = v698;
  v703 = v701;
  v704 = (v702 + 1);
  v705 = v692 + v693 * v703;
  v706 = v705 + v693;
  v707 = (float)v704 - v698;
  v708 = (float)(v703 + 1) - v701;
  v709 = v707 * v708;
  *(float *)&v710 = v698 - (float)v698;
  v711 = *(float *)&v710 * v708;
  *(float *)&v712 = (float)v701;
  v713 = v701 - *(float *)&v712;
  v714 = v707 * v713;
  v715 = *(float *)&v710 * v713;
  LOBYTE(v710) = *(_BYTE *)(v705 + v702);
  LOBYTE(v712) = *(_BYTE *)(v705 + v704);
  *(float *)&v716 = v709 * (float)v710;
  *(float *)&v717 = *(float *)&v716 + (float)(v711 * (float)v712);
  LOBYTE(v716) = *(_BYTE *)(v706 + v702);
  v718 = (float)(v714 * (float)v716) + *(float *)&v717;
  LOBYTE(v717) = *(_BYTE *)(v706 + v704);
  v1239[74] = 0x3F000000BF3504F3;
  v1239[75] = LODWORD(v549) | ((unint64_t)(int)(float)((float)((float)(v715 * (float)v717) + v718)
                                                                          * 255.0) << 32);
  v719 = v549 * 1.4142;
  v720 = v550 * 1.4142;
  v721 = vcvtms_s32_f32((float)((float)((float)((float)((float)((float)((float)(COERCE_FLOAT(LODWORD(v720) & 0x807FFFFF | 0x3F800000)* -0.33333)+ 2.0)* COERCE_FLOAT(LODWORD(v720) & 0x807FFFFF | 0x3F800000))+ -1.6667)+ (float)((LODWORD(v720) >> 23) - 127))* 0.69315)- v10)* v11);
  if (v721 < 0)
  {
    v722 = 0;
    v723 = 0;
  }
  else if ((int)v9 * v8 <= v721)
  {
    v722 = v8 - 1;
    v723 = v9 - 1;
  }
  else
  {
    v722 = v721 / (int)v9;
    v723 = v721 % (int)v9;
  }
  v724 = (float)(1 << v722);
  v725 = (float)(1.0 / v724) * a4;
  v726 = (float)(1.0 / v724) * a5;
  v727 = v719 / v724;
  v728 = (unint64_t *)(v20 + 144 * (v9 * v722 + v723));
  v729 = v728[5];
  v730 = (float)(v719 / v724) * 0.5;
  v731 = v725 - v730;
  v732 = (float)(v719 / v724) * 0.0;
  v733 = v732 * 0.70711;
  v734 = (float)v728[4] + -1.001;
  if (v734 >= (float)((float)(v725 - v730) + (float)(v732 * 0.70711)))
    v734 = v731 + v733;
  if ((float)(v731 + v733) < 0.0)
    v734 = 0.0;
  v735 = v732 * 0.5;
  v736 = v726 - (float)(v732 * 0.5);
  v737 = (float)(v727 * 0.70711) + v736;
  v738 = (float)v728[6] + -1.001;
  if (v738 >= v737)
    v738 = (float)(v727 * 0.70711) + v736;
  if (v737 >= 0.0)
    v739 = v738;
  else
    v739 = 0.0;
  v740 = v734;
  v741 = v739;
  v742 = (v740 + 1);
  v743 = v728[11] + v729 * v741;
  v744 = v743 + v729;
  v745 = (float)v742 - v734;
  v746 = (float)(v741 + 1) - v739;
  *(float *)&v747 = v745 * v746;
  *(float *)&v748 = v734 - (float)v734;
  v749 = *(float *)&v748 * v746;
  v750 = v739 - (float)v739;
  v751 = v745 * v750;
  v752 = *(float *)&v748 * v750;
  LOBYTE(v748) = *(_BYTE *)(v743 + v740);
  v753 = *(float *)&v747 * (float)v748;
  LOBYTE(v747) = *(_BYTE *)(v743 + v742);
  *(float *)&v754 = v749 * (float)v747;
  v755 = v753 + *(float *)&v754;
  LOBYTE(v754) = *(_BYTE *)(v744 + v740);
  *(float *)&v756 = v751 * (float)v754;
  v757 = *(float *)&v756 + v755;
  LOBYTE(v756) = *(_BYTE *)(v744 + v742);
  v1239[80] = 0x3F3504F3BF000000;
  v1239[81] = LODWORD(v719) | ((unint64_t)(int)(float)((float)((float)(v752 * (float)v756) + v757)
                                                                          * 255.0) << 32);
  v758 = v728[5];
  v759 = v730 + v725;
  v760 = (float)(v730 + v725) + v733;
  v761 = (float)v728[4] + -1.001;
  if (v761 >= v760)
    v761 = v760;
  if (v760 >= 0.0)
    v762 = v761;
  else
    v762 = 0.0;
  v763 = v726 + v735;
  v764 = (float)(v727 * 0.70711) + (float)(v726 + v735);
  v765 = (float)v728[6] + -1.001;
  if (v765 >= v764)
    v765 = v764;
  if (v764 >= 0.0)
    v766 = v765;
  else
    v766 = 0.0;
  v767 = v762;
  v768 = v766;
  v769 = (v767 + 1);
  v770 = v728[11] + v758 * v768;
  v771 = v770 + v758;
  v772 = (float)v769 - v762;
  v773 = (float)(v768 + 1) - v766;
  *(float *)&v774 = v772 * v773;
  v775 = v762 - (float)v762;
  v776 = v775 * v773;
  *(float *)&v777 = v766 - (float)v766;
  v778 = v772 * *(float *)&v777;
  v779 = v775 * *(float *)&v777;
  LOBYTE(v777) = *(_BYTE *)(v770 + v767);
  v780 = *(float *)&v774 * (float)v777;
  LOBYTE(v774) = *(_BYTE *)(v770 + v769);
  *(float *)&v781 = v776 * (float)v774;
  v782 = v780 + *(float *)&v781;
  LOBYTE(v781) = *(_BYTE *)(v771 + v767);
  *(float *)&v783 = v778 * (float)v781;
  v784 = *(float *)&v783 + v782;
  LOBYTE(v783) = *(_BYTE *)(v771 + v769);
  v1239[82] = 0x3F3504F33F000000;
  v1239[83] = LODWORD(v719) | ((unint64_t)(int)(float)((float)((float)(v779 * (float)v783) + v784)
                                                                          * 255.0) << 32);
  v785 = v728[5];
  v786 = (float)(v727 + v725) + (float)(v732 * 0.0);
  v787 = (float)v728[4] + -1.001;
  if (v787 >= v786)
    v787 = (float)(v727 + v725) + (float)(v732 * 0.0);
  if (v786 >= 0.0)
    v788 = v787;
  else
    v788 = 0.0;
  v789 = v732 + (float)(v732 + v726);
  v790 = (float)v728[6] + -1.001;
  if (v790 >= v789)
    v790 = v732 + (float)(v732 + v726);
  if (v789 >= 0.0)
    v791 = v790;
  else
    v791 = 0.0;
  v792 = v788;
  v793 = v791;
  v794 = (v792 + 1);
  v795 = v728[11] + v785 * v793;
  v796 = v795 + v785;
  v797 = (float)v794 - v788;
  v798 = (float)(v793 + 1) - v791;
  *(float *)&v799 = v797 * v798;
  v800 = v788 - (float)v788;
  v801 = v800 * v798;
  *(float *)&v802 = v791 - (float)v791;
  v803 = v797 * *(float *)&v802;
  v804 = v800 * *(float *)&v802;
  LOBYTE(v802) = *(_BYTE *)(v795 + v792);
  v805 = *(float *)&v799 * (float)v802;
  LOBYTE(v799) = *(_BYTE *)(v795 + v794);
  *(float *)&v806 = v801 * (float)v799;
  v807 = v805 + *(float *)&v806;
  LOBYTE(v806) = *(_BYTE *)(v796 + v792);
  *(float *)&v808 = v803 * (float)v806;
  v809 = *(float *)&v808 + v807;
  LOBYTE(v808) = *(_BYTE *)(v796 + v794);
  v1239[84] = 1065353216;
  v1239[85] = LODWORD(v719) | ((unint64_t)(int)(float)((float)((float)(v804 * (float)v808) + v809)
                                                                          * 255.0) << 32);
  v810 = v728[5];
  v811 = v759 + (float)(v732 * -0.70711);
  v812 = (float)v728[4] + -1.001;
  if (v812 >= v811)
    v812 = v811;
  if (v811 < 0.0)
    v812 = 0.0;
  v813 = (float)(v727 * -0.70711) + v763;
  v814 = (float)v728[6] + -1.001;
  if (v814 >= v813)
    v814 = v813;
  if (v813 >= 0.0)
    v815 = v814;
  else
    v815 = 0.0;
  v816 = v812;
  v817 = v815;
  v818 = (v816 + 1);
  v819 = v728[11] + v810 * v817;
  v820 = v819 + v810;
  v821 = (float)v818 - v812;
  v822 = (float)(v817 + 1) - v815;
  *(float *)&v823 = v821 * v822;
  *(float *)&v824 = v812 - (float)v812;
  v825 = *(float *)&v824 * v822;
  v826 = v815 - (float)v815;
  v827 = v821 * v826;
  v828 = *(float *)&v824 * v826;
  LOBYTE(v824) = *(_BYTE *)(v819 + v816);
  v829 = *(float *)&v823 * (float)v824;
  LOBYTE(v823) = *(_BYTE *)(v819 + v818);
  *(float *)&v830 = (float)v823;
  v831 = v825 * *(float *)&v830;
  LOBYTE(v830) = *(_BYTE *)(v820 + v816);
  *(float *)&v832 = v829 + v831;
  v833 = (float)(v827 * (float)v830) + *(float *)&v832;
  LOBYTE(v832) = *(_BYTE *)(v820 + v818);
  v1239[86] = 0xBF3504F33F000000;
  v1239[87] = LODWORD(v719) | ((unint64_t)(int)(float)((float)((float)(v828 * (float)v832) + v833)
                                                                          * 255.0) << 32);
  v834 = v728[5];
  v835 = v731 + (float)(v732 * -0.70711);
  v836 = (float)v728[4] + -1.001;
  if (v836 >= v835)
    v836 = v835;
  if (v835 >= 0.0)
    v837 = v836;
  else
    v837 = 0.0;
  v838 = (float)(v727 * -0.70711) + v736;
  v839 = (float)v728[6] + -1.001;
  if (v839 >= v838)
    v839 = v838;
  if (v838 >= 0.0)
    v840 = v839;
  else
    v840 = 0.0;
  v841 = v837;
  v842 = v840;
  v843 = (v841 + 1);
  v844 = v728[11] + v834 * v842;
  v845 = v844 + v834;
  v846 = (float)v843 - v837;
  v847 = (float)(v842 + 1) - v840;
  *(float *)&v848 = v846 * v847;
  v849 = v837 - (float)v837;
  v850 = v849 * v847;
  *(float *)&v851 = v840 - (float)v840;
  v852 = v846 * *(float *)&v851;
  v853 = v849 * *(float *)&v851;
  LOBYTE(v851) = *(_BYTE *)(v844 + v841);
  v854 = *(float *)&v848 * (float)v851;
  LOBYTE(v848) = *(_BYTE *)(v844 + v843);
  *(float *)&v855 = v850 * (float)v848;
  v856 = v854 + *(float *)&v855;
  LOBYTE(v855) = *(_BYTE *)(v845 + v841);
  *(float *)&v857 = v852 * (float)v855;
  v858 = *(float *)&v857 + v856;
  LOBYTE(v857) = *(_BYTE *)(v845 + v843);
  v1239[88] = 0xBF3504F3BF000000;
  v1239[89] = LODWORD(v719) | ((unint64_t)(int)(float)((float)((float)(v853 * (float)v857) + v858)
                                                                          * 255.0) << 32);
  v859 = v728[11];
  v861 = v728[4];
  v860 = v728[5];
  v862 = v728[6];
  v863 = (float)(v725 - v727) + (float)(v732 * 0.0);
  v864 = (float)v861 + -1.001;
  if (v864 >= v863)
    v864 = v863;
  if (v863 >= 0.0)
    v865 = v864;
  else
    v865 = 0.0;
  v866 = v732 + (float)(v726 - v732);
  v867 = (float)v862 + -1.001;
  if (v867 >= v866)
    v867 = v866;
  v868 = v865;
  if (v866 >= 0.0)
    v560 = v867;
  v869 = v560;
  v870 = (v868 + 1);
  v871 = v859 + v860 * v869;
  v872 = v871 + v860;
  v873 = (float)v870 - v865;
  v874 = (float)(v869 + 1) - v560;
  *(float *)&v875 = v873 * v874;
  v876 = v865 - (float)v865;
  v877 = v876 * v874;
  *(float *)&v878 = (float)v560;
  v879 = v560 - *(float *)&v878;
  v880 = v873 * v879;
  LOBYTE(v878) = *(_BYTE *)(v871 + v868);
  v881 = v876 * v879;
  v882 = *(float *)&v875 * (float)v878;
  LOBYTE(v875) = *(_BYTE *)(v871 + v870);
  *(float *)&v883 = v877 * (float)v875;
  *(float *)&v884 = v882 + *(float *)&v883;
  LOBYTE(v883) = *(_BYTE *)(v872 + v868);
  v885 = (float)(v880 * (float)v883) + *(float *)&v884;
  LOBYTE(v884) = *(_BYTE *)(v872 + v870);
  v1239[90] = 3212836864;
  v1239[91] = LODWORD(v719) | ((unint64_t)(int)(float)((float)((float)(v881 * (float)v884) + v885)
                                                                          * 255.0) << 32);
  v886 = v719 * 1.4142;
  v887 = v720 * 1.4142;
  v888 = vcvtms_s32_f32((float)((float)((float)((float)((float)((float)((float)(COERCE_FLOAT(LODWORD(v887) & 0x807FFFFF | 0x3F800000)* -0.33333)+ 2.0)* COERCE_FLOAT(LODWORD(v887) & 0x807FFFFF | 0x3F800000))+ -1.6667)+ (float)((LODWORD(v887) >> 23) - 127))* 0.69315)- v10)* v11);
  if (v888 < 0)
  {
    v889 = 0;
    v890 = 0;
  }
  else if ((int)v9 * v8 <= v888)
  {
    v889 = v8 - 1;
    v890 = v9 - 1;
  }
  else
  {
    v889 = v888 / (int)v9;
    v890 = v888 % (int)v9;
  }
  v891 = (float)(1 << v889);
  v892 = (float)(1.0 / v891) * a4;
  v893 = (float)(1.0 / v891) * a5;
  v894 = v886 / v891;
  v895 = (unint64_t *)(v20 + 144 * (v9 * v889 + v890));
  v896 = v895[5];
  v897 = (float)(v886 / v891) * 0.0;
  v898 = v897 + v892;
  v899 = (float)(v897 + v892) - v897;
  v900 = (float)v895[4] + -1.001;
  if (v900 >= v899)
    v900 = v898 - (float)(v894 * 0.0);
  if (v899 >= 0.0)
    v901 = v900;
  else
    v901 = 0.0;
  v902 = v893 + (float)(v897 * 0.0);
  v903 = (float)v895[6] + -1.001;
  if (v903 >= (float)(v902 - v894))
    v903 = v902 - v894;
  if ((float)(v902 - v894) >= 0.0)
    v904 = v903;
  else
    v904 = 0.0;
  v905 = v901;
  v906 = v904;
  v907 = (v905 + 1);
  v908 = v895[11] + v896 * v906;
  v909 = v908 + v896;
  v910 = (float)v907 - v901;
  v911 = (float)(v906 + 1) - v904;
  *(float *)&v912 = v910 * v911;
  v913 = v901 - (float)v901;
  v914 = v913 * v911;
  *(float *)&v915 = v904 - (float)v904;
  v916 = v910 * *(float *)&v915;
  v917 = v913 * *(float *)&v915;
  LOBYTE(v915) = *(_BYTE *)(v908 + v905);
  v918 = *(float *)&v912 * (float)v915;
  LOBYTE(v912) = *(_BYTE *)(v908 + v907);
  *(float *)&v919 = v914 * (float)v912;
  v920 = v918 + *(float *)&v919;
  LOBYTE(v919) = *(_BYTE *)(v909 + v905);
  *(float *)&v921 = v916 * (float)v919;
  v922 = *(float *)&v921 + v920;
  LOBYTE(v921) = *(_BYTE *)(v909 + v907);
  v1239[96] = 0xBF80000000000000;
  v1239[97] = LODWORD(v886) | ((unint64_t)(int)(float)((float)((float)(v917 * (float)v921) + v922)
                                                                          * 255.0) << 32);
  v923 = v895[5];
  v924 = v894 * 0.70711;
  v925 = (float)(v894 * 0.70711) + v892;
  v926 = v897 * 0.5;
  v927 = v925 + (float)(v897 * 0.5);
  v928 = (float)v895[4] + -1.001;
  if (v928 >= v927)
    v928 = v925 + (float)(v897 * 0.5);
  if (v927 >= 0.0)
    v929 = v928;
  else
    v929 = 0.0;
  v930 = v897 * 0.70711;
  v931 = v894 * 0.5;
  v932 = (float)(v894 * 0.5) + (float)(v893 + (float)(v897 * 0.70711));
  v933 = (float)v895[6] + -1.001;
  if (v933 >= v932)
    v933 = v931 + (float)(v893 + v930);
  if (v932 >= 0.0)
    v934 = v933;
  else
    v934 = 0.0;
  v935 = v929;
  v936 = v934;
  v937 = (v935 + 1);
  v938 = v895[11] + v923 * v936;
  v939 = v938 + v923;
  v940 = (float)v937 - v929;
  v941 = (float)(v936 + 1) - v934;
  v942 = v940 * v941;
  v943 = v929 - (float)v929;
  v944 = v943 * v941;
  *(float *)&v945 = (float)v934;
  *(float *)&v946 = v934 - *(float *)&v945;
  v947 = v940 * *(float *)&v946;
  v948 = v943 * *(float *)&v946;
  LOBYTE(v946) = *(_BYTE *)(v938 + v935);
  LOBYTE(v945) = *(_BYTE *)(v938 + v937);
  *(float *)&v949 = v944 * (float)v945;
  v950 = (float)(v942 * (float)v946) + *(float *)&v949;
  LOBYTE(v949) = *(_BYTE *)(v939 + v935);
  *(float *)&v951 = v947 * (float)v949;
  v952 = *(float *)&v951 + v950;
  LOBYTE(v951) = *(_BYTE *)(v939 + v937);
  v1239[98] = 0x3F0000003F3504F3;
  v1239[99] = LODWORD(v886) | ((unint64_t)(int)(float)((float)((float)(v948 * (float)v951) + v952)
                                                                          * 255.0) << 32);
  v953 = v895[5];
  v954 = v897 * -0.5;
  v955 = v925 + (float)(v897 * -0.5);
  v956 = (float)v895[4] + -1.001;
  if (v956 >= v955)
    v956 = v955;
  if (v955 < 0.0)
    v956 = 0.0;
  v957 = v894 * -0.5;
  v958 = (float)(v894 * -0.5) + (float)(v893 + v930);
  v959 = (float)v895[6] + -1.001;
  if (v959 >= v958)
    v959 = (float)(v894 * -0.5) + (float)(v893 + v930);
  if (v958 >= 0.0)
    v960 = v959;
  else
    v960 = 0.0;
  v961 = v956;
  v962 = v960;
  v963 = (v961 + 1);
  v964 = v895[11] + v953 * v962;
  v965 = v964 + v953;
  v966 = (float)v963 - v956;
  v967 = (float)(v962 + 1) - v960;
  v968 = v966 * v967;
  *(float *)&v969 = v956 - (float)v956;
  v970 = *(float *)&v969 * v967;
  *(float *)&v971 = (float)v960;
  v972 = v960 - *(float *)&v971;
  v973 = v966 * v972;
  v974 = *(float *)&v969 * v972;
  LOBYTE(v969) = *(_BYTE *)(v964 + v961);
  LOBYTE(v971) = *(_BYTE *)(v964 + v963);
  *(float *)&v975 = v970 * (float)v971;
  *(float *)&v976 = (float)(v968 * (float)v969) + *(float *)&v975;
  LOBYTE(v975) = *(_BYTE *)(v965 + v961);
  v977 = (float)(v973 * (float)v975) + *(float *)&v976;
  LOBYTE(v976) = *(_BYTE *)(v965 + v963);
  v1239[100] = 0xBF0000003F3504F3;
  v1239[101] = LODWORD(v886) | ((unint64_t)(int)(float)((float)((float)(v974 * (float)v976) + v977)
                                                                           * 255.0) << 32);
  v978 = v895[5];
  v979 = v897 + v898;
  v980 = (float)v895[4] + -1.001;
  if (v980 >= v979)
    v980 = v979;
  if (v979 >= 0.0)
    v981 = v980;
  else
    v981 = 0.0;
  v982 = v894 + v902;
  v983 = (float)v895[6] + -1.001;
  if (v983 >= v982)
    v983 = v982;
  if (v982 >= 0.0)
    v984 = v983;
  else
    v984 = 0.0;
  v985 = v981;
  v986 = v984;
  v987 = (v985 + 1);
  v988 = v895[11] + v978 * v986;
  v989 = v988 + v978;
  v990 = (float)v987 - v981;
  v991 = (float)(v986 + 1) - v984;
  *(float *)&v992 = v990 * v991;
  *(float *)&v993 = v981 - (float)v981;
  v994 = *(float *)&v993 * v991;
  v995 = v984 - (float)v984;
  v996 = v990 * v995;
  v997 = *(float *)&v993 * v995;
  LOBYTE(v993) = *(_BYTE *)(v988 + v985);
  v998 = *(float *)&v992 * (float)v993;
  LOBYTE(v992) = *(_BYTE *)(v988 + v987);
  *(float *)&v999 = v994 * (float)v992;
  v1000 = v998 + *(float *)&v999;
  LOBYTE(v999) = *(_BYTE *)(v989 + v985);
  *(float *)&v1001 = v996 * (float)v999;
  v1002 = *(float *)&v1001 + v1000;
  LOBYTE(v1001) = *(_BYTE *)(v989 + v987);
  v1239[102] = 0x3F80000000000000;
  v1239[103] = LODWORD(v886) | ((unint64_t)(int)(float)((float)((float)(v997 * (float)v1001) + v1002)
                                                                           * 255.0) << 32);
  v1003 = v895[5];
  v1004 = v892 - v924;
  v1005 = (float)v895[4] + -1.001;
  if (v1005 >= (float)(v1004 + v954))
    v1005 = v1004 + v954;
  if ((float)(v1004 + v954) >= 0.0)
    v1006 = v1005;
  else
    v1006 = 0.0;
  v1007 = v893 - v930;
  v1008 = (float)v895[6] + -1.001;
  if (v1008 >= (float)(v957 + v1007))
    v1008 = v957 + v1007;
  if ((float)(v957 + v1007) >= 0.0)
    v1009 = v1008;
  else
    v1009 = 0.0;
  v1010 = v1006;
  v1011 = v1009;
  v1012 = (v1010 + 1);
  v1013 = v895[11] + v1003 * v1011;
  v1014 = v1013 + v1003;
  v1015 = (float)v1012 - v1006;
  v1016 = (float)(v1011 + 1) - v1009;
  *(float *)&v1017 = v1015 * v1016;
  v1018 = v1006 - (float)v1006;
  v1019 = v1018 * v1016;
  *(float *)&v1020 = v1009 - (float)v1009;
  v1021 = v1015 * *(float *)&v1020;
  v1022 = v1018 * *(float *)&v1020;
  LOBYTE(v1020) = *(_BYTE *)(v1013 + v1010);
  v1023 = *(float *)&v1017 * (float)v1020;
  LOBYTE(v1017) = *(_BYTE *)(v1013 + v1012);
  *(float *)&v1024 = v1019 * (float)v1017;
  v1025 = v1023 + *(float *)&v1024;
  LOBYTE(v1024) = *(_BYTE *)(v1014 + v1010);
  *(float *)&v1026 = v1021 * (float)v1024;
  v1027 = *(float *)&v1026 + v1025;
  LOBYTE(v1026) = *(_BYTE *)(v1014 + v1012);
  v1239[104] = 0xBF000000BF3504F3;
  v1239[105] = LODWORD(v886) | ((unint64_t)(int)(float)((float)((float)(v1022 * (float)v1026)
                                                                                   + v1027)
                                                                           * 255.0) << 32);
  v1028 = v895[11];
  v1029 = v895[4];
  v1030 = v895[5];
  v1031 = v895[6];
  v1032 = v1004 + v926;
  v1033 = (float)v1029 + -1.001;
  if (v1033 >= v1032)
    v1033 = v1032;
  if (v1032 >= 0.0)
    v1034 = v1033;
  else
    v1034 = 0.0;
  v1035 = v931 + v1007;
  v1036 = (float)v1031 + -1.001;
  if (v1036 >= v1035)
    v1036 = v1035;
  if (v1035 >= 0.0)
    v1037 = v1036;
  else
    v1037 = 0.0;
  v1038 = v1034;
  v1039 = v1037;
  v1040 = (v1038 + 1);
  v1041 = v1028 + v1030 * v1039;
  v1042 = v1041 + v1030;
  v1043 = (float)v1040 - v1034;
  v1044 = (float)(v1039 + 1) - v1037;
  v1045 = v1043 * v1044;
  *(float *)&v1046 = v1034 - (float)v1034;
  v1047 = *(float *)&v1046 * v1044;
  *(float *)&v1048 = (float)v1037;
  v1049 = v1037 - *(float *)&v1048;
  v1050 = v1043 * v1049;
  v1051 = *(float *)&v1046 * v1049;
  LOBYTE(v1046) = *(_BYTE *)(v1041 + v1038);
  LOBYTE(v1048) = *(_BYTE *)(v1041 + v1040);
  *(float *)&v1052 = v1045 * (float)v1046;
  *(float *)&v1053 = *(float *)&v1052 + (float)(v1047 * (float)v1048);
  LOBYTE(v1052) = *(_BYTE *)(v1042 + v1038);
  v1054 = (float)(v1050 * (float)v1052) + *(float *)&v1053;
  LOBYTE(v1053) = *(_BYTE *)(v1042 + v1040);
  v1239[106] = 0x3F000000BF3504F3;
  v1239[107] = LODWORD(v886) | ((unint64_t)(int)(float)((float)((float)(v1051 * (float)v1053)
                                                                                   + v1054)
                                                                           * 255.0) << 32);
  v1055 = v886 * 1.4142;
  v1056 = vcvtms_s32_f32((float)((float)((float)((float)((float)((float)((float)(COERCE_FLOAT(COERCE_UNSIGNED_INT(v887 * 1.4142) & 0x807FFFFF | 0x3F800000)* -0.33333)+ 2.0)* COERCE_FLOAT(COERCE_UNSIGNED_INT(v887 * 1.4142) & 0x807FFFFF | 0x3F800000))+ -1.6667)+ (float)((COERCE_UNSIGNED_INT(v887 * 1.4142) >> 23) - 127))* 0.69315)- v10)* v11);
  if (v1056 < 0)
  {
    v1057 = 0;
    v1058 = 0;
  }
  else if ((int)v9 * v8 <= v1056)
  {
    v1057 = v8 - 1;
    v1058 = v9 - 1;
  }
  else
  {
    v1057 = v1056 / (int)v9;
    v1058 = v1056 % (int)v9;
  }
  v1059 = (float)(1 << v1057);
  v1060 = (float)(1.0 / v1059) * a4;
  v1061 = (float)(1.0 / v1059) * a5;
  v1062 = v1055 / v1059;
  v1063 = (unint64_t *)(v20 + 144 * (v9 * v1057 + v1058));
  v1064 = v1063[5];
  v1065 = (float)(v1055 / v1059) * 0.5;
  v1066 = v1060 - v1065;
  v1067 = (float)(v1055 / v1059) * 0.0;
  v1068 = (float)(v1060 - v1065) + (float)(v1067 * 0.70711);
  v1069 = (float)v1063[4] + -1.001;
  if (v1069 >= v1068)
    v1069 = (float)(v1060 - v1065) + (float)(v1067 * 0.70711);
  if (v1068 >= 0.0)
    v1070 = v1069;
  else
    v1070 = 0.0;
  v1071 = v1067 * 0.5;
  v1072 = v1061 - (float)(v1067 * 0.5);
  v1073 = v1062 * 0.70711;
  v1074 = (float)v1063[6] + -1.001;
  if (v1074 >= (float)((float)(v1062 * 0.70711) + v1072))
    v1074 = v1073 + v1072;
  if ((float)((float)(v1062 * 0.70711) + v1072) >= 0.0)
    v1075 = v1074;
  else
    v1075 = 0.0;
  v1076 = v1070;
  v1077 = v1075;
  v1078 = (v1076 + 1);
  v1079 = v1063[11] + v1064 * v1077;
  v1080 = v1079 + v1064;
  v1081 = (float)v1078 - v1070;
  v1082 = (float)(v1077 + 1) - v1075;
  *(float *)&v1083 = v1081 * v1082;
  *(float *)&v1084 = v1070 - (float)v1070;
  v1085 = *(float *)&v1084 * v1082;
  v1086 = v1075 - (float)v1075;
  v1087 = v1081 * v1086;
  v1088 = *(float *)&v1084 * v1086;
  LOBYTE(v1084) = *(_BYTE *)(v1079 + v1076);
  v1089 = *(float *)&v1083 * (float)v1084;
  LOBYTE(v1083) = *(_BYTE *)(v1079 + v1078);
  *(float *)&v1090 = v1085 * (float)v1083;
  v1091 = v1089 + *(float *)&v1090;
  LOBYTE(v1090) = *(_BYTE *)(v1080 + v1076);
  *(float *)&v1092 = v1087 * (float)v1090;
  v1093 = *(float *)&v1092 + v1091;
  LOBYTE(v1092) = *(_BYTE *)(v1080 + v1078);
  v1094 = LODWORD(v1055);
  v1239[112] = 0x3F3504F3BF000000;
  v1239[113] = LODWORD(v1055) | ((unint64_t)(int)(float)((float)((float)(v1088 * (float)v1092)
                                                                                    + v1093)
                                                                            * 255.0) << 32);
  v1095 = v1063[5];
  v1096 = v1065 + v1060;
  v1097 = v1096 + (float)(v1067 * 0.70711);
  v1098 = (float)v1063[4] + -1.001;
  if (v1098 >= v1097)
    v1098 = v1096 + (float)(v1067 * 0.70711);
  if (v1097 >= 0.0)
    v1099 = v1098;
  else
    v1099 = 0.0;
  v1100 = v1061 + v1071;
  v1101 = v1073 + (float)(v1061 + v1071);
  v1102 = (float)v1063[6] + -1.001;
  if (v1102 >= v1101)
    v1102 = v1101;
  if (v1101 >= 0.0)
    v1103 = v1102;
  else
    v1103 = 0.0;
  v1104 = v1099;
  v1105 = v1103;
  v1106 = (v1104 + 1);
  v1107 = v1063[11] + v1095 * v1105;
  v1108 = v1107 + v1095;
  v1109 = (float)v1106 - v1099;
  v1110 = (float)(v1105 + 1) - v1103;
  *(float *)&v1111 = v1109 * v1110;
  v1112 = v1099 - (float)v1099;
  v1113 = v1112 * v1110;
  *(float *)&v1114 = v1103 - (float)v1103;
  v1115 = v1109 * *(float *)&v1114;
  v1116 = v1112 * *(float *)&v1114;
  LOBYTE(v1114) = *(_BYTE *)(v1107 + v1104);
  v1117 = *(float *)&v1111 * (float)v1114;
  LOBYTE(v1111) = *(_BYTE *)(v1107 + v1106);
  *(float *)&v1118 = v1113 * (float)v1111;
  v1119 = v1117 + *(float *)&v1118;
  LOBYTE(v1118) = *(_BYTE *)(v1108 + v1104);
  *(float *)&v1120 = v1115 * (float)v1118;
  v1121 = *(float *)&v1120 + v1119;
  LOBYTE(v1120) = *(_BYTE *)(v1108 + v1106);
  v1239[114] = 0x3F3504F33F000000;
  v1239[115] = v1094 | ((unint64_t)(int)(float)((float)((float)(v1116 * (float)v1120) + v1121)
                                                                   * 255.0) << 32);
  v1122 = v1063[5];
  v1123 = (float)(v1062 + v1060) + (float)(v1067 * 0.0);
  v1124 = (float)v1063[4] + -1.001;
  if (v1124 >= v1123)
    v1124 = (float)(v1062 + v1060) + (float)(v1067 * 0.0);
  if (v1123 >= 0.0)
    v1125 = v1124;
  else
    v1125 = 0.0;
  v1126 = v1067 + (float)(v1067 + v1061);
  v1127 = (float)v1063[6] + -1.001;
  if (v1127 >= v1126)
    v1127 = v1067 + (float)(v1067 + v1061);
  if (v1126 >= 0.0)
    v1128 = v1127;
  else
    v1128 = 0.0;
  v1129 = v1125;
  v1130 = v1128;
  v1131 = (v1129 + 1);
  v1132 = v1063[11] + v1122 * v1130;
  v1133 = v1132 + v1122;
  v1134 = (float)v1131 - v1125;
  v1135 = (float)(v1130 + 1) - v1128;
  *(float *)&v1136 = v1134 * v1135;
  v1137 = v1125 - (float)v1125;
  v1138 = v1137 * v1135;
  *(float *)&v1139 = v1128 - (float)v1128;
  v1140 = v1134 * *(float *)&v1139;
  v1141 = v1137 * *(float *)&v1139;
  LOBYTE(v1139) = *(_BYTE *)(v1132 + v1129);
  v1142 = *(float *)&v1136 * (float)v1139;
  LOBYTE(v1136) = *(_BYTE *)(v1132 + v1131);
  *(float *)&v1143 = v1138 * (float)v1136;
  v1144 = v1142 + *(float *)&v1143;
  LOBYTE(v1143) = *(_BYTE *)(v1133 + v1129);
  *(float *)&v1145 = v1140 * (float)v1143;
  v1146 = *(float *)&v1145 + v1144;
  LOBYTE(v1145) = *(_BYTE *)(v1133 + v1131);
  v1239[116] = 1065353216;
  v1239[117] = v1094 | ((unint64_t)(int)(float)((float)((float)(v1141 * (float)v1145) + v1146)
                                                                   * 255.0) << 32);
  v1147 = v1063[5];
  v1148 = v1096 + (float)(v1067 * -0.70711);
  v1149 = (float)v1063[4] + -1.001;
  if (v1149 >= v1148)
    v1149 = v1148;
  if (v1148 < 0.0)
    v1149 = 0.0;
  v1150 = (float)(v1062 * -0.70711) + v1100;
  v1151 = (float)v1063[6] + -1.001;
  if (v1151 >= v1150)
    v1151 = v1150;
  if (v1150 >= 0.0)
    v1152 = v1151;
  else
    v1152 = 0.0;
  v1153 = v1149;
  v1154 = v1152;
  v1155 = (v1153 + 1);
  v1156 = v1063[11] + v1147 * v1154;
  v1157 = v1156 + v1147;
  v1158 = (float)v1155 - v1149;
  v1159 = (float)(v1154 + 1) - v1152;
  *(float *)&v1160 = v1158 * v1159;
  *(float *)&v1161 = v1149 - (float)v1149;
  v1162 = *(float *)&v1161 * v1159;
  v1163 = v1152 - (float)v1152;
  v1164 = v1158 * v1163;
  v1165 = *(float *)&v1161 * v1163;
  LOBYTE(v1161) = *(_BYTE *)(v1156 + v1153);
  v1166 = *(float *)&v1160 * (float)v1161;
  LOBYTE(v1160) = *(_BYTE *)(v1156 + v1155);
  *(float *)&v1167 = (float)v1160;
  v1168 = v1162 * *(float *)&v1167;
  LOBYTE(v1167) = *(_BYTE *)(v1157 + v1153);
  *(float *)&v1169 = v1166 + v1168;
  v1170 = (float)(v1164 * (float)v1167) + *(float *)&v1169;
  LOBYTE(v1169) = *(_BYTE *)(v1157 + v1155);
  v1239[118] = 0xBF3504F33F000000;
  v1239[119] = v1094 | ((unint64_t)(int)(float)((float)((float)(v1165 * (float)v1169) + v1170)
                                                                   * 255.0) << 32);
  v1171 = v1063[5];
  v1172 = v1066 + (float)(v1067 * -0.70711);
  v1173 = (float)v1063[4] + -1.001;
  if (v1173 >= v1172)
    v1173 = v1172;
  if (v1172 >= 0.0)
    v1174 = v1173;
  else
    v1174 = 0.0;
  v1175 = (float)(v1062 * -0.70711) + v1072;
  v1176 = (float)v1063[6] + -1.001;
  if (v1176 >= v1175)
    v1176 = v1175;
  v1177 = v1174;
  if (v1175 >= 0.0)
    v1178 = v1176;
  else
    v1178 = 0.0;
  v1179 = v1178;
  v1180 = (v1177 + 1);
  v1181 = v1063[11] + v1171 * v1179;
  v1182 = v1181 + v1171;
  v1183 = (float)v1180 - v1174;
  v1184 = (float)(v1179 + 1) - v1178;
  *(float *)&v1185 = v1183 * v1184;
  v1186 = v1174 - (float)v1174;
  v1187 = v1186 * v1184;
  *(float *)&v1188 = (float)v1178;
  v1189 = v1178 - *(float *)&v1188;
  v1190 = v1183 * v1189;
  LOBYTE(v1188) = *(_BYTE *)(v1181 + v1177);
  v1191 = v1186 * v1189;
  v1192 = *(float *)&v1185 * (float)v1188;
  LOBYTE(v1185) = *(_BYTE *)(v1181 + v1180);
  *(float *)&v1193 = v1187 * (float)v1185;
  v1194 = v1192 + *(float *)&v1193;
  LOBYTE(v1193) = *(_BYTE *)(v1182 + v1177);
  *(float *)&v1195 = v1190 * (float)v1193;
  v1196 = *(float *)&v1195 + v1194;
  LOBYTE(v1195) = *(_BYTE *)(v1182 + v1180);
  v1239[120] = 0xBF3504F3BF000000;
  v1239[121] = v1094 | ((unint64_t)(int)(float)((float)((float)(v1191 * (float)v1195) + v1196)
                                                                   * 255.0) << 32);
  v1197 = v1063[11];
  v1199 = v1063[4];
  v1198 = v1063[5];
  v1200 = v1063[6];
  v1201 = (float)(v1060 - v1062) + (float)(v1067 * 0.0);
  v1202 = (float)v1199 + -1.001;
  if (v1202 >= v1201)
    v1202 = v1201;
  if (v1201 >= 0.0)
    v1203 = v1202;
  else
    v1203 = 0.0;
  v1204 = v1067 + (float)(v1061 - v1067);
  v1205 = (float)v1200 + -1.001;
  if (v1205 >= v1204)
    v1205 = v1204;
  if (v1204 >= 0.0)
    v1206 = v1205;
  else
    v1206 = 0.0;
  v1207 = v1203;
  v1208 = v1206;
  v1209 = (v1207 + 1);
  v1210 = v1197 + v1198 * v1208;
  v1211 = v1210 + v1198;
  v1212 = (float)v1209 - v1203;
  v1213 = (float)(v1208 + 1) - v1206;
  *(float *)&v1214 = v1212 * v1213;
  *(float *)&v1215 = v1203 - (float)v1203;
  v1216 = *(float *)&v1215 * v1213;
  v1217 = v1206 - (float)v1206;
  v1218 = v1212 * v1217;
  v1219 = *(float *)&v1215 * v1217;
  LOBYTE(v1215) = *(_BYTE *)(v1210 + v1207);
  v1220 = *(float *)&v1214 * (float)v1215;
  LOBYTE(v1214) = *(_BYTE *)(v1210 + v1209);
  *(float *)&v1221 = v1216 * (float)v1214;
  v1222 = v1220 + *(float *)&v1221;
  LOBYTE(v1221) = *(_BYTE *)(v1211 + v1207);
  *(float *)&v1223 = v1218 * (float)v1221;
  v1224 = *(float *)&v1223 + v1222;
  LOBYTE(v1223) = *(_BYTE *)(v1211 + v1209);
  v1239[122] = 3212836864;
  v1239[123] = v1094 | ((unint64_t)(int)(float)((float)((float)(v1219 * (float)v1223) + v1224)
                                                                   * 255.0) << 32);
  result = sub_20FD53960(a2);
  v1227 = 0;
  v1228 = 0;
  do
  {
    v1229 = (float32x2_t *)&v1239[2 * LOWORD(a2[v1227 + 1])];
    v1230 = (float32x2_t *)&v1239[2 * HIWORD(a2[v1227 + 1])];
    v1231 = vsub_f32(*v1229, *v1230);
    v1232 = 1.0 / sqrtf(vaddv_f32(vmul_f32(v1231, v1231)));
    v1233 = vmul_n_f32(v1231, v1232);
    LOWORD(v1232) = v1229[1].i16[2];
    LOWORD(v1226) = v1230[1].i16[2];
    *(float32x2_t *)&a2[v1227 + 2] = v1233;
    v1226 = (float)LODWORD(v1226);
    v1228 = vadd_f32(v1228, vmul_n_f32(v1233, (float)LODWORD(v1232) - v1226));
    v1227 += 3;
  }
  while (v1227 != 135);
  if (v1228.f32[1] != 0.0 || (v1234 = 0.0, v1228.f32[0] != 0.0))
  {
    v1235 = fabsf(v1228.f32[1]) + 0.0000001;
    v1236 = v1228.f32[0] <= 0.0;
    v1237 = (float)(v1228.f32[0] + v1235) / (float)(v1235 - v1228.f32[0]);
    v1228.f32[0] = (float)(v1228.f32[0] - v1235) / (float)(v1228.f32[0] + v1235);
    v1238 = 0.7854;
    if (v1236)
    {
      v1238 = 2.3562;
      v1228.f32[0] = v1237;
    }
    v1228.f32[0] = v1238
                 + (float)(v1228.f32[0] * (float)((float)(v1228.f32[0] * (float)(v1228.f32[0] * 0.1821)) + -0.9675));
    v1234 = 6.2832 - v1228.f32[0];
    if (v1228.f32[1] >= 0.0)
      v1234 = v1228.f32[0];
  }
  *a1 = v1234;
  return result;
}

_DWORD *sub_20FD53960(_DWORD *result)
{
  result[1] = 720904;
  result[4] = 786441;
  result[7] = 851978;
  result[10] = 655368;
  result[13] = 720905;
  result[16] = 786442;
  result[19] = 851979;
  result[22] = 524300;
  result[25] = 589837;
  result[28] = 1245200;
  result[31] = 1114132;
  result[34] = 1179669;
  result[37] = 1114128;
  result[40] = 1179668;
  result[43] = 1048597;
  result[46] = 1310739;
  result[49] = 1376273;
  result[52] = 1245202;
  result[55] = 1769496;
  result[58] = 1835033;
  result[61] = 1900570;
  result[64] = 1703960;
  result[67] = 1769497;
  result[70] = 1835034;
  result[73] = 1900571;
  result[76] = 1572892;
  result[79] = 1638429;
  result[82] = 2293792;
  result[85] = 2162724;
  result[88] = 2228261;
  result[91] = 2162720;
  result[94] = 2228260;
  result[97] = 2097189;
  result[100] = 2359331;
  result[103] = 2424865;
  result[106] = 2293794;
  result[109] = 2818088;
  result[112] = 2883625;
  result[115] = 2949162;
  result[118] = 2752552;
  result[121] = 2818089;
  result[124] = 2883626;
  result[127] = 2949163;
  result[130] = 2621484;
  result[133] = 2687021;
  return result;
}

uint64_t sub_20FD53B80(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v8;
  float32x2_t *v9;
  uint64_t v10;
  float32x2_t *v11;
  float32x2_t *v12;
  uint64_t v13;
  float32x2_t *v14;
  float32x2_t *v15;
  uint64_t v16;
  float *v18;
  float *v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;

  v22 = *MEMORY[0x24BDAC8D0];
  if (!a2
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/FeatureDetection/include/VIO/FeatureDetection/DoGAndFREAKGenerator.hpp", 9259, (uint64_t)"pyramid_builder", 15, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  if (*(_BYTE *)(a1 + 64))
  {
    kdebug_trace();
    v8 = *(_DWORD *)(a1 + 204);
    if (v8 == 1)
    {
      v10 = *(_QWORD *)(a2 + 80);
      if (*(_BYTE *)(a1 + 209))
      {
        if (*(_BYTE *)(a1 + 208))
        {
          LODWORD(v20) = 1191181824;
          v11 = *(float32x2_t **)a3;
          v12 = *(float32x2_t **)(a3 + 8);
          if (*(float32x2_t **)a3 != v12)
          {
            do
            {
              sub_20FD4D668(&v11[5], &v20, v10, v11[2].f32[0], v11[2].f32[1], v11[1].f32[1]);
              v11 += 6;
            }
            while (v11 != v12);
          }
        }
        else
        {
          LODWORD(v20) = 1191181824;
          v18 = *(float **)a3;
          v19 = *(float **)(a3 + 8);
          if (*(float **)a3 != v19)
          {
            do
            {
              sub_20FD507F0(v18 + 10, &v20, v10, v18[4], v18[5], v18[3]);
              v18 += 12;
            }
            while (v18 != v19);
          }
        }
      }
      else
      {
        sub_20FD43304(*(float32x2_t **)a3, *(float32x2_t **)(a3 + 8), *(_QWORD *)(a2 + 80), *(unsigned __int8 *)(a1 + 208) != 0);
      }
    }
    else if (!v8)
    {
      sub_20FD42E4C((void **)&v20, (int8x16_t **)a3, *(unint64_t **)(a1 + 56), *(_QWORD *)(a2 + 80));
      v9 = *(float32x2_t **)a3;
      if (*(_QWORD *)a3)
      {
        *(_QWORD *)(a3 + 8) = v9;
        operator delete(v9);
      }
      *(_OWORD *)a3 = v20;
      *(_QWORD *)(a3 + 16) = v21;
    }
    kdebug_trace();
  }
  kdebug_trace();
  v13 = *(_QWORD *)(a1 + 312) - *(_QWORD *)(a1 + 304);
  if (v13
    && v13 != 2048
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/FeatureDetection/include/VIO/FeatureDetection/DoGAndFREAKGenerator.hpp", 9286, (uint64_t)"(config_.permutation_matrix.empty() || config_.permutation_matrix.size() == kBitsPerFreakDescriptor)", 100, (uint64_t)"Permutation matrix file size mismatch", 37, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v14 = *(float32x2_t **)a3;
  v15 = *(float32x2_t **)(a3 + 8);
  if (*(float32x2_t **)a3 == v15)
  {
    v16 = 0;
  }
  else
  {
    v16 = 0;
    do
    {
      if (*(_QWORD *)(a1 + 192) <= (unint64_t)((uint64_t)(*(_QWORD *)(a4 + 64) - *(_QWORD *)(a4 + 56)) >> 5))
        break;
      sub_20FD475B8((uint64_t)&v20, *(_QWORD *)(a2 + 80), v14[2].f32[0], v14[2].f32[1], v14[5].f32[0], v14[1].f32[1]);
      sub_20EDBB530(a4, v14[3].i8[4], &v20, v14[2].f32[0], v14[2].f32[1], v14[5].f32[0], v14[1].f32[1], v14[5].f32[1]);
      ++v16;
      v14 += 6;
    }
    while (v14 != v15);
  }
  kdebug_trace();
  return v16;
}

void sub_20FD53E88(_Unwind_Exception *a1, int a2)
{
  if (a2)
    sub_20E860DA4(a1);
  _Unwind_Resume(a1);
}

uint64_t sub_20FD53EAC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  int v8;
  unint64_t *v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  unint64_t v13;
  uint64_t v14;
  float32x2_t *v15;
  float v16;
  float v17;
  float v18;
  int32x2_t v19;
  float v20;
  float v21;
  int v22;
  uint64_t v23;
  int v24;
  float v25;
  float v26;
  int v27;
  int v28;
  int v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  unsigned int v46;
  float v47;
  uint64_t v48;
  uint64_t v49;
  float v50;
  int v51;
  int v52;
  float v53;
  float v54;
  float v55;
  float v56;
  float v57;
  unint64_t *v58;
  unint64_t v59;
  float v60;
  float v61;
  float v62;
  float v63;
  float v64;
  float v65;
  float v66;
  float v67;
  float v68;
  float v69;
  uint64_t v70;
  unsigned int v71;
  uint64_t v72;
  float v73;
  unint64_t v74;
  float v75;
  float v76;
  float v77;
  float v78;
  float v79;
  float v80;
  float v81;
  float v82;
  uint64_t v83;
  unsigned int v84;
  unsigned int v85;
  uint64_t v86;
  unint64_t v87;
  unint64_t v88;
  float v89;
  float v90;
  float v91;
  float v92;
  float v93;
  float v94;
  uint64_t v95;
  unsigned int v96;
  uint64_t v97;
  unint64_t v98;
  unint64_t v99;
  float v100;
  float v101;
  float v102;
  float v103;
  float v104;
  float v105;
  unsigned int v106;
  uint64_t v107;
  unsigned int v108;
  uint64_t v109;
  uint64_t v110;
  float v111;
  float v112;
  float v113;
  float v114;
  float v115;
  float v116;
  float v117;
  uint64_t v118;
  float v119;
  float v120;
  unint64_t v121;
  float v122;
  float v123;
  float v124;
  float v125;
  float v126;
  float v127;
  uint64_t v128;
  unsigned int v129;
  unsigned int v130;
  uint64_t v131;
  float v132;
  unint64_t v133;
  unint64_t v134;
  unint64_t v135;
  unint64_t v136;
  float v137;
  float v138;
  float v139;
  float v140;
  float v141;
  float v142;
  uint64_t v143;
  unsigned int v144;
  unint64_t v145;
  unint64_t v146;
  float v147;
  int v148;
  int v149;
  int v150;
  float v151;
  float v152;
  float v153;
  float v154;
  float v155;
  unint64_t *v156;
  unint64_t v157;
  float v158;
  float v159;
  float v160;
  float v161;
  float v162;
  float v163;
  float v164;
  uint64_t v165;
  unsigned int v166;
  uint64_t v167;
  float v168;
  unint64_t v169;
  float v170;
  float v171;
  float v172;
  float v173;
  float v174;
  float v175;
  float v176;
  float v177;
  float v178;
  float v179;
  float v180;
  unsigned int v181;
  uint64_t v182;
  unsigned int v183;
  uint64_t v184;
  uint64_t v185;
  float v186;
  float v187;
  float v188;
  float v189;
  float v190;
  float v191;
  float v192;
  uint64_t v193;
  float v194;
  float v195;
  unint64_t v196;
  float v197;
  float v198;
  float v199;
  float v200;
  float v201;
  float v202;
  float v203;
  uint64_t v204;
  unsigned int v205;
  uint64_t v206;
  float v207;
  unint64_t v208;
  float v209;
  float v210;
  float v211;
  float v212;
  float v213;
  float v214;
  unsigned int v215;
  uint64_t v216;
  unsigned int v217;
  uint64_t v218;
  uint64_t v219;
  float v220;
  float v221;
  float v222;
  float v223;
  float v224;
  float v225;
  float v226;
  uint64_t v227;
  float v228;
  float v229;
  unint64_t v230;
  float v231;
  float v232;
  float v233;
  float v234;
  float v235;
  float v236;
  uint64_t v237;
  unsigned int v238;
  uint64_t v239;
  float v240;
  unint64_t v241;
  unint64_t v242;
  unint64_t v243;
  unint64_t v244;
  float v245;
  float v246;
  float v247;
  float v248;
  float v249;
  unsigned int v250;
  uint64_t v251;
  unsigned int v252;
  unint64_t v253;
  unint64_t v254;
  float v255;
  float v256;
  float v257;
  float v258;
  float v259;
  float v260;
  float v261;
  uint64_t v262;
  float v263;
  float v264;
  float v265;
  int v266;
  int v267;
  int v268;
  float v269;
  float v270;
  float v271;
  float v272;
  float v273;
  unint64_t *v274;
  unint64_t v275;
  float v276;
  float v277;
  float v278;
  float v279;
  float v280;
  float v281;
  float v282;
  float v283;
  float v284;
  float v285;
  uint64_t v286;
  unsigned int v287;
  uint64_t v288;
  float v289;
  unint64_t v290;
  float v291;
  float v292;
  float v293;
  float v294;
  float v295;
  float v296;
  float v297;
  float v298;
  uint64_t v299;
  unsigned int v300;
  unsigned int v301;
  uint64_t v302;
  unint64_t v303;
  unint64_t v304;
  float v305;
  float v306;
  float v307;
  float v308;
  float v309;
  float v310;
  uint64_t v311;
  unsigned int v312;
  uint64_t v313;
  unint64_t v314;
  unint64_t v315;
  float v316;
  float v317;
  float v318;
  float v319;
  float v320;
  float v321;
  unsigned int v322;
  uint64_t v323;
  unsigned int v324;
  uint64_t v325;
  uint64_t v326;
  float v327;
  float v328;
  float v329;
  float v330;
  float v331;
  float v332;
  float v333;
  uint64_t v334;
  float v335;
  float v336;
  unint64_t v337;
  float v338;
  float v339;
  float v340;
  float v341;
  float v342;
  float v343;
  uint64_t v344;
  unsigned int v345;
  unsigned int v346;
  uint64_t v347;
  float v348;
  unint64_t v349;
  unint64_t v350;
  unint64_t v351;
  unint64_t v352;
  float v353;
  float v354;
  float v355;
  float v356;
  float v357;
  float v358;
  uint64_t v359;
  unsigned int v360;
  unint64_t v361;
  unint64_t v362;
  float v363;
  int v364;
  int v365;
  int v366;
  float v367;
  float v368;
  float v369;
  float v370;
  float v371;
  unint64_t *v372;
  unint64_t v373;
  float v374;
  float v375;
  float v376;
  float v377;
  float v378;
  float v379;
  float v380;
  uint64_t v381;
  unsigned int v382;
  uint64_t v383;
  float v384;
  unint64_t v385;
  float v386;
  float v387;
  float v388;
  float v389;
  float v390;
  float v391;
  float v392;
  float v393;
  float v394;
  float v395;
  float v396;
  unsigned int v397;
  uint64_t v398;
  unsigned int v399;
  uint64_t v400;
  uint64_t v401;
  float v402;
  float v403;
  float v404;
  float v405;
  float v406;
  float v407;
  float v408;
  uint64_t v409;
  float v410;
  float v411;
  unint64_t v412;
  float v413;
  float v414;
  float v415;
  float v416;
  float v417;
  float v418;
  float v419;
  uint64_t v420;
  unsigned int v421;
  uint64_t v422;
  float v423;
  unint64_t v424;
  float v425;
  float v426;
  float v427;
  float v428;
  float v429;
  float v430;
  unsigned int v431;
  uint64_t v432;
  unsigned int v433;
  uint64_t v434;
  uint64_t v435;
  float v436;
  float v437;
  float v438;
  float v439;
  float v440;
  float v441;
  float v442;
  uint64_t v443;
  float v444;
  float v445;
  unint64_t v446;
  float v447;
  float v448;
  float v449;
  float v450;
  float v451;
  float v452;
  uint64_t v453;
  unsigned int v454;
  uint64_t v455;
  float v456;
  unint64_t v457;
  unint64_t v458;
  unint64_t v459;
  unint64_t v460;
  float v461;
  float v462;
  float v463;
  float v464;
  float v465;
  unsigned int v466;
  uint64_t v467;
  unsigned int v468;
  unint64_t v469;
  unint64_t v470;
  float v471;
  float v472;
  float v473;
  float v474;
  float v475;
  float v476;
  float v477;
  uint64_t v478;
  float v479;
  float v480;
  float v481;
  int v482;
  int v483;
  int v484;
  float v485;
  float v486;
  float v487;
  float v488;
  float v489;
  unint64_t *v490;
  unint64_t v491;
  float v492;
  float v493;
  float v494;
  float v495;
  float v496;
  float v497;
  float v498;
  float v499;
  float v500;
  float v501;
  uint64_t v502;
  unsigned int v503;
  uint64_t v504;
  float v505;
  unint64_t v506;
  float v507;
  float v508;
  float v509;
  float v510;
  float v511;
  float v512;
  float v513;
  float v514;
  uint64_t v515;
  unsigned int v516;
  unsigned int v517;
  uint64_t v518;
  unint64_t v519;
  unint64_t v520;
  float v521;
  float v522;
  float v523;
  float v524;
  float v525;
  float v526;
  uint64_t v527;
  unsigned int v528;
  uint64_t v529;
  unint64_t v530;
  unint64_t v531;
  float v532;
  float v533;
  float v534;
  float v535;
  float v536;
  float v537;
  unsigned int v538;
  uint64_t v539;
  unsigned int v540;
  uint64_t v541;
  uint64_t v542;
  float v543;
  float v544;
  float v545;
  float v546;
  float v547;
  float v548;
  float v549;
  uint64_t v550;
  float v551;
  float v552;
  unint64_t v553;
  float v554;
  float v555;
  float v556;
  float v557;
  float v558;
  float v559;
  uint64_t v560;
  unsigned int v561;
  unsigned int v562;
  uint64_t v563;
  float v564;
  unint64_t v565;
  unint64_t v566;
  unint64_t v567;
  unint64_t v568;
  float v569;
  float v570;
  float v571;
  float v572;
  float v573;
  float v574;
  uint64_t v575;
  unsigned int v576;
  unint64_t v577;
  unint64_t v578;
  float v579;
  int v580;
  int v581;
  int v582;
  float v583;
  float v584;
  float v585;
  float v586;
  float v587;
  unint64_t *v588;
  unint64_t v589;
  float v590;
  float v591;
  float v592;
  float v593;
  float v594;
  float v595;
  float v596;
  uint64_t v597;
  unsigned int v598;
  uint64_t v599;
  float v600;
  unint64_t v601;
  float v602;
  float v603;
  float v604;
  float v605;
  float v606;
  float v607;
  float v608;
  float v609;
  float v610;
  float v611;
  float v612;
  unsigned int v613;
  uint64_t v614;
  unsigned int v615;
  uint64_t v616;
  uint64_t v617;
  float v618;
  float v619;
  float v620;
  float v621;
  float v622;
  float v623;
  float v624;
  uint64_t v625;
  float v626;
  float v627;
  unint64_t v628;
  float v629;
  float v630;
  float v631;
  float v632;
  float v633;
  float v634;
  float v635;
  uint64_t v636;
  unsigned int v637;
  uint64_t v638;
  float v639;
  unint64_t v640;
  float v641;
  float v642;
  float v643;
  float v644;
  float v645;
  float v646;
  unsigned int v647;
  uint64_t v648;
  unsigned int v649;
  uint64_t v650;
  uint64_t v651;
  float v652;
  float v653;
  float v654;
  float v655;
  float v656;
  float v657;
  float v658;
  uint64_t v659;
  float v660;
  float v661;
  unint64_t v662;
  float v663;
  float v664;
  float v665;
  float v666;
  float v667;
  float v668;
  uint64_t v669;
  unsigned int v670;
  uint64_t v671;
  float v672;
  unint64_t v673;
  unint64_t v674;
  unint64_t v675;
  unint64_t v676;
  float v677;
  float v678;
  float v679;
  float v680;
  float v681;
  unsigned int v682;
  uint64_t v683;
  unsigned int v684;
  unint64_t v685;
  unint64_t v686;
  float v687;
  float v688;
  float v689;
  float v690;
  float v691;
  float v692;
  float v693;
  uint64_t v694;
  float v695;
  float v696;
  int v697;
  int v698;
  int v699;
  uint64_t v700;
  float v701;
  float v702;
  float v703;
  float v704;
  float v705;
  unint64_t *v706;
  unint64_t v707;
  float v708;
  float v709;
  float v710;
  float v711;
  float v712;
  float v713;
  float v714;
  float v715;
  float v716;
  float v717;
  uint64_t v718;
  unsigned int v719;
  uint64_t v720;
  float v721;
  uint64_t v722;
  unint64_t v723;
  float v724;
  float v725;
  float v726;
  float v727;
  float v728;
  float v729;
  float v730;
  float v731;
  uint64_t v732;
  uint64_t v733;
  unsigned int v734;
  unint64_t v735;
  unint64_t v736;
  float v737;
  float v738;
  float v739;
  float v740;
  float v741;
  float v742;
  uint64_t v743;
  uint64_t v744;
  unsigned int v745;
  unint64_t v746;
  unint64_t v747;
  float v748;
  float v749;
  float v750;
  float v751;
  float v752;
  float v753;
  unsigned int v754;
  uint64_t v755;
  uint64_t v756;
  float v757;
  uint64_t v758;
  float v759;
  float v760;
  float v761;
  float v762;
  float v763;
  float v764;
  float v765;
  uint64_t v766;
  float v767;
  float v768;
  unint64_t v769;
  float v770;
  float v771;
  float v772;
  float v773;
  float v774;
  float v775;
  uint64_t v776;
  uint64_t v777;
  float v778;
  float v779;
  unint64_t v780;
  unint64_t v781;
  unint64_t v782;
  unint64_t v783;
  float v784;
  float v785;
  float v786;
  float v787;
  float v788;
  float v789;
  uint64_t v790;
  unint64_t v791;
  float v792;
  unint64_t v793;
  uint64_t v794;
  uint64_t v795;
  float v796;
  float v797;
  float v798;
  float v799;
  float v800;
  float v801;
  float v802;
  float v803;
  float v804;
  float v805;
  float v806;
  float32x2_t *v807;
  float32x2_t *v808;
  float32x2_t v809;
  int32x2_t v810;
  int v811;
  unint64_t v812;
  unint64_t i;
  unint64_t j;
  uint64_t v815;
  float *v816;
  uint64_t v817;
  float *v818;
  int v819;
  int v820;
  int v821;
  float32x2_t *v822;
  unint64_t v823;
  char *v824;
  int8x16_t v825;
  double v826;
  char *v827;
  float32x2_t *v828;
  float v829;
  float v830;
  int v831;
  int v832;
  int v833;
  int v834;
  int v835;
  int v836;
  int v837;
  int v838;
  int v839;
  uint64_t k;
  __int128 v841;
  __int128 v842;
  __int32 v843;
  __int32 v844;
  unint64_t v845;
  unint64_t v846;
  char *v847;
  char *v848;
  __int128 v849;
  char *v850;
  __int128 v851;
  float32x2_t *v852;
  float32x2_t *v853;
  float32x2_t *v854;
  float v855;
  BOOL v856;
  float v857;
  float32x2_t v858;
  float v859;
  float v860;
  float v861;
  int v862;
  uint64_t v863;
  int v864;
  float v865;
  float v866;
  int v867;
  int v868;
  int v869;
  float v870;
  float v871;
  float v872;
  float v873;
  float v874;
  uint64_t v875;
  _QWORD *v876;
  uint64_t v877;
  uint64_t v878;
  unint64_t v879;
  unint64_t v880;
  float v881;
  float v882;
  float v883;
  float v884;
  float v885;
  unsigned int v886;
  float v887;
  uint64_t v888;
  uint64_t v889;
  float v890;
  int v891;
  int v892;
  float v893;
  float v894;
  float v895;
  float v896;
  float v897;
  unint64_t *v898;
  unint64_t v899;
  float v900;
  float v901;
  float v902;
  float v903;
  float v904;
  float v905;
  float v906;
  float v907;
  float v908;
  float v909;
  uint64_t v910;
  unsigned int v911;
  uint64_t v912;
  float v913;
  unint64_t v914;
  float v915;
  float v916;
  float v917;
  float v918;
  float v919;
  float v920;
  float v921;
  float v922;
  uint64_t v923;
  unsigned int v924;
  unsigned int v925;
  uint64_t v926;
  unint64_t v927;
  unint64_t v928;
  float v929;
  float v930;
  float v931;
  float v932;
  float v933;
  float v934;
  uint64_t v935;
  unsigned int v936;
  uint64_t v937;
  unint64_t v938;
  unint64_t v939;
  float v940;
  float v941;
  float v942;
  float v943;
  float v944;
  float v945;
  unsigned int v946;
  uint64_t v947;
  unsigned int v948;
  uint64_t v949;
  uint64_t v950;
  float v951;
  float v952;
  float v953;
  float v954;
  float v955;
  float v956;
  float v957;
  uint64_t v958;
  float v959;
  float v960;
  unint64_t v961;
  float v962;
  float v963;
  float v964;
  float v965;
  float v966;
  float v967;
  uint64_t v968;
  unsigned int v969;
  unsigned int v970;
  uint64_t v971;
  float v972;
  unint64_t v973;
  unint64_t v974;
  unint64_t v975;
  unint64_t v976;
  float v977;
  float v978;
  float v979;
  float v980;
  float v981;
  float v982;
  uint64_t v983;
  unsigned int v984;
  unint64_t v985;
  unint64_t v986;
  float v987;
  int v988;
  int v989;
  int v990;
  float v991;
  float v992;
  float v993;
  float v994;
  float v995;
  unint64_t *v996;
  unint64_t v997;
  float v998;
  float v999;
  float v1000;
  float v1001;
  float v1002;
  float v1003;
  float v1004;
  uint64_t v1005;
  unsigned int v1006;
  uint64_t v1007;
  float v1008;
  unint64_t v1009;
  float v1010;
  float v1011;
  float v1012;
  float v1013;
  float v1014;
  float v1015;
  float v1016;
  float v1017;
  float v1018;
  float v1019;
  float v1020;
  unsigned int v1021;
  uint64_t v1022;
  unsigned int v1023;
  uint64_t v1024;
  uint64_t v1025;
  float v1026;
  float v1027;
  float v1028;
  float v1029;
  float v1030;
  float v1031;
  float v1032;
  uint64_t v1033;
  float v1034;
  float v1035;
  unint64_t v1036;
  float v1037;
  float v1038;
  float v1039;
  float v1040;
  float v1041;
  float v1042;
  float v1043;
  uint64_t v1044;
  unsigned int v1045;
  uint64_t v1046;
  float v1047;
  unint64_t v1048;
  float v1049;
  float v1050;
  float v1051;
  float v1052;
  float v1053;
  float v1054;
  unsigned int v1055;
  uint64_t v1056;
  unsigned int v1057;
  uint64_t v1058;
  uint64_t v1059;
  float v1060;
  float v1061;
  float v1062;
  float v1063;
  float v1064;
  float v1065;
  float v1066;
  uint64_t v1067;
  float v1068;
  float v1069;
  unint64_t v1070;
  float v1071;
  float v1072;
  float v1073;
  float v1074;
  float v1075;
  float v1076;
  uint64_t v1077;
  unsigned int v1078;
  uint64_t v1079;
  float v1080;
  unint64_t v1081;
  unint64_t v1082;
  unint64_t v1083;
  unint64_t v1084;
  float v1085;
  float v1086;
  float v1087;
  float v1088;
  float v1089;
  unsigned int v1090;
  uint64_t v1091;
  unsigned int v1092;
  unint64_t v1093;
  unint64_t v1094;
  float v1095;
  float v1096;
  float v1097;
  float v1098;
  float v1099;
  float v1100;
  float v1101;
  uint64_t v1102;
  float v1103;
  float v1104;
  float v1105;
  int v1106;
  int v1107;
  int v1108;
  float v1109;
  float v1110;
  float v1111;
  float v1112;
  float v1113;
  unint64_t *v1114;
  unint64_t v1115;
  float v1116;
  float v1117;
  float v1118;
  float v1119;
  float v1120;
  float v1121;
  float v1122;
  float v1123;
  float v1124;
  float v1125;
  uint64_t v1126;
  unsigned int v1127;
  uint64_t v1128;
  float v1129;
  unint64_t v1130;
  float v1131;
  float v1132;
  float v1133;
  float v1134;
  float v1135;
  float v1136;
  float v1137;
  float v1138;
  uint64_t v1139;
  unsigned int v1140;
  unsigned int v1141;
  uint64_t v1142;
  unint64_t v1143;
  unint64_t v1144;
  float v1145;
  float v1146;
  float v1147;
  float v1148;
  float v1149;
  float v1150;
  uint64_t v1151;
  unsigned int v1152;
  uint64_t v1153;
  unint64_t v1154;
  unint64_t v1155;
  float v1156;
  float v1157;
  float v1158;
  float v1159;
  float v1160;
  float v1161;
  unsigned int v1162;
  uint64_t v1163;
  unsigned int v1164;
  uint64_t v1165;
  uint64_t v1166;
  float v1167;
  float v1168;
  float v1169;
  float v1170;
  float v1171;
  float v1172;
  float v1173;
  uint64_t v1174;
  float v1175;
  float v1176;
  unint64_t v1177;
  float v1178;
  float v1179;
  float v1180;
  float v1181;
  float v1182;
  float v1183;
  uint64_t v1184;
  unsigned int v1185;
  unsigned int v1186;
  uint64_t v1187;
  float v1188;
  unint64_t v1189;
  unint64_t v1190;
  unint64_t v1191;
  unint64_t v1192;
  float v1193;
  float v1194;
  float v1195;
  float v1196;
  float v1197;
  float v1198;
  uint64_t v1199;
  unsigned int v1200;
  unint64_t v1201;
  unint64_t v1202;
  float v1203;
  int v1204;
  int v1205;
  int v1206;
  float v1207;
  float v1208;
  float v1209;
  float v1210;
  float v1211;
  unint64_t *v1212;
  unint64_t v1213;
  float v1214;
  float v1215;
  float v1216;
  float v1217;
  float v1218;
  float v1219;
  float v1220;
  uint64_t v1221;
  unsigned int v1222;
  uint64_t v1223;
  float v1224;
  unint64_t v1225;
  float v1226;
  float v1227;
  float v1228;
  float v1229;
  float v1230;
  float v1231;
  float v1232;
  float v1233;
  float v1234;
  float v1235;
  float v1236;
  unsigned int v1237;
  uint64_t v1238;
  unsigned int v1239;
  uint64_t v1240;
  uint64_t v1241;
  float v1242;
  float v1243;
  float v1244;
  float v1245;
  float v1246;
  float v1247;
  float v1248;
  uint64_t v1249;
  float v1250;
  float v1251;
  unint64_t v1252;
  float v1253;
  float v1254;
  float v1255;
  float v1256;
  float v1257;
  float v1258;
  float v1259;
  uint64_t v1260;
  unsigned int v1261;
  uint64_t v1262;
  float v1263;
  unint64_t v1264;
  float v1265;
  float v1266;
  float v1267;
  float v1268;
  float v1269;
  float v1270;
  unsigned int v1271;
  uint64_t v1272;
  unsigned int v1273;
  uint64_t v1274;
  uint64_t v1275;
  float v1276;
  float v1277;
  float v1278;
  float v1279;
  float v1280;
  float v1281;
  float v1282;
  uint64_t v1283;
  float v1284;
  float v1285;
  unint64_t v1286;
  float v1287;
  float v1288;
  float v1289;
  float v1290;
  float v1291;
  float v1292;
  uint64_t v1293;
  unsigned int v1294;
  uint64_t v1295;
  float v1296;
  unint64_t v1297;
  unint64_t v1298;
  unint64_t v1299;
  unint64_t v1300;
  float v1301;
  float v1302;
  float v1303;
  float v1304;
  float v1305;
  unsigned int v1306;
  uint64_t v1307;
  unsigned int v1308;
  unint64_t v1309;
  unint64_t v1310;
  float v1311;
  float v1312;
  float v1313;
  float v1314;
  float v1315;
  float v1316;
  float v1317;
  uint64_t v1318;
  float v1319;
  float v1320;
  float v1321;
  int v1322;
  int v1323;
  int v1324;
  float v1325;
  float v1326;
  float v1327;
  float v1328;
  float v1329;
  unint64_t *v1330;
  unint64_t v1331;
  float v1332;
  float v1333;
  float v1334;
  float v1335;
  float v1336;
  float v1337;
  float v1338;
  float v1339;
  float v1340;
  float v1341;
  uint64_t v1342;
  unsigned int v1343;
  uint64_t v1344;
  float v1345;
  unint64_t v1346;
  float v1347;
  float v1348;
  float v1349;
  float v1350;
  float v1351;
  float v1352;
  float v1353;
  float v1354;
  uint64_t v1355;
  unsigned int v1356;
  unsigned int v1357;
  uint64_t v1358;
  unint64_t v1359;
  unint64_t v1360;
  float v1361;
  float v1362;
  float v1363;
  float v1364;
  float v1365;
  float v1366;
  uint64_t v1367;
  unsigned int v1368;
  uint64_t v1369;
  unint64_t v1370;
  unint64_t v1371;
  float v1372;
  float v1373;
  float v1374;
  float v1375;
  float v1376;
  float v1377;
  unsigned int v1378;
  uint64_t v1379;
  unsigned int v1380;
  uint64_t v1381;
  uint64_t v1382;
  float v1383;
  float v1384;
  float v1385;
  float v1386;
  float v1387;
  float v1388;
  float v1389;
  uint64_t v1390;
  float v1391;
  float v1392;
  unint64_t v1393;
  float v1394;
  float v1395;
  float v1396;
  float v1397;
  float v1398;
  float v1399;
  uint64_t v1400;
  unsigned int v1401;
  unsigned int v1402;
  uint64_t v1403;
  float v1404;
  unint64_t v1405;
  unint64_t v1406;
  unint64_t v1407;
  unint64_t v1408;
  float v1409;
  float v1410;
  float v1411;
  float v1412;
  float v1413;
  float v1414;
  uint64_t v1415;
  unsigned int v1416;
  unint64_t v1417;
  unint64_t v1418;
  float v1419;
  int v1420;
  int v1421;
  int v1422;
  float v1423;
  float v1424;
  float v1425;
  float v1426;
  float v1427;
  unint64_t *v1428;
  unint64_t v1429;
  float v1430;
  float v1431;
  float v1432;
  float v1433;
  float v1434;
  float v1435;
  float v1436;
  uint64_t v1437;
  unsigned int v1438;
  uint64_t v1439;
  float v1440;
  unint64_t v1441;
  float v1442;
  float v1443;
  float v1444;
  float v1445;
  float v1446;
  float v1447;
  float v1448;
  float v1449;
  float v1450;
  float v1451;
  float v1452;
  unsigned int v1453;
  uint64_t v1454;
  unsigned int v1455;
  uint64_t v1456;
  uint64_t v1457;
  float v1458;
  float v1459;
  float v1460;
  float v1461;
  float v1462;
  float v1463;
  float v1464;
  uint64_t v1465;
  float v1466;
  float v1467;
  unint64_t v1468;
  float v1469;
  float v1470;
  float v1471;
  float v1472;
  float v1473;
  float v1474;
  float v1475;
  uint64_t v1476;
  unsigned int v1477;
  uint64_t v1478;
  float v1479;
  unint64_t v1480;
  float v1481;
  float v1482;
  float v1483;
  float v1484;
  float v1485;
  float v1486;
  unsigned int v1487;
  uint64_t v1488;
  unsigned int v1489;
  uint64_t v1490;
  uint64_t v1491;
  float v1492;
  float v1493;
  float v1494;
  float v1495;
  float v1496;
  float v1497;
  float v1498;
  uint64_t v1499;
  float v1500;
  float v1501;
  unint64_t v1502;
  float v1503;
  float v1504;
  float v1505;
  float v1506;
  float v1507;
  float v1508;
  uint64_t v1509;
  unsigned int v1510;
  uint64_t v1511;
  float v1512;
  unint64_t v1513;
  unint64_t v1514;
  unint64_t v1515;
  unint64_t v1516;
  float v1517;
  float v1518;
  float v1519;
  float v1520;
  float v1521;
  unsigned int v1522;
  uint64_t v1523;
  unsigned int v1524;
  unint64_t v1525;
  unint64_t v1526;
  float v1527;
  float v1528;
  float v1529;
  float v1530;
  float v1531;
  float v1532;
  float v1533;
  uint64_t v1534;
  float v1535;
  float v1536;
  int v1537;
  int v1538;
  int v1539;
  uint64_t v1540;
  float v1541;
  float v1542;
  float v1543;
  float v1544;
  float v1545;
  unint64_t *v1546;
  unint64_t v1547;
  float v1548;
  float v1549;
  float v1550;
  float v1551;
  float v1552;
  float v1553;
  float v1554;
  float v1555;
  float v1556;
  float v1557;
  uint64_t v1558;
  unsigned int v1559;
  uint64_t v1560;
  float v1561;
  uint64_t v1562;
  unint64_t v1563;
  float v1564;
  float v1565;
  float v1566;
  float v1567;
  float v1568;
  float v1569;
  float v1570;
  float v1571;
  uint64_t v1572;
  uint64_t v1573;
  unsigned int v1574;
  unint64_t v1575;
  unint64_t v1576;
  float v1577;
  float v1578;
  float v1579;
  float v1580;
  float v1581;
  float v1582;
  uint64_t v1583;
  uint64_t v1584;
  unsigned int v1585;
  unint64_t v1586;
  unint64_t v1587;
  float v1588;
  float v1589;
  float v1590;
  float v1591;
  float v1592;
  float v1593;
  unsigned int v1594;
  uint64_t v1595;
  uint64_t v1596;
  float v1597;
  uint64_t v1598;
  float v1599;
  float v1600;
  float v1601;
  float v1602;
  float v1603;
  float v1604;
  float v1605;
  uint64_t v1606;
  float v1607;
  float v1608;
  unint64_t v1609;
  float v1610;
  float v1611;
  float v1612;
  float v1613;
  float v1614;
  float v1615;
  uint64_t v1616;
  uint64_t v1617;
  float v1618;
  unint64_t v1619;
  unint64_t v1620;
  unint64_t v1621;
  unint64_t v1622;
  float v1623;
  float v1624;
  float v1625;
  float v1626;
  float v1627;
  float v1628;
  uint64_t v1629;
  unint64_t v1630;
  float v1631;
  unint64_t v1632;
  uint64_t v1633;
  uint64_t v1634;
  float v1635;
  float v1636;
  float v1637;
  float v1638;
  float v1639;
  float v1640;
  float v1641;
  float v1642;
  float v1643;
  float32x2_t *v1644;
  float32x2_t *v1645;
  float32x2_t v1646;
  float v1647;
  float32x2_t v1648;
  uint64_t v1649;
  float32x2_t *v1650;
  float32x2_t *v1651;
  uint64_t v1652;
  uint64_t v1654;
  uint64_t v1655;
  uint64_t v1656;
  uint64_t v1657;
  uint64_t v1658;
  uint64_t v1659;
  float32x2_t *v1660;
  float32x2_t *v1661;
  char *v1662;
  float32x2_t *v1663;
  __int128 v1664;
  char *v1665;
  char *v1666;
  char *v1667;
  char *v1668;
  int v1669;
  int v1670;
  int v1671;
  int v1672;
  int v1673;
  int v1674;
  int v1675;
  int v1676;
  int v1677;
  int v1678;
  int v1679;
  int v1680;
  int v1681;
  int v1682;
  int v1683;
  int v1684;
  int v1685;
  int v1686;
  int v1687;
  int v1688;
  int v1689;
  int v1690;
  int v1691;
  int v1692;
  int v1693;
  int v1694;
  int v1695;
  int v1696;
  int v1697;
  int v1698;
  int v1699;
  int v1700;
  int v1701;
  int v1702;
  int v1703;
  int v1704;
  int v1705;
  int v1706;
  int v1707;
  int v1708;
  int v1709;
  int v1710;
  int v1711;
  int v1712;
  __int128 v1713;
  __int128 v1714;
  float32x2_t v1715;
  uint64_t v1716;
  unint64_t v1717;
  uint64_t v1718;
  unint64_t v1719;
  uint64_t v1720;
  unint64_t v1721;
  unint64_t v1722;
  unint64_t v1723;
  unint64_t v1724;
  unint64_t v1725;
  uint64_t v1726;
  unint64_t v1727;
  unint64_t v1728;
  unint64_t v1729;
  uint64_t v1730;
  unint64_t v1731;
  unint64_t v1732;
  unint64_t v1733;
  uint64_t v1734;
  unint64_t v1735;
  unint64_t v1736;
  unint64_t v1737;
  uint64_t v1738;
  unint64_t v1739;
  uint64_t v1740;
  unint64_t v1741;
  uint64_t v1742;
  unint64_t v1743;
  uint64_t v1744;
  unint64_t v1745;
  unint64_t v1746;
  unint64_t v1747;
  unint64_t v1748;
  unint64_t v1749;
  uint64_t v1750;
  unint64_t v1751;
  unint64_t v1752;
  unint64_t v1753;
  uint64_t v1754;
  unint64_t v1755;
  unint64_t v1756;
  unint64_t v1757;
  uint64_t v1758;
  unint64_t v1759;
  unint64_t v1760;
  unint64_t v1761;
  uint64_t v1762;
  unint64_t v1763;
  uint64_t v1764;
  unint64_t v1765;
  uint64_t v1766;
  unint64_t v1767;
  uint64_t v1768;
  unint64_t v1769;
  unint64_t v1770;
  unint64_t v1771;
  unint64_t v1772;
  unint64_t v1773;
  uint64_t v1774;
  unint64_t v1775;
  unint64_t v1776;
  unint64_t v1777;
  uint64_t v1778;
  unint64_t v1779;
  unint64_t v1780;
  unint64_t v1781;
  uint64_t v1782;
  unint64_t v1783;
  unint64_t v1784;
  unint64_t v1785;
  uint64_t v1786;
  unint64_t v1787;
  uint64_t v1788;
  unint64_t v1789;
  uint64_t v1790;
  unint64_t v1791;
  uint64_t v1792;
  unint64_t v1793;
  unint64_t v1794;
  unint64_t v1795;
  unint64_t v1796;
  unint64_t v1797;
  uint64_t v1798;
  unint64_t v1799;
  uint64_t v1800;

  v6 = a2;
  v1800 = *MEMORY[0x24BDAC8D0];
  if (!a2
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/FeatureDetection/include/VIO/FeatureDetection/DoGAndFREAKGenerator.hpp", 9259, (uint64_t)"pyramid_builder", 15, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  if (!*(_BYTE *)(a1 + 64))
    goto LABEL_1090;
  kdebug_trace();
  v8 = *(_DWORD *)(a1 + 204);
  if (v8 == 1)
  {
    v14 = *(_QWORD *)(v6 + 80);
    if (!*(_BYTE *)(a1 + 209))
    {
      sub_20FD5AC14(*(float32x2_t **)a3, *(float32x2_t **)(a3 + 8), v14, *(unsigned __int8 *)(a1 + 208) != 0);
      goto LABEL_1089;
    }
    v1659 = v6;
    v1655 = a3;
    if (*(_BYTE *)(a1 + 208))
    {
      LODWORD(v1666) = 1191181824;
      v15 = *(float32x2_t **)a3;
      v1661 = *(float32x2_t **)(a3 + 8);
      if (*(float32x2_t **)a3 != v1661)
      {
        while (1)
        {
          v21 = v15[1].f32[1];
          v22 = *(_DWORD *)(v14 + 24);
          v23 = *(_QWORD *)(v14 + 32);
          v24 = v23 - 1;
          v26 = *(float *)(v14 + 108);
          v25 = *(float *)(v14 + 112);
          v27 = vcvtms_s32_f32(v26* (float)((float)((float)((float)((float)((float)((float)(COERCE_FLOAT(LODWORD(v21) & 0x807FFFFF | 0x3F800000)* -0.33333)+ 2.0)* COERCE_FLOAT(LODWORD(v21) & 0x807FFFFF | 0x3F800000))+ -1.6667)+ (float)((LODWORD(v21) >> 23) - 127))* 0.69315)- v25));
          if (v27 < 0)
          {
            v28 = 0;
            v29 = 0;
            goto LABEL_29;
          }
          if (v24 * v22 <= v27)
          {
            v28 = v22 - 1;
            v29 = v23 - 1;
            if ((_DWORD)v23 != 1)
              goto LABEL_29;
          }
          else
          {
            v28 = v27 / v24;
            v29 = v27 % v24;
            if (v27 % v24)
              goto LABEL_29;
          }
          if (v28 <= 0)
            v29 = 0;
          else
            v29 = v23 - 1;
          v28 -= v28 > 0;
LABEL_29:
          v30 = v15[2].f32[0];
          v31 = v15[2].f32[1];
          v32 = 1.0 / (float)(1 << v28);
          v33 = v30 * v32;
          v34 = v31 * v32;
          v35 = *(_QWORD *)(v14 + 56);
          v36 = (_QWORD *)(v35 + 144 * (v23 * v28 + v29));
          v37 = v36[11];
          v39 = v36[4];
          v38 = v36[5];
          v40 = v36[6];
          v41 = v33 + 0.0;
          v42 = (float)v39 + -1.001;
          if (v42 >= v41)
            v42 = v41;
          if (v41 >= 0.0)
            v43 = v42;
          else
            v43 = 0.0;
          v44 = v34 + 0.0;
          v45 = (float)v40 + -1.001;
          if (v45 >= v44)
            v45 = v44;
          if (v44 >= 0.0)
            v47 = v45;
          else
            v47 = 0.0;
          v48 = v47;
          v49 = v37 + 4 * v38 * v48;
          v46 = v43;
          v50 = (float)(*(float *)(v49 + 4 * v38 + 4 * (v46 + 1))
                      * (float)((float)(v43 - (float)v43) * (float)(v47 - (float)v47)))
              + (float)((float)(*(float *)(v49 + 4 * v38 + 4 * v46)
                              * (float)((float)((float)(v46 + 1) - v43) * (float)(v47 - (float)v47)))
                      + (float)((float)(*(float *)(v49 + 4 * v46)
                                      * (float)((float)((float)(v46 + 1) - v43)
                                              * (float)((float)(v48 + 1) - v47)))
                              + (float)(*(float *)(v49 + 4 * (v46 + 1))
                                      * (float)((float)(v43 - (float)v43)
                                              * (float)((float)(v48 + 1) - v47)))));
          *(_QWORD *)&v1713 = 0;
          *((_QWORD *)&v1713 + 1) = (unint64_t)(int)(float)(v50 * 255.0) << 32;
          if (v27 < 0)
          {
            v52 = 0;
            v51 = 0;
            goto LABEL_49;
          }
          if (v24 * v22 <= v27)
          {
            v51 = v22 - 1;
            v52 = v23 - 1;
            if ((_DWORD)v23 != 1)
              goto LABEL_49;
          }
          else
          {
            v51 = v27 / v24;
            v52 = v27 % v24;
            if (v52)
              goto LABEL_49;
          }
          if (v51 <= 0)
            v52 = 0;
          else
            v52 = v23 - 1;
          v51 -= v51 > 0;
LABEL_49:
          v53 = (float)(1 << v51);
          v54 = v21 + v21;
          v55 = v30 * (float)(1.0 / v53);
          v56 = v31 * (float)(1.0 / v53);
          v57 = (float)(v21 + v21) / v53;
          v58 = (unint64_t *)(v35 + 144 * (v23 * v51 + v52));
          v59 = v58[5];
          v60 = v57 * 0.5;
          v61 = v55 - (float)(v57 * 0.5);
          v62 = v57 * 0.0;
          v63 = (float)(v57 * 0.0) * 0.70711;
          v64 = (float)v58[4] + -1.001;
          if (v64 >= (float)(v61 + v63))
            v64 = v61 + v63;
          if ((float)(v61 + v63) < 0.0)
            v64 = 0.0;
          v65 = v62 * 0.5;
          v66 = v56 - (float)(v62 * 0.5);
          v67 = (float)(v57 * 0.70711) + v66;
          v68 = (float)v58[6] + -1.001;
          if (v68 >= v67)
            v68 = (float)(v57 * 0.70711) + v66;
          if (v67 >= 0.0)
            v69 = v68;
          else
            v69 = 0.0;
          v70 = v69;
          v71 = v64 + 1;
          v72 = v58[11] + 4 * v59 * v70;
          v73 = (float)(*(float *)(v72 + 4 * v59 + 4 * v71)
                      * (float)((float)(v64 - (float)v64) * (float)(v69 - (float)v69)))
              + (float)((float)(*(float *)(v72 + 4 * v59 + 4 * v64)
                              * (float)((float)((float)v71 - v64) * (float)(v69 - (float)v69)))
                      + (float)((float)(*(float *)(v72 + 4 * v64)
                                      * (float)((float)((float)v71 - v64) * (float)((float)(v70 + 1) - v69)))
                              + (float)(*(float *)(v72 + 4 * v71)
                                      * (float)((float)(v64 - (float)v64)
                                              * (float)((float)(v70 + 1) - v69)))));
          v1716 = 0x3F3504F3BF000000;
          v1717 = LODWORD(v54) | ((unint64_t)(int)(float)(v73 * 255.0) << 32);
          v74 = v58[5];
          v75 = v60 + v55;
          v76 = (float)(v60 + v55) + v63;
          v77 = (float)v58[4] + -1.001;
          if (v77 >= v76)
            v77 = v76;
          if (v76 >= 0.0)
            v78 = v77;
          else
            v78 = 0.0;
          v79 = v56 + v65;
          v80 = (float)(v57 * 0.70711) + (float)(v56 + v65);
          v81 = (float)v58[6] + -1.001;
          if (v81 >= v80)
            v81 = v80;
          if (v80 >= 0.0)
            v82 = v81;
          else
            v82 = 0.0;
          v83 = v82;
          v84 = v78 + 1;
          v85 = v83 + 1;
          v86 = v58[11] + 4 * v74 * v83;
          v87 = LODWORD(v54) | ((unint64_t)(int)(float)((float)((float)(*(float *)(v86 + 4 * v74 + 4 * v84)
                                                                                           * (float)((float)(v78 - (float)v78) * (float)(v82 - (float)v82)))
                                                                                   + (float)((float)(*(float *)(v86 + 4 * v74 + 4 * v78) * (float)((float)((float)v84 - v78) * (float)(v82 - (float)v82)))
                                                                                           + (float)((float)(*(float *)(v86 + 4 * v78) * (float)((float)((float)v84 - v78) * (float)((float)v85 - v82))) + (float)(*(float *)(v86 + 4 * v84) * (float)((float)(v78 - (float)v78) * (float)((float)v85 - v82))))))
                                                                           * 255.0) << 32);
          v1718 = 0x3F3504F33F000000;
          v1719 = v87;
          v88 = v58[5];
          v89 = (float)(v57 + v55) + (float)(v62 * 0.0);
          v90 = (float)v58[4] + -1.001;
          if (v90 >= v89)
            v90 = (float)(v57 + v55) + (float)(v62 * 0.0);
          if (v89 >= 0.0)
            v91 = v90;
          else
            v91 = 0.0;
          v92 = v62 + (float)(v62 + v56);
          v93 = (float)v58[6] + -1.001;
          if (v93 >= v92)
            v93 = v62 + (float)(v62 + v56);
          if (v92 >= 0.0)
            v94 = v93;
          else
            v94 = 0.0;
          v95 = v94;
          v96 = v91 + 1;
          v97 = v58[11] + 4 * v88 * v95;
          v98 = LODWORD(v54) | ((unint64_t)(int)(float)((float)((float)(*(float *)(v97 + 4 * v88 + 4 * v96)
                                                                                           * (float)((float)(v91 - (float)v91) * (float)(v94 - (float)v94)))
                                                                                   + (float)((float)(*(float *)(v97 + 4 * v88 + 4 * v91) * (float)((float)((float)v96 - v91) * (float)(v94 - (float)v94)))
                                                                                           + (float)((float)(*(float *)(v97 + 4 * v91) * (float)((float)((float)v96 - v91) * (float)((float)(v95 + 1) - v94))) + (float)(*(float *)(v97 + 4 * v96) * (float)((float)(v91 - (float)v91) * (float)((float)(v95 + 1) - v94))))))
                                                                           * 255.0) << 32);
          v1720 = 1065353216;
          v1721 = v98;
          v99 = v58[5];
          v100 = v75 + (float)(v62 * -0.70711);
          v101 = (float)v58[4] + -1.001;
          if (v101 >= v100)
            v101 = v100;
          if (v100 >= 0.0)
            v102 = v101;
          else
            v102 = 0.0;
          v103 = (float)(v57 * -0.70711) + v79;
          v104 = (float)v58[6] + -1.001;
          if (v104 >= v103)
            v104 = v103;
          if (v103 >= 0.0)
            v105 = v104;
          else
            v105 = 0.0;
          v106 = v102;
          v107 = v105;
          v108 = v102 + 1;
          v109 = v58[11] + 4 * v99 * v107;
          v110 = v109 + 4 * v99;
          v111 = (float)v108 - v102;
          v112 = (float)(v107 + 1) - v105;
          v113 = v111 * v112;
          v114 = v102 - (float)v102;
          v115 = v114 * v112;
          v116 = v105 - (float)v105;
          v117 = v114 * v116;
          v118 = 4 * v108;
          v119 = (float)(*(float *)(v110 + 4 * v106) * (float)(v111 * v116))
               + (float)((float)(*(float *)(v109 + 4 * v106) * v113) + (float)(*(float *)(v109 + v118) * v115));
          v120 = *(float *)(v110 + v118);
          v1722 = 0xBF3504F33F000000;
          v1723 = LODWORD(v54) | ((unint64_t)(int)(float)((float)((float)(v120 * v117) + v119)
                                                                             * 255.0) << 32);
          v121 = v58[5];
          v122 = v61 + (float)(v62 * -0.70711);
          v123 = (float)v58[4] + -1.001;
          if (v123 >= v122)
            v123 = v122;
          if (v122 >= 0.0)
            v124 = v123;
          else
            v124 = 0.0;
          v125 = (float)(v57 * -0.70711) + v66;
          v126 = (float)v58[6] + -1.001;
          if (v126 >= v125)
            v126 = v125;
          if (v125 >= 0.0)
            v127 = v126;
          else
            v127 = 0.0;
          v128 = v127;
          v129 = v124 + 1;
          v130 = v128 + 1;
          v131 = v58[11] + 4 * v121 * v128;
          v132 = (float)((float)(*(float *)(v131 + 4 * v121 + 4 * v129)
                               * (float)((float)(v124 - (float)v124)
                                       * (float)(v127 - (float)v127)))
                       + (float)((float)(*(float *)(v131 + 4 * v121 + 4 * v124)
                                       * (float)((float)((float)v129 - v124) * (float)(v127 - (float)v127)))
                               + (float)((float)(*(float *)(v131 + 4 * v124)
                                               * (float)((float)((float)v129 - v124) * (float)((float)v130 - v127)))
                                       + (float)(*(float *)(v131 + 4 * v129)
                                               * (float)((float)(v124 - (float)v124)
                                                       * (float)((float)v130 - v127))))))
               * 255.0;
          v1724 = 0xBF3504F3BF000000;
          v1725 = LODWORD(v54) | ((unint64_t)(int)v132 << 32);
          v133 = v58[11];
          v135 = v58[4];
          v134 = v58[5];
          v136 = v58[6];
          v137 = (float)(v55 - v57) + (float)(v62 * 0.0);
          v138 = (float)v135 + -1.001;
          if (v138 >= v137)
            v138 = v137;
          if (v137 >= 0.0)
            v139 = v138;
          else
            v139 = 0.0;
          v140 = v62 + (float)(v56 - v62);
          v141 = (float)v136 + -1.001;
          if (v141 >= v140)
            v141 = v140;
          if (v140 >= 0.0)
            v142 = v141;
          else
            v142 = 0.0;
          v143 = v142;
          v144 = v139 + 1;
          v145 = v133 + 4 * v134 * v143;
          v146 = LODWORD(v54) | ((unint64_t)(int)(float)((float)((float)(*(float *)(v145 + 4 * v134 + 4 * v144)
                                                                                            * (float)((float)(v139 - (float)v139) * (float)(v142 - (float)v142)))
                                                                                    + (float)((float)(*(float *)(v145 + 4 * v134 + 4 * v139) * (float)((float)((float)v144 - v139) * (float)(v142 - (float)v142)))
                                                                                            + (float)((float)(*(float *)(v145 + 4 * v139) * (float)((float)((float)v144 - v139) * (float)((float)(v143 + 1) - v142))) + (float)(*(float *)(v145 + 4 * v144) * (float)((float)(v139 - (float)v139) * (float)((float)(v143 + 1) - v142))))))
                                                                            * 255.0) << 32);
          v1726 = 3212836864;
          v1727 = v146;
          v147 = v21 * 1.4142;
          v148 = vcvtms_s32_f32(v26* (float)((float)((float)((float)((float)((float)((float)(COERCE_FLOAT(LODWORD(v147) & 0x807FFFFF | 0x3F800000)* -0.33333)+ 2.0)* COERCE_FLOAT(LODWORD(v147) & 0x807FFFFF | 0x3F800000))+ -1.6667)+ (float)((LODWORD(v147) >> 23) - 127))* 0.69315)- v25));
          if (v148 < 0)
          {
            v149 = 0;
            v150 = 0;
            goto LABEL_118;
          }
          if (v24 * v22 <= v148)
          {
            v149 = v22 - 1;
            v150 = v23 - 1;
            if ((_DWORD)v23 != 1)
              goto LABEL_118;
          }
          else
          {
            v149 = v148 / v24;
            v150 = v148 % v24;
            if (v150)
              goto LABEL_118;
          }
          if (v149 <= 0)
            v150 = 0;
          else
            v150 = v23 - 1;
          v149 -= v149 > 0;
LABEL_118:
          v151 = v54 * 1.4142;
          v152 = (float)(1 << v149);
          v153 = v30 * (float)(1.0 / v152);
          v154 = v31 * (float)(1.0 / v152);
          v155 = v151 / v152;
          v156 = (unint64_t *)(v35 + 144 * (v23 * v149 + v150));
          v157 = v156[5];
          v158 = (float)(v151 / v152) * 0.0;
          v159 = (float)(v158 + v153) - v158;
          v160 = (float)v156[4] + -1.001;
          if (v160 >= v159)
            v160 = (float)(v158 + v153) - v158;
          if (v159 >= 0.0)
            v161 = v160;
          else
            v161 = 0.0;
          v162 = v154 + (float)(v158 * 0.0);
          v163 = (float)v156[6] + -1.001;
          if (v163 >= (float)(v162 - v155))
            v163 = v162 - v155;
          if ((float)(v162 - v155) >= 0.0)
            v164 = v163;
          else
            v164 = 0.0;
          v165 = v164;
          v166 = v161 + 1;
          v167 = v156[11] + 4 * v157 * v165;
          v168 = (float)(*(float *)(v167 + 4 * v157 + 4 * v166)
                       * (float)((float)(v161 - (float)v161) * (float)(v164 - (float)v164)))
               + (float)((float)(*(float *)(v167 + 4 * v157 + 4 * v161)
                               * (float)((float)((float)v166 - v161) * (float)(v164 - (float)v164)))
                       + (float)((float)(*(float *)(v167 + 4 * v161)
                                       * (float)((float)((float)v166 - v161)
                                               * (float)((float)(v165 + 1) - v164)))
                               + (float)(*(float *)(v167 + 4 * v166)
                                       * (float)((float)(v161 - (float)v161)
                                               * (float)((float)(v165 + 1) - v164)))));
          v1728 = 0xBF80000000000000;
          v1729 = LODWORD(v151) | ((unint64_t)(int)(float)(v168 * 255.0) << 32);
          v169 = v156[5];
          v170 = v155 * 0.70711;
          v171 = (float)(v155 * 0.70711) + v153;
          v172 = v158 * 0.5;
          v173 = v171 + (float)(v158 * 0.5);
          v174 = (float)v156[4] + -1.001;
          if (v174 >= v173)
            v174 = v171 + (float)(v158 * 0.5);
          if (v173 < 0.0)
            v174 = 0.0;
          v175 = v158 * 0.70711;
          v176 = v154 + (float)(v158 * 0.70711);
          v177 = v155 * 0.5;
          v178 = (float)(v155 * 0.5) + v176;
          v179 = (float)v156[6] + -1.001;
          if (v179 >= v178)
            v179 = (float)(v155 * 0.5) + v176;
          if (v178 >= 0.0)
            v180 = v179;
          else
            v180 = 0.0;
          v181 = v174;
          v182 = v180;
          v183 = v174 + 1;
          v184 = v156[11] + 4 * v169 * v182;
          v185 = v184 + 4 * v169;
          v186 = (float)v183 - v174;
          v187 = (float)(v182 + 1) - v180;
          v188 = v186 * v187;
          v189 = v174 - (float)v174;
          v190 = v189 * v187;
          v191 = v180 - (float)v180;
          v192 = v189 * v191;
          v193 = 4 * v183;
          v194 = (float)(*(float *)(v185 + 4 * v181) * (float)(v186 * v191))
               + (float)((float)(*(float *)(v184 + 4 * v181) * v188) + (float)(*(float *)(v184 + v193) * v190));
          v195 = *(float *)(v185 + v193);
          v1730 = 0x3F0000003F3504F3;
          v1731 = LODWORD(v151) | ((unint64_t)(int)(float)((float)((float)(v195 * v192) + v194)
                                                                              * 255.0) << 32);
          v196 = v156[5];
          v197 = v158 * -0.5;
          v198 = v171 + (float)(v158 * -0.5);
          v199 = (float)v156[4] + -1.001;
          if (v199 >= v198)
            v199 = v198;
          if (v198 < 0.0)
            v199 = 0.0;
          v200 = v155 * -0.5;
          v201 = (float)(v155 * -0.5) + v176;
          v202 = (float)v156[6] + -1.001;
          if (v202 >= v201)
            v202 = v201;
          if (v201 >= 0.0)
            v203 = v202;
          else
            v203 = 0.0;
          v204 = v203;
          v205 = v199 + 1;
          v206 = v156[11] + 4 * v196 * v204;
          v207 = (float)((float)(*(float *)(v206 + 4 * v196 + 4 * v205)
                               * (float)((float)(v199 - (float)v199)
                                       * (float)(v203 - (float)v203)))
                       + (float)((float)(*(float *)(v206 + 4 * v196 + 4 * v199)
                                       * (float)((float)((float)v205 - v199) * (float)(v203 - (float)v203)))
                               + (float)((float)(*(float *)(v206 + 4 * v199)
                                               * (float)((float)((float)v205 - v199)
                                                       * (float)((float)(v204 + 1) - v203)))
                                       + (float)(*(float *)(v206 + 4 * v205)
                                               * (float)((float)(v199 - (float)v199)
                                                       * (float)((float)(v204 + 1) - v203))))))
               * 255.0;
          v1732 = 0xBF0000003F3504F3;
          v1733 = LODWORD(v151) | ((unint64_t)(int)v207 << 32);
          v208 = v156[5];
          v209 = v158 + (float)(v158 + v153);
          v210 = (float)v156[4] + -1.001;
          if (v210 >= v209)
            v210 = v209;
          if (v209 >= 0.0)
            v211 = v210;
          else
            v211 = 0.0;
          v212 = v155 + v162;
          v213 = (float)v156[6] + -1.001;
          if (v213 >= v212)
            v213 = v212;
          if (v212 >= 0.0)
            v214 = v213;
          else
            v214 = 0.0;
          v215 = v211;
          v216 = v214;
          v217 = v211 + 1;
          v218 = v156[11] + 4 * v208 * v216;
          v219 = v218 + 4 * v208;
          v220 = (float)v217 - v211;
          v221 = (float)(v216 + 1) - v214;
          v222 = v220 * v221;
          v223 = v211 - (float)v211;
          v224 = v214 - (float)v214;
          v225 = v220 * v224;
          v226 = v223 * v224;
          v227 = 4 * v217;
          v228 = (float)(*(float *)(v219 + 4 * v215) * v225)
               + (float)((float)(*(float *)(v218 + 4 * v215) * v222)
                       + (float)(*(float *)(v218 + v227) * (float)(v223 * v221)));
          v229 = *(float *)(v219 + v227);
          v1734 = 0x3F80000000000000;
          v1735 = LODWORD(v151) | ((unint64_t)(int)(float)((float)((float)(v229 * v226) + v228)
                                                                              * 255.0) << 32);
          v230 = v156[5];
          v231 = v153 - v170;
          v232 = (float)v156[4] + -1.001;
          if (v232 >= (float)(v231 + v197))
            v232 = v231 + v197;
          if ((float)(v231 + v197) >= 0.0)
            v233 = v232;
          else
            v233 = 0.0;
          v234 = v154 - v175;
          v235 = (float)v156[6] + -1.001;
          if (v235 >= (float)(v200 + v234))
            v235 = v200 + v234;
          if ((float)(v200 + v234) >= 0.0)
            v236 = v235;
          else
            v236 = 0.0;
          v237 = v236;
          v238 = v233 + 1;
          v239 = v156[11] + 4 * v230 * v237;
          v240 = (float)((float)(*(float *)(v239 + 4 * v230 + 4 * v238)
                               * (float)((float)(v233 - (float)v233)
                                       * (float)(v236 - (float)v236)))
                       + (float)((float)(*(float *)(v239 + 4 * v230 + 4 * v233)
                                       * (float)((float)((float)v238 - v233) * (float)(v236 - (float)v236)))
                               + (float)((float)(*(float *)(v239 + 4 * v233)
                                               * (float)((float)((float)v238 - v233)
                                                       * (float)((float)(v237 + 1) - v236)))
                                       + (float)(*(float *)(v239 + 4 * v238)
                                               * (float)((float)(v233 - (float)v233)
                                                       * (float)((float)(v237 + 1) - v236))))))
               * 255.0;
          v1736 = 0xBF000000BF3504F3;
          v1737 = LODWORD(v151) | ((unint64_t)(int)v240 << 32);
          v241 = v156[11];
          v243 = v156[4];
          v242 = v156[5];
          v244 = v156[6];
          v245 = v231 + v172;
          v246 = (float)v243 + -1.001;
          if (v246 >= v245)
            v246 = v245;
          if (v245 >= 0.0)
            v247 = v246;
          else
            v247 = 0.0;
          v248 = v177 + v234;
          v249 = (float)v244 + -1.001;
          if (v249 >= v248)
            v249 = v248;
          if (v248 < 0.0)
            v249 = 0.0;
          v250 = v247;
          v251 = v249;
          v252 = v247 + 1;
          v253 = v241 + 4 * v242 * v251;
          v254 = v253 + 4 * v242;
          v255 = (float)v252 - v247;
          v256 = (float)(v251 + 1) - v249;
          v257 = v255 * v256;
          v258 = v247 - (float)v247;
          v259 = v249 - (float)v249;
          v260 = v255 * v259;
          v261 = v258 * v259;
          v262 = 4 * v252;
          v263 = (float)(*(float *)(v254 + 4 * v250) * v260)
               + (float)((float)(*(float *)(v253 + 4 * v250) * v257)
                       + (float)(*(float *)(v253 + v262) * (float)(v258 * v256)));
          v264 = *(float *)(v254 + v262);
          v1738 = 0x3F000000BF3504F3;
          v1739 = LODWORD(v151) | ((unint64_t)(int)(float)((float)((float)(v264 * v261) + v263)
                                                                              * 255.0) << 32);
          v265 = v147 * 1.4142;
          v266 = vcvtms_s32_f32(v26* (float)((float)((float)((float)((float)((float)((float)(COERCE_FLOAT(LODWORD(v265) & 0x807FFFFF | 0x3F800000)* -0.33333)+ 2.0)* COERCE_FLOAT(LODWORD(v265) & 0x807FFFFF | 0x3F800000))+ -1.6667)+ (float)((LODWORD(v265) >> 23) - 127))* 0.69315)- v25));
          if (v266 < 0)
          {
            v267 = 0;
            v268 = 0;
            goto LABEL_185;
          }
          if (v24 * v22 <= v266)
          {
            v267 = v22 - 1;
            v268 = v23 - 1;
            if ((_DWORD)v23 != 1)
              goto LABEL_185;
          }
          else
          {
            v267 = v266 / v24;
            v268 = v266 % v24;
            if (v268)
              goto LABEL_185;
          }
          if (v267 <= 0)
            v268 = 0;
          else
            v268 = v23 - 1;
          v267 -= v267 > 0;
LABEL_185:
          v269 = (float)(1 << v267);
          v270 = v151 * 1.4142;
          v271 = v30 * (float)(1.0 / v269);
          v272 = v31 * (float)(1.0 / v269);
          v273 = v270 / v269;
          v274 = (unint64_t *)(v35 + 144 * (v23 * v267 + v268));
          v275 = v274[5];
          v276 = v273 * 0.5;
          v277 = v271 - (float)(v273 * 0.5);
          v278 = v273 * 0.0;
          v279 = (float)(v273 * 0.0) * 0.70711;
          v280 = (float)v274[4] + -1.001;
          if (v280 >= (float)(v277 + v279))
            v280 = v277 + v279;
          if ((float)(v277 + v279) < 0.0)
            v280 = 0.0;
          v281 = v278 * 0.5;
          v282 = v272 - (float)(v278 * 0.5);
          v283 = (float)(v273 * 0.70711) + v282;
          v284 = (float)v274[6] + -1.001;
          if (v284 >= v283)
            v284 = (float)(v273 * 0.70711) + v282;
          if (v283 >= 0.0)
            v285 = v284;
          else
            v285 = 0.0;
          v286 = v285;
          v287 = v280 + 1;
          v288 = v274[11] + 4 * v275 * v286;
          v289 = (float)(*(float *)(v288 + 4 * v275 + 4 * v287)
                       * (float)((float)(v280 - (float)v280) * (float)(v285 - (float)v285)))
               + (float)((float)(*(float *)(v288 + 4 * v275 + 4 * v280)
                               * (float)((float)((float)v287 - v280) * (float)(v285 - (float)v285)))
                       + (float)((float)(*(float *)(v288 + 4 * v280)
                                       * (float)((float)((float)v287 - v280)
                                               * (float)((float)(v286 + 1) - v285)))
                               + (float)(*(float *)(v288 + 4 * v287)
                                       * (float)((float)(v280 - (float)v280)
                                               * (float)((float)(v286 + 1) - v285)))));
          v1740 = 0x3F3504F3BF000000;
          v1741 = LODWORD(v270) | ((unint64_t)(int)(float)(v289 * 255.0) << 32);
          v290 = v274[5];
          v291 = v276 + v271;
          v292 = (float)(v276 + v271) + v279;
          v293 = (float)v274[4] + -1.001;
          if (v293 >= v292)
            v293 = v292;
          if (v292 >= 0.0)
            v294 = v293;
          else
            v294 = 0.0;
          v295 = v272 + v281;
          v296 = (float)(v273 * 0.70711) + (float)(v272 + v281);
          v297 = (float)v274[6] + -1.001;
          if (v297 >= v296)
            v297 = v296;
          if (v296 >= 0.0)
            v298 = v297;
          else
            v298 = 0.0;
          v299 = v298;
          v300 = v294 + 1;
          v301 = v299 + 1;
          v302 = v274[11] + 4 * v290 * v299;
          v303 = LODWORD(v270) | ((unint64_t)(int)(float)((float)((float)(*(float *)(v302 + 4 * v290 + 4 * v300)
                                                                                             * (float)((float)(v294 - (float)v294) * (float)(v298 - (float)v298)))
                                                                                     + (float)((float)(*(float *)(v302 + 4 * v290 + 4 * v294) * (float)((float)((float)v300 - v294) * (float)(v298 - (float)v298)))
                                                                                             + (float)((float)(*(float *)(v302 + 4 * v294) * (float)((float)((float)v300 - v294) * (float)((float)v301 - v298))) + (float)(*(float *)(v302 + 4 * v300) * (float)((float)(v294 - (float)v294) * (float)((float)v301 - v298))))))
                                                                             * 255.0) << 32);
          v1742 = 0x3F3504F33F000000;
          v1743 = v303;
          v304 = v274[5];
          v305 = (float)(v273 + v271) + (float)(v278 * 0.0);
          v306 = (float)v274[4] + -1.001;
          if (v306 >= v305)
            v306 = (float)(v273 + v271) + (float)(v278 * 0.0);
          if (v305 >= 0.0)
            v307 = v306;
          else
            v307 = 0.0;
          v308 = v278 + (float)(v278 + v272);
          v309 = (float)v274[6] + -1.001;
          if (v309 >= v308)
            v309 = v278 + (float)(v278 + v272);
          if (v308 >= 0.0)
            v310 = v309;
          else
            v310 = 0.0;
          v311 = v310;
          v312 = v307 + 1;
          v313 = v274[11] + 4 * v304 * v311;
          v314 = LODWORD(v270) | ((unint64_t)(int)(float)((float)((float)(*(float *)(v313 + 4 * v304 + 4 * v312)
                                                                                             * (float)((float)(v307 - (float)v307) * (float)(v310 - (float)v310)))
                                                                                     + (float)((float)(*(float *)(v313 + 4 * v304 + 4 * v307) * (float)((float)((float)v312 - v307) * (float)(v310 - (float)v310)))
                                                                                             + (float)((float)(*(float *)(v313 + 4 * v307) * (float)((float)((float)v312 - v307) * (float)((float)(v311 + 1) - v310))) + (float)(*(float *)(v313 + 4 * v312) * (float)((float)(v307 - (float)v307) * (float)((float)(v311 + 1) - v310))))))
                                                                             * 255.0) << 32);
          v1744 = 1065353216;
          v1745 = v314;
          v315 = v274[5];
          v316 = v291 + (float)(v278 * -0.70711);
          v317 = (float)v274[4] + -1.001;
          if (v317 >= v316)
            v317 = v316;
          if (v316 >= 0.0)
            v318 = v317;
          else
            v318 = 0.0;
          v319 = (float)(v273 * -0.70711) + v295;
          v320 = (float)v274[6] + -1.001;
          if (v320 >= v319)
            v320 = v319;
          if (v319 >= 0.0)
            v321 = v320;
          else
            v321 = 0.0;
          v322 = v318;
          v323 = v321;
          v324 = v318 + 1;
          v325 = v274[11] + 4 * v315 * v323;
          v326 = v325 + 4 * v315;
          v327 = (float)v324 - v318;
          v328 = (float)(v323 + 1) - v321;
          v329 = v327 * v328;
          v330 = v318 - (float)v318;
          v331 = v330 * v328;
          v332 = v321 - (float)v321;
          v333 = v330 * v332;
          v334 = 4 * v324;
          v335 = (float)(*(float *)(v326 + 4 * v322) * (float)(v327 * v332))
               + (float)((float)(*(float *)(v325 + 4 * v322) * v329) + (float)(*(float *)(v325 + v334) * v331));
          v336 = *(float *)(v326 + v334);
          v1746 = 0xBF3504F33F000000;
          v1747 = LODWORD(v270) | ((unint64_t)(int)(float)((float)((float)(v336 * v333) + v335)
                                                                              * 255.0) << 32);
          v337 = v274[5];
          v338 = v277 + (float)(v278 * -0.70711);
          v339 = (float)v274[4] + -1.001;
          if (v339 >= v338)
            v339 = v338;
          if (v338 >= 0.0)
            v340 = v339;
          else
            v340 = 0.0;
          v341 = (float)(v273 * -0.70711) + v282;
          v342 = (float)v274[6] + -1.001;
          if (v342 >= v341)
            v342 = v341;
          if (v341 >= 0.0)
            v343 = v342;
          else
            v343 = 0.0;
          v344 = v343;
          v345 = v340 + 1;
          v346 = v344 + 1;
          v347 = v274[11] + 4 * v337 * v344;
          v348 = (float)((float)(*(float *)(v347 + 4 * v337 + 4 * v345)
                               * (float)((float)(v340 - (float)v340)
                                       * (float)(v343 - (float)v343)))
                       + (float)((float)(*(float *)(v347 + 4 * v337 + 4 * v340)
                                       * (float)((float)((float)v345 - v340) * (float)(v343 - (float)v343)))
                               + (float)((float)(*(float *)(v347 + 4 * v340)
                                               * (float)((float)((float)v345 - v340) * (float)((float)v346 - v343)))
                                       + (float)(*(float *)(v347 + 4 * v345)
                                               * (float)((float)(v340 - (float)v340)
                                                       * (float)((float)v346 - v343))))))
               * 255.0;
          v1748 = 0xBF3504F3BF000000;
          v1749 = LODWORD(v270) | ((unint64_t)(int)v348 << 32);
          v349 = v274[11];
          v351 = v274[4];
          v350 = v274[5];
          v352 = v274[6];
          v353 = (float)(v271 - v273) + (float)(v278 * 0.0);
          v354 = (float)v351 + -1.001;
          if (v354 >= v353)
            v354 = v353;
          if (v353 >= 0.0)
            v355 = v354;
          else
            v355 = 0.0;
          v356 = v278 + (float)(v272 - v278);
          v357 = (float)v352 + -1.001;
          if (v357 >= v356)
            v357 = v356;
          if (v356 >= 0.0)
            v358 = v357;
          else
            v358 = 0.0;
          v359 = v358;
          v360 = v355 + 1;
          v361 = v349 + 4 * v350 * v359;
          v362 = LODWORD(v270) | ((unint64_t)(int)(float)((float)((float)(*(float *)(v361 + 4 * v350 + 4 * v360)
                                                                                             * (float)((float)(v355 - (float)v355) * (float)(v358 - (float)v358)))
                                                                                     + (float)((float)(*(float *)(v361 + 4 * v350 + 4 * v355) * (float)((float)((float)v360 - v355) * (float)(v358 - (float)v358)))
                                                                                             + (float)((float)(*(float *)(v361 + 4 * v355) * (float)((float)((float)v360 - v355) * (float)((float)(v359 + 1) - v358))) + (float)(*(float *)(v361 + 4 * v360) * (float)((float)(v355 - (float)v355) * (float)((float)(v359 + 1) - v358))))))
                                                                             * 255.0) << 32);
          v1750 = 3212836864;
          v1751 = v362;
          v363 = v265 * 1.4142;
          v364 = vcvtms_s32_f32(v26* (float)((float)((float)((float)((float)((float)((float)(COERCE_FLOAT(LODWORD(v363) & 0x807FFFFF | 0x3F800000)* -0.33333)+ 2.0)* COERCE_FLOAT(LODWORD(v363) & 0x807FFFFF | 0x3F800000))+ -1.6667)+ (float)((LODWORD(v363) >> 23) - 127))* 0.69315)- v25));
          if (v364 < 0)
          {
            v365 = 0;
            v366 = 0;
            goto LABEL_254;
          }
          if (v24 * v22 <= v364)
          {
            v365 = v22 - 1;
            v366 = v23 - 1;
            if ((_DWORD)v23 != 1)
              goto LABEL_254;
          }
          else
          {
            v365 = v364 / v24;
            v366 = v364 % v24;
            if (v366)
              goto LABEL_254;
          }
          if (v365 <= 0)
            v366 = 0;
          else
            v366 = v23 - 1;
          v365 -= v365 > 0;
LABEL_254:
          v367 = v270 * 1.4142;
          v368 = (float)(1 << v365);
          v369 = v30 * (float)(1.0 / v368);
          v370 = v31 * (float)(1.0 / v368);
          v371 = v367 / v368;
          v372 = (unint64_t *)(v35 + 144 * (v23 * v365 + v366));
          v373 = v372[5];
          v374 = (float)(v367 / v368) * 0.0;
          v375 = (float)(v374 + v369) - v374;
          v376 = (float)v372[4] + -1.001;
          if (v376 >= v375)
            v376 = (float)(v374 + v369) - v374;
          if (v375 >= 0.0)
            v377 = v376;
          else
            v377 = 0.0;
          v378 = v370 + (float)(v374 * 0.0);
          v379 = (float)v372[6] + -1.001;
          if (v379 >= (float)(v378 - v371))
            v379 = v378 - v371;
          if ((float)(v378 - v371) >= 0.0)
            v380 = v379;
          else
            v380 = 0.0;
          v381 = v380;
          v382 = v377 + 1;
          v383 = v372[11] + 4 * v373 * v381;
          v384 = (float)(*(float *)(v383 + 4 * v373 + 4 * v382)
                       * (float)((float)(v377 - (float)v377) * (float)(v380 - (float)v380)))
               + (float)((float)(*(float *)(v383 + 4 * v373 + 4 * v377)
                               * (float)((float)((float)v382 - v377) * (float)(v380 - (float)v380)))
                       + (float)((float)(*(float *)(v383 + 4 * v377)
                                       * (float)((float)((float)v382 - v377)
                                               * (float)((float)(v381 + 1) - v380)))
                               + (float)(*(float *)(v383 + 4 * v382)
                                       * (float)((float)(v377 - (float)v377)
                                               * (float)((float)(v381 + 1) - v380)))));
          v1752 = 0xBF80000000000000;
          v1753 = LODWORD(v367) | ((unint64_t)(int)(float)(v384 * 255.0) << 32);
          v385 = v372[5];
          v386 = v371 * 0.70711;
          v387 = (float)(v371 * 0.70711) + v369;
          v388 = v374 * 0.5;
          v389 = v387 + (float)(v374 * 0.5);
          v390 = (float)v372[4] + -1.001;
          if (v390 >= v389)
            v390 = v387 + (float)(v374 * 0.5);
          if (v389 < 0.0)
            v390 = 0.0;
          v391 = v374 * 0.70711;
          v392 = v370 + (float)(v374 * 0.70711);
          v393 = v371 * 0.5;
          v394 = (float)(v371 * 0.5) + v392;
          v395 = (float)v372[6] + -1.001;
          if (v395 >= v394)
            v395 = (float)(v371 * 0.5) + v392;
          if (v394 >= 0.0)
            v396 = v395;
          else
            v396 = 0.0;
          v397 = v390;
          v398 = v396;
          v399 = v390 + 1;
          v400 = v372[11] + 4 * v385 * v398;
          v401 = v400 + 4 * v385;
          v402 = (float)v399 - v390;
          v403 = (float)(v398 + 1) - v396;
          v404 = v402 * v403;
          v405 = v390 - (float)v390;
          v406 = v405 * v403;
          v407 = v396 - (float)v396;
          v408 = v405 * v407;
          v409 = 4 * v399;
          v410 = (float)(*(float *)(v401 + 4 * v397) * (float)(v402 * v407))
               + (float)((float)(*(float *)(v400 + 4 * v397) * v404) + (float)(*(float *)(v400 + v409) * v406));
          v411 = *(float *)(v401 + v409);
          v1754 = 0x3F0000003F3504F3;
          v1755 = LODWORD(v367) | ((unint64_t)(int)(float)((float)((float)(v411 * v408) + v410)
                                                                              * 255.0) << 32);
          v412 = v372[5];
          v413 = v374 * -0.5;
          v414 = v387 + (float)(v374 * -0.5);
          v415 = (float)v372[4] + -1.001;
          if (v415 >= v414)
            v415 = v414;
          if (v414 < 0.0)
            v415 = 0.0;
          v416 = v371 * -0.5;
          v417 = (float)(v371 * -0.5) + v392;
          v418 = (float)v372[6] + -1.001;
          if (v418 >= v417)
            v418 = v417;
          if (v417 >= 0.0)
            v419 = v418;
          else
            v419 = 0.0;
          v420 = v419;
          v421 = v415 + 1;
          v422 = v372[11] + 4 * v412 * v420;
          v423 = (float)((float)(*(float *)(v422 + 4 * v412 + 4 * v421)
                               * (float)((float)(v415 - (float)v415)
                                       * (float)(v419 - (float)v419)))
                       + (float)((float)(*(float *)(v422 + 4 * v412 + 4 * v415)
                                       * (float)((float)((float)v421 - v415) * (float)(v419 - (float)v419)))
                               + (float)((float)(*(float *)(v422 + 4 * v415)
                                               * (float)((float)((float)v421 - v415)
                                                       * (float)((float)(v420 + 1) - v419)))
                                       + (float)(*(float *)(v422 + 4 * v421)
                                               * (float)((float)(v415 - (float)v415)
                                                       * (float)((float)(v420 + 1) - v419))))))
               * 255.0;
          v1756 = 0xBF0000003F3504F3;
          v1757 = LODWORD(v367) | ((unint64_t)(int)v423 << 32);
          v424 = v372[5];
          v425 = v374 + (float)(v374 + v369);
          v426 = (float)v372[4] + -1.001;
          if (v426 >= v425)
            v426 = v425;
          if (v425 >= 0.0)
            v427 = v426;
          else
            v427 = 0.0;
          v428 = v371 + v378;
          v429 = (float)v372[6] + -1.001;
          if (v429 >= v428)
            v429 = v428;
          if (v428 >= 0.0)
            v430 = v429;
          else
            v430 = 0.0;
          v431 = v427;
          v432 = v430;
          v433 = v427 + 1;
          v434 = v372[11] + 4 * v424 * v432;
          v435 = v434 + 4 * v424;
          v436 = (float)v433 - v427;
          v437 = (float)(v432 + 1) - v430;
          v438 = v436 * v437;
          v439 = v427 - (float)v427;
          v440 = v430 - (float)v430;
          v441 = v436 * v440;
          v442 = v439 * v440;
          v443 = 4 * v433;
          v444 = (float)(*(float *)(v435 + 4 * v431) * v441)
               + (float)((float)(*(float *)(v434 + 4 * v431) * v438)
                       + (float)(*(float *)(v434 + v443) * (float)(v439 * v437)));
          v445 = *(float *)(v435 + v443);
          v1758 = 0x3F80000000000000;
          v1759 = LODWORD(v367) | ((unint64_t)(int)(float)((float)((float)(v445 * v442) + v444)
                                                                              * 255.0) << 32);
          v446 = v372[5];
          v447 = v369 - v386;
          v448 = (float)v372[4] + -1.001;
          if (v448 >= (float)(v447 + v413))
            v448 = v447 + v413;
          if ((float)(v447 + v413) >= 0.0)
            v449 = v448;
          else
            v449 = 0.0;
          v450 = v370 - v391;
          v451 = (float)v372[6] + -1.001;
          if (v451 >= (float)(v416 + v450))
            v451 = v416 + v450;
          if ((float)(v416 + v450) >= 0.0)
            v452 = v451;
          else
            v452 = 0.0;
          v453 = v452;
          v454 = v449 + 1;
          v455 = v372[11] + 4 * v446 * v453;
          v456 = (float)((float)(*(float *)(v455 + 4 * v446 + 4 * v454)
                               * (float)((float)(v449 - (float)v449)
                                       * (float)(v452 - (float)v452)))
                       + (float)((float)(*(float *)(v455 + 4 * v446 + 4 * v449)
                                       * (float)((float)((float)v454 - v449) * (float)(v452 - (float)v452)))
                               + (float)((float)(*(float *)(v455 + 4 * v449)
                                               * (float)((float)((float)v454 - v449)
                                                       * (float)((float)(v453 + 1) - v452)))
                                       + (float)(*(float *)(v455 + 4 * v454)
                                               * (float)((float)(v449 - (float)v449)
                                                       * (float)((float)(v453 + 1) - v452))))))
               * 255.0;
          v1760 = 0xBF000000BF3504F3;
          v1761 = LODWORD(v367) | ((unint64_t)(int)v456 << 32);
          v457 = v372[11];
          v459 = v372[4];
          v458 = v372[5];
          v460 = v372[6];
          v461 = v447 + v388;
          v462 = (float)v459 + -1.001;
          if (v462 >= v461)
            v462 = v461;
          if (v461 >= 0.0)
            v463 = v462;
          else
            v463 = 0.0;
          v464 = v393 + v450;
          v465 = (float)v460 + -1.001;
          if (v465 >= v464)
            v465 = v464;
          if (v464 < 0.0)
            v465 = 0.0;
          v466 = v463;
          v467 = v465;
          v468 = v463 + 1;
          v469 = v457 + 4 * v458 * v467;
          v470 = v469 + 4 * v458;
          v471 = (float)v468 - v463;
          v472 = (float)(v467 + 1) - v465;
          v473 = v471 * v472;
          v474 = v463 - (float)v463;
          v475 = v465 - (float)v465;
          v476 = v471 * v475;
          v477 = v474 * v475;
          v478 = 4 * v468;
          v479 = (float)(*(float *)(v470 + 4 * v466) * v476)
               + (float)((float)(*(float *)(v469 + 4 * v466) * v473)
                       + (float)(*(float *)(v469 + v478) * (float)(v474 * v472)));
          v480 = *(float *)(v470 + v478);
          v1762 = 0x3F000000BF3504F3;
          v1763 = LODWORD(v367) | ((unint64_t)(int)(float)((float)((float)(v480 * v477) + v479)
                                                                              * 255.0) << 32);
          v481 = v363 * 1.4142;
          v482 = vcvtms_s32_f32(v26* (float)((float)((float)((float)((float)((float)((float)(COERCE_FLOAT(LODWORD(v481) & 0x807FFFFF | 0x3F800000)* -0.33333)+ 2.0)* COERCE_FLOAT(LODWORD(v481) & 0x807FFFFF | 0x3F800000))+ -1.6667)+ (float)((LODWORD(v481) >> 23) - 127))* 0.69315)- v25));
          if (v482 < 0)
          {
            v483 = 0;
            v484 = 0;
            goto LABEL_321;
          }
          if (v24 * v22 <= v482)
          {
            v483 = v22 - 1;
            v484 = v23 - 1;
            if ((_DWORD)v23 != 1)
              goto LABEL_321;
          }
          else
          {
            v483 = v482 / v24;
            v484 = v482 % v24;
            if (v484)
              goto LABEL_321;
          }
          if (v483 <= 0)
            v484 = 0;
          else
            v484 = v23 - 1;
          v483 -= v483 > 0;
LABEL_321:
          v485 = (float)(1 << v483);
          v486 = v367 * 1.4142;
          v487 = v30 * (float)(1.0 / v485);
          v488 = v31 * (float)(1.0 / v485);
          v489 = v486 / v485;
          v490 = (unint64_t *)(v35 + 144 * (v23 * v483 + v484));
          v491 = v490[5];
          v492 = v489 * 0.5;
          v493 = v487 - (float)(v489 * 0.5);
          v494 = v489 * 0.0;
          v495 = (float)(v489 * 0.0) * 0.70711;
          v496 = (float)v490[4] + -1.001;
          if (v496 >= (float)(v493 + v495))
            v496 = v493 + v495;
          if ((float)(v493 + v495) < 0.0)
            v496 = 0.0;
          v497 = v494 * 0.5;
          v498 = v488 - (float)(v494 * 0.5);
          v499 = (float)(v489 * 0.70711) + v498;
          v500 = (float)v490[6] + -1.001;
          if (v500 >= v499)
            v500 = (float)(v489 * 0.70711) + v498;
          if (v499 >= 0.0)
            v501 = v500;
          else
            v501 = 0.0;
          v502 = v501;
          v503 = v496 + 1;
          v504 = v490[11] + 4 * v491 * v502;
          v505 = (float)(*(float *)(v504 + 4 * v491 + 4 * v503)
                       * (float)((float)(v496 - (float)v496) * (float)(v501 - (float)v501)))
               + (float)((float)(*(float *)(v504 + 4 * v491 + 4 * v496)
                               * (float)((float)((float)v503 - v496) * (float)(v501 - (float)v501)))
                       + (float)((float)(*(float *)(v504 + 4 * v496)
                                       * (float)((float)((float)v503 - v496)
                                               * (float)((float)(v502 + 1) - v501)))
                               + (float)(*(float *)(v504 + 4 * v503)
                                       * (float)((float)(v496 - (float)v496)
                                               * (float)((float)(v502 + 1) - v501)))));
          v1764 = 0x3F3504F3BF000000;
          v1765 = LODWORD(v486) | ((unint64_t)(int)(float)(v505 * 255.0) << 32);
          v506 = v490[5];
          v507 = v492 + v487;
          v508 = (float)(v492 + v487) + v495;
          v509 = (float)v490[4] + -1.001;
          if (v509 >= v508)
            v509 = v508;
          if (v508 >= 0.0)
            v510 = v509;
          else
            v510 = 0.0;
          v511 = v488 + v497;
          v512 = (float)(v489 * 0.70711) + (float)(v488 + v497);
          v513 = (float)v490[6] + -1.001;
          if (v513 >= v512)
            v513 = v512;
          if (v512 >= 0.0)
            v514 = v513;
          else
            v514 = 0.0;
          v515 = v514;
          v516 = v510 + 1;
          v517 = v515 + 1;
          v518 = v490[11] + 4 * v506 * v515;
          v519 = LODWORD(v486) | ((unint64_t)(int)(float)((float)((float)(*(float *)(v518 + 4 * v506 + 4 * v516)
                                                                                             * (float)((float)(v510 - (float)v510) * (float)(v514 - (float)v514)))
                                                                                     + (float)((float)(*(float *)(v518 + 4 * v506 + 4 * v510) * (float)((float)((float)v516 - v510) * (float)(v514 - (float)v514)))
                                                                                             + (float)((float)(*(float *)(v518 + 4 * v510) * (float)((float)((float)v516 - v510) * (float)((float)v517 - v514))) + (float)(*(float *)(v518 + 4 * v516) * (float)((float)(v510 - (float)v510) * (float)((float)v517 - v514))))))
                                                                             * 255.0) << 32);
          v1766 = 0x3F3504F33F000000;
          v1767 = v519;
          v520 = v490[5];
          v521 = (float)(v489 + v487) + (float)(v494 * 0.0);
          v522 = (float)v490[4] + -1.001;
          if (v522 >= v521)
            v522 = (float)(v489 + v487) + (float)(v494 * 0.0);
          if (v521 >= 0.0)
            v523 = v522;
          else
            v523 = 0.0;
          v524 = v494 + (float)(v494 + v488);
          v525 = (float)v490[6] + -1.001;
          if (v525 >= v524)
            v525 = v494 + (float)(v494 + v488);
          if (v524 >= 0.0)
            v526 = v525;
          else
            v526 = 0.0;
          v527 = v526;
          v528 = v523 + 1;
          v529 = v490[11] + 4 * v520 * v527;
          v530 = LODWORD(v486) | ((unint64_t)(int)(float)((float)((float)(*(float *)(v529 + 4 * v520 + 4 * v528)
                                                                                             * (float)((float)(v523 - (float)v523) * (float)(v526 - (float)v526)))
                                                                                     + (float)((float)(*(float *)(v529 + 4 * v520 + 4 * v523) * (float)((float)((float)v528 - v523) * (float)(v526 - (float)v526)))
                                                                                             + (float)((float)(*(float *)(v529 + 4 * v523) * (float)((float)((float)v528 - v523) * (float)((float)(v527 + 1) - v526))) + (float)(*(float *)(v529 + 4 * v528) * (float)((float)(v523 - (float)v523) * (float)((float)(v527 + 1) - v526))))))
                                                                             * 255.0) << 32);
          v1768 = 1065353216;
          v1769 = v530;
          v531 = v490[5];
          v532 = v507 + (float)(v494 * -0.70711);
          v533 = (float)v490[4] + -1.001;
          if (v533 >= v532)
            v533 = v532;
          if (v532 >= 0.0)
            v534 = v533;
          else
            v534 = 0.0;
          v535 = (float)(v489 * -0.70711) + v511;
          v536 = (float)v490[6] + -1.001;
          if (v536 >= v535)
            v536 = v535;
          if (v535 >= 0.0)
            v537 = v536;
          else
            v537 = 0.0;
          v538 = v534;
          v539 = v537;
          v540 = v534 + 1;
          v541 = v490[11] + 4 * v531 * v539;
          v542 = v541 + 4 * v531;
          v543 = (float)v540 - v534;
          v544 = (float)(v539 + 1) - v537;
          v545 = v543 * v544;
          v546 = v534 - (float)v534;
          v547 = v546 * v544;
          v548 = v537 - (float)v537;
          v549 = v546 * v548;
          v550 = 4 * v540;
          v551 = (float)(*(float *)(v542 + 4 * v538) * (float)(v543 * v548))
               + (float)((float)(*(float *)(v541 + 4 * v538) * v545) + (float)(*(float *)(v541 + v550) * v547));
          v552 = *(float *)(v542 + v550);
          v1770 = 0xBF3504F33F000000;
          v1771 = LODWORD(v486) | ((unint64_t)(int)(float)((float)((float)(v552 * v549) + v551)
                                                                              * 255.0) << 32);
          v553 = v490[5];
          v554 = v493 + (float)(v494 * -0.70711);
          v555 = (float)v490[4] + -1.001;
          if (v555 >= v554)
            v555 = v554;
          if (v554 >= 0.0)
            v556 = v555;
          else
            v556 = 0.0;
          v557 = (float)(v489 * -0.70711) + v498;
          v558 = (float)v490[6] + -1.001;
          if (v558 >= v557)
            v558 = v557;
          if (v557 >= 0.0)
            v559 = v558;
          else
            v559 = 0.0;
          v560 = v559;
          v561 = v556 + 1;
          v562 = v560 + 1;
          v563 = v490[11] + 4 * v553 * v560;
          v564 = (float)((float)(*(float *)(v563 + 4 * v553 + 4 * v561)
                               * (float)((float)(v556 - (float)v556)
                                       * (float)(v559 - (float)v559)))
                       + (float)((float)(*(float *)(v563 + 4 * v553 + 4 * v556)
                                       * (float)((float)((float)v561 - v556) * (float)(v559 - (float)v559)))
                               + (float)((float)(*(float *)(v563 + 4 * v556)
                                               * (float)((float)((float)v561 - v556) * (float)((float)v562 - v559)))
                                       + (float)(*(float *)(v563 + 4 * v561)
                                               * (float)((float)(v556 - (float)v556)
                                                       * (float)((float)v562 - v559))))))
               * 255.0;
          v1772 = 0xBF3504F3BF000000;
          v1773 = LODWORD(v486) | ((unint64_t)(int)v564 << 32);
          v565 = v490[11];
          v567 = v490[4];
          v566 = v490[5];
          v568 = v490[6];
          v569 = (float)(v487 - v489) + (float)(v494 * 0.0);
          v570 = (float)v567 + -1.001;
          if (v570 >= v569)
            v570 = v569;
          if (v569 >= 0.0)
            v571 = v570;
          else
            v571 = 0.0;
          v572 = v494 + (float)(v488 - v494);
          v573 = (float)v568 + -1.001;
          if (v573 >= v572)
            v573 = v572;
          if (v572 >= 0.0)
            v574 = v573;
          else
            v574 = 0.0;
          v575 = v574;
          v576 = v571 + 1;
          v577 = v565 + 4 * v566 * v575;
          v578 = LODWORD(v486) | ((unint64_t)(int)(float)((float)((float)(*(float *)(v577 + 4 * v566 + 4 * v576)
                                                                                             * (float)((float)(v571 - (float)v571) * (float)(v574 - (float)v574)))
                                                                                     + (float)((float)(*(float *)(v577 + 4 * v566 + 4 * v571) * (float)((float)((float)v576 - v571) * (float)(v574 - (float)v574)))
                                                                                             + (float)((float)(*(float *)(v577 + 4 * v571) * (float)((float)((float)v576 - v571) * (float)((float)(v575 + 1) - v574))) + (float)(*(float *)(v577 + 4 * v576) * (float)((float)(v571 - (float)v571) * (float)((float)(v575 + 1) - v574))))))
                                                                             * 255.0) << 32);
          v1774 = 3212836864;
          v1775 = v578;
          v579 = v481 * 1.4142;
          v580 = vcvtms_s32_f32(v26* (float)((float)((float)((float)((float)((float)((float)(COERCE_FLOAT(COERCE_UNSIGNED_INT(v481 * 1.4142) & 0x807FFFFF | 0x3F800000)* -0.33333)+ 2.0)* COERCE_FLOAT(COERCE_UNSIGNED_INT(v481 * 1.4142) & 0x807FFFFF | 0x3F800000))+ -1.6667)+ (float)((COERCE_UNSIGNED_INT(v481 * 1.4142) >> 23) - 127))* 0.69315)- v25));
          if (v580 < 0)
          {
            v581 = 0;
            v582 = 0;
            goto LABEL_390;
          }
          if (v24 * v22 <= v580)
          {
            v581 = v22 - 1;
            v582 = v23 - 1;
            if ((_DWORD)v23 != 1)
              goto LABEL_390;
          }
          else
          {
            v581 = v580 / v24;
            v582 = v580 % v24;
            if (v582)
              goto LABEL_390;
          }
          if (v581 <= 0)
            v582 = 0;
          else
            v582 = v23 - 1;
          v581 -= v581 > 0;
LABEL_390:
          v583 = v486 * 1.4142;
          v584 = (float)(1 << v581);
          v585 = v30 * (float)(1.0 / v584);
          v586 = v31 * (float)(1.0 / v584);
          v587 = v583 / v584;
          v588 = (unint64_t *)(v35 + 144 * (v23 * v581 + v582));
          v589 = v588[5];
          v590 = (float)(v583 / v584) * 0.0;
          v591 = (float)(v590 + v585) - v590;
          v592 = (float)v588[4] + -1.001;
          if (v592 >= v591)
            v592 = (float)(v590 + v585) - v590;
          if (v591 >= 0.0)
            v593 = v592;
          else
            v593 = 0.0;
          v594 = v586 + (float)(v590 * 0.0);
          v595 = (float)v588[6] + -1.001;
          if (v595 >= (float)(v594 - v587))
            v595 = v594 - v587;
          if ((float)(v594 - v587) >= 0.0)
            v596 = v595;
          else
            v596 = 0.0;
          v597 = v596;
          v598 = v593 + 1;
          v599 = v588[11] + 4 * v589 * v597;
          v600 = (float)(*(float *)(v599 + 4 * v589 + 4 * v598)
                       * (float)((float)(v593 - (float)v593) * (float)(v596 - (float)v596)))
               + (float)((float)(*(float *)(v599 + 4 * v589 + 4 * v593)
                               * (float)((float)((float)v598 - v593) * (float)(v596 - (float)v596)))
                       + (float)((float)(*(float *)(v599 + 4 * v593)
                                       * (float)((float)((float)v598 - v593)
                                               * (float)((float)(v597 + 1) - v596)))
                               + (float)(*(float *)(v599 + 4 * v598)
                                       * (float)((float)(v593 - (float)v593)
                                               * (float)((float)(v597 + 1) - v596)))));
          v1776 = 0xBF80000000000000;
          v1777 = LODWORD(v583) | ((unint64_t)(int)(float)(v600 * 255.0) << 32);
          v601 = v588[5];
          v602 = v587 * 0.70711;
          v603 = (float)(v587 * 0.70711) + v585;
          v604 = v590 * 0.5;
          v605 = v603 + (float)(v590 * 0.5);
          v606 = (float)v588[4] + -1.001;
          if (v606 >= v605)
            v606 = v603 + (float)(v590 * 0.5);
          if (v605 < 0.0)
            v606 = 0.0;
          v607 = v590 * 0.70711;
          v608 = v586 + (float)(v590 * 0.70711);
          v609 = v587 * 0.5;
          v610 = (float)(v587 * 0.5) + v608;
          v611 = (float)v588[6] + -1.001;
          if (v611 >= v610)
            v611 = (float)(v587 * 0.5) + v608;
          if (v610 >= 0.0)
            v612 = v611;
          else
            v612 = 0.0;
          v613 = v606;
          v614 = v612;
          v615 = v606 + 1;
          v616 = v588[11] + 4 * v601 * v614;
          v617 = v616 + 4 * v601;
          v618 = (float)v615 - v606;
          v619 = (float)(v614 + 1) - v612;
          v620 = v618 * v619;
          v621 = v606 - (float)v606;
          v622 = v621 * v619;
          v623 = v612 - (float)v612;
          v624 = v621 * v623;
          v625 = 4 * v615;
          v626 = (float)(*(float *)(v617 + 4 * v613) * (float)(v618 * v623))
               + (float)((float)(*(float *)(v616 + 4 * v613) * v620) + (float)(*(float *)(v616 + v625) * v622));
          v627 = *(float *)(v617 + v625);
          v1778 = 0x3F0000003F3504F3;
          v1779 = LODWORD(v583) | ((unint64_t)(int)(float)((float)((float)(v627 * v624) + v626)
                                                                              * 255.0) << 32);
          v628 = v588[5];
          v629 = v590 * -0.5;
          v630 = v603 + (float)(v590 * -0.5);
          v631 = (float)v588[4] + -1.001;
          if (v631 >= v630)
            v631 = v630;
          if (v630 < 0.0)
            v631 = 0.0;
          v632 = v587 * -0.5;
          v633 = (float)(v587 * -0.5) + v608;
          v634 = (float)v588[6] + -1.001;
          if (v634 >= v633)
            v634 = v633;
          if (v633 >= 0.0)
            v635 = v634;
          else
            v635 = 0.0;
          v636 = v635;
          v637 = v631 + 1;
          v638 = v588[11] + 4 * v628 * v636;
          v639 = (float)((float)(*(float *)(v638 + 4 * v628 + 4 * v637)
                               * (float)((float)(v631 - (float)v631)
                                       * (float)(v635 - (float)v635)))
                       + (float)((float)(*(float *)(v638 + 4 * v628 + 4 * v631)
                                       * (float)((float)((float)v637 - v631) * (float)(v635 - (float)v635)))
                               + (float)((float)(*(float *)(v638 + 4 * v631)
                                               * (float)((float)((float)v637 - v631)
                                                       * (float)((float)(v636 + 1) - v635)))
                                       + (float)(*(float *)(v638 + 4 * v637)
                                               * (float)((float)(v631 - (float)v631)
                                                       * (float)((float)(v636 + 1) - v635))))))
               * 255.0;
          v1780 = 0xBF0000003F3504F3;
          v1781 = LODWORD(v583) | ((unint64_t)(int)v639 << 32);
          v640 = v588[5];
          v641 = v590 + (float)(v590 + v585);
          v642 = (float)v588[4] + -1.001;
          if (v642 >= v641)
            v642 = v641;
          if (v641 >= 0.0)
            v643 = v642;
          else
            v643 = 0.0;
          v644 = v587 + v594;
          v645 = (float)v588[6] + -1.001;
          if (v645 >= v644)
            v645 = v644;
          if (v644 >= 0.0)
            v646 = v645;
          else
            v646 = 0.0;
          v647 = v643;
          v648 = v646;
          v649 = v643 + 1;
          v650 = v588[11] + 4 * v640 * v648;
          v651 = v650 + 4 * v640;
          v652 = (float)v649 - v643;
          v653 = (float)(v648 + 1) - v646;
          v654 = v652 * v653;
          v655 = v643 - (float)v643;
          v656 = v646 - (float)v646;
          v657 = v652 * v656;
          v658 = v655 * v656;
          v659 = 4 * v649;
          v660 = (float)(*(float *)(v651 + 4 * v647) * v657)
               + (float)((float)(*(float *)(v650 + 4 * v647) * v654)
                       + (float)(*(float *)(v650 + v659) * (float)(v655 * v653)));
          v661 = *(float *)(v651 + v659);
          v1782 = 0x3F80000000000000;
          v1783 = LODWORD(v583) | ((unint64_t)(int)(float)((float)((float)(v661 * v658) + v660)
                                                                              * 255.0) << 32);
          v662 = v588[5];
          v663 = v585 - v602;
          v664 = (float)v588[4] + -1.001;
          if (v664 >= (float)(v663 + v629))
            v664 = v663 + v629;
          if ((float)(v663 + v629) >= 0.0)
            v665 = v664;
          else
            v665 = 0.0;
          v666 = v586 - v607;
          v667 = (float)v588[6] + -1.001;
          if (v667 >= (float)(v632 + v666))
            v667 = v632 + v666;
          if ((float)(v632 + v666) >= 0.0)
            v668 = v667;
          else
            v668 = 0.0;
          v669 = v668;
          v670 = v665 + 1;
          v671 = v588[11] + 4 * v662 * v669;
          v672 = (float)((float)(*(float *)(v671 + 4 * v662 + 4 * v670)
                               * (float)((float)(v665 - (float)v665)
                                       * (float)(v668 - (float)v668)))
                       + (float)((float)(*(float *)(v671 + 4 * v662 + 4 * v665)
                                       * (float)((float)((float)v670 - v665) * (float)(v668 - (float)v668)))
                               + (float)((float)(*(float *)(v671 + 4 * v665)
                                               * (float)((float)((float)v670 - v665)
                                                       * (float)((float)(v669 + 1) - v668)))
                                       + (float)(*(float *)(v671 + 4 * v670)
                                               * (float)((float)(v665 - (float)v665)
                                                       * (float)((float)(v669 + 1) - v668))))))
               * 255.0;
          v1784 = 0xBF000000BF3504F3;
          v1785 = LODWORD(v583) | ((unint64_t)(int)v672 << 32);
          v673 = v588[11];
          v675 = v588[4];
          v674 = v588[5];
          v676 = v588[6];
          v677 = v663 + v604;
          v678 = (float)v675 + -1.001;
          if (v678 >= v677)
            v678 = v677;
          if (v677 >= 0.0)
            v679 = v678;
          else
            v679 = 0.0;
          v680 = v609 + v666;
          v681 = (float)v676 + -1.001;
          if (v681 >= v680)
            v681 = v680;
          if (v680 < 0.0)
            v681 = 0.0;
          v682 = v679;
          v683 = v681;
          v684 = v679 + 1;
          v685 = v673 + 4 * v674 * v683;
          v686 = v685 + 4 * v674;
          v687 = (float)v684 - v679;
          v688 = (float)(v683 + 1) - v681;
          v689 = v687 * v688;
          v690 = v679 - (float)v679;
          v691 = v681 - (float)v681;
          v692 = v687 * v691;
          v693 = v690 * v691;
          v694 = 4 * v684;
          v695 = (float)(*(float *)(v686 + 4 * v682) * v692)
               + (float)((float)(*(float *)(v685 + 4 * v682) * v689)
                       + (float)(*(float *)(v685 + v694) * (float)(v690 * v688)));
          v696 = *(float *)(v686 + v694);
          v1786 = 0x3F000000BF3504F3;
          v1787 = LODWORD(v583) | ((unint64_t)(int)(float)((float)((float)(v696 * v693) + v695)
                                                                              * 255.0) << 32);
          v697 = vcvtms_s32_f32(v26* (float)((float)((float)((float)((float)((float)((float)(COERCE_FLOAT(COERCE_UNSIGNED_INT(v579 * 1.4142) & 0x807FFFFF | 0x3F800000)* -0.33333)+ 2.0)* COERCE_FLOAT(COERCE_UNSIGNED_INT(v579 * 1.4142) & 0x807FFFFF | 0x3F800000))+ -1.6667)+ (float)((COERCE_UNSIGNED_INT(v579 * 1.4142) >> 23) - 127))* 0.69315)- v25));
          if (v697 < 0)
          {
            v698 = 0;
            v699 = 0;
          }
          else if (v24 * v22 <= v697)
          {
            v698 = v22 - 1;
            v699 = v23 - 1;
            if ((_DWORD)v23 == 1)
            {
LABEL_453:
              if (v698 <= 0)
                v699 = 0;
              else
                v699 = v23 - 1;
              v698 -= v698 > 0;
            }
          }
          else
          {
            v698 = v697 / v24;
            v699 = v697 % v24;
            if (!v699)
              goto LABEL_453;
          }
          v700 = 0;
          v701 = (float)(1 << v698);
          v702 = v583 * 1.4142;
          v703 = v30 * (float)(1.0 / v701);
          v704 = v31 * (float)(1.0 / v701);
          v705 = (float)(v583 * 1.4142) / v701;
          v706 = (unint64_t *)(v35 + 144 * (v23 * v698 + v699));
          v707 = v706[5];
          v708 = v703 - (float)(v705 * 0.5);
          v709 = v705 * 0.0;
          v710 = (float)(v705 * 0.0) * 0.70711;
          v711 = (float)v706[4] + -1.001;
          if (v711 >= (float)(v708 + v710))
            v711 = v708 + v710;
          if ((float)(v708 + v710) >= 0.0)
            v712 = v711;
          else
            v712 = 0.0;
          v713 = v709 * 0.5;
          v714 = v704 - (float)(v709 * 0.5);
          v715 = (float)(v705 * 0.70711) + v714;
          v716 = (float)v706[6] + -1.001;
          if (v716 >= v715)
            v716 = (float)(v705 * 0.70711) + v714;
          if (v715 >= 0.0)
            v717 = v716;
          else
            v717 = 0.0;
          v718 = v717;
          v719 = v712 + 1;
          v720 = v706[11] + 4 * v707 * v718;
          v721 = (float)(*(float *)(v720 + 4 * v707 + 4 * v719)
                       * (float)((float)(v712 - (float)v712) * (float)(v717 - (float)v717)))
               + (float)((float)(*(float *)(v720 + 4 * v707 + 4 * v712)
                               * (float)((float)((float)v719 - v712) * (float)(v717 - (float)v717)))
                       + (float)((float)(*(float *)(v720 + 4 * v712)
                                       * (float)((float)((float)v719 - v712)
                                               * (float)((float)(v718 + 1) - v717)))
                               + (float)(*(float *)(v720 + 4 * v719)
                                       * (float)((float)(v712 - (float)v712)
                                               * (float)((float)(v718 + 1) - v717)))));
          v722 = LODWORD(v702);
          v1788 = 0x3F3504F3BF000000;
          v1789 = LODWORD(v702) | ((unint64_t)(int)(float)(v721 * 255.0) << 32);
          v723 = v706[5];
          v724 = (float)(v705 * 0.5) + v703;
          v725 = v724 + v710;
          v726 = (float)v706[4] + -1.001;
          if (v726 >= v725)
            v726 = v725;
          if (v725 >= 0.0)
            v727 = v726;
          else
            v727 = 0.0;
          v728 = v704 + v713;
          v729 = (float)(v705 * 0.70711) + (float)(v704 + v713);
          v730 = (float)v706[6] + -1.001;
          if (v730 >= v729)
            v730 = v729;
          if (v729 >= 0.0)
            v731 = v730;
          else
            v731 = 0.0;
          v732 = v731;
          v733 = v706[11] + 4 * v723 * v732;
          v734 = v727 + 1;
          v735 = v722 | ((unint64_t)(int)(float)((float)((float)(*(float *)(v733
                                                                                               + 4 * v723
                                                                                               + 4 * v734)
                                                                                    * (float)((float)(v727 - (float)v727)
                                                                                            * (float)(v731 - (float)v731)))
                                                                            + (float)((float)(*(float *)(v733 + 4 * v723 + 4 * v727)
                                                                                            * (float)((float)((float)v734 - v727) * (float)(v731 - (float)v731)))
                                                                                    + (float)((float)(*(float *)(v733 + 4 * v727) * (float)((float)((float)v734 - v727) * (float)((float)(v732 + 1) - v731)))
                                                                                            + (float)(*(float *)(v733 + 4 * v734) * (float)((float)(v727 - (float)v727) * (float)((float)(v732 + 1) - v731))))))
                                                                    * 255.0) << 32);
          v1790 = 0x3F3504F33F000000;
          v1791 = v735;
          v736 = v706[5];
          v737 = (float)(v705 + v703) + (float)(v709 * 0.0);
          v738 = (float)v706[4] + -1.001;
          if (v738 >= v737)
            v738 = (float)(v705 + v703) + (float)(v709 * 0.0);
          if (v737 >= 0.0)
            v739 = v738;
          else
            v739 = 0.0;
          v740 = v709 + (float)(v709 + v704);
          v741 = (float)v706[6] + -1.001;
          if (v741 >= v740)
            v741 = v709 + (float)(v709 + v704);
          if (v740 >= 0.0)
            v742 = v741;
          else
            v742 = 0.0;
          v743 = v742;
          v744 = v706[11] + 4 * v736 * v743;
          v745 = v739 + 1;
          v746 = v722 | ((unint64_t)(int)(float)((float)((float)(*(float *)(v744
                                                                                               + 4 * v736
                                                                                               + 4 * v745)
                                                                                    * (float)((float)(v739 - (float)v739)
                                                                                            * (float)(v742 - (float)v742)))
                                                                            + (float)((float)(*(float *)(v744 + 4 * v736 + 4 * v739)
                                                                                            * (float)((float)((float)v745 - v739) * (float)(v742 - (float)v742)))
                                                                                    + (float)((float)(*(float *)(v744 + 4 * v739) * (float)((float)((float)v745 - v739) * (float)((float)(v743 + 1) - v742)))
                                                                                            + (float)(*(float *)(v744 + 4 * v745) * (float)((float)(v739 - (float)v739) * (float)((float)(v743 + 1) - v742))))))
                                                                    * 255.0) << 32);
          v1792 = 1065353216;
          v1793 = v746;
          v747 = v706[5];
          v748 = v724 + (float)(v709 * -0.70711);
          v749 = (float)v706[4] + -1.001;
          if (v749 >= v748)
            v749 = v748;
          if (v748 >= 0.0)
            v750 = v749;
          else
            v750 = 0.0;
          v751 = (float)(v705 * -0.70711) + v728;
          v752 = (float)v706[6] + -1.001;
          if (v752 >= v751)
            v752 = v751;
          if (v751 >= 0.0)
            v753 = v752;
          else
            v753 = 0.0;
          v754 = v750;
          v755 = v753;
          v756 = v706[11] + 4 * v747 * v755;
          v757 = (float)(v755 + 1);
          LODWORD(v755) = v750 + 1;
          v758 = v756 + 4 * v747;
          v759 = (float)v755 - v750;
          v760 = v757 - v753;
          v761 = v759 * v760;
          v762 = v750 - (float)v750;
          v763 = v762 * v760;
          v764 = v753 - (float)v753;
          v765 = v762 * v764;
          v766 = 4 * v755;
          v767 = (float)(*(float *)(v758 + 4 * v754) * (float)(v759 * v764))
               + (float)((float)(*(float *)(v756 + 4 * v754) * v761) + (float)(*(float *)(v756 + v766) * v763));
          v768 = *(float *)(v758 + v766);
          v1794 = 0xBF3504F33F000000;
          v1795 = v722 | ((unint64_t)(int)(float)((float)((float)(v768 * v765) + v767) * 255.0) << 32);
          v769 = v706[5];
          v770 = v708 + (float)(v709 * -0.70711);
          v771 = (float)v706[4] + -1.001;
          if (v771 >= v770)
            v771 = v770;
          if (v770 >= 0.0)
            v772 = v771;
          else
            v772 = 0.0;
          v773 = (float)(v705 * -0.70711) + v714;
          v774 = (float)v706[6] + -1.001;
          if (v774 >= v773)
            v774 = v773;
          if (v773 >= 0.0)
            v775 = v774;
          else
            v775 = 0.0;
          v776 = v775;
          v777 = v706[11] + 4 * v769 * v776;
          v778 = (float)(v776 + 1);
          LODWORD(v776) = v772 + 1;
          v779 = (float)((float)(*(float *)(v777 + 4 * v769 + 4 * v776)
                               * (float)((float)(v772 - (float)v772)
                                       * (float)(v775 - (float)v775)))
                       + (float)((float)(*(float *)(v777 + 4 * v769 + 4 * v772)
                                       * (float)((float)((float)v776 - v772)
                                               * (float)(v775 - (float)v775)))
                               + (float)((float)(*(float *)(v777 + 4 * v772)
                                               * (float)((float)((float)v776 - v772) * (float)(v778 - v775)))
                                       + (float)(*(float *)(v777 + 4 * v776)
                                               * (float)((float)(v772 - (float)v772) * (float)(v778 - v775))))))
               * 255.0;
          v1796 = 0xBF3504F3BF000000;
          v1797 = v722 | ((unint64_t)(int)v779 << 32);
          v780 = v706[11];
          v782 = v706[4];
          v781 = v706[5];
          v783 = v706[6];
          v784 = (float)(v703 - v705) + (float)(v709 * 0.0);
          v785 = (float)v782 + -1.001;
          if (v785 >= v784)
            v785 = v784;
          if (v784 >= 0.0)
            v786 = v785;
          else
            v786 = 0.0;
          v787 = v709 + (float)(v704 - v709);
          v788 = (float)v783 + -1.001;
          if (v788 >= v787)
            v788 = v787;
          if (v787 >= 0.0)
            v789 = v788;
          else
            v789 = 0.0;
          v790 = v789;
          v791 = v780 + 4 * v781 * v790;
          v792 = (float)(v790 + 1);
          v793 = v791 + 4 * v781;
          v794 = 4 * v786;
          v795 = 4 * (v786 + 1);
          v796 = (float)(v786 + 1) - v786;
          v797 = v792 - v789;
          v798 = v796 * v797;
          v799 = v786 - (float)v786;
          v800 = v789 - (float)v789;
          v801 = v796 * v800;
          v802 = v799 * v800;
          v803 = (float)(*(float *)(v791 + v794) * v798) + (float)(*(float *)(v791 + v795) * (float)(v799 * v797));
          v804 = *(float *)(v793 + v795);
          v805 = *(float *)(v793 + v794) * v801;
          v1798 = 3212836864;
          v1799 = v722 | ((unint64_t)(int)(float)((float)((float)(v804 * v802)
                                                                             + (float)(v805 + v803))
                                                                     * 255.0) << 32);
          HIDWORD(v1666) = 720904;
          LODWORD(v1668) = 786441;
          v1669 = 851978;
          v1670 = 655368;
          v1671 = 720905;
          v1672 = 786442;
          v1673 = 851979;
          v1674 = 524300;
          v1675 = 589837;
          v1676 = 1245200;
          v1677 = 1114132;
          v1678 = 1179669;
          v1679 = 1114128;
          v1680 = 1179668;
          v1681 = 1048597;
          v1682 = 1310739;
          v1683 = 1376273;
          v1684 = 1245202;
          v1685 = 1769496;
          v1686 = 1835033;
          v1687 = 1900570;
          v1688 = 1703960;
          v1689 = 1769497;
          v1690 = 1835034;
          v1691 = 1900571;
          v1692 = 1572892;
          v1693 = 1638429;
          v1694 = 2293792;
          v1695 = 2162724;
          v1696 = 2228261;
          v1697 = 2162720;
          v1698 = 2228260;
          v1699 = 2097189;
          v1700 = 2359331;
          v1701 = 2424865;
          v1702 = 2293794;
          v1703 = 2818088;
          v1704 = 2883625;
          v1705 = 2949162;
          v1706 = 2752552;
          v1707 = 2818089;
          v1708 = 2883626;
          v1709 = 2949163;
          v1710 = 2621484;
          v1711 = 2687021;
          v806 = *(float *)&v1666;
          v19 = 0;
          do
          {
            v807 = (float32x2_t *)(&v1713 + *(unsigned __int16 *)((char *)&v1666 + v700 + 4));
            v808 = (float32x2_t *)(&v1713 + *(unsigned __int16 *)((char *)&v1666 + v700 + 6));
            v809 = vsub_f32(*v807, *v808);
            v810 = vcvt_s32_f32(vadd_f32(vmul_n_f32(vmul_n_f32(v809, 1.0 / sqrtf(vaddv_f32(vmul_f32(v809, v809)))), v806), (float32x2_t)0x3F0000003F000000));
            LODWORD(v807) = v807[1].u16[2] - v808[1].u16[2];
            *(char **)((char *)&v1666 + v700 + 8) = (char *)v810;
            v19 = vsra_n_s32(v19, vmul_s32(vdup_n_s32(v807), v810), 0xFuLL);
            v700 += 12;
          }
          while (v700 != 540);
          v811 = v19.i32[0];
          if (v19)
          {
            v16 = fabsf((float)v19.i32[1]) + 0.0000001;
            v17 = v16 + (float)v811;
            v18 = v17 / (float)(v16 - (float)v811);
            *(float *)v19.i32 = (float)((float)v811 - v16) / v17;
            v20 = 0.7854;
            if (v811 < 1)
            {
              v20 = 2.3562;
              *(float *)v19.i32 = v18;
            }
            *(float *)v19.i32 = v20
                              + (float)(*(float *)v19.i32
                                      * (float)((float)(*(float *)v19.i32 * (float)(*(float *)v19.i32 * 0.1821))
                                              + -0.9675));
            if (v19.i32[1] < 0)
              *(float *)v19.i32 = 6.2832 - *(float *)v19.i32;
            v15[5].i32[0] = v19.i32[0];
            v15 += 6;
            if (v15 == v1661)
              break;
          }
          else
          {
            v15[5].i32[0] = 0;
            v15 += 6;
            if (v15 == v1661)
              break;
          }
        }
      }
LABEL_1088:
      a3 = v1655;
      v6 = v1659;
      goto LABEL_1089;
    }
    LODWORD(v1666) = 1191181824;
    v854 = *(float32x2_t **)a3;
    v1663 = *(float32x2_t **)(a3 + 8);
    if (*(float32x2_t **)a3 == v1663)
      goto LABEL_1088;
    while (1)
    {
      v861 = v854[1].f32[1];
      v862 = *(_DWORD *)(v14 + 24);
      v863 = *(_QWORD *)(v14 + 32);
      v864 = v863 - 1;
      v866 = *(float *)(v14 + 108);
      v865 = *(float *)(v14 + 112);
      v867 = vcvtms_s32_f32(v866* (float)((float)((float)((float)((float)((float)((float)(COERCE_FLOAT(LODWORD(v861) & 0x807FFFFF | 0x3F800000)* -0.33333)+ 2.0)* COERCE_FLOAT(LODWORD(v861) & 0x807FFFFF | 0x3F800000))+ -1.6667)+ (float)((LODWORD(v861) >> 23) - 127))* 0.69315)- v865));
      if (v867 < 0)
      {
        v868 = 0;
        v869 = 0;
        goto LABEL_595;
      }
      if (v864 * v862 <= v867)
      {
        v868 = v862 - 1;
        v869 = v863 - 1;
        if ((_DWORD)v863 != 1)
          goto LABEL_595;
      }
      else
      {
        v868 = v867 / v864;
        v869 = v867 % v864;
        if (v867 % v864)
          goto LABEL_595;
      }
      if (v868 <= 0)
        v869 = 0;
      else
        v869 = v863 - 1;
      v868 -= v868 > 0;
LABEL_595:
      v870 = v854[2].f32[0];
      v871 = v854[2].f32[1];
      v872 = 1.0 / (float)(1 << v868);
      v873 = v870 * v872;
      v874 = v871 * v872;
      v875 = *(_QWORD *)(v14 + 56);
      v876 = (_QWORD *)(v875 + 144 * (v863 * v868 + v869));
      v877 = v876[11];
      v879 = v876[4];
      v878 = v876[5];
      v880 = v876[6];
      v881 = v873 + 0.0;
      v882 = (float)v879 + -1.001;
      if (v882 >= v881)
        v882 = v881;
      if (v881 >= 0.0)
        v883 = v882;
      else
        v883 = 0.0;
      v884 = v874 + 0.0;
      v885 = (float)v880 + -1.001;
      if (v885 >= v884)
        v885 = v884;
      if (v884 >= 0.0)
        v887 = v885;
      else
        v887 = 0.0;
      v888 = v887;
      v889 = v877 + 4 * v878 * v888;
      v886 = v883;
      v890 = (float)(*(float *)(v889 + 4 * v878 + 4 * (v886 + 1))
                   * (float)((float)(v883 - (float)v883) * (float)(v887 - (float)v887)))
           + (float)((float)(*(float *)(v889 + 4 * v878 + 4 * v886)
                           * (float)((float)((float)(v886 + 1) - v883) * (float)(v887 - (float)v887)))
                   + (float)((float)(*(float *)(v889 + 4 * v886)
                                   * (float)((float)((float)(v886 + 1) - v883)
                                           * (float)((float)(v888 + 1) - v887)))
                           + (float)(*(float *)(v889 + 4 * (v886 + 1))
                                   * (float)((float)(v883 - (float)v883)
                                           * (float)((float)(v888 + 1) - v887)))));
      *(_QWORD *)&v1713 = 0;
      *((_QWORD *)&v1713 + 1) = (unint64_t)(int)(float)(v890 * 255.0) << 32;
      if (v867 < 0)
      {
        v892 = 0;
        v891 = 0;
        goto LABEL_615;
      }
      if (v864 * v862 <= v867)
      {
        v891 = v862 - 1;
        v892 = v863 - 1;
        if ((_DWORD)v863 != 1)
          goto LABEL_615;
      }
      else
      {
        v891 = v867 / v864;
        v892 = v867 % v864;
        if (v892)
          goto LABEL_615;
      }
      if (v891 <= 0)
        v892 = 0;
      else
        v892 = v863 - 1;
      v891 -= v891 > 0;
LABEL_615:
      v893 = (float)(1 << v891);
      v894 = v861 + v861;
      v895 = v870 * (float)(1.0 / v893);
      v896 = v871 * (float)(1.0 / v893);
      v897 = (float)(v861 + v861) / v893;
      v898 = (unint64_t *)(v875 + 144 * (v863 * v891 + v892));
      v899 = v898[5];
      v900 = v897 * 0.5;
      v901 = v895 - (float)(v897 * 0.5);
      v902 = v897 * 0.0;
      v903 = (float)(v897 * 0.0) * 0.70711;
      v904 = (float)v898[4] + -1.001;
      if (v904 >= (float)(v901 + v903))
        v904 = v901 + v903;
      if ((float)(v901 + v903) < 0.0)
        v904 = 0.0;
      v905 = v902 * 0.5;
      v906 = v896 - (float)(v902 * 0.5);
      v907 = (float)(v897 * 0.70711) + v906;
      v908 = (float)v898[6] + -1.001;
      if (v908 >= v907)
        v908 = (float)(v897 * 0.70711) + v906;
      if (v907 >= 0.0)
        v909 = v908;
      else
        v909 = 0.0;
      v910 = v909;
      v911 = v904 + 1;
      v912 = v898[11] + 4 * v899 * v910;
      v913 = (float)(*(float *)(v912 + 4 * v899 + 4 * v911)
                   * (float)((float)(v904 - (float)v904) * (float)(v909 - (float)v909)))
           + (float)((float)(*(float *)(v912 + 4 * v899 + 4 * v904)
                           * (float)((float)((float)v911 - v904) * (float)(v909 - (float)v909)))
                   + (float)((float)(*(float *)(v912 + 4 * v904)
                                   * (float)((float)((float)v911 - v904)
                                           * (float)((float)(v910 + 1) - v909)))
                           + (float)(*(float *)(v912 + 4 * v911)
                                   * (float)((float)(v904 - (float)v904)
                                           * (float)((float)(v910 + 1) - v909)))));
      v1716 = 0x3F3504F3BF000000;
      v1717 = LODWORD(v894) | ((unint64_t)(int)(float)(v913 * 255.0) << 32);
      v914 = v898[5];
      v915 = v900 + v895;
      v916 = (float)(v900 + v895) + v903;
      v917 = (float)v898[4] + -1.001;
      if (v917 >= v916)
        v917 = v916;
      if (v916 >= 0.0)
        v918 = v917;
      else
        v918 = 0.0;
      v919 = v896 + v905;
      v920 = (float)(v897 * 0.70711) + (float)(v896 + v905);
      v921 = (float)v898[6] + -1.001;
      if (v921 >= v920)
        v921 = v920;
      if (v920 >= 0.0)
        v922 = v921;
      else
        v922 = 0.0;
      v923 = v922;
      v924 = v918 + 1;
      v925 = v923 + 1;
      v926 = v898[11] + 4 * v914 * v923;
      v927 = LODWORD(v894) | ((unint64_t)(int)(float)((float)((float)(*(float *)(v926 + 4 * v914 + 4 * v924)
                                                                                         * (float)((float)(v918 - (float)v918)
                                                                                                 * (float)(v922 - (float)v922)))
                                                                                 + (float)((float)(*(float *)(v926 + 4 * v914 + 4 * v918)
                                                                                                 * (float)((float)((float)v924 - v918) * (float)(v922 - (float)v922)))
                                                                                         + (float)((float)(*(float *)(v926 + 4 * v918) * (float)((float)((float)v924 - v918) * (float)((float)v925 - v922)))
                                                                                                 + (float)(*(float *)(v926 + 4 * v924) * (float)((float)(v918 - (float)v918) * (float)((float)v925 - v922))))))
                                                                         * 255.0) << 32);
      v1718 = 0x3F3504F33F000000;
      v1719 = v927;
      v928 = v898[5];
      v929 = (float)(v897 + v895) + (float)(v902 * 0.0);
      v930 = (float)v898[4] + -1.001;
      if (v930 >= v929)
        v930 = (float)(v897 + v895) + (float)(v902 * 0.0);
      if (v929 >= 0.0)
        v931 = v930;
      else
        v931 = 0.0;
      v932 = v902 + (float)(v902 + v896);
      v933 = (float)v898[6] + -1.001;
      if (v933 >= v932)
        v933 = v902 + (float)(v902 + v896);
      if (v932 >= 0.0)
        v934 = v933;
      else
        v934 = 0.0;
      v935 = v934;
      v936 = v931 + 1;
      v937 = v898[11] + 4 * v928 * v935;
      v938 = LODWORD(v894) | ((unint64_t)(int)(float)((float)((float)(*(float *)(v937 + 4 * v928 + 4 * v936)
                                                                                         * (float)((float)(v931 - (float)v931)
                                                                                                 * (float)(v934 - (float)v934)))
                                                                                 + (float)((float)(*(float *)(v937 + 4 * v928 + 4 * v931)
                                                                                                 * (float)((float)((float)v936 - v931) * (float)(v934 - (float)v934)))
                                                                                         + (float)((float)(*(float *)(v937 + 4 * v931) * (float)((float)((float)v936 - v931) * (float)((float)(v935 + 1) - v934)))
                                                                                                 + (float)(*(float *)(v937 + 4 * v936) * (float)((float)(v931 - (float)v931) * (float)((float)(v935 + 1) - v934))))))
                                                                         * 255.0) << 32);
      v1720 = 1065353216;
      v1721 = v938;
      v939 = v898[5];
      v940 = v915 + (float)(v902 * -0.70711);
      v941 = (float)v898[4] + -1.001;
      if (v941 >= v940)
        v941 = v940;
      if (v940 >= 0.0)
        v942 = v941;
      else
        v942 = 0.0;
      v943 = (float)(v897 * -0.70711) + v919;
      v944 = (float)v898[6] + -1.001;
      if (v944 >= v943)
        v944 = v943;
      if (v943 >= 0.0)
        v945 = v944;
      else
        v945 = 0.0;
      v946 = v942;
      v947 = v945;
      v948 = v942 + 1;
      v949 = v898[11] + 4 * v939 * v947;
      v950 = v949 + 4 * v939;
      v951 = (float)v948 - v942;
      v952 = (float)(v947 + 1) - v945;
      v953 = v951 * v952;
      v954 = v942 - (float)v942;
      v955 = v954 * v952;
      v956 = v945 - (float)v945;
      v957 = v954 * v956;
      v958 = 4 * v948;
      v959 = (float)(*(float *)(v950 + 4 * v946) * (float)(v951 * v956))
           + (float)((float)(*(float *)(v949 + 4 * v946) * v953) + (float)(*(float *)(v949 + v958) * v955));
      v960 = *(float *)(v950 + v958);
      v1722 = 0xBF3504F33F000000;
      v1723 = LODWORD(v894) | ((unint64_t)(int)(float)((float)((float)(v960 * v957) + v959) * 255.0) << 32);
      v961 = v898[5];
      v962 = v901 + (float)(v902 * -0.70711);
      v963 = (float)v898[4] + -1.001;
      if (v963 >= v962)
        v963 = v962;
      if (v962 >= 0.0)
        v964 = v963;
      else
        v964 = 0.0;
      v965 = (float)(v897 * -0.70711) + v906;
      v966 = (float)v898[6] + -1.001;
      if (v966 >= v965)
        v966 = v965;
      if (v965 >= 0.0)
        v967 = v966;
      else
        v967 = 0.0;
      v968 = v967;
      v969 = v964 + 1;
      v970 = v968 + 1;
      v971 = v898[11] + 4 * v961 * v968;
      v972 = (float)((float)(*(float *)(v971 + 4 * v961 + 4 * v969)
                           * (float)((float)(v964 - (float)v964)
                                   * (float)(v967 - (float)v967)))
                   + (float)((float)(*(float *)(v971 + 4 * v961 + 4 * v964)
                                   * (float)((float)((float)v969 - v964) * (float)(v967 - (float)v967)))
                           + (float)((float)(*(float *)(v971 + 4 * v964)
                                           * (float)((float)((float)v969 - v964) * (float)((float)v970 - v967)))
                                   + (float)(*(float *)(v971 + 4 * v969)
                                           * (float)((float)(v964 - (float)v964)
                                                   * (float)((float)v970 - v967))))))
           * 255.0;
      v1724 = 0xBF3504F3BF000000;
      v1725 = LODWORD(v894) | ((unint64_t)(int)v972 << 32);
      v973 = v898[11];
      v975 = v898[4];
      v974 = v898[5];
      v976 = v898[6];
      v977 = (float)(v895 - v897) + (float)(v902 * 0.0);
      v978 = (float)v975 + -1.001;
      if (v978 >= v977)
        v978 = v977;
      if (v977 >= 0.0)
        v979 = v978;
      else
        v979 = 0.0;
      v980 = v902 + (float)(v896 - v902);
      v981 = (float)v976 + -1.001;
      if (v981 >= v980)
        v981 = v980;
      if (v980 >= 0.0)
        v982 = v981;
      else
        v982 = 0.0;
      v983 = v982;
      v984 = v979 + 1;
      v985 = v973 + 4 * v974 * v983;
      v986 = LODWORD(v894) | ((unint64_t)(int)(float)((float)((float)(*(float *)(v985 + 4 * v974 + 4 * v984)
                                                                                         * (float)((float)(v979 - (float)v979)
                                                                                                 * (float)(v982 - (float)v982)))
                                                                                 + (float)((float)(*(float *)(v985 + 4 * v974 + 4 * v979)
                                                                                                 * (float)((float)((float)v984 - v979) * (float)(v982 - (float)v982)))
                                                                                         + (float)((float)(*(float *)(v985 + 4 * v979) * (float)((float)((float)v984 - v979) * (float)((float)(v983 + 1) - v982)))
                                                                                                 + (float)(*(float *)(v985 + 4 * v984) * (float)((float)(v979 - (float)v979) * (float)((float)(v983 + 1) - v982))))))
                                                                         * 255.0) << 32);
      v1726 = 3212836864;
      v1727 = v986;
      v987 = v861 * 1.4142;
      v988 = vcvtms_s32_f32(v866* (float)((float)((float)((float)((float)((float)((float)(COERCE_FLOAT(LODWORD(v987) & 0x807FFFFF | 0x3F800000)* -0.33333)+ 2.0)* COERCE_FLOAT(LODWORD(v987) & 0x807FFFFF | 0x3F800000))+ -1.6667)+ (float)((LODWORD(v987) >> 23) - 127))* 0.69315)- v865));
      if (v988 < 0)
      {
        v989 = 0;
        v990 = 0;
        goto LABEL_684;
      }
      if (v864 * v862 <= v988)
      {
        v989 = v862 - 1;
        v990 = v863 - 1;
        if ((_DWORD)v863 != 1)
          goto LABEL_684;
      }
      else
      {
        v989 = v988 / v864;
        v990 = v988 % v864;
        if (v990)
          goto LABEL_684;
      }
      if (v989 <= 0)
        v990 = 0;
      else
        v990 = v863 - 1;
      v989 -= v989 > 0;
LABEL_684:
      v991 = v894 * 1.4142;
      v992 = (float)(1 << v989);
      v993 = v870 * (float)(1.0 / v992);
      v994 = v871 * (float)(1.0 / v992);
      v995 = v991 / v992;
      v996 = (unint64_t *)(v875 + 144 * (v863 * v989 + v990));
      v997 = v996[5];
      v998 = (float)(v991 / v992) * 0.0;
      v999 = (float)(v998 + v993) - v998;
      v1000 = (float)v996[4] + -1.001;
      if (v1000 >= v999)
        v1000 = (float)(v998 + v993) - v998;
      if (v999 >= 0.0)
        v1001 = v1000;
      else
        v1001 = 0.0;
      v1002 = v994 + (float)(v998 * 0.0);
      v1003 = (float)v996[6] + -1.001;
      if (v1003 >= (float)(v1002 - v995))
        v1003 = v1002 - v995;
      if ((float)(v1002 - v995) >= 0.0)
        v1004 = v1003;
      else
        v1004 = 0.0;
      v1005 = v1004;
      v1006 = v1001 + 1;
      v1007 = v996[11] + 4 * v997 * v1005;
      v1008 = (float)(*(float *)(v1007 + 4 * v997 + 4 * v1006)
                    * (float)((float)(v1001 - (float)v1001) * (float)(v1004 - (float)v1004)))
            + (float)((float)(*(float *)(v1007 + 4 * v997 + 4 * v1001)
                            * (float)((float)((float)v1006 - v1001) * (float)(v1004 - (float)v1004)))
                    + (float)((float)(*(float *)(v1007 + 4 * v1001)
                                    * (float)((float)((float)v1006 - v1001)
                                            * (float)((float)(v1005 + 1) - v1004)))
                            + (float)(*(float *)(v1007 + 4 * v1006)
                                    * (float)((float)(v1001 - (float)v1001)
                                            * (float)((float)(v1005 + 1) - v1004)))));
      v1728 = 0xBF80000000000000;
      v1729 = LODWORD(v991) | ((unint64_t)(int)(float)(v1008 * 255.0) << 32);
      v1009 = v996[5];
      v1010 = v995 * 0.70711;
      v1011 = (float)(v995 * 0.70711) + v993;
      v1012 = v998 * 0.5;
      v1013 = v1011 + (float)(v998 * 0.5);
      v1014 = (float)v996[4] + -1.001;
      if (v1014 >= v1013)
        v1014 = v1011 + (float)(v998 * 0.5);
      if (v1013 < 0.0)
        v1014 = 0.0;
      v1015 = v998 * 0.70711;
      v1016 = v994 + (float)(v998 * 0.70711);
      v1017 = v995 * 0.5;
      v1018 = (float)(v995 * 0.5) + v1016;
      v1019 = (float)v996[6] + -1.001;
      if (v1019 >= v1018)
        v1019 = (float)(v995 * 0.5) + v1016;
      if (v1018 >= 0.0)
        v1020 = v1019;
      else
        v1020 = 0.0;
      v1021 = v1014;
      v1022 = v1020;
      v1023 = v1014 + 1;
      v1024 = v996[11] + 4 * v1009 * v1022;
      v1025 = v1024 + 4 * v1009;
      v1026 = (float)v1023 - v1014;
      v1027 = (float)(v1022 + 1) - v1020;
      v1028 = v1026 * v1027;
      v1029 = v1014 - (float)v1014;
      v1030 = v1029 * v1027;
      v1031 = v1020 - (float)v1020;
      v1032 = v1029 * v1031;
      v1033 = 4 * v1023;
      v1034 = (float)(*(float *)(v1025 + 4 * v1021) * (float)(v1026 * v1031))
            + (float)((float)(*(float *)(v1024 + 4 * v1021) * v1028) + (float)(*(float *)(v1024 + v1033) * v1030));
      v1035 = *(float *)(v1025 + v1033);
      v1730 = 0x3F0000003F3504F3;
      v1731 = LODWORD(v991) | ((unint64_t)(int)(float)((float)((float)(v1035 * v1032) + v1034)
                                                                          * 255.0) << 32);
      v1036 = v996[5];
      v1037 = v998 * -0.5;
      v1038 = v1011 + (float)(v998 * -0.5);
      v1039 = (float)v996[4] + -1.001;
      if (v1039 >= v1038)
        v1039 = v1038;
      if (v1038 < 0.0)
        v1039 = 0.0;
      v1040 = v995 * -0.5;
      v1041 = (float)(v995 * -0.5) + v1016;
      v1042 = (float)v996[6] + -1.001;
      if (v1042 >= v1041)
        v1042 = v1041;
      if (v1041 >= 0.0)
        v1043 = v1042;
      else
        v1043 = 0.0;
      v1044 = v1043;
      v1045 = v1039 + 1;
      v1046 = v996[11] + 4 * v1036 * v1044;
      v1047 = (float)((float)(*(float *)(v1046 + 4 * v1036 + 4 * v1045)
                            * (float)((float)(v1039 - (float)v1039)
                                    * (float)(v1043 - (float)v1043)))
                    + (float)((float)(*(float *)(v1046 + 4 * v1036 + 4 * v1039)
                                    * (float)((float)((float)v1045 - v1039) * (float)(v1043 - (float)v1043)))
                            + (float)((float)(*(float *)(v1046 + 4 * v1039)
                                            * (float)((float)((float)v1045 - v1039)
                                                    * (float)((float)(v1044 + 1) - v1043)))
                                    + (float)(*(float *)(v1046 + 4 * v1045)
                                            * (float)((float)(v1039 - (float)v1039)
                                                    * (float)((float)(v1044 + 1) - v1043))))))
            * 255.0;
      v1732 = 0xBF0000003F3504F3;
      v1733 = LODWORD(v991) | ((unint64_t)(int)v1047 << 32);
      v1048 = v996[5];
      v1049 = v998 + (float)(v998 + v993);
      v1050 = (float)v996[4] + -1.001;
      if (v1050 >= v1049)
        v1050 = v1049;
      if (v1049 >= 0.0)
        v1051 = v1050;
      else
        v1051 = 0.0;
      v1052 = v995 + v1002;
      v1053 = (float)v996[6] + -1.001;
      if (v1053 >= v1052)
        v1053 = v1052;
      if (v1052 >= 0.0)
        v1054 = v1053;
      else
        v1054 = 0.0;
      v1055 = v1051;
      v1056 = v1054;
      v1057 = v1051 + 1;
      v1058 = v996[11] + 4 * v1048 * v1056;
      v1059 = v1058 + 4 * v1048;
      v1060 = (float)v1057 - v1051;
      v1061 = (float)(v1056 + 1) - v1054;
      v1062 = v1060 * v1061;
      v1063 = v1051 - (float)v1051;
      v1064 = v1054 - (float)v1054;
      v1065 = v1060 * v1064;
      v1066 = v1063 * v1064;
      v1067 = 4 * v1057;
      v1068 = (float)(*(float *)(v1059 + 4 * v1055) * v1065)
            + (float)((float)(*(float *)(v1058 + 4 * v1055) * v1062)
                    + (float)(*(float *)(v1058 + v1067) * (float)(v1063 * v1061)));
      v1069 = *(float *)(v1059 + v1067);
      v1734 = 0x3F80000000000000;
      v1735 = LODWORD(v991) | ((unint64_t)(int)(float)((float)((float)(v1069 * v1066) + v1068)
                                                                          * 255.0) << 32);
      v1070 = v996[5];
      v1071 = v993 - v1010;
      v1072 = (float)v996[4] + -1.001;
      if (v1072 >= (float)(v1071 + v1037))
        v1072 = v1071 + v1037;
      if ((float)(v1071 + v1037) >= 0.0)
        v1073 = v1072;
      else
        v1073 = 0.0;
      v1074 = v994 - v1015;
      v1075 = (float)v996[6] + -1.001;
      if (v1075 >= (float)(v1040 + v1074))
        v1075 = v1040 + v1074;
      if ((float)(v1040 + v1074) >= 0.0)
        v1076 = v1075;
      else
        v1076 = 0.0;
      v1077 = v1076;
      v1078 = v1073 + 1;
      v1079 = v996[11] + 4 * v1070 * v1077;
      v1080 = (float)((float)(*(float *)(v1079 + 4 * v1070 + 4 * v1078)
                            * (float)((float)(v1073 - (float)v1073)
                                    * (float)(v1076 - (float)v1076)))
                    + (float)((float)(*(float *)(v1079 + 4 * v1070 + 4 * v1073)
                                    * (float)((float)((float)v1078 - v1073) * (float)(v1076 - (float)v1076)))
                            + (float)((float)(*(float *)(v1079 + 4 * v1073)
                                            * (float)((float)((float)v1078 - v1073)
                                                    * (float)((float)(v1077 + 1) - v1076)))
                                    + (float)(*(float *)(v1079 + 4 * v1078)
                                            * (float)((float)(v1073 - (float)v1073)
                                                    * (float)((float)(v1077 + 1) - v1076))))))
            * 255.0;
      v1736 = 0xBF000000BF3504F3;
      v1737 = LODWORD(v991) | ((unint64_t)(int)v1080 << 32);
      v1081 = v996[11];
      v1083 = v996[4];
      v1082 = v996[5];
      v1084 = v996[6];
      v1085 = v1071 + v1012;
      v1086 = (float)v1083 + -1.001;
      if (v1086 >= v1085)
        v1086 = v1085;
      if (v1085 >= 0.0)
        v1087 = v1086;
      else
        v1087 = 0.0;
      v1088 = v1017 + v1074;
      v1089 = (float)v1084 + -1.001;
      if (v1089 >= v1088)
        v1089 = v1088;
      if (v1088 < 0.0)
        v1089 = 0.0;
      v1090 = v1087;
      v1091 = v1089;
      v1092 = v1087 + 1;
      v1093 = v1081 + 4 * v1082 * v1091;
      v1094 = v1093 + 4 * v1082;
      v1095 = (float)v1092 - v1087;
      v1096 = (float)(v1091 + 1) - v1089;
      v1097 = v1095 * v1096;
      v1098 = v1087 - (float)v1087;
      v1099 = v1089 - (float)v1089;
      v1100 = v1095 * v1099;
      v1101 = v1098 * v1099;
      v1102 = 4 * v1092;
      v1103 = (float)(*(float *)(v1094 + 4 * v1090) * v1100)
            + (float)((float)(*(float *)(v1093 + 4 * v1090) * v1097)
                    + (float)(*(float *)(v1093 + v1102) * (float)(v1098 * v1096)));
      v1104 = *(float *)(v1094 + v1102);
      v1738 = 0x3F000000BF3504F3;
      v1739 = LODWORD(v991) | ((unint64_t)(int)(float)((float)((float)(v1104 * v1101) + v1103)
                                                                          * 255.0) << 32);
      v1105 = v987 * 1.4142;
      v1106 = vcvtms_s32_f32(v866* (float)((float)((float)((float)((float)((float)((float)(COERCE_FLOAT(LODWORD(v1105) & 0x807FFFFF | 0x3F800000)* -0.33333)+ 2.0)* COERCE_FLOAT(LODWORD(v1105) & 0x807FFFFF | 0x3F800000))+ -1.6667)+ (float)((LODWORD(v1105) >> 23) - 127))* 0.69315)- v865));
      if (v1106 < 0)
      {
        v1107 = 0;
        v1108 = 0;
        goto LABEL_751;
      }
      if (v864 * v862 <= v1106)
      {
        v1107 = v862 - 1;
        v1108 = v863 - 1;
        if ((_DWORD)v863 != 1)
          goto LABEL_751;
      }
      else
      {
        v1107 = v1106 / v864;
        v1108 = v1106 % v864;
        if (v1108)
          goto LABEL_751;
      }
      if (v1107 <= 0)
        v1108 = 0;
      else
        v1108 = v863 - 1;
      v1107 -= v1107 > 0;
LABEL_751:
      v1109 = (float)(1 << v1107);
      v1110 = v991 * 1.4142;
      v1111 = v870 * (float)(1.0 / v1109);
      v1112 = v871 * (float)(1.0 / v1109);
      v1113 = v1110 / v1109;
      v1114 = (unint64_t *)(v875 + 144 * (v863 * v1107 + v1108));
      v1115 = v1114[5];
      v1116 = v1113 * 0.5;
      v1117 = v1111 - (float)(v1113 * 0.5);
      v1118 = v1113 * 0.0;
      v1119 = (float)(v1113 * 0.0) * 0.70711;
      v1120 = (float)v1114[4] + -1.001;
      if (v1120 >= (float)(v1117 + v1119))
        v1120 = v1117 + v1119;
      if ((float)(v1117 + v1119) < 0.0)
        v1120 = 0.0;
      v1121 = v1118 * 0.5;
      v1122 = v1112 - (float)(v1118 * 0.5);
      v1123 = (float)(v1113 * 0.70711) + v1122;
      v1124 = (float)v1114[6] + -1.001;
      if (v1124 >= v1123)
        v1124 = (float)(v1113 * 0.70711) + v1122;
      if (v1123 >= 0.0)
        v1125 = v1124;
      else
        v1125 = 0.0;
      v1126 = v1125;
      v1127 = v1120 + 1;
      v1128 = v1114[11] + 4 * v1115 * v1126;
      v1129 = (float)(*(float *)(v1128 + 4 * v1115 + 4 * v1127)
                    * (float)((float)(v1120 - (float)v1120) * (float)(v1125 - (float)v1125)))
            + (float)((float)(*(float *)(v1128 + 4 * v1115 + 4 * v1120)
                            * (float)((float)((float)v1127 - v1120) * (float)(v1125 - (float)v1125)))
                    + (float)((float)(*(float *)(v1128 + 4 * v1120)
                                    * (float)((float)((float)v1127 - v1120)
                                            * (float)((float)(v1126 + 1) - v1125)))
                            + (float)(*(float *)(v1128 + 4 * v1127)
                                    * (float)((float)(v1120 - (float)v1120)
                                            * (float)((float)(v1126 + 1) - v1125)))));
      v1740 = 0x3F3504F3BF000000;
      v1741 = LODWORD(v1110) | ((unint64_t)(int)(float)(v1129 * 255.0) << 32);
      v1130 = v1114[5];
      v1131 = v1116 + v1111;
      v1132 = (float)(v1116 + v1111) + v1119;
      v1133 = (float)v1114[4] + -1.001;
      if (v1133 >= v1132)
        v1133 = v1132;
      if (v1132 >= 0.0)
        v1134 = v1133;
      else
        v1134 = 0.0;
      v1135 = v1112 + v1121;
      v1136 = (float)(v1113 * 0.70711) + (float)(v1112 + v1121);
      v1137 = (float)v1114[6] + -1.001;
      if (v1137 >= v1136)
        v1137 = v1136;
      if (v1136 >= 0.0)
        v1138 = v1137;
      else
        v1138 = 0.0;
      v1139 = v1138;
      v1140 = v1134 + 1;
      v1141 = v1139 + 1;
      v1142 = v1114[11] + 4 * v1130 * v1139;
      v1143 = LODWORD(v1110) | ((unint64_t)(int)(float)((float)((float)(*(float *)(v1142 + 4 * v1130 + 4 * v1140)
                                                                                           * (float)((float)(v1134 - (float)v1134) * (float)(v1138 - (float)v1138)))
                                                                                   + (float)((float)(*(float *)(v1142 + 4 * v1130 + 4 * v1134) * (float)((float)((float)v1140 - v1134) * (float)(v1138 - (float)v1138)))
                                                                                           + (float)((float)(*(float *)(v1142 + 4 * v1134) * (float)((float)((float)v1140 - v1134) * (float)((float)v1141 - v1138))) + (float)(*(float *)(v1142 + 4 * v1140) * (float)((float)(v1134 - (float)v1134) * (float)((float)v1141 - v1138))))))
                                                                           * 255.0) << 32);
      v1742 = 0x3F3504F33F000000;
      v1743 = v1143;
      v1144 = v1114[5];
      v1145 = (float)(v1113 + v1111) + (float)(v1118 * 0.0);
      v1146 = (float)v1114[4] + -1.001;
      if (v1146 >= v1145)
        v1146 = (float)(v1113 + v1111) + (float)(v1118 * 0.0);
      if (v1145 >= 0.0)
        v1147 = v1146;
      else
        v1147 = 0.0;
      v1148 = v1118 + (float)(v1118 + v1112);
      v1149 = (float)v1114[6] + -1.001;
      if (v1149 >= v1148)
        v1149 = v1118 + (float)(v1118 + v1112);
      if (v1148 >= 0.0)
        v1150 = v1149;
      else
        v1150 = 0.0;
      v1151 = v1150;
      v1152 = v1147 + 1;
      v1153 = v1114[11] + 4 * v1144 * v1151;
      v1154 = LODWORD(v1110) | ((unint64_t)(int)(float)((float)((float)(*(float *)(v1153 + 4 * v1144 + 4 * v1152)
                                                                                           * (float)((float)(v1147 - (float)v1147) * (float)(v1150 - (float)v1150)))
                                                                                   + (float)((float)(*(float *)(v1153 + 4 * v1144 + 4 * v1147) * (float)((float)((float)v1152 - v1147) * (float)(v1150 - (float)v1150)))
                                                                                           + (float)((float)(*(float *)(v1153 + 4 * v1147) * (float)((float)((float)v1152 - v1147) * (float)((float)(v1151 + 1) - v1150))) + (float)(*(float *)(v1153 + 4 * v1152) * (float)((float)(v1147 - (float)v1147) * (float)((float)(v1151 + 1) - v1150))))))
                                                                           * 255.0) << 32);
      v1744 = 1065353216;
      v1745 = v1154;
      v1155 = v1114[5];
      v1156 = v1131 + (float)(v1118 * -0.70711);
      v1157 = (float)v1114[4] + -1.001;
      if (v1157 >= v1156)
        v1157 = v1156;
      if (v1156 >= 0.0)
        v1158 = v1157;
      else
        v1158 = 0.0;
      v1159 = (float)(v1113 * -0.70711) + v1135;
      v1160 = (float)v1114[6] + -1.001;
      if (v1160 >= v1159)
        v1160 = v1159;
      if (v1159 >= 0.0)
        v1161 = v1160;
      else
        v1161 = 0.0;
      v1162 = v1158;
      v1163 = v1161;
      v1164 = v1158 + 1;
      v1165 = v1114[11] + 4 * v1155 * v1163;
      v1166 = v1165 + 4 * v1155;
      v1167 = (float)v1164 - v1158;
      v1168 = (float)(v1163 + 1) - v1161;
      v1169 = v1167 * v1168;
      v1170 = v1158 - (float)v1158;
      v1171 = v1170 * v1168;
      v1172 = v1161 - (float)v1161;
      v1173 = v1170 * v1172;
      v1174 = 4 * v1164;
      v1175 = (float)(*(float *)(v1166 + 4 * v1162) * (float)(v1167 * v1172))
            + (float)((float)(*(float *)(v1165 + 4 * v1162) * v1169) + (float)(*(float *)(v1165 + v1174) * v1171));
      v1176 = *(float *)(v1166 + v1174);
      v1746 = 0xBF3504F33F000000;
      v1747 = LODWORD(v1110) | ((unint64_t)(int)(float)((float)((float)(v1176 * v1173) + v1175)
                                                                           * 255.0) << 32);
      v1177 = v1114[5];
      v1178 = v1117 + (float)(v1118 * -0.70711);
      v1179 = (float)v1114[4] + -1.001;
      if (v1179 >= v1178)
        v1179 = v1178;
      if (v1178 >= 0.0)
        v1180 = v1179;
      else
        v1180 = 0.0;
      v1181 = (float)(v1113 * -0.70711) + v1122;
      v1182 = (float)v1114[6] + -1.001;
      if (v1182 >= v1181)
        v1182 = v1181;
      if (v1181 >= 0.0)
        v1183 = v1182;
      else
        v1183 = 0.0;
      v1184 = v1183;
      v1185 = v1180 + 1;
      v1186 = v1184 + 1;
      v1187 = v1114[11] + 4 * v1177 * v1184;
      v1188 = (float)((float)(*(float *)(v1187 + 4 * v1177 + 4 * v1185)
                            * (float)((float)(v1180 - (float)v1180)
                                    * (float)(v1183 - (float)v1183)))
                    + (float)((float)(*(float *)(v1187 + 4 * v1177 + 4 * v1180)
                                    * (float)((float)((float)v1185 - v1180) * (float)(v1183 - (float)v1183)))
                            + (float)((float)(*(float *)(v1187 + 4 * v1180)
                                            * (float)((float)((float)v1185 - v1180) * (float)((float)v1186 - v1183)))
                                    + (float)(*(float *)(v1187 + 4 * v1185)
                                            * (float)((float)(v1180 - (float)v1180)
                                                    * (float)((float)v1186 - v1183))))))
            * 255.0;
      v1748 = 0xBF3504F3BF000000;
      v1749 = LODWORD(v1110) | ((unint64_t)(int)v1188 << 32);
      v1189 = v1114[11];
      v1191 = v1114[4];
      v1190 = v1114[5];
      v1192 = v1114[6];
      v1193 = (float)(v1111 - v1113) + (float)(v1118 * 0.0);
      v1194 = (float)v1191 + -1.001;
      if (v1194 >= v1193)
        v1194 = v1193;
      if (v1193 >= 0.0)
        v1195 = v1194;
      else
        v1195 = 0.0;
      v1196 = v1118 + (float)(v1112 - v1118);
      v1197 = (float)v1192 + -1.001;
      if (v1197 >= v1196)
        v1197 = v1196;
      if (v1196 >= 0.0)
        v1198 = v1197;
      else
        v1198 = 0.0;
      v1199 = v1198;
      v1200 = v1195 + 1;
      v1201 = v1189 + 4 * v1190 * v1199;
      v1202 = LODWORD(v1110) | ((unint64_t)(int)(float)((float)((float)(*(float *)(v1201 + 4 * v1190 + 4 * v1200)
                                                                                           * (float)((float)(v1195 - (float)v1195) * (float)(v1198 - (float)v1198)))
                                                                                   + (float)((float)(*(float *)(v1201 + 4 * v1190 + 4 * v1195) * (float)((float)((float)v1200 - v1195) * (float)(v1198 - (float)v1198)))
                                                                                           + (float)((float)(*(float *)(v1201 + 4 * v1195) * (float)((float)((float)v1200 - v1195) * (float)((float)(v1199 + 1) - v1198))) + (float)(*(float *)(v1201 + 4 * v1200) * (float)((float)(v1195 - (float)v1195) * (float)((float)(v1199 + 1) - v1198))))))
                                                                           * 255.0) << 32);
      v1750 = 3212836864;
      v1751 = v1202;
      v1203 = v1105 * 1.4142;
      v1204 = vcvtms_s32_f32(v866* (float)((float)((float)((float)((float)((float)((float)(COERCE_FLOAT(LODWORD(v1203) & 0x807FFFFF | 0x3F800000)* -0.33333)+ 2.0)* COERCE_FLOAT(LODWORD(v1203) & 0x807FFFFF | 0x3F800000))+ -1.6667)+ (float)((LODWORD(v1203) >> 23) - 127))* 0.69315)- v865));
      if (v1204 < 0)
      {
        v1205 = 0;
        v1206 = 0;
        goto LABEL_820;
      }
      if (v864 * v862 <= v1204)
      {
        v1205 = v862 - 1;
        v1206 = v863 - 1;
        if ((_DWORD)v863 != 1)
          goto LABEL_820;
      }
      else
      {
        v1205 = v1204 / v864;
        v1206 = v1204 % v864;
        if (v1206)
          goto LABEL_820;
      }
      if (v1205 <= 0)
        v1206 = 0;
      else
        v1206 = v863 - 1;
      v1205 -= v1205 > 0;
LABEL_820:
      v1207 = v1110 * 1.4142;
      v1208 = (float)(1 << v1205);
      v1209 = v870 * (float)(1.0 / v1208);
      v1210 = v871 * (float)(1.0 / v1208);
      v1211 = v1207 / v1208;
      v1212 = (unint64_t *)(v875 + 144 * (v863 * v1205 + v1206));
      v1213 = v1212[5];
      v1214 = (float)(v1207 / v1208) * 0.0;
      v1215 = (float)(v1214 + v1209) - v1214;
      v1216 = (float)v1212[4] + -1.001;
      if (v1216 >= v1215)
        v1216 = (float)(v1214 + v1209) - v1214;
      if (v1215 >= 0.0)
        v1217 = v1216;
      else
        v1217 = 0.0;
      v1218 = v1210 + (float)(v1214 * 0.0);
      v1219 = (float)v1212[6] + -1.001;
      if (v1219 >= (float)(v1218 - v1211))
        v1219 = v1218 - v1211;
      if ((float)(v1218 - v1211) >= 0.0)
        v1220 = v1219;
      else
        v1220 = 0.0;
      v1221 = v1220;
      v1222 = v1217 + 1;
      v1223 = v1212[11] + 4 * v1213 * v1221;
      v1224 = (float)(*(float *)(v1223 + 4 * v1213 + 4 * v1222)
                    * (float)((float)(v1217 - (float)v1217) * (float)(v1220 - (float)v1220)))
            + (float)((float)(*(float *)(v1223 + 4 * v1213 + 4 * v1217)
                            * (float)((float)((float)v1222 - v1217) * (float)(v1220 - (float)v1220)))
                    + (float)((float)(*(float *)(v1223 + 4 * v1217)
                                    * (float)((float)((float)v1222 - v1217)
                                            * (float)((float)(v1221 + 1) - v1220)))
                            + (float)(*(float *)(v1223 + 4 * v1222)
                                    * (float)((float)(v1217 - (float)v1217)
                                            * (float)((float)(v1221 + 1) - v1220)))));
      v1752 = 0xBF80000000000000;
      v1753 = LODWORD(v1207) | ((unint64_t)(int)(float)(v1224 * 255.0) << 32);
      v1225 = v1212[5];
      v1226 = v1211 * 0.70711;
      v1227 = (float)(v1211 * 0.70711) + v1209;
      v1228 = v1214 * 0.5;
      v1229 = v1227 + (float)(v1214 * 0.5);
      v1230 = (float)v1212[4] + -1.001;
      if (v1230 >= v1229)
        v1230 = v1227 + (float)(v1214 * 0.5);
      if (v1229 < 0.0)
        v1230 = 0.0;
      v1231 = v1214 * 0.70711;
      v1232 = v1210 + (float)(v1214 * 0.70711);
      v1233 = v1211 * 0.5;
      v1234 = (float)(v1211 * 0.5) + v1232;
      v1235 = (float)v1212[6] + -1.001;
      if (v1235 >= v1234)
        v1235 = (float)(v1211 * 0.5) + v1232;
      if (v1234 >= 0.0)
        v1236 = v1235;
      else
        v1236 = 0.0;
      v1237 = v1230;
      v1238 = v1236;
      v1239 = v1230 + 1;
      v1240 = v1212[11] + 4 * v1225 * v1238;
      v1241 = v1240 + 4 * v1225;
      v1242 = (float)v1239 - v1230;
      v1243 = (float)(v1238 + 1) - v1236;
      v1244 = v1242 * v1243;
      v1245 = v1230 - (float)v1230;
      v1246 = v1245 * v1243;
      v1247 = v1236 - (float)v1236;
      v1248 = v1245 * v1247;
      v1249 = 4 * v1239;
      v1250 = (float)(*(float *)(v1241 + 4 * v1237) * (float)(v1242 * v1247))
            + (float)((float)(*(float *)(v1240 + 4 * v1237) * v1244) + (float)(*(float *)(v1240 + v1249) * v1246));
      v1251 = *(float *)(v1241 + v1249);
      v1754 = 0x3F0000003F3504F3;
      v1755 = LODWORD(v1207) | ((unint64_t)(int)(float)((float)((float)(v1251 * v1248) + v1250)
                                                                           * 255.0) << 32);
      v1252 = v1212[5];
      v1253 = v1214 * -0.5;
      v1254 = v1227 + (float)(v1214 * -0.5);
      v1255 = (float)v1212[4] + -1.001;
      if (v1255 >= v1254)
        v1255 = v1254;
      if (v1254 < 0.0)
        v1255 = 0.0;
      v1256 = v1211 * -0.5;
      v1257 = (float)(v1211 * -0.5) + v1232;
      v1258 = (float)v1212[6] + -1.001;
      if (v1258 >= v1257)
        v1258 = v1257;
      if (v1257 >= 0.0)
        v1259 = v1258;
      else
        v1259 = 0.0;
      v1260 = v1259;
      v1261 = v1255 + 1;
      v1262 = v1212[11] + 4 * v1252 * v1260;
      v1263 = (float)((float)(*(float *)(v1262 + 4 * v1252 + 4 * v1261)
                            * (float)((float)(v1255 - (float)v1255)
                                    * (float)(v1259 - (float)v1259)))
                    + (float)((float)(*(float *)(v1262 + 4 * v1252 + 4 * v1255)
                                    * (float)((float)((float)v1261 - v1255) * (float)(v1259 - (float)v1259)))
                            + (float)((float)(*(float *)(v1262 + 4 * v1255)
                                            * (float)((float)((float)v1261 - v1255)
                                                    * (float)((float)(v1260 + 1) - v1259)))
                                    + (float)(*(float *)(v1262 + 4 * v1261)
                                            * (float)((float)(v1255 - (float)v1255)
                                                    * (float)((float)(v1260 + 1) - v1259))))))
            * 255.0;
      v1756 = 0xBF0000003F3504F3;
      v1757 = LODWORD(v1207) | ((unint64_t)(int)v1263 << 32);
      v1264 = v1212[5];
      v1265 = v1214 + (float)(v1214 + v1209);
      v1266 = (float)v1212[4] + -1.001;
      if (v1266 >= v1265)
        v1266 = v1265;
      if (v1265 >= 0.0)
        v1267 = v1266;
      else
        v1267 = 0.0;
      v1268 = v1211 + v1218;
      v1269 = (float)v1212[6] + -1.001;
      if (v1269 >= v1268)
        v1269 = v1268;
      if (v1268 >= 0.0)
        v1270 = v1269;
      else
        v1270 = 0.0;
      v1271 = v1267;
      v1272 = v1270;
      v1273 = v1267 + 1;
      v1274 = v1212[11] + 4 * v1264 * v1272;
      v1275 = v1274 + 4 * v1264;
      v1276 = (float)v1273 - v1267;
      v1277 = (float)(v1272 + 1) - v1270;
      v1278 = v1276 * v1277;
      v1279 = v1267 - (float)v1267;
      v1280 = v1270 - (float)v1270;
      v1281 = v1276 * v1280;
      v1282 = v1279 * v1280;
      v1283 = 4 * v1273;
      v1284 = (float)(*(float *)(v1275 + 4 * v1271) * v1281)
            + (float)((float)(*(float *)(v1274 + 4 * v1271) * v1278)
                    + (float)(*(float *)(v1274 + v1283) * (float)(v1279 * v1277)));
      v1285 = *(float *)(v1275 + v1283);
      v1758 = 0x3F80000000000000;
      v1759 = LODWORD(v1207) | ((unint64_t)(int)(float)((float)((float)(v1285 * v1282) + v1284)
                                                                           * 255.0) << 32);
      v1286 = v1212[5];
      v1287 = v1209 - v1226;
      v1288 = (float)v1212[4] + -1.001;
      if (v1288 >= (float)(v1287 + v1253))
        v1288 = v1287 + v1253;
      if ((float)(v1287 + v1253) >= 0.0)
        v1289 = v1288;
      else
        v1289 = 0.0;
      v1290 = v1210 - v1231;
      v1291 = (float)v1212[6] + -1.001;
      if (v1291 >= (float)(v1256 + v1290))
        v1291 = v1256 + v1290;
      if ((float)(v1256 + v1290) >= 0.0)
        v1292 = v1291;
      else
        v1292 = 0.0;
      v1293 = v1292;
      v1294 = v1289 + 1;
      v1295 = v1212[11] + 4 * v1286 * v1293;
      v1296 = (float)((float)(*(float *)(v1295 + 4 * v1286 + 4 * v1294)
                            * (float)((float)(v1289 - (float)v1289)
                                    * (float)(v1292 - (float)v1292)))
                    + (float)((float)(*(float *)(v1295 + 4 * v1286 + 4 * v1289)
                                    * (float)((float)((float)v1294 - v1289) * (float)(v1292 - (float)v1292)))
                            + (float)((float)(*(float *)(v1295 + 4 * v1289)
                                            * (float)((float)((float)v1294 - v1289)
                                                    * (float)((float)(v1293 + 1) - v1292)))
                                    + (float)(*(float *)(v1295 + 4 * v1294)
                                            * (float)((float)(v1289 - (float)v1289)
                                                    * (float)((float)(v1293 + 1) - v1292))))))
            * 255.0;
      v1760 = 0xBF000000BF3504F3;
      v1761 = LODWORD(v1207) | ((unint64_t)(int)v1296 << 32);
      v1297 = v1212[11];
      v1299 = v1212[4];
      v1298 = v1212[5];
      v1300 = v1212[6];
      v1301 = v1287 + v1228;
      v1302 = (float)v1299 + -1.001;
      if (v1302 >= v1301)
        v1302 = v1301;
      if (v1301 >= 0.0)
        v1303 = v1302;
      else
        v1303 = 0.0;
      v1304 = v1233 + v1290;
      v1305 = (float)v1300 + -1.001;
      if (v1305 >= v1304)
        v1305 = v1304;
      if (v1304 < 0.0)
        v1305 = 0.0;
      v1306 = v1303;
      v1307 = v1305;
      v1308 = v1303 + 1;
      v1309 = v1297 + 4 * v1298 * v1307;
      v1310 = v1309 + 4 * v1298;
      v1311 = (float)v1308 - v1303;
      v1312 = (float)(v1307 + 1) - v1305;
      v1313 = v1311 * v1312;
      v1314 = v1303 - (float)v1303;
      v1315 = v1305 - (float)v1305;
      v1316 = v1311 * v1315;
      v1317 = v1314 * v1315;
      v1318 = 4 * v1308;
      v1319 = (float)(*(float *)(v1310 + 4 * v1306) * v1316)
            + (float)((float)(*(float *)(v1309 + 4 * v1306) * v1313)
                    + (float)(*(float *)(v1309 + v1318) * (float)(v1314 * v1312)));
      v1320 = *(float *)(v1310 + v1318);
      v1762 = 0x3F000000BF3504F3;
      v1763 = LODWORD(v1207) | ((unint64_t)(int)(float)((float)((float)(v1320 * v1317) + v1319)
                                                                           * 255.0) << 32);
      v1321 = v1203 * 1.4142;
      v1322 = vcvtms_s32_f32(v866* (float)((float)((float)((float)((float)((float)((float)(COERCE_FLOAT(LODWORD(v1321) & 0x807FFFFF | 0x3F800000)* -0.33333)+ 2.0)* COERCE_FLOAT(LODWORD(v1321) & 0x807FFFFF | 0x3F800000))+ -1.6667)+ (float)((LODWORD(v1321) >> 23) - 127))* 0.69315)- v865));
      if (v1322 < 0)
      {
        v1323 = 0;
        v1324 = 0;
        goto LABEL_887;
      }
      if (v864 * v862 <= v1322)
      {
        v1323 = v862 - 1;
        v1324 = v863 - 1;
        if ((_DWORD)v863 != 1)
          goto LABEL_887;
      }
      else
      {
        v1323 = v1322 / v864;
        v1324 = v1322 % v864;
        if (v1324)
          goto LABEL_887;
      }
      if (v1323 <= 0)
        v1324 = 0;
      else
        v1324 = v863 - 1;
      v1323 -= v1323 > 0;
LABEL_887:
      v1325 = (float)(1 << v1323);
      v1326 = v1207 * 1.4142;
      v1327 = v870 * (float)(1.0 / v1325);
      v1328 = v871 * (float)(1.0 / v1325);
      v1329 = v1326 / v1325;
      v1330 = (unint64_t *)(v875 + 144 * (v863 * v1323 + v1324));
      v1331 = v1330[5];
      v1332 = v1329 * 0.5;
      v1333 = v1327 - (float)(v1329 * 0.5);
      v1334 = v1329 * 0.0;
      v1335 = (float)(v1329 * 0.0) * 0.70711;
      v1336 = (float)v1330[4] + -1.001;
      if (v1336 >= (float)(v1333 + v1335))
        v1336 = v1333 + v1335;
      if ((float)(v1333 + v1335) < 0.0)
        v1336 = 0.0;
      v1337 = v1334 * 0.5;
      v1338 = v1328 - (float)(v1334 * 0.5);
      v1339 = (float)(v1329 * 0.70711) + v1338;
      v1340 = (float)v1330[6] + -1.001;
      if (v1340 >= v1339)
        v1340 = (float)(v1329 * 0.70711) + v1338;
      if (v1339 >= 0.0)
        v1341 = v1340;
      else
        v1341 = 0.0;
      v1342 = v1341;
      v1343 = v1336 + 1;
      v1344 = v1330[11] + 4 * v1331 * v1342;
      v1345 = (float)(*(float *)(v1344 + 4 * v1331 + 4 * v1343)
                    * (float)((float)(v1336 - (float)v1336) * (float)(v1341 - (float)v1341)))
            + (float)((float)(*(float *)(v1344 + 4 * v1331 + 4 * v1336)
                            * (float)((float)((float)v1343 - v1336) * (float)(v1341 - (float)v1341)))
                    + (float)((float)(*(float *)(v1344 + 4 * v1336)
                                    * (float)((float)((float)v1343 - v1336)
                                            * (float)((float)(v1342 + 1) - v1341)))
                            + (float)(*(float *)(v1344 + 4 * v1343)
                                    * (float)((float)(v1336 - (float)v1336)
                                            * (float)((float)(v1342 + 1) - v1341)))));
      v1764 = 0x3F3504F3BF000000;
      v1765 = LODWORD(v1326) | ((unint64_t)(int)(float)(v1345 * 255.0) << 32);
      v1346 = v1330[5];
      v1347 = v1332 + v1327;
      v1348 = (float)(v1332 + v1327) + v1335;
      v1349 = (float)v1330[4] + -1.001;
      if (v1349 >= v1348)
        v1349 = v1348;
      if (v1348 >= 0.0)
        v1350 = v1349;
      else
        v1350 = 0.0;
      v1351 = v1328 + v1337;
      v1352 = (float)(v1329 * 0.70711) + (float)(v1328 + v1337);
      v1353 = (float)v1330[6] + -1.001;
      if (v1353 >= v1352)
        v1353 = v1352;
      if (v1352 >= 0.0)
        v1354 = v1353;
      else
        v1354 = 0.0;
      v1355 = v1354;
      v1356 = v1350 + 1;
      v1357 = v1355 + 1;
      v1358 = v1330[11] + 4 * v1346 * v1355;
      v1359 = LODWORD(v1326) | ((unint64_t)(int)(float)((float)((float)(*(float *)(v1358 + 4 * v1346 + 4 * v1356)
                                                                                           * (float)((float)(v1350 - (float)v1350) * (float)(v1354 - (float)v1354)))
                                                                                   + (float)((float)(*(float *)(v1358 + 4 * v1346 + 4 * v1350) * (float)((float)((float)v1356 - v1350) * (float)(v1354 - (float)v1354)))
                                                                                           + (float)((float)(*(float *)(v1358 + 4 * v1350) * (float)((float)((float)v1356 - v1350) * (float)((float)v1357 - v1354))) + (float)(*(float *)(v1358 + 4 * v1356) * (float)((float)(v1350 - (float)v1350) * (float)((float)v1357 - v1354))))))
                                                                           * 255.0) << 32);
      v1766 = 0x3F3504F33F000000;
      v1767 = v1359;
      v1360 = v1330[5];
      v1361 = (float)(v1329 + v1327) + (float)(v1334 * 0.0);
      v1362 = (float)v1330[4] + -1.001;
      if (v1362 >= v1361)
        v1362 = (float)(v1329 + v1327) + (float)(v1334 * 0.0);
      if (v1361 >= 0.0)
        v1363 = v1362;
      else
        v1363 = 0.0;
      v1364 = v1334 + (float)(v1334 + v1328);
      v1365 = (float)v1330[6] + -1.001;
      if (v1365 >= v1364)
        v1365 = v1334 + (float)(v1334 + v1328);
      if (v1364 >= 0.0)
        v1366 = v1365;
      else
        v1366 = 0.0;
      v1367 = v1366;
      v1368 = v1363 + 1;
      v1369 = v1330[11] + 4 * v1360 * v1367;
      v1370 = LODWORD(v1326) | ((unint64_t)(int)(float)((float)((float)(*(float *)(v1369 + 4 * v1360 + 4 * v1368)
                                                                                           * (float)((float)(v1363 - (float)v1363) * (float)(v1366 - (float)v1366)))
                                                                                   + (float)((float)(*(float *)(v1369 + 4 * v1360 + 4 * v1363) * (float)((float)((float)v1368 - v1363) * (float)(v1366 - (float)v1366)))
                                                                                           + (float)((float)(*(float *)(v1369 + 4 * v1363) * (float)((float)((float)v1368 - v1363) * (float)((float)(v1367 + 1) - v1366))) + (float)(*(float *)(v1369 + 4 * v1368) * (float)((float)(v1363 - (float)v1363) * (float)((float)(v1367 + 1) - v1366))))))
                                                                           * 255.0) << 32);
      v1768 = 1065353216;
      v1769 = v1370;
      v1371 = v1330[5];
      v1372 = v1347 + (float)(v1334 * -0.70711);
      v1373 = (float)v1330[4] + -1.001;
      if (v1373 >= v1372)
        v1373 = v1372;
      if (v1372 >= 0.0)
        v1374 = v1373;
      else
        v1374 = 0.0;
      v1375 = (float)(v1329 * -0.70711) + v1351;
      v1376 = (float)v1330[6] + -1.001;
      if (v1376 >= v1375)
        v1376 = v1375;
      if (v1375 >= 0.0)
        v1377 = v1376;
      else
        v1377 = 0.0;
      v1378 = v1374;
      v1379 = v1377;
      v1380 = v1374 + 1;
      v1381 = v1330[11] + 4 * v1371 * v1379;
      v1382 = v1381 + 4 * v1371;
      v1383 = (float)v1380 - v1374;
      v1384 = (float)(v1379 + 1) - v1377;
      v1385 = v1383 * v1384;
      v1386 = v1374 - (float)v1374;
      v1387 = v1386 * v1384;
      v1388 = v1377 - (float)v1377;
      v1389 = v1386 * v1388;
      v1390 = 4 * v1380;
      v1391 = (float)(*(float *)(v1382 + 4 * v1378) * (float)(v1383 * v1388))
            + (float)((float)(*(float *)(v1381 + 4 * v1378) * v1385) + (float)(*(float *)(v1381 + v1390) * v1387));
      v1392 = *(float *)(v1382 + v1390);
      v1770 = 0xBF3504F33F000000;
      v1771 = LODWORD(v1326) | ((unint64_t)(int)(float)((float)((float)(v1392 * v1389) + v1391)
                                                                           * 255.0) << 32);
      v1393 = v1330[5];
      v1394 = v1333 + (float)(v1334 * -0.70711);
      v1395 = (float)v1330[4] + -1.001;
      if (v1395 >= v1394)
        v1395 = v1394;
      if (v1394 >= 0.0)
        v1396 = v1395;
      else
        v1396 = 0.0;
      v1397 = (float)(v1329 * -0.70711) + v1338;
      v1398 = (float)v1330[6] + -1.001;
      if (v1398 >= v1397)
        v1398 = v1397;
      if (v1397 >= 0.0)
        v1399 = v1398;
      else
        v1399 = 0.0;
      v1400 = v1399;
      v1401 = v1396 + 1;
      v1402 = v1400 + 1;
      v1403 = v1330[11] + 4 * v1393 * v1400;
      v1404 = (float)((float)(*(float *)(v1403 + 4 * v1393 + 4 * v1401)
                            * (float)((float)(v1396 - (float)v1396)
                                    * (float)(v1399 - (float)v1399)))
                    + (float)((float)(*(float *)(v1403 + 4 * v1393 + 4 * v1396)
                                    * (float)((float)((float)v1401 - v1396) * (float)(v1399 - (float)v1399)))
                            + (float)((float)(*(float *)(v1403 + 4 * v1396)
                                            * (float)((float)((float)v1401 - v1396) * (float)((float)v1402 - v1399)))
                                    + (float)(*(float *)(v1403 + 4 * v1401)
                                            * (float)((float)(v1396 - (float)v1396)
                                                    * (float)((float)v1402 - v1399))))))
            * 255.0;
      v1772 = 0xBF3504F3BF000000;
      v1773 = LODWORD(v1326) | ((unint64_t)(int)v1404 << 32);
      v1405 = v1330[11];
      v1407 = v1330[4];
      v1406 = v1330[5];
      v1408 = v1330[6];
      v1409 = (float)(v1327 - v1329) + (float)(v1334 * 0.0);
      v1410 = (float)v1407 + -1.001;
      if (v1410 >= v1409)
        v1410 = v1409;
      if (v1409 >= 0.0)
        v1411 = v1410;
      else
        v1411 = 0.0;
      v1412 = v1334 + (float)(v1328 - v1334);
      v1413 = (float)v1408 + -1.001;
      if (v1413 >= v1412)
        v1413 = v1412;
      if (v1412 >= 0.0)
        v1414 = v1413;
      else
        v1414 = 0.0;
      v1415 = v1414;
      v1416 = v1411 + 1;
      v1417 = v1405 + 4 * v1406 * v1415;
      v1418 = LODWORD(v1326) | ((unint64_t)(int)(float)((float)((float)(*(float *)(v1417 + 4 * v1406 + 4 * v1416)
                                                                                           * (float)((float)(v1411 - (float)v1411) * (float)(v1414 - (float)v1414)))
                                                                                   + (float)((float)(*(float *)(v1417 + 4 * v1406 + 4 * v1411) * (float)((float)((float)v1416 - v1411) * (float)(v1414 - (float)v1414)))
                                                                                           + (float)((float)(*(float *)(v1417 + 4 * v1411) * (float)((float)((float)v1416 - v1411) * (float)((float)(v1415 + 1) - v1414))) + (float)(*(float *)(v1417 + 4 * v1416) * (float)((float)(v1411 - (float)v1411) * (float)((float)(v1415 + 1) - v1414))))))
                                                                           * 255.0) << 32);
      v1774 = 3212836864;
      v1775 = v1418;
      v1419 = v1321 * 1.4142;
      v1420 = vcvtms_s32_f32(v866* (float)((float)((float)((float)((float)((float)((float)(COERCE_FLOAT(COERCE_UNSIGNED_INT(v1321 * 1.4142) & 0x807FFFFF | 0x3F800000)* -0.33333)+ 2.0)* COERCE_FLOAT(COERCE_UNSIGNED_INT(v1321 * 1.4142) & 0x807FFFFF | 0x3F800000))+ -1.6667)+ (float)((COERCE_UNSIGNED_INT(v1321 * 1.4142) >> 23) - 127))* 0.69315)- v865));
      if (v1420 < 0)
      {
        v1421 = 0;
        v1422 = 0;
        goto LABEL_956;
      }
      if (v864 * v862 <= v1420)
      {
        v1421 = v862 - 1;
        v1422 = v863 - 1;
        if ((_DWORD)v863 != 1)
          goto LABEL_956;
      }
      else
      {
        v1421 = v1420 / v864;
        v1422 = v1420 % v864;
        if (v1422)
          goto LABEL_956;
      }
      if (v1421 <= 0)
        v1422 = 0;
      else
        v1422 = v863 - 1;
      v1421 -= v1421 > 0;
LABEL_956:
      v1423 = v1326 * 1.4142;
      v1424 = (float)(1 << v1421);
      v1425 = v870 * (float)(1.0 / v1424);
      v1426 = v871 * (float)(1.0 / v1424);
      v1427 = v1423 / v1424;
      v1428 = (unint64_t *)(v875 + 144 * (v863 * v1421 + v1422));
      v1429 = v1428[5];
      v1430 = (float)(v1423 / v1424) * 0.0;
      v1431 = (float)(v1430 + v1425) - v1430;
      v1432 = (float)v1428[4] + -1.001;
      if (v1432 >= v1431)
        v1432 = (float)(v1430 + v1425) - v1430;
      if (v1431 >= 0.0)
        v1433 = v1432;
      else
        v1433 = 0.0;
      v1434 = v1426 + (float)(v1430 * 0.0);
      v1435 = (float)v1428[6] + -1.001;
      if (v1435 >= (float)(v1434 - v1427))
        v1435 = v1434 - v1427;
      if ((float)(v1434 - v1427) >= 0.0)
        v1436 = v1435;
      else
        v1436 = 0.0;
      v1437 = v1436;
      v1438 = v1433 + 1;
      v1439 = v1428[11] + 4 * v1429 * v1437;
      v1440 = (float)(*(float *)(v1439 + 4 * v1429 + 4 * v1438)
                    * (float)((float)(v1433 - (float)v1433) * (float)(v1436 - (float)v1436)))
            + (float)((float)(*(float *)(v1439 + 4 * v1429 + 4 * v1433)
                            * (float)((float)((float)v1438 - v1433) * (float)(v1436 - (float)v1436)))
                    + (float)((float)(*(float *)(v1439 + 4 * v1433)
                                    * (float)((float)((float)v1438 - v1433)
                                            * (float)((float)(v1437 + 1) - v1436)))
                            + (float)(*(float *)(v1439 + 4 * v1438)
                                    * (float)((float)(v1433 - (float)v1433)
                                            * (float)((float)(v1437 + 1) - v1436)))));
      v1776 = 0xBF80000000000000;
      v1777 = LODWORD(v1423) | ((unint64_t)(int)(float)(v1440 * 255.0) << 32);
      v1441 = v1428[5];
      v1442 = v1427 * 0.70711;
      v1443 = (float)(v1427 * 0.70711) + v1425;
      v1444 = v1430 * 0.5;
      v1445 = v1443 + (float)(v1430 * 0.5);
      v1446 = (float)v1428[4] + -1.001;
      if (v1446 >= v1445)
        v1446 = v1443 + (float)(v1430 * 0.5);
      if (v1445 < 0.0)
        v1446 = 0.0;
      v1447 = v1430 * 0.70711;
      v1448 = v1426 + (float)(v1430 * 0.70711);
      v1449 = v1427 * 0.5;
      v1450 = (float)(v1427 * 0.5) + v1448;
      v1451 = (float)v1428[6] + -1.001;
      if (v1451 >= v1450)
        v1451 = (float)(v1427 * 0.5) + v1448;
      if (v1450 >= 0.0)
        v1452 = v1451;
      else
        v1452 = 0.0;
      v1453 = v1446;
      v1454 = v1452;
      v1455 = v1446 + 1;
      v1456 = v1428[11] + 4 * v1441 * v1454;
      v1457 = v1456 + 4 * v1441;
      v1458 = (float)v1455 - v1446;
      v1459 = (float)(v1454 + 1) - v1452;
      v1460 = v1458 * v1459;
      v1461 = v1446 - (float)v1446;
      v1462 = v1461 * v1459;
      v1463 = v1452 - (float)v1452;
      v1464 = v1461 * v1463;
      v1465 = 4 * v1455;
      v1466 = (float)(*(float *)(v1457 + 4 * v1453) * (float)(v1458 * v1463))
            + (float)((float)(*(float *)(v1456 + 4 * v1453) * v1460) + (float)(*(float *)(v1456 + v1465) * v1462));
      v1467 = *(float *)(v1457 + v1465);
      v1778 = 0x3F0000003F3504F3;
      v1779 = LODWORD(v1423) | ((unint64_t)(int)(float)((float)((float)(v1467 * v1464) + v1466)
                                                                           * 255.0) << 32);
      v1468 = v1428[5];
      v1469 = v1430 * -0.5;
      v1470 = v1443 + (float)(v1430 * -0.5);
      v1471 = (float)v1428[4] + -1.001;
      if (v1471 >= v1470)
        v1471 = v1470;
      if (v1470 < 0.0)
        v1471 = 0.0;
      v1472 = v1427 * -0.5;
      v1473 = (float)(v1427 * -0.5) + v1448;
      v1474 = (float)v1428[6] + -1.001;
      if (v1474 >= v1473)
        v1474 = v1473;
      if (v1473 >= 0.0)
        v1475 = v1474;
      else
        v1475 = 0.0;
      v1476 = v1475;
      v1477 = v1471 + 1;
      v1478 = v1428[11] + 4 * v1468 * v1476;
      v1479 = (float)((float)(*(float *)(v1478 + 4 * v1468 + 4 * v1477)
                            * (float)((float)(v1471 - (float)v1471)
                                    * (float)(v1475 - (float)v1475)))
                    + (float)((float)(*(float *)(v1478 + 4 * v1468 + 4 * v1471)
                                    * (float)((float)((float)v1477 - v1471) * (float)(v1475 - (float)v1475)))
                            + (float)((float)(*(float *)(v1478 + 4 * v1471)
                                            * (float)((float)((float)v1477 - v1471)
                                                    * (float)((float)(v1476 + 1) - v1475)))
                                    + (float)(*(float *)(v1478 + 4 * v1477)
                                            * (float)((float)(v1471 - (float)v1471)
                                                    * (float)((float)(v1476 + 1) - v1475))))))
            * 255.0;
      v1780 = 0xBF0000003F3504F3;
      v1781 = LODWORD(v1423) | ((unint64_t)(int)v1479 << 32);
      v1480 = v1428[5];
      v1481 = v1430 + (float)(v1430 + v1425);
      v1482 = (float)v1428[4] + -1.001;
      if (v1482 >= v1481)
        v1482 = v1481;
      if (v1481 >= 0.0)
        v1483 = v1482;
      else
        v1483 = 0.0;
      v1484 = v1427 + v1434;
      v1485 = (float)v1428[6] + -1.001;
      if (v1485 >= v1484)
        v1485 = v1484;
      if (v1484 >= 0.0)
        v1486 = v1485;
      else
        v1486 = 0.0;
      v1487 = v1483;
      v1488 = v1486;
      v1489 = v1483 + 1;
      v1490 = v1428[11] + 4 * v1480 * v1488;
      v1491 = v1490 + 4 * v1480;
      v1492 = (float)v1489 - v1483;
      v1493 = (float)(v1488 + 1) - v1486;
      v1494 = v1492 * v1493;
      v1495 = v1483 - (float)v1483;
      v1496 = v1486 - (float)v1486;
      v1497 = v1492 * v1496;
      v1498 = v1495 * v1496;
      v1499 = 4 * v1489;
      v1500 = (float)(*(float *)(v1491 + 4 * v1487) * v1497)
            + (float)((float)(*(float *)(v1490 + 4 * v1487) * v1494)
                    + (float)(*(float *)(v1490 + v1499) * (float)(v1495 * v1493)));
      v1501 = *(float *)(v1491 + v1499);
      v1782 = 0x3F80000000000000;
      v1783 = LODWORD(v1423) | ((unint64_t)(int)(float)((float)((float)(v1501 * v1498) + v1500)
                                                                           * 255.0) << 32);
      v1502 = v1428[5];
      v1503 = v1425 - v1442;
      v1504 = (float)v1428[4] + -1.001;
      if (v1504 >= (float)(v1503 + v1469))
        v1504 = v1503 + v1469;
      if ((float)(v1503 + v1469) >= 0.0)
        v1505 = v1504;
      else
        v1505 = 0.0;
      v1506 = v1426 - v1447;
      v1507 = (float)v1428[6] + -1.001;
      if (v1507 >= (float)(v1472 + v1506))
        v1507 = v1472 + v1506;
      if ((float)(v1472 + v1506) >= 0.0)
        v1508 = v1507;
      else
        v1508 = 0.0;
      v1509 = v1508;
      v1510 = v1505 + 1;
      v1511 = v1428[11] + 4 * v1502 * v1509;
      v1512 = (float)((float)(*(float *)(v1511 + 4 * v1502 + 4 * v1510)
                            * (float)((float)(v1505 - (float)v1505)
                                    * (float)(v1508 - (float)v1508)))
                    + (float)((float)(*(float *)(v1511 + 4 * v1502 + 4 * v1505)
                                    * (float)((float)((float)v1510 - v1505) * (float)(v1508 - (float)v1508)))
                            + (float)((float)(*(float *)(v1511 + 4 * v1505)
                                            * (float)((float)((float)v1510 - v1505)
                                                    * (float)((float)(v1509 + 1) - v1508)))
                                    + (float)(*(float *)(v1511 + 4 * v1510)
                                            * (float)((float)(v1505 - (float)v1505)
                                                    * (float)((float)(v1509 + 1) - v1508))))))
            * 255.0;
      v1784 = 0xBF000000BF3504F3;
      v1785 = LODWORD(v1423) | ((unint64_t)(int)v1512 << 32);
      v1513 = v1428[11];
      v1515 = v1428[4];
      v1514 = v1428[5];
      v1516 = v1428[6];
      v1517 = v1503 + v1444;
      v1518 = (float)v1515 + -1.001;
      if (v1518 >= v1517)
        v1518 = v1517;
      if (v1517 >= 0.0)
        v1519 = v1518;
      else
        v1519 = 0.0;
      v1520 = v1449 + v1506;
      v1521 = (float)v1516 + -1.001;
      if (v1521 >= v1520)
        v1521 = v1520;
      if (v1520 < 0.0)
        v1521 = 0.0;
      v1522 = v1519;
      v1523 = v1521;
      v1524 = v1519 + 1;
      v1525 = v1513 + 4 * v1514 * v1523;
      v1526 = v1525 + 4 * v1514;
      v1527 = (float)v1524 - v1519;
      v1528 = (float)(v1523 + 1) - v1521;
      v1529 = v1527 * v1528;
      v1530 = v1519 - (float)v1519;
      v1531 = v1521 - (float)v1521;
      v1532 = v1527 * v1531;
      v1533 = v1530 * v1531;
      v1534 = 4 * v1524;
      v1535 = (float)(*(float *)(v1526 + 4 * v1522) * v1532)
            + (float)((float)(*(float *)(v1525 + 4 * v1522) * v1529)
                    + (float)(*(float *)(v1525 + v1534) * (float)(v1530 * v1528)));
      v1536 = *(float *)(v1526 + v1534);
      v1786 = 0x3F000000BF3504F3;
      v1787 = LODWORD(v1423) | ((unint64_t)(int)(float)((float)((float)(v1536 * v1533) + v1535)
                                                                           * 255.0) << 32);
      v1537 = vcvtms_s32_f32(v866* (float)((float)((float)((float)((float)((float)((float)(COERCE_FLOAT(COERCE_UNSIGNED_INT(v1419 * 1.4142) & 0x807FFFFF | 0x3F800000)* -0.33333)+ 2.0)* COERCE_FLOAT(COERCE_UNSIGNED_INT(v1419 * 1.4142) & 0x807FFFFF | 0x3F800000))+ -1.6667)+ (float)((COERCE_UNSIGNED_INT(v1419 * 1.4142) >> 23) - 127))* 0.69315)- v865));
      if (v1537 < 0)
      {
        v1538 = 0;
        v1539 = 0;
      }
      else if (v864 * v862 <= v1537)
      {
        v1538 = v862 - 1;
        v1539 = v863 - 1;
        if ((_DWORD)v863 == 1)
        {
LABEL_1019:
          if (v1538 <= 0)
            v1539 = 0;
          else
            v1539 = v863 - 1;
          v1538 -= v1538 > 0;
        }
      }
      else
      {
        v1538 = v1537 / v864;
        v1539 = v1537 % v864;
        if (!v1539)
          goto LABEL_1019;
      }
      v1540 = 0;
      v1541 = (float)(1 << v1538);
      v1542 = v1423 * 1.4142;
      v1543 = v870 * (float)(1.0 / v1541);
      v1544 = v871 * (float)(1.0 / v1541);
      v1545 = (float)(v1423 * 1.4142) / v1541;
      v1546 = (unint64_t *)(v875 + 144 * (v863 * v1538 + v1539));
      v1547 = v1546[5];
      v1548 = v1543 - (float)(v1545 * 0.5);
      v1549 = v1545 * 0.0;
      v1550 = (float)(v1545 * 0.0) * 0.70711;
      v1551 = (float)v1546[4] + -1.001;
      if (v1551 >= (float)(v1548 + v1550))
        v1551 = v1548 + v1550;
      if ((float)(v1548 + v1550) >= 0.0)
        v1552 = v1551;
      else
        v1552 = 0.0;
      v1553 = v1549 * 0.5;
      v1554 = v1544 - (float)(v1549 * 0.5);
      v1555 = (float)(v1545 * 0.70711) + v1554;
      v1556 = (float)v1546[6] + -1.001;
      if (v1556 >= v1555)
        v1556 = (float)(v1545 * 0.70711) + v1554;
      if (v1555 >= 0.0)
        v1557 = v1556;
      else
        v1557 = 0.0;
      v1558 = v1557;
      v1559 = v1552 + 1;
      v1560 = v1546[11] + 4 * v1547 * v1558;
      v1561 = (float)(*(float *)(v1560 + 4 * v1547 + 4 * v1559)
                    * (float)((float)(v1552 - (float)v1552) * (float)(v1557 - (float)v1557)))
            + (float)((float)(*(float *)(v1560 + 4 * v1547 + 4 * v1552)
                            * (float)((float)((float)v1559 - v1552) * (float)(v1557 - (float)v1557)))
                    + (float)((float)(*(float *)(v1560 + 4 * v1552)
                                    * (float)((float)((float)v1559 - v1552)
                                            * (float)((float)(v1558 + 1) - v1557)))
                            + (float)(*(float *)(v1560 + 4 * v1559)
                                    * (float)((float)(v1552 - (float)v1552)
                                            * (float)((float)(v1558 + 1) - v1557)))));
      v1562 = LODWORD(v1542);
      v1788 = 0x3F3504F3BF000000;
      v1789 = LODWORD(v1542) | ((unint64_t)(int)(float)(v1561 * 255.0) << 32);
      v1563 = v1546[5];
      v1564 = (float)(v1545 * 0.5) + v1543;
      v1565 = v1564 + v1550;
      v1566 = (float)v1546[4] + -1.001;
      if (v1566 >= v1565)
        v1566 = v1565;
      if (v1565 >= 0.0)
        v1567 = v1566;
      else
        v1567 = 0.0;
      v1568 = v1544 + v1553;
      v1569 = (float)(v1545 * 0.70711) + (float)(v1544 + v1553);
      v1570 = (float)v1546[6] + -1.001;
      if (v1570 >= v1569)
        v1570 = v1569;
      if (v1569 >= 0.0)
        v1571 = v1570;
      else
        v1571 = 0.0;
      v1572 = v1571;
      v1573 = v1546[11] + 4 * v1563 * v1572;
      v1574 = v1567 + 1;
      v1575 = v1562 | ((unint64_t)(int)(float)((float)((float)(*(float *)(v1573
                                                                                             + 4 * v1563
                                                                                             + 4 * v1574)
                                                                                  * (float)((float)(v1567
                                                                                                  - (float)v1567)
                                                                                          * (float)(v1571
                                                                                                  - (float)v1571)))
                                                                          + (float)((float)(*(float *)(v1573 + 4 * v1563 + 4 * v1567)
                                                                                          * (float)((float)((float)v1574 - v1567)
                                                                                                  * (float)(v1571 - (float)v1571)))
                                                                                  + (float)((float)(*(float *)(v1573 + 4 * v1567)
                                                                                                  * (float)((float)((float)v1574 - v1567) * (float)((float)(v1572 + 1) - v1571)))
                                                                                          + (float)(*(float *)(v1573 + 4 * v1574)
                                                                                                  * (float)((float)(v1567 - (float)v1567) * (float)((float)(v1572 + 1) - v1571))))))
                                                                  * 255.0) << 32);
      v1790 = 0x3F3504F33F000000;
      v1791 = v1575;
      v1576 = v1546[5];
      v1577 = (float)(v1545 + v1543) + (float)(v1549 * 0.0);
      v1578 = (float)v1546[4] + -1.001;
      if (v1578 >= v1577)
        v1578 = (float)(v1545 + v1543) + (float)(v1549 * 0.0);
      if (v1577 >= 0.0)
        v1579 = v1578;
      else
        v1579 = 0.0;
      v1580 = v1549 + (float)(v1549 + v1544);
      v1581 = (float)v1546[6] + -1.001;
      if (v1581 >= v1580)
        v1581 = v1549 + (float)(v1549 + v1544);
      if (v1580 >= 0.0)
        v1582 = v1581;
      else
        v1582 = 0.0;
      v1583 = v1582;
      v1584 = v1546[11] + 4 * v1576 * v1583;
      v1585 = v1579 + 1;
      v1586 = v1562 | ((unint64_t)(int)(float)((float)((float)(*(float *)(v1584
                                                                                             + 4 * v1576
                                                                                             + 4 * v1585)
                                                                                  * (float)((float)(v1579
                                                                                                  - (float)v1579)
                                                                                          * (float)(v1582
                                                                                                  - (float)v1582)))
                                                                          + (float)((float)(*(float *)(v1584 + 4 * v1576 + 4 * v1579)
                                                                                          * (float)((float)((float)v1585 - v1579)
                                                                                                  * (float)(v1582 - (float)v1582)))
                                                                                  + (float)((float)(*(float *)(v1584 + 4 * v1579)
                                                                                                  * (float)((float)((float)v1585 - v1579) * (float)((float)(v1583 + 1) - v1582)))
                                                                                          + (float)(*(float *)(v1584 + 4 * v1585)
                                                                                                  * (float)((float)(v1579 - (float)v1579) * (float)((float)(v1583 + 1) - v1582))))))
                                                                  * 255.0) << 32);
      v1792 = 1065353216;
      v1793 = v1586;
      v1587 = v1546[5];
      v1588 = v1564 + (float)(v1549 * -0.70711);
      v1589 = (float)v1546[4] + -1.001;
      if (v1589 >= v1588)
        v1589 = v1588;
      if (v1588 >= 0.0)
        v1590 = v1589;
      else
        v1590 = 0.0;
      v1591 = (float)(v1545 * -0.70711) + v1568;
      v1592 = (float)v1546[6] + -1.001;
      if (v1592 >= v1591)
        v1592 = v1591;
      if (v1591 >= 0.0)
        v1593 = v1592;
      else
        v1593 = 0.0;
      v1594 = v1590;
      v1595 = v1593;
      v1596 = v1546[11] + 4 * v1587 * v1595;
      v1597 = (float)(v1595 + 1);
      LODWORD(v1595) = v1590 + 1;
      v1598 = v1596 + 4 * v1587;
      v1599 = (float)v1595 - v1590;
      v1600 = v1597 - v1593;
      v1601 = v1599 * v1600;
      v1602 = v1590 - (float)v1590;
      v1603 = v1602 * v1600;
      v1604 = v1593 - (float)v1593;
      v1605 = v1602 * v1604;
      v1606 = 4 * v1595;
      v1607 = (float)(*(float *)(v1598 + 4 * v1594) * (float)(v1599 * v1604))
            + (float)((float)(*(float *)(v1596 + 4 * v1594) * v1601) + (float)(*(float *)(v1596 + v1606) * v1603));
      v1608 = *(float *)(v1598 + v1606);
      v1794 = 0xBF3504F33F000000;
      v1795 = v1562 | ((unint64_t)(int)(float)((float)((float)(v1608 * v1605) + v1607) * 255.0) << 32);
      v1609 = v1546[5];
      v1610 = v1548 + (float)(v1549 * -0.70711);
      v1611 = (float)v1546[4] + -1.001;
      if (v1611 >= v1610)
        v1611 = v1610;
      if (v1610 >= 0.0)
        v1612 = v1611;
      else
        v1612 = 0.0;
      v1613 = (float)(v1545 * -0.70711) + v1554;
      v1614 = (float)v1546[6] + -1.001;
      if (v1614 >= v1613)
        v1614 = v1613;
      if (v1613 >= 0.0)
        v1615 = v1614;
      else
        v1615 = 0.0;
      v1616 = v1615;
      v1617 = v1546[11] + 4 * v1609 * v1616;
      v1618 = (float)((float)(*(float *)(v1617 + 4 * v1609 + 4 * (v1612 + 1))
                            * (float)((float)(v1612 - (float)v1612)
                                    * (float)(v1615 - (float)v1615)))
                    + (float)((float)(*(float *)(v1617 + 4 * v1609 + 4 * v1612)
                                    * (float)((float)((float)(v1612 + 1) - v1612)
                                            * (float)(v1615 - (float)v1615)))
                            + (float)((float)(*(float *)(v1617 + 4 * v1612)
                                            * (float)((float)((float)(v1612 + 1) - v1612)
                                                    * (float)((float)(v1616 + 1) - v1615)))
                                    + (float)(*(float *)(v1617 + 4 * (v1612 + 1))
                                            * (float)((float)(v1612 - (float)v1612)
                                                    * (float)((float)(v1616 + 1) - v1615))))))
            * 255.0;
      v1796 = 0xBF3504F3BF000000;
      v1797 = v1562 | ((unint64_t)(int)v1618 << 32);
      v1619 = v1546[11];
      v1621 = v1546[4];
      v1620 = v1546[5];
      v1622 = v1546[6];
      v1623 = (float)(v1543 - v1545) + (float)(v1549 * 0.0);
      v1624 = (float)v1621 + -1.001;
      if (v1624 >= v1623)
        v1624 = v1623;
      if (v1623 >= 0.0)
        v1625 = v1624;
      else
        v1625 = 0.0;
      v1626 = v1549 + (float)(v1544 - v1549);
      v1627 = (float)v1622 + -1.001;
      if (v1627 >= v1626)
        v1627 = v1626;
      if (v1626 >= 0.0)
        v1628 = v1627;
      else
        v1628 = 0.0;
      v1629 = v1628;
      v1630 = v1619 + 4 * v1620 * v1629;
      v1631 = (float)(v1629 + 1);
      v1632 = v1630 + 4 * v1620;
      v1633 = 4 * v1625;
      v1634 = 4 * (v1625 + 1);
      v1635 = (float)(v1625 + 1) - v1625;
      v1636 = v1631 - v1628;
      v1637 = v1635 * v1636;
      v1638 = v1625 - (float)v1625;
      v1639 = v1628 - (float)v1628;
      v1640 = v1635 * v1639;
      v1641 = v1638 * v1639;
      v1642 = *(float *)(v1632 + v1634);
      v1643 = (float)(*(float *)(v1632 + v1633) * v1640)
            + (float)((float)(*(float *)(v1630 + v1633) * v1637)
                    + (float)(*(float *)(v1630 + v1634) * (float)(v1638 * v1636)));
      v1798 = 3212836864;
      v1799 = v1562 | ((unint64_t)(int)(float)((float)((float)(v1642 * v1641) + v1643) * 255.0) << 32);
      HIDWORD(v1666) = 720904;
      LODWORD(v1668) = 786441;
      v1669 = 851978;
      v1670 = 655368;
      v1671 = 720905;
      v1672 = 786442;
      v1673 = 851979;
      v1674 = 524300;
      v1675 = 589837;
      v1676 = 1245200;
      v1677 = 1114132;
      v1678 = 1179669;
      v1679 = 1114128;
      v1680 = 1179668;
      v1681 = 1048597;
      v1682 = 1310739;
      v1683 = 1376273;
      v1684 = 1245202;
      v1685 = 1769496;
      v1686 = 1835033;
      v1687 = 1900570;
      v1688 = 1703960;
      v1689 = 1769497;
      v1690 = 1835034;
      v1691 = 1900571;
      v1692 = 1572892;
      v1693 = 1638429;
      v1694 = 2293792;
      v1695 = 2162724;
      v1696 = 2228261;
      v1697 = 2162720;
      v1698 = 2228260;
      v1699 = 2097189;
      v1700 = 2359331;
      v1701 = 2424865;
      v1702 = 2293794;
      v1703 = 2818088;
      v1704 = 2883625;
      v1705 = 2949162;
      v1706 = 2752552;
      v1707 = 2818089;
      v1708 = 2883626;
      v1709 = 2949163;
      v1710 = 2621484;
      v1711 = 2687021;
      v858 = 0;
      do
      {
        v1644 = (float32x2_t *)(&v1713 + *(unsigned __int16 *)((char *)&v1666 + v1540 + 4));
        v1645 = (float32x2_t *)(&v1713 + *(unsigned __int16 *)((char *)&v1666 + v1540 + 6));
        v1646 = vsub_f32(*v1644, *v1645);
        v1647 = 1.0 / sqrtf(vaddv_f32(vmul_f32(v1646, v1646)));
        v1648 = vmul_n_f32(v1646, v1647);
        LOWORD(v1647) = v1644[1].i16[2];
        LOWORD(v1640) = v1645[1].i16[2];
        *(char **)((char *)&v1666 + v1540 + 8) = (char *)v1648;
        v1640 = (float)LODWORD(v1640);
        v858 = vadd_f32(v858, vmul_n_f32(v1648, (float)LODWORD(v1647) - v1640));
        v1540 += 12;
      }
      while (v1540 != 540);
      if (v858.f32[1] != 0.0 || (v860 = 0.0, v858.f32[0] != 0.0))
      {
        v855 = fabsf(v858.f32[1]) + 0.0000001;
        v856 = v858.f32[0] <= 0.0;
        v857 = (float)(v858.f32[0] + v855) / (float)(v855 - v858.f32[0]);
        v858.f32[0] = (float)(v858.f32[0] - v855) / (float)(v858.f32[0] + v855);
        v859 = 0.7854;
        if (v856)
        {
          v859 = 2.3562;
          v858.f32[0] = v857;
        }
        v858.f32[0] = v859
                    + (float)(v858.f32[0] * (float)((float)(v858.f32[0] * (float)(v858.f32[0] * 0.1821)) + -0.9675));
        v860 = 6.2832 - v858.f32[0];
        if (v858.f32[1] >= 0.0)
          v860 = v858.f32[0];
      }
      v854[5].f32[0] = v860;
      v854 += 6;
      if (v854 == v1663)
        goto LABEL_1088;
    }
  }
  if (v8)
    goto LABEL_1089;
  v1657 = a1;
  v1658 = v6;
  v9 = *(unint64_t **)(a1 + 56);
  v10 = *(_QWORD *)(v6 + 80);
  v11 = *v9;
  v1666 = 0;
  v1667 = 0;
  v1668 = 0;
  if (v11)
  {
    if (v11 >> 62)
      sub_20E867F44();
    v12 = (char *)operator new(4 * v11);
    v1666 = v12;
    v1668 = &v12[4 * v11];
    bzero(v12, 4 * v11);
    v1667 = v1668;
    v13 = *(_QWORD *)(v10 + 24);
    if (!v13)
      goto LABEL_533;
    goto LABEL_523;
  }
  v12 = 0;
  v13 = *(_QWORD *)(v10 + 24);
  if (v13)
  {
LABEL_523:
    v812 = *(_QWORD *)(v10 + 32);
    if (v812)
    {
      for (i = 0; i < v13; ++i)
      {
        if (v812)
        {
          for (j = 0; j < v812; ++j)
          {
            v815 = v9[12] + 144 * (j + i * v9[9]);
            v816 = *(float **)(v815 + 88);
            v817 = *(_QWORD *)(v10 + 56) + 144 * (j + i * v812);
            v818 = *(float **)(v817 + 88);
            v819 = *(_DWORD *)(v817 + 40);
            v820 = *(_DWORD *)(v815 + 32);
            v821 = *(_DWORD *)(v815 + 48);
            if (v820 < 10)
              sub_210115B9C(v816, v818, v819, v820, v821);
            else
              sub_2101155D4(v816, v818, v819, v820, v821);
            v812 = *(_QWORD *)(v10 + 32);
          }
          v13 = *(_QWORD *)(v10 + 24);
        }
      }
    }
  }
LABEL_533:
  v1664 = 0uLL;
  v1665 = 0;
  v822 = *(float32x2_t **)a3;
  v1660 = *(float32x2_t **)(a3 + 8);
  if (v1660 == *(float32x2_t **)a3)
    goto LABEL_572;
  v823 = 0x5555555555555556 * (((uint64_t)v1660 - *(_QWORD *)a3) >> 4);
  if (v823 > 0x555555555555555)
    sub_20E867F44();
  v1654 = a4;
  v1656 = a3;
  v824 = (char *)operator new(32 * (((uint64_t)v1660 - *(_QWORD *)a3) >> 4));
  v827 = &v824[48 * v823];
  v828 = (float32x2_t *)v824;
  do
  {
    v825.i32[0] = v822[1].i32[1];
    v829 = *(float *)(v10 + 108);
    v830 = (float)((float)((float)((float)((float)((float)(COERCE_FLOAT(v825.i32[0] & 0x807FFFFF | 0x3F800000) * -0.33333)
                                                 + 2.0)
                                         * COERCE_FLOAT(v825.i32[0] & 0x807FFFFF | 0x3F800000))
                                 + -1.6667)
                         + (float)(((unsigned __int32)v825.i32[0] >> 23) - 127))
                 * 0.69315)
         - *(float *)(v10 + 112);
    v1712 = 0;
    v831 = vcvtps_s32_f32((float)(v829 * v830) + -0.000001);
    if (v831 < 0)
    {
      v836 = 0;
      v837 = 0;
    }
    else
    {
      v832 = *(_DWORD *)(v10 + 24);
      v833 = *(_DWORD *)(v10 + 32) - 1;
      if (v833 * v832 <= v831)
      {
        v834 = v832 - 1;
        v835 = *(_DWORD *)(v10 + 32) - 1;
      }
      else
      {
        v834 = v831 / v833;
        v835 = v831 % v833;
      }
      if (v834 <= 0)
        v838 = 0;
      else
        v838 = *(_DWORD *)(v10 + 32) - 1;
      v836 = v834 - (v834 > 0);
      if (v835)
      {
        v836 = v834;
        v837 = v835;
      }
      else
      {
        v837 = v838;
      }
    }
    *(float *)&v826 = 1.0 / (float)(1 << v836);
    *(float *)v825.i32 = *(float *)v825.i32 * *(float *)&v826;
    v1662 = v12;
    sub_20FD87CE4((uint64_t)v9, (uint64_t)v12, &v1712, v836, v837, v822->f32[0] * *(float *)&v826, v822->f32[1] * *(float *)&v826, v825, v826);
    v839 = v1712;
    if (v1712 >= 1)
    {
      for (k = 0; k < v839; ++k)
      {
        while (1)
        {
          v1713 = *(_OWORD *)v822->f32;
          v1714 = *(_OWORD *)v822[2].f32;
          v1715 = v822[4];
          v843 = v822[5].i32[1];
          v844 = *(_DWORD *)&v12[4 * k];
          if (v828 >= (float32x2_t *)v827)
            break;
          v841 = *(_OWORD *)v822->f32;
          v842 = *(_OWORD *)v822[2].f32;
          v828[4] = v822[4];
          *(_OWORD *)v828->f32 = v841;
          *(_OWORD *)v828[2].f32 = v842;
          v828[5].i32[0] = v844;
          v828[5].i32[1] = v843;
          v828 += 6;
          if (++k >= v839)
            goto LABEL_536;
        }
        v845 = 0xAAAAAAAAAAAAAAABLL * (((char *)v828 - v824) >> 4) + 1;
        if (v845 > 0x555555555555555)
          sub_20E867F44();
        if (0x5555555555555556 * ((v827 - v824) >> 4) > v845)
          v845 = 0x5555555555555556 * ((v827 - v824) >> 4);
        if (0xAAAAAAAAAAAAAAABLL * ((v827 - v824) >> 4) >= 0x2AAAAAAAAAAAAAALL)
          v846 = 0x555555555555555;
        else
          v846 = v845;
        if (v846)
        {
          if (v846 > 0x555555555555555)
            sub_20E877A38();
          v847 = (char *)operator new(48 * v846);
        }
        else
        {
          v847 = 0;
        }
        v848 = &v847[16 * (((char *)v828 - v824) >> 4)];
        v849 = v1714;
        *(_OWORD *)v848 = v1713;
        *((_OWORD *)v848 + 1) = v849;
        *((float32x2_t *)v848 + 4) = v1715;
        *((_DWORD *)v848 + 10) = v844;
        *((_DWORD *)v848 + 11) = v843;
        if (v828 == (float32x2_t *)v824)
        {
          v852 = v828;
          v824 = &v847[16 * (((char *)v828 - v824) >> 4)];
          v827 = &v847[48 * v846];
          v828 = (float32x2_t *)(v848 + 48);
          if (!v852)
            goto LABEL_567;
        }
        else
        {
          v850 = &v847[16 * (((char *)v828 - v824) >> 4)];
          do
          {
            v851 = *(_OWORD *)v828[-6].f32;
            v825 = *(int8x16_t *)v828[-2].f32;
            *((_OWORD *)v850 - 2) = *(_OWORD *)v828[-4].f32;
            *((int8x16_t *)v850 - 1) = v825;
            *((_OWORD *)v850 - 3) = v851;
            v850 -= 48;
            v828 -= 6;
          }
          while (v828 != (float32x2_t *)v824);
          v852 = (float32x2_t *)v824;
          v824 = v850;
          v827 = &v847[48 * v846];
          v828 = (float32x2_t *)(v848 + 48);
          if (!v852)
            goto LABEL_567;
        }
        operator delete(v852);
        v839 = v1712;
LABEL_567:
        v12 = v1662;
      }
    }
LABEL_536:
    v822 += 6;
  }
  while (v822 != v1660);
  *((_QWORD *)&v1664 + 1) = v828;
  v1665 = v827;
  *(_QWORD *)&v1664 = v824;
  a4 = v1654;
  a3 = v1656;
LABEL_572:
  if (v12)
    operator delete(v12);
  v853 = *(float32x2_t **)a3;
  a1 = v1657;
  v6 = v1658;
  if (*(_QWORD *)a3)
  {
    *(_QWORD *)(a3 + 8) = v853;
    operator delete(v853);
  }
  *(_OWORD *)a3 = v1664;
  *(_QWORD *)(a3 + 16) = v1665;
LABEL_1089:
  kdebug_trace();
LABEL_1090:
  kdebug_trace();
  v1649 = *(_QWORD *)(a1 + 312) - *(_QWORD *)(a1 + 304);
  if (v1649
    && v1649 != 2048
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/FeatureDetection/include/VIO/FeatureDetection/DoGAndFREAKGenerator.hpp", 9286, (uint64_t)"(config_.permutation_matrix.empty() || config_.permutation_matrix.size() == kBitsPerFreakDescriptor)", 100, (uint64_t)"Permutation matrix file size mismatch", 37, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v1650 = *(float32x2_t **)a3;
  v1651 = *(float32x2_t **)(a3 + 8);
  if (*(float32x2_t **)a3 == v1651)
  {
    v1652 = 0;
  }
  else
  {
    v1652 = 0;
    do
    {
      if (*(_QWORD *)(a1 + 192) <= (unint64_t)((uint64_t)(*(_QWORD *)(a4 + 64) - *(_QWORD *)(a4 + 56)) >> 5))
        break;
      sub_20FD5ED8C(&v1713, *(_QWORD *)(v6 + 80), v1650[2].f32[0], v1650[2].f32[1], v1650[5].f32[0], v1650[1].f32[1]);
      sub_20EDBB530(a4, v1650[3].i8[4], &v1713, v1650[2].f32[0], v1650[2].f32[1], v1650[5].f32[0], v1650[1].f32[1], v1650[5].f32[1]);
      ++v1652;
      v1650 += 6;
    }
    while (v1650 != v1651);
  }
  kdebug_trace();
  return v1652;
}

void sub_20FD5AB74(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *__p, uint64_t a16, uint64_t a17, void *a18, uint64_t a19)
{
  void *v19;

  if (__p)
    operator delete(__p);
  if (!v19)
    _Unwind_Resume(exception_object);
  operator delete(v19);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20FD5AC14(float32x2_t *a1, float32x2_t *a2, uint64_t a3, int a4)
{
  uint64_t result;
  float32x4_t v7;
  float32x4_t v8;
  int v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  signed int v13;
  int v14;
  float v15;
  float32x2_t v16;
  float32x4_t v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float32x2_t v26;
  float v27;
  float v28;
  float v29;
  signed int v30;
  int v31;
  int v32;
  float v33;
  float v34;
  _QWORD *v35;
  uint64_t v36;
  float32x2_t v37;
  uint64x2_t v38;
  float32x2_t v39;
  float32x4_t v40;
  uint64_t v41;
  uint32x2_t v42;
  float32x2_t v43;
  float32x2_t v44;
  int v45;
  int v46;
  float v47;
  _QWORD *v48;
  uint64_t v49;
  uint64_t v50;
  float v51;
  uint64x2_t v52;
  int32x2_t v53;
  float32x4_t v54;
  float32x2_t v55;
  float32x2_t v56;
  unsigned __int32 v57;
  float v58;
  float32x4_t v59;
  float32x4_t v60;
  int32x4_t v61;
  uint64_t v62;
  int32x4_t v63;
  uint32x4_t v64;
  unsigned __int32 v65;
  float32x4_t v66;
  unsigned __int32 v67;
  uint64_t v68;
  float32x4_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  float32x2_t v73;
  int32x2_t v74;
  uint64_t v75;
  float32x4_t v76;
  float32x4_t v77;
  uint64_t v78;
  uint64_t v79;
  float32x2_t v80;
  float32x4_t v81;
  uint64_t v82;
  float32x4_t v83;
  float32x2_t v84;
  int32x4_t v85;
  float32x4_t v86;
  float v87;
  float v88;
  float32x4_t v89;
  float32x4_t v90;
  uint64_t v91;
  float32x4_t v92;
  float32x4_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  float32x4_t v97;
  float32x4_t v98;
  float32x4_t v99;
  unsigned int v100;
  float v101;
  signed int v102;
  int v103;
  int v104;
  float v105;
  float v106;
  float v107;
  float v108;
  float v109;
  _QWORD *v110;
  uint64_t v111;
  unint64_t v112;
  uint64_t v113;
  unint64_t v114;
  float v115;
  float v116;
  float v117;
  float v118;
  float v119;
  float v120;
  float v121;
  uint64_t v122;
  unsigned int v123;
  uint64_t v124;
  uint64_t v125;
  float v126;
  float v127;
  int v128;
  float v129;
  float v130;
  float v131;
  float v132;
  float v133;
  float v134;
  unsigned int v135;
  uint64_t v136;
  unsigned int v137;
  uint64_t v138;
  float v139;
  float v140;
  float v141;
  float v142;
  uint64_t v143;
  uint64_t v144;
  float v145;
  float v146;
  uint64_t v147;
  uint64_t v148;
  float v149;
  float v150;
  int v151;
  float v152;
  float v153;
  uint64_t v154;
  unsigned int v155;
  uint64_t v156;
  float v157;
  float v158;
  unsigned int v159;
  unsigned int v160;
  float v161;
  float v162;
  uint64_t v163;
  uint64_t v164;
  float v165;
  float v166;
  signed int v167;
  int v168;
  int v169;
  float v170;
  _QWORD *v171;
  uint64_t v172;
  uint64_t v173;
  float v174;
  uint64x2_t v175;
  int32x2_t v176;
  float32x4_t v177;
  float32x2_t v178;
  float32x2_t v179;
  float v180;
  float32x4_t v181;
  float32x4_t v182;
  int32x4_t v183;
  uint64_t v184;
  int32x4_t v185;
  uint32x4_t v186;
  unsigned __int32 v187;
  unsigned __int32 v188;
  uint64_t v189;
  float32x4_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  float32x4_t v195;
  float32x4_t v196;
  uint64_t v197;
  uint64_t v198;
  float32x4_t v199;
  float32x4_t v200;
  uint64_t v201;
  float32x4_t v202;
  float32x2_t v203;
  float32x4_t v204;
  float32x4_t v205;
  float v206;
  float32x4_t v207;
  float v208;
  uint64_t v209;
  float32x4_t v210;
  float32x4_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  float32x4_t v215;
  float32x4_t v216;
  float v217;
  float v218;
  unsigned int v219;
  signed int v220;
  int v221;
  int v222;
  float v223;
  float v224;
  float v225;
  float v226;
  float v227;
  _QWORD *v228;
  uint64_t v229;
  unint64_t v230;
  uint64_t v231;
  unint64_t v232;
  float v233;
  float v234;
  float v235;
  float v236;
  float v237;
  float v238;
  float v239;
  uint64_t v240;
  unsigned int v241;
  uint64_t v242;
  uint64_t v243;
  float v244;
  float v245;
  uint64_t v246;
  uint64_t v247;
  int v248;
  float v249;
  float v250;
  float v251;
  float v252;
  float v253;
  float v254;
  float v255;
  float v256;
  unsigned int v257;
  uint64_t v258;
  unsigned int v259;
  uint64_t v260;
  float v261;
  float v262;
  float v263;
  float v264;
  uint64_t v265;
  uint64_t v266;
  float v267;
  float v268;
  float v269;
  uint64_t v270;
  uint64_t v271;
  float v272;
  float v273;
  int v274;
  float v275;
  float v276;
  uint64_t v277;
  unsigned int v278;
  uint64_t v279;
  float v280;
  float v281;
  unsigned int v282;
  unsigned int v283;
  float v284;
  float v285;
  uint64_t v286;
  uint64_t v287;
  float v288;
  float v289;
  signed int v290;
  int v291;
  int v292;
  float v293;
  _QWORD *v294;
  uint64_t v295;
  uint64_t v296;
  float v297;
  uint64x2_t v298;
  int32x2_t v299;
  float32x4_t v300;
  float32x2_t v301;
  float32x2_t v302;
  unsigned __int32 v303;
  float v304;
  float32x4_t v305;
  float32x4_t v306;
  int32x4_t v307;
  uint64_t v308;
  int32x4_t v309;
  uint32x4_t v310;
  unsigned __int32 v311;
  unsigned __int32 v312;
  uint64_t v313;
  float32x4_t v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  float32x2_t v318;
  int32x2_t v319;
  uint64_t v320;
  float32x4_t v321;
  float32x4_t v322;
  uint64_t v323;
  uint64_t v324;
  float32x4_t v325;
  float32x4_t v326;
  uint64_t v327;
  float32x4_t v328;
  float32x2_t v329;
  int32x4_t v330;
  float v331;
  float v332;
  float32x4_t v333;
  uint64_t v334;
  float32x4_t v335;
  float32x4_t v336;
  uint64_t v337;
  uint64_t v338;
  uint64_t v339;
  float32x4_t v340;
  float32x4_t v341;
  float v342;
  float v343;
  unsigned int v344;
  float v345;
  signed int v346;
  int v347;
  int v348;
  float v349;
  float v350;
  float v351;
  float v352;
  float v353;
  _QWORD *v354;
  uint64_t v355;
  unint64_t v356;
  uint64_t v357;
  unint64_t v358;
  float v359;
  float v360;
  float v361;
  float v362;
  float v363;
  float v364;
  float v365;
  uint64_t v366;
  unsigned int v367;
  uint64_t v368;
  uint64_t v369;
  float v370;
  float v371;
  uint64_t v372;
  uint64_t v373;
  int v374;
  float v375;
  float v376;
  float v377;
  float v378;
  float v379;
  float v380;
  float v381;
  unsigned int v382;
  uint64_t v383;
  unsigned int v384;
  uint64_t v385;
  float v386;
  float v387;
  float v388;
  float v389;
  uint64_t v390;
  uint64_t v391;
  float v392;
  float v393;
  float v394;
  uint64_t v395;
  uint64_t v396;
  float v397;
  float v398;
  int v399;
  float v400;
  float v401;
  uint64_t v402;
  unsigned int v403;
  uint64_t v404;
  float v405;
  float v406;
  unsigned int v407;
  unsigned int v408;
  float v409;
  float v410;
  uint64_t v411;
  uint64_t v412;
  signed int v413;
  int v414;
  int v415;
  uint64_t v416;
  float v417;
  _QWORD *v418;
  uint64_t v419;
  float v420;
  uint64x2_t v421;
  int32x2_t v422;
  float32x4_t v423;
  float32x2_t v424;
  float32x2_t v425;
  uint64_t v426;
  unsigned __int32 v427;
  float v428;
  float32x4_t v429;
  float32x4_t v430;
  int32x4_t v431;
  uint64_t v432;
  int32x4_t v433;
  uint32x4_t v434;
  unsigned __int32 v435;
  unsigned __int32 v436;
  uint64_t v437;
  float32x4_t v438;
  uint64_t v439;
  uint64_t v440;
  uint64_t v441;
  float32x2_t v442;
  int32x2_t v443;
  uint64_t v444;
  float32x4_t v445;
  float32x4_t v446;
  uint64_t v447;
  uint64_t v448;
  uint64_t v449;
  float32x2_t v450;
  int32x4_t v451;
  float32x4_t v452;
  float32x4_t v453;
  float v454;
  float v455;
  float32x4_t v456;
  float v457;
  float32x4_t v458;
  float32x4_t v459;
  uint64_t v460;
  uint64_t v461;
  __int32 *v462;
  __int32 *v463;
  uint64_t v464;
  float32x4_t v465;
  float32x4_t v466;
  float v467;
  float v468;
  unsigned int v469;
  int32x2_t v470;
  int32x2_t v471;
  int32x2_t v472;
  int32x2_t v473;
  int32x2_t v474;
  float32x4_t v475;
  float32x4_t v476;
  int32x2_t v477;
  float32x4_t v478;
  int v479;
  uint64_t v480;
  int v481;
  uint64_t v482;
  signed int v483;
  int v484;
  float32x4_t v485;
  int32x4_t v486;
  float v487;
  BOOL v488;
  float v489;
  float32x2_t v490;
  float v491;
  float v492;
  float v493;
  float v494;
  float v495;
  float v496;
  float v497;
  float v498;
  signed int v499;
  int v500;
  int v501;
  float v502;
  float v503;
  float v504;
  float v505;
  _QWORD *v506;
  uint64_t v507;
  uint64_t v508;
  unint64_t v509;
  unint64_t v510;
  float v511;
  float v512;
  float v513;
  float v514;
  float v515;
  float v516;
  uint64_t v517;
  unsigned int v518;
  uint64_t v519;
  int v520;
  int v521;
  float v522;
  float v523;
  float v524;
  float v525;
  unint64_t *v526;
  unint64_t v527;
  unint64_t v528;
  float32x4_t v529;
  float32x4_t v530;
  float32x4_t v531;
  float v532;
  float32x4_t v533;
  float32x4_t v534;
  float32x4_t v535;
  int32x4_t v536;
  unint64_t v537;
  uint64_t v538;
  float32x2_t v539;
  float v540;
  unint64_t v541;
  float32x4_t v542;
  float32x4_t v543;
  float32x4_t v544;
  float32x4_t v545;
  int32x4_t v546;
  uint32x4_t v547;
  float32x4_t v548;
  unsigned __int32 v549;
  uint64_t v550;
  unsigned __int32 v551;
  uint64_t v552;
  unint64_t v553;
  unint64_t v554;
  uint64_t v555;
  __int32 *v556;
  uint64_t v557;
  __int32 *v558;
  __int32 *v559;
  __int32 *v560;
  unint64_t v561;
  unint64_t v562;
  uint64_t v563;
  __int32 *v564;
  uint64_t v565;
  __int32 *v566;
  __int32 *v567;
  __int32 *v568;
  unint64_t v569;
  unint64_t v570;
  float32x4_t v571;
  float32x4_t v572;
  float32x4_t v573;
  float32x4_t v574;
  float32x4_t v575;
  float32x4_t v576;
  float32x4_t v577;
  float32x4_t v578;
  uint64_t v579;
  float32x4_t v580;
  uint64_t v581;
  float32x4_t v582;
  float32x4_t v583;
  float v584;
  float v585;
  uint64_t v586;
  unsigned int v587;
  unsigned int v588;
  unint64_t v589;
  float v590;
  float v591;
  float v592;
  float v593;
  float v594;
  float v595;
  uint64_t v596;
  unsigned int v597;
  unsigned int v598;
  unint64_t v599;
  float v600;
  float v601;
  signed int v602;
  int v603;
  int v604;
  unint64_t *v605;
  unint64_t v606;
  unint64_t v607;
  float v608;
  float v609;
  float32x2_t v610;
  float32x2_t v611;
  unsigned __int32 v612;
  float32x4_t v613;
  float32x4_t v614;
  float32x4_t v615;
  int8x16_t v616;
  float32x4_t v617;
  float32x4_t v618;
  float32x4_t v619;
  float32x4_t v620;
  float32x4_t v621;
  float32x4_t v622;
  float32x4_t v623;
  int32x4_t v624;
  uint32x4_t v625;
  unsigned __int32 v626;
  unsigned __int32 v627;
  float32x4_t v628;
  unsigned __int32 v629;
  unsigned __int32 v630;
  unsigned __int32 v631;
  float32x4_t v632;
  unsigned __int32 v633;
  unsigned __int32 v634;
  int32x4_t v635;
  unint64_t v636;
  uint64_t v637;
  uint64_t v638;
  unint64_t v639;
  uint64_t v640;
  uint64_t v641;
  unint64_t v642;
  uint64_t v643;
  uint64_t v644;
  float32x4_t v645;
  float32x4_t v646;
  unint64_t v647;
  float32x4_t v648;
  float32x4_t v649;
  float32x4_t v650;
  float32x4_t v651;
  float32x4_t v652;
  float32x4_t v653;
  uint64_t v654;
  float32x4_t v655;
  uint64_t v656;
  uint64_t v657;
  unint64_t v658;
  unint64_t v659;
  unint64_t v660;
  unint64_t v661;
  float32x4_t v662;
  float32x4_t v663;
  float v664;
  float v665;
  float v666;
  float v667;
  float v668;
  float v669;
  unsigned int v670;
  float v671;
  uint64_t v672;
  unsigned int v673;
  unint64_t v674;
  float v675;
  float v676;
  uint64_t v677;
  unsigned int v678;
  unsigned int v679;
  unint64_t v680;
  int v681;
  float v682;
  float v683;
  signed int v684;
  int v685;
  int v686;
  float v687;
  float v688;
  float v689;
  float v690;
  unint64_t *v691;
  unint64_t v692;
  unint64_t v693;
  float32x4_t v694;
  float32x4_t v695;
  float32x4_t v696;
  float v697;
  float32x4_t v698;
  float32x4_t v699;
  float32x4_t v700;
  int32x4_t v701;
  unint64_t v702;
  uint64_t v703;
  float32x2_t v704;
  float v705;
  unint64_t v706;
  float32x4_t v707;
  float32x4_t v708;
  float32x4_t v709;
  float32x4_t v710;
  int32x4_t v711;
  uint32x4_t v712;
  float32x4_t v713;
  unsigned __int32 v714;
  uint64_t v715;
  unsigned __int32 v716;
  uint64_t v717;
  unint64_t v718;
  unint64_t v719;
  uint64_t v720;
  __int32 *v721;
  uint64_t v722;
  __int32 *v723;
  __int32 *v724;
  __int32 *v725;
  unint64_t v726;
  unint64_t v727;
  uint64_t v728;
  __int32 *v729;
  uint64_t v730;
  __int32 *v731;
  __int32 *v732;
  __int32 *v733;
  unint64_t v734;
  unint64_t v735;
  float32x4_t v736;
  float32x4_t v737;
  float32x4_t v738;
  float32x4_t v739;
  float32x4_t v740;
  float32x4_t v741;
  float32x4_t v742;
  float32x4_t v743;
  uint64_t v744;
  float32x4_t v745;
  uint64_t v746;
  float32x4_t v747;
  float32x4_t v748;
  float v749;
  float v750;
  uint64_t v751;
  unsigned int v752;
  unsigned int v753;
  unint64_t v754;
  float v755;
  float v756;
  float v757;
  float v758;
  float v759;
  float v760;
  uint64_t v761;
  unsigned int v762;
  unsigned int v763;
  unint64_t v764;
  float v765;
  float v766;
  signed int v767;
  int v768;
  int v769;
  unint64_t *v770;
  unint64_t v771;
  unint64_t v772;
  float v773;
  float v774;
  float32x2_t v775;
  float32x2_t v776;
  unsigned __int32 v777;
  float32x4_t v778;
  float32x4_t v779;
  float32x4_t v780;
  int8x16_t v781;
  float32x4_t v782;
  float32x4_t v783;
  float32x4_t v784;
  float32x4_t v785;
  float32x4_t v786;
  float32x4_t v787;
  float32x4_t v788;
  int32x4_t v789;
  uint32x4_t v790;
  unsigned __int32 v791;
  unsigned __int32 v792;
  float32x4_t v793;
  unsigned __int32 v794;
  unsigned __int32 v795;
  unsigned __int32 v796;
  float32x4_t v797;
  unsigned __int32 v798;
  unsigned __int32 v799;
  int32x4_t v800;
  unint64_t v801;
  uint64_t v802;
  uint64_t v803;
  unint64_t v804;
  uint64_t v805;
  uint64_t v806;
  unint64_t v807;
  uint64_t v808;
  uint64_t v809;
  float32x4_t v810;
  float32x4_t v811;
  unint64_t v812;
  float32x4_t v813;
  float32x4_t v814;
  float32x4_t v815;
  float32x4_t v816;
  float32x4_t v817;
  float32x4_t v818;
  uint64_t v819;
  float32x4_t v820;
  uint64_t v821;
  uint64_t v822;
  unint64_t v823;
  unint64_t v824;
  unint64_t v825;
  unint64_t v826;
  float32x4_t v827;
  float32x4_t v828;
  float v829;
  float v830;
  float v831;
  float v832;
  float v833;
  float v834;
  unsigned int v835;
  float v836;
  uint64_t v837;
  unsigned int v838;
  unint64_t v839;
  float v840;
  float v841;
  uint64_t v842;
  unsigned int v843;
  unsigned int v844;
  unint64_t v845;
  float v846;
  float v847;
  signed int v848;
  int v849;
  int v850;
  float v851;
  float v852;
  float v853;
  float v854;
  unint64_t *v855;
  unint64_t v856;
  unint64_t v857;
  float32x4_t v858;
  float32x4_t v859;
  float32x4_t v860;
  float v861;
  float32x4_t v862;
  float32x4_t v863;
  float32x4_t v864;
  int32x4_t v865;
  unint64_t v866;
  uint64_t v867;
  float32x2_t v868;
  float v869;
  unint64_t v870;
  float32x4_t v871;
  float32x4_t v872;
  float32x4_t v873;
  float32x4_t v874;
  int32x4_t v875;
  uint32x4_t v876;
  float32x4_t v877;
  unsigned __int32 v878;
  uint64_t v879;
  unsigned __int32 v880;
  uint64_t v881;
  unint64_t v882;
  unint64_t v883;
  uint64_t v884;
  __int32 *v885;
  uint64_t v886;
  __int32 *v887;
  __int32 *v888;
  __int32 *v889;
  unint64_t v890;
  unint64_t v891;
  uint64_t v892;
  __int32 *v893;
  uint64_t v894;
  __int32 *v895;
  __int32 *v896;
  __int32 *v897;
  unint64_t v898;
  unint64_t v899;
  float32x4_t v900;
  float32x4_t v901;
  float32x4_t v902;
  float32x4_t v903;
  float32x4_t v904;
  float32x4_t v905;
  float32x4_t v906;
  float32x4_t v907;
  uint64_t v908;
  float32x4_t v909;
  uint64_t v910;
  float32x4_t v911;
  float32x4_t v912;
  float v913;
  float v914;
  uint64_t v915;
  unsigned int v916;
  unsigned int v917;
  unint64_t v918;
  float v919;
  float v920;
  float v921;
  float v922;
  float v923;
  float v924;
  uint64_t v925;
  unsigned int v926;
  unsigned int v927;
  unint64_t v928;
  float v929;
  float v930;
  signed int v931;
  int v932;
  int v933;
  unint64_t *v934;
  unint64_t v935;
  unint64_t v936;
  float v937;
  float v938;
  float32x2_t v939;
  float32x2_t v940;
  unsigned __int32 v941;
  float32x4_t v942;
  float32x4_t v943;
  float32x4_t v944;
  float32x4_t v945;
  float v946;
  float32x4_t v947;
  float32x4_t v948;
  float32x4_t v949;
  float32x4_t v950;
  float32x4_t v951;
  int32x4_t v952;
  uint32x4_t v953;
  unsigned __int32 v954;
  unsigned __int32 v955;
  float32x4_t v956;
  unsigned __int32 v957;
  unsigned __int32 v958;
  unsigned __int32 v959;
  float32x4_t v960;
  unsigned __int32 v961;
  unsigned __int32 v962;
  int32x4_t v963;
  unint64_t v964;
  uint64_t v965;
  uint64_t v966;
  unint64_t v967;
  uint64_t v968;
  uint64_t v969;
  unint64_t v970;
  uint64_t v971;
  uint64_t v972;
  float32x4_t v973;
  float32x4_t v974;
  unint64_t v975;
  float32x4_t v976;
  float32x4_t v977;
  float32x4_t v978;
  float32x4_t v979;
  float32x4_t v980;
  float32x4_t v981;
  uint64_t v982;
  float32x4_t v983;
  uint64_t v984;
  uint64_t v985;
  unint64_t v986;
  unint64_t v987;
  unint64_t v988;
  unint64_t v989;
  float32x4_t v990;
  float32x4_t v991;
  float v992;
  float v993;
  float v994;
  float v995;
  float v996;
  float v997;
  unsigned int v998;
  float v999;
  uint64_t v1000;
  unsigned int v1001;
  unint64_t v1002;
  float v1003;
  float v1004;
  uint64_t v1005;
  unsigned int v1006;
  unsigned int v1007;
  unint64_t v1008;
  signed int v1009;
  int v1010;
  int v1011;
  uint64_t v1012;
  float v1013;
  float v1014;
  float v1015;
  float v1016;
  unint64_t *v1017;
  unint64_t v1018;
  unint64_t v1019;
  float32x4_t v1020;
  float32x4_t v1021;
  float32x4_t v1022;
  float v1023;
  float32x4_t v1024;
  float32x4_t v1025;
  float32x4_t v1026;
  int32x4_t v1027;
  unint64_t v1028;
  uint64_t v1029;
  float v1030;
  unint64_t v1031;
  float32x4_t v1032;
  float32x4_t v1033;
  float32x4_t v1034;
  float32x4_t v1035;
  int32x4_t v1036;
  uint32x4_t v1037;
  float32x4_t v1038;
  unsigned __int32 v1039;
  uint64_t v1040;
  unsigned __int32 v1041;
  uint64_t v1042;
  unint64_t v1043;
  unint64_t v1044;
  uint64_t v1045;
  __int32 *v1046;
  uint64_t v1047;
  __int32 *v1048;
  __int32 *v1049;
  __int32 *v1050;
  unint64_t v1051;
  unint64_t v1052;
  uint64_t v1053;
  __int32 *v1054;
  uint64_t v1055;
  __int32 *v1056;
  __int32 *v1057;
  __int32 *v1058;
  unint64_t v1059;
  float32x4_t v1060;
  unint64_t v1061;
  float32x4_t v1062;
  float32x4_t v1063;
  float32x4_t v1064;
  float32x4_t v1065;
  float32x4_t v1066;
  float32x4_t v1067;
  float32x4_t v1068;
  float32x4_t v1069;
  uint64_t v1070;
  uint64_t v1071;
  float32x4_t v1072;
  float32x4_t v1073;
  float v1074;
  float v1075;
  uint64_t v1076;
  unsigned int v1077;
  unsigned int v1078;
  unint64_t v1079;
  float v1080;
  float v1081;
  float v1082;
  float v1083;
  float v1084;
  float v1085;
  unsigned int v1086;
  uint64_t v1087;
  unsigned int v1088;
  unint64_t v1089;
  float v1090;
  float v1091;
  float v1092;
  float v1093;
  float v1094;
  float v1095;
  float v1096;
  uint64_t v1097;
  float32x2_t v1098;
  float32x2_t v1099;
  float v1100;
  int v1103;
  _BYTE v1104[540];
  __int16 v1105;
  _WORD v1106[63];

  if (a4)
  {
    v1103 = 1191181824;
    result = (uint64_t)memcpy(v1104, "\b", sizeof(v1104));
    if (a1 != a2)
    {
      v9 = *(_DWORD *)(a3 + 24);
      v10 = *(_QWORD *)(a3 + 32);
      v11 = v10 - 1;
      v12 = *(_QWORD *)(a3 + 56);
      v13 = (v10 - 1) * v9;
      v14 = v9 - 1;
      v15 = 2.0;
      result = 1;
      v16 = (float32x2_t)vdup_n_s32(0xBF8020C5);
      v17 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      do
      {
        v26 = a1[2];
        v27 = a1[1].f32[1];
        memset(v1106, 0, sizeof(v1106));
        v29 = *(float *)(a3 + 108);
        v28 = *(float *)(a3 + 112);
        v30 = vcvtms_s32_f32(v29* (float)((float)((float)((float)((float)((float)((float)(COERCE_FLOAT(LODWORD(v27) & 0x807FFFFF | 0x3F800000)* -0.33333)+ v15)* COERCE_FLOAT(LODWORD(v27) & 0x807FFFFF | 0x3F800000))+ -1.6667)+ (float)((LODWORD(v27) >> 23) - 127))* 0.69315)- v28));
        if (v30 < 0)
        {
          v31 = 0;
          v32 = 0;
        }
        else
        {
          v31 = v14;
          v32 = v10 - 1;
          if (v13 > v30)
          {
            v31 = v30 / v11;
            v32 = v30 % v11;
          }
          if (!v32)
          {
            if (v31 <= 0)
              v32 = 0;
            else
              v32 = v10 - 1;
            v31 -= v31 > 0;
          }
        }
        v33 = v27 + v27;
        v34 = 1.0 / (float)(1 << v31);
        v35 = (_QWORD *)(v12 + 144 * (v10 * v31 + v32));
        v36 = v35[5];
        v37 = vadd_f32(vmul_n_f32(v26, v34), 0);
        v38.i64[0] = v35[4];
        v38.i64[1] = v35[6];
        v40 = (float32x4_t)vcvtq_f64_u64(v38);
        *(float32x2_t *)v40.f32 = vadd_f32(vcvt_f32_f64((float64x2_t)v40), v16);
        v39 = (float32x2_t)vbic_s8(vbsl_s8((int8x8_t)vcgt_f32(v37, *(float32x2_t *)v40.f32), *(int8x8_t *)v40.f32, (int8x8_t)v37), (int8x8_t)vcltz_f32(v37));
        *(uint32x2_t *)v40.f32 = vcvt_u32_f32(v39);
        v41 = v35[11] + 4 * v36 * v40.u32[1];
        v42 = (uint32x2_t)vadd_s32(*(int32x2_t *)v40.f32, (int32x2_t)0x100000001);
        v43 = vsub_f32(vcvt_f32_u32(v42), v39);
        v44 = vsub_f32(v39, vcvt_f32_u32(*(uint32x2_t *)v40.f32));
        v1105 = (int)(float)((float)((float)(*(float *)(v41 + 4 * v36 + 4 * v42.u32[0])
                                           * vmuls_lane_f32(v44.f32[0], v44, 1))
                                   + (float)((float)(*(float *)(v41 + 4 * v36 + 4 * v40.u32[0])
                                                   * vmuls_lane_f32(v43.f32[0], v44, 1))
                                           + (float)((float)(*(float *)(v41 + 4 * v40.u32[0])
                                                           * vmuls_lane_f32(v43.f32[0], v43, 1))
                                                   + (float)(*(float *)(v41 + 4 * v42.u32[0])
                                                           * vmuls_lane_f32(v44.f32[0], v43, 1)))))
                           * 255.0);
        if (v30 < 0)
        {
          v45 = 0;
          v46 = 0;
        }
        else
        {
          v45 = v10 - 1;
          v46 = v14;
          if (v13 > v30)
          {
            v46 = v30 / v11;
            v45 = v30 % v11;
          }
          if (!v45)
          {
            if (v46 <= 0)
              v45 = 0;
            else
              v45 = v10 - 1;
            v46 -= v46 > 0;
          }
        }
        v47 = (float)(1 << v46);
        v48 = (_QWORD *)(v12 + 144 * (v10 * v46 + v45));
        v49 = v48[11];
        v50 = v48[5];
        *(float32x2_t *)v40.f32 = vmul_n_f32(v26, 1.0 / v47);
        v51 = v33 / v47;
        v52.i64[0] = v48[4];
        v52.i64[1] = v48[6];
        v53 = (int32x2_t)vadd_f32(vcvt_f32_f64(vcvtq_f64_u64(v52)), v16);
        v54 = (float32x4_t)vdupq_lane_s32(v53, 0);
        v54.i32[1] = v53.i32[1];
        *(float32x2_t *)v8.f32 = vmul_n_f32((float32x2_t)0x3F3504F300000000, v51);
        v55.i32[0] = vadd_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v40.f32, 1), *(float32x2_t *)v8.f32).u32[0];
        v56 = vsub_f32(*(float32x2_t *)v40.f32, *(float32x2_t *)v8.f32);
        v8.f32[0] = v51 * 0.5;
        v57 = vsubq_f32(v40, v8).u32[0];
        v8.i64[1] = __PAIR64__(v40.u32[0], LODWORD(v51));
        v58 = v40.f32[0] - v51;
        v40.i64[1] = __PAIR64__(v8.u32[0], v40.u32[0]);
        v59 = vaddq_f32(v40, v8);
        v59.i32[0] = v57;
        v60 = (float32x4_t)vbicq_s8(vbslq_s8((int8x16_t)vcgtq_f32(v59, v54), (int8x16_t)v54, (int8x16_t)v59), (int8x16_t)vcltzq_f32(v59));
        v61 = (int32x4_t)vcvtq_u32_f32(v60);
        v62 = v49 + 4 * v50 * v61.u32[1];
        v63.i64[0] = 0x100000001;
        v63.i64[1] = 0x100000001;
        v64 = (uint32x4_t)vaddq_s32(v61, v63);
        v65 = v61.u32[3];
        v66 = vcvtq_f32_u32((uint32x4_t)v61);
        v67 = v61.u32[2];
        v68 = 4 * v61.u32[0];
        v69 = vcvtq_f32_u32(v64);
        v70 = 4 * v64.u32[0];
        v71 = 4 * v65;
        v72 = 4 * v64.u32[3];
        v55.i32[1] = v56.i32[1];
        v73 = (float32x2_t)vdup_lane_s32(v53, 1);
        *(int8x8_t *)v64.i8 = vbic_s8(vbsl_s8((int8x8_t)vcgt_f32(v55, v73), (int8x8_t)v73, (int8x8_t)v55), (int8x8_t)vcltz_f32(v55));
        v74 = (int32x2_t)vcvt_u32_f32(*(float32x2_t *)v64.i8);
        v75 = v49 + 4 * v50 * v74.u32[0];
        v76 = vsubq_f32(v69, v60);
        v77 = vsubq_f32(v60, v66);
        v78 = 4 * v67;
        v79 = 4 * v64.u32[2];
        v80 = vsub_f32(vcvt_f32_u32((uint32x2_t)vadd_s32(v74, (int32x2_t)0x100000001)), *(float32x2_t *)v64.i8);
        v90 = (float32x4_t)vuzp2q_s32((int32x4_t)v76, (int32x4_t)0);
        v81.i64[0] = v90.i64[0];
        *(float32x2_t *)&v81.u32[2] = v80;
        v82 = v50 * v74.u32[1];
        v83 = vmulq_f32(v76, v81);
        v84 = vsub_f32(*(float32x2_t *)v64.i8, vcvt_f32_u32((uint32x2_t)v74));
        *(int32x2_t *)v85.i8 = vdup_lane_s32(*(int32x2_t *)v77.f32, 1);
        v85.u64[1] = (unint64_t)v84;
        v86 = vmulq_f32(v77, (float32x4_t)vuzp2q_s32((int32x4_t)v77, vzip2q_s32((int32x4_t)v77, v85)));
        v87 = vmuls_lane_f32(v77.f32[0], v80, 1);
        v88 = vmuls_lane_f32(v77.f32[0], v84, 1);
        v77.i32[1] = v77.i32[3];
        v81.i32[1] = v90.i32[0];
        v89 = vmulq_f32(v77, v81);
        v90.f32[0] = vmuls_lane_f32(v76.f32[0], v80, 1);
        v81.f32[0] = vmuls_lane_f32(v76.f32[0], v84, 1);
        v76.i32[1] = v76.i32[3];
        v91 = v49 + 4 * v82;
        v92 = vmulq_f32(v76, (float32x4_t)v85);
        v85.i32[0] = *(_DWORD *)(v62 + v68);
        v85.i32[1] = *(_DWORD *)(v62 + v71);
        v85.i32[2] = *(_DWORD *)(v75 + v78);
        v85.i32[3] = *(_DWORD *)(v91 + v71);
        v93 = vmulq_f32((float32x4_t)v85, v83);
        v83.i32[0] = *(_DWORD *)(v62 + v70);
        v83.i32[1] = *(_DWORD *)(v62 + v72);
        v83.i32[2] = *(_DWORD *)(v75 + v79);
        v83.i32[3] = *(_DWORD *)(v91 + v72);
        v94 = v62 + 4 * v50;
        v95 = v75 + 4 * v50;
        v96 = v91 + 4 * v50;
        v97 = vaddq_f32(v93, vmulq_f32(v83, v89));
        v93.i32[0] = *(_DWORD *)(v94 + v68);
        v93.i32[1] = *(_DWORD *)(v94 + v71);
        v93.i32[2] = *(_DWORD *)(v95 + v78);
        v93.i32[3] = *(_DWORD *)(v96 + v71);
        v98 = vaddq_f32(vmulq_f32(v93, v92), v97);
        v92.i32[0] = *(_DWORD *)(v94 + v70);
        v92.i32[1] = *(_DWORD *)(v94 + v72);
        v92.i32[2] = *(_DWORD *)(v95 + v79);
        v92.i32[3] = *(_DWORD *)(v96 + v72);
        v99 = (float32x4_t)vcvtq_u32_f32(vmulq_f32(vaddq_f32(vmulq_f32(v92, v86), v98), v17));
        *(int16x4_t *)&v1106[7] = vmovn_s32((int32x4_t)v99);
        v1106[11] = (int)(float)((float)((float)((float)((float)(v90.f32[0] * *(float *)(v91 + v68))
                                                       + (float)(v87 * *(float *)(v91 + v70)))
                                               + (float)(v81.f32[0] * *(float *)(v96 + v68)))
                                       + (float)(v88 * *(float *)(v96 + v70)))
                               * 255.0);
        if (*(float *)v53.i32 >= v58)
          *(float *)v53.i32 = v58;
        if (v58 < 0.0)
          *(float *)v53.i32 = 0.0;
        v100 = *(float *)v53.i32 + 1;
        v1106[12] = (int)(float)((float)((float)((float)((float)((float)((float)((float)v100 - *(float *)v53.i32)
                                                                       * v80.f32[0])
                                                               * *(float *)(v75 + 4 * *(float *)v53.i32))
                                                       + (float)((float)((float)(*(float *)v53.i32
                                                                               - (float)*(float *)v53.i32)
                                                                       * v80.f32[0])
                                                               * *(float *)(v75 + 4 * v100)))
                                               + (float)((float)((float)((float)v100 - *(float *)v53.i32) * v84.f32[0])
                                                       * *(float *)(v95 + 4 * *(float *)v53.i32)))
                                       + (float)((float)((float)(*(float *)v53.i32
                                                               - (float)*(float *)v53.i32)
                                                       * v84.f32[0])
                                               * *(float *)(v95 + 4 * v100)))
                               * 255.0);
        v101 = v27 * 1.4142;
        v102 = vcvtms_s32_f32(v29* (float)((float)((float)((float)((float)((float)((float)(COERCE_FLOAT(LODWORD(v101) & 0x807FFFFF | 0x3F800000)* -0.33333)+ v15)* COERCE_FLOAT(LODWORD(v101) & 0x807FFFFF | 0x3F800000))+ -1.6667)+ (float)((LODWORD(v101) >> 23) - 127))* 0.69315)- v28));
        if (v102 < 0)
        {
          v103 = 0;
          v104 = 0;
        }
        else
        {
          v103 = v10 - 1;
          v104 = v14;
          if (v13 > v102)
          {
            v104 = v102 / v11;
            v103 = v102 % v11;
          }
          if (!v103)
          {
            if (v104 <= 0)
              v103 = 0;
            else
              v103 = v10 - 1;
            v104 -= v104 > 0;
          }
        }
        v105 = (float)(1 << v104);
        v106 = v33 * 1.4142;
        v107 = (float)(1.0 / v105) * v26.f32[0];
        v108 = vmuls_lane_f32(1.0 / v105, v26, 1);
        v109 = v106 / v105;
        v110 = (_QWORD *)(v12 + 144 * (v10 * v104 + v103));
        v111 = v110[11];
        v112 = v110[4];
        v113 = v110[5];
        v114 = v110[6];
        v115 = (float)((float)(v106 / v105) * 0.0) + v107;
        v116 = (float)v112 + -1.001;
        if (v116 >= v115)
          v117 = v115;
        else
          v117 = (float)v112 + -1.001;
        if (v115 >= 0.0)
          v118 = v117;
        else
          v118 = 0.0;
        v119 = (float)v114 + -1.001;
        if (v119 >= (float)(v108 - v109))
          v120 = v108 - v109;
        else
          v120 = (float)v114 + -1.001;
        if ((float)(v108 - v109) >= 0.0)
          v121 = v120;
        else
          v121 = 0.0;
        v122 = v121;
        v123 = v122 + 1;
        v124 = v111 + 4 * v113 * v122;
        v125 = 4 * v113;
        v126 = (float)(v118 + 1) - v118;
        v127 = v118 - (float)v118;
        v128 = (int)(float)((float)((float)(*(float *)(v124 + 4 * v113 + 4 * (v118 + 1))
                                          * (float)(v127 * (float)(v121 - (float)v121)))
                                  + (float)((float)(*(float *)(v124 + 4 * v113 + 4 * v118)
                                                  * (float)(v126 * (float)(v121 - (float)v121)))
                                          + (float)((float)(*(float *)(v124 + 4 * v118)
                                                          * (float)(v126 * (float)((float)v123 - v121)))
                                                  + (float)(*(float *)(v124 + 4 * (v118 + 1))
                                                          * (float)(v127 * (float)((float)v123 - v121))))))
                          * 255.0);
        v129 = v109 * 0.70711;
        v130 = (float)(v109 * 0.70711) + v107;
        if (v116 >= v130)
          v131 = (float)(v109 * 0.70711) + v107;
        else
          v131 = v116;
        if (v130 < 0.0)
          v131 = 0.0;
        v132 = v109 * 0.5;
        v133 = (float)(v109 * 0.5) + v108;
        if (v119 >= v133)
          v134 = (float)(v109 * 0.5) + v108;
        else
          v134 = v119;
        if (v133 < 0.0)
          v134 = 0.0;
        v135 = v131;
        v136 = v134;
        v1106[15] = v128;
        v137 = v131 + 1;
        v138 = v111 + 4 * v113 * v136;
        v139 = (float)v137 - v131;
        v140 = (float)(v136 + 1) - v134;
        v141 = v131 - (float)v131;
        v142 = v134 - (float)v134;
        v143 = 4 * v135;
        v144 = 4 * v137;
        v1106[16] = (int)(float)((float)((float)((float)(v141 * v142) * *(float *)(v138 + v125 + v144))
                                       + (float)((float)(*(float *)(v138 + v125 + v143) * (float)(v139 * v142))
                                               + (float)((float)(*(float *)(v138 + v143) * (float)(v139 * v140))
                                                       + (float)(*(float *)(v138 + v144) * (float)(v141 * v140)))))
                               * 255.0);
        if (v119 >= (float)(v108 - v132))
          v145 = v108 - v132;
        else
          v145 = v119;
        if ((float)(v108 - v132) >= 0.0)
          v146 = v145;
        else
          v146 = 0.0;
        v147 = v146;
        v148 = v111 + 4 * v113 * v147;
        v149 = (float)(v147 + 1) - v146;
        v150 = v146 - (float)v146;
        v151 = (int)(float)((float)((float)((float)((float)((float)(v139 * v149) * *(float *)(v148 + v143))
                                                  + (float)((float)(v141 * v149) * *(float *)(v148 + v144)))
                                          + (float)((float)(v139 * v150) * *(float *)(v148 + v125 + v143)))
                                  + (float)((float)(v141 * v150) * *(float *)(v148 + v125 + v144)))
                          * 255.0);
        if (v119 >= (float)(v109 + v108))
          v152 = v109 + v108;
        else
          v152 = v119;
        if ((float)(v109 + v108) >= 0.0)
          v153 = v152;
        else
          v153 = 0.0;
        v154 = v153;
        v1106[17] = v151;
        v155 = v154 + 1;
        v156 = v111 + 4 * v113 * v154;
        v1106[18] = (int)(float)((float)((float)((float)((float)((float)(v126 * (float)((float)v155 - v153))
                                                               * *(float *)(v156 + 4 * v118))
                                                       + (float)((float)(v127 * (float)((float)v155 - v153))
                                                               * *(float *)(v156 + 4 * (v118 + 1))))
                                               + (float)((float)(v126 * (float)(v153 - (float)v153))
                                                       * *(float *)(v156 + v125 + 4 * v118)))
                                       + (float)((float)(v127 * (float)(v153 - (float)v153))
                                               * *(float *)(v156 + v125 + 4 * (v118 + 1))))
                               * 255.0);
        if (v116 >= (float)(v107 - v129))
          v157 = v107 - v129;
        else
          v157 = v116;
        if ((float)(v107 - v129) >= 0.0)
          v158 = v157;
        else
          v158 = 0.0;
        v159 = v158;
        v160 = v158 + 1;
        v161 = (float)v160 - v158;
        v162 = v158 - (float)v158;
        v163 = 4 * v159;
        v164 = 4 * v160;
        v1106[19] = (int)(float)((float)((float)((float)((float)((float)(v161 * v149) * *(float *)(v148 + v163))
                                                       + (float)((float)(v162 * v149) * *(float *)(v148 + v164)))
                                               + (float)((float)(v161 * v150) * *(float *)(v148 + v125 + v163)))
                                       + (float)((float)(v162 * v150) * *(float *)(v148 + v125 + v164)))
                               * 255.0);
        v1106[20] = (int)(float)((float)((float)((float)((float)((float)(v161 * v140) * *(float *)(v138 + v163))
                                                       + (float)((float)(v162 * v140) * *(float *)(v138 + v164)))
                                               + (float)((float)(v161 * v142) * *(float *)(v138 + v125 + v163)))
                                       + (float)((float)(v162 * v142) * *(float *)(v138 + v125 + v164)))
                               * 255.0);
        v165 = v106 * 1.4142;
        v166 = v101 * 1.4142;
        v167 = vcvtms_s32_f32(v29* (float)((float)((float)((float)((float)((float)((float)(COERCE_FLOAT(LODWORD(v166) & 0x807FFFFF | 0x3F800000)* -0.33333)+ 2.0)* COERCE_FLOAT(LODWORD(v166) & 0x807FFFFF | 0x3F800000))+ -1.6667)+ (float)((LODWORD(v166) >> 23) - 127))* 0.69315)- v28));
        if (v167 < 0)
        {
          v168 = 0;
          v169 = 0;
        }
        else
        {
          v168 = v14;
          v169 = v10 - 1;
          if (v13 > v167)
          {
            v168 = v167 / v11;
            v169 = v167 % v11;
          }
          if (!v169)
          {
            if (v168 <= 0)
              v169 = 0;
            else
              v169 = v10 - 1;
            v168 -= v168 > 0;
          }
        }
        v170 = (float)(1 << v168);
        v171 = (_QWORD *)(v12 + 144 * (v10 * v168 + v169));
        v172 = v171[11];
        v173 = v171[5];
        *(float32x2_t *)v99.f32 = vmul_n_f32(v26, 1.0 / v170);
        v174 = v165 / v170;
        v175.i64[0] = v171[4];
        v175.i64[1] = v171[6];
        v176 = (int32x2_t)vadd_f32(vcvt_f32_f64(vcvtq_f64_u64(v175)), v16);
        v177 = (float32x4_t)vdupq_lane_s32(v176, 0);
        v177.i32[1] = v176.i32[1];
        *(float32x2_t *)v90.f32 = vmul_n_f32((float32x2_t)0x3F3504F300000000, v174);
        v178.i32[0] = vadd_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v99.f32, 1), *(float32x2_t *)v90.f32).u32[0];
        v179 = vsub_f32(*(float32x2_t *)v99.f32, *(float32x2_t *)v90.f32);
        v90.f32[0] = v174 * 0.5;
        v205 = vsubq_f32(v99, v90);
        v90.i64[1] = __PAIR64__(v99.u32[0], LODWORD(v174));
        v180 = v99.f32[0] - v174;
        v99.i32[2] = v99.i32[0];
        v99.f32[3] = v174 * 0.5;
        v181 = vaddq_f32(v99, v90);
        v181.i32[0] = v205.i32[0];
        v182 = (float32x4_t)vbicq_s8(vbslq_s8((int8x16_t)vcgtq_f32(v181, v177), (int8x16_t)v177, (int8x16_t)v181), (int8x16_t)vcltzq_f32(v181));
        v183 = (int32x4_t)vcvtq_u32_f32(v182);
        v184 = v172 + 4 * v173 * v183.u32[1];
        v185.i64[0] = 0x100000001;
        v185.i64[1] = 0x100000001;
        v186 = (uint32x4_t)vaddq_s32(v183, v185);
        v187 = v183.u32[3];
        v199 = vcvtq_f32_u32((uint32x4_t)v183);
        v188 = v183.u32[2];
        v189 = 4 * v183.u32[0];
        v190 = vcvtq_f32_u32(v186);
        v191 = 4 * v186.u32[0];
        v192 = 4 * v187;
        v193 = 4 * v186.u32[3];
        v178.i32[1] = v179.i32[1];
        *(int32x2_t *)v177.f32 = vdup_lane_s32(v176, 1);
        *(int8x8_t *)v186.i8 = vbic_s8(vbsl_s8((int8x8_t)vcgt_f32(v178, *(float32x2_t *)v177.f32), *(int8x8_t *)v177.f32, (int8x8_t)v178), (int8x8_t)vcltz_f32(v178));
        *(uint32x2_t *)v177.f32 = vcvt_u32_f32(*(float32x2_t *)v186.i8);
        v194 = v172 + 4 * v173 * v177.u32[0];
        v195 = vsubq_f32(v190, v182);
        v196 = vsubq_f32(v182, v199);
        v197 = 4 * v188;
        v198 = 4 * v186.u32[2];
        *(float32x2_t *)v199.f32 = vsub_f32(vcvt_f32_u32((uint32x2_t)vadd_s32(*(int32x2_t *)v177.f32, (int32x2_t)0x100000001)), *(float32x2_t *)v186.i8);
        v200.i64[0] = vuzp2q_s32((int32x4_t)v195, (int32x4_t)0).u64[0];
        v200.i64[1] = v199.i64[0];
        v201 = v173 * v177.u32[1];
        v202 = vmulq_f32(v195, v200);
        v203 = vsub_f32(*(float32x2_t *)v186.i8, vcvt_f32_u32(*(uint32x2_t *)v177.f32));
        *(int32x2_t *)v177.f32 = vdup_lane_s32(*(int32x2_t *)v196.f32, 1);
        *(float32x2_t *)&v177.u32[2] = v203;
        v204 = vmulq_f32(v196, (float32x4_t)vuzp2q_s32((int32x4_t)v196, vzip2q_s32((int32x4_t)v196, (int32x4_t)v177)));
        v205.f32[0] = vmuls_lane_f32(v196.f32[0], *(float32x2_t *)v199.f32, 1);
        v206 = vmuls_lane_f32(v196.f32[0], v203, 1);
        v196.i32[1] = v196.i32[3];
        v200.i32[1] = v200.i32[0];
        v207 = vmulq_f32(v196, v200);
        v208 = vmuls_lane_f32(v195.f32[0], *(float32x2_t *)v199.f32, 1);
        v200.f32[0] = vmuls_lane_f32(v195.f32[0], v203, 1);
        v195.i32[1] = v195.i32[3];
        v209 = v172 + 4 * v201;
        v210 = vmulq_f32(v195, v177);
        v177.i32[0] = *(_DWORD *)(v184 + v189);
        v177.i32[1] = *(_DWORD *)(v184 + v192);
        v177.i32[2] = *(_DWORD *)(v194 + v197);
        v177.i32[3] = *(_DWORD *)(v209 + v192);
        v211 = vmulq_f32(v177, v202);
        v202.i32[0] = *(_DWORD *)(v184 + v191);
        v202.i32[1] = *(_DWORD *)(v184 + v193);
        v202.i32[2] = *(_DWORD *)(v194 + v198);
        v202.i32[3] = *(_DWORD *)(v209 + v193);
        v212 = v184 + 4 * v173;
        v213 = v194 + 4 * v173;
        v214 = v209 + 4 * v173;
        v215 = vaddq_f32(v211, vmulq_f32(v202, v207));
        v211.i32[0] = *(_DWORD *)(v212 + v189);
        v211.i32[1] = *(_DWORD *)(v212 + v192);
        v211.i32[2] = *(_DWORD *)(v213 + v197);
        v211.i32[3] = *(_DWORD *)(v214 + v192);
        v216 = vaddq_f32(vmulq_f32(v211, v210), v215);
        v210.i32[0] = *(_DWORD *)(v212 + v191);
        v210.i32[1] = *(_DWORD *)(v212 + v193);
        v210.i32[2] = *(_DWORD *)(v213 + v198);
        v210.i32[3] = *(_DWORD *)(v214 + v193);
        *(int16x4_t *)&v1106[23] = vmovn_s32((int32x4_t)vcvtq_u32_f32(vmulq_f32(vaddq_f32(vmulq_f32(v210, v204), v216), v17)));
        v1106[27] = (int)(float)((float)((float)((float)((float)(v208 * *(float *)(v209 + v189))
                                                       + (float)(v205.f32[0] * *(float *)(v209 + v191)))
                                               + (float)(v200.f32[0] * *(float *)(v214 + v189)))
                                       + (float)(v206 * *(float *)(v214 + v191)))
                               * 255.0);
        if (*(float *)v176.i32 >= v180)
          v217 = v180;
        else
          v217 = *(float *)v176.i32;
        if (v180 >= 0.0)
          v218 = v217;
        else
          v218 = 0.0;
        v219 = v218 + 1;
        v1106[28] = (int)(float)((float)((float)((float)((float)((float)((float)((float)v219 - v218) * v199.f32[0])
                                                               * *(float *)(v194 + 4 * v218))
                                                       + (float)((float)((float)(v218 - (float)v218)
                                                                       * v199.f32[0])
                                                               * *(float *)(v194 + 4 * v219)))
                                               + (float)((float)((float)((float)v219 - v218) * v203.f32[0])
                                                       * *(float *)(v213 + 4 * v218)))
                                       + (float)((float)((float)(v218 - (float)v218) * v203.f32[0])
                                               * *(float *)(v213 + 4 * v219)))
                               * 255.0);
        v220 = vcvtms_s32_f32(v29* (float)((float)((float)((float)((float)((float)((float)(COERCE_FLOAT(COERCE_UNSIGNED_INT(v166 * 1.4142) & 0x807FFFFF | 0x3F800000)* -0.33333)+ 2.0)* COERCE_FLOAT(COERCE_UNSIGNED_INT(v166 * 1.4142) & 0x807FFFFF | 0x3F800000))+ -1.6667)+ (float)((COERCE_UNSIGNED_INT(v166 * 1.4142) >> 23) - 127))* 0.69315)- v28));
        if (v220 < 0)
        {
          v221 = 0;
          v222 = 0;
        }
        else
        {
          v221 = v14;
          v222 = v10 - 1;
          if (v13 > v220)
          {
            v221 = v220 / v11;
            v222 = v220 % v11;
          }
          if (!v222)
          {
            if (v221 <= 0)
              v222 = 0;
            else
              v222 = v10 - 1;
            v221 -= v221 > 0;
          }
        }
        v223 = (float)(1 << v221);
        v224 = v165 * 1.4142;
        v225 = v26.f32[0] * (float)(1.0 / v223);
        v226 = v26.f32[1] * (float)(1.0 / v223);
        v227 = v224 / v223;
        v228 = (_QWORD *)(v12 + 144 * (v10 * v221 + v222));
        v229 = v228[11];
        v230 = v228[4];
        v231 = v228[5];
        v232 = v228[6];
        v233 = (float)((float)(v224 / v223) * 0.0) + v225;
        v234 = (float)v230 + -1.001;
        if (v234 >= v233)
          v235 = v233;
        else
          v235 = (float)v230 + -1.001;
        if (v233 >= 0.0)
          v236 = v235;
        else
          v236 = 0.0;
        v237 = (float)v232 + -1.001;
        if (v237 >= (float)(v226 - v227))
          v238 = v226 - v227;
        else
          v238 = (float)v232 + -1.001;
        if ((float)(v226 - v227) >= 0.0)
          v239 = v238;
        else
          v239 = 0.0;
        v240 = v239;
        v241 = v240 + 1;
        v242 = v229 + 4 * v231 * v240;
        v243 = 4 * v231;
        v244 = (float)(v236 + 1) - v236;
        v245 = v236 - (float)v236;
        v246 = 4 * v236;
        v247 = 4 * (v236 + 1);
        v248 = (int)(float)((float)((float)(*(float *)(v242 + 4 * v231 + v247)
                                          * (float)(v245 * (float)(v239 - (float)v239)))
                                  + (float)((float)(*(float *)(v242 + 4 * v231 + v246)
                                                  * (float)(v244 * (float)(v239 - (float)v239)))
                                          + (float)((float)(*(float *)(v242 + v246)
                                                          * (float)(v244 * (float)((float)v241 - v239)))
                                                  + (float)(*(float *)(v242 + v247)
                                                          * (float)(v245 * (float)((float)v241 - v239))))))
                          * 255.0);
        v249 = v227 * 0.70711;
        v250 = (float)(v227 * 0.70711) + v225;
        if (v234 >= v250)
          v251 = (float)(v227 * 0.70711) + v225;
        else
          v251 = v234;
        if (v250 >= 0.0)
          v252 = v251;
        else
          v252 = 0.0;
        v253 = v227 * 0.5;
        v254 = (float)(v227 * 0.5) + v226;
        if (v237 >= v254)
          v255 = (float)(v227 * 0.5) + v226;
        else
          v255 = v237;
        if (v254 >= 0.0)
          v256 = v255;
        else
          v256 = 0.0;
        v257 = v252;
        v258 = v256;
        v1106[31] = v248;
        v259 = v252 + 1;
        v260 = v229 + 4 * v231 * v258;
        v261 = (float)v259 - v252;
        v262 = (float)(v258 + 1) - v256;
        v263 = v252 - (float)v252;
        v264 = v256 - (float)v256;
        v265 = 4 * v257;
        v266 = 4 * v259;
        v1106[32] = (int)(float)((float)((float)((float)(v263 * v264) * *(float *)(v260 + v243 + v266))
                                       + (float)((float)(*(float *)(v260 + v243 + v265) * (float)(v261 * v264))
                                               + (float)((float)(*(float *)(v260 + v265) * (float)(v261 * v262))
                                                       + (float)(*(float *)(v260 + v266) * (float)(v263 * v262)))))
                               * 255.0);
        v267 = v226 - v253;
        if (v237 >= (float)(v226 - v253))
          v268 = v226 - v253;
        else
          v268 = v237;
        if (v267 >= 0.0)
          v269 = v268;
        else
          v269 = 0.0;
        v270 = v269;
        v271 = v229 + 4 * v231 * v270;
        v272 = (float)(v270 + 1) - v269;
        v273 = v269 - (float)v269;
        v274 = (int)(float)((float)((float)((float)((float)((float)(v261 * v272) * *(float *)(v271 + v265))
                                                  + (float)((float)(v263 * v272) * *(float *)(v271 + v266)))
                                          + (float)((float)(v261 * v273) * *(float *)(v271 + v243 + v265)))
                                  + (float)((float)(v263 * v273) * *(float *)(v271 + v243 + v266)))
                          * 255.0);
        if (v237 >= (float)(v227 + v226))
          v275 = v227 + v226;
        else
          v275 = v237;
        if ((float)(v227 + v226) >= 0.0)
          v276 = v275;
        else
          v276 = 0.0;
        v277 = v276;
        v1106[33] = v274;
        v278 = v277 + 1;
        v279 = v229 + 4 * v231 * v277;
        v1106[34] = (int)(float)((float)((float)((float)((float)((float)(v244 * (float)((float)v278 - v276))
                                                               * *(float *)(v279 + v246))
                                                       + (float)((float)(v245 * (float)((float)v278 - v276))
                                                               * *(float *)(v279 + v247)))
                                               + (float)((float)(v244 * (float)(v276 - (float)v276))
                                                       * *(float *)(v279 + v243 + v246)))
                                       + (float)((float)(v245 * (float)(v276 - (float)v276))
                                               * *(float *)(v279 + v243 + v247)))
                               * 255.0);
        if (v234 >= (float)(v225 - v249))
          v280 = v225 - v249;
        else
          v280 = v234;
        if ((float)(v225 - v249) >= 0.0)
          v281 = v280;
        else
          v281 = 0.0;
        v282 = v281;
        v283 = v281 + 1;
        v284 = (float)v283 - v281;
        v285 = v281 - (float)v281;
        v286 = 4 * v282;
        v287 = 4 * v283;
        v1106[35] = (int)(float)((float)((float)((float)((float)((float)(v284 * v272) * *(float *)(v271 + v286))
                                                       + (float)((float)(v285 * v272) * *(float *)(v271 + v287)))
                                               + (float)((float)(v284 * v273) * *(float *)(v271 + v243 + v286)))
                                       + (float)((float)(v285 * v273) * *(float *)(v271 + v243 + v287)))
                               * 255.0);
        v1106[36] = (int)(float)((float)((float)((float)((float)((float)(v284 * v262) * *(float *)(v260 + v286))
                                                       + (float)((float)(v285 * v262) * *(float *)(v260 + v287)))
                                               + (float)((float)(v284 * v264) * *(float *)(v260 + v243 + v286)))
                                       + (float)((float)(v285 * v264) * *(float *)(v260 + v243 + v287)))
                               * 255.0);
        v288 = v224 * 1.4142;
        v289 = (float)(v166 * 1.4142) * 1.4142;
        v15 = 2.0;
        v290 = vcvtms_s32_f32(v29* (float)((float)((float)((float)((float)((float)((float)(COERCE_FLOAT(LODWORD(v289) & 0x807FFFFF | 0x3F800000)* -0.33333)+ 2.0)* COERCE_FLOAT(LODWORD(v289) & 0x807FFFFF | 0x3F800000))+ -1.6667)+ (float)((LODWORD(v289) >> 23) - 127))* 0.69315)- v28));
        if (v290 < 0)
        {
          v291 = 0;
          v292 = 0;
        }
        else
        {
          v291 = v14;
          v292 = v10 - 1;
          if (v13 > v290)
          {
            v291 = v290 / v11;
            v292 = v290 % v11;
          }
          if (!v292)
          {
            if (v291 <= 0)
              v292 = 0;
            else
              v292 = v10 - 1;
            v291 -= v291 > 0;
          }
        }
        v293 = (float)(1 << v291);
        v294 = (_QWORD *)(v12 + 144 * (v10 * v291 + v292));
        v295 = v294[11];
        v296 = v294[5];
        *(float32x2_t *)v199.f32 = vmul_n_f32(v26, 1.0 / v293);
        v297 = v288 / v293;
        v298.i64[0] = v294[4];
        v298.i64[1] = v294[6];
        v299 = (int32x2_t)vadd_f32(vcvt_f32_f64(vcvtq_f64_u64(v298)), v16);
        v300 = (float32x4_t)vdupq_lane_s32(v299, 0);
        v300.i32[1] = v299.i32[1];
        *(float32x2_t *)v205.f32 = vmul_n_f32((float32x2_t)0x3F3504F300000000, v297);
        v301.i32[0] = vadd_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v199.f32, 1), *(float32x2_t *)v205.f32).u32[0];
        v302 = vsub_f32(*(float32x2_t *)v199.f32, *(float32x2_t *)v205.f32);
        v205.f32[0] = v297 * 0.5;
        v303 = vsubq_f32(v199, v205).u32[0];
        v205.i64[1] = __PAIR64__(v199.u32[0], LODWORD(v297));
        v304 = v199.f32[0] - v297;
        v199.i32[2] = v199.i32[0];
        v199.f32[3] = v297 * 0.5;
        v305 = vaddq_f32(v199, v205);
        v305.i32[0] = v303;
        v306 = (float32x4_t)vbicq_s8(vbslq_s8((int8x16_t)vcgtq_f32(v305, v300), (int8x16_t)v300, (int8x16_t)v305), (int8x16_t)vcltzq_f32(v305));
        v307 = (int32x4_t)vcvtq_u32_f32(v306);
        v308 = v295 + 4 * v296 * v307.u32[1];
        v309.i64[0] = 0x100000001;
        v309.i64[1] = 0x100000001;
        v310 = (uint32x4_t)vaddq_s32(v307, v309);
        v311 = v307.u32[3];
        v325 = vcvtq_f32_u32((uint32x4_t)v307);
        v312 = v307.u32[2];
        v313 = 4 * v307.u32[0];
        v314 = vcvtq_f32_u32(v310);
        v315 = 4 * v310.u32[0];
        v316 = 4 * v311;
        v317 = 4 * v310.u32[3];
        v301.i32[1] = v302.i32[1];
        v318 = (float32x2_t)vdup_lane_s32(v299, 1);
        *(int8x8_t *)v310.i8 = vbic_s8(vbsl_s8((int8x8_t)vcgt_f32(v301, v318), (int8x8_t)v318, (int8x8_t)v301), (int8x8_t)vcltz_f32(v301));
        v319 = (int32x2_t)vcvt_u32_f32(*(float32x2_t *)v310.i8);
        v320 = v295 + 4 * v296 * v319.u32[0];
        v321 = vsubq_f32(v314, v306);
        v322 = vsubq_f32(v306, v325);
        v323 = 4 * v312;
        v324 = 4 * v310.u32[2];
        *(float32x2_t *)v325.f32 = vsub_f32(vcvt_f32_u32((uint32x2_t)vadd_s32(v319, (int32x2_t)0x100000001)), *(float32x2_t *)v310.i8);
        v326.i64[0] = vuzp2q_s32((int32x4_t)v321, (int32x4_t)0).u64[0];
        v326.i64[1] = v325.i64[0];
        v327 = v296 * v319.u32[1];
        v328 = vmulq_f32(v321, v326);
        v329 = vsub_f32(*(float32x2_t *)v310.i8, vcvt_f32_u32((uint32x2_t)v319));
        *(int32x2_t *)v330.i8 = vdup_lane_s32(*(int32x2_t *)v322.f32, 1);
        v330.u64[1] = (unint64_t)v329;
        v8 = vmulq_f32(v322, (float32x4_t)vuzp2q_s32((int32x4_t)v322, vzip2q_s32((int32x4_t)v322, v330)));
        v331 = vmuls_lane_f32(v322.f32[0], *(float32x2_t *)v325.f32, 1);
        v332 = vmuls_lane_f32(v322.f32[0], v329, 1);
        v322.i32[1] = v322.i32[3];
        v326.i32[1] = v326.i32[0];
        v333 = vmulq_f32(v322, v326);
        v300.f32[0] = vmuls_lane_f32(v321.f32[0], *(float32x2_t *)v325.f32, 1);
        v326.f32[0] = vmuls_lane_f32(v321.f32[0], v329, 1);
        v321.i32[1] = v321.i32[3];
        v334 = v295 + 4 * v327;
        v335 = vmulq_f32(v321, (float32x4_t)v330);
        v330.i32[0] = *(_DWORD *)(v308 + v313);
        v330.i32[1] = *(_DWORD *)(v308 + v316);
        v330.i32[2] = *(_DWORD *)(v320 + v323);
        v330.i32[3] = *(_DWORD *)(v334 + v316);
        v336 = vmulq_f32((float32x4_t)v330, v328);
        v328.i32[0] = *(_DWORD *)(v308 + v315);
        v328.i32[1] = *(_DWORD *)(v308 + v317);
        v328.i32[2] = *(_DWORD *)(v320 + v324);
        v328.i32[3] = *(_DWORD *)(v334 + v317);
        v337 = v308 + 4 * v296;
        v338 = v320 + 4 * v296;
        v339 = v334 + 4 * v296;
        v340 = vaddq_f32(v336, vmulq_f32(v328, v333));
        v336.i32[0] = *(_DWORD *)(v337 + v313);
        v336.i32[1] = *(_DWORD *)(v337 + v316);
        v336.i32[2] = *(_DWORD *)(v338 + v323);
        v336.i32[3] = *(_DWORD *)(v339 + v316);
        v341 = vaddq_f32(vmulq_f32(v336, v335), v340);
        v335.i32[0] = *(_DWORD *)(v337 + v315);
        v335.i32[1] = *(_DWORD *)(v337 + v317);
        v335.i32[2] = *(_DWORD *)(v338 + v324);
        v335.i32[3] = *(_DWORD *)(v339 + v317);
        *(int16x4_t *)&v1106[39] = vmovn_s32((int32x4_t)vcvtq_u32_f32(vmulq_f32(vaddq_f32(vmulq_f32(v335, v8), v341), v17)));
        v1106[43] = (int)(float)((float)((float)((float)((float)(v300.f32[0] * *(float *)(v334 + v313))
                                                       + (float)(v331 * *(float *)(v334 + v315)))
                                               + (float)(v326.f32[0] * *(float *)(v339 + v313)))
                                       + (float)(v332 * *(float *)(v339 + v315)))
                               * 255.0);
        if (*(float *)v299.i32 >= v304)
          v342 = v304;
        else
          v342 = *(float *)v299.i32;
        if (v304 >= 0.0)
          v343 = v342;
        else
          v343 = 0.0;
        v344 = v343 + 1;
        v1106[44] = (int)(float)((float)((float)((float)((float)((float)((float)((float)v344 - v343) * v325.f32[0])
                                                               * *(float *)(v320 + 4 * v343))
                                                       + (float)((float)((float)(v343 - (float)v343)
                                                                       * v325.f32[0])
                                                               * *(float *)(v320 + 4 * v344)))
                                               + (float)((float)((float)((float)v344 - v343) * v329.f32[0])
                                                       * *(float *)(v338 + 4 * v343)))
                                       + (float)((float)((float)(v343 - (float)v343) * v329.f32[0])
                                               * *(float *)(v338 + 4 * v344)))
                               * 255.0);
        v345 = v289 * 1.4142;
        v346 = vcvtms_s32_f32(v29* (float)((float)((float)((float)((float)((float)((float)(COERCE_FLOAT(LODWORD(v345) & 0x807FFFFF | 0x3F800000)* -0.33333)+ 2.0)* COERCE_FLOAT(LODWORD(v345) & 0x807FFFFF | 0x3F800000))+ -1.6667)+ (float)((LODWORD(v345) >> 23) - 127))* 0.69315)- v28));
        if (v346 < 0)
        {
          v347 = 0;
          v348 = 0;
        }
        else
        {
          v347 = v14;
          v348 = v10 - 1;
          if (v13 > v346)
          {
            v347 = v346 / v11;
            v348 = v346 % v11;
          }
          if (!v348)
          {
            if (v347 <= 0)
              v348 = 0;
            else
              v348 = v10 - 1;
            v347 -= v347 > 0;
          }
        }
        v349 = (float)(1 << v347);
        v350 = v288 * 1.4142;
        v351 = v26.f32[0] * (float)(1.0 / v349);
        v352 = v26.f32[1] * (float)(1.0 / v349);
        v353 = v350 / v349;
        v354 = (_QWORD *)(v12 + 144 * (v10 * v347 + v348));
        v355 = v354[11];
        v356 = v354[4];
        v357 = v354[5];
        v358 = v354[6];
        v359 = (float)((float)(v350 / v349) * 0.0) + v351;
        v360 = (float)v356 + -1.001;
        if (v360 >= v359)
          v361 = v359;
        else
          v361 = (float)v356 + -1.001;
        if (v359 >= 0.0)
          v362 = v361;
        else
          v362 = 0.0;
        v363 = (float)v358 + -1.001;
        if (v363 >= (float)(v352 - v353))
          v364 = v352 - v353;
        else
          v364 = (float)v358 + -1.001;
        if ((float)(v352 - v353) >= 0.0)
          v365 = v364;
        else
          v365 = 0.0;
        v366 = v365;
        v367 = v366 + 1;
        v368 = v355 + 4 * v357 * v366;
        v369 = 4 * v357;
        v370 = (float)(v362 + 1) - v362;
        v371 = v362 - (float)v362;
        v372 = 4 * v362;
        v373 = 4 * (v362 + 1);
        v374 = (int)(float)((float)((float)(*(float *)(v368 + 4 * v357 + v373)
                                          * (float)(v371 * (float)(v365 - (float)v365)))
                                  + (float)((float)(*(float *)(v368 + 4 * v357 + v372)
                                                  * (float)(v370 * (float)(v365 - (float)v365)))
                                          + (float)((float)(*(float *)(v368 + v372)
                                                          * (float)(v370 * (float)((float)v367 - v365)))
                                                  + (float)(*(float *)(v368 + v373)
                                                          * (float)(v371 * (float)((float)v367 - v365))))))
                          * 255.0);
        v375 = v353 * 0.70711;
        v376 = (float)(v353 * 0.70711) + v351;
        if (v360 >= v376)
          v377 = (float)(v353 * 0.70711) + v351;
        else
          v377 = v360;
        if (v376 >= 0.0)
          v378 = v377;
        else
          v378 = 0.0;
        v379 = (float)(v353 * 0.5) + v352;
        if (v363 >= v379)
          v380 = (float)(v353 * 0.5) + v352;
        else
          v380 = v363;
        if (v379 >= 0.0)
          v381 = v380;
        else
          v381 = 0.0;
        v382 = v378;
        v383 = v381;
        v1106[47] = v374;
        v384 = v378 + 1;
        v385 = v355 + 4 * v357 * v383;
        v386 = (float)v384 - v378;
        v387 = (float)(v383 + 1) - v381;
        v388 = v378 - (float)v378;
        v389 = v381 - (float)v381;
        v390 = 4 * v382;
        v391 = 4 * v384;
        v1106[48] = (int)(float)((float)((float)((float)(v388 * v389) * *(float *)(v385 + v369 + v391))
                                       + (float)((float)(*(float *)(v385 + v369 + v390) * (float)(v386 * v389))
                                               + (float)((float)(*(float *)(v385 + v390) * (float)(v386 * v387))
                                                       + (float)(*(float *)(v385 + v391) * (float)(v388 * v387)))))
                               * 255.0);
        v392 = v352 - (float)(v353 * 0.5);
        if (v363 >= v392)
          v393 = v352 - (float)(v353 * 0.5);
        else
          v393 = v363;
        if (v392 >= 0.0)
          v394 = v393;
        else
          v394 = 0.0;
        v395 = v394;
        v396 = v355 + 4 * v357 * v395;
        v397 = (float)(v395 + 1) - v394;
        v398 = v394 - (float)v394;
        v399 = (int)(float)((float)((float)((float)((float)((float)(v386 * v397) * *(float *)(v396 + v390))
                                                  + (float)((float)(v388 * v397) * *(float *)(v396 + v391)))
                                          + (float)((float)(v386 * v398) * *(float *)(v396 + v369 + v390)))
                                  + (float)((float)(v388 * v398) * *(float *)(v396 + v369 + v391)))
                          * 255.0);
        if (v363 >= (float)(v353 + v352))
          v400 = v353 + v352;
        else
          v400 = v363;
        if ((float)(v353 + v352) >= 0.0)
          v401 = v400;
        else
          v401 = 0.0;
        v402 = v401;
        v1106[49] = v399;
        v403 = v402 + 1;
        v404 = v355 + 4 * v357 * v402;
        v1106[50] = (int)(float)((float)((float)((float)((float)((float)(v370 * (float)((float)v403 - v401))
                                                               * *(float *)(v404 + v372))
                                                       + (float)((float)(v371 * (float)((float)v403 - v401))
                                                               * *(float *)(v404 + v373)))
                                               + (float)((float)(v370 * (float)(v401 - (float)v401))
                                                       * *(float *)(v404 + v369 + v372)))
                                       + (float)((float)(v371 * (float)(v401 - (float)v401))
                                               * *(float *)(v404 + v369 + v373)))
                               * 255.0);
        if (v360 >= (float)(v351 - v375))
          v405 = v351 - v375;
        else
          v405 = v360;
        if ((float)(v351 - v375) >= 0.0)
          v406 = v405;
        else
          v406 = 0.0;
        v407 = v406;
        v408 = v406 + 1;
        v409 = (float)v408 - v406;
        v410 = v406 - (float)v406;
        v411 = 4 * v407;
        v412 = 4 * v408;
        v1106[51] = (int)(float)((float)((float)((float)((float)((float)(v409 * v397) * *(float *)(v396 + v411))
                                                       + (float)((float)(v410 * v397) * *(float *)(v396 + v412)))
                                               + (float)((float)(v409 * v398) * *(float *)(v396 + v369 + v411)))
                                       + (float)((float)(v410 * v398) * *(float *)(v396 + v369 + v412)))
                               * 255.0);
        v1106[52] = (int)(float)((float)((float)((float)((float)((float)(v409 * v387) * *(float *)(v385 + v411))
                                                       + (float)((float)(v410 * v387) * *(float *)(v385 + v412)))
                                               + (float)((float)(v409 * v389) * *(float *)(v385 + v369 + v411)))
                                       + (float)((float)(v410 * v389) * *(float *)(v385 + v369 + v412)))
                               * 255.0);
        v413 = vcvtms_s32_f32(v29* (float)((float)((float)((float)((float)((float)((float)(COERCE_FLOAT(COERCE_UNSIGNED_INT(v345 * 1.4142) & 0x807FFFFF | 0x3F800000)* -0.33333)+ 2.0)* COERCE_FLOAT(COERCE_UNSIGNED_INT(v345 * 1.4142) & 0x807FFFFF | 0x3F800000))+ -1.6667)+ (float)((COERCE_UNSIGNED_INT(v345 * 1.4142) >> 23) - 127))* 0.69315)- v28));
        if (v413 < 0)
        {
          v414 = 0;
          v415 = 0;
        }
        else
        {
          v414 = v14;
          v415 = v10 - 1;
          if (v13 > v413)
          {
            v414 = v413 / v11;
            v415 = v413 % v11;
          }
          if (!v415)
          {
            if (v414 <= 0)
              v415 = 0;
            else
              v415 = v10 - 1;
            v414 -= v414 > 0;
          }
        }
        v416 = 0;
        v417 = (float)(1 << v414);
        v418 = (_QWORD *)(v12 + 144 * (v10 * v414 + v415));
        v419 = v418[11];
        *(float32x2_t *)v7.f32 = vmul_n_f32(v26, 1.0 / v417);
        v420 = (float)(v350 * 1.4142) / v417;
        v421.i64[0] = v418[4];
        v421.i64[1] = v418[6];
        v422 = (int32x2_t)vadd_f32(vcvt_f32_f64(vcvtq_f64_u64(v421)), v16);
        v423 = (float32x4_t)vdupq_lane_s32(v422, 0);
        v423.i32[1] = v422.i32[1];
        *(float32x2_t *)v325.f32 = vmul_n_f32((float32x2_t)0x3F3504F300000000, v420);
        v424.i32[0] = vadd_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v7.f32, 1), *(float32x2_t *)v325.f32).u32[0];
        v425 = vsub_f32(*(float32x2_t *)v7.f32, *(float32x2_t *)v325.f32);
        v325.f32[0] = v420 * 0.5;
        v426 = v418[5];
        v427 = vsubq_f32(v7, v325).u32[0];
        v325.i64[1] = __PAIR64__(v7.u32[0], LODWORD(v420));
        v428 = v7.f32[0] - v420;
        v7.i32[2] = v7.i32[0];
        v7.f32[3] = v420 * 0.5;
        v429 = vaddq_f32(v7, v325);
        v429.i32[0] = v427;
        v430 = (float32x4_t)vbicq_s8(vbslq_s8((int8x16_t)vcgtq_f32(v429, v423), (int8x16_t)v423, (int8x16_t)v429), (int8x16_t)vcltzq_f32(v429));
        v431 = (int32x4_t)vcvtq_u32_f32(v430);
        v432 = v419 + 4 * v426 * v431.u32[1];
        v433.i64[0] = 0x100000001;
        v433.i64[1] = 0x100000001;
        v434 = (uint32x4_t)vaddq_s32(v431, v433);
        v435 = v431.u32[3];
        v7 = vcvtq_f32_u32((uint32x4_t)v431);
        v436 = v431.u32[2];
        v437 = 4 * v431.u32[0];
        v438 = vcvtq_f32_u32(v434);
        v439 = 4 * v434.u32[0];
        v440 = 4 * v435;
        v441 = 4 * v434.u32[3];
        v424.i32[1] = v425.i32[1];
        v442 = (float32x2_t)vdup_lane_s32(v422, 1);
        *(int8x8_t *)v434.i8 = vbic_s8(vbsl_s8((int8x8_t)vcgt_f32(v424, v442), (int8x8_t)v442, (int8x8_t)v424), (int8x8_t)vcltz_f32(v424));
        v443 = (int32x2_t)vcvt_u32_f32(*(float32x2_t *)v434.i8);
        v444 = v419 + 4 * v426 * v443.u32[0];
        v445 = vsubq_f32(v438, v430);
        v446 = vsubq_f32(v430, v7);
        v447 = 4 * v436;
        v448 = 4 * v434.u32[2];
        v449 = v419 + 4 * v426 * v443.u32[1];
        *(float32x2_t *)v7.f32 = vsub_f32(vcvt_f32_u32((uint32x2_t)vadd_s32(v443, (int32x2_t)0x100000001)), *(float32x2_t *)v434.i8);
        v423.i64[0] = vuzp2q_s32((int32x4_t)v445, (int32x4_t)0).u64[0];
        v423.i64[1] = v7.i64[0];
        v450 = vsub_f32(*(float32x2_t *)v434.i8, vcvt_f32_u32((uint32x2_t)v443));
        *(int32x2_t *)v451.i8 = vdup_lane_s32(*(int32x2_t *)v446.f32, 1);
        v451.u64[1] = (unint64_t)v450;
        v452 = vmulq_f32(v445, v423);
        v453 = vmulq_f32(v446, (float32x4_t)vuzp2q_s32((int32x4_t)v446, vzip2q_s32((int32x4_t)v446, v451)));
        v454 = vmuls_lane_f32(v446.f32[0], *(float32x2_t *)v7.f32, 1);
        v455 = vmuls_lane_f32(v446.f32[0], v450, 1);
        v446.i32[1] = v446.i32[3];
        v423.i32[1] = v423.i32[0];
        v456 = vmulq_f32(v446, v423);
        v457 = vmuls_lane_f32(v445.f32[0], *(float32x2_t *)v7.f32, 1);
        v423.f32[0] = vmuls_lane_f32(v445.f32[0], v450, 1);
        v445.i32[1] = v445.i32[3];
        v458 = vmulq_f32(v445, (float32x4_t)v451);
        v451.i32[0] = *(_DWORD *)(v432 + v437);
        v451.i32[1] = *(_DWORD *)(v432 + v440);
        v451.i32[2] = *(_DWORD *)(v444 + v447);
        v451.i32[3] = *(_DWORD *)(v449 + v440);
        v459.i32[0] = *(_DWORD *)(v432 + v439);
        v459.i32[1] = *(_DWORD *)(v432 + v441);
        v459.i32[2] = *(_DWORD *)(v444 + v448);
        v459.i32[3] = *(_DWORD *)(v449 + v441);
        v426 *= 4;
        v460 = v432 + v426;
        v461 = v444 + v426;
        v462 = (__int32 *)(v444 + v426 + v447);
        v463 = (__int32 *)(v444 + v426 + v448);
        v464 = v449 + v426;
        v465 = vaddq_f32(vmulq_f32((float32x4_t)v451, v452), vmulq_f32(v459, v456));
        v451.i32[0] = *(_DWORD *)(v460 + v437);
        v451.i32[1] = *(_DWORD *)(v460 + v440);
        v451.i32[2] = *v462;
        v451.i32[3] = *(_DWORD *)(v464 + v440);
        v466 = vmulq_f32((float32x4_t)v451, v458);
        v451.i32[0] = *(_DWORD *)(v460 + v439);
        v451.i32[1] = *(_DWORD *)(v460 + v441);
        v451.i32[2] = *v463;
        v451.i32[3] = *(_DWORD *)(v464 + v441);
        *(int16x4_t *)&v1106[55] = vmovn_s32((int32x4_t)vcvtq_u32_f32(vmulq_f32(vaddq_f32(vmulq_f32((float32x4_t)v451, v453), vaddq_f32(v466, v465)), v17)));
        v1106[59] = (int)(float)((float)((float)((float)((float)(v457 * *(float *)(v449 + v437))
                                                       + (float)(v454 * *(float *)(v449 + v439)))
                                               + (float)(v423.f32[0] * *(float *)(v464 + v437)))
                                       + (float)(v455 * *(float *)(v464 + v439)))
                               * 255.0);
        if (*(float *)v422.i32 >= v428)
          v467 = v428;
        else
          v467 = *(float *)v422.i32;
        if (v428 >= 0.0)
          v468 = v467;
        else
          v468 = 0.0;
        v469 = v468 + 1;
        v1106[60] = (int)(float)((float)((float)((float)((float)((float)((float)((float)v469 - v468) * v7.f32[0])
                                                               * *(float *)(v444 + 4 * v468))
                                                       + (float)((float)((float)(v468 - (float)v468)
                                                                       * v7.f32[0])
                                                               * *(float *)(v444 + 4 * v469)))
                                               + (float)((float)((float)((float)v469 - v468) * v450.f32[0])
                                                       * *(float *)(v461 + 4 * v468)))
                                       + (float)((float)((float)(v468 - (float)v468) * v450.f32[0])
                                               * *(float *)(v461 + 4 * v469)))
                               * 255.0);
        v470 = 0;
        do
        {
          v470 = vsra_n_s32(v470, vmul_s32(vdup_n_s32((unsigned __int16)v1106[*(unsigned __int16 *)&v1104[v416] - 1]- (unsigned __int16)v1106[*(unsigned __int16 *)&v1104[v416 + 2] - 1]), *(int32x2_t *)&v1104[v416 + 4]), 0xFuLL);
          v416 += 12;
        }
        while (v416 != 540);
        if (v470)
        {
          v18 = fabsf((float)v470.i32[1]) + 0.0000001;
          v19 = v18 + (float)v470.i32[0];
          v20 = v19 / (float)(v18 - (float)v470.i32[0]);
          v21 = (float)((float)v470.i32[0] - v18) / v19;
          v22 = 0.7854;
          if (v470.i32[0] < 1)
          {
            v22 = 2.3562;
            v21 = v20;
          }
          v23 = v22 + (float)(v21 * (float)((float)(v21 * (float)(v21 * 0.1821)) + -0.9675));
          if (v470.i32[1] >= 0)
            v24 = v23;
          else
            v24 = 6.2832 - v23;
        }
        else
        {
          v24 = 0.0;
        }
        if (v24 >= 0.0)
          v25 = v24;
        else
          v25 = 0.0;
        if (v25 > 6.2832)
          v25 = 6.2832;
        a1[5].f32[0] = v25;
        a1 += 6;
      }
      while (a1 != a2);
    }
  }
  else
  {
    v1103 = 1191181824;
    result = (uint64_t)memcpy(v1104, &unk_2103BFBF0, sizeof(v1104));
    if (a1 != a2)
    {
      v479 = *(_DWORD *)(a3 + 24);
      v480 = *(_QWORD *)(a3 + 32);
      v481 = v480 - 1;
      v482 = *(_QWORD *)(a3 + 56);
      v483 = (v480 - 1) * v479;
      v484 = v479 - 1;
      v485 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v486.i64[0] = 0x100000001;
      v486.i64[1] = 0x100000001;
      do
      {
        v495 = a1[2].f32[0];
        v494 = a1[2].f32[1];
        v496 = a1[1].f32[1];
        memset(v1106, 0, sizeof(v1106));
        v498 = *(float *)(a3 + 108);
        v497 = *(float *)(a3 + 112);
        v499 = vcvtms_s32_f32(v498* (float)((float)((float)((float)((float)((float)((float)(COERCE_FLOAT(LODWORD(v496) & 0x807FFFFF | 0x3F800000)* -0.33333)+ 2.0)* COERCE_FLOAT(LODWORD(v496) & 0x807FFFFF | 0x3F800000))+ -1.6667)+ (float)((LODWORD(v496) >> 23) - 127))* 0.69315)- v497));
        if (v499 < 0)
        {
          v500 = 0;
          v501 = 0;
        }
        else
        {
          v500 = v484;
          v501 = v480 - 1;
          if (v483 > v499)
          {
            v500 = v499 / v481;
            v501 = v499 % v481;
          }
          if (!v501)
          {
            if (v500 <= 0)
              v501 = 0;
            else
              v501 = v480 - 1;
            v500 -= v500 > 0;
          }
        }
        v502 = v496 + v496;
        v503 = 1.0 / (float)(1 << v500);
        v504 = v495 * v503;
        v505 = v494 * v503;
        v506 = (_QWORD *)(v482 + 144 * (v480 * v500 + v501));
        v507 = v506[11];
        v509 = v506[4];
        v508 = v506[5];
        v510 = v506[6];
        v511 = v504 + 0.0;
        v512 = (float)v509 + -1.001;
        if (v512 >= v511)
          v512 = v511;
        if (v511 >= 0.0)
          v513 = v512;
        else
          v513 = 0.0;
        v514 = v505 + 0.0;
        v515 = (float)v510 + -1.001;
        if (v515 >= v514)
          v515 = v514;
        if (v514 >= 0.0)
          v516 = v515;
        else
          v516 = 0.0;
        v517 = v516;
        v518 = v513 + 1;
        v519 = v507 + 4 * v508 * v517;
        v1105 = (int)(float)((float)((float)(*(float *)(v519 + 4 * v508 + 4 * v518)
                                           * (float)((float)(v513 - (float)v513)
                                                   * (float)(v516 - (float)v516)))
                                   + (float)((float)(*(float *)(v519 + 4 * v508 + 4 * v513)
                                                   * (float)((float)((float)v518 - v513)
                                                           * (float)(v516 - (float)v516)))
                                           + (float)((float)(*(float *)(v519 + 4 * v513)
                                                           * (float)((float)((float)v518 - v513)
                                                                   * (float)((float)(v517 + 1) - v516)))
                                                   + (float)(*(float *)(v519 + 4 * v518)
                                                           * (float)((float)(v513 - (float)v513)
                                                                   * (float)((float)(v517 + 1) - v516))))))
                           * 255.0);
        if (v499 < 0)
        {
          v520 = 0;
          v521 = 0;
        }
        else
        {
          v520 = v480 - 1;
          v521 = v484;
          if (v483 > v499)
          {
            v521 = v499 / v481;
            v520 = v499 % v481;
          }
          if (!v520)
          {
            if (v521 <= 0)
              v520 = 0;
            else
              v520 = v480 - 1;
            v521 -= v521 > 0;
          }
        }
        v522 = (float)(1 << v521);
        v523 = v495 * (float)(1.0 / v522);
        v524 = v494 * (float)(1.0 / v522);
        v525 = v502 / v522;
        v526 = (unint64_t *)(v482 + 144 * (v480 * v521 + v520));
        v527 = v526[11];
        v528 = v526[5];
        v529.f32[0] = v523 - (float)(v525 * 0.5);
        *(float *)v477.i32 = (float)v526[4] + -1.001;
        v476.f32[0] = (float)v526[6] + -1.001;
        v530.f32[0] = v525 * 0.70711;
        *(float32x2_t *)v478.f32 = vmul_n_f32((float32x2_t)0xBF3504F300000000, v525);
        v531.f32[0] = v524 - (float)(0.5 * v478.f32[0]);
        v532 = v478.f32[1] + v531.f32[0];
        v531.f32[1] = v525 * 0.70711;
        v530.f32[1] = v524 + (float)(0.5 * v478.f32[0]);
        v530.f32[2] = v478.f32[0] + v524;
        v530.f32[3] = v530.f32[1];
        v531.i64[1] = v478.i64[0];
        v533 = vaddq_f32(v530, v531);
        v534 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v476.f32, 0);
        v535 = (float32x4_t)vbicq_s8(vbslq_s8((int8x16_t)vcgtq_f32(v533, v534), (int8x16_t)v534, (int8x16_t)v533), (int8x16_t)vcltzq_f32(v533));
        v536 = (int32x4_t)vcvtq_u32_f32(v535);
        v537 = v527 + 4 * v528 * v536.u32[0];
        v538 = 4 * v528;
        v539 = vmul_n_f32((float32x2_t)0xBF3504F300000000, v478.f32[0]);
        v540 = v529.f32[0] + v539.f32[1];
        v529.f32[1] = (float)(v525 * 0.5) + v523;
        v529.f32[2] = v525 + v523;
        v529.f32[3] = v529.f32[1];
        v541 = v537 + 4 * v528;
        v542.f32[0] = 0.70711 * v478.f32[0];
        *(float32x2_t *)&v542.u32[2] = v539;
        v542.f32[1] = 0.70711 * v478.f32[0];
        v543 = vaddq_f32(v529, v542);
        v544 = (float32x4_t)vdupq_lane_s32(v477, 0);
        v545 = (float32x4_t)vbicq_s8(vbslq_s8((int8x16_t)vcgtq_f32(v543, v544), (int8x16_t)v544, (int8x16_t)v543), (int8x16_t)vcltzq_f32(v543));
        v546 = (int32x4_t)vcvtq_u32_f32(v545);
        v547 = (uint32x4_t)vaddq_s32(v546, v486);
        v548 = vcvtq_f32_u32((uint32x4_t)v546);
        v549 = v546.u32[3];
        v550 = 4 * v546.u32[0];
        v551 = v547.u32[3];
        v552 = 4 * v547.u32[0];
        v553 = v527 + 4 * v528 * v536.u32[1];
        v554 = v553 + 4 * v528;
        v555 = 4 * v546.u32[1];
        v556 = (__int32 *)(v553 + v555);
        v557 = 4 * v547.u32[1];
        v558 = (__int32 *)(v553 + v557);
        v559 = (__int32 *)(v554 + v555);
        v560 = (__int32 *)(v554 + v557);
        v561 = v527 + 4 * v528 * v536.u32[2];
        v562 = v561 + 4 * v528;
        v563 = 4 * v546.u32[2];
        v564 = (__int32 *)(v561 + v563);
        v565 = 4 * v547.u32[2];
        v566 = (__int32 *)(v561 + v565);
        v567 = (__int32 *)(v562 + v563);
        v568 = (__int32 *)(v562 + v565);
        v569 = v527 + 4 * v528 * v536.u32[3];
        v570 = v569 + 4 * v528;
        v571 = vsubq_f32(vcvtq_f32_u32(v547), v545);
        v572 = vsubq_f32(vcvtq_f32_u32((uint32x4_t)vaddq_s32(v536, v486)), v535);
        v573 = vmulq_f32(v571, v572);
        v574 = vsubq_f32(v545, v548);
        v575 = vmulq_f32(v574, v572);
        v576 = vsubq_f32(v535, vcvtq_f32_u32((uint32x4_t)v536));
        v577 = vmulq_f32(v571, v576);
        v578 = vmulq_f32(v574, v576);
        v579 = 4 * v549;
        v576.i32[0] = *(_DWORD *)(v537 + v550);
        v576.i32[1] = *v556;
        v576.i32[2] = *v564;
        v576.i32[3] = *(_DWORD *)(v569 + v579);
        v580 = vmulq_f32(v576, v573);
        v581 = 4 * v551;
        v535.i32[0] = *(_DWORD *)(v537 + v552);
        v535.i32[1] = *v558;
        v535.i32[2] = *v566;
        v535.i32[3] = *(_DWORD *)(v569 + v581);
        v582 = vmulq_f32(v535, v575);
        v535.i32[0] = *(_DWORD *)(v541 + v550);
        v535.i32[1] = *v559;
        v535.i32[2] = *v567;
        v535.i32[3] = *(_DWORD *)(v570 + v579);
        v583 = vaddq_f32(vmulq_f32(v535, v577), vaddq_f32(v580, v582));
        v582.i32[0] = *(_DWORD *)(v541 + v552);
        v582.i32[1] = *v560;
        v582.i32[2] = *v568;
        v582.i32[3] = *(_DWORD *)(v570 + v581);
        *(int16x4_t *)&v1106[7] = vmovn_s32((int32x4_t)vcvtq_u32_f32(vmulq_f32(vaddq_f32(vmulq_f32(v582, v578), v583), v485)));
        if (*(float *)v477.i32 >= v540)
          v584 = v540;
        else
          v584 = *(float *)v477.i32;
        if (v540 < 0.0)
          v584 = 0.0;
        if (v476.f32[0] >= v532)
          v585 = v532;
        else
          v585 = v476.f32[0];
        if (v532 < 0.0)
          v585 = 0.0;
        v586 = v585;
        v587 = v584 + 1;
        v588 = v586 + 1;
        v589 = v527 + 4 * v528 * v586;
        v1106[11] = (int)(float)((float)((float)((float)((float)((float)((float)((float)v587 - v584)
                                                                       * (float)((float)v588 - v585))
                                                               * *(float *)(v589 + 4 * v584))
                                                       + (float)((float)((float)(v584 - (float)v584)
                                                                       * (float)((float)v588 - v585))
                                                               * *(float *)(v589 + 4 * v587)))
                                               + (float)((float)((float)((float)v587 - v584)
                                                               * (float)(v585 - (float)v585))
                                                       * *(float *)(v589 + v538 + 4 * v584)))
                                       + (float)((float)((float)(v584 - (float)v584)
                                                       * (float)(v585 - (float)v585))
                                               * *(float *)(v589 + v538 + 4 * v587)))
                               * 255.0);
        v590 = (float)(v523 - v525) + v539.f32[0];
        if (*(float *)v477.i32 >= v590)
          v591 = v590;
        else
          v591 = *(float *)v477.i32;
        if (v590 >= 0.0)
          v592 = v591;
        else
          v592 = 0.0;
        v593 = v478.f32[0] + (float)(v524 - v478.f32[0]);
        if (v476.f32[0] >= v593)
          v594 = v593;
        else
          v594 = v476.f32[0];
        if (v593 >= 0.0)
          v595 = v594;
        else
          v595 = 0.0;
        v596 = v595;
        v597 = v592 + 1;
        v598 = v596 + 1;
        v599 = v527 + 4 * v528 * v596;
        v1106[12] = (int)(float)((float)((float)((float)((float)((float)((float)((float)v597 - v592)
                                                                       * (float)((float)v598 - v595))
                                                               * *(float *)(v599 + 4 * v592))
                                                       + (float)((float)((float)(v592 - (float)v592)
                                                                       * (float)((float)v598 - v595))
                                                               * *(float *)(v599 + 4 * v597)))
                                               + (float)((float)((float)(v595 - (float)v595)
                                                               * (float)((float)v597 - v592))
                                                       * *(float *)(v599 + v538 + 4 * v592)))
                                       + (float)((float)((float)(v592 - (float)v592)
                                                       * (float)(v595 - (float)v595))
                                               * *(float *)(v599 + v538 + 4 * v597)))
                               * 255.0);
        v600 = v502 * 1.4142;
        v601 = v496 * 1.4142;
        v602 = vcvtms_s32_f32(v498* (float)((float)((float)((float)((float)((float)((float)(COERCE_FLOAT(COERCE_UNSIGNED_INT(v496 * 1.4142) & 0x807FFFFF | 0x3F800000)* -0.33333)+ 2.0)* COERCE_FLOAT(COERCE_UNSIGNED_INT(v496 * 1.4142) & 0x807FFFFF | 0x3F800000))+ -1.6667)+ (float)((COERCE_UNSIGNED_INT(v496 * 1.4142) >> 23) - 127))* 0.69315)- v497));
        if (v602 < 0)
        {
          v603 = 0;
          v604 = 0;
        }
        else
        {
          v603 = v480 - 1;
          v604 = v484;
          if (v483 > v602)
          {
            v604 = v602 / v481;
            v603 = v602 % v481;
          }
          if (!v603)
          {
            if (v604 <= 0)
              v603 = 0;
            else
              v603 = v480 - 1;
            v604 -= v604 > 0;
          }
        }
        *(float *)v472.i32 = (float)(1 << v604);
        *(float *)v477.i32 = v495 * (float)(1.0 / *(float *)v472.i32);
        v476.f32[0] = v494 * (float)(1.0 / *(float *)v472.i32);
        v478.f32[0] = v600 / *(float *)v472.i32;
        v605 = (unint64_t *)(v482 + 144 * (v480 * v604 + v603));
        v606 = v605[11];
        v607 = v605[5];
        v475.f32[0] = (float)v605[4] + -1.001;
        *(float *)v472.i32 = (float)v605[6] + -1.001;
        v608 = v478.f32[0] * 0.5;
        v609 = v478.f32[0] * -0.5;
        v610 = vmul_n_f32((float32x2_t)0x3F3504F300000000, v478.f32[0]);
        v611 = vmul_n_f32((float32x2_t)0x3F3504F300000000, v610.f32[0]);
        *(float32x2_t *)v580.f32 = vadd_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v476.f32, 0), v611);
        v612 = vsubq_f32(v580, v478).u32[0];
        v478.f32[1] = v478.f32[0] * 0.5;
        v613 = (float32x4_t)vdupq_lane_s32(v472, 0);
        v478.i32[2] = v580.i32[1];
        v580.f32[2] = v478.f32[0] * -0.5;
        v614 = vaddq_f32(v580, v478);
        v615 = v614;
        v615.i32[0] = v612;
        v615.i32[3] = v614.i32[0];
        v618 = (float32x4_t)vcgtq_f32(v615, v613);
        v616 = vbslq_s8((int8x16_t)v618, (int8x16_t)v613, (int8x16_t)v615);
        *(float32x2_t *)v617.f32 = vadd_f32(v610, (float32x2_t)vdup_lane_s32(v477, 0));
        v618.f32[0] = 0.5 * v610.f32[0];
        *(int32x2_t *)v619.f32 = vrev64_s32(*(int32x2_t *)v617.f32);
        v617.f32[2] = -0.5 * v610.f32[0];
        v617.i32[3] = v610.i32[0];
        v619.i64[1] = v619.i64[0];
        v619.f32[1] = 0.5 * v610.f32[0];
        v620 = (float32x4_t)vbicq_s8(v616, (int8x16_t)vcltzq_f32(v615));
        v621 = vaddq_f32(v617, v619);
        v621.i32[0] = vsub_f32(*(float32x2_t *)v617.f32, v610).u32[0];
        v622 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v475.f32, 0);
        v623 = (float32x4_t)vbicq_s8(vbslq_s8((int8x16_t)vcgtq_f32(v621, v622), (int8x16_t)v622, (int8x16_t)v621), (int8x16_t)vcltzq_f32(v621));
        v624 = (int32x4_t)vcvtq_u32_f32(v623);
        v625 = (uint32x4_t)vaddq_s32(v624, v486);
        v626 = v624.u32[1];
        LODWORD(v605) = v624.i32[2];
        v627 = v624.u32[3];
        v628 = vcvtq_f32_u32((uint32x4_t)v624);
        v629 = v624.i32[0];
        v630 = v625.u32[1];
        v631 = v625.u32[2];
        v632 = vcvtq_f32_u32(v625);
        v633 = v625.u32[3];
        v634 = v625.i32[0];
        v635 = (int32x4_t)vcvtq_u32_f32(v620);
        v636 = v606 + 4 * v607 * v635.u32[0];
        v637 = 4 * v629;
        v638 = 4 * v634;
        v639 = v606 + 4 * v607 * v635.u32[1];
        v640 = 4 * v626;
        v641 = 4 * v630;
        v642 = v606 + 4 * v607 * v635.u32[2];
        v643 = 4 * v605;
        v644 = 4 * v631;
        v645 = vsubq_f32(v632, v623);
        v646 = vsubq_f32(v623, v628);
        v647 = v606 + 4 * v607 * v635.u32[3];
        v648 = vsubq_f32(vcvtq_f32_u32((uint32x4_t)vaddq_s32(v635, v486)), v620);
        v649 = vsubq_f32(v620, vcvtq_f32_u32((uint32x4_t)v635));
        v650 = vmulq_f32(v645, v648);
        v651 = vmulq_f32(v646, v648);
        v652 = vmulq_f32(v645, v649);
        v653 = vmulq_f32(v646, v649);
        v654 = 4 * v627;
        v646.i32[0] = *(_DWORD *)(v636 + v637);
        v646.i32[1] = *(_DWORD *)(v639 + v640);
        v646.i32[2] = *(_DWORD *)(v642 + v643);
        v646.i32[3] = *(_DWORD *)(v647 + v654);
        v655 = vmulq_f32(v646, v650);
        v656 = 4 * v633;
        v650.i32[0] = *(_DWORD *)(v636 + v638);
        v650.i32[1] = *(_DWORD *)(v639 + v641);
        v650.i32[2] = *(_DWORD *)(v642 + v644);
        v650.i32[3] = *(_DWORD *)(v647 + v656);
        v657 = 4 * v607;
        v658 = v636 + 4 * v607;
        v659 = v639 + 4 * v607;
        v660 = v642 + 4 * v607;
        v661 = v647 + 4 * v607;
        v662 = vaddq_f32(v655, vmulq_f32(v650, v651));
        v650.i32[0] = *(_DWORD *)(v658 + v637);
        v650.i32[1] = *(_DWORD *)(v659 + v640);
        v650.i32[2] = *(_DWORD *)(v660 + v643);
        v650.i32[3] = *(_DWORD *)(v661 + v654);
        v663 = vaddq_f32(vmulq_f32(v650, v652), v662);
        v650.i32[0] = *(_DWORD *)(v658 + v638);
        v650.i32[1] = *(_DWORD *)(v659 + v641);
        v650.i32[2] = *(_DWORD *)(v660 + v644);
        v650.i32[3] = *(_DWORD *)(v661 + v656);
        *(int16x4_t *)&v1106[15] = vmovn_s32((int32x4_t)vcvtq_u32_f32(vmulq_f32(vaddq_f32(vmulq_f32(v650, v653), v663), v485)));
        *(float *)v477.i32 = *(float *)v477.i32 - v610.f32[1];
        v664 = *(float *)v477.i32 + (float)(-0.5 * v610.f32[0]);
        if (v475.f32[0] >= v664)
          v665 = v664;
        else
          v665 = v475.f32[0];
        if (v664 >= 0.0)
          v666 = v665;
        else
          v666 = 0.0;
        v667 = v476.f32[0] - v611.f32[1];
        v668 = v609 + v667;
        if (*(float *)v472.i32 >= v668)
          v669 = v668;
        else
          v669 = *(float *)v472.i32;
        if (v668 >= 0.0)
          v671 = v669;
        else
          v671 = 0.0;
        v672 = v671;
        v673 = v672 + 1;
        v674 = v606 + 4 * v607 * v672;
        v675 = *(float *)v477.i32 + v618.f32[0];
        v670 = v666;
        v1106[19] = (int)(float)((float)((float)((float)((float)((float)((float)((float)(v670 + 1) - v666)
                                                                       * (float)((float)v673 - v671))
                                                               * *(float *)(v674 + 4 * v670))
                                                       + (float)((float)((float)(v666 - (float)v666)
                                                                       * (float)((float)v673 - v671))
                                                               * *(float *)(v674 + 4 * (v670 + 1))))
                                               + (float)((float)((float)((float)(v670 + 1) - v666)
                                                               * (float)(v671 - (float)v671))
                                                       * *(float *)(v674 + v657 + 4 * v670)))
                                       + (float)((float)((float)(v666 - (float)v666)
                                                       * (float)(v671 - (float)v671))
                                               * *(float *)(v674 + v657 + 4 * (v670 + 1))))
                               * 255.0);
        if (v475.f32[0] >= v675)
          v475.f32[0] = v675;
        if (v675 < 0.0)
          v475.f32[0] = 0.0;
        v676 = v608 + v667;
        if (*(float *)v472.i32 >= v676)
          *(float *)v472.i32 = v676;
        if (v676 < 0.0)
          *(float *)v472.i32 = 0.0;
        v677 = *(float *)v472.i32;
        v678 = v475.f32[0] + 1;
        v679 = v677 + 1;
        v680 = v606 + 4 * v607 * v677;
        v681 = (int)(float)((float)((float)((float)((float)((float)((float)((float)v678 - v475.f32[0])
                                                                  * (float)((float)v679 - *(float *)v472.i32))
                                                          * *(float *)(v680 + 4 * v475.f32[0]))
                                                  + (float)((float)((float)(v475.f32[0]
                                                                          - (float)v475.f32[0])
                                                                  * (float)((float)v679 - *(float *)v472.i32))
                                                          * *(float *)(v680 + 4 * v678)))
                                          + (float)((float)((float)((float)v678 - v475.f32[0])
                                                          * (float)(*(float *)v472.i32
                                                                  - (float)*(float *)v472.i32))
                                                  * *(float *)(v680 + v657 + 4 * v475.f32[0])))
                                  + (float)((float)((float)(v475.f32[0] - (float)v475.f32[0])
                                                  * (float)(*(float *)v472.i32 - (float)*(float *)v472.i32))
                                          * *(float *)(v680 + v657 + 4 * v678)))
                          * 255.0);
        v682 = v600 * 1.4142;
        v683 = v601 * 1.4142;
        v684 = vcvtms_s32_f32(v498* (float)((float)((float)((float)((float)((float)((float)(COERCE_FLOAT(LODWORD(v683) & 0x807FFFFF | 0x3F800000)* -0.33333)+ 2.0)* COERCE_FLOAT(LODWORD(v683) & 0x807FFFFF | 0x3F800000))+ -1.6667)+ (float)((LODWORD(v683) >> 23) - 127))* 0.69315)- v497));
        v1106[20] = v681;
        if (v684 < 0)
        {
          v685 = 0;
          v686 = 0;
        }
        else
        {
          v685 = v480 - 1;
          v686 = v484;
          if (v483 > v684)
          {
            v686 = v684 / v481;
            v685 = v684 % v481;
          }
          if (!v685)
          {
            if (v686 <= 0)
              v685 = 0;
            else
              v685 = v480 - 1;
            v686 -= v686 > 0;
          }
        }
        v687 = (float)(1 << v686);
        v688 = v495 * (float)(1.0 / v687);
        v689 = v494 * (float)(1.0 / v687);
        v690 = v682 / v687;
        v691 = (unint64_t *)(v482 + 144 * (v480 * v686 + v685));
        v692 = v691[11];
        v693 = v691[5];
        v694.f32[0] = v688 - (float)(v690 * 0.5);
        *(float *)v477.i32 = (float)v691[4] + -1.001;
        v476.f32[0] = (float)v691[6] + -1.001;
        v695.f32[0] = v690 * 0.70711;
        *(float32x2_t *)v618.f32 = vmul_n_f32((float32x2_t)0xBF3504F300000000, v690);
        v696.f32[0] = v689 - (float)(0.5 * v618.f32[0]);
        v697 = v618.f32[1] + v696.f32[0];
        v696.f32[1] = v690 * 0.70711;
        v695.f32[1] = v689 + (float)(0.5 * v618.f32[0]);
        v695.f32[2] = v618.f32[0] + v689;
        v695.f32[3] = v695.f32[1];
        v696.i64[1] = v618.i64[0];
        v698 = vaddq_f32(v695, v696);
        v699 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v476.f32, 0);
        v700 = (float32x4_t)vbicq_s8(vbslq_s8((int8x16_t)vcgtq_f32(v698, v699), (int8x16_t)v699, (int8x16_t)v698), (int8x16_t)vcltzq_f32(v698));
        v701 = (int32x4_t)vcvtq_u32_f32(v700);
        v702 = v692 + 4 * v693 * v701.u32[0];
        v703 = 4 * v693;
        v704 = vmul_n_f32((float32x2_t)0xBF3504F300000000, v618.f32[0]);
        v705 = v694.f32[0] + v704.f32[1];
        v694.f32[1] = (float)(v690 * 0.5) + v688;
        v694.f32[2] = v690 + v688;
        v694.f32[3] = v694.f32[1];
        v706 = v702 + 4 * v693;
        v707.f32[0] = 0.70711 * v618.f32[0];
        *(float32x2_t *)&v707.u32[2] = v704;
        v707.f32[1] = 0.70711 * v618.f32[0];
        v708 = vaddq_f32(v694, v707);
        v709 = (float32x4_t)vdupq_lane_s32(v477, 0);
        v710 = (float32x4_t)vbicq_s8(vbslq_s8((int8x16_t)vcgtq_f32(v708, v709), (int8x16_t)v709, (int8x16_t)v708), (int8x16_t)vcltzq_f32(v708));
        v711 = (int32x4_t)vcvtq_u32_f32(v710);
        v712 = (uint32x4_t)vaddq_s32(v711, v486);
        v713 = vcvtq_f32_u32((uint32x4_t)v711);
        v714 = v711.u32[3];
        v715 = 4 * v711.u32[0];
        v716 = v712.u32[3];
        v717 = 4 * v712.u32[0];
        v718 = v692 + 4 * v693 * v701.u32[1];
        v719 = v718 + 4 * v693;
        v720 = 4 * v711.u32[1];
        v721 = (__int32 *)(v718 + v720);
        v722 = 4 * v712.u32[1];
        v723 = (__int32 *)(v718 + v722);
        v724 = (__int32 *)(v719 + v720);
        v725 = (__int32 *)(v719 + v722);
        v726 = v692 + 4 * v693 * v701.u32[2];
        v727 = v726 + 4 * v693;
        v728 = 4 * v711.u32[2];
        v729 = (__int32 *)(v726 + v728);
        v730 = 4 * v712.u32[2];
        v731 = (__int32 *)(v726 + v730);
        v732 = (__int32 *)(v727 + v728);
        v733 = (__int32 *)(v727 + v730);
        v734 = v692 + 4 * v693 * v701.u32[3];
        v735 = v734 + 4 * v693;
        v736 = vsubq_f32(vcvtq_f32_u32(v712), v710);
        v737 = vsubq_f32(vcvtq_f32_u32((uint32x4_t)vaddq_s32(v701, v486)), v700);
        v738 = vmulq_f32(v736, v737);
        v739 = vsubq_f32(v710, v713);
        v740 = vmulq_f32(v739, v737);
        v741 = vsubq_f32(v700, vcvtq_f32_u32((uint32x4_t)v701));
        v742 = vmulq_f32(v736, v741);
        v743 = vmulq_f32(v739, v741);
        v744 = 4 * v714;
        v741.i32[0] = *(_DWORD *)(v702 + v715);
        v741.i32[1] = *v721;
        v741.i32[2] = *v729;
        v741.i32[3] = *(_DWORD *)(v734 + v744);
        v745 = vmulq_f32(v741, v738);
        v746 = 4 * v716;
        v700.i32[0] = *(_DWORD *)(v702 + v717);
        v700.i32[1] = *v723;
        v700.i32[2] = *v731;
        v700.i32[3] = *(_DWORD *)(v734 + v746);
        v747 = vmulq_f32(v700, v740);
        v700.i32[0] = *(_DWORD *)(v706 + v715);
        v700.i32[1] = *v724;
        v700.i32[2] = *v732;
        v700.i32[3] = *(_DWORD *)(v735 + v744);
        v748 = vaddq_f32(vmulq_f32(v700, v742), vaddq_f32(v745, v747));
        v747.i32[0] = *(_DWORD *)(v706 + v717);
        v747.i32[1] = *v725;
        v747.i32[2] = *v733;
        v747.i32[3] = *(_DWORD *)(v735 + v746);
        *(int16x4_t *)&v1106[23] = vmovn_s32((int32x4_t)vcvtq_u32_f32(vmulq_f32(vaddq_f32(vmulq_f32(v747, v743), v748), v485)));
        if (*(float *)v477.i32 >= v705)
          v749 = v705;
        else
          v749 = *(float *)v477.i32;
        if (v705 < 0.0)
          v749 = 0.0;
        if (v476.f32[0] >= v697)
          v750 = v697;
        else
          v750 = v476.f32[0];
        if (v697 < 0.0)
          v750 = 0.0;
        v751 = v750;
        v752 = v749 + 1;
        v753 = v751 + 1;
        v754 = v692 + 4 * v693 * v751;
        v1106[27] = (int)(float)((float)((float)((float)((float)((float)((float)((float)v752 - v749)
                                                                       * (float)((float)v753 - v750))
                                                               * *(float *)(v754 + 4 * v749))
                                                       + (float)((float)((float)(v749 - (float)v749)
                                                                       * (float)((float)v753 - v750))
                                                               * *(float *)(v754 + 4 * v752)))
                                               + (float)((float)((float)((float)v752 - v749)
                                                               * (float)(v750 - (float)v750))
                                                       * *(float *)(v754 + v703 + 4 * v749)))
                                       + (float)((float)((float)(v749 - (float)v749)
                                                       * (float)(v750 - (float)v750))
                                               * *(float *)(v754 + v703 + 4 * v752)))
                               * 255.0);
        v755 = (float)(v688 - v690) + v704.f32[0];
        if (*(float *)v477.i32 >= v755)
          v756 = v755;
        else
          v756 = *(float *)v477.i32;
        if (v755 >= 0.0)
          v757 = v756;
        else
          v757 = 0.0;
        v758 = v618.f32[0] + (float)(v689 - v618.f32[0]);
        if (v476.f32[0] >= v758)
          v759 = v758;
        else
          v759 = v476.f32[0];
        if (v758 >= 0.0)
          v760 = v759;
        else
          v760 = 0.0;
        v761 = v760;
        v762 = v757 + 1;
        v763 = v761 + 1;
        v764 = v692 + 4 * v693 * v761;
        v1106[28] = (int)(float)((float)((float)((float)((float)((float)((float)((float)v762 - v757)
                                                                       * (float)((float)v763 - v760))
                                                               * *(float *)(v764 + 4 * v757))
                                                       + (float)((float)((float)(v757 - (float)v757)
                                                                       * (float)((float)v763 - v760))
                                                               * *(float *)(v764 + 4 * v762)))
                                               + (float)((float)((float)(v760 - (float)v760)
                                                               * (float)((float)v762 - v757))
                                                       * *(float *)(v764 + v703 + 4 * v757)))
                                       + (float)((float)((float)(v757 - (float)v757)
                                                       * (float)(v760 - (float)v760))
                                               * *(float *)(v764 + v703 + 4 * v762)))
                               * 255.0);
        v765 = v682 * 1.4142;
        v766 = v683 * 1.4142;
        v767 = vcvtms_s32_f32(v498* (float)((float)((float)((float)((float)((float)((float)(COERCE_FLOAT(LODWORD(v766) & 0x807FFFFF | 0x3F800000)* -0.33333)+ 2.0)* COERCE_FLOAT(LODWORD(v766) & 0x807FFFFF | 0x3F800000))+ -1.6667)+ (float)((LODWORD(v766) >> 23) - 127))* 0.69315)- v497));
        if (v767 < 0)
        {
          v768 = 0;
          v769 = 0;
        }
        else
        {
          v768 = v484;
          v769 = v480 - 1;
          if (v483 > v767)
          {
            v768 = v767 / v481;
            v769 = v767 % v481;
          }
          if (!v769)
          {
            if (v768 <= 0)
              v769 = 0;
            else
              v769 = v480 - 1;
            v768 -= v768 > 0;
          }
        }
        *(float *)v474.i32 = (float)(1 << v768);
        *(float *)v477.i32 = v495 * (float)(1.0 / *(float *)v474.i32);
        v476.f32[0] = v494 * (float)(1.0 / *(float *)v474.i32);
        v618.f32[0] = v765 / *(float *)v474.i32;
        v770 = (unint64_t *)(v482 + 144 * (v480 * v768 + v769));
        v771 = v770[11];
        v772 = v770[5];
        v475.f32[0] = (float)v770[4] + -1.001;
        *(float *)v474.i32 = (float)v770[6] + -1.001;
        v773 = v618.f32[0] * 0.5;
        v774 = v618.f32[0] * -0.5;
        v775 = vmul_n_f32((float32x2_t)0x3F3504F300000000, v618.f32[0]);
        v776 = vmul_n_f32((float32x2_t)0x3F3504F300000000, v775.f32[0]);
        *(float32x2_t *)v745.f32 = vadd_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v476.f32, 0), v776);
        v777 = vsubq_f32(v745, v618).u32[0];
        v618.f32[1] = v618.f32[0] * 0.5;
        v778 = (float32x4_t)vdupq_lane_s32(v474, 0);
        v618.i32[2] = v745.i32[1];
        v745.f32[2] = v618.f32[0] * -0.5;
        v779 = vaddq_f32(v745, v618);
        v780 = v779;
        v780.i32[0] = v777;
        v780.i32[3] = v779.i32[0];
        v783 = (float32x4_t)vcgtq_f32(v780, v778);
        v781 = vbslq_s8((int8x16_t)v783, (int8x16_t)v778, (int8x16_t)v780);
        *(float32x2_t *)v782.f32 = vadd_f32(v775, (float32x2_t)vdup_lane_s32(v477, 0));
        v783.f32[0] = 0.5 * v775.f32[0];
        *(int32x2_t *)v784.f32 = vrev64_s32(*(int32x2_t *)v782.f32);
        v782.f32[2] = -0.5 * v775.f32[0];
        v782.i32[3] = v775.i32[0];
        v784.i64[1] = v784.i64[0];
        v784.f32[1] = 0.5 * v775.f32[0];
        v785 = (float32x4_t)vbicq_s8(v781, (int8x16_t)vcltzq_f32(v780));
        v786 = vaddq_f32(v782, v784);
        v786.i32[0] = vsub_f32(*(float32x2_t *)v782.f32, v775).u32[0];
        v787 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v475.f32, 0);
        v788 = (float32x4_t)vbicq_s8(vbslq_s8((int8x16_t)vcgtq_f32(v786, v787), (int8x16_t)v787, (int8x16_t)v786), (int8x16_t)vcltzq_f32(v786));
        v789 = (int32x4_t)vcvtq_u32_f32(v788);
        v790 = (uint32x4_t)vaddq_s32(v789, v486);
        v791 = v789.u32[1];
        LODWORD(v770) = v789.i32[2];
        v792 = v789.u32[3];
        v793 = vcvtq_f32_u32((uint32x4_t)v789);
        v794 = v789.i32[0];
        v795 = v790.u32[1];
        v796 = v790.u32[2];
        v797 = vcvtq_f32_u32(v790);
        v798 = v790.u32[3];
        v799 = v790.i32[0];
        v800 = (int32x4_t)vcvtq_u32_f32(v785);
        v801 = v771 + 4 * v772 * v800.u32[0];
        v802 = 4 * v794;
        v803 = 4 * v799;
        v804 = v771 + 4 * v772 * v800.u32[1];
        v805 = 4 * v791;
        v806 = 4 * v795;
        v807 = v771 + 4 * v772 * v800.u32[2];
        v808 = 4 * v770;
        v809 = 4 * v796;
        v810 = vsubq_f32(v797, v788);
        v811 = vsubq_f32(v788, v793);
        v812 = v771 + 4 * v772 * v800.u32[3];
        v813 = vsubq_f32(vcvtq_f32_u32((uint32x4_t)vaddq_s32(v800, v486)), v785);
        v814 = vsubq_f32(v785, vcvtq_f32_u32((uint32x4_t)v800));
        v815 = vmulq_f32(v810, v813);
        v816 = vmulq_f32(v811, v813);
        v817 = vmulq_f32(v810, v814);
        v818 = vmulq_f32(v811, v814);
        v819 = 4 * v792;
        v811.i32[0] = *(_DWORD *)(v801 + v802);
        v811.i32[1] = *(_DWORD *)(v804 + v805);
        v811.i32[2] = *(_DWORD *)(v807 + v808);
        v811.i32[3] = *(_DWORD *)(v812 + v819);
        v820 = vmulq_f32(v811, v815);
        v821 = 4 * v798;
        v815.i32[0] = *(_DWORD *)(v801 + v803);
        v815.i32[1] = *(_DWORD *)(v804 + v806);
        v815.i32[2] = *(_DWORD *)(v807 + v809);
        v815.i32[3] = *(_DWORD *)(v812 + v821);
        v822 = 4 * v772;
        v823 = v801 + 4 * v772;
        v824 = v804 + 4 * v772;
        v825 = v807 + 4 * v772;
        v826 = v812 + 4 * v772;
        v827 = vaddq_f32(v820, vmulq_f32(v815, v816));
        v815.i32[0] = *(_DWORD *)(v823 + v802);
        v815.i32[1] = *(_DWORD *)(v824 + v805);
        v815.i32[2] = *(_DWORD *)(v825 + v808);
        v815.i32[3] = *(_DWORD *)(v826 + v819);
        v828 = vaddq_f32(vmulq_f32(v815, v817), v827);
        v815.i32[0] = *(_DWORD *)(v823 + v803);
        v815.i32[1] = *(_DWORD *)(v824 + v806);
        v815.i32[2] = *(_DWORD *)(v825 + v809);
        v815.i32[3] = *(_DWORD *)(v826 + v821);
        *(int16x4_t *)&v1106[31] = vmovn_s32((int32x4_t)vcvtq_u32_f32(vmulq_f32(vaddq_f32(vmulq_f32(v815, v818), v828), v485)));
        *(float *)v477.i32 = *(float *)v477.i32 - v775.f32[1];
        v829 = *(float *)v477.i32 + (float)(-0.5 * v775.f32[0]);
        if (v475.f32[0] >= v829)
          v830 = v829;
        else
          v830 = v475.f32[0];
        if (v829 >= 0.0)
          v831 = v830;
        else
          v831 = 0.0;
        v832 = v476.f32[0] - v776.f32[1];
        v833 = v774 + v832;
        if (*(float *)v474.i32 >= v833)
          v834 = v833;
        else
          v834 = *(float *)v474.i32;
        if (v833 >= 0.0)
          v836 = v834;
        else
          v836 = 0.0;
        v837 = v836;
        v838 = v837 + 1;
        v839 = v771 + 4 * v772 * v837;
        v840 = *(float *)v477.i32 + v783.f32[0];
        v835 = v831;
        v1106[35] = (int)(float)((float)((float)((float)((float)((float)((float)((float)(v835 + 1) - v831)
                                                                       * (float)((float)v838 - v836))
                                                               * *(float *)(v839 + 4 * v835))
                                                       + (float)((float)((float)(v831 - (float)v831)
                                                                       * (float)((float)v838 - v836))
                                                               * *(float *)(v839 + 4 * (v835 + 1))))
                                               + (float)((float)((float)((float)(v835 + 1) - v831)
                                                               * (float)(v836 - (float)v836))
                                                       * *(float *)(v839 + v822 + 4 * v835)))
                                       + (float)((float)((float)(v831 - (float)v831)
                                                       * (float)(v836 - (float)v836))
                                               * *(float *)(v839 + v822 + 4 * (v835 + 1))))
                               * 255.0);
        if (v475.f32[0] >= v840)
          v475.f32[0] = v840;
        if (v840 < 0.0)
          v475.f32[0] = 0.0;
        v841 = v773 + v832;
        if (*(float *)v474.i32 >= v841)
          *(float *)v474.i32 = v841;
        if (v841 < 0.0)
          *(float *)v474.i32 = 0.0;
        v842 = *(float *)v474.i32;
        v843 = v475.f32[0] + 1;
        v844 = v842 + 1;
        v845 = v771 + 4 * v772 * v842;
        v846 = v765 * 1.4142;
        v847 = v766 * 1.4142;
        v848 = vcvtms_s32_f32(v498* (float)((float)((float)((float)((float)((float)((float)(COERCE_FLOAT(LODWORD(v847) & 0x807FFFFF | 0x3F800000)* -0.33333)+ 2.0)* COERCE_FLOAT(LODWORD(v847) & 0x807FFFFF | 0x3F800000))+ -1.6667)+ (float)((LODWORD(v847) >> 23) - 127))* 0.69315)- v497));
        v1106[36] = (int)(float)((float)((float)((float)((float)((float)((float)((float)v843 - v475.f32[0])
                                                                       * (float)((float)v844 - *(float *)v474.i32))
                                                               * *(float *)(v845 + 4 * v475.f32[0]))
                                                       + (float)((float)((float)(v475.f32[0]
                                                                               - (float)v475.f32[0])
                                                                       * (float)((float)v844 - *(float *)v474.i32))
                                                               * *(float *)(v845 + 4 * v843)))
                                               + (float)((float)((float)((float)v843 - v475.f32[0])
                                                               * (float)(*(float *)v474.i32
                                                                       - (float)*(float *)v474.i32))
                                                       * *(float *)(v845 + v822 + 4 * v475.f32[0])))
                                       + (float)((float)((float)(v475.f32[0] - (float)v475.f32[0])
                                                       * (float)(*(float *)v474.i32
                                                               - (float)*(float *)v474.i32))
                                               * *(float *)(v845 + v822 + 4 * v843)))
                               * 255.0);
        if (v848 < 0)
        {
          v849 = 0;
          v850 = 0;
        }
        else
        {
          v849 = v484;
          v850 = v480 - 1;
          if (v483 > v848)
          {
            v849 = v848 / v481;
            v850 = v848 % v481;
          }
          if (!v850)
          {
            if (v849 <= 0)
              v850 = 0;
            else
              v850 = v480 - 1;
            v849 -= v849 > 0;
          }
        }
        v851 = (float)(1 << v849);
        v852 = v495 * (float)(1.0 / v851);
        v853 = v494 * (float)(1.0 / v851);
        v854 = v846 / v851;
        v855 = (unint64_t *)(v482 + 144 * (v480 * v849 + v850));
        v856 = v855[11];
        v857 = v855[5];
        v858.f32[0] = v852 - (float)(v854 * 0.5);
        *(float *)v477.i32 = (float)v855[4] + -1.001;
        v476.f32[0] = (float)v855[6] + -1.001;
        v859.f32[0] = v854 * 0.70711;
        *(float32x2_t *)v783.f32 = vmul_n_f32((float32x2_t)0xBF3504F300000000, v854);
        v860.f32[0] = v853 - (float)(0.5 * v783.f32[0]);
        v861 = v783.f32[1] + v860.f32[0];
        v860.f32[1] = v854 * 0.70711;
        v859.f32[1] = v853 + (float)(0.5 * v783.f32[0]);
        v859.f32[2] = v783.f32[0] + v853;
        v859.f32[3] = v859.f32[1];
        v860.i64[1] = v783.i64[0];
        v862 = vaddq_f32(v859, v860);
        v863 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v476.f32, 0);
        v864 = (float32x4_t)vbicq_s8(vbslq_s8((int8x16_t)vcgtq_f32(v862, v863), (int8x16_t)v863, (int8x16_t)v862), (int8x16_t)vcltzq_f32(v862));
        v865 = (int32x4_t)vcvtq_u32_f32(v864);
        v866 = v856 + 4 * v857 * v865.u32[0];
        v867 = 4 * v857;
        v868 = vmul_n_f32((float32x2_t)0xBF3504F300000000, v783.f32[0]);
        v869 = v858.f32[0] + v868.f32[1];
        v858.f32[1] = (float)(v854 * 0.5) + v852;
        v858.f32[2] = v854 + v852;
        v858.f32[3] = v858.f32[1];
        v870 = v866 + 4 * v857;
        v871.f32[0] = 0.70711 * v783.f32[0];
        *(float32x2_t *)&v871.u32[2] = v868;
        v871.f32[1] = 0.70711 * v783.f32[0];
        v872 = vaddq_f32(v858, v871);
        v873 = (float32x4_t)vdupq_lane_s32(v477, 0);
        v874 = (float32x4_t)vbicq_s8(vbslq_s8((int8x16_t)vcgtq_f32(v872, v873), (int8x16_t)v873, (int8x16_t)v872), (int8x16_t)vcltzq_f32(v872));
        v875 = (int32x4_t)vcvtq_u32_f32(v874);
        v876 = (uint32x4_t)vaddq_s32(v875, v486);
        v877 = vcvtq_f32_u32((uint32x4_t)v875);
        v878 = v875.u32[3];
        v879 = 4 * v875.u32[0];
        v880 = v876.u32[3];
        v881 = 4 * v876.u32[0];
        v882 = v856 + 4 * v857 * v865.u32[1];
        v883 = v882 + 4 * v857;
        v884 = 4 * v875.u32[1];
        v885 = (__int32 *)(v882 + v884);
        v886 = 4 * v876.u32[1];
        v887 = (__int32 *)(v882 + v886);
        v888 = (__int32 *)(v883 + v884);
        v889 = (__int32 *)(v883 + v886);
        v890 = v856 + 4 * v857 * v865.u32[2];
        v891 = v890 + 4 * v857;
        v892 = 4 * v875.u32[2];
        v893 = (__int32 *)(v890 + v892);
        v894 = 4 * v876.u32[2];
        v895 = (__int32 *)(v890 + v894);
        v896 = (__int32 *)(v891 + v892);
        v897 = (__int32 *)(v891 + v894);
        v898 = v856 + 4 * v857 * v865.u32[3];
        v899 = v898 + 4 * v857;
        v900 = vsubq_f32(vcvtq_f32_u32(v876), v874);
        v901 = vsubq_f32(vcvtq_f32_u32((uint32x4_t)vaddq_s32(v865, v486)), v864);
        v902 = vmulq_f32(v900, v901);
        v903 = vsubq_f32(v874, v877);
        v904 = vmulq_f32(v903, v901);
        v905 = vsubq_f32(v864, vcvtq_f32_u32((uint32x4_t)v865));
        v906 = vmulq_f32(v900, v905);
        v907 = vmulq_f32(v903, v905);
        v908 = 4 * v878;
        v905.i32[0] = *(_DWORD *)(v866 + v879);
        v905.i32[1] = *v885;
        v905.i32[2] = *v893;
        v905.i32[3] = *(_DWORD *)(v898 + v908);
        v909 = vmulq_f32(v905, v902);
        v910 = 4 * v880;
        v864.i32[0] = *(_DWORD *)(v866 + v881);
        v864.i32[1] = *v887;
        v864.i32[2] = *v895;
        v864.i32[3] = *(_DWORD *)(v898 + v910);
        v911 = vmulq_f32(v864, v904);
        v864.i32[0] = *(_DWORD *)(v870 + v879);
        v864.i32[1] = *v888;
        v864.i32[2] = *v896;
        v864.i32[3] = *(_DWORD *)(v899 + v908);
        v912 = vaddq_f32(vmulq_f32(v864, v906), vaddq_f32(v909, v911));
        v911.i32[0] = *(_DWORD *)(v870 + v881);
        v911.i32[1] = *v889;
        v911.i32[2] = *v897;
        v911.i32[3] = *(_DWORD *)(v899 + v910);
        *(int16x4_t *)&v1106[39] = vmovn_s32((int32x4_t)vcvtq_u32_f32(vmulq_f32(vaddq_f32(vmulq_f32(v911, v907), v912), v485)));
        if (*(float *)v477.i32 >= v869)
          v913 = v869;
        else
          v913 = *(float *)v477.i32;
        if (v869 < 0.0)
          v913 = 0.0;
        if (v476.f32[0] >= v861)
          v914 = v861;
        else
          v914 = v476.f32[0];
        if (v861 < 0.0)
          v914 = 0.0;
        v915 = v914;
        v916 = v913 + 1;
        v917 = v915 + 1;
        v918 = v856 + 4 * v857 * v915;
        v1106[43] = (int)(float)((float)((float)((float)((float)((float)((float)((float)v916 - v913)
                                                                       * (float)((float)v917 - v914))
                                                               * *(float *)(v918 + 4 * v913))
                                                       + (float)((float)((float)(v913 - (float)v913)
                                                                       * (float)((float)v917 - v914))
                                                               * *(float *)(v918 + 4 * v916)))
                                               + (float)((float)((float)((float)v916 - v913)
                                                               * (float)(v914 - (float)v914))
                                                       * *(float *)(v918 + v867 + 4 * v913)))
                                       + (float)((float)((float)(v913 - (float)v913)
                                                       * (float)(v914 - (float)v914))
                                               * *(float *)(v918 + v867 + 4 * v916)))
                               * 255.0);
        v919 = (float)(v852 - v854) + v868.f32[0];
        if (*(float *)v477.i32 >= v919)
          v920 = v919;
        else
          v920 = *(float *)v477.i32;
        if (v919 >= 0.0)
          v921 = v920;
        else
          v921 = 0.0;
        v922 = v783.f32[0] + (float)(v853 - v783.f32[0]);
        if (v476.f32[0] >= v922)
          v923 = v922;
        else
          v923 = v476.f32[0];
        if (v922 >= 0.0)
          v924 = v923;
        else
          v924 = 0.0;
        v925 = v924;
        v926 = v921 + 1;
        v927 = v925 + 1;
        v928 = v856 + 4 * v857 * v925;
        v1106[44] = (int)(float)((float)((float)((float)((float)((float)((float)((float)v926 - v921)
                                                                       * (float)((float)v927 - v924))
                                                               * *(float *)(v928 + 4 * v921))
                                                       + (float)((float)((float)(v921 - (float)v921)
                                                                       * (float)((float)v927 - v924))
                                                               * *(float *)(v928 + 4 * v926)))
                                               + (float)((float)((float)((float)v926 - v921)
                                                               * (float)(v924 - (float)v924))
                                                       * *(float *)(v928 + v867 + 4 * v921)))
                                       + (float)((float)((float)(v921 - (float)v921)
                                                       * (float)(v924 - (float)v924))
                                               * *(float *)(v928 + v867 + 4 * v926)))
                               * 255.0);
        v929 = v846 * 1.4142;
        v930 = v847 * 1.4142;
        v931 = vcvtms_s32_f32(v498* (float)((float)((float)((float)((float)((float)((float)(COERCE_FLOAT(COERCE_UNSIGNED_INT(v847 * 1.4142) & 0x807FFFFF | 0x3F800000)* -0.33333)+ 2.0)* COERCE_FLOAT(COERCE_UNSIGNED_INT(v847 * 1.4142) & 0x807FFFFF | 0x3F800000))+ -1.6667)+ (float)((COERCE_UNSIGNED_INT(v847 * 1.4142) >> 23) - 127))* 0.69315)- v497));
        if (v931 < 0)
        {
          v932 = 0;
          v933 = 0;
        }
        else
        {
          v932 = v484;
          v933 = v480 - 1;
          if (v483 > v931)
          {
            v932 = v931 / v481;
            v933 = v931 % v481;
          }
          if (!v933)
          {
            if (v932 <= 0)
              v933 = 0;
            else
              v933 = v480 - 1;
            v932 -= v932 > 0;
          }
        }
        *(float *)v473.i32 = (float)(1 << v932);
        *(float *)v477.i32 = v495 * (float)(1.0 / *(float *)v473.i32);
        v476.f32[0] = v494 * (float)(1.0 / *(float *)v473.i32);
        v783.f32[0] = v929 / *(float *)v473.i32;
        v934 = (unint64_t *)(v482 + 144 * (v480 * v932 + v933));
        v935 = v934[11];
        v936 = v934[5];
        v475.f32[0] = (float)v934[4] + -1.001;
        *(float *)v473.i32 = (float)v934[6] + -1.001;
        v937 = v783.f32[0] * 0.5;
        v938 = v783.f32[0] * -0.5;
        v939 = vmul_n_f32((float32x2_t)0x3F3504F300000000, v783.f32[0]);
        v940 = vmul_n_f32((float32x2_t)0x3F3504F300000000, v939.f32[0]);
        *(float32x2_t *)v909.f32 = vadd_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v476.f32, 0), v940);
        v941 = vsubq_f32(v909, v783).u32[0];
        v783.f32[1] = v783.f32[0] * 0.5;
        v942 = (float32x4_t)vdupq_lane_s32(v473, 0);
        v783.i32[2] = v909.i32[1];
        v909.f32[2] = v783.f32[0] * -0.5;
        v943 = vaddq_f32(v909, v783);
        v944 = v943;
        v944.i32[0] = v941;
        v944.i32[3] = v943.i32[0];
        *(float32x2_t *)v945.f32 = vadd_f32(v939, (float32x2_t)vdup_lane_s32(v477, 0));
        v946 = 0.5 * v939.f32[0];
        *(int32x2_t *)v947.f32 = vrev64_s32(*(int32x2_t *)v945.f32);
        v945.f32[2] = -0.5 * v939.f32[0];
        v945.i32[3] = v939.i32[0];
        v947.i64[1] = v947.i64[0];
        v947.f32[1] = 0.5 * v939.f32[0];
        v948 = (float32x4_t)vbicq_s8(vbslq_s8((int8x16_t)vcgtq_f32(v944, v942), (int8x16_t)v942, (int8x16_t)v944), (int8x16_t)vcltzq_f32(v944));
        v949 = vaddq_f32(v945, v947);
        v949.i32[0] = vsub_f32(*(float32x2_t *)v945.f32, v939).u32[0];
        v950 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v475.f32, 0);
        v951 = (float32x4_t)vbicq_s8(vbslq_s8((int8x16_t)vcgtq_f32(v949, v950), (int8x16_t)v950, (int8x16_t)v949), (int8x16_t)vcltzq_f32(v949));
        v952 = (int32x4_t)vcvtq_u32_f32(v951);
        v953 = (uint32x4_t)vaddq_s32(v952, v486);
        v954 = v952.u32[1];
        LODWORD(v934) = v952.i32[2];
        v955 = v952.u32[3];
        v956 = vcvtq_f32_u32((uint32x4_t)v952);
        v957 = v952.i32[0];
        v958 = v953.u32[1];
        v959 = v953.u32[2];
        v960 = vcvtq_f32_u32(v953);
        v961 = v953.u32[3];
        v962 = v953.i32[0];
        v963 = (int32x4_t)vcvtq_u32_f32(v948);
        v964 = v935 + 4 * v936 * v963.u32[0];
        v965 = 4 * v957;
        v966 = 4 * v962;
        v967 = v935 + 4 * v936 * v963.u32[1];
        v968 = 4 * v954;
        v969 = 4 * v958;
        v970 = v935 + 4 * v936 * v963.u32[2];
        v971 = 4 * v934;
        v972 = 4 * v959;
        v973 = vsubq_f32(v960, v951);
        v974 = vsubq_f32(v951, v956);
        v975 = v935 + 4 * v936 * v963.u32[3];
        v976 = vsubq_f32(vcvtq_f32_u32((uint32x4_t)vaddq_s32(v963, v486)), v948);
        v977 = vsubq_f32(v948, vcvtq_f32_u32((uint32x4_t)v963));
        v978 = vmulq_f32(v973, v976);
        v979 = vmulq_f32(v974, v976);
        v980 = vmulq_f32(v973, v977);
        v981 = vmulq_f32(v974, v977);
        v982 = 4 * v955;
        v974.i32[0] = *(_DWORD *)(v964 + v965);
        v974.i32[1] = *(_DWORD *)(v967 + v968);
        v974.i32[2] = *(_DWORD *)(v970 + v971);
        v974.i32[3] = *(_DWORD *)(v975 + v982);
        v983 = vmulq_f32(v974, v978);
        v984 = 4 * v961;
        v978.i32[0] = *(_DWORD *)(v964 + v966);
        v978.i32[1] = *(_DWORD *)(v967 + v969);
        v978.i32[2] = *(_DWORD *)(v970 + v972);
        v978.i32[3] = *(_DWORD *)(v975 + v984);
        v985 = 4 * v936;
        v986 = v964 + 4 * v936;
        v987 = v967 + 4 * v936;
        v988 = v970 + 4 * v936;
        v989 = v975 + 4 * v936;
        v990 = vaddq_f32(v983, vmulq_f32(v978, v979));
        v978.i32[0] = *(_DWORD *)(v986 + v965);
        v978.i32[1] = *(_DWORD *)(v987 + v968);
        v978.i32[2] = *(_DWORD *)(v988 + v971);
        v978.i32[3] = *(_DWORD *)(v989 + v982);
        v991 = vaddq_f32(vmulq_f32(v978, v980), v990);
        v978.i32[0] = *(_DWORD *)(v986 + v966);
        v978.i32[1] = *(_DWORD *)(v987 + v969);
        v978.i32[2] = *(_DWORD *)(v988 + v972);
        v978.i32[3] = *(_DWORD *)(v989 + v984);
        *(int16x4_t *)&v1106[47] = vmovn_s32((int32x4_t)vcvtq_u32_f32(vmulq_f32(vaddq_f32(vmulq_f32(v978, v981), v991), v485)));
        *(float *)v477.i32 = *(float *)v477.i32 - v939.f32[1];
        v992 = *(float *)v477.i32 + (float)(-0.5 * v939.f32[0]);
        if (v475.f32[0] >= v992)
          v993 = v992;
        else
          v993 = v475.f32[0];
        if (v992 >= 0.0)
          v994 = v993;
        else
          v994 = 0.0;
        v995 = v476.f32[0] - v940.f32[1];
        v996 = v938 + v995;
        if (*(float *)v473.i32 >= v996)
          v997 = v996;
        else
          v997 = *(float *)v473.i32;
        if (v996 >= 0.0)
          v999 = v997;
        else
          v999 = 0.0;
        v1000 = v999;
        v1001 = v1000 + 1;
        v1002 = v935 + 4 * v936 * v1000;
        v1003 = *(float *)v477.i32 + v946;
        v998 = v994;
        v1106[51] = (int)(float)((float)((float)((float)((float)((float)((float)((float)(v998 + 1) - v994)
                                                                       * (float)((float)v1001 - v999))
                                                               * *(float *)(v1002 + 4 * v998))
                                                       + (float)((float)((float)(v994 - (float)v994)
                                                                       * (float)((float)v1001 - v999))
                                                               * *(float *)(v1002 + 4 * (v998 + 1))))
                                               + (float)((float)((float)((float)(v998 + 1) - v994)
                                                               * (float)(v999 - (float)v999))
                                                       * *(float *)(v1002 + v985 + 4 * v998)))
                                       + (float)((float)((float)(v994 - (float)v994)
                                                       * (float)(v999 - (float)v999))
                                               * *(float *)(v1002 + v985 + 4 * (v998 + 1))))
                               * 255.0);
        if (v475.f32[0] >= v1003)
          v475.f32[0] = v1003;
        if (v1003 < 0.0)
          v475.f32[0] = 0.0;
        v1004 = v937 + v995;
        if (*(float *)v473.i32 >= v1004)
          *(float *)v473.i32 = v1004;
        if (v1004 < 0.0)
          *(float *)v473.i32 = 0.0;
        v1005 = *(float *)v473.i32;
        v1006 = v475.f32[0] + 1;
        v1007 = v1005 + 1;
        v1008 = v935 + 4 * v936 * v1005;
        v1009 = vcvtms_s32_f32(v498* (float)((float)((float)((float)((float)((float)((float)(COERCE_FLOAT(COERCE_UNSIGNED_INT(v930 * 1.4142) & 0x807FFFFF | 0x3F800000)* -0.33333)+ 2.0)* COERCE_FLOAT(COERCE_UNSIGNED_INT(v930 * 1.4142) & 0x807FFFFF | 0x3F800000))+ -1.6667)+ (float)((COERCE_UNSIGNED_INT(v930 * 1.4142) >> 23) - 127))* 0.69315)- v497));
        v1106[52] = (int)(float)((float)((float)((float)((float)((float)((float)((float)v1006 - v475.f32[0])
                                                                       * (float)((float)v1007 - *(float *)v473.i32))
                                                               * *(float *)(v1008 + 4 * v475.f32[0]))
                                                       + (float)((float)((float)(v475.f32[0]
                                                                               - (float)v475.f32[0])
                                                                       * (float)((float)v1007 - *(float *)v473.i32))
                                                               * *(float *)(v1008 + 4 * v1006)))
                                               + (float)((float)((float)((float)v1006 - v475.f32[0])
                                                               * (float)(*(float *)v473.i32
                                                                       - (float)*(float *)v473.i32))
                                                       * *(float *)(v1008 + v985 + 4 * v475.f32[0])))
                                       + (float)((float)((float)(v475.f32[0] - (float)v475.f32[0])
                                                       * (float)(*(float *)v473.i32
                                                               - (float)*(float *)v473.i32))
                                               * *(float *)(v1008 + v985 + 4 * v1006)))
                               * 255.0);
        if (v1009 < 0)
        {
          v1010 = 0;
          v1011 = 0;
        }
        else
        {
          v1010 = v484;
          v1011 = v480 - 1;
          if (v483 > v1009)
          {
            v1010 = v1009 / v481;
            v1011 = v1009 % v481;
          }
          if (!v1011)
          {
            if (v1010 <= 0)
              v1011 = 0;
            else
              v1011 = v480 - 1;
            v1010 -= v1010 > 0;
          }
        }
        v1012 = 0;
        v1013 = (float)(1 << v1010);
        v1014 = v495 * (float)(1.0 / v1013);
        v1015 = v494 * (float)(1.0 / v1013);
        v1016 = (float)(v929 * 1.4142) / v1013;
        v1017 = (unint64_t *)(v482 + 144 * (v480 * v1010 + v1011));
        v1018 = v1017[11];
        v1019 = v1017[5];
        v1020.f32[0] = v1014 - (float)(v1016 * 0.5);
        *(float *)v472.i32 = (float)v1017[4] + -1.001;
        *(float *)v471.i32 = (float)v1017[6] + -1.001;
        v1021.f32[0] = v1016 * 0.70711;
        v473 = (int32x2_t)vmul_n_f32((float32x2_t)0xBF3504F300000000, v1016);
        v1022.f32[0] = v1015 - (float)(0.5 * *(float *)v473.i32);
        v1023 = *(float *)&v473.i32[1] + v1022.f32[0];
        v1022.f32[1] = v1016 * 0.70711;
        v1021.f32[1] = v1015 + (float)(0.5 * *(float *)v473.i32);
        v1021.f32[2] = *(float *)v473.i32 + v1015;
        v1021.f32[3] = v1021.f32[1];
        *(int32x2_t *)&v1022.u32[2] = v473;
        v1024 = vaddq_f32(v1021, v1022);
        v1025 = (float32x4_t)vdupq_lane_s32(v471, 0);
        v1026 = (float32x4_t)vbicq_s8(vbslq_s8((int8x16_t)vcgtq_f32(v1024, v1025), (int8x16_t)v1025, (int8x16_t)v1024), (int8x16_t)vcltzq_f32(v1024));
        v1027 = (int32x4_t)vcvtq_u32_f32(v1026);
        v1028 = v1018 + 4 * v1019 * v1027.u32[0];
        v1029 = 4 * v1019;
        v477 = (int32x2_t)vmul_n_f32((float32x2_t)0xBF3504F300000000, *(float *)v473.i32);
        v1030 = v1020.f32[0] + *(float *)&v477.i32[1];
        v1020.f32[1] = (float)(v1016 * 0.5) + v1014;
        v1020.f32[2] = v1016 + v1014;
        v1020.f32[3] = v1020.f32[1];
        v1031 = v1028 + 4 * v1019;
        v1032.f32[0] = 0.70711 * *(float *)v473.i32;
        *(int32x2_t *)&v1032.u32[2] = v477;
        v1032.f32[1] = 0.70711 * *(float *)v473.i32;
        v1033 = vaddq_f32(v1020, v1032);
        v1034 = (float32x4_t)vdupq_lane_s32(v472, 0);
        v1035 = (float32x4_t)vbicq_s8(vbslq_s8((int8x16_t)vcgtq_f32(v1033, v1034), (int8x16_t)v1034, (int8x16_t)v1033), (int8x16_t)vcltzq_f32(v1033));
        v1036 = (int32x4_t)vcvtq_u32_f32(v1035);
        v1037 = (uint32x4_t)vaddq_s32(v1036, v486);
        v1038 = vcvtq_f32_u32((uint32x4_t)v1036);
        v1039 = v1036.u32[3];
        v1040 = 4 * v1036.u32[0];
        v1041 = v1037.u32[3];
        v1042 = 4 * v1037.u32[0];
        v1043 = v1018 + 4 * v1019 * v1027.u32[1];
        v1044 = v1043 + 4 * v1019;
        v1045 = 4 * v1036.u32[1];
        v1046 = (__int32 *)(v1043 + v1045);
        v1047 = 4 * v1037.u32[1];
        v1048 = (__int32 *)(v1043 + v1047);
        v1049 = (__int32 *)(v1044 + v1045);
        v1050 = (__int32 *)(v1044 + v1047);
        v1051 = v1018 + 4 * v1019 * v1027.u32[2];
        v1052 = v1051 + 4 * v1019;
        v1053 = 4 * v1036.u32[2];
        v1054 = (__int32 *)(v1051 + v1053);
        v1055 = 4 * v1037.u32[2];
        v1056 = (__int32 *)(v1051 + v1055);
        v1057 = (__int32 *)(v1052 + v1053);
        v1058 = (__int32 *)(v1052 + v1055);
        v1059 = v1018 + 4 * v1019 * v1027.u32[3];
        v1060.i32[0] = *(_DWORD *)(v1028 + v1040);
        v1060.i32[1] = *v1046;
        v1061 = v1059 + 4 * v1019;
        v1062 = vsubq_f32(vcvtq_f32_u32(v1037), v1035);
        v1063 = vsubq_f32(vcvtq_f32_u32((uint32x4_t)vaddq_s32(v1027, v486)), v1026);
        v1064 = vmulq_f32(v1062, v1063);
        v1065 = vsubq_f32(v1035, v1038);
        v1066 = vmulq_f32(v1065, v1063);
        v1067 = vsubq_f32(v1026, vcvtq_f32_u32((uint32x4_t)v1027));
        v1068 = vmulq_f32(v1062, v1067);
        v1069 = vmulq_f32(v1065, v1067);
        v1070 = 4 * v1039;
        v1060.i32[2] = *v1054;
        v1060.i32[3] = *(_DWORD *)(v1059 + v1070);
        v476 = vmulq_f32(v1060, v1064);
        v1071 = 4 * v1041;
        v1026.i32[0] = *(_DWORD *)(v1028 + v1042);
        v1026.i32[1] = *v1048;
        v1026.i32[2] = *v1056;
        v1026.i32[3] = *(_DWORD *)(v1059 + v1071);
        v1072 = vmulq_f32(v1026, v1066);
        v478.i32[0] = *(_DWORD *)(v1031 + v1040);
        v478.i32[1] = *v1049;
        v478.i32[2] = *v1057;
        v478.i32[3] = *(_DWORD *)(v1061 + v1070);
        v1073 = vaddq_f32(vmulq_f32(v478, v1068), vaddq_f32(v476, v1072));
        v475.i32[0] = *(_DWORD *)(v1031 + v1042);
        v475.i32[1] = *v1050;
        v475.i32[2] = *v1058;
        v475.i32[3] = *(_DWORD *)(v1061 + v1071);
        v474 = (int32x2_t)vmovn_s32((int32x4_t)vcvtq_u32_f32(vmulq_f32(vaddq_f32(vmulq_f32(v475, v1069), v1073), v485)));
        *(int32x2_t *)&v1106[55] = v474;
        if (*(float *)v472.i32 >= v1030)
          v1074 = v1030;
        else
          v1074 = *(float *)v472.i32;
        if (v1030 < 0.0)
          v1074 = 0.0;
        if (*(float *)v471.i32 >= v1023)
          v1075 = v1023;
        else
          v1075 = *(float *)v471.i32;
        if (v1023 < 0.0)
          v1075 = 0.0;
        v1076 = v1075;
        v1077 = v1074 + 1;
        v1078 = v1076 + 1;
        v1079 = v1018 + 4 * v1019 * v1076;
        v1106[59] = (int)(float)((float)((float)((float)((float)((float)((float)((float)v1077 - v1074)
                                                                       * (float)((float)v1078 - v1075))
                                                               * *(float *)(v1079 + 4 * v1074))
                                                       + (float)((float)((float)(v1074 - (float)v1074)
                                                                       * (float)((float)v1078 - v1075))
                                                               * *(float *)(v1079 + 4 * v1077)))
                                               + (float)((float)((float)((float)v1077 - v1074)
                                                               * (float)(v1075 - (float)v1075))
                                                       * *(float *)(v1079 + v1029 + 4 * v1074)))
                                       + (float)((float)((float)(v1074 - (float)v1074)
                                                       * (float)(v1075 - (float)v1075))
                                               * *(float *)(v1079 + v1029 + 4 * v1077)))
                               * 255.0);
        v1080 = (float)(v1014 - v1016) + *(float *)v477.i32;
        if (*(float *)v472.i32 >= v1080)
          v1081 = v1080;
        else
          v1081 = *(float *)v472.i32;
        if (v1080 >= 0.0)
          v1082 = v1081;
        else
          v1082 = 0.0;
        v1083 = *(float *)v473.i32 + (float)(v1015 - *(float *)v473.i32);
        if (*(float *)v471.i32 >= v1083)
          v1084 = v1083;
        else
          v1084 = *(float *)v471.i32;
        if (v1083 >= 0.0)
          v1085 = v1084;
        else
          v1085 = 0.0;
        v1086 = v1082;
        v1087 = v1085;
        v1088 = v1082 + 1;
        result = (v1087 + 1);
        v1089 = v1018 + 4 * v1019 * v1087;
        v1090 = (float)v1088 - v1082;
        v1091 = (float)result - v1085;
        v1092 = v1090 * v1091;
        v1093 = v1082 - (float)v1082;
        v1094 = v1085 - (float)v1085;
        v1095 = v1090 * v1094;
        v1096 = v1093 * v1094;
        v1097 = 4 * v1088;
        v1098.f32[0] = (float)((float)(v1092 * *(float *)(v1089 + 4 * v1086))
                             + (float)((float)(v1093 * v1091) * *(float *)(v1089 + v1097)))
                     + (float)(v1095 * *(float *)(v1089 + v1029 + 4 * v1086));
        v1099.i32[0] = *(_DWORD *)(v1089 + v1029 + v1097);
        v1106[60] = (int)(float)((float)(v1098.f32[0] + (float)(v1096 * v1099.f32[0])) * 255.0);
        v490 = 0;
        do
        {
          v1098.i16[0] = v1106[*(unsigned __int16 *)&v1104[v1012] - 1];
          v1099.i16[0] = v1106[*(unsigned __int16 *)&v1104[v1012 + 2] - 1];
          v1100 = (float)v1098.u32[0] - (float)v1099.u32[0];
          v1099 = *(float32x2_t *)&v1104[v1012 + 4];
          v1098 = vmul_n_f32(v1099, v1100);
          v490 = vadd_f32(v490, v1098);
          v1012 += 12;
        }
        while (v1012 != 540);
        if (v490.f32[1] != 0.0 || (v492 = 0.0, v490.f32[0] != 0.0))
        {
          v487 = fabsf(v490.f32[1]) + 0.0000001;
          v488 = v490.f32[0] <= 0.0;
          v489 = (float)(v490.f32[0] + v487) / (float)(v487 - v490.f32[0]);
          v490.f32[0] = (float)(v490.f32[0] - v487) / (float)(v490.f32[0] + v487);
          v491 = 0.7854;
          if (v488)
          {
            v491 = 2.3562;
            v490.f32[0] = v489;
          }
          v490.f32[0] = v491
                      + (float)(v490.f32[0] * (float)((float)(v490.f32[0] * (float)(v490.f32[0] * 0.1821)) + -0.9675));
          v492 = 6.2832 - v490.f32[0];
          if (v490.f32[1] >= 0.0)
            v492 = v490.f32[0];
        }
        if (v492 >= 0.0)
          v493 = v492;
        else
          v493 = 0.0;
        if (v493 > 6.2832)
          v493 = 6.2832;
        a1[5].f32[0] = v493;
        a1 += 6;
      }
      while (a1 != a2);
    }
  }
  return result;
}

uint64_t sub_20FD5ED8C(_OWORD *a1, uint64_t a2, float a3, float a4, float a5, float a6)
{
  __float2 v11;
  int v12;
  uint64_t v13;
  int v14;
  int v15;
  int v16;
  int v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  unsigned int v37;
  uint64_t v38;
  unsigned int v39;
  uint64_t v40;
  uint64_t v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  int v51;
  float v52;
  float v53;
  float v54;
  float v55;
  float v56;
  float v57;
  unint64_t *v58;
  unint64_t v59;
  float v60;
  float v61;
  float v62;
  float v63;
  float v64;
  float v65;
  float v66;
  float v67;
  float v68;
  float v69;
  float v70;
  float v71;
  float v72;
  float v73;
  float v74;
  float v75;
  float v76;
  float v77;
  float v78;
  float v79;
  float v80;
  float v81;
  float v82;
  float v83;
  float v84;
  float v85;
  float v86;
  float v87;
  float v88;
  float v89;
  float v90;
  float v91;
  float v92;
  float v93;
  float v94;
  float v95;
  float v96;
  float v97;
  float v98;
  float v99;
  float v100;
  float v101;
  float v102;
  float v103;
  float v104;
  float v105;
  float v106;
  float v107;
  float v108;
  float v109;
  float v110;
  float v111;
  float v112;
  int v113;
  float v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  int v121;
  int v122;
  float cosval;
  float v124;
  float v125;
  float v126;
  float v127;
  float v128;
  float v129;
  float v130;
  float v131;
  float v132;
  unint64_t *v133;
  unint64_t v134;
  float v135;
  float v136;
  float v137;
  float v138;
  float v139;
  float v140;
  float v141;
  float v142;
  float v143;
  float v144;
  float v145;
  float v146;
  float v147;
  float v148;
  float v149;
  float v150;
  float v151;
  float v152;
  float v153;
  float v154;
  float v155;
  float v156;
  float v157;
  float v158;
  float v159;
  float v160;
  float v161;
  float v162;
  float v163;
  float v164;
  float v165;
  float v166;
  float v167;
  float v168;
  float v169;
  float v170;
  float v171;
  float v172;
  float v173;
  float v174;
  float v175;
  float v176;
  float v177;
  float v178;
  float v179;
  int v180;
  unint64_t v181;
  float v182;
  float v183;
  unsigned int v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  unint64_t v188;
  float v189;
  int v190;
  int v191;
  float v192;
  float v193;
  float v194;
  float sinval;
  float v196;
  float v197;
  float v198;
  float v199;
  float v200;
  float v201;
  float v202;
  unint64_t *v203;
  unint64_t v204;
  float v205;
  float v206;
  float v207;
  float v208;
  float v209;
  float v210;
  float v211;
  float v212;
  float v213;
  float v214;
  float v215;
  float v216;
  float v217;
  float v218;
  float v219;
  float v220;
  float v221;
  float v222;
  float v223;
  float v224;
  float v225;
  float v226;
  float v227;
  float v228;
  float v229;
  float v230;
  float v231;
  float v232;
  float v233;
  float v234;
  float v235;
  float v236;
  float v237;
  float v238;
  float v239;
  float v240;
  float v241;
  float v242;
  float v243;
  float v244;
  float v245;
  float v246;
  float v247;
  float v248;
  float v249;
  float v250;
  float v251;
  float v252;
  int v253;
  float v254;
  unint64_t v255;
  unint64_t v256;
  unint64_t v257;
  unint64_t v258;
  unint64_t v259;
  unint64_t v260;
  unint64_t v261;
  unint64_t v262;
  unint64_t v263;
  int v264;
  int v265;
  float v266;
  float v267;
  float v268;
  float v269;
  float v270;
  float v271;
  unint64_t *v272;
  unint64_t v273;
  float v274;
  float v275;
  float v276;
  float v277;
  float v278;
  float v279;
  float v280;
  float v281;
  float v282;
  float v283;
  float v284;
  float v285;
  float v286;
  float v287;
  float v288;
  float v289;
  float v290;
  float v291;
  float v292;
  float v293;
  float v294;
  float v295;
  float v296;
  float v297;
  float v298;
  float v299;
  float v300;
  float v301;
  float v302;
  float v303;
  float v304;
  unint64_t v305;
  float v306;
  float v307;
  float v308;
  unint64_t v309;
  unint64_t v310;
  unint64_t v311;
  float v312;
  float v313;
  float v314;
  float v315;
  float v316;
  float v317;
  float v318;
  float v319;
  float v320;
  float v321;
  float v322;
  float v323;
  float v324;
  uint64_t v325;
  uint64_t v326;
  uint64_t v327;
  uint64_t v328;
  int v329;
  int v330;
  int v331;
  int v332;
  uint64_t v333;
  uint64_t v334;
  unsigned int v335;
  unsigned int v336;
  unsigned int v337;
  unsigned int v338;
  unsigned int v339;
  unsigned int v340;
  unsigned int v341;
  float v342;
  float v343;
  float v344;
  float v345;
  float v346;
  unint64_t *v347;
  unint64_t v348;
  float v349;
  float v350;
  float v351;
  float v352;
  float v353;
  float v354;
  float v355;
  float v356;
  float v357;
  float v358;
  float v359;
  float v360;
  float v361;
  float v362;
  float v363;
  float v364;
  float v365;
  float v366;
  float v367;
  float v368;
  float v369;
  float v370;
  float v371;
  float v372;
  float v373;
  float v374;
  float v375;
  float v376;
  float v377;
  float v378;
  float v379;
  float v380;
  float v381;
  float v382;
  float v383;
  float v384;
  float v385;
  float v386;
  float v387;
  float v388;
  float v389;
  float v390;
  float v391;
  float v392;
  float v393;
  float v394;
  float v395;
  float v396;
  float v397;
  float v398;
  unint64_t v399;
  unint64_t v400;
  unint64_t v401;
  int v402;
  uint64_t v403;
  int v404;
  int v405;
  float v406;
  float v407;
  float v408;
  uint64_t v409;
  uint64_t v410;
  float v411;
  unint64_t v412;
  uint64_t v413;
  unint64_t v414;
  uint64_t v415;
  unint64_t v416;
  unint64_t v417;
  float v418;
  unint64_t *v419;
  float v420;
  float v421;
  float v422;
  float v423;
  float v424;
  float v425;
  float v426;
  float v427;
  float v428;
  float v429;
  float v430;
  float v431;
  float v432;
  float v433;
  float v434;
  float v435;
  float v436;
  float v437;
  float v438;
  float v439;
  float v440;
  float v441;
  float v442;
  float v443;
  float v444;
  float v445;
  float v446;
  float v447;
  float v448;
  float v449;
  float v450;
  float v451;
  float v452;
  float v453;
  float v454;
  float v455;
  float v456;
  float v457;
  BOOL v458;
  float v459;
  float v460;
  float v461;
  float v462;
  float v463;
  float v464;
  float v465;
  float v466;
  float v467;
  float v468;
  float v469;
  float v470;
  float v471;
  float v472;
  float v473;
  float v474;
  float v475;
  unint64_t v476;
  unint64_t v477;
  unint64_t v478;
  unint64_t v479;
  unint64_t v480;
  unint64_t v481;
  unint64_t v482;
  unsigned int v483;
  float v484;
  unint64_t v485;
  uint64_t v486;
  unint64_t v487;
  unint64_t v488;
  unint64_t v489;
  unint64_t v490;
  unint64_t v491;
  uint64_t v492;
  uint64_t v493;
  uint64_t v494;
  uint64_t v495;
  uint64_t v496;
  uint64_t v497;
  uint64_t v498;
  uint64_t v499;
  uint64_t v500;
  uint64_t v501;
  uint64_t v502;
  uint64_t v503;
  float v504;
  float v505;
  float v506;
  float v507;
  float v508;
  float v509;
  float v510;
  float v511;
  float v512;
  float v513;
  float v514;
  float v515;
  float v516;
  float v517;
  float v518;
  float v519;
  float v520;
  float v521;
  float v522;
  float v523;
  float v524;
  float v525;
  float v526;
  float v527;
  int v528;
  int v529;
  unsigned int v530;
  unsigned int v531;
  unsigned int v532;
  unsigned int v533;
  unsigned int v534;
  unsigned int v535;
  unsigned int v536;
  unsigned int v537;
  unsigned int v538;
  unsigned int v539;
  unsigned int v540;
  unsigned int v541;
  unsigned int v542;
  unsigned int v543;
  unsigned int v544;
  unsigned int v545;
  unsigned int v546;
  unsigned int v547;
  unsigned int v548;
  unsigned int v549;
  unsigned int v550;
  unsigned int v551;
  unsigned int v552;
  float v553;
  float v554;
  float v555;
  float v556;
  float v557;
  unsigned int v558;
  unsigned int v559;
  unsigned int v560;
  unsigned int v561;
  unsigned int v562;
  unsigned int v563;
  unsigned int v564;
  unsigned int v565;
  unsigned int v566;
  unsigned int v567;
  unsigned int v568;
  unsigned int v569;
  unsigned int v570;
  float v571;
  unsigned int v572;
  unsigned int v573;
  float v574;
  float v575;
  float v576;
  float v577;
  unint64_t *v578;
  float v579;
  float v580;
  float v581;
  float v582;
  float v583;
  float v584;
  float v585;
  float v586;
  float v587;
  float v588;
  float v589;
  float v590;
  float v591;
  float v592;
  unsigned int v593;
  unsigned int v594;
  float v595;
  float v596;
  uint64_t v597;
  float v598;
  unint64_t v599;
  unint64_t v600;
  unint64_t v601;
  uint64_t v602;
  float v603;
  float v604;
  float v605;
  float v606;
  float v607;
  float v608;
  float v609;
  float v610;
  unsigned int v611;
  unsigned int v612;
  float v613;
  float v614;
  uint64_t v615;
  float v616;
  unint64_t v617;
  float v618;
  float v619;
  float v620;
  float v621;
  float v622;
  float v623;
  float v624;
  unsigned int v625;
  float v626;
  float v627;
  float v628;
  uint64_t v629;
  float v630;
  unint64_t v631;
  float v632;
  float v633;
  float v634;
  float v635;
  float v636;
  float v637;
  float v638;
  float v639;
  float v640;
  uint64_t v641;
  unsigned int v642;
  float v643;
  unint64_t v644;
  float v645;
  float v646;
  float v647;
  float v648;
  float v649;
  unsigned int v650;
  float v651;
  float v652;
  float v653;
  uint64_t v654;
  float v655;
  unint64_t v656;
  float v657;
  float v658;
  float v659;
  float v660;
  float v661;
  float v662;
  float v663;
  uint64_t v664;
  unint64_t v665;
  float v666;
  float v667;
  float v668;
  unsigned int v669;
  unsigned int v670;
  unsigned int v671;
  unsigned int v672;
  unsigned int v673;
  unsigned int v674;
  unsigned int v675;
  unsigned int v676;
  unsigned int v677;
  unsigned int v678;
  unsigned int v679;
  unsigned int v680;
  uint64_t result;
  uint64_t v682;
  uint64_t v683;
  uint64_t v684;
  uint64_t v685;
  unsigned int v686;
  unsigned int v687;
  unsigned int v688;
  unsigned int v689;
  unsigned int v690;
  unsigned int v691;
  unsigned int v692;
  unsigned int v693;
  unsigned int v694;
  uint64_t v695;
  uint64_t v696;
  uint64_t v697;
  unsigned int v698;
  unsigned int v699;
  unint64_t v700;
  uint64_t v701;
  unsigned int v702;
  unsigned int v703;
  int v704;
  uint64_t v705;
  unsigned int v706;
  unsigned int v707;
  uint64_t v708;
  uint64_t v709;
  unsigned int v710;
  unsigned int v711;
  uint64_t v712;
  uint64_t v713;
  float v714;
  float v715;
  float v716;
  float v717;
  float v718;
  float v719;
  float v720;
  uint64_t v721;
  float v722;
  float v723;
  float v724;
  float v725;
  float v726;
  float v727;
  float v728;
  float v729;
  float v730;
  float v731;
  float v732;
  float v733;
  float v734;
  float v735;
  float v736;
  float v737;
  float v738;
  float v739;
  uint64_t v740;
  uint64_t v741;
  uint64_t v742;
  uint64_t v743;
  uint64_t v744;
  uint64_t v745;
  uint64_t v746;
  uint64_t v747;
  float v748;
  float v749;
  unint64_t v750;
  float v751;
  float v752;
  unint64_t v753;
  float v754;
  unint64_t v755;
  float v756;
  float v757;
  unint64_t v758;
  float v759;
  unint64_t v760;
  float v761;
  unint64_t v762;
  float v763;
  unint64_t v764;
  float v765;
  unint64_t v766;
  float v767;
  unint64_t v768;
  float v769;
  unint64_t v770;
  float v771;
  unint64_t v772;
  float v773;
  unint64_t v774;
  unint64_t v775;
  unint64_t v776;
  unint64_t v777;
  unint64_t v778;
  float v779;
  unint64_t v780;
  float v781;
  unint64_t v782;
  unint64_t v783;
  float v784;
  unint64_t v785;
  unint64_t v786;
  float v787;
  unint64_t v788;
  float v789;
  unint64_t v790;
  float v791;
  float v792;
  unsigned int v793;
  unint64_t v794;
  float v795;
  unsigned int v796;
  float v797;
  float v798;
  float v799;
  unsigned int v800;
  float v801;
  unsigned int v802;
  float v803;
  float v804;
  unint64_t v805;
  float v806;
  unsigned int v807;
  unsigned int v808;
  float v809;
  uint64_t v810;
  unint64_t v811;
  float v812;
  unsigned int v813;
  float v814;
  unsigned int v815;
  float v816;
  unint64_t v817;
  float v818;
  uint64_t v819;
  unint64_t v820;
  float v821;
  unsigned int v822;
  unsigned int v823;
  float v824;
  float v825;
  float v826;
  float v827;
  float v828;
  uint64_t v829;
  unsigned int v830;
  unint64_t v831;
  float v832;
  unsigned int v833;
  float v834;
  float v835;
  float v836;
  unint64_t v837;
  float v838;
  float v839;
  float v840;
  unint64_t v841;
  float v842;
  float v843;
  float v844;
  uint64_t v845;
  float v846;
  float v847;
  float v848;
  float v849;
  float v850;
  float v851;
  float v852;
  float v853;
  float v854;
  float v855;
  float v856;
  float v857;
  float v858;
  unint64_t v859;
  float v860;
  float v861;
  float v862;
  float v863;
  float v864;
  float v865;
  float v866;
  unsigned int v867;
  float v868;
  float v869;
  unsigned int v870;
  unsigned int v871;
  float v872;
  float v873;
  float v874;
  float v875;
  unsigned int v876;
  float v877;
  float v878;
  float v879;
  float v880;
  unsigned int v881;
  unsigned int v882;
  float v883;
  float v884;
  unsigned int v885;
  float v886;
  float v887;
  float v888;
  float v889;
  float v890;
  float v891;
  float v892;
  float v893;
  float v894;
  float v895;
  float v896;
  float v897;
  float v898;
  float v899;
  float v900;
  float v901;
  float v902;
  float v903;
  unsigned int v904;
  float v905;
  float v906;
  unsigned int v907;
  float v908;
  float v909;
  float v910;
  float v911;
  float v912;
  float v913;
  float v914;
  float v915;
  float v916;
  float v917;
  float v918;
  float v919;
  float v920;
  float v921;
  float v922;
  float v923;
  _OWORD *v924;
  unsigned int v925;
  unint64_t v926;
  float v927;
  unint64_t v928;
  float v929;
  unint64_t v930;
  float v931;
  unint64_t v932;
  float v933;
  unint64_t v934;
  float v935;
  unint64_t v936;
  float v937;
  unint64_t v938;
  float v939;
  unint64_t v940;
  float v941;
  unint64_t v942;
  float v943;
  unint64_t v944;
  float v945;
  unint64_t v946;
  float v947;
  unint64_t v948;
  unint64_t v949;
  float v950;
  float v951;
  unint64_t v952;
  float v953;
  unint64_t v954;
  unint64_t v955;
  unint64_t v956;
  unint64_t v957;
  float v958;
  unint64_t v959;
  float v960;
  unint64_t v961;
  float v962;
  unint64_t v963;
  float v964;
  unint64_t v965;
  float v966;
  unsigned int v967;
  unsigned int v968;
  unsigned int v969;
  unsigned int v970;
  unsigned int v971;
  unsigned int v972;
  unsigned int v973;
  unsigned int v974;
  unsigned int v975;
  unsigned int v976;
  unsigned int v977;
  unsigned int v978;
  unsigned int v979;
  unsigned int v980;
  unsigned int v981;
  unsigned int v982;
  unsigned int v983;
  char v984;
  unsigned int v985;
  unsigned int v986;
  unsigned int v987;
  unsigned int v988;
  unsigned int v989;
  BOOL v990;
  unsigned int v991;
  unsigned int v992;
  unsigned int v993;
  unsigned int v994;
  unsigned int v995;
  unsigned int v996;
  BOOL v997;
  unsigned int v998;
  BOOL v999;
  unsigned int v1000;
  unsigned int v1001;
  unsigned int v1002;
  unsigned int v1003;
  unsigned int v1004;
  unsigned int v1005;
  unsigned int v1006;
  uint64_t v1007;
  unsigned int v1008;
  unsigned int v1009;
  uint64_t v1010;
  unsigned int v1011;
  uint64_t v1012;
  unsigned int v1013;
  float v1014;
  float v1015;
  float v1016;
  float v1017;
  unsigned int v1018;
  float v1019;
  unsigned int v1020;
  float v1021;
  unsigned int v1022;
  int v1023;
  float v1024;
  float v1025;
  float v1026;
  float v1027;
  float v1028;
  unsigned int v1029;
  unsigned int v1030;
  unsigned int v1031;
  unsigned int v1032;
  unsigned int v1033;
  unsigned int v1034;
  unsigned int v1035;
  unsigned int v1036;
  int v1037;
  unsigned int v1038;
  float v1039;
  unsigned int v1040;
  float v1041;
  uint64_t v1042;
  uint64_t v1043;
  unsigned int v1044;

  a1[2] = 0u;
  a1[3] = 0u;
  *a1 = 0u;
  a1[1] = 0u;
  v11 = __sincosf_stret(a5);
  v12 = *(_DWORD *)(a2 + 24);
  v13 = *(_QWORD *)(a2 + 32);
  v14 = v13 - 1;
  v15 = vcvtms_s32_f32((float)((float)((float)((float)((float)((float)((float)(COERCE_FLOAT(LODWORD(a6) & 0x807FFFFF | 0x3F800000)* -0.33333)+ 2.0)* COERCE_FLOAT(LODWORD(a6) & 0x807FFFFF | 0x3F800000))+ -1.6667)+ (float)((LODWORD(a6) >> 23) - 127))* 0.69315)- *(float *)(a2 + 112))* *(float *)(a2 + 108));
  if (v15 < 0)
  {
    v16 = 0;
    v17 = 0;
    goto LABEL_11;
  }
  if (v14 * v12 <= v15)
  {
    v16 = v12 - 1;
    v17 = v13 - 1;
    if ((_DWORD)v13 != 1)
      goto LABEL_11;
  }
  else
  {
    v16 = v15 / v14;
    v17 = v15 % v14;
    if (v15 % v14)
      goto LABEL_11;
  }
  if (v16 <= 0)
    v17 = 0;
  else
    v17 = v13 - 1;
  v16 -= v16 > 0;
LABEL_11:
  v18 = a6 + a6;
  v19 = -v11.__sinval;
  v20 = 1.0 / (float)(1 << v16);
  v21 = v20 * a3;
  v22 = v20 * a4;
  v23 = *(_QWORD *)(a2 + 56);
  v24 = (_QWORD *)(v23 + 144 * (v13 * v16 + v17));
  v25 = v24[11];
  v27 = v24[4];
  v26 = v24[5];
  v28 = v24[6];
  v29 = (float)(v11.__cosval * 0.0) * 0.0;
  v30 = (float)(v11.__sinval * 0.0) * 0.0;
  v31 = (float)(v29 + v21) - v30;
  v32 = (float)v27 + -1.001;
  if (v32 >= v31)
    v32 = v31;
  if (v31 >= 0.0)
    v33 = v32;
  else
    v33 = 0.0;
  v34 = v29 + (float)(v30 + v22);
  v35 = (float)v28 + -1.001;
  if (v35 >= v34)
    v35 = v34;
  if (v34 >= 0.0)
    v36 = v35;
  else
    v36 = 0.0;
  v37 = v33;
  v38 = v36;
  v39 = v38 + 1;
  v40 = v25 + 4 * v26 * v38;
  v41 = v40 + 4 * v26;
  v42 = (float)(v33 + 1) - v33;
  v43 = (float)v39 - v36;
  v44 = v42 * v43;
  v45 = v33 - (float)v33;
  v46 = v45 * v43;
  v47 = v36 - (float)v36;
  v48 = 4 * v37;
  v49 = 4 * (v37 + 1);
  v1025 = *(float *)(a2 + 108);
  v1027 = *(float *)(a2 + 112);
  if (v15 < 0)
  {
    v51 = 0;
    v50 = 0;
    goto LABEL_31;
  }
  if (v14 * v12 <= v15)
  {
    v50 = v12 - 1;
    v51 = v13 - 1;
    if ((_DWORD)v13 != 1)
      goto LABEL_31;
  }
  else
  {
    v50 = v15 / v14;
    v51 = v15 % v14;
    if (v51)
      goto LABEL_31;
  }
  if (v50 <= 0)
    v51 = 0;
  else
    v51 = v13 - 1;
  v50 -= v50 > 0;
LABEL_31:
  v52 = *(float *)(v40 + v48) * v44;
  v53 = *(float *)(v40 + v49) * v46;
  v54 = (float)(1 << v50);
  v55 = (float)(1.0 / v54) * a3;
  v56 = (float)(1.0 / v54) * a4;
  v57 = v18 / v54;
  v58 = (unint64_t *)(v23 + 144 * (v13 * v50 + v51));
  v59 = v58[6];
  v60 = v11.__cosval * (float)(v18 / v54);
  v61 = v55 - (float)(v60 * 0.5);
  v62 = v57 * v19;
  v63 = (float)(v57 * v19) * 0.70711;
  v64 = (float)v58[4] + -1.001;
  if (v64 >= (float)(v63 + v61))
    v65 = v63 + v61;
  else
    v65 = (float)v58[4] + -1.001;
  if ((float)(v63 + v61) >= 0.0)
    v66 = v65;
  else
    v66 = 0.0;
  v1021 = v66;
  v67 = v11.__sinval * v57;
  v68 = v67 * 0.5;
  v69 = v56 - (float)(v67 * 0.5);
  v70 = (float)(v60 * 0.70711) + v69;
  v71 = (float)v59 + -1.001;
  if (v71 >= v70)
    v72 = (float)(v60 * 0.70711) + v69;
  else
    v72 = (float)v59 + -1.001;
  if (v70 >= 0.0)
    v73 = v72;
  else
    v73 = 0.0;
  v74 = v55 + (float)(v60 * 0.5);
  v75 = v63 + v74;
  if (v64 >= v75)
    v76 = v75;
  else
    v76 = (float)v58[4] + -1.001;
  if (v75 >= 0.0)
    v77 = v76;
  else
    v77 = 0.0;
  v78 = v56 + v68;
  v79 = (float)(v60 * 0.70711) + (float)(v56 + v68);
  if (v71 >= v79)
    v80 = v79;
  else
    v80 = (float)v59 + -1.001;
  if (v79 >= 0.0)
    v81 = v80;
  else
    v81 = 0.0;
  v82 = v62 * 0.0;
  v83 = (float)(v60 + v55) + (float)(v62 * 0.0);
  if (v64 >= v83)
    v84 = (float)(v60 + v55) + (float)(v62 * 0.0);
  else
    v84 = (float)v58[4] + -1.001;
  if (v83 >= 0.0)
    v85 = v84;
  else
    v85 = 0.0;
  v1017 = v85;
  v1019 = v77;
  v86 = v60 * 0.0;
  v87 = (float)(v67 + v56) + (float)(v60 * 0.0);
  if (v71 >= v87)
    v88 = (float)(v67 + v56) + (float)(v60 * 0.0);
  else
    v88 = (float)v59 + -1.001;
  if (v87 >= 0.0)
    v89 = v88;
  else
    v89 = 0.0;
  v90 = v62 * -0.70711;
  v91 = v90 + v74;
  if (v64 >= v91)
    v92 = v91;
  else
    v92 = (float)v58[4] + -1.001;
  if (v91 >= 0.0)
    v93 = v92;
  else
    v93 = 0.0;
  v1016 = v93;
  v94 = v60 * -0.70711;
  v95 = (float)(v60 * -0.70711) + v78;
  if (v71 >= v95)
    v96 = v95;
  else
    v96 = (float)v59 + -1.001;
  if (v95 >= 0.0)
    v97 = v96;
  else
    v97 = 0.0;
  v98 = v90 + v61;
  if (v64 >= v98)
    v99 = v98;
  else
    v99 = (float)v58[4] + -1.001;
  if (v98 >= 0.0)
    v100 = v99;
  else
    v100 = 0.0;
  v1015 = v100;
  v101 = v94 + v69;
  if (v71 >= (float)(v94 + v69))
    v102 = v94 + v69;
  else
    v102 = (float)v59 + -1.001;
  v103 = (float)(v55 - v60) + v82;
  if (v101 >= 0.0)
    v104 = v102;
  else
    v104 = 0.0;
  if (v64 >= v103)
    v105 = v103;
  else
    v105 = (float)v58[4] + -1.001;
  if (v103 >= 0.0)
    v106 = v105;
  else
    v106 = 0.0;
  v1014 = v106;
  v107 = (float)(v56 - v67) + v86;
  if (v71 >= v107)
    v108 = v107;
  else
    v108 = (float)v59 + -1.001;
  if (v107 >= 0.0)
    v109 = v108;
  else
    v109 = 0.0;
  v110 = v18 * 1.4142;
  v111 = a6 * 1.4142;
  v112 = v42 * v47;
  v113 = vcvtms_s32_f32((float)((float)((float)((float)((float)((float)((float)(COERCE_FLOAT(COERCE_UNSIGNED_INT(a6 * 1.4142) & 0x807FFFFF | 0x3F800000)* -0.33333)+ 2.0)* COERCE_FLOAT(COERCE_UNSIGNED_INT(a6 * 1.4142) & 0x807FFFFF | 0x3F800000))+ -1.6667)+ (float)((COERCE_UNSIGNED_INT(a6 * 1.4142) >> 23) - 127))* 0.69315)- v1027)* v1025);
  v114 = *(float *)(v41 + v48);
  v115 = v73;
  v920 = v81;
  v116 = v81;
  v919 = v89;
  v117 = v89;
  v118 = v97;
  v119 = v104;
  v120 = v109;
  v1037 = v13 - 1;
  v921 = v73;
  v918 = v97;
  v917 = v104;
  v916 = v109;
  if (v113 < 0)
  {
    cosval = v11.__cosval;
    v122 = 0;
    v121 = 0;
    goto LABEL_113;
  }
  if (v14 * v12 <= v113)
  {
    v121 = v12 - 1;
    v122 = v13 - 1;
    cosval = v11.__cosval;
    if ((_DWORD)v13 != 1)
      goto LABEL_113;
  }
  else
  {
    v121 = v113 / v14;
    v122 = v113 % v14;
    cosval = v11.__cosval;
    if (v122)
      goto LABEL_113;
  }
  if (v121 <= 0)
    v122 = 0;
  else
    v122 = v13 - 1;
  v121 -= v121 > 0;
LABEL_113:
  v124 = v45 * v47;
  v125 = v52 + v53;
  v126 = v114 * v112;
  v127 = (float)(1 << v121);
  v128 = a3;
  v129 = (float)(1.0 / v127) * a3;
  v130 = a4;
  v131 = (float)(1.0 / v127) * a4;
  v132 = v110 / v127;
  v133 = (unint64_t *)(v23 + 144 * (v13 * v121 + v122));
  v134 = v133[6];
  v135 = cosval * (float)(v110 / v127);
  v136 = v129 + (float)(v135 * 0.0);
  v1041 = -v11.__sinval;
  v137 = (float)(v110 / v127) * v19;
  v138 = (float)v133[4] + -1.001;
  if (v138 >= (float)(v136 - v137))
    v139 = v136 - (float)(v132 * v19);
  else
    v139 = (float)v133[4] + -1.001;
  if ((float)(v136 - v137) >= 0.0)
    v140 = v139;
  else
    v140 = 0.0;
  v141 = v11.__sinval * v132;
  v142 = v131 + (float)((float)(v11.__sinval * v132) * 0.0);
  v143 = (float)v134 + -1.001;
  if (v143 >= (float)(v142 - v135))
    v144 = v142 - v135;
  else
    v144 = (float)v134 + -1.001;
  if ((float)(v142 - v135) >= 0.0)
    v145 = v144;
  else
    v145 = 0.0;
  v146 = v135 * 0.70711;
  v147 = v129 + (float)(v135 * 0.70711);
  v148 = v137 * 0.5;
  v149 = (float)(v137 * 0.5) + v147;
  if (v138 >= v149)
    v150 = (float)(v137 * 0.5) + v147;
  else
    v150 = (float)v133[4] + -1.001;
  if (v149 >= 0.0)
    v151 = v150;
  else
    v151 = 0.0;
  v152 = v141 * 0.70711;
  v153 = v135 * 0.5;
  v154 = (float)(v135 * 0.5) + (float)(v131 + v152);
  if (v143 >= v154)
    v155 = (float)(v135 * 0.5) + (float)(v131 + v152);
  else
    v155 = (float)v134 + -1.001;
  if (v154 >= 0.0)
    v156 = v155;
  else
    v156 = 0.0;
  v157 = v137 * -0.5;
  v158 = (float)(v137 * -0.5) + v147;
  if (v138 >= v158)
    v159 = v158;
  else
    v159 = (float)v133[4] + -1.001;
  if (v158 < 0.0)
    v159 = 0.0;
  v160 = v135 * -0.5;
  v161 = (float)(v135 * -0.5) + (float)(v131 + v152);
  if (v143 >= v161)
    v162 = (float)(v135 * -0.5) + (float)(v131 + v152);
  else
    v162 = (float)v134 + -1.001;
  if (v161 >= 0.0)
    v163 = v162;
  else
    v163 = 0.0;
  v164 = v137 + v136;
  if (v138 >= v164)
    v165 = v164;
  else
    v165 = (float)v133[4] + -1.001;
  if (v164 < 0.0)
    v165 = 0.0;
  v166 = v135 + v142;
  if (v143 >= v166)
    v167 = v166;
  else
    v167 = (float)v134 + -1.001;
  if (v166 >= 0.0)
    v168 = v167;
  else
    v168 = 0.0;
  v169 = v129 - v146;
  if (v138 >= (float)(v157 + v169))
    v170 = v157 + v169;
  else
    v170 = (float)v133[4] + -1.001;
  if ((float)(v157 + v169) >= 0.0)
    v171 = v170;
  else
    v171 = 0.0;
  v172 = v131 - v152;
  if (v143 >= (float)(v160 + v172))
    v173 = v160 + v172;
  else
    v173 = (float)v134 + -1.001;
  v174 = v148 + v169;
  if ((float)(v160 + v172) >= 0.0)
    v175 = v173;
  else
    v175 = 0.0;
  if (v138 >= v174)
    v138 = v174;
  if (v174 >= 0.0)
    v176 = v138;
  else
    v176 = 0.0;
  v177 = v153 + v172;
  if (v143 >= v177)
    v178 = v177;
  else
    v178 = (float)v134 + -1.001;
  v179 = v111 * 1.4142;
  v180 = vcvtms_s32_f32((float)((float)((float)((float)((float)((float)((float)(COERCE_FLOAT(COERCE_UNSIGNED_INT(v111 * 1.4142) & 0x807FFFFF | 0x3F800000)* -0.33333)+ 2.0)* COERCE_FLOAT(COERCE_UNSIGNED_INT(v111 * 1.4142) & 0x807FFFFF | 0x3F800000))+ -1.6667)+ (float)((COERCE_UNSIGNED_INT(v111 * 1.4142) >> 23) - 127))* 0.69315)- v1027)* v1025);
  v181 = v133[5];
  v182 = v110 * 1.4142;
  v183 = *(float *)(v41 + v49);
  v915 = v140;
  v184 = v140;
  v914 = v145;
  v185 = v145;
  v913 = v151;
  v1035 = v151;
  v912 = v156;
  v186 = v156;
  v1034 = v159;
  v187 = v163;
  v1032 = v165;
  v1012 = v168;
  v1031 = v171;
  v1010 = v175;
  v188 = v58[5];
  if (v177 >= 0.0)
    v189 = v178;
  else
    v189 = 0.0;
  v1030 = v176;
  v1007 = v189;
  v1023 = *(_DWORD *)(a2 + 24);
  v924 = a1;
  v911 = v159;
  v910 = v163;
  v909 = v165;
  v908 = v168;
  v906 = v171;
  v905 = v175;
  v903 = v176;
  v902 = v189;
  if (v180 < 0)
  {
    v191 = 0;
    v190 = 0;
    v192 = -v11.__sinval;
    v193 = v130;
    v194 = v128;
    sinval = v11.__sinval;
    v196 = 1.0;
    goto LABEL_191;
  }
  v190 = v13 - 1;
  if (v14 * v12 <= v180)
  {
    v191 = v12 - 1;
    v192 = -v11.__sinval;
    v193 = v130;
    v194 = v128;
    sinval = v11.__sinval;
    v196 = 1.0;
    if ((_DWORD)v13 != 1)
      goto LABEL_191;
  }
  else
  {
    v191 = v180 / v14;
    v190 = v180 % v14;
    v192 = -v11.__sinval;
    v193 = v130;
    v194 = v128;
    sinval = v11.__sinval;
    v196 = 1.0;
    if (v180 % v14)
      goto LABEL_191;
  }
  v190 = v13 - 1;
  if (v191 <= 0)
    v190 = 0;
  v191 -= v191 > 0;
LABEL_191:
  v197 = v126 + v125;
  v198 = (float)(1 << v191);
  v199 = v183 * v124;
  v200 = (float)(v196 / v198) * v194;
  v1039 = v193;
  v201 = (float)(v196 / v198) * v193;
  v202 = v182 / v198;
  v1042 = *(_QWORD *)(a2 + 56);
  v1043 = *(_QWORD *)(a2 + 32);
  v203 = (unint64_t *)(v23 + 144 * (v13 * v191 + v190));
  v205 = cosval * (float)(v182 / v198);
  v206 = v200 - (float)(v205 * 0.5);
  v207 = v202 * v192;
  v208 = (float)(v202 * v192) * 0.70711;
  v209 = (float)v203[4] + -1.001;
  if (v209 >= (float)(v208 + v206))
    v210 = v208 + v206;
  else
    v210 = (float)v203[4] + -1.001;
  if ((float)(v208 + v206) >= 0.0)
    v211 = v210;
  else
    v211 = 0.0;
  v212 = sinval * v202;
  v213 = v212 * 0.5;
  v214 = v201 - (float)(v212 * 0.5);
  v215 = v205 * 0.70711;
  v204 = v203[6];
  v216 = (float)v204 + -1.001;
  if (v216 >= (float)((float)(v205 * 0.70711) + v214))
    v217 = v215 + v214;
  else
    v217 = (float)v204 + -1.001;
  if ((float)((float)(v205 * 0.70711) + v214) >= 0.0)
    v218 = v217;
  else
    v218 = 0.0;
  v219 = v200 + (float)(v205 * 0.5);
  v220 = v208 + v219;
  if (v209 >= v220)
    v221 = v220;
  else
    v221 = (float)v203[4] + -1.001;
  if (v220 >= 0.0)
    v222 = v221;
  else
    v222 = 0.0;
  v223 = v201 + v213;
  v224 = v215 + (float)(v201 + v213);
  if (v216 >= v224)
    v225 = v215 + (float)(v201 + v213);
  else
    v225 = (float)v204 + -1.001;
  if (v224 >= 0.0)
    v226 = v225;
  else
    v226 = 0.0;
  v227 = v207 * 0.0;
  v228 = (float)(v205 + v200) + (float)(v207 * 0.0);
  if (v209 >= v228)
    v229 = (float)(v205 + v200) + (float)(v207 * 0.0);
  else
    v229 = (float)v203[4] + -1.001;
  if (v228 >= 0.0)
    v230 = v229;
  else
    v230 = 0.0;
  v231 = v205 * 0.0;
  v232 = (float)(v212 + v201) + (float)(v205 * 0.0);
  if (v216 >= v232)
    v233 = (float)(v212 + v201) + (float)(v205 * 0.0);
  else
    v233 = (float)v204 + -1.001;
  if (v232 >= 0.0)
    v234 = v233;
  else
    v234 = 0.0;
  v235 = v207 * -0.70711;
  v236 = v235 + v219;
  if (v209 >= v236)
    v237 = v236;
  else
    v237 = (float)v203[4] + -1.001;
  if (v236 < 0.0)
    v237 = 0.0;
  v238 = v205 * -0.70711;
  v239 = (float)(v205 * -0.70711) + v223;
  if (v216 >= v239)
    v240 = v239;
  else
    v240 = (float)v204 + -1.001;
  if (v239 >= 0.0)
    v241 = v240;
  else
    v241 = 0.0;
  v242 = v235 + v206;
  if (v209 >= v242)
    v243 = v242;
  else
    v243 = (float)v203[4] + -1.001;
  if (v242 < 0.0)
    v243 = 0.0;
  v244 = v238 + v214;
  if (v216 >= (float)(v238 + v214))
    v245 = v238 + v214;
  else
    v245 = (float)v204 + -1.001;
  v246 = (float)(v200 - v205) + v227;
  if (v244 >= 0.0)
    v247 = v245;
  else
    v247 = 0.0;
  if (v209 >= v246)
    v248 = v246;
  else
    v248 = (float)v203[4] + -1.001;
  if (v246 >= 0.0)
    v249 = v248;
  else
    v249 = 0.0;
  v250 = (float)(v201 - v212) + v231;
  if (v216 >= v250)
    v251 = v250;
  else
    v251 = (float)v204 + -1.001;
  if (v250 >= 0.0)
    v252 = v251;
  else
    v252 = 0.0;
  v253 = vcvtms_s32_f32((float)((float)((float)((float)((float)((float)((float)(COERCE_FLOAT(COERCE_UNSIGNED_INT(v179 * 1.4142) & 0x807FFFFF | 0x3F800000)* -0.33333)+ 2.0)* COERCE_FLOAT(COERCE_UNSIGNED_INT(v179 * 1.4142) & 0x807FFFFF | 0x3F800000))+ -1.6667)+ (float)((COERCE_UNSIGNED_INT(v179 * 1.4142) >> 23) - 127))* 0.69315)- v1027)* v1025);
  v254 = v182 * 1.4142;
  v255 = v203[5];
  v256 = v188 * v115;
  v693 = v116;
  v257 = v188 * v116;
  v692 = v117;
  v691 = v118;
  v690 = v119;
  v258 = v188 * v119;
  v689 = v120;
  v259 = v58[11];
  v1009 = v1021 + 1;
  v1005 = v1019 + 1;
  v1003 = v1017 + 1;
  v1002 = v1016 + 1;
  v1001 = v1015 + 1;
  v1000 = v1014 + 1;
  v260 = v133[11];
  v925 = v184;
  v998 = v184 + 1;
  v688 = v185;
  v996 = v1035 + 1;
  v907 = v186;
  v995 = v1034 + 1;
  v904 = v187;
  v994 = v1032 + 1;
  v993 = v1031 + 1;
  v992 = v1030 + 1;
  v261 = v203[11];
  v900 = v218;
  v989 = v211;
  v991 = v211 + 1;
  v262 = v255 * v218;
  v899 = v222;
  v898 = v226;
  v987 = v222;
  v988 = v222 + 1;
  v263 = v255 * v226;
  v897 = v230;
  v896 = v234;
  v986 = v230;
  v985 = v230 + 1;
  v685 = v234;
  v983 = v237;
  v982 = v237 + 1;
  v684 = v241;
  v981 = v243;
  v980 = v243 + 1;
  v683 = v247;
  v979 = v249;
  v978 = v249 + 1;
  v697 = v252;
  v694 = v115;
  v901 = v211;
  v895 = v237;
  v894 = v241;
  v687 = v218;
  v893 = v243;
  v686 = v226;
  v892 = v247;
  v891 = v249;
  v890 = v252;
  if (v253 < 0)
  {
    v264 = 0;
    v265 = 0;
    v266 = v11.__sinval;
    v267 = v1039;
    goto LABEL_271;
  }
  if (v14 * v12 <= v253)
  {
    v264 = v12 - 1;
    v265 = v13 - 1;
    v266 = v11.__sinval;
    if ((_DWORD)v13 == 1)
    {
LABEL_267:
      v265 = v13 - 1;
      if (v264 <= 0)
        v265 = 0;
      v264 -= v264 > 0;
    }
  }
  else
  {
    v264 = v253 / v14;
    v265 = v253 % v14;
    v266 = v11.__sinval;
    if (!v265)
      goto LABEL_267;
  }
  v267 = v1039;
LABEL_271:
  v268 = (float)(1 << v264);
  v269 = (float)(1.0 / v268) * v194;
  v270 = (float)(1.0 / v268) * v267;
  v271 = v254 / v268;
  v272 = (unint64_t *)(v23 + 144 * (v13 * v264 + v265));
  v274 = cosval * (float)(v254 / v268);
  v275 = v269 + (float)(v274 * 0.0);
  v276 = (float)(v254 / v268) * v192;
  v277 = (float)v272[4] + -1.001;
  if (v277 >= (float)(v275 - v276))
    v278 = v275 - v276;
  else
    v278 = (float)v272[4] + -1.001;
  if ((float)(v275 - v276) >= 0.0)
    v279 = v278;
  else
    v279 = 0.0;
  v280 = v266 * v271;
  v281 = v270 + (float)((float)(v266 * v271) * 0.0);
  v273 = v272[6];
  v282 = (float)v273 + -1.001;
  if (v282 >= (float)(v281 - v274))
    v283 = v281 - v274;
  else
    v283 = (float)v273 + -1.001;
  if ((float)(v281 - v274) >= 0.0)
    v284 = v283;
  else
    v284 = 0.0;
  v285 = v274 * 0.70711;
  v286 = v269 + (float)(v274 * 0.70711);
  v287 = v276 * 0.5;
  v288 = (float)(v276 * 0.5) + v286;
  if (v277 >= v288)
    v289 = (float)(v276 * 0.5) + v286;
  else
    v289 = (float)v272[4] + -1.001;
  if (v288 >= 0.0)
    v290 = v289;
  else
    v290 = 0.0;
  v291 = v280 * 0.70711;
  v292 = v274 * 0.5;
  v293 = (float)(v274 * 0.5) + (float)(v270 + v291);
  if (v282 >= v293)
    v294 = (float)(v274 * 0.5) + (float)(v270 + v291);
  else
    v294 = (float)v273 + -1.001;
  if (v293 >= 0.0)
    v295 = v294;
  else
    v295 = 0.0;
  v296 = v276 * -0.5;
  v297 = (float)(v276 * -0.5) + v286;
  if (v277 >= v297)
    v298 = v297;
  else
    v298 = (float)v272[4] + -1.001;
  if (v297 >= 0.0)
    v299 = v298;
  else
    v299 = 0.0;
  v300 = v274 * -0.5;
  v301 = (float)(v274 * -0.5) + (float)(v270 + v291);
  if (v282 >= v301)
    v302 = (float)(v274 * -0.5) + (float)(v270 + v291);
  else
    v302 = (float)v273 + -1.001;
  if (v301 < 0.0)
    v302 = 0.0;
  v303 = v276 + v275;
  if (v277 >= (float)(v276 + v275))
    v304 = v276 + v275;
  else
    v304 = (float)v272[4] + -1.001;
  v305 = v272[5];
  if (v303 >= 0.0)
    v306 = v304;
  else
    v306 = 0.0;
  v307 = v274 + v281;
  if (v282 >= (float)(v274 + v281))
    v308 = v274 + v281;
  else
    v308 = (float)v273 + -1.001;
  v309 = v259 + 4 * v256;
  v926 = v259 + 4 * v257;
  v928 = v259 + 4 * v188 * v117;
  v930 = v259 + 4 * v188 * v118;
  v932 = v259 + 4 * v258;
  v938 = v259 + 4 * v188 * v120;
  v940 = v260 + 4 * v181 * v185;
  v942 = v260 + 4 * v181 * v186;
  v944 = v260 + 4 * v181 * v187;
  v946 = v260 + 4 * v181 * v1012;
  v948 = v260 + 4 * v181 * v1010;
  v949 = v260 + 4 * v181 * v1007;
  v952 = v261 + 4 * v262;
  v954 = v261 + 4 * v263;
  v955 = v261 + 4 * v255 * v685;
  v956 = v261 + 4 * v255 * v684;
  v957 = v261 + 4 * v255 * v683;
  v965 = v261 + 4 * v255 * v697;
  v310 = v272[11];
  v963 = v310 + 4 * v305 * v284;
  v886 = v295;
  v311 = v310 + 4 * v305 * v295;
  v883 = v302;
  if (v307 >= 0.0)
    v312 = v308;
  else
    v312 = 0.0;
  v961 = v310 + 4 * v305 * v302;
  v959 = v310 + 4 * v305 * v312;
  v313 = v269 - v285;
  if (v277 >= (float)(v296 + v313))
    v314 = v296 + v313;
  else
    v314 = (float)v272[4] + -1.001;
  if ((float)(v296 + v313) >= 0.0)
    v315 = v314;
  else
    v315 = 0.0;
  v316 = v270 - v291;
  if (v282 >= (float)(v300 + v316))
    v317 = v300 + v316;
  else
    v317 = (float)v273 + -1.001;
  if ((float)(v300 + v316) < 0.0)
    v317 = 0.0;
  v318 = v287 + v313;
  if (v277 >= v318)
    v277 = v318;
  if (v318 >= 0.0)
    v319 = v277;
  else
    v319 = 0.0;
  v320 = v292 + v316;
  if (v282 >= v320)
    v321 = v320;
  else
    v321 = (float)v273 + -1.001;
  if (v320 >= 0.0)
    v322 = v321;
  else
    v322 = 0.0;
  v936 = v310 + 4 * v305 * v317;
  v934 = v310 + 4 * v305 * v322;
  v323 = (float)(v179 * 1.4142) * 1.4142;
  v324 = v254 * 1.4142;
  v325 = 4 * v188;
  v326 = 4 * v181;
  v327 = 4 * v255;
  v328 = 4 * v305;
  v329 = vcvtms_s32_f32((float)((float)((float)((float)((float)((float)((float)(COERCE_FLOAT(LODWORD(v323) & 0x807FFFFF | 0x3F800000)* -0.33333)+ 2.0)* COERCE_FLOAT(LODWORD(v323) & 0x807FFFFF | 0x3F800000))+ -1.6667)+ (float)((LODWORD(v323) >> 23) - 127))* 0.69315)- v1027)* v1025);
  v976 = v279;
  v977 = v279 + 1;
  v974 = v290;
  v975 = v290 + 1;
  v973 = v299 + 1;
  v972 = v306;
  v971 = v306 + 1;
  v970 = v315;
  v969 = v315 + 1;
  v968 = v319;
  v967 = v319 + 1;
  v889 = v279;
  v888 = v284;
  v885 = v284;
  v884 = v299;
  v882 = v295;
  v881 = v302;
  v880 = v306;
  v878 = v312;
  v876 = v312;
  v873 = v317;
  v872 = v315;
  v871 = v317;
  v869 = v319;
  v868 = v322;
  v867 = v322;
  if (v329 < 0)
  {
    v331 = 0;
    v332 = 0;
    v334 = *(_QWORD *)(a2 + 56);
    v333 = *(_QWORD *)(a2 + 32);
    v335 = v1021;
    v336 = v1019;
    v337 = v1017;
    v338 = v1016;
    v339 = v1015;
    v340 = v1014;
    v341 = v184;
    v330 = v1037;
    v342 = v11.__sinval;
    v343 = v1039;
  }
  else
  {
    v330 = v13 - 1;
    if (v14 * v1023 <= v329)
    {
      v331 = v1023 - 1;
      v332 = v13 - 1;
    }
    else
    {
      v331 = v329 / v14;
      v332 = v329 % v14;
    }
    v334 = v23;
    v333 = v13;
    v335 = v1021;
    v336 = v1019;
    v337 = v1017;
    v338 = v1016;
    v339 = v1015;
    v340 = v1014;
    v341 = v184;
    v343 = v1039;
    if (!v332)
    {
      if (v331 <= 0)
        v332 = 0;
      else
        v332 = v330;
      v331 -= v331 > 0;
    }
    v342 = v11.__sinval;
  }
  v344 = (float)(1 << v331);
  v345 = (float)(1.0 / v344) * v194;
  v346 = (float)(1.0 / v344) * v343;
  v347 = (unint64_t *)(v334 + 144 * (v333 * v331 + v332));
  v348 = v347[6];
  v349 = cosval * (float)(v324 / v344);
  v350 = v349 * 0.5;
  v351 = v345 - (float)(v349 * 0.5);
  v352 = (float)(v324 / v344) * v1041;
  v353 = (float)(v352 * 0.70711) + v351;
  v354 = (float)v347[4] + -1.001;
  if (v354 >= v353)
    v355 = (float)(v352 * 0.70711) + v351;
  else
    v355 = (float)v347[4] + -1.001;
  if (v353 >= 0.0)
    v356 = v355;
  else
    v356 = 0.0;
  v357 = v342 * (float)(v324 / v344);
  v358 = v346 - (float)(v357 * 0.5);
  v359 = v349 * 0.70711;
  v360 = (float)(v349 * 0.70711) + v358;
  v361 = (float)v348 + -1.001;
  if (v361 >= v360)
    v362 = (float)(v349 * 0.70711) + v358;
  else
    v362 = (float)v348 + -1.001;
  if (v360 >= 0.0)
    v363 = v362;
  else
    v363 = 0.0;
  v364 = v345 + v350;
  v365 = (float)(v352 * 0.70711) + (float)(v345 + v350);
  if (v354 >= v365)
    v366 = v365;
  else
    v366 = (float)v347[4] + -1.001;
  if (v365 >= 0.0)
    v367 = v366;
  else
    v367 = 0.0;
  v368 = v346 + (float)(v357 * 0.5);
  if (v361 >= (float)(v359 + v368))
    v369 = v359 + v368;
  else
    v369 = (float)v348 + -1.001;
  if ((float)(v359 + v368) >= 0.0)
    v370 = v369;
  else
    v370 = 0.0;
  v371 = v352 * 0.0;
  v372 = (float)(v349 + v345) + (float)(v352 * 0.0);
  if (v354 >= v372)
    v373 = (float)(v349 + v345) + (float)(v352 * 0.0);
  else
    v373 = (float)v347[4] + -1.001;
  if (v372 >= 0.0)
    v374 = v373;
  else
    v374 = 0.0;
  v375 = v349 * 0.0;
  v376 = (float)(v357 + v346) + (float)(v349 * 0.0);
  if (v361 >= v376)
    v377 = (float)(v357 + v346) + (float)(v349 * 0.0);
  else
    v377 = (float)v348 + -1.001;
  if (v376 >= 0.0)
    v378 = v377;
  else
    v378 = 0.0;
  v379 = v352 * -0.70711;
  v380 = v379 + v364;
  if (v354 >= v380)
    v381 = v380;
  else
    v381 = (float)v347[4] + -1.001;
  if (v380 < 0.0)
    v381 = 0.0;
  v382 = v349 * -0.70711;
  v383 = (float)(v349 * -0.70711) + v368;
  if (v361 >= v383)
    v384 = v383;
  else
    v384 = (float)v348 + -1.001;
  if (v383 >= 0.0)
    v385 = v384;
  else
    v385 = 0.0;
  v386 = v379 + v351;
  if (v354 >= v386)
    v387 = v386;
  else
    v387 = (float)v347[4] + -1.001;
  if (v386 < 0.0)
    v387 = 0.0;
  v388 = v382 + v358;
  if (v361 >= (float)(v382 + v358))
    v389 = v382 + v358;
  else
    v389 = (float)v348 + -1.001;
  v390 = (float)(v345 - v349) + v371;
  if (v388 >= 0.0)
    v391 = v389;
  else
    v391 = 0.0;
  if (v354 >= v390)
    v392 = v390;
  else
    v392 = (float)v347[4] + -1.001;
  if (v390 >= 0.0)
    v393 = v392;
  else
    v393 = 0.0;
  v394 = (float)(v346 - v357) + v375;
  if (v361 >= v394)
    v395 = v394;
  else
    v395 = (float)v348 + -1.001;
  if (v394 >= 0.0)
    v396 = v395;
  else
    v396 = 0.0;
  v397 = v324 * 1.4142;
  v398 = v323 * 1.4142;
  v399 = v347[5];
  v400 = v347[11];
  v862 = v363;
  v682 = v363;
  v856 = v370;
  v696 = v370;
  v852 = v378;
  v695 = v378;
  v829 = v385;
  v819 = v391;
  v810 = v396;
  v401 = v309 + v325;
  v841 = v938 + v325;
  v837 = v940 + v326;
  v831 = v942 + v326;
  v817 = v944 + v326;
  v820 = v946 + v326;
  v811 = v948 + v326;
  v805 = v949 + v326;
  v794 = v952 + v327;
  v790 = v954 + v327;
  v788 = v955 + v327;
  v764 = v956 + v327;
  v750 = v957 + v327;
  v753 = v965 + v327;
  v755 = v963 + v328;
  v859 = v311;
  v758 = v311 + v328;
  v760 = v961 + v328;
  v762 = v959 + v328;
  v766 = v936 + v328;
  v768 = v934 + v328;
  v778 = v400 + 4 * v399 * v682;
  v770 = v778 + 4 * v399;
  v780 = v400 + 4 * v399 * v696;
  v772 = v780 + 4 * v399;
  v783 = v400 + 4 * v399 * v695;
  v774 = v783 + 4 * v399;
  v782 = v400 + 4 * v399 * v829;
  v775 = v782 + 4 * v399;
  v785 = v400 + 4 * v399 * v819;
  v776 = v785 + 4 * v399;
  v786 = v400 + 4 * v399 * v810;
  v777 = v786 + 4 * v399;
  v402 = vcvtms_s32_f32((float)((float)((float)((float)((float)((float)((float)(COERCE_FLOAT(LODWORD(v398) & 0x807FFFFF | 0x3F800000)* -0.33333)+ 2.0)* COERCE_FLOAT(LODWORD(v398) & 0x807FFFFF | 0x3F800000))+ -1.6667)+ (float)((LODWORD(v398) >> 23) - 127))* 0.69315)- v1027)* v1025);
  v403 = 4 * v338;
  v845 = 4 * v340;
  v857 = v367;
  v747 = 4 * v367;
  v746 = 4 * (v367 + 1);
  v853 = v374;
  v745 = 4 * v374;
  v744 = 4 * (v374 + 1);
  v808 = v381;
  v743 = 4 * v381;
  v807 = v381 + 1;
  v742 = 4 * v387;
  v741 = 4 * (v387 + 1);
  v796 = v393;
  v793 = v393 + 1;
  v887 = v290;
  v870 = v299;
  v863 = v356;
  v848 = v381;
  v847 = v385;
  v840 = v387;
  v836 = v391;
  v833 = v356 + 1;
  v830 = v356;
  v828 = v393;
  v826 = v396;
  v823 = v367 + 1;
  v822 = v367;
  v815 = v374;
  v813 = v374 + 1;
  v802 = v387;
  v800 = v387 + 1;
  v740 = 4 * v393;
  v721 = 4 * v299;
  if (v402 < 0)
  {
    v404 = 0;
    v405 = 0;
    v407 = v1039;
    v406 = -v11.__sinval;
    v408 = (float)(v199 + v197) * 255.0;
    v409 = v1042;
    v410 = v1043;
    v411 = v11.__sinval;
    goto LABEL_431;
  }
  if (v330 * v1023 <= v402)
  {
    v404 = v1023 - 1;
    v405 = v330;
    v407 = v1039;
    v406 = -v11.__sinval;
    v408 = (float)(v199 + v197) * 255.0;
    v409 = v1042;
    v410 = v1043;
    v411 = v11.__sinval;
    if (v330)
      goto LABEL_431;
  }
  else
  {
    v404 = v402 / v330;
    v405 = v402 % v330;
    v407 = v1039;
    v406 = -v11.__sinval;
    v408 = (float)(v199 + v197) * 255.0;
    v409 = v1042;
    v410 = v1043;
    v411 = v11.__sinval;
    if (v402 % v330)
      goto LABEL_431;
  }
  if (v404 <= 0)
    v405 = 0;
  else
    v405 = v330;
  v404 -= v404 > 0;
LABEL_431:
  v412 = v932 + v325;
  v413 = 4 * v341;
  v414 = v930 + v325;
  v415 = 4 * v339;
  v416 = v928 + v325;
  v417 = v926 + v325;
  v877 = *(float *)(v309 + 4 * v335);
  v879 = *(float *)(v309 + 4 * v1009);
  v875 = *(float *)(v401 + 4 * v335);
  v874 = *(float *)(v401 + 4 * v1009);
  v418 = (float)(1 << v404);
  v419 = (unint64_t *)(v409 + 144 * (v410 * v404 + v405));
  v420 = (float)v419[4];
  v421 = (float)v419[6];
  v922 = v194;
  v422 = (float)(1.0 / v418) * v194;
  v423 = (float)(1.0 / v418) * v407;
  v424 = v397;
  v425 = v397 / v418;
  v923 = cosval;
  v426 = cosval * (float)(v397 / v418);
  v427 = v422 + (float)(v426 * 0.0);
  v428 = v425 * v406;
  v429 = v427 - (float)(v425 * v406);
  v430 = v420 + -1.001;
  if ((float)(v420 + -1.001) >= v429)
    v431 = v427 - (float)(v425 * v406);
  else
    v431 = v420 + -1.001;
  if (v429 >= 0.0)
    v432 = v431;
  else
    v432 = 0.0;
  v433 = v411 * v425;
  v434 = v423 + (float)(v433 * 0.0);
  v435 = v421 + -1.001;
  if ((float)(v421 + -1.001) >= (float)(v434 - v426))
    v436 = v434 - v426;
  else
    v436 = v421 + -1.001;
  if ((float)(v434 - v426) >= 0.0)
    v437 = v436;
  else
    v437 = 0.0;
  v438 = v426 * 0.70711;
  v439 = v422 + (float)(v426 * 0.70711);
  v440 = v428 * 0.5;
  v441 = (float)(v428 * 0.5) + v439;
  if (v430 >= v441)
    v442 = (float)(v428 * 0.5) + v439;
  else
    v442 = v430;
  if (v441 >= 0.0)
    v443 = v442;
  else
    v443 = 0.0;
  v444 = v433 * 0.70711;
  v445 = v423 + v444;
  v446 = v426 * 0.5;
  v447 = (float)(v426 * 0.5) + (float)(v423 + v444);
  if (v435 >= v447)
    v448 = (float)(v426 * 0.5) + (float)(v423 + v444);
  else
    v448 = v435;
  if (v447 >= 0.0)
    v449 = v448;
  else
    v449 = 0.0;
  v450 = v428 * -0.5;
  v451 = (float)(v428 * -0.5) + v439;
  if (v430 >= v451)
    v452 = v451;
  else
    v452 = v430;
  if (v451 < 0.0)
    v452 = 0.0;
  v453 = v426 * -0.5;
  v454 = (float)(v426 * -0.5) + v445;
  if (v435 >= v454)
    v455 = v453 + v445;
  else
    v455 = v435;
  v866 = *(float *)(v926 + 4 * v336);
  if (v454 < 0.0)
    v455 = 0.0;
  v456 = v428 + v427;
  if (v430 >= (float)(v428 + v427))
    v457 = v428 + v427;
  else
    v457 = v430;
  v458 = v456 < 0.0;
  v927 = *(float *)(v926 + 4 * v1005);
  v459 = v426 + v434;
  v460 = *(float *)(v417 + 4 * v336);
  if (v458)
    v461 = 0.0;
  else
    v461 = v457;
  if (v435 >= v459)
    v462 = v459;
  else
    v462 = v435;
  if (v459 >= 0.0)
    v463 = v462;
  else
    v463 = 0.0;
  v464 = v422 - v438;
  v465 = v450 + (float)(v422 - v438);
  if (v430 >= v465)
    v466 = v465;
  else
    v466 = v430;
  v864 = *(float *)(v417 + 4 * v1005);
  if (v465 >= 0.0)
    v467 = v466;
  else
    v467 = 0.0;
  v468 = v423 - v444;
  v469 = v453 + v468;
  if (v435 >= v469)
    v470 = v469;
  else
    v470 = v435;
  v458 = v469 < 0.0;
  v471 = *(float *)(v928 + 4 * v337);
  v472 = v440 + v464;
  v861 = *(float *)(v928 + 4 * v1003);
  if (v458)
    v473 = 0.0;
  else
    v473 = v470;
  if (v430 >= v472)
    v430 = v440 + v464;
  v458 = v472 < 0.0;
  v929 = *(float *)(v416 + 4 * v337);
  v474 = v446 + v468;
  v858 = *(float *)(v416 + 4 * v1003);
  if (v458)
    v430 = 0.0;
  if (v435 >= v474)
    v435 = v446 + v468;
  v854 = *(float *)(v930 + v403);
  v855 = *(float *)(v930 + 4 * v1002);
  v931 = *(float *)(v414 + v403);
  v475 = (float)((float)((float)((float)((float)((float)((float)(COERCE_FLOAT(COERCE_UNSIGNED_INT(v398 * 1.4142) & 0x807FFFFF | 0x3F800000)
                                                               * -0.33333)
                                                       + 2.0)
                                               * COERCE_FLOAT(COERCE_UNSIGNED_INT(v398 * 1.4142) & 0x807FFFFF | 0x3F800000))
                                       + -1.6667)
                               + (float)((COERCE_UNSIGNED_INT(v398 * 1.4142) >> 23) - 127))
                       * 0.69315)
               - v1027)
       * v1025;
  v1026 = *(float *)(v414 + 4 * v1002);
  v476 = v419[5];
  v477 = v419[11];
  v724 = v437;
  v713 = v437;
  v478 = v477 + 4 * v476 * v713;
  v719 = v449;
  v712 = v449;
  v479 = v477 + 4 * v476 * v712;
  v715 = v455;
  v709 = v455;
  v480 = v477 + 4 * v476 * v709;
  v705 = v463;
  v481 = v477 + 4 * v476 * v705;
  v701 = v473;
  v482 = v477 + 4 * v476 * v701;
  v483 = (int)v408;
  v851 = *(float *)(v932 + 4 * v339);
  if (v474 >= 0.0)
    v484 = v435;
  else
    v484 = 0.0;
  v708 = v484;
  v485 = v477 + 4 * v476 * v708;
  v704 = vcvtms_s32_f32(v475);
  v933 = *(float *)(v932 + 4 * v1001);
  v486 = 4 * v476;
  v487 = v478 + v486;
  v488 = v479 + v486;
  v489 = v480 + v486;
  v490 = v481 + v486;
  v491 = v482 + v486;
  v700 = v485 + v486;
  v725 = v432;
  v492 = 4 * v432;
  v710 = v432;
  v720 = v443;
  v711 = v432 + 1;
  v493 = 4 * v711;
  v494 = 4 * v443;
  v706 = v443;
  v707 = v443 + 1;
  v495 = 4 * v707;
  v716 = v452;
  v496 = 4 * v452;
  v703 = v452;
  v702 = v452 + 1;
  v497 = 4 * v702;
  v714 = v461;
  v498 = 4 * v461;
  v699 = v461;
  v698 = v461 + 1;
  v499 = 4 * v698;
  v500 = 4 * v467;
  v501 = 4 * (v467 + 1);
  v502 = 4 * v430;
  v503 = 4 * (v430 + 1);
  v849 = *(float *)(v412 + v415);
  v850 = *(float *)(v412 + 4 * v1001);
  v843 = *(float *)(v938 + v845);
  v844 = *(float *)(v938 + 4 * v1000);
  v846 = *(float *)(v841 + v845);
  v939 = *(float *)(v841 + 4 * v1000);
  v842 = *(float *)(v940 + v413);
  v941 = *(float *)(v940 + 4 * v998);
  v839 = *(float *)(v837 + v413);
  v838 = *(float *)(v837 + 4 * v998);
  v835 = *(float *)(v942 + 4 * v1035);
  v943 = *(float *)(v942 + 4 * v996);
  v834 = *(float *)(v831 + 4 * v1035);
  v832 = *(float *)(v831 + 4 * v996);
  v824 = *(float *)(v944 + 4 * v1034);
  v825 = *(float *)(v944 + 4 * v995);
  v827 = *(float *)(v817 + 4 * v1034);
  v945 = *(float *)(v817 + 4 * v995);
  v814 = *(float *)(v946 + 4 * v1032);
  v816 = *(float *)(v946 + 4 * v994);
  v818 = *(float *)(v820 + 4 * v1032);
  v821 = *(float *)(v820 + 4 * v994);
  v809 = *(float *)(v811 + 4 * v1031);
  v812 = *(float *)(v811 + 4 * v993);
  v801 = *(float *)(v949 + 4 * v1030);
  v803 = *(float *)(v949 + 4 * v992);
  v804 = *(float *)(v805 + 4 * v1030);
  v806 = *(float *)(v805 + 4 * v992);
  v798 = *(float *)(v952 + 4 * v989);
  v799 = *(float *)(v952 + 4 * v991);
  v797 = *(float *)(v794 + 4 * v989);
  v795 = *(float *)(v794 + 4 * v991);
  v792 = *(float *)(v790 + 4 * v987);
  v791 = *(float *)(v790 + 4 * v988);
  v787 = *(float *)(v788 + 4 * v986);
  v789 = *(float *)(v788 + 4 * v985);
  v784 = *(float *)(v764 + 4 * v983);
  v1028 = *(float *)(v764 + 4 * v982);
  v752 = *(float *)(v957 + 4 * v981);
  v757 = *(float *)(v957 + 4 * v980);
  v765 = *(float *)(v750 + 4 * v981);
  v947 = *(float *)(v750 + 4 * v980);
  v731 = *(float *)(v965 + 4 * v979);
  v738 = *(float *)(v965 + 4 * v978);
  v751 = *(float *)(v753 + 4 * v979);
  v754 = *(float *)(v753 + 4 * v978);
  v729 = *(float *)(v963 + 4 * v976);
  v730 = *(float *)(v963 + 4 * v977);
  v728 = *(float *)(v755 + 4 * v976);
  v756 = *(float *)(v755 + 4 * v977);
  v732 = *(float *)(v859 + 4 * v974);
  v860 = *(float *)(v859 + 4 * v975);
  v734 = *(float *)(v758 + 4 * v974);
  v759 = *(float *)(v758 + 4 * v975);
  v726 = *(float *)(v961 + v721);
  v727 = *(float *)(v961 + 4 * v973);
  v733 = *(float *)(v760 + v721);
  v761 = *(float *)(v760 + 4 * v973);
  v722 = *(float *)(v959 + 4 * v972);
  v735 = *(float *)(v959 + 4 * v971);
  v737 = *(float *)(v762 + 4 * v972);
  v763 = *(float *)(v762 + 4 * v971);
  v717 = *(float *)(v936 + 4 * v970);
  v718 = *(float *)(v936 + 4 * v969);
  v736 = *(float *)(v766 + 4 * v970);
  v937 = *(float *)(v766 + 4 * v969);
  v723 = *(float *)(v934 + 4 * v968);
  v739 = *(float *)(v934 + 4 * v967);
  v767 = *(float *)(v768 + 4 * v968);
  v935 = *(float *)(v768 + 4 * v967);
  v769 = *(float *)(v778 + 4 * v356);
  v779 = *(float *)(v778 + 4 * (v356 + 1));
  v749 = *(float *)(v770 + 4 * v356);
  v771 = *(float *)(v770 + 4 * (v356 + 1));
  v748 = *(float *)(v780 + v747);
  v950 = *(float *)(v780 + v746);
  v781 = *(float *)(v772 + v747);
  v773 = *(float *)(v772 + v746);
  v504 = *(float *)(v478 + v492);
  v505 = *(float *)(v478 + v493);
  v506 = *(float *)(v487 + v492);
  v507 = *(float *)(v487 + v493);
  v508 = *(float *)(v479 + v494);
  v509 = *(float *)(v479 + v495);
  v510 = *(float *)(v488 + v494);
  v511 = *(float *)(v488 + v495);
  v512 = *(float *)(v480 + v496);
  v513 = *(float *)(v480 + v497);
  v514 = *(float *)(v489 + v496);
  v515 = *(float *)(v489 + v497);
  v516 = *(float *)(v481 + v498);
  v517 = *(float *)(v481 + v499);
  v518 = *(float *)(v490 + v498);
  v519 = *(float *)(v490 + v499);
  v520 = *(float *)(v482 + v500);
  v521 = *(float *)(v482 + v501);
  v522 = *(float *)(v491 + v500);
  v523 = *(float *)(v491 + v501);
  v524 = *(float *)(v485 + v502);
  v525 = *(float *)(v485 + v503);
  v526 = *(float *)(v700 + v502);
  v527 = *(float *)(v700 + v503);
  v865 = v460;
  if (v704 < 0)
  {
    v528 = 0;
    v529 = 0;
    v530 = v694;
    v531 = v693;
    v532 = v692;
    v533 = v691;
    v534 = v690;
    v535 = v689;
    v536 = v1019;
    v537 = v1017;
    v538 = v1016;
    v539 = v1015;
    v540 = v1014;
    v541 = v688;
    v542 = v925;
    v543 = v687;
    v544 = v686;
    v545 = v685;
    v546 = v684;
    v547 = v683;
    v548 = v697;
    v549 = v682;
    v550 = v696;
    v551 = v695;
    v552 = v467;
  }
  else
  {
    if (v1037 * v1023 <= v704)
    {
      v528 = v1023 - 1;
      v529 = v1037;
    }
    else
    {
      v528 = v704 / v1037;
      v529 = v704 % v1037;
    }
    v530 = v694;
    v531 = v693;
    v532 = v692;
    v533 = v691;
    v534 = v690;
    v535 = v689;
    v536 = v1019;
    v538 = v1016;
    v539 = v1015;
    v540 = v1014;
    v541 = v688;
    v542 = v925;
    v543 = v687;
    v544 = v686;
    v545 = v685;
    v546 = v684;
    v547 = v683;
    v549 = v682;
    v552 = v467;
    if (!v529)
    {
      if (v528 <= 0)
        v529 = 0;
      else
        v529 = v1037;
      v528 -= v528 > 0;
    }
    v548 = v697;
    v550 = v696;
    v551 = v695;
    v537 = v1017;
  }
  v1024 = (float)((float)((float)((float)((float)((float)(v430 + 1) - v430)
                                        * (float)((float)(v708 + 1) - v484))
                                * v524)
                        + (float)((float)((float)(v430 - (float)v430)
                                        * (float)((float)(v708 + 1) - v484))
                                * v525))
                + (float)((float)((float)(v484 - (float)v708)
                                * (float)((float)(v430 + 1) - v430))
                        * v526))
        + (float)((float)((float)(v430 - (float)v430) * (float)(v484 - (float)v708)) * v527);
  v966 = (float)((float)((float)((float)((float)((float)(v467 + 1) - v467)
                                       * (float)((float)(v701 + 1) - v473))
                               * v520)
                       + (float)((float)((float)(v467 - (float)v552) * (float)((float)(v701 + 1) - v473))
                               * v521))
               + (float)((float)((float)(v473 - (float)v701)
                               * (float)((float)(v467 + 1) - v467))
                       * v522))
       + (float)((float)((float)(v467 - (float)v552) * (float)(v473 - (float)v701)) * v523);
  v964 = (float)((float)((float)((float)((float)((float)v698 - v714) * (float)((float)(v705 + 1) - v463))
                               * v516)
                       + (float)((float)((float)(v714 - (float)v699) * (float)((float)(v705 + 1) - v463))
                               * v517))
               + (float)((float)((float)(v463 - (float)v705) * (float)((float)v698 - v714)) * v518))
       + (float)((float)((float)(v714 - (float)v699) * (float)(v463 - (float)v705)) * v519);
  v962 = (float)((float)((float)(v512
                               * (float)((float)((float)v702 - v716) * (float)((float)(v709 + 1) - v715)))
                       + (float)((float)((float)(v716 - (float)v703) * (float)((float)(v709 + 1) - v715))
                               * v513))
               + (float)((float)((float)(v715 - (float)v709) * (float)((float)v702 - v716)) * v514))
       + (float)((float)((float)(v716 - (float)v703) * (float)(v715 - (float)v709)) * v515);
  v960 = (float)(v511 * (float)((float)(v720 - (float)v706) * (float)(v719 - (float)v712)))
       + (float)((float)(v510 * (float)((float)(v719 - (float)v712) * (float)((float)v707 - v720)))
               + (float)((float)(v508
                               * (float)((float)((float)v707 - v720) * (float)((float)(v712 + 1) - v719)))
                       + (float)(v509
                               * (float)((float)(v720 - (float)v706) * (float)((float)(v712 + 1) - v719)))));
  v958 = (float)(v507 * (float)((float)(v725 - (float)v710) * (float)(v724 - (float)v713)))
       + (float)((float)(v506 * (float)((float)(v724 - (float)v713) * (float)((float)v711 - v725)))
               + (float)((float)(v504
                               * (float)((float)((float)v711 - v725) * (float)((float)(v713 + 1) - v724)))
                       + (float)(v505
                               * (float)((float)(v725 - (float)v710) * (float)((float)(v713 + 1) - v724)))));
  v953 = (float)((float)((float)(*(float *)(v783 + v745)
                               * (float)((float)((float)v813 - v853) * (float)((float)(v551 + 1) - v852)))
                       + (float)((float)((float)(v853 - (float)v815) * (float)((float)(v551 + 1) - v852))
                               * *(float *)(v783 + v744)))
               + (float)((float)((float)((float)v813 - v853) * (float)(v852 - (float)v551)) * *(float *)(v774 + v745)))
       + (float)((float)((float)(v853 - (float)v815) * (float)(v852 - (float)v551)) * *(float *)(v774 + v744));
  v951 = (float)(v773 * (float)((float)(v857 - (float)v822) * (float)(v856 - (float)v550)))
       + (float)((float)(v781 * (float)((float)(v856 - (float)v550) * (float)((float)v823 - v857)))
               + (float)((float)(v748 * (float)((float)((float)v823 - v857) * (float)((float)(v550 + 1) - v856)))
                       + (float)(v950 * (float)((float)(v857 - (float)v822) * (float)((float)(v550 + 1) - v856)))));
  v553 = (float)(v771 * (float)((float)(v863 - (float)v830) * (float)(v862 - (float)v549)))
       + (float)((float)(v749 * (float)((float)(v862 - (float)v549) * (float)((float)v833 - v863)))
               + (float)((float)(v769 * (float)((float)((float)v833 - v863) * (float)((float)(v549 + 1) - v862)))
                       + (float)(v779 * (float)((float)(v863 - (float)v830) * (float)((float)(v549 + 1) - v862)))));
  v554 = (float)((float)((float)((float)((float)((float)v978 - v891) * (float)((float)(v548 + 1) - v890)) * v731)
                       + (float)((float)((float)(v891 - (float)v979) * (float)((float)(v548 + 1) - v890)) * v738))
               + (float)((float)((float)((float)v978 - v891) * (float)(v890 - (float)v548)) * v751))
       + (float)((float)((float)(v891 - (float)v979) * (float)(v890 - (float)v548)) * v754);
  v555 = v893 - (float)v981;
  v556 = v892 - (float)v547;
  v557 = (float)((float)((float)((float)((float)v980 - v893) * (float)((float)(v547 + 1) - v892)) * v752)
               + (float)((float)(v555 * (float)((float)(v547 + 1) - v892)) * v757))
       + (float)((float)(v556 * (float)((float)v980 - v893)) * v765);
  v1029 = (int)(float)((float)((float)((float)((float)((float)((float)((float)v982 - v895)
                                                             * (float)((float)(v546 + 1) - v894))
                                                     * *(float *)(v956 + 4 * v983))
                                             + (float)((float)((float)(v895 - (float)v983)
                                                             * (float)((float)(v546 + 1) - v894))
                                                     * *(float *)(v956 + 4 * v982)))
                                     + (float)((float)((float)(v894 - (float)v546) * (float)((float)v982 - v895)) * v784))
                             + (float)((float)((float)(v895 - (float)v983) * (float)(v894 - (float)v546)) * v1028))
                     * 255.0);
  v558 = (int)(float)((float)((float)((float)((float)(*(float *)(v955 + 4 * v986)
                                                    * (float)((float)((float)v985 - v897)
                                                            * (float)((float)(v545 + 1) - v896)))
                                            + (float)((float)((float)(v897 - (float)v986)
                                                            * (float)((float)(v545 + 1) - v896))
                                                    * *(float *)(v955 + 4 * v985)))
                                    + (float)((float)((float)((float)v985 - v897) * (float)(v896 - (float)v545)) * v787))
                            + (float)((float)((float)(v897 - (float)v986) * (float)(v896 - (float)v545)) * v789))
                    * 255.0);
  v1038 = v558;
  v559 = (int)(float)((float)((float)(v791 * (float)((float)(v899 - (float)v987) * (float)(v898 - (float)v544)))
                            + (float)((float)(v792 * (float)((float)(v898 - (float)v544) * (float)((float)v988 - v899)))
                                    + (float)((float)(*(float *)(v954 + 4 * v987)
                                                    * (float)((float)((float)v988 - v899)
                                                            * (float)((float)(v544 + 1) - v898)))
                                            + (float)(*(float *)(v954 + 4 * v988)
                                                    * (float)((float)(v899 - (float)v987)
                                                            * (float)((float)(v544 + 1) - v898))))))
                    * 255.0);
  v560 = (int)(float)((float)((float)(v795 * (float)((float)(v901 - (float)v989) * (float)(v900 - (float)v543)))
                            + (float)((float)(v797 * (float)((float)(v900 - (float)v543) * (float)((float)v991 - v901)))
                                    + (float)((float)(v798
                                                    * (float)((float)((float)v991 - v901)
                                                            * (float)((float)(v543 + 1) - v900)))
                                            + (float)(v799
                                                    * (float)((float)(v901 - (float)v989)
                                                            * (float)((float)(v543 + 1) - v900))))))
                    * 255.0);
  v561 = (int)(float)((float)((float)((float)((float)((float)((float)((float)v992 - v903)
                                                            * (float)((float)(v1007 + 1) - v902))
                                                    * v801)
                                            + (float)((float)((float)(v903 - (float)v1030)
                                                            * (float)((float)(v1007 + 1) - v902))
                                                    * v803))
                                    + (float)((float)((float)(v902 - (float)v1007)
                                                    * (float)((float)v992 - v903))
                                            * v804))
                            + (float)((float)((float)(v903 - (float)v1030) * (float)(v902 - (float)v1007))
                                    * v806))
                    * 255.0);
  v562 = (int)(float)((float)((float)((float)((float)((float)((float)((float)v993 - v906)
                                                            * (float)((float)(v1010 + 1) - v905))
                                                    * *(float *)(v948 + 4 * v1031))
                                            + (float)((float)((float)(v906 - (float)v1031)
                                                            * (float)((float)(v1010 + 1) - v905))
                                                    * *(float *)(v948 + 4 * v993)))
                                    + (float)((float)((float)(v905 - (float)v1010)
                                                    * (float)((float)v993 - v906))
                                            * v809))
                            + (float)((float)((float)(v906 - (float)v1031) * (float)(v905 - (float)v1010))
                                    * v812))
                    * 255.0);
  v563 = (int)(float)((float)((float)((float)((float)((float)((float)((float)v994 - v909)
                                                            * (float)((float)(v1012 + 1) - v908))
                                                    * v814)
                                            + (float)((float)((float)(v909 - (float)v1032)
                                                            * (float)((float)(v1012 + 1) - v908))
                                                    * v816))
                                    + (float)((float)((float)(v908 - (float)v1012)
                                                    * (float)((float)v994 - v909))
                                            * v818))
                            + (float)((float)((float)(v909 - (float)v1032) * (float)(v908 - (float)v1012))
                                    * v821))
                    * 255.0);
  v564 = (int)(float)((float)((float)((float)((float)(v911 - (float)v1034) * (float)(v910 - (float)v904)) * v945)
                            + (float)((float)((float)((float)(v910 - (float)v904) * (float)((float)v995 - v911)) * v827)
                                    + (float)((float)(v824
                                                    * (float)((float)((float)v995 - v911)
                                                            * (float)((float)(v904 + 1) - v910)))
                                            + (float)(v825
                                                    * (float)((float)(v911 - (float)v1034)
                                                            * (float)((float)(v904 + 1) - v910))))))
                    * 255.0);
  v565 = (int)(float)((float)((float)(v832 * (float)((float)(v913 - (float)v1035) * (float)(v912 - (float)v907)))
                            + (float)((float)(v834 * (float)((float)(v912 - (float)v907) * (float)((float)v996 - v913)))
                                    + (float)((float)(v835
                                                    * (float)((float)((float)v996 - v913)
                                                            * (float)((float)(v907 + 1) - v912)))
                                            + (float)(v943
                                                    * (float)((float)(v913 - (float)v1035)
                                                            * (float)((float)(v907 + 1) - v912))))))
                    * 255.0);
  v566 = (int)(float)((float)((float)(v838 * (float)((float)(v915 - (float)v542) * (float)(v914 - (float)v541)))
                            + (float)((float)(v839 * (float)((float)(v914 - (float)v541) * (float)((float)v998 - v915)))
                                    + (float)((float)(v842
                                                    * (float)((float)((float)v998 - v915)
                                                            * (float)((float)(v541 + 1) - v914)))
                                            + (float)(v941
                                                    * (float)((float)(v915 - (float)v542)
                                                            * (float)((float)(v541 + 1) - v914))))))
                    * 255.0);
  v1033 = v566;
  v567 = (int)(float)((float)((float)((float)((float)((float)((float)((float)v1000 - v1014)
                                                            * (float)((float)(v535 + 1) - v916))
                                                    * v843)
                                            + (float)((float)((float)(v1014 - (float)v540)
                                                            * (float)((float)(v535 + 1) - v916))
                                                    * v844))
                                    + (float)((float)((float)(v916 - (float)v535) * (float)((float)v1000 - v1014)) * v846))
                            + (float)((float)((float)(v1014 - (float)v540) * (float)(v916 - (float)v535)) * v939))
                    * 255.0);
  v568 = (int)(float)((float)((float)((float)((float)((float)((float)((float)v1001 - v1015)
                                                            * (float)((float)(v534 + 1) - v917))
                                                    * v851)
                                            + (float)((float)((float)(v1015 - (float)v539)
                                                            * (float)((float)(v534 + 1) - v917))
                                                    * v933))
                                    + (float)((float)((float)(v917 - (float)v534) * (float)((float)v1001 - v1015)) * v849))
                            + (float)((float)((float)(v1015 - (float)v539) * (float)(v917 - (float)v534)) * v850))
                    * 255.0);
  v569 = (int)(float)((float)((float)((float)((float)((float)((float)((float)v1002 - v1016)
                                                            * (float)((float)(v533 + 1) - v918))
                                                    * v854)
                                            + (float)((float)((float)(v1016 - (float)v538)
                                                            * (float)((float)(v533 + 1) - v918))
                                                    * v855))
                                    + (float)((float)((float)(v918 - (float)v533) * (float)((float)v1002 - v1016)) * v931))
                            + (float)((float)((float)(v1016 - (float)v538) * (float)(v918 - (float)v533)) * v1026))
                    * 255.0);
  v570 = (int)(float)((float)((float)((float)((float)(v471
                                                    * (float)((float)((float)v1003 - v1017)
                                                            * (float)((float)(v532 + 1) - v919)))
                                            + (float)((float)((float)(v1017 - (float)v537)
                                                            * (float)((float)(v532 + 1) - v919))
                                                    * v861))
                                    + (float)((float)((float)(v919 - (float)v532) * (float)((float)v1003 - v1017)) * v929))
                            + (float)((float)((float)(v1017 - (float)v537) * (float)(v919 - (float)v532)) * v858))
                    * 255.0);
  v571 = v557 + (float)((float)(v555 * v556) * v947);
  v572 = (int)(float)((float)((float)(v864 * (float)((float)(v1019 - (float)v536) * (float)(v920 - (float)v531)))
                            + (float)((float)(v865 * (float)((float)(v920 - (float)v531) * (float)((float)v1005 - v1019)))
                                    + (float)((float)(v866
                                                    * (float)((float)((float)v1005 - v1019)
                                                            * (float)((float)(v531 + 1) - v920)))
                                            + (float)(v927
                                                    * (float)((float)(v1019 - (float)v536)
                                                            * (float)((float)(v531 + 1) - v920))))))
                    * 255.0);
  v573 = (int)(float)((float)((float)(v874
                                    * (float)((float)(v1021 - (float)v1021) * (float)(v921 - (float)v530)))
                            + (float)((float)(v875 * (float)((float)(v921 - (float)v530) * (float)((float)v1009 - v1021)))
                                    + (float)((float)(v877
                                                    * (float)((float)((float)v1009 - v1021)
                                                            * (float)((float)(v530 + 1) - v921)))
                                            + (float)(v879
                                                    * (float)((float)(v1021 - (float)v1021)
                                                            * (float)((float)(v530 + 1) - v921))))))
                    * 255.0);
  v574 = (float)(1 << v528);
  v575 = (float)(1.0 / v574) * v922;
  v576 = (float)(1.0 / v574) * v1039;
  v577 = (float)(v424 * 1.4142) / v574;
  v578 = (unint64_t *)(v1042 + 144 * (v1043 * v528 + v529));
  v579 = v923 * v577;
  v580 = (float)(v923 * v577) * 0.5;
  v581 = v577 * v1041;
  v582 = (float)v578[4] + -1.001;
  v583 = v575 - v580;
  v584 = (float)((float)(v577 * v1041) * 0.70711) + (float)(v575 - v580);
  if (v582 >= v584)
    v585 = (float)(v581 * 0.70711) + v583;
  else
    v585 = (float)v578[4] + -1.001;
  v458 = v584 < 0.0;
  v586 = v11.__sinval * v577;
  v587 = (float)v578[6] + -1.001;
  if (v458)
    v588 = 0.0;
  else
    v588 = v585;
  v589 = v586 * 0.5;
  v590 = v579 * 0.70711;
  v591 = (float)(v579 * 0.70711) + (float)(v576 - (float)(v586 * 0.5));
  if (v587 >= v591)
    v592 = v590 + (float)(v576 - v589);
  else
    v592 = (float)v578[6] + -1.001;
  v458 = v591 < 0.0;
  v593 = v588;
  v594 = v588 + 1;
  v595 = (float)v594 - v588;
  v596 = v588 - (float)v588;
  if (v458)
    v592 = 0.0;
  v597 = v592;
  v598 = (float)(v597 + 1) - v592;
  v599 = v578[5];
  v600 = v578[11];
  v601 = v600 + 4 * v599 * v597;
  v602 = 4 * v599;
  v603 = (float)(*(float *)(v601 + 4 * v599 + 4 * v594) * (float)(v596 * (float)(v592 - (float)v592)))
       + (float)((float)(*(float *)(v601 + 4 * v599 + 4 * v593)
                       * (float)((float)(v592 - (float)v592) * v595))
               + (float)((float)(*(float *)(v601 + 4 * v593) * (float)(v595 * v598))
                       + (float)(*(float *)(v601 + 4 * v594) * (float)(v596 * v598))));
  v604 = v575 + v580;
  v605 = (float)(v581 * 0.70711) + (float)(v575 + v580);
  if (v582 >= v605)
    v606 = v605;
  else
    v606 = v582;
  if (v605 >= 0.0)
    v607 = v606;
  else
    v607 = 0.0;
  v608 = v576 + v589;
  v609 = v590 + (float)(v576 + v589);
  if (v587 >= v609)
    v610 = v609;
  else
    v610 = v587;
  v458 = v609 < 0.0;
  v611 = v607;
  v612 = v607 + 1;
  v613 = (float)v612 - v607;
  v614 = v607 - (float)v607;
  if (v458)
    v610 = 0.0;
  v615 = v610;
  v616 = (float)(v615 + 1) - v610;
  v617 = v600 + 4 * v599 * v615;
  v618 = (float)(*(float *)(v617 + v602 + 4 * v612) * (float)(v614 * (float)(v610 - (float)v610)))
       + (float)((float)(*(float *)(v617 + v602 + 4 * v611) * (float)((float)(v610 - (float)v610) * v613))
               + (float)((float)(*(float *)(v617 + 4 * v611) * (float)(v613 * v616))
                       + (float)(*(float *)(v617 + 4 * v612) * (float)(v614 * v616))));
  v619 = v581 * 0.0;
  v620 = (float)(v579 + v575) + (float)(v581 * 0.0);
  if (v582 >= v620)
    v621 = (float)(v579 + v575) + (float)(v581 * 0.0);
  else
    v621 = v582;
  if (v620 >= 0.0)
    v622 = v621;
  else
    v622 = 0.0;
  v623 = v579 * 0.0;
  v624 = (float)(v586 + v576) + (float)(v579 * 0.0);
  v625 = v622;
  if (v587 >= v624)
    v626 = (float)(v586 + v576) + (float)(v579 * 0.0);
  else
    v626 = v587;
  v458 = v624 < 0.0;
  v627 = (float)(v625 + 1) - v622;
  v628 = v622 - (float)v622;
  if (v458)
    v626 = 0.0;
  v629 = v626;
  v630 = (float)(v629 + 1) - v626;
  v631 = v600 + 4 * v599 * v629;
  v632 = (float)((float)((float)(*(float *)(v631 + 4 * v625) * (float)(v627 * v630))
                       + (float)((float)(v628 * v630) * *(float *)(v631 + 4 * (v625 + 1))))
               + (float)((float)(v627 * (float)(v626 - (float)v626)) * *(float *)(v631 + v602 + 4 * v625)))
       + (float)((float)(v628 * (float)(v626 - (float)v626)) * *(float *)(v631 + v602 + 4 * (v625 + 1)));
  v633 = v581 * -0.70711;
  v634 = (float)(v581 * -0.70711) + v604;
  if (v582 >= v634)
    v635 = v634;
  else
    v635 = v582;
  if (v634 >= 0.0)
    v636 = v635;
  else
    v636 = 0.0;
  v637 = v579 * -0.70711;
  v638 = (float)(v579 * -0.70711) + v608;
  if (v587 >= v638)
    v639 = v637 + v608;
  else
    v639 = v587;
  if (v638 >= 0.0)
    v640 = v639;
  else
    v640 = 0.0;
  v641 = v640;
  v642 = v636 + 1;
  v643 = (float)(v641 + 1) - v640;
  v644 = v600 + 4 * v599 * v641;
  v645 = (float)((float)((float)((float)((float)((float)v642 - v636) * v643)
                               * *(float *)(v644 + 4 * v636))
                       + (float)((float)((float)(v636 - (float)v636) * v643)
                               * *(float *)(v644 + 4 * v642)))
               + (float)((float)((float)(v640 - (float)v640) * (float)((float)v642 - v636))
                       * *(float *)(v644 + v602 + 4 * v636)))
       + (float)((float)((float)(v636 - (float)v636) * (float)(v640 - (float)v640))
               * *(float *)(v644 + v602 + 4 * v642));
  v646 = v633 + v583;
  if (v582 >= v646)
    v647 = v646;
  else
    v647 = v582;
  v648 = v637 + (float)(v576 - (float)(v586 * 0.5));
  if (v646 >= 0.0)
    v649 = v647;
  else
    v649 = 0.0;
  v650 = v649;
  if (v587 >= v648)
    v651 = v648;
  else
    v651 = v587;
  v458 = v648 < 0.0;
  v652 = (float)(v650 + 1) - v649;
  v653 = v649 - (float)v649;
  if (v458)
    v651 = 0.0;
  v654 = v651;
  v655 = (float)(v654 + 1) - v651;
  v656 = v600 + 4 * v599 * v654;
  v657 = (float)((float)((float)((float)(v652 * v655) * *(float *)(v656 + 4 * v650))
                       + (float)((float)(v653 * v655) * *(float *)(v656 + 4 * (v650 + 1))))
               + (float)((float)((float)(v651 - (float)v651) * v652) * *(float *)(v656 + v602 + 4 * v650)))
       + (float)((float)(v653 * (float)(v651 - (float)v651)) * *(float *)(v656 + v602 + 4 * (v650 + 1)));
  v658 = (float)(v575 - v579) + v619;
  if (v582 >= v658)
    v659 = v658;
  else
    v659 = v582;
  if (v658 >= 0.0)
    v660 = v659;
  else
    v660 = 0.0;
  v661 = (float)(v576 - v586) + v623;
  if (v587 >= v661)
    v662 = v661;
  else
    v662 = v587;
  if (v661 >= 0.0)
    v663 = v662;
  else
    v663 = 0.0;
  v664 = v663;
  v665 = v600 + 4 * v599 * v664;
  v666 = (float)((float)((float)((float)((float)((float)(v660 + 1) - v660)
                                       * (float)((float)(v664 + 1) - v663))
                               * *(float *)(v665 + 4 * v660))
                       + (float)((float)((float)(v660 - (float)v660)
                                       * (float)((float)(v664 + 1) - v663))
                               * *(float *)(v665 + 4 * (v660 + 1))))
               + (float)((float)((float)((float)(v660 + 1) - v660)
                               * (float)(v663 - (float)v663))
                       * *(float *)(v665 + v602 + 4 * v660)))
       + (float)((float)((float)(v660 - (float)v660) * (float)(v663 - (float)v663))
               * *(float *)(v665 + v602 + 4 * (v660 + 1)));
  v667 = v966 * 255.0;
  v668 = v553 * 255.0;
  v669 = v569;
  v999 = v569 > v483;
  v670 = v568;
  v997 = v568 > v483;
  v671 = v563;
  v990 = v563 > v483;
  v984 = v558 > v483;
  v672 = (int)(float)(v571 * 255.0);
  v673 = (int)(float)((float)((float)(v756 * (float)((float)(v889 - (float)v976) * (float)(v888 - (float)v885)))
                            + (float)((float)(v728 * (float)((float)(v888 - (float)v885) * (float)((float)v977 - v889)))
                                    + (float)((float)(v729
                                                    * (float)((float)((float)v977 - v889)
                                                            * (float)((float)(v885 + 1) - v888)))
                                            + (float)(v730
                                                    * (float)((float)(v889 - (float)v976)
                                                            * (float)((float)(v885 + 1) - v888))))))
                    * 255.0);
  LODWORD(v665) = (int)(float)(v554 * 255.0);
  v1013 = (int)(float)((float)((float)(v759 * (float)((float)(v887 - (float)v974) * (float)(v886 - (float)v882)))
                             + (float)((float)(v734 * (float)((float)(v886 - (float)v882) * (float)((float)v975 - v887)))
                                     + (float)((float)(v732
                                                     * (float)((float)((float)v975 - v887)
                                                             * (float)((float)(v882 + 1) - v886)))
                                             + (float)(v860
                                                     * (float)((float)(v887 - (float)v974)
                                                             * (float)((float)(v882 + 1) - v886))))))
                     * 255.0);
  v1011 = (int)(float)((float)((float)((float)((float)((float)((float)((float)v971 - v880)
                                                             * (float)((float)(v876 + 1) - v878))
                                                     * v722)
                                             + (float)((float)((float)(v880 - (float)v972)
                                                             * (float)((float)(v876 + 1) - v878))
                                                     * v735))
                                     + (float)((float)((float)(v878 - (float)v876) * (float)((float)v971 - v880)) * v737))
                             + (float)((float)((float)(v880 - (float)v972) * (float)(v878 - (float)v876)) * v763))
                     * 255.0);
  LODWORD(v664) = (int)(float)((float)((float)((float)((float)(v726
                                                             * (float)((float)((float)v973 - v884)
                                                                     * (float)((float)(v881 + 1) - v883)))
                                                     + (float)((float)((float)(v884 - (float)v870)
                                                                     * (float)((float)(v881 + 1) - v883))
                                                             * v727))
                                             + (float)((float)((float)(v883 - (float)v881) * (float)((float)v973 - v884))
                                                     * v733))
                                     + (float)((float)((float)(v884 - (float)v870) * (float)(v883 - (float)v881)) * v761))
                             * 255.0);
  v1036 = (int)(float)((float)((float)((float)((float)((float)((float)((float)v969 - v872)
                                                             * (float)((float)(v871 + 1) - v873))
                                                     * v717)
                                             + (float)((float)((float)(v872 - (float)v970)
                                                             * (float)((float)(v871 + 1) - v873))
                                                     * v718))
                                     + (float)((float)((float)(v873 - (float)v871) * (float)((float)v969 - v872)) * v736))
                             + (float)((float)((float)(v872 - (float)v970) * (float)(v873 - (float)v871)) * v937))
                     * 255.0);
  v1040 = (int)(float)((float)((float)((float)((float)((float)((float)((float)v967 - v869)
                                                             * (float)((float)(v867 + 1) - v868))
                                                     * v723)
                                             + (float)((float)((float)(v869 - (float)v968)
                                                             * (float)((float)(v867 + 1) - v868))
                                                     * v739))
                                     + (float)((float)((float)(v868 - (float)v867) * (float)((float)v967 - v869)) * v767))
                             + (float)((float)((float)(v869 - (float)v968) * (float)(v868 - (float)v867)) * v935))
                     * 255.0);
  v674 = (int)(float)(v951 * 255.0);
  v1004 = (int)(float)((float)((float)((float)((float)((float)((float)((float)v807 - v848)
                                                             * (float)((float)(v829 + 1) - v847))
                                                     * *(float *)(v782 + v743))
                                             + (float)((float)((float)(v848 - (float)v808)
                                                             * (float)((float)(v829 + 1) - v847))
                                                     * *(float *)(v782 + 4 * v807)))
                                     + (float)((float)((float)(v847 - (float)v829)
                                                     * (float)((float)v807 - v848))
                                             * *(float *)(v775 + v743)))
                             + (float)((float)((float)(v848 - (float)v808) * (float)(v847 - (float)v829))
                                     * *(float *)(v775 + 4 * v807)))
                     * 255.0);
  v675 = (int)(float)(v953 * 255.0);
  v1018 = (int)(float)((float)((float)((float)((float)((float)((float)((float)v800 - v840)
                                                             * (float)((float)(v819 + 1) - v836))
                                                     * *(float *)(v785 + v742))
                                             + (float)((float)((float)(v840 - (float)v802)
                                                             * (float)((float)(v819 + 1) - v836))
                                                     * *(float *)(v785 + v741)))
                                     + (float)((float)((float)(v836 - (float)v819)
                                                     * (float)((float)v800 - v840))
                                             * *(float *)(v776 + v742)))
                             + (float)((float)((float)(v840 - (float)v802) * (float)(v836 - (float)v819))
                                     * *(float *)(v776 + v741)))
                     * 255.0);
  v1008 = (int)(float)(v958 * 255.0);
  v1044 = (int)(float)((float)((float)((float)((float)((float)((float)((float)v793 - v828)
                                                             * (float)((float)(v810 + 1) - v826))
                                                     * *(float *)(v786 + v740))
                                             + (float)((float)((float)(v828 - (float)v796)
                                                             * (float)((float)(v810 + 1) - v826))
                                                     * *(float *)(v786 + 4 * v793)))
                                     + (float)((float)((float)((float)v793 - v828)
                                                     * (float)(v826 - (float)v810))
                                             * *(float *)(v777 + v740)))
                             + (float)((float)((float)(v828 - (float)v796) * (float)(v826 - (float)v810))
                                     * *(float *)(v777 + 4 * v793)))
                     * 255.0);
  v676 = (int)(float)(v960 * 255.0);
  v677 = (int)(float)(v964 * 255.0);
  v1006 = (int)(float)(v962 * 255.0);
  v1020 = (int)(float)(v618 * 255.0);
  v1022 = (int)(float)(v632 * 255.0);
  v678 = (int)(float)(v645 * 255.0);
  v679 = (int)(float)(v657 * 255.0);
  v680 = (int)(float)(v666 * 255.0);
  *(_BYTE *)v924 = (v573 > v483) | (4 * (v570 > v483)) | (2 * (v572 > v483)) | (8 * v999) | (16 * v997) | (32 * (v567 > v483)) | ((v566 > v483) << 6) | ((v565 > v483) << 7);
  *((_BYTE *)v924 + 1) = (v564 > v483) | (2 * v990) | (4 * (v562 > v483)) | (8 * (v561 > v483)) | (16 * (v560 > v483)) | (32 * (v559 > v483)) | (v984 << 6) | ((v1029 > v483) << 7);
  *((_BYTE *)v924 + 2) = (v672 > v483) | (2 * (v665 > v483)) | (4 * (v673 > v483)) | (8 * (v1013 > v483)) | (16 * (v664 > v483)) | (32 * (v1011 > v483)) | ((v1036 > v483) << 6) | ((v1040 > v483) << 7);
  *((_BYTE *)v924 + 3) = ((int)v668 > v483) | (2 * (v674 > v483)) | (4 * (v675 > v483)) | (8 * (v1004 > v483)) | (16 * (v1018 > v483)) | (32 * (v1044 > v483)) | ((v1008 > v483) << 6) | ((v676 > v483) << 7);
  *(_OWORD *)((char *)v924 + 4) = 0u;
  *((_BYTE *)v924 + 4) |= (v1006 > v483) | (2 * (v677 > v483)) | (4 * ((int)(float)(v966 * 255.0) > v483)) | (8 * ((int)(float)(v1024 * 255.0) > v483)) | (16 * ((int)(float)(v603 * 255.0) > v483)) | (32 * (v1020 > v483)) | ((v1022 > v483) << 6) | ((v678 > v483) << 7);
  *((_BYTE *)v924 + 5) |= (4 * (v573 < v572)) | (8 * (v573 < v570)) | ((v572 < v570) << 7) | (16 * (v573 < v669)) | (32 * (v573 < v670)) | ((v573 < v567) << 6) | (v679 > v483) | (2 * (v680 > v483));
  *((_BYTE *)v924 + 6) |= (v572 < v669) | (8 * (v570 < v669)) | (2 * (v572 < v670)) | (16 * (v570 < v670)) | ((v669 < v670) << 6) | (4 * (v572 < v567)) | (32 * (v570 < v567)) | ((v669 < v567) << 7);
  *((_BYTE *)v924 + 7) |= (v670 < v567) | (2 * (v566 < v565)) | (4 * (v566 < v564)) | ((v565 < v564) << 6) | (8 * (v566 < v671)) | ((v565 < v671) << 7) | (16 * (v566 < v562)) | (32 * (v566 < v561));
  *((_BYTE *)v924 + 8) |= (v565 < v562) | (4 * (v564 < v671)) | (8 * (v564 < v562)) | (32 * (v671 < v562)) | (2 * (v565 < v561)) | (16 * (v564 < v561)) | ((v671 < v561) << 6) | ((v562 < v561) << 7);
  *((_BYTE *)v924 + 9) |= (v560 < v559) | (2 * (v560 < v1038)) | (32 * (v559 < v1038)) | (4 * (v560 < v1029)) | ((v559 < v1029) << 6) | (8 * (v560 < v672)) | ((v559 < v672) << 7) | (16 * (v560 < v665));
  *((_BYTE *)v924 + 10) |= (2 * (v1038 < v1029)) | (4 * (v1038 < v672)) | (16 * (v1029 < v672)) | (v559 < v665) | (8 * (v1038 < v665)) | (32 * (v1029 < v665)) | ((v672 < v665) << 6) | ((v673 < v1013) << 7);
  *((_BYTE *)v924 + 11) |= (v673 < v664) | (16 * (v1013 < v664)) | (2 * (v673 < v1011)) | (32 * (v1013 < v1011)) | (4 * (v673 < v1036)) | ((v1013 < v1036) << 6) | (8 * (v673 < v1040)) | ((v1013 < v1040) << 7);
  *((_BYTE *)v924 + 12) |= (v664 < v1011) | (2 * (v664 < v1036)) | (8 * (v1011 < v1036)) | (4 * (v664 < v1040)) | (16 * (v1011 < v1040)) | (32 * (v1036 < v1040)) | (((int)v668 < v674) << 6) | (((int)v668 < v675) << 7);
  *((_BYTE *)v924 + 13) |= ((int)v668 < v1004) | (8 * (v674 < v675)) | (16 * (v674 < v1004)) | ((v675 < v1004) << 7) | (2 * ((int)v668 < v1018)) | (32 * (v674 < v1018)) | (4 * ((int)v668 < v1044)) | ((v674 < v1044) << 6);
  *((_BYTE *)v924 + 14) |= (v675 < v1018) | (4 * (v1004 < v1018)) | (2 * (v675 < v1044)) | (8 * (v1004 < v1044)) | (16 * (v1018 < v1044)) | (32 * (v1008 < v676)) | ((v1008 < v1006) << 6) | ((v1008 < v677) << 7);
  *((_BYTE *)v924 + 15) |= (4 * (v676 < v1006)) | (8 * (v676 < v677)) | ((v1006 < v677) << 6) | (v1008 < (int)(float)(v966 * 255.0)) | (16 * (v676 < (int)(float)(v966 * 255.0))) | ((v1006 < (int)(float)(v966 * 255.0)) << 7) | (2 * (v1008 < (int)(float)(v1024 * 255.0))) | (32 * (v676 < (int)(float)(v1024 * 255.0)));
  *((_BYTE *)v924 + 16) |= (v1006 < (int)(float)(v1024 * 255.0)) | (2 * (v677 < (int)(float)(v966 * 255.0))) | (4 * (v677 < (int)(float)(v1024 * 255.0))) | (8 * ((int)(float)(v966 * 255.0) < (int)(float)(v1024 * 255.0))) | (16 * ((int)(float)(v603 * 255.0) < v1020)) | (32 * ((int)(float)(v603 * 255.0) < v1022)) | (((int)(float)(v603 * 255.0) < v678) << 6) | (((int)(float)(v603 * 255.0) < v679) << 7);
  *((_BYTE *)v924 + 17) |= (2 * (v1020 < v1022)) | (4 * (v1020 < v678)) | (32 * (v1022 < v678)) | (8 * (v1020 < v679)) | ((v1022 < v679) << 6) | ((int)(float)(v603 * 255.0) < v680) | (16 * (v1020 < v680)) | ((v1022 < v680) << 7);
  *((_BYTE *)v924 + 18) |= (8 * (v566 > v573)) | (16 * (v565 > v573)) | (32 * (v564 > v573)) | ((v671 > v573) << 6) | ((v562 > v573) << 7) | (v678 < v679) | (2 * (v678 < v680)) | (4 * (v679 < v680));
  *((_BYTE *)v924 + 19) |= (2 * (v566 > v572)) | (4 * (v565 > v572)) | (8 * (v564 > v572)) | ((v566 > v570) << 7) | (16 * (v671 > v572)) | (32 * (v562 > v572)) | (v561 > v573) | ((v561 > v572) << 6);
  *(_OWORD *)((char *)v924 + 20) = 0u;
  *((_BYTE *)v924 + 20) |= (v565 > v570) | (2 * (v564 > v570)) | (32 * (v566 > v669)) | ((v565 > v669) << 6) | ((v564 > v669) << 7) | (4 * (v671 > v570)) | (8 * (v562 > v570)) | (16 * (v561 > v570));
  *((_BYTE *)v924 + 21) |= (8 * (v566 > v670)) | (16 * (v565 > v670)) | (32 * (v564 > v670)) | (v671 > v669) | ((v671 > v670) << 6) | (2 * (v562 > v669)) | ((v562 > v670) << 7) | (4 * (v561 > v669));
  *((_BYTE *)v924 + 22) |= (2 * (v566 > v567)) | (4 * (v565 > v567)) | (8 * (v564 > v567)) | (16 * (v671 > v567)) | (32 * (v562 > v567)) | (v561 > v670) | ((v561 > v567) << 6) | ((v560 > v566) << 7);
  *((_BYTE *)v924 + 23) |= (v559 > v566) | (2 * (v1038 > v566)) | (32 * (v560 > v565)) | ((v559 > v565) << 6) | ((v1038 > v565) << 7) | (4 * (v1029 > v566)) | (8 * (v672 > v566)) | (16 * (v665 > v566));
  *((_BYTE *)v924 + 24) |= (8 * (v560 > v564)) | (16 * (v559 > v564)) | (32 * (v1038 > v564)) | (v1029 > v565) | ((v1029 > v564) << 6) | (2 * (v672 > v565)) | ((v672 > v564) << 7) | (4 * (v665 > v565));
  *((_BYTE *)v924 + 25) |= (2 * (v560 > v671)) | (4 * (v559 > v671)) | (8 * (v1038 > v671)) | ((v560 > v562) << 7) | (16 * (v1029 > v671)) | (32 * (v672 > v671)) | (v665 > v564) | ((v665 > v671) << 6);
  *((_BYTE *)v924 + 26) |= (v559 > v562) | (2 * (v1038 > v562)) | (32 * (v560 > v561)) | ((v559 > v561) << 6) | ((v1038 > v561) << 7) | (4 * (v1029 > v562)) | (8 * (v672 > v562)) | (16 * (v665 > v562));
  *((_BYTE *)v924 + 27) |= (v1029 > v561) | (2 * (v672 > v561)) | (4 * (v665 > v561)) | (8 * (v673 > v560)) | (16 * (v1013 > v560)) | (32 * (v664 > v560)) | ((v1011 > v560) << 6) | ((v1036 > v560) << 7);
  *((_BYTE *)v924 + 28) |= (2 * (v673 > v559)) | (4 * (v1013 > v559)) | (8 * (v664 > v559)) | ((v673 > v1038) << 7) | (16 * (v1011 > v559)) | (32 * (v1036 > v559)) | (v1040 > v560) | ((v1040 > v559) << 6);
  *((_BYTE *)v924 + 29) |= (v1013 > v1038) | (2 * (v664 > v1038)) | (32 * (v673 > v1029)) | ((v1013 > v1029) << 6) | ((v664 > v1029) << 7) | (4 * (v1011 > v1038)) | (8 * (v1036 > v1038)) | (16 * (v1040 > v1038));
  *((_BYTE *)v924 + 30) |= (8 * (v673 > v672)) | (16 * (v1013 > v672)) | (32 * (v664 > v672)) | (v1011 > v1029) | ((v1011 > v672) << 6) | (2 * (v1036 > v1029)) | ((v1036 > v672) << 7) | (4 * (v1040 > v1029));
  *((_BYTE *)v924 + 31) |= (2 * (v673 > v665)) | (4 * (v1013 > v665)) | (8 * (v664 > v665)) | (16 * (v1011 > v665)) | (32 * (v1036 > v665)) | (v1040 > v672) | ((v1040 > v665) << 6) | (((int)v668 > v673) << 7);
  *((_BYTE *)v924 + 32) |= (v674 > v673) | (2 * (v675 > v673)) | (32 * ((int)v668 > v1013)) | ((v674 > v1013) << 6) | ((v675 > v1013) << 7) | (4 * (v1004 > v673)) | (8 * (v1018 > v673)) | (16 * (v1044 > v673));
  *((_BYTE *)v924 + 33) |= (8 * ((int)v668 > v664)) | (16 * (v674 > v664)) | (32 * (v675 > v664)) | (v1004 > v1013) | ((v1004 > v664) << 6) | (2 * (v1018 > v1013)) | ((v1018 > v664) << 7) | (4 * (v1044 > v1013));
  *((_BYTE *)v924 + 34) |= (2 * ((int)v668 > v1011)) | (4 * (v674 > v1011)) | (8 * (v675 > v1011)) | (((int)v668 > v1036) << 7) | (16 * (v1004 > v1011)) | (32 * (v1018 > v1011)) | (v1044 > v664) | ((v1044 > v1011) << 6);
  *((_BYTE *)v924 + 35) |= (v674 > v1036) | (2 * (v675 > v1036)) | (32 * ((int)v668 > v1040)) | ((v674 > v1040) << 6) | ((v675 > v1040) << 7) | (4 * (v1004 > v1036)) | (8 * (v1018 > v1036)) | (16 * (v1044 > v1036));
  v924[3] = 0u;
  *(_OWORD *)((char *)v924 + 36) = 0u;
  *((_BYTE *)v924 + 36) |= (v1004 > v1040) | (2 * (v1018 > v1040)) | (4 * (v1044 > v1040)) | (8 * (v1008 > (int)v668)) | (16 * (v676 > (int)v668)) | (32 * (v1006 > (int)v668)) | ((v677 > (int)v668) << 6) | (((int)(float)(v966 * 255.0) > (int)v668) << 7);
  *((_BYTE *)v924 + 37) |= (2 * (v1008 > v674)) | (4 * (v676 > v674)) | (8 * (v1006 > v674)) | ((v1008 > v675) << 7) | (16 * (v677 > v674)) | (32 * ((int)(float)(v966 * 255.0) > v674)) | ((int)(float)(v1024 * 255.0) > (int)v668) | (((int)(float)(v1024 * 255.0) > v674) << 6);
  *((_BYTE *)v924 + 38) |= (v676 > v675) | (2 * (v1006 > v675)) | (32 * (v1008 > v1004)) | ((v676 > v1004) << 6) | ((v1006 > v1004) << 7) | (4 * (v677 > v675)) | (8 * ((int)(float)(v966 * 255.0) > v675)) | (16 * ((int)(float)(v1024 * 255.0) > v675));
  *((_BYTE *)v924 + 39) |= (8 * (v1008 > v1018)) | (16 * (v676 > v1018)) | (32 * (v1006 > v1018)) | (v677 > v1004) | ((v677 > v1018) << 6) | (2 * ((int)(float)(v966 * 255.0) > v1004)) | (((int)(float)(v966 * 255.0) > v1018) << 7) | (4 * ((int)(float)(v1024 * 255.0) > v1004));
  *((_BYTE *)v924 + 40) |= (2 * (v1008 > v1044)) | (4 * (v676 > v1044)) | (8 * (v1006 > v1044)) | (16 * (v677 > v1044)) | (32 * ((int)(float)(v966 * 255.0) > v1044)) | ((int)(float)(v1024 * 255.0) > v1018) | (((int)(float)(v1024 * 255.0) > v1044) << 6) | (((int)(float)(v603 * 255.0) > v1008) << 7);
  *((_BYTE *)v924 + 41) |= (v1020 > v1008) | (2 * (v1022 > v1008)) | (32 * ((int)(float)(v603 * 255.0) > v676)) | ((v1020 > v676) << 6) | ((v1022 > v676) << 7) | (4 * (v678 > v1008)) | (8 * (v679 > v1008)) | (16 * (v680 > v1008));
  *((_BYTE *)v924 + 42) |= (8 * ((int)(float)(v603 * 255.0) > v1006)) | (16 * (v1020 > v1006)) | (32 * (v1022 > v1006)) | (v678 > v676) | ((v678 > v1006) << 6) | (2 * (v679 > v676)) | ((v679 > v1006) << 7) | (4 * (v680 > v676));
  *((_BYTE *)v924 + 43) |= (2 * ((int)(float)(v603 * 255.0) > v677)) | (4 * (v1020 > v677)) | (8 * (v1022 > v677)) | (((int)(float)(v603 * 255.0) > (int)(float)(v966 * 255.0)) << 7) | (16 * (v678 > v677)) | (32 * (v679 > v677)) | (v680 > v1006) | ((v680 > v677) << 6);
  result = *((unsigned __int8 *)v924 + 44);
  *((_BYTE *)v924 + 44) = (v1020 > (int)v667) | (2 * (v1022 > (int)v667)) | (32
                                                                           * ((int)(float)(v603 * 255.0) > (int)(float)(v1024 * 255.0))) | ((v1020 > (int)(float)(v1024 * 255.0)) << 6) | ((v1022 > (int)(float)(v1024 * 255.0)) << 7) | (4 * (v678 > (int)v667)) | (8 * (v679 > (int)v667)) | (16 * (v680 > (int)v667)) | result;
  *((_BYTE *)v924 + 45) |= (8 * (v573 < v560)) | (16 * (v572 < v559)) | (32 * (v570 < v1038)) | ((v669 < v1029) << 6) | ((v670 < v672) << 7) | (v678 > (int)(float)(v1024 * 255.0)) | (2 * (v679 > (int)(float)(v1024 * 255.0))) | (4 * (v680 > (int)(float)(v1024 * 255.0)));
  *((_BYTE *)v924 + 46) |= (16 * (v669 < v560)) | (32 * (v670 < v559)) | ((v567 < v1038) << 6) | (2 * (v573 < v1029)) | (4 * (v572 < v672)) | (v567 < v665) | (8 * (v570 < v665)) | ((v573 < (int)v668) << 7);
  *((_BYTE *)v924 + 47) |= (v572 < v674) | (2 * (v570 < v675)) | (4 * (v669 < v1004)) | (32 * (v573 < v1004)) | (8 * (v670 < v1018)) | ((v572 < v1018) << 6) | (16 * (v567 < v1044)) | ((v570 < v1044) << 7);
  *((_BYTE *)v924 + 48) |= (v669 < (int)v668) | (2 * (v670 < v674)) | (4 * (v567 < v675)) | (8
                                                                                           * (v573 < (int)(float)(v603 * 255.0))) | (16 * (v572 < v1020)) | (32 * (v570 < v1022)) | ((v669 < v678) << 6) | ((v670 < v679) << 7);
  *((_BYTE *)v924 + 49) |= ((v1033 < v673) << 7) | (16 * (v669 < (int)(float)(v603 * 255.0))) | (32 * (v670 < v1020)) | ((v567 < v1022) << 6) | (2 * (v573 < v678)) | (4 * (v572 < v679)) | (v567 < v680) | (8 * (v570 < v680));
  *((_BYTE *)v924 + 50) |= (v565 < v1013) | (2 * (v564 < v664)) | (4 * (v671 < v1011)) | (32 * (v1033 < v1011)) | (8 * (v562 < v1036)) | ((v565 < v1036) << 6) | (16 * (v561 < v1040)) | ((v564 < v1040) << 7);
  *((_BYTE *)v924 + 51) |= (v671 < v673) | (2 * (v562 < v1013)) | (4 * (v561 < v664)) | (8 * (v1033 < v1008)) | (16 * (v565 < v676)) | (32 * (v564 < v1006)) | ((v671 < v677) << 6) | ((v562 < (int)(float)(v966 * 255.0)) << 7);
  *((_BYTE *)v924 + 52) |= ((v560 < (int)v668) << 7) | (16 * (v671 < v1008)) | (32 * (v562 < v676)) | ((v561 < v1006) << 6) | (2 * (v1033 < v677)) | (4 * (v565 < (int)(float)(v966 * 255.0))) | (v561 < (int)(float)(v1024 * 255.0)) | (8 * (v564 < (int)(float)(v1024 * 255.0)));
  *((_BYTE *)v924 + 53) |= (v559 < v674) | (2 * (v1038 < v675)) | (4 * (v1029 < v1004)) | (32 * (v560 < v1004)) | (8 * (v672 < v1018)) | ((v559 < v1018) << 6) | (16 * (v665 < v1044)) | ((v1038 < v1044) << 7);
  *((_BYTE *)v924 + 54) |= (v1029 < (int)v668) | (2 * (v672 < v674)) | (4 * (v665 < v675)) | (8 * (v560 < (int)(float)(v603 * 255.0))) | (16 * (v559 < v1020)) | (32 * (v1038 < v1022)) | ((v1029 < v678) << 6) | ((v672 < v679) << 7);
  *((_BYTE *)v924 + 55) |= ((v673 < v1008) << 7) | (16 * (v1029 < (int)(float)(v603 * 255.0))) | (32 * (v672 < v1020)) | ((v665 < v1022) << 6) | (2 * (v560 < v678)) | (4 * (v559 < v679)) | (v665 < v680) | (8 * (v1038 < v680));
  *((_BYTE *)v924 + 56) |= (v1013 < v676) | (2 * (v664 < v1006)) | (4 * (v1011 < v677)) | (32 * (v673 < v677)) | (8 * (v1036 < (int)(float)(v966 * 255.0))) | ((v1013 < (int)(float)(v966 * 255.0)) << 6) | (16 * (v1040 < (int)(float)(v1024 * 255.0))) | ((v664 < (int)(float)(v1024 * 255.0)) << 7);
  *((_BYTE *)v924 + 57) |= (v1011 < v1008) | (2 * (v1036 < v676)) | (4 * (v1040 < v1006)) | (8
                                                                                           * ((int)v668 < (int)(float)(v603 * 255.0))) | (16 * (v674 < v1020)) | (32 * (v675 < v1022)) | ((v1004 < v678) << 6) | ((v1018 < v679) << 7);
  *((_BYTE *)v924 + 58) |= (16 * (v1004 < (int)(float)(v603 * 255.0))) | (32 * (v1018 < v1020)) | ((v1044 < v1022) << 6) | (2 * ((int)v668 < v678)) | (4 * (v674 < v679)) | (v1044 < v680) | (8 * (v675 < v680));
  return result;
}

double sub_20FD65168(uint64_t a1, unint64_t a2, uint64_t a3, char a4, __n128 a5)
{
  __n128 *v9;
  __n128 *v10;
  __n128 *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  __n128 *v16;
  float v17;
  float *v18;
  float v19;
  __n128 v20;
  __int128 v21;
  float v22;
  float *v23;
  __n128 v24;
  __n128 v25;
  __n128 v26;
  __n128 v27;
  __n128 v28;
  __n128 v29;
  __n128 v30;
  __int128 v31;
  __n128 v32;
  __n128 v33;
  __n128 v34;
  __n128 v35;
  __n128 v36;
  __n128 v37;
  __int128 *v38;
  unint64_t v39;
  float *v40;
  float v41;
  float v42;
  float *v43;
  float v44;
  __n128 v45;
  __int128 v46;
  __int128 v47;
  __n128 v48;
  __int128 v49;
  __n128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __n128 v54;
  __int128 v55;
  __n128 v56;
  __n128 v57;
  __n128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __n128 v62;
  __int128 v63;
  __n128 v64;
  __int128 v65;
  __int128 *v66;
  unint64_t v67;
  float *v68;
  float v69;
  float v70;
  float *v71;
  float v72;
  __n128 v73;
  __int128 v74;
  __int128 v75;
  __n128 v76;
  __int128 v77;
  __n128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __n128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __n128 v86;
  __int128 v87;
  __n128 v88;
  __int128 v89;
  float v90;
  float v91;
  __int128 v92;
  __n128 v93;
  __n128 v94;
  __n128 v95;
  __n128 v96;
  __n128 v97;
  __n128 v98;
  uint64_t v99;
  float v100;
  unint64_t v101;
  unint64_t v102;
  float *v103;
  float v104;
  unint64_t v105;
  float v106;
  float *v107;
  __int128 v108;
  __int128 v109;
  float v110;
  float v111;
  __n128 *v112;
  __n128 v113;
  __int128 v114;
  BOOL v115;
  __n128 v116;
  unint64_t v117;
  float v118;
  unint64_t v119;
  float v120;
  float *v121;
  unint64_t v122;
  float v123;
  __int128 v124;
  __int128 v125;
  float v126;
  float v127;
  __n128 *v128;
  __n128 v129;
  __int128 v130;
  __int128 v131;
  unint64_t v132;
  float v133;
  __n128 v134;
  __int128 v135;
  __int128 v136;
  __int128 v137;
  __n128 *v138;
  float v139;
  float v140;
  __int128 v141;
  _OWORD *v142;
  BOOL v144;
  uint64_t v145;
  _OWORD *v146;
  uint64_t v147;
  float v148;
  uint64_t v149;
  float *v150;
  __int128 v151;
  int64_t v152;
  int64_t v153;
  BOOL v154;
  uint64_t v155;
  unint64_t v156;
  float v157;
  unint64_t v158;
  _OWORD *v159;
  __int128 v160;
  __int128 v161;
  uint64_t v162;
  uint64_t v163;
  int64_t v164;
  uint64_t v165;
  unint64_t v166;
  __n128 v167;
  __n128 v168;
  __n128 *v169;
  uint64_t v170;
  uint64_t v171;
  int64_t v172;
  __int128 v173;
  uint64_t v174;
  unint64_t v175;
  _OWORD *v176;
  __n128 v177;
  __int128 v178;
  __int128 v179;
  __n128 v180;
  __int128 v181;
  __int128 v182;
  __n128 v183;
  __int128 v184;
  __int128 v185;
  float v186;
  _OWORD *v187;
  __int128 v188;
  float v189;
  __int128 v190;
  __n128 v191;
  __int128 v192;
  __int128 v193;
  __int128 v194;
  __n128 v195;
  __int128 v196;
  __int128 v197;
  __n128 v198;
  __int128 v199;
  __int128 v200;
  __n128 v201;
  __int128 v202;
  __int128 v203;
  __n128 v205;
  __n128 v206;
  __n128 v207;
  __n128 v208;
  __n128 v209;
  __n128 v210;
  __n128 v211;
  __n128 v212;
  __n128 v213;
  __n128 v214;
  __n128 v215;
  __n128 v216;
  __n128 v217;
  __n128 v218;
  __n128 v219;
  __n128 v220;
  __n128 v221;
  __n128 v222;
  __n128 v223;
  __n128 v224;
  __n128 v225;
  __n128 v226;
  __int128 v227;
  __int128 v228;
  __n128 v229;
  __n128 v230;
  __int128 v231;
  __n128 v232;
  __n128 v233;
  __n128 v234;
  __n128 v235;
  __n128 v236;
  __n128 v237;
  __n128 v238;
  __int128 v239;
  __n128 v240;
  __n128 v241;
  __int128 v242;
  __int128 v243;
  __n128 v244;
  __int128 v245;
  __int128 v246;
  __int128 v247;
  __int128 v248;
  __int128 v249;
  __int128 v250;
  __n128 v251;
  __n128 v252;
  __n128 v253;
  __n128 v254;
  __n128 v255;
  __int128 v256;
  __int128 v257;
  __int128 v258;
  __int128 v259;
  __int128 v260;
  _BYTE v261[28];
  _BYTE v262[28];
  __int128 v263;
  __int128 v264;
  __int128 v265;
  _BYTE v266[28];
  __int128 v267;
  __int128 v268;
  __int128 v269;
  __int128 v270;
  __n128 v271;
  __n128 v272;
  __n128 v273;
  __n128 v274;
  __int128 v275;
  __n128 v276;
  __n128 v277;
  __int128 v278;
  __n128 v279;
  __int128 v280;
  __int128 v281;
  __int128 v282;
  __n128 v283;
  __n128 v284;
  __n128 v285;
  __n128 v286;
  __n128 v287;
  __int128 v288;
  __int128 v289;
  __int128 v290;
  __int128 v291;
  __n128 v292;
  __int128 v293;
  __int128 v294;
  __int128 v295;
  __int128 v296;
  __int128 v297;
  __n128 v298;
  __n128 v299;
  __n128 v300;
  _BYTE v301[28];
  _BYTE v302[28];
  _BYTE v303[28];

BOOL sub_20FD661C8(uint64_t a1, uint64_t a2, __n128 a3)
{
  uint64_t v4;
  __int128 *v5;
  float v6;
  float v7;
  float v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 *v18;
  __int128 *v19;
  float v20;
  float v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 *v27;
  float v28;
  float v29;
  float v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  uint64_t v65;
  uint64_t v66;
  int v67;
  uint64_t v68;
  float v69;
  uint64_t v70;
  uint64_t v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  _OWORD *v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  _BYTE v95[28];

  switch(0xAAAAAAAAAAAAAAABLL * ((a2 - a1) >> 4))
  {
    case 0uLL:
    case 1uLL:
      return 1;
    case 2uLL:
      if (*(float *)(a2 - 4) <= *(float *)(a1 + 44))
        return 1;
      v13 = *(_OWORD *)a1;
      v14 = *(_OWORD *)(a1 + 16);
      v15 = *(_OWORD *)(a1 + 32);
      v17 = *(_OWORD *)(a2 - 32);
      v16 = *(_OWORD *)(a2 - 16);
      *(_OWORD *)a1 = *(_OWORD *)(a2 - 48);
      *(_OWORD *)(a1 + 16) = v17;
      *(_OWORD *)(a1 + 32) = v16;
      *(_OWORD *)(a2 - 32) = v14;
      *(_OWORD *)(a2 - 16) = v15;
      *(_OWORD *)(a2 - 48) = v13;
      return 1;
    case 3uLL:
      v18 = (__int128 *)(a1 + 48);
      v19 = (__int128 *)(a2 - 48);
      v20 = *(float *)(a1 + 92);
      v21 = *(float *)(a2 - 4);
      if (v20 <= *(float *)(a1 + 44))
      {
        if (v21 > v20)
        {
          v43 = *v18;
          v44 = *(_OWORD *)(a1 + 64);
          v45 = *(_OWORD *)(a1 + 80);
          v47 = *(_OWORD *)(a2 - 32);
          v46 = *(_OWORD *)(a2 - 16);
          *v18 = *v19;
          *(_OWORD *)(a1 + 64) = v47;
          *(_OWORD *)(a1 + 80) = v46;
          *(_OWORD *)(a2 - 32) = v44;
          *(_OWORD *)(a2 - 16) = v45;
          *v19 = v43;
          if (*(float *)(a1 + 92) > *(float *)(a1 + 44))
          {
LABEL_20:
            v49 = *(_OWORD *)(a1 + 16);
            v48 = *(_OWORD *)(a1 + 32);
            v50 = *(_OWORD *)a1;
            v51 = *(_OWORD *)(a1 + 64);
            *(_OWORD *)a1 = *v18;
            *(_OWORD *)(a1 + 16) = v51;
            *(_OWORD *)(a1 + 32) = *(_OWORD *)(a1 + 80);
            *v18 = v50;
            *(_OWORD *)(a1 + 64) = v49;
            *(_OWORD *)(a1 + 80) = v48;
            return 1;
          }
        }
        return 1;
      }
      if (v21 <= v20)
      {
        v74 = *(_OWORD *)(a1 + 16);
        v73 = *(_OWORD *)(a1 + 32);
        v75 = *(_OWORD *)a1;
        v76 = *(_OWORD *)(a1 + 64);
        *(_OWORD *)a1 = *v18;
        *(_OWORD *)(a1 + 16) = v76;
        *(_OWORD *)(a1 + 32) = *(_OWORD *)(a1 + 80);
        *v18 = v75;
        *(_OWORD *)(a1 + 64) = v74;
        *(_OWORD *)(a1 + 80) = v73;
        if (*(float *)(a2 - 4) > *(float *)(a1 + 92))
        {
          v22 = *v18;
          v23 = *(_OWORD *)(a1 + 64);
          v24 = *(_OWORD *)(a1 + 80);
          v78 = *(_OWORD *)(a2 - 32);
          v77 = *(_OWORD *)(a2 - 16);
          *v18 = *v19;
          *(_OWORD *)(a1 + 64) = v78;
          *(_OWORD *)(a1 + 80) = v77;
          goto LABEL_39;
        }
        return 1;
      }
      v22 = *(_OWORD *)a1;
      v23 = *(_OWORD *)(a1 + 16);
      v24 = *(_OWORD *)(a1 + 32);
      v26 = *(_OWORD *)(a2 - 32);
      v25 = *(_OWORD *)(a2 - 16);
      *(_OWORD *)a1 = *v19;
      *(_OWORD *)(a1 + 16) = v26;
      *(_OWORD *)(a1 + 32) = v25;
LABEL_39:
      *(_OWORD *)(a2 - 32) = v23;
      *(_OWORD *)(a2 - 16) = v24;
      *v19 = v22;
      return 1;
    case 4uLL:
      v18 = (__int128 *)(a1 + 48);
      v27 = (__int128 *)(a1 + 96);
      v28 = *(float *)(a1 + 92);
      v29 = *(float *)(a1 + 44);
      v30 = *(float *)(a1 + 140);
      if (v28 <= v29)
      {
        if (v30 > v28)
        {
          v53 = *(_OWORD *)(a1 + 64);
          v52 = *(_OWORD *)(a1 + 80);
          v54 = *v18;
          v55 = *(_OWORD *)(a1 + 112);
          *v18 = *v27;
          *(_OWORD *)(a1 + 64) = v55;
          *(_OWORD *)(a1 + 80) = *(_OWORD *)(a1 + 128);
          *v27 = v54;
          *(_OWORD *)(a1 + 112) = v53;
          *(_OWORD *)(a1 + 128) = v52;
          if (*(float *)(a1 + 92) > v29)
          {
            v57 = *(_OWORD *)(a1 + 16);
            v56 = *(_OWORD *)(a1 + 32);
            v58 = *(_OWORD *)a1;
            v59 = *(_OWORD *)(a1 + 64);
            *(_OWORD *)a1 = *v18;
            *(_OWORD *)(a1 + 16) = v59;
            *(_OWORD *)(a1 + 32) = *(_OWORD *)(a1 + 80);
            *v18 = v58;
            *(_OWORD *)(a1 + 64) = v57;
            *(_OWORD *)(a1 + 80) = v56;
          }
        }
      }
      else
      {
        if (v30 <= v28)
        {
          v80 = *(_OWORD *)(a1 + 16);
          v79 = *(_OWORD *)(a1 + 32);
          v81 = *(_OWORD *)a1;
          v82 = *(_OWORD *)(a1 + 64);
          *(_OWORD *)a1 = *v18;
          *(_OWORD *)(a1 + 16) = v82;
          *(_OWORD *)(a1 + 32) = *(_OWORD *)(a1 + 80);
          *v18 = v81;
          *(_OWORD *)(a1 + 64) = v80;
          *(_OWORD *)(a1 + 80) = v79;
          if (v30 <= *(float *)(a1 + 92))
            goto LABEL_43;
          v32 = *(_OWORD *)(a1 + 64);
          v31 = *(_OWORD *)(a1 + 80);
          v33 = *v18;
          v83 = *(_OWORD *)(a1 + 112);
          *v18 = *v27;
          *(_OWORD *)(a1 + 64) = v83;
          *(_OWORD *)(a1 + 80) = *(_OWORD *)(a1 + 128);
        }
        else
        {
          v32 = *(_OWORD *)(a1 + 16);
          v31 = *(_OWORD *)(a1 + 32);
          v33 = *(_OWORD *)a1;
          v34 = *(_OWORD *)(a1 + 112);
          *(_OWORD *)a1 = *v27;
          *(_OWORD *)(a1 + 16) = v34;
          *(_OWORD *)(a1 + 32) = *(_OWORD *)(a1 + 128);
        }
        *v27 = v33;
        *(_OWORD *)(a1 + 112) = v32;
        *(_OWORD *)(a1 + 128) = v31;
      }
LABEL_43:
      if (*(float *)(a2 - 4) <= *(float *)(a1 + 140))
        return 1;
      v84 = (_OWORD *)(a2 - 48);
      v85 = *v27;
      v86 = *(_OWORD *)(a1 + 112);
      v87 = *(_OWORD *)(a1 + 128);
      v89 = *(_OWORD *)(a2 - 32);
      v88 = *(_OWORD *)(a2 - 16);
      *v27 = *(_OWORD *)(a2 - 48);
      *(_OWORD *)(a1 + 112) = v89;
      *(_OWORD *)(a1 + 128) = v88;
      v84[1] = v86;
      v84[2] = v87;
      *v84 = v85;
      if (*(float *)(a1 + 140) <= *(float *)(a1 + 92))
        return 1;
      v91 = *(_OWORD *)(a1 + 64);
      v90 = *(_OWORD *)(a1 + 80);
      v92 = *v18;
      v93 = *(_OWORD *)(a1 + 112);
      *v18 = *v27;
      *(_OWORD *)(a1 + 64) = v93;
      *(_OWORD *)(a1 + 80) = *(_OWORD *)(a1 + 128);
      *v27 = v92;
      *(_OWORD *)(a1 + 112) = v91;
      *(_OWORD *)(a1 + 128) = v90;
      if (*(float *)(a1 + 92) <= *(float *)(a1 + 44))
        return 1;
      goto LABEL_20;
    case 5uLL:
      sub_20FD666F0(a1, a1 + 48, a1 + 96, a1 + 144, a2 - 48, a3);
      return 1;
    default:
      v4 = a1 + 96;
      v5 = (__int128 *)(a1 + 48);
      v6 = *(float *)(a1 + 92);
      v7 = *(float *)(a1 + 44);
      v8 = *(float *)(a1 + 140);
      if (v6 <= v7)
      {
        if (v8 > v6)
        {
          v36 = *(_OWORD *)(a1 + 64);
          v35 = *(_OWORD *)(a1 + 80);
          v37 = *v5;
          v38 = *(_OWORD *)(a1 + 112);
          *v5 = *(_OWORD *)v4;
          *(_OWORD *)(a1 + 64) = v38;
          *(_OWORD *)(a1 + 80) = *(_OWORD *)(a1 + 128);
          *(_OWORD *)v4 = v37;
          *(_OWORD *)(a1 + 112) = v36;
          *(_OWORD *)(a1 + 128) = v35;
          if (*(float *)(a1 + 92) > v7)
          {
            v40 = *(_OWORD *)(a1 + 16);
            v39 = *(_OWORD *)(a1 + 32);
            v41 = *(_OWORD *)a1;
            v42 = *(_OWORD *)(a1 + 64);
            *(_OWORD *)a1 = *v5;
            *(_OWORD *)(a1 + 16) = v42;
            *(_OWORD *)(a1 + 32) = *(_OWORD *)(a1 + 80);
            *v5 = v41;
            *(_OWORD *)(a1 + 64) = v40;
            *(_OWORD *)(a1 + 80) = v39;
          }
        }
      }
      else
      {
        if (v8 <= v6)
        {
          v61 = *(_OWORD *)(a1 + 16);
          v60 = *(_OWORD *)(a1 + 32);
          v62 = *(_OWORD *)a1;
          v63 = *(_OWORD *)(a1 + 64);
          *(_OWORD *)a1 = *v5;
          *(_OWORD *)(a1 + 16) = v63;
          *(_OWORD *)(a1 + 32) = *(_OWORD *)(a1 + 80);
          *v5 = v62;
          *(_OWORD *)(a1 + 64) = v61;
          *(_OWORD *)(a1 + 80) = v60;
          if (v8 <= *(float *)(a1 + 92))
            goto LABEL_27;
          v10 = *(_OWORD *)(a1 + 64);
          v9 = *(_OWORD *)(a1 + 80);
          v11 = *v5;
          v64 = *(_OWORD *)(a1 + 112);
          *v5 = *(_OWORD *)v4;
          *(_OWORD *)(a1 + 64) = v64;
          *(_OWORD *)(a1 + 80) = *(_OWORD *)(a1 + 128);
        }
        else
        {
          v10 = *(_OWORD *)(a1 + 16);
          v9 = *(_OWORD *)(a1 + 32);
          v11 = *(_OWORD *)a1;
          v12 = *(_OWORD *)(a1 + 112);
          *(_OWORD *)a1 = *(_OWORD *)v4;
          *(_OWORD *)(a1 + 16) = v12;
          *(_OWORD *)(a1 + 32) = *(_OWORD *)(a1 + 128);
        }
        *(_OWORD *)v4 = v11;
        *(_OWORD *)(a1 + 112) = v10;
        *(_OWORD *)(a1 + 128) = v9;
      }
LABEL_27:
      v65 = a1 + 144;
      if (a1 + 144 == a2)
        return 1;
      v66 = 0;
      v67 = 0;
      while (1)
      {
        v69 = *(float *)(v65 + 44);
        if (v69 > *(float *)(v4 + 44))
        {
          v94 = *(_OWORD *)v65;
          *(_OWORD *)v95 = *(_OWORD *)(v65 + 16);
          *(_OWORD *)&v95[12] = *(_OWORD *)(v65 + 28);
          v70 = v66;
          do
          {
            v71 = a1 + v70;
            v72 = *(_OWORD *)(a1 + v70 + 112);
            *(_OWORD *)(v71 + 144) = *(_OWORD *)(a1 + v70 + 96);
            *(_OWORD *)(v71 + 160) = v72;
            *(_OWORD *)(v71 + 176) = *(_OWORD *)(a1 + v70 + 128);
            if (v70 == -96)
            {
              v68 = a1;
              goto LABEL_30;
            }
            v70 -= 48;
          }
          while (v69 > *(float *)(v71 + 92));
          v68 = a1 + v70 + 144;
LABEL_30:
          *(_OWORD *)v68 = v94;
          *(_OWORD *)(v68 + 16) = *(_OWORD *)v95;
          *(_OWORD *)(v68 + 28) = *(_OWORD *)&v95[12];
          *(float *)(v68 + 44) = v69;
          if (++v67 == 8)
            return v65 + 48 == a2;
        }
        v4 = v65;
        v66 += 48;
        v65 += 48;
        if (v65 == a2)
          return 1;
      }
  }
}

__n128 sub_20FD666F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, __n128 result)
{
  float v6;
  float v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;

  v6 = *(float *)(a2 + 44);
  v7 = *(float *)(a3 + 44);
  if (v6 <= *(float *)(a1 + 44))
  {
    if (v7 > v6)
    {
      result = *(__n128 *)a2;
      v12 = *(_OWORD *)(a2 + 16);
      v13 = *(_OWORD *)(a2 + 32);
      v15 = *(_OWORD *)(a3 + 16);
      v14 = *(_OWORD *)(a3 + 32);
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *(_OWORD *)(a2 + 16) = v15;
      *(_OWORD *)(a2 + 32) = v14;
      *(_OWORD *)(a3 + 16) = v12;
      *(_OWORD *)(a3 + 32) = v13;
      *(__n128 *)a3 = result;
      if (*(float *)(a2 + 44) > *(float *)(a1 + 44))
      {
        result = *(__n128 *)a1;
        v16 = *(_OWORD *)(a1 + 16);
        v17 = *(_OWORD *)(a1 + 32);
        v19 = *(_OWORD *)(a2 + 16);
        v18 = *(_OWORD *)(a2 + 32);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(_OWORD *)(a1 + 16) = v19;
        *(_OWORD *)(a1 + 32) = v18;
        *(_OWORD *)(a2 + 16) = v16;
        *(_OWORD *)(a2 + 32) = v17;
        *(__n128 *)a2 = result;
      }
    }
  }
  else
  {
    if (v7 > v6)
    {
      result = *(__n128 *)a1;
      v8 = *(_OWORD *)(a1 + 16);
      v9 = *(_OWORD *)(a1 + 32);
      v11 = *(_OWORD *)(a3 + 16);
      v10 = *(_OWORD *)(a3 + 32);
      *(_OWORD *)a1 = *(_OWORD *)a3;
      *(_OWORD *)(a1 + 16) = v11;
      *(_OWORD *)(a1 + 32) = v10;
LABEL_9:
      *(_OWORD *)(a3 + 16) = v8;
      *(_OWORD *)(a3 + 32) = v9;
      *(__n128 *)a3 = result;
      goto LABEL_10;
    }
    result = *(__n128 *)a1;
    v20 = *(_OWORD *)(a1 + 16);
    v21 = *(_OWORD *)(a1 + 32);
    v23 = *(_OWORD *)(a2 + 16);
    v22 = *(_OWORD *)(a2 + 32);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v23;
    *(_OWORD *)(a1 + 32) = v22;
    *(_OWORD *)(a2 + 16) = v20;
    *(_OWORD *)(a2 + 32) = v21;
    *(__n128 *)a2 = result;
    if (*(float *)(a3 + 44) > *(float *)(a2 + 44))
    {
      result = *(__n128 *)a2;
      v8 = *(_OWORD *)(a2 + 16);
      v9 = *(_OWORD *)(a2 + 32);
      v25 = *(_OWORD *)(a3 + 16);
      v24 = *(_OWORD *)(a3 + 32);
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *(_OWORD *)(a2 + 16) = v25;
      *(_OWORD *)(a2 + 32) = v24;
      goto LABEL_9;
    }
  }
LABEL_10:
  if (*(float *)(a4 + 44) > *(float *)(a3 + 44))
  {
    result = *(__n128 *)a3;
    v26 = *(_OWORD *)(a3 + 16);
    v27 = *(_OWORD *)(a3 + 32);
    v29 = *(_OWORD *)(a4 + 16);
    v28 = *(_OWORD *)(a4 + 32);
    *(_OWORD *)a3 = *(_OWORD *)a4;
    *(_OWORD *)(a3 + 16) = v29;
    *(_OWORD *)(a3 + 32) = v28;
    *(_OWORD *)(a4 + 16) = v26;
    *(_OWORD *)(a4 + 32) = v27;
    *(__n128 *)a4 = result;
    if (*(float *)(a3 + 44) > *(float *)(a2 + 44))
    {
      result = *(__n128 *)a2;
      v30 = *(_OWORD *)(a2 + 16);
      v31 = *(_OWORD *)(a2 + 32);
      v33 = *(_OWORD *)(a3 + 16);
      v32 = *(_OWORD *)(a3 + 32);
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *(_OWORD *)(a2 + 16) = v33;
      *(_OWORD *)(a2 + 32) = v32;
      *(_OWORD *)(a3 + 16) = v30;
      *(_OWORD *)(a3 + 32) = v31;
      *(__n128 *)a3 = result;
      if (*(float *)(a2 + 44) > *(float *)(a1 + 44))
      {
        result = *(__n128 *)a1;
        v34 = *(_OWORD *)(a1 + 16);
        v35 = *(_OWORD *)(a1 + 32);
        v37 = *(_OWORD *)(a2 + 16);
        v36 = *(_OWORD *)(a2 + 32);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(_OWORD *)(a1 + 16) = v37;
        *(_OWORD *)(a1 + 32) = v36;
        *(_OWORD *)(a2 + 16) = v34;
        *(_OWORD *)(a2 + 32) = v35;
        *(__n128 *)a2 = result;
      }
    }
  }
  result.n128_u32[0] = *(_DWORD *)(a5 + 44);
  if (result.n128_f32[0] > *(float *)(a4 + 44))
  {
    result = *(__n128 *)a4;
    v38 = *(_OWORD *)(a4 + 16);
    v39 = *(_OWORD *)(a4 + 32);
    v41 = *(_OWORD *)(a5 + 16);
    v40 = *(_OWORD *)(a5 + 32);
    *(_OWORD *)a4 = *(_OWORD *)a5;
    *(_OWORD *)(a4 + 16) = v41;
    *(_OWORD *)(a4 + 32) = v40;
    *(_OWORD *)(a5 + 16) = v38;
    *(_OWORD *)(a5 + 32) = v39;
    *(__n128 *)a5 = result;
    result.n128_u32[0] = *(_DWORD *)(a4 + 44);
    if (result.n128_f32[0] > *(float *)(a3 + 44))
    {
      result = *(__n128 *)a3;
      v42 = *(_OWORD *)(a3 + 16);
      v43 = *(_OWORD *)(a3 + 32);
      v45 = *(_OWORD *)(a4 + 16);
      v44 = *(_OWORD *)(a4 + 32);
      *(_OWORD *)a3 = *(_OWORD *)a4;
      *(_OWORD *)(a3 + 16) = v45;
      *(_OWORD *)(a3 + 32) = v44;
      *(_OWORD *)(a4 + 16) = v42;
      *(_OWORD *)(a4 + 32) = v43;
      *(__n128 *)a4 = result;
      result.n128_u32[0] = *(_DWORD *)(a3 + 44);
      if (result.n128_f32[0] > *(float *)(a2 + 44))
      {
        result = *(__n128 *)a2;
        v46 = *(_OWORD *)(a2 + 16);
        v47 = *(_OWORD *)(a2 + 32);
        v49 = *(_OWORD *)(a3 + 16);
        v48 = *(_OWORD *)(a3 + 32);
        *(_OWORD *)a2 = *(_OWORD *)a3;
        *(_OWORD *)(a2 + 16) = v49;
        *(_OWORD *)(a2 + 32) = v48;
        *(_OWORD *)(a3 + 16) = v46;
        *(_OWORD *)(a3 + 32) = v47;
        *(__n128 *)a3 = result;
        result.n128_u32[0] = *(_DWORD *)(a2 + 44);
        if (result.n128_f32[0] > *(float *)(a1 + 44))
        {
          result = *(__n128 *)a1;
          v50 = *(_OWORD *)(a1 + 16);
          v51 = *(_OWORD *)(a1 + 32);
          v53 = *(_OWORD *)(a2 + 16);
          v52 = *(_OWORD *)(a2 + 32);
          *(_OWORD *)a1 = *(_OWORD *)a2;
          *(_OWORD *)(a1 + 16) = v53;
          *(_OWORD *)(a1 + 32) = v52;
          *(_OWORD *)(a2 + 16) = v50;
          *(_OWORD *)(a2 + 32) = v51;
          *(__n128 *)a2 = result;
        }
      }
    }
  }
  return result;
}

void sub_20FD66938(int a1@<W0>, unint64_t a2@<X1>, unint64_t a3@<X2>, unint64_t a4@<X3>, unsigned int a5@<W4>, unsigned int a6@<W5>, unsigned int a7@<W6>, uint64_t a8@<X7>, uint64_t a9@<X8>, float a10@<S0>, float a11@<S1>, float a12@<S2>, uint64_t a13, uint64_t a14, char a15, unsigned __int8 a16, char a17, char a18, char a19, char a20,char a21,char a22,char a23,char a24,uint64_t a25)
{
  uint64_t v29;
  float v30;
  unint64_t v31;
  unint64_t v32;
  int v33;

  *(_OWORD *)(a9 + 24) = xmmword_2102DB6C0;
  *(_QWORD *)(a9 + 40) = 1000;
  *(_OWORD *)(a9 + 52) = xmmword_2102DB6D0;
  *(_QWORD *)(a9 + 68) = 0x410000004141999ALL;
  *(_QWORD *)(a9 + 80) = 5;
  *(_QWORD *)(a9 + 88) = 0x41F0000041200000;
  *(_BYTE *)(a9 + 129) = 0;
  *(_WORD *)(a9 + 136) = 1;
  *(_QWORD *)(a9 + 144) = 36;
  *(_DWORD *)(a9 + 152) = 5;
  *(_QWORD *)(a9 + 156) = 0x404000003F4CCCCDLL;
  *(_DWORD *)(a9 + 164) = 1069547520;
  *(_QWORD *)(a9 + 168) = 20000;
  *(_OWORD *)(a9 + 184) = xmmword_2102DB6F0;
  *(_QWORD *)(a9 + 232) = 0;
  *(_QWORD *)(a9 + 240) = 0;
  *(_QWORD *)(a9 + 248) = 0;
  *(_DWORD *)a9 = 1;
  *(_QWORD *)(a9 + 8) = a2;
  *(_QWORD *)(a9 + 16) = a3;
  *(_QWORD *)(a9 + 96) = a5;
  *(_QWORD *)(a9 + 104) = a6;
  *(_QWORD *)(a9 + 112) = a7;
  *(_QWORD *)(a9 + 120) = a14;
  *(_QWORD *)(a9 + 216) = a8;
  *(_QWORD *)(a9 + 224) = a13;
  *(_BYTE *)(a9 + 128) = a15;
  *(_DWORD *)(a9 + 132) = a16;
  *(_BYTE *)(a9 + 48) = a23;
  *(_BYTE *)(a9 + 4) = a1;
  *(_BYTE *)(a9 + 176) = a17;
  *(_BYTE *)(a9 + 177) = a18;
  *(_BYTE *)(a9 + 178) = a19;
  *(_BYTE *)(a9 + 179) = a20;
  *(_BYTE *)(a9 + 180) = a21;
  *(_BYTE *)(a9 + 181) = a22;
  *(float *)(a9 + 200) = a10;
  *(float *)(a9 + 204) = a11;
  v29 = *(unsigned __int8 *)(a25 + 23);
  if ((v29 & 0x80u) != 0)
    v29 = *(_QWORD *)(a25 + 8);
  *(float *)(a9 + 208) = a12;
  if (v29)
  {
    sub_20FD66B64(a9 + 232, (__int128 *)a25);
    a1 = *(unsigned __int8 *)(a9 + 4);
  }
  if (a1)
  {
    if (a17)
      v30 = 28.0;
    else
      v30 = 16.0;
    v31 = (unint64_t)fmaxf(log2f((float)a3 / v30) + 1.0, 0.0);
    v32 = (unint64_t)fmaxf(log2f((float)a2 / v30) + 1.0, 0.0);
    if (v32 >= v31)
      v32 = v31;
    if (v32 < a4)
      a4 = v32;
  }
  *(_QWORD *)(a9 + 24) = a4;
  if (a17 && !a24 && *(_QWORD *)(a9 + 8) == 640 && *(_QWORD *)(a9 + 16) == 480)
    *(_DWORD *)(a9 + 188) = *(_DWORD *)(a9 + 192);
  if (a24)
  {
    v33 = *(_DWORD *)(a9 + 92);
    *(_DWORD *)(a9 + 72) = *(_DWORD *)(a9 + 88);
    *(_DWORD *)(a9 + 64) = v33;
  }
}

void sub_20FD66B48(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void *v4;

  v4 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 240) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20FD66B64(uint64_t a1, __int128 *a2)
{
  unint64_t v3;
  _QWORD *v4;
  __int32 v5;
  __int32 *v6;
  __int32 *v7;
  __int32 *v8;
  unint64_t v9;
  uint64_t v10;
  __int32 *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  _BYTE *v17;
  __int32 *v18;
  int64_t v19;
  unint64_t v20;
  __int32 *v21;
  uint64_t v22;
  uint64_t v23;
  _OWORD *v24;
  __int32 *v25;
  uint64_t v26;
  __int128 v27;
  __int32 v28;
  unint64_t v29;
  uint64_t v31;
  __int32 __c;
  _QWORD v34[13];
  char v35;
  uint64_t v36;

  sub_20E8C2268((uint64_t)v34, a2, 24);
  v3 = 0;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)a1;
  __c = 0;
  while (1)
  {
    v4 = (_QWORD *)MEMORY[0x212BC5C00](v34, &__c);
    if ((*((_BYTE *)v4 + *(_QWORD *)(*v4 - 24) + 32) & 5) != 0)
      break;
    v5 = __c;
    if (__c >= 0x200)
    {
      if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/FeatureDetection/src/DoGAndFREAKGeneratorConfig.cpp", 120, (uint64_t)"value < kBitsPerFreakDescriptor", 31, (uint64_t)"Unexpected value in permutation matrix", 38, (void (*)(void **))sub_21023DDB0))
      {
        goto LABEL_44;
      }
      v5 = __c;
    }
    v6 = *(__int32 **)(a1 + 8);
    v7 = wmemchr(*(__int32 **)a1, v5, ((uint64_t)v6 - *(_QWORD *)a1) >> 2);
    if (v7)
      v8 = v7;
    else
      v8 = v6;
    if (v8 != *(__int32 **)(a1 + 8))
    {
      if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/FeatureDetection/src/DoGAndFREAKGeneratorConfig.cpp", 123, (uint64_t)"std::find(permutation_matrix.begin(), permutation_matrix.end(), value) == permutation_matrix.end()", 98, (uint64_t)"Duplicate values found in permutation sequence: not a permutation.", 66, (void (*)(void **))sub_21023DDB0))
      {
        goto LABEL_44;
      }
      v8 = *(__int32 **)(a1 + 8);
    }
    v9 = *(_QWORD *)(a1 + 16);
    if ((unint64_t)v8 < v9)
    {
      *v8 = __c;
      v10 = (uint64_t)(v8 + 1);
      goto LABEL_35;
    }
    v11 = *(__int32 **)a1;
    v12 = (uint64_t)v8 - *(_QWORD *)a1;
    v13 = v12 >> 2;
    v14 = (v12 >> 2) + 1;
    if (v14 >> 62)
      sub_20E867F44();
    v15 = v9 - (_QWORD)v11;
    if (v15 >> 1 > v14)
      v14 = v15 >> 1;
    if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFFCLL)
      v16 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v16 = v14;
    if (v16)
    {
      if (v16 >> 62)
        sub_20E877A38();
      v17 = operator new(4 * v16);
      v18 = (__int32 *)&v17[4 * v13];
      *v18 = __c;
      v10 = (uint64_t)(v18 + 1);
      v19 = (char *)v8 - (char *)v11;
      if (v8 == v11)
        goto LABEL_33;
    }
    else
    {
      v17 = 0;
      v18 = (__int32 *)(4 * v13);
      *(_DWORD *)(4 * v13) = __c;
      v10 = 4 * v13 + 4;
      v19 = (char *)v8 - (char *)v11;
      if (v8 == v11)
        goto LABEL_33;
    }
    v20 = v19 - 4;
    if (v20 < 0x2C)
    {
      v21 = v8;
      goto LABEL_32;
    }
    if ((unint64_t)((char *)v8 - v17 - v12) < 0x20)
    {
      v21 = v8;
      do
      {
LABEL_32:
        v28 = *--v21;
        *--v18 = v28;
      }
      while (v21 != v11);
      goto LABEL_33;
    }
    v22 = (v20 >> 2) + 1;
    v23 = 4 * (v22 & 0x7FFFFFFFFFFFFFF8);
    v21 = &v8[v23 / 0xFFFFFFFFFFFFFFFCLL];
    v18 = (__int32 *)((char *)v18 - v23);
    v24 = &v17[4 * v13 - 16];
    v25 = v8 - 4;
    v26 = v22 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v27 = *(_OWORD *)v25;
      *(v24 - 1) = *((_OWORD *)v25 - 1);
      *v24 = v27;
      v24 -= 2;
      v25 -= 8;
      v26 -= 8;
    }
    while (v26);
    if (v22 != (v22 & 0x7FFFFFFFFFFFFFF8))
      goto LABEL_32;
LABEL_33:
    *(_QWORD *)a1 = v18;
    *(_QWORD *)(a1 + 8) = v10;
    *(_QWORD *)(a1 + 16) = &v17[4 * v16];
    if (v11)
      operator delete(v11);
LABEL_35:
    *(_QWORD *)(a1 + 8) = v10;
    v29 = v3 + 1;
    if (v3 == 511)
      goto LABEL_41;
    if (std::istream::peek() != 44
      && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/FeatureDetection/src/DoGAndFREAKGeneratorConfig.cpp", 127, (uint64_t)"(count == kBitsPerFreakDescriptor || ss.peek() == ',')", 54, (uint64_t)"Permutation indices must be separated by commas.", 48, (void (*)(void **))sub_21023DDB0))
    {
      goto LABEL_44;
    }
    if (v3++ <= 0x1FE)
    {
      std::istream::ignore();
      v3 = v29;
    }
  }
  if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/FeatureDetection/src/DoGAndFREAKGeneratorConfig.cpp", 133, (uint64_t)"count == kBitsPerFreakDescriptor", 32, (uint64_t)"Permutation sequence is too short.", 34, (void (*)(void **))sub_21023DDB0))
  {
LABEL_44:
    abort();
  }
LABEL_41:
  v34[0] = *MEMORY[0x24BEDB7F0];
  v31 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  *(_QWORD *)((char *)v34 + *(_QWORD *)(v34[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
  v34[2] = v31;
  v34[3] = MEMORY[0x24BEDB848] + 16;
  if (v35 < 0)
    operator delete((void *)v34[11]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x212BC6290](&v36);
}

void sub_20FD66EE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E863784((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FD66EFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E863784((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FD66F10(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  unint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  void *v15;
  uint64_t v16;
  _QWORD *v17;
  int v18;

  v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  v5 = *(_OWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 64) = v5;
  *(_OWORD *)(a1 + 32) = v3;
  *(_DWORD *)(a1 + 136) = *(_DWORD *)(a1 + 12);
  *(_DWORD *)(a1 + 216) = 1115684864;
  v6 = *(int *)(a2 + 40) * (uint64_t)*(int *)(a2 + 36) * *(int *)(a2 + 44);
  v8 = (_QWORD *)(a1 + 168);
  v7 = *(_QWORD *)(a1 + 168);
  v9 = *(_QWORD *)(a1 + 176);
  v10 = 0xAAAAAAAAAAAAAAABLL * ((v9 - v7) >> 3);
  if (v6 <= v10)
  {
    if (v6 < v10)
    {
      v12 = v7 + 24 * v6;
      if (v9 != v12)
      {
        v13 = *(_QWORD *)(a1 + 176);
        do
        {
          v15 = *(void **)(v13 - 24);
          v13 -= 24;
          v14 = v15;
          if (v15)
          {
            *(_QWORD *)(v9 - 16) = v14;
            operator delete(v14);
          }
          v9 = v13;
        }
        while (v13 != v12);
      }
      *(_QWORD *)(a1 + 176) = v12;
    }
  }
  else
  {
    sub_20F0B7BF8(a1 + 168, v6 - v10);
  }
  if ((_DWORD)v6)
  {
    v16 = 0;
    do
    {
      v17 = (_QWORD *)(*v8 + v16);
      v17[1] = *v17;
      v18 = 0;
      sub_20EDB9AB0((uint64_t)v17, 0x200uLL, (const float *)&v18);
      v16 += 24;
      --v6;
    }
    while (v6);
  }
}

void sub_20FD6702C(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4)
{
  void **v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  float32x2_t v15;
  double v16;
  __n128 v17;
  uint64_t v18;
  uint64_t *v19;
  unsigned int v20;
  uint64_t *v21;
  uint64_t v22;

  v22 = a4;
  v8 = (void **)(a1 + 88);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a1 + 88);
  sub_20FD6719C(a1, a2, a3);
  sub_20FD693C0(a1, a2, (uint64_t)a3, v9, v10, v11, v12, v13, v14, v15, v16);
  if (!*(_BYTE *)(a1 + 4))
  {
    sub_20FD6AAB4(v8, (uint64_t *)(a1 + 144), *(_DWORD *)(a1 + 36), *(_DWORD *)(a1 + 40), *(_DWORD *)(a1 + 44), *(_DWORD *)(a1 + 48), *(_QWORD *)(a2 + 8), *(_QWORD *)(a2 + 16), 1u);
    return;
  }
  v18 = *(_QWORD *)(a1 + 200);
  if (!v18)
  {
    v21 = (uint64_t *)(a1 + 200);
LABEL_16:
    v19 = sub_20FD6B2FC((uint64_t **)(a1 + 192), v21, (unsigned int *)&v22, &v22, (uint64_t *)(a1 + 168));
    goto LABEL_17;
  }
  v19 = (uint64_t *)(a1 + 200);
  do
  {
    while (1)
    {
      v20 = *(_DWORD *)(v18 + 32);
      if (v20 >= a4 && (v20 != (_DWORD)a4 || *(_DWORD *)(v18 + 36) >= HIDWORD(a4)))
        break;
      v18 = *(_QWORD *)(v18 + 8);
      if (!v18)
        goto LABEL_9;
    }
    v19 = (uint64_t *)v18;
    v18 = *(_QWORD *)v18;
  }
  while (v18);
LABEL_9:
  v21 = (uint64_t *)(a1 + 200);
  if (v19 == (uint64_t *)(a1 + 200))
    goto LABEL_16;
  if (*((_DWORD *)v19 + 8) != (_DWORD)a4)
  {
    v21 = v19;
    goto LABEL_16;
  }
  v21 = v19;
  if (*((_DWORD *)v19 + 9) != HIDWORD(a4))
    goto LABEL_16;
LABEL_17:
  v17.n128_u32[0] = *(_DWORD *)(a1 + 216);
  sub_20FD69EE4((uint64_t *)v8, v19 + 5, *(_DWORD *)(a1 + 36), *(_DWORD *)(a1 + 40), *(_DWORD *)(a1 + 44), *(int *)(a1 + 48), *(_QWORD *)(a2 + 8), *(_QWORD *)(a2 + 16), v17, *(float *)(a1 + 8), *(float *)(a1 + 20), *(float *)(a1 + 24), *(float *)(a1 + 28), 1u, 0);
}

void sub_20FD6719C(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  _QWORD *v3;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unsigned int v18;
  float v19;
  uint64_t v20;
  float v21;
  unint64_t v22;
  float v23;
  float v24;
  unint64_t v25;
  float v26;
  float v27;
  float v28;
  uint64_t v29;
  _QWORD *v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  float v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  float v45;
  float v46;
  float v47;
  float v48;
  float v49;
  float v50;
  float v51;
  float v52;
  float v53;
  uint64_t v54;
  uint64_t v55;
  float v56;
  float v57;
  float v58;
  float v59;
  uint64_t v60;
  float v61;
  float v62;
  float v63;
  BOOL v66;
  BOOL v68;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  float v76;
  float v77;
  uint64_t v78;
  uint64_t v79;
  float v80;
  float v81;
  uint64_t v82;
  uint64_t v83;
  float v84;
  float v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  float v96;
  unint64_t v97;
  char *v98;
  BOOL v101;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  float v109;
  float v110;
  uint64_t v111;
  uint64_t v112;
  float v113;
  float v114;
  float v115;
  uint64_t v116;
  uint64_t v117;
  float v118;
  float v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  float v130;
  unint64_t v131;
  char *v132;
  char *v133;
  unint64_t v134;
  unint64_t v135;
  unint64_t v136;
  char *v137;
  char *v138;
  unint64_t v139;
  unint64_t v140;
  unint64_t v141;
  char *v142;
  char *v143;
  unint64_t v144;
  __int128 v145;
  __int128 v146;
  __int128 v147;
  __int128 v148;
  float v149;
  uint64_t v150;
  _QWORD *v151;
  _QWORD *v152;
  uint64_t v153;
  _QWORD *v154;
  uint64_t *v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  int v159;
  float v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  float v169;
  float v170;
  float v171;
  float v172;
  float v173;
  float v174;
  float v175;
  uint64_t v176;
  uint64_t v177;
  float v178;
  float v179;
  float v180;
  uint64_t v181;
  float v182;
  float v183;
  float v184;
  BOOL v188;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  float v199;
  float v200;
  uint64_t v201;
  uint64_t v202;
  float v203;
  float v204;
  float v205;
  uint64_t v206;
  uint64_t v207;
  float v208;
  float v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  float v220;
  unint64_t v221;
  char *v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  float v229;
  float v230;
  uint64_t v231;
  uint64_t v232;
  float v233;
  float v234;
  uint64_t v235;
  uint64_t v236;
  float v237;
  float v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  float v249;
  unint64_t v250;
  char *v251;
  char *v252;
  unint64_t v253;
  unint64_t v254;
  unint64_t v255;
  char *v256;
  char *v257;
  unint64_t v258;
  unint64_t v259;
  unint64_t v260;
  char *v261;
  char *v262;
  unint64_t v263;
  __int128 v264;
  __int128 v265;
  __int128 v266;
  __int128 v267;
  float v268;
  uint64_t v269;
  uint64_t v270;
  _QWORD *v271;
  _QWORD *v272;
  _QWORD *v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  float v286;
  uint64_t v287;
  uint64_t v288;
  float v289;
  float v290;
  uint64_t v291;
  float v292;
  float v293;
  float v294;
  BOOL v297;
  BOOL v299;
  BOOL v300;
  float v301;
  unint64_t v302;
  char *v303;
  BOOL v306;
  BOOL v307;
  float v308;
  unint64_t v309;
  char *v310;
  char *v311;
  unint64_t v312;
  unint64_t v313;
  unint64_t v314;
  float v315;
  float v316;
  char *v317;
  char *v318;
  unint64_t v319;
  unint64_t v320;
  unint64_t v321;
  float v322;
  float v323;
  char *v324;
  char *v325;
  char *v326;
  __int128 v327;
  __int128 v328;
  char *v329;
  float v330;
  float v331;
  uint64_t v332;
  float *v333;
  float *v334;
  unint64_t v335;
  __int128 v336;
  __int128 v337;
  unint64_t v338;
  unint64_t v339;
  unint64_t v340;
  unint64_t v341;
  float v342;
  float v343;
  float v344;
  float v345;
  char *v346;
  char *v347;
  char *v348;
  char *v349;
  float v350;
  float v351;
  char *v352;
  char *v353;
  char *v354;
  char *v355;
  unint64_t v356;
  unint64_t v357;
  unint64_t v358;
  unint64_t v359;
  char *v360;
  char *v361;
  float v362;
  float v363;
  char *v364;
  float v365;
  float v366;
  char *v367;
  unint64_t v368;
  unint64_t v369;
  float v370;
  float v371;
  uint64_t v372;
  uint64_t v373;
  char *v374;
  _QWORD *v375;
  _QWORD *v376;
  uint64_t v377;
  _QWORD *v378;
  _QWORD *v379;
  _QWORD *v380;
  uint64_t v381;
  _QWORD *v382;
  _QWORD *v383;
  _QWORD *v384;
  uint64_t *v385;
  uint64_t *v386;
  _QWORD *v387;
  uint64_t *v388;
  uint64_t v389;
  uint64_t v390;
  _QWORD *v391;
  int v393;
  unsigned int v394;
  int v395;
  uint64_t v396;
  uint64_t v397;
  uint64_t v398;
  unint64_t v399;
  uint64_t v400;
  uint64_t v401;
  uint64_t v402;
  uint64_t v403;
  uint64_t v404;
  uint64_t v405;

  v3 = a3;
  v5 = a3[6];
  v6 = 0x8E38E38E38E38E39 * ((a3[7] - v5) >> 4);
  if (v6 - 2147483649u <= 0xFFFFFFFF7FFFFFFFLL)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/FeatureDetection/src/DoGFeatureDetector.cpp", 111, (uint64_t)"laplacian_pyramid.size() - 1 <= std::numeric_limits<int>::max()", 63, (uint64_t)"laplacian_pyramid.size() - 1 is outside the range of int", 56, (void (*)(void **))sub_21023DDB0))
    {
LABEL_368:
      abort();
    }
    v5 = v3[6];
    v6 = 0x8E38E38E38E38E39 * ((v3[7] - v5) >> 4);
  }
  if (v6 >= 3)
  {
    v384 = (_QWORD *)(a1 + 88);
    v7 = 2;
    v8 = 1;
    v391 = v3;
    while (1)
    {
      v9 = v8;
      v396 = v7;
      v10 = v5 + 144 * v8;
      v12 = *(_QWORD *)(v10 + 32);
      v11 = (unint64_t *)(v10 + 32);
      if ((unint64_t)(v12 - 2147483649) <= 0xFFFFFFFF7FFFFFFFLL
        && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/FeatureDetection/src/DoGFeatureDetector.cpp", 119, (uint64_t)"lap1.width() - 1 <= std::numeric_limits<int>::max()", 51, (uint64_t)"lap1.width() - 1 is outside the range of int", 44, (void (*)(void **))sub_21023DDB0))
      {
        goto LABEL_368;
      }
      v13 = v5 + 144 * v9;
      v15 = *(_QWORD *)(v13 + 48);
      v14 = (uint64_t *)(v13 + 48);
      if ((unint64_t)(v15 - 2147483649) <= 0xFFFFFFFF7FFFFFFFLL
        && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/FeatureDetection/src/DoGFeatureDetector.cpp", 121, (uint64_t)"lap1.height() - 1 <= std::numeric_limits<int>::max()", 52, (uint64_t)"lap1.height() - 1 is outside the range of int", 45, (void (*)(void **))sub_21023DDB0))
      {
        goto LABEL_368;
      }
      v16 = v9 - 1;
      v17 = *v11;
      v18 = llroundf(log2f((float)(*(_QWORD *)(v3[6] + 32) / *v11)));
      v393 = v9 % v3[3];
      v19 = *(float *)(a2 + 4);
      v21 = powf(*(float *)(a2 + 104), (float)v393);
      v22 = v17;
      v394 = v18;
      v23 = (float)(1 << v18);
      v24 = (float)(v19 * v21) * v23;
      v395 = v9;
      if (*(_QWORD *)(v5 + 144 * (v9 - 1) + 32) != v17)
        break;
      v8 = v396;
      v25 = *(_QWORD *)(v5 + 144 * v396 + 32);
      v26 = -0.5;
      v27 = -2.0;
      v28 = 2.0;
      if (v25 >= v17)
      {
        v150 = *v14;
        if (v17 != v25)
          goto LABEL_132;
        if ((int)v150 >= 3)
        {
          v269 = (v17 - 1);
          v270 = (v150 - 1);
          v271 = (_QWORD *)(v5 + 144 * v16 + 120);
          v272 = (_QWORD *)(v5 + 144 * v9 + 120);
          v273 = (_QWORD *)(v5 + 144 * v396 + 120);
          v274 = 1;
          while (1)
          {
            v275 = v274 + 1;
            if ((int)v22 >= 3)
              break;
LABEL_249:
            v274 = v275;
            if (v275 == v270)
              goto LABEL_6;
          }
          v276 = 8 * v274 - 8;
          v277 = *(_QWORD *)(*v271 + v276);
          v278 = *(_QWORD *)(*v271 + 8 * v274);
          v279 = *(_QWORD *)(*v271 + 8 * v275);
          v280 = *(_QWORD *)(*v272 + v276);
          v281 = *(_QWORD *)(*v272 + 8 * v274);
          v282 = *(_QWORD *)(*v272 + 8 * v275);
          v283 = *(_QWORD *)(*v273 + v276);
          v284 = *(_QWORD *)(*v273 + 8 * v274);
          v285 = *(_QWORD *)(*v273 + 8 * v275);
          v286 = v23 * (float)(int)v274;
          v287 = 1;
          while (2)
          {
            v289 = *(float *)(v281 + 4 * v287);
            v290 = fabsf(v289);
            if (v290 < *(float *)(a1 + 8))
            {
              v288 = v287 + 1;
            }
            else
            {
              v291 = v287 - 1;
              v292 = *(float *)(v277 + 4 * (v287 - 1));
              v293 = *(float *)(v277 + 4 * v287);
              v288 = v287 + 1;
              v294 = *(float *)(v277 + 4 * (v287 + 1));
              if (v292 < v289 && v293 < v289 && v294 < v289)
              {
                v297 = *(float *)(v278 + 4 * v291) < v289 && *(float *)(v278 + 4 * v287) < v289;
                if (v297 && *(float *)(v278 + 4 * v288) < v289)
                {
                  v299 = *(float *)(v279 + 4 * v291) < v289 && *(float *)(v279 + 4 * v287) < v289;
                  v300 = v299 && *(float *)(v279 + 4 * v288) < v289;
                  if (v300
                    && *(float *)(v280 + 4 * v291) < v289
                    && *(float *)(v280 + 4 * v287) < v289
                    && *(float *)(v280 + 4 * v288) < v289
                    && *(float *)(v281 + 4 * v291) < v289
                    && *(float *)(v281 + 4 * v288) < v289
                    && *(float *)(v282 + 4 * v291) < v289
                    && *(float *)(v282 + 4 * v287) < v289
                    && *(float *)(v282 + 4 * v288) < v289
                    && *(float *)(v283 + 4 * v291) < v289
                    && *(float *)(v283 + 4 * v287) < v289
                    && *(float *)(v283 + 4 * v288) < v289
                    && *(float *)(v284 + 4 * v291) < v289
                    && *(float *)(v284 + 4 * v287) < v289
                    && *(float *)(v284 + 4 * v288) < v289
                    && *(float *)(v285 + 4 * v291) < v289
                    && *(float *)(v285 + 4 * v287) < v289
                    && *(float *)(v285 + 4 * v288) < v289)
                  {
                    v301 = v23 * (float)(int)v287;
                    v303 = *(char **)(a1 + 96);
                    v302 = *(_QWORD *)(a1 + 104);
                    if ((unint64_t)v303 < v302)
                    {
                      *(float *)v303 = v301;
                      *((float *)v303 + 1) = v286;
                      *((_DWORD *)v303 + 2) = v395;
                      *((float *)v303 + 3) = v24;
                      *((_QWORD *)v303 + 2) = 0;
                      *(_QWORD *)(v303 + 21) = 0;
                      goto LABEL_334;
                    }
                    v402 = v284;
                    v405 = v283;
                    v311 = (char *)*v384;
                    v312 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v303[-*v384] >> 4);
                    v313 = v312 + 1;
                    if (v312 + 1 > 0x555555555555555)
                      goto LABEL_369;
                    v314 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v302 - (_QWORD)v311) >> 4);
                    if (2 * v314 > v313)
                      v313 = 2 * v314;
                    if (v314 >= 0x2AAAAAAAAAAAAAALL)
                      v313 = 0x555555555555555;
                    v399 = v22;
                    v387 = v271;
                    v390 = v270;
                    v380 = v273;
                    v383 = v272;
                    v377 = v282;
                    v368 = v313;
                    if (v313)
                    {
                      v356 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v303[-*v384] >> 4);
                      v360 = (char *)*v384;
                      v372 = v285;
                      if (v313 > 0x555555555555555)
                        goto LABEL_370;
                      v315 = v24;
                      v316 = v23;
                      v317 = (char *)operator new(48 * v313);
                      v8 = v396;
                      v23 = v316;
                      v24 = v315;
                      v285 = v372;
                      v312 = v356;
                      v311 = v360;
                    }
                    else
                    {
                      v317 = 0;
                    }
                    v325 = &v317[48 * v312];
                    *(float *)v325 = v301;
                    *((float *)v325 + 1) = v286;
                    *((_DWORD *)v325 + 2) = v395;
                    *((float *)v325 + 3) = v24;
                    *((_QWORD *)v325 + 2) = 0;
                    *(_QWORD *)(v325 + 21) = 0;
                    *((_DWORD *)v325 + 8) = v394;
                    *((_DWORD *)v325 + 9) = v393;
                    *((_DWORD *)v325 + 10) = 0;
                    *((float *)v325 + 11) = v290;
                    v326 = v325;
                    if (v303 != v311)
                    {
                      do
                      {
                        v327 = *((_OWORD *)v303 - 3);
                        v328 = *((_OWORD *)v303 - 1);
                        *((_OWORD *)v326 - 2) = *((_OWORD *)v303 - 2);
                        *((_OWORD *)v326 - 1) = v328;
                        *((_OWORD *)v326 - 3) = v327;
                        v326 -= 48;
                        v303 -= 48;
                      }
                      while (v303 != v311);
                      v303 = (char *)*v384;
                    }
                    v310 = v325 + 48;
                    *(_QWORD *)(a1 + 88) = v326;
                    *(_QWORD *)(a1 + 96) = v310;
                    *(_QWORD *)(a1 + 104) = &v317[48 * v368];
                    if (v303)
                    {
LABEL_356:
                      v329 = v303;
                      v330 = v23;
                      v331 = v24;
                      v332 = v285;
                      v374 = v310;
                      operator delete(v329);
                      v310 = v374;
                      v285 = v332;
                      v24 = v331;
                      v23 = v330;
                      v8 = v396;
                    }
LABEL_357:
                    v22 = v399;
                    v284 = v402;
                    v271 = v387;
                    v270 = v390;
                    v273 = v380;
                    v272 = v383;
                    v282 = v377;
                    v283 = v405;
                    goto LABEL_358;
                  }
                }
              }
              if (v292 > v289 && v293 > v289 && v294 > v289)
              {
                v306 = *(float *)(v278 + 4 * v291) <= v289 || *(float *)(v278 + 4 * v287) <= v289;
                v307 = v306 || *(float *)(v278 + 4 * v288) <= v289;
                if (!v307
                  && *(float *)(v279 + 4 * v291) > v289
                  && *(float *)(v279 + 4 * v287) > v289
                  && *(float *)(v279 + 4 * v288) > v289
                  && *(float *)(v280 + 4 * v291) > v289
                  && *(float *)(v280 + 4 * v287) > v289
                  && *(float *)(v280 + 4 * v288) > v289
                  && *(float *)(v281 + 4 * v291) > v289
                  && *(float *)(v281 + 4 * v288) > v289
                  && *(float *)(v282 + 4 * v291) > v289
                  && *(float *)(v282 + 4 * v287) > v289
                  && *(float *)(v282 + 4 * v288) > v289
                  && *(float *)(v283 + 4 * v291) > v289
                  && *(float *)(v283 + 4 * v287) > v289
                  && *(float *)(v283 + 4 * v288) > v289
                  && *(float *)(v284 + 4 * v291) > v289
                  && *(float *)(v284 + 4 * v287) > v289
                  && *(float *)(v284 + 4 * v288) > v289
                  && *(float *)(v285 + 4 * v291) > v289
                  && *(float *)(v285 + 4 * v287) > v289
                  && *(float *)(v285 + 4 * v288) > v289)
                {
                  v308 = v23 * (float)(int)v287;
                  v303 = *(char **)(a1 + 96);
                  v309 = *(_QWORD *)(a1 + 104);
                  if ((unint64_t)v303 >= v309)
                  {
                    v402 = v284;
                    v405 = v283;
                    v318 = (char *)*v384;
                    v319 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v303[-*v384] >> 4);
                    v320 = v319 + 1;
                    if (v319 + 1 > 0x555555555555555)
                      goto LABEL_369;
                    v321 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v309 - (_QWORD)v318) >> 4);
                    if (2 * v321 > v320)
                      v320 = 2 * v321;
                    if (v321 >= 0x2AAAAAAAAAAAAAALL)
                      v320 = 0x555555555555555;
                    v399 = v22;
                    v387 = v271;
                    v390 = v270;
                    v380 = v273;
                    v383 = v272;
                    v377 = v282;
                    v369 = v320;
                    if (v320)
                    {
                      v357 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v303[-*v384] >> 4);
                      v361 = (char *)*v384;
                      v373 = v285;
                      if (v320 > 0x555555555555555)
                        goto LABEL_370;
                      v322 = v24;
                      v323 = v23;
                      v324 = (char *)operator new(48 * v320);
                      v8 = v396;
                      v23 = v323;
                      v24 = v322;
                      v285 = v373;
                      v319 = v357;
                      v318 = v361;
                    }
                    else
                    {
                      v324 = 0;
                    }
                    v333 = (float *)&v324[48 * v319];
                    *v333 = v308;
                    v333[1] = v286;
                    *((_DWORD *)v333 + 2) = v395;
                    v333[3] = v24;
                    *((_QWORD *)v333 + 2) = 0;
                    v333[6] = 0.0;
                    *((_BYTE *)v333 + 28) = 1;
                    *((_DWORD *)v333 + 8) = v394;
                    *((_DWORD *)v333 + 9) = v393;
                    v333[10] = 0.0;
                    v333[11] = v290;
                    v334 = v333;
                    if (v303 == v318)
                    {
                      v335 = v369;
                    }
                    else
                    {
                      v335 = v369;
                      do
                      {
                        v336 = *((_OWORD *)v303 - 3);
                        v337 = *((_OWORD *)v303 - 1);
                        *((_OWORD *)v334 - 2) = *((_OWORD *)v303 - 2);
                        *((_OWORD *)v334 - 1) = v337;
                        *((_OWORD *)v334 - 3) = v336;
                        v334 -= 12;
                        v303 -= 48;
                      }
                      while (v303 != v318);
                      v303 = (char *)*v384;
                    }
                    v310 = (char *)(v333 + 12);
                    *(_QWORD *)(a1 + 88) = v334;
                    *(_QWORD *)(a1 + 96) = v310;
                    *(_QWORD *)(a1 + 104) = &v324[48 * v335];
                    if (v303)
                      goto LABEL_356;
                    goto LABEL_357;
                  }
                  *(float *)v303 = v308;
                  *((float *)v303 + 1) = v286;
                  *((_DWORD *)v303 + 2) = v395;
                  *((float *)v303 + 3) = v24;
                  *((_QWORD *)v303 + 2) = 0;
                  *((_DWORD *)v303 + 6) = 0;
                  v303[28] = 1;
LABEL_334:
                  *((_DWORD *)v303 + 8) = v394;
                  *((_DWORD *)v303 + 9) = v393;
                  *((_DWORD *)v303 + 10) = 0;
                  v310 = v303 + 48;
                  *((float *)v303 + 11) = v290;
LABEL_358:
                  *(_QWORD *)(a1 + 96) = v310;
                }
              }
            }
            v287 = v288;
            if (v288 == v269)
              goto LABEL_249;
            continue;
          }
        }
      }
      else
      {
        v29 = *(_QWORD *)(v5 + 144 * v396 + 48) - 1;
        LODWORD(v20) = vcvtms_s32_f32((float)((float)(unint64_t)v29 + -0.5) + (float)((float)(unint64_t)v29
                                                                                           + -0.5));
        if ((int)v20 >= 2)
        {
          LODWORD(v14) = vcvtms_s32_f32((float)((float)(v25 - 1) + -0.5) + (float)((float)(v25 - 1) + -0.5));
          if ((int)v14 >= 2)
          {
            v30 = (_QWORD *)(v5 + 144 * v16 + 120);
            v31 = (_QWORD *)(v5 + 144 * v9 + 120);
            v32 = v5 + 144 * v396;
            v33 = (uint64_t *)(v32 + 88);
            v34 = (uint64_t *)(v32 + 40);
            v35 = 1;
            v385 = (uint64_t *)(v32 + 40);
            v388 = (uint64_t *)(v32 + 88);
            do
            {
              v36 = 8 * v35;
              v37 = 8 * v35 - 8;
              v38 = *(_QWORD *)(*v30 + v37);
              v39 = *(_QWORD *)(*v30 + 8 * v35);
              v40 = (float)(int)v35++;
              v41 = *(_QWORD *)(*v30 + 8 * v35);
              v42 = *(_QWORD *)(*v31 + v37);
              v43 = *(_QWORD *)(*v31 + v36);
              v44 = *(_QWORD *)(*v31 + 8 * v35);
              v45 = (float)(v40 * 0.5) + v26;
              v403 = v45;
              v46 = (float)(v403 + 1) - v45;
              v47 = v45 - (float)v45;
              v400 = (float)(v40 * 0.5);
              v48 = (float)(v400 + 1) - (float)(v40 * 0.5);
              v49 = (float)(v40 * 0.5) - (float)(float)(v40 * 0.5);
              v50 = (float)(v40 * 0.5) + 0.5;
              v397 = v50;
              v51 = (float)(v397 + 1) - v50;
              v52 = v50 - (float)v50;
              v53 = v23 * v40;
              v54 = 1;
              do
              {
                v56 = *(float *)(v43 + 4 * v54);
                v57 = fabsf(v56);
                if (v57 < *(float *)(a1 + 8))
                {
                  v55 = v54 + 1;
                  goto LABEL_19;
                }
                v58 = (float)(int)v54;
                v59 = (float)(int)v54 * 0.5;
                v60 = v54 - 1;
                v61 = *(float *)(v38 + 4 * (v54 - 1));
                v62 = *(float *)(v38 + 4 * v54);
                v55 = v54 + 1;
                v63 = *(float *)(v38 + 4 * (v54 + 1));
                if (v61 < v56 && v62 < v56 && v63 < v56)
                {
                  v66 = *(float *)(v39 + 4 * v60) < v56 && *(float *)(v39 + 4 * v54) < v56;
                  if (v66 && *(float *)(v39 + 4 * v55) < v56)
                  {
                    v68 = *(float *)(v41 + 4 * v60) < v56 && *(float *)(v41 + 4 * v54) < v56;
                    if (v68
                      && *(float *)(v41 + 4 * v55) < v56
                      && *(float *)(v42 + 4 * v60) < v56
                      && *(float *)(v42 + 4 * v54) < v56
                      && *(float *)(v42 + 4 * v55) < v56
                      && *(float *)(v43 + 4 * v60) < v56
                      && *(float *)(v43 + 4 * v55) < v56
                      && *(float *)(v44 + 4 * v60) < v56
                      && *(float *)(v44 + 4 * v54) < v56
                      && *(float *)(v44 + 4 * v55) < v56)
                    {
                      v70 = *v33;
                      v71 = *v34;
                      v72 = (float)(v59 + v26);
                      v73 = (v72 + 1);
                      v74 = *v33 + 4 * *v34 * v403;
                      v75 = v74 + 4 * *v34;
                      v76 = (float)v73 - (float)(v59 + v26);
                      v77 = (float)(v59 + v26) - (float)(float)(v59 + v26);
                      if ((float)((float)((float)((float)((float)(v46 * v76) * *(float *)(v74 + 4 * v72))
                                                 + (float)((float)(v46 * v77) * *(float *)(v74 + 4 * v73)))
                                         + (float)((float)(v47 * v76) * *(float *)(v75 + 4 * v72)))
                                 + (float)((float)(v47 * v77) * *(float *)(v75 + 4 * v73))) < v56)
                      {
                        v78 = v59;
                        v79 = (v78 + 1);
                        v80 = (float)v79 - v59;
                        v81 = v59 - (float)v59;
                        if ((float)((float)((float)((float)((float)(v46 * v80) * *(float *)(v74 + 4 * v78))
                                                   + (float)((float)(v46 * v81) * *(float *)(v74 + 4 * v79)))
                                           + (float)((float)(v47 * v80) * *(float *)(v75 + 4 * v78)))
                                   + (float)((float)(v47 * v81) * *(float *)(v75 + 4 * v79))) < v56)
                        {
                          v82 = (float)(v59 + 0.5);
                          v83 = (v82 + 1);
                          v84 = (float)v83 - (float)(v59 + 0.5);
                          v85 = (float)(v59 + 0.5) - (float)(float)(v59 + 0.5);
                          v34 = v385;
                          v33 = v388;
                          if ((float)((float)((float)((float)((float)(v46 * v84) * *(float *)(v74 + 4 * v82))
                                                     + (float)((float)(v46 * v85) * *(float *)(v74 + 4 * v83)))
                                             + (float)((float)(v47 * v84) * *(float *)(v75 + 4 * v82)))
                                     + (float)((float)(v47 * v85) * *(float *)(v75 + 4 * v83))) < v56)
                          {
                            v86 = v70 + 4 * v71 * v400;
                            v87 = v86 + 4 * v71;
                            v88 = 4 * v72;
                            v89 = 4 * v73;
                            if ((float)((float)((float)((float)((float)(v48 * v76) * *(float *)(v86 + v88))
                                                       + (float)((float)(v48 * v77) * *(float *)(v86 + v89)))
                                               + (float)((float)(v49 * v76) * *(float *)(v87 + v88)))
                                       + (float)((float)(v49 * v77) * *(float *)(v87 + v89))) < v56)
                            {
                              v90 = 4 * v78;
                              v91 = 4 * v79;
                              if ((float)((float)((float)((float)((float)(v48 * v80) * *(float *)(v86 + v90))
                                                         + (float)((float)(v48 * v81) * *(float *)(v86 + v91)))
                                                 + (float)((float)(v49 * v80) * *(float *)(v87 + v90)))
                                         + (float)((float)(v49 * v81) * *(float *)(v87 + v91))) < v56)
                              {
                                v92 = 4 * v82;
                                v93 = 4 * v83;
                                if ((float)((float)((float)((float)((float)(v48 * v84) * *(float *)(v86 + v92))
                                                           + (float)((float)(v48 * v85) * *(float *)(v86 + v93)))
                                                   + (float)((float)(v49 * v84) * *(float *)(v87 + v92)))
                                           + (float)((float)(v49 * v85) * *(float *)(v87 + v93))) < v56)
                                {
                                  v94 = v70 + 4 * v71 * v397;
                                  v95 = v94 + 4 * v71;
                                  if ((float)((float)((float)((float)((float)(v51 * v76) * *(float *)(v94 + v88))
                                                             + (float)((float)(v51 * v77) * *(float *)(v94 + v89)))
                                                     + (float)((float)(v52 * v76) * *(float *)(v95 + v88)))
                                             + (float)((float)(v52 * v77) * *(float *)(v95 + v89))) < v56
                                    && (float)((float)((float)((float)((float)(v51 * v80) * *(float *)(v94 + v90))
                                                             + (float)((float)(v51 * v81) * *(float *)(v94 + v91)))
                                                     + (float)((float)(v52 * v80) * *(float *)(v95 + v90)))
                                             + (float)((float)(v52 * v81) * *(float *)(v95 + v91))) < v56
                                    && (float)((float)((float)((float)((float)(v51 * v84) * *(float *)(v94 + v92))
                                                             + (float)((float)(v51 * v85) * *(float *)(v94 + v93)))
                                                     + (float)((float)(v52 * v84) * *(float *)(v95 + v92)))
                                             + (float)((float)(v52 * v85) * *(float *)(v95 + v93))) < v56)
                                  {
                                    v96 = v23 * v58;
                                    v98 = *(char **)(a1 + 96);
                                    v97 = *(_QWORD *)(a1 + 104);
                                    if ((unint64_t)v98 < v97)
                                    {
                                      *(float *)v98 = v96;
                                      *((float *)v98 + 1) = v53;
                                      *((_DWORD *)v98 + 2) = v395;
                                      *((float *)v98 + 3) = v24;
                                      *((_QWORD *)v98 + 2) = 0;
                                      *(_QWORD *)(v98 + 21) = 0;
                                      goto LABEL_100;
                                    }
                                    v133 = (char *)*v384;
                                    v134 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v98[-*v384] >> 4);
                                    v135 = v134 + 1;
                                    if (v134 + 1 > 0x555555555555555)
                                      goto LABEL_369;
                                    v136 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v97 - (_QWORD)v133) >> 4);
                                    if (2 * v136 > v135)
                                      v135 = 2 * v136;
                                    if (v136 >= 0x2AAAAAAAAAAAAAALL)
                                      v135 = 0x555555555555555;
                                    v350 = v24;
                                    v378 = v30;
                                    v381 = v20;
                                    v375 = v31;
                                    v370 = v53;
                                    v358 = v135;
                                    if (v135)
                                    {
                                      v338 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v98[-*v384] >> 4);
                                      v342 = v23 * v58;
                                      v346 = (char *)*v384;
                                      v352 = *(char **)(a1 + 96);
                                      v362 = v23;
                                      if (v135 > 0x555555555555555)
                                        goto LABEL_370;
                                      v137 = (char *)operator new(48 * v135);
                                      v26 = -0.5;
                                      v8 = v396;
                                      v23 = v362;
                                      v24 = v350;
                                      v30 = v378;
                                      v20 = v381;
                                      v34 = v385;
                                      v33 = v388;
                                      v53 = v370;
                                      v98 = v352;
                                      v133 = v346;
                                      v96 = v342;
                                      v134 = v338;
                                    }
                                    else
                                    {
                                      v137 = 0;
                                    }
                                    v142 = &v137[48 * v134];
                                    *(float *)v142 = v96;
                                    *((float *)v142 + 1) = v53;
                                    *((_DWORD *)v142 + 2) = v395;
                                    *((float *)v142 + 3) = v24;
                                    *((_QWORD *)v142 + 2) = 0;
                                    *(_QWORD *)(v142 + 21) = 0;
                                    *((_DWORD *)v142 + 8) = v394;
                                    *((_DWORD *)v142 + 9) = v393;
                                    *((_DWORD *)v142 + 10) = 0;
                                    *((float *)v142 + 11) = v57;
                                    v143 = v142;
                                    if (v98 == v133)
                                      goto LABEL_127;
                                    v144 = v358;
                                    do
                                    {
                                      v145 = *((_OWORD *)v98 - 3);
                                      v146 = *((_OWORD *)v98 - 1);
                                      *((_OWORD *)v143 - 2) = *((_OWORD *)v98 - 2);
                                      *((_OWORD *)v143 - 1) = v146;
                                      *((_OWORD *)v143 - 3) = v145;
                                      v143 -= 48;
                                      v98 -= 48;
                                    }
                                    while (v98 != v133);
LABEL_126:
                                    v98 = (char *)*v384;
                                    goto LABEL_128;
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
                if (v61 > v56 && v62 > v56 && v63 > v56)
                {
                  v101 = *(float *)(v39 + 4 * v60) <= v56 || *(float *)(v39 + 4 * v54) <= v56;
                  if (!v101
                    && *(float *)(v39 + 4 * v55) > v56
                    && *(float *)(v41 + 4 * v60) > v56
                    && *(float *)(v41 + 4 * v54) > v56
                    && *(float *)(v41 + 4 * v55) > v56
                    && *(float *)(v42 + 4 * v60) > v56
                    && *(float *)(v42 + 4 * v54) > v56
                    && *(float *)(v42 + 4 * v55) > v56
                    && *(float *)(v43 + 4 * v60) > v56
                    && *(float *)(v43 + 4 * v55) > v56
                    && *(float *)(v44 + 4 * v60) > v56
                    && *(float *)(v44 + 4 * v54) > v56
                    && *(float *)(v44 + 4 * v55) > v56)
                  {
                    v103 = *v33;
                    v104 = *v34;
                    v105 = (float)(v59 + v26);
                    v106 = (v105 + 1);
                    v107 = *v33 + 4 * *v34 * v403;
                    v108 = v107 + 4 * *v34;
                    v109 = (float)v106 - (float)(v59 + v26);
                    v110 = (float)(v59 + v26) - (float)(float)(v59 + v26);
                    if ((float)((float)((float)((float)((float)(v46 * v109) * *(float *)(v107 + 4 * v105))
                                               + (float)((float)(v46 * v110) * *(float *)(v107 + 4 * v106)))
                                       + (float)((float)(v47 * v109) * *(float *)(v108 + 4 * v105)))
                               + (float)((float)(v47 * v110) * *(float *)(v108 + 4 * v106))) > v56)
                    {
                      v111 = v59;
                      v112 = (v111 + 1);
                      v113 = (float)v112 - v59;
                      v114 = v59 - (float)v59;
                      if ((float)((float)((float)((float)((float)(v46 * v113) * *(float *)(v107 + 4 * v111))
                                                 + (float)((float)(v46 * v114) * *(float *)(v107 + 4 * v112)))
                                         + (float)((float)(v47 * v113) * *(float *)(v108 + 4 * v111)))
                                 + (float)((float)(v47 * v114) * *(float *)(v108 + 4 * v112))) > v56)
                      {
                        v115 = v59 + 0.5;
                        v116 = v115;
                        v117 = (v116 + 1);
                        v118 = (float)v117 - v115;
                        v119 = v115 - (float)v115;
                        if ((float)((float)((float)((float)((float)(v46 * v118)
                                                           * *(float *)(v107 + 4 * v116))
                                                   + (float)((float)(v46 * v119) * *(float *)(v107 + 4 * v117)))
                                           + (float)((float)(v47 * v118) * *(float *)(v108 + 4 * v116)))
                                   + (float)((float)(v47 * v119) * *(float *)(v108 + 4 * v117))) > v56)
                        {
                          v120 = v103 + 4 * v104 * v400;
                          v121 = v120 + 4 * v104;
                          v122 = 4 * v105;
                          v123 = 4 * v106;
                          if ((float)((float)((float)((float)((float)(v48 * v109) * *(float *)(v120 + v122))
                                                     + (float)((float)(v48 * v110) * *(float *)(v120 + v123)))
                                             + (float)((float)(v49 * v109) * *(float *)(v121 + v122)))
                                     + (float)((float)(v49 * v110) * *(float *)(v121 + v123))) > v56)
                          {
                            v124 = 4 * v111;
                            v125 = 4 * v112;
                            if ((float)((float)((float)((float)((float)(v48 * v113) * *(float *)(v120 + v124))
                                                       + (float)((float)(v48 * v114) * *(float *)(v120 + v125)))
                                               + (float)((float)(v49 * v113) * *(float *)(v121 + v124)))
                                       + (float)((float)(v49 * v114) * *(float *)(v121 + v125))) > v56)
                            {
                              v126 = 4 * v116;
                              v127 = 4 * v117;
                              if ((float)((float)((float)((float)((float)(v48 * v118) * *(float *)(v120 + v126))
                                                         + (float)((float)(v48 * v119) * *(float *)(v120 + v127)))
                                                 + (float)((float)(v49 * v118) * *(float *)(v121 + v126)))
                                         + (float)((float)(v49 * v119) * *(float *)(v121 + v127))) > v56)
                              {
                                v128 = v103 + 4 * v104 * v397;
                                v129 = v128 + 4 * v104;
                                if ((float)((float)((float)((float)((float)(v51 * v109) * *(float *)(v128 + v122))
                                                           + (float)((float)(v51 * v110) * *(float *)(v128 + v123)))
                                                   + (float)((float)(v52 * v109) * *(float *)(v129 + v122)))
                                           + (float)((float)(v52 * v110) * *(float *)(v129 + v123))) > v56
                                  && (float)((float)((float)((float)((float)(v51 * v113) * *(float *)(v128 + v124))
                                                           + (float)((float)(v51 * v114) * *(float *)(v128 + v125)))
                                                   + (float)((float)(v52 * v113) * *(float *)(v129 + v124)))
                                           + (float)((float)(v52 * v114) * *(float *)(v129 + v125))) > v56
                                  && (float)((float)((float)((float)((float)(v51 * v118) * *(float *)(v128 + v126))
                                                           + (float)((float)(v51 * v119) * *(float *)(v128 + v127)))
                                                   + (float)((float)(v52 * v118) * *(float *)(v129 + v126)))
                                           + (float)((float)(v52 * v119) * *(float *)(v129 + v127))) > v56)
                                {
                                  v130 = v23 * v58;
                                  v98 = *(char **)(a1 + 96);
                                  v131 = *(_QWORD *)(a1 + 104);
                                  if ((unint64_t)v98 < v131)
                                  {
                                    *(float *)v98 = v130;
                                    *((float *)v98 + 1) = v53;
                                    *((_DWORD *)v98 + 2) = v395;
                                    *((float *)v98 + 3) = v24;
                                    *((_QWORD *)v98 + 2) = 0;
                                    *((_DWORD *)v98 + 6) = 0;
                                    v98[28] = 1;
LABEL_100:
                                    *((_DWORD *)v98 + 8) = v394;
                                    *((_DWORD *)v98 + 9) = v393;
                                    *((_DWORD *)v98 + 10) = 0;
                                    v132 = v98 + 48;
                                    *((float *)v98 + 11) = v57;
LABEL_130:
                                    *(_QWORD *)(a1 + 96) = v132;
                                    goto LABEL_19;
                                  }
                                  v138 = (char *)*v384;
                                  v139 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v98[-*v384] >> 4);
                                  v140 = v139 + 1;
                                  if (v139 + 1 > 0x555555555555555)
                                    goto LABEL_369;
                                  v141 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v131 - (_QWORD)v138) >> 4);
                                  if (2 * v141 > v140)
                                    v140 = 2 * v141;
                                  if (v141 >= 0x2AAAAAAAAAAAAAALL)
                                    v140 = 0x555555555555555;
                                  v350 = v24;
                                  v378 = v30;
                                  v381 = v20;
                                  v375 = v31;
                                  v370 = v53;
                                  v358 = v140;
                                  if (v140)
                                  {
                                    v339 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v98[-*v384] >> 4);
                                    v343 = v23 * v58;
                                    v347 = (char *)*v384;
                                    v353 = *(char **)(a1 + 96);
                                    v363 = v23;
                                    if (v140 > 0x555555555555555)
                                      goto LABEL_370;
                                    v137 = (char *)operator new(48 * v140);
                                    v26 = -0.5;
                                    v8 = v396;
                                    v23 = v363;
                                    v24 = v350;
                                    v30 = v378;
                                    v20 = v381;
                                    v34 = v385;
                                    v33 = v388;
                                    v53 = v370;
                                    v98 = v353;
                                    v138 = v347;
                                    v130 = v343;
                                    v139 = v339;
                                  }
                                  else
                                  {
                                    v137 = 0;
                                  }
                                  v142 = &v137[48 * v139];
                                  *(float *)v142 = v130;
                                  *((float *)v142 + 1) = v53;
                                  *((_DWORD *)v142 + 2) = v395;
                                  *((float *)v142 + 3) = v24;
                                  *((_QWORD *)v142 + 2) = 0;
                                  *((_DWORD *)v142 + 6) = 0;
                                  v142[28] = 1;
                                  *((_DWORD *)v142 + 8) = v394;
                                  *((_DWORD *)v142 + 9) = v393;
                                  *((_DWORD *)v142 + 10) = 0;
                                  *((float *)v142 + 11) = v57;
                                  v143 = v142;
                                  if (v98 != v138)
                                  {
                                    v144 = v358;
                                    do
                                    {
                                      v147 = *((_OWORD *)v98 - 3);
                                      v148 = *((_OWORD *)v98 - 1);
                                      *((_OWORD *)v143 - 2) = *((_OWORD *)v98 - 2);
                                      *((_OWORD *)v143 - 1) = v148;
                                      *((_OWORD *)v143 - 3) = v147;
                                      v143 -= 48;
                                      v98 -= 48;
                                    }
                                    while (v98 != v138);
                                    goto LABEL_126;
                                  }
LABEL_127:
                                  v144 = v358;
LABEL_128:
                                  v132 = v142 + 48;
                                  *(_QWORD *)(a1 + 88) = v143;
                                  *(_QWORD *)(a1 + 96) = v132;
                                  *(_QWORD *)(a1 + 104) = &v137[48 * v144];
                                  if (v98)
                                  {
                                    v149 = v23;
                                    v364 = v132;
                                    operator delete(v98);
                                    v132 = v364;
                                    v53 = v370;
                                    v34 = v385;
                                    v33 = v388;
                                    v31 = v375;
                                    v30 = v378;
                                    v20 = v381;
                                    v24 = v350;
                                    v23 = v149;
                                    v8 = v396;
                                    v26 = -0.5;
                                  }
                                  goto LABEL_130;
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
LABEL_19:
                v54 = v55;
              }
              while ((uint64_t *)v55 != v14);
            }
            while (v35 != v20);
          }
        }
      }
LABEL_6:
      v7 = v8 + 1;
      v3 = v391;
      v5 = v391[6];
      if (v8 + 1 >= 0x8E38E38E38E38E39 * ((v391[7] - v5) >> 4))
        return;
    }
    v150 = *v14;
    v27 = -2.0;
    v28 = 2.0;
    v8 = v396;
LABEL_132:
    if ((int)v150 < 3 || (int)v17 < 3)
      goto LABEL_6;
    v151 = (_QWORD *)(v5 + 144 * v9 + 120);
    v152 = (_QWORD *)(v5 + 144 * v8 + 120);
    v153 = v5 + 144 * v16;
    v154 = (_QWORD *)(v153 + 88);
    v155 = (uint64_t *)(v153 + 40);
    v156 = (v150 - 1);
    v157 = (v17 - 1);
    v158 = 1;
    v386 = (uint64_t *)(v153 + 40);
    v389 = v156;
LABEL_136:
    v159 = v158;
    v160 = (float)(2 * v158);
    v161 = 8 * v158;
    v162 = 8 * v158 - 8;
    v163 = *(_QWORD *)(*v151 + v162);
    v164 = *(_QWORD *)(*v151 + 8 * v158++);
    v165 = *(_QWORD *)(*v151 + 8 * v158);
    v166 = *(_QWORD *)(*v152 + v162);
    v167 = *(_QWORD *)(*v152 + v161);
    v168 = *(_QWORD *)(*v152 + 8 * v158);
    v404 = (float)(v160 + v27);
    v169 = (float)(v404 + 1) - (float)(v160 + v27);
    v170 = (float)(v160 + v27) - (float)(float)(v160 + v27);
    v401 = v160;
    v171 = (float)(v401 + 1) - v160;
    v172 = v160 - (float)v160;
    v398 = (float)(v160 + v28);
    v173 = (float)(v398 + 1) - (float)(v160 + v28);
    v174 = (float)(v160 + v28) - (float)(float)(v160 + v28);
    v175 = v23 * (float)v159;
    v176 = 1;
    while (1)
    {
      v178 = *(float *)(v164 + 4 * v176);
      v179 = fabsf(v178);
      if (v179 < *(float *)(a1 + 8))
      {
        v177 = v176 + 1;
      }
      else
      {
        v180 = (float)(2 * v176);
        v181 = v176 - 1;
        v182 = *(float *)(v163 + 4 * (v176 - 1));
        v183 = *(float *)(v163 + 4 * v176);
        v177 = v176 + 1;
        v184 = *(float *)(v163 + 4 * (v176 + 1));
        if (v182 < v178
          && v183 < v178
          && v184 < v178
          && *(float *)(v164 + 4 * v181) < v178
          && *(float *)(v164 + 4 * v177) < v178)
        {
          v188 = *(float *)(v165 + 4 * v181) < v178 && *(float *)(v165 + 4 * v176) < v178;
          if (v188
            && *(float *)(v165 + 4 * v177) < v178
            && *(float *)(v166 + 4 * v181) < v178
            && *(float *)(v166 + 4 * v176) < v178
            && *(float *)(v166 + 4 * v177) < v178
            && *(float *)(v167 + 4 * v181) < v178
            && *(float *)(v167 + 4 * v176) < v178
            && *(float *)(v167 + 4 * v177) < v178
            && *(float *)(v168 + 4 * v181) < v178
            && *(float *)(v168 + 4 * v176) < v178
            && *(float *)(v168 + 4 * v177) < v178)
          {
            v223 = *v154;
            v224 = *v155;
            v225 = (float)(v180 + v27);
            v226 = (v225 + 1);
            v227 = *v154 + 4 * *v155 * v404;
            v228 = v227 + 4 * *v155;
            v229 = (float)v226 - (float)(v180 + v27);
            v230 = (float)(v180 + v27) - (float)(float)(v180 + v27);
            if ((float)((float)((float)((float)((float)(v169 * v229) * *(float *)(v227 + 4 * v225))
                                       + (float)((float)(v169 * v230) * *(float *)(v227 + 4 * v226)))
                               + (float)((float)(v170 * v229) * *(float *)(v228 + 4 * v225)))
                       + (float)((float)(v170 * v230) * *(float *)(v228 + 4 * v226))) < v178)
            {
              v231 = v180;
              v232 = (v231 + 1);
              v233 = (float)v232 - v180;
              v234 = v180 - (float)v180;
              if ((float)((float)((float)((float)((float)(v169 * v233) * *(float *)(v227 + 4 * v231))
                                         + (float)((float)(v169 * v234) * *(float *)(v227 + 4 * v232)))
                                 + (float)((float)(v170 * v233) * *(float *)(v228 + 4 * v231)))
                         + (float)((float)(v170 * v234) * *(float *)(v228 + 4 * v232))) < v178)
              {
                v235 = (float)(v180 + v28);
                v236 = (v235 + 1);
                v237 = (float)v236 - (float)(v180 + v28);
                v238 = (float)(v180 + v28) - (float)(float)(v180 + v28);
                v155 = v386;
                v156 = v389;
                if ((float)((float)((float)((float)((float)(v169 * v237) * *(float *)(v227 + 4 * v235))
                                           + (float)((float)(v169 * v238) * *(float *)(v227 + 4 * v236)))
                                   + (float)((float)(v170 * v237) * *(float *)(v228 + 4 * v235)))
                           + (float)((float)(v170 * v238) * *(float *)(v228 + 4 * v236))) < v178)
                {
                  v239 = v223 + 4 * v224 * v401;
                  v240 = v239 + 4 * v224;
                  v241 = 4 * v225;
                  v242 = 4 * v226;
                  if ((float)((float)((float)((float)((float)(v171 * v229) * *(float *)(v239 + v241))
                                             + (float)((float)(v171 * v230) * *(float *)(v239 + v242)))
                                     + (float)((float)(v172 * v229) * *(float *)(v240 + v241)))
                             + (float)((float)(v172 * v230) * *(float *)(v240 + v242))) < v178)
                  {
                    v243 = 4 * v231;
                    v244 = 4 * v232;
                    if ((float)((float)((float)((float)((float)(v171 * v233) * *(float *)(v239 + v243))
                                               + (float)((float)(v171 * v234) * *(float *)(v239 + v244)))
                                       + (float)((float)(v172 * v233) * *(float *)(v240 + v243)))
                               + (float)((float)(v172 * v234) * *(float *)(v240 + v244))) < v178)
                    {
                      v245 = 4 * v235;
                      v246 = 4 * v236;
                      if ((float)((float)((float)((float)((float)(v171 * v237) * *(float *)(v239 + v245))
                                                 + (float)((float)(v171 * v238) * *(float *)(v239 + v246)))
                                         + (float)((float)(v172 * v237) * *(float *)(v240 + v245)))
                                 + (float)((float)(v172 * v238) * *(float *)(v240 + v246))) < v178)
                      {
                        v247 = v223 + 4 * v224 * v398;
                        v248 = v247 + 4 * v224;
                        if ((float)((float)((float)((float)((float)(v173 * v229) * *(float *)(v247 + v241))
                                                   + (float)((float)(v173 * v230) * *(float *)(v247 + v242)))
                                           + (float)((float)(v174 * v229) * *(float *)(v248 + v241)))
                                   + (float)((float)(v174 * v230) * *(float *)(v248 + v242))) < v178
                          && (float)((float)((float)((float)((float)(v173 * v233) * *(float *)(v247 + v243))
                                                   + (float)((float)(v173 * v234) * *(float *)(v247 + v244)))
                                           + (float)((float)(v174 * v233) * *(float *)(v248 + v243)))
                                   + (float)((float)(v174 * v234) * *(float *)(v248 + v244))) < v178
                          && (float)((float)((float)((float)((float)(v173 * v237) * *(float *)(v247 + v245))
                                                   + (float)((float)(v173 * v238) * *(float *)(v247 + v246)))
                                           + (float)((float)(v174 * v237) * *(float *)(v248 + v245)))
                                   + (float)((float)(v174 * v238) * *(float *)(v248 + v246))) < v178)
                        {
                          v249 = v23 * (float)(int)v176;
                          v222 = *(char **)(a1 + 96);
                          v250 = *(_QWORD *)(a1 + 104);
                          if ((unint64_t)v222 >= v250)
                          {
                            v252 = (char *)*v384;
                            v253 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v222[-*v384] >> 4);
                            v254 = v253 + 1;
                            if (v253 + 1 > 0x555555555555555)
                              goto LABEL_369;
                            v255 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v250 - (_QWORD)v252) >> 4);
                            if (2 * v255 > v254)
                              v254 = 2 * v255;
                            if (v255 >= 0x2AAAAAAAAAAAAAALL)
                              v254 = 0x555555555555555;
                            v351 = v24;
                            v379 = v152;
                            v382 = v151;
                            v376 = v154;
                            v371 = v175;
                            v359 = v254;
                            if (v254)
                            {
                              v340 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v222[-*v384] >> 4);
                              v344 = v249;
                              v348 = (char *)*v384;
                              v354 = *(char **)(a1 + 96);
                              v365 = v23;
                              if (v254 > 0x555555555555555)
                                goto LABEL_370;
                              v256 = (char *)operator new(48 * v254);
                              v27 = -2.0;
                              v28 = 2.0;
                              v8 = v396;
                              v23 = v365;
                              v24 = v351;
                              v152 = v379;
                              v151 = v382;
                              v155 = v386;
                              v156 = v389;
                              v175 = v371;
                              v222 = v354;
                              v252 = v348;
                              v249 = v344;
                              v253 = v340;
                            }
                            else
                            {
                              v256 = 0;
                            }
                            v261 = &v256[48 * v253];
                            *(float *)v261 = v249;
                            *((float *)v261 + 1) = v175;
                            *((_DWORD *)v261 + 2) = v395;
                            *((float *)v261 + 3) = v24;
                            *((_QWORD *)v261 + 2) = 0;
                            *(_QWORD *)(v261 + 21) = 0;
                            *((_DWORD *)v261 + 8) = v394;
                            *((_DWORD *)v261 + 9) = v393;
                            *((_DWORD *)v261 + 10) = 0;
                            *((float *)v261 + 11) = v179;
                            v262 = v261;
                            if (v222 == v252)
                              goto LABEL_242;
                            v263 = v359;
                            do
                            {
                              v264 = *((_OWORD *)v222 - 3);
                              v265 = *((_OWORD *)v222 - 1);
                              *((_OWORD *)v262 - 2) = *((_OWORD *)v222 - 2);
                              *((_OWORD *)v262 - 1) = v265;
                              *((_OWORD *)v262 - 3) = v264;
                              v262 -= 48;
                              v222 -= 48;
                            }
                            while (v222 != v252);
LABEL_241:
                            v222 = (char *)*v384;
                            goto LABEL_243;
                          }
                          *(float *)v222 = v249;
                          *((float *)v222 + 1) = v175;
                          *((_DWORD *)v222 + 2) = v395;
                          *((float *)v222 + 3) = v24;
                          *((_QWORD *)v222 + 2) = 0;
                          *(_QWORD *)(v222 + 21) = 0;
LABEL_214:
                          *((_DWORD *)v222 + 8) = v394;
                          *((_DWORD *)v222 + 9) = v393;
                          *((_DWORD *)v222 + 10) = 0;
                          v251 = v222 + 48;
                          *((float *)v222 + 11) = v179;
LABEL_245:
                          *(_QWORD *)(a1 + 96) = v251;
                          goto LABEL_138;
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        if (v182 <= v178 || v183 <= v178 || v184 <= v178)
          goto LABEL_138;
        if (*(float *)(v164 + 4 * v181) <= v178 || *(float *)(v164 + 4 * v177) <= v178)
          goto LABEL_138;
        if (*(float *)(v165 + 4 * v181) <= v178)
          goto LABEL_138;
        if (*(float *)(v165 + 4 * v176) <= v178)
          goto LABEL_138;
        if (*(float *)(v165 + 4 * v177) <= v178)
          goto LABEL_138;
        if (*(float *)(v166 + 4 * v181) <= v178)
          goto LABEL_138;
        if (*(float *)(v166 + 4 * v176) <= v178)
          goto LABEL_138;
        if (*(float *)(v166 + 4 * v177) <= v178)
          goto LABEL_138;
        if (*(float *)(v167 + 4 * v181) <= v178)
          goto LABEL_138;
        if (*(float *)(v167 + 4 * v176) <= v178)
          goto LABEL_138;
        if (*(float *)(v167 + 4 * v177) <= v178)
          goto LABEL_138;
        if (*(float *)(v168 + 4 * v181) <= v178)
          goto LABEL_138;
        if (*(float *)(v168 + 4 * v176) <= v178)
          goto LABEL_138;
        if (*(float *)(v168 + 4 * v177) <= v178)
          goto LABEL_138;
        v193 = *v154;
        v194 = *v155;
        v195 = (float)(v180 + v27);
        v196 = (v195 + 1);
        v197 = *v154 + 4 * *v155 * v404;
        v198 = v197 + 4 * *v155;
        v199 = (float)v196 - (float)(v180 + v27);
        v200 = (float)(v180 + v27) - (float)(float)(v180 + v27);
        if ((float)((float)((float)((float)((float)(v169 * v199) * *(float *)(v197 + 4 * v195))
                                   + (float)((float)(v169 * v200) * *(float *)(v197 + 4 * v196)))
                           + (float)((float)(v170 * v199) * *(float *)(v198 + 4 * v195)))
                   + (float)((float)(v170 * v200) * *(float *)(v198 + 4 * v196))) <= v178)
          goto LABEL_138;
        v201 = v180;
        v202 = (v201 + 1);
        v203 = (float)v202 - v180;
        v204 = v180 - (float)v180;
        if ((float)((float)((float)((float)((float)(v169 * v203) * *(float *)(v197 + 4 * v201))
                                   + (float)((float)(v169 * v204) * *(float *)(v197 + 4 * v202)))
                           + (float)((float)(v170 * v203) * *(float *)(v198 + 4 * v201)))
                   + (float)((float)(v170 * v204) * *(float *)(v198 + 4 * v202))) <= v178)
          goto LABEL_138;
        v205 = v180 + v28;
        v206 = v205;
        v207 = (v206 + 1);
        v208 = (float)v207 - v205;
        v209 = v205 - (float)v205;
        if ((float)((float)((float)((float)((float)(v169 * v208) * *(float *)(v197 + 4 * v206))
                                   + (float)((float)(v169 * v209) * *(float *)(v197 + 4 * v207)))
                           + (float)((float)(v170 * v208) * *(float *)(v198 + 4 * v206)))
                   + (float)((float)(v170 * v209) * *(float *)(v198 + 4 * v207))) > v178)
        {
          v210 = v193 + 4 * v194 * v401;
          v211 = v210 + 4 * v194;
          v212 = 4 * v195;
          v213 = 4 * v196;
          v156 = v389;
          if ((float)((float)((float)((float)((float)(v171 * v199) * *(float *)(v210 + v212))
                                     + (float)((float)(v171 * v200) * *(float *)(v210 + v213)))
                             + (float)((float)(v172 * v199) * *(float *)(v211 + v212)))
                     + (float)((float)(v172 * v200) * *(float *)(v211 + v213))) <= v178)
            goto LABEL_138;
          v214 = 4 * v201;
          v215 = 4 * v202;
          if ((float)((float)((float)((float)((float)(v171 * v203) * *(float *)(v210 + v214))
                                     + (float)((float)(v171 * v204) * *(float *)(v210 + v215)))
                             + (float)((float)(v172 * v203) * *(float *)(v211 + v214)))
                     + (float)((float)(v172 * v204) * *(float *)(v211 + v215))) <= v178)
            goto LABEL_138;
          v216 = 4 * v206;
          v217 = 4 * v207;
          if ((float)((float)((float)((float)((float)(v171 * v208) * *(float *)(v210 + v216))
                                     + (float)((float)(v171 * v209) * *(float *)(v210 + v217)))
                             + (float)((float)(v172 * v208) * *(float *)(v211 + v216)))
                     + (float)((float)(v172 * v209) * *(float *)(v211 + v217))) <= v178)
            goto LABEL_138;
          v218 = v193 + 4 * v194 * v398;
          v219 = v218 + 4 * v194;
          if ((float)((float)((float)((float)((float)(v173 * v199) * *(float *)(v218 + v212))
                                     + (float)((float)(v173 * v200) * *(float *)(v218 + v213)))
                             + (float)((float)(v174 * v199) * *(float *)(v219 + v212)))
                     + (float)((float)(v174 * v200) * *(float *)(v219 + v213))) <= v178
            || (float)((float)((float)((float)((float)(v173 * v203) * *(float *)(v218 + v214))
                                     + (float)((float)(v173 * v204) * *(float *)(v218 + v215)))
                             + (float)((float)(v174 * v203) * *(float *)(v219 + v214)))
                     + (float)((float)(v174 * v204) * *(float *)(v219 + v215))) <= v178
            || (float)((float)((float)((float)((float)(v173 * v208) * *(float *)(v218 + v216))
                                     + (float)((float)(v173 * v209) * *(float *)(v218 + v217)))
                             + (float)((float)(v174 * v208) * *(float *)(v219 + v216)))
                     + (float)((float)(v174 * v209) * *(float *)(v219 + v217))) <= v178)
          {
            goto LABEL_138;
          }
          v220 = v23 * (float)(int)v176;
          v222 = *(char **)(a1 + 96);
          v221 = *(_QWORD *)(a1 + 104);
          if ((unint64_t)v222 < v221)
          {
            *(float *)v222 = v220;
            *((float *)v222 + 1) = v175;
            *((_DWORD *)v222 + 2) = v395;
            *((float *)v222 + 3) = v24;
            *((_QWORD *)v222 + 2) = 0;
            *((_DWORD *)v222 + 6) = 0;
            v222[28] = 1;
            goto LABEL_214;
          }
          v257 = (char *)*v384;
          v258 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v222[-*v384] >> 4);
          v259 = v258 + 1;
          if (v258 + 1 > 0x555555555555555)
LABEL_369:
            sub_20E867F44();
          v260 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v221 - (_QWORD)v257) >> 4);
          if (2 * v260 > v259)
            v259 = 2 * v260;
          if (v260 >= 0x2AAAAAAAAAAAAAALL)
            v259 = 0x555555555555555;
          v351 = v24;
          v379 = v152;
          v382 = v151;
          v376 = v154;
          v371 = v175;
          v359 = v259;
          if (v259)
          {
            v341 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v222[-*v384] >> 4);
            v345 = v220;
            v349 = (char *)*v384;
            v355 = *(char **)(a1 + 96);
            v366 = v23;
            if (v259 > 0x555555555555555)
LABEL_370:
              sub_20E877A38();
            v256 = (char *)operator new(48 * v259);
            v27 = -2.0;
            v28 = 2.0;
            v8 = v396;
            v23 = v366;
            v24 = v351;
            v152 = v379;
            v151 = v382;
            v155 = v386;
            v156 = v389;
            v175 = v371;
            v222 = v355;
            v257 = v349;
            v220 = v345;
            v258 = v341;
          }
          else
          {
            v256 = 0;
          }
          v261 = &v256[48 * v258];
          *(float *)v261 = v220;
          *((float *)v261 + 1) = v175;
          *((_DWORD *)v261 + 2) = v395;
          *((float *)v261 + 3) = v24;
          *((_QWORD *)v261 + 2) = 0;
          *((_DWORD *)v261 + 6) = 0;
          v261[28] = 1;
          *((_DWORD *)v261 + 8) = v394;
          *((_DWORD *)v261 + 9) = v393;
          *((_DWORD *)v261 + 10) = 0;
          *((float *)v261 + 11) = v179;
          v262 = v261;
          if (v222 != v257)
          {
            v263 = v359;
            do
            {
              v266 = *((_OWORD *)v222 - 3);
              v267 = *((_OWORD *)v222 - 1);
              *((_OWORD *)v262 - 2) = *((_OWORD *)v222 - 2);
              *((_OWORD *)v262 - 1) = v267;
              *((_OWORD *)v262 - 3) = v266;
              v262 -= 48;
              v222 -= 48;
            }
            while (v222 != v257);
            goto LABEL_241;
          }
LABEL_242:
          v263 = v359;
LABEL_243:
          v251 = v261 + 48;
          *(_QWORD *)(a1 + 88) = v262;
          *(_QWORD *)(a1 + 96) = v251;
          *(_QWORD *)(a1 + 104) = &v256[48 * v263];
          if (v222)
          {
            v268 = v23;
            v367 = v251;
            operator delete(v222);
            v251 = v367;
            v175 = v371;
            v155 = v386;
            v156 = v389;
            v154 = v376;
            v152 = v379;
            v151 = v382;
            v24 = v351;
            v23 = v268;
            v8 = v396;
            v28 = 2.0;
            v27 = -2.0;
          }
          goto LABEL_245;
        }
        v156 = v389;
      }
LABEL_138:
      v176 = v177;
      if (v177 == v157)
      {
        if (v158 == v156)
          goto LABEL_6;
        goto LABEL_136;
      }
    }
  }
}

void sub_20FD693C0(uint64_t a1, uint64_t a2, uint64_t a3, double a4, double a5, double a6, double a7, double a8, double a9, float32x2_t a10, double a11)
{
  float32x2_t v11;
  uint64_t v13;
  char **v14;
  uint64_t v15;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  float v21;
  float v22;
  float v23;
  int v24;
  int v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v39;
  BOOL v40;
  unint64_t v41;
  BOOL v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  float v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  float v54;
  float v55;
  __int32 *v56;
  float v57;
  float v58;
  float v59;
  uint64_t v60;
  float v61;
  float v62;
  float v63;
  uint64_t v64;
  float v65;
  float v66;
  float v67;
  float v68;
  float v69;
  float v70;
  float v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  float v78;
  float v79;
  float v80;
  float v81;
  uint64_t v82;
  uint64_t v83;
  float v84;
  float v85;
  float v86;
  float v87;
  float v88;
  uint64_t v89;
  float v90;
  float v91;
  float v92;
  float32x2_t v93;
  float32x2_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  float32x2_t v99;
  float32x2_t v100;
  float32x2_t v101;
  float32x2_t v102;
  float32x2_t v103;
  float32x2_t v104;
  float32x2_t v105;
  float32x2_t v106;
  float32x2_t v107;
  float32x2_t v108;
  float32x2_t v109;
  float32x2_t v110;
  float v111;
  float v112;
  float v113;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  float v120;
  float v121;
  float v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  __int32 *v126;
  uint64_t v127;
  uint64_t v128;
  float v129;
  float v130;
  float v131;
  float v132;
  uint64_t v133;
  float v134;
  float v135;
  float v136;
  uint64_t v137;
  float v138;
  float v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  float v146;
  float v147;
  float v148;
  float v149;
  uint64_t v150;
  uint64_t v151;
  float v152;
  float v153;
  float v154;
  uint64_t v155;
  float v156;
  float v157;
  float32x2_t v158;
  float32x2_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  float32x2_t v164;
  float32x2_t v165;
  float32x2_t v166;
  float32x2_t v167;
  float32x2_t v168;
  float32x2_t v169;
  float32x2_t v170;
  float32x2_t v171;
  float32x2_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  float *v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  float *v182;
  uint64_t v183;
  uint64_t *v184;
  uint64_t v185;
  uint64_t v186;
  float v187;
  float v188;
  float v189;
  float v190;
  float v191;
  float v192;
  float v193;
  float v194;
  float v195;
  float v196;
  float v197;
  float v199;
  float v200;
  float32x2_t v201;
  float32x2_t v202;
  float32x2_t v203;
  float v204;
  float v206;
  float *v207;
  float v208;
  float v209;
  char *v210;
  __int128 v211;
  __int128 v212;
  float v213;

  v13 = *(_QWORD *)(a1 + 88);
  v15 = *(_QWORD *)(a1 + 96);
  v14 = (char **)(a1 + 88);
  if (v15 == v13)
  {
    v17 = 0;
    v20 = 0xAAAAAAAAAAAAAAABLL * ((v15 - v13) >> 4);
    goto LABEL_54;
  }
  v17 = 0;
  v18 = 0;
  v19 = 24;
  v15 = *(_QWORD *)(a1 + 88);
  do
  {
    v22 = *(float *)(v15 + v19 - 24);
    v21 = *(float *)(v15 + v19 - 20);
    v23 = (float)(1 << *(_DWORD *)(v15 + v19 + 8));
    v24 = (int)(float)((float)(v22 * (float)(1.0 / v23)) + 0.5);
    v25 = (int)(float)((float)(v21 * (float)(1.0 / v23)) + 0.5);
    v26 = *(_DWORD *)(v15 + v19 - 16);
    v27 = v26 - 1;
    v28 = *(_QWORD *)(a3 + 48);
    v29 = v26 + 1;
    v30 = v28 + 144 * v27;
    v31 = *(_QWORD *)(v30 + 32);
    v32 = v28 + 144 * v26;
    v33 = *(_QWORD *)(v32 + 32);
    v34 = *(_QWORD *)(v30 + 48);
    v35 = *(_QWORD *)(v32 + 48);
    v36 = *(_QWORD *)(v28 + 144 * v29 + 32);
    v37 = v28 + 144 * (int)v29;
    if (v31 == v33 && v34 == v35)
    {
      v39 = *(_QWORD *)(v37 + 48);
      if (v31 == v36 && v34 == v39)
      {
        v173 = v28 + 144 * (int)v27;
        v174 = 8 * v25;
        v175 = 4 * v24;
        v176 = (float *)(*(_QWORD *)(*(_QWORD *)(v173 + 120) + v174 - 8) + v175);
        v177 = *(_QWORD *)(v173 + 40);
        v178 = v28 + 144 * v26;
        v179 = *(_QWORD *)(v178 + 120);
        v180 = *(_QWORD *)(v179 + v174 - 8);
        v181 = v28 + 144 * (int)v29;
        v182 = (float *)(*(_QWORD *)(*(_QWORD *)(v181 + 120) + v174 - 8) + v175);
        v183 = *(_QWORD *)(v181 + 40);
        v184 = (uint64_t *)(v179 + v174);
        v185 = *v184;
        v186 = v184[1];
        v187 = *(float *)(v185 + v175 - 4);
        v188 = *(float *)(v185 + v175 + 4);
        v189 = *(float *)(v180 + v175);
        v190 = *(float *)(v186 + v175);
        v66 = v188 - v187;
        v67 = v190 - v189;
        v191 = *(float *)(v185 + v175) * -2.0;
        v69 = v188 + (float)(v187 + v191);
        v70 = (float)(v191 + v189) + v190;
        v192 = v176[v177];
        v193 = v182[v183];
        v85 = v193 - v192;
        v86 = v193
            + (float)(v192
                    - (float)(*(float *)(v180 + v175 + 4 * *(_QWORD *)(v178 + 40))
                            + *(float *)(v180 + v175 + 4 * *(_QWORD *)(v178 + 40))));
        v92 = (float)(v176[v177 - 1] - v176[v177 + 1]) + (float)(v182[v183 + 1] - v182[v183 - 1]);
        v11.f32[0] = (float)(*v176 - v176[v177 + v177]) + (float)(v182[v183 + v183] - *v182);
        v111 = (float)((float)(*(float *)(v180 + v175 - 4) + *(float *)(v186 + v175 + 4))
                     - (float)(*(float *)(v180 + v175 + 4) + *(float *)(v186 + v175 - 4)))
             * 0.25;
        v112 = v69 * v70;
        v113 = v111 * v111;
        *(float *)&a11 = (float)(v69 * v70) - (float)(v111 * v111);
        if (*(float *)&a11 == 0.0)
          goto LABEL_3;
        goto LABEL_33;
      }
      if (v36 == v31 >> 1 && v34 >> 1 == v39)
      {
        v116 = *(_QWORD *)(v28 + 144 * (int)v27 + 120);
        v117 = 8 * v25;
        v118 = *(_QWORD *)(v116 + v117);
        v119 = 4 * v24;
        v120 = *(float *)(v118 + v119 - 4);
        v121 = *(float *)(v118 + v119);
        v122 = *(float *)(v118 + v119 + 4);
        v123 = v117 - 8;
        v124 = *(_QWORD *)(v116 + v117 - 8);
        v125 = v117 + 8;
        v126 = (__int32 *)(*(_QWORD *)(v116 + v117 + 8) + v119);
        v127 = *(_QWORD *)(v28 + 144 * v26 + 120);
        v128 = *(_QWORD *)(v127 + v117);
        v129 = *(float *)(v128 + v119);
        v130 = (float)v24 * 0.5;
        v11.f32[0] = (float)v25 * 0.5;
        v131 = *(float *)(v128 + v119 - 4);
        v132 = *(float *)(v128 + v119 + 4);
        v133 = *(_QWORD *)(v127 + v123);
        v134 = *(float *)(v133 + v119 - 4);
        v135 = *(float *)(v133 + v119);
        v136 = *(float *)(v133 + v119 + 4);
        v137 = *(_QWORD *)(v127 + v125);
        v138 = *(float *)(v137 + v119);
        v66 = v132 - v131;
        v67 = v138 - v135;
        v139 = v129 * -2.0;
        v69 = (float)(v131 + (float)(v129 * -2.0)) + v132;
        v70 = (float)(v139 + v135) + v138;
        v71 = (float)(v134 + *(float *)(v137 + v119 + 4)) - (float)(v136 + *(float *)(v137 + v119 - 4));
        v140 = v28 + 144 * (int)v29;
        v141 = *(_QWORD *)(v140 + 88);
        v142 = *(_QWORD *)(v140 + 40);
        v143 = v11.f32[0];
        v144 = v141 + 4 * v142 * v143;
        v145 = v144 + 4 * v142;
        v146 = (float)(v130 + 1) - v130;
        v147 = (float)(v143 + 1) - v11.f32[0];
        v148 = v130 - (float)v130;
        v149 = v11.f32[0] - (float)v11.f32[0];
        v150 = 4 * v130;
        v151 = 4 * (v130 + 1);
        v152 = (float)((float)((float)((float)(v146 * v147) * *(float *)(v144 + v150))
                             + (float)((float)(v148 * v147) * *(float *)(v144 + v151)))
                     + (float)((float)(v149 * v146) * *(float *)(v145 + v150)))
             + (float)((float)(v148 * v149) * *(float *)(v145 + v151));
        v85 = v152 - v121;
        v86 = (float)(v121 + v139) + v152;
        v153 = (float)((float)(v130 + 0.5) + 1) - (float)(v130 + 0.5);
        v154 = (float)(v130 + 0.5) - (float)(float)(v130 + 0.5);
        v155 = 4 * ((float)(v130 + 0.5) + 1);
        v156 = v120
             + (float)((float)((float)((float)((float)(v147 * v153)
                                             * *(float *)(v144 + 4 * (float)(v130 + 0.5)))
                                     + (float)((float)(v154 * v147) * *(float *)(v144 + v155)))
                             + (float)((float)(v149 * v153) * *(float *)(v145 + 4 * (float)(v130 + 0.5))))
                     + (float)((float)(v149 * v154) * *(float *)(v145 + v155)));
        v157 = v130 + -0.5;
        v92 = v156
            - (float)(v122
                    + (float)((float)((float)((float)((float)(v147 * (float)((float)(v157 + 1) - v157))
                                                    * *(float *)(v144 + 4 * v157))
                                            + (float)((float)((float)(v157 - (float)v157) * v147)
                                                    * *(float *)(v144 + 4 * (v157 + 1))))
                                    + (float)((float)(v149 * (float)((float)(v157 + 1) - v157))
                                            * *(float *)(v145 + 4 * v157)))
                            + (float)((float)(v149 * (float)(v157 - (float)v157))
                                    * *(float *)(v145 + 4 * (v157 + 1)))));
        v158 = vadd_f32((float32x2_t)vdup_lane_s32((int32x2_t)v11, 0), (float32x2_t)0xBF0000003F000000);
        v159 = (float32x2_t)vcvt_u32_f32(v158);
        v160 = v141 + 4 * v142 * v159.u32[0];
        v161 = v160 + 4 * v142;
        v162 = v141 + 4 * v142 * v159.u32[1];
        v163 = v162 + 4 * v142;
        v164 = vsub_f32(vcvt_f32_u32((uint32x2_t)vadd_s32((int32x2_t)v159, (int32x2_t)0x100000001)), v158);
        v165 = vmul_n_f32(v164, v146);
        v166 = vmul_n_f32(v164, v148);
        v167 = vsub_f32(v158, vcvt_f32_u32((uint32x2_t)v159));
        v168 = vmul_n_f32(v167, v146);
        v169 = vmul_n_f32(v167, v148);
        v159.i32[0] = *(_DWORD *)(v160 + v150);
        v159.i32[1] = *(_DWORD *)(v162 + v150);
        v170.i32[0] = *(_DWORD *)(v160 + v151);
        v170.i32[1] = *(_DWORD *)(v162 + v151);
        v171 = vmul_f32(v166, v170);
        v166.i32[0] = *(_DWORD *)(v161 + v150);
        v166.i32[1] = *(_DWORD *)(v163 + v150);
        v172 = vadd_f32(vadd_f32(vmul_f32(v165, v159), v171), vmul_f32(v168, v166));
        v159.i32[0] = *(_DWORD *)(v161 + v151);
        v159.i32[1] = *(_DWORD *)(v163 + v151);
        v108 = vadd_f32(v172, vmul_f32(v169, v159));
        v109.i32[0] = *(_DWORD *)(v124 + v119);
        v109.i32[1] = *v126;
        goto LABEL_20;
      }
    }
    else
    {
      v39 = *(_QWORD *)(v37 + 48);
    }
    v40 = v33 == v36 && v35 == v39;
    if (!v40 || ((v41 = v34 >> 1, v33 == v31 >> 1) ? (v42 = v41 == v35) : (v42 = 0), !v42))
    {
      sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/FeatureDetection/include/VIO/FeatureDetection/SubpixelDerivative.h", 339, (uint64_t)"", 0, (uint64_t)"Levels are not of compatible size.", 34, (void (*)(void **))sub_21023DDB0);
      abort();
    }
    v43 = *(_QWORD *)(v28 + 144 * v26 + 120);
    v44 = 8 * v25;
    v45 = *(_QWORD *)(v43 + v44);
    v46 = 4 * v24;
    v47 = *(_QWORD *)(v28 + 144 * (int)v29 + 120);
    v48 = *(_QWORD *)(v47 + v44);
    v49 = *(float *)(v48 + v46);
    v50 = v44 - 8;
    v51 = *(_QWORD *)(v47 + v44 - 8);
    v52 = v44 + 8;
    v53 = *(_QWORD *)(v47 + v44 + 8);
    v54 = *(float *)(v48 + v46 - 4);
    v55 = *(float *)(v48 + v46 + 4);
    v56 = (__int32 *)(v51 + v46);
    v57 = (float)v24 + (float)v24;
    v58 = *(float *)(v45 + v46 - 4);
    v59 = *(float *)(v45 + v46 + 4);
    v60 = *(_QWORD *)(v43 + v50);
    v61 = *(float *)(v60 + v46 - 4);
    v62 = *(float *)(v60 + v46);
    v63 = *(float *)(v60 + v46 + 4);
    v64 = *(_QWORD *)(v43 + v52);
    v11.f32[0] = (float)v25 + (float)v25;
    v65 = *(float *)(v64 + v46);
    v66 = v59 - v58;
    v67 = v65 - v62;
    v68 = *(float *)(v45 + v46) * -2.0;
    v69 = (float)(v68 + v58) + v59;
    v70 = (float)(v68 + v62) + v65;
    v71 = (float)(v61 + *(float *)(v64 + v46 + 4)) - (float)(v63 + *(float *)(v64 + v46 - 4));
    v72 = v28 + 144 * (int)v27;
    v73 = *(_QWORD *)(v72 + 88);
    v74 = *(_QWORD *)(v72 + 40);
    v75 = v11.f32[0];
    v76 = v73 + 4 * v74 * v75;
    v77 = v76 + 4 * v74;
    v78 = (float)(v57 + 1) - v57;
    v79 = (float)(v75 + 1) - v11.f32[0];
    v80 = v57 - (float)v57;
    v81 = v11.f32[0] - (float)v11.f32[0];
    v82 = 4 * v57;
    v83 = 4 * (v57 + 1);
    v84 = (float)((float)((float)((float)(v78 * v79) * *(float *)(v76 + v82))
                        + (float)((float)(v80 * v79) * *(float *)(v76 + v83)))
                + (float)((float)(v81 * v78) * *(float *)(v77 + v82)))
        + (float)((float)(v80 * v81) * *(float *)(v77 + v83));
    v85 = v49 - v84;
    v86 = v49 + (float)(v68 + v84);
    v87 = (float)((float)(v57 + -2.0) + 1) - (float)(v57 + -2.0);
    v88 = (float)(v57 + -2.0) - (float)(float)(v57 + -2.0);
    v89 = 4 * ((float)(v57 + -2.0) + 1);
    v90 = v55
        + (float)((float)((float)((float)((float)(v79 * v87) * *(float *)(v76 + 4 * (float)(v57 + -2.0)))
                                + (float)((float)(v88 * v79) * *(float *)(v76 + v89)))
                        + (float)((float)(v81 * v87) * *(float *)(v77 + 4 * (float)(v57 + -2.0))))
                + (float)((float)(v81 * v88) * *(float *)(v77 + v89)));
    v91 = v57 + 2.0;
    v92 = v90
        - (float)(v54
                + (float)((float)((float)((float)((float)(v79 * (float)((float)(v91 + 1) - v91))
                                                * *(float *)(v76 + 4 * v91))
                                        + (float)((float)((float)(v91 - (float)v91) * v79)
                                                * *(float *)(v76 + 4 * (v91 + 1))))
                                + (float)((float)(v81 * (float)((float)(v91 + 1) - v91))
                                        * *(float *)(v77 + 4 * v91)))
                        + (float)((float)(v81 * (float)(v91 - (float)v91))
                                * *(float *)(v77 + 4 * (v91 + 1)))));
    v93 = vadd_f32((float32x2_t)vdup_lane_s32((int32x2_t)v11, 0), (float32x2_t)0x40000000C0000000);
    v94 = (float32x2_t)vcvt_u32_f32(v93);
    v95 = v73 + 4 * v74 * v94.u32[0];
    v96 = v95 + 4 * v74;
    v97 = v73 + 4 * v74 * v94.u32[1];
    v98 = v97 + 4 * v74;
    v99 = vsub_f32(vcvt_f32_u32((uint32x2_t)vadd_s32((int32x2_t)v94, (int32x2_t)0x100000001)), v93);
    v100 = vmul_n_f32(v99, v78);
    v101 = vmul_n_f32(v99, v80);
    v102 = vsub_f32(v93, vcvt_f32_u32((uint32x2_t)v94));
    v103 = vmul_n_f32(v102, v78);
    v104 = vmul_n_f32(v102, v80);
    v105.i32[0] = *(_DWORD *)(v95 + v82);
    v105.i32[1] = *(_DWORD *)(v97 + v82);
    v94.i32[0] = *(_DWORD *)(v95 + v83);
    v94.i32[1] = *(_DWORD *)(v97 + v83);
    v106 = vmul_f32(v101, v94);
    v101.i32[0] = *(_DWORD *)(v96 + v82);
    v101.i32[1] = *(_DWORD *)(v98 + v82);
    v107 = vadd_f32(vadd_f32(vmul_f32(v100, v105), v106), vmul_f32(v103, v101));
    v105.i32[0] = *(_DWORD *)(v96 + v83);
    v105.i32[1] = *(_DWORD *)(v98 + v83);
    v108 = vadd_f32(v107, vmul_f32(v104, v105));
    v109.i32[0] = *(_DWORD *)(v53 + v46);
    v109.i32[1] = *v56;
LABEL_20:
    v110 = vadd_f32(v109, v108);
    v11 = vsub_f32(v110, (float32x2_t)vdup_lane_s32((int32x2_t)v110, 1));
    v111 = v71 * 0.25;
    v112 = v69 * v70;
    v113 = v111 * v111;
    *(float *)&a11 = (float)(v69 * v70) - (float)(v111 * v111);
    if (*(float *)&a11 == 0.0)
      goto LABEL_3;
LABEL_33:
    v194 = v92 * 0.25;
    v195 = v11.f32[0] * 0.25;
    v196 = (float)(v112 * v86)
         + (float)((float)((float)((float)(v195 * (float)((float)(v111 + v111) * v194)) - (float)(v113 * v86))
                         - (float)(v70 * (float)(v194 * v194)))
                 - (float)(v69 * (float)(v195 * v195)));
    v197 = fabsf(v196);
    if (fabsf((float)((float)(v69 + v70) * (float)(v69 + v70)) / *(float *)&a11) < *(float *)(a1 + 136)
      && v197 > 0.00000011921)
    {
      v199 = v66 * -0.5;
      *(float *)&a9 = v67 * -0.5;
      *(float *)&a8 = v85 * -0.5;
      v200 = 1.0 / v196;
      v201.f32[0] = (float)((float)(v70 * v86) - (float)(v195 * v195)) * (float)(1.0 / v196);
      v202.f32[0] = (float)((float)(v195 * v194) - (float)(v111 * v86)) * v200;
      a10.f32[0] = (float)((float)(v195 * v111) - (float)(v70 * v194)) * v200;
      v201.f32[1] = v202.f32[0];
      v202.f32[1] = (float)((float)(v69 * v86) - (float)(v194 * v194)) * v200;
      v11.f32[0] = (float)((float)(v111 * v194) - (float)(v69 * v195)) * v200;
      v203 = vmla_n_f32(vmla_n_f32(vmul_n_f32(v201, v199), v202, *(float *)&a9), (float32x2_t)__PAIR64__(v11.u32[0], a10.u32[0]), *(float *)&a8);
      v204 = fabsf(v203.f32[1]);
      if (fabsf(v203.f32[0]) <= 1.0 && v204 <= 1.0)
      {
        *(float *)&a11 = *(float *)&a11 * v200;
        a10.f32[0] = a10.f32[0] * v199;
        a10 = vmla_f32(vmla_f32(a10, *(float32x2_t *)&a9, v11), *(float32x2_t *)&a8, *(float32x2_t *)&a11);
        v206 = vabds_f32(*(float *)(*(_QWORD *)(*(_QWORD *)(v28 + 144 * v26 + 120) + 8 * v25) + 4 * v24), (float)(*(float *)&a8 * a10.f32[0])+ (float)((float)(v199 * v203.f32[0]) + (float)(*(float *)&a9 * v203.f32[1])));
        v207 = (float *)(v15 + v19);
        v207[5] = v206;
        v203.f32[0] = v22 + (float)(v203.f32[0] * v23);
        v208 = v21 + (float)(v203.f32[1] * v23);
        *(v207 - 2) = v203.f32[0];
        *(v207 - 1) = v208;
        v209 = a10.f32[0] + (float)v26;
        *v207 = v209;
        if (v206 > *(float *)(a1 + 8)
          && v203.f32[0] >= 0.0
          && v203.f32[0] < (float)*(unint64_t *)(a2 + 8)
          && v208 >= 0.0
          && v208 < (float)*(unint64_t *)(a2 + 16)
          && v209 >= 0.0
          && v209 < (float)(0x8E38E38E38E38E39 * ((*(_QWORD *)(a3 + 56) - v28) >> 4)))
        {
          v213 = *(float *)(a2 + 4);
          *(float *)(v15 + v19 - 12) = v213 * powf(*(float *)(a2 + 104), v209);
          v210 = &(*v14)[48 * v17++];
          v211 = *(_OWORD *)(v15 + v19 - 24);
          v212 = *(_OWORD *)(v15 + v19 + 8);
          *((_OWORD *)v210 + 1) = *(_OWORD *)(v15 + v19 - 8);
          *((_OWORD *)v210 + 2) = v212;
          *(_OWORD *)v210 = v211;
        }
      }
    }
LABEL_3:
    ++v18;
    v15 = *(_QWORD *)(a1 + 88);
    v20 = 0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(a1 + 96) - v15) >> 4);
    v19 += 48;
  }
  while (v18 < v20);
  if (v17 > v20)
  {
    sub_20FD6B160(v14, v17 - v20);
    return;
  }
LABEL_54:
  if (v20 > v17)
    *(_QWORD *)(a1 + 96) = v15 + 48 * v17;
}

void sub_20FD69EE4(uint64_t *a1, uint64_t *a2, int a3, int a4, int a5, unint64_t a6, unint64_t a7, unint64_t a8, __n128 a9, float a10, float a11, float a12, float a13, unsigned __int8 a14, char a15)
{
  float v23;
  uint64_t v25;
  __int128 *v26;
  uint64_t v27;
  unint64_t v28;
  int v29;
  uint64_t *v30;
  const std::nothrow_t *v31;
  unint64_t v32;
  int *v33;
  BOOL v34;
  int *v35;
  uint64_t v36;
  float v37;
  float v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  float v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  uint64x2_t *v49;
  unint64_t v50;
  uint64_t v51;
  unint64_t *v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  unsigned int *v60;
  unsigned int *v61;
  unsigned int *v62;
  unsigned int v63;
  int v64;
  uint64_t v65;
  uint64_t *v66;
  uint64_t v67;
  float v68;
  unint64_t v69;
  uint64_t v70;
  int v71;
  int v72;
  float v73;
  unint64_t v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  _DWORD **v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  _DWORD **v83;
  _DWORD *v84;
  uint64_t v85;
  float v86;
  float v87;
  unint64_t v88;
  uint32x4_t v89;
  __int32 **v90;
  int8x16_t v91;
  unint64_t v92;
  uint64x2_t *v93;
  uint32x4_t v94;
  float32x4_t v95;
  int64x2_t v96;
  int64x2_t v97;
  float32x4_t v98;
  float32x4_t v99;
  uint64_t v100;
  unint64_t *v101;
  unsigned int **v102;
  unsigned int *v103;
  unsigned int v104;
  float v105;
  unint64_t v106;
  void *v107;
  uint64_t v108;
  uint64_t v109;
  unsigned int *v110;
  unsigned int *v111;
  float v112;
  unsigned int v113;
  float v114;
  uint64_t v115;
  unsigned int *v116;
  uint64_t v117;
  float v118;
  float v119;
  uint64_t v120;
  unint64_t v121;
  int v122;
  int v123;
  uint64_t *v124;
  char *v125;
  char *v126;
  char *v127;
  char *v128;
  float v129;
  __int128 v130;
  __int128 v131;
  float v132;
  uint64_t v133;
  float v134;
  unint64_t v135;
  uint64_t v136;
  int v137;
  int v138;
  float v139;
  uint64_t v140;
  char *v142;
  unint64_t v143;
  unint64_t v144;
  unint64_t v145;
  char *v146;
  char *v147;
  __int128 v148;
  __int128 v149;
  char *v150;
  __int128 v151;
  __int128 v152;
  char *v153;
  char *v154;
  char *v155;
  void *v156;
  char *v157;
  void *v158;
  void *v159;
  float v160;
  unint64_t v162;
  uint64_t *v163;
  unint64_t v164;
  int v165;
  char *v168;
  char *v169;
  void *__p;
  char *v171;

  v23 = a9.n128_f32[0];
  if ((a3 != 1 || a4 != 1)
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/FeatureDetection/include/VIO/FeatureDetection/DoGFeatureDetector_impl.h", 526, (uint64_t)"num_buckets_x == 1 && num_buckets_y == 1", 40, (uint64_t)"AssignScaleBuckets_Thresholding() does not support spatial buckets.", 67, (void (*)(void **))sub_21023DDB0))
  {
    goto LABEL_169;
  }
  v162 = a7;
  v25 = *a1;
  v26 = (__int128 *)a1[1];
  v27 = (uint64_t)v26 - *a1;
  v28 = 0xAAAAAAAAAAAAAAABLL * (v27 >> 4);
  if (v27 < 6145)
  {
    v35 = 0;
    v32 = 0;
  }
  else
  {
    v164 = a8;
    v29 = a5;
    v30 = a1;
    v31 = (const std::nothrow_t *)MEMORY[0x24BEDB6B8];
    v32 = 0xAAAAAAAAAAAAAAABLL * (v27 >> 4);
    while (1)
    {
      v33 = (int *)operator new(48 * v32, v31);
      if (v33)
        break;
      v34 = v32 > 1;
      v32 >>= 1;
      if (!v34)
      {
        v35 = 0;
        v32 = 0;
        goto LABEL_11;
      }
    }
    v35 = v33;
LABEL_11:
    a1 = v30;
    a5 = v29;
    a8 = v164;
  }
  sub_20FD6B5FC(v25, v26, (uint64_t)&__p, v28, v35, v32, a9);
  if (v35)
    operator delete(v35);
  v165 = a4 * a3;
  v36 = a4 * a3 * a5;
  if (0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 3) != v36
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/FeatureDetection/include/VIO/FeatureDetection/DoGFeatureDetector_impl.h", 555, (uint64_t)"buckets_hist.size() == bucket_num", 33, (uint64_t)"Buckets histogram is expected to be allocated on input.", 55, (void (*)(void **))sub_21023DDB0))
  {
LABEL_169:
    abort();
  }
  if ((float)(a12 + -1.0) >= 0.0)
    v37 = a12 + -1.0;
  else
    v37 = 0.0;
  v38 = (float)v162 / (float)a3;
  v163 = a1;
  v41 = a1;
  v40 = *a1;
  v39 = v41[1];
  v42 = (float)a8 / (float)a4;
  if (0xAAAAAAAAAAAAAAABLL * ((v39 - v40) >> 4) <= a6 && a15)
  {
    v43 = a5;
    v45 = *a2;
    v44 = a2[1];
    if (*a2 != v44)
    {
      v46 = *a2;
      do
      {
        v47 = *(_QWORD *)(v46 + 8) - *(_QWORD *)v46;
        if (v47 >= 1)
          bzero(*(void **)v46, 4 * (((unint64_t)v47 >> 2) - ((unint64_t)v47 > 3)) + 4);
        v46 += 24;
      }
      while (v46 != v44);
    }
    for (; v40 != v39; v40 += 48)
    {
      v70 = (int)(float)(*(float *)(v40 + 16) / v38) + (int)(float)(*(float *)(v40 + 20) / v42) * a3;
      if (a14)
      {
        v71 = *(_DWORD *)(v40 + 32);
        if (v71 >= 0)
          v72 = *(_DWORD *)(v40 + 32);
        else
          v72 = v71 + 1;
        v73 = (float)(v72 >> 1);
        if (v73 > (float)(v43 - 1))
          v73 = (float)(v43 - 1);
        if (v71 < -1)
          v73 = 0.0;
        v70 += v165 * (int)v73;
      }
      v66 = (uint64_t *)(v45 + 24 * v70);
      v65 = *v66;
      v67 = (v66[1] - *v66) >> 2;
      v68 = *(float *)(v40 + 44);
      if (v68 < a10)
        v68 = a10;
      v69 = v67 - 1;
      if (v69 >= (unint64_t)(float)((float)(v68 - a10) / v23))
        v69 = (unint64_t)(float)((float)(v68 - a10) / v23);
      ++*(_DWORD *)(v65 + 4 * v69);
    }
    return;
  }
  v160 = v37;
  v48 = a5;
  sub_20F0C7914(&__p, a2);
  if ((v36 & 0x80000000) != 0)
    sub_20E867F44();
  v49 = (uint64x2_t *)operator new(8 * v36);
  bzero(v49, 8 * v36);
  v50 = a6;
  if (v36 >= 2)
  {
    v51 = v36 - 1;
    v52 = (unint64_t *)v49;
    v50 = a6;
    do
    {
      v53 = (unint64_t)(float)((float)v50 * a11);
      if (v53 >= 0x3E8)
        v53 = 1000;
      v50 -= v53;
      if (v53 <= 0x64)
        v54 = 100;
      else
        v54 = v53;
      v55 = v53 + (unint64_t)(float)(v160 * (float)v54);
      if (v55 >= 0x3E8)
        v55 = 1000;
      *v52++ = v55;
      --v51;
    }
    while (v51);
  }
  v56 = 0;
  v57 = 0;
  v58 = 100;
  if (v50 > 0x64)
    v58 = v50;
  v49->i64[v36 - 1] = v50 + (unint64_t)(float)(v160 * (float)v58);
  v59 = *a2;
  do
  {
    v60 = *(unsigned int **)(v59 + 24 * v57);
    v61 = *(unsigned int **)(v59 + 24 * v57 + 8);
    if (v61 != v60)
    {
      v62 = v61 - 1;
      if (v62 != v60)
      {
        v63 = *v62;
        do
        {
          v64 = *--v62;
          v63 += v64;
          *v62 = v63;
        }
        while (v62 != v60);
      }
    }
    v56 += *v60;
    ++v57;
  }
  while (v57 != v36);
  if (a13 <= 0.0 || !v56)
    goto LABEL_94;
  if (v36 >= 2)
  {
    v76 = 0;
    v77 = 0;
    v75 = v36 & 0xFFFFFFFFFFFFFFFELL;
    v78 = v36 & 0xFFFFFFFFFFFFFFFELL;
    v79 = (_DWORD **)v59;
    do
    {
      LODWORD(v80) = **v79;
      LODWORD(v81) = *v79[3];
      if (v80 >= 0x3E8)
        v80 = 1000;
      else
        v80 = v80;
      if (v81 >= 0x3E8)
        v81 = 1000;
      else
        v81 = v81;
      v76 += v80;
      v77 += v81;
      v79 += 6;
      v78 -= 2;
    }
    while (v78);
    v74 = v77 + v76;
    if (v75 == v36)
      goto LABEL_80;
  }
  else
  {
    v74 = 0;
    v75 = 0;
  }
  v82 = v36 - v75;
  v83 = (_DWORD **)(v59 + 24 * (int)v75);
  do
  {
    v84 = *v83;
    v83 += 3;
    LODWORD(v85) = *v84;
    if (*v84 >= 0x3E8u)
      v85 = 1000;
    else
      v85 = v85;
    v74 += v85;
    --v82;
  }
  while (v82);
LABEL_80:
  v86 = 1.0;
  if (v74 > a6)
    v86 = (float)a6 / (float)v74;
  v87 = 1.0 - a13;
  if (v36 < 4)
  {
    v88 = 0;
    goto LABEL_87;
  }
  v88 = v36 & 0xFFFFFFFFFFFFFFFCLL;
  v89 = (uint32x4_t)vdupq_n_s32(0x3E8u);
  v90 = (__int32 **)(v59 + 48);
  v91 = (int8x16_t)vdupq_n_s64(0x64uLL);
  v92 = v36 & 0xFFFFFFFFFFFFFFFCLL;
  v93 = v49;
  do
  {
    v94.i32[0] = **(v90 - 6);
    v94.i32[1] = **(v90 - 3);
    v94.i32[2] = **v90;
    v94.i32[3] = *v90[3];
    v95 = vmulq_n_f32(vcvtq_f32_u32(vminq_u32(v94, v89)), v86);
    v96 = (int64x2_t)vcvtq_u64_f64(vcvtq_f64_f32(*(float32x2_t *)v95.f32));
    v97 = (int64x2_t)vcvtq_u64_f64(vcvt_hight_f64_f32(v95));
    v98 = vmulq_n_f32(vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vcvtq_f64_u64((uint64x2_t)vbslq_s8((int8x16_t)vcgtq_u64((uint64x2_t)v96, (uint64x2_t)v91), (int8x16_t)v96, v91))), vcvtq_f64_u64((uint64x2_t)vbslq_s8((int8x16_t)vcgtq_u64((uint64x2_t)v97, (uint64x2_t)v91), (int8x16_t)v97, v91))), v160);
    v99 = vaddq_f32(vmulq_n_f32(vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vcvtq_f64_u64(*v93)), vcvtq_f64_u64(v93[1])), v87), vmulq_n_f32(vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vcvtq_f64_u64((uint64x2_t)vaddq_s64((int64x2_t)vcvtq_u64_f64(vcvtq_f64_f32(*(float32x2_t *)v98.f32)), v96))), vcvtq_f64_u64((uint64x2_t)vaddq_s64((int64x2_t)vcvtq_u64_f64(vcvt_hight_f64_f32(v98)), v97))), a13));
    *v93 = vcvtq_u64_f64(vcvtq_f64_f32(*(float32x2_t *)v99.f32));
    v93[1] = vcvtq_u64_f64(vcvt_hight_f64_f32(v99));
    v93 += 2;
    v90 += 12;
    v92 -= 4;
  }
  while (v92);
  if (v88 != v36)
  {
LABEL_87:
    v100 = v36 - v88;
    v101 = (unint64_t *)v49 + v88;
    v102 = (unsigned int **)(v59 + 24 * (int)v88);
    do
    {
      v103 = *v102;
      v102 += 3;
      v104 = *v103;
      if (*v103 >= 0x3E8)
        v104 = 1000;
      v105 = v86 * (float)v104;
      if ((unint64_t)v105 <= 0x64)
        v106 = 100;
      else
        v106 = (unint64_t)v105;
      *v101 = (unint64_t)(float)((float)(v87 * (float)*v101)
                                      + (float)((float)((unint64_t)(float)(v160 * (float)v106)
                                                      + (unint64_t)v105)
                                              * a13));
      ++v101;
      --v100;
    }
    while (v100);
  }
LABEL_94:
  v107 = operator new(4 * v36);
  bzero(v107, 4 * v36);
  v108 = 0;
  do
  {
    v109 = v59 + 24 * v108;
    v110 = *(unsigned int **)v109;
    v111 = *(unsigned int **)(v109 + 8);
    v112 = a10;
    if (v110 != v111)
    {
      v113 = (float)v49->u64[v108];
      v112 = a10;
      if (*v110 > v113)
      {
        v114 = v23 + a10;
        if ((unint64_t)((char *)v111 - (char *)v110) < 5)
        {
LABEL_105:
          v118 = (float)v113 * v23;
          v119 = (float)*(v111 - 1);
        }
        else
        {
          if ((unint64_t)(v111 - v110) <= 2)
            v115 = 2;
          else
            v115 = v111 - v110;
          v116 = v110 + 1;
          v117 = v115 - 1;
          v114 = v23 + a10;
          while (v113 < *v116)
          {
            v114 = v114 + v23;
            ++v116;
            if (!--v117)
              goto LABEL_105;
          }
          v118 = (float)(v113 - *v116) * v23;
          v119 = (float)(*(v116 - 1) - *v116);
        }
        v112 = v114 - (float)(v118 / v119);
      }
    }
    *((float *)v107 + v108) = v112;
    v120 = (char *)v111 - (char *)v110;
    if (v120 >= 1)
      bzero(v110, 4 * (((unint64_t)v120 >> 2) - ((unint64_t)v120 > 3)) + 4);
    ++v108;
  }
  while (v108 != v36);
  v168 = 0;
  v169 = 0;
  v121 = a6;
  v123 = a14;
  v122 = a4 * a3;
  if (a6)
  {
    v124 = v163;
    if (a6 > 0x555555555555555)
      sub_20E867F44();
    v125 = (char *)operator new(48 * a6);
    v126 = &v125[48 * a6];
    v168 = v125;
    v169 = v126;
    v121 = a6;
    v123 = a14;
    v122 = v165;
    v128 = (char *)*v163;
    v127 = (char *)v163[1];
    if ((char *)*v163 != v127)
      goto LABEL_113;
  }
  else
  {
    v126 = 0;
    v125 = 0;
    v124 = v163;
    v128 = (char *)*v163;
    v127 = (char *)v163[1];
    if ((char *)*v163 != v127)
    {
LABEL_113:
      v129 = (float)(v48 - 1);
      while (1)
      {
        v136 = (int)(float)(*((float *)v128 + 4) / v38) + (int)(float)(*((float *)v128 + 5) / v42) * a3;
        if (v123)
        {
          v137 = *((_DWORD *)v128 + 8);
          if (v137 >= 0)
            v138 = *((_DWORD *)v128 + 8);
          else
            v138 = v137 + 1;
          v139 = (float)(v138 >> 1);
          if (v139 > v129)
            v139 = v129;
          if (v137 < -1)
            v139 = 0.0;
          v136 += v122 * (int)v139;
        }
        v132 = *((float *)v128 + 11);
        v140 = v49->i64[v136];
        if (v132 < *((float *)v107 + v136) || v140 == 0)
          goto LABEL_116;
        v142 = v168;
        v143 = 0xAAAAAAAAAAAAAAABLL * ((v125 - v168) >> 4);
        if (v143 >= v121)
          goto LABEL_116;
        v49->i64[v136] = v140 - 1;
        if (v125 >= v169)
          break;
        v130 = *(_OWORD *)v128;
        v131 = *((_OWORD *)v128 + 2);
        *((_OWORD *)v125 + 1) = *((_OWORD *)v128 + 1);
        *((_OWORD *)v125 + 2) = v131;
        *(_OWORD *)v125 = v130;
        v125 += 48;
LABEL_115:
        v132 = *((float *)v128 + 11);
        v59 = *a2;
LABEL_116:
        v133 = *(_QWORD *)(v59 + 24 * v136);
        if (v132 < a10)
          v132 = a10;
        v134 = (float)(v132 - a10) / v23;
        v135 = ((*(_QWORD *)(v59 + 24 * v136 + 8) - v133) >> 2) - 1;
        if (v135 >= (unint64_t)v134)
          v135 = (unint64_t)v134;
        ++*(_DWORD *)(v133 + 4 * v135);
        v128 += 48;
        if (v128 == v127)
        {
          v128 = (char *)*v163;
          *v163 = (uint64_t)v168;
          v163[1] = (uint64_t)v125;
          v163[2] = (uint64_t)v169;
          if (v128)
            goto LABEL_155;
          goto LABEL_156;
        }
      }
      v144 = v143 + 1;
      if (v143 + 1 > 0x555555555555555)
        sub_20E867F44();
      if (0x5555555555555556 * ((v169 - v168) >> 4) > v144)
        v144 = 0x5555555555555556 * ((v169 - v168) >> 4);
      if (0xAAAAAAAAAAAAAAABLL * ((v169 - v168) >> 4) >= 0x2AAAAAAAAAAAAAALL)
        v145 = 0x555555555555555;
      else
        v145 = v144;
      if (v145)
      {
        if (v145 > 0x555555555555555)
          sub_20E877A38();
        v146 = (char *)operator new(48 * v145);
      }
      else
      {
        v146 = 0;
      }
      v147 = &v146[16 * ((v125 - v168) >> 4)];
      v148 = *(_OWORD *)v128;
      v149 = *((_OWORD *)v128 + 2);
      *((_OWORD *)v147 + 1) = *((_OWORD *)v128 + 1);
      *((_OWORD *)v147 + 2) = v149;
      *(_OWORD *)v147 = v148;
      if (v125 == v168)
      {
        v125 = v147 + 48;
        v168 = &v146[48 * v143];
        v169 = &v146[48 * v145];
        if (!v142)
          goto LABEL_151;
      }
      else
      {
        v150 = &v146[16 * ((v125 - v168) >> 4)];
        do
        {
          v151 = *((_OWORD *)v125 - 3);
          v152 = *((_OWORD *)v125 - 1);
          v153 = v150 - 48;
          *((_OWORD *)v150 - 2) = *((_OWORD *)v125 - 2);
          *((_OWORD *)v150 - 1) = v152;
          *((_OWORD *)v150 - 3) = v151;
          v125 -= 48;
          v150 -= 48;
        }
        while (v125 != v168);
        v125 = v147 + 48;
        v168 = v153;
        v169 = &v146[48 * v145];
        if (!v142)
          goto LABEL_151;
      }
      operator delete(v142);
LABEL_151:
      v121 = a6;
      v123 = a14;
      v122 = v165;
      goto LABEL_115;
    }
  }
  *v124 = (uint64_t)v125;
  v124[1] = (uint64_t)v125;
  v124[2] = (uint64_t)v126;
  if (v128)
LABEL_155:
    operator delete(v128);
LABEL_156:
  operator delete(v107);
  operator delete(v49);
  v154 = (char *)__p;
  if (__p)
  {
    v155 = v171;
    v156 = __p;
    if (v171 != __p)
    {
      v157 = v171;
      do
      {
        v159 = (void *)*((_QWORD *)v157 - 3);
        v157 -= 24;
        v158 = v159;
        if (v159)
        {
          *((_QWORD *)v155 - 2) = v158;
          operator delete(v158);
        }
        v155 = v157;
      }
      while (v157 != v154);
      v156 = __p;
    }
    v171 = v154;
    operator delete(v156);
  }
}

void sub_20FD6AA44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25)
{
  void *v25;

  operator delete(v25);
  sub_20E9DD680(&a25);
  _Unwind_Resume(a1);
}

void sub_20FD6AAB4(void **a1, uint64_t *a2, int a3, int a4, int a5, int a6, unint64_t a7, unint64_t a8, unsigned __int8 a9)
{
  int v14;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  void *v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t *v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  _QWORD *v32;
  float *v33;
  unint64_t v34;
  float v35;
  uint64_t v36;
  float v37;
  float v38;
  float v39;
  _DWORD *v40;
  signed int v41;
  int v42;
  int v43;
  float v44;
  _QWORD *v45;
  float v46;
  char *v47;
  _QWORD *v48;
  unint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  unint64_t v56;
  _BYTE *v57;
  _DWORD *v58;
  char *v59;
  char *v60;
  _DWORD *v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  _OWORD *v66;
  char *v67;
  uint64_t v68;
  __int128 v69;
  uint64_t v70;
  char *v71;
  uint64_t *v72;
  char *v73;
  unint64_t v74;
  float **v75;
  float *v76;
  float *v77;
  unint64_t v78;
  unint64_t v79;
  float *v80;
  uint64_t v81;
  char *v82;
  __int128 v83;
  __int128 v84;
  __int128 *v85;
  unint64_t v86;
  unint64_t v87;
  char *v88;
  char *v89;
  __int128 v90;
  __int128 v91;
  char *v92;
  __int128 v93;
  __int128 v94;
  int v95;
  int v96;
  int v97;
  int v98;
  void **v99;
  char *v101;
  char *v102;
  char *v103;

  v14 = a3;
  v98 = a4 * a3;
  v17 = a4 * a3 * a5;
  v18 = a2[1];
  v19 = 0xAAAAAAAAAAAAAAABLL * ((v18 - *a2) >> 3);
  v96 = a4 * a3 * a5;
  if (v17 <= v19)
  {
    if (v17 >= v19)
    {
      v21 = a2[1];
      v20 = *a2;
      v22 = v21 - *a2;
      if (v21 == *a2)
        goto LABEL_22;
    }
    else
    {
      v21 = *a2 + 24 * (int)v17;
      if (v18 != v21)
      {
        v23 = a2[1];
        do
        {
          v25 = *(void **)(v23 - 24);
          v23 -= 24;
          v24 = v25;
          if (v25)
          {
            *(_QWORD *)(v18 - 16) = v24;
            operator delete(v24);
          }
          v18 = v23;
        }
        while (v23 != v21);
      }
      a2[1] = v21;
      v20 = *a2;
      v22 = v21 - *a2;
      if (v21 == *a2)
        goto LABEL_22;
    }
  }
  else
  {
    sub_20F0B7BF8((uint64_t)a2, v17 - v19);
    v20 = *a2;
    v21 = a2[1];
    v22 = v21 - *a2;
    if (v21 == *a2)
      goto LABEL_22;
  }
  v26 = v22 / 24;
  if (v26 <= 1)
    v26 = 1;
  if (v26 >= 2)
  {
    v27 = v26 & 0xFFFFFFFFFFFFFFFELL;
    v28 = (uint64_t *)(v20 + 24);
    v29 = v26 & 0xFFFFFFFFFFFFFFFELL;
    do
    {
      v30 = *v28;
      *(v28 - 2) = *(v28 - 3);
      v28[1] = v30;
      v28 += 6;
      v29 -= 2;
    }
    while (v29);
    if (v26 == v27)
      goto LABEL_22;
  }
  else
  {
    v27 = 0;
  }
  v31 = v26 - v27;
  v32 = (_QWORD *)(v20 + 24 * v27 + 8);
  do
  {
    *v32 = *(v32 - 1);
    v32 += 3;
    --v31;
  }
  while (v31);
LABEL_22:
  v33 = (float *)a1[1];
  v99 = a1;
  if (v33 == *a1)
  {
    v72 = a2;
    v101 = 0;
    v102 = 0;
    v103 = 0;
    if (v21 != v20)
      goto LABEL_58;
    goto LABEL_92;
  }
  v95 = a6;
  v34 = 0;
  v35 = (float)a4;
  v36 = a9;
  v37 = (float)a7 / (float)v14;
  v38 = (float)(a5 - 1);
  v39 = (float)a8 / v35;
  v33 = (float *)*a1;
  v97 = v14;
  do
  {
    v41 = vcvtms_s32_f32(v33[12 * v34 + 4] / v37) + vcvtms_s32_f32(v33[12 * v34 + 5] / v39) * v14;
    if ((_DWORD)v36)
    {
      v42 = LODWORD(v33[12 * v34 + 8]);
      if (v42 >= 0)
        v43 = LODWORD(v33[12 * v34 + 8]);
      else
        v43 = v42 + 1;
      v44 = (float)(v43 >> 1);
      if (v42 < -1)
        v44 = 0.0;
      if (v44 > v38)
        v44 = v38;
      v41 += v98 * vcvtms_s32_f32(v44);
    }
    v45 = (_QWORD *)(*a2 + 24 * v41);
    v46 = v33[12 * v34 + 11];
    v48 = v45 + 1;
    v47 = (char *)v45[1];
    v49 = v45[2];
    if ((unint64_t)v47 < v49)
    {
      *(float *)v47 = v46;
      *((_DWORD *)v47 + 1) = v34;
      v40 = v47 + 8;
      goto LABEL_25;
    }
    v50 = v36;
    v51 = (char *)*v45;
    v52 = (uint64_t)&v47[-*v45];
    v53 = v52 >> 3;
    v54 = (v52 >> 3) + 1;
    if (v54 >> 61)
      sub_20E867F44();
    v55 = v49 - (_QWORD)v51;
    if (v55 >> 2 > v54)
      v54 = v55 >> 2;
    if ((unint64_t)v55 >= 0x7FFFFFFFFFFFFFF8)
      v56 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v56 = v54;
    if (v56)
    {
      if (v56 >> 61)
        sub_20E877A38();
      v57 = operator new(8 * v56);
      v58 = &v57[8 * v53];
      *(float *)v58 = v46;
      v58[1] = v34;
      v59 = (char *)(v47 - v51);
      if (v47 == v51)
      {
LABEL_48:
        v61 = v58;
        v36 = v50;
        goto LABEL_55;
      }
    }
    else
    {
      v57 = 0;
      v58 = (_DWORD *)(8 * v53);
      *(float *)v58 = v46;
      v58[1] = v34;
      v59 = (char *)(v47 - v51);
      if (v47 == v51)
        goto LABEL_48;
    }
    v60 = v59 - 8;
    if ((unint64_t)(v59 - 8) >= 0x58)
    {
      v62 = v47 - v57 - v52;
      v61 = v58;
      v36 = v50;
      if (v62 >= 0x20)
      {
        v63 = ((unint64_t)v60 >> 3) + 1;
        v64 = 8 * (v63 & 0x3FFFFFFFFFFFFFFCLL);
        v65 = &v47[-v64];
        v61 = &v58[v64 / 0xFFFFFFFFFFFFFFFCLL];
        v66 = &v57[8 * v53 - 16];
        v67 = v47 - 16;
        v68 = v63 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v69 = *(_OWORD *)v67;
          *(v66 - 1) = *((_OWORD *)v67 - 1);
          *v66 = v69;
          v66 -= 2;
          v67 -= 32;
          v68 -= 4;
        }
        while (v68);
        v47 = v65;
        if (v63 == (v63 & 0x3FFFFFFFFFFFFFFCLL))
          goto LABEL_54;
      }
    }
    else
    {
      v61 = v58;
      v36 = v50;
    }
    do
    {
      v70 = *((_QWORD *)v47 - 1);
      v47 -= 8;
      *((_QWORD *)v61 - 1) = v70;
      v61 -= 2;
    }
    while (v47 != v51);
LABEL_54:
    v47 = (char *)*v45;
LABEL_55:
    v71 = &v57[8 * v56];
    *v45 = v61;
    v40 = v58 + 2;
    *v48 = v58 + 2;
    v45[2] = v71;
    a1 = v99;
    v14 = v97;
    if (v47)
      operator delete(v47);
LABEL_25:
    *v48 = v40;
    ++v34;
    v33 = (float *)*a1;
  }
  while (v34 < 0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[1] - (_BYTE *)*a1) >> 4));
  v72 = a2;
  v20 = *a2;
  a6 = v95;
  v101 = 0;
  v102 = 0;
  v103 = 0;
  if (a2[1] != *a2)
  {
LABEL_58:
    v73 = 0;
    v74 = 0;
    while (1)
    {
      v75 = (float **)(v20 + 24 * v74);
      v76 = *v75;
      v77 = v75[1];
      v78 = ((char *)v77 - (char *)*v75) >> 3;
      if (v78 >= a6 / v96)
        v79 = a6 / v96;
      else
        v79 = v78;
      v80 = &v76[2 * v79];
      if (v80 != v77)
        sub_20FD6C62C(v76, v80, v77);
      if (v79)
        break;
LABEL_59:
      ++v74;
      v20 = *v72;
      if (v74 >= 0xAAAAAAAAAAAAAAABLL * ((v72[1] - *v72) >> 3))
      {
        v33 = (float *)*a1;
        if (*a1)
          goto LABEL_89;
        goto LABEL_90;
      }
    }
    v81 = 0;
    v82 = v73;
    while (2)
    {
      while (1)
      {
        v85 = (__int128 *)((char *)*a1 + 48 * *(int *)(*(_QWORD *)(*v72 + 24 * v74) + 8 * v81 + 4));
        if (v82 >= v103)
          break;
        v83 = *v85;
        v84 = v85[2];
        *((_OWORD *)v82 + 1) = v85[1];
        *((_OWORD *)v82 + 2) = v84;
        *(_OWORD *)v82 = v83;
        v73 = v82 + 48;
        v102 = v82 + 48;
        ++v81;
        v82 += 48;
        if (v81 == v79)
          goto LABEL_59;
      }
      v86 = 0xAAAAAAAAAAAAAAABLL * ((v82 - v101) >> 4) + 1;
      if (v86 > 0x555555555555555)
        sub_20E867F44();
      if (0x5555555555555556 * ((v103 - v101) >> 4) > v86)
        v86 = 0x5555555555555556 * ((v103 - v101) >> 4);
      if (0xAAAAAAAAAAAAAAABLL * ((v103 - v101) >> 4) >= 0x2AAAAAAAAAAAAAALL)
        v87 = 0x555555555555555;
      else
        v87 = v86;
      if (v87)
      {
        if (v87 > 0x555555555555555)
          sub_20E877A38();
        v88 = (char *)operator new(48 * v87);
      }
      else
      {
        v88 = 0;
      }
      v89 = &v88[16 * ((v82 - v101) >> 4)];
      v90 = *v85;
      v91 = v85[2];
      *((_OWORD *)v89 + 1) = v85[1];
      *((_OWORD *)v89 + 2) = v91;
      *(_OWORD *)v89 = v90;
      v92 = v89;
      if (v82 == v101)
      {
        v72 = a2;
        v73 = v89 + 48;
        v101 = &v88[16 * ((v82 - v101) >> 4)];
        v103 = &v88[48 * v87];
        if (v82)
          goto LABEL_83;
      }
      else
      {
        v72 = a2;
        do
        {
          v93 = *((_OWORD *)v82 - 3);
          v94 = *((_OWORD *)v82 - 1);
          *((_OWORD *)v92 - 2) = *((_OWORD *)v82 - 2);
          *((_OWORD *)v92 - 1) = v94;
          *((_OWORD *)v92 - 3) = v93;
          v92 -= 48;
          v82 -= 48;
        }
        while (v82 != v101);
        v82 = v101;
        v73 = v89 + 48;
        v101 = v92;
        v103 = &v88[48 * v87];
        if (v82)
LABEL_83:
          operator delete(v82);
      }
      a1 = v99;
      v102 = v73;
      ++v81;
      v82 = v73;
      if (v81 == v79)
        goto LABEL_59;
      continue;
    }
  }
LABEL_92:
  v73 = 0;
  if (v33)
  {
LABEL_89:
    a1[1] = v33;
    operator delete(v33);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
    v73 = v102;
  }
LABEL_90:
  *a1 = v101;
  a1[1] = v73;
  a1[2] = v103;
}

void sub_20FD6B13C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FD6B160(char **a1, unint64_t a2)
{
  char *v4;
  char *v5;
  char *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  size_t v12;
  char *v13;
  char *v14;
  size_t v15;
  char *v16;
  __int128 v17;
  __int128 v18;

  v5 = a1[1];
  v4 = a1[2];
  if (0xAAAAAAAAAAAAAAABLL * ((v4 - v5) >> 4) >= a2)
  {
    if (a2)
    {
      v12 = 48 * ((48 * a2 - 48) / 0x30) + 48;
      bzero(a1[1], v12);
      v5 += v12;
    }
    a1[1] = v5;
  }
  else
  {
    v6 = *a1;
    v7 = 0xAAAAAAAAAAAAAAABLL * ((v5 - *a1) >> 4);
    v8 = v7 + a2;
    if (v7 + a2 > 0x555555555555555)
      sub_20E867F44();
    v9 = 0xAAAAAAAAAAAAAAABLL * ((v4 - v6) >> 4);
    if (2 * v9 > v8)
      v8 = 2 * v9;
    if (v9 >= 0x2AAAAAAAAAAAAAALL)
      v10 = 0x555555555555555;
    else
      v10 = v8;
    if (v10)
    {
      if (v10 > 0x555555555555555)
        sub_20E877A38();
      v11 = (char *)operator new(48 * v10);
    }
    else
    {
      v11 = 0;
    }
    v13 = &v11[48 * v7];
    v14 = &v11[48 * v10];
    v15 = 48 * ((48 * a2 - 48) / 0x30) + 48;
    bzero(v13, v15);
    v16 = &v13[v15];
    if (v5 != v6)
    {
      do
      {
        v17 = *((_OWORD *)v5 - 3);
        v18 = *((_OWORD *)v5 - 1);
        *((_OWORD *)v13 - 2) = *((_OWORD *)v5 - 2);
        *((_OWORD *)v13 - 1) = v18;
        *((_OWORD *)v13 - 3) = v17;
        v13 -= 48;
        v5 -= 48;
      }
      while (v5 != v6);
      v5 = *a1;
    }
    *a1 = v13;
    a1[1] = v16;
    a1[2] = v14;
    if (v5)
      operator delete(v5);
  }
}

uint64_t *sub_20FD6B2FC(uint64_t **a1, uint64_t *a2, unsigned int *a3, uint64_t *a4, uint64_t *a5)
{
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t *v15;
  uint64_t *v16;

  v8 = sub_20FD6B3D4(a1, a2, &v16, &v15, a3);
  v9 = (uint64_t *)*v8;
  if (!*v8)
  {
    v10 = v8;
    v9 = (uint64_t *)operator new(0x40uLL);
    v9[4] = *a4;
    sub_20F0C7914(v9 + 5, a5);
    v11 = v16;
    *v9 = 0;
    v9[1] = 0;
    v9[2] = (uint64_t)v11;
    *v10 = (uint64_t)v9;
    v12 = (uint64_t *)**a1;
    v13 = v9;
    if (v12)
    {
      *a1 = v12;
      v13 = (uint64_t *)*v10;
    }
    sub_20E868578(a1[1], v13);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
  }
  return v9;
}

void sub_20FD6B3C0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_20FD6B3D4(uint64_t **a1, uint64_t *a2, uint64_t **a3, uint64_t **a4, unsigned int *a5)
{
  uint64_t **v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t *v14;
  BOOL v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t *v18;
  unsigned int v19;
  uint64_t *v20;
  unsigned int v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t **v25;
  uint64_t *v26;
  unsigned int v27;
  uint64_t *v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int v31;

  v5 = a1 + 1;
  if (a1 + 1 == (uint64_t **)a2)
    goto LABEL_3;
  v6 = *a5;
  v7 = *((_DWORD *)a2 + 8);
  if (*a5 < v7)
    goto LABEL_3;
  if (v6 != v7)
  {
    if (v7 >= v6)
      goto LABEL_11;
LABEL_33:
    v23 = a2[1];
    if (v23)
    {
      v24 = (uint64_t *)a2[1];
      do
      {
        v25 = (uint64_t **)v24;
        v24 = (uint64_t *)*v24;
      }
      while (v24);
    }
    else
    {
      v26 = a2;
      do
      {
        v25 = (uint64_t **)v26[2];
        v15 = *v25 == v26;
        v26 = (uint64_t *)v25;
      }
      while (!v15);
    }
    if (v25 == v5 || (v27 = *((_DWORD *)v25 + 8), v6 < v27) || v6 == v27 && a5[1] < *((_DWORD *)v25 + 9))
    {
      if (v23)
      {
        *a3 = (uint64_t *)v25;
        return (uint64_t *)v25;
      }
      else
      {
        *a3 = a2;
        return a2 + 1;
      }
    }
    v28 = *v5;
    if (!*v5)
    {
LABEL_58:
      *a3 = (uint64_t *)v5;
      return (uint64_t *)(a1 + 1);
    }
    v29 = a5[1];
    while (1)
    {
      v20 = v28;
      v30 = *((_DWORD *)v28 + 8);
      if (v6 < v30)
        goto LABEL_49;
      if (v6 != v30)
      {
        if (v30 >= v6)
          goto LABEL_30;
        goto LABEL_56;
      }
      v31 = *((_DWORD *)v20 + 9);
      if (v29 < v31)
      {
LABEL_49:
        v28 = (uint64_t *)*v20;
        v5 = (uint64_t **)v20;
        if (!*v20)
          goto LABEL_30;
      }
      else
      {
        if (v31 >= v29)
          goto LABEL_30;
LABEL_56:
        v5 = (uint64_t **)(v20 + 1);
        v28 = (uint64_t *)v20[1];
        if (!v28)
        {
LABEL_30:
          *a3 = v20;
          return (uint64_t *)v5;
        }
      }
    }
  }
  v11 = a5[1];
  v12 = *((_DWORD *)a2 + 9);
  if (v11 >= v12)
  {
    if (v12 >= v11)
    {
LABEL_11:
      *a3 = a2;
      *a4 = a2;
      return (uint64_t *)a4;
    }
    goto LABEL_33;
  }
LABEL_3:
  v8 = (uint64_t *)*a2;
  if (*a1 == a2)
  {
    v10 = a2;
  }
  else
  {
    if (v8)
    {
      v9 = (uint64_t *)*a2;
      do
      {
        v10 = v9;
        v9 = (uint64_t *)v9[1];
      }
      while (v9);
    }
    else
    {
      v14 = a2;
      do
      {
        v10 = (uint64_t *)v14[2];
        v15 = *v10 == (_QWORD)v14;
        v14 = v10;
      }
      while (v15);
    }
    v16 = *((_DWORD *)v10 + 8);
    v17 = *a5;
    if (v16 >= *a5 && (v16 != v17 || *((_DWORD *)v10 + 9) >= a5[1]))
    {
      v18 = *v5;
      if (*v5)
      {
        v19 = a5[1];
        while (1)
        {
          v20 = v18;
          v21 = *((_DWORD *)v18 + 8);
          if (v17 < v21)
            goto LABEL_22;
          if (v17 != v21)
          {
            if (v21 >= v17)
              goto LABEL_30;
            goto LABEL_29;
          }
          v22 = *((_DWORD *)v20 + 9);
          if (v19 < v22)
          {
LABEL_22:
            v18 = (uint64_t *)*v20;
            v5 = (uint64_t **)v20;
            if (!*v20)
              goto LABEL_30;
          }
          else
          {
            if (v22 >= v19)
              goto LABEL_30;
LABEL_29:
            v5 = (uint64_t **)(v20 + 1);
            v18 = (uint64_t *)v20[1];
            if (!v18)
              goto LABEL_30;
          }
        }
      }
      goto LABEL_58;
    }
  }
  if (v8)
  {
    *a3 = v10;
    return v10 + 1;
  }
  else
  {
    *a3 = a2;
    return a2;
  }
}

__n128 sub_20FD6B5FC(uint64_t a1, __int128 *a2, uint64_t a3, unint64_t a4, int *a5, uint64_t a6, __n128 result)
{
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  int v11;
  int v12;
  int v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  _DWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  unsigned int v24;
  uint64_t v25;
  unsigned int v26;
  int v27;
  uint64_t v28;
  int v29;
  int v30;
  _DWORD *v31;
  int v32;
  uint64_t v33;
  int *v34;
  __int128 v35;
  unsigned int v36;
  int *v38;
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;
  int *v43;
  int *v44;
  int *v45;
  __int128 v46;
  unsigned int v47;
  unsigned int v48;
  uint64_t v49;
  int v50;
  int v51;
  __int128 v52;
  uint64_t v53;
  uint64_t v54;
  __int128 v55;
  uint64_t v56;
  uint64_t v57;
  __int128 v58;
  uint64_t v59;
  int v60;
  __n128 v61;
  uint64_t v62;

  if (a4 >= 2)
  {
    v8 = a1;
    if (a4 == 2)
    {
      v9 = *(_DWORD *)(a2 - 1) & ~(*((int *)a2 - 4) >> 31);
      if (v9 >= 7)
        v9 = 7;
      v10 = v9;
      v11 = dword_2103BFE20[v10];
      v12 = dword_2103BFE40[v10];
      if ((*(_DWORD *)(a1 + 32) & ~(*(int *)(a1 + 32) >> 31)) >= 7)
        v13 = 7;
      else
        v13 = *(_DWORD *)(a1 + 32) & ~(*(int *)(a1 + 32) >> 31);
      result.n128_u32[0] = *(_DWORD *)(a1 + 4);
      if (v11 + v12 * (int)*((float *)a2 - 11) < dword_2103BFE20[v13] + dword_2103BFE40[v13] * (int)result.n128_f32[0])
      {
        result = *(__n128 *)a1;
        v14 = *(_OWORD *)(a1 + 16);
        v15 = *(_OWORD *)(a1 + 32);
        v17 = *(a2 - 2);
        v16 = *(a2 - 1);
        *(_OWORD *)a1 = *(a2 - 3);
        *(_OWORD *)(a1 + 16) = v17;
        *(_OWORD *)(a1 + 32) = v16;
        *(a2 - 2) = v14;
        *(a2 - 1) = v15;
        *(a2 - 3) = (__int128)result;
      }
    }
    else if ((uint64_t)a4 > 128)
    {
      v38 = a5;
      v40 = a4 >> 1;
      v41 = a1 + 48 * (a4 >> 1);
      v42 = a4 >> 1;
      if ((uint64_t)a4 <= a6)
      {
        sub_20FD6BA18(a1, v41, a3, v42, a5);
        v43 = &v38[12 * v40];
        sub_20FD6BA18(v8 + 48 * (a4 >> 1), (uint64_t)a2, a3, a4 - (a4 >> 1), v43);
        v44 = &v38[12 * a4];
        v45 = v43;
        while (v45 != v44)
        {
          v47 = v45[8] & ~(v45[8] >> 31);
          if (v47 >= 7)
            v47 = 7;
          v48 = v38[8] & ~(v38[8] >> 31);
          v49 = v47;
          v50 = dword_2103BFE20[v49];
          v51 = dword_2103BFE40[v49];
          if (v48 >= 7)
            v48 = 7;
          if (v50 + v51 * (int)*((float *)v45 + 1) >= dword_2103BFE20[v48]
                                                     + dword_2103BFE40[v48] * (int)*((float *)v38 + 1))
          {
            result = *(__n128 *)v38;
            v46 = *((_OWORD *)v38 + 2);
            *(_OWORD *)(v8 + 16) = *((_OWORD *)v38 + 1);
            *(_OWORD *)(v8 + 32) = v46;
            *(__n128 *)v8 = result;
            v8 += 48;
            v38 += 12;
            if (v38 == v43)
              goto LABEL_40;
          }
          else
          {
            result = *(__n128 *)v45;
            v52 = *((_OWORD *)v45 + 2);
            *(_OWORD *)(v8 + 16) = *((_OWORD *)v45 + 1);
            *(_OWORD *)(v8 + 32) = v52;
            *(__n128 *)v8 = result;
            v8 += 48;
            v45 += 12;
            if (v38 == v43)
            {
LABEL_40:
              if (v45 != v44)
              {
                v53 = 0;
                do
                {
                  v54 = v8 + v53 * 4;
                  result = *(__n128 *)&v45[v53];
                  v55 = *(_OWORD *)&v45[v53 + 8];
                  *(_OWORD *)(v54 + 16) = *(_OWORD *)&v45[v53 + 4];
                  *(_OWORD *)(v54 + 32) = v55;
                  *(__n128 *)v54 = result;
                  v53 += 12;
                }
                while (&v45[v53] != v44);
              }
              return result;
            }
          }
        }
        if (v38 != v43)
        {
          v56 = 0;
          do
          {
            v57 = v8 + v56 * 4;
            result = *(__n128 *)&v38[v56];
            v58 = *(_OWORD *)&v38[v56 + 8];
            *(_OWORD *)(v57 + 16) = *(_OWORD *)&v38[v56 + 4];
            *(_OWORD *)(v57 + 32) = v58;
            *(__n128 *)v57 = result;
            v56 += 12;
          }
          while (&v38[v56] != v43);
        }
      }
      else
      {
        sub_20FD6B5FC(a1, v41, a3, v42, a5, a6);
        sub_20FD6B5FC(v8 + 48 * (a4 >> 1), a2, a3, a4 - (a4 >> 1), v38, a6);
        result.n128_u64[0] = sub_20FD6BCE4((int *)v8, (__n128 *)(v8 + 48 * (a4 >> 1)), a2, a3, a4 >> 1, a4 - (a4 >> 1), (char *)v38, a6).n128_u64[0];
      }
    }
    else if ((__int128 *)a1 != a2)
    {
      v19 = (_DWORD *)(a1 + 48);
      if ((__int128 *)(a1 + 48) != a2)
      {
        v20 = 0;
        v21 = a1;
        do
        {
          v23 = *(_DWORD *)(v21 + 80);
          v24 = v23 & ~(v23 >> 31);
          if (v24 >= 7)
            v24 = 7;
          v25 = v24;
          if ((*(_DWORD *)(v21 + 32) & ~(*(int *)(v21 + 32) >> 31)) >= 7)
            v26 = 7;
          else
            v26 = *(_DWORD *)(v21 + 32) & ~(*(int *)(v21 + 32) >> 31);
          result.n128_u32[0] = *(_DWORD *)(v21 + 52);
          v27 = dword_2103BFE20[v25] + dword_2103BFE40[v25] * (int)result.n128_f32[0];
          v28 = v26;
          v29 = dword_2103BFE20[v28];
          v30 = dword_2103BFE40[v28];
          v31 = v19;
          if (v27 < v29 + v30 * (int)*(float *)(v21 + 4))
          {
            v32 = *v19;
            v61 = *(__n128 *)(v21 + 56);
            v62 = *(_QWORD *)(v21 + 72);
            v59 = *(_QWORD *)(v21 + 84);
            v60 = *(_DWORD *)(v21 + 92);
            v33 = v20;
            do
            {
              v34 = (int *)(v8 + v33);
              v35 = *(_OWORD *)(v8 + v33 + 16);
              *((_OWORD *)v34 + 3) = *(_OWORD *)(v8 + v33);
              *((_OWORD *)v34 + 4) = v35;
              *((_OWORD *)v34 + 5) = *(_OWORD *)(v8 + v33 + 32);
              if (!v33)
              {
                v22 = v8;
                goto LABEL_15;
              }
              v36 = *(v34 - 4) & ~(*(v34 - 4) >> 31);
              if (v36 >= 7)
                v36 = 7;
              v33 -= 48;
            }
            while (v27 < dword_2103BFE20[v36] + dword_2103BFE40[v36] * (int)*((float *)v34 - 11));
            v22 = v8 + v33 + 48;
LABEL_15:
            *(_DWORD *)v22 = v32;
            *(_DWORD *)(v22 + 4) = result.n128_u32[0];
            result = v61;
            *(__n128 *)(v22 + 8) = v61;
            *(_QWORD *)(v22 + 24) = v62;
            *(_DWORD *)(v22 + 32) = v23;
            *(_QWORD *)(v22 + 36) = v59;
            *(_DWORD *)(v22 + 44) = v60;
          }
          v19 = v31 + 12;
          v20 += 48;
          v21 = (uint64_t)v31;
        }
        while (v31 + 12 != (_DWORD *)a2);
      }
    }
  }
  return result;
}

void sub_20FD6BA18(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, _OWORD *a5)
{
  _OWORD *v5;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  unsigned int v11;
  unsigned int v12;
  __int128 *v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v20;
  __int128 v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  __int128 v27;
  unsigned int v28;
  unsigned int v29;
  uint64_t v30;
  int v31;
  int v32;
  __int128 v33;
  __int128 v34;
  unint64_t v35;
  _OWORD *v36;
  __int128 v37;
  __int128 v38;
  unint64_t v39;
  _OWORD *v40;
  __int128 v41;
  __int128 v42;

  if (a4)
  {
    v5 = a5;
    v8 = a1;
    if (a4 == 2)
    {
      v11 = *(_DWORD *)(a2 - 16) & ~(*(int *)(a2 - 16) >> 31);
      if (v11 >= 7)
        v11 = 7;
      v12 = *(_DWORD *)(a1 + 32) & ~(*(int *)(a1 + 32) >> 31);
      if (v12 >= 7)
        v12 = 7;
      v13 = (__int128 *)(a2 - 48);
      if (dword_2103BFE20[v11] + dword_2103BFE40[v11] * (int)*(float *)(a2 - 44) >= dword_2103BFE20[v12]
                                                                                   + dword_2103BFE40[v12]
                                                                                   * (int)*(float *)(a1 + 4))
      {
        v20 = *(_OWORD *)a1;
        v21 = *(_OWORD *)(a1 + 32);
        a5[1] = *(_OWORD *)(a1 + 16);
        a5[2] = v21;
        *a5 = v20;
        v16 = *v13;
        v17 = *(_OWORD *)(a2 - 32);
        v18 = *(_OWORD *)(a2 - 16);
      }
      else
      {
        v14 = *v13;
        v15 = *(_OWORD *)(a2 - 16);
        a5[1] = *(_OWORD *)(a2 - 32);
        a5[2] = v15;
        *a5 = v14;
        v16 = *(_OWORD *)a1;
        v17 = *(_OWORD *)(a1 + 16);
        v18 = *(_OWORD *)(a1 + 32);
      }
      a5[4] = v17;
      a5[5] = v18;
      a5[3] = v16;
    }
    else if (a4 == 1)
    {
      v9 = *(_OWORD *)a1;
      v10 = *(_OWORD *)(a1 + 32);
      a5[1] = *(_OWORD *)(a1 + 16);
      a5[2] = v10;
      *a5 = v9;
    }
    else if ((uint64_t)a4 > 8)
    {
      v22 = a4 >> 1;
      v23 = 48 * (a4 >> 1);
      v24 = a1 + v23;
      sub_20FD6B5FC(a1, a1 + v23, a3, a4 >> 1, a5, a4 >> 1);
      sub_20FD6B5FC(v8 + v23, a2, a3, a4 - v22, &v5[(unint64_t)v23 / 0x10], a4 - v22);
      v25 = v8 + v23;
      while (v25 != a2)
      {
        v28 = *(_DWORD *)(v25 + 32) & ~(*(int *)(v25 + 32) >> 31);
        if (v28 >= 7)
          v28 = 7;
        v29 = *(_DWORD *)(v8 + 32) & ~(*(int *)(v8 + 32) >> 31);
        v30 = v28;
        v31 = dword_2103BFE20[v30];
        v32 = dword_2103BFE40[v30];
        if (v29 >= 7)
          v29 = 7;
        if (v31 + v32 * (int)*(float *)(v25 + 4) >= dword_2103BFE20[v29]
                                                   + dword_2103BFE40[v29] * (int)*(float *)(v8 + 4))
        {
          v26 = *(_OWORD *)v8;
          v27 = *(_OWORD *)(v8 + 32);
          v5[1] = *(_OWORD *)(v8 + 16);
          v5[2] = v27;
          *v5 = v26;
          v5 += 3;
          v8 += 48;
          if (v8 == v24)
            goto LABEL_25;
        }
        else
        {
          v33 = *(_OWORD *)v25;
          v34 = *(_OWORD *)(v25 + 32);
          v5[1] = *(_OWORD *)(v25 + 16);
          v5[2] = v34;
          *v5 = v33;
          v5 += 3;
          v25 += 48;
          if (v8 == v24)
          {
LABEL_25:
            if (v25 != a2)
            {
              v35 = 0;
              do
              {
                v36 = &v5[v35 / 0x10];
                v37 = *(_OWORD *)(v25 + v35);
                v38 = *(_OWORD *)(v25 + v35 + 32);
                v36[1] = *(_OWORD *)(v25 + v35 + 16);
                v36[2] = v38;
                *v36 = v37;
                v35 += 48;
              }
              while (v25 + v35 != a2);
            }
            return;
          }
        }
      }
      if (v8 != v24)
      {
        v39 = 0;
        do
        {
          v40 = &v5[v39 / 0x10];
          v41 = *(_OWORD *)(v8 + v39);
          v42 = *(_OWORD *)(v8 + v39 + 32);
          v40[1] = *(_OWORD *)(v8 + v39 + 16);
          v40[2] = v42;
          *v40 = v41;
          v39 += 48;
        }
        while (v8 + v39 != v24);
      }
    }
    else
    {
      sub_20FD6C09C(a1, a2, (int *)a5);
    }
  }
}

__n128 sub_20FD6BCE4(int *a1, __n128 *a2, __int128 *a3, uint64_t a4, uint64_t a5, uint64_t a6, char *a7, uint64_t a8)
{
  unint64_t v10;
  unsigned int v11;
  int v12;
  uint64_t v13;
  unsigned int v14;
  __n128 result;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  unsigned int v22;
  uint64_t v23;
  int v24;
  int v25;
  unint64_t v26;
  int v27;
  unint64_t v28;
  char *v29;
  unsigned int v30;
  int v31;
  char *v32;
  char *v33;
  uint64_t v34;
  int *v35;
  unsigned int v36;
  unint64_t v37;
  int v38;
  unint64_t v39;
  char *v40;
  unsigned int v41;
  int v42;
  char *v43;
  char *v44;
  char *v45;
  int *v46;
  __int128 *v47;
  int *v48;
  __n128 v49;
  __n128 v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  __int128 *v55;
  uint64_t v56;
  __n128 v59;
  __n128 v60;
  __n128 v61;

  if (a6)
  {
    while (1)
    {
      if (a5 <= a8 || a6 <= a8)
      {
        sub_20FD6C20C(a1, (int *)a2, a3, a4, a5, a6, a7);
        return result;
      }
      if (!a5)
        return result;
      v10 = 0;
      v11 = a2[2].n128_u32[0] & ~(a2[2].n128_i32[0] >> 31);
      if (v11 >= 7)
        v11 = 7;
      v12 = dword_2103BFE20[v11] + dword_2103BFE40[v11] * (int)a2->n128_f32[1];
      v13 = -a5;
      while (1)
      {
        v14 = a1[v10 / 4 + 8] & ~(a1[v10 / 4 + 8] >> 31);
        if (v14 >= 7)
          v14 = 7;
        result.n128_u32[0] = a1[v10 / 4 + 1];
        if (v12 < dword_2103BFE20[v14] + dword_2103BFE40[v14] * (int)result.n128_f32[0])
          break;
        v10 += 48;
        if (__CFADD__(v13++, 1))
          return result;
      }
      v17 = -v13;
      v55 = a3;
      v56 = a8;
      if (-v13 >= a6)
      {
        if (v13 == -1)
        {
          v48 = &a1[v10 / 4];
          v60 = *(__n128 *)&a1[v10 / 4 + 4];
          v61 = *(__n128 *)&a1[v10 / 4 + 8];
          v59 = *(__n128 *)&a1[v10 / 4];
          v49 = *a2;
          v50 = a2[2];
          *((__n128 *)v48 + 1) = a2[1];
          *((__n128 *)v48 + 2) = v50;
          *(__n128 *)v48 = v49;
          *a2 = v59;
          a2[1] = v60;
          result = v61;
          a2[2] = v61;
          return result;
        }
        if (v13 > 0)
          v17 = 1 - v13;
        v34 = v17 >> 1;
        v33 = (char *)a2;
        if (a2 != (__n128 *)a3)
        {
          v35 = &a1[12 * v34 + v10 / 4];
          v36 = v35[8] & ~(v35[8] >> 31);
          if (v36 >= 7)
            v36 = 7;
          v37 = 0xAAAAAAAAAAAAAAABLL * (((char *)a3 - (char *)a2) >> 4);
          v38 = dword_2103BFE20[v36] + dword_2103BFE40[v36] * (int)*((float *)v35 + 1);
          v33 = (char *)a2;
          do
          {
            v39 = v37 >> 1;
            v40 = &v33[48 * (v37 >> 1)];
            v41 = *((_DWORD *)v40 + 8) & ~(*((int *)v40 + 8) >> 31);
            if (v41 >= 7)
              v41 = 7;
            v42 = dword_2103BFE20[v41] + dword_2103BFE40[v41] * (int)*((float *)v40 + 1);
            v43 = v40 + 48;
            v37 += ~v39;
            if (v42 < v38)
              v33 = v43;
            else
              v37 = v39;
          }
          while (v37);
        }
        v20 = (char *)&a1[12 * v34 + v10 / 4];
        v19 = 0xAAAAAAAAAAAAAAABLL * ((v33 - (char *)a2) >> 4);
      }
      else
      {
        if (a6 >= 0)
          v18 = a6;
        else
          v18 = a6 + 1;
        v19 = v18 >> 1;
        v20 = (char *)a2;
        if ((char *)a2 - (char *)a1 != v10)
        {
          v21 = (char *)&a2[3 * v19];
          v22 = *((_DWORD *)v21 + 8) & ~(*((int *)v21 + 8) >> 31);
          if (v22 >= 7)
            v22 = 7;
          v23 = v22;
          v24 = dword_2103BFE20[v23];
          v25 = dword_2103BFE40[v23];
          v26 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)((char *)a2 - (char *)a1 - v10) >> 4);
          v27 = v24 + v25 * (int)*((float *)v21 + 1);
          v20 = (char *)&a1[v10 / 4];
          do
          {
            v28 = v26 >> 1;
            v29 = &v20[48 * (v26 >> 1)];
            v30 = *((_DWORD *)v29 + 8) & ~(*((int *)v29 + 8) >> 31);
            if (v30 >= 7)
              v30 = 7;
            v31 = dword_2103BFE20[v30] + dword_2103BFE40[v30] * (int)*((float *)v29 + 1);
            v32 = v29 + 48;
            v26 += ~v28;
            if (v27 < v31)
              v26 = v28;
            else
              v20 = v32;
          }
          while (v26);
        }
        v33 = (char *)&a2[3 * v19];
        v34 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v20 - (char *)a1 - v10) >> 4);
      }
      v53 = a6;
      v54 = v19;
      v52 = -v34 - v13;
      v51 = a6 - v19;
      v44 = sub_20FD6C428(v20, (char *)a2, v33);
      if (v34 + v54 >= v53 - (v34 + v54) - v13)
      {
        v47 = (__int128 *)v44;
        sub_20FD6BCE4(v44, v33, v55, a4, v52, v51, a7, v56);
        a2 = (__n128 *)v20;
        a8 = v56;
        a5 = v34;
        a3 = v47;
        a6 = v54;
        a1 = (int *)((char *)a1 + v10);
        if (!v54)
          return result;
      }
      else
      {
        v45 = v20;
        v46 = (int *)v44;
        a8 = v56;
        sub_20FD6BCE4(&a1[v10 / 4], v45, v44, a4, v34, v54, a7, v56);
        a2 = (__n128 *)v33;
        a3 = v55;
        a5 = -v34 - v13;
        a6 = v51;
        a1 = v46;
        if (!v51)
          return result;
      }
    }
  }
  return result;
}

__n128 sub_20FD6C09C(uint64_t a1, uint64_t a2, int *a3)
{
  __n128 result;
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  int *v7;
  __int128 v8;
  uint64_t v9;
  int *v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  int v14;
  int *v15;
  __int128 v16;
  uint64_t v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t v20;
  int v21;
  int v22;
  __int128 v23;

  if (a1 != a2)
  {
    result = *(__n128 *)a1;
    v4 = *(_OWORD *)(a1 + 32);
    *((_OWORD *)a3 + 1) = *(_OWORD *)(a1 + 16);
    *((_OWORD *)a3 + 2) = v4;
    *(__n128 *)a3 = result;
    v5 = a1 + 48;
    if (a1 + 48 != a2)
    {
      v6 = 0;
      v7 = a3;
      do
      {
        v9 = a1;
        v10 = v7;
        a1 = v5;
        v7 += 12;
        v11 = *(_DWORD *)(v9 + 80) & ~(*(int *)(v9 + 80) >> 31);
        if (v11 >= 7)
          v11 = 7;
        v12 = v10[8] & ~(v10[8] >> 31);
        v13 = v11;
        if (v12 >= 7)
          v12 = 7;
        v14 = dword_2103BFE20[v13] + dword_2103BFE40[v13] * (int)*(float *)(v9 + 52);
        v15 = v7;
        if (v14 < dword_2103BFE20[v12] + dword_2103BFE40[v12] * (int)*((float *)v10 + 1))
        {
          v16 = *((_OWORD *)v10 + 1);
          *(_OWORD *)v7 = *(_OWORD *)v10;
          *((_OWORD *)v7 + 1) = v16;
          *((_OWORD *)v7 + 2) = *((_OWORD *)v10 + 2);
          v15 = a3;
          if (v10 != a3)
          {
            v17 = v6;
            while (1)
            {
              v15 = (int *)((char *)a3 + v17);
              v18 = *(_DWORD *)(v9 + 80) & ~(*(int *)(v9 + 80) >> 31);
              if (v18 >= 7)
                v18 = 7;
              v19 = *(v15 - 4) & ~(*(v15 - 4) >> 31);
              v20 = v18;
              v21 = dword_2103BFE20[v20];
              v22 = dword_2103BFE40[v20];
              if (v19 >= 7)
                v19 = 7;
              if (v21 + v22 * (int)*(float *)(v9 + 52) >= dword_2103BFE20[v19]
                                                         + dword_2103BFE40[v19] * (int)*((float *)v15 - 11))
                break;
              v23 = *((_OWORD *)v15 - 2);
              *(_OWORD *)v15 = *((_OWORD *)v15 - 3);
              *((_OWORD *)v15 + 1) = v23;
              *((_OWORD *)v15 + 2) = *((_OWORD *)v15 - 1);
              v17 -= 48;
              if (!v17)
              {
                v15 = a3;
                break;
              }
            }
          }
        }
        result = *(__n128 *)a1;
        v8 = *(_OWORD *)(a1 + 32);
        *((_OWORD *)v15 + 1) = *(_OWORD *)(a1 + 16);
        *((_OWORD *)v15 + 2) = v8;
        *(__n128 *)v15 = result;
        v5 = a1 + 48;
        v6 += 48;
      }
      while (a1 + 48 != a2);
    }
  }
  return result;
}

int *sub_20FD6C20C(int *result, int *a2, __int128 *a3, int a4, uint64_t a5, uint64_t a6, char *__src)
{
  uint64_t v7;
  char *v8;
  __int128 v9;
  __int128 v10;
  char *v11;
  __int128 *v12;
  unsigned int v13;
  unsigned int v14;
  int v15;
  int v16;
  BOOL v17;
  char *v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  char *v22;
  __int128 v23;
  __int128 v24;
  char *v25;
  char *v26;
  __int128 v27;
  __int128 v28;
  unsigned int v29;
  unsigned int v30;
  uint64_t v31;
  int v32;
  int v33;
  __int128 v34;
  __int128 v35;
  unint64_t v36;
  __int128 *v37;
  __int128 v38;
  __int128 v39;

  if (a5 <= a6)
  {
    if (result != a2)
    {
      v21 = 0;
      do
      {
        v22 = &__src[v21 * 4];
        v23 = *(_OWORD *)&result[v21];
        v24 = *(_OWORD *)&result[v21 + 8];
        *((_OWORD *)v22 + 1) = *(_OWORD *)&result[v21 + 4];
        *((_OWORD *)v22 + 2) = v24;
        *(_OWORD *)v22 = v23;
        v21 += 12;
      }
      while (&result[v21] != a2);
      if (v21 * 4)
      {
        v25 = &__src[v21 * 4];
        v26 = __src;
        while (a2 != (int *)a3)
        {
          v29 = a2[8] & ~(a2[8] >> 31);
          if (v29 >= 7)
            v29 = 7;
          v30 = *((_DWORD *)v26 + 8) & ~(*((int *)v26 + 8) >> 31);
          v31 = v29;
          v32 = dword_2103BFE20[v31];
          v33 = dword_2103BFE40[v31];
          if (v30 >= 7)
            v30 = 7;
          if (v32 + v33 * (int)*((float *)a2 + 1) >= dword_2103BFE20[v30]
                                                    + dword_2103BFE40[v30] * (int)*((float *)v26 + 1))
          {
            v27 = *(_OWORD *)v26;
            v28 = *((_OWORD *)v26 + 2);
            *((_OWORD *)result + 1) = *((_OWORD *)v26 + 1);
            *((_OWORD *)result + 2) = v28;
            *(_OWORD *)result = v27;
            result += 12;
            v26 += 48;
            if (v25 == v26)
              return result;
          }
          else
          {
            v34 = *(_OWORD *)a2;
            v35 = *((_OWORD *)a2 + 2);
            *((_OWORD *)result + 1) = *((_OWORD *)a2 + 1);
            *((_OWORD *)result + 2) = v35;
            *(_OWORD *)result = v34;
            result += 12;
            a2 += 12;
            if (v25 == v26)
              return result;
          }
        }
        return (int *)memmove(result, v26, __src - v26 + v21 * 4);
      }
    }
  }
  else if (a2 != (int *)a3)
  {
    v7 = 0;
    do
    {
      v8 = &__src[v7 * 4];
      v9 = *(_OWORD *)&a2[v7];
      v10 = *(_OWORD *)&a2[v7 + 8];
      *((_OWORD *)v8 + 1) = *(_OWORD *)&a2[v7 + 4];
      *((_OWORD *)v8 + 2) = v10;
      *(_OWORD *)v8 = v9;
      v7 += 12;
    }
    while (&a2[v7] != (int *)a3);
    if (v7 * 4)
    {
      v11 = &__src[v7 * 4];
      v12 = a3 - 3;
      while (a2 != result)
      {
        v13 = *((_DWORD *)v11 - 4) & ~(*((int *)v11 - 4) >> 31);
        if (v13 >= 7)
          v13 = 7;
        v14 = *(a2 - 4) & ~(*(a2 - 4) >> 31);
        if (v14 >= 7)
          v14 = 7;
        v15 = dword_2103BFE20[v13] + dword_2103BFE40[v13] * (int)*((float *)v11 - 11);
        v16 = dword_2103BFE20[v14] + dword_2103BFE40[v14] * (int)*((float *)a2 - 11);
        v17 = v15 < v16;
        if (v15 >= v16)
          v18 = v11 - 48;
        else
          v18 = (char *)(a2 - 12);
        if (v17)
          a2 -= 12;
        else
          v11 -= 48;
        v19 = *(_OWORD *)v18;
        v20 = *((_OWORD *)v18 + 2);
        v12[1] = *((_OWORD *)v18 + 1);
        v12[2] = v20;
        *v12 = v19;
        v12 -= 3;
        if (v11 == __src)
          return result;
      }
      v36 = 0;
      do
      {
        v37 = &v12[v36 / 0x10];
        v38 = *(_OWORD *)&v11[v36 - 48];
        v39 = *(_OWORD *)&v11[v36 - 16];
        v37[1] = *(_OWORD *)&v11[v36 - 32];
        v37[2] = v39;
        *v37 = v38;
        v36 -= 48;
      }
      while (&v11[v36] != __src);
    }
  }
  return result;
}

char *sub_20FD6C428(char *__src, char *a2, char *a3)
{
  char *v4;
  unint64_t v6;
  char *v7;
  char *v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  BOOL v14;
  int64_t v15;
  size_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  char *v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  char *v24;
  char *v25;
  char *v26;
  __int128 v27;
  __int128 v28;
  unint64_t v29;
  BOOL v30;
  char v31;
  uint64_t v32;
  char *v33;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;

  v4 = a3;
  if (__src != a2)
  {
    if (a2 == a3)
    {
      return __src;
    }
    else if (__src + 48 == a2)
    {
      v35 = *(_OWORD *)__src;
      v38 = *((_OWORD *)__src + 1);
      v40 = *((_OWORD *)__src + 2);
      v15 = a3 - a2;
      memmove(__src, a2, a3 - a2);
      v4 = &__src[v15];
      *(_OWORD *)v4 = v35;
      *((_OWORD *)v4 + 1) = v38;
      *((_OWORD *)v4 + 2) = v40;
    }
    else if (a2 + 48 == a3)
    {
      v4 = __src + 48;
      v36 = *((_OWORD *)a3 - 3);
      v39 = *((_OWORD *)a3 - 2);
      v41 = *((_OWORD *)a3 - 1);
      v16 = a3 - 48 - __src;
      if (a3 - 48 != __src)
        memmove(__src + 48, __src, v16);
      *(_OWORD *)__src = v36;
      *((_OWORD *)__src + 1) = v39;
      *((_OWORD *)__src + 2) = v41;
    }
    else
    {
      v6 = 0xAAAAAAAAAAAAAAABLL * ((a2 - __src) >> 4);
      if (v6 == 0xAAAAAAAAAAAAAAABLL * ((a3 - a2) >> 4))
      {
        v7 = __src + 48;
        v8 = a2 + 48;
        do
        {
          v9 = *((_OWORD *)v7 - 3);
          v10 = *((_OWORD *)v7 - 2);
          v11 = *((_OWORD *)v7 - 1);
          v13 = *((_OWORD *)v8 - 2);
          v12 = *((_OWORD *)v8 - 1);
          *((_OWORD *)v7 - 3) = *((_OWORD *)v8 - 3);
          *((_OWORD *)v7 - 2) = v13;
          *((_OWORD *)v7 - 1) = v12;
          *((_OWORD *)v8 - 2) = v10;
          *((_OWORD *)v8 - 1) = v11;
          *((_OWORD *)v8 - 3) = v9;
          if (v7 == a2)
            break;
          v7 += 48;
          v14 = v8 == a3;
          v8 += 48;
        }
        while (!v14);
        return a2;
      }
      else
      {
        v17 = 0xAAAAAAAAAAAAAAABLL * ((a3 - a2) >> 4);
        v18 = 0xAAAAAAAAAAAAAAABLL * ((a2 - __src) >> 4);
        do
        {
          v19 = v18;
          v18 = v17;
          v17 = v19 % v17;
        }
        while (v17);
        if (v18)
        {
          v20 = &__src[48 * v18];
          do
          {
            v21 = *((_OWORD *)v20 - 3);
            v22 = *((_OWORD *)v20 - 2);
            v23 = *((_OWORD *)v20 - 1);
            v20 -= 48;
            v37 = v21;
            v42 = v23;
            v24 = &v20[16 * ((a2 - __src) >> 4)];
            v25 = v20;
            do
            {
              v26 = v24;
              v27 = *(_OWORD *)v24;
              v28 = *((_OWORD *)v24 + 2);
              *((_OWORD *)v25 + 1) = *((_OWORD *)v24 + 1);
              *((_OWORD *)v25 + 2) = v28;
              *(_OWORD *)v25 = v27;
              v29 = 0xAAAAAAAAAAAAAAABLL * ((a3 - v24) >> 4);
              v24 += 16 * ((a2 - __src) >> 4);
              v30 = __OFSUB__(v6, v29);
              v32 = v6 - v29;
              v31 = (v32 < 0) ^ v30;
              v33 = &__src[48 * v32];
              if (!v31)
                v24 = v33;
              v25 = v26;
            }
            while (v24 != v20);
            *((_OWORD *)v26 + 1) = v22;
            *((_OWORD *)v26 + 2) = v42;
            *(_OWORD *)v26 = v37;
          }
          while (v20 != __src);
        }
        return &__src[16 * ((a3 - a2) >> 4)];
      }
    }
  }
  return v4;
}

float *sub_20FD6C62C(float *result, float *a2, float *a3)
{
  unint64_t v3;
  unint64_t v4;
  float *v5;
  float *v6;
  float v7;
  float v8;
  float v9;
  int v10;
  int v11;
  float v12;
  float v13;
  float *v14;
  float *v15;
  float *v16;
  float v17;
  float v18;
  float v19;
  float *v20;
  float v21;
  float v22;
  int v23;
  float *v24;
  float *v25;
  int v26;
  float v27;
  int v28;
  int v29;
  float *v30;
  int v31;
  float v32;
  int v33;
  float v34;
  float v35;
  float *v36;
  float v37;
  float *v38;
  float v39;
  float v40;
  int v41;
  int v42;
  float v43;
  float v44;
  float v45;
  float *v46;
  float v47;
  float v48;
  float v49;
  float v50;
  int v51;
  float v52;
  float v53;
  float v54;
  int v55;
  float *v56;
  float v57;
  float v58;
  float *v59;
  float *v60;
  float *v61;
  float v62;
  float v63;
  int v64;
  int v65;
  float v66;
  float v67;
  int v68;
  int v69;
  float v70;

  while (a3 != a2)
  {
    v3 = ((char *)a3 - (char *)result) >> 3;
    if (v3 < 2)
      break;
    if (v3 == 3)
    {
      v52 = result[2];
      v53 = *result;
      v54 = *(a3 - 2);
      if (v52 <= *result)
      {
        if (v54 > v52)
        {
          result[2] = v54;
          *(a3 - 2) = v52;
          v65 = *((_DWORD *)result + 3);
          result[3] = *(a3 - 1);
          *((_DWORD *)a3 - 1) = v65;
          v66 = result[2];
          v67 = *result;
          if (v66 > *result)
          {
            *result = v66;
            result[2] = v67;
            v68 = *((_DWORD *)result + 1);
            result[1] = result[3];
            *((_DWORD *)result + 3) = v68;
          }
        }
      }
      else if (v54 <= v52)
      {
        *result = v52;
        result[2] = v53;
        v69 = *((_DWORD *)result + 1);
        result[1] = result[3];
        *((_DWORD *)result + 3) = v69;
        v70 = *(a3 - 2);
        if (v70 > v53)
        {
          result[2] = v70;
          *(a3 - 2) = v53;
          result[3] = *(a3 - 1);
          *((_DWORD *)a3 - 1) = v69;
        }
      }
      else
      {
        *result = v54;
        *(a3 - 2) = v53;
        v55 = *((_DWORD *)result + 1);
        result[1] = *(a3 - 1);
        *((_DWORD *)a3 - 1) = v55;
      }
      return result;
    }
    if (v3 == 2)
    {
      v49 = *(a3 - 2);
      v50 = *result;
      if (v49 > *result)
      {
        *result = v49;
        *(a3 - 2) = v50;
        v51 = *((_DWORD *)result + 1);
        result[1] = *(a3 - 1);
        *((_DWORD *)a3 - 1) = v51;
      }
      return result;
    }
    if ((char *)a3 - (char *)result <= 63)
    {
      while (result != a3 - 2)
      {
        v56 = result;
        result += 2;
        if (v56 != a3 && result != a3)
        {
          v57 = *v56;
          v58 = *v56;
          v59 = result;
          v60 = v56;
          v61 = result;
          do
          {
            v62 = *v61;
            v61 += 2;
            v63 = v62;
            if (v62 > v58)
            {
              v58 = v63;
              v60 = v59;
            }
            v59 = v61;
          }
          while (v61 != a3);
          if (v60 != v56)
          {
            *v56 = *v60;
            *v60 = v57;
            v64 = *((_DWORD *)v56 + 1);
            v56[1] = v60[1];
            *((_DWORD *)v60 + 1) = v64;
          }
        }
      }
      return result;
    }
    v4 = v3 >> 1;
    v5 = &result[2 * (v3 >> 1)];
    v6 = a3 - 2;
    v7 = *(a3 - 2);
    v8 = *v5;
    v9 = *result;
    if (*v5 <= *result)
    {
      if (v7 <= v8)
      {
        v11 = 0;
        v12 = *result;
        v13 = *v5;
        if (*result <= *v5)
          goto LABEL_27;
        goto LABEL_9;
      }
      *v5 = v7;
      *(a3 - 2) = v8;
      v24 = &result[2 * v4];
      v26 = *((_DWORD *)v24 + 1);
      v25 = v24 + 1;
      *v25 = *(a3 - 1);
      *((_DWORD *)a3 - 1) = v26;
      v27 = *result;
      if (*v5 > *result)
      {
        *result = *v5;
        *v5 = v27;
        v28 = *((_DWORD *)result + 1);
        result[1] = *v25;
        *(_DWORD *)v25 = v28;
        v11 = 2;
        v12 = *result;
        v13 = *v5;
        if (*result <= *v5)
          goto LABEL_27;
        goto LABEL_9;
      }
LABEL_49:
      v11 = 1;
      v12 = *result;
      v13 = *v5;
      if (*result <= *v5)
        goto LABEL_27;
LABEL_9:
      v14 = a3 - 2;
      v15 = result + 2;
      if (result + 2 >= a3 - 2)
      {
LABEL_31:
        v20 = v15;
      }
      else
      {
LABEL_10:
        v16 = v15;
        while (1)
        {
          v17 = *v5;
          do
          {
            v18 = *v16;
            v16 += 2;
            v19 = v18;
          }
          while (v18 > v17);
          v20 = v16 - 2;
          do
          {
            v21 = *(v14 - 2);
            v14 -= 2;
            v22 = v21;
          }
          while (v21 <= v17);
          if (v20 >= v14)
            break;
          *(v16 - 2) = v22;
          *v14 = v19;
          v23 = *((_DWORD *)v16 - 1);
          *(v16 - 1) = v14[1];
          *((_DWORD *)v14 + 1) = v23;
          ++v11;
          if (v20 == v5)
            v5 = v14;
        }
      }
      if (v20 != v5)
      {
        v32 = *v20;
        if (*v5 > *v20)
        {
          *v20 = *v5;
          *v5 = v32;
          v33 = *((_DWORD *)v20 + 1);
          v20[1] = v5[1];
          *((_DWORD *)v5 + 1) = v33;
          ++v11;
        }
      }
      if (v20 == a2)
        return result;
      if (!v11)
      {
        if (v20 <= a2)
        {
          v38 = v20 + 2;
          while (v38 != a3)
          {
            v39 = *v38;
            v40 = *(v38 - 2);
            v38 += 2;
            if (v39 > v40)
              goto LABEL_37;
          }
        }
        else
        {
          while (v15 != v20)
          {
            v34 = *v15;
            v35 = *(v15 - 2);
            v15 += 2;
            if (v34 > v35)
              goto LABEL_37;
          }
        }
        return result;
      }
LABEL_37:
      if (v20 <= a2)
        result = v20 + 2;
      else
        a3 = v20;
    }
    else
    {
      if (v7 <= v8)
      {
        *result = v8;
        *v5 = v9;
        v29 = *((_DWORD *)result + 1);
        v30 = &result[2 * v4 + 1];
        result[1] = *v30;
        *(_DWORD *)v30 = v29;
        if (*v6 > v9)
        {
          *v5 = *v6;
          *(a3 - 2) = v9;
          *v30 = *(a3 - 1);
          *((_DWORD *)a3 - 1) = v29;
          v11 = 2;
          v12 = *result;
          v13 = *v5;
          if (*result <= *v5)
            goto LABEL_27;
          goto LABEL_9;
        }
        goto LABEL_49;
      }
      *result = v7;
      *(a3 - 2) = v9;
      v10 = *((_DWORD *)result + 1);
      result[1] = *(a3 - 1);
      *((_DWORD *)a3 - 1) = v10;
      v11 = 1;
      v12 = *result;
      v13 = *v5;
      if (*result > *v5)
        goto LABEL_9;
LABEL_27:
      v14 = a3 - 2;
      while (1)
      {
        v14 -= 2;
        if (v14 == result)
          break;
        if (*v14 > v13)
        {
          *result = *v14;
          *v14 = v12;
          v31 = *((_DWORD *)result + 1);
          result[1] = v14[1];
          *((_DWORD *)v14 + 1) = v31;
          ++v11;
          v15 = result + 2;
          if (result + 2 < v14)
            goto LABEL_10;
          goto LABEL_31;
        }
      }
      v36 = result + 2;
      if (v12 <= *v6)
      {
        if (v36 == v6)
          return result;
        while (1)
        {
          v37 = *v36;
          if (v12 > *v36)
            break;
          v36 += 2;
          if (v36 == v6)
            return result;
        }
        *v36 = *v6;
        *(a3 - 2) = v37;
        v41 = *((_DWORD *)v36 + 1);
        v36[1] = *(a3 - 1);
        *((_DWORD *)a3 - 1) = v41;
        v36 += 2;
      }
      if (v36 == v6)
        return result;
      while (1)
      {
        v43 = *result;
        do
        {
          v44 = *v36;
          v36 += 2;
          v45 = v44;
        }
        while (v43 <= v44);
        v46 = v36 - 2;
        do
        {
          v47 = *(v6 - 2);
          v6 -= 2;
          v48 = v47;
        }
        while (v43 > v47);
        if (v46 >= v6)
          break;
        *(v36 - 2) = v48;
        *v6 = v45;
        v42 = *((_DWORD *)v36 - 1);
        *(v36 - 1) = v6[1];
        *((_DWORD *)v6 + 1) = v42;
      }
      result = v36 - 2;
      if (v46 > a2)
        return result;
    }
  }
  return result;
}

void sub_20FD6CB04(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, float32x4_t a5, __n128 a6, __n128 a7, __n128 a8, __n128 a9, __n128 a10, double a11, double a12)
{
  uint64_t v12;
  _QWORD *v14;
  void **v15;
  unint64_t v16;
  float v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unsigned int v23;
  float v24;
  float v25;
  int v26;
  int v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  __int16 **v31;
  __int16 *v32;
  __int16 *v33;
  float v34;
  __int16 *v35;
  int v36;
  char *v37;
  int v38;
  int v39;
  int v40;
  int v41;
  int v42;
  BOOL v44;
  int v45;
  int v46;
  BOOL v47;
  int v48;
  int v49;
  int v50;
  char v51;
  int v54;
  int v55;
  float v56;
  float v57;
  unint64_t v58;
  char *v59;
  char *v60;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  char *v65;
  char *v66;
  __n128 *v67;
  int v68;
  int v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  char *v75;
  int v76;
  int v77;
  uint64_t v78;
  uint64_t v79;
  _QWORD *v80;
  __int16 *v81;
  __int16 *v82;
  float v83;
  __int16 *v84;
  int v85;
  __int16 *v86;
  char *v87;
  int v88;
  int v89;
  int v90;
  int v91;
  int v92;
  int v93;
  BOOL v95;
  int v96;
  int v97;
  BOOL v98;
  int v99;
  int v100;
  int v101;
  char v102;
  int v105;
  int v106;
  float v107;
  float v108;
  unint64_t v109;
  char *v110;
  unint64_t v111;
  unint64_t v112;
  unint64_t v113;
  unint64_t v114;
  char *v115;
  float *v116;
  __n128 *v117;
  unint64_t v118;
  uint64_t v119;
  uint64_t v120;
  unsigned int v121;
  __n128 *v122;
  unint64_t v123;
  _QWORD *v124;
  __int16 *v125;
  __int16 *v126;
  float v127;
  uint64_t v128;
  __int16 *v129;
  int v130;
  __int16 *v131;
  int v132;
  int v133;
  int v134;
  int v135;
  int v136;
  int v137;
  int v140;
  int v141;
  int v143;
  int v144;
  int v145;
  char v146;
  BOOL v147;
  int v149;
  int v150;
  float v151;
  float v152;
  unint64_t v153;
  char *v154;
  char *v155;
  unint64_t v156;
  unint64_t v157;
  unint64_t v158;
  unint64_t v159;
  char *v160;
  float *v161;
  __n128 *v162;
  char *v163;
  char *v164;
  float32x4_t v165;
  __n128 v166;
  __n128 v167;
  double v168;
  double v169;
  double v170;
  double v171;
  double v172;
  __n128 v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t *v176;
  unsigned int v177;
  uint64_t *v178;
  char **v180;
  uint64_t v181;
  uint64_t v183;
  int v184;
  int v185;
  int v186;
  uint64_t v187;
  int v188;
  int v189;
  uint64_t v190;
  char *v191;
  uint64_t v192;
  uint64_t v193;
  int v194;
  uint64_t v195;
  int v196;
  uint64_t v197;
  int v198;
  int v199;
  void **v200;
  uint64_t v201;
  uint64_t v202;
  int v203;
  uint64_t v204;
  uint64_t v205;
  int v206;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  unsigned int v211;
  unsigned int v212;
  uint64_t v213;
  uint64_t v214;
  int v215;

  v12 = a3;
  v14 = (_QWORD *)a1;
  v213 = a4;
  v15 = (void **)(a1 + 88);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a1 + 112);
  v180 = (char **)(a1 + 112);
  if (*(_BYTE *)a1)
  {
    sub_20FD81964(a1, a2, a3, a1 + 88, a1 + 112);
    sub_20FD80E0C(v15, 954437177 * ((*(_QWORD *)(v12 + 56) - *(_QWORD *)(v12 + 48)) >> 4));
    v14 = (_QWORD *)a1;
    goto LABEL_217;
  }
  v16 = 0x8E38E38E38E38E39 * ((uint64_t)(*(_QWORD *)(a3 + 56) - *(_QWORD *)(a3 + 48)) >> 4);
  if ((int)v16 >= 3)
  {
    v17 = *(float *)(a1 + 136);
    v189 = *(unsigned __int8 *)(a1 + 32);
    v185 = *(unsigned __int8 *)(a1 + 33);
    v181 = (v16 - 1);
    v18 = 1;
    v200 = (void **)(a1 + 88);
    v183 = a2;
    v206 = (int)*(float *)(a1 + 8);
    while (1)
    {
      v19 = *(_QWORD *)(v12 + 48);
      v20 = v19 + 144 * v18;
      v21 = *(_QWORD *)(v20 + 32);
      v22 = v18;
      v23 = llroundf(log2f((float)(*(_QWORD *)(v19 + 32) / v21)));
      v208 = v22;
      v211 = (int)v22 % *(_DWORD *)(v12 + 24);
      v24 = *(float *)(a2 + 4);
      a5.f32[0] = v24 * powf(*(float *)(a2 + 104), (float)(int)v211);
      v212 = v23;
      a6.n128_f32[0] = (float)(1 << v23);
      v25 = a5.f32[0] * a6.n128_f32[0];
      v26 = *(_DWORD *)(v20 + 48) - 2;
      v27 = v21 - 2;
      v205 = *(_QWORD *)(v20 + 120);
      v193 = v26;
      v199 = v21 - 2;
      if ((int)v21 - 2 > 30)
        break;
      v14 = (_QWORD *)a1;
      v28 = v22;
      v29 = v206;
      if (v27 >= 3 && v26 >= 3)
      {
        v30 = 2;
        do
        {
          v31 = (__int16 **)(v205 + 8 * v30);
          v32 = *(v31 - 1);
          v33 = *v31;
          v34 = (float)(int)v30++;
          v35 = *(__int16 **)(v205 + 8 * v30);
          v36 = 2;
          do
          {
            v38 = v33[2];
            if (v38 >= 0)
              v39 = v33[2];
            else
              v39 = -v38;
            if (v39 >= v29)
            {
              v40 = v32[1];
              v41 = v32[2];
              v42 = v32[3];
              v44 = v40 <= v38 || v41 <= v38 || v42 <= v38;
              if (v44
                || ((v45 = v33[1], v46 = v33[3], v45 > v38) ? (v47 = v46 <= v38) : (v47 = 1),
                    v47 || (v48 = v35[1], v48 <= v38) || (v49 = v35[2], v49 <= v38) || (v50 = v35[3], v50 <= v38)))
              {
                if (v40 >= v38 || v41 >= v38 || v42 >= v38)
                  goto LABEL_14;
                v45 = v33[1];
                if (v45 >= v38)
                  goto LABEL_14;
                v46 = v33[3];
                if (v46 >= v38)
                  goto LABEL_14;
                v48 = v35[1];
                if (v48 >= v38)
                  goto LABEL_14;
                v49 = v35[2];
                if (v49 >= v38)
                  goto LABEL_14;
                v50 = v35[3];
                if (v50 >= v38)
                  goto LABEL_14;
                v51 = 0;
              }
              else
              {
                v51 = 1;
              }
              v54 = v46 - 2 * v38 + v45;
              v55 = v41 - 2 * v38 + v49;
              a8.n128_f32[0] = (float)((float)v55 + (float)v54) * (float)((float)v55 + (float)v54);
              a7.n128_u32[0] = -1115684864;
              a6.n128_f32[0] = (float)((float)(v40 + v50 - (v42 + v48)) * (float)(v40 + v50 - (v42 + v48))) * -0.0625;
              a5.f32[0] = v17 * fabsf((float)((float)v55 * (float)v54) + a6.n128_f32[0]);
              if (a8.n128_f32[0] < a5.f32[0])
              {
                v56 = (float)v36;
                v57 = (float)v38;
                v59 = (char *)v14[12];
                v58 = v14[13];
                if ((unint64_t)v59 < v58)
                {
                  *(float *)v59 = v56;
                  *((float *)v59 + 1) = v34;
                  *((_DWORD *)v59 + 2) = v28;
                  *((float *)v59 + 3) = v25;
                  *((_QWORD *)v59 + 2) = 0;
                  *((_DWORD *)v59 + 6) = 0;
                  v59[28] = v51;
                  *((_DWORD *)v59 + 8) = v212;
                  *(_QWORD *)(v59 + 36) = v211;
                  v37 = v59 + 48;
                  *((float *)v59 + 11) = v57;
                }
                else
                {
                  v60 = (char *)*v15;
                  v61 = 0xAAAAAAAAAAAAAAABLL * ((v59 - (_BYTE *)*v15) >> 4);
                  v62 = v61 + 1;
                  if (v61 + 1 > 0x555555555555555)
                    goto LABEL_234;
                  v63 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v58 - (_QWORD)v60) >> 4);
                  if (2 * v63 > v62)
                    v62 = 2 * v63;
                  if (v63 >= 0x2AAAAAAAAAAAAAALL)
                    v64 = 0x555555555555555;
                  else
                    v64 = v62;
                  if (v64)
                  {
                    if (v64 > 0x555555555555555)
                      goto LABEL_235;
                    v65 = (char *)operator new(48 * v64);
                    v14 = (_QWORD *)a1;
                    v28 = v208;
                    v29 = v206;
                  }
                  else
                  {
                    v65 = 0;
                  }
                  v66 = &v65[48 * v61];
                  *(float *)v66 = v56;
                  *((float *)v66 + 1) = v34;
                  *((_DWORD *)v66 + 2) = v28;
                  *((float *)v66 + 3) = v25;
                  *((_QWORD *)v66 + 2) = 0;
                  *((_DWORD *)v66 + 6) = 0;
                  v66[28] = v51;
                  *((_DWORD *)v66 + 8) = v212;
                  *((_DWORD *)v66 + 9) = v211;
                  *((_DWORD *)v66 + 10) = 0;
                  *((float *)v66 + 11) = v57;
                  v67 = (__n128 *)v66;
                  if (v59 == v60)
                  {
                    v15 = v200;
                    v37 = v66 + 48;
                    v14[11] = v66;
                    v14[12] = v66 + 48;
                    v14[13] = &v65[48 * v64];
                    if (v59)
                      goto LABEL_64;
                  }
                  else
                  {
                    v15 = v200;
                    do
                    {
                      a5 = *((float32x4_t *)v59 - 3);
                      a6 = *((__n128 *)v59 - 2);
                      a7 = *((__n128 *)v59 - 1);
                      v67[-2] = a6;
                      v67[-1] = a7;
                      v67[-3] = (__n128)a5;
                      v67 -= 3;
                      v59 -= 48;
                    }
                    while (v59 != v60);
                    v59 = (char *)*v200;
                    v37 = v66 + 48;
                    v14[11] = v67;
                    v14[12] = v66 + 48;
                    v14[13] = &v65[48 * v64];
                    if (v59)
                    {
LABEL_64:
                      operator delete(v59);
                      v14 = (_QWORD *)a1;
                      v28 = v208;
                      v29 = v206;
                    }
                  }
                  v27 = v199;
                }
                v14[12] = v37;
              }
            }
LABEL_14:
            ++v35;
            ++v33;
            ++v32;
            ++v36;
          }
          while (v36 != v27);
        }
        while (v30 != v193);
      }
LABEL_5:
      v18 = v28 + 1;
      v12 = a3;
      a2 = v183;
      if (v18 == v181)
        goto LABEL_217;
    }
    v14 = (_QWORD *)a1;
    v28 = v22;
    v68 = v206;
    if (v26 < 3)
      goto LABEL_5;
    v188 = v21 + 27;
    if (((int)v21 + 27) / 30 <= 2)
      v69 = 2;
    else
      v69 = ((int)v21 + 27) / 30;
    v194 = v69;
    v184 = 30 * v69 - 28;
    if (v189)
      v70 = 30;
    else
      v70 = (*(_DWORD *)(v20 + 48) - 2);
    v187 = v70;
    v71 = 2;
    while (1)
    {
      if ((int)v71 + (int)v187 < v26)
        v26 = v71 + v187;
      v75 = (char *)v14[12];
      v190 = v14[11];
      v191 = v75;
      v192 = v71 + v187;
      if (v188 < 60)
      {
        LODWORD(v78) = 2;
        if (v27 > 2)
          goto LABEL_157;
        goto LABEL_76;
      }
      if (v26 <= (int)v71)
      {
        LODWORD(v78) = v184;
        if (v184 < v27)
          goto LABEL_157;
        goto LABEL_76;
      }
      v186 = v26;
      v201 = v26;
      v76 = 1;
      v77 = 32;
      v78 = 2;
      v195 = v71;
      while (2)
      {
        v196 = v76;
        v197 = v78 + 30;
        v202 = v78 - 1;
        v203 = v78;
        v79 = v71;
        while (2)
        {
          v80 = (_QWORD *)(v205 + 8 * v79);
          v81 = (__int16 *)(*(v80 - 1) + 2 * v202);
          v82 = (__int16 *)(*v80 + 2 * v202);
          v83 = (float)(int)v79++;
          v84 = (__int16 *)(*(_QWORD *)(v205 + 8 * v79) + 2 * v202);
          v85 = v203;
          v86 = v82;
          do
          {
            v89 = v86[1];
            ++v86;
            v88 = v89;
            if (v89 >= 0)
              v90 = v88;
            else
              v90 = -v88;
            if (v90 >= v68)
            {
              v91 = *v81;
              v92 = v81[1];
              v93 = v81[2];
              v95 = v91 <= v88 || v92 <= v88 || v93 <= v88;
              if (v95
                || ((v96 = *v82, v97 = v82[2], v96 > v88) ? (v98 = v97 <= v88) : (v98 = 1),
                    v98 || (v99 = *v84, v99 <= v88) || (v100 = v84[1], v100 <= v88) || (v101 = v84[2], v101 <= v88)))
              {
                if (v91 >= v88 || v92 >= v88 || v93 >= v88)
                  goto LABEL_93;
                v96 = *v82;
                if (v96 >= v88)
                  goto LABEL_93;
                v97 = v82[2];
                if (v97 >= v88)
                  goto LABEL_93;
                v99 = *v84;
                if (v99 >= v88)
                  goto LABEL_93;
                v100 = v84[1];
                if (v100 >= v88)
                  goto LABEL_93;
                v101 = v84[2];
                if (v101 >= v88)
                  goto LABEL_93;
                v102 = 0;
              }
              else
              {
                v102 = 1;
              }
              v105 = v97 - 2 * v88 + v96;
              v106 = v92 - 2 * v88 + v100;
              a8.n128_f32[0] = (float)((float)v106 + (float)v105) * (float)((float)v106 + (float)v105);
              a7.n128_u32[0] = -1115684864;
              a6.n128_f32[0] = (float)((float)(v91 + v101 - (v93 + v99)) * (float)(v91 + v101 - (v93 + v99))) * -0.0625;
              a5.f32[0] = v17 * fabsf((float)((float)v106 * (float)v105) + a6.n128_f32[0]);
              if (a8.n128_f32[0] < a5.f32[0])
              {
                v215 = 0;
                v214 = 0;
                v107 = (float)v85;
                v108 = (float)v88;
                v109 = v14[13];
                if ((unint64_t)v75 < v109)
                {
                  *(float *)v75 = v107;
                  *((float *)v75 + 1) = v83;
                  *((_DWORD *)v75 + 2) = v28;
                  *((float *)v75 + 3) = v25;
                  *((_QWORD *)v75 + 2) = v214;
                  *((_DWORD *)v75 + 6) = v215;
                  v75[28] = v102;
                  *((_DWORD *)v75 + 8) = v212;
                  *(_QWORD *)(v75 + 36) = v211;
                  v87 = v75 + 48;
                  *((float *)v75 + 11) = v108;
                }
                else
                {
                  v110 = (char *)*v15;
                  v111 = 0xAAAAAAAAAAAAAAABLL * ((v75 - (_BYTE *)*v15) >> 4);
                  v112 = v111 + 1;
                  if (v111 + 1 > 0x555555555555555)
LABEL_234:
                    sub_20E867F44();
                  v209 = v79;
                  v113 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v109 - (_QWORD)v110) >> 4);
                  if (2 * v113 > v112)
                    v112 = 2 * v113;
                  if (v113 >= 0x2AAAAAAAAAAAAAALL)
                    v114 = 0x555555555555555;
                  else
                    v114 = v112;
                  if (v114)
                  {
                    if (v114 > 0x555555555555555)
LABEL_235:
                      sub_20E877A38();
                    v115 = (char *)operator new(48 * v114);
                    v14 = (_QWORD *)a1;
                    v28 = v208;
                    v68 = v206;
                  }
                  else
                  {
                    v115 = 0;
                  }
                  v116 = (float *)&v115[48 * v111];
                  *v116 = v107;
                  v116[1] = v83;
                  *((_DWORD *)v116 + 2) = v28;
                  v116[3] = v25;
                  *((_QWORD *)v116 + 2) = 0;
                  v116[6] = 0.0;
                  *((_BYTE *)v116 + 28) = v102;
                  *((_DWORD *)v116 + 8) = v212;
                  *((_DWORD *)v116 + 9) = v211;
                  v116[10] = 0.0;
                  v116[11] = v108;
                  v117 = (__n128 *)v116;
                  if (v75 == v110)
                  {
                    v15 = v200;
                    v87 = (char *)(v116 + 12);
                    v14[11] = v116;
                    v14[12] = v116 + 12;
                    v14[13] = &v115[48 * v114];
                    if (v75)
                      goto LABEL_143;
                  }
                  else
                  {
                    v15 = v200;
                    do
                    {
                      a5 = *((float32x4_t *)v75 - 3);
                      a6 = *((__n128 *)v75 - 2);
                      a7 = *((__n128 *)v75 - 1);
                      v117[-2] = a6;
                      v117[-1] = a7;
                      v117[-3] = (__n128)a5;
                      v117 -= 3;
                      v75 -= 48;
                    }
                    while (v75 != v110);
                    v75 = (char *)*v200;
                    v87 = (char *)(v116 + 12);
                    v14[11] = v117;
                    v14[12] = v116 + 12;
                    v14[13] = &v115[48 * v114];
                    if (v75)
                    {
LABEL_143:
                      operator delete(v75);
                      v14 = (_QWORD *)a1;
                      v28 = v208;
                      v68 = v206;
                    }
                  }
                  v79 = v209;
                }
                v14[12] = v87;
                v75 = v87;
              }
            }
LABEL_93:
            ++v85;
            ++v81;
            ++v84;
            v82 = v86;
          }
          while (v85 != v77);
          if (v79 < v201)
            continue;
          break;
        }
        v76 = v196 + 1;
        v77 += 30;
        v71 = v195;
        v78 = v197;
        if (v196 + 1 != v194)
          continue;
        break;
      }
      v27 = v199;
      v26 = v186;
      if ((int)v197 < v199)
      {
LABEL_157:
        if (v26 > (int)v71)
        {
          v210 = (int)v78 - 1;
          v204 = v26;
          v198 = v78;
          do
          {
            v124 = (_QWORD *)(v205 + 8 * v71);
            v125 = (__int16 *)(*(v124 - 1) + 2 * v210);
            v126 = (__int16 *)(*v124 + 2 * v210);
            v127 = (float)(int)v71;
            v128 = v71 + 1;
            v129 = (__int16 *)(*(_QWORD *)(v205 + 8 * (v71 + 1)) + 2 * v210);
            v130 = v78;
            v131 = v126;
            do
            {
              v133 = v131[1];
              ++v131;
              v132 = v133;
              if (v133 >= 0)
                v134 = v132;
              else
                v134 = -v132;
              if (v134 >= v68)
              {
                v135 = *v125;
                v136 = v125[1];
                v137 = v125[2];
                if (v135 > v132 && v136 > v132 && v137 > v132)
                {
                  v140 = *v126;
                  v141 = v126[2];
                  if (v140 > v132 && v141 > v132)
                  {
                    v143 = *v129;
                    if (v143 > v132)
                    {
                      v144 = v129[1];
                      if (v144 > v132)
                      {
                        v145 = v129[2];
                        if (v145 > v132)
                        {
                          v146 = 1;
                          goto LABEL_196;
                        }
                      }
                    }
                  }
                }
                v147 = v135 < v132 && v136 < v132;
                if (v147 && v137 < v132)
                {
                  v140 = *v126;
                  if (v140 < v132)
                  {
                    v141 = v126[2];
                    if (v141 < v132)
                    {
                      v143 = *v129;
                      if (v143 < v132)
                      {
                        v144 = v129[1];
                        if (v144 < v132)
                        {
                          v145 = v129[2];
                          if (v145 < v132)
                          {
                            v146 = 0;
LABEL_196:
                            v149 = v141 - 2 * v132 + v140;
                            v150 = v136 - 2 * v132 + v144;
                            a8.n128_f32[0] = (float)((float)v150 + (float)v149) * (float)((float)v150 + (float)v149);
                            a7.n128_u32[0] = -1115684864;
                            a6.n128_f32[0] = (float)((float)(v135 + v145 - (v137 + v143))
                                                   * (float)(v135 + v145 - (v137 + v143)))
                                           * -0.0625;
                            a5.f32[0] = v17 * fabsf((float)((float)v150 * (float)v149) + a6.n128_f32[0]);
                            if (a8.n128_f32[0] >= a5.f32[0])
                            {
                              v27 = v199;
                              goto LABEL_162;
                            }
                            v215 = 0;
                            v214 = 0;
                            v151 = (float)v130;
                            v152 = (float)v132;
                            v153 = v14[13];
                            if ((unint64_t)v75 >= v153)
                            {
                              v155 = (char *)*v15;
                              v156 = 0xAAAAAAAAAAAAAAABLL * ((v75 - (_BYTE *)*v15) >> 4);
                              v157 = v156 + 1;
                              if (v156 + 1 > 0x555555555555555)
                                goto LABEL_234;
                              v158 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v153 - (_QWORD)v155) >> 4);
                              if (2 * v158 > v157)
                                v157 = 2 * v158;
                              if (v158 >= 0x2AAAAAAAAAAAAAALL)
                                v159 = 0x555555555555555;
                              else
                                v159 = v157;
                              if (v159)
                              {
                                if (v159 > 0x555555555555555)
                                  goto LABEL_235;
                                v160 = (char *)operator new(48 * v159);
                                v14 = (_QWORD *)a1;
                                v28 = v208;
                                v68 = v206;
                              }
                              else
                              {
                                v160 = 0;
                              }
                              v161 = (float *)&v160[48 * v156];
                              *v161 = v151;
                              v161[1] = v127;
                              *((_DWORD *)v161 + 2) = v28;
                              v161[3] = v25;
                              *((_QWORD *)v161 + 2) = 0;
                              v161[6] = 0.0;
                              *((_BYTE *)v161 + 28) = v146;
                              *((_DWORD *)v161 + 8) = v212;
                              *((_DWORD *)v161 + 9) = v211;
                              v161[10] = 0.0;
                              v161[11] = v152;
                              v162 = (__n128 *)v161;
                              if (v75 == v155)
                              {
                                v15 = v200;
                                v27 = v199;
                                v164 = &v160[48 * v159];
                                v154 = (char *)(v161 + 12);
                                v14[11] = v161;
                                v14[12] = v161 + 12;
                                v14[13] = v164;
                                if (!v75)
                                  goto LABEL_214;
                              }
                              else
                              {
                                v15 = v200;
                                v27 = v199;
                                do
                                {
                                  a5 = *((float32x4_t *)v75 - 3);
                                  a6 = *((__n128 *)v75 - 2);
                                  a7 = *((__n128 *)v75 - 1);
                                  v162[-2] = a6;
                                  v162[-1] = a7;
                                  v162[-3] = (__n128)a5;
                                  v162 -= 3;
                                  v75 -= 48;
                                }
                                while (v75 != v155);
                                v75 = (char *)*v200;
                                v163 = &v160[48 * v159];
                                v154 = (char *)(v161 + 12);
                                v14[11] = v162;
                                v14[12] = v161 + 12;
                                v14[13] = v163;
                                if (!v75)
                                  goto LABEL_214;
                              }
                              operator delete(v75);
                              v14 = (_QWORD *)a1;
                              v28 = v208;
                              v68 = v206;
                            }
                            else
                            {
                              *(float *)v75 = v151;
                              *((float *)v75 + 1) = v127;
                              *((_DWORD *)v75 + 2) = v28;
                              *((float *)v75 + 3) = v25;
                              *((_QWORD *)v75 + 2) = v214;
                              *((_DWORD *)v75 + 6) = v215;
                              v75[28] = v146;
                              *((_DWORD *)v75 + 8) = v212;
                              *(_QWORD *)(v75 + 36) = v211;
                              v154 = v75 + 48;
                              *((float *)v75 + 11) = v152;
                              v27 = v199;
                            }
LABEL_214:
                            v14[12] = v154;
                            v75 = v154;
                          }
                        }
                      }
                    }
                  }
                }
              }
LABEL_162:
              ++v130;
              ++v125;
              ++v129;
              v126 = v131;
            }
            while (v130 != v27);
            v71 = v128;
            LODWORD(v78) = v198;
          }
          while (v128 < v204);
        }
      }
LABEL_76:
      if (v189)
      {
        v72 = (uint64_t)*v15 + 16 * ((uint64_t)&v191[-v190] >> 4);
        v73 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v75[-v72] >> 4));
        if (v75 == (char *)v72)
          v74 = 0;
        else
          v74 = v73;
        sub_20FD6FB04(v72, (float *)v75, v74, 1);
        v14 = (_QWORD *)a1;
        v28 = v208;
        v68 = v206;
      }
      else if (v185)
      {
        v118 = 0xAAAAAAAAAAAAAAABLL * ((v75 - (_BYTE *)*v15) >> 4) - 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v191[-v190] >> 4);
        if (v118)
        {
          v119 = 0;
          v120 = (uint64_t)*v15 + 16 * ((uint64_t)&v191[-v190] >> 4);
          v121 = 42;
          v122 = (__n128 *)v120;
          do
          {
            v121 = 214013 * v121 + 2531011;
            v123 = v120 + 48 * ((HIWORD(v121) & 0x7FFF) % v118 + v119);
            a5 = *(float32x4_t *)v123;
            a6 = *(__n128 *)(v123 + 16);
            a7 = *(__n128 *)(v123 + 32);
            a9 = v122[1];
            a8 = v122[2];
            a10 = *v122;
            *(__n128 *)v123 = *v122;
            *(__n128 *)(v123 + 16) = a9;
            *(__n128 *)(v123 + 32) = a8;
            v122[1] = a6;
            v122[2] = a7;
            *v122 = (__n128)a5;
            v122 += 3;
            ++v119;
            --v118;
          }
          while (v118);
        }
      }
      v26 = v193;
      v71 = v192;
      if ((int)v193 <= (int)v192)
        goto LABEL_5;
    }
  }
LABEL_217:
  sub_20FD6D9AC((uint64_t)v14, a2, (_QWORD *)v12, (char **)v15, a5, a6, a7, a8.n128_f64[0], a9.n128_f64[0], a10.n128_f64[0], a11, a12);
  sub_20FD6D9AC(a1, a2, (_QWORD *)v12, v180, v165, v166, v167, v168, v169, v170, v171, v172);
  sub_20FD81208(v180, *(_QWORD *)(a1 + 64));
  v174 = a1;
  if (!*(_BYTE *)(a1 + 4))
  {
    sub_20FD6AAB4(v15, (uint64_t *)(a1 + 144), *(_DWORD *)(a1 + 36), *(_DWORD *)(a1 + 40), *(_DWORD *)(a1 + 44), *(_DWORD *)(a1 + 48), *(_QWORD *)(a2 + 8), *(_QWORD *)(a2 + 16), 1u);
    return;
  }
  v175 = *(_QWORD *)(a1 + 200);
  if (!v175)
  {
    v178 = (uint64_t *)(a1 + 200);
LABEL_232:
    v176 = sub_20FD6B2FC((uint64_t **)(a1 + 192), v178, (unsigned int *)&v213, &v213, (uint64_t *)(a1 + 168));
    v174 = a1;
    goto LABEL_233;
  }
  v176 = (uint64_t *)(a1 + 200);
  do
  {
    while (1)
    {
      v177 = *(_DWORD *)(v175 + 32);
      if (v177 >= a4 && (v177 != (_DWORD)a4 || *(_DWORD *)(v175 + 36) >= HIDWORD(a4)))
        break;
      v175 = *(_QWORD *)(v175 + 8);
      if (!v175)
        goto LABEL_225;
    }
    v176 = (uint64_t *)v175;
    v175 = *(_QWORD *)v175;
  }
  while (v175);
LABEL_225:
  v178 = (uint64_t *)(a1 + 200);
  if (v176 == (uint64_t *)(a1 + 200))
    goto LABEL_232;
  if (*((_DWORD *)v176 + 8) != (_DWORD)a4)
  {
    v178 = v176;
    goto LABEL_232;
  }
  v178 = v176;
  if (*((_DWORD *)v176 + 9) != HIDWORD(a4))
    goto LABEL_232;
LABEL_233:
  v173.n128_u32[0] = *(_DWORD *)(v174 + 216);
  sub_20FD69EE4((uint64_t *)v15, v176 + 5, *(_DWORD *)(v174 + 36), *(_DWORD *)(v174 + 40), *(_DWORD *)(v174 + 44), *(int *)(v174 + 48), *(_QWORD *)(a2 + 8), *(_QWORD *)(a2 + 16), v173, *(float *)(v174 + 8), *(float *)(v174 + 20), *(float *)(v174 + 24), *(float *)(v174 + 28), 1u, 0);
}

void sub_20FD6D9AC(uint64_t a1, uint64_t a2, _QWORD *a3, char **a4, float32x4_t a5, __n128 a6, __n128 a7, double a8, double a9, double a10, double a11, double a12)
{
  int16x4_t v12;
  int16x4_t v13;
  int16x4_t v14;
  int16x4_t v15;
  int16x4_t v16;
  int16x4_t v17;
  int16x4_t v18;
  int16x4_t v19;
  int16x4_t v20;
  int16x4_t v21;
  int16x4_t v22;
  char *v25;
  uint64_t v26;
  unint64_t v27;
  float v28;
  float v29;
  unint64_t v30;
  char *v31;
  uint64_t v32;
  int v33;
  int v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  unint64_t v39;
  unint64_t v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  int v56;
  BOOL v57;
  int v58;
  int v60;
  int v61;
  BOOL v62;
  int v64;
  BOOL v65;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unsigned int v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  float v77;
  float v78;
  float v79;
  int16x4_t v80;
  float v81;
  float v82;
  float v83;
  float v84;
  float v85;
  float v86;
  int16x4_t v87;
  int16x4_t v88;
  unsigned int v89;
  float v90;
  float v91;
  int16x4_t v92;
  float v93;
  uint64_t v94;
  float v95;
  float v96;
  float v97;
  float v98;
  uint64_t v99;
  unsigned int v100;
  uint64_t v101;
  uint64_t v102;
  float v103;
  float v104;
  int16x4_t v105;
  float v106;
  int16x4_t v107;
  int16x4_t v108;
  int16x4_t v109;
  float v110;
  float v111;
  uint64_t v112;
  uint64_t v113;
  int v114;
  int v115;
  uint64_t v116;
  uint64_t v117;
  int v118;
  uint64_t v119;
  BOOL v120;
  int v122;
  int v123;
  BOOL v124;
  int v126;
  BOOL v127;
  uint64_t v129;
  float v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  unsigned int v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  float v141;
  float v142;
  float v143;
  int16x4_t v144;
  float v145;
  float v146;
  float v147;
  uint64_t v148;
  uint64_t v149;
  float v150;
  float v151;
  float v152;
  int16x4_t v153;
  int16x4_t v154;
  unsigned int v155;
  float v156;
  int16x4_t v157;
  float v158;
  uint64_t v159;
  float v160;
  float v161;
  uint64_t v162;
  unsigned int v163;
  uint64_t v164;
  uint64_t v165;
  float v166;
  float v167;
  int16x4_t v168;
  float v169;
  int16x4_t v170;
  int16x4_t v171;
  float v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  int16x4_t v177;
  float v178;
  uint64_t v179;
  int16x4_t v180;
  int16x4_t v181;
  uint64_t v182;
  int16x4_t v183;
  int16x4_t v184;
  int16x4_t v185;
  uint64_t v186;
  float32x4_t v187;
  float v188;
  int16x4_t v189;
  int16x4_t v190;
  uint64_t v191;
  double v192;
  int16x4_t v193;
  uint64_t v194;
  int16x4_t v195;
  double v196;
  int16x4_t v197;
  int16x4_t v198;
  int16x4_t v199;
  int16x4_t v200;
  int16x4_t v201;
  int16x4_t v202;
  uint64_t v203;
  uint64_t v204;
  int16x4_t v205;
  uint64_t v206;
  int16x4_t v207;
  int16x4_t v208;
  uint64_t v209;
  int16x4_t v210;
  uint64_t v211;
  int16x4_t v212;
  float v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  int v221;
  int v222;
  uint64_t v223;
  int v224;
  BOOL v227;
  BOOL v229;
  float v231;
  uint64_t v232;
  unsigned int v233;
  uint64_t v234;
  unsigned int v235;
  uint64_t v236;
  uint64_t v237;
  float v238;
  float v239;
  float v240;
  uint64_t v241;
  int16x4_t v242;
  float v243;
  float v244;
  float v245;
  float v246;
  float v247;
  int v248;
  int v249;
  uint64_t v250;
  uint64_t v251;
  float v252;
  int16x4_t v253;
  float v254;
  float v255;
  float v256;
  int16x4_t v257;
  float v258;
  float v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  float v263;
  uint64_t v264;
  int16x4_t v265;
  float v266;
  float v267;
  float v268;
  uint64_t v269;
  int16x4_t v270;
  float v271;
  uint64_t v272;
  float v273;
  float v274;
  int16x4_t v275;
  float v276;
  float v277;
  uint64_t v278;
  unsigned int v279;
  uint64_t v280;
  uint64_t v281;
  float v282;
  int16x4_t v283;
  float v284;
  float v285;
  float v286;
  float v287;
  float v288;
  float v289;
  int16x4_t v290;
  float v291;
  float v292;
  float v293;
  float v294;
  float v295;
  float v296;
  float v297;
  float v298;
  float v299;
  float v300;
  float v301;
  float v302;
  float v303;
  int v304;
  BOOL v307;
  BOOL v309;
  float v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t v318;
  uint64_t v319;
  float v320;
  float v321;
  float v322;
  float v323;
  int16x4_t v324;
  float v325;
  float v326;
  float v327;
  float v328;
  float v329;
  uint64_t v330;
  uint64_t v331;
  float v332;
  int16x4_t v333;
  float v334;
  float v335;
  float v336;
  float v337;
  uint64_t v338;
  uint64_t v339;
  float v340;
  uint64_t v341;
  int16x4_t v342;
  float v343;
  float v344;
  float v345;
  uint64_t v346;
  uint64_t v347;
  uint64_t v348;
  float v349;
  float v350;
  uint64_t v351;
  int16x4_t v352;
  float v353;
  uint64_t v354;
  float v355;
  float v356;
  uint64_t v357;
  int16x4_t v358;
  float v359;
  uint64_t v360;
  float v361;
  float v362;
  uint64_t v363;
  int16x4_t v364;
  float v365;
  uint64_t v366;
  float v367;
  float v368;
  float v369;
  uint64_t v370;
  uint64_t v371;
  uint64_t v372;
  float v373;
  float v374;
  int16x4_t v375;
  float v376;
  float v377;
  float v378;
  float v379;
  float v380;
  int16x4_t v381;
  float v382;
  float v383;
  int16x4_t v384;
  float v385;
  int16x4_t v386;
  float v387;
  float v388;
  float v389;
  float v390;
  float v391;
  float v392;
  float v393;
  float v394;
  float v395;
  uint64_t v396;
  uint64_t v397;
  int16x4_t v398;
  float v399;
  int16x4_t v400;
  float v401;
  int16x4_t v402;
  float v403;
  uint64_t v404;
  int16x4_t v405;
  float v406;
  float v407;
  uint64_t v408;
  int16x4_t v409;
  int16x4_t v410;
  float v411;
  double v412;
  float v413;
  float v414;
  float v415;
  uint64_t v416;
  unsigned int v417;
  uint64_t v418;
  uint64_t v419;
  float v420;
  float v421;
  uint64_t v422;
  int16x4_t v423;
  float v424;
  uint64_t v425;
  int16x4_t v426;
  float v427;
  int16x4_t v428;
  float v429;
  int16x4_t v430;
  float v431;
  float v432;
  unsigned int v433;
  float v434;
  unsigned int v435;
  float v436;
  uint64_t v437;
  int16x4_t v438;
  uint64_t v439;
  int16x4_t v440;
  float v441;
  float v442;
  float v443;
  float v444;
  uint64_t v445;
  float v446;
  int v447;
  uint64_t v448;
  float v449;
  int16x4_t v450;
  float v451;
  float v452;
  float v453;
  uint64_t v454;
  uint64_t v455;
  uint64_t v456;
  float v457;
  float v458;
  int16x4_t v459;
  float v460;
  int16x4_t v461;
  float v462;
  int16x4_t v463;
  uint64_t v464;
  uint64_t v465;
  uint64_t v466;
  float v467;
  float v468;
  float v469;
  float v470;
  float v471;
  int16x4_t v472;
  float v473;
  float v474;
  int16x4_t v475;
  float v476;
  __n128 *v477;
  unint64_t v478;
  float v479;
  float v480;
  float v481;
  float v482;
  __int32 v483;
  __int32 v484;
  float v485;
  float v486;
  float v487;
  float v488;
  float v489;
  float v490;
  float v491;
  __int32 v492;
  __int32 v493;
  uint64_t v494;
  uint64_t v495;
  int v496;
  int v497;
  int v498;
  int v499;
  uint64_t v500;
  uint64_t v501;
  int v502;
  int v503;
  float v504;
  uint64_t v505;
  float v506;
  uint64_t v507;
  uint64_t v508;
  uint64_t v509;
  uint64_t v510;
  uint64_t v511;
  uint64_t v512;
  uint64_t v513;
  uint64_t v514;
  uint64_t v515;
  float v516;
  float v517;
  float v518;
  float v519;
  float v520;
  float v521;
  uint64_t v522;
  float v523;
  float v524;
  uint64_t v525;
  uint64_t v526;
  uint64_t v527;
  uint64_t v528;
  uint64_t v529;
  uint64_t v530;
  uint64_t v531;
  unint64_t v532;
  uint64_t v533;
  uint64_t v534;
  uint64_t v535;
  int v536;
  uint64_t v537;
  uint64_t v538;
  uint64_t v539;
  uint64_t v540;
  uint64_t v541;
  uint64_t v542;
  uint64_t v543;
  int v544;
  uint64_t v545;
  int v546;
  float32x2_t *v547;
  float v550;
  float v551;
  float v552;
  float v553;
  unsigned __int32 v554;
  float v555;
  float v556;
  float v557;
  float v558;
  uint64_t v559;

  v559 = *MEMORY[0x24BDAC8D0];
  if (a3[3] != 2
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/FeatureDetection/src/DoGFeatureDetectorFixedPoint.cpp", 301, (uint64_t)"laplacian_pyr.num_scales_per_octave() == 2", 42, (uint64_t)"Only supporting binomial gaussian pyramid, with 2 scales per octave", 67, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v25 = a4[1];
  if (v25 == *a4)
  {
    v478 = 0;
    v30 = 0xAAAAAAAAAAAAAAABLL * ((v25 - *a4) >> 4);
    goto LABEL_151;
  }
  v530 = a1;
  v531 = a2;
  v26 = 0;
  v532 = 0;
  v27 = 0;
  v28 = -0.5;
  v18.i32[0] = 1.0;
  v29 = -2.0;
  v20.i32[0] = 0.25;
  v19.i32[0] = 2.0;
  v25 = *a4;
  do
  {
    v31 = &v25[v26];
    LODWORD(v32) = (int)(float)(*(float *)&v25[v26] + 0.5);
    v33 = (int)(float)(*(float *)&v25[v26 + 4] + 0.5);
    v34 = (int)*(float *)&v25[v26 + 44];
    v35 = *(_DWORD *)&v25[v26 + 8];
    v36 = v35 - 1;
    v37 = a3[6];
    v38 = v35 + 1;
    v39 = *(_QWORD *)(v37 + 144 * v36 + 32);
    if (v39 == *(_QWORD *)(v37 + 144 * v35 + 32) && (v40 = *(_QWORD *)(v37 + 144 * v38 + 32), v40 < v39))
    {
      v41 = (float)v33;
      v42 = (float)v33 * 0.5;
      v43 = v42 + v28;
      if ((float)(v42 + v28) >= *(float *)v18.i32)
      {
        v44 = (float)(int)v32;
        v45 = (float)(int)v32 * 0.5;
        v46 = v42 + 0.5;
        v47 = v45 + v28;
        if ((float)(v42 + 0.5) <= (float)(unint64_t)(*(_QWORD *)(v37 + 144 * v38 + 48) - 2)
          && v47 >= *(float *)v18.i32)
        {
          *(float *)v22.i32 = v45 + 0.5;
          if ((float)(v45 + 0.5) <= (float)(v40 - 2))
          {
            v49 = *(_QWORD *)(v37 + 144 * (int)v36 + 120);
            v50 = v33;
            v51 = v33 - 1;
            v52 = *(_QWORD *)(v49 + 8 * v51);
            v53 = v33 + 1;
            v543 = *(_QWORD *)(v49 + 8 * v53);
            v545 = *(_QWORD *)(v49 + 8 * v33);
            v54 = (int)v32 - 1;
            v32 = (int)v32;
            v55 = (int)v32 + 1;
            v56 = *(__int16 *)(v52 + 2 * v54);
            v546 = *(__int16 *)(v52 + 2 * (int)v32);
            v57 = v56 < v34 && *(__int16 *)(v52 + 2 * (int)v32) < v34;
            v58 = *(__int16 *)(v52 + 2 * v55);
            if (v57 && *(__int16 *)(v52 + 2 * v55) < v34)
            {
              v60 = *(__int16 *)(v545 + 2 * v54);
              v61 = *(__int16 *)(v545 + 2 * (int)v32);
              v62 = v60 < v34 && v61 < v34;
              if (v62 && *(__int16 *)(v545 + 2 * v55) < v34)
              {
                v541 = (int)v32;
                v64 = *(__int16 *)(v543 + 2 * (int)v32);
                v536 = v64;
                v65 = *(__int16 *)(v543 + 2 * v54) < v34 && v64 < v34;
                v32 = v541;
                if (v65 && *(__int16 *)(v543 + 2 * v55) < v34)
                {
                  *(float *)v17.i32 = (float)v34;
                  v67 = v37 + 144 * v38;
                  v68 = *(_QWORD *)(v67 + 88);
                  v69 = v47;
                  v70 = v43;
                  v71 = *(_QWORD *)(v67 + 40);
                  v72 = (v69 + 1);
                  v73 = v70 + 1;
                  v74 = v71 * v70;
                  v75 = v68 + 2 * v71 * v70;
                  v76 = v75 + 2 * v71;
                  a6.n128_f32[0] = (float)v72 - v47;
                  v77 = (float)v73 - v43;
                  v78 = v47 - (float)v47;
                  v79 = v43 - (float)v43;
                  *(float *)&a11 = a6.n128_f32[0] * v79;
                  LOWORD(a12) = *(_WORD *)(v75 + 2 * v69);
                  v80 = (int16x4_t)vmovl_s16(*(int16x4_t *)&a12).u64[0];
                  *(float *)v80.i32 = (float)v80.i32[0];
                  v81 = (float)(a6.n128_f32[0] * v77) * *(float *)v80.i32;
                  v538 = v54;
                  v80.i16[0] = *(_WORD *)(v75 + 2 * v72);
                  *(_QWORD *)&a12 = vmovl_s16(v80).u64[0];
                  *(float *)&a12 = (float)SLODWORD(a12);
                  v82 = (float)(v78 * v77) * *(float *)&a12;
                  LOWORD(a12) = *(_WORD *)(v76 + 2 * v69);
                  LOWORD(a11) = *(_WORD *)(v76 + 2 * v72);
                  v32 = v541;
                  v83 = (float)(v81 + v82)
                      + (float)((float)(a6.n128_f32[0] * v79) * (float)vmovl_s16(*(int16x4_t *)&a12).i32[0]);
                  *(_QWORD *)&a10 = vmovl_s16(*(int16x4_t *)&a11).u64[0];
                  *(float *)&a10 = (float)(v78 * v79) * (float)SLODWORD(a10);
                  if ((float)(v83 + *(float *)&a10) < (float)v34)
                  {
                    *(float *)v13.i32 = (float)(v45 + 1) - v45;
                    v84 = *(float *)v13.i32 * v77;
                    *(float *)&a9 = (float)v45;
                    v85 = v45 - *(float *)&a9;
                    v86 = (float)(v45 - *(float *)&a9) * v77;
                    *(float *)&a12 = *(float *)v13.i32 * v79;
                    v528 = v45;
                    LOWORD(a9) = *(_WORD *)(v75 + 2 * v528);
                    *(_QWORD *)&a9 = vmovl_s16(*(int16x4_t *)&a9).u64[0];
                    v533 = v45 + 1;
                    LOWORD(a10) = *(_WORD *)(v75 + 2 * v533);
                    v87 = (int16x4_t)vmovl_s16(*(int16x4_t *)&a10).u64[0];
                    *(float *)v87.i32 = v86 * (float)v87.i32[0];
                    *(float *)&a9 = (float)((float)(*(float *)v13.i32 * v77) * (float)SLODWORD(a9)) + *(float *)v87.i32;
                    v87.i16[0] = *(_WORD *)(v76 + 2 * v528);
                    v88 = (int16x4_t)vmovl_s16(v87).u64[0];
                    *(float *)v88.i32 = (float)(*(float *)v13.i32 * v79) * (float)v88.i32[0];
                    *(float *)&a9 = *(float *)&a9 + *(float *)v88.i32;
                    v88.i16[0] = *(_WORD *)(v76 + 2 * v533);
                    v32 = v541;
                    *(float *)v15.i32 = v85 * v79;
                    *(_QWORD *)&a10 = vmovl_s16(v88).u64[0];
                    if ((float)(*(float *)&a9 + (float)((float)(v85 * v79) * (float)SLODWORD(a10))) < *(float *)v17.i32)
                    {
                      v89 = *(float *)v22.i32 + 1;
                      *(float *)&a11 = (float)v89 - *(float *)v22.i32;
                      v90 = *(float *)&a11 * v77;
                      v91 = *(float *)v22.i32 - (float)*(float *)v22.i32;
                      v523 = v91;
                      v524 = *(float *)&a11;
                      *(float *)&a10 = *(float *)&a11 * v79;
                      v525 = *(float *)v22.i32;
                      v526 = v89;
                      LOWORD(a11) = *(_WORD *)(v75 + 2 * v525);
                      v92 = (int16x4_t)vmovl_s16(*(int16x4_t *)&a11).u64[0];
                      *(float *)v92.i32 = (float)v92.i32[0];
                      v93 = v90 * *(float *)v92.i32;
                      v94 = 2 * v89;
                      v92.i16[0] = *(_WORD *)(v75 + v94);
                      *(_QWORD *)&a11 = vmovl_s16(v92).u64[0];
                      *(float *)&a11 = (float)SLODWORD(a11);
                      v95 = (float)(v91 * v77) * *(float *)&a11;
                      LOWORD(a11) = *(_WORD *)(v76 + 2 * v525);
                      v96 = v93 + v95;
                      v97 = *(float *)&a10 * (float)vmovl_s16(*(int16x4_t *)&a11).i32[0];
                      LOWORD(a10) = *(_WORD *)(v76 + v94);
                      v54 = v538;
                      v32 = v541;
                      v98 = v96 + v97;
                      *(_QWORD *)&a9 = vmovl_s16(*(int16x4_t *)&a10).u64[0];
                      if ((float)(v98 + (float)((float)(v91 * v79) * (float)SLODWORD(a9))) < *(float *)v17.i32)
                      {
                        v99 = v42;
                        v100 = v99 + 1;
                        v522 = v71 * v99;
                        v101 = v68 + 2 * v71 * v99;
                        v102 = v101 + 2 * v71;
                        v103 = (float)v100 - v42;
                        *(float *)&a10 = a6.n128_f32[0] * v103;
                        *(float *)&a8 = v78 * v103;
                        a7.n128_f32[0] = (float)v42;
                        v104 = v42 - a7.n128_f32[0];
                        *(float *)&a9 = (float)(v42 - a7.n128_f32[0]) * a6.n128_f32[0];
                        a6.n128_u16[0] = *(_WORD *)(v101 + 2 * v69);
                        a6.n128_u64[0] = vmovl_s16((int16x4_t)a6.n128_u64[0]).u64[0];
                        a7.n128_u16[0] = *(_WORD *)(v101 + 2 * v72);
                        v105 = (int16x4_t)vmovl_s16((int16x4_t)a7.n128_u64[0]).u64[0];
                        *(float *)v105.i32 = (float)(v78 * v103) * (float)v105.i32[0];
                        a6.n128_f32[0] = (float)(*(float *)&a10 * (float)a6.n128_i32[0]) + *(float *)v105.i32;
                        v105.i16[0] = *(_WORD *)(v102 + 2 * v69);
                        a7.n128_u64[0] = vmovl_s16(v105).u64[0];
                        a7.n128_f32[0] = *(float *)&a9 * (float)a7.n128_i32[0];
                        a6.n128_f32[0] = a6.n128_f32[0] + a7.n128_f32[0];
                        a7.n128_u16[0] = *(_WORD *)(v102 + 2 * v72);
                        v54 = v538;
                        v32 = v541;
                        v521 = v104;
                        v106 = v78 * v104;
                        a5 = (float32x4_t)vmovl_s16((int16x4_t)a7.n128_u64[0]);
                        v520 = v106;
                        a5.f32[0] = a6.n128_f32[0] + (float)(v106 * (float)a5.i32[0]);
                        if (a5.f32[0] < *(float *)v17.i32)
                        {
                          a6.n128_f32[0] = *(float *)v13.i32 * v103;
                          a5.i16[0] = *(_WORD *)(v101 + 2 * v528);
                          a5 = (float32x4_t)vmovl_s16(*(int16x4_t *)a5.f32);
                          v518 = *(float *)v13.i32 * v103;
                          v519 = v85 * v103;
                          a6.n128_u16[0] = *(_WORD *)(v101 + 2 * v533);
                          v107 = (int16x4_t)vmovl_s16((int16x4_t)a6.n128_u64[0]).u64[0];
                          *(float *)v107.i32 = (float)(v85 * v103) * (float)v107.i32[0];
                          a5.f32[0] = (float)((float)(*(float *)v13.i32 * v103) * (float)a5.i32[0]) + *(float *)v107.i32;
                          v107.i16[0] = *(_WORD *)(v102 + 2 * v528);
                          v108 = (int16x4_t)vmovl_s16(v107).u64[0];
                          v506 = *(float *)v13.i32 * v521;
                          *(float *)v108.i32 = (float)(*(float *)v13.i32 * v521) * (float)v108.i32[0];
                          a5.f32[0] = a5.f32[0] + *(float *)v108.i32;
                          v108.i16[0] = *(_WORD *)(v102 + 2 * v533);
                          v54 = v538;
                          v32 = v541;
                          a6.n128_u64[0] = vmovl_s16(v108).u64[0];
                          v517 = v85 * v521;
                          if ((float)(a5.f32[0] + (float)((float)(v85 * v521) * (float)a6.n128_i32[0])) < *(float *)v17.i32)
                          {
                            v496 = v61;
                            v498 = v60;
                            v507 = v68;
                            v508 = v55;
                            v505 = v71;
                            v502 = *(__int16 *)(v545 + 2 * v55);
                            v500 = v74;
                            v494 = (v69 + 1);
                            v512 = v51;
                            v514 = v50 + 1;
                            v490 = v84;
                            v492 = LODWORD(a12);
                            v488 = v86;
                            v510 = v50;
                            v483 = v15.i32[0];
                            v485 = v85;
                            v481 = *(float *)&a9;
                            v482 = *(float *)&a8;
                            v479 = v103;
                            v480 = *(float *)&a10;
                            v504 = (float)v34;
                            a7.n128_f32[0] = v85 * v521;
                            a5.f32[0] = sub_20FD70CC4(v71, v68, v45 + 0.5, v42, a7.n128_f64[0], a8, a9, a10);
                            *(float *)v22.i32 = v45 + 0.5;
                            v54 = v538;
                            v32 = v541;
                            v55 = v508;
                            v50 = v510;
                            v51 = v512;
                            v53 = v514;
                            v19.i32[0] = 2.0;
                            v20.i32[0] = 0.25;
                            v29 = -2.0;
                            v18.i32[0] = 1.0;
                            v28 = -0.5;
                            if (a5.f32[0] < (float)v34)
                            {
                              a5.f32[0] = sub_20FD70CC4(v505, v507, v47, v42 + 0.5, a7.n128_f64[0], a8, a9, a10);
                              *(float *)v22.i32 = v45 + 0.5;
                              v54 = v538;
                              v32 = v541;
                              v55 = v508;
                              v50 = v510;
                              v51 = v512;
                              v53 = v514;
                              v19.i32[0] = 2.0;
                              v20.i32[0] = 0.25;
                              v29 = -2.0;
                              v18.i32[0] = 1.0;
                              v28 = -0.5;
                              if (a5.f32[0] < v504)
                              {
                                a5.f32[0] = sub_20FD70CC4(v505, v507, v45, v42 + 0.5, a7.n128_f64[0], a8, a9, a10);
                                *(float *)v22.i32 = v45 + 0.5;
                                v54 = v538;
                                v32 = v541;
                                v55 = v508;
                                v50 = v510;
                                v51 = v512;
                                v53 = v514;
                                v19.i32[0] = 2.0;
                                v20.i32[0] = 0.25;
                                v29 = -2.0;
                                v18.i32[0] = 1.0;
                                v28 = -0.5;
                                if (a5.f32[0] < v504)
                                {
                                  a7.n128_f32[0] = (float)v34;
                                  a5.f32[0] = sub_20FD70CC4(v505, v507, v45 + 0.5, v42 + 0.5, a7.n128_f64[0], a8, a9, a10);
                                  *(float *)v22.i32 = v45 + 0.5;
                                  v21.i32[0] = v483;
                                  v110 = v485;
                                  *(float *)v15.i32 = (float)(v45 + 1) - v45;
                                  v111 = v488;
                                  v54 = v538;
                                  v32 = v541;
                                  v55 = v508;
                                  v50 = v510;
                                  *(float *)v17.i32 = v490;
                                  v16.i32[0] = v492;
                                  v51 = v512;
                                  v53 = v514;
                                  v113 = v47;
                                  v112 = v494;
                                  v115 = v496;
                                  v114 = v498;
                                  v116 = v505;
                                  v117 = v500;
                                  v118 = v502;
                                  v119 = v507;
                                  v19.i32[0] = 2.0;
                                  v20.i32[0] = 0.25;
                                  v29 = -2.0;
                                  v18.i32[0] = 1.0;
                                  v28 = -0.5;
                                  if (a5.f32[0] < v504)
                                    goto LABEL_78;
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
            v120 = v56 <= v34 || v546 <= v34;
            if (!v120 && v58 > v34)
            {
              v122 = *(__int16 *)(v545 + 2 * v54);
              v123 = *(__int16 *)(v545 + 2 * v32);
              v124 = v122 <= v34 || v123 <= v34;
              if (!v124 && *(__int16 *)(v545 + 2 * v55) > v34)
              {
                v126 = *(__int16 *)(v543 + 2 * v32);
                v127 = *(__int16 *)(v543 + 2 * v54) <= v34 || v126 <= v34;
                if (!v127 && *(__int16 *)(v543 + 2 * v55) > v34)
                {
                  v129 = v32;
                  v539 = v54;
                  v130 = (float)v34;
                  v131 = v37 + 144 * v38;
                  v132 = *(_QWORD *)(v131 + 88);
                  v133 = v47;
                  v134 = v43;
                  v135 = *(_QWORD *)(v131 + 40);
                  v136 = (v133 + 1);
                  v137 = v134 + 1;
                  v138 = v135 * v134;
                  v139 = v132 + 2 * v135 * v134;
                  v140 = v139 + 2 * v135;
                  a6.n128_f32[0] = (float)v136 - v47;
                  v141 = (float)v137 - v43;
                  v142 = v47 - (float)v47;
                  v143 = v43 - (float)v43;
                  *(float *)&a11 = a6.n128_f32[0] * v143;
                  LOWORD(a12) = *(_WORD *)(v139 + 2 * v133);
                  v144 = (int16x4_t)vmovl_s16(*(int16x4_t *)&a12).u64[0];
                  *(float *)v144.i32 = (float)v144.i32[0];
                  v145 = (float)(a6.n128_f32[0] * v141) * *(float *)v144.i32;
                  v144.i16[0] = *(_WORD *)(v139 + 2 * v136);
                  *(_QWORD *)&a12 = vmovl_s16(v144).u64[0];
                  *(float *)&a12 = (float)SLODWORD(a12);
                  v146 = (float)(v142 * v141) * *(float *)&a12;
                  LOWORD(a12) = *(_WORD *)(v140 + 2 * v133);
                  LOWORD(a11) = *(_WORD *)(v140 + 2 * v136);
                  v147 = (float)(v145 + v146)
                       + (float)((float)(a6.n128_f32[0] * v143) * (float)vmovl_s16(*(int16x4_t *)&a12).i32[0]);
                  *(_QWORD *)&a10 = vmovl_s16(*(int16x4_t *)&a11).u64[0];
                  *(float *)&a10 = (float)(v142 * v143) * (float)SLODWORD(a10);
                  if ((float)(v147 + *(float *)&a10) > (float)v34)
                  {
                    v148 = v45;
                    v149 = (v148 + 1);
                    *(float *)v13.i32 = (float)v149 - v45;
                    v150 = *(float *)v13.i32 * v141;
                    *(float *)&a9 = (float)v45;
                    v151 = v45 - *(float *)&a9;
                    v152 = (float)(v45 - *(float *)&a9) * v141;
                    *(float *)&a12 = *(float *)v13.i32 * v143;
                    LOWORD(a9) = *(_WORD *)(v139 + 2 * v148);
                    *(_QWORD *)&a9 = vmovl_s16(*(int16x4_t *)&a9).u64[0];
                    LOWORD(a10) = *(_WORD *)(v139 + 2 * v149);
                    v153 = (int16x4_t)vmovl_s16(*(int16x4_t *)&a10).u64[0];
                    *(float *)v153.i32 = v152 * (float)v153.i32[0];
                    *(float *)&a9 = (float)((float)(*(float *)v13.i32 * v141) * (float)SLODWORD(a9))
                                  + *(float *)v153.i32;
                    v153.i16[0] = *(_WORD *)(v140 + 2 * v148);
                    v154 = (int16x4_t)vmovl_s16(v153).u64[0];
                    *(float *)v154.i32 = (float)(*(float *)v13.i32 * v143) * (float)v154.i32[0];
                    *(float *)&a9 = *(float *)&a9 + *(float *)v154.i32;
                    v154.i16[0] = *(_WORD *)(v140 + 2 * v149);
                    *(float *)v15.i32 = v151 * v143;
                    *(_QWORD *)&a10 = vmovl_s16(v154).u64[0];
                    if ((float)(*(float *)&a9 + (float)((float)(v151 * v143) * (float)SLODWORD(a10))) > v130)
                    {
                      v155 = *(float *)v22.i32 + 1;
                      v156 = (float)v155 - *(float *)v22.i32;
                      *(float *)v17.i32 = *(float *)v22.i32 - (float)*(float *)v22.i32;
                      *(float *)&a10 = v156 * v143;
                      v525 = *(float *)v22.i32;
                      v526 = v155;
                      LOWORD(a11) = *(_WORD *)(v139 + 2 * v525);
                      v157 = (int16x4_t)vmovl_s16(*(int16x4_t *)&a11).u64[0];
                      *(float *)v157.i32 = (float)v157.i32[0];
                      v158 = (float)(v156 * v141) * *(float *)v157.i32;
                      v159 = 2 * v155;
                      v157.i16[0] = *(_WORD *)(v139 + v159);
                      *(_QWORD *)&a11 = vmovl_s16(v157).u64[0];
                      *(float *)&a11 = (float)SLODWORD(a11);
                      v160 = (float)(*(float *)v17.i32 * v141) * *(float *)&a11;
                      LOWORD(a11) = *(_WORD *)(v140 + 2 * v525);
                      LOWORD(a10) = *(_WORD *)(v140 + v159);
                      v161 = (float)(v158 + v160)
                           + (float)((float)(v156 * v143) * (float)vmovl_s16(*(int16x4_t *)&a11).i32[0]);
                      *(_QWORD *)&a9 = vmovl_s16(*(int16x4_t *)&a10).u64[0];
                      if ((float)(v161 + (float)((float)(*(float *)v17.i32 * v143) * (float)SLODWORD(a9))) > v130)
                      {
                        v162 = v42;
                        v163 = v162 + 1;
                        v522 = v135 * v162;
                        v164 = v132 + 2 * v135 * v162;
                        v165 = v164 + 2 * v135;
                        v166 = (float)v163 - v42;
                        *(float *)&a10 = a6.n128_f32[0] * v166;
                        *(float *)&a8 = v142 * v166;
                        a7.n128_f32[0] = (float)v42;
                        v167 = v42 - a7.n128_f32[0];
                        *(float *)&a9 = (float)(v42 - a7.n128_f32[0]) * a6.n128_f32[0];
                        a6.n128_u16[0] = *(_WORD *)(v164 + 2 * v133);
                        a6.n128_u64[0] = vmovl_s16((int16x4_t)a6.n128_u64[0]).u64[0];
                        a7.n128_u16[0] = *(_WORD *)(v164 + 2 * v136);
                        v168 = (int16x4_t)vmovl_s16((int16x4_t)a7.n128_u64[0]).u64[0];
                        *(float *)v168.i32 = (float)(v142 * v166) * (float)v168.i32[0];
                        a6.n128_f32[0] = (float)(*(float *)&a10 * (float)a6.n128_i32[0]) + *(float *)v168.i32;
                        v168.i16[0] = *(_WORD *)(v165 + 2 * v133);
                        a7.n128_u64[0] = vmovl_s16(v168).u64[0];
                        a7.n128_f32[0] = *(float *)&a9 * (float)a7.n128_i32[0];
                        a6.n128_f32[0] = a6.n128_f32[0] + a7.n128_f32[0];
                        a7.n128_u16[0] = *(_WORD *)(v165 + 2 * v136);
                        v169 = v142 * v167;
                        a5 = (float32x4_t)vmovl_s16((int16x4_t)a7.n128_u64[0]);
                        a5.f32[0] = a6.n128_f32[0] + (float)(v169 * (float)a5.i32[0]);
                        if (a5.f32[0] > v130)
                        {
                          a6.n128_f32[0] = *(float *)v13.i32 * v166;
                          a5.i16[0] = *(_WORD *)(v164 + 2 * v148);
                          a5 = (float32x4_t)vmovl_s16(*(int16x4_t *)a5.f32);
                          v518 = *(float *)v13.i32 * v166;
                          v519 = v151 * v166;
                          a6.n128_u16[0] = *(_WORD *)(v164 + 2 * v149);
                          v170 = (int16x4_t)vmovl_s16((int16x4_t)a6.n128_u64[0]).u64[0];
                          *(float *)v170.i32 = (float)(v151 * v166) * (float)v170.i32[0];
                          a5.f32[0] = (float)((float)(*(float *)v13.i32 * v166) * (float)a5.i32[0]) + *(float *)v170.i32;
                          v170.i16[0] = *(_WORD *)(v165 + 2 * v148);
                          v171 = (int16x4_t)vmovl_s16(v170).u64[0];
                          *(float *)v171.i32 = (float)(*(float *)v13.i32 * v167) * (float)v171.i32[0];
                          a5.f32[0] = a5.f32[0] + *(float *)v171.i32;
                          v171.i16[0] = *(_WORD *)(v165 + 2 * v149);
                          a6.n128_u64[0] = vmovl_s16(v171).u64[0];
                          v517 = v151 * v167;
                          if ((float)(a5.f32[0] + (float)((float)(v151 * v167) * (float)a6.n128_i32[0])) > v130)
                          {
                            v172 = v130;
                            v506 = *(float *)v13.i32 * v167;
                            v520 = v169;
                            v521 = v167;
                            v479 = (float)v163 - v42;
                            v480 = *(float *)&a10;
                            v481 = *(float *)&a9;
                            v482 = *(float *)&a8;
                            v523 = *(float *)v22.i32 - (float)*(float *)v22.i32;
                            v524 = v156;
                            v528 = v45;
                            v533 = (v148 + 1);
                            v484 = v15.i32[0];
                            v486 = v151;
                            v487 = (float)v149 - v45;
                            v489 = v152;
                            v536 = v126;
                            v509 = v55;
                            v511 = v50;
                            v491 = v150;
                            v493 = LODWORD(a12);
                            v513 = v51;
                            v515 = v53;
                            v495 = (v133 + 1);
                            v497 = v123;
                            v499 = v122;
                            v501 = v138;
                            v503 = *(__int16 *)(v545 + 2 * v55);
                            v173 = v135;
                            v516 = *(float *)v22.i32;
                            a7.n128_f32[0] = *(float *)v13.i32 * v167;
                            if (sub_20FD70CC4(v135, v132, *(float *)v22.i32, v42, a7.n128_f64[0], a8, a9, a10) <= v130)
                              goto LABEL_146;
                            if (sub_20FD70CC4(v173, v132, v47, v42 + 0.5, a7.n128_f64[0], a8, a9, a10) <= v172)
                              goto LABEL_146;
                            if (sub_20FD70CC4(v173, v132, v45, v42 + 0.5, a7.n128_f64[0], a8, a9, a10) <= v172)
                              goto LABEL_146;
                            a5.f32[0] = sub_20FD70CC4(v173, v132, v516, v42 + 0.5, a7.n128_f64[0], a8, a9, a10);
                            if (a5.f32[0] <= v172)
                              goto LABEL_146;
                            v28 = -0.5;
                            v29 = -2.0;
                            v20.i32[0] = 0.25;
                            v119 = v132;
                            v55 = v509;
                            v118 = v503;
                            v117 = v501;
                            v115 = v497;
                            v114 = v499;
                            v116 = v173;
                            v113 = v47;
                            v112 = v495;
                            v51 = v513;
                            v53 = v515;
                            *(float *)v17.i32 = v491;
                            v16.i32[0] = v493;
                            *(float *)v15.i32 = v487;
                            v111 = v489;
                            v50 = v511;
                            v54 = v539;
                            v32 = v129;
                            v21.i32[0] = v484;
                            v110 = v486;
LABEL_78:
                            v174 = *(_QWORD *)(v37 + 144 * v35 + 120);
                            v175 = *(_QWORD *)(v174 + 8 * v50);
                            v176 = 2 * v32;
                            a5.i16[0] = *(_WORD *)(v175 + v176);
                            v177 = (int16x4_t)vmovl_s16(*(int16x4_t *)a5.f32).u64[0];
                            v178 = (float)v177.i32[0];
                            v179 = 2 * v54;
                            v177.i16[0] = *(_WORD *)(v175 + v179);
                            v180 = (int16x4_t)vmovl_s16(v177).u64[0];
                            a7.n128_f32[0] = (float)v180.i32[0];
                            v180.i16[0] = *(_WORD *)(v175 + 2 * v55);
                            v181 = (int16x4_t)vmovl_s16(v180).u64[0];
                            *(float *)&a8 = (float)v181.i32[0];
                            v182 = *(_QWORD *)(v174 + 8 * v51);
                            v181.i16[0] = *(_WORD *)(v182 + v179);
                            v183 = (int16x4_t)vmovl_s16(v181).u64[0];
                            *(float *)&a9 = (float)v183.i32[0];
                            v183.i16[0] = *(_WORD *)(v182 + v176);
                            v184 = (int16x4_t)vmovl_s16(v183).u64[0];
                            *(float *)&a10 = (float)v184.i32[0];
                            v184.i16[0] = *(_WORD *)(v182 + 2 * v55);
                            v185 = (int16x4_t)vmovl_s16(v184).u64[0];
                            *(float *)&a11 = (float)v185.i32[0];
                            v186 = *(_QWORD *)(v174 + 8 * v53);
                            v185.i16[0] = *(_WORD *)(v186 + v176);
                            v187 = (float32x4_t)vmovl_s16(v185);
                            *(float *)&a12 = (float)v187.i32[0];
                            v187.f32[0] = *(float *)&a8 - a7.n128_f32[0];
                            *(float *)v12.i32 = v178 * v29;
                            *(float *)&a8 = (float)((float)(v178 * v29) + a7.n128_f32[0]) + *(float *)&a8;
                            v188 = *(float *)&a12 - *(float *)&a10;
                            a7.n128_f32[0] = (float)(*(float *)v12.i32 + *(float *)&a10) + *(float *)&a12;
                            LOWORD(a10) = *(_WORD *)(v186 + 2 * v55);
                            v189 = (int16x4_t)vmovl_s16(*(int16x4_t *)&a10).u64[0];
                            *(float *)v189.i32 = (float)v189.i32[0];
                            *(float *)&a9 = *(float *)&a9 + *(float *)v189.i32;
                            v189.i16[0] = *(_WORD *)(v186 + v179);
                            v190 = (int16x4_t)vmovl_s16(v189).u64[0];
                            *(float *)v190.i32 = *(float *)&a11 + (float)v190.i32[0];
                            *(float *)&a9 = *(float *)&a9 - *(float *)v190.i32;
                            v191 = v119 + 2 * v522;
                            v190.i16[0] = *(_WORD *)(v191 + 2 * v528);
                            *(_QWORD *)&v192 = vmovl_s16(v190).u64[0];
                            WORD1(a11) = HIWORD(v518);
                            LOWORD(a11) = *(_WORD *)(v191 + 2 * v533);
                            v193 = (int16x4_t)vmovl_s16(*(int16x4_t *)&a11).u64[0];
                            *(float *)v193.i32 = v519 * (float)v193.i32[0];
                            v194 = v191 + 2 * v116;
                            *(float *)&v192 = (float)(v518 * (float)SLODWORD(v192)) + *(float *)v193.i32;
                            v193.i16[0] = *(_WORD *)(v194 + 2 * v528);
                            v195 = (int16x4_t)vmovl_s16(v193).u64[0];
                            *(float *)v195.i32 = v506 * (float)v195.i32[0];
                            *(float *)&v192 = *(float *)&v192 + *(float *)v195.i32;
                            v195.i16[0] = *(_WORD *)(v194 + 2 * v533);
                            *(_QWORD *)&v196 = vmovl_s16(v195).u64[0];
                            *(float *)&v196 = *(float *)&v192 + (float)(v517 * (float)SLODWORD(v196));
                            *(float *)&v192 = *(float *)&v196 - (float)v115;
                            *(float *)&v196 = (float)(*(float *)v12.i32 + (float)v115) + *(float *)&v196;
                            v14.i16[1] = HIWORD(v521);
                            v14.i16[0] = *(_WORD *)(v191 + 2 * v525);
                            v197 = (int16x4_t)vmovl_s16(v14).u64[0];
                            *(float *)v197.i32 = (float)v197.i32[0];
                            *(float *)&a12 = (float)(v524 * v479) * *(float *)v197.i32;
                            v197.i16[0] = *(_WORD *)(v191 + 2 * v526);
                            *(float *)v12.i32 = (float)(v523 * v479) * (float)vmovl_s16(v197).i32[0];
                            *(float *)&a12 = *(float *)&a12 + *(float *)v12.i32;
                            v12.i16[0] = *(_WORD *)(v194 + 2 * v525);
                            v198 = (int16x4_t)vmovl_s16(v12).u64[0];
                            *(float *)v198.i32 = (float)(v524 * v521) * (float)v198.i32[0];
                            *(float *)&a12 = *(float *)&a12 + *(float *)v198.i32;
                            v198.i16[0] = *(_WORD *)(v194 + 2 * v526);
                            v199 = (int16x4_t)vmovl_s16(v198).u64[0];
                            *(float *)&a12 = *(float *)&a12 + (float)((float)(v523 * v521) * (float)v199.i32[0]);
                            *(float *)v199.i32 = (float)v114;
                            v199.i16[0] = *(_WORD *)(v191 + 2 * v113);
                            v109.i16[1] = HIWORD(v480);
                            v109.i16[0] = *(_WORD *)(v191 + 2 * v112);
                            v200 = (int16x4_t)vmovl_s16(v109).u64[0];
                            *(float *)v200.i32 = v482 * (float)v200.i32[0];
                            *(float *)v199.i32 = (float)(v480 * (float)vmovl_s16(v199).i32[0]) + *(float *)v200.i32;
                            v200.i16[0] = *(_WORD *)(v194 + 2 * v113);
                            v201 = (int16x4_t)vmovl_s16(v200).u64[0];
                            *(float *)v201.i32 = v481 * (float)v201.i32[0];
                            *(float *)v199.i32 = *(float *)v199.i32 + *(float *)v201.i32;
                            v201.i16[0] = *(_WORD *)(v194 + 2 * v112);
                            v202 = (int16x4_t)vmovl_s16(v201).u64[0];
                            *(float *)&a12 = (float)(*(float *)&a12 + (float)v114)
                                           - (float)((float)(*(float *)v199.i32 + (float)(v520 * (float)v202.i32[0]))
                                                   + (float)v118);
                            v203 = v46;
                            LODWORD(v194) = v203 + 1;
                            v204 = v119 + 2 * v116 * v203;
                            *(float *)v199.i32 = (float)v194 - v46;
                            *(float *)v202.i32 = v46 - (float)v46;
                            *(float *)v13.i32 = *(float *)v199.i32 * *(float *)v15.i32;
                            *(float *)v197.i32 = *(float *)v202.i32 * *(float *)v15.i32;
                            v15.i16[0] = *(_WORD *)(v204 + 2 * v528);
                            v205 = (int16x4_t)vmovl_s16(v15).u64[0];
                            *(float *)v205.i32 = (float)v205.i32[0];
                            *(float *)v13.i32 = *(float *)v13.i32 * *(float *)v205.i32;
                            v205.i16[0] = *(_WORD *)(v204 + 2 * v533);
                            v206 = v204 + 2 * v116;
                            *(float *)v199.i32 = *(float *)v13.i32
                                               + (float)((float)(*(float *)v199.i32 * v110)
                                                       * (float)vmovl_s16(v205).i32[0]);
                            v13.i16[0] = *(_WORD *)(v206 + 2 * v528);
                            v207 = (int16x4_t)vmovl_s16(v13).u64[0];
                            *(float *)v207.i32 = *(float *)v197.i32 * (float)v207.i32[0];
                            *(float *)v199.i32 = *(float *)v199.i32 + *(float *)v207.i32;
                            v207.i16[0] = *(_WORD *)(v206 + 2 * v533);
                            v208 = (int16x4_t)vmovl_s16(v207).u64[0];
                            *(float *)v208.i32 = (float)v208.i32[0];
                            *(float *)v199.i32 = *(float *)v199.i32
                                               + (float)((float)(*(float *)v202.i32 * v110) * *(float *)v208.i32);
                            *(float *)v202.i32 = (float)v546;
                            v209 = v119 + 2 * v117;
                            v202.i16[0] = *(_WORD *)(v209 + 2 * v528);
                            v208.i16[0] = *(_WORD *)(v209 + 2 * v533);
                            v210 = (int16x4_t)vmovl_s16(v208).u64[0];
                            *(float *)v210.i32 = v111 * (float)v210.i32[0];
                            v211 = v209 + 2 * v116;
                            *(float *)v202.i32 = (float)(*(float *)v17.i32 * (float)vmovl_s16(v202).i32[0])
                                               + *(float *)v210.i32;
                            v210.i16[0] = *(_WORD *)(v211 + 2 * v528);
                            v212 = (int16x4_t)vmovl_s16(v210).u64[0];
                            *(float *)v212.i32 = *(float *)v16.i32 * (float)v212.i32[0];
                            *(float *)v202.i32 = *(float *)v202.i32 + *(float *)v212.i32;
                            v212.i16[0] = *(_WORD *)(v211 + 2 * v533);
                            v550 = *(float *)&a8;
                            v551 = *(float *)&a9 * *(float *)v20.i32;
                            v552 = *(float *)&a12 * *(float *)v20.i32;
                            v553 = *(float *)&a9 * *(float *)v20.i32;
                            *(float *)&a9 = (float)((float)(*(float *)v199.i32 + (float)v546)
                                                  - (float)((float)(*(float *)v202.i32
                                                                  + (float)(*(float *)v21.i32
                                                                          * (float)vmovl_s16(v212).i32[0]))
                                                          + (float)v536))
                                          * *(float *)v20.i32;
                            v555 = *(float *)&a9;
                            v556 = *(float *)&a12 * *(float *)v20.i32;
                            v554 = a7.n128_u32[0];
                            v557 = *(float *)&a9;
                            v558 = *(float *)&v196;
                            LODWORD(v182) = 1 << *(_DWORD *)&v25[v26 + 32];
                            *(float *)&a8 = v44 * (float)(int)v182;
                            *(_DWORD *)&v25[v26] = LODWORD(a8);
                            a7.n128_f32[0] = v41 * (float)(int)v182;
                            *((_DWORD *)v31 + 1) = a7.n128_u32[0];
                            v187.f32[0] = v187.f32[0] * v28;
                            v187.f32[1] = v188 * v28;
                            v187.f32[2] = *(float *)&v192 * v28;
                            if ((sub_20FD6F8C8((float32x2_t *)&v25[v26], v531, a3[6], a3[7], &v550, v187, *(float32_t *)(v530 + 8), a7.n128_f64[0], a8, a9, v192, v196, a12) & 1) == 0)goto LABEL_146;
                            goto LABEL_145;
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    else
    {
      v547 = (float32x2_t *)&v25[v26];
      v213 = (float)(2 * v32);
      a5.f32[0] = (float)(2 * v33);
      v214 = *(_QWORD *)(v37 + 144 * v38 + 120);
      v215 = v33 - 1;
      v216 = *(_QWORD *)(v214 + 8 * v215);
      v217 = *(_QWORD *)(v214 + 8 * v33);
      v218 = v33 + 1;
      v219 = *(_QWORD *)(v214 + 8 * v218);
      v220 = (int)v32 - 1;
      v221 = *(__int16 *)(v216 + 2 * v220);
      v222 = *(__int16 *)(v216 + 2 * (int)v32);
      v223 = (int)v32 + 1;
      v224 = *(__int16 *)(v216 + 2 * v223);
      if (v221 < v34 && v222 < v34 && v224 < v34)
      {
        v227 = *(__int16 *)(v217 + 2 * v220) < v34 && *(__int16 *)(v217 + 2 * (int)v32) < v34;
        if (v227 && *(__int16 *)(v217 + 2 * v223) < v34)
        {
          v544 = *(__int16 *)(v219 + 2 * (int)v32);
          v229 = *(__int16 *)(v219 + 2 * v220) < v34 && *(__int16 *)(v219 + 2 * (int)v32) < v34;
          if (v229 && *(__int16 *)(v219 + 2 * v223) < v34)
          {
            v231 = (float)v34;
            v232 = v37 + 144 * (int)v36;
            v233 = (float)(v213 + v29);
            v234 = (float)(a5.f32[0] + v29);
            v235 = v234 + 1;
            v540 = *(_QWORD *)(v232 + 40);
            v542 = *(_QWORD *)(v232 + 88);
            v236 = v542 + 2 * v540 * v234;
            v237 = v236 + 2 * v540;
            v238 = (float)(v233 + 1) - (float)(v213 + v29);
            *(float *)v13.i32 = (float)v235 - (float)(a5.f32[0] + v29);
            v239 = (float)(v213 + v29) - (float)v233;
            *(float *)v12.i32 = (float)(float)(a5.f32[0] + v29);
            v240 = (float)(a5.f32[0] + v29) - *(float *)v12.i32;
            v534 = v233;
            v537 = v233 + 1;
            v241 = 2 * v233;
            v12.i16[0] = *(_WORD *)(v236 + v241);
            v242 = (int16x4_t)vmovl_s16(v12).u64[0];
            *(float *)v242.i32 = (float)v242.i32[0];
            v243 = (float)(v238 * *(float *)v13.i32) * *(float *)v242.i32;
            v242.i16[0] = *(_WORD *)(v236 + 2 * v537);
            v12 = (int16x4_t)vmovl_s16(v242).u64[0];
            *(float *)v12.i32 = (float)v12.i32[0];
            v244 = (float)(v239 * *(float *)v13.i32) * *(float *)v12.i32;
            v12.i16[0] = *(_WORD *)(v237 + v241);
            v245 = v243 + v244;
            *(_QWORD *)&a12 = vmovl_s16(v12).u64[0];
            *(float *)&a12 = (float)SLODWORD(a12);
            v246 = (float)(v238 * v240) * *(float *)&a12;
            LOWORD(a12) = *(_WORD *)(v237 + 2 * v537);
            v247 = v245 + v246;
            *(_QWORD *)&a11 = vmovl_s16(*(int16x4_t *)&a12).u64[0];
            if ((float)(v247 + (float)((float)(v239 * v240) * (float)SLODWORD(a11))) < (float)v34)
            {
              v248 = *(__int16 *)(v217 + 2 * (int)v32);
              v249 = *(__int16 *)(v217 + 2 * v220);
              v250 = v213;
              v251 = (v250 + 1);
              *(float *)&a11 = (float)v251 - v213;
              v252 = v213 - (float)v213;
              *(float *)v14.i32 = *(float *)&a11 * v240;
              v15.i16[0] = *(_WORD *)(v236 + 2 * v250);
              v253 = (int16x4_t)vmovl_s16(v15).u64[0];
              *(float *)v253.i32 = (float)v253.i32[0];
              v254 = (float)(*(float *)&a11 * *(float *)v13.i32) * *(float *)v253.i32;
              v253.i16[0] = *(_WORD *)(v236 + 2 * v251);
              *(float *)v16.i32 = v252 * v240;
              v15 = (int16x4_t)vmovl_s16(v253).u64[0];
              *(float *)v15.i32 = (float)v15.i32[0];
              v255 = (float)(v252 * *(float *)v13.i32) * *(float *)v15.i32;
              v15.i16[0] = *(_WORD *)(v237 + 2 * v250);
              v14.i16[0] = *(_WORD *)(v237 + 2 * v251);
              v256 = (float)(v254 + v255) + (float)((float)(*(float *)&a11 * v240) * (float)vmovl_s16(v15).i32[0]);
              v12 = (int16x4_t)vmovl_s16(v14).u64[0];
              *(float *)&a12 = v256 + (float)((float)(v252 * v240) * (float)v12.i32[0]);
              if (*(float *)&a12 < v231)
              {
                *(float *)&a12 = (float)((float)(v213 + *(float *)v19.i32) + 1)
                               - (float)(v213 + *(float *)v19.i32);
                *(float *)v12.i32 = (float)(v213 + *(float *)v19.i32)
                                  - (float)(float)(v213 + *(float *)v19.i32);
                *(float *)v15.i32 = *(float *)&a12 * v240;
                v527 = (float)(v213 + *(float *)v19.i32);
                v529 = (float)(v213 + *(float *)v19.i32) + 1;
                v16.i16[0] = *(_WORD *)(v236 + 2 * v527);
                v257 = (int16x4_t)vmovl_s16(v16).u64[0];
                *(float *)v257.i32 = (float)v257.i32[0];
                v258 = (float)(*(float *)&a12 * *(float *)v13.i32) * *(float *)v257.i32;
                v257.i16[0] = *(_WORD *)(v236 + 2 * v529);
                v16 = (int16x4_t)vmovl_s16(v257).u64[0];
                *(float *)v16.i32 = (float)v16.i32[0];
                v259 = (float)(*(float *)v12.i32 * *(float *)v13.i32) * *(float *)v16.i32;
                v16.i16[0] = *(_WORD *)(v237 + 2 * v527);
                v15.i16[0] = *(_WORD *)(v237 + 2 * v529);
                *(float *)v13.i32 = (float)(v258 + v259)
                                  + (float)((float)(*(float *)&a12 * v240) * (float)vmovl_s16(v16).i32[0]);
                v14 = (int16x4_t)vmovl_s16(v15).u64[0];
                if ((float)(*(float *)v13.i32 + (float)((float)(*(float *)v12.i32 * v240) * (float)v14.i32[0])) < v231)
                {
                  v260 = a5.f32[0];
                  v261 = v542 + 2 * v540 * v260;
                  v262 = v261 + 2 * v540;
                  *(float *)v13.i32 = (float)(v260 + 1) - a5.f32[0];
                  v263 = a5.f32[0] - (float)a5.f32[0];
                  *(float *)v16.i32 = v263 * v238;
                  v264 = 2 * v534;
                  v17.i16[0] = *(_WORD *)(v261 + 2 * v534);
                  v265 = (int16x4_t)vmovl_s16(v17).u64[0];
                  *(float *)v265.i32 = (float)v265.i32[0];
                  v266 = (float)(v238 * *(float *)v13.i32) * *(float *)v265.i32;
                  v265.i16[0] = *(_WORD *)(v261 + 2 * v537);
                  v17 = (int16x4_t)vmovl_s16(v265).u64[0];
                  *(float *)v17.i32 = (float)v17.i32[0];
                  v267 = (float)(v239 * *(float *)v13.i32) * *(float *)v17.i32;
                  v17.i16[0] = *(_WORD *)(v262 + 2 * v534);
                  v16.i16[0] = *(_WORD *)(v262 + 2 * v537);
                  v268 = (float)(v266 + v267) + (float)((float)(v263 * v238) * (float)vmovl_s16(v17).i32[0]);
                  v15 = (int16x4_t)vmovl_s16(v16).u64[0];
                  *(float *)v15.i32 = (float)(v239 * v263) * (float)v15.i32[0];
                  if ((float)(v268 + *(float *)v15.i32) < v231)
                  {
                    *(float *)v16.i32 = *(float *)&a11 * v263;
                    v269 = 2 * v250;
                    v17.i16[0] = *(_WORD *)(v261 + v269);
                    v270 = (int16x4_t)vmovl_s16(v17).u64[0];
                    *(float *)v270.i32 = (float)v270.i32[0];
                    v271 = (float)(*(float *)&a11 * *(float *)v13.i32) * *(float *)v270.i32;
                    v272 = 2 * v251;
                    v270.i16[0] = *(_WORD *)(v261 + v272);
                    v17 = (int16x4_t)vmovl_s16(v270).u64[0];
                    *(float *)v17.i32 = (float)v17.i32[0];
                    v273 = (float)(v252 * *(float *)v13.i32) * *(float *)v17.i32;
                    v17.i16[0] = *(_WORD *)(v262 + v269);
                    v16.i16[0] = *(_WORD *)(v262 + v272);
                    v274 = (float)(v271 + v273) + (float)((float)(*(float *)&a11 * v263) * (float)vmovl_s16(v17).i32[0]);
                    v15 = (int16x4_t)vmovl_s16(v16).u64[0];
                    *(float *)v15.i32 = (float)(v252 * v263) * (float)v15.i32[0];
                    if ((float)(v274 + *(float *)v15.i32) < v231)
                    {
                      *(float *)v15.i32 = v263 * *(float *)&a12;
                      v535 = v272;
                      v16.i16[0] = *(_WORD *)(v261 + 2 * v527);
                      v275 = (int16x4_t)vmovl_s16(v16).u64[0];
                      *(float *)v275.i32 = (float)v275.i32[0];
                      v276 = (float)(*(float *)&a12 * *(float *)v13.i32) * *(float *)v275.i32;
                      v275.i16[0] = *(_WORD *)(v261 + 2 * v529);
                      v16 = (int16x4_t)vmovl_s16(v275).u64[0];
                      *(float *)v16.i32 = (float)v16.i32[0];
                      v277 = (float)(*(float *)v12.i32 * *(float *)v13.i32) * *(float *)v16.i32;
                      v16.i16[0] = *(_WORD *)(v262 + 2 * v527);
                      v15.i16[0] = *(_WORD *)(v262 + 2 * v529);
                      *(float *)v13.i32 = (float)(v276 + v277)
                                        + (float)((float)(v263 * *(float *)&a12) * (float)vmovl_s16(v16).i32[0]);
                      v14 = (int16x4_t)vmovl_s16(v15).u64[0];
                      if ((float)(*(float *)v13.i32 + (float)((float)(*(float *)v12.i32 * v263) * (float)v14.i32[0])) < v231)
                      {
                        v278 = (float)(a5.f32[0] + *(float *)v19.i32);
                        v279 = v278 + 1;
                        v280 = v542 + 2 * v540 * v278;
                        v281 = v280 + 2 * v540;
                        v282 = (float)v279 - (float)(a5.f32[0] + *(float *)v19.i32);
                        *(float *)v16.i32 = (float)(float)(a5.f32[0] + *(float *)v19.i32);
                        *(float *)v13.i32 = (float)(a5.f32[0] + *(float *)v19.i32) - *(float *)v16.i32;
                        v16.i16[0] = *(_WORD *)(v280 + v264);
                        v283 = (int16x4_t)vmovl_s16(v16).u64[0];
                        *(float *)v283.i32 = (float)v283.i32[0];
                        v284 = (float)(v238 * v282) * *(float *)v283.i32;
                        v283.i16[0] = *(_WORD *)(v280 + 2 * v537);
                        v16 = (int16x4_t)vmovl_s16(v283).u64[0];
                        *(float *)v16.i32 = (float)v16.i32[0];
                        v285 = (float)(v239 * v282) * *(float *)v16.i32;
                        v16.i16[0] = *(_WORD *)(v281 + v264);
                        v286 = v284 + v285;
                        v15 = (int16x4_t)vmovl_s16(v16).u64[0];
                        *(float *)v15.i32 = (float)v15.i32[0];
                        v287 = (float)(v238 * *(float *)v13.i32) * *(float *)v15.i32;
                        v15.i16[0] = *(_WORD *)(v281 + 2 * v537);
                        v288 = v286 + v287;
                        v14 = (int16x4_t)vmovl_s16(v15).u64[0];
                        *(float *)v14.i32 = (float)v14.i32[0];
                        if ((float)(v288 + (float)((float)(v239 * *(float *)v13.i32) * *(float *)v14.i32)) < v231)
                        {
                          v289 = *(float *)&a11 * v282;
                          v14.i16[0] = *(_WORD *)(v280 + v269);
                          *(float *)&a11 = *(float *)&a11 * *(float *)v13.i32;
                          v290 = (int16x4_t)vmovl_s16(v14).u64[0];
                          *(float *)v290.i32 = (float)v290.i32[0];
                          v291 = v289 * *(float *)v290.i32;
                          v290.i16[0] = *(_WORD *)(v280 + v535);
                          v14 = (int16x4_t)vmovl_s16(v290).u64[0];
                          *(float *)v14.i32 = (float)v14.i32[0];
                          v292 = (float)(v252 * v282) * *(float *)v14.i32;
                          v14.i16[0] = *(_WORD *)(v281 + v269);
                          v293 = v291 + v292;
                          v294 = *(float *)&a11 * (float)vmovl_s16(v14).i32[0];
                          LOWORD(a11) = *(_WORD *)(v281 + v535);
                          v295 = v293 + v294;
                          *(_QWORD *)&a9 = vmovl_s16(*(int16x4_t *)&a11).u64[0];
                          if ((float)(v295 + (float)((float)(v252 * *(float *)v13.i32) * (float)SLODWORD(a9))) < v231)
                          {
                            v296 = *(float *)&a12 * v282;
                            v297 = *(float *)v12.i32 * v282;
                            *(float *)&a10 = *(float *)&a12 * *(float *)v13.i32;
                            v298 = *(float *)v12.i32 * *(float *)v13.i32;
                            LOWORD(a12) = *(_WORD *)(v280 + 2 * v527);
                            v12.i16[0] = *(_WORD *)(v280 + 2 * v529);
                            v299 = v296 * (float)vmovl_s16(*(int16x4_t *)&a12).i32[0];
                            *(_QWORD *)&a12 = vmovl_s16(v12).u64[0];
                            *(float *)&a12 = (float)SLODWORD(a12);
                            v300 = v297 * *(float *)&a12;
                            LOWORD(a12) = *(_WORD *)(v281 + 2 * v527);
                            v301 = v299 + v300;
                            v302 = *(float *)&a10 * (float)vmovl_s16(*(int16x4_t *)&a12).i32[0];
                            LOWORD(a10) = *(_WORD *)(v281 + 2 * v529);
                            v303 = v301 + v302;
                            *(_QWORD *)&a9 = vmovl_s16(*(int16x4_t *)&a10).u64[0];
                            *(float *)&a9 = v298 * (float)SLODWORD(a9);
                            if ((float)(v303 + *(float *)&a9) < v231)
                            {
                              v304 = *(__int16 *)(v217 + 2 * v223);
LABEL_144:
                              v396 = *(_QWORD *)(v37 + 144 * v35 + 120);
                              v397 = *(_QWORD *)(v396 + 8 * v33);
                              a5.i16[0] = *(_WORD *)(v397 + 2 * (int)v32);
                              v398 = (int16x4_t)vmovl_s16(*(int16x4_t *)a5.f32).u64[0];
                              a7.n128_f32[0] = (float)(int)v32;
                              v399 = (float)v33;
                              *(float *)&a12 = (float)v398.i32[0];
                              v398.i16[0] = *(_WORD *)(v397 + 2 * v220);
                              v400 = (int16x4_t)vmovl_s16(v398).u64[0];
                              v401 = (float)v400.i32[0];
                              v400.i16[0] = *(_WORD *)(v397 + 2 * v223);
                              v402 = (int16x4_t)vmovl_s16(v400).u64[0];
                              v403 = (float)v402.i32[0];
                              v404 = *(_QWORD *)(v396 + 8 * v215);
                              v402.i16[0] = *(_WORD *)(v404 + 2 * v220);
                              v405 = (int16x4_t)vmovl_s16(v402).u64[0];
                              v406 = (float)v405.i32[0];
                              v405.i16[0] = *(_WORD *)(v404 + 2 * (int)v32);
                              LOWORD(a9) = *(_WORD *)(v404 + 2 * v223);
                              v407 = (float)vmovl_s16(v405).i32[0];
                              v405.i32[0] = vmovl_s16(*(int16x4_t *)&a9).u32[0];
                              v408 = *(_QWORD *)(v396 + 8 * v218);
                              LOWORD(a9) = *(_WORD *)(v408 + 2 * v220);
                              *(float *)v16.i32 = (float)v405.i32[0];
                              v409 = (int16x4_t)vmovl_s16(*(int16x4_t *)&a9).u64[0];
                              *(float *)v18.i32 = (float)v409.i32[0];
                              v409.i16[0] = *(_WORD *)(v408 + 2 * (int)v32);
                              v410 = (int16x4_t)vmovl_s16(v409).u64[0];
                              v411 = (float)v410.i32[0];
                              v410.i16[0] = *(_WORD *)(v408 + 2 * v223);
                              *(_QWORD *)&v412 = vmovl_s16(v410).u64[0];
                              *(float *)v19.i32 = (float)SLODWORD(v412);
                              *(float *)&v412 = v403 - v401;
                              *(float *)&a9 = v411 - v407;
                              v413 = *(float *)&a12 * -2.0;
                              v414 = (float)((float)(*(float *)&a12 * -2.0) + v401) + v403;
                              *(float *)&a12 = (float)((float)(*(float *)&a12 * -2.0) + v407) + v411;
                              v415 = (float)((float)(v406 + *(float *)v19.i32)
                                           - (float)(*(float *)v16.i32 + *(float *)v18.i32))
                                   * *(float *)v20.i32;
                              v416 = (float)(v399 + v399);
                              v417 = v416 + 1;
                              v418 = v542 + 2 * v540 * v416;
                              v419 = v418 + 2 * v540;
                              v420 = (float)((float)(a7.n128_f32[0] + a7.n128_f32[0]) + 1)
                                   - (float)(a7.n128_f32[0] + a7.n128_f32[0]);
                              *(float *)v18.i32 = (float)v417 - (float)(v399 + v399);
                              *(float *)v16.i32 = (float)(a7.n128_f32[0] + a7.n128_f32[0])
                                                - (float)(float)(a7.n128_f32[0] + a7.n128_f32[0]);
                              v421 = (float)(v399 + v399) - (float)(float)(v399 + v399);
                              v422 = 2 * (float)(a7.n128_f32[0] + a7.n128_f32[0]);
                              v22.i16[0] = *(_WORD *)(v418 + v422);
                              v423 = (int16x4_t)vmovl_s16(v22).u64[0];
                              *(float *)v423.i32 = (float)v423.i32[0];
                              v424 = (float)(v420 * *(float *)v18.i32) * *(float *)v423.i32;
                              v425 = 2 * ((float)(a7.n128_f32[0] + a7.n128_f32[0]) + 1);
                              v423.i16[0] = *(_WORD *)(v418 + v425);
                              v426 = (int16x4_t)vmovl_s16(v423).u64[0];
                              *(float *)v426.i32 = (float)v426.i32[0];
                              *(float *)v19.i32 = (float)(*(float *)v16.i32 * *(float *)v18.i32) * *(float *)v426.i32;
                              v427 = v424 + *(float *)v19.i32;
                              v19.i16[0] = *(_WORD *)(v419 + v422);
                              v428 = (int16x4_t)vmovl_s16(v19).u64[0];
                              *(float *)v428.i32 = (float)(v420 * v421) * (float)v428.i32[0];
                              v429 = v427 + *(float *)v428.i32;
                              v428.i16[0] = *(_WORD *)(v419 + v425);
                              v430 = (int16x4_t)vmovl_s16(v428).u64[0];
                              *(float *)v430.i32 = v429
                                                 + (float)((float)(*(float *)v16.i32 * v421) * (float)v430.i32[0]);
                              v431 = (float)v248 - *(float *)v430.i32;
                              *(float *)v430.i32 = v413 + *(float *)v430.i32;
                              v432 = (float)(a7.n128_f32[0] + a7.n128_f32[0]) + -2.0;
                              v433 = v432;
                              v434 = *(float *)v430.i32 + (float)v248;
                              v435 = v432 + 1;
                              *(float *)v430.i32 = (float)v435 - v432;
                              v436 = v432 - (float)v432;
                              v437 = 2 * v433;
                              v426.i16[0] = *(_WORD *)(v418 + v437);
                              v438 = (int16x4_t)vmovl_s16(v426).u64[0];
                              *(float *)v438.i32 = (float)v438.i32[0];
                              *(float *)v20.i32 = (float)(*(float *)v430.i32 * *(float *)v18.i32) * *(float *)v438.i32;
                              v439 = 2 * v435;
                              v438.i16[0] = *(_WORD *)(v418 + v439);
                              *(float *)v21.i32 = (float)(v436 * *(float *)v18.i32) * (float)vmovl_s16(v438).i32[0];
                              *(float *)v20.i32 = *(float *)v20.i32 + *(float *)v21.i32;
                              v21.i16[0] = *(_WORD *)(v419 + v437);
                              *(float *)v430.i32 = *(float *)v20.i32
                                                 + (float)((float)(v421 * *(float *)v430.i32)
                                                         * (float)vmovl_s16(v21).i32[0]);
                              v20.i16[0] = *(_WORD *)(v419 + v439);
                              v440 = (int16x4_t)vmovl_s16(v20).u64[0];
                              v441 = (float)(*(float *)v430.i32 + (float)((float)(v436 * v421) * (float)v440.i32[0]))
                                   + (float)v304;
                              v442 = (float)(a7.n128_f32[0] + a7.n128_f32[0]) + 2.0;
                              LODWORD(v437) = v442;
                              LODWORD(v439) = v442 + 1;
                              *(float *)v430.i32 = (float)v439 - v442;
                              v443 = *(float *)v430.i32 * *(float *)v18.i32;
                              *(float *)v440.i32 = (float)v442;
                              v444 = v442 - *(float *)v440.i32;
                              *(float *)v18.i32 = v444 * *(float *)v18.i32;
                              *(float *)v430.i32 = v421 * *(float *)v430.i32;
                              v445 = 2 * v437;
                              v440.i16[0] = *(_WORD *)(v418 + v445);
                              v446 = v444 * v421;
                              v447 = vmovl_s16(v440).u32[0];
                              v448 = 2 * v439;
                              v440.i16[0] = *(_WORD *)(v418 + v448);
                              v449 = v443 * (float)v447;
                              v450 = (int16x4_t)vmovl_s16(v440).u64[0];
                              *(float *)v450.i32 = (float)v450.i32[0];
                              *(float *)v18.i32 = *(float *)v18.i32 * *(float *)v450.i32;
                              v450.i16[0] = *(_WORD *)(v419 + v445);
                              *(float *)v18.i32 = v449 + *(float *)v18.i32;
                              v451 = *(float *)v430.i32 * (float)vmovl_s16(v450).i32[0];
                              v430.i16[0] = *(_WORD *)(v419 + v448);
                              v452 = (float)(v441
                                           - (float)((float)((float)(*(float *)v18.i32 + v451)
                                                           + (float)(v446 * (float)vmovl_s16(v430).i32[0]))
                                                   + (float)v249))
                                   * 0.25;
                              v453 = (float)(v399 + v399) + -2.0;
                              v454 = v453;
                              LODWORD(v418) = v454 + 1;
                              v455 = v542 + 2 * v540 * v454;
                              v456 = v455 + 2 * v540;
                              v457 = (float)v418 - v453;
                              v458 = v453 - (float)v453;
                              v430.i16[0] = *(_WORD *)(v455 + v422);
                              v459 = (int16x4_t)vmovl_s16(v430).u64[0];
                              *(float *)v459.i32 = (float)v459.i32[0];
                              *(float *)v18.i32 = (float)(v420 * v457) * *(float *)v459.i32;
                              v459.i16[0] = *(_WORD *)(v455 + v425);
                              v460 = *(float *)v18.i32
                                   + (float)((float)(*(float *)v16.i32 * v457) * (float)vmovl_s16(v459).i32[0]);
                              v18.i16[0] = *(_WORD *)(v456 + v422);
                              v461 = (int16x4_t)vmovl_s16(v18).u64[0];
                              *(float *)v461.i32 = (float)(v420 * v458) * (float)v461.i32[0];
                              v462 = v460 + *(float *)v461.i32;
                              v461.i16[0] = *(_WORD *)(v456 + v425);
                              v463 = (int16x4_t)vmovl_s16(v461).u64[0];
                              *(float *)&a10 = (float)(v462
                                                     + (float)((float)(*(float *)v16.i32 * v458) * (float)v463.i32[0]))
                                             + (float)v544;
                              *(float *)&a11 = (float)(v399 + v399) + 2.0;
                              v464 = *(float *)&a11;
                              LODWORD(v418) = v464 + 1;
                              v465 = v542 + 2 * v540 * v464;
                              v466 = v465 + 2 * v540;
                              v467 = (float)v418 - *(float *)&a11;
                              v468 = v420 * v467;
                              v469 = *(float *)v16.i32 * v467;
                              *(float *)v463.i32 = (float)*(float *)&a11;
                              *(float *)&a11 = *(float *)&a11 - *(float *)v463.i32;
                              v470 = v420 * *(float *)&a11;
                              *(float *)&a11 = *(float *)v16.i32 * *(float *)&a11;
                              v16.i16[0] = *(_WORD *)(v465 + v422);
                              v463.i16[0] = *(_WORD *)(v465 + v425);
                              v471 = v468 * (float)vmovl_s16(v16).i32[0];
                              v472 = (int16x4_t)vmovl_s16(v463).u64[0];
                              *(float *)v472.i32 = (float)v472.i32[0];
                              v473 = v469 * *(float *)v472.i32;
                              v472.i16[0] = *(_WORD *)(v466 + v422);
                              v474 = v471 + v473;
                              v475 = (int16x4_t)vmovl_s16(v472).u64[0];
                              *(float *)v475.i32 = (float)v475.i32[0];
                              v476 = v470 * *(float *)v475.i32;
                              v475.i16[0] = *(_WORD *)(v466 + v425);
                              *(float *)&a11 = (float)(v474 + v476)
                                             + (float)(*(float *)&a11 * (float)vmovl_s16(v475).i32[0]);
                              v550 = v414;
                              v551 = v415;
                              v552 = v452;
                              v553 = v415;
                              v554 = LODWORD(a12);
                              v555 = (float)(*(float *)&a10 - (float)(*(float *)&a11 + (float)v222)) * 0.25;
                              v556 = v452;
                              v557 = v555;
                              v558 = v434;
                              a5.f32[0] = *(float *)&v412 * -0.5;
                              *(float *)&v412 = *(float *)&a9 * -0.5;
                              *(float *)&a9 = (float)(1 << *(_DWORD *)&v25[v26 + 32]);
                              *(float *)&a10 = v431 * -0.5;
                              a7.n128_f32[0] = a7.n128_f32[0] * *(float *)&a9;
                              *(_DWORD *)&v25[v26] = a7.n128_u32[0];
                              v31 = &v25[v26];
                              v547->f32[1] = v399 * *(float *)&a9;
                              a5.i32[1] = LODWORD(v412);
                              a5.f32[2] = v431 * -0.5;
                              if (!sub_20FD6F8C8(v547, v531, a3[6], a3[7], &v550, a5, *(float32_t *)(v530 + 8), a7.n128_f64[0], v412, a9, a10, a11, a12))
                              {
LABEL_146:
                                v28 = -0.5;
                                v18.i32[0] = 1.0;
                                v29 = -2.0;
                                v20.i32[0] = 0.25;
                                v19.i32[0] = 2.0;
                                goto LABEL_5;
                              }
LABEL_145:
                              v477 = (__n128 *)&(*a4)[48 * v532];
                              a5 = *(float32x4_t *)v31;
                              a6 = *((__n128 *)v31 + 1);
                              a7 = *((__n128 *)v31 + 2);
                              v477[1] = a6;
                              v477[2] = a7;
                              *v477 = (__n128)a5;
                              ++v532;
                              goto LABEL_146;
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      if (v221 > v34 && v222 > v34 && v224 > v34)
      {
        v249 = *(__int16 *)(v217 + 2 * v220);
        v248 = *(__int16 *)(v217 + 2 * (int)v32);
        v304 = *(__int16 *)(v217 + 2 * v223);
        v307 = v249 <= v34 || v248 <= v34;
        if (!v307 && v304 > v34)
        {
          v309 = *(__int16 *)(v219 + 2 * v220) <= v34 || *(__int16 *)(v219 + 2 * (int)v32) <= v34;
          if (!v309 && *(__int16 *)(v219 + 2 * v223) > v34)
          {
            v311 = (float)v34;
            v312 = v37 + 144 * (int)v36;
            v313 = *(_QWORD *)(v312 + 88);
            v314 = (float)(v213 + v29);
            v315 = (float)(a5.f32[0] + v29);
            v316 = *(_QWORD *)(v312 + 40);
            v317 = (v314 + 1);
            v318 = v313 + 2 * v316 * v315;
            v319 = v318 + 2 * v316;
            v320 = (float)v317 - (float)(v213 + v29);
            v321 = (float)(v315 + 1) - (float)(a5.f32[0] + v29);
            v322 = (float)(v213 + v29) - (float)(float)(v213 + v29);
            v323 = (float)(a5.f32[0] + v29) - (float)(float)(a5.f32[0] + v29);
            v13.i16[0] = *(_WORD *)(v318 + 2 * v314);
            v324 = (int16x4_t)vmovl_s16(v13).u64[0];
            *(float *)v324.i32 = (float)v324.i32[0];
            v325 = (float)(v320 * v321) * *(float *)v324.i32;
            v324.i16[0] = *(_WORD *)(v318 + 2 * v317);
            v13 = (int16x4_t)vmovl_s16(v324).u64[0];
            *(float *)v13.i32 = (float)v13.i32[0];
            v326 = (float)(v322 * v321) * *(float *)v13.i32;
            v13.i16[0] = *(_WORD *)(v319 + 2 * v314);
            v327 = v325 + v326;
            *(_QWORD *)&a12 = vmovl_s16(v13).u64[0];
            *(float *)&a12 = (float)SLODWORD(a12);
            v328 = (float)(v320 * v323) * *(float *)&a12;
            LOWORD(a12) = *(_WORD *)(v319 + 2 * v317);
            v329 = v327 + v328;
            *(_QWORD *)&a11 = vmovl_s16(*(int16x4_t *)&a12).u64[0];
            if ((float)(v329 + (float)((float)(v322 * v323) * (float)SLODWORD(a11))) > v311)
            {
              v544 = *(__int16 *)(v219 + 2 * (int)v32);
              v330 = v213;
              v331 = (v330 + 1);
              *(float *)&a11 = (float)v331 - v213;
              v332 = v213 - (float)v213;
              *(float *)v14.i32 = *(float *)&a11 * v323;
              v15.i16[0] = *(_WORD *)(v318 + 2 * v330);
              v333 = (int16x4_t)vmovl_s16(v15).u64[0];
              *(float *)v333.i32 = (float)v333.i32[0];
              v334 = (float)(*(float *)&a11 * v321) * *(float *)v333.i32;
              v333.i16[0] = *(_WORD *)(v318 + 2 * v331);
              *(float *)v16.i32 = v332 * v323;
              v15 = (int16x4_t)vmovl_s16(v333).u64[0];
              *(float *)v15.i32 = (float)v15.i32[0];
              v335 = (float)(v332 * v321) * *(float *)v15.i32;
              v15.i16[0] = *(_WORD *)(v319 + 2 * v330);
              v14.i16[0] = *(_WORD *)(v319 + 2 * v331);
              v336 = (float)(v334 + v335) + (float)((float)(*(float *)&a11 * v323) * (float)vmovl_s16(v15).i32[0]);
              v13 = (int16x4_t)vmovl_s16(v14).u64[0];
              *(float *)v13.i32 = (float)(v332 * v323) * (float)v13.i32[0];
              *(float *)&a12 = v336 + *(float *)v13.i32;
              if (*(float *)&a12 > v311)
              {
                v540 = v316;
                v542 = v313;
                v337 = v213 + *(float *)v19.i32;
                v338 = (float)(v213 + *(float *)v19.i32);
                v339 = (v338 + 1);
                v340 = (float)v339 - (float)(v213 + *(float *)v19.i32);
                *(float *)&a12 = v337 - (float)v337;
                *(float *)v14.i32 = v340 * v323;
                v341 = 2 * v338;
                v15.i16[0] = *(_WORD *)(v318 + v341);
                v342 = (int16x4_t)vmovl_s16(v15).u64[0];
                *(float *)v342.i32 = (float)v342.i32[0];
                v343 = (float)(v340 * v321) * *(float *)v342.i32;
                v342.i16[0] = *(_WORD *)(v318 + 2 * v339);
                v15 = (int16x4_t)vmovl_s16(v342).u64[0];
                *(float *)v15.i32 = (float)v15.i32[0];
                v344 = (float)(*(float *)&a12 * v321) * *(float *)v15.i32;
                v15.i16[0] = *(_WORD *)(v319 + v341);
                v14.i16[0] = *(_WORD *)(v319 + 2 * v339);
                v345 = (float)(v343 + v344) + (float)((float)(v340 * v323) * (float)vmovl_s16(v15).i32[0]);
                v13 = (int16x4_t)vmovl_s16(v14).u64[0];
                *(float *)v13.i32 = (float)v13.i32[0];
                if ((float)(v345 + (float)((float)(*(float *)&a12 * v323) * *(float *)v13.i32)) > v311)
                {
                  v346 = a5.f32[0];
                  v347 = v542 + 2 * v316 * v346;
                  v348 = v347 + 2 * v540;
                  v349 = (float)(v346 + 1) - a5.f32[0];
                  v350 = a5.f32[0] - (float)a5.f32[0];
                  *(float *)v15.i32 = v350 * v320;
                  v351 = 2 * v314;
                  v16.i16[0] = *(_WORD *)(v347 + v351);
                  v352 = (int16x4_t)vmovl_s16(v16).u64[0];
                  *(float *)v352.i32 = (float)v352.i32[0];
                  v353 = (float)(v320 * v349) * *(float *)v352.i32;
                  v354 = 2 * v317;
                  v352.i16[0] = *(_WORD *)(v347 + v354);
                  *(float *)v17.i32 = v322 * v350;
                  v16 = (int16x4_t)vmovl_s16(v352).u64[0];
                  *(float *)v16.i32 = (float)v16.i32[0];
                  v355 = (float)(v322 * v349) * *(float *)v16.i32;
                  v16.i16[0] = *(_WORD *)(v348 + v351);
                  v15.i16[0] = *(_WORD *)(v348 + v354);
                  v356 = (float)(v353 + v355) + (float)((float)(v350 * v320) * (float)vmovl_s16(v16).i32[0]);
                  v14 = (int16x4_t)vmovl_s16(v15).u64[0];
                  *(float *)v13.i32 = v356 + (float)((float)(v322 * v350) * (float)v14.i32[0]);
                  if (*(float *)v13.i32 > v311)
                  {
                    *(float *)v15.i32 = *(float *)&a11 * v350;
                    v357 = 2 * v330;
                    v16.i16[0] = *(_WORD *)(v347 + v357);
                    v358 = (int16x4_t)vmovl_s16(v16).u64[0];
                    *(float *)v358.i32 = (float)v358.i32[0];
                    v359 = (float)(*(float *)&a11 * v349) * *(float *)v358.i32;
                    v360 = 2 * v331;
                    v358.i16[0] = *(_WORD *)(v347 + v360);
                    *(float *)v17.i32 = v332 * v350;
                    v16 = (int16x4_t)vmovl_s16(v358).u64[0];
                    *(float *)v16.i32 = (float)v16.i32[0];
                    v361 = (float)(v332 * v349) * *(float *)v16.i32;
                    v16.i16[0] = *(_WORD *)(v348 + v357);
                    v15.i16[0] = *(_WORD *)(v348 + v360);
                    v362 = (float)(v359 + v361) + (float)((float)(*(float *)&a11 * v350) * (float)vmovl_s16(v16).i32[0]);
                    v14 = (int16x4_t)vmovl_s16(v15).u64[0];
                    *(float *)v13.i32 = v362 + (float)((float)(v332 * v350) * (float)v14.i32[0]);
                    if (*(float *)v13.i32 > v311)
                    {
                      *(float *)v14.i32 = v350 * v340;
                      v363 = 2 * v338;
                      v15.i16[0] = *(_WORD *)(v347 + 2 * v338);
                      v364 = (int16x4_t)vmovl_s16(v15).u64[0];
                      *(float *)v364.i32 = (float)v364.i32[0];
                      v365 = (float)(v340 * v349) * *(float *)v364.i32;
                      v366 = 2 * v339;
                      v364.i16[0] = *(_WORD *)(v347 + v366);
                      v15 = (int16x4_t)vmovl_s16(v364).u64[0];
                      *(float *)v15.i32 = (float)v15.i32[0];
                      v367 = (float)(*(float *)&a12 * v349) * *(float *)v15.i32;
                      v15.i16[0] = *(_WORD *)(v348 + 2 * v338);
                      v14.i16[0] = *(_WORD *)(v348 + v366);
                      v368 = (float)(v365 + v367) + (float)((float)(v350 * v340) * (float)vmovl_s16(v15).i32[0]);
                      v13 = (int16x4_t)vmovl_s16(v14).u64[0];
                      *(float *)v13.i32 = (float)v13.i32[0];
                      if ((float)(v368 + (float)((float)(*(float *)&a12 * v350) * *(float *)v13.i32)) > v311)
                      {
                        v369 = a5.f32[0] + *(float *)v19.i32;
                        v370 = (float)(a5.f32[0] + *(float *)v19.i32);
                        v371 = v542 + 2 * v540 * v370;
                        v372 = v371 + 2 * v540;
                        v373 = (float)(v370 + 1) - (float)(a5.f32[0] + *(float *)v19.i32);
                        *(float *)v14.i32 = (float)v369;
                        v374 = v369 - *(float *)v14.i32;
                        v14.i16[0] = *(_WORD *)(v371 + v351);
                        v375 = (int16x4_t)vmovl_s16(v14).u64[0];
                        *(float *)v375.i32 = (float)v375.i32[0];
                        v376 = (float)(v320 * v373) * *(float *)v375.i32;
                        v375.i16[0] = *(_WORD *)(v371 + v354);
                        v14 = (int16x4_t)vmovl_s16(v375).u64[0];
                        *(float *)v14.i32 = (float)v14.i32[0];
                        v377 = (float)(v322 * v373) * *(float *)v14.i32;
                        v14.i16[0] = *(_WORD *)(v372 + v351);
                        v378 = v376 + v377;
                        v13 = (int16x4_t)vmovl_s16(v14).u64[0];
                        *(float *)v13.i32 = (float)v13.i32[0];
                        v379 = (float)(v320 * v374) * *(float *)v13.i32;
                        v13.i16[0] = *(_WORD *)(v372 + v354);
                        v380 = v378 + v379;
                        v381 = (int16x4_t)vmovl_s16(v13).u64[0];
                        *(float *)v381.i32 = (float)v381.i32[0];
                        if ((float)(v380 + (float)((float)(v322 * v374) * *(float *)v381.i32)) > v311)
                        {
                          v382 = *(float *)&a11 * v373;
                          v383 = v332 * v373;
                          v381.i16[0] = *(_WORD *)(v371 + v357);
                          *(float *)&a11 = *(float *)&a11 * v374;
                          v384 = (int16x4_t)vmovl_s16(v381).u64[0];
                          *(float *)v384.i32 = (float)v384.i32[0];
                          v385 = v382 * *(float *)v384.i32;
                          v384.i16[0] = *(_WORD *)(v371 + v360);
                          *(float *)&a10 = v332 * v374;
                          v386 = (int16x4_t)vmovl_s16(v384).u64[0];
                          *(float *)v386.i32 = (float)v386.i32[0];
                          v387 = v383 * *(float *)v386.i32;
                          v386.i16[0] = *(_WORD *)(v372 + v357);
                          v388 = v385 + v387;
                          v389 = *(float *)&a11 * (float)vmovl_s16(v386).i32[0];
                          LOWORD(a11) = *(_WORD *)(v372 + v360);
                          v390 = v388 + v389;
                          *(_QWORD *)&a9 = vmovl_s16(*(int16x4_t *)&a11).u64[0];
                          if ((float)(v390 + (float)(*(float *)&a10 * (float)SLODWORD(a9))) > v311)
                          {
                            *(float *)&a9 = *(float *)&a12 * v374;
                            LOWORD(a10) = *(_WORD *)(v371 + v363);
                            LOWORD(a11) = *(_WORD *)(v371 + v366);
                            v391 = (float)(v340 * v373) * (float)vmovl_s16(*(int16x4_t *)&a10).i32[0];
                            *(_QWORD *)&a10 = vmovl_s16(*(int16x4_t *)&a11).u64[0];
                            *(float *)&a10 = (float)SLODWORD(a10);
                            v392 = (float)(*(float *)&a12 * v373) * *(float *)&a10;
                            LOWORD(a10) = *(_WORD *)(v372 + v363);
                            v393 = v391 + v392;
                            *(_QWORD *)&a8 = vmovl_s16(*(int16x4_t *)&a10).u64[0];
                            *(float *)&a8 = (float)SLODWORD(a8);
                            v394 = (float)(v340 * v374) * *(float *)&a8;
                            LOWORD(a8) = *(_WORD *)(v372 + v366);
                            v395 = v393 + v394;
                            a6.n128_u64[0] = vmovl_s16(*(int16x4_t *)&a8).u64[0];
                            a5.f32[0] = v395 + (float)((float)(*(float *)&a12 * v374) * (float)a6.n128_i32[0]);
                            if (a5.f32[0] > v311)
                              goto LABEL_144;
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
LABEL_5:
    ++v27;
    v25 = *a4;
    v30 = 0xAAAAAAAAAAAAAAABLL * ((a4[1] - *a4) >> 4);
    v26 += 48;
  }
  while (v27 < v30);
  v478 = v532;
  if (v532 > v30)
  {
    sub_20FD6B160(a4, v532 - v30);
    return;
  }
LABEL_151:
  if (v30 > v478)
    a4[1] = &v25[48 * v478];
}

uint64_t sub_20FD6F8C8(float32x2_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, float *a5, float32x4_t a6, float32_t a7, double a8, double a9, double a10, double a11, double a12, double a13)
{
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float32x2_t v22;
  float32x2_t v23;
  float32x2_t v24;
  float v25;
  uint64_t result;
  int v29;
  float32x2_t v30;
  float32x2_t v31;
  float v32;
  float v33;
  float32x2_t v34;
  float v35;

  v13 = a5[8];
  v15 = *a5;
  v14 = a5[1];
  *(float *)&a8 = v14 * v14;
  v16 = a5[2];
  v18 = a5[4];
  v17 = a5[5];
  v19 = v18 * *a5;
  v20 = (float)((float)((float)((float)((float)((float)(v14 + v14) * v16) * v17) - (float)(v13 * (float)(v14 * v14)))
                      - (float)((float)(v16 * v16) * v18))
              - (float)((float)(v17 * v17) * *a5))
      + (float)(v13 * v19);
  if (fabsf(v20) <= 0.00000011921)
    return 0;
  v21 = 1.0 / v20;
  v22.f32[0] = (float)((float)(v13 * v18) - (float)(v17 * v17)) * v21;
  v23.f32[0] = v21 * (float)((float)(v16 * a5[7]) - (float)(v13 * v14));
  *(float *)&a11 = (float)((float)(v14 * v17) - (float)(v16 * v18)) * v21;
  v22.i32[1] = v23.i32[0];
  v23.f32[1] = (float)((float)(v13 * v15) - (float)(v16 * v16)) * v21;
  *(float *)&a13 = v21 * (float)((float)(v16 * a5[3]) - (float)(v17 * v15));
  v24 = vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v22, a6.f32[0]), v23, *(float32x2_t *)a6.f32, 1), (float32x2_t)__PAIR64__(LODWORD(a13), LODWORD(a11)), a6, 2);
  v25 = fabsf(v24.f32[1]);
  if (fabsf(v24.f32[0]) > 1.0 || v25 > 1.0)
    return 0;
  result = 0;
  v29 = 1 << a1[4].i32[0];
  *(float *)&a8 = (float)(v19 - *(float *)&a8) * v21;
  v30 = (float32x2_t)vextq_s8((int8x16_t)a6, (int8x16_t)a6, 8uLL).u64[0];
  v31.f32[0] = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)&a11, *(float32x2_t *)a6.f32), *(float32x2_t *)&a13, *(float32x2_t *)a6.f32, 1), v30, *(float32x2_t *)&a8).f32[0];
  v32 = a6.f32[0] * v24.f32[0];
  a6.i32[0] = v30.i32[0];
  v33 = v31.f32[0] + (float)a1[1].i32[0];
  v31.i32[1] = v24.i32[1];
  v34 = vmul_f32(*(float32x2_t *)a6.f32, v31);
  v31.f32[0] = vabds_f32(a1[5].f32[1], v34.f32[0] + (float)(v32 + v34.f32[1]));
  a1[5].i32[1] = v31.i32[0];
  *(float32x2_t *)a6.f32 = vadd_f32(*a1, vmul_n_f32(v24, (float)v29));
  a1[2] = *(float32x2_t *)a6.f32;
  a1[3].f32[0] = v33;
  if (v31.f32[0] > a7 && a6.f32[0] >= 0.0)
  {
    result = 0;
    if (a6.f32[0] < (float)*(unint64_t *)(a2 + 8) && a6.f32[1] >= 0.0)
    {
      result = 0;
      if (a6.f32[1] < (float)*(unint64_t *)(a2 + 16) && v33 >= 0.0)
      {
        if (v33 < (float)(0x8E38E38E38E38E39 * ((a4 - a3) >> 4)))
        {
          v35 = *(float *)(a2 + 4);
          a1[1].f32[1] = v35 * powf(*(float *)(a2 + 104), v33);
          return 1;
        }
        return 0;
      }
    }
  }
  return result;
}

void sub_20FD6FB04(uint64_t a1, float *a2, uint64_t a3, char a4)
{
  float *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  float *v15;
  float *v16;
  __int128 v17;
  __int128 v18;
  float v19;
  float v20;
  float v21;
  float v22;
  unint64_t v23;
  float v24;
  float *v26;
  float *i;
  uint64_t v28;
  float v29;
  unint64_t v31;
  float *v32;
  float *v33;
  float v34;
  float *v36;
  float *v37;
  float v38;
  float *v40;
  __int128 v41;
  __int128 v42;
  float v43;
  float *v45;
  float v46;
  float v48;
  __int128 v50;
  __int128 v51;
  BOOL v52;
  __int128 v53;
  __int128 v54;
  unint64_t v55;
  float v56;
  float v58;
  __int128 v60;
  __int128 v61;
  unint64_t v62;
  float v63;
  float v65;
  float v66;
  BOOL v67;
  __int128 v68;
  __int128 v69;
  __int128 *v70;
  __int128 *v71;
  float v72;
  float v73;
  BOOL v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  float v79;
  float v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  float v85;
  float v86;
  __int128 v87;
  float *v88;
  BOOL v90;
  uint64_t v91;
  unint64_t v92;
  unint64_t v93;
  float *v94;
  float v95;
  float v96;
  float v97;
  BOOL v98;
  __int128 v99;
  __int128 v100;
  uint64_t v101;
  __int128 v102;
  _OWORD *v103;
  float *v104;
  float v105;
  int64_t v107;
  int64_t v108;
  int64_t v109;
  uint64_t v110;
  unint64_t v111;
  float v112;
  float v113;
  BOOL v114;
  unint64_t v115;
  float v116;
  float v117;
  BOOL v118;
  float v119;
  _OWORD *v121;
  __int128 v122;
  __int128 v123;
  uint64_t v124;
  uint64_t v125;
  float v126;
  float v127;
  BOOL v128;
  float v129;
  int64_t v131;
  uint64_t v133;
  unint64_t v134;
  __int128 v135;
  __int128 v136;
  _OWORD *v137;
  uint64_t v138;
  int64_t v139;
  float v140;
  float v141;
  BOOL v142;
  __int128 v143;
  __int128 v144;
  uint64_t v145;
  unint64_t v146;
  unint64_t v147;
  unint64_t v148;
  float v149;
  float v150;
  float v151;
  BOOL v152;
  __int128 v153;
  __int128 v154;
  __int128 v155;
  __int128 v156;
  unint64_t v157;
  unint64_t v158;
  float v159;
  float *v161;
  float v162;
  float v163;
  float v164;
  BOOL v165;
  uint64_t v166;
  __int128 v167;
  float v168;
  __int128 v170;
  __int128 v171;
  __int128 v172;
  __int128 v173;
  __int128 v174;
  __int128 v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  __int128 v179;
  __int128 v180;
  __int128 v181;
  __int128 v182;
  __int128 v183;
  __int128 v184;
  __int128 v185;
  __int128 v186;
  __int128 v187;
  __int128 v188;
  __int128 v189;
  __int128 v190;
  __int128 v191;
  __int128 v192;
  __int128 v193;
  __int128 v194;
  __int128 v195;
  __int128 v196;
  __int128 v197;
  __int128 v198;
  __int128 v199;
  __int128 v200;
  __int128 v201;
  __int128 v202;
  uint64_t v203;
  uint64_t v204;
  __int128 v205;
  uint64_t v206;

__n128 sub_20FD7060C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  __n128 result;
  float v11;
  BOOL v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  float v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  float v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  float v27;
  float v28;
  BOOL v29;
  BOOL v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  float v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  float v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  float v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;

  sub_20FD70828((float *)a1, (float *)a2, (float *)a3);
  result.n128_u32[0] = *(_DWORD *)(a4 + 4);
  v11 = *(float *)(a3 + 4);
  if (result.n128_f32[0] < v11 || (result.n128_f32[0] == v11 ? (v12 = *(float *)a4 < *(float *)a3) : (v12 = 0), v12))
  {
    result = *(__n128 *)a3;
    v13 = *(_OWORD *)(a3 + 16);
    v14 = *(_OWORD *)(a3 + 32);
    v16 = *(_OWORD *)(a4 + 16);
    v15 = *(_OWORD *)(a4 + 32);
    *(_OWORD *)a3 = *(_OWORD *)a4;
    *(_OWORD *)(a3 + 16) = v16;
    *(_OWORD *)(a3 + 32) = v15;
    *(_OWORD *)(a4 + 16) = v13;
    *(_OWORD *)(a4 + 32) = v14;
    *(__n128 *)a4 = result;
    result.n128_u32[0] = *(_DWORD *)(a3 + 4);
    v17 = *(float *)(a2 + 4);
    if (result.n128_f32[0] < v17 || result.n128_f32[0] == v17 && *(float *)a3 < *(float *)a2)
    {
      result = *(__n128 *)a2;
      v18 = *(_OWORD *)(a2 + 16);
      v19 = *(_OWORD *)(a2 + 32);
      v21 = *(_OWORD *)(a3 + 16);
      v20 = *(_OWORD *)(a3 + 32);
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *(_OWORD *)(a2 + 16) = v21;
      *(_OWORD *)(a2 + 32) = v20;
      *(_OWORD *)(a3 + 16) = v18;
      *(_OWORD *)(a3 + 32) = v19;
      *(__n128 *)a3 = result;
      result.n128_u32[0] = *(_DWORD *)(a2 + 4);
      v22 = *(float *)(a1 + 4);
      if (result.n128_f32[0] < v22 || result.n128_f32[0] == v22 && *(float *)a2 < *(float *)a1)
      {
        result = *(__n128 *)a1;
        v23 = *(_OWORD *)(a1 + 16);
        v24 = *(_OWORD *)(a1 + 32);
        v26 = *(_OWORD *)(a2 + 16);
        v25 = *(_OWORD *)(a2 + 32);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(_OWORD *)(a1 + 16) = v26;
        *(_OWORD *)(a1 + 32) = v25;
        *(_OWORD *)(a2 + 16) = v23;
        *(_OWORD *)(a2 + 32) = v24;
        *(__n128 *)a2 = result;
      }
    }
  }
  v27 = *(float *)(a5 + 4);
  v28 = *(float *)(a4 + 4);
  v29 = v27 == v28;
  if (v27 < v28
    || ((result.n128_u32[0] = *(_DWORD *)a4, v29) ? (v30 = *(float *)a5 < result.n128_f32[0]) : (v30 = 0), v30))
  {
    result = *(__n128 *)a4;
    v31 = *(_OWORD *)(a4 + 16);
    v32 = *(_OWORD *)(a4 + 32);
    v34 = *(_OWORD *)(a5 + 16);
    v33 = *(_OWORD *)(a5 + 32);
    *(_OWORD *)a4 = *(_OWORD *)a5;
    *(_OWORD *)(a4 + 16) = v34;
    *(_OWORD *)(a4 + 32) = v33;
    *(_OWORD *)(a5 + 16) = v31;
    *(_OWORD *)(a5 + 32) = v32;
    *(__n128 *)a5 = result;
    result.n128_u32[0] = *(_DWORD *)(a4 + 4);
    v35 = *(float *)(a3 + 4);
    if (result.n128_f32[0] < v35
      || result.n128_f32[0] == v35 && (result.n128_u32[0] = *(_DWORD *)a3, *(float *)a4 < *(float *)a3))
    {
      result = *(__n128 *)a3;
      v36 = *(_OWORD *)(a3 + 16);
      v37 = *(_OWORD *)(a3 + 32);
      v39 = *(_OWORD *)(a4 + 16);
      v38 = *(_OWORD *)(a4 + 32);
      *(_OWORD *)a3 = *(_OWORD *)a4;
      *(_OWORD *)(a3 + 16) = v39;
      *(_OWORD *)(a3 + 32) = v38;
      *(_OWORD *)(a4 + 16) = v36;
      *(_OWORD *)(a4 + 32) = v37;
      *(__n128 *)a4 = result;
      result.n128_u32[0] = *(_DWORD *)(a3 + 4);
      v40 = *(float *)(a2 + 4);
      if (result.n128_f32[0] < v40
        || result.n128_f32[0] == v40 && (result.n128_u32[0] = *(_DWORD *)a2, *(float *)a3 < *(float *)a2))
      {
        result = *(__n128 *)a2;
        v41 = *(_OWORD *)(a2 + 16);
        v42 = *(_OWORD *)(a2 + 32);
        v44 = *(_OWORD *)(a3 + 16);
        v43 = *(_OWORD *)(a3 + 32);
        *(_OWORD *)a2 = *(_OWORD *)a3;
        *(_OWORD *)(a2 + 16) = v44;
        *(_OWORD *)(a2 + 32) = v43;
        *(_OWORD *)(a3 + 16) = v41;
        *(_OWORD *)(a3 + 32) = v42;
        *(__n128 *)a3 = result;
        result.n128_u32[0] = *(_DWORD *)(a2 + 4);
        v45 = *(float *)(a1 + 4);
        if (result.n128_f32[0] < v45
          || result.n128_f32[0] == v45 && (result.n128_u32[0] = *(_DWORD *)a1, *(float *)a2 < *(float *)a1))
        {
          result = *(__n128 *)a1;
          v46 = *(_OWORD *)(a1 + 16);
          v47 = *(_OWORD *)(a1 + 32);
          v49 = *(_OWORD *)(a2 + 16);
          v48 = *(_OWORD *)(a2 + 32);
          *(_OWORD *)a1 = *(_OWORD *)a2;
          *(_OWORD *)(a1 + 16) = v49;
          *(_OWORD *)(a1 + 32) = v48;
          *(_OWORD *)(a2 + 16) = v46;
          *(_OWORD *)(a2 + 32) = v47;
          *(__n128 *)a2 = result;
        }
      }
    }
  }
  return result;
}

float *sub_20FD70828(float *result, float *a2, float *a3)
{
  float v3;
  float v4;
  float v5;
  BOOL v6;
  float v7;
  BOOL v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  float v14;
  float v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  float v21;
  BOOL v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  float v28;
  float v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;

  v3 = *a2;
  v4 = a2[1];
  v5 = result[1];
  if (v4 < v5 || (v4 == v5 ? (v6 = v3 < *result) : (v6 = 0), v6))
  {
    v21 = a3[1];
    if (v21 < v4 || (v21 == v4 ? (v22 = *a3 < v3) : (v22 = 0), v22))
    {
      v30 = *(_OWORD *)result;
      v31 = *((_OWORD *)result + 1);
      v32 = *((_OWORD *)result + 2);
      v36 = *((_OWORD *)a3 + 1);
      v35 = *((_OWORD *)a3 + 2);
      *(_OWORD *)result = *(_OWORD *)a3;
      *((_OWORD *)result + 1) = v36;
      *((_OWORD *)result + 2) = v35;
    }
    else
    {
      v23 = *(_OWORD *)result;
      v24 = *((_OWORD *)result + 1);
      v25 = *((_OWORD *)result + 2);
      v27 = *((_OWORD *)a2 + 1);
      v26 = *((_OWORD *)a2 + 2);
      *(_OWORD *)result = *(_OWORD *)a2;
      *((_OWORD *)result + 1) = v27;
      *((_OWORD *)result + 2) = v26;
      *((_OWORD *)a2 + 1) = v24;
      *((_OWORD *)a2 + 2) = v25;
      *(_OWORD *)a2 = v23;
      v28 = a3[1];
      v29 = a2[1];
      if (v28 >= v29 && (v28 != v29 || *a3 >= *a2))
        return result;
      v30 = *(_OWORD *)a2;
      v31 = *((_OWORD *)a2 + 1);
      v32 = *((_OWORD *)a2 + 2);
      v34 = *((_OWORD *)a3 + 1);
      v33 = *((_OWORD *)a3 + 2);
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *((_OWORD *)a2 + 1) = v34;
      *((_OWORD *)a2 + 2) = v33;
    }
    *((_OWORD *)a3 + 1) = v31;
    *((_OWORD *)a3 + 2) = v32;
    *(_OWORD *)a3 = v30;
    return result;
  }
  v7 = a3[1];
  if (v7 < v4 || (v7 == v4 ? (v8 = *a3 < v3) : (v8 = 0), v8))
  {
    v9 = *(_OWORD *)a2;
    v10 = *((_OWORD *)a2 + 1);
    v11 = *((_OWORD *)a2 + 2);
    v13 = *((_OWORD *)a3 + 1);
    v12 = *((_OWORD *)a3 + 2);
    *(_OWORD *)a2 = *(_OWORD *)a3;
    *((_OWORD *)a2 + 1) = v13;
    *((_OWORD *)a2 + 2) = v12;
    *((_OWORD *)a3 + 1) = v10;
    *((_OWORD *)a3 + 2) = v11;
    *(_OWORD *)a3 = v9;
    v14 = a2[1];
    v15 = result[1];
    if (v14 < v15 || v14 == v15 && *a2 < *result)
    {
      v16 = *(_OWORD *)result;
      v17 = *((_OWORD *)result + 1);
      v18 = *((_OWORD *)result + 2);
      v20 = *((_OWORD *)a2 + 1);
      v19 = *((_OWORD *)a2 + 2);
      *(_OWORD *)result = *(_OWORD *)a2;
      *((_OWORD *)result + 1) = v20;
      *((_OWORD *)result + 2) = v19;
      *((_OWORD *)a2 + 1) = v17;
      *((_OWORD *)a2 + 2) = v18;
      *(_OWORD *)a2 = v16;
    }
  }
  return result;
}

BOOL sub_20FD7096C(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  _BOOL8 result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  float v11;
  float v12;
  float v13;
  BOOL v14;
  __int128 v15;
  uint64_t v16;
  __int128 v17;
  _OWORD *v18;
  float *v19;
  float v20;
  _OWORD *v22;
  float v23;
  float v24;
  BOOL v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 *v31;
  float *v32;
  float *v33;
  float v34;
  float v35;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  float v42;
  float v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  float v48;
  float v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  uint64_t v56;

  v4 = 0xAAAAAAAAAAAAAAABLL * ((a2 - a1) >> 4);
  result = 1;
  switch(v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      v22 = (_OWORD *)(a2 - 48);
      v23 = *(float *)(a2 - 44);
      v24 = *(float *)(a1 + 4);
      if (v23 < v24 || (v23 == v24 ? (v25 = *(float *)v22 < *(float *)a1) : (v25 = 0), v25))
      {
        v26 = *(_OWORD *)a1;
        v27 = *(_OWORD *)(a1 + 16);
        v28 = *(_OWORD *)(a1 + 32);
        v30 = *(_OWORD *)(a2 - 32);
        v29 = *(_OWORD *)(a2 - 16);
        *(_OWORD *)a1 = *v22;
        *(_OWORD *)(a1 + 16) = v30;
        *(_OWORD *)(a1 + 32) = v29;
        *(_OWORD *)(a2 - 32) = v27;
        *(_OWORD *)(a2 - 16) = v28;
        *v22 = v26;
      }
      return result;
    case 3uLL:
      sub_20FD70828((float *)a1, (float *)(a1 + 48), (float *)(a2 - 48));
      return 1;
    case 4uLL:
      v31 = (__int128 *)(a1 + 48);
      v32 = (float *)(a1 + 96);
      v33 = (float *)(a2 - 48);
      sub_20FD70828((float *)a1, (float *)(a1 + 48), (float *)(a1 + 96));
      v34 = *(float *)(a2 - 44);
      v35 = *(float *)(a1 + 100);
      if (v34 >= v35 && (v34 != v35 || *v33 >= *v32))
        return 1;
      v37 = *(_OWORD *)v32;
      v38 = *(_OWORD *)(a1 + 112);
      v39 = *(_OWORD *)(a1 + 128);
      v41 = *(_OWORD *)(a2 - 32);
      v40 = *(_OWORD *)(a2 - 16);
      *(_OWORD *)v32 = *(_OWORD *)v33;
      *(_OWORD *)(a1 + 112) = v41;
      *(_OWORD *)(a1 + 128) = v40;
      *(_OWORD *)(a2 - 32) = v38;
      *(_OWORD *)(a2 - 16) = v39;
      *(_OWORD *)v33 = v37;
      v42 = *(float *)(a1 + 100);
      v43 = *(float *)(a1 + 52);
      if (v42 < v43 || (result = 1, v42 == v43) && *v32 < *(float *)v31)
      {
        v45 = *(_OWORD *)(a1 + 64);
        v44 = *(_OWORD *)(a1 + 80);
        v46 = *v31;
        v47 = *(_OWORD *)(a1 + 112);
        *v31 = *(_OWORD *)v32;
        *(_OWORD *)(a1 + 64) = v47;
        *(_OWORD *)(a1 + 80) = *(_OWORD *)(a1 + 128);
        *(_OWORD *)v32 = v46;
        *(_OWORD *)(a1 + 112) = v45;
        *(_OWORD *)(a1 + 128) = v44;
        v48 = *(float *)(a1 + 52);
        v49 = *(float *)(a1 + 4);
        if (v48 < v49 || (result = 1, v48 == v49) && *(float *)(a1 + 48) < *(float *)a1)
        {
          v51 = *(_OWORD *)(a1 + 16);
          v50 = *(_OWORD *)(a1 + 32);
          v52 = *(_OWORD *)a1;
          v53 = *(_OWORD *)(a1 + 64);
          *(_OWORD *)a1 = *v31;
          *(_OWORD *)(a1 + 16) = v53;
          *(_OWORD *)(a1 + 32) = *(_OWORD *)(a1 + 80);
          *v31 = v52;
          *(_OWORD *)(a1 + 64) = v51;
          result = 1;
          *(_OWORD *)(a1 + 80) = v50;
        }
      }
      return result;
    case 5uLL:
      sub_20FD7060C(a1, a1 + 48, a1 + 96, a1 + 144, a2 - 48);
      return 1;
    default:
      v6 = a1 + 96;
      sub_20FD70828((float *)a1, (float *)(a1 + 48), (float *)(a1 + 96));
      v7 = a1 + 144;
      if (a1 + 144 == a2)
        return 1;
      v8 = 0;
      v9 = 0;
      break;
  }
  while (1)
  {
    v11 = *(float *)v7;
    v12 = *(float *)(v7 + 4);
    v13 = *(float *)(v6 + 4);
    if (v12 < v13 || (v12 == v13 ? (v14 = v11 < *(float *)v6) : (v14 = 0), v14))
    {
      v56 = *(_QWORD *)(v7 + 40);
      v54 = *(_OWORD *)(v7 + 8);
      v55 = *(_OWORD *)(v7 + 24);
      v15 = *(_OWORD *)(v6 + 16);
      *(_OWORD *)v7 = *(_OWORD *)v6;
      *(_OWORD *)(v7 + 16) = v15;
      *(_OWORD *)(v7 + 32) = *(_OWORD *)(v6 + 32);
      v10 = a1;
      if (v6 != a1)
      {
        v16 = v8;
        while (1)
        {
          v18 = (_OWORD *)(a1 + v16);
          v19 = (float *)(a1 + v16 + 48);
          v20 = *(float *)(a1 + v16 + 52);
          if (v12 >= v20 && (v12 != v20 || v11 >= *v19))
            break;
          v17 = *(_OWORD *)(a1 + v16 + 64);
          v18[6] = *(_OWORD *)v19;
          v18[7] = v17;
          v18[8] = *(_OWORD *)(a1 + v16 + 80);
          v16 -= 48;
          if (v16 == -96)
          {
            v10 = a1;
            goto LABEL_6;
          }
        }
        v10 = a1 + v16 + 96;
      }
LABEL_6:
      *(float *)v10 = v11;
      *(float *)(v10 + 4) = v12;
      *(_OWORD *)(v10 + 8) = v54;
      *(_OWORD *)(v10 + 24) = v55;
      *(_QWORD *)(v10 + 40) = v56;
      if (++v9 == 8)
        return v7 + 48 == a2;
    }
    v6 = v7;
    v8 += 48;
    v7 += 48;
    if (v7 == a2)
      return 1;
  }
}

float sub_20FD70CC4(uint64_t a1, uint64_t a2, float a3, float a4, double a5, double a6, double a7, double a8)
{
  unsigned int v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  uint64_t v21;
  float v22;
  int v23;
  uint64_t v24;
  float v25;
  int16x4_t v26;
  float v27;
  float v28;
  int16x4_t v29;
  float v30;

  v8 = a3;
  v9 = a4;
  v10 = a3 + 1;
  v11 = v9 + 1;
  v12 = a2 + 2 * v9 * a1;
  v13 = v12 + 2 * a1;
  v14 = (float)v10 - a3;
  v15 = (float)v11 - a4;
  v16 = v14 * v15;
  v17 = a3 - (float)a3;
  v18 = v17 * v15;
  *(float *)&a8 = (float)a4;
  v19 = a4 - *(float *)&a8;
  v20 = v14 * v19;
  v21 = 2 * v8;
  LOWORD(a8) = *(_WORD *)(v12 + v21);
  v22 = v17 * v19;
  v23 = vmovl_s16(*(int16x4_t *)&a8).u32[0];
  v24 = 2 * v10;
  LOWORD(a8) = *(_WORD *)(v12 + v24);
  v25 = v16 * (float)v23;
  v26 = (int16x4_t)vmovl_s16(*(int16x4_t *)&a8).u64[0];
  *(float *)v26.i32 = (float)v26.i32[0];
  v27 = v18 * *(float *)v26.i32;
  v26.i16[0] = *(_WORD *)(v13 + v21);
  v28 = v25 + v27;
  v29 = (int16x4_t)vmovl_s16(v26).u64[0];
  *(float *)v29.i32 = (float)v29.i32[0];
  v30 = v20 * *(float *)v29.i32;
  v29.i16[0] = *(_WORD *)(v13 + v24);
  return (float)(v28 + v30) + (float)(v22 * (float)vmovl_s16(v29).i32[0]);
}

__n128 sub_20FD70D70(uint64_t a1, __int128 *a2)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;
  uint64_t v6;
  _QWORD *v7;
  void *v8;
  void (***v9)(_QWORD);
  void (***v10)(_QWORD);
  void *v11;
  void (***v12)(_QWORD);
  void (***v13)(_QWORD);
  void (**v14)(_QWORD);
  BOOL v15;
  uint64_t v16;
  _QWORD *v17;
  void *v18;
  void (***v19)(_QWORD);
  void (***v20)(_QWORD);
  void *v21;
  void (***v22)(_QWORD);
  void (***v23)(_QWORD);
  void (**v24)(_QWORD);
  __int128 *v25;
  uint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  uint64_t v29;
  float v30;
  int v31;
  __int128 v32;
  __int128 v33;
  float v34;
  uint64_t v35;
  __int128 v36;
  __int128 v37;
  uint64_t v38;
  __int128 v39;
  __int128 v40;
  __n128 result;

  v3 = *a2;
  v4 = a2[1];
  v5 = a2[2];
  *(_OWORD *)(a1 + 52) = *(__int128 *)((char *)a2 + 44);
  *(_OWORD *)(a1 + 40) = v5;
  *(_OWORD *)(a1 + 24) = v4;
  *(_OWORD *)(a1 + 8) = v3;
  v6 = operator new();
  *(_OWORD *)(v6 + 80) = 0u;
  *(_OWORD *)(v6 + 96) = 0u;
  *(_OWORD *)(v6 + 48) = 0u;
  *(_OWORD *)(v6 + 64) = 0u;
  *(_QWORD *)(v6 + 112) = 0;
  *(_QWORD *)v6 = 0x3E4CCCCD3DCCCCCDLL;
  *(_OWORD *)(v6 + 8) = xmmword_2103BF960;
  *(int64x2_t *)(v6 + 24) = vdupq_n_s64(3uLL);
  *(_QWORD *)(v6 + 40) = 1;
  *(_OWORD *)(v6 + 72) = 0u;
  *(_OWORD *)(v6 + 88) = 0u;
  *(_OWORD *)(v6 + 56) = 0u;
  *(_QWORD *)(v6 + 104) = 0x404000003F800000;
  v7 = *(_QWORD **)(a1 + 80);
  *(_QWORD *)(a1 + 80) = v6;
  if (v7)
  {
    v8 = (void *)v7[10];
    if (v8)
    {
      v7[11] = v8;
      operator delete(v8);
    }
    v9 = (void (***)(_QWORD))v7[7];
    if (v9)
    {
      v10 = (void (***)(_QWORD))v7[8];
      v11 = (void *)v7[7];
      if (v10 != v9)
      {
        v12 = v10 - 18;
        v13 = v10 - 18;
        do
        {
          v14 = *v13;
          v13 -= 18;
          (*v14)(v12);
          v15 = v12 == v9;
          v12 = v13;
        }
        while (!v15);
        v11 = (void *)v7[7];
      }
      v7[8] = v9;
      operator delete(v11);
    }
    MEMORY[0x212BC6398](v7, 0x1020C40F2A84FA7);
  }
  v16 = operator new();
  *(_OWORD *)v16 = xmmword_2103BF960;
  *(int64x2_t *)(v16 + 16) = vdupq_n_s64(3uLL);
  *(_QWORD *)(v16 + 32) = 1;
  *(_QWORD *)(v16 + 40) = 0;
  *(_OWORD *)(v16 + 48) = 0u;
  *(_OWORD *)(v16 + 64) = 0u;
  *(_OWORD *)(v16 + 80) = 0u;
  v17 = *(_QWORD **)(a1 + 88);
  *(_QWORD *)(a1 + 88) = v16;
  if (v17)
  {
    v18 = (void *)v17[9];
    if (v18)
    {
      v17[10] = v18;
      operator delete(v18);
    }
    v19 = (void (***)(_QWORD))v17[6];
    if (v19)
    {
      v20 = (void (***)(_QWORD))v17[7];
      v21 = (void *)v17[6];
      if (v20 != v19)
      {
        v22 = v20 - 18;
        v23 = v20 - 18;
        do
        {
          v24 = *v23;
          v23 -= 18;
          (*v24)(v22);
          v15 = v22 == v19;
          v22 = v23;
        }
        while (!v15);
        v21 = (void *)v17[6];
      }
      v17[7] = v19;
      operator delete(v21);
    }
    MEMORY[0x212BC6398](v17, 0x1020C4024B85F43);
  }
  v25 = (__int128 *)(a1 + 8);
  *(_QWORD *)(a1 + 60) = 0x3F80000000000000;
  v26 = operator new();
  *(_OWORD *)v26 = 0u;
  *(_OWORD *)(v26 + 16) = 0u;
  *(_OWORD *)(v26 + 80) = 0u;
  *(_OWORD *)(v26 + 96) = 0u;
  *(_OWORD *)(v26 + 112) = 0u;
  *(_OWORD *)(v26 + 128) = 0u;
  *(_OWORD *)(v26 + 160) = 0u;
  *(_OWORD *)(v26 + 176) = 0u;
  *(_OWORD *)(v26 + 192) = 0u;
  *(_OWORD *)(v26 + 208) = 0u;
  *(_OWORD *)(v26 + 224) = 0u;
  *(_OWORD *)(v26 + 240) = 0u;
  *(_OWORD *)(v26 + 256) = 0u;
  *(_OWORD *)(v26 + 272) = 0u;
  *(_OWORD *)(v26 + 288) = 0u;
  *(_OWORD *)(v26 + 304) = 0u;
  *(_OWORD *)(v26 + 320) = 0u;
  *(_OWORD *)(v26 + 336) = 0u;
  *(_OWORD *)(v26 + 352) = 0u;
  *(_OWORD *)(v26 + 368) = 0u;
  *(_OWORD *)(v26 + 384) = 0u;
  *(_OWORD *)(v26 + 144) = 0u;
  *(_QWORD *)v26 = &off_24CA06E50;
  *(_OWORD *)(v26 + 16) = 0u;
  *(_OWORD *)(v26 + 32) = 0u;
  *(_OWORD *)(v26 + 32) = 0u;
  *(_OWORD *)(v26 + 48) = 0u;
  *(_OWORD *)(v26 + 48) = 0u;
  *(_OWORD *)(v26 + 64) = 0u;
  *(_OWORD *)(v26 + 57) = 0u;
  *(_OWORD *)(v26 + 88) = 0u;
  *(_OWORD *)(v26 + 104) = 0u;
  *(_OWORD *)(v26 + 120) = 0u;
  *(_QWORD *)(v26 + 136) = 0;
  *(_QWORD *)(v26 + 144) = &off_24CA06E20;
  *(_OWORD *)(v26 + 160) = 0u;
  *(_OWORD *)(v26 + 176) = 0u;
  *(_OWORD *)(v26 + 192) = 0u;
  *(_OWORD *)(v26 + 201) = 0u;
  *(_OWORD *)(v26 + 232) = 0u;
  *(_OWORD *)(v26 + 248) = 0u;
  *(_OWORD *)(v26 + 264) = 0u;
  *(_QWORD *)(v26 + 280) = 0;
  *(_OWORD *)(v26 + 288) = xmmword_2103BF960;
  *(int64x2_t *)(v26 + 304) = vdupq_n_s64(3uLL);
  *(_QWORD *)(v26 + 320) = 1;
  *(_QWORD *)(v26 + 344) = 0;
  *(_QWORD *)(v26 + 352) = 0;
  *(_QWORD *)(v26 + 336) = 0;
  *(_QWORD *)(v26 + 392) = 0;
  *(_QWORD *)(v26 + 400) = 0;
  *(_QWORD *)(v26 + 408) = 0;
  v27 = *(_QWORD **)(a1 + 72);
  *(_QWORD *)(a1 + 72) = v26;
  if (v27)
  {
    v28 = sub_21011904C(v27);
    MEMORY[0x212BC6398](v28, 0x10B0C4036057213);
  }
  v29 = *(_QWORD *)(a1 + 80);
  v31 = *(_DWORD *)(a1 + 60);
  v30 = *(float *)(a1 + 64);
  v32 = *v25;
  v33 = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(v29 + 34) = *(_OWORD *)(a1 + 34);
  *(_OWORD *)(v29 + 24) = v33;
  *(_OWORD *)(v29 + 8) = v32;
  sub_20FD715B8((vImagePixelCount *)(v29 + 8));
  *(_DWORD *)v29 = v31;
  *(float *)(v29 + 4) = v30;
  v34 = (float)*(unint64_t *)(a1 + 32);
  *(float *)(v29 + 108) = v34 / 0.69315;
  *(float *)(v29 + 104) = exp2f(1.0 / v34);
  *(float *)(v29 + 112) = logf(v30);
  v35 = *(_QWORD *)(a1 + 88);
  v36 = *v25;
  v37 = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(v35 + 26) = *(_OWORD *)(a1 + 34);
  *(_OWORD *)v35 = v36;
  *(_OWORD *)(v35 + 16) = v37;
  sub_20FD72F38((vImagePixelCount *)v35);
  v38 = *(_QWORD *)(a1 + 72);
  v39 = *(_OWORD *)(a1 + 34);
  v40 = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(v38 + 288) = *v25;
  *(_OWORD *)(v38 + 304) = v40;
  *(_OWORD *)(v38 + 314) = v39;
  *(_QWORD *)(v38 + 360) = 0;
  sub_210118D8C(v38, (_QWORD *)(v38 + 288));
  return result;
}

void sub_20FD71104(uint64_t a1, uint64_t a2)
{
  sub_21011A17C(*(_QWORD **)(a1 + 72), *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), a2);
}

void sub_20FD7111C(_QWORD *a1)
{
  sub_20FD71460(a1);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20FD71140(_QWORD *a1)
{
  void *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  *a1 = &off_24CA06E50;
  v2 = (void *)a1[15];
  if (v2)
  {
    a1[16] = v2;
    operator delete(v2);
  }
  v3 = (std::__shared_weak_count *)a1[14];
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
      v6 = (std::__shared_weak_count *)a1[12];
      if (v6)
        goto LABEL_8;
      return a1;
    }
  }
  v6 = (std::__shared_weak_count *)a1[12];
  if (!v6)
    return a1;
LABEL_8:
  v7 = (unint64_t *)&v6->__shared_owners_;
  do
    v8 = __ldaxr(v7);
  while (__stlxr(v8 - 1, v7));
  if (v8)
    return a1;
  ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
  std::__shared_weak_count::__release_weak(v6);
  return a1;
}

void sub_20FD71208(_QWORD *a1)
{
  void *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  *a1 = &off_24CA06E50;
  v2 = (void *)a1[15];
  if (v2)
  {
    a1[16] = v2;
    operator delete(v2);
  }
  v3 = (std::__shared_weak_count *)a1[14];
  if (!v3)
    goto LABEL_7;
  p_shared_owners = (unint64_t *)&v3->__shared_owners_;
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (!v5)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
    v6 = (std::__shared_weak_count *)a1[12];
    if (!v6)
      goto LABEL_13;
  }
  else
  {
LABEL_7:
    v6 = (std::__shared_weak_count *)a1[12];
    if (!v6)
      goto LABEL_13;
  }
  v7 = (unint64_t *)&v6->__shared_owners_;
  do
    v8 = __ldaxr(v7);
  while (__stlxr(v8 - 1, v7));
  if (!v8)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
LABEL_13:
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20FD712D0(_QWORD *a1)
{
  void *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  *a1 = &off_24CA06E20;
  v2 = (void *)a1[15];
  if (v2)
  {
    a1[16] = v2;
    operator delete(v2);
  }
  v3 = (std::__shared_weak_count *)a1[14];
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
      v6 = (std::__shared_weak_count *)a1[12];
      if (v6)
        goto LABEL_8;
      return a1;
    }
  }
  v6 = (std::__shared_weak_count *)a1[12];
  if (!v6)
    return a1;
LABEL_8:
  v7 = (unint64_t *)&v6->__shared_owners_;
  do
    v8 = __ldaxr(v7);
  while (__stlxr(v8 - 1, v7));
  if (v8)
    return a1;
  ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
  std::__shared_weak_count::__release_weak(v6);
  return a1;
}

void sub_20FD71398(_QWORD *a1)
{
  void *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  *a1 = &off_24CA06E20;
  v2 = (void *)a1[15];
  if (v2)
  {
    a1[16] = v2;
    operator delete(v2);
  }
  v3 = (std::__shared_weak_count *)a1[14];
  if (!v3)
    goto LABEL_7;
  p_shared_owners = (unint64_t *)&v3->__shared_owners_;
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (!v5)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
    v6 = (std::__shared_weak_count *)a1[12];
    if (!v6)
      goto LABEL_13;
  }
  else
  {
LABEL_7:
    v6 = (std::__shared_weak_count *)a1[12];
    if (!v6)
      goto LABEL_13;
  }
  v7 = (unint64_t *)&v6->__shared_owners_;
  do
    v8 = __ldaxr(v7);
  while (__stlxr(v8 - 1, v7));
  if (!v8)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
LABEL_13:
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20FD71460(_QWORD *a1)
{
  _QWORD *v2;
  void *v3;
  void (***v4)(_QWORD);
  void (***v5)(_QWORD);
  void *v6;
  void (***v7)(_QWORD);
  void (***v8)(_QWORD);
  void (**v9)(_QWORD);
  BOOL v10;
  _QWORD *v11;
  void *v12;
  void (***v13)(_QWORD);
  void (***v14)(_QWORD);
  void *v15;
  void (***v16)(_QWORD);
  void (***v17)(_QWORD);
  void (**v18)(_QWORD);
  _QWORD *v19;
  _QWORD *v20;

  *a1 = off_24CA06D08;
  v2 = (_QWORD *)a1[11];
  a1[11] = 0;
  if (v2)
  {
    v3 = (void *)v2[9];
    if (v3)
    {
      v2[10] = v3;
      operator delete(v3);
    }
    v4 = (void (***)(_QWORD))v2[6];
    if (v4)
    {
      v5 = (void (***)(_QWORD))v2[7];
      v6 = (void *)v2[6];
      if (v5 != v4)
      {
        v7 = v5 - 18;
        v8 = v5 - 18;
        do
        {
          v9 = *v8;
          v8 -= 18;
          (*v9)(v7);
          v10 = v7 == v4;
          v7 = v8;
        }
        while (!v10);
        v6 = (void *)v2[6];
      }
      v2[7] = v4;
      operator delete(v6);
    }
    MEMORY[0x212BC6398](v2, 0x1020C4024B85F43);
  }
  v11 = (_QWORD *)a1[10];
  a1[10] = 0;
  if (v11)
  {
    v12 = (void *)v11[10];
    if (v12)
    {
      v11[11] = v12;
      operator delete(v12);
    }
    v13 = (void (***)(_QWORD))v11[7];
    if (v13)
    {
      v14 = (void (***)(_QWORD))v11[8];
      v15 = (void *)v11[7];
      if (v14 != v13)
      {
        v16 = v14 - 18;
        v17 = v14 - 18;
        do
        {
          v18 = *v17;
          v17 -= 18;
          (*v18)(v16);
          v10 = v16 == v13;
          v16 = v17;
        }
        while (!v10);
        v15 = (void *)v11[7];
      }
      v11[8] = v13;
      operator delete(v15);
    }
    MEMORY[0x212BC6398](v11, 0x1020C40F2A84FA7);
  }
  v19 = (_QWORD *)a1[9];
  a1[9] = 0;
  if (v19)
  {
    v20 = sub_21011904C(v19);
    MEMORY[0x212BC6398](v20, 0x10B0C4036057213);
  }
  return a1;
}

void sub_20FD715B8(vImagePixelCount *a1)
{
  vImagePixelCount v1;
  vImagePixelCount *v2;
  vImagePixelCount v3;
  vImagePixelCount v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count_vtbl *data;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  size_t rowBytes;
  vImagePixelCount v14;
  unsigned __int8 v15;
  unsigned __int8 v16;
  void *v17;
  uint64_t v18;
  uint64_t i;
  vImagePixelCount *v20;
  uint64_t v21;
  uint64_t j;
  unint64_t v23;
  _OWORD *v24;
  __int128 v25;
  _OWORD *v26;
  _OWORD *v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  char *v32;
  __int128 v33;
  char *v34;
  uint64_t v35;
  vImagePixelCount v36;
  vImagePixelCount v37;
  unsigned __int8 v38;
  unsigned __int8 v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  _BYTE *v43;
  void **v44;
  char *v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  char *v51;
  size_t v52;
  char *v53;
  char *v54;
  char *v55;
  char *v56;
  char *v57;
  uint64_t v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t v62;
  char *v63;
  __int128 v64;
  __int128 v65;
  char *v66;
  _BYTE *v67;
  _OWORD *v68;
  unsigned __int8 v69;
  unsigned __int8 v70;
  std::__shared_weak_count *v71;
  unint64_t *v72;
  unint64_t v73;
  char *v74;
  _BYTE *v75;
  char **v76;
  _BYTE *v77;
  _QWORD *v78;
  char *v79;
  char *v80;
  unint64_t v81;
  unint64_t v82;
  char *v83;
  uint64_t v84;
  _QWORD *v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  char *v89;
  size_t v90;
  char *v91;
  char *v92;
  char *v93;
  char *v94;
  char *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t k;
  uint64_t v99;
  uint64_t m;
  uint64_t v101;
  uint64_t v102;
  char *v103;
  char *v104;
  char *v105;
  uint64_t v106;
  __int128 v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  vImagePixelCount v111;
  uint64_t v112;
  uint64_t v113;
  char *v114;
  char *v115;
  char *v116;
  uint64_t v117;
  __int128 v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  char *v122;
  uint64_t v123;
  vImagePixelCount v124;
  vImagePixelCount v125;
  vImagePixelCount v126;
  _QWORD *v127;
  char **v128;
  std::__shared_weak_count *v129;
  unint64_t *v130;
  unint64_t v131;
  unint64_t v132;
  unint64_t v133;
  uint64_t v134;
  uint64_t v135;
  unsigned __int8 v136;
  unsigned __int8 v137;
  std::__shared_weak_count *v138;
  unint64_t *v139;
  unint64_t v140;
  uint64_t v141;
  _BYTE *v142;
  char *v143;
  unint64_t v144;
  unint64_t v145;
  uint64_t v146;
  uint64_t v147;
  unint64_t v148;
  char *v149;
  size_t v150;
  char *v151;
  char *v152;
  char *v153;
  char *v154;
  char *v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t n;
  uint64_t v159;
  uint64_t v160;
  char *v161;
  char *v162;
  char *v163;
  uint64_t v164;
  __int128 v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  std::__shared_weak_count *v169;
  unint64_t *v170;
  unint64_t v171;
  char *v172;
  vImagePixelCount v173;
  char *v174;
  void (***v175)(char *);
  void (**v176)(char *);
  BOOL v177;
  unint64_t *v178;
  unint64_t v179;
  uint64_t v180;
  vImagePixelCount *v181;
  _QWORD *v182;
  _QWORD *v183;
  vImagePixelCount v184;
  uint64_t v185;
  unint64_t v187;
  uint64_t v188;
  char *v189;
  vImagePixelCount v190;
  unint64_t v191;
  uint64_t v192;
  char *v193;
  char *v194;
  vImagePixelCount *v195;
  _QWORD *v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  char *v200;
  char *v201;
  uint64_t v202;
  unint64_t v203;
  unint64_t v204;
  unint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  vImagePixelCount v209;
  size_t v210;
  char *v211;
  __int128 v212;
  void *__p;
  std::__shared_weak_count *v214;
  vImage_Buffer buf;
  char *v216;
  vImagePixelCount v217;
  __int128 v218;
  vImagePixelCount *v219;
  uint64_t v220;
  std::__shared_weak_count *v221;

  v1 = a1[2];
  if (v1)
  {
    v2 = a1;
    if (a1[3])
    {
      v180 = 0;
      v182 = a1 + 6;
      v183 = a1 + 9;
      v181 = a1 + 8;
      v4 = *a1;
      v3 = a1[1];
      v5 = 1;
      while (!v5)
      {
LABEL_5:
        v6 = *((unsigned __int8 *)v2 + 41);
        v3 = (v3 + v6) >> 1;
        v4 = (v4 + v6) >> 1;
        if (++v180 >= v1)
          return;
      }
      v7 = 0;
      v184 = v4;
      v187 = v3;
LABEL_9:
      vImageBuffer_Init(&buf, v3, v4, 8u, 0);
      data = (std::__shared_weak_count_vtbl *)buf.data;
      v9 = (std::__shared_weak_count *)operator new();
      v10 = v9;
      v9->__shared_owners_ = 0;
      p_shared_owners = (unint64_t *)&v9->__shared_owners_;
      v9->__vftable = (std::__shared_weak_count_vtbl *)&off_24CA06D50;
      v9->__shared_weak_owners_ = 0;
      v9[1].__vftable = data;
      v214 = v9;
      do
        v12 = __ldxr(p_shared_owners);
      while (__stxr(v12 + 1, p_shared_owners));
      v185 = v7;
      rowBytes = buf.rowBytes;
      v14 = v2[4];
      __p = 0;
      if (v14 * v4 <= buf.rowBytes)
      {
        *(_QWORD *)&v212 = data;
        *((_QWORD *)&v212 + 1) = v9;
      }
      else
      {
        sub_21023D70C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/ComputerVisionTypes/include/VIO/ComputerVisionTypes/Image.h", 306, (uint64_t)"widthStep >= minimum_width_step", 31, (uint64_t)"widthStep must be at least as big as minimum_width_step.", 56, (void (*)(void **))sub_21023DDB0);
        v15 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
        if ((v15 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
        {
          __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
          __cxa_guard_release(&qword_254A6DE78);
        }
        if (!byte_254A6DE68 || byte_254A6DE70)
        {
          v18 = qword_254A6DE40;
          for (i = qword_254A6DE48; v18 != i; v18 += 16)
            (*(void (**)(_QWORD, const char *, uint64_t, const char *, uint64_t))v18)(*(_QWORD *)(v18 + 8), "widthStep >= minimum_width_step", 31, "widthStep must be at least as big as minimum_width_step.", 56);
        }
        v16 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
        if ((v16 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
        {
          __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
          __cxa_guard_release(&qword_254A6DE78);
        }
        if (!byte_254A6DE68)
          abort();
        qword_254A6DE58(unk_254A6DE60, "widthStep >= minimum_width_step", 31, "widthStep must be at least as big as minimum_width_step.", 56);
        *(_QWORD *)&v212 = data;
        *((_QWORD *)&v212 + 1) = v10;
        v4 = v184;
      }
      v210 = rowBytes;
      v209 = v14;
      LOBYTE(v211) = 0;
      *(_DWORD *)((char *)&v211 + 1) = (_DWORD)v216;
      HIDWORD(v211) = *(_DWORD *)((char *)&v216 + 3);
      if (v187)
      {
        if (v187 >> 61)
          sub_20E8E8A64();
        v17 = operator new(8 * v187);
        bzero(v17, 8 * v187);
        __p = v17;
        v20 = a1;
        v21 = 0;
        for (j = 0; j != v187; ++j)
        {
          *((_QWORD *)v17 + j) = v212 + v21;
          v21 += rowBytes;
        }
      }
      else
      {
        v20 = a1;
      }
      v24 = (_OWORD *)v20[10];
      v23 = v20[11];
      if ((unint64_t)v24 < v23)
      {
        v25 = *(_OWORD *)&buf.width;
        *v24 = *(_OWORD *)&buf.data;
        v24[1] = v25;
        v26 = v24 + 2;
        goto LABEL_40;
      }
      v27 = (_OWORD *)*v183;
      v28 = ((uint64_t)v24 - *v183) >> 5;
      v29 = v28 + 1;
      if ((unint64_t)(v28 + 1) >> 59)
        sub_20E867F44();
      v30 = v23 - (_QWORD)v27;
      if (v30 >> 4 > v29)
        v29 = v30 >> 4;
      if ((unint64_t)v30 >= 0x7FFFFFFFFFFFFFE0)
        v31 = 0x7FFFFFFFFFFFFFFLL;
      else
        v31 = v29;
      if (v31)
      {
        if (v31 >> 59)
          goto LABEL_231;
        v32 = (char *)operator new(32 * v31);
        v33 = *(_OWORD *)&buf.width;
        v34 = &v32[32 * v28];
        *(_OWORD *)v34 = *(_OWORD *)&buf.data;
        *((_OWORD *)v34 + 1) = v33;
        v35 = (uint64_t)v34;
        if (v24 == v27)
        {
LABEL_38:
          v26 = v34 + 32;
          v20[9] = v35;
          v20[10] = (vImagePixelCount)(v34 + 32);
          v20[11] = (vImagePixelCount)&v32[32 * v31];
          if (!v24)
            goto LABEL_40;
          goto LABEL_39;
        }
      }
      else
      {
        v32 = 0;
        v64 = *(_OWORD *)&buf.width;
        v34 = (char *)(32 * v28);
        *(_OWORD *)v34 = *(_OWORD *)&buf.data;
        *((_OWORD *)v34 + 1) = v64;
        v35 = 32 * v28;
        if (v24 == v27)
          goto LABEL_38;
      }
      do
      {
        v65 = *(v24 - 1);
        *(_OWORD *)(v35 - 32) = *(v24 - 2);
        *(_OWORD *)(v35 - 16) = v65;
        v35 -= 32;
        v24 -= 2;
      }
      while (v24 != v27);
      v24 = (_OWORD *)*v183;
      v26 = v34 + 32;
      v20[9] = v35;
      v20[10] = (vImagePixelCount)(v34 + 32);
      v20[11] = (vImagePixelCount)&v32[32 * v31];
      if (!v24)
      {
LABEL_40:
        v20[10] = (vImagePixelCount)v26;
        v37 = v20[7];
        v36 = v20[8];
        if (v37 < v36)
        {
          *(_QWORD *)v37 = &off_24C9AFD78;
          *(_BYTE *)(v37 + 8) = 0;
          *(_BYTE *)(v37 + 80) = 0;
          *(_OWORD *)(v37 + 88) = 0u;
          *(_OWORD *)(v37 + 16) = 0u;
          *(_OWORD *)(v37 + 32) = 0u;
          *(_OWORD *)(v37 + 48) = 0u;
          *(_OWORD *)(v37 + 57) = 0u;
          *(_OWORD *)(v37 + 104) = 0u;
          *(_OWORD *)(v37 + 120) = 0u;
          *(_QWORD *)(v37 + 136) = 0;
          if (v209 * v4 > v210)
          {
            sub_21023D70C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/ComputerVisionTypes/include/VIO/ComputerVisionTypes/Image.h", 306, (uint64_t)"widthStep >= minimum_width_step", 31, (uint64_t)"widthStep must be at least as big as minimum_width_step.", 56, (void (*)(void **))sub_21023DDB0);
            v38 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
            if ((v38 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
            {
              __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
              __cxa_guard_release(&qword_254A6DE78);
            }
            if (!byte_254A6DE68 || byte_254A6DE70)
            {
              v97 = qword_254A6DE40;
              for (k = qword_254A6DE48; v97 != k; v97 += 16)
                (*(void (**)(_QWORD, const char *, uint64_t, const char *, uint64_t))v97)(*(_QWORD *)(v97 + 8), "widthStep >= minimum_width_step", 31, "widthStep must be at least as big as minimum_width_step.", 56);
            }
            v39 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
            if ((v39 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
            {
              __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
              __cxa_guard_release(&qword_254A6DE78);
            }
            if (!byte_254A6DE68)
              abort();
            qword_254A6DE58(unk_254A6DE60, "widthStep >= minimum_width_step", 31, "widthStep must be at least as big as minimum_width_step.", 56);
          }
          v40 = *(std::__shared_weak_count **)(v37 + 96);
          *(_OWORD *)(v37 + 88) = v212;
          if (v40)
          {
            v41 = (unint64_t *)&v40->__shared_owners_;
            do
              v42 = __ldaxr(v41);
            while (__stlxr(v42 - 1, v41));
            if (!v42)
            {
              ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
              std::__shared_weak_count::__release_weak(v40);
            }
          }
          v44 = (void **)(v37 + 120);
          v43 = *(_BYTE **)(v37 + 120);
          *(_BYTE *)(v37 + 8) = 0;
          *(_QWORD *)(v37 + 32) = v4;
          *(_QWORD *)(v37 + 40) = v210;
          *(_QWORD *)(v37 + 48) = v187;
          *(_QWORD *)(v37 + 16) = v209;
          *(_QWORD *)(v37 + 24) = 0;
          *(_BYTE *)(v37 + 80) = 0;
          *(_QWORD *)(v37 + 64) = v209;
          *(_QWORD *)(v37 + 72) = v211;
          *(_QWORD *)(v37 + 56) = v209;
          v45 = *(char **)(v37 + 128);
          v46 = (v45 - v43) >> 3;
          v47 = v187 - v46;
          if (v187 <= v46)
          {
            if (v187 < v46)
              *(_QWORD *)(v37 + 128) = &v43[8 * v187];
            if (v187)
              goto LABEL_128;
          }
          else
          {
            v48 = *(_QWORD *)(v37 + 136);
            if (v47 <= (v48 - (uint64_t)v45) >> 3)
            {
              bzero(*(void **)(v37 + 128), 8 * v47);
              *(_QWORD *)(v37 + 128) = &v45[8 * v47];
            }
            else
            {
              if (v187 >> 61)
                sub_20E8E8A64();
              v49 = v48 - (_QWORD)v43;
              v50 = v49 >> 2;
              if (v49 >> 2 <= v187)
                v50 = v187;
              if ((unint64_t)v49 >= 0x7FFFFFFFFFFFFFF8)
                v50 = 0x1FFFFFFFFFFFFFFFLL;
              if (v50 >> 61)
                sub_20E877A38();
              v204 = v50;
              v51 = (char *)operator new(8 * v50);
              v52 = 8 * v47;
              v194 = v51;
              v199 = 8 * v47;
              v53 = &v51[8 * v46];
              bzero(v53, v52);
              v54 = (char *)(v45 - v43);
              if (v45 == v43)
              {
                *(_QWORD *)(v37 + 120) = v53;
                *(_QWORD *)(v37 + 128) = &v53[v199];
                *(_QWORD *)(v37 + 136) = &v194[8 * v204];
                if (v45)
                  goto LABEL_127;
              }
              else
              {
                v55 = v54 - 8;
                if ((unint64_t)(v54 - 8) < 0x58)
                {
                  v56 = v53;
                  v57 = v194;
                  v58 = v199;
                  goto LABEL_125;
                }
                v57 = v194;
                v58 = v199;
                v56 = v53;
                if ((unint64_t)(v43 - v194) < 0x20)
                  goto LABEL_244;
                v101 = ((unint64_t)v55 >> 3) + 1;
                v102 = 8 * (v101 & 0x3FFFFFFFFFFFFFFCLL);
                v103 = &v45[-v102];
                v56 = &v53[-v102];
                v104 = &v194[8 * v46 - 16];
                v105 = v45 - 16;
                v106 = v101 & 0x3FFFFFFFFFFFFFFCLL;
                do
                {
                  v107 = *(_OWORD *)v105;
                  *((_OWORD *)v104 - 1) = *((_OWORD *)v105 - 1);
                  *(_OWORD *)v104 = v107;
                  v104 -= 32;
                  v105 -= 32;
                  v106 -= 4;
                }
                while (v106);
                v45 = v103;
                if (v101 != (v101 & 0x3FFFFFFFFFFFFFFCLL))
                {
LABEL_244:
                  do
                  {
LABEL_125:
                    v108 = *((_QWORD *)v45 - 1);
                    v45 -= 8;
                    *((_QWORD *)v56 - 1) = v108;
                    v56 -= 8;
                  }
                  while (v45 != v43);
                }
                v45 = (char *)*v44;
                *(_QWORD *)(v37 + 120) = v56;
                *(_QWORD *)(v37 + 128) = &v53[v58];
                *(_QWORD *)(v37 + 136) = &v57[8 * v204];
                if (v45)
LABEL_127:
                  operator delete(v45);
              }
            }
LABEL_128:
            v109 = 0;
            v110 = 0;
            do
            {
              *((_QWORD *)*v44 + v110++) = *(_QWORD *)(v37 + 88) + v109;
              v109 += v210;
            }
            while (v187 != v110);
          }
          v111 = v37 + 144;
          v2 = a1;
          a1[7] = v111;
          v4 = v184;
          goto LABEL_206;
        }
        v59 = 0x8E38E38E38E38E39 * ((uint64_t)(v37 - *v182) >> 4);
        v60 = v59 + 1;
        if (v59 + 1 > 0x1C71C71C71C71C7)
          sub_20E867F44();
        v61 = 0x8E38E38E38E38E39 * ((uint64_t)(v36 - *v182) >> 4);
        if (2 * v61 > v60)
          v60 = 2 * v61;
        if (v61 >= 0xE38E38E38E38E3)
          v62 = 0x1C71C71C71C71C7;
        else
          v62 = v60;
        v219 = v181;
        if (v62)
        {
          if (v62 > 0x1C71C71C71C71C7)
LABEL_231:
            sub_20E877A38();
          v63 = (char *)operator new(144 * v62);
        }
        else
        {
          v63 = 0;
        }
        v200 = v63;
        v205 = v59;
        v66 = &v63[144 * v59];
        v216 = v63;
        v217 = (vImagePixelCount)v66;
        *(_QWORD *)v66 = &off_24C9AFD78;
        v66[80] = 0;
        *((_OWORD *)v66 + 2) = 0u;
        *((_OWORD *)v66 + 3) = 0u;
        *(_OWORD *)(v66 + 57) = 0u;
        *(_OWORD *)(v66 + 104) = 0u;
        *(_OWORD *)(v66 + 120) = 0u;
        *((_QWORD *)v66 + 17) = 0;
        v66[8] = 0;
        v67 = v66 + 8;
        *((_OWORD *)v66 + 1) = 0u;
        *(_OWORD *)(v66 + 88) = 0u;
        v68 = v66 + 88;
        *(_QWORD *)&v218 = v66;
        *((_QWORD *)&v218 + 1) = &v63[144 * v62];
        v195 = (vImagePixelCount *)(v66 + 16);
        if (v209 * v4 > v210)
        {
          sub_21023D70C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/ComputerVisionTypes/include/VIO/ComputerVisionTypes/Image.h", 306, (uint64_t)"widthStep >= minimum_width_step", 31, (uint64_t)"widthStep must be at least as big as minimum_width_step.", 56, (void (*)(void **))sub_21023DDB0);
          v69 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
          if ((v69 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
          {
            __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
            __cxa_guard_release(&qword_254A6DE78);
          }
          if (!byte_254A6DE68 || byte_254A6DE70)
          {
            v99 = qword_254A6DE40;
            for (m = qword_254A6DE48; v99 != m; v99 += 16)
              (*(void (**)(_QWORD, const char *, uint64_t, const char *, uint64_t))v99)(*(_QWORD *)(v99 + 8), "widthStep >= minimum_width_step", 31, "widthStep must be at least as big as minimum_width_step.", 56);
          }
          v70 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
          if ((v70 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
          {
            __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
            __cxa_guard_release(&qword_254A6DE78);
          }
          if (!byte_254A6DE68)
            abort();
          qword_254A6DE58(unk_254A6DE60, "widthStep >= minimum_width_step", 31, "widthStep must be at least as big as minimum_width_step.", 56);
        }
        v71 = *(std::__shared_weak_count **)&v200[144 * v205 + 96];
        *v68 = v212;
        if (v71)
        {
          v72 = (unint64_t *)&v71->__shared_owners_;
          do
            v73 = __ldaxr(v72);
          while (__stlxr(v73 - 1, v72));
          if (!v73)
          {
            ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
            std::__shared_weak_count::__release_weak(v71);
          }
        }
        v74 = &v200[144 * v205];
        v77 = (_BYTE *)*((_QWORD *)v74 + 15);
        v76 = (char **)(v74 + 120);
        v75 = v77;
        *v67 = 0;
        *(v76 - 12) = 0;
        *(v76 - 11) = (char *)v4;
        *(v76 - 10) = (char *)v210;
        *(v76 - 9) = (char *)v187;
        *v195 = v209;
        *(v76 - 6) = v211;
        *((_BYTE *)v76 - 40) = 0;
        *(v76 - 8) = (char *)v209;
        *(v76 - 7) = (char *)v209;
        v78 = v76 + 1;
        v79 = v76[1];
        v80 = (char *)(v79 - v77);
        v81 = (v79 - v77) >> 3;
        v82 = v187 - v81;
        if (v187 <= v81)
        {
          if (v187 < v81)
            *v78 = &v75[8 * v187];
          if (!v187)
            goto LABEL_140;
          goto LABEL_138;
        }
        v83 = &v200[144 * v205];
        v86 = *((_QWORD *)v83 + 17);
        v85 = v83 + 136;
        v84 = v86;
        if (v82 <= (v86 - (uint64_t)v79) >> 3)
        {
          bzero(v76[1], 8 * v82);
          *v78 = &v79[8 * v82];
          goto LABEL_138;
        }
        if (v187 >> 61)
          sub_20E8E8A64();
        v196 = v85;
        v87 = v84 - (_QWORD)v75;
        v88 = v87 >> 2;
        if (v87 >> 2 <= v187)
          v88 = v187;
        if ((unint64_t)v87 >= 0x7FFFFFFFFFFFFFF8)
          v88 = 0x1FFFFFFFFFFFFFFFLL;
        if (v88 >> 61)
          sub_20E877A38();
        v191 = v88;
        v89 = (char *)operator new(8 * v88);
        v90 = 8 * v82;
        v201 = v89;
        v206 = 8 * v82;
        v91 = &v89[8 * v81];
        bzero(v91, v90);
        v92 = (char *)(v79 - v75);
        if (v79 == v75)
        {
          *v76 = v91;
          *v78 = &v91[v206];
          *v196 = &v201[8 * v191];
          if (!v79)
          {
LABEL_138:
            v120 = 0;
            v121 = 0;
            do
            {
              *(_QWORD *)&(*v76)[8 * v121++] = *(_QWORD *)v68 + v120;
              v120 += v210;
            }
            while (v187 != v121);
LABEL_140:
            v111 = v218 + 144;
            *(_QWORD *)&v218 = v218 + 144;
            v2 = a1;
            v122 = (char *)a1[7];
            v189 = (char *)a1[6];
            if (v122 == v189)
            {
              a1[6] = v217;
              a1[7] = v111;
              a1[8] = *((_QWORD *)&v218 + 1);
              v4 = v184;
              if (v122)
                goto LABEL_205;
              goto LABEL_206;
            }
            v123 = 0;
            v124 = v217;
            while (1)
            {
              v125 = v124;
              *(_QWORD *)(v124 - 144) = &off_24C9AFD78;
              v126 = v124 - 144;
              *(_BYTE *)(v126 + 8) = 0;
              *(_BYTE *)(v126 + 80) = 0;
              *(_OWORD *)(v126 + 88) = 0u;
              v127 = (_QWORD *)(v126 + 88);
              *(_OWORD *)(v126 + 16) = 0u;
              *(_OWORD *)(v126 + 32) = 0u;
              *(_OWORD *)(v126 + 48) = 0u;
              *(_OWORD *)(v126 + 57) = 0u;
              *(_OWORD *)(v126 + 120) = 0u;
              v128 = (char **)(v126 + 120);
              *(_OWORD *)(v126 + 104) = 0u;
              *(_QWORD *)(v126 + 136) = 0;
              v190 = v126;
              v192 = *((_QWORD *)v122 - 7);
              v220 = v192;
              v129 = (std::__shared_weak_count *)*((_QWORD *)v122 - 6);
              v221 = v129;
              if (v129)
              {
                v130 = (unint64_t *)&v129->__shared_owners_;
                do
                  v131 = __ldxr(v130);
                while (__stxr(v131 + 1, v130));
              }
              v132 = *((_QWORD *)v122 - 13);
              v133 = *((_QWORD *)v122 - 12);
              v134 = *((_QWORD *)v122 - 15);
              v202 = *(v122 - 136);
              v207 = *((_QWORD *)v122 - 16);
              if (*(v122 - 136))
                v135 = *((_QWORD *)v122 - 14);
              else
                v135 = 0;
              v197 = *((_QWORD *)v122 - 14);
              if (v134 + *((_QWORD *)v122 - 16) * v197 + v135 > v132)
              {
                sub_21023D70C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/ComputerVisionTypes/include/VIO/ComputerVisionTypes/Image.h", 306, (uint64_t)"widthStep >= minimum_width_step", 31, (uint64_t)"widthStep must be at least as big as minimum_width_step.", 56, (void (*)(void **))sub_21023DDB0);
                v188 = v134;
                v136 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
                if ((v136 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
                {
                  __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
                  __cxa_guard_release(&qword_254A6DE78);
                }
                if (!byte_254A6DE68 || byte_254A6DE70)
                {
                  v157 = qword_254A6DE40;
                  for (n = qword_254A6DE48; v157 != n; v157 += 16)
                    (*(void (**)(_QWORD, const char *, uint64_t, const char *, uint64_t))v157)(*(_QWORD *)(v157 + 8), "widthStep >= minimum_width_step", 31, "widthStep must be at least as big as minimum_width_step.", 56);
                }
                v137 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
                if ((v137 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
                {
                  __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
                  __cxa_guard_release(&qword_254A6DE78);
                }
                v134 = v188;
                if (!byte_254A6DE68)
                  abort();
                qword_254A6DE58(unk_254A6DE60, "widthStep >= minimum_width_step", 31, "widthStep must be at least as big as minimum_width_step.", 56);
              }
              v220 = 0;
              v221 = 0;
              v138 = *(std::__shared_weak_count **)(v125 - 48);
              *(_QWORD *)(v125 - 56) = v192;
              *(_QWORD *)(v125 - 48) = v129;
              if (v138)
              {
                v139 = (unint64_t *)&v138->__shared_owners_;
                do
                  v140 = __ldaxr(v139);
                while (__stlxr(v140 - 1, v139));
                if (!v140)
                {
                  ((void (*)(std::__shared_weak_count *))v138->__on_zero_shared)(v138);
                  std::__shared_weak_count::__release_weak(v138);
                }
              }
              *(_BYTE *)(v125 - 136) = v202;
              *(_QWORD *)(v125 - 112) = v197;
              *(_QWORD *)(v125 - 104) = v132;
              *(_QWORD *)(v125 - 96) = v133;
              *(_QWORD *)(v125 - 128) = v207;
              *(_QWORD *)(v125 - 120) = v134;
              v141 = *((_QWORD *)v122 - 9);
              *(_BYTE *)(v125 - 64) = *(v122 - 64);
              *(_QWORD *)(v125 - 72) = v141;
              *(_QWORD *)(v125 - 88) = v207 + v202 + v134;
              *(_QWORD *)(v125 - 80) = v207 + v202;
              v142 = *(_BYTE **)(v125 - 24);
              v143 = *(char **)(v125 - 16);
              v144 = (v143 - v142) >> 3;
              v145 = v133 - v144;
              if (v133 <= v144)
              {
                if (v133 < v144)
                  *(_QWORD *)(v125 - 16) = &v142[8 * v133];
                if (!v133)
                  goto LABEL_191;
                goto LABEL_189;
              }
              v146 = *(_QWORD *)(v125 - 8);
              if (v145 <= (v146 - (uint64_t)v143) >> 3)
              {
                bzero(*(void **)(v125 - 16), 8 * v145);
                *(_QWORD *)(v125 - 16) = &v143[8 * v145];
                goto LABEL_189;
              }
              if (v133 >> 61)
                sub_20E8E8A64();
              v147 = v146 - (_QWORD)v142;
              v148 = v147 >> 2;
              if (v147 >> 2 <= v133)
                v148 = v133;
              if ((unint64_t)v147 >= 0x7FFFFFFFFFFFFFF8)
                v148 = 0x1FFFFFFFFFFFFFFFLL;
              if (v148 >> 61)
                sub_20E877A38();
              v203 = v148;
              v208 = (v143 - v142) >> 3;
              v149 = (char *)operator new(8 * v148);
              v150 = 8 * v145;
              v193 = v149;
              v198 = 8 * v145;
              v151 = &v149[8 * v208];
              bzero(v151, v150);
              v152 = (char *)(v143 - v142);
              if (v143 != v142)
                break;
              *(_QWORD *)(v125 - 24) = v151;
              *(_QWORD *)(v125 - 16) = &v151[v198];
              *(_QWORD *)(v125 - 8) = &v193[8 * v203];
              if (v143)
                goto LABEL_188;
LABEL_189:
              v167 = 0;
              v168 = 0;
              do
              {
                *(_QWORD *)&(*v128)[8 * v168++] = *v127 + v167;
                v167 += v132;
              }
              while (v133 != v168);
LABEL_191:
              v169 = v221;
              if (v221)
              {
                v170 = (unint64_t *)&v221->__shared_owners_;
                do
                  v171 = __ldaxr(v170);
                while (__stlxr(v171 - 1, v170));
                if (!v171)
                {
                  ((void (*)(std::__shared_weak_count *))v169->__on_zero_shared)(v169);
                  std::__shared_weak_count::__release_weak(v169);
                }
              }
              v122 -= 144;
              v123 -= 144;
              v124 = v190;
              if (v122 == v189)
              {
                v2 = a1;
                v122 = (char *)a1[6];
                v172 = (char *)a1[7];
                a1[6] = v190;
                v173 = v218;
                *(_OWORD *)(a1 + 7) = v218;
                v111 = v173;
                v4 = v184;
                if (v172 != v122)
                {
                  v174 = v172 - 144;
                  v175 = (void (***)(char *))(v172 - 144);
                  do
                  {
                    v176 = *v175;
                    v175 -= 18;
                    (*v176)(v174);
                    v177 = v174 == v122;
                    v174 = (char *)v175;
                  }
                  while (!v177);
                }
                if (v122)
LABEL_205:
                  operator delete(v122);
LABEL_206:
                v2[7] = v111;
                if (__p)
                  operator delete(__p);
                if (v214)
                {
                  v178 = (unint64_t *)&v214->__shared_owners_;
                  do
                    v179 = __ldaxr(v178);
                  while (__stlxr(v179 - 1, v178));
                  if (!v179)
                  {
                    ((void (*)(std::__shared_weak_count *))v214->__on_zero_shared)(v214);
                    std::__shared_weak_count::__release_weak(v214);
                  }
                }
                v7 = v185 + 1;
                v5 = v2[3];
                v3 = v187;
                if (v185 + 1 >= v5)
                {
                  v1 = v2[2];
                  goto LABEL_5;
                }
                goto LABEL_9;
              }
            }
            v153 = v152 - 8;
            if ((unint64_t)(v152 - 8) >= 0x58)
            {
              v155 = v193;
              v156 = v198;
              v154 = v151;
              if ((unint64_t)(v142 - v193) >= 0x20)
              {
                v159 = ((unint64_t)v153 >> 3) + 1;
                v160 = 8 * (v159 & 0x3FFFFFFFFFFFFFFCLL);
                v161 = &v143[-v160];
                v154 = &v151[-v160];
                v162 = &v193[8 * v208 - 16];
                v163 = v143 - 16;
                v164 = v159 & 0x3FFFFFFFFFFFFFFCLL;
                do
                {
                  v165 = *(_OWORD *)v163;
                  *((_OWORD *)v162 - 1) = *((_OWORD *)v163 - 1);
                  *(_OWORD *)v162 = v165;
                  v162 -= 32;
                  v163 -= 32;
                  v164 -= 4;
                }
                while (v164);
                v143 = v161;
                if (v159 == (v159 & 0x3FFFFFFFFFFFFFFCLL))
                {
LABEL_187:
                  v143 = *v128;
                  *(_QWORD *)(v125 - 24) = v154;
                  *(_QWORD *)(v125 - 16) = &v151[v156];
                  *(_QWORD *)(v125 - 8) = &v155[8 * v203];
                  if (!v143)
                    goto LABEL_189;
LABEL_188:
                  operator delete(v143);
                  goto LABEL_189;
                }
              }
            }
            else
            {
              v154 = v151;
              v155 = v193;
              v156 = v198;
            }
            do
            {
              v166 = *((_QWORD *)v143 - 1);
              v143 -= 8;
              *((_QWORD *)v154 - 1) = v166;
              v154 -= 8;
            }
            while (v143 != v142);
            goto LABEL_187;
          }
LABEL_137:
          operator delete(v79);
          goto LABEL_138;
        }
        v93 = v92 - 8;
        if ((unint64_t)(v92 - 8) >= 0x58)
        {
          v95 = v201;
          v96 = v206;
          v94 = v91;
          if ((unint64_t)(v79 - &v80[(_QWORD)v201]) >= 0x20)
          {
            v112 = ((unint64_t)v93 >> 3) + 1;
            v113 = 8 * (v112 & 0x3FFFFFFFFFFFFFFCLL);
            v114 = &v79[-v113];
            v94 = &v91[-v113];
            v115 = &v201[8 * v81 - 16];
            v116 = v79 - 16;
            v117 = v112 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v118 = *(_OWORD *)v116;
              *((_OWORD *)v115 - 1) = *((_OWORD *)v116 - 1);
              *(_OWORD *)v115 = v118;
              v115 -= 32;
              v116 -= 32;
              v117 -= 4;
            }
            while (v117);
            v79 = v114;
            if (v112 == (v112 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_136:
              v79 = *v76;
              *v76 = v94;
              *v78 = &v91[v96];
              *v196 = &v95[8 * v191];
              if (!v79)
                goto LABEL_138;
              goto LABEL_137;
            }
          }
        }
        else
        {
          v94 = v91;
          v95 = v201;
          v96 = v206;
        }
        do
        {
          v119 = *((_QWORD *)v79 - 1);
          v79 -= 8;
          *((_QWORD *)v94 - 1) = v119;
          v94 -= 8;
        }
        while (v79 != v75);
        goto LABEL_136;
      }
LABEL_39:
      operator delete(v24);
      goto LABEL_40;
    }
  }
}

void sub_20FD72BE8(void *a1)
{
  void *v1;

  __cxa_begin_catch(a1);
  free(v1);
  __cxa_rethrow();
}

void sub_20FD72BFC(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_20FD72C14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35)
{
  uint64_t v35;

  sub_20E8E481C(&a35);
  sub_20E86665C(v35 - 192);
  _Unwind_Resume(a1);
}

void sub_20FD72C30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35)
{
  _QWORD *v35;
  uint64_t v36;
  void *v38;
  std::__shared_weak_count *v39;
  unint64_t *p_shared_owners;
  unint64_t v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;

  v38 = (void *)v35[15];
  if (v38)
  {
    v35[16] = v38;
    operator delete(v38);
  }
  v39 = (std::__shared_weak_count *)v35[14];
  if (v39)
  {
    p_shared_owners = (unint64_t *)&v39->__shared_owners_;
    do
      v41 = __ldaxr(p_shared_owners);
    while (__stlxr(v41 - 1, p_shared_owners));
    if (!v41)
    {
      ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
      std::__shared_weak_count::__release_weak(v39);
    }
  }
  v42 = (std::__shared_weak_count *)v35[12];
  if (v42)
  {
    v43 = (unint64_t *)&v42->__shared_owners_;
    do
      v44 = __ldaxr(v43);
    while (__stlxr(v44 - 1, v43));
    if (!v44)
    {
      ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
      std::__shared_weak_count::__release_weak(v42);
    }
  }
  *(_QWORD *)(a23 + 56) = v35;
  sub_20E8E481C(&a35);
  sub_20E86665C(v36 - 192);
  _Unwind_Resume(a1);
}

void sub_20FD72CD4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,void *__p,uint64_t a51)
{
  uint64_t v51;
  void *v53;
  std::__shared_weak_count *v54;
  unint64_t *p_shared_owners;
  unint64_t v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;

  v53 = *(void **)(a31 + 144 * a32 + 120);
  if (v53)
  {
    *(_QWORD *)(a31 + 144 * a32 + 128) = v53;
    operator delete(v53);
  }
  v54 = *(std::__shared_weak_count **)(a31 + 144 * a32 + 112);
  if (v54)
  {
    p_shared_owners = (unint64_t *)&v54->__shared_owners_;
    do
      v56 = __ldaxr(p_shared_owners);
    while (__stlxr(v56 - 1, p_shared_owners));
    if (!v56)
    {
      ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
      std::__shared_weak_count::__release_weak(v54);
    }
  }
  v57 = *(std::__shared_weak_count **)(a31 + 144 * a32 + 96);
  if (v57)
  {
    v58 = (unint64_t *)&v57->__shared_owners_;
    do
      v59 = __ldaxr(v58);
    while (__stlxr(v59 - 1, v58));
    if (!v59)
    {
      ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
      std::__shared_weak_count::__release_weak(v57);
    }
  }
  sub_20EDB6B64(v51 - 144);
  sub_20E8E481C(&a35);
  sub_20E86665C(v51 - 192);
  _Unwind_Resume(a1);
}

void sub_20FD72E9C(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC6398);
}

void sub_20FD72EC0(uint64_t a1)
{
  free(*(void **)(a1 + 24));
}

uint64_t sub_20FD72EC8(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3vio16image_processing17ScaleSpacePyramidIhE23MakevImage_BufferSharedEPvEUlPhE_")
    return a1 + 24;
  if (((v3 & (unint64_t)"ZN4cv3d3vio16image_processing17ScaleSpacePyramidIhE23MakevImage_BufferSharedEPvEUlPhE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3vio16image_processing17ScaleSpacePyramidIhE23MakevImage_BufferSharedEPvEUlPhE_"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3vio16image_processing17ScaleSpacePyramidIhE23MakevImage_BufferSharedEPvEUlPhE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

void sub_20FD72F38(vImagePixelCount *a1)
{
  vImagePixelCount v1;
  vImagePixelCount *v2;
  vImagePixelCount v3;
  vImagePixelCount v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count_vtbl *data;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  size_t v13;
  vImagePixelCount v14;
  unsigned __int8 v15;
  unsigned __int8 v16;
  void *v17;
  uint64_t v18;
  uint64_t i;
  vImagePixelCount *v20;
  uint64_t v21;
  uint64_t j;
  unint64_t v23;
  _OWORD *v24;
  __int128 v25;
  _OWORD *v26;
  _OWORD *v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  char *v32;
  __int128 v33;
  char *v34;
  uint64_t v35;
  vImagePixelCount v36;
  vImagePixelCount v37;
  unsigned __int8 v38;
  unsigned __int8 v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  _BYTE *v43;
  void **v44;
  char *v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  char *v52;
  size_t v53;
  char *v54;
  char *v55;
  char *v56;
  char *v57;
  char *v58;
  uint64_t v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  _QWORD *v64;
  __int128 v65;
  __int128 v66;
  char *v67;
  _BYTE *v68;
  _OWORD *v69;
  unsigned __int8 v70;
  unsigned __int8 v71;
  std::__shared_weak_count *v72;
  unint64_t *v73;
  unint64_t v74;
  char *v75;
  _BYTE *v76;
  char **v77;
  _BYTE *v78;
  _QWORD *v79;
  char *v80;
  char *v81;
  unint64_t v82;
  unint64_t v83;
  char *v84;
  uint64_t v85;
  _QWORD *v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  char *v90;
  size_t v91;
  char *v92;
  char *v93;
  char *v94;
  char *v95;
  char *v96;
  char *v97;
  size_t v98;
  uint64_t v99;
  uint64_t k;
  uint64_t v101;
  uint64_t m;
  uint64_t v103;
  uint64_t v104;
  char *v105;
  char *v106;
  char *v107;
  uint64_t v108;
  __int128 v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  vImagePixelCount v113;
  uint64_t v114;
  uint64_t v115;
  char *v116;
  char *v117;
  char *v118;
  uint64_t v119;
  __int128 v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  char *v124;
  uint64_t v125;
  vImagePixelCount v126;
  vImagePixelCount v127;
  vImagePixelCount v128;
  _QWORD *v129;
  char **v130;
  std::__shared_weak_count *v131;
  unint64_t *v132;
  unint64_t v133;
  uint64_t v134;
  unint64_t v135;
  uint64_t v136;
  uint64_t v137;
  unsigned __int8 v138;
  unsigned __int8 v139;
  std::__shared_weak_count *v140;
  unint64_t *v141;
  unint64_t v142;
  uint64_t v143;
  uint64_t v144;
  _BYTE *v145;
  char *v146;
  unint64_t v147;
  unint64_t v148;
  uint64_t v149;
  uint64_t v150;
  unint64_t v151;
  char *v152;
  size_t v153;
  char *v154;
  char *v155;
  char *v156;
  char *v157;
  char *v158;
  size_t v159;
  uint64_t v160;
  uint64_t n;
  uint64_t v162;
  uint64_t v163;
  char *v164;
  char *v165;
  char *v166;
  uint64_t v167;
  __int128 v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  std::__shared_weak_count *v172;
  unint64_t *v173;
  unint64_t v174;
  char *v175;
  vImagePixelCount v176;
  char *v177;
  void (***v178)(char *);
  void (**v179)(char *);
  BOOL v180;
  unint64_t *v181;
  unint64_t v182;
  uint64_t v183;
  vImagePixelCount *v184;
  _QWORD *v185;
  _QWORD *v186;
  vImagePixelCount v187;
  uint64_t v188;
  unint64_t v190;
  uint64_t v191;
  char *v192;
  char *v193;
  vImagePixelCount v194;
  unint64_t v195;
  uint64_t v196;
  size_t v197;
  char *v198;
  vImagePixelCount *v199;
  _QWORD *v200;
  uint64_t v201;
  unint64_t v202;
  uint64_t v203;
  unint64_t v204;
  size_t v205;
  uint64_t v206;
  uint64_t v207;
  unint64_t v208;
  vImagePixelCount v209;
  size_t v210;
  char *v211;
  __int128 v212;
  void *__p;
  std::__shared_weak_count *v214;
  vImage_Buffer buf;
  _QWORD *v216;
  vImagePixelCount v217;
  __int128 v218;
  vImagePixelCount *v219;
  uint64_t v220;
  std::__shared_weak_count *v221;

  v1 = a1[2];
  if (v1)
  {
    v2 = a1;
    if (a1[3])
    {
      v183 = 0;
      v185 = a1 + 6;
      v186 = a1 + 9;
      v184 = a1 + 8;
      v4 = *a1;
      v3 = a1[1];
      v5 = 1;
      while (!v5)
      {
LABEL_5:
        v6 = *((unsigned __int8 *)v2 + 41);
        v3 = (v3 + v6) >> 1;
        v4 = (v4 + v6) >> 1;
        if (++v183 >= v1)
          return;
      }
      v7 = 0;
      v187 = v4;
      v190 = v3;
LABEL_9:
      vImageBuffer_Init(&buf, v3, v4, 0x10u, 0);
      data = (std::__shared_weak_count_vtbl *)buf.data;
      v9 = (std::__shared_weak_count *)operator new();
      v10 = v9;
      v9->__shared_owners_ = 0;
      p_shared_owners = (unint64_t *)&v9->__shared_owners_;
      v9->__vftable = (std::__shared_weak_count_vtbl *)&off_24CA06DA0;
      v9->__shared_weak_owners_ = 0;
      v9[1].__vftable = data;
      v214 = v9;
      do
        v12 = __ldxr(p_shared_owners);
      while (__stxr(v12 + 1, p_shared_owners));
      v188 = v7;
      v13 = buf.rowBytes >> 1;
      v14 = v2[4];
      __p = 0;
      if (v14 * v4 <= buf.rowBytes >> 1)
      {
        *(_QWORD *)&v212 = data;
        *((_QWORD *)&v212 + 1) = v9;
      }
      else
      {
        sub_21023D70C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/ComputerVisionTypes/include/VIO/ComputerVisionTypes/Image.h", 306, (uint64_t)"widthStep >= minimum_width_step", 31, (uint64_t)"widthStep must be at least as big as minimum_width_step.", 56, (void (*)(void **))sub_21023DDB0);
        v15 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
        if ((v15 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
        {
          __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
          __cxa_guard_release(&qword_254A6DE78);
        }
        if (!byte_254A6DE68 || byte_254A6DE70)
        {
          v18 = qword_254A6DE40;
          for (i = qword_254A6DE48; v18 != i; v18 += 16)
            (*(void (**)(_QWORD, const char *, uint64_t, const char *, uint64_t))v18)(*(_QWORD *)(v18 + 8), "widthStep >= minimum_width_step", 31, "widthStep must be at least as big as minimum_width_step.", 56);
        }
        v16 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
        if ((v16 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
        {
          __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
          __cxa_guard_release(&qword_254A6DE78);
        }
        if (!byte_254A6DE68)
          abort();
        qword_254A6DE58(unk_254A6DE60, "widthStep >= minimum_width_step", 31, "widthStep must be at least as big as minimum_width_step.", 56);
        *(_QWORD *)&v212 = data;
        *((_QWORD *)&v212 + 1) = v10;
        v4 = v187;
      }
      v210 = v13;
      v209 = v14;
      LOBYTE(v211) = 0;
      *(_DWORD *)((char *)&v211 + 1) = (_DWORD)v216;
      HIDWORD(v211) = *(_DWORD *)((char *)&v216 + 3);
      if (v190)
      {
        if (v190 >> 61)
          sub_20E867F44();
        v17 = operator new(8 * v190);
        bzero(v17, 8 * v190);
        __p = v17;
        v20 = a1;
        v21 = 0;
        for (j = 0; j != v190; ++j)
        {
          *((_QWORD *)v17 + j) = v212 + v21;
          v21 += 2 * v13;
        }
      }
      else
      {
        v20 = a1;
      }
      v24 = (_OWORD *)v20[10];
      v23 = v20[11];
      if ((unint64_t)v24 < v23)
      {
        v25 = *(_OWORD *)&buf.width;
        *v24 = *(_OWORD *)&buf.data;
        v24[1] = v25;
        v26 = v24 + 2;
        goto LABEL_40;
      }
      v27 = (_OWORD *)*v186;
      v28 = ((uint64_t)v24 - *v186) >> 5;
      v29 = v28 + 1;
      if ((unint64_t)(v28 + 1) >> 59)
        sub_20E867F44();
      v30 = v23 - (_QWORD)v27;
      if (v30 >> 4 > v29)
        v29 = v30 >> 4;
      if ((unint64_t)v30 >= 0x7FFFFFFFFFFFFFE0)
        v31 = 0x7FFFFFFFFFFFFFFLL;
      else
        v31 = v29;
      if (v31)
      {
        if (v31 >> 59)
          goto LABEL_231;
        v32 = (char *)operator new(32 * v31);
        v33 = *(_OWORD *)&buf.width;
        v34 = &v32[32 * v28];
        *(_OWORD *)v34 = *(_OWORD *)&buf.data;
        *((_OWORD *)v34 + 1) = v33;
        v35 = (uint64_t)v34;
        if (v24 == v27)
        {
LABEL_38:
          v26 = v34 + 32;
          v20[9] = v35;
          v20[10] = (vImagePixelCount)(v34 + 32);
          v20[11] = (vImagePixelCount)&v32[32 * v31];
          if (!v24)
            goto LABEL_40;
          goto LABEL_39;
        }
      }
      else
      {
        v32 = 0;
        v65 = *(_OWORD *)&buf.width;
        v34 = (char *)(32 * v28);
        *(_OWORD *)v34 = *(_OWORD *)&buf.data;
        *((_OWORD *)v34 + 1) = v65;
        v35 = 32 * v28;
        if (v24 == v27)
          goto LABEL_38;
      }
      do
      {
        v66 = *(v24 - 1);
        *(_OWORD *)(v35 - 32) = *(v24 - 2);
        *(_OWORD *)(v35 - 16) = v66;
        v35 -= 32;
        v24 -= 2;
      }
      while (v24 != v27);
      v24 = (_OWORD *)*v186;
      v26 = v34 + 32;
      v20[9] = v35;
      v20[10] = (vImagePixelCount)(v34 + 32);
      v20[11] = (vImagePixelCount)&v32[32 * v31];
      if (!v24)
      {
LABEL_40:
        v20[10] = (vImagePixelCount)v26;
        v37 = v20[7];
        v36 = v20[8];
        if (v37 < v36)
        {
          *(_QWORD *)v37 = &off_24CA06DF0;
          *(_BYTE *)(v37 + 8) = 0;
          *(_BYTE *)(v37 + 80) = 0;
          *(_OWORD *)(v37 + 88) = 0u;
          *(_OWORD *)(v37 + 16) = 0u;
          *(_OWORD *)(v37 + 32) = 0u;
          *(_OWORD *)(v37 + 48) = 0u;
          *(_OWORD *)(v37 + 57) = 0u;
          *(_OWORD *)(v37 + 104) = 0u;
          *(_OWORD *)(v37 + 120) = 0u;
          *(_QWORD *)(v37 + 136) = 0;
          if (v209 * v4 > v210)
          {
            sub_21023D70C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/ComputerVisionTypes/include/VIO/ComputerVisionTypes/Image.h", 306, (uint64_t)"widthStep >= minimum_width_step", 31, (uint64_t)"widthStep must be at least as big as minimum_width_step.", 56, (void (*)(void **))sub_21023DDB0);
            v38 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
            if ((v38 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
            {
              __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
              __cxa_guard_release(&qword_254A6DE78);
            }
            if (!byte_254A6DE68 || byte_254A6DE70)
            {
              v99 = qword_254A6DE40;
              for (k = qword_254A6DE48; v99 != k; v99 += 16)
                (*(void (**)(_QWORD, const char *, uint64_t, const char *, uint64_t))v99)(*(_QWORD *)(v99 + 8), "widthStep >= minimum_width_step", 31, "widthStep must be at least as big as minimum_width_step.", 56);
            }
            v39 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
            if ((v39 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
            {
              __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
              __cxa_guard_release(&qword_254A6DE78);
            }
            if (!byte_254A6DE68)
              abort();
            qword_254A6DE58(unk_254A6DE60, "widthStep >= minimum_width_step", 31, "widthStep must be at least as big as minimum_width_step.", 56);
          }
          v40 = *(std::__shared_weak_count **)(v37 + 96);
          *(_OWORD *)(v37 + 88) = v212;
          if (v40)
          {
            v41 = (unint64_t *)&v40->__shared_owners_;
            do
              v42 = __ldaxr(v41);
            while (__stlxr(v42 - 1, v41));
            if (!v42)
            {
              ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
              std::__shared_weak_count::__release_weak(v40);
            }
          }
          v44 = (void **)(v37 + 120);
          v43 = *(_BYTE **)(v37 + 120);
          *(_BYTE *)(v37 + 8) = 0;
          *(_QWORD *)(v37 + 32) = v4;
          *(_QWORD *)(v37 + 40) = v210;
          *(_QWORD *)(v37 + 48) = v190;
          *(_QWORD *)(v37 + 16) = v209;
          *(_QWORD *)(v37 + 24) = 0;
          *(_BYTE *)(v37 + 80) = 0;
          *(_QWORD *)(v37 + 64) = 2 * v209;
          *(_QWORD *)(v37 + 72) = v211;
          *(_QWORD *)(v37 + 56) = 2 * v209;
          v45 = *(char **)(v37 + 128);
          v46 = (v45 - v43) >> 3;
          v47 = v190 - v46;
          if (v190 <= v46)
          {
            if (v190 < v46)
              *(_QWORD *)(v37 + 128) = &v43[8 * v190];
            if (v190)
              goto LABEL_128;
          }
          else
          {
            v48 = *(_QWORD *)(v37 + 136);
            if (v47 <= (v48 - (uint64_t)v45) >> 3)
            {
              bzero(*(void **)(v37 + 128), 8 * v47);
              *(_QWORD *)(v37 + 128) = &v45[8 * v47];
            }
            else
            {
              if (v190 >> 61)
                sub_20E867F44();
              v49 = v48 - (_QWORD)v43;
              v50 = v49 >> 2;
              if (v49 >> 2 <= v190)
                v50 = v190;
              if ((unint64_t)v49 >= 0x7FFFFFFFFFFFFFF8)
                v50 = 0x1FFFFFFFFFFFFFFFLL;
              if (v50 >> 61)
                sub_20E877A38();
              v51 = v50;
              v52 = (char *)operator new(8 * v50);
              v53 = 8 * v47;
              v198 = v52;
              v203 = 8 * v47;
              v54 = &v52[8 * v46];
              bzero(v54, v53);
              v55 = (char *)(v45 - v43);
              if (v45 == v43)
              {
                *(_QWORD *)(v37 + 120) = v54;
                *(_QWORD *)(v37 + 128) = &v54[v203];
                *(_QWORD *)(v37 + 136) = &v198[8 * v51];
                if (v45)
                  goto LABEL_127;
              }
              else
              {
                v56 = v55 - 8;
                if ((unint64_t)(v55 - 8) < 0x58)
                {
                  v57 = v54;
                  v58 = v198;
                  v59 = v203;
                  goto LABEL_125;
                }
                v58 = v198;
                v59 = v203;
                v57 = v54;
                if ((unint64_t)(v43 - v198) < 0x20)
                  goto LABEL_244;
                v103 = ((unint64_t)v56 >> 3) + 1;
                v104 = 8 * (v103 & 0x3FFFFFFFFFFFFFFCLL);
                v105 = &v45[-v104];
                v57 = &v54[-v104];
                v106 = &v198[8 * v46 - 16];
                v107 = v45 - 16;
                v108 = v103 & 0x3FFFFFFFFFFFFFFCLL;
                do
                {
                  v109 = *(_OWORD *)v107;
                  *((_OWORD *)v106 - 1) = *((_OWORD *)v107 - 1);
                  *(_OWORD *)v106 = v109;
                  v106 -= 32;
                  v107 -= 32;
                  v108 -= 4;
                }
                while (v108);
                v45 = v105;
                if (v103 != (v103 & 0x3FFFFFFFFFFFFFFCLL))
                {
LABEL_244:
                  do
                  {
LABEL_125:
                    v110 = *((_QWORD *)v45 - 1);
                    v45 -= 8;
                    *((_QWORD *)v57 - 1) = v110;
                    v57 -= 8;
                  }
                  while (v45 != v43);
                }
                v45 = (char *)*v44;
                *(_QWORD *)(v37 + 120) = v57;
                *(_QWORD *)(v37 + 128) = &v54[v59];
                *(_QWORD *)(v37 + 136) = &v58[8 * v51];
                if (v45)
LABEL_127:
                  operator delete(v45);
              }
            }
LABEL_128:
            v111 = 0;
            v112 = 0;
            do
            {
              *((_QWORD *)*v44 + v112++) = *(_QWORD *)(v37 + 88) + v111;
              v111 += 2 * v210;
            }
            while (v190 != v112);
          }
          v113 = v37 + 144;
          v2 = a1;
          a1[7] = v113;
          v4 = v187;
          goto LABEL_206;
        }
        v60 = 0x8E38E38E38E38E39 * ((uint64_t)(v37 - *v185) >> 4);
        v61 = v60 + 1;
        if (v60 + 1 > 0x1C71C71C71C71C7)
          sub_20E867F44();
        v62 = 0x8E38E38E38E38E39 * ((uint64_t)(v36 - *v185) >> 4);
        if (2 * v62 > v61)
          v61 = 2 * v62;
        if (v62 >= 0xE38E38E38E38E3)
          v63 = 0x1C71C71C71C71C7;
        else
          v63 = v61;
        v219 = v184;
        if (v63)
        {
          if (v63 > 0x1C71C71C71C71C7)
LABEL_231:
            sub_20E877A38();
          v64 = operator new(144 * v63);
        }
        else
        {
          v64 = 0;
        }
        v204 = v60;
        v67 = (char *)&v64[18 * v60];
        v216 = v64;
        v217 = (vImagePixelCount)v67;
        *(_QWORD *)v67 = &off_24CA06DF0;
        v67[80] = 0;
        *((_OWORD *)v67 + 2) = 0u;
        *((_OWORD *)v67 + 3) = 0u;
        *(_OWORD *)(v67 + 57) = 0u;
        *(_OWORD *)(v67 + 104) = 0u;
        *(_OWORD *)(v67 + 120) = 0u;
        *((_QWORD *)v67 + 17) = 0;
        v67[8] = 0;
        v68 = v67 + 8;
        *((_OWORD *)v67 + 1) = 0u;
        v199 = (vImagePixelCount *)(v67 + 16);
        *(_OWORD *)(v67 + 88) = 0u;
        v69 = v67 + 88;
        *(_QWORD *)&v218 = v67;
        *((_QWORD *)&v218 + 1) = &v64[18 * v63];
        if (v209 * v4 > v210)
        {
          sub_21023D70C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/ComputerVisionTypes/include/VIO/ComputerVisionTypes/Image.h", 306, (uint64_t)"widthStep >= minimum_width_step", 31, (uint64_t)"widthStep must be at least as big as minimum_width_step.", 56, (void (*)(void **))sub_21023DDB0);
          v70 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
          if ((v70 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
          {
            __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
            __cxa_guard_release(&qword_254A6DE78);
          }
          if (!byte_254A6DE68 || byte_254A6DE70)
          {
            v101 = qword_254A6DE40;
            for (m = qword_254A6DE48; v101 != m; v101 += 16)
              (*(void (**)(_QWORD, const char *, uint64_t, const char *, uint64_t))v101)(*(_QWORD *)(v101 + 8), "widthStep >= minimum_width_step", 31, "widthStep must be at least as big as minimum_width_step.", 56);
          }
          v71 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
          if ((v71 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
          {
            __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
            __cxa_guard_release(&qword_254A6DE78);
          }
          if (!byte_254A6DE68)
            abort();
          qword_254A6DE58(unk_254A6DE60, "widthStep >= minimum_width_step", 31, "widthStep must be at least as big as minimum_width_step.", 56);
        }
        v72 = (std::__shared_weak_count *)v64[18 * v204 + 12];
        *v69 = v212;
        if (v72)
        {
          v73 = (unint64_t *)&v72->__shared_owners_;
          do
            v74 = __ldaxr(v73);
          while (__stlxr(v74 - 1, v73));
          if (!v74)
          {
            ((void (*)(std::__shared_weak_count *))v72->__on_zero_shared)(v72);
            std::__shared_weak_count::__release_weak(v72);
          }
        }
        v75 = (char *)&v64[18 * v204];
        v78 = (_BYTE *)*((_QWORD *)v75 + 15);
        v77 = (char **)(v75 + 120);
        v76 = v78;
        *v68 = 0;
        *(v77 - 12) = 0;
        *(v77 - 11) = (char *)v4;
        *(v77 - 10) = (char *)v210;
        *(v77 - 9) = (char *)v190;
        *v199 = v209;
        *(v77 - 6) = v211;
        *((_BYTE *)v77 - 40) = 0;
        *(v77 - 8) = (char *)(2 * v209);
        *(v77 - 7) = (char *)(2 * v209);
        v79 = v77 + 1;
        v80 = v77[1];
        v81 = (char *)(v80 - v78);
        v82 = (v80 - v78) >> 3;
        v83 = v190 - v82;
        if (v190 <= v82)
        {
          if (v190 < v82)
            *v79 = &v76[8 * v190];
          if (!v190)
            goto LABEL_140;
          goto LABEL_138;
        }
        v84 = (char *)&v64[18 * v204];
        v87 = *((_QWORD *)v84 + 17);
        v86 = v84 + 136;
        v85 = v87;
        if (v83 <= (v87 - (uint64_t)v80) >> 3)
        {
          bzero(v77[1], 8 * v83);
          *v79 = &v80[8 * v83];
          goto LABEL_138;
        }
        if (v190 >> 61)
          sub_20E867F44();
        v200 = v86;
        v88 = v85 - (_QWORD)v76;
        v89 = v88 >> 2;
        if (v88 >> 2 <= v190)
          v89 = v190;
        if ((unint64_t)v88 >= 0x7FFFFFFFFFFFFFF8)
          v89 = 0x1FFFFFFFFFFFFFFFLL;
        if (v89 >> 61)
          sub_20E877A38();
        v195 = v89;
        v90 = (char *)operator new(8 * v89);
        v91 = 8 * v83;
        v92 = v90;
        v93 = &v90[8 * v82];
        v205 = v91;
        bzero(v93, v91);
        v94 = (char *)(v80 - v76);
        if (v80 == v76)
        {
          *v77 = v93;
          *v79 = &v93[v205];
          *v200 = &v92[8 * v195];
          if (!v80)
          {
LABEL_138:
            v122 = 0;
            v123 = 0;
            do
            {
              *(_QWORD *)&(*v77)[8 * v123++] = *(_QWORD *)v69 + v122;
              v122 += 2 * v210;
            }
            while (v190 != v123);
LABEL_140:
            v113 = v218 + 144;
            *(_QWORD *)&v218 = v218 + 144;
            v2 = a1;
            v124 = (char *)a1[7];
            v193 = (char *)a1[6];
            if (v124 == v193)
            {
              a1[6] = v217;
              a1[7] = v113;
              a1[8] = *((_QWORD *)&v218 + 1);
              v4 = v187;
              if (v124)
                goto LABEL_205;
              goto LABEL_206;
            }
            v125 = 0;
            v126 = v217;
            while (1)
            {
              v127 = v126;
              *(_QWORD *)(v126 - 144) = &off_24CA06DF0;
              v128 = v126 - 144;
              *(_BYTE *)(v128 + 8) = 0;
              *(_BYTE *)(v128 + 80) = 0;
              *(_OWORD *)(v128 + 88) = 0u;
              v129 = (_QWORD *)(v128 + 88);
              *(_OWORD *)(v128 + 16) = 0u;
              *(_OWORD *)(v128 + 32) = 0u;
              *(_OWORD *)(v128 + 48) = 0u;
              *(_OWORD *)(v128 + 57) = 0u;
              *(_OWORD *)(v128 + 120) = 0u;
              v130 = (char **)(v128 + 120);
              *(_OWORD *)(v128 + 104) = 0u;
              *(_QWORD *)(v128 + 136) = 0;
              v194 = v128;
              v196 = *((_QWORD *)v124 - 7);
              v220 = v196;
              v131 = (std::__shared_weak_count *)*((_QWORD *)v124 - 6);
              v221 = v131;
              if (v131)
              {
                v132 = (unint64_t *)&v131->__shared_owners_;
                do
                  v133 = __ldxr(v132);
                while (__stxr(v133 + 1, v132));
              }
              v134 = *((_QWORD *)v124 - 14);
              v135 = *((_QWORD *)v124 - 12);
              v136 = *((_QWORD *)v124 - 15);
              v201 = *(v124 - 136);
              v206 = *((_QWORD *)v124 - 16);
              if (*(v124 - 136))
                v137 = *((_QWORD *)v124 - 14);
              else
                v137 = 0;
              v208 = *((_QWORD *)v124 - 13);
              if (v136 + *((_QWORD *)v124 - 16) * v134 + v137 > v208)
              {
                sub_21023D70C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/ComputerVisionTypes/include/VIO/ComputerVisionTypes/Image.h", 306, (uint64_t)"widthStep >= minimum_width_step", 31, (uint64_t)"widthStep must be at least as big as minimum_width_step.", 56, (void (*)(void **))sub_21023DDB0);
                v191 = v136;
                v138 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
                if ((v138 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
                {
                  __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
                  __cxa_guard_release(&qword_254A6DE78);
                }
                if (!byte_254A6DE68 || byte_254A6DE70)
                {
                  v160 = qword_254A6DE40;
                  for (n = qword_254A6DE48; v160 != n; v160 += 16)
                    (*(void (**)(_QWORD, const char *, uint64_t, const char *, uint64_t))v160)(*(_QWORD *)(v160 + 8), "widthStep >= minimum_width_step", 31, "widthStep must be at least as big as minimum_width_step.", 56);
                }
                v139 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
                if ((v139 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
                {
                  __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
                  __cxa_guard_release(&qword_254A6DE78);
                }
                v136 = v191;
                if (!byte_254A6DE68)
                  abort();
                qword_254A6DE58(unk_254A6DE60, "widthStep >= minimum_width_step", 31, "widthStep must be at least as big as minimum_width_step.", 56);
              }
              v220 = 0;
              v221 = 0;
              v140 = *(std::__shared_weak_count **)(v127 - 48);
              *(_QWORD *)(v127 - 56) = v196;
              *(_QWORD *)(v127 - 48) = v131;
              if (v140)
              {
                v141 = (unint64_t *)&v140->__shared_owners_;
                do
                  v142 = __ldaxr(v141);
                while (__stlxr(v142 - 1, v141));
                if (!v142)
                {
                  ((void (*)(std::__shared_weak_count *))v140->__on_zero_shared)(v140);
                  std::__shared_weak_count::__release_weak(v140);
                }
              }
              *(_BYTE *)(v127 - 136) = v201;
              *(_QWORD *)(v127 - 112) = v134;
              *(_QWORD *)(v127 - 104) = v208;
              *(_QWORD *)(v127 - 96) = v135;
              *(_QWORD *)(v127 - 128) = v206;
              *(_QWORD *)(v127 - 120) = v136;
              v143 = *((_QWORD *)v124 - 9);
              *(_BYTE *)(v127 - 64) = *(v124 - 64);
              *(_QWORD *)(v127 - 72) = v143;
              v144 = v201 | (2 * v206);
              *(_QWORD *)(v127 - 88) = v144 + v136;
              *(_QWORD *)(v127 - 80) = v144;
              v145 = *(_BYTE **)(v127 - 24);
              v146 = *(char **)(v127 - 16);
              v147 = (v146 - v145) >> 3;
              v148 = v135 - v147;
              if (v135 <= v147)
              {
                if (v135 < v147)
                  *(_QWORD *)(v127 - 16) = &v145[8 * v135];
                if (!v135)
                  goto LABEL_191;
                goto LABEL_189;
              }
              v149 = *(_QWORD *)(v127 - 8);
              if (v148 <= (v149 - (uint64_t)v146) >> 3)
              {
                bzero(*(void **)(v127 - 16), 8 * v148);
                *(_QWORD *)(v127 - 16) = &v146[8 * v148];
                goto LABEL_189;
              }
              if (v135 >> 61)
                sub_20E867F44();
              v150 = v149 - (_QWORD)v145;
              v151 = v150 >> 2;
              if (v150 >> 2 <= v135)
                v151 = v135;
              if ((unint64_t)v150 >= 0x7FFFFFFFFFFFFFF8)
                v151 = 0x1FFFFFFFFFFFFFFFLL;
              if (v151 >> 61)
                sub_20E877A38();
              v202 = v151;
              v207 = (v146 - v145) >> 3;
              v152 = (char *)operator new(8 * v151);
              v153 = 8 * v148;
              v192 = v152;
              v154 = &v152[8 * v207];
              v197 = v153;
              bzero(v154, v153);
              v155 = (char *)(v146 - v145);
              if (v146 != v145)
                break;
              *(_QWORD *)(v127 - 24) = v154;
              *(_QWORD *)(v127 - 16) = &v154[v197];
              *(_QWORD *)(v127 - 8) = &v192[8 * v202];
              if (v146)
                goto LABEL_188;
LABEL_189:
              v170 = 0;
              v171 = 0;
              do
              {
                *(_QWORD *)&(*v130)[8 * v171++] = *v129 + v170;
                v170 += 2 * v208;
              }
              while (v135 != v171);
LABEL_191:
              v172 = v221;
              if (v221)
              {
                v173 = (unint64_t *)&v221->__shared_owners_;
                do
                  v174 = __ldaxr(v173);
                while (__stlxr(v174 - 1, v173));
                if (!v174)
                {
                  ((void (*)(std::__shared_weak_count *))v172->__on_zero_shared)(v172);
                  std::__shared_weak_count::__release_weak(v172);
                }
              }
              v124 -= 144;
              v125 -= 144;
              v126 = v194;
              if (v124 == v193)
              {
                v2 = a1;
                v124 = (char *)a1[6];
                v175 = (char *)a1[7];
                a1[6] = v194;
                v176 = v218;
                *(_OWORD *)(a1 + 7) = v218;
                v113 = v176;
                v4 = v187;
                if (v175 != v124)
                {
                  v177 = v175 - 144;
                  v178 = (void (***)(char *))(v175 - 144);
                  do
                  {
                    v179 = *v178;
                    v178 -= 18;
                    (*v179)(v177);
                    v180 = v177 == v124;
                    v177 = (char *)v178;
                  }
                  while (!v180);
                }
                if (v124)
LABEL_205:
                  operator delete(v124);
LABEL_206:
                v2[7] = v113;
                if (__p)
                  operator delete(__p);
                if (v214)
                {
                  v181 = (unint64_t *)&v214->__shared_owners_;
                  do
                    v182 = __ldaxr(v181);
                  while (__stlxr(v182 - 1, v181));
                  if (!v182)
                  {
                    ((void (*)(std::__shared_weak_count *))v214->__on_zero_shared)(v214);
                    std::__shared_weak_count::__release_weak(v214);
                  }
                }
                v7 = v188 + 1;
                v5 = v2[3];
                v3 = v190;
                if (v188 + 1 >= v5)
                {
                  v1 = v2[2];
                  goto LABEL_5;
                }
                goto LABEL_9;
              }
            }
            v156 = v155 - 8;
            if ((unint64_t)(v155 - 8) >= 0x58)
            {
              v158 = v192;
              v157 = v154;
              v159 = v197;
              if ((unint64_t)(v145 - v192) >= 0x20)
              {
                v162 = ((unint64_t)v156 >> 3) + 1;
                v163 = 8 * (v162 & 0x3FFFFFFFFFFFFFFCLL);
                v164 = &v146[-v163];
                v157 = &v154[-v163];
                v165 = &v192[8 * v207 - 16];
                v166 = v146 - 16;
                v167 = v162 & 0x3FFFFFFFFFFFFFFCLL;
                do
                {
                  v168 = *(_OWORD *)v166;
                  *((_OWORD *)v165 - 1) = *((_OWORD *)v166 - 1);
                  *(_OWORD *)v165 = v168;
                  v165 -= 32;
                  v166 -= 32;
                  v167 -= 4;
                }
                while (v167);
                v146 = v164;
                if (v162 == (v162 & 0x3FFFFFFFFFFFFFFCLL))
                {
LABEL_187:
                  v146 = *v130;
                  *(_QWORD *)(v127 - 24) = v157;
                  *(_QWORD *)(v127 - 16) = &v154[v159];
                  *(_QWORD *)(v127 - 8) = &v158[8 * v202];
                  if (!v146)
                    goto LABEL_189;
LABEL_188:
                  operator delete(v146);
                  goto LABEL_189;
                }
              }
            }
            else
            {
              v157 = v154;
              v158 = v192;
              v159 = v197;
            }
            do
            {
              v169 = *((_QWORD *)v146 - 1);
              v146 -= 8;
              *((_QWORD *)v157 - 1) = v169;
              v157 -= 8;
            }
            while (v146 != v145);
            goto LABEL_187;
          }
LABEL_137:
          operator delete(v80);
          goto LABEL_138;
        }
        v95 = v94 - 8;
        if ((unint64_t)(v94 - 8) >= 0x58)
        {
          v97 = v92;
          v96 = v93;
          v98 = v205;
          if ((unint64_t)(v80 - v81 - (_QWORD)v92) >= 0x20)
          {
            v114 = ((unint64_t)v95 >> 3) + 1;
            v115 = 8 * (v114 & 0x3FFFFFFFFFFFFFFCLL);
            v116 = &v80[-v115];
            v96 = &v93[-v115];
            v117 = &v92[8 * v82 - 16];
            v118 = v80 - 16;
            v119 = v114 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v120 = *(_OWORD *)v118;
              *((_OWORD *)v117 - 1) = *((_OWORD *)v118 - 1);
              *(_OWORD *)v117 = v120;
              v117 -= 32;
              v118 -= 32;
              v119 -= 4;
            }
            while (v119);
            v80 = v116;
            if (v114 == (v114 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_136:
              v80 = *v77;
              *v77 = v96;
              *v79 = &v93[v98];
              *v200 = &v97[8 * v195];
              if (!v80)
                goto LABEL_138;
              goto LABEL_137;
            }
          }
        }
        else
        {
          v96 = v93;
          v97 = v92;
          v98 = v205;
        }
        do
        {
          v121 = *((_QWORD *)v80 - 1);
          v80 -= 8;
          *((_QWORD *)v96 - 1) = v121;
          v96 -= 8;
        }
        while (v80 != v76);
        goto LABEL_136;
      }
LABEL_39:
      operator delete(v24);
      goto LABEL_40;
    }
  }
}

void sub_20FD745A0(void *a1)
{
  void *v1;

  __cxa_begin_catch(a1);
  free(v1);
  __cxa_rethrow();
}

void sub_20FD745B4(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_20FD745CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35)
{
  uint64_t v35;

  sub_20FD74850(&a35);
  sub_20E86665C(v35 - 192);
  _Unwind_Resume(a1);
}

void sub_20FD745E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35)
{
  _QWORD *v35;
  uint64_t v36;
  void *v38;
  std::__shared_weak_count *v39;
  unint64_t *p_shared_owners;
  unint64_t v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;

  v38 = (void *)v35[15];
  if (v38)
  {
    v35[16] = v38;
    operator delete(v38);
  }
  v39 = (std::__shared_weak_count *)v35[14];
  if (v39)
  {
    p_shared_owners = (unint64_t *)&v39->__shared_owners_;
    do
      v41 = __ldaxr(p_shared_owners);
    while (__stlxr(v41 - 1, p_shared_owners));
    if (!v41)
    {
      ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
      std::__shared_weak_count::__release_weak(v39);
    }
  }
  v42 = (std::__shared_weak_count *)v35[12];
  if (v42)
  {
    v43 = (unint64_t *)&v42->__shared_owners_;
    do
      v44 = __ldaxr(v43);
    while (__stlxr(v44 - 1, v43));
    if (!v44)
    {
      ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
      std::__shared_weak_count::__release_weak(v42);
    }
  }
  *(_QWORD *)(a23 + 56) = v35;
  sub_20FD74850(&a35);
  sub_20E86665C(v36 - 192);
  _Unwind_Resume(a1);
}

void sub_20FD7468C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,void *__p,uint64_t a51)
{
  uint64_t v51;
  uint64_t v52;
  void *v54;
  std::__shared_weak_count *v55;
  unint64_t *p_shared_owners;
  unint64_t v57;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;

  v54 = *(void **)(v51 + 144 * a31 + 120);
  if (v54)
  {
    *(_QWORD *)(v51 + 144 * a31 + 128) = v54;
    operator delete(v54);
  }
  v55 = *(std::__shared_weak_count **)(v51 + 144 * a31 + 112);
  if (v55)
  {
    p_shared_owners = (unint64_t *)&v55->__shared_owners_;
    do
      v57 = __ldaxr(p_shared_owners);
    while (__stlxr(v57 - 1, p_shared_owners));
    if (!v57)
    {
      ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
      std::__shared_weak_count::__release_weak(v55);
    }
  }
  v58 = *(std::__shared_weak_count **)(v51 + 144 * a31 + 96);
  if (v58)
  {
    v59 = (unint64_t *)&v58->__shared_owners_;
    do
      v60 = __ldaxr(v59);
    while (__stlxr(v60 - 1, v59));
    if (!v60)
    {
      ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
      std::__shared_weak_count::__release_weak(v58);
    }
  }
  sub_20EDB6B64(v52 - 144);
  sub_20FD74850(&a35);
  sub_20E86665C(v52 - 192);
  _Unwind_Resume(a1);
}

_QWORD *sub_20FD74850(_QWORD *a1)
{
  void *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  *a1 = &off_24CA06DF0;
  v2 = (void *)a1[15];
  if (v2)
  {
    a1[16] = v2;
    operator delete(v2);
  }
  v3 = (std::__shared_weak_count *)a1[14];
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
      v6 = (std::__shared_weak_count *)a1[12];
      if (v6)
        goto LABEL_8;
      return a1;
    }
  }
  v6 = (std::__shared_weak_count *)a1[12];
  if (!v6)
    return a1;
LABEL_8:
  v7 = (unint64_t *)&v6->__shared_owners_;
  do
    v8 = __ldaxr(v7);
  while (__stlxr(v8 - 1, v7));
  if (v8)
    return a1;
  ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
  std::__shared_weak_count::__release_weak(v6);
  return a1;
}

void sub_20FD7491C(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC6398);
}

void sub_20FD74940(uint64_t a1)
{
  free(*(void **)(a1 + 24));
}

uint64_t sub_20FD74948(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3vio16image_processing17ScaleSpacePyramidIsE23MakevImage_BufferSharedEPvEUlPsE_")
    return a1 + 24;
  if (((v3 & (unint64_t)"ZN4cv3d3vio16image_processing17ScaleSpacePyramidIsE23MakevImage_BufferSharedEPvEUlPsE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3vio16image_processing17ScaleSpacePyramidIsE23MakevImage_BufferSharedEPvEUlPsE_"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3vio16image_processing17ScaleSpacePyramidIsE23MakevImage_BufferSharedEPvEUlPsE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

void sub_20FD749B8(_QWORD *a1)
{
  void *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  *a1 = &off_24CA06DF0;
  v2 = (void *)a1[15];
  if (v2)
  {
    a1[16] = v2;
    operator delete(v2);
  }
  v3 = (std::__shared_weak_count *)a1[14];
  if (!v3)
    goto LABEL_7;
  p_shared_owners = (unint64_t *)&v3->__shared_owners_;
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (!v5)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
    v6 = (std::__shared_weak_count *)a1[12];
    if (!v6)
      goto LABEL_13;
  }
  else
  {
LABEL_7:
    v6 = (std::__shared_weak_count *)a1[12];
    if (!v6)
      goto LABEL_13;
  }
  v7 = (unint64_t *)&v6->__shared_owners_;
  do
    v8 = __ldaxr(v7);
  while (__stlxr(v8 - 1, v7));
  if (!v8)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
LABEL_13:
  JUMPOUT(0x212BC6398);
}

__n128 sub_20FD74A80(uint64_t a1, __int128 *a2)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;
  uint64_t v6;
  _QWORD *v7;
  void *v8;
  void (***v9)(_QWORD);
  void (***v10)(_QWORD);
  void *v11;
  void (***v12)(_QWORD);
  void (***v13)(_QWORD);
  void (**v14)(_QWORD);
  BOOL v15;
  uint64_t v16;
  _QWORD *v17;
  void *v18;
  void (***v19)(_QWORD);
  void (***v20)(_QWORD);
  void *v21;
  void (***v22)(_QWORD);
  void (***v23)(_QWORD);
  void (**v24)(_QWORD);
  __int128 *v25;
  uint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  uint64_t v29;
  float v30;
  int v31;
  __int128 v32;
  __int128 v33;
  float v34;
  uint64_t v35;
  __int128 v36;
  __int128 v37;
  uint64_t v38;
  __int128 v39;
  __int128 v40;
  __n128 result;

  v3 = *a2;
  v4 = a2[1];
  v5 = a2[2];
  *(_OWORD *)(a1 + 52) = *(__int128 *)((char *)a2 + 44);
  *(_OWORD *)(a1 + 40) = v5;
  *(_OWORD *)(a1 + 24) = v4;
  *(_OWORD *)(a1 + 8) = v3;
  v6 = operator new();
  *(_OWORD *)(v6 + 80) = 0u;
  *(_OWORD *)(v6 + 96) = 0u;
  *(_OWORD *)(v6 + 48) = 0u;
  *(_OWORD *)(v6 + 64) = 0u;
  *(_QWORD *)(v6 + 112) = 0;
  *(_QWORD *)v6 = 0x3E4CCCCD3DCCCCCDLL;
  *(_OWORD *)(v6 + 8) = xmmword_2103BF960;
  *(int64x2_t *)(v6 + 24) = vdupq_n_s64(3uLL);
  *(_QWORD *)(v6 + 40) = 1;
  *(_OWORD *)(v6 + 72) = 0u;
  *(_OWORD *)(v6 + 88) = 0u;
  *(_OWORD *)(v6 + 56) = 0u;
  *(_QWORD *)(v6 + 104) = 0x404000003F800000;
  v7 = *(_QWORD **)(a1 + 80);
  *(_QWORD *)(a1 + 80) = v6;
  if (v7)
  {
    v8 = (void *)v7[10];
    if (v8)
    {
      v7[11] = v8;
      operator delete(v8);
    }
    v9 = (void (***)(_QWORD))v7[7];
    if (v9)
    {
      v10 = (void (***)(_QWORD))v7[8];
      v11 = (void *)v7[7];
      if (v10 != v9)
      {
        v12 = v10 - 18;
        v13 = v10 - 18;
        do
        {
          v14 = *v13;
          v13 -= 18;
          (*v14)(v12);
          v15 = v12 == v9;
          v12 = v13;
        }
        while (!v15);
        v11 = (void *)v7[7];
      }
      v7[8] = v9;
      operator delete(v11);
    }
    MEMORY[0x212BC6398](v7, 0x1020C40F2A84FA7);
  }
  v16 = operator new();
  *(_OWORD *)v16 = xmmword_2103BF960;
  *(int64x2_t *)(v16 + 16) = vdupq_n_s64(3uLL);
  *(_QWORD *)(v16 + 32) = 1;
  *(_QWORD *)(v16 + 40) = 0;
  *(_OWORD *)(v16 + 48) = 0u;
  *(_OWORD *)(v16 + 64) = 0u;
  *(_OWORD *)(v16 + 80) = 0u;
  v17 = *(_QWORD **)(a1 + 88);
  *(_QWORD *)(a1 + 88) = v16;
  if (v17)
  {
    v18 = (void *)v17[9];
    if (v18)
    {
      v17[10] = v18;
      operator delete(v18);
    }
    v19 = (void (***)(_QWORD))v17[6];
    if (v19)
    {
      v20 = (void (***)(_QWORD))v17[7];
      v21 = (void *)v17[6];
      if (v20 != v19)
      {
        v22 = v20 - 18;
        v23 = v20 - 18;
        do
        {
          v24 = *v23;
          v23 -= 18;
          (*v24)(v22);
          v15 = v22 == v19;
          v22 = v23;
        }
        while (!v15);
        v21 = (void *)v17[6];
      }
      v17[7] = v19;
      operator delete(v21);
    }
    MEMORY[0x212BC6398](v17, 0x1020C4024B85F43);
  }
  v25 = (__int128 *)(a1 + 8);
  *(_QWORD *)(a1 + 60) = 0x3F80000000000000;
  v26 = operator new();
  *(_OWORD *)v26 = 0u;
  *(_OWORD *)(v26 + 16) = 0u;
  *(_OWORD *)(v26 + 80) = 0u;
  *(_OWORD *)(v26 + 96) = 0u;
  *(_OWORD *)(v26 + 112) = 0u;
  *(_OWORD *)(v26 + 128) = 0u;
  *(_OWORD *)(v26 + 160) = 0u;
  *(_OWORD *)(v26 + 176) = 0u;
  *(_OWORD *)(v26 + 192) = 0u;
  *(_OWORD *)(v26 + 208) = 0u;
  *(_OWORD *)(v26 + 224) = 0u;
  *(_OWORD *)(v26 + 240) = 0u;
  *(_OWORD *)(v26 + 256) = 0u;
  *(_OWORD *)(v26 + 272) = 0u;
  *(_OWORD *)(v26 + 288) = 0u;
  *(_OWORD *)(v26 + 304) = 0u;
  *(_OWORD *)(v26 + 320) = 0u;
  *(_OWORD *)(v26 + 144) = 0u;
  *(_QWORD *)v26 = &off_24CA06E50;
  *(_OWORD *)(v26 + 16) = 0u;
  *(_OWORD *)(v26 + 32) = 0u;
  *(_OWORD *)(v26 + 32) = 0u;
  *(_OWORD *)(v26 + 48) = 0u;
  *(_OWORD *)(v26 + 48) = 0u;
  *(_OWORD *)(v26 + 64) = 0u;
  *(_OWORD *)(v26 + 57) = 0u;
  *(_OWORD *)(v26 + 88) = 0u;
  *(_OWORD *)(v26 + 104) = 0u;
  *(_OWORD *)(v26 + 120) = 0u;
  *(_QWORD *)(v26 + 136) = 0;
  *(_QWORD *)(v26 + 144) = &off_24CA06E20;
  *(_OWORD *)(v26 + 160) = 0u;
  *(_OWORD *)(v26 + 176) = 0u;
  *(_OWORD *)(v26 + 192) = 0u;
  *(_OWORD *)(v26 + 201) = 0u;
  *(_OWORD *)(v26 + 232) = 0u;
  *(_OWORD *)(v26 + 248) = 0u;
  *(_OWORD *)(v26 + 264) = 0u;
  *(_QWORD *)(v26 + 280) = 0;
  *(_OWORD *)(v26 + 288) = xmmword_2103BF960;
  *(int64x2_t *)(v26 + 304) = vdupq_n_s64(3uLL);
  *(_QWORD *)(v26 + 320) = 1;
  v27 = *(_QWORD **)(a1 + 72);
  *(_QWORD *)(a1 + 72) = v26;
  if (v27)
  {
    v28 = sub_21011AC7C(v27);
    MEMORY[0x212BC6398](v28, 0x10B0C4048F2FA49);
  }
  v29 = *(_QWORD *)(a1 + 80);
  v31 = *(_DWORD *)(a1 + 60);
  v30 = *(float *)(a1 + 64);
  v32 = *v25;
  v33 = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(v29 + 34) = *(_OWORD *)(a1 + 34);
  *(_OWORD *)(v29 + 24) = v33;
  *(_OWORD *)(v29 + 8) = v32;
  sub_20FD715B8((vImagePixelCount *)(v29 + 8));
  *(_DWORD *)v29 = v31;
  *(float *)(v29 + 4) = v30;
  v34 = (float)*(unint64_t *)(a1 + 32);
  *(float *)(v29 + 108) = v34 / 0.69315;
  *(float *)(v29 + 104) = exp2f(1.0 / v34);
  *(float *)(v29 + 112) = logf(v30);
  v35 = *(_QWORD *)(a1 + 88);
  v36 = *v25;
  v37 = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(v35 + 26) = *(_OWORD *)(a1 + 34);
  *(_OWORD *)v35 = v36;
  *(_OWORD *)(v35 + 16) = v37;
  sub_20FD72F38((vImagePixelCount *)v35);
  v38 = *(_QWORD *)(a1 + 72);
  v39 = *(_OWORD *)(a1 + 34);
  v40 = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(v38 + 288) = *v25;
  *(_OWORD *)(v38 + 304) = v40;
  *(_OWORD *)(v38 + 314) = v39;
  sub_21011ADDC((_QWORD *)v38, (uint64_t *)(v38 + 288));
  return result;
}

void sub_20FD74DF8(_QWORD *a1, uint64_t a2, double a3, double a4, double a5, double a6, double a7, double a8, int8x16_t a9)
{
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;

  v9 = a1[9];
  v10 = (_QWORD *)a1[10];
  v11 = a1[11];
  sub_21011AF08(v9, (uint64_t)v10, v11, a2, a3, a4, a5, a6, a7, a8, a9);
  sub_21011E078(v9, v10, v11);
}

void sub_20FD74E44(_QWORD *a1)
{
  sub_20FD74E68(a1);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20FD74E68(_QWORD *a1)
{
  _QWORD *v2;
  void *v3;
  void (***v4)(_QWORD);
  void (***v5)(_QWORD);
  void *v6;
  void (***v7)(_QWORD);
  void (***v8)(_QWORD);
  void (**v9)(_QWORD);
  BOOL v10;
  _QWORD *v11;
  void *v12;
  void (***v13)(_QWORD);
  void (***v14)(_QWORD);
  void *v15;
  void (***v16)(_QWORD);
  void (***v17)(_QWORD);
  void (**v18)(_QWORD);
  _QWORD *v19;
  _QWORD *v20;

  *a1 = off_24CA06E80;
  v2 = (_QWORD *)a1[11];
  a1[11] = 0;
  if (v2)
  {
    v3 = (void *)v2[9];
    if (v3)
    {
      v2[10] = v3;
      operator delete(v3);
    }
    v4 = (void (***)(_QWORD))v2[6];
    if (v4)
    {
      v5 = (void (***)(_QWORD))v2[7];
      v6 = (void *)v2[6];
      if (v5 != v4)
      {
        v7 = v5 - 18;
        v8 = v5 - 18;
        do
        {
          v9 = *v8;
          v8 -= 18;
          (*v9)(v7);
          v10 = v7 == v4;
          v7 = v8;
        }
        while (!v10);
        v6 = (void *)v2[6];
      }
      v2[7] = v4;
      operator delete(v6);
    }
    MEMORY[0x212BC6398](v2, 0x1020C4024B85F43);
  }
  v11 = (_QWORD *)a1[10];
  a1[10] = 0;
  if (v11)
  {
    v12 = (void *)v11[10];
    if (v12)
    {
      v11[11] = v12;
      operator delete(v12);
    }
    v13 = (void (***)(_QWORD))v11[7];
    if (v13)
    {
      v14 = (void (***)(_QWORD))v11[8];
      v15 = (void *)v11[7];
      if (v14 != v13)
      {
        v16 = v14 - 18;
        v17 = v14 - 18;
        do
        {
          v18 = *v17;
          v17 -= 18;
          (*v18)(v16);
          v10 = v16 == v13;
          v16 = v17;
        }
        while (!v10);
        v15 = (void *)v11[7];
      }
      v11[8] = v13;
      operator delete(v15);
    }
    MEMORY[0x212BC6398](v11, 0x1020C40F2A84FA7);
  }
  v19 = (_QWORD *)a1[9];
  a1[9] = 0;
  if (v19)
  {
    v20 = sub_21011AC7C(v19);
    MEMORY[0x212BC6398](v20, 0x10B0C4048F2FA49);
  }
  return a1;
}

uint64_t sub_20FD74FC0(uint64_t a1, __int128 *a2)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;
  uint64_t v6;
  _QWORD *v7;
  void *v8;
  void (***v9)(_QWORD);
  void (***v10)(_QWORD);
  void *v11;
  void (***v12)(_QWORD);
  void (***v13)(_QWORD);
  void (**v14)(_QWORD);
  BOOL v15;
  uint64_t v16;
  _QWORD *v17;
  void *v18;
  void (***v19)(_QWORD);
  void (***v20)(_QWORD);
  void *v21;
  void (***v22)(_QWORD);
  void (***v23)(_QWORD);
  void (**v24)(_QWORD);
  int v25;
  uint64_t v26;
  __int128 v27;
  uint64_t v28;
  uint64_t v29;
  float v30;
  int v31;
  __int128 v32;
  __int128 v33;
  float v34;
  uint64_t v35;
  uint64_t v36;
  __int128 v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  __int128 v42;

  v3 = *a2;
  v4 = a2[1];
  v5 = a2[2];
  *(_OWORD *)(a1 + 52) = *(__int128 *)((char *)a2 + 44);
  *(_OWORD *)(a1 + 40) = v5;
  *(_OWORD *)(a1 + 24) = v4;
  *(_OWORD *)(a1 + 8) = v3;
  v6 = operator new();
  *(_OWORD *)(v6 + 80) = 0u;
  *(_OWORD *)(v6 + 96) = 0u;
  *(_OWORD *)(v6 + 48) = 0u;
  *(_OWORD *)(v6 + 64) = 0u;
  *(_QWORD *)(v6 + 112) = 0;
  *(_QWORD *)v6 = 0x3E4CCCCD3DCCCCCDLL;
  *(_OWORD *)(v6 + 8) = xmmword_2103BF960;
  *(int64x2_t *)(v6 + 24) = vdupq_n_s64(3uLL);
  *(_QWORD *)(v6 + 40) = 1;
  *(_OWORD *)(v6 + 72) = 0u;
  *(_OWORD *)(v6 + 88) = 0u;
  *(_OWORD *)(v6 + 56) = 0u;
  *(_QWORD *)(v6 + 104) = 0x404000003F800000;
  v7 = *(_QWORD **)(a1 + 80);
  *(_QWORD *)(a1 + 80) = v6;
  if (v7)
  {
    v8 = (void *)v7[10];
    if (v8)
    {
      v7[11] = v8;
      operator delete(v8);
    }
    v9 = (void (***)(_QWORD))v7[7];
    if (v9)
    {
      v10 = (void (***)(_QWORD))v7[8];
      v11 = (void *)v7[7];
      if (v10 != v9)
      {
        v12 = v10 - 18;
        v13 = v10 - 18;
        do
        {
          v14 = *v13;
          v13 -= 18;
          (*v14)(v12);
          v15 = v12 == v9;
          v12 = v13;
        }
        while (!v15);
        v11 = (void *)v7[7];
      }
      v7[8] = v9;
      operator delete(v11);
    }
    MEMORY[0x212BC6398](v7, 0x1020C40F2A84FA7);
  }
  v16 = operator new();
  *(_OWORD *)v16 = xmmword_2103BF960;
  *(int64x2_t *)(v16 + 16) = vdupq_n_s64(3uLL);
  *(_QWORD *)(v16 + 32) = 1;
  *(_QWORD *)(v16 + 40) = 0;
  *(_OWORD *)(v16 + 48) = 0u;
  *(_OWORD *)(v16 + 64) = 0u;
  *(_OWORD *)(v16 + 80) = 0u;
  v17 = *(_QWORD **)(a1 + 88);
  *(_QWORD *)(a1 + 88) = v16;
  if (v17)
  {
    v18 = (void *)v17[9];
    if (v18)
    {
      v17[10] = v18;
      operator delete(v18);
    }
    v19 = (void (***)(_QWORD))v17[6];
    if (v19)
    {
      v20 = (void (***)(_QWORD))v17[7];
      v21 = (void *)v17[6];
      if (v20 != v19)
      {
        v22 = v20 - 18;
        v23 = v20 - 18;
        do
        {
          v24 = *v23;
          v23 -= 18;
          (*v24)(v22);
          v15 = v22 == v19;
          v22 = v23;
        }
        while (!v15);
        v21 = (void *)v17[6];
      }
      v17[7] = v19;
      operator delete(v21);
    }
    MEMORY[0x212BC6398](v17, 0x1020C4024B85F43);
  }
  v25 = *(_DWORD *)(a1 + 56);
  if (v25 == 1)
  {
    *(_QWORD *)(a1 + 60) = 0x3F80000000000000;
    v26 = operator new();
    v27 = 0uLL;
    *(_OWORD *)(v26 + 16) = 0u;
    *(_OWORD *)(v26 + 32) = 0u;
    *(_OWORD *)(v26 + 48) = 0u;
    *(_OWORD *)(v26 + 64) = 0u;
    *(_OWORD *)(v26 + 80) = 0u;
    *(_OWORD *)(v26 + 96) = 0u;
    *(_OWORD *)(v26 + 160) = 0u;
    *(_OWORD *)(v26 + 176) = 0u;
    *(_OWORD *)(v26 + 192) = 0u;
    *(_OWORD *)(v26 + 208) = 0u;
    *(_OWORD *)(v26 + 224) = 0u;
    *(_OWORD *)(v26 + 240) = 0u;
    *(_OWORD *)(v26 + 304) = 0u;
    *(_OWORD *)(v26 + 320) = 0u;
    *(_OWORD *)(v26 + 336) = 0u;
    *(_OWORD *)(v26 + 352) = 0u;
    *(_OWORD *)(v26 + 368) = 0u;
    *(_OWORD *)(v26 + 384) = 0u;
    *(_OWORD *)(v26 + 400) = 0u;
    *(_OWORD *)(v26 + 416) = 0u;
    *(_OWORD *)(v26 + 432) = 0u;
    *(_OWORD *)(v26 + 448) = 0u;
    *(_OWORD *)(v26 + 464) = 0u;
    *(_OWORD *)(v26 + 480) = 0u;
    *(_QWORD *)v26 = &off_24CA185E8;
    *(_QWORD *)(v26 + 8) = &off_24C9E9690;
    *(_OWORD *)(v26 + 24) = 0u;
    *(_OWORD *)(v26 + 40) = 0u;
    *(_OWORD *)(v26 + 56) = 0u;
    *(_OWORD *)(v26 + 65) = 0u;
    *(_OWORD *)(v26 + 96) = 0u;
    *(_OWORD *)(v26 + 112) = 0u;
    *(_OWORD *)(v26 + 112) = 0u;
    *(_OWORD *)(v26 + 128) = 0u;
    *(_OWORD *)(v26 + 128) = 0u;
    *(_OWORD *)(v26 + 144) = 0u;
    *(_QWORD *)(v26 + 144) = 0;
    *(_QWORD *)(v26 + 152) = &off_24CA06E50;
  }
  else
  {
    if (v25)
    {
      sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/FeatureDetection/src/DoGPyramidBuilderSinglePrecision.cpp", 56, (uint64_t)"", 0, (uint64_t)"Unknown pyramid type specified.", 31, (void (*)(void **))sub_21023DDB0);
      abort();
    }
    v26 = operator new();
    v27 = 0uLL;
    *(_OWORD *)(v26 + 16) = 0u;
    *(_OWORD *)(v26 + 32) = 0u;
    *(_OWORD *)(v26 + 48) = 0u;
    *(_OWORD *)(v26 + 64) = 0u;
    *(_OWORD *)(v26 + 80) = 0u;
    *(_OWORD *)(v26 + 96) = 0u;
    *(_OWORD *)(v26 + 160) = 0u;
    *(_OWORD *)(v26 + 176) = 0u;
    *(_OWORD *)(v26 + 192) = 0u;
    *(_OWORD *)(v26 + 208) = 0u;
    *(_OWORD *)(v26 + 224) = 0u;
    *(_OWORD *)(v26 + 240) = 0u;
    *(_OWORD *)(v26 + 304) = 0u;
    *(_OWORD *)(v26 + 320) = 0u;
    *(_OWORD *)(v26 + 336) = 0u;
    *(_OWORD *)(v26 + 352) = 0u;
    *(_OWORD *)(v26 + 368) = 0u;
    *(_OWORD *)(v26 + 384) = 0u;
    *(_OWORD *)(v26 + 400) = 0u;
    *(_OWORD *)(v26 + 416) = 0u;
    *(_OWORD *)(v26 + 432) = 0u;
    *(_OWORD *)(v26 + 448) = 0u;
    *(_OWORD *)(v26 + 464) = 0u;
    *(_OWORD *)(v26 + 480) = 0u;
    *(_QWORD *)(v26 + 496) = 0;
    *(_QWORD *)v26 = &off_24CA185A0;
    *(_QWORD *)(v26 + 8) = &off_24C9E9690;
    *(_OWORD *)(v26 + 24) = 0u;
    *(_OWORD *)(v26 + 40) = 0u;
    *(_OWORD *)(v26 + 56) = 0u;
    *(_OWORD *)(v26 + 65) = 0u;
    *(_OWORD *)(v26 + 96) = 0u;
    *(_OWORD *)(v26 + 112) = 0u;
    *(_OWORD *)(v26 + 112) = 0u;
    *(_OWORD *)(v26 + 128) = 0u;
    *(_OWORD *)(v26 + 128) = 0u;
    *(_OWORD *)(v26 + 144) = 0u;
    *(_QWORD *)(v26 + 144) = 0;
    *(_QWORD *)(v26 + 152) = &off_24C9E9690;
  }
  *(_OWORD *)(v26 + 168) = v27;
  *(_OWORD *)(v26 + 184) = v27;
  *(_OWORD *)(v26 + 200) = v27;
  *(_OWORD *)(v26 + 209) = v27;
  *(_OWORD *)(v26 + 240) = v27;
  *(_OWORD *)(v26 + 256) = v27;
  *(_OWORD *)(v26 + 256) = v27;
  *(_OWORD *)(v26 + 272) = v27;
  *(_OWORD *)(v26 + 272) = v27;
  *(_OWORD *)(v26 + 288) = v27;
  *(_QWORD *)(v26 + 288) = 0;
  *(_QWORD *)(v26 + 296) = &off_24C9E9690;
  *(_OWORD *)(v26 + 353) = v27;
  *(_OWORD *)(v26 + 328) = v27;
  *(_OWORD *)(v26 + 344) = v27;
  *(_OWORD *)(v26 + 312) = v27;
  *(_OWORD *)(v26 + 400) = v27;
  *(_OWORD *)(v26 + 416) = v27;
  *(_OWORD *)(v26 + 384) = v27;
  *(_QWORD *)(v26 + 432) = 0;
  *(_QWORD *)(v26 + 440) = 640;
  *(_OWORD *)(v26 + 448) = xmmword_2103C0160;
  *(_OWORD *)(v26 + 464) = xmmword_2102EF0C0;
  v28 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 72) = v26;
  if (v28)
    (*(void (**)(uint64_t))(*(_QWORD *)v28 + 8))(v28);
  v29 = *(_QWORD *)(a1 + 80);
  v31 = *(_DWORD *)(a1 + 60);
  v30 = *(float *)(a1 + 64);
  v32 = *(_OWORD *)(a1 + 8);
  v33 = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(v29 + 34) = *(_OWORD *)(a1 + 34);
  *(_OWORD *)(v29 + 24) = v33;
  *(_OWORD *)(v29 + 8) = v32;
  sub_20FD755F0(v29 + 8);
  *(_DWORD *)v29 = v31;
  *(float *)(v29 + 4) = v30;
  v34 = (float)(unint64_t)(*(_QWORD *)(a1 + 32) - 1);
  *(float *)(v29 + 108) = v34 / 0.69315;
  *(float *)(v29 + 104) = exp2f(1.0 / v34);
  *(float *)(v29 + 112) = logf(v30);
  v36 = *(_QWORD *)(a1 + 80);
  v35 = *(_QWORD *)(a1 + 88);
  v42 = *(_OWORD *)(v36 + 40);
  v37 = *(_OWORD *)(v36 + 8);
  v39 = v36 + 24;
  v38 = *(_QWORD *)(v36 + 24);
  v40 = *(_QWORD *)(v39 + 8) - 1;
  *(_OWORD *)v35 = v37;
  *(_QWORD *)(v35 + 16) = v38;
  *(_QWORD *)(v35 + 24) = v40;
  *(_QWORD *)(v35 + 32) = v42;
  *(_WORD *)(v35 + 40) = WORD4(v42);
  sub_20FD755F0(v35);
  return (*(uint64_t (**)(_QWORD, uint64_t, float, float))(**(_QWORD **)(a1 + 72) + 16))(*(_QWORD *)(a1 + 72), a1 + 8, *(float *)(a1 + 60), *(float *)(a1 + 64));
}

unint64_t sub_20FD7543C(uint64_t a1, uint64_t a2)
{
  (*(void (**)(_QWORD, _QWORD, uint64_t, _QWORD))(**(_QWORD **)(a1 + 72) + 24))(*(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), a2, 0);
  return sub_21011FDC8(*(_QWORD *)(a1 + 88), (_QWORD *)(*(_QWORD *)(a1 + 80) + 8));
}

void sub_20FD75480(_QWORD *a1)
{
  sub_20FD754A4(a1);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20FD754A4(_QWORD *a1)
{
  _QWORD *v2;
  void *v3;
  void (***v4)(_QWORD);
  void (***v5)(_QWORD);
  void *v6;
  void (***v7)(_QWORD);
  void (***v8)(_QWORD);
  void (**v9)(_QWORD);
  BOOL v10;
  _QWORD *v11;
  void *v12;
  void (***v13)(_QWORD);
  void (***v14)(_QWORD);
  void *v15;
  void (***v16)(_QWORD);
  void (***v17)(_QWORD);
  void (**v18)(_QWORD);
  uint64_t v19;

  *a1 = off_24CA06EC8;
  v2 = (_QWORD *)a1[11];
  a1[11] = 0;
  if (v2)
  {
    v3 = (void *)v2[9];
    if (v3)
    {
      v2[10] = v3;
      operator delete(v3);
    }
    v4 = (void (***)(_QWORD))v2[6];
    if (v4)
    {
      v5 = (void (***)(_QWORD))v2[7];
      v6 = (void *)v2[6];
      if (v5 != v4)
      {
        v7 = v5 - 18;
        v8 = v5 - 18;
        do
        {
          v9 = *v8;
          v8 -= 18;
          (*v9)(v7);
          v10 = v7 == v4;
          v7 = v8;
        }
        while (!v10);
        v6 = (void *)v2[6];
      }
      v2[7] = v4;
      operator delete(v6);
    }
    MEMORY[0x212BC6398](v2, 0x1020C4024B85F43);
  }
  v11 = (_QWORD *)a1[10];
  a1[10] = 0;
  if (v11)
  {
    v12 = (void *)v11[10];
    if (v12)
    {
      v11[11] = v12;
      operator delete(v12);
    }
    v13 = (void (***)(_QWORD))v11[7];
    if (v13)
    {
      v14 = (void (***)(_QWORD))v11[8];
      v15 = (void *)v11[7];
      if (v14 != v13)
      {
        v16 = v14 - 18;
        v17 = v14 - 18;
        do
        {
          v18 = *v17;
          v17 -= 18;
          (*v18)(v16);
          v10 = v16 == v13;
          v16 = v17;
        }
        while (!v10);
        v15 = (void *)v11[7];
      }
      v11[8] = v13;
      operator delete(v15);
    }
    MEMORY[0x212BC6398](v11, 0x1020C40F2A84FA7);
  }
  v19 = a1[9];
  a1[9] = 0;
  if (v19)
    (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
  return a1;
}

void sub_20FD755F0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  void (***v6)(_QWORD, unint64_t);
  unint64_t v7;
  unint64_t v8;
  void (***v9)(_QWORD, unint64_t);
  void (***v10)(_QWORD, unint64_t);
  void (***v11)(_QWORD, unint64_t);
  void (**v12)(_QWORD, unint64_t);
  BOOL v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  _QWORD *v29;
  std::__shared_weak_count *v30;
  unint64_t *p_shared_owners;
  unint64_t v32;
  uint64_t v33;
  char *v34;
  int64x2_t *v35;
  char *v36;
  uint64_t *v37;
  char *v38;
  char *v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  BOOL v48;
  unint64_t v49;
  char *v50;
  size_t v51;
  char *v52;
  char *v53;
  char *v54;
  unint64_t v55;
  char *v56;
  uint64_t v57;
  _BYTE *v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  _OWORD *v63;
  char *v64;
  uint64_t v65;
  __int128 v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  _BYTE *v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  unint64_t v76;
  uint64_t v77;
  _BYTE v78[7];

  v1 = a1;
  v4 = *(_QWORD *)(a1 + 48);
  v2 = a1 + 48;
  v3 = v4;
  v5 = *(_QWORD *)(v2 - 24) * *(_QWORD *)(v2 - 32);
  v6 = *(void (****)(_QWORD, unint64_t))(v2 + 8);
  v7 = 0x8E38E38E38E38E39 * (((uint64_t)v6 - v4) >> 4);
  v8 = v5 - v7;
  if (v5 <= v7)
  {
    if (v5 < v7)
    {
      v9 = (void (***)(_QWORD, unint64_t))(v3 + 144 * v5);
      if (v6 != v9)
      {
        v10 = v6 - 18;
        v11 = v6 - 18;
        do
        {
          v12 = *v11;
          v11 -= 18;
          (*v12)(v10, v8);
          v13 = v10 == v9;
          v10 = v11;
        }
        while (!v13);
      }
      *(_QWORD *)(v1 + 56) = v9;
    }
  }
  else
  {
    sub_20FD75A94((char **)v2, v8);
  }
  v14 = *(_QWORD *)(v1 + 16);
  if (v14)
  {
    v15 = *(_QWORD *)(v1 + 24);
    if (v15)
    {
      v16 = 0;
      v73 = v1;
      while (1)
      {
        v17 = *(_BYTE *)(v1 + 41) ? ~(-1 << v16) : 0;
        if (v15)
          break;
LABEL_13:
        if (++v16 >= v14)
          return;
      }
      v18 = 0;
      v19 = (unint64_t)(v17 + *(_QWORD *)(v1 + 8)) >> v16;
      v76 = (unint64_t)(v17 + *(_QWORD *)v1) >> v16;
      v74 = v16;
      while (1)
      {
        v75 = v18;
        v20 = v18 + v15 * v16;
        v21 = *(_QWORD *)(v1 + 48);
        v22 = *(_QWORD *)(v1 + 32);
        v23 = v22 * v76;
        v24 = v21 + 144 * v20;
        v77 = v22;
        *(_QWORD *)(v24 + 16) = v22;
        v25 = (_QWORD *)(v24 + 16);
        v25[2] = v76;
        v25[3] = v22 * v76;
        v25[4] = v19;
        v26 = operator new[]();
        v27 = (_QWORD *)operator new();
        *v27 = &off_24C9E9908;
        v27[1] = 0;
        v27[2] = 0;
        v27[3] = v26;
        v28 = v21 + 144 * v20;
        *(_QWORD *)(v28 + 88) = v26;
        v29 = (_QWORD *)(v28 + 88);
        v30 = (std::__shared_weak_count *)v29[1];
        v29[1] = v27;
        if (v30)
        {
          p_shared_owners = (unint64_t *)&v30->__shared_owners_;
          do
            v32 = __ldaxr(p_shared_owners);
          while (__stlxr(v32 - 1, p_shared_owners));
          if (!v32)
          {
            ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
            std::__shared_weak_count::__release_weak(v30);
          }
        }
        v33 = v21 + 144 * v20;
        v36 = *(char **)(v33 + 120);
        v35 = (int64x2_t *)(v33 + 120);
        v34 = v36;
        v35[-6].i64[0] = 0;
        *((_BYTE *)v29 - 80) = 0;
        v25[2] = v76;
        v25[3] = v23;
        v25[4] = v19;
        *v25 = v77;
        v35[-3].i8[0] = 0;
        *(__int32 *)((char *)v35[-3].i32 + 1) = *(_DWORD *)v78;
        v35[-3].i32[1] = *(_DWORD *)&v78[3];
        v35[-3].i8[8] = 0;
        v35[-4] = vdupq_n_s64(4 * v77);
        v37 = &v35->i64[1];
        v38 = (char *)v35->i64[1];
        v39 = (char *)(v38 - v36);
        v40 = (v38 - v36) >> 3;
        v41 = v19 - v40;
        if (v19 <= v40)
        {
          v16 = v74;
          if (v19 < v40)
            *v37 = (uint64_t)&v34[8 * v19];
          v55 = v75;
          if (!v19)
            goto LABEL_19;
          goto LABEL_50;
        }
        v42 = v21 + 144 * v20;
        v45 = *(_QWORD *)(v42 + 136);
        v44 = (_QWORD *)(v42 + 136);
        v43 = v45;
        if (v41 > (v45 - (uint64_t)v38) >> 3)
          break;
        bzero((void *)v35->i64[1], 8 * v41);
        *v37 = (uint64_t)&v38[8 * v41];
        v16 = v74;
        v55 = v75;
LABEL_50:
        v68 = 0;
        v69 = 0;
        do
        {
          *(_QWORD *)(v35->i64[0] + 8 * v69++) = *v29 + v68;
          v68 += 4 * v76 * v77;
        }
        while (v19 != v69);
LABEL_19:
        v18 = v55 + 1;
        v1 = v73;
        v15 = *(_QWORD *)(v73 + 24);
        if (v18 >= v15)
        {
          v14 = *(_QWORD *)(v73 + 16);
          goto LABEL_13;
        }
      }
      if (v19 >> 61)
        sub_20E867F44();
      v46 = v43 - (_QWORD)v34;
      v47 = v46 >> 2;
      if (v46 >> 2 <= v19)
        v47 = v19;
      v48 = (unint64_t)v46 >= 0x7FFFFFFFFFFFFFF8;
      v49 = 0x1FFFFFFFFFFFFFFFLL;
      if (!v48)
        v49 = v47;
      if (v49 >> 61)
        sub_20E877A38();
      v50 = v34;
      v71 = 8 * v49;
      v70 = operator new(8 * v49);
      v72 = &v70[8 * v40];
      v51 = 8 * v41;
      bzero(v72, v51);
      v52 = (char *)(v38 - v50);
      if (v38 == v50)
      {
        v57 = v71;
        v56 = &v70[8 * v40];
        v16 = v74;
        v55 = v75;
        v58 = v70;
        goto LABEL_48;
      }
      v53 = v50;
      v54 = v52 - 8;
      v55 = v75;
      if ((unint64_t)(v52 - 8) >= 0x58)
      {
        v58 = v70;
        v57 = v71;
        v59 = v38 - v39 - (_QWORD)v70;
        v56 = &v70[8 * v40];
        v16 = v74;
        if (v59 >= 0x20)
        {
          v60 = ((unint64_t)v54 >> 3) + 1;
          v61 = 8 * (v60 & 0x3FFFFFFFFFFFFFFCLL);
          v62 = &v38[-v61];
          v56 = &v72[-v61];
          v63 = &v70[8 * v40 - 16];
          v64 = v38 - 16;
          v65 = v60 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v66 = *(_OWORD *)v64;
            *(v63 - 1) = *((_OWORD *)v64 - 1);
            *v63 = v66;
            v63 -= 2;
            v64 -= 32;
            v65 -= 4;
          }
          while (v65);
          v38 = v62;
          if (v60 == (v60 & 0x3FFFFFFFFFFFFFFCLL))
            goto LABEL_47;
        }
      }
      else
      {
        v57 = v71;
        v56 = &v70[8 * v40];
        v16 = v74;
        v58 = v70;
      }
      do
      {
        v67 = *((_QWORD *)v38 - 1);
        v38 -= 8;
        *((_QWORD *)v56 - 1) = v67;
        v56 -= 8;
      }
      while (v38 != v53);
LABEL_47:
      v38 = (char *)v35->i64[0];
LABEL_48:
      v35->i64[0] = (uint64_t)v56;
      *v37 = (uint64_t)&v72[v51];
      *v44 = &v58[v57];
      if (v38)
        operator delete(v38);
      goto LABEL_50;
    }
  }
}

void sub_20FD75A5C(void *a1)
{
  uint64_t v1;

  __cxa_begin_catch(a1);
  MEMORY[0x212BC6368](v1, 0x1000C8052888210);
  __cxa_rethrow();
}

void sub_20FD75A80(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_20FD75A94(char **a1, unint64_t a2)
{
  char *v4;
  char *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  char *i;
  char *v19;
  char *v20;
  char *v21;
  char *v22;
  char *v23;
  char *v24;
  void (**v25)(char *);
  BOOL v26;
  __int128 v27;

  v4 = a1[2];
  v5 = a1[1];
  if (0x8E38E38E38E38E39 * ((v4 - v5) >> 4) >= a2)
  {
    if (a2)
    {
      v11 = &v5[144 * a2];
      v12 = 144 * a2;
      do
      {
        *(_OWORD *)(v5 + 24) = 0uLL;
        *(_OWORD *)(v5 + 8) = 0uLL;
        *(_OWORD *)(v5 + 40) = 0uLL;
        *(_OWORD *)(v5 + 56) = 0uLL;
        *(_OWORD *)(v5 + 72) = 0uLL;
        *(_QWORD *)v5 = &off_24C9E9690;
        *((_OWORD *)v5 + 1) = 0uLL;
        *((_OWORD *)v5 + 2) = 0uLL;
        *((_OWORD *)v5 + 3) = 0uLL;
        *(_OWORD *)(v5 + 57) = 0uLL;
        *(_OWORD *)(v5 + 88) = 0uLL;
        *(_OWORD *)(v5 + 104) = 0uLL;
        *(_OWORD *)(v5 + 120) = 0uLL;
        *((_QWORD *)v5 + 17) = 0;
        v5 += 144;
        v12 -= 144;
      }
      while (v12);
      v5 = v11;
    }
    a1[1] = v5;
  }
  else
  {
    v6 = 0x8E38E38E38E38E39 * ((v5 - *a1) >> 4);
    v7 = v6 + a2;
    if (v6 + a2 > 0x1C71C71C71C71C7)
      sub_20E867F44();
    v8 = 0x8E38E38E38E38E39 * ((v4 - *a1) >> 4);
    if (2 * v8 > v7)
      v7 = 2 * v8;
    if (v8 >= 0xE38E38E38E38E3)
      v9 = 0x1C71C71C71C71C7;
    else
      v9 = v7;
    if (v9)
    {
      if (v9 > 0x1C71C71C71C71C7)
        sub_20E877A38();
      v10 = (char *)operator new(144 * v9);
    }
    else
    {
      v10 = 0;
    }
    v13 = &v10[144 * v6];
    *((_QWORD *)&v27 + 1) = &v10[144 * v9];
    v14 = 144 * a2;
    v15 = &v13[144 * a2];
    v16 = v13;
    do
    {
      *(_OWORD *)(v16 + 24) = 0uLL;
      *(_OWORD *)(v16 + 8) = 0uLL;
      *(_OWORD *)(v16 + 40) = 0uLL;
      *(_OWORD *)(v16 + 56) = 0uLL;
      *(_OWORD *)(v16 + 72) = 0uLL;
      *(_QWORD *)v16 = &off_24C9E9690;
      *((_OWORD *)v16 + 1) = 0uLL;
      *((_OWORD *)v16 + 2) = 0uLL;
      *((_OWORD *)v16 + 3) = 0uLL;
      *(_OWORD *)(v16 + 57) = 0uLL;
      *(_OWORD *)(v16 + 88) = 0uLL;
      *(_OWORD *)(v16 + 104) = 0uLL;
      *(_OWORD *)(v16 + 120) = 0uLL;
      *((_QWORD *)v16 + 17) = 0;
      v16 += 144;
      v14 -= 144;
    }
    while (v14);
    v17 = 0;
    *(_QWORD *)&v27 = v15;
    v19 = *a1;
    for (i = a1[1]; &i[v17] != v19; sub_20EDB5734((uint64_t)&v13[v17], (uint64_t)&i[v17]))
      v17 -= 144;
    v20 = &v13[v17];
    v22 = *a1;
    v21 = a1[1];
    *a1 = v20;
    *(_OWORD *)(a1 + 1) = v27;
    if (v21 != v22)
    {
      v23 = v21 - 144;
      v24 = v21 - 144;
      do
      {
        v25 = *(void (***)(char *))v24;
        v24 -= 144;
        (*v25)(v23);
        v26 = v23 == v22;
        v23 = v24;
      }
      while (!v26);
    }
    if (v22)
      operator delete(v22);
  }
}

void sub_20FD75D28(_QWORD *a1, uint64_t a2, uint64_t *a3)
{
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  unsigned int v17;
  int v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  float v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  char *v39;
  unint64_t v40;
  char *v41;
  float *v42;
  float v43;
  float v44;
  float v45;
  uint64_t v46;
  int v47;
  float *v48;
  float v49;
  float v50;
  unint64_t v51;
  float *v52;
  float *v53;
  float v54;
  unint64_t v55;
  float v56;
  float v57;
  uint64_t v58;
  uint64_t v59;
  float v60;
  float v61;
  uint64_t v62;
  float *v63;
  float v64;
  uint64_t v65;
  float v66;
  uint64_t v67;
  float *v68;
  float v69;
  float v70;
  float *v71;
  float v72;
  unint64_t v73;
  float v74;
  float v75;
  uint64_t v76;
  float v77;
  float v78;
  float v79;
  uint64_t v80;
  float v81;
  float v82;
  float v83;
  uint64_t v84;
  char *v85;
  char *v86;
  char *v87;
  uint64_t v88;
  int v89;
  uint64_t v90;
  float v91;
  float v92;
  uint64_t v93;
  unint64_t v94;
  unint64_t v95;
  unint64_t v96;
  char *v97;
  char *v98;
  size_t v99;
  char *v100;
  uint64_t v101;
  char *v102;
  uint64_t v103;
  unint64_t v104;
  char *v105;
  uint64_t v106;
  uint64_t v107;
  unint64_t v108;
  uint64_t v109;
  unint64_t v110;
  _BYTE *v111;
  _QWORD *v112;
  char *v113;
  unint64_t v114;
  char *v115;
  uint64_t v116;
  unint64_t v117;
  uint64_t v118;
  uint64_t v119;
  _OWORD *v120;
  char *v121;
  uint64_t v122;
  __int128 v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  _QWORD *v128;
  uint64_t v129;
  uint64_t v130;
  void *__p;
  char *v132;
  char *v133;
  _DWORD v134[3];

  if (*a3 < (unint64_t)a3[2]
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/FeatureDetection/src/HarrisFeatureDetector/HarrisConnerExtraction.cpp", 83, (uint64_t)"config.image_width >= config.bucket_width", 41, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
    goto LABEL_212;
  }
  v6 = a3[3];
  if (a3[1] >= v6)
    goto LABEL_6;
  if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/FeatureDetection/src/HarrisFeatureDetector/HarrisConnerExtraction.cpp", 84, (uint64_t)"config.image_height >= config.bucket_height", 43, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
LABEL_212:
    abort();
  }
  v6 = a3[3];
LABEL_6:
  v7 = *a3;
  v8 = (unint64_t)((double)(*a3 * v6) * 0.04);
  __p = 0;
  v132 = 0;
  v133 = 0;
  if (v8)
  {
    if (v8 > 0x1555555555555555)
      sub_20E867F44();
    v9 = 12 * v8;
    __p = operator new(12 * v8);
    v133 = (char *)__p + v9;
    bzero(__p, 12 * ((v9 - 12) / 0xCuLL) + 12);
  }
  v10 = *(_QWORD *)(a2 + 120);
  if ((unint64_t)(v7 - a3[2]) >> 31)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/FeatureDetection/src/HarrisFeatureDetector/HarrisConnerExtraction.cpp", 94, (uint64_t)"config.image_width - config.bucket_width <= std::numeric_limits<int>::max()", 75, (uint64_t)"config.image_width - config.bucket_width is outside the range of int", 68, (void (*)(void **))sub_21023DDB0))
    {
      goto LABEL_213;
    }
    v6 = a3[3];
  }
  v11 = a3[1];
  if (!((v11 - v6) >> 31))
    goto LABEL_15;
  if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/FeatureDetection/src/HarrisFeatureDetector/HarrisConnerExtraction.cpp", 96, (uint64_t)"config.image_height - config.bucket_height <= std::numeric_limits<int>::max()", 77, (uint64_t)"config.image_height - config.bucket_height is outside the range of int", 70, (void (*)(void **))sub_21023DDB0))
  {
LABEL_213:
    abort();
  }
  v6 = a3[3];
  v11 = a3[1];
LABEL_15:
  v12 = 0;
  v128 = a1;
  while (2)
  {
    v14 = 0;
    if ((int)v12 <= 5)
      v15 = 5;
    else
      v15 = v12;
    v130 = v15;
    v129 = 4 * v15;
    v126 = v12;
    while (2)
    {
      v16 = (char *)__p;
      v132 = (char *)__p;
      v17 = v14 + v6;
      v18 = *((_DWORD *)a3 + 4) + v12;
      v127 = v14;
      if ((int)v14 <= 5)
        v19 = 5;
      else
        v19 = v14;
      v20 = v11 - 5;
      if ((int)v20 >= (int)v17)
        v21 = v17;
      else
        v21 = v20;
      v22 = *(_DWORD *)a3 - 5;
      if (v22 >= v18)
        v23 = v18;
      else
        v23 = v22;
      v24 = (char *)__p;
      if ((int)v19 < (int)v21 && (int)v130 < (int)v23)
      {
        do
        {
          v25 = v19 + 1;
          v26 = (v19 + 1);
          v27 = v129;
          v28 = v130;
          do
          {
            v29 = *(_QWORD *)(v10 + 8 * v19);
            v30 = *(float *)(v29 + v27);
            if (v30 > *((float *)a3 + 10))
            {
              v31 = *(_QWORD *)(v10 + 8 * (v19 - 2));
              if (v30 > *(float *)(v31 + v27 - 8) && v30 > *(float *)(v31 + v27 - 4) && v30 > *(float *)(v31 + v27))
              {
                v32 = (v28 + 1);
                if (v30 > *(float *)(v31 + 4 * v32))
                {
                  v33 = (v28 + 2);
                  if (v30 > *(float *)(v31 + 4 * v33))
                  {
                    v34 = *(_QWORD *)(v10 + 8 * (v19 - 1));
                    if (v30 > *(float *)(v34 + v27 - 8)
                      && v30 > *(float *)(v34 + v27 - 4)
                      && v30 > *(float *)(v34 + v27)
                      && v30 > *(float *)(v34 + 4 * v32)
                      && v30 > *(float *)(v34 + 4 * v33)
                      && v30 > *(float *)(v29 + v27 - 8)
                      && v30 > *(float *)(v29 + v27 - 4)
                      && v30 > *(float *)(v29 + 4 * v32)
                      && v30 > *(float *)(v29 + 4 * v33))
                    {
                      v35 = *(_QWORD *)(v10 + 8 * v26);
                      if (v30 > *(float *)(v35 + v27 - 8)
                        && v30 > *(float *)(v35 + v27 - 4)
                        && v30 > *(float *)(v35 + v27)
                        && v30 > *(float *)(v35 + 4 * v32)
                        && v30 > *(float *)(v35 + 4 * v33))
                      {
                        v36 = *(_QWORD *)(v10 + 8 * (v19 + 2));
                        if (v30 > *(float *)(v36 + v27 - 8)
                          && v30 > *(float *)(v36 + v27 - 4)
                          && v30 > *(float *)(v36 + v27)
                          && v30 > *(float *)(v36 + 4 * v32)
                          && v30 > *(float *)(v36 + 4 * v33))
                        {
                          v134[0] = v28;
                          v134[1] = v19;
                          *(float *)&v134[2] = v30;
                          v124 = v26;
                          v125 = v21;
                          sub_20FD76A58((char **)&__p, (uint64_t)v134);
                          v26 = v124;
                          v21 = v125;
                        }
                      }
                    }
                  }
                }
              }
            }
            ++v28;
            v27 += 4;
          }
          while (v23 != v28);
          ++v19;
        }
        while (v25 != v21);
        v16 = (char *)__p;
        v24 = v132;
        a1 = v128;
      }
      v37 = 0xAAAAAAAAAAAAAAABLL * ((v24 - v16) >> 2);
      v38 = a3[4];
      if (v37 <= v38)
      {
LABEL_175:
        if (v16 == v24)
          goto LABEL_21;
        goto LABEL_176;
      }
      v39 = &v16[12 * v38];
      if (v39 == v24)
        goto LABEL_153;
      while (1)
      {
        v40 = 0xAAAAAAAAAAAAAAABLL * ((v24 - v16) >> 2);
        if (v40 < 2)
          goto LABEL_152;
        if (v40 == 3)
        {
          v81 = *((float *)v16 + 5);
          v82 = *((float *)v16 + 2);
          v83 = *((float *)v24 - 1);
          if (v81 <= v82)
          {
            if (v83 > v81)
            {
              v90 = *(_QWORD *)(v16 + 12);
              *(_QWORD *)(v16 + 12) = *(_QWORD *)(v24 - 12);
              *((_DWORD *)v16 + 5) = *((_DWORD *)v24 - 1);
              *(_QWORD *)(v24 - 12) = v90;
              *((float *)v24 - 1) = v81;
              v91 = *((float *)v16 + 5);
              v92 = *((float *)v16 + 2);
              if (v91 > v92)
              {
                v93 = *(_QWORD *)v16;
                *(_QWORD *)v16 = *(_QWORD *)(v16 + 12);
                *((float *)v16 + 2) = v91;
                *(_QWORD *)(v16 + 12) = v93;
                *((float *)v16 + 5) = v92;
              }
            }
            goto LABEL_152;
          }
          v84 = *(_QWORD *)v16;
          if (v83 <= v81)
          {
            *(_QWORD *)v16 = *(_QWORD *)(v16 + 12);
            *((float *)v16 + 2) = v81;
            *(_QWORD *)(v16 + 12) = v84;
            *((float *)v16 + 5) = v82;
            if (*((float *)v24 - 1) <= v82)
              goto LABEL_152;
            *(_QWORD *)(v16 + 12) = *(_QWORD *)(v24 - 12);
            *((_DWORD *)v16 + 5) = *((_DWORD *)v24 - 1);
            goto LABEL_137;
          }
LABEL_136:
          *(_QWORD *)v16 = *(_QWORD *)(v24 - 12);
          *((_DWORD *)v16 + 2) = *((_DWORD *)v24 - 1);
LABEL_137:
          *(_QWORD *)(v24 - 12) = v84;
          *((float *)v24 - 1) = v82;
          goto LABEL_152;
        }
        if (v40 == 2)
        {
          v82 = *((float *)v16 + 2);
          if (*((float *)v24 - 1) <= v82)
            goto LABEL_152;
          v84 = *(_QWORD *)v16;
          goto LABEL_136;
        }
        if (v24 - v16 <= 95)
        {
          while (v16 != v24 - 12)
          {
            v85 = v16;
            v16 += 12;
            if (v85 != v24 && v16 != v24)
            {
              v86 = v16;
              v87 = v85;
              do
              {
                if (*((float *)v86 + 2) > *((float *)v87 + 2))
                  v87 = v86;
                v86 += 12;
              }
              while (v86 != v24);
              if (v87 != v85)
              {
                v88 = *(_QWORD *)v85;
                v89 = *((_DWORD *)v85 + 2);
                *(_QWORD *)v85 = *(_QWORD *)v87;
                *((_DWORD *)v85 + 2) = *((_DWORD *)v87 + 2);
                *(_QWORD *)v87 = v88;
                *((_DWORD *)v87 + 2) = v89;
              }
            }
          }
          goto LABEL_152;
        }
        v41 = &v16[12 * (v40 >> 1)];
        v42 = (float *)(v41 + 8);
        v43 = *((float *)v41 + 2);
        v44 = *((float *)v16 + 2);
        v45 = *((float *)v24 - 1);
        if (v43 > v44)
          break;
        if (v45 > v43)
        {
          v59 = *(_QWORD *)v41;
          *(_QWORD *)v41 = *(_QWORD *)(v24 - 12);
          *v42 = *((float *)v24 - 1);
          *(_QWORD *)(v24 - 12) = v59;
          *((float *)v24 - 1) = v43;
          v60 = *v42;
          v61 = *((float *)v16 + 2);
          if (*v42 <= v61)
            goto LABEL_113;
          v62 = *(_QWORD *)v16;
          *(_QWORD *)v16 = *(_QWORD *)v41;
          *((float *)v16 + 2) = v60;
          *(_QWORD *)v41 = v62;
          *v42 = v61;
          goto LABEL_88;
        }
        v47 = 0;
        v48 = (float *)(v24 - 12);
        v49 = *((float *)v16 + 2);
        v50 = *v42;
        if (v49 > *v42)
          goto LABEL_73;
LABEL_91:
        v63 = v48;
        while (1)
        {
          v51 = (unint64_t)(v63 - 3);
          if (v63 - 3 == (float *)v16)
            break;
          v64 = *(v63 - 1);
          v63 -= 3;
          if (v64 > v50)
          {
            v65 = *(_QWORD *)v16;
            *(_QWORD *)v16 = *(_QWORD *)v51;
            *((_DWORD *)v16 + 2) = *(_DWORD *)(v51 + 8);
            *(_QWORD *)v51 = v65;
            *(float *)(v51 + 8) = v49;
            ++v47;
            v52 = (float *)(v16 + 12);
            if ((unint64_t)(v16 + 12) < v51)
              goto LABEL_74;
            goto LABEL_95;
          }
        }
        v71 = (float *)(v16 + 12);
        if (v49 <= *((float *)v24 - 1))
        {
          if (v71 == v48)
            goto LABEL_152;
          while (1)
          {
            v72 = v71[2];
            if (v49 > v72)
              break;
            v71 += 3;
            if (v71 == v48)
              goto LABEL_152;
          }
          v76 = *(_QWORD *)v71;
          *(_QWORD *)v71 = *(_QWORD *)(v24 - 12);
          v71[2] = *((float *)v24 - 1);
          *(_QWORD *)(v24 - 12) = v76;
          *((float *)v24 - 1) = v72;
          v71 += 3;
        }
        if (v71 == v48)
          goto LABEL_152;
        while (1)
        {
          v77 = *((float *)v16 + 2);
          v68 = v71 - 3;
          do
          {
            v78 = v68[5];
            v68 += 3;
          }
          while (v77 <= v78);
          v71 = v68 + 3;
          do
          {
            v79 = *(v48 - 1);
            v48 -= 3;
          }
          while (v77 > v79);
          if (v68 >= v48)
            break;
          v80 = *(_QWORD *)v68;
          *(_QWORD *)v68 = *(_QWORD *)v48;
          v68[2] = v48[2];
          *(_QWORD *)v48 = v80;
          v48[2] = v78;
        }
        if (v68 > (float *)v39)
          goto LABEL_152;
LABEL_128:
        v16 = (char *)v68;
        if (v24 == v39)
          goto LABEL_152;
      }
      v46 = *(_QWORD *)v16;
      if (v45 > v43)
      {
        *(_QWORD *)v16 = *(_QWORD *)(v24 - 12);
        *((_DWORD *)v16 + 2) = *((_DWORD *)v24 - 1);
        *(_QWORD *)(v24 - 12) = v46;
        *((float *)v24 - 1) = v44;
        v47 = 1;
        v48 = (float *)(v24 - 12);
        v49 = *((float *)v16 + 2);
        v50 = *v42;
        if (v49 > *v42)
          goto LABEL_73;
        goto LABEL_91;
      }
      *(_QWORD *)v16 = *(_QWORD *)v41;
      *((float *)v16 + 2) = v43;
      *(_QWORD *)v41 = v46;
      *v42 = v44;
      if (*((float *)v24 - 1) > v44)
      {
        *(_QWORD *)v41 = *(_QWORD *)(v24 - 12);
        *v42 = *((float *)v24 - 1);
        *(_QWORD *)(v24 - 12) = v46;
        *((float *)v24 - 1) = v44;
LABEL_88:
        v47 = 2;
        v48 = (float *)(v24 - 12);
        v49 = *((float *)v16 + 2);
        v50 = *v42;
        if (v49 > *v42)
          goto LABEL_73;
        goto LABEL_91;
      }
LABEL_113:
      v47 = 1;
      v48 = (float *)(v24 - 12);
      v49 = *((float *)v16 + 2);
      v50 = *v42;
      if (v49 <= *v42)
        goto LABEL_91;
LABEL_73:
      v51 = (unint64_t)v48;
      v52 = (float *)(v16 + 12);
      if ((unint64_t)(v16 + 12) >= v51)
      {
LABEL_95:
        v55 = (unint64_t)v52;
      }
      else
      {
LABEL_74:
        v53 = v52;
        while (1)
        {
          v54 = *((float *)v41 + 2);
          v55 = (unint64_t)(v53 - 3);
          do
          {
            v56 = *(float *)(v55 + 20);
            v55 += 12;
          }
          while (v56 > v54);
          v53 = (float *)(v55 + 12);
          do
          {
            v57 = *(float *)(v51 - 4);
            v51 -= 12;
          }
          while (v57 <= v54);
          if (v55 >= v51)
            break;
          v58 = *(_QWORD *)v55;
          *(_QWORD *)v55 = *(_QWORD *)v51;
          *(_DWORD *)(v55 + 8) = *(_DWORD *)(v51 + 8);
          *(_QWORD *)v51 = v58;
          *(float *)(v51 + 8) = v56;
          ++v47;
          if ((char *)v55 == v41)
            v41 = (char *)v51;
        }
      }
      if ((char *)v55 != v41)
      {
        v66 = *(float *)(v55 + 8);
        if (*((float *)v41 + 2) > v66)
        {
          v67 = *(_QWORD *)v55;
          *(_QWORD *)v55 = *(_QWORD *)v41;
          *(_DWORD *)(v55 + 8) = *((_DWORD *)v41 + 2);
          *(_QWORD *)v41 = v67;
          *((float *)v41 + 2) = v66;
          ++v47;
        }
      }
      if ((char *)v55 == v39)
        goto LABEL_152;
      if (v47)
      {
LABEL_101:
        if (v55 <= (unint64_t)v39)
        {
          v68 = (float *)(v55 + 12);
        }
        else
        {
          v24 = (char *)v55;
          v68 = (float *)v16;
        }
        goto LABEL_128;
      }
      if (v55 <= (unint64_t)v39)
      {
        v73 = v55 + 12;
        while ((char *)v73 != v24)
        {
          v74 = *(float *)(v73 + 8);
          v75 = *(float *)(v73 - 4);
          v73 += 12;
          if (v74 > v75)
            goto LABEL_101;
        }
      }
      else
      {
        while (v52 != (float *)v55)
        {
          v69 = v52[2];
          v70 = *(v52 - 1);
          v52 += 3;
          if (v69 > v70)
            goto LABEL_101;
        }
      }
LABEL_152:
      v38 = a3[4];
      v16 = (char *)__p;
      v24 = v132;
      v37 = 0xAAAAAAAAAAAAAAABLL * ((v132 - (_BYTE *)__p) >> 2);
LABEL_153:
      v94 = v38 - v37;
      if (v38 <= v37)
      {
        if (v38 >= v37)
          goto LABEL_175;
        v24 = &v16[12 * v38];
        v132 = v24;
        if (v16 == v24)
          goto LABEL_21;
        goto LABEL_176;
      }
      if (0xAAAAAAAAAAAAAAABLL * ((v133 - v24) >> 2) >= v94)
      {
        bzero(v24, 12 * ((12 * v94 - 12) / 0xC) + 12);
        v24 += 12 * ((12 * v94 - 12) / 0xC) + 12;
        v132 = v24;
        if (v16 == v24)
          goto LABEL_21;
        goto LABEL_176;
      }
      v95 = 0xAAAAAAAAAAAAAAABLL * ((v24 - v16) >> 2) + v94;
      if (v95 > 0x1555555555555555)
        sub_20E867F44();
      if (0x5555555555555556 * ((v133 - v16) >> 2) > v95)
        v95 = 0x5555555555555556 * ((v133 - v16) >> 2);
      if (0xAAAAAAAAAAAAAAABLL * ((v133 - v16) >> 2) >= 0xAAAAAAAAAAAAAAALL)
        v96 = 0x1555555555555555;
      else
        v96 = v95;
      if (v96)
      {
        if (v96 > 0x1555555555555555)
LABEL_210:
          sub_20E877A38();
        v97 = (char *)operator new(12 * v96);
        a1 = v128;
      }
      else
      {
        v97 = 0;
      }
      v98 = &v97[4 * ((v24 - v16) >> 2)];
      v99 = 12 * ((12 * v94 - 12) / 0xC) + 12;
      bzero(v98, v99);
      v100 = v98;
      if (v24 != v16)
      {
        do
        {
          v101 = *(_QWORD *)(v24 - 12);
          v24 -= 12;
          *(_QWORD *)(v100 - 12) = v101;
          v100 -= 12;
          *((_DWORD *)v100 + 2) = *((_DWORD *)v24 + 2);
        }
        while (v24 != v16);
        v16 = (char *)__p;
      }
      v24 = &v98[v99];
      __p = v100;
      v132 = &v98[v99];
      v133 = &v97[12 * v96];
      if (v16)
      {
        operator delete(v16);
        v16 = v100;
        goto LABEL_175;
      }
      v16 = v100;
      if (v100 != v24)
      {
LABEL_176:
        v102 = (char *)a1[1];
        do
        {
          v104 = a1[2];
          if ((unint64_t)v102 < v104)
          {
            *(_QWORD *)v102 = *(_QWORD *)v16;
            v103 = (uint64_t)(v102 + 8);
          }
          else
          {
            v105 = (char *)*a1;
            v106 = (uint64_t)&v102[-*a1];
            v107 = v106 >> 3;
            v108 = (v106 >> 3) + 1;
            if (v108 >> 61)
              sub_20E867F44();
            v109 = v104 - (_QWORD)v105;
            if (v109 >> 2 > v108)
              v108 = v109 >> 2;
            if ((unint64_t)v109 >= 0x7FFFFFFFFFFFFFF8)
              v110 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v110 = v108;
            if (v110)
            {
              if (v110 >> 61)
                goto LABEL_210;
              v111 = operator new(8 * v110);
              v112 = &v111[8 * v107];
              *v112 = *(_QWORD *)v16;
              v103 = (uint64_t)(v112 + 1);
              v113 = (char *)(v102 - v105);
              if (v102 != v105)
              {
LABEL_189:
                v114 = (unint64_t)(v113 - 8);
                if (v114 < 0x168
                  || (v117 = (v102 - 8 - v105) & 0xFFFFFFFFFFFFFFF8, &v111[v106 - 8 - v117] > &v111[v106 - 8])
                  || &v102[-v117 - 8] > v102 - 8
                  || (unint64_t)(v102 - v111 - v106) < 0x20)
                {
                  v115 = v102;
                  a1 = v128;
                }
                else
                {
                  v118 = (v114 >> 3) + 1;
                  v119 = 8 * (v118 & 0x3FFFFFFFFFFFFFFCLL);
                  v115 = &v102[-v119];
                  v112 = (_QWORD *)((char *)v112 - v119);
                  v120 = &v111[8 * v107 - 16];
                  v121 = v102 - 16;
                  v122 = v118 & 0x3FFFFFFFFFFFFFFCLL;
                  a1 = v128;
                  do
                  {
                    v123 = *(_OWORD *)v121;
                    *(v120 - 1) = *((_OWORD *)v121 - 1);
                    *v120 = v123;
                    v120 -= 2;
                    v121 -= 32;
                    v122 -= 4;
                  }
                  while (v122);
                  if (v118 == (v118 & 0x3FFFFFFFFFFFFFFCLL))
                  {
LABEL_192:
                    v102 = (char *)*a1;
                    *a1 = v112;
                    a1[1] = v103;
                    a1[2] = &v111[8 * v110];
                    if (!v102)
                      goto LABEL_178;
LABEL_196:
                    operator delete(v102);
                    goto LABEL_178;
                  }
                }
                do
                {
                  v116 = *((_QWORD *)v115 - 1);
                  v115 -= 8;
                  *--v112 = v116;
                }
                while (v115 != v105);
                goto LABEL_192;
              }
            }
            else
            {
              v111 = 0;
              v112 = (_QWORD *)(8 * v107);
              *(_QWORD *)(8 * v107) = *(_QWORD *)v16;
              v103 = 8 * v107 + 8;
              v113 = (char *)(v102 - v105);
              if (v102 != v105)
                goto LABEL_189;
            }
            a1 = v128;
            *v128 = v112;
            v128[1] = v103;
            v128[2] = &v111[8 * v110];
            if (v102)
              goto LABEL_196;
          }
LABEL_178:
          a1[1] = v103;
          v16 += 12;
          v102 = (char *)v103;
        }
        while (v16 != v24);
      }
LABEL_21:
      v6 = a3[3];
      LODWORD(v12) = v126;
      v14 = v6 + v127;
      v11 = a3[1];
      if (v6 + v127 <= v11 - v6)
        continue;
      break;
    }
    v13 = a3[2];
    v12 = v13 + v126;
    if (v13 + v126 <= (unint64_t)(*a3 - v13))
      continue;
    break;
  }
  if (__p)
    operator delete(__p);
}

void sub_20FD76A30(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FD76A58(char **a1, uint64_t a2)
{
  unint64_t v4;
  char *v5;
  char *i;
  char *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;

  v5 = a1[1];
  v4 = (unint64_t)a1[2];
  if ((unint64_t)v5 < v4)
  {
    *(_QWORD *)v5 = *(_QWORD *)a2;
    *((_DWORD *)v5 + 2) = *(_DWORD *)(a2 + 8);
    i = v5 + 12;
LABEL_3:
    a1[1] = i;
    return;
  }
  v7 = *a1;
  v8 = 0xAAAAAAAAAAAAAAABLL * ((v5 - *a1) >> 2);
  v9 = v8 + 1;
  if (v8 + 1 > 0x1555555555555555)
    sub_20E867F44();
  v10 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v4 - (_QWORD)v7) >> 2);
  if (2 * v10 > v9)
    v9 = 2 * v10;
  if (v10 >= 0xAAAAAAAAAAAAAAALL)
    v11 = 0x1555555555555555;
  else
    v11 = v9;
  if (v11 > 0x1555555555555555)
    sub_20E877A38();
  v12 = 12 * v11;
  v13 = (char *)operator new(12 * v11);
  v14 = &v13[12 * v8];
  *(_QWORD *)v14 = *(_QWORD *)a2;
  *((_DWORD *)v14 + 2) = *(_DWORD *)(a2 + 8);
  for (i = v14 + 12; v5 != v7; *((_DWORD *)v14 + 2) = *((_DWORD *)v5 + 2))
  {
    v15 = *(_QWORD *)(v5 - 12);
    v5 -= 12;
    *(_QWORD *)(v14 - 12) = v15;
    v14 -= 12;
  }
  *a1 = v14;
  a1[1] = i;
  a1[2] = &v13[v12];
  if (!v7)
    goto LABEL_3;
  operator delete(v7);
  a1[1] = i;
}

uint64_t sub_20FD76B8C(uint64_t a1, uint64_t a2, _QWORD *a3, float a4)
{
  unint64_t v8;
  unint64_t v9;
  int32x2_t v10;
  uint64x2_t v11;
  _OWORD v13[2];
  unint64_t v14;
  float v15;

  if (!*(_BYTE *)a1
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/FeatureDetection/src/HarrisFeatureDetector/HarrisFeatureDetector.cpp", 58, (uint64_t)"initialized_", 12, (uint64_t)"Harris Feature Detector in not initialized", 42, (void (*)(void **))sub_21023DDB0)|| !a2&& sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/FeatureDetection/src/HarrisFeatureDetector/HarrisFeatureDetector.cpp", 59, (uint64_t)"image", 5, (uint64_t)"Image is NULL", 13, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  a3[1] = *a3;
  sub_20FD76E0C((_OWORD *)(a1 + 184), a2, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16));
  v9 = *(_QWORD *)(a1 + 24);
  v8 = *(_QWORD *)(a1 + 32);
  *(float *)v10.i32 = (float)v8;
  v11 = vcvtq_u64_f64(vcvtq_f64_f32(vrndm_f32(vdiv_f32(vcvt_f32_f64(vcvtq_f64_u64(*(uint64x2_t *)(a1 + 8))), (float32x2_t)vdup_lane_s32(v10, 0)))));
  v13[0] = *(_OWORD *)(a1 + 8);
  v13[1] = v11;
  v14 = v9 / (v8 * v8);
  v15 = a4;
  sub_20FD75D28(a3, a1 + 184, (uint64_t *)v13);
  return (a3[1] - *a3) >> 3;
}

_QWORD *sub_20FD76CB8(_QWORD *result, uint64_t a2, float a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  float v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v3 = result[6];
  if ((unint64_t)(v3 - 7) >= 7)
  {
    v4 = *(_QWORD *)(a2 + 120);
    v5 = result[4];
    v6 = 7;
    do
    {
      while ((unint64_t)(v5 - 7) <= 6)
      {
        if (++v6 > (unint64_t)(v3 - 7))
          return result;
      }
      v7 = 0;
      v8 = v6 + 1;
      do
      {
        v10 = *(_QWORD *)(v4 + 8 * v6);
        v11 = *(float *)(v10 + 4 * v7 + 28);
        if (v11 >= a3)
          goto LABEL_9;
        v12 = *(_QWORD *)(result[15] + 8 * v6) + v7;
        if (*(_BYTE *)(v12 + 7) == 1)
        {
          v13 = v10 + 4 * v7;
          if (v11 < *(float *)(v13 + 20) && v11 < *(float *)(v13 + 24))
          {
            v14 = v10 + 4 * v7;
            if (v11 < *(float *)(v14 + 32) && v11 < *(float *)(v14 + 36))
              goto LABEL_21;
          }
        }
        else if (v11 < *(float *)(*(_QWORD *)(v4 + 8 * (v6 - 2)) + 4 * v7 + 28)
               && v11 < *(float *)(*(_QWORD *)(v4 + 8 * (v6 - 1)) + 4 * v7 + 28)
               && v11 < *(float *)(*(_QWORD *)(v4 + 8 * v8) + 4 * v7 + 28)
               && v11 < *(float *)(*(_QWORD *)(v4 + 8 * (v6 + 2)) + 4 * v7 + 28))
        {
LABEL_21:
          *(_BYTE *)(v12 + 7) = -1;
          v5 = result[4];
        }
LABEL_9:
        v9 = v7 + 8;
        ++v7;
      }
      while (v9 <= v5 - 7);
      v3 = result[6];
      ++v6;
    }
    while (v8 <= v3 - 7);
  }
  return result;
}

void sub_20FD76E0C(_OWORD *a1, uint64_t a2, unint64_t a3, unint64_t a4)
{
  void *v8;

  if (a4)
  {
    if (a4 >> 61)
      sub_20E8E8A64();
    v8 = operator new(8 * a4);
    bzero(v8, 8 * a4);
  }
  else
  {
    v8 = 0;
  }
  sub_20FD76EF4(a1, (uint64_t)v8, 0, a2, a3);
  if (v8)
    operator delete(v8);
}

void sub_20FD76EC8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  void *v11;

  if (v11)
    operator delete(v11);
  _Unwind_Resume(exception_object);
}

_OWORD *sub_20FD76EF4(_OWORD *result, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v7 = result;
  if (!*((_QWORD *)result + 4)
    && (result = (_OWORD *)sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/FeatureDetection/src/HarrisFeatureDetector/HarrisStrengthImage.cpp", 149, (uint64_t)"strength_image.width() != 0", 27, (uint64_t)"Uninitialized image width", 25, (void (*)(void **))sub_21023DDB0), (_DWORD)result)|| !v7[6]&& (result = (_OWORD *)sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/FeatureDetection/src/HarrisFeatureDetector/HarrisStrengthImage.cpp", 150, (uint64_t)"strength_image.height() != 0", 28, (uint64_t)"Uninitialized image height", 26, (void (*)(void **))sub_21023DDB0),
        (_DWORD)result)
    || !v7[5]
    && (result = (_OWORD *)sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/FeatureDetection/src/HarrisFeatureDetector/HarrisStrengthImage.cpp", 151, (uint64_t)"strength_image.widthStep() != 0", 31, (uint64_t)"Uninitialized image widthStep", 29, (void (*)(void **))sub_21023DDB0), (_DWORD)result)|| !v7[11]&& (result = (_OWORD *)sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/FeatureDetection/src/HarrisFeatureDetector/HarrisStrengthImage.cpp", 152, (uint64_t)"strength_image.data() != nullptr", 32, (uint64_t)"Uninitialized image data pointer", 32, (void (*)(void **))sub_21023DDB0),
        (_DWORD)result)
    || a5 <= 0x81
    && (result = (_OWORD *)sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/FeatureDetection/src/HarrisFeatureDetector/HarrisStrengthImage.cpp", 154, (uint64_t)"static_cast<size_t>(image_width) >= kImageChunkSize + kMarginWidth * 2", 70, (uint64_t)"Image width needs to be no less than kImageChunkSize + kMarginWidth * 2", 71, (void (*)(void **))sub_21023DDB0), (_DWORD)result))
  {
    abort();
  }
  v8 = a5 - 6;
  v9 = (a5 - 6) / 0x7C;
  if (a3)
  {
    if (v8 >= 0x7C)
    {
      if (v9 <= 1)
        v10 = 1;
      else
        v10 = v9;
      v11 = 1;
      do
      {
        result = sub_20FD771AC();
        v11 += 124;
        --v10;
      }
      while (v10);
    }
    if (__ROR8__(0xEF7BDEF7BDEF7BDFLL * v8, 2) >= 0x210842108421085uLL)
      return sub_20FD771AC();
  }
  else
  {
    if (v8 >= 0x7C)
    {
      if (v9 <= 1)
        v12 = 1;
      else
        v12 = v9;
      v13 = 1;
      do
      {
        result = sub_20FD7CCB8();
        v13 += 124;
        --v12;
      }
      while (v12);
    }
    if (v8 != 124 * v9)
      return sub_20FD7CCB8();
  }
  return result;
}

_OWORD *sub_20FD771AC()
{
  _OWORD *result;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  int8x16_t v6;
  uint64_t v7;
  uint64_t v8;
  uint8x16_t *v9;
  int8x16_t *v10;
  int8x16_t v11;
  int8x16_t v12;
  uint8x16_t v13;
  uint8x16_t v14;
  uint8x16_t v15;
  uint8x16_t *v16;
  uint8x16_t v17;
  int8x16_t v18;
  uint8x16_t v19;
  uint8x16_t v20;
  uint8x16_t v21;
  uint8x16_t v22;
  int8x16_t v23;
  uint8x16_t v24;
  uint8x16_t v25;
  uint8x16_t v26;
  uint8x16_t v27;
  int8x16_t v28;
  uint8x16_t v29;
  uint8x16_t v30;
  uint8x16_t v31;
  uint8x16_t v32;
  int8x16_t v33;
  uint8x16_t v34;
  uint8x16_t v35;
  uint8x16_t v36;
  uint8x16_t v37;
  int8x16_t v38;
  uint8x16_t v39;
  uint8x16_t v40;
  uint8x16_t v41;
  uint8x16_t v42;
  int8x16_t v43;
  uint8x16_t v44;
  uint8x16_t v45;
  uint8x16_t v46;
  uint8x16_t v47;
  int8x16_t v48;
  uint8x16_t v49;
  uint8x16_t v50;
  uint8x16_t v51;
  uint8x16_t v52;
  uint8x16_t *v53;
  uint8x16_t *v54;
  int8x16_t *v55;
  int8x16_t v56;
  int8x16_t v57;
  int8x16_t v58;
  uint8x16_t v59;
  uint8x16_t v60;
  uint8x16_t v61;
  uint8x16_t v62;
  int8x16_t v63;
  uint8x16_t v64;
  uint8x16_t v65;
  uint8x16_t v66;
  uint8x16_t v67;
  int8x16_t v68;
  uint8x16_t v69;
  uint8x16_t v70;
  uint8x16_t v71;
  uint8x16_t v72;
  int8x16_t v73;
  uint8x16_t v74;
  uint8x16_t v75;
  uint8x16_t v76;
  uint8x16_t v77;
  int8x16_t v78;
  uint8x16_t v79;
  uint8x16_t v80;
  uint8x16_t v81;
  uint8x16_t v82;
  int8x16_t v83;
  uint8x16_t v84;
  uint8x16_t v85;
  uint8x16_t v86;
  uint8x16_t v87;
  int8x16_t v88;
  uint8x16_t v89;
  uint8x16_t v90;
  uint8x16_t v91;
  uint8x16_t v92;
  uint8x16_t v93;
  uint8x16_t v94;
  uint8x16_t v95;
  uint8x16_t v96;
  int8x16_t *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint8x16_t *v102;
  int8x16_t *v103;
  int8x16_t v104;
  int8x16_t v105;
  uint8x16_t v106;
  uint8x16_t v107;
  uint8x16_t v108;
  uint8x16_t *v109;
  uint8x16_t v110;
  int8x16_t v111;
  uint8x16_t v112;
  uint8x16_t v113;
  uint8x16_t v114;
  uint8x16_t v115;
  int8x16_t v116;
  uint8x16_t v117;
  uint8x16_t v118;
  uint8x16_t v119;
  uint8x16_t v120;
  int8x16_t v121;
  uint8x16_t v122;
  uint8x16_t v123;
  uint8x16_t v124;
  uint8x16_t v125;
  int8x16_t v126;
  uint8x16_t v127;
  uint8x16_t v128;
  uint8x16_t v129;
  uint8x16_t v130;
  int8x16_t v131;
  uint8x16_t v132;
  uint8x16_t v133;
  uint8x16_t v134;
  uint8x16_t v135;
  int8x16_t v136;
  uint8x16_t v137;
  uint8x16_t v138;
  uint8x16_t v139;
  uint8x16_t v140;
  int8x16_t v141;
  uint8x16_t v142;
  uint8x16_t v143;
  uint8x16_t v144;
  uint8x16_t v145;
  int8x16_t v146;
  int8x16_t v147;
  int8x16_t v148;
  int8x16_t v149;
  uint8x16_t *v150;
  uint8x16_t *v151;
  int8x16_t *v152;
  int8x16_t v153;
  int8x16_t v154;
  int8x16_t v155;
  uint8x16_t v156;
  uint8x16_t v157;
  uint8x16_t v158;
  uint8x16_t v159;
  int8x16_t v160;
  uint8x16_t v161;
  uint8x16_t v162;
  uint8x16_t v163;
  uint8x16_t v164;
  int8x16_t v165;
  uint8x16_t v166;
  uint8x16_t v167;
  uint8x16_t v168;
  uint8x16_t v169;
  int8x16_t v170;
  uint8x16_t v171;
  uint8x16_t v172;
  uint8x16_t v173;
  uint8x16_t v174;
  int8x16_t v175;
  uint8x16_t v176;
  uint8x16_t v177;
  uint8x16_t v178;
  uint8x16_t v179;
  int8x16_t v180;
  uint8x16_t v181;
  uint8x16_t v182;
  uint8x16_t v183;
  uint8x16_t v184;
  int8x16_t v185;
  uint8x16_t v186;
  uint8x16_t v187;
  uint8x16_t v188;
  uint8x16_t v189;
  uint8x16_t v190;
  uint8x16_t v191;
  uint8x16_t v192;
  uint8x16_t v193;
  int8x16_t *v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint8x16_t *v199;
  int8x16_t *v200;
  int8x16_t v201;
  int8x16_t v202;
  uint8x16_t v203;
  uint8x16_t v204;
  uint8x16_t v205;
  uint8x16_t *v206;
  uint8x16_t v207;
  int8x16_t v208;
  uint8x16_t v209;
  uint8x16_t v210;
  uint8x16_t v211;
  uint8x16_t v212;
  int8x16_t v213;
  uint8x16_t v214;
  uint8x16_t v215;
  uint8x16_t v216;
  uint8x16_t v217;
  int8x16_t v218;
  uint8x16_t v219;
  uint8x16_t v220;
  uint8x16_t v221;
  uint8x16_t v222;
  int8x16_t v223;
  uint8x16_t v224;
  uint8x16_t v225;
  uint8x16_t v226;
  uint8x16_t v227;
  int8x16_t v228;
  uint8x16_t v229;
  uint8x16_t v230;
  uint8x16_t v231;
  uint8x16_t v232;
  int8x16_t v233;
  uint8x16_t v234;
  uint8x16_t v235;
  uint8x16_t v236;
  uint8x16_t v237;
  int8x16_t v238;
  uint8x16_t v239;
  uint8x16_t v240;
  uint8x16_t v241;
  uint8x16_t v242;
  int8x16_t v243;
  int8x16_t v244;
  int8x16_t v245;
  int8x16_t v246;
  uint8x16_t *v247;
  uint8x16_t *v248;
  int8x16_t *v249;
  int8x16_t v250;
  int8x16_t v251;
  int8x16_t v252;
  uint8x16_t v253;
  uint8x16_t v254;
  uint8x16_t v255;
  uint8x16_t v256;
  int8x16_t v257;
  uint8x16_t v258;
  uint8x16_t v259;
  uint8x16_t v260;
  uint8x16_t v261;
  int8x16_t v262;
  uint8x16_t v263;
  uint8x16_t v264;
  uint8x16_t v265;
  uint8x16_t v266;
  int8x16_t v267;
  uint8x16_t v268;
  uint8x16_t v269;
  uint8x16_t v270;
  uint8x16_t v271;
  int8x16_t v272;
  uint8x16_t v273;
  uint8x16_t v274;
  uint8x16_t v275;
  uint8x16_t v276;
  int8x16_t v277;
  uint8x16_t v278;
  uint8x16_t v279;
  uint8x16_t v280;
  uint8x16_t v281;
  int8x16_t v282;
  uint8x16_t v283;
  uint8x16_t v284;
  uint8x16_t v285;
  uint8x16_t v286;
  uint8x16_t v287;
  uint8x16_t v288;
  uint8x16_t v289;
  uint8x16_t v290;
  int8x16_t *v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  uint8x16_t *v296;
  int8x16_t *v297;
  int8x16_t v298;
  int8x16_t v299;
  uint8x16_t v300;
  uint8x16_t v301;
  uint8x16_t v302;
  uint8x16_t *v303;
  uint8x16_t v304;
  int8x16_t v305;
  uint8x16_t v306;
  uint8x16_t v307;
  uint8x16_t v308;
  uint8x16_t v309;
  int8x16_t v310;
  uint8x16_t v311;
  uint8x16_t v312;
  uint8x16_t v313;
  uint8x16_t v314;
  int8x16_t v315;
  uint8x16_t v316;
  uint8x16_t v317;
  uint8x16_t v318;
  uint8x16_t v319;
  int8x16_t v320;
  uint8x16_t v321;
  uint8x16_t v322;
  uint8x16_t v323;
  uint8x16_t v324;
  int8x16_t v325;
  uint8x16_t v326;
  uint8x16_t v327;
  uint8x16_t v328;
  uint8x16_t v329;
  int8x16_t v330;
  uint8x16_t v331;
  uint8x16_t v332;
  uint8x16_t v333;
  uint8x16_t v334;
  int8x16_t v335;
  uint8x16_t v336;
  uint8x16_t v337;
  uint8x16_t v338;
  uint8x16_t v339;
  int8x16_t v340;
  int8x16_t v341;
  int8x16_t v342;
  int8x16_t v343;
  uint8x16_t *v344;
  uint8x16_t *v345;
  int8x16_t *v346;
  int8x16_t v347;
  int8x16_t v348;
  int8x16_t v349;
  uint8x16_t v350;
  uint8x16_t v351;
  uint8x16_t v352;
  uint8x16_t v353;
  int8x16_t v354;
  uint8x16_t v355;
  uint8x16_t v356;
  uint8x16_t v357;
  uint8x16_t v358;
  int8x16_t v359;
  uint8x16_t v360;
  uint8x16_t v361;
  uint8x16_t v362;
  uint8x16_t v363;
  int8x16_t v364;
  uint8x16_t v365;
  uint8x16_t v366;
  uint8x16_t v367;
  uint8x16_t v368;
  int8x16_t v369;
  uint8x16_t v370;
  uint8x16_t v371;
  uint8x16_t v372;
  uint8x16_t v373;
  int8x16_t v374;
  uint8x16_t v375;
  uint8x16_t v376;
  uint8x16_t v377;
  uint8x16_t v378;
  int8x16_t v379;
  uint8x16_t v380;
  uint8x16_t v381;
  uint8x16_t v382;
  uint8x16_t v383;
  uint8x16_t v384;
  uint8x16_t v385;
  uint8x16_t v386;
  uint8x16_t v387;
  int8x16_t *v388;
  int16x8_t *v389;
  uint64_t v390;
  uint64_t i;
  int8x16_t v392;
  int8x16_t v393;
  int8x16_t v394;
  int8x16_t v395;
  unint64_t v396;
  _DWORD *v397;
  uint64_t j;
  int16x8_t v400;
  int16x8_t v401;
  float *v402;
  int16x8_t v403;
  float *v404;
  float *v405;
  int16x8_t v406;
  float *v407;
  float *v408;
  int16x8_t v409;
  float *v410;
  float *v411;
  int16x8_t v412;
  float *v413;
  float *v414;
  int16x8_t v415;
  float *v416;
  float *v417;
  int16x8_t v418;
  float *v419;
  float *v420;
  int16x8_t v421;
  float *v422;
  float *v423;
  int16x8_t v424;
  float *v425;
  float *v426;
  int16x8_t v427;
  float *v428;
  float *v429;
  int16x8_t v430;
  float *v431;
  float *v432;
  int16x8_t v433;
  float *v434;
  float *v435;
  int16x8_t v436;
  float *v437;
  float *v438;
  int16x8_t v439;
  float *v440;
  float *v441;
  int16x8_t v442;
  float *v443;
  float *v444;
  int16x8_t v445;
  float *v446;
  float *v447;
  unint64_t v448;
  _DWORD *v449;
  uint64_t k;
  int16x8_t v452;
  int16x8_t v453;
  float *v454;
  int32x4_t v455;
  float *v456;
  float *v457;
  int32x4_t v458;
  float *v459;
  float *v460;
  int32x4_t v461;
  float *v462;
  float *v463;
  int32x4_t v464;
  float *v465;
  float *v466;
  int32x4_t v467;
  float *v468;
  float *v469;
  int32x4_t v470;
  float *v471;
  float *v472;
  int32x4_t v473;
  float *v474;
  float *v475;
  int32x4_t v476;
  float *v477;
  float *v478;
  int32x4_t v479;
  float *v480;
  float *v481;
  int32x4_t v482;
  float *v483;
  float *v484;
  int32x4_t v485;
  float *v486;
  float *v487;
  int32x4_t v488;
  float *v489;
  float *v490;
  int32x4_t v491;
  float *v492;
  float *v493;
  int32x4_t v494;
  float *v495;
  float *v496;
  int32x4_t v497;
  float *v498;
  float *v499;
  unint64_t v500;
  _DWORD *v501;
  uint64_t m;
  int16x8_t v504;
  int16x8_t v505;
  float *v506;
  int32x4_t v507;
  float *v508;
  float *v509;
  int32x4_t v510;
  float *v511;
  float *v512;
  int32x4_t v513;
  float *v514;
  float *v515;
  int32x4_t v516;
  float *v517;
  float *v518;
  int32x4_t v519;
  float *v520;
  float *v521;
  int32x4_t v522;
  float *v523;
  float *v524;
  int32x4_t v525;
  float *v526;
  float *v527;
  int32x4_t v528;
  float *v529;
  float *v530;
  int32x4_t v531;
  float *v532;
  float *v533;
  int32x4_t v534;
  float *v535;
  float *v536;
  int32x4_t v537;
  float *v538;
  float *v539;
  int32x4_t v540;
  float *v541;
  float *v542;
  int32x4_t v543;
  float *v544;
  float *v545;
  int32x4_t v546;
  float *v547;
  float *v548;
  int32x4_t v549;
  float *v550;
  float *v551;
  unint64_t v552;
  _DWORD *v553;
  uint64_t n;
  int16x8_t v556;
  int16x8_t v557;
  float *v558;
  int32x4_t v559;
  float *v560;
  float *v561;
  int32x4_t v562;
  float *v563;
  float *v564;
  int32x4_t v565;
  float *v566;
  float *v567;
  int32x4_t v568;
  float *v569;
  float *v570;
  int32x4_t v571;
  float *v572;
  float *v573;
  int32x4_t v574;
  float *v575;
  float *v576;
  int32x4_t v577;
  float *v578;
  float *v579;
  int32x4_t v580;
  float *v581;
  float *v582;
  int32x4_t v583;
  float *v584;
  float *v585;
  int32x4_t v586;
  float *v587;
  float *v588;
  int32x4_t v589;
  float *v590;
  float *v591;
  int32x4_t v592;
  float *v593;
  float *v594;
  int32x4_t v595;
  float *v596;
  float *v597;
  int32x4_t v598;
  float *v599;
  float *v600;
  int32x4_t v601;
  float *v602;
  float *v603;
  uint64_t v604;
  float32x4_t v605;
  float32x2_t v606;
  int8x16_t v607;
  uint64_t *v608;
  uint64_t *v609;
  uint64_t v610;
  unint64_t v611;
  unint64_t v612;
  uint64_t v613;
  uint64_t v614;
  uint64_t v615;
  _BYTE *v616;
  uint8x16_t *v617;
  uint8x16_t *v618;
  int16x8_t *v619;
  int16x8_t *v620;
  int16x8_t *v621;
  int8x16_t *v622;
  int8x16_t v623;
  int8x16_t v624;
  uint8x16_t v625;
  uint8x16_t v626;
  uint8x16_t v627;
  int16x8_t v628;
  int16x8_t v629;
  uint8x16_t v630;
  int16x8_t *v631;
  int16x8_t v632;
  int16x8_t v633;
  int16x8_t *v634;
  int8x16_t v635;
  uint8x16_t v636;
  uint8x16_t v637;
  uint8x16_t v638;
  int16x8_t v639;
  int16x8_t v640;
  uint8x16_t v641;
  int16x8_t v642;
  int16x8_t v643;
  int8x16_t v644;
  uint8x16_t v645;
  uint8x16_t v646;
  uint8x16_t v647;
  int16x8_t v648;
  int16x8_t v649;
  uint8x16_t v650;
  int16x8_t v651;
  int16x8_t v652;
  int8x16_t v653;
  uint8x16_t v654;
  uint8x16_t v655;
  uint8x16_t v656;
  int16x8_t v657;
  int16x8_t v658;
  uint8x16_t v659;
  int16x8_t v660;
  int16x8_t v661;
  int8x16_t v662;
  uint8x16_t v663;
  uint8x16_t v664;
  uint8x16_t v665;
  int16x8_t v666;
  int16x8_t v667;
  uint8x16_t v668;
  int16x8_t v669;
  int16x8_t v670;
  int8x16_t v671;
  uint8x16_t v672;
  uint8x16_t v673;
  uint8x16_t v674;
  int16x8_t v675;
  int16x8_t v676;
  uint8x16_t v677;
  int16x8_t v678;
  int16x8_t v679;
  int8x16_t v680;
  uint8x16_t v681;
  uint8x16_t v682;
  uint8x16_t v683;
  int16x8_t v684;
  int16x8_t v685;
  uint8x16_t v686;
  int16x8_t v687;
  int16x8_t v688;
  int8x16_t v689;
  uint8x16_t v690;
  uint8x16_t v691;
  uint8x16_t v692;
  int16x8_t v693;
  int16x8_t v694;
  uint8x16_t v695;
  int16x8_t v696;
  int16x8_t v697;
  int8x16_t v698;
  unint64_t v699;
  uint8x16_t *v700;
  uint8x16_t *v701;
  int16x8_t *v702;
  int16x8_t *v703;
  int16x8_t *v704;
  uint64_t v705;
  int8x16_t v706;
  int8x16_t v707;
  int8x16_t v708;
  uint8x16_t v709;
  uint8x16_t v710;
  uint8x16_t v711;
  int16x8_t v712;
  int16x8_t v713;
  uint8x16_t v714;
  int16x8_t *v715;
  int16x8_t v716;
  int16x8_t v717;
  int16x8_t *v718;
  int8x16_t v719;
  uint8x16_t v720;
  uint8x16_t v721;
  uint8x16_t v722;
  int16x8_t v723;
  int16x8_t v724;
  uint8x16_t v725;
  int16x8_t v726;
  int16x8_t v727;
  int8x16_t v728;
  uint8x16_t v729;
  uint8x16_t v730;
  uint8x16_t v731;
  int16x8_t v732;
  int16x8_t v733;
  uint8x16_t v734;
  int16x8_t v735;
  int16x8_t v736;
  int8x16_t v737;
  uint8x16_t v738;
  uint8x16_t v739;
  uint8x16_t v740;
  int16x8_t v741;
  int16x8_t v742;
  uint8x16_t v743;
  int16x8_t v744;
  int16x8_t v745;
  int8x16_t v746;
  uint8x16_t v747;
  uint8x16_t v748;
  uint8x16_t v749;
  int16x8_t v750;
  int16x8_t v751;
  uint8x16_t v752;
  int16x8_t v753;
  int16x8_t v754;
  int8x16_t v755;
  uint8x16_t v756;
  uint8x16_t v757;
  uint8x16_t v758;
  int16x8_t v759;
  int16x8_t v760;
  uint8x16_t v761;
  int16x8_t v762;
  int16x8_t v763;
  int8x16_t v764;
  uint8x16_t v765;
  uint8x16_t v766;
  uint8x16_t v767;
  int16x8_t v768;
  int16x8_t v769;
  uint8x16_t v770;
  int16x8_t v771;
  int16x8_t v772;
  int8x16_t v773;
  uint8x16_t v774;
  uint8x16_t v775;
  uint8x16_t v776;
  int16x8_t v777;
  int16x8_t v778;
  uint8x16_t v779;
  int16x8_t v780;
  int16x8_t v781;
  int16x8_t *v782;
  int8x16_t *v783;
  uint64_t v784;
  __int16 *v785;
  uint64_t v786;
  int16x8_t *v787;
  int8x16_t v788;
  int8x16_t *v789;
  int8x16_t v790;
  int8x16_t *v791;
  int8x16_t v792;
  int8x16_t *v793;
  int8x16_t v794;
  uint64_t v795;
  _DWORD *v796;
  uint64_t v798;
  uint64_t *v799;
  int16x8_t *v800;
  int16x8_t v801;
  int16x8_t v802;
  float *v803;
  float *v804;
  int16x8_t v805;
  int16x8_t v806;
  float *v807;
  float *v808;
  int16x8_t v809;
  int16x8_t v810;
  float *v811;
  float *v812;
  int16x8_t v813;
  int16x8_t v814;
  float *v815;
  float *v816;
  int16x8_t v817;
  int16x8_t v818;
  float *v819;
  float *v820;
  int16x8_t v821;
  int16x8_t v822;
  float *v823;
  float *v824;
  int16x8_t v825;
  int16x8_t v826;
  float *v827;
  float *v828;
  int16x8_t v829;
  int16x8_t v830;
  float *v831;
  float *v832;
  int16x8_t v833;
  int16x8_t v834;
  float *v835;
  float *v836;
  int16x8_t v837;
  int16x8_t v838;
  float *v839;
  float *v840;
  int16x8_t v841;
  int16x8_t v842;
  float *v843;
  float *v844;
  int16x8_t v845;
  int16x8_t v846;
  float *v847;
  float *v848;
  int16x8_t v849;
  int16x8_t v850;
  float *v851;
  float *v852;
  int16x8_t v853;
  int16x8_t v854;
  float *v855;
  float *v856;
  int16x8_t v857;
  int16x8_t v858;
  float *v859;
  float *v860;
  int16x8_t v861;
  int16x8_t v862;
  float *v863;
  float *v864;
  unint64_t v865;
  int16x8_t *v866;
  unint64_t v867;
  int16x8_t *v868;
  uint64_t v869;
  int16x8_t *v870;
  uint64_t v871;
  int16x8_t *v872;
  uint64_t v873;
  uint64_t v874;
  int16x8_t *v875;
  int16x8_t v876;
  int16x8_t v877;
  int16x8_t v878;
  int32x4_t v879;
  int32x4_t v880;
  int16x8_t v881;
  int32x4_t v882;
  int32x4_t v883;
  int32x4_t v884;
  int32x4_t v885;
  int16x8_t v886;
  int16x8_t v887;
  int16x8_t v888;
  int32x4_t v889;
  int32x4_t v890;
  int32x4_t v891;
  int32x4_t v892;
  int16x8_t v893;
  int16x8_t v894;
  int16x8_t v895;
  int16x8_t v896;
  int32x4_t v897;
  int32x4_t v898;
  int32x4_t v899;
  int32x4_t v900;
  int16x8_t v901;
  int16x8_t v902;
  int32x4_t v903;
  int32x4_t v904;
  int32x4_t v905;
  int32x4_t v906;
  int16x8_t v907;
  int16x8_t v908;
  int16x8_t v909;
  int16x8_t v910;
  int32x4_t v911;
  int32x4_t v912;
  int32x4_t v913;
  int32x4_t v914;
  int16x8_t v915;
  int16x8_t v916;
  int16x8_t v917;
  int16x8_t v918;
  int32x4_t v919;
  int32x4_t v920;
  int32x4_t v921;
  int32x4_t v922;
  int16x8_t v923;
  int16x8_t v924;
  int32x4_t v925;
  int32x4_t v926;
  int32x4_t v927;
  int32x4_t v928;
  int16x8_t v929;
  int16x8_t v930;
  int16x8_t v931;
  int16x8_t v932;
  int32x4_t v933;
  int32x4_t v934;
  int32x4_t v935;
  int32x4_t v936;
  int16x8_t v937;
  int16x8_t v938;
  int16x8_t v939;
  int16x8_t v940;
  int32x4_t v941;
  int32x4_t v942;
  int32x4_t v943;
  int32x4_t v944;
  int16x8_t v945;
  int16x8_t v946;
  int32x4_t v947;
  int32x4_t v948;
  int32x4_t v949;
  int32x4_t v950;
  int16x8_t v951;
  int16x8_t v952;
  int16x8_t v953;
  int16x8_t v954;
  int32x4_t v955;
  int32x4_t v956;
  int32x4_t v957;
  int32x4_t v958;
  int16x8_t v959;
  int16x8_t v960;
  int16x8_t v961;
  int16x8_t v962;
  int32x4_t v963;
  int32x4_t v964;
  int32x4_t v965;
  int32x4_t v966;
  int16x8_t v967;
  int16x8_t v968;
  int32x4_t v969;
  int32x4_t v970;
  int32x4_t v971;
  int32x4_t v972;
  int16x8_t v973;
  int16x8_t v974;
  int16x8_t v975;
  int16x8_t v976;
  int32x4_t v977;
  int32x4_t v978;
  int32x4_t v979;
  int32x4_t v980;
  int16x8_t v981;
  int16x8_t v982;
  int16x8_t v983;
  int16x8_t v984;
  int32x4_t v985;
  int32x4_t v986;
  int32x4_t v987;
  int32x4_t v988;
  int16x8_t v989;
  int16x8_t v990;
  int32x4_t v991;
  int32x4_t v992;
  int32x4_t v993;
  int32x4_t v994;
  int16x8_t v995;
  int16x8_t v996;
  int16x8_t v997;
  int16x8_t v998;
  int32x4_t v999;
  int32x4_t v1000;
  int32x4_t v1001;
  int32x4_t v1002;
  int16x8_t v1003;
  int16x8_t v1004;
  int16x8_t v1005;
  int16x8_t v1006;
  int32x4_t v1007;
  int32x4_t v1008;
  int32x4_t v1009;
  int32x4_t v1010;
  int16x8_t v1011;
  int16x8_t v1012;
  int32x4_t v1013;
  int32x4_t v1014;
  int32x4_t v1015;
  int32x4_t v1016;
  int16x8_t v1017;
  int16x8_t v1018;
  int16x8_t v1019;
  int16x8_t v1020;
  int32x4_t v1021;
  int32x4_t v1022;
  int32x4_t v1023;
  int32x4_t v1024;
  int16x8_t v1025;
  int16x8_t v1026;
  int16x8_t v1027;
  int16x8_t v1028;
  int32x4_t v1029;
  int32x4_t v1030;
  int32x4_t v1031;
  int32x4_t v1032;
  int16x8_t v1033;
  int16x8_t v1034;
  int32x4_t v1035;
  int32x4_t v1036;
  int32x4_t v1037;
  int32x4_t v1038;
  int16x8_t v1039;
  int16x8_t v1040;
  int16x8_t v1041;
  int16x8_t v1042;
  int16x8_t v1043;
  int16x8_t v1044;
  int16x8_t v1045;
  int16x8_t v1046;
  int32x4_t v1047;
  int32x4_t v1048;
  int32x4_t v1049;
  int32x4_t v1050;
  int16x8_t v1051;
  int16x8_t v1052;
  int32x4_t v1053;
  int32x4_t v1054;
  int32x4_t v1055;
  int32x4_t v1056;
  int16x8_t v1057;
  int16x8_t v1058;
  int16x8_t v1059;
  int16x8_t v1060;
  int32x4_t v1061;
  int32x4_t v1062;
  int32x4_t v1063;
  int32x4_t v1064;
  int16x8_t v1065;
  int16x8_t v1066;
  int16x8_t v1067;
  int16x8_t v1068;
  int32x4_t v1069;
  int32x4_t v1070;
  int32x4_t v1071;
  int32x4_t v1072;
  int16x8_t v1073;
  int16x8_t v1074;
  int32x4_t v1075;
  int32x4_t v1076;
  int32x4_t v1077;
  int32x4_t v1078;
  int16x8_t v1079;
  int16x8_t v1080;
  int16x8_t v1081;
  int16x8_t v1082;
  int32x4_t v1083;
  int32x4_t v1084;
  int32x4_t v1085;
  int32x4_t v1086;
  int16x8_t v1087;
  int16x8_t v1088;
  int16x8_t v1089;
  int16x8_t v1090;
  int32x4_t v1091;
  int32x4_t v1092;
  int32x4_t v1093;
  int32x4_t v1094;
  int16x8_t v1095;
  int16x8_t v1096;
  int32x4_t v1097;
  int32x4_t v1098;
  int32x4_t v1099;
  int32x4_t v1100;
  int16x8_t v1101;
  int16x8_t v1102;
  int16x8_t v1103;
  int16x8_t v1104;
  int32x4_t v1105;
  int32x4_t v1106;
  int32x4_t v1107;
  int32x4_t v1108;
  int16x8_t v1109;
  int16x8_t v1110;
  int16x8_t v1111;
  int16x8_t v1112;
  int32x4_t v1113;
  int32x4_t v1114;
  int32x4_t v1115;
  int32x4_t v1116;
  int16x8_t v1117;
  int16x8_t v1118;
  int32x4_t v1119;
  int32x4_t v1120;
  int32x4_t v1121;
  int32x4_t v1122;
  int16x8_t v1123;
  int16x8_t v1124;
  int16x8_t v1125;
  int16x8_t v1126;
  int32x4_t v1127;
  int32x4_t v1128;
  int32x4_t v1129;
  int32x4_t v1130;
  int16x8_t v1131;
  int16x8_t v1132;
  int16x8_t v1133;
  int16x8_t v1134;
  int32x4_t v1135;
  int32x4_t v1136;
  int32x4_t v1137;
  int32x4_t v1138;
  int16x8_t v1139;
  int16x8_t v1140;
  int32x4_t v1141;
  int32x4_t v1142;
  int32x4_t v1143;
  int32x4_t v1144;
  int16x8_t v1145;
  int16x8_t v1146;
  int16x8_t v1147;
  int16x8_t v1148;
  int32x4_t v1149;
  int32x4_t v1150;
  int32x4_t v1151;
  int32x4_t v1152;
  int16x8_t v1153;
  int16x8_t v1154;
  int16x8_t v1155;
  int16x8_t v1156;
  int32x4_t v1157;
  int32x4_t v1158;
  int32x4_t v1159;
  int32x4_t v1160;
  int16x8_t v1161;
  int16x8_t v1162;
  int32x4_t v1163;
  int32x4_t v1164;
  int32x4_t v1165;
  int32x4_t v1166;
  int16x8_t v1167;
  int16x8_t v1168;
  int16x8_t v1169;
  int16x8_t v1170;
  int32x4_t v1171;
  int32x4_t v1172;
  int32x4_t v1173;
  int32x4_t v1174;
  int16x8_t v1175;
  int16x8_t v1176;
  int16x8_t v1177;
  int16x8_t v1178;
  int32x4_t v1179;
  int32x4_t v1180;
  int32x4_t v1181;
  int32x4_t v1182;
  int16x8_t v1183;
  int16x8_t v1184;
  int32x4_t v1185;
  int32x4_t v1186;
  int32x4_t v1187;
  int32x4_t v1188;
  int16x8_t v1189;
  int16x8_t v1190;
  int16x8_t v1191;
  int16x8_t v1192;
  int32x4_t v1193;
  int32x4_t v1194;
  int32x4_t v1195;
  int32x4_t v1196;
  int16x8_t v1197;
  int16x8_t v1198;
  int16x8_t v1199;
  int16x8_t v1200;
  int32x4_t v1201;
  int32x4_t v1202;
  int32x4_t v1203;
  int32x4_t v1204;
  int16x8_t v1205;
  int16x8_t v1206;
  int32x4_t v1207;
  int32x4_t v1208;
  int32x4_t v1209;
  int32x4_t v1210;
  int16x8_t v1211;
  int16x8_t v1212;
  int16x8_t *v1213;
  int16x8_t *v1214;
  int16x8_t *v1215;
  int16x8_t *v1216;
  int16x8_t v1217;
  int16x8_t v1218;
  int16x8_t v1219;
  int16x8_t v1220;
  int16x8_t v1221;
  int16x8_t v1222;
  int32x4_t v1223;
  int32x4_t v1224;
  int32x4_t v1225;
  int32x4_t v1226;
  int16x8_t v1227;
  int16x8_t v1228;
  int32x4_t v1229;
  int32x4_t v1230;
  int32x4_t v1231;
  int32x4_t v1232;
  int16x8_t v1233;
  int16x8_t v1234;
  int16x8_t v1235;
  int16x8_t v1236;
  int32x4_t v1237;
  int32x4_t v1238;
  int32x4_t v1239;
  int32x4_t v1240;
  int16x8_t v1241;
  int16x8_t v1242;
  int16x8_t v1243;
  int16x8_t v1244;
  int32x4_t v1245;
  int32x4_t v1246;
  int32x4_t v1247;
  int32x4_t v1248;
  int16x8_t v1249;
  int16x8_t v1250;
  int32x4_t v1251;
  int32x4_t v1252;
  int32x4_t v1253;
  int32x4_t v1254;
  int16x8_t v1255;
  int16x8_t v1256;
  int16x8_t v1257;
  int16x8_t v1258;
  int32x4_t v1259;
  int32x4_t v1260;
  int32x4_t v1261;
  int32x4_t v1262;
  int16x8_t v1263;
  int16x8_t v1264;
  int16x8_t v1265;
  int16x8_t v1266;
  int32x4_t v1267;
  int32x4_t v1268;
  int32x4_t v1269;
  int32x4_t v1270;
  int16x8_t v1271;
  int16x8_t v1272;
  int32x4_t v1273;
  int32x4_t v1274;
  int32x4_t v1275;
  int32x4_t v1276;
  int16x8_t v1277;
  int16x8_t v1278;
  int16x8_t v1279;
  int16x8_t v1280;
  int32x4_t v1281;
  int32x4_t v1282;
  int32x4_t v1283;
  int32x4_t v1284;
  int16x8_t v1285;
  int16x8_t v1286;
  int16x8_t v1287;
  int16x8_t v1288;
  int32x4_t v1289;
  int32x4_t v1290;
  int32x4_t v1291;
  int32x4_t v1292;
  int16x8_t v1293;
  int16x8_t v1294;
  int32x4_t v1295;
  int32x4_t v1296;
  int32x4_t v1297;
  int32x4_t v1298;
  int16x8_t v1299;
  int16x8_t v1300;
  int16x8_t v1301;
  int16x8_t v1302;
  int32x4_t v1303;
  int32x4_t v1304;
  int32x4_t v1305;
  int32x4_t v1306;
  int16x8_t v1307;
  int16x8_t v1308;
  int16x8_t v1309;
  int16x8_t v1310;
  int32x4_t v1311;
  int32x4_t v1312;
  int32x4_t v1313;
  int32x4_t v1314;
  int16x8_t v1315;
  int16x8_t v1316;
  int32x4_t v1317;
  int32x4_t v1318;
  int32x4_t v1319;
  int32x4_t v1320;
  int16x8_t v1321;
  int16x8_t v1322;
  int16x8_t v1323;
  int16x8_t v1324;
  int32x4_t v1325;
  int32x4_t v1326;
  int32x4_t v1327;
  int32x4_t v1328;
  int16x8_t v1329;
  int16x8_t v1330;
  int16x8_t v1331;
  int16x8_t v1332;
  int32x4_t v1333;
  int32x4_t v1334;
  int32x4_t v1335;
  int32x4_t v1336;
  int16x8_t v1337;
  int16x8_t v1338;
  int32x4_t v1339;
  int32x4_t v1340;
  int32x4_t v1341;
  int32x4_t v1342;
  int16x8_t v1343;
  int16x8_t v1344;
  int16x8_t v1345;
  int16x8_t v1346;
  int32x4_t v1347;
  int32x4_t v1348;
  int32x4_t v1349;
  int32x4_t v1350;
  int16x8_t v1351;
  int16x8_t v1352;
  int16x8_t v1353;
  int16x8_t v1354;
  int32x4_t v1355;
  int32x4_t v1356;
  int32x4_t v1357;
  int32x4_t v1358;
  int16x8_t v1359;
  int16x8_t v1360;
  int32x4_t v1361;
  int32x4_t v1362;
  int32x4_t v1363;
  int32x4_t v1364;
  int16x8_t v1365;
  int16x8_t v1366;
  int16x8_t v1367;
  int16x8_t v1368;
  int32x4_t v1369;
  int32x4_t v1370;
  int32x4_t v1371;
  int32x4_t v1372;
  int16x8_t v1373;
  int16x8_t v1374;
  int16x8_t v1375;
  int16x8_t v1376;
  int32x4_t v1377;
  int32x4_t v1378;
  int32x4_t v1379;
  int32x4_t v1380;
  int16x8_t v1381;
  int32x4_t v1382;
  int32x4_t v1383;
  int32x4_t v1384;
  int32x4_t v1385;
  int16x8_t v1386;
  int32x4_t v1387;
  int8x16_t v1388;
  int32x4_t *v1389;
  const float *v1390;
  float *v1391;
  int32x4_t v1392;
  int32x4_t v1393;
  int32x4_t v1394;
  int32x4_t v1395;
  int32x4_t v1396;
  int32x4_t v1397;
  int32x4_t v1398;
  float *v1399;
  const float *v1400;
  int32x4_t v1401;
  int32x4_t v1402;
  int32x4_t v1403;
  int32x4_t v1404;
  int32x4_t v1405;
  int32x4_t v1406;
  int32x4_t v1407;
  float *v1408;
  const float *v1409;
  int32x4_t v1410;
  int32x4_t v1411;
  int32x4_t v1412;
  int32x4_t v1413;
  int32x4_t v1414;
  int32x4_t v1415;
  int32x4_t v1416;
  float *v1417;
  const float *v1418;
  int32x4_t v1419;
  int32x4_t v1420;
  int32x4_t v1421;
  int32x4_t v1422;
  int32x4_t v1423;
  int32x4_t v1424;
  int32x4_t v1425;
  float *v1426;
  const float *v1427;
  int32x4_t v1428;
  int32x4_t v1429;
  int32x4_t v1430;
  int32x4_t v1431;
  int32x4_t v1432;
  int32x4_t v1433;
  int32x4_t v1434;
  float *v1435;
  const float *v1436;
  int32x4_t v1437;
  int32x4_t v1438;
  int32x4_t v1439;
  int32x4_t v1440;
  int32x4_t v1441;
  int32x4_t v1442;
  int32x4_t v1443;
  float *v1444;
  const float *v1445;
  int32x4_t v1446;
  int32x4_t v1447;
  int32x4_t v1448;
  int32x4_t v1449;
  int32x4_t v1450;
  int32x4_t v1451;
  int32x4_t v1452;
  float *v1453;
  const float *v1454;
  int32x4_t v1455;
  int32x4_t v1456;
  int32x4_t v1457;
  int32x4_t v1458;
  int32x4_t v1459;
  int32x4_t v1460;
  int32x4_t v1461;
  const float *v1462;
  float *v1463;
  int32x4_t v1464;
  int32x4_t v1465;
  int32x4_t v1466;
  int32x4_t v1467;
  int32x4_t v1468;
  int32x4_t v1469;
  int32x4_t v1470;
  float *v1471;
  const float *v1472;
  int32x4_t v1473;
  int32x4_t v1474;
  int32x4_t v1475;
  int32x4_t v1476;
  int32x4_t v1477;
  int32x4_t v1478;
  int32x4_t v1479;
  float *v1480;
  const float *v1481;
  int32x4_t v1482;
  int32x4_t v1483;
  int32x4_t v1484;
  int32x4_t v1485;
  int32x4_t v1486;
  int32x4_t v1487;
  int32x4_t v1488;
  float *v1489;
  const float *v1490;
  int32x4_t v1491;
  int32x4_t v1492;
  int32x4_t v1493;
  int32x4_t v1494;
  int32x4_t v1495;
  int32x4_t v1496;
  int32x4_t v1497;
  float *v1498;
  const float *v1499;
  int32x4_t v1500;
  int32x4_t v1501;
  int32x4_t v1502;
  int32x4_t v1503;
  int32x4_t v1504;
  int32x4_t v1505;
  int32x4_t v1506;
  float *v1507;
  const float *v1508;
  int32x4_t v1509;
  int32x4_t v1510;
  int32x4_t v1511;
  int32x4_t v1512;
  int32x4_t v1513;
  int32x4_t v1514;
  int32x4_t v1515;
  float *v1516;
  const float *v1517;
  int32x4_t v1518;
  int32x4_t v1519;
  int32x4_t v1520;
  int32x4_t v1521;
  int32x4_t v1522;
  int32x4_t v1523;
  int32x4_t v1524;
  const float *v1525;
  float *v1526;
  int32x4_t v1527;
  int32x4_t v1528;
  int32x4_t v1529;
  int32x4_t v1530;
  int32x4_t v1531;
  int32x4_t v1532;
  int32x4_t v1533;
  const float *v1534;
  float *v1535;
  int32x4_t v1536;
  int32x4_t v1537;
  int32x4_t v1538;
  int32x4_t v1539;
  int32x4_t v1540;
  int32x4_t v1541;
  int32x4_t v1542;
  const float *v1543;
  float *v1544;
  int32x4_t v1545;
  int32x4_t v1546;
  int32x4_t v1547;
  int32x4_t v1548;
  int32x4_t v1549;
  int32x4_t v1550;
  int32x4_t v1551;
  const float *v1552;
  float *v1553;
  int32x4_t v1554;
  int32x4_t v1555;
  int32x4_t v1556;
  int32x4_t v1557;
  int32x4_t v1558;
  int32x4_t v1559;
  int32x4_t v1560;
  const float *v1561;
  float *v1562;
  int32x4_t v1563;
  int32x4_t v1564;
  int32x4_t v1565;
  int32x4_t v1566;
  int32x4_t v1567;
  int32x4_t v1568;
  int32x4_t v1569;
  const float *v1570;
  float *v1571;
  int32x4_t v1572;
  int32x4_t v1573;
  int32x4_t v1574;
  int32x4_t v1575;
  int32x4_t v1576;
  int32x4_t v1577;
  int32x4_t v1578;
  const float *v1579;
  float *v1580;
  int32x4_t v1581;
  int32x4_t v1582;
  int32x4_t v1583;
  int32x4_t v1584;
  int32x4_t v1585;
  int32x4_t v1586;
  int32x4_t v1587;
  const float *v1588;
  float *v1589;
  int32x4_t v1590;
  int32x4_t v1591;
  int32x4_t v1592;
  int32x4_t v1593;
  int32x4_t v1594;
  int32x4_t v1595;
  int32x4_t v1596;
  const float *v1597;
  float *v1598;
  int32x4_t v1599;
  int32x4_t v1600;
  int32x4_t v1601;
  int32x4_t v1602;
  int32x4_t v1603;
  int32x4_t v1604;
  int32x4_t v1605;
  uint64_t v1606;
  float32x2_t *v1607;
  int8x16_t *v1608;
  unint64_t v1609;
  float32x4_t v1610;
  float32x4_t v1611;
  float32x4_t v1612;
  float32x4_t v1613;
  float32x4_t v1614;
  float32x4_t v1615;
  float32x4_t v1616;
  float32x4_t v1617;
  float32x4_t v1618;
  float32x4_t v1619;
  float32x4_t v1620;
  float32x4_t v1621;
  float32x4_t v1622;
  float32x4_t v1623;
  float32x4_t v1624;
  float32x4_t v1625;
  float32x4_t v1626;
  float32x2_t v1627;
  float32x2_t v1628;
  float32x2_t v1629;
  float32x2_t v1630;
  float32x2_t v1631;
  float32x2_t v1632;
  float32x2_t v1633;
  float32x2_t v1634;
  float32x2_t v1635;
  float32x2_t v1636;
  uint64_t v1637;
  uint64_t v1638;
  uint64_t v1639;
  uint64_t v1640;
  uint64_t v1641;
  uint64_t v1642;
  uint64_t v1643;
  uint64_t v1644;
  uint64_t v1645;
  uint64_t v1646;
  uint64_t v1647;
  uint64_t v1648;
  uint64_t v1649;
  uint64_t v1650;
  uint64_t v1651;
  uint64_t v1652;
  uint64_t v1653;
  uint64_t v1654;
  uint64_t v1655;
  uint64_t v1656;
  uint64_t v1657;
  uint64_t v1658;
  uint64_t v1659;
  uint64_t v1660;
  uint64_t v1661;
  uint64_t v1662;
  _QWORD *v1663;
  uint64_t v1664;
  _OWORD *v1665;
  uint64_t v1666;
  _QWORD *v1667;
  int32x4_t v1668[4];
  _OWORD v1669[4];
  _OWORD v1670[4];
  _OWORD v1671[4];
  _OWORD v1672[4];
  _OWORD v1673[4];
  _OWORD v1674[4];
  _OWORD v1675[2];
  int32x4_t v1676;
  int32x4_t v1677;
  _OWORD v1678[4];
  _OWORD v1679[4];
  _OWORD v1680[4];
  _OWORD v1681[4];
  _OWORD v1682[4];
  _OWORD v1683[4];
  _OWORD v1684[4];
  _OWORD v1685[2];
  int32x4_t v1686;
  int32x4_t v1687;
  _OWORD v1688[4];
  _OWORD v1689[4];
  _OWORD v1690[4];
  _OWORD v1691[4];
  _OWORD v1692[4];
  _OWORD v1693[4];
  _OWORD v1694[4];
  _OWORD v1695[2];
  int32x4_t v1696;
  int8x16_t v1697;
  int16x8_t v1698;
  int16x8_t v1699;
  int16x8_t v1700;
  int16x8_t v1701;
  int16x8_t v1702;
  int16x8_t v1703;
  int16x8_t v1704;
  int16x8_t v1705;
  int16x8_t v1706;
  int16x8_t v1707;
  int16x8_t v1708;
  int16x8_t v1709;
  int16x8_t v1710;
  int16x8_t v1711;
  int16x8_t v1712;
  int16x8_t v1713;
  int16x8_t v1714;
  int16x8_t v1715;
  int16x8_t v1716;
  int16x8_t v1717;
  int16x8_t v1718;
  int16x8_t v1719;
  int16x8_t v1720;
  int16x8_t v1721;
  int16x8_t v1722;
  int16x8_t v1723;
  int16x8_t v1724;
  int16x8_t v1725;
  int16x8_t v1726;
  int16x8_t v1727;
  int16x8_t v1728;
  int16x8_t v1729;
  int16x8_t v1730;
  int16x8_t v1731;
  int16x8_t v1732;
  int16x8_t v1733;
  int16x8_t v1734;
  int16x8_t v1735;
  int16x8_t v1736;
  int16x8_t v1737;
  int16x8_t v1738;
  int16x8_t v1739;
  int16x8_t v1740;
  int16x8_t v1741;
  int16x8_t v1742;
  int16x8_t v1743;
  int16x8_t v1744;
  int16x8_t v1745;
  int16x8_t v1746;
  int16x8_t v1747;
  int16x8_t v1748;
  int16x8_t v1749;
  int16x8_t v1750;
  int16x8_t v1751;
  int16x8_t v1752;
  int16x8_t v1753;
  int16x8_t v1754;
  int16x8_t v1755;
  int16x8_t v1756;
  int16x8_t v1757;
  int16x8_t v1758;
  int16x8_t v1759;
  int16x8_t v1760;
  int16x8_t v1761;
  int16x8_t v1762;
  int16x8_t v1763;
  int16x8_t v1764;
  int16x8_t v1765;
  int16x8_t v1766;
  int16x8_t v1767;
  int16x8_t v1768;
  int16x8_t v1769;
  int16x8_t v1770;
  int16x8_t v1771;
  int16x8_t v1772;
  int16x8_t v1773;
  int16x8_t v1774;
  int16x8_t v1775;
  int16x8_t v1776;
  int16x8_t v1777;
  int16x8_t v1778;
  int16x8_t v1779;
  int16x8_t v1780;
  int16x8_t v1781;
  int16x8_t v1782;
  int16x8_t v1783;
  int16x8_t v1784;
  int16x8_t v1785;
  int16x8_t v1786;
  int16x8_t v1787;
  int16x8_t v1788;
  int16x8_t v1789;
  int16x8_t v1790;
  int16x8_t v1791;
  int16x8_t v1792;
  int16x8_t v1793;
  int16x8_t v1794;
  int16x8_t v1795;
  int16x8_t v1796;
  int16x8_t v1797;
  int16x8_t v1798;
  int16x8_t v1799;
  int16x8_t v1800;
  int16x8_t v1801;
  int16x8_t v1802;
  int16x8_t v1803;
  int16x8_t v1804;
  int16x8_t v1805;
  int16x8_t v1806;
  int16x8_t v1807;
  int16x8_t v1808;
  int16x8_t v1809;
  int16x8_t v1810;
  int16x8_t v1811;
  int16x8_t v1812;
  int16x8_t v1813;
  int16x8_t v1814;
  int16x8_t v1815;
  int16x8_t v1816;
  int16x8_t v1817;
  int16x8_t v1818;
  int16x8_t v1819;
  int16x8_t v1820;
  int16x8_t v1821;
  int16x8_t v1822;
  int16x8_t v1823;
  int16x8_t v1824;
  int16x8_t v1825;
  int16x8_t v1826;
  int16x8_t v1827;
  int16x8_t v1828;
  int16x8_t v1829;
  int16x8_t v1830;
  int16x8_t v1831;
  int16x8_t v1832;
  int16x8_t v1833;
  int16x8_t v1834;
  int16x8_t v1835;
  int16x8_t v1836;
  int16x8_t v1837;
  int16x8_t v1838;
  int16x8_t v1839;
  int16x8_t v1840;
  int16x8_t v1841;
  int16x8_t v1842;
  int16x8_t v1843;
  int16x8_t v1844;
  int16x8_t v1845;
  int16x8_t v1846;
  int16x8_t v1847;
  int16x8_t v1848;
  int16x8_t v1849;
  int16x8_t v1850;
  int16x8_t v1851;
  int16x8_t v1852;
  int16x8_t v1853;
  int16x8_t v1854;
  int16x8_t v1855;
  int16x8_t v1856;
  int16x8_t v1857;
  int16x8_t v1858;
  int16x8_t v1859;
  int16x8_t v1860;
  int16x8_t v1861;
  int16x8_t v1862;
  int16x8_t v1863;
  int16x8_t v1864;
  int16x8_t v1865;
  int16x8_t v1866;
  int16x8_t v1867;
  int16x8_t v1868;
  int16x8_t v1869;
  int16x8_t v1870;
  int16x8_t v1871;
  int16x8_t v1872;
  int16x8_t v1873;
  int16x8_t v1874;
  int16x8_t v1875;
  int16x8_t v1876;
  int16x8_t v1877;
  int16x8_t v1878;
  int16x8_t v1879;
  int16x8_t v1880;
  int16x8_t v1881;
  int16x8_t v1882;
  int16x8_t v1883;
  int16x8_t v1884;
  int16x8_t v1885;
  int16x8_t v1886;
  int16x8_t v1887;
  int16x8_t v1888;
  int16x8_t v1889;
  int16x8_t v1890;
  int16x8_t v1891;
  int16x8_t v1892;
  int16x8_t v1893;
  int16x8_t v1894;
  int16x8_t v1895;
  int16x8_t v1896;
  int16x8_t v1897;
  int16x8_t v1898;
  int16x8_t v1899;
  int16x8_t v1900;
  int16x8_t v1901;
  int16x8_t v1902;
  int16x8_t v1903;
  int16x8_t v1904;
  int16x8_t v1905;
  int16x8_t v1906;
  int16x8_t v1907;
  int16x8_t v1908;
  int16x8_t v1909;
  int16x8_t v1910;
  int16x8_t v1911;
  int16x8_t v1912;
  int16x8_t v1913;
  int16x8_t v1914;
  int16x8_t v1915;
  int16x8_t v1916;
  int16x8_t v1917;
  int16x8_t v1918;
  int16x8_t v1919;
  int16x8_t v1920;
  int16x8_t v1921;
  int16x8_t v1922;
  int16x8_t v1923;
  int16x8_t v1924;
  int16x8_t v1925;
  int16x8_t v1926;
  int16x8_t v1927;
  int16x8_t v1928;
  int16x8_t v1929;
  int16x8_t v1930;
  int16x8_t v1931;
  int16x8_t v1932;
  int16x8_t v1933;
  int16x8_t v1934;
  int16x8_t v1935;
  int16x8_t v1936;
  int16x8_t v1937;
  int16x8_t v1938;
  int16x8_t v1939;
  int16x8_t v1940;
  int16x8_t v1941;
  int16x8_t v1942;
  int16x8_t v1943;
  int16x8_t v1944;
  int16x8_t v1945;
  int16x8_t v1946;
  int16x8_t v1947;
  int16x8_t v1948;
  int16x8_t v1949;
  int16x8_t v1950;
  int16x8_t v1951;
  int16x8_t v1952;
  int16x8_t v1953;
  int16x8_t v1954;
  int16x8_t v1955;
  int16x8_t v1956;
  int16x8_t v1957;
  int16x8_t v1958;
  int16x8_t v1959;
  int16x8_t v1960;
  int16x8_t v1961;
  int16x8_t v1962;
  int16x8_t v1963;
  int16x8_t v1964;
  int16x8_t v1965;
  int16x8_t v1966;
  int16x8_t v1967;
  int16x8_t v1968;
  int16x8_t v1969;
  int16x8_t v1970;
  int16x8_t v1971;
  int16x8_t v1972;
  int16x8_t v1973;
  int16x8_t v1974;
  int16x8_t v1975;
  int16x8_t v1976;
  int16x8_t v1977;
  int16x8_t v1978;
  int16x8_t v1979;
  int16x8_t v1980;
  int16x8_t v1981;
  int16x8_t v1982;
  int16x8_t v1983;
  int16x8_t v1984;
  int16x8_t v1985;
  int16x8_t v1986;
  int16x8_t v1987;
  int16x8_t v1988;
  int16x8_t v1989;
  int16x8_t v1990;
  int16x8_t v1991;
  int16x8_t v1992;
  int16x8_t v1993;
  int16x8_t v1994;
  int16x8_t v1995;
  int16x8_t v1996;
  int16x8_t v1997;
  int16x8_t v1998;
  int16x8_t v1999;
  int16x8_t v2000;
  int16x8_t v2001;
  int16x8_t v2002;
  int16x8_t v2003;
  int16x8_t v2004;
  int16x8_t v2005;
  int16x8_t v2006;
  int16x8_t v2007;
  int16x8_t v2008;
  int16x8_t v2009;
  int16x8_t v2010;
  int16x8_t v2011;
  int16x8_t v2012;
  int16x8_t v2013;
  int16x8_t v2014;
  int16x8_t v2015;
  int16x8_t v2016;
  int16x8_t v2017;
  uint64_t v2018;
  uint64_t v2019;
  float32x4x2_t v2020;
  float32x4x2_t v2021;
  float32x4x2_t v2022;
  float32x4x2_t v2023;
  float32x4x2_t v2024;
  float32x4x2_t v2025;
  float32x4x2_t v2026;
  float32x4x2_t v2027;
  float32x4x2_t v2028;
  float32x4x2_t v2029;
  float32x4x4_t v2030;
  float32x4x4_t v2031;
  float32x4x4_t v2032;
  float32x4x4_t v2033;
  float32x4x4_t v2034;
  float32x4x4_t v2035;
  float32x4x4_t v2036;
  float32x4x4_t v2037;
  float32x4x4_t v2038;
  float32x4x4_t v2039;
  float32x4x4_t v2040;
  float32x4x4_t v2041;
  float32x4x4_t v2042;
  float32x4x4_t v2043;
  float32x4x4_t v2044;
  float32x4x4_t v2045;
  float32x4x4_t v2046;
  float32x4x4_t v2047;
  float32x4x4_t v2048;
  float32x4x4_t v2049;
  float32x4x4_t v2050;
  float32x4x4_t v2051;
  float32x4x4_t v2052;
  float32x4x4_t v2053;

  result = (_OWORD *)MEMORY[0x24BDAC7A8]();
  v1667 = v1;
  v7 = v1[1];
  v8 = *v3;
  v1665 = result;
  v1666 = v4;
  if (v4 == 1)
  {
    v9 = (uint8x16_t *)(v8 + 1);
    v10 = (int8x16_t *)v3[1];
    v6.i8[15] = v10->i8[0];
    v10 = (int8x16_t *)((char *)v10 + 1);
    v11 = *v10;
    v12 = v10[1];
    v10 += 2;
    v13 = (uint8x16_t)vextq_s8(v11, v12, 1uLL);
    v14 = (uint8x16_t)vextq_s8(v6, v11, 0xFuLL);
    v15 = *v9++;
    v17 = *(uint8x16_t *)(v3[2] + 1);
    v16 = (uint8x16_t *)(v3[2] + 17);
    v1746 = vshrq_n_s16((int16x8_t)vsubl_u8(*(uint8x8_t *)v14.i8, *(uint8x8_t *)v13.i8), 1uLL);
    v1747 = vshrq_n_s16((int16x8_t)vsubl_high_u8(v14, v13), 1uLL);
    v1762 = vshrq_n_s16((int16x8_t)vsubl_u8(*(uint8x8_t *)v15.i8, *(uint8x8_t *)v17.i8), 1uLL);
    v1763 = vshrq_n_s16((int16x8_t)vsubl_high_u8(v15, v17), 1uLL);
    v18 = *v10++;
    v1698 = vmulq_s16(v1746, v1746);
    v1699 = vmulq_s16(v1747, v1747);
    v1730 = vmulq_s16(v1762, v1762);
    v1731 = vmulq_s16(v1763, v1763);
    v1714 = vmulq_s16(v1746, v1762);
    v1715 = vmulq_s16(v1747, v1763);
    v19 = (uint8x16_t)vextq_s8(v12, v18, 1uLL);
    v20 = (uint8x16_t)vextq_s8(v11, v12, 0xFuLL);
    v21 = *v9++;
    v22 = *v16++;
    v1748 = vshrq_n_s16((int16x8_t)vsubl_u8(*(uint8x8_t *)v20.i8, *(uint8x8_t *)v19.i8), 1uLL);
    v1749 = vshrq_n_s16((int16x8_t)vsubl_high_u8(v20, v19), 1uLL);
    v1764 = vshrq_n_s16((int16x8_t)vsubl_u8(*(uint8x8_t *)v21.i8, *(uint8x8_t *)v22.i8), 1uLL);
    v1765 = vshrq_n_s16((int16x8_t)vsubl_high_u8(v21, v22), 1uLL);
    v23 = *v10++;
    v1700 = vmulq_s16(v1748, v1748);
    v1701 = vmulq_s16(v1749, v1749);
    v1732 = vmulq_s16(v1764, v1764);
    v1733 = vmulq_s16(v1765, v1765);
    v1716 = vmulq_s16(v1748, v1764);
    v1717 = vmulq_s16(v1749, v1765);
    v24 = (uint8x16_t)vextq_s8(v18, v23, 1uLL);
    v25 = (uint8x16_t)vextq_s8(v12, v18, 0xFuLL);
    v26 = *v9++;
    v27 = *v16++;
    v1750 = vshrq_n_s16((int16x8_t)vsubl_u8(*(uint8x8_t *)v25.i8, *(uint8x8_t *)v24.i8), 1uLL);
    v1751 = vshrq_n_s16((int16x8_t)vsubl_high_u8(v25, v24), 1uLL);
    v1766 = vshrq_n_s16((int16x8_t)vsubl_u8(*(uint8x8_t *)v26.i8, *(uint8x8_t *)v27.i8), 1uLL);
    v1767 = vshrq_n_s16((int16x8_t)vsubl_high_u8(v26, v27), 1uLL);
    v28 = *v10++;
    v1702 = vmulq_s16(v1750, v1750);
    v1703 = vmulq_s16(v1751, v1751);
    v1734 = vmulq_s16(v1766, v1766);
    v1735 = vmulq_s16(v1767, v1767);
    v1718 = vmulq_s16(v1750, v1766);
    v1719 = vmulq_s16(v1751, v1767);
    v29 = (uint8x16_t)vextq_s8(v23, v28, 1uLL);
    v30 = (uint8x16_t)vextq_s8(v18, v23, 0xFuLL);
    v31 = *v9++;
    v32 = *v16++;
    v1752 = vshrq_n_s16((int16x8_t)vsubl_u8(*(uint8x8_t *)v30.i8, *(uint8x8_t *)v29.i8), 1uLL);
    v1753 = vshrq_n_s16((int16x8_t)vsubl_high_u8(v30, v29), 1uLL);
    v1768 = vshrq_n_s16((int16x8_t)vsubl_u8(*(uint8x8_t *)v31.i8, *(uint8x8_t *)v32.i8), 1uLL);
    v1769 = vshrq_n_s16((int16x8_t)vsubl_high_u8(v31, v32), 1uLL);
    v33 = *v10++;
    v1704 = vmulq_s16(v1752, v1752);
    v1705 = vmulq_s16(v1753, v1753);
    v1736 = vmulq_s16(v1768, v1768);
    v1737 = vmulq_s16(v1769, v1769);
    v1720 = vmulq_s16(v1752, v1768);
    v1721 = vmulq_s16(v1753, v1769);
    v34 = (uint8x16_t)vextq_s8(v28, v33, 1uLL);
    v35 = (uint8x16_t)vextq_s8(v23, v28, 0xFuLL);
    v36 = *v9++;
    v37 = *v16++;
    v1754 = vshrq_n_s16((int16x8_t)vsubl_u8(*(uint8x8_t *)v35.i8, *(uint8x8_t *)v34.i8), 1uLL);
    v1755 = vshrq_n_s16((int16x8_t)vsubl_high_u8(v35, v34), 1uLL);
    v1770 = vshrq_n_s16((int16x8_t)vsubl_u8(*(uint8x8_t *)v36.i8, *(uint8x8_t *)v37.i8), 1uLL);
    v1771 = vshrq_n_s16((int16x8_t)vsubl_high_u8(v36, v37), 1uLL);
    v38 = *v10++;
    v1706 = vmulq_s16(v1754, v1754);
    v1707 = vmulq_s16(v1755, v1755);
    v1738 = vmulq_s16(v1770, v1770);
    v1739 = vmulq_s16(v1771, v1771);
    v1722 = vmulq_s16(v1754, v1770);
    v1723 = vmulq_s16(v1755, v1771);
    v39 = (uint8x16_t)vextq_s8(v33, v38, 1uLL);
    v40 = (uint8x16_t)vextq_s8(v28, v33, 0xFuLL);
    v41 = *v9++;
    v42 = *v16++;
    v1756 = vshrq_n_s16((int16x8_t)vsubl_u8(*(uint8x8_t *)v40.i8, *(uint8x8_t *)v39.i8), 1uLL);
    v1757 = vshrq_n_s16((int16x8_t)vsubl_high_u8(v40, v39), 1uLL);
    v1772 = vshrq_n_s16((int16x8_t)vsubl_u8(*(uint8x8_t *)v41.i8, *(uint8x8_t *)v42.i8), 1uLL);
    v1773 = vshrq_n_s16((int16x8_t)vsubl_high_u8(v41, v42), 1uLL);
    v43 = *v10;
    v1708 = vmulq_s16(v1756, v1756);
    v1709 = vmulq_s16(v1757, v1757);
    v1740 = vmulq_s16(v1772, v1772);
    v1741 = vmulq_s16(v1773, v1773);
    v1724 = vmulq_s16(v1756, v1772);
    v1725 = vmulq_s16(v1757, v1773);
    v44 = (uint8x16_t)vextq_s8(v38, v43, 1uLL);
    v45 = (uint8x16_t)vextq_s8(v33, v38, 0xFuLL);
    v46 = *v9;
    v47 = *v16;
    v1758 = vshrq_n_s16((int16x8_t)vsubl_u8(*(uint8x8_t *)v45.i8, *(uint8x8_t *)v44.i8), 1uLL);
    v1759 = vshrq_n_s16((int16x8_t)vsubl_high_u8(v45, v44), 1uLL);
    v1774 = vshrq_n_s16((int16x8_t)vsubl_u8(*(uint8x8_t *)v46.i8, *(uint8x8_t *)v47.i8), 1uLL);
    v1775 = vshrq_n_s16((int16x8_t)vsubl_high_u8(v46, v47), 1uLL);
    v48 = v10[1];
    v1710 = vmulq_s16(v1758, v1758);
    v1711 = vmulq_s16(v1759, v1759);
    v1742 = vmulq_s16(v1774, v1774);
    v1743 = vmulq_s16(v1775, v1775);
    v1726 = vmulq_s16(v1758, v1774);
    v1727 = vmulq_s16(v1759, v1775);
    v49 = (uint8x16_t)vextq_s8(v43, v48, 1uLL);
    v50 = (uint8x16_t)vextq_s8(v38, v43, 0xFuLL);
    v51 = v9[1];
    v52 = v16[1];
    v1760 = vshrq_n_s16((int16x8_t)vsubl_u8(*(uint8x8_t *)v50.i8, *(uint8x8_t *)v49.i8), 1uLL);
    v1761 = vshrq_n_s16((int16x8_t)vsubl_high_u8(v50, v49), 1uLL);
    v1776 = vshrq_n_s16((int16x8_t)vsubl_u8(*(uint8x8_t *)v51.i8, *(uint8x8_t *)v52.i8), 1uLL);
    v1777 = vshrq_n_s16((int16x8_t)vsubl_high_u8(v51, v52), 1uLL);
    v1712 = vmulq_s16(v1760, v1760);
    v1713 = vmulq_s16(v1761, v1761);
    v1744 = vmulq_s16(v1776, v1776);
    v1745 = vmulq_s16(v1777, v1777);
    v1728 = vmulq_s16(v1760, v1776);
    v1729 = vmulq_s16(v1761, v1777);
    if (!v7)
      goto LABEL_9;
  }
  else
  {
    v53 = (uint8x16_t *)(v8 + (int)v4);
    v54 = (uint8x16_t *)(v3[2] + (int)v4);
    v56.i64[0] = *(_QWORD *)(v3[1] + (int)v4 - 8);
    v55 = (int8x16_t *)(v3[1] + (int)v4);
    v56.i64[1] = v56.i64[0];
    v57 = *v55;
    v58 = v55[1];
    v55 += 2;
    v59 = (uint8x16_t)vextq_s8(v57, v58, 1uLL);
    v60 = (uint8x16_t)vextq_s8(v56, v57, 0xFuLL);
    v61 = *v53++;
    v62 = *v54++;
    v1746 = vshrq_n_s16((int16x8_t)vsubl_u8(*(uint8x8_t *)v60.i8, *(uint8x8_t *)v59.i8), 1uLL);
    v1747 = vshrq_n_s16((int16x8_t)vsubl_high_u8(v60, v59), 1uLL);
    v1762 = vshrq_n_s16((int16x8_t)vsubl_u8(*(uint8x8_t *)v61.i8, *(uint8x8_t *)v62.i8), 1uLL);
    v1763 = vshrq_n_s16((int16x8_t)vsubl_high_u8(v61, v62), 1uLL);
    v63 = *v55++;
    v1698 = vmulq_s16(v1746, v1746);
    v1699 = vmulq_s16(v1747, v1747);
    v1730 = vmulq_s16(v1762, v1762);
    v1731 = vmulq_s16(v1763, v1763);
    v1714 = vmulq_s16(v1746, v1762);
    v1715 = vmulq_s16(v1747, v1763);
    v64 = (uint8x16_t)vextq_s8(v58, v63, 1uLL);
    v65 = (uint8x16_t)vextq_s8(v57, v58, 0xFuLL);
    v66 = *v53++;
    v67 = *v54++;
    v1748 = vshrq_n_s16((int16x8_t)vsubl_u8(*(uint8x8_t *)v65.i8, *(uint8x8_t *)v64.i8), 1uLL);
    v1749 = vshrq_n_s16((int16x8_t)vsubl_high_u8(v65, v64), 1uLL);
    v1764 = vshrq_n_s16((int16x8_t)vsubl_u8(*(uint8x8_t *)v66.i8, *(uint8x8_t *)v67.i8), 1uLL);
    v1765 = vshrq_n_s16((int16x8_t)vsubl_high_u8(v66, v67), 1uLL);
    v68 = *v55++;
    v1700 = vmulq_s16(v1748, v1748);
    v1701 = vmulq_s16(v1749, v1749);
    v1732 = vmulq_s16(v1764, v1764);
    v1733 = vmulq_s16(v1765, v1765);
    v1716 = vmulq_s16(v1748, v1764);
    v1717 = vmulq_s16(v1749, v1765);
    v69 = (uint8x16_t)vextq_s8(v63, v68, 1uLL);
    v70 = (uint8x16_t)vextq_s8(v58, v63, 0xFuLL);
    v71 = *v53++;
    v72 = *v54++;
    v1750 = vshrq_n_s16((int16x8_t)vsubl_u8(*(uint8x8_t *)v70.i8, *(uint8x8_t *)v69.i8), 1uLL);
    v1751 = vshrq_n_s16((int16x8_t)vsubl_high_u8(v70, v69), 1uLL);
    v1766 = vshrq_n_s16((int16x8_t)vsubl_u8(*(uint8x8_t *)v71.i8, *(uint8x8_t *)v72.i8), 1uLL);
    v1767 = vshrq_n_s16((int16x8_t)vsubl_high_u8(v71, v72), 1uLL);
    v73 = *v55++;
    v1702 = vmulq_s16(v1750, v1750);
    v1703 = vmulq_s16(v1751, v1751);
    v1734 = vmulq_s16(v1766, v1766);
    v1735 = vmulq_s16(v1767, v1767);
    v1718 = vmulq_s16(v1750, v1766);
    v1719 = vmulq_s16(v1751, v1767);
    v74 = (uint8x16_t)vextq_s8(v68, v73, 1uLL);
    v75 = (uint8x16_t)vextq_s8(v63, v68, 0xFuLL);
    v76 = *v53++;
    v77 = *v54++;
    v1752 = vshrq_n_s16((int16x8_t)vsubl_u8(*(uint8x8_t *)v75.i8, *(uint8x8_t *)v74.i8), 1uLL);
    v1753 = vshrq_n_s16((int16x8_t)vsubl_high_u8(v75, v74), 1uLL);
    v1768 = vshrq_n_s16((int16x8_t)vsubl_u8(*(uint8x8_t *)v76.i8, *(uint8x8_t *)v77.i8), 1uLL);
    v1769 = vshrq_n_s16((int16x8_t)vsubl_high_u8(v76, v77), 1uLL);
    v78 = *v55++;
    v1704 = vmulq_s16(v1752, v1752);
    v1705 = vmulq_s16(v1753, v1753);
    v1736 = vmulq_s16(v1768, v1768);
    v1737 = vmulq_s16(v1769, v1769);
    v1720 = vmulq_s16(v1752, v1768);
    v1721 = vmulq_s16(v1753, v1769);
    v79 = (uint8x16_t)vextq_s8(v73, v78, 1uLL);
    v80 = (uint8x16_t)vextq_s8(v68, v73, 0xFuLL);
    v81 = *v53++;
    v82 = *v54++;
    v1754 = vshrq_n_s16((int16x8_t)vsubl_u8(*(uint8x8_t *)v80.i8, *(uint8x8_t *)v79.i8), 1uLL);
    v1755 = vshrq_n_s16((int16x8_t)vsubl_high_u8(v80, v79), 1uLL);
    v1770 = vshrq_n_s16((int16x8_t)vsubl_u8(*(uint8x8_t *)v81.i8, *(uint8x8_t *)v82.i8), 1uLL);
    v1771 = vshrq_n_s16((int16x8_t)vsubl_high_u8(v81, v82), 1uLL);
    v83 = *v55++;
    v1706 = vmulq_s16(v1754, v1754);
    v1707 = vmulq_s16(v1755, v1755);
    v1738 = vmulq_s16(v1770, v1770);
    v1739 = vmulq_s16(v1771, v1771);
    v1722 = vmulq_s16(v1754, v1770);
    v1723 = vmulq_s16(v1755, v1771);
    v84 = (uint8x16_t)vextq_s8(v78, v83, 1uLL);
    v85 = (uint8x16_t)vextq_s8(v73, v78, 0xFuLL);
    v86 = *v53++;
    v87 = *v54++;
    v1756 = vshrq_n_s16((int16x8_t)vsubl_u8(*(uint8x8_t *)v85.i8, *(uint8x8_t *)v84.i8), 1uLL);
    v1757 = vshrq_n_s16((int16x8_t)vsubl_high_u8(v85, v84), 1uLL);
    v1772 = vshrq_n_s16((int16x8_t)vsubl_u8(*(uint8x8_t *)v86.i8, *(uint8x8_t *)v87.i8), 1uLL);
    v1773 = vshrq_n_s16((int16x8_t)vsubl_high_u8(v86, v87), 1uLL);
    v88 = *v55;
    v1708 = vmulq_s16(v1756, v1756);
    v1709 = vmulq_s16(v1757, v1757);
    v1740 = vmulq_s16(v1772, v1772);
    v1741 = vmulq_s16(v1773, v1773);
    v1724 = vmulq_s16(v1756, v1772);
    v1725 = vmulq_s16(v1757, v1773);
    v89 = (uint8x16_t)vextq_s8(v83, v88, 1uLL);
    v90 = (uint8x16_t)vextq_s8(v78, v83, 0xFuLL);
    v91 = *v53;
    v92 = *v54;
    v1758 = vshrq_n_s16((int16x8_t)vsubl_u8(*(uint8x8_t *)v90.i8, *(uint8x8_t *)v89.i8), 1uLL);
    v1759 = vshrq_n_s16((int16x8_t)vsubl_high_u8(v90, v89), 1uLL);
    v1774 = vshrq_n_s16((int16x8_t)vsubl_u8(*(uint8x8_t *)v91.i8, *(uint8x8_t *)v92.i8), 1uLL);
    v1775 = vshrq_n_s16((int16x8_t)vsubl_high_u8(v91, v92), 1uLL);
    v48 = v55[1];
    v1710 = vmulq_s16(v1758, v1758);
    v1711 = vmulq_s16(v1759, v1759);
    v1742 = vmulq_s16(v1774, v1774);
    v1743 = vmulq_s16(v1775, v1775);
    v1726 = vmulq_s16(v1758, v1774);
    v1727 = vmulq_s16(v1759, v1775);
    v93 = (uint8x16_t)vextq_s8(v88, v48, 1uLL);
    v94 = (uint8x16_t)vextq_s8(v83, v88, 0xFuLL);
    v95 = v53[1];
    v96 = v54[1];
    v1760 = vshrq_n_s16((int16x8_t)vsubl_u8(*(uint8x8_t *)v94.i8, *(uint8x8_t *)v93.i8), 1uLL);
    v1761 = vshrq_n_s16((int16x8_t)vsubl_high_u8(v94, v93), 1uLL);
    v1776 = vshrq_n_s16((int16x8_t)vsubl_u8(*(uint8x8_t *)v95.i8, *(uint8x8_t *)v96.i8), 1uLL);
    v1777 = vshrq_n_s16((int16x8_t)vsubl_high_u8(v95, v96), 1uLL);
    v1712 = vmulq_s16(v1760, v1760);
    v1713 = vmulq_s16(v1761, v1761);
    v1744 = vmulq_s16(v1776, v1776);
    v1745 = vmulq_s16(v1777, v1777);
    v1728 = vmulq_s16(v1760, v1776);
    v1729 = vmulq_s16(v1761, v1777);
    if (!v7)
      goto LABEL_9;
  }
  v97 = (int8x16_t *)(v7 + v4);
  if (v7 + v4 < (unint64_t)&v1746 && (unint64_t)&v1698 < v7 + v4 + 128)
  {
    v98 = 0;
    v99 = v7 + v4;
    do
    {
      *(_BYTE *)(v99 + v98) = v1698.i16[v98] > v1730.i16[v98];
      ++v98;
    }
    while (v98 != 128);
LABEL_9:
    v100 = v1[2];
    v101 = v3[1];
    if (v4 == 1)
      goto LABEL_10;
LABEL_13:
    v150 = (uint8x16_t *)(v101 + (int)v4);
    v151 = (uint8x16_t *)(v3[3] + (int)v4);
    v153.i64[0] = *(_QWORD *)(v3[2] + (int)v4 - 8);
    v152 = (int8x16_t *)(v3[2] + (int)v4);
    v153.i64[1] = v153.i64[0];
    v154 = *v152;
    v155 = v152[1];
    v152 += 2;
    v156 = (uint8x16_t)vextq_s8(v154, v155, 1uLL);
    v157 = (uint8x16_t)vextq_s8(v153, v154, 0xFuLL);
    v158 = *v150++;
    v159 = *v151++;
    v1826 = vshrq_n_s16((int16x8_t)vsubl_u8(*(uint8x8_t *)v157.i8, *(uint8x8_t *)v156.i8), 1uLL);
    v1827 = vshrq_n_s16((int16x8_t)vsubl_high_u8(v157, v156), 1uLL);
    v1842 = vshrq_n_s16((int16x8_t)vsubl_u8(*(uint8x8_t *)v158.i8, *(uint8x8_t *)v159.i8), 1uLL);
    v1843 = vshrq_n_s16((int16x8_t)vsubl_high_u8(v158, v159), 1uLL);
    v160 = *v152++;
    v1778 = vmulq_s16(v1826, v1826);
    v1779 = vmulq_s16(v1827, v1827);
    v1810 = vmulq_s16(v1842, v1842);
    v1811 = vmulq_s16(v1843, v1843);
    v1794 = vmulq_s16(v1826, v1842);
    v1795 = vmulq_s16(v1827, v1843);
    v161 = (uint8x16_t)vextq_s8(v155, v160, 1uLL);
    v162 = (uint8x16_t)vextq_s8(v154, v155, 0xFuLL);
    v163 = *v150++;
    v164 = *v151++;
    v1828 = vshrq_n_s16((int16x8_t)vsubl_u8(*(uint8x8_t *)v162.i8, *(uint8x8_t *)v161.i8), 1uLL);
    v1829 = vshrq_n_s16((int16x8_t)vsubl_high_u8(v162, v161), 1uLL);
    v1844 = vshrq_n_s16((int16x8_t)vsubl_u8(*(uint8x8_t *)v163.i8, *(uint8x8_t *)v164.i8), 1uLL);
    v1845 = vshrq_n_s16((int16x8_t)vsubl_high_u8(v163, v164), 1uLL);
    v165 = *v152++;
    v1780 = vmulq_s16(v1828, v1828);
    v1781 = vmulq_s16(v1829, v1829);
    v1812 = vmulq_s16(v1844, v1844);
    v1813 = vmulq_s16(v1845, v1845);
    v1796 = vmulq_s16(v1828, v1844);
    v1797 = vmulq_s16(v1829, v1845);
    v166 = (uint8x16_t)vextq_s8(v160, v165, 1uLL);
    v167 = (uint8x16_t)vextq_s8(v155, v160, 0xFuLL);
    v168 = *v150++;
    v169 = *v151++;
    v1830 = vshrq_n_s16((int16x8_t)vsubl_u8(*(uint8x8_t *)v167.i8, *(uint8x8_t *)v166.i8), 1uLL);
    v1831 = vshrq_n_s16((int16x8_t)vsubl_high_u8(v167, v166), 1uLL);
    v1846 = vshrq_n_s16((int16x8_t)vsubl_u8(*(uint8x8_t *)v168.i8, *(uint8x8_t *)v169.i8), 1uLL);
    v1847 = vshrq_n_s16((int16x8_t)vsubl_high_u8(v168, v169), 1uLL);
    v170 = *v152++;
    v1782 = vmulq_s16(v1830, v1830);
    v1783 = vmulq_s16(v1831, v1831);
    v1814 = vmulq_s16(v1846, v1846);
    v1815 = vmulq_s16(v1847, v1847);
    v1798 = vmulq_s16(v1830, v1846);
    v1799 = vmulq_s16(v1831, v1847);
    v171 = (uint8x16_t)vextq_s8(v165, v170, 1uLL);
    v172 = (uint8x16_t)vextq_s8(v160, v165, 0xFuLL);
    v173 = *v150++;
    v174 = *v151++;
    v1832 = vshrq_n_s16((int16x8_t)vsubl_u8(*(uint8x8_t *)v172.i8, *(uint8x8_t *)v171.i8), 1uLL);
    v1833 = vshrq_n_s16((int16x8_t)vsubl_high_u8(v172, v171), 1uLL);
    v1848 = vshrq_n_s16((int16x8_t)vsubl_u8(*(uint8x8_t *)v173.i8, *(uint8x8_t *)v174.i8), 1uLL);
    v1849 = vshrq_n_s16((int16x8_t)vsubl_high_u8(v173, v174), 1uLL);
    v175 = *v152++;
    v1784 = vmulq_s16(v1832, v1832);
    v1785 = vmulq_s16(v1833, v1833);
    v1816 = vmulq_s16(v1848, v1848);
    v1817 = vmulq_s16(v1849, v1849);
    v1800 = vmulq_s16(v1832, v1848);
    v1801 = vmulq_s16(v1833, v1849);
    v176 = (uint8x16_t)vextq_s8(v170, v175, 1uLL);
    v177 = (uint8x16_t)vextq_s8(v165, v170, 0xFuLL);
    v178 = *v150++;
    v179 = *v151++;
    v1834 = vshrq_n_s16((int16x8_t)vsubl_u8(*(uint8x8_t *)v177.i8, *(uint8x8_t *)v176.i8), 1uLL);
    v1835 = vshrq_n_s16((int16x8_t)vsubl_high_u8(v177, v176), 1uLL);
    v1850 = vshrq_n_s16((int16x8_t)vsubl_u8(*(uint8x8_t *)v178.i8, *(uint8x8_t *)v179.i8), 1uLL);
    v1851 = vshrq_n_s16((int16x8_t)vsubl_high_u8(v178, v179), 1uLL);
    v180 = *v152++;
    v1786 = vmulq_s16(v1834, v1834);
    v1787 = vmulq_s16(v1835, v1835);
    v1818 = vmulq_s16(v1850, v1850);
    v1819 = vmulq_s16(v1851, v1851);
    v1802 = vmulq_s16(v1834, v1850);
    v1803 = vmulq_s16(v1835, v1851);
    v181 = (uint8x16_t)vextq_s8(v175, v180, 1uLL);
    v182 = (uint8x16_t)vextq_s8(v170, v175, 0xFuLL);
    v183 = *v150++;
    v184 = *v151++;
    v1836 = vshrq_n_s16((int16x8_t)vsubl_u8(*(uint8x8_t *)v182.i8, *(uint8x8_t *)v181.i8), 1uLL);
    v1837 = vshrq_n_s16((int16x8_t)vsubl_high_u8(v182, v181), 1uLL);
    v1852 = vshrq_n_s16((int16x8_t)vsubl_u8(*(uint8x8_t *)v183.i8, *(uint8x8_t *)v184.i8), 1uLL);
    v1853 = vshrq_n_s16((int16x8_t)vsubl_high_u8(v183, v184), 1uLL);
    v185 = *v152;
    v1788 = vmulq_s16(v1836, v1836);
    v1789 = vmulq_s16(v1837, v1837);
    v1820 = vmulq_s16(v1852, v1852);
    v1821 = vmulq_s16(v1853, v1853);
    v1804 = vmulq_s16(v1836, v1852);
    v1805 = vmulq_s16(v1837, v1853);
    v186 = (uint8x16_t)vextq_s8(v180, v185, 1uLL);
    v187 = (uint8x16_t)vextq_s8(v175, v180, 0xFuLL);
    v188 = *v150;
    v189 = *v151;
    v1838 = vshrq_n_s16((int16x8_t)vsubl_u8(*(uint8x8_t *)v187.i8, *(uint8x8_t *)v186.i8), 1uLL);
    v1839 = vshrq_n_s16((int16x8_t)vsubl_high_u8(v187, v186), 1uLL);
    v1854 = vshrq_n_s16((int16x8_t)vsubl_u8(*(uint8x8_t *)v188.i8, *(uint8x8_t *)v189.i8), 1uLL);
    v1855 = vshrq_n_s16((int16x8_t)vsubl_high_u8(v188, v189), 1uLL);
    v141 = v152[1];
    v1790 = vmulq_s16(v1838, v1838);
    v1791 = vmulq_s16(v1839, v1839);
    v1822 = vmulq_s16(v1854, v1854);
    v1823 = vmulq_s16(v1855, v1855);
    v1806 = vmulq_s16(v1838, v1854);
    v1807 = vmulq_s16(v1839, v1855);
    v190 = (uint8x16_t)vextq_s8(v185, v141, 1uLL);
    v191 = (uint8x16_t)vextq_s8(v180, v185, 0xFuLL);
    v192 = v150[1];
    v193 = v151[1];
    v1840 = vshrq_n_s16((int16x8_t)vsubl_u8(*(uint8x8_t *)v191.i8, *(uint8x8_t *)v190.i8), 1uLL);
    v1841 = vshrq_n_s16((int16x8_t)vsubl_high_u8(v191, v190), 1uLL);
    v1856 = vshrq_n_s16((int16x8_t)vsubl_u8(*(uint8x8_t *)v192.i8, *(uint8x8_t *)v193.i8), 1uLL);
    v1857 = vshrq_n_s16((int16x8_t)vsubl_high_u8(v192, v193), 1uLL);
    v1792 = vmulq_s16(v1840, v1840);
    v1793 = vmulq_s16(v1841, v1841);
    v1824 = vmulq_s16(v1856, v1856);
    v1825 = vmulq_s16(v1857, v1857);
    v1808 = vmulq_s16(v1840, v1856);
    v1809 = vmulq_s16(v1841, v1857);
    if (!v100)
      goto LABEL_18;
    goto LABEL_14;
  }
  v146.i64[0] = 0x101010101010101;
  v146.i64[1] = 0x101010101010101;
  v147 = vandq_s8(vuzp1q_s8((int8x16_t)vcgtq_s16(v1700, v1732), (int8x16_t)vcgtq_s16(v1701, v1733)), v146);
  *v97 = vandq_s8(vuzp1q_s8((int8x16_t)vcgtq_s16(v1698, v1730), (int8x16_t)vcgtq_s16(v1699, v1731)), v146);
  v97[1] = v147;
  v148 = vandq_s8(vuzp1q_s8((int8x16_t)vcgtq_s16(v1704, v1736), (int8x16_t)vcgtq_s16(v1705, v1737)), v146);
  v97[2] = vandq_s8(vuzp1q_s8((int8x16_t)vcgtq_s16(v1702, v1734), (int8x16_t)vcgtq_s16(v1703, v1735)), v146);
  v97[3] = v148;
  v149 = vandq_s8(vuzp1q_s8((int8x16_t)vcgtq_s16(v1708, v1740), (int8x16_t)vcgtq_s16(v1709, v1741)), v146);
  v97[4] = vandq_s8(vuzp1q_s8((int8x16_t)vcgtq_s16(v1706, v1738), (int8x16_t)vcgtq_s16(v1707, v1739)), v146);
  v97[5] = v149;
  v48 = vuzp1q_s8((int8x16_t)vcgtq_s16(v1712, v1744), (int8x16_t)vcgtq_s16(v1713, v1745));
  v97[6] = vandq_s8(vuzp1q_s8((int8x16_t)vcgtq_s16(v1710, v1742), (int8x16_t)vcgtq_s16(v1711, v1743)), v146);
  v97[7] = vandq_s8(v48, v146);
  v100 = v1[2];
  v101 = v3[1];
  if (v4 != 1)
    goto LABEL_13;
LABEL_10:
  v102 = (uint8x16_t *)(v101 + 1);
  v103 = (int8x16_t *)v3[2];
  v48.i8[15] = v103->i8[0];
  v103 = (int8x16_t *)((char *)v103 + 1);
  v104 = *v103;
  v105 = v103[1];
  v103 += 2;
  v106 = (uint8x16_t)vextq_s8(v104, v105, 1uLL);
  v107 = (uint8x16_t)vextq_s8(v48, v104, 0xFuLL);
  v108 = *v102++;
  v110 = *(uint8x16_t *)(v3[3] + 1);
  v109 = (uint8x16_t *)(v3[3] + 17);
  v1826 = vshrq_n_s16((int16x8_t)vsubl_u8(*(uint8x8_t *)v107.i8, *(uint8x8_t *)v106.i8), 1uLL);
  v1827 = vshrq_n_s16((int16x8_t)vsubl_high_u8(v107, v106), 1uLL);
  v1842 = vshrq_n_s16((int16x8_t)vsubl_u8(*(uint8x8_t *)v108.i8, *(uint8x8_t *)v110.i8), 1uLL);
  v1843 = vshrq_n_s16((int16x8_t)vsubl_high_u8(v108, v110), 1uLL);
  v111 = *v103++;
  v1778 = vmulq_s16(v1826, v1826);
  v1779 = vmulq_s16(v1827, v1827);
  v1810 = vmulq_s16(v1842, v1842);
  v1811 = vmulq_s16(v1843, v1843);
  v1794 = vmulq_s16(v1826, v1842);
  v1795 = vmulq_s16(v1827, v1843);
  v112 = (uint8x16_t)vextq_s8(v105, v111, 1uLL);
  v113 = (uint8x16_t)vextq_s8(v104, v105, 0xFuLL);
  v114 = *v102++;
  v115 = *v109++;
  v1828 = vshrq_n_s16((int16x8_t)vsubl_u8(*(uint8x8_t *)v113.i8, *(uint8x8_t *)v112.i8), 1uLL);
  v1829 = vshrq_n_s16((int16x8_t)vsubl_high_u8(v113, v112), 1uLL);
  v1844 = vshrq_n_s16((int16x8_t)vsubl_u8(*(uint8x8_t *)v114.i8, *(uint8x8_t *)v115.i8), 1uLL);
  v1845 = vshrq_n_s16((int16x8_t)vsubl_high_u8(v114, v115), 1uLL);
  v116 = *v103++;
  v1780 = vmulq_s16(v1828, v1828);
  v1781 = vmulq_s16(v1829, v1829);
  v1812 = vmulq_s16(v1844, v1844);
  v1813 = vmulq_s16(v1845, v1845);
  v1796 = vmulq_s16(v1828, v1844);
  v1797 = vmulq_s16(v1829, v1845);
  v117 = (uint8x16_t)vextq_s8(v111, v116, 1uLL);
  v118 = (uint8x16_t)vextq_s8(v105, v111, 0xFuLL);
  v119 = *v102++;
  v120 = *v109++;
  v1830 = vshrq_n_s16((int16x8_t)vsubl_u8(*(uint8x8_t *)v118.i8, *(uint8x8_t *)v117.i8), 1uLL);
  v1831 = vshrq_n_s16((int16x8_t)vsubl_high_u8(v118, v117), 1uLL);
  v1846 = vshrq_n_s16((int16x8_t)vsubl_u8(*(uint8x8_t *)v119.i8, *(uint8x8_t *)v120.i8), 1uLL);
  v1847 = vshrq_n_s16((int16x8_t)vsubl_high_u8(v119, v120), 1uLL);
  v121 = *v103++;
  v1782 = vmulq_s16(v1830, v1830);
  v1783 = vmulq_s16(v1831, v1831);
  v1814 = vmulq_s16(v1846, v1846);
  v1815 = vmulq_s16(v1847, v1847);
  v1798 = vmulq_s16(v1830, v1846);
  v1799 = vmulq_s16(v1831, v1847);
  v122 = (uint8x16_t)vextq_s8(v116, v121, 1uLL);
  v123 = (uint8x16_t)vextq_s8(v111, v116, 0xFuLL);
  v124 = *v102++;
  v125 = *v109++;
  v1832 = vshrq_n_s16((int16x8_t)vsubl_u8(*(uint8x8_t *)v123.i8, *(uint8x8_t *)v122.i8), 1uLL);
  v1833 = vshrq_n_s16((int16x8_t)vsubl_high_u8(v123, v122), 1uLL);
  v1848 = vshrq_n_s16((int16x8_t)vsubl_u8(*(uint8x8_t *)v124.i8, *(uint8x8_t *)v125.i8), 1uLL);
  v1849 = vshrq_n_s16((int16x8_t)vsubl_high_u8(v124, v125), 1uLL);
  v126 = *v103++;
  v1784 = vmulq_s16(v1832, v1832);
  v1785 = vmulq_s16(v1833, v1833);
  v1816 = vmulq_s16(v1848, v1848);
  v1817 = vmulq_s16(v1849, v1849);
  v1800 = vmulq_s16(v1832, v1848);
  v1801 = vmulq_s16(v1833, v1849);
  v127 = (uint8x16_t)vextq_s8(v121, v126, 1uLL);
  v128 = (uint8x16_t)vextq_s8(v116, v121, 0xFuLL);
  v129 = *v102++;
  v130 = *v109++;
  v1834 = vshrq_n_s16((int16x8_t)vsubl_u8(*(uint8x8_t *)v128.i8, *(uint8x8_t *)v127.i8), 1uLL);
  v1835 = vshrq_n_s16((int16x8_t)vsubl_high_u8(v128, v127), 1uLL);
  v1850 = vshrq_n_s16((int16x8_t)vsubl_u8(*(uint8x8_t *)v129.i8, *(uint8x8_t *)v130.i8), 1uLL);
  v1851 = vshrq_n_s16((int16x8_t)vsubl_high_u8(v129, v130), 1uLL);
  v131 = *v103++;
  v1786 = vmulq_s16(v1834, v1834);
  v1787 = vmulq_s16(v1835, v1835);
  v1818 = vmulq_s16(v1850, v1850);
  v1819 = vmulq_s16(v1851, v1851);
  v1802 = vmulq_s16(v1834, v1850);
  v1803 = vmulq_s16(v1835, v1851);
  v132 = (uint8x16_t)vextq_s8(v126, v131, 1uLL);
  v133 = (uint8x16_t)vextq_s8(v121, v126, 0xFuLL);
  v134 = *v102++;
  v135 = *v109++;
  v1836 = vshrq_n_s16((int16x8_t)vsubl_u8(*(uint8x8_t *)v133.i8, *(uint8x8_t *)v132.i8), 1uLL);
  v1837 = vshrq_n_s16((int16x8_t)vsubl_high_u8(v133, v132), 1uLL);
  v1852 = vshrq_n_s16((int16x8_t)vsubl_u8(*(uint8x8_t *)v134.i8, *(uint8x8_t *)v135.i8), 1uLL);
  v1853 = vshrq_n_s16((int16x8_t)vsubl_high_u8(v134, v135), 1uLL);
  v136 = *v103;
  v1788 = vmulq_s16(v1836, v1836);
  v1789 = vmulq_s16(v1837, v1837);
  v1820 = vmulq_s16(v1852, v1852);
  v1821 = vmulq_s16(v1853, v1853);
  v1804 = vmulq_s16(v1836, v1852);
  v1805 = vmulq_s16(v1837, v1853);
  v137 = (uint8x16_t)vextq_s8(v131, v136, 1uLL);
  v138 = (uint8x16_t)vextq_s8(v126, v131, 0xFuLL);
  v139 = *v102;
  v140 = *v109;
  v1838 = vshrq_n_s16((int16x8_t)vsubl_u8(*(uint8x8_t *)v138.i8, *(uint8x8_t *)v137.i8), 1uLL);
  v1839 = vshrq_n_s16((int16x8_t)vsubl_high_u8(v138, v137), 1uLL);
  v1854 = vshrq_n_s16((int16x8_t)vsubl_u8(*(uint8x8_t *)v139.i8, *(uint8x8_t *)v140.i8), 1uLL);
  v1855 = vshrq_n_s16((int16x8_t)vsubl_high_u8(v139, v140), 1uLL);
  v141 = v103[1];
  v1790 = vmulq_s16(v1838, v1838);
  v1791 = vmulq_s16(v1839, v1839);
  v1822 = vmulq_s16(v1854, v1854);
  v1823 = vmulq_s16(v1855, v1855);
  v1806 = vmulq_s16(v1838, v1854);
  v1807 = vmulq_s16(v1839, v1855);
  v142 = (uint8x16_t)vextq_s8(v136, v141, 1uLL);
  v143 = (uint8x16_t)vextq_s8(v131, v136, 0xFuLL);
  v144 = v102[1];
  v145 = v109[1];
  v1840 = vshrq_n_s16((int16x8_t)vsubl_u8(*(uint8x8_t *)v143.i8, *(uint8x8_t *)v142.i8), 1uLL);
  v1841 = vshrq_n_s16((int16x8_t)vsubl_high_u8(v143, v142), 1uLL);
  v1856 = vshrq_n_s16((int16x8_t)vsubl_u8(*(uint8x8_t *)v144.i8, *(uint8x8_t *)v145.i8), 1uLL);
  v1857 = vshrq_n_s16((int16x8_t)vsubl_high_u8(v144, v145), 1uLL);
  v1792 = vmulq_s16(v1840, v1840);
  v1793 = vmulq_s16(v1841, v1841);
  v1824 = vmulq_s16(v1856, v1856);
  v1825 = vmulq_s16(v1857, v1857);
  v1808 = vmulq_s16(v1840, v1856);
  v1809 = vmulq_s16(v1841, v1857);
  if (!v100)
    goto LABEL_18;
LABEL_14:
  v194 = (int8x16_t *)(v100 + v4);
  if (v100 + v4 < (unint64_t)&v1826 && &v1778 < (int16x8_t *)&v194[8])
  {
    v195 = 0;
    v196 = v100 + v4;
    do
    {
      *(_BYTE *)(v196 + v195) = v1778.i16[v195] > v1810.i16[v195];
      ++v195;
    }
    while (v195 != 128);
LABEL_18:
    v197 = v1[3];
    v198 = v3[2];
    if (v4 == 1)
      goto LABEL_19;
LABEL_22:
    v247 = (uint8x16_t *)(v198 + (int)v4);
    v248 = (uint8x16_t *)(v3[4] + (int)v4);
    v250.i64[0] = *(_QWORD *)(v3[3] + (int)v4 - 8);
    v249 = (int8x16_t *)(v3[3] + (int)v4);
    v250.i64[1] = v250.i64[0];
    v251 = *v249;
    v252 = v249[1];
    v249 += 2;
    v253 = (uint8x16_t)vextq_s8(v251, v252, 1uLL);
    v254 = (uint8x16_t)vextq_s8(v250, v251, 0xFuLL);
    v255 = *v247++;
    v256 = *v248++;
    v1906 = vshrq_n_s16((int16x8_t)vsubl_u8(*(uint8x8_t *)v254.i8, *(uint8x8_t *)v253.i8), 1uLL);
    v1907 = vshrq_n_s16((int16x8_t)vsubl_high_u8(v254, v253), 1uLL);
    v1922 = vshrq_n_s16((int16x8_t)vsubl_u8(*(uint8x8_t *)v255.i8, *(uint8x8_t *)v256.i8), 1uLL);
    v1923 = vshrq_n_s16((int16x8_t)vsubl_high_u8(v255, v256), 1uLL);
    v257 = *v249++;
    v1858 = vmulq_s16(v1906, v1906);
    v1859 = vmulq_s16(v1907, v1907);
    v1890 = vmulq_s16(v1922, v1922);
    v1891 = vmulq_s16(v1923, v1923);
    v1874 = vmulq_s16(v1906, v1922);
    v1875 = vmulq_s16(v1907, v1923);
    v258 = (uint8x16_t)vextq_s8(v252, v257, 1uLL);
    v259 = (uint8x16_t)vextq_s8(v251, v252, 0xFuLL);
    v260 = *v247++;
    v261 = *v248++;
    v1908 = vshrq_n_s16((int16x8_t)vsubl_u8(*(uint8x8_t *)v259.i8, *(uint8x8_t *)v258.i8), 1uLL);
    v1909 = vshrq_n_s16((int16x8_t)vsubl_high_u8(v259, v258), 1uLL);
    v1924 = vshrq_n_s16((int16x8_t)vsubl_u8(*(uint8x8_t *)v260.i8, *(uint8x8_t *)v261.i8), 1uLL);
    v1925 = vshrq_n_s16((int16x8_t)vsubl_high_u8(v260, v261), 1uLL);
    v262 = *v249++;
    v1860 = vmulq_s16(v1908, v1908);
    v1861 = vmulq_s16(v1909, v1909);
    v1892 = vmulq_s16(v1924, v1924);
    v1893 = vmulq_s16(v1925, v1925);
    v1876 = vmulq_s16(v1908, v1924);
    v1877 = vmulq_s16(v1909, v1925);
    v263 = (uint8x16_t)vextq_s8(v257, v262, 1uLL);
    v264 = (uint8x16_t)vextq_s8(v252, v257, 0xFuLL);
    v265 = *v247++;
    v266 = *v248++;
    v1910 = vshrq_n_s16((int16x8_t)vsubl_u8(*(uint8x8_t *)v264.i8, *(uint8x8_t *)v263.i8), 1uLL);
    v1911 = vshrq_n_s16((int16x8_t)vsubl_high_u8(v264, v263), 1uLL);
    v1926 = vshrq_n_s16((int16x8_t)vsubl_u8(*(uint8x8_t *)v265.i8, *(uint8x8_t *)v266.i8), 1uLL);
    v1927 = vshrq_n_s16((int16x8_t)vsubl_high_u8(v265, v266), 1uLL);
    v267 = *v249++;
    v1862 = vmulq_s16(v1910, v1910);
    v1863 = vmulq_s16(v1911, v1911);
    v1894 = vmulq_s16(v1926, v1926);
    v1895 = vmulq_s16(v1927, v1927);
    v1878 = vmulq_s16(v1910, v1926);
    v1879 = vmulq_s16(v1911, v1927);
    v268 = (uint8x16_t)vextq_s8(v262, v267, 1uLL);
    v269 = (uint8x16_t)vextq_s8(v257, v262, 0xFuLL);
    v270 = *v247++;
    v271 = *v248++;
    v1912 = vshrq_n_s16((int16x8_t)vsubl_u8(*(uint8x8_t *)v269.i8, *(uint8x8_t *)v268.i8), 1uLL);
    v1913 = vshrq_n_s16((int16x8_t)vsubl_high_u8(v269, v268), 1uLL);
    v1928 = vshrq_n_s16((int16x8_t)vsubl_u8(*(uint8x8_t *)v270.i8, *(uint8x8_t *)v271.i8), 1uLL);
    v1929 = vshrq_n_s16((int16x8_t)vsubl_high_u8(v270, v271), 1uLL);
    v272 = *v249++;
    v1864 = vmulq_s16(v1912, v1912);
    v1865 = vmulq_s16(v1913, v1913);
    v1896 = vmulq_s16(v1928, v1928);
    v1897 = vmulq_s16(v1929, v1929);
    v1880 = vmulq_s16(v1912, v1928);
    v1881 = vmulq_s16(v1913, v1929);
    v273 = (uint8x16_t)vextq_s8(v267, v272, 1uLL);
    v274 = (uint8x16_t)vextq_s8(v262, v267, 0xFuLL);
    v275 = *v247++;
    v276 = *v248++;
    v1914 = vshrq_n_s16((int16x8_t)vsubl_u8(*(uint8x8_t *)v274.i8, *(uint8x8_t *)v273.i8), 1uLL);
    v1915 = vshrq_n_s16((int16x8_t)vsubl_high_u8(v274, v273), 1uLL);
    v1930 = vshrq_n_s16((int16x8_t)vsubl_u8(*(uint8x8_t *)v275.i8, *(uint8x8_t *)v276.i8), 1uLL);
    v1931 = vshrq_n_s16((int16x8_t)vsubl_high_u8(v275, v276), 1uLL);
    v277 = *v249++;
    v1866 = vmulq_s16(v1914, v1914);
    v1867 = vmulq_s16(v1915, v1915);
    v1898 = vmulq_s16(v1930, v1930);
    v1899 = vmulq_s16(v1931, v1931);
    v1882 = vmulq_s16(v1914, v1930);
    v1883 = vmulq_s16(v1915, v1931);
    v278 = (uint8x16_t)vextq_s8(v272, v277, 1uLL);
    v279 = (uint8x16_t)vextq_s8(v267, v272, 0xFuLL);
    v280 = *v247++;
    v281 = *v248++;
    v1916 = vshrq_n_s16((int16x8_t)vsubl_u8(*(uint8x8_t *)v279.i8, *(uint8x8_t *)v278.i8), 1uLL);
    v1917 = vshrq_n_s16((int16x8_t)vsubl_high_u8(v279, v278), 1uLL);
    v1932 = vshrq_n_s16((int16x8_t)vsubl_u8(*(uint8x8_t *)v280.i8, *(uint8x8_t *)v281.i8), 1uLL);
    v1933 = vshrq_n_s16((int16x8_t)vsubl_high_u8(v280, v281), 1uLL);
    v282 = *v249;
    v1868 = vmulq_s16(v1916, v1916);
    v1869 = vmulq_s16(v1917, v1917);
    v1900 = vmulq_s16(v1932, v1932);
    v1901 = vmulq_s16(v1933, v1933);
    v1884 = vmulq_s16(v1916, v1932);
    v1885 = vmulq_s16(v1917, v1933);
    v283 = (uint8x16_t)vextq_s8(v277, v282, 1uLL);
    v284 = (uint8x16_t)vextq_s8(v272, v277, 0xFuLL);
    v285 = *v247;
    v286 = *v248;
    v1918 = vshrq_n_s16((int16x8_t)vsubl_u8(*(uint8x8_t *)v284.i8, *(uint8x8_t *)v283.i8), 1uLL);
    v1919 = vshrq_n_s16((int16x8_t)vsubl_high_u8(v284, v283), 1uLL);
    v1934 = vshrq_n_s16((int16x8_t)vsubl_u8(*(uint8x8_t *)v285.i8, *(uint8x8_t *)v286.i8), 1uLL);
    v1935 = vshrq_n_s16((int16x8_t)vsubl_high_u8(v285, v286), 1uLL);
    v238 = v249[1];
    v1870 = vmulq_s16(v1918, v1918);
    v1871 = vmulq_s16(v1919, v1919);
    v1902 = vmulq_s16(v1934, v1934);
    v1903 = vmulq_s16(v1935, v1935);
    v1886 = vmulq_s16(v1918, v1934);
    v1887 = vmulq_s16(v1919, v1935);
    v287 = (uint8x16_t)vextq_s8(v282, v238, 1uLL);
    v288 = (uint8x16_t)vextq_s8(v277, v282, 0xFuLL);
    v289 = v247[1];
    v290 = v248[1];
    v1920 = vshrq_n_s16((int16x8_t)vsubl_u8(*(uint8x8_t *)v288.i8, *(uint8x8_t *)v287.i8), 1uLL);
    v1921 = vshrq_n_s16((int16x8_t)vsubl_high_u8(v288, v287), 1uLL);
    v1936 = vshrq_n_s16((int16x8_t)vsubl_u8(*(uint8x8_t *)v289.i8, *(uint8x8_t *)v290.i8), 1uLL);
    v1937 = vshrq_n_s16((int16x8_t)vsubl_high_u8(v289, v290), 1uLL);
    v1872 = vmulq_s16(v1920, v1920);
    v1873 = vmulq_s16(v1921, v1921);
    v1904 = vmulq_s16(v1936, v1936);
    v1905 = vmulq_s16(v1937, v1937);
    v1888 = vmulq_s16(v1920, v1936);
    v1889 = vmulq_s16(v1921, v1937);
    if (!v197)
      goto LABEL_27;
    goto LABEL_23;
  }
  v243.i64[0] = 0x101010101010101;
  v243.i64[1] = 0x101010101010101;
  v244 = vandq_s8(vuzp1q_s8((int8x16_t)vcgtq_s16(v1780, v1812), (int8x16_t)vcgtq_s16(v1781, v1813)), v243);
  *v194 = vandq_s8(vuzp1q_s8((int8x16_t)vcgtq_s16(v1778, v1810), (int8x16_t)vcgtq_s16(v1779, v1811)), v243);
  v194[1] = v244;
  v245 = vandq_s8(vuzp1q_s8((int8x16_t)vcgtq_s16(v1784, v1816), (int8x16_t)vcgtq_s16(v1785, v1817)), v243);
  v194[2] = vandq_s8(vuzp1q_s8((int8x16_t)vcgtq_s16(v1782, v1814), (int8x16_t)vcgtq_s16(v1783, v1815)), v243);
  v194[3] = v245;
  v246 = vandq_s8(vuzp1q_s8((int8x16_t)vcgtq_s16(v1788, v1820), (int8x16_t)vcgtq_s16(v1789, v1821)), v243);
  v194[4] = vandq_s8(vuzp1q_s8((int8x16_t)vcgtq_s16(v1786, v1818), (int8x16_t)vcgtq_s16(v1787, v1819)), v243);
  v194[5] = v246;
  v141 = vuzp1q_s8((int8x16_t)vcgtq_s16(v1792, v1824), (int8x16_t)vcgtq_s16(v1793, v1825));
  v194[6] = vandq_s8(vuzp1q_s8((int8x16_t)vcgtq_s16(v1790, v1822), (int8x16_t)vcgtq_s16(v1791, v1823)), v243);
  v194[7] = vandq_s8(v141, v243);
  v197 = v1[3];
  v198 = v3[2];
  if (v4 != 1)
    goto LABEL_22;
LABEL_19:
  v199 = (uint8x16_t *)(v198 + 1);
  v200 = (int8x16_t *)v3[3];
  v141.i8[15] = v200->i8[0];
  v200 = (int8x16_t *)((char *)v200 + 1);
  v201 = *v200;
  v202 = v200[1];
  v200 += 2;
  v203 = (uint8x16_t)vextq_s8(v201, v202, 1uLL);
  v204 = (uint8x16_t)vextq_s8(v141, v201, 0xFuLL);
  v205 = *v199++;
  v207 = *(uint8x16_t *)(v3[4] + 1);
  v206 = (uint8x16_t *)(v3[4] + 17);
  v1906 = vshrq_n_s16((int16x8_t)vsubl_u8(*(uint8x8_t *)v204.i8, *(uint8x8_t *)v203.i8), 1uLL);
  v1907 = vshrq_n_s16((int16x8_t)vsubl_high_u8(v204, v203), 1uLL);
  v1922 = vshrq_n_s16((int16x8_t)vsubl_u8(*(uint8x8_t *)v205.i8, *(uint8x8_t *)v207.i8), 1uLL);
  v1923 = vshrq_n_s16((int16x8_t)vsubl_high_u8(v205, v207), 1uLL);
  v208 = *v200++;
  v1858 = vmulq_s16(v1906, v1906);
  v1859 = vmulq_s16(v1907, v1907);
  v1890 = vmulq_s16(v1922, v1922);
  v1891 = vmulq_s16(v1923, v1923);
  v1874 = vmulq_s16(v1906, v1922);
  v1875 = vmulq_s16(v1907, v1923);
  v209 = (uint8x16_t)vextq_s8(v202, v208, 1uLL);
  v210 = (uint8x16_t)vextq_s8(v201, v202, 0xFuLL);
  v211 = *v199++;
  v212 = *v206++;
  v1908 = vshrq_n_s16((int16x8_t)vsubl_u8(*(uint8x8_t *)v210.i8, *(uint8x8_t *)v209.i8), 1uLL);
  v1909 = vshrq_n_s16((int16x8_t)vsubl_high_u8(v210, v209), 1uLL);
  v1924 = vshrq_n_s16((int16x8_t)vsubl_u8(*(uint8x8_t *)v211.i8, *(uint8x8_t *)v212.i8), 1uLL);
  v1925 = vshrq_n_s16((int16x8_t)vsubl_high_u8(v211, v212), 1uLL);
  v213 = *v200++;
  v1860 = vmulq_s16(v1908, v1908);
  v1861 = vmulq_s16(v1909, v1909);
  v1892 = vmulq_s16(v1924, v1924);
  v1893 = vmulq_s16(v1925, v1925);
  v1876 = vmulq_s16(v1908, v1924);
  v1877 = vmulq_s16(v1909, v1925);
  v214 = (uint8x16_t)vextq_s8(v208, v213, 1uLL);
  v215 = (uint8x16_t)vextq_s8(v202, v208, 0xFuLL);
  v216 = *v199++;
  v217 = *v206++;
  v1910 = vshrq_n_s16((int16x8_t)vsubl_u8(*(uint8x8_t *)v215.i8, *(uint8x8_t *)v214.i8), 1uLL);
  v1911 = vshrq_n_s16((int16x8_t)vsubl_high_u8(v215, v214), 1uLL);
  v1926 = vshrq_n_s16((int16x8_t)vsubl_u8(*(uint8x8_t *)v216.i8, *(uint8x8_t *)v217.i8), 1uLL);
  v1927 = vshrq_n_s16((int16x8_t)vsubl_high_u8(v216, v217), 1uLL);
  v218 = *v200++;
  v1862 = vmulq_s16(v1910, v1910);
  v1863 = vmulq_s16(v1911, v1911);
  v1894 = vmulq_s16(v1926, v1926);
  v1895 = vmulq_s16(v1927, v1927);
  v1878 = vmulq_s16(v1910, v1926);
  v1879 = vmulq_s16(v1911, v1927);
  v219 = (uint8x16_t)vextq_s8(v213, v218, 1uLL);
  v220 = (uint8x16_t)vextq_s8(v208, v213, 0xFuLL);
  v221 = *v199++;
  v222 = *v206++;
  v1912 = vshrq_n_s16((int16x8_t)vsubl_u8(*(uint8x8_t *)v220.i8, *(uint8x8_t *)v219.i8), 1uLL);
  v1913 = vshrq_n_s16((int16x8_t)vsubl_high_u8(v220, v219), 1uLL);
  v1928 = vshrq_n_s16((int16x8_t)vsubl_u8(*(uint8x8_t *)v221.i8, *(uint8x8_t *)v222.i8), 1uLL);
  v1929 = vshrq_n_s16((int16x8_t)vsubl_high_u8(v221, v222), 1uLL);
  v223 = *v200++;
  v1864 = vmulq_s16(v1912, v1912);
  v1865 = vmulq_s16(v1913, v1913);
  v1896 = vmulq_s16(v1928, v1928);
  v1897 = vmulq_s16(v1929, v1929);
  v1880 = vmulq_s16(v1912, v1928);
  v1881 = vmulq_s16(v1913, v1929);
  v224 = (uint8x16_t)vextq_s8(v218, v223, 1uLL);
  v225 = (uint8x16_t)vextq_s8(v213, v218, 0xFuLL);
  v226 = *v199++;
  v227 = *v206++;
  v1914 = vshrq_n_s16((int16x8_t)vsubl_u8(*(uint8x8_t *)v225.i8, *(uint8x8_t *)v224.i8), 1uLL);
  v1915 = vshrq_n_s16((int16x8_t)vsubl_high_u8(v225, v224), 1uLL);
  v1930 = vshrq_n_s16((int16x8_t)vsubl_u8(*(uint8x8_t *)v226.i8, *(uint8x8_t *)v227.i8), 1uLL);
  v1931 = vshrq_n_s16((int16x8_t)vsubl_high_u8(v226, v227), 1uLL);
  v228 = *v200++;
  v1866 = vmulq_s16(v1914, v1914);
  v1867 = vmulq_s16(v1915, v1915);
  v1898 = vmulq_s16(v1930, v1930);
  v1899 = vmulq_s16(v1931, v1931);
  v1882 = vmulq_s16(v1914, v1930);
  v1883 = vmulq_s16(v1915, v1931);
  v229 = (uint8x16_t)vextq_s8(v223, v228, 1uLL);
  v230 = (uint8x16_t)vextq_s8(v218, v223, 0xFuLL);
  v231 = *v199++;
  v232 = *v206++;
  v1916 = vshrq_n_s16((int16x8_t)vsubl_u8(*(uint8x8_t *)v230.i8, *(uint8x8_t *)v229.i8), 1uLL);
  v1917 = vshrq_n_s16((int16x8_t)vsubl_high_u8(v230, v229), 1uLL);
  v1932 = vshrq_n_s16((int16x8_t)vsubl_u8(*(uint8x8_t *)v231.i8, *(uint8x8_t *)v232.i8), 1uLL);
  v1933 = vshrq_n_s16((int16x8_t)vsubl_high_u8(v231, v232), 1uLL);
  v233 = *v200;
  v1868 = vmulq_s16(v1916, v1916);
  v1869 = vmulq_s16(v1917, v1917);
  v1900 = vmulq_s16(v1932, v1932);
  v1901 = vmulq_s16(v1933, v1933);
  v1884 = vmulq_s16(v1916, v1932);
  v1885 = vmulq_s16(v1917, v1933);
  v234 = (uint8x16_t)vextq_s8(v228, v233, 1uLL);
  v235 = (uint8x16_t)vextq_s8(v223, v228, 0xFuLL);
  v236 = *v199;
  v237 = *v206;
  v1918 = vshrq_n_s16((int16x8_t)vsubl_u8(*(uint8x8_t *)v235.i8, *(uint8x8_t *)v234.i8), 1uLL);
  v1919 = vshrq_n_s16((int16x8_t)vsubl_high_u8(v235, v234), 1uLL);
  v1934 = vshrq_n_s16((int16x8_t)vsubl_u8(*(uint8x8_t *)v236.i8, *(uint8x8_t *)v237.i8), 1uLL);
  v1935 = vshrq_n_s16((int16x8_t)vsubl_high_u8(v236, v237), 1uLL);
  v238 = v200[1];
  v1870 = vmulq_s16(v1918, v1918);
  v1871 = vmulq_s16(v1919, v1919);
  v1902 = vmulq_s16(v1934, v1934);
  v1903 = vmulq_s16(v1935, v1935);
  v1886 = vmulq_s16(v1918, v1934);
  v1887 = vmulq_s16(v1919, v1935);
  v239 = (uint8x16_t)vextq_s8(v233, v238, 1uLL);
  v240 = (uint8x16_t)vextq_s8(v228, v233, 0xFuLL);
  v241 = v199[1];
  v242 = v206[1];
  v1920 = vshrq_n_s16((int16x8_t)vsubl_u8(*(uint8x8_t *)v240.i8, *(uint8x8_t *)v239.i8), 1uLL);
  v1921 = vshrq_n_s16((int16x8_t)vsubl_high_u8(v240, v239), 1uLL);
  v1936 = vshrq_n_s16((int16x8_t)vsubl_u8(*(uint8x8_t *)v241.i8, *(uint8x8_t *)v242.i8), 1uLL);
  v1937 = vshrq_n_s16((int16x8_t)vsubl_high_u8(v241, v242), 1uLL);
  v1872 = vmulq_s16(v1920, v1920);
  v1873 = vmulq_s16(v1921, v1921);
  v1904 = vmulq_s16(v1936, v1936);
  v1905 = vmulq_s16(v1937, v1937);
  v1888 = vmulq_s16(v1920, v1936);
  v1889 = vmulq_s16(v1921, v1937);
  if (!v197)
    goto LABEL_27;
LABEL_23:
  v291 = (int8x16_t *)(v197 + v4);
  if (v197 + v4 < (unint64_t)&v1906 && &v1858 < (int16x8_t *)&v291[8])
  {
    v292 = 0;
    v293 = v197 + v4;
    do
    {
      *(_BYTE *)(v293 + v292) = v1858.i16[v292] > v1890.i16[v292];
      ++v292;
    }
    while (v292 != 128);
LABEL_27:
    v294 = v1[4];
    v295 = v3[3];
    if (v4 == 1)
      goto LABEL_28;
    goto LABEL_31;
  }
  v340.i64[0] = 0x101010101010101;
  v340.i64[1] = 0x101010101010101;
  v341 = vandq_s8(vuzp1q_s8((int8x16_t)vcgtq_s16(v1860, v1892), (int8x16_t)vcgtq_s16(v1861, v1893)), v340);
  *v291 = vandq_s8(vuzp1q_s8((int8x16_t)vcgtq_s16(v1858, v1890), (int8x16_t)vcgtq_s16(v1859, v1891)), v340);
  v291[1] = v341;
  v342 = vandq_s8(vuzp1q_s8((int8x16_t)vcgtq_s16(v1864, v1896), (int8x16_t)vcgtq_s16(v1865, v1897)), v340);
  v291[2] = vandq_s8(vuzp1q_s8((int8x16_t)vcgtq_s16(v1862, v1894), (int8x16_t)vcgtq_s16(v1863, v1895)), v340);
  v291[3] = v342;
  v343 = vandq_s8(vuzp1q_s8((int8x16_t)vcgtq_s16(v1868, v1900), (int8x16_t)vcgtq_s16(v1869, v1901)), v340);
  v291[4] = vandq_s8(vuzp1q_s8((int8x16_t)vcgtq_s16(v1866, v1898), (int8x16_t)vcgtq_s16(v1867, v1899)), v340);
  v291[5] = v343;
  v238 = vuzp1q_s8((int8x16_t)vcgtq_s16(v1872, v1904), (int8x16_t)vcgtq_s16(v1873, v1905));
  v291[6] = vandq_s8(vuzp1q_s8((int8x16_t)vcgtq_s16(v1870, v1902), (int8x16_t)vcgtq_s16(v1871, v1903)), v340);
  v291[7] = vandq_s8(v238, v340);
  v294 = v1[4];
  v295 = v3[3];
  if (v4 == 1)
  {
LABEL_28:
    v296 = (uint8x16_t *)(v295 + 1);
    v297 = (int8x16_t *)v3[4];
    v238.i8[15] = v297->i8[0];
    v297 = (int8x16_t *)((char *)v297 + 1);
    v298 = *v297;
    v299 = v297[1];
    v297 += 2;
    v300 = (uint8x16_t)vextq_s8(v298, v299, 1uLL);
    v301 = (uint8x16_t)vextq_s8(v238, v298, 0xFuLL);
    v302 = *v296++;
    v304 = *(uint8x16_t *)(v3[5] + 1);
    v303 = (uint8x16_t *)(v3[5] + 17);
    v1986 = vshrq_n_s16((int16x8_t)vsubl_u8(*(uint8x8_t *)v301.i8, *(uint8x8_t *)v300.i8), 1uLL);
    v1987 = vshrq_n_s16((int16x8_t)vsubl_high_u8(v301, v300), 1uLL);
    v2002 = vshrq_n_s16((int16x8_t)vsubl_u8(*(uint8x8_t *)v302.i8, *(uint8x8_t *)v304.i8), 1uLL);
    v2003 = vshrq_n_s16((int16x8_t)vsubl_high_u8(v302, v304), 1uLL);
    v305 = *v297++;
    v1938 = vmulq_s16(v1986, v1986);
    v1939 = vmulq_s16(v1987, v1987);
    v1970 = vmulq_s16(v2002, v2002);
    v1971 = vmulq_s16(v2003, v2003);
    v1954 = vmulq_s16(v1986, v2002);
    v1955 = vmulq_s16(v1987, v2003);
    v306 = (uint8x16_t)vextq_s8(v299, v305, 1uLL);
    v307 = (uint8x16_t)vextq_s8(v298, v299, 0xFuLL);
    v308 = *v296++;
    v309 = *v303++;
    v1988 = vshrq_n_s16((int16x8_t)vsubl_u8(*(uint8x8_t *)v307.i8, *(uint8x8_t *)v306.i8), 1uLL);
    v1989 = vshrq_n_s16((int16x8_t)vsubl_high_u8(v307, v306), 1uLL);
    v2004 = vshrq_n_s16((int16x8_t)vsubl_u8(*(uint8x8_t *)v308.i8, *(uint8x8_t *)v309.i8), 1uLL);
    v2005 = vshrq_n_s16((int16x8_t)vsubl_high_u8(v308, v309), 1uLL);
    v310 = *v297++;
    v1940 = vmulq_s16(v1988, v1988);
    v1941 = vmulq_s16(v1989, v1989);
    v1972 = vmulq_s16(v2004, v2004);
    v1973 = vmulq_s16(v2005, v2005);
    v1956 = vmulq_s16(v1988, v2004);
    v1957 = vmulq_s16(v1989, v2005);
    v311 = (uint8x16_t)vextq_s8(v305, v310, 1uLL);
    v312 = (uint8x16_t)vextq_s8(v299, v305, 0xFuLL);
    v313 = *v296++;
    v314 = *v303++;
    v1990 = vshrq_n_s16((int16x8_t)vsubl_u8(*(uint8x8_t *)v312.i8, *(uint8x8_t *)v311.i8), 1uLL);
    v1991 = vshrq_n_s16((int16x8_t)vsubl_high_u8(v312, v311), 1uLL);
    v2006 = vshrq_n_s16((int16x8_t)vsubl_u8(*(uint8x8_t *)v313.i8, *(uint8x8_t *)v314.i8), 1uLL);
    v2007 = vshrq_n_s16((int16x8_t)vsubl_high_u8(v313, v314), 1uLL);
    v315 = *v297++;
    v1942 = vmulq_s16(v1990, v1990);
    v1943 = vmulq_s16(v1991, v1991);
    v1974 = vmulq_s16(v2006, v2006);
    v1975 = vmulq_s16(v2007, v2007);
    v1958 = vmulq_s16(v1990, v2006);
    v1959 = vmulq_s16(v1991, v2007);
    v316 = (uint8x16_t)vextq_s8(v310, v315, 1uLL);
    v317 = (uint8x16_t)vextq_s8(v305, v310, 0xFuLL);
    v318 = *v296++;
    v319 = *v303++;
    v1992 = vshrq_n_s16((int16x8_t)vsubl_u8(*(uint8x8_t *)v317.i8, *(uint8x8_t *)v316.i8), 1uLL);
    v1993 = vshrq_n_s16((int16x8_t)vsubl_high_u8(v317, v316), 1uLL);
    v2008 = vshrq_n_s16((int16x8_t)vsubl_u8(*(uint8x8_t *)v318.i8, *(uint8x8_t *)v319.i8), 1uLL);
    v2009 = vshrq_n_s16((int16x8_t)vsubl_high_u8(v318, v319), 1uLL);
    v320 = *v297++;
    v1944 = vmulq_s16(v1992, v1992);
    v1945 = vmulq_s16(v1993, v1993);
    v1976 = vmulq_s16(v2008, v2008);
    v1977 = vmulq_s16(v2009, v2009);
    v1960 = vmulq_s16(v1992, v2008);
    v1961 = vmulq_s16(v1993, v2009);
    v321 = (uint8x16_t)vextq_s8(v315, v320, 1uLL);
    v322 = (uint8x16_t)vextq_s8(v310, v315, 0xFuLL);
    v323 = *v296++;
    v324 = *v303++;
    v1994 = vshrq_n_s16((int16x8_t)vsubl_u8(*(uint8x8_t *)v322.i8, *(uint8x8_t *)v321.i8), 1uLL);
    v1995 = vshrq_n_s16((int16x8_t)vsubl_high_u8(v322, v321), 1uLL);
    v2010 = vshrq_n_s16((int16x8_t)vsubl_u8(*(uint8x8_t *)v323.i8, *(uint8x8_t *)v324.i8), 1uLL);
    v2011 = vshrq_n_s16((int16x8_t)vsubl_high_u8(v323, v324), 1uLL);
    v325 = *v297++;
    v1946 = vmulq_s16(v1994, v1994);
    v1947 = vmulq_s16(v1995, v1995);
    v1978 = vmulq_s16(v2010, v2010);
    v1979 = vmulq_s16(v2011, v2011);
    v1962 = vmulq_s16(v1994, v2010);
    v1963 = vmulq_s16(v1995, v2011);
    v326 = (uint8x16_t)vextq_s8(v320, v325, 1uLL);
    v327 = (uint8x16_t)vextq_s8(v315, v320, 0xFuLL);
    v328 = *v296++;
    v329 = *v303++;
    v1996 = vshrq_n_s16((int16x8_t)vsubl_u8(*(uint8x8_t *)v327.i8, *(uint8x8_t *)v326.i8), 1uLL);
    v1997 = vshrq_n_s16((int16x8_t)vsubl_high_u8(v327, v326), 1uLL);
    v2012 = vshrq_n_s16((int16x8_t)vsubl_u8(*(uint8x8_t *)v328.i8, *(uint8x8_t *)v329.i8), 1uLL);
    v2013 = vshrq_n_s16((int16x8_t)vsubl_high_u8(v328, v329), 1uLL);
    v330 = *v297;
    v1948 = vmulq_s16(v1996, v1996);
    v1949 = vmulq_s16(v1997, v1997);
    v1980 = vmulq_s16(v2012, v2012);
    v1981 = vmulq_s16(v2013, v2013);
    v1964 = vmulq_s16(v1996, v2012);
    v1965 = vmulq_s16(v1997, v2013);
    v331 = (uint8x16_t)vextq_s8(v325, v330, 1uLL);
    v332 = (uint8x16_t)vextq_s8(v320, v325, 0xFuLL);
    v333 = *v296;
    v334 = *v303;
    v1998 = vshrq_n_s16((int16x8_t)vsubl_u8(*(uint8x8_t *)v332.i8, *(uint8x8_t *)v331.i8), 1uLL);
    v1999 = vshrq_n_s16((int16x8_t)vsubl_high_u8(v332, v331), 1uLL);
    v2014 = vshrq_n_s16((int16x8_t)vsubl_u8(*(uint8x8_t *)v333.i8, *(uint8x8_t *)v334.i8), 1uLL);
    v2015 = vshrq_n_s16((int16x8_t)vsubl_high_u8(v333, v334), 1uLL);
    v335 = v297[1];
    v1950 = vmulq_s16(v1998, v1998);
    v1951 = vmulq_s16(v1999, v1999);
    v1982 = vmulq_s16(v2014, v2014);
    v1983 = vmulq_s16(v2015, v2015);
    v1966 = vmulq_s16(v1998, v2014);
    v1967 = vmulq_s16(v1999, v2015);
    v336 = (uint8x16_t)vextq_s8(v330, v335, 1uLL);
    v337 = (uint8x16_t)vextq_s8(v325, v330, 0xFuLL);
    v338 = v296[1];
    v339 = v303[1];
    v2000 = vshrq_n_s16((int16x8_t)vsubl_u8(*(uint8x8_t *)v337.i8, *(uint8x8_t *)v336.i8), 1uLL);
    v2001 = vshrq_n_s16((int16x8_t)vsubl_high_u8(v337, v336), 1uLL);
    v2016 = vshrq_n_s16((int16x8_t)vsubl_u8(*(uint8x8_t *)v338.i8, *(uint8x8_t *)v339.i8), 1uLL);
    v2017 = vshrq_n_s16((int16x8_t)vsubl_high_u8(v338, v339), 1uLL);
    v1952 = vmulq_s16(v2000, v2000);
    v1953 = vmulq_s16(v2001, v2001);
    v1984 = vmulq_s16(v2016, v2016);
    v1985 = vmulq_s16(v2017, v2017);
    v1968 = vmulq_s16(v2000, v2016);
    v1969 = vmulq_s16(v2001, v2017);
    if (!v294)
      goto LABEL_38;
    goto LABEL_32;
  }
LABEL_31:
  v344 = (uint8x16_t *)(v295 + (int)v4);
  v345 = (uint8x16_t *)(v3[5] + (int)v4);
  v347.i64[0] = *(_QWORD *)(v3[4] + (int)v4 - 8);
  v346 = (int8x16_t *)(v3[4] + (int)v4);
  v347.i64[1] = v347.i64[0];
  v348 = *v346;
  v349 = v346[1];
  v346 += 2;
  v350 = (uint8x16_t)vextq_s8(v348, v349, 1uLL);
  v351 = (uint8x16_t)vextq_s8(v347, v348, 0xFuLL);
  v352 = *v344++;
  v353 = *v345++;
  v1986 = vshrq_n_s16((int16x8_t)vsubl_u8(*(uint8x8_t *)v351.i8, *(uint8x8_t *)v350.i8), 1uLL);
  v1987 = vshrq_n_s16((int16x8_t)vsubl_high_u8(v351, v350), 1uLL);
  v2002 = vshrq_n_s16((int16x8_t)vsubl_u8(*(uint8x8_t *)v352.i8, *(uint8x8_t *)v353.i8), 1uLL);
  v2003 = vshrq_n_s16((int16x8_t)vsubl_high_u8(v352, v353), 1uLL);
  v354 = *v346++;
  v1938 = vmulq_s16(v1986, v1986);
  v1939 = vmulq_s16(v1987, v1987);
  v1970 = vmulq_s16(v2002, v2002);
  v1971 = vmulq_s16(v2003, v2003);
  v1954 = vmulq_s16(v1986, v2002);
  v1955 = vmulq_s16(v1987, v2003);
  v355 = (uint8x16_t)vextq_s8(v349, v354, 1uLL);
  v356 = (uint8x16_t)vextq_s8(v348, v349, 0xFuLL);
  v357 = *v344++;
  v358 = *v345++;
  v1988 = vshrq_n_s16((int16x8_t)vsubl_u8(*(uint8x8_t *)v356.i8, *(uint8x8_t *)v355.i8), 1uLL);
  v1989 = vshrq_n_s16((int16x8_t)vsubl_high_u8(v356, v355), 1uLL);
  v2004 = vshrq_n_s16((int16x8_t)vsubl_u8(*(uint8x8_t *)v357.i8, *(uint8x8_t *)v358.i8), 1uLL);
  v2005 = vshrq_n_s16((int16x8_t)vsubl_high_u8(v357, v358), 1uLL);
  v359 = *v346++;
  v1940 = vmulq_s16(v1988, v1988);
  v1941 = vmulq_s16(v1989, v1989);
  v1972 = vmulq_s16(v2004, v2004);
  v1973 = vmulq_s16(v2005, v2005);
  v1956 = vmulq_s16(v1988, v2004);
  v1957 = vmulq_s16(v1989, v2005);
  v360 = (uint8x16_t)vextq_s8(v354, v359, 1uLL);
  v361 = (uint8x16_t)vextq_s8(v349, v354, 0xFuLL);
  v362 = *v344++;
  v363 = *v345++;
  v1990 = vshrq_n_s16((int16x8_t)vsubl_u8(*(uint8x8_t *)v361.i8, *(uint8x8_t *)v360.i8), 1uLL);
  v1991 = vshrq_n_s16((int16x8_t)vsubl_high_u8(v361, v360), 1uLL);
  v2006 = vshrq_n_s16((int16x8_t)vsubl_u8(*(uint8x8_t *)v362.i8, *(uint8x8_t *)v363.i8), 1uLL);
  v2007 = vshrq_n_s16((int16x8_t)vsubl_high_u8(v362, v363), 1uLL);
  v364 = *v346++;
  v1942 = vmulq_s16(v1990, v1990);
  v1943 = vmulq_s16(v1991, v1991);
  v1974 = vmulq_s16(v2006, v2006);
  v1975 = vmulq_s16(v2007, v2007);
  v1958 = vmulq_s16(v1990, v2006);
  v1959 = vmulq_s16(v1991, v2007);
  v365 = (uint8x16_t)vextq_s8(v359, v364, 1uLL);
  v366 = (uint8x16_t)vextq_s8(v354, v359, 0xFuLL);
  v367 = *v344++;
  v368 = *v345++;
  v1992 = vshrq_n_s16((int16x8_t)vsubl_u8(*(uint8x8_t *)v366.i8, *(uint8x8_t *)v365.i8), 1uLL);
  v1993 = vshrq_n_s16((int16x8_t)vsubl_high_u8(v366, v365), 1uLL);
  v2008 = vshrq_n_s16((int16x8_t)vsubl_u8(*(uint8x8_t *)v367.i8, *(uint8x8_t *)v368.i8), 1uLL);
  v2009 = vshrq_n_s16((int16x8_t)vsubl_high_u8(v367, v368), 1uLL);
  v369 = *v346++;
  v1944 = vmulq_s16(v1992, v1992);
  v1945 = vmulq_s16(v1993, v1993);
  v1976 = vmulq_s16(v2008, v2008);
  v1977 = vmulq_s16(v2009, v2009);
  v1960 = vmulq_s16(v1992, v2008);
  v1961 = vmulq_s16(v1993, v2009);
  v370 = (uint8x16_t)vextq_s8(v364, v369, 1uLL);
  v371 = (uint8x16_t)vextq_s8(v359, v364, 0xFuLL);
  v372 = *v344++;
  v373 = *v345++;
  v1994 = vshrq_n_s16((int16x8_t)vsubl_u8(*(uint8x8_t *)v371.i8, *(uint8x8_t *)v370.i8), 1uLL);
  v1995 = vshrq_n_s16((int16x8_t)vsubl_high_u8(v371, v370), 1uLL);
  v2010 = vshrq_n_s16((int16x8_t)vsubl_u8(*(uint8x8_t *)v372.i8, *(uint8x8_t *)v373.i8), 1uLL);
  v2011 = vshrq_n_s16((int16x8_t)vsubl_high_u8(v372, v373), 1uLL);
  v374 = *v346++;
  v1946 = vmulq_s16(v1994, v1994);
  v1947 = vmulq_s16(v1995, v1995);
  v1978 = vmulq_s16(v2010, v2010);
  v1979 = vmulq_s16(v2011, v2011);
  v1962 = vmulq_s16(v1994, v2010);
  v1963 = vmulq_s16(v1995, v2011);
  v375 = (uint8x16_t)vextq_s8(v369, v374, 1uLL);
  v376 = (uint8x16_t)vextq_s8(v364, v369, 0xFuLL);
  v377 = *v344++;
  v378 = *v345++;
  v1996 = vshrq_n_s16((int16x8_t)vsubl_u8(*(uint8x8_t *)v376.i8, *(uint8x8_t *)v375.i8), 1uLL);
  v1997 = vshrq_n_s16((int16x8_t)vsubl_high_u8(v376, v375), 1uLL);
  v2012 = vshrq_n_s16((int16x8_t)vsubl_u8(*(uint8x8_t *)v377.i8, *(uint8x8_t *)v378.i8), 1uLL);
  v2013 = vshrq_n_s16((int16x8_t)vsubl_high_u8(v377, v378), 1uLL);
  v379 = *v346;
  v1948 = vmulq_s16(v1996, v1996);
  v1949 = vmulq_s16(v1997, v1997);
  v1980 = vmulq_s16(v2012, v2012);
  v1981 = vmulq_s16(v2013, v2013);
  v1964 = vmulq_s16(v1996, v2012);
  v1965 = vmulq_s16(v1997, v2013);
  v380 = (uint8x16_t)vextq_s8(v374, v379, 1uLL);
  v381 = (uint8x16_t)vextq_s8(v369, v374, 0xFuLL);
  v382 = *v344;
  v383 = *v345;
  v1998 = vshrq_n_s16((int16x8_t)vsubl_u8(*(uint8x8_t *)v381.i8, *(uint8x8_t *)v380.i8), 1uLL);
  v1999 = vshrq_n_s16((int16x8_t)vsubl_high_u8(v381, v380), 1uLL);
  v2014 = vshrq_n_s16((int16x8_t)vsubl_u8(*(uint8x8_t *)v382.i8, *(uint8x8_t *)v383.i8), 1uLL);
  v2015 = vshrq_n_s16((int16x8_t)vsubl_high_u8(v382, v383), 1uLL);
  v335 = v346[1];
  v1950 = vmulq_s16(v1998, v1998);
  v1951 = vmulq_s16(v1999, v1999);
  v1982 = vmulq_s16(v2014, v2014);
  v1983 = vmulq_s16(v2015, v2015);
  v1966 = vmulq_s16(v1998, v2014);
  v1967 = vmulq_s16(v1999, v2015);
  v384 = (uint8x16_t)vextq_s8(v379, v335, 1uLL);
  v385 = (uint8x16_t)vextq_s8(v374, v379, 0xFuLL);
  v386 = v344[1];
  v387 = v345[1];
  v2000 = vshrq_n_s16((int16x8_t)vsubl_u8(*(uint8x8_t *)v385.i8, *(uint8x8_t *)v384.i8), 1uLL);
  v2001 = vshrq_n_s16((int16x8_t)vsubl_high_u8(v385, v384), 1uLL);
  v2016 = vshrq_n_s16((int16x8_t)vsubl_u8(*(uint8x8_t *)v386.i8, *(uint8x8_t *)v387.i8), 1uLL);
  v2017 = vshrq_n_s16((int16x8_t)vsubl_high_u8(v386, v387), 1uLL);
  v1952 = vmulq_s16(v2000, v2000);
  v1953 = vmulq_s16(v2001, v2001);
  v1984 = vmulq_s16(v2016, v2016);
  v1985 = vmulq_s16(v2017, v2017);
  v1968 = vmulq_s16(v2000, v2016);
  v1969 = vmulq_s16(v2001, v2017);
  if (!v294)
    goto LABEL_38;
LABEL_32:
  v388 = (int8x16_t *)(v294 + v4);
  if (v294 + v4 >= (unint64_t)&v1986 || (v389 = &v1938, &v1938 >= (int16x8_t *)&v388[8]))
  {
    v392.i64[0] = 0x101010101010101;
    v392.i64[1] = 0x101010101010101;
    v393 = vandq_s8(vuzp1q_s8((int8x16_t)vcgtq_s16(v1940, v1972), (int8x16_t)vcgtq_s16(v1941, v1973)), v392);
    *v388 = vandq_s8(vuzp1q_s8((int8x16_t)vcgtq_s16(v1938, v1970), (int8x16_t)vcgtq_s16(v1939, v1971)), v392);
    v388[1] = v393;
    v394 = vandq_s8(vuzp1q_s8((int8x16_t)vcgtq_s16(v1944, v1976), (int8x16_t)vcgtq_s16(v1945, v1977)), v392);
    v388[2] = vandq_s8(vuzp1q_s8((int8x16_t)vcgtq_s16(v1942, v1974), (int8x16_t)vcgtq_s16(v1943, v1975)), v392);
    v388[3] = v394;
    v395 = vandq_s8(vuzp1q_s8((int8x16_t)vcgtq_s16(v1948, v1980), (int8x16_t)vcgtq_s16(v1949, v1981)), v392);
    v388[4] = vandq_s8(vuzp1q_s8((int8x16_t)vcgtq_s16(v1946, v1978), (int8x16_t)vcgtq_s16(v1947, v1979)), v392);
    v388[5] = v395;
    v335 = vuzp1q_s8((int8x16_t)vcgtq_s16(v1952, v1984), (int8x16_t)vcgtq_s16(v1953, v1985));
    v388[6] = vandq_s8(vuzp1q_s8((int8x16_t)vcgtq_s16(v1950, v1982), (int8x16_t)vcgtq_s16(v1951, v1983)), v392);
    v388[7] = vandq_s8(v335, v392);
  }
  else
  {
    v390 = v294 + v4;
    for (i = 1920; i != 2048; ++i)
    {
      *(_BYTE *)(v390 + i - 1920) = v389->i16[0] > v389[32].i16[0];
      v389 = (int16x8_t *)((char *)v389 + 2);
    }
  }
LABEL_38:
  v396 = v2[1] + 8 * v4;
  v397 = (_DWORD *)(v396 + 4);
  if (v396 + 1016 >= v396 && v396 + 1020 >= (unint64_t)v397)
  {
    v400 = v1746;
    v401 = v1762;
    v2021.val[0] = (float32x4_t)vmovl_s16(*(int16x4_t *)v1746.i8);
    v2021.val[1] = (float32x4_t)vmovl_s16(*(int16x4_t *)v1762.i8);
    v402 = (float *)(v2[1] + 8 * v4);
    vst2q_f32(v402, v2021);
    v402 += 8;
    v2021.val[0] = (float32x4_t)vmovl_high_s16(v400);
    v2021.val[1] = (float32x4_t)vmovl_high_s16(v401);
    vst2q_f32(v402, v2021);
    v403 = v1763;
    v2021.val[0] = (float32x4_t)vmovl_high_s16(v1747);
    v2025.val[0] = (float32x4_t)vmovl_s16(*(int16x4_t *)v1747.i8);
    v2025.val[1] = (float32x4_t)vmovl_s16(*(int16x4_t *)v1763.i8);
    v404 = (float *)(v396 + 64);
    vst2q_f32(v404, v2025);
    v2021.val[1] = (float32x4_t)vmovl_high_s16(v403);
    v405 = (float *)(v396 + 96);
    vst2q_f32(v405, v2021);
    v406 = v1764;
    v2021.val[0] = (float32x4_t)vmovl_high_s16(v1748);
    v2025.val[0] = (float32x4_t)vmovl_s16(*(int16x4_t *)v1748.i8);
    v2025.val[1] = (float32x4_t)vmovl_s16(*(int16x4_t *)v1764.i8);
    v407 = (float *)(v396 + 128);
    vst2q_f32(v407, v2025);
    v2021.val[1] = (float32x4_t)vmovl_high_s16(v406);
    v408 = (float *)(v396 + 160);
    vst2q_f32(v408, v2021);
    v409 = v1765;
    v2021.val[0] = (float32x4_t)vmovl_high_s16(v1749);
    v2025.val[0] = (float32x4_t)vmovl_s16(*(int16x4_t *)v1749.i8);
    v2025.val[1] = (float32x4_t)vmovl_s16(*(int16x4_t *)v1765.i8);
    v410 = (float *)(v396 + 192);
    vst2q_f32(v410, v2025);
    v2021.val[1] = (float32x4_t)vmovl_high_s16(v409);
    v411 = (float *)(v396 + 224);
    vst2q_f32(v411, v2021);
    v412 = v1766;
    v2021.val[0] = (float32x4_t)vmovl_high_s16(v1750);
    v2025.val[0] = (float32x4_t)vmovl_s16(*(int16x4_t *)v1750.i8);
    v2025.val[1] = (float32x4_t)vmovl_s16(*(int16x4_t *)v1766.i8);
    v413 = (float *)(v396 + 256);
    vst2q_f32(v413, v2025);
    v2021.val[1] = (float32x4_t)vmovl_high_s16(v412);
    v414 = (float *)(v396 + 288);
    vst2q_f32(v414, v2021);
    v415 = v1767;
    v2021.val[0] = (float32x4_t)vmovl_high_s16(v1751);
    v2025.val[0] = (float32x4_t)vmovl_s16(*(int16x4_t *)v1751.i8);
    v2025.val[1] = (float32x4_t)vmovl_s16(*(int16x4_t *)v1767.i8);
    v416 = (float *)(v396 + 320);
    vst2q_f32(v416, v2025);
    v2021.val[1] = (float32x4_t)vmovl_high_s16(v415);
    v417 = (float *)(v396 + 352);
    vst2q_f32(v417, v2021);
    v418 = v1768;
    v2021.val[0] = (float32x4_t)vmovl_high_s16(v1752);
    v2025.val[0] = (float32x4_t)vmovl_s16(*(int16x4_t *)v1752.i8);
    v2025.val[1] = (float32x4_t)vmovl_s16(*(int16x4_t *)v1768.i8);
    v419 = (float *)(v396 + 384);
    vst2q_f32(v419, v2025);
    v2021.val[1] = (float32x4_t)vmovl_high_s16(v418);
    v420 = (float *)(v396 + 416);
    vst2q_f32(v420, v2021);
    v421 = v1769;
    v2021.val[0] = (float32x4_t)vmovl_high_s16(v1753);
    v2025.val[0] = (float32x4_t)vmovl_s16(*(int16x4_t *)v1753.i8);
    v2025.val[1] = (float32x4_t)vmovl_s16(*(int16x4_t *)v1769.i8);
    v422 = (float *)(v396 + 448);
    vst2q_f32(v422, v2025);
    v2021.val[1] = (float32x4_t)vmovl_high_s16(v421);
    v423 = (float *)(v396 + 480);
    vst2q_f32(v423, v2021);
    v424 = v1770;
    v2021.val[0] = (float32x4_t)vmovl_high_s16(v1754);
    v2025.val[0] = (float32x4_t)vmovl_s16(*(int16x4_t *)v1754.i8);
    v2025.val[1] = (float32x4_t)vmovl_s16(*(int16x4_t *)v1770.i8);
    v425 = (float *)(v396 + 512);
    vst2q_f32(v425, v2025);
    v2021.val[1] = (float32x4_t)vmovl_high_s16(v424);
    v426 = (float *)(v396 + 544);
    vst2q_f32(v426, v2021);
    v427 = v1771;
    v2021.val[0] = (float32x4_t)vmovl_high_s16(v1755);
    v2025.val[0] = (float32x4_t)vmovl_s16(*(int16x4_t *)v1755.i8);
    v2025.val[1] = (float32x4_t)vmovl_s16(*(int16x4_t *)v1771.i8);
    v428 = (float *)(v396 + 576);
    vst2q_f32(v428, v2025);
    v2021.val[1] = (float32x4_t)vmovl_high_s16(v427);
    v429 = (float *)(v396 + 608);
    vst2q_f32(v429, v2021);
    v430 = v1772;
    v2021.val[0] = (float32x4_t)vmovl_high_s16(v1756);
    v2025.val[0] = (float32x4_t)vmovl_s16(*(int16x4_t *)v1756.i8);
    v2025.val[1] = (float32x4_t)vmovl_s16(*(int16x4_t *)v1772.i8);
    v431 = (float *)(v396 + 640);
    vst2q_f32(v431, v2025);
    v2021.val[1] = (float32x4_t)vmovl_high_s16(v430);
    v432 = (float *)(v396 + 672);
    vst2q_f32(v432, v2021);
    v433 = v1773;
    v2021.val[0] = (float32x4_t)vmovl_high_s16(v1757);
    v2025.val[0] = (float32x4_t)vmovl_s16(*(int16x4_t *)v1757.i8);
    v2025.val[1] = (float32x4_t)vmovl_s16(*(int16x4_t *)v1773.i8);
    v434 = (float *)(v396 + 704);
    vst2q_f32(v434, v2025);
    v2021.val[1] = (float32x4_t)vmovl_high_s16(v433);
    v435 = (float *)(v396 + 736);
    vst2q_f32(v435, v2021);
    v436 = v1774;
    v2021.val[0] = (float32x4_t)vmovl_high_s16(v1758);
    v2025.val[0] = (float32x4_t)vmovl_s16(*(int16x4_t *)v1758.i8);
    v2025.val[1] = (float32x4_t)vmovl_s16(*(int16x4_t *)v1774.i8);
    v437 = (float *)(v396 + 768);
    vst2q_f32(v437, v2025);
    v2021.val[1] = (float32x4_t)vmovl_high_s16(v436);
    v438 = (float *)(v396 + 800);
    vst2q_f32(v438, v2021);
    v439 = v1775;
    v2021.val[0] = (float32x4_t)vmovl_high_s16(v1759);
    v2025.val[0] = (float32x4_t)vmovl_s16(*(int16x4_t *)v1759.i8);
    v2025.val[1] = (float32x4_t)vmovl_s16(*(int16x4_t *)v1775.i8);
    v440 = (float *)(v396 + 832);
    vst2q_f32(v440, v2025);
    v2021.val[1] = (float32x4_t)vmovl_high_s16(v439);
    v441 = (float *)(v396 + 864);
    vst2q_f32(v441, v2021);
    v442 = v1776;
    v2021.val[0] = (float32x4_t)vmovl_high_s16(v1760);
    v2025.val[0] = (float32x4_t)vmovl_s16(*(int16x4_t *)v1760.i8);
    v2025.val[1] = (float32x4_t)vmovl_s16(*(int16x4_t *)v1776.i8);
    v443 = (float *)(v396 + 896);
    vst2q_f32(v443, v2025);
    v2021.val[1] = (float32x4_t)vmovl_high_s16(v442);
    v444 = (float *)(v396 + 928);
    vst2q_f32(v444, v2021);
    v445 = v1777;
    v335 = (int8x16_t)vmovl_high_s16(v1761);
    v2025.val[0] = (float32x4_t)vmovl_s16(*(int16x4_t *)v1761.i8);
    v2025.val[1] = (float32x4_t)vmovl_s16(*(int16x4_t *)v1777.i8);
    v446 = (float *)(v396 + 960);
    vst2q_f32(v446, v2025);
    v2021.val[1] = (float32x4_t)vmovl_high_s16(v445);
    v447 = (float *)(v396 + 992);
    vst2q_f32(v447, *(float32x4x2_t *)v335.i8);
  }
  else
  {
    for (j = 0; j != 128; ++j)
    {
      *(v397 - 1) = v1746.i16[j];
      *v397 = v1762.i16[j];
      v397 += 2;
    }
  }
  v448 = v2[2] + 8 * v4;
  v449 = (_DWORD *)(v448 + 4);
  if (v448 + 1016 >= v448 && v448 + 1020 >= (unint64_t)v449)
  {
    v452 = v1826;
    v453 = v1842;
    v2022.val[0] = (float32x4_t)vmovl_s16(*(int16x4_t *)v1826.i8);
    v2022.val[1] = (float32x4_t)vmovl_s16(*(int16x4_t *)v1842.i8);
    v454 = (float *)(v2[2] + 8 * v4);
    vst2q_f32(v454, v2022);
    v454 += 8;
    v2022.val[0] = (float32x4_t)vmovl_high_s16(v452);
    v2022.val[1] = (float32x4_t)vmovl_high_s16(v453);
    vst2q_f32(v454, v2022);
    v455 = vmovl_high_s16(v1827);
    v2022.val[1] = (float32x4_t)v1843;
    v2026.val[0] = (float32x4_t)vmovl_s16(*(int16x4_t *)v1827.i8);
    v2026.val[1] = (float32x4_t)vmovl_s16(*(int16x4_t *)v1843.i8);
    v456 = (float *)(v448 + 64);
    vst2q_f32(v456, v2026);
    v2022.val[0] = (float32x4_t)vmovl_high_s16((int16x8_t)v2022.val[1]);
    v457 = (float *)(v448 + 96);
    vst2q_f32(v457, v2022);
    v458 = vmovl_high_s16(v1828);
    v2022.val[1] = (float32x4_t)v1844;
    v2026.val[0] = (float32x4_t)vmovl_s16(*(int16x4_t *)v1828.i8);
    v2026.val[1] = (float32x4_t)vmovl_s16(*(int16x4_t *)v1844.i8);
    v459 = (float *)(v448 + 128);
    vst2q_f32(v459, v2026);
    v2022.val[0] = (float32x4_t)vmovl_high_s16((int16x8_t)v2022.val[1]);
    v460 = (float *)(v448 + 160);
    vst2q_f32(v460, v2022);
    v461 = vmovl_high_s16(v1829);
    v2022.val[1] = (float32x4_t)v1845;
    v2026.val[0] = (float32x4_t)vmovl_s16(*(int16x4_t *)v1829.i8);
    v2026.val[1] = (float32x4_t)vmovl_s16(*(int16x4_t *)v1845.i8);
    v462 = (float *)(v448 + 192);
    vst2q_f32(v462, v2026);
    v2022.val[0] = (float32x4_t)vmovl_high_s16((int16x8_t)v2022.val[1]);
    v463 = (float *)(v448 + 224);
    vst2q_f32(v463, v2022);
    v464 = vmovl_high_s16(v1830);
    v2022.val[1] = (float32x4_t)v1846;
    v2026.val[0] = (float32x4_t)vmovl_s16(*(int16x4_t *)v1830.i8);
    v2026.val[1] = (float32x4_t)vmovl_s16(*(int16x4_t *)v1846.i8);
    v465 = (float *)(v448 + 256);
    vst2q_f32(v465, v2026);
    v2022.val[0] = (float32x4_t)vmovl_high_s16((int16x8_t)v2022.val[1]);
    v466 = (float *)(v448 + 288);
    vst2q_f32(v466, v2022);
    v467 = vmovl_high_s16(v1831);
    v2022.val[1] = (float32x4_t)v1847;
    v2026.val[0] = (float32x4_t)vmovl_s16(*(int16x4_t *)v1831.i8);
    v2026.val[1] = (float32x4_t)vmovl_s16(*(int16x4_t *)v1847.i8);
    v468 = (float *)(v448 + 320);
    vst2q_f32(v468, v2026);
    v2022.val[0] = (float32x4_t)vmovl_high_s16((int16x8_t)v2022.val[1]);
    v469 = (float *)(v448 + 352);
    vst2q_f32(v469, v2022);
    v470 = vmovl_high_s16(v1832);
    v2022.val[1] = (float32x4_t)v1848;
    v2026.val[0] = (float32x4_t)vmovl_s16(*(int16x4_t *)v1832.i8);
    v2026.val[1] = (float32x4_t)vmovl_s16(*(int16x4_t *)v1848.i8);
    v471 = (float *)(v448 + 384);
    vst2q_f32(v471, v2026);
    v2022.val[0] = (float32x4_t)vmovl_high_s16((int16x8_t)v2022.val[1]);
    v472 = (float *)(v448 + 416);
    vst2q_f32(v472, v2022);
    v473 = vmovl_high_s16(v1833);
    v2022.val[1] = (float32x4_t)v1849;
    v2026.val[0] = (float32x4_t)vmovl_s16(*(int16x4_t *)v1833.i8);
    v2026.val[1] = (float32x4_t)vmovl_s16(*(int16x4_t *)v1849.i8);
    v474 = (float *)(v448 + 448);
    vst2q_f32(v474, v2026);
    v2022.val[0] = (float32x4_t)vmovl_high_s16((int16x8_t)v2022.val[1]);
    v475 = (float *)(v448 + 480);
    vst2q_f32(v475, v2022);
    v476 = vmovl_high_s16(v1834);
    v2022.val[1] = (float32x4_t)v1850;
    v2026.val[0] = (float32x4_t)vmovl_s16(*(int16x4_t *)v1834.i8);
    v2026.val[1] = (float32x4_t)vmovl_s16(*(int16x4_t *)v1850.i8);
    v477 = (float *)(v448 + 512);
    vst2q_f32(v477, v2026);
    v2022.val[0] = (float32x4_t)vmovl_high_s16((int16x8_t)v2022.val[1]);
    v478 = (float *)(v448 + 544);
    vst2q_f32(v478, v2022);
    v479 = vmovl_high_s16(v1835);
    v2022.val[1] = (float32x4_t)v1851;
    v2026.val[0] = (float32x4_t)vmovl_s16(*(int16x4_t *)v1835.i8);
    v2026.val[1] = (float32x4_t)vmovl_s16(*(int16x4_t *)v1851.i8);
    v480 = (float *)(v448 + 576);
    vst2q_f32(v480, v2026);
    v2022.val[0] = (float32x4_t)vmovl_high_s16((int16x8_t)v2022.val[1]);
    v481 = (float *)(v448 + 608);
    vst2q_f32(v481, v2022);
    v482 = vmovl_high_s16(v1836);
    v2022.val[1] = (float32x4_t)v1852;
    v2026.val[0] = (float32x4_t)vmovl_s16(*(int16x4_t *)v1836.i8);
    v2026.val[1] = (float32x4_t)vmovl_s16(*(int16x4_t *)v1852.i8);
    v483 = (float *)(v448 + 640);
    vst2q_f32(v483, v2026);
    v2022.val[0] = (float32x4_t)vmovl_high_s16((int16x8_t)v2022.val[1]);
    v484 = (float *)(v448 + 672);
    vst2q_f32(v484, v2022);
    v485 = vmovl_high_s16(v1837);
    v2022.val[1] = (float32x4_t)v1853;
    v2026.val[0] = (float32x4_t)vmovl_s16(*(int16x4_t *)v1837.i8);
    v2026.val[1] = (float32x4_t)vmovl_s16(*(int16x4_t *)v1853.i8);
    v486 = (float *)(v448 + 704);
    vst2q_f32(v486, v2026);
    v2022.val[0] = (float32x4_t)vmovl_high_s16((int16x8_t)v2022.val[1]);
    v487 = (float *)(v448 + 736);
    vst2q_f32(v487, v2022);
    v488 = vmovl_high_s16(v1838);
    v2022.val[1] = (float32x4_t)v1854;
    v2026.val[0] = (float32x4_t)vmovl_s16(*(int16x4_t *)v1838.i8);
    v2026.val[1] = (float32x4_t)vmovl_s16(*(int16x4_t *)v1854.i8);
    v489 = (float *)(v448 + 768);
    vst2q_f32(v489, v2026);
    v2022.val[0] = (float32x4_t)vmovl_high_s16((int16x8_t)v2022.val[1]);
    v490 = (float *)(v448 + 800);
    vst2q_f32(v490, v2022);
    v491 = vmovl_high_s16(v1839);
    v2022.val[1] = (float32x4_t)v1855;
    v2026.val[0] = (float32x4_t)vmovl_s16(*(int16x4_t *)v1839.i8);
    v2026.val[1] = (float32x4_t)vmovl_s16(*(int16x4_t *)v1855.i8);
    v492 = (float *)(v448 + 832);
    vst2q_f32(v492, v2026);
    v2022.val[0] = (float32x4_t)vmovl_high_s16((int16x8_t)v2022.val[1]);
    v493 = (float *)(v448 + 864);
    vst2q_f32(v493, v2022);
    v494 = vmovl_high_s16(v1840);
    v2022.val[1] = (float32x4_t)v1856;
    v2026.val[0] = (float32x4_t)vmovl_s16(*(int16x4_t *)v1840.i8);
    v2026.val[1] = (float32x4_t)vmovl_s16(*(int16x4_t *)v1856.i8);
    v495 = (float *)(v448 + 896);
    vst2q_f32(v495, v2026);
    v2022.val[0] = (float32x4_t)vmovl_high_s16((int16x8_t)v2022.val[1]);
    v496 = (float *)(v448 + 928);
    vst2q_f32(v496, v2022);
    v497 = vmovl_high_s16(v1841);
    v2022.val[1] = (float32x4_t)v1857;
    v2026.val[0] = (float32x4_t)vmovl_s16(*(int16x4_t *)v1841.i8);
    v2026.val[1] = (float32x4_t)vmovl_s16(*(int16x4_t *)v1857.i8);
    v498 = (float *)(v448 + 960);
    vst2q_f32(v498, v2026);
    v335 = (int8x16_t)vmovl_high_s16((int16x8_t)v2022.val[1]);
    v499 = (float *)(v448 + 992);
    vst2q_f32(v499, *(float32x4x2_t *)(&v335 - 1));
  }
  else
  {
    for (k = 0; k != 128; ++k)
    {
      *(v449 - 1) = v1826.i16[k];
      *v449 = v1842.i16[k];
      v449 += 2;
    }
  }
  v500 = v2[3] + 8 * v4;
  v501 = (_DWORD *)(v500 + 4);
  if (v500 + 1016 >= v500 && v500 + 1020 >= (unint64_t)v501)
  {
    v504 = v1906;
    v505 = v1922;
    v2023.val[0] = (float32x4_t)vmovl_s16(*(int16x4_t *)v1906.i8);
    v2023.val[1] = (float32x4_t)vmovl_s16(*(int16x4_t *)v1922.i8);
    v506 = (float *)(v2[3] + 8 * v4);
    vst2q_f32(v506, v2023);
    v506 += 8;
    v2023.val[0] = (float32x4_t)vmovl_high_s16(v504);
    v2023.val[1] = (float32x4_t)vmovl_high_s16(v505);
    vst2q_f32(v506, v2023);
    v507 = vmovl_high_s16(v1907);
    v2023.val[1] = (float32x4_t)v1923;
    v2027.val[0] = (float32x4_t)vmovl_s16(*(int16x4_t *)v1907.i8);
    v2027.val[1] = (float32x4_t)vmovl_s16(*(int16x4_t *)v1923.i8);
    v508 = (float *)(v500 + 64);
    vst2q_f32(v508, v2027);
    v2023.val[0] = (float32x4_t)vmovl_high_s16((int16x8_t)v2023.val[1]);
    v509 = (float *)(v500 + 96);
    vst2q_f32(v509, v2023);
    v510 = vmovl_high_s16(v1908);
    v2023.val[1] = (float32x4_t)v1924;
    v2027.val[0] = (float32x4_t)vmovl_s16(*(int16x4_t *)v1908.i8);
    v2027.val[1] = (float32x4_t)vmovl_s16(*(int16x4_t *)v1924.i8);
    v511 = (float *)(v500 + 128);
    vst2q_f32(v511, v2027);
    v2023.val[0] = (float32x4_t)vmovl_high_s16((int16x8_t)v2023.val[1]);
    v512 = (float *)(v500 + 160);
    vst2q_f32(v512, v2023);
    v513 = vmovl_high_s16(v1909);
    v2023.val[1] = (float32x4_t)v1925;
    v2027.val[0] = (float32x4_t)vmovl_s16(*(int16x4_t *)v1909.i8);
    v2027.val[1] = (float32x4_t)vmovl_s16(*(int16x4_t *)v1925.i8);
    v514 = (float *)(v500 + 192);
    vst2q_f32(v514, v2027);
    v2023.val[0] = (float32x4_t)vmovl_high_s16((int16x8_t)v2023.val[1]);
    v515 = (float *)(v500 + 224);
    vst2q_f32(v515, v2023);
    v516 = vmovl_high_s16(v1910);
    v2023.val[1] = (float32x4_t)v1926;
    v2027.val[0] = (float32x4_t)vmovl_s16(*(int16x4_t *)v1910.i8);
    v2027.val[1] = (float32x4_t)vmovl_s16(*(int16x4_t *)v1926.i8);
    v517 = (float *)(v500 + 256);
    vst2q_f32(v517, v2027);
    v2023.val[0] = (float32x4_t)vmovl_high_s16((int16x8_t)v2023.val[1]);
    v518 = (float *)(v500 + 288);
    vst2q_f32(v518, v2023);
    v519 = vmovl_high_s16(v1911);
    v2023.val[1] = (float32x4_t)v1927;
    v2027.val[0] = (float32x4_t)vmovl_s16(*(int16x4_t *)v1911.i8);
    v2027.val[1] = (float32x4_t)vmovl_s16(*(int16x4_t *)v1927.i8);
    v520 = (float *)(v500 + 320);
    vst2q_f32(v520, v2027);
    v2023.val[0] = (float32x4_t)vmovl_high_s16((int16x8_t)v2023.val[1]);
    v521 = (float *)(v500 + 352);
    vst2q_f32(v521, v2023);
    v522 = vmovl_high_s16(v1912);
    v2023.val[1] = (float32x4_t)v1928;
    v2027.val[0] = (float32x4_t)vmovl_s16(*(int16x4_t *)v1912.i8);
    v2027.val[1] = (float32x4_t)vmovl_s16(*(int16x4_t *)v1928.i8);
    v523 = (float *)(v500 + 384);
    vst2q_f32(v523, v2027);
    v2023.val[0] = (float32x4_t)vmovl_high_s16((int16x8_t)v2023.val[1]);
    v524 = (float *)(v500 + 416);
    vst2q_f32(v524, v2023);
    v525 = vmovl_high_s16(v1913);
    v2023.val[1] = (float32x4_t)v1929;
    v2027.val[0] = (float32x4_t)vmovl_s16(*(int16x4_t *)v1913.i8);
    v2027.val[1] = (float32x4_t)vmovl_s16(*(int16x4_t *)v1929.i8);
    v526 = (float *)(v500 + 448);
    vst2q_f32(v526, v2027);
    v2023.val[0] = (float32x4_t)vmovl_high_s16((int16x8_t)v2023.val[1]);
    v527 = (float *)(v500 + 480);
    vst2q_f32(v527, v2023);
    v528 = vmovl_high_s16(v1914);
    v2023.val[1] = (float32x4_t)v1930;
    v2027.val[0] = (float32x4_t)vmovl_s16(*(int16x4_t *)v1914.i8);
    v2027.val[1] = (float32x4_t)vmovl_s16(*(int16x4_t *)v1930.i8);
    v529 = (float *)(v500 + 512);
    vst2q_f32(v529, v2027);
    v2023.val[0] = (float32x4_t)vmovl_high_s16((int16x8_t)v2023.val[1]);
    v530 = (float *)(v500 + 544);
    vst2q_f32(v530, v2023);
    v531 = vmovl_high_s16(v1915);
    v2023.val[1] = (float32x4_t)v1931;
    v2027.val[0] = (float32x4_t)vmovl_s16(*(int16x4_t *)v1915.i8);
    v2027.val[1] = (float32x4_t)vmovl_s16(*(int16x4_t *)v1931.i8);
    v532 = (float *)(v500 + 576);
    vst2q_f32(v532, v2027);
    v2023.val[0] = (float32x4_t)vmovl_high_s16((int16x8_t)v2023.val[1]);
    v533 = (float *)(v500 + 608);
    vst2q_f32(v533, v2023);
    v534 = vmovl_high_s16(v1916);
    v2023.val[1] = (float32x4_t)v1932;
    v2027.val[0] = (float32x4_t)vmovl_s16(*(int16x4_t *)v1916.i8);
    v2027.val[1] = (float32x4_t)vmovl_s16(*(int16x4_t *)v1932.i8);
    v535 = (float *)(v500 + 640);
    vst2q_f32(v535, v2027);
    v2023.val[0] = (float32x4_t)vmovl_high_s16((int16x8_t)v2023.val[1]);
    v536 = (float *)(v500 + 672);
    vst2q_f32(v536, v2023);
    v537 = vmovl_high_s16(v1917);
    v2023.val[1] = (float32x4_t)v1933;
    v2027.val[0] = (float32x4_t)vmovl_s16(*(int16x4_t *)v1917.i8);
    v2027.val[1] = (float32x4_t)vmovl_s16(*(int16x4_t *)v1933.i8);
    v538 = (float *)(v500 + 704);
    vst2q_f32(v538, v2027);
    v2023.val[0] = (float32x4_t)vmovl_high_s16((int16x8_t)v2023.val[1]);
    v539 = (float *)(v500 + 736);
    vst2q_f32(v539, v2023);
    v540 = vmovl_high_s16(v1918);
    v2023.val[1] = (float32x4_t)v1934;
    v2027.val[0] = (float32x4_t)vmovl_s16(*(int16x4_t *)v1918.i8);
    v2027.val[1] = (float32x4_t)vmovl_s16(*(int16x4_t *)v1934.i8);
    v541 = (float *)(v500 + 768);
    vst2q_f32(v541, v2027);
    v2023.val[0] = (float32x4_t)vmovl_high_s16((int16x8_t)v2023.val[1]);
    v542 = (float *)(v500 + 800);
    vst2q_f32(v542, v2023);
    v543 = vmovl_high_s16(v1919);
    v2023.val[1] = (float32x4_t)v1935;
    v2027.val[0] = (float32x4_t)vmovl_s16(*(int16x4_t *)v1919.i8);
    v2027.val[1] = (float32x4_t)vmovl_s16(*(int16x4_t *)v1935.i8);
    v544 = (float *)(v500 + 832);
    vst2q_f32(v544, v2027);
    v2023.val[0] = (float32x4_t)vmovl_high_s16((int16x8_t)v2023.val[1]);
    v545 = (float *)(v500 + 864);
    vst2q_f32(v545, v2023);
    v546 = vmovl_high_s16(v1920);
    v2023.val[1] = (float32x4_t)v1936;
    v2027.val[0] = (float32x4_t)vmovl_s16(*(int16x4_t *)v1920.i8);
    v2027.val[1] = (float32x4_t)vmovl_s16(*(int16x4_t *)v1936.i8);
    v547 = (float *)(v500 + 896);
    vst2q_f32(v547, v2027);
    v2023.val[0] = (float32x4_t)vmovl_high_s16((int16x8_t)v2023.val[1]);
    v548 = (float *)(v500 + 928);
    vst2q_f32(v548, v2023);
    v549 = vmovl_high_s16(v1921);
    v2023.val[1] = (float32x4_t)v1937;
    v2027.val[0] = (float32x4_t)vmovl_s16(*(int16x4_t *)v1921.i8);
    v2027.val[1] = (float32x4_t)vmovl_s16(*(int16x4_t *)v1937.i8);
    v550 = (float *)(v500 + 960);
    vst2q_f32(v550, v2027);
    v335 = (int8x16_t)vmovl_high_s16((int16x8_t)v2023.val[1]);
    v551 = (float *)(v500 + 992);
    vst2q_f32(v551, *(float32x4x2_t *)(&v335 - 1));
  }
  else
  {
    for (m = 0; m != 128; ++m)
    {
      *(v501 - 1) = v1906.i16[m];
      *v501 = v1922.i16[m];
      v501 += 2;
    }
  }
  v552 = v2[4] + 8 * v4;
  v553 = (_DWORD *)(v552 + 4);
  if (v552 + 1016 >= v552 && v552 + 1020 >= (unint64_t)v553)
  {
    v556 = v1986;
    v557 = v2002;
    v2024.val[0] = (float32x4_t)vmovl_s16(*(int16x4_t *)v1986.i8);
    v2024.val[1] = (float32x4_t)vmovl_s16(*(int16x4_t *)v2002.i8);
    v558 = (float *)(v2[4] + 8 * v4);
    vst2q_f32(v558, v2024);
    v558 += 8;
    v2024.val[0] = (float32x4_t)vmovl_high_s16(v556);
    v2024.val[1] = (float32x4_t)vmovl_high_s16(v557);
    vst2q_f32(v558, v2024);
    v559 = vmovl_high_s16(v1987);
    v2024.val[1] = (float32x4_t)v2003;
    v2028.val[0] = (float32x4_t)vmovl_s16(*(int16x4_t *)v1987.i8);
    v2028.val[1] = (float32x4_t)vmovl_s16(*(int16x4_t *)v2003.i8);
    v560 = (float *)(v552 + 64);
    vst2q_f32(v560, v2028);
    v2024.val[0] = (float32x4_t)vmovl_high_s16((int16x8_t)v2024.val[1]);
    v561 = (float *)(v552 + 96);
    vst2q_f32(v561, v2024);
    v562 = vmovl_high_s16(v1988);
    v2024.val[1] = (float32x4_t)v2004;
    v2028.val[0] = (float32x4_t)vmovl_s16(*(int16x4_t *)v1988.i8);
    v2028.val[1] = (float32x4_t)vmovl_s16(*(int16x4_t *)v2004.i8);
    v563 = (float *)(v552 + 128);
    vst2q_f32(v563, v2028);
    v2024.val[0] = (float32x4_t)vmovl_high_s16((int16x8_t)v2024.val[1]);
    v564 = (float *)(v552 + 160);
    vst2q_f32(v564, v2024);
    v565 = vmovl_high_s16(v1989);
    v2024.val[1] = (float32x4_t)v2005;
    v2028.val[0] = (float32x4_t)vmovl_s16(*(int16x4_t *)v1989.i8);
    v2028.val[1] = (float32x4_t)vmovl_s16(*(int16x4_t *)v2005.i8);
    v566 = (float *)(v552 + 192);
    vst2q_f32(v566, v2028);
    v2024.val[0] = (float32x4_t)vmovl_high_s16((int16x8_t)v2024.val[1]);
    v567 = (float *)(v552 + 224);
    vst2q_f32(v567, v2024);
    v568 = vmovl_high_s16(v1990);
    v2024.val[1] = (float32x4_t)v2006;
    v2028.val[0] = (float32x4_t)vmovl_s16(*(int16x4_t *)v1990.i8);
    v2028.val[1] = (float32x4_t)vmovl_s16(*(int16x4_t *)v2006.i8);
    v569 = (float *)(v552 + 256);
    vst2q_f32(v569, v2028);
    v2024.val[0] = (float32x4_t)vmovl_high_s16((int16x8_t)v2024.val[1]);
    v570 = (float *)(v552 + 288);
    vst2q_f32(v570, v2024);
    v571 = vmovl_high_s16(v1991);
    v2024.val[1] = (float32x4_t)v2007;
    v2028.val[0] = (float32x4_t)vmovl_s16(*(int16x4_t *)v1991.i8);
    v2028.val[1] = (float32x4_t)vmovl_s16(*(int16x4_t *)v2007.i8);
    v572 = (float *)(v552 + 320);
    vst2q_f32(v572, v2028);
    v2024.val[0] = (float32x4_t)vmovl_high_s16((int16x8_t)v2024.val[1]);
    v573 = (float *)(v552 + 352);
    vst2q_f32(v573, v2024);
    v574 = vmovl_high_s16(v1992);
    v2024.val[1] = (float32x4_t)v2008;
    v2028.val[0] = (float32x4_t)vmovl_s16(*(int16x4_t *)v1992.i8);
    v2028.val[1] = (float32x4_t)vmovl_s16(*(int16x4_t *)v2008.i8);
    v575 = (float *)(v552 + 384);
    vst2q_f32(v575, v2028);
    v2024.val[0] = (float32x4_t)vmovl_high_s16((int16x8_t)v2024.val[1]);
    v576 = (float *)(v552 + 416);
    vst2q_f32(v576, v2024);
    v577 = vmovl_high_s16(v1993);
    v2024.val[1] = (float32x4_t)v2009;
    v2028.val[0] = (float32x4_t)vmovl_s16(*(int16x4_t *)v1993.i8);
    v2028.val[1] = (float32x4_t)vmovl_s16(*(int16x4_t *)v2009.i8);
    v578 = (float *)(v552 + 448);
    vst2q_f32(v578, v2028);
    v2024.val[0] = (float32x4_t)vmovl_high_s16((int16x8_t)v2024.val[1]);
    v579 = (float *)(v552 + 480);
    vst2q_f32(v579, v2024);
    v580 = vmovl_high_s16(v1994);
    v2024.val[1] = (float32x4_t)v2010;
    v2028.val[0] = (float32x4_t)vmovl_s16(*(int16x4_t *)v1994.i8);
    v2028.val[1] = (float32x4_t)vmovl_s16(*(int16x4_t *)v2010.i8);
    v581 = (float *)(v552 + 512);
    vst2q_f32(v581, v2028);
    v2024.val[0] = (float32x4_t)vmovl_high_s16((int16x8_t)v2024.val[1]);
    v582 = (float *)(v552 + 544);
    vst2q_f32(v582, v2024);
    v583 = vmovl_high_s16(v1995);
    v2024.val[1] = (float32x4_t)v2011;
    v2028.val[0] = (float32x4_t)vmovl_s16(*(int16x4_t *)v1995.i8);
    v2028.val[1] = (float32x4_t)vmovl_s16(*(int16x4_t *)v2011.i8);
    v584 = (float *)(v552 + 576);
    vst2q_f32(v584, v2028);
    v2024.val[0] = (float32x4_t)vmovl_high_s16((int16x8_t)v2024.val[1]);
    v585 = (float *)(v552 + 608);
    vst2q_f32(v585, v2024);
    v586 = vmovl_high_s16(v1996);
    v2024.val[1] = (float32x4_t)v2012;
    v2028.val[0] = (float32x4_t)vmovl_s16(*(int16x4_t *)v1996.i8);
    v2028.val[1] = (float32x4_t)vmovl_s16(*(int16x4_t *)v2012.i8);
    v587 = (float *)(v552 + 640);
    vst2q_f32(v587, v2028);
    v2024.val[0] = (float32x4_t)vmovl_high_s16((int16x8_t)v2024.val[1]);
    v588 = (float *)(v552 + 672);
    vst2q_f32(v588, v2024);
    v589 = vmovl_high_s16(v1997);
    v2024.val[1] = (float32x4_t)v2013;
    v2028.val[0] = (float32x4_t)vmovl_s16(*(int16x4_t *)v1997.i8);
    v2028.val[1] = (float32x4_t)vmovl_s16(*(int16x4_t *)v2013.i8);
    v590 = (float *)(v552 + 704);
    vst2q_f32(v590, v2028);
    v2024.val[0] = (float32x4_t)vmovl_high_s16((int16x8_t)v2024.val[1]);
    v591 = (float *)(v552 + 736);
    vst2q_f32(v591, v2024);
    v592 = vmovl_high_s16(v1998);
    v2024.val[1] = (float32x4_t)v2014;
    v2028.val[0] = (float32x4_t)vmovl_s16(*(int16x4_t *)v1998.i8);
    v2028.val[1] = (float32x4_t)vmovl_s16(*(int16x4_t *)v2014.i8);
    v593 = (float *)(v552 + 768);
    vst2q_f32(v593, v2028);
    v2024.val[0] = (float32x4_t)vmovl_high_s16((int16x8_t)v2024.val[1]);
    v594 = (float *)(v552 + 800);
    vst2q_f32(v594, v2024);
    v595 = vmovl_high_s16(v1999);
    v2024.val[1] = (float32x4_t)v2015;
    v2028.val[0] = (float32x4_t)vmovl_s16(*(int16x4_t *)v1999.i8);
    v2028.val[1] = (float32x4_t)vmovl_s16(*(int16x4_t *)v2015.i8);
    v596 = (float *)(v552 + 832);
    vst2q_f32(v596, v2028);
    v2024.val[0] = (float32x4_t)vmovl_high_s16((int16x8_t)v2024.val[1]);
    v597 = (float *)(v552 + 864);
    vst2q_f32(v597, v2024);
    v598 = vmovl_high_s16(v2000);
    v2024.val[1] = (float32x4_t)v2016;
    v2028.val[0] = (float32x4_t)vmovl_s16(*(int16x4_t *)v2000.i8);
    v2028.val[1] = (float32x4_t)vmovl_s16(*(int16x4_t *)v2016.i8);
    v599 = (float *)(v552 + 896);
    vst2q_f32(v599, v2028);
    v2024.val[0] = (float32x4_t)vmovl_high_s16((int16x8_t)v2024.val[1]);
    v600 = (float *)(v552 + 928);
    vst2q_f32(v600, v2024);
    v601 = vmovl_high_s16(v2001);
    v2024.val[1] = (float32x4_t)v2017;
    v2028.val[0] = (float32x4_t)vmovl_s16(*(int16x4_t *)v2001.i8);
    v2028.val[1] = (float32x4_t)vmovl_s16(*(int16x4_t *)v2017.i8);
    v602 = (float *)(v552 + 960);
    vst2q_f32(v602, v2028);
    v335 = (int8x16_t)vmovl_high_s16((int16x8_t)v2024.val[1]);
    v603 = (float *)(v552 + 992);
    vst2q_f32(v603, *(float32x4x2_t *)(&v335 - 1));
    v1664 = v5 - 1;
    if ((unint64_t)(v5 - 1) <= 5)
      return result;
    goto LABEL_71;
  }
  for (n = 0; n != 128; ++n)
  {
    *(v553 - 1) = v1986.i16[n];
    *v553 = v2002.i16[n];
    v553 += 2;
  }
  v1664 = v5 - 1;
  if ((unint64_t)(v5 - 1) > 5)
  {
LABEL_71:
    v604 = 0;
    result = v1695;
    v1662 = (8 * v4) | 4;
    v1657 = (2 * v4) | 1;
    v1655 = 2 * v4 + 33;
    v1656 = 2 * v4 + 17;
    v605 = (float32x4_t)vdupq_n_s32(0x3D75C28Fu);
    v606 = (float32x2_t)vdup_n_s32(0x3D75C28Fu);
    v1653 = 2 * v4 + 65;
    v1654 = 2 * v4 + 49;
    v1651 = 2 * v4 + 97;
    v1652 = 2 * v4 + 81;
    v1649 = 2 * v4 + 129;
    v1650 = 2 * v4 + 113;
    v1647 = 2 * v4 + 161;
    v1648 = 2 * v4 + 145;
    v1645 = 2 * v4 + 193;
    v1646 = 2 * v4 + 177;
    v1643 = 2 * v4 + 225;
    v1644 = 2 * v4 + 209;
    v1642 = 2 * v4 + 241;
    v1641 = (int)v4;
    v1660 = 4 * ((int)v4 + 2) + 32;
    v1661 = (int)v4 + 2;
    v607.i64[0] = 0x101010101010101;
    v607.i64[1] = 0x101010101010101;
    v1658 = v4;
    v1659 = 8 * v4;
    v1640 = v4 + 128;
    v1639 = v4 + 32;
    v1638 = v4 + 64;
    v1637 = v4 + 96;
    v608 = &v2018;
    v609 = &v2019;
    v610 = 5;
    v611 = 4;
    v1663 = v3;
    do
    {
      v612 = (v610 - 1) % 5uLL;
      v613 = v1667[v610];
      v614 = v610 << 32;
      v615 = *(_QWORD *)((char *)v3 + (((v610 << 32) - 0x100000000) >> 29));
      v616 = (_BYTE *)v3[(int)v610];
      if (v1666 == 1)
      {
        v617 = (uint8x16_t *)(v615 + 1);
        v618 = (uint8x16_t *)(*(_QWORD *)((char *)v3 + ((v614 + 0x100000000) >> 29)) + 1);
        v619 = &v1698 + 80 * v612;
        v620 = v619 + 16;
        v621 = v619 + 32;
        v335.i8[15] = *v616;
        v622 = (int8x16_t *)(v616 + 1);
        v623 = *v622;
        v624 = v622[1];
        v622 += 2;
        v625 = (uint8x16_t)vextq_s8(v623, v624, 1uLL);
        v626 = (uint8x16_t)vextq_s8(v335, v623, 0xFuLL);
        v627 = *v617++;
        v628 = vshrq_n_s16((int16x8_t)vsubl_u8(*(uint8x8_t *)v626.i8, *(uint8x8_t *)v625.i8), 1uLL);
        v629 = vshrq_n_s16((int16x8_t)vsubl_high_u8(v626, v625), 1uLL);
        v630 = *v618++;
        v619[48] = v628;
        v619[49] = v629;
        v631 = v619 + 50;
        v632 = vshrq_n_s16((int16x8_t)vsubl_u8(*(uint8x8_t *)v627.i8, *(uint8x8_t *)v630.i8), 1uLL);
        v633 = vshrq_n_s16((int16x8_t)vsubl_high_u8(v627, v630), 1uLL);
        v619[64] = v632;
        v619[65] = v633;
        v634 = v619 + 66;
        v635 = *v622++;
        *v619 = vmulq_s16(v628, v628);
        v619[1] = vmulq_s16(v629, v629);
        v619 += 2;
        *v621 = vmulq_s16(v632, v632);
        v621[1] = vmulq_s16(v633, v633);
        v621 += 2;
        *v620 = vmulq_s16(v628, v632);
        v620[1] = vmulq_s16(v629, v633);
        v620 += 2;
        v636 = (uint8x16_t)vextq_s8(v624, v635, 1uLL);
        v637 = (uint8x16_t)vextq_s8(v623, v624, 0xFuLL);
        v638 = *v617++;
        v639 = vshrq_n_s16((int16x8_t)vsubl_u8(*(uint8x8_t *)v637.i8, *(uint8x8_t *)v636.i8), 1uLL);
        v640 = vshrq_n_s16((int16x8_t)vsubl_high_u8(v637, v636), 1uLL);
        v641 = *v618++;
        *v631 = v639;
        v631[1] = v640;
        v631 += 2;
        v642 = vshrq_n_s16((int16x8_t)vsubl_u8(*(uint8x8_t *)v638.i8, *(uint8x8_t *)v641.i8), 1uLL);
        v643 = vshrq_n_s16((int16x8_t)vsubl_high_u8(v638, v641), 1uLL);
        *v634 = v642;
        v634[1] = v643;
        v634 += 2;
        v644 = *v622++;
        *v619 = vmulq_s16(v639, v639);
        v619[1] = vmulq_s16(v640, v640);
        v619 += 2;
        *v621 = vmulq_s16(v642, v642);
        v621[1] = vmulq_s16(v643, v643);
        v621 += 2;
        *v620 = vmulq_s16(v639, v642);
        v620[1] = vmulq_s16(v640, v643);
        v620 += 2;
        v645 = (uint8x16_t)vextq_s8(v635, v644, 1uLL);
        v646 = (uint8x16_t)vextq_s8(v624, v635, 0xFuLL);
        v647 = *v617++;
        v648 = vshrq_n_s16((int16x8_t)vsubl_u8(*(uint8x8_t *)v646.i8, *(uint8x8_t *)v645.i8), 1uLL);
        v649 = vshrq_n_s16((int16x8_t)vsubl_high_u8(v646, v645), 1uLL);
        v650 = *v618++;
        *v631 = v648;
        v631[1] = v649;
        v631 += 2;
        v651 = vshrq_n_s16((int16x8_t)vsubl_u8(*(uint8x8_t *)v647.i8, *(uint8x8_t *)v650.i8), 1uLL);
        v652 = vshrq_n_s16((int16x8_t)vsubl_high_u8(v647, v650), 1uLL);
        *v634 = v651;
        v634[1] = v652;
        v634 += 2;
        v653 = *v622++;
        *v619 = vmulq_s16(v648, v648);
        v619[1] = vmulq_s16(v649, v649);
        v619 += 2;
        *v621 = vmulq_s16(v651, v651);
        v621[1] = vmulq_s16(v652, v652);
        v621 += 2;
        *v620 = vmulq_s16(v648, v651);
        v620[1] = vmulq_s16(v649, v652);
        v620 += 2;
        v654 = (uint8x16_t)vextq_s8(v644, v653, 1uLL);
        v655 = (uint8x16_t)vextq_s8(v635, v644, 0xFuLL);
        v656 = *v617++;
        v657 = vshrq_n_s16((int16x8_t)vsubl_u8(*(uint8x8_t *)v655.i8, *(uint8x8_t *)v654.i8), 1uLL);
        v658 = vshrq_n_s16((int16x8_t)vsubl_high_u8(v655, v654), 1uLL);
        v659 = *v618++;
        *v631 = v657;
        v631[1] = v658;
        v631 += 2;
        v660 = vshrq_n_s16((int16x8_t)vsubl_u8(*(uint8x8_t *)v656.i8, *(uint8x8_t *)v659.i8), 1uLL);
        v661 = vshrq_n_s16((int16x8_t)vsubl_high_u8(v656, v659), 1uLL);
        *v634 = v660;
        v634[1] = v661;
        v634 += 2;
        v662 = *v622++;
        *v619 = vmulq_s16(v657, v657);
        v619[1] = vmulq_s16(v658, v658);
        v619 += 2;
        *v621 = vmulq_s16(v660, v660);
        v621[1] = vmulq_s16(v661, v661);
        v621 += 2;
        *v620 = vmulq_s16(v657, v660);
        v620[1] = vmulq_s16(v658, v661);
        v620 += 2;
        v663 = (uint8x16_t)vextq_s8(v653, v662, 1uLL);
        v664 = (uint8x16_t)vextq_s8(v644, v653, 0xFuLL);
        v665 = *v617++;
        v666 = vshrq_n_s16((int16x8_t)vsubl_u8(*(uint8x8_t *)v664.i8, *(uint8x8_t *)v663.i8), 1uLL);
        v667 = vshrq_n_s16((int16x8_t)vsubl_high_u8(v664, v663), 1uLL);
        v668 = *v618++;
        *v631 = v666;
        v631[1] = v667;
        v631 += 2;
        v669 = vshrq_n_s16((int16x8_t)vsubl_u8(*(uint8x8_t *)v665.i8, *(uint8x8_t *)v668.i8), 1uLL);
        v670 = vshrq_n_s16((int16x8_t)vsubl_high_u8(v665, v668), 1uLL);
        *v634 = v669;
        v634[1] = v670;
        v634 += 2;
        v671 = *v622++;
        *v619 = vmulq_s16(v666, v666);
        v619[1] = vmulq_s16(v667, v667);
        v619 += 2;
        *v621 = vmulq_s16(v669, v669);
        v621[1] = vmulq_s16(v670, v670);
        v621 += 2;
        *v620 = vmulq_s16(v666, v669);
        v620[1] = vmulq_s16(v667, v670);
        v620 += 2;
        v672 = (uint8x16_t)vextq_s8(v662, v671, 1uLL);
        v673 = (uint8x16_t)vextq_s8(v653, v662, 0xFuLL);
        v674 = *v617++;
        v675 = vshrq_n_s16((int16x8_t)vsubl_u8(*(uint8x8_t *)v673.i8, *(uint8x8_t *)v672.i8), 1uLL);
        v676 = vshrq_n_s16((int16x8_t)vsubl_high_u8(v673, v672), 1uLL);
        v677 = *v618++;
        *v631 = v675;
        v631[1] = v676;
        v631 += 2;
        v678 = vshrq_n_s16((int16x8_t)vsubl_u8(*(uint8x8_t *)v674.i8, *(uint8x8_t *)v677.i8), 1uLL);
        v679 = vshrq_n_s16((int16x8_t)vsubl_high_u8(v674, v677), 1uLL);
        *v634 = v678;
        v634[1] = v679;
        v634 += 2;
        v680 = *v622;
        *v619 = vmulq_s16(v675, v675);
        v619[1] = vmulq_s16(v676, v676);
        v619 += 2;
        *v621 = vmulq_s16(v678, v678);
        v621[1] = vmulq_s16(v679, v679);
        v621 += 2;
        *v620 = vmulq_s16(v675, v678);
        v620[1] = vmulq_s16(v676, v679);
        v620 += 2;
        v681 = (uint8x16_t)vextq_s8(v671, v680, 1uLL);
        v682 = (uint8x16_t)vextq_s8(v662, v671, 0xFuLL);
        v683 = *v617;
        v684 = vshrq_n_s16((int16x8_t)vsubl_u8(*(uint8x8_t *)v682.i8, *(uint8x8_t *)v681.i8), 1uLL);
        v685 = vshrq_n_s16((int16x8_t)vsubl_high_u8(v682, v681), 1uLL);
        v686 = *v618;
        *v631 = v684;
        v631[1] = v685;
        v631 += 2;
        v687 = vshrq_n_s16((int16x8_t)vsubl_u8(*(uint8x8_t *)v683.i8, *(uint8x8_t *)v686.i8), 1uLL);
        v688 = vshrq_n_s16((int16x8_t)vsubl_high_u8(v683, v686), 1uLL);
        *v634 = v687;
        v634[1] = v688;
        v634 += 2;
        v689 = v622[1];
        *v619 = vmulq_s16(v684, v684);
        v619[1] = vmulq_s16(v685, v685);
        v619 += 2;
        *v621 = vmulq_s16(v687, v687);
        v621[1] = vmulq_s16(v688, v688);
        v621 += 2;
        *v620 = vmulq_s16(v684, v687);
        v620[1] = vmulq_s16(v685, v688);
        v620 += 2;
        v690 = (uint8x16_t)vextq_s8(v680, v689, 1uLL);
        v691 = (uint8x16_t)vextq_s8(v671, v680, 0xFuLL);
        v692 = v617[1];
        v693 = vshrq_n_s16((int16x8_t)vsubl_u8(*(uint8x8_t *)v691.i8, *(uint8x8_t *)v690.i8), 1uLL);
        v694 = vshrq_n_s16((int16x8_t)vsubl_high_u8(v691, v690), 1uLL);
        v695 = v618[1];
        *v631 = v693;
        v631[1] = v694;
        v696 = vshrq_n_s16((int16x8_t)vsubl_u8(*(uint8x8_t *)v692.i8, *(uint8x8_t *)v695.i8), 1uLL);
        v697 = vshrq_n_s16((int16x8_t)vsubl_high_u8(v692, v695), 1uLL);
        *v634 = v696;
        v634[1] = v697;
        v698 = (int8x16_t)vmulq_s16(v694, v697);
        *v619 = vmulq_s16(v693, v693);
        v619[1] = vmulq_s16(v694, v694);
        *v621 = vmulq_s16(v696, v696);
        v621[1] = vmulq_s16(v697, v697);
        *v620 = vmulq_s16(v693, v696);
        v620[1] = (int16x8_t)v698;
        v699 = 0x1FFFFFFFFFFFFCE0 * (v611 / 5);
        if (v613)
          goto LABEL_76;
      }
      else
      {
        v700 = (uint8x16_t *)(v615 + v1641);
        v701 = (uint8x16_t *)(*(_QWORD *)((char *)v3 + ((v614 + 0x100000000) >> 29)) + v1641);
        v702 = &v1698 + 80 * v612;
        v703 = v702 + 16;
        v704 = v702 + 32;
        v705 = (uint64_t)&v616[v1641 - 8];
        v706.i64[0] = *(_QWORD *)v705;
        v705 += 8;
        v706.i64[1] = v706.i64[0];
        v707 = *(int8x16_t *)v705;
        v708 = *(int8x16_t *)(v705 + 16);
        v705 += 32;
        v709 = (uint8x16_t)vextq_s8(v707, v708, 1uLL);
        v710 = (uint8x16_t)vextq_s8(v706, v707, 0xFuLL);
        v711 = *v700++;
        v712 = vshrq_n_s16((int16x8_t)vsubl_u8(*(uint8x8_t *)v710.i8, *(uint8x8_t *)v709.i8), 1uLL);
        v713 = vshrq_n_s16((int16x8_t)vsubl_high_u8(v710, v709), 1uLL);
        v714 = *v701++;
        v702[48] = v712;
        v702[49] = v713;
        v715 = v702 + 50;
        v716 = vshrq_n_s16((int16x8_t)vsubl_u8(*(uint8x8_t *)v711.i8, *(uint8x8_t *)v714.i8), 1uLL);
        v717 = vshrq_n_s16((int16x8_t)vsubl_high_u8(v711, v714), 1uLL);
        v702[64] = v716;
        v702[65] = v717;
        v718 = v702 + 66;
        v719 = *(int8x16_t *)v705;
        v705 += 16;
        *v702 = vmulq_s16(v712, v712);
        v702[1] = vmulq_s16(v713, v713);
        v702 += 2;
        *v704 = vmulq_s16(v716, v716);
        v704[1] = vmulq_s16(v717, v717);
        v704 += 2;
        *v703 = vmulq_s16(v712, v716);
        v703[1] = vmulq_s16(v713, v717);
        v703 += 2;
        v720 = (uint8x16_t)vextq_s8(v708, v719, 1uLL);
        v721 = (uint8x16_t)vextq_s8(v707, v708, 0xFuLL);
        v722 = *v700++;
        v723 = vshrq_n_s16((int16x8_t)vsubl_u8(*(uint8x8_t *)v721.i8, *(uint8x8_t *)v720.i8), 1uLL);
        v724 = vshrq_n_s16((int16x8_t)vsubl_high_u8(v721, v720), 1uLL);
        v725 = *v701++;
        *v715 = v723;
        v715[1] = v724;
        v715 += 2;
        v726 = vshrq_n_s16((int16x8_t)vsubl_u8(*(uint8x8_t *)v722.i8, *(uint8x8_t *)v725.i8), 1uLL);
        v727 = vshrq_n_s16((int16x8_t)vsubl_high_u8(v722, v725), 1uLL);
        *v718 = v726;
        v718[1] = v727;
        v718 += 2;
        v728 = *(int8x16_t *)v705;
        v705 += 16;
        *v702 = vmulq_s16(v723, v723);
        v702[1] = vmulq_s16(v724, v724);
        v702 += 2;
        *v704 = vmulq_s16(v726, v726);
        v704[1] = vmulq_s16(v727, v727);
        v704 += 2;
        *v703 = vmulq_s16(v723, v726);
        v703[1] = vmulq_s16(v724, v727);
        v703 += 2;
        v729 = (uint8x16_t)vextq_s8(v719, v728, 1uLL);
        v730 = (uint8x16_t)vextq_s8(v708, v719, 0xFuLL);
        v731 = *v700++;
        v732 = vshrq_n_s16((int16x8_t)vsubl_u8(*(uint8x8_t *)v730.i8, *(uint8x8_t *)v729.i8), 1uLL);
        v733 = vshrq_n_s16((int16x8_t)vsubl_high_u8(v730, v729), 1uLL);
        v734 = *v701++;
        *v715 = v732;
        v715[1] = v733;
        v715 += 2;
        v735 = vshrq_n_s16((int16x8_t)vsubl_u8(*(uint8x8_t *)v731.i8, *(uint8x8_t *)v734.i8), 1uLL);
        v736 = vshrq_n_s16((int16x8_t)vsubl_high_u8(v731, v734), 1uLL);
        *v718 = v735;
        v718[1] = v736;
        v718 += 2;
        v737 = *(int8x16_t *)v705;
        v705 += 16;
        *v702 = vmulq_s16(v732, v732);
        v702[1] = vmulq_s16(v733, v733);
        v702 += 2;
        *v704 = vmulq_s16(v735, v735);
        v704[1] = vmulq_s16(v736, v736);
        v704 += 2;
        *v703 = vmulq_s16(v732, v735);
        v703[1] = vmulq_s16(v733, v736);
        v703 += 2;
        v738 = (uint8x16_t)vextq_s8(v728, v737, 1uLL);
        v739 = (uint8x16_t)vextq_s8(v719, v728, 0xFuLL);
        v740 = *v700++;
        v741 = vshrq_n_s16((int16x8_t)vsubl_u8(*(uint8x8_t *)v739.i8, *(uint8x8_t *)v738.i8), 1uLL);
        v742 = vshrq_n_s16((int16x8_t)vsubl_high_u8(v739, v738), 1uLL);
        v743 = *v701++;
        *v715 = v741;
        v715[1] = v742;
        v715 += 2;
        v744 = vshrq_n_s16((int16x8_t)vsubl_u8(*(uint8x8_t *)v740.i8, *(uint8x8_t *)v743.i8), 1uLL);
        v745 = vshrq_n_s16((int16x8_t)vsubl_high_u8(v740, v743), 1uLL);
        *v718 = v744;
        v718[1] = v745;
        v718 += 2;
        v746 = *(int8x16_t *)v705;
        v705 += 16;
        *v702 = vmulq_s16(v741, v741);
        v702[1] = vmulq_s16(v742, v742);
        v702 += 2;
        *v704 = vmulq_s16(v744, v744);
        v704[1] = vmulq_s16(v745, v745);
        v704 += 2;
        *v703 = vmulq_s16(v741, v744);
        v703[1] = vmulq_s16(v742, v745);
        v703 += 2;
        v747 = (uint8x16_t)vextq_s8(v737, v746, 1uLL);
        v748 = (uint8x16_t)vextq_s8(v728, v737, 0xFuLL);
        v749 = *v700++;
        v750 = vshrq_n_s16((int16x8_t)vsubl_u8(*(uint8x8_t *)v748.i8, *(uint8x8_t *)v747.i8), 1uLL);
        v751 = vshrq_n_s16((int16x8_t)vsubl_high_u8(v748, v747), 1uLL);
        v752 = *v701++;
        *v715 = v750;
        v715[1] = v751;
        v715 += 2;
        v753 = vshrq_n_s16((int16x8_t)vsubl_u8(*(uint8x8_t *)v749.i8, *(uint8x8_t *)v752.i8), 1uLL);
        v754 = vshrq_n_s16((int16x8_t)vsubl_high_u8(v749, v752), 1uLL);
        *v718 = v753;
        v718[1] = v754;
        v718 += 2;
        v755 = *(int8x16_t *)v705;
        v705 += 16;
        *v702 = vmulq_s16(v750, v750);
        v702[1] = vmulq_s16(v751, v751);
        v702 += 2;
        *v704 = vmulq_s16(v753, v753);
        v704[1] = vmulq_s16(v754, v754);
        v704 += 2;
        *v703 = vmulq_s16(v750, v753);
        v703[1] = vmulq_s16(v751, v754);
        v703 += 2;
        v756 = (uint8x16_t)vextq_s8(v746, v755, 1uLL);
        v757 = (uint8x16_t)vextq_s8(v737, v746, 0xFuLL);
        v758 = *v700++;
        v759 = vshrq_n_s16((int16x8_t)vsubl_u8(*(uint8x8_t *)v757.i8, *(uint8x8_t *)v756.i8), 1uLL);
        v760 = vshrq_n_s16((int16x8_t)vsubl_high_u8(v757, v756), 1uLL);
        v761 = *v701++;
        *v715 = v759;
        v715[1] = v760;
        v715 += 2;
        v762 = vshrq_n_s16((int16x8_t)vsubl_u8(*(uint8x8_t *)v758.i8, *(uint8x8_t *)v761.i8), 1uLL);
        v763 = vshrq_n_s16((int16x8_t)vsubl_high_u8(v758, v761), 1uLL);
        *v718 = v762;
        v718[1] = v763;
        v718 += 2;
        v764 = *(int8x16_t *)v705;
        *v702 = vmulq_s16(v759, v759);
        v702[1] = vmulq_s16(v760, v760);
        v702 += 2;
        *v704 = vmulq_s16(v762, v762);
        v704[1] = vmulq_s16(v763, v763);
        v704 += 2;
        *v703 = vmulq_s16(v759, v762);
        v703[1] = vmulq_s16(v760, v763);
        v703 += 2;
        v765 = (uint8x16_t)vextq_s8(v755, v764, 1uLL);
        v766 = (uint8x16_t)vextq_s8(v746, v755, 0xFuLL);
        v767 = *v700;
        v768 = vshrq_n_s16((int16x8_t)vsubl_u8(*(uint8x8_t *)v766.i8, *(uint8x8_t *)v765.i8), 1uLL);
        v769 = vshrq_n_s16((int16x8_t)vsubl_high_u8(v766, v765), 1uLL);
        v770 = *v701;
        *v715 = v768;
        v715[1] = v769;
        v715 += 2;
        v771 = vshrq_n_s16((int16x8_t)vsubl_u8(*(uint8x8_t *)v767.i8, *(uint8x8_t *)v770.i8), 1uLL);
        v772 = vshrq_n_s16((int16x8_t)vsubl_high_u8(v767, v770), 1uLL);
        *v718 = v771;
        v718[1] = v772;
        v718 += 2;
        v773 = *(int8x16_t *)(v705 + 16);
        *v702 = vmulq_s16(v768, v768);
        v702[1] = vmulq_s16(v769, v769);
        v702 += 2;
        *v704 = vmulq_s16(v771, v771);
        v704[1] = vmulq_s16(v772, v772);
        v704 += 2;
        *v703 = vmulq_s16(v768, v771);
        v703[1] = vmulq_s16(v769, v772);
        v703 += 2;
        v774 = (uint8x16_t)vextq_s8(v764, v773, 1uLL);
        v775 = (uint8x16_t)vextq_s8(v755, v764, 0xFuLL);
        v776 = v700[1];
        v777 = vshrq_n_s16((int16x8_t)vsubl_u8(*(uint8x8_t *)v775.i8, *(uint8x8_t *)v774.i8), 1uLL);
        v778 = vshrq_n_s16((int16x8_t)vsubl_high_u8(v775, v774), 1uLL);
        v779 = v701[1];
        *v715 = v777;
        v715[1] = v778;
        v780 = vshrq_n_s16((int16x8_t)vsubl_u8(*(uint8x8_t *)v776.i8, *(uint8x8_t *)v779.i8), 1uLL);
        v781 = vshrq_n_s16((int16x8_t)vsubl_high_u8(v776, v779), 1uLL);
        *v718 = v780;
        v718[1] = v781;
        v698 = (int8x16_t)vmulq_s16(v778, v781);
        *v702 = vmulq_s16(v777, v777);
        v702[1] = vmulq_s16(v778, v778);
        *v704 = vmulq_s16(v780, v780);
        v704[1] = vmulq_s16(v781, v781);
        *v703 = vmulq_s16(v777, v780);
        v703[1] = (int16x8_t)v698;
        v699 = 0x1FFFFFFFFFFFFCE0 * (v611 / 5);
        if (v613)
        {
LABEL_76:
          v782 = &v1698 + 80 * v604 + -400 * ((v604 + 4) / 5uLL);
          v783 = (int8x16_t *)(v613 + v1658);
          if (v613 + v1658 >= (unint64_t)&v782[368] || (unint64_t)&v782[320] >= v613 + v1640)
          {
            v787 = &v1698 + 80 * v612;
            v788 = vandq_s8(vuzp1q_s8((int8x16_t)vcgtq_s16(v787[2], v787[34]), (int8x16_t)vcgtq_s16(v787[3], v787[35])), v607);
            *v783 = vandq_s8(vuzp1q_s8((int8x16_t)vcgtq_s16(*v787, v787[32]), (int8x16_t)vcgtq_s16(v787[1], v787[33])), v607);
            v783[1] = v788;
            v789 = (int8x16_t *)(v613 + v1639);
            v790 = vandq_s8(vuzp1q_s8((int8x16_t)vcgtq_s16(v787[6], v787[38]), (int8x16_t)vcgtq_s16(v787[7], v787[39])), v607);
            *v789 = vandq_s8(vuzp1q_s8((int8x16_t)vcgtq_s16(v787[4], v787[36]), (int8x16_t)vcgtq_s16(v787[5], v787[37])), v607);
            v789[1] = v790;
            v791 = (int8x16_t *)(v613 + v1638);
            v792 = vandq_s8(vuzp1q_s8((int8x16_t)vcgtq_s16(v787[10], v787[42]), (int8x16_t)vcgtq_s16(v787[11], v787[43])), v607);
            *v791 = vandq_s8(vuzp1q_s8((int8x16_t)vcgtq_s16(v787[8], v787[40]), (int8x16_t)vcgtq_s16(v787[9], v787[41])), v607);
            v791[1] = v792;
            v793 = (int8x16_t *)(v613 + v1637);
            v794 = vandq_s8(vuzp1q_s8((int8x16_t)vcgtq_s16(v787[14], v787[46]), (int8x16_t)vcgtq_s16(v787[15], v787[47])), v607);
            *v793 = vandq_s8(vuzp1q_s8((int8x16_t)vcgtq_s16(v787[12], v787[44]), (int8x16_t)vcgtq_s16(v787[13], v787[45])), v607);
            v793[1] = v794;
          }
          else
          {
            v784 = 0;
            v785 = (__int16 *)&v608[v699];
            v786 = v613 + v1658;
            do
            {
              *(_BYTE *)(v786 + v784++) = *v785 > v785[256];
              ++v785;
            }
            while (v784 != 128);
          }
        }
      }
      v795 = v2[v610];
      v796 = (_DWORD *)(v795 + v1662);
      if (v795 + v1659 + 1016 >= (unint64_t)(v795 + v1659) && v795 + v1662 + 1016 >= (unint64_t)v796)
      {
        v800 = &v1698 + 80 * v612;
        v801 = v800[48];
        v2020.val[0] = (float32x4_t)vmovl_high_s16(v801);
        v802 = v800[64];
        v2029.val[0] = (float32x4_t)vmovl_s16(*(int16x4_t *)v801.i8);
        v2029.val[1] = (float32x4_t)vmovl_s16(*(int16x4_t *)v802.i8);
        v803 = (float *)(v795 + 4 * v1657);
        v804 = v803 - 1;
        vst2q_f32(v804, v2029);
        v2020.val[1] = (float32x4_t)vmovl_high_s16(v802);
        v803 += 7;
        vst2q_f32(v803, v2020);
        v805 = v800[49];
        v2020.val[0] = (float32x4_t)vmovl_high_s16(v805);
        v806 = v800[65];
        v2029.val[0] = (float32x4_t)vmovl_s16(*(int16x4_t *)v805.i8);
        v2029.val[1] = (float32x4_t)vmovl_s16(*(int16x4_t *)v806.i8);
        v807 = (float *)(v795 + 4 * v1656);
        v808 = v807 - 1;
        vst2q_f32(v808, v2029);
        v2020.val[1] = (float32x4_t)vmovl_high_s16(v806);
        v807 += 7;
        vst2q_f32(v807, v2020);
        v809 = v800[50];
        v2020.val[0] = (float32x4_t)vmovl_high_s16(v809);
        v810 = v800[66];
        v2029.val[0] = (float32x4_t)vmovl_s16(*(int16x4_t *)v809.i8);
        v2029.val[1] = (float32x4_t)vmovl_s16(*(int16x4_t *)v810.i8);
        v811 = (float *)(v795 + 4 * v1655);
        v812 = v811 - 1;
        vst2q_f32(v812, v2029);
        v2020.val[1] = (float32x4_t)vmovl_high_s16(v810);
        v811 += 7;
        vst2q_f32(v811, v2020);
        v813 = v800[51];
        v2020.val[0] = (float32x4_t)vmovl_high_s16(v813);
        v814 = v800[67];
        v2029.val[0] = (float32x4_t)vmovl_s16(*(int16x4_t *)v813.i8);
        v2029.val[1] = (float32x4_t)vmovl_s16(*(int16x4_t *)v814.i8);
        v815 = (float *)(v795 + 4 * v1654);
        v816 = v815 - 1;
        vst2q_f32(v816, v2029);
        v2020.val[1] = (float32x4_t)vmovl_high_s16(v814);
        v815 += 7;
        vst2q_f32(v815, v2020);
        v817 = v800[52];
        v2020.val[0] = (float32x4_t)vmovl_high_s16(v817);
        v818 = v800[68];
        v2029.val[0] = (float32x4_t)vmovl_s16(*(int16x4_t *)v817.i8);
        v2029.val[1] = (float32x4_t)vmovl_s16(*(int16x4_t *)v818.i8);
        v819 = (float *)(v795 + 4 * v1653);
        v820 = v819 - 1;
        vst2q_f32(v820, v2029);
        v2020.val[1] = (float32x4_t)vmovl_high_s16(v818);
        v819 += 7;
        vst2q_f32(v819, v2020);
        v821 = v800[53];
        v2020.val[0] = (float32x4_t)vmovl_high_s16(v821);
        v822 = v800[69];
        v2029.val[0] = (float32x4_t)vmovl_s16(*(int16x4_t *)v821.i8);
        v2029.val[1] = (float32x4_t)vmovl_s16(*(int16x4_t *)v822.i8);
        v823 = (float *)(v795 + 4 * v1652);
        v824 = v823 - 1;
        vst2q_f32(v824, v2029);
        v2020.val[1] = (float32x4_t)vmovl_high_s16(v822);
        v823 += 7;
        vst2q_f32(v823, v2020);
        v825 = v800[54];
        v2020.val[0] = (float32x4_t)vmovl_high_s16(v825);
        v826 = v800[70];
        v2029.val[0] = (float32x4_t)vmovl_s16(*(int16x4_t *)v825.i8);
        v2029.val[1] = (float32x4_t)vmovl_s16(*(int16x4_t *)v826.i8);
        v827 = (float *)(v795 + 4 * v1651);
        v828 = v827 - 1;
        vst2q_f32(v828, v2029);
        v2020.val[1] = (float32x4_t)vmovl_high_s16(v826);
        v827 += 7;
        vst2q_f32(v827, v2020);
        v829 = v800[55];
        v2020.val[0] = (float32x4_t)vmovl_high_s16(v829);
        v830 = v800[71];
        v2029.val[0] = (float32x4_t)vmovl_s16(*(int16x4_t *)v829.i8);
        v2029.val[1] = (float32x4_t)vmovl_s16(*(int16x4_t *)v830.i8);
        v831 = (float *)(v795 + 4 * v1650);
        v832 = v831 - 1;
        vst2q_f32(v832, v2029);
        v2020.val[1] = (float32x4_t)vmovl_high_s16(v830);
        v831 += 7;
        vst2q_f32(v831, v2020);
        v833 = v800[56];
        v2020.val[0] = (float32x4_t)vmovl_high_s16(v833);
        v834 = v800[72];
        v2029.val[0] = (float32x4_t)vmovl_s16(*(int16x4_t *)v833.i8);
        v2029.val[1] = (float32x4_t)vmovl_s16(*(int16x4_t *)v834.i8);
        v835 = (float *)(v795 + 4 * v1649);
        v836 = v835 - 1;
        vst2q_f32(v836, v2029);
        v2020.val[1] = (float32x4_t)vmovl_high_s16(v834);
        v835 += 7;
        vst2q_f32(v835, v2020);
        v837 = v800[57];
        v2020.val[0] = (float32x4_t)vmovl_high_s16(v837);
        v838 = v800[73];
        v2029.val[0] = (float32x4_t)vmovl_s16(*(int16x4_t *)v837.i8);
        v2029.val[1] = (float32x4_t)vmovl_s16(*(int16x4_t *)v838.i8);
        v839 = (float *)(v795 + 4 * v1648);
        v840 = v839 - 1;
        vst2q_f32(v840, v2029);
        v2020.val[1] = (float32x4_t)vmovl_high_s16(v838);
        v839 += 7;
        vst2q_f32(v839, v2020);
        v841 = v800[58];
        v2020.val[0] = (float32x4_t)vmovl_high_s16(v841);
        v842 = v800[74];
        v2029.val[0] = (float32x4_t)vmovl_s16(*(int16x4_t *)v841.i8);
        v2029.val[1] = (float32x4_t)vmovl_s16(*(int16x4_t *)v842.i8);
        v843 = (float *)(v795 + 4 * v1647);
        v844 = v843 - 1;
        vst2q_f32(v844, v2029);
        v2020.val[1] = (float32x4_t)vmovl_high_s16(v842);
        v843 += 7;
        vst2q_f32(v843, v2020);
        v845 = v800[59];
        v2020.val[0] = (float32x4_t)vmovl_high_s16(v845);
        v846 = v800[75];
        v2029.val[0] = (float32x4_t)vmovl_s16(*(int16x4_t *)v845.i8);
        v2029.val[1] = (float32x4_t)vmovl_s16(*(int16x4_t *)v846.i8);
        v847 = (float *)(v795 + 4 * v1646);
        v848 = v847 - 1;
        vst2q_f32(v848, v2029);
        v2020.val[1] = (float32x4_t)vmovl_high_s16(v846);
        v847 += 7;
        vst2q_f32(v847, v2020);
        v849 = v800[60];
        v2020.val[0] = (float32x4_t)vmovl_high_s16(v849);
        v850 = v800[76];
        v2029.val[0] = (float32x4_t)vmovl_s16(*(int16x4_t *)v849.i8);
        v2029.val[1] = (float32x4_t)vmovl_s16(*(int16x4_t *)v850.i8);
        v851 = (float *)(v795 + 4 * v1645);
        v852 = v851 - 1;
        vst2q_f32(v852, v2029);
        v2020.val[1] = (float32x4_t)vmovl_high_s16(v850);
        v851 += 7;
        vst2q_f32(v851, v2020);
        v853 = v800[61];
        v2020.val[0] = (float32x4_t)vmovl_high_s16(v853);
        v854 = v800[77];
        v2029.val[0] = (float32x4_t)vmovl_s16(*(int16x4_t *)v853.i8);
        v2029.val[1] = (float32x4_t)vmovl_s16(*(int16x4_t *)v854.i8);
        v855 = (float *)(v795 + 4 * v1644);
        v856 = v855 - 1;
        vst2q_f32(v856, v2029);
        v2020.val[1] = (float32x4_t)vmovl_high_s16(v854);
        v855 += 7;
        vst2q_f32(v855, v2020);
        v857 = v800[62];
        v2020.val[0] = (float32x4_t)vmovl_high_s16(v857);
        v858 = v800[78];
        v2029.val[0] = (float32x4_t)vmovl_s16(*(int16x4_t *)v857.i8);
        v2029.val[1] = (float32x4_t)vmovl_s16(*(int16x4_t *)v858.i8);
        v859 = (float *)(v795 + 4 * v1643);
        v860 = v859 - 1;
        vst2q_f32(v860, v2029);
        v2020.val[1] = (float32x4_t)vmovl_high_s16(v858);
        v859 += 7;
        vst2q_f32(v859, v2020);
        v861 = v800[63];
        v2020.val[0] = (float32x4_t)vmovl_high_s16(v861);
        v862 = v800[79];
        v2029.val[0] = (float32x4_t)vmovl_s16(*(int16x4_t *)v861.i8);
        v2029.val[1] = (float32x4_t)vmovl_s16(*(int16x4_t *)v862.i8);
        v863 = (float *)(v795 + 4 * v1642);
        v864 = v863 - 1;
        vst2q_f32(v864, v2029);
        v2020.val[1] = (float32x4_t)vmovl_high_s16(v862);
        v863 += 7;
        vst2q_f32(v863, v2020);
      }
      else
      {
        v798 = 0;
        v799 = &v609[v699];
        do
        {
          *(v796 - 1) = *(__int16 *)((char *)v799 + v798);
          *v796 = *(__int16 *)((char *)v799 + v798 + 256);
          v796 += 2;
          v798 += 2;
        }
        while (v798 != 256);
      }
      v865 = (v610 - 5) % 5uLL;
      v866 = &v1698 + 80 * v865;
      v867 = v865 - 4;
      if (v865 < 4)
        v867 = v865 + 1;
      v868 = &v1698 + 80 * v867;
      v869 = -3;
      if (v865 <= 2)
        v869 = 2;
      v870 = &v1698 + 80 * v869 + 80 * v865;
      v871 = 3;
      if (v865 >= 2)
        v871 = -2;
      v872 = &v1698 + 80 * v871 + 80 * v865;
      v873 = v865 - 1;
      v874 = 4;
      if (v610 - 5 != 5 * ((v610 - 5) / 5uLL))
        v874 = v873;
      v875 = &v1698 + 80 * v874;
      v876 = v866[1];
      v877 = v868[1];
      v878 = v870[1];
      v879 = vaddw_s16(vshll_n_s16(*(int16x4_t *)v877.i8, 2uLL), *(int16x4_t *)v876.i8);
      v880 = vaddw_high_s16(vshll_high_n_s16(v877, 2uLL), v876);
      v881 = v872[1];
      v882 = vshll_n_s16(*(int16x4_t *)v870->i8, 1uLL);
      v883 = vshll_high_n_s16(*v870, 1uLL);
      v884 = vshll_n_s16(*(int16x4_t *)v878.i8, 1uLL);
      v885 = vshll_high_n_s16(v878, 1uLL);
      v886 = v875[1];
      v887 = v870[2];
      v888 = v870[3];
      v889 = vaddq_s32(vaddq_s32(vaddw_s16(vaddq_s32(vaddw_s16(vshll_n_s16(*(int16x4_t *)v868->i8, 2uLL), *(int16x4_t *)v866->i8), v882), *(int16x4_t *)v875->i8), vshlq_n_s32(v882, 1uLL)), vshll_n_s16(*(int16x4_t *)v872->i8, 2uLL));
      v890 = vaddq_s32(vaddq_s32(vaddw_high_s16(vaddq_s32(vaddw_high_s16(vshll_high_n_s16(*v868, 2uLL), *v866), v883), *v875), vshlq_n_s32(v883, 1uLL)), vshll_high_n_s16(*v872, 2uLL));
      v891 = vaddq_s32(vaddq_s32(vaddw_s16(vaddq_s32(v879, v884), *(int16x4_t *)v886.i8), vshlq_n_s32(v884, 1uLL)), vshll_n_s16(*(int16x4_t *)v881.i8, 2uLL));
      v892 = vaddq_s32(vaddq_s32(vaddw_high_s16(vaddq_s32(v880, v885), v886), vshlq_n_s32(v885, 1uLL)), vshll_high_n_s16(v881, 2uLL));
      v893 = v866[2];
      v894 = v866[3];
      v895 = v868[2];
      v896 = v868[3];
      v1668[0] = v889;
      v1668[1] = v890;
      v1668[2] = v891;
      v1668[3] = v892;
      v897 = vaddw_s16(vshll_n_s16(*(int16x4_t *)v895.i8, 2uLL), *(int16x4_t *)v893.i8);
      v898 = vaddw_high_s16(vshll_high_n_s16(v895, 2uLL), v893);
      v899 = vaddw_s16(vshll_n_s16(*(int16x4_t *)v896.i8, 2uLL), *(int16x4_t *)v894.i8);
      v900 = vaddw_high_s16(vshll_high_n_s16(v896, 2uLL), v894);
      v901 = v872[2];
      v902 = v872[3];
      v903 = vshll_n_s16(*(int16x4_t *)v887.i8, 1uLL);
      v904 = vshll_high_n_s16(v887, 1uLL);
      v905 = vshll_n_s16(*(int16x4_t *)v888.i8, 1uLL);
      v906 = vshll_high_n_s16(v888, 1uLL);
      v907 = v875[2];
      v908 = v875[3];
      v909 = v870[4];
      v910 = v870[5];
      v911 = vaddq_s32(vaddq_s32(vaddw_s16(vaddq_s32(v897, v903), *(int16x4_t *)v907.i8), vshlq_n_s32(v903, 1uLL)), vshll_n_s16(*(int16x4_t *)v901.i8, 2uLL));
      v912 = vaddq_s32(vaddq_s32(vaddw_high_s16(vaddq_s32(v898, v904), v907), vshlq_n_s32(v904, 1uLL)), vshll_high_n_s16(v901, 2uLL));
      v913 = vaddq_s32(vaddq_s32(vaddw_s16(vaddq_s32(v899, v905), *(int16x4_t *)v908.i8), vshlq_n_s32(v905, 1uLL)), vshll_n_s16(*(int16x4_t *)v902.i8, 2uLL));
      v914 = vaddq_s32(vaddq_s32(vaddw_high_s16(vaddq_s32(v900, v906), v908), vshlq_n_s32(v906, 1uLL)), vshll_high_n_s16(v902, 2uLL));
      v915 = v866[4];
      v916 = v866[5];
      v917 = v868[4];
      v918 = v868[5];
      v1669[0] = v911;
      v1669[1] = v912;
      v1669[2] = v913;
      v1669[3] = v914;
      v919 = vaddw_s16(vshll_n_s16(*(int16x4_t *)v917.i8, 2uLL), *(int16x4_t *)v915.i8);
      v920 = vaddw_high_s16(vshll_high_n_s16(v917, 2uLL), v915);
      v921 = vaddw_s16(vshll_n_s16(*(int16x4_t *)v918.i8, 2uLL), *(int16x4_t *)v916.i8);
      v922 = vaddw_high_s16(vshll_high_n_s16(v918, 2uLL), v916);
      v923 = v872[4];
      v924 = v872[5];
      v925 = vshll_n_s16(*(int16x4_t *)v909.i8, 1uLL);
      v926 = vshll_high_n_s16(v909, 1uLL);
      v927 = vshll_n_s16(*(int16x4_t *)v910.i8, 1uLL);
      v928 = vshll_high_n_s16(v910, 1uLL);
      v929 = v875[4];
      v930 = v875[5];
      v931 = v870[6];
      v932 = v870[7];
      v933 = vaddq_s32(vaddq_s32(vaddw_s16(vaddq_s32(v919, v925), *(int16x4_t *)v929.i8), vshlq_n_s32(v925, 1uLL)), vshll_n_s16(*(int16x4_t *)v923.i8, 2uLL));
      v934 = vaddq_s32(vaddq_s32(vaddw_high_s16(vaddq_s32(v920, v926), v929), vshlq_n_s32(v926, 1uLL)), vshll_high_n_s16(v923, 2uLL));
      v935 = vaddq_s32(vaddq_s32(vaddw_s16(vaddq_s32(v921, v927), *(int16x4_t *)v930.i8), vshlq_n_s32(v927, 1uLL)), vshll_n_s16(*(int16x4_t *)v924.i8, 2uLL));
      v936 = vaddq_s32(vaddq_s32(vaddw_high_s16(vaddq_s32(v922, v928), v930), vshlq_n_s32(v928, 1uLL)), vshll_high_n_s16(v924, 2uLL));
      v937 = v866[6];
      v938 = v866[7];
      v939 = v868[6];
      v940 = v868[7];
      v1670[0] = v933;
      v1670[1] = v934;
      v1670[2] = v935;
      v1670[3] = v936;
      v941 = vaddw_s16(vshll_n_s16(*(int16x4_t *)v939.i8, 2uLL), *(int16x4_t *)v937.i8);
      v942 = vaddw_high_s16(vshll_high_n_s16(v939, 2uLL), v937);
      v943 = vaddw_s16(vshll_n_s16(*(int16x4_t *)v940.i8, 2uLL), *(int16x4_t *)v938.i8);
      v944 = vaddw_high_s16(vshll_high_n_s16(v940, 2uLL), v938);
      v945 = v872[6];
      v946 = v872[7];
      v947 = vshll_n_s16(*(int16x4_t *)v931.i8, 1uLL);
      v948 = vshll_high_n_s16(v931, 1uLL);
      v949 = vshll_n_s16(*(int16x4_t *)v932.i8, 1uLL);
      v950 = vshll_high_n_s16(v932, 1uLL);
      v951 = v875[6];
      v952 = v875[7];
      v953 = v870[8];
      v954 = v870[9];
      v955 = vaddq_s32(vaddq_s32(vaddw_s16(vaddq_s32(v941, v947), *(int16x4_t *)v951.i8), vshlq_n_s32(v947, 1uLL)), vshll_n_s16(*(int16x4_t *)v945.i8, 2uLL));
      v956 = vaddq_s32(vaddq_s32(vaddw_high_s16(vaddq_s32(v942, v948), v951), vshlq_n_s32(v948, 1uLL)), vshll_high_n_s16(v945, 2uLL));
      v957 = vaddq_s32(vaddq_s32(vaddw_s16(vaddq_s32(v943, v949), *(int16x4_t *)v952.i8), vshlq_n_s32(v949, 1uLL)), vshll_n_s16(*(int16x4_t *)v946.i8, 2uLL));
      v958 = vaddq_s32(vaddq_s32(vaddw_high_s16(vaddq_s32(v944, v950), v952), vshlq_n_s32(v950, 1uLL)), vshll_high_n_s16(v946, 2uLL));
      v959 = v866[8];
      v960 = v866[9];
      v961 = v868[8];
      v962 = v868[9];
      v1671[0] = v955;
      v1671[1] = v956;
      v1671[2] = v957;
      v1671[3] = v958;
      v963 = vaddw_s16(vshll_n_s16(*(int16x4_t *)v961.i8, 2uLL), *(int16x4_t *)v959.i8);
      v964 = vaddw_high_s16(vshll_high_n_s16(v961, 2uLL), v959);
      v965 = vaddw_s16(vshll_n_s16(*(int16x4_t *)v962.i8, 2uLL), *(int16x4_t *)v960.i8);
      v966 = vaddw_high_s16(vshll_high_n_s16(v962, 2uLL), v960);
      v967 = v872[8];
      v968 = v872[9];
      v969 = vshll_n_s16(*(int16x4_t *)v953.i8, 1uLL);
      v970 = vshll_high_n_s16(v953, 1uLL);
      v971 = vshll_n_s16(*(int16x4_t *)v954.i8, 1uLL);
      v972 = vshll_high_n_s16(v954, 1uLL);
      v973 = v875[8];
      v974 = v875[9];
      v975 = v870[10];
      v976 = v870[11];
      v977 = vaddq_s32(vaddq_s32(vaddw_s16(vaddq_s32(v963, v969), *(int16x4_t *)v973.i8), vshlq_n_s32(v969, 1uLL)), vshll_n_s16(*(int16x4_t *)v967.i8, 2uLL));
      v978 = vaddq_s32(vaddq_s32(vaddw_high_s16(vaddq_s32(v964, v970), v973), vshlq_n_s32(v970, 1uLL)), vshll_high_n_s16(v967, 2uLL));
      v979 = vaddq_s32(vaddq_s32(vaddw_s16(vaddq_s32(v965, v971), *(int16x4_t *)v974.i8), vshlq_n_s32(v971, 1uLL)), vshll_n_s16(*(int16x4_t *)v968.i8, 2uLL));
      v980 = vaddq_s32(vaddq_s32(vaddw_high_s16(vaddq_s32(v966, v972), v974), vshlq_n_s32(v972, 1uLL)), vshll_high_n_s16(v968, 2uLL));
      v981 = v866[10];
      v982 = v866[11];
      v983 = v868[10];
      v984 = v868[11];
      v1672[0] = v977;
      v1672[1] = v978;
      v1672[2] = v979;
      v1672[3] = v980;
      v985 = vaddw_s16(vshll_n_s16(*(int16x4_t *)v983.i8, 2uLL), *(int16x4_t *)v981.i8);
      v986 = vaddw_high_s16(vshll_high_n_s16(v983, 2uLL), v981);
      v987 = vaddw_s16(vshll_n_s16(*(int16x4_t *)v984.i8, 2uLL), *(int16x4_t *)v982.i8);
      v988 = vaddw_high_s16(vshll_high_n_s16(v984, 2uLL), v982);
      v989 = v872[10];
      v990 = v872[11];
      v991 = vshll_n_s16(*(int16x4_t *)v975.i8, 1uLL);
      v992 = vshll_high_n_s16(v975, 1uLL);
      v993 = vshll_n_s16(*(int16x4_t *)v976.i8, 1uLL);
      v994 = vshll_high_n_s16(v976, 1uLL);
      v995 = v875[10];
      v996 = v875[11];
      v997 = v870[12];
      v998 = v870[13];
      v999 = vaddq_s32(vaddq_s32(vaddw_s16(vaddq_s32(v985, v991), *(int16x4_t *)v995.i8), vshlq_n_s32(v991, 1uLL)), vshll_n_s16(*(int16x4_t *)v989.i8, 2uLL));
      v1000 = vaddq_s32(vaddq_s32(vaddw_high_s16(vaddq_s32(v986, v992), v995), vshlq_n_s32(v992, 1uLL)), vshll_high_n_s16(v989, 2uLL));
      v1001 = vaddq_s32(vaddq_s32(vaddw_s16(vaddq_s32(v987, v993), *(int16x4_t *)v996.i8), vshlq_n_s32(v993, 1uLL)), vshll_n_s16(*(int16x4_t *)v990.i8, 2uLL));
      v1002 = vaddq_s32(vaddq_s32(vaddw_high_s16(vaddq_s32(v988, v994), v996), vshlq_n_s32(v994, 1uLL)), vshll_high_n_s16(v990, 2uLL));
      v1003 = v866[12];
      v1004 = v866[13];
      v1005 = v868[12];
      v1006 = v868[13];
      v1673[0] = v999;
      v1673[1] = v1000;
      v1673[2] = v1001;
      v1673[3] = v1002;
      v1007 = vaddw_s16(vshll_n_s16(*(int16x4_t *)v1005.i8, 2uLL), *(int16x4_t *)v1003.i8);
      v1008 = vaddw_high_s16(vshll_high_n_s16(v1005, 2uLL), v1003);
      v1009 = vaddw_s16(vshll_n_s16(*(int16x4_t *)v1006.i8, 2uLL), *(int16x4_t *)v1004.i8);
      v1010 = vaddw_high_s16(vshll_high_n_s16(v1006, 2uLL), v1004);
      v1011 = v872[12];
      v1012 = v872[13];
      v1013 = vshll_n_s16(*(int16x4_t *)v997.i8, 1uLL);
      v1014 = vshll_high_n_s16(v997, 1uLL);
      v1015 = vshll_n_s16(*(int16x4_t *)v998.i8, 1uLL);
      v1016 = vshll_high_n_s16(v998, 1uLL);
      v1017 = v875[12];
      v1018 = v875[13];
      v1019 = v870[14];
      v1020 = v870[15];
      v1021 = vaddq_s32(vaddq_s32(vaddw_s16(vaddq_s32(v1007, v1013), *(int16x4_t *)v1017.i8), vshlq_n_s32(v1013, 1uLL)), vshll_n_s16(*(int16x4_t *)v1011.i8, 2uLL));
      v1022 = vaddq_s32(vaddq_s32(vaddw_high_s16(vaddq_s32(v1008, v1014), v1017), vshlq_n_s32(v1014, 1uLL)), vshll_high_n_s16(v1011, 2uLL));
      v1023 = vaddq_s32(vaddq_s32(vaddw_s16(vaddq_s32(v1009, v1015), *(int16x4_t *)v1018.i8), vshlq_n_s32(v1015, 1uLL)), vshll_n_s16(*(int16x4_t *)v1012.i8, 2uLL));
      v1024 = vaddq_s32(vaddq_s32(vaddw_high_s16(vaddq_s32(v1010, v1016), v1018), vshlq_n_s32(v1016, 1uLL)), vshll_high_n_s16(v1012, 2uLL));
      v1025 = v866[14];
      v1026 = v866[15];
      v1027 = v868[14];
      v1028 = v868[15];
      v1674[0] = v1021;
      v1674[1] = v1022;
      v1674[2] = v1023;
      v1674[3] = v1024;
      v1029 = vaddw_s16(vshll_n_s16(*(int16x4_t *)v1027.i8, 2uLL), *(int16x4_t *)v1025.i8);
      v1030 = vaddw_high_s16(vshll_high_n_s16(v1027, 2uLL), v1025);
      v1031 = vaddw_s16(vshll_n_s16(*(int16x4_t *)v1028.i8, 2uLL), *(int16x4_t *)v1026.i8);
      v1032 = vaddw_high_s16(vshll_high_n_s16(v1028, 2uLL), v1026);
      v1033 = v872[14];
      v1034 = v872[15];
      v1035 = vshll_n_s16(*(int16x4_t *)v1019.i8, 1uLL);
      v1036 = vshll_high_n_s16(v1019, 1uLL);
      v1037 = vshll_n_s16(*(int16x4_t *)v1020.i8, 1uLL);
      v1038 = vshll_high_n_s16(v1020, 1uLL);
      v1039 = v875[14];
      v1040 = v875[15];
      v1675[0] = vaddq_s32(vaddq_s32(vaddw_s16(vaddq_s32(v1029, v1035), *(int16x4_t *)v1039.i8), vshlq_n_s32(v1035, 1uLL)), vshll_n_s16(*(int16x4_t *)v1033.i8, 2uLL));
      v1675[1] = vaddq_s32(vaddq_s32(vaddw_high_s16(vaddq_s32(v1030, v1036), v1039), vshlq_n_s32(v1036, 1uLL)), vshll_high_n_s16(v1033, 2uLL));
      v1676 = vaddq_s32(vaddq_s32(vaddw_s16(vaddq_s32(v1031, v1037), *(int16x4_t *)v1040.i8), vshlq_n_s32(v1037, 1uLL)), vshll_n_s16(*(int16x4_t *)v1034.i8, 2uLL));
      v1677 = vaddq_s32(vaddq_s32(vaddw_high_s16(vaddq_s32(v1032, v1038), v1040), vshlq_n_s32(v1038, 1uLL)), vshll_high_n_s16(v1034, 2uLL));
      v1041 = v866[16];
      v1042 = v866[17];
      v1043 = v868[16];
      v1044 = v868[17];
      v1045 = v870[16];
      v1046 = v870[17];
      v1047 = vaddw_s16(vshll_n_s16(*(int16x4_t *)v1043.i8, 2uLL), *(int16x4_t *)v1041.i8);
      v1048 = vaddw_high_s16(vshll_high_n_s16(v1043, 2uLL), v1041);
      v1049 = vaddw_s16(vshll_n_s16(*(int16x4_t *)v1044.i8, 2uLL), *(int16x4_t *)v1042.i8);
      v1050 = vaddw_high_s16(vshll_high_n_s16(v1044, 2uLL), v1042);
      v1051 = v872[16];
      v1052 = v872[17];
      v1053 = vshll_n_s16(*(int16x4_t *)v1045.i8, 1uLL);
      v1054 = vshll_high_n_s16(v1045, 1uLL);
      v1055 = vshll_n_s16(*(int16x4_t *)v1046.i8, 1uLL);
      v1056 = vshll_high_n_s16(v1046, 1uLL);
      v1057 = v875[16];
      v1058 = v875[17];
      v1059 = v870[18];
      v1060 = v870[19];
      v1061 = vaddq_s32(vaddq_s32(vaddw_s16(vaddq_s32(v1047, v1053), *(int16x4_t *)v1057.i8), vshlq_n_s32(v1053, 1uLL)), vshll_n_s16(*(int16x4_t *)v1051.i8, 2uLL));
      v1062 = vaddq_s32(vaddq_s32(vaddw_high_s16(vaddq_s32(v1048, v1054), v1057), vshlq_n_s32(v1054, 1uLL)), vshll_high_n_s16(v1051, 2uLL));
      v1063 = vaddq_s32(vaddq_s32(vaddw_s16(vaddq_s32(v1049, v1055), *(int16x4_t *)v1058.i8), vshlq_n_s32(v1055, 1uLL)), vshll_n_s16(*(int16x4_t *)v1052.i8, 2uLL));
      v1064 = vaddq_s32(vaddq_s32(vaddw_high_s16(vaddq_s32(v1050, v1056), v1058), vshlq_n_s32(v1056, 1uLL)), vshll_high_n_s16(v1052, 2uLL));
      v1065 = v866[18];
      v1066 = v866[19];
      v1067 = v868[18];
      v1068 = v868[19];
      v1678[0] = v1061;
      v1678[1] = v1062;
      v1678[2] = v1063;
      v1678[3] = v1064;
      v1069 = vaddw_s16(vshll_n_s16(*(int16x4_t *)v1067.i8, 2uLL), *(int16x4_t *)v1065.i8);
      v1070 = vaddw_high_s16(vshll_high_n_s16(v1067, 2uLL), v1065);
      v1071 = vaddw_s16(vshll_n_s16(*(int16x4_t *)v1068.i8, 2uLL), *(int16x4_t *)v1066.i8);
      v1072 = vaddw_high_s16(vshll_high_n_s16(v1068, 2uLL), v1066);
      v1073 = v872[18];
      v1074 = v872[19];
      v1075 = vshll_n_s16(*(int16x4_t *)v1059.i8, 1uLL);
      v1076 = vshll_high_n_s16(v1059, 1uLL);
      v1077 = vshll_n_s16(*(int16x4_t *)v1060.i8, 1uLL);
      v1078 = vshll_high_n_s16(v1060, 1uLL);
      v1079 = v875[18];
      v1080 = v875[19];
      v1081 = v870[20];
      v1082 = v870[21];
      v1083 = vaddq_s32(vaddq_s32(vaddw_s16(vaddq_s32(v1069, v1075), *(int16x4_t *)v1079.i8), vshlq_n_s32(v1075, 1uLL)), vshll_n_s16(*(int16x4_t *)v1073.i8, 2uLL));
      v1084 = vaddq_s32(vaddq_s32(vaddw_high_s16(vaddq_s32(v1070, v1076), v1079), vshlq_n_s32(v1076, 1uLL)), vshll_high_n_s16(v1073, 2uLL));
      v1085 = vaddq_s32(vaddq_s32(vaddw_s16(vaddq_s32(v1071, v1077), *(int16x4_t *)v1080.i8), vshlq_n_s32(v1077, 1uLL)), vshll_n_s16(*(int16x4_t *)v1074.i8, 2uLL));
      v1086 = vaddq_s32(vaddq_s32(vaddw_high_s16(vaddq_s32(v1072, v1078), v1080), vshlq_n_s32(v1078, 1uLL)), vshll_high_n_s16(v1074, 2uLL));
      v1087 = v866[20];
      v1088 = v866[21];
      v1089 = v868[20];
      v1090 = v868[21];
      v1679[0] = v1083;
      v1679[1] = v1084;
      v1679[2] = v1085;
      v1679[3] = v1086;
      v1091 = vaddw_s16(vshll_n_s16(*(int16x4_t *)v1089.i8, 2uLL), *(int16x4_t *)v1087.i8);
      v1092 = vaddw_high_s16(vshll_high_n_s16(v1089, 2uLL), v1087);
      v1093 = vaddw_s16(vshll_n_s16(*(int16x4_t *)v1090.i8, 2uLL), *(int16x4_t *)v1088.i8);
      v1094 = vaddw_high_s16(vshll_high_n_s16(v1090, 2uLL), v1088);
      v1095 = v872[20];
      v1096 = v872[21];
      v1097 = vshll_n_s16(*(int16x4_t *)v1081.i8, 1uLL);
      v1098 = vshll_high_n_s16(v1081, 1uLL);
      v1099 = vshll_n_s16(*(int16x4_t *)v1082.i8, 1uLL);
      v1100 = vshll_high_n_s16(v1082, 1uLL);
      v1101 = v875[20];
      v1102 = v875[21];
      v1103 = v870[22];
      v1104 = v870[23];
      v1105 = vaddq_s32(vaddq_s32(vaddw_s16(vaddq_s32(v1091, v1097), *(int16x4_t *)v1101.i8), vshlq_n_s32(v1097, 1uLL)), vshll_n_s16(*(int16x4_t *)v1095.i8, 2uLL));
      v1106 = vaddq_s32(vaddq_s32(vaddw_high_s16(vaddq_s32(v1092, v1098), v1101), vshlq_n_s32(v1098, 1uLL)), vshll_high_n_s16(v1095, 2uLL));
      v1107 = vaddq_s32(vaddq_s32(vaddw_s16(vaddq_s32(v1093, v1099), *(int16x4_t *)v1102.i8), vshlq_n_s32(v1099, 1uLL)), vshll_n_s16(*(int16x4_t *)v1096.i8, 2uLL));
      v1108 = vaddq_s32(vaddq_s32(vaddw_high_s16(vaddq_s32(v1094, v1100), v1102), vshlq_n_s32(v1100, 1uLL)), vshll_high_n_s16(v1096, 2uLL));
      v1109 = v866[22];
      v1110 = v866[23];
      v1111 = v868[22];
      v1112 = v868[23];
      v1680[0] = v1105;
      v1680[1] = v1106;
      v1680[2] = v1107;
      v1680[3] = v1108;
      v1113 = vaddw_s16(vshll_n_s16(*(int16x4_t *)v1111.i8, 2uLL), *(int16x4_t *)v1109.i8);
      v1114 = vaddw_high_s16(vshll_high_n_s16(v1111, 2uLL), v1109);
      v1115 = vaddw_s16(vshll_n_s16(*(int16x4_t *)v1112.i8, 2uLL), *(int16x4_t *)v1110.i8);
      v1116 = vaddw_high_s16(vshll_high_n_s16(v1112, 2uLL), v1110);
      v1117 = v872[22];
      v1118 = v872[23];
      v1119 = vshll_n_s16(*(int16x4_t *)v1103.i8, 1uLL);
      v1120 = vshll_high_n_s16(v1103, 1uLL);
      v1121 = vshll_n_s16(*(int16x4_t *)v1104.i8, 1uLL);
      v1122 = vshll_high_n_s16(v1104, 1uLL);
      v1123 = v875[22];
      v1124 = v875[23];
      v1125 = v870[24];
      v1126 = v870[25];
      v1127 = vaddq_s32(vaddq_s32(vaddw_s16(vaddq_s32(v1113, v1119), *(int16x4_t *)v1123.i8), vshlq_n_s32(v1119, 1uLL)), vshll_n_s16(*(int16x4_t *)v1117.i8, 2uLL));
      v1128 = vaddq_s32(vaddq_s32(vaddw_high_s16(vaddq_s32(v1114, v1120), v1123), vshlq_n_s32(v1120, 1uLL)), vshll_high_n_s16(v1117, 2uLL));
      v1129 = vaddq_s32(vaddq_s32(vaddw_s16(vaddq_s32(v1115, v1121), *(int16x4_t *)v1124.i8), vshlq_n_s32(v1121, 1uLL)), vshll_n_s16(*(int16x4_t *)v1118.i8, 2uLL));
      v1130 = vaddq_s32(vaddq_s32(vaddw_high_s16(vaddq_s32(v1116, v1122), v1124), vshlq_n_s32(v1122, 1uLL)), vshll_high_n_s16(v1118, 2uLL));
      v1131 = v866[24];
      v1132 = v866[25];
      v1133 = v868[24];
      v1134 = v868[25];
      v1681[0] = v1127;
      v1681[1] = v1128;
      v1681[2] = v1129;
      v1681[3] = v1130;
      v1135 = vaddw_s16(vshll_n_s16(*(int16x4_t *)v1133.i8, 2uLL), *(int16x4_t *)v1131.i8);
      v1136 = vaddw_high_s16(vshll_high_n_s16(v1133, 2uLL), v1131);
      v1137 = vaddw_s16(vshll_n_s16(*(int16x4_t *)v1134.i8, 2uLL), *(int16x4_t *)v1132.i8);
      v1138 = vaddw_high_s16(vshll_high_n_s16(v1134, 2uLL), v1132);
      v1139 = v872[24];
      v1140 = v872[25];
      v1141 = vshll_n_s16(*(int16x4_t *)v1125.i8, 1uLL);
      v1142 = vshll_high_n_s16(v1125, 1uLL);
      v1143 = vshll_n_s16(*(int16x4_t *)v1126.i8, 1uLL);
      v1144 = vshll_high_n_s16(v1126, 1uLL);
      v1145 = v875[24];
      v1146 = v875[25];
      v1147 = v870[26];
      v1148 = v870[27];
      v1149 = vaddq_s32(vaddq_s32(vaddw_s16(vaddq_s32(v1135, v1141), *(int16x4_t *)v1145.i8), vshlq_n_s32(v1141, 1uLL)), vshll_n_s16(*(int16x4_t *)v1139.i8, 2uLL));
      v1150 = vaddq_s32(vaddq_s32(vaddw_high_s16(vaddq_s32(v1136, v1142), v1145), vshlq_n_s32(v1142, 1uLL)), vshll_high_n_s16(v1139, 2uLL));
      v1151 = vaddq_s32(vaddq_s32(vaddw_s16(vaddq_s32(v1137, v1143), *(int16x4_t *)v1146.i8), vshlq_n_s32(v1143, 1uLL)), vshll_n_s16(*(int16x4_t *)v1140.i8, 2uLL));
      v1152 = vaddq_s32(vaddq_s32(vaddw_high_s16(vaddq_s32(v1138, v1144), v1146), vshlq_n_s32(v1144, 1uLL)), vshll_high_n_s16(v1140, 2uLL));
      v1153 = v866[26];
      v1154 = v866[27];
      v1155 = v868[26];
      v1156 = v868[27];
      v1682[0] = v1149;
      v1682[1] = v1150;
      v1682[2] = v1151;
      v1682[3] = v1152;
      v1157 = vaddw_s16(vshll_n_s16(*(int16x4_t *)v1155.i8, 2uLL), *(int16x4_t *)v1153.i8);
      v1158 = vaddw_high_s16(vshll_high_n_s16(v1155, 2uLL), v1153);
      v1159 = vaddw_s16(vshll_n_s16(*(int16x4_t *)v1156.i8, 2uLL), *(int16x4_t *)v1154.i8);
      v1160 = vaddw_high_s16(vshll_high_n_s16(v1156, 2uLL), v1154);
      v1161 = v872[26];
      v1162 = v872[27];
      v1163 = vshll_n_s16(*(int16x4_t *)v1147.i8, 1uLL);
      v1164 = vshll_high_n_s16(v1147, 1uLL);
      v1165 = vshll_n_s16(*(int16x4_t *)v1148.i8, 1uLL);
      v1166 = vshll_high_n_s16(v1148, 1uLL);
      v1167 = v875[26];
      v1168 = v875[27];
      v1169 = v870[28];
      v1170 = v870[29];
      v1171 = vaddq_s32(vaddq_s32(vaddw_s16(vaddq_s32(v1157, v1163), *(int16x4_t *)v1167.i8), vshlq_n_s32(v1163, 1uLL)), vshll_n_s16(*(int16x4_t *)v1161.i8, 2uLL));
      v1172 = vaddq_s32(vaddq_s32(vaddw_high_s16(vaddq_s32(v1158, v1164), v1167), vshlq_n_s32(v1164, 1uLL)), vshll_high_n_s16(v1161, 2uLL));
      v1173 = vaddq_s32(vaddq_s32(vaddw_s16(vaddq_s32(v1159, v1165), *(int16x4_t *)v1168.i8), vshlq_n_s32(v1165, 1uLL)), vshll_n_s16(*(int16x4_t *)v1162.i8, 2uLL));
      v1174 = vaddq_s32(vaddq_s32(vaddw_high_s16(vaddq_s32(v1160, v1166), v1168), vshlq_n_s32(v1166, 1uLL)), vshll_high_n_s16(v1162, 2uLL));
      v1175 = v866[28];
      v1176 = v866[29];
      v1177 = v868[28];
      v1178 = v868[29];
      v1683[0] = v1171;
      v1683[1] = v1172;
      v1683[2] = v1173;
      v1683[3] = v1174;
      v1179 = vaddw_s16(vshll_n_s16(*(int16x4_t *)v1177.i8, 2uLL), *(int16x4_t *)v1175.i8);
      v1180 = vaddw_high_s16(vshll_high_n_s16(v1177, 2uLL), v1175);
      v1181 = vaddw_s16(vshll_n_s16(*(int16x4_t *)v1178.i8, 2uLL), *(int16x4_t *)v1176.i8);
      v1182 = vaddw_high_s16(vshll_high_n_s16(v1178, 2uLL), v1176);
      v1183 = v872[28];
      v1184 = v872[29];
      v1185 = vshll_n_s16(*(int16x4_t *)v1169.i8, 1uLL);
      v1186 = vshll_high_n_s16(v1169, 1uLL);
      v1187 = vshll_n_s16(*(int16x4_t *)v1170.i8, 1uLL);
      v1188 = vshll_high_n_s16(v1170, 1uLL);
      v1189 = v875[28];
      v1190 = v875[29];
      v1191 = v870[30];
      v1192 = v870[31];
      v1193 = vaddq_s32(vaddq_s32(vaddw_s16(vaddq_s32(v1179, v1185), *(int16x4_t *)v1189.i8), vshlq_n_s32(v1185, 1uLL)), vshll_n_s16(*(int16x4_t *)v1183.i8, 2uLL));
      v1194 = vaddq_s32(vaddq_s32(vaddw_high_s16(vaddq_s32(v1180, v1186), v1189), vshlq_n_s32(v1186, 1uLL)), vshll_high_n_s16(v1183, 2uLL));
      v1195 = vaddq_s32(vaddq_s32(vaddw_s16(vaddq_s32(v1181, v1187), *(int16x4_t *)v1190.i8), vshlq_n_s32(v1187, 1uLL)), vshll_n_s16(*(int16x4_t *)v1184.i8, 2uLL));
      v1196 = vaddq_s32(vaddq_s32(vaddw_high_s16(vaddq_s32(v1182, v1188), v1190), vshlq_n_s32(v1188, 1uLL)), vshll_high_n_s16(v1184, 2uLL));
      v1197 = v866[30];
      v1198 = v866[31];
      v1199 = v868[30];
      v1200 = v868[31];
      v1684[0] = v1193;
      v1684[1] = v1194;
      v1684[2] = v1195;
      v1684[3] = v1196;
      v1201 = vaddw_s16(vshll_n_s16(*(int16x4_t *)v1199.i8, 2uLL), *(int16x4_t *)v1197.i8);
      v1202 = vaddw_high_s16(vshll_high_n_s16(v1199, 2uLL), v1197);
      v1203 = vaddw_s16(vshll_n_s16(*(int16x4_t *)v1200.i8, 2uLL), *(int16x4_t *)v1198.i8);
      v1204 = vaddw_high_s16(vshll_high_n_s16(v1200, 2uLL), v1198);
      v1205 = v872[30];
      v1206 = v872[31];
      v1207 = vshll_n_s16(*(int16x4_t *)v1191.i8, 1uLL);
      v1208 = vshll_high_n_s16(v1191, 1uLL);
      v1209 = vshll_n_s16(*(int16x4_t *)v1192.i8, 1uLL);
      v1210 = vshll_high_n_s16(v1192, 1uLL);
      v1211 = v875[30];
      v1212 = v875[31];
      v1685[0] = vaddq_s32(vaddq_s32(vaddw_s16(vaddq_s32(v1201, v1207), *(int16x4_t *)v1211.i8), vshlq_n_s32(v1207, 1uLL)), vshll_n_s16(*(int16x4_t *)v1205.i8, 2uLL));
      v1685[1] = vaddq_s32(vaddq_s32(vaddw_high_s16(vaddq_s32(v1202, v1208), v1211), vshlq_n_s32(v1208, 1uLL)), vshll_high_n_s16(v1205, 2uLL));
      v1686 = vaddq_s32(vaddq_s32(vaddw_s16(vaddq_s32(v1203, v1209), *(int16x4_t *)v1212.i8), vshlq_n_s32(v1209, 1uLL)), vshll_n_s16(*(int16x4_t *)v1206.i8, 2uLL));
      v1687 = vaddq_s32(vaddq_s32(vaddw_high_s16(vaddq_s32(v1204, v1210), v1212), vshlq_n_s32(v1210, 1uLL)), vshll_high_n_s16(v1206, 2uLL));
      v1213 = v866 + 32;
      v1214 = v868 + 32;
      v1215 = v870 + 32;
      v1216 = v872 + 32;
      v875 += 32;
      v1217 = *v1213;
      v1218 = v1213[1];
      v1213 += 2;
      v1219 = *v1214;
      v1220 = v1214[1];
      v1214 += 2;
      v1221 = *v1215;
      v1222 = v1215[1];
      v1215 += 2;
      v1223 = vaddw_s16(vshll_n_s16(*(int16x4_t *)v1219.i8, 2uLL), *(int16x4_t *)v1217.i8);
      v1224 = vaddw_high_s16(vshll_high_n_s16(v1219, 2uLL), v1217);
      v1225 = vaddw_s16(vshll_n_s16(*(int16x4_t *)v1220.i8, 2uLL), *(int16x4_t *)v1218.i8);
      v1226 = vaddw_high_s16(vshll_high_n_s16(v1220, 2uLL), v1218);
      v1227 = *v1216;
      v1228 = v1216[1];
      v1216 += 2;
      v1229 = vshll_n_s16(*(int16x4_t *)v1221.i8, 1uLL);
      v1230 = vshll_high_n_s16(v1221, 1uLL);
      v1231 = vshll_n_s16(*(int16x4_t *)v1222.i8, 1uLL);
      v1232 = vshll_high_n_s16(v1222, 1uLL);
      v1233 = *v875;
      v1234 = v875[1];
      v875 += 2;
      v1235 = *v1215;
      v1236 = v1215[1];
      v1215 += 2;
      v1237 = vaddq_s32(vaddq_s32(vaddw_s16(vaddq_s32(v1223, v1229), *(int16x4_t *)v1233.i8), vshlq_n_s32(v1229, 1uLL)), vshll_n_s16(*(int16x4_t *)v1227.i8, 2uLL));
      v1238 = vaddq_s32(vaddq_s32(vaddw_high_s16(vaddq_s32(v1224, v1230), v1233), vshlq_n_s32(v1230, 1uLL)), vshll_high_n_s16(v1227, 2uLL));
      v1239 = vaddq_s32(vaddq_s32(vaddw_s16(vaddq_s32(v1225, v1231), *(int16x4_t *)v1234.i8), vshlq_n_s32(v1231, 1uLL)), vshll_n_s16(*(int16x4_t *)v1228.i8, 2uLL));
      v1240 = vaddq_s32(vaddq_s32(vaddw_high_s16(vaddq_s32(v1226, v1232), v1234), vshlq_n_s32(v1232, 1uLL)), vshll_high_n_s16(v1228, 2uLL));
      v1241 = *v1213;
      v1242 = v1213[1];
      v1213 += 2;
      v1243 = *v1214;
      v1244 = v1214[1];
      v1214 += 2;
      v1688[0] = v1237;
      v1688[1] = v1238;
      v1688[2] = v1239;
      v1688[3] = v1240;
      v1245 = vaddw_s16(vshll_n_s16(*(int16x4_t *)v1243.i8, 2uLL), *(int16x4_t *)v1241.i8);
      v1246 = vaddw_high_s16(vshll_high_n_s16(v1243, 2uLL), v1241);
      v1247 = vaddw_s16(vshll_n_s16(*(int16x4_t *)v1244.i8, 2uLL), *(int16x4_t *)v1242.i8);
      v1248 = vaddw_high_s16(vshll_high_n_s16(v1244, 2uLL), v1242);
      v1249 = *v1216;
      v1250 = v1216[1];
      v1216 += 2;
      v1251 = vshll_n_s16(*(int16x4_t *)v1235.i8, 1uLL);
      v1252 = vshll_high_n_s16(v1235, 1uLL);
      v1253 = vshll_n_s16(*(int16x4_t *)v1236.i8, 1uLL);
      v1254 = vshll_high_n_s16(v1236, 1uLL);
      v1255 = *v875;
      v1256 = v875[1];
      v875 += 2;
      v1257 = *v1215;
      v1258 = v1215[1];
      v1215 += 2;
      v1259 = vaddq_s32(vaddq_s32(vaddw_s16(vaddq_s32(v1245, v1251), *(int16x4_t *)v1255.i8), vshlq_n_s32(v1251, 1uLL)), vshll_n_s16(*(int16x4_t *)v1249.i8, 2uLL));
      v1260 = vaddq_s32(vaddq_s32(vaddw_high_s16(vaddq_s32(v1246, v1252), v1255), vshlq_n_s32(v1252, 1uLL)), vshll_high_n_s16(v1249, 2uLL));
      v1261 = vaddq_s32(vaddq_s32(vaddw_s16(vaddq_s32(v1247, v1253), *(int16x4_t *)v1256.i8), vshlq_n_s32(v1253, 1uLL)), vshll_n_s16(*(int16x4_t *)v1250.i8, 2uLL));
      v1262 = vaddq_s32(vaddq_s32(vaddw_high_s16(vaddq_s32(v1248, v1254), v1256), vshlq_n_s32(v1254, 1uLL)), vshll_high_n_s16(v1250, 2uLL));
      v1263 = *v1213;
      v1264 = v1213[1];
      v1213 += 2;
      v1265 = *v1214;
      v1266 = v1214[1];
      v1214 += 2;
      v1689[0] = v1259;
      v1689[1] = v1260;
      v1689[2] = v1261;
      v1689[3] = v1262;
      v1267 = vaddw_s16(vshll_n_s16(*(int16x4_t *)v1265.i8, 2uLL), *(int16x4_t *)v1263.i8);
      v1268 = vaddw_high_s16(vshll_high_n_s16(v1265, 2uLL), v1263);
      v1269 = vaddw_s16(vshll_n_s16(*(int16x4_t *)v1266.i8, 2uLL), *(int16x4_t *)v1264.i8);
      v1270 = vaddw_high_s16(vshll_high_n_s16(v1266, 2uLL), v1264);
      v1271 = *v1216;
      v1272 = v1216[1];
      v1216 += 2;
      v1273 = vshll_n_s16(*(int16x4_t *)v1257.i8, 1uLL);
      v1274 = vshll_high_n_s16(v1257, 1uLL);
      v1275 = vshll_n_s16(*(int16x4_t *)v1258.i8, 1uLL);
      v1276 = vshll_high_n_s16(v1258, 1uLL);
      v1277 = *v875;
      v1278 = v875[1];
      v875 += 2;
      v1279 = *v1215;
      v1280 = v1215[1];
      v1215 += 2;
      v1281 = vaddq_s32(vaddq_s32(vaddw_s16(vaddq_s32(v1267, v1273), *(int16x4_t *)v1277.i8), vshlq_n_s32(v1273, 1uLL)), vshll_n_s16(*(int16x4_t *)v1271.i8, 2uLL));
      v1282 = vaddq_s32(vaddq_s32(vaddw_high_s16(vaddq_s32(v1268, v1274), v1277), vshlq_n_s32(v1274, 1uLL)), vshll_high_n_s16(v1271, 2uLL));
      v1283 = vaddq_s32(vaddq_s32(vaddw_s16(vaddq_s32(v1269, v1275), *(int16x4_t *)v1278.i8), vshlq_n_s32(v1275, 1uLL)), vshll_n_s16(*(int16x4_t *)v1272.i8, 2uLL));
      v1284 = vaddq_s32(vaddq_s32(vaddw_high_s16(vaddq_s32(v1270, v1276), v1278), vshlq_n_s32(v1276, 1uLL)), vshll_high_n_s16(v1272, 2uLL));
      v1285 = *v1213;
      v1286 = v1213[1];
      v1213 += 2;
      v1287 = *v1214;
      v1288 = v1214[1];
      v1214 += 2;
      v1690[0] = v1281;
      v1690[1] = v1282;
      v1690[2] = v1283;
      v1690[3] = v1284;
      v1289 = vaddw_s16(vshll_n_s16(*(int16x4_t *)v1287.i8, 2uLL), *(int16x4_t *)v1285.i8);
      v1290 = vaddw_high_s16(vshll_high_n_s16(v1287, 2uLL), v1285);
      v1291 = vaddw_s16(vshll_n_s16(*(int16x4_t *)v1288.i8, 2uLL), *(int16x4_t *)v1286.i8);
      v1292 = vaddw_high_s16(vshll_high_n_s16(v1288, 2uLL), v1286);
      v1293 = *v1216;
      v1294 = v1216[1];
      v1216 += 2;
      v1295 = vshll_n_s16(*(int16x4_t *)v1279.i8, 1uLL);
      v1296 = vshll_high_n_s16(v1279, 1uLL);
      v1297 = vshll_n_s16(*(int16x4_t *)v1280.i8, 1uLL);
      v1298 = vshll_high_n_s16(v1280, 1uLL);
      v1299 = *v875;
      v1300 = v875[1];
      v875 += 2;
      v1301 = *v1215;
      v1302 = v1215[1];
      v1215 += 2;
      v1303 = vaddq_s32(vaddq_s32(vaddw_s16(vaddq_s32(v1289, v1295), *(int16x4_t *)v1299.i8), vshlq_n_s32(v1295, 1uLL)), vshll_n_s16(*(int16x4_t *)v1293.i8, 2uLL));
      v1304 = vaddq_s32(vaddq_s32(vaddw_high_s16(vaddq_s32(v1290, v1296), v1299), vshlq_n_s32(v1296, 1uLL)), vshll_high_n_s16(v1293, 2uLL));
      v1305 = vaddq_s32(vaddq_s32(vaddw_s16(vaddq_s32(v1291, v1297), *(int16x4_t *)v1300.i8), vshlq_n_s32(v1297, 1uLL)), vshll_n_s16(*(int16x4_t *)v1294.i8, 2uLL));
      v1306 = vaddq_s32(vaddq_s32(vaddw_high_s16(vaddq_s32(v1292, v1298), v1300), vshlq_n_s32(v1298, 1uLL)), vshll_high_n_s16(v1294, 2uLL));
      v1307 = *v1213;
      v1308 = v1213[1];
      v1213 += 2;
      v1309 = *v1214;
      v1310 = v1214[1];
      v1214 += 2;
      v1691[0] = v1303;
      v1691[1] = v1304;
      v1691[2] = v1305;
      v1691[3] = v1306;
      v1311 = vaddw_s16(vshll_n_s16(*(int16x4_t *)v1309.i8, 2uLL), *(int16x4_t *)v1307.i8);
      v1312 = vaddw_high_s16(vshll_high_n_s16(v1309, 2uLL), v1307);
      v1313 = vaddw_s16(vshll_n_s16(*(int16x4_t *)v1310.i8, 2uLL), *(int16x4_t *)v1308.i8);
      v1314 = vaddw_high_s16(vshll_high_n_s16(v1310, 2uLL), v1308);
      v1315 = *v1216;
      v1316 = v1216[1];
      v1216 += 2;
      v1317 = vshll_n_s16(*(int16x4_t *)v1301.i8, 1uLL);
      v1318 = vshll_high_n_s16(v1301, 1uLL);
      v1319 = vshll_n_s16(*(int16x4_t *)v1302.i8, 1uLL);
      v1320 = vshll_high_n_s16(v1302, 1uLL);
      v1321 = *v875;
      v1322 = v875[1];
      v875 += 2;
      v1323 = *v1215;
      v1324 = v1215[1];
      v1215 += 2;
      v1325 = vaddq_s32(vaddq_s32(vaddw_s16(vaddq_s32(v1311, v1317), *(int16x4_t *)v1321.i8), vshlq_n_s32(v1317, 1uLL)), vshll_n_s16(*(int16x4_t *)v1315.i8, 2uLL));
      v1326 = vaddq_s32(vaddq_s32(vaddw_high_s16(vaddq_s32(v1312, v1318), v1321), vshlq_n_s32(v1318, 1uLL)), vshll_high_n_s16(v1315, 2uLL));
      v1327 = vaddq_s32(vaddq_s32(vaddw_s16(vaddq_s32(v1313, v1319), *(int16x4_t *)v1322.i8), vshlq_n_s32(v1319, 1uLL)), vshll_n_s16(*(int16x4_t *)v1316.i8, 2uLL));
      v1328 = vaddq_s32(vaddq_s32(vaddw_high_s16(vaddq_s32(v1314, v1320), v1322), vshlq_n_s32(v1320, 1uLL)), vshll_high_n_s16(v1316, 2uLL));
      v1329 = *v1213;
      v1330 = v1213[1];
      v1213 += 2;
      v1331 = *v1214;
      v1332 = v1214[1];
      v1214 += 2;
      v1692[0] = v1325;
      v1692[1] = v1326;
      v1692[2] = v1327;
      v1692[3] = v1328;
      v1333 = vaddw_s16(vshll_n_s16(*(int16x4_t *)v1331.i8, 2uLL), *(int16x4_t *)v1329.i8);
      v1334 = vaddw_high_s16(vshll_high_n_s16(v1331, 2uLL), v1329);
      v1335 = vaddw_s16(vshll_n_s16(*(int16x4_t *)v1332.i8, 2uLL), *(int16x4_t *)v1330.i8);
      v1336 = vaddw_high_s16(vshll_high_n_s16(v1332, 2uLL), v1330);
      v1337 = *v1216;
      v1338 = v1216[1];
      v1216 += 2;
      v1339 = vshll_n_s16(*(int16x4_t *)v1323.i8, 1uLL);
      v1340 = vshll_high_n_s16(v1323, 1uLL);
      v1341 = vshll_n_s16(*(int16x4_t *)v1324.i8, 1uLL);
      v1342 = vshll_high_n_s16(v1324, 1uLL);
      v1343 = *v875;
      v1344 = v875[1];
      v875 += 2;
      v1345 = *v1215;
      v1346 = v1215[1];
      v1215 += 2;
      v1347 = vaddq_s32(vaddq_s32(vaddw_s16(vaddq_s32(v1333, v1339), *(int16x4_t *)v1343.i8), vshlq_n_s32(v1339, 1uLL)), vshll_n_s16(*(int16x4_t *)v1337.i8, 2uLL));
      v1348 = vaddq_s32(vaddq_s32(vaddw_high_s16(vaddq_s32(v1334, v1340), v1343), vshlq_n_s32(v1340, 1uLL)), vshll_high_n_s16(v1337, 2uLL));
      v1349 = vaddq_s32(vaddq_s32(vaddw_s16(vaddq_s32(v1335, v1341), *(int16x4_t *)v1344.i8), vshlq_n_s32(v1341, 1uLL)), vshll_n_s16(*(int16x4_t *)v1338.i8, 2uLL));
      v1350 = vaddq_s32(vaddq_s32(vaddw_high_s16(vaddq_s32(v1336, v1342), v1344), vshlq_n_s32(v1342, 1uLL)), vshll_high_n_s16(v1338, 2uLL));
      v1351 = *v1213;
      v1352 = v1213[1];
      v1213 += 2;
      v1353 = *v1214;
      v1354 = v1214[1];
      v1214 += 2;
      v1693[0] = v1347;
      v1693[1] = v1348;
      v1693[2] = v1349;
      v1693[3] = v1350;
      v1355 = vaddw_s16(vshll_n_s16(*(int16x4_t *)v1353.i8, 2uLL), *(int16x4_t *)v1351.i8);
      v1356 = vaddw_high_s16(vshll_high_n_s16(v1353, 2uLL), v1351);
      v1357 = vaddw_s16(vshll_n_s16(*(int16x4_t *)v1354.i8, 2uLL), *(int16x4_t *)v1352.i8);
      v1358 = vaddw_high_s16(vshll_high_n_s16(v1354, 2uLL), v1352);
      v1359 = *v1216;
      v1360 = v1216[1];
      v1216 += 2;
      v1361 = vshll_n_s16(*(int16x4_t *)v1345.i8, 1uLL);
      v1362 = vshll_high_n_s16(v1345, 1uLL);
      v1363 = vshll_n_s16(*(int16x4_t *)v1346.i8, 1uLL);
      v1364 = vshll_high_n_s16(v1346, 1uLL);
      v1365 = *v875;
      v1366 = v875[1];
      v875 += 2;
      v1367 = *v1215;
      v1368 = v1215[1];
      v1369 = vaddq_s32(vaddq_s32(vaddw_s16(vaddq_s32(v1355, v1361), *(int16x4_t *)v1365.i8), vshlq_n_s32(v1361, 1uLL)), vshll_n_s16(*(int16x4_t *)v1359.i8, 2uLL));
      v1370 = vaddq_s32(vaddq_s32(vaddw_high_s16(vaddq_s32(v1356, v1362), v1365), vshlq_n_s32(v1362, 1uLL)), vshll_high_n_s16(v1359, 2uLL));
      v1371 = vaddq_s32(vaddq_s32(vaddw_s16(vaddq_s32(v1357, v1363), *(int16x4_t *)v1366.i8), vshlq_n_s32(v1363, 1uLL)), vshll_n_s16(*(int16x4_t *)v1360.i8, 2uLL));
      v1372 = vaddq_s32(vaddq_s32(vaddw_high_s16(vaddq_s32(v1358, v1364), v1366), vshlq_n_s32(v1364, 1uLL)), vshll_high_n_s16(v1360, 2uLL));
      v1373 = *v1213;
      v1374 = v1213[1];
      v1375 = *v1214;
      v1376 = v1214[1];
      v1694[0] = v1369;
      v1694[1] = v1370;
      v1694[2] = v1371;
      v1694[3] = v1372;
      v1377 = vaddw_s16(vshll_n_s16(*(int16x4_t *)v1375.i8, 2uLL), *(int16x4_t *)v1373.i8);
      v1378 = vaddw_high_s16(vshll_high_n_s16(v1375, 2uLL), v1373);
      v1379 = vaddw_s16(vshll_n_s16(*(int16x4_t *)v1376.i8, 2uLL), *(int16x4_t *)v1374.i8);
      v1380 = vaddw_high_s16(vshll_high_n_s16(v1376, 2uLL), v1374);
      v1381 = v1216[1];
      v1382 = vshll_n_s16(*(int16x4_t *)v1367.i8, 1uLL);
      v1383 = vshll_high_n_s16(v1367, 1uLL);
      v1384 = vshll_n_s16(*(int16x4_t *)v1368.i8, 1uLL);
      v1385 = vshll_high_n_s16(v1368, 1uLL);
      v1386 = v875[1];
      v1387 = vaddq_s32(vaddq_s32(vaddw_high_s16(vaddq_s32(v1378, v1383), *v875), vshlq_n_s32(v1383, 1uLL)), vshll_high_n_s16(*v1216, 2uLL));
      v1388 = (int8x16_t)vaddq_s32(vaddq_s32(vaddw_high_s16(vaddq_s32(v1380, v1385), v1386), vshlq_n_s32(v1385, 1uLL)), vshll_high_n_s16(v1381, 2uLL));
      v1695[0] = vaddq_s32(vaddq_s32(vaddw_s16(vaddq_s32(v1377, v1382), *(int16x4_t *)v875->i8), vshlq_n_s32(v1382, 1uLL)), vshll_n_s16(*(int16x4_t *)v1216->i8, 2uLL));
      v1695[1] = v1387;
      v1696 = vaddq_s32(vaddq_s32(vaddw_s16(vaddq_s32(v1379, v1384), *(int16x4_t *)v1386.i8), vshlq_n_s32(v1384, 1uLL)), vshll_n_s16(*(int16x4_t *)v1381.i8, 2uLL));
      v1697 = v1388;
      v1389 = v1668;
      v1390 = (const float *)v1668;
      v1391 = (float *)v1668;
      v2030 = vld4q_f32(v1390);
      v1390 += 16;
      v1388.i64[0] = *(_QWORD *)v1390;
      v698.i64[0] = *((_QWORD *)v1390 + 1);
      v1392 = vshlq_n_s32((int32x4_t)v2030.val[2], 2uLL);
      v1393 = vshlq_n_s32((int32x4_t)v2030.val[3], 2uLL);
      v1394 = (int32x4_t)vextq_s8((int8x16_t)v2030.val[0], v1388, 4uLL);
      *(int32x2_t *)v1388.i8 = vrev64_s32(*(int32x2_t *)v1390);
      v1395 = (int32x4_t)vextq_s8((int8x16_t)v2030.val[1], v1388, 4uLL);
      v1396 = (int32x4_t)vextq_s8((int8x16_t)v2030.val[2], v698, 4uLL);
      v1397 = vshlq_n_s32(v1394, 2uLL);
      v2030.val[0] = (float32x4_t)vaddq_s32(vaddq_s32(vaddq_s32(vaddq_s32(vaddq_s32((int32x4_t)v2030.val[0], vshlq_n_s32((int32x4_t)v2030.val[1], 2uLL)), vshlq_n_s32((int32x4_t)v2030.val[2], 1uLL)), v1392), v1393), v1394);
      v2030.val[1] = (float32x4_t)vaddq_s32(vaddq_s32(vaddq_s32(vaddq_s32(vaddq_s32((int32x4_t)v2030.val[1], v1392), vshlq_n_s32((int32x4_t)v2030.val[3], 1uLL)), v1393), v1397), v1395);
      v1398 = vshlq_n_s32(v1395, 2uLL);
      *(int32x2_t *)v698.i8 = vrev64_s32(*(int32x2_t *)v698.i8);
      v2030.val[2] = (float32x4_t)vaddq_s32(vaddq_s32(vaddq_s32(vaddq_s32(vaddq_s32((int32x4_t)v2030.val[2], v1393), v1397), v1398), vshlq_n_s32(v1394, 1uLL)), v1396);
      v2030.val[3] = (float32x4_t)vaddq_s32(vaddq_s32(vaddq_s32(vaddq_s32(vaddq_s32((int32x4_t)v2030.val[3], v1397), v1398), vshlq_n_s32(v1395, 1uLL)), vshlq_n_s32(v1396, 2uLL)), (int32x4_t)vextq_s8((int8x16_t)v2030.val[3], v698, 4uLL));
      vst4q_f32(v1391, v2030);
      v1399 = (float *)v1669;
      v1400 = (const float *)v1669;
      v2031 = vld4q_f32(v1400);
      v1400 += 16;
      v1388.i64[0] = *(_QWORD *)v1400;
      v698.i64[0] = *((_QWORD *)v1400 + 1);
      v1401 = vshlq_n_s32((int32x4_t)v2031.val[2], 2uLL);
      v1402 = vshlq_n_s32((int32x4_t)v2031.val[3], 2uLL);
      v1403 = (int32x4_t)vextq_s8((int8x16_t)v2031.val[0], v1388, 4uLL);
      *(int32x2_t *)v1388.i8 = vrev64_s32(*(int32x2_t *)v1400);
      v1404 = (int32x4_t)vextq_s8((int8x16_t)v2031.val[1], v1388, 4uLL);
      v1405 = (int32x4_t)vextq_s8((int8x16_t)v2031.val[2], v698, 4uLL);
      v1406 = vshlq_n_s32(v1403, 2uLL);
      v2031.val[0] = (float32x4_t)vaddq_s32(vaddq_s32(vaddq_s32(vaddq_s32(vaddq_s32((int32x4_t)v2031.val[0], vshlq_n_s32((int32x4_t)v2031.val[1], 2uLL)), vshlq_n_s32((int32x4_t)v2031.val[2], 1uLL)), v1401), v1402), v1403);
      v2031.val[1] = (float32x4_t)vaddq_s32(vaddq_s32(vaddq_s32(vaddq_s32(vaddq_s32((int32x4_t)v2031.val[1], v1401), vshlq_n_s32((int32x4_t)v2031.val[3], 1uLL)), v1402), v1406), v1404);
      v1407 = vshlq_n_s32(v1404, 2uLL);
      *(int32x2_t *)v698.i8 = vrev64_s32(*(int32x2_t *)v698.i8);
      v2031.val[2] = (float32x4_t)vaddq_s32(vaddq_s32(vaddq_s32(vaddq_s32(vaddq_s32((int32x4_t)v2031.val[2], v1402), v1406), v1407), vshlq_n_s32(v1403, 1uLL)), v1405);
      v2031.val[3] = (float32x4_t)vaddq_s32(vaddq_s32(vaddq_s32(vaddq_s32(vaddq_s32((int32x4_t)v2031.val[3], v1406), v1407), vshlq_n_s32(v1404, 1uLL)), vshlq_n_s32(v1405, 2uLL)), (int32x4_t)vextq_s8((int8x16_t)v2031.val[3], v698, 4uLL));
      vst4q_f32(v1399, v2031);
      v1408 = (float *)v1670;
      v1409 = (const float *)v1670;
      v2032 = vld4q_f32(v1409);
      v1409 += 16;
      v1388.i64[0] = *(_QWORD *)v1409;
      v698.i64[0] = *((_QWORD *)v1409 + 1);
      v1410 = vshlq_n_s32((int32x4_t)v2032.val[2], 2uLL);
      v1411 = vshlq_n_s32((int32x4_t)v2032.val[3], 2uLL);
      v1412 = (int32x4_t)vextq_s8((int8x16_t)v2032.val[0], v1388, 4uLL);
      *(int32x2_t *)v1388.i8 = vrev64_s32(*(int32x2_t *)v1409);
      v1413 = (int32x4_t)vextq_s8((int8x16_t)v2032.val[1], v1388, 4uLL);
      v1414 = (int32x4_t)vextq_s8((int8x16_t)v2032.val[2], v698, 4uLL);
      v1415 = vshlq_n_s32(v1412, 2uLL);
      v2032.val[0] = (float32x4_t)vaddq_s32(vaddq_s32(vaddq_s32(vaddq_s32(vaddq_s32((int32x4_t)v2032.val[0], vshlq_n_s32((int32x4_t)v2032.val[1], 2uLL)), vshlq_n_s32((int32x4_t)v2032.val[2], 1uLL)), v1410), v1411), v1412);
      v2032.val[1] = (float32x4_t)vaddq_s32(vaddq_s32(vaddq_s32(vaddq_s32(vaddq_s32((int32x4_t)v2032.val[1], v1410), vshlq_n_s32((int32x4_t)v2032.val[3], 1uLL)), v1411), v1415), v1413);
      v1416 = vshlq_n_s32(v1413, 2uLL);
      *(int32x2_t *)v698.i8 = vrev64_s32(*(int32x2_t *)v698.i8);
      v2032.val[2] = (float32x4_t)vaddq_s32(vaddq_s32(vaddq_s32(vaddq_s32(vaddq_s32((int32x4_t)v2032.val[2], v1411), v1415), v1416), vshlq_n_s32(v1412, 1uLL)), v1414);
      v2032.val[3] = (float32x4_t)vaddq_s32(vaddq_s32(vaddq_s32(vaddq_s32(vaddq_s32((int32x4_t)v2032.val[3], v1415), v1416), vshlq_n_s32(v1413, 1uLL)), vshlq_n_s32(v1414, 2uLL)), (int32x4_t)vextq_s8((int8x16_t)v2032.val[3], v698, 4uLL));
      vst4q_f32(v1408, v2032);
      v1417 = (float *)v1671;
      v1418 = (const float *)v1671;
      v2033 = vld4q_f32(v1418);
      v1418 += 16;
      v1388.i64[0] = *(_QWORD *)v1418;
      v698.i64[0] = *((_QWORD *)v1418 + 1);
      v1419 = vshlq_n_s32((int32x4_t)v2033.val[2], 2uLL);
      v1420 = vshlq_n_s32((int32x4_t)v2033.val[3], 2uLL);
      v1421 = (int32x4_t)vextq_s8((int8x16_t)v2033.val[0], v1388, 4uLL);
      *(int32x2_t *)v1388.i8 = vrev64_s32(*(int32x2_t *)v1418);
      v1422 = (int32x4_t)vextq_s8((int8x16_t)v2033.val[1], v1388, 4uLL);
      v1423 = (int32x4_t)vextq_s8((int8x16_t)v2033.val[2], v698, 4uLL);
      v1424 = vshlq_n_s32(v1421, 2uLL);
      v2033.val[0] = (float32x4_t)vaddq_s32(vaddq_s32(vaddq_s32(vaddq_s32(vaddq_s32((int32x4_t)v2033.val[0], vshlq_n_s32((int32x4_t)v2033.val[1], 2uLL)), vshlq_n_s32((int32x4_t)v2033.val[2], 1uLL)), v1419), v1420), v1421);
      v2033.val[1] = (float32x4_t)vaddq_s32(vaddq_s32(vaddq_s32(vaddq_s32(vaddq_s32((int32x4_t)v2033.val[1], v1419), vshlq_n_s32((int32x4_t)v2033.val[3], 1uLL)), v1420), v1424), v1422);
      v1425 = vshlq_n_s32(v1422, 2uLL);
      *(int32x2_t *)v698.i8 = vrev64_s32(*(int32x2_t *)v698.i8);
      v2033.val[2] = (float32x4_t)vaddq_s32(vaddq_s32(vaddq_s32(vaddq_s32(vaddq_s32((int32x4_t)v2033.val[2], v1420), v1424), v1425), vshlq_n_s32(v1421, 1uLL)), v1423);
      v2033.val[3] = (float32x4_t)vaddq_s32(vaddq_s32(vaddq_s32(vaddq_s32(vaddq_s32((int32x4_t)v2033.val[3], v1424), v1425), vshlq_n_s32(v1422, 1uLL)), vshlq_n_s32(v1423, 2uLL)), (int32x4_t)vextq_s8((int8x16_t)v2033.val[3], v698, 4uLL));
      vst4q_f32(v1417, v2033);
      v1426 = (float *)v1672;
      v1427 = (const float *)v1672;
      v2034 = vld4q_f32(v1427);
      v1427 += 16;
      v1388.i64[0] = *(_QWORD *)v1427;
      v698.i64[0] = *((_QWORD *)v1427 + 1);
      v1428 = vshlq_n_s32((int32x4_t)v2034.val[2], 2uLL);
      v1429 = vshlq_n_s32((int32x4_t)v2034.val[3], 2uLL);
      v1430 = (int32x4_t)vextq_s8((int8x16_t)v2034.val[0], v1388, 4uLL);
      *(int32x2_t *)v1388.i8 = vrev64_s32(*(int32x2_t *)v1427);
      v1431 = (int32x4_t)vextq_s8((int8x16_t)v2034.val[1], v1388, 4uLL);
      v1432 = (int32x4_t)vextq_s8((int8x16_t)v2034.val[2], v698, 4uLL);
      v1433 = vshlq_n_s32(v1430, 2uLL);
      v2034.val[0] = (float32x4_t)vaddq_s32(vaddq_s32(vaddq_s32(vaddq_s32(vaddq_s32((int32x4_t)v2034.val[0], vshlq_n_s32((int32x4_t)v2034.val[1], 2uLL)), vshlq_n_s32((int32x4_t)v2034.val[2], 1uLL)), v1428), v1429), v1430);
      v2034.val[1] = (float32x4_t)vaddq_s32(vaddq_s32(vaddq_s32(vaddq_s32(vaddq_s32((int32x4_t)v2034.val[1], v1428), vshlq_n_s32((int32x4_t)v2034.val[3], 1uLL)), v1429), v1433), v1431);
      v1434 = vshlq_n_s32(v1431, 2uLL);
      *(int32x2_t *)v698.i8 = vrev64_s32(*(int32x2_t *)v698.i8);
      v2034.val[2] = (float32x4_t)vaddq_s32(vaddq_s32(vaddq_s32(vaddq_s32(vaddq_s32((int32x4_t)v2034.val[2], v1429), v1433), v1434), vshlq_n_s32(v1430, 1uLL)), v1432);
      v2034.val[3] = (float32x4_t)vaddq_s32(vaddq_s32(vaddq_s32(vaddq_s32(vaddq_s32((int32x4_t)v2034.val[3], v1433), v1434), vshlq_n_s32(v1431, 1uLL)), vshlq_n_s32(v1432, 2uLL)), (int32x4_t)vextq_s8((int8x16_t)v2034.val[3], v698, 4uLL));
      vst4q_f32(v1426, v2034);
      v1435 = (float *)v1673;
      v1436 = (const float *)v1673;
      v2035 = vld4q_f32(v1436);
      v1436 += 16;
      v1388.i64[0] = *(_QWORD *)v1436;
      v698.i64[0] = *((_QWORD *)v1436 + 1);
      v1437 = vshlq_n_s32((int32x4_t)v2035.val[2], 2uLL);
      v1438 = vshlq_n_s32((int32x4_t)v2035.val[3], 2uLL);
      v1439 = (int32x4_t)vextq_s8((int8x16_t)v2035.val[0], v1388, 4uLL);
      *(int32x2_t *)v1388.i8 = vrev64_s32(*(int32x2_t *)v1436);
      v1440 = (int32x4_t)vextq_s8((int8x16_t)v2035.val[1], v1388, 4uLL);
      v1441 = (int32x4_t)vextq_s8((int8x16_t)v2035.val[2], v698, 4uLL);
      v1442 = vshlq_n_s32(v1439, 2uLL);
      v2035.val[0] = (float32x4_t)vaddq_s32(vaddq_s32(vaddq_s32(vaddq_s32(vaddq_s32((int32x4_t)v2035.val[0], vshlq_n_s32((int32x4_t)v2035.val[1], 2uLL)), vshlq_n_s32((int32x4_t)v2035.val[2], 1uLL)), v1437), v1438), v1439);
      v2035.val[1] = (float32x4_t)vaddq_s32(vaddq_s32(vaddq_s32(vaddq_s32(vaddq_s32((int32x4_t)v2035.val[1], v1437), vshlq_n_s32((int32x4_t)v2035.val[3], 1uLL)), v1438), v1442), v1440);
      v1443 = vshlq_n_s32(v1440, 2uLL);
      *(int32x2_t *)v698.i8 = vrev64_s32(*(int32x2_t *)v698.i8);
      v2035.val[2] = (float32x4_t)vaddq_s32(vaddq_s32(vaddq_s32(vaddq_s32(vaddq_s32((int32x4_t)v2035.val[2], v1438), v1442), v1443), vshlq_n_s32(v1439, 1uLL)), v1441);
      v2035.val[3] = (float32x4_t)vaddq_s32(vaddq_s32(vaddq_s32(vaddq_s32(vaddq_s32((int32x4_t)v2035.val[3], v1442), v1443), vshlq_n_s32(v1440, 1uLL)), vshlq_n_s32(v1441, 2uLL)), (int32x4_t)vextq_s8((int8x16_t)v2035.val[3], v698, 4uLL));
      vst4q_f32(v1435, v2035);
      v1444 = (float *)v1674;
      v1445 = (const float *)v1674;
      v2036 = vld4q_f32(v1445);
      v1445 += 16;
      v1388.i64[0] = *(_QWORD *)v1445;
      v698.i64[0] = *((_QWORD *)v1445 + 1);
      v1446 = vshlq_n_s32((int32x4_t)v2036.val[2], 2uLL);
      v1447 = vshlq_n_s32((int32x4_t)v2036.val[3], 2uLL);
      v1448 = (int32x4_t)vextq_s8((int8x16_t)v2036.val[0], v1388, 4uLL);
      *(int32x2_t *)v1388.i8 = vrev64_s32(*(int32x2_t *)v1445);
      v1449 = (int32x4_t)vextq_s8((int8x16_t)v2036.val[1], v1388, 4uLL);
      v1450 = (int32x4_t)vextq_s8((int8x16_t)v2036.val[2], v698, 4uLL);
      v1451 = vshlq_n_s32(v1448, 2uLL);
      v2036.val[0] = (float32x4_t)vaddq_s32(vaddq_s32(vaddq_s32(vaddq_s32(vaddq_s32((int32x4_t)v2036.val[0], vshlq_n_s32((int32x4_t)v2036.val[1], 2uLL)), vshlq_n_s32((int32x4_t)v2036.val[2], 1uLL)), v1446), v1447), v1448);
      v2036.val[1] = (float32x4_t)vaddq_s32(vaddq_s32(vaddq_s32(vaddq_s32(vaddq_s32((int32x4_t)v2036.val[1], v1446), vshlq_n_s32((int32x4_t)v2036.val[3], 1uLL)), v1447), v1451), v1449);
      v1452 = vshlq_n_s32(v1449, 2uLL);
      *(int32x2_t *)v698.i8 = vrev64_s32(*(int32x2_t *)v698.i8);
      v2036.val[2] = (float32x4_t)vaddq_s32(vaddq_s32(vaddq_s32(vaddq_s32(vaddq_s32((int32x4_t)v2036.val[2], v1447), v1451), v1452), vshlq_n_s32(v1448, 1uLL)), v1450);
      v2036.val[3] = (float32x4_t)vaddq_s32(vaddq_s32(vaddq_s32(vaddq_s32(vaddq_s32((int32x4_t)v2036.val[3], v1451), v1452), vshlq_n_s32(v1449, 1uLL)), vshlq_n_s32(v1450, 2uLL)), (int32x4_t)vextq_s8((int8x16_t)v2036.val[3], v698, 4uLL));
      vst4q_f32(v1444, v2036);
      v1453 = (float *)v1675;
      v1454 = (const float *)v1675;
      v2037 = vld4q_f32(v1454);
      v1454 += 16;
      v1388.i64[0] = *(_QWORD *)v1454;
      v698.i64[0] = *((_QWORD *)v1454 + 1);
      v1455 = vshlq_n_s32((int32x4_t)v2037.val[2], 2uLL);
      v1456 = vshlq_n_s32((int32x4_t)v2037.val[3], 2uLL);
      v1457 = (int32x4_t)vextq_s8((int8x16_t)v2037.val[0], v1388, 4uLL);
      *(int32x2_t *)v1388.i8 = vrev64_s32(*(int32x2_t *)v1454);
      v1458 = (int32x4_t)vextq_s8((int8x16_t)v2037.val[1], v1388, 4uLL);
      v1459 = (int32x4_t)vextq_s8((int8x16_t)v2037.val[2], v698, 4uLL);
      v1460 = vshlq_n_s32(v1457, 2uLL);
      v2037.val[0] = (float32x4_t)vaddq_s32(vaddq_s32(vaddq_s32(vaddq_s32(vaddq_s32((int32x4_t)v2037.val[0], vshlq_n_s32((int32x4_t)v2037.val[1], 2uLL)), vshlq_n_s32((int32x4_t)v2037.val[2], 1uLL)), v1455), v1456), v1457);
      v2037.val[1] = (float32x4_t)vaddq_s32(vaddq_s32(vaddq_s32(vaddq_s32(vaddq_s32((int32x4_t)v2037.val[1], v1455), vshlq_n_s32((int32x4_t)v2037.val[3], 1uLL)), v1456), v1460), v1458);
      v1461 = vshlq_n_s32(v1458, 2uLL);
      *(int32x2_t *)v698.i8 = vrev64_s32(*(int32x2_t *)v698.i8);
      v2037.val[2] = (float32x4_t)vaddq_s32(vaddq_s32(vaddq_s32(vaddq_s32(vaddq_s32((int32x4_t)v2037.val[2], v1456), v1460), v1461), vshlq_n_s32(v1457, 1uLL)), v1459);
      v2037.val[3] = (float32x4_t)vaddq_s32(vaddq_s32(vaddq_s32(vaddq_s32(vaddq_s32((int32x4_t)v2037.val[3], v1460), v1461), vshlq_n_s32(v1458, 1uLL)), vshlq_n_s32(v1459, 2uLL)), (int32x4_t)vextq_s8((int8x16_t)v2037.val[3], v698, 4uLL));
      vst4q_f32(v1453, v2037);
      v1462 = (const float *)v1678;
      v1463 = (float *)v1678;
      v2038 = vld4q_f32(v1462);
      v1462 += 16;
      v1388.i64[0] = *(_QWORD *)v1462;
      v698.i64[0] = *((_QWORD *)v1462 + 1);
      v1464 = vshlq_n_s32((int32x4_t)v2038.val[2], 2uLL);
      v1465 = vshlq_n_s32((int32x4_t)v2038.val[3], 2uLL);
      v1466 = (int32x4_t)vextq_s8((int8x16_t)v2038.val[0], v1388, 4uLL);
      *(int32x2_t *)v1388.i8 = vrev64_s32(*(int32x2_t *)v1462);
      v1467 = (int32x4_t)vextq_s8((int8x16_t)v2038.val[1], v1388, 4uLL);
      v1468 = (int32x4_t)vextq_s8((int8x16_t)v2038.val[2], v698, 4uLL);
      v1469 = vshlq_n_s32(v1466, 2uLL);
      v2038.val[0] = (float32x4_t)vaddq_s32(vaddq_s32(vaddq_s32(vaddq_s32(vaddq_s32((int32x4_t)v2038.val[0], vshlq_n_s32((int32x4_t)v2038.val[1], 2uLL)), vshlq_n_s32((int32x4_t)v2038.val[2], 1uLL)), v1464), v1465), v1466);
      v2038.val[1] = (float32x4_t)vaddq_s32(vaddq_s32(vaddq_s32(vaddq_s32(vaddq_s32((int32x4_t)v2038.val[1], v1464), vshlq_n_s32((int32x4_t)v2038.val[3], 1uLL)), v1465), v1469), v1467);
      v1470 = vshlq_n_s32(v1467, 2uLL);
      *(int32x2_t *)v698.i8 = vrev64_s32(*(int32x2_t *)v698.i8);
      v2038.val[2] = (float32x4_t)vaddq_s32(vaddq_s32(vaddq_s32(vaddq_s32(vaddq_s32((int32x4_t)v2038.val[2], v1465), v1469), v1470), vshlq_n_s32(v1466, 1uLL)), v1468);
      v2038.val[3] = (float32x4_t)vaddq_s32(vaddq_s32(vaddq_s32(vaddq_s32(vaddq_s32((int32x4_t)v2038.val[3], v1469), v1470), vshlq_n_s32(v1467, 1uLL)), vshlq_n_s32(v1468, 2uLL)), (int32x4_t)vextq_s8((int8x16_t)v2038.val[3], v698, 4uLL));
      vst4q_f32(v1463, v2038);
      v1471 = (float *)v1679;
      v1472 = (const float *)v1679;
      v2039 = vld4q_f32(v1472);
      v1472 += 16;
      v1388.i64[0] = *(_QWORD *)v1472;
      v698.i64[0] = *((_QWORD *)v1472 + 1);
      v1473 = vshlq_n_s32((int32x4_t)v2039.val[2], 2uLL);
      v1474 = vshlq_n_s32((int32x4_t)v2039.val[3], 2uLL);
      v1475 = (int32x4_t)vextq_s8((int8x16_t)v2039.val[0], v1388, 4uLL);
      *(int32x2_t *)v1388.i8 = vrev64_s32(*(int32x2_t *)v1472);
      v1476 = (int32x4_t)vextq_s8((int8x16_t)v2039.val[1], v1388, 4uLL);
      v1477 = (int32x4_t)vextq_s8((int8x16_t)v2039.val[2], v698, 4uLL);
      v1478 = vshlq_n_s32(v1475, 2uLL);
      v2039.val[0] = (float32x4_t)vaddq_s32(vaddq_s32(vaddq_s32(vaddq_s32(vaddq_s32((int32x4_t)v2039.val[0], vshlq_n_s32((int32x4_t)v2039.val[1], 2uLL)), vshlq_n_s32((int32x4_t)v2039.val[2], 1uLL)), v1473), v1474), v1475);
      v2039.val[1] = (float32x4_t)vaddq_s32(vaddq_s32(vaddq_s32(vaddq_s32(vaddq_s32((int32x4_t)v2039.val[1], v1473), vshlq_n_s32((int32x4_t)v2039.val[3], 1uLL)), v1474), v1478), v1476);
      v1479 = vshlq_n_s32(v1476, 2uLL);
      *(int32x2_t *)v698.i8 = vrev64_s32(*(int32x2_t *)v698.i8);
      v2039.val[2] = (float32x4_t)vaddq_s32(vaddq_s32(vaddq_s32(vaddq_s32(vaddq_s32((int32x4_t)v2039.val[2], v1474), v1478), v1479), vshlq_n_s32(v1475, 1uLL)), v1477);
      v2039.val[3] = (float32x4_t)vaddq_s32(vaddq_s32(vaddq_s32(vaddq_s32(vaddq_s32((int32x4_t)v2039.val[3], v1478), v1479), vshlq_n_s32(v1476, 1uLL)), vshlq_n_s32(v1477, 2uLL)), (int32x4_t)vextq_s8((int8x16_t)v2039.val[3], v698, 4uLL));
      vst4q_f32(v1471, v2039);
      v1480 = (float *)v1680;
      v1481 = (const float *)v1680;
      v2040 = vld4q_f32(v1481);
      v1481 += 16;
      v1388.i64[0] = *(_QWORD *)v1481;
      v698.i64[0] = *((_QWORD *)v1481 + 1);
      v1482 = vshlq_n_s32((int32x4_t)v2040.val[2], 2uLL);
      v1483 = vshlq_n_s32((int32x4_t)v2040.val[3], 2uLL);
      v1484 = (int32x4_t)vextq_s8((int8x16_t)v2040.val[0], v1388, 4uLL);
      *(int32x2_t *)v1388.i8 = vrev64_s32(*(int32x2_t *)v1481);
      v1485 = (int32x4_t)vextq_s8((int8x16_t)v2040.val[1], v1388, 4uLL);
      v1486 = (int32x4_t)vextq_s8((int8x16_t)v2040.val[2], v698, 4uLL);
      v1487 = vshlq_n_s32(v1484, 2uLL);
      v2040.val[0] = (float32x4_t)vaddq_s32(vaddq_s32(vaddq_s32(vaddq_s32(vaddq_s32((int32x4_t)v2040.val[0], vshlq_n_s32((int32x4_t)v2040.val[1], 2uLL)), vshlq_n_s32((int32x4_t)v2040.val[2], 1uLL)), v1482), v1483), v1484);
      v2040.val[1] = (float32x4_t)vaddq_s32(vaddq_s32(vaddq_s32(vaddq_s32(vaddq_s32((int32x4_t)v2040.val[1], v1482), vshlq_n_s32((int32x4_t)v2040.val[3], 1uLL)), v1483), v1487), v1485);
      v1488 = vshlq_n_s32(v1485, 2uLL);
      *(int32x2_t *)v698.i8 = vrev64_s32(*(int32x2_t *)v698.i8);
      v2040.val[2] = (float32x4_t)vaddq_s32(vaddq_s32(vaddq_s32(vaddq_s32(vaddq_s32((int32x4_t)v2040.val[2], v1483), v1487), v1488), vshlq_n_s32(v1484, 1uLL)), v1486);
      v2040.val[3] = (float32x4_t)vaddq_s32(vaddq_s32(vaddq_s32(vaddq_s32(vaddq_s32((int32x4_t)v2040.val[3], v1487), v1488), vshlq_n_s32(v1485, 1uLL)), vshlq_n_s32(v1486, 2uLL)), (int32x4_t)vextq_s8((int8x16_t)v2040.val[3], v698, 4uLL));
      vst4q_f32(v1480, v2040);
      v1489 = (float *)v1681;
      v1490 = (const float *)v1681;
      v2041 = vld4q_f32(v1490);
      v1490 += 16;
      v1388.i64[0] = *(_QWORD *)v1490;
      v698.i64[0] = *((_QWORD *)v1490 + 1);
      v1491 = vshlq_n_s32((int32x4_t)v2041.val[2], 2uLL);
      v1492 = vshlq_n_s32((int32x4_t)v2041.val[3], 2uLL);
      v1493 = (int32x4_t)vextq_s8((int8x16_t)v2041.val[0], v1388, 4uLL);
      *(int32x2_t *)v1388.i8 = vrev64_s32(*(int32x2_t *)v1490);
      v1494 = (int32x4_t)vextq_s8((int8x16_t)v2041.val[1], v1388, 4uLL);
      v1495 = (int32x4_t)vextq_s8((int8x16_t)v2041.val[2], v698, 4uLL);
      v1496 = vshlq_n_s32(v1493, 2uLL);
      v2041.val[0] = (float32x4_t)vaddq_s32(vaddq_s32(vaddq_s32(vaddq_s32(vaddq_s32((int32x4_t)v2041.val[0], vshlq_n_s32((int32x4_t)v2041.val[1], 2uLL)), vshlq_n_s32((int32x4_t)v2041.val[2], 1uLL)), v1491), v1492), v1493);
      v2041.val[1] = (float32x4_t)vaddq_s32(vaddq_s32(vaddq_s32(vaddq_s32(vaddq_s32((int32x4_t)v2041.val[1], v1491), vshlq_n_s32((int32x4_t)v2041.val[3], 1uLL)), v1492), v1496), v1494);
      v1497 = vshlq_n_s32(v1494, 2uLL);
      *(int32x2_t *)v698.i8 = vrev64_s32(*(int32x2_t *)v698.i8);
      v2041.val[2] = (float32x4_t)vaddq_s32(vaddq_s32(vaddq_s32(vaddq_s32(vaddq_s32((int32x4_t)v2041.val[2], v1492), v1496), v1497), vshlq_n_s32(v1493, 1uLL)), v1495);
      v2041.val[3] = (float32x4_t)vaddq_s32(vaddq_s32(vaddq_s32(vaddq_s32(vaddq_s32((int32x4_t)v2041.val[3], v1496), v1497), vshlq_n_s32(v1494, 1uLL)), vshlq_n_s32(v1495, 2uLL)), (int32x4_t)vextq_s8((int8x16_t)v2041.val[3], v698, 4uLL));
      vst4q_f32(v1489, v2041);
      v1498 = (float *)v1682;
      v1499 = (const float *)v1682;
      v2042 = vld4q_f32(v1499);
      v1499 += 16;
      v1388.i64[0] = *(_QWORD *)v1499;
      v698.i64[0] = *((_QWORD *)v1499 + 1);
      v1500 = vshlq_n_s32((int32x4_t)v2042.val[2], 2uLL);
      v1501 = vshlq_n_s32((int32x4_t)v2042.val[3], 2uLL);
      v1502 = (int32x4_t)vextq_s8((int8x16_t)v2042.val[0], v1388, 4uLL);
      *(int32x2_t *)v1388.i8 = vrev64_s32(*(int32x2_t *)v1499);
      v1503 = (int32x4_t)vextq_s8((int8x16_t)v2042.val[1], v1388, 4uLL);
      v1504 = (int32x4_t)vextq_s8((int8x16_t)v2042.val[2], v698, 4uLL);
      v1505 = vshlq_n_s32(v1502, 2uLL);
      v2042.val[0] = (float32x4_t)vaddq_s32(vaddq_s32(vaddq_s32(vaddq_s32(vaddq_s32((int32x4_t)v2042.val[0], vshlq_n_s32((int32x4_t)v2042.val[1], 2uLL)), vshlq_n_s32((int32x4_t)v2042.val[2], 1uLL)), v1500), v1501), v1502);
      v2042.val[1] = (float32x4_t)vaddq_s32(vaddq_s32(vaddq_s32(vaddq_s32(vaddq_s32((int32x4_t)v2042.val[1], v1500), vshlq_n_s32((int32x4_t)v2042.val[3], 1uLL)), v1501), v1505), v1503);
      v1506 = vshlq_n_s32(v1503, 2uLL);
      *(int32x2_t *)v698.i8 = vrev64_s32(*(int32x2_t *)v698.i8);
      v2042.val[2] = (float32x4_t)vaddq_s32(vaddq_s32(vaddq_s32(vaddq_s32(vaddq_s32((int32x4_t)v2042.val[2], v1501), v1505), v1506), vshlq_n_s32(v1502, 1uLL)), v1504);
      v2042.val[3] = (float32x4_t)vaddq_s32(vaddq_s32(vaddq_s32(vaddq_s32(vaddq_s32((int32x4_t)v2042.val[3], v1505), v1506), vshlq_n_s32(v1503, 1uLL)), vshlq_n_s32(v1504, 2uLL)), (int32x4_t)vextq_s8((int8x16_t)v2042.val[3], v698, 4uLL));
      vst4q_f32(v1498, v2042);
      v1507 = (float *)v1683;
      v1508 = (const float *)v1683;
      v2043 = vld4q_f32(v1508);
      v1508 += 16;
      v1388.i64[0] = *(_QWORD *)v1508;
      v698.i64[0] = *((_QWORD *)v1508 + 1);
      v1509 = vshlq_n_s32((int32x4_t)v2043.val[2], 2uLL);
      v1510 = vshlq_n_s32((int32x4_t)v2043.val[3], 2uLL);
      v1511 = (int32x4_t)vextq_s8((int8x16_t)v2043.val[0], v1388, 4uLL);
      *(int32x2_t *)v1388.i8 = vrev64_s32(*(int32x2_t *)v1508);
      v1512 = (int32x4_t)vextq_s8((int8x16_t)v2043.val[1], v1388, 4uLL);
      v1513 = (int32x4_t)vextq_s8((int8x16_t)v2043.val[2], v698, 4uLL);
      v1514 = vshlq_n_s32(v1511, 2uLL);
      v2043.val[0] = (float32x4_t)vaddq_s32(vaddq_s32(vaddq_s32(vaddq_s32(vaddq_s32((int32x4_t)v2043.val[0], vshlq_n_s32((int32x4_t)v2043.val[1], 2uLL)), vshlq_n_s32((int32x4_t)v2043.val[2], 1uLL)), v1509), v1510), v1511);
      v2043.val[1] = (float32x4_t)vaddq_s32(vaddq_s32(vaddq_s32(vaddq_s32(vaddq_s32((int32x4_t)v2043.val[1], v1509), vshlq_n_s32((int32x4_t)v2043.val[3], 1uLL)), v1510), v1514), v1512);
      v1515 = vshlq_n_s32(v1512, 2uLL);
      *(int32x2_t *)v698.i8 = vrev64_s32(*(int32x2_t *)v698.i8);
      v2043.val[2] = (float32x4_t)vaddq_s32(vaddq_s32(vaddq_s32(vaddq_s32(vaddq_s32((int32x4_t)v2043.val[2], v1510), v1514), v1515), vshlq_n_s32(v1511, 1uLL)), v1513);
      v2043.val[3] = (float32x4_t)vaddq_s32(vaddq_s32(vaddq_s32(vaddq_s32(vaddq_s32((int32x4_t)v2043.val[3], v1514), v1515), vshlq_n_s32(v1512, 1uLL)), vshlq_n_s32(v1513, 2uLL)), (int32x4_t)vextq_s8((int8x16_t)v2043.val[3], v698, 4uLL));
      vst4q_f32(v1507, v2043);
      v1516 = (float *)v1684;
      v1517 = (const float *)v1684;
      v2044 = vld4q_f32(v1517);
      v1517 += 16;
      v1388.i64[0] = *(_QWORD *)v1517;
      v698.i64[0] = *((_QWORD *)v1517 + 1);
      v1518 = vshlq_n_s32((int32x4_t)v2044.val[2], 2uLL);
      v1519 = vshlq_n_s32((int32x4_t)v2044.val[3], 2uLL);
      v1520 = (int32x4_t)vextq_s8((int8x16_t)v2044.val[0], v1388, 4uLL);
      *(int32x2_t *)v1388.i8 = vrev64_s32(*(int32x2_t *)v1517);
      v1521 = (int32x4_t)vextq_s8((int8x16_t)v2044.val[1], v1388, 4uLL);
      v1522 = (int32x4_t)vextq_s8((int8x16_t)v2044.val[2], v698, 4uLL);
      v1523 = vshlq_n_s32(v1520, 2uLL);
      v2044.val[0] = (float32x4_t)vaddq_s32(vaddq_s32(vaddq_s32(vaddq_s32(vaddq_s32((int32x4_t)v2044.val[0], vshlq_n_s32((int32x4_t)v2044.val[1], 2uLL)), vshlq_n_s32((int32x4_t)v2044.val[2], 1uLL)), v1518), v1519), v1520);
      v2044.val[1] = (float32x4_t)vaddq_s32(vaddq_s32(vaddq_s32(vaddq_s32(vaddq_s32((int32x4_t)v2044.val[1], v1518), vshlq_n_s32((int32x4_t)v2044.val[3], 1uLL)), v1519), v1523), v1521);
      v1524 = vshlq_n_s32(v1521, 2uLL);
      *(int32x2_t *)v698.i8 = vrev64_s32(*(int32x2_t *)v698.i8);
      v2044.val[2] = (float32x4_t)vaddq_s32(vaddq_s32(vaddq_s32(vaddq_s32(vaddq_s32((int32x4_t)v2044.val[2], v1519), v1523), v1524), vshlq_n_s32(v1520, 1uLL)), v1522);
      v2044.val[3] = (float32x4_t)vaddq_s32(vaddq_s32(vaddq_s32(vaddq_s32(vaddq_s32((int32x4_t)v2044.val[3], v1523), v1524), vshlq_n_s32(v1521, 1uLL)), vshlq_n_s32(v1522, 2uLL)), (int32x4_t)vextq_s8((int8x16_t)v2044.val[3], v698, 4uLL));
      vst4q_f32(v1516, v2044);
      v1525 = (const float *)v1685;
      v1526 = (float *)v1685;
      v2045 = vld4q_f32(v1525);
      v1525 += 16;
      v1388.i64[0] = *(_QWORD *)v1525;
      v698.i64[0] = *((_QWORD *)v1525 + 1);
      v1527 = vshlq_n_s32((int32x4_t)v2045.val[2], 2uLL);
      v1528 = vshlq_n_s32((int32x4_t)v2045.val[3], 2uLL);
      v1529 = (int32x4_t)vextq_s8((int8x16_t)v2045.val[0], v1388, 4uLL);
      *(int32x2_t *)v1388.i8 = vrev64_s32(*(int32x2_t *)v1525);
      v1530 = (int32x4_t)vextq_s8((int8x16_t)v2045.val[1], v1388, 4uLL);
      v1531 = (int32x4_t)vextq_s8((int8x16_t)v2045.val[2], v698, 4uLL);
      v1532 = vshlq_n_s32(v1529, 2uLL);
      v2045.val[0] = (float32x4_t)vaddq_s32(vaddq_s32(vaddq_s32(vaddq_s32(vaddq_s32((int32x4_t)v2045.val[0], vshlq_n_s32((int32x4_t)v2045.val[1], 2uLL)), vshlq_n_s32((int32x4_t)v2045.val[2], 1uLL)), v1527), v1528), v1529);
      v2045.val[1] = (float32x4_t)vaddq_s32(vaddq_s32(vaddq_s32(vaddq_s32(vaddq_s32((int32x4_t)v2045.val[1], v1527), vshlq_n_s32((int32x4_t)v2045.val[3], 1uLL)), v1528), v1532), v1530);
      v1533 = vshlq_n_s32(v1530, 2uLL);
      *(int32x2_t *)v698.i8 = vrev64_s32(*(int32x2_t *)v698.i8);
      v2045.val[2] = (float32x4_t)vaddq_s32(vaddq_s32(vaddq_s32(vaddq_s32(vaddq_s32((int32x4_t)v2045.val[2], v1528), v1532), v1533), vshlq_n_s32(v1529, 1uLL)), v1531);
      v2045.val[3] = (float32x4_t)vaddq_s32(vaddq_s32(vaddq_s32(vaddq_s32(vaddq_s32((int32x4_t)v2045.val[3], v1532), v1533), vshlq_n_s32(v1530, 1uLL)), vshlq_n_s32(v1531, 2uLL)), (int32x4_t)vextq_s8((int8x16_t)v2045.val[3], v698, 4uLL));
      vst4q_f32(v1526, v2045);
      v1534 = (const float *)v1688;
      v1535 = (float *)v1688;
      v2046 = vld4q_f32(v1534);
      v1534 += 16;
      v1388.i64[0] = *(_QWORD *)v1534;
      v698.i64[0] = *((_QWORD *)v1534 + 1);
      v1536 = vshlq_n_s32((int32x4_t)v2046.val[2], 2uLL);
      v1537 = vshlq_n_s32((int32x4_t)v2046.val[3], 2uLL);
      v1538 = (int32x4_t)vextq_s8((int8x16_t)v2046.val[0], v1388, 4uLL);
      *(int32x2_t *)v1388.i8 = vrev64_s32(*(int32x2_t *)v1534);
      v1539 = (int32x4_t)vextq_s8((int8x16_t)v2046.val[1], v1388, 4uLL);
      v1540 = (int32x4_t)vextq_s8((int8x16_t)v2046.val[2], v698, 4uLL);
      v1541 = vshlq_n_s32(v1538, 2uLL);
      v2046.val[0] = (float32x4_t)vaddq_s32(vaddq_s32(vaddq_s32(vaddq_s32(vaddq_s32((int32x4_t)v2046.val[0], vshlq_n_s32((int32x4_t)v2046.val[1], 2uLL)), vshlq_n_s32((int32x4_t)v2046.val[2], 1uLL)), v1536), v1537), v1538);
      v2046.val[1] = (float32x4_t)vaddq_s32(vaddq_s32(vaddq_s32(vaddq_s32(vaddq_s32((int32x4_t)v2046.val[1], v1536), vshlq_n_s32((int32x4_t)v2046.val[3], 1uLL)), v1537), v1541), v1539);
      v1542 = vshlq_n_s32(v1539, 2uLL);
      *(int32x2_t *)v698.i8 = vrev64_s32(*(int32x2_t *)v698.i8);
      v2046.val[2] = (float32x4_t)vaddq_s32(vaddq_s32(vaddq_s32(vaddq_s32(vaddq_s32((int32x4_t)v2046.val[2], v1537), v1541), v1542), vshlq_n_s32(v1538, 1uLL)), v1540);
      v2046.val[3] = (float32x4_t)vaddq_s32(vaddq_s32(vaddq_s32(vaddq_s32(vaddq_s32((int32x4_t)v2046.val[3], v1541), v1542), vshlq_n_s32(v1539, 1uLL)), vshlq_n_s32(v1540, 2uLL)), (int32x4_t)vextq_s8((int8x16_t)v2046.val[3], v698, 4uLL));
      vst4q_f32(v1535, v2046);
      v1543 = (const float *)v1689;
      v1544 = (float *)v1689;
      v2047 = vld4q_f32(v1543);
      v1543 += 16;
      v1388.i64[0] = *(_QWORD *)v1543;
      v698.i64[0] = *((_QWORD *)v1543 + 1);
      v1545 = vshlq_n_s32((int32x4_t)v2047.val[2], 2uLL);
      v1546 = vshlq_n_s32((int32x4_t)v2047.val[3], 2uLL);
      v1547 = (int32x4_t)vextq_s8((int8x16_t)v2047.val[0], v1388, 4uLL);
      *(int32x2_t *)v1388.i8 = vrev64_s32(*(int32x2_t *)v1543);
      v1548 = (int32x4_t)vextq_s8((int8x16_t)v2047.val[1], v1388, 4uLL);
      v1549 = (int32x4_t)vextq_s8((int8x16_t)v2047.val[2], v698, 4uLL);
      v1550 = vshlq_n_s32(v1547, 2uLL);
      v2047.val[0] = (float32x4_t)vaddq_s32(vaddq_s32(vaddq_s32(vaddq_s32(vaddq_s32((int32x4_t)v2047.val[0], vshlq_n_s32((int32x4_t)v2047.val[1], 2uLL)), vshlq_n_s32((int32x4_t)v2047.val[2], 1uLL)), v1545), v1546), v1547);
      v2047.val[1] = (float32x4_t)vaddq_s32(vaddq_s32(vaddq_s32(vaddq_s32(vaddq_s32((int32x4_t)v2047.val[1], v1545), vshlq_n_s32((int32x4_t)v2047.val[3], 1uLL)), v1546), v1550), v1548);
      v1551 = vshlq_n_s32(v1548, 2uLL);
      *(int32x2_t *)v698.i8 = vrev64_s32(*(int32x2_t *)v698.i8);
      v2047.val[2] = (float32x4_t)vaddq_s32(vaddq_s32(vaddq_s32(vaddq_s32(vaddq_s32((int32x4_t)v2047.val[2], v1546), v1550), v1551), vshlq_n_s32(v1547, 1uLL)), v1549);
      v2047.val[3] = (float32x4_t)vaddq_s32(vaddq_s32(vaddq_s32(vaddq_s32(vaddq_s32((int32x4_t)v2047.val[3], v1550), v1551), vshlq_n_s32(v1548, 1uLL)), vshlq_n_s32(v1549, 2uLL)), (int32x4_t)vextq_s8((int8x16_t)v2047.val[3], v698, 4uLL));
      vst4q_f32(v1544, v2047);
      v1552 = (const float *)v1690;
      v1553 = (float *)v1690;
      v2048 = vld4q_f32(v1552);
      v1552 += 16;
      v1388.i64[0] = *(_QWORD *)v1552;
      v698.i64[0] = *((_QWORD *)v1552 + 1);
      v1554 = vshlq_n_s32((int32x4_t)v2048.val[2], 2uLL);
      v1555 = vshlq_n_s32((int32x4_t)v2048.val[3], 2uLL);
      v1556 = (int32x4_t)vextq_s8((int8x16_t)v2048.val[0], v1388, 4uLL);
      *(int32x2_t *)v1388.i8 = vrev64_s32(*(int32x2_t *)v1552);
      v1557 = (int32x4_t)vextq_s8((int8x16_t)v2048.val[1], v1388, 4uLL);
      v1558 = (int32x4_t)vextq_s8((int8x16_t)v2048.val[2], v698, 4uLL);
      v1559 = vshlq_n_s32(v1556, 2uLL);
      v2048.val[0] = (float32x4_t)vaddq_s32(vaddq_s32(vaddq_s32(vaddq_s32(vaddq_s32((int32x4_t)v2048.val[0], vshlq_n_s32((int32x4_t)v2048.val[1], 2uLL)), vshlq_n_s32((int32x4_t)v2048.val[2], 1uLL)), v1554), v1555), v1556);
      v2048.val[1] = (float32x4_t)vaddq_s32(vaddq_s32(vaddq_s32(vaddq_s32(vaddq_s32((int32x4_t)v2048.val[1], v1554), vshlq_n_s32((int32x4_t)v2048.val[3], 1uLL)), v1555), v1559), v1557);
      v1560 = vshlq_n_s32(v1557, 2uLL);
      *(int32x2_t *)v698.i8 = vrev64_s32(*(int32x2_t *)v698.i8);
      v2048.val[2] = (float32x4_t)vaddq_s32(vaddq_s32(vaddq_s32(vaddq_s32(vaddq_s32((int32x4_t)v2048.val[2], v1555), v1559), v1560), vshlq_n_s32(v1556, 1uLL)), v1558);
      v2048.val[3] = (float32x4_t)vaddq_s32(vaddq_s32(vaddq_s32(vaddq_s32(vaddq_s32((int32x4_t)v2048.val[3], v1559), v1560), vshlq_n_s32(v1557, 1uLL)), vshlq_n_s32(v1558, 2uLL)), (int32x4_t)vextq_s8((int8x16_t)v2048.val[3], v698, 4uLL));
      vst4q_f32(v1553, v2048);
      v1561 = (const float *)v1691;
      v1562 = (float *)v1691;
      v2049 = vld4q_f32(v1561);
      v1561 += 16;
      v1388.i64[0] = *(_QWORD *)v1561;
      v698.i64[0] = *((_QWORD *)v1561 + 1);
      v1563 = vshlq_n_s32((int32x4_t)v2049.val[2], 2uLL);
      v1564 = vshlq_n_s32((int32x4_t)v2049.val[3], 2uLL);
      v1565 = (int32x4_t)vextq_s8((int8x16_t)v2049.val[0], v1388, 4uLL);
      *(int32x2_t *)v1388.i8 = vrev64_s32(*(int32x2_t *)v1561);
      v1566 = (int32x4_t)vextq_s8((int8x16_t)v2049.val[1], v1388, 4uLL);
      v1567 = (int32x4_t)vextq_s8((int8x16_t)v2049.val[2], v698, 4uLL);
      v1568 = vshlq_n_s32(v1565, 2uLL);
      v2049.val[0] = (float32x4_t)vaddq_s32(vaddq_s32(vaddq_s32(vaddq_s32(vaddq_s32((int32x4_t)v2049.val[0], vshlq_n_s32((int32x4_t)v2049.val[1], 2uLL)), vshlq_n_s32((int32x4_t)v2049.val[2], 1uLL)), v1563), v1564), v1565);
      v2049.val[1] = (float32x4_t)vaddq_s32(vaddq_s32(vaddq_s32(vaddq_s32(vaddq_s32((int32x4_t)v2049.val[1], v1563), vshlq_n_s32((int32x4_t)v2049.val[3], 1uLL)), v1564), v1568), v1566);
      v1569 = vshlq_n_s32(v1566, 2uLL);
      *(int32x2_t *)v698.i8 = vrev64_s32(*(int32x2_t *)v698.i8);
      v2049.val[2] = (float32x4_t)vaddq_s32(vaddq_s32(vaddq_s32(vaddq_s32(vaddq_s32((int32x4_t)v2049.val[2], v1564), v1568), v1569), vshlq_n_s32(v1565, 1uLL)), v1567);
      v2049.val[3] = (float32x4_t)vaddq_s32(vaddq_s32(vaddq_s32(vaddq_s32(vaddq_s32((int32x4_t)v2049.val[3], v1568), v1569), vshlq_n_s32(v1566, 1uLL)), vshlq_n_s32(v1567, 2uLL)), (int32x4_t)vextq_s8((int8x16_t)v2049.val[3], v698, 4uLL));
      vst4q_f32(v1562, v2049);
      v1570 = (const float *)v1692;
      v1571 = (float *)v1692;
      v2050 = vld4q_f32(v1570);
      v1570 += 16;
      v1388.i64[0] = *(_QWORD *)v1570;
      v698.i64[0] = *((_QWORD *)v1570 + 1);
      v1572 = vshlq_n_s32((int32x4_t)v2050.val[2], 2uLL);
      v1573 = vshlq_n_s32((int32x4_t)v2050.val[3], 2uLL);
      v1574 = (int32x4_t)vextq_s8((int8x16_t)v2050.val[0], v1388, 4uLL);
      *(int32x2_t *)v1388.i8 = vrev64_s32(*(int32x2_t *)v1570);
      v1575 = (int32x4_t)vextq_s8((int8x16_t)v2050.val[1], v1388, 4uLL);
      v1576 = (int32x4_t)vextq_s8((int8x16_t)v2050.val[2], v698, 4uLL);
      v1577 = vshlq_n_s32(v1574, 2uLL);
      v2050.val[0] = (float32x4_t)vaddq_s32(vaddq_s32(vaddq_s32(vaddq_s32(vaddq_s32((int32x4_t)v2050.val[0], vshlq_n_s32((int32x4_t)v2050.val[1], 2uLL)), vshlq_n_s32((int32x4_t)v2050.val[2], 1uLL)), v1572), v1573), v1574);
      v2050.val[1] = (float32x4_t)vaddq_s32(vaddq_s32(vaddq_s32(vaddq_s32(vaddq_s32((int32x4_t)v2050.val[1], v1572), vshlq_n_s32((int32x4_t)v2050.val[3], 1uLL)), v1573), v1577), v1575);
      v1578 = vshlq_n_s32(v1575, 2uLL);
      *(int32x2_t *)v698.i8 = vrev64_s32(*(int32x2_t *)v698.i8);
      v2050.val[2] = (float32x4_t)vaddq_s32(vaddq_s32(vaddq_s32(vaddq_s32(vaddq_s32((int32x4_t)v2050.val[2], v1573), v1577), v1578), vshlq_n_s32(v1574, 1uLL)), v1576);
      v2050.val[3] = (float32x4_t)vaddq_s32(vaddq_s32(vaddq_s32(vaddq_s32(vaddq_s32((int32x4_t)v2050.val[3], v1577), v1578), vshlq_n_s32(v1575, 1uLL)), vshlq_n_s32(v1576, 2uLL)), (int32x4_t)vextq_s8((int8x16_t)v2050.val[3], v698, 4uLL));
      vst4q_f32(v1571, v2050);
      v1579 = (const float *)v1693;
      v1580 = (float *)v1693;
      v2051 = vld4q_f32(v1579);
      v1579 += 16;
      v1388.i64[0] = *(_QWORD *)v1579;
      v698.i64[0] = *((_QWORD *)v1579 + 1);
      v1581 = vshlq_n_s32((int32x4_t)v2051.val[2], 2uLL);
      v1582 = vshlq_n_s32((int32x4_t)v2051.val[3], 2uLL);
      v1583 = (int32x4_t)vextq_s8((int8x16_t)v2051.val[0], v1388, 4uLL);
      *(int32x2_t *)v1388.i8 = vrev64_s32(*(int32x2_t *)v1579);
      v1584 = (int32x4_t)vextq_s8((int8x16_t)v2051.val[1], v1388, 4uLL);
      v1585 = (int32x4_t)vextq_s8((int8x16_t)v2051.val[2], v698, 4uLL);
      v1586 = vshlq_n_s32(v1583, 2uLL);
      v2051.val[0] = (float32x4_t)vaddq_s32(vaddq_s32(vaddq_s32(vaddq_s32(vaddq_s32((int32x4_t)v2051.val[0], vshlq_n_s32((int32x4_t)v2051.val[1], 2uLL)), vshlq_n_s32((int32x4_t)v2051.val[2], 1uLL)), v1581), v1582), v1583);
      v2051.val[1] = (float32x4_t)vaddq_s32(vaddq_s32(vaddq_s32(vaddq_s32(vaddq_s32((int32x4_t)v2051.val[1], v1581), vshlq_n_s32((int32x4_t)v2051.val[3], 1uLL)), v1582), v1586), v1584);
      v1587 = vshlq_n_s32(v1584, 2uLL);
      *(int32x2_t *)v698.i8 = vrev64_s32(*(int32x2_t *)v698.i8);
      v2051.val[2] = (float32x4_t)vaddq_s32(vaddq_s32(vaddq_s32(vaddq_s32(vaddq_s32((int32x4_t)v2051.val[2], v1582), v1586), v1587), vshlq_n_s32(v1583, 1uLL)), v1585);
      v2051.val[3] = (float32x4_t)vaddq_s32(vaddq_s32(vaddq_s32(vaddq_s32(vaddq_s32((int32x4_t)v2051.val[3], v1586), v1587), vshlq_n_s32(v1584, 1uLL)), vshlq_n_s32(v1585, 2uLL)), (int32x4_t)vextq_s8((int8x16_t)v2051.val[3], v698, 4uLL));
      vst4q_f32(v1580, v2051);
      v1588 = (const float *)v1694;
      v1589 = (float *)v1694;
      v2052 = vld4q_f32(v1588);
      v1588 += 16;
      v1388.i64[0] = *(_QWORD *)v1588;
      v698.i64[0] = *((_QWORD *)v1588 + 1);
      v1590 = vshlq_n_s32((int32x4_t)v2052.val[2], 2uLL);
      v1591 = vshlq_n_s32((int32x4_t)v2052.val[3], 2uLL);
      v1592 = (int32x4_t)vextq_s8((int8x16_t)v2052.val[0], v1388, 4uLL);
      *(int32x2_t *)v1388.i8 = vrev64_s32(*(int32x2_t *)v1588);
      v1593 = (int32x4_t)vextq_s8((int8x16_t)v2052.val[1], v1388, 4uLL);
      v1594 = (int32x4_t)vextq_s8((int8x16_t)v2052.val[2], v698, 4uLL);
      v1595 = vshlq_n_s32(v1592, 2uLL);
      v2052.val[0] = (float32x4_t)vaddq_s32(vaddq_s32(vaddq_s32(vaddq_s32(vaddq_s32((int32x4_t)v2052.val[0], vshlq_n_s32((int32x4_t)v2052.val[1], 2uLL)), vshlq_n_s32((int32x4_t)v2052.val[2], 1uLL)), v1590), v1591), v1592);
      v2052.val[1] = (float32x4_t)vaddq_s32(vaddq_s32(vaddq_s32(vaddq_s32(vaddq_s32((int32x4_t)v2052.val[1], v1590), vshlq_n_s32((int32x4_t)v2052.val[3], 1uLL)), v1591), v1595), v1593);
      v1596 = vshlq_n_s32(v1593, 2uLL);
      *(int32x2_t *)v698.i8 = vrev64_s32(*(int32x2_t *)v698.i8);
      v2052.val[2] = (float32x4_t)vaddq_s32(vaddq_s32(vaddq_s32(vaddq_s32(vaddq_s32((int32x4_t)v2052.val[2], v1591), v1595), v1596), vshlq_n_s32(v1592, 1uLL)), v1594);
      v2052.val[3] = (float32x4_t)vaddq_s32(vaddq_s32(vaddq_s32(vaddq_s32(vaddq_s32((int32x4_t)v2052.val[3], v1595), v1596), vshlq_n_s32(v1593, 1uLL)), vshlq_n_s32(v1594, 2uLL)), (int32x4_t)vextq_s8((int8x16_t)v2052.val[3], v698, 4uLL));
      vst4q_f32(v1589, v2052);
      v1597 = (const float *)v1695;
      v1598 = (float *)v1695;
      v2053 = vld4q_f32(v1597);
      v1597 += 16;
      v1388.i64[0] = *(_QWORD *)v1597;
      v698.i64[0] = *((_QWORD *)v1597 + 1);
      v1599 = vshlq_n_s32((int32x4_t)v2053.val[2], 2uLL);
      v1600 = vshlq_n_s32((int32x4_t)v2053.val[3], 2uLL);
      v1601 = (int32x4_t)vextq_s8((int8x16_t)v2053.val[0], v1388, 4uLL);
      *(int32x2_t *)v1388.i8 = vrev64_s32(*(int32x2_t *)v1597);
      v1602 = (int32x4_t)vextq_s8((int8x16_t)v2053.val[1], v1388, 4uLL);
      v1603 = (int32x4_t)vextq_s8((int8x16_t)v2053.val[2], v698, 4uLL);
      v1604 = vshlq_n_s32(v1601, 2uLL);
      v2053.val[0] = (float32x4_t)vaddq_s32(vaddq_s32(vaddq_s32(vaddq_s32(vaddq_s32((int32x4_t)v2053.val[0], vshlq_n_s32((int32x4_t)v2053.val[1], 2uLL)), vshlq_n_s32((int32x4_t)v2053.val[2], 1uLL)), v1599), v1600), v1601);
      v2053.val[1] = (float32x4_t)vaddq_s32(vaddq_s32(vaddq_s32(vaddq_s32(vaddq_s32((int32x4_t)v2053.val[1], v1599), vshlq_n_s32((int32x4_t)v2053.val[3], 1uLL)), v1600), v1604), v1602);
      v1605 = vshlq_n_s32(v1602, 2uLL);
      *(int32x2_t *)v698.i8 = vrev64_s32(*(int32x2_t *)v698.i8);
      v2053.val[2] = (float32x4_t)vaddq_s32(vaddq_s32(vaddq_s32(vaddq_s32(vaddq_s32((int32x4_t)v2053.val[2], v1600), v1604), v1605), vshlq_n_s32(v1601, 1uLL)), v1603);
      v2053.val[3] = (float32x4_t)vaddq_s32(vaddq_s32(vaddq_s32(vaddq_s32(vaddq_s32((int32x4_t)v2053.val[3], v1604), v1605), vshlq_n_s32(v1602, 1uLL)), vshlq_n_s32(v1603, 2uLL)), (int32x4_t)vextq_s8((int8x16_t)v2053.val[3], v698, 4uLL));
      vst4q_f32(v1598, v2053);
      v1606 = *(_QWORD *)((char *)v1665 + ((v614 - 0x200000000) >> 29));
      v1607 = (float32x2_t *)(v1606 + 4 * v1661);
      v1608 = (int8x16_t *)(v1606 + v1660);
      v1609 = -12;
      do
      {
        v1610 = vcvtq_f32_s32(*v1389);
        v1611 = vcvtq_f32_s32(v1389[64]);
        v1612 = vcvtq_f32_s32(v1389[32]);
        v1613 = vmulq_f32(v1610, v1611);
        v1614 = vaddq_f32(v1610, v1611);
        v1615 = vcvtq_f32_s32(v1389[1]);
        v1616 = vcvtq_f32_s32(v1389[65]);
        v1617 = vcvtq_f32_s32(v1389[33]);
        v1618 = vmulq_f32(v1615, v1616);
        v1619 = vaddq_f32(v1615, v1616);
        v1620 = vsubq_f32(vsubq_f32(v1613, vmulq_f32(v1612, v1612)), vmulq_f32(vmulq_f32(v1614, v1614), v605));
        v1621 = vsubq_f32(v1618, vmulq_f32(v1617, v1617));
        v1622 = vcvtq_f32_s32(v1389[2]);
        v1623 = vcvtq_f32_s32(v1389[66]);
        v1624 = vcvtq_f32_s32(v1389[34]);
        v1625 = vmulq_f32(v1622, v1623);
        v1626 = vaddq_f32(v1622, v1623);
        v335 = (int8x16_t)vsubq_f32(vsubq_f32(v1625, vmulq_f32(v1624, v1624)), vmulq_f32(vmulq_f32(v1626, v1626), v605));
        v1608[-2] = (int8x16_t)v1620;
        v1608[-1] = (int8x16_t)vsubq_f32(v1621, vmulq_f32(vmulq_f32(v1619, v1619), v605));
        *v1608 = v335;
        v1608 += 3;
        v1609 += 12;
        v1389 += 3;
      }
      while (v1609 < 0x6C);
      v1627 = vcvt_f32_s32(*(int32x2_t *)v1676.i8);
      v1628 = vcvt_f32_s32(*(int32x2_t *)v1696.i8);
      v1629 = vcvt_f32_s32(*(int32x2_t *)v1686.i8);
      v1630 = vmul_f32(v1627, v1628);
      v1631 = vadd_f32(v1627, v1628);
      v1632 = vcvt_f32_s32((int32x2_t)v1676.u64[1]);
      v1633 = vcvt_f32_s32((int32x2_t)v1696.u64[1]);
      v1634 = vcvt_f32_s32((int32x2_t)v1686.u64[1]);
      v1635 = vmul_f32(v1632, v1633);
      v1636 = vadd_f32(v1632, v1633);
      *(float32x2_t *)v335.i8 = vmul_f32(vmul_f32(v1636, v1636), v606);
      ++v610;
      ++v604;
      v1607[60] = vsub_f32(vsub_f32(v1630, vmul_f32(v1629, v1629)), vmul_f32(vmul_f32(v1631, v1631), v606));
      v1607[61] = vsub_f32(vsub_f32(v1635, vmul_f32(v1634, v1634)), *(float32x2_t *)v335.i8);
      v608 += 160;
      ++v611;
      v609 += 160;
      v3 = v1663;
    }
    while (v610 != v1664);
  }
  return result;
}

_OWORD *sub_20FD7CCB8()
{
  _OWORD *result;
  _QWORD *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  int8x16_t v5;
  uint64_t v6;
  uint64_t v7;
  uint8x16_t *v8;
  int8x16_t v9;
  int8x16_t v10;
  uint8x16_t v11;
  int8x16_t v12;
  uint8x16_t *v13;
  int8x16_t v14;
  int8x16_t *v15;
  int8x16_t v16;
  uint8x16_t v17;
  int8x16_t v18;
  uint8x16_t v19;
  int8x16_t v20;
  int8x16_t v21;
  uint8x16_t v22;
  int8x16_t v23;
  uint8x16_t v24;
  int8x16_t v25;
  int8x16_t v26;
  uint8x16_t v27;
  int8x16_t v28;
  uint8x16_t v29;
  int8x16_t v30;
  int8x16_t v31;
  uint8x16_t v32;
  int8x16_t v33;
  uint8x16_t v34;
  int8x16_t v35;
  int8x16_t v36;
  uint8x16_t v37;
  int8x16_t v38;
  uint8x16_t v39;
  int8x16_t v40;
  int8x16_t v41;
  int8x16_t v42;
  int8x16_t v43;
  int8x16_t v44;
  int8x16_t v45;
  int8x16_t v46;
  uint8x16_t *v47;
  uint8x16_t *v48;
  int8x16_t *v49;
  int8x16_t v50;
  int8x16_t v51;
  int8x16_t v52;
  uint8x16_t v53;
  int8x16_t v54;
  uint8x16_t v55;
  int8x16_t v56;
  int8x16_t v57;
  uint8x16_t v58;
  int8x16_t v59;
  uint8x16_t v60;
  int8x16_t v61;
  int8x16_t v62;
  uint8x16_t v63;
  int8x16_t v64;
  uint8x16_t v65;
  int8x16_t v66;
  int8x16_t v67;
  uint8x16_t v68;
  int8x16_t v69;
  uint8x16_t v70;
  int8x16_t v71;
  int8x16_t v72;
  uint8x16_t v73;
  int8x16_t v74;
  uint8x16_t v75;
  int8x16_t v76;
  int8x16_t v77;
  uint8x16_t v78;
  int8x16_t v79;
  uint8x16_t v80;
  int8x16_t v81;
  int8x16_t v82;
  int8x16_t v83;
  int8x16_t v84;
  int8x16_t v85;
  int8x16_t v86;
  int8x16_t v87;
  int8x16_t *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint8x16_t *v93;
  int8x16_t v94;
  int8x16_t v95;
  uint8x16_t v96;
  int8x16_t v97;
  uint8x16_t *v98;
  int8x16_t v99;
  int8x16_t *v100;
  int8x16_t v101;
  uint8x16_t v102;
  int8x16_t v103;
  uint8x16_t v104;
  int8x16_t v105;
  int8x16_t v106;
  uint8x16_t v107;
  int8x16_t v108;
  uint8x16_t v109;
  int8x16_t v110;
  int8x16_t v111;
  uint8x16_t v112;
  int8x16_t v113;
  uint8x16_t v114;
  int8x16_t v115;
  int8x16_t v116;
  uint8x16_t v117;
  int8x16_t v118;
  uint8x16_t v119;
  int8x16_t v120;
  int8x16_t v121;
  uint8x16_t v122;
  int8x16_t v123;
  uint8x16_t v124;
  int8x16_t v125;
  int8x16_t v126;
  int8x16_t v127;
  int8x16_t v128;
  int8x16_t v129;
  int8x16_t v130;
  int8x16_t v131;
  int8x16_t v132;
  int8x16_t v133;
  int8x16_t v134;
  int8x16_t v135;
  int8x16_t v136;
  int8x16_t v137;
  uint8x16_t *v138;
  uint8x16_t *v139;
  int8x16_t *v140;
  int8x16_t v141;
  int8x16_t v142;
  int8x16_t v143;
  uint8x16_t v144;
  int8x16_t v145;
  uint8x16_t v146;
  int8x16_t v147;
  int8x16_t v148;
  uint8x16_t v149;
  int8x16_t v150;
  uint8x16_t v151;
  int8x16_t v152;
  int8x16_t v153;
  uint8x16_t v154;
  int8x16_t v155;
  uint8x16_t v156;
  int8x16_t v157;
  int8x16_t v158;
  uint8x16_t v159;
  int8x16_t v160;
  uint8x16_t v161;
  int8x16_t v162;
  int8x16_t v163;
  uint8x16_t v164;
  int8x16_t v165;
  uint8x16_t v166;
  int8x16_t v167;
  int8x16_t v168;
  uint8x16_t v169;
  int8x16_t v170;
  uint8x16_t v171;
  int8x16_t v172;
  int8x16_t v173;
  int8x16_t v174;
  int8x16_t v175;
  int8x16_t v176;
  int8x16_t v177;
  int8x16_t v178;
  int8x16_t *v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint8x16_t *v184;
  int8x16_t v185;
  int8x16_t v186;
  uint8x16_t v187;
  int8x16_t v188;
  uint8x16_t *v189;
  int8x16_t v190;
  int8x16_t *v191;
  int8x16_t v192;
  uint8x16_t v193;
  int8x16_t v194;
  uint8x16_t v195;
  int8x16_t v196;
  int8x16_t v197;
  uint8x16_t v198;
  int8x16_t v199;
  uint8x16_t v200;
  int8x16_t v201;
  int8x16_t v202;
  uint8x16_t v203;
  int8x16_t v204;
  uint8x16_t v205;
  int8x16_t v206;
  int8x16_t v207;
  uint8x16_t v208;
  int8x16_t v209;
  uint8x16_t v210;
  int8x16_t v211;
  int8x16_t v212;
  uint8x16_t v213;
  int8x16_t v214;
  uint8x16_t v215;
  int8x16_t v216;
  int8x16_t v217;
  int8x16_t v218;
  int8x16_t v219;
  int8x16_t v220;
  int8x16_t v221;
  int8x16_t v222;
  int8x16_t v223;
  int8x16_t v224;
  int8x16_t v225;
  int8x16_t v226;
  int8x16_t v227;
  int8x16_t v228;
  uint8x16_t *v229;
  uint8x16_t *v230;
  int8x16_t *v231;
  int8x16_t v232;
  int8x16_t v233;
  int8x16_t v234;
  uint8x16_t v235;
  int8x16_t v236;
  uint8x16_t v237;
  int8x16_t v238;
  int8x16_t v239;
  uint8x16_t v240;
  int8x16_t v241;
  uint8x16_t v242;
  int8x16_t v243;
  int8x16_t v244;
  uint8x16_t v245;
  int8x16_t v246;
  uint8x16_t v247;
  int8x16_t v248;
  int8x16_t v249;
  uint8x16_t v250;
  int8x16_t v251;
  uint8x16_t v252;
  int8x16_t v253;
  int8x16_t v254;
  uint8x16_t v255;
  int8x16_t v256;
  uint8x16_t v257;
  int8x16_t v258;
  int8x16_t v259;
  uint8x16_t v260;
  int8x16_t v261;
  uint8x16_t v262;
  int8x16_t v263;
  int8x16_t v264;
  int8x16_t v265;
  int8x16_t v266;
  int8x16_t v267;
  int8x16_t v268;
  int8x16_t v269;
  int8x16_t *v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint8x16_t *v275;
  int8x16_t v276;
  int8x16_t v277;
  uint8x16_t v278;
  int8x16_t v279;
  uint8x16_t *v280;
  int8x16_t v281;
  int8x16_t *v282;
  int8x16_t v283;
  uint8x16_t v284;
  int8x16_t v285;
  uint8x16_t v286;
  int8x16_t v287;
  int8x16_t v288;
  uint8x16_t v289;
  int8x16_t v290;
  uint8x16_t v291;
  int8x16_t v292;
  int8x16_t v293;
  uint8x16_t v294;
  int8x16_t v295;
  uint8x16_t v296;
  int8x16_t v297;
  int8x16_t v298;
  uint8x16_t v299;
  int8x16_t v300;
  uint8x16_t v301;
  int8x16_t v302;
  int8x16_t v303;
  uint8x16_t v304;
  int8x16_t v305;
  uint8x16_t v306;
  int8x16_t v307;
  int8x16_t v308;
  int8x16_t v309;
  int8x16_t v310;
  int8x16_t v311;
  int8x16_t v312;
  int8x16_t v313;
  int8x16_t v314;
  int8x16_t v315;
  int8x16_t v316;
  int8x16_t v317;
  int8x16_t v318;
  int8x16_t v319;
  uint8x16_t *v320;
  uint8x16_t *v321;
  int8x16_t *v322;
  int8x16_t v323;
  int8x16_t v324;
  int8x16_t v325;
  uint8x16_t v326;
  int8x16_t v327;
  uint8x16_t v328;
  int8x16_t v329;
  int8x16_t v330;
  uint8x16_t v331;
  int8x16_t v332;
  uint8x16_t v333;
  int8x16_t v334;
  int8x16_t v335;
  uint8x16_t v336;
  int8x16_t v337;
  uint8x16_t v338;
  int8x16_t v339;
  int8x16_t v340;
  uint8x16_t v341;
  int8x16_t v342;
  uint8x16_t v343;
  int8x16_t v344;
  int8x16_t v345;
  uint8x16_t v346;
  int8x16_t v347;
  uint8x16_t v348;
  int8x16_t v349;
  int8x16_t v350;
  uint8x16_t v351;
  int8x16_t v352;
  uint8x16_t v353;
  int8x16_t v354;
  int8x16_t v355;
  int8x16_t v356;
  int8x16_t v357;
  int8x16_t v358;
  int8x16_t v359;
  int8x16_t v360;
  int8x16_t *v361;
  int16x8_t *v362;
  uint64_t v363;
  uint64_t i;
  int8x16_t v365;
  int8x16_t v366;
  int8x16_t v367;
  int8x16_t v368;
  int8x16_t v369;
  int8x16_t v370;
  uint64_t v371;
  float32x4_t v372;
  float32x2_t v373;
  int8x16_t v374;
  uint64_t *v375;
  uint64_t v376;
  unint64_t v377;
  uint64_t v378;
  uint64_t v379;
  uint64_t v380;
  uint64_t v381;
  int16x8_t *v382;
  int16x8_t *v383;
  int16x8_t *v384;
  uint8x16_t *v385;
  int8x16_t *v386;
  uint8x16_t *v387;
  int8x16_t v388;
  int8x16_t v389;
  uint8x16_t v390;
  int8x16_t v391;
  uint8x16_t v392;
  int8x16_t v393;
  int8x16_t v394;
  uint8x16_t v395;
  int8x16_t v396;
  uint8x16_t v397;
  int8x16_t v398;
  int8x16_t v399;
  uint8x16_t v400;
  int8x16_t v401;
  uint8x16_t v402;
  int8x16_t v403;
  int8x16_t v404;
  uint8x16_t v405;
  int8x16_t v406;
  uint8x16_t v407;
  int8x16_t v408;
  int8x16_t v409;
  uint8x16_t v410;
  int8x16_t v411;
  uint8x16_t v412;
  int8x16_t v413;
  int8x16_t v414;
  uint8x16_t v415;
  int8x16_t v416;
  uint8x16_t v417;
  int8x16_t v418;
  int8x16_t v419;
  int8x16_t v420;
  int8x16_t v421;
  int8x16_t v422;
  int8x16_t v423;
  int8x16_t v424;
  int8x16_t v425;
  int8x16_t v426;
  int8x16_t v427;
  int8x16_t v428;
  int8x16_t v429;
  int8x16_t v430;
  int8x16_t v431;
  int8x16_t v432;
  int8x16_t v433;
  int8x16_t v434;
  int8x16_t v435;
  int8x16_t v436;
  int8x16_t v437;
  int8x16_t v438;
  int8x16_t v439;
  int8x16_t v440;
  int8x16_t v441;
  int8x16_t v442;
  int8x16_t v443;
  int8x16_t v444;
  int8x16_t v445;
  int8x16_t v446;
  int8x16_t v447;
  int8x16_t v448;
  int8x16_t v449;
  int8x16_t v450;
  int16x8_t *v451;
  int8x16_t *v452;
  int8x16_t v454;
  int8x16_t *v455;
  int8x16_t v456;
  int8x16_t *v457;
  int8x16_t v458;
  int8x16_t *v459;
  int8x16_t v460;
  uint64_t v461;
  __int16 *v462;
  unint64_t v463;
  int16x8_t *v464;
  unint64_t v465;
  int16x8_t *v466;
  uint64_t v467;
  int16x8_t *v468;
  uint64_t v469;
  int16x8_t *v470;
  uint64_t v471;
  uint64_t v472;
  int16x8_t *v473;
  int16x8_t v474;
  int16x8_t v475;
  int16x8_t v476;
  int32x4_t v477;
  int32x4_t v478;
  int16x8_t v479;
  int32x4_t v480;
  int32x4_t v481;
  int32x4_t v482;
  int32x4_t v483;
  int16x8_t v484;
  int16x8_t v485;
  int16x8_t v486;
  int32x4_t v487;
  int32x4_t v488;
  int32x4_t v489;
  int32x4_t v490;
  int16x8_t v491;
  int16x8_t v492;
  int16x8_t v493;
  int16x8_t v494;
  int32x4_t v495;
  int32x4_t v496;
  int32x4_t v497;
  int32x4_t v498;
  int16x8_t v499;
  int16x8_t v500;
  int32x4_t v501;
  int32x4_t v502;
  int32x4_t v503;
  int32x4_t v504;
  int16x8_t v505;
  int16x8_t v506;
  int16x8_t v507;
  int16x8_t v508;
  int32x4_t v509;
  int32x4_t v510;
  int32x4_t v511;
  int32x4_t v512;
  int16x8_t v513;
  int16x8_t v514;
  int16x8_t v515;
  int16x8_t v516;
  int32x4_t v517;
  int32x4_t v518;
  int32x4_t v519;
  int32x4_t v520;
  int16x8_t v521;
  int16x8_t v522;
  int32x4_t v523;
  int32x4_t v524;
  int32x4_t v525;
  int32x4_t v526;
  int16x8_t v527;
  int16x8_t v528;
  int16x8_t v529;
  int16x8_t v530;
  int32x4_t v531;
  int32x4_t v532;
  int32x4_t v533;
  int32x4_t v534;
  int16x8_t v535;
  int16x8_t v536;
  int16x8_t v537;
  int16x8_t v538;
  int32x4_t v539;
  int32x4_t v540;
  int32x4_t v541;
  int32x4_t v542;
  int16x8_t v543;
  int16x8_t v544;
  int32x4_t v545;
  int32x4_t v546;
  int32x4_t v547;
  int32x4_t v548;
  int16x8_t v549;
  int16x8_t v550;
  int16x8_t v551;
  int16x8_t v552;
  int32x4_t v553;
  int32x4_t v554;
  int32x4_t v555;
  int32x4_t v556;
  int16x8_t v557;
  int16x8_t v558;
  int16x8_t v559;
  int16x8_t v560;
  int32x4_t v561;
  int32x4_t v562;
  int32x4_t v563;
  int32x4_t v564;
  int16x8_t v565;
  int16x8_t v566;
  int32x4_t v567;
  int32x4_t v568;
  int32x4_t v569;
  int32x4_t v570;
  int16x8_t v571;
  int16x8_t v572;
  int16x8_t v573;
  int16x8_t v574;
  int32x4_t v575;
  int32x4_t v576;
  int32x4_t v577;
  int32x4_t v578;
  int16x8_t v579;
  int16x8_t v580;
  int16x8_t v581;
  int16x8_t v582;
  int32x4_t v583;
  int32x4_t v584;
  int32x4_t v585;
  int32x4_t v586;
  int16x8_t v587;
  int16x8_t v588;
  int32x4_t v589;
  int32x4_t v590;
  int32x4_t v591;
  int32x4_t v592;
  int16x8_t v593;
  int16x8_t v594;
  int16x8_t v595;
  int16x8_t v596;
  int32x4_t v597;
  int32x4_t v598;
  int32x4_t v599;
  int32x4_t v600;
  int16x8_t v601;
  int16x8_t v602;
  int16x8_t v603;
  int16x8_t v604;
  int32x4_t v605;
  int32x4_t v606;
  int32x4_t v607;
  int32x4_t v608;
  int16x8_t v609;
  int16x8_t v610;
  int32x4_t v611;
  int32x4_t v612;
  int32x4_t v613;
  int32x4_t v614;
  int16x8_t v615;
  int16x8_t v616;
  int16x8_t v617;
  int16x8_t v618;
  int32x4_t v619;
  int32x4_t v620;
  int32x4_t v621;
  int32x4_t v622;
  int16x8_t v623;
  int16x8_t v624;
  int16x8_t v625;
  int16x8_t v626;
  int32x4_t v627;
  int32x4_t v628;
  int32x4_t v629;
  int32x4_t v630;
  int16x8_t v631;
  int16x8_t v632;
  int32x4_t v633;
  int32x4_t v634;
  int32x4_t v635;
  int32x4_t v636;
  int16x8_t v637;
  int32x4_t v638;
  int16x8_t v639;
  int16x8_t v640;
  int16x8_t v641;
  int16x8_t v642;
  int16x8_t v643;
  int16x8_t v644;
  int32x4_t v645;
  int32x4_t v646;
  int32x4_t v647;
  int32x4_t v648;
  int16x8_t v649;
  int16x8_t v650;
  int32x4_t v651;
  int32x4_t v652;
  int32x4_t v653;
  int32x4_t v654;
  int16x8_t v655;
  int16x8_t v656;
  int16x8_t v657;
  int16x8_t v658;
  int32x4_t v659;
  int32x4_t v660;
  int32x4_t v661;
  int32x4_t v662;
  int16x8_t v663;
  int16x8_t v664;
  int16x8_t v665;
  int16x8_t v666;
  int32x4_t v667;
  int32x4_t v668;
  int32x4_t v669;
  int32x4_t v670;
  int16x8_t v671;
  int16x8_t v672;
  int32x4_t v673;
  int32x4_t v674;
  int32x4_t v675;
  int32x4_t v676;
  int16x8_t v677;
  int16x8_t v678;
  int16x8_t v679;
  int16x8_t v680;
  int32x4_t v681;
  int32x4_t v682;
  int32x4_t v683;
  int32x4_t v684;
  int16x8_t v685;
  int16x8_t v686;
  int16x8_t v687;
  int16x8_t v688;
  int32x4_t v689;
  int32x4_t v690;
  int32x4_t v691;
  int32x4_t v692;
  int16x8_t v693;
  int16x8_t v694;
  int32x4_t v695;
  int32x4_t v696;
  int32x4_t v697;
  int32x4_t v698;
  int16x8_t v699;
  int16x8_t v700;
  int16x8_t v701;
  int16x8_t v702;
  int32x4_t v703;
  int32x4_t v704;
  int32x4_t v705;
  int32x4_t v706;
  int16x8_t v707;
  int16x8_t v708;
  int16x8_t v709;
  int16x8_t v710;
  int32x4_t v711;
  int32x4_t v712;
  int32x4_t v713;
  int32x4_t v714;
  int16x8_t v715;
  int16x8_t v716;
  int32x4_t v717;
  int32x4_t v718;
  int32x4_t v719;
  int32x4_t v720;
  int16x8_t v721;
  int16x8_t v722;
  int16x8_t v723;
  int16x8_t v724;
  int32x4_t v725;
  int32x4_t v726;
  int32x4_t v727;
  int32x4_t v728;
  int16x8_t v729;
  int16x8_t v730;
  int16x8_t v731;
  int16x8_t v732;
  int32x4_t v733;
  int32x4_t v734;
  int32x4_t v735;
  int32x4_t v736;
  int16x8_t v737;
  int16x8_t v738;
  int32x4_t v739;
  int32x4_t v740;
  int32x4_t v741;
  int32x4_t v742;
  int16x8_t v743;
  int16x8_t v744;
  int16x8_t v745;
  int16x8_t v746;
  int32x4_t v747;
  int32x4_t v748;
  int32x4_t v749;
  int32x4_t v750;
  int16x8_t v751;
  int16x8_t v752;
  int16x8_t v753;
  int16x8_t v754;
  int32x4_t v755;
  int32x4_t v756;
  int32x4_t v757;
  int32x4_t v758;
  int16x8_t v759;
  int16x8_t v760;
  int32x4_t v761;
  int32x4_t v762;
  int32x4_t v763;
  int32x4_t v764;
  int16x8_t v765;
  int16x8_t v766;
  int16x8_t v767;
  int16x8_t v768;
  int32x4_t v769;
  int32x4_t v770;
  int32x4_t v771;
  int32x4_t v772;
  int16x8_t v773;
  int16x8_t v774;
  int16x8_t v775;
  int16x8_t v776;
  int32x4_t v777;
  int32x4_t v778;
  int32x4_t v779;
  int32x4_t v780;
  int16x8_t v781;
  int16x8_t v782;
  int32x4_t v783;
  int32x4_t v784;
  int32x4_t v785;
  int32x4_t v786;
  int16x8_t v787;
  int16x8_t v788;
  int16x8_t v789;
  int16x8_t v790;
  int32x4_t v791;
  int32x4_t v792;
  int32x4_t v793;
  int32x4_t v794;
  int16x8_t v795;
  int16x8_t v796;
  int16x8_t v797;
  int16x8_t v798;
  int32x4_t v799;
  int32x4_t v800;
  int32x4_t v801;
  int32x4_t v802;
  int16x8_t v803;
  int16x8_t v804;
  int32x4_t v805;
  int32x4_t v806;
  int32x4_t v807;
  int32x4_t v808;
  int16x8_t v809;
  int16x8_t v810;
  int16x8_t v811;
  int16x8_t v812;
  int16x8_t v813;
  int16x8_t v814;
  int16x8_t v815;
  int16x8_t v816;
  int32x4_t v817;
  int32x4_t v818;
  int32x4_t v819;
  int32x4_t v820;
  int16x8_t v821;
  int16x8_t v822;
  int32x4_t v823;
  int32x4_t v824;
  int32x4_t v825;
  int32x4_t v826;
  int16x8_t v827;
  int16x8_t v828;
  int16x8_t v829;
  int16x8_t v830;
  int32x4_t v831;
  int32x4_t v832;
  int32x4_t v833;
  int32x4_t v834;
  int16x8_t v835;
  int16x8_t v836;
  int16x8_t v837;
  int16x8_t v838;
  int32x4_t v839;
  int32x4_t v840;
  int32x4_t v841;
  int32x4_t v842;
  int16x8_t v843;
  int16x8_t v844;
  int32x4_t v845;
  int32x4_t v846;
  int32x4_t v847;
  int32x4_t v848;
  int16x8_t v849;
  int16x8_t v850;
  int16x8_t v851;
  int16x8_t v852;
  int32x4_t v853;
  int32x4_t v854;
  int32x4_t v855;
  int32x4_t v856;
  int16x8_t v857;
  int16x8_t v858;
  int16x8_t v859;
  int16x8_t v860;
  int32x4_t v861;
  int32x4_t v862;
  int32x4_t v863;
  int32x4_t v864;
  int16x8_t v865;
  int16x8_t v866;
  int32x4_t v867;
  int32x4_t v868;
  int32x4_t v869;
  int32x4_t v870;
  int16x8_t v871;
  int16x8_t v872;
  int16x8_t v873;
  int16x8_t v874;
  int32x4_t v875;
  int32x4_t v876;
  int32x4_t v877;
  int32x4_t v878;
  int16x8_t v879;
  int16x8_t v880;
  int16x8_t v881;
  int16x8_t v882;
  int32x4_t v883;
  int32x4_t v884;
  int32x4_t v885;
  int32x4_t v886;
  int16x8_t v887;
  int16x8_t v888;
  int32x4_t v889;
  int32x4_t v890;
  int32x4_t v891;
  int32x4_t v892;
  int16x8_t v893;
  int16x8_t v894;
  int16x8_t v895;
  int16x8_t v896;
  int32x4_t v897;
  int32x4_t v898;
  int32x4_t v899;
  int32x4_t v900;
  int16x8_t v901;
  int16x8_t v902;
  int16x8_t v903;
  int16x8_t v904;
  int32x4_t v905;
  int32x4_t v906;
  int32x4_t v907;
  int32x4_t v908;
  int16x8_t v909;
  int16x8_t v910;
  int32x4_t v911;
  int32x4_t v912;
  int32x4_t v913;
  int32x4_t v914;
  int16x8_t v915;
  int16x8_t v916;
  int16x8_t v917;
  int16x8_t v918;
  int32x4_t v919;
  int32x4_t v920;
  int32x4_t v921;
  int32x4_t v922;
  int16x8_t v923;
  int16x8_t v924;
  int16x8_t v925;
  int16x8_t v926;
  int32x4_t v927;
  int32x4_t v928;
  int32x4_t v929;
  int32x4_t v930;
  int16x8_t v931;
  int16x8_t v932;
  int32x4_t v933;
  int32x4_t v934;
  int32x4_t v935;
  int32x4_t v936;
  int16x8_t v937;
  int16x8_t v938;
  int16x8_t v939;
  int16x8_t v940;
  int32x4_t v941;
  int32x4_t v942;
  int32x4_t v943;
  int32x4_t v944;
  int16x8_t v945;
  int16x8_t v946;
  int16x8_t v947;
  int16x8_t v948;
  int32x4_t v949;
  int32x4_t v950;
  int32x4_t v951;
  int32x4_t v952;
  int16x8_t v953;
  int16x8_t v954;
  int32x4_t v955;
  int32x4_t v956;
  int32x4_t v957;
  int32x4_t v958;
  int16x8_t v959;
  int16x8_t v960;
  int16x8_t v961;
  int16x8_t v962;
  int32x4_t v963;
  int32x4_t v964;
  int32x4_t v965;
  int32x4_t v966;
  int16x8_t v967;
  int16x8_t v968;
  int16x8_t v969;
  int16x8_t v970;
  int32x4_t v971;
  int32x4_t v972;
  int32x4_t v973;
  int32x4_t v974;
  int16x8_t v975;
  int16x8_t v976;
  int32x4_t v977;
  int32x4_t v978;
  int32x4_t v979;
  int32x4_t v980;
  int16x8_t v981;
  int16x8_t v982;
  int8x16_t v983;
  int32x4_t *v984;
  const float *v985;
  float *v986;
  int32x4_t v987;
  int32x4_t v988;
  int32x4_t v989;
  int32x4_t v990;
  int32x4_t v991;
  int32x4_t v992;
  int32x4_t v993;
  float *v994;
  const float *v995;
  int32x4_t v996;
  int32x4_t v997;
  int32x4_t v998;
  int32x4_t v999;
  int32x4_t v1000;
  int32x4_t v1001;
  int32x4_t v1002;
  float *v1003;
  const float *v1004;
  int32x4_t v1005;
  int32x4_t v1006;
  int32x4_t v1007;
  int32x4_t v1008;
  int32x4_t v1009;
  int32x4_t v1010;
  int32x4_t v1011;
  float *v1012;
  const float *v1013;
  int32x4_t v1014;
  int32x4_t v1015;
  int32x4_t v1016;
  int32x4_t v1017;
  int32x4_t v1018;
  int32x4_t v1019;
  int32x4_t v1020;
  float *v1021;
  const float *v1022;
  int32x4_t v1023;
  int32x4_t v1024;
  int32x4_t v1025;
  int32x4_t v1026;
  int32x4_t v1027;
  int32x4_t v1028;
  int32x4_t v1029;
  float *v1030;
  const float *v1031;
  int32x4_t v1032;
  int32x4_t v1033;
  int32x4_t v1034;
  int32x4_t v1035;
  int32x4_t v1036;
  int32x4_t v1037;
  int32x4_t v1038;
  float *v1039;
  const float *v1040;
  int32x4_t v1041;
  int32x4_t v1042;
  int32x4_t v1043;
  int32x4_t v1044;
  int32x4_t v1045;
  int32x4_t v1046;
  int32x4_t v1047;
  float *v1048;
  const float *v1049;
  int32x4_t v1050;
  int32x4_t v1051;
  int32x4_t v1052;
  int32x4_t v1053;
  int32x4_t v1054;
  int32x4_t v1055;
  int32x4_t v1056;
  const float *v1057;
  float *v1058;
  int32x4_t v1059;
  int32x4_t v1060;
  int32x4_t v1061;
  int32x4_t v1062;
  int32x4_t v1063;
  int32x4_t v1064;
  int32x4_t v1065;
  float *v1066;
  const float *v1067;
  int32x4_t v1068;
  int32x4_t v1069;
  int32x4_t v1070;
  int32x4_t v1071;
  int32x4_t v1072;
  int32x4_t v1073;
  int32x4_t v1074;
  float *v1075;
  const float *v1076;
  int32x4_t v1077;
  int32x4_t v1078;
  int32x4_t v1079;
  int32x4_t v1080;
  int32x4_t v1081;
  int32x4_t v1082;
  int32x4_t v1083;
  float *v1084;
  const float *v1085;
  int32x4_t v1086;
  int32x4_t v1087;
  int32x4_t v1088;
  int32x4_t v1089;
  int32x4_t v1090;
  int32x4_t v1091;
  int32x4_t v1092;
  float *v1093;
  const float *v1094;
  int32x4_t v1095;
  int32x4_t v1096;
  int32x4_t v1097;
  int32x4_t v1098;
  int32x4_t v1099;
  int32x4_t v1100;
  int32x4_t v1101;
  float *v1102;
  const float *v1103;
  int32x4_t v1104;
  int32x4_t v1105;
  int32x4_t v1106;
  int32x4_t v1107;
  int32x4_t v1108;
  int32x4_t v1109;
  int32x4_t v1110;
  float *v1111;
  const float *v1112;
  int32x4_t v1113;
  int32x4_t v1114;
  int32x4_t v1115;
  int32x4_t v1116;
  int32x4_t v1117;
  int32x4_t v1118;
  int32x4_t v1119;
  float *v1120;
  const float *v1121;
  int32x4_t v1122;
  int32x4_t v1123;
  int32x4_t v1124;
  int32x4_t v1125;
  int32x4_t v1126;
  int32x4_t v1127;
  int32x4_t v1128;
  const float *v1129;
  float *v1130;
  int32x4_t v1131;
  int32x4_t v1132;
  int32x4_t v1133;
  int32x4_t v1134;
  int32x4_t v1135;
  int32x4_t v1136;
  int32x4_t v1137;
  const float *v1138;
  float *v1139;
  int32x4_t v1140;
  int32x4_t v1141;
  int32x4_t v1142;
  int32x4_t v1143;
  int32x4_t v1144;
  int32x4_t v1145;
  int32x4_t v1146;
  const float *v1147;
  float *v1148;
  int32x4_t v1149;
  int32x4_t v1150;
  int32x4_t v1151;
  int32x4_t v1152;
  int32x4_t v1153;
  int32x4_t v1154;
  int32x4_t v1155;
  const float *v1156;
  float *v1157;
  int32x4_t v1158;
  int32x4_t v1159;
  int32x4_t v1160;
  int32x4_t v1161;
  int32x4_t v1162;
  int32x4_t v1163;
  int32x4_t v1164;
  const float *v1165;
  float *v1166;
  int32x4_t v1167;
  int32x4_t v1168;
  int32x4_t v1169;
  int32x4_t v1170;
  int32x4_t v1171;
  int32x4_t v1172;
  int32x4_t v1173;
  const float *v1174;
  float *v1175;
  int32x4_t v1176;
  int32x4_t v1177;
  int32x4_t v1178;
  int32x4_t v1179;
  int32x4_t v1180;
  int32x4_t v1181;
  int32x4_t v1182;
  const float *v1183;
  float *v1184;
  int32x4_t v1185;
  int32x4_t v1186;
  int32x4_t v1187;
  int32x4_t v1188;
  int32x4_t v1189;
  int32x4_t v1190;
  int32x4_t v1191;
  const float *v1192;
  float *v1193;
  int32x4_t v1194;
  int32x4_t v1195;
  int32x4_t v1196;
  int32x4_t v1197;
  int32x4_t v1198;
  int32x4_t v1199;
  int32x4_t v1200;
  uint64_t v1201;
  float32x2_t *v1202;
  float32x4_t *v1203;
  unint64_t v1204;
  float32x4_t v1205;
  float32x4_t v1206;
  float32x4_t v1207;
  float32x4_t v1208;
  float32x4_t v1209;
  float32x4_t v1210;
  float32x4_t v1211;
  float32x4_t v1212;
  float32x4_t v1213;
  float32x4_t v1214;
  float32x4_t v1215;
  float32x4_t v1216;
  float32x4_t v1217;
  float32x4_t v1218;
  float32x4_t v1219;
  float32x4_t v1220;
  float32x4_t v1221;
  float32x2_t v1222;
  float32x2_t v1223;
  float32x2_t v1224;
  float32x2_t v1225;
  float32x2_t v1226;
  float32x2_t v1227;
  float32x2_t v1228;
  float32x2_t v1229;
  float32x2_t v1230;
  float32x2_t v1231;
  uint64_t v1232;
  uint64_t v1233;
  uint64_t v1234;
  _OWORD *v1235;
  uint64_t v1236;
  _QWORD *v1237;
  int32x4_t v1238[4];
  _OWORD v1239[4];
  _OWORD v1240[4];
  _OWORD v1241[4];
  _OWORD v1242[4];
  _OWORD v1243[4];
  _OWORD v1244[4];
  _OWORD v1245[2];
  int32x4_t v1246;
  int32x4_t v1247;
  _OWORD v1248[4];
  _OWORD v1249[4];
  _OWORD v1250[4];
  _OWORD v1251[4];
  _OWORD v1252[4];
  _OWORD v1253[4];
  _OWORD v1254[4];
  _OWORD v1255[2];
  int32x4_t v1256;
  int32x4_t v1257;
  _OWORD v1258[4];
  _OWORD v1259[4];
  _OWORD v1260[4];
  _OWORD v1261[4];
  _OWORD v1262[4];
  _OWORD v1263[4];
  _OWORD v1264[4];
  _OWORD v1265[2];
  int32x4_t v1266;
  int8x16_t v1267;
  int16x8_t v1268;
  int16x8_t v1269;
  int16x8_t v1270;
  int16x8_t v1271;
  int16x8_t v1272;
  int16x8_t v1273;
  int16x8_t v1274;
  int16x8_t v1275;
  int16x8_t v1276;
  int16x8_t v1277;
  int16x8_t v1278;
  int16x8_t v1279;
  int16x8_t v1280;
  int16x8_t v1281;
  int16x8_t v1282;
  int16x8_t v1283;
  int16x8_t v1284;
  int16x8_t v1285;
  int16x8_t v1286;
  int16x8_t v1287;
  int16x8_t v1288;
  int16x8_t v1289;
  int16x8_t v1290;
  int16x8_t v1291;
  int16x8_t v1292;
  int16x8_t v1293;
  int16x8_t v1294;
  int16x8_t v1295;
  int16x8_t v1296;
  int16x8_t v1297;
  int16x8_t v1298;
  int16x8_t v1299;
  int16x8_t v1300;
  int16x8_t v1301;
  int16x8_t v1302;
  int16x8_t v1303;
  int16x8_t v1304;
  int16x8_t v1305;
  int16x8_t v1306;
  int16x8_t v1307;
  int16x8_t v1308;
  int16x8_t v1309;
  int16x8_t v1310;
  int16x8_t v1311;
  int16x8_t v1312;
  int16x8_t v1313;
  int16x8_t v1314;
  int16x8_t v1315;
  uint64_t v1316;
  int16x8_t v1317;
  int16x8_t v1318;
  int16x8_t v1319;
  int16x8_t v1320;
  int16x8_t v1321;
  int16x8_t v1322;
  int16x8_t v1323;
  int16x8_t v1324;
  int16x8_t v1325;
  int16x8_t v1326;
  int16x8_t v1327;
  int16x8_t v1328;
  int16x8_t v1329;
  int16x8_t v1330;
  int16x8_t v1331;
  int16x8_t v1332;
  int16x8_t v1333;
  int16x8_t v1334;
  int16x8_t v1335;
  int16x8_t v1336;
  int16x8_t v1337;
  int16x8_t v1338;
  int16x8_t v1339;
  int16x8_t v1340;
  int16x8_t v1341;
  int16x8_t v1342;
  int16x8_t v1343;
  int16x8_t v1344;
  int16x8_t v1345;
  int16x8_t v1346;
  int16x8_t v1347;
  int16x8_t v1348;
  int16x8_t v1349;
  int16x8_t v1350;
  int16x8_t v1351;
  int16x8_t v1352;
  int16x8_t v1353;
  int16x8_t v1354;
  int16x8_t v1355;
  int16x8_t v1356;
  int16x8_t v1357;
  int16x8_t v1358;
  int16x8_t v1359;
  int16x8_t v1360;
  int16x8_t v1361;
  int16x8_t v1362;
  int16x8_t v1363;
  int16x8_t v1364;
  uint64_t v1365;
  int16x8_t v1366;
  int16x8_t v1367;
  int16x8_t v1368;
  int16x8_t v1369;
  int16x8_t v1370;
  int16x8_t v1371;
  int16x8_t v1372;
  int16x8_t v1373;
  int16x8_t v1374;
  int16x8_t v1375;
  int16x8_t v1376;
  int16x8_t v1377;
  int16x8_t v1378;
  int16x8_t v1379;
  int16x8_t v1380;
  int16x8_t v1381;
  int16x8_t v1382;
  int16x8_t v1383;
  int16x8_t v1384;
  int16x8_t v1385;
  int16x8_t v1386;
  int16x8_t v1387;
  int16x8_t v1388;
  int16x8_t v1389;
  int16x8_t v1390;
  int16x8_t v1391;
  int16x8_t v1392;
  int16x8_t v1393;
  int16x8_t v1394;
  int16x8_t v1395;
  int16x8_t v1396;
  int16x8_t v1397;
  int16x8_t v1398;
  int16x8_t v1399;
  int16x8_t v1400;
  int16x8_t v1401;
  int16x8_t v1402;
  int16x8_t v1403;
  int16x8_t v1404;
  int16x8_t v1405;
  int16x8_t v1406;
  int16x8_t v1407;
  int16x8_t v1408;
  int16x8_t v1409;
  int16x8_t v1410;
  int16x8_t v1411;
  int16x8_t v1412;
  int16x8_t v1413;
  uint64_t v1414;
  int16x8_t v1415;
  int16x8_t v1416;
  int16x8_t v1417;
  int16x8_t v1418;
  int16x8_t v1419;
  int16x8_t v1420;
  int16x8_t v1421;
  int16x8_t v1422;
  int16x8_t v1423;
  int16x8_t v1424;
  int16x8_t v1425;
  int16x8_t v1426;
  int16x8_t v1427;
  int16x8_t v1428;
  int16x8_t v1429;
  int16x8_t v1430;
  int16x8_t v1431;
  int16x8_t v1432;
  int16x8_t v1433;
  int16x8_t v1434;
  int16x8_t v1435;
  int16x8_t v1436;
  int16x8_t v1437;
  int16x8_t v1438;
  int16x8_t v1439;
  int16x8_t v1440;
  int16x8_t v1441;
  int16x8_t v1442;
  int16x8_t v1443;
  int16x8_t v1444;
  int16x8_t v1445;
  int16x8_t v1446;
  int16x8_t v1447;
  int16x8_t v1448;
  int16x8_t v1449;
  int16x8_t v1450;
  int16x8_t v1451;
  int16x8_t v1452;
  int16x8_t v1453;
  int16x8_t v1454;
  int16x8_t v1455;
  int16x8_t v1456;
  int16x8_t v1457;
  int16x8_t v1458;
  int16x8_t v1459;
  int16x8_t v1460;
  int16x8_t v1461;
  int16x8_t v1462;
  uint64_t v1463;
  uint64_t v1464;
  float32x4x4_t v1465;
  float32x4x4_t v1466;
  float32x4x4_t v1467;
  float32x4x4_t v1468;
  float32x4x4_t v1469;
  float32x4x4_t v1470;
  float32x4x4_t v1471;
  float32x4x4_t v1472;
  float32x4x4_t v1473;
  float32x4x4_t v1474;
  float32x4x4_t v1475;
  float32x4x4_t v1476;
  float32x4x4_t v1477;
  float32x4x4_t v1478;
  float32x4x4_t v1479;
  float32x4x4_t v1480;
  float32x4x4_t v1481;
  float32x4x4_t v1482;
  float32x4x4_t v1483;
  float32x4x4_t v1484;
  float32x4x4_t v1485;
  float32x4x4_t v1486;
  float32x4x4_t v1487;
  float32x4x4_t v1488;

  result = (_OWORD *)MEMORY[0x24BDAC7A8]();
  v1237 = v1;
  v6 = v1[1];
  v7 = *v2;
  v1235 = result;
  v1236 = v3;
  if (v3 == 1)
  {
    v8 = (uint8x16_t *)(v7 + 1);
    v9 = *(int8x16_t *)(v2[1] + 1);
    v10 = *(int8x16_t *)(v2[1] + 17);
    v11 = *v8++;
    v12 = (int8x16_t)vhsubq_u8((uint8x16_t)vextq_s8(v10, v9, 0xFuLL), (uint8x16_t)vextq_s8(v9, v10, 1uLL));
    v13 = (uint8x16_t *)(v2[2] + 17);
    v14 = (int8x16_t)vhsubq_u8(v11, *(uint8x16_t *)(v2[2] + 1));
    v16 = *(int8x16_t *)(v2[1] + 33);
    v15 = (int8x16_t *)(v2[1] + 49);
    v1268 = vmull_s8(*(int8x8_t *)v12.i8, *(int8x8_t *)v12.i8);
    v1269 = vmull_high_s8(v12, v12);
    v1300 = vmull_s8(*(int8x8_t *)v14.i8, *(int8x8_t *)v14.i8);
    v1301 = vmull_high_s8(v14, v14);
    v1284 = vmull_s8(*(int8x8_t *)v12.i8, *(int8x8_t *)v14.i8);
    v1285 = vmull_high_s8(v12, v14);
    v17 = *v8++;
    v18 = (int8x16_t)vhsubq_u8((uint8x16_t)vextq_s8(v9, v10, 0xFuLL), (uint8x16_t)vextq_s8(v10, v16, 1uLL));
    v19 = *v13++;
    v20 = (int8x16_t)vhsubq_u8(v17, v19);
    v21 = *v15++;
    v1270 = vmull_s8(*(int8x8_t *)v18.i8, *(int8x8_t *)v18.i8);
    v1271 = vmull_high_s8(v18, v18);
    v1302 = vmull_s8(*(int8x8_t *)v20.i8, *(int8x8_t *)v20.i8);
    v1303 = vmull_high_s8(v20, v20);
    v1286 = vmull_s8(*(int8x8_t *)v18.i8, *(int8x8_t *)v20.i8);
    v1287 = vmull_high_s8(v18, v20);
    v22 = *v8++;
    v23 = (int8x16_t)vhsubq_u8((uint8x16_t)vextq_s8(v10, v16, 0xFuLL), (uint8x16_t)vextq_s8(v16, v21, 1uLL));
    v24 = *v13++;
    v25 = (int8x16_t)vhsubq_u8(v22, v24);
    v26 = *v15++;
    v1272 = vmull_s8(*(int8x8_t *)v23.i8, *(int8x8_t *)v23.i8);
    v1273 = vmull_high_s8(v23, v23);
    v1304 = vmull_s8(*(int8x8_t *)v25.i8, *(int8x8_t *)v25.i8);
    v1305 = vmull_high_s8(v25, v25);
    v1288 = vmull_s8(*(int8x8_t *)v23.i8, *(int8x8_t *)v25.i8);
    v1289 = vmull_high_s8(v23, v25);
    v27 = *v8++;
    v28 = (int8x16_t)vhsubq_u8((uint8x16_t)vextq_s8(v16, v21, 0xFuLL), (uint8x16_t)vextq_s8(v21, v26, 1uLL));
    v29 = *v13++;
    v30 = (int8x16_t)vhsubq_u8(v27, v29);
    v31 = *v15++;
    v1274 = vmull_s8(*(int8x8_t *)v28.i8, *(int8x8_t *)v28.i8);
    v1275 = vmull_high_s8(v28, v28);
    v1306 = vmull_s8(*(int8x8_t *)v30.i8, *(int8x8_t *)v30.i8);
    v1307 = vmull_high_s8(v30, v30);
    v1290 = vmull_s8(*(int8x8_t *)v28.i8, *(int8x8_t *)v30.i8);
    v1291 = vmull_high_s8(v28, v30);
    v32 = *v8++;
    v33 = (int8x16_t)vhsubq_u8((uint8x16_t)vextq_s8(v21, v26, 0xFuLL), (uint8x16_t)vextq_s8(v26, v31, 1uLL));
    v34 = *v13++;
    v35 = (int8x16_t)vhsubq_u8(v32, v34);
    v36 = *v15++;
    v1276 = vmull_s8(*(int8x8_t *)v33.i8, *(int8x8_t *)v33.i8);
    v1277 = vmull_high_s8(v33, v33);
    v1308 = vmull_s8(*(int8x8_t *)v35.i8, *(int8x8_t *)v35.i8);
    v1309 = vmull_high_s8(v35, v35);
    v1292 = vmull_s8(*(int8x8_t *)v33.i8, *(int8x8_t *)v35.i8);
    v1293 = vmull_high_s8(v33, v35);
    v37 = *v8++;
    v38 = (int8x16_t)vhsubq_u8((uint8x16_t)vextq_s8(v26, v31, 0xFuLL), (uint8x16_t)vextq_s8(v31, v36, 1uLL));
    v39 = *v13++;
    v40 = (int8x16_t)vhsubq_u8(v37, v39);
    v41 = *v15;
    v1278 = vmull_s8(*(int8x8_t *)v38.i8, *(int8x8_t *)v38.i8);
    v1279 = vmull_high_s8(v38, v38);
    v1310 = vmull_s8(*(int8x8_t *)v40.i8, *(int8x8_t *)v40.i8);
    v1311 = vmull_high_s8(v40, v40);
    v1294 = vmull_s8(*(int8x8_t *)v38.i8, *(int8x8_t *)v40.i8);
    v1295 = vmull_high_s8(v38, v40);
    v42 = (int8x16_t)vhsubq_u8((uint8x16_t)vextq_s8(v31, v36, 0xFuLL), (uint8x16_t)vextq_s8(v36, v41, 1uLL));
    v43 = (int8x16_t)vhsubq_u8(*v8, *v13);
    v44 = v15[1];
    v1280 = vmull_s8(*(int8x8_t *)v42.i8, *(int8x8_t *)v42.i8);
    v1281 = vmull_high_s8(v42, v42);
    v1312 = vmull_s8(*(int8x8_t *)v43.i8, *(int8x8_t *)v43.i8);
    v1313 = vmull_high_s8(v43, v43);
    v1296 = vmull_s8(*(int8x8_t *)v42.i8, *(int8x8_t *)v43.i8);
    v1297 = vmull_high_s8(v42, v43);
    v45 = (int8x16_t)vhsubq_u8((uint8x16_t)vextq_s8(v36, v41, 0xFuLL), (uint8x16_t)vextq_s8(v41, v44, 1uLL));
    v46 = (int8x16_t)vhsubq_u8(v8[1], v13[1]);
    v1282 = vmull_s8(*(int8x8_t *)v45.i8, *(int8x8_t *)v45.i8);
    v1283 = vmull_high_s8(v45, v45);
    v1314 = vmull_s8(*(int8x8_t *)v46.i8, *(int8x8_t *)v46.i8);
    v1315 = vmull_high_s8(v46, v46);
    v1298 = vmull_s8(*(int8x8_t *)v45.i8, *(int8x8_t *)v46.i8);
    v1299 = vmull_high_s8(v45, v46);
    if (!v6)
      goto LABEL_9;
  }
  else
  {
    v47 = (uint8x16_t *)(v7 + (int)v3);
    v48 = (uint8x16_t *)(v2[2] + (int)v3);
    v50.i64[0] = *(_QWORD *)(v2[1] + (int)v3 - 8);
    v49 = (int8x16_t *)(v2[1] + (int)v3);
    v50.i64[1] = v50.i64[0];
    v51 = *v49;
    v52 = v49[1];
    v49 += 2;
    v53 = *v47++;
    v54 = (int8x16_t)vhsubq_u8((uint8x16_t)vextq_s8(v50, v51, 0xFuLL), (uint8x16_t)vextq_s8(v51, v52, 1uLL));
    v55 = *v48++;
    v56 = (int8x16_t)vhsubq_u8(v53, v55);
    v57 = *v49++;
    v1268 = vmull_s8(*(int8x8_t *)v54.i8, *(int8x8_t *)v54.i8);
    v1269 = vmull_high_s8(v54, v54);
    v1300 = vmull_s8(*(int8x8_t *)v56.i8, *(int8x8_t *)v56.i8);
    v1301 = vmull_high_s8(v56, v56);
    v1284 = vmull_s8(*(int8x8_t *)v54.i8, *(int8x8_t *)v56.i8);
    v1285 = vmull_high_s8(v54, v56);
    v58 = *v47++;
    v59 = (int8x16_t)vhsubq_u8((uint8x16_t)vextq_s8(v51, v52, 0xFuLL), (uint8x16_t)vextq_s8(v52, v57, 1uLL));
    v60 = *v48++;
    v61 = (int8x16_t)vhsubq_u8(v58, v60);
    v62 = *v49++;
    v1270 = vmull_s8(*(int8x8_t *)v59.i8, *(int8x8_t *)v59.i8);
    v1271 = vmull_high_s8(v59, v59);
    v1302 = vmull_s8(*(int8x8_t *)v61.i8, *(int8x8_t *)v61.i8);
    v1303 = vmull_high_s8(v61, v61);
    v1286 = vmull_s8(*(int8x8_t *)v59.i8, *(int8x8_t *)v61.i8);
    v1287 = vmull_high_s8(v59, v61);
    v63 = *v47++;
    v64 = (int8x16_t)vhsubq_u8((uint8x16_t)vextq_s8(v52, v57, 0xFuLL), (uint8x16_t)vextq_s8(v57, v62, 1uLL));
    v65 = *v48++;
    v66 = (int8x16_t)vhsubq_u8(v63, v65);
    v67 = *v49++;
    v1272 = vmull_s8(*(int8x8_t *)v64.i8, *(int8x8_t *)v64.i8);
    v1273 = vmull_high_s8(v64, v64);
    v1304 = vmull_s8(*(int8x8_t *)v66.i8, *(int8x8_t *)v66.i8);
    v1305 = vmull_high_s8(v66, v66);
    v1288 = vmull_s8(*(int8x8_t *)v64.i8, *(int8x8_t *)v66.i8);
    v1289 = vmull_high_s8(v64, v66);
    v68 = *v47++;
    v69 = (int8x16_t)vhsubq_u8((uint8x16_t)vextq_s8(v57, v62, 0xFuLL), (uint8x16_t)vextq_s8(v62, v67, 1uLL));
    v70 = *v48++;
    v71 = (int8x16_t)vhsubq_u8(v68, v70);
    v72 = *v49++;
    v1274 = vmull_s8(*(int8x8_t *)v69.i8, *(int8x8_t *)v69.i8);
    v1275 = vmull_high_s8(v69, v69);
    v1306 = vmull_s8(*(int8x8_t *)v71.i8, *(int8x8_t *)v71.i8);
    v1307 = vmull_high_s8(v71, v71);
    v1290 = vmull_s8(*(int8x8_t *)v69.i8, *(int8x8_t *)v71.i8);
    v1291 = vmull_high_s8(v69, v71);
    v73 = *v47++;
    v74 = (int8x16_t)vhsubq_u8((uint8x16_t)vextq_s8(v62, v67, 0xFuLL), (uint8x16_t)vextq_s8(v67, v72, 1uLL));
    v75 = *v48++;
    v76 = (int8x16_t)vhsubq_u8(v73, v75);
    v77 = *v49++;
    v1276 = vmull_s8(*(int8x8_t *)v74.i8, *(int8x8_t *)v74.i8);
    v1277 = vmull_high_s8(v74, v74);
    v1308 = vmull_s8(*(int8x8_t *)v76.i8, *(int8x8_t *)v76.i8);
    v1309 = vmull_high_s8(v76, v76);
    v1292 = vmull_s8(*(int8x8_t *)v74.i8, *(int8x8_t *)v76.i8);
    v1293 = vmull_high_s8(v74, v76);
    v78 = *v47++;
    v79 = (int8x16_t)vhsubq_u8((uint8x16_t)vextq_s8(v67, v72, 0xFuLL), (uint8x16_t)vextq_s8(v72, v77, 1uLL));
    v80 = *v48++;
    v81 = (int8x16_t)vhsubq_u8(v78, v80);
    v82 = *v49;
    v1278 = vmull_s8(*(int8x8_t *)v79.i8, *(int8x8_t *)v79.i8);
    v1279 = vmull_high_s8(v79, v79);
    v1310 = vmull_s8(*(int8x8_t *)v81.i8, *(int8x8_t *)v81.i8);
    v1311 = vmull_high_s8(v81, v81);
    v1294 = vmull_s8(*(int8x8_t *)v79.i8, *(int8x8_t *)v81.i8);
    v1295 = vmull_high_s8(v79, v81);
    v83 = (int8x16_t)vhsubq_u8((uint8x16_t)vextq_s8(v72, v77, 0xFuLL), (uint8x16_t)vextq_s8(v77, v82, 1uLL));
    v84 = (int8x16_t)vhsubq_u8(*v47, *v48);
    v85 = v49[1];
    v1280 = vmull_s8(*(int8x8_t *)v83.i8, *(int8x8_t *)v83.i8);
    v1281 = vmull_high_s8(v83, v83);
    v1312 = vmull_s8(*(int8x8_t *)v84.i8, *(int8x8_t *)v84.i8);
    v1313 = vmull_high_s8(v84, v84);
    v1296 = vmull_s8(*(int8x8_t *)v83.i8, *(int8x8_t *)v84.i8);
    v1297 = vmull_high_s8(v83, v84);
    v86 = (int8x16_t)vhsubq_u8((uint8x16_t)vextq_s8(v77, v82, 0xFuLL), (uint8x16_t)vextq_s8(v82, v85, 1uLL));
    v87 = (int8x16_t)vhsubq_u8(v47[1], v48[1]);
    v1282 = vmull_s8(*(int8x8_t *)v86.i8, *(int8x8_t *)v86.i8);
    v1283 = vmull_high_s8(v86, v86);
    v1314 = vmull_s8(*(int8x8_t *)v87.i8, *(int8x8_t *)v87.i8);
    v1315 = vmull_high_s8(v87, v87);
    v1298 = vmull_s8(*(int8x8_t *)v86.i8, *(int8x8_t *)v87.i8);
    v1299 = vmull_high_s8(v86, v87);
    if (!v6)
      goto LABEL_9;
  }
  v88 = (int8x16_t *)(v6 + v3);
  if (v6 + v3 < (unint64_t)&v1316 && (unint64_t)&v1268 < v6 + v3 + 128)
  {
    v89 = 0;
    v90 = v6 + v3;
    do
    {
      *(_BYTE *)(v90 + v89) = v1268.i16[v89] > v1300.i16[v89];
      ++v89;
    }
    while (v89 != 128);
LABEL_9:
    v91 = v1[2];
    v92 = v2[1];
    if (v3 == 1)
      goto LABEL_10;
LABEL_13:
    v138 = (uint8x16_t *)(v92 + (int)v3);
    v139 = (uint8x16_t *)(v2[3] + (int)v3);
    v141.i64[0] = *(_QWORD *)(v2[2] + (int)v3 - 8);
    v140 = (int8x16_t *)(v2[2] + (int)v3);
    v141.i64[1] = v141.i64[0];
    v142 = *v140;
    v143 = v140[1];
    v140 += 2;
    v144 = *v138++;
    v145 = (int8x16_t)vhsubq_u8((uint8x16_t)vextq_s8(v141, v142, 0xFuLL), (uint8x16_t)vextq_s8(v142, v143, 1uLL));
    v146 = *v139++;
    v147 = (int8x16_t)vhsubq_u8(v144, v146);
    v148 = *v140++;
    v1317 = vmull_s8(*(int8x8_t *)v145.i8, *(int8x8_t *)v145.i8);
    v1318 = vmull_high_s8(v145, v145);
    v1349 = vmull_s8(*(int8x8_t *)v147.i8, *(int8x8_t *)v147.i8);
    v1350 = vmull_high_s8(v147, v147);
    v1333 = vmull_s8(*(int8x8_t *)v145.i8, *(int8x8_t *)v147.i8);
    v1334 = vmull_high_s8(v145, v147);
    v149 = *v138++;
    v150 = (int8x16_t)vhsubq_u8((uint8x16_t)vextq_s8(v142, v143, 0xFuLL), (uint8x16_t)vextq_s8(v143, v148, 1uLL));
    v151 = *v139++;
    v152 = (int8x16_t)vhsubq_u8(v149, v151);
    v153 = *v140++;
    v1319 = vmull_s8(*(int8x8_t *)v150.i8, *(int8x8_t *)v150.i8);
    v1320 = vmull_high_s8(v150, v150);
    v1351 = vmull_s8(*(int8x8_t *)v152.i8, *(int8x8_t *)v152.i8);
    v1352 = vmull_high_s8(v152, v152);
    v1335 = vmull_s8(*(int8x8_t *)v150.i8, *(int8x8_t *)v152.i8);
    v1336 = vmull_high_s8(v150, v152);
    v154 = *v138++;
    v155 = (int8x16_t)vhsubq_u8((uint8x16_t)vextq_s8(v143, v148, 0xFuLL), (uint8x16_t)vextq_s8(v148, v153, 1uLL));
    v156 = *v139++;
    v157 = (int8x16_t)vhsubq_u8(v154, v156);
    v158 = *v140++;
    v1321 = vmull_s8(*(int8x8_t *)v155.i8, *(int8x8_t *)v155.i8);
    v1322 = vmull_high_s8(v155, v155);
    v1353 = vmull_s8(*(int8x8_t *)v157.i8, *(int8x8_t *)v157.i8);
    v1354 = vmull_high_s8(v157, v157);
    v1337 = vmull_s8(*(int8x8_t *)v155.i8, *(int8x8_t *)v157.i8);
    v1338 = vmull_high_s8(v155, v157);
    v159 = *v138++;
    v160 = (int8x16_t)vhsubq_u8((uint8x16_t)vextq_s8(v148, v153, 0xFuLL), (uint8x16_t)vextq_s8(v153, v158, 1uLL));
    v161 = *v139++;
    v162 = (int8x16_t)vhsubq_u8(v159, v161);
    v163 = *v140++;
    v1323 = vmull_s8(*(int8x8_t *)v160.i8, *(int8x8_t *)v160.i8);
    v1324 = vmull_high_s8(v160, v160);
    v1355 = vmull_s8(*(int8x8_t *)v162.i8, *(int8x8_t *)v162.i8);
    v1356 = vmull_high_s8(v162, v162);
    v1339 = vmull_s8(*(int8x8_t *)v160.i8, *(int8x8_t *)v162.i8);
    v1340 = vmull_high_s8(v160, v162);
    v164 = *v138++;
    v165 = (int8x16_t)vhsubq_u8((uint8x16_t)vextq_s8(v153, v158, 0xFuLL), (uint8x16_t)vextq_s8(v158, v163, 1uLL));
    v166 = *v139++;
    v167 = (int8x16_t)vhsubq_u8(v164, v166);
    v168 = *v140++;
    v1325 = vmull_s8(*(int8x8_t *)v165.i8, *(int8x8_t *)v165.i8);
    v1326 = vmull_high_s8(v165, v165);
    v1357 = vmull_s8(*(int8x8_t *)v167.i8, *(int8x8_t *)v167.i8);
    v1358 = vmull_high_s8(v167, v167);
    v1341 = vmull_s8(*(int8x8_t *)v165.i8, *(int8x8_t *)v167.i8);
    v1342 = vmull_high_s8(v165, v167);
    v169 = *v138++;
    v170 = (int8x16_t)vhsubq_u8((uint8x16_t)vextq_s8(v158, v163, 0xFuLL), (uint8x16_t)vextq_s8(v163, v168, 1uLL));
    v171 = *v139++;
    v172 = (int8x16_t)vhsubq_u8(v169, v171);
    v173 = *v140;
    v1327 = vmull_s8(*(int8x8_t *)v170.i8, *(int8x8_t *)v170.i8);
    v1328 = vmull_high_s8(v170, v170);
    v1359 = vmull_s8(*(int8x8_t *)v172.i8, *(int8x8_t *)v172.i8);
    v1360 = vmull_high_s8(v172, v172);
    v1343 = vmull_s8(*(int8x8_t *)v170.i8, *(int8x8_t *)v172.i8);
    v1344 = vmull_high_s8(v170, v172);
    v174 = (int8x16_t)vhsubq_u8((uint8x16_t)vextq_s8(v163, v168, 0xFuLL), (uint8x16_t)vextq_s8(v168, v173, 1uLL));
    v175 = (int8x16_t)vhsubq_u8(*v138, *v139);
    v176 = v140[1];
    v1329 = vmull_s8(*(int8x8_t *)v174.i8, *(int8x8_t *)v174.i8);
    v1330 = vmull_high_s8(v174, v174);
    v1361 = vmull_s8(*(int8x8_t *)v175.i8, *(int8x8_t *)v175.i8);
    v1362 = vmull_high_s8(v175, v175);
    v1345 = vmull_s8(*(int8x8_t *)v174.i8, *(int8x8_t *)v175.i8);
    v1346 = vmull_high_s8(v174, v175);
    v177 = (int8x16_t)vhsubq_u8((uint8x16_t)vextq_s8(v168, v173, 0xFuLL), (uint8x16_t)vextq_s8(v173, v176, 1uLL));
    v178 = (int8x16_t)vhsubq_u8(v138[1], v139[1]);
    v1331 = vmull_s8(*(int8x8_t *)v177.i8, *(int8x8_t *)v177.i8);
    v1332 = vmull_high_s8(v177, v177);
    v1363 = vmull_s8(*(int8x8_t *)v178.i8, *(int8x8_t *)v178.i8);
    v1364 = vmull_high_s8(v178, v178);
    v1347 = vmull_s8(*(int8x8_t *)v177.i8, *(int8x8_t *)v178.i8);
    v1348 = vmull_high_s8(v177, v178);
    if (!v91)
      goto LABEL_18;
    goto LABEL_14;
  }
  v132.i64[0] = 0x101010101010101;
  v132.i64[1] = 0x101010101010101;
  v133 = vandq_s8(vuzp1q_s8((int8x16_t)vcgtq_s16(v1270, v1302), (int8x16_t)vcgtq_s16(v1271, v1303)), v132);
  *v88 = vandq_s8(vuzp1q_s8((int8x16_t)vcgtq_s16(v1268, v1300), (int8x16_t)vcgtq_s16(v1269, v1301)), v132);
  v88[1] = v133;
  v134 = vandq_s8(vuzp1q_s8((int8x16_t)vcgtq_s16(v1274, v1306), (int8x16_t)vcgtq_s16(v1275, v1307)), v132);
  v88[2] = vandq_s8(vuzp1q_s8((int8x16_t)vcgtq_s16(v1272, v1304), (int8x16_t)vcgtq_s16(v1273, v1305)), v132);
  v88[3] = v134;
  v135 = vandq_s8(vuzp1q_s8((int8x16_t)vcgtq_s16(v1278, v1310), (int8x16_t)vcgtq_s16(v1279, v1311)), v132);
  v88[4] = vandq_s8(vuzp1q_s8((int8x16_t)vcgtq_s16(v1276, v1308), (int8x16_t)vcgtq_s16(v1277, v1309)), v132);
  v88[5] = v135;
  v5.i64[1] = v1315.i64[1];
  v136 = vandq_s8(vuzp1q_s8((int8x16_t)vcgtq_s16(v1280, v1312), (int8x16_t)vcgtq_s16(v1281, v1313)), v132);
  v137 = vandq_s8(vuzp1q_s8((int8x16_t)vcgtq_s16(v1282, v1314), (int8x16_t)vcgtq_s16(v1283, v1315)), v132);
  v88[6] = v136;
  v88[7] = v137;
  v91 = v1[2];
  v92 = v2[1];
  if (v3 != 1)
    goto LABEL_13;
LABEL_10:
  v93 = (uint8x16_t *)(v92 + 1);
  v94 = *(int8x16_t *)(v2[2] + 1);
  v95 = *(int8x16_t *)(v2[2] + 17);
  v96 = *v93++;
  v97 = (int8x16_t)vhsubq_u8((uint8x16_t)vextq_s8(v95, v94, 0xFuLL), (uint8x16_t)vextq_s8(v94, v95, 1uLL));
  v98 = (uint8x16_t *)(v2[3] + 17);
  v99 = (int8x16_t)vhsubq_u8(v96, *(uint8x16_t *)(v2[3] + 1));
  v101 = *(int8x16_t *)(v2[2] + 33);
  v100 = (int8x16_t *)(v2[2] + 49);
  v1317 = vmull_s8(*(int8x8_t *)v97.i8, *(int8x8_t *)v97.i8);
  v1318 = vmull_high_s8(v97, v97);
  v1349 = vmull_s8(*(int8x8_t *)v99.i8, *(int8x8_t *)v99.i8);
  v1350 = vmull_high_s8(v99, v99);
  v1333 = vmull_s8(*(int8x8_t *)v97.i8, *(int8x8_t *)v99.i8);
  v1334 = vmull_high_s8(v97, v99);
  v102 = *v93++;
  v103 = (int8x16_t)vhsubq_u8((uint8x16_t)vextq_s8(v94, v95, 0xFuLL), (uint8x16_t)vextq_s8(v95, v101, 1uLL));
  v104 = *v98++;
  v105 = (int8x16_t)vhsubq_u8(v102, v104);
  v106 = *v100++;
  v1319 = vmull_s8(*(int8x8_t *)v103.i8, *(int8x8_t *)v103.i8);
  v1320 = vmull_high_s8(v103, v103);
  v1351 = vmull_s8(*(int8x8_t *)v105.i8, *(int8x8_t *)v105.i8);
  v1352 = vmull_high_s8(v105, v105);
  v1335 = vmull_s8(*(int8x8_t *)v103.i8, *(int8x8_t *)v105.i8);
  v1336 = vmull_high_s8(v103, v105);
  v107 = *v93++;
  v108 = (int8x16_t)vhsubq_u8((uint8x16_t)vextq_s8(v95, v101, 0xFuLL), (uint8x16_t)vextq_s8(v101, v106, 1uLL));
  v109 = *v98++;
  v110 = (int8x16_t)vhsubq_u8(v107, v109);
  v111 = *v100++;
  v1321 = vmull_s8(*(int8x8_t *)v108.i8, *(int8x8_t *)v108.i8);
  v1322 = vmull_high_s8(v108, v108);
  v1353 = vmull_s8(*(int8x8_t *)v110.i8, *(int8x8_t *)v110.i8);
  v1354 = vmull_high_s8(v110, v110);
  v1337 = vmull_s8(*(int8x8_t *)v108.i8, *(int8x8_t *)v110.i8);
  v1338 = vmull_high_s8(v108, v110);
  v112 = *v93++;
  v113 = (int8x16_t)vhsubq_u8((uint8x16_t)vextq_s8(v101, v106, 0xFuLL), (uint8x16_t)vextq_s8(v106, v111, 1uLL));
  v114 = *v98++;
  v115 = (int8x16_t)vhsubq_u8(v112, v114);
  v116 = *v100++;
  v1323 = vmull_s8(*(int8x8_t *)v113.i8, *(int8x8_t *)v113.i8);
  v1324 = vmull_high_s8(v113, v113);
  v1355 = vmull_s8(*(int8x8_t *)v115.i8, *(int8x8_t *)v115.i8);
  v1356 = vmull_high_s8(v115, v115);
  v1339 = vmull_s8(*(int8x8_t *)v113.i8, *(int8x8_t *)v115.i8);
  v1340 = vmull_high_s8(v113, v115);
  v117 = *v93++;
  v118 = (int8x16_t)vhsubq_u8((uint8x16_t)vextq_s8(v106, v111, 0xFuLL), (uint8x16_t)vextq_s8(v111, v116, 1uLL));
  v119 = *v98++;
  v120 = (int8x16_t)vhsubq_u8(v117, v119);
  v121 = *v100++;
  v1325 = vmull_s8(*(int8x8_t *)v118.i8, *(int8x8_t *)v118.i8);
  v1326 = vmull_high_s8(v118, v118);
  v1357 = vmull_s8(*(int8x8_t *)v120.i8, *(int8x8_t *)v120.i8);
  v1358 = vmull_high_s8(v120, v120);
  v1341 = vmull_s8(*(int8x8_t *)v118.i8, *(int8x8_t *)v120.i8);
  v1342 = vmull_high_s8(v118, v120);
  v122 = *v93++;
  v123 = (int8x16_t)vhsubq_u8((uint8x16_t)vextq_s8(v111, v116, 0xFuLL), (uint8x16_t)vextq_s8(v116, v121, 1uLL));
  v124 = *v98++;
  v125 = (int8x16_t)vhsubq_u8(v122, v124);
  v126 = *v100;
  v1327 = vmull_s8(*(int8x8_t *)v123.i8, *(int8x8_t *)v123.i8);
  v1328 = vmull_high_s8(v123, v123);
  v1359 = vmull_s8(*(int8x8_t *)v125.i8, *(int8x8_t *)v125.i8);
  v1360 = vmull_high_s8(v125, v125);
  v1343 = vmull_s8(*(int8x8_t *)v123.i8, *(int8x8_t *)v125.i8);
  v1344 = vmull_high_s8(v123, v125);
  v127 = (int8x16_t)vhsubq_u8((uint8x16_t)vextq_s8(v116, v121, 0xFuLL), (uint8x16_t)vextq_s8(v121, v126, 1uLL));
  v128 = (int8x16_t)vhsubq_u8(*v93, *v98);
  v129 = v100[1];
  v1329 = vmull_s8(*(int8x8_t *)v127.i8, *(int8x8_t *)v127.i8);
  v1330 = vmull_high_s8(v127, v127);
  v1361 = vmull_s8(*(int8x8_t *)v128.i8, *(int8x8_t *)v128.i8);
  v1362 = vmull_high_s8(v128, v128);
  v1345 = vmull_s8(*(int8x8_t *)v127.i8, *(int8x8_t *)v128.i8);
  v1346 = vmull_high_s8(v127, v128);
  v130 = (int8x16_t)vhsubq_u8((uint8x16_t)vextq_s8(v121, v126, 0xFuLL), (uint8x16_t)vextq_s8(v126, v129, 1uLL));
  v131 = (int8x16_t)vhsubq_u8(v93[1], v98[1]);
  v1331 = vmull_s8(*(int8x8_t *)v130.i8, *(int8x8_t *)v130.i8);
  v1332 = vmull_high_s8(v130, v130);
  v1363 = vmull_s8(*(int8x8_t *)v131.i8, *(int8x8_t *)v131.i8);
  v1364 = vmull_high_s8(v131, v131);
  v1347 = vmull_s8(*(int8x8_t *)v130.i8, *(int8x8_t *)v131.i8);
  v1348 = vmull_high_s8(v130, v131);
  if (!v91)
    goto LABEL_18;
LABEL_14:
  v179 = (int8x16_t *)(v91 + v3);
  if (v91 + v3 < (unint64_t)&v1365 && &v1317 < (int16x8_t *)&v179[8])
  {
    v180 = 0;
    v181 = v91 + v3;
    do
    {
      *(_BYTE *)(v181 + v180) = v1317.i16[v180] > v1349.i16[v180];
      ++v180;
    }
    while (v180 != 128);
LABEL_18:
    v182 = v1[3];
    v183 = v2[2];
    if (v3 == 1)
      goto LABEL_19;
LABEL_22:
    v229 = (uint8x16_t *)(v183 + (int)v3);
    v230 = (uint8x16_t *)(v2[4] + (int)v3);
    v232.i64[0] = *(_QWORD *)(v2[3] + (int)v3 - 8);
    v231 = (int8x16_t *)(v2[3] + (int)v3);
    v232.i64[1] = v232.i64[0];
    v233 = *v231;
    v234 = v231[1];
    v231 += 2;
    v235 = *v229++;
    v236 = (int8x16_t)vhsubq_u8((uint8x16_t)vextq_s8(v232, v233, 0xFuLL), (uint8x16_t)vextq_s8(v233, v234, 1uLL));
    v237 = *v230++;
    v238 = (int8x16_t)vhsubq_u8(v235, v237);
    v239 = *v231++;
    v1366 = vmull_s8(*(int8x8_t *)v236.i8, *(int8x8_t *)v236.i8);
    v1367 = vmull_high_s8(v236, v236);
    v1398 = vmull_s8(*(int8x8_t *)v238.i8, *(int8x8_t *)v238.i8);
    v1399 = vmull_high_s8(v238, v238);
    v1382 = vmull_s8(*(int8x8_t *)v236.i8, *(int8x8_t *)v238.i8);
    v1383 = vmull_high_s8(v236, v238);
    v240 = *v229++;
    v241 = (int8x16_t)vhsubq_u8((uint8x16_t)vextq_s8(v233, v234, 0xFuLL), (uint8x16_t)vextq_s8(v234, v239, 1uLL));
    v242 = *v230++;
    v243 = (int8x16_t)vhsubq_u8(v240, v242);
    v244 = *v231++;
    v1368 = vmull_s8(*(int8x8_t *)v241.i8, *(int8x8_t *)v241.i8);
    v1369 = vmull_high_s8(v241, v241);
    v1400 = vmull_s8(*(int8x8_t *)v243.i8, *(int8x8_t *)v243.i8);
    v1401 = vmull_high_s8(v243, v243);
    v1384 = vmull_s8(*(int8x8_t *)v241.i8, *(int8x8_t *)v243.i8);
    v1385 = vmull_high_s8(v241, v243);
    v245 = *v229++;
    v246 = (int8x16_t)vhsubq_u8((uint8x16_t)vextq_s8(v234, v239, 0xFuLL), (uint8x16_t)vextq_s8(v239, v244, 1uLL));
    v247 = *v230++;
    v248 = (int8x16_t)vhsubq_u8(v245, v247);
    v249 = *v231++;
    v1370 = vmull_s8(*(int8x8_t *)v246.i8, *(int8x8_t *)v246.i8);
    v1371 = vmull_high_s8(v246, v246);
    v1402 = vmull_s8(*(int8x8_t *)v248.i8, *(int8x8_t *)v248.i8);
    v1403 = vmull_high_s8(v248, v248);
    v1386 = vmull_s8(*(int8x8_t *)v246.i8, *(int8x8_t *)v248.i8);
    v1387 = vmull_high_s8(v246, v248);
    v250 = *v229++;
    v251 = (int8x16_t)vhsubq_u8((uint8x16_t)vextq_s8(v239, v244, 0xFuLL), (uint8x16_t)vextq_s8(v244, v249, 1uLL));
    v252 = *v230++;
    v253 = (int8x16_t)vhsubq_u8(v250, v252);
    v254 = *v231++;
    v1372 = vmull_s8(*(int8x8_t *)v251.i8, *(int8x8_t *)v251.i8);
    v1373 = vmull_high_s8(v251, v251);
    v1404 = vmull_s8(*(int8x8_t *)v253.i8, *(int8x8_t *)v253.i8);
    v1405 = vmull_high_s8(v253, v253);
    v1388 = vmull_s8(*(int8x8_t *)v251.i8, *(int8x8_t *)v253.i8);
    v1389 = vmull_high_s8(v251, v253);
    v255 = *v229++;
    v256 = (int8x16_t)vhsubq_u8((uint8x16_t)vextq_s8(v244, v249, 0xFuLL), (uint8x16_t)vextq_s8(v249, v254, 1uLL));
    v257 = *v230++;
    v258 = (int8x16_t)vhsubq_u8(v255, v257);
    v259 = *v231++;
    v1374 = vmull_s8(*(int8x8_t *)v256.i8, *(int8x8_t *)v256.i8);
    v1375 = vmull_high_s8(v256, v256);
    v1406 = vmull_s8(*(int8x8_t *)v258.i8, *(int8x8_t *)v258.i8);
    v1407 = vmull_high_s8(v258, v258);
    v1390 = vmull_s8(*(int8x8_t *)v256.i8, *(int8x8_t *)v258.i8);
    v1391 = vmull_high_s8(v256, v258);
    v260 = *v229++;
    v261 = (int8x16_t)vhsubq_u8((uint8x16_t)vextq_s8(v249, v254, 0xFuLL), (uint8x16_t)vextq_s8(v254, v259, 1uLL));
    v262 = *v230++;
    v263 = (int8x16_t)vhsubq_u8(v260, v262);
    v264 = *v231;
    v1376 = vmull_s8(*(int8x8_t *)v261.i8, *(int8x8_t *)v261.i8);
    v1377 = vmull_high_s8(v261, v261);
    v1408 = vmull_s8(*(int8x8_t *)v263.i8, *(int8x8_t *)v263.i8);
    v1409 = vmull_high_s8(v263, v263);
    v1392 = vmull_s8(*(int8x8_t *)v261.i8, *(int8x8_t *)v263.i8);
    v1393 = vmull_high_s8(v261, v263);
    v265 = (int8x16_t)vhsubq_u8((uint8x16_t)vextq_s8(v254, v259, 0xFuLL), (uint8x16_t)vextq_s8(v259, v264, 1uLL));
    v266 = (int8x16_t)vhsubq_u8(*v229, *v230);
    v267 = v231[1];
    v1378 = vmull_s8(*(int8x8_t *)v265.i8, *(int8x8_t *)v265.i8);
    v1379 = vmull_high_s8(v265, v265);
    v1410 = vmull_s8(*(int8x8_t *)v266.i8, *(int8x8_t *)v266.i8);
    v1411 = vmull_high_s8(v266, v266);
    v1394 = vmull_s8(*(int8x8_t *)v265.i8, *(int8x8_t *)v266.i8);
    v1395 = vmull_high_s8(v265, v266);
    v268 = (int8x16_t)vhsubq_u8((uint8x16_t)vextq_s8(v259, v264, 0xFuLL), (uint8x16_t)vextq_s8(v264, v267, 1uLL));
    v269 = (int8x16_t)vhsubq_u8(v229[1], v230[1]);
    v1380 = vmull_s8(*(int8x8_t *)v268.i8, *(int8x8_t *)v268.i8);
    v1381 = vmull_high_s8(v268, v268);
    v1412 = vmull_s8(*(int8x8_t *)v269.i8, *(int8x8_t *)v269.i8);
    v1413 = vmull_high_s8(v269, v269);
    v1396 = vmull_s8(*(int8x8_t *)v268.i8, *(int8x8_t *)v269.i8);
    v1397 = vmull_high_s8(v268, v269);
    if (!v182)
      goto LABEL_27;
    goto LABEL_23;
  }
  v223.i64[0] = 0x101010101010101;
  v223.i64[1] = 0x101010101010101;
  v224 = vandq_s8(vuzp1q_s8((int8x16_t)vcgtq_s16(v1319, v1351), (int8x16_t)vcgtq_s16(v1320, v1352)), v223);
  *v179 = vandq_s8(vuzp1q_s8((int8x16_t)vcgtq_s16(v1317, v1349), (int8x16_t)vcgtq_s16(v1318, v1350)), v223);
  v179[1] = v224;
  v225 = vandq_s8(vuzp1q_s8((int8x16_t)vcgtq_s16(v1323, v1355), (int8x16_t)vcgtq_s16(v1324, v1356)), v223);
  v179[2] = vandq_s8(vuzp1q_s8((int8x16_t)vcgtq_s16(v1321, v1353), (int8x16_t)vcgtq_s16(v1322, v1354)), v223);
  v179[3] = v225;
  v226 = vandq_s8(vuzp1q_s8((int8x16_t)vcgtq_s16(v1327, v1359), (int8x16_t)vcgtq_s16(v1328, v1360)), v223);
  v179[4] = vandq_s8(vuzp1q_s8((int8x16_t)vcgtq_s16(v1325, v1357), (int8x16_t)vcgtq_s16(v1326, v1358)), v223);
  v179[5] = v226;
  v5.i64[1] = v1364.i64[1];
  v227 = vandq_s8(vuzp1q_s8((int8x16_t)vcgtq_s16(v1329, v1361), (int8x16_t)vcgtq_s16(v1330, v1362)), v223);
  v228 = vandq_s8(vuzp1q_s8((int8x16_t)vcgtq_s16(v1331, v1363), (int8x16_t)vcgtq_s16(v1332, v1364)), v223);
  v179[6] = v227;
  v179[7] = v228;
  v182 = v1[3];
  v183 = v2[2];
  if (v3 != 1)
    goto LABEL_22;
LABEL_19:
  v184 = (uint8x16_t *)(v183 + 1);
  v185 = *(int8x16_t *)(v2[3] + 1);
  v186 = *(int8x16_t *)(v2[3] + 17);
  v187 = *v184++;
  v188 = (int8x16_t)vhsubq_u8((uint8x16_t)vextq_s8(v186, v185, 0xFuLL), (uint8x16_t)vextq_s8(v185, v186, 1uLL));
  v189 = (uint8x16_t *)(v2[4] + 17);
  v190 = (int8x16_t)vhsubq_u8(v187, *(uint8x16_t *)(v2[4] + 1));
  v192 = *(int8x16_t *)(v2[3] + 33);
  v191 = (int8x16_t *)(v2[3] + 49);
  v1366 = vmull_s8(*(int8x8_t *)v188.i8, *(int8x8_t *)v188.i8);
  v1367 = vmull_high_s8(v188, v188);
  v1398 = vmull_s8(*(int8x8_t *)v190.i8, *(int8x8_t *)v190.i8);
  v1399 = vmull_high_s8(v190, v190);
  v1382 = vmull_s8(*(int8x8_t *)v188.i8, *(int8x8_t *)v190.i8);
  v1383 = vmull_high_s8(v188, v190);
  v193 = *v184++;
  v194 = (int8x16_t)vhsubq_u8((uint8x16_t)vextq_s8(v185, v186, 0xFuLL), (uint8x16_t)vextq_s8(v186, v192, 1uLL));
  v195 = *v189++;
  v196 = (int8x16_t)vhsubq_u8(v193, v195);
  v197 = *v191++;
  v1368 = vmull_s8(*(int8x8_t *)v194.i8, *(int8x8_t *)v194.i8);
  v1369 = vmull_high_s8(v194, v194);
  v1400 = vmull_s8(*(int8x8_t *)v196.i8, *(int8x8_t *)v196.i8);
  v1401 = vmull_high_s8(v196, v196);
  v1384 = vmull_s8(*(int8x8_t *)v194.i8, *(int8x8_t *)v196.i8);
  v1385 = vmull_high_s8(v194, v196);
  v198 = *v184++;
  v199 = (int8x16_t)vhsubq_u8((uint8x16_t)vextq_s8(v186, v192, 0xFuLL), (uint8x16_t)vextq_s8(v192, v197, 1uLL));
  v200 = *v189++;
  v201 = (int8x16_t)vhsubq_u8(v198, v200);
  v202 = *v191++;
  v1370 = vmull_s8(*(int8x8_t *)v199.i8, *(int8x8_t *)v199.i8);
  v1371 = vmull_high_s8(v199, v199);
  v1402 = vmull_s8(*(int8x8_t *)v201.i8, *(int8x8_t *)v201.i8);
  v1403 = vmull_high_s8(v201, v201);
  v1386 = vmull_s8(*(int8x8_t *)v199.i8, *(int8x8_t *)v201.i8);
  v1387 = vmull_high_s8(v199, v201);
  v203 = *v184++;
  v204 = (int8x16_t)vhsubq_u8((uint8x16_t)vextq_s8(v192, v197, 0xFuLL), (uint8x16_t)vextq_s8(v197, v202, 1uLL));
  v205 = *v189++;
  v206 = (int8x16_t)vhsubq_u8(v203, v205);
  v207 = *v191++;
  v1372 = vmull_s8(*(int8x8_t *)v204.i8, *(int8x8_t *)v204.i8);
  v1373 = vmull_high_s8(v204, v204);
  v1404 = vmull_s8(*(int8x8_t *)v206.i8, *(int8x8_t *)v206.i8);
  v1405 = vmull_high_s8(v206, v206);
  v1388 = vmull_s8(*(int8x8_t *)v204.i8, *(int8x8_t *)v206.i8);
  v1389 = vmull_high_s8(v204, v206);
  v208 = *v184++;
  v209 = (int8x16_t)vhsubq_u8((uint8x16_t)vextq_s8(v197, v202, 0xFuLL), (uint8x16_t)vextq_s8(v202, v207, 1uLL));
  v210 = *v189++;
  v211 = (int8x16_t)vhsubq_u8(v208, v210);
  v212 = *v191++;
  v1374 = vmull_s8(*(int8x8_t *)v209.i8, *(int8x8_t *)v209.i8);
  v1375 = vmull_high_s8(v209, v209);
  v1406 = vmull_s8(*(int8x8_t *)v211.i8, *(int8x8_t *)v211.i8);
  v1407 = vmull_high_s8(v211, v211);
  v1390 = vmull_s8(*(int8x8_t *)v209.i8, *(int8x8_t *)v211.i8);
  v1391 = vmull_high_s8(v209, v211);
  v213 = *v184++;
  v214 = (int8x16_t)vhsubq_u8((uint8x16_t)vextq_s8(v202, v207, 0xFuLL), (uint8x16_t)vextq_s8(v207, v212, 1uLL));
  v215 = *v189++;
  v216 = (int8x16_t)vhsubq_u8(v213, v215);
  v217 = *v191;
  v1376 = vmull_s8(*(int8x8_t *)v214.i8, *(int8x8_t *)v214.i8);
  v1377 = vmull_high_s8(v214, v214);
  v1408 = vmull_s8(*(int8x8_t *)v216.i8, *(int8x8_t *)v216.i8);
  v1409 = vmull_high_s8(v216, v216);
  v1392 = vmull_s8(*(int8x8_t *)v214.i8, *(int8x8_t *)v216.i8);
  v1393 = vmull_high_s8(v214, v216);
  v218 = (int8x16_t)vhsubq_u8((uint8x16_t)vextq_s8(v207, v212, 0xFuLL), (uint8x16_t)vextq_s8(v212, v217, 1uLL));
  v219 = (int8x16_t)vhsubq_u8(*v184, *v189);
  v220 = v191[1];
  v1378 = vmull_s8(*(int8x8_t *)v218.i8, *(int8x8_t *)v218.i8);
  v1379 = vmull_high_s8(v218, v218);
  v1410 = vmull_s8(*(int8x8_t *)v219.i8, *(int8x8_t *)v219.i8);
  v1411 = vmull_high_s8(v219, v219);
  v1394 = vmull_s8(*(int8x8_t *)v218.i8, *(int8x8_t *)v219.i8);
  v1395 = vmull_high_s8(v218, v219);
  v221 = (int8x16_t)vhsubq_u8((uint8x16_t)vextq_s8(v212, v217, 0xFuLL), (uint8x16_t)vextq_s8(v217, v220, 1uLL));
  v222 = (int8x16_t)vhsubq_u8(v184[1], v189[1]);
  v1380 = vmull_s8(*(int8x8_t *)v221.i8, *(int8x8_t *)v221.i8);
  v1381 = vmull_high_s8(v221, v221);
  v1412 = vmull_s8(*(int8x8_t *)v222.i8, *(int8x8_t *)v222.i8);
  v1413 = vmull_high_s8(v222, v222);
  v1396 = vmull_s8(*(int8x8_t *)v221.i8, *(int8x8_t *)v222.i8);
  v1397 = vmull_high_s8(v221, v222);
  if (!v182)
    goto LABEL_27;
LABEL_23:
  v270 = (int8x16_t *)(v182 + v3);
  if (v182 + v3 < (unint64_t)&v1414 && &v1366 < (int16x8_t *)&v270[8])
  {
    v271 = 0;
    v272 = v182 + v3;
    do
    {
      *(_BYTE *)(v272 + v271) = v1366.i16[v271] > v1398.i16[v271];
      ++v271;
    }
    while (v271 != 128);
LABEL_27:
    v273 = v1[4];
    v274 = v2[3];
    if (v3 == 1)
      goto LABEL_28;
    goto LABEL_31;
  }
  v314.i64[0] = 0x101010101010101;
  v314.i64[1] = 0x101010101010101;
  v315 = vandq_s8(vuzp1q_s8((int8x16_t)vcgtq_s16(v1368, v1400), (int8x16_t)vcgtq_s16(v1369, v1401)), v314);
  *v270 = vandq_s8(vuzp1q_s8((int8x16_t)vcgtq_s16(v1366, v1398), (int8x16_t)vcgtq_s16(v1367, v1399)), v314);
  v270[1] = v315;
  v316 = vandq_s8(vuzp1q_s8((int8x16_t)vcgtq_s16(v1372, v1404), (int8x16_t)vcgtq_s16(v1373, v1405)), v314);
  v270[2] = vandq_s8(vuzp1q_s8((int8x16_t)vcgtq_s16(v1370, v1402), (int8x16_t)vcgtq_s16(v1371, v1403)), v314);
  v270[3] = v316;
  v317 = vandq_s8(vuzp1q_s8((int8x16_t)vcgtq_s16(v1376, v1408), (int8x16_t)vcgtq_s16(v1377, v1409)), v314);
  v270[4] = vandq_s8(vuzp1q_s8((int8x16_t)vcgtq_s16(v1374, v1406), (int8x16_t)vcgtq_s16(v1375, v1407)), v314);
  v270[5] = v317;
  v5.i64[1] = v1413.i64[1];
  v318 = vandq_s8(vuzp1q_s8((int8x16_t)vcgtq_s16(v1378, v1410), (int8x16_t)vcgtq_s16(v1379, v1411)), v314);
  v319 = vandq_s8(vuzp1q_s8((int8x16_t)vcgtq_s16(v1380, v1412), (int8x16_t)vcgtq_s16(v1381, v1413)), v314);
  v270[6] = v318;
  v270[7] = v319;
  v273 = v1[4];
  v274 = v2[3];
  if (v3 == 1)
  {
LABEL_28:
    v275 = (uint8x16_t *)(v274 + 1);
    v276 = *(int8x16_t *)(v2[4] + 1);
    v277 = *(int8x16_t *)(v2[4] + 17);
    v278 = *v275++;
    v279 = (int8x16_t)vhsubq_u8((uint8x16_t)vextq_s8(v277, v276, 0xFuLL), (uint8x16_t)vextq_s8(v276, v277, 1uLL));
    v280 = (uint8x16_t *)(v2[5] + 17);
    v281 = (int8x16_t)vhsubq_u8(v278, *(uint8x16_t *)(v2[5] + 1));
    v283 = *(int8x16_t *)(v2[4] + 33);
    v282 = (int8x16_t *)(v2[4] + 49);
    v1415 = vmull_s8(*(int8x8_t *)v279.i8, *(int8x8_t *)v279.i8);
    v1416 = vmull_high_s8(v279, v279);
    v1447 = vmull_s8(*(int8x8_t *)v281.i8, *(int8x8_t *)v281.i8);
    v1448 = vmull_high_s8(v281, v281);
    v1431 = vmull_s8(*(int8x8_t *)v279.i8, *(int8x8_t *)v281.i8);
    v1432 = vmull_high_s8(v279, v281);
    v284 = *v275++;
    v285 = (int8x16_t)vhsubq_u8((uint8x16_t)vextq_s8(v276, v277, 0xFuLL), (uint8x16_t)vextq_s8(v277, v283, 1uLL));
    v286 = *v280++;
    v287 = (int8x16_t)vhsubq_u8(v284, v286);
    v288 = *v282++;
    v1417 = vmull_s8(*(int8x8_t *)v285.i8, *(int8x8_t *)v285.i8);
    v1418 = vmull_high_s8(v285, v285);
    v1449 = vmull_s8(*(int8x8_t *)v287.i8, *(int8x8_t *)v287.i8);
    v1450 = vmull_high_s8(v287, v287);
    v1433 = vmull_s8(*(int8x8_t *)v285.i8, *(int8x8_t *)v287.i8);
    v1434 = vmull_high_s8(v285, v287);
    v289 = *v275++;
    v290 = (int8x16_t)vhsubq_u8((uint8x16_t)vextq_s8(v277, v283, 0xFuLL), (uint8x16_t)vextq_s8(v283, v288, 1uLL));
    v291 = *v280++;
    v292 = (int8x16_t)vhsubq_u8(v289, v291);
    v293 = *v282++;
    v1419 = vmull_s8(*(int8x8_t *)v290.i8, *(int8x8_t *)v290.i8);
    v1420 = vmull_high_s8(v290, v290);
    v1451 = vmull_s8(*(int8x8_t *)v292.i8, *(int8x8_t *)v292.i8);
    v1452 = vmull_high_s8(v292, v292);
    v1435 = vmull_s8(*(int8x8_t *)v290.i8, *(int8x8_t *)v292.i8);
    v1436 = vmull_high_s8(v290, v292);
    v294 = *v275++;
    v295 = (int8x16_t)vhsubq_u8((uint8x16_t)vextq_s8(v283, v288, 0xFuLL), (uint8x16_t)vextq_s8(v288, v293, 1uLL));
    v296 = *v280++;
    v297 = (int8x16_t)vhsubq_u8(v294, v296);
    v298 = *v282++;
    v1421 = vmull_s8(*(int8x8_t *)v295.i8, *(int8x8_t *)v295.i8);
    v1422 = vmull_high_s8(v295, v295);
    v1453 = vmull_s8(*(int8x8_t *)v297.i8, *(int8x8_t *)v297.i8);
    v1454 = vmull_high_s8(v297, v297);
    v1437 = vmull_s8(*(int8x8_t *)v295.i8, *(int8x8_t *)v297.i8);
    v1438 = vmull_high_s8(v295, v297);
    v299 = *v275++;
    v300 = (int8x16_t)vhsubq_u8((uint8x16_t)vextq_s8(v288, v293, 0xFuLL), (uint8x16_t)vextq_s8(v293, v298, 1uLL));
    v301 = *v280++;
    v302 = (int8x16_t)vhsubq_u8(v299, v301);
    v303 = *v282++;
    v1423 = vmull_s8(*(int8x8_t *)v300.i8, *(int8x8_t *)v300.i8);
    v1424 = vmull_high_s8(v300, v300);
    v1455 = vmull_s8(*(int8x8_t *)v302.i8, *(int8x8_t *)v302.i8);
    v1456 = vmull_high_s8(v302, v302);
    v1439 = vmull_s8(*(int8x8_t *)v300.i8, *(int8x8_t *)v302.i8);
    v1440 = vmull_high_s8(v300, v302);
    v304 = *v275++;
    v305 = (int8x16_t)vhsubq_u8((uint8x16_t)vextq_s8(v293, v298, 0xFuLL), (uint8x16_t)vextq_s8(v298, v303, 1uLL));
    v306 = *v280++;
    v307 = (int8x16_t)vhsubq_u8(v304, v306);
    v308 = *v282;
    v1425 = vmull_s8(*(int8x8_t *)v305.i8, *(int8x8_t *)v305.i8);
    v1426 = vmull_high_s8(v305, v305);
    v1457 = vmull_s8(*(int8x8_t *)v307.i8, *(int8x8_t *)v307.i8);
    v1458 = vmull_high_s8(v307, v307);
    v1441 = vmull_s8(*(int8x8_t *)v305.i8, *(int8x8_t *)v307.i8);
    v1442 = vmull_high_s8(v305, v307);
    v309 = (int8x16_t)vhsubq_u8((uint8x16_t)vextq_s8(v298, v303, 0xFuLL), (uint8x16_t)vextq_s8(v303, v308, 1uLL));
    v310 = (int8x16_t)vhsubq_u8(*v275, *v280);
    v311 = v282[1];
    v1427 = vmull_s8(*(int8x8_t *)v309.i8, *(int8x8_t *)v309.i8);
    v1428 = vmull_high_s8(v309, v309);
    v1459 = vmull_s8(*(int8x8_t *)v310.i8, *(int8x8_t *)v310.i8);
    v1460 = vmull_high_s8(v310, v310);
    v1443 = vmull_s8(*(int8x8_t *)v309.i8, *(int8x8_t *)v310.i8);
    v1444 = vmull_high_s8(v309, v310);
    v312 = (int8x16_t)vhsubq_u8((uint8x16_t)vextq_s8(v303, v308, 0xFuLL), (uint8x16_t)vextq_s8(v308, v311, 1uLL));
    v313 = (int8x16_t)vhsubq_u8(v275[1], v280[1]);
    v1429 = vmull_s8(*(int8x8_t *)v312.i8, *(int8x8_t *)v312.i8);
    v1430 = vmull_high_s8(v312, v312);
    v1461 = vmull_s8(*(int8x8_t *)v313.i8, *(int8x8_t *)v313.i8);
    v1462 = vmull_high_s8(v313, v313);
    v1445 = vmull_s8(*(int8x8_t *)v312.i8, *(int8x8_t *)v313.i8);
    v1446 = vmull_high_s8(v312, v313);
    if (!v273)
      goto LABEL_36;
    goto LABEL_32;
  }
LABEL_31:
  v320 = (uint8x16_t *)(v274 + (int)v3);
  v321 = (uint8x16_t *)(v2[5] + (int)v3);
  v323.i64[0] = *(_QWORD *)(v2[4] + (int)v3 - 8);
  v322 = (int8x16_t *)(v2[4] + (int)v3);
  v323.i64[1] = v323.i64[0];
  v324 = *v322;
  v325 = v322[1];
  v322 += 2;
  v326 = *v320++;
  v327 = (int8x16_t)vhsubq_u8((uint8x16_t)vextq_s8(v323, v324, 0xFuLL), (uint8x16_t)vextq_s8(v324, v325, 1uLL));
  v328 = *v321++;
  v329 = (int8x16_t)vhsubq_u8(v326, v328);
  v330 = *v322++;
  v1415 = vmull_s8(*(int8x8_t *)v327.i8, *(int8x8_t *)v327.i8);
  v1416 = vmull_high_s8(v327, v327);
  v1447 = vmull_s8(*(int8x8_t *)v329.i8, *(int8x8_t *)v329.i8);
  v1448 = vmull_high_s8(v329, v329);
  v1431 = vmull_s8(*(int8x8_t *)v327.i8, *(int8x8_t *)v329.i8);
  v1432 = vmull_high_s8(v327, v329);
  v331 = *v320++;
  v332 = (int8x16_t)vhsubq_u8((uint8x16_t)vextq_s8(v324, v325, 0xFuLL), (uint8x16_t)vextq_s8(v325, v330, 1uLL));
  v333 = *v321++;
  v334 = (int8x16_t)vhsubq_u8(v331, v333);
  v335 = *v322++;
  v1417 = vmull_s8(*(int8x8_t *)v332.i8, *(int8x8_t *)v332.i8);
  v1418 = vmull_high_s8(v332, v332);
  v1449 = vmull_s8(*(int8x8_t *)v334.i8, *(int8x8_t *)v334.i8);
  v1450 = vmull_high_s8(v334, v334);
  v1433 = vmull_s8(*(int8x8_t *)v332.i8, *(int8x8_t *)v334.i8);
  v1434 = vmull_high_s8(v332, v334);
  v336 = *v320++;
  v337 = (int8x16_t)vhsubq_u8((uint8x16_t)vextq_s8(v325, v330, 0xFuLL), (uint8x16_t)vextq_s8(v330, v335, 1uLL));
  v338 = *v321++;
  v339 = (int8x16_t)vhsubq_u8(v336, v338);
  v340 = *v322++;
  v1419 = vmull_s8(*(int8x8_t *)v337.i8, *(int8x8_t *)v337.i8);
  v1420 = vmull_high_s8(v337, v337);
  v1451 = vmull_s8(*(int8x8_t *)v339.i8, *(int8x8_t *)v339.i8);
  v1452 = vmull_high_s8(v339, v339);
  v1435 = vmull_s8(*(int8x8_t *)v337.i8, *(int8x8_t *)v339.i8);
  v1436 = vmull_high_s8(v337, v339);
  v341 = *v320++;
  v342 = (int8x16_t)vhsubq_u8((uint8x16_t)vextq_s8(v330, v335, 0xFuLL), (uint8x16_t)vextq_s8(v335, v340, 1uLL));
  v343 = *v321++;
  v344 = (int8x16_t)vhsubq_u8(v341, v343);
  v345 = *v322++;
  v1421 = vmull_s8(*(int8x8_t *)v342.i8, *(int8x8_t *)v342.i8);
  v1422 = vmull_high_s8(v342, v342);
  v1453 = vmull_s8(*(int8x8_t *)v344.i8, *(int8x8_t *)v344.i8);
  v1454 = vmull_high_s8(v344, v344);
  v1437 = vmull_s8(*(int8x8_t *)v342.i8, *(int8x8_t *)v344.i8);
  v1438 = vmull_high_s8(v342, v344);
  v346 = *v320++;
  v347 = (int8x16_t)vhsubq_u8((uint8x16_t)vextq_s8(v335, v340, 0xFuLL), (uint8x16_t)vextq_s8(v340, v345, 1uLL));
  v348 = *v321++;
  v349 = (int8x16_t)vhsubq_u8(v346, v348);
  v350 = *v322++;
  v1423 = vmull_s8(*(int8x8_t *)v347.i8, *(int8x8_t *)v347.i8);
  v1424 = vmull_high_s8(v347, v347);
  v1455 = vmull_s8(*(int8x8_t *)v349.i8, *(int8x8_t *)v349.i8);
  v1456 = vmull_high_s8(v349, v349);
  v1439 = vmull_s8(*(int8x8_t *)v347.i8, *(int8x8_t *)v349.i8);
  v1440 = vmull_high_s8(v347, v349);
  v351 = *v320++;
  v352 = (int8x16_t)vhsubq_u8((uint8x16_t)vextq_s8(v340, v345, 0xFuLL), (uint8x16_t)vextq_s8(v345, v350, 1uLL));
  v353 = *v321++;
  v354 = (int8x16_t)vhsubq_u8(v351, v353);
  v355 = *v322;
  v1425 = vmull_s8(*(int8x8_t *)v352.i8, *(int8x8_t *)v352.i8);
  v1426 = vmull_high_s8(v352, v352);
  v1457 = vmull_s8(*(int8x8_t *)v354.i8, *(int8x8_t *)v354.i8);
  v1458 = vmull_high_s8(v354, v354);
  v1441 = vmull_s8(*(int8x8_t *)v352.i8, *(int8x8_t *)v354.i8);
  v1442 = vmull_high_s8(v352, v354);
  v356 = (int8x16_t)vhsubq_u8((uint8x16_t)vextq_s8(v345, v350, 0xFuLL), (uint8x16_t)vextq_s8(v350, v355, 1uLL));
  v357 = (int8x16_t)vhsubq_u8(*v320, *v321);
  v358 = v322[1];
  v1427 = vmull_s8(*(int8x8_t *)v356.i8, *(int8x8_t *)v356.i8);
  v1428 = vmull_high_s8(v356, v356);
  v1459 = vmull_s8(*(int8x8_t *)v357.i8, *(int8x8_t *)v357.i8);
  v1460 = vmull_high_s8(v357, v357);
  v1443 = vmull_s8(*(int8x8_t *)v356.i8, *(int8x8_t *)v357.i8);
  v1444 = vmull_high_s8(v356, v357);
  v359 = (int8x16_t)vhsubq_u8((uint8x16_t)vextq_s8(v350, v355, 0xFuLL), (uint8x16_t)vextq_s8(v355, v358, 1uLL));
  v360 = (int8x16_t)vhsubq_u8(v320[1], v321[1]);
  v1429 = vmull_s8(*(int8x8_t *)v359.i8, *(int8x8_t *)v359.i8);
  v1430 = vmull_high_s8(v359, v359);
  v1461 = vmull_s8(*(int8x8_t *)v360.i8, *(int8x8_t *)v360.i8);
  v1462 = vmull_high_s8(v360, v360);
  v1445 = vmull_s8(*(int8x8_t *)v359.i8, *(int8x8_t *)v360.i8);
  v1446 = vmull_high_s8(v359, v360);
  if (!v273)
    goto LABEL_36;
LABEL_32:
  v361 = (int8x16_t *)(v273 + v3);
  if (v273 + v3 >= (unint64_t)&v1463 || (v362 = &v1415, &v1415 >= (int16x8_t *)&v361[8]))
  {
    v365.i64[0] = 0x101010101010101;
    v365.i64[1] = 0x101010101010101;
    v366 = vandq_s8(vuzp1q_s8((int8x16_t)vcgtq_s16(v1417, v1449), (int8x16_t)vcgtq_s16(v1418, v1450)), v365);
    *v361 = vandq_s8(vuzp1q_s8((int8x16_t)vcgtq_s16(v1415, v1447), (int8x16_t)vcgtq_s16(v1416, v1448)), v365);
    v361[1] = v366;
    v367 = vandq_s8(vuzp1q_s8((int8x16_t)vcgtq_s16(v1421, v1453), (int8x16_t)vcgtq_s16(v1422, v1454)), v365);
    v361[2] = vandq_s8(vuzp1q_s8((int8x16_t)vcgtq_s16(v1419, v1451), (int8x16_t)vcgtq_s16(v1420, v1452)), v365);
    v361[3] = v367;
    v368 = vandq_s8(vuzp1q_s8((int8x16_t)vcgtq_s16(v1425, v1457), (int8x16_t)vcgtq_s16(v1426, v1458)), v365);
    v361[4] = vandq_s8(vuzp1q_s8((int8x16_t)vcgtq_s16(v1423, v1455), (int8x16_t)vcgtq_s16(v1424, v1456)), v365);
    v361[5] = v368;
    v5.i64[1] = v1462.i64[1];
    v369 = vandq_s8(vuzp1q_s8((int8x16_t)vcgtq_s16(v1427, v1459), (int8x16_t)vcgtq_s16(v1428, v1460)), v365);
    v370 = vandq_s8(vuzp1q_s8((int8x16_t)vcgtq_s16(v1429, v1461), (int8x16_t)vcgtq_s16(v1430, v1462)), v365);
    v361[6] = v369;
    v361[7] = v370;
    v1232 = v3;
    v1234 = v4 - 1;
    if ((unint64_t)(v4 - 1) < 6)
      return result;
    goto LABEL_39;
  }
  v363 = v273 + v3;
  for (i = 1920; i != 2048; ++i)
  {
    *(_BYTE *)(v363 + i - 1920) = v362->i16[0] > v362[32].i16[0];
    v362 = (int16x8_t *)((char *)v362 + 2);
  }
LABEL_36:
  v1232 = v3;
  v1234 = v4 - 1;
  if ((unint64_t)(v4 - 1) >= 6)
  {
LABEL_39:
    v371 = 0;
    result = v1265;
    v1233 = (int)v1232 + 2;
    v372 = (float32x4_t)vdupq_n_s32(0x3D75C28Fu);
    v373 = (float32x2_t)vdup_n_s32(0x3D75C28Fu);
    v374.i64[0] = 0x101010101010101;
    v374.i64[1] = 0x101010101010101;
    v375 = &v1464;
    v376 = 5;
    v377 = 4;
    do
    {
      v378 = v1237[v376];
      v379 = *(uint64_t *)((char *)v2 + (((v376 << 32) - 0x100000000) >> 29));
      v380 = v2[(int)v376];
      v381 = *(uint64_t *)((char *)v2 + (((v376 << 32) + 0x100000000) >> 29));
      v382 = &v1268 + 80 * ((v376 - 1) % 5uLL);
      v383 = v382 + 16;
      v384 = v382 + 32;
      if (v1236 == 1)
      {
        v385 = (uint8x16_t *)(v379 + 1);
        v386 = (int8x16_t *)(v380 + 1);
        v387 = (uint8x16_t *)(v381 + 1);
        v388 = *v386;
        v389 = v386[1];
        v386 += 2;
        v390 = *v385++;
        v391 = (int8x16_t)vhsubq_u8((uint8x16_t)vextq_s8(v389, v388, 0xFuLL), (uint8x16_t)vextq_s8(v388, v389, 1uLL));
        v392 = *v387++;
        v393 = (int8x16_t)vhsubq_u8(v390, v392);
        v394 = *v386++;
        *v382 = vmull_s8(*(int8x8_t *)v391.i8, *(int8x8_t *)v391.i8);
        v382[1] = vmull_high_s8(v391, v391);
        *v384 = vmull_s8(*(int8x8_t *)v393.i8, *(int8x8_t *)v393.i8);
        v382[33] = vmull_high_s8(v393, v393);
        *v383 = vmull_s8(*(int8x8_t *)v391.i8, *(int8x8_t *)v393.i8);
        v382[17] = vmull_high_s8(v391, v393);
        v395 = *v385++;
        v396 = (int8x16_t)vhsubq_u8((uint8x16_t)vextq_s8(v388, v389, 0xFuLL), (uint8x16_t)vextq_s8(v389, v394, 1uLL));
        v397 = *v387++;
        v398 = (int8x16_t)vhsubq_u8(v395, v397);
        v399 = *v386++;
        v382[2] = vmull_s8(*(int8x8_t *)v396.i8, *(int8x8_t *)v396.i8);
        v382[3] = vmull_high_s8(v396, v396);
        v382[34] = vmull_s8(*(int8x8_t *)v398.i8, *(int8x8_t *)v398.i8);
        v382[35] = vmull_high_s8(v398, v398);
        v382[18] = vmull_s8(*(int8x8_t *)v396.i8, *(int8x8_t *)v398.i8);
        v382[19] = vmull_high_s8(v396, v398);
        v400 = *v385++;
        v401 = (int8x16_t)vhsubq_u8((uint8x16_t)vextq_s8(v389, v394, 0xFuLL), (uint8x16_t)vextq_s8(v394, v399, 1uLL));
        v402 = *v387++;
        v403 = (int8x16_t)vhsubq_u8(v400, v402);
        v404 = *v386++;
        v382[4] = vmull_s8(*(int8x8_t *)v401.i8, *(int8x8_t *)v401.i8);
        v382[5] = vmull_high_s8(v401, v401);
        v382[36] = vmull_s8(*(int8x8_t *)v403.i8, *(int8x8_t *)v403.i8);
        v382[37] = vmull_high_s8(v403, v403);
        v382[20] = vmull_s8(*(int8x8_t *)v401.i8, *(int8x8_t *)v403.i8);
        v382[21] = vmull_high_s8(v401, v403);
        v405 = *v385++;
        v406 = (int8x16_t)vhsubq_u8((uint8x16_t)vextq_s8(v394, v399, 0xFuLL), (uint8x16_t)vextq_s8(v399, v404, 1uLL));
        v407 = *v387++;
        v408 = (int8x16_t)vhsubq_u8(v405, v407);
        v409 = *v386++;
        v382[6] = vmull_s8(*(int8x8_t *)v406.i8, *(int8x8_t *)v406.i8);
        v382[7] = vmull_high_s8(v406, v406);
        v382[38] = vmull_s8(*(int8x8_t *)v408.i8, *(int8x8_t *)v408.i8);
        v382[39] = vmull_high_s8(v408, v408);
        v382[22] = vmull_s8(*(int8x8_t *)v406.i8, *(int8x8_t *)v408.i8);
        v382[23] = vmull_high_s8(v406, v408);
        v410 = *v385++;
        v411 = (int8x16_t)vhsubq_u8((uint8x16_t)vextq_s8(v399, v404, 0xFuLL), (uint8x16_t)vextq_s8(v404, v409, 1uLL));
        v412 = *v387++;
        v413 = (int8x16_t)vhsubq_u8(v410, v412);
        v414 = *v386++;
        v382[8] = vmull_s8(*(int8x8_t *)v411.i8, *(int8x8_t *)v411.i8);
        v382[9] = vmull_high_s8(v411, v411);
        v382[40] = vmull_s8(*(int8x8_t *)v413.i8, *(int8x8_t *)v413.i8);
        v382[41] = vmull_high_s8(v413, v413);
        v382[24] = vmull_s8(*(int8x8_t *)v411.i8, *(int8x8_t *)v413.i8);
        v382[25] = vmull_high_s8(v411, v413);
        v415 = *v385++;
        v416 = (int8x16_t)vhsubq_u8((uint8x16_t)vextq_s8(v404, v409, 0xFuLL), (uint8x16_t)vextq_s8(v409, v414, 1uLL));
        v417 = *v387++;
        v418 = (int8x16_t)vhsubq_u8(v415, v417);
        v419 = *v386;
        v382[10] = vmull_s8(*(int8x8_t *)v416.i8, *(int8x8_t *)v416.i8);
        v382[11] = vmull_high_s8(v416, v416);
        v382[42] = vmull_s8(*(int8x8_t *)v418.i8, *(int8x8_t *)v418.i8);
        v382[43] = vmull_high_s8(v418, v418);
        v382[26] = vmull_s8(*(int8x8_t *)v416.i8, *(int8x8_t *)v418.i8);
        v382[27] = vmull_high_s8(v416, v418);
        v420 = (int8x16_t)vhsubq_u8((uint8x16_t)vextq_s8(v409, v414, 0xFuLL), (uint8x16_t)vextq_s8(v414, v419, 1uLL));
        v421 = (int8x16_t)vhsubq_u8(*v385, *v387);
        v422 = v386[1];
        v382[12] = vmull_s8(*(int8x8_t *)v420.i8, *(int8x8_t *)v420.i8);
        v382[13] = vmull_high_s8(v420, v420);
        v382[44] = vmull_s8(*(int8x8_t *)v421.i8, *(int8x8_t *)v421.i8);
        v382[45] = vmull_high_s8(v421, v421);
        v382[28] = vmull_s8(*(int8x8_t *)v420.i8, *(int8x8_t *)v421.i8);
        v382[29] = vmull_high_s8(v420, v421);
        v423 = (int8x16_t)vhsubq_u8((uint8x16_t)vextq_s8(v414, v419, 0xFuLL), (uint8x16_t)vextq_s8(v419, v422, 1uLL));
        v424 = (int8x16_t)vhsubq_u8(v385[1], v387[1]);
        v382[14] = vmull_s8(*(int8x8_t *)v423.i8, *(int8x8_t *)v423.i8);
        v382[15] = vmull_high_s8(v423, v423);
        v382[46] = vmull_s8(*(int8x8_t *)v424.i8, *(int8x8_t *)v424.i8);
        v382[47] = vmull_high_s8(v424, v424);
        v382[30] = vmull_s8(*(int8x8_t *)v423.i8, *(int8x8_t *)v424.i8);
        v382[31] = vmull_high_s8(v423, v424);
        if (v378)
          goto LABEL_44;
      }
      else
      {
        v425.i64[0] = *(_QWORD *)(v380 + (int)v1232 - 8);
        v425.i64[1] = v425.i64[0];
        v426 = *(int8x16_t *)(v380 + (int)v1232);
        v427 = *(int8x16_t *)(v380 + (int)v1232 + 16);
        v428 = (int8x16_t)vhsubq_u8((uint8x16_t)vextq_s8(v425, v426, 0xFuLL), (uint8x16_t)vextq_s8(v426, v427, 1uLL));
        v429 = (int8x16_t)vhsubq_u8(*(uint8x16_t *)(v379 + (int)v1232), *(uint8x16_t *)(v381 + (int)v1232));
        v430 = *(int8x16_t *)(v380 + (int)v1232 + 32);
        *v382 = vmull_s8(*(int8x8_t *)v428.i8, *(int8x8_t *)v428.i8);
        v382[1] = vmull_high_s8(v428, v428);
        *v384 = vmull_s8(*(int8x8_t *)v429.i8, *(int8x8_t *)v429.i8);
        v382[33] = vmull_high_s8(v429, v429);
        *v383 = vmull_s8(*(int8x8_t *)v428.i8, *(int8x8_t *)v429.i8);
        v382[17] = vmull_high_s8(v428, v429);
        v431 = (int8x16_t)vhsubq_u8((uint8x16_t)vextq_s8(v426, v427, 0xFuLL), (uint8x16_t)vextq_s8(v427, v430, 1uLL));
        v432 = (int8x16_t)vhsubq_u8(*(uint8x16_t *)(v379 + (int)v1232 + 16), *(uint8x16_t *)(v381 + (int)v1232 + 16));
        v433 = *(int8x16_t *)(v380 + (int)v1232 + 48);
        v382[2] = vmull_s8(*(int8x8_t *)v431.i8, *(int8x8_t *)v431.i8);
        v382[3] = vmull_high_s8(v431, v431);
        v382[34] = vmull_s8(*(int8x8_t *)v432.i8, *(int8x8_t *)v432.i8);
        v382[35] = vmull_high_s8(v432, v432);
        v382[18] = vmull_s8(*(int8x8_t *)v431.i8, *(int8x8_t *)v432.i8);
        v382[19] = vmull_high_s8(v431, v432);
        v434 = (int8x16_t)vhsubq_u8((uint8x16_t)vextq_s8(v427, v430, 0xFuLL), (uint8x16_t)vextq_s8(v430, v433, 1uLL));
        v435 = (int8x16_t)vhsubq_u8(*(uint8x16_t *)(v379 + (int)v1232 + 32), *(uint8x16_t *)(v381 + (int)v1232 + 32));
        v436 = *(int8x16_t *)(v380 + (int)v1232 + 64);
        v382[4] = vmull_s8(*(int8x8_t *)v434.i8, *(int8x8_t *)v434.i8);
        v382[5] = vmull_high_s8(v434, v434);
        v382[36] = vmull_s8(*(int8x8_t *)v435.i8, *(int8x8_t *)v435.i8);
        v382[37] = vmull_high_s8(v435, v435);
        v382[20] = vmull_s8(*(int8x8_t *)v434.i8, *(int8x8_t *)v435.i8);
        v382[21] = vmull_high_s8(v434, v435);
        v437 = (int8x16_t)vhsubq_u8((uint8x16_t)vextq_s8(v430, v433, 0xFuLL), (uint8x16_t)vextq_s8(v433, v436, 1uLL));
        v438 = (int8x16_t)vhsubq_u8(*(uint8x16_t *)(v379 + (int)v1232 + 48), *(uint8x16_t *)(v381 + (int)v1232 + 48));
        v439 = *(int8x16_t *)(v380 + (int)v1232 + 80);
        v382[6] = vmull_s8(*(int8x8_t *)v437.i8, *(int8x8_t *)v437.i8);
        v382[7] = vmull_high_s8(v437, v437);
        v382[38] = vmull_s8(*(int8x8_t *)v438.i8, *(int8x8_t *)v438.i8);
        v382[39] = vmull_high_s8(v438, v438);
        v382[22] = vmull_s8(*(int8x8_t *)v437.i8, *(int8x8_t *)v438.i8);
        v382[23] = vmull_high_s8(v437, v438);
        v440 = (int8x16_t)vhsubq_u8((uint8x16_t)vextq_s8(v433, v436, 0xFuLL), (uint8x16_t)vextq_s8(v436, v439, 1uLL));
        v441 = (int8x16_t)vhsubq_u8(*(uint8x16_t *)(v379 + (int)v1232 + 64), *(uint8x16_t *)(v381 + (int)v1232 + 64));
        v442 = *(int8x16_t *)(v380 + (int)v1232 + 96);
        v382[8] = vmull_s8(*(int8x8_t *)v440.i8, *(int8x8_t *)v440.i8);
        v382[9] = vmull_high_s8(v440, v440);
        v382[40] = vmull_s8(*(int8x8_t *)v441.i8, *(int8x8_t *)v441.i8);
        v382[41] = vmull_high_s8(v441, v441);
        v382[24] = vmull_s8(*(int8x8_t *)v440.i8, *(int8x8_t *)v441.i8);
        v382[25] = vmull_high_s8(v440, v441);
        v443 = (int8x16_t)vhsubq_u8((uint8x16_t)vextq_s8(v436, v439, 0xFuLL), (uint8x16_t)vextq_s8(v439, v442, 1uLL));
        v444 = (int8x16_t)vhsubq_u8(*(uint8x16_t *)(v379 + (int)v1232 + 80), *(uint8x16_t *)(v381 + (int)v1232 + 80));
        v445 = *(int8x16_t *)(v380 + (int)v1232 + 112);
        v382[10] = vmull_s8(*(int8x8_t *)v443.i8, *(int8x8_t *)v443.i8);
        v382[11] = vmull_high_s8(v443, v443);
        v382[42] = vmull_s8(*(int8x8_t *)v444.i8, *(int8x8_t *)v444.i8);
        v382[43] = vmull_high_s8(v444, v444);
        v382[26] = vmull_s8(*(int8x8_t *)v443.i8, *(int8x8_t *)v444.i8);
        v382[27] = vmull_high_s8(v443, v444);
        v446 = (int8x16_t)vhsubq_u8((uint8x16_t)vextq_s8(v439, v442, 0xFuLL), (uint8x16_t)vextq_s8(v442, v445, 1uLL));
        v447 = (int8x16_t)vhsubq_u8(*(uint8x16_t *)(v379 + (int)v1232 + 96), *(uint8x16_t *)(v381 + (int)v1232 + 96));
        v448 = *(int8x16_t *)(v380 + (int)v1232 + 128);
        v382[12] = vmull_s8(*(int8x8_t *)v446.i8, *(int8x8_t *)v446.i8);
        v382[13] = vmull_high_s8(v446, v446);
        v382[44] = vmull_s8(*(int8x8_t *)v447.i8, *(int8x8_t *)v447.i8);
        v382[45] = vmull_high_s8(v447, v447);
        v382[28] = vmull_s8(*(int8x8_t *)v446.i8, *(int8x8_t *)v447.i8);
        v382[29] = vmull_high_s8(v446, v447);
        v449 = (int8x16_t)vhsubq_u8((uint8x16_t)vextq_s8(v442, v445, 0xFuLL), (uint8x16_t)vextq_s8(v445, v448, 1uLL));
        v450 = (int8x16_t)vhsubq_u8(*(uint8x16_t *)(v379 + (int)v1232 + 112), *(uint8x16_t *)(v381 + (int)v1232 + 112));
        v382[14] = vmull_s8(*(int8x8_t *)v449.i8, *(int8x8_t *)v449.i8);
        v382[15] = vmull_high_s8(v449, v449);
        v382[46] = vmull_s8(*(int8x8_t *)v450.i8, *(int8x8_t *)v450.i8);
        v382[47] = vmull_high_s8(v450, v450);
        v382[30] = vmull_s8(*(int8x8_t *)v449.i8, *(int8x8_t *)v450.i8);
        v382[31] = vmull_high_s8(v449, v450);
        if (v378)
        {
LABEL_44:
          v451 = &v1268 + 80 * v371 + -400 * ((v371 + 4) / 5uLL);
          v452 = (int8x16_t *)(v378 + v1232);
          if (v378 + v1232 >= (unint64_t)&v451[368] || (unint64_t)&v451[320] >= v378 + v1232 + 128)
          {
            v454 = vandq_s8(vuzp1q_s8((int8x16_t)vcgtq_s16(v382[2], v382[34]), (int8x16_t)vcgtq_s16(v382[3], v382[35])), v374);
            *v452 = vandq_s8(vuzp1q_s8((int8x16_t)vcgtq_s16(*v382, v382[32]), (int8x16_t)vcgtq_s16(v382[1], v382[33])), v374);
            v452[1] = v454;
            v455 = (int8x16_t *)(v378 + v1232 + 32);
            v456 = vandq_s8(vuzp1q_s8((int8x16_t)vcgtq_s16(v382[6], v382[38]), (int8x16_t)vcgtq_s16(v382[7], v382[39])), v374);
            *v455 = vandq_s8(vuzp1q_s8((int8x16_t)vcgtq_s16(v382[4], v382[36]), (int8x16_t)vcgtq_s16(v382[5], v382[37])), v374);
            v455[1] = v456;
            v457 = (int8x16_t *)(v378 + v1232 + 64);
            v458 = vandq_s8(vuzp1q_s8((int8x16_t)vcgtq_s16(v382[10], v382[42]), (int8x16_t)vcgtq_s16(v382[11], v382[43])), v374);
            *v457 = vandq_s8(vuzp1q_s8((int8x16_t)vcgtq_s16(v382[8], v382[40]), (int8x16_t)vcgtq_s16(v382[9], v382[41])), v374);
            v457[1] = v458;
            v459 = (int8x16_t *)(v378 + v1232 + 96);
            v460 = vandq_s8(vuzp1q_s8((int8x16_t)vcgtq_s16(v382[14], v382[46]), (int8x16_t)vcgtq_s16(v382[15], v382[47])), v374);
            *v459 = vandq_s8(vuzp1q_s8((int8x16_t)vcgtq_s16(v382[12], v382[44]), (int8x16_t)vcgtq_s16(v382[13], v382[45])), v374);
            v459[1] = v460;
          }
          else
          {
            v461 = 0;
            v462 = (__int16 *)&v375[-800 * (v377 / 5)];
            do
            {
              v452->i8[v461++] = *v462 > v462[256];
              ++v462;
            }
            while (v461 != 128);
          }
        }
      }
      v463 = (v376 - 5) % 5uLL;
      v464 = &v1268 + 80 * v463;
      v465 = v463 - 4;
      if (v463 < 4)
        v465 = v463 + 1;
      v466 = &v1268 + 80 * v465;
      if (v463 > 2)
        v467 = -3;
      else
        v467 = 2;
      v468 = &v1268 + 80 * v467 + 80 * v463;
      if (v463 >= 2)
        v469 = -2;
      else
        v469 = 3;
      v470 = &v1268 + 80 * v469 + 80 * v463;
      v471 = v463 - 1;
      v472 = 4;
      if (v376 - 5 != 5 * ((v376 - 5) / 5uLL))
        v472 = v471;
      v473 = &v1268 + 80 * v472;
      v474 = v464[1];
      v475 = v466[1];
      v476 = v468[1];
      v477 = vaddw_s16(vshll_n_s16(*(int16x4_t *)v475.i8, 2uLL), *(int16x4_t *)v474.i8);
      v478 = vaddw_high_s16(vshll_high_n_s16(v475, 2uLL), v474);
      v479 = v470[1];
      v480 = vshll_n_s16(*(int16x4_t *)v468->i8, 1uLL);
      v481 = vshll_high_n_s16(*v468, 1uLL);
      v482 = vshll_n_s16(*(int16x4_t *)v476.i8, 1uLL);
      v483 = vshll_high_n_s16(v476, 1uLL);
      v484 = v473[1];
      v485 = v468[2];
      v486 = v468[3];
      v487 = vaddq_s32(vaddq_s32(vaddw_s16(vaddq_s32(vaddw_s16(vshll_n_s16(*(int16x4_t *)v466->i8, 2uLL), *(int16x4_t *)v464->i8), v480), *(int16x4_t *)v473->i8), vshlq_n_s32(v480, 1uLL)), vshll_n_s16(*(int16x4_t *)v470->i8, 2uLL));
      v488 = vaddq_s32(vaddq_s32(vaddw_high_s16(vaddq_s32(vaddw_high_s16(vshll_high_n_s16(*v466, 2uLL), *v464), v481), *v473), vshlq_n_s32(v481, 1uLL)), vshll_high_n_s16(*v470, 2uLL));
      v489 = vaddq_s32(vaddq_s32(vaddw_s16(vaddq_s32(v477, v482), *(int16x4_t *)v484.i8), vshlq_n_s32(v482, 1uLL)), vshll_n_s16(*(int16x4_t *)v479.i8, 2uLL));
      v490 = vaddq_s32(vaddq_s32(vaddw_high_s16(vaddq_s32(v478, v483), v484), vshlq_n_s32(v483, 1uLL)), vshll_high_n_s16(v479, 2uLL));
      v491 = v464[2];
      v492 = v464[3];
      v493 = v466[2];
      v494 = v466[3];
      v1238[0] = v487;
      v1238[1] = v488;
      v1238[2] = v489;
      v1238[3] = v490;
      v495 = vaddw_s16(vshll_n_s16(*(int16x4_t *)v493.i8, 2uLL), *(int16x4_t *)v491.i8);
      v496 = vaddw_high_s16(vshll_high_n_s16(v493, 2uLL), v491);
      v497 = vaddw_s16(vshll_n_s16(*(int16x4_t *)v494.i8, 2uLL), *(int16x4_t *)v492.i8);
      v498 = vaddw_high_s16(vshll_high_n_s16(v494, 2uLL), v492);
      v499 = v470[2];
      v500 = v470[3];
      v501 = vshll_n_s16(*(int16x4_t *)v485.i8, 1uLL);
      v502 = vshll_high_n_s16(v485, 1uLL);
      v503 = vshll_n_s16(*(int16x4_t *)v486.i8, 1uLL);
      v504 = vshll_high_n_s16(v486, 1uLL);
      v505 = v473[2];
      v506 = v473[3];
      v507 = v468[4];
      v508 = v468[5];
      v509 = vaddq_s32(vaddq_s32(vaddw_s16(vaddq_s32(v495, v501), *(int16x4_t *)v505.i8), vshlq_n_s32(v501, 1uLL)), vshll_n_s16(*(int16x4_t *)v499.i8, 2uLL));
      v510 = vaddq_s32(vaddq_s32(vaddw_high_s16(vaddq_s32(v496, v502), v505), vshlq_n_s32(v502, 1uLL)), vshll_high_n_s16(v499, 2uLL));
      v511 = vaddq_s32(vaddq_s32(vaddw_s16(vaddq_s32(v497, v503), *(int16x4_t *)v506.i8), vshlq_n_s32(v503, 1uLL)), vshll_n_s16(*(int16x4_t *)v500.i8, 2uLL));
      v512 = vaddq_s32(vaddq_s32(vaddw_high_s16(vaddq_s32(v498, v504), v506), vshlq_n_s32(v504, 1uLL)), vshll_high_n_s16(v500, 2uLL));
      v513 = v464[4];
      v514 = v464[5];
      v515 = v466[4];
      v516 = v466[5];
      v1239[0] = v509;
      v1239[1] = v510;
      v1239[2] = v511;
      v1239[3] = v512;
      v517 = vaddw_s16(vshll_n_s16(*(int16x4_t *)v515.i8, 2uLL), *(int16x4_t *)v513.i8);
      v518 = vaddw_high_s16(vshll_high_n_s16(v515, 2uLL), v513);
      v519 = vaddw_s16(vshll_n_s16(*(int16x4_t *)v516.i8, 2uLL), *(int16x4_t *)v514.i8);
      v520 = vaddw_high_s16(vshll_high_n_s16(v516, 2uLL), v514);
      v521 = v470[4];
      v522 = v470[5];
      v523 = vshll_n_s16(*(int16x4_t *)v507.i8, 1uLL);
      v524 = vshll_high_n_s16(v507, 1uLL);
      v525 = vshll_n_s16(*(int16x4_t *)v508.i8, 1uLL);
      v526 = vshll_high_n_s16(v508, 1uLL);
      v527 = v473[4];
      v528 = v473[5];
      v529 = v468[6];
      v530 = v468[7];
      v531 = vaddq_s32(vaddq_s32(vaddw_s16(vaddq_s32(v517, v523), *(int16x4_t *)v527.i8), vshlq_n_s32(v523, 1uLL)), vshll_n_s16(*(int16x4_t *)v521.i8, 2uLL));
      v532 = vaddq_s32(vaddq_s32(vaddw_high_s16(vaddq_s32(v518, v524), v527), vshlq_n_s32(v524, 1uLL)), vshll_high_n_s16(v521, 2uLL));
      v533 = vaddq_s32(vaddq_s32(vaddw_s16(vaddq_s32(v519, v525), *(int16x4_t *)v528.i8), vshlq_n_s32(v525, 1uLL)), vshll_n_s16(*(int16x4_t *)v522.i8, 2uLL));
      v534 = vaddq_s32(vaddq_s32(vaddw_high_s16(vaddq_s32(v520, v526), v528), vshlq_n_s32(v526, 1uLL)), vshll_high_n_s16(v522, 2uLL));
      v535 = v464[6];
      v536 = v464[7];
      v537 = v466[6];
      v538 = v466[7];
      v1240[0] = v531;
      v1240[1] = v532;
      v1240[2] = v533;
      v1240[3] = v534;
      v539 = vaddw_s16(vshll_n_s16(*(int16x4_t *)v537.i8, 2uLL), *(int16x4_t *)v535.i8);
      v540 = vaddw_high_s16(vshll_high_n_s16(v537, 2uLL), v535);
      v541 = vaddw_s16(vshll_n_s16(*(int16x4_t *)v538.i8, 2uLL), *(int16x4_t *)v536.i8);
      v542 = vaddw_high_s16(vshll_high_n_s16(v538, 2uLL), v536);
      v543 = v470[6];
      v544 = v470[7];
      v545 = vshll_n_s16(*(int16x4_t *)v529.i8, 1uLL);
      v546 = vshll_high_n_s16(v529, 1uLL);
      v547 = vshll_n_s16(*(int16x4_t *)v530.i8, 1uLL);
      v548 = vshll_high_n_s16(v530, 1uLL);
      v549 = v473[6];
      v550 = v473[7];
      v551 = v468[8];
      v552 = v468[9];
      v553 = vaddq_s32(vaddq_s32(vaddw_s16(vaddq_s32(v539, v545), *(int16x4_t *)v549.i8), vshlq_n_s32(v545, 1uLL)), vshll_n_s16(*(int16x4_t *)v543.i8, 2uLL));
      v554 = vaddq_s32(vaddq_s32(vaddw_high_s16(vaddq_s32(v540, v546), v549), vshlq_n_s32(v546, 1uLL)), vshll_high_n_s16(v543, 2uLL));
      v555 = vaddq_s32(vaddq_s32(vaddw_s16(vaddq_s32(v541, v547), *(int16x4_t *)v550.i8), vshlq_n_s32(v547, 1uLL)), vshll_n_s16(*(int16x4_t *)v544.i8, 2uLL));
      v556 = vaddq_s32(vaddq_s32(vaddw_high_s16(vaddq_s32(v542, v548), v550), vshlq_n_s32(v548, 1uLL)), vshll_high_n_s16(v544, 2uLL));
      v557 = v464[8];
      v558 = v464[9];
      v559 = v466[8];
      v560 = v466[9];
      v1241[0] = v553;
      v1241[1] = v554;
      v1241[2] = v555;
      v1241[3] = v556;
      v561 = vaddw_s16(vshll_n_s16(*(int16x4_t *)v559.i8, 2uLL), *(int16x4_t *)v557.i8);
      v562 = vaddw_high_s16(vshll_high_n_s16(v559, 2uLL), v557);
      v563 = vaddw_s16(vshll_n_s16(*(int16x4_t *)v560.i8, 2uLL), *(int16x4_t *)v558.i8);
      v564 = vaddw_high_s16(vshll_high_n_s16(v560, 2uLL), v558);
      v565 = v470[8];
      v566 = v470[9];
      v567 = vshll_n_s16(*(int16x4_t *)v551.i8, 1uLL);
      v568 = vshll_high_n_s16(v551, 1uLL);
      v569 = vshll_n_s16(*(int16x4_t *)v552.i8, 1uLL);
      v570 = vshll_high_n_s16(v552, 1uLL);
      v571 = v473[8];
      v572 = v473[9];
      v573 = v468[10];
      v574 = v468[11];
      v575 = vaddq_s32(vaddq_s32(vaddw_s16(vaddq_s32(v561, v567), *(int16x4_t *)v571.i8), vshlq_n_s32(v567, 1uLL)), vshll_n_s16(*(int16x4_t *)v565.i8, 2uLL));
      v576 = vaddq_s32(vaddq_s32(vaddw_high_s16(vaddq_s32(v562, v568), v571), vshlq_n_s32(v568, 1uLL)), vshll_high_n_s16(v565, 2uLL));
      v577 = vaddq_s32(vaddq_s32(vaddw_s16(vaddq_s32(v563, v569), *(int16x4_t *)v572.i8), vshlq_n_s32(v569, 1uLL)), vshll_n_s16(*(int16x4_t *)v566.i8, 2uLL));
      v578 = vaddq_s32(vaddq_s32(vaddw_high_s16(vaddq_s32(v564, v570), v572), vshlq_n_s32(v570, 1uLL)), vshll_high_n_s16(v566, 2uLL));
      v579 = v464[10];
      v580 = v464[11];
      v581 = v466[10];
      v582 = v466[11];
      v1242[0] = v575;
      v1242[1] = v576;
      v1242[2] = v577;
      v1242[3] = v578;
      v583 = vaddw_s16(vshll_n_s16(*(int16x4_t *)v581.i8, 2uLL), *(int16x4_t *)v579.i8);
      v584 = vaddw_high_s16(vshll_high_n_s16(v581, 2uLL), v579);
      v585 = vaddw_s16(vshll_n_s16(*(int16x4_t *)v582.i8, 2uLL), *(int16x4_t *)v580.i8);
      v586 = vaddw_high_s16(vshll_high_n_s16(v582, 2uLL), v580);
      v587 = v470[10];
      v588 = v470[11];
      v589 = vshll_n_s16(*(int16x4_t *)v573.i8, 1uLL);
      v590 = vshll_high_n_s16(v573, 1uLL);
      v591 = vshll_n_s16(*(int16x4_t *)v574.i8, 1uLL);
      v592 = vshll_high_n_s16(v574, 1uLL);
      v593 = v473[10];
      v594 = v473[11];
      v595 = v468[12];
      v596 = v468[13];
      v597 = vaddq_s32(vaddq_s32(vaddw_s16(vaddq_s32(v583, v589), *(int16x4_t *)v593.i8), vshlq_n_s32(v589, 1uLL)), vshll_n_s16(*(int16x4_t *)v587.i8, 2uLL));
      v598 = vaddq_s32(vaddq_s32(vaddw_high_s16(vaddq_s32(v584, v590), v593), vshlq_n_s32(v590, 1uLL)), vshll_high_n_s16(v587, 2uLL));
      v599 = vaddq_s32(vaddq_s32(vaddw_s16(vaddq_s32(v585, v591), *(int16x4_t *)v594.i8), vshlq_n_s32(v591, 1uLL)), vshll_n_s16(*(int16x4_t *)v588.i8, 2uLL));
      v600 = vaddq_s32(vaddq_s32(vaddw_high_s16(vaddq_s32(v586, v592), v594), vshlq_n_s32(v592, 1uLL)), vshll_high_n_s16(v588, 2uLL));
      v601 = v464[12];
      v602 = v464[13];
      v603 = v466[12];
      v604 = v466[13];
      v1243[0] = v597;
      v1243[1] = v598;
      v1243[2] = v599;
      v1243[3] = v600;
      v605 = vaddw_s16(vshll_n_s16(*(int16x4_t *)v603.i8, 2uLL), *(int16x4_t *)v601.i8);
      v606 = vaddw_high_s16(vshll_high_n_s16(v603, 2uLL), v601);
      v607 = vaddw_s16(vshll_n_s16(*(int16x4_t *)v604.i8, 2uLL), *(int16x4_t *)v602.i8);
      v608 = vaddw_high_s16(vshll_high_n_s16(v604, 2uLL), v602);
      v609 = v470[12];
      v610 = v470[13];
      v611 = vshll_n_s16(*(int16x4_t *)v595.i8, 1uLL);
      v612 = vshll_high_n_s16(v595, 1uLL);
      v613 = vshll_n_s16(*(int16x4_t *)v596.i8, 1uLL);
      v614 = vshll_high_n_s16(v596, 1uLL);
      v615 = v473[12];
      v616 = v473[13];
      v617 = v468[14];
      v618 = v468[15];
      v619 = vaddq_s32(vaddq_s32(vaddw_s16(vaddq_s32(v605, v611), *(int16x4_t *)v615.i8), vshlq_n_s32(v611, 1uLL)), vshll_n_s16(*(int16x4_t *)v609.i8, 2uLL));
      v620 = vaddq_s32(vaddq_s32(vaddw_high_s16(vaddq_s32(v606, v612), v615), vshlq_n_s32(v612, 1uLL)), vshll_high_n_s16(v609, 2uLL));
      v621 = vaddq_s32(vaddq_s32(vaddw_s16(vaddq_s32(v607, v613), *(int16x4_t *)v616.i8), vshlq_n_s32(v613, 1uLL)), vshll_n_s16(*(int16x4_t *)v610.i8, 2uLL));
      v622 = vaddq_s32(vaddq_s32(vaddw_high_s16(vaddq_s32(v608, v614), v616), vshlq_n_s32(v614, 1uLL)), vshll_high_n_s16(v610, 2uLL));
      v623 = v464[14];
      v624 = v464[15];
      v625 = v466[14];
      v626 = v466[15];
      v1244[0] = v619;
      v1244[1] = v620;
      v1244[2] = v621;
      v1244[3] = v622;
      v627 = vaddw_s16(vshll_n_s16(*(int16x4_t *)v625.i8, 2uLL), *(int16x4_t *)v623.i8);
      v628 = vaddw_high_s16(vshll_high_n_s16(v625, 2uLL), v623);
      v629 = vaddw_s16(vshll_n_s16(*(int16x4_t *)v626.i8, 2uLL), *(int16x4_t *)v624.i8);
      v630 = vaddw_high_s16(vshll_high_n_s16(v626, 2uLL), v624);
      v631 = v470[14];
      v632 = v470[15];
      v633 = vshll_n_s16(*(int16x4_t *)v617.i8, 1uLL);
      v634 = vshll_high_n_s16(v617, 1uLL);
      v635 = vshll_n_s16(*(int16x4_t *)v618.i8, 1uLL);
      v636 = vshll_high_n_s16(v618, 1uLL);
      v637 = v473[15];
      v638 = vaddq_s32(vaddq_s32(vaddw_high_s16(vaddq_s32(v628, v634), v473[14]), vshlq_n_s32(v634, 1uLL)), vshll_high_n_s16(v631, 2uLL));
      v1245[0] = vaddq_s32(vaddq_s32(vaddw_s16(vaddq_s32(v627, v633), *(int16x4_t *)v473[14].i8), vshlq_n_s32(v633, 1uLL)), vshll_n_s16(*(int16x4_t *)v631.i8, 2uLL));
      v1245[1] = v638;
      v1246 = vaddq_s32(vaddq_s32(vaddw_s16(vaddq_s32(v629, v635), *(int16x4_t *)v637.i8), vshlq_n_s32(v635, 1uLL)), vshll_n_s16(*(int16x4_t *)v632.i8, 2uLL));
      v1247 = vaddq_s32(vaddq_s32(vaddw_high_s16(vaddq_s32(v630, v636), v637), vshlq_n_s32(v636, 1uLL)), vshll_high_n_s16(v632, 2uLL));
      v639 = v464[16];
      v640 = v464[17];
      v641 = v466[16];
      v642 = v466[17];
      v643 = v468[16];
      v644 = v468[17];
      v645 = vaddw_s16(vshll_n_s16(*(int16x4_t *)v641.i8, 2uLL), *(int16x4_t *)v639.i8);
      v646 = vaddw_high_s16(vshll_high_n_s16(v641, 2uLL), v639);
      v647 = vaddw_s16(vshll_n_s16(*(int16x4_t *)v642.i8, 2uLL), *(int16x4_t *)v640.i8);
      v648 = vaddw_high_s16(vshll_high_n_s16(v642, 2uLL), v640);
      v649 = v470[16];
      v650 = v470[17];
      v651 = vshll_n_s16(*(int16x4_t *)v643.i8, 1uLL);
      v652 = vshll_high_n_s16(v643, 1uLL);
      v653 = vshll_n_s16(*(int16x4_t *)v644.i8, 1uLL);
      v654 = vshll_high_n_s16(v644, 1uLL);
      v655 = v473[16];
      v656 = v473[17];
      v657 = v468[18];
      v658 = v468[19];
      v659 = vaddq_s32(vaddq_s32(vaddw_s16(vaddq_s32(v645, v651), *(int16x4_t *)v655.i8), vshlq_n_s32(v651, 1uLL)), vshll_n_s16(*(int16x4_t *)v649.i8, 2uLL));
      v660 = vaddq_s32(vaddq_s32(vaddw_high_s16(vaddq_s32(v646, v652), v655), vshlq_n_s32(v652, 1uLL)), vshll_high_n_s16(v649, 2uLL));
      v661 = vaddq_s32(vaddq_s32(vaddw_s16(vaddq_s32(v647, v653), *(int16x4_t *)v656.i8), vshlq_n_s32(v653, 1uLL)), vshll_n_s16(*(int16x4_t *)v650.i8, 2uLL));
      v662 = vaddq_s32(vaddq_s32(vaddw_high_s16(vaddq_s32(v648, v654), v656), vshlq_n_s32(v654, 1uLL)), vshll_high_n_s16(v650, 2uLL));
      v663 = v464[18];
      v664 = v464[19];
      v665 = v466[18];
      v666 = v466[19];
      v1248[0] = v659;
      v1248[1] = v660;
      v1248[2] = v661;
      v1248[3] = v662;
      v667 = vaddw_s16(vshll_n_s16(*(int16x4_t *)v665.i8, 2uLL), *(int16x4_t *)v663.i8);
      v668 = vaddw_high_s16(vshll_high_n_s16(v665, 2uLL), v663);
      v669 = vaddw_s16(vshll_n_s16(*(int16x4_t *)v666.i8, 2uLL), *(int16x4_t *)v664.i8);
      v670 = vaddw_high_s16(vshll_high_n_s16(v666, 2uLL), v664);
      v671 = v470[18];
      v672 = v470[19];
      v673 = vshll_n_s16(*(int16x4_t *)v657.i8, 1uLL);
      v674 = vshll_high_n_s16(v657, 1uLL);
      v675 = vshll_n_s16(*(int16x4_t *)v658.i8, 1uLL);
      v676 = vshll_high_n_s16(v658, 1uLL);
      v677 = v473[18];
      v678 = v473[19];
      v679 = v468[20];
      v680 = v468[21];
      v681 = vaddq_s32(vaddq_s32(vaddw_s16(vaddq_s32(v667, v673), *(int16x4_t *)v677.i8), vshlq_n_s32(v673, 1uLL)), vshll_n_s16(*(int16x4_t *)v671.i8, 2uLL));
      v682 = vaddq_s32(vaddq_s32(vaddw_high_s16(vaddq_s32(v668, v674), v677), vshlq_n_s32(v674, 1uLL)), vshll_high_n_s16(v671, 2uLL));
      v683 = vaddq_s32(vaddq_s32(vaddw_s16(vaddq_s32(v669, v675), *(int16x4_t *)v678.i8), vshlq_n_s32(v675, 1uLL)), vshll_n_s16(*(int16x4_t *)v672.i8, 2uLL));
      v684 = vaddq_s32(vaddq_s32(vaddw_high_s16(vaddq_s32(v670, v676), v678), vshlq_n_s32(v676, 1uLL)), vshll_high_n_s16(v672, 2uLL));
      v685 = v464[20];
      v686 = v464[21];
      v687 = v466[20];
      v688 = v466[21];
      v1249[0] = v681;
      v1249[1] = v682;
      v1249[2] = v683;
      v1249[3] = v684;
      v689 = vaddw_s16(vshll_n_s16(*(int16x4_t *)v687.i8, 2uLL), *(int16x4_t *)v685.i8);
      v690 = vaddw_high_s16(vshll_high_n_s16(v687, 2uLL), v685);
      v691 = vaddw_s16(vshll_n_s16(*(int16x4_t *)v688.i8, 2uLL), *(int16x4_t *)v686.i8);
      v692 = vaddw_high_s16(vshll_high_n_s16(v688, 2uLL), v686);
      v693 = v470[20];
      v694 = v470[21];
      v695 = vshll_n_s16(*(int16x4_t *)v679.i8, 1uLL);
      v696 = vshll_high_n_s16(v679, 1uLL);
      v697 = vshll_n_s16(*(int16x4_t *)v680.i8, 1uLL);
      v698 = vshll_high_n_s16(v680, 1uLL);
      v699 = v473[20];
      v700 = v473[21];
      v701 = v468[22];
      v702 = v468[23];
      v703 = vaddq_s32(vaddq_s32(vaddw_s16(vaddq_s32(v689, v695), *(int16x4_t *)v699.i8), vshlq_n_s32(v695, 1uLL)), vshll_n_s16(*(int16x4_t *)v693.i8, 2uLL));
      v704 = vaddq_s32(vaddq_s32(vaddw_high_s16(vaddq_s32(v690, v696), v699), vshlq_n_s32(v696, 1uLL)), vshll_high_n_s16(v693, 2uLL));
      v705 = vaddq_s32(vaddq_s32(vaddw_s16(vaddq_s32(v691, v697), *(int16x4_t *)v700.i8), vshlq_n_s32(v697, 1uLL)), vshll_n_s16(*(int16x4_t *)v694.i8, 2uLL));
      v706 = vaddq_s32(vaddq_s32(vaddw_high_s16(vaddq_s32(v692, v698), v700), vshlq_n_s32(v698, 1uLL)), vshll_high_n_s16(v694, 2uLL));
      v707 = v464[22];
      v708 = v464[23];
      v709 = v466[22];
      v710 = v466[23];
      v1250[0] = v703;
      v1250[1] = v704;
      v1250[2] = v705;
      v1250[3] = v706;
      v711 = vaddw_s16(vshll_n_s16(*(int16x4_t *)v709.i8, 2uLL), *(int16x4_t *)v707.i8);
      v712 = vaddw_high_s16(vshll_high_n_s16(v709, 2uLL), v707);
      v713 = vaddw_s16(vshll_n_s16(*(int16x4_t *)v710.i8, 2uLL), *(int16x4_t *)v708.i8);
      v714 = vaddw_high_s16(vshll_high_n_s16(v710, 2uLL), v708);
      v715 = v470[22];
      v716 = v470[23];
      v717 = vshll_n_s16(*(int16x4_t *)v701.i8, 1uLL);
      v718 = vshll_high_n_s16(v701, 1uLL);
      v719 = vshll_n_s16(*(int16x4_t *)v702.i8, 1uLL);
      v720 = vshll_high_n_s16(v702, 1uLL);
      v721 = v473[22];
      v722 = v473[23];
      v723 = v468[24];
      v724 = v468[25];
      v725 = vaddq_s32(vaddq_s32(vaddw_s16(vaddq_s32(v711, v717), *(int16x4_t *)v721.i8), vshlq_n_s32(v717, 1uLL)), vshll_n_s16(*(int16x4_t *)v715.i8, 2uLL));
      v726 = vaddq_s32(vaddq_s32(vaddw_high_s16(vaddq_s32(v712, v718), v721), vshlq_n_s32(v718, 1uLL)), vshll_high_n_s16(v715, 2uLL));
      v727 = vaddq_s32(vaddq_s32(vaddw_s16(vaddq_s32(v713, v719), *(int16x4_t *)v722.i8), vshlq_n_s32(v719, 1uLL)), vshll_n_s16(*(int16x4_t *)v716.i8, 2uLL));
      v728 = vaddq_s32(vaddq_s32(vaddw_high_s16(vaddq_s32(v714, v720), v722), vshlq_n_s32(v720, 1uLL)), vshll_high_n_s16(v716, 2uLL));
      v729 = v464[24];
      v730 = v464[25];
      v731 = v466[24];
      v732 = v466[25];
      v1251[0] = v725;
      v1251[1] = v726;
      v1251[2] = v727;
      v1251[3] = v728;
      v733 = vaddw_s16(vshll_n_s16(*(int16x4_t *)v731.i8, 2uLL), *(int16x4_t *)v729.i8);
      v734 = vaddw_high_s16(vshll_high_n_s16(v731, 2uLL), v729);
      v735 = vaddw_s16(vshll_n_s16(*(int16x4_t *)v732.i8, 2uLL), *(int16x4_t *)v730.i8);
      v736 = vaddw_high_s16(vshll_high_n_s16(v732, 2uLL), v730);
      v737 = v470[24];
      v738 = v470[25];
      v739 = vshll_n_s16(*(int16x4_t *)v723.i8, 1uLL);
      v740 = vshll_high_n_s16(v723, 1uLL);
      v741 = vshll_n_s16(*(int16x4_t *)v724.i8, 1uLL);
      v742 = vshll_high_n_s16(v724, 1uLL);
      v743 = v473[24];
      v744 = v473[25];
      v745 = v468[26];
      v746 = v468[27];
      v747 = vaddq_s32(vaddq_s32(vaddw_s16(vaddq_s32(v733, v739), *(int16x4_t *)v743.i8), vshlq_n_s32(v739, 1uLL)), vshll_n_s16(*(int16x4_t *)v737.i8, 2uLL));
      v748 = vaddq_s32(vaddq_s32(vaddw_high_s16(vaddq_s32(v734, v740), v743), vshlq_n_s32(v740, 1uLL)), vshll_high_n_s16(v737, 2uLL));
      v749 = vaddq_s32(vaddq_s32(vaddw_s16(vaddq_s32(v735, v741), *(int16x4_t *)v744.i8), vshlq_n_s32(v741, 1uLL)), vshll_n_s16(*(int16x4_t *)v738.i8, 2uLL));
      v750 = vaddq_s32(vaddq_s32(vaddw_high_s16(vaddq_s32(v736, v742), v744), vshlq_n_s32(v742, 1uLL)), vshll_high_n_s16(v738, 2uLL));
      v751 = v464[26];
      v752 = v464[27];
      v753 = v466[26];
      v754 = v466[27];
      v1252[0] = v747;
      v1252[1] = v748;
      v1252[2] = v749;
      v1252[3] = v750;
      v755 = vaddw_s16(vshll_n_s16(*(int16x4_t *)v753.i8, 2uLL), *(int16x4_t *)v751.i8);
      v756 = vaddw_high_s16(vshll_high_n_s16(v753, 2uLL), v751);
      v757 = vaddw_s16(vshll_n_s16(*(int16x4_t *)v754.i8, 2uLL), *(int16x4_t *)v752.i8);
      v758 = vaddw_high_s16(vshll_high_n_s16(v754, 2uLL), v752);
      v759 = v470[26];
      v760 = v470[27];
      v761 = vshll_n_s16(*(int16x4_t *)v745.i8, 1uLL);
      v762 = vshll_high_n_s16(v745, 1uLL);
      v763 = vshll_n_s16(*(int16x4_t *)v746.i8, 1uLL);
      v764 = vshll_high_n_s16(v746, 1uLL);
      v765 = v473[26];
      v766 = v473[27];
      v767 = v468[28];
      v768 = v468[29];
      v769 = vaddq_s32(vaddq_s32(vaddw_s16(vaddq_s32(v755, v761), *(int16x4_t *)v765.i8), vshlq_n_s32(v761, 1uLL)), vshll_n_s16(*(int16x4_t *)v759.i8, 2uLL));
      v770 = vaddq_s32(vaddq_s32(vaddw_high_s16(vaddq_s32(v756, v762), v765), vshlq_n_s32(v762, 1uLL)), vshll_high_n_s16(v759, 2uLL));
      v771 = vaddq_s32(vaddq_s32(vaddw_s16(vaddq_s32(v757, v763), *(int16x4_t *)v766.i8), vshlq_n_s32(v763, 1uLL)), vshll_n_s16(*(int16x4_t *)v760.i8, 2uLL));
      v772 = vaddq_s32(vaddq_s32(vaddw_high_s16(vaddq_s32(v758, v764), v766), vshlq_n_s32(v764, 1uLL)), vshll_high_n_s16(v760, 2uLL));
      v773 = v464[28];
      v774 = v464[29];
      v775 = v466[28];
      v776 = v466[29];
      v1253[0] = v769;
      v1253[1] = v770;
      v1253[2] = v771;
      v1253[3] = v772;
      v777 = vaddw_s16(vshll_n_s16(*(int16x4_t *)v775.i8, 2uLL), *(int16x4_t *)v773.i8);
      v778 = vaddw_high_s16(vshll_high_n_s16(v775, 2uLL), v773);
      v779 = vaddw_s16(vshll_n_s16(*(int16x4_t *)v776.i8, 2uLL), *(int16x4_t *)v774.i8);
      v780 = vaddw_high_s16(vshll_high_n_s16(v776, 2uLL), v774);
      v781 = v470[28];
      v782 = v470[29];
      v783 = vshll_n_s16(*(int16x4_t *)v767.i8, 1uLL);
      v784 = vshll_high_n_s16(v767, 1uLL);
      v785 = vshll_n_s16(*(int16x4_t *)v768.i8, 1uLL);
      v786 = vshll_high_n_s16(v768, 1uLL);
      v787 = v473[28];
      v788 = v473[29];
      v789 = v468[30];
      v790 = v468[31];
      v791 = vaddq_s32(vaddq_s32(vaddw_s16(vaddq_s32(v777, v783), *(int16x4_t *)v787.i8), vshlq_n_s32(v783, 1uLL)), vshll_n_s16(*(int16x4_t *)v781.i8, 2uLL));
      v792 = vaddq_s32(vaddq_s32(vaddw_high_s16(vaddq_s32(v778, v784), v787), vshlq_n_s32(v784, 1uLL)), vshll_high_n_s16(v781, 2uLL));
      v793 = vaddq_s32(vaddq_s32(vaddw_s16(vaddq_s32(v779, v785), *(int16x4_t *)v788.i8), vshlq_n_s32(v785, 1uLL)), vshll_n_s16(*(int16x4_t *)v782.i8, 2uLL));
      v794 = vaddq_s32(vaddq_s32(vaddw_high_s16(vaddq_s32(v780, v786), v788), vshlq_n_s32(v786, 1uLL)), vshll_high_n_s16(v782, 2uLL));
      v795 = v464[30];
      v796 = v464[31];
      v797 = v466[30];
      v798 = v466[31];
      v1254[0] = v791;
      v1254[1] = v792;
      v1254[2] = v793;
      v1254[3] = v794;
      v799 = vaddw_s16(vshll_n_s16(*(int16x4_t *)v797.i8, 2uLL), *(int16x4_t *)v795.i8);
      v800 = vaddw_high_s16(vshll_high_n_s16(v797, 2uLL), v795);
      v801 = vaddw_s16(vshll_n_s16(*(int16x4_t *)v798.i8, 2uLL), *(int16x4_t *)v796.i8);
      v802 = vaddw_high_s16(vshll_high_n_s16(v798, 2uLL), v796);
      v803 = v470[30];
      v804 = v470[31];
      v805 = vshll_n_s16(*(int16x4_t *)v789.i8, 1uLL);
      v806 = vshll_high_n_s16(v789, 1uLL);
      v807 = vshll_n_s16(*(int16x4_t *)v790.i8, 1uLL);
      v808 = vshll_high_n_s16(v790, 1uLL);
      v809 = v473[30];
      v810 = v473[31];
      v1255[0] = vaddq_s32(vaddq_s32(vaddw_s16(vaddq_s32(v799, v805), *(int16x4_t *)v809.i8), vshlq_n_s32(v805, 1uLL)), vshll_n_s16(*(int16x4_t *)v803.i8, 2uLL));
      v1255[1] = vaddq_s32(vaddq_s32(vaddw_high_s16(vaddq_s32(v800, v806), v809), vshlq_n_s32(v806, 1uLL)), vshll_high_n_s16(v803, 2uLL));
      v1256 = vaddq_s32(vaddq_s32(vaddw_s16(vaddq_s32(v801, v807), *(int16x4_t *)v810.i8), vshlq_n_s32(v807, 1uLL)), vshll_n_s16(*(int16x4_t *)v804.i8, 2uLL));
      v1257 = vaddq_s32(vaddq_s32(vaddw_high_s16(vaddq_s32(v802, v808), v810), vshlq_n_s32(v808, 1uLL)), vshll_high_n_s16(v804, 2uLL));
      v811 = v464[32];
      v812 = v464[33];
      v813 = v466[32];
      v814 = v466[33];
      v815 = v468[32];
      v816 = v468[33];
      v817 = vaddw_s16(vshll_n_s16(*(int16x4_t *)v813.i8, 2uLL), *(int16x4_t *)v811.i8);
      v818 = vaddw_high_s16(vshll_high_n_s16(v813, 2uLL), v811);
      v819 = vaddw_s16(vshll_n_s16(*(int16x4_t *)v814.i8, 2uLL), *(int16x4_t *)v812.i8);
      v820 = vaddw_high_s16(vshll_high_n_s16(v814, 2uLL), v812);
      v821 = v470[32];
      v822 = v470[33];
      v823 = vshll_n_s16(*(int16x4_t *)v815.i8, 1uLL);
      v824 = vshll_high_n_s16(v815, 1uLL);
      v825 = vshll_n_s16(*(int16x4_t *)v816.i8, 1uLL);
      v826 = vshll_high_n_s16(v816, 1uLL);
      v827 = v473[32];
      v828 = v473[33];
      v829 = v468[34];
      v830 = v468[35];
      v831 = vaddq_s32(vaddq_s32(vaddw_s16(vaddq_s32(v817, v823), *(int16x4_t *)v827.i8), vshlq_n_s32(v823, 1uLL)), vshll_n_s16(*(int16x4_t *)v821.i8, 2uLL));
      v832 = vaddq_s32(vaddq_s32(vaddw_high_s16(vaddq_s32(v818, v824), v827), vshlq_n_s32(v824, 1uLL)), vshll_high_n_s16(v821, 2uLL));
      v833 = vaddq_s32(vaddq_s32(vaddw_s16(vaddq_s32(v819, v825), *(int16x4_t *)v828.i8), vshlq_n_s32(v825, 1uLL)), vshll_n_s16(*(int16x4_t *)v822.i8, 2uLL));
      v834 = vaddq_s32(vaddq_s32(vaddw_high_s16(vaddq_s32(v820, v826), v828), vshlq_n_s32(v826, 1uLL)), vshll_high_n_s16(v822, 2uLL));
      v835 = v464[34];
      v836 = v464[35];
      v837 = v466[34];
      v838 = v466[35];
      v1258[0] = v831;
      v1258[1] = v832;
      v1258[2] = v833;
      v1258[3] = v834;
      v839 = vaddw_s16(vshll_n_s16(*(int16x4_t *)v837.i8, 2uLL), *(int16x4_t *)v835.i8);
      v840 = vaddw_high_s16(vshll_high_n_s16(v837, 2uLL), v835);
      v841 = vaddw_s16(vshll_n_s16(*(int16x4_t *)v838.i8, 2uLL), *(int16x4_t *)v836.i8);
      v842 = vaddw_high_s16(vshll_high_n_s16(v838, 2uLL), v836);
      v843 = v470[34];
      v844 = v470[35];
      v845 = vshll_n_s16(*(int16x4_t *)v829.i8, 1uLL);
      v846 = vshll_high_n_s16(v829, 1uLL);
      v847 = vshll_n_s16(*(int16x4_t *)v830.i8, 1uLL);
      v848 = vshll_high_n_s16(v830, 1uLL);
      v849 = v473[34];
      v850 = v473[35];
      v851 = v468[36];
      v852 = v468[37];
      v853 = vaddq_s32(vaddq_s32(vaddw_s16(vaddq_s32(v839, v845), *(int16x4_t *)v849.i8), vshlq_n_s32(v845, 1uLL)), vshll_n_s16(*(int16x4_t *)v843.i8, 2uLL));
      v854 = vaddq_s32(vaddq_s32(vaddw_high_s16(vaddq_s32(v840, v846), v849), vshlq_n_s32(v846, 1uLL)), vshll_high_n_s16(v843, 2uLL));
      v855 = vaddq_s32(vaddq_s32(vaddw_s16(vaddq_s32(v841, v847), *(int16x4_t *)v850.i8), vshlq_n_s32(v847, 1uLL)), vshll_n_s16(*(int16x4_t *)v844.i8, 2uLL));
      v856 = vaddq_s32(vaddq_s32(vaddw_high_s16(vaddq_s32(v842, v848), v850), vshlq_n_s32(v848, 1uLL)), vshll_high_n_s16(v844, 2uLL));
      v857 = v464[36];
      v858 = v464[37];
      v859 = v466[36];
      v860 = v466[37];
      v1259[0] = v853;
      v1259[1] = v854;
      v1259[2] = v855;
      v1259[3] = v856;
      v861 = vaddw_s16(vshll_n_s16(*(int16x4_t *)v859.i8, 2uLL), *(int16x4_t *)v857.i8);
      v862 = vaddw_high_s16(vshll_high_n_s16(v859, 2uLL), v857);
      v863 = vaddw_s16(vshll_n_s16(*(int16x4_t *)v860.i8, 2uLL), *(int16x4_t *)v858.i8);
      v864 = vaddw_high_s16(vshll_high_n_s16(v860, 2uLL), v858);
      v865 = v470[36];
      v866 = v470[37];
      v867 = vshll_n_s16(*(int16x4_t *)v851.i8, 1uLL);
      v868 = vshll_high_n_s16(v851, 1uLL);
      v869 = vshll_n_s16(*(int16x4_t *)v852.i8, 1uLL);
      v870 = vshll_high_n_s16(v852, 1uLL);
      v871 = v473[36];
      v872 = v473[37];
      v873 = v468[38];
      v874 = v468[39];
      v875 = vaddq_s32(vaddq_s32(vaddw_s16(vaddq_s32(v861, v867), *(int16x4_t *)v871.i8), vshlq_n_s32(v867, 1uLL)), vshll_n_s16(*(int16x4_t *)v865.i8, 2uLL));
      v876 = vaddq_s32(vaddq_s32(vaddw_high_s16(vaddq_s32(v862, v868), v871), vshlq_n_s32(v868, 1uLL)), vshll_high_n_s16(v865, 2uLL));
      v877 = vaddq_s32(vaddq_s32(vaddw_s16(vaddq_s32(v863, v869), *(int16x4_t *)v872.i8), vshlq_n_s32(v869, 1uLL)), vshll_n_s16(*(int16x4_t *)v866.i8, 2uLL));
      v878 = vaddq_s32(vaddq_s32(vaddw_high_s16(vaddq_s32(v864, v870), v872), vshlq_n_s32(v870, 1uLL)), vshll_high_n_s16(v866, 2uLL));
      v879 = v464[38];
      v880 = v464[39];
      v881 = v466[38];
      v882 = v466[39];
      v1260[0] = v875;
      v1260[1] = v876;
      v1260[2] = v877;
      v1260[3] = v878;
      v883 = vaddw_s16(vshll_n_s16(*(int16x4_t *)v881.i8, 2uLL), *(int16x4_t *)v879.i8);
      v884 = vaddw_high_s16(vshll_high_n_s16(v881, 2uLL), v879);
      v885 = vaddw_s16(vshll_n_s16(*(int16x4_t *)v882.i8, 2uLL), *(int16x4_t *)v880.i8);
      v886 = vaddw_high_s16(vshll_high_n_s16(v882, 2uLL), v880);
      v887 = v470[38];
      v888 = v470[39];
      v889 = vshll_n_s16(*(int16x4_t *)v873.i8, 1uLL);
      v890 = vshll_high_n_s16(v873, 1uLL);
      v891 = vshll_n_s16(*(int16x4_t *)v874.i8, 1uLL);
      v892 = vshll_high_n_s16(v874, 1uLL);
      v893 = v473[38];
      v894 = v473[39];
      v895 = v468[40];
      v896 = v468[41];
      v897 = vaddq_s32(vaddq_s32(vaddw_s16(vaddq_s32(v883, v889), *(int16x4_t *)v893.i8), vshlq_n_s32(v889, 1uLL)), vshll_n_s16(*(int16x4_t *)v887.i8, 2uLL));
      v898 = vaddq_s32(vaddq_s32(vaddw_high_s16(vaddq_s32(v884, v890), v893), vshlq_n_s32(v890, 1uLL)), vshll_high_n_s16(v887, 2uLL));
      v899 = vaddq_s32(vaddq_s32(vaddw_s16(vaddq_s32(v885, v891), *(int16x4_t *)v894.i8), vshlq_n_s32(v891, 1uLL)), vshll_n_s16(*(int16x4_t *)v888.i8, 2uLL));
      v900 = vaddq_s32(vaddq_s32(vaddw_high_s16(vaddq_s32(v886, v892), v894), vshlq_n_s32(v892, 1uLL)), vshll_high_n_s16(v888, 2uLL));
      v901 = v464[40];
      v902 = v464[41];
      v903 = v466[40];
      v904 = v466[41];
      v1261[0] = v897;
      v1261[1] = v898;
      v1261[2] = v899;
      v1261[3] = v900;
      v905 = vaddw_s16(vshll_n_s16(*(int16x4_t *)v903.i8, 2uLL), *(int16x4_t *)v901.i8);
      v906 = vaddw_high_s16(vshll_high_n_s16(v903, 2uLL), v901);
      v907 = vaddw_s16(vshll_n_s16(*(int16x4_t *)v904.i8, 2uLL), *(int16x4_t *)v902.i8);
      v908 = vaddw_high_s16(vshll_high_n_s16(v904, 2uLL), v902);
      v909 = v470[40];
      v910 = v470[41];
      v911 = vshll_n_s16(*(int16x4_t *)v895.i8, 1uLL);
      v912 = vshll_high_n_s16(v895, 1uLL);
      v913 = vshll_n_s16(*(int16x4_t *)v896.i8, 1uLL);
      v914 = vshll_high_n_s16(v896, 1uLL);
      v915 = v473[40];
      v916 = v473[41];
      v917 = v468[42];
      v918 = v468[43];
      v919 = vaddq_s32(vaddq_s32(vaddw_s16(vaddq_s32(v905, v911), *(int16x4_t *)v915.i8), vshlq_n_s32(v911, 1uLL)), vshll_n_s16(*(int16x4_t *)v909.i8, 2uLL));
      v920 = vaddq_s32(vaddq_s32(vaddw_high_s16(vaddq_s32(v906, v912), v915), vshlq_n_s32(v912, 1uLL)), vshll_high_n_s16(v909, 2uLL));
      v921 = vaddq_s32(vaddq_s32(vaddw_s16(vaddq_s32(v907, v913), *(int16x4_t *)v916.i8), vshlq_n_s32(v913, 1uLL)), vshll_n_s16(*(int16x4_t *)v910.i8, 2uLL));
      v922 = vaddq_s32(vaddq_s32(vaddw_high_s16(vaddq_s32(v908, v914), v916), vshlq_n_s32(v914, 1uLL)), vshll_high_n_s16(v910, 2uLL));
      v923 = v464[42];
      v924 = v464[43];
      v925 = v466[42];
      v926 = v466[43];
      v1262[0] = v919;
      v1262[1] = v920;
      v1262[2] = v921;
      v1262[3] = v922;
      v927 = vaddw_s16(vshll_n_s16(*(int16x4_t *)v925.i8, 2uLL), *(int16x4_t *)v923.i8);
      v928 = vaddw_high_s16(vshll_high_n_s16(v925, 2uLL), v923);
      v929 = vaddw_s16(vshll_n_s16(*(int16x4_t *)v926.i8, 2uLL), *(int16x4_t *)v924.i8);
      v930 = vaddw_high_s16(vshll_high_n_s16(v926, 2uLL), v924);
      v931 = v470[42];
      v932 = v470[43];
      v933 = vshll_n_s16(*(int16x4_t *)v917.i8, 1uLL);
      v934 = vshll_high_n_s16(v917, 1uLL);
      v935 = vshll_n_s16(*(int16x4_t *)v918.i8, 1uLL);
      v936 = vshll_high_n_s16(v918, 1uLL);
      v937 = v473[42];
      v938 = v473[43];
      v939 = v468[44];
      v940 = v468[45];
      v941 = vaddq_s32(vaddq_s32(vaddw_s16(vaddq_s32(v927, v933), *(int16x4_t *)v937.i8), vshlq_n_s32(v933, 1uLL)), vshll_n_s16(*(int16x4_t *)v931.i8, 2uLL));
      v942 = vaddq_s32(vaddq_s32(vaddw_high_s16(vaddq_s32(v928, v934), v937), vshlq_n_s32(v934, 1uLL)), vshll_high_n_s16(v931, 2uLL));
      v943 = vaddq_s32(vaddq_s32(vaddw_s16(vaddq_s32(v929, v935), *(int16x4_t *)v938.i8), vshlq_n_s32(v935, 1uLL)), vshll_n_s16(*(int16x4_t *)v932.i8, 2uLL));
      v944 = vaddq_s32(vaddq_s32(vaddw_high_s16(vaddq_s32(v930, v936), v938), vshlq_n_s32(v936, 1uLL)), vshll_high_n_s16(v932, 2uLL));
      v945 = v464[44];
      v946 = v464[45];
      v947 = v466[44];
      v948 = v466[45];
      v1263[0] = v941;
      v1263[1] = v942;
      v1263[2] = v943;
      v1263[3] = v944;
      v949 = vaddw_s16(vshll_n_s16(*(int16x4_t *)v947.i8, 2uLL), *(int16x4_t *)v945.i8);
      v950 = vaddw_high_s16(vshll_high_n_s16(v947, 2uLL), v945);
      v951 = vaddw_s16(vshll_n_s16(*(int16x4_t *)v948.i8, 2uLL), *(int16x4_t *)v946.i8);
      v952 = vaddw_high_s16(vshll_high_n_s16(v948, 2uLL), v946);
      v953 = v470[44];
      v954 = v470[45];
      v955 = vshll_n_s16(*(int16x4_t *)v939.i8, 1uLL);
      v956 = vshll_high_n_s16(v939, 1uLL);
      v957 = vshll_n_s16(*(int16x4_t *)v940.i8, 1uLL);
      v958 = vshll_high_n_s16(v940, 1uLL);
      v959 = v473[44];
      v960 = v473[45];
      v961 = v468[46];
      v962 = v468[47];
      v963 = vaddq_s32(vaddq_s32(vaddw_s16(vaddq_s32(v949, v955), *(int16x4_t *)v959.i8), vshlq_n_s32(v955, 1uLL)), vshll_n_s16(*(int16x4_t *)v953.i8, 2uLL));
      v964 = vaddq_s32(vaddq_s32(vaddw_high_s16(vaddq_s32(v950, v956), v959), vshlq_n_s32(v956, 1uLL)), vshll_high_n_s16(v953, 2uLL));
      v965 = vaddq_s32(vaddq_s32(vaddw_s16(vaddq_s32(v951, v957), *(int16x4_t *)v960.i8), vshlq_n_s32(v957, 1uLL)), vshll_n_s16(*(int16x4_t *)v954.i8, 2uLL));
      v966 = vaddq_s32(vaddq_s32(vaddw_high_s16(vaddq_s32(v952, v958), v960), vshlq_n_s32(v958, 1uLL)), vshll_high_n_s16(v954, 2uLL));
      v967 = v464[46];
      v968 = v464[47];
      v969 = v466[46];
      v970 = v466[47];
      v1264[0] = v963;
      v1264[1] = v964;
      v1264[2] = v965;
      v1264[3] = v966;
      v971 = vaddw_s16(vshll_n_s16(*(int16x4_t *)v969.i8, 2uLL), *(int16x4_t *)v967.i8);
      v972 = vaddw_high_s16(vshll_high_n_s16(v969, 2uLL), v967);
      v973 = vaddw_s16(vshll_n_s16(*(int16x4_t *)v970.i8, 2uLL), *(int16x4_t *)v968.i8);
      v974 = vaddw_high_s16(vshll_high_n_s16(v970, 2uLL), v968);
      v975 = v470[46];
      v976 = v470[47];
      v977 = vshll_n_s16(*(int16x4_t *)v961.i8, 1uLL);
      v978 = vshll_high_n_s16(v961, 1uLL);
      v979 = vshll_n_s16(*(int16x4_t *)v962.i8, 1uLL);
      v980 = vshll_high_n_s16(v962, 1uLL);
      v981 = v473[46];
      v982 = v473[47];
      v983 = (int8x16_t)vaddq_s32(vaddq_s32(vaddw_high_s16(vaddq_s32(v974, v980), v982), vshlq_n_s32(v980, 1uLL)), vshll_high_n_s16(v976, 2uLL));
      v1265[0] = vaddq_s32(vaddq_s32(vaddw_s16(vaddq_s32(v971, v977), *(int16x4_t *)v981.i8), vshlq_n_s32(v977, 1uLL)), vshll_n_s16(*(int16x4_t *)v975.i8, 2uLL));
      v1265[1] = vaddq_s32(vaddq_s32(vaddw_high_s16(vaddq_s32(v972, v978), v981), vshlq_n_s32(v978, 1uLL)), vshll_high_n_s16(v975, 2uLL));
      v1266 = vaddq_s32(vaddq_s32(vaddw_s16(vaddq_s32(v973, v979), *(int16x4_t *)v982.i8), vshlq_n_s32(v979, 1uLL)), vshll_n_s16(*(int16x4_t *)v976.i8, 2uLL));
      v1267 = v983;
      v984 = v1238;
      v985 = (const float *)v1238;
      v986 = (float *)v1238;
      v1465 = vld4q_f32(v985);
      v985 += 16;
      v983.i64[0] = *(_QWORD *)v985;
      v5.i64[0] = *((_QWORD *)v985 + 1);
      v987 = vshlq_n_s32((int32x4_t)v1465.val[2], 2uLL);
      v988 = vshlq_n_s32((int32x4_t)v1465.val[3], 2uLL);
      v989 = (int32x4_t)vextq_s8((int8x16_t)v1465.val[0], v983, 4uLL);
      *(int32x2_t *)v983.i8 = vrev64_s32(*(int32x2_t *)v985);
      v990 = (int32x4_t)vextq_s8((int8x16_t)v1465.val[1], v983, 4uLL);
      v991 = (int32x4_t)vextq_s8((int8x16_t)v1465.val[2], v5, 4uLL);
      v992 = vshlq_n_s32(v989, 2uLL);
      v1465.val[0] = (float32x4_t)vaddq_s32(vaddq_s32(vaddq_s32(vaddq_s32(vaddq_s32((int32x4_t)v1465.val[0], vshlq_n_s32((int32x4_t)v1465.val[1], 2uLL)), vshlq_n_s32((int32x4_t)v1465.val[2], 1uLL)), v987), v988), v989);
      v1465.val[1] = (float32x4_t)vaddq_s32(vaddq_s32(vaddq_s32(vaddq_s32(vaddq_s32((int32x4_t)v1465.val[1], v987), vshlq_n_s32((int32x4_t)v1465.val[3], 1uLL)), v988), v992), v990);
      v993 = vshlq_n_s32(v990, 2uLL);
      *(int32x2_t *)v5.i8 = vrev64_s32(*(int32x2_t *)v5.i8);
      v1465.val[2] = (float32x4_t)vaddq_s32(vaddq_s32(vaddq_s32(vaddq_s32(vaddq_s32((int32x4_t)v1465.val[2], v988), v992), v993), vshlq_n_s32(v989, 1uLL)), v991);
      v1465.val[3] = (float32x4_t)vaddq_s32(vaddq_s32(vaddq_s32(vaddq_s32(vaddq_s32((int32x4_t)v1465.val[3], v992), v993), vshlq_n_s32(v990, 1uLL)), vshlq_n_s32(v991, 2uLL)), (int32x4_t)vextq_s8((int8x16_t)v1465.val[3], v5, 4uLL));
      vst4q_f32(v986, v1465);
      v994 = (float *)v1239;
      v995 = (const float *)v1239;
      v1466 = vld4q_f32(v995);
      v995 += 16;
      v983.i64[0] = *(_QWORD *)v995;
      v5.i64[0] = *((_QWORD *)v995 + 1);
      v996 = vshlq_n_s32((int32x4_t)v1466.val[2], 2uLL);
      v997 = vshlq_n_s32((int32x4_t)v1466.val[3], 2uLL);
      v998 = (int32x4_t)vextq_s8((int8x16_t)v1466.val[0], v983, 4uLL);
      *(int32x2_t *)v983.i8 = vrev64_s32(*(int32x2_t *)v995);
      v999 = (int32x4_t)vextq_s8((int8x16_t)v1466.val[1], v983, 4uLL);
      v1000 = (int32x4_t)vextq_s8((int8x16_t)v1466.val[2], v5, 4uLL);
      v1001 = vshlq_n_s32(v998, 2uLL);
      v1466.val[0] = (float32x4_t)vaddq_s32(vaddq_s32(vaddq_s32(vaddq_s32(vaddq_s32((int32x4_t)v1466.val[0], vshlq_n_s32((int32x4_t)v1466.val[1], 2uLL)), vshlq_n_s32((int32x4_t)v1466.val[2], 1uLL)), v996), v997), v998);
      v1466.val[1] = (float32x4_t)vaddq_s32(vaddq_s32(vaddq_s32(vaddq_s32(vaddq_s32((int32x4_t)v1466.val[1], v996), vshlq_n_s32((int32x4_t)v1466.val[3], 1uLL)), v997), v1001), v999);
      v1002 = vshlq_n_s32(v999, 2uLL);
      *(int32x2_t *)v5.i8 = vrev64_s32(*(int32x2_t *)v5.i8);
      v1466.val[2] = (float32x4_t)vaddq_s32(vaddq_s32(vaddq_s32(vaddq_s32(vaddq_s32((int32x4_t)v1466.val[2], v997), v1001), v1002), vshlq_n_s32(v998, 1uLL)), v1000);
      v1466.val[3] = (float32x4_t)vaddq_s32(vaddq_s32(vaddq_s32(vaddq_s32(vaddq_s32((int32x4_t)v1466.val[3], v1001), v1002), vshlq_n_s32(v999, 1uLL)), vshlq_n_s32(v1000, 2uLL)), (int32x4_t)vextq_s8((int8x16_t)v1466.val[3], v5, 4uLL));
      vst4q_f32(v994, v1466);
      v1003 = (float *)v1240;
      v1004 = (const float *)v1240;
      v1467 = vld4q_f32(v1004);
      v1004 += 16;
      v983.i64[0] = *(_QWORD *)v1004;
      v5.i64[0] = *((_QWORD *)v1004 + 1);
      v1005 = vshlq_n_s32((int32x4_t)v1467.val[2], 2uLL);
      v1006 = vshlq_n_s32((int32x4_t)v1467.val[3], 2uLL);
      v1007 = (int32x4_t)vextq_s8((int8x16_t)v1467.val[0], v983, 4uLL);
      *(int32x2_t *)v983.i8 = vrev64_s32(*(int32x2_t *)v1004);
      v1008 = (int32x4_t)vextq_s8((int8x16_t)v1467.val[1], v983, 4uLL);
      v1009 = (int32x4_t)vextq_s8((int8x16_t)v1467.val[2], v5, 4uLL);
      v1010 = vshlq_n_s32(v1007, 2uLL);
      v1467.val[0] = (float32x4_t)vaddq_s32(vaddq_s32(vaddq_s32(vaddq_s32(vaddq_s32((int32x4_t)v1467.val[0], vshlq_n_s32((int32x4_t)v1467.val[1], 2uLL)), vshlq_n_s32((int32x4_t)v1467.val[2], 1uLL)), v1005), v1006), v1007);
      v1467.val[1] = (float32x4_t)vaddq_s32(vaddq_s32(vaddq_s32(vaddq_s32(vaddq_s32((int32x4_t)v1467.val[1], v1005), vshlq_n_s32((int32x4_t)v1467.val[3], 1uLL)), v1006), v1010), v1008);
      v1011 = vshlq_n_s32(v1008, 2uLL);
      *(int32x2_t *)v5.i8 = vrev64_s32(*(int32x2_t *)v5.i8);
      v1467.val[2] = (float32x4_t)vaddq_s32(vaddq_s32(vaddq_s32(vaddq_s32(vaddq_s32((int32x4_t)v1467.val[2], v1006), v1010), v1011), vshlq_n_s32(v1007, 1uLL)), v1009);
      v1467.val[3] = (float32x4_t)vaddq_s32(vaddq_s32(vaddq_s32(vaddq_s32(vaddq_s32((int32x4_t)v1467.val[3], v1010), v1011), vshlq_n_s32(v1008, 1uLL)), vshlq_n_s32(v1009, 2uLL)), (int32x4_t)vextq_s8((int8x16_t)v1467.val[3], v5, 4uLL));
      vst4q_f32(v1003, v1467);
      v1012 = (float *)v1241;
      v1013 = (const float *)v1241;
      v1468 = vld4q_f32(v1013);
      v1013 += 16;
      v983.i64[0] = *(_QWORD *)v1013;
      v5.i64[0] = *((_QWORD *)v1013 + 1);
      v1014 = vshlq_n_s32((int32x4_t)v1468.val[2], 2uLL);
      v1015 = vshlq_n_s32((int32x4_t)v1468.val[3], 2uLL);
      v1016 = (int32x4_t)vextq_s8((int8x16_t)v1468.val[0], v983, 4uLL);
      *(int32x2_t *)v983.i8 = vrev64_s32(*(int32x2_t *)v1013);
      v1017 = (int32x4_t)vextq_s8((int8x16_t)v1468.val[1], v983, 4uLL);
      v1018 = (int32x4_t)vextq_s8((int8x16_t)v1468.val[2], v5, 4uLL);
      v1019 = vshlq_n_s32(v1016, 2uLL);
      v1468.val[0] = (float32x4_t)vaddq_s32(vaddq_s32(vaddq_s32(vaddq_s32(vaddq_s32((int32x4_t)v1468.val[0], vshlq_n_s32((int32x4_t)v1468.val[1], 2uLL)), vshlq_n_s32((int32x4_t)v1468.val[2], 1uLL)), v1014), v1015), v1016);
      v1468.val[1] = (float32x4_t)vaddq_s32(vaddq_s32(vaddq_s32(vaddq_s32(vaddq_s32((int32x4_t)v1468.val[1], v1014), vshlq_n_s32((int32x4_t)v1468.val[3], 1uLL)), v1015), v1019), v1017);
      v1020 = vshlq_n_s32(v1017, 2uLL);
      *(int32x2_t *)v5.i8 = vrev64_s32(*(int32x2_t *)v5.i8);
      v1468.val[2] = (float32x4_t)vaddq_s32(vaddq_s32(vaddq_s32(vaddq_s32(vaddq_s32((int32x4_t)v1468.val[2], v1015), v1019), v1020), vshlq_n_s32(v1016, 1uLL)), v1018);
      v1468.val[3] = (float32x4_t)vaddq_s32(vaddq_s32(vaddq_s32(vaddq_s32(vaddq_s32((int32x4_t)v1468.val[3], v1019), v1020), vshlq_n_s32(v1017, 1uLL)), vshlq_n_s32(v1018, 2uLL)), (int32x4_t)vextq_s8((int8x16_t)v1468.val[3], v5, 4uLL));
      vst4q_f32(v1012, v1468);
      v1021 = (float *)v1242;
      v1022 = (const float *)v1242;
      v1469 = vld4q_f32(v1022);
      v1022 += 16;
      v983.i64[0] = *(_QWORD *)v1022;
      v5.i64[0] = *((_QWORD *)v1022 + 1);
      v1023 = vshlq_n_s32((int32x4_t)v1469.val[2], 2uLL);
      v1024 = vshlq_n_s32((int32x4_t)v1469.val[3], 2uLL);
      v1025 = (int32x4_t)vextq_s8((int8x16_t)v1469.val[0], v983, 4uLL);
      *(int32x2_t *)v983.i8 = vrev64_s32(*(int32x2_t *)v1022);
      v1026 = (int32x4_t)vextq_s8((int8x16_t)v1469.val[1], v983, 4uLL);
      v1027 = (int32x4_t)vextq_s8((int8x16_t)v1469.val[2], v5, 4uLL);
      v1028 = vshlq_n_s32(v1025, 2uLL);
      v1469.val[0] = (float32x4_t)vaddq_s32(vaddq_s32(vaddq_s32(vaddq_s32(vaddq_s32((int32x4_t)v1469.val[0], vshlq_n_s32((int32x4_t)v1469.val[1], 2uLL)), vshlq_n_s32((int32x4_t)v1469.val[2], 1uLL)), v1023), v1024), v1025);
      v1469.val[1] = (float32x4_t)vaddq_s32(vaddq_s32(vaddq_s32(vaddq_s32(vaddq_s32((int32x4_t)v1469.val[1], v1023), vshlq_n_s32((int32x4_t)v1469.val[3], 1uLL)), v1024), v1028), v1026);
      v1029 = vshlq_n_s32(v1026, 2uLL);
      *(int32x2_t *)v5.i8 = vrev64_s32(*(int32x2_t *)v5.i8);
      v1469.val[2] = (float32x4_t)vaddq_s32(vaddq_s32(vaddq_s32(vaddq_s32(vaddq_s32((int32x4_t)v1469.val[2], v1024), v1028), v1029), vshlq_n_s32(v1025, 1uLL)), v1027);
      v1469.val[3] = (float32x4_t)vaddq_s32(vaddq_s32(vaddq_s32(vaddq_s32(vaddq_s32((int32x4_t)v1469.val[3], v1028), v1029), vshlq_n_s32(v1026, 1uLL)), vshlq_n_s32(v1027, 2uLL)), (int32x4_t)vextq_s8((int8x16_t)v1469.val[3], v5, 4uLL));
      vst4q_f32(v1021, v1469);
      v1030 = (float *)v1243;
      v1031 = (const float *)v1243;
      v1470 = vld4q_f32(v1031);
      v1031 += 16;
      v983.i64[0] = *(_QWORD *)v1031;
      v5.i64[0] = *((_QWORD *)v1031 + 1);
      v1032 = vshlq_n_s32((int32x4_t)v1470.val[2], 2uLL);
      v1033 = vshlq_n_s32((int32x4_t)v1470.val[3], 2uLL);
      v1034 = (int32x4_t)vextq_s8((int8x16_t)v1470.val[0], v983, 4uLL);
      *(int32x2_t *)v983.i8 = vrev64_s32(*(int32x2_t *)v1031);
      v1035 = (int32x4_t)vextq_s8((int8x16_t)v1470.val[1], v983, 4uLL);
      v1036 = (int32x4_t)vextq_s8((int8x16_t)v1470.val[2], v5, 4uLL);
      v1037 = vshlq_n_s32(v1034, 2uLL);
      v1470.val[0] = (float32x4_t)vaddq_s32(vaddq_s32(vaddq_s32(vaddq_s32(vaddq_s32((int32x4_t)v1470.val[0], vshlq_n_s32((int32x4_t)v1470.val[1], 2uLL)), vshlq_n_s32((int32x4_t)v1470.val[2], 1uLL)), v1032), v1033), v1034);
      v1470.val[1] = (float32x4_t)vaddq_s32(vaddq_s32(vaddq_s32(vaddq_s32(vaddq_s32((int32x4_t)v1470.val[1], v1032), vshlq_n_s32((int32x4_t)v1470.val[3], 1uLL)), v1033), v1037), v1035);
      v1038 = vshlq_n_s32(v1035, 2uLL);
      *(int32x2_t *)v5.i8 = vrev64_s32(*(int32x2_t *)v5.i8);
      v1470.val[2] = (float32x4_t)vaddq_s32(vaddq_s32(vaddq_s32(vaddq_s32(vaddq_s32((int32x4_t)v1470.val[2], v1033), v1037), v1038), vshlq_n_s32(v1034, 1uLL)), v1036);
      v1470.val[3] = (float32x4_t)vaddq_s32(vaddq_s32(vaddq_s32(vaddq_s32(vaddq_s32((int32x4_t)v1470.val[3], v1037), v1038), vshlq_n_s32(v1035, 1uLL)), vshlq_n_s32(v1036, 2uLL)), (int32x4_t)vextq_s8((int8x16_t)v1470.val[3], v5, 4uLL));
      vst4q_f32(v1030, v1470);
      v1039 = (float *)v1244;
      v1040 = (const float *)v1244;
      v1471 = vld4q_f32(v1040);
      v1040 += 16;
      v983.i64[0] = *(_QWORD *)v1040;
      v5.i64[0] = *((_QWORD *)v1040 + 1);
      v1041 = vshlq_n_s32((int32x4_t)v1471.val[2], 2uLL);
      v1042 = vshlq_n_s32((int32x4_t)v1471.val[3], 2uLL);
      v1043 = (int32x4_t)vextq_s8((int8x16_t)v1471.val[0], v983, 4uLL);
      *(int32x2_t *)v983.i8 = vrev64_s32(*(int32x2_t *)v1040);
      v1044 = (int32x4_t)vextq_s8((int8x16_t)v1471.val[1], v983, 4uLL);
      v1045 = (int32x4_t)vextq_s8((int8x16_t)v1471.val[2], v5, 4uLL);
      v1046 = vshlq_n_s32(v1043, 2uLL);
      v1471.val[0] = (float32x4_t)vaddq_s32(vaddq_s32(vaddq_s32(vaddq_s32(vaddq_s32((int32x4_t)v1471.val[0], vshlq_n_s32((int32x4_t)v1471.val[1], 2uLL)), vshlq_n_s32((int32x4_t)v1471.val[2], 1uLL)), v1041), v1042), v1043);
      v1471.val[1] = (float32x4_t)vaddq_s32(vaddq_s32(vaddq_s32(vaddq_s32(vaddq_s32((int32x4_t)v1471.val[1], v1041), vshlq_n_s32((int32x4_t)v1471.val[3], 1uLL)), v1042), v1046), v1044);
      v1047 = vshlq_n_s32(v1044, 2uLL);
      *(int32x2_t *)v5.i8 = vrev64_s32(*(int32x2_t *)v5.i8);
      v1471.val[2] = (float32x4_t)vaddq_s32(vaddq_s32(vaddq_s32(vaddq_s32(vaddq_s32((int32x4_t)v1471.val[2], v1042), v1046), v1047), vshlq_n_s32(v1043, 1uLL)), v1045);
      v1471.val[3] = (float32x4_t)vaddq_s32(vaddq_s32(vaddq_s32(vaddq_s32(vaddq_s32((int32x4_t)v1471.val[3], v1046), v1047), vshlq_n_s32(v1044, 1uLL)), vshlq_n_s32(v1045, 2uLL)), (int32x4_t)vextq_s8((int8x16_t)v1471.val[3], v5, 4uLL));
      vst4q_f32(v1039, v1471);
      v1048 = (float *)v1245;
      v1049 = (const float *)v1245;
      v1472 = vld4q_f32(v1049);
      v1049 += 16;
      v983.i64[0] = *(_QWORD *)v1049;
      v5.i64[0] = *((_QWORD *)v1049 + 1);
      v1050 = vshlq_n_s32((int32x4_t)v1472.val[2], 2uLL);
      v1051 = vshlq_n_s32((int32x4_t)v1472.val[3], 2uLL);
      v1052 = (int32x4_t)vextq_s8((int8x16_t)v1472.val[0], v983, 4uLL);
      *(int32x2_t *)v983.i8 = vrev64_s32(*(int32x2_t *)v1049);
      v1053 = (int32x4_t)vextq_s8((int8x16_t)v1472.val[1], v983, 4uLL);
      v1054 = (int32x4_t)vextq_s8((int8x16_t)v1472.val[2], v5, 4uLL);
      v1055 = vshlq_n_s32(v1052, 2uLL);
      v1472.val[0] = (float32x4_t)vaddq_s32(vaddq_s32(vaddq_s32(vaddq_s32(vaddq_s32((int32x4_t)v1472.val[0], vshlq_n_s32((int32x4_t)v1472.val[1], 2uLL)), vshlq_n_s32((int32x4_t)v1472.val[2], 1uLL)), v1050), v1051), v1052);
      v1472.val[1] = (float32x4_t)vaddq_s32(vaddq_s32(vaddq_s32(vaddq_s32(vaddq_s32((int32x4_t)v1472.val[1], v1050), vshlq_n_s32((int32x4_t)v1472.val[3], 1uLL)), v1051), v1055), v1053);
      v1056 = vshlq_n_s32(v1053, 2uLL);
      *(int32x2_t *)v5.i8 = vrev64_s32(*(int32x2_t *)v5.i8);
      v1472.val[2] = (float32x4_t)vaddq_s32(vaddq_s32(vaddq_s32(vaddq_s32(vaddq_s32((int32x4_t)v1472.val[2], v1051), v1055), v1056), vshlq_n_s32(v1052, 1uLL)), v1054);
      v1472.val[3] = (float32x4_t)vaddq_s32(vaddq_s32(vaddq_s32(vaddq_s32(vaddq_s32((int32x4_t)v1472.val[3], v1055), v1056), vshlq_n_s32(v1053, 1uLL)), vshlq_n_s32(v1054, 2uLL)), (int32x4_t)vextq_s8((int8x16_t)v1472.val[3], v5, 4uLL));
      vst4q_f32(v1048, v1472);
      v1057 = (const float *)v1248;
      v1058 = (float *)v1248;
      v1473 = vld4q_f32(v1057);
      v1057 += 16;
      v983.i64[0] = *(_QWORD *)v1057;
      v5.i64[0] = *((_QWORD *)v1057 + 1);
      v1059 = vshlq_n_s32((int32x4_t)v1473.val[2], 2uLL);
      v1060 = vshlq_n_s32((int32x4_t)v1473.val[3], 2uLL);
      v1061 = (int32x4_t)vextq_s8((int8x16_t)v1473.val[0], v983, 4uLL);
      *(int32x2_t *)v983.i8 = vrev64_s32(*(int32x2_t *)v1057);
      v1062 = (int32x4_t)vextq_s8((int8x16_t)v1473.val[1], v983, 4uLL);
      v1063 = (int32x4_t)vextq_s8((int8x16_t)v1473.val[2], v5, 4uLL);
      v1064 = vshlq_n_s32(v1061, 2uLL);
      v1473.val[0] = (float32x4_t)vaddq_s32(vaddq_s32(vaddq_s32(vaddq_s32(vaddq_s32((int32x4_t)v1473.val[0], vshlq_n_s32((int32x4_t)v1473.val[1], 2uLL)), vshlq_n_s32((int32x4_t)v1473.val[2], 1uLL)), v1059), v1060), v1061);
      v1473.val[1] = (float32x4_t)vaddq_s32(vaddq_s32(vaddq_s32(vaddq_s32(vaddq_s32((int32x4_t)v1473.val[1], v1059), vshlq_n_s32((int32x4_t)v1473.val[3], 1uLL)), v1060), v1064), v1062);
      v1065 = vshlq_n_s32(v1062, 2uLL);
      *(int32x2_t *)v5.i8 = vrev64_s32(*(int32x2_t *)v5.i8);
      v1473.val[2] = (float32x4_t)vaddq_s32(vaddq_s32(vaddq_s32(vaddq_s32(vaddq_s32((int32x4_t)v1473.val[2], v1060), v1064), v1065), vshlq_n_s32(v1061, 1uLL)), v1063);
      v1473.val[3] = (float32x4_t)vaddq_s32(vaddq_s32(vaddq_s32(vaddq_s32(vaddq_s32((int32x4_t)v1473.val[3], v1064), v1065), vshlq_n_s32(v1062, 1uLL)), vshlq_n_s32(v1063, 2uLL)), (int32x4_t)vextq_s8((int8x16_t)v1473.val[3], v5, 4uLL));
      vst4q_f32(v1058, v1473);
      v1066 = (float *)v1249;
      v1067 = (const float *)v1249;
      v1474 = vld4q_f32(v1067);
      v1067 += 16;
      v983.i64[0] = *(_QWORD *)v1067;
      v5.i64[0] = *((_QWORD *)v1067 + 1);
      v1068 = vshlq_n_s32((int32x4_t)v1474.val[2], 2uLL);
      v1069 = vshlq_n_s32((int32x4_t)v1474.val[3], 2uLL);
      v1070 = (int32x4_t)vextq_s8((int8x16_t)v1474.val[0], v983, 4uLL);
      *(int32x2_t *)v983.i8 = vrev64_s32(*(int32x2_t *)v1067);
      v1071 = (int32x4_t)vextq_s8((int8x16_t)v1474.val[1], v983, 4uLL);
      v1072 = (int32x4_t)vextq_s8((int8x16_t)v1474.val[2], v5, 4uLL);
      v1073 = vshlq_n_s32(v1070, 2uLL);
      v1474.val[0] = (float32x4_t)vaddq_s32(vaddq_s32(vaddq_s32(vaddq_s32(vaddq_s32((int32x4_t)v1474.val[0], vshlq_n_s32((int32x4_t)v1474.val[1], 2uLL)), vshlq_n_s32((int32x4_t)v1474.val[2], 1uLL)), v1068), v1069), v1070);
      v1474.val[1] = (float32x4_t)vaddq_s32(vaddq_s32(vaddq_s32(vaddq_s32(vaddq_s32((int32x4_t)v1474.val[1], v1068), vshlq_n_s32((int32x4_t)v1474.val[3], 1uLL)), v1069), v1073), v1071);
      v1074 = vshlq_n_s32(v1071, 2uLL);
      *(int32x2_t *)v5.i8 = vrev64_s32(*(int32x2_t *)v5.i8);
      v1474.val[2] = (float32x4_t)vaddq_s32(vaddq_s32(vaddq_s32(vaddq_s32(vaddq_s32((int32x4_t)v1474.val[2], v1069), v1073), v1074), vshlq_n_s32(v1070, 1uLL)), v1072);
      v1474.val[3] = (float32x4_t)vaddq_s32(vaddq_s32(vaddq_s32(vaddq_s32(vaddq_s32((int32x4_t)v1474.val[3], v1073), v1074), vshlq_n_s32(v1071, 1uLL)), vshlq_n_s32(v1072, 2uLL)), (int32x4_t)vextq_s8((int8x16_t)v1474.val[3], v5, 4uLL));
      vst4q_f32(v1066, v1474);
      v1075 = (float *)v1250;
      v1076 = (const float *)v1250;
      v1475 = vld4q_f32(v1076);
      v1076 += 16;
      v983.i64[0] = *(_QWORD *)v1076;
      v5.i64[0] = *((_QWORD *)v1076 + 1);
      v1077 = vshlq_n_s32((int32x4_t)v1475.val[2], 2uLL);
      v1078 = vshlq_n_s32((int32x4_t)v1475.val[3], 2uLL);
      v1079 = (int32x4_t)vextq_s8((int8x16_t)v1475.val[0], v983, 4uLL);
      *(int32x2_t *)v983.i8 = vrev64_s32(*(int32x2_t *)v1076);
      v1080 = (int32x4_t)vextq_s8((int8x16_t)v1475.val[1], v983, 4uLL);
      v1081 = (int32x4_t)vextq_s8((int8x16_t)v1475.val[2], v5, 4uLL);
      v1082 = vshlq_n_s32(v1079, 2uLL);
      v1475.val[0] = (float32x4_t)vaddq_s32(vaddq_s32(vaddq_s32(vaddq_s32(vaddq_s32((int32x4_t)v1475.val[0], vshlq_n_s32((int32x4_t)v1475.val[1], 2uLL)), vshlq_n_s32((int32x4_t)v1475.val[2], 1uLL)), v1077), v1078), v1079);
      v1475.val[1] = (float32x4_t)vaddq_s32(vaddq_s32(vaddq_s32(vaddq_s32(vaddq_s32((int32x4_t)v1475.val[1], v1077), vshlq_n_s32((int32x4_t)v1475.val[3], 1uLL)), v1078), v1082), v1080);
      v1083 = vshlq_n_s32(v1080, 2uLL);
      *(int32x2_t *)v5.i8 = vrev64_s32(*(int32x2_t *)v5.i8);
      v1475.val[2] = (float32x4_t)vaddq_s32(vaddq_s32(vaddq_s32(vaddq_s32(vaddq_s32((int32x4_t)v1475.val[2], v1078), v1082), v1083), vshlq_n_s32(v1079, 1uLL)), v1081);
      v1475.val[3] = (float32x4_t)vaddq_s32(vaddq_s32(vaddq_s32(vaddq_s32(vaddq_s32((int32x4_t)v1475.val[3], v1082), v1083), vshlq_n_s32(v1080, 1uLL)), vshlq_n_s32(v1081, 2uLL)), (int32x4_t)vextq_s8((int8x16_t)v1475.val[3], v5, 4uLL));
      vst4q_f32(v1075, v1475);
      v1084 = (float *)v1251;
      v1085 = (const float *)v1251;
      v1476 = vld4q_f32(v1085);
      v1085 += 16;
      v983.i64[0] = *(_QWORD *)v1085;
      v5.i64[0] = *((_QWORD *)v1085 + 1);
      v1086 = vshlq_n_s32((int32x4_t)v1476.val[2], 2uLL);
      v1087 = vshlq_n_s32((int32x4_t)v1476.val[3], 2uLL);
      v1088 = (int32x4_t)vextq_s8((int8x16_t)v1476.val[0], v983, 4uLL);
      *(int32x2_t *)v983.i8 = vrev64_s32(*(int32x2_t *)v1085);
      v1089 = (int32x4_t)vextq_s8((int8x16_t)v1476.val[1], v983, 4uLL);
      v1090 = (int32x4_t)vextq_s8((int8x16_t)v1476.val[2], v5, 4uLL);
      v1091 = vshlq_n_s32(v1088, 2uLL);
      v1476.val[0] = (float32x4_t)vaddq_s32(vaddq_s32(vaddq_s32(vaddq_s32(vaddq_s32((int32x4_t)v1476.val[0], vshlq_n_s32((int32x4_t)v1476.val[1], 2uLL)), vshlq_n_s32((int32x4_t)v1476.val[2], 1uLL)), v1086), v1087), v1088);
      v1476.val[1] = (float32x4_t)vaddq_s32(vaddq_s32(vaddq_s32(vaddq_s32(vaddq_s32((int32x4_t)v1476.val[1], v1086), vshlq_n_s32((int32x4_t)v1476.val[3], 1uLL)), v1087), v1091), v1089);
      v1092 = vshlq_n_s32(v1089, 2uLL);
      *(int32x2_t *)v5.i8 = vrev64_s32(*(int32x2_t *)v5.i8);
      v1476.val[2] = (float32x4_t)vaddq_s32(vaddq_s32(vaddq_s32(vaddq_s32(vaddq_s32((int32x4_t)v1476.val[2], v1087), v1091), v1092), vshlq_n_s32(v1088, 1uLL)), v1090);
      v1476.val[3] = (float32x4_t)vaddq_s32(vaddq_s32(vaddq_s32(vaddq_s32(vaddq_s32((int32x4_t)v1476.val[3], v1091), v1092), vshlq_n_s32(v1089, 1uLL)), vshlq_n_s32(v1090, 2uLL)), (int32x4_t)vextq_s8((int8x16_t)v1476.val[3], v5, 4uLL));
      vst4q_f32(v1084, v1476);
      v1093 = (float *)v1252;
      v1094 = (const float *)v1252;
      v1477 = vld4q_f32(v1094);
      v1094 += 16;
      v983.i64[0] = *(_QWORD *)v1094;
      v5.i64[0] = *((_QWORD *)v1094 + 1);
      v1095 = vshlq_n_s32((int32x4_t)v1477.val[2], 2uLL);
      v1096 = vshlq_n_s32((int32x4_t)v1477.val[3], 2uLL);
      v1097 = (int32x4_t)vextq_s8((int8x16_t)v1477.val[0], v983, 4uLL);
      *(int32x2_t *)v983.i8 = vrev64_s32(*(int32x2_t *)v1094);
      v1098 = (int32x4_t)vextq_s8((int8x16_t)v1477.val[1], v983, 4uLL);
      v1099 = (int32x4_t)vextq_s8((int8x16_t)v1477.val[2], v5, 4uLL);
      v1100 = vshlq_n_s32(v1097, 2uLL);
      v1477.val[0] = (float32x4_t)vaddq_s32(vaddq_s32(vaddq_s32(vaddq_s32(vaddq_s32((int32x4_t)v1477.val[0], vshlq_n_s32((int32x4_t)v1477.val[1], 2uLL)), vshlq_n_s32((int32x4_t)v1477.val[2], 1uLL)), v1095), v1096), v1097);
      v1477.val[1] = (float32x4_t)vaddq_s32(vaddq_s32(vaddq_s32(vaddq_s32(vaddq_s32((int32x4_t)v1477.val[1], v1095), vshlq_n_s32((int32x4_t)v1477.val[3], 1uLL)), v1096), v1100), v1098);
      v1101 = vshlq_n_s32(v1098, 2uLL);
      *(int32x2_t *)v5.i8 = vrev64_s32(*(int32x2_t *)v5.i8);
      v1477.val[2] = (float32x4_t)vaddq_s32(vaddq_s32(vaddq_s32(vaddq_s32(vaddq_s32((int32x4_t)v1477.val[2], v1096), v1100), v1101), vshlq_n_s32(v1097, 1uLL)), v1099);
      v1477.val[3] = (float32x4_t)vaddq_s32(vaddq_s32(vaddq_s32(vaddq_s32(vaddq_s32((int32x4_t)v1477.val[3], v1100), v1101), vshlq_n_s32(v1098, 1uLL)), vshlq_n_s32(v1099, 2uLL)), (int32x4_t)vextq_s8((int8x16_t)v1477.val[3], v5, 4uLL));
      vst4q_f32(v1093, v1477);
      v1102 = (float *)v1253;
      v1103 = (const float *)v1253;
      v1478 = vld4q_f32(v1103);
      v1103 += 16;
      v983.i64[0] = *(_QWORD *)v1103;
      v5.i64[0] = *((_QWORD *)v1103 + 1);
      v1104 = vshlq_n_s32((int32x4_t)v1478.val[2], 2uLL);
      v1105 = vshlq_n_s32((int32x4_t)v1478.val[3], 2uLL);
      v1106 = (int32x4_t)vextq_s8((int8x16_t)v1478.val[0], v983, 4uLL);
      *(int32x2_t *)v983.i8 = vrev64_s32(*(int32x2_t *)v1103);
      v1107 = (int32x4_t)vextq_s8((int8x16_t)v1478.val[1], v983, 4uLL);
      v1108 = (int32x4_t)vextq_s8((int8x16_t)v1478.val[2], v5, 4uLL);
      v1109 = vshlq_n_s32(v1106, 2uLL);
      v1478.val[0] = (float32x4_t)vaddq_s32(vaddq_s32(vaddq_s32(vaddq_s32(vaddq_s32((int32x4_t)v1478.val[0], vshlq_n_s32((int32x4_t)v1478.val[1], 2uLL)), vshlq_n_s32((int32x4_t)v1478.val[2], 1uLL)), v1104), v1105), v1106);
      v1478.val[1] = (float32x4_t)vaddq_s32(vaddq_s32(vaddq_s32(vaddq_s32(vaddq_s32((int32x4_t)v1478.val[1], v1104), vshlq_n_s32((int32x4_t)v1478.val[3], 1uLL)), v1105), v1109), v1107);
      v1110 = vshlq_n_s32(v1107, 2uLL);
      *(int32x2_t *)v5.i8 = vrev64_s32(*(int32x2_t *)v5.i8);
      v1478.val[2] = (float32x4_t)vaddq_s32(vaddq_s32(vaddq_s32(vaddq_s32(vaddq_s32((int32x4_t)v1478.val[2], v1105), v1109), v1110), vshlq_n_s32(v1106, 1uLL)), v1108);
      v1478.val[3] = (float32x4_t)vaddq_s32(vaddq_s32(vaddq_s32(vaddq_s32(vaddq_s32((int32x4_t)v1478.val[3], v1109), v1110), vshlq_n_s32(v1107, 1uLL)), vshlq_n_s32(v1108, 2uLL)), (int32x4_t)vextq_s8((int8x16_t)v1478.val[3], v5, 4uLL));
      vst4q_f32(v1102, v1478);
      v1111 = (float *)v1254;
      v1112 = (const float *)v1254;
      v1479 = vld4q_f32(v1112);
      v1112 += 16;
      v983.i64[0] = *(_QWORD *)v1112;
      v5.i64[0] = *((_QWORD *)v1112 + 1);
      v1113 = vshlq_n_s32((int32x4_t)v1479.val[2], 2uLL);
      v1114 = vshlq_n_s32((int32x4_t)v1479.val[3], 2uLL);
      v1115 = (int32x4_t)vextq_s8((int8x16_t)v1479.val[0], v983, 4uLL);
      *(int32x2_t *)v983.i8 = vrev64_s32(*(int32x2_t *)v1112);
      v1116 = (int32x4_t)vextq_s8((int8x16_t)v1479.val[1], v983, 4uLL);
      v1117 = (int32x4_t)vextq_s8((int8x16_t)v1479.val[2], v5, 4uLL);
      v1118 = vshlq_n_s32(v1115, 2uLL);
      v1479.val[0] = (float32x4_t)vaddq_s32(vaddq_s32(vaddq_s32(vaddq_s32(vaddq_s32((int32x4_t)v1479.val[0], vshlq_n_s32((int32x4_t)v1479.val[1], 2uLL)), vshlq_n_s32((int32x4_t)v1479.val[2], 1uLL)), v1113), v1114), v1115);
      v1479.val[1] = (float32x4_t)vaddq_s32(vaddq_s32(vaddq_s32(vaddq_s32(vaddq_s32((int32x4_t)v1479.val[1], v1113), vshlq_n_s32((int32x4_t)v1479.val[3], 1uLL)), v1114), v1118), v1116);
      v1119 = vshlq_n_s32(v1116, 2uLL);
      *(int32x2_t *)v5.i8 = vrev64_s32(*(int32x2_t *)v5.i8);
      v1479.val[2] = (float32x4_t)vaddq_s32(vaddq_s32(vaddq_s32(vaddq_s32(vaddq_s32((int32x4_t)v1479.val[2], v1114), v1118), v1119), vshlq_n_s32(v1115, 1uLL)), v1117);
      v1479.val[3] = (float32x4_t)vaddq_s32(vaddq_s32(vaddq_s32(vaddq_s32(vaddq_s32((int32x4_t)v1479.val[3], v1118), v1119), vshlq_n_s32(v1116, 1uLL)), vshlq_n_s32(v1117, 2uLL)), (int32x4_t)vextq_s8((int8x16_t)v1479.val[3], v5, 4uLL));
      vst4q_f32(v1111, v1479);
      v1120 = (float *)v1255;
      v1121 = (const float *)v1255;
      v1480 = vld4q_f32(v1121);
      v1121 += 16;
      v983.i64[0] = *(_QWORD *)v1121;
      v5.i64[0] = *((_QWORD *)v1121 + 1);
      v1122 = vshlq_n_s32((int32x4_t)v1480.val[2], 2uLL);
      v1123 = vshlq_n_s32((int32x4_t)v1480.val[3], 2uLL);
      v1124 = (int32x4_t)vextq_s8((int8x16_t)v1480.val[0], v983, 4uLL);
      *(int32x2_t *)v983.i8 = vrev64_s32(*(int32x2_t *)v1121);
      v1125 = (int32x4_t)vextq_s8((int8x16_t)v1480.val[1], v983, 4uLL);
      v1126 = (int32x4_t)vextq_s8((int8x16_t)v1480.val[2], v5, 4uLL);
      v1127 = vshlq_n_s32(v1124, 2uLL);
      v1480.val[0] = (float32x4_t)vaddq_s32(vaddq_s32(vaddq_s32(vaddq_s32(vaddq_s32((int32x4_t)v1480.val[0], vshlq_n_s32((int32x4_t)v1480.val[1], 2uLL)), vshlq_n_s32((int32x4_t)v1480.val[2], 1uLL)), v1122), v1123), v1124);
      v1480.val[1] = (float32x4_t)vaddq_s32(vaddq_s32(vaddq_s32(vaddq_s32(vaddq_s32((int32x4_t)v1480.val[1], v1122), vshlq_n_s32((int32x4_t)v1480.val[3], 1uLL)), v1123), v1127), v1125);
      v1128 = vshlq_n_s32(v1125, 2uLL);
      *(int32x2_t *)v5.i8 = vrev64_s32(*(int32x2_t *)v5.i8);
      v1480.val[2] = (float32x4_t)vaddq_s32(vaddq_s32(vaddq_s32(vaddq_s32(vaddq_s32((int32x4_t)v1480.val[2], v1123), v1127), v1128), vshlq_n_s32(v1124, 1uLL)), v1126);
      v1480.val[3] = (float32x4_t)vaddq_s32(vaddq_s32(vaddq_s32(vaddq_s32(vaddq_s32((int32x4_t)v1480.val[3], v1127), v1128), vshlq_n_s32(v1125, 1uLL)), vshlq_n_s32(v1126, 2uLL)), (int32x4_t)vextq_s8((int8x16_t)v1480.val[3], v5, 4uLL));
      vst4q_f32(v1120, v1480);
      v1129 = (const float *)v1258;
      v1130 = (float *)v1258;
      v1481 = vld4q_f32(v1129);
      v1129 += 16;
      v983.i64[0] = *(_QWORD *)v1129;
      v5.i64[0] = *((_QWORD *)v1129 + 1);
      v1131 = vshlq_n_s32((int32x4_t)v1481.val[2], 2uLL);
      v1132 = vshlq_n_s32((int32x4_t)v1481.val[3], 2uLL);
      v1133 = (int32x4_t)vextq_s8((int8x16_t)v1481.val[0], v983, 4uLL);
      *(int32x2_t *)v983.i8 = vrev64_s32(*(int32x2_t *)v1129);
      v1134 = (int32x4_t)vextq_s8((int8x16_t)v1481.val[1], v983, 4uLL);
      v1135 = (int32x4_t)vextq_s8((int8x16_t)v1481.val[2], v5, 4uLL);
      v1136 = vshlq_n_s32(v1133, 2uLL);
      v1481.val[0] = (float32x4_t)vaddq_s32(vaddq_s32(vaddq_s32(vaddq_s32(vaddq_s32((int32x4_t)v1481.val[0], vshlq_n_s32((int32x4_t)v1481.val[1], 2uLL)), vshlq_n_s32((int32x4_t)v1481.val[2], 1uLL)), v1131), v1132), v1133);
      v1481.val[1] = (float32x4_t)vaddq_s32(vaddq_s32(vaddq_s32(vaddq_s32(vaddq_s32((int32x4_t)v1481.val[1], v1131), vshlq_n_s32((int32x4_t)v1481.val[3], 1uLL)), v1132), v1136), v1134);
      v1137 = vshlq_n_s32(v1134, 2uLL);
      *(int32x2_t *)v5.i8 = vrev64_s32(*(int32x2_t *)v5.i8);
      v1481.val[2] = (float32x4_t)vaddq_s32(vaddq_s32(vaddq_s32(vaddq_s32(vaddq_s32((int32x4_t)v1481.val[2], v1132), v1136), v1137), vshlq_n_s32(v1133, 1uLL)), v1135);
      v1481.val[3] = (float32x4_t)vaddq_s32(vaddq_s32(vaddq_s32(vaddq_s32(vaddq_s32((int32x4_t)v1481.val[3], v1136), v1137), vshlq_n_s32(v1134, 1uLL)), vshlq_n_s32(v1135, 2uLL)), (int32x4_t)vextq_s8((int8x16_t)v1481.val[3], v5, 4uLL));
      vst4q_f32(v1130, v1481);
      v1138 = (const float *)v1259;
      v1139 = (float *)v1259;
      v1482 = vld4q_f32(v1138);
      v1138 += 16;
      v983.i64[0] = *(_QWORD *)v1138;
      v5.i64[0] = *((_QWORD *)v1138 + 1);
      v1140 = vshlq_n_s32((int32x4_t)v1482.val[2], 2uLL);
      v1141 = vshlq_n_s32((int32x4_t)v1482.val[3], 2uLL);
      v1142 = (int32x4_t)vextq_s8((int8x16_t)v1482.val[0], v983, 4uLL);
      *(int32x2_t *)v983.i8 = vrev64_s32(*(int32x2_t *)v1138);
      v1143 = (int32x4_t)vextq_s8((int8x16_t)v1482.val[1], v983, 4uLL);
      v1144 = (int32x4_t)vextq_s8((int8x16_t)v1482.val[2], v5, 4uLL);
      v1145 = vshlq_n_s32(v1142, 2uLL);
      v1482.val[0] = (float32x4_t)vaddq_s32(vaddq_s32(vaddq_s32(vaddq_s32(vaddq_s32((int32x4_t)v1482.val[0], vshlq_n_s32((int32x4_t)v1482.val[1], 2uLL)), vshlq_n_s32((int32x4_t)v1482.val[2], 1uLL)), v1140), v1141), v1142);
      v1482.val[1] = (float32x4_t)vaddq_s32(vaddq_s32(vaddq_s32(vaddq_s32(vaddq_s32((int32x4_t)v1482.val[1], v1140), vshlq_n_s32((int32x4_t)v1482.val[3], 1uLL)), v1141), v1145), v1143);
      v1146 = vshlq_n_s32(v1143, 2uLL);
      *(int32x2_t *)v5.i8 = vrev64_s32(*(int32x2_t *)v5.i8);
      v1482.val[2] = (float32x4_t)vaddq_s32(vaddq_s32(vaddq_s32(vaddq_s32(vaddq_s32((int32x4_t)v1482.val[2], v1141), v1145), v1146), vshlq_n_s32(v1142, 1uLL)), v1144);
      v1482.val[3] = (float32x4_t)vaddq_s32(vaddq_s32(vaddq_s32(vaddq_s32(vaddq_s32((int32x4_t)v1482.val[3], v1145), v1146), vshlq_n_s32(v1143, 1uLL)), vshlq_n_s32(v1144, 2uLL)), (int32x4_t)vextq_s8((int8x16_t)v1482.val[3], v5, 4uLL));
      vst4q_f32(v1139, v1482);
      v1147 = (const float *)v1260;
      v1148 = (float *)v1260;
      v1483 = vld4q_f32(v1147);
      v1147 += 16;
      v983.i64[0] = *(_QWORD *)v1147;
      v5.i64[0] = *((_QWORD *)v1147 + 1);
      v1149 = vshlq_n_s32((int32x4_t)v1483.val[2], 2uLL);
      v1150 = vshlq_n_s32((int32x4_t)v1483.val[3], 2uLL);
      v1151 = (int32x4_t)vextq_s8((int8x16_t)v1483.val[0], v983, 4uLL);
      *(int32x2_t *)v983.i8 = vrev64_s32(*(int32x2_t *)v1147);
      v1152 = (int32x4_t)vextq_s8((int8x16_t)v1483.val[1], v983, 4uLL);
      v1153 = (int32x4_t)vextq_s8((int8x16_t)v1483.val[2], v5, 4uLL);
      v1154 = vshlq_n_s32(v1151, 2uLL);
      v1483.val[0] = (float32x4_t)vaddq_s32(vaddq_s32(vaddq_s32(vaddq_s32(vaddq_s32((int32x4_t)v1483.val[0], vshlq_n_s32((int32x4_t)v1483.val[1], 2uLL)), vshlq_n_s32((int32x4_t)v1483.val[2], 1uLL)), v1149), v1150), v1151);
      v1483.val[1] = (float32x4_t)vaddq_s32(vaddq_s32(vaddq_s32(vaddq_s32(vaddq_s32((int32x4_t)v1483.val[1], v1149), vshlq_n_s32((int32x4_t)v1483.val[3], 1uLL)), v1150), v1154), v1152);
      v1155 = vshlq_n_s32(v1152, 2uLL);
      *(int32x2_t *)v5.i8 = vrev64_s32(*(int32x2_t *)v5.i8);
      v1483.val[2] = (float32x4_t)vaddq_s32(vaddq_s32(vaddq_s32(vaddq_s32(vaddq_s32((int32x4_t)v1483.val[2], v1150), v1154), v1155), vshlq_n_s32(v1151, 1uLL)), v1153);
      v1483.val[3] = (float32x4_t)vaddq_s32(vaddq_s32(vaddq_s32(vaddq_s32(vaddq_s32((int32x4_t)v1483.val[3], v1154), v1155), vshlq_n_s32(v1152, 1uLL)), vshlq_n_s32(v1153, 2uLL)), (int32x4_t)vextq_s8((int8x16_t)v1483.val[3], v5, 4uLL));
      vst4q_f32(v1148, v1483);
      v1156 = (const float *)v1261;
      v1157 = (float *)v1261;
      v1484 = vld4q_f32(v1156);
      v1156 += 16;
      v983.i64[0] = *(_QWORD *)v1156;
      v5.i64[0] = *((_QWORD *)v1156 + 1);
      v1158 = vshlq_n_s32((int32x4_t)v1484.val[2], 2uLL);
      v1159 = vshlq_n_s32((int32x4_t)v1484.val[3], 2uLL);
      v1160 = (int32x4_t)vextq_s8((int8x16_t)v1484.val[0], v983, 4uLL);
      *(int32x2_t *)v983.i8 = vrev64_s32(*(int32x2_t *)v1156);
      v1161 = (int32x4_t)vextq_s8((int8x16_t)v1484.val[1], v983, 4uLL);
      v1162 = (int32x4_t)vextq_s8((int8x16_t)v1484.val[2], v5, 4uLL);
      v1163 = vshlq_n_s32(v1160, 2uLL);
      v1484.val[0] = (float32x4_t)vaddq_s32(vaddq_s32(vaddq_s32(vaddq_s32(vaddq_s32((int32x4_t)v1484.val[0], vshlq_n_s32((int32x4_t)v1484.val[1], 2uLL)), vshlq_n_s32((int32x4_t)v1484.val[2], 1uLL)), v1158), v1159), v1160);
      v1484.val[1] = (float32x4_t)vaddq_s32(vaddq_s32(vaddq_s32(vaddq_s32(vaddq_s32((int32x4_t)v1484.val[1], v1158), vshlq_n_s32((int32x4_t)v1484.val[3], 1uLL)), v1159), v1163), v1161);
      v1164 = vshlq_n_s32(v1161, 2uLL);
      *(int32x2_t *)v5.i8 = vrev64_s32(*(int32x2_t *)v5.i8);
      v1484.val[2] = (float32x4_t)vaddq_s32(vaddq_s32(vaddq_s32(vaddq_s32(vaddq_s32((int32x4_t)v1484.val[2], v1159), v1163), v1164), vshlq_n_s32(v1160, 1uLL)), v1162);
      v1484.val[3] = (float32x4_t)vaddq_s32(vaddq_s32(vaddq_s32(vaddq_s32(vaddq_s32((int32x4_t)v1484.val[3], v1163), v1164), vshlq_n_s32(v1161, 1uLL)), vshlq_n_s32(v1162, 2uLL)), (int32x4_t)vextq_s8((int8x16_t)v1484.val[3], v5, 4uLL));
      vst4q_f32(v1157, v1484);
      v1165 = (const float *)v1262;
      v1166 = (float *)v1262;
      v1485 = vld4q_f32(v1165);
      v1165 += 16;
      v983.i64[0] = *(_QWORD *)v1165;
      v5.i64[0] = *((_QWORD *)v1165 + 1);
      v1167 = vshlq_n_s32((int32x4_t)v1485.val[2], 2uLL);
      v1168 = vshlq_n_s32((int32x4_t)v1485.val[3], 2uLL);
      v1169 = (int32x4_t)vextq_s8((int8x16_t)v1485.val[0], v983, 4uLL);
      *(int32x2_t *)v983.i8 = vrev64_s32(*(int32x2_t *)v1165);
      v1170 = (int32x4_t)vextq_s8((int8x16_t)v1485.val[1], v983, 4uLL);
      v1171 = (int32x4_t)vextq_s8((int8x16_t)v1485.val[2], v5, 4uLL);
      v1172 = vshlq_n_s32(v1169, 2uLL);
      v1485.val[0] = (float32x4_t)vaddq_s32(vaddq_s32(vaddq_s32(vaddq_s32(vaddq_s32((int32x4_t)v1485.val[0], vshlq_n_s32((int32x4_t)v1485.val[1], 2uLL)), vshlq_n_s32((int32x4_t)v1485.val[2], 1uLL)), v1167), v1168), v1169);
      v1485.val[1] = (float32x4_t)vaddq_s32(vaddq_s32(vaddq_s32(vaddq_s32(vaddq_s32((int32x4_t)v1485.val[1], v1167), vshlq_n_s32((int32x4_t)v1485.val[3], 1uLL)), v1168), v1172), v1170);
      v1173 = vshlq_n_s32(v1170, 2uLL);
      *(int32x2_t *)v5.i8 = vrev64_s32(*(int32x2_t *)v5.i8);
      v1485.val[2] = (float32x4_t)vaddq_s32(vaddq_s32(vaddq_s32(vaddq_s32(vaddq_s32((int32x4_t)v1485.val[2], v1168), v1172), v1173), vshlq_n_s32(v1169, 1uLL)), v1171);
      v1485.val[3] = (float32x4_t)vaddq_s32(vaddq_s32(vaddq_s32(vaddq_s32(vaddq_s32((int32x4_t)v1485.val[3], v1172), v1173), vshlq_n_s32(v1170, 1uLL)), vshlq_n_s32(v1171, 2uLL)), (int32x4_t)vextq_s8((int8x16_t)v1485.val[3], v5, 4uLL));
      vst4q_f32(v1166, v1485);
      v1174 = (const float *)v1263;
      v1175 = (float *)v1263;
      v1486 = vld4q_f32(v1174);
      v1174 += 16;
      v983.i64[0] = *(_QWORD *)v1174;
      v5.i64[0] = *((_QWORD *)v1174 + 1);
      v1176 = vshlq_n_s32((int32x4_t)v1486.val[2], 2uLL);
      v1177 = vshlq_n_s32((int32x4_t)v1486.val[3], 2uLL);
      v1178 = (int32x4_t)vextq_s8((int8x16_t)v1486.val[0], v983, 4uLL);
      *(int32x2_t *)v983.i8 = vrev64_s32(*(int32x2_t *)v1174);
      v1179 = (int32x4_t)vextq_s8((int8x16_t)v1486.val[1], v983, 4uLL);
      v1180 = (int32x4_t)vextq_s8((int8x16_t)v1486.val[2], v5, 4uLL);
      v1181 = vshlq_n_s32(v1178, 2uLL);
      v1486.val[0] = (float32x4_t)vaddq_s32(vaddq_s32(vaddq_s32(vaddq_s32(vaddq_s32((int32x4_t)v1486.val[0], vshlq_n_s32((int32x4_t)v1486.val[1], 2uLL)), vshlq_n_s32((int32x4_t)v1486.val[2], 1uLL)), v1176), v1177), v1178);
      v1486.val[1] = (float32x4_t)vaddq_s32(vaddq_s32(vaddq_s32(vaddq_s32(vaddq_s32((int32x4_t)v1486.val[1], v1176), vshlq_n_s32((int32x4_t)v1486.val[3], 1uLL)), v1177), v1181), v1179);
      v1182 = vshlq_n_s32(v1179, 2uLL);
      *(int32x2_t *)v5.i8 = vrev64_s32(*(int32x2_t *)v5.i8);
      v1486.val[2] = (float32x4_t)vaddq_s32(vaddq_s32(vaddq_s32(vaddq_s32(vaddq_s32((int32x4_t)v1486.val[2], v1177), v1181), v1182), vshlq_n_s32(v1178, 1uLL)), v1180);
      v1486.val[3] = (float32x4_t)vaddq_s32(vaddq_s32(vaddq_s32(vaddq_s32(vaddq_s32((int32x4_t)v1486.val[3], v1181), v1182), vshlq_n_s32(v1179, 1uLL)), vshlq_n_s32(v1180, 2uLL)), (int32x4_t)vextq_s8((int8x16_t)v1486.val[3], v5, 4uLL));
      vst4q_f32(v1175, v1486);
      v1183 = (const float *)v1264;
      v1184 = (float *)v1264;
      v1487 = vld4q_f32(v1183);
      v1183 += 16;
      v983.i64[0] = *(_QWORD *)v1183;
      v5.i64[0] = *((_QWORD *)v1183 + 1);
      v1185 = vshlq_n_s32((int32x4_t)v1487.val[2], 2uLL);
      v1186 = vshlq_n_s32((int32x4_t)v1487.val[3], 2uLL);
      v1187 = (int32x4_t)vextq_s8((int8x16_t)v1487.val[0], v983, 4uLL);
      *(int32x2_t *)v983.i8 = vrev64_s32(*(int32x2_t *)v1183);
      v1188 = (int32x4_t)vextq_s8((int8x16_t)v1487.val[1], v983, 4uLL);
      v1189 = (int32x4_t)vextq_s8((int8x16_t)v1487.val[2], v5, 4uLL);
      v1190 = vshlq_n_s32(v1187, 2uLL);
      v1487.val[0] = (float32x4_t)vaddq_s32(vaddq_s32(vaddq_s32(vaddq_s32(vaddq_s32((int32x4_t)v1487.val[0], vshlq_n_s32((int32x4_t)v1487.val[1], 2uLL)), vshlq_n_s32((int32x4_t)v1487.val[2], 1uLL)), v1185), v1186), v1187);
      v1487.val[1] = (float32x4_t)vaddq_s32(vaddq_s32(vaddq_s32(vaddq_s32(vaddq_s32((int32x4_t)v1487.val[1], v1185), vshlq_n_s32((int32x4_t)v1487.val[3], 1uLL)), v1186), v1190), v1188);
      v1191 = vshlq_n_s32(v1188, 2uLL);
      *(int32x2_t *)v5.i8 = vrev64_s32(*(int32x2_t *)v5.i8);
      v1487.val[2] = (float32x4_t)vaddq_s32(vaddq_s32(vaddq_s32(vaddq_s32(vaddq_s32((int32x4_t)v1487.val[2], v1186), v1190), v1191), vshlq_n_s32(v1187, 1uLL)), v1189);
      v1487.val[3] = (float32x4_t)vaddq_s32(vaddq_s32(vaddq_s32(vaddq_s32(vaddq_s32((int32x4_t)v1487.val[3], v1190), v1191), vshlq_n_s32(v1188, 1uLL)), vshlq_n_s32(v1189, 2uLL)), (int32x4_t)vextq_s8((int8x16_t)v1487.val[3], v5, 4uLL));
      vst4q_f32(v1184, v1487);
      v1192 = (const float *)v1265;
      v1193 = (float *)v1265;
      v1488 = vld4q_f32(v1192);
      v1192 += 16;
      v983.i64[0] = *(_QWORD *)v1192;
      v5.i64[0] = *((_QWORD *)v1192 + 1);
      v1194 = vshlq_n_s32((int32x4_t)v1488.val[2], 2uLL);
      v1195 = vshlq_n_s32((int32x4_t)v1488.val[3], 2uLL);
      v1196 = (int32x4_t)vextq_s8((int8x16_t)v1488.val[0], v983, 4uLL);
      *(int32x2_t *)v983.i8 = vrev64_s32(*(int32x2_t *)v1192);
      v1197 = (int32x4_t)vextq_s8((int8x16_t)v1488.val[1], v983, 4uLL);
      v1198 = (int32x4_t)vextq_s8((int8x16_t)v1488.val[2], v5, 4uLL);
      v1199 = vshlq_n_s32(v1196, 2uLL);
      v1488.val[0] = (float32x4_t)vaddq_s32(vaddq_s32(vaddq_s32(vaddq_s32(vaddq_s32((int32x4_t)v1488.val[0], vshlq_n_s32((int32x4_t)v1488.val[1], 2uLL)), vshlq_n_s32((int32x4_t)v1488.val[2], 1uLL)), v1194), v1195), v1196);
      v1488.val[1] = (float32x4_t)vaddq_s32(vaddq_s32(vaddq_s32(vaddq_s32(vaddq_s32((int32x4_t)v1488.val[1], v1194), vshlq_n_s32((int32x4_t)v1488.val[3], 1uLL)), v1195), v1199), v1197);
      v1200 = vshlq_n_s32(v1197, 2uLL);
      *(int32x2_t *)v5.i8 = vrev64_s32(*(int32x2_t *)v5.i8);
      v1488.val[2] = (float32x4_t)vaddq_s32(vaddq_s32(vaddq_s32(vaddq_s32(vaddq_s32((int32x4_t)v1488.val[2], v1195), v1199), v1200), vshlq_n_s32(v1196, 1uLL)), v1198);
      v1488.val[3] = (float32x4_t)vaddq_s32(vaddq_s32(vaddq_s32(vaddq_s32(vaddq_s32((int32x4_t)v1488.val[3], v1199), v1200), vshlq_n_s32(v1197, 1uLL)), vshlq_n_s32(v1198, 2uLL)), (int32x4_t)vextq_s8((int8x16_t)v1488.val[3], v5, 4uLL));
      vst4q_f32(v1193, v1488);
      v1201 = *(_QWORD *)((char *)v1235 + (((v376 << 32) - 0x200000000) >> 29));
      v1202 = (float32x2_t *)(v1201 + 4 * v1233);
      v1203 = (float32x4_t *)(v1201 + 4 * v1233 + 32);
      v1204 = -12;
      do
      {
        v1205 = vcvtq_f32_s32(*v984);
        v1206 = vcvtq_f32_s32(v984[64]);
        v1207 = vcvtq_f32_s32(v984[32]);
        v1208 = vmulq_f32(v1205, v1206);
        v1209 = vaddq_f32(v1205, v1206);
        v1210 = vcvtq_f32_s32(v984[1]);
        v1211 = vcvtq_f32_s32(v984[65]);
        v1212 = vcvtq_f32_s32(v984[33]);
        v1213 = vmulq_f32(v1210, v1211);
        v1214 = vaddq_f32(v1210, v1211);
        v1215 = vsubq_f32(vsubq_f32(v1208, vmulq_f32(v1207, v1207)), vmulq_f32(vmulq_f32(v1209, v1209), v372));
        v1216 = vsubq_f32(v1213, vmulq_f32(v1212, v1212));
        v1217 = vcvtq_f32_s32(v984[2]);
        v1218 = vcvtq_f32_s32(v984[66]);
        v1219 = vcvtq_f32_s32(v984[34]);
        v1220 = vmulq_f32(v1217, v1218);
        v1221 = vaddq_f32(v1217, v1218);
        v1203[-2] = v1215;
        v1203[-1] = vsubq_f32(v1216, vmulq_f32(vmulq_f32(v1214, v1214), v372));
        *v1203 = vsubq_f32(vsubq_f32(v1220, vmulq_f32(v1219, v1219)), vmulq_f32(vmulq_f32(v1221, v1221), v372));
        v1203 += 3;
        v1204 += 12;
        v984 += 3;
      }
      while (v1204 < 0x6C);
      v1222 = vcvt_f32_s32(*(int32x2_t *)v1246.i8);
      v1223 = vcvt_f32_s32(*(int32x2_t *)v1266.i8);
      v1224 = vcvt_f32_s32(*(int32x2_t *)v1256.i8);
      v1225 = vmul_f32(v1222, v1223);
      v1226 = vadd_f32(v1222, v1223);
      v1227 = vcvt_f32_s32((int32x2_t)v1246.u64[1]);
      v1228 = vcvt_f32_s32((int32x2_t)v1266.u64[1]);
      v1229 = vcvt_f32_s32((int32x2_t)v1256.u64[1]);
      v1230 = vmul_f32(v1227, v1228);
      v1231 = vadd_f32(v1227, v1228);
      ++v376;
      v1202[60] = vsub_f32(vsub_f32(v1225, vmul_f32(v1224, v1224)), vmul_f32(vmul_f32(v1226, v1226), v373));
      v1202[61] = vsub_f32(vsub_f32(v1230, vmul_f32(v1229, v1229)), vmul_f32(vmul_f32(v1231, v1231), v373));
      ++v371;
      v375 += 160;
      ++v377;
    }
    while (v376 != v1234);
  }
  return result;
}

void sub_20FD80E0C(void **a1, int a2)
{
  char *v3;
  char *v4;
  int64_t v5;
  unint64_t v6;
  char *v8;
  int v9;
  char *v10;
  uint64_t v11;
  int v12;
  unint64_t v14;
  unint64_t v15;
  char *v16;
  char *v17;
  char *v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  int v23;
  char *v24;
  char *v25;

  v24 = 0;
  v25 = 0;
  v4 = (char *)*a1;
  v3 = (char *)a1[1];
  v5 = v3 - (_BYTE *)*a1;
  if (!v5)
  {
    v8 = 0;
    if (!v3)
      goto LABEL_31;
    goto LABEL_30;
  }
  v6 = 0xAAAAAAAAAAAAAAABLL * (v5 >> 4);
  if (v6 > 0x555555555555555)
    sub_20E867F44();
  v8 = (char *)operator new(v5);
  v24 = v8;
  v25 = &v8[48 * v6];
  v9 = a2 - 1;
  do
  {
    v11 = *(_QWORD *)v4;
    v12 = *((_DWORD *)v4 + 2);
    v21 = *(_OWORD *)(v4 + 12);
    v22 = *(_OWORD *)(v4 + 28);
    v23 = *((_DWORD *)v4 + 11);
    if (v12 >= 1 && v12 < v9)
    {
      if (v8 < v25)
      {
        *(_QWORD *)v8 = v11;
        *((_DWORD *)v8 + 2) = v12;
        *((_DWORD *)v8 + 11) = v23;
        *(_OWORD *)(v8 + 28) = v22;
        *(_OWORD *)(v8 + 12) = v21;
        v10 = v8 + 48;
      }
      else
      {
        v14 = 0xAAAAAAAAAAAAAAABLL * ((v8 - v24) >> 4) + 1;
        if (v14 > 0x555555555555555)
          sub_20E867F44();
        if (0x5555555555555556 * ((v25 - v24) >> 4) > v14)
          v14 = 0x5555555555555556 * ((v25 - v24) >> 4);
        if (0xAAAAAAAAAAAAAAABLL * ((v25 - v24) >> 4) >= 0x2AAAAAAAAAAAAAALL)
          v15 = 0x555555555555555;
        else
          v15 = v14;
        if (v15)
        {
          if (v15 > 0x555555555555555)
            sub_20E877A38();
          v16 = (char *)operator new(48 * v15);
        }
        else
        {
          v16 = 0;
        }
        v17 = &v16[16 * ((v8 - v24) >> 4)];
        *(_QWORD *)v17 = v11;
        *((_DWORD *)v17 + 2) = v12;
        *(_OWORD *)(v17 + 12) = v21;
        *(_OWORD *)(v17 + 28) = v22;
        *((_DWORD *)v17 + 11) = v23;
        v18 = v17;
        if (v8 != v24)
        {
          do
          {
            v19 = *((_OWORD *)v8 - 3);
            v20 = *((_OWORD *)v8 - 1);
            *((_OWORD *)v18 - 2) = *((_OWORD *)v8 - 2);
            *((_OWORD *)v18 - 1) = v20;
            *((_OWORD *)v18 - 3) = v19;
            v18 -= 48;
            v8 -= 48;
          }
          while (v8 != v24);
          v8 = v24;
        }
        v10 = v17 + 48;
        v24 = v18;
        v25 = &v16[48 * v15];
        if (v8)
          operator delete(v8);
      }
      v8 = v10;
    }
    v4 += 48;
  }
  while (v4 != v3);
  v3 = (char *)*a1;
  if (*a1)
  {
LABEL_30:
    a1[1] = v3;
    operator delete(v3);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
LABEL_31:
  *a1 = v24;
  a1[1] = v8;
  a1[2] = v25;
}

void sub_20FD81068(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL sub_20FD8108C(_BOOL8 result, int *a2, int *a3)
{
  int v5;
  int v6;

  v5 = result;
  if ((int)result <= 0)
  {
    result = sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/FeatureDetection/src/KeyEngineUtils.cpp", 54, (uint64_t)"dimension > 0", 13, (uint64_t)"Input dimension should be greater than 0", 40, (void (*)(void **))sub_21023DDB0);
    if (result)
LABEL_13:
      abort();
  }
  v6 = v5 / 5;
  *a2 = (v5 % 5) >> 1;
  *a3 = v5 / 5;
  if (*a2 < 0)
  {
    result = sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/FeatureDetection/src/KeyEngineUtils.cpp", 82, (uint64_t)"start >= 0", 10, (uint64_t)"Start should be greater than 0", 30, (void (*)(void **))sub_21023DDB0);
    if (result)
      goto LABEL_13;
    v6 = *a3;
    if (5 * *a3 + *a2 <= v5)
      goto LABEL_5;
  }
  else if (5 * v6 + *a2 <= v5)
  {
LABEL_5:
    if (v6 > 3)
      return result;
    goto LABEL_11;
  }
  result = sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/FeatureDetection/src/KeyEngineUtils.cpp", 84, (uint64_t)"(start + block_size * kNumRegionOfInterestBlocks <= dimension)", 62, (uint64_t)"End should be smaller than size", 31, (void (*)(void **))sub_21023DDB0);
  if (result)
    goto LABEL_13;
  if (*a3 > 3)
    return result;
LABEL_11:
  result = sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/FeatureDetection/src/KeyEngineUtils.cpp", 85, (uint64_t)"block_size >= kMinBlockSize", 27, (uint64_t)"Each block has to be at least 4 pixels big", 42, (void (*)(void **))sub_21023DDB0);
  if (result)
    goto LABEL_13;
  return result;
}

void sub_20FD81208(char **a1, unint64_t a2)
{
  char *v2;
  char *v3;
  char *v4;
  unint64_t v5;
  char *v6;
  float *v7;
  float v8;
  float v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  int v20;
  float v21;
  float v22;
  char *v23;
  char *v24;
  char *v25;
  float v26;
  unint64_t v27;
  float v28;
  float v29;
  __int128 v30;
  __int128 v31;
  float *v32;
  float v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  char *v38;
  float v39;
  float v40;
  char *v41;
  unint64_t v42;
  float v43;
  float v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  float v49;
  float v50;
  float v51;
  __int128 *v52;
  char *v53;
  float v54;
  float v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  char *v63;
  char *v64;
  float *v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  unint64_t v76;
  BOOL v77;
  unint64_t v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;

  v2 = *a1;
  v3 = a1[1];
  if (0xAAAAAAAAAAAAAAABLL * ((v3 - *a1) >> 4) > a2)
  {
    v4 = &v2[48 * a2];
    if (v4 != v3)
    {
      while (1)
      {
        v5 = 0xAAAAAAAAAAAAAAABLL * ((v3 - v2) >> 4);
        if (v5 < 2)
          goto LABEL_89;
        if (v5 == 3)
        {
          v52 = (__int128 *)(v2 + 48);
          v53 = v3 - 48;
          v54 = fabsf(*((float *)v2 + 23));
          v55 = fabsf(*((float *)v3 - 1));
          if (v54 <= fabsf(*((float *)v2 + 11)))
          {
            if (v55 > v54)
            {
              v68 = *v52;
              v107 = *((_OWORD *)v2 + 4);
              v69 = *((_OWORD *)v2 + 5);
              v70 = *(_OWORD *)v53;
              v71 = *((_OWORD *)v3 - 1);
              *((_OWORD *)v2 + 4) = *((_OWORD *)v3 - 2);
              *((_OWORD *)v2 + 5) = v71;
              *v52 = v70;
              *((_OWORD *)v3 - 2) = v107;
              *((_OWORD *)v3 - 1) = v69;
              *(_OWORD *)v53 = v68;
              if (fabsf(*((float *)v2 + 23)) > fabsf(*((float *)v2 + 11)))
              {
                v108 = *((_OWORD *)v2 + 1);
                v123 = *((_OWORD *)v2 + 2);
                v92 = *(_OWORD *)v2;
                v72 = *((_OWORD *)v2 + 4);
                *(_OWORD *)v2 = *v52;
                *((_OWORD *)v2 + 1) = v72;
                *((_OWORD *)v2 + 2) = *((_OWORD *)v2 + 5);
                *v52 = v92;
                *((_OWORD *)v2 + 4) = v108;
                *((_OWORD *)v2 + 5) = v123;
              }
            }
          }
          else
          {
            if (v55 <= v54)
            {
              v109 = *((_OWORD *)v2 + 1);
              v124 = *((_OWORD *)v2 + 2);
              v93 = *(_OWORD *)v2;
              v73 = *((_OWORD *)v2 + 4);
              *(_OWORD *)v2 = *v52;
              *((_OWORD *)v2 + 1) = v73;
              *((_OWORD *)v2 + 2) = *((_OWORD *)v2 + 5);
              *v52 = v93;
              *((_OWORD *)v2 + 4) = v109;
              *((_OWORD *)v2 + 5) = v124;
              if (fabsf(*((float *)v3 - 1)) <= fabsf(*((float *)v2 + 23)))
                goto LABEL_89;
              v58 = *v52;
              v59 = *((_OWORD *)v2 + 4);
              v60 = *((_OWORD *)v2 + 5);
              v74 = *(_OWORD *)v53;
              v75 = *((_OWORD *)v3 - 1);
              *((_OWORD *)v2 + 4) = *((_OWORD *)v3 - 2);
              *((_OWORD *)v2 + 5) = v75;
              *v52 = v74;
            }
            else
            {
              v104 = *((_OWORD *)v2 + 1);
              v120 = *((_OWORD *)v2 + 2);
              v89 = *(_OWORD *)v2;
              v56 = *(_OWORD *)v53;
              v57 = *((_OWORD *)v3 - 1);
              *((_OWORD *)v2 + 1) = *((_OWORD *)v3 - 2);
              *((_OWORD *)v2 + 2) = v57;
              *(_OWORD *)v2 = v56;
              v58 = v89;
              v59 = v104;
              v60 = v120;
            }
            *((_OWORD *)v3 - 2) = v59;
            *((_OWORD *)v3 - 1) = v60;
            *(_OWORD *)v53 = v58;
          }
          goto LABEL_89;
        }
        if (v5 == 2)
        {
          if (fabsf(*((float *)v3 - 1)) > fabsf(*((float *)v2 + 11)))
          {
            v105 = *((_OWORD *)v2 + 1);
            v121 = *((_OWORD *)v2 + 2);
            v90 = *(_OWORD *)v2;
            v61 = *((_OWORD *)v3 - 3);
            v62 = *((_OWORD *)v3 - 1);
            *((_OWORD *)v2 + 1) = *((_OWORD *)v3 - 2);
            *((_OWORD *)v2 + 2) = v62;
            *(_OWORD *)v2 = v61;
            *((_OWORD *)v3 - 2) = v105;
            *((_OWORD *)v3 - 1) = v121;
            *((_OWORD *)v3 - 3) = v90;
          }
          goto LABEL_89;
        }
        if (v3 - v2 <= 383)
        {
          while (v2 != v3 - 48)
          {
            v63 = v2;
            v2 += 48;
            if (v63 != v3 && v2 != v3)
            {
              v64 = v2;
              v65 = (float *)v63;
              do
              {
                if (fabsf(*((float *)v64 + 11)) > fabsf(v65[11]))
                  v65 = (float *)v64;
                v64 += 48;
              }
              while (v64 != v3);
              if (v65 != (float *)v63)
              {
                v106 = *((_OWORD *)v63 + 1);
                v122 = *((_OWORD *)v63 + 2);
                v91 = *(_OWORD *)v63;
                v66 = *(_OWORD *)v65;
                v67 = *((_OWORD *)v65 + 2);
                *((_OWORD *)v63 + 1) = *((_OWORD *)v65 + 1);
                *((_OWORD *)v63 + 2) = v67;
                *(_OWORD *)v63 = v66;
                *((_OWORD *)v65 + 1) = v106;
                *((_OWORD *)v65 + 2) = v122;
                *(_OWORD *)v65 = v91;
              }
            }
          }
          goto LABEL_89;
        }
        v6 = &v2[48 * (v5 >> 1)];
        v7 = (float *)(v3 - 48);
        v8 = fabsf(*((float *)v6 + 11));
        v9 = fabsf(*((float *)v3 - 1));
        if (v8 > fabsf(*((float *)v2 + 11)))
          break;
        if (v9 > v8)
        {
          v95 = *((_OWORD *)v6 + 1);
          v111 = *((_OWORD *)v6 + 2);
          v80 = *(_OWORD *)v6;
          v12 = *(_OWORD *)v7;
          v13 = *((_OWORD *)v3 - 1);
          *((_OWORD *)v6 + 1) = *((_OWORD *)v3 - 2);
          *((_OWORD *)v6 + 2) = v13;
          *(_OWORD *)v6 = v12;
          *((_OWORD *)v3 - 2) = v95;
          *((_OWORD *)v3 - 1) = v111;
          *(_OWORD *)v7 = v80;
          if (fabsf(*((float *)v6 + 11)) > fabsf(*((float *)v2 + 11)))
          {
            v96 = *((_OWORD *)v2 + 1);
            v112 = *((_OWORD *)v2 + 2);
            v81 = *(_OWORD *)v2;
            v14 = *(_OWORD *)v6;
            v15 = *((_OWORD *)v6 + 2);
            *((_OWORD *)v2 + 1) = *((_OWORD *)v6 + 1);
            *((_OWORD *)v2 + 2) = v15;
            *(_OWORD *)v2 = v14;
            *((_OWORD *)v6 + 1) = v96;
            *((_OWORD *)v6 + 2) = v112;
            *(_OWORD *)v6 = v81;
            goto LABEL_15;
          }
          goto LABEL_17;
        }
        v20 = 0;
        v21 = fabsf(*((float *)v2 + 11));
        v22 = fabsf(*((float *)v6 + 11));
        if (v21 <= v22)
        {
LABEL_29:
          v32 = (float *)(v3 - 48);
          while (1)
          {
            v23 = (char *)(v32 - 12);
            if (v32 - 12 == (float *)v2)
              break;
            v33 = fabsf(*(v32 - 1));
            v32 -= 12;
            if (v33 > v22)
            {
              v100 = *((_OWORD *)v2 + 1);
              v116 = *((_OWORD *)v2 + 2);
              v85 = *(_OWORD *)v2;
              v34 = *(_OWORD *)v23;
              v35 = *((_OWORD *)v23 + 2);
              *((_OWORD *)v2 + 1) = *((_OWORD *)v23 + 1);
              *((_OWORD *)v2 + 2) = v35;
              *(_OWORD *)v2 = v34;
              *((_OWORD *)v23 + 1) = v100;
              *((_OWORD *)v23 + 2) = v116;
              *(_OWORD *)v23 = v85;
              ++v20;
              v24 = v2 + 48;
              if (v2 + 48 < v23)
                goto LABEL_19;
              goto LABEL_33;
            }
          }
          v41 = v2 + 48;
          if (v21 <= fabsf(*((float *)v3 - 1)))
          {
            if (v41 == (char *)v7)
              goto LABEL_89;
            while (v21 <= fabsf(*((float *)v41 + 11)))
            {
              v41 += 48;
              if (v41 == (char *)v7)
                goto LABEL_89;
            }
            v102 = *((_OWORD *)v41 + 1);
            v118 = *((_OWORD *)v41 + 2);
            v87 = *(_OWORD *)v41;
            v45 = *(_OWORD *)v7;
            v46 = *((_OWORD *)v3 - 1);
            *((_OWORD *)v41 + 1) = *((_OWORD *)v3 - 2);
            *((_OWORD *)v41 + 2) = v46;
            *(_OWORD *)v41 = v45;
            v41 += 48;
            *((_OWORD *)v3 - 2) = v102;
            *((_OWORD *)v3 - 1) = v118;
            *(_OWORD *)v7 = v87;
          }
          if (v41 == (char *)v7)
            goto LABEL_89;
          while (1)
          {
            v49 = fabsf(*((float *)v2 + 11));
            v38 = v41 - 48;
            do
            {
              v50 = fabsf(*((float *)v38 + 23));
              v38 += 48;
            }
            while (v49 <= v50);
            v41 = v38 + 48;
            do
            {
              v51 = *(v7 - 1);
              v7 -= 12;
            }
            while (v49 > fabsf(v51));
            if (v38 >= (char *)v7)
              break;
            v103 = *((_OWORD *)v38 + 1);
            v119 = *((_OWORD *)v38 + 2);
            v88 = *(_OWORD *)v38;
            v47 = *(_OWORD *)v7;
            v48 = *((_OWORD *)v7 + 2);
            *((_OWORD *)v38 + 1) = *((_OWORD *)v7 + 1);
            *((_OWORD *)v38 + 2) = v48;
            *(_OWORD *)v38 = v47;
            *((_OWORD *)v7 + 1) = v103;
            *((_OWORD *)v7 + 2) = v119;
            *(_OWORD *)v7 = v88;
          }
          if (v38 > v4)
            goto LABEL_89;
          goto LABEL_65;
        }
LABEL_18:
        v23 = v3 - 48;
        v24 = v2 + 48;
        if (v2 + 48 >= v3 - 48)
        {
LABEL_33:
          v27 = (unint64_t)v24;
        }
        else
        {
LABEL_19:
          v25 = v24;
          while (1)
          {
            v26 = fabsf(*((float *)v6 + 11));
            v27 = (unint64_t)(v25 - 48);
            do
            {
              v28 = fabsf(*(float *)(v27 + 92));
              v27 += 48;
            }
            while (v28 > v26);
            v25 = (char *)(v27 + 48);
            do
            {
              v29 = *((float *)v23 - 1);
              v23 -= 48;
            }
            while (fabsf(v29) <= v26);
            if (v27 >= (unint64_t)v23)
              break;
            v99 = *(_OWORD *)(v27 + 16);
            v115 = *(_OWORD *)(v27 + 32);
            v84 = *(_OWORD *)v27;
            v30 = *(_OWORD *)v23;
            v31 = *((_OWORD *)v23 + 2);
            *(_OWORD *)(v27 + 16) = *((_OWORD *)v23 + 1);
            *(_OWORD *)(v27 + 32) = v31;
            *(_OWORD *)v27 = v30;
            *((_OWORD *)v23 + 1) = v99;
            *((_OWORD *)v23 + 2) = v115;
            *(_OWORD *)v23 = v84;
            ++v20;
            if ((char *)v27 == v6)
              v6 = v23;
          }
        }
        if ((char *)v27 != v6 && fabsf(*((float *)v6 + 11)) > fabsf(*(float *)(v27 + 44)))
        {
          v101 = *(_OWORD *)(v27 + 16);
          v117 = *(_OWORD *)(v27 + 32);
          v86 = *(_OWORD *)v27;
          v36 = *(_OWORD *)v6;
          v37 = *((_OWORD *)v6 + 2);
          *(_OWORD *)(v27 + 16) = *((_OWORD *)v6 + 1);
          *(_OWORD *)(v27 + 32) = v37;
          *(_OWORD *)v27 = v36;
          *((_OWORD *)v6 + 1) = v101;
          *((_OWORD *)v6 + 2) = v117;
          *(_OWORD *)v6 = v86;
          ++v20;
        }
        if ((char *)v27 == v4)
          goto LABEL_89;
        if (!v20)
        {
          if (v27 <= (unint64_t)v4)
          {
            v42 = v27 + 48;
            while ((char *)v42 != v3)
            {
              v43 = fabsf(*(float *)(v42 + 44));
              v44 = fabsf(*(float *)(v42 - 4));
              v42 += 48;
              if (v43 > v44)
                goto LABEL_39;
            }
          }
          else
          {
            while (v24 != (char *)v27)
            {
              v39 = fabsf(*((float *)v24 + 11));
              v40 = fabsf(*((float *)v24 - 1));
              v24 += 48;
              if (v39 > v40)
                goto LABEL_39;
            }
          }
          goto LABEL_89;
        }
LABEL_39:
        if (v27 <= (unint64_t)v4)
        {
          v38 = (char *)(v27 + 48);
        }
        else
        {
          v3 = (char *)v27;
          v38 = v2;
        }
LABEL_65:
        v2 = v38;
        if (v3 == v4)
          goto LABEL_89;
      }
      if (v9 <= v8)
      {
        v97 = *((_OWORD *)v2 + 1);
        v113 = *((_OWORD *)v2 + 2);
        v82 = *(_OWORD *)v2;
        v16 = *(_OWORD *)v6;
        v17 = *((_OWORD *)v6 + 2);
        *((_OWORD *)v2 + 1) = *((_OWORD *)v6 + 1);
        *((_OWORD *)v2 + 2) = v17;
        *(_OWORD *)v2 = v16;
        *((_OWORD *)v6 + 1) = v97;
        *((_OWORD *)v6 + 2) = v113;
        *(_OWORD *)v6 = v82;
        if (fabsf(*((float *)v3 - 1)) > fabsf(*((float *)v6 + 11)))
        {
          v98 = *((_OWORD *)v6 + 1);
          v114 = *((_OWORD *)v6 + 2);
          v83 = *(_OWORD *)v6;
          v18 = *(_OWORD *)v7;
          v19 = *((_OWORD *)v3 - 1);
          *((_OWORD *)v6 + 1) = *((_OWORD *)v3 - 2);
          *((_OWORD *)v6 + 2) = v19;
          *(_OWORD *)v6 = v18;
          *((_OWORD *)v3 - 2) = v98;
          *((_OWORD *)v3 - 1) = v114;
          *(_OWORD *)v7 = v83;
LABEL_15:
          v20 = 2;
          v21 = fabsf(*((float *)v2 + 11));
          v22 = fabsf(*((float *)v6 + 11));
          if (v21 <= v22)
            goto LABEL_29;
          goto LABEL_18;
        }
      }
      else
      {
        v94 = *((_OWORD *)v2 + 1);
        v110 = *((_OWORD *)v2 + 2);
        v79 = *(_OWORD *)v2;
        v10 = *(_OWORD *)v7;
        v11 = *((_OWORD *)v3 - 1);
        *((_OWORD *)v2 + 1) = *((_OWORD *)v3 - 2);
        *((_OWORD *)v2 + 2) = v11;
        *(_OWORD *)v2 = v10;
        *((_OWORD *)v3 - 2) = v94;
        *((_OWORD *)v3 - 1) = v110;
        *(_OWORD *)v7 = v79;
      }
LABEL_17:
      v20 = 1;
      v21 = fabsf(*((float *)v2 + 11));
      v22 = fabsf(*((float *)v6 + 11));
      if (v21 <= v22)
        goto LABEL_29;
      goto LABEL_18;
    }
LABEL_89:
    v76 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 4);
    v77 = a2 >= v76;
    v78 = a2 - v76;
    if (v78 != 0 && v77)
    {
      sub_20FD6B160(a1, v78);
    }
    else if (!v77)
    {
      a1[1] = &(*a1)[48 * a2];
    }
  }
}

void sub_20FD81964(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  float v10;
  float v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  int *v15;
  uint64_t v16;
  int v17;
  float v18;
  float v19;
  float v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  float v27;
  char *v28;
  int v29;
  float v30;
  float v31;
  int v32;
  void **v33;
  char v34;
  float v35;
  float v36;
  float *v37;
  float *v38;
  float *v39;
  float *v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  char *v45;
  char *v46;
  char *v47;
  __int128 v48;
  __int128 v49;
  __int16 v50;
  void **v51;
  char v52;
  float v53;
  float v54;
  char *v55;
  char *v56;
  char *v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t v61;
  char *v62;
  char *v63;
  char *v64;
  __int128 v65;
  __int128 v66;
  char *v67;
  char *v68;
  unint64_t v69;
  char *v70;
  __int128 *v71;
  __int128 *v72;
  char *v73;
  __int128 v74;
  __int128 v75;
  char *v76;
  unint64_t v77;
  unint64_t v78;
  unint64_t v79;
  char *v80;
  char *v81;
  __int128 v82;
  char *v83;
  __int128 v84;
  __int128 v85;
  char *v86;
  __int128 **v87;
  __int128 *v88;
  __int128 *v89;
  char *v90;
  __int128 v91;
  __int128 v92;
  char *v93;
  unint64_t v94;
  unint64_t v95;
  unint64_t v96;
  char *v97;
  char *v98;
  __int128 v99;
  char *v100;
  __int128 v101;
  __int128 v102;
  char *v103;
  char *v104;
  _QWORD *v105;
  char *v106;
  void *v107;
  void *v108;
  char *v109;
  void *v110;
  void *v111;
  char *v112;
  char *v113;
  unint64_t v114;
  double v115;
  unint64_t v116;
  unint64_t v117;
  uint64_t v118;
  _OWORD *v119;
  _OWORD *v120;
  char *v121;
  char *v122;
  __int128 v123;
  __int128 v124;
  unint64_t v125;
  char *v126;
  unint64_t v127;
  char *v128;
  char *v129;
  char *v130;
  unint64_t v131;
  float *v132;
  float *v133;
  float v134;
  float v135;
  __int128 v136;
  __int128 v137;
  __int128 v138;
  __int128 v139;
  __int128 v140;
  __int128 v141;
  __int128 v142;
  __int128 v143;
  __int128 v144;
  __int128 v145;
  __int128 v146;
  __int128 v147;
  __int128 v148;
  __int128 v149;
  __int128 v150;
  __int128 v151;
  __int128 v152;
  __int128 v153;
  __int128 v154;
  __int128 v155;
  __int128 v156;
  __int128 v157;
  __int128 v158;
  __int128 v159;
  __int128 v160;
  __int128 v161;
  __int128 v162;
  __int128 v163;
  __int128 v164;
  __int128 v165;
  int v166;
  float v167;
  float v168;
  float *v169;
  char *v170;
  unint64_t v171;
  float v172;
  unint64_t v173;
  float v174;
  float v175;
  __int128 v176;
  __int128 v177;
  __int128 v178;
  __int128 v179;
  __int128 v180;
  __int128 v181;
  char *v182;
  float v183;
  __int128 v184;
  __int128 v185;
  __int128 v186;
  __int128 v187;
  __int128 v188;
  __int128 v189;
  __int128 v190;
  __int128 v191;
  __int128 v192;
  __int128 v193;
  __int128 v194;
  __int128 v195;
  unint64_t v196;
  float v197;
  float v198;
  char *v199;
  unint64_t v200;
  float v201;
  float v202;
  __int128 v203;
  __int128 v204;
  __int128 v205;
  __int128 v206;
  __int128 v207;
  __int128 v208;
  float v209;
  float v210;
  float v211;
  __int128 v212;
  __int128 v213;
  __int128 v214;
  __int128 v215;
  __int128 v216;
  __int128 v217;
  __int128 *v218;
  char *v219;
  float v220;
  float v221;
  __int128 v222;
  __int128 v223;
  __int128 v224;
  __int128 v225;
  __int128 v226;
  __int128 v227;
  __int128 v228;
  __int128 v229;
  __int128 v230;
  __int128 v231;
  __int128 v232;
  __int128 v233;
  __int128 v234;
  char *v235;
  char *v236;
  float *v237;
  __int128 v238;
  __int128 v239;
  __int128 v240;
  __int128 v241;
  __int128 v242;
  __int128 v243;
  __int128 v244;
  __int128 v245;
  __int128 v246;
  __int128 v247;
  __int128 v248;
  __int128 v249;
  __int128 v250;
  __int128 v251;
  __int128 v252;
  __int128 v253;
  __int128 v254;
  __int128 v255;
  __int128 v256;
  __int128 v257;
  __int128 v258;
  unint64_t v259;
  char *v260;
  char *v261;
  unint64_t v262;
  float *v263;
  float *v264;
  float v265;
  float v266;
  __int128 v267;
  __int128 v268;
  __int128 v269;
  __int128 v270;
  __int128 v271;
  __int128 v272;
  __int128 v273;
  __int128 v274;
  __int128 v275;
  __int128 v276;
  __int128 v277;
  __int128 v278;
  __int128 v279;
  __int128 v280;
  __int128 v281;
  __int128 v282;
  __int128 v283;
  __int128 v284;
  __int128 v285;
  __int128 v286;
  __int128 v287;
  __int128 v288;
  __int128 v289;
  __int128 v290;
  __int128 v291;
  __int128 v292;
  __int128 v293;
  __int128 v294;
  __int128 v295;
  __int128 v296;
  int v297;
  float v298;
  float v299;
  float *v300;
  char *v301;
  unint64_t v302;
  float v303;
  unint64_t v304;
  float v305;
  float v306;
  __int128 v307;
  __int128 v308;
  __int128 v309;
  __int128 v310;
  __int128 v311;
  __int128 v312;
  char *v313;
  float v314;
  __int128 v315;
  __int128 v316;
  __int128 v317;
  __int128 v318;
  __int128 v319;
  __int128 v320;
  __int128 v321;
  __int128 v322;
  __int128 v323;
  __int128 v324;
  __int128 v325;
  __int128 v326;
  unint64_t v327;
  float v328;
  float v329;
  char *v330;
  unint64_t v331;
  float v332;
  float v333;
  __int128 v334;
  __int128 v335;
  __int128 v336;
  __int128 v337;
  __int128 v338;
  __int128 v339;
  __int128 v340;
  __int128 v341;
  __int128 v342;
  __int128 v343;
  __int128 v344;
  __int128 v345;
  float v346;
  float v347;
  float v348;
  __int128 *v349;
  char *v350;
  float v351;
  float v352;
  __int128 v353;
  __int128 v354;
  __int128 v355;
  __int128 v356;
  __int128 v357;
  __int128 v358;
  __int128 v359;
  __int128 v360;
  __int128 v361;
  __int128 v362;
  __int128 v363;
  __int128 v364;
  __int128 v365;
  char *v366;
  char *v367;
  float *v368;
  __int128 v369;
  __int128 v370;
  __int128 v371;
  __int128 v372;
  __int128 v373;
  __int128 v374;
  __int128 v375;
  __int128 v376;
  __int128 v377;
  __int128 v378;
  __int128 v379;
  __int128 v380;
  __int128 v381;
  __int128 v382;
  __int128 v383;
  __int128 v384;
  __int128 v385;
  __int128 v386;
  __int128 v387;
  __int128 v388;
  __int128 v389;
  unint64_t v390;
  unint64_t v392;
  int *v396;
  int *v397;
  _QWORD *v398;
  _QWORD *v399;
  uint64_t v400;
  uint64_t v401;
  uint64_t v402;
  int v404;
  int v405;
  uint64_t v406;
  uint64_t v407;
  uint64_t v408;
  uint64_t v409;
  uint64_t v410;
  void *__p;
  _QWORD *v412;
  uint64_t v413;
  uint64_t v414;
  void *v415;
  __int128 v416;
  void *v417[3];
  void *v418[3];
  char *v419;
  __int128 v420;
  __int128 v421;
  __int128 v422;
  __int128 v423;

  v5 = 0x8E38E38E38E38E39 * ((uint64_t)(*(_QWORD *)(a3 + 56) - *(_QWORD *)(a3 + 48)) >> 4);
  if (v5 >= 2)
  {
    v6 = a1;
    v7 = 0;
    v8 = v5 >> 1;
    if (v8 <= 1)
      v8 = 1;
    v392 = v8;
    do
    {
      memset(v418, 0, sizeof(v418));
      memset(v417, 0, sizeof(v417));
      v415 = 0;
      v416 = 0uLL;
      v9 = *(_QWORD *)(a3 + 48);
      v10 = *(float *)(a2 + 4);
      v11 = *(float *)(a2 + 104);
      v414 = 0;
      v12 = v9 + 288 * v7;
      v13 = *(_DWORD *)(v12 + 32);
      v397 = (int *)(v12 + 32);
      v15 = (int *)(v12 + 48);
      v14 = *(_QWORD *)(v12 + 48);
      LODWORD(v421) = 0;
      LODWORD(v419) = 0;
      sub_20FD8108C(v13, (int *)&v414 + 1, (int *)&v421);
      sub_20FD8108C(v14, (int *)&v414, (int *)&v419);
      LODWORD(v16) = v414;
      if (v414 <= 1)
        LODWORD(v16) = 1;
      v396 = v15;
      v17 = 5 * (_DWORD)v419 + v414 - (5 * (_DWORD)v419 + (_DWORD)v414 == *v15);
      if ((int)v16 < v17)
      {
        v18 = (float)(1 << v7);
        v19 = (float)(v10 * v11) * v18;
        v20 = v10 * v18;
        v21 = HIDWORD(v414);
        if (HIDWORD(v414) <= 1)
          v21 = 1;
        v404 = (2 * v7) | 1;
        v405 = 2 * v7;
        v401 = v21;
        v410 = (int)(5 * v421 + HIDWORD(v414) - (5 * (_DWORD)v421 + HIDWORD(v414) == *v397));
        v398 = (_QWORD *)(v9 + 144 * ((2 * v7) | 1) + 120);
        v399 = (_QWORD *)(v9 + 288 * v7 + 120);
        v16 = (int)v16;
        v400 = v17;
        v406 = v7;
        while (1)
        {
          v402 = v16 + 1;
          if ((int)v401 < (int)v410)
            break;
LABEL_13:
          v16 = v402;
          if (v402 == v400)
            goto LABEL_66;
        }
        v22 = 8 * v16 - 8;
        v23 = *(_QWORD *)(*v399 + 8 * v16);
        v24 = v401;
        v408 = *(_QWORD *)(*v399 + 8 * v402);
        v409 = *(_QWORD *)(*v399 + v22);
        v407 = *(_QWORD *)(*v398 + v22);
        v25 = *(_QWORD *)(*v398 + 8 * v16);
        v26 = *(_QWORD *)(*v398 + 8 * v402);
        v27 = (float)(int)v16;
        while (1)
        {
          v29 = *(__int16 *)(v23 + 2 * v24);
          LOBYTE(v421) = 0;
          v31 = *(float *)(v6 + 8);
          v30 = *(float *)(v6 + 12);
          v32 = *(unsigned __int8 *)(v6 + 1);
          if (!sub_20FD8348C(v29, v409, v23, v408, v24, &v421, v32, v30, v31))
            goto LABEL_41;
          if (*(_BYTE *)(v6 + 2))
            v33 = v418;
          else
            v33 = &v415;
          v34 = v421;
          v35 = (float)(int)v24;
          v36 = (float)(__int16)v29;
          v38 = (float *)v33[1];
          v37 = (float *)v33[2];
          if (v38 >= v37)
          {
            v40 = (float *)*v33;
            v41 = 0xAAAAAAAAAAAAAAABLL * (((char *)v38 - (_BYTE *)*v33) >> 4);
            v42 = v41 + 1;
            if (v41 + 1 > 0x555555555555555)
              goto LABEL_334;
            v43 = 0xAAAAAAAAAAAAAAABLL * (((char *)v37 - (char *)v40) >> 4);
            if (2 * v43 > v42)
              v42 = 2 * v43;
            if (v43 >= 0x2AAAAAAAAAAAAAALL)
              v44 = 0x555555555555555;
            else
              v44 = v42;
            if (v44)
            {
              if (v44 > 0x555555555555555)
                goto LABEL_337;
              v45 = (char *)operator new(48 * v44);
            }
            else
            {
              v45 = 0;
            }
            v46 = &v45[48 * v41];
            *(float *)v46 = v35;
            *((float *)v46 + 1) = v27;
            *((_DWORD *)v46 + 2) = v405;
            *((float *)v46 + 3) = v20;
            *((_QWORD *)v46 + 2) = 0;
            *((_DWORD *)v46 + 6) = 0;
            v46[28] = v34;
            v7 = v406;
            *((_DWORD *)v46 + 8) = v406;
            *(_QWORD *)(v46 + 36) = 0;
            *((float *)v46 + 11) = v36;
            v47 = v46;
            if (v38 == v40)
            {
              v6 = a1;
              v39 = (float *)(v46 + 48);
              *v33 = v46;
              v33[1] = v46 + 48;
              v33[2] = &v45[48 * v44];
              if (!v38)
                goto LABEL_40;
            }
            else
            {
              v6 = a1;
              do
              {
                v48 = *((_OWORD *)v38 - 3);
                v49 = *((_OWORD *)v38 - 1);
                *((_OWORD *)v47 - 2) = *((_OWORD *)v38 - 2);
                *((_OWORD *)v47 - 1) = v49;
                *((_OWORD *)v47 - 3) = v48;
                v47 -= 48;
                v38 -= 12;
              }
              while (v38 != v40);
              v38 = v40;
              v39 = (float *)(v46 + 48);
              *v33 = v47;
              v33[1] = v46 + 48;
              v33[2] = &v45[48 * v44];
              if (!v38)
                goto LABEL_40;
            }
            operator delete(v38);
          }
          else
          {
            *v38 = v35;
            v38[1] = v27;
            *((_DWORD *)v38 + 2) = v405;
            v38[3] = v20;
            *((_QWORD *)v38 + 2) = 0;
            v38[6] = 0.0;
            *((_BYTE *)v38 + 28) = v34;
            v7 = v406;
            *((_DWORD *)v38 + 8) = v406;
            *(_QWORD *)(v38 + 9) = 0;
            v39 = v38 + 12;
            v38[11] = v36;
          }
LABEL_40:
          v33[1] = v39;
          v31 = *(float *)(v6 + 8);
          v30 = *(float *)(v6 + 12);
          v32 = *(unsigned __int8 *)(v6 + 1);
LABEL_41:
          v50 = *(_WORD *)(v25 + 2 * v24);
          if (!sub_20FD8348C(v50, v407, v25, v26, v24, &v421, v32 != 0, v30, v31))
            goto LABEL_18;
          if (*(_BYTE *)(v6 + 2))
            v51 = v417;
          else
            v51 = &v415;
          v52 = v421;
          v53 = (float)(int)v24;
          v54 = (float)v50;
          v56 = (char *)v51[1];
          v55 = (char *)v51[2];
          if (v56 < v55)
          {
            *(float *)v56 = v53;
            *((float *)v56 + 1) = v27;
            *((_DWORD *)v56 + 2) = v404;
            *((float *)v56 + 3) = v19;
            *((_QWORD *)v56 + 2) = 0;
            *((_DWORD *)v56 + 6) = 0;
            v56[28] = v52;
            v7 = v406;
            *((_DWORD *)v56 + 8) = v406;
            *(_QWORD *)(v56 + 36) = 1;
            v28 = v56 + 48;
            *((float *)v56 + 11) = v54;
          }
          else
          {
            v57 = (char *)*v51;
            v58 = 0xAAAAAAAAAAAAAAABLL * ((v56 - (_BYTE *)*v51) >> 4);
            v59 = v58 + 1;
            if (v58 + 1 > 0x555555555555555)
LABEL_334:
              sub_20E867F44();
            v60 = 0xAAAAAAAAAAAAAAABLL * ((v55 - v57) >> 4);
            if (2 * v60 > v59)
              v59 = 2 * v60;
            if (v60 >= 0x2AAAAAAAAAAAAAALL)
              v61 = 0x555555555555555;
            else
              v61 = v59;
            if (v61)
            {
              if (v61 > 0x555555555555555)
LABEL_337:
                sub_20E877A38();
              v62 = (char *)operator new(48 * v61);
            }
            else
            {
              v62 = 0;
            }
            v63 = &v62[48 * v58];
            *(float *)v63 = v53;
            *((float *)v63 + 1) = v27;
            *((_DWORD *)v63 + 2) = v404;
            *((float *)v63 + 3) = v19;
            *((_QWORD *)v63 + 2) = 0;
            *((_DWORD *)v63 + 6) = 0;
            v63[28] = v52;
            v7 = v406;
            *((_DWORD *)v63 + 8) = v406;
            *(_QWORD *)(v63 + 36) = 1;
            *((float *)v63 + 11) = v54;
            v64 = v63;
            if (v56 == v57)
            {
              v6 = a1;
              v28 = v63 + 48;
              *v51 = v63;
              v51[1] = v63 + 48;
              v51[2] = &v62[48 * v61];
              if (!v56)
                goto LABEL_17;
            }
            else
            {
              v6 = a1;
              do
              {
                v65 = *((_OWORD *)v56 - 3);
                v66 = *((_OWORD *)v56 - 1);
                *((_OWORD *)v64 - 2) = *((_OWORD *)v56 - 2);
                *((_OWORD *)v64 - 1) = v66;
                *((_OWORD *)v64 - 3) = v65;
                v64 -= 48;
                v56 -= 48;
              }
              while (v56 != v57);
              v56 = v57;
              v28 = v63 + 48;
              *v51 = v64;
              v51[1] = v63 + 48;
              v51[2] = &v62[48 * v61];
              if (!v56)
                goto LABEL_17;
            }
            operator delete(v56);
          }
LABEL_17:
          v51[1] = v28;
LABEL_18:
          if (++v24 == v410)
            goto LABEL_13;
        }
      }
LABEL_66:
      if (*(_BYTE *)(v6 + 2))
      {
        v419 = 0;
        v420 = 0uLL;
        __p = 0;
        v412 = 0;
        v413 = 0;
        sub_20FD836E4(v6, *v397, *v396, (uint64_t *)v418, (uint64_t)&v419);
        sub_20FD836E4(v6, *v397, *v396, (uint64_t *)v417, (uint64_t)&__p);
        v68 = v419;
        v67 = (char *)v420;
        if ((char *)v420 == v419)
        {
          v68 = (char *)v420;
        }
        else
        {
          v69 = 0;
          do
          {
            v70 = &v68[24 * v69];
            v71 = *(__int128 **)v70;
            v72 = (__int128 *)*((_QWORD *)v70 + 1);
            if (*(__int128 **)v70 != v72)
            {
              v73 = (char *)v416;
              do
              {
                while (1)
                {
                  v421 = *v71;
                  v422 = v71[1];
                  v423 = v71[2];
                  if ((unint64_t)v73 >= *((_QWORD *)&v416 + 1))
                    break;
                  v74 = *v71;
                  v75 = v71[2];
                  *((_OWORD *)v73 + 1) = v71[1];
                  *((_OWORD *)v73 + 2) = v75;
                  *(_OWORD *)v73 = v74;
                  *(_QWORD *)&v416 = v73 + 48;
                  v71 += 3;
                  v73 += 48;
                  if (v71 == v72)
                    goto LABEL_90;
                }
                v76 = (char *)v415;
                v77 = 0xAAAAAAAAAAAAAAABLL * ((v73 - (_BYTE *)v415) >> 4);
                v78 = v77 + 1;
                if (v77 + 1 > 0x555555555555555)
                  sub_20E867F44();
                if (0x5555555555555556 * ((uint64_t)(*((_QWORD *)&v416 + 1) - (_QWORD)v415) >> 4) > v78)
                  v78 = 0x5555555555555556 * ((uint64_t)(*((_QWORD *)&v416 + 1) - (_QWORD)v415) >> 4);
                if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)&v416 + 1) - (_QWORD)v415) >> 4) >= 0x2AAAAAAAAAAAAAALL)
                  v79 = 0x555555555555555;
                else
                  v79 = v78;
                if (v79)
                {
                  if (v79 > 0x555555555555555)
                    sub_20E877A38();
                  v80 = (char *)operator new(48 * v79);
                }
                else
                {
                  v80 = 0;
                }
                v81 = &v80[48 * v77];
                v82 = v422;
                *(_OWORD *)v81 = v421;
                *((_OWORD *)v81 + 1) = v82;
                *((_OWORD *)v81 + 2) = v423;
                v83 = v81;
                if (v73 != v76)
                {
                  do
                  {
                    v84 = *((_OWORD *)v73 - 3);
                    v85 = *((_OWORD *)v73 - 1);
                    *((_OWORD *)v83 - 2) = *((_OWORD *)v73 - 2);
                    *((_OWORD *)v83 - 1) = v85;
                    *((_OWORD *)v83 - 3) = v84;
                    v83 -= 48;
                    v73 -= 48;
                  }
                  while (v73 != v76);
                  v73 = v76;
                }
                v86 = v81 + 48;
                v415 = v83;
                *(_QWORD *)&v416 = v81 + 48;
                *((_QWORD *)&v416 + 1) = &v80[48 * v79];
                if (v73)
                  operator delete(v73);
                *(_QWORD *)&v416 = v86;
                v71 += 3;
                v73 = v86;
              }
              while (v71 != v72);
            }
LABEL_90:
            v87 = (__int128 **)((char *)__p + 24 * v69);
            v88 = *v87;
            v89 = v87[1];
            if (*v87 != v89)
            {
              v90 = (char *)v416;
              do
              {
                while (1)
                {
                  v421 = *v88;
                  v422 = v88[1];
                  v423 = v88[2];
                  if ((unint64_t)v90 >= *((_QWORD *)&v416 + 1))
                    break;
                  v91 = *v88;
                  v92 = v88[2];
                  *((_OWORD *)v90 + 1) = v88[1];
                  *((_OWORD *)v90 + 2) = v92;
                  *(_OWORD *)v90 = v91;
                  *(_QWORD *)&v416 = v90 + 48;
                  v88 += 3;
                  v90 += 48;
                  if (v88 == v89)
                    goto LABEL_69;
                }
                v93 = (char *)v415;
                v94 = 0xAAAAAAAAAAAAAAABLL * ((v90 - (_BYTE *)v415) >> 4);
                v95 = v94 + 1;
                if (v94 + 1 > 0x555555555555555)
                  sub_20E867F44();
                if (0x5555555555555556 * ((uint64_t)(*((_QWORD *)&v416 + 1) - (_QWORD)v415) >> 4) > v95)
                  v95 = 0x5555555555555556 * ((uint64_t)(*((_QWORD *)&v416 + 1) - (_QWORD)v415) >> 4);
                if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)&v416 + 1) - (_QWORD)v415) >> 4) >= 0x2AAAAAAAAAAAAAALL)
                  v96 = 0x555555555555555;
                else
                  v96 = v95;
                if (v96)
                {
                  if (v96 > 0x555555555555555)
                    sub_20E877A38();
                  v97 = (char *)operator new(48 * v96);
                }
                else
                {
                  v97 = 0;
                }
                v98 = &v97[48 * v94];
                v99 = v422;
                *(_OWORD *)v98 = v421;
                *((_OWORD *)v98 + 1) = v99;
                *((_OWORD *)v98 + 2) = v423;
                v100 = v98;
                if (v90 != v93)
                {
                  do
                  {
                    v101 = *((_OWORD *)v90 - 3);
                    v102 = *((_OWORD *)v90 - 1);
                    *((_OWORD *)v100 - 2) = *((_OWORD *)v90 - 2);
                    *((_OWORD *)v100 - 1) = v102;
                    *((_OWORD *)v100 - 3) = v101;
                    v100 -= 48;
                    v90 -= 48;
                  }
                  while (v90 != v93);
                  v90 = v93;
                }
                v103 = v98 + 48;
                v415 = v100;
                *(_QWORD *)&v416 = v98 + 48;
                *((_QWORD *)&v416 + 1) = &v97[48 * v96];
                if (v90)
                  operator delete(v90);
                *(_QWORD *)&v416 = v103;
                v88 += 3;
                v90 = v103;
              }
              while (v88 != v89);
            }
LABEL_69:
            ++v69;
            v68 = v419;
            v67 = (char *)v420;
          }
          while (v69 < 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v420 - (_QWORD)v419) >> 3));
        }
        v104 = (char *)__p;
        if (__p)
        {
          v105 = v412;
          if (v412 != __p)
          {
            v106 = (char *)v412;
            do
            {
              v108 = (void *)*((_QWORD *)v106 - 3);
              v106 -= 24;
              v107 = v108;
              if (v108)
              {
                *(v105 - 2) = v107;
                operator delete(v107);
              }
              v105 = v106;
            }
            while (v106 != v104);
          }
          operator delete(v104);
        }
        if (v68)
        {
          if (v67 != v68)
          {
            v109 = v67;
            do
            {
              v111 = (void *)*((_QWORD *)v109 - 3);
              v109 -= 24;
              v110 = v111;
              if (v111)
              {
                *((_QWORD *)v67 - 2) = v110;
                operator delete(v110);
              }
              v67 = v109;
            }
            while (v109 != v68);
            v67 = v68;
          }
          *(_QWORD *)&v420 = v68;
          operator delete(v67);
        }
      }
      v112 = (char *)v415;
      v113 = (char *)v416;
      v114 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v416 - (_QWORD)v415) >> 4);
      v115 = fmin((double)v114, (double)*(int *)(v6 + 52));
      if ((unint64_t)v115 <= v114)
      {
        if ((unint64_t)v115 < v114)
        {
          v113 = (char *)v415 + 48 * (unint64_t)v115;
          *(_QWORD *)&v416 = v113;
        }
      }
      else
      {
        sub_20FD6B160((char **)&v415, (unint64_t)v115 - v114);
        v112 = (char *)v415;
        v113 = (char *)v416;
      }
      if (!v7)
      {
        if (*(_BYTE *)(v6 + 3))
        {
          v116 = *(_QWORD *)(v6 + 56);
          v117 = 0xAAAAAAAAAAAAAAABLL * ((v113 - v112) >> 4);
          if (v117 > v116)
          {
            v118 = *(_QWORD *)(v6 + 64);
            v419 = 0;
            v420 = 0uLL;
            sub_20FD6B160(&v419, v117);
            v119 = v415;
            v120 = (_OWORD *)v416;
            v121 = v419;
            v122 = v419;
            if (v415 != (void *)v416)
            {
              v122 = v419;
              do
              {
                if (*((_DWORD *)v119 + 9) == 1)
                {
                  v123 = *v119;
                  v124 = v119[2];
                  *((_OWORD *)v122 + 1) = v119[1];
                  *((_OWORD *)v122 + 2) = v124;
                  *(_OWORD *)v122 = v123;
                  v122 += 48;
                }
                v119 += 3;
              }
              while (v119 != v120);
            }
            v125 = 0xAAAAAAAAAAAAAAABLL * ((v122 - v121) >> 4);
            v126 = (char *)v420;
            v127 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v420 - (_QWORD)v121) >> 4);
            if (v125 <= v127)
            {
              if (v125 < v127)
              {
                v126 = &v121[16 * ((v122 - v121) >> 4)];
                *(_QWORD *)&v420 = v126;
              }
            }
            else
            {
              sub_20FD6B160(&v419, v125 - v127);
              v121 = v419;
              v126 = (char *)v420;
            }
            v128 = &v121[48 * v116];
            if (v128 != v126)
            {
              v129 = v121;
              v130 = v126;
              while (1)
              {
                v131 = 0xAAAAAAAAAAAAAAABLL * ((v130 - v129) >> 4);
                if (v131 < 2)
                  goto LABEL_230;
                if (v131 == 3)
                {
                  v218 = (__int128 *)(v129 + 48);
                  v219 = v130 - 48;
                  v220 = fabsf(*((float *)v129 + 23));
                  v221 = fabsf(*((float *)v130 - 1));
                  if (v220 <= fabsf(*((float *)v129 + 11)))
                  {
                    if (v221 > v220)
                    {
                      v245 = *((_OWORD *)v129 + 4);
                      v421 = *v218;
                      v244 = v421;
                      v422 = v245;
                      v423 = *((_OWORD *)v129 + 5);
                      v246 = v423;
                      v247 = *(_OWORD *)v219;
                      v248 = *((_OWORD *)v130 - 1);
                      *((_OWORD *)v129 + 4) = *((_OWORD *)v130 - 2);
                      *((_OWORD *)v129 + 5) = v248;
                      *v218 = v247;
                      *((_OWORD *)v130 - 2) = v245;
                      *((_OWORD *)v130 - 1) = v246;
                      *(_OWORD *)v219 = v244;
                      if (fabsf(*((float *)v129 + 23)) > fabsf(*((float *)v129 + 11)))
                      {
                        v249 = *(_OWORD *)v129;
                        v250 = *((_OWORD *)v129 + 2);
                        v422 = *((_OWORD *)v129 + 1);
                        v423 = v250;
                        v421 = v249;
                        v251 = *((_OWORD *)v129 + 4);
                        *(_OWORD *)v129 = *v218;
                        *((_OWORD *)v129 + 1) = v251;
                        *((_OWORD *)v129 + 2) = *((_OWORD *)v129 + 5);
                        v252 = v422;
                        *v218 = v421;
                        *((_OWORD *)v129 + 4) = v252;
                        *((_OWORD *)v129 + 5) = v423;
                      }
                    }
                  }
                  else
                  {
                    if (v221 <= v220)
                    {
                      v253 = *(_OWORD *)v129;
                      v254 = *((_OWORD *)v129 + 2);
                      v422 = *((_OWORD *)v129 + 1);
                      v423 = v254;
                      v421 = v253;
                      v255 = *((_OWORD *)v129 + 4);
                      *(_OWORD *)v129 = *v218;
                      *((_OWORD *)v129 + 1) = v255;
                      *((_OWORD *)v129 + 2) = *((_OWORD *)v129 + 5);
                      v256 = v422;
                      *v218 = v421;
                      *((_OWORD *)v129 + 4) = v256;
                      *((_OWORD *)v129 + 5) = v423;
                      if (fabsf(*((float *)v130 - 1)) <= fabsf(*((float *)v129 + 23)))
                        goto LABEL_230;
                      v226 = *v218;
                      v227 = *((_OWORD *)v129 + 4);
                      v421 = *v218;
                      v422 = v227;
                      v228 = *((_OWORD *)v129 + 5);
                      v423 = v228;
                      v257 = *(_OWORD *)v219;
                      v258 = *((_OWORD *)v130 - 1);
                      *((_OWORD *)v129 + 4) = *((_OWORD *)v130 - 2);
                      *((_OWORD *)v129 + 5) = v258;
                      *v218 = v257;
                    }
                    else
                    {
                      v222 = *(_OWORD *)v129;
                      v223 = *((_OWORD *)v129 + 2);
                      v422 = *((_OWORD *)v129 + 1);
                      v423 = v223;
                      v421 = v222;
                      v224 = *(_OWORD *)v219;
                      v225 = *((_OWORD *)v130 - 1);
                      *((_OWORD *)v129 + 1) = *((_OWORD *)v130 - 2);
                      *((_OWORD *)v129 + 2) = v225;
                      *(_OWORD *)v129 = v224;
                      v226 = v421;
                      v227 = v422;
                      v228 = v423;
                    }
                    *((_OWORD *)v130 - 2) = v227;
                    *((_OWORD *)v130 - 1) = v228;
                    *(_OWORD *)v219 = v226;
                  }
                  goto LABEL_230;
                }
                if (v131 == 2)
                {
                  if (fabsf(*((float *)v130 - 1)) > fabsf(*((float *)v129 + 11)))
                  {
                    v229 = *(_OWORD *)v129;
                    v230 = *((_OWORD *)v129 + 2);
                    v422 = *((_OWORD *)v129 + 1);
                    v423 = v230;
                    v421 = v229;
                    v231 = *((_OWORD *)v130 - 3);
                    v232 = *((_OWORD *)v130 - 1);
                    *((_OWORD *)v129 + 1) = *((_OWORD *)v130 - 2);
                    *((_OWORD *)v129 + 2) = v232;
                    *(_OWORD *)v129 = v231;
                    v233 = v421;
                    v234 = v423;
                    *((_OWORD *)v130 - 2) = v422;
                    *((_OWORD *)v130 - 1) = v234;
                    *((_OWORD *)v130 - 3) = v233;
                  }
                  goto LABEL_230;
                }
                if (v130 - v129 <= 383)
                {
                  while (v129 != v130 - 48)
                  {
                    v235 = v129;
                    v129 += 48;
                    if (v235 != v130 && v129 != v130)
                    {
                      v236 = v129;
                      v237 = (float *)v235;
                      do
                      {
                        if (fabsf(*((float *)v236 + 11)) > fabsf(v237[11]))
                          v237 = (float *)v236;
                        v236 += 48;
                      }
                      while (v236 != v130);
                      if (v237 != (float *)v235)
                      {
                        v238 = *(_OWORD *)v235;
                        v239 = *((_OWORD *)v235 + 2);
                        v422 = *((_OWORD *)v235 + 1);
                        v423 = v239;
                        v421 = v238;
                        v240 = *(_OWORD *)v237;
                        v241 = *((_OWORD *)v237 + 2);
                        *((_OWORD *)v235 + 1) = *((_OWORD *)v237 + 1);
                        *((_OWORD *)v235 + 2) = v241;
                        *(_OWORD *)v235 = v240;
                        v242 = v421;
                        v243 = v423;
                        *((_OWORD *)v237 + 1) = v422;
                        *((_OWORD *)v237 + 2) = v243;
                        *(_OWORD *)v237 = v242;
                      }
                    }
                  }
                  goto LABEL_230;
                }
                v132 = (float *)&v129[48 * (v131 >> 1)];
                v133 = (float *)(v130 - 48);
                v134 = fabsf(v132[11]);
                v135 = fabsf(*((float *)v130 - 1));
                if (v134 > fabsf(*((float *)v129 + 11)))
                  break;
                if (v135 > v134)
                {
                  v142 = *(_OWORD *)v132;
                  v143 = *((_OWORD *)v132 + 2);
                  v422 = *((_OWORD *)v132 + 1);
                  v423 = v143;
                  v421 = v142;
                  v144 = *(_OWORD *)v133;
                  v145 = *((_OWORD *)v130 - 1);
                  *((_OWORD *)v132 + 1) = *((_OWORD *)v130 - 2);
                  *((_OWORD *)v132 + 2) = v145;
                  *(_OWORD *)v132 = v144;
                  v146 = v421;
                  v147 = v423;
                  *((_OWORD *)v130 - 2) = v422;
                  *((_OWORD *)v130 - 1) = v147;
                  *(_OWORD *)v133 = v146;
                  if (fabsf(v132[11]) > fabsf(*((float *)v129 + 11)))
                  {
                    v148 = *(_OWORD *)v129;
                    v149 = *((_OWORD *)v129 + 2);
                    v422 = *((_OWORD *)v129 + 1);
                    v423 = v149;
                    v421 = v148;
                    v150 = *(_OWORD *)v132;
                    v151 = *((_OWORD *)v132 + 2);
                    *((_OWORD *)v129 + 1) = *((_OWORD *)v132 + 1);
                    *((_OWORD *)v129 + 2) = v151;
                    *(_OWORD *)v129 = v150;
                    v152 = v421;
                    v153 = v423;
                    *((_OWORD *)v132 + 1) = v422;
                    *((_OWORD *)v132 + 2) = v153;
                    *(_OWORD *)v132 = v152;
                    goto LABEL_157;
                  }
                  goto LABEL_159;
                }
                v166 = 0;
                v167 = fabsf(*((float *)v129 + 11));
                v168 = fabsf(v132[11]);
                if (v167 <= v168)
                {
LABEL_171:
                  v182 = v130 - 48;
                  while (1)
                  {
                    v169 = (float *)(v182 - 48);
                    if (v182 - 48 == v129)
                      break;
                    v183 = fabsf(*((float *)v182 - 1));
                    v182 -= 48;
                    if (v183 > v168)
                    {
                      v184 = *(_OWORD *)v129;
                      v185 = *((_OWORD *)v129 + 2);
                      v422 = *((_OWORD *)v129 + 1);
                      v423 = v185;
                      v421 = v184;
                      v186 = *(_OWORD *)v169;
                      v187 = *((_OWORD *)v169 + 2);
                      *((_OWORD *)v129 + 1) = *((_OWORD *)v169 + 1);
                      *((_OWORD *)v129 + 2) = v187;
                      *(_OWORD *)v129 = v186;
                      v188 = v421;
                      v189 = v423;
                      *((_OWORD *)v169 + 1) = v422;
                      *((_OWORD *)v169 + 2) = v189;
                      *(_OWORD *)v169 = v188;
                      ++v166;
                      v170 = v129 + 48;
                      if (v129 + 48 < (char *)v169)
                        goto LABEL_161;
                      goto LABEL_175;
                    }
                  }
                  v199 = v129 + 48;
                  if (v167 <= fabsf(*((float *)v130 - 1)))
                  {
                    if (v199 == (char *)v133)
                      goto LABEL_230;
                    while (v167 <= fabsf(*((float *)v199 + 11)))
                    {
                      v199 += 48;
                      if (v199 == (char *)v133)
                        goto LABEL_230;
                    }
                    v203 = *(_OWORD *)v199;
                    v204 = *((_OWORD *)v199 + 2);
                    v422 = *((_OWORD *)v199 + 1);
                    v423 = v204;
                    v421 = v203;
                    v205 = *(_OWORD *)v133;
                    v206 = *((_OWORD *)v130 - 1);
                    *((_OWORD *)v199 + 1) = *((_OWORD *)v130 - 2);
                    *((_OWORD *)v199 + 2) = v206;
                    *(_OWORD *)v199 = v205;
                    v199 += 48;
                    v207 = v421;
                    v208 = v423;
                    *((_OWORD *)v130 - 2) = v422;
                    *((_OWORD *)v130 - 1) = v208;
                    *(_OWORD *)v133 = v207;
                  }
                  if (v199 == (char *)v133)
                    goto LABEL_230;
                  while (1)
                  {
                    v209 = fabsf(*((float *)v129 + 11));
                    v196 = (unint64_t)(v199 - 48);
                    do
                    {
                      v210 = fabsf(*(float *)(v196 + 92));
                      v196 += 48;
                    }
                    while (v209 <= v210);
                    v199 = (char *)(v196 + 48);
                    do
                    {
                      v211 = *(v133 - 1);
                      v133 -= 12;
                    }
                    while (v209 > fabsf(v211));
                    if (v196 >= (unint64_t)v133)
                      break;
                    v212 = *(_OWORD *)v196;
                    v213 = *(_OWORD *)(v196 + 32);
                    v422 = *(_OWORD *)(v196 + 16);
                    v423 = v213;
                    v421 = v212;
                    v214 = *(_OWORD *)v133;
                    v215 = *((_OWORD *)v133 + 2);
                    *(_OWORD *)(v196 + 16) = *((_OWORD *)v133 + 1);
                    *(_OWORD *)(v196 + 32) = v215;
                    *(_OWORD *)v196 = v214;
                    v216 = v421;
                    v217 = v423;
                    *((_OWORD *)v133 + 1) = v422;
                    *((_OWORD *)v133 + 2) = v217;
                    *(_OWORD *)v133 = v216;
                  }
                  if (v196 > (unint64_t)v128)
                    goto LABEL_230;
                  goto LABEL_206;
                }
LABEL_160:
                v169 = (float *)(v130 - 48);
                v170 = v129 + 48;
                if (v129 + 48 >= v130 - 48)
                {
LABEL_175:
                  v173 = (unint64_t)v170;
                }
                else
                {
LABEL_161:
                  v171 = (unint64_t)v170;
                  while (1)
                  {
                    v172 = fabsf(v132[11]);
                    v173 = v171 - 48;
                    do
                    {
                      v174 = fabsf(*(float *)(v173 + 92));
                      v173 += 48;
                    }
                    while (v174 > v172);
                    v171 = v173 + 48;
                    do
                    {
                      v175 = *(v169 - 1);
                      v169 -= 12;
                    }
                    while (fabsf(v175) <= v172);
                    if (v173 >= (unint64_t)v169)
                      break;
                    v176 = *(_OWORD *)v173;
                    v177 = *(_OWORD *)(v173 + 32);
                    v422 = *(_OWORD *)(v173 + 16);
                    v423 = v177;
                    v421 = v176;
                    v178 = *(_OWORD *)v169;
                    v179 = *((_OWORD *)v169 + 2);
                    *(_OWORD *)(v173 + 16) = *((_OWORD *)v169 + 1);
                    *(_OWORD *)(v173 + 32) = v179;
                    *(_OWORD *)v173 = v178;
                    v180 = v421;
                    v181 = v423;
                    *((_OWORD *)v169 + 1) = v422;
                    *((_OWORD *)v169 + 2) = v181;
                    *(_OWORD *)v169 = v180;
                    ++v166;
                    if ((float *)v173 == v132)
                      v132 = v169;
                  }
                }
                if ((float *)v173 != v132 && fabsf(v132[11]) > fabsf(*(float *)(v173 + 44)))
                {
                  v190 = *(_OWORD *)v173;
                  v191 = *(_OWORD *)(v173 + 32);
                  v422 = *(_OWORD *)(v173 + 16);
                  v423 = v191;
                  v421 = v190;
                  v192 = *(_OWORD *)v132;
                  v193 = *((_OWORD *)v132 + 2);
                  *(_OWORD *)(v173 + 16) = *((_OWORD *)v132 + 1);
                  *(_OWORD *)(v173 + 32) = v193;
                  *(_OWORD *)v173 = v192;
                  v194 = v421;
                  v195 = v423;
                  *((_OWORD *)v132 + 1) = v422;
                  *((_OWORD *)v132 + 2) = v195;
                  *(_OWORD *)v132 = v194;
                  ++v166;
                }
                if ((char *)v173 == v128)
                  goto LABEL_230;
                if (!v166)
                {
                  if (v173 <= (unint64_t)v128)
                  {
                    v200 = v173 + 48;
                    while ((char *)v200 != v130)
                    {
                      v201 = fabsf(*(float *)(v200 + 44));
                      v202 = fabsf(*(float *)(v200 - 4));
                      v200 += 48;
                      if (v201 > v202)
                        goto LABEL_181;
                    }
                  }
                  else
                  {
                    while (v170 != (char *)v173)
                    {
                      v197 = fabsf(*((float *)v170 + 11));
                      v198 = fabsf(*((float *)v170 - 1));
                      v170 += 48;
                      if (v197 > v198)
                        goto LABEL_181;
                    }
                  }
                  goto LABEL_230;
                }
LABEL_181:
                if (v173 <= (unint64_t)v128)
                {
                  v196 = v173 + 48;
                }
                else
                {
                  v130 = (char *)v173;
                  v196 = (unint64_t)v129;
                }
LABEL_206:
                v129 = (char *)v196;
                if (v130 == v128)
                  goto LABEL_230;
              }
              if (v135 <= v134)
              {
                v154 = *(_OWORD *)v129;
                v155 = *((_OWORD *)v129 + 2);
                v422 = *((_OWORD *)v129 + 1);
                v423 = v155;
                v421 = v154;
                v156 = *(_OWORD *)v132;
                v157 = *((_OWORD *)v132 + 2);
                *((_OWORD *)v129 + 1) = *((_OWORD *)v132 + 1);
                *((_OWORD *)v129 + 2) = v157;
                *(_OWORD *)v129 = v156;
                v158 = v421;
                v159 = v423;
                *((_OWORD *)v132 + 1) = v422;
                *((_OWORD *)v132 + 2) = v159;
                *(_OWORD *)v132 = v158;
                if (fabsf(*((float *)v130 - 1)) > fabsf(v132[11]))
                {
                  v160 = *(_OWORD *)v132;
                  v161 = *((_OWORD *)v132 + 2);
                  v422 = *((_OWORD *)v132 + 1);
                  v423 = v161;
                  v421 = v160;
                  v162 = *(_OWORD *)v133;
                  v163 = *((_OWORD *)v130 - 1);
                  *((_OWORD *)v132 + 1) = *((_OWORD *)v130 - 2);
                  *((_OWORD *)v132 + 2) = v163;
                  *(_OWORD *)v132 = v162;
                  v164 = v421;
                  v165 = v423;
                  *((_OWORD *)v130 - 2) = v422;
                  *((_OWORD *)v130 - 1) = v165;
                  *(_OWORD *)v133 = v164;
LABEL_157:
                  v166 = 2;
                  v167 = fabsf(*((float *)v129 + 11));
                  v168 = fabsf(v132[11]);
                  if (v167 <= v168)
                    goto LABEL_171;
                  goto LABEL_160;
                }
              }
              else
              {
                v136 = *(_OWORD *)v129;
                v137 = *((_OWORD *)v129 + 2);
                v422 = *((_OWORD *)v129 + 1);
                v423 = v137;
                v421 = v136;
                v138 = *(_OWORD *)v133;
                v139 = *((_OWORD *)v130 - 1);
                *((_OWORD *)v129 + 1) = *((_OWORD *)v130 - 2);
                *((_OWORD *)v129 + 2) = v139;
                *(_OWORD *)v129 = v138;
                v140 = v421;
                v141 = v423;
                *((_OWORD *)v130 - 2) = v422;
                *((_OWORD *)v130 - 1) = v141;
                *(_OWORD *)v133 = v140;
              }
LABEL_159:
              v166 = 1;
              v167 = fabsf(*((float *)v129 + 11));
              v168 = fabsf(v132[11]);
              if (v167 <= v168)
                goto LABEL_171;
              goto LABEL_160;
            }
LABEL_230:
            v259 = 2 * v118 + v116;
            if (v259 >= 0xAAAAAAAAAAAAAAABLL * ((v126 - v121) >> 4))
            {
              sub_20FD8439C(a5, *(_QWORD *)(a5 + 8), v128, v126, 0xAAAAAAAAAAAAAAABLL * ((v126 - v128) >> 4));
            }
            else
            {
              v260 = &v121[48 * v259];
              if (v260 != v126)
              {
                v261 = v128;
                while (1)
                {
                  v262 = 0xAAAAAAAAAAAAAAABLL * ((v126 - v261) >> 4);
                  if (v262 < 2)
                    goto LABEL_320;
                  if (v262 == 3)
                  {
                    v349 = (__int128 *)(v261 + 48);
                    v350 = v126 - 48;
                    v351 = fabsf(*((float *)v261 + 23));
                    v352 = fabsf(*((float *)v126 - 1));
                    if (v351 <= fabsf(*((float *)v261 + 11)))
                    {
                      if (v352 > v351)
                      {
                        v376 = *((_OWORD *)v261 + 4);
                        v421 = *v349;
                        v375 = v421;
                        v422 = v376;
                        v423 = *((_OWORD *)v261 + 5);
                        v377 = v423;
                        v378 = *(_OWORD *)v350;
                        v379 = *((_OWORD *)v126 - 1);
                        *((_OWORD *)v261 + 4) = *((_OWORD *)v126 - 2);
                        *((_OWORD *)v261 + 5) = v379;
                        *v349 = v378;
                        *((_OWORD *)v126 - 2) = v376;
                        *((_OWORD *)v126 - 1) = v377;
                        *(_OWORD *)v350 = v375;
                        if (fabsf(*((float *)v261 + 23)) > fabsf(*((float *)v261 + 11)))
                        {
                          v380 = *(_OWORD *)v261;
                          v381 = *((_OWORD *)v261 + 2);
                          v422 = *((_OWORD *)v261 + 1);
                          v423 = v381;
                          v421 = v380;
                          v382 = *((_OWORD *)v261 + 4);
                          *(_OWORD *)v261 = *v349;
                          *((_OWORD *)v261 + 1) = v382;
                          *((_OWORD *)v261 + 2) = *((_OWORD *)v261 + 5);
                          v383 = v422;
                          *v349 = v421;
                          *((_OWORD *)v261 + 4) = v383;
                          *((_OWORD *)v261 + 5) = v423;
                        }
                      }
                    }
                    else
                    {
                      if (v352 <= v351)
                      {
                        v384 = *(_OWORD *)v261;
                        v385 = *((_OWORD *)v261 + 2);
                        v422 = *((_OWORD *)v261 + 1);
                        v423 = v385;
                        v421 = v384;
                        v386 = *((_OWORD *)v261 + 4);
                        *(_OWORD *)v261 = *v349;
                        *((_OWORD *)v261 + 1) = v386;
                        *((_OWORD *)v261 + 2) = *((_OWORD *)v261 + 5);
                        v387 = v422;
                        *v349 = v421;
                        *((_OWORD *)v261 + 4) = v387;
                        *((_OWORD *)v261 + 5) = v423;
                        if (fabsf(*((float *)v126 - 1)) <= fabsf(*((float *)v261 + 23)))
                          goto LABEL_320;
                        v357 = *v349;
                        v358 = *((_OWORD *)v261 + 4);
                        v421 = *v349;
                        v422 = v358;
                        v359 = *((_OWORD *)v261 + 5);
                        v423 = v359;
                        v388 = *(_OWORD *)v350;
                        v389 = *((_OWORD *)v126 - 1);
                        *((_OWORD *)v261 + 4) = *((_OWORD *)v126 - 2);
                        *((_OWORD *)v261 + 5) = v389;
                        *v349 = v388;
                      }
                      else
                      {
                        v353 = *(_OWORD *)v261;
                        v354 = *((_OWORD *)v261 + 2);
                        v422 = *((_OWORD *)v261 + 1);
                        v423 = v354;
                        v421 = v353;
                        v355 = *(_OWORD *)v350;
                        v356 = *((_OWORD *)v126 - 1);
                        *((_OWORD *)v261 + 1) = *((_OWORD *)v126 - 2);
                        *((_OWORD *)v261 + 2) = v356;
                        *(_OWORD *)v261 = v355;
                        v357 = v421;
                        v358 = v422;
                        v359 = v423;
                      }
                      *((_OWORD *)v126 - 2) = v358;
                      *((_OWORD *)v126 - 1) = v359;
                      *(_OWORD *)v350 = v357;
                    }
                    goto LABEL_320;
                  }
                  if (v262 == 2)
                  {
                    if (fabsf(*((float *)v126 - 1)) > fabsf(*((float *)v261 + 11)))
                    {
                      v360 = *(_OWORD *)v261;
                      v361 = *((_OWORD *)v261 + 2);
                      v422 = *((_OWORD *)v261 + 1);
                      v423 = v361;
                      v421 = v360;
                      v362 = *((_OWORD *)v126 - 3);
                      v363 = *((_OWORD *)v126 - 1);
                      *((_OWORD *)v261 + 1) = *((_OWORD *)v126 - 2);
                      *((_OWORD *)v261 + 2) = v363;
                      *(_OWORD *)v261 = v362;
                      v364 = v421;
                      v365 = v423;
                      *((_OWORD *)v126 - 2) = v422;
                      *((_OWORD *)v126 - 1) = v365;
                      *((_OWORD *)v126 - 3) = v364;
                    }
                    goto LABEL_320;
                  }
                  if (v126 - v261 <= 383)
                  {
                    while (v261 != v126 - 48)
                    {
                      v366 = v261;
                      v261 += 48;
                      if (v366 != v126 && v261 != v126)
                      {
                        v367 = v261;
                        v368 = (float *)v366;
                        do
                        {
                          if (fabsf(*((float *)v367 + 11)) > fabsf(v368[11]))
                            v368 = (float *)v367;
                          v367 += 48;
                        }
                        while (v367 != v126);
                        if (v368 != (float *)v366)
                        {
                          v369 = *(_OWORD *)v366;
                          v370 = *((_OWORD *)v366 + 2);
                          v422 = *((_OWORD *)v366 + 1);
                          v423 = v370;
                          v421 = v369;
                          v371 = *(_OWORD *)v368;
                          v372 = *((_OWORD *)v368 + 2);
                          *((_OWORD *)v366 + 1) = *((_OWORD *)v368 + 1);
                          *((_OWORD *)v366 + 2) = v372;
                          *(_OWORD *)v366 = v371;
                          v373 = v421;
                          v374 = v423;
                          *((_OWORD *)v368 + 1) = v422;
                          *((_OWORD *)v368 + 2) = v374;
                          *(_OWORD *)v368 = v373;
                        }
                      }
                    }
                    goto LABEL_320;
                  }
                  v263 = (float *)&v261[48 * (v262 >> 1)];
                  v264 = (float *)(v126 - 48);
                  v265 = fabsf(v263[11]);
                  v266 = fabsf(*((float *)v126 - 1));
                  if (v265 > fabsf(*((float *)v261 + 11)))
                    break;
                  if (v266 > v265)
                  {
                    v273 = *(_OWORD *)v263;
                    v274 = *((_OWORD *)v263 + 2);
                    v422 = *((_OWORD *)v263 + 1);
                    v423 = v274;
                    v421 = v273;
                    v275 = *(_OWORD *)v264;
                    v276 = *((_OWORD *)v126 - 1);
                    *((_OWORD *)v263 + 1) = *((_OWORD *)v126 - 2);
                    *((_OWORD *)v263 + 2) = v276;
                    *(_OWORD *)v263 = v275;
                    v277 = v421;
                    v278 = v423;
                    *((_OWORD *)v126 - 2) = v422;
                    *((_OWORD *)v126 - 1) = v278;
                    *(_OWORD *)v264 = v277;
                    if (fabsf(v263[11]) > fabsf(*((float *)v261 + 11)))
                    {
                      v279 = *(_OWORD *)v261;
                      v280 = *((_OWORD *)v261 + 2);
                      v422 = *((_OWORD *)v261 + 1);
                      v423 = v280;
                      v421 = v279;
                      v281 = *(_OWORD *)v263;
                      v282 = *((_OWORD *)v263 + 2);
                      *((_OWORD *)v261 + 1) = *((_OWORD *)v263 + 1);
                      *((_OWORD *)v261 + 2) = v282;
                      *(_OWORD *)v261 = v281;
                      v283 = v421;
                      v284 = v423;
                      *((_OWORD *)v263 + 1) = v422;
                      *((_OWORD *)v263 + 2) = v284;
                      *(_OWORD *)v263 = v283;
                      goto LABEL_245;
                    }
                    goto LABEL_247;
                  }
                  v297 = 0;
                  v298 = fabsf(*((float *)v261 + 11));
                  v299 = fabsf(v263[11]);
                  if (v298 <= v299)
                  {
LABEL_259:
                    v313 = v126 - 48;
                    while (1)
                    {
                      v300 = (float *)(v313 - 48);
                      if (v313 - 48 == v261)
                        break;
                      v314 = fabsf(*((float *)v313 - 1));
                      v313 -= 48;
                      if (v314 > v299)
                      {
                        v315 = *(_OWORD *)v261;
                        v316 = *((_OWORD *)v261 + 2);
                        v422 = *((_OWORD *)v261 + 1);
                        v423 = v316;
                        v421 = v315;
                        v317 = *(_OWORD *)v300;
                        v318 = *((_OWORD *)v300 + 2);
                        *((_OWORD *)v261 + 1) = *((_OWORD *)v300 + 1);
                        *((_OWORD *)v261 + 2) = v318;
                        *(_OWORD *)v261 = v317;
                        v319 = v421;
                        v320 = v423;
                        *((_OWORD *)v300 + 1) = v422;
                        *((_OWORD *)v300 + 2) = v320;
                        *(_OWORD *)v300 = v319;
                        ++v297;
                        v301 = v261 + 48;
                        if (v261 + 48 < (char *)v300)
                          goto LABEL_249;
                        goto LABEL_263;
                      }
                    }
                    v330 = v261 + 48;
                    if (v298 <= fabsf(*((float *)v126 - 1)))
                    {
                      if (v330 == (char *)v264)
                        goto LABEL_320;
                      while (v298 <= fabsf(*((float *)v330 + 11)))
                      {
                        v330 += 48;
                        if (v330 == (char *)v264)
                          goto LABEL_320;
                      }
                      v334 = *(_OWORD *)v330;
                      v335 = *((_OWORD *)v330 + 2);
                      v422 = *((_OWORD *)v330 + 1);
                      v423 = v335;
                      v421 = v334;
                      v336 = *(_OWORD *)v264;
                      v337 = *((_OWORD *)v126 - 1);
                      *((_OWORD *)v330 + 1) = *((_OWORD *)v126 - 2);
                      *((_OWORD *)v330 + 2) = v337;
                      *(_OWORD *)v330 = v336;
                      v330 += 48;
                      v338 = v421;
                      v339 = v423;
                      *((_OWORD *)v126 - 2) = v422;
                      *((_OWORD *)v126 - 1) = v339;
                      *(_OWORD *)v264 = v338;
                    }
                    if (v330 == (char *)v264)
                      goto LABEL_320;
                    while (1)
                    {
                      v346 = fabsf(*((float *)v261 + 11));
                      v327 = (unint64_t)(v330 - 48);
                      do
                      {
                        v347 = fabsf(*(float *)(v327 + 92));
                        v327 += 48;
                      }
                      while (v346 <= v347);
                      v330 = (char *)(v327 + 48);
                      do
                      {
                        v348 = *(v264 - 1);
                        v264 -= 12;
                      }
                      while (v346 > fabsf(v348));
                      if (v327 >= (unint64_t)v264)
                        break;
                      v340 = *(_OWORD *)v327;
                      v341 = *(_OWORD *)(v327 + 32);
                      v422 = *(_OWORD *)(v327 + 16);
                      v423 = v341;
                      v421 = v340;
                      v342 = *(_OWORD *)v264;
                      v343 = *((_OWORD *)v264 + 2);
                      *(_OWORD *)(v327 + 16) = *((_OWORD *)v264 + 1);
                      *(_OWORD *)(v327 + 32) = v343;
                      *(_OWORD *)v327 = v342;
                      v344 = v421;
                      v345 = v423;
                      *((_OWORD *)v264 + 1) = v422;
                      *((_OWORD *)v264 + 2) = v345;
                      *(_OWORD *)v264 = v344;
                    }
                    if (v327 > (unint64_t)v260)
                      goto LABEL_320;
                    goto LABEL_295;
                  }
LABEL_248:
                  v300 = (float *)(v126 - 48);
                  v301 = v261 + 48;
                  if (v261 + 48 >= v126 - 48)
                  {
LABEL_263:
                    v304 = (unint64_t)v301;
                  }
                  else
                  {
LABEL_249:
                    v302 = (unint64_t)v301;
                    while (1)
                    {
                      v303 = fabsf(v263[11]);
                      v304 = v302 - 48;
                      do
                      {
                        v305 = fabsf(*(float *)(v304 + 92));
                        v304 += 48;
                      }
                      while (v305 > v303);
                      v302 = v304 + 48;
                      do
                      {
                        v306 = *(v300 - 1);
                        v300 -= 12;
                      }
                      while (fabsf(v306) <= v303);
                      if (v304 >= (unint64_t)v300)
                        break;
                      v307 = *(_OWORD *)v304;
                      v308 = *(_OWORD *)(v304 + 32);
                      v422 = *(_OWORD *)(v304 + 16);
                      v423 = v308;
                      v421 = v307;
                      v309 = *(_OWORD *)v300;
                      v310 = *((_OWORD *)v300 + 2);
                      *(_OWORD *)(v304 + 16) = *((_OWORD *)v300 + 1);
                      *(_OWORD *)(v304 + 32) = v310;
                      *(_OWORD *)v304 = v309;
                      v311 = v421;
                      v312 = v423;
                      *((_OWORD *)v300 + 1) = v422;
                      *((_OWORD *)v300 + 2) = v312;
                      *(_OWORD *)v300 = v311;
                      ++v297;
                      if ((float *)v304 == v263)
                        v263 = v300;
                    }
                  }
                  if ((float *)v304 != v263 && fabsf(v263[11]) > fabsf(*(float *)(v304 + 44)))
                  {
                    v321 = *(_OWORD *)v304;
                    v322 = *(_OWORD *)(v304 + 32);
                    v422 = *(_OWORD *)(v304 + 16);
                    v423 = v322;
                    v421 = v321;
                    v323 = *(_OWORD *)v263;
                    v324 = *((_OWORD *)v263 + 2);
                    *(_OWORD *)(v304 + 16) = *((_OWORD *)v263 + 1);
                    *(_OWORD *)(v304 + 32) = v324;
                    *(_OWORD *)v304 = v323;
                    v325 = v421;
                    v326 = v423;
                    *((_OWORD *)v263 + 1) = v422;
                    *((_OWORD *)v263 + 2) = v326;
                    *(_OWORD *)v263 = v325;
                    ++v297;
                  }
                  if ((char *)v304 == v260)
                    goto LABEL_320;
                  if (!v297)
                  {
                    if (v304 <= (unint64_t)v260)
                    {
                      v331 = v304 + 48;
                      while ((char *)v331 != v126)
                      {
                        v332 = fabsf(*(float *)(v331 + 44));
                        v333 = fabsf(*(float *)(v331 - 4));
                        v331 += 48;
                        if (v332 > v333)
                          goto LABEL_269;
                      }
                    }
                    else
                    {
                      while (v301 != (char *)v304)
                      {
                        v328 = fabsf(*((float *)v301 + 11));
                        v329 = fabsf(*((float *)v301 - 1));
                        v301 += 48;
                        if (v328 > v329)
                          goto LABEL_269;
                      }
                    }
                    goto LABEL_320;
                  }
LABEL_269:
                  if (v304 <= (unint64_t)v260)
                  {
                    v327 = v304 + 48;
                  }
                  else
                  {
                    v126 = (char *)v304;
                    v327 = (unint64_t)v261;
                  }
LABEL_295:
                  v261 = (char *)v327;
                  if (v126 == v260)
                    goto LABEL_320;
                }
                if (v266 <= v265)
                {
                  v285 = *(_OWORD *)v261;
                  v286 = *((_OWORD *)v261 + 2);
                  v422 = *((_OWORD *)v261 + 1);
                  v423 = v286;
                  v421 = v285;
                  v287 = *(_OWORD *)v263;
                  v288 = *((_OWORD *)v263 + 2);
                  *((_OWORD *)v261 + 1) = *((_OWORD *)v263 + 1);
                  *((_OWORD *)v261 + 2) = v288;
                  *(_OWORD *)v261 = v287;
                  v289 = v421;
                  v290 = v423;
                  *((_OWORD *)v263 + 1) = v422;
                  *((_OWORD *)v263 + 2) = v290;
                  *(_OWORD *)v263 = v289;
                  if (fabsf(*((float *)v126 - 1)) > fabsf(v263[11]))
                  {
                    v291 = *(_OWORD *)v263;
                    v292 = *((_OWORD *)v263 + 2);
                    v422 = *((_OWORD *)v263 + 1);
                    v423 = v292;
                    v421 = v291;
                    v293 = *(_OWORD *)v264;
                    v294 = *((_OWORD *)v126 - 1);
                    *((_OWORD *)v263 + 1) = *((_OWORD *)v126 - 2);
                    *((_OWORD *)v263 + 2) = v294;
                    *(_OWORD *)v263 = v293;
                    v295 = v421;
                    v296 = v423;
                    *((_OWORD *)v126 - 2) = v422;
                    *((_OWORD *)v126 - 1) = v296;
                    *(_OWORD *)v264 = v295;
LABEL_245:
                    v297 = 2;
                    v298 = fabsf(*((float *)v261 + 11));
                    v299 = fabsf(v263[11]);
                    if (v298 <= v299)
                      goto LABEL_259;
                    goto LABEL_248;
                  }
                }
                else
                {
                  v267 = *(_OWORD *)v261;
                  v268 = *((_OWORD *)v261 + 2);
                  v422 = *((_OWORD *)v261 + 1);
                  v423 = v268;
                  v421 = v267;
                  v269 = *(_OWORD *)v264;
                  v270 = *((_OWORD *)v126 - 1);
                  *((_OWORD *)v261 + 1) = *((_OWORD *)v126 - 2);
                  *((_OWORD *)v261 + 2) = v270;
                  *(_OWORD *)v261 = v269;
                  v271 = v421;
                  v272 = v423;
                  *((_OWORD *)v126 - 2) = v422;
                  *((_OWORD *)v126 - 1) = v272;
                  *(_OWORD *)v264 = v271;
                }
LABEL_247:
                v297 = 1;
                v298 = fabsf(*((float *)v261 + 11));
                v299 = fabsf(v263[11]);
                if (v298 <= v299)
                  goto LABEL_259;
                goto LABEL_248;
              }
LABEL_320:
              sub_20FD8439C(a5, *(_QWORD *)(a5 + 8), v128, v260, 0xAAAAAAAAAAAAAAABLL * ((96 * v118) >> 4));
            }
            v390 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v420 - (_QWORD)v419) >> 4);
            if (v116 <= v390)
            {
              if (v116 < v390)
                *(_QWORD *)&v420 = &v419[48 * v116];
            }
            else
            {
              sub_20FD6B160(&v419, v116 - v390);
            }
            if (v415)
            {
              *(_QWORD *)&v416 = v415;
              operator delete(v415);
            }
            v112 = v419;
            v415 = v419;
            v416 = v420;
            v113 = (char *)v420;
          }
        }
      }
      sub_20FD8439C(a4, *(_QWORD *)(a4 + 8), v112, v113, 0xAAAAAAAAAAAAAAABLL * ((v113 - v112) >> 4));
      if (v415)
      {
        *(_QWORD *)&v416 = v415;
        operator delete(v415);
      }
      if (v417[0])
        operator delete(v417[0]);
      if (v418[0])
        operator delete(v418[0]);
      ++v7;
    }
    while (v7 != v392);
  }
}

void sub_20FD83364(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,uint64_t a32,void *__p,uint64_t a34,uint64_t a35,void *a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40)
{
  uint64_t v40;
  void *v42;
  void *v43;
  void *v44;

  v42 = *(void **)(v40 - 216);
  if (v42)
  {
    *(_QWORD *)(v40 - 208) = v42;
    operator delete(v42);
  }
  if (__p)
  {
    operator delete(__p);
    v43 = a36;
    if (!a36)
    {
LABEL_5:
      v44 = a39;
      if (!a39)
        goto LABEL_6;
      goto LABEL_9;
    }
  }
  else
  {
    v43 = a36;
    if (!a36)
      goto LABEL_5;
  }
  operator delete(v43);
  v44 = a39;
  if (!a39)
LABEL_6:
    _Unwind_Resume(exception_object);
LABEL_9:
  operator delete(v44);
  _Unwind_Resume(exception_object);
}

BOOL sub_20FD8348C(int a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, _BYTE *a6, int a7, float a8, float a9)
{
  int v9;
  uint64_t v10;
  int v11;
  int v12;
  uint64_t v13;
  int v14;
  int v17;
  int v18;
  BOOL v19;
  int v20;
  int v21;
  int v22;
  BOOL v23;
  BOOL v24;
  int v28;
  int v29;
  int v31;
  int v32;
  int v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;

  if (a1 >= 0)
    v9 = a1;
  else
    v9 = -a1;
  if (v9 <= (int)a9)
    return 0;
  *a6 = 0;
  v10 = a5 - 1;
  v11 = *(__int16 *)(a2 + 2 * v10);
  v12 = *(__int16 *)(a2 + 2 * a5);
  v13 = a5 + 1;
  v14 = *(__int16 *)(a2 + 2 * v13);
  if (v11 >= a1 || v12 >= a1 || v14 >= a1)
    goto LABEL_25;
  v17 = *(__int16 *)(a3 + 2 * v10);
  v18 = *(__int16 *)(a3 + 2 * v13);
  v19 = v17 < a1 && v18 < a1;
  if (!v19
    || ((v20 = *(__int16 *)(a4 + 2 * v10), v21 = *(__int16 *)(a4 + 2 * a5), v22 = *(__int16 *)(a4 + 2 * v13), v20 < a1)
      ? (v23 = v21 < a1)
      : (v23 = 0),
        v23 ? (v24 = v22 < a1) : (v24 = 0),
        !v24))
  {
LABEL_25:
    if (v11 > a1 && v12 > a1 && v14 > a1)
    {
      v28 = *(__int16 *)(a3 + 2 * v10);
      v29 = *(__int16 *)(a3 + 2 * v13);
      if (v28 > a1 && v29 > a1)
      {
        v31 = *(__int16 *)(a4 + 2 * v10);
        if (v31 > a1)
        {
          v32 = *(__int16 *)(a4 + 2 * a5);
          if (v32 > a1)
          {
            v33 = *(__int16 *)(a4 + 2 * v13);
            if (v33 > a1)
            {
              v34 = 2 * *(__int16 *)(a3 + 2 * a5);
              v35 = v28 - v34 + v29;
              v36 = v32 - v34 + v12;
              v37 = v33 - (v14 + v31) + v11;
              v38 = v35 >> 4;
              v39 = v36 >> 4;
              v40 = v37 >> 4;
              if (v35 >> 4 <= -2047)
                v38 = -2047;
              if ((int)v35 >= 0x8000)
                v38 = 2047;
              if (v39 <= -2047)
                v39 = -2047;
              if ((int)v36 >= 0x8000)
                v39 = 2047;
              if (v40 <= -2047)
                v40 = -2047;
              if ((int)v37 >= 0x8000)
                v40 = 2047;
              if (a7)
              {
                v36 = v39;
                v37 = v40;
              }
              else
              {
                v38 = v35;
              }
              if (fabs((double)(uint64_t)(v38 * v36 - ((unint64_t)(v37 * v37 + 8) >> 4)))
                 * (double)(int)a8 > (double)((v38 + v36) * (v38 + v36)))
              {
                *a6 = 1;
                return 1;
              }
            }
          }
        }
      }
    }
    return 0;
  }
  v41 = 2 * *(__int16 *)(a3 + 2 * a5);
  v42 = v17 - v41 + v18;
  v43 = v12 - v41 + v21;
  v44 = v11 - (v14 + v20) + v22;
  v45 = v42 >> 4;
  v46 = v43 >> 4;
  v47 = v44 >> 4;
  if (v42 >> 4 <= -2047)
    v45 = -2047;
  if ((int)v42 >= 0x8000)
    v45 = 2047;
  if (v46 <= -2047)
    v46 = -2047;
  if ((int)v43 >= 0x8000)
    v46 = 2047;
  if (v47 <= -2047)
    v47 = -2047;
  if ((int)v44 >= 0x8000)
    v47 = 2047;
  if (a7)
    v44 = v47;
  else
    v46 = v43;
  if (!a7)
    v45 = v42;
  return fabs((double)(uint64_t)(v45 * v46 - ((unint64_t)(v44 * v44 + 8) >> 4))) * (double)(int)a8 > (double)((v45 + v46) * (v45 + v46));
}

void sub_20FD836E4(uint64_t a1, int a2, int a3, uint64_t *a4, uint64_t a5)
{
  unint64_t v6;
  unint64_t v7;
  int v8;
  int v9;
  float v10;
  float v11;
  float v12;
  float v13;
  double v14;
  unint64_t v15;
  unint64_t v16;
  char *v17;
  char *v18;
  unint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  char *v23;
  char *v24;
  char *v25;
  char *v26;
  __int128 v27;
  char *v28;
  char *v29;
  void *v30;
  void *v31;
  char *v32;
  uint64_t v33;
  unint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  unint64_t v38;
  BOOL v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  char *v44;
  char *v45;
  char *v46;
  size_t v47;
  char *v48;
  char *v49;
  __int128 v50;
  char *v51;
  uint64_t *v52;
  char *v53;
  char *v54;
  void *v55;
  void *v56;
  char *v57;
  char *v58;
  void *v59;
  void *v60;
  uint64_t v61;
  unint64_t v62;
  unint64_t v63;
  _QWORD *v64;
  _QWORD *v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  _QWORD *v71;
  char *v72;
  uint64_t v73;
  unint64_t v74;
  char *v75;
  uint64_t v76;
  uint64_t *v77;
  int v78;
  char *v79;
  _QWORD *v80;
  unint64_t v81;
  _QWORD *v82;
  char *v83;
  uint64_t v84;
  unint64_t v85;
  uint64_t v86;
  unint64_t v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  char *v92;
  uint64_t *v93;
  unint64_t v94;
  uint64_t v95;
  __n128 *v96;
  __n128 *v97;
  __n128 *v98;
  unint64_t v99;
  __n128 v100;
  __n128 v101;
  __n128 *v102;
  __n128 *v103;
  unint64_t v104;
  unint64_t v105;
  char *v106;
  __n128 *v107;
  __n128 v108;
  __n128 v109;
  __n128 *v110;
  __n128 v111;
  __n128 v112;
  __n128 *v113;
  unint64_t v114;
  uint64_t v115;
  unint64_t v116;
  uint64_t i;
  __int128 v118;
  __int128 v119;
  char **v120;
  char *v121;
  char *v122;
  _QWORD *v123;
  unint64_t v124;
  char *v125;
  unint64_t v126;
  unint64_t v127;
  unint64_t v128;
  unint64_t v129;
  char *v130;
  char *v131;
  __int128 v132;
  __int128 v133;
  char *v134;
  __int128 v135;
  __int128 v136;
  _OWORD *v137;
  char *v138;
  void *v139;
  void *v140;
  unint64_t v141;
  uint64_t v142;
  int v143;
  unint64_t v144;
  unint64_t v146;
  __n128 *__p;
  char *v149;
  char *v150;
  BOOL (*v151)(float *, float *);

  v149 = 0;
  v150 = 0;
  v6 = *(_QWORD *)(a1 + 72);
  v7 = *(_QWORD *)(a1 + 80);
  v8 = (int)fmax((double)((5* (unsigned __int16)(((unint64_t)(1717986919 * a2) >> 33)+ ((unint64_t)(1717986919 * a2) >> 63))+ v6- 1)/ v6), 2.0);
  v9 = (int)fmax((double)((5* (unsigned __int16)(((unint64_t)(1717986919 * a3) >> 33)+ ((unint64_t)(1717986919 * a3) >> 63))+ v7- 1)/ v7), 2.0);
  v10 = log2f(256.0 / (float)(int)v6);
  v143 = v9;
  v11 = log2f((float)(v9 * v8));
  v12 = (float)v8;
  v13 = log2f((float)v8) + -1.0;
  v14 = fmin((double)(int)fmin(fmin((double)(int)(float)(v10 + -1.0), (double)(int)(float)(v11 + -1.0)), (double)((int)v13 - ((float)((float)(int)v13 - v13) == 0.0))), 4.0);
  if ((int)v14 >= 0)
    v15 = (1 << (int)v14);
  else
    v15 = 0;
  v141 = v15;
  v16 = v7 * v6;
  v142 = a5;
  if (v16)
  {
    if (v16 > 0xAAAAAAAAAAAAAAALL)
      sub_20E867F44();
    v17 = (char *)operator new(24 * v16);
    v149 = v17;
    bzero(v17, 24 * ((24 * v16 - 24) / 0x18) + 24);
    v18 = &v17[24 * ((24 * v16 - 24) / 0x18) + 24];
    v150 = v18;
  }
  else
  {
    v17 = 0;
    v18 = 0;
  }
  v19 = *(_QWORD *)(a1 + 80) * *(_QWORD *)(a1 + 72);
  v20 = *(_QWORD *)(a5 + 16);
  v21 = *(char **)a5;
  if (0xAAAAAAAAAAAAAAABLL * ((v20 - (uint64_t)v21) >> 3) < v19)
  {
    if (v19 > 0xAAAAAAAAAAAAAAALL)
      goto LABEL_154;
    v22 = *(char **)(v142 + 8);
    v23 = (char *)operator new(24 * v19);
    v24 = &v23[24 * v19];
    v25 = &v23[24 * ((v22 - v21) / 24)];
    if (v22 == v21)
    {
      *(_QWORD *)v142 = v25;
      *(_QWORD *)(v142 + 8) = v25;
      *(_QWORD *)(v142 + 16) = v24;
    }
    else
    {
      v26 = &v23[24 * ((v22 - v21) / 24)];
      do
      {
        v27 = *(_OWORD *)(v22 - 24);
        v22 -= 24;
        *(_OWORD *)(v26 - 24) = v27;
        v26 -= 24;
        *((_QWORD *)v26 + 2) = *((_QWORD *)v22 + 2);
        *(_QWORD *)v22 = 0;
        *((_QWORD *)v22 + 1) = 0;
        *((_QWORD *)v22 + 2) = 0;
      }
      while (v22 != v21);
      v21 = *(char **)v142;
      v28 = *(char **)(v142 + 8);
      *(_QWORD *)v142 = v26;
      *(_QWORD *)(v142 + 8) = v25;
      *(_QWORD *)(v142 + 16) = v24;
      if (v28 != v21)
      {
        v29 = v28;
        do
        {
          v31 = (void *)*((_QWORD *)v29 - 3);
          v29 -= 24;
          v30 = v31;
          if (v31)
          {
            *((_QWORD *)v28 - 2) = v30;
            operator delete(v30);
          }
          v28 = v29;
        }
        while (v29 != v21);
      }
    }
    if (v21)
      operator delete(v21);
  }
  v32 = v17;
  v33 = v18 - v17;
  v34 = v33 / 24;
  v35 = *(char **)v142;
  v36 = *(char **)(v142 + 8);
  v37 = (uint64_t)&v36[-*(_QWORD *)v142];
  v38 = 0xAAAAAAAAAAAAAAABLL * (v37 >> 3);
  v39 = v33 / 24 >= v38;
  if (v33 / 24 > v38)
  {
    v40 = *(_QWORD *)(v142 + 16);
    if (0xAAAAAAAAAAAAAAABLL * ((v40 - (uint64_t)v36) >> 3) >= v33 / 24 - v38)
    {
      bzero(*(void **)(v142 + 8), 24 * ((v33 - v37 - 24) / 0x18uLL) + 24);
      *(_QWORD *)(v142 + 8) = &v36[24 * ((v33 - v37 - 24) / 0x18uLL) + 24];
      v52 = (uint64_t *)v142;
      v53 = v32;
      goto LABEL_48;
    }
    if (v34 <= 0xAAAAAAAAAAAAAAALL)
    {
      v41 = 0xAAAAAAAAAAAAAAABLL * ((v40 - (uint64_t)v35) >> 3);
      v42 = 2 * v41;
      if (2 * v41 <= v34)
        v42 = v33 / 24;
      if (v41 >= 0x555555555555555)
        v43 = 0xAAAAAAAAAAAAAAALL;
      else
        v43 = v42;
      if (v43 > 0xAAAAAAAAAAAAAAALL)
        sub_20E877A38();
      v44 = (char *)operator new(24 * v43);
      v45 = &v44[8 * (v37 >> 3)];
      v46 = &v44[24 * v43];
      v47 = 24 * ((v33 - v37 - 24) / 0x18uLL) + 24;
      bzero(v45, v47);
      v48 = &v45[v47];
      if (v36 == v35)
      {
        *(_QWORD *)v142 = v45;
        *(_QWORD *)(v142 + 8) = v48;
        v52 = (uint64_t *)v142;
        *(_QWORD *)(v142 + 16) = v46;
        v53 = v32;
      }
      else
      {
        do
        {
          v49 = v45;
          *((_QWORD *)v45 - 2) = 0;
          *((_QWORD *)v45 - 1) = 0;
          v50 = *(_OWORD *)(v36 - 24);
          v36 -= 24;
          *(_OWORD *)(v45 - 24) = v50;
          v45 -= 24;
          *((_QWORD *)v49 - 1) = *((_QWORD *)v36 + 2);
          *(_QWORD *)v36 = 0;
          *((_QWORD *)v36 + 1) = 0;
          *((_QWORD *)v36 + 2) = 0;
        }
        while (v36 != v35);
        v36 = *(char **)v142;
        v51 = *(char **)(v142 + 8);
        *(_QWORD *)v142 = v45;
        *(_QWORD *)(v142 + 8) = v48;
        v52 = (uint64_t *)v142;
        *(_QWORD *)(v142 + 16) = v46;
        v53 = v32;
        if (v51 != v36)
        {
          v54 = v51;
          do
          {
            v56 = (void *)*((_QWORD *)v54 - 3);
            v54 -= 24;
            v55 = v56;
            if (v56)
            {
              *((_QWORD *)v51 - 2) = v55;
              operator delete(v55);
            }
            v51 = v54;
          }
          while (v54 != v36);
        }
      }
      if (v36)
        operator delete(v36);
      goto LABEL_48;
    }
LABEL_154:
    sub_20E867F44();
  }
  v52 = (uint64_t *)v142;
  v53 = v32;
  if (!v39)
  {
    v57 = &v35[24 * v34];
    if (v36 != v57)
    {
      v58 = *(char **)(v142 + 8);
      do
      {
        v60 = (void *)*((_QWORD *)v58 - 3);
        v58 -= 24;
        v59 = v60;
        if (v60)
        {
          *((_QWORD *)v36 - 2) = v59;
          operator delete(v59);
        }
        v36 = v58;
      }
      while (v58 != v57);
    }
    *(_QWORD *)(v142 + 8) = v57;
  }
LABEL_48:
  if (v18 != v53)
  {
    v61 = *v52;
    if (v34 <= 1)
      v62 = 1;
    else
      v62 = v33 / 24;
    if (v62 >= 2)
    {
      v63 = v62 & 0xFFFFFFFFFFFFFFFELL;
      v64 = v53 + 32;
      v65 = (_QWORD *)(v61 + 32);
      v66 = v62 & 0xFFFFFFFFFFFFFFFELL;
      do
      {
        v67 = *(v64 - 1);
        *(v64 - 3) = *(v64 - 4);
        *v64 = v67;
        v64 += 6;
        v68 = *(v65 - 1);
        *(v65 - 3) = *(v65 - 4);
        *v65 = v68;
        v65 += 6;
        v66 -= 2;
      }
      while (v66);
      if (v62 == v63)
        goto LABEL_59;
    }
    else
    {
      v63 = 0;
    }
    v69 = v62 - v63;
    v70 = 24 * v63 + 8;
    v71 = (_QWORD *)(v61 + v70);
    v72 = &v53[v70];
    do
    {
      *(_QWORD *)v72 = *((_QWORD *)v72 - 1);
      v72 += 24;
      *v71 = *(v71 - 1);
      v71 += 3;
      --v69;
    }
    while (v69);
  }
LABEL_59:
  v73 = *a4;
  if (a4[1] == *a4)
    goto LABEL_81;
  v74 = 0;
  v53 = v149;
  do
  {
    v76 = v73 + 48 * v74;
    v77 = (uint64_t *)&v149[24
                         * (vcvtms_s32_f32(*(float *)v76 / v12)
                          + vcvtms_s32_f32(*(float *)(v76 + 4) / (float)v143) * *(_DWORD *)(a1 + 72))];
    v78 = *(_DWORD *)(v76 + 44);
    v80 = v77 + 1;
    v79 = (char *)v77[1];
    v82 = v77 + 2;
    v81 = v77[2];
    if ((unint64_t)v79 < v81)
    {
      *(_DWORD *)v79 = v78;
      *((_QWORD *)v79 + 1) = v74;
      v75 = v79 + 16;
      v52 = (uint64_t *)v142;
      goto LABEL_62;
    }
    v83 = (char *)*v77;
    v84 = (uint64_t)&v79[-*v77] >> 4;
    v85 = v84 + 1;
    if ((unint64_t)(v84 + 1) >> 60)
      sub_20E867F44();
    v86 = v81 - (_QWORD)v83;
    if (v86 >> 3 > v85)
      v85 = v86 >> 3;
    if ((unint64_t)v86 >= 0x7FFFFFFFFFFFFFF0)
      v87 = 0xFFFFFFFFFFFFFFFLL;
    else
      v87 = v85;
    if (v87)
    {
      if (v87 >> 60)
        sub_20E877A38();
      v88 = (char *)operator new(16 * v87);
      v89 = (uint64_t)&v88[16 * v84];
      *(_DWORD *)v89 = v78;
      *(_QWORD *)(v89 + 8) = v74;
      v90 = v89;
      if (v79 != v83)
      {
        do
        {
LABEL_77:
          *(_OWORD *)(v90 - 16) = *((_OWORD *)v79 - 1);
          v90 -= 16;
          v79 -= 16;
        }
        while (v79 != v83);
        v79 = (char *)*v77;
        *v77 = v90;
        v75 = (char *)(v89 + 16);
        *v80 = v89 + 16;
        *v82 = &v88[16 * v87];
        if (!v79)
          goto LABEL_75;
LABEL_74:
        operator delete(v79);
        goto LABEL_75;
      }
    }
    else
    {
      v88 = 0;
      v89 = 16 * v84;
      *(_DWORD *)v89 = v78;
      *(_QWORD *)(v89 + 8) = v74;
      v90 = 16 * v84;
      if (v79 != v83)
        goto LABEL_77;
    }
    *v77 = v90;
    v75 = (char *)(v89 + 16);
    *v80 = v89 + 16;
    *v82 = &v88[16 * v87];
    if (v79)
      goto LABEL_74;
LABEL_75:
    v52 = (uint64_t *)v142;
LABEL_62:
    *v80 = v75;
    ++v74;
    v73 = *a4;
  }
  while (v74 < 0xAAAAAAAAAAAAAAABLL * ((a4[1] - *a4) >> 4));
  v18 = v150;
LABEL_81:
  if (v18 != v53)
  {
    v91 = 0;
    while (1)
    {
      v93 = (uint64_t *)&v53[24 * v91];
      v94 = (v93[1] - *v93) >> 4;
      if (v94 >= v141)
        v94 = v141;
      v144 = v94;
      v146 = v91;
      __p = 0;
      v95 = *v93;
      if (*(_QWORD *)&v53[24 * v91 + 8] != v95)
        break;
      v102 = 0;
      v96 = 0;
LABEL_111:
      v114 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * (v102 - v96));
      v151 = sub_20FD84328;
      if (v102 == v96)
        v115 = 0;
      else
        v115 = v114;
      sub_20FD84630((uint64_t)v96, v102, (uint64_t (**)(__n128 *, __n128 *))&v151, v115, 1);
      v116 = v144;
      if (v144)
      {
        for (i = 0; i != v144; ++i)
        {
          while (1)
          {
            v120 = (char **)(*v52 + 24 * v91);
            v121 = (char *)&__p[3 * i];
            v123 = v120 + 1;
            v122 = v120[1];
            v124 = (unint64_t)v120[2];
            if ((unint64_t)v122 >= v124)
              break;
            v118 = *(_OWORD *)v121;
            v119 = *((_OWORD *)v121 + 2);
            *((_OWORD *)v122 + 1) = *((_OWORD *)v121 + 1);
            *((_OWORD *)v122 + 2) = v119;
            *(_OWORD *)v122 = v118;
            *v123 = v122 + 48;
            if (++i == v116)
              goto LABEL_136;
          }
          v125 = *v120;
          v126 = 0xAAAAAAAAAAAAAAABLL * ((v122 - *v120) >> 4);
          v127 = v126 + 1;
          if (v126 + 1 > 0x555555555555555)
            sub_20E867F44();
          v128 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v124 - (_QWORD)v125) >> 4);
          if (2 * v128 > v127)
            v127 = 2 * v128;
          if (v128 >= 0x2AAAAAAAAAAAAAALL)
            v129 = 0x555555555555555;
          else
            v129 = v127;
          if (v129)
          {
            if (v129 > 0x555555555555555)
              sub_20E877A38();
            v130 = (char *)operator new(48 * v129);
          }
          else
          {
            v130 = 0;
          }
          v131 = &v130[48 * v126];
          v132 = *(_OWORD *)v121;
          v133 = *((_OWORD *)v121 + 2);
          *((_OWORD *)v131 + 1) = *((_OWORD *)v121 + 1);
          *((_OWORD *)v131 + 2) = v133;
          *(_OWORD *)v131 = v132;
          v134 = v131;
          if (v122 == v125)
          {
            v52 = (uint64_t *)v142;
          }
          else
          {
            v52 = (uint64_t *)v142;
            do
            {
              v135 = *((_OWORD *)v122 - 3);
              v136 = *((_OWORD *)v122 - 1);
              *((_OWORD *)v134 - 2) = *((_OWORD *)v122 - 2);
              *((_OWORD *)v134 - 1) = v136;
              *((_OWORD *)v134 - 3) = v135;
              v134 -= 48;
              v122 -= 48;
            }
            while (v122 != v125);
            v122 = *v120;
          }
          *v120 = v134;
          v137 = v131 + 48;
          *v123 = v131 + 48;
          v120[2] = &v130[48 * v129];
          v91 = v146;
          if (v122)
            operator delete(v122);
          v116 = v144;
          *v123 = v137;
        }
      }
LABEL_136:
      if (__p)
        operator delete(__p);
      ++v91;
      v53 = v149;
      v92 = v150;
      if (v91 >= 0xAAAAAAAAAAAAAAABLL * ((v150 - v149) >> 3))
        goto LABEL_139;
    }
    v96 = 0;
    v97 = 0;
    v98 = 0;
    v99 = 0;
    while (2)
    {
      v103 = (__n128 *)(*a4 + 48 * *(_QWORD *)(v95 + 16 * v99 + 8));
      if (v98 < v97)
      {
        v100 = *v103;
        v101 = v103[2];
        v98[1] = v103[1];
        v98[2] = v101;
        *v98 = v100;
        v102 = v98 + 3;
      }
      else
      {
        v104 = 0xAAAAAAAAAAAAAAABLL * (v98 - v96) + 1;
        if (v104 > 0x555555555555555)
          sub_20E867F44();
        if (0x5555555555555556 * (v97 - v96) > v104)
          v104 = 0x5555555555555556 * (v97 - v96);
        if (0xAAAAAAAAAAAAAAABLL * (v97 - v96) >= 0x2AAAAAAAAAAAAAALL)
          v105 = 0x555555555555555;
        else
          v105 = v104;
        if (v105)
        {
          if (v105 > 0x555555555555555)
            sub_20E877A38();
          v106 = (char *)operator new(48 * v105);
        }
        else
        {
          v106 = 0;
        }
        v107 = (__n128 *)&v106[16 * (v98 - v96)];
        v108 = *v103;
        v109 = v103[2];
        v107[1] = v103[1];
        v107[2] = v109;
        *v107 = v108;
        if (v98 == v96)
        {
          v113 = (__n128 *)&v106[16 * (v98 - v96)];
          v97 = (__n128 *)&v106[48 * v105];
          v102 = v107 + 3;
          __p = v113;
          if (v96)
            goto LABEL_105;
        }
        else
        {
          v110 = (__n128 *)&v106[16 * (v98 - v96)];
          do
          {
            v111 = v98[-3];
            v112 = v98[-1];
            v113 = v110 - 3;
            v110[-2] = v98[-2];
            v110[-1] = v112;
            v110[-3] = v111;
            v98 -= 3;
            v110 -= 3;
          }
          while (v98 != v96);
          v97 = (__n128 *)&v106[48 * v105];
          v102 = v107 + 3;
          __p = v113;
          if (v96)
          {
LABEL_105:
            operator delete(v96);
            v96 = v113;
            v53 = v149;
            goto LABEL_108;
          }
        }
        v96 = v113;
LABEL_108:
        v91 = v146;
      }
      ++v99;
      v95 = *(_QWORD *)&v53[24 * v91];
      v98 = v102;
      if (v99 >= (*(_QWORD *)&v53[24 * v91 + 8] - v95) >> 4)
        goto LABEL_111;
      continue;
    }
  }
  v92 = v53;
LABEL_139:
  if (v53)
  {
    if (v92 != v53)
    {
      v138 = v92;
      do
      {
        v140 = (void *)*((_QWORD *)v138 - 3);
        v138 -= 24;
        v139 = v140;
        if (v140)
        {
          *((_QWORD *)v92 - 2) = v139;
          operator delete(v139);
        }
        v92 = v138;
      }
      while (v138 != v53);
      v92 = v149;
    }
    operator delete(v92);
  }
}

void sub_20FD842B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  sub_20E9DD680((void **)va);
  _Unwind_Resume(a1);
}

void sub_20FD842C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  sub_20E9DD680((void **)va);
  _Unwind_Resume(a1);
}

void sub_20FD842D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  sub_20E9DD680((void **)va);
  _Unwind_Resume(a1);
}

void sub_20FD842EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, void *a19)
{
  if (__p)
    operator delete(__p);
  sub_20E9DD680(&a19);
  _Unwind_Resume(a1);
}

BOOL sub_20FD84328(float *a1, float *a2)
{
  float v2;
  float v3;
  float v4;
  float v5;

  v2 = fabsf(a1[11]);
  v3 = fabsf(a2[11]);
  if (v2 > v3)
    return 1;
  if ((float)(v2 - v3) != 0.0)
    return 0;
  v4 = a1[1];
  v5 = a2[1];
  if (fabsf(v4) < fabsf(v5))
    return 1;
  return (float)(v4 - v5) == 0.0 && fabsf(*a1) < fabsf(*a2);
}

void sub_20FD8439C(uint64_t a1, uint64_t a2, char *__src, char *a4, uint64_t a5)
{
  char *v6;
  char *v8;
  __int128 *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char *v17;
  char *v18;
  int64_t v19;
  char *v20;
  char *v21;
  __int128 *v22;
  char *v23;
  __int128 v24;
  __int128 v25;
  char *v26;
  uint64_t v27;
  char *v28;
  char *v29;
  __int128 v30;
  __int128 v31;
  char *v32;
  char *v33;
  __int128 v34;
  __int128 v35;
  char *v36;
  char *v37;

  if (a5 < 1)
    return;
  v6 = __src;
  v8 = *(char **)a1;
  v9 = *(__int128 **)(a1 + 8);
  v10 = (a2 - *(_QWORD *)a1) / 48;
  v11 = (char *)(*(_QWORD *)a1 + 48 * v10);
  v12 = *(_QWORD *)(a1 + 16);
  if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * ((v12 - (uint64_t)v9) >> 4)) < a5)
  {
    v13 = a5 - 0x5555555555555555 * (((char *)v9 - v8) >> 4);
    if (v13 > 0x555555555555555)
      sub_20E867F44();
    v14 = 0xAAAAAAAAAAAAAAABLL * ((v12 - (uint64_t)v8) >> 4);
    v15 = 2 * v14;
    if (2 * v14 <= v13)
      v15 = v13;
    if (v14 >= 0x2AAAAAAAAAAAAAALL)
      v16 = 0x555555555555555;
    else
      v16 = v15;
    if (v16)
    {
      if (v16 > 0x555555555555555)
        sub_20E877A38();
      v17 = (char *)operator new(48 * v16);
    }
    else
    {
      v17 = 0;
    }
    v26 = &v17[48 * v10];
    v27 = 48 * a5;
    v28 = &v26[48 * a5];
    v29 = v26;
    do
    {
      v30 = *(_OWORD *)v6;
      v31 = *((_OWORD *)v6 + 2);
      *((_OWORD *)v29 + 1) = *((_OWORD *)v6 + 1);
      *((_OWORD *)v29 + 2) = v31;
      *(_OWORD *)v29 = v30;
      v29 += 48;
      v6 += 48;
      v27 -= 48;
    }
    while (v27);
    v32 = *(char **)a1;
    if (*(char **)a1 != v11)
    {
      v33 = v11;
      do
      {
        v34 = *((_OWORD *)v33 - 3);
        v35 = *((_OWORD *)v33 - 1);
        *((_OWORD *)v26 - 2) = *((_OWORD *)v33 - 2);
        *((_OWORD *)v26 - 1) = v35;
        *((_OWORD *)v26 - 3) = v34;
        v26 -= 48;
        v33 -= 48;
      }
      while (v33 != v32);
      v9 = *(__int128 **)(a1 + 8);
    }
    v36 = &v17[48 * v16];
    if (v9 != (__int128 *)v11)
      memmove(v28, v11, (char *)v9 - v11);
    v37 = *(char **)a1;
    *(_QWORD *)a1 = v26;
    *(_QWORD *)(a1 + 8) = &v28[(char *)v9 - v11];
    *(_QWORD *)(a1 + 16) = v36;
    if (v37)
      operator delete(v37);
    return;
  }
  if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * (((char *)v9 - v11) >> 4)) >= a5)
  {
    v18 = &__src[48 * a5];
    v20 = *(char **)(a1 + 8);
LABEL_18:
    v21 = &v11[48 * a5];
    v22 = (__int128 *)&v20[-48 * a5];
    v23 = v20;
    if (v22 < v9)
    {
      v23 = v20;
      do
      {
        v24 = *v22;
        v25 = v22[2];
        *((_OWORD *)v23 + 1) = v22[1];
        *((_OWORD *)v23 + 2) = v25;
        *(_OWORD *)v23 = v24;
        v23 += 48;
        v22 += 3;
      }
      while (v22 < v9);
    }
    *(_QWORD *)(a1 + 8) = v23;
    if (v20 != v21)
      memmove(&v11[48 * a5], v11, v20 - v21);
    if (v18 != v6)
      memmove(v11, v6, v18 - v6);
    return;
  }
  v18 = &__src[16 * (((char *)v9 - v11) >> 4)];
  v19 = a4 - v18;
  if (a4 != v18)
    memmove(*(void **)(a1 + 8), &__src[16 * (((char *)v9 - v11) >> 4)], a4 - v18);
  v20 = (char *)v9 + v19;
  *(_QWORD *)(a1 + 8) = (char *)v9 + v19;
  if ((char *)v9 - v11 >= 1)
    goto LABEL_18;
}

void sub_20FD84630(uint64_t a1, __n128 *a2, uint64_t (**a3)(__n128 *, __n128 *), uint64_t a4, char a5)
{
  __n128 *v9;
  __n128 *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  __n128 *v14;
  uint64_t (*v15)(__n128 *, __n128 *);
  char v16;
  int v17;
  __n128 v18;
  __n128 v19;
  __n128 v20;
  __n128 v21;
  char v22;
  int v23;
  __n128 v24;
  __n128 v25;
  __n128 v26;
  __n128 v27;
  __n128 v28;
  __n128 v29;
  __n128 v30;
  __n128 v31;
  __n128 v32;
  __n128 v33;
  __n128 v34;
  __n128 v35;
  __n128 v36;
  __n128 v37;
  __n128 v38;
  __n128 v39;
  __n128 v40;
  __n128 v41;
  __n128 v42;
  __n128 v43;
  __n128 v44;
  __n128 v45;
  __n128 v46;
  __n128 v47;
  __n128 v48;
  __n128 v49;
  __n128 v50;
  __n128 v51;
  __n128 v52;
  __n128 v53;
  __n128 v54;
  __n128 v55;
  __n128 v56;
  __n128 v57;
  __n128 v58;
  __n128 v59;
  __n128 v60;
  __n128 v61;
  __n128 v62;
  __n128 v63;
  __n128 *v64;
  __n128 *v65;
  char v66;
  int v67;
  __n128 v68;
  __n128 v69;
  __n128 v70;
  __n128 *v71;
  __n128 v72;
  __n128 v73;
  __n128 v74;
  __n128 v75;
  __n128 v76;
  __n128 v77;
  __n128 v78;
  __n128 v79;
  __n128 v80;
  __n128 v81;
  __n128 v82;
  __n128 v83;
  __int128 v84;
  __n128 v85;
  __n128 v86;
  __n128 v87;
  __n128 v88;
  __n128 v89;
  __n128 v90;
  __n128 v91;
  __n128 v92;
  __n128 v93;
  __n128 v94;
  __n128 v95;
  __n128 v96;
  __n128 v97;
  __n128 v98;
  __n128 v99;
  __n128 v100;
  __int128 v101;
  __n128 v102;
  __n128 v103;
  __n128 v104;
  __n128 v105;
  __n128 *v106;
  __n128 *v107;
  char v108;
  int v109;
  __n128 v110;
  __n128 v111;
  __n128 v112;
  __n128 *v113;
  __n128 v114;
  __n128 v115;
  __n128 v116;
  __n128 v117;
  __n128 v118;
  __n128 v119;
  __n128 v120;
  __n128 v121;
  __n128 v122;
  __n128 v123;
  __n128 v124;
  __n128 v125;
  __n128 v126;
  __n128 v127;
  __n128 v128;
  __n128 v129;
  __n128 v130;
  __n128 v131;
  __n128 v132;
  __n128 v133;
  __n128 v134;
  __n128 v135;
  char v136;
  int v137;
  __n128 v138;
  __n128 v139;
  __n128 v140;
  __n128 v141;
  __n128 v142;
  __n128 v143;
  __n128 v144;
  __n128 v145;
  __n128 v146;
  __n128 v147;
  __n128 v148;
  __n128 v149;
  __n128 v150;
  __n128 v151;
  __n128 v152;
  __n128 v153;
  __n128 v154;
  __n128 v155;
  __n128 v156;
  __n128 v157;
  __n128 v158;
  __n128 v159;
  __n128 v160;
  __n128 v161;
  __n128 v162;
  __n128 v163;
  __n128 v164;
  __n128 v165;
  __n128 v166;
  uint64_t v167;
  __n128 v168;
  __n128 v169;
  unint64_t v170;
  __n128 *v171;
  __n128 *v172;
  __n128 *v173;
  __n128 v174;
  __n128 v175;
  __n128 v176;
  __n128 v177;
  __n128 v178;
  __n128 v179;
  __n128 *v180;
  __n128 v181;
  __n128 v182;
  __n128 v183;
  __n128 v184;
  BOOL v185;
  __n128 v186;
  __n128 v187;
  __n128 *v188;
  int v189;
  __n128 *v190;
  __n128 v191;
  __n128 v192;
  __n128 v193;
  __n128 v194;
  __n128 v195;
  __n128 v196;
  __n128 *v197;
  __n128 v198;
  __n128 v199;
  __n128 v200;
  __n128 v201;
  __n128 *v202;
  char v203;
  int v204;
  __n128 v205;
  __n128 v206;
  __n128 v207;
  __n128 v208;
  __n128 v209;
  __n128 v210;
  __n128 v211;
  __n128 *v212;
  __n128 *v213;
  __n128 v214;
  __n128 v215;
  __n128 v216;
  __n128 v217;
  __n128 v218;
  __n128 v219;
  __int128 v220;
  __int128 v221;
  __n128 v222;
  __int128 v223;
  __int128 v224;
  __int128 v225;
  __n128 v226;
  __int128 v227;
  __n128 *v228;
  BOOL v230;
  uint64_t v231;
  __n128 *v232;
  _OWORD *v233;
  __n128 v234;
  __n128 v235;
  __n128 *v236;
  __n128 v237;
  __n128 v238;
  uint64_t v239;
  _OWORD *v240;
  __int128 v241;
  int64_t v242;
  __n128 v243;
  __n128 v244;
  BOOL v245;
  uint64_t v246;
  __n128 *v247;
  __n128 *v248;
  __n128 v249;
  __n128 v250;
  __n128 *v251;
  __n128 v252;
  __n128 v253;
  uint64_t v254;
  uint64_t v255;
  int64_t v256;
  __n128 *v257;
  __n128 v258;
  __n128 v259;
  uint64_t v260;
  __n128 v261;
  __n128 v262;
  _OWORD *v263;
  __n128 v264;
  __n128 v265;
  __n128 *v266;
  uint64_t v267;
  uint64_t v268;
  __n128 v269;
  __n128 v270;
  __n128 v271;
  __n128 v272;
  uint64_t v273;
  unint64_t v274;
  __n128 *v275;
  __n128 v276;
  __n128 v277;
  __n128 *v278;
  __n128 v279;
  __n128 v280;
  __n128 v281;
  __n128 v282;
  __n128 v283;
  __n128 v284;
  __n128 v285;
  __n128 v286;
  __n128 v287;
  __n128 v288;
  __n128 v289;
  __n128 v290;
  __n128 v291;
  __n128 *v292;
  __n128 *v293;
  __n128 v294;
  __n128 v295;
  __n128 *v296;
  __n128 v297;
  char v298;
  __n128 v299;
  __n128 v300;
  __n128 v301;
  __n128 v302;
  __int128 v303;
  __n128 v304;
  __n128 v305;
  __n128 v306;
  __n128 *v307;
  __n128 *v308;
  __n128 *v309;
  __n128 *v310;
  int64_t v312;
  __n128 v313;
  __n128 v314;
  __n128 v315;
  __n128 v316;
  __n128 v317;
  __n128 v318;

BOOL sub_20FD856CC(uint64_t a1, __n128 *a2, uint64_t (**a3)(__n128 *, __n128 *))
{
  unint64_t v6;
  _BOOL8 result;
  __n128 *v8;
  __n128 v9;
  __n128 v10;
  __n128 v11;
  __n128 v12;
  __n128 v13;
  __n128 *v14;
  __n128 *v15;
  char v16;
  int v17;
  __n128 v18;
  __n128 v19;
  __n128 v20;
  __n128 v21;
  __n128 v22;
  __n128 *v23;
  __n128 *v24;
  __n128 *v25;
  __n128 v26;
  __n128 v27;
  __n128 v28;
  __n128 v29;
  __n128 v30;
  __n128 v31;
  __int128 v32;
  __int128 v33;
  __n128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __n128 v38;
  __int128 v39;
  __n128 *v40;
  __n128 *v41;
  char v42;
  int v43;
  __int128 v44;
  __int128 v45;
  __n128 v46;
  __int128 v47;
  __n128 v48;
  __n128 v49;
  __n128 v50;
  __n128 v51;
  __n128 v52;
  __n128 v53;
  __n128 v54;
  __n128 v55;
  __n128 v56;
  __int128 v57;
  __int128 v58;
  __n128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __n128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __n128 v67;
  __int128 v68;
  __n128 v69;
  __n128 v70;
  __int128 v71;
  __int128 v72;
  __n128 v73;
  __int128 v74;
  __int128 v75;
  __n128 *v76;
  uint64_t v77;
  int v78;
  __n128 *v79;
  __n128 v80;
  __n128 v81;
  uint64_t v82;
  __n128 *v83;
  __n128 v84;
  __n128 v85;
  __n128 v86;
  __n128 v87;

  v6 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)a2 - a1) >> 4);
  result = 1;
  switch(v6)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      v8 = a2 - 3;
      if (!(*a3)(a2 - 3, (__n128 *)a1))
        return 1;
      v9 = *(__n128 *)a1;
      v10 = *(__n128 *)(a1 + 16);
      v11 = *(__n128 *)(a1 + 32);
      v13 = a2[-2];
      v12 = a2[-1];
      *(__n128 *)a1 = *v8;
      *(__n128 *)(a1 + 16) = v13;
      *(__n128 *)(a1 + 32) = v12;
      a2[-2] = v10;
      a2[-1] = v11;
      result = 1;
      *v8 = v9;
      return result;
    case 3uLL:
      v14 = (__n128 *)(a1 + 48);
      v15 = a2 - 3;
      v16 = (*a3)((__n128 *)(a1 + 48), (__n128 *)a1);
      v17 = (*a3)(v15, (__n128 *)(a1 + 48));
      if ((v16 & 1) == 0)
      {
        if (!v17)
          return 1;
        v48 = *v14;
        v49 = *(__n128 *)(a1 + 64);
        v50 = *(__n128 *)(a1 + 80);
        v52 = v15[1];
        v51 = v15[2];
        *v14 = *v15;
        *(__n128 *)(a1 + 64) = v52;
        *(__n128 *)(a1 + 80) = v51;
        v15[1] = v49;
        v15[2] = v50;
        *v15 = v48;
        goto LABEL_17;
      }
      if (v17)
      {
        v18 = *(__n128 *)a1;
        v19 = *(__n128 *)(a1 + 16);
        v20 = *(__n128 *)(a1 + 32);
        v22 = v15[1];
        v21 = v15[2];
        *(__n128 *)a1 = *v15;
        *(__n128 *)(a1 + 16) = v22;
        *(__n128 *)(a1 + 32) = v21;
      }
      else
      {
        v66 = *(_OWORD *)(a1 + 16);
        v65 = *(_OWORD *)(a1 + 32);
        v67 = *(__n128 *)a1;
        v68 = *(_OWORD *)(a1 + 64);
        *(__n128 *)a1 = *v14;
        *(_OWORD *)(a1 + 16) = v68;
        *(_OWORD *)(a1 + 32) = *(_OWORD *)(a1 + 80);
        *v14 = v67;
        *(_OWORD *)(a1 + 64) = v66;
        *(_OWORD *)(a1 + 80) = v65;
        if (!(*a3)(v15, (__n128 *)(a1 + 48)))
          return 1;
        v18 = *v14;
        v19 = *(__n128 *)(a1 + 64);
        v20 = *(__n128 *)(a1 + 80);
        v70 = v15[1];
        v69 = v15[2];
        *v14 = *v15;
        *(__n128 *)(a1 + 64) = v70;
        *(__n128 *)(a1 + 80) = v69;
      }
      v15[1] = v19;
      v15[2] = v20;
      result = 1;
      *v15 = v18;
      return result;
    case 4uLL:
      sub_20FD85B44((__n128 *)a1, (__n128 *)(a1 + 48), (__n128 *)(a1 + 96), a2 - 3, a3);
      return 1;
    case 5uLL:
      v14 = (__n128 *)(a1 + 48);
      v23 = (__n128 *)(a1 + 96);
      v24 = (__n128 *)(a1 + 144);
      v25 = a2 - 3;
      v26 = sub_20FD85B44((__n128 *)a1, (__n128 *)(a1 + 48), (__n128 *)(a1 + 96), (__n128 *)(a1 + 144), a3);
      if (!((unsigned int (*)(__n128 *, uint64_t, __n128))*a3)(v25, a1 + 144, v26))
        return 1;
      v27 = *v24;
      v28 = *(__n128 *)(a1 + 160);
      v29 = *(__n128 *)(a1 + 176);
      v31 = v25[1];
      v30 = v25[2];
      *v24 = *v25;
      *(__n128 *)(a1 + 160) = v31;
      *(__n128 *)(a1 + 176) = v30;
      v25[1] = v28;
      v25[2] = v29;
      *v25 = v27;
      if (!(*a3)((__n128 *)(a1 + 144), (__n128 *)(a1 + 96)))
        return 1;
      v33 = *(_OWORD *)(a1 + 112);
      v32 = *(_OWORD *)(a1 + 128);
      v34 = *v23;
      v35 = *(_OWORD *)(a1 + 160);
      *v23 = *v24;
      *(_OWORD *)(a1 + 112) = v35;
      *(_OWORD *)(a1 + 128) = *(_OWORD *)(a1 + 176);
      *v24 = v34;
      *(_OWORD *)(a1 + 160) = v33;
      *(_OWORD *)(a1 + 176) = v32;
      if (!(*a3)((__n128 *)(a1 + 96), (__n128 *)(a1 + 48)))
        return 1;
      v37 = *(_OWORD *)(a1 + 64);
      v36 = *(_OWORD *)(a1 + 80);
      v38 = *v14;
      v39 = *(_OWORD *)(a1 + 112);
      *v14 = *v23;
      *(_OWORD *)(a1 + 64) = v39;
      *(_OWORD *)(a1 + 80) = *(_OWORD *)(a1 + 128);
      *v23 = v38;
      *(_OWORD *)(a1 + 112) = v37;
      *(_OWORD *)(a1 + 128) = v36;
LABEL_17:
      if (!(*a3)(v14, (__n128 *)a1))
        return 1;
      v54 = *(__n128 *)(a1 + 16);
      v53 = *(__n128 *)(a1 + 32);
      v55 = *(__n128 *)a1;
      v56 = v14[1];
      *(__n128 *)a1 = *v14;
      *(__n128 *)(a1 + 16) = v56;
      *(__n128 *)(a1 + 32) = v14[2];
      *v14 = v55;
      v14[1] = v54;
      result = 1;
      v14[2] = v53;
      return result;
    default:
      v40 = (__n128 *)(a1 + 96);
      v41 = (__n128 *)(a1 + 48);
      v42 = (*a3)((__n128 *)(a1 + 48), (__n128 *)a1);
      v43 = (*a3)((__n128 *)(a1 + 96), (__n128 *)(a1 + 48));
      if ((v42 & 1) != 0)
      {
        if (v43)
        {
          v45 = *(_OWORD *)(a1 + 16);
          v44 = *(_OWORD *)(a1 + 32);
          v46 = *(__n128 *)a1;
          v47 = *(_OWORD *)(a1 + 112);
          *(__n128 *)a1 = *v40;
          *(_OWORD *)(a1 + 16) = v47;
          *(_OWORD *)(a1 + 32) = *(_OWORD *)(a1 + 128);
        }
        else
        {
          v72 = *(_OWORD *)(a1 + 16);
          v71 = *(_OWORD *)(a1 + 32);
          v73 = *(__n128 *)a1;
          v74 = *(_OWORD *)(a1 + 64);
          *(__n128 *)a1 = *v41;
          *(_OWORD *)(a1 + 16) = v74;
          *(_OWORD *)(a1 + 32) = *(_OWORD *)(a1 + 80);
          *v41 = v73;
          *(_OWORD *)(a1 + 64) = v72;
          *(_OWORD *)(a1 + 80) = v71;
          if (!(*a3)((__n128 *)(a1 + 96), (__n128 *)(a1 + 48)))
            goto LABEL_28;
          v45 = *(_OWORD *)(a1 + 64);
          v44 = *(_OWORD *)(a1 + 80);
          v46 = *v41;
          v75 = *(_OWORD *)(a1 + 112);
          *v41 = *v40;
          *(_OWORD *)(a1 + 64) = v75;
          *(_OWORD *)(a1 + 80) = *(_OWORD *)(a1 + 128);
        }
        *v40 = v46;
        *(_OWORD *)(a1 + 112) = v45;
        *(_OWORD *)(a1 + 128) = v44;
      }
      else if (v43)
      {
        v58 = *(_OWORD *)(a1 + 64);
        v57 = *(_OWORD *)(a1 + 80);
        v59 = *v41;
        v60 = *(_OWORD *)(a1 + 112);
        *v41 = *v40;
        *(_OWORD *)(a1 + 64) = v60;
        *(_OWORD *)(a1 + 80) = *(_OWORD *)(a1 + 128);
        *v40 = v59;
        *(_OWORD *)(a1 + 112) = v58;
        *(_OWORD *)(a1 + 128) = v57;
        if ((*a3)((__n128 *)(a1 + 48), (__n128 *)a1))
        {
          v62 = *(_OWORD *)(a1 + 16);
          v61 = *(_OWORD *)(a1 + 32);
          v63 = *(__n128 *)a1;
          v64 = *(_OWORD *)(a1 + 64);
          *(__n128 *)a1 = *v41;
          *(_OWORD *)(a1 + 16) = v64;
          *(_OWORD *)(a1 + 32) = *(_OWORD *)(a1 + 80);
          *v41 = v63;
          *(_OWORD *)(a1 + 64) = v62;
          *(_OWORD *)(a1 + 80) = v61;
        }
      }
LABEL_28:
      v76 = (__n128 *)(a1 + 144);
      if ((__n128 *)(a1 + 144) == a2)
        return 1;
      v77 = 0;
      v78 = 0;
      break;
  }
  while (1)
  {
    if ((*a3)(v76, v40))
    {
      v81 = v76[1];
      v85 = *v76;
      v86 = v81;
      v87 = v76[2];
      v82 = v77;
      do
      {
        v83 = (__n128 *)(a1 + v82);
        v84 = *(__n128 *)(a1 + v82 + 112);
        v83[9] = *(__n128 *)(a1 + v82 + 96);
        v83[10] = v84;
        v83[11] = *(__n128 *)(a1 + v82 + 128);
        if (v82 == -96)
        {
          v79 = (__n128 *)a1;
          goto LABEL_31;
        }
        v82 -= 48;
      }
      while (((*a3)(&v85, v83 + 3) & 1) != 0);
      v79 = (__n128 *)(a1 + v82 + 144);
LABEL_31:
      v80 = v86;
      *v79 = v85;
      v79[1] = v80;
      v79[2] = v87;
      if (++v78 == 8)
        return &v76[3] == a2;
    }
    v40 = v76;
    v77 += 48;
    v76 += 3;
    if (v76 == a2)
      return 1;
  }
}

__n128 sub_20FD85B44(__n128 *a1, __n128 *a2, __n128 *a3, __n128 *a4, uint64_t (**a5)(__n128 *, __n128 *))
{
  char v10;
  int v11;
  __n128 v12;
  __n128 v13;
  __n128 v14;
  __n128 v15;
  __n128 v16;
  __n128 v17;
  __n128 v18;
  __n128 v19;
  __n128 v20;
  __n128 v21;
  __n128 v22;
  __n128 v23;
  __n128 v24;
  __n128 v25;
  __n128 v26;
  __n128 v27;
  __n128 v28;
  __n128 v29;
  __n128 v30;
  __n128 v31;
  __n128 v32;
  __n128 v33;
  __n128 result;
  __n128 v35;
  __n128 v36;
  __n128 v37;
  __n128 v38;
  __n128 v39;
  __n128 v40;
  __n128 v41;
  __n128 v42;
  __n128 v43;
  __n128 v44;
  __n128 v45;
  __n128 v46;
  __n128 v47;
  __n128 v48;

  v10 = (*a5)(a2, a1);
  v11 = (*a5)(a3, a2);
  if ((v10 & 1) != 0)
  {
    if (v11)
    {
      v12 = *a1;
      v13 = a1[1];
      v14 = a1[2];
      v16 = a3[1];
      v15 = a3[2];
      *a1 = *a3;
      a1[1] = v16;
      a1[2] = v15;
LABEL_9:
      a3[1] = v13;
      a3[2] = v14;
      *a3 = v12;
      goto LABEL_10;
    }
    v27 = *a1;
    v28 = a1[1];
    v29 = a1[2];
    v31 = a2[1];
    v30 = a2[2];
    *a1 = *a2;
    a1[1] = v31;
    a1[2] = v30;
    a2[1] = v28;
    a2[2] = v29;
    *a2 = v27;
    if ((*a5)(a3, a2))
    {
      v12 = *a2;
      v13 = a2[1];
      v14 = a2[2];
      v33 = a3[1];
      v32 = a3[2];
      *a2 = *a3;
      a2[1] = v33;
      a2[2] = v32;
      goto LABEL_9;
    }
  }
  else if (v11)
  {
    v17 = *a2;
    v18 = a2[1];
    v19 = a2[2];
    v21 = a3[1];
    v20 = a3[2];
    *a2 = *a3;
    a2[1] = v21;
    a2[2] = v20;
    a3[1] = v18;
    a3[2] = v19;
    *a3 = v17;
    if ((*a5)(a2, a1))
    {
      v22 = *a1;
      v23 = a1[1];
      v24 = a1[2];
      v26 = a2[1];
      v25 = a2[2];
      *a1 = *a2;
      a1[1] = v26;
      a1[2] = v25;
      a2[1] = v23;
      a2[2] = v24;
      *a2 = v22;
    }
  }
LABEL_10:
  if ((*a5)(a4, a3))
  {
    v35 = *a3;
    v36 = a3[1];
    v37 = a3[2];
    v39 = a4[1];
    v38 = a4[2];
    *a3 = *a4;
    a3[1] = v39;
    a3[2] = v38;
    a4[1] = v36;
    a4[2] = v37;
    *a4 = v35;
    if ((*a5)(a3, a2))
    {
      v40 = *a2;
      v41 = a2[1];
      v42 = a2[2];
      v44 = a3[1];
      v43 = a3[2];
      *a2 = *a3;
      a2[1] = v44;
      a2[2] = v43;
      a3[1] = v41;
      a3[2] = v42;
      *a3 = v40;
      if ((*a5)(a2, a1))
      {
        result = *a1;
        v45 = a1[1];
        v46 = a1[2];
        v48 = a2[1];
        v47 = a2[2];
        *a1 = *a2;
        a1[1] = v48;
        a1[2] = v47;
        a2[1] = v45;
        a2[2] = v46;
        *a2 = result;
      }
    }
  }
  return result;
}

uint64_t sub_20FD85D24(uint64_t a1, uint64_t a2, uint64_t a3, char **a4)
{
  float64x2_t **v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  char *v12;
  unint64_t v13;
  unint64_t v14;
  char *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  char *v19;
  char *v20;
  char *v21;
  char *v22;
  __int128 v23;
  char *v24;
  char *v25;
  void *v26;
  void *v27;
  char *v28;
  char *v29;
  void *v30;
  void *v31;
  size_t v32;
  unint64_t v33;
  unsigned int v34;
  double v36;
  float64x2_t **v43;
  float64x2_t *v44;
  char **v45;
  char **v46;
  char *v47;
  float64x2_t *v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  unint64_t v57;
  char *v58;
  char *v59;
  uint64_t *v61;
  float64x2_t v62;
  float64x2_t v63;
  float64x2_t v64;
  float64x2_t v65;
  float64x2_t v66;
  float64x2_t __src[20];
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  int v72;
  _BYTE __dst[320];
  uint64_t v74;

  v74 = *MEMORY[0x24BDAC8D0];
  kdebug_trace();
  v61 = (uint64_t *)(a1 + 160);
  v8 = sub_20F16277C(a1, (_QWORD *)a2, a3, (void **)(a1 + 160));
  kdebug_trace();
  v68 = ((char *)v8[1] - (char *)*v8) >> 5;
  v69 = 0;
  v70 = 0;
  v71 = 0;
  v72 = 733220988;
  kdebug_trace();
  v9 = (char *)v8[1] - (char *)*v8;
  v10 = v9 >> 5;
  v11 = *a4;
  v12 = a4[1];
  v13 = 0xAAAAAAAAAAAAAAABLL * ((v12 - *a4) >> 3);
  v14 = (v9 >> 5) - v13;
  if (v9 >> 5 <= v13)
  {
    if (v9 >> 5 >= v13)
    {
      if (v12 == *a4)
        return kdebug_trace();
      goto LABEL_33;
    }
    v28 = &v11[24 * v10];
    if (v12 != v28)
    {
      v29 = a4[1];
      do
      {
        v31 = (void *)*((_QWORD *)v29 - 3);
        v29 -= 24;
        v30 = v31;
        if (v31)
        {
          *((_QWORD *)v12 - 2) = v30;
          operator delete(v30);
        }
        v12 = v29;
      }
      while (v29 != v28);
    }
    a4[1] = v28;
    if (v28 != *a4)
    {
LABEL_33:
      v33 = 0;
      v34 = 1;
      do
      {
        v43 = v8;
        v44 = &(*v8)[2 * v33];
        v66 = *v44;
        v65 = v44[1];
        sub_20FD3DA90(*(_DWORD *)(a2 + 32), *(_DWORD *)(a2 + 48), v61, &v66, &v65, __src);
        v45 = (char **)&(*a4)[24 * v33];
        v46 = v45 + 1;
        v47 = v45[1];
        v48 = (float64x2_t *)*v45;
        v49 = v47 - *v45;
        v50 = 0x51B3BEA3677D46CFLL * (v49 >> 3);
        if (v47 == *v45)
        {
          v51 = (uint64_t)&(*a4)[24 * v33];
          v54 = *(_QWORD *)(v51 + 16);
          v53 = (_QWORD *)(v51 + 16);
          v52 = v54;
          if (0x51B3BEA3677D46CFLL * ((v54 - (uint64_t)v47) >> 3) >= 1 - v50)
          {
            if (v49 != 376)
            {
              *((_QWORD *)v47 + 46) = 0;
              *((_OWORD *)v47 + 21) = 0u;
              *((_OWORD *)v47 + 22) = 0u;
              *((_OWORD *)v47 + 19) = 0u;
              *((_OWORD *)v47 + 20) = 0u;
              *((_OWORD *)v47 + 17) = 0u;
              *((_OWORD *)v47 + 18) = 0u;
              *((_OWORD *)v47 + 15) = 0u;
              *((_OWORD *)v47 + 16) = 0u;
              *((_OWORD *)v47 + 13) = 0u;
              *((_OWORD *)v47 + 14) = 0u;
              *((_OWORD *)v47 + 11) = 0u;
              *((_OWORD *)v47 + 12) = 0u;
              *((_OWORD *)v47 + 9) = 0u;
              *((_OWORD *)v47 + 10) = 0u;
              *((_OWORD *)v47 + 7) = 0u;
              *((_OWORD *)v47 + 8) = 0u;
              *((_OWORD *)v47 + 5) = 0u;
              *((_OWORD *)v47 + 6) = 0u;
              *((_OWORD *)v47 + 3) = 0u;
              *((_OWORD *)v47 + 4) = 0u;
              *((_OWORD *)v47 + 1) = 0u;
              *((_OWORD *)v47 + 2) = 0u;
              *(_OWORD *)v47 = 0u;
              v47 += 376;
            }
            v8 = v43;
            *v46 = v47;
            v48 = (float64x2_t *)*v45;
          }
          else
          {
            v55 = 0x51B3BEA3677D46CFLL * ((v52 - (uint64_t)v48) >> 3);
            v56 = 2 * v55;
            if (2 * v55 <= 1)
              v56 = 1;
            if (v55 >= 0x572620AE4C415CLL)
              v57 = 0xAE4C415C9882B9;
            else
              v57 = v56;
            if (v57 > 0xAE4C415C9882B9)
              sub_20E877A38();
            v58 = (char *)operator new(376 * v57);
            v59 = &v58[376 * v50];
            *((_QWORD *)v59 + 46) = 0;
            *((_OWORD *)v59 + 21) = 0u;
            *((_OWORD *)v59 + 22) = 0u;
            *((_OWORD *)v59 + 19) = 0u;
            *((_OWORD *)v59 + 20) = 0u;
            *((_OWORD *)v59 + 17) = 0u;
            *((_OWORD *)v59 + 18) = 0u;
            *((_OWORD *)v59 + 15) = 0u;
            *((_OWORD *)v59 + 16) = 0u;
            *((_OWORD *)v59 + 13) = 0u;
            *((_OWORD *)v59 + 14) = 0u;
            *((_OWORD *)v59 + 11) = 0u;
            *((_OWORD *)v59 + 12) = 0u;
            *((_OWORD *)v59 + 9) = 0u;
            *((_OWORD *)v59 + 10) = 0u;
            *((_OWORD *)v59 + 7) = 0u;
            *((_OWORD *)v59 + 8) = 0u;
            *((_OWORD *)v59 + 5) = 0u;
            *((_OWORD *)v59 + 6) = 0u;
            *((_OWORD *)v59 + 3) = 0u;
            *((_OWORD *)v59 + 4) = 0u;
            *((_OWORD *)v59 + 1) = 0u;
            *((_OWORD *)v59 + 2) = 0u;
            *(_OWORD *)v59 = 0u;
            *v45 = v59;
            *v46 = v59 + 376;
            *v53 = &v58[376 * v57];
            v8 = v43;
            if (v47)
              operator delete(v47);
            v48 = (float64x2_t *)*v45;
          }
        }
        else
        {
          if (v50 >= 2)
            *v46 = (char *)&v48[23].f64[1];
          v8 = v43;
        }
        v63 = v65;
        v64 = v66;
        memcpy(__dst, __src, sizeof(__dst));
        v62 = vsubq_f64(v65, v66);
        _D8 = v62.f64[1];
        v36 = atan2(v62.f64[1], v62.f64[0]);
        if (v36 == 3.14159265)
          v36 = -3.14159265;
        _V2.D[1] = v62.f64[1];
        __asm { FMLA            D1, D8, V2.D[1] }
        *v48 = v64;
        v48[1] = v63;
        v48[2].f64[0] = 1.0;
        v48[2].f64[1] = v36;
        v48[3].f64[0] = sqrt(_D1);
        memcpy(&v48[3].f64[1], __dst, 0x140uLL);
        v33 = v34++;
      }
      while (0xAAAAAAAAAAAAAAABLL * ((a4[1] - *a4) >> 3) > v33);
    }
  }
  else
  {
    v15 = a4[2];
    if (0xAAAAAAAAAAAAAAABLL * ((v15 - v12) >> 3) >= v14)
    {
      v32 = 24 * ((24 * v14 - 24) / 0x18) + 24;
      bzero(v12, v32);
      a4[1] = &v12[v32];
      if (&v12[v32] == *a4)
        return kdebug_trace();
      goto LABEL_33;
    }
    if (v9 < 0)
      sub_20E867F44();
    v16 = 0xAAAAAAAAAAAAAAABLL * ((v15 - v11) >> 3);
    v17 = 0x5555555555555556 * ((v15 - v11) >> 3);
    if (v17 > v10)
      v10 = v17;
    if (v16 >= 0x555555555555555)
      v18 = 0xAAAAAAAAAAAAAAALL;
    else
      v18 = v10;
    if (v18 > 0xAAAAAAAAAAAAAAALL)
      sub_20E877A38();
    v19 = (char *)operator new(24 * v18);
    v20 = &v19[24 * v13];
    v21 = &v19[24 * v18];
    bzero(v20, 24 * ((24 * v14 - 24) / 0x18) + 24);
    v22 = &v20[24 * ((24 * v14 - 24) / 0x18) + 24];
    if (v12 == v11)
    {
      *a4 = v20;
      a4[1] = v22;
      a4[2] = v21;
    }
    else
    {
      do
      {
        v23 = *(_OWORD *)(v12 - 24);
        v12 -= 24;
        *(_OWORD *)(v20 - 24) = v23;
        v20 -= 24;
        *((_QWORD *)v20 + 2) = *((_QWORD *)v12 + 2);
        *(_QWORD *)v12 = 0;
        *((_QWORD *)v12 + 1) = 0;
        *((_QWORD *)v12 + 2) = 0;
      }
      while (v12 != v11);
      v12 = *a4;
      v24 = a4[1];
      *a4 = v20;
      a4[1] = v22;
      a4[2] = v21;
      if (v24 != v12)
      {
        v25 = v24;
        do
        {
          v27 = (void *)*((_QWORD *)v25 - 3);
          v25 -= 24;
          v26 = v27;
          if (v27)
          {
            *((_QWORD *)v24 - 2) = v26;
            operator delete(v26);
          }
          v24 = v25;
        }
        while (v25 != v12);
      }
    }
    if (v12)
      operator delete(v12);
    if (a4[1] != *a4)
      goto LABEL_33;
  }
  return kdebug_trace();
}

void sub_20FD862F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,char a62)
{
  sub_20E8E69C4((uint64_t)&a62);
  _Unwind_Resume(a1);
}

float64x2_t **sub_20FD86334(float64x2_t **a1, char **a2, unsigned int a3, double **a4, int32x4_t **a5)
{
  float64x2_t **v5;
  unint64_t v6;
  unint64_t v7;
  unsigned int v10;
  int32x4_t *v12;
  int32x4_t *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  int32x4_t *v17;
  uint64_t v18;
  int32x4_t v19;
  int32x4_t *v20;
  int32x4_t v21;
  int32x4_t v22;
  uint64_t v23;
  float64x2_t *v24;
  float64x2_t *v25;
  unint64_t v26;
  double *v27;
  unint64_t v28;
  double *v29;
  float64x2_t v30;
  float64x2_t v31;
  float64x2_t v32;
  unsigned int *v33;
  int32x4_t *v34;
  unint64_t v35;
  unint64_t v36;
  unsigned int *v37;
  __int32 *v38;
  uint64_t v39;
  uint64_t v40;
  double v41;
  uint64_t v42;
  double v43;
  double v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  uint64_t v49;
  double v50;
  double v51;
  unsigned int *v52;
  unsigned int *v53;
  unsigned int *v54;
  double v55;
  unsigned int v56;
  unsigned int v57;
  unsigned int *v58;
  unsigned int v59;
  unsigned int v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  double v64;
  double v65;
  __int32 *v66;
  uint64_t v67;
  uint64_t v68;
  unsigned int *v69;
  double v70;
  double v71;
  double v72;
  int v73;
  int v74;
  __int32 *v75;
  int v76;
  int v77;
  uint64_t v78;
  uint64_t v79;
  double v80;
  double v81;
  uint64_t v82;
  double v83;
  uint64_t v84;
  uint64_t v85;
  unsigned int *v86;
  unsigned int *v87;
  unsigned int v88;
  int32x4_t *v89;
  unsigned int v90;
  __int32 v91;
  unsigned int v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  char *v96;
  char *v97;
  unint64_t v98;
  unint64_t v99;
  char *v100;
  uint64_t v101;
  uint64_t v102;
  BOOL v103;
  unint64_t v104;
  uint64_t v105;
  char *v106;
  char *v107;
  char *v108;
  char *v109;
  char *v110;
  uint64_t v111;
  __int128 *v112;
  __int128 *v113;
  __int128 v114;
  __int128 v115;
  unsigned int v117;

  v5 = a1;
  v6 = ((char *)a1[1] - (char *)*a1) >> 5;
  v7 = a3;
  if (v6 <= a3)
    return v5;
  v10 = a3;
  v13 = *a5;
  v12 = a5[1];
  v14 = ((char *)v12 - (char *)*a5) >> 2;
  if (v6 <= v14)
  {
    if (v6 < v14)
    {
      v12 = (int32x4_t *)((char *)v13 + 4 * v6);
      a5[1] = v12;
    }
  }
  else
  {
    sub_20E93DC84((uint64_t)a5, v6 - v14);
    v13 = *a5;
    v12 = a5[1];
  }
  if (v13 == v12)
    goto LABEL_13;
  v15 = (char *)v12 - (char *)v13 - 4;
  if (v15 < 0x1C)
  {
    LODWORD(v16) = 0;
    v17 = v13;
    do
    {
LABEL_12:
      v17->i32[0] = v16;
      v17 = (int32x4_t *)((char *)v17 + 4);
      LODWORD(v16) = v16 + 1;
    }
    while (v17 != v12);
    goto LABEL_13;
  }
  v18 = (v15 >> 2) + 1;
  v16 = v18 & 0x7FFFFFFFFFFFFFF8;
  v17 = (int32x4_t *)((char *)v13 + 4 * (v18 & 0x7FFFFFFFFFFFFFF8));
  v19 = (int32x4_t)xmmword_210365350;
  v20 = v13 + 1;
  v21.i64[0] = 0x400000004;
  v21.i64[1] = 0x400000004;
  v22.i64[0] = 0x800000008;
  v22.i64[1] = 0x800000008;
  v23 = v18 & 0x7FFFFFFFFFFFFFF8;
  do
  {
    v20[-1] = v19;
    *v20 = vaddq_s32(v19, v21);
    v19 = vaddq_s32(v19, v22);
    v20 += 2;
    v23 -= 8;
  }
  while (v23);
  if (v18 != v16)
    goto LABEL_12;
LABEL_13:
  v24 = *v5;
  v25 = v5[1];
  v26 = ((char *)v25 - (char *)*v5) >> 5;
  v27 = *a4;
  v28 = a4[1] - *a4;
  if (v26 <= v28)
  {
    if (v26 < v28)
      a4[1] = &v27[v26];
  }
  else
  {
    sub_20E93D8FC((uint64_t)a4, v26 - v28);
    v24 = *v5;
    v25 = v5[1];
    v27 = *a4;
  }
  if (v24 != v25)
  {
    v29 = v27;
    do
    {
      v30 = *v24;
      v31 = v24[1];
      v24 += 2;
      v32 = vsubq_f64(v31, v30);
      *v29++ = vaddvq_f64(vmulq_f64(v32, v32));
    }
    while (v24 != v25);
  }
  v33 = (unsigned int *)*a5;
  v34 = a5[1];
  v35 = (unint64_t)*a5 + 4 * v7 - 4;
  if ((int32x4_t *)v35 == v34)
    goto LABEL_107;
  while (1)
  {
    v36 = ((char *)v34 - (char *)v33) >> 2;
    if (v36 < 2)
      goto LABEL_107;
    if (v36 == 3)
      break;
    if (v36 == 2)
    {
      v84 = v34[-1].u32[3];
      v85 = *v33;
      if (v27[v84] > v27[v85])
      {
        *v33 = v84;
        v34[-1].i32[3] = v85;
      }
      goto LABEL_107;
    }
    if ((char *)v34 - (char *)v33 <= 31)
    {
      if ((unsigned int *)((char *)&v34[-1].u64[1] + 4) == v33)
        goto LABEL_107;
      while (2)
      {
        v86 = (unsigned int *)v34;
        if (v33 == (unsigned int *)v34)
        {
LABEL_99:
          if (v86 != v33)
          {
            v92 = *v33;
            *v33 = *v86;
            *v86 = v92;
          }
        }
        else
        {
          v87 = v33 + 1;
          if (v33 + 1 != (unsigned int *)v34)
          {
            v88 = *v33;
            v86 = v33;
            v89 = (int32x4_t *)(v33 + 1);
            do
            {
              v91 = v89->i32[0];
              v89 = (int32x4_t *)((char *)v89 + 4);
              v90 = v91;
              if (v27[v91] > v27[v88])
              {
                v88 = v90;
                v86 = v87;
              }
              v87 = (unsigned int *)v89;
            }
            while (v89 != v34);
            goto LABEL_99;
          }
        }
        if (++v33 == (unsigned int *)((char *)&v34[-1].u64[1] + 4))
          goto LABEL_107;
        continue;
      }
    }
    v37 = &v33[v36 >> 1];
    v38 = &v34[-1].i32[3];
    v39 = v34[-1].u32[3];
    v40 = *v37;
    v41 = v27[v40];
    v42 = *v33;
    v43 = v27[v42];
    v44 = v27[v39];
    if (v41 > v43)
    {
      if (v44 <= v41)
      {
        *v33 = v40;
        *v37 = v42;
        v47 = *v38;
        if (v27[v47] > v43)
        {
          *v37 = v47;
          *v38 = v42;
LABEL_33:
          v48 = 2;
          v49 = *v33;
          v50 = v27[v49];
          v51 = v27[*v37];
          if (v50 <= v51)
            goto LABEL_47;
          goto LABEL_36;
        }
      }
      else
      {
        *v33 = v39;
        *v38 = v42;
      }
LABEL_35:
      v48 = 1;
      v49 = *v33;
      v50 = v27[v49];
      v51 = v27[*v37];
      if (v50 <= v51)
        goto LABEL_47;
      goto LABEL_36;
    }
    if (v44 > v41)
    {
      *v37 = v39;
      *v38 = v40;
      v45 = *v37;
      v46 = *v33;
      if (v27[v45] > v27[v46])
      {
        *v33 = v45;
        *v37 = v46;
        goto LABEL_33;
      }
      goto LABEL_35;
    }
    v48 = 0;
    v49 = *v33;
    v50 = v27[v49];
    v51 = v27[*v37];
    if (v50 <= v51)
    {
LABEL_47:
      v52 = &v34[-1].u32[3];
      while (--v52 != v33)
      {
        v61 = *v52;
        if (v27[v61] > v51)
        {
          *v33 = v61;
          *v52 = v49;
          ++v48;
          v53 = v33 + 1;
          if (v33 + 1 < v52)
            goto LABEL_37;
          goto LABEL_51;
        }
      }
      v66 = (__int32 *)(v33 + 1);
      v67 = *v38;
      if (v50 <= v27[v67])
      {
        if (v66 == v38)
          goto LABEL_107;
        while (1)
        {
          v68 = *v66;
          if (v50 > v27[v68])
            break;
          if (++v66 == v38)
            goto LABEL_107;
        }
        *v66++ = v67;
        *v38 = v68;
      }
      if (v66 == v38)
        goto LABEL_107;
      while (1)
      {
        v72 = v27[*v33];
        do
        {
          v74 = *v66++;
          v73 = v74;
        }
        while (v72 <= v27[v74]);
        v75 = v66 - 1;
        do
        {
          v77 = *--v38;
          v76 = v77;
        }
        while (v72 > v27[v77]);
        if (v75 >= v38)
          break;
        *v75 = v76;
        *v38 = v73;
      }
      v33 = (unsigned int *)(v66 - 1);
      if ((unint64_t)v75 > v35)
        goto LABEL_107;
      goto LABEL_83;
    }
LABEL_36:
    v52 = &v34[-1].u32[3];
    v53 = v33 + 1;
    if (v33 + 1 >= &v34[-1].u32[3])
    {
LABEL_51:
      v58 = v53;
    }
    else
    {
LABEL_37:
      v54 = v53;
      while (1)
      {
        v55 = v27[*v37];
        do
        {
          v57 = *v54++;
          v56 = v57;
        }
        while (v27[v57] > v55);
        v58 = v54 - 1;
        do
        {
          v60 = *--v52;
          v59 = v60;
        }
        while (v27[v60] <= v55);
        if (v58 >= v52)
          break;
        *v58 = v59;
        *v52 = v56;
        ++v48;
        if (v58 == v37)
          v37 = v52;
      }
    }
    if (v58 != v37)
    {
      v62 = *v37;
      v63 = *v58;
      if (v27[v62] > v27[v63])
      {
        *v58 = v62;
        *v37 = v63;
        ++v48;
      }
    }
    if (v58 == (unsigned int *)v35)
      goto LABEL_107;
    if (!v48)
    {
      if ((unint64_t)v58 <= v35)
      {
        v69 = v58 + 1;
        while (v69 != (unsigned int *)v34)
        {
          v70 = v27[*v69];
          v71 = v27[*(v69++ - 1)];
          if (v70 > v71)
            goto LABEL_57;
        }
      }
      else
      {
        while (v53 != v58)
        {
          v64 = v27[*v53];
          v65 = v27[*(v53++ - 1)];
          if (v64 > v65)
            goto LABEL_57;
        }
      }
      goto LABEL_107;
    }
LABEL_57:
    if ((unint64_t)v58 <= v35)
      v33 = v58 + 1;
    else
      v34 = (int32x4_t *)v58;
LABEL_83:
    if (v34 == (int32x4_t *)v35)
      goto LABEL_107;
  }
  v78 = *v33;
  v79 = v33[1];
  v80 = v27[v79];
  v81 = v27[v78];
  v82 = v34[-1].u32[3];
  v83 = v27[v82];
  if (v80 <= v81)
  {
    if (v83 > v80)
    {
      v33[1] = v82;
      v34[-1].i32[3] = v79;
      v94 = *v33;
      v93 = v33[1];
      if (v27[v93] > v27[v94])
      {
        *v33 = v93;
        v33[1] = v94;
      }
    }
  }
  else
  {
    if (v83 <= v80)
    {
      *v33 = v79;
      v33[1] = v78;
      v95 = v34[-1].u32[3];
      if (v27[v95] <= v81)
        goto LABEL_107;
      v33[1] = v95;
    }
    else
    {
      *v33 = v82;
    }
    v34[-1].i32[3] = v78;
  }
LABEL_107:
  v97 = *a2;
  v96 = a2[1];
  v98 = (v96 - *a2) >> 5;
  v99 = v7 - v98;
  if (v7 <= v98)
  {
    if (v7 >= v98)
      goto LABEL_125;
    v110 = &v97[32 * v7];
    goto LABEL_122;
  }
  v100 = a2[2];
  if (v99 <= (v100 - v96) >> 5)
  {
    bzero(a2[1], 32 * v99);
    v110 = &v96[32 * v99];
LABEL_122:
    a2[1] = v110;
    goto LABEL_125;
  }
  v117 = v10;
  v101 = v100 - v97;
  v102 = v101 >> 4;
  if (v101 >> 4 <= v7)
    v102 = v7;
  v103 = (unint64_t)v101 >= 0x7FFFFFFFFFFFFFE0;
  v104 = 0x7FFFFFFFFFFFFFFLL;
  if (!v103)
    v104 = v102;
  if (v104 >> 59)
    sub_20E877A38();
  v105 = 32 * v104;
  v106 = (char *)operator new(32 * v104);
  v107 = &v106[32 * v98];
  v108 = &v106[v105];
  bzero(v107, 32 * v99);
  v109 = &v107[32 * v99];
  if (v96 == v97)
  {
    v10 = v117;
    *a2 = v107;
    a2[1] = v109;
    a2[2] = v108;
    if (!v96)
      goto LABEL_125;
    goto LABEL_124;
  }
  v10 = v117;
  do
  {
    *((_OWORD *)v107 - 2) = *((_OWORD *)v96 - 2);
    *((_OWORD *)v107 - 1) = *((_OWORD *)v96 - 1);
    v107 -= 32;
    v96 -= 32;
  }
  while (v96 != v97);
  v96 = v97;
  *a2 = v107;
  a2[1] = v109;
  a2[2] = v108;
  if (v97)
LABEL_124:
    operator delete(v96);
LABEL_125:
  if (v10)
  {
    v111 = 0;
    do
    {
      v112 = (__int128 *)&(*a2)[2 * v111];
      v113 = (__int128 *)&(*v5)[2 * (*a5)->u32[v111]];
      v114 = *v112;
      v115 = v112[1];
      *v112 = *v113;
      v112[1] = v113[1];
      *v113 = v114;
      v113[1] = v115;
      ++v111;
    }
    while (v7 != v111);
  }
  return (float64x2_t **)a2;
}

void sub_20FD86A34(_QWORD *a1)
{
  sub_20F162344(a1);
  JUMPOUT(0x212BC6398);
}

uint64_t *sub_20FD86A58@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *__p;
  __int128 v13;

  __p = operator new(0x19uLL);
  v13 = xmmword_2102DAFD0;
  strcpy((char *)__p, "LineDetector parameters");
  sub_20E8B30B4(a2, (__int128 *)&__p, 180, 160);
  if (SHIBYTE(v13) < 0)
    operator delete(__p);
  __p = (void *)nullsub_1(a2);
  v4 = sub_20EA9DCF0((unsigned int *)a1);
  sub_20E8B2F9C((uint64_t *)&__p, "LineDetectorConfig.min_length", v4, "Minimum length of the detected line segments (in pixels)");
  __p = (void *)nullsub_1(a2);
  v5 = sub_20EF4E784((float *)(a1 + 4));
  sub_20E8B2F9C((uint64_t *)&__p, "LineDetectorConfig.edge_response_threshold", v5, "Threshold on Harris strength, below which a pixel is considered as a potential \"edgel\" (strong negative harris strengths correspond to edgesl)");
  __p = (void *)nullsub_1(a2);
  v6 = sub_20EF4E784((float *)(a1 + 8));
  sub_20E8B2F9C((uint64_t *)&__p, "LineDetectorConfig.angle_threshold", v6, "Maximum difference between average gradient and current edgel gradient when tracking edgel chains.");
  __p = (void *)nullsub_1(a2);
  v7 = sub_20EF4E784((float *)(a1 + 12));
  sub_20E8B2F9C((uint64_t *)&__p, "LineDetectorConfig.prefit_trim_percent", v7, "Percentage of the initially traced edgel chain to be clipped offbefore we fit a 2D line to the chain. (This is designed to avoid the hooking cases.)");
  __p = (void *)nullsub_1(a2);
  v8 = sub_20EAA14D8((_BYTE *)(a1 + 16));
  sub_20E8B2F9C((uint64_t *)&__p, "LineDetectorConfig.fit_line_twice", v8, "If true, fit the line again after we grow back the cutoff tails of the edgel chain");
  __p = (void *)nullsub_1(a2);
  v9 = sub_20EF4E784((float *)(a1 + 20));
  sub_20E8B2F9C((uint64_t *)&__p, "LineDetectorConfig.fit_error_threshold", v9, "Maximum fitting error (in pixels) for an edgel chain to be considered a line segment.");
  __p = (void *)nullsub_1(a2);
  v10 = sub_20EA9DCF0((unsigned int *)(a1 + 24));
  return sub_20E8B2F9C((uint64_t *)&__p, "LineDetectorConfig.maximum_detections", v10, "Return only the longest N lines (set to zero to return all lines).");
}

void sub_20FD86C28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;

  sub_20E869298(v15);
  _Unwind_Resume(a1);
}

uint64_t *sub_20FD86C8C(uint64_t *a1, _QWORD *a2)
{
  _QWORD **v3;
  _QWORD *v4;
  _QWORD *v5;
  unint64_t v6;
  unint64_t *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  _QWORD *v13;
  unint64_t v14;
  _OWORD *v15;
  _OWORD *v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  _QWORD *v30;
  unint64_t v31;
  unint64_t v32;
  _QWORD **v33;
  unint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  char *v46;
  _BYTE *v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  _OWORD *v51;
  char *v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  char *v57;
  _QWORD *v58;
  BOOL v59;
  void *v60;
  std::__shared_weak_count *v61;
  unint64_t *p_shared_owners;
  unint64_t v63;
  std::__shared_weak_count *v64;
  unint64_t *v65;
  unint64_t v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  std::__shared_weak_count *v73;
  unint64_t *v74;
  unint64_t v75;
  _QWORD **v77;
  _QWORD *v78[2];

  v3 = v78;
  v4 = a2 + 1;
  v5 = (_QWORD *)a2[1];
  v77 = (_QWORD **)*a2;
  v78[0] = v5;
  v6 = a2[2];
  v78[1] = (_QWORD *)v6;
  if (!v6)
  {
    v77 = v78;
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
    goto LABEL_78;
  }
  v5[2] = v78;
  *a2 = v4;
  *v4 = 0;
  a2[2] = 0;
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v7 = (unint64_t *)(a1 + 2);
  if (v6 > 0x5C0B81702E05C0)
    sub_20E867F44();
  v8 = (char *)operator new(712 * v6);
  v9 = &v8[712 * v6];
  v10 = sub_20FD87458(0, 0, 0, 0, (uint64_t)v8, (uint64_t)v8);
  v12 = (void *)*a1;
  v11 = a1[1];
  *a1 = v10;
  a1[1] = (uint64_t)v8;
  for (a1[2] = (uint64_t)v9; (void *)v11 != v12; v11 = sub_20E9AE6A0(v11 - 712))
    ;
  if (v12)
    operator delete(v12);
  v13 = v77;
  if (v77 != v78)
  {
    v14 = a1[1];
    while (1)
    {
      v15 = v13 + 47;
      v16 = v13 + 5;
      if (v14 < *v7)
      {
        *(_OWORD *)v14 = *v16;
        v17 = *(_OWORD *)(v13 + 7);
        v18 = *(_OWORD *)(v13 + 9);
        v19 = *(_OWORD *)(v13 + 13);
        *(_OWORD *)(v14 + 48) = *(_OWORD *)(v13 + 11);
        *(_OWORD *)(v14 + 64) = v19;
        *(_OWORD *)(v14 + 16) = v17;
        *(_OWORD *)(v14 + 32) = v18;
        v20 = *(_OWORD *)(v13 + 15);
        v21 = *(_OWORD *)(v13 + 17);
        v22 = *(_OWORD *)(v13 + 21);
        *(_OWORD *)(v14 + 112) = *(_OWORD *)(v13 + 19);
        *(_OWORD *)(v14 + 128) = v22;
        *(_OWORD *)(v14 + 80) = v20;
        *(_OWORD *)(v14 + 96) = v21;
        v23 = *(_OWORD *)(v13 + 23);
        v24 = *(_OWORD *)(v13 + 25);
        v25 = *(_OWORD *)(v13 + 27);
        *(_BYTE *)(v14 + 192) = *((_BYTE *)v13 + 232);
        *(_OWORD *)(v14 + 160) = v24;
        *(_OWORD *)(v14 + 176) = v25;
        *(_OWORD *)(v14 + 144) = v23;
        *(_OWORD *)(v14 + 200) = *((_OWORD *)v13 + 15);
        v13[30] = 0;
        v13[31] = 0;
        *(_OWORD *)(v14 + 216) = *((_OWORD *)v13 + 16);
        v13[32] = 0;
        v13[33] = 0;
        *(_BYTE *)(v14 + 232) = 0;
        *(_BYTE *)(v14 + 248) = 0;
        if (*((_BYTE *)v13 + 288))
        {
          *(_OWORD *)(v14 + 232) = *((_OWORD *)v13 + 17);
          v13[34] = 0;
          v13[35] = 0;
          *(_BYTE *)(v14 + 248) = 1;
        }
        *(_BYTE *)(v14 + 256) = 0;
        *(_BYTE *)(v14 + 656) = 0;
        if (*((_BYTE *)v13 + 696))
        {
          *(_OWORD *)(v14 + 256) = *(_OWORD *)(v13 + 37);
          v26 = *(_OWORD *)(v13 + 39);
          v27 = *(_OWORD *)(v13 + 41);
          v28 = *(_OWORD *)(v13 + 43);
          *(_OWORD *)(v14 + 313) = *(_OWORD *)((char *)v13 + 353);
          *(_OWORD *)(v14 + 288) = v27;
          *(_OWORD *)(v14 + 304) = v28;
          *(_OWORD *)(v14 + 272) = v26;
          *(_OWORD *)(v14 + 336) = *v15;
          *(_QWORD *)v15 = 0;
          v13[48] = 0;
          *(_OWORD *)(v14 + 352) = *(_OWORD *)(v13 + 49);
          v13[49] = 0;
          v13[50] = 0;
          memcpy((void *)(v14 + 368), v13 + 51, 0x120uLL);
          *(_BYTE *)(v14 + 656) = 1;
        }
        *(_BYTE *)(v14 + 664) = 0;
        *(_BYTE *)(v14 + 688) = 0;
        if (*((_BYTE *)v13 + 728))
        {
          *(_QWORD *)(v14 + 680) = 0;
          *(_OWORD *)(v14 + 664) = 0u;
          *(_OWORD *)(v14 + 664) = *((_OWORD *)v13 + 44);
          *(_QWORD *)(v14 + 680) = v13[90];
          v13[90] = 0;
          *((_OWORD *)v13 + 44) = 0u;
          *(_BYTE *)(v14 + 688) = 1;
        }
        v29 = v13[92];
        *(_DWORD *)(v14 + 704) = *((_DWORD *)v13 + 186);
        *(_QWORD *)(v14 + 696) = v29;
        v14 += 712;
        a1[1] = v14;
        v30 = (_QWORD *)v13[1];
        if (v30)
          goto LABEL_41;
        goto LABEL_43;
      }
      v31 = 0xF47E8FD1FA3F47E9 * ((uint64_t)(v14 - *a1) >> 3);
      v32 = v31 + 1;
      if (v31 + 1 > 0x5C0B81702E05C0)
        sub_20E867F44();
      v33 = v3;
      if (0xE8FD1FA3F47E8FD2 * ((uint64_t)(*v7 - *a1) >> 3) > v32)
        v32 = 0xE8FD1FA3F47E8FD2 * ((uint64_t)(*v7 - *a1) >> 3);
      v34 = 0xF47E8FD1FA3F47E9 * ((uint64_t)(*v7 - *a1) >> 3) >= 0x2E05C0B81702E0 ? 0x5C0B81702E05C0 : v32;
      if (v34)
      {
        if (v34 > 0x5C0B81702E05C0)
          sub_20E877A38();
        v35 = operator new(712 * v34);
      }
      else
      {
        v35 = 0;
      }
      v36 = (uint64_t)&v35[89 * v31];
      *(_OWORD *)v36 = *v16;
      v37 = *(_OWORD *)(v13 + 7);
      v38 = *(_OWORD *)(v13 + 9);
      v39 = *(_OWORD *)(v13 + 13);
      *(_OWORD *)(v36 + 48) = *(_OWORD *)(v13 + 11);
      *(_OWORD *)(v36 + 64) = v39;
      *(_OWORD *)(v36 + 16) = v37;
      *(_OWORD *)(v36 + 32) = v38;
      v40 = *(_OWORD *)(v13 + 15);
      v41 = *(_OWORD *)(v13 + 17);
      v42 = *(_OWORD *)(v13 + 21);
      *(_OWORD *)(v36 + 112) = *(_OWORD *)(v13 + 19);
      *(_OWORD *)(v36 + 128) = v42;
      *(_OWORD *)(v36 + 80) = v40;
      *(_OWORD *)(v36 + 96) = v41;
      v43 = *(_OWORD *)(v13 + 23);
      v44 = *(_OWORD *)(v13 + 25);
      v45 = *(_OWORD *)(v13 + 27);
      *(_BYTE *)(v36 + 192) = *((_BYTE *)v13 + 232);
      *(_OWORD *)(v36 + 160) = v44;
      *(_OWORD *)(v36 + 176) = v45;
      *(_OWORD *)(v36 + 144) = v43;
      *(_OWORD *)(v36 + 200) = *((_OWORD *)v13 + 15);
      v13[30] = 0;
      v13[31] = 0;
      *(_OWORD *)(v36 + 216) = *((_OWORD *)v13 + 16);
      v13[32] = 0;
      v13[33] = 0;
      *(_BYTE *)(v36 + 232) = 0;
      *(_BYTE *)(v36 + 248) = 0;
      if (*((_BYTE *)v13 + 288))
      {
        *(_OWORD *)(v36 + 232) = *((_OWORD *)v13 + 17);
        v13[34] = 0;
        v13[35] = 0;
        *(_BYTE *)(v36 + 248) = 1;
      }
      v46 = (char *)&v35[89 * v31];
      v46[256] = 0;
      v46[656] = 0;
      if (*((_BYTE *)v13 + 696))
      {
        v47 = v46 + 656;
        *((_OWORD *)v46 + 16) = *(_OWORD *)(v13 + 37);
        v48 = *(_OWORD *)(v13 + 39);
        v49 = *(_OWORD *)(v13 + 41);
        v50 = *(_OWORD *)(v13 + 43);
        *(_OWORD *)(v46 + 313) = *(_OWORD *)((char *)v13 + 353);
        *((_OWORD *)v46 + 18) = v49;
        *((_OWORD *)v46 + 19) = v50;
        *((_OWORD *)v46 + 17) = v48;
        v51 = &v35[89 * v31];
        v51[21] = *v15;
        *(_QWORD *)v15 = 0;
        v13[48] = 0;
        v51[22] = *(_OWORD *)(v13 + 49);
        v13[49] = 0;
        v13[50] = 0;
        memcpy(v51 + 23, v13 + 51, 0x120uLL);
        *v47 = 1;
      }
      v52 = (char *)&v35[89 * v31];
      v52[664] = 0;
      v52[688] = 0;
      if (*((_BYTE *)v13 + 728))
      {
        *((_OWORD *)v52 + 42) = 0u;
        *(_OWORD *)(v52 + 664) = *((_OWORD *)v13 + 44);
        v35[89 * v31 + 85] = v13[90];
        v13[90] = 0;
        *((_OWORD *)v13 + 44) = 0u;
        v52[688] = 1;
      }
      v53 = (char *)&v35[89 * v31];
      v54 = v13[92];
      *((_DWORD *)v53 + 176) = *((_DWORD *)v13 + 186);
      *((_QWORD *)v53 + 87) = v54;
      v14 = v36 + 712;
      v55 = sub_20FD87458(a1[1], a1[1], *a1, *a1, v36, v36);
      v56 = (char *)*a1;
      v57 = (char *)a1[1];
      *a1 = v55;
      a1[1] = v14;
      a1[2] = (uint64_t)&v35[89 * v34];
      v3 = v33;
      if (v57 != v56)
        break;
LABEL_38:
      if (v56)
        operator delete(v56);
      a1[1] = v14;
      v30 = (_QWORD *)v13[1];
      if (v30)
      {
        do
        {
LABEL_41:
          v58 = v30;
          v30 = (_QWORD *)*v30;
        }
        while (v30);
        goto LABEL_11;
      }
      do
      {
LABEL_43:
        v58 = (_QWORD *)v13[2];
        v59 = *v58 == (_QWORD)v13;
        v13 = v58;
      }
      while (!v59);
LABEL_11:
      v13 = v58;
      if (v58 == v3)
        goto LABEL_78;
    }
    while (1)
    {
      if (*(v57 - 24))
      {
        v60 = (void *)*((_QWORD *)v57 - 6);
        if (v60)
        {
          *((_QWORD *)v57 - 5) = v60;
          operator delete(v60);
        }
      }
      if (*(v57 - 56))
      {
        v61 = (std::__shared_weak_count *)*((_QWORD *)v57 - 44);
        if (!v61)
          goto LABEL_55;
        p_shared_owners = (unint64_t *)&v61->__shared_owners_;
        do
          v63 = __ldaxr(p_shared_owners);
        while (__stlxr(v63 - 1, p_shared_owners));
        if (!v63)
        {
          ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
          std::__shared_weak_count::__release_weak(v61);
          v64 = (std::__shared_weak_count *)*((_QWORD *)v57 - 46);
          if (!v64)
            goto LABEL_61;
        }
        else
        {
LABEL_55:
          v64 = (std::__shared_weak_count *)*((_QWORD *)v57 - 46);
          if (!v64)
            goto LABEL_61;
        }
        v65 = (unint64_t *)&v64->__shared_owners_;
        do
          v66 = __ldaxr(v65);
        while (__stlxr(v66 - 1, v65));
        if (!v66)
        {
          ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
          std::__shared_weak_count::__release_weak(v64);
        }
      }
      if (!*(v57 - 464))
        goto LABEL_66;
      v67 = (std::__shared_weak_count *)*((_QWORD *)v57 - 59);
      if (!v67)
        goto LABEL_66;
LABEL_61:
      v68 = (unint64_t *)&v67->__shared_owners_;
      do
        v69 = __ldaxr(v68);
      while (__stlxr(v69 - 1, v68));
      if (!v69)
      {
        ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
        std::__shared_weak_count::__release_weak(v67);
        v70 = (std::__shared_weak_count *)*((_QWORD *)v57 - 61);
        if (v70)
        {
LABEL_67:
          v71 = (unint64_t *)&v70->__shared_owners_;
          do
            v72 = __ldaxr(v71);
          while (__stlxr(v72 - 1, v71));
          if (!v72)
          {
            ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
            std::__shared_weak_count::__release_weak(v70);
          }
        }
      }
      else
      {
LABEL_66:
        v70 = (std::__shared_weak_count *)*((_QWORD *)v57 - 61);
        if (v70)
          goto LABEL_67;
      }
      v73 = (std::__shared_weak_count *)*((_QWORD *)v57 - 63);
      if (v73)
      {
        v74 = (unint64_t *)&v73->__shared_owners_;
        do
          v75 = __ldaxr(v74);
        while (__stlxr(v75 - 1, v74));
        if (!v75)
        {
          ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
          std::__shared_weak_count::__release_weak(v73);
        }
      }
      v57 -= 712;
      if (v57 == v56)
        goto LABEL_38;
    }
  }
LABEL_78:
  sub_20ED98A1C((uint64_t)&v77, v78[0]);
  if (*a1 == a1[1]
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/FeatureDetection/src/NodeCameraSetFeatures.cpp", 46, (uint64_t)"!sequence_camera_stream_features_.empty()", 41, (uint64_t)"cameras must not be empty", 25, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  return a1;
}

void sub_20FD873C4(_Unwind_Exception *a1)
{
  void **v1;

  sub_20FD87400(v1);
  _Unwind_Resume(a1);
}

void sub_20FD873D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, _QWORD *a11)
{
  void **v11;

  sub_20FD87400(v11);
  sub_20ED98A1C((uint64_t)&a10, a11);
  _Unwind_Resume(a1);
}

void **sub_20FD87400(void **a1)
{
  void *v2;
  uint64_t v3;
  void *v4;

  v2 = *a1;
  if (*a1)
  {
    v3 = (uint64_t)a1[1];
    v4 = v2;
    if ((void *)v3 != v2)
    {
      do
        v3 = sub_20E9AE6A0(v3 - 712);
      while ((void *)v3 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

uint64_t sub_20FD87458(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  _OWORD *v23;
  _OWORD *v24;
  _BYTE *v25;
  _BYTE *v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  _OWORD *v30;
  _OWORD *v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;

  if (a2 != a4)
  {
    v9 = 0;
    do
    {
      v11 = a6 + v9;
      v12 = a6 + v9 - 712;
      v13 = a2 + v9;
      *(_OWORD *)v12 = *(_OWORD *)(a2 + v9 - 712);
      v14 = *(_OWORD *)(a2 + v9 - 696);
      v15 = *(_OWORD *)(a2 + v9 - 680);
      v16 = *(_OWORD *)(a2 + v9 - 648);
      *(_OWORD *)(v12 + 48) = *(_OWORD *)(a2 + v9 - 664);
      *(_OWORD *)(v12 + 64) = v16;
      *(_OWORD *)(v12 + 16) = v14;
      *(_OWORD *)(v12 + 32) = v15;
      v17 = *(_OWORD *)(a2 + v9 - 632);
      v18 = *(_OWORD *)(a2 + v9 - 616);
      v19 = *(_OWORD *)(a2 + v9 - 584);
      *(_OWORD *)(v12 + 112) = *(_OWORD *)(a2 + v9 - 600);
      *(_OWORD *)(v12 + 128) = v19;
      *(_OWORD *)(v12 + 80) = v17;
      *(_OWORD *)(v12 + 96) = v18;
      v20 = *(_OWORD *)(a2 + v9 - 568);
      v21 = *(_OWORD *)(a2 + v9 - 552);
      v22 = *(_OWORD *)(a2 + v9 - 536);
      *(_BYTE *)(v12 + 192) = *(_BYTE *)(a2 + v9 - 520);
      *(_OWORD *)(v12 + 160) = v21;
      *(_OWORD *)(v12 + 176) = v22;
      *(_OWORD *)(v12 + 144) = v20;
      v23 = (_OWORD *)(a2 + v9 - 512);
      *(_OWORD *)(a6 + v9 - 512) = *v23;
      *(_QWORD *)(a2 + v9 - 504) = 0;
      *(_QWORD *)v23 = 0;
      v24 = (_OWORD *)(a2 + v9 - 496);
      *(_OWORD *)(a6 + v9 - 496) = *v24;
      *(_QWORD *)(a2 + v9 - 488) = 0;
      *(_QWORD *)v24 = 0;
      v25 = (_BYTE *)(a6 + v9 - 480);
      *v25 = 0;
      v26 = (_BYTE *)(a6 + v9 - 464);
      *v26 = 0;
      if (*(_BYTE *)(a2 + v9 - 464))
      {
        *(_OWORD *)v25 = *(_OWORD *)(v13 - 480);
        *(_QWORD *)(v13 - 472) = 0;
        *(_QWORD *)(v13 - 480) = 0;
        *v26 = 1;
      }
      *(_BYTE *)(v11 - 456) = 0;
      *(_BYTE *)(v11 - 56) = 0;
      if (*(_BYTE *)(v13 - 56))
      {
        *(_OWORD *)(v11 - 456) = *(_OWORD *)(a2 + v9 - 456);
        v27 = *(_OWORD *)(a2 + v9 - 440);
        v28 = *(_OWORD *)(a2 + v9 - 424);
        v29 = *(_OWORD *)(a2 + v9 - 408);
        *(_OWORD *)(v11 - 399) = *(_OWORD *)(a2 + v9 - 399);
        *(_OWORD *)(v11 - 424) = v28;
        *(_OWORD *)(v11 - 408) = v29;
        *(_OWORD *)(v11 - 440) = v27;
        v30 = (_OWORD *)(a2 + v9 - 376);
        *(_OWORD *)(a6 + v9 - 376) = *v30;
        *(_QWORD *)(a2 + v9 - 368) = 0;
        *(_QWORD *)v30 = 0;
        v31 = (_OWORD *)(a2 + v9 - 360);
        *(_OWORD *)(a6 + v9 - 360) = *v31;
        *(_QWORD *)(a2 + v9 - 352) = 0;
        *(_QWORD *)v31 = 0;
        memcpy((void *)(a6 + v9 - 344), (const void *)(a2 + v9 - 344), 0x120uLL);
        *(_BYTE *)(v11 - 56) = 1;
      }
      v32 = a6 + v9;
      *(_BYTE *)(a6 + v9 - 48) = 0;
      v33 = (_QWORD *)(a6 + v9 - 48);
      *(_BYTE *)(a6 + v9 - 24) = 0;
      v34 = a2 + v9;
      if (*(_BYTE *)(a2 + v9 - 24))
      {
        *v33 = 0;
        *(_QWORD *)(a6 + v9 - 40) = 0;
        *(_QWORD *)(a6 + v9 - 32) = 0;
        *(_OWORD *)v33 = *(_OWORD *)(v34 - 48);
        *(_QWORD *)(v32 - 32) = *(_QWORD *)(v34 - 32);
        *(_QWORD *)(v34 - 48) = 0;
        *(_QWORD *)(v34 - 40) = 0;
        *(_QWORD *)(v34 - 32) = 0;
        *(_BYTE *)(v32 - 24) = 1;
      }
      v10 = *(_QWORD *)(v34 - 16);
      *(_DWORD *)(v32 - 8) = *(_DWORD *)(v34 - 8);
      *(_QWORD *)(v32 - 16) = v10;
      v9 -= 712;
    }
    while (a2 + v9 != a4);
    a6 += v9;
  }
  return a6;
}

unint64_t *sub_20FD87658(unint64_t *a1, _QWORD *a2)
{
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  char *v9;
  char *v10;
  char *v11;
  __int128 v12;
  int64x2_t v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t *v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  char *v23;
  uint64_t *v24;
  char *v25;
  _QWORD *v26;
  _QWORD *v27;
  _QWORD *v28;
  _QWORD *v29;
  unint64_t v30;
  uint64_t v31;
  __int128 v32;
  int64x2_t v33;
  unint64_t v34;
  _QWORD *v35;
  _QWORD *v36;
  BOOL v37;
  void *__p;
  int64x2_t v40;
  char *v41;
  _QWORD *v42;
  _QWORD **v43;
  _QWORD *v44;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v4 = a2[2];
  if (v4)
  {
    v5 = 0;
    v6 = 0;
  }
  else
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/FeatureDetection/src/NodeCameraSystemFeatures.cpp", 30, (uint64_t)"!all_camera_sets.empty()", 24, (uint64_t)&unk_2102C5146, 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v4 = a2[2];
    v6 = a1[2];
    v5 = *a1;
  }
  v7 = a1 + 2;
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v6 - v5) >> 3) < v4)
  {
    if (v4 > 0xAAAAAAAAAAAAAAALL)
      sub_20E867F44();
    v8 = (_QWORD *)a1[1];
    v42 = a1 + 2;
    v9 = (char *)operator new(24 * v4);
    v10 = &v9[24 * ((uint64_t)((uint64_t)v8 - v5) / 24)];
    if (v8 == (_QWORD *)v5)
    {
      v13 = vdupq_n_s64(v5);
      v11 = &v9[24 * ((uint64_t)((uint64_t)v8 - v5) / 24)];
    }
    else
    {
      v11 = &v9[24 * ((uint64_t)((uint64_t)v8 - v5) / 24)];
      do
      {
        v12 = *(_OWORD *)(v8 - 3);
        v8 -= 3;
        *(_OWORD *)(v11 - 24) = v12;
        v11 -= 24;
        *((_QWORD *)v11 + 2) = v8[2];
        *v8 = 0;
        v8[1] = 0;
        v8[2] = 0;
      }
      while (v8 != (_QWORD *)v5);
      v13 = *(int64x2_t *)a1;
      v6 = a1[2];
    }
    *a1 = (unint64_t)v11;
    a1[1] = (unint64_t)v10;
    v40 = v13;
    a1[2] = (unint64_t)&v9[24 * v4];
    v41 = (char *)v6;
    __p = (void *)v13.i64[0];
    sub_20FD87AD4((uint64_t)&__p, (void **)v13.i64[0]);
    if (__p)
      operator delete(__p);
  }
  v16 = (_QWORD *)*a2;
  v14 = a2 + 1;
  v15 = v16;
  if (v16 != v14)
  {
    v17 = (uint64_t *)a1[1];
    do
    {
      if ((unint64_t)v17 >= *v7)
      {
        v20 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)((uint64_t)v17 - *a1) >> 3);
        v21 = v20 + 1;
        if (v20 + 1 > 0xAAAAAAAAAAAAAAALL)
          sub_20E867F44();
        if (0x5555555555555556 * ((uint64_t)(*v7 - *a1) >> 3) > v21)
          v21 = 0x5555555555555556 * ((uint64_t)(*v7 - *a1) >> 3);
        if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*v7 - *a1) >> 3) >= 0x555555555555555)
          v22 = 0xAAAAAAAAAAAAAAALL;
        else
          v22 = v21;
        v42 = a1 + 2;
        if (v22)
        {
          if (v22 > 0xAAAAAAAAAAAAAAALL)
            sub_20E877A38();
          v23 = (char *)operator new(24 * v22);
        }
        else
        {
          v23 = 0;
        }
        v24 = (uint64_t *)&v23[24 * v20];
        __p = v23;
        v40.i64[0] = (uint64_t)v24;
        v25 = &v23[24 * v22];
        v26 = v15 + 6;
        v27 = (_QWORD *)v15[6];
        v40.i64[1] = (uint64_t)v24;
        v41 = v25;
        v43 = (_QWORD **)v15[5];
        v44 = v27;
        if (v15[7])
        {
          v27[2] = &v44;
          v15[5] = v26;
          *v26 = 0;
          v15[7] = 0;
        }
        else
        {
          v43 = &v44;
        }
        sub_20FD86C8C(v24, &v43);
        sub_20ED98A1C((uint64_t)&v43, v44);
        v29 = (_QWORD *)*a1;
        v28 = (_QWORD *)a1[1];
        v31 = v40.i64[1];
        v30 = v40.i64[0];
        if (v28 == (_QWORD *)*a1)
        {
          v33 = vdupq_n_s64((unint64_t)v28);
        }
        else
        {
          do
          {
            *(_QWORD *)(v30 - 24) = 0;
            *(_QWORD *)(v30 - 16) = 0;
            v30 -= 24;
            *(_QWORD *)(v30 + 16) = 0;
            v32 = *(_OWORD *)(v28 - 3);
            v28 -= 3;
            *(_OWORD *)v30 = v32;
            *(_QWORD *)(v30 + 16) = v28[2];
            *v28 = 0;
            v28[1] = 0;
            v28[2] = 0;
          }
          while (v28 != v29);
          v33 = *(int64x2_t *)a1;
        }
        v17 = (uint64_t *)(v31 + 24);
        *a1 = v30;
        a1[1] = v31 + 24;
        v40 = v33;
        v34 = a1[2];
        a1[2] = (unint64_t)v41;
        v41 = (char *)v34;
        __p = (void *)v33.i64[0];
        sub_20FD87AD4((uint64_t)&__p, (void **)v33.i64[0]);
        if (__p)
          operator delete(__p);
      }
      else
      {
        v18 = v15 + 6;
        v19 = v15[6];
        __p = (void *)v15[5];
        v40.i64[0] = v19;
        v40.i64[1] = v15[7];
        if (v40.i64[1])
        {
          *(_QWORD *)(v19 + 16) = &v40;
          v15[5] = v18;
          *v18 = 0;
          v15[7] = 0;
        }
        else
        {
          __p = &v40;
        }
        sub_20FD86C8C(v17, &__p);
        sub_20ED98A1C((uint64_t)&__p, v40.i64[0]);
        v17 += 3;
        a1[1] = (unint64_t)v17;
      }
      a1[1] = (unint64_t)v17;
      v35 = (_QWORD *)v15[1];
      if (v35)
      {
        do
        {
          v36 = v35;
          v35 = (_QWORD *)*v35;
        }
        while (v35);
      }
      else
      {
        do
        {
          v36 = (_QWORD *)v15[2];
          v37 = *v36 == (_QWORD)v15;
          v15 = v36;
        }
        while (!v37);
      }
      v15 = v36;
    }
    while (v36 != v14);
  }
  return a1;
}

void sub_20FD87A18(_Unwind_Exception *a1)
{
  void ***v1;

  sub_20ED6737C(v1);
  _Unwind_Resume(a1);
}

void sub_20FD87A2C(_Unwind_Exception *a1)
{
  void ***v1;

  sub_20ED6737C(v1);
  _Unwind_Resume(a1);
}

void sub_20FD87A40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, _QWORD *a15)
{
  void ***v15;

  sub_20ED98A1C((uint64_t)&a14, a15);
  sub_20FD87AA0((uint64_t)&a9);
  sub_20ED6737C(v15);
  _Unwind_Resume(a1);
}

void sub_20FD87A68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, _QWORD *a10)
{
  uint64_t v10;
  uint64_t v11;

  sub_20ED98A1C((uint64_t)&a9, a10);
  *(_QWORD *)(v10 + 8) = v11;
  sub_20ED6737C((void ***)v10);
  _Unwind_Resume(a1);
}

void sub_20FD87A8C(_Unwind_Exception *a1)
{
  void ***v1;

  sub_20ED6737C(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20FD87AA0(uint64_t a1)
{
  sub_20FD87AD4(a1, *(void ***)(a1 + 8));
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void sub_20FD87AD4(uint64_t a1, void **a2)
{
  void **v2;
  void **v5;
  void *v6;
  char *v7;
  char *v8;
  char *v9;
  void *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;

  v2 = *(void ***)(a1 + 16);
  if (v2 != a2)
  {
    v5 = *(void ***)(a1 + 16);
    while (1)
    {
      v8 = (char *)*(v5 - 3);
      v5 -= 3;
      v7 = v8;
      *(_QWORD *)(a1 + 16) = v5;
      if (!v8)
        goto LABEL_5;
      v9 = (char *)*(v2 - 2);
      v6 = v7;
      if (v9 != v7)
        break;
LABEL_4:
      *(v2 - 2) = v7;
      operator delete(v6);
      v5 = *(void ***)(a1 + 16);
LABEL_5:
      v2 = v5;
      if (v5 == a2)
        return;
    }
    while (1)
    {
      if (*(v9 - 24))
      {
        v10 = (void *)*((_QWORD *)v9 - 6);
        if (v10)
        {
          *((_QWORD *)v9 - 5) = v10;
          operator delete(v10);
        }
      }
      if (*(v9 - 56))
      {
        v11 = (std::__shared_weak_count *)*((_QWORD *)v9 - 44);
        if (!v11)
          goto LABEL_18;
        p_shared_owners = (unint64_t *)&v11->__shared_owners_;
        do
          v13 = __ldaxr(p_shared_owners);
        while (__stlxr(v13 - 1, p_shared_owners));
        if (!v13)
        {
          ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
          std::__shared_weak_count::__release_weak(v11);
          v14 = (std::__shared_weak_count *)*((_QWORD *)v9 - 46);
          if (!v14)
            goto LABEL_24;
        }
        else
        {
LABEL_18:
          v14 = (std::__shared_weak_count *)*((_QWORD *)v9 - 46);
          if (!v14)
            goto LABEL_24;
        }
        v15 = (unint64_t *)&v14->__shared_owners_;
        do
          v16 = __ldaxr(v15);
        while (__stlxr(v16 - 1, v15));
        if (!v16)
        {
          ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
          std::__shared_weak_count::__release_weak(v14);
        }
      }
      if (!*(v9 - 464))
        goto LABEL_29;
      v17 = (std::__shared_weak_count *)*((_QWORD *)v9 - 59);
      if (!v17)
        goto LABEL_29;
LABEL_24:
      v18 = (unint64_t *)&v17->__shared_owners_;
      do
        v19 = __ldaxr(v18);
      while (__stlxr(v19 - 1, v18));
      if (!v19)
      {
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        std::__shared_weak_count::__release_weak(v17);
        v20 = (std::__shared_weak_count *)*((_QWORD *)v9 - 61);
        if (v20)
        {
LABEL_30:
          v21 = (unint64_t *)&v20->__shared_owners_;
          do
            v22 = __ldaxr(v21);
          while (__stlxr(v22 - 1, v21));
          if (!v22)
          {
            ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
            std::__shared_weak_count::__release_weak(v20);
          }
        }
      }
      else
      {
LABEL_29:
        v20 = (std::__shared_weak_count *)*((_QWORD *)v9 - 61);
        if (v20)
          goto LABEL_30;
      }
      v23 = (std::__shared_weak_count *)*((_QWORD *)v9 - 63);
      if (v23)
      {
        v24 = (unint64_t *)&v23->__shared_owners_;
        do
          v25 = __ldaxr(v24);
        while (__stlxr(v25 - 1, v24));
        if (!v25)
        {
          ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
          std::__shared_weak_count::__release_weak(v23);
        }
      }
      v9 -= 712;
      if (v9 == v7)
      {
        v6 = *v5;
        goto LABEL_4;
      }
    }
  }
}

void sub_20FD87CE4(uint64_t a1, uint64_t a2, _DWORD *a3, uint64_t a4, uint64_t a5, float a6, float a7, int8x16_t a8, double a9)
{
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  unsigned int v13;
  float v14;
  float v15;
  unsigned int v16;
  int v17;
  int v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  int v22;
  float *v23;
  uint64_t v24;
  unint64_t v25;
  int v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v35;
  uint64_t v36;
  float v37;
  int8x16_t v38;
  uint64_t v39;
  int8x16_t *v40;
  float32x4_t v41;
  float32x4_t v42;
  float32x4_t v43;
  float32x4_t v44;
  float32x4_t v45;
  uint64_t v46;
  float *v47;
  float v48;
  float v49;
  float *v50;
  float *v51;
  float v52;
  float *v53;
  float v54;
  float v55;
  float v56;
  int v58;
  unint64_t v59;
  float v60;
  unint64_t v61;
  float v62;
  float v63;
  float v65;
  float v66;
  float v67;
  float v68;
  float v69;
  float v70;
  float v71;
  float v72;
  signed int v73;
  int v74;
  uint64_t v75;
  float *v76;
  int v77;
  int v78;
  float v79;
  float v80;
  float v81;
  float v82;
  float v83;
  unsigned int v84;
  float v85;
  int v86;
  int v87;
  float *v88;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  unsigned int v94;

  v10 = a5 + *(_QWORD *)(a1 + 72) * a4;
  v11 = llroundf(a6);
  v12 = *(_QWORD *)(a1 + 96);
  v13 = llroundf(a7);
  *a3 = 0;
  v14 = fmaxf(*(float *)(a1 + 16) * *(float *)a8.i32, 1.0);
  v15 = *(float *)(a1 + 20) * v14;
  v16 = llroundf(v15);
  v17 = v13 - v16;
  v94 = v13;
  v18 = v16 + v13;
  v19 = v12 + 144 * v10;
  if (*(_DWORD *)(v19 + 32) - 1 >= (int)(v16 + v11))
    v20 = v16 + v11;
  else
    v20 = *(_DWORD *)(v19 + 32) - 1;
  v21 = v17 & ~(v17 >> 31);
  if (*(_DWORD *)(v19 + 48) - 1 >= v18)
    v22 = v18;
  else
    v22 = *(_DWORD *)(v19 + 48) - 1;
  v23 = *(float **)(a1 + 24);
  v88 = *(float **)(a1 + 32);
  if ((char *)v88 - (char *)v23 >= 1)
    bzero(v23, 4 * (((unint64_t)((char *)v88 - (char *)v23) >> 2) - ((unint64_t)((char *)v88 - (char *)v23) > 3))+ 4);
  if ((int)v21 <= v22)
  {
    v24 = (v11 - v16) & ~((int)(v11 - v16) >> 31);
    if ((int)v24 <= v20)
    {
      v73 = llroundf(v15 * v15);
      v93 = *(_QWORD *)(v12 + 144 * v10 + 120);
      v92 = v24 - (v20 + 1);
      v91 = (8 * v24) | 4;
      v74 = v24 - v11;
      do
      {
        v75 = v92;
        v76 = (float *)(*(_QWORD *)(v93 + 8 * v21) + v91);
        v77 = v74;
        do
        {
          v78 = (v21 - v94) * (v21 - v94) + v77 * v77;
          if (v78 <= v73)
          {
            v79 = *(v76 - 1);
            v80 = *v76;
            v81 = expf((float)(-1.0 / (float)(v14 * (float)(v14 + v14))) * (float)v78);
            v82 = (float)(v79 * (float)*(unint64_t *)a1) * 0.15915;
            v83 = v81 * v80;
            v84 = vcvtms_s32_f32(v82 + -0.5);
            v85 = (float)(v82 - (float)(int)floorf(v82 + -0.5)) + -0.5;
            v86 = (int)(v84 + *(_QWORD *)a1) % (int)*(_QWORD *)a1;
            v87 = (int)(v84 + 1) % (int)*(_QWORD *)a1;
            v23[v86] = v23[v86] + (float)(v83 * (float)(1.0 - v85));
            v23[v87] = v23[v87] + (float)(v83 * v85);
          }
          v76 += 2;
          ++v77;
        }
        while (!__CFADD__(v75++, 1));
        ++v21;
      }
      while (v21 != v22 + 1);
    }
  }
  v25 = *(_QWORD *)a1;
  v26 = *(_DWORD *)(a1 + 8);
  if (v26 >= 1)
  {
    v27 = (int)v25 - 1;
    *(float *)a8.i32 = v23[v27];
    if ((int)v25 > 1)
    {
      v28 = 0;
      v29 = (v25 - 1);
      v30 = v27 & 0xFFFFFFF8;
      __asm { FMOV            V1.4S, #0.25 }
      v35 = v27;
      while (1)
      {
        *(float *)&a9 = *v23;
        if (v25 >= 9)
        {
          v38 = (int8x16_t)vdupq_lane_s32(*(int32x2_t *)&a9, 0);
          a8 = (int8x16_t)vdupq_lane_s32(*(int32x2_t *)a8.i8, 0);
          v39 = v30;
          v40 = (int8x16_t *)(v23 + 5);
          do
          {
            v41 = (float32x4_t)v40[-1];
            v42 = (float32x4_t)vextq_s8(v38, (int8x16_t)v41, 0xCuLL);
            v38 = *v40;
            v43 = (float32x4_t)vextq_s8((int8x16_t)v41, *v40, 0xCuLL);
            v44 = vaddq_f32(v41, vaddq_f32(vaddq_f32(v42, v42), (float32x4_t)vextq_s8(a8, (int8x16_t)v42, 0xCuLL)));
            v45 = vmulq_f32(vaddq_f32(*(float32x4_t *)v40, vaddq_f32(vaddq_f32(v43, v43), (float32x4_t)vextq_s8((int8x16_t)v42, (int8x16_t)v43, 0xCuLL))), _Q1);
            *(float32x4_t *)((char *)&v40[-2] + 12) = vmulq_f32(v44, _Q1);
            *(float32x4_t *)((char *)v40 - 4) = v45;
            v40 += 2;
            a8 = (int8x16_t)v43;
            v39 -= 8;
          }
          while (v39);
          a8.i32[0] = v38.i32[2];
          if (v30 == v29)
            goto LABEL_14;
          v37 = *(float *)&v38.i32[3];
          v36 = v30;
        }
        else
        {
          v36 = 0;
          v37 = *v23;
        }
        v46 = v29 - v36;
        v47 = &v23[v36 + 1];
        v48 = *(float *)a8.i32;
        do
        {
          *(float *)a8.i32 = v37;
          v49 = (float)(v37 + v37) + v48;
          v37 = *v47;
          *(v47 - 1) = (float)(*v47 + v49) * 0.25;
          ++v47;
          v48 = *(float *)a8.i32;
          --v46;
        }
        while (v46);
LABEL_14:
        *(float *)a8.i32 = (float)(*(float *)&a9 + (float)(*(float *)a8.i32 + (float)(v23[v35] + v23[v35]))) * 0.25;
        v23[v35] = *(float *)a8.i32;
        if (++v28 == v26)
          goto LABEL_25;
      }
    }
    do
    {
      *(float *)a8.i32 = (float)(*v23 + (float)(*(float *)a8.i32 + (float)(*(float *)a8.i32 + *(float *)a8.i32))) * 0.25;
      v23[v27] = *(float *)a8.i32;
      --v26;
    }
    while (v26);
  }
LABEL_25:
  v50 = v23;
  if (v23 != v88)
  {
    v51 = v23 + 1;
    v50 = v23;
    if (v23 + 1 != v88)
    {
      v52 = *v23;
      v50 = v23;
      v53 = v23 + 1;
      do
      {
        v54 = *v53++;
        v55 = v54;
        if (v52 < v54)
        {
          v52 = v55;
          v50 = v51;
        }
        v51 = v53;
      }
      while (v53 != v88);
    }
  }
  v56 = *v50;
  if (*v50 != 0.0 && v25 != 0)
  {
    v58 = 0;
    v59 = 0;
    do
    {
      v60 = v23[v59];
      v61 = v59 + 1;
      if (v60 > (float)(v56 * *(float *)(a1 + 12)))
      {
        v62 = v23[(v25 + v59 - 1) % v25];
        v63 = v23[(v25 + v59 + 1) % v25];
        if (v60 > v62 && v60 > v63)
        {
          v65 = (float)((int)v59 - 1);
          v66 = (float)v59;
          v67 = v65 - (float)v59;
          if (v67 != 0.0)
          {
            v68 = (float)v61 - v65;
            v69 = (float)((float)v61 - v66) * v68;
            if (v69 != 0.0)
            {
              v70 = v67 * v68;
              if (v70 != 0.0)
              {
                v71 = v62 - v60;
                v72 = (float)((float)(v63 - v60) / v69) - (float)(v71 / v70);
                if (v72 != 0.0)
                  v66 = (float)((float)-(float)(v71 + (float)((float)((float)(v66 * v66) - (float)(v65 * v65)) * v72))
                              / v67)
                      / (float)(v72 + v72);
              }
            }
          }
          *(float *)(a2 + 4 * v58++) = fmodf((float)((float)((float)(v66 + 0.5) + (float)v25) / (float)v25) * 6.2832, 6.2832);
          *a3 = v58;
        }
      }
      v59 = v61;
    }
    while (v25 != v61);
  }
}

