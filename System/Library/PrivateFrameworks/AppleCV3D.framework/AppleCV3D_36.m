void sub_20F784D5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  sub_20EDB42B8((uint64_t)&a17);
  _Unwind_Resume(a1);
}

void sub_20F784D74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  sub_20EDB42B8((uint64_t)&a17);
  _Unwind_Resume(a1);
}

void sub_20F784D88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  sub_20EDB42B8((uint64_t)&a17);
  _Unwind_Resume(a1);
}

void sub_20F784D9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  sub_20EDB42B8((uint64_t)&a17);
  _Unwind_Resume(a1);
}

void sub_20F784DB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  sub_20EDB42B8((uint64_t)&a17);
  _Unwind_Resume(a1);
}

void sub_20F784DC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  sub_20EDB42B8((uint64_t)&a17);
  _Unwind_Resume(a1);
}

void sub_20F784DD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  sub_20EDB42B8((uint64_t)&a17);
  _Unwind_Resume(a1);
}

uint64_t *sub_20F784DEC(uint64_t *a1, __int128 *a2, uint64_t a3)
{
  __int128 v6;
  _BYTE *v7;
  _BYTE *v8;
  int64_t v9;
  char *v10;
  char *v11;
  _BYTE *v12;
  _BYTE *v13;
  int64_t v14;
  char *v15;
  char *v16;
  _BYTE *v17;
  _BYTE *v18;
  int64_t v19;
  char *v20;
  char *v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  _OWORD *v30;
  int64x2_t v31;
  _OWORD *v32;
  _QWORD *v33;
  _QWORD *v34;
  uint64_t v36;
  _OWORD *v37;
  double v38;
  uint64_t v39;
  double v40;
  uint64_t v41;
  uint64_t v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  double v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  _QWORD *v60;
  _QWORD *v61;
  uint64_t v62;
  uint64_t i;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  _OWORD *v77;
  _OWORD *v78;
  _OWORD *v79;
  _OWORD *v80;
  __int128 v81;
  __int128 v82;
  uint64_t v83;
  __int128 v84;
  uint64_t v85;
  __int128 v86;
  uint64_t v87;
  __int128 v88;
  uint64_t v89;
  __int128 v90;
  __int128 v91;
  _BYTE v92[48];
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  uint64_t v99;
  __int128 v100;
  uint64_t v101;
  uint64_t v102;

  v102 = *MEMORY[0x24BDAC8D0];
  v6 = *a2;
  a1[2] = *((_QWORD *)a2 + 2);
  a1[3] = 0;
  *(_OWORD *)a1 = v6;
  a1[4] = 0;
  a1[5] = 0;
  v8 = (_BYTE *)*((_QWORD *)a2 + 3);
  v7 = (_BYTE *)*((_QWORD *)a2 + 4);
  v9 = v7 - v8;
  if (v7 != v8)
  {
    if (v9 < 0)
      sub_20E867F44();
    v10 = (char *)operator new(v7 - v8);
    a1[3] = (uint64_t)v10;
    a1[4] = (uint64_t)v10;
    v11 = &v10[8 * (v9 >> 3)];
    a1[5] = (uint64_t)v11;
    memcpy(v10, v8, v9);
    a1[4] = (uint64_t)v11;
  }
  a1[6] = 0;
  a1[7] = 0;
  a1[8] = 0;
  v13 = (_BYTE *)*((_QWORD *)a2 + 6);
  v12 = (_BYTE *)*((_QWORD *)a2 + 7);
  v14 = v12 - v13;
  if (v12 != v13)
  {
    if (v14 < 0)
      sub_20E867F44();
    v15 = (char *)operator new(v12 - v13);
    a1[6] = (uint64_t)v15;
    a1[7] = (uint64_t)v15;
    v16 = &v15[8 * (v14 >> 3)];
    a1[8] = (uint64_t)v16;
    memcpy(v15, v13, v14);
    a1[7] = (uint64_t)v16;
  }
  a1[9] = 0;
  a1[10] = 0;
  a1[11] = 0;
  v18 = (_BYTE *)*((_QWORD *)a2 + 9);
  v17 = (_BYTE *)*((_QWORD *)a2 + 10);
  v19 = v17 - v18;
  if (v17 != v18)
  {
    if (v19 < 0)
      sub_20E867F44();
    v20 = (char *)operator new(v17 - v18);
    a1[9] = (uint64_t)v20;
    a1[10] = (uint64_t)v20;
    v21 = &v20[8 * (v19 >> 3)];
    a1[11] = (uint64_t)v21;
    memcpy(v20, v18, v19);
    a1[10] = (uint64_t)v21;
  }
  v22 = a2[6];
  v23 = a2[7];
  v24 = a2[8];
  __asm { FMOV            V4.2D, #1.0 }
  *((_OWORD *)a1 + 15) = _Q4;
  v30 = a1 + 30;
  v31 = vdupq_n_s64(0x7FF8000000000000uLL);
  *((int64x2_t *)a1 + 11) = v31;
  *((_OWORD *)a1 + 6) = v22;
  *((_OWORD *)a1 + 7) = v23;
  *((_OWORD *)a1 + 8) = v24;
  *((_OWORD *)a1 + 9) = 0u;
  *((_OWORD *)a1 + 10) = 0u;
  *((int64x2_t *)a1 + 12) = v31;
  *((int64x2_t *)a1 + 13) = v31;
  v77 = a1 + 26;
  *((_OWORD *)a1 + 14) = xmmword_2102DB700;
  a1[32] = 0x3FF0000000000000;
  a1[33] = 0;
  v78 = a1 + 33;
  *((_OWORD *)a1 + 18) = _Q4;
  v79 = a1 + 36;
  a1[34] = 0;
  a1[35] = 0;
  a1[38] = 0x3FF0000000000000;
  *(_OWORD *)(a1 + 39) = 0u;
  v80 = a1 + 39;
  a1[49] = 0;
  *(_OWORD *)(a1 + 41) = 0u;
  *(_OWORD *)(a1 + 43) = 0u;
  *(_OWORD *)(a1 + 45) = 0u;
  *(_OWORD *)(a1 + 47) = 0u;
  a1[42] = 0x3FF0000000000000;
  v32 = a1 + 42;
  a1[46] = 0x3FF0000000000000;
  *((_OWORD *)a1 + 27) = 0u;
  *((_OWORD *)a1 + 28) = 0u;
  *((_OWORD *)a1 + 25) = _Q4;
  *((_OWORD *)a1 + 26) = 0u;
  v81 = _Q4;
  a1[55] = 0x3FF0000000000000;
  a1[58] = 0;
  a1[59] = 0x3FF0000000000000;
  *((_OWORD *)a1 + 30) = 0u;
  *((_OWORD *)a1 + 31) = 0u;
  a1[64] = 0;
  sub_20F4E052C((uint64_t)(a1 + 66), a3);
  *((_DWORD *)a1 + 546) = 0;
  bzero(a1 + 274, 0x314uLL);
  *((_DWORD *)a1 + 750) = 0;
  *(_OWORD *)(a1 + 373) = 0u;
  *((_OWORD *)a1 + 188) = 0u;
  *((_DWORD *)a1 + 756) = 0;
  *(_OWORD *)(a1 + 379) = 0u;
  *((_DWORD *)a1 + 762) = 0;
  *((_OWORD *)a1 + 191) = 0u;
  *((_DWORD *)a1 + 768) = 0;
  *(_OWORD *)(a1 + 385) = 0u;
  *((_DWORD *)a1 + 774) = 0;
  *((_OWORD *)a1 + 194) = 0u;
  *((_OWORD *)a1 + 195) = 0u;
  *((_DWORD *)a1 + 784) = 1065353216;
  *((_BYTE *)a1 + 4752) = 0;
  *((_OWORD *)a1 + 296) = 0u;
  *((_OWORD *)a1 + 295) = 0u;
  *((_OWORD *)a1 + 294) = 0u;
  *((_OWORD *)a1 + 293) = 0u;
  *((_OWORD *)a1 + 292) = 0u;
  *((_OWORD *)a1 + 291) = 0u;
  *((_OWORD *)a1 + 290) = 0u;
  *((_OWORD *)a1 + 289) = 0u;
  *((_OWORD *)a1 + 288) = 0u;
  *((_OWORD *)a1 + 287) = 0u;
  *((_OWORD *)a1 + 286) = 0u;
  *((_OWORD *)a1 + 285) = 0u;
  *((_OWORD *)a1 + 284) = 0u;
  *((_OWORD *)a1 + 283) = 0u;
  *((_OWORD *)a1 + 282) = 0u;
  *((_OWORD *)a1 + 281) = 0u;
  *((_OWORD *)a1 + 280) = 0u;
  *((_OWORD *)a1 + 279) = 0u;
  *((_OWORD *)a1 + 278) = 0u;
  *((_OWORD *)a1 + 277) = 0u;
  *((_OWORD *)a1 + 276) = 0u;
  *((_OWORD *)a1 + 275) = 0u;
  *((_OWORD *)a1 + 274) = 0u;
  *((_OWORD *)a1 + 273) = 0u;
  *((_OWORD *)a1 + 200) = 0u;
  *((_OWORD *)a1 + 199) = 0u;
  *((_OWORD *)a1 + 198) = 0u;
  *((_OWORD *)a1 + 197) = 0u;
  *(_WORD *)v92 = 1;
  v90 = 0u;
  v93 = 0u;
  v94 = 0u;
  DWORD2(v90) = -3;
  memset(&v92[2], 0, 46);
  v91 = 0xFFFFFFFDuLL;
  LOBYTE(v93) = 1;
  a1[595] = (uint64_t)&unk_24CA02AD0;
  *((_OWORD *)a1 + 298) = v81;
  *((_OWORD *)a1 + 299) = v81;
  *((_OWORD *)a1 + 300) = v81;
  *((_OWORD *)a1 + 301) = v81;
  *((_OWORD *)a1 + 302) = v81;
  *((_OWORD *)a1 + 303) = v81;
  *((_OWORD *)a1 + 304) = v81;
  a1[610] = (uint64_t)&off_24CA02B40;
  bzero(a1 + 611, 0x3C8uLL);
  *((_DWORD *)a1 + 1464) = 16842753;
  sub_20F64CD14((char *)a1 + 5864);
  *(_OWORD *)(a1 + 827) = 0u;
  *(_OWORD *)(a1 + 825) = 0u;
  *(_OWORD *)(a1 + 823) = 0u;
  *(_OWORD *)(a1 + 821) = 0u;
  *(_OWORD *)(a1 + 819) = 0u;
  *(_OWORD *)(a1 + 817) = 0u;
  *(_OWORD *)(a1 + 815) = 0u;
  *(_OWORD *)(a1 + 813) = 0u;
  *(_OWORD *)(a1 + 811) = 0u;
  *(_OWORD *)(a1 + 809) = 0u;
  *(_OWORD *)(a1 + 807) = 0u;
  *(_OWORD *)(a1 + 805) = 0u;
  *(uint64_t *)((char *)a1 + 6630) = 0;
  a1[830] = 0;
  a1[595] = (uint64_t)&unk_24CA02A18;
  *((_BYTE *)a1 + 6648) = 0;
  *((_OWORD *)a1 + 416) = 0u;
  sub_20F79C66C((uint64_t)(a1 + 834));
  a1[595] = (uint64_t)off_24CA02920;
  sub_20F79C66C((uint64_t)(a1 + 1829));
  a1[2824] = (uint64_t)(a1 + 610);
  a1[2825] = 0;
  a1[2827] = 0;
  a1[2826] = 0;
  a1[2837] = 0;
  a1[2839] = 0;
  a1[2838] = 0;
  sub_20F79C968(a1 + 2824);
  *((_DWORD *)a1 + 5682) = 2;
  *((_DWORD *)a1 + 5684) = -3;
  *(_OWORD *)((char *)a1 + 22762) = 0u;
  *(_OWORD *)((char *)a1 + 22778) = 0u;
  *(_OWORD *)(a1 + 2849) = 0u;
  *((_DWORD *)a1 + 5686) = -3;
  *(uint64_t *)((char *)a1 + 22748) = 0;
  *((_DWORD *)a1 + 5689) = 0;
  *((_WORD *)a1 + 11380) = 1;
  *((_BYTE *)a1 + 22808) = 1;
  a1[2852] = 0;
  a1[2855] = 0;
  *((_OWORD *)a1 + 1428) = 0u;
  *((_DWORD *)a1 + 5748) = 0;
  a1[2877] = 0;
  *(_OWORD *)(a1 + 2875) = 0u;
  *(_OWORD *)(a1 + 2859) = 0u;
  *(_OWORD *)(a1 + 2861) = 0u;
  *(_OWORD *)(a1 + 2863) = 0u;
  *(_OWORD *)(a1 + 2865) = 0u;
  *((_DWORD *)a1 + 5734) = 0;
  *((_DWORD *)a1 + 5740) = 0;
  *((_OWORD *)a1 + 1434) = 0u;
  *((_DWORD *)a1 + 5746) = 0;
  *(_OWORD *)(a1 + 2871) = 0u;
  v33 = operator new(8uLL);
  a1[2875] = (uint64_t)v33;
  *v33 = 0;
  a1[2877] = (uint64_t)(v33 + 1);
  a1[2876] = (uint64_t)(v33 + 1);
  a1[2888] = 0;
  a1[2890] = 0;
  a1[2889] = 0;
  *(_OWORD *)((char *)a1 + 23084) = 0u;
  *((_OWORD *)a1 + 1439) = 0u;
  *((_OWORD *)a1 + 1440) = 0u;
  *((_OWORD *)a1 + 1441) = 0u;
  *((_OWORD *)a1 + 1442) = 0u;
  v34 = operator new(8uLL);
  a1[2888] = (uint64_t)v34;
  *v34++ = 0;
  a1[2890] = (uint64_t)v34;
  a1[2889] = (uint64_t)v34;
  *(_OWORD *)((char *)a1 + 23204) = 0u;
  *(_OWORD *)(a1 + 2891) = 0u;
  *(_OWORD *)(a1 + 2893) = 0u;
  *(_OWORD *)(a1 + 2895) = 0u;
  *(_OWORD *)(a1 + 2897) = 0u;
  *(_OWORD *)(a1 + 2899) = 0u;
  a1[2904] = 0x3EE4F8B588E368F1;
  a1[2907] = 0xA00000001;
  *((_BYTE *)a1 + 23264) = 0;
  a1[2909] = 0x3F50624DD2F1A9FCLL;
  *((int64x2_t *)a1 + 1455) = vdupq_n_s64(0x3EB0C6F7A0B5ED8DuLL);
  *((_BYTE *)a1 + 23296) = 0;
  a1[2913] = 0x3FF7B8BAC710CB29;
  a1[2978] = (uint64_t)(a1 + 2914);
  a1[2979] = 64;
  a1[2980] = 0;
  *((_WORD *)a1 + 11924) = 0;
  a1[2985] = 0;
  a1[2989] = 0;
  a1[2993] = 0;
  a1[2997] = 0;
  *(_OWORD *)(a1 + 2999) = 0u;
  a1[2998] = 0xBFF0000000000000;
  *((_DWORD *)a1 + 6002) = 0;
  a1[2906] = (uint64_t)&off_24C9FCEF0;
  *((_OWORD *)a1 + 1501) = xmmword_2103AB100;
  *((_BYTE *)a1 + 24032) = 1;
  a1[3005] = 0x3FF0000000000000;
  __asm { FMOV            V0.2D, #2.0 }
  *((_OWORD *)a1 + 1503) = _Q0;
  *((_OWORD *)a1 + 1504) = xmmword_210315720;
  v36 = *a1;
  if (!*a1)
  {
LABEL_13:
    if (!a1[391])
      return a1;
    goto LABEL_14;
  }
  v37 = a1 + 51;
  if (*((_BYTE *)a1 + 1317))
  {
    v38 = *(double *)v36;
    v39 = *(_QWORD *)(v36 + 8);
    v40 = *(double *)(v36 + 16);
    v41 = *(_QWORD *)(v36 + 24);
    v100 = *(_OWORD *)(v36 + 32);
    v101 = *(_QWORD *)(v36 + 48);
    v42 = *(_QWORD *)(v36 + 56);
    v88 = *(_OWORD *)(v36 + 64);
    v89 = *(_QWORD *)(v36 + 80);
    v87 = *(_QWORD *)(v36 + 104);
    v86 = *(_OWORD *)(v36 + 88);
    v85 = *(_QWORD *)(v36 + 128);
    v84 = *(_OWORD *)(v36 + 112);
    v83 = *(_QWORD *)(v36 + 152);
    v82 = *(_OWORD *)(v36 + 136);
    v43 = *(_OWORD *)(v36 + 160);
    v44 = *(_OWORD *)(v36 + 176);
    v45 = *(_OWORD *)(v36 + 192);
    v46 = *(_OWORD *)(v36 + 208);
    *(_QWORD *)&v92[32] = *(_QWORD *)(v36 + 224);
    *(_OWORD *)v92 = v45;
    *(_OWORD *)&v92[16] = v46;
    v90 = v43;
    v91 = v44;
    v47 = *(_OWORD *)(v36 + 232);
    v48 = *(_OWORD *)(v36 + 248);
    v49 = *(_OWORD *)(v36 + 264);
    v50 = *(_OWORD *)(v36 + 280);
    v99 = *(_QWORD *)(v36 + 296);
    v97 = v49;
    v98 = v50;
    v95 = v47;
    v96 = v48;
    v51 = v40 * *((double *)a1 + 166);
    *((double *)a1 + 22) = v38 * *((double *)a1 + 165);
    a1[23] = v39;
    *((double *)a1 + 24) = v51;
    a1[25] = v41;
    *v77 = v100;
    a1[28] = v101;
    a1[29] = v42;
    a1[32] = v89;
    *v30 = v88;
    a1[35] = v87;
    *v78 = v86;
    a1[38] = v85;
    *v79 = v84;
    a1[41] = v83;
    *v80 = v82;
    v52 = v90;
    v53 = v91;
    v54 = *(_OWORD *)v92;
    v55 = *(_OWORD *)&v92[16];
    a1[50] = *(_QWORD *)&v92[32];
    *((_OWORD *)a1 + 23) = v54;
    *((_OWORD *)a1 + 24) = v55;
    *v32 = v52;
    *((_OWORD *)a1 + 22) = v53;
    v56 = v95;
    v57 = v96;
    v58 = v97;
    v59 = v98;
    a1[59] = v99;
    *(_OWORD *)(a1 + 55) = v58;
    *(_OWORD *)(a1 + 57) = v59;
    *v37 = v56;
    *(_OWORD *)(a1 + 53) = v57;
    goto LABEL_13;
  }
  v65 = *(_OWORD *)(v36 + 16);
  *((_OWORD *)a1 + 11) = *(_OWORD *)v36;
  *((_OWORD *)a1 + 12) = v65;
  v66 = *(_OWORD *)(v36 + 32);
  a1[28] = *(_QWORD *)(v36 + 48);
  *v77 = v66;
  a1[29] = *(_QWORD *)(v36 + 56);
  v67 = *(_OWORD *)(v36 + 64);
  a1[32] = *(_QWORD *)(v36 + 80);
  *v30 = v67;
  v68 = *(_OWORD *)(v36 + 88);
  a1[35] = *(_QWORD *)(v36 + 104);
  *v78 = v68;
  v69 = *(_OWORD *)(v36 + 112);
  a1[38] = *(_QWORD *)(v36 + 128);
  *v79 = v69;
  v70 = *(_OWORD *)(v36 + 136);
  a1[41] = *(_QWORD *)(v36 + 152);
  *v80 = v70;
  v72 = *(_OWORD *)(v36 + 192);
  v71 = *(_OWORD *)(v36 + 208);
  v73 = *(_OWORD *)(v36 + 176);
  a1[50] = *(_QWORD *)(v36 + 224);
  *((_OWORD *)a1 + 23) = v72;
  *((_OWORD *)a1 + 24) = v71;
  *((_OWORD *)a1 + 22) = v73;
  *v32 = *(_OWORD *)(v36 + 160);
  v74 = *(_OWORD *)(v36 + 264);
  v75 = *(_OWORD *)(v36 + 280);
  v76 = *(_OWORD *)(v36 + 248);
  a1[59] = *(_QWORD *)(v36 + 296);
  *(_OWORD *)(a1 + 55) = v74;
  *(_OWORD *)(a1 + 57) = v75;
  *(_OWORD *)(a1 + 53) = v76;
  *v37 = *(_OWORD *)(v36 + 232);
  if (!a1[391])
    return a1;
LABEL_14:
  v60 = (_QWORD *)a1[390];
  if (v60)
  {
    do
    {
      v61 = (_QWORD *)*v60;
      operator delete(v60);
      v60 = v61;
    }
    while (v61);
  }
  a1[390] = 0;
  v62 = a1[389];
  if (v62)
  {
    for (i = 0; i != v62; ++i)
      *(_QWORD *)(a1[388] + 8 * i) = 0;
  }
  a1[391] = 0;
  return a1;
}

void sub_20F785750(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37)
{
  if (a2)
    sub_20E860DA4(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_20F7859B0()
{
  _QWORD *v0;

  if (*v0)
    JUMPOUT(0x20F7859BCLL);
  JUMPOUT(0x20F785984);
}

void sub_20F7859D0()
{
  _QWORD *v0;

  if (!*v0)
    JUMPOUT(0x20F785994);
  JUMPOUT(0x20F78598CLL);
}

_QWORD *sub_20F7859E0(_QWORD *a1)
{
  void *v2;
  void *v3;
  _QWORD *v4;
  _QWORD *v5;
  void *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;

  sub_20F2C539C(a1 + 2906);
  sub_20F7B7224((uint64_t)(a1 + 595));
  sub_20F4EE048((uint64_t)(a1 + 570));
  sub_20F4EE048((uint64_t)(a1 + 546));
  v2 = (void *)a1[399];
  if (v2)
    operator delete(v2);
  v3 = (void *)a1[396];
  if (v3)
  {
    a1[397] = v3;
    operator delete(v3);
  }
  v4 = (_QWORD *)a1[390];
  if (v4)
  {
    do
    {
      v5 = (_QWORD *)*v4;
      operator delete(v4);
      v4 = v5;
    }
    while (v5);
  }
  v6 = (void *)a1[388];
  a1[388] = 0;
  if (v6)
    operator delete(v6);
  sub_20F0287BC(a1 + 274);
  sub_20F6304A4((uint64_t)(a1 + 66));
  v7 = (std::__shared_weak_count *)a1[64];
  if (!v7)
    goto LABEL_13;
  p_shared_owners = (unint64_t *)&v7->__shared_owners_;
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (!v9)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
    v10 = (char *)a1[60];
    if (!v10)
      goto LABEL_24;
  }
  else
  {
LABEL_13:
    v10 = (char *)a1[60];
    if (!v10)
      goto LABEL_24;
  }
  v11 = (char *)a1[61];
  v12 = v10;
  if (v11 != v10)
  {
    do
    {
      v13 = (std::__shared_weak_count *)*((_QWORD *)v11 - 1);
      if (v13)
      {
        v14 = (unint64_t *)&v13->__shared_owners_;
        do
          v15 = __ldaxr(v14);
        while (__stlxr(v15 - 1, v14));
        if (!v15)
        {
          ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
          std::__shared_weak_count::__release_weak(v13);
        }
      }
      v11 -= 16;
    }
    while (v11 != v10);
    v12 = (char *)a1[60];
  }
  a1[61] = v10;
  operator delete(v12);
LABEL_24:
  v16 = (void *)a1[19];
  if (v16)
  {
    a1[20] = v16;
    operator delete(v16);
  }
  v17 = (void *)a1[9];
  if (v17)
  {
    a1[10] = v17;
    operator delete(v17);
  }
  v18 = (void *)a1[6];
  if (v18)
  {
    a1[7] = v18;
    operator delete(v18);
  }
  v19 = (void *)a1[3];
  if (v19)
  {
    a1[4] = v19;
    operator delete(v19);
  }
  return a1;
}

uint64_t sub_20F785B88(uint64_t a1)
{
  uint64_t v2;
  void *v3;

  *(_QWORD *)a1 = &unk_24CA02A18;
  sub_20F4EE048(a1 + 9680);
  sub_20F74D8D0((_QWORD *)(a1 + 2000));
  v2 = *(_QWORD *)(a1 + 1912);
  if (v2)
    MEMORY[0x212BC6368](v2, 0x1000C8000313F17);
  *(_QWORD *)a1 = &unk_24CA02AD0;
  *(_QWORD *)(a1 + 120) = &off_24CA02B40;
  sub_20F4EE048(a1 + 1680);
  sub_20F4EE048(a1 + 1488);
  sub_20F4EE048(a1 + 1296);
  sub_20F4EE048(a1 + 1104);
  v3 = *(void **)(a1 + 1040);
  if (v3)
  {
    *(_QWORD *)(a1 + 1048) = v3;
    operator delete(v3);
  }
  sub_20F4EE0E8((void **)(a1 + 896));
  sub_20F64D05C(a1 + 128);
  return a1;
}

void sub_20F785C40(std::string *a1@<X8>)
{
  int v2;
  size_t size;
  unint64_t v4;
  std::string *p_dst;
  uint64_t v6;
  uint64_t v7;
  std::string *v8;
  std::string *v9;
  std::string::value_type __s[23];
  char v11;
  std::string __dst;
  std::string v13;

  v13.__r_.__value_.__s.__data_[13] = 0;
  HIWORD(v13.__r_.__value_.__r.__words[1]) = 0;
  v13.__r_.__value_.__r.__words[2] = 0xD00000000000000;
  strcpy((char *)&v13, "GeneralSchur");
  std::string::append(&v13, "BSC", 3uLL);
  std::string::append(&v13, ",", 1uLL);
  std::string::append(&v13, "BlockDiag", 9uLL);
  v2 = SHIBYTE(v13.__r_.__value_.__r.__words[2]);
  if ((v13.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v13.__r_.__value_.__r.__words[2]);
  else
    size = v13.__r_.__value_.__l.__size_;
  v4 = size + 4;
  if (size + 4 >= 0x7FFFFFFFFFFFFFF8)
    sub_20E860B7C();
  if (v4 >= 0x17)
  {
    v6 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17)
      v6 = v4 | 7;
    v7 = v6 + 1;
    p_dst = (std::string *)operator new(v6 + 1);
    __dst.__r_.__value_.__l.__size_ = size + 4;
    __dst.__r_.__value_.__r.__words[2] = v7 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
  }
  else
  {
    memset(&__dst, 0, sizeof(__dst));
    p_dst = &__dst;
    *((_BYTE *)&__dst.__r_.__value_.__s + 23) = size + 4;
    if (!size)
      goto LABEL_15;
  }
  if (v2 >= 0)
    v8 = &v13;
  else
    v8 = (std::string *)v13.__r_.__value_.__r.__words[0];
  memmove(p_dst, v8, size);
LABEL_15:
  strcpy((char *)p_dst + size, "> + ");
  v11 = 14;
  strcpy(__s, "SparseCholesky");
  v9 = std::string::append(&__dst, __s, 0xEuLL);
  *a1 = *v9;
  v9->__r_.__value_.__l.__size_ = 0;
  v9->__r_.__value_.__r.__words[2] = 0;
  v9->__r_.__value_.__r.__words[0] = 0;
  if (v11 < 0)
  {
    operator delete(*(void **)__s);
    if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_17:
      if ((SHIBYTE(v13.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        return;
LABEL_21:
      operator delete(v13.__r_.__value_.__l.__data_);
      return;
    }
  }
  else if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_17;
  }
  operator delete(__dst.__r_.__value_.__l.__data_);
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_21;
}

void sub_20F785E28(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a15 < 0)
  {
    operator delete(__p);
    if ((a21 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a27 & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_7;
    }
  }
  else if ((a21 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a16);
  if ((a27 & 0x80000000) == 0)
LABEL_4:
    _Unwind_Resume(exception_object);
LABEL_7:
  operator delete(a22);
  _Unwind_Resume(exception_object);
}

#error "20F785E9C: too big function (funcsize=0)"

void sub_20F799D9C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)(v1 + 10640);
  if (v3)
  {
    *(_QWORD *)(v1 + 10648) = v3;
    operator delete(v3);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20F79A06C(_BYTE *a1, uint64_t a2)
{
  uint64_t result;

  if ((*(unsigned int (**)(_BYTE *))(*(_QWORD *)a1 + 8))(a1))
    return 1;
  result = (*(uint64_t (**)(_BYTE *, uint64_t))(*(_QWORD *)a1 + 56))(a1, a2);
  if ((_DWORD)result)
    return 1;
  a1[1877] = 0;
  return result;
}

uint64_t sub_20F79A0D8(uint64_t a1)
{
  return a1 + 18208;
}

double sub_20F79A0E4()
{
  return 0.0;
}

double sub_20F79A0EC(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  double i;
  uint64_t v5;
  uint64_t j;
  uint64_t v16;
  uint64_t k;
  uint64_t v26;
  uint64_t v27;
  uint64_t m;
  uint64_t v29;
  uint64_t n;
  uint64_t v36;
  uint64_t ii;
  uint64_t v42;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t jj;
  uint64_t v54;
  unsigned int v56;
  uint64_t v57;
  int v58;
  __int128 v59;
  double v60;

  v2 = a1[16];
  v3 = a1[17];
  for (i = 0.0; v2 != v3; v2 += 16)
  {
    v5 = *(_QWORD *)(v2 + 8);
    if ((*(_BYTE *)(v5 + 4) & 2) == 0 && *(_BYTE *)(v5 + 20))
    {
      v56 = 3;
      v57 = v5 + 32;
      v58 = 0;
      v60 = 0.0;
      v59 = 0uLL;
      sub_20F053450(&v56, (double *)&v59);
      _V1.D[1] = *((_QWORD *)&v59 + 1);
      _D5 = *((_QWORD *)&v59 + 1);
      __asm { FMLA            D4, D5, V1.D[1] }
      _D1 = *(_QWORD *)(v5 + 112);
      __asm { FMLA            D0, D1, V3.D[1] }
      i = i + _D0 + *(double *)(v5 + 120) * *(double *)(v5 + 120);
    }
  }
  for (j = a1[28]; j != a1[29]; j += 16)
  {
    v16 = *(_QWORD *)(j + 8);
    if ((*(_BYTE *)(v16 + 4) & 2) == 0)
    {
      if (*(_BYTE *)(v16 + 20))
      {
        _Q4 = *(_OWORD *)(v16 + 32);
        _D6 = *(_QWORD *)(v16 + 40);
        __asm { FMLA            D5, D6, V4.D[1] }
        *(_QWORD *)&_Q4 = *(_QWORD *)(v16 + 56);
        __asm { FMLA            D5, D4, V3.D[1] }
        _D3 = *(_QWORD *)(v16 + 72);
        __asm { FMLA            D5, D3, V2.D[1] }
        _D2 = *(_QWORD *)(v16 + 88);
        __asm { FMLA            D5, D2, V1.D[1] }
        i = i + _D5 + *(double *)(v16 + 96) * *(double *)(v16 + 96);
      }
    }
  }
  for (k = a1[40]; k != a1[41]; k += 16)
  {
    v26 = *(_QWORD *)(k + 8);
    if ((*(_BYTE *)(v26 + 4) & 2) == 0 && *(_BYTE *)(v26 + 20))
      i = i + *(double *)(v26 + 32) * *(double *)(v26 + 32);
  }
  v27 = a1[52];
  for (m = a1[53]; v27 != m; v27 += 16)
  {
    v29 = *(_QWORD *)(v27 + 8);
    if ((*(_BYTE *)(v29 + 4) & 2) == 0 && *(_BYTE *)(v29 + 20))
    {
      v56 = 3;
      v57 = v29 + 32;
      v58 = 0;
      v60 = 0.0;
      v59 = 0uLL;
      sub_20F053450(&v56, (double *)&v59);
      _V1.D[1] = *((_QWORD *)&v59 + 1);
      _D5 = *((_QWORD *)&v59 + 1);
      __asm { FMLA            D4, D5, V1.D[1] }
      _D1 = *(_QWORD *)(v29 + 112);
      __asm { FMLA            D0, D1, V3.D[1] }
      i = i + _D0 + *(double *)(v29 + 120) * *(double *)(v29 + 120);
    }
  }
  for (n = a1[64]; n != a1[65]; n += 16)
  {
    v36 = *(_QWORD *)(n + 8);
    if ((*(_BYTE *)(v36 + 4) & 2) == 0 && *(_BYTE *)(v36 + 20))
    {
      _Q1 = *(_OWORD *)(v36 + 32);
      _D3 = *(_QWORD *)(v36 + 40);
      __asm { FMLA            D2, D3, V1.D[1] }
      *(_QWORD *)&_Q1 = *(_QWORD *)(v36 + 56);
      __asm { FMLA            D2, D1, V0.D[1] }
      i = i + _D2;
    }
  }
  for (ii = a1[76]; ii != a1[77]; ii += 16)
  {
    v42 = *(_QWORD *)(ii + 8);
    if ((*(_BYTE *)(v42 + 4) & 2) == 0 && *(_BYTE *)(v42 + 20))
    {
      _Q1 = *(_OWORD *)(v42 + 32);
      _D3 = *(_QWORD *)(v42 + 40);
      __asm { FMLA            D2, D3, V1.D[1] }
      *(_QWORD *)&_Q1 = *(_QWORD *)(v42 + 56);
      __asm { FMLA            D2, D1, V0.D[1] }
      i = i + _D2;
    }
  }
  v47 = a1[88];
  v48 = a1[89];
  while (v47 != v48)
  {
    v49 = *(_QWORD *)(v47 + 8);
    if ((*(_BYTE *)(v49 + 4) & 2) == 0 && *(_BYTE *)(v49 + 20))
    {
      v59 = 0uLL;
      v60 = 0.0;
      sub_20E9733B8((float64x2_t *)(v49 + 32), (double *)&v59);
      _V1.D[1] = *((_QWORD *)&v59 + 1);
      _D3 = *((_QWORD *)&v59 + 1);
      __asm { FMLA            D2, D3, V1.D[1] }
      i = i + _D2 + v60 * v60;
    }
    v47 += 16;
  }
  for (jj = a1[100]; jj != a1[101]; jj += 16)
  {
    v54 = *(_QWORD *)(jj + 8);
    if ((*(_BYTE *)(v54 + 4) & 2) == 0 && *(_BYTE *)(v54 + 20))
      i = i + *(double *)(v54 + 32) * *(double *)(v54 + 32);
  }
  return i;
}

void sub_20F79A434(uint64_t a1, uint64_t *a2, double a3, double a4, double a5, float64x2_t a6)
{
  float64x2_t v6;
  unint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int *v20;
  __int128 v21;
  float64x2_t v22;
  __int128 v23;
  float64x2_t v24;
  float64x2_t v25;
  float64x2_t v26;
  uint64_t v27;
  float64x2_t v28;
  float64x2_t v29;
  float64x2_t v30;
  uint64_t v31;
  unsigned int *v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  float64x2_t v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  float64x2_t *v43;
  __n128 v44;
  uint64_t **v45;
  float64x2_t *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  double *v53;
  double v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  __int128 v59;
  __int128 v60;
  uint64_t v61;
  uint64_t v62;
  unsigned int *v63;
  __int128 v64;
  float64x2_t *v65;
  uint64_t v66;
  float64x2_t *v67;
  float64x2_t v68;
  uint64_t v69;
  uint64_t v70;
  unsigned int *v71;
  float64x2_t v72;
  __int128 v73;
  uint64_t v74;
  double v82;
  __double2 v83;
  double v84;
  double v85;
  double v86;
  double v87;
  double v88;
  double v89;
  double v90;
  double v91;
  double v92;
  float64x2_t v93;
  double v94;
  float64x2_t v95;
  float64x2_t v96;
  double v97;
  float64x2_t v98;
  double v99;
  float64x2_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  double *v107;
  double v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  unsigned int *v113;
  __int128 v114;
  uint64_t v116;
  float64x2_t v117;
  double v120;
  __double2 v121;
  double v122;
  double v123;
  double v124;
  double v125;
  double v126;
  double v127;
  double v128;
  double v129;
  double v130;
  double v131;
  double v132;
  float64x2_t v133;
  double v134;
  float64x2_t v135;
  double v136;
  double v137;
  float64x2_t v138;
  float64x2_t v139;
  float64x2_t v140;
  float64x2_t v141;
  double v142;
  double v143;

  v9 = 0;
  v10 = *(uint64_t **)(a1 + 17936);
  v11 = a1 + 17864;
  do
  {
    v12 = *(_QWORD *)(v11 + 8 * v9);
    v13 = v9 + 1;
    v14 = *(_QWORD *)(v11 + 8 * (v9 + 1));
    v15 = *(_QWORD **)(a1 + 17832);
    v16 = &v10[v14 - v12];
    if (v9 > 3)
    {
      if (v9 > 5)
      {
        if (v9 == 6)
        {
          if (v14 != v12)
          {
            v55 = v15[73];
            v56 = 8 * v14 - 8 * v12;
            do
            {
              v57 = *v10++;
              v58 = *(_QWORD *)(v55 + 16 * v57 + 8);
              v59 = *(_OWORD *)(v58 + 80);
              *(_OWORD *)(v58 + 208) = *(_OWORD *)(v58 + 64);
              *(_OWORD *)(v58 + 224) = v59;
              *(_QWORD *)(v58 + 240) = *(_QWORD *)(v58 + 96);
              v60 = *(_OWORD *)(v58 + 48);
              *(_OWORD *)(v58 + 176) = *(_OWORD *)(v58 + 32);
              *(_OWORD *)(v58 + 192) = v60;
              v56 -= 8;
            }
            while (v56);
            goto LABEL_2;
          }
        }
        else if (v14 != v12)
        {
          v101 = v15[85];
          v102 = *a2;
          v103 = *(_QWORD *)(a1 + 17920);
          v104 = *(_QWORD *)(a1 + 18112);
          v105 = 8 * v14 - 8 * v12;
          do
          {
            v106 = *v10++;
            v107 = *(double **)(v101 + 16 * v106 + 8);
            v108 = v107[4];
            v109 = *(_QWORD *)(v104 + 8 * (v103 + *(unsigned int *)v107));
            v107[5] = v108;
            v107[4] = v108 + *(double *)(v102 + 8 * v109);
            v105 -= 8;
          }
          while (v105);
          goto LABEL_2;
        }
      }
      else if (v9 == 5)
      {
        if (v14 != v12)
        {
          v31 = v15[61];
          do
          {
            v32 = *(unsigned int **)(v31 + 16 * *v10 + 8);
            v33 = *((_OWORD *)v32 + 5);
            v34 = *((_OWORD *)v32 + 7);
            v35 = *((_OWORD *)v32 + 8);
            *(_OWORD *)(v32 + 98) = *((_OWORD *)v32 + 6);
            *(_OWORD *)(v32 + 102) = v34;
            v36 = *((float64x2_t *)v32 + 3);
            *(_OWORD *)(v32 + 90) = *((_OWORD *)v32 + 4);
            *(_OWORD *)(v32 + 94) = v33;
            v37 = *((_OWORD *)v32 + 9);
            v38 = *((_OWORD *)v32 + 11);
            v39 = *((_OWORD *)v32 + 12);
            *(_OWORD *)(v32 + 114) = *((_OWORD *)v32 + 10);
            *(_OWORD *)(v32 + 118) = v38;
            *(_OWORD *)(v32 + 106) = v35;
            *(_OWORD *)(v32 + 110) = v37;
            v40 = *((_OWORD *)v32 + 15);
            v41 = *((_OWORD *)v32 + 13);
            *(_OWORD *)(v32 + 130) = *((_OWORD *)v32 + 14);
            *(_OWORD *)(v32 + 134) = v40;
            *(_OWORD *)(v32 + 122) = v39;
            *(_OWORD *)(v32 + 126) = v41;
            v42 = *((_OWORD *)v32 + 3);
            a6 = *((float64x2_t *)v32 + 2);
            *(float64x2_t *)(v32 + 82) = a6;
            *(_OWORD *)(v32 + 86) = v42;
            v43 = (float64x2_t *)(*a2 + 8
                                      * *(_QWORD *)(*(_QWORD *)(a1 + 18112) + 8 * (*(_QWORD *)(a1 + 17904) + *v32)));
            v44 = (__n128)vaddq_f64(v36, v43[1]);
            *((float64x2_t *)v32 + 2) = vaddq_f64(a6, *v43);
            *((__n128 *)v32 + 3) = v44;
            v45 = (uint64_t **)*((_QWORD *)v32 + 37);
            if (v45)
            {
              v46 = (float64x2_t *)(v32 + 8);
              do
              {
                v44.n128_f64[0] = sub_20F6182A0((char *)v45[5], v46, v44);
                v45 = (uint64_t **)*v45;
              }
              while (v45);
            }
            ++v10;
          }
          while (v10 != v16);
          goto LABEL_2;
        }
      }
      else if (v14 != v12)
      {
        v61 = v15[49];
        v62 = 8 * v14 - 8 * v12;
        do
        {
          v63 = *(unsigned int **)(v61 + 16 * *v10 + 8);
          v64 = *((_OWORD *)v63 + 2);
          *(_OWORD *)(v63 + 42) = *((_OWORD *)v63 + 3);
          *(_OWORD *)(v63 + 38) = v64;
          *((_QWORD *)v63 + 23) = *((_QWORD *)v63 + 8);
          *((_BYTE *)v63 + 192) = *((_BYTE *)v63 + 72);
          if (*((_BYTE *)v63 + 20) && *((_BYTE *)v63 + 144))
          {
            v65 = (float64x2_t *)(v63 + 8);
            v66 = (uint64_t)(v63 + 4);
            v67 = (float64x2_t *)(*a2 + 8
                                      * *(_QWORD *)(*(_QWORD *)(a1 + 18112) + 8 * (*(_QWORD *)(a1 + 17896) + *v63)));
            v68 = vaddq_f64(v65[1], v67[1]);
            *v65 = vaddq_f64(*v65, *v67);
            v65[1] = v68;
            sub_20F6169C8(v66);
          }
          ++v10;
          v62 -= 8;
        }
        while (v62);
        goto LABEL_2;
      }
    }
    else if (v9 > 1)
    {
      if (v9 == 2)
      {
        if (v14 != v12)
        {
          v47 = v15[25];
          v48 = *a2;
          v49 = *(_QWORD *)(a1 + 17880);
          v50 = *(_QWORD *)(a1 + 18112);
          v51 = 8 * v14 - 8 * v12;
          do
          {
            v52 = *v10++;
            v53 = *(double **)(v47 + 16 * v52 + 8);
            v54 = v53[4];
            v53[6] = v54;
            v53[4] = v54 + *(double *)(v48 + 8 * *(_QWORD *)(v50 + 8 * (v49 + *(unsigned int *)v53)));
            *((_BYTE *)v53 + 40) = 0;
            v51 -= 8;
          }
          while (v51);
          goto LABEL_2;
        }
      }
      else if (v14 != v12)
      {
        v69 = v15[37];
        v70 = 8 * v14 - 8 * v12;
        do
        {
          v71 = *(unsigned int **)(v69 + 16 * *v10 + 8);
          v72 = *((float64x2_t *)v71 + 3);
          *(_OWORD *)(v71 + 34) = *((_OWORD *)v71 + 2);
          v73 = *((_OWORD *)v71 + 4);
          *(_OWORD *)(v71 + 46) = *((_OWORD *)v71 + 5);
          *(_OWORD *)(v71 + 42) = v73;
          *((_QWORD *)v71 + 25) = *((_QWORD *)v71 + 12);
          *(float64x2_t *)(v71 + 38) = v72;
          *((_OWORD *)v71 + 13) = *(_OWORD *)(v71 + 26);
          *((_QWORD *)v71 + 28) = *((_QWORD *)v71 + 15);
          if (*((_BYTE *)v71 + 20) && *((_BYTE *)v71 + 129))
          {
            v74 = *a2 + 8 * *(_QWORD *)(*(_QWORD *)(a1 + 18112) + 8 * (*(_QWORD *)(a1 + 17888) + *v71));
            v72.f64[0] = *(float64_t *)(v74 + 16);
            _Q2 = *(float64x2_t *)v74;
            _D3 = *(_QWORD *)(v74 + 8);
            __asm { FMLA            D0, D3, V2.D[1] }
            v82 = sqrt(_D0 + v72.f64[0] * v72.f64[0]);
            a6.f64[0] = 1.0 / v82;
            if (v82 == 0.0)
              a6.f64[0] = 1.0;
            v140 = vmulq_n_f64(_Q2, a6.f64[0]);
            v142 = vmulq_f64(v72, a6).f64[0];
            v83 = __sincos_stret(v82);
            v6 = v140;
            a6.f64[0] = v83.__cosval + (1.0 - v83.__cosval) * vmuld_n_f64(v6.f64[0], v6.f64[0]);
            v84 = (1.0 - v83.__cosval) * vmuld_lane_f64(v6.f64[0], v6, 1);
            v85 = v84 - v83.__sinval * v142;
            v86 = (1.0 - v83.__cosval) * vmuld_n_f64(v140.f64[0], v142);
            v87 = vmuld_lane_f64(v83.__sinval, v140, 1);
            v88 = v87 + v86;
            v89 = v83.__sinval * v142 + v84;
            v90 = v83.__cosval + (1.0 - v83.__cosval) * vmuld_lane_f64(v140.f64[1], v140, 1);
            v91 = (1.0 - v83.__cosval) * vmuld_lane_f64(v142, v140, 1);
            v6.f64[0] = v91 - v83.__sinval * v140.f64[0];
            v92 = v86 - v87;
            v93.f64[0] = v83.__sinval * v140.f64[0] + v91;
            v94 = v83.__cosval + (1.0 - v83.__cosval) * vmuld_n_f64(v142, v142);
            v95.f64[0] = *((float64_t *)v71 + 6);
            v96 = *((float64x2_t *)v71 + 2);
            v97 = *((double *)v71 + 9);
            v98 = *(float64x2_t *)(v71 + 14);
            v99 = *((double *)v71 + 12);
            v100 = *((float64x2_t *)v71 + 5);
            *((float64x2_t *)v71 + 2) = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v96, a6.f64[0]), v98, v89), v100, v92);
            *((double *)v71 + 6) = v95.f64[0] * a6.f64[0] + v97 * v89 + v99 * v92;
            *(float64x2_t *)(v71 + 14) = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v96, v85), v98, v90), v100, v93.f64[0]);
            *((double *)v71 + 9) = v95.f64[0] * v85 + v97 * v90 + v99 * v93.f64[0];
            *((float64x2_t *)v71 + 5) = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v96, v88), v98, v6.f64[0]), v100, v94);
            *((double *)v71 + 12) = v95.f64[0] * v88 + v97 * v6.f64[0] + v99 * v94;
            if (*((_BYTE *)v71 + 128))
            {
              v93.f64[0] = *((float64_t *)v71 + 15);
              v95.f64[0] = *(float64_t *)(v74 + 40);
              a6 = *(float64x2_t *)(v74 + 24);
              *(float64x2_t *)(v71 + 26) = vaddq_f64(*(float64x2_t *)(v71 + 26), a6);
              *((_QWORD *)v71 + 15) = *(_OWORD *)&vaddq_f64(v93, v95);
            }
          }
          ++v10;
          v70 -= 8;
        }
        while (v70);
        goto LABEL_2;
      }
    }
    else if (v9)
    {
      if (v14 != v12)
      {
        v17 = v15[13];
        v18 = 8 * v14 - 8 * v12;
        do
        {
          v19 = *v10++;
          v20 = *(unsigned int **)(v17 + 16 * v19 + 8);
          v21 = *((_OWORD *)v20 + 2);
          v22 = *((float64x2_t *)v20 + 3);
          *((_QWORD *)v20 + 22) = *((_QWORD *)v20 + 12);
          v24 = *((float64x2_t *)v20 + 4);
          v23 = *((_OWORD *)v20 + 5);
          v25 = *((float64x2_t *)v20 + 3);
          *((float64x2_t *)v20 + 9) = v24;
          *((_OWORD *)v20 + 10) = v23;
          v26 = *((float64x2_t *)v20 + 2);
          *((_OWORD *)v20 + 7) = v21;
          *((float64x2_t *)v20 + 8) = v22;
          v27 = *a2 + 8 * *(_QWORD *)(*(_QWORD *)(a1 + 18112) + 8 * (*(_QWORD *)(a1 + 17872) + *v20));
          v22.f64[0] = *((float64_t *)v20 + 12);
          v6.f64[0] = *(float64_t *)(v27 + 64);
          v28 = vaddq_f64(v26, *(float64x2_t *)v27);
          v29 = vaddq_f64(v25, *(float64x2_t *)(v27 + 16));
          a6 = vaddq_f64(v24, *(float64x2_t *)(v27 + 32));
          v30 = vaddq_f64(*((float64x2_t *)v20 + 5), *(float64x2_t *)(v27 + 48));
          *((float64x2_t *)v20 + 4) = a6;
          *((float64x2_t *)v20 + 5) = v30;
          *((float64x2_t *)v20 + 2) = v28;
          *((float64x2_t *)v20 + 3) = v29;
          *((_QWORD *)v20 + 12) = *(_OWORD *)&vaddq_f64(v22, v6);
          *((_BYTE *)v20 + 104) = 0;
          v18 -= 8;
        }
        while (v18);
LABEL_2:
        v10 = v16;
      }
    }
    else if (v14 != v12)
    {
      v110 = v15[1];
      v111 = 8 * v14 - 8 * v12;
      do
      {
        v112 = *v10++;
        v113 = *(unsigned int **)(v110 + 16 * v112 + 8);
        v117 = *((float64x2_t *)v113 + 3);
        *(_OWORD *)(v113 + 46) = *((_OWORD *)v113 + 2);
        *((_QWORD *)v113 + 31) = *((_QWORD *)v113 + 12);
        v114 = *((_OWORD *)v113 + 4);
        *(_OWORD *)(v113 + 58) = *((_OWORD *)v113 + 5);
        *(_OWORD *)(v113 + 54) = v114;
        _Q0 = *(_OWORD *)(v113 + 26);
        *(float64x2_t *)(v113 + 50) = v117;
        *((_OWORD *)v113 + 16) = _Q0;
        *((_QWORD *)v113 + 34) = *((_QWORD *)v113 + 15);
        v116 = *a2 + 8 * *(_QWORD *)(*(_QWORD *)(a1 + 18112) + 8 * (*(_QWORD *)(a1 + 17864) + *v113));
        v117.f64[0] = *(float64_t *)(v116 + 16);
        _Q2 = *(float64x2_t *)v116;
        _D3 = *(_QWORD *)(v116 + 8);
        __asm { FMLA            D0, D3, V2.D[1] }
        v120 = sqrt(*(double *)&_Q0 + v117.f64[0] * v117.f64[0]);
        a6.f64[0] = 1.0 / v120;
        if (v120 == 0.0)
          a6.f64[0] = 1.0;
        v141 = vmulq_n_f64(_Q2, a6.f64[0]);
        v143 = vmulq_f64(v117, a6).f64[0];
        v121 = __sincos_stret(v120);
        v6 = v141;
        v122 = (1.0 - v121.__cosval) * vmuld_lane_f64(v6.f64[0], v6, 1);
        a6.f64[0] = v121.__cosval + (1.0 - v121.__cosval) * vmuld_n_f64(v6.f64[0], v6.f64[0]);
        v123 = v122 - v121.__sinval * v143;
        v124 = (1.0 - v121.__cosval) * vmuld_n_f64(v141.f64[0], v143);
        v125 = vmuld_lane_f64(v121.__sinval, v141, 1);
        v126 = v125 + v124;
        v127 = v121.__sinval * v143 + v122;
        v128 = v121.__cosval + (1.0 - v121.__cosval) * vmuld_lane_f64(v141.f64[1], v141, 1);
        v129 = (1.0 - v121.__cosval) * vmuld_lane_f64(v143, v141, 1);
        v6.f64[0] = v129 - v121.__sinval * v141.f64[0];
        v130 = v124 - v125;
        v131 = v121.__sinval * v141.f64[0] + v129;
        v132 = *((double *)v113 + 6);
        v133 = *((float64x2_t *)v113 + 2);
        v134 = *((double *)v113 + 9);
        v135 = *(float64x2_t *)(v113 + 14);
        v136 = v121.__cosval + (1.0 - v121.__cosval) * vmuld_n_f64(v143, v143);
        v137 = *((double *)v113 + 12);
        v138 = *((float64x2_t *)v113 + 5);
        *((float64x2_t *)v113 + 2) = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v133, a6.f64[0]), v135, v127), v138, v130);
        *((double *)v113 + 6) = v132 * a6.f64[0] + v134 * v127 + v137 * v130;
        *(float64x2_t *)(v113 + 14) = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v133, v123), v135, v128), v138, v131);
        *((double *)v113 + 9) = v132 * v123 + v134 * v128 + v137 * v131;
        *((float64x2_t *)v113 + 5) = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v133, v126), v135, v6.f64[0]), v138, v136);
        *((double *)v113 + 12) = v132 * v126 + v134 * v6.f64[0] + v137 * v136;
        v139.f64[0] = *((float64_t *)v113 + 15);
        a6.f64[0] = *(float64_t *)(v116 + 40);
        *(float64x2_t *)(v113 + 26) = vaddq_f64(*(float64x2_t *)(v113 + 26), *(float64x2_t *)(v116 + 24));
        *((_QWORD *)v113 + 15) = *(_OWORD *)&vaddq_f64(v139, a6);
        *((_BYTE *)v113 + 128) = 0;
        v111 -= 8;
      }
      while (v111);
      goto LABEL_2;
    }
    v9 = v13;
  }
  while (v13 != 8);
  *(_BYTE *)(a1 + 1877) = 0;
  *(_WORD *)(a1 + 1872) = 0;
  *(_WORD *)(a1 + 1875) = 0;
}

uint64_t sub_20F79AB88(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  uint64_t v5;
  uint64_t v6;
  double v7;
  double v8;
  double v9;
  uint64_t v10;
  size_t v11;
  int8x16_t *v12;
  int8x16_t *v13;
  uint64_t v14;
  float64x2_t *v15;
  double v16;
  float64x2_t v17;
  float64x2_t *v18;
  int8x16_t *v19;
  uint64_t v25;
  int8x16_t v26;
  int v27;
  int v28;
  signed int j;
  double *v30;
  int v31;
  double v32;
  uint64_t v33;
  float64x2_t *v34;
  unint64_t v35;
  double *v36;
  unint64_t v37;
  float64x2_t v38;
  float64x2_t *v39;
  uint64_t v40;
  float64x2_t v41;
  double *v42;
  double *v43;
  uint64_t v44;
  float64x2_t *v45;
  float64x2_t *v46;
  double v47;
  unint64_t v48;
  double *v49;
  unint64_t v50;
  uint64_t v51;
  double *v52;
  float64x2_t *v53;
  float64x2_t *v54;
  uint64_t v55;
  float64x2_t v56;
  uint64_t v57;
  uint64_t v58;
  double *v59;
  double *v60;
  double v61;
  double v62;
  double v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t i;
  float64_t v67;
  int v68;
  int v69;
  uint64_t v70;
  uint64_t v71;
  size_t v72;
  float64x2_t *v73;
  float64x2_t *v74;
  double v75;
  uint64_t v76;
  double *v77;
  unint64_t v78;
  double *v79;
  uint64_t v80;
  unint64_t v81;
  unint64_t v82;
  uint64_t v83;
  float64x2_t *v84;
  float64x2_t *v85;
  uint64_t v86;
  float64x2_t v87;
  double v88;
  uint64_t v89;
  double *v90;
  size_t v91;
  float64x2_t *v92;
  unint64_t v93;
  double *v94;
  unint64_t v95;
  uint64_t v96;
  double *v97;
  float64x2_t *v98;
  float64x2_t *v99;
  uint64_t v101;
  float64x2_t v102;
  char *v103;
  double *v104;
  double v105;
  _QWORD *v106;
  uint64_t *v107;
  unint64_t v108;
  uint64_t *v109;
  uint64_t v110;
  uint64_t v111;
  _QWORD *v112;
  uint64_t v113;
  double *v114;
  double *v115;
  uint64_t v116;
  float64x2_t *v117;
  double *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  int v131;
  void *v132;
  size_t v133;
  unsigned int v134;
  size_t v135;
  void *v136;
  void *v137;
  int v138;
  char *v139;
  uint64_t v140;
  void *v141;
  void *v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  void *v147;
  void *v148;
  __int128 v149;
  __int128 v150;
  __int128 v151;
  int v152;
  void *v153;
  void *v154;
  void *v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  void *v160;
  const void *v161;
  __n128 v162;
  int v164;
  char *v165;
  uint64_t __len;
  int *v167;
  unsigned int v168;
  int *v169;
  uint64_t v170;
  uint64_t __src;
  double __srca;
  char *__srcb;
  unsigned int v174;
  void *v175;
  void *v176;
  _QWORD *v177;
  void *v178[2];
  void *v179[2];
  __int128 v180;
  void *__p[2];
  uint64_t v182;
  float64x2_t *v183;
  unint64_t v184;
  unsigned int v185;
  unint64_t v186;
  void *v187;
  void *v188;
  uint64_t v189;
  void *v190;
  __int128 v191;
  __int128 v192;
  __int128 v193;
  __int128 v194;
  __int128 v195;
  __int128 v196;
  uint64_t v197;
  char **v198;
  uint64_t v199;
  const void *v200;
  int v201;
  unint64_t v202;
  __int128 *v203;

  v3 = (int *)(a1 + 18232);
  v4 = (int *)(a1 + 17968);
  v5 = *(_QWORD *)(*(_QWORD *)(a1 + 18136) + 8 * *(_QWORD *)(a1 + 18104));
  v6 = *(_QWORD *)(*(_QWORD *)(a1 + 18144) - 8);
  v168 = v6 - v5;
  if (*(_BYTE *)(a1 + 1888))
  {
    v7 = *(double *)(a1 + 1896);
    v8 = *(double *)(a1 + 18464);
    v169 = (int *)(a1 + 17968);
    v170 = a2;
    if (v8 == v7)
      goto LABEL_3;
  }
  else
  {
    v7 = 0.0;
    v8 = *(double *)(a1 + 18464);
    v169 = (int *)(a1 + 17968);
    v170 = a2;
    if (v8 == 0.0)
    {
LABEL_3:
      v9 = *(double *)(a1 + 18472);
      if (v9 > 0.0)
        goto LABEL_4;
LABEL_62:
      v183 = 0;
      v184 = 0;
      v185 = 0;
      v89 = v3[56];
      if ((_DWORD)v89)
      {
        v90 = *(double **)(a1 + 18440);
        if (!v90)
        {
          v103 = (char *)operator new((8 * v89 + 31) & 0xFFFFFFFE0, (std::align_val_t)0x20uLL);
          v104 = 0;
          do
          {
            *(double *)((char *)v104 + (_QWORD)v103) = 1.0 / *v104;
            ++v104;
          }
          while ((double *)(8 * v89) != v104);
          v183 = (float64x2_t *)v103;
          v184 = ((8 * v89 + 31) & 0xFFFFFFFE0uLL) >> 3;
          v185 = v89;
          goto LABEL_75;
        }
        v185 = v3[56];
        v91 = (8 * v89 + 31) & 0xFFFFFFFE0;
        v184 = v91 >> 3;
        v92 = (float64x2_t *)operator new(v91, (std::align_val_t)0x20uLL);
        v183 = v92;
        v93 = (v89 - 1) & 0x1FFFFFFFFFFFFFFFLL;
        if (v93 < 3)
        {
          v94 = (double *)v92;
        }
        else
        {
          v94 = (double *)v92;
          if ((unint64_t)((char *)v92 - (char *)v90) >= 0x20)
          {
            v95 = v93 + 1;
            v96 = v95 & 0x3FFFFFFFFFFFFFFCLL;
            v94 = &v92->f64[v96];
            v97 = &v90[v96];
            v98 = (float64x2_t *)(v90 + 2);
            v99 = v92 + 1;
            __asm { FMOV            V0.2D, #1.0 }
            v101 = v95 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v102 = vdivq_f64(_Q0, *v98);
              v99[-1] = vdivq_f64(_Q0, v98[-1]);
              *v99 = v102;
              v98 += 2;
              v99 += 2;
              v101 -= 4;
            }
            while (v101);
            v90 = v97;
            if (v95 == (v95 & 0x3FFFFFFFFFFFFFFCLL))
              goto LABEL_75;
          }
        }
        do
        {
          v105 = *v90++;
          *v94++ = 1.0 / v105;
        }
        while (v94 != &v92->f64[v89]);
      }
      goto LABEL_75;
    }
  }
  __srca = v7 - v8;
  v27 = *(_DWORD *)(a1 + 1904);
  if (v27 == 1)
  {
    v43 = *(double **)(a1 + 18184);
    v44 = 8 * *(_QWORD *)(*(_QWORD *)(a1 + 18136) + 8 * *(_QWORD *)(a1 + 18104));
    v45 = (float64x2_t *)operator new((v44 + 31) & 0xFFFFFFFE0, (std::align_val_t)0x20uLL);
    v46 = v45;
    if ((_DWORD)v5)
    {
      v47 = v7 + 1.0;
      v48 = (v5 - 1) & 0x1FFFFFFFFFFFFFFFLL;
      if (v48 < 3)
      {
        v49 = (double *)v45;
      }
      else
      {
        v49 = (double *)v45;
        if ((unint64_t)((char *)v45 - (char *)v43) >= 0x20)
        {
          v50 = v48 + 1;
          v51 = v50 & 0x3FFFFFFFFFFFFFFCLL;
          v49 = &v45->f64[v51];
          v52 = &v43[v51];
          v53 = (float64x2_t *)(v43 + 2);
          v54 = v45 + 1;
          v55 = v50 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v56 = vmulq_n_f64(*v53, v47);
            v54[-1] = vmulq_n_f64(v53[-1], v47);
            *v54 = v56;
            v53 += 2;
            v54 += 2;
            v55 -= 4;
          }
          while (v55);
          v43 = v52;
          if (v50 == (v50 & 0x3FFFFFFFFFFFFFFCLL))
            goto LABEL_45;
        }
      }
      do
      {
        v63 = *v43++;
        *v49++ = v47 * v63;
      }
      while (v49 != (double *)((char *)v45 + v44));
    }
LABEL_45:
    v64 = (*(_QWORD *)(a1 + 18272) - *(_QWORD *)(a1 + 18264)) >> 3;
    if (*v3 >= (int)v64)
      v65 = v64;
    else
      v65 = *v3;
    v4 = v169;
    if ((int)v65 >= 1)
    {
      for (i = 0; i != v65; ++i)
      {
        v67 = v46->f64[i];
        *(float64_t *)sub_20F762098(v3, i, i, 1u) = v67;
      }
    }
    MEMORY[0x212BC6368](v46, 0x1000C8000313F17);
    sub_20F76BA04((_QWORD *)(a1 + 18232));
    v31 = *(_DWORD *)(a1 + 1904);
    if (v31 != 1)
      goto LABEL_21;
LABEL_52:
    v68 = v5;
    v69 = v4[58];
    v70 = *(_QWORD *)(a1 + 18184);
    v71 = 8 * v168;
    v72 = (v71 + 31) & 0xFFFFFFFE0;
    *((_QWORD *)&v191 + 1) = v72 >> 3;
    v73 = (float64x2_t *)operator new(v72, (std::align_val_t)0x20uLL);
    v74 = v73;
    *(_QWORD *)&v191 = v73;
    LODWORD(v192) = v168;
    if (v168)
    {
      v75 = v7 + 1.0;
      v76 = v69 - v168;
      v77 = (double *)(v70 + 8 * v76);
      v78 = (v168 - 1) & 0x1FFFFFFFFFFFFFFFLL;
      if (v78 >= 5)
      {
        v80 = 8 * v76;
        v81 = (unint64_t)v73 - v70 + -8 * v76;
        v79 = (double *)v73;
        if (v81 >= 0x20)
        {
          v82 = v78 + 1;
          v83 = v82 & 0x3FFFFFFFFFFFFFFCLL;
          v79 = &v73->f64[v83];
          v77 = (double *)((char *)v77 + v83 * 8);
          v84 = (float64x2_t *)(v80 + v70 + 16);
          v85 = v73 + 1;
          v86 = v82 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v87 = vmulq_n_f64(*v84, v75);
            v85[-1] = vmulq_n_f64(v84[-1], v75);
            *v85 = v87;
            v84 += 2;
            v85 += 2;
            v86 -= 4;
          }
          while (v86);
          if (v82 == (v82 & 0x3FFFFFFFFFFFFFFCLL))
            goto LABEL_60;
        }
      }
      else
      {
        v79 = (double *)v73;
      }
      do
      {
        v88 = *v77++;
        *v79++ = v75 * v88;
      }
      while (v79 != (double *)((char *)v73 + v71));
    }
LABEL_60:
    sub_20F76B604(a1 + 18440, (uint64_t)&v191);
    MEMORY[0x212BC6368](v74, 0x1000C8000313F17);
    LODWORD(v5) = v68;
    v32 = __srca;
    goto LABEL_61;
  }
  if (!v27)
  {
    v28 = *v3 >= (int)((*(_QWORD *)(a1 + 18272) - *(_QWORD *)(a1 + 18264)) >> 3)
        ? (*(_QWORD *)(a1 + 18272) - *(_QWORD *)(a1 + 18264)) >> 3
        : *v3;
    if (v28 >= 1)
    {
      for (j = 0; j != v28; ++j)
      {
        v30 = (double *)sub_20F762098(v3, j, j, 1u);
        *v30 = __srca + *v30;
      }
    }
  }
  sub_20F76BA04((_QWORD *)(a1 + 18232));
  v31 = *(_DWORD *)(a1 + 1904);
  if (v31 == 1)
    goto LABEL_52;
LABEL_21:
  v32 = __srca;
  if (!v31)
  {
    v33 = v3[56];
    if ((_DWORD)v33)
    {
      v34 = *(float64x2_t **)(a1 + 18440);
      v35 = (v33 - 1) & 0x1FFFFFFFFFFFFFFFLL;
      v36 = (double *)v34;
      if (v35 < 3)
        goto LABEL_27;
      v37 = v35 + 1;
      v36 = &v34->f64[v37 & 0x3FFFFFFFFFFFFFFCLL];
      v38 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&__srca, 0);
      v39 = v34 + 1;
      v40 = v37 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v41 = vaddq_f64(v38, *v39);
        v39[-1] = vaddq_f64(v38, v39[-1]);
        *v39 = v41;
        v39 += 2;
        v40 -= 4;
      }
      while (v40);
      if (v37 != (v37 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_27:
        v42 = &v34->f64[v33];
        do
        {
          *v36 = __srca + *v36;
          ++v36;
        }
        while (v36 != v42);
      }
    }
  }
LABEL_61:
  *(double *)(a1 + 18464) = v32 + *(double *)(a1 + 18464);
  *(_BYTE *)(a1 + 1872) = 0;
  v9 = *(double *)(a1 + 18472);
  if (v9 <= 0.0)
    goto LABEL_62;
LABEL_4:
  v10 = v3[56];
  v11 = (8 * v10 + 31) & 0xFFFFFFFE0;
  v184 = v11 >> 3;
  *(double *)&__src = v9;
  v12 = (int8x16_t *)operator new(v11, (std::align_val_t)0x20uLL);
  v183 = (float64x2_t *)v12;
  v185 = v10;
  if ((_DWORD)v10)
  {
    v13 = v12;
    bzero(v12, 8 * v10);
    v14 = 0;
    v15 = *(float64x2_t **)(a1 + 18440);
    if (v10 < 4)
    {
      v16 = *(double *)&__src;
    }
    else
    {
      v16 = *(double *)&__src;
      if ((unint64_t)((char *)v13 - (char *)v15) >= 0x20)
      {
        v14 = v10 & 0xFFFFFFFC;
        v17 = (float64x2_t)vdupq_lane_s64(__src, 0);
        v18 = v15 + 1;
        v19 = v13 + 1;
        __asm { FMOV            V1.2D, #1.0 }
        v25 = v14;
        do
        {
          v26 = vandq_s8((int8x16_t)vdivq_f64(_Q1, *v18), (int8x16_t)vcgeq_f64(vabsq_f64(*v18), v17));
          v19[-1] = vandq_s8((int8x16_t)vdivq_f64(_Q1, v18[-1]), (int8x16_t)vcgeq_f64(vabsq_f64(v18[-1]), v17));
          *v19 = v26;
          v18 += 2;
          v19 += 2;
          v25 -= 4;
        }
        while (v25);
        if (v14 == v10)
          goto LABEL_75;
      }
    }
    v57 = v10 - v14;
    v58 = v14;
    v59 = (double *)&v13->i64[v14];
    v60 = &v15->f64[v58];
    do
    {
      v61 = *v60++;
      v62 = 1.0 / v61;
      if (fabs(v61) < v16)
        v62 = 0.0;
      *v59++ = v62;
      --v57;
    }
    while (v57);
  }
LABEL_75:
  LODWORD(v191) = 0;
  v192 = 0uLL;
  *((_QWORD *)&v191 + 1) = 0;
  v106 = operator new(8uLL);
  *((_QWORD *)&v191 + 1) = v106;
  *v106 = 0;
  *(_QWORD *)&v192 = v106 + 1;
  *((_QWORD *)&v192 + 1) = v106 + 1;
  v193 = 0u;
  v194 = 0u;
  v195 = 0u;
  v196 = 0u;
  v197 = 0;
  if (*(_QWORD *)(a1 + 18344) == *(_QWORD *)(a1 + 18352))
    v107 = 0;
  else
    v107 = *(uint64_t **)(a1 + 18344);
  v108 = *(_QWORD *)(a1 + 18376) - *(_QWORD *)(a1 + 18368);
  if (v108)
    v109 = *(uint64_t **)(a1 + 18368);
  else
    v109 = 0;
  if (*(_QWORD *)(a1 + 18392) == *(_QWORD *)(a1 + 18400))
    v110 = 0;
  else
    v110 = *(_QWORD *)(a1 + 18392);
  if (*(_QWORD *)(a1 + 18416) == *(_QWORD *)(a1 + 18424))
    v111 = 0;
  else
    v111 = *(_QWORD *)(a1 + 18416);
  sub_20F76BB80((uint64_t)&v191, v3[26], v108 >> 3, v107, v109, v110, v111);
  v174 = 0;
  v112 = operator new(8uLL);
  v175 = v112;
  *v112 = 0;
  v176 = v112 + 1;
  v177 = v112 + 1;
  *(_OWORD *)v178 = 0u;
  *(_OWORD *)v179 = 0u;
  v180 = 0u;
  *(_OWORD *)__p = 0u;
  v182 = 0;
  v113 = 8 * v185;
  v114 = (double *)operator new((v113 + 31) & 0xFFFFFFFE0, (std::align_val_t)0x20uLL);
  v115 = v114;
  if (v185)
  {
    v116 = 0;
    v117 = v183;
    v118 = v114;
    do
    {
      *v118++ = -v117->f64[v116];
      v116 = (v116 + 1);
      v113 -= 8;
    }
    while (v113);
  }
  if (*(_QWORD *)(a1 + 18240) == *(_QWORD *)(a1 + 18248))
    v119 = 0;
  else
    v119 = *(_QWORD *)(a1 + 18240);
  if (*(_QWORD *)(a1 + 18264) == *(_QWORD *)(a1 + 18272))
    v120 = 0;
  else
    v120 = *(_QWORD *)(a1 + 18264);
  if (*(_QWORD *)(a1 + 18288) == *(_QWORD *)(a1 + 18296))
    v121 = 0;
  else
    v121 = *(_QWORD *)(a1 + 18288);
  if (*(_QWORD *)(a1 + 18312) == *(_QWORD *)(a1 + 18320))
    v122 = 0;
  else
    v122 = *(_QWORD *)(a1 + 18312);
  if (*(_QWORD *)(a1 + 18344) == *(_QWORD *)(a1 + 18352))
    v123 = 0;
  else
    v123 = *(_QWORD *)(a1 + 18344);
  if (*(_QWORD *)(a1 + 18368) == *(_QWORD *)(a1 + 18376))
    v124 = 0;
  else
    v124 = *(_QWORD *)(a1 + 18368);
  v125 = *(_QWORD *)(a1 + 18392);
  if (v125 == *(_QWORD *)(a1 + 18400))
    v125 = 0;
  v126 = *(_QWORD *)(a1 + 18416);
  if (v126 == *(_QWORD *)(a1 + 18424))
    v126 = 0;
  v127 = v193;
  v128 = *((_QWORD *)&v191 + 1);
  if (*((_QWORD *)&v191 + 1) == (_QWORD)v192)
    v128 = 0;
  if (*((_QWORD *)&v193 + 1) == (_QWORD)v193)
    v127 = 0;
  v129 = *((_QWORD *)&v194 + 1);
  if (*((_QWORD *)&v194 + 1) == (_QWORD)v195)
    v129 = 0;
  v130 = v196;
  if ((_QWORD)v196 == *((_QWORD *)&v196 + 1))
    v130 = 0;
  sub_20F76BFD0(&v174, v119, v120, v121, v122, v3[26], v123, v124, v125, v126, (uint64_t)v114, (*((_QWORD *)&v193 + 1) - (_QWORD)v193) >> 3, v128, v127, v129, v130);
  MEMORY[0x212BC6368](v115, 0x1000C8000313F17);
  if ((_QWORD)v196)
  {
    *((_QWORD *)&v196 + 1) = v196;
    operator delete((void *)v196);
  }
  if (*((_QWORD *)&v194 + 1))
  {
    *(_QWORD *)&v195 = *((_QWORD *)&v194 + 1);
    operator delete(*((void **)&v194 + 1));
  }
  if ((_QWORD)v193)
  {
    *((_QWORD *)&v193 + 1) = v193;
    operator delete((void *)v193);
  }
  if (*((_QWORD *)&v191 + 1))
  {
    *(_QWORD *)&v192 = *((_QWORD *)&v191 + 1);
    operator delete(*((void **)&v191 + 1));
  }
  __srcb = *(char **)(a1 + 18160);
  v131 = v169[52];
  if (*(_BYTE *)(a1 + 1872))
  {
LABEL_129:
    *(_DWORD *)(v170 + 16) = v6;
    v132 = *(void **)v170;
    v167 = v3;
    if (*(_QWORD *)(v170 + 8) >= (unint64_t)v6)
    {
      v134 = v5;
    }
    else
    {
      if (v132)
        MEMORY[0x212BC6368](v132, 0x1000C8000313F17);
      v133 = (8 * v6 + 31) & 0xFFFFFFFE0;
      *(_QWORD *)v170 = 0;
      *(_QWORD *)(v170 + 8) = v133 >> 3;
      v132 = operator new(v133, (std::align_val_t)0x20uLL);
      v134 = v5;
      *(_QWORD *)v170 = v132;
    }
    __len = 8 * v168;
    v135 = (__len + 31) & 0xFFFFFFFE0;
    v136 = operator new(v135, (std::align_val_t)0x20uLL);
    v137 = v136;
    v138 = v131 - v168;
    v139 = &__srcb[8 * (v131 - v168)];
    if (v168)
      bzero(v136, __len);
    v198 = (char **)&v183;
    LODWORD(v191) = v185;
    *((_QWORD *)&v191 + 1) = &v198;
    *(_QWORD *)&v192 = 0;
    LODWORD(v186) = v185;
    v165 = v139;
    v187 = v139;
    LODWORD(v188) = v138;
    v202 = (unint64_t)v185 << 32;
    v203 = &v191;
    LODWORD(v199) = v185;
    v200 = v137;
    v201 = 0;
    sub_20F76C940((unsigned int *)&v199, (unsigned int *)&v186, (uint64_t)&v202);
    v140 = v134;
    v141 = operator new((8 * v134 + 31) & 0xFFFFFFFE0, (std::align_val_t)0x20uLL);
    v142 = v141;
    if (v134)
      memmove(v141, __srcb, 8 * v134);
    v143 = (*(_QWORD *)(a1 + 18376) - *(_QWORD *)(a1 + 18368)) >> 3;
    v144 = *(_QWORD *)(a1 + 18344);
    v145 = *(_QWORD *)(a1 + 18392);
    if (v145 == *(_QWORD *)(a1 + 18400))
      v145 = 0;
    LODWORD(v191) = v167[26];
    DWORD1(v191) = v143;
    *((_QWORD *)&v191 + 1) = v144;
    *(_QWORD *)&v192 = v145;
    v146 = *(_QWORD *)(a1 + 18416);
    if (v146 == *(_QWORD *)(a1 + 18424))
      v146 = 0;
    *((_QWORD *)&v192 + 1) = 0x100000000;
    *(_QWORD *)&v193 = v146;
    v186 = v134;
    v187 = v142;
    v199 = v168;
    v200 = v137;
    sub_20E8BEE6C((uint64_t)&v191, (uint64_t)&v199, (uint64_t)&v186, -1.0);
    if (v142 == v132)
    {
      if (!*v169 && v169[5] * *((unsigned __int8 *)v169 + 32) == v134)
      {
        *((_QWORD *)&v191 + 1) = v132;
        *(_QWORD *)&v191 = v134;
        sub_20E8BF7C8(a1 + 17976, (uint64_t)&v191, 0);
      }
    }
    else if (!*v169 && v169[5] * *((unsigned __int8 *)v169 + 32) == v134)
    {
      *((_QWORD *)&v191 + 1) = v142;
      *(_QWORD *)&v191 = v134;
      v187 = v132;
      v186 = v134;
      if (v132)
        sub_20E8BF20C(a1 + 17976, (uint64_t)&v186, (uint64_t)&v191, 0);
    }
    MEMORY[0x212BC6368](v142, 0x1000C8000313F17);
    MEMORY[0x212BC6368](v137, 0x1000C8000313F17);
    v153 = *(void **)v170;
    v154 = operator new(v135, (std::align_val_t)0x20uLL);
    v155 = v154;
    if (v168)
      memmove(v154, v165, __len);
    v156 = (*(_QWORD *)(a1 + 18376) - *(_QWORD *)(a1 + 18368)) >> 3;
    v157 = *(_QWORD *)(a1 + 18344);
    v158 = *(_QWORD *)(a1 + 18392);
    if (v158 == *(_QWORD *)(a1 + 18400))
      v158 = 0;
    LODWORD(v191) = v167[26];
    DWORD1(v191) = v156;
    *((_QWORD *)&v191 + 1) = v157;
    *(_QWORD *)&v192 = v158;
    v159 = *(_QWORD *)(a1 + 18416);
    if (v159 == *(_QWORD *)(a1 + 18424))
      v159 = 0;
    *((_QWORD *)&v192 + 1) = 0x100000001;
    *(_QWORD *)&v193 = v159;
    v186 = v168;
    v187 = v155;
    v199 = v140;
    v200 = v153;
    sub_20E8BEE6C((uint64_t)&v191, (uint64_t)&v199, (uint64_t)&v186, -1.0);
    v160 = operator new(v135, (std::align_val_t)0x20uLL);
    v161 = v160;
    if (v168)
      bzero(v160, __len);
    v198 = (char **)&v183;
    LODWORD(v191) = v185;
    *((_QWORD *)&v191 + 1) = &v198;
    *(_QWORD *)&v192 = 0;
    LODWORD(v186) = v185;
    v187 = v155;
    LODWORD(v188) = 0;
    v202 = (unint64_t)v185 << 32;
    v203 = &v191;
    LODWORD(v199) = v185;
    v200 = v161;
    v201 = 0;
    v162.n128_f64[0] = sub_20F76C940((unsigned int *)&v199, (unsigned int *)&v186, (uint64_t)&v202);
    if (v168)
      memmove((void *)(*(_QWORD *)v170 + 8 * (*(_DWORD *)(v170 + 16) - v168)), v161, __len);
    MEMORY[0x212BC6368](v161, 0x1000C8000313F17, v162);
    MEMORY[0x212BC6368](v155, 0x1000C8000313F17);
  }
  else
  {
    v147 = v179[1];
    if (v179[1] == (void *)v180)
      v147 = 0;
    v186 = __PAIR64__((unint64_t)((char *)v178[1] - (char *)v178[0]) >> 3, v174);
    v187 = v175;
    v188 = v147;
    if (__p[0] == __p[1])
      v148 = 0;
    else
      v148 = __p[0];
    v189 = 0x10000000CLL;
    v190 = v148;
    if (*v169 != 2)
    {
      sub_20E8BF000(a1 + 17976);
      *v169 = 2;
    }
    v169[2] = -3;
    *(_OWORD *)(a1 + 18032) = 0u;
    *(_OWORD *)(a1 + 18002) = 0u;
    *(_OWORD *)(a1 + 18018) = 0u;
    v169[4] = -3;
    *(_QWORD *)(a1 + 17988) = 0;
    *(_DWORD *)(a1 + 17996) = 0;
    *((_WORD *)v169 + 16) = 1;
    *((_BYTE *)v169 + 80) = 1;
    *(_QWORD *)(a1 + 18056) = 0;
    sub_20E8BF040(SparseFactorizationCholesky, (uint64_t)&v186, (uint64_t)&v191);
    v149 = v196;
    *(_OWORD *)(v169 + 18) = v195;
    *(_OWORD *)(v169 + 22) = v149;
    *((_QWORD *)v169 + 13) = v197;
    v150 = v192;
    *(_OWORD *)(v169 + 2) = v191;
    *(_OWORD *)(v169 + 6) = v150;
    v151 = v194;
    *(_OWORD *)(v169 + 10) = v193;
    *(_OWORD *)(v169 + 14) = v151;
    v152 = v169[2];
    switch(v152)
    {
      case -4:
      case -3:
        goto LABEL_171;
      case -2:
      case -1:
        *v169 = 1;
        *(_BYTE *)(a1 + 1872) = 0;
        break;
      case 0:
        goto LABEL_172;
      default:
        if (v152 != -2147483647)
        {
          v164 = *v169;
          *(_BYTE *)(a1 + 1872) = *v169 == 0;
          if (v164)
            break;
          goto LABEL_129;
        }
LABEL_171:
        v152 = 2;
LABEL_172:
        *v169 = v152;
        *(_BYTE *)(a1 + 1872) = v152 == 0;
        if (!v152)
          goto LABEL_129;
        break;
    }
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (v179[1])
  {
    *(void **)&v180 = v179[1];
    operator delete(v179[1]);
  }
  if (v178[0])
  {
    v178[1] = v178[0];
    operator delete(v178[0]);
  }
  if (v175)
  {
    v176 = v175;
    operator delete(v175);
  }
  if (v183)
    MEMORY[0x212BC6368](v183, 0x1000C8000313F17);
  return 0;
}

void sub_20F79B974(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,uint64_t a35,void *__p,uint64_t a37,uint64_t a38,uint64_t a39)
{
  uint64_t v39;
  uint64_t v40;
  void *v42;
  void *v43;
  void *v44;

  MEMORY[0x212BC6368](v40, 0x1000C8000313F17);
  MEMORY[0x212BC6368](v39, 0x1000C8000313F17);
  if (__p)
  {
    operator delete(__p);
    v42 = a33;
    if (!a33)
    {
LABEL_3:
      v43 = a30;
      if (!a30)
        goto LABEL_4;
      goto LABEL_8;
    }
  }
  else
  {
    v42 = a33;
    if (!a33)
      goto LABEL_3;
  }
  operator delete(v42);
  v43 = a30;
  if (!a30)
  {
LABEL_4:
    v44 = a27;
    if (!a27)
    {
LABEL_10:
      if (a39)
        MEMORY[0x212BC6368](a39, 0x1000C8000313F17);
      _Unwind_Resume(a1);
    }
LABEL_9:
    operator delete(v44);
    goto LABEL_10;
  }
LABEL_8:
  operator delete(v43);
  v44 = a27;
  if (!a27)
    goto LABEL_10;
  goto LABEL_9;
}

uint64_t sub_20F79BBA4()
{
  return 1;
}

uint64_t sub_20F79BBAC()
{
  return 0;
}

void sub_20F79BBB4(uint64_t a1)
{
  sub_20F7B7224(a1);
  JUMPOUT(0x212BC6398);
}

double sub_20F79BBD8(uint64_t a1)
{
  _DWORD *v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  double result;
  uint64_t v9;
  uint64_t v10;
  int *v11;
  int *v12;
  unint64_t v13;
  unint64_t v14;
  int *v15;
  int *v16;
  uint64_t v17;
  uint64_t v18;
  double v19;
  double *v20;
  uint64_t v21;
  double *v22;
  uint64_t v23;
  double v24;
  double v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int *v30;
  int *v31;
  unint64_t v32;
  unint64_t v33;
  int *v34;
  int *v35;
  uint64_t v36;
  uint64_t v37;
  double v38;
  double *v39;
  uint64_t v40;
  double v41;
  double *v42;
  uint64_t v43;
  double v44;
  double v45;

  v1 = (_DWORD *)(a1 + 18232);
  v2 = *(_QWORD *)(a1 + 18104);
  if (v2)
  {
    LODWORD(v3) = *v1;
    v4 = *(_QWORD *)(a1 + 18264);
    v5 = (unint64_t)(*(_QWORD *)(a1 + 18272) - v4) >> 3;
    if (*v1 >= (int)v5)
      v3 = v5;
    else
      v3 = v3;
    if (v2 >= (uint64_t)(*(_QWORD *)(a1 + 18088) - *(_QWORD *)(a1 + 18080)) >> 3)
    {
      if ((int)v3 < 1)
      {
        return 0.0;
      }
      else
      {
        v26 = 0;
        v27 = *(_QWORD *)(a1 + 18288);
        result = 0.0;
        do
        {
          v28 = *(_QWORD *)(*(_QWORD *)(a1 + 18240) + 8 * v26);
          v29 = *(_QWORD *)(v4 + 8 * v26);
          v30 = (int *)(v27 + 4 * v29);
          v31 = v30;
          if (v29 != v28)
          {
            v31 = (int *)(v27 + 4 * v28);
            v32 = v30 - v31;
            do
            {
              v33 = v32 >> 1;
              v34 = &v31[v32 >> 1];
              v36 = *v34;
              v35 = v34 + 1;
              v32 += ~(v32 >> 1);
              if (v26 > v36)
                v31 = v35;
              else
                v32 = v33;
            }
            while (v32);
          }
          if (v30 != v31 && v26 == *v31)
          {
            v37 = *(_QWORD *)(a1 + 18312);
            if (v37)
            {
              v38 = fabs(*(double *)(v37 + 2 * ((_QWORD)v31 - v27)));
              if (result < v38)
                result = v38;
            }
          }
          ++v26;
        }
        while (v26 != v3);
      }
    }
    else
    {
      if ((int)v3 < 1)
      {
        result = 0.0;
      }
      else
      {
        v6 = 0;
        v7 = *(_QWORD *)(a1 + 18288);
        result = 0.0;
        do
        {
          v9 = *(_QWORD *)(*(_QWORD *)(a1 + 18240) + 8 * v6);
          v10 = *(_QWORD *)(v4 + 8 * v6);
          v11 = (int *)(v7 + 4 * v10);
          v12 = v11;
          if (v10 != v9)
          {
            v12 = (int *)(v7 + 4 * v9);
            v13 = v11 - v12;
            do
            {
              v14 = v13 >> 1;
              v15 = &v12[v13 >> 1];
              v17 = *v15;
              v16 = v15 + 1;
              v13 += ~(v13 >> 1);
              if (v6 > v17)
                v12 = v16;
              else
                v13 = v14;
            }
            while (v13);
          }
          if (v11 != v12 && v6 == *v12)
          {
            v18 = *(_QWORD *)(a1 + 18312);
            if (v18)
            {
              v19 = fabs(*(double *)(v18 + 2 * ((_QWORD)v12 - v7)));
              if (result < v19)
                result = v19;
            }
          }
          ++v6;
        }
        while (v6 != v3);
      }
      v39 = *(double **)(a1 + 18440);
      v40 = *(unsigned int *)(a1 + 18456);
      v41 = fabs(*v39);
      if ((_DWORD)v40 != 1)
      {
        v42 = v39 + 1;
        v43 = 8 * v40 - 8;
        do
        {
          v44 = *v42++;
          v45 = fabs(v44);
          if (v41 < v45)
            v41 = v45;
          v43 -= 8;
        }
        while (v43);
      }
      if (result < v41)
        return v41;
    }
  }
  else
  {
    v20 = *(double **)(a1 + 18440);
    v21 = *(unsigned int *)(a1 + 18456);
    result = fabs(*v20);
    if ((_DWORD)v21 != 1)
    {
      v22 = v20 + 1;
      v23 = 8 * v21 - 8;
      do
      {
        v24 = *v22++;
        v25 = fabs(v24);
        if (result < v25)
          result = v25;
        v23 -= 8;
      }
      while (v23);
    }
  }
  return result;
}

uint64_t sub_20F79BE04(uint64_t result, double a2)
{
  *(double *)(result + 1896) = a2;
  return result;
}

uint64_t sub_20F79BE10()
{
  return 0;
}

uint64_t sub_20F79BE18()
{
  return 0;
}

uint64_t sub_20F79BE20(uint64_t a1)
{
  return a1 + 9872;
}

uint64_t sub_20F79BE2C(uint64_t a1)
{
  return a1 + 9872;
}

char *sub_20F79BE38(char *result, char *a2)
{
  const void **v2;
  int *v4;
  unint64_t v5;
  size_t v6;
  size_t v7;
  void *v8;
  int v9;

  v2 = (const void **)(result + 18160);
  if (result + 18160 != a2)
  {
    v4 = (int *)(result + 18176);
    v5 = *((unsigned int *)result + 4544);
    if (*((_QWORD *)a2 + 1) >= v5)
    {
      if (!(_DWORD)v5)
      {
        v9 = 0;
        goto LABEL_10;
      }
      v8 = *(void **)a2;
      v6 = 8 * v5;
    }
    else
    {
      if (*(_QWORD *)a2)
        MEMORY[0x212BC6368](*(_QWORD *)a2, 0x1000C8000313F17);
      v6 = 8 * v5;
      v7 = (v6 + 31) & 0xFFFFFFFE0;
      *(_QWORD *)a2 = 0;
      *((_QWORD *)a2 + 1) = v7 >> 3;
      v8 = operator new(v7, (std::align_val_t)0x20uLL);
      *(_QWORD *)a2 = v8;
    }
    result = (char *)memcpy(v8, *v2, v6);
    v9 = *v4;
LABEL_10:
    *((_DWORD *)a2 + 4) = v9;
  }
  return result;
}

char *sub_20F79BEEC(char *result, char *a2)
{
  const void **v2;
  int *v4;
  unint64_t v5;
  size_t v6;
  size_t v7;
  void *v8;
  int v9;

  v2 = (const void **)(result + 18184);
  if (result + 18184 != a2)
  {
    v4 = (int *)(result + 18200);
    v5 = *((unsigned int *)result + 4550);
    if (*((_QWORD *)a2 + 1) >= v5)
    {
      if (!(_DWORD)v5)
      {
        v9 = 0;
        goto LABEL_10;
      }
      v8 = *(void **)a2;
      v6 = 8 * v5;
    }
    else
    {
      if (*(_QWORD *)a2)
        MEMORY[0x212BC6368](*(_QWORD *)a2, 0x1000C8000313F17);
      v6 = 8 * v5;
      v7 = (v6 + 31) & 0xFFFFFFFE0;
      *(_QWORD *)a2 = 0;
      *((_QWORD *)a2 + 1) = v7 >> 3;
      v8 = operator new(v7, (std::align_val_t)0x20uLL);
      *(_QWORD *)a2 = v8;
    }
    result = (char *)memcpy(v8, *v2, v6);
    v9 = *v4;
LABEL_10:
    *((_DWORD *)a2 + 4) = v9;
  }
  return result;
}

uint64_t sub_20F79BFA0(uint64_t a1)
{
  void *v2;

  *(_QWORD *)a1 = &unk_24CA02AD0;
  *(_QWORD *)(a1 + 120) = &off_24CA02B40;
  sub_20F4EE048(a1 + 1680);
  sub_20F4EE048(a1 + 1488);
  sub_20F4EE048(a1 + 1296);
  sub_20F4EE048(a1 + 1104);
  v2 = *(void **)(a1 + 1040);
  if (v2)
  {
    *(_QWORD *)(a1 + 1048) = v2;
    operator delete(v2);
  }
  sub_20F4EE0E8((void **)(a1 + 896));
  sub_20F64D05C(a1 + 128);
  return a1;
}

uint64_t sub_20F79C024(uint64_t result, double a2, double a3, float64x2_t a4, double a5, double a6, float64x2_t a7)
{
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  double v10;
  unsigned int *v11;
  unsigned int *v12;
  unint64_t v13;
  uint64_t v14;
  float64_t *v15;
  float64x2_t v16;
  float64x2_t v17;
  float64x2_t v18;
  double v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unsigned int *v23;
  unsigned int *v24;
  unint64_t v25;
  uint64_t v26;
  float64_t *v27;
  float64x2_t v28;
  float64x2_t v29;
  float64x2_t v30;
  float64x2_t v31;
  double v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unsigned int *v36;
  unsigned int *v37;
  unint64_t v38;
  uint64_t v39;
  double v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unsigned int *v44;
  unsigned int *v45;
  unint64_t v46;
  uint64_t v47;
  float64_t *v48;
  float64x2_t v49;
  float64x2_t v50;
  float64x2_t v51;
  double v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  unsigned int *v56;
  unsigned int *v57;
  unint64_t v58;
  uint64_t v59;
  float64_t *v60;
  float64x2_t v61;
  float64x2_t v62;
  double v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  unsigned int *v67;
  unsigned int *v68;
  unint64_t v69;
  uint64_t v70;
  float64_t *v71;
  float64x2_t v72;
  float64x2_t v73;
  double v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  unsigned int *v78;
  unsigned int *v79;
  unint64_t v80;
  uint64_t v81;
  float64_t *v82;
  float64x2_t v83;
  double v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t v87;
  unsigned int *v88;
  unsigned int *v89;
  unint64_t v90;
  uint64_t v91;
  double v92;

  v7 = *(unsigned int *)(result + 2008);
  if ((_DWORD)v7)
  {
    v8 = 0;
    v9 = *(_QWORD *)(result + 2088);
    v10 = 0.0;
    do
    {
      v11 = *(unsigned int **)(v9 + 24 * v8);
      v12 = *(unsigned int **)(v9 + 24 * v8 + 8);
      if (v12 != v11)
      {
        while (1)
        {
          v13 = *v11;
          if (v8 <= v13)
            break;
          v11 += 4;
          if (v11 == v12)
            goto LABEL_3;
        }
        if (v11 != v12 && v8 == v13)
        {
          v14 = *(_QWORD *)(result + 2016);
          if (v14)
          {
            v15 = (float64_t *)(v14 + 8 * *((_QWORD *)v11 + 1));
            v16.f64[0] = *v15;
            v17.f64[0] = v15[14];
            v18.f64[0] = v15[28];
            v16.f64[1] = v15[7];
            v18.f64[1] = v15[35];
            v17.f64[1] = v15[21];
            a4 = vabsq_f64(v17);
            v19 = vmaxnmvq_f64(vmaxnmq_f64(vmaxnmq_f64(vabsq_f64(v16), vabsq_f64(v18)), a4));
            if (v10 < v19)
              v10 = v19;
          }
        }
      }
LABEL_3:
      ++v8;
    }
    while (v8 != v7);
  }
  else
  {
    v10 = 0.0;
  }
  v20 = *(unsigned int *)(result + 3016);
  if ((_DWORD)v20)
  {
    v21 = 0;
    v22 = *(_QWORD *)(result + 3096);
    do
    {
      v23 = *(unsigned int **)(v22 + 24 * v21);
      v24 = *(unsigned int **)(v22 + 24 * v21 + 8);
      if (v24 != v23)
      {
        while (1)
        {
          v25 = *v23;
          if (v21 <= v25)
            break;
          v23 += 4;
          if (v23 == v24)
            goto LABEL_17;
        }
        if (v23 != v24 && v21 == v25)
        {
          v26 = *(_QWORD *)(result + 3024);
          if (v26)
          {
            v27 = (float64_t *)(v26 + 8 * *((_QWORD *)v23 + 1));
            v28.f64[0] = *v27;
            v29.f64[0] = v27[20];
            v30.f64[0] = v27[40];
            v31.f64[0] = v27[60];
            v29.f64[1] = v27[30];
            v31.f64[1] = v27[70];
            v28.f64[1] = v27[10];
            a7.f64[0] = v27[80];
            v30.f64[1] = v27[50];
            *(_QWORD *)&a7.f64[0] = *(_OWORD *)&vabsq_f64(a7);
            a4 = vmaxnmq_f64(vabsq_f64(v29), vabsq_f64(v31));
            a7.f64[1] = NAN;
            v32 = vmaxnmvq_f64(vmaxnmq_f64(vmaxnmq_f64(vmaxnmq_f64(vabsq_f64(v28), a7), vabsq_f64(v30)), a4));
            if (v10 < v32)
              v10 = v32;
          }
        }
      }
LABEL_17:
      ++v21;
    }
    while (v21 != v20);
  }
  v33 = *(unsigned int *)(result + 4024);
  if ((_DWORD)v33)
  {
    v34 = 0;
    v35 = *(_QWORD *)(result + 4104);
    do
    {
      v36 = *(unsigned int **)(v35 + 24 * v34);
      v37 = *(unsigned int **)(v35 + 24 * v34 + 8);
      if (v37 != v36)
      {
        while (1)
        {
          v38 = *v36;
          if (v34 <= v38)
            break;
          v36 += 4;
          if (v36 == v37)
            goto LABEL_30;
        }
        if (v36 != v37 && v34 == v38)
        {
          v39 = *(_QWORD *)(result + 4032);
          if (v39)
          {
            v40 = fabs(*(double *)(v39 + 8 * *((_QWORD *)v36 + 1)));
            if (v10 < v40)
              v10 = v40;
          }
        }
      }
LABEL_30:
      ++v34;
    }
    while (v34 != v33);
  }
  v41 = *(unsigned int *)(result + 5032);
  if ((_DWORD)v41)
  {
    v42 = 0;
    v43 = *(_QWORD *)(result + 5112);
    do
    {
      v44 = *(unsigned int **)(v43 + 24 * v42);
      v45 = *(unsigned int **)(v43 + 24 * v42 + 8);
      if (v45 != v44)
      {
        while (1)
        {
          v46 = *v44;
          if (v42 <= v46)
            break;
          v44 += 4;
          if (v44 == v45)
            goto LABEL_43;
        }
        if (v44 != v45 && v42 == v46)
        {
          v47 = *(_QWORD *)(result + 5040);
          if (v47)
          {
            v48 = (float64_t *)(v47 + 8 * *((_QWORD *)v44 + 1));
            v49.f64[0] = *v48;
            v50.f64[0] = v48[14];
            v51.f64[0] = v48[28];
            v49.f64[1] = v48[7];
            v51.f64[1] = v48[35];
            v50.f64[1] = v48[21];
            a4 = vabsq_f64(v50);
            v52 = vmaxnmvq_f64(vmaxnmq_f64(vmaxnmq_f64(vabsq_f64(v49), vabsq_f64(v51)), a4));
            if (v10 < v52)
              v10 = v52;
          }
        }
      }
LABEL_43:
      ++v42;
    }
    while (v42 != v41);
  }
  v53 = *(unsigned int *)(result + 6040);
  if ((_DWORD)v53)
  {
    v54 = 0;
    v55 = *(_QWORD *)(result + 6120);
    do
    {
      v56 = *(unsigned int **)(v55 + 24 * v54);
      v57 = *(unsigned int **)(v55 + 24 * v54 + 8);
      if (v57 != v56)
      {
        while (1)
        {
          v58 = *v56;
          if (v54 <= v58)
            break;
          v56 += 4;
          if (v56 == v57)
            goto LABEL_56;
        }
        if (v56 != v57 && v54 == v58)
        {
          v59 = *(_QWORD *)(result + 6048);
          if (v59)
          {
            v60 = (float64_t *)(v59 + 8 * *((_QWORD *)v56 + 1));
            v61.f64[0] = *v60;
            v62.f64[0] = v60[10];
            v61.f64[1] = v60[5];
            v62.f64[1] = v60[15];
            a4 = vabsq_f64(v62);
            v63 = vmaxnmvq_f64(vmaxnmq_f64(vabsq_f64(v61), a4));
            if (v10 < v63)
              v10 = v63;
          }
        }
      }
LABEL_56:
      ++v54;
    }
    while (v54 != v53);
  }
  v64 = *(unsigned int *)(result + 7048);
  if ((_DWORD)v64)
  {
    v65 = 0;
    v66 = *(_QWORD *)(result + 7128);
    do
    {
      v67 = *(unsigned int **)(v66 + 24 * v65);
      v68 = *(unsigned int **)(v66 + 24 * v65 + 8);
      if (v68 != v67)
      {
        while (1)
        {
          v69 = *v67;
          if (v65 <= v69)
            break;
          v67 += 4;
          if (v67 == v68)
            goto LABEL_69;
        }
        if (v67 != v68 && v65 == v69)
        {
          v70 = *(_QWORD *)(result + 7056);
          if (v70)
          {
            v71 = (float64_t *)(v70 + 8 * *((_QWORD *)v67 + 1));
            v72.f64[0] = *v71;
            v73.f64[0] = v71[10];
            v72.f64[1] = v71[5];
            v73.f64[1] = v71[15];
            a4 = vabsq_f64(v73);
            v74 = vmaxnmvq_f64(vmaxnmq_f64(vabsq_f64(v72), a4));
            if (v10 < v74)
              v10 = v74;
          }
        }
      }
LABEL_69:
      ++v65;
    }
    while (v65 != v64);
  }
  v75 = *(unsigned int *)(result + 8056);
  if ((_DWORD)v75)
  {
    v76 = 0;
    v77 = *(_QWORD *)(result + 8136);
    do
    {
      v78 = *(unsigned int **)(v77 + 24 * v76);
      v79 = *(unsigned int **)(v77 + 24 * v76 + 8);
      if (v79 != v78)
      {
        while (1)
        {
          v80 = *v78;
          if (v76 <= v80)
            break;
          v78 += 4;
          if (v78 == v79)
            goto LABEL_82;
        }
        if (v78 != v79 && v76 == v80)
        {
          v81 = *(_QWORD *)(result + 8064);
          if (v81)
          {
            v82 = (float64_t *)(v81 + 8 * *((_QWORD *)v78 + 1));
            v83.f64[0] = *v82;
            a4.f64[0] = v82[8];
            v83.f64[1] = v82[4];
            *(_QWORD *)&a4.f64[0] = *(_OWORD *)&vabsq_f64(a4);
            a4.f64[1] = NAN;
            v84 = vmaxnmvq_f64(vmaxnmq_f64(vabsq_f64(v83), a4));
            if (v10 < v84)
              v10 = v84;
          }
        }
      }
LABEL_82:
      ++v76;
    }
    while (v76 != v75);
  }
  v85 = *(unsigned int *)(result + 9064);
  if ((_DWORD)v85)
  {
    v86 = 0;
    v87 = *(_QWORD *)(result + 9144);
    do
    {
      v88 = *(unsigned int **)(v87 + 24 * v86);
      v89 = *(unsigned int **)(v87 + 24 * v86 + 8);
      if (v89 != v88)
      {
        while (1)
        {
          v90 = *v88;
          if (v86 <= v90)
            break;
          v88 += 4;
          if (v88 == v89)
            goto LABEL_95;
        }
        if (v88 != v89 && v86 == v90)
        {
          v91 = *(_QWORD *)(result + 9072);
          if (v91)
          {
            v92 = fabs(*(double *)(v91 + 8 * *((_QWORD *)v88 + 1)));
            if (v10 < v92)
              v10 = v92;
          }
        }
      }
LABEL_95:
      ++v86;
    }
    while (v86 != v85);
  }
  return result;
}

uint64_t sub_20F79C57C(uint64_t a1)
{
  void *v2;

  *(_QWORD *)a1 = &off_24CA02B40;
  sub_20F4EE048(a1 + 1560);
  sub_20F4EE048(a1 + 1368);
  sub_20F4EE048(a1 + 1176);
  sub_20F4EE048(a1 + 984);
  v2 = *(void **)(a1 + 920);
  if (v2)
  {
    *(_QWORD *)(a1 + 928) = v2;
    operator delete(v2);
  }
  sub_20F4EE0E8((void **)(a1 + 776));
  sub_20F64D05C(a1 + 8);
  return a1;
}

void sub_20F79C5EC(uint64_t a1)
{
  void *v2;

  *(_QWORD *)a1 = &off_24CA02B40;
  sub_20F4EE048(a1 + 1560);
  sub_20F4EE048(a1 + 1368);
  sub_20F4EE048(a1 + 1176);
  sub_20F4EE048(a1 + 984);
  v2 = *(void **)(a1 + 920);
  if (v2)
  {
    *(_QWORD *)(a1 + 928) = v2;
    operator delete(v2);
  }
  sub_20F4EE0E8((void **)(a1 + 776));
  sub_20F64D05C(a1 + 8);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20F79C66C(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 16) = 0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  v2 = sub_20F74797C(a1 + 88);
  *(_QWORD *)(a1 + 7704) = a1 + 872;
  *(_QWORD *)(a1 + 7712) = a1 + 1768;
  *(_QWORD *)(a1 + 7720) = a1 + 2664;
  *(_QWORD *)(a1 + 7728) = a1 + 3560;
  *(_QWORD *)(a1 + 7736) = a1 + 4456;
  *(_QWORD *)(a1 + 7744) = a1 + 5352;
  *(_QWORD *)(a1 + 7752) = a1 + 6248;
  *(_QWORD *)(a1 + 7760) = a1 + 7144;
  *(_QWORD *)(a1 + 7640) = a1 + 760;
  *(_QWORD *)(a1 + 7648) = a1 + 1656;
  *(_QWORD *)(a1 + 7656) = a1 + 2552;
  *(_QWORD *)(a1 + 7664) = a1 + 3448;
  *(_QWORD *)(a1 + 7672) = a1 + 4344;
  *(_QWORD *)(a1 + 7680) = a1 + 5240;
  *(_QWORD *)(a1 + 7688) = a1 + 6136;
  *(_QWORD *)(a1 + 7696) = a1 + 7032;
  *(_QWORD *)(a1 + 7576) = a1 + 648;
  *(_QWORD *)(a1 + 7584) = a1 + 1544;
  *(_QWORD *)(a1 + 7592) = a1 + 2440;
  *(_QWORD *)(a1 + 7600) = a1 + 3336;
  *(_QWORD *)(a1 + 7608) = a1 + 4232;
  *(_QWORD *)(a1 + 7616) = a1 + 5128;
  *(_QWORD *)(a1 + 7624) = a1 + 6024;
  *(_QWORD *)(a1 + 7632) = a1 + 6920;
  *(_QWORD *)(a1 + 7512) = a1 + 536;
  *(_QWORD *)(a1 + 7520) = a1 + 1432;
  *(_QWORD *)(a1 + 7528) = a1 + 2328;
  *(_QWORD *)(a1 + 7536) = a1 + 3224;
  *(_QWORD *)(a1 + 7544) = a1 + 4120;
  *(_QWORD *)(a1 + 7552) = a1 + 5016;
  *(_QWORD *)(a1 + 7560) = a1 + 5912;
  *(_QWORD *)(a1 + 7568) = a1 + 6808;
  *(_QWORD *)(a1 + 7448) = a1 + 424;
  *(_QWORD *)(a1 + 7456) = a1 + 1320;
  *(_QWORD *)(a1 + 7464) = a1 + 2216;
  *(_QWORD *)(a1 + 7472) = a1 + 3112;
  *(_QWORD *)(a1 + 7480) = a1 + 4008;
  *(_QWORD *)(a1 + 7488) = a1 + 4904;
  *(_QWORD *)(a1 + 7496) = a1 + 5800;
  *(_QWORD *)(a1 + 7504) = a1 + 6696;
  *(_QWORD *)(a1 + 7384) = a1 + 312;
  *(_QWORD *)(a1 + 7392) = a1 + 1208;
  *(_QWORD *)(a1 + 7400) = a1 + 2104;
  *(_QWORD *)(a1 + 7408) = a1 + 3000;
  *(_QWORD *)(a1 + 7416) = a1 + 3896;
  *(_QWORD *)(a1 + 7424) = a1 + 4792;
  *(_QWORD *)(a1 + 7432) = a1 + 5688;
  *(_QWORD *)(a1 + 7440) = a1 + 6584;
  *(_QWORD *)(a1 + 7320) = a1 + 200;
  *(_QWORD *)(a1 + 7328) = a1 + 1096;
  *(_QWORD *)(a1 + 7336) = a1 + 1992;
  *(_QWORD *)(a1 + 7344) = a1 + 2888;
  *(_QWORD *)(a1 + 7352) = a1 + 3784;
  *(_QWORD *)(a1 + 7360) = a1 + 4680;
  *(_QWORD *)(a1 + 7368) = a1 + 5576;
  *(_QWORD *)(a1 + 7376) = a1 + 6472;
  *(_QWORD *)(a1 + 7256) = v2;
  *(_QWORD *)(a1 + 7264) = a1 + 984;
  *(_QWORD *)(a1 + 7272) = a1 + 1880;
  *(_QWORD *)(a1 + 7280) = a1 + 2776;
  *(_QWORD *)(a1 + 7288) = a1 + 3672;
  *(_QWORD *)(a1 + 7296) = a1 + 4568;
  *(_QWORD *)(a1 + 7304) = a1 + 5464;
  *(_QWORD *)(a1 + 7312) = a1 + 6360;
  *(_OWORD *)(a1 + 7928) = 0u;
  *(_OWORD *)(a1 + 7944) = 0u;
  *(_OWORD *)(a1 + 7896) = 0u;
  *(_OWORD *)(a1 + 7912) = 0u;
  *(_OWORD *)(a1 + 7864) = 0u;
  *(_OWORD *)(a1 + 7880) = 0u;
  *(_OWORD *)(a1 + 7832) = 0u;
  *(_OWORD *)(a1 + 7848) = 0u;
  *(_OWORD *)(a1 + 7800) = 0u;
  *(_OWORD *)(a1 + 7816) = 0u;
  *(_OWORD *)(a1 + 7768) = 0u;
  *(_OWORD *)(a1 + 7784) = 0u;
  return a1;
}

void sub_20F79C940(_Unwind_Exception *exception_object)
{
  _QWORD *v1;

  if (*v1)
    MEMORY[0x212BC6368](*v1, 0x1000C8000313F17);
  _Unwind_Resume(exception_object);
}

void sub_20F79C968(_QWORD *a1)
{
  uint64_t v2;
  void **v3;
  char *v4;
  void **v5;
  char *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  _BYTE *v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int64x2_t v22;
  int64x2_t v23;
  int64x2_t v24;
  int64x2_t v25;
  int64x2_t v26;
  int64x2_t v27;
  int64x2_t v28;
  int64x2_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  __int128 *v35;
  uint64_t v36;
  __int128 v37;
  int v38;
  _BYTE *v39;
  _BYTE *v40;
  char *v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  char *v47;
  char *v48;
  __int128 *v49;
  uint64_t v50;
  __int128 v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  int32x4_t v101;
  int32x4_t v102;
  uint32x4_t v103;
  uint32x4_t v104;

  v2 = *a1;
  v3 = (void **)(a1 + 1);
  v4 = (char *)a1[1];
  v5 = (void **)(a1 + 13);
  v6 = (char *)a1[13];
  a1[4] = 0;
  a1[2] = v4;
  a1[14] = v6;
  if (*(_BYTE *)(v2 + 976))
  {
    LODWORD(v7) = ((*(_QWORD *)(v2 + 112) - *(_QWORD *)(v2 + 104)) >> 4)
                + ((*(_QWORD *)(v2 + 16) - *(_QWORD *)(v2 + 8)) >> 4)
                + ((*(_QWORD *)(v2 + 208) - *(_QWORD *)(v2 + 200)) >> 4)
                + ((*(_QWORD *)(v2 + 304) - *(_QWORD *)(v2 + 296)) >> 4)
                + ((*(_QWORD *)(v2 + 400) - *(_QWORD *)(v2 + 392)) >> 4)
                + ((*(_QWORD *)(v2 + 496) - *(_QWORD *)(v2 + 488)) >> 4)
                + ((*(_QWORD *)(v2 + 592) - *(_QWORD *)(v2 + 584)) >> 4)
                + ((*(_QWORD *)(v2 + 688) - *(_QWORD *)(v2 + 680)) >> 4);
    goto LABEL_12;
  }
  v103 = 0u;
  v104 = 0u;
  if (!sub_20F5B8114((_QWORD *)v2, v103.i32, &v101, 1))
  {
    LODWORD(v7) = vaddvq_s32(vaddq_s32(v101, v102));
LABEL_12:
    v11 = v4;
    v7 = v7;
    if (v7 <= (unint64_t)((uint64_t)(a1[3] - (_QWORD)v4) >> 2))
      goto LABEL_39;
LABEL_13:
    v12 = (_BYTE *)a1[2];
    v13 = (char *)operator new(4 * v7);
    v14 = v12 - v11;
    v4 = &v13[(v12 - v11) & 0xFFFFFFFFFFFFFFFCLL];
    v15 = v4;
    if (v12 == v11)
      goto LABEL_37;
    if ((unint64_t)(v14 - 4) >= 0x2C)
    {
      v15 = &v13[(v12 - v11) & 0xFFFFFFFFFFFFFFFCLL];
      if ((unint64_t)(v12 - &v13[v14 & 0xFFFFFFFFFFFFFFFCLL]) >= 0x20)
      {
        v30 = v14 >> 2;
        v31 = ((unint64_t)(v14 - 4) >> 2) + 1;
        v32 = 4 * (v31 & 0x7FFFFFFFFFFFFFF8);
        v33 = &v12[-v32];
        v15 = &v4[-v32];
        v34 = &v13[4 * v30 - 16];
        v35 = (__int128 *)(v12 - 16);
        v36 = v31 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          v37 = *v35;
          *((_OWORD *)v34 - 1) = *(v35 - 1);
          *(_OWORD *)v34 = v37;
          v34 -= 32;
          v35 -= 2;
          v36 -= 8;
        }
        while (v36);
        v12 = v33;
        if (v31 == (v31 & 0x7FFFFFFFFFFFFFF8))
        {
LABEL_37:
          a1[1] = v15;
          a1[2] = v4;
          a1[3] = &v13[4 * v7];
          if (v11)
          {
            operator delete(v11);
            v4 = (char *)a1[2];
          }
          goto LABEL_39;
        }
      }
    }
    else
    {
      v15 = &v13[(v12 - v11) & 0xFFFFFFFFFFFFFFFCLL];
    }
    do
    {
      v38 = *((_DWORD *)v12 - 1);
      v12 -= 4;
      *((_DWORD *)v15 - 1) = v38;
      v15 -= 4;
    }
    while (v12 != v11);
    goto LABEL_37;
  }
  *(_QWORD *)(v2 + 1568) = *(_QWORD *)(v2 + 1560);
  *(_QWORD *)(v2 + 1592) = *(_QWORD *)(v2 + 1584);
  *(_QWORD *)(v2 + 1616) = *(_QWORD *)(v2 + 1608);
  *(_QWORD *)(v2 + 1640) = *(_QWORD *)(v2 + 1632);
  *(_QWORD *)(v2 + 1664) = *(_QWORD *)(v2 + 1656);
  *(_QWORD *)(v2 + 1688) = *(_QWORD *)(v2 + 1680);
  *(_QWORD *)(v2 + 1712) = *(_QWORD *)(v2 + 1704);
  *(_QWORD *)(v2 + 1736) = *(_QWORD *)(v2 + 1728);
  v8 = *(_QWORD *)(v2 + 776);
  v9 = *(_QWORD *)(v2 + 784);
  while (v8 != v9)
  {
    v10 = *(_QWORD *)(v8 + 208);
    if (*(_BYTE *)(v8 + 496) || (*(_BYTE *)(v10 + 4) & 6) != 0 || (*(_BYTE *)(*(_QWORD *)(v8 + 216) + 4) & 6) != 0)
    {
      sub_20F394A20(v2 + 1560, v10);
      sub_20F3D35E0((_QWORD *)(v2 + 1560), *(_QWORD *)(v8 + 216));
    }
    v8 += 504;
  }
  v16 = *(_QWORD *)(v2 + 800);
  v17 = *(_QWORD *)(v2 + 808);
  while (v16 != v17)
  {
    v18 = *(_QWORD *)(v16 + 136);
    if (*(_BYTE *)(v16 + 272) || (*(_BYTE *)(v18 + 4) & 6) != 0)
      sub_20F394A20(v2 + 1560, v18);
    v16 += 280;
  }
  sub_20F5B8680(*(_QWORD *)(v2 + 824), *(_QWORD *)(v2 + 832), (_QWORD *)(v2 + 1560));
  sub_20F5B85BC(*(_QWORD *)(v2 + 848), *(_QWORD *)(v2 + 856), (_QWORD *)(v2 + 1560));
  sub_20F5B8444(*(_QWORD *)(v2 + 872), *(_QWORD *)(v2 + 880), (_QWORD *)(v2 + 1560));
  v19 = *(_QWORD *)(v2 + 896);
  v20 = *(_QWORD *)(v2 + 904);
  while (v19 != v20)
  {
    v21 = *(_QWORD *)(v19 + 736);
    if (*(_BYTE *)(v19 + 880) || (*(_BYTE *)(v21 + 4) & 6) != 0 || (*(_BYTE *)(*(_QWORD *)(v19 + 744) + 4) & 6) != 0)
    {
      sub_20F394A20(v2 + 1560, v21);
      sub_20F394A20(v2 + 1560, *(_QWORD *)(v19 + 744));
    }
    v19 += 888;
  }
  v22.i64[0] = *(_QWORD *)(v2 + 1664);
  v22.i64[1] = *(_QWORD *)(v2 + 1688);
  v23.i64[0] = *(_QWORD *)(v2 + 1712);
  v23.i64[1] = *(_QWORD *)(v2 + 1736);
  v24.i64[0] = *(_QWORD *)(v2 + 1568);
  v24.i64[1] = *(_QWORD *)(v2 + 1592);
  v25.i64[0] = *(_QWORD *)(v2 + 1616);
  v25.i64[1] = *(_QWORD *)(v2 + 1640);
  v26.i64[0] = *(_QWORD *)(v2 + 1656);
  v26.i64[1] = *(_QWORD *)(v2 + 1680);
  v27.i64[0] = *(_QWORD *)(v2 + 1704);
  v27.i64[1] = *(_QWORD *)(v2 + 1728);
  v28.i64[0] = *(_QWORD *)(v2 + 1560);
  v28.i64[1] = *(_QWORD *)(v2 + 1584);
  v29.i64[0] = *(_QWORD *)(v2 + 1608);
  v29.i64[1] = *(_QWORD *)(v2 + 1632);
  LODWORD(v7) = vaddvq_s32(vaddq_s32((int32x4_t)vqsubq_u32((uint32x4_t)v101, vmaxq_u32(v103, (uint32x4_t)vshrn_high_n_s64(vshrn_n_s64(vsubq_s64(v24, v28), 2uLL), vsubq_s64(v25, v29), 2uLL))), (int32x4_t)vqsubq_u32((uint32x4_t)v102, vmaxq_u32(v104, (uint32x4_t)vshrn_high_n_s64(vshrn_n_s64(vsubq_s64(v22, v26), 2uLL), vsubq_s64(v23, v27), 2uLL)))));
  sub_20F59A618((_QWORD *)v2);
  v11 = *v3;
  v7 = v7;
  if (v7 > (unint64_t)((uint64_t)(a1[3] - (_QWORD)*v3) >> 2))
    goto LABEL_13;
LABEL_39:
  v39 = (_BYTE *)a1[13];
  if (v7 <= (uint64_t)(a1[15] - (_QWORD)v39) >> 3)
    goto LABEL_50;
  v40 = (_BYTE *)a1[14];
  v41 = (char *)operator new(8 * v7);
  v42 = v40 - v39;
  v6 = &v41[(v40 - v39) & 0xFFFFFFFFFFFFFFF8];
  v43 = v6;
  if (v40 != v39)
  {
    if ((unint64_t)(v42 - 8) < 0x58)
    {
      v43 = &v41[(v40 - v39) & 0xFFFFFFFFFFFFFFF8];
      do
      {
LABEL_47:
        v52 = *((_QWORD *)v40 - 1);
        v40 -= 8;
        *((_QWORD *)v43 - 1) = v52;
        v43 -= 8;
      }
      while (v40 != v39);
      goto LABEL_48;
    }
    v43 = &v41[(v40 - v39) & 0xFFFFFFFFFFFFFFF8];
    if (v40 - v41 - (v42 & 0xFFFFFFFFFFFFFFF8) < 0x20)
      goto LABEL_47;
    v44 = v42 >> 3;
    v45 = ((unint64_t)(v42 - 8) >> 3) + 1;
    v46 = 8 * (v45 & 0x3FFFFFFFFFFFFFFCLL);
    v47 = &v40[-v46];
    v43 = &v6[-v46];
    v48 = &v41[8 * v44 - 16];
    v49 = (__int128 *)(v40 - 16);
    v50 = v45 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v51 = *v49;
      *((_OWORD *)v48 - 1) = *(v49 - 1);
      *(_OWORD *)v48 = v51;
      v48 -= 32;
      v49 -= 2;
      v50 -= 4;
    }
    while (v50);
    v40 = v47;
    if (v45 != (v45 & 0x3FFFFFFFFFFFFFFCLL))
      goto LABEL_47;
  }
LABEL_48:
  a1[13] = v43;
  a1[14] = v6;
  a1[15] = &v41[8 * v7];
  if (v39)
  {
    operator delete(v39);
    v6 = (char *)a1[14];
  }
LABEL_50:
  v103.i64[0] = 0;
  v53 = *(_QWORD *)(v2 + 8);
  v54 = *(_QWORD *)(v2 + 16);
  if (v53 == v54)
  {
    a1[5] = 0;
    v103.i64[0] = 0;
    v58 = *(_QWORD *)(v2 + 104);
    v59 = *(_QWORD *)(v2 + 112);
    if (v58 != v59)
      goto LABEL_59;
LABEL_116:
    a1[6] = 0;
    v103.i64[0] = 0;
    v63 = *(_QWORD *)(v2 + 200);
    v64 = *(_QWORD *)(v2 + 208);
    if (v63 != v64)
      goto LABEL_67;
LABEL_117:
    a1[7] = 0;
    v103.i64[0] = 0;
    v68 = *(_QWORD *)(v2 + 296);
    v69 = *(_QWORD *)(v2 + 304);
    if (v68 != v69)
      goto LABEL_75;
LABEL_118:
    a1[8] = 0;
    v103.i64[0] = 0;
    v73 = *(_QWORD *)(v2 + 392);
    v74 = *(_QWORD *)(v2 + 400);
    if (v73 != v74)
      goto LABEL_83;
LABEL_119:
    a1[9] = 0;
    v103.i64[0] = 0;
    v78 = *(_QWORD *)(v2 + 488);
    v79 = *(_QWORD *)(v2 + 496);
    if (v78 != v79)
      goto LABEL_91;
LABEL_120:
    a1[10] = 0;
    v103.i64[0] = 0;
    v83 = *(_QWORD *)(v2 + 584);
    v84 = *(_QWORD *)(v2 + 592);
    if (v83 != v84)
      goto LABEL_99;
    goto LABEL_121;
  }
  v55 = 0;
  v56 = 0;
  do
  {
    if (*(_BYTE *)(*(_QWORD *)(v53 + 8) + 20))
    {
      ++v56;
      v6 = sub_20F435A18(v5, v6, v103.i8) + 8;
      v55 = v103.i64[0];
    }
    v103.i64[0] = ++v55;
    v53 += 16;
  }
  while (v53 != v54);
  if (v56)
  {
    v57 = v56;
    do
    {
      v101.i32[0] = 0;
      v4 = sub_20F74FF30(v3, v4, &v101) + 4;
      --v57;
    }
    while (v57);
  }
  a1[5] = v56;
  v103.i64[0] = 0;
  v58 = *(_QWORD *)(v2 + 104);
  v59 = *(_QWORD *)(v2 + 112);
  if (v58 == v59)
    goto LABEL_116;
LABEL_59:
  v60 = 0;
  v61 = 0;
  do
  {
    if (*(_BYTE *)(*(_QWORD *)(v58 + 8) + 20))
    {
      ++v61;
      v6 = sub_20F435A18(v5, v6, v103.i8) + 8;
      v60 = v103.i64[0];
    }
    v103.i64[0] = ++v60;
    v58 += 16;
  }
  while (v58 != v59);
  if (v61)
  {
    v62 = v61;
    do
    {
      v101.i32[0] = 1;
      v4 = sub_20F74FF30(v3, v4, &v101) + 4;
      --v62;
    }
    while (v62);
  }
  a1[6] = v61;
  v103.i64[0] = 0;
  v63 = *(_QWORD *)(v2 + 200);
  v64 = *(_QWORD *)(v2 + 208);
  if (v63 == v64)
    goto LABEL_117;
LABEL_67:
  v65 = 0;
  v66 = 0;
  do
  {
    if (*(_BYTE *)(*(_QWORD *)(v63 + 8) + 20))
    {
      ++v66;
      v6 = sub_20F435A18(v5, v6, v103.i8) + 8;
      v65 = v103.i64[0];
    }
    v103.i64[0] = ++v65;
    v63 += 16;
  }
  while (v63 != v64);
  if (v66)
  {
    v67 = v66;
    do
    {
      v101.i32[0] = 2;
      v4 = sub_20F74FF30(v3, v4, &v101) + 4;
      --v67;
    }
    while (v67);
  }
  a1[7] = v66;
  v103.i64[0] = 0;
  v68 = *(_QWORD *)(v2 + 296);
  v69 = *(_QWORD *)(v2 + 304);
  if (v68 == v69)
    goto LABEL_118;
LABEL_75:
  v70 = 0;
  v71 = 0;
  do
  {
    if (*(_BYTE *)(*(_QWORD *)(v68 + 8) + 20))
    {
      ++v71;
      v6 = sub_20F435A18(v5, v6, v103.i8) + 8;
      v70 = v103.i64[0];
    }
    v103.i64[0] = ++v70;
    v68 += 16;
  }
  while (v68 != v69);
  if (v71)
  {
    v72 = v71;
    do
    {
      v101.i32[0] = 3;
      v4 = sub_20F74FF30(v3, v4, &v101) + 4;
      --v72;
    }
    while (v72);
  }
  a1[8] = v71;
  v103.i64[0] = 0;
  v73 = *(_QWORD *)(v2 + 392);
  v74 = *(_QWORD *)(v2 + 400);
  if (v73 == v74)
    goto LABEL_119;
LABEL_83:
  v75 = 0;
  v76 = 0;
  do
  {
    if (*(_BYTE *)(*(_QWORD *)(v73 + 8) + 20))
    {
      ++v76;
      v6 = sub_20F435A18(v5, v6, v103.i8) + 8;
      v75 = v103.i64[0];
    }
    v103.i64[0] = ++v75;
    v73 += 16;
  }
  while (v73 != v74);
  if (v76)
  {
    v77 = v76;
    do
    {
      v101.i32[0] = 4;
      v4 = sub_20F74FF30(v3, v4, &v101) + 4;
      --v77;
    }
    while (v77);
  }
  a1[9] = v76;
  v103.i64[0] = 0;
  v78 = *(_QWORD *)(v2 + 488);
  v79 = *(_QWORD *)(v2 + 496);
  if (v78 == v79)
    goto LABEL_120;
LABEL_91:
  v80 = 0;
  v81 = 0;
  do
  {
    if (*(_BYTE *)(*(_QWORD *)(v78 + 8) + 20))
    {
      ++v81;
      v6 = sub_20F435A18(v5, v6, v103.i8) + 8;
      v80 = v103.i64[0];
    }
    v103.i64[0] = ++v80;
    v78 += 16;
  }
  while (v78 != v79);
  if (v81)
  {
    v82 = v81;
    do
    {
      v101.i32[0] = 5;
      v4 = sub_20F74FF30(v3, v4, &v101) + 4;
      --v82;
    }
    while (v82);
  }
  a1[10] = v81;
  v103.i64[0] = 0;
  v83 = *(_QWORD *)(v2 + 584);
  v84 = *(_QWORD *)(v2 + 592);
  if (v83 != v84)
  {
LABEL_99:
    v85 = 0;
    v86 = 0;
    do
    {
      if (*(_BYTE *)(*(_QWORD *)(v83 + 8) + 20))
      {
        ++v86;
        v6 = sub_20F435A18(v5, v6, v103.i8) + 8;
        v85 = v103.i64[0];
      }
      v103.i64[0] = ++v85;
      v83 += 16;
    }
    while (v83 != v84);
    if (v86)
    {
      v87 = v86;
      do
      {
        v101.i32[0] = 6;
        v4 = sub_20F74FF30(v3, v4, &v101) + 4;
        --v87;
      }
      while (v87);
    }
    a1[11] = v86;
    v103.i64[0] = 0;
    v88 = *(_QWORD *)(v2 + 680);
    v89 = *(_QWORD *)(v2 + 688);
    if (v88 != v89)
      goto LABEL_107;
LABEL_122:
    v91 = 0;
    goto LABEL_123;
  }
LABEL_121:
  a1[11] = 0;
  v103.i64[0] = 0;
  v88 = *(_QWORD *)(v2 + 680);
  v89 = *(_QWORD *)(v2 + 688);
  if (v88 == v89)
    goto LABEL_122;
LABEL_107:
  v90 = 0;
  v91 = 0;
  do
  {
    if (*(_BYTE *)(*(_QWORD *)(v88 + 8) + 20))
    {
      ++v91;
      v6 = sub_20F435A18(v5, v6, v103.i8) + 8;
      v90 = v103.i64[0];
    }
    v103.i64[0] = ++v90;
    v88 += 16;
  }
  while (v88 != v89);
  if (v91)
  {
    v92 = v91;
    do
    {
      v101.i32[0] = 7;
      v4 = sub_20F74FF30(v3, v4, &v101) + 4;
      --v92;
    }
    while (v92);
  }
LABEL_123:
  v93 = a1[6] + a1[5];
  v94 = a1[8];
  v95 = a1[7] + v93;
  a1[6] = v93;
  a1[7] = v95;
  v96 = v94 + v95;
  v97 = a1[10];
  v98 = a1[9] + v96;
  a1[8] = v96;
  a1[9] = v98;
  v99 = v97 + v98;
  v100 = a1[11] + v97 + v98;
  a1[10] = v99;
  a1[11] = v100;
  a1[12] = v91 + v100;
}

void sub_20F79D3CC(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20F59A618(v1);
  _Unwind_Resume(a1);
}

void sub_20F79D3E0(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20F59A618(v1);
  _Unwind_Resume(a1);
}

void sub_20F79D3F4(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20F59A618(v1);
  _Unwind_Resume(a1);
}

void sub_20F79D408(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20F59A618(v1);
  _Unwind_Resume(a1);
}

void sub_20F79D41C(int64x2_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  void *v43;
  void *v44;
  uint64_t v45;
  uint64_t v46;
  void *v47;
  uint64_t v48;
  uint64_t i;
  uint64_t v50;
  uint64_t v51;
  uint64_t j;
  uint64_t v53;
  uint64_t v54;
  uint64_t k;
  uint64_t v56;
  uint64_t v57;
  uint64_t m;
  uint64_t v59;
  uint64_t v60;
  uint64_t n;
  uint64_t v62;
  uint64_t v63;
  uint64_t ii;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unsigned int *v68;
  unsigned int *v69;
  unint64_t v70;
  _BYTE *v71;
  uint64_t v72;
  _BYTE *v73;
  char *v74;
  uint64_t v75;
  char *v76;
  char *v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  char *v81;
  char *v82;
  __int128 *v83;
  uint64_t v84;
  __int128 v85;
  int v86;
  uint64_t v87;
  unsigned int v88;
  unsigned int *v89;
  uint64_t v90;
  unint64_t v91;
  unint64_t v92;
  unsigned int *v93;
  _DWORD *v94;
  unsigned int v95;
  char *v96;
  unint64_t v97;
  char *v98;
  uint64_t v99;
  uint64_t v100;
  unint64_t v101;
  uint64_t v102;
  unint64_t v103;
  _BYTE *v104;
  unsigned int *v105;
  int64_t v106;
  unint64_t v107;
  uint64_t v108;
  uint64_t v109;
  char *v110;
  _OWORD *v111;
  char *v112;
  uint64_t v113;
  __int128 v114;
  unsigned int v115;
  __n128 *v116;
  char *v117;
  __n128 *v118;
  uint64_t v119;
  const std::nothrow_t *v120;
  char *v121;
  BOOL v122;
  char *v123;
  uint64_t v124;
  uint64_t v125;
  unsigned int *v126;
  unsigned int *v127;
  unint64_t v128;
  _BYTE *v129;
  uint64_t v130;
  _BYTE *v131;
  char *v132;
  uint64_t v133;
  char *v134;
  char *v135;
  uint64_t v136;
  unint64_t v137;
  uint64_t v138;
  char *v139;
  char *v140;
  __int128 *v141;
  uint64_t v142;
  __int128 v143;
  int v144;
  uint64_t v145;
  unsigned int v146;
  unsigned int *v147;
  uint64_t v148;
  unint64_t v149;
  unint64_t v150;
  unsigned int *v151;
  _DWORD *v152;
  unsigned int v153;
  char *v154;
  unint64_t v155;
  char *v156;
  uint64_t v157;
  uint64_t v158;
  unint64_t v159;
  uint64_t v160;
  unint64_t v161;
  _BYTE *v162;
  unsigned int *v163;
  int64_t v164;
  unint64_t v165;
  uint64_t v166;
  uint64_t v167;
  char *v168;
  _OWORD *v169;
  char *v170;
  uint64_t v171;
  __int128 v172;
  unsigned int v173;
  __n128 *v174;
  char *v175;
  __n128 *v176;
  uint64_t v177;
  const std::nothrow_t *v178;
  char *v179;
  char *v180;
  uint64_t v181;
  uint64_t v182;
  unsigned int *v183;
  unsigned int *v184;
  unint64_t v185;
  _BYTE *v186;
  uint64_t v187;
  _BYTE *v188;
  char *v189;
  uint64_t v190;
  char *v191;
  char *v192;
  uint64_t v193;
  unint64_t v194;
  uint64_t v195;
  char *v196;
  char *v197;
  __int128 *v198;
  uint64_t v199;
  __int128 v200;
  int v201;
  uint64_t v202;
  unsigned int v203;
  unsigned int *v204;
  uint64_t v205;
  unint64_t v206;
  unint64_t v207;
  unsigned int *v208;
  _DWORD *v209;
  unsigned int v210;
  char *v211;
  unint64_t v212;
  char *v213;
  uint64_t v214;
  uint64_t v215;
  unint64_t v216;
  uint64_t v217;
  unint64_t v218;
  _BYTE *v219;
  unsigned int *v220;
  int64_t v221;
  unint64_t v222;
  uint64_t v223;
  uint64_t v224;
  char *v225;
  _OWORD *v226;
  char *v227;
  uint64_t v228;
  __int128 v229;
  unsigned int v230;
  __n128 *v231;
  char *v232;
  __n128 *v233;
  uint64_t v234;
  const std::nothrow_t *v235;
  char *v236;
  char *v237;
  uint64_t v238;
  uint64_t v239;
  unsigned int *v240;
  unsigned int *v241;
  unint64_t v242;
  _BYTE *v243;
  uint64_t v244;
  _BYTE *v245;
  char *v246;
  uint64_t v247;
  char *v248;
  char *v249;
  uint64_t v250;
  unint64_t v251;
  uint64_t v252;
  char *v253;
  char *v254;
  __int128 *v255;
  uint64_t v256;
  __int128 v257;
  int v258;
  uint64_t v259;
  unsigned int v260;
  unsigned int *v261;
  uint64_t v262;
  unint64_t v263;
  unint64_t v264;
  unsigned int *v265;
  _DWORD *v266;
  unsigned int v267;
  char *v268;
  unint64_t v269;
  char *v270;
  uint64_t v271;
  uint64_t v272;
  unint64_t v273;
  uint64_t v274;
  unint64_t v275;
  _BYTE *v276;
  unsigned int *v277;
  int64_t v278;
  unint64_t v279;
  uint64_t v280;
  uint64_t v281;
  char *v282;
  _OWORD *v283;
  char *v284;
  uint64_t v285;
  __int128 v286;
  unsigned int v287;
  __n128 *v288;
  char *v289;
  __n128 *v290;
  uint64_t v291;
  const std::nothrow_t *v292;
  char *v293;
  char *v294;
  uint64_t v295;
  uint64_t v296;
  unsigned int *v297;
  unsigned int *v298;
  unint64_t v299;
  _BYTE *v300;
  uint64_t v301;
  _BYTE *v302;
  char *v303;
  uint64_t v304;
  char *v305;
  char *v306;
  uint64_t v307;
  unint64_t v308;
  uint64_t v309;
  char *v310;
  char *v311;
  __int128 *v312;
  uint64_t v313;
  __int128 v314;
  int v315;
  uint64_t v316;
  unsigned int v317;
  unsigned int *v318;
  uint64_t v319;
  unint64_t v320;
  unint64_t v321;
  unsigned int *v322;
  _DWORD *v323;
  unsigned int v324;
  char *v325;
  unint64_t v326;
  char *v327;
  uint64_t v328;
  uint64_t v329;
  unint64_t v330;
  uint64_t v331;
  unint64_t v332;
  _BYTE *v333;
  unsigned int *v334;
  int64_t v335;
  unint64_t v336;
  uint64_t v337;
  uint64_t v338;
  char *v339;
  _OWORD *v340;
  char *v341;
  uint64_t v342;
  __int128 v343;
  unsigned int v344;
  __n128 *v345;
  char *v346;
  __n128 *v347;
  uint64_t v348;
  const std::nothrow_t *v349;
  char *v350;
  char *v351;
  uint64_t v352;
  uint64_t v353;
  unsigned int *v354;
  unsigned int *v355;
  unint64_t v356;
  _BYTE *v357;
  uint64_t v358;
  _BYTE *v359;
  char *v360;
  uint64_t v361;
  char *v362;
  char *v363;
  uint64_t v364;
  unint64_t v365;
  uint64_t v366;
  char *v367;
  char *v368;
  __int128 *v369;
  uint64_t v370;
  __int128 v371;
  int v372;
  uint64_t v373;
  unsigned int v374;
  unsigned int *v375;
  uint64_t v376;
  unint64_t v377;
  unint64_t v378;
  unsigned int *v379;
  _DWORD *v380;
  unsigned int v381;
  char *v382;
  unint64_t v383;
  char *v384;
  uint64_t v385;
  uint64_t v386;
  unint64_t v387;
  uint64_t v388;
  unint64_t v389;
  _BYTE *v390;
  unsigned int *v391;
  int64_t v392;
  unint64_t v393;
  uint64_t v394;
  uint64_t v395;
  char *v396;
  _OWORD *v397;
  char *v398;
  uint64_t v399;
  __int128 v400;
  unsigned int v401;
  __n128 *v402;
  char *v403;
  __n128 *v404;
  uint64_t v405;
  const std::nothrow_t *v406;
  char *v407;
  char *v408;
  uint64_t v409;
  uint64_t v410;
  unsigned int *v411;
  unsigned int *v412;
  unint64_t v413;
  _BYTE *v414;
  uint64_t v415;
  _BYTE *v416;
  char *v417;
  uint64_t v418;
  char *v419;
  char *v420;
  uint64_t v421;
  unint64_t v422;
  uint64_t v423;
  char *v424;
  char *v425;
  __int128 *v426;
  uint64_t v427;
  __int128 v428;
  int v429;
  uint64_t v430;
  unsigned int v431;
  uint64_t v432;
  unsigned int *v433;
  unint64_t v434;
  unint64_t v435;
  unsigned int *v436;
  _DWORD *v437;
  unsigned int v438;
  char *v439;
  unint64_t v440;
  char *v441;
  uint64_t v442;
  uint64_t v443;
  unint64_t v444;
  uint64_t v445;
  unint64_t v446;
  _BYTE *v447;
  unsigned int *v448;
  int64_t v449;
  unint64_t v450;
  uint64_t v451;
  uint64_t v452;
  char *v453;
  _OWORD *v454;
  char *v455;
  uint64_t v456;
  __int128 v457;
  unsigned int v458;
  __n128 *v459;
  char *v460;
  __n128 *v461;
  uint64_t v462;
  const std::nothrow_t *v463;
  char *v464;
  char *v465;
  uint64_t v466;
  uint64_t v467;
  unsigned int *v468;
  unsigned int *v469;
  unint64_t v470;
  _BYTE *v471;
  uint64_t v472;
  _BYTE *v473;
  char *v474;
  uint64_t v475;
  char *v476;
  char *v477;
  uint64_t v478;
  unint64_t v479;
  uint64_t v480;
  char *v481;
  char *v482;
  __int128 *v483;
  uint64_t v484;
  __int128 v485;
  int v486;
  uint64_t v487;
  unsigned int v488;
  uint64_t v489;
  unsigned int *v490;
  unint64_t v491;
  unint64_t v492;
  unsigned int *v493;
  _DWORD *v494;
  unsigned int v495;
  char *v496;
  unint64_t v497;
  char *v498;
  uint64_t v499;
  uint64_t v500;
  unint64_t v501;
  uint64_t v502;
  unint64_t v503;
  _BYTE *v504;
  unsigned int *v505;
  int64_t v506;
  unint64_t v507;
  uint64_t v508;
  uint64_t v509;
  char *v510;
  _OWORD *v511;
  char *v512;
  uint64_t v513;
  __int128 v514;
  unsigned int v515;
  __n128 *v516;
  char *v517;
  __n128 *v518;
  uint64_t v519;
  const std::nothrow_t *v520;
  char *v521;
  char *v522;
  uint64_t v523;
  uint64_t v524;
  uint64_t v525;
  int64x2_t v526;
  _QWORD *v527;
  _QWORD *v528;
  __int128 *v529;
  __int128 v530;
  __int128 v531;
  __int128 v532;
  __int128 v533;
  __int128 v534;
  uint64_t v535;
  __int128 v536;
  __int128 v537;
  __int128 v538;
  std::__shared_weak_count *v539;
  unint64_t *p_shared_owners;
  unint64_t v541;
  __int128 v542;
  __int128 v543;
  __int128 v544;
  __int128 v545;
  __int128 v546;
  __int128 v547;
  __int128 v548;
  __int128 v549;
  __int128 v550;
  __int128 v551;
  __int128 v552;
  __int128 v553;
  uint64_t v554;
  __int128 v555;
  std::__shared_weak_count *v556;
  unint64_t *v557;
  unint64_t v558;
  uint64_t v559;
  uint64_t v560;
  uint64_t jj;
  uint64_t v562;
  _QWORD *v563;
  uint64_t v564;
  _QWORD *v565;
  BOOL v566;
  std::__shared_weak_count *v567;
  unint64_t *v568;
  unint64_t v569;
  std::__shared_weak_count *v570;
  unint64_t *v571;
  unint64_t v572;
  int64x2_t v573;
  _QWORD *v574;
  _QWORD *v575;
  __int128 v576;
  __int128 v577;
  uint64_t v578;
  __int128 v579;
  __int128 v580;
  std::__shared_weak_count *v581;
  unint64_t *v582;
  unint64_t v583;
  __int128 v584;
  __int128 v585;
  __int128 v586;
  __int128 v587;
  uint64_t v588;
  __int128 v589;
  std::__shared_weak_count *v590;
  unint64_t *v591;
  unint64_t v592;
  uint64_t v593;
  uint64_t v594;
  uint64_t kk;
  uint64_t v596;
  uint64_t v597;
  uint64_t v598;
  std::__shared_weak_count *v599;
  unint64_t *v600;
  unint64_t v601;
  std::__shared_weak_count *v602;
  unint64_t *v603;
  unint64_t v604;
  uint64_t v605;
  uint64_t v606;
  uint64_t v607;
  std::__shared_weak_count *v608;
  unint64_t *v609;
  unint64_t v610;
  uint64_t v611;
  uint64_t v612;
  uint64_t v613;
  uint64_t v614;
  _BYTE *v615;
  uint64_t v616;
  std::__shared_weak_count *v617;
  unint64_t *v618;
  unint64_t v619;
  uint64_t v620;
  uint64_t v621;
  uint64_t v622;
  int64x2_t v623;
  _QWORD *v624;
  __int128 v625;
  _QWORD *v626;
  __int128 v627;
  uint64_t v628;
  __int128 v629;
  std::__shared_weak_count *v630;
  unint64_t *v631;
  unint64_t v632;
  uint64_t v633;
  uint64_t v634;
  uint64_t mm;
  uint64_t v636;
  _QWORD *v637;
  _QWORD *v638;
  _QWORD *v639;
  std::__shared_weak_count *v640;
  unint64_t *v641;
  unint64_t v642;
  _QWORD *v643;
  _QWORD *v644;
  __int128 v645;
  __int128 v646;
  __int128 v647;
  __int128 v648;
  __int128 v649;
  __int128 v650;
  __int128 v651;
  __int128 v652;
  __int128 v653;
  __int128 v654;
  uint64_t v655;
  __int128 v656;
  std::__shared_weak_count *v657;
  unint64_t *v658;
  unint64_t v659;
  uint64_t v660;
  std::__shared_weak_count *v661;
  unint64_t *v662;
  unint64_t v663;
  uint64_t v664;
  uint64_t v665;
  uint64_t v666;
  uint64_t v667;
  uint64_t v668;
  uint64_t v669;
  unint64_t v670;
  uint64_t v671;
  uint64_t v672;
  uint64_t v673;
  uint64_t v674;
  uint64_t v675;
  int v676;
  uint64_t v677;
  uint64_t v678;
  uint64_t v679;
  uint64_t v680;
  uint64_t v681;
  uint64_t v682;
  uint64_t v683;
  unint64_t v684;
  uint64_t v685;
  uint64_t v686;
  uint64_t v687;
  uint64_t v688;
  uint64_t v689;
  int v690;
  uint64_t v691;
  uint64_t v692;
  uint64_t v693;
  uint64_t v694;
  uint64_t v695;
  uint64_t v696;
  uint64_t v697;
  unint64_t v698;
  uint64_t v699;
  uint64_t v700;
  uint64_t v701;
  uint64_t v702;
  uint64_t v703;
  int v704;
  uint64_t v705;
  uint64_t v706;
  uint64_t v707;
  uint64_t v708;
  uint64_t v709;
  uint64_t v710;
  uint64_t v711;
  unint64_t v712;
  uint64_t v713;
  uint64_t v714;
  uint64_t v715;
  uint64_t v716;
  uint64_t v717;
  int v718;
  uint64_t v719;
  uint64_t v720;
  uint64_t v721;
  uint64_t v722;
  uint64_t v723;
  uint64_t v724;
  uint64_t v725;
  unint64_t v726;
  uint64_t v727;
  uint64_t v728;
  uint64_t v729;
  uint64_t v730;
  uint64_t v731;
  int v732;
  uint64_t v733;
  uint64_t v734;
  uint64_t v735;
  uint64_t v736;
  uint64_t v737;
  uint64_t v738;
  uint64_t v739;
  unint64_t v740;
  uint64_t v741;
  uint64_t v742;
  uint64_t v743;
  uint64_t v744;
  uint64_t v745;
  int v746;
  uint64_t v747;
  uint64_t v748;
  uint64_t v749;
  uint64_t v750;
  uint64_t v751;
  uint64_t v752;
  uint64_t v753;
  unint64_t v754;
  uint64_t v755;
  uint64_t v756;
  uint64_t v757;
  uint64_t v758;
  uint64_t v759;
  int v760;
  uint64_t v761;
  uint64_t v762;
  uint64_t v763;
  uint64_t v764;
  uint64_t v765;
  uint64_t v766;
  uint64_t v767;
  unint64_t v768;
  uint64_t v769;
  uint64_t v770;
  uint64_t v771;
  uint64_t v772;
  uint64_t v773;
  int v774;
  uint64_t v775;
  uint64_t v776;
  uint64_t v777;
  int v778;
  uint64_t v779;
  int v780;
  uint64_t v781;
  uint64_t v782;
  int v783;
  uint64_t v784;
  int v785;
  uint64_t v786;
  uint64_t v787;
  int v788;
  uint64_t v789;
  int v790;
  uint64_t v791;
  uint64_t v792;
  int v793;
  uint64_t v794;
  int v795;
  uint64_t v796;
  uint64_t v797;
  int v798;
  uint64_t v799;
  int v800;
  uint64_t v801;
  uint64_t v802;
  int v803;
  uint64_t v804;
  int v805;
  uint64_t v806;
  uint64_t v807;
  int v808;
  uint64_t v809;
  int v810;
  uint64_t v811;
  uint64_t v812;
  int v813;
  uint64_t v814;
  int v815;
  uint64_t v816;
  uint64_t v817;
  uint64_t v818;
  uint64_t v819;
  uint64_t v820;
  uint64_t v821;
  uint64_t v822;
  uint64_t v823;
  uint64_t v824;
  uint64_t v825;
  uint64_t v826;
  uint64_t v827;
  uint64_t v828;
  uint64_t v829;
  uint64_t v830;
  uint64_t v831;
  uint64_t v832;
  uint64_t v833;
  uint64_t v834;
  uint64_t v835;
  uint64_t v836;
  uint64_t v837;
  uint64_t v838;
  uint64_t v839;
  unsigned int *v840;
  unsigned int *v841;
  unsigned int *v842;
  unsigned int *v843;
  unsigned int *v844;
  unsigned int *v845;
  unsigned int *v846;
  unsigned int *v847;
  void **v848;
  void **v849;
  void **v850;
  void **v851;
  void **v852;
  void **v853;
  void **v854;
  void **v855;
  char v856;

  if (!a1[61].i8[2])
  {
    if (!a1[61].i8[1])
    {
      v2 = a1[73].i64[1];
      v3 = a1[74].i64[0];
      a1[61].i8[1] = v2 != v3;
      if (v2 == v3)
      {
        v4 = a1[75].i64[0];
        v5 = a1[75].i64[1];
        a1[61].i8[1] = v4 != v5;
        if (v4 == v5)
        {
          v6 = a1[76].i64[1];
          v7 = a1[77].i64[0];
          a1[61].i8[1] = v6 != v7;
          if (v6 == v7)
          {
            v8 = a1[78].i64[0];
            v9 = a1[78].i64[1];
            a1[61].i8[1] = v8 != v9;
            if (v8 == v9)
            {
              v10 = a1[79].i64[1];
              v11 = a1[80].i64[0];
              a1[61].i8[1] = v10 != v11;
              if (v10 == v11)
              {
                v12 = a1[81].i64[0];
                v13 = a1[81].i64[1];
                a1[61].i8[1] = v12 != v13;
                if (v12 == v13)
                {
                  v14 = a1[82].i64[1];
                  v15 = a1[83].i64[0];
                  a1[61].i8[1] = v14 != v15;
                  if (v14 == v15)
                    a1[61].i8[1] = a1[84].i64[0] != a1[84].i64[1];
                }
              }
            }
          }
        }
      }
    }
    std::__sort<std::__less<unsigned int,unsigned int> &,unsigned int *>();
    std::__sort<std::__less<unsigned int,unsigned int> &,unsigned int *>();
    std::__sort<std::__less<unsigned int,unsigned int> &,unsigned int *>();
    std::__sort<std::__less<unsigned int,unsigned int> &,unsigned int *>();
    std::__sort<std::__less<unsigned int,unsigned int> &,unsigned int *>();
    std::__sort<std::__less<unsigned int,unsigned int> &,unsigned int *>();
    std::__sort<std::__less<unsigned int,unsigned int> &,unsigned int *>();
    std::__sort<std::__less<unsigned int,unsigned int> &,unsigned int *>();
    std::__sort<std::__less<unsigned int,unsigned int> &,unsigned int *>();
    std::__sort<std::__less<unsigned int,unsigned int> &,unsigned int *>();
    std::__sort<std::__less<unsigned int,unsigned int> &,unsigned int *>();
    std::__sort<std::__less<unsigned int,unsigned int> &,unsigned int *>();
    std::__sort<std::__less<unsigned int,unsigned int> &,unsigned int *>();
    std::__sort<std::__less<unsigned int,unsigned int> &,unsigned int *>();
    std::__sort<std::__less<unsigned int,unsigned int> &,unsigned int *>();
    std::__sort<std::__less<unsigned int,unsigned int> &,unsigned int *>();
    if (!a1[61].i8[1])
    {
LABEL_576:
      a1[61].i8[2] = 1;
      goto LABEL_577;
    }
    v16 = (void *)a1[97].i64[1];
    a1[98].i64[0] = (uint64_t)v16;
    v17 = a1[1].i64[0] - a1->i64[1];
    v18 = v17 >> 4;
    if (v17 >> 4 > (unint64_t)((a1[98].i64[1] - (uint64_t)v16) >> 2))
    {
      if (v17 < 0)
        sub_20E867F44();
      v19 = operator new((unint64_t)v17 >> 2);
      a1[97].i64[1] = (uint64_t)v19;
      a1[98].i64[0] = (uint64_t)v19;
      a1[98].i64[1] = (uint64_t)v19 + 4 * v18;
      if (v16)
        operator delete(v16);
    }
    v20 = (void *)a1[99].i64[0];
    a1[99].i64[1] = (uint64_t)v20;
    v21 = a1[7].i64[0] - a1[6].i64[1];
    v22 = v21 >> 4;
    if (v21 >> 4 > (unint64_t)((a1[100].i64[0] - (uint64_t)v20) >> 2))
    {
      if (v21 < 0)
        sub_20E867F44();
      v23 = operator new((unint64_t)v21 >> 2);
      a1[99].i64[0] = (uint64_t)v23;
      a1[99].i64[1] = (uint64_t)v23;
      a1[100].i64[0] = (uint64_t)v23 + 4 * v22;
      if (v20)
        operator delete(v20);
    }
    v24 = (void *)a1[100].i64[1];
    a1[101].i64[0] = (uint64_t)v24;
    v25 = a1[13].i64[0] - a1[12].i64[1];
    v26 = v25 >> 4;
    if (v25 >> 4 > (unint64_t)((a1[101].i64[1] - (uint64_t)v24) >> 2))
    {
      if (v25 < 0)
        sub_20E867F44();
      v27 = operator new((unint64_t)v25 >> 2);
      a1[100].i64[1] = (uint64_t)v27;
      a1[101].i64[0] = (uint64_t)v27;
      a1[101].i64[1] = (uint64_t)v27 + 4 * v26;
      if (v24)
        operator delete(v24);
    }
    v28 = (void *)a1[102].i64[0];
    a1[102].i64[1] = (uint64_t)v28;
    v29 = a1[19].i64[0] - a1[18].i64[1];
    v30 = v29 >> 4;
    if (v29 >> 4 > (unint64_t)((a1[103].i64[0] - (uint64_t)v28) >> 2))
    {
      if (v29 < 0)
        sub_20E867F44();
      v31 = operator new((unint64_t)v29 >> 2);
      a1[102].i64[0] = (uint64_t)v31;
      a1[102].i64[1] = (uint64_t)v31;
      a1[103].i64[0] = (uint64_t)v31 + 4 * v30;
      if (v28)
        operator delete(v28);
    }
    v32 = (void *)a1[103].i64[1];
    a1[104].i64[0] = (uint64_t)v32;
    v33 = a1[25].i64[0] - a1[24].i64[1];
    v34 = v33 >> 4;
    if (v33 >> 4 > (unint64_t)((a1[104].i64[1] - (uint64_t)v32) >> 2))
    {
      if (v33 < 0)
        sub_20E867F44();
      v35 = operator new((unint64_t)v33 >> 2);
      a1[103].i64[1] = (uint64_t)v35;
      a1[104].i64[0] = (uint64_t)v35;
      a1[104].i64[1] = (uint64_t)v35 + 4 * v34;
      if (v32)
        operator delete(v32);
    }
    v36 = (void *)a1[105].i64[0];
    a1[105].i64[1] = (uint64_t)v36;
    v37 = a1[31].i64[0] - a1[30].i64[1];
    v38 = v37 >> 4;
    if (v37 >> 4 > (unint64_t)((a1[106].i64[0] - (uint64_t)v36) >> 2))
    {
      if (v37 < 0)
        sub_20E867F44();
      v39 = operator new((unint64_t)v37 >> 2);
      a1[105].i64[0] = (uint64_t)v39;
      a1[105].i64[1] = (uint64_t)v39;
      a1[106].i64[0] = (uint64_t)v39 + 4 * v38;
      if (v36)
        operator delete(v36);
    }
    v40 = (void *)a1[106].i64[1];
    a1[107].i64[0] = (uint64_t)v40;
    v41 = a1[37].i64[0] - a1[36].i64[1];
    v42 = v41 >> 4;
    if (v41 >> 4 > (unint64_t)((a1[107].i64[1] - (uint64_t)v40) >> 2))
    {
      if (v41 < 0)
        sub_20E867F44();
      v43 = operator new((unint64_t)v41 >> 2);
      a1[106].i64[1] = (uint64_t)v43;
      a1[107].i64[0] = (uint64_t)v43;
      a1[107].i64[1] = (uint64_t)v43 + 4 * v42;
      if (v40)
        operator delete(v40);
    }
    v44 = (void *)a1[108].i64[0];
    a1[108].i64[1] = (uint64_t)v44;
    v45 = a1[43].i64[0] - a1[42].i64[1];
    v46 = v45 >> 4;
    if (v45 >> 4 > (unint64_t)((a1[109].i64[0] - (uint64_t)v44) >> 2))
    {
      if (v45 < 0)
        sub_20E867F44();
      v47 = operator new((unint64_t)v45 >> 2);
      a1[108].i64[0] = (uint64_t)v47;
      a1[108].i64[1] = (uint64_t)v47;
      a1[109].i64[0] = (uint64_t)v47 + 4 * v46;
      if (v44)
        operator delete(v44);
    }
    v48 = a1[48].i64[1];
    for (i = a1[49].i64[0]; v48 != i; v48 += 504)
    {
      v50 = *(_QWORD *)(v48 + 208);
      if (*(_BYTE *)(v48 + 496)
        || (*(_BYTE *)(v50 + 4) & 6) != 0
        || (*(_BYTE *)(*(_QWORD *)(v48 + 216) + 4) & 6) != 0)
      {
        *(_BYTE *)(v48 + 496) = 1;
        sub_20F394A20((uint64_t)&a1[97].i64[1], v50);
        sub_20F3D35E0(&a1[97].i64[1], *(_QWORD *)(v48 + 216));
      }
    }
    v51 = a1[50].i64[0];
    for (j = a1[50].i64[1]; v51 != j; v51 += 280)
    {
      v53 = *(_QWORD *)(v51 + 136);
      if (*(_BYTE *)(v51 + 272) || (*(_BYTE *)(v53 + 4) & 6) != 0)
      {
        *(_BYTE *)(v51 + 272) = 1;
        sub_20F394A20((uint64_t)&a1[97].i64[1], v53);
      }
    }
    v54 = a1[51].i64[1];
    for (k = a1[52].i64[0]; v54 != k; v54 += 8016)
    {
      v56 = *(_QWORD *)(v54 + 7696);
      if (*(_BYTE *)(v54 + 8008)
        || (*(_BYTE *)(v56 + 4) & 6) != 0
        || (*(_BYTE *)(*(_QWORD *)(v54 + 7704) + 4) & 6) != 0
        || (*(_BYTE *)(*(_QWORD *)(v54 + 7712) + 4) & 6) != 0
        || (*(_BYTE *)(*(_QWORD *)(v54 + 7720) + 4) & 6) != 0
        || (*(_BYTE *)(*(_QWORD *)(v54 + 7728) + 4) & 6) != 0)
      {
        *(_BYTE *)(v54 + 8008) = 1;
        sub_20F394A20((uint64_t)&a1[97].i64[1], v56);
        sub_20F3D35E0(&a1[97].i64[1], *(_QWORD *)(v54 + 7704));
        sub_20F394A20((uint64_t)&a1[97].i64[1], *(_QWORD *)(v54 + 7712));
        sub_20F3D35E0(&a1[97].i64[1], *(_QWORD *)(v54 + 7720));
        sub_20F599C88(&a1[97].i64[1], *(_QWORD *)(v54 + 7728));
      }
    }
    v57 = a1[53].i64[0];
    for (m = a1[53].i64[1]; v57 != m; v57 += 5336)
    {
      v59 = *(_QWORD *)(v57 + 5024);
      if (*(_BYTE *)(v57 + 5328)
        || (*(_BYTE *)(v59 + 4) & 6) != 0
        || (*(_BYTE *)(*(_QWORD *)(v57 + 5032) + 4) & 6) != 0
        || (*(_BYTE *)(*(_QWORD *)(v57 + 5040) + 4) & 6) != 0
        || (*(_BYTE *)(*(_QWORD *)(v57 + 5048) + 4) & 6) != 0)
      {
        *(_BYTE *)(v57 + 5328) = 1;
        sub_20F394A20((uint64_t)&a1[97].i64[1], v59);
        sub_20F3D35E0(&a1[97].i64[1], *(_QWORD *)(v57 + 5032));
        sub_20F394A20((uint64_t)&a1[97].i64[1], *(_QWORD *)(v57 + 5040));
        sub_20F3D35E0(&a1[97].i64[1], *(_QWORD *)(v57 + 5048));
      }
    }
    v60 = a1[54].i64[1];
    for (n = a1[55].i64[0]; v60 != n; v60 += 216)
    {
      v62 = *(_QWORD *)(v60 + 56);
      if (*(_BYTE *)(v60 + 208)
        || (*(_BYTE *)(v62 + 4) & 6) != 0
        || (*(_BYTE *)(*(_QWORD *)(v60 + 64) + 4) & 6) != 0
        || (*(_BYTE *)(*(_QWORD *)(v60 + 72) + 4) & 6) != 0
        || (*(_BYTE *)(*(_QWORD *)(v60 + 80) + 4) & 6) != 0
        || (*(_BYTE *)(*(_QWORD *)(v60 + 88) + 4) & 6) != 0
        || (*(_BYTE *)(*(_QWORD *)(v60 + 96) + 4) & 6) != 0
        || (*(_BYTE *)(*(_QWORD *)(v60 + 104) + 4) & 6) != 0
        || (*(_BYTE *)(*(_QWORD *)(v60 + 112) + 4) & 6) != 0
        || (*(_BYTE *)(*(_QWORD *)(v60 + 120) + 4) & 6) != 0
        || (*(_BYTE *)(*(_QWORD *)(v60 + 128) + 4) & 6) != 0
        || (*(_BYTE *)(*(_QWORD *)(v60 + 136) + 4) & 6) != 0)
      {
        *(_BYTE *)(v60 + 208) = 1;
        sub_20F59A480(&a1[97].i64[1], v62);
        sub_20F59A480(&a1[97].i64[1], *(_QWORD *)(v60 + 64));
        sub_20F394A20((uint64_t)&a1[97].i64[1], *(_QWORD *)(v60 + 72));
        sub_20F394A20((uint64_t)&a1[97].i64[1], *(_QWORD *)(v60 + 80));
        sub_20F59A2E8(&a1[97].i64[1], *(_QWORD *)(v60 + 88));
        sub_20F59A2E8(&a1[97].i64[1], *(_QWORD *)(v60 + 96));
        sub_20F59A150(&a1[97].i64[1], *(_QWORD *)(v60 + 104));
        sub_20F59A150(&a1[97].i64[1], *(_QWORD *)(v60 + 112));
        sub_20F599FB8(&a1[97].i64[1], *(_QWORD *)(v60 + 120));
        sub_20F599FB8(&a1[97].i64[1], *(_QWORD *)(v60 + 128));
        sub_20F599E20(&a1[97].i64[1], *(_QWORD *)(v60 + 136));
      }
    }
    v63 = a1[56].i64[0];
    for (ii = a1[56].i64[1]; v63 != ii; v63 += 888)
    {
      v65 = *(_QWORD *)(v63 + 736);
      if (*(_BYTE *)(v63 + 880)
        || (*(_BYTE *)(v65 + 4) & 6) != 0
        || (*(_BYTE *)(*(_QWORD *)(v63 + 744) + 4) & 6) != 0)
      {
        *(_BYTE *)(v63 + 880) = 1;
        sub_20F394A20((uint64_t)&a1[97].i64[1], v65);
        sub_20F394A20((uint64_t)&a1[97].i64[1], *(_QWORD *)(v63 + 744));
      }
    }
    v66 = a1[74].i64[0];
    v67 = a1[73].i64[1];
    std::__sort<std::__less<unsigned int,unsigned int> &,unsigned int *>();
    v848 = (void **)&a1[73].i64[1];
    v68 = (unsigned int *)a1[98].i64[0];
    v69 = (unsigned int *)a1[97].i64[1];
    v70 = ((v66 - v67) >> 2) + v68 - v69;
    v71 = (_BYTE *)a1[73].i64[1];
    v816 = (v66 - v67) >> 2;
    v824 = v67;
    v832 = v66;
    if (v70 <= (a1[74].i64[1] - (uint64_t)v71) >> 2)
    {
LABEL_107:
      if (v69 != v68)
      {
        v840 = v68;
        while (1)
        {
          v88 = *v69;
          v90 = a1->i64[1];
          v89 = (unsigned int *)a1[1].i64[0];
          if (v89 != (unsigned int *)v90)
          {
            v91 = ((uint64_t)v89 - v90) >> 4;
            do
            {
              v92 = v91 >> 1;
              v93 = (unsigned int *)(v90 + 16 * (v91 >> 1));
              v95 = *v93;
              v94 = v93 + 4;
              v91 += ~(v91 >> 1);
              if (v95 < v88)
                v90 = (uint64_t)v94;
              else
                v91 = v92;
            }
            while (v91);
          }
          if ((unsigned int *)v90 == v89 || *(_DWORD *)v90 != v88)
          {
            v88 = *v89;
            v90 = a1[1].i64[0];
          }
          if ((*(_BYTE *)(*(_QWORD *)(v90 + 8) + 4) & 6) != 0)
            goto LABEL_111;
          v96 = (char *)a1[74].i64[0];
          v97 = a1[74].u64[1];
          if ((unint64_t)v96 >= v97)
            break;
          *(_DWORD *)v96 = v88;
          v87 = (uint64_t)(v96 + 4);
LABEL_110:
          a1[74].i64[0] = v87;
          *(_BYTE *)(*(_QWORD *)(v90 + 8) + 4) ^= 2u;
LABEL_111:
          if (++v69 == v68)
            goto LABEL_143;
        }
        v98 = (char *)*v848;
        v99 = v96 - (_BYTE *)*v848;
        v100 = v99 >> 2;
        v101 = (v99 >> 2) + 1;
        if (v101 >> 62)
          goto LABEL_910;
        v102 = v97 - (_QWORD)v98;
        if (v102 >> 1 > v101)
          v101 = v102 >> 1;
        if ((unint64_t)v102 >= 0x7FFFFFFFFFFFFFFCLL)
          v103 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v103 = v101;
        if (v103)
        {
          if (v103 >> 62)
LABEL_911:
            sub_20E877A38();
          v104 = operator new(4 * v103);
          v105 = (unsigned int *)&v104[4 * v100];
          *v105 = v88;
          v87 = (uint64_t)(v105 + 1);
          v106 = v96 - v98;
          if (v96 == v98)
            goto LABEL_140;
        }
        else
        {
          v104 = 0;
          v105 = (unsigned int *)(4 * v100);
          *(_DWORD *)(4 * v100) = v88;
          v87 = 4 * v100 + 4;
          v106 = v96 - v98;
          if (v96 == v98)
          {
LABEL_140:
            a1[73].i64[1] = (uint64_t)v105;
            a1[74].i64[0] = v87;
            a1[74].i64[1] = (uint64_t)&v104[4 * v103];
            if (v98)
              operator delete(v98);
            v68 = v840;
            goto LABEL_110;
          }
        }
        v107 = v106 - 4;
        if (v107 < 0x2C)
          goto LABEL_922;
        if ((unint64_t)(v96 - v104 - v99) < 0x20)
          goto LABEL_922;
        v108 = (v107 >> 2) + 1;
        v109 = 4 * (v108 & 0x7FFFFFFFFFFFFFF8);
        v110 = &v96[-v109];
        v105 = (unsigned int *)((char *)v105 - v109);
        v111 = &v104[4 * v100 - 16];
        v112 = v96 - 16;
        v113 = v108 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          v114 = *(_OWORD *)v112;
          *(v111 - 1) = *((_OWORD *)v112 - 1);
          *v111 = v114;
          v111 -= 2;
          v112 -= 32;
          v113 -= 8;
        }
        while (v113);
        v96 = v110;
        if (v108 != (v108 & 0x7FFFFFFFFFFFFFF8))
        {
LABEL_922:
          do
          {
            v115 = *((_DWORD *)v96 - 1);
            v96 -= 4;
            *--v105 = v115;
          }
          while (v96 != v98);
        }
        goto LABEL_140;
      }
LABEL_143:
      if (v832 != v824)
      {
        std::__sort<std::__less<unsigned int,unsigned int> &,unsigned int *>();
        v116 = (__n128 *)a1[73].i64[1];
        v117 = (char *)v116 + 4 * v816;
        v118 = (__n128 *)a1[74].i64[0];
        if (((char *)v118 - v117) >> 2 >= v816)
          v119 = v816;
        else
          v119 = ((char *)v118 - v117) >> 2;
        if (v119 < 1)
        {
LABEL_151:
          v123 = 0;
          v119 = 0;
        }
        else
        {
          v120 = (const std::nothrow_t *)MEMORY[0x24BEDB6B8];
          while (1)
          {
            v121 = (char *)operator new(4 * v119, v120);
            if (v121)
              break;
            v122 = (unint64_t)v119 > 1;
            v119 = (unint64_t)v119 >> 1;
            if (!v122)
              goto LABEL_151;
          }
          v123 = v121;
        }
        sub_20EDB30B0(v116, (__n128 *)((char *)v116 + 4 * v816), v118, (uint64_t)&v856, v816, ((char *)v118 - v117) >> 2, v123, v119);
        if (v123)
          operator delete(v123);
      }
      v124 = a1[75].i64[1];
      v125 = a1[75].i64[0];
      std::__sort<std::__less<unsigned int,unsigned int> &,unsigned int *>();
      v849 = (void **)&a1[75];
      v126 = (unsigned int *)a1[99].i64[1];
      v127 = (unsigned int *)a1[99].i64[0];
      v128 = ((v124 - v125) >> 2) + v126 - v127;
      v129 = (_BYTE *)a1[75].i64[0];
      v817 = (v124 - v125) >> 2;
      v825 = v125;
      v833 = v124;
      if (v128 <= (a1[76].i64[0] - (uint64_t)v129) >> 2)
      {
LABEL_167:
        if (v127 != v126)
        {
          v841 = v126;
          while (1)
          {
            v146 = *v127;
            v148 = a1[6].i64[1];
            v147 = (unsigned int *)a1[7].i64[0];
            if (v147 != (unsigned int *)v148)
            {
              v149 = ((uint64_t)v147 - v148) >> 4;
              do
              {
                v150 = v149 >> 1;
                v151 = (unsigned int *)(v148 + 16 * (v149 >> 1));
                v153 = *v151;
                v152 = v151 + 4;
                v149 += ~(v149 >> 1);
                if (v153 < v146)
                  v148 = (uint64_t)v152;
                else
                  v149 = v150;
              }
              while (v149);
            }
            if ((unsigned int *)v148 == v147 || *(_DWORD *)v148 != v146)
            {
              v146 = *v147;
              v148 = a1[7].i64[0];
            }
            if ((*(_BYTE *)(*(_QWORD *)(v148 + 8) + 4) & 6) != 0)
              goto LABEL_171;
            v154 = (char *)a1[75].i64[1];
            v155 = a1[76].u64[0];
            if ((unint64_t)v154 >= v155)
              break;
            *(_DWORD *)v154 = v146;
            v145 = (uint64_t)(v154 + 4);
LABEL_170:
            a1[75].i64[1] = v145;
            *(_BYTE *)(*(_QWORD *)(v148 + 8) + 4) ^= 2u;
LABEL_171:
            if (++v127 == v126)
              goto LABEL_203;
          }
          v156 = (char *)*v849;
          v157 = v154 - (_BYTE *)*v849;
          v158 = v157 >> 2;
          v159 = (v157 >> 2) + 1;
          if (v159 >> 62)
            goto LABEL_910;
          v160 = v155 - (_QWORD)v156;
          if (v160 >> 1 > v159)
            v159 = v160 >> 1;
          if ((unint64_t)v160 >= 0x7FFFFFFFFFFFFFFCLL)
            v161 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v161 = v159;
          if (v161)
          {
            if (v161 >> 62)
              goto LABEL_911;
            v162 = operator new(4 * v161);
            v163 = (unsigned int *)&v162[4 * v158];
            *v163 = v146;
            v145 = (uint64_t)(v163 + 1);
            v164 = v154 - v156;
            if (v154 == v156)
              goto LABEL_200;
          }
          else
          {
            v162 = 0;
            v163 = (unsigned int *)(4 * v158);
            *(_DWORD *)(4 * v158) = v146;
            v145 = 4 * v158 + 4;
            v164 = v154 - v156;
            if (v154 == v156)
            {
LABEL_200:
              a1[75].i64[0] = (uint64_t)v163;
              a1[75].i64[1] = v145;
              a1[76].i64[0] = (uint64_t)&v162[4 * v161];
              if (v156)
                operator delete(v156);
              v126 = v841;
              goto LABEL_170;
            }
          }
          v165 = v164 - 4;
          if (v165 < 0x2C)
            goto LABEL_923;
          if ((unint64_t)(v154 - v162 - v157) < 0x20)
            goto LABEL_923;
          v166 = (v165 >> 2) + 1;
          v167 = 4 * (v166 & 0x7FFFFFFFFFFFFFF8);
          v168 = &v154[-v167];
          v163 = (unsigned int *)((char *)v163 - v167);
          v169 = &v162[4 * v158 - 16];
          v170 = v154 - 16;
          v171 = v166 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            v172 = *(_OWORD *)v170;
            *(v169 - 1) = *((_OWORD *)v170 - 1);
            *v169 = v172;
            v169 -= 2;
            v170 -= 32;
            v171 -= 8;
          }
          while (v171);
          v154 = v168;
          if (v166 != (v166 & 0x7FFFFFFFFFFFFFF8))
          {
LABEL_923:
            do
            {
              v173 = *((_DWORD *)v154 - 1);
              v154 -= 4;
              *--v163 = v173;
            }
            while (v154 != v156);
          }
          goto LABEL_200;
        }
LABEL_203:
        if (v833 != v825)
        {
          std::__sort<std::__less<unsigned int,unsigned int> &,unsigned int *>();
          v174 = (__n128 *)a1[75].i64[0];
          v175 = (char *)v174 + 4 * v817;
          v176 = (__n128 *)a1[75].i64[1];
          if (((char *)v176 - v175) >> 2 >= v817)
            v177 = v817;
          else
            v177 = ((char *)v176 - v175) >> 2;
          if (v177 < 1)
          {
LABEL_211:
            v180 = 0;
            v177 = 0;
          }
          else
          {
            v178 = (const std::nothrow_t *)MEMORY[0x24BEDB6B8];
            while (1)
            {
              v179 = (char *)operator new(4 * v177, v178);
              if (v179)
                break;
              v122 = (unint64_t)v177 > 1;
              v177 = (unint64_t)v177 >> 1;
              if (!v122)
                goto LABEL_211;
            }
            v180 = v179;
          }
          sub_20EDB30B0(v174, (__n128 *)((char *)v174 + 4 * v817), v176, (uint64_t)&v856, v817, ((char *)v176 - v175) >> 2, v180, v177);
          if (v180)
            operator delete(v180);
        }
        v181 = a1[77].i64[0];
        v182 = a1[76].i64[1];
        std::__sort<std::__less<unsigned int,unsigned int> &,unsigned int *>();
        v850 = (void **)&a1[76].i64[1];
        v183 = (unsigned int *)a1[101].i64[0];
        v184 = (unsigned int *)a1[100].i64[1];
        v185 = ((v181 - v182) >> 2) + v183 - v184;
        v186 = (_BYTE *)a1[76].i64[1];
        v818 = (v181 - v182) >> 2;
        v826 = v182;
        v834 = v181;
        if (v185 <= (a1[77].i64[1] - (uint64_t)v186) >> 2)
        {
LABEL_227:
          if (v184 != v183)
          {
            v842 = v183;
            while (1)
            {
              v203 = *v184;
              v205 = a1[12].i64[1];
              v204 = (unsigned int *)a1[13].i64[0];
              if (v204 != (unsigned int *)v205)
              {
                v206 = ((uint64_t)v204 - v205) >> 4;
                do
                {
                  v207 = v206 >> 1;
                  v208 = (unsigned int *)(v205 + 16 * (v206 >> 1));
                  v210 = *v208;
                  v209 = v208 + 4;
                  v206 += ~(v206 >> 1);
                  if (v210 < v203)
                    v205 = (uint64_t)v209;
                  else
                    v206 = v207;
                }
                while (v206);
              }
              if ((unsigned int *)v205 == v204 || *(_DWORD *)v205 != v203)
              {
                v203 = *v204;
                v205 = a1[13].i64[0];
              }
              if ((*(_BYTE *)(*(_QWORD *)(v205 + 8) + 4) & 6) != 0)
                goto LABEL_231;
              v211 = (char *)a1[77].i64[0];
              v212 = a1[77].u64[1];
              if ((unint64_t)v211 >= v212)
                break;
              *(_DWORD *)v211 = v203;
              v202 = (uint64_t)(v211 + 4);
LABEL_230:
              a1[77].i64[0] = v202;
              *(_BYTE *)(*(_QWORD *)(v205 + 8) + 4) ^= 2u;
LABEL_231:
              if (++v184 == v183)
                goto LABEL_263;
            }
            v213 = (char *)*v850;
            v214 = v211 - (_BYTE *)*v850;
            v215 = v214 >> 2;
            v216 = (v214 >> 2) + 1;
            if (v216 >> 62)
              goto LABEL_910;
            v217 = v212 - (_QWORD)v213;
            if (v217 >> 1 > v216)
              v216 = v217 >> 1;
            if ((unint64_t)v217 >= 0x7FFFFFFFFFFFFFFCLL)
              v218 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v218 = v216;
            if (v218)
            {
              if (v218 >> 62)
                goto LABEL_911;
              v219 = operator new(4 * v218);
              v220 = (unsigned int *)&v219[4 * v215];
              *v220 = v203;
              v202 = (uint64_t)(v220 + 1);
              v221 = v211 - v213;
              if (v211 == v213)
                goto LABEL_260;
            }
            else
            {
              v219 = 0;
              v220 = (unsigned int *)(4 * v215);
              *(_DWORD *)(4 * v215) = v203;
              v202 = 4 * v215 + 4;
              v221 = v211 - v213;
              if (v211 == v213)
              {
LABEL_260:
                a1[76].i64[1] = (uint64_t)v220;
                a1[77].i64[0] = v202;
                a1[77].i64[1] = (uint64_t)&v219[4 * v218];
                if (v213)
                  operator delete(v213);
                v183 = v842;
                goto LABEL_230;
              }
            }
            v222 = v221 - 4;
            if (v222 < 0x2C)
              goto LABEL_924;
            if ((unint64_t)(v211 - v219 - v214) < 0x20)
              goto LABEL_924;
            v223 = (v222 >> 2) + 1;
            v224 = 4 * (v223 & 0x7FFFFFFFFFFFFFF8);
            v225 = &v211[-v224];
            v220 = (unsigned int *)((char *)v220 - v224);
            v226 = &v219[4 * v215 - 16];
            v227 = v211 - 16;
            v228 = v223 & 0x7FFFFFFFFFFFFFF8;
            do
            {
              v229 = *(_OWORD *)v227;
              *(v226 - 1) = *((_OWORD *)v227 - 1);
              *v226 = v229;
              v226 -= 2;
              v227 -= 32;
              v228 -= 8;
            }
            while (v228);
            v211 = v225;
            if (v223 != (v223 & 0x7FFFFFFFFFFFFFF8))
            {
LABEL_924:
              do
              {
                v230 = *((_DWORD *)v211 - 1);
                v211 -= 4;
                *--v220 = v230;
              }
              while (v211 != v213);
            }
            goto LABEL_260;
          }
LABEL_263:
          if (v834 != v826)
          {
            std::__sort<std::__less<unsigned int,unsigned int> &,unsigned int *>();
            v231 = (__n128 *)a1[76].i64[1];
            v232 = (char *)v231 + 4 * v818;
            v233 = (__n128 *)a1[77].i64[0];
            if (((char *)v233 - v232) >> 2 >= v818)
              v234 = v818;
            else
              v234 = ((char *)v233 - v232) >> 2;
            if (v234 < 1)
            {
LABEL_271:
              v237 = 0;
              v234 = 0;
            }
            else
            {
              v235 = (const std::nothrow_t *)MEMORY[0x24BEDB6B8];
              while (1)
              {
                v236 = (char *)operator new(4 * v234, v235);
                if (v236)
                  break;
                v122 = (unint64_t)v234 > 1;
                v234 = (unint64_t)v234 >> 1;
                if (!v122)
                  goto LABEL_271;
              }
              v237 = v236;
            }
            sub_20EDB30B0(v231, (__n128 *)((char *)v231 + 4 * v818), v233, (uint64_t)&v856, v818, ((char *)v233 - v232) >> 2, v237, v234);
            if (v237)
              operator delete(v237);
          }
          v238 = a1[78].i64[1];
          v239 = a1[78].i64[0];
          std::__sort<std::__less<unsigned int,unsigned int> &,unsigned int *>();
          v851 = (void **)&a1[78];
          v240 = (unsigned int *)a1[102].i64[1];
          v241 = (unsigned int *)a1[102].i64[0];
          v242 = ((v238 - v239) >> 2) + v240 - v241;
          v243 = (_BYTE *)a1[78].i64[0];
          v819 = (v238 - v239) >> 2;
          v827 = v239;
          v835 = v238;
          if (v242 <= (a1[79].i64[0] - (uint64_t)v243) >> 2)
          {
LABEL_287:
            if (v241 != v240)
            {
              v843 = v240;
              while (1)
              {
                v260 = *v241;
                v262 = a1[18].i64[1];
                v261 = (unsigned int *)a1[19].i64[0];
                if (v261 != (unsigned int *)v262)
                {
                  v263 = ((uint64_t)v261 - v262) >> 4;
                  do
                  {
                    v264 = v263 >> 1;
                    v265 = (unsigned int *)(v262 + 16 * (v263 >> 1));
                    v267 = *v265;
                    v266 = v265 + 4;
                    v263 += ~(v263 >> 1);
                    if (v267 < v260)
                      v262 = (uint64_t)v266;
                    else
                      v263 = v264;
                  }
                  while (v263);
                }
                if ((unsigned int *)v262 == v261 || *(_DWORD *)v262 != v260)
                {
                  v260 = *v261;
                  v262 = a1[19].i64[0];
                }
                if ((*(_BYTE *)(*(_QWORD *)(v262 + 8) + 4) & 6) != 0)
                  goto LABEL_291;
                v268 = (char *)a1[78].i64[1];
                v269 = a1[79].u64[0];
                if ((unint64_t)v268 >= v269)
                  break;
                *(_DWORD *)v268 = v260;
                v259 = (uint64_t)(v268 + 4);
LABEL_290:
                a1[78].i64[1] = v259;
                *(_BYTE *)(*(_QWORD *)(v262 + 8) + 4) ^= 2u;
LABEL_291:
                if (++v241 == v240)
                  goto LABEL_323;
              }
              v270 = (char *)*v851;
              v271 = v268 - (_BYTE *)*v851;
              v272 = v271 >> 2;
              v273 = (v271 >> 2) + 1;
              if (v273 >> 62)
                goto LABEL_910;
              v274 = v269 - (_QWORD)v270;
              if (v274 >> 1 > v273)
                v273 = v274 >> 1;
              if ((unint64_t)v274 >= 0x7FFFFFFFFFFFFFFCLL)
                v275 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v275 = v273;
              if (v275)
              {
                if (v275 >> 62)
                  goto LABEL_911;
                v276 = operator new(4 * v275);
                v277 = (unsigned int *)&v276[4 * v272];
                *v277 = v260;
                v259 = (uint64_t)(v277 + 1);
                v278 = v268 - v270;
                if (v268 == v270)
                  goto LABEL_320;
              }
              else
              {
                v276 = 0;
                v277 = (unsigned int *)(4 * v272);
                *(_DWORD *)(4 * v272) = v260;
                v259 = 4 * v272 + 4;
                v278 = v268 - v270;
                if (v268 == v270)
                {
LABEL_320:
                  a1[78].i64[0] = (uint64_t)v277;
                  a1[78].i64[1] = v259;
                  a1[79].i64[0] = (uint64_t)&v276[4 * v275];
                  if (v270)
                    operator delete(v270);
                  v240 = v843;
                  goto LABEL_290;
                }
              }
              v279 = v278 - 4;
              if (v279 < 0x2C)
                goto LABEL_925;
              if ((unint64_t)(v268 - v276 - v271) < 0x20)
                goto LABEL_925;
              v280 = (v279 >> 2) + 1;
              v281 = 4 * (v280 & 0x7FFFFFFFFFFFFFF8);
              v282 = &v268[-v281];
              v277 = (unsigned int *)((char *)v277 - v281);
              v283 = &v276[4 * v272 - 16];
              v284 = v268 - 16;
              v285 = v280 & 0x7FFFFFFFFFFFFFF8;
              do
              {
                v286 = *(_OWORD *)v284;
                *(v283 - 1) = *((_OWORD *)v284 - 1);
                *v283 = v286;
                v283 -= 2;
                v284 -= 32;
                v285 -= 8;
              }
              while (v285);
              v268 = v282;
              if (v280 != (v280 & 0x7FFFFFFFFFFFFFF8))
              {
LABEL_925:
                do
                {
                  v287 = *((_DWORD *)v268 - 1);
                  v268 -= 4;
                  *--v277 = v287;
                }
                while (v268 != v270);
              }
              goto LABEL_320;
            }
LABEL_323:
            if (v835 != v827)
            {
              std::__sort<std::__less<unsigned int,unsigned int> &,unsigned int *>();
              v288 = (__n128 *)a1[78].i64[0];
              v289 = (char *)v288 + 4 * v819;
              v290 = (__n128 *)a1[78].i64[1];
              if (((char *)v290 - v289) >> 2 >= v819)
                v291 = v819;
              else
                v291 = ((char *)v290 - v289) >> 2;
              if (v291 < 1)
              {
LABEL_331:
                v294 = 0;
                v291 = 0;
              }
              else
              {
                v292 = (const std::nothrow_t *)MEMORY[0x24BEDB6B8];
                while (1)
                {
                  v293 = (char *)operator new(4 * v291, v292);
                  if (v293)
                    break;
                  v122 = (unint64_t)v291 > 1;
                  v291 = (unint64_t)v291 >> 1;
                  if (!v122)
                    goto LABEL_331;
                }
                v294 = v293;
              }
              sub_20EDB30B0(v288, (__n128 *)((char *)v288 + 4 * v819), v290, (uint64_t)&v856, v819, ((char *)v290 - v289) >> 2, v294, v291);
              if (v294)
                operator delete(v294);
            }
            v295 = a1[80].i64[0];
            v296 = a1[79].i64[1];
            std::__sort<std::__less<unsigned int,unsigned int> &,unsigned int *>();
            v852 = (void **)&a1[79].i64[1];
            v297 = (unsigned int *)a1[104].i64[0];
            v298 = (unsigned int *)a1[103].i64[1];
            v299 = ((v295 - v296) >> 2) + v297 - v298;
            v300 = (_BYTE *)a1[79].i64[1];
            v820 = (v295 - v296) >> 2;
            v828 = v296;
            v836 = v295;
            if (v299 <= (a1[80].i64[1] - (uint64_t)v300) >> 2)
            {
LABEL_347:
              if (v298 != v297)
              {
                v844 = v297;
                while (1)
                {
                  v317 = *v298;
                  v319 = a1[24].i64[1];
                  v318 = (unsigned int *)a1[25].i64[0];
                  if (v318 != (unsigned int *)v319)
                  {
                    v320 = ((uint64_t)v318 - v319) >> 4;
                    do
                    {
                      v321 = v320 >> 1;
                      v322 = (unsigned int *)(v319 + 16 * (v320 >> 1));
                      v324 = *v322;
                      v323 = v322 + 4;
                      v320 += ~(v320 >> 1);
                      if (v324 < v317)
                        v319 = (uint64_t)v323;
                      else
                        v320 = v321;
                    }
                    while (v320);
                  }
                  if ((unsigned int *)v319 == v318 || *(_DWORD *)v319 != v317)
                  {
                    v317 = *v318;
                    v319 = a1[25].i64[0];
                  }
                  if ((*(_BYTE *)(*(_QWORD *)(v319 + 8) + 4) & 6) != 0)
                    goto LABEL_351;
                  v325 = (char *)a1[80].i64[0];
                  v326 = a1[80].u64[1];
                  if ((unint64_t)v325 >= v326)
                    break;
                  *(_DWORD *)v325 = v317;
                  v316 = (uint64_t)(v325 + 4);
LABEL_350:
                  a1[80].i64[0] = v316;
                  *(_BYTE *)(*(_QWORD *)(v319 + 8) + 4) ^= 2u;
LABEL_351:
                  if (++v298 == v297)
                    goto LABEL_383;
                }
                v327 = (char *)*v852;
                v328 = v325 - (_BYTE *)*v852;
                v329 = v328 >> 2;
                v330 = (v328 >> 2) + 1;
                if (v330 >> 62)
                  goto LABEL_910;
                v331 = v326 - (_QWORD)v327;
                if (v331 >> 1 > v330)
                  v330 = v331 >> 1;
                if ((unint64_t)v331 >= 0x7FFFFFFFFFFFFFFCLL)
                  v332 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v332 = v330;
                if (v332)
                {
                  if (v332 >> 62)
                    goto LABEL_911;
                  v333 = operator new(4 * v332);
                  v334 = (unsigned int *)&v333[4 * v329];
                  *v334 = v317;
                  v316 = (uint64_t)(v334 + 1);
                  v335 = v325 - v327;
                  if (v325 == v327)
                    goto LABEL_380;
                }
                else
                {
                  v333 = 0;
                  v334 = (unsigned int *)(4 * v329);
                  *(_DWORD *)(4 * v329) = v317;
                  v316 = 4 * v329 + 4;
                  v335 = v325 - v327;
                  if (v325 == v327)
                  {
LABEL_380:
                    a1[79].i64[1] = (uint64_t)v334;
                    a1[80].i64[0] = v316;
                    a1[80].i64[1] = (uint64_t)&v333[4 * v332];
                    if (v327)
                      operator delete(v327);
                    v297 = v844;
                    goto LABEL_350;
                  }
                }
                v336 = v335 - 4;
                if (v336 < 0x2C)
                  goto LABEL_926;
                if ((unint64_t)(v325 - v333 - v328) < 0x20)
                  goto LABEL_926;
                v337 = (v336 >> 2) + 1;
                v338 = 4 * (v337 & 0x7FFFFFFFFFFFFFF8);
                v339 = &v325[-v338];
                v334 = (unsigned int *)((char *)v334 - v338);
                v340 = &v333[4 * v329 - 16];
                v341 = v325 - 16;
                v342 = v337 & 0x7FFFFFFFFFFFFFF8;
                do
                {
                  v343 = *(_OWORD *)v341;
                  *(v340 - 1) = *((_OWORD *)v341 - 1);
                  *v340 = v343;
                  v340 -= 2;
                  v341 -= 32;
                  v342 -= 8;
                }
                while (v342);
                v325 = v339;
                if (v337 != (v337 & 0x7FFFFFFFFFFFFFF8))
                {
LABEL_926:
                  do
                  {
                    v344 = *((_DWORD *)v325 - 1);
                    v325 -= 4;
                    *--v334 = v344;
                  }
                  while (v325 != v327);
                }
                goto LABEL_380;
              }
LABEL_383:
              if (v836 != v828)
              {
                std::__sort<std::__less<unsigned int,unsigned int> &,unsigned int *>();
                v345 = (__n128 *)a1[79].i64[1];
                v346 = (char *)v345 + 4 * v820;
                v347 = (__n128 *)a1[80].i64[0];
                if (((char *)v347 - v346) >> 2 >= v820)
                  v348 = v820;
                else
                  v348 = ((char *)v347 - v346) >> 2;
                if (v348 < 1)
                {
LABEL_391:
                  v351 = 0;
                  v348 = 0;
                }
                else
                {
                  v349 = (const std::nothrow_t *)MEMORY[0x24BEDB6B8];
                  while (1)
                  {
                    v350 = (char *)operator new(4 * v348, v349);
                    if (v350)
                      break;
                    v122 = (unint64_t)v348 > 1;
                    v348 = (unint64_t)v348 >> 1;
                    if (!v122)
                      goto LABEL_391;
                  }
                  v351 = v350;
                }
                sub_20EDB30B0(v345, (__n128 *)((char *)v345 + 4 * v820), v347, (uint64_t)&v856, v820, ((char *)v347 - v346) >> 2, v351, v348);
                if (v351)
                  operator delete(v351);
              }
              v352 = a1[81].i64[1];
              v353 = a1[81].i64[0];
              std::__sort<std::__less<unsigned int,unsigned int> &,unsigned int *>();
              v853 = (void **)&a1[81];
              v354 = (unsigned int *)a1[105].i64[1];
              v355 = (unsigned int *)a1[105].i64[0];
              v356 = ((v352 - v353) >> 2) + v354 - v355;
              v357 = (_BYTE *)a1[81].i64[0];
              v821 = (v352 - v353) >> 2;
              v829 = v353;
              v837 = v352;
              if (v356 <= (a1[82].i64[0] - (uint64_t)v357) >> 2)
              {
LABEL_407:
                if (v355 != v354)
                {
                  v845 = v354;
                  while (1)
                  {
                    v374 = *v355;
                    v376 = a1[30].i64[1];
                    v375 = (unsigned int *)a1[31].i64[0];
                    if (v375 != (unsigned int *)v376)
                    {
                      v377 = ((uint64_t)v375 - v376) >> 4;
                      do
                      {
                        v378 = v377 >> 1;
                        v379 = (unsigned int *)(v376 + 16 * (v377 >> 1));
                        v381 = *v379;
                        v380 = v379 + 4;
                        v377 += ~(v377 >> 1);
                        if (v381 < v374)
                          v376 = (uint64_t)v380;
                        else
                          v377 = v378;
                      }
                      while (v377);
                    }
                    if ((unsigned int *)v376 == v375 || *(_DWORD *)v376 != v374)
                    {
                      v374 = *v375;
                      v376 = a1[31].i64[0];
                    }
                    if ((*(_BYTE *)(*(_QWORD *)(v376 + 8) + 4) & 6) != 0)
                      goto LABEL_411;
                    v382 = (char *)a1[81].i64[1];
                    v383 = a1[82].u64[0];
                    if ((unint64_t)v382 >= v383)
                      break;
                    *(_DWORD *)v382 = v374;
                    v373 = (uint64_t)(v382 + 4);
LABEL_410:
                    a1[81].i64[1] = v373;
                    *(_BYTE *)(*(_QWORD *)(v376 + 8) + 4) ^= 2u;
LABEL_411:
                    if (++v355 == v354)
                      goto LABEL_443;
                  }
                  v384 = (char *)*v853;
                  v385 = v382 - (_BYTE *)*v853;
                  v386 = v385 >> 2;
                  v387 = (v385 >> 2) + 1;
                  if (v387 >> 62)
                    goto LABEL_910;
                  v388 = v383 - (_QWORD)v384;
                  if (v388 >> 1 > v387)
                    v387 = v388 >> 1;
                  if ((unint64_t)v388 >= 0x7FFFFFFFFFFFFFFCLL)
                    v389 = 0x3FFFFFFFFFFFFFFFLL;
                  else
                    v389 = v387;
                  if (v389)
                  {
                    if (v389 >> 62)
                      goto LABEL_911;
                    v390 = operator new(4 * v389);
                    v391 = (unsigned int *)&v390[4 * v386];
                    *v391 = v374;
                    v373 = (uint64_t)(v391 + 1);
                    v392 = v382 - v384;
                    if (v382 == v384)
                      goto LABEL_440;
                  }
                  else
                  {
                    v390 = 0;
                    v391 = (unsigned int *)(4 * v386);
                    *(_DWORD *)(4 * v386) = v374;
                    v373 = 4 * v386 + 4;
                    v392 = v382 - v384;
                    if (v382 == v384)
                    {
LABEL_440:
                      a1[81].i64[0] = (uint64_t)v391;
                      a1[81].i64[1] = v373;
                      a1[82].i64[0] = (uint64_t)&v390[4 * v389];
                      if (v384)
                        operator delete(v384);
                      v354 = v845;
                      goto LABEL_410;
                    }
                  }
                  v393 = v392 - 4;
                  if (v393 < 0x2C)
                    goto LABEL_927;
                  if ((unint64_t)(v382 - v390 - v385) < 0x20)
                    goto LABEL_927;
                  v394 = (v393 >> 2) + 1;
                  v395 = 4 * (v394 & 0x7FFFFFFFFFFFFFF8);
                  v396 = &v382[-v395];
                  v391 = (unsigned int *)((char *)v391 - v395);
                  v397 = &v390[4 * v386 - 16];
                  v398 = v382 - 16;
                  v399 = v394 & 0x7FFFFFFFFFFFFFF8;
                  do
                  {
                    v400 = *(_OWORD *)v398;
                    *(v397 - 1) = *((_OWORD *)v398 - 1);
                    *v397 = v400;
                    v397 -= 2;
                    v398 -= 32;
                    v399 -= 8;
                  }
                  while (v399);
                  v382 = v396;
                  if (v394 != (v394 & 0x7FFFFFFFFFFFFFF8))
                  {
LABEL_927:
                    do
                    {
                      v401 = *((_DWORD *)v382 - 1);
                      v382 -= 4;
                      *--v391 = v401;
                    }
                    while (v382 != v384);
                  }
                  goto LABEL_440;
                }
LABEL_443:
                if (v837 != v829)
                {
                  std::__sort<std::__less<unsigned int,unsigned int> &,unsigned int *>();
                  v402 = (__n128 *)a1[81].i64[0];
                  v403 = (char *)v402 + 4 * v821;
                  v404 = (__n128 *)a1[81].i64[1];
                  if (((char *)v404 - v403) >> 2 >= v821)
                    v405 = v821;
                  else
                    v405 = ((char *)v404 - v403) >> 2;
                  if (v405 < 1)
                  {
LABEL_451:
                    v408 = 0;
                    v405 = 0;
                  }
                  else
                  {
                    v406 = (const std::nothrow_t *)MEMORY[0x24BEDB6B8];
                    while (1)
                    {
                      v407 = (char *)operator new(4 * v405, v406);
                      if (v407)
                        break;
                      v122 = (unint64_t)v405 > 1;
                      v405 = (unint64_t)v405 >> 1;
                      if (!v122)
                        goto LABEL_451;
                    }
                    v408 = v407;
                  }
                  sub_20EDB30B0(v402, (__n128 *)((char *)v402 + 4 * v821), v404, (uint64_t)&v856, v821, ((char *)v404 - v403) >> 2, v408, v405);
                  if (v408)
                    operator delete(v408);
                }
                v409 = a1[83].i64[0];
                v410 = a1[82].i64[1];
                std::__sort<std::__less<unsigned int,unsigned int> &,unsigned int *>();
                v854 = (void **)&a1[82].i64[1];
                v411 = (unsigned int *)a1[107].i64[0];
                v412 = (unsigned int *)a1[106].i64[1];
                v413 = ((v409 - v410) >> 2) + v411 - v412;
                v414 = (_BYTE *)a1[82].i64[1];
                v822 = (v409 - v410) >> 2;
                v830 = v410;
                v838 = v409;
                if (v413 <= (a1[83].i64[1] - (uint64_t)v414) >> 2)
                {
LABEL_467:
                  if (v412 != v411)
                  {
                    v846 = v411;
                    while (1)
                    {
                      v431 = *v412;
                      v432 = a1[36].i64[1];
                      v433 = (unsigned int *)a1[37].i64[0];
                      if (v433 != (unsigned int *)v432)
                      {
                        v434 = ((uint64_t)v433 - v432) >> 4;
                        do
                        {
                          v435 = v434 >> 1;
                          v436 = (unsigned int *)(v432 + 16 * (v434 >> 1));
                          v438 = *v436;
                          v437 = v436 + 4;
                          v434 += ~(v434 >> 1);
                          if (v438 < v431)
                            v432 = (uint64_t)v437;
                          else
                            v434 = v435;
                        }
                        while (v434);
                      }
                      if ((unsigned int *)v432 == v433 || *(_DWORD *)v432 != v431)
                      {
                        v431 = *v433;
                        v432 = a1[37].i64[0];
                      }
                      if ((*(_BYTE *)(*(_QWORD *)(v432 + 8) + 4) & 6) != 0)
                        goto LABEL_471;
                      v439 = (char *)a1[83].i64[0];
                      v440 = a1[83].u64[1];
                      if ((unint64_t)v439 >= v440)
                        break;
                      *(_DWORD *)v439 = v431;
                      v430 = (uint64_t)(v439 + 4);
LABEL_470:
                      a1[83].i64[0] = v430;
                      *(_BYTE *)(*(_QWORD *)(v432 + 8) + 4) ^= 2u;
LABEL_471:
                      if (++v412 == v411)
                        goto LABEL_503;
                    }
                    v441 = (char *)*v854;
                    v442 = v439 - (_BYTE *)*v854;
                    v443 = v442 >> 2;
                    v444 = (v442 >> 2) + 1;
                    if (v444 >> 62)
                      goto LABEL_910;
                    v445 = v440 - (_QWORD)v441;
                    if (v445 >> 1 > v444)
                      v444 = v445 >> 1;
                    if ((unint64_t)v445 >= 0x7FFFFFFFFFFFFFFCLL)
                      v446 = 0x3FFFFFFFFFFFFFFFLL;
                    else
                      v446 = v444;
                    if (v446)
                    {
                      if (v446 >> 62)
                        goto LABEL_911;
                      v447 = operator new(4 * v446);
                      v448 = (unsigned int *)&v447[4 * v443];
                      *v448 = v431;
                      v430 = (uint64_t)(v448 + 1);
                      v449 = v439 - v441;
                      if (v439 == v441)
                        goto LABEL_500;
                    }
                    else
                    {
                      v447 = 0;
                      v448 = (unsigned int *)(4 * v443);
                      *(_DWORD *)(4 * v443) = v431;
                      v430 = 4 * v443 + 4;
                      v449 = v439 - v441;
                      if (v439 == v441)
                      {
LABEL_500:
                        a1[82].i64[1] = (uint64_t)v448;
                        a1[83].i64[0] = v430;
                        a1[83].i64[1] = (uint64_t)&v447[4 * v446];
                        if (v441)
                          operator delete(v441);
                        v411 = v846;
                        goto LABEL_470;
                      }
                    }
                    v450 = v449 - 4;
                    if (v450 < 0x2C)
                      goto LABEL_928;
                    if ((unint64_t)(v439 - v447 - v442) < 0x20)
                      goto LABEL_928;
                    v451 = (v450 >> 2) + 1;
                    v452 = 4 * (v451 & 0x7FFFFFFFFFFFFFF8);
                    v453 = &v439[-v452];
                    v448 = (unsigned int *)((char *)v448 - v452);
                    v454 = &v447[4 * v443 - 16];
                    v455 = v439 - 16;
                    v456 = v451 & 0x7FFFFFFFFFFFFFF8;
                    do
                    {
                      v457 = *(_OWORD *)v455;
                      *(v454 - 1) = *((_OWORD *)v455 - 1);
                      *v454 = v457;
                      v454 -= 2;
                      v455 -= 32;
                      v456 -= 8;
                    }
                    while (v456);
                    v439 = v453;
                    if (v451 != (v451 & 0x7FFFFFFFFFFFFFF8))
                    {
LABEL_928:
                      do
                      {
                        v458 = *((_DWORD *)v439 - 1);
                        v439 -= 4;
                        *--v448 = v458;
                      }
                      while (v439 != v441);
                    }
                    goto LABEL_500;
                  }
LABEL_503:
                  if (v838 != v830)
                  {
                    std::__sort<std::__less<unsigned int,unsigned int> &,unsigned int *>();
                    v459 = (__n128 *)a1[82].i64[1];
                    v460 = (char *)v459 + 4 * v822;
                    v461 = (__n128 *)a1[83].i64[0];
                    if (((char *)v461 - v460) >> 2 >= v822)
                      v462 = v822;
                    else
                      v462 = ((char *)v461 - v460) >> 2;
                    if (v462 < 1)
                    {
LABEL_511:
                      v465 = 0;
                      v462 = 0;
                    }
                    else
                    {
                      v463 = (const std::nothrow_t *)MEMORY[0x24BEDB6B8];
                      while (1)
                      {
                        v464 = (char *)operator new(4 * v462, v463);
                        if (v464)
                          break;
                        v122 = (unint64_t)v462 > 1;
                        v462 = (unint64_t)v462 >> 1;
                        if (!v122)
                          goto LABEL_511;
                      }
                      v465 = v464;
                    }
                    sub_20EDB30B0(v459, (__n128 *)((char *)v459 + 4 * v822), v461, (uint64_t)&v856, v822, ((char *)v461 - v460) >> 2, v465, v462);
                    if (v465)
                      operator delete(v465);
                  }
                  v466 = a1[84].i64[1];
                  v467 = a1[84].i64[0];
                  std::__sort<std::__less<unsigned int,unsigned int> &,unsigned int *>();
                  v855 = (void **)&a1[84];
                  v468 = (unsigned int *)a1[108].i64[1];
                  v469 = (unsigned int *)a1[108].i64[0];
                  v470 = ((v466 - v467) >> 2) + v468 - v469;
                  v471 = (_BYTE *)a1[84].i64[0];
                  v823 = (v466 - v467) >> 2;
                  v831 = v467;
                  v839 = v466;
                  if (v470 <= (a1[85].i64[0] - (uint64_t)v471) >> 2)
                    goto LABEL_527;
                  if (!(v470 >> 62))
                  {
                    v472 = a1[108].i64[1];
                    v473 = (_BYTE *)a1[84].i64[1];
                    v474 = (char *)operator new(4 * v470);
                    v475 = v473 - v471;
                    v476 = &v474[(v473 - v471) & 0xFFFFFFFFFFFFFFFCLL];
                    v477 = v476;
                    if (v473 == v471)
                      goto LABEL_525;
                    if ((unint64_t)(v475 - 4) >= 0x2C)
                    {
                      v477 = &v474[(v473 - v471) & 0xFFFFFFFFFFFFFFFCLL];
                      if ((unint64_t)(&v473[-(v475 & 0xFFFFFFFFFFFFFFFCLL)] - v474) >= 0x20)
                      {
                        v478 = v475 >> 2;
                        v479 = ((unint64_t)(v475 - 4) >> 2) + 1;
                        v480 = 4 * (v479 & 0x7FFFFFFFFFFFFFF8);
                        v481 = &v473[-v480];
                        v477 = &v476[-v480];
                        v482 = &v474[4 * v478 - 16];
                        v483 = (__int128 *)(v473 - 16);
                        v484 = v479 & 0x7FFFFFFFFFFFFFF8;
                        do
                        {
                          v485 = *v483;
                          *((_OWORD *)v482 - 1) = *(v483 - 1);
                          *(_OWORD *)v482 = v485;
                          v482 -= 32;
                          v483 -= 2;
                          v484 -= 8;
                        }
                        while (v484);
                        v473 = v481;
                        if (v479 == (v479 & 0x7FFFFFFFFFFFFFF8))
                        {
LABEL_525:
                          a1[84].i64[0] = (uint64_t)v477;
                          a1[84].i64[1] = (uint64_t)v476;
                          a1[85].i64[0] = (uint64_t)&v474[4 * v470];
                          v468 = (unsigned int *)v472;
                          if (v471)
                          {
                            operator delete(v471);
                            v469 = (unsigned int *)a1[108].i64[0];
                            v468 = (unsigned int *)a1[108].i64[1];
                          }
LABEL_527:
                          if (v469 != v468)
                          {
                            v847 = v468;
                            while (1)
                            {
                              v488 = *v469;
                              v489 = a1[42].i64[1];
                              v490 = (unsigned int *)a1[43].i64[0];
                              if (v490 != (unsigned int *)v489)
                              {
                                v491 = ((uint64_t)v490 - v489) >> 4;
                                do
                                {
                                  v492 = v491 >> 1;
                                  v493 = (unsigned int *)(v489 + 16 * (v491 >> 1));
                                  v495 = *v493;
                                  v494 = v493 + 4;
                                  v491 += ~(v491 >> 1);
                                  if (v495 < v488)
                                    v489 = (uint64_t)v494;
                                  else
                                    v491 = v492;
                                }
                                while (v491);
                              }
                              if ((unsigned int *)v489 == v490 || *(_DWORD *)v489 != v488)
                              {
                                v488 = *v490;
                                v489 = a1[43].i64[0];
                              }
                              if ((*(_BYTE *)(*(_QWORD *)(v489 + 8) + 4) & 6) != 0)
                                goto LABEL_531;
                              v496 = (char *)a1[84].i64[1];
                              v497 = a1[85].u64[0];
                              if ((unint64_t)v496 >= v497)
                                break;
                              *(_DWORD *)v496 = v488;
                              v487 = (uint64_t)(v496 + 4);
LABEL_530:
                              a1[84].i64[1] = v487;
                              *(_BYTE *)(*(_QWORD *)(v489 + 8) + 4) ^= 2u;
LABEL_531:
                              if (++v469 == v468)
                                goto LABEL_563;
                            }
                            v498 = (char *)*v855;
                            v499 = v496 - (_BYTE *)*v855;
                            v500 = v499 >> 2;
                            v501 = (v499 >> 2) + 1;
                            if (v501 >> 62)
                              goto LABEL_910;
                            v502 = v497 - (_QWORD)v498;
                            if (v502 >> 1 > v501)
                              v501 = v502 >> 1;
                            if ((unint64_t)v502 >= 0x7FFFFFFFFFFFFFFCLL)
                              v503 = 0x3FFFFFFFFFFFFFFFLL;
                            else
                              v503 = v501;
                            if (v503)
                            {
                              if (v503 >> 62)
                                goto LABEL_911;
                              v504 = operator new(4 * v503);
                              v505 = (unsigned int *)&v504[4 * v500];
                              *v505 = v488;
                              v487 = (uint64_t)(v505 + 1);
                              v506 = v496 - v498;
                              if (v496 == v498)
                                goto LABEL_560;
                            }
                            else
                            {
                              v504 = 0;
                              v505 = (unsigned int *)(4 * v500);
                              *(_DWORD *)(4 * v500) = v488;
                              v487 = 4 * v500 + 4;
                              v506 = v496 - v498;
                              if (v496 == v498)
                              {
LABEL_560:
                                a1[84].i64[0] = (uint64_t)v505;
                                a1[84].i64[1] = v487;
                                a1[85].i64[0] = (uint64_t)&v504[4 * v503];
                                if (v498)
                                  operator delete(v498);
                                v468 = v847;
                                goto LABEL_530;
                              }
                            }
                            v507 = v506 - 4;
                            if (v507 < 0x2C)
                              goto LABEL_929;
                            if ((unint64_t)(v496 - v504 - v499) < 0x20)
                              goto LABEL_929;
                            v508 = (v507 >> 2) + 1;
                            v509 = 4 * (v508 & 0x7FFFFFFFFFFFFFF8);
                            v510 = &v496[-v509];
                            v505 = (unsigned int *)((char *)v505 - v509);
                            v511 = &v504[4 * v500 - 16];
                            v512 = v496 - 16;
                            v513 = v508 & 0x7FFFFFFFFFFFFFF8;
                            do
                            {
                              v514 = *(_OWORD *)v512;
                              *(v511 - 1) = *((_OWORD *)v512 - 1);
                              *v511 = v514;
                              v511 -= 2;
                              v512 -= 32;
                              v513 -= 8;
                            }
                            while (v513);
                            v496 = v510;
                            if (v508 != (v508 & 0x7FFFFFFFFFFFFFF8))
                            {
LABEL_929:
                              do
                              {
                                v515 = *((_DWORD *)v496 - 1);
                                v496 -= 4;
                                *--v505 = v515;
                              }
                              while (v496 != v498);
                            }
                            goto LABEL_560;
                          }
LABEL_563:
                          if (v839 != v831)
                          {
                            std::__sort<std::__less<unsigned int,unsigned int> &,unsigned int *>();
                            v516 = (__n128 *)a1[84].i64[0];
                            v517 = (char *)v516 + 4 * v823;
                            v518 = (__n128 *)a1[84].i64[1];
                            if (((char *)v518 - v517) >> 2 >= v823)
                              v519 = v823;
                            else
                              v519 = ((char *)v518 - v517) >> 2;
                            if (v519 < 1)
                            {
LABEL_571:
                              v522 = 0;
                              v519 = 0;
                            }
                            else
                            {
                              v520 = (const std::nothrow_t *)MEMORY[0x24BEDB6B8];
                              while (1)
                              {
                                v521 = (char *)operator new(4 * v519, v520);
                                if (v521)
                                  break;
                                v122 = (unint64_t)v519 > 1;
                                v519 = (unint64_t)v519 >> 1;
                                if (!v122)
                                  goto LABEL_571;
                              }
                              v522 = v521;
                            }
                            sub_20EDB30B0(v516, (__n128 *)((char *)v516 + 4 * v823), v518, (uint64_t)&v856, v823, ((char *)v518 - v517) >> 2, v522, v519);
                            if (v522)
                              operator delete(v522);
                          }
                          sub_20F59A618(a1);
                          goto LABEL_576;
                        }
                      }
                    }
                    else
                    {
                      v477 = &v474[(v473 - v471) & 0xFFFFFFFFFFFFFFFCLL];
                    }
                    do
                    {
                      v486 = *((_DWORD *)v473 - 1);
                      v473 -= 4;
                      *((_DWORD *)v477 - 1) = v486;
                      v477 -= 4;
                    }
                    while (v473 != v471);
                    goto LABEL_525;
                  }
LABEL_910:
                  sub_20E867F44();
                }
                if (v413 >> 62)
                  goto LABEL_910;
                v415 = a1[107].i64[0];
                v416 = (_BYTE *)a1[83].i64[0];
                v417 = (char *)operator new(4 * v413);
                v418 = v416 - v414;
                v419 = &v417[(v416 - v414) & 0xFFFFFFFFFFFFFFFCLL];
                v420 = v419;
                if (v416 != v414)
                {
                  if ((unint64_t)(v418 - 4) < 0x2C)
                  {
                    v420 = &v417[(v416 - v414) & 0xFFFFFFFFFFFFFFFCLL];
                    do
                    {
LABEL_464:
                      v429 = *((_DWORD *)v416 - 1);
                      v416 -= 4;
                      *((_DWORD *)v420 - 1) = v429;
                      v420 -= 4;
                    }
                    while (v416 != v414);
                    goto LABEL_465;
                  }
                  v420 = &v417[(v416 - v414) & 0xFFFFFFFFFFFFFFFCLL];
                  if ((unint64_t)(&v416[-(v418 & 0xFFFFFFFFFFFFFFFCLL)] - v417) < 0x20)
                    goto LABEL_464;
                  v421 = v418 >> 2;
                  v422 = ((unint64_t)(v418 - 4) >> 2) + 1;
                  v423 = 4 * (v422 & 0x7FFFFFFFFFFFFFF8);
                  v424 = &v416[-v423];
                  v420 = &v419[-v423];
                  v425 = &v417[4 * v421 - 16];
                  v426 = (__int128 *)(v416 - 16);
                  v427 = v422 & 0x7FFFFFFFFFFFFFF8;
                  do
                  {
                    v428 = *v426;
                    *((_OWORD *)v425 - 1) = *(v426 - 1);
                    *(_OWORD *)v425 = v428;
                    v425 -= 32;
                    v426 -= 2;
                    v427 -= 8;
                  }
                  while (v427);
                  v416 = v424;
                  if (v422 != (v422 & 0x7FFFFFFFFFFFFFF8))
                    goto LABEL_464;
                }
LABEL_465:
                a1[82].i64[1] = (uint64_t)v420;
                a1[83].i64[0] = (uint64_t)v419;
                a1[83].i64[1] = (uint64_t)&v417[4 * v413];
                v411 = (unsigned int *)v415;
                if (v414)
                {
                  operator delete(v414);
                  v412 = (unsigned int *)a1[106].i64[1];
                  v411 = (unsigned int *)a1[107].i64[0];
                }
                goto LABEL_467;
              }
              if (v356 >> 62)
                goto LABEL_910;
              v358 = a1[105].i64[1];
              v359 = (_BYTE *)a1[81].i64[1];
              v360 = (char *)operator new(4 * v356);
              v361 = v359 - v357;
              v362 = &v360[(v359 - v357) & 0xFFFFFFFFFFFFFFFCLL];
              v363 = v362;
              if (v359 != v357)
              {
                if ((unint64_t)(v361 - 4) < 0x2C)
                {
                  v363 = &v360[(v359 - v357) & 0xFFFFFFFFFFFFFFFCLL];
                  do
                  {
LABEL_404:
                    v372 = *((_DWORD *)v359 - 1);
                    v359 -= 4;
                    *((_DWORD *)v363 - 1) = v372;
                    v363 -= 4;
                  }
                  while (v359 != v357);
                  goto LABEL_405;
                }
                v363 = &v360[(v359 - v357) & 0xFFFFFFFFFFFFFFFCLL];
                if ((unint64_t)(&v359[-(v361 & 0xFFFFFFFFFFFFFFFCLL)] - v360) < 0x20)
                  goto LABEL_404;
                v364 = v361 >> 2;
                v365 = ((unint64_t)(v361 - 4) >> 2) + 1;
                v366 = 4 * (v365 & 0x7FFFFFFFFFFFFFF8);
                v367 = &v359[-v366];
                v363 = &v362[-v366];
                v368 = &v360[4 * v364 - 16];
                v369 = (__int128 *)(v359 - 16);
                v370 = v365 & 0x7FFFFFFFFFFFFFF8;
                do
                {
                  v371 = *v369;
                  *((_OWORD *)v368 - 1) = *(v369 - 1);
                  *(_OWORD *)v368 = v371;
                  v368 -= 32;
                  v369 -= 2;
                  v370 -= 8;
                }
                while (v370);
                v359 = v367;
                if (v365 != (v365 & 0x7FFFFFFFFFFFFFF8))
                  goto LABEL_404;
              }
LABEL_405:
              a1[81].i64[0] = (uint64_t)v363;
              a1[81].i64[1] = (uint64_t)v362;
              a1[82].i64[0] = (uint64_t)&v360[4 * v356];
              v354 = (unsigned int *)v358;
              if (v357)
              {
                operator delete(v357);
                v355 = (unsigned int *)a1[105].i64[0];
                v354 = (unsigned int *)a1[105].i64[1];
              }
              goto LABEL_407;
            }
            if (v299 >> 62)
              goto LABEL_910;
            v301 = a1[104].i64[0];
            v302 = (_BYTE *)a1[80].i64[0];
            v303 = (char *)operator new(4 * v299);
            v304 = v302 - v300;
            v305 = &v303[(v302 - v300) & 0xFFFFFFFFFFFFFFFCLL];
            v306 = v305;
            if (v302 != v300)
            {
              if ((unint64_t)(v304 - 4) < 0x2C)
              {
                v306 = &v303[(v302 - v300) & 0xFFFFFFFFFFFFFFFCLL];
                do
                {
LABEL_344:
                  v315 = *((_DWORD *)v302 - 1);
                  v302 -= 4;
                  *((_DWORD *)v306 - 1) = v315;
                  v306 -= 4;
                }
                while (v302 != v300);
                goto LABEL_345;
              }
              v306 = &v303[(v302 - v300) & 0xFFFFFFFFFFFFFFFCLL];
              if ((unint64_t)(&v302[-(v304 & 0xFFFFFFFFFFFFFFFCLL)] - v303) < 0x20)
                goto LABEL_344;
              v307 = v304 >> 2;
              v308 = ((unint64_t)(v304 - 4) >> 2) + 1;
              v309 = 4 * (v308 & 0x7FFFFFFFFFFFFFF8);
              v310 = &v302[-v309];
              v306 = &v305[-v309];
              v311 = &v303[4 * v307 - 16];
              v312 = (__int128 *)(v302 - 16);
              v313 = v308 & 0x7FFFFFFFFFFFFFF8;
              do
              {
                v314 = *v312;
                *((_OWORD *)v311 - 1) = *(v312 - 1);
                *(_OWORD *)v311 = v314;
                v311 -= 32;
                v312 -= 2;
                v313 -= 8;
              }
              while (v313);
              v302 = v310;
              if (v308 != (v308 & 0x7FFFFFFFFFFFFFF8))
                goto LABEL_344;
            }
LABEL_345:
            a1[79].i64[1] = (uint64_t)v306;
            a1[80].i64[0] = (uint64_t)v305;
            a1[80].i64[1] = (uint64_t)&v303[4 * v299];
            v297 = (unsigned int *)v301;
            if (v300)
            {
              operator delete(v300);
              v298 = (unsigned int *)a1[103].i64[1];
              v297 = (unsigned int *)a1[104].i64[0];
            }
            goto LABEL_347;
          }
          if (v242 >> 62)
            goto LABEL_910;
          v244 = a1[102].i64[1];
          v245 = (_BYTE *)a1[78].i64[1];
          v246 = (char *)operator new(4 * v242);
          v247 = v245 - v243;
          v248 = &v246[(v245 - v243) & 0xFFFFFFFFFFFFFFFCLL];
          v249 = v248;
          if (v245 != v243)
          {
            if ((unint64_t)(v247 - 4) < 0x2C)
            {
              v249 = &v246[(v245 - v243) & 0xFFFFFFFFFFFFFFFCLL];
              do
              {
LABEL_284:
                v258 = *((_DWORD *)v245 - 1);
                v245 -= 4;
                *((_DWORD *)v249 - 1) = v258;
                v249 -= 4;
              }
              while (v245 != v243);
              goto LABEL_285;
            }
            v249 = &v246[(v245 - v243) & 0xFFFFFFFFFFFFFFFCLL];
            if ((unint64_t)(&v245[-(v247 & 0xFFFFFFFFFFFFFFFCLL)] - v246) < 0x20)
              goto LABEL_284;
            v250 = v247 >> 2;
            v251 = ((unint64_t)(v247 - 4) >> 2) + 1;
            v252 = 4 * (v251 & 0x7FFFFFFFFFFFFFF8);
            v253 = &v245[-v252];
            v249 = &v248[-v252];
            v254 = &v246[4 * v250 - 16];
            v255 = (__int128 *)(v245 - 16);
            v256 = v251 & 0x7FFFFFFFFFFFFFF8;
            do
            {
              v257 = *v255;
              *((_OWORD *)v254 - 1) = *(v255 - 1);
              *(_OWORD *)v254 = v257;
              v254 -= 32;
              v255 -= 2;
              v256 -= 8;
            }
            while (v256);
            v245 = v253;
            if (v251 != (v251 & 0x7FFFFFFFFFFFFFF8))
              goto LABEL_284;
          }
LABEL_285:
          a1[78].i64[0] = (uint64_t)v249;
          a1[78].i64[1] = (uint64_t)v248;
          a1[79].i64[0] = (uint64_t)&v246[4 * v242];
          v240 = (unsigned int *)v244;
          if (v243)
          {
            operator delete(v243);
            v241 = (unsigned int *)a1[102].i64[0];
            v240 = (unsigned int *)a1[102].i64[1];
          }
          goto LABEL_287;
        }
        if (v185 >> 62)
          goto LABEL_910;
        v187 = a1[101].i64[0];
        v188 = (_BYTE *)a1[77].i64[0];
        v189 = (char *)operator new(4 * v185);
        v190 = v188 - v186;
        v191 = &v189[(v188 - v186) & 0xFFFFFFFFFFFFFFFCLL];
        v192 = v191;
        if (v188 != v186)
        {
          if ((unint64_t)(v190 - 4) < 0x2C)
          {
            v192 = &v189[(v188 - v186) & 0xFFFFFFFFFFFFFFFCLL];
            do
            {
LABEL_224:
              v201 = *((_DWORD *)v188 - 1);
              v188 -= 4;
              *((_DWORD *)v192 - 1) = v201;
              v192 -= 4;
            }
            while (v188 != v186);
            goto LABEL_225;
          }
          v192 = &v189[(v188 - v186) & 0xFFFFFFFFFFFFFFFCLL];
          if ((unint64_t)(&v188[-(v190 & 0xFFFFFFFFFFFFFFFCLL)] - v189) < 0x20)
            goto LABEL_224;
          v193 = v190 >> 2;
          v194 = ((unint64_t)(v190 - 4) >> 2) + 1;
          v195 = 4 * (v194 & 0x7FFFFFFFFFFFFFF8);
          v196 = &v188[-v195];
          v192 = &v191[-v195];
          v197 = &v189[4 * v193 - 16];
          v198 = (__int128 *)(v188 - 16);
          v199 = v194 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            v200 = *v198;
            *((_OWORD *)v197 - 1) = *(v198 - 1);
            *(_OWORD *)v197 = v200;
            v197 -= 32;
            v198 -= 2;
            v199 -= 8;
          }
          while (v199);
          v188 = v196;
          if (v194 != (v194 & 0x7FFFFFFFFFFFFFF8))
            goto LABEL_224;
        }
LABEL_225:
        a1[76].i64[1] = (uint64_t)v192;
        a1[77].i64[0] = (uint64_t)v191;
        a1[77].i64[1] = (uint64_t)&v189[4 * v185];
        v183 = (unsigned int *)v187;
        if (v186)
        {
          operator delete(v186);
          v184 = (unsigned int *)a1[100].i64[1];
          v183 = (unsigned int *)a1[101].i64[0];
        }
        goto LABEL_227;
      }
      if (v128 >> 62)
        goto LABEL_910;
      v130 = a1[99].i64[1];
      v131 = (_BYTE *)a1[75].i64[1];
      v132 = (char *)operator new(4 * v128);
      v133 = v131 - v129;
      v134 = &v132[(v131 - v129) & 0xFFFFFFFFFFFFFFFCLL];
      v135 = v134;
      if (v131 != v129)
      {
        if ((unint64_t)(v133 - 4) < 0x2C)
        {
          v135 = &v132[(v131 - v129) & 0xFFFFFFFFFFFFFFFCLL];
          do
          {
LABEL_164:
            v144 = *((_DWORD *)v131 - 1);
            v131 -= 4;
            *((_DWORD *)v135 - 1) = v144;
            v135 -= 4;
          }
          while (v131 != v129);
          goto LABEL_165;
        }
        v135 = &v132[(v131 - v129) & 0xFFFFFFFFFFFFFFFCLL];
        if ((unint64_t)(&v131[-(v133 & 0xFFFFFFFFFFFFFFFCLL)] - v132) < 0x20)
          goto LABEL_164;
        v136 = v133 >> 2;
        v137 = ((unint64_t)(v133 - 4) >> 2) + 1;
        v138 = 4 * (v137 & 0x7FFFFFFFFFFFFFF8);
        v139 = &v131[-v138];
        v135 = &v134[-v138];
        v140 = &v132[4 * v136 - 16];
        v141 = (__int128 *)(v131 - 16);
        v142 = v137 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          v143 = *v141;
          *((_OWORD *)v140 - 1) = *(v141 - 1);
          *(_OWORD *)v140 = v143;
          v140 -= 32;
          v141 -= 2;
          v142 -= 8;
        }
        while (v142);
        v131 = v139;
        if (v137 != (v137 & 0x7FFFFFFFFFFFFFF8))
          goto LABEL_164;
      }
LABEL_165:
      a1[75].i64[0] = (uint64_t)v135;
      a1[75].i64[1] = (uint64_t)v134;
      a1[76].i64[0] = (uint64_t)&v132[4 * v128];
      v126 = (unsigned int *)v130;
      if (v129)
      {
        operator delete(v129);
        v127 = (unsigned int *)a1[99].i64[0];
        v126 = (unsigned int *)a1[99].i64[1];
      }
      goto LABEL_167;
    }
    if (v70 >> 62)
      goto LABEL_910;
    v72 = a1[98].i64[0];
    v73 = (_BYTE *)a1[74].i64[0];
    v74 = (char *)operator new(4 * v70);
    v75 = v73 - v71;
    v76 = &v74[(v73 - v71) & 0xFFFFFFFFFFFFFFFCLL];
    v77 = v76;
    if (v73 != v71)
    {
      if ((unint64_t)(v75 - 4) < 0x2C)
      {
        v77 = &v74[(v73 - v71) & 0xFFFFFFFFFFFFFFFCLL];
        do
        {
LABEL_104:
          v86 = *((_DWORD *)v73 - 1);
          v73 -= 4;
          *((_DWORD *)v77 - 1) = v86;
          v77 -= 4;
        }
        while (v73 != v71);
        goto LABEL_105;
      }
      v77 = &v74[(v73 - v71) & 0xFFFFFFFFFFFFFFFCLL];
      if ((unint64_t)(v73 - &v74[v75 & 0xFFFFFFFFFFFFFFFCLL]) < 0x20)
        goto LABEL_104;
      v78 = v75 >> 2;
      v79 = ((unint64_t)(v75 - 4) >> 2) + 1;
      v80 = 4 * (v79 & 0x7FFFFFFFFFFFFFF8);
      v81 = &v73[-v80];
      v77 = &v76[-v80];
      v82 = &v74[4 * v78 - 16];
      v83 = (__int128 *)(v73 - 16);
      v84 = v79 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        v85 = *v83;
        *((_OWORD *)v82 - 1) = *(v83 - 1);
        *(_OWORD *)v82 = v85;
        v82 -= 32;
        v83 -= 2;
        v84 -= 8;
      }
      while (v84);
      v73 = v81;
      if (v79 != (v79 & 0x7FFFFFFFFFFFFFF8))
        goto LABEL_104;
    }
LABEL_105:
    a1[73].i64[1] = (uint64_t)v77;
    a1[74].i64[0] = (uint64_t)v76;
    a1[74].i64[1] = (uint64_t)&v74[4 * v70];
    v68 = (unsigned int *)v72;
    if (v71)
    {
      operator delete(v71);
      v69 = (unsigned int *)a1[97].i64[1];
      v68 = (unsigned int *)a1[98].i64[0];
    }
    goto LABEL_107;
  }
LABEL_577:
  if (!a1[61].i8[1])
    goto LABEL_757;
  v523 = a1[48].i64[1];
  v524 = a1[49].i64[0];
  if (v523 == v524)
    goto LABEL_600;
  v525 = a1[49].i64[0];
  while (!*(_BYTE *)(v523 + 496))
  {
    v523 += 504;
    if (v523 == v524)
      goto LABEL_601;
  }
  --*(_DWORD *)(*(_QWORD *)(v523 + 208) + 8);
  --*(_DWORD *)(*(_QWORD *)(v523 + 216) + 8);
  *(_QWORD *)(v523 + 208) = 0;
  *(_QWORD *)(v523 + 216) = 0;
  v526 = (int64x2_t)xmmword_2103B4950;
  a1[60] = vaddq_s64(a1[60], (int64x2_t)xmmword_2103B4950);
  if (v523 != v524)
  {
    v527 = (_QWORD *)(v523 + 504);
    if (v523 + 504 != v524)
    {
      v525 = v523;
      do
      {
        while (1)
        {
          v528 = v527;
          v529 = (__int128 *)(v523 + 696);
          if (!*(_BYTE *)(v523 + 1000))
            break;
          --*(_DWORD *)(*(_QWORD *)(v523 + 712) + 8);
          --*(_DWORD *)(*(_QWORD *)(v523 + 720) + 8);
          *(_QWORD *)(v523 + 712) = 0;
          *(_QWORD *)(v523 + 720) = 0;
          a1[60] = vaddq_s64(a1[60], v526);
          v527 += 63;
          v523 = (uint64_t)v528;
          if (v528 + 63 == (_QWORD *)v524)
            goto LABEL_601;
        }
        *(_QWORD *)v525 = *v527;
        *(_OWORD *)(v525 + 8) = *(_OWORD *)(v523 + 512);
        v530 = *(_OWORD *)(v523 + 608);
        v531 = *(_OWORD *)(v523 + 624);
        v532 = *(_OWORD *)(v523 + 592);
        *(_OWORD *)(v525 + 72) = *(_OWORD *)(v523 + 576);
        *(_OWORD *)(v525 + 120) = v531;
        *(_OWORD *)(v525 + 104) = v530;
        *(_OWORD *)(v525 + 88) = v532;
        v534 = *(_OWORD *)(v523 + 656);
        v533 = *(_OWORD *)(v523 + 672);
        v535 = *(_QWORD *)(v523 + 688);
        *(_OWORD *)(v525 + 136) = *(_OWORD *)(v523 + 640);
        *(_QWORD *)(v525 + 184) = v535;
        *(_OWORD *)(v525 + 168) = v533;
        *(_OWORD *)(v525 + 152) = v534;
        v536 = *(_OWORD *)(v523 + 528);
        v537 = *(_OWORD *)(v523 + 544);
        *(_OWORD *)(v525 + 56) = *(_OWORD *)(v523 + 560);
        *(_OWORD *)(v525 + 40) = v537;
        *(_OWORD *)(v525 + 24) = v536;
        v538 = *v529;
        *(_QWORD *)v529 = 0;
        *(_QWORD *)(v523 + 704) = 0;
        v539 = *(std::__shared_weak_count **)(v525 + 200);
        *(_OWORD *)(v525 + 192) = v538;
        if (v539)
        {
          p_shared_owners = (unint64_t *)&v539->__shared_owners_;
          do
            v541 = __ldaxr(p_shared_owners);
          while (__stlxr(v541 - 1, p_shared_owners));
          if (!v541)
          {
            ((void (*)(std::__shared_weak_count *))v539->__on_zero_shared)(v539);
            std::__shared_weak_count::__release_weak(v539);
            v526 = (int64x2_t)xmmword_2103B4950;
          }
        }
        *(_QWORD *)(v525 + 208) = *(_QWORD *)(v523 + 712);
        *(_QWORD *)(v525 + 216) = *(_QWORD *)(v523 + 720);
        v542 = *(_OWORD *)(v523 + 728);
        v543 = *(_OWORD *)(v523 + 744);
        v544 = *(_OWORD *)(v523 + 776);
        *(_OWORD *)(v525 + 256) = *(_OWORD *)(v523 + 760);
        *(_OWORD *)(v525 + 272) = v544;
        *(_OWORD *)(v525 + 224) = v542;
        *(_OWORD *)(v525 + 240) = v543;
        v545 = *(_OWORD *)(v523 + 792);
        v546 = *(_OWORD *)(v523 + 808);
        v547 = *(_OWORD *)(v523 + 824);
        *(_QWORD *)(v525 + 336) = *(_QWORD *)(v523 + 840);
        *(_OWORD *)(v525 + 304) = v546;
        *(_OWORD *)(v525 + 320) = v547;
        *(_OWORD *)(v525 + 288) = v545;
        v549 = *(_OWORD *)(v523 + 928);
        v548 = *(_OWORD *)(v523 + 944);
        v550 = *(_OWORD *)(v523 + 912);
        *(_QWORD *)(v525 + 456) = *(_QWORD *)(v523 + 960);
        *(_OWORD *)(v525 + 424) = v549;
        *(_OWORD *)(v525 + 440) = v548;
        *(_OWORD *)(v525 + 408) = v550;
        v551 = *(_OWORD *)(v523 + 848);
        v552 = *(_OWORD *)(v523 + 864);
        v553 = *(_OWORD *)(v523 + 896);
        *(_OWORD *)(v525 + 376) = *(_OWORD *)(v523 + 880);
        *(_OWORD *)(v525 + 392) = v553;
        *(_OWORD *)(v525 + 344) = v551;
        *(_OWORD *)(v525 + 360) = v552;
        v554 = *(_QWORD *)(v523 + 968);
        *(_BYTE *)(v525 + 472) = *(_BYTE *)(v523 + 976);
        *(_QWORD *)(v525 + 464) = v554;
        v555 = *(_OWORD *)(v523 + 984);
        *(_QWORD *)(v523 + 984) = 0;
        *(_QWORD *)(v523 + 992) = 0;
        v556 = *(std::__shared_weak_count **)(v525 + 488);
        *(_OWORD *)(v525 + 480) = v555;
        if (v556)
        {
          v557 = (unint64_t *)&v556->__shared_owners_;
          do
            v558 = __ldaxr(v557);
          while (__stlxr(v558 - 1, v557));
          if (!v558)
          {
            ((void (*)(std::__shared_weak_count *))v556->__on_zero_shared)(v556);
            std::__shared_weak_count::__release_weak(v556);
            v526 = (int64x2_t)xmmword_2103B4950;
          }
        }
        *(_BYTE *)(v525 + 496) = *(_BYTE *)(v523 + 1000);
        v525 += 504;
        v527 = v528 + 63;
        v523 = (uint64_t)v528;
      }
      while (v528 + 63 != (_QWORD *)v524);
      goto LABEL_601;
    }
LABEL_600:
    v525 = v523;
  }
LABEL_601:
  v559 = a1[49].i64[0];
  if (v525 == v559)
    goto LABEL_604;
  v560 = sub_20F5B64A0(v559, a1[49].i64[0], v525);
  for (jj = a1[49].i64[0]; jj != v560; jj -= 504)
  {
    v567 = *(std::__shared_weak_count **)(jj - 16);
    if (!v567)
      goto LABEL_615;
    v568 = (unint64_t *)&v567->__shared_owners_;
    do
      v569 = __ldaxr(v568);
    while (__stlxr(v569 - 1, v568));
    if (!v569)
    {
      ((void (*)(std::__shared_weak_count *))v567->__on_zero_shared)(v567);
      std::__shared_weak_count::__release_weak(v567);
      v570 = *(std::__shared_weak_count **)(jj - 304);
      if (v570)
      {
LABEL_616:
        v571 = (unint64_t *)&v570->__shared_owners_;
        do
          v572 = __ldaxr(v571);
        while (__stlxr(v572 - 1, v571));
        if (!v572)
        {
          ((void (*)(std::__shared_weak_count *))v570->__on_zero_shared)(v570);
          std::__shared_weak_count::__release_weak(v570);
        }
      }
    }
    else
    {
LABEL_615:
      v570 = *(std::__shared_weak_count **)(jj - 304);
      if (v570)
        goto LABEL_616;
    }
  }
  a1[49].i64[0] = v560;
LABEL_604:
  v562 = a1[50].i64[0];
  v563 = (_QWORD *)a1[50].i64[1];
  if ((_QWORD *)v562 == v563)
  {
    v564 = a1[50].i64[0];
  }
  else
  {
    v564 = a1[50].i64[1];
    v565 = (_QWORD *)(v562 + 280);
    while (!*((_BYTE *)v565 - 8))
    {
      v566 = v565 == v563;
      v565 += 35;
      if (v566)
        goto LABEL_641;
    }
    --*(_DWORD *)(*(v565 - 18) + 8);
    *(v565 - 18) = 0;
    v573 = (int64x2_t)xmmword_2103B2310;
    a1[60] = vaddq_s64(a1[60], (int64x2_t)xmmword_2103B2310);
    v574 = v565 - 35;
    if (v565 - 35 != v563)
    {
      if (v565 == v563)
      {
        v564 = (uint64_t)(v565 - 35);
      }
      else
      {
        v564 = (uint64_t)(v565 - 35);
        do
        {
          while (1)
          {
            v575 = v565;
            if (!*((_BYTE *)v574 + 552))
              break;
            --*(_DWORD *)(v574[52] + 8);
            v574[52] = 0;
            a1[60] = vaddq_s64(a1[60], v573);
            v565 += 35;
            v574 = v575;
            if (v575 + 35 == v563)
              goto LABEL_641;
          }
          *(_QWORD *)v564 = *v565;
          *(_OWORD *)(v564 + 8) = *((_OWORD *)v574 + 18);
          v577 = *((_OWORD *)v574 + 21);
          v576 = *((_OWORD *)v574 + 22);
          v578 = v574[46];
          *(_OWORD *)(v564 + 40) = *((_OWORD *)v574 + 20);
          *(_QWORD *)(v564 + 88) = v578;
          *(_OWORD *)(v564 + 72) = v576;
          *(_OWORD *)(v564 + 56) = v577;
          *(_OWORD *)(v564 + 24) = *((_OWORD *)v574 + 19);
          v579 = *(_OWORD *)(v574 + 47);
          *(_QWORD *)(v564 + 112) = v574[49];
          *(_OWORD *)(v564 + 96) = v579;
          v580 = *((_OWORD *)v574 + 25);
          v574[50] = 0;
          v574[51] = 0;
          v581 = *(std::__shared_weak_count **)(v564 + 128);
          *(_OWORD *)(v564 + 120) = v580;
          if (v581)
          {
            v582 = (unint64_t *)&v581->__shared_owners_;
            do
              v583 = __ldaxr(v582);
            while (__stlxr(v583 - 1, v582));
            if (!v583)
            {
              ((void (*)(std::__shared_weak_count *))v581->__on_zero_shared)(v581);
              std::__shared_weak_count::__release_weak(v581);
              v573 = (int64x2_t)xmmword_2103B2310;
            }
          }
          *(_QWORD *)(v564 + 136) = v574[52];
          v584 = *(_OWORD *)(v574 + 53);
          v585 = *(_OWORD *)(v574 + 57);
          *(_OWORD *)(v564 + 160) = *(_OWORD *)(v574 + 55);
          *(_OWORD *)(v564 + 176) = v585;
          *(_OWORD *)(v564 + 144) = v584;
          v586 = *(_OWORD *)(v574 + 59);
          v587 = *(_OWORD *)(v574 + 63);
          *(_OWORD *)(v564 + 208) = *(_OWORD *)(v574 + 61);
          *(_OWORD *)(v564 + 224) = v587;
          *(_OWORD *)(v564 + 192) = v586;
          v588 = v574[65];
          *(_BYTE *)(v564 + 248) = *((_BYTE *)v574 + 528);
          *(_QWORD *)(v564 + 240) = v588;
          v589 = *(_OWORD *)(v574 + 67);
          v574[68] = 0;
          v574[67] = 0;
          v590 = *(std::__shared_weak_count **)(v564 + 264);
          *(_OWORD *)(v564 + 256) = v589;
          if (v590)
          {
            v591 = (unint64_t *)&v590->__shared_owners_;
            do
              v592 = __ldaxr(v591);
            while (__stlxr(v592 - 1, v591));
            if (!v592)
            {
              ((void (*)(std::__shared_weak_count *))v590->__on_zero_shared)(v590);
              std::__shared_weak_count::__release_weak(v590);
              v573 = (int64x2_t)xmmword_2103B2310;
            }
          }
          *(_BYTE *)(v564 + 272) = *((_BYTE *)v574 + 552);
          v564 += 280;
          v565 = v575 + 35;
          v574 = v575;
        }
        while (v575 + 35 != v563);
      }
    }
  }
LABEL_641:
  v593 = a1[50].i64[1];
  if (v564 == v593)
    goto LABEL_644;
  v594 = sub_20F5B6660(v593, a1[50].i64[1], v564);
  for (kk = a1[50].i64[1]; kk != v594; kk -= 280)
  {
    v599 = *(std::__shared_weak_count **)(kk - 16);
    if (!v599)
      goto LABEL_654;
    v600 = (unint64_t *)&v599->__shared_owners_;
    do
      v601 = __ldaxr(v600);
    while (__stlxr(v601 - 1, v600));
    if (!v601)
    {
      ((void (*)(std::__shared_weak_count *))v599->__on_zero_shared)(v599);
      std::__shared_weak_count::__release_weak(v599);
      v602 = *(std::__shared_weak_count **)(kk - 152);
      if (v602)
      {
LABEL_655:
        v603 = (unint64_t *)&v602->__shared_owners_;
        do
          v604 = __ldaxr(v603);
        while (__stlxr(v604 - 1, v603));
        if (!v604)
        {
          ((void (*)(std::__shared_weak_count *))v602->__on_zero_shared)(v602);
          std::__shared_weak_count::__release_weak(v602);
        }
      }
    }
    else
    {
LABEL_654:
      v602 = *(std::__shared_weak_count **)(kk - 152);
      if (v602)
        goto LABEL_655;
    }
  }
  a1[50].i64[1] = v594;
LABEL_644:
  v596 = a1[51].i64[1];
  v597 = a1[52].i64[0];
  if (v596 == v597)
    goto LABEL_668;
  v598 = a1[52].i64[0];
  while (!*(_BYTE *)(v596 + 8008))
  {
    v596 += 8016;
    if (v596 == v597)
      goto LABEL_669;
  }
  --*(_DWORD *)(*(_QWORD *)(v596 + 7696) + 8);
  --*(_DWORD *)(*(_QWORD *)(v596 + 7704) + 8);
  *(_OWORD *)(v596 + 7696) = 0u;
  --*(_DWORD *)(*(_QWORD *)(v596 + 7712) + 8);
  --*(_DWORD *)(*(_QWORD *)(v596 + 7720) + 8);
  *(_OWORD *)(v596 + 7712) = 0u;
  --*(_DWORD *)(*(_QWORD *)(v596 + 7728) + 8);
  *(_QWORD *)(v596 + 7728) = 0;
  a1[60] = vaddq_s64(a1[60], (int64x2_t)xmmword_2103B4950);
  if (v596 == v597)
    goto LABEL_669;
  if (v596 + 8016 == v597)
  {
LABEL_668:
    v598 = v596;
  }
  else
  {
    v598 = v596;
    do
    {
      while (!*(_BYTE *)(v596 + 16024))
      {
        *(_QWORD *)v598 = *(_QWORD *)(v596 + 8016);
        sub_20F5B67C0(v598 + 8, v596 + 8024);
        *(_BYTE *)(v598 + 8008) = *(_BYTE *)(v596 + 16024);
        v598 += 8016;
        v605 = v596 + 16032;
        v596 += 8016;
        if (v605 == v597)
          goto LABEL_669;
      }
      --*(_DWORD *)(*(_QWORD *)(v596 + 15712) + 8);
      --*(_DWORD *)(*(_QWORD *)(v596 + 15720) + 8);
      *(_OWORD *)(v596 + 15712) = 0u;
      --*(_DWORD *)(*(_QWORD *)(v596 + 15728) + 8);
      --*(_DWORD *)(*(_QWORD *)(v596 + 15736) + 8);
      *(_OWORD *)(v596 + 15728) = 0u;
      --*(_DWORD *)(*(_QWORD *)(v596 + 15744) + 8);
      *(_QWORD *)(v596 + 15744) = 0;
      a1[60] = vaddq_s64(a1[60], (int64x2_t)xmmword_2103B4950);
      v606 = v596 + 16032;
      v596 += 8016;
    }
    while (v606 != v597);
  }
LABEL_669:
  v607 = a1[52].i64[0];
  if (v607 != v598)
  {
    do
    {
      v608 = *(std::__shared_weak_count **)(v607 - 16);
      if (v608)
      {
        v609 = (unint64_t *)&v608->__shared_owners_;
        do
          v610 = __ldaxr(v609);
        while (__stlxr(v610 - 1, v609));
        if (!v610)
        {
          ((void (*)(std::__shared_weak_count *))v608->__on_zero_shared)(v608);
          std::__shared_weak_count::__release_weak(v608);
        }
      }
      v607 -= 8016;
    }
    while (v607 != v598);
    a1[52].i64[0] = v598;
  }
  v611 = a1[53].i64[0];
  v612 = a1[53].i64[1];
  if (v611 == v612)
    goto LABEL_690;
  v613 = a1[53].i64[1];
  while (!*(_BYTE *)(v611 + 5328))
  {
    v611 += 5336;
    if (v611 == v612)
      goto LABEL_691;
  }
  --*(_DWORD *)(*(_QWORD *)(v611 + 5024) + 8);
  --*(_DWORD *)(*(_QWORD *)(v611 + 5032) + 8);
  *(_OWORD *)(v611 + 5024) = 0u;
  --*(_DWORD *)(*(_QWORD *)(v611 + 5040) + 8);
  --*(_DWORD *)(*(_QWORD *)(v611 + 5048) + 8);
  *(_OWORD *)(v611 + 5040) = 0u;
  a1[60] = vaddq_s64(a1[60], (int64x2_t)xmmword_2103B4950);
  if (v611 == v612)
    goto LABEL_691;
  v614 = v611 + 5336;
  if (v611 + 5336 == v612)
  {
LABEL_690:
    v613 = v611;
  }
  else
  {
    v615 = (_BYTE *)(v611 + 10664);
    v613 = v611;
    do
    {
      while (!*v615)
      {
        sub_20F5B6B10(v613, v614);
        v613 += 5336;
        v614 += 5336;
        v615 += 5336;
        if (v614 == v612)
          goto LABEL_691;
      }
      --*(_DWORD *)(*((_QWORD *)v615 - 38) + 8);
      --*(_DWORD *)(*(_QWORD *)(v614 + 5032) + 8);
      *((_OWORD *)v615 - 19) = 0u;
      --*(_DWORD *)(*((_QWORD *)v615 - 36) + 8);
      --*(_DWORD *)(*((_QWORD *)v615 - 35) + 8);
      *((_OWORD *)v615 - 18) = 0u;
      a1[60] = vaddq_s64(a1[60], (int64x2_t)xmmword_2103B4950);
      v614 += 5336;
      v615 += 5336;
    }
    while (v614 != v612);
  }
LABEL_691:
  v616 = a1[53].i64[1];
  if (v616 != v613)
  {
    do
    {
      v617 = *(std::__shared_weak_count **)(v616 - 16);
      if (v617)
      {
        v618 = (unint64_t *)&v617->__shared_owners_;
        do
          v619 = __ldaxr(v618);
        while (__stlxr(v619 - 1, v618));
        if (!v619)
        {
          ((void (*)(std::__shared_weak_count *))v617->__on_zero_shared)(v617);
          std::__shared_weak_count::__release_weak(v617);
        }
      }
      v616 -= 5336;
    }
    while (v616 != v613);
    a1[53].i64[1] = v613;
  }
  v620 = a1[54].i64[1];
  v621 = a1[55].i64[0];
  if (v620 == v621)
    goto LABEL_717;
  v622 = a1[55].i64[0];
  while (!*(_BYTE *)(v620 + 208))
  {
    v620 += 216;
    if (v620 == v621)
      goto LABEL_718;
  }
  --*(_DWORD *)(*(_QWORD *)(v620 + 56) + 8);
  --*(_DWORD *)(*(_QWORD *)(v620 + 64) + 8);
  *(_OWORD *)(v620 + 56) = 0u;
  --*(_DWORD *)(*(_QWORD *)(v620 + 72) + 8);
  --*(_DWORD *)(*(_QWORD *)(v620 + 80) + 8);
  *(_OWORD *)(v620 + 72) = 0u;
  --*(_DWORD *)(*(_QWORD *)(v620 + 88) + 8);
  --*(_DWORD *)(*(_QWORD *)(v620 + 96) + 8);
  *(_OWORD *)(v620 + 88) = 0u;
  --*(_DWORD *)(*(_QWORD *)(v620 + 104) + 8);
  --*(_DWORD *)(*(_QWORD *)(v620 + 112) + 8);
  *(_OWORD *)(v620 + 104) = 0u;
  --*(_DWORD *)(*(_QWORD *)(v620 + 120) + 8);
  --*(_DWORD *)(*(_QWORD *)(v620 + 128) + 8);
  *(_OWORD *)(v620 + 120) = 0u;
  --*(_DWORD *)(*(_QWORD *)(v620 + 136) + 8);
  *(_QWORD *)(v620 + 136) = 0;
  v623 = (int64x2_t)xmmword_210378050;
  a1[60] = vaddq_s64(a1[60], (int64x2_t)xmmword_210378050);
  if (v620 == v621)
    goto LABEL_718;
  v624 = (_QWORD *)(v620 + 216);
  if (v620 + 216 == v621)
  {
LABEL_717:
    v622 = v620;
  }
  else
  {
    v625 = 0uLL;
    v622 = v620;
    do
    {
      while (1)
      {
        v626 = v624;
        if (!*(_BYTE *)(v620 + 424))
          break;
        --*(_DWORD *)(*(_QWORD *)(v620 + 272) + 8);
        --*(_DWORD *)(*(_QWORD *)(v620 + 280) + 8);
        *(_OWORD *)(v620 + 272) = v625;
        --*(_DWORD *)(*(_QWORD *)(v620 + 288) + 8);
        --*(_DWORD *)(*(_QWORD *)(v620 + 296) + 8);
        *(_OWORD *)(v620 + 288) = v625;
        --*(_DWORD *)(*(_QWORD *)(v620 + 304) + 8);
        --*(_DWORD *)(*(_QWORD *)(v620 + 312) + 8);
        *(_OWORD *)(v620 + 304) = v625;
        --*(_DWORD *)(*(_QWORD *)(v620 + 320) + 8);
        --*(_DWORD *)(*(_QWORD *)(v620 + 328) + 8);
        *(_OWORD *)(v620 + 320) = v625;
        --*(_DWORD *)(*(_QWORD *)(v620 + 336) + 8);
        --*(_DWORD *)(*(_QWORD *)(v620 + 344) + 8);
        *(_OWORD *)(v620 + 336) = v625;
        --*(_DWORD *)(*(_QWORD *)(v620 + 352) + 8);
        *(_QWORD *)(v620 + 352) = 0;
        a1[60] = vaddq_s64(a1[60], v623);
        v624 += 27;
        v620 = (uint64_t)v626;
        if (v626 + 27 == (_QWORD *)v621)
          goto LABEL_718;
      }
      *(_QWORD *)v622 = *v624;
      *(_QWORD *)(v622 + 8) = *(_QWORD *)(v620 + 224);
      *(_OWORD *)(v622 + 16) = *(_OWORD *)(v620 + 232);
      v627 = *(_OWORD *)(v620 + 248);
      *(_QWORD *)(v622 + 48) = *(_QWORD *)(v620 + 264);
      *(_OWORD *)(v622 + 32) = v627;
      *(_QWORD *)(v622 + 56) = *(_QWORD *)(v620 + 272);
      *(_QWORD *)(v622 + 64) = *(_QWORD *)(v620 + 280);
      *(_QWORD *)(v622 + 72) = *(_QWORD *)(v620 + 288);
      *(_QWORD *)(v622 + 80) = *(_QWORD *)(v620 + 296);
      *(_QWORD *)(v622 + 88) = *(_QWORD *)(v620 + 304);
      *(_QWORD *)(v622 + 96) = *(_QWORD *)(v620 + 312);
      *(_QWORD *)(v622 + 104) = *(_QWORD *)(v620 + 320);
      *(_QWORD *)(v622 + 112) = *(_QWORD *)(v620 + 328);
      *(_QWORD *)(v622 + 120) = *(_QWORD *)(v620 + 336);
      *(_QWORD *)(v622 + 128) = *(_QWORD *)(v620 + 344);
      *(_QWORD *)(v622 + 136) = *(_QWORD *)(v620 + 352);
      *(_OWORD *)(v622 + 144) = *(_OWORD *)(v620 + 360);
      *(_OWORD *)(v622 + 160) = *(_OWORD *)(v620 + 376);
      v628 = *(_QWORD *)(v620 + 392);
      *(_BYTE *)(v622 + 184) = *(_BYTE *)(v620 + 400);
      *(_QWORD *)(v622 + 176) = v628;
      v629 = *(_OWORD *)(v620 + 408);
      *(_QWORD *)(v620 + 416) = 0;
      *(_QWORD *)(v620 + 408) = 0;
      v630 = *(std::__shared_weak_count **)(v622 + 200);
      *(_OWORD *)(v622 + 192) = v629;
      if (v630)
      {
        v631 = (unint64_t *)&v630->__shared_owners_;
        do
          v632 = __ldaxr(v631);
        while (__stlxr(v632 - 1, v631));
        if (!v632)
        {
          ((void (*)(std::__shared_weak_count *))v630->__on_zero_shared)(v630);
          std::__shared_weak_count::__release_weak(v630);
          v625 = 0uLL;
          v623 = (int64x2_t)xmmword_210378050;
        }
      }
      *(_BYTE *)(v622 + 208) = *(_BYTE *)(v620 + 424);
      v622 += 216;
      v624 = v626 + 27;
      v620 = (uint64_t)v626;
    }
    while (v626 + 27 != (_QWORD *)v621);
  }
LABEL_718:
  v633 = a1[55].i64[0];
  if (v633 != v622)
  {
    v634 = sub_20F5B6E44(v633, a1[55].i64[0], v622);
    for (mm = a1[55].i64[0]; mm != v634; mm -= 216)
    {
      v640 = *(std::__shared_weak_count **)(mm - 16);
      if (v640)
      {
        v641 = (unint64_t *)&v640->__shared_owners_;
        do
          v642 = __ldaxr(v641);
        while (__stlxr(v642 - 1, v641));
        if (!v642)
        {
          ((void (*)(std::__shared_weak_count *))v640->__on_zero_shared)(v640);
          std::__shared_weak_count::__release_weak(v640);
        }
      }
    }
    a1[55].i64[0] = v634;
  }
  v636 = a1[56].i64[0];
  v637 = (_QWORD *)a1[56].i64[1];
  if ((_QWORD *)v636 == v637)
  {
    v638 = (_QWORD *)a1[56].i64[0];
  }
  else
  {
    v638 = (_QWORD *)a1[56].i64[1];
    v639 = (_QWORD *)(v636 + 888);
    while (!*((_BYTE *)v639 - 8))
    {
      v566 = v639 == v637;
      v639 += 111;
      if (v566)
        goto LABEL_747;
    }
    --*(_DWORD *)(*(v639 - 19) + 8);
    --*(_DWORD *)(*(v639 - 18) + 8);
    *(v639 - 19) = 0;
    *(v639 - 18) = 0;
    a1[60] = vaddq_s64(a1[60], (int64x2_t)xmmword_2103B2310);
    v643 = v639 - 111;
    if (v639 - 111 != v637)
    {
      if (v639 == v637)
      {
        v638 = v639 - 111;
      }
      else
      {
        v638 = v639 - 111;
        do
        {
          while (1)
          {
            v644 = v639;
            if (!*((_BYTE *)v643 + 1768))
              break;
            --*(_DWORD *)(v643[203] + 8);
            --*(_DWORD *)(v643[204] + 8);
            v643[203] = 0;
            v643[204] = 0;
            a1[60] = vaddq_s64(a1[60], (int64x2_t)xmmword_2103B2310);
            v639 += 111;
            v643 = v644;
            if (v644 + 111 == v637)
              goto LABEL_747;
          }
          *v638 = *v639;
          *(_OWORD *)(v638 + 1) = *((_OWORD *)v643 + 56);
          memcpy(v638 + 3, v643 + 114, 0x120uLL);
          memcpy(v638 + 39, v643 + 150, 0x120uLL);
          v645 = *((_OWORD *)v643 + 99);
          v646 = *((_OWORD *)v643 + 100);
          v647 = *((_OWORD *)v643 + 98);
          *(_OWORD *)(v638 + 83) = *((_OWORD *)v643 + 97);
          *(_OWORD *)(v638 + 85) = v647;
          v648 = *((_OWORD *)v643 + 93);
          v649 = *((_OWORD *)v643 + 94);
          v650 = *((_OWORD *)v643 + 96);
          *(_OWORD *)(v638 + 79) = *((_OWORD *)v643 + 95);
          *(_OWORD *)(v638 + 81) = v650;
          *(_OWORD *)(v638 + 75) = v648;
          *(_OWORD *)(v638 + 77) = v649;
          *(_OWORD *)(v638 + 87) = v645;
          *(_OWORD *)(v638 + 89) = v646;
          *((_BYTE *)v638 + 728) = *((_BYTE *)v643 + 1616);
          v638[92] = v643[203];
          v638[93] = v643[204];
          v652 = *(_OWORD *)(v643 + 207);
          v651 = *(_OWORD *)(v643 + 209);
          *((_OWORD *)v638 + 47) = *(_OWORD *)(v643 + 205);
          *((_OWORD *)v638 + 48) = v652;
          *((_OWORD *)v638 + 49) = v651;
          v653 = *(_OWORD *)(v643 + 211);
          v654 = *(_OWORD *)(v643 + 215);
          *((_OWORD *)v638 + 51) = *(_OWORD *)(v643 + 213);
          *((_OWORD *)v638 + 52) = v654;
          *((_OWORD *)v638 + 50) = v653;
          v655 = v643[217];
          *((_BYTE *)v638 + 856) = *((_BYTE *)v643 + 1744);
          v638[106] = v655;
          v656 = *(_OWORD *)(v643 + 219);
          v643[219] = 0;
          v643[220] = 0;
          v657 = (std::__shared_weak_count *)v638[109];
          *((_OWORD *)v638 + 54) = v656;
          if (v657)
          {
            v658 = (unint64_t *)&v657->__shared_owners_;
            do
              v659 = __ldaxr(v658);
            while (__stlxr(v659 - 1, v658));
            if (!v659)
            {
              ((void (*)(std::__shared_weak_count *))v657->__on_zero_shared)(v657);
              std::__shared_weak_count::__release_weak(v657);
            }
          }
          *((_BYTE *)v638 + 880) = *((_BYTE *)v643 + 1768);
          v638 += 111;
          v639 = v644 + 111;
          v643 = v644;
        }
        while (v644 + 111 != v637);
      }
    }
  }
LABEL_747:
  v660 = a1[56].i64[1];
  if (v638 != (_QWORD *)v660)
  {
    while ((_QWORD *)v660 != v638)
    {
      v661 = *(std::__shared_weak_count **)(v660 - 16);
      if (v661)
      {
        v662 = (unint64_t *)&v661->__shared_owners_;
        do
          v663 = __ldaxr(v662);
        while (__stlxr(v663 - 1, v662));
        if (!v663)
        {
          ((void (*)(std::__shared_weak_count *))v661->__on_zero_shared)(v661);
          std::__shared_weak_count::__release_weak(v661);
        }
      }
      v660 -= 888;
    }
    a1[56].i64[1] = (uint64_t)v638;
  }
LABEL_757:
  v664 = a1->i64[1];
  v665 = a1[1].i64[0];
  if (v665 != v664)
  {
    v666 = -16 - v665;
    do
    {
      while (1)
      {
        while (1)
        {
          v667 = *(_QWORD *)(v665 - 8);
          v665 -= 16;
          if ((*(_BYTE *)(v667 + 4) & 6) != 0)
            break;
          *(_BYTE *)(v667 + 4) = 0;
          v666 += 16;
          if (v665 == v664)
            goto LABEL_770;
        }
        sub_20F3D7028((uint64_t)a1[2].i64, v667);
        v668 = v665 + 16;
        v664 = a1->i64[1];
        v669 = a1[1].i64[0];
        if (v665 + 16 != v669)
          break;
        a1[1].i64[0] = v665;
        v666 += 16;
        if (v665 == v664)
          goto LABEL_770;
      }
      v670 = v669 - v665 - 32;
      v671 = v665;
      if (v670 < 0x10)
        goto LABEL_930;
      v672 = (v670 >> 4) + 1;
      v673 = 16 * (v672 & 0x1FFFFFFFFFFFFFFELL);
      v671 = v665 + v673;
      v668 += v673;
      v674 = (((unint64_t)(v669 + v666) >> 4) + 1) & 0x1FFFFFFFFFFFFFFELL;
      v675 = v664 + 16 * ((v665 - v664) >> 4) + 24;
      do
      {
        v676 = *(_DWORD *)(v675 + 8);
        *(_DWORD *)(v675 - 24) = *(_DWORD *)(v675 - 8);
        *(_DWORD *)(v675 - 8) = v676;
        v677 = *(_QWORD *)(v675 + 16);
        *(_QWORD *)(v675 - 16) = *(_QWORD *)v675;
        *(_QWORD *)v675 = v677;
        v675 += 32;
        v674 -= 2;
      }
      while (v674);
      if (v672 != (v672 & 0x1FFFFFFFFFFFFFFELL))
      {
LABEL_930:
        do
        {
          *(_DWORD *)v671 = *(_DWORD *)v668;
          *(_QWORD *)(v671 + 8) = *(_QWORD *)(v668 + 8);
          v671 += 16;
          v668 += 16;
        }
        while (v668 != v669);
      }
      a1[1].i64[0] = v671;
      v666 += 16;
    }
    while (v665 != v664);
  }
LABEL_770:
  v678 = a1[6].i64[1];
  v679 = a1[7].i64[0];
  if (v679 != v678)
  {
    v680 = -16 - v679;
    do
    {
      while (1)
      {
        while (1)
        {
          v681 = *(_QWORD *)(v679 - 8);
          v679 -= 16;
          if ((*(_BYTE *)(v681 + 4) & 6) != 0)
            break;
          *(_BYTE *)(v681 + 4) = 0;
          v680 += 16;
          if (v679 == v678)
            goto LABEL_783;
        }
        sub_20F5B6F80((uint64_t)a1[8].i64, v681);
        v682 = v679 + 16;
        v678 = a1[6].i64[1];
        v683 = a1[7].i64[0];
        if (v679 + 16 != v683)
          break;
        a1[7].i64[0] = v679;
        v680 += 16;
        if (v679 == v678)
          goto LABEL_783;
      }
      v684 = v683 - v679 - 32;
      v685 = v679;
      if (v684 < 0x10)
        goto LABEL_931;
      v686 = (v684 >> 4) + 1;
      v687 = 16 * (v686 & 0x1FFFFFFFFFFFFFFELL);
      v685 = v679 + v687;
      v682 += v687;
      v688 = (((unint64_t)(v683 + v680) >> 4) + 1) & 0x1FFFFFFFFFFFFFFELL;
      v689 = v678 + 16 * ((v679 - v678) >> 4) + 24;
      do
      {
        v690 = *(_DWORD *)(v689 + 8);
        *(_DWORD *)(v689 - 24) = *(_DWORD *)(v689 - 8);
        *(_DWORD *)(v689 - 8) = v690;
        v691 = *(_QWORD *)(v689 + 16);
        *(_QWORD *)(v689 - 16) = *(_QWORD *)v689;
        *(_QWORD *)v689 = v691;
        v689 += 32;
        v688 -= 2;
      }
      while (v688);
      if (v686 != (v686 & 0x1FFFFFFFFFFFFFFELL))
      {
LABEL_931:
        do
        {
          *(_DWORD *)v685 = *(_DWORD *)v682;
          *(_QWORD *)(v685 + 8) = *(_QWORD *)(v682 + 8);
          v685 += 16;
          v682 += 16;
        }
        while (v682 != v683);
      }
      a1[7].i64[0] = v685;
      v680 += 16;
    }
    while (v679 != v678);
  }
LABEL_783:
  v692 = a1[12].i64[1];
  v693 = a1[13].i64[0];
  if (v693 != v692)
  {
    v694 = -16 - v693;
    do
    {
      while (1)
      {
        while (1)
        {
          v695 = *(_QWORD *)(v693 - 8);
          v693 -= 16;
          if ((*(_BYTE *)(v695 + 4) & 6) != 0)
            break;
          *(_BYTE *)(v695 + 4) = 0;
          v694 += 16;
          if (v693 == v692)
            goto LABEL_796;
        }
        sub_20F5B7280((uint64_t)a1[14].i64, v695);
        v696 = v693 + 16;
        v692 = a1[12].i64[1];
        v697 = a1[13].i64[0];
        if (v693 + 16 != v697)
          break;
        a1[13].i64[0] = v693;
        v694 += 16;
        if (v693 == v692)
          goto LABEL_796;
      }
      v698 = v697 - v693 - 32;
      v699 = v693;
      if (v698 < 0x10)
        goto LABEL_932;
      v700 = (v698 >> 4) + 1;
      v701 = 16 * (v700 & 0x1FFFFFFFFFFFFFFELL);
      v699 = v693 + v701;
      v696 += v701;
      v702 = (((unint64_t)(v697 + v694) >> 4) + 1) & 0x1FFFFFFFFFFFFFFELL;
      v703 = v692 + 16 * ((v693 - v692) >> 4) + 24;
      do
      {
        v704 = *(_DWORD *)(v703 + 8);
        *(_DWORD *)(v703 - 24) = *(_DWORD *)(v703 - 8);
        *(_DWORD *)(v703 - 8) = v704;
        v705 = *(_QWORD *)(v703 + 16);
        *(_QWORD *)(v703 - 16) = *(_QWORD *)v703;
        *(_QWORD *)v703 = v705;
        v703 += 32;
        v702 -= 2;
      }
      while (v702);
      if (v700 != (v700 & 0x1FFFFFFFFFFFFFFELL))
      {
LABEL_932:
        do
        {
          *(_DWORD *)v699 = *(_DWORD *)v696;
          *(_QWORD *)(v699 + 8) = *(_QWORD *)(v696 + 8);
          v699 += 16;
          v696 += 16;
        }
        while (v696 != v697);
      }
      a1[13].i64[0] = v699;
      v694 += 16;
    }
    while (v693 != v692);
  }
LABEL_796:
  v706 = a1[18].i64[1];
  v707 = a1[19].i64[0];
  if (v707 != v706)
  {
    v708 = -16 - v707;
    do
    {
      while (1)
      {
        while (1)
        {
          v709 = *(_QWORD *)(v707 - 8);
          v707 -= 16;
          if ((*(_BYTE *)(v709 + 4) & 6) != 0)
            break;
          *(_BYTE *)(v709 + 4) = 0;
          v708 += 16;
          if (v707 == v706)
            goto LABEL_809;
        }
        sub_20F5B7580((uint64_t)a1[20].i64, v709);
        v710 = v707 + 16;
        v706 = a1[18].i64[1];
        v711 = a1[19].i64[0];
        if (v707 + 16 != v711)
          break;
        a1[19].i64[0] = v707;
        v708 += 16;
        if (v707 == v706)
          goto LABEL_809;
      }
      v712 = v711 - v707 - 32;
      v713 = v707;
      if (v712 < 0x10)
        goto LABEL_933;
      v714 = (v712 >> 4) + 1;
      v715 = 16 * (v714 & 0x1FFFFFFFFFFFFFFELL);
      v713 = v707 + v715;
      v710 += v715;
      v716 = (((unint64_t)(v711 + v708) >> 4) + 1) & 0x1FFFFFFFFFFFFFFELL;
      v717 = v706 + 16 * ((v707 - v706) >> 4) + 24;
      do
      {
        v718 = *(_DWORD *)(v717 + 8);
        *(_DWORD *)(v717 - 24) = *(_DWORD *)(v717 - 8);
        *(_DWORD *)(v717 - 8) = v718;
        v719 = *(_QWORD *)(v717 + 16);
        *(_QWORD *)(v717 - 16) = *(_QWORD *)v717;
        *(_QWORD *)v717 = v719;
        v717 += 32;
        v716 -= 2;
      }
      while (v716);
      if (v714 != (v714 & 0x1FFFFFFFFFFFFFFELL))
      {
LABEL_933:
        do
        {
          *(_DWORD *)v713 = *(_DWORD *)v710;
          *(_QWORD *)(v713 + 8) = *(_QWORD *)(v710 + 8);
          v713 += 16;
          v710 += 16;
        }
        while (v710 != v711);
      }
      a1[19].i64[0] = v713;
      v708 += 16;
    }
    while (v707 != v706);
  }
LABEL_809:
  v720 = a1[24].i64[1];
  v721 = a1[25].i64[0];
  if (v721 != v720)
  {
    v722 = -16 - v721;
    do
    {
      while (1)
      {
        while (1)
        {
          v723 = *(_QWORD *)(v721 - 8);
          v721 -= 16;
          if ((*(_BYTE *)(v723 + 4) & 6) != 0)
            break;
          *(_BYTE *)(v723 + 4) = 0;
          v722 += 16;
          if (v721 == v720)
            goto LABEL_822;
        }
        sub_20F6B87CC((uint64_t)a1[26].i64, (_QWORD *)v723);
        v724 = v721 + 16;
        v720 = a1[24].i64[1];
        v725 = a1[25].i64[0];
        if (v721 + 16 != v725)
          break;
        a1[25].i64[0] = v721;
        v722 += 16;
        if (v721 == v720)
          goto LABEL_822;
      }
      v726 = v725 - v721 - 32;
      v727 = v721;
      if (v726 < 0x10)
        goto LABEL_934;
      v728 = (v726 >> 4) + 1;
      v729 = 16 * (v728 & 0x1FFFFFFFFFFFFFFELL);
      v727 = v721 + v729;
      v724 += v729;
      v730 = (((unint64_t)(v725 + v722) >> 4) + 1) & 0x1FFFFFFFFFFFFFFELL;
      v731 = v720 + 16 * ((v721 - v720) >> 4) + 24;
      do
      {
        v732 = *(_DWORD *)(v731 + 8);
        *(_DWORD *)(v731 - 24) = *(_DWORD *)(v731 - 8);
        *(_DWORD *)(v731 - 8) = v732;
        v733 = *(_QWORD *)(v731 + 16);
        *(_QWORD *)(v731 - 16) = *(_QWORD *)v731;
        *(_QWORD *)v731 = v733;
        v731 += 32;
        v730 -= 2;
      }
      while (v730);
      if (v728 != (v728 & 0x1FFFFFFFFFFFFFFELL))
      {
LABEL_934:
        do
        {
          *(_DWORD *)v727 = *(_DWORD *)v724;
          *(_QWORD *)(v727 + 8) = *(_QWORD *)(v724 + 8);
          v727 += 16;
          v724 += 16;
        }
        while (v724 != v725);
      }
      a1[25].i64[0] = v727;
      v722 += 16;
    }
    while (v721 != v720);
  }
LABEL_822:
  v734 = a1[30].i64[1];
  v735 = a1[31].i64[0];
  if (v735 != v734)
  {
    v736 = -16 - v735;
    do
    {
      while (1)
      {
        while (1)
        {
          v737 = *(_QWORD *)(v735 - 8);
          v735 -= 16;
          if ((*(_BYTE *)(v737 + 4) & 6) != 0)
            break;
          *(_BYTE *)(v737 + 4) = 0;
          v736 += 16;
          if (v735 == v734)
            goto LABEL_835;
        }
        sub_20F6B8ACC((uint64_t)a1[32].i64, (_QWORD *)v737);
        v738 = v735 + 16;
        v734 = a1[30].i64[1];
        v739 = a1[31].i64[0];
        if (v735 + 16 != v739)
          break;
        a1[31].i64[0] = v735;
        v736 += 16;
        if (v735 == v734)
          goto LABEL_835;
      }
      v740 = v739 - v735 - 32;
      v741 = v735;
      if (v740 < 0x10)
        goto LABEL_935;
      v742 = (v740 >> 4) + 1;
      v743 = 16 * (v742 & 0x1FFFFFFFFFFFFFFELL);
      v741 = v735 + v743;
      v738 += v743;
      v744 = (((unint64_t)(v739 + v736) >> 4) + 1) & 0x1FFFFFFFFFFFFFFELL;
      v745 = v734 + 16 * ((v735 - v734) >> 4) + 24;
      do
      {
        v746 = *(_DWORD *)(v745 + 8);
        *(_DWORD *)(v745 - 24) = *(_DWORD *)(v745 - 8);
        *(_DWORD *)(v745 - 8) = v746;
        v747 = *(_QWORD *)(v745 + 16);
        *(_QWORD *)(v745 - 16) = *(_QWORD *)v745;
        *(_QWORD *)v745 = v747;
        v745 += 32;
        v744 -= 2;
      }
      while (v744);
      if (v742 != (v742 & 0x1FFFFFFFFFFFFFFELL))
      {
LABEL_935:
        do
        {
          *(_DWORD *)v741 = *(_DWORD *)v738;
          *(_QWORD *)(v741 + 8) = *(_QWORD *)(v738 + 8);
          v741 += 16;
          v738 += 16;
        }
        while (v738 != v739);
      }
      a1[31].i64[0] = v741;
      v736 += 16;
    }
    while (v735 != v734);
  }
LABEL_835:
  v748 = a1[37].i64[0];
  v749 = a1[36].i64[1];
  if (v748 != v749)
  {
    v750 = -16 - v748;
    do
    {
      while (1)
      {
        while (1)
        {
          v751 = *(_QWORD *)(v748 - 8);
          v748 -= 16;
          if ((*(_BYTE *)(v751 + 4) & 6) != 0)
            break;
          *(_BYTE *)(v751 + 4) = 0;
          v750 += 16;
          if (v748 == v749)
            goto LABEL_848;
        }
        sub_20F6B8DCC((uint64_t)a1[38].i64, (_QWORD *)v751);
        v749 = a1[36].i64[1];
        v752 = v748 + 16;
        v753 = a1[37].i64[0];
        if (v748 + 16 != v753)
          break;
        a1[37].i64[0] = v748;
        v750 += 16;
        if (v748 == v749)
          goto LABEL_848;
      }
      v754 = v753 - v748 - 32;
      v755 = v748;
      if (v754 < 0x10)
        goto LABEL_936;
      v756 = (v754 >> 4) + 1;
      v757 = 16 * (v756 & 0x1FFFFFFFFFFFFFFELL);
      v755 = v748 + v757;
      v752 += v757;
      v758 = (((unint64_t)(v753 + v750) >> 4) + 1) & 0x1FFFFFFFFFFFFFFELL;
      v759 = v749 + 16 * ((v748 - v749) >> 4) + 24;
      do
      {
        v760 = *(_DWORD *)(v759 + 8);
        *(_DWORD *)(v759 - 24) = *(_DWORD *)(v759 - 8);
        *(_DWORD *)(v759 - 8) = v760;
        v761 = *(_QWORD *)(v759 + 16);
        *(_QWORD *)(v759 - 16) = *(_QWORD *)v759;
        *(_QWORD *)v759 = v761;
        v759 += 32;
        v758 -= 2;
      }
      while (v758);
      if (v756 != (v756 & 0x1FFFFFFFFFFFFFFELL))
      {
LABEL_936:
        do
        {
          *(_DWORD *)v755 = *(_DWORD *)v752;
          *(_QWORD *)(v755 + 8) = *(_QWORD *)(v752 + 8);
          v755 += 16;
          v752 += 16;
        }
        while (v752 != v753);
      }
      a1[37].i64[0] = v755;
      v750 += 16;
    }
    while (v748 != v749);
  }
LABEL_848:
  v762 = a1[43].i64[0];
  v763 = a1[42].i64[1];
  if (v762 != v763)
  {
    v764 = -16 - v762;
    do
    {
      while (1)
      {
        while (1)
        {
          v765 = *(_QWORD *)(v762 - 8);
          v762 -= 16;
          if ((*(_BYTE *)(v765 + 4) & 6) != 0)
            break;
          *(_BYTE *)(v765 + 4) = 0;
          v764 += 16;
          if (v762 == v763)
            goto LABEL_861;
        }
        sub_20F2BAEA4((uint64_t)a1[44].i64, v765);
        v763 = a1[42].i64[1];
        v766 = v762 + 16;
        v767 = a1[43].i64[0];
        if (v762 + 16 != v767)
          break;
        a1[43].i64[0] = v762;
        v764 += 16;
        if (v762 == v763)
          goto LABEL_861;
      }
      v768 = v767 - v762 - 32;
      v769 = v762;
      if (v768 < 0x10)
        goto LABEL_937;
      v770 = (v768 >> 4) + 1;
      v771 = 16 * (v770 & 0x1FFFFFFFFFFFFFFELL);
      v769 = v762 + v771;
      v766 += v771;
      v772 = (((unint64_t)(v767 + v764) >> 4) + 1) & 0x1FFFFFFFFFFFFFFELL;
      v773 = v763 + 16 * ((v762 - v763) >> 4) + 24;
      do
      {
        v774 = *(_DWORD *)(v773 + 8);
        *(_DWORD *)(v773 - 24) = *(_DWORD *)(v773 - 8);
        *(_DWORD *)(v773 - 8) = v774;
        v775 = *(_QWORD *)(v773 + 16);
        *(_QWORD *)(v773 - 16) = *(_QWORD *)v773;
        *(_QWORD *)v773 = v775;
        v773 += 32;
        v772 -= 2;
      }
      while (v772);
      if (v770 != (v770 & 0x1FFFFFFFFFFFFFFELL))
      {
LABEL_937:
        do
        {
          *(_DWORD *)v769 = *(_DWORD *)v766;
          *(_QWORD *)(v769 + 8) = *(_QWORD *)(v766 + 8);
          v769 += 16;
          v766 += 16;
        }
        while (v766 != v767);
      }
      a1[43].i64[0] = v769;
      v764 += 16;
    }
    while (v762 != v763);
  }
LABEL_861:
  a1[61].i16[0] = 1;
  a1[62].i64[0] = a1[61].i64[1];
  a1[74].i64[0] = a1[73].i64[1];
  a1[86].i64[0] = a1[85].i64[1];
  a1[63].i64[1] = a1[63].i64[0];
  a1[75].i64[1] = a1[75].i64[0];
  a1[87].i64[1] = a1[87].i64[0];
  a1[65].i64[0] = a1[64].i64[1];
  a1[77].i64[0] = a1[76].i64[1];
  a1[89].i64[0] = a1[88].i64[1];
  a1[66].i64[1] = a1[66].i64[0];
  a1[78].i64[1] = a1[78].i64[0];
  a1[90].i64[1] = a1[90].i64[0];
  a1[68].i64[0] = a1[67].i64[1];
  a1[80].i64[0] = a1[79].i64[1];
  a1[92].i64[0] = a1[91].i64[1];
  a1[69].i64[1] = a1[69].i64[0];
  a1[81].i64[1] = a1[81].i64[0];
  a1[93].i64[1] = a1[93].i64[0];
  a1[71].i64[0] = a1[70].i64[1];
  a1[83].i64[0] = a1[82].i64[1];
  a1[95].i64[0] = a1[94].i64[1];
  a1[72].i64[1] = a1[72].i64[0];
  a1[84].i64[1] = a1[84].i64[0];
  a1[96].i64[1] = a1[96].i64[0];
  v776 = a1->i64[1];
  v777 = a1[1].i64[0];
  if (v776 != v777)
  {
    v778 = 0;
    do
    {
      v779 = *(_QWORD *)(v776 + 8);
      if (*(_BYTE *)(v779 + 20))
        v780 = v778;
      else
        v780 = -1;
      v778 += *(unsigned __int8 *)(v779 + 20);
      *(_DWORD *)v779 = v780;
      v776 += 16;
    }
    while (v776 != v777);
  }
  v781 = a1[6].i64[1];
  v782 = a1[7].i64[0];
  if (v781 != v782)
  {
    v783 = 0;
    do
    {
      v784 = *(_QWORD *)(v781 + 8);
      if (*(_BYTE *)(v784 + 20))
        v785 = v783;
      else
        v785 = -1;
      v783 += *(unsigned __int8 *)(v784 + 20);
      *(_DWORD *)v784 = v785;
      v781 += 16;
    }
    while (v781 != v782);
  }
  v786 = a1[12].i64[1];
  v787 = a1[13].i64[0];
  if (v786 != v787)
  {
    v788 = 0;
    do
    {
      v789 = *(_QWORD *)(v786 + 8);
      if (*(_BYTE *)(v789 + 20))
        v790 = v788;
      else
        v790 = -1;
      v788 += *(unsigned __int8 *)(v789 + 20);
      *(_DWORD *)v789 = v790;
      v786 += 16;
    }
    while (v786 != v787);
  }
  v791 = a1[18].i64[1];
  v792 = a1[19].i64[0];
  if (v791 != v792)
  {
    v793 = 0;
    do
    {
      v794 = *(_QWORD *)(v791 + 8);
      if (*(_BYTE *)(v794 + 20))
        v795 = v793;
      else
        v795 = -1;
      v793 += *(unsigned __int8 *)(v794 + 20);
      *(_DWORD *)v794 = v795;
      v791 += 16;
    }
    while (v791 != v792);
  }
  v796 = a1[24].i64[1];
  v797 = a1[25].i64[0];
  if (v796 != v797)
  {
    v798 = 0;
    do
    {
      v799 = *(_QWORD *)(v796 + 8);
      if (*(_BYTE *)(v799 + 20))
        v800 = v798;
      else
        v800 = -1;
      v798 += *(unsigned __int8 *)(v799 + 20);
      *(_DWORD *)v799 = v800;
      v796 += 16;
    }
    while (v796 != v797);
  }
  v801 = a1[30].i64[1];
  v802 = a1[31].i64[0];
  if (v801 != v802)
  {
    v803 = 0;
    do
    {
      v804 = *(_QWORD *)(v801 + 8);
      if (*(_BYTE *)(v804 + 20))
        v805 = v803;
      else
        v805 = -1;
      v803 += *(unsigned __int8 *)(v804 + 20);
      *(_DWORD *)v804 = v805;
      v801 += 16;
    }
    while (v801 != v802);
  }
  v806 = a1[36].i64[1];
  v807 = a1[37].i64[0];
  if (v806 != v807)
  {
    v808 = 0;
    do
    {
      v809 = *(_QWORD *)(v806 + 8);
      if (*(_BYTE *)(v809 + 20))
        v810 = v808;
      else
        v810 = -1;
      v808 += *(unsigned __int8 *)(v809 + 20);
      *(_DWORD *)v809 = v810;
      v806 += 16;
    }
    while (v806 != v807);
  }
  v811 = a1[42].i64[1];
  v812 = a1[43].i64[0];
  if (v811 != v812)
  {
    v813 = 0;
    do
    {
      v814 = *(_QWORD *)(v811 + 8);
      if (*(_BYTE *)(v814 + 20))
        v815 = v813;
      else
        v815 = -1;
      v813 += *(unsigned __int8 *)(v814 + 20);
      *(_DWORD *)v814 = v815;
      v811 += 16;
    }
    while (v811 != v812);
  }
}

void sub_20F7A1720(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void *v2;

  if (v2)
  {
    operator delete(v2);
    sub_20F59A618(v1);
    _Unwind_Resume(a1);
  }
  sub_20F59A618(v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_20F7A17A8(uint64_t *result)
{
  _QWORD *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  int32x4_t *v6;
  int32x4_t v7;
  int32x4_t v8;
  unsigned int *v9;
  unsigned int *v10;
  uint64_t v11;
  int v12;
  unint64_t *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t **v21;
  uint64_t **v22;
  unsigned int v23;
  _DWORD *v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  int32x4_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t **v35;
  uint64_t **v36;
  unsigned int v37;
  _DWORD *v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t v41;
  int32x4_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t **v49;
  uint64_t **v50;
  unsigned int v51;
  _DWORD *v52;
  uint64_t v53;
  uint64_t *v54;
  int32x4_t *v55;
  int32x4_t v56;
  int32x4_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t *v61;
  uint64_t **v62;
  uint64_t **v63;
  unsigned int v64;
  _DWORD *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t *v69;
  uint64_t v70;
  int32x4_t v71;
  unsigned int *v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  _QWORD *v76;
  uint64_t v77;
  uint64_t *v78;
  uint64_t **v79;
  uint64_t **v80;
  unsigned int v81;
  uint64_t *v82;
  _DWORD *v83;
  uint64_t v84;
  _QWORD *v85;
  _QWORD *v86;
  uint64_t *v87;
  unsigned int *v88;
  unsigned int *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  _QWORD *v93;
  int v94;
  unint64_t *v95;
  _QWORD *v96;
  uint64_t v97;
  unint64_t v98;
  uint64_t v99;
  uint64_t *v100;
  uint64_t **v101;
  uint64_t **v102;
  unsigned int v103;
  _DWORD *v104;
  uint64_t v105;
  uint64_t *v106;
  uint64_t v107;
  int32x4_t v108;
  uint64_t v109;
  unint64_t v110;
  uint64_t v111;
  unint64_t v112;
  uint64_t v113;
  uint64_t *v114;
  uint64_t **v115;
  uint64_t **v116;
  unsigned int v117;
  _DWORD *v118;
  uint64_t v119;
  uint64_t *v120;
  uint64_t v121;
  int32x4_t v122;
  unsigned int *v123;
  uint64_t v124;
  uint64_t v125;
  unint64_t v126;
  uint64_t v127;
  unint64_t v128;
  uint64_t v129;
  uint64_t *v130;
  uint64_t **v131;
  uint64_t **v132;
  unsigned int v133;
  _DWORD *v134;
  uint64_t v135;
  uint64_t *v136;
  uint64_t v137;
  int32x4_t v138;
  unsigned int *v139;
  uint64_t v140;
  unint64_t v141;
  uint64_t v142;
  unint64_t v143;
  uint64_t v144;
  uint64_t *v145;
  uint64_t **v146;
  uint64_t **v147;
  unsigned int v148;
  _DWORD *v149;
  uint64_t v150;
  uint64_t *v151;
  uint64_t v152;
  int32x4_t v153;
  unsigned int *v154;
  uint64_t v155;
  unint64_t v156;
  uint64_t v157;
  unint64_t v158;
  uint64_t v159;
  uint64_t *v160;
  uint64_t **v161;
  uint64_t **v162;
  unsigned int v163;
  _DWORD *v164;
  uint64_t v165;
  uint64_t *v166;
  uint64_t v167;
  int32x4_t v168;
  unsigned int *v169;
  uint64_t v170;
  unint64_t v171;
  uint64_t v172;
  unint64_t v173;
  uint64_t v174;
  uint64_t *v175;
  uint64_t **v176;
  uint64_t **v177;
  unsigned int v178;
  _DWORD *v179;
  uint64_t v180;
  uint64_t *v181;
  int32x4_t *v182;
  int32x4_t v183;
  int32x4_t v184;
  uint64_t v185;
  unint64_t v186;
  uint64_t v187;
  uint64_t *v188;
  uint64_t **v189;
  uint64_t **v190;
  unsigned int v191;
  _DWORD *v192;
  uint64_t v193;
  uint64_t *v194;
  int32x4_t *v195;
  int32x4_t v196;
  int32x4_t v197;
  unsigned int *v198;
  unsigned int *v199;
  uint64_t v200;
  unint64_t v201;
  uint64_t v202;
  unint64_t v203;
  uint64_t v204;
  uint64_t *v205;
  uint64_t **v206;
  uint64_t **v207;
  unsigned int v208;
  _DWORD *v209;
  uint64_t v210;
  uint64_t *v211;
  int32x4_t *v212;
  int32x4_t v213;
  int32x4_t v214;
  unsigned int *v215;
  unsigned int *v216;
  uint64_t v217;
  uint64_t v218;
  unint64_t v219;
  uint64_t v220;
  unint64_t v221;
  uint64_t v222;
  uint64_t *v223;
  uint64_t **v224;
  uint64_t **v225;
  unsigned int v226;
  _DWORD *v227;
  uint64_t v228;
  uint64_t *v229;
  int32x4_t *v230;
  int32x4_t v231;
  int32x4_t v232;
  unsigned int *v233;
  unsigned int *v234;
  uint64_t v235;
  unint64_t v236;
  uint64_t v237;
  unint64_t v238;
  uint64_t v239;
  uint64_t *v240;
  uint64_t **v241;
  uint64_t **v242;
  unsigned int v243;
  _DWORD *v244;
  uint64_t v245;
  uint64_t *v246;
  int32x4_t *v247;
  int32x4_t v248;
  int32x4_t v249;
  unsigned int *v250;
  unsigned int *v251;
  uint64_t v252;
  uint64_t v253;
  unint64_t v254;
  uint64_t v255;
  unint64_t v256;
  uint64_t v257;
  uint64_t *v258;
  uint64_t **v259;
  uint64_t **v260;
  unsigned int v261;
  _DWORD *v262;
  uint64_t v263;
  uint64_t *v264;
  uint64_t v265;
  int32x4_t v266;
  unsigned int *v267;
  uint64_t v268;
  unint64_t v269;
  uint64_t v270;
  unint64_t v271;
  uint64_t v272;
  uint64_t *v273;
  uint64_t **v274;
  uint64_t **v275;
  unsigned int v276;
  _DWORD *v277;
  uint64_t v278;
  uint64_t *v279;
  uint64_t v280;
  int32x4_t v281;
  uint64_t v282;
  unint64_t v283;
  uint64_t v284;
  uint64_t *v285;
  uint64_t **v286;
  uint64_t **v287;
  unsigned int v288;
  _DWORD *v289;
  uint64_t v290;
  uint64_t *v291;
  uint64_t v292;
  int32x4_t v293;
  unsigned int *v294;
  unsigned int *v295;
  uint64_t v296;
  unint64_t v297;
  uint64_t v298;
  unint64_t v299;
  uint64_t v300;
  uint64_t *v301;
  uint64_t **v302;
  uint64_t **v303;
  unsigned int v304;
  _DWORD *v305;
  uint64_t v306;
  uint64_t *v307;
  uint64_t v308;
  int32x4_t v309;
  unsigned int *v310;
  unsigned int *v311;
  uint64_t v312;
  unint64_t v313;
  uint64_t v314;
  unint64_t v315;
  uint64_t v316;
  uint64_t *v317;
  uint64_t **v318;
  uint64_t **v319;
  unsigned int v320;
  _DWORD *v321;
  uint64_t v322;
  uint64_t *v323;
  uint64_t v324;
  int32x4_t v325;
  unsigned int *v326;
  unsigned int *v327;
  uint64_t v328;
  unint64_t v329;
  uint64_t v330;
  unint64_t v331;
  uint64_t v332;
  uint64_t *v333;
  uint64_t **v334;
  uint64_t **v335;
  unsigned int v336;
  _DWORD *v337;
  uint64_t v338;
  uint64_t *v339;
  int32x4_t *v340;
  int32x4_t v341;
  int32x4_t v342;
  unsigned int *v343;
  uint64_t v344;
  uint64_t v345;
  unint64_t v346;
  uint64_t v347;
  unint64_t v348;
  uint64_t v349;
  uint64_t *v350;
  uint64_t **v351;
  uint64_t **v352;
  unsigned int v353;
  _DWORD *v354;
  uint64_t v355;
  uint64_t *v356;
  int32x4_t *v357;
  int32x4_t v358;
  int32x4_t v359;
  unsigned int *v360;
  uint64_t v361;
  unint64_t v362;
  uint64_t v363;
  unint64_t v364;
  uint64_t v365;
  uint64_t *v366;
  uint64_t **v367;
  uint64_t **v368;
  unsigned int v369;
  _DWORD *v370;
  uint64_t v371;
  uint64_t *v372;
  int32x4_t *v373;
  int32x4_t v374;
  int32x4_t v375;
  uint64_t v376;
  unint64_t v377;
  uint64_t v378;
  uint64_t *v379;
  uint64_t **v380;
  uint64_t **v381;
  unsigned int v382;
  _DWORD *v383;
  uint64_t v384;
  uint64_t *v385;
  int32x4_t *v386;
  int32x4_t v387;
  int32x4_t v388;
  unsigned int *v389;
  unsigned int *v390;
  uint64_t v391;
  unint64_t v392;
  uint64_t v393;
  unint64_t v394;
  uint64_t v395;
  uint64_t *v396;
  uint64_t **v397;
  uint64_t **v398;
  unsigned int v399;
  _DWORD *v400;
  uint64_t v401;
  uint64_t *v402;
  unsigned int *v403;
  uint64_t v404;
  unint64_t v405;
  uint64_t v406;
  unint64_t v407;
  uint64_t v408;
  uint64_t *v409;
  uint64_t **v410;
  uint64_t **v411;
  unsigned int v412;
  _DWORD *v413;
  uint64_t v414;
  uint64_t *v415;
  int32x4_t *v416;
  int32x4_t v417;
  int32x4_t v418;
  unsigned int *v419;
  uint64_t v420;
  unint64_t v421;
  uint64_t v422;
  unint64_t v423;
  uint64_t v424;
  uint64_t *v425;
  uint64_t **v426;
  uint64_t **v427;
  unsigned int v428;
  _DWORD *v429;
  uint64_t v430;
  uint64_t *v431;
  unsigned int *v432;
  uint64_t v433;
  unint64_t v434;
  uint64_t v435;
  unint64_t v436;
  uint64_t v437;
  uint64_t *v438;
  uint64_t **v439;
  uint64_t **v440;
  unsigned int v441;
  _DWORD *v442;
  uint64_t v443;
  uint64_t *v444;
  unsigned int *v445;
  uint64_t v446;
  unint64_t v447;
  uint64_t v448;
  unint64_t v449;
  uint64_t v450;
  uint64_t *v451;
  uint64_t **v452;
  uint64_t **v453;
  unsigned int v454;
  _DWORD *v455;
  uint64_t v456;
  uint64_t *v457;
  uint64_t v458;
  unint64_t v459;
  uint64_t v460;
  uint64_t *v461;
  uint64_t **v462;
  uint64_t **v463;
  unsigned int v464;
  _DWORD *v465;
  uint64_t v466;
  _QWORD *v467;
  _QWORD *v468;
  uint64_t *v469;
  int32x4_t *v470;
  int32x4_t v471;
  int32x4_t v472;
  unsigned int *v473;
  unsigned int *v474;
  uint64_t v475;
  uint64_t v476;
  uint64_t v477;
  int v478;
  unint64_t *v479;
  _QWORD *v480;
  _QWORD *v481;
  uint64_t v482;
  unint64_t v483;
  uint64_t v484;
  uint64_t *v485;
  uint64_t **v486;
  uint64_t **v487;
  unsigned int v488;
  _DWORD *v489;
  uint64_t v490;
  uint64_t *v491;
  uint64_t v492;
  int32x4_t v493;
  uint64_t v494;
  unint64_t v495;
  uint64_t v496;
  unint64_t v497;
  uint64_t v498;
  uint64_t *v499;
  uint64_t **v500;
  uint64_t **v501;
  unsigned int v502;
  _DWORD *v503;
  uint64_t v504;
  uint64_t *v505;
  uint64_t v506;
  int32x4_t v507;
  unsigned int *v508;
  uint64_t v509;
  uint64_t v510;
  unint64_t v511;
  uint64_t v512;
  unint64_t v513;
  uint64_t v514;
  uint64_t *v515;
  uint64_t **v516;
  uint64_t **v517;
  unsigned int v518;
  _DWORD *v519;
  uint64_t v520;
  uint64_t *v521;
  uint64_t v522;
  int32x4_t v523;
  unsigned int *v524;
  uint64_t v525;
  unint64_t v526;
  uint64_t v527;
  unint64_t v528;
  uint64_t v529;
  uint64_t *v530;
  uint64_t **v531;
  uint64_t **v532;
  unsigned int v533;
  _DWORD *v534;
  uint64_t v535;
  uint64_t *v536;
  uint64_t v537;
  int32x4_t v538;
  unsigned int *v539;
  uint64_t v540;
  unint64_t v541;
  uint64_t v542;
  unint64_t v543;
  uint64_t v544;
  uint64_t *v545;
  uint64_t **v546;
  uint64_t **v547;
  unsigned int v548;
  _DWORD *v549;
  uint64_t v550;
  uint64_t *v551;
  int32x4_t *v552;
  int32x4_t v553;
  int32x4_t v554;
  uint64_t v555;
  unint64_t v556;
  uint64_t v557;
  uint64_t *v558;
  uint64_t **v559;
  uint64_t **v560;
  unsigned int v561;
  _DWORD *v562;
  uint64_t v563;
  uint64_t *v564;
  int32x4_t *v565;
  int32x4_t v566;
  int32x4_t v567;
  unsigned int *v568;
  unsigned int *v569;
  uint64_t v570;
  unint64_t v571;
  uint64_t v572;
  unint64_t v573;
  uint64_t v574;
  uint64_t *v575;
  uint64_t **v576;
  uint64_t **v577;
  unsigned int v578;
  _DWORD *v579;
  uint64_t v580;
  uint64_t *v581;
  int32x4_t *v582;
  int32x4_t v583;
  int32x4_t v584;
  unsigned int *v585;
  unsigned int *v586;
  uint64_t v587;
  uint64_t v588;
  unint64_t v589;
  uint64_t v590;
  unint64_t v591;
  uint64_t v592;
  uint64_t *v593;
  uint64_t **v594;
  uint64_t **v595;
  unsigned int v596;
  _DWORD *v597;
  uint64_t v598;
  uint64_t *v599;
  int32x4_t *v600;
  int32x4_t v601;
  int32x4_t v602;
  unsigned int *v603;
  unsigned int *v604;
  uint64_t v605;
  uint64_t v606;
  unint64_t v607;
  uint64_t v608;
  unint64_t v609;
  uint64_t v610;
  uint64_t *v611;
  uint64_t **v612;
  uint64_t **v613;
  unsigned int v614;
  _DWORD *v615;
  uint64_t v616;
  uint64_t *v617;
  uint64_t v618;
  int32x4_t v619;
  unsigned int *v620;
  uint64_t v621;
  unint64_t v622;
  uint64_t v623;
  unint64_t v624;
  uint64_t v625;
  uint64_t *v626;
  uint64_t **v627;
  uint64_t **v628;
  unsigned int v629;
  _DWORD *v630;
  uint64_t v631;
  uint64_t *v632;
  uint64_t v633;
  int32x4_t v634;
  uint64_t v635;
  unint64_t v636;
  uint64_t v637;
  uint64_t *v638;
  uint64_t **v639;
  uint64_t **v640;
  unsigned int v641;
  _DWORD *v642;
  uint64_t v643;
  uint64_t *v644;
  uint64_t v645;
  int32x4_t v646;
  unsigned int *v647;
  unsigned int *v648;
  uint64_t v649;
  unint64_t v650;
  uint64_t v651;
  unint64_t v652;
  unsigned int *v653;
  uint64_t v654;
  unint64_t v655;
  uint64_t v656;
  unint64_t v657;
  uint64_t v658;
  uint64_t *v659;
  uint64_t **v660;
  uint64_t **v661;
  unsigned int v662;
  _DWORD *v663;
  uint64_t v664;
  uint64_t *v665;
  uint64_t v666;
  uint64_t *v667;
  uint64_t **v668;
  uint64_t **v669;
  unsigned int v670;
  _DWORD *v671;
  uint64_t v672;
  uint64_t *v673;
  int32x4_t *v674;
  int32x4_t v675;
  int32x4_t v676;
  unsigned int *v677;
  uint64_t v678;
  int32x4_t v679;
  uint64_t v680;
  uint64_t v681;
  unint64_t v682;
  uint64_t v683;
  unint64_t v684;
  uint64_t v685;
  uint64_t *v686;
  uint64_t **v687;
  uint64_t **v688;
  unsigned int v689;
  _DWORD *v690;
  uint64_t v691;
  uint64_t *v692;
  int32x4_t *v693;
  int32x4_t v694;
  int32x4_t v695;
  unsigned int *v696;
  uint64_t v697;
  unint64_t v698;
  uint64_t v699;
  unint64_t v700;
  uint64_t v701;
  uint64_t *v702;
  uint64_t **v703;
  uint64_t **v704;
  unsigned int v705;
  _DWORD *v706;
  uint64_t v707;
  uint64_t *v708;
  int32x4_t *v709;
  int32x4_t v710;
  int32x4_t v711;
  uint64_t v712;
  unint64_t v713;
  uint64_t v714;
  uint64_t *v715;
  uint64_t **v716;
  uint64_t **v717;
  unsigned int v718;
  _DWORD *v719;
  uint64_t v720;
  _QWORD *v721;
  _QWORD *v722;
  uint64_t *v723;
  uint64_t v724;
  uint64_t v725;
  uint64_t *v726;
  uint64_t v727;
  int32x4_t v728;
  unsigned int *v729;
  unsigned int *v730;
  uint64_t v731;
  int v732;
  unint64_t *v733;
  _QWORD *v734;
  _QWORD *v735;
  _QWORD *v736;
  uint64_t v737;
  unint64_t v738;
  uint64_t v739;
  uint64_t *v740;
  uint64_t **v741;
  uint64_t **v742;
  unsigned int v743;
  _DWORD *v744;
  uint64_t v745;
  uint64_t *v746;
  uint64_t v747;
  int32x4_t v748;
  uint64_t v749;
  uint64_t v750;
  unint64_t v751;
  uint64_t v752;
  unint64_t v753;
  uint64_t v754;
  uint64_t *v755;
  uint64_t **v756;
  uint64_t **v757;
  unsigned int v758;
  _DWORD *v759;
  uint64_t v760;
  uint64_t *v761;
  uint64_t v762;
  int32x4_t v763;
  uint64_t v764;
  uint64_t v765;
  unint64_t v766;
  uint64_t v767;
  unint64_t v768;
  uint64_t v769;
  uint64_t *v770;
  uint64_t **v771;
  uint64_t **v772;
  unsigned int v773;
  _DWORD *v774;
  uint64_t v775;
  uint64_t *v776;
  uint64_t v777;
  int32x4_t v778;
  uint64_t v779;
  unint64_t v780;
  uint64_t v781;
  uint64_t *v782;
  uint64_t **v783;
  uint64_t **v784;
  unsigned int v785;
  _DWORD *v786;
  uint64_t v787;
  uint64_t *v788;
  unint64_t *v789;
  unint64_t *v790;
  unint64_t *v791;
  _QWORD *v792;
  _QWORD *v793;
  unint64_t *v794;
  unint64_t *v795;
  unint64_t *v796;
  _QWORD *v797;
  _QWORD *v798;
  _QWORD *v799;
  _QWORD *v800;
  _QWORD *v801;
  _QWORD *v802;
  _QWORD *v803;
  _QWORD *v804;
  uint64_t *v805;
  uint64_t *v806;
  uint64_t *v807;
  uint64_t *v808;

  v2 = (uint64_t *)*result;
  v1 = (_QWORD *)result[1];
  v788 = result;
  v3 = v1[97];
  v4 = v1[98];
  if (v3 != v4)
  {
    v805 = (uint64_t *)*result;
    do
    {
      v10 = *(unsigned int **)(v3 + 208);
      v9 = *(unsigned int **)(v3 + 216);
      if (((*((unsigned __int8 *)v9 + 4) >> 2) & 1) == (char)(32 * *((_BYTE *)v10 + 4)) >> 7)
      {
        v11 = v2[1];
        if (!*((_BYTE *)v10 + 20) || *v10 != -1)
        {
          v12 = *((unsigned __int8 *)v9 + 20);
          if (!*((_BYTE *)v9 + 20) || *v9 != -1)
          {
            v14 = (_QWORD *)v2[2];
            v13 = (unint64_t *)v2[3];
            v15 = (_QWORD *)v2[4];
            v16 = (_QWORD *)v2[5];
            if (*((_BYTE *)v10 + 20))
            {
              v17 = *(_QWORD *)(v11 + 17864) + *v10;
              v18 = *(_QWORD *)(*v14 + 8 * v17);
              if (v18 <= *v13)
              {
                v19 = *v15 + 24 * v17;
                v21 = (uint64_t **)(v19 + 8);
                v20 = *(uint64_t **)(v19 + 8);
                if (v20)
                {
                  while (1)
                  {
                    while (1)
                    {
                      v22 = (uint64_t **)v20;
                      v23 = *((_DWORD *)v20 + 7);
                      if (v23 <= v17)
                        break;
                      v20 = *v22;
                      v21 = v22;
                      if (!*v22)
                        goto LABEL_20;
                    }
                    if (v23 >= v17)
                      break;
                    v20 = v22[1];
                    if (!v20)
                    {
                      v21 = v22 + 1;
                      goto LABEL_20;
                    }
                  }
                }
                else
                {
                  v22 = (uint64_t **)(v19 + 8);
LABEL_20:
                  v789 = (unint64_t *)v2[3];
                  v797 = (_QWORD *)v2[4];
                  v24 = operator new(0x20uLL);
                  v24[7] = v17;
                  *(_QWORD *)v24 = 0;
                  *((_QWORD *)v24 + 1) = 0;
                  *((_QWORD *)v24 + 2) = v22;
                  *v21 = (uint64_t *)v24;
                  v25 = **(_QWORD **)v19;
                  if (v25)
                  {
                    *(_QWORD *)v19 = v25;
                    v26 = *v21;
                  }
                  else
                  {
                    v26 = (uint64_t *)v24;
                  }
                  result = sub_20E868578(*(uint64_t **)(v19 + 8), v26);
                  ++*(_QWORD *)(v19 + 16);
                  v27 = *v16 + 4 * v18;
                  v28.i64[0] = 0x600000006;
                  v28.i64[1] = 0x600000006;
                  *(int32x4_t *)v27 = vaddq_s32(*(int32x4_t *)v27, v28);
                  *(int32x2_t *)(v27 + 16) = vadd_s32(*(int32x2_t *)(v27 + 16), (int32x2_t)0x600000006);
                  v10 = *(unsigned int **)(v3 + 208);
                  v9 = *(unsigned int **)(v3 + 216);
                  v12 = *((unsigned __int8 *)v9 + 20);
                  v15 = v797;
                  v2 = v805;
                  v13 = v789;
                }
              }
            }
            if (v12)
            {
              if (*((_BYTE *)v10 + 20))
              {
                v29 = *(_QWORD *)(v11 + 17872) + *v9;
                v30 = *(_QWORD *)(*v14 + 8 * v29);
                v31 = *(_QWORD *)(v11 + 17864) + *v10;
                v32 = *(_QWORD *)(*v14 + 8 * v31);
                if (v30 <= v32 && v30 <= *v13)
                {
                  v33 = *v15 + 24 * v31;
                  v35 = (uint64_t **)(v33 + 8);
                  v34 = *(uint64_t **)(v33 + 8);
                  if (v34)
                  {
                    while (1)
                    {
                      while (1)
                      {
                        v36 = (uint64_t **)v34;
                        v37 = *((_DWORD *)v34 + 7);
                        if (v37 <= v29)
                          break;
                        v34 = *v36;
                        v35 = v36;
                        if (!*v36)
                          goto LABEL_35;
                      }
                      if (v37 >= v29)
                        break;
                      v34 = v36[1];
                      if (!v34)
                      {
                        v35 = v36 + 1;
                        goto LABEL_35;
                      }
                    }
                  }
                  else
                  {
                    v36 = (uint64_t **)(v33 + 8);
LABEL_35:
                    v790 = v13;
                    v798 = v15;
                    v38 = operator new(0x20uLL);
                    v38[7] = v29;
                    *(_QWORD *)v38 = 0;
                    *((_QWORD *)v38 + 1) = 0;
                    *((_QWORD *)v38 + 2) = v36;
                    *v35 = (uint64_t *)v38;
                    v39 = **(_QWORD **)v33;
                    if (v39)
                    {
                      *(_QWORD *)v33 = v39;
                      v40 = *v35;
                    }
                    else
                    {
                      v40 = (uint64_t *)v38;
                    }
                    result = sub_20E868578(*(uint64_t **)(v33 + 8), v40);
                    ++*(_QWORD *)(v33 + 16);
                    v41 = *v16 + 4 * v32;
                    v42.i64[0] = 0x900000009;
                    v42.i64[1] = 0x900000009;
                    *(int32x4_t *)v41 = vaddq_s32(*(int32x4_t *)v41, v42);
                    *(int32x2_t *)(v41 + 16) = vadd_s32(*(int32x2_t *)(v41 + 16), (int32x2_t)0x900000009);
                    v10 = *(unsigned int **)(v3 + 208);
                    v9 = *(unsigned int **)(v3 + 216);
                    v15 = v798;
                    v2 = v805;
                    v13 = v790;
                  }
                }
              }
            }
            if (*((_BYTE *)v10 + 20))
            {
              if (*((_BYTE *)v9 + 20))
              {
                v43 = *(_QWORD *)(v11 + 17864) + *v10;
                v44 = *(_QWORD *)(*v14 + 8 * v43);
                v45 = *(_QWORD *)(v11 + 17872) + *v9;
                v46 = *(_QWORD *)(*v14 + 8 * v45);
                if (v44 <= v46 && v44 <= *v13)
                {
                  v47 = *v15 + 24 * v45;
                  v49 = (uint64_t **)(v47 + 8);
                  v48 = *(uint64_t **)(v47 + 8);
                  if (v48)
                  {
                    while (1)
                    {
                      while (1)
                      {
                        v50 = (uint64_t **)v48;
                        v51 = *((_DWORD *)v48 + 7);
                        if (v51 <= v43)
                          break;
                        v48 = *v50;
                        v49 = v50;
                        if (!*v50)
                          goto LABEL_50;
                      }
                      if (v51 >= v43)
                        break;
                      v48 = v50[1];
                      if (!v48)
                      {
                        v49 = v50 + 1;
                        goto LABEL_50;
                      }
                    }
                  }
                  else
                  {
                    v50 = (uint64_t **)(v47 + 8);
LABEL_50:
                    v791 = v13;
                    v799 = v15;
                    v52 = operator new(0x20uLL);
                    v52[7] = v43;
                    *(_QWORD *)v52 = 0;
                    *((_QWORD *)v52 + 1) = 0;
                    *((_QWORD *)v52 + 2) = v50;
                    *v49 = (uint64_t *)v52;
                    v53 = **(_QWORD **)v47;
                    if (v53)
                    {
                      *(_QWORD *)v47 = v53;
                      v54 = *v49;
                    }
                    else
                    {
                      v54 = (uint64_t *)v52;
                    }
                    result = sub_20E868578(*(uint64_t **)(v47 + 8), v54);
                    ++*(_QWORD *)(v47 + 16);
                    v55 = (int32x4_t *)(*v16 + 4 * v46);
                    v56.i64[0] = 0x600000006;
                    v56.i64[1] = 0x600000006;
                    v57 = vaddq_s32(v55[1], v56);
                    *v55 = vaddq_s32(*v55, v56);
                    v55[1] = v57;
                    v55[2].i32[0] += 6;
                    v9 = *(unsigned int **)(v3 + 216);
                    v15 = v799;
                    v2 = v805;
                    v13 = v791;
                  }
                }
              }
            }
            if (*((_BYTE *)v9 + 20))
            {
              v58 = *(_QWORD *)(v11 + 17872) + *v9;
              v59 = *(_QWORD *)(*v14 + 8 * v58);
              if (v59 <= *v13)
              {
                v60 = *v15 + 24 * v58;
                v62 = (uint64_t **)(v60 + 8);
                v61 = *(uint64_t **)(v60 + 8);
                if (v61)
                {
                  while (1)
                  {
                    while (1)
                    {
                      v63 = (uint64_t **)v61;
                      v64 = *((_DWORD *)v61 + 7);
                      if (v64 <= v58)
                        break;
                      v61 = *v63;
                      v62 = v63;
                      if (!*v63)
                        goto LABEL_63;
                    }
                    if (v64 >= v58)
                      break;
                    v61 = v63[1];
                    if (!v61)
                    {
                      v62 = v63 + 1;
                      goto LABEL_63;
                    }
                  }
                }
                else
                {
                  v63 = (uint64_t **)(v60 + 8);
LABEL_63:
                  v65 = operator new(0x20uLL);
                  v65[7] = v58;
                  *(_QWORD *)v65 = 0;
                  *((_QWORD *)v65 + 1) = 0;
                  *((_QWORD *)v65 + 2) = v63;
                  *v62 = (uint64_t *)v65;
                  v66 = **(_QWORD **)v60;
                  if (v66)
                  {
                    *(_QWORD *)v60 = v66;
                    v5 = *v62;
                  }
                  else
                  {
                    v5 = (uint64_t *)v65;
                  }
                  result = sub_20E868578(*(uint64_t **)(v60 + 8), v5);
                  ++*(_QWORD *)(v60 + 16);
                  v6 = (int32x4_t *)(*v16 + 4 * v59);
                  v7.i64[0] = 0x900000009;
                  v7.i64[1] = 0x900000009;
                  v8 = vaddq_s32(v6[1], v7);
                  *v6 = vaddq_s32(*v6, v7);
                  v6[1] = v8;
                  v6[2].i32[0] += 9;
                  v2 = v805;
                }
              }
            }
          }
        }
      }
      v3 += 504;
    }
    while (v3 != v4);
    v2 = (uint64_t *)*v788;
    v1 = (_QWORD *)v788[1];
  }
  v67 = v1[100];
  v68 = v1[101];
  if (v67 != v68)
  {
    do
    {
      v72 = *(unsigned int **)(v67 + 136);
      if ((v72[1] & 4) == 0)
      {
        if (*((_BYTE *)v72 + 20))
        {
          v73 = *v72;
          if ((_DWORD)v73 != -1)
          {
            v74 = *(_QWORD *)(v2[1] + 17864) + v73;
            v75 = *(_QWORD *)(*(_QWORD *)v2[2] + 8 * v74);
            if (v75 <= *(_QWORD *)v2[3])
            {
              v76 = (_QWORD *)v2[5];
              v77 = *(_QWORD *)v2[4] + 24 * v74;
              v79 = (uint64_t **)(v77 + 8);
              v78 = *(uint64_t **)(v77 + 8);
              if (v78)
              {
                while (1)
                {
                  while (1)
                  {
                    v80 = (uint64_t **)v78;
                    v81 = *((_DWORD *)v78 + 7);
                    if (v81 <= v74)
                      break;
                    v78 = *v80;
                    v79 = v80;
                    if (!*v80)
                      goto LABEL_82;
                  }
                  if (v81 >= v74)
                    break;
                  v78 = v80[1];
                  if (!v78)
                  {
                    v79 = v80 + 1;
                    goto LABEL_82;
                  }
                }
              }
              else
              {
                v80 = (uint64_t **)(v77 + 8);
LABEL_82:
                v82 = v2;
                v83 = operator new(0x20uLL);
                v83[7] = v74;
                *(_QWORD *)v83 = 0;
                *((_QWORD *)v83 + 1) = 0;
                *((_QWORD *)v83 + 2) = v80;
                *v79 = (uint64_t *)v83;
                v84 = **(_QWORD **)v77;
                if (v84)
                {
                  *(_QWORD *)v77 = v84;
                  v69 = *v79;
                }
                else
                {
                  v69 = (uint64_t *)v83;
                }
                result = sub_20E868578(*(uint64_t **)(v77 + 8), v69);
                ++*(_QWORD *)(v77 + 16);
                v70 = *v76 + 4 * v75;
                v71.i64[0] = 0x600000006;
                v71.i64[1] = 0x600000006;
                *(int32x4_t *)v70 = vaddq_s32(*(int32x4_t *)v70, v71);
                *(int32x2_t *)(v70 + 16) = vadd_s32(*(int32x2_t *)(v70 + 16), (int32x2_t)0x600000006);
                v2 = v82;
              }
            }
          }
        }
      }
      v67 += 280;
    }
    while (v67 != v68);
    v2 = (uint64_t *)*v788;
    v1 = (_QWORD *)v788[1];
  }
  v85 = (_QWORD *)v1[103];
  v86 = (_QWORD *)v1[104];
  if (v85 == v86)
    goto LABEL_468;
  v806 = v2;
  do
  {
    v88 = (unsigned int *)v85[962];
    v89 = (unsigned int *)v85[963];
    v90 = v85[964];
    v91 = v85[965];
    v92 = v85[966];
    if (((*((unsigned __int8 *)v89 + 4) >> 2) & 1)
       + ((*((unsigned __int8 *)v88 + 4) >> 2) & 1)
       + ((*(unsigned __int8 *)(v90 + 4) >> 2) & 1)
       + ((*(unsigned __int8 *)(v91 + 4) >> 2) & 1) != (char)(32 * *(_BYTE *)(v92 + 4)) >> 7)
      goto LABEL_89;
    v93 = (_QWORD *)v2[1];
    if (*((_BYTE *)v88 + 20))
    {
      if (*v88 == -1)
        goto LABEL_89;
    }
    v94 = *((unsigned __int8 *)v89 + 20);
    if (*((_BYTE *)v89 + 20))
    {
      if (*v89 == -1)
        goto LABEL_89;
    }
    if (*(_BYTE *)(v90 + 20) && *(_DWORD *)v90 == -1
      || *(_BYTE *)(v91 + 20) && *(_DWORD *)v91 == -1
      || *(_BYTE *)(v92 + 20) && *(_DWORD *)v92 == -1)
    {
      goto LABEL_89;
    }
    v96 = (_QWORD *)v2[2];
    v95 = (unint64_t *)v2[3];
    v792 = (_QWORD *)v2[5];
    v800 = (_QWORD *)v2[4];
    if (*((_BYTE *)v88 + 20))
    {
      v97 = v93[2233] + *v88;
      v98 = *(_QWORD *)(*v96 + 8 * v97);
      if (v98 <= *v95)
      {
        v99 = *v800 + 24 * v97;
        v101 = (uint64_t **)(v99 + 8);
        v100 = *(uint64_t **)(v99 + 8);
        if (v100)
        {
          while (1)
          {
            while (1)
            {
              v102 = (uint64_t **)v100;
              v103 = *((_DWORD *)v100 + 7);
              if (v103 <= v97)
                break;
              v100 = *v102;
              v101 = v102;
              if (!*v102)
                goto LABEL_110;
            }
            if (v103 >= v97)
              break;
            v100 = v102[1];
            if (!v100)
            {
              v101 = v102 + 1;
              goto LABEL_110;
            }
          }
        }
        else
        {
          v102 = (uint64_t **)(v99 + 8);
LABEL_110:
          v104 = operator new(0x20uLL);
          v104[7] = v97;
          *(_QWORD *)v104 = 0;
          *((_QWORD *)v104 + 1) = 0;
          *((_QWORD *)v104 + 2) = v102;
          *v101 = (uint64_t *)v104;
          v105 = **(_QWORD **)v99;
          if (v105)
          {
            *(_QWORD *)v99 = v105;
            v106 = *v101;
          }
          else
          {
            v106 = (uint64_t *)v104;
          }
          result = sub_20E868578(*(uint64_t **)(v99 + 8), v106);
          ++*(_QWORD *)(v99 + 16);
          v107 = *v792 + 4 * v98;
          v108.i64[0] = 0x600000006;
          v108.i64[1] = 0x600000006;
          *(int32x4_t *)v107 = vaddq_s32(*(int32x4_t *)v107, v108);
          *(int32x2_t *)(v107 + 16) = vadd_s32(*(int32x2_t *)(v107 + 16), (int32x2_t)0x600000006);
          v89 = (unsigned int *)v85[963];
          v94 = *((unsigned __int8 *)v89 + 20);
          v88 = (unsigned int *)v85[962];
          v2 = v806;
        }
      }
    }
    if (v94)
    {
      if (*((_BYTE *)v88 + 20))
      {
        v109 = v93[2234] + *v89;
        v110 = *(_QWORD *)(*v96 + 8 * v109);
        v111 = v93[2233] + *v88;
        v112 = *(_QWORD *)(*v96 + 8 * v111);
        if (v110 <= v112 && v110 <= *v95)
        {
          v113 = *v800 + 24 * v111;
          v115 = (uint64_t **)(v113 + 8);
          v114 = *(uint64_t **)(v113 + 8);
          if (v114)
          {
            while (1)
            {
              while (1)
              {
                v116 = (uint64_t **)v114;
                v117 = *((_DWORD *)v114 + 7);
                if (v117 <= v109)
                  break;
                v114 = *v116;
                v115 = v116;
                if (!*v116)
                  goto LABEL_125;
              }
              if (v117 >= v109)
                break;
              v114 = v116[1];
              if (!v114)
              {
                v115 = v116 + 1;
                goto LABEL_125;
              }
            }
          }
          else
          {
            v116 = (uint64_t **)(v113 + 8);
LABEL_125:
            v118 = operator new(0x20uLL);
            v118[7] = v109;
            *(_QWORD *)v118 = 0;
            *((_QWORD *)v118 + 1) = 0;
            *((_QWORD *)v118 + 2) = v116;
            *v115 = (uint64_t *)v118;
            v119 = **(_QWORD **)v113;
            if (v119)
            {
              *(_QWORD *)v113 = v119;
              v120 = *v115;
            }
            else
            {
              v120 = (uint64_t *)v118;
            }
            result = sub_20E868578(*(uint64_t **)(v113 + 8), v120);
            ++*(_QWORD *)(v113 + 16);
            v121 = *v792 + 4 * v112;
            v122.i64[0] = 0x900000009;
            v122.i64[1] = 0x900000009;
            *(int32x4_t *)v121 = vaddq_s32(*(int32x4_t *)v121, v122);
            *(int32x2_t *)(v121 + 16) = vadd_s32(*(int32x2_t *)(v121 + 16), (int32x2_t)0x900000009);
            v88 = (unsigned int *)v85[962];
            v2 = v806;
          }
        }
      }
    }
    v123 = (unsigned int *)v85[964];
    if (*((_BYTE *)v123 + 20))
    {
      if (*((_BYTE *)v88 + 20))
      {
        v124 = v93[2233];
        v125 = v124 + *v123;
        v126 = *(_QWORD *)(*v96 + 8 * v125);
        v127 = v124 + *v88;
        v128 = *(_QWORD *)(*v96 + 8 * v127);
        if (v126 <= v128 && v126 <= *v95)
        {
          v129 = *v800 + 24 * v127;
          v131 = (uint64_t **)(v129 + 8);
          v130 = *(uint64_t **)(v129 + 8);
          if (v130)
          {
            while (1)
            {
              while (1)
              {
                v132 = (uint64_t **)v130;
                v133 = *((_DWORD *)v130 + 7);
                if (v133 <= v125)
                  break;
                v130 = *v132;
                v131 = v132;
                if (!*v132)
                  goto LABEL_140;
              }
              if (v133 >= v125)
                break;
              v130 = v132[1];
              if (!v130)
              {
                v131 = v132 + 1;
                goto LABEL_140;
              }
            }
          }
          else
          {
            v132 = (uint64_t **)(v129 + 8);
LABEL_140:
            v134 = operator new(0x20uLL);
            v134[7] = v125;
            *(_QWORD *)v134 = 0;
            *((_QWORD *)v134 + 1) = 0;
            *((_QWORD *)v134 + 2) = v132;
            *v131 = (uint64_t *)v134;
            v135 = **(_QWORD **)v129;
            if (v135)
            {
              *(_QWORD *)v129 = v135;
              v136 = *v131;
            }
            else
            {
              v136 = (uint64_t *)v134;
            }
            result = sub_20E868578(*(uint64_t **)(v129 + 8), v136);
            ++*(_QWORD *)(v129 + 16);
            v137 = *v792 + 4 * v128;
            v138.i64[0] = 0x600000006;
            v138.i64[1] = 0x600000006;
            *(int32x4_t *)v137 = vaddq_s32(*(int32x4_t *)v137, v138);
            *(int32x2_t *)(v137 + 16) = vadd_s32(*(int32x2_t *)(v137 + 16), (int32x2_t)0x600000006);
            v88 = (unsigned int *)v85[962];
            v2 = v806;
          }
        }
      }
    }
    v139 = (unsigned int *)v85[965];
    if (*((_BYTE *)v139 + 20))
    {
      if (*((_BYTE *)v88 + 20))
      {
        v140 = v93[2234] + *v139;
        v141 = *(_QWORD *)(*v96 + 8 * v140);
        v142 = v93[2233] + *v88;
        v143 = *(_QWORD *)(*v96 + 8 * v142);
        if (v141 <= v143 && v141 <= *v95)
        {
          v144 = *v800 + 24 * v142;
          v146 = (uint64_t **)(v144 + 8);
          v145 = *(uint64_t **)(v144 + 8);
          if (v145)
          {
            while (1)
            {
              while (1)
              {
                v147 = (uint64_t **)v145;
                v148 = *((_DWORD *)v145 + 7);
                if (v148 <= v140)
                  break;
                v145 = *v147;
                v146 = v147;
                if (!*v147)
                  goto LABEL_155;
              }
              if (v148 >= v140)
                break;
              v145 = v147[1];
              if (!v145)
              {
                v146 = v147 + 1;
                goto LABEL_155;
              }
            }
          }
          else
          {
            v147 = (uint64_t **)(v144 + 8);
LABEL_155:
            v149 = operator new(0x20uLL);
            v149[7] = v140;
            *(_QWORD *)v149 = 0;
            *((_QWORD *)v149 + 1) = 0;
            *((_QWORD *)v149 + 2) = v147;
            *v146 = (uint64_t *)v149;
            v150 = **(_QWORD **)v144;
            if (v150)
            {
              *(_QWORD *)v144 = v150;
              v151 = *v146;
            }
            else
            {
              v151 = (uint64_t *)v149;
            }
            result = sub_20E868578(*(uint64_t **)(v144 + 8), v151);
            ++*(_QWORD *)(v144 + 16);
            v152 = *v792 + 4 * v143;
            v153.i64[0] = 0x900000009;
            v153.i64[1] = 0x900000009;
            *(int32x4_t *)v152 = vaddq_s32(*(int32x4_t *)v152, v153);
            *(int32x2_t *)(v152 + 16) = vadd_s32(*(int32x2_t *)(v152 + 16), (int32x2_t)0x900000009);
            v88 = (unsigned int *)v85[962];
            v2 = v806;
          }
        }
      }
    }
    v154 = (unsigned int *)v85[966];
    if (*((_BYTE *)v154 + 20))
    {
      if (*((_BYTE *)v88 + 20))
      {
        v155 = v93[2235] + *v154;
        v156 = *(_QWORD *)(*v96 + 8 * v155);
        v157 = v93[2233] + *v88;
        v158 = *(_QWORD *)(*v96 + 8 * v157);
        if (v156 <= v158 && v156 <= *v95)
        {
          v159 = *v800 + 24 * v157;
          v161 = (uint64_t **)(v159 + 8);
          v160 = *(uint64_t **)(v159 + 8);
          if (v160)
          {
            while (1)
            {
              while (1)
              {
                v162 = (uint64_t **)v160;
                v163 = *((_DWORD *)v160 + 7);
                if (v163 <= v155)
                  break;
                v160 = *v162;
                v161 = v162;
                if (!*v162)
                  goto LABEL_170;
              }
              if (v163 >= v155)
                break;
              v160 = v162[1];
              if (!v160)
              {
                v161 = v162 + 1;
                goto LABEL_170;
              }
            }
          }
          else
          {
            v162 = (uint64_t **)(v159 + 8);
LABEL_170:
            v164 = operator new(0x20uLL);
            v164[7] = v155;
            *(_QWORD *)v164 = 0;
            *((_QWORD *)v164 + 1) = 0;
            *((_QWORD *)v164 + 2) = v162;
            *v161 = (uint64_t *)v164;
            v165 = **(_QWORD **)v159;
            if (v165)
            {
              *(_QWORD *)v159 = v165;
              v166 = *v161;
            }
            else
            {
              v166 = (uint64_t *)v164;
            }
            result = sub_20E868578(*(uint64_t **)(v159 + 8), v166);
            ++*(_QWORD *)(v159 + 16);
            v167 = *v792 + 4 * v158;
            v168.i64[0] = 0x100000001;
            v168.i64[1] = 0x100000001;
            *(int32x4_t *)v167 = vaddq_s32(*(int32x4_t *)v167, v168);
            *(int32x2_t *)(v167 + 16) = vadd_s32(*(int32x2_t *)(v167 + 16), (int32x2_t)0x100000001);
            v88 = (unsigned int *)v85[962];
            v2 = v806;
          }
        }
      }
    }
    v169 = (unsigned int *)v85[963];
    if (*((_BYTE *)v88 + 20))
    {
      if (*((_BYTE *)v169 + 20))
      {
        v170 = v93[2233] + *v88;
        v171 = *(_QWORD *)(*v96 + 8 * v170);
        v172 = v93[2234] + *v169;
        v173 = *(_QWORD *)(*v96 + 8 * v172);
        if (v171 <= v173 && v171 <= *v95)
        {
          v174 = *v800 + 24 * v172;
          v176 = (uint64_t **)(v174 + 8);
          v175 = *(uint64_t **)(v174 + 8);
          if (v175)
          {
            while (1)
            {
              while (1)
              {
                v177 = (uint64_t **)v175;
                v178 = *((_DWORD *)v175 + 7);
                if (v178 <= v170)
                  break;
                v175 = *v177;
                v176 = v177;
                if (!*v177)
                  goto LABEL_185;
              }
              if (v178 >= v170)
                break;
              v175 = v177[1];
              if (!v175)
              {
                v176 = v177 + 1;
                goto LABEL_185;
              }
            }
          }
          else
          {
            v177 = (uint64_t **)(v174 + 8);
LABEL_185:
            v179 = operator new(0x20uLL);
            v179[7] = v170;
            *(_QWORD *)v179 = 0;
            *((_QWORD *)v179 + 1) = 0;
            *((_QWORD *)v179 + 2) = v177;
            *v176 = (uint64_t *)v179;
            v180 = **(_QWORD **)v174;
            if (v180)
            {
              *(_QWORD *)v174 = v180;
              v181 = *v176;
            }
            else
            {
              v181 = (uint64_t *)v179;
            }
            result = sub_20E868578(*(uint64_t **)(v174 + 8), v181);
            ++*(_QWORD *)(v174 + 16);
            v182 = (int32x4_t *)(*v792 + 4 * v173);
            v183.i64[0] = 0x600000006;
            v183.i64[1] = 0x600000006;
            v184 = vaddq_s32(v182[1], v183);
            *v182 = vaddq_s32(*v182, v183);
            v182[1] = v184;
            v182[2].i32[0] += 6;
            v169 = (unsigned int *)v85[963];
            v2 = v806;
          }
        }
      }
    }
    if (*((_BYTE *)v169 + 20))
    {
      v185 = v93[2234] + *v169;
      v186 = *(_QWORD *)(*v96 + 8 * v185);
      if (v186 <= *v95)
      {
        v187 = *v800 + 24 * v185;
        v189 = (uint64_t **)(v187 + 8);
        v188 = *(uint64_t **)(v187 + 8);
        if (v188)
        {
          while (1)
          {
            while (1)
            {
              v190 = (uint64_t **)v188;
              v191 = *((_DWORD *)v188 + 7);
              if (v191 <= v185)
                break;
              v188 = *v190;
              v189 = v190;
              if (!*v190)
                goto LABEL_198;
            }
            if (v191 >= v185)
              break;
            v188 = v190[1];
            if (!v188)
            {
              v189 = v190 + 1;
              goto LABEL_198;
            }
          }
        }
        else
        {
          v190 = (uint64_t **)(v187 + 8);
LABEL_198:
          v192 = operator new(0x20uLL);
          v192[7] = v185;
          *(_QWORD *)v192 = 0;
          *((_QWORD *)v192 + 1) = 0;
          *((_QWORD *)v192 + 2) = v190;
          *v189 = (uint64_t *)v192;
          v193 = **(_QWORD **)v187;
          if (v193)
          {
            *(_QWORD *)v187 = v193;
            v194 = *v189;
          }
          else
          {
            v194 = (uint64_t *)v192;
          }
          result = sub_20E868578(*(uint64_t **)(v187 + 8), v194);
          ++*(_QWORD *)(v187 + 16);
          v195 = (int32x4_t *)(*v792 + 4 * v186);
          v196.i64[0] = 0x900000009;
          v196.i64[1] = 0x900000009;
          v197 = vaddq_s32(v195[1], v196);
          *v195 = vaddq_s32(*v195, v196);
          v195[1] = v197;
          v195[2].i32[0] += 9;
          v2 = v806;
        }
      }
    }
    v198 = (unsigned int *)v85[964];
    if (*((_BYTE *)v198 + 20))
    {
      v199 = (unsigned int *)v85[963];
      if (*((_BYTE *)v199 + 20))
      {
        v200 = v93[2233] + *v198;
        v201 = *(_QWORD *)(*v96 + 8 * v200);
        v202 = v93[2234] + *v199;
        v203 = *(_QWORD *)(*v96 + 8 * v202);
        if (v201 <= v203 && v201 <= *v95)
        {
          v204 = *v800 + 24 * v202;
          v206 = (uint64_t **)(v204 + 8);
          v205 = *(uint64_t **)(v204 + 8);
          if (v205)
          {
            while (1)
            {
              while (1)
              {
                v207 = (uint64_t **)v205;
                v208 = *((_DWORD *)v205 + 7);
                if (v208 <= v200)
                  break;
                v205 = *v207;
                v206 = v207;
                if (!*v207)
                  goto LABEL_213;
              }
              if (v208 >= v200)
                break;
              v205 = v207[1];
              if (!v205)
              {
                v206 = v207 + 1;
                goto LABEL_213;
              }
            }
          }
          else
          {
            v207 = (uint64_t **)(v204 + 8);
LABEL_213:
            v209 = operator new(0x20uLL);
            v209[7] = v200;
            *(_QWORD *)v209 = 0;
            *((_QWORD *)v209 + 1) = 0;
            *((_QWORD *)v209 + 2) = v207;
            *v206 = (uint64_t *)v209;
            v210 = **(_QWORD **)v204;
            if (v210)
            {
              *(_QWORD *)v204 = v210;
              v211 = *v206;
            }
            else
            {
              v211 = (uint64_t *)v209;
            }
            result = sub_20E868578(*(uint64_t **)(v204 + 8), v211);
            ++*(_QWORD *)(v204 + 16);
            v212 = (int32x4_t *)(*v792 + 4 * v203);
            v213.i64[0] = 0x600000006;
            v213.i64[1] = 0x600000006;
            v214 = vaddq_s32(v212[1], v213);
            *v212 = vaddq_s32(*v212, v213);
            v212[1] = v214;
            v212[2].i32[0] += 6;
            v2 = v806;
          }
        }
      }
    }
    v215 = (unsigned int *)v85[965];
    if (*((_BYTE *)v215 + 20))
    {
      v216 = (unsigned int *)v85[963];
      if (*((_BYTE *)v216 + 20))
      {
        v217 = v93[2234];
        v218 = v217 + *v215;
        v219 = *(_QWORD *)(*v96 + 8 * v218);
        v220 = v217 + *v216;
        v221 = *(_QWORD *)(*v96 + 8 * v220);
        if (v219 <= v221 && v219 <= *v95)
        {
          v222 = *v800 + 24 * v220;
          v224 = (uint64_t **)(v222 + 8);
          v223 = *(uint64_t **)(v222 + 8);
          if (v223)
          {
            while (1)
            {
              while (1)
              {
                v225 = (uint64_t **)v223;
                v226 = *((_DWORD *)v223 + 7);
                if (v226 <= v218)
                  break;
                v223 = *v225;
                v224 = v225;
                if (!*v225)
                  goto LABEL_228;
              }
              if (v226 >= v218)
                break;
              v223 = v225[1];
              if (!v223)
              {
                v224 = v225 + 1;
                goto LABEL_228;
              }
            }
          }
          else
          {
            v225 = (uint64_t **)(v222 + 8);
LABEL_228:
            v227 = operator new(0x20uLL);
            v227[7] = v218;
            *(_QWORD *)v227 = 0;
            *((_QWORD *)v227 + 1) = 0;
            *((_QWORD *)v227 + 2) = v225;
            *v224 = (uint64_t *)v227;
            v228 = **(_QWORD **)v222;
            if (v228)
            {
              *(_QWORD *)v222 = v228;
              v229 = *v224;
            }
            else
            {
              v229 = (uint64_t *)v227;
            }
            result = sub_20E868578(*(uint64_t **)(v222 + 8), v229);
            ++*(_QWORD *)(v222 + 16);
            v230 = (int32x4_t *)(*v792 + 4 * v221);
            v231.i64[0] = 0x900000009;
            v231.i64[1] = 0x900000009;
            v232 = vaddq_s32(v230[1], v231);
            *v230 = vaddq_s32(*v230, v231);
            v230[1] = v232;
            v230[2].i32[0] += 9;
            v2 = v806;
          }
        }
      }
    }
    v233 = (unsigned int *)v85[966];
    if (*((_BYTE *)v233 + 20))
    {
      v234 = (unsigned int *)v85[963];
      if (*((_BYTE *)v234 + 20))
      {
        v235 = v93[2235] + *v233;
        v236 = *(_QWORD *)(*v96 + 8 * v235);
        v237 = v93[2234] + *v234;
        v238 = *(_QWORD *)(*v96 + 8 * v237);
        if (v236 <= v238 && v236 <= *v95)
        {
          v239 = *v800 + 24 * v237;
          v241 = (uint64_t **)(v239 + 8);
          v240 = *(uint64_t **)(v239 + 8);
          if (v240)
          {
            while (1)
            {
              while (1)
              {
                v242 = (uint64_t **)v240;
                v243 = *((_DWORD *)v240 + 7);
                if (v243 <= v235)
                  break;
                v240 = *v242;
                v241 = v242;
                if (!*v242)
                  goto LABEL_243;
              }
              if (v243 >= v235)
                break;
              v240 = v242[1];
              if (!v240)
              {
                v241 = v242 + 1;
                goto LABEL_243;
              }
            }
          }
          else
          {
            v242 = (uint64_t **)(v239 + 8);
LABEL_243:
            v244 = operator new(0x20uLL);
            v244[7] = v235;
            *(_QWORD *)v244 = 0;
            *((_QWORD *)v244 + 1) = 0;
            *((_QWORD *)v244 + 2) = v242;
            *v241 = (uint64_t *)v244;
            v245 = **(_QWORD **)v239;
            if (v245)
            {
              *(_QWORD *)v239 = v245;
              v246 = *v241;
            }
            else
            {
              v246 = (uint64_t *)v244;
            }
            result = sub_20E868578(*(uint64_t **)(v239 + 8), v246);
            ++*(_QWORD *)(v239 + 16);
            v247 = (int32x4_t *)(*v792 + 4 * v238);
            v248.i64[0] = 0x100000001;
            v248.i64[1] = 0x100000001;
            v249 = vaddq_s32(v247[1], v248);
            *v247 = vaddq_s32(*v247, v248);
            v247[1] = v249;
            ++v247[2].i32[0];
            v2 = v806;
          }
        }
      }
    }
    v250 = (unsigned int *)v85[962];
    v251 = (unsigned int *)v85[964];
    if (*((_BYTE *)v250 + 20))
    {
      if (*((_BYTE *)v251 + 20))
      {
        v252 = v93[2233];
        v253 = v252 + *v250;
        v254 = *(_QWORD *)(*v96 + 8 * v253);
        v255 = v252 + *v251;
        v256 = *(_QWORD *)(*v96 + 8 * v255);
        if (v254 <= v256 && v254 <= *v95)
        {
          v257 = *v800 + 24 * v255;
          v259 = (uint64_t **)(v257 + 8);
          v258 = *(uint64_t **)(v257 + 8);
          if (v258)
          {
            while (1)
            {
              while (1)
              {
                v260 = (uint64_t **)v258;
                v261 = *((_DWORD *)v258 + 7);
                if (v261 <= v253)
                  break;
                v258 = *v260;
                v259 = v260;
                if (!*v260)
                  goto LABEL_258;
              }
              if (v261 >= v253)
                break;
              v258 = v260[1];
              if (!v258)
              {
                v259 = v260 + 1;
                goto LABEL_258;
              }
            }
          }
          else
          {
            v260 = (uint64_t **)(v257 + 8);
LABEL_258:
            v262 = operator new(0x20uLL);
            v262[7] = v253;
            *(_QWORD *)v262 = 0;
            *((_QWORD *)v262 + 1) = 0;
            *((_QWORD *)v262 + 2) = v260;
            *v259 = (uint64_t *)v262;
            v263 = **(_QWORD **)v257;
            if (v263)
            {
              *(_QWORD *)v257 = v263;
              v264 = *v259;
            }
            else
            {
              v264 = (uint64_t *)v262;
            }
            result = sub_20E868578(*(uint64_t **)(v257 + 8), v264);
            ++*(_QWORD *)(v257 + 16);
            v265 = *v792 + 4 * v256;
            v266.i64[0] = 0x600000006;
            v266.i64[1] = 0x600000006;
            *(int32x4_t *)v265 = vaddq_s32(*(int32x4_t *)v265, v266);
            *(int32x2_t *)(v265 + 16) = vadd_s32(*(int32x2_t *)(v265 + 16), (int32x2_t)0x600000006);
            v251 = (unsigned int *)v85[964];
            v2 = v806;
          }
        }
      }
    }
    v267 = (unsigned int *)v85[963];
    if (*((_BYTE *)v267 + 20))
    {
      if (*((_BYTE *)v251 + 20))
      {
        v268 = v93[2234] + *v267;
        v269 = *(_QWORD *)(*v96 + 8 * v268);
        v270 = v93[2233] + *v251;
        v271 = *(_QWORD *)(*v96 + 8 * v270);
        if (v269 <= v271 && v269 <= *v95)
        {
          v272 = *v800 + 24 * v270;
          v274 = (uint64_t **)(v272 + 8);
          v273 = *(uint64_t **)(v272 + 8);
          if (v273)
          {
            while (1)
            {
              while (1)
              {
                v275 = (uint64_t **)v273;
                v276 = *((_DWORD *)v273 + 7);
                if (v276 <= v268)
                  break;
                v273 = *v275;
                v274 = v275;
                if (!*v275)
                  goto LABEL_273;
              }
              if (v276 >= v268)
                break;
              v273 = v275[1];
              if (!v273)
              {
                v274 = v275 + 1;
                goto LABEL_273;
              }
            }
          }
          else
          {
            v275 = (uint64_t **)(v272 + 8);
LABEL_273:
            v277 = operator new(0x20uLL);
            v277[7] = v268;
            *(_QWORD *)v277 = 0;
            *((_QWORD *)v277 + 1) = 0;
            *((_QWORD *)v277 + 2) = v275;
            *v274 = (uint64_t *)v277;
            v278 = **(_QWORD **)v272;
            if (v278)
            {
              *(_QWORD *)v272 = v278;
              v279 = *v274;
            }
            else
            {
              v279 = (uint64_t *)v277;
            }
            result = sub_20E868578(*(uint64_t **)(v272 + 8), v279);
            ++*(_QWORD *)(v272 + 16);
            v280 = *v792 + 4 * v271;
            v281.i64[0] = 0x900000009;
            v281.i64[1] = 0x900000009;
            *(int32x4_t *)v280 = vaddq_s32(*(int32x4_t *)v280, v281);
            *(int32x2_t *)(v280 + 16) = vadd_s32(*(int32x2_t *)(v280 + 16), (int32x2_t)0x900000009);
            v251 = (unsigned int *)v85[964];
            v2 = v806;
          }
        }
      }
    }
    if (*((_BYTE *)v251 + 20))
    {
      v282 = v93[2233] + *v251;
      v283 = *(_QWORD *)(*v96 + 8 * v282);
      if (v283 <= *v95)
      {
        v284 = *v800 + 24 * v282;
        v286 = (uint64_t **)(v284 + 8);
        v285 = *(uint64_t **)(v284 + 8);
        if (v285)
        {
          while (1)
          {
            while (1)
            {
              v287 = (uint64_t **)v285;
              v288 = *((_DWORD *)v285 + 7);
              if (v288 <= v282)
                break;
              v285 = *v287;
              v286 = v287;
              if (!*v287)
                goto LABEL_286;
            }
            if (v288 >= v282)
              break;
            v285 = v287[1];
            if (!v285)
            {
              v286 = v287 + 1;
              goto LABEL_286;
            }
          }
        }
        else
        {
          v287 = (uint64_t **)(v284 + 8);
LABEL_286:
          v289 = operator new(0x20uLL);
          v289[7] = v282;
          *(_QWORD *)v289 = 0;
          *((_QWORD *)v289 + 1) = 0;
          *((_QWORD *)v289 + 2) = v287;
          *v286 = (uint64_t *)v289;
          v290 = **(_QWORD **)v284;
          if (v290)
          {
            *(_QWORD *)v284 = v290;
            v291 = *v286;
          }
          else
          {
            v291 = (uint64_t *)v289;
          }
          result = sub_20E868578(*(uint64_t **)(v284 + 8), v291);
          ++*(_QWORD *)(v284 + 16);
          v292 = *v792 + 4 * v283;
          v293.i64[0] = 0x600000006;
          v293.i64[1] = 0x600000006;
          *(int32x4_t *)v292 = vaddq_s32(*(int32x4_t *)v292, v293);
          *(int32x2_t *)(v292 + 16) = vadd_s32(*(int32x2_t *)(v292 + 16), (int32x2_t)0x600000006);
          v2 = v806;
        }
      }
    }
    v294 = (unsigned int *)v85[965];
    if (*((_BYTE *)v294 + 20))
    {
      v295 = (unsigned int *)v85[964];
      if (*((_BYTE *)v295 + 20))
      {
        v296 = v93[2234] + *v294;
        v297 = *(_QWORD *)(*v96 + 8 * v296);
        v298 = v93[2233] + *v295;
        v299 = *(_QWORD *)(*v96 + 8 * v298);
        if (v297 <= v299 && v297 <= *v95)
        {
          v300 = *v800 + 24 * v298;
          v302 = (uint64_t **)(v300 + 8);
          v301 = *(uint64_t **)(v300 + 8);
          if (v301)
          {
            while (1)
            {
              while (1)
              {
                v303 = (uint64_t **)v301;
                v304 = *((_DWORD *)v301 + 7);
                if (v304 <= v296)
                  break;
                v301 = *v303;
                v302 = v303;
                if (!*v303)
                  goto LABEL_301;
              }
              if (v304 >= v296)
                break;
              v301 = v303[1];
              if (!v301)
              {
                v302 = v303 + 1;
                goto LABEL_301;
              }
            }
          }
          else
          {
            v303 = (uint64_t **)(v300 + 8);
LABEL_301:
            v305 = operator new(0x20uLL);
            v305[7] = v296;
            *(_QWORD *)v305 = 0;
            *((_QWORD *)v305 + 1) = 0;
            *((_QWORD *)v305 + 2) = v303;
            *v302 = (uint64_t *)v305;
            v306 = **(_QWORD **)v300;
            if (v306)
            {
              *(_QWORD *)v300 = v306;
              v307 = *v302;
            }
            else
            {
              v307 = (uint64_t *)v305;
            }
            result = sub_20E868578(*(uint64_t **)(v300 + 8), v307);
            ++*(_QWORD *)(v300 + 16);
            v308 = *v792 + 4 * v299;
            v309.i64[0] = 0x900000009;
            v309.i64[1] = 0x900000009;
            *(int32x4_t *)v308 = vaddq_s32(*(int32x4_t *)v308, v309);
            *(int32x2_t *)(v308 + 16) = vadd_s32(*(int32x2_t *)(v308 + 16), (int32x2_t)0x900000009);
            v2 = v806;
          }
        }
      }
    }
    v310 = (unsigned int *)v85[966];
    if (*((_BYTE *)v310 + 20))
    {
      v311 = (unsigned int *)v85[964];
      if (*((_BYTE *)v311 + 20))
      {
        v312 = v93[2235] + *v310;
        v313 = *(_QWORD *)(*v96 + 8 * v312);
        v314 = v93[2233] + *v311;
        v315 = *(_QWORD *)(*v96 + 8 * v314);
        if (v313 <= v315 && v313 <= *v95)
        {
          v316 = *v800 + 24 * v314;
          v318 = (uint64_t **)(v316 + 8);
          v317 = *(uint64_t **)(v316 + 8);
          if (v317)
          {
            while (1)
            {
              while (1)
              {
                v319 = (uint64_t **)v317;
                v320 = *((_DWORD *)v317 + 7);
                if (v320 <= v312)
                  break;
                v317 = *v319;
                v318 = v319;
                if (!*v319)
                  goto LABEL_316;
              }
              if (v320 >= v312)
                break;
              v317 = v319[1];
              if (!v317)
              {
                v318 = v319 + 1;
                goto LABEL_316;
              }
            }
          }
          else
          {
            v319 = (uint64_t **)(v316 + 8);
LABEL_316:
            v321 = operator new(0x20uLL);
            v321[7] = v312;
            *(_QWORD *)v321 = 0;
            *((_QWORD *)v321 + 1) = 0;
            *((_QWORD *)v321 + 2) = v319;
            *v318 = (uint64_t *)v321;
            v322 = **(_QWORD **)v316;
            if (v322)
            {
              *(_QWORD *)v316 = v322;
              v323 = *v318;
            }
            else
            {
              v323 = (uint64_t *)v321;
            }
            result = sub_20E868578(*(uint64_t **)(v316 + 8), v323);
            ++*(_QWORD *)(v316 + 16);
            v324 = *v792 + 4 * v315;
            v325.i64[0] = 0x100000001;
            v325.i64[1] = 0x100000001;
            *(int32x4_t *)v324 = vaddq_s32(*(int32x4_t *)v324, v325);
            *(int32x2_t *)(v324 + 16) = vadd_s32(*(int32x2_t *)(v324 + 16), (int32x2_t)0x100000001);
            v2 = v806;
          }
        }
      }
    }
    v326 = (unsigned int *)v85[962];
    v327 = (unsigned int *)v85[965];
    if (*((_BYTE *)v326 + 20))
    {
      if (*((_BYTE *)v327 + 20))
      {
        v328 = v93[2233] + *v326;
        v329 = *(_QWORD *)(*v96 + 8 * v328);
        v330 = v93[2234] + *v327;
        v331 = *(_QWORD *)(*v96 + 8 * v330);
        if (v329 <= v331 && v329 <= *v95)
        {
          v332 = *v800 + 24 * v330;
          v334 = (uint64_t **)(v332 + 8);
          v333 = *(uint64_t **)(v332 + 8);
          if (v333)
          {
            while (1)
            {
              while (1)
              {
                v335 = (uint64_t **)v333;
                v336 = *((_DWORD *)v333 + 7);
                if (v336 <= v328)
                  break;
                v333 = *v335;
                v334 = v335;
                if (!*v335)
                  goto LABEL_331;
              }
              if (v336 >= v328)
                break;
              v333 = v335[1];
              if (!v333)
              {
                v334 = v335 + 1;
                goto LABEL_331;
              }
            }
          }
          else
          {
            v335 = (uint64_t **)(v332 + 8);
LABEL_331:
            v337 = operator new(0x20uLL);
            v337[7] = v328;
            *(_QWORD *)v337 = 0;
            *((_QWORD *)v337 + 1) = 0;
            *((_QWORD *)v337 + 2) = v335;
            *v334 = (uint64_t *)v337;
            v338 = **(_QWORD **)v332;
            if (v338)
            {
              *(_QWORD *)v332 = v338;
              v339 = *v334;
            }
            else
            {
              v339 = (uint64_t *)v337;
            }
            result = sub_20E868578(*(uint64_t **)(v332 + 8), v339);
            ++*(_QWORD *)(v332 + 16);
            v340 = (int32x4_t *)(*v792 + 4 * v331);
            v341.i64[0] = 0x600000006;
            v341.i64[1] = 0x600000006;
            v342 = vaddq_s32(v340[1], v341);
            *v340 = vaddq_s32(*v340, v341);
            v340[1] = v342;
            v340[2].i32[0] += 6;
            v327 = (unsigned int *)v85[965];
            v2 = v806;
          }
        }
      }
    }
    v343 = (unsigned int *)v85[963];
    if (*((_BYTE *)v343 + 20))
    {
      if (*((_BYTE *)v327 + 20))
      {
        v344 = v93[2234];
        v345 = v344 + *v343;
        v346 = *(_QWORD *)(*v96 + 8 * v345);
        v347 = v344 + *v327;
        v348 = *(_QWORD *)(*v96 + 8 * v347);
        if (v346 <= v348 && v346 <= *v95)
        {
          v349 = *v800 + 24 * v347;
          v351 = (uint64_t **)(v349 + 8);
          v350 = *(uint64_t **)(v349 + 8);
          if (v350)
          {
            while (1)
            {
              while (1)
              {
                v352 = (uint64_t **)v350;
                v353 = *((_DWORD *)v350 + 7);
                if (v353 <= v345)
                  break;
                v350 = *v352;
                v351 = v352;
                if (!*v352)
                  goto LABEL_346;
              }
              if (v353 >= v345)
                break;
              v350 = v352[1];
              if (!v350)
              {
                v351 = v352 + 1;
                goto LABEL_346;
              }
            }
          }
          else
          {
            v352 = (uint64_t **)(v349 + 8);
LABEL_346:
            v354 = operator new(0x20uLL);
            v354[7] = v345;
            *(_QWORD *)v354 = 0;
            *((_QWORD *)v354 + 1) = 0;
            *((_QWORD *)v354 + 2) = v352;
            *v351 = (uint64_t *)v354;
            v355 = **(_QWORD **)v349;
            if (v355)
            {
              *(_QWORD *)v349 = v355;
              v356 = *v351;
            }
            else
            {
              v356 = (uint64_t *)v354;
            }
            result = sub_20E868578(*(uint64_t **)(v349 + 8), v356);
            ++*(_QWORD *)(v349 + 16);
            v357 = (int32x4_t *)(*v792 + 4 * v348);
            v358.i64[0] = 0x900000009;
            v358.i64[1] = 0x900000009;
            v359 = vaddq_s32(v357[1], v358);
            *v357 = vaddq_s32(*v357, v358);
            v357[1] = v359;
            v357[2].i32[0] += 9;
            v327 = (unsigned int *)v85[965];
            v2 = v806;
          }
        }
      }
    }
    v360 = (unsigned int *)v85[964];
    if (*((_BYTE *)v360 + 20))
    {
      if (*((_BYTE *)v327 + 20))
      {
        v361 = v93[2233] + *v360;
        v362 = *(_QWORD *)(*v96 + 8 * v361);
        v363 = v93[2234] + *v327;
        v364 = *(_QWORD *)(*v96 + 8 * v363);
        if (v362 <= v364 && v362 <= *v95)
        {
          v365 = *v800 + 24 * v363;
          v367 = (uint64_t **)(v365 + 8);
          v366 = *(uint64_t **)(v365 + 8);
          if (v366)
          {
            while (1)
            {
              while (1)
              {
                v368 = (uint64_t **)v366;
                v369 = *((_DWORD *)v366 + 7);
                if (v369 <= v361)
                  break;
                v366 = *v368;
                v367 = v368;
                if (!*v368)
                  goto LABEL_361;
              }
              if (v369 >= v361)
                break;
              v366 = v368[1];
              if (!v366)
              {
                v367 = v368 + 1;
                goto LABEL_361;
              }
            }
          }
          else
          {
            v368 = (uint64_t **)(v365 + 8);
LABEL_361:
            v370 = operator new(0x20uLL);
            v370[7] = v361;
            *(_QWORD *)v370 = 0;
            *((_QWORD *)v370 + 1) = 0;
            *((_QWORD *)v370 + 2) = v368;
            *v367 = (uint64_t *)v370;
            v371 = **(_QWORD **)v365;
            if (v371)
            {
              *(_QWORD *)v365 = v371;
              v372 = *v367;
            }
            else
            {
              v372 = (uint64_t *)v370;
            }
            result = sub_20E868578(*(uint64_t **)(v365 + 8), v372);
            ++*(_QWORD *)(v365 + 16);
            v373 = (int32x4_t *)(*v792 + 4 * v364);
            v374.i64[0] = 0x600000006;
            v374.i64[1] = 0x600000006;
            v375 = vaddq_s32(v373[1], v374);
            *v373 = vaddq_s32(*v373, v374);
            v373[1] = v375;
            v373[2].i32[0] += 6;
            v327 = (unsigned int *)v85[965];
            v2 = v806;
          }
        }
      }
    }
    if (*((_BYTE *)v327 + 20))
    {
      v376 = v93[2234] + *v327;
      v377 = *(_QWORD *)(*v96 + 8 * v376);
      if (v377 <= *v95)
      {
        v378 = *v800 + 24 * v376;
        v380 = (uint64_t **)(v378 + 8);
        v379 = *(uint64_t **)(v378 + 8);
        if (v379)
        {
          while (1)
          {
            while (1)
            {
              v381 = (uint64_t **)v379;
              v382 = *((_DWORD *)v379 + 7);
              if (v382 <= v376)
                break;
              v379 = *v381;
              v380 = v381;
              if (!*v381)
                goto LABEL_374;
            }
            if (v382 >= v376)
              break;
            v379 = v381[1];
            if (!v379)
            {
              v380 = v381 + 1;
              goto LABEL_374;
            }
          }
        }
        else
        {
          v381 = (uint64_t **)(v378 + 8);
LABEL_374:
          v383 = operator new(0x20uLL);
          v383[7] = v376;
          *(_QWORD *)v383 = 0;
          *((_QWORD *)v383 + 1) = 0;
          *((_QWORD *)v383 + 2) = v381;
          *v380 = (uint64_t *)v383;
          v384 = **(_QWORD **)v378;
          if (v384)
          {
            *(_QWORD *)v378 = v384;
            v385 = *v380;
          }
          else
          {
            v385 = (uint64_t *)v383;
          }
          result = sub_20E868578(*(uint64_t **)(v378 + 8), v385);
          ++*(_QWORD *)(v378 + 16);
          v386 = (int32x4_t *)(*v792 + 4 * v377);
          v387.i64[0] = 0x900000009;
          v387.i64[1] = 0x900000009;
          v388 = vaddq_s32(v386[1], v387);
          *v386 = vaddq_s32(*v386, v387);
          v386[1] = v388;
          v386[2].i32[0] += 9;
          v2 = v806;
        }
      }
    }
    v389 = (unsigned int *)v85[966];
    if (!*((_BYTE *)v389 + 20))
      goto LABEL_391;
    v390 = (unsigned int *)v85[965];
    if (!*((_BYTE *)v390 + 20))
      goto LABEL_391;
    v391 = v93[2235] + *v389;
    v392 = *(_QWORD *)(*v96 + 8 * v391);
    v393 = v93[2234] + *v390;
    v394 = *(_QWORD *)(*v96 + 8 * v393);
    if (v392 > v394 || v392 > *v95)
      goto LABEL_391;
    v395 = *v800 + 24 * v393;
    v397 = (uint64_t **)(v395 + 8);
    v396 = *(uint64_t **)(v395 + 8);
    if (v396)
    {
      while (1)
      {
        while (1)
        {
          v398 = (uint64_t **)v396;
          v399 = *((_DWORD *)v396 + 7);
          if (v399 <= v391)
            break;
          v396 = *v398;
          v397 = v398;
          if (!*v398)
            goto LABEL_389;
        }
        if (v399 >= v391)
          break;
        v396 = v398[1];
        if (!v396)
        {
          v397 = v398 + 1;
          goto LABEL_389;
        }
      }
LABEL_391:
      v403 = (unsigned int *)v85[962];
      if (!*((_BYTE *)v403 + 20))
        goto LABEL_409;
      goto LABEL_392;
    }
    v398 = (uint64_t **)(v395 + 8);
LABEL_389:
    v400 = operator new(0x20uLL);
    v400[7] = v391;
    *(_QWORD *)v400 = 0;
    *((_QWORD *)v400 + 1) = 0;
    *((_QWORD *)v400 + 2) = v398;
    *v397 = (uint64_t *)v400;
    v401 = **(_QWORD **)v395;
    if (v401)
    {
      *(_QWORD *)v395 = v401;
      v402 = *v397;
    }
    else
    {
      v402 = (uint64_t *)v400;
    }
    result = sub_20E868578(*(uint64_t **)(v395 + 8), v402);
    ++*(_QWORD *)(v395 + 16);
    v416 = (int32x4_t *)(*v792 + 4 * v394);
    v417.i64[0] = 0x100000001;
    v417.i64[1] = 0x100000001;
    v418 = vaddq_s32(v416[1], v417);
    *v416 = vaddq_s32(*v416, v417);
    v416[1] = v418;
    ++v416[2].i32[0];
    v389 = (unsigned int *)v85[966];
    v2 = v806;
    v403 = (unsigned int *)v85[962];
    if (!*((_BYTE *)v403 + 20))
      goto LABEL_409;
LABEL_392:
    if (!*((_BYTE *)v389 + 20))
      goto LABEL_409;
    v404 = v93[2233] + *v403;
    v405 = *(_QWORD *)(*v96 + 8 * v404);
    v406 = v93[2235] + *v389;
    v407 = *(_QWORD *)(*v96 + 8 * v406);
    if (v405 > v407 || v405 > *v95)
      goto LABEL_409;
    v408 = *v800 + 24 * v406;
    v410 = (uint64_t **)(v408 + 8);
    v409 = *(uint64_t **)(v408 + 8);
    if (!v409)
    {
      v411 = (uint64_t **)(v408 + 8);
LABEL_402:
      v413 = operator new(0x20uLL);
      v413[7] = v404;
      *(_QWORD *)v413 = 0;
      *((_QWORD *)v413 + 1) = 0;
      *((_QWORD *)v413 + 2) = v411;
      *v410 = (uint64_t *)v413;
      v414 = **(_QWORD **)v408;
      if (v414)
      {
        *(_QWORD *)v408 = v414;
        v415 = *v410;
      }
      else
      {
        v415 = (uint64_t *)v413;
      }
      result = sub_20E868578(*(uint64_t **)(v408 + 8), v415);
      ++*(_QWORD *)(v408 + 16);
      *(_DWORD *)(*v792 + 4 * v407) += 6;
      v389 = (unsigned int *)v85[966];
      v2 = v806;
LABEL_409:
      v419 = (unsigned int *)v85[963];
      if (!*((_BYTE *)v419 + 20))
        goto LABEL_425;
LABEL_410:
      if (*((_BYTE *)v389 + 20))
      {
        v420 = v93[2234] + *v419;
        v421 = *(_QWORD *)(*v96 + 8 * v420);
        v422 = v93[2235] + *v389;
        v423 = *(_QWORD *)(*v96 + 8 * v422);
        if (v421 <= v423 && v421 <= *v95)
        {
          v424 = *v800 + 24 * v422;
          v426 = (uint64_t **)(v424 + 8);
          v425 = *(uint64_t **)(v424 + 8);
          if (v425)
          {
            while (1)
            {
              while (1)
              {
                v427 = (uint64_t **)v425;
                v428 = *((_DWORD *)v425 + 7);
                if (v428 <= v420)
                  break;
                v425 = *v427;
                v426 = v427;
                if (!*v427)
                  goto LABEL_420;
              }
              if (v428 >= v420)
                break;
              v425 = v427[1];
              if (!v425)
              {
                v426 = v427 + 1;
                goto LABEL_420;
              }
            }
          }
          else
          {
            v427 = (uint64_t **)(v424 + 8);
LABEL_420:
            v429 = operator new(0x20uLL);
            v429[7] = v420;
            *(_QWORD *)v429 = 0;
            *((_QWORD *)v429 + 1) = 0;
            *((_QWORD *)v429 + 2) = v427;
            *v426 = (uint64_t *)v429;
            v430 = **(_QWORD **)v424;
            if (v430)
            {
              *(_QWORD *)v424 = v430;
              v431 = *v426;
            }
            else
            {
              v431 = (uint64_t *)v429;
            }
            result = sub_20E868578(*(uint64_t **)(v424 + 8), v431);
            ++*(_QWORD *)(v424 + 16);
            *(_DWORD *)(*v792 + 4 * v423) += 9;
            v389 = (unsigned int *)v85[966];
            v2 = v806;
          }
        }
      }
      goto LABEL_425;
    }
    while (1)
    {
      while (1)
      {
        v411 = (uint64_t **)v409;
        v412 = *((_DWORD *)v409 + 7);
        if (v412 <= v404)
          break;
        v409 = *v411;
        v410 = v411;
        if (!*v411)
          goto LABEL_402;
      }
      if (v412 >= v404)
        break;
      v409 = v411[1];
      if (!v409)
      {
        v410 = v411 + 1;
        goto LABEL_402;
      }
    }
    v419 = (unsigned int *)v85[963];
    if (*((_BYTE *)v419 + 20))
      goto LABEL_410;
LABEL_425:
    v432 = (unsigned int *)v85[964];
    if (*((_BYTE *)v432 + 20))
    {
      if (*((_BYTE *)v389 + 20))
      {
        v433 = v93[2233] + *v432;
        v434 = *(_QWORD *)(*v96 + 8 * v433);
        v435 = v93[2235] + *v389;
        v436 = *(_QWORD *)(*v96 + 8 * v435);
        if (v434 <= v436 && v434 <= *v95)
        {
          v437 = *v800 + 24 * v435;
          v439 = (uint64_t **)(v437 + 8);
          v438 = *(uint64_t **)(v437 + 8);
          if (v438)
          {
            while (1)
            {
              while (1)
              {
                v440 = (uint64_t **)v438;
                v441 = *((_DWORD *)v438 + 7);
                if (v441 <= v433)
                  break;
                v438 = *v440;
                v439 = v440;
                if (!*v440)
                  goto LABEL_436;
              }
              if (v441 >= v433)
                break;
              v438 = v440[1];
              if (!v438)
              {
                v439 = v440 + 1;
                goto LABEL_436;
              }
            }
            v445 = (unsigned int *)v85[965];
            if (!*((_BYTE *)v445 + 20))
              goto LABEL_456;
LABEL_441:
            if (*((_BYTE *)v389 + 20))
            {
              v446 = v93[2234] + *v445;
              v447 = *(_QWORD *)(*v96 + 8 * v446);
              v448 = v93[2235] + *v389;
              v449 = *(_QWORD *)(*v96 + 8 * v448);
              if (v447 <= v449 && v447 <= *v95)
              {
                v450 = *v800 + 24 * v448;
                v452 = (uint64_t **)(v450 + 8);
                v451 = *(uint64_t **)(v450 + 8);
                if (v451)
                {
                  while (1)
                  {
                    while (1)
                    {
                      v453 = (uint64_t **)v451;
                      v454 = *((_DWORD *)v451 + 7);
                      if (v454 <= v446)
                        break;
                      v451 = *v453;
                      v452 = v453;
                      if (!*v453)
                        goto LABEL_451;
                    }
                    if (v454 >= v446)
                      break;
                    v451 = v453[1];
                    if (!v451)
                    {
                      v452 = v453 + 1;
                      goto LABEL_451;
                    }
                  }
                }
                else
                {
                  v453 = (uint64_t **)(v450 + 8);
LABEL_451:
                  v455 = operator new(0x20uLL);
                  v455[7] = v446;
                  *(_QWORD *)v455 = 0;
                  *((_QWORD *)v455 + 1) = 0;
                  *((_QWORD *)v455 + 2) = v453;
                  *v452 = (uint64_t *)v455;
                  v456 = **(_QWORD **)v450;
                  if (v456)
                  {
                    *(_QWORD *)v450 = v456;
                    v457 = *v452;
                  }
                  else
                  {
                    v457 = (uint64_t *)v455;
                  }
                  result = sub_20E868578(*(uint64_t **)(v450 + 8), v457);
                  ++*(_QWORD *)(v450 + 16);
                  *(_DWORD *)(*v792 + 4 * v449) += 9;
                  v389 = (unsigned int *)v85[966];
                  v2 = v806;
                }
              }
            }
            goto LABEL_456;
          }
          v440 = (uint64_t **)(v437 + 8);
LABEL_436:
          v442 = operator new(0x20uLL);
          v442[7] = v433;
          *(_QWORD *)v442 = 0;
          *((_QWORD *)v442 + 1) = 0;
          *((_QWORD *)v442 + 2) = v440;
          *v439 = (uint64_t *)v442;
          v443 = **(_QWORD **)v437;
          if (v443)
          {
            *(_QWORD *)v437 = v443;
            v444 = *v439;
          }
          else
          {
            v444 = (uint64_t *)v442;
          }
          result = sub_20E868578(*(uint64_t **)(v437 + 8), v444);
          ++*(_QWORD *)(v437 + 16);
          *(_DWORD *)(*v792 + 4 * v436) += 6;
          v389 = (unsigned int *)v85[966];
          v2 = v806;
        }
      }
    }
    v445 = (unsigned int *)v85[965];
    if (*((_BYTE *)v445 + 20))
      goto LABEL_441;
LABEL_456:
    if (*((_BYTE *)v389 + 20))
    {
      v458 = v93[2235] + *v389;
      v459 = *(_QWORD *)(*v96 + 8 * v458);
      if (v459 <= *v95)
      {
        v460 = *v800 + 24 * v458;
        v462 = (uint64_t **)(v460 + 8);
        v461 = *(uint64_t **)(v460 + 8);
        if (v461)
        {
          while (1)
          {
            while (1)
            {
              v463 = (uint64_t **)v461;
              v464 = *((_DWORD *)v461 + 7);
              if (v464 <= v458)
                break;
              v461 = *v463;
              v462 = v463;
              if (!*v463)
                goto LABEL_465;
            }
            if (v464 >= v458)
              break;
            v461 = v463[1];
            if (!v461)
            {
              v462 = v463 + 1;
              goto LABEL_465;
            }
          }
        }
        else
        {
          v463 = (uint64_t **)(v460 + 8);
LABEL_465:
          v465 = operator new(0x20uLL);
          v465[7] = v458;
          *(_QWORD *)v465 = 0;
          *((_QWORD *)v465 + 1) = 0;
          *((_QWORD *)v465 + 2) = v463;
          *v462 = (uint64_t *)v465;
          v466 = **(_QWORD **)v460;
          if (v466)
          {
            *(_QWORD *)v460 = v466;
            v87 = *v462;
          }
          else
          {
            v87 = (uint64_t *)v465;
          }
          result = sub_20E868578(*(uint64_t **)(v460 + 8), v87);
          ++*(_QWORD *)(v460 + 16);
          ++*(_DWORD *)(*v792 + 4 * v459);
          v2 = v806;
        }
      }
    }
LABEL_89:
    v85 += 1002;
  }
  while (v85 != v86);
  v2 = (uint64_t *)*v788;
  v1 = (_QWORD *)v788[1];
LABEL_468:
  v467 = (_QWORD *)v1[106];
  v468 = (_QWORD *)v1[107];
  if (v467 == v468)
    goto LABEL_719;
  v807 = v2;
  while (2)
  {
    v473 = (unsigned int *)v467[628];
    v474 = (unsigned int *)v467[629];
    v475 = v467[630];
    v476 = v467[631];
    if (((*((unsigned __int8 *)v474 + 4) >> 2) & 1)
       + ((*((unsigned __int8 *)v473 + 4) >> 2) & 1)
       + ((*(unsigned __int8 *)(v475 + 4) >> 2) & 1) == (char)(32 * *(_BYTE *)(v476 + 4)) >> 7)
    {
      v477 = v2[1];
      if (!*((_BYTE *)v473 + 20) || *v473 != -1)
      {
        v478 = *((unsigned __int8 *)v474 + 20);
        if ((!*((_BYTE *)v474 + 20) || *v474 != -1)
          && (!*(_BYTE *)(v475 + 20) || *(_DWORD *)v475 != -1)
          && (!*(_BYTE *)(v476 + 20) || *(_DWORD *)v476 != -1))
        {
          v480 = (_QWORD *)v2[2];
          v479 = (unint64_t *)v2[3];
          v481 = (_QWORD *)v2[4];
          v793 = v481;
          v801 = (_QWORD *)v2[5];
          if (*((_BYTE *)v473 + 20))
          {
            v482 = *(_QWORD *)(v477 + 17864) + *v473;
            v483 = *(_QWORD *)(*v480 + 8 * v482);
            if (v483 <= *v479)
            {
              v484 = *v481 + 24 * v482;
              v486 = (uint64_t **)(v484 + 8);
              v485 = *(uint64_t **)(v484 + 8);
              if (v485)
              {
                while (1)
                {
                  while (1)
                  {
                    v487 = (uint64_t **)v485;
                    v488 = *((_DWORD *)v485 + 7);
                    if (v488 <= v482)
                      break;
                    v485 = *v487;
                    v486 = v487;
                    if (!*v487)
                      goto LABEL_491;
                  }
                  if (v488 >= v482)
                    break;
                  v485 = v487[1];
                  if (!v485)
                  {
                    v486 = v487 + 1;
                    goto LABEL_491;
                  }
                }
              }
              else
              {
                v487 = (uint64_t **)(v484 + 8);
LABEL_491:
                v489 = operator new(0x20uLL);
                v489[7] = v482;
                *(_QWORD *)v489 = 0;
                *((_QWORD *)v489 + 1) = 0;
                *((_QWORD *)v489 + 2) = v487;
                *v486 = (uint64_t *)v489;
                v490 = **(_QWORD **)v484;
                if (v490)
                {
                  *(_QWORD *)v484 = v490;
                  v491 = *v486;
                }
                else
                {
                  v491 = (uint64_t *)v489;
                }
                result = sub_20E868578(*(uint64_t **)(v484 + 8), v491);
                ++*(_QWORD *)(v484 + 16);
                v2 = v807;
                v492 = *v801 + 4 * v483;
                v493.i64[0] = 0x600000006;
                v493.i64[1] = 0x600000006;
                *(int32x4_t *)v492 = vaddq_s32(*(int32x4_t *)v492, v493);
                *(int32x2_t *)(v492 + 16) = vadd_s32(*(int32x2_t *)(v492 + 16), (int32x2_t)0x600000006);
                v474 = (unsigned int *)v467[629];
                v478 = *((unsigned __int8 *)v474 + 20);
                v473 = (unsigned int *)v467[628];
                v481 = v793;
              }
            }
          }
          if (v478)
          {
            if (*((_BYTE *)v473 + 20))
            {
              v494 = *(_QWORD *)(v477 + 17872) + *v474;
              v495 = *(_QWORD *)(*v480 + 8 * v494);
              v496 = *(_QWORD *)(v477 + 17864) + *v473;
              v497 = *(_QWORD *)(*v480 + 8 * v496);
              if (v495 <= v497 && v495 <= *v479)
              {
                v498 = *v481 + 24 * v496;
                v500 = (uint64_t **)(v498 + 8);
                v499 = *(uint64_t **)(v498 + 8);
                if (v499)
                {
                  while (1)
                  {
                    while (1)
                    {
                      v501 = (uint64_t **)v499;
                      v502 = *((_DWORD *)v499 + 7);
                      if (v502 <= v494)
                        break;
                      v499 = *v501;
                      v500 = v501;
                      if (!*v501)
                        goto LABEL_506;
                    }
                    if (v502 >= v494)
                      break;
                    v499 = v501[1];
                    if (!v499)
                    {
                      v500 = v501 + 1;
                      goto LABEL_506;
                    }
                  }
                }
                else
                {
                  v501 = (uint64_t **)(v498 + 8);
LABEL_506:
                  v503 = operator new(0x20uLL);
                  v503[7] = v494;
                  *(_QWORD *)v503 = 0;
                  *((_QWORD *)v503 + 1) = 0;
                  *((_QWORD *)v503 + 2) = v501;
                  *v500 = (uint64_t *)v503;
                  v504 = **(_QWORD **)v498;
                  if (v504)
                  {
                    *(_QWORD *)v498 = v504;
                    v505 = *v500;
                  }
                  else
                  {
                    v505 = (uint64_t *)v503;
                  }
                  result = sub_20E868578(*(uint64_t **)(v498 + 8), v505);
                  ++*(_QWORD *)(v498 + 16);
                  v2 = v807;
                  v506 = *v801 + 4 * v497;
                  v507.i64[0] = 0x900000009;
                  v507.i64[1] = 0x900000009;
                  *(int32x4_t *)v506 = vaddq_s32(*(int32x4_t *)v506, v507);
                  *(int32x2_t *)(v506 + 16) = vadd_s32(*(int32x2_t *)(v506 + 16), (int32x2_t)0x900000009);
                  v473 = (unsigned int *)v467[628];
                  v481 = v793;
                }
              }
            }
          }
          v508 = (unsigned int *)v467[630];
          if (*((_BYTE *)v508 + 20))
          {
            if (*((_BYTE *)v473 + 20))
            {
              v509 = *(_QWORD *)(v477 + 17864);
              v510 = v509 + *v508;
              v511 = *(_QWORD *)(*v480 + 8 * v510);
              v512 = v509 + *v473;
              v513 = *(_QWORD *)(*v480 + 8 * v512);
              if (v511 <= v513 && v511 <= *v479)
              {
                v514 = *v481 + 24 * v512;
                v516 = (uint64_t **)(v514 + 8);
                v515 = *(uint64_t **)(v514 + 8);
                if (v515)
                {
                  while (1)
                  {
                    while (1)
                    {
                      v517 = (uint64_t **)v515;
                      v518 = *((_DWORD *)v515 + 7);
                      if (v518 <= v510)
                        break;
                      v515 = *v517;
                      v516 = v517;
                      if (!*v517)
                        goto LABEL_521;
                    }
                    if (v518 >= v510)
                      break;
                    v515 = v517[1];
                    if (!v515)
                    {
                      v516 = v517 + 1;
                      goto LABEL_521;
                    }
                  }
                }
                else
                {
                  v517 = (uint64_t **)(v514 + 8);
LABEL_521:
                  v519 = operator new(0x20uLL);
                  v519[7] = v510;
                  *(_QWORD *)v519 = 0;
                  *((_QWORD *)v519 + 1) = 0;
                  *((_QWORD *)v519 + 2) = v517;
                  *v516 = (uint64_t *)v519;
                  v520 = **(_QWORD **)v514;
                  if (v520)
                  {
                    *(_QWORD *)v514 = v520;
                    v521 = *v516;
                  }
                  else
                  {
                    v521 = (uint64_t *)v519;
                  }
                  result = sub_20E868578(*(uint64_t **)(v514 + 8), v521);
                  ++*(_QWORD *)(v514 + 16);
                  v2 = v807;
                  v522 = *v801 + 4 * v513;
                  v523.i64[0] = 0x600000006;
                  v523.i64[1] = 0x600000006;
                  *(int32x4_t *)v522 = vaddq_s32(*(int32x4_t *)v522, v523);
                  *(int32x2_t *)(v522 + 16) = vadd_s32(*(int32x2_t *)(v522 + 16), (int32x2_t)0x600000006);
                  v473 = (unsigned int *)v467[628];
                  v481 = v793;
                }
              }
            }
          }
          v524 = (unsigned int *)v467[631];
          if (*((_BYTE *)v524 + 20))
          {
            if (*((_BYTE *)v473 + 20))
            {
              v525 = *(_QWORD *)(v477 + 17872) + *v524;
              v526 = *(_QWORD *)(*v480 + 8 * v525);
              v527 = *(_QWORD *)(v477 + 17864) + *v473;
              v528 = *(_QWORD *)(*v480 + 8 * v527);
              if (v526 <= v528 && v526 <= *v479)
              {
                v529 = *v481 + 24 * v527;
                v531 = (uint64_t **)(v529 + 8);
                v530 = *(uint64_t **)(v529 + 8);
                if (v530)
                {
                  while (1)
                  {
                    while (1)
                    {
                      v532 = (uint64_t **)v530;
                      v533 = *((_DWORD *)v530 + 7);
                      if (v533 <= v525)
                        break;
                      v530 = *v532;
                      v531 = v532;
                      if (!*v532)
                        goto LABEL_536;
                    }
                    if (v533 >= v525)
                      break;
                    v530 = v532[1];
                    if (!v530)
                    {
                      v531 = v532 + 1;
                      goto LABEL_536;
                    }
                  }
                }
                else
                {
                  v532 = (uint64_t **)(v529 + 8);
LABEL_536:
                  v534 = operator new(0x20uLL);
                  v534[7] = v525;
                  *(_QWORD *)v534 = 0;
                  *((_QWORD *)v534 + 1) = 0;
                  *((_QWORD *)v534 + 2) = v532;
                  *v531 = (uint64_t *)v534;
                  v535 = **(_QWORD **)v529;
                  if (v535)
                  {
                    *(_QWORD *)v529 = v535;
                    v536 = *v531;
                  }
                  else
                  {
                    v536 = (uint64_t *)v534;
                  }
                  result = sub_20E868578(*(uint64_t **)(v529 + 8), v536);
                  ++*(_QWORD *)(v529 + 16);
                  v2 = v807;
                  v537 = *v801 + 4 * v528;
                  v538.i64[0] = 0x900000009;
                  v538.i64[1] = 0x900000009;
                  *(int32x4_t *)v537 = vaddq_s32(*(int32x4_t *)v537, v538);
                  *(int32x2_t *)(v537 + 16) = vadd_s32(*(int32x2_t *)(v537 + 16), (int32x2_t)0x900000009);
                  v473 = (unsigned int *)v467[628];
                  v481 = v793;
                }
              }
            }
          }
          v539 = (unsigned int *)v467[629];
          if (*((_BYTE *)v473 + 20))
          {
            if (*((_BYTE *)v539 + 20))
            {
              v540 = *(_QWORD *)(v477 + 17864) + *v473;
              v541 = *(_QWORD *)(*v480 + 8 * v540);
              v542 = *(_QWORD *)(v477 + 17872) + *v539;
              v543 = *(_QWORD *)(*v480 + 8 * v542);
              if (v541 <= v543 && v541 <= *v479)
              {
                v544 = *v481 + 24 * v542;
                v546 = (uint64_t **)(v544 + 8);
                v545 = *(uint64_t **)(v544 + 8);
                if (v545)
                {
                  while (1)
                  {
                    while (1)
                    {
                      v547 = (uint64_t **)v545;
                      v548 = *((_DWORD *)v545 + 7);
                      if (v548 <= v540)
                        break;
                      v545 = *v547;
                      v546 = v547;
                      if (!*v547)
                        goto LABEL_551;
                    }
                    if (v548 >= v540)
                      break;
                    v545 = v547[1];
                    if (!v545)
                    {
                      v546 = v547 + 1;
                      goto LABEL_551;
                    }
                  }
                }
                else
                {
                  v547 = (uint64_t **)(v544 + 8);
LABEL_551:
                  v549 = operator new(0x20uLL);
                  v549[7] = v540;
                  *(_QWORD *)v549 = 0;
                  *((_QWORD *)v549 + 1) = 0;
                  *((_QWORD *)v549 + 2) = v547;
                  *v546 = (uint64_t *)v549;
                  v550 = **(_QWORD **)v544;
                  if (v550)
                  {
                    *(_QWORD *)v544 = v550;
                    v551 = *v546;
                  }
                  else
                  {
                    v551 = (uint64_t *)v549;
                  }
                  result = sub_20E868578(*(uint64_t **)(v544 + 8), v551);
                  ++*(_QWORD *)(v544 + 16);
                  v2 = v807;
                  v552 = (int32x4_t *)(*v801 + 4 * v543);
                  v553.i64[0] = 0x600000006;
                  v553.i64[1] = 0x600000006;
                  v554 = vaddq_s32(v552[1], v553);
                  *v552 = vaddq_s32(*v552, v553);
                  v552[1] = v554;
                  v552[2].i32[0] += 6;
                  v539 = (unsigned int *)v467[629];
                  v481 = v793;
                }
              }
            }
          }
          if (*((_BYTE *)v539 + 20))
          {
            v555 = *(_QWORD *)(v477 + 17872) + *v539;
            v556 = *(_QWORD *)(*v480 + 8 * v555);
            if (v556 <= *v479)
            {
              v557 = *v481 + 24 * v555;
              v559 = (uint64_t **)(v557 + 8);
              v558 = *(uint64_t **)(v557 + 8);
              if (v558)
              {
                while (1)
                {
                  while (1)
                  {
                    v560 = (uint64_t **)v558;
                    v561 = *((_DWORD *)v558 + 7);
                    if (v561 <= v555)
                      break;
                    v558 = *v560;
                    v559 = v560;
                    if (!*v560)
                      goto LABEL_564;
                  }
                  if (v561 >= v555)
                    break;
                  v558 = v560[1];
                  if (!v558)
                  {
                    v559 = v560 + 1;
                    goto LABEL_564;
                  }
                }
              }
              else
              {
                v560 = (uint64_t **)(v557 + 8);
LABEL_564:
                v562 = operator new(0x20uLL);
                v562[7] = v555;
                *(_QWORD *)v562 = 0;
                *((_QWORD *)v562 + 1) = 0;
                *((_QWORD *)v562 + 2) = v560;
                *v559 = (uint64_t *)v562;
                v563 = **(_QWORD **)v557;
                if (v563)
                {
                  *(_QWORD *)v557 = v563;
                  v564 = *v559;
                }
                else
                {
                  v564 = (uint64_t *)v562;
                }
                result = sub_20E868578(*(uint64_t **)(v557 + 8), v564);
                ++*(_QWORD *)(v557 + 16);
                v2 = v807;
                v565 = (int32x4_t *)(*v801 + 4 * v556);
                v566.i64[0] = 0x900000009;
                v566.i64[1] = 0x900000009;
                v567 = vaddq_s32(v565[1], v566);
                *v565 = vaddq_s32(*v565, v566);
                v565[1] = v567;
                v565[2].i32[0] += 9;
                v481 = v793;
              }
            }
          }
          v568 = (unsigned int *)v467[630];
          if (*((_BYTE *)v568 + 20))
          {
            v569 = (unsigned int *)v467[629];
            if (*((_BYTE *)v569 + 20))
            {
              v570 = *(_QWORD *)(v477 + 17864) + *v568;
              v571 = *(_QWORD *)(*v480 + 8 * v570);
              v572 = *(_QWORD *)(v477 + 17872) + *v569;
              v573 = *(_QWORD *)(*v480 + 8 * v572);
              if (v571 <= v573 && v571 <= *v479)
              {
                v574 = *v481 + 24 * v572;
                v576 = (uint64_t **)(v574 + 8);
                v575 = *(uint64_t **)(v574 + 8);
                if (v575)
                {
                  while (1)
                  {
                    while (1)
                    {
                      v577 = (uint64_t **)v575;
                      v578 = *((_DWORD *)v575 + 7);
                      if (v578 <= v570)
                        break;
                      v575 = *v577;
                      v576 = v577;
                      if (!*v577)
                        goto LABEL_579;
                    }
                    if (v578 >= v570)
                      break;
                    v575 = v577[1];
                    if (!v575)
                    {
                      v576 = v577 + 1;
                      goto LABEL_579;
                    }
                  }
                }
                else
                {
                  v577 = (uint64_t **)(v574 + 8);
LABEL_579:
                  v579 = operator new(0x20uLL);
                  v579[7] = v570;
                  *(_QWORD *)v579 = 0;
                  *((_QWORD *)v579 + 1) = 0;
                  *((_QWORD *)v579 + 2) = v577;
                  *v576 = (uint64_t *)v579;
                  v580 = **(_QWORD **)v574;
                  if (v580)
                  {
                    *(_QWORD *)v574 = v580;
                    v581 = *v576;
                  }
                  else
                  {
                    v581 = (uint64_t *)v579;
                  }
                  result = sub_20E868578(*(uint64_t **)(v574 + 8), v581);
                  ++*(_QWORD *)(v574 + 16);
                  v2 = v807;
                  v582 = (int32x4_t *)(*v801 + 4 * v573);
                  v583.i64[0] = 0x600000006;
                  v583.i64[1] = 0x600000006;
                  v584 = vaddq_s32(v582[1], v583);
                  *v582 = vaddq_s32(*v582, v583);
                  v582[1] = v584;
                  v582[2].i32[0] += 6;
                  v481 = v793;
                }
              }
            }
          }
          v585 = (unsigned int *)v467[631];
          if (*((_BYTE *)v585 + 20))
          {
            v586 = (unsigned int *)v467[629];
            if (*((_BYTE *)v586 + 20))
            {
              v587 = *(_QWORD *)(v477 + 17872);
              v588 = v587 + *v585;
              v589 = *(_QWORD *)(*v480 + 8 * v588);
              v590 = v587 + *v586;
              v591 = *(_QWORD *)(*v480 + 8 * v590);
              if (v589 <= v591 && v589 <= *v479)
              {
                v592 = *v481 + 24 * v590;
                v594 = (uint64_t **)(v592 + 8);
                v593 = *(uint64_t **)(v592 + 8);
                if (v593)
                {
                  while (1)
                  {
                    while (1)
                    {
                      v595 = (uint64_t **)v593;
                      v596 = *((_DWORD *)v593 + 7);
                      if (v596 <= v588)
                        break;
                      v593 = *v595;
                      v594 = v595;
                      if (!*v595)
                        goto LABEL_594;
                    }
                    if (v596 >= v588)
                      break;
                    v593 = v595[1];
                    if (!v593)
                    {
                      v594 = v595 + 1;
                      goto LABEL_594;
                    }
                  }
                }
                else
                {
                  v595 = (uint64_t **)(v592 + 8);
LABEL_594:
                  v597 = operator new(0x20uLL);
                  v597[7] = v588;
                  *(_QWORD *)v597 = 0;
                  *((_QWORD *)v597 + 1) = 0;
                  *((_QWORD *)v597 + 2) = v595;
                  *v594 = (uint64_t *)v597;
                  v598 = **(_QWORD **)v592;
                  if (v598)
                  {
                    *(_QWORD *)v592 = v598;
                    v599 = *v594;
                  }
                  else
                  {
                    v599 = (uint64_t *)v597;
                  }
                  result = sub_20E868578(*(uint64_t **)(v592 + 8), v599);
                  ++*(_QWORD *)(v592 + 16);
                  v2 = v807;
                  v600 = (int32x4_t *)(*v801 + 4 * v591);
                  v601.i64[0] = 0x900000009;
                  v601.i64[1] = 0x900000009;
                  v602 = vaddq_s32(v600[1], v601);
                  *v600 = vaddq_s32(*v600, v601);
                  v600[1] = v602;
                  v600[2].i32[0] += 9;
                  v481 = v793;
                }
              }
            }
          }
          v603 = (unsigned int *)v467[628];
          v604 = (unsigned int *)v467[630];
          if (*((_BYTE *)v603 + 20))
          {
            if (*((_BYTE *)v604 + 20))
            {
              v605 = *(_QWORD *)(v477 + 17864);
              v606 = v605 + *v603;
              v607 = *(_QWORD *)(*v480 + 8 * v606);
              v608 = v605 + *v604;
              v609 = *(_QWORD *)(*v480 + 8 * v608);
              if (v607 <= v609 && v607 <= *v479)
              {
                v610 = *v481 + 24 * v608;
                v612 = (uint64_t **)(v610 + 8);
                v611 = *(uint64_t **)(v610 + 8);
                if (v611)
                {
                  while (1)
                  {
                    while (1)
                    {
                      v613 = (uint64_t **)v611;
                      v614 = *((_DWORD *)v611 + 7);
                      if (v614 <= v606)
                        break;
                      v611 = *v613;
                      v612 = v613;
                      if (!*v613)
                        goto LABEL_609;
                    }
                    if (v614 >= v606)
                      break;
                    v611 = v613[1];
                    if (!v611)
                    {
                      v612 = v613 + 1;
                      goto LABEL_609;
                    }
                  }
                }
                else
                {
                  v613 = (uint64_t **)(v610 + 8);
LABEL_609:
                  v615 = operator new(0x20uLL);
                  v615[7] = v606;
                  *(_QWORD *)v615 = 0;
                  *((_QWORD *)v615 + 1) = 0;
                  *((_QWORD *)v615 + 2) = v613;
                  *v612 = (uint64_t *)v615;
                  v616 = **(_QWORD **)v610;
                  if (v616)
                  {
                    *(_QWORD *)v610 = v616;
                    v617 = *v612;
                  }
                  else
                  {
                    v617 = (uint64_t *)v615;
                  }
                  result = sub_20E868578(*(uint64_t **)(v610 + 8), v617);
                  ++*(_QWORD *)(v610 + 16);
                  v2 = v807;
                  v618 = *v801 + 4 * v609;
                  v619.i64[0] = 0x600000006;
                  v619.i64[1] = 0x600000006;
                  *(int32x4_t *)v618 = vaddq_s32(*(int32x4_t *)v618, v619);
                  *(int32x2_t *)(v618 + 16) = vadd_s32(*(int32x2_t *)(v618 + 16), (int32x2_t)0x600000006);
                  v604 = (unsigned int *)v467[630];
                  v481 = v793;
                }
              }
            }
          }
          v620 = (unsigned int *)v467[629];
          if (*((_BYTE *)v620 + 20))
          {
            if (*((_BYTE *)v604 + 20))
            {
              v621 = *(_QWORD *)(v477 + 17872) + *v620;
              v622 = *(_QWORD *)(*v480 + 8 * v621);
              v623 = *(_QWORD *)(v477 + 17864) + *v604;
              v624 = *(_QWORD *)(*v480 + 8 * v623);
              if (v622 <= v624 && v622 <= *v479)
              {
                v625 = *v481 + 24 * v623;
                v627 = (uint64_t **)(v625 + 8);
                v626 = *(uint64_t **)(v625 + 8);
                if (v626)
                {
                  while (1)
                  {
                    while (1)
                    {
                      v628 = (uint64_t **)v626;
                      v629 = *((_DWORD *)v626 + 7);
                      if (v629 <= v621)
                        break;
                      v626 = *v628;
                      v627 = v628;
                      if (!*v628)
                        goto LABEL_624;
                    }
                    if (v629 >= v621)
                      break;
                    v626 = v628[1];
                    if (!v626)
                    {
                      v627 = v628 + 1;
                      goto LABEL_624;
                    }
                  }
                }
                else
                {
                  v628 = (uint64_t **)(v625 + 8);
LABEL_624:
                  v630 = operator new(0x20uLL);
                  v630[7] = v621;
                  *(_QWORD *)v630 = 0;
                  *((_QWORD *)v630 + 1) = 0;
                  *((_QWORD *)v630 + 2) = v628;
                  *v627 = (uint64_t *)v630;
                  v631 = **(_QWORD **)v625;
                  if (v631)
                  {
                    *(_QWORD *)v625 = v631;
                    v632 = *v627;
                  }
                  else
                  {
                    v632 = (uint64_t *)v630;
                  }
                  result = sub_20E868578(*(uint64_t **)(v625 + 8), v632);
                  ++*(_QWORD *)(v625 + 16);
                  v2 = v807;
                  v633 = *v801 + 4 * v624;
                  v634.i64[0] = 0x900000009;
                  v634.i64[1] = 0x900000009;
                  *(int32x4_t *)v633 = vaddq_s32(*(int32x4_t *)v633, v634);
                  *(int32x2_t *)(v633 + 16) = vadd_s32(*(int32x2_t *)(v633 + 16), (int32x2_t)0x900000009);
                  v604 = (unsigned int *)v467[630];
                  v481 = v793;
                }
              }
            }
          }
          if (*((_BYTE *)v604 + 20))
          {
            v635 = *(_QWORD *)(v477 + 17864) + *v604;
            v636 = *(_QWORD *)(*v480 + 8 * v635);
            if (v636 <= *v479)
            {
              v637 = *v481 + 24 * v635;
              v639 = (uint64_t **)(v637 + 8);
              v638 = *(uint64_t **)(v637 + 8);
              if (v638)
              {
                while (1)
                {
                  while (1)
                  {
                    v640 = (uint64_t **)v638;
                    v641 = *((_DWORD *)v638 + 7);
                    if (v641 <= v635)
                      break;
                    v638 = *v640;
                    v639 = v640;
                    if (!*v640)
                      goto LABEL_637;
                  }
                  if (v641 >= v635)
                    break;
                  v638 = v640[1];
                  if (!v638)
                  {
                    v639 = v640 + 1;
                    goto LABEL_637;
                  }
                }
              }
              else
              {
                v640 = (uint64_t **)(v637 + 8);
LABEL_637:
                v642 = operator new(0x20uLL);
                v642[7] = v635;
                *(_QWORD *)v642 = 0;
                *((_QWORD *)v642 + 1) = 0;
                *((_QWORD *)v642 + 2) = v640;
                *v639 = (uint64_t *)v642;
                v643 = **(_QWORD **)v637;
                if (v643)
                {
                  *(_QWORD *)v637 = v643;
                  v644 = *v639;
                }
                else
                {
                  v644 = (uint64_t *)v642;
                }
                result = sub_20E868578(*(uint64_t **)(v637 + 8), v644);
                ++*(_QWORD *)(v637 + 16);
                v2 = v807;
                v645 = *v801 + 4 * v636;
                v646.i64[0] = 0x600000006;
                v646.i64[1] = 0x600000006;
                *(int32x4_t *)v645 = vaddq_s32(*(int32x4_t *)v645, v646);
                *(int32x2_t *)(v645 + 16) = vadd_s32(*(int32x2_t *)(v645 + 16), (int32x2_t)0x600000006);
                v481 = v793;
              }
            }
          }
          v647 = (unsigned int *)v467[631];
          if (*((_BYTE *)v647 + 20)
            && (v648 = (unsigned int *)v467[630], *((_BYTE *)v648 + 20))
            && (v649 = *(_QWORD *)(v477 + 17872) + *v647,
                v650 = *(_QWORD *)(*v480 + 8 * v649),
                v651 = *(_QWORD *)(v477 + 17864) + *v648,
                v652 = *(_QWORD *)(*v480 + 8 * v651),
                v650 <= v652)
            && v650 <= *v479)
          {
            v666 = *v481 + 24 * v651;
            v668 = (uint64_t **)(v666 + 8);
            v667 = *(uint64_t **)(v666 + 8);
            if (v667)
            {
              while (1)
              {
                while (1)
                {
                  v669 = (uint64_t **)v667;
                  v670 = *((_DWORD *)v667 + 7);
                  if (v670 <= v649)
                    break;
                  v667 = *v669;
                  v668 = v669;
                  if (!*v669)
                    goto LABEL_665;
                }
                if (v670 >= v649)
                  goto LABEL_645;
                v667 = v669[1];
                if (!v667)
                {
                  v668 = v669 + 1;
                  goto LABEL_665;
                }
              }
            }
            v669 = (uint64_t **)(v666 + 8);
LABEL_665:
            v671 = operator new(0x20uLL);
            v671[7] = v649;
            *(_QWORD *)v671 = 0;
            *((_QWORD *)v671 + 1) = 0;
            *((_QWORD *)v671 + 2) = v669;
            *v668 = (uint64_t *)v671;
            v672 = **(_QWORD **)v666;
            if (v672)
            {
              *(_QWORD *)v666 = v672;
              v673 = *v668;
            }
            else
            {
              v673 = (uint64_t *)v671;
            }
            result = sub_20E868578(*(uint64_t **)(v666 + 8), v673);
            ++*(_QWORD *)(v666 + 16);
            v2 = v807;
            v678 = *v801 + 4 * v652;
            v679.i64[0] = 0x900000009;
            v679.i64[1] = 0x900000009;
            *(int32x4_t *)v678 = vaddq_s32(*(int32x4_t *)v678, v679);
            *(int32x2_t *)(v678 + 16) = vadd_s32(*(int32x2_t *)(v678 + 16), (int32x2_t)0x900000009);
            v647 = (unsigned int *)v467[631];
            v481 = v793;
            v653 = (unsigned int *)v467[628];
            if (!*((_BYTE *)v653 + 20))
              goto LABEL_672;
LABEL_646:
            if (!*((_BYTE *)v647 + 20))
              goto LABEL_672;
            v654 = *(_QWORD *)(v477 + 17864) + *v653;
            v655 = *(_QWORD *)(*v480 + 8 * v654);
            v656 = *(_QWORD *)(v477 + 17872) + *v647;
            v657 = *(_QWORD *)(*v480 + 8 * v656);
            if (v655 > v657 || v655 > *v479)
              goto LABEL_672;
            v658 = *v481 + 24 * v656;
            v660 = (uint64_t **)(v658 + 8);
            v659 = *(uint64_t **)(v658 + 8);
            if (v659)
            {
              while (1)
              {
                while (1)
                {
                  v661 = (uint64_t **)v659;
                  v662 = *((_DWORD *)v659 + 7);
                  if (v662 <= v654)
                    break;
                  v659 = *v661;
                  v660 = v661;
                  if (!*v661)
                    goto LABEL_656;
                }
                if (v662 >= v654)
                  break;
                v659 = v661[1];
                if (!v659)
                {
                  v660 = v661 + 1;
                  goto LABEL_656;
                }
              }
              v677 = (unsigned int *)v467[629];
              if (*((_BYTE *)v677 + 20))
                goto LABEL_673;
            }
            else
            {
              v661 = (uint64_t **)(v658 + 8);
LABEL_656:
              v663 = operator new(0x20uLL);
              v663[7] = v654;
              *(_QWORD *)v663 = 0;
              *((_QWORD *)v663 + 1) = 0;
              *((_QWORD *)v663 + 2) = v661;
              *v660 = (uint64_t *)v663;
              v664 = **(_QWORD **)v658;
              if (v664)
              {
                *(_QWORD *)v658 = v664;
                v665 = *v660;
              }
              else
              {
                v665 = (uint64_t *)v663;
              }
              result = sub_20E868578(*(uint64_t **)(v658 + 8), v665);
              ++*(_QWORD *)(v658 + 16);
              v2 = v807;
              v674 = (int32x4_t *)(*v801 + 4 * v657);
              v675.i64[0] = 0x600000006;
              v675.i64[1] = 0x600000006;
              v676 = vaddq_s32(v674[1], v675);
              *v674 = vaddq_s32(*v674, v675);
              v674[1] = v676;
              v674[2].i32[0] += 6;
              v647 = (unsigned int *)v467[631];
              v481 = v793;
              v677 = (unsigned int *)v467[629];
              if (*((_BYTE *)v677 + 20))
                goto LABEL_673;
            }
          }
          else
          {
LABEL_645:
            v653 = (unsigned int *)v467[628];
            if (*((_BYTE *)v653 + 20))
              goto LABEL_646;
LABEL_672:
            v677 = (unsigned int *)v467[629];
            if (*((_BYTE *)v677 + 20))
            {
LABEL_673:
              if (!*((_BYTE *)v647 + 20))
                goto LABEL_687;
              v680 = *(_QWORD *)(v477 + 17872);
              v681 = v680 + *v677;
              v682 = *(_QWORD *)(*v480 + 8 * v681);
              v683 = v680 + *v647;
              v684 = *(_QWORD *)(*v480 + 8 * v683);
              if (v682 > v684 || v682 > *v479)
                goto LABEL_687;
              v685 = *v481 + 24 * v683;
              v687 = (uint64_t **)(v685 + 8);
              v686 = *(uint64_t **)(v685 + 8);
              if (!v686)
              {
                v688 = (uint64_t **)(v685 + 8);
LABEL_683:
                v690 = operator new(0x20uLL);
                v690[7] = v681;
                *(_QWORD *)v690 = 0;
                *((_QWORD *)v690 + 1) = 0;
                *((_QWORD *)v690 + 2) = v688;
                *v687 = (uint64_t *)v690;
                v691 = **(_QWORD **)v685;
                if (v691)
                {
                  *(_QWORD *)v685 = v691;
                  v692 = *v687;
                }
                else
                {
                  v692 = (uint64_t *)v690;
                }
                result = sub_20E868578(*(uint64_t **)(v685 + 8), v692);
                ++*(_QWORD *)(v685 + 16);
                v2 = v807;
                v693 = (int32x4_t *)(*v801 + 4 * v684);
                v694.i64[0] = 0x900000009;
                v694.i64[1] = 0x900000009;
                v695 = vaddq_s32(v693[1], v694);
                *v693 = vaddq_s32(*v693, v694);
                v693[1] = v695;
                v693[2].i32[0] += 9;
                v647 = (unsigned int *)v467[631];
                v481 = v793;
                goto LABEL_687;
              }
              while (1)
              {
                while (1)
                {
                  v688 = (uint64_t **)v686;
                  v689 = *((_DWORD *)v686 + 7);
                  if (v689 <= v681)
                    break;
                  v686 = *v688;
                  v687 = v688;
                  if (!*v688)
                    goto LABEL_683;
                }
                if (v689 >= v681)
                  break;
                v686 = v688[1];
                if (!v686)
                {
                  v687 = v688 + 1;
                  goto LABEL_683;
                }
              }
              v696 = (unsigned int *)v467[630];
              if (!*((_BYTE *)v696 + 20))
              {
LABEL_702:
                if (*((_BYTE *)v647 + 20))
                {
                  v712 = *(_QWORD *)(v477 + 17872) + *v647;
                  v713 = *(_QWORD *)(*v480 + 8 * v712);
                  if (v713 <= *v479)
                  {
                    v714 = *v481 + 24 * v712;
                    v716 = (uint64_t **)(v714 + 8);
                    v715 = *(uint64_t **)(v714 + 8);
                    if (v715)
                    {
                      while (1)
                      {
                        while (1)
                        {
                          v717 = (uint64_t **)v715;
                          v718 = *((_DWORD *)v715 + 7);
                          if (v718 <= v712)
                            break;
                          v715 = *v717;
                          v716 = v717;
                          if (!*v717)
                            goto LABEL_711;
                        }
                        if (v718 >= v712)
                          break;
                        v715 = v717[1];
                        if (!v715)
                        {
                          v716 = v717 + 1;
                          goto LABEL_711;
                        }
                      }
                    }
                    else
                    {
                      v717 = (uint64_t **)(v714 + 8);
LABEL_711:
                      v719 = operator new(0x20uLL);
                      v719[7] = v712;
                      *(_QWORD *)v719 = 0;
                      *((_QWORD *)v719 + 1) = 0;
                      *((_QWORD *)v719 + 2) = v717;
                      *v716 = (uint64_t *)v719;
                      v720 = **(_QWORD **)v714;
                      if (v720)
                      {
                        *(_QWORD *)v714 = v720;
                        v469 = *v716;
                      }
                      else
                      {
                        v469 = (uint64_t *)v719;
                      }
                      result = sub_20E868578(*(uint64_t **)(v714 + 8), v469);
                      ++*(_QWORD *)(v714 + 16);
                      v2 = v807;
                      v470 = (int32x4_t *)(*v801 + 4 * v713);
                      v471.i64[0] = 0x900000009;
                      v471.i64[1] = 0x900000009;
                      v472 = vaddq_s32(v470[1], v471);
                      *v470 = vaddq_s32(*v470, v471);
                      v470[1] = v472;
                      v470[2].i32[0] += 9;
                    }
                  }
                }
                goto LABEL_472;
              }
LABEL_688:
              if (*((_BYTE *)v647 + 20))
              {
                v697 = *(_QWORD *)(v477 + 17864) + *v696;
                v698 = *(_QWORD *)(*v480 + 8 * v697);
                v699 = *(_QWORD *)(v477 + 17872) + *v647;
                v700 = *(_QWORD *)(*v480 + 8 * v699);
                if (v698 <= v700 && v698 <= *v479)
                {
                  v701 = *v481 + 24 * v699;
                  v703 = (uint64_t **)(v701 + 8);
                  v702 = *(uint64_t **)(v701 + 8);
                  if (v702)
                  {
                    while (1)
                    {
                      while (1)
                      {
                        v704 = (uint64_t **)v702;
                        v705 = *((_DWORD *)v702 + 7);
                        if (v705 <= v697)
                          break;
                        v702 = *v704;
                        v703 = v704;
                        if (!*v704)
                          goto LABEL_698;
                      }
                      if (v705 >= v697)
                        break;
                      v702 = v704[1];
                      if (!v702)
                      {
                        v703 = v704 + 1;
                        goto LABEL_698;
                      }
                    }
                  }
                  else
                  {
                    v704 = (uint64_t **)(v701 + 8);
LABEL_698:
                    v706 = operator new(0x20uLL);
                    v706[7] = v697;
                    *(_QWORD *)v706 = 0;
                    *((_QWORD *)v706 + 1) = 0;
                    *((_QWORD *)v706 + 2) = v704;
                    *v703 = (uint64_t *)v706;
                    v707 = **(_QWORD **)v701;
                    if (v707)
                    {
                      *(_QWORD *)v701 = v707;
                      v708 = *v703;
                    }
                    else
                    {
                      v708 = (uint64_t *)v706;
                    }
                    result = sub_20E868578(*(uint64_t **)(v701 + 8), v708);
                    ++*(_QWORD *)(v701 + 16);
                    v2 = v807;
                    v709 = (int32x4_t *)(*v801 + 4 * v700);
                    v710.i64[0] = 0x600000006;
                    v710.i64[1] = 0x600000006;
                    v711 = vaddq_s32(v709[1], v710);
                    *v709 = vaddq_s32(*v709, v710);
                    v709[1] = v711;
                    v709[2].i32[0] += 6;
                    v647 = (unsigned int *)v467[631];
                    v481 = v793;
                  }
                }
              }
              goto LABEL_702;
            }
          }
LABEL_687:
          v696 = (unsigned int *)v467[630];
          if (!*((_BYTE *)v696 + 20))
            goto LABEL_702;
          goto LABEL_688;
        }
      }
    }
LABEL_472:
    v467 += 667;
    if (v467 != v468)
      continue;
    break;
  }
  v2 = (uint64_t *)*v788;
  v1 = (_QWORD *)v788[1];
LABEL_719:
  v721 = (_QWORD *)v1[109];
  v722 = (_QWORD *)v1[110];
  if (v721 != v722)
  {
    do
    {
      v723 = v2;
      result = sub_20F7A4F74(v2, v721);
      v2 = v723;
      v721 += 27;
    }
    while (v721 != v722);
    v2 = (uint64_t *)*v788;
    v1 = (_QWORD *)v788[1];
  }
  v724 = v1[112];
  v725 = v1[113];
  if (v724 != v725)
  {
    v808 = v2;
    do
    {
      v729 = *(unsigned int **)(v724 + 736);
      v730 = *(unsigned int **)(v724 + 744);
      if (((*((unsigned __int8 *)v730 + 4) >> 2) & 1) == (char)(32 * *((_BYTE *)v729 + 4)) >> 7)
      {
        v731 = v2[1];
        if (!*((_BYTE *)v729 + 20) || *v729 != -1)
        {
          v732 = *((unsigned __int8 *)v730 + 20);
          if (!*((_BYTE *)v730 + 20) || *v730 != -1)
          {
            v734 = (_QWORD *)v2[2];
            v733 = (unint64_t *)v2[3];
            v735 = (_QWORD *)v2[4];
            v736 = (_QWORD *)v2[5];
            if (*((_BYTE *)v729 + 20))
            {
              v737 = *(_QWORD *)(v731 + 17864) + *v729;
              v738 = *(_QWORD *)(*v734 + 8 * v737);
              if (v738 <= *v733)
              {
                v739 = *v735 + 24 * v737;
                v741 = (uint64_t **)(v739 + 8);
                v740 = *(uint64_t **)(v739 + 8);
                if (v740)
                {
                  while (1)
                  {
                    while (1)
                    {
                      v742 = (uint64_t **)v740;
                      v743 = *((_DWORD *)v740 + 7);
                      if (v743 <= v737)
                        break;
                      v740 = *v742;
                      v741 = v742;
                      if (!*v742)
                        goto LABEL_741;
                    }
                    if (v743 >= v737)
                      break;
                    v740 = v742[1];
                    if (!v740)
                    {
                      v741 = v742 + 1;
                      goto LABEL_741;
                    }
                  }
                }
                else
                {
                  v742 = (uint64_t **)(v739 + 8);
LABEL_741:
                  v794 = (unint64_t *)v2[3];
                  v802 = (_QWORD *)v2[4];
                  v744 = operator new(0x20uLL);
                  v744[7] = v737;
                  *(_QWORD *)v744 = 0;
                  *((_QWORD *)v744 + 1) = 0;
                  *((_QWORD *)v744 + 2) = v742;
                  *v741 = (uint64_t *)v744;
                  v745 = **(_QWORD **)v739;
                  if (v745)
                  {
                    *(_QWORD *)v739 = v745;
                    v746 = *v741;
                  }
                  else
                  {
                    v746 = (uint64_t *)v744;
                  }
                  result = sub_20E868578(*(uint64_t **)(v739 + 8), v746);
                  ++*(_QWORD *)(v739 + 16);
                  v747 = *v736 + 4 * v738;
                  v748.i64[0] = 0x600000006;
                  v748.i64[1] = 0x600000006;
                  *(int32x4_t *)v747 = vaddq_s32(*(int32x4_t *)v747, v748);
                  *(int32x2_t *)(v747 + 16) = vadd_s32(*(int32x2_t *)(v747 + 16), (int32x2_t)0x600000006);
                  v730 = *(unsigned int **)(v724 + 744);
                  v732 = *((unsigned __int8 *)v730 + 20);
                  v729 = *(unsigned int **)(v724 + 736);
                  v735 = v802;
                  v2 = v808;
                  v733 = v794;
                }
              }
            }
            if (v732)
            {
              if (*((_BYTE *)v729 + 20))
              {
                v749 = *(_QWORD *)(v731 + 17864);
                v750 = v749 + *v730;
                v751 = *(_QWORD *)(*v734 + 8 * v750);
                v752 = v749 + *v729;
                v753 = *(_QWORD *)(*v734 + 8 * v752);
                if (v751 <= v753 && v751 <= *v733)
                {
                  v754 = *v735 + 24 * v752;
                  v756 = (uint64_t **)(v754 + 8);
                  v755 = *(uint64_t **)(v754 + 8);
                  if (v755)
                  {
                    while (1)
                    {
                      while (1)
                      {
                        v757 = (uint64_t **)v755;
                        v758 = *((_DWORD *)v755 + 7);
                        if (v758 <= v750)
                          break;
                        v755 = *v757;
                        v756 = v757;
                        if (!*v757)
                          goto LABEL_756;
                      }
                      if (v758 >= v750)
                        break;
                      v755 = v757[1];
                      if (!v755)
                      {
                        v756 = v757 + 1;
                        goto LABEL_756;
                      }
                    }
                  }
                  else
                  {
                    v757 = (uint64_t **)(v754 + 8);
LABEL_756:
                    v795 = v733;
                    v803 = v735;
                    v759 = operator new(0x20uLL);
                    v759[7] = v750;
                    *(_QWORD *)v759 = 0;
                    *((_QWORD *)v759 + 1) = 0;
                    *((_QWORD *)v759 + 2) = v757;
                    *v756 = (uint64_t *)v759;
                    v760 = **(_QWORD **)v754;
                    if (v760)
                    {
                      *(_QWORD *)v754 = v760;
                      v761 = *v756;
                    }
                    else
                    {
                      v761 = (uint64_t *)v759;
                    }
                    result = sub_20E868578(*(uint64_t **)(v754 + 8), v761);
                    ++*(_QWORD *)(v754 + 16);
                    v762 = *v736 + 4 * v753;
                    v763.i64[0] = 0x600000006;
                    v763.i64[1] = 0x600000006;
                    *(int32x4_t *)v762 = vaddq_s32(*(int32x4_t *)v762, v763);
                    *(int32x2_t *)(v762 + 16) = vadd_s32(*(int32x2_t *)(v762 + 16), (int32x2_t)0x600000006);
                    v729 = *(unsigned int **)(v724 + 736);
                    v730 = *(unsigned int **)(v724 + 744);
                    v735 = v803;
                    v2 = v808;
                    v733 = v795;
                  }
                }
              }
            }
            if (*((_BYTE *)v729 + 20))
            {
              if (*((_BYTE *)v730 + 20))
              {
                v764 = *(_QWORD *)(v731 + 17864);
                v765 = v764 + *v729;
                v766 = *(_QWORD *)(*v734 + 8 * v765);
                v767 = v764 + *v730;
                v768 = *(_QWORD *)(*v734 + 8 * v767);
                if (v766 <= v768 && v766 <= *v733)
                {
                  v769 = *v735 + 24 * v767;
                  v771 = (uint64_t **)(v769 + 8);
                  v770 = *(uint64_t **)(v769 + 8);
                  if (v770)
                  {
                    while (1)
                    {
                      while (1)
                      {
                        v772 = (uint64_t **)v770;
                        v773 = *((_DWORD *)v770 + 7);
                        if (v773 <= v765)
                          break;
                        v770 = *v772;
                        v771 = v772;
                        if (!*v772)
                          goto LABEL_771;
                      }
                      if (v773 >= v765)
                        break;
                      v770 = v772[1];
                      if (!v770)
                      {
                        v771 = v772 + 1;
                        goto LABEL_771;
                      }
                    }
                  }
                  else
                  {
                    v772 = (uint64_t **)(v769 + 8);
LABEL_771:
                    v796 = v733;
                    v804 = v735;
                    v774 = operator new(0x20uLL);
                    v774[7] = v765;
                    *(_QWORD *)v774 = 0;
                    *((_QWORD *)v774 + 1) = 0;
                    *((_QWORD *)v774 + 2) = v772;
                    *v771 = (uint64_t *)v774;
                    v775 = **(_QWORD **)v769;
                    if (v775)
                    {
                      *(_QWORD *)v769 = v775;
                      v776 = *v771;
                    }
                    else
                    {
                      v776 = (uint64_t *)v774;
                    }
                    result = sub_20E868578(*(uint64_t **)(v769 + 8), v776);
                    ++*(_QWORD *)(v769 + 16);
                    v777 = *v736 + 4 * v768;
                    v778.i64[0] = 0x600000006;
                    v778.i64[1] = 0x600000006;
                    *(int32x4_t *)v777 = vaddq_s32(*(int32x4_t *)v777, v778);
                    *(int32x2_t *)(v777 + 16) = vadd_s32(*(int32x2_t *)(v777 + 16), (int32x2_t)0x600000006);
                    v730 = *(unsigned int **)(v724 + 744);
                    v735 = v804;
                    v2 = v808;
                    v733 = v796;
                  }
                }
              }
            }
            if (*((_BYTE *)v730 + 20))
            {
              v779 = *(_QWORD *)(v731 + 17864) + *v730;
              v780 = *(_QWORD *)(*v734 + 8 * v779);
              if (v780 <= *v733)
              {
                v781 = *v735 + 24 * v779;
                v783 = (uint64_t **)(v781 + 8);
                v782 = *(uint64_t **)(v781 + 8);
                if (v782)
                {
                  while (1)
                  {
                    while (1)
                    {
                      v784 = (uint64_t **)v782;
                      v785 = *((_DWORD *)v782 + 7);
                      if (v785 <= v779)
                        break;
                      v782 = *v784;
                      v783 = v784;
                      if (!*v784)
                        goto LABEL_784;
                    }
                    if (v785 >= v779)
                      break;
                    v782 = v784[1];
                    if (!v782)
                    {
                      v783 = v784 + 1;
                      goto LABEL_784;
                    }
                  }
                }
                else
                {
                  v784 = (uint64_t **)(v781 + 8);
LABEL_784:
                  v786 = operator new(0x20uLL);
                  v786[7] = v779;
                  *(_QWORD *)v786 = 0;
                  *((_QWORD *)v786 + 1) = 0;
                  *((_QWORD *)v786 + 2) = v784;
                  *v783 = (uint64_t *)v786;
                  v787 = **(_QWORD **)v781;
                  if (v787)
                  {
                    *(_QWORD *)v781 = v787;
                    v726 = *v783;
                  }
                  else
                  {
                    v726 = (uint64_t *)v786;
                  }
                  result = sub_20E868578(*(uint64_t **)(v781 + 8), v726);
                  ++*(_QWORD *)(v781 + 16);
                  v727 = *v736 + 4 * v780;
                  v728.i64[0] = 0x600000006;
                  v728.i64[1] = 0x600000006;
                  *(int32x4_t *)v727 = vaddq_s32(*(int32x4_t *)v727, v728);
                  *(int32x2_t *)(v727 + 16) = vadd_s32(*(int32x2_t *)(v727 + 16), (int32x2_t)0x600000006);
                  v2 = v808;
                }
              }
            }
          }
        }
      }
      v724 += 888;
    }
    while (v724 != v725);
  }
  return result;
}

uint64_t *sub_20F7A4F74(uint64_t *result, _QWORD *a2)
{
  unsigned int **v2;
  unsigned int *v3;
  unsigned int *v4;
  _QWORD *v6;
  _QWORD *v7;
  unint64_t *v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t **v17;
  uint64_t **v18;
  unsigned int v19;
  _DWORD *v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  int32x4_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unsigned int *v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unsigned int *v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  unsigned int *v46;
  uint64_t *v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  unint64_t v52;
  unsigned int *v53;
  uint64_t *v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  unint64_t v59;
  unsigned int *v60;
  uint64_t *v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  unint64_t v66;
  unsigned int *v67;
  uint64_t *v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  unint64_t v73;
  unsigned int *v74;
  uint64_t *v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;
  unint64_t v80;
  unsigned int *v81;
  uint64_t *v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  uint64_t v86;
  unint64_t v87;
  unsigned int *v88;
  uint64_t *v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;
  uint64_t v93;
  unint64_t v94;
  unsigned int *v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t v98;
  uint64_t v99;
  unint64_t v100;
  uint64_t v101;
  uint64_t *v102;
  uint64_t **v103;
  uint64_t **v104;
  unsigned int v105;
  _DWORD *v106;
  uint64_t v107;
  uint64_t *v108;
  uint64_t v109;
  uint64_t *v110;
  uint64_t **v111;
  uint64_t **v112;
  unsigned int v113;
  _DWORD *v114;
  uint64_t v115;
  uint64_t *v116;
  uint64_t v117;
  uint64_t *v118;
  uint64_t **v119;
  uint64_t **v120;
  unsigned int v121;
  _DWORD *v122;
  uint64_t v123;
  uint64_t *v124;
  uint64_t v125;
  uint64_t *v126;
  uint64_t **v127;
  uint64_t **v128;
  unsigned int v129;
  _DWORD *v130;
  uint64_t v131;
  uint64_t *v132;
  uint64_t v133;
  uint64_t *v134;
  uint64_t **v135;
  uint64_t **v136;
  unsigned int v137;
  _DWORD *v138;
  uint64_t v139;
  uint64_t *v140;
  uint64_t v141;
  uint64_t *v142;
  uint64_t **v143;
  uint64_t **v144;
  unsigned int v145;
  _DWORD *v146;
  uint64_t v147;
  uint64_t *v148;
  uint64_t v149;
  uint64_t *v150;
  uint64_t **v151;
  uint64_t **v152;
  unsigned int v153;
  _DWORD *v154;
  uint64_t v155;
  uint64_t *v156;
  uint64_t v157;
  uint64_t *v158;
  uint64_t **v159;
  uint64_t **v160;
  unsigned int v161;
  _DWORD *v162;
  uint64_t v163;
  uint64_t *v164;
  uint64_t v165;
  uint64_t *v166;
  uint64_t **v167;
  uint64_t **v168;
  unsigned int v169;
  _DWORD *v170;
  uint64_t v171;
  uint64_t *v172;
  uint64_t v173;
  uint64_t *v174;
  uint64_t **v175;
  uint64_t **v176;
  unsigned int v177;
  _DWORD *v178;
  uint64_t v179;
  uint64_t *v180;
  uint64_t v181;
  uint64_t *v182;
  uint64_t **v183;
  uint64_t **v184;
  unsigned int v185;
  _DWORD *v186;
  uint64_t v187;
  uint64_t *v188;
  uint64_t v189;
  int32x4_t v190;
  uint64_t v191;
  int32x4_t v192;
  uint64_t v193;
  int32x4_t v194;
  uint64_t v195;
  int32x4_t v196;
  uint64_t v197;
  int32x4_t v198;
  uint64_t v199;
  int32x4_t v200;
  uint64_t v201;
  int32x4_t v202;
  uint64_t v203;
  int32x4_t v204;
  uint64_t v205;
  int32x4_t v206;
  uint64_t v207;
  int32x4_t v208;
  uint64_t v209;
  int32x4_t v210;
  uint64_t v211;
  unint64_t v212;
  uint64_t v213;
  uint64_t *v214;
  uint64_t **v215;
  uint64_t **v216;
  unsigned int v217;
  _DWORD *v218;
  uint64_t v219;
  uint64_t *v220;
  uint64_t v221;
  int32x4_t v222;
  unsigned int *v223;
  unsigned int *v224;
  uint64_t v225;
  unint64_t v226;
  uint64_t v227;
  unint64_t v228;
  uint64_t v229;
  uint64_t *v230;
  uint64_t **v231;
  uint64_t **v232;
  unsigned int v233;
  _DWORD *v234;
  uint64_t v235;
  uint64_t *v236;
  uint64_t v237;
  int32x4_t v238;
  unsigned int *v239;
  unsigned int *v240;
  uint64_t v241;
  unint64_t v242;
  uint64_t v243;
  unint64_t v244;
  uint64_t v245;
  uint64_t *v246;
  uint64_t **v247;
  uint64_t **v248;
  unsigned int v249;
  _DWORD *v250;
  uint64_t v251;
  uint64_t *v252;
  uint64_t v253;
  int32x4_t v254;
  unsigned int *v255;
  unsigned int *v256;
  uint64_t v257;
  unint64_t v258;
  uint64_t v259;
  unint64_t v260;
  uint64_t v261;
  uint64_t *v262;
  uint64_t **v263;
  uint64_t **v264;
  unsigned int v265;
  _DWORD *v266;
  uint64_t v267;
  uint64_t *v268;
  uint64_t v269;
  int32x4_t v270;
  unsigned int *v271;
  unsigned int *v272;
  uint64_t v273;
  unint64_t v274;
  uint64_t v275;
  unint64_t v276;
  uint64_t v277;
  uint64_t *v278;
  uint64_t **v279;
  uint64_t **v280;
  unsigned int v281;
  _DWORD *v282;
  uint64_t v283;
  uint64_t *v284;
  uint64_t v285;
  int32x4_t v286;
  unsigned int *v287;
  unsigned int *v288;
  uint64_t v289;
  unint64_t v290;
  uint64_t v291;
  unint64_t v292;
  uint64_t v293;
  uint64_t *v294;
  uint64_t **v295;
  uint64_t **v296;
  unsigned int v297;
  _DWORD *v298;
  uint64_t v299;
  uint64_t *v300;
  uint64_t v301;
  int32x4_t v302;
  unsigned int *v303;
  unsigned int *v304;
  uint64_t v305;
  unint64_t v306;
  uint64_t v307;
  unint64_t v308;
  uint64_t v309;
  uint64_t *v310;
  uint64_t **v311;
  uint64_t **v312;
  unsigned int v313;
  _DWORD *v314;
  uint64_t v315;
  uint64_t *v316;
  uint64_t v317;
  int32x4_t v318;
  unsigned int *v319;
  unsigned int *v320;
  uint64_t v321;
  unint64_t v322;
  uint64_t v323;
  unint64_t v324;
  uint64_t v325;
  uint64_t *v326;
  uint64_t **v327;
  uint64_t **v328;
  unsigned int v329;
  _DWORD *v330;
  uint64_t v331;
  uint64_t *v332;
  uint64_t v333;
  int32x4_t v334;
  unsigned int *v335;
  unsigned int *v336;
  uint64_t v337;
  unint64_t v338;
  uint64_t v339;
  unint64_t v340;
  uint64_t v341;
  uint64_t *v342;
  uint64_t **v343;
  uint64_t **v344;
  unsigned int v345;
  _DWORD *v346;
  uint64_t v347;
  uint64_t *v348;
  uint64_t v349;
  int32x4_t v350;
  unsigned int *v351;
  unsigned int *v352;
  uint64_t v353;
  unint64_t v354;
  uint64_t v355;
  unint64_t v356;
  uint64_t v357;
  uint64_t *v358;
  uint64_t **v359;
  uint64_t **v360;
  unsigned int v361;
  _DWORD *v362;
  uint64_t v363;
  uint64_t *v364;
  uint64_t v365;
  int32x4_t v366;
  unsigned int *v367;
  unsigned int *v368;
  uint64_t v369;
  unint64_t v370;
  uint64_t v371;
  unint64_t v372;
  uint64_t v373;
  uint64_t *v374;
  uint64_t **v375;
  uint64_t **v376;
  unsigned int v377;
  _DWORD *v378;
  uint64_t v379;
  uint64_t *v380;
  uint64_t v381;
  int32x4_t v382;
  unsigned int *v383;
  uint64_t v384;
  unint64_t v385;
  uint64_t v386;
  unint64_t v387;
  uint64_t v388;
  uint64_t *v389;
  uint64_t **v390;
  uint64_t **v391;
  unsigned int v392;
  _DWORD *v393;
  uint64_t v394;
  uint64_t *v395;
  uint64_t v396;
  int32x4_t v397;
  uint64_t v398;
  unint64_t v399;
  uint64_t v400;
  uint64_t *v401;
  uint64_t **v402;
  uint64_t **v403;
  unsigned int v404;
  _DWORD *v405;
  uint64_t v406;
  uint64_t *v407;
  uint64_t v408;
  int32x4_t v409;
  unsigned int *v410;
  unsigned int *v411;
  uint64_t v412;
  uint64_t v413;
  unint64_t v414;
  uint64_t v415;
  unint64_t v416;
  uint64_t v417;
  uint64_t *v418;
  uint64_t **v419;
  uint64_t **v420;
  unsigned int v421;
  _DWORD *v422;
  uint64_t v423;
  uint64_t *v424;
  uint64_t v425;
  int32x4_t v426;
  unsigned int *v427;
  unsigned int *v428;
  uint64_t v429;
  unint64_t v430;
  uint64_t v431;
  unint64_t v432;
  uint64_t v433;
  uint64_t *v434;
  uint64_t **v435;
  uint64_t **v436;
  unsigned int v437;
  _DWORD *v438;
  uint64_t v439;
  uint64_t *v440;
  uint64_t v441;
  int32x4_t v442;
  unsigned int *v443;
  unsigned int *v444;
  uint64_t v445;
  unint64_t v446;
  uint64_t v447;
  unint64_t v448;
  uint64_t v449;
  uint64_t *v450;
  uint64_t **v451;
  uint64_t **v452;
  unsigned int v453;
  _DWORD *v454;
  uint64_t v455;
  uint64_t *v456;
  uint64_t v457;
  int32x4_t v458;
  unsigned int *v459;
  unsigned int *v460;
  uint64_t v461;
  unint64_t v462;
  uint64_t v463;
  unint64_t v464;
  uint64_t v465;
  uint64_t *v466;
  uint64_t **v467;
  uint64_t **v468;
  unsigned int v469;
  _DWORD *v470;
  uint64_t v471;
  uint64_t *v472;
  uint64_t v473;
  int32x4_t v474;
  unsigned int *v475;
  unsigned int *v476;
  uint64_t v477;
  unint64_t v478;
  uint64_t v479;
  unint64_t v480;
  uint64_t v481;
  uint64_t *v482;
  uint64_t **v483;
  uint64_t **v484;
  unsigned int v485;
  _DWORD *v486;
  uint64_t v487;
  uint64_t *v488;
  uint64_t v489;
  int32x4_t v490;
  unsigned int *v491;
  unsigned int *v492;
  uint64_t v493;
  unint64_t v494;
  uint64_t v495;
  unint64_t v496;
  uint64_t v497;
  uint64_t *v498;
  uint64_t **v499;
  uint64_t **v500;
  unsigned int v501;
  _DWORD *v502;
  uint64_t v503;
  uint64_t *v504;
  uint64_t v505;
  int32x4_t v506;
  unsigned int *v507;
  unsigned int *v508;
  uint64_t v509;
  unint64_t v510;
  uint64_t v511;
  unint64_t v512;
  uint64_t v513;
  uint64_t *v514;
  uint64_t **v515;
  uint64_t **v516;
  unsigned int v517;
  _DWORD *v518;
  uint64_t v519;
  uint64_t *v520;
  uint64_t v521;
  int32x4_t v522;
  unsigned int *v523;
  unsigned int *v524;
  uint64_t v525;
  unint64_t v526;
  uint64_t v527;
  unint64_t v528;
  uint64_t v529;
  uint64_t *v530;
  uint64_t **v531;
  uint64_t **v532;
  unsigned int v533;
  _DWORD *v534;
  uint64_t v535;
  uint64_t *v536;
  uint64_t v537;
  int32x4_t v538;
  unsigned int *v539;
  unsigned int *v540;
  uint64_t v541;
  unint64_t v542;
  uint64_t v543;
  unint64_t v544;
  uint64_t v545;
  uint64_t *v546;
  uint64_t **v547;
  uint64_t **v548;
  unsigned int v549;
  _DWORD *v550;
  uint64_t v551;
  uint64_t *v552;
  uint64_t v553;
  int32x4_t v554;
  unsigned int *v555;
  uint64_t v556;
  unint64_t v557;
  uint64_t v558;
  unint64_t v559;
  uint64_t v560;
  uint64_t *v561;
  uint64_t **v562;
  uint64_t **v563;
  unsigned int v564;
  _DWORD *v565;
  uint64_t v566;
  uint64_t *v567;
  uint64_t v568;
  int32x4_t v569;
  unsigned int *v570;
  uint64_t v571;
  uint64_t v572;
  unint64_t v573;
  uint64_t v574;
  unint64_t v575;
  uint64_t v576;
  uint64_t *v577;
  uint64_t **v578;
  uint64_t **v579;
  unsigned int v580;
  _DWORD *v581;
  uint64_t v582;
  uint64_t *v583;
  uint64_t v584;
  int32x4_t v585;
  uint64_t v586;
  unint64_t v587;
  uint64_t v588;
  uint64_t *v589;
  uint64_t **v590;
  uint64_t **v591;
  unsigned int v592;
  _DWORD *v593;
  uint64_t v594;
  uint64_t *v595;
  uint64_t v596;
  int32x4_t v597;
  unsigned int *v598;
  unsigned int *v599;
  uint64_t v600;
  unint64_t v601;
  uint64_t v602;
  unint64_t v603;
  uint64_t v604;
  uint64_t *v605;
  uint64_t **v606;
  uint64_t **v607;
  unsigned int v608;
  _DWORD *v609;
  uint64_t v610;
  uint64_t *v611;
  uint64_t v612;
  int32x4_t v613;
  unsigned int *v614;
  unsigned int *v615;
  uint64_t v616;
  unint64_t v617;
  uint64_t v618;
  unint64_t v619;
  uint64_t v620;
  uint64_t *v621;
  uint64_t **v622;
  uint64_t **v623;
  unsigned int v624;
  _DWORD *v625;
  uint64_t v626;
  uint64_t *v627;
  uint64_t v628;
  int32x4_t v629;
  unsigned int *v630;
  unsigned int *v631;
  uint64_t v632;
  unint64_t v633;
  uint64_t v634;
  unint64_t v635;
  uint64_t v636;
  uint64_t *v637;
  uint64_t **v638;
  uint64_t **v639;
  unsigned int v640;
  _DWORD *v641;
  uint64_t v642;
  uint64_t *v643;
  uint64_t v644;
  int32x4_t v645;
  unsigned int *v646;
  unsigned int *v647;
  uint64_t v648;
  unint64_t v649;
  uint64_t v650;
  unint64_t v651;
  uint64_t v652;
  uint64_t *v653;
  uint64_t **v654;
  uint64_t **v655;
  unsigned int v656;
  _DWORD *v657;
  uint64_t v658;
  uint64_t *v659;
  uint64_t v660;
  int32x4_t v661;
  unsigned int *v662;
  unsigned int *v663;
  uint64_t v664;
  unint64_t v665;
  uint64_t v666;
  unint64_t v667;
  uint64_t v668;
  uint64_t *v669;
  uint64_t **v670;
  uint64_t **v671;
  unsigned int v672;
  _DWORD *v673;
  uint64_t v674;
  uint64_t *v675;
  uint64_t v676;
  int32x4_t v677;
  unsigned int *v678;
  unsigned int *v679;
  uint64_t v680;
  unint64_t v681;
  uint64_t v682;
  unint64_t v683;
  uint64_t v684;
  uint64_t *v685;
  uint64_t **v686;
  uint64_t **v687;
  unsigned int v688;
  _DWORD *v689;
  uint64_t v690;
  uint64_t *v691;
  uint64_t v692;
  int32x4_t v693;
  unsigned int *v694;
  unsigned int *v695;
  uint64_t v696;
  unint64_t v697;
  uint64_t v698;
  unint64_t v699;
  uint64_t v700;
  uint64_t *v701;
  uint64_t **v702;
  uint64_t **v703;
  unsigned int v704;
  _DWORD *v705;
  uint64_t v706;
  uint64_t *v707;
  uint64_t v708;
  int32x4_t v709;
  unsigned int *v710;
  unsigned int *v711;
  uint64_t v712;
  unint64_t v713;
  uint64_t v714;
  unint64_t v715;
  uint64_t v716;
  uint64_t *v717;
  uint64_t **v718;
  uint64_t **v719;
  unsigned int v720;
  _DWORD *v721;
  uint64_t v722;
  uint64_t *v723;
  uint64_t v724;
  int32x4_t v725;
  int32x4_t v726;
  unsigned int *v727;
  uint64_t v728;
  unint64_t v729;
  uint64_t v730;
  unint64_t v731;
  uint64_t v732;
  uint64_t *v733;
  uint64_t **v734;
  uint64_t **v735;
  unsigned int v736;
  _DWORD *v737;
  uint64_t v738;
  uint64_t *v739;
  uint64_t v740;
  int32x4_t v741;
  int32x4_t v742;
  unsigned int *v743;
  uint64_t v744;
  unint64_t v745;
  uint64_t v746;
  unint64_t v747;
  uint64_t v748;
  uint64_t *v749;
  uint64_t **v750;
  uint64_t **v751;
  unsigned int v752;
  _DWORD *v753;
  uint64_t v754;
  uint64_t *v755;
  uint64_t v756;
  int32x4_t v757;
  int32x4_t v758;
  unsigned int *v759;
  uint64_t v760;
  unint64_t v761;
  uint64_t v762;
  unint64_t v763;
  uint64_t v764;
  uint64_t *v765;
  uint64_t **v766;
  uint64_t **v767;
  unsigned int v768;
  _DWORD *v769;
  uint64_t v770;
  uint64_t *v771;
  uint64_t v772;
  int32x4_t v773;
  int32x4_t v774;
  uint64_t v775;
  unint64_t v776;
  uint64_t v777;
  uint64_t *v778;
  uint64_t **v779;
  uint64_t **v780;
  unsigned int v781;
  _DWORD *v782;
  uint64_t v783;
  uint64_t *v784;
  int32x4_t v785;
  unsigned int *v786;
  unsigned int *v787;
  uint64_t v788;
  uint64_t v789;
  unint64_t v790;
  uint64_t v791;
  unint64_t v792;
  uint64_t v793;
  uint64_t *v794;
  uint64_t **v795;
  uint64_t **v796;
  unsigned int v797;
  _DWORD *v798;
  uint64_t v799;
  uint64_t *v800;
  int32x4_t v801;
  unsigned int *v802;
  unsigned int *v803;
  uint64_t v804;
  unint64_t v805;
  uint64_t v806;
  unint64_t v807;
  uint64_t v808;
  uint64_t *v809;
  uint64_t **v810;
  uint64_t **v811;
  unsigned int v812;
  _DWORD *v813;
  uint64_t v814;
  uint64_t *v815;
  int32x4_t v816;
  unsigned int *v817;
  unsigned int *v818;
  uint64_t v819;
  unint64_t v820;
  uint64_t v821;
  unint64_t v822;
  uint64_t v823;
  uint64_t *v824;
  uint64_t **v825;
  uint64_t **v826;
  unsigned int v827;
  _DWORD *v828;
  uint64_t v829;
  uint64_t *v830;
  int32x4_t v831;
  unsigned int *v832;
  unsigned int *v833;
  uint64_t v834;
  unint64_t v835;
  uint64_t v836;
  unint64_t v837;
  uint64_t v838;
  uint64_t *v839;
  uint64_t **v840;
  uint64_t **v841;
  unsigned int v842;
  _DWORD *v843;
  uint64_t v844;
  uint64_t *v845;
  int32x4_t v846;
  unsigned int *v847;
  unsigned int *v848;
  uint64_t v849;
  unint64_t v850;
  uint64_t v851;
  unint64_t v852;
  uint64_t v853;
  uint64_t *v854;
  uint64_t **v855;
  uint64_t **v856;
  unsigned int v857;
  _DWORD *v858;
  uint64_t v859;
  uint64_t *v860;
  int32x4_t v861;
  unsigned int *v862;
  unsigned int *v863;
  uint64_t v864;
  unint64_t v865;
  uint64_t v866;
  unint64_t v867;
  uint64_t v868;
  uint64_t *v869;
  uint64_t **v870;
  uint64_t **v871;
  unsigned int v872;
  _DWORD *v873;
  uint64_t v874;
  uint64_t *v875;
  int32x4_t v876;
  unsigned int *v877;
  unsigned int *v878;
  uint64_t v879;
  unint64_t v880;
  uint64_t v881;
  unint64_t v882;
  uint64_t v883;
  uint64_t *v884;
  uint64_t **v885;
  uint64_t **v886;
  unsigned int v887;
  _DWORD *v888;
  uint64_t v889;
  uint64_t *v890;
  uint64_t v891;
  int32x4_t v892;
  int32x4_t v893;
  unsigned int *v894;
  uint64_t v895;
  unint64_t v896;
  uint64_t v897;
  unint64_t v898;
  uint64_t v899;
  uint64_t *v900;
  uint64_t **v901;
  uint64_t **v902;
  unsigned int v903;
  _DWORD *v904;
  uint64_t v905;
  uint64_t *v906;
  uint64_t v907;
  int32x4_t v908;
  int32x4_t v909;
  unsigned int *v910;
  uint64_t v911;
  unint64_t v912;
  uint64_t v913;
  unint64_t v914;
  uint64_t v915;
  uint64_t *v916;
  uint64_t **v917;
  uint64_t **v918;
  unsigned int v919;
  _DWORD *v920;
  uint64_t v921;
  uint64_t *v922;
  uint64_t v923;
  int32x4_t v924;
  int32x4_t v925;
  unsigned int *v926;
  uint64_t v927;
  unint64_t v928;
  uint64_t v929;
  unint64_t v930;
  uint64_t v931;
  uint64_t *v932;
  uint64_t **v933;
  uint64_t **v934;
  unsigned int v935;
  _DWORD *v936;
  uint64_t v937;
  uint64_t *v938;
  uint64_t v939;
  int32x4_t v940;
  int32x4_t v941;
  unsigned int *v942;
  uint64_t v943;
  uint64_t v944;
  unint64_t v945;
  uint64_t v946;
  unint64_t v947;
  uint64_t v948;
  uint64_t *v949;
  uint64_t **v950;
  uint64_t **v951;
  unsigned int v952;
  _DWORD *v953;
  uint64_t v954;
  uint64_t *v955;
  uint64_t v956;
  int32x4_t v957;
  int32x4_t v958;
  uint64_t v959;
  unint64_t v960;
  uint64_t v961;
  uint64_t *v962;
  uint64_t **v963;
  uint64_t **v964;
  unsigned int v965;
  _DWORD *v966;
  uint64_t v967;
  uint64_t *v968;
  int32x4_t v969;
  unsigned int *v970;
  unsigned int *v971;
  uint64_t v972;
  unint64_t v973;
  uint64_t v974;
  unint64_t v975;
  uint64_t v976;
  uint64_t *v977;
  uint64_t **v978;
  uint64_t **v979;
  unsigned int v980;
  _DWORD *v981;
  uint64_t v982;
  uint64_t *v983;
  int32x4_t v984;
  unsigned int *v985;
  unsigned int *v986;
  uint64_t v987;
  unint64_t v988;
  uint64_t v989;
  unint64_t v990;
  uint64_t v991;
  uint64_t *v992;
  uint64_t **v993;
  uint64_t **v994;
  unsigned int v995;
  _DWORD *v996;
  uint64_t v997;
  uint64_t *v998;
  int32x4_t v999;
  unsigned int *v1000;
  unsigned int *v1001;
  uint64_t v1002;
  unint64_t v1003;
  uint64_t v1004;
  unint64_t v1005;
  uint64_t v1006;
  uint64_t *v1007;
  uint64_t **v1008;
  uint64_t **v1009;
  unsigned int v1010;
  _DWORD *v1011;
  uint64_t v1012;
  uint64_t *v1013;
  int32x4_t v1014;
  unsigned int *v1015;
  unsigned int *v1016;
  uint64_t v1017;
  unint64_t v1018;
  uint64_t v1019;
  unint64_t v1020;
  uint64_t v1021;
  uint64_t *v1022;
  uint64_t **v1023;
  uint64_t **v1024;
  unsigned int v1025;
  _DWORD *v1026;
  uint64_t v1027;
  uint64_t *v1028;
  int32x4_t v1029;
  unsigned int *v1030;
  unsigned int *v1031;
  uint64_t v1032;
  unint64_t v1033;
  uint64_t v1034;
  unint64_t v1035;
  uint64_t v1036;
  uint64_t *v1037;
  uint64_t **v1038;
  uint64_t **v1039;
  unsigned int v1040;
  _DWORD *v1041;
  uint64_t v1042;
  uint64_t *v1043;
  int32x4_t v1044;
  unsigned int *v1045;
  unsigned int *v1046;
  uint64_t v1047;
  unint64_t v1048;
  uint64_t v1049;
  unint64_t v1050;
  uint64_t v1051;
  uint64_t *v1052;
  uint64_t **v1053;
  uint64_t **v1054;
  unsigned int v1055;
  _DWORD *v1056;
  uint64_t v1057;
  uint64_t *v1058;
  uint64_t v1059;
  int32x4_t v1060;
  int32x4_t v1061;
  unsigned int *v1062;
  uint64_t v1063;
  unint64_t v1064;
  uint64_t v1065;
  unint64_t v1066;
  uint64_t v1067;
  uint64_t *v1068;
  uint64_t **v1069;
  uint64_t **v1070;
  unsigned int v1071;
  _DWORD *v1072;
  uint64_t v1073;
  uint64_t *v1074;
  uint64_t v1075;
  int32x4_t v1076;
  int32x4_t v1077;
  unsigned int *v1078;
  uint64_t v1079;
  unint64_t v1080;
  uint64_t v1081;
  unint64_t v1082;
  uint64_t v1083;
  uint64_t *v1084;
  uint64_t **v1085;
  uint64_t **v1086;
  unsigned int v1087;
  _DWORD *v1088;
  uint64_t v1089;
  uint64_t *v1090;
  uint64_t v1091;
  int32x4_t v1092;
  int32x4_t v1093;
  unsigned int *v1094;
  uint64_t v1095;
  unint64_t v1096;
  uint64_t v1097;
  unint64_t v1098;
  uint64_t v1099;
  uint64_t *v1100;
  uint64_t **v1101;
  uint64_t **v1102;
  unsigned int v1103;
  _DWORD *v1104;
  uint64_t v1105;
  uint64_t *v1106;
  uint64_t v1107;
  int32x4_t v1108;
  int32x4_t v1109;
  unsigned int *v1110;
  uint64_t v1111;
  unint64_t v1112;
  uint64_t v1113;
  unint64_t v1114;
  uint64_t v1115;
  uint64_t *v1116;
  uint64_t **v1117;
  uint64_t **v1118;
  unsigned int v1119;
  _DWORD *v1120;
  uint64_t v1121;
  uint64_t *v1122;
  uint64_t v1123;
  int32x4_t v1124;
  int32x4_t v1125;
  unsigned int *v1126;
  uint64_t v1127;
  unint64_t v1128;
  uint64_t v1129;
  unint64_t v1130;
  uint64_t v1131;
  uint64_t *v1132;
  uint64_t **v1133;
  uint64_t **v1134;
  unsigned int v1135;
  _DWORD *v1136;
  uint64_t v1137;
  uint64_t *v1138;
  uint64_t v1139;
  int32x4_t v1140;
  int32x4_t v1141;
  uint64_t v1142;
  unint64_t v1143;
  uint64_t v1144;
  uint64_t *v1145;
  uint64_t **v1146;
  uint64_t **v1147;
  unsigned int v1148;
  _DWORD *v1149;
  uint64_t v1150;
  uint64_t *v1151;
  int32x4_t v1152;
  unsigned int *v1153;
  unsigned int *v1154;
  uint64_t v1155;
  uint64_t v1156;
  unint64_t v1157;
  uint64_t v1158;
  unint64_t v1159;
  uint64_t v1160;
  uint64_t *v1161;
  uint64_t **v1162;
  uint64_t **v1163;
  unsigned int v1164;
  _DWORD *v1165;
  uint64_t v1166;
  uint64_t *v1167;
  int32x4_t v1168;
  unsigned int *v1169;
  unsigned int *v1170;
  uint64_t v1171;
  unint64_t v1172;
  uint64_t v1173;
  unint64_t v1174;
  uint64_t v1175;
  uint64_t *v1176;
  uint64_t **v1177;
  uint64_t **v1178;
  unsigned int v1179;
  _DWORD *v1180;
  uint64_t v1181;
  uint64_t *v1182;
  int32x4_t v1183;
  unsigned int *v1184;
  unsigned int *v1185;
  uint64_t v1186;
  unint64_t v1187;
  uint64_t v1188;
  unint64_t v1189;
  uint64_t v1190;
  uint64_t *v1191;
  uint64_t **v1192;
  uint64_t **v1193;
  unsigned int v1194;
  _DWORD *v1195;
  uint64_t v1196;
  uint64_t *v1197;
  int32x4_t v1198;
  unsigned int *v1199;
  unsigned int *v1200;
  uint64_t v1201;
  unint64_t v1202;
  uint64_t v1203;
  unint64_t v1204;
  uint64_t v1205;
  uint64_t *v1206;
  uint64_t **v1207;
  uint64_t **v1208;
  unsigned int v1209;
  _DWORD *v1210;
  uint64_t v1211;
  uint64_t *v1212;
  int32x4_t v1213;
  unsigned int *v1214;
  unsigned int *v1215;
  uint64_t v1216;
  unint64_t v1217;
  uint64_t v1218;
  unint64_t v1219;
  uint64_t v1220;
  uint64_t *v1221;
  uint64_t **v1222;
  uint64_t **v1223;
  unsigned int v1224;
  _DWORD *v1225;
  uint64_t v1226;
  uint64_t *v1227;
  uint64_t v1228;
  int32x4_t v1229;
  int32x4_t v1230;
  unsigned int *v1231;
  uint64_t v1232;
  unint64_t v1233;
  uint64_t v1234;
  unint64_t v1235;
  uint64_t v1236;
  uint64_t *v1237;
  uint64_t **v1238;
  uint64_t **v1239;
  unsigned int v1240;
  _DWORD *v1241;
  uint64_t v1242;
  uint64_t *v1243;
  uint64_t v1244;
  int32x4_t v1245;
  int32x4_t v1246;
  unsigned int *v1247;
  uint64_t v1248;
  unint64_t v1249;
  uint64_t v1250;
  unint64_t v1251;
  uint64_t v1252;
  uint64_t *v1253;
  uint64_t **v1254;
  uint64_t **v1255;
  unsigned int v1256;
  _DWORD *v1257;
  uint64_t v1258;
  uint64_t *v1259;
  uint64_t v1260;
  int32x4_t v1261;
  int32x4_t v1262;
  unsigned int *v1263;
  uint64_t v1264;
  unint64_t v1265;
  uint64_t v1266;
  unint64_t v1267;
  uint64_t v1268;
  uint64_t *v1269;
  uint64_t **v1270;
  uint64_t **v1271;
  unsigned int v1272;
  _DWORD *v1273;
  uint64_t v1274;
  uint64_t *v1275;
  uint64_t v1276;
  int32x4_t v1277;
  int32x4_t v1278;
  unsigned int *v1279;
  uint64_t v1280;
  unint64_t v1281;
  uint64_t v1282;
  unint64_t v1283;
  uint64_t v1284;
  uint64_t *v1285;
  uint64_t **v1286;
  uint64_t **v1287;
  unsigned int v1288;
  _DWORD *v1289;
  uint64_t v1290;
  uint64_t *v1291;
  uint64_t v1292;
  int32x4_t v1293;
  int32x4_t v1294;
  unsigned int *v1295;
  uint64_t v1296;
  unint64_t v1297;
  uint64_t v1298;
  unint64_t v1299;
  uint64_t v1300;
  uint64_t *v1301;
  uint64_t **v1302;
  uint64_t **v1303;
  unsigned int v1304;
  _DWORD *v1305;
  uint64_t v1306;
  uint64_t *v1307;
  uint64_t v1308;
  int32x4_t v1309;
  int32x4_t v1310;
  unsigned int *v1311;
  uint64_t v1312;
  uint64_t v1313;
  unint64_t v1314;
  uint64_t v1315;
  unint64_t v1316;
  uint64_t v1317;
  uint64_t *v1318;
  uint64_t **v1319;
  uint64_t **v1320;
  unsigned int v1321;
  _DWORD *v1322;
  uint64_t v1323;
  uint64_t *v1324;
  uint64_t v1325;
  int32x4_t v1326;
  int32x4_t v1327;
  uint64_t v1328;
  unint64_t v1329;
  uint64_t v1330;
  uint64_t *v1331;
  uint64_t **v1332;
  uint64_t **v1333;
  unsigned int v1334;
  _DWORD *v1335;
  uint64_t v1336;
  uint64_t *v1337;
  int32x4_t v1338;
  unsigned int *v1339;
  unsigned int *v1340;
  uint64_t v1341;
  unint64_t v1342;
  uint64_t v1343;
  unint64_t v1344;
  uint64_t v1345;
  uint64_t *v1346;
  uint64_t **v1347;
  uint64_t **v1348;
  unsigned int v1349;
  _DWORD *v1350;
  uint64_t v1351;
  uint64_t *v1352;
  int32x4_t v1353;
  unsigned int *v1354;
  unsigned int *v1355;
  uint64_t v1356;
  unint64_t v1357;
  uint64_t v1358;
  unint64_t v1359;
  uint64_t v1360;
  uint64_t *v1361;
  uint64_t **v1362;
  uint64_t **v1363;
  unsigned int v1364;
  _DWORD *v1365;
  uint64_t v1366;
  uint64_t *v1367;
  int32x4_t v1368;
  unsigned int *v1369;
  unsigned int *v1370;
  uint64_t v1371;
  unint64_t v1372;
  uint64_t v1373;
  unint64_t v1374;
  uint64_t v1375;
  uint64_t *v1376;
  uint64_t **v1377;
  uint64_t **v1378;
  unsigned int v1379;
  _DWORD *v1380;
  uint64_t v1381;
  uint64_t *v1382;
  int32x4_t v1383;
  unsigned int *v1384;
  unsigned int *v1385;
  uint64_t v1386;
  unint64_t v1387;
  uint64_t v1388;
  unint64_t v1389;
  uint64_t v1390;
  uint64_t *v1391;
  uint64_t **v1392;
  uint64_t **v1393;
  unsigned int v1394;
  _DWORD *v1395;
  uint64_t v1396;
  uint64_t *v1397;
  int32x2_t *v1398;
  unsigned int *v1399;
  uint64_t v1400;
  unint64_t v1401;
  uint64_t v1402;
  unint64_t v1403;
  uint64_t v1404;
  uint64_t *v1405;
  uint64_t **v1406;
  uint64_t **v1407;
  unsigned int v1408;
  _DWORD *v1409;
  uint64_t v1410;
  uint64_t *v1411;
  int32x2_t *v1412;
  unsigned int *v1413;
  uint64_t v1414;
  unint64_t v1415;
  uint64_t v1416;
  unint64_t v1417;
  uint64_t v1418;
  uint64_t *v1419;
  uint64_t **v1420;
  uint64_t **v1421;
  unsigned int v1422;
  _DWORD *v1423;
  uint64_t v1424;
  uint64_t *v1425;
  int32x2_t *v1426;
  unsigned int *v1427;
  uint64_t v1428;
  unint64_t v1429;
  uint64_t v1430;
  unint64_t v1431;
  uint64_t v1432;
  uint64_t *v1433;
  uint64_t **v1434;
  uint64_t **v1435;
  unsigned int v1436;
  _DWORD *v1437;
  uint64_t v1438;
  uint64_t *v1439;
  int32x2_t *v1440;
  unsigned int *v1441;
  uint64_t v1442;
  unint64_t v1443;
  uint64_t v1444;
  unint64_t v1445;
  uint64_t v1446;
  uint64_t *v1447;
  uint64_t **v1448;
  uint64_t **v1449;
  unsigned int v1450;
  _DWORD *v1451;
  uint64_t v1452;
  uint64_t *v1453;
  int32x2_t *v1454;
  unsigned int *v1455;
  uint64_t v1456;
  unint64_t v1457;
  uint64_t v1458;
  unint64_t v1459;
  uint64_t v1460;
  uint64_t *v1461;
  uint64_t **v1462;
  uint64_t **v1463;
  unsigned int v1464;
  _DWORD *v1465;
  uint64_t v1466;
  uint64_t *v1467;
  int32x2_t *v1468;
  unsigned int *v1469;
  uint64_t v1470;
  unint64_t v1471;
  uint64_t v1472;
  unint64_t v1473;
  uint64_t v1474;
  uint64_t *v1475;
  uint64_t **v1476;
  uint64_t **v1477;
  unsigned int v1478;
  _DWORD *v1479;
  uint64_t v1480;
  uint64_t *v1481;
  int32x2_t *v1482;
  unsigned int *v1483;
  uint64_t v1484;
  unint64_t v1485;
  uint64_t v1486;
  unint64_t v1487;
  uint64_t v1488;
  uint64_t *v1489;
  uint64_t **v1490;
  uint64_t **v1491;
  unsigned int v1492;
  _DWORD *v1493;
  uint64_t v1494;
  uint64_t *v1495;
  int32x2_t *v1496;
  uint64_t v1497;
  unint64_t v1498;
  uint64_t v1499;
  uint64_t *v1500;
  uint64_t **v1501;
  uint64_t **v1502;
  unsigned int v1503;
  _DWORD *v1504;
  uint64_t v1505;
  uint64_t *v1506;
  int32x2_t *v1507;
  unsigned int *v1508;
  unsigned int *v1509;
  uint64_t v1510;
  uint64_t v1511;
  unint64_t v1512;
  uint64_t v1513;
  unint64_t v1514;
  uint64_t v1515;
  uint64_t *v1516;
  uint64_t **v1517;
  uint64_t **v1518;
  unsigned int v1519;
  _DWORD *v1520;
  uint64_t v1521;
  uint64_t *v1522;
  int32x2_t *v1523;
  unsigned int *v1524;
  unsigned int *v1525;
  uint64_t v1526;
  unint64_t v1527;
  uint64_t v1528;
  unint64_t v1529;
  uint64_t v1530;
  uint64_t *v1531;
  uint64_t **v1532;
  uint64_t **v1533;
  unsigned int v1534;
  _DWORD *v1535;
  uint64_t v1536;
  uint64_t *v1537;
  int32x2_t *v1538;
  unsigned int *v1539;
  unsigned int *v1540;
  uint64_t v1541;
  unint64_t v1542;
  uint64_t v1543;
  unint64_t v1544;
  uint64_t v1545;
  uint64_t *v1546;
  uint64_t **v1547;
  uint64_t **v1548;
  unsigned int v1549;
  _DWORD *v1550;
  uint64_t v1551;
  uint64_t *v1552;
  int32x2_t *v1553;
  unsigned int *v1554;
  uint64_t v1555;
  unint64_t v1556;
  uint64_t v1557;
  unint64_t v1558;
  uint64_t v1559;
  uint64_t *v1560;
  uint64_t **v1561;
  uint64_t **v1562;
  unsigned int v1563;
  _DWORD *v1564;
  uint64_t v1565;
  uint64_t *v1566;
  int32x2_t *v1567;
  unsigned int *v1568;
  uint64_t v1569;
  unint64_t v1570;
  uint64_t v1571;
  unint64_t v1572;
  uint64_t v1573;
  uint64_t *v1574;
  uint64_t **v1575;
  uint64_t **v1576;
  unsigned int v1577;
  _DWORD *v1578;
  uint64_t v1579;
  uint64_t *v1580;
  int32x2_t *v1581;
  unsigned int *v1582;
  uint64_t v1583;
  unint64_t v1584;
  uint64_t v1585;
  unint64_t v1586;
  uint64_t v1587;
  uint64_t *v1588;
  uint64_t **v1589;
  uint64_t **v1590;
  unsigned int v1591;
  _DWORD *v1592;
  uint64_t v1593;
  uint64_t *v1594;
  int32x2_t *v1595;
  unsigned int *v1596;
  uint64_t v1597;
  unint64_t v1598;
  uint64_t v1599;
  unint64_t v1600;
  uint64_t v1601;
  uint64_t *v1602;
  uint64_t **v1603;
  uint64_t **v1604;
  unsigned int v1605;
  _DWORD *v1606;
  uint64_t v1607;
  uint64_t *v1608;
  int32x2_t *v1609;
  unsigned int *v1610;
  uint64_t v1611;
  unint64_t v1612;
  uint64_t v1613;
  unint64_t v1614;
  uint64_t v1615;
  uint64_t *v1616;
  uint64_t **v1617;
  uint64_t **v1618;
  unsigned int v1619;
  _DWORD *v1620;
  uint64_t v1621;
  uint64_t *v1622;
  int32x2_t *v1623;
  unsigned int *v1624;
  uint64_t v1625;
  unint64_t v1626;
  uint64_t v1627;
  unint64_t v1628;
  uint64_t v1629;
  uint64_t *v1630;
  uint64_t **v1631;
  uint64_t **v1632;
  unsigned int v1633;
  _DWORD *v1634;
  uint64_t v1635;
  uint64_t *v1636;
  int32x2_t *v1637;
  unsigned int *v1638;
  uint64_t v1639;
  unint64_t v1640;
  uint64_t v1641;
  unint64_t v1642;
  uint64_t v1643;
  uint64_t *v1644;
  uint64_t **v1645;
  uint64_t **v1646;
  unsigned int v1647;
  _DWORD *v1648;
  uint64_t v1649;
  uint64_t *v1650;
  int32x2_t *v1651;
  unsigned int *v1652;
  uint64_t v1653;
  uint64_t v1654;
  unint64_t v1655;
  uint64_t v1656;
  unint64_t v1657;
  uint64_t v1658;
  uint64_t *v1659;
  uint64_t **v1660;
  uint64_t **v1661;
  unsigned int v1662;
  _DWORD *v1663;
  uint64_t v1664;
  uint64_t *v1665;
  int32x2_t *v1666;
  uint64_t v1667;
  unint64_t v1668;
  uint64_t v1669;
  uint64_t *v1670;
  uint64_t **v1671;
  uint64_t **v1672;
  unsigned int v1673;
  _DWORD *v1674;
  uint64_t v1675;
  uint64_t *v1676;
  int32x2_t *v1677;
  unsigned int *v1678;
  unsigned int *v1679;
  uint64_t v1680;
  unint64_t v1681;
  uint64_t v1682;
  unint64_t v1683;
  uint64_t v1684;
  uint64_t *v1685;
  uint64_t **v1686;
  uint64_t **v1687;
  unsigned int v1688;
  _DWORD *v1689;
  uint64_t v1690;
  uint64_t *v1691;
  int32x2_t *v1692;
  uint64_t v1693;
  unint64_t v1694;
  uint64_t v1695;
  unint64_t v1696;
  unsigned int *v1697;
  uint64_t v1698;
  unint64_t v1699;
  uint64_t v1700;
  unint64_t v1701;
  unsigned int *v1702;
  uint64_t v1703;
  unint64_t v1704;
  uint64_t v1705;
  unint64_t v1706;
  unsigned int *v1707;
  uint64_t v1708;
  unint64_t v1709;
  uint64_t v1710;
  unint64_t v1711;
  unsigned int *v1712;
  uint64_t v1713;
  unint64_t v1714;
  uint64_t v1715;
  unint64_t v1716;
  unsigned int *v1717;
  uint64_t v1718;
  unint64_t v1719;
  uint64_t v1720;
  unint64_t v1721;
  unsigned int *v1722;
  uint64_t v1723;
  unint64_t v1724;
  uint64_t v1725;
  unint64_t v1726;
  unsigned int *v1727;
  uint64_t v1728;
  unint64_t v1729;
  uint64_t v1730;
  unint64_t v1731;
  unsigned int *v1732;
  uint64_t v1733;
  unint64_t v1734;
  uint64_t v1735;
  unint64_t v1736;
  unsigned int *v1737;
  uint64_t v1738;
  unint64_t v1739;
  uint64_t v1740;
  unint64_t v1741;
  uint64_t v1742;
  unint64_t v1743;
  uint64_t v1744;
  uint64_t *v1745;
  uint64_t **v1746;
  uint64_t **v1747;
  unsigned int v1748;
  _DWORD *v1749;
  uint64_t v1750;
  uint64_t *v1751;
  uint64_t v1752;
  uint64_t *v1753;
  uint64_t **v1754;
  uint64_t **v1755;
  unsigned int v1756;
  _DWORD *v1757;
  uint64_t v1758;
  uint64_t *v1759;
  uint64_t v1760;
  uint64_t *v1761;
  uint64_t **v1762;
  uint64_t **v1763;
  unsigned int v1764;
  _DWORD *v1765;
  uint64_t v1766;
  uint64_t *v1767;
  uint64_t v1768;
  uint64_t *v1769;
  uint64_t **v1770;
  uint64_t **v1771;
  unsigned int v1772;
  _DWORD *v1773;
  uint64_t v1774;
  uint64_t *v1775;
  uint64_t v1776;
  uint64_t *v1777;
  uint64_t **v1778;
  uint64_t **v1779;
  unsigned int v1780;
  _DWORD *v1781;
  uint64_t v1782;
  uint64_t *v1783;
  uint64_t v1784;
  uint64_t *v1785;
  uint64_t **v1786;
  uint64_t **v1787;
  unsigned int v1788;
  _DWORD *v1789;
  uint64_t v1790;
  uint64_t *v1791;
  uint64_t v1792;
  uint64_t *v1793;
  uint64_t **v1794;
  uint64_t **v1795;
  unsigned int v1796;
  _DWORD *v1797;
  uint64_t v1798;
  uint64_t *v1799;
  uint64_t v1800;
  uint64_t *v1801;
  uint64_t **v1802;
  uint64_t **v1803;
  unsigned int v1804;
  _DWORD *v1805;
  uint64_t v1806;
  uint64_t *v1807;
  uint64_t v1808;
  uint64_t *v1809;
  uint64_t **v1810;
  uint64_t **v1811;
  unsigned int v1812;
  _DWORD *v1813;
  uint64_t v1814;
  uint64_t *v1815;
  uint64_t v1816;
  uint64_t *v1817;
  uint64_t **v1818;
  uint64_t **v1819;
  unsigned int v1820;
  _DWORD *v1821;
  uint64_t v1822;
  uint64_t *v1823;
  uint64_t v1824;
  uint64_t *v1825;
  uint64_t **v1826;
  uint64_t **v1827;
  unsigned int v1828;
  _DWORD *v1829;
  uint64_t v1830;
  uint64_t *v1831;
  unsigned int **v1832;
  _QWORD *v1833;
  _QWORD *v1834;
  unint64_t *v1835;

  v3 = (unsigned int *)a2[7];
  v4 = (unsigned int *)a2[8];
  v2 = (unsigned int **)(a2 + 7);
  if (((*(unsigned __int8 *)(a2[14] + 4) >> 2) & 1)
     + ((*(unsigned __int8 *)(a2[15] + 4) >> 2) & 1)
     + ((*(unsigned __int8 *)(a2[16] + 4) >> 2) & 1)
     + ((*((unsigned __int8 *)v4 + 4) >> 2) & 1)
     + ((*((unsigned __int8 *)v3 + 4) >> 2) & 1)
     + ((*(unsigned __int8 *)(a2[9] + 4) >> 2) & 1)
     + ((*(unsigned __int8 *)(a2[10] + 4) >> 2) & 1)
     + ((*(unsigned __int8 *)(a2[11] + 4) >> 2) & 1)
     + ((*(unsigned __int8 *)(a2[12] + 4) >> 2) & 1)
     + ((*(unsigned __int8 *)(a2[13] + 4) >> 2) & 1)
     + ((*(unsigned __int8 *)(a2[17] + 4) >> 2) & 1))
  {
    return result;
  }
  v6 = result;
  v7 = (_QWORD *)result[1];
  result = (uint64_t *)sub_20F556208(a2 + 7);
  if (!(_DWORD)result)
    return result;
  v1832 = v2;
  v9 = (_QWORD *)v6[2];
  v8 = (unint64_t *)v6[3];
  v10 = (_QWORD *)v6[4];
  v11 = (uint64_t *)v6[5];
  v1833 = v9;
  v1834 = v10;
  v1835 = v8;
  if (!*((_BYTE *)v3 + 20))
  {
LABEL_18:
    if (!*((_BYTE *)v4 + 20))
      goto LABEL_23;
    goto LABEL_19;
  }
  v12 = v7[2236] + *v3;
  v13 = *(_QWORD *)(*v9 + 8 * v12);
  if (v13 <= *v8)
  {
    v14 = (uint64_t *)v6[5];
    v15 = *(_QWORD *)v6[4] + 24 * v12;
    v17 = (uint64_t **)(v15 + 8);
    v16 = *(uint64_t **)(v15 + 8);
    if (v16)
    {
      while (1)
      {
        while (1)
        {
          v18 = (uint64_t **)v16;
          v19 = *((_DWORD *)v16 + 7);
          if (v19 <= v12)
            break;
          v16 = *v18;
          v17 = v18;
          if (!*v18)
            goto LABEL_14;
        }
        if (v19 >= v12)
          break;
        v16 = v18[1];
        if (!v16)
        {
          v17 = v18 + 1;
          goto LABEL_14;
        }
      }
      v11 = v14;
      v9 = v1833;
      v10 = v1834;
      if (!*((_BYTE *)v4 + 20))
        goto LABEL_23;
      goto LABEL_19;
    }
    v18 = (uint64_t **)(v15 + 8);
LABEL_14:
    v20 = operator new(0x20uLL);
    v20[7] = v12;
    *(_QWORD *)v20 = 0;
    *((_QWORD *)v20 + 1) = 0;
    *((_QWORD *)v20 + 2) = v18;
    *v17 = (uint64_t *)v20;
    v21 = **(_QWORD **)v15;
    if (v21)
    {
      *(_QWORD *)v15 = v21;
      v22 = *v17;
    }
    else
    {
      v22 = (uint64_t *)v20;
    }
    v11 = v14;
    v10 = v1834;
    result = sub_20E868578(*(uint64_t **)(v15 + 8), v22);
    ++*(_QWORD *)(v15 + 16);
    v23 = *v11 + 4 * v13;
    v24.i64[0] = 0x600000006;
    v24.i64[1] = 0x600000006;
    *(int32x4_t *)v23 = vaddq_s32(*(int32x4_t *)v23, v24);
    *(int32x2_t *)(v23 + 16) = vadd_s32(*(int32x2_t *)(v23 + 16), (int32x2_t)0x600000006);
    v3 = (unsigned int *)a2[7];
    v4 = (unsigned int *)a2[8];
    v9 = v1833;
    v8 = v1835;
    goto LABEL_18;
  }
  v9 = (_QWORD *)v6[2];
  if (!*((_BYTE *)v4 + 20))
    goto LABEL_23;
LABEL_19:
  if (*((_BYTE *)v3 + 20))
  {
    v25 = v7[2236];
    v26 = v9;
    v27 = v25 + *v4;
    v28 = *v26;
    v29 = *(_QWORD *)(*v26 + 8 * v27);
    v30 = v25 + *v3;
    v31 = *(_QWORD *)(v28 + 8 * v30);
    if (v29 > v31 || v29 > *v8)
    {
LABEL_22:
      v9 = v1833;
      goto LABEL_23;
    }
    v109 = *v10 + 24 * v30;
    v111 = (uint64_t **)(v109 + 8);
    v110 = *(uint64_t **)(v109 + 8);
    if (v110)
    {
      while (1)
      {
        while (1)
        {
          v112 = (uint64_t **)v110;
          v113 = *((_DWORD *)v110 + 7);
          if (v113 <= v27)
            break;
          v110 = *v112;
          v111 = v112;
          if (!*v112)
            goto LABEL_88;
        }
        if (v113 >= v27)
          goto LABEL_22;
        v110 = v112[1];
        if (!v110)
        {
          v111 = v112 + 1;
          goto LABEL_88;
        }
      }
    }
    v112 = (uint64_t **)(v109 + 8);
LABEL_88:
    v114 = operator new(0x20uLL);
    v114[7] = v27;
    *(_QWORD *)v114 = 0;
    *((_QWORD *)v114 + 1) = 0;
    *((_QWORD *)v114 + 2) = v112;
    *v111 = (uint64_t *)v114;
    v115 = **(_QWORD **)v109;
    if (v115)
    {
      *(_QWORD *)v109 = v115;
      v116 = *v111;
    }
    else
    {
      v116 = (uint64_t *)v114;
    }
    v9 = v1833;
    result = sub_20E868578(*(uint64_t **)(v109 + 8), v116);
    ++*(_QWORD *)(v109 + 16);
    v191 = *v11 + 4 * v31;
    v192.i64[0] = 0x600000006;
    v192.i64[1] = 0x600000006;
    *(int32x4_t *)v191 = vaddq_s32(*(int32x4_t *)v191, v192);
    *(int32x2_t *)(v191 + 16) = vadd_s32(*(int32x2_t *)(v191 + 16), (int32x2_t)0x600000006);
    v3 = *v1832;
    v8 = v1835;
  }
LABEL_23:
  v32 = (unsigned int *)a2[9];
  if (*((_BYTE *)v32 + 20) && *((_BYTE *)v3 + 20))
  {
    v33 = v9;
    v34 = v7[2233] + *v32;
    v35 = *v33;
    v36 = *(_QWORD *)(v35 + 8 * v34);
    v37 = v7[2236] + *v3;
    v38 = *(_QWORD *)(v35 + 8 * v37);
    if (v36 <= v38 && v36 <= *v8)
    {
      v117 = *v10 + 24 * v37;
      v119 = (uint64_t **)(v117 + 8);
      v118 = *(uint64_t **)(v117 + 8);
      if (!v118)
      {
        v120 = (uint64_t **)(v117 + 8);
LABEL_97:
        v122 = operator new(0x20uLL);
        v122[7] = v34;
        *(_QWORD *)v122 = 0;
        *((_QWORD *)v122 + 1) = 0;
        *((_QWORD *)v122 + 2) = v120;
        *v119 = (uint64_t *)v122;
        v123 = **(_QWORD **)v117;
        if (v123)
        {
          *(_QWORD *)v117 = v123;
          v124 = *v119;
        }
        else
        {
          v124 = (uint64_t *)v122;
        }
        v9 = v1833;
        result = sub_20E868578(*(uint64_t **)(v117 + 8), v124);
        ++*(_QWORD *)(v117 + 16);
        v193 = *v11 + 4 * v38;
        v194.i64[0] = 0x600000006;
        v194.i64[1] = 0x600000006;
        *(int32x4_t *)v193 = vaddq_s32(*(int32x4_t *)v193, v194);
        *(int32x2_t *)(v193 + 16) = vadd_s32(*(int32x2_t *)(v193 + 16), (int32x2_t)0x600000006);
        v3 = *v1832;
        v8 = v1835;
        v39 = (unsigned int *)a2[10];
        if (!*((_BYTE *)v39 + 20))
          goto LABEL_33;
        goto LABEL_29;
      }
      while (1)
      {
        while (1)
        {
          v120 = (uint64_t **)v118;
          v121 = *((_DWORD *)v118 + 7);
          if (v121 <= v34)
            break;
          v118 = *v120;
          v119 = v120;
          if (!*v120)
            goto LABEL_97;
        }
        if (v121 >= v34)
          break;
        v118 = v120[1];
        if (!v118)
        {
          v119 = v120 + 1;
          goto LABEL_97;
        }
      }
    }
    v9 = v1833;
  }
  v39 = (unsigned int *)a2[10];
  if (!*((_BYTE *)v39 + 20))
    goto LABEL_33;
LABEL_29:
  if (*((_BYTE *)v3 + 20))
  {
    v40 = v9;
    v41 = v7[2233] + *v39;
    v42 = *v40;
    v43 = *(_QWORD *)(v42 + 8 * v41);
    v44 = v7[2236] + *v3;
    v45 = *(_QWORD *)(v42 + 8 * v44);
    if (v43 > v45 || v43 > *v8)
    {
LABEL_32:
      v9 = v1833;
      goto LABEL_33;
    }
    v125 = *v10 + 24 * v44;
    v127 = (uint64_t **)(v125 + 8);
    v126 = *(uint64_t **)(v125 + 8);
    if (v126)
    {
      while (1)
      {
        while (1)
        {
          v128 = (uint64_t **)v126;
          v129 = *((_DWORD *)v126 + 7);
          if (v129 <= v41)
            break;
          v126 = *v128;
          v127 = v128;
          if (!*v128)
            goto LABEL_106;
        }
        if (v129 >= v41)
          goto LABEL_32;
        v126 = v128[1];
        if (!v126)
        {
          v127 = v128 + 1;
          goto LABEL_106;
        }
      }
    }
    v128 = (uint64_t **)(v125 + 8);
LABEL_106:
    v130 = operator new(0x20uLL);
    v130[7] = v41;
    *(_QWORD *)v130 = 0;
    *((_QWORD *)v130 + 1) = 0;
    *((_QWORD *)v130 + 2) = v128;
    *v127 = (uint64_t *)v130;
    v131 = **(_QWORD **)v125;
    if (v131)
    {
      *(_QWORD *)v125 = v131;
      v132 = *v127;
    }
    else
    {
      v132 = (uint64_t *)v130;
    }
    v9 = v1833;
    result = sub_20E868578(*(uint64_t **)(v125 + 8), v132);
    ++*(_QWORD *)(v125 + 16);
    v195 = *v11 + 4 * v45;
    v196.i64[0] = 0x600000006;
    v196.i64[1] = 0x600000006;
    *(int32x4_t *)v195 = vaddq_s32(*(int32x4_t *)v195, v196);
    *(int32x2_t *)(v195 + 16) = vadd_s32(*(int32x2_t *)(v195 + 16), (int32x2_t)0x600000006);
    v3 = *v1832;
    v8 = v1835;
  }
LABEL_33:
  v46 = (unsigned int *)a2[11];
  if (*((_BYTE *)v46 + 20) && *((_BYTE *)v3 + 20))
  {
    v47 = v9;
    v48 = v7[2237] + *v46;
    v49 = *v47;
    v50 = *(_QWORD *)(v49 + 8 * v48);
    v51 = v7[2236] + *v3;
    v52 = *(_QWORD *)(v49 + 8 * v51);
    if (v50 <= v52 && v50 <= *v8)
    {
      v133 = *v10 + 24 * v51;
      v135 = (uint64_t **)(v133 + 8);
      v134 = *(uint64_t **)(v133 + 8);
      if (!v134)
      {
        v136 = (uint64_t **)(v133 + 8);
LABEL_115:
        v138 = operator new(0x20uLL);
        v138[7] = v48;
        *(_QWORD *)v138 = 0;
        *((_QWORD *)v138 + 1) = 0;
        *((_QWORD *)v138 + 2) = v136;
        *v135 = (uint64_t *)v138;
        v139 = **(_QWORD **)v133;
        if (v139)
        {
          *(_QWORD *)v133 = v139;
          v140 = *v135;
        }
        else
        {
          v140 = (uint64_t *)v138;
        }
        v9 = v1833;
        result = sub_20E868578(*(uint64_t **)(v133 + 8), v140);
        ++*(_QWORD *)(v133 + 16);
        v197 = *v11 + 4 * v52;
        v198.i64[0] = 0x400000004;
        v198.i64[1] = 0x400000004;
        *(int32x4_t *)v197 = vaddq_s32(*(int32x4_t *)v197, v198);
        *(int32x2_t *)(v197 + 16) = vadd_s32(*(int32x2_t *)(v197 + 16), (int32x2_t)0x400000004);
        v3 = *v1832;
        v8 = v1835;
        v53 = (unsigned int *)a2[12];
        if (!*((_BYTE *)v53 + 20))
          goto LABEL_43;
        goto LABEL_39;
      }
      while (1)
      {
        while (1)
        {
          v136 = (uint64_t **)v134;
          v137 = *((_DWORD *)v134 + 7);
          if (v137 <= v48)
            break;
          v134 = *v136;
          v135 = v136;
          if (!*v136)
            goto LABEL_115;
        }
        if (v137 >= v48)
          break;
        v134 = v136[1];
        if (!v134)
        {
          v135 = v136 + 1;
          goto LABEL_115;
        }
      }
    }
    v9 = v1833;
  }
  v53 = (unsigned int *)a2[12];
  if (!*((_BYTE *)v53 + 20))
    goto LABEL_43;
LABEL_39:
  if (*((_BYTE *)v3 + 20))
  {
    v54 = v9;
    v55 = v7[2237] + *v53;
    v56 = *v54;
    v57 = *(_QWORD *)(v56 + 8 * v55);
    v58 = v7[2236] + *v3;
    v59 = *(_QWORD *)(v56 + 8 * v58);
    if (v57 > v59 || v57 > *v8)
    {
LABEL_42:
      v9 = v1833;
      goto LABEL_43;
    }
    v141 = *v10 + 24 * v58;
    v143 = (uint64_t **)(v141 + 8);
    v142 = *(uint64_t **)(v141 + 8);
    if (v142)
    {
      while (1)
      {
        while (1)
        {
          v144 = (uint64_t **)v142;
          v145 = *((_DWORD *)v142 + 7);
          if (v145 <= v55)
            break;
          v142 = *v144;
          v143 = v144;
          if (!*v144)
            goto LABEL_124;
        }
        if (v145 >= v55)
          goto LABEL_42;
        v142 = v144[1];
        if (!v142)
        {
          v143 = v144 + 1;
          goto LABEL_124;
        }
      }
    }
    v144 = (uint64_t **)(v141 + 8);
LABEL_124:
    v146 = operator new(0x20uLL);
    v146[7] = v55;
    *(_QWORD *)v146 = 0;
    *((_QWORD *)v146 + 1) = 0;
    *((_QWORD *)v146 + 2) = v144;
    *v143 = (uint64_t *)v146;
    v147 = **(_QWORD **)v141;
    if (v147)
    {
      *(_QWORD *)v141 = v147;
      v148 = *v143;
    }
    else
    {
      v148 = (uint64_t *)v146;
    }
    v9 = v1833;
    result = sub_20E868578(*(uint64_t **)(v141 + 8), v148);
    ++*(_QWORD *)(v141 + 16);
    v199 = *v11 + 4 * v59;
    v200.i64[0] = 0x400000004;
    v200.i64[1] = 0x400000004;
    *(int32x4_t *)v199 = vaddq_s32(*(int32x4_t *)v199, v200);
    *(int32x2_t *)(v199 + 16) = vadd_s32(*(int32x2_t *)(v199 + 16), (int32x2_t)0x400000004);
    v3 = *v1832;
    v8 = v1835;
  }
LABEL_43:
  v60 = (unsigned int *)a2[13];
  if (*((_BYTE *)v60 + 20) && *((_BYTE *)v3 + 20))
  {
    v61 = v9;
    v62 = v7[2238] + *v60;
    v63 = *v61;
    v64 = *(_QWORD *)(v63 + 8 * v62);
    v65 = v7[2236] + *v3;
    v66 = *(_QWORD *)(v63 + 8 * v65);
    if (v64 <= v66 && v64 <= *v8)
    {
      v149 = *v10 + 24 * v65;
      v151 = (uint64_t **)(v149 + 8);
      v150 = *(uint64_t **)(v149 + 8);
      if (!v150)
      {
        v152 = (uint64_t **)(v149 + 8);
LABEL_133:
        v154 = operator new(0x20uLL);
        v154[7] = v62;
        *(_QWORD *)v154 = 0;
        *((_QWORD *)v154 + 1) = 0;
        *((_QWORD *)v154 + 2) = v152;
        *v151 = (uint64_t *)v154;
        v155 = **(_QWORD **)v149;
        if (v155)
        {
          *(_QWORD *)v149 = v155;
          v156 = *v151;
        }
        else
        {
          v156 = (uint64_t *)v154;
        }
        v9 = v1833;
        result = sub_20E868578(*(uint64_t **)(v149 + 8), v156);
        ++*(_QWORD *)(v149 + 16);
        v201 = *v11 + 4 * v66;
        v202.i64[0] = 0x400000004;
        v202.i64[1] = 0x400000004;
        *(int32x4_t *)v201 = vaddq_s32(*(int32x4_t *)v201, v202);
        *(int32x2_t *)(v201 + 16) = vadd_s32(*(int32x2_t *)(v201 + 16), (int32x2_t)0x400000004);
        v3 = *v1832;
        v8 = v1835;
        v67 = (unsigned int *)a2[14];
        if (!*((_BYTE *)v67 + 20))
          goto LABEL_53;
        goto LABEL_49;
      }
      while (1)
      {
        while (1)
        {
          v152 = (uint64_t **)v150;
          v153 = *((_DWORD *)v150 + 7);
          if (v153 <= v62)
            break;
          v150 = *v152;
          v151 = v152;
          if (!*v152)
            goto LABEL_133;
        }
        if (v153 >= v62)
          break;
        v150 = v152[1];
        if (!v150)
        {
          v151 = v152 + 1;
          goto LABEL_133;
        }
      }
    }
    v9 = v1833;
  }
  v67 = (unsigned int *)a2[14];
  if (!*((_BYTE *)v67 + 20))
    goto LABEL_53;
LABEL_49:
  if (*((_BYTE *)v3 + 20))
  {
    v68 = v9;
    v69 = v7[2238] + *v67;
    v70 = *v68;
    v71 = *(_QWORD *)(v70 + 8 * v69);
    v72 = v7[2236] + *v3;
    v73 = *(_QWORD *)(v70 + 8 * v72);
    if (v71 > v73 || v71 > *v8)
    {
LABEL_52:
      v9 = v1833;
      goto LABEL_53;
    }
    v157 = *v10 + 24 * v72;
    v159 = (uint64_t **)(v157 + 8);
    v158 = *(uint64_t **)(v157 + 8);
    if (v158)
    {
      while (1)
      {
        while (1)
        {
          v160 = (uint64_t **)v158;
          v161 = *((_DWORD *)v158 + 7);
          if (v161 <= v69)
            break;
          v158 = *v160;
          v159 = v160;
          if (!*v160)
            goto LABEL_142;
        }
        if (v161 >= v69)
          goto LABEL_52;
        v158 = v160[1];
        if (!v158)
        {
          v159 = v160 + 1;
          goto LABEL_142;
        }
      }
    }
    v160 = (uint64_t **)(v157 + 8);
LABEL_142:
    v162 = operator new(0x20uLL);
    v162[7] = v69;
    *(_QWORD *)v162 = 0;
    *((_QWORD *)v162 + 1) = 0;
    *((_QWORD *)v162 + 2) = v160;
    *v159 = (uint64_t *)v162;
    v163 = **(_QWORD **)v157;
    if (v163)
    {
      *(_QWORD *)v157 = v163;
      v164 = *v159;
    }
    else
    {
      v164 = (uint64_t *)v162;
    }
    v9 = v1833;
    result = sub_20E868578(*(uint64_t **)(v157 + 8), v164);
    ++*(_QWORD *)(v157 + 16);
    v203 = *v11 + 4 * v73;
    v204.i64[0] = 0x400000004;
    v204.i64[1] = 0x400000004;
    *(int32x4_t *)v203 = vaddq_s32(*(int32x4_t *)v203, v204);
    *(int32x2_t *)(v203 + 16) = vadd_s32(*(int32x2_t *)(v203 + 16), (int32x2_t)0x400000004);
    v3 = *v1832;
    v8 = v1835;
  }
LABEL_53:
  v74 = (unsigned int *)a2[15];
  if (*((_BYTE *)v74 + 20) && *((_BYTE *)v3 + 20))
  {
    v75 = v9;
    v76 = v7[2239] + *v74;
    v77 = *v75;
    v78 = *(_QWORD *)(v77 + 8 * v76);
    v79 = v7[2236] + *v3;
    v80 = *(_QWORD *)(v77 + 8 * v79);
    if (v78 <= v80 && v78 <= *v8)
    {
      v165 = *v10 + 24 * v79;
      v167 = (uint64_t **)(v165 + 8);
      v166 = *(uint64_t **)(v165 + 8);
      if (!v166)
      {
        v168 = (uint64_t **)(v165 + 8);
LABEL_151:
        v170 = operator new(0x20uLL);
        v170[7] = v76;
        *(_QWORD *)v170 = 0;
        *((_QWORD *)v170 + 1) = 0;
        *((_QWORD *)v170 + 2) = v168;
        *v167 = (uint64_t *)v170;
        v171 = **(_QWORD **)v165;
        if (v171)
        {
          *(_QWORD *)v165 = v171;
          v172 = *v167;
        }
        else
        {
          v172 = (uint64_t *)v170;
        }
        v9 = v1833;
        result = sub_20E868578(*(uint64_t **)(v165 + 8), v172);
        ++*(_QWORD *)(v165 + 16);
        v205 = *v11 + 4 * v80;
        v206.i64[0] = 0x300000003;
        v206.i64[1] = 0x300000003;
        *(int32x4_t *)v205 = vaddq_s32(*(int32x4_t *)v205, v206);
        *(int32x2_t *)(v205 + 16) = vadd_s32(*(int32x2_t *)(v205 + 16), (int32x2_t)0x300000003);
        v3 = *v1832;
        v8 = v1835;
        v81 = (unsigned int *)a2[16];
        if (!*((_BYTE *)v81 + 20))
          goto LABEL_63;
        goto LABEL_59;
      }
      while (1)
      {
        while (1)
        {
          v168 = (uint64_t **)v166;
          v169 = *((_DWORD *)v166 + 7);
          if (v169 <= v76)
            break;
          v166 = *v168;
          v167 = v168;
          if (!*v168)
            goto LABEL_151;
        }
        if (v169 >= v76)
          break;
        v166 = v168[1];
        if (!v166)
        {
          v167 = v168 + 1;
          goto LABEL_151;
        }
      }
    }
    v9 = v1833;
  }
  v81 = (unsigned int *)a2[16];
  if (!*((_BYTE *)v81 + 20))
    goto LABEL_63;
LABEL_59:
  if (*((_BYTE *)v3 + 20))
  {
    v82 = v9;
    v83 = v7[2239] + *v81;
    v84 = *v82;
    v85 = *(_QWORD *)(v84 + 8 * v83);
    v86 = v7[2236] + *v3;
    v87 = *(_QWORD *)(v84 + 8 * v86);
    if (v85 > v87 || v85 > *v8)
    {
LABEL_62:
      v9 = v1833;
      goto LABEL_63;
    }
    v173 = *v10 + 24 * v86;
    v175 = (uint64_t **)(v173 + 8);
    v174 = *(uint64_t **)(v173 + 8);
    if (v174)
    {
      while (1)
      {
        while (1)
        {
          v176 = (uint64_t **)v174;
          v177 = *((_DWORD *)v174 + 7);
          if (v177 <= v83)
            break;
          v174 = *v176;
          v175 = v176;
          if (!*v176)
            goto LABEL_160;
        }
        if (v177 >= v83)
          goto LABEL_62;
        v174 = v176[1];
        if (!v174)
        {
          v175 = v176 + 1;
          goto LABEL_160;
        }
      }
    }
    v176 = (uint64_t **)(v173 + 8);
LABEL_160:
    v178 = operator new(0x20uLL);
    v178[7] = v83;
    *(_QWORD *)v178 = 0;
    *((_QWORD *)v178 + 1) = 0;
    *((_QWORD *)v178 + 2) = v176;
    *v175 = (uint64_t *)v178;
    v179 = **(_QWORD **)v173;
    if (v179)
    {
      *(_QWORD *)v173 = v179;
      v180 = *v175;
    }
    else
    {
      v180 = (uint64_t *)v178;
    }
    v9 = v1833;
    result = sub_20E868578(*(uint64_t **)(v173 + 8), v180);
    ++*(_QWORD *)(v173 + 16);
    v207 = *v11 + 4 * v87;
    v208.i64[0] = 0x300000003;
    v208.i64[1] = 0x300000003;
    *(int32x4_t *)v207 = vaddq_s32(*(int32x4_t *)v207, v208);
    *(int32x2_t *)(v207 + 16) = vadd_s32(*(int32x2_t *)(v207 + 16), (int32x2_t)0x300000003);
    v3 = *v1832;
    v8 = v1835;
  }
LABEL_63:
  v88 = (unsigned int *)a2[17];
  if (!*((_BYTE *)v88 + 20) || !*((_BYTE *)v3 + 20))
  {
LABEL_68:
    v95 = (unsigned int *)a2[8];
    if (!*((_BYTE *)v3 + 20))
      goto LABEL_199;
    goto LABEL_69;
  }
  v89 = v9;
  v90 = v7[2240] + *v88;
  v91 = *v89;
  v92 = *(_QWORD *)(v91 + 8 * v90);
  v93 = v7[2236] + *v3;
  v94 = *(_QWORD *)(v91 + 8 * v93);
  if (v92 > v94 || v92 > *v8)
  {
LABEL_67:
    v9 = v1833;
    goto LABEL_68;
  }
  v181 = *v10 + 24 * v93;
  v183 = (uint64_t **)(v181 + 8);
  v182 = *(uint64_t **)(v181 + 8);
  if (v182)
  {
    while (1)
    {
      while (1)
      {
        v184 = (uint64_t **)v182;
        v185 = *((_DWORD *)v182 + 7);
        if (v185 <= v90)
          break;
        v182 = *v184;
        v183 = v184;
        if (!*v184)
          goto LABEL_169;
      }
      if (v185 >= v90)
        goto LABEL_67;
      v182 = v184[1];
      if (!v182)
      {
        v183 = v184 + 1;
        goto LABEL_169;
      }
    }
  }
  v184 = (uint64_t **)(v181 + 8);
LABEL_169:
  v186 = operator new(0x20uLL);
  v186[7] = v90;
  *(_QWORD *)v186 = 0;
  *((_QWORD *)v186 + 1) = 0;
  *((_QWORD *)v186 + 2) = v184;
  *v183 = (uint64_t *)v186;
  v187 = **(_QWORD **)v181;
  if (v187)
  {
    *(_QWORD *)v181 = v187;
    v188 = *v183;
  }
  else
  {
    v188 = (uint64_t *)v186;
  }
  v9 = v1833;
  result = sub_20E868578(*(uint64_t **)(v181 + 8), v188);
  ++*(_QWORD *)(v181 + 16);
  v209 = *v11 + 4 * v94;
  v210.i64[0] = 0x100000001;
  v210.i64[1] = 0x100000001;
  *(int32x4_t *)v209 = vaddq_s32(*(int32x4_t *)v209, v210);
  *(int32x2_t *)(v209 + 16) = vadd_s32(*(int32x2_t *)(v209 + 16), (int32x2_t)0x100000001);
  v3 = *v1832;
  v8 = v1835;
  v95 = (unsigned int *)a2[8];
  if (*((_BYTE *)*v1832 + 20))
  {
LABEL_69:
    if (*((_BYTE *)v95 + 20))
    {
      v96 = v7[2236];
      v97 = v96 + *v3;
      v98 = *(_QWORD *)(*v9 + 8 * v97);
      v99 = v96 + *v95;
      v100 = *(_QWORD *)(*v9 + 8 * v99);
      if (v98 <= v100 && v98 <= *v8)
      {
        v101 = *v10 + 24 * v99;
        v103 = (uint64_t **)(v101 + 8);
        v102 = *(uint64_t **)(v101 + 8);
        if (v102)
        {
          while (1)
          {
            while (1)
            {
              v104 = (uint64_t **)v102;
              v105 = *((_DWORD *)v102 + 7);
              if (v105 <= v97)
                break;
              v102 = *v104;
              v103 = v104;
              if (!*v104)
                goto LABEL_79;
            }
            if (v105 >= v97)
              break;
            v102 = v104[1];
            if (!v102)
            {
              v103 = v104 + 1;
              goto LABEL_79;
            }
          }
        }
        else
        {
          v104 = (uint64_t **)(v101 + 8);
LABEL_79:
          v106 = operator new(0x20uLL);
          v106[7] = v97;
          *(_QWORD *)v106 = 0;
          *((_QWORD *)v106 + 1) = 0;
          *((_QWORD *)v106 + 2) = v104;
          *v103 = (uint64_t *)v106;
          v107 = **(_QWORD **)v101;
          if (v107)
          {
            *(_QWORD *)v101 = v107;
            v108 = *v103;
          }
          else
          {
            v108 = (uint64_t *)v106;
          }
          result = sub_20E868578(*(uint64_t **)(v101 + 8), v108);
          ++*(_QWORD *)(v101 + 16);
          v189 = *v11 + 4 * v100;
          v190.i64[0] = 0x600000006;
          v190.i64[1] = 0x600000006;
          *(int32x4_t *)v189 = vaddq_s32(*(int32x4_t *)v189, v190);
          *(int32x2_t *)(v189 + 16) = vadd_s32(*(int32x2_t *)(v189 + 16), (int32x2_t)0x600000006);
          v95 = (unsigned int *)a2[8];
          v8 = v1835;
        }
      }
    }
  }
LABEL_199:
  if (*((_BYTE *)v95 + 20))
  {
    v211 = v7[2236] + *v95;
    v212 = *(_QWORD *)(*v9 + 8 * v211);
    if (v212 <= *v8)
    {
      v213 = *v10 + 24 * v211;
      v215 = (uint64_t **)(v213 + 8);
      v214 = *(uint64_t **)(v213 + 8);
      if (v214)
      {
        while (1)
        {
          while (1)
          {
            v216 = (uint64_t **)v214;
            v217 = *((_DWORD *)v214 + 7);
            if (v217 <= v211)
              break;
            v214 = *v216;
            v215 = v216;
            if (!*v216)
              goto LABEL_208;
          }
          if (v217 >= v211)
            break;
          v214 = v216[1];
          if (!v214)
          {
            v215 = v216 + 1;
            goto LABEL_208;
          }
        }
      }
      else
      {
        v216 = (uint64_t **)(v213 + 8);
LABEL_208:
        v218 = operator new(0x20uLL);
        v218[7] = v211;
        *(_QWORD *)v218 = 0;
        *((_QWORD *)v218 + 1) = 0;
        *((_QWORD *)v218 + 2) = v216;
        *v215 = (uint64_t *)v218;
        v219 = **(_QWORD **)v213;
        if (v219)
        {
          *(_QWORD *)v213 = v219;
          v220 = *v215;
        }
        else
        {
          v220 = (uint64_t *)v218;
        }
        result = sub_20E868578(*(uint64_t **)(v213 + 8), v220);
        ++*(_QWORD *)(v213 + 16);
        v221 = *v11 + 4 * v212;
        v222.i64[0] = 0x600000006;
        v222.i64[1] = 0x600000006;
        *(int32x4_t *)v221 = vaddq_s32(*(int32x4_t *)v221, v222);
        *(int32x2_t *)(v221 + 16) = vadd_s32(*(int32x2_t *)(v221 + 16), (int32x2_t)0x600000006);
        v8 = v1835;
      }
    }
  }
  v223 = (unsigned int *)a2[9];
  if (*((_BYTE *)v223 + 20))
  {
    v224 = (unsigned int *)a2[8];
    if (*((_BYTE *)v224 + 20))
    {
      v225 = v7[2233] + *v223;
      v226 = *(_QWORD *)(*v9 + 8 * v225);
      v227 = v7[2236] + *v224;
      v228 = *(_QWORD *)(*v9 + 8 * v227);
      if (v226 <= v228 && v226 <= *v8)
      {
        v229 = *v10 + 24 * v227;
        v231 = (uint64_t **)(v229 + 8);
        v230 = *(uint64_t **)(v229 + 8);
        if (v230)
        {
          while (1)
          {
            while (1)
            {
              v232 = (uint64_t **)v230;
              v233 = *((_DWORD *)v230 + 7);
              if (v233 <= v225)
                break;
              v230 = *v232;
              v231 = v232;
              if (!*v232)
                goto LABEL_223;
            }
            if (v233 >= v225)
              break;
            v230 = v232[1];
            if (!v230)
            {
              v231 = v232 + 1;
              goto LABEL_223;
            }
          }
        }
        else
        {
          v232 = (uint64_t **)(v229 + 8);
LABEL_223:
          v234 = operator new(0x20uLL);
          v234[7] = v225;
          *(_QWORD *)v234 = 0;
          *((_QWORD *)v234 + 1) = 0;
          *((_QWORD *)v234 + 2) = v232;
          *v231 = (uint64_t *)v234;
          v235 = **(_QWORD **)v229;
          if (v235)
          {
            *(_QWORD *)v229 = v235;
            v236 = *v231;
          }
          else
          {
            v236 = (uint64_t *)v234;
          }
          result = sub_20E868578(*(uint64_t **)(v229 + 8), v236);
          ++*(_QWORD *)(v229 + 16);
          v237 = *v11 + 4 * v228;
          v238.i64[0] = 0x600000006;
          v238.i64[1] = 0x600000006;
          *(int32x4_t *)v237 = vaddq_s32(*(int32x4_t *)v237, v238);
          *(int32x2_t *)(v237 + 16) = vadd_s32(*(int32x2_t *)(v237 + 16), (int32x2_t)0x600000006);
          v8 = v1835;
        }
      }
    }
  }
  v239 = (unsigned int *)a2[10];
  if (*((_BYTE *)v239 + 20))
  {
    v240 = (unsigned int *)a2[8];
    if (*((_BYTE *)v240 + 20))
    {
      v241 = v7[2233] + *v239;
      v242 = *(_QWORD *)(*v9 + 8 * v241);
      v243 = v7[2236] + *v240;
      v244 = *(_QWORD *)(*v9 + 8 * v243);
      if (v242 <= v244 && v242 <= *v8)
      {
        v245 = *v10 + 24 * v243;
        v247 = (uint64_t **)(v245 + 8);
        v246 = *(uint64_t **)(v245 + 8);
        if (v246)
        {
          while (1)
          {
            while (1)
            {
              v248 = (uint64_t **)v246;
              v249 = *((_DWORD *)v246 + 7);
              if (v249 <= v241)
                break;
              v246 = *v248;
              v247 = v248;
              if (!*v248)
                goto LABEL_238;
            }
            if (v249 >= v241)
              break;
            v246 = v248[1];
            if (!v246)
            {
              v247 = v248 + 1;
              goto LABEL_238;
            }
          }
        }
        else
        {
          v248 = (uint64_t **)(v245 + 8);
LABEL_238:
          v250 = operator new(0x20uLL);
          v250[7] = v241;
          *(_QWORD *)v250 = 0;
          *((_QWORD *)v250 + 1) = 0;
          *((_QWORD *)v250 + 2) = v248;
          *v247 = (uint64_t *)v250;
          v251 = **(_QWORD **)v245;
          if (v251)
          {
            *(_QWORD *)v245 = v251;
            v252 = *v247;
          }
          else
          {
            v252 = (uint64_t *)v250;
          }
          result = sub_20E868578(*(uint64_t **)(v245 + 8), v252);
          ++*(_QWORD *)(v245 + 16);
          v253 = *v11 + 4 * v244;
          v254.i64[0] = 0x600000006;
          v254.i64[1] = 0x600000006;
          *(int32x4_t *)v253 = vaddq_s32(*(int32x4_t *)v253, v254);
          *(int32x2_t *)(v253 + 16) = vadd_s32(*(int32x2_t *)(v253 + 16), (int32x2_t)0x600000006);
          v8 = v1835;
        }
      }
    }
  }
  v255 = (unsigned int *)a2[11];
  if (*((_BYTE *)v255 + 20))
  {
    v256 = (unsigned int *)a2[8];
    if (*((_BYTE *)v256 + 20))
    {
      v257 = v7[2237] + *v255;
      v258 = *(_QWORD *)(*v9 + 8 * v257);
      v259 = v7[2236] + *v256;
      v260 = *(_QWORD *)(*v9 + 8 * v259);
      if (v258 <= v260 && v258 <= *v8)
      {
        v261 = *v10 + 24 * v259;
        v263 = (uint64_t **)(v261 + 8);
        v262 = *(uint64_t **)(v261 + 8);
        if (v262)
        {
          while (1)
          {
            while (1)
            {
              v264 = (uint64_t **)v262;
              v265 = *((_DWORD *)v262 + 7);
              if (v265 <= v257)
                break;
              v262 = *v264;
              v263 = v264;
              if (!*v264)
                goto LABEL_253;
            }
            if (v265 >= v257)
              break;
            v262 = v264[1];
            if (!v262)
            {
              v263 = v264 + 1;
              goto LABEL_253;
            }
          }
        }
        else
        {
          v264 = (uint64_t **)(v261 + 8);
LABEL_253:
          v266 = operator new(0x20uLL);
          v266[7] = v257;
          *(_QWORD *)v266 = 0;
          *((_QWORD *)v266 + 1) = 0;
          *((_QWORD *)v266 + 2) = v264;
          *v263 = (uint64_t *)v266;
          v267 = **(_QWORD **)v261;
          if (v267)
          {
            *(_QWORD *)v261 = v267;
            v268 = *v263;
          }
          else
          {
            v268 = (uint64_t *)v266;
          }
          result = sub_20E868578(*(uint64_t **)(v261 + 8), v268);
          ++*(_QWORD *)(v261 + 16);
          v269 = *v11 + 4 * v260;
          v270.i64[0] = 0x400000004;
          v270.i64[1] = 0x400000004;
          *(int32x4_t *)v269 = vaddq_s32(*(int32x4_t *)v269, v270);
          *(int32x2_t *)(v269 + 16) = vadd_s32(*(int32x2_t *)(v269 + 16), (int32x2_t)0x400000004);
          v8 = v1835;
        }
      }
    }
  }
  v271 = (unsigned int *)a2[12];
  if (*((_BYTE *)v271 + 20))
  {
    v272 = (unsigned int *)a2[8];
    if (*((_BYTE *)v272 + 20))
    {
      v273 = v7[2237] + *v271;
      v274 = *(_QWORD *)(*v9 + 8 * v273);
      v275 = v7[2236] + *v272;
      v276 = *(_QWORD *)(*v9 + 8 * v275);
      if (v274 <= v276 && v274 <= *v8)
      {
        v277 = *v10 + 24 * v275;
        v279 = (uint64_t **)(v277 + 8);
        v278 = *(uint64_t **)(v277 + 8);
        if (v278)
        {
          while (1)
          {
            while (1)
            {
              v280 = (uint64_t **)v278;
              v281 = *((_DWORD *)v278 + 7);
              if (v281 <= v273)
                break;
              v278 = *v280;
              v279 = v280;
              if (!*v280)
                goto LABEL_268;
            }
            if (v281 >= v273)
              break;
            v278 = v280[1];
            if (!v278)
            {
              v279 = v280 + 1;
              goto LABEL_268;
            }
          }
        }
        else
        {
          v280 = (uint64_t **)(v277 + 8);
LABEL_268:
          v282 = operator new(0x20uLL);
          v282[7] = v273;
          *(_QWORD *)v282 = 0;
          *((_QWORD *)v282 + 1) = 0;
          *((_QWORD *)v282 + 2) = v280;
          *v279 = (uint64_t *)v282;
          v283 = **(_QWORD **)v277;
          if (v283)
          {
            *(_QWORD *)v277 = v283;
            v284 = *v279;
          }
          else
          {
            v284 = (uint64_t *)v282;
          }
          result = sub_20E868578(*(uint64_t **)(v277 + 8), v284);
          ++*(_QWORD *)(v277 + 16);
          v285 = *v11 + 4 * v276;
          v286.i64[0] = 0x400000004;
          v286.i64[1] = 0x400000004;
          *(int32x4_t *)v285 = vaddq_s32(*(int32x4_t *)v285, v286);
          *(int32x2_t *)(v285 + 16) = vadd_s32(*(int32x2_t *)(v285 + 16), (int32x2_t)0x400000004);
          v8 = v1835;
        }
      }
    }
  }
  v287 = (unsigned int *)a2[13];
  if (*((_BYTE *)v287 + 20))
  {
    v288 = (unsigned int *)a2[8];
    if (*((_BYTE *)v288 + 20))
    {
      v289 = v7[2238] + *v287;
      v290 = *(_QWORD *)(*v9 + 8 * v289);
      v291 = v7[2236] + *v288;
      v292 = *(_QWORD *)(*v9 + 8 * v291);
      if (v290 <= v292 && v290 <= *v8)
      {
        v293 = *v10 + 24 * v291;
        v295 = (uint64_t **)(v293 + 8);
        v294 = *(uint64_t **)(v293 + 8);
        if (v294)
        {
          while (1)
          {
            while (1)
            {
              v296 = (uint64_t **)v294;
              v297 = *((_DWORD *)v294 + 7);
              if (v297 <= v289)
                break;
              v294 = *v296;
              v295 = v296;
              if (!*v296)
                goto LABEL_283;
            }
            if (v297 >= v289)
              break;
            v294 = v296[1];
            if (!v294)
            {
              v295 = v296 + 1;
              goto LABEL_283;
            }
          }
        }
        else
        {
          v296 = (uint64_t **)(v293 + 8);
LABEL_283:
          v298 = operator new(0x20uLL);
          v298[7] = v289;
          *(_QWORD *)v298 = 0;
          *((_QWORD *)v298 + 1) = 0;
          *((_QWORD *)v298 + 2) = v296;
          *v295 = (uint64_t *)v298;
          v299 = **(_QWORD **)v293;
          if (v299)
          {
            *(_QWORD *)v293 = v299;
            v300 = *v295;
          }
          else
          {
            v300 = (uint64_t *)v298;
          }
          result = sub_20E868578(*(uint64_t **)(v293 + 8), v300);
          ++*(_QWORD *)(v293 + 16);
          v301 = *v11 + 4 * v292;
          v302.i64[0] = 0x400000004;
          v302.i64[1] = 0x400000004;
          *(int32x4_t *)v301 = vaddq_s32(*(int32x4_t *)v301, v302);
          *(int32x2_t *)(v301 + 16) = vadd_s32(*(int32x2_t *)(v301 + 16), (int32x2_t)0x400000004);
          v8 = v1835;
        }
      }
    }
  }
  v303 = (unsigned int *)a2[14];
  if (*((_BYTE *)v303 + 20))
  {
    v304 = (unsigned int *)a2[8];
    if (*((_BYTE *)v304 + 20))
    {
      v305 = v7[2238] + *v303;
      v306 = *(_QWORD *)(*v9 + 8 * v305);
      v307 = v7[2236] + *v304;
      v308 = *(_QWORD *)(*v9 + 8 * v307);
      if (v306 <= v308 && v306 <= *v8)
      {
        v309 = *v10 + 24 * v307;
        v311 = (uint64_t **)(v309 + 8);
        v310 = *(uint64_t **)(v309 + 8);
        if (v310)
        {
          while (1)
          {
            while (1)
            {
              v312 = (uint64_t **)v310;
              v313 = *((_DWORD *)v310 + 7);
              if (v313 <= v305)
                break;
              v310 = *v312;
              v311 = v312;
              if (!*v312)
                goto LABEL_298;
            }
            if (v313 >= v305)
              break;
            v310 = v312[1];
            if (!v310)
            {
              v311 = v312 + 1;
              goto LABEL_298;
            }
          }
        }
        else
        {
          v312 = (uint64_t **)(v309 + 8);
LABEL_298:
          v314 = operator new(0x20uLL);
          v314[7] = v305;
          *(_QWORD *)v314 = 0;
          *((_QWORD *)v314 + 1) = 0;
          *((_QWORD *)v314 + 2) = v312;
          *v311 = (uint64_t *)v314;
          v315 = **(_QWORD **)v309;
          if (v315)
          {
            *(_QWORD *)v309 = v315;
            v316 = *v311;
          }
          else
          {
            v316 = (uint64_t *)v314;
          }
          result = sub_20E868578(*(uint64_t **)(v309 + 8), v316);
          ++*(_QWORD *)(v309 + 16);
          v317 = *v11 + 4 * v308;
          v318.i64[0] = 0x400000004;
          v318.i64[1] = 0x400000004;
          *(int32x4_t *)v317 = vaddq_s32(*(int32x4_t *)v317, v318);
          *(int32x2_t *)(v317 + 16) = vadd_s32(*(int32x2_t *)(v317 + 16), (int32x2_t)0x400000004);
          v8 = v1835;
        }
      }
    }
  }
  v319 = (unsigned int *)a2[15];
  if (*((_BYTE *)v319 + 20))
  {
    v320 = (unsigned int *)a2[8];
    if (*((_BYTE *)v320 + 20))
    {
      v321 = v7[2239] + *v319;
      v322 = *(_QWORD *)(*v9 + 8 * v321);
      v323 = v7[2236] + *v320;
      v324 = *(_QWORD *)(*v9 + 8 * v323);
      if (v322 <= v324 && v322 <= *v8)
      {
        v325 = *v10 + 24 * v323;
        v327 = (uint64_t **)(v325 + 8);
        v326 = *(uint64_t **)(v325 + 8);
        if (v326)
        {
          while (1)
          {
            while (1)
            {
              v328 = (uint64_t **)v326;
              v329 = *((_DWORD *)v326 + 7);
              if (v329 <= v321)
                break;
              v326 = *v328;
              v327 = v328;
              if (!*v328)
                goto LABEL_313;
            }
            if (v329 >= v321)
              break;
            v326 = v328[1];
            if (!v326)
            {
              v327 = v328 + 1;
              goto LABEL_313;
            }
          }
        }
        else
        {
          v328 = (uint64_t **)(v325 + 8);
LABEL_313:
          v330 = operator new(0x20uLL);
          v330[7] = v321;
          *(_QWORD *)v330 = 0;
          *((_QWORD *)v330 + 1) = 0;
          *((_QWORD *)v330 + 2) = v328;
          *v327 = (uint64_t *)v330;
          v331 = **(_QWORD **)v325;
          if (v331)
          {
            *(_QWORD *)v325 = v331;
            v332 = *v327;
          }
          else
          {
            v332 = (uint64_t *)v330;
          }
          result = sub_20E868578(*(uint64_t **)(v325 + 8), v332);
          ++*(_QWORD *)(v325 + 16);
          v333 = *v11 + 4 * v324;
          v334.i64[0] = 0x300000003;
          v334.i64[1] = 0x300000003;
          *(int32x4_t *)v333 = vaddq_s32(*(int32x4_t *)v333, v334);
          *(int32x2_t *)(v333 + 16) = vadd_s32(*(int32x2_t *)(v333 + 16), (int32x2_t)0x300000003);
          v8 = v1835;
        }
      }
    }
  }
  v335 = (unsigned int *)a2[16];
  if (*((_BYTE *)v335 + 20))
  {
    v336 = (unsigned int *)a2[8];
    if (*((_BYTE *)v336 + 20))
    {
      v337 = v7[2239] + *v335;
      v338 = *(_QWORD *)(*v9 + 8 * v337);
      v339 = v7[2236] + *v336;
      v340 = *(_QWORD *)(*v9 + 8 * v339);
      if (v338 <= v340 && v338 <= *v8)
      {
        v341 = *v10 + 24 * v339;
        v343 = (uint64_t **)(v341 + 8);
        v342 = *(uint64_t **)(v341 + 8);
        if (v342)
        {
          while (1)
          {
            while (1)
            {
              v344 = (uint64_t **)v342;
              v345 = *((_DWORD *)v342 + 7);
              if (v345 <= v337)
                break;
              v342 = *v344;
              v343 = v344;
              if (!*v344)
                goto LABEL_328;
            }
            if (v345 >= v337)
              break;
            v342 = v344[1];
            if (!v342)
            {
              v343 = v344 + 1;
              goto LABEL_328;
            }
          }
        }
        else
        {
          v344 = (uint64_t **)(v341 + 8);
LABEL_328:
          v346 = operator new(0x20uLL);
          v346[7] = v337;
          *(_QWORD *)v346 = 0;
          *((_QWORD *)v346 + 1) = 0;
          *((_QWORD *)v346 + 2) = v344;
          *v343 = (uint64_t *)v346;
          v347 = **(_QWORD **)v341;
          if (v347)
          {
            *(_QWORD *)v341 = v347;
            v348 = *v343;
          }
          else
          {
            v348 = (uint64_t *)v346;
          }
          result = sub_20E868578(*(uint64_t **)(v341 + 8), v348);
          ++*(_QWORD *)(v341 + 16);
          v349 = *v11 + 4 * v340;
          v350.i64[0] = 0x300000003;
          v350.i64[1] = 0x300000003;
          *(int32x4_t *)v349 = vaddq_s32(*(int32x4_t *)v349, v350);
          *(int32x2_t *)(v349 + 16) = vadd_s32(*(int32x2_t *)(v349 + 16), (int32x2_t)0x300000003);
          v8 = v1835;
        }
      }
    }
  }
  v351 = (unsigned int *)a2[17];
  if (*((_BYTE *)v351 + 20))
  {
    v352 = (unsigned int *)a2[8];
    if (*((_BYTE *)v352 + 20))
    {
      v353 = v7[2240] + *v351;
      v354 = *(_QWORD *)(*v9 + 8 * v353);
      v355 = v7[2236] + *v352;
      v356 = *(_QWORD *)(*v9 + 8 * v355);
      if (v354 <= v356 && v354 <= *v8)
      {
        v357 = *v10 + 24 * v355;
        v359 = (uint64_t **)(v357 + 8);
        v358 = *(uint64_t **)(v357 + 8);
        if (v358)
        {
          while (1)
          {
            while (1)
            {
              v360 = (uint64_t **)v358;
              v361 = *((_DWORD *)v358 + 7);
              if (v361 <= v353)
                break;
              v358 = *v360;
              v359 = v360;
              if (!*v360)
                goto LABEL_343;
            }
            if (v361 >= v353)
              break;
            v358 = v360[1];
            if (!v358)
            {
              v359 = v360 + 1;
              goto LABEL_343;
            }
          }
        }
        else
        {
          v360 = (uint64_t **)(v357 + 8);
LABEL_343:
          v362 = operator new(0x20uLL);
          v362[7] = v353;
          *(_QWORD *)v362 = 0;
          *((_QWORD *)v362 + 1) = 0;
          *((_QWORD *)v362 + 2) = v360;
          *v359 = (uint64_t *)v362;
          v363 = **(_QWORD **)v357;
          if (v363)
          {
            *(_QWORD *)v357 = v363;
            v364 = *v359;
          }
          else
          {
            v364 = (uint64_t *)v362;
          }
          result = sub_20E868578(*(uint64_t **)(v357 + 8), v364);
          ++*(_QWORD *)(v357 + 16);
          v365 = *v11 + 4 * v356;
          v366.i64[0] = 0x100000001;
          v366.i64[1] = 0x100000001;
          *(int32x4_t *)v365 = vaddq_s32(*(int32x4_t *)v365, v366);
          *(int32x2_t *)(v365 + 16) = vadd_s32(*(int32x2_t *)(v365 + 16), (int32x2_t)0x100000001);
          v8 = v1835;
        }
      }
    }
  }
  v367 = (unsigned int *)a2[7];
  v368 = (unsigned int *)a2[9];
  if (*((_BYTE *)v367 + 20))
  {
    if (*((_BYTE *)v368 + 20))
    {
      v369 = v7[2236] + *v367;
      v370 = *(_QWORD *)(*v9 + 8 * v369);
      v371 = v7[2233] + *v368;
      v372 = *(_QWORD *)(*v9 + 8 * v371);
      if (v370 <= v372 && v370 <= *v8)
      {
        v373 = *v10 + 24 * v371;
        v375 = (uint64_t **)(v373 + 8);
        v374 = *(uint64_t **)(v373 + 8);
        if (v374)
        {
          while (1)
          {
            while (1)
            {
              v376 = (uint64_t **)v374;
              v377 = *((_DWORD *)v374 + 7);
              if (v377 <= v369)
                break;
              v374 = *v376;
              v375 = v376;
              if (!*v376)
                goto LABEL_358;
            }
            if (v377 >= v369)
              break;
            v374 = v376[1];
            if (!v374)
            {
              v375 = v376 + 1;
              goto LABEL_358;
            }
          }
        }
        else
        {
          v376 = (uint64_t **)(v373 + 8);
LABEL_358:
          v378 = operator new(0x20uLL);
          v378[7] = v369;
          *(_QWORD *)v378 = 0;
          *((_QWORD *)v378 + 1) = 0;
          *((_QWORD *)v378 + 2) = v376;
          *v375 = (uint64_t *)v378;
          v379 = **(_QWORD **)v373;
          if (v379)
          {
            *(_QWORD *)v373 = v379;
            v380 = *v375;
          }
          else
          {
            v380 = (uint64_t *)v378;
          }
          result = sub_20E868578(*(uint64_t **)(v373 + 8), v380);
          ++*(_QWORD *)(v373 + 16);
          v381 = *v11 + 4 * v372;
          v382.i64[0] = 0x600000006;
          v382.i64[1] = 0x600000006;
          *(int32x4_t *)v381 = vaddq_s32(*(int32x4_t *)v381, v382);
          *(int32x2_t *)(v381 + 16) = vadd_s32(*(int32x2_t *)(v381 + 16), (int32x2_t)0x600000006);
          v368 = (unsigned int *)a2[9];
          v8 = v1835;
        }
      }
    }
  }
  v383 = (unsigned int *)a2[8];
  if (*((_BYTE *)v383 + 20))
  {
    if (*((_BYTE *)v368 + 20))
    {
      v384 = v7[2236] + *v383;
      v385 = *(_QWORD *)(*v9 + 8 * v384);
      v386 = v7[2233] + *v368;
      v387 = *(_QWORD *)(*v9 + 8 * v386);
      if (v385 <= v387 && v385 <= *v8)
      {
        v388 = *v10 + 24 * v386;
        v390 = (uint64_t **)(v388 + 8);
        v389 = *(uint64_t **)(v388 + 8);
        if (v389)
        {
          while (1)
          {
            while (1)
            {
              v391 = (uint64_t **)v389;
              v392 = *((_DWORD *)v389 + 7);
              if (v392 <= v384)
                break;
              v389 = *v391;
              v390 = v391;
              if (!*v391)
                goto LABEL_373;
            }
            if (v392 >= v384)
              break;
            v389 = v391[1];
            if (!v389)
            {
              v390 = v391 + 1;
              goto LABEL_373;
            }
          }
        }
        else
        {
          v391 = (uint64_t **)(v388 + 8);
LABEL_373:
          v393 = operator new(0x20uLL);
          v393[7] = v384;
          *(_QWORD *)v393 = 0;
          *((_QWORD *)v393 + 1) = 0;
          *((_QWORD *)v393 + 2) = v391;
          *v390 = (uint64_t *)v393;
          v394 = **(_QWORD **)v388;
          if (v394)
          {
            *(_QWORD *)v388 = v394;
            v395 = *v390;
          }
          else
          {
            v395 = (uint64_t *)v393;
          }
          result = sub_20E868578(*(uint64_t **)(v388 + 8), v395);
          ++*(_QWORD *)(v388 + 16);
          v396 = *v11 + 4 * v387;
          v397.i64[0] = 0x600000006;
          v397.i64[1] = 0x600000006;
          *(int32x4_t *)v396 = vaddq_s32(*(int32x4_t *)v396, v397);
          *(int32x2_t *)(v396 + 16) = vadd_s32(*(int32x2_t *)(v396 + 16), (int32x2_t)0x600000006);
          v368 = (unsigned int *)a2[9];
          v8 = v1835;
        }
      }
    }
  }
  if (*((_BYTE *)v368 + 20))
  {
    v398 = v7[2233] + *v368;
    v399 = *(_QWORD *)(*v9 + 8 * v398);
    if (v399 <= *v8)
    {
      v400 = *v10 + 24 * v398;
      v402 = (uint64_t **)(v400 + 8);
      v401 = *(uint64_t **)(v400 + 8);
      if (v401)
      {
        while (1)
        {
          while (1)
          {
            v403 = (uint64_t **)v401;
            v404 = *((_DWORD *)v401 + 7);
            if (v404 <= v398)
              break;
            v401 = *v403;
            v402 = v403;
            if (!*v403)
              goto LABEL_386;
          }
          if (v404 >= v398)
            break;
          v401 = v403[1];
          if (!v401)
          {
            v402 = v403 + 1;
            goto LABEL_386;
          }
        }
      }
      else
      {
        v403 = (uint64_t **)(v400 + 8);
LABEL_386:
        v405 = operator new(0x20uLL);
        v405[7] = v398;
        *(_QWORD *)v405 = 0;
        *((_QWORD *)v405 + 1) = 0;
        *((_QWORD *)v405 + 2) = v403;
        *v402 = (uint64_t *)v405;
        v406 = **(_QWORD **)v400;
        if (v406)
        {
          *(_QWORD *)v400 = v406;
          v407 = *v402;
        }
        else
        {
          v407 = (uint64_t *)v405;
        }
        result = sub_20E868578(*(uint64_t **)(v400 + 8), v407);
        ++*(_QWORD *)(v400 + 16);
        v408 = *v11 + 4 * v399;
        v409.i64[0] = 0x600000006;
        v409.i64[1] = 0x600000006;
        *(int32x4_t *)v408 = vaddq_s32(*(int32x4_t *)v408, v409);
        *(int32x2_t *)(v408 + 16) = vadd_s32(*(int32x2_t *)(v408 + 16), (int32x2_t)0x600000006);
        v8 = v1835;
      }
    }
  }
  v410 = (unsigned int *)a2[10];
  if (*((_BYTE *)v410 + 20))
  {
    v411 = (unsigned int *)a2[9];
    if (*((_BYTE *)v411 + 20))
    {
      v412 = v7[2233];
      v413 = v412 + *v410;
      v414 = *(_QWORD *)(*v9 + 8 * v413);
      v415 = v412 + *v411;
      v416 = *(_QWORD *)(*v9 + 8 * v415);
      if (v414 <= v416 && v414 <= *v8)
      {
        v417 = *v10 + 24 * v415;
        v419 = (uint64_t **)(v417 + 8);
        v418 = *(uint64_t **)(v417 + 8);
        if (v418)
        {
          while (1)
          {
            while (1)
            {
              v420 = (uint64_t **)v418;
              v421 = *((_DWORD *)v418 + 7);
              if (v421 <= v413)
                break;
              v418 = *v420;
              v419 = v420;
              if (!*v420)
                goto LABEL_401;
            }
            if (v421 >= v413)
              break;
            v418 = v420[1];
            if (!v418)
            {
              v419 = v420 + 1;
              goto LABEL_401;
            }
          }
        }
        else
        {
          v420 = (uint64_t **)(v417 + 8);
LABEL_401:
          v422 = operator new(0x20uLL);
          v422[7] = v413;
          *(_QWORD *)v422 = 0;
          *((_QWORD *)v422 + 1) = 0;
          *((_QWORD *)v422 + 2) = v420;
          *v419 = (uint64_t *)v422;
          v423 = **(_QWORD **)v417;
          if (v423)
          {
            *(_QWORD *)v417 = v423;
            v424 = *v419;
          }
          else
          {
            v424 = (uint64_t *)v422;
          }
          result = sub_20E868578(*(uint64_t **)(v417 + 8), v424);
          ++*(_QWORD *)(v417 + 16);
          v425 = *v11 + 4 * v416;
          v426.i64[0] = 0x600000006;
          v426.i64[1] = 0x600000006;
          *(int32x4_t *)v425 = vaddq_s32(*(int32x4_t *)v425, v426);
          *(int32x2_t *)(v425 + 16) = vadd_s32(*(int32x2_t *)(v425 + 16), (int32x2_t)0x600000006);
          v8 = v1835;
        }
      }
    }
  }
  v427 = (unsigned int *)a2[11];
  if (*((_BYTE *)v427 + 20))
  {
    v428 = (unsigned int *)a2[9];
    if (*((_BYTE *)v428 + 20))
    {
      v429 = v7[2237] + *v427;
      v430 = *(_QWORD *)(*v9 + 8 * v429);
      v431 = v7[2233] + *v428;
      v432 = *(_QWORD *)(*v9 + 8 * v431);
      if (v430 <= v432 && v430 <= *v8)
      {
        v433 = *v10 + 24 * v431;
        v435 = (uint64_t **)(v433 + 8);
        v434 = *(uint64_t **)(v433 + 8);
        if (v434)
        {
          while (1)
          {
            while (1)
            {
              v436 = (uint64_t **)v434;
              v437 = *((_DWORD *)v434 + 7);
              if (v437 <= v429)
                break;
              v434 = *v436;
              v435 = v436;
              if (!*v436)
                goto LABEL_416;
            }
            if (v437 >= v429)
              break;
            v434 = v436[1];
            if (!v434)
            {
              v435 = v436 + 1;
              goto LABEL_416;
            }
          }
        }
        else
        {
          v436 = (uint64_t **)(v433 + 8);
LABEL_416:
          v438 = operator new(0x20uLL);
          v438[7] = v429;
          *(_QWORD *)v438 = 0;
          *((_QWORD *)v438 + 1) = 0;
          *((_QWORD *)v438 + 2) = v436;
          *v435 = (uint64_t *)v438;
          v439 = **(_QWORD **)v433;
          if (v439)
          {
            *(_QWORD *)v433 = v439;
            v440 = *v435;
          }
          else
          {
            v440 = (uint64_t *)v438;
          }
          result = sub_20E868578(*(uint64_t **)(v433 + 8), v440);
          ++*(_QWORD *)(v433 + 16);
          v441 = *v11 + 4 * v432;
          v442.i64[0] = 0x400000004;
          v442.i64[1] = 0x400000004;
          *(int32x4_t *)v441 = vaddq_s32(*(int32x4_t *)v441, v442);
          *(int32x2_t *)(v441 + 16) = vadd_s32(*(int32x2_t *)(v441 + 16), (int32x2_t)0x400000004);
          v8 = v1835;
        }
      }
    }
  }
  v443 = (unsigned int *)a2[12];
  if (*((_BYTE *)v443 + 20))
  {
    v444 = (unsigned int *)a2[9];
    if (*((_BYTE *)v444 + 20))
    {
      v445 = v7[2237] + *v443;
      v446 = *(_QWORD *)(*v9 + 8 * v445);
      v447 = v7[2233] + *v444;
      v448 = *(_QWORD *)(*v9 + 8 * v447);
      if (v446 <= v448 && v446 <= *v8)
      {
        v449 = *v10 + 24 * v447;
        v451 = (uint64_t **)(v449 + 8);
        v450 = *(uint64_t **)(v449 + 8);
        if (v450)
        {
          while (1)
          {
            while (1)
            {
              v452 = (uint64_t **)v450;
              v453 = *((_DWORD *)v450 + 7);
              if (v453 <= v445)
                break;
              v450 = *v452;
              v451 = v452;
              if (!*v452)
                goto LABEL_431;
            }
            if (v453 >= v445)
              break;
            v450 = v452[1];
            if (!v450)
            {
              v451 = v452 + 1;
              goto LABEL_431;
            }
          }
        }
        else
        {
          v452 = (uint64_t **)(v449 + 8);
LABEL_431:
          v454 = operator new(0x20uLL);
          v454[7] = v445;
          *(_QWORD *)v454 = 0;
          *((_QWORD *)v454 + 1) = 0;
          *((_QWORD *)v454 + 2) = v452;
          *v451 = (uint64_t *)v454;
          v455 = **(_QWORD **)v449;
          if (v455)
          {
            *(_QWORD *)v449 = v455;
            v456 = *v451;
          }
          else
          {
            v456 = (uint64_t *)v454;
          }
          result = sub_20E868578(*(uint64_t **)(v449 + 8), v456);
          ++*(_QWORD *)(v449 + 16);
          v457 = *v11 + 4 * v448;
          v458.i64[0] = 0x400000004;
          v458.i64[1] = 0x400000004;
          *(int32x4_t *)v457 = vaddq_s32(*(int32x4_t *)v457, v458);
          *(int32x2_t *)(v457 + 16) = vadd_s32(*(int32x2_t *)(v457 + 16), (int32x2_t)0x400000004);
          v8 = v1835;
        }
      }
    }
  }
  v459 = (unsigned int *)a2[13];
  if (*((_BYTE *)v459 + 20))
  {
    v460 = (unsigned int *)a2[9];
    if (*((_BYTE *)v460 + 20))
    {
      v461 = v7[2238] + *v459;
      v462 = *(_QWORD *)(*v9 + 8 * v461);
      v463 = v7[2233] + *v460;
      v464 = *(_QWORD *)(*v9 + 8 * v463);
      if (v462 <= v464 && v462 <= *v8)
      {
        v465 = *v10 + 24 * v463;
        v467 = (uint64_t **)(v465 + 8);
        v466 = *(uint64_t **)(v465 + 8);
        if (v466)
        {
          while (1)
          {
            while (1)
            {
              v468 = (uint64_t **)v466;
              v469 = *((_DWORD *)v466 + 7);
              if (v469 <= v461)
                break;
              v466 = *v468;
              v467 = v468;
              if (!*v468)
                goto LABEL_446;
            }
            if (v469 >= v461)
              break;
            v466 = v468[1];
            if (!v466)
            {
              v467 = v468 + 1;
              goto LABEL_446;
            }
          }
        }
        else
        {
          v468 = (uint64_t **)(v465 + 8);
LABEL_446:
          v470 = operator new(0x20uLL);
          v470[7] = v461;
          *(_QWORD *)v470 = 0;
          *((_QWORD *)v470 + 1) = 0;
          *((_QWORD *)v470 + 2) = v468;
          *v467 = (uint64_t *)v470;
          v471 = **(_QWORD **)v465;
          if (v471)
          {
            *(_QWORD *)v465 = v471;
            v472 = *v467;
          }
          else
          {
            v472 = (uint64_t *)v470;
          }
          result = sub_20E868578(*(uint64_t **)(v465 + 8), v472);
          ++*(_QWORD *)(v465 + 16);
          v473 = *v11 + 4 * v464;
          v474.i64[0] = 0x400000004;
          v474.i64[1] = 0x400000004;
          *(int32x4_t *)v473 = vaddq_s32(*(int32x4_t *)v473, v474);
          *(int32x2_t *)(v473 + 16) = vadd_s32(*(int32x2_t *)(v473 + 16), (int32x2_t)0x400000004);
          v8 = v1835;
        }
      }
    }
  }
  v475 = (unsigned int *)a2[14];
  if (*((_BYTE *)v475 + 20))
  {
    v476 = (unsigned int *)a2[9];
    if (*((_BYTE *)v476 + 20))
    {
      v477 = v7[2238] + *v475;
      v478 = *(_QWORD *)(*v9 + 8 * v477);
      v479 = v7[2233] + *v476;
      v480 = *(_QWORD *)(*v9 + 8 * v479);
      if (v478 <= v480 && v478 <= *v8)
      {
        v481 = *v10 + 24 * v479;
        v483 = (uint64_t **)(v481 + 8);
        v482 = *(uint64_t **)(v481 + 8);
        if (v482)
        {
          while (1)
          {
            while (1)
            {
              v484 = (uint64_t **)v482;
              v485 = *((_DWORD *)v482 + 7);
              if (v485 <= v477)
                break;
              v482 = *v484;
              v483 = v484;
              if (!*v484)
                goto LABEL_461;
            }
            if (v485 >= v477)
              break;
            v482 = v484[1];
            if (!v482)
            {
              v483 = v484 + 1;
              goto LABEL_461;
            }
          }
        }
        else
        {
          v484 = (uint64_t **)(v481 + 8);
LABEL_461:
          v486 = operator new(0x20uLL);
          v486[7] = v477;
          *(_QWORD *)v486 = 0;
          *((_QWORD *)v486 + 1) = 0;
          *((_QWORD *)v486 + 2) = v484;
          *v483 = (uint64_t *)v486;
          v487 = **(_QWORD **)v481;
          if (v487)
          {
            *(_QWORD *)v481 = v487;
            v488 = *v483;
          }
          else
          {
            v488 = (uint64_t *)v486;
          }
          result = sub_20E868578(*(uint64_t **)(v481 + 8), v488);
          ++*(_QWORD *)(v481 + 16);
          v489 = *v11 + 4 * v480;
          v490.i64[0] = 0x400000004;
          v490.i64[1] = 0x400000004;
          *(int32x4_t *)v489 = vaddq_s32(*(int32x4_t *)v489, v490);
          *(int32x2_t *)(v489 + 16) = vadd_s32(*(int32x2_t *)(v489 + 16), (int32x2_t)0x400000004);
          v8 = v1835;
        }
      }
    }
  }
  v491 = (unsigned int *)a2[15];
  if (*((_BYTE *)v491 + 20))
  {
    v492 = (unsigned int *)a2[9];
    if (*((_BYTE *)v492 + 20))
    {
      v493 = v7[2239] + *v491;
      v494 = *(_QWORD *)(*v9 + 8 * v493);
      v495 = v7[2233] + *v492;
      v496 = *(_QWORD *)(*v9 + 8 * v495);
      if (v494 <= v496 && v494 <= *v8)
      {
        v497 = *v10 + 24 * v495;
        v499 = (uint64_t **)(v497 + 8);
        v498 = *(uint64_t **)(v497 + 8);
        if (v498)
        {
          while (1)
          {
            while (1)
            {
              v500 = (uint64_t **)v498;
              v501 = *((_DWORD *)v498 + 7);
              if (v501 <= v493)
                break;
              v498 = *v500;
              v499 = v500;
              if (!*v500)
                goto LABEL_476;
            }
            if (v501 >= v493)
              break;
            v498 = v500[1];
            if (!v498)
            {
              v499 = v500 + 1;
              goto LABEL_476;
            }
          }
        }
        else
        {
          v500 = (uint64_t **)(v497 + 8);
LABEL_476:
          v502 = operator new(0x20uLL);
          v502[7] = v493;
          *(_QWORD *)v502 = 0;
          *((_QWORD *)v502 + 1) = 0;
          *((_QWORD *)v502 + 2) = v500;
          *v499 = (uint64_t *)v502;
          v503 = **(_QWORD **)v497;
          if (v503)
          {
            *(_QWORD *)v497 = v503;
            v504 = *v499;
          }
          else
          {
            v504 = (uint64_t *)v502;
          }
          result = sub_20E868578(*(uint64_t **)(v497 + 8), v504);
          ++*(_QWORD *)(v497 + 16);
          v505 = *v11 + 4 * v496;
          v506.i64[0] = 0x300000003;
          v506.i64[1] = 0x300000003;
          *(int32x4_t *)v505 = vaddq_s32(*(int32x4_t *)v505, v506);
          *(int32x2_t *)(v505 + 16) = vadd_s32(*(int32x2_t *)(v505 + 16), (int32x2_t)0x300000003);
          v8 = v1835;
        }
      }
    }
  }
  v507 = (unsigned int *)a2[16];
  if (*((_BYTE *)v507 + 20))
  {
    v508 = (unsigned int *)a2[9];
    if (*((_BYTE *)v508 + 20))
    {
      v509 = v7[2239] + *v507;
      v510 = *(_QWORD *)(*v9 + 8 * v509);
      v511 = v7[2233] + *v508;
      v512 = *(_QWORD *)(*v9 + 8 * v511);
      if (v510 <= v512 && v510 <= *v8)
      {
        v513 = *v10 + 24 * v511;
        v515 = (uint64_t **)(v513 + 8);
        v514 = *(uint64_t **)(v513 + 8);
        if (v514)
        {
          while (1)
          {
            while (1)
            {
              v516 = (uint64_t **)v514;
              v517 = *((_DWORD *)v514 + 7);
              if (v517 <= v509)
                break;
              v514 = *v516;
              v515 = v516;
              if (!*v516)
                goto LABEL_491;
            }
            if (v517 >= v509)
              break;
            v514 = v516[1];
            if (!v514)
            {
              v515 = v516 + 1;
              goto LABEL_491;
            }
          }
        }
        else
        {
          v516 = (uint64_t **)(v513 + 8);
LABEL_491:
          v518 = operator new(0x20uLL);
          v518[7] = v509;
          *(_QWORD *)v518 = 0;
          *((_QWORD *)v518 + 1) = 0;
          *((_QWORD *)v518 + 2) = v516;
          *v515 = (uint64_t *)v518;
          v519 = **(_QWORD **)v513;
          if (v519)
          {
            *(_QWORD *)v513 = v519;
            v520 = *v515;
          }
          else
          {
            v520 = (uint64_t *)v518;
          }
          result = sub_20E868578(*(uint64_t **)(v513 + 8), v520);
          ++*(_QWORD *)(v513 + 16);
          v521 = *v11 + 4 * v512;
          v522.i64[0] = 0x300000003;
          v522.i64[1] = 0x300000003;
          *(int32x4_t *)v521 = vaddq_s32(*(int32x4_t *)v521, v522);
          *(int32x2_t *)(v521 + 16) = vadd_s32(*(int32x2_t *)(v521 + 16), (int32x2_t)0x300000003);
          v8 = v1835;
        }
      }
    }
  }
  v523 = (unsigned int *)a2[17];
  if (*((_BYTE *)v523 + 20))
  {
    v524 = (unsigned int *)a2[9];
    if (*((_BYTE *)v524 + 20))
    {
      v525 = v7[2240] + *v523;
      v526 = *(_QWORD *)(*v9 + 8 * v525);
      v527 = v7[2233] + *v524;
      v528 = *(_QWORD *)(*v9 + 8 * v527);
      if (v526 <= v528 && v526 <= *v8)
      {
        v529 = *v10 + 24 * v527;
        v531 = (uint64_t **)(v529 + 8);
        v530 = *(uint64_t **)(v529 + 8);
        if (v530)
        {
          while (1)
          {
            while (1)
            {
              v532 = (uint64_t **)v530;
              v533 = *((_DWORD *)v530 + 7);
              if (v533 <= v525)
                break;
              v530 = *v532;
              v531 = v532;
              if (!*v532)
                goto LABEL_506;
            }
            if (v533 >= v525)
              break;
            v530 = v532[1];
            if (!v530)
            {
              v531 = v532 + 1;
              goto LABEL_506;
            }
          }
        }
        else
        {
          v532 = (uint64_t **)(v529 + 8);
LABEL_506:
          v534 = operator new(0x20uLL);
          v534[7] = v525;
          *(_QWORD *)v534 = 0;
          *((_QWORD *)v534 + 1) = 0;
          *((_QWORD *)v534 + 2) = v532;
          *v531 = (uint64_t *)v534;
          v535 = **(_QWORD **)v529;
          if (v535)
          {
            *(_QWORD *)v529 = v535;
            v536 = *v531;
          }
          else
          {
            v536 = (uint64_t *)v534;
          }
          result = sub_20E868578(*(uint64_t **)(v529 + 8), v536);
          ++*(_QWORD *)(v529 + 16);
          v537 = *v11 + 4 * v528;
          v538.i64[0] = 0x100000001;
          v538.i64[1] = 0x100000001;
          *(int32x4_t *)v537 = vaddq_s32(*(int32x4_t *)v537, v538);
          *(int32x2_t *)(v537 + 16) = vadd_s32(*(int32x2_t *)(v537 + 16), (int32x2_t)0x100000001);
          v8 = v1835;
        }
      }
    }
  }
  v539 = (unsigned int *)a2[7];
  v540 = (unsigned int *)a2[10];
  if (*((_BYTE *)v539 + 20))
  {
    if (*((_BYTE *)v540 + 20))
    {
      v541 = v7[2236] + *v539;
      v542 = *(_QWORD *)(*v9 + 8 * v541);
      v543 = v7[2233] + *v540;
      v544 = *(_QWORD *)(*v9 + 8 * v543);
      if (v542 <= v544 && v542 <= *v8)
      {
        v545 = *v10 + 24 * v543;
        v547 = (uint64_t **)(v545 + 8);
        v546 = *(uint64_t **)(v545 + 8);
        if (v546)
        {
          while (1)
          {
            while (1)
            {
              v548 = (uint64_t **)v546;
              v549 = *((_DWORD *)v546 + 7);
              if (v549 <= v541)
                break;
              v546 = *v548;
              v547 = v548;
              if (!*v548)
                goto LABEL_521;
            }
            if (v549 >= v541)
              break;
            v546 = v548[1];
            if (!v546)
            {
              v547 = v548 + 1;
              goto LABEL_521;
            }
          }
        }
        else
        {
          v548 = (uint64_t **)(v545 + 8);
LABEL_521:
          v550 = operator new(0x20uLL);
          v550[7] = v541;
          *(_QWORD *)v550 = 0;
          *((_QWORD *)v550 + 1) = 0;
          *((_QWORD *)v550 + 2) = v548;
          *v547 = (uint64_t *)v550;
          v551 = **(_QWORD **)v545;
          if (v551)
          {
            *(_QWORD *)v545 = v551;
            v552 = *v547;
          }
          else
          {
            v552 = (uint64_t *)v550;
          }
          result = sub_20E868578(*(uint64_t **)(v545 + 8), v552);
          ++*(_QWORD *)(v545 + 16);
          v553 = *v11 + 4 * v544;
          v554.i64[0] = 0x600000006;
          v554.i64[1] = 0x600000006;
          *(int32x4_t *)v553 = vaddq_s32(*(int32x4_t *)v553, v554);
          *(int32x2_t *)(v553 + 16) = vadd_s32(*(int32x2_t *)(v553 + 16), (int32x2_t)0x600000006);
          v540 = (unsigned int *)a2[10];
          v8 = v1835;
        }
      }
    }
  }
  v555 = (unsigned int *)a2[8];
  if (*((_BYTE *)v555 + 20))
  {
    if (*((_BYTE *)v540 + 20))
    {
      v556 = v7[2236] + *v555;
      v557 = *(_QWORD *)(*v9 + 8 * v556);
      v558 = v7[2233] + *v540;
      v559 = *(_QWORD *)(*v9 + 8 * v558);
      if (v557 <= v559 && v557 <= *v8)
      {
        v560 = *v10 + 24 * v558;
        v562 = (uint64_t **)(v560 + 8);
        v561 = *(uint64_t **)(v560 + 8);
        if (v561)
        {
          while (1)
          {
            while (1)
            {
              v563 = (uint64_t **)v561;
              v564 = *((_DWORD *)v561 + 7);
              if (v564 <= v556)
                break;
              v561 = *v563;
              v562 = v563;
              if (!*v563)
                goto LABEL_536;
            }
            if (v564 >= v556)
              break;
            v561 = v563[1];
            if (!v561)
            {
              v562 = v563 + 1;
              goto LABEL_536;
            }
          }
        }
        else
        {
          v563 = (uint64_t **)(v560 + 8);
LABEL_536:
          v565 = operator new(0x20uLL);
          v565[7] = v556;
          *(_QWORD *)v565 = 0;
          *((_QWORD *)v565 + 1) = 0;
          *((_QWORD *)v565 + 2) = v563;
          *v562 = (uint64_t *)v565;
          v566 = **(_QWORD **)v560;
          if (v566)
          {
            *(_QWORD *)v560 = v566;
            v567 = *v562;
          }
          else
          {
            v567 = (uint64_t *)v565;
          }
          result = sub_20E868578(*(uint64_t **)(v560 + 8), v567);
          ++*(_QWORD *)(v560 + 16);
          v568 = *v11 + 4 * v559;
          v569.i64[0] = 0x600000006;
          v569.i64[1] = 0x600000006;
          *(int32x4_t *)v568 = vaddq_s32(*(int32x4_t *)v568, v569);
          *(int32x2_t *)(v568 + 16) = vadd_s32(*(int32x2_t *)(v568 + 16), (int32x2_t)0x600000006);
          v540 = (unsigned int *)a2[10];
          v8 = v1835;
        }
      }
    }
  }
  v570 = (unsigned int *)a2[9];
  if (*((_BYTE *)v570 + 20))
  {
    if (*((_BYTE *)v540 + 20))
    {
      v571 = v7[2233];
      v572 = v571 + *v570;
      v573 = *(_QWORD *)(*v9 + 8 * v572);
      v574 = v571 + *v540;
      v575 = *(_QWORD *)(*v9 + 8 * v574);
      if (v573 <= v575 && v573 <= *v8)
      {
        v576 = *v10 + 24 * v574;
        v578 = (uint64_t **)(v576 + 8);
        v577 = *(uint64_t **)(v576 + 8);
        if (v577)
        {
          while (1)
          {
            while (1)
            {
              v579 = (uint64_t **)v577;
              v580 = *((_DWORD *)v577 + 7);
              if (v580 <= v572)
                break;
              v577 = *v579;
              v578 = v579;
              if (!*v579)
                goto LABEL_551;
            }
            if (v580 >= v572)
              break;
            v577 = v579[1];
            if (!v577)
            {
              v578 = v579 + 1;
              goto LABEL_551;
            }
          }
        }
        else
        {
          v579 = (uint64_t **)(v576 + 8);
LABEL_551:
          v581 = operator new(0x20uLL);
          v581[7] = v572;
          *(_QWORD *)v581 = 0;
          *((_QWORD *)v581 + 1) = 0;
          *((_QWORD *)v581 + 2) = v579;
          *v578 = (uint64_t *)v581;
          v582 = **(_QWORD **)v576;
          if (v582)
          {
            *(_QWORD *)v576 = v582;
            v583 = *v578;
          }
          else
          {
            v583 = (uint64_t *)v581;
          }
          result = sub_20E868578(*(uint64_t **)(v576 + 8), v583);
          ++*(_QWORD *)(v576 + 16);
          v584 = *v11 + 4 * v575;
          v585.i64[0] = 0x600000006;
          v585.i64[1] = 0x600000006;
          *(int32x4_t *)v584 = vaddq_s32(*(int32x4_t *)v584, v585);
          *(int32x2_t *)(v584 + 16) = vadd_s32(*(int32x2_t *)(v584 + 16), (int32x2_t)0x600000006);
          v540 = (unsigned int *)a2[10];
          v8 = v1835;
        }
      }
    }
  }
  if (*((_BYTE *)v540 + 20))
  {
    v586 = v7[2233] + *v540;
    v587 = *(_QWORD *)(*v9 + 8 * v586);
    if (v587 <= *v8)
    {
      v588 = *v10 + 24 * v586;
      v590 = (uint64_t **)(v588 + 8);
      v589 = *(uint64_t **)(v588 + 8);
      if (v589)
      {
        while (1)
        {
          while (1)
          {
            v591 = (uint64_t **)v589;
            v592 = *((_DWORD *)v589 + 7);
            if (v592 <= v586)
              break;
            v589 = *v591;
            v590 = v591;
            if (!*v591)
              goto LABEL_564;
          }
          if (v592 >= v586)
            break;
          v589 = v591[1];
          if (!v589)
          {
            v590 = v591 + 1;
            goto LABEL_564;
          }
        }
      }
      else
      {
        v591 = (uint64_t **)(v588 + 8);
LABEL_564:
        v593 = operator new(0x20uLL);
        v593[7] = v586;
        *(_QWORD *)v593 = 0;
        *((_QWORD *)v593 + 1) = 0;
        *((_QWORD *)v593 + 2) = v591;
        *v590 = (uint64_t *)v593;
        v594 = **(_QWORD **)v588;
        if (v594)
        {
          *(_QWORD *)v588 = v594;
          v595 = *v590;
        }
        else
        {
          v595 = (uint64_t *)v593;
        }
        result = sub_20E868578(*(uint64_t **)(v588 + 8), v595);
        ++*(_QWORD *)(v588 + 16);
        v596 = *v11 + 4 * v587;
        v597.i64[0] = 0x600000006;
        v597.i64[1] = 0x600000006;
        *(int32x4_t *)v596 = vaddq_s32(*(int32x4_t *)v596, v597);
        *(int32x2_t *)(v596 + 16) = vadd_s32(*(int32x2_t *)(v596 + 16), (int32x2_t)0x600000006);
        v8 = v1835;
      }
    }
  }
  v598 = (unsigned int *)a2[11];
  if (*((_BYTE *)v598 + 20))
  {
    v599 = (unsigned int *)a2[10];
    if (*((_BYTE *)v599 + 20))
    {
      v600 = v7[2237] + *v598;
      v601 = *(_QWORD *)(*v9 + 8 * v600);
      v602 = v7[2233] + *v599;
      v603 = *(_QWORD *)(*v9 + 8 * v602);
      if (v601 <= v603 && v601 <= *v8)
      {
        v604 = *v10 + 24 * v602;
        v606 = (uint64_t **)(v604 + 8);
        v605 = *(uint64_t **)(v604 + 8);
        if (v605)
        {
          while (1)
          {
            while (1)
            {
              v607 = (uint64_t **)v605;
              v608 = *((_DWORD *)v605 + 7);
              if (v608 <= v600)
                break;
              v605 = *v607;
              v606 = v607;
              if (!*v607)
                goto LABEL_579;
            }
            if (v608 >= v600)
              break;
            v605 = v607[1];
            if (!v605)
            {
              v606 = v607 + 1;
              goto LABEL_579;
            }
          }
        }
        else
        {
          v607 = (uint64_t **)(v604 + 8);
LABEL_579:
          v609 = operator new(0x20uLL);
          v609[7] = v600;
          *(_QWORD *)v609 = 0;
          *((_QWORD *)v609 + 1) = 0;
          *((_QWORD *)v609 + 2) = v607;
          *v606 = (uint64_t *)v609;
          v610 = **(_QWORD **)v604;
          if (v610)
          {
            *(_QWORD *)v604 = v610;
            v611 = *v606;
          }
          else
          {
            v611 = (uint64_t *)v609;
          }
          result = sub_20E868578(*(uint64_t **)(v604 + 8), v611);
          ++*(_QWORD *)(v604 + 16);
          v612 = *v11 + 4 * v603;
          v613.i64[0] = 0x400000004;
          v613.i64[1] = 0x400000004;
          *(int32x4_t *)v612 = vaddq_s32(*(int32x4_t *)v612, v613);
          *(int32x2_t *)(v612 + 16) = vadd_s32(*(int32x2_t *)(v612 + 16), (int32x2_t)0x400000004);
          v8 = v1835;
        }
      }
    }
  }
  v614 = (unsigned int *)a2[12];
  if (*((_BYTE *)v614 + 20))
  {
    v615 = (unsigned int *)a2[10];
    if (*((_BYTE *)v615 + 20))
    {
      v616 = v7[2237] + *v614;
      v617 = *(_QWORD *)(*v9 + 8 * v616);
      v618 = v7[2233] + *v615;
      v619 = *(_QWORD *)(*v9 + 8 * v618);
      if (v617 <= v619 && v617 <= *v8)
      {
        v620 = *v10 + 24 * v618;
        v622 = (uint64_t **)(v620 + 8);
        v621 = *(uint64_t **)(v620 + 8);
        if (v621)
        {
          while (1)
          {
            while (1)
            {
              v623 = (uint64_t **)v621;
              v624 = *((_DWORD *)v621 + 7);
              if (v624 <= v616)
                break;
              v621 = *v623;
              v622 = v623;
              if (!*v623)
                goto LABEL_594;
            }
            if (v624 >= v616)
              break;
            v621 = v623[1];
            if (!v621)
            {
              v622 = v623 + 1;
              goto LABEL_594;
            }
          }
        }
        else
        {
          v623 = (uint64_t **)(v620 + 8);
LABEL_594:
          v625 = operator new(0x20uLL);
          v625[7] = v616;
          *(_QWORD *)v625 = 0;
          *((_QWORD *)v625 + 1) = 0;
          *((_QWORD *)v625 + 2) = v623;
          *v622 = (uint64_t *)v625;
          v626 = **(_QWORD **)v620;
          if (v626)
          {
            *(_QWORD *)v620 = v626;
            v627 = *v622;
          }
          else
          {
            v627 = (uint64_t *)v625;
          }
          result = sub_20E868578(*(uint64_t **)(v620 + 8), v627);
          ++*(_QWORD *)(v620 + 16);
          v628 = *v11 + 4 * v619;
          v629.i64[0] = 0x400000004;
          v629.i64[1] = 0x400000004;
          *(int32x4_t *)v628 = vaddq_s32(*(int32x4_t *)v628, v629);
          *(int32x2_t *)(v628 + 16) = vadd_s32(*(int32x2_t *)(v628 + 16), (int32x2_t)0x400000004);
          v8 = v1835;
        }
      }
    }
  }
  v630 = (unsigned int *)a2[13];
  if (*((_BYTE *)v630 + 20))
  {
    v631 = (unsigned int *)a2[10];
    if (*((_BYTE *)v631 + 20))
    {
      v632 = v7[2238] + *v630;
      v633 = *(_QWORD *)(*v9 + 8 * v632);
      v634 = v7[2233] + *v631;
      v635 = *(_QWORD *)(*v9 + 8 * v634);
      if (v633 <= v635 && v633 <= *v8)
      {
        v636 = *v10 + 24 * v634;
        v638 = (uint64_t **)(v636 + 8);
        v637 = *(uint64_t **)(v636 + 8);
        if (v637)
        {
          while (1)
          {
            while (1)
            {
              v639 = (uint64_t **)v637;
              v640 = *((_DWORD *)v637 + 7);
              if (v640 <= v632)
                break;
              v637 = *v639;
              v638 = v639;
              if (!*v639)
                goto LABEL_609;
            }
            if (v640 >= v632)
              break;
            v637 = v639[1];
            if (!v637)
            {
              v638 = v639 + 1;
              goto LABEL_609;
            }
          }
        }
        else
        {
          v639 = (uint64_t **)(v636 + 8);
LABEL_609:
          v641 = operator new(0x20uLL);
          v641[7] = v632;
          *(_QWORD *)v641 = 0;
          *((_QWORD *)v641 + 1) = 0;
          *((_QWORD *)v641 + 2) = v639;
          *v638 = (uint64_t *)v641;
          v642 = **(_QWORD **)v636;
          if (v642)
          {
            *(_QWORD *)v636 = v642;
            v643 = *v638;
          }
          else
          {
            v643 = (uint64_t *)v641;
          }
          result = sub_20E868578(*(uint64_t **)(v636 + 8), v643);
          ++*(_QWORD *)(v636 + 16);
          v644 = *v11 + 4 * v635;
          v645.i64[0] = 0x400000004;
          v645.i64[1] = 0x400000004;
          *(int32x4_t *)v644 = vaddq_s32(*(int32x4_t *)v644, v645);
          *(int32x2_t *)(v644 + 16) = vadd_s32(*(int32x2_t *)(v644 + 16), (int32x2_t)0x400000004);
          v8 = v1835;
        }
      }
    }
  }
  v646 = (unsigned int *)a2[14];
  if (*((_BYTE *)v646 + 20))
  {
    v647 = (unsigned int *)a2[10];
    if (*((_BYTE *)v647 + 20))
    {
      v648 = v7[2238] + *v646;
      v649 = *(_QWORD *)(*v9 + 8 * v648);
      v650 = v7[2233] + *v647;
      v651 = *(_QWORD *)(*v9 + 8 * v650);
      if (v649 <= v651 && v649 <= *v8)
      {
        v652 = *v10 + 24 * v650;
        v654 = (uint64_t **)(v652 + 8);
        v653 = *(uint64_t **)(v652 + 8);
        if (v653)
        {
          while (1)
          {
            while (1)
            {
              v655 = (uint64_t **)v653;
              v656 = *((_DWORD *)v653 + 7);
              if (v656 <= v648)
                break;
              v653 = *v655;
              v654 = v655;
              if (!*v655)
                goto LABEL_624;
            }
            if (v656 >= v648)
              break;
            v653 = v655[1];
            if (!v653)
            {
              v654 = v655 + 1;
              goto LABEL_624;
            }
          }
        }
        else
        {
          v655 = (uint64_t **)(v652 + 8);
LABEL_624:
          v657 = operator new(0x20uLL);
          v657[7] = v648;
          *(_QWORD *)v657 = 0;
          *((_QWORD *)v657 + 1) = 0;
          *((_QWORD *)v657 + 2) = v655;
          *v654 = (uint64_t *)v657;
          v658 = **(_QWORD **)v652;
          if (v658)
          {
            *(_QWORD *)v652 = v658;
            v659 = *v654;
          }
          else
          {
            v659 = (uint64_t *)v657;
          }
          result = sub_20E868578(*(uint64_t **)(v652 + 8), v659);
          ++*(_QWORD *)(v652 + 16);
          v660 = *v11 + 4 * v651;
          v661.i64[0] = 0x400000004;
          v661.i64[1] = 0x400000004;
          *(int32x4_t *)v660 = vaddq_s32(*(int32x4_t *)v660, v661);
          *(int32x2_t *)(v660 + 16) = vadd_s32(*(int32x2_t *)(v660 + 16), (int32x2_t)0x400000004);
          v8 = v1835;
        }
      }
    }
  }
  v662 = (unsigned int *)a2[15];
  if (*((_BYTE *)v662 + 20))
  {
    v663 = (unsigned int *)a2[10];
    if (*((_BYTE *)v663 + 20))
    {
      v664 = v7[2239] + *v662;
      v665 = *(_QWORD *)(*v9 + 8 * v664);
      v666 = v7[2233] + *v663;
      v667 = *(_QWORD *)(*v9 + 8 * v666);
      if (v665 <= v667 && v665 <= *v8)
      {
        v668 = *v10 + 24 * v666;
        v670 = (uint64_t **)(v668 + 8);
        v669 = *(uint64_t **)(v668 + 8);
        if (v669)
        {
          while (1)
          {
            while (1)
            {
              v671 = (uint64_t **)v669;
              v672 = *((_DWORD *)v669 + 7);
              if (v672 <= v664)
                break;
              v669 = *v671;
              v670 = v671;
              if (!*v671)
                goto LABEL_639;
            }
            if (v672 >= v664)
              break;
            v669 = v671[1];
            if (!v669)
            {
              v670 = v671 + 1;
              goto LABEL_639;
            }
          }
        }
        else
        {
          v671 = (uint64_t **)(v668 + 8);
LABEL_639:
          v673 = operator new(0x20uLL);
          v673[7] = v664;
          *(_QWORD *)v673 = 0;
          *((_QWORD *)v673 + 1) = 0;
          *((_QWORD *)v673 + 2) = v671;
          *v670 = (uint64_t *)v673;
          v674 = **(_QWORD **)v668;
          if (v674)
          {
            *(_QWORD *)v668 = v674;
            v675 = *v670;
          }
          else
          {
            v675 = (uint64_t *)v673;
          }
          result = sub_20E868578(*(uint64_t **)(v668 + 8), v675);
          ++*(_QWORD *)(v668 + 16);
          v676 = *v11 + 4 * v667;
          v677.i64[0] = 0x300000003;
          v677.i64[1] = 0x300000003;
          *(int32x4_t *)v676 = vaddq_s32(*(int32x4_t *)v676, v677);
          *(int32x2_t *)(v676 + 16) = vadd_s32(*(int32x2_t *)(v676 + 16), (int32x2_t)0x300000003);
          v8 = v1835;
        }
      }
    }
  }
  v678 = (unsigned int *)a2[16];
  if (*((_BYTE *)v678 + 20))
  {
    v679 = (unsigned int *)a2[10];
    if (*((_BYTE *)v679 + 20))
    {
      v680 = v7[2239] + *v678;
      v681 = *(_QWORD *)(*v9 + 8 * v680);
      v682 = v7[2233] + *v679;
      v683 = *(_QWORD *)(*v9 + 8 * v682);
      if (v681 <= v683 && v681 <= *v8)
      {
        v684 = *v10 + 24 * v682;
        v686 = (uint64_t **)(v684 + 8);
        v685 = *(uint64_t **)(v684 + 8);
        if (v685)
        {
          while (1)
          {
            while (1)
            {
              v687 = (uint64_t **)v685;
              v688 = *((_DWORD *)v685 + 7);
              if (v688 <= v680)
                break;
              v685 = *v687;
              v686 = v687;
              if (!*v687)
                goto LABEL_654;
            }
            if (v688 >= v680)
              break;
            v685 = v687[1];
            if (!v685)
            {
              v686 = v687 + 1;
              goto LABEL_654;
            }
          }
        }
        else
        {
          v687 = (uint64_t **)(v684 + 8);
LABEL_654:
          v689 = operator new(0x20uLL);
          v689[7] = v680;
          *(_QWORD *)v689 = 0;
          *((_QWORD *)v689 + 1) = 0;
          *((_QWORD *)v689 + 2) = v687;
          *v686 = (uint64_t *)v689;
          v690 = **(_QWORD **)v684;
          if (v690)
          {
            *(_QWORD *)v684 = v690;
            v691 = *v686;
          }
          else
          {
            v691 = (uint64_t *)v689;
          }
          result = sub_20E868578(*(uint64_t **)(v684 + 8), v691);
          ++*(_QWORD *)(v684 + 16);
          v692 = *v11 + 4 * v683;
          v693.i64[0] = 0x300000003;
          v693.i64[1] = 0x300000003;
          *(int32x4_t *)v692 = vaddq_s32(*(int32x4_t *)v692, v693);
          *(int32x2_t *)(v692 + 16) = vadd_s32(*(int32x2_t *)(v692 + 16), (int32x2_t)0x300000003);
          v8 = v1835;
        }
      }
    }
  }
  v694 = (unsigned int *)a2[17];
  if (*((_BYTE *)v694 + 20))
  {
    v695 = (unsigned int *)a2[10];
    if (*((_BYTE *)v695 + 20))
    {
      v696 = v7[2240] + *v694;
      v697 = *(_QWORD *)(*v9 + 8 * v696);
      v698 = v7[2233] + *v695;
      v699 = *(_QWORD *)(*v9 + 8 * v698);
      if (v697 <= v699 && v697 <= *v8)
      {
        v700 = *v10 + 24 * v698;
        v702 = (uint64_t **)(v700 + 8);
        v701 = *(uint64_t **)(v700 + 8);
        if (v701)
        {
          while (1)
          {
            while (1)
            {
              v703 = (uint64_t **)v701;
              v704 = *((_DWORD *)v701 + 7);
              if (v704 <= v696)
                break;
              v701 = *v703;
              v702 = v703;
              if (!*v703)
                goto LABEL_669;
            }
            if (v704 >= v696)
              break;
            v701 = v703[1];
            if (!v701)
            {
              v702 = v703 + 1;
              goto LABEL_669;
            }
          }
        }
        else
        {
          v703 = (uint64_t **)(v700 + 8);
LABEL_669:
          v705 = operator new(0x20uLL);
          v705[7] = v696;
          *(_QWORD *)v705 = 0;
          *((_QWORD *)v705 + 1) = 0;
          *((_QWORD *)v705 + 2) = v703;
          *v702 = (uint64_t *)v705;
          v706 = **(_QWORD **)v700;
          if (v706)
          {
            *(_QWORD *)v700 = v706;
            v707 = *v702;
          }
          else
          {
            v707 = (uint64_t *)v705;
          }
          result = sub_20E868578(*(uint64_t **)(v700 + 8), v707);
          ++*(_QWORD *)(v700 + 16);
          v708 = *v11 + 4 * v699;
          v709.i64[0] = 0x100000001;
          v709.i64[1] = 0x100000001;
          *(int32x4_t *)v708 = vaddq_s32(*(int32x4_t *)v708, v709);
          *(int32x2_t *)(v708 + 16) = vadd_s32(*(int32x2_t *)(v708 + 16), (int32x2_t)0x100000001);
          v8 = v1835;
        }
      }
    }
  }
  v710 = (unsigned int *)a2[7];
  v711 = (unsigned int *)a2[11];
  if (*((_BYTE *)v710 + 20))
  {
    if (*((_BYTE *)v711 + 20))
    {
      v712 = v7[2236] + *v710;
      v713 = *(_QWORD *)(*v9 + 8 * v712);
      v714 = v7[2237] + *v711;
      v715 = *(_QWORD *)(*v9 + 8 * v714);
      if (v713 <= v715 && v713 <= *v8)
      {
        v716 = *v10 + 24 * v714;
        v718 = (uint64_t **)(v716 + 8);
        v717 = *(uint64_t **)(v716 + 8);
        if (v717)
        {
          while (1)
          {
            while (1)
            {
              v719 = (uint64_t **)v717;
              v720 = *((_DWORD *)v717 + 7);
              if (v720 <= v712)
                break;
              v717 = *v719;
              v718 = v719;
              if (!*v719)
                goto LABEL_684;
            }
            if (v720 >= v712)
              break;
            v717 = v719[1];
            if (!v717)
            {
              v718 = v719 + 1;
              goto LABEL_684;
            }
          }
        }
        else
        {
          v719 = (uint64_t **)(v716 + 8);
LABEL_684:
          v721 = operator new(0x20uLL);
          v721[7] = v712;
          *(_QWORD *)v721 = 0;
          *((_QWORD *)v721 + 1) = 0;
          *((_QWORD *)v721 + 2) = v719;
          *v718 = (uint64_t *)v721;
          v722 = **(_QWORD **)v716;
          if (v722)
          {
            *(_QWORD *)v716 = v722;
            v723 = *v718;
          }
          else
          {
            v723 = (uint64_t *)v721;
          }
          result = sub_20E868578(*(uint64_t **)(v716 + 8), v723);
          v724 = *v11;
          v725 = *(int32x4_t *)(*v11 + 4 * v715);
          ++*(_QWORD *)(v716 + 16);
          v726.i64[0] = 0x600000006;
          v726.i64[1] = 0x600000006;
          *(int32x4_t *)(v724 + 4 * v715) = vaddq_s32(v725, v726);
          v711 = (unsigned int *)a2[11];
          v8 = v1835;
        }
      }
    }
  }
  v727 = (unsigned int *)a2[8];
  if (*((_BYTE *)v727 + 20))
  {
    if (*((_BYTE *)v711 + 20))
    {
      v728 = v7[2236] + *v727;
      v729 = *(_QWORD *)(*v9 + 8 * v728);
      v730 = v7[2237] + *v711;
      v731 = *(_QWORD *)(*v9 + 8 * v730);
      if (v729 <= v731 && v729 <= *v8)
      {
        v732 = *v10 + 24 * v730;
        v734 = (uint64_t **)(v732 + 8);
        v733 = *(uint64_t **)(v732 + 8);
        if (v733)
        {
          while (1)
          {
            while (1)
            {
              v735 = (uint64_t **)v733;
              v736 = *((_DWORD *)v733 + 7);
              if (v736 <= v728)
                break;
              v733 = *v735;
              v734 = v735;
              if (!*v735)
                goto LABEL_699;
            }
            if (v736 >= v728)
              break;
            v733 = v735[1];
            if (!v733)
            {
              v734 = v735 + 1;
              goto LABEL_699;
            }
          }
        }
        else
        {
          v735 = (uint64_t **)(v732 + 8);
LABEL_699:
          v737 = operator new(0x20uLL);
          v737[7] = v728;
          *(_QWORD *)v737 = 0;
          *((_QWORD *)v737 + 1) = 0;
          *((_QWORD *)v737 + 2) = v735;
          *v734 = (uint64_t *)v737;
          v738 = **(_QWORD **)v732;
          if (v738)
          {
            *(_QWORD *)v732 = v738;
            v739 = *v734;
          }
          else
          {
            v739 = (uint64_t *)v737;
          }
          result = sub_20E868578(*(uint64_t **)(v732 + 8), v739);
          v740 = *v11;
          v741 = *(int32x4_t *)(*v11 + 4 * v731);
          ++*(_QWORD *)(v732 + 16);
          v742.i64[0] = 0x600000006;
          v742.i64[1] = 0x600000006;
          *(int32x4_t *)(v740 + 4 * v731) = vaddq_s32(v741, v742);
          v711 = (unsigned int *)a2[11];
          v8 = v1835;
        }
      }
    }
  }
  v743 = (unsigned int *)a2[9];
  if (*((_BYTE *)v743 + 20))
  {
    if (*((_BYTE *)v711 + 20))
    {
      v744 = v7[2233] + *v743;
      v745 = *(_QWORD *)(*v9 + 8 * v744);
      v746 = v7[2237] + *v711;
      v747 = *(_QWORD *)(*v9 + 8 * v746);
      if (v745 <= v747 && v745 <= *v8)
      {
        v748 = *v10 + 24 * v746;
        v750 = (uint64_t **)(v748 + 8);
        v749 = *(uint64_t **)(v748 + 8);
        if (v749)
        {
          while (1)
          {
            while (1)
            {
              v751 = (uint64_t **)v749;
              v752 = *((_DWORD *)v749 + 7);
              if (v752 <= v744)
                break;
              v749 = *v751;
              v750 = v751;
              if (!*v751)
                goto LABEL_714;
            }
            if (v752 >= v744)
              break;
            v749 = v751[1];
            if (!v749)
            {
              v750 = v751 + 1;
              goto LABEL_714;
            }
          }
        }
        else
        {
          v751 = (uint64_t **)(v748 + 8);
LABEL_714:
          v753 = operator new(0x20uLL);
          v753[7] = v744;
          *(_QWORD *)v753 = 0;
          *((_QWORD *)v753 + 1) = 0;
          *((_QWORD *)v753 + 2) = v751;
          *v750 = (uint64_t *)v753;
          v754 = **(_QWORD **)v748;
          if (v754)
          {
            *(_QWORD *)v748 = v754;
            v755 = *v750;
          }
          else
          {
            v755 = (uint64_t *)v753;
          }
          result = sub_20E868578(*(uint64_t **)(v748 + 8), v755);
          v756 = *v11;
          v757 = *(int32x4_t *)(*v11 + 4 * v747);
          ++*(_QWORD *)(v748 + 16);
          v758.i64[0] = 0x600000006;
          v758.i64[1] = 0x600000006;
          *(int32x4_t *)(v756 + 4 * v747) = vaddq_s32(v757, v758);
          v711 = (unsigned int *)a2[11];
          v8 = v1835;
        }
      }
    }
  }
  v759 = (unsigned int *)a2[10];
  if (*((_BYTE *)v759 + 20))
  {
    if (*((_BYTE *)v711 + 20))
    {
      v760 = v7[2233] + *v759;
      v761 = *(_QWORD *)(*v9 + 8 * v760);
      v762 = v7[2237] + *v711;
      v763 = *(_QWORD *)(*v9 + 8 * v762);
      if (v761 <= v763 && v761 <= *v8)
      {
        v764 = *v10 + 24 * v762;
        v766 = (uint64_t **)(v764 + 8);
        v765 = *(uint64_t **)(v764 + 8);
        if (v765)
        {
          while (1)
          {
            while (1)
            {
              v767 = (uint64_t **)v765;
              v768 = *((_DWORD *)v765 + 7);
              if (v768 <= v760)
                break;
              v765 = *v767;
              v766 = v767;
              if (!*v767)
                goto LABEL_729;
            }
            if (v768 >= v760)
              break;
            v765 = v767[1];
            if (!v765)
            {
              v766 = v767 + 1;
              goto LABEL_729;
            }
          }
        }
        else
        {
          v767 = (uint64_t **)(v764 + 8);
LABEL_729:
          v769 = operator new(0x20uLL);
          v769[7] = v760;
          *(_QWORD *)v769 = 0;
          *((_QWORD *)v769 + 1) = 0;
          *((_QWORD *)v769 + 2) = v767;
          *v766 = (uint64_t *)v769;
          v770 = **(_QWORD **)v764;
          if (v770)
          {
            *(_QWORD *)v764 = v770;
            v771 = *v766;
          }
          else
          {
            v771 = (uint64_t *)v769;
          }
          result = sub_20E868578(*(uint64_t **)(v764 + 8), v771);
          v772 = *v11;
          v773 = *(int32x4_t *)(*v11 + 4 * v763);
          ++*(_QWORD *)(v764 + 16);
          v774.i64[0] = 0x600000006;
          v774.i64[1] = 0x600000006;
          *(int32x4_t *)(v772 + 4 * v763) = vaddq_s32(v773, v774);
          v711 = (unsigned int *)a2[11];
          v8 = v1835;
        }
      }
    }
  }
  if (*((_BYTE *)v711 + 20))
  {
    v775 = v7[2237] + *v711;
    v776 = *(_QWORD *)(*v9 + 8 * v775);
    if (v776 <= *v8)
    {
      v777 = *v10 + 24 * v775;
      v779 = (uint64_t **)(v777 + 8);
      v778 = *(uint64_t **)(v777 + 8);
      if (v778)
      {
        while (1)
        {
          while (1)
          {
            v780 = (uint64_t **)v778;
            v781 = *((_DWORD *)v778 + 7);
            if (v781 <= v775)
              break;
            v778 = *v780;
            v779 = v780;
            if (!*v780)
              goto LABEL_742;
          }
          if (v781 >= v775)
            break;
          v778 = v780[1];
          if (!v778)
          {
            v779 = v780 + 1;
            goto LABEL_742;
          }
        }
      }
      else
      {
        v780 = (uint64_t **)(v777 + 8);
LABEL_742:
        v782 = operator new(0x20uLL);
        v782[7] = v775;
        *(_QWORD *)v782 = 0;
        *((_QWORD *)v782 + 1) = 0;
        *((_QWORD *)v782 + 2) = v780;
        *v779 = (uint64_t *)v782;
        v783 = **(_QWORD **)v777;
        if (v783)
        {
          *(_QWORD *)v777 = v783;
          v784 = *v779;
        }
        else
        {
          v784 = (uint64_t *)v782;
        }
        result = sub_20E868578(*(uint64_t **)(v777 + 8), v784);
        ++*(_QWORD *)(v777 + 16);
        v785.i64[0] = 0x400000004;
        v785.i64[1] = 0x400000004;
        *(int32x4_t *)(*v11 + 4 * v776) = vaddq_s32(*(int32x4_t *)(*v11 + 4 * v776), v785);
        v8 = v1835;
      }
    }
  }
  v786 = (unsigned int *)a2[12];
  if (*((_BYTE *)v786 + 20))
  {
    v787 = (unsigned int *)a2[11];
    if (*((_BYTE *)v787 + 20))
    {
      v788 = v7[2237];
      v789 = v788 + *v786;
      v790 = *(_QWORD *)(*v9 + 8 * v789);
      v791 = v788 + *v787;
      v792 = *(_QWORD *)(*v9 + 8 * v791);
      if (v790 <= v792 && v790 <= *v8)
      {
        v793 = *v10 + 24 * v791;
        v795 = (uint64_t **)(v793 + 8);
        v794 = *(uint64_t **)(v793 + 8);
        if (v794)
        {
          while (1)
          {
            while (1)
            {
              v796 = (uint64_t **)v794;
              v797 = *((_DWORD *)v794 + 7);
              if (v797 <= v789)
                break;
              v794 = *v796;
              v795 = v796;
              if (!*v796)
                goto LABEL_757;
            }
            if (v797 >= v789)
              break;
            v794 = v796[1];
            if (!v794)
            {
              v795 = v796 + 1;
              goto LABEL_757;
            }
          }
        }
        else
        {
          v796 = (uint64_t **)(v793 + 8);
LABEL_757:
          v798 = operator new(0x20uLL);
          v798[7] = v789;
          *(_QWORD *)v798 = 0;
          *((_QWORD *)v798 + 1) = 0;
          *((_QWORD *)v798 + 2) = v796;
          *v795 = (uint64_t *)v798;
          v799 = **(_QWORD **)v793;
          if (v799)
          {
            *(_QWORD *)v793 = v799;
            v800 = *v795;
          }
          else
          {
            v800 = (uint64_t *)v798;
          }
          result = sub_20E868578(*(uint64_t **)(v793 + 8), v800);
          ++*(_QWORD *)(v793 + 16);
          v801.i64[0] = 0x400000004;
          v801.i64[1] = 0x400000004;
          *(int32x4_t *)(*v11 + 4 * v792) = vaddq_s32(*(int32x4_t *)(*v11 + 4 * v792), v801);
          v8 = v1835;
        }
      }
    }
  }
  v802 = (unsigned int *)a2[13];
  if (*((_BYTE *)v802 + 20))
  {
    v803 = (unsigned int *)a2[11];
    if (*((_BYTE *)v803 + 20))
    {
      v804 = v7[2238] + *v802;
      v805 = *(_QWORD *)(*v9 + 8 * v804);
      v806 = v7[2237] + *v803;
      v807 = *(_QWORD *)(*v9 + 8 * v806);
      if (v805 <= v807 && v805 <= *v8)
      {
        v808 = *v10 + 24 * v806;
        v810 = (uint64_t **)(v808 + 8);
        v809 = *(uint64_t **)(v808 + 8);
        if (v809)
        {
          while (1)
          {
            while (1)
            {
              v811 = (uint64_t **)v809;
              v812 = *((_DWORD *)v809 + 7);
              if (v812 <= v804)
                break;
              v809 = *v811;
              v810 = v811;
              if (!*v811)
                goto LABEL_772;
            }
            if (v812 >= v804)
              break;
            v809 = v811[1];
            if (!v809)
            {
              v810 = v811 + 1;
              goto LABEL_772;
            }
          }
        }
        else
        {
          v811 = (uint64_t **)(v808 + 8);
LABEL_772:
          v813 = operator new(0x20uLL);
          v813[7] = v804;
          *(_QWORD *)v813 = 0;
          *((_QWORD *)v813 + 1) = 0;
          *((_QWORD *)v813 + 2) = v811;
          *v810 = (uint64_t *)v813;
          v814 = **(_QWORD **)v808;
          if (v814)
          {
            *(_QWORD *)v808 = v814;
            v815 = *v810;
          }
          else
          {
            v815 = (uint64_t *)v813;
          }
          result = sub_20E868578(*(uint64_t **)(v808 + 8), v815);
          ++*(_QWORD *)(v808 + 16);
          v816.i64[0] = 0x400000004;
          v816.i64[1] = 0x400000004;
          *(int32x4_t *)(*v11 + 4 * v807) = vaddq_s32(*(int32x4_t *)(*v11 + 4 * v807), v816);
          v8 = v1835;
        }
      }
    }
  }
  v817 = (unsigned int *)a2[14];
  if (*((_BYTE *)v817 + 20))
  {
    v818 = (unsigned int *)a2[11];
    if (*((_BYTE *)v818 + 20))
    {
      v819 = v7[2238] + *v817;
      v820 = *(_QWORD *)(*v9 + 8 * v819);
      v821 = v7[2237] + *v818;
      v822 = *(_QWORD *)(*v9 + 8 * v821);
      if (v820 <= v822 && v820 <= *v8)
      {
        v823 = *v10 + 24 * v821;
        v825 = (uint64_t **)(v823 + 8);
        v824 = *(uint64_t **)(v823 + 8);
        if (v824)
        {
          while (1)
          {
            while (1)
            {
              v826 = (uint64_t **)v824;
              v827 = *((_DWORD *)v824 + 7);
              if (v827 <= v819)
                break;
              v824 = *v826;
              v825 = v826;
              if (!*v826)
                goto LABEL_787;
            }
            if (v827 >= v819)
              break;
            v824 = v826[1];
            if (!v824)
            {
              v825 = v826 + 1;
              goto LABEL_787;
            }
          }
        }
        else
        {
          v826 = (uint64_t **)(v823 + 8);
LABEL_787:
          v828 = operator new(0x20uLL);
          v828[7] = v819;
          *(_QWORD *)v828 = 0;
          *((_QWORD *)v828 + 1) = 0;
          *((_QWORD *)v828 + 2) = v826;
          *v825 = (uint64_t *)v828;
          v829 = **(_QWORD **)v823;
          if (v829)
          {
            *(_QWORD *)v823 = v829;
            v830 = *v825;
          }
          else
          {
            v830 = (uint64_t *)v828;
          }
          result = sub_20E868578(*(uint64_t **)(v823 + 8), v830);
          ++*(_QWORD *)(v823 + 16);
          v831.i64[0] = 0x400000004;
          v831.i64[1] = 0x400000004;
          *(int32x4_t *)(*v11 + 4 * v822) = vaddq_s32(*(int32x4_t *)(*v11 + 4 * v822), v831);
          v8 = v1835;
        }
      }
    }
  }
  v832 = (unsigned int *)a2[15];
  if (*((_BYTE *)v832 + 20))
  {
    v833 = (unsigned int *)a2[11];
    if (*((_BYTE *)v833 + 20))
    {
      v834 = v7[2239] + *v832;
      v835 = *(_QWORD *)(*v9 + 8 * v834);
      v836 = v7[2237] + *v833;
      v837 = *(_QWORD *)(*v9 + 8 * v836);
      if (v835 <= v837 && v835 <= *v8)
      {
        v838 = *v10 + 24 * v836;
        v840 = (uint64_t **)(v838 + 8);
        v839 = *(uint64_t **)(v838 + 8);
        if (v839)
        {
          while (1)
          {
            while (1)
            {
              v841 = (uint64_t **)v839;
              v842 = *((_DWORD *)v839 + 7);
              if (v842 <= v834)
                break;
              v839 = *v841;
              v840 = v841;
              if (!*v841)
                goto LABEL_802;
            }
            if (v842 >= v834)
              break;
            v839 = v841[1];
            if (!v839)
            {
              v840 = v841 + 1;
              goto LABEL_802;
            }
          }
        }
        else
        {
          v841 = (uint64_t **)(v838 + 8);
LABEL_802:
          v843 = operator new(0x20uLL);
          v843[7] = v834;
          *(_QWORD *)v843 = 0;
          *((_QWORD *)v843 + 1) = 0;
          *((_QWORD *)v843 + 2) = v841;
          *v840 = (uint64_t *)v843;
          v844 = **(_QWORD **)v838;
          if (v844)
          {
            *(_QWORD *)v838 = v844;
            v845 = *v840;
          }
          else
          {
            v845 = (uint64_t *)v843;
          }
          result = sub_20E868578(*(uint64_t **)(v838 + 8), v845);
          ++*(_QWORD *)(v838 + 16);
          v846.i64[0] = 0x300000003;
          v846.i64[1] = 0x300000003;
          *(int32x4_t *)(*v11 + 4 * v837) = vaddq_s32(*(int32x4_t *)(*v11 + 4 * v837), v846);
          v8 = v1835;
        }
      }
    }
  }
  v847 = (unsigned int *)a2[16];
  if (*((_BYTE *)v847 + 20))
  {
    v848 = (unsigned int *)a2[11];
    if (*((_BYTE *)v848 + 20))
    {
      v849 = v7[2239] + *v847;
      v850 = *(_QWORD *)(*v9 + 8 * v849);
      v851 = v7[2237] + *v848;
      v852 = *(_QWORD *)(*v9 + 8 * v851);
      if (v850 <= v852 && v850 <= *v8)
      {
        v853 = *v10 + 24 * v851;
        v855 = (uint64_t **)(v853 + 8);
        v854 = *(uint64_t **)(v853 + 8);
        if (v854)
        {
          while (1)
          {
            while (1)
            {
              v856 = (uint64_t **)v854;
              v857 = *((_DWORD *)v854 + 7);
              if (v857 <= v849)
                break;
              v854 = *v856;
              v855 = v856;
              if (!*v856)
                goto LABEL_817;
            }
            if (v857 >= v849)
              break;
            v854 = v856[1];
            if (!v854)
            {
              v855 = v856 + 1;
              goto LABEL_817;
            }
          }
        }
        else
        {
          v856 = (uint64_t **)(v853 + 8);
LABEL_817:
          v858 = operator new(0x20uLL);
          v858[7] = v849;
          *(_QWORD *)v858 = 0;
          *((_QWORD *)v858 + 1) = 0;
          *((_QWORD *)v858 + 2) = v856;
          *v855 = (uint64_t *)v858;
          v859 = **(_QWORD **)v853;
          if (v859)
          {
            *(_QWORD *)v853 = v859;
            v860 = *v855;
          }
          else
          {
            v860 = (uint64_t *)v858;
          }
          result = sub_20E868578(*(uint64_t **)(v853 + 8), v860);
          ++*(_QWORD *)(v853 + 16);
          v861.i64[0] = 0x300000003;
          v861.i64[1] = 0x300000003;
          *(int32x4_t *)(*v11 + 4 * v852) = vaddq_s32(*(int32x4_t *)(*v11 + 4 * v852), v861);
          v8 = v1835;
        }
      }
    }
  }
  v862 = (unsigned int *)a2[17];
  if (*((_BYTE *)v862 + 20))
  {
    v863 = (unsigned int *)a2[11];
    if (*((_BYTE *)v863 + 20))
    {
      v864 = v7[2240] + *v862;
      v865 = *(_QWORD *)(*v9 + 8 * v864);
      v866 = v7[2237] + *v863;
      v867 = *(_QWORD *)(*v9 + 8 * v866);
      if (v865 <= v867 && v865 <= *v8)
      {
        v868 = *v10 + 24 * v866;
        v870 = (uint64_t **)(v868 + 8);
        v869 = *(uint64_t **)(v868 + 8);
        if (v869)
        {
          while (1)
          {
            while (1)
            {
              v871 = (uint64_t **)v869;
              v872 = *((_DWORD *)v869 + 7);
              if (v872 <= v864)
                break;
              v869 = *v871;
              v870 = v871;
              if (!*v871)
                goto LABEL_832;
            }
            if (v872 >= v864)
              break;
            v869 = v871[1];
            if (!v869)
            {
              v870 = v871 + 1;
              goto LABEL_832;
            }
          }
        }
        else
        {
          v871 = (uint64_t **)(v868 + 8);
LABEL_832:
          v873 = operator new(0x20uLL);
          v873[7] = v864;
          *(_QWORD *)v873 = 0;
          *((_QWORD *)v873 + 1) = 0;
          *((_QWORD *)v873 + 2) = v871;
          *v870 = (uint64_t *)v873;
          v874 = **(_QWORD **)v868;
          if (v874)
          {
            *(_QWORD *)v868 = v874;
            v875 = *v870;
          }
          else
          {
            v875 = (uint64_t *)v873;
          }
          result = sub_20E868578(*(uint64_t **)(v868 + 8), v875);
          ++*(_QWORD *)(v868 + 16);
          v876.i64[0] = 0x100000001;
          v876.i64[1] = 0x100000001;
          *(int32x4_t *)(*v11 + 4 * v867) = vaddq_s32(*(int32x4_t *)(*v11 + 4 * v867), v876);
          v8 = v1835;
        }
      }
    }
  }
  v877 = (unsigned int *)a2[7];
  v878 = (unsigned int *)a2[12];
  if (*((_BYTE *)v877 + 20))
  {
    if (*((_BYTE *)v878 + 20))
    {
      v879 = v7[2236] + *v877;
      v880 = *(_QWORD *)(*v9 + 8 * v879);
      v881 = v7[2237] + *v878;
      v882 = *(_QWORD *)(*v9 + 8 * v881);
      if (v880 <= v882 && v880 <= *v8)
      {
        v883 = *v10 + 24 * v881;
        v885 = (uint64_t **)(v883 + 8);
        v884 = *(uint64_t **)(v883 + 8);
        if (v884)
        {
          while (1)
          {
            while (1)
            {
              v886 = (uint64_t **)v884;
              v887 = *((_DWORD *)v884 + 7);
              if (v887 <= v879)
                break;
              v884 = *v886;
              v885 = v886;
              if (!*v886)
                goto LABEL_847;
            }
            if (v887 >= v879)
              break;
            v884 = v886[1];
            if (!v884)
            {
              v885 = v886 + 1;
              goto LABEL_847;
            }
          }
        }
        else
        {
          v886 = (uint64_t **)(v883 + 8);
LABEL_847:
          v888 = operator new(0x20uLL);
          v888[7] = v879;
          *(_QWORD *)v888 = 0;
          *((_QWORD *)v888 + 1) = 0;
          *((_QWORD *)v888 + 2) = v886;
          *v885 = (uint64_t *)v888;
          v889 = **(_QWORD **)v883;
          if (v889)
          {
            *(_QWORD *)v883 = v889;
            v890 = *v885;
          }
          else
          {
            v890 = (uint64_t *)v888;
          }
          result = sub_20E868578(*(uint64_t **)(v883 + 8), v890);
          v891 = *v11;
          v892 = *(int32x4_t *)(*v11 + 4 * v882);
          ++*(_QWORD *)(v883 + 16);
          v893.i64[0] = 0x600000006;
          v893.i64[1] = 0x600000006;
          *(int32x4_t *)(v891 + 4 * v882) = vaddq_s32(v892, v893);
          v878 = (unsigned int *)a2[12];
          v8 = v1835;
        }
      }
    }
  }
  v894 = (unsigned int *)a2[8];
  if (*((_BYTE *)v894 + 20))
  {
    if (*((_BYTE *)v878 + 20))
    {
      v895 = v7[2236] + *v894;
      v896 = *(_QWORD *)(*v9 + 8 * v895);
      v897 = v7[2237] + *v878;
      v898 = *(_QWORD *)(*v9 + 8 * v897);
      if (v896 <= v898 && v896 <= *v8)
      {
        v899 = *v10 + 24 * v897;
        v901 = (uint64_t **)(v899 + 8);
        v900 = *(uint64_t **)(v899 + 8);
        if (v900)
        {
          while (1)
          {
            while (1)
            {
              v902 = (uint64_t **)v900;
              v903 = *((_DWORD *)v900 + 7);
              if (v903 <= v895)
                break;
              v900 = *v902;
              v901 = v902;
              if (!*v902)
                goto LABEL_862;
            }
            if (v903 >= v895)
              break;
            v900 = v902[1];
            if (!v900)
            {
              v901 = v902 + 1;
              goto LABEL_862;
            }
          }
        }
        else
        {
          v902 = (uint64_t **)(v899 + 8);
LABEL_862:
          v904 = operator new(0x20uLL);
          v904[7] = v895;
          *(_QWORD *)v904 = 0;
          *((_QWORD *)v904 + 1) = 0;
          *((_QWORD *)v904 + 2) = v902;
          *v901 = (uint64_t *)v904;
          v905 = **(_QWORD **)v899;
          if (v905)
          {
            *(_QWORD *)v899 = v905;
            v906 = *v901;
          }
          else
          {
            v906 = (uint64_t *)v904;
          }
          result = sub_20E868578(*(uint64_t **)(v899 + 8), v906);
          v907 = *v11;
          v908 = *(int32x4_t *)(*v11 + 4 * v898);
          ++*(_QWORD *)(v899 + 16);
          v909.i64[0] = 0x600000006;
          v909.i64[1] = 0x600000006;
          *(int32x4_t *)(v907 + 4 * v898) = vaddq_s32(v908, v909);
          v878 = (unsigned int *)a2[12];
          v8 = v1835;
        }
      }
    }
  }
  v910 = (unsigned int *)a2[9];
  if (*((_BYTE *)v910 + 20))
  {
    if (*((_BYTE *)v878 + 20))
    {
      v911 = v7[2233] + *v910;
      v912 = *(_QWORD *)(*v9 + 8 * v911);
      v913 = v7[2237] + *v878;
      v914 = *(_QWORD *)(*v9 + 8 * v913);
      if (v912 <= v914 && v912 <= *v8)
      {
        v915 = *v10 + 24 * v913;
        v917 = (uint64_t **)(v915 + 8);
        v916 = *(uint64_t **)(v915 + 8);
        if (v916)
        {
          while (1)
          {
            while (1)
            {
              v918 = (uint64_t **)v916;
              v919 = *((_DWORD *)v916 + 7);
              if (v919 <= v911)
                break;
              v916 = *v918;
              v917 = v918;
              if (!*v918)
                goto LABEL_877;
            }
            if (v919 >= v911)
              break;
            v916 = v918[1];
            if (!v916)
            {
              v917 = v918 + 1;
              goto LABEL_877;
            }
          }
        }
        else
        {
          v918 = (uint64_t **)(v915 + 8);
LABEL_877:
          v920 = operator new(0x20uLL);
          v920[7] = v911;
          *(_QWORD *)v920 = 0;
          *((_QWORD *)v920 + 1) = 0;
          *((_QWORD *)v920 + 2) = v918;
          *v917 = (uint64_t *)v920;
          v921 = **(_QWORD **)v915;
          if (v921)
          {
            *(_QWORD *)v915 = v921;
            v922 = *v917;
          }
          else
          {
            v922 = (uint64_t *)v920;
          }
          result = sub_20E868578(*(uint64_t **)(v915 + 8), v922);
          v923 = *v11;
          v924 = *(int32x4_t *)(*v11 + 4 * v914);
          ++*(_QWORD *)(v915 + 16);
          v925.i64[0] = 0x600000006;
          v925.i64[1] = 0x600000006;
          *(int32x4_t *)(v923 + 4 * v914) = vaddq_s32(v924, v925);
          v878 = (unsigned int *)a2[12];
          v8 = v1835;
        }
      }
    }
  }
  v926 = (unsigned int *)a2[10];
  if (*((_BYTE *)v926 + 20))
  {
    if (*((_BYTE *)v878 + 20))
    {
      v927 = v7[2233] + *v926;
      v928 = *(_QWORD *)(*v9 + 8 * v927);
      v929 = v7[2237] + *v878;
      v930 = *(_QWORD *)(*v9 + 8 * v929);
      if (v928 <= v930 && v928 <= *v8)
      {
        v931 = *v10 + 24 * v929;
        v933 = (uint64_t **)(v931 + 8);
        v932 = *(uint64_t **)(v931 + 8);
        if (v932)
        {
          while (1)
          {
            while (1)
            {
              v934 = (uint64_t **)v932;
              v935 = *((_DWORD *)v932 + 7);
              if (v935 <= v927)
                break;
              v932 = *v934;
              v933 = v934;
              if (!*v934)
                goto LABEL_892;
            }
            if (v935 >= v927)
              break;
            v932 = v934[1];
            if (!v932)
            {
              v933 = v934 + 1;
              goto LABEL_892;
            }
          }
        }
        else
        {
          v934 = (uint64_t **)(v931 + 8);
LABEL_892:
          v936 = operator new(0x20uLL);
          v936[7] = v927;
          *(_QWORD *)v936 = 0;
          *((_QWORD *)v936 + 1) = 0;
          *((_QWORD *)v936 + 2) = v934;
          *v933 = (uint64_t *)v936;
          v937 = **(_QWORD **)v931;
          if (v937)
          {
            *(_QWORD *)v931 = v937;
            v938 = *v933;
          }
          else
          {
            v938 = (uint64_t *)v936;
          }
          result = sub_20E868578(*(uint64_t **)(v931 + 8), v938);
          v939 = *v11;
          v940 = *(int32x4_t *)(*v11 + 4 * v930);
          ++*(_QWORD *)(v931 + 16);
          v941.i64[0] = 0x600000006;
          v941.i64[1] = 0x600000006;
          *(int32x4_t *)(v939 + 4 * v930) = vaddq_s32(v940, v941);
          v878 = (unsigned int *)a2[12];
          v8 = v1835;
        }
      }
    }
  }
  v942 = (unsigned int *)a2[11];
  if (*((_BYTE *)v942 + 20))
  {
    if (*((_BYTE *)v878 + 20))
    {
      v943 = v7[2237];
      v944 = v943 + *v942;
      v945 = *(_QWORD *)(*v9 + 8 * v944);
      v946 = v943 + *v878;
      v947 = *(_QWORD *)(*v9 + 8 * v946);
      if (v945 <= v947 && v945 <= *v8)
      {
        v948 = *v10 + 24 * v946;
        v950 = (uint64_t **)(v948 + 8);
        v949 = *(uint64_t **)(v948 + 8);
        if (v949)
        {
          while (1)
          {
            while (1)
            {
              v951 = (uint64_t **)v949;
              v952 = *((_DWORD *)v949 + 7);
              if (v952 <= v944)
                break;
              v949 = *v951;
              v950 = v951;
              if (!*v951)
                goto LABEL_907;
            }
            if (v952 >= v944)
              break;
            v949 = v951[1];
            if (!v949)
            {
              v950 = v951 + 1;
              goto LABEL_907;
            }
          }
        }
        else
        {
          v951 = (uint64_t **)(v948 + 8);
LABEL_907:
          v953 = operator new(0x20uLL);
          v953[7] = v944;
          *(_QWORD *)v953 = 0;
          *((_QWORD *)v953 + 1) = 0;
          *((_QWORD *)v953 + 2) = v951;
          *v950 = (uint64_t *)v953;
          v954 = **(_QWORD **)v948;
          if (v954)
          {
            *(_QWORD *)v948 = v954;
            v955 = *v950;
          }
          else
          {
            v955 = (uint64_t *)v953;
          }
          result = sub_20E868578(*(uint64_t **)(v948 + 8), v955);
          v956 = *v11;
          v957 = *(int32x4_t *)(*v11 + 4 * v947);
          ++*(_QWORD *)(v948 + 16);
          v958.i64[0] = 0x400000004;
          v958.i64[1] = 0x400000004;
          *(int32x4_t *)(v956 + 4 * v947) = vaddq_s32(v957, v958);
          v878 = (unsigned int *)a2[12];
          v8 = v1835;
        }
      }
    }
  }
  if (*((_BYTE *)v878 + 20))
  {
    v959 = v7[2237] + *v878;
    v960 = *(_QWORD *)(*v9 + 8 * v959);
    if (v960 <= *v8)
    {
      v961 = *v10 + 24 * v959;
      v963 = (uint64_t **)(v961 + 8);
      v962 = *(uint64_t **)(v961 + 8);
      if (v962)
      {
        while (1)
        {
          while (1)
          {
            v964 = (uint64_t **)v962;
            v965 = *((_DWORD *)v962 + 7);
            if (v965 <= v959)
              break;
            v962 = *v964;
            v963 = v964;
            if (!*v964)
              goto LABEL_920;
          }
          if (v965 >= v959)
            break;
          v962 = v964[1];
          if (!v962)
          {
            v963 = v964 + 1;
            goto LABEL_920;
          }
        }
      }
      else
      {
        v964 = (uint64_t **)(v961 + 8);
LABEL_920:
        v966 = operator new(0x20uLL);
        v966[7] = v959;
        *(_QWORD *)v966 = 0;
        *((_QWORD *)v966 + 1) = 0;
        *((_QWORD *)v966 + 2) = v964;
        *v963 = (uint64_t *)v966;
        v967 = **(_QWORD **)v961;
        if (v967)
        {
          *(_QWORD *)v961 = v967;
          v968 = *v963;
        }
        else
        {
          v968 = (uint64_t *)v966;
        }
        result = sub_20E868578(*(uint64_t **)(v961 + 8), v968);
        ++*(_QWORD *)(v961 + 16);
        v969.i64[0] = 0x400000004;
        v969.i64[1] = 0x400000004;
        *(int32x4_t *)(*v11 + 4 * v960) = vaddq_s32(*(int32x4_t *)(*v11 + 4 * v960), v969);
        v8 = v1835;
      }
    }
  }
  v970 = (unsigned int *)a2[13];
  if (*((_BYTE *)v970 + 20))
  {
    v971 = (unsigned int *)a2[12];
    if (*((_BYTE *)v971 + 20))
    {
      v972 = v7[2238] + *v970;
      v973 = *(_QWORD *)(*v9 + 8 * v972);
      v974 = v7[2237] + *v971;
      v975 = *(_QWORD *)(*v9 + 8 * v974);
      if (v973 <= v975 && v973 <= *v8)
      {
        v976 = *v10 + 24 * v974;
        v978 = (uint64_t **)(v976 + 8);
        v977 = *(uint64_t **)(v976 + 8);
        if (v977)
        {
          while (1)
          {
            while (1)
            {
              v979 = (uint64_t **)v977;
              v980 = *((_DWORD *)v977 + 7);
              if (v980 <= v972)
                break;
              v977 = *v979;
              v978 = v979;
              if (!*v979)
                goto LABEL_935;
            }
            if (v980 >= v972)
              break;
            v977 = v979[1];
            if (!v977)
            {
              v978 = v979 + 1;
              goto LABEL_935;
            }
          }
        }
        else
        {
          v979 = (uint64_t **)(v976 + 8);
LABEL_935:
          v981 = operator new(0x20uLL);
          v981[7] = v972;
          *(_QWORD *)v981 = 0;
          *((_QWORD *)v981 + 1) = 0;
          *((_QWORD *)v981 + 2) = v979;
          *v978 = (uint64_t *)v981;
          v982 = **(_QWORD **)v976;
          if (v982)
          {
            *(_QWORD *)v976 = v982;
            v983 = *v978;
          }
          else
          {
            v983 = (uint64_t *)v981;
          }
          result = sub_20E868578(*(uint64_t **)(v976 + 8), v983);
          ++*(_QWORD *)(v976 + 16);
          v984.i64[0] = 0x400000004;
          v984.i64[1] = 0x400000004;
          *(int32x4_t *)(*v11 + 4 * v975) = vaddq_s32(*(int32x4_t *)(*v11 + 4 * v975), v984);
          v8 = v1835;
        }
      }
    }
  }
  v985 = (unsigned int *)a2[14];
  if (*((_BYTE *)v985 + 20))
  {
    v986 = (unsigned int *)a2[12];
    if (*((_BYTE *)v986 + 20))
    {
      v987 = v7[2238] + *v985;
      v988 = *(_QWORD *)(*v9 + 8 * v987);
      v989 = v7[2237] + *v986;
      v990 = *(_QWORD *)(*v9 + 8 * v989);
      if (v988 <= v990 && v988 <= *v8)
      {
        v991 = *v10 + 24 * v989;
        v993 = (uint64_t **)(v991 + 8);
        v992 = *(uint64_t **)(v991 + 8);
        if (v992)
        {
          while (1)
          {
            while (1)
            {
              v994 = (uint64_t **)v992;
              v995 = *((_DWORD *)v992 + 7);
              if (v995 <= v987)
                break;
              v992 = *v994;
              v993 = v994;
              if (!*v994)
                goto LABEL_950;
            }
            if (v995 >= v987)
              break;
            v992 = v994[1];
            if (!v992)
            {
              v993 = v994 + 1;
              goto LABEL_950;
            }
          }
        }
        else
        {
          v994 = (uint64_t **)(v991 + 8);
LABEL_950:
          v996 = operator new(0x20uLL);
          v996[7] = v987;
          *(_QWORD *)v996 = 0;
          *((_QWORD *)v996 + 1) = 0;
          *((_QWORD *)v996 + 2) = v994;
          *v993 = (uint64_t *)v996;
          v997 = **(_QWORD **)v991;
          if (v997)
          {
            *(_QWORD *)v991 = v997;
            v998 = *v993;
          }
          else
          {
            v998 = (uint64_t *)v996;
          }
          result = sub_20E868578(*(uint64_t **)(v991 + 8), v998);
          ++*(_QWORD *)(v991 + 16);
          v999.i64[0] = 0x400000004;
          v999.i64[1] = 0x400000004;
          *(int32x4_t *)(*v11 + 4 * v990) = vaddq_s32(*(int32x4_t *)(*v11 + 4 * v990), v999);
          v8 = v1835;
        }
      }
    }
  }
  v1000 = (unsigned int *)a2[15];
  if (*((_BYTE *)v1000 + 20))
  {
    v1001 = (unsigned int *)a2[12];
    if (*((_BYTE *)v1001 + 20))
    {
      v1002 = v7[2239] + *v1000;
      v1003 = *(_QWORD *)(*v9 + 8 * v1002);
      v1004 = v7[2237] + *v1001;
      v1005 = *(_QWORD *)(*v9 + 8 * v1004);
      if (v1003 <= v1005 && v1003 <= *v8)
      {
        v1006 = *v10 + 24 * v1004;
        v1008 = (uint64_t **)(v1006 + 8);
        v1007 = *(uint64_t **)(v1006 + 8);
        if (v1007)
        {
          while (1)
          {
            while (1)
            {
              v1009 = (uint64_t **)v1007;
              v1010 = *((_DWORD *)v1007 + 7);
              if (v1010 <= v1002)
                break;
              v1007 = *v1009;
              v1008 = v1009;
              if (!*v1009)
                goto LABEL_965;
            }
            if (v1010 >= v1002)
              break;
            v1007 = v1009[1];
            if (!v1007)
            {
              v1008 = v1009 + 1;
              goto LABEL_965;
            }
          }
        }
        else
        {
          v1009 = (uint64_t **)(v1006 + 8);
LABEL_965:
          v1011 = operator new(0x20uLL);
          v1011[7] = v1002;
          *(_QWORD *)v1011 = 0;
          *((_QWORD *)v1011 + 1) = 0;
          *((_QWORD *)v1011 + 2) = v1009;
          *v1008 = (uint64_t *)v1011;
          v1012 = **(_QWORD **)v1006;
          if (v1012)
          {
            *(_QWORD *)v1006 = v1012;
            v1013 = *v1008;
          }
          else
          {
            v1013 = (uint64_t *)v1011;
          }
          result = sub_20E868578(*(uint64_t **)(v1006 + 8), v1013);
          ++*(_QWORD *)(v1006 + 16);
          v1014.i64[0] = 0x300000003;
          v1014.i64[1] = 0x300000003;
          *(int32x4_t *)(*v11 + 4 * v1005) = vaddq_s32(*(int32x4_t *)(*v11 + 4 * v1005), v1014);
          v8 = v1835;
        }
      }
    }
  }
  v1015 = (unsigned int *)a2[16];
  if (*((_BYTE *)v1015 + 20))
  {
    v1016 = (unsigned int *)a2[12];
    if (*((_BYTE *)v1016 + 20))
    {
      v1017 = v7[2239] + *v1015;
      v1018 = *(_QWORD *)(*v9 + 8 * v1017);
      v1019 = v7[2237] + *v1016;
      v1020 = *(_QWORD *)(*v9 + 8 * v1019);
      if (v1018 <= v1020 && v1018 <= *v8)
      {
        v1021 = *v10 + 24 * v1019;
        v1023 = (uint64_t **)(v1021 + 8);
        v1022 = *(uint64_t **)(v1021 + 8);
        if (v1022)
        {
          while (1)
          {
            while (1)
            {
              v1024 = (uint64_t **)v1022;
              v1025 = *((_DWORD *)v1022 + 7);
              if (v1025 <= v1017)
                break;
              v1022 = *v1024;
              v1023 = v1024;
              if (!*v1024)
                goto LABEL_980;
            }
            if (v1025 >= v1017)
              break;
            v1022 = v1024[1];
            if (!v1022)
            {
              v1023 = v1024 + 1;
              goto LABEL_980;
            }
          }
        }
        else
        {
          v1024 = (uint64_t **)(v1021 + 8);
LABEL_980:
          v1026 = operator new(0x20uLL);
          v1026[7] = v1017;
          *(_QWORD *)v1026 = 0;
          *((_QWORD *)v1026 + 1) = 0;
          *((_QWORD *)v1026 + 2) = v1024;
          *v1023 = (uint64_t *)v1026;
          v1027 = **(_QWORD **)v1021;
          if (v1027)
          {
            *(_QWORD *)v1021 = v1027;
            v1028 = *v1023;
          }
          else
          {
            v1028 = (uint64_t *)v1026;
          }
          result = sub_20E868578(*(uint64_t **)(v1021 + 8), v1028);
          ++*(_QWORD *)(v1021 + 16);
          v1029.i64[0] = 0x300000003;
          v1029.i64[1] = 0x300000003;
          *(int32x4_t *)(*v11 + 4 * v1020) = vaddq_s32(*(int32x4_t *)(*v11 + 4 * v1020), v1029);
          v8 = v1835;
        }
      }
    }
  }
  v1030 = (unsigned int *)a2[17];
  if (*((_BYTE *)v1030 + 20))
  {
    v1031 = (unsigned int *)a2[12];
    if (*((_BYTE *)v1031 + 20))
    {
      v1032 = v7[2240] + *v1030;
      v1033 = *(_QWORD *)(*v9 + 8 * v1032);
      v1034 = v7[2237] + *v1031;
      v1035 = *(_QWORD *)(*v9 + 8 * v1034);
      if (v1033 <= v1035 && v1033 <= *v8)
      {
        v1036 = *v10 + 24 * v1034;
        v1038 = (uint64_t **)(v1036 + 8);
        v1037 = *(uint64_t **)(v1036 + 8);
        if (v1037)
        {
          while (1)
          {
            while (1)
            {
              v1039 = (uint64_t **)v1037;
              v1040 = *((_DWORD *)v1037 + 7);
              if (v1040 <= v1032)
                break;
              v1037 = *v1039;
              v1038 = v1039;
              if (!*v1039)
                goto LABEL_995;
            }
            if (v1040 >= v1032)
              break;
            v1037 = v1039[1];
            if (!v1037)
            {
              v1038 = v1039 + 1;
              goto LABEL_995;
            }
          }
        }
        else
        {
          v1039 = (uint64_t **)(v1036 + 8);
LABEL_995:
          v1041 = operator new(0x20uLL);
          v1041[7] = v1032;
          *(_QWORD *)v1041 = 0;
          *((_QWORD *)v1041 + 1) = 0;
          *((_QWORD *)v1041 + 2) = v1039;
          *v1038 = (uint64_t *)v1041;
          v1042 = **(_QWORD **)v1036;
          if (v1042)
          {
            *(_QWORD *)v1036 = v1042;
            v1043 = *v1038;
          }
          else
          {
            v1043 = (uint64_t *)v1041;
          }
          result = sub_20E868578(*(uint64_t **)(v1036 + 8), v1043);
          ++*(_QWORD *)(v1036 + 16);
          v1044.i64[0] = 0x100000001;
          v1044.i64[1] = 0x100000001;
          *(int32x4_t *)(*v11 + 4 * v1035) = vaddq_s32(*(int32x4_t *)(*v11 + 4 * v1035), v1044);
          v8 = v1835;
        }
      }
    }
  }
  v1045 = (unsigned int *)a2[7];
  v1046 = (unsigned int *)a2[13];
  if (*((_BYTE *)v1045 + 20))
  {
    if (*((_BYTE *)v1046 + 20))
    {
      v1047 = v7[2236] + *v1045;
      v1048 = *(_QWORD *)(*v9 + 8 * v1047);
      v1049 = v7[2238] + *v1046;
      v1050 = *(_QWORD *)(*v9 + 8 * v1049);
      if (v1048 <= v1050 && v1048 <= *v8)
      {
        v1051 = *v10 + 24 * v1049;
        v1053 = (uint64_t **)(v1051 + 8);
        v1052 = *(uint64_t **)(v1051 + 8);
        if (v1052)
        {
          while (1)
          {
            while (1)
            {
              v1054 = (uint64_t **)v1052;
              v1055 = *((_DWORD *)v1052 + 7);
              if (v1055 <= v1047)
                break;
              v1052 = *v1054;
              v1053 = v1054;
              if (!*v1054)
                goto LABEL_1010;
            }
            if (v1055 >= v1047)
              break;
            v1052 = v1054[1];
            if (!v1052)
            {
              v1053 = v1054 + 1;
              goto LABEL_1010;
            }
          }
        }
        else
        {
          v1054 = (uint64_t **)(v1051 + 8);
LABEL_1010:
          v1056 = operator new(0x20uLL);
          v1056[7] = v1047;
          *(_QWORD *)v1056 = 0;
          *((_QWORD *)v1056 + 1) = 0;
          *((_QWORD *)v1056 + 2) = v1054;
          *v1053 = (uint64_t *)v1056;
          v1057 = **(_QWORD **)v1051;
          if (v1057)
          {
            *(_QWORD *)v1051 = v1057;
            v1058 = *v1053;
          }
          else
          {
            v1058 = (uint64_t *)v1056;
          }
          result = sub_20E868578(*(uint64_t **)(v1051 + 8), v1058);
          v1059 = *v11;
          v1060 = *(int32x4_t *)(*v11 + 4 * v1050);
          ++*(_QWORD *)(v1051 + 16);
          v1061.i64[0] = 0x600000006;
          v1061.i64[1] = 0x600000006;
          *(int32x4_t *)(v1059 + 4 * v1050) = vaddq_s32(v1060, v1061);
          v1046 = (unsigned int *)a2[13];
          v8 = v1835;
        }
      }
    }
  }
  v1062 = (unsigned int *)a2[8];
  if (*((_BYTE *)v1062 + 20))
  {
    if (*((_BYTE *)v1046 + 20))
    {
      v1063 = v7[2236] + *v1062;
      v1064 = *(_QWORD *)(*v9 + 8 * v1063);
      v1065 = v7[2238] + *v1046;
      v1066 = *(_QWORD *)(*v9 + 8 * v1065);
      if (v1064 <= v1066 && v1064 <= *v8)
      {
        v1067 = *v10 + 24 * v1065;
        v1069 = (uint64_t **)(v1067 + 8);
        v1068 = *(uint64_t **)(v1067 + 8);
        if (v1068)
        {
          while (1)
          {
            while (1)
            {
              v1070 = (uint64_t **)v1068;
              v1071 = *((_DWORD *)v1068 + 7);
              if (v1071 <= v1063)
                break;
              v1068 = *v1070;
              v1069 = v1070;
              if (!*v1070)
                goto LABEL_1025;
            }
            if (v1071 >= v1063)
              break;
            v1068 = v1070[1];
            if (!v1068)
            {
              v1069 = v1070 + 1;
              goto LABEL_1025;
            }
          }
        }
        else
        {
          v1070 = (uint64_t **)(v1067 + 8);
LABEL_1025:
          v1072 = operator new(0x20uLL);
          v1072[7] = v1063;
          *(_QWORD *)v1072 = 0;
          *((_QWORD *)v1072 + 1) = 0;
          *((_QWORD *)v1072 + 2) = v1070;
          *v1069 = (uint64_t *)v1072;
          v1073 = **(_QWORD **)v1067;
          if (v1073)
          {
            *(_QWORD *)v1067 = v1073;
            v1074 = *v1069;
          }
          else
          {
            v1074 = (uint64_t *)v1072;
          }
          result = sub_20E868578(*(uint64_t **)(v1067 + 8), v1074);
          v1075 = *v11;
          v1076 = *(int32x4_t *)(*v11 + 4 * v1066);
          ++*(_QWORD *)(v1067 + 16);
          v1077.i64[0] = 0x600000006;
          v1077.i64[1] = 0x600000006;
          *(int32x4_t *)(v1075 + 4 * v1066) = vaddq_s32(v1076, v1077);
          v1046 = (unsigned int *)a2[13];
          v8 = v1835;
        }
      }
    }
  }
  v1078 = (unsigned int *)a2[9];
  if (*((_BYTE *)v1078 + 20))
  {
    if (*((_BYTE *)v1046 + 20))
    {
      v1079 = v7[2233] + *v1078;
      v1080 = *(_QWORD *)(*v9 + 8 * v1079);
      v1081 = v7[2238] + *v1046;
      v1082 = *(_QWORD *)(*v9 + 8 * v1081);
      if (v1080 <= v1082 && v1080 <= *v8)
      {
        v1083 = *v10 + 24 * v1081;
        v1085 = (uint64_t **)(v1083 + 8);
        v1084 = *(uint64_t **)(v1083 + 8);
        if (v1084)
        {
          while (1)
          {
            while (1)
            {
              v1086 = (uint64_t **)v1084;
              v1087 = *((_DWORD *)v1084 + 7);
              if (v1087 <= v1079)
                break;
              v1084 = *v1086;
              v1085 = v1086;
              if (!*v1086)
                goto LABEL_1040;
            }
            if (v1087 >= v1079)
              break;
            v1084 = v1086[1];
            if (!v1084)
            {
              v1085 = v1086 + 1;
              goto LABEL_1040;
            }
          }
        }
        else
        {
          v1086 = (uint64_t **)(v1083 + 8);
LABEL_1040:
          v1088 = operator new(0x20uLL);
          v1088[7] = v1079;
          *(_QWORD *)v1088 = 0;
          *((_QWORD *)v1088 + 1) = 0;
          *((_QWORD *)v1088 + 2) = v1086;
          *v1085 = (uint64_t *)v1088;
          v1089 = **(_QWORD **)v1083;
          if (v1089)
          {
            *(_QWORD *)v1083 = v1089;
            v1090 = *v1085;
          }
          else
          {
            v1090 = (uint64_t *)v1088;
          }
          result = sub_20E868578(*(uint64_t **)(v1083 + 8), v1090);
          v1091 = *v11;
          v1092 = *(int32x4_t *)(*v11 + 4 * v1082);
          ++*(_QWORD *)(v1083 + 16);
          v1093.i64[0] = 0x600000006;
          v1093.i64[1] = 0x600000006;
          *(int32x4_t *)(v1091 + 4 * v1082) = vaddq_s32(v1092, v1093);
          v1046 = (unsigned int *)a2[13];
          v8 = v1835;
        }
      }
    }
  }
  v1094 = (unsigned int *)a2[10];
  if (*((_BYTE *)v1094 + 20))
  {
    if (*((_BYTE *)v1046 + 20))
    {
      v1095 = v7[2233] + *v1094;
      v1096 = *(_QWORD *)(*v9 + 8 * v1095);
      v1097 = v7[2238] + *v1046;
      v1098 = *(_QWORD *)(*v9 + 8 * v1097);
      if (v1096 <= v1098 && v1096 <= *v8)
      {
        v1099 = *v10 + 24 * v1097;
        v1101 = (uint64_t **)(v1099 + 8);
        v1100 = *(uint64_t **)(v1099 + 8);
        if (v1100)
        {
          while (1)
          {
            while (1)
            {
              v1102 = (uint64_t **)v1100;
              v1103 = *((_DWORD *)v1100 + 7);
              if (v1103 <= v1095)
                break;
              v1100 = *v1102;
              v1101 = v1102;
              if (!*v1102)
                goto LABEL_1055;
            }
            if (v1103 >= v1095)
              break;
            v1100 = v1102[1];
            if (!v1100)
            {
              v1101 = v1102 + 1;
              goto LABEL_1055;
            }
          }
        }
        else
        {
          v1102 = (uint64_t **)(v1099 + 8);
LABEL_1055:
          v1104 = operator new(0x20uLL);
          v1104[7] = v1095;
          *(_QWORD *)v1104 = 0;
          *((_QWORD *)v1104 + 1) = 0;
          *((_QWORD *)v1104 + 2) = v1102;
          *v1101 = (uint64_t *)v1104;
          v1105 = **(_QWORD **)v1099;
          if (v1105)
          {
            *(_QWORD *)v1099 = v1105;
            v1106 = *v1101;
          }
          else
          {
            v1106 = (uint64_t *)v1104;
          }
          result = sub_20E868578(*(uint64_t **)(v1099 + 8), v1106);
          v1107 = *v11;
          v1108 = *(int32x4_t *)(*v11 + 4 * v1098);
          ++*(_QWORD *)(v1099 + 16);
          v1109.i64[0] = 0x600000006;
          v1109.i64[1] = 0x600000006;
          *(int32x4_t *)(v1107 + 4 * v1098) = vaddq_s32(v1108, v1109);
          v1046 = (unsigned int *)a2[13];
          v8 = v1835;
        }
      }
    }
  }
  v1110 = (unsigned int *)a2[11];
  if (*((_BYTE *)v1110 + 20))
  {
    if (*((_BYTE *)v1046 + 20))
    {
      v1111 = v7[2237] + *v1110;
      v1112 = *(_QWORD *)(*v9 + 8 * v1111);
      v1113 = v7[2238] + *v1046;
      v1114 = *(_QWORD *)(*v9 + 8 * v1113);
      if (v1112 <= v1114 && v1112 <= *v8)
      {
        v1115 = *v10 + 24 * v1113;
        v1117 = (uint64_t **)(v1115 + 8);
        v1116 = *(uint64_t **)(v1115 + 8);
        if (v1116)
        {
          while (1)
          {
            while (1)
            {
              v1118 = (uint64_t **)v1116;
              v1119 = *((_DWORD *)v1116 + 7);
              if (v1119 <= v1111)
                break;
              v1116 = *v1118;
              v1117 = v1118;
              if (!*v1118)
                goto LABEL_1070;
            }
            if (v1119 >= v1111)
              break;
            v1116 = v1118[1];
            if (!v1116)
            {
              v1117 = v1118 + 1;
              goto LABEL_1070;
            }
          }
        }
        else
        {
          v1118 = (uint64_t **)(v1115 + 8);
LABEL_1070:
          v1120 = operator new(0x20uLL);
          v1120[7] = v1111;
          *(_QWORD *)v1120 = 0;
          *((_QWORD *)v1120 + 1) = 0;
          *((_QWORD *)v1120 + 2) = v1118;
          *v1117 = (uint64_t *)v1120;
          v1121 = **(_QWORD **)v1115;
          if (v1121)
          {
            *(_QWORD *)v1115 = v1121;
            v1122 = *v1117;
          }
          else
          {
            v1122 = (uint64_t *)v1120;
          }
          result = sub_20E868578(*(uint64_t **)(v1115 + 8), v1122);
          v1123 = *v11;
          v1124 = *(int32x4_t *)(*v11 + 4 * v1114);
          ++*(_QWORD *)(v1115 + 16);
          v1125.i64[0] = 0x400000004;
          v1125.i64[1] = 0x400000004;
          *(int32x4_t *)(v1123 + 4 * v1114) = vaddq_s32(v1124, v1125);
          v1046 = (unsigned int *)a2[13];
          v8 = v1835;
        }
      }
    }
  }
  v1126 = (unsigned int *)a2[12];
  if (*((_BYTE *)v1126 + 20))
  {
    if (*((_BYTE *)v1046 + 20))
    {
      v1127 = v7[2237] + *v1126;
      v1128 = *(_QWORD *)(*v9 + 8 * v1127);
      v1129 = v7[2238] + *v1046;
      v1130 = *(_QWORD *)(*v9 + 8 * v1129);
      if (v1128 <= v1130 && v1128 <= *v8)
      {
        v1131 = *v10 + 24 * v1129;
        v1133 = (uint64_t **)(v1131 + 8);
        v1132 = *(uint64_t **)(v1131 + 8);
        if (v1132)
        {
          while (1)
          {
            while (1)
            {
              v1134 = (uint64_t **)v1132;
              v1135 = *((_DWORD *)v1132 + 7);
              if (v1135 <= v1127)
                break;
              v1132 = *v1134;
              v1133 = v1134;
              if (!*v1134)
                goto LABEL_1085;
            }
            if (v1135 >= v1127)
              break;
            v1132 = v1134[1];
            if (!v1132)
            {
              v1133 = v1134 + 1;
              goto LABEL_1085;
            }
          }
        }
        else
        {
          v1134 = (uint64_t **)(v1131 + 8);
LABEL_1085:
          v1136 = operator new(0x20uLL);
          v1136[7] = v1127;
          *(_QWORD *)v1136 = 0;
          *((_QWORD *)v1136 + 1) = 0;
          *((_QWORD *)v1136 + 2) = v1134;
          *v1133 = (uint64_t *)v1136;
          v1137 = **(_QWORD **)v1131;
          if (v1137)
          {
            *(_QWORD *)v1131 = v1137;
            v1138 = *v1133;
          }
          else
          {
            v1138 = (uint64_t *)v1136;
          }
          result = sub_20E868578(*(uint64_t **)(v1131 + 8), v1138);
          v1139 = *v11;
          v1140 = *(int32x4_t *)(*v11 + 4 * v1130);
          ++*(_QWORD *)(v1131 + 16);
          v1141.i64[0] = 0x400000004;
          v1141.i64[1] = 0x400000004;
          *(int32x4_t *)(v1139 + 4 * v1130) = vaddq_s32(v1140, v1141);
          v1046 = (unsigned int *)a2[13];
          v8 = v1835;
        }
      }
    }
  }
  if (*((_BYTE *)v1046 + 20))
  {
    v1142 = v7[2238] + *v1046;
    v1143 = *(_QWORD *)(*v9 + 8 * v1142);
    if (v1143 <= *v8)
    {
      v1144 = *v10 + 24 * v1142;
      v1146 = (uint64_t **)(v1144 + 8);
      v1145 = *(uint64_t **)(v1144 + 8);
      if (v1145)
      {
        while (1)
        {
          while (1)
          {
            v1147 = (uint64_t **)v1145;
            v1148 = *((_DWORD *)v1145 + 7);
            if (v1148 <= v1142)
              break;
            v1145 = *v1147;
            v1146 = v1147;
            if (!*v1147)
              goto LABEL_1098;
          }
          if (v1148 >= v1142)
            break;
          v1145 = v1147[1];
          if (!v1145)
          {
            v1146 = v1147 + 1;
            goto LABEL_1098;
          }
        }
      }
      else
      {
        v1147 = (uint64_t **)(v1144 + 8);
LABEL_1098:
        v1149 = operator new(0x20uLL);
        v1149[7] = v1142;
        *(_QWORD *)v1149 = 0;
        *((_QWORD *)v1149 + 1) = 0;
        *((_QWORD *)v1149 + 2) = v1147;
        *v1146 = (uint64_t *)v1149;
        v1150 = **(_QWORD **)v1144;
        if (v1150)
        {
          *(_QWORD *)v1144 = v1150;
          v1151 = *v1146;
        }
        else
        {
          v1151 = (uint64_t *)v1149;
        }
        result = sub_20E868578(*(uint64_t **)(v1144 + 8), v1151);
        ++*(_QWORD *)(v1144 + 16);
        v1152.i64[0] = 0x400000004;
        v1152.i64[1] = 0x400000004;
        *(int32x4_t *)(*v11 + 4 * v1143) = vaddq_s32(*(int32x4_t *)(*v11 + 4 * v1143), v1152);
        v8 = v1835;
      }
    }
  }
  v1153 = (unsigned int *)a2[14];
  if (*((_BYTE *)v1153 + 20))
  {
    v1154 = (unsigned int *)a2[13];
    if (*((_BYTE *)v1154 + 20))
    {
      v1155 = v7[2238];
      v1156 = v1155 + *v1153;
      v1157 = *(_QWORD *)(*v9 + 8 * v1156);
      v1158 = v1155 + *v1154;
      v1159 = *(_QWORD *)(*v9 + 8 * v1158);
      if (v1157 <= v1159 && v1157 <= *v8)
      {
        v1160 = *v10 + 24 * v1158;
        v1162 = (uint64_t **)(v1160 + 8);
        v1161 = *(uint64_t **)(v1160 + 8);
        if (v1161)
        {
          while (1)
          {
            while (1)
            {
              v1163 = (uint64_t **)v1161;
              v1164 = *((_DWORD *)v1161 + 7);
              if (v1164 <= v1156)
                break;
              v1161 = *v1163;
              v1162 = v1163;
              if (!*v1163)
                goto LABEL_1113;
            }
            if (v1164 >= v1156)
              break;
            v1161 = v1163[1];
            if (!v1161)
            {
              v1162 = v1163 + 1;
              goto LABEL_1113;
            }
          }
        }
        else
        {
          v1163 = (uint64_t **)(v1160 + 8);
LABEL_1113:
          v1165 = operator new(0x20uLL);
          v1165[7] = v1156;
          *(_QWORD *)v1165 = 0;
          *((_QWORD *)v1165 + 1) = 0;
          *((_QWORD *)v1165 + 2) = v1163;
          *v1162 = (uint64_t *)v1165;
          v1166 = **(_QWORD **)v1160;
          if (v1166)
          {
            *(_QWORD *)v1160 = v1166;
            v1167 = *v1162;
          }
          else
          {
            v1167 = (uint64_t *)v1165;
          }
          result = sub_20E868578(*(uint64_t **)(v1160 + 8), v1167);
          ++*(_QWORD *)(v1160 + 16);
          v1168.i64[0] = 0x400000004;
          v1168.i64[1] = 0x400000004;
          *(int32x4_t *)(*v11 + 4 * v1159) = vaddq_s32(*(int32x4_t *)(*v11 + 4 * v1159), v1168);
          v8 = v1835;
        }
      }
    }
  }
  v1169 = (unsigned int *)a2[15];
  if (*((_BYTE *)v1169 + 20))
  {
    v1170 = (unsigned int *)a2[13];
    if (*((_BYTE *)v1170 + 20))
    {
      v1171 = v7[2239] + *v1169;
      v1172 = *(_QWORD *)(*v9 + 8 * v1171);
      v1173 = v7[2238] + *v1170;
      v1174 = *(_QWORD *)(*v9 + 8 * v1173);
      if (v1172 <= v1174 && v1172 <= *v8)
      {
        v1175 = *v10 + 24 * v1173;
        v1177 = (uint64_t **)(v1175 + 8);
        v1176 = *(uint64_t **)(v1175 + 8);
        if (v1176)
        {
          while (1)
          {
            while (1)
            {
              v1178 = (uint64_t **)v1176;
              v1179 = *((_DWORD *)v1176 + 7);
              if (v1179 <= v1171)
                break;
              v1176 = *v1178;
              v1177 = v1178;
              if (!*v1178)
                goto LABEL_1128;
            }
            if (v1179 >= v1171)
              break;
            v1176 = v1178[1];
            if (!v1176)
            {
              v1177 = v1178 + 1;
              goto LABEL_1128;
            }
          }
        }
        else
        {
          v1178 = (uint64_t **)(v1175 + 8);
LABEL_1128:
          v1180 = operator new(0x20uLL);
          v1180[7] = v1171;
          *(_QWORD *)v1180 = 0;
          *((_QWORD *)v1180 + 1) = 0;
          *((_QWORD *)v1180 + 2) = v1178;
          *v1177 = (uint64_t *)v1180;
          v1181 = **(_QWORD **)v1175;
          if (v1181)
          {
            *(_QWORD *)v1175 = v1181;
            v1182 = *v1177;
          }
          else
          {
            v1182 = (uint64_t *)v1180;
          }
          result = sub_20E868578(*(uint64_t **)(v1175 + 8), v1182);
          ++*(_QWORD *)(v1175 + 16);
          v1183.i64[0] = 0x300000003;
          v1183.i64[1] = 0x300000003;
          *(int32x4_t *)(*v11 + 4 * v1174) = vaddq_s32(*(int32x4_t *)(*v11 + 4 * v1174), v1183);
          v8 = v1835;
        }
      }
    }
  }
  v1184 = (unsigned int *)a2[16];
  if (*((_BYTE *)v1184 + 20))
  {
    v1185 = (unsigned int *)a2[13];
    if (*((_BYTE *)v1185 + 20))
    {
      v1186 = v7[2239] + *v1184;
      v1187 = *(_QWORD *)(*v9 + 8 * v1186);
      v1188 = v7[2238] + *v1185;
      v1189 = *(_QWORD *)(*v9 + 8 * v1188);
      if (v1187 <= v1189 && v1187 <= *v8)
      {
        v1190 = *v10 + 24 * v1188;
        v1192 = (uint64_t **)(v1190 + 8);
        v1191 = *(uint64_t **)(v1190 + 8);
        if (v1191)
        {
          while (1)
          {
            while (1)
            {
              v1193 = (uint64_t **)v1191;
              v1194 = *((_DWORD *)v1191 + 7);
              if (v1194 <= v1186)
                break;
              v1191 = *v1193;
              v1192 = v1193;
              if (!*v1193)
                goto LABEL_1143;
            }
            if (v1194 >= v1186)
              break;
            v1191 = v1193[1];
            if (!v1191)
            {
              v1192 = v1193 + 1;
              goto LABEL_1143;
            }
          }
        }
        else
        {
          v1193 = (uint64_t **)(v1190 + 8);
LABEL_1143:
          v1195 = operator new(0x20uLL);
          v1195[7] = v1186;
          *(_QWORD *)v1195 = 0;
          *((_QWORD *)v1195 + 1) = 0;
          *((_QWORD *)v1195 + 2) = v1193;
          *v1192 = (uint64_t *)v1195;
          v1196 = **(_QWORD **)v1190;
          if (v1196)
          {
            *(_QWORD *)v1190 = v1196;
            v1197 = *v1192;
          }
          else
          {
            v1197 = (uint64_t *)v1195;
          }
          result = sub_20E868578(*(uint64_t **)(v1190 + 8), v1197);
          ++*(_QWORD *)(v1190 + 16);
          v1198.i64[0] = 0x300000003;
          v1198.i64[1] = 0x300000003;
          *(int32x4_t *)(*v11 + 4 * v1189) = vaddq_s32(*(int32x4_t *)(*v11 + 4 * v1189), v1198);
          v8 = v1835;
        }
      }
    }
  }
  v1199 = (unsigned int *)a2[17];
  if (*((_BYTE *)v1199 + 20))
  {
    v1200 = (unsigned int *)a2[13];
    if (*((_BYTE *)v1200 + 20))
    {
      v1201 = v7[2240] + *v1199;
      v1202 = *(_QWORD *)(*v9 + 8 * v1201);
      v1203 = v7[2238] + *v1200;
      v1204 = *(_QWORD *)(*v9 + 8 * v1203);
      if (v1202 <= v1204 && v1202 <= *v8)
      {
        v1205 = *v10 + 24 * v1203;
        v1207 = (uint64_t **)(v1205 + 8);
        v1206 = *(uint64_t **)(v1205 + 8);
        if (v1206)
        {
          while (1)
          {
            while (1)
            {
              v1208 = (uint64_t **)v1206;
              v1209 = *((_DWORD *)v1206 + 7);
              if (v1209 <= v1201)
                break;
              v1206 = *v1208;
              v1207 = v1208;
              if (!*v1208)
                goto LABEL_1158;
            }
            if (v1209 >= v1201)
              break;
            v1206 = v1208[1];
            if (!v1206)
            {
              v1207 = v1208 + 1;
              goto LABEL_1158;
            }
          }
        }
        else
        {
          v1208 = (uint64_t **)(v1205 + 8);
LABEL_1158:
          v1210 = operator new(0x20uLL);
          v1210[7] = v1201;
          *(_QWORD *)v1210 = 0;
          *((_QWORD *)v1210 + 1) = 0;
          *((_QWORD *)v1210 + 2) = v1208;
          *v1207 = (uint64_t *)v1210;
          v1211 = **(_QWORD **)v1205;
          if (v1211)
          {
            *(_QWORD *)v1205 = v1211;
            v1212 = *v1207;
          }
          else
          {
            v1212 = (uint64_t *)v1210;
          }
          result = sub_20E868578(*(uint64_t **)(v1205 + 8), v1212);
          ++*(_QWORD *)(v1205 + 16);
          v1213.i64[0] = 0x100000001;
          v1213.i64[1] = 0x100000001;
          *(int32x4_t *)(*v11 + 4 * v1204) = vaddq_s32(*(int32x4_t *)(*v11 + 4 * v1204), v1213);
          v8 = v1835;
        }
      }
    }
  }
  v1214 = (unsigned int *)a2[7];
  v1215 = (unsigned int *)a2[14];
  if (*((_BYTE *)v1214 + 20))
  {
    if (*((_BYTE *)v1215 + 20))
    {
      v1216 = v7[2236] + *v1214;
      v1217 = *(_QWORD *)(*v9 + 8 * v1216);
      v1218 = v7[2238] + *v1215;
      v1219 = *(_QWORD *)(*v9 + 8 * v1218);
      if (v1217 <= v1219 && v1217 <= *v8)
      {
        v1220 = *v10 + 24 * v1218;
        v1222 = (uint64_t **)(v1220 + 8);
        v1221 = *(uint64_t **)(v1220 + 8);
        if (v1221)
        {
          while (1)
          {
            while (1)
            {
              v1223 = (uint64_t **)v1221;
              v1224 = *((_DWORD *)v1221 + 7);
              if (v1224 <= v1216)
                break;
              v1221 = *v1223;
              v1222 = v1223;
              if (!*v1223)
                goto LABEL_1173;
            }
            if (v1224 >= v1216)
              break;
            v1221 = v1223[1];
            if (!v1221)
            {
              v1222 = v1223 + 1;
              goto LABEL_1173;
            }
          }
        }
        else
        {
          v1223 = (uint64_t **)(v1220 + 8);
LABEL_1173:
          v1225 = operator new(0x20uLL);
          v1225[7] = v1216;
          *(_QWORD *)v1225 = 0;
          *((_QWORD *)v1225 + 1) = 0;
          *((_QWORD *)v1225 + 2) = v1223;
          *v1222 = (uint64_t *)v1225;
          v1226 = **(_QWORD **)v1220;
          if (v1226)
          {
            *(_QWORD *)v1220 = v1226;
            v1227 = *v1222;
          }
          else
          {
            v1227 = (uint64_t *)v1225;
          }
          result = sub_20E868578(*(uint64_t **)(v1220 + 8), v1227);
          v1228 = *v11;
          v1229 = *(int32x4_t *)(*v11 + 4 * v1219);
          ++*(_QWORD *)(v1220 + 16);
          v1230.i64[0] = 0x600000006;
          v1230.i64[1] = 0x600000006;
          *(int32x4_t *)(v1228 + 4 * v1219) = vaddq_s32(v1229, v1230);
          v1215 = (unsigned int *)a2[14];
          v8 = v1835;
        }
      }
    }
  }
  v1231 = (unsigned int *)a2[8];
  if (*((_BYTE *)v1231 + 20))
  {
    if (*((_BYTE *)v1215 + 20))
    {
      v1232 = v7[2236] + *v1231;
      v1233 = *(_QWORD *)(*v9 + 8 * v1232);
      v1234 = v7[2238] + *v1215;
      v1235 = *(_QWORD *)(*v9 + 8 * v1234);
      if (v1233 <= v1235 && v1233 <= *v8)
      {
        v1236 = *v10 + 24 * v1234;
        v1238 = (uint64_t **)(v1236 + 8);
        v1237 = *(uint64_t **)(v1236 + 8);
        if (v1237)
        {
          while (1)
          {
            while (1)
            {
              v1239 = (uint64_t **)v1237;
              v1240 = *((_DWORD *)v1237 + 7);
              if (v1240 <= v1232)
                break;
              v1237 = *v1239;
              v1238 = v1239;
              if (!*v1239)
                goto LABEL_1188;
            }
            if (v1240 >= v1232)
              break;
            v1237 = v1239[1];
            if (!v1237)
            {
              v1238 = v1239 + 1;
              goto LABEL_1188;
            }
          }
        }
        else
        {
          v1239 = (uint64_t **)(v1236 + 8);
LABEL_1188:
          v1241 = operator new(0x20uLL);
          v1241[7] = v1232;
          *(_QWORD *)v1241 = 0;
          *((_QWORD *)v1241 + 1) = 0;
          *((_QWORD *)v1241 + 2) = v1239;
          *v1238 = (uint64_t *)v1241;
          v1242 = **(_QWORD **)v1236;
          if (v1242)
          {
            *(_QWORD *)v1236 = v1242;
            v1243 = *v1238;
          }
          else
          {
            v1243 = (uint64_t *)v1241;
          }
          result = sub_20E868578(*(uint64_t **)(v1236 + 8), v1243);
          v1244 = *v11;
          v1245 = *(int32x4_t *)(*v11 + 4 * v1235);
          ++*(_QWORD *)(v1236 + 16);
          v1246.i64[0] = 0x600000006;
          v1246.i64[1] = 0x600000006;
          *(int32x4_t *)(v1244 + 4 * v1235) = vaddq_s32(v1245, v1246);
          v1215 = (unsigned int *)a2[14];
          v8 = v1835;
        }
      }
    }
  }
  v1247 = (unsigned int *)a2[9];
  if (*((_BYTE *)v1247 + 20))
  {
    if (*((_BYTE *)v1215 + 20))
    {
      v1248 = v7[2233] + *v1247;
      v1249 = *(_QWORD *)(*v9 + 8 * v1248);
      v1250 = v7[2238] + *v1215;
      v1251 = *(_QWORD *)(*v9 + 8 * v1250);
      if (v1249 <= v1251 && v1249 <= *v8)
      {
        v1252 = *v10 + 24 * v1250;
        v1254 = (uint64_t **)(v1252 + 8);
        v1253 = *(uint64_t **)(v1252 + 8);
        if (v1253)
        {
          while (1)
          {
            while (1)
            {
              v1255 = (uint64_t **)v1253;
              v1256 = *((_DWORD *)v1253 + 7);
              if (v1256 <= v1248)
                break;
              v1253 = *v1255;
              v1254 = v1255;
              if (!*v1255)
                goto LABEL_1203;
            }
            if (v1256 >= v1248)
              break;
            v1253 = v1255[1];
            if (!v1253)
            {
              v1254 = v1255 + 1;
              goto LABEL_1203;
            }
          }
        }
        else
        {
          v1255 = (uint64_t **)(v1252 + 8);
LABEL_1203:
          v1257 = operator new(0x20uLL);
          v1257[7] = v1248;
          *(_QWORD *)v1257 = 0;
          *((_QWORD *)v1257 + 1) = 0;
          *((_QWORD *)v1257 + 2) = v1255;
          *v1254 = (uint64_t *)v1257;
          v1258 = **(_QWORD **)v1252;
          if (v1258)
          {
            *(_QWORD *)v1252 = v1258;
            v1259 = *v1254;
          }
          else
          {
            v1259 = (uint64_t *)v1257;
          }
          result = sub_20E868578(*(uint64_t **)(v1252 + 8), v1259);
          v1260 = *v11;
          v1261 = *(int32x4_t *)(*v11 + 4 * v1251);
          ++*(_QWORD *)(v1252 + 16);
          v1262.i64[0] = 0x600000006;
          v1262.i64[1] = 0x600000006;
          *(int32x4_t *)(v1260 + 4 * v1251) = vaddq_s32(v1261, v1262);
          v1215 = (unsigned int *)a2[14];
          v8 = v1835;
        }
      }
    }
  }
  v1263 = (unsigned int *)a2[10];
  if (*((_BYTE *)v1263 + 20))
  {
    if (*((_BYTE *)v1215 + 20))
    {
      v1264 = v7[2233] + *v1263;
      v1265 = *(_QWORD *)(*v9 + 8 * v1264);
      v1266 = v7[2238] + *v1215;
      v1267 = *(_QWORD *)(*v9 + 8 * v1266);
      if (v1265 <= v1267 && v1265 <= *v8)
      {
        v1268 = *v10 + 24 * v1266;
        v1270 = (uint64_t **)(v1268 + 8);
        v1269 = *(uint64_t **)(v1268 + 8);
        if (v1269)
        {
          while (1)
          {
            while (1)
            {
              v1271 = (uint64_t **)v1269;
              v1272 = *((_DWORD *)v1269 + 7);
              if (v1272 <= v1264)
                break;
              v1269 = *v1271;
              v1270 = v1271;
              if (!*v1271)
                goto LABEL_1218;
            }
            if (v1272 >= v1264)
              break;
            v1269 = v1271[1];
            if (!v1269)
            {
              v1270 = v1271 + 1;
              goto LABEL_1218;
            }
          }
        }
        else
        {
          v1271 = (uint64_t **)(v1268 + 8);
LABEL_1218:
          v1273 = operator new(0x20uLL);
          v1273[7] = v1264;
          *(_QWORD *)v1273 = 0;
          *((_QWORD *)v1273 + 1) = 0;
          *((_QWORD *)v1273 + 2) = v1271;
          *v1270 = (uint64_t *)v1273;
          v1274 = **(_QWORD **)v1268;
          if (v1274)
          {
            *(_QWORD *)v1268 = v1274;
            v1275 = *v1270;
          }
          else
          {
            v1275 = (uint64_t *)v1273;
          }
          result = sub_20E868578(*(uint64_t **)(v1268 + 8), v1275);
          v1276 = *v11;
          v1277 = *(int32x4_t *)(*v11 + 4 * v1267);
          ++*(_QWORD *)(v1268 + 16);
          v1278.i64[0] = 0x600000006;
          v1278.i64[1] = 0x600000006;
          *(int32x4_t *)(v1276 + 4 * v1267) = vaddq_s32(v1277, v1278);
          v1215 = (unsigned int *)a2[14];
          v8 = v1835;
        }
      }
    }
  }
  v1279 = (unsigned int *)a2[11];
  if (*((_BYTE *)v1279 + 20))
  {
    if (*((_BYTE *)v1215 + 20))
    {
      v1280 = v7[2237] + *v1279;
      v1281 = *(_QWORD *)(*v9 + 8 * v1280);
      v1282 = v7[2238] + *v1215;
      v1283 = *(_QWORD *)(*v9 + 8 * v1282);
      if (v1281 <= v1283 && v1281 <= *v8)
      {
        v1284 = *v10 + 24 * v1282;
        v1286 = (uint64_t **)(v1284 + 8);
        v1285 = *(uint64_t **)(v1284 + 8);
        if (v1285)
        {
          while (1)
          {
            while (1)
            {
              v1287 = (uint64_t **)v1285;
              v1288 = *((_DWORD *)v1285 + 7);
              if (v1288 <= v1280)
                break;
              v1285 = *v1287;
              v1286 = v1287;
              if (!*v1287)
                goto LABEL_1233;
            }
            if (v1288 >= v1280)
              break;
            v1285 = v1287[1];
            if (!v1285)
            {
              v1286 = v1287 + 1;
              goto LABEL_1233;
            }
          }
        }
        else
        {
          v1287 = (uint64_t **)(v1284 + 8);
LABEL_1233:
          v1289 = operator new(0x20uLL);
          v1289[7] = v1280;
          *(_QWORD *)v1289 = 0;
          *((_QWORD *)v1289 + 1) = 0;
          *((_QWORD *)v1289 + 2) = v1287;
          *v1286 = (uint64_t *)v1289;
          v1290 = **(_QWORD **)v1284;
          if (v1290)
          {
            *(_QWORD *)v1284 = v1290;
            v1291 = *v1286;
          }
          else
          {
            v1291 = (uint64_t *)v1289;
          }
          result = sub_20E868578(*(uint64_t **)(v1284 + 8), v1291);
          v1292 = *v11;
          v1293 = *(int32x4_t *)(*v11 + 4 * v1283);
          ++*(_QWORD *)(v1284 + 16);
          v1294.i64[0] = 0x400000004;
          v1294.i64[1] = 0x400000004;
          *(int32x4_t *)(v1292 + 4 * v1283) = vaddq_s32(v1293, v1294);
          v1215 = (unsigned int *)a2[14];
          v8 = v1835;
        }
      }
    }
  }
  v1295 = (unsigned int *)a2[12];
  if (*((_BYTE *)v1295 + 20))
  {
    if (*((_BYTE *)v1215 + 20))
    {
      v1296 = v7[2237] + *v1295;
      v1297 = *(_QWORD *)(*v9 + 8 * v1296);
      v1298 = v7[2238] + *v1215;
      v1299 = *(_QWORD *)(*v9 + 8 * v1298);
      if (v1297 <= v1299 && v1297 <= *v8)
      {
        v1300 = *v10 + 24 * v1298;
        v1302 = (uint64_t **)(v1300 + 8);
        v1301 = *(uint64_t **)(v1300 + 8);
        if (v1301)
        {
          while (1)
          {
            while (1)
            {
              v1303 = (uint64_t **)v1301;
              v1304 = *((_DWORD *)v1301 + 7);
              if (v1304 <= v1296)
                break;
              v1301 = *v1303;
              v1302 = v1303;
              if (!*v1303)
                goto LABEL_1248;
            }
            if (v1304 >= v1296)
              break;
            v1301 = v1303[1];
            if (!v1301)
            {
              v1302 = v1303 + 1;
              goto LABEL_1248;
            }
          }
        }
        else
        {
          v1303 = (uint64_t **)(v1300 + 8);
LABEL_1248:
          v1305 = operator new(0x20uLL);
          v1305[7] = v1296;
          *(_QWORD *)v1305 = 0;
          *((_QWORD *)v1305 + 1) = 0;
          *((_QWORD *)v1305 + 2) = v1303;
          *v1302 = (uint64_t *)v1305;
          v1306 = **(_QWORD **)v1300;
          if (v1306)
          {
            *(_QWORD *)v1300 = v1306;
            v1307 = *v1302;
          }
          else
          {
            v1307 = (uint64_t *)v1305;
          }
          result = sub_20E868578(*(uint64_t **)(v1300 + 8), v1307);
          v1308 = *v11;
          v1309 = *(int32x4_t *)(*v11 + 4 * v1299);
          ++*(_QWORD *)(v1300 + 16);
          v1310.i64[0] = 0x400000004;
          v1310.i64[1] = 0x400000004;
          *(int32x4_t *)(v1308 + 4 * v1299) = vaddq_s32(v1309, v1310);
          v1215 = (unsigned int *)a2[14];
          v8 = v1835;
        }
      }
    }
  }
  v1311 = (unsigned int *)a2[13];
  if (*((_BYTE *)v1311 + 20))
  {
    if (*((_BYTE *)v1215 + 20))
    {
      v1312 = v7[2238];
      v1313 = v1312 + *v1311;
      v1314 = *(_QWORD *)(*v9 + 8 * v1313);
      v1315 = v1312 + *v1215;
      v1316 = *(_QWORD *)(*v9 + 8 * v1315);
      if (v1314 <= v1316 && v1314 <= *v8)
      {
        v1317 = *v10 + 24 * v1315;
        v1319 = (uint64_t **)(v1317 + 8);
        v1318 = *(uint64_t **)(v1317 + 8);
        if (v1318)
        {
          while (1)
          {
            while (1)
            {
              v1320 = (uint64_t **)v1318;
              v1321 = *((_DWORD *)v1318 + 7);
              if (v1321 <= v1313)
                break;
              v1318 = *v1320;
              v1319 = v1320;
              if (!*v1320)
                goto LABEL_1263;
            }
            if (v1321 >= v1313)
              break;
            v1318 = v1320[1];
            if (!v1318)
            {
              v1319 = v1320 + 1;
              goto LABEL_1263;
            }
          }
        }
        else
        {
          v1320 = (uint64_t **)(v1317 + 8);
LABEL_1263:
          v1322 = operator new(0x20uLL);
          v1322[7] = v1313;
          *(_QWORD *)v1322 = 0;
          *((_QWORD *)v1322 + 1) = 0;
          *((_QWORD *)v1322 + 2) = v1320;
          *v1319 = (uint64_t *)v1322;
          v1323 = **(_QWORD **)v1317;
          if (v1323)
          {
            *(_QWORD *)v1317 = v1323;
            v1324 = *v1319;
          }
          else
          {
            v1324 = (uint64_t *)v1322;
          }
          result = sub_20E868578(*(uint64_t **)(v1317 + 8), v1324);
          v1325 = *v11;
          v1326 = *(int32x4_t *)(*v11 + 4 * v1316);
          ++*(_QWORD *)(v1317 + 16);
          v1327.i64[0] = 0x400000004;
          v1327.i64[1] = 0x400000004;
          *(int32x4_t *)(v1325 + 4 * v1316) = vaddq_s32(v1326, v1327);
          v1215 = (unsigned int *)a2[14];
          v8 = v1835;
        }
      }
    }
  }
  if (*((_BYTE *)v1215 + 20))
  {
    v1328 = v7[2238] + *v1215;
    v1329 = *(_QWORD *)(*v9 + 8 * v1328);
    if (v1329 <= *v8)
    {
      v1330 = *v10 + 24 * v1328;
      v1332 = (uint64_t **)(v1330 + 8);
      v1331 = *(uint64_t **)(v1330 + 8);
      if (v1331)
      {
        while (1)
        {
          while (1)
          {
            v1333 = (uint64_t **)v1331;
            v1334 = *((_DWORD *)v1331 + 7);
            if (v1334 <= v1328)
              break;
            v1331 = *v1333;
            v1332 = v1333;
            if (!*v1333)
              goto LABEL_1276;
          }
          if (v1334 >= v1328)
            break;
          v1331 = v1333[1];
          if (!v1331)
          {
            v1332 = v1333 + 1;
            goto LABEL_1276;
          }
        }
      }
      else
      {
        v1333 = (uint64_t **)(v1330 + 8);
LABEL_1276:
        v1335 = operator new(0x20uLL);
        v1335[7] = v1328;
        *(_QWORD *)v1335 = 0;
        *((_QWORD *)v1335 + 1) = 0;
        *((_QWORD *)v1335 + 2) = v1333;
        *v1332 = (uint64_t *)v1335;
        v1336 = **(_QWORD **)v1330;
        if (v1336)
        {
          *(_QWORD *)v1330 = v1336;
          v1337 = *v1332;
        }
        else
        {
          v1337 = (uint64_t *)v1335;
        }
        result = sub_20E868578(*(uint64_t **)(v1330 + 8), v1337);
        ++*(_QWORD *)(v1330 + 16);
        v1338.i64[0] = 0x400000004;
        v1338.i64[1] = 0x400000004;
        *(int32x4_t *)(*v11 + 4 * v1329) = vaddq_s32(*(int32x4_t *)(*v11 + 4 * v1329), v1338);
        v8 = v1835;
      }
    }
  }
  v1339 = (unsigned int *)a2[15];
  if (*((_BYTE *)v1339 + 20))
  {
    v1340 = (unsigned int *)a2[14];
    if (*((_BYTE *)v1340 + 20))
    {
      v1341 = v7[2239] + *v1339;
      v1342 = *(_QWORD *)(*v9 + 8 * v1341);
      v1343 = v7[2238] + *v1340;
      v1344 = *(_QWORD *)(*v9 + 8 * v1343);
      if (v1342 <= v1344 && v1342 <= *v8)
      {
        v1345 = *v10 + 24 * v1343;
        v1347 = (uint64_t **)(v1345 + 8);
        v1346 = *(uint64_t **)(v1345 + 8);
        if (v1346)
        {
          while (1)
          {
            while (1)
            {
              v1348 = (uint64_t **)v1346;
              v1349 = *((_DWORD *)v1346 + 7);
              if (v1349 <= v1341)
                break;
              v1346 = *v1348;
              v1347 = v1348;
              if (!*v1348)
                goto LABEL_1291;
            }
            if (v1349 >= v1341)
              break;
            v1346 = v1348[1];
            if (!v1346)
            {
              v1347 = v1348 + 1;
              goto LABEL_1291;
            }
          }
        }
        else
        {
          v1348 = (uint64_t **)(v1345 + 8);
LABEL_1291:
          v1350 = operator new(0x20uLL);
          v1350[7] = v1341;
          *(_QWORD *)v1350 = 0;
          *((_QWORD *)v1350 + 1) = 0;
          *((_QWORD *)v1350 + 2) = v1348;
          *v1347 = (uint64_t *)v1350;
          v1351 = **(_QWORD **)v1345;
          if (v1351)
          {
            *(_QWORD *)v1345 = v1351;
            v1352 = *v1347;
          }
          else
          {
            v1352 = (uint64_t *)v1350;
          }
          result = sub_20E868578(*(uint64_t **)(v1345 + 8), v1352);
          ++*(_QWORD *)(v1345 + 16);
          v1353.i64[0] = 0x300000003;
          v1353.i64[1] = 0x300000003;
          *(int32x4_t *)(*v11 + 4 * v1344) = vaddq_s32(*(int32x4_t *)(*v11 + 4 * v1344), v1353);
          v8 = v1835;
        }
      }
    }
  }
  v1354 = (unsigned int *)a2[16];
  if (*((_BYTE *)v1354 + 20))
  {
    v1355 = (unsigned int *)a2[14];
    if (*((_BYTE *)v1355 + 20))
    {
      v1356 = v7[2239] + *v1354;
      v1357 = *(_QWORD *)(*v9 + 8 * v1356);
      v1358 = v7[2238] + *v1355;
      v1359 = *(_QWORD *)(*v9 + 8 * v1358);
      if (v1357 <= v1359 && v1357 <= *v8)
      {
        v1360 = *v10 + 24 * v1358;
        v1362 = (uint64_t **)(v1360 + 8);
        v1361 = *(uint64_t **)(v1360 + 8);
        if (v1361)
        {
          while (1)
          {
            while (1)
            {
              v1363 = (uint64_t **)v1361;
              v1364 = *((_DWORD *)v1361 + 7);
              if (v1364 <= v1356)
                break;
              v1361 = *v1363;
              v1362 = v1363;
              if (!*v1363)
                goto LABEL_1306;
            }
            if (v1364 >= v1356)
              break;
            v1361 = v1363[1];
            if (!v1361)
            {
              v1362 = v1363 + 1;
              goto LABEL_1306;
            }
          }
        }
        else
        {
          v1363 = (uint64_t **)(v1360 + 8);
LABEL_1306:
          v1365 = operator new(0x20uLL);
          v1365[7] = v1356;
          *(_QWORD *)v1365 = 0;
          *((_QWORD *)v1365 + 1) = 0;
          *((_QWORD *)v1365 + 2) = v1363;
          *v1362 = (uint64_t *)v1365;
          v1366 = **(_QWORD **)v1360;
          if (v1366)
          {
            *(_QWORD *)v1360 = v1366;
            v1367 = *v1362;
          }
          else
          {
            v1367 = (uint64_t *)v1365;
          }
          result = sub_20E868578(*(uint64_t **)(v1360 + 8), v1367);
          ++*(_QWORD *)(v1360 + 16);
          v1368.i64[0] = 0x300000003;
          v1368.i64[1] = 0x300000003;
          *(int32x4_t *)(*v11 + 4 * v1359) = vaddq_s32(*(int32x4_t *)(*v11 + 4 * v1359), v1368);
          v8 = v1835;
        }
      }
    }
  }
  v1369 = (unsigned int *)a2[17];
  if (*((_BYTE *)v1369 + 20))
  {
    v1370 = (unsigned int *)a2[14];
    if (*((_BYTE *)v1370 + 20))
    {
      v1371 = v7[2240] + *v1369;
      v1372 = *(_QWORD *)(*v9 + 8 * v1371);
      v1373 = v7[2238] + *v1370;
      v1374 = *(_QWORD *)(*v9 + 8 * v1373);
      if (v1372 <= v1374 && v1372 <= *v8)
      {
        v1375 = *v10 + 24 * v1373;
        v1377 = (uint64_t **)(v1375 + 8);
        v1376 = *(uint64_t **)(v1375 + 8);
        if (v1376)
        {
          while (1)
          {
            while (1)
            {
              v1378 = (uint64_t **)v1376;
              v1379 = *((_DWORD *)v1376 + 7);
              if (v1379 <= v1371)
                break;
              v1376 = *v1378;
              v1377 = v1378;
              if (!*v1378)
                goto LABEL_1321;
            }
            if (v1379 >= v1371)
              break;
            v1376 = v1378[1];
            if (!v1376)
            {
              v1377 = v1378 + 1;
              goto LABEL_1321;
            }
          }
        }
        else
        {
          v1378 = (uint64_t **)(v1375 + 8);
LABEL_1321:
          v1380 = operator new(0x20uLL);
          v1380[7] = v1371;
          *(_QWORD *)v1380 = 0;
          *((_QWORD *)v1380 + 1) = 0;
          *((_QWORD *)v1380 + 2) = v1378;
          *v1377 = (uint64_t *)v1380;
          v1381 = **(_QWORD **)v1375;
          if (v1381)
          {
            *(_QWORD *)v1375 = v1381;
            v1382 = *v1377;
          }
          else
          {
            v1382 = (uint64_t *)v1380;
          }
          result = sub_20E868578(*(uint64_t **)(v1375 + 8), v1382);
          ++*(_QWORD *)(v1375 + 16);
          v1383.i64[0] = 0x100000001;
          v1383.i64[1] = 0x100000001;
          *(int32x4_t *)(*v11 + 4 * v1374) = vaddq_s32(*(int32x4_t *)(*v11 + 4 * v1374), v1383);
          v8 = v1835;
        }
      }
    }
  }
  v1384 = (unsigned int *)a2[7];
  v1385 = (unsigned int *)a2[15];
  if (*((_BYTE *)v1384 + 20))
  {
    if (*((_BYTE *)v1385 + 20))
    {
      v1386 = v7[2236] + *v1384;
      v1387 = *(_QWORD *)(*v9 + 8 * v1386);
      v1388 = v7[2239] + *v1385;
      v1389 = *(_QWORD *)(*v9 + 8 * v1388);
      if (v1387 <= v1389 && v1387 <= *v8)
      {
        v1390 = *v10 + 24 * v1388;
        v1392 = (uint64_t **)(v1390 + 8);
        v1391 = *(uint64_t **)(v1390 + 8);
        if (v1391)
        {
          while (1)
          {
            while (1)
            {
              v1393 = (uint64_t **)v1391;
              v1394 = *((_DWORD *)v1391 + 7);
              if (v1394 <= v1386)
                break;
              v1391 = *v1393;
              v1392 = v1393;
              if (!*v1393)
                goto LABEL_1336;
            }
            if (v1394 >= v1386)
              break;
            v1391 = v1393[1];
            if (!v1391)
            {
              v1392 = v1393 + 1;
              goto LABEL_1336;
            }
          }
        }
        else
        {
          v1393 = (uint64_t **)(v1390 + 8);
LABEL_1336:
          v1395 = operator new(0x20uLL);
          v1395[7] = v1386;
          *(_QWORD *)v1395 = 0;
          *((_QWORD *)v1395 + 1) = 0;
          *((_QWORD *)v1395 + 2) = v1393;
          *v1392 = (uint64_t *)v1395;
          v1396 = **(_QWORD **)v1390;
          if (v1396)
          {
            *(_QWORD *)v1390 = v1396;
            v1397 = *v1392;
          }
          else
          {
            v1397 = (uint64_t *)v1395;
          }
          result = sub_20E868578(*(uint64_t **)(v1390 + 8), v1397);
          ++*(_QWORD *)(v1390 + 16);
          v1398 = (int32x2_t *)(*v11 + 4 * v1389);
          *v1398 = vadd_s32(*v1398, (int32x2_t)0x600000006);
          v1398[1].i32[0] += 6;
          v1385 = (unsigned int *)a2[15];
          v8 = v1835;
        }
      }
    }
  }
  v1399 = (unsigned int *)a2[8];
  if (*((_BYTE *)v1399 + 20))
  {
    if (*((_BYTE *)v1385 + 20))
    {
      v1400 = v7[2236] + *v1399;
      v1401 = *(_QWORD *)(*v9 + 8 * v1400);
      v1402 = v7[2239] + *v1385;
      v1403 = *(_QWORD *)(*v9 + 8 * v1402);
      if (v1401 <= v1403 && v1401 <= *v8)
      {
        v1404 = *v10 + 24 * v1402;
        v1406 = (uint64_t **)(v1404 + 8);
        v1405 = *(uint64_t **)(v1404 + 8);
        if (v1405)
        {
          while (1)
          {
            while (1)
            {
              v1407 = (uint64_t **)v1405;
              v1408 = *((_DWORD *)v1405 + 7);
              if (v1408 <= v1400)
                break;
              v1405 = *v1407;
              v1406 = v1407;
              if (!*v1407)
                goto LABEL_1351;
            }
            if (v1408 >= v1400)
              break;
            v1405 = v1407[1];
            if (!v1405)
            {
              v1406 = v1407 + 1;
              goto LABEL_1351;
            }
          }
        }
        else
        {
          v1407 = (uint64_t **)(v1404 + 8);
LABEL_1351:
          v1409 = operator new(0x20uLL);
          v1409[7] = v1400;
          *(_QWORD *)v1409 = 0;
          *((_QWORD *)v1409 + 1) = 0;
          *((_QWORD *)v1409 + 2) = v1407;
          *v1406 = (uint64_t *)v1409;
          v1410 = **(_QWORD **)v1404;
          if (v1410)
          {
            *(_QWORD *)v1404 = v1410;
            v1411 = *v1406;
          }
          else
          {
            v1411 = (uint64_t *)v1409;
          }
          result = sub_20E868578(*(uint64_t **)(v1404 + 8), v1411);
          ++*(_QWORD *)(v1404 + 16);
          v1412 = (int32x2_t *)(*v11 + 4 * v1403);
          *v1412 = vadd_s32(*v1412, (int32x2_t)0x600000006);
          v1412[1].i32[0] += 6;
          v1385 = (unsigned int *)a2[15];
          v8 = v1835;
        }
      }
    }
  }
  v1413 = (unsigned int *)a2[9];
  if (*((_BYTE *)v1413 + 20))
  {
    if (*((_BYTE *)v1385 + 20))
    {
      v1414 = v7[2233] + *v1413;
      v1415 = *(_QWORD *)(*v9 + 8 * v1414);
      v1416 = v7[2239] + *v1385;
      v1417 = *(_QWORD *)(*v9 + 8 * v1416);
      if (v1415 <= v1417 && v1415 <= *v8)
      {
        v1418 = *v10 + 24 * v1416;
        v1420 = (uint64_t **)(v1418 + 8);
        v1419 = *(uint64_t **)(v1418 + 8);
        if (v1419)
        {
          while (1)
          {
            while (1)
            {
              v1421 = (uint64_t **)v1419;
              v1422 = *((_DWORD *)v1419 + 7);
              if (v1422 <= v1414)
                break;
              v1419 = *v1421;
              v1420 = v1421;
              if (!*v1421)
                goto LABEL_1366;
            }
            if (v1422 >= v1414)
              break;
            v1419 = v1421[1];
            if (!v1419)
            {
              v1420 = v1421 + 1;
              goto LABEL_1366;
            }
          }
        }
        else
        {
          v1421 = (uint64_t **)(v1418 + 8);
LABEL_1366:
          v1423 = operator new(0x20uLL);
          v1423[7] = v1414;
          *(_QWORD *)v1423 = 0;
          *((_QWORD *)v1423 + 1) = 0;
          *((_QWORD *)v1423 + 2) = v1421;
          *v1420 = (uint64_t *)v1423;
          v1424 = **(_QWORD **)v1418;
          if (v1424)
          {
            *(_QWORD *)v1418 = v1424;
            v1425 = *v1420;
          }
          else
          {
            v1425 = (uint64_t *)v1423;
          }
          result = sub_20E868578(*(uint64_t **)(v1418 + 8), v1425);
          ++*(_QWORD *)(v1418 + 16);
          v1426 = (int32x2_t *)(*v11 + 4 * v1417);
          *v1426 = vadd_s32(*v1426, (int32x2_t)0x600000006);
          v1426[1].i32[0] += 6;
          v1385 = (unsigned int *)a2[15];
          v8 = v1835;
        }
      }
    }
  }
  v1427 = (unsigned int *)a2[10];
  if (*((_BYTE *)v1427 + 20))
  {
    if (*((_BYTE *)v1385 + 20))
    {
      v1428 = v7[2233] + *v1427;
      v1429 = *(_QWORD *)(*v9 + 8 * v1428);
      v1430 = v7[2239] + *v1385;
      v1431 = *(_QWORD *)(*v9 + 8 * v1430);
      if (v1429 <= v1431 && v1429 <= *v8)
      {
        v1432 = *v10 + 24 * v1430;
        v1434 = (uint64_t **)(v1432 + 8);
        v1433 = *(uint64_t **)(v1432 + 8);
        if (v1433)
        {
          while (1)
          {
            while (1)
            {
              v1435 = (uint64_t **)v1433;
              v1436 = *((_DWORD *)v1433 + 7);
              if (v1436 <= v1428)
                break;
              v1433 = *v1435;
              v1434 = v1435;
              if (!*v1435)
                goto LABEL_1381;
            }
            if (v1436 >= v1428)
              break;
            v1433 = v1435[1];
            if (!v1433)
            {
              v1434 = v1435 + 1;
              goto LABEL_1381;
            }
          }
        }
        else
        {
          v1435 = (uint64_t **)(v1432 + 8);
LABEL_1381:
          v1437 = operator new(0x20uLL);
          v1437[7] = v1428;
          *(_QWORD *)v1437 = 0;
          *((_QWORD *)v1437 + 1) = 0;
          *((_QWORD *)v1437 + 2) = v1435;
          *v1434 = (uint64_t *)v1437;
          v1438 = **(_QWORD **)v1432;
          if (v1438)
          {
            *(_QWORD *)v1432 = v1438;
            v1439 = *v1434;
          }
          else
          {
            v1439 = (uint64_t *)v1437;
          }
          result = sub_20E868578(*(uint64_t **)(v1432 + 8), v1439);
          ++*(_QWORD *)(v1432 + 16);
          v1440 = (int32x2_t *)(*v11 + 4 * v1431);
          *v1440 = vadd_s32(*v1440, (int32x2_t)0x600000006);
          v1440[1].i32[0] += 6;
          v1385 = (unsigned int *)a2[15];
          v8 = v1835;
        }
      }
    }
  }
  v1441 = (unsigned int *)a2[11];
  if (*((_BYTE *)v1441 + 20))
  {
    if (*((_BYTE *)v1385 + 20))
    {
      v1442 = v7[2237] + *v1441;
      v1443 = *(_QWORD *)(*v9 + 8 * v1442);
      v1444 = v7[2239] + *v1385;
      v1445 = *(_QWORD *)(*v9 + 8 * v1444);
      if (v1443 <= v1445 && v1443 <= *v8)
      {
        v1446 = *v10 + 24 * v1444;
        v1448 = (uint64_t **)(v1446 + 8);
        v1447 = *(uint64_t **)(v1446 + 8);
        if (v1447)
        {
          while (1)
          {
            while (1)
            {
              v1449 = (uint64_t **)v1447;
              v1450 = *((_DWORD *)v1447 + 7);
              if (v1450 <= v1442)
                break;
              v1447 = *v1449;
              v1448 = v1449;
              if (!*v1449)
                goto LABEL_1396;
            }
            if (v1450 >= v1442)
              break;
            v1447 = v1449[1];
            if (!v1447)
            {
              v1448 = v1449 + 1;
              goto LABEL_1396;
            }
          }
        }
        else
        {
          v1449 = (uint64_t **)(v1446 + 8);
LABEL_1396:
          v1451 = operator new(0x20uLL);
          v1451[7] = v1442;
          *(_QWORD *)v1451 = 0;
          *((_QWORD *)v1451 + 1) = 0;
          *((_QWORD *)v1451 + 2) = v1449;
          *v1448 = (uint64_t *)v1451;
          v1452 = **(_QWORD **)v1446;
          if (v1452)
          {
            *(_QWORD *)v1446 = v1452;
            v1453 = *v1448;
          }
          else
          {
            v1453 = (uint64_t *)v1451;
          }
          result = sub_20E868578(*(uint64_t **)(v1446 + 8), v1453);
          ++*(_QWORD *)(v1446 + 16);
          v1454 = (int32x2_t *)(*v11 + 4 * v1445);
          *v1454 = vadd_s32(*v1454, (int32x2_t)0x400000004);
          v1454[1].i32[0] += 4;
          v1385 = (unsigned int *)a2[15];
          v8 = v1835;
        }
      }
    }
  }
  v1455 = (unsigned int *)a2[12];
  if (*((_BYTE *)v1455 + 20))
  {
    if (*((_BYTE *)v1385 + 20))
    {
      v1456 = v7[2237] + *v1455;
      v1457 = *(_QWORD *)(*v9 + 8 * v1456);
      v1458 = v7[2239] + *v1385;
      v1459 = *(_QWORD *)(*v9 + 8 * v1458);
      if (v1457 <= v1459 && v1457 <= *v8)
      {
        v1460 = *v10 + 24 * v1458;
        v1462 = (uint64_t **)(v1460 + 8);
        v1461 = *(uint64_t **)(v1460 + 8);
        if (v1461)
        {
          while (1)
          {
            while (1)
            {
              v1463 = (uint64_t **)v1461;
              v1464 = *((_DWORD *)v1461 + 7);
              if (v1464 <= v1456)
                break;
              v1461 = *v1463;
              v1462 = v1463;
              if (!*v1463)
                goto LABEL_1411;
            }
            if (v1464 >= v1456)
              break;
            v1461 = v1463[1];
            if (!v1461)
            {
              v1462 = v1463 + 1;
              goto LABEL_1411;
            }
          }
        }
        else
        {
          v1463 = (uint64_t **)(v1460 + 8);
LABEL_1411:
          v1465 = operator new(0x20uLL);
          v1465[7] = v1456;
          *(_QWORD *)v1465 = 0;
          *((_QWORD *)v1465 + 1) = 0;
          *((_QWORD *)v1465 + 2) = v1463;
          *v1462 = (uint64_t *)v1465;
          v1466 = **(_QWORD **)v1460;
          if (v1466)
          {
            *(_QWORD *)v1460 = v1466;
            v1467 = *v1462;
          }
          else
          {
            v1467 = (uint64_t *)v1465;
          }
          result = sub_20E868578(*(uint64_t **)(v1460 + 8), v1467);
          ++*(_QWORD *)(v1460 + 16);
          v1468 = (int32x2_t *)(*v11 + 4 * v1459);
          *v1468 = vadd_s32(*v1468, (int32x2_t)0x400000004);
          v1468[1].i32[0] += 4;
          v1385 = (unsigned int *)a2[15];
          v8 = v1835;
        }
      }
    }
  }
  v1469 = (unsigned int *)a2[13];
  if (*((_BYTE *)v1469 + 20))
  {
    if (*((_BYTE *)v1385 + 20))
    {
      v1470 = v7[2238] + *v1469;
      v1471 = *(_QWORD *)(*v9 + 8 * v1470);
      v1472 = v7[2239] + *v1385;
      v1473 = *(_QWORD *)(*v9 + 8 * v1472);
      if (v1471 <= v1473 && v1471 <= *v8)
      {
        v1474 = *v10 + 24 * v1472;
        v1476 = (uint64_t **)(v1474 + 8);
        v1475 = *(uint64_t **)(v1474 + 8);
        if (v1475)
        {
          while (1)
          {
            while (1)
            {
              v1477 = (uint64_t **)v1475;
              v1478 = *((_DWORD *)v1475 + 7);
              if (v1478 <= v1470)
                break;
              v1475 = *v1477;
              v1476 = v1477;
              if (!*v1477)
                goto LABEL_1426;
            }
            if (v1478 >= v1470)
              break;
            v1475 = v1477[1];
            if (!v1475)
            {
              v1476 = v1477 + 1;
              goto LABEL_1426;
            }
          }
        }
        else
        {
          v1477 = (uint64_t **)(v1474 + 8);
LABEL_1426:
          v1479 = operator new(0x20uLL);
          v1479[7] = v1470;
          *(_QWORD *)v1479 = 0;
          *((_QWORD *)v1479 + 1) = 0;
          *((_QWORD *)v1479 + 2) = v1477;
          *v1476 = (uint64_t *)v1479;
          v1480 = **(_QWORD **)v1474;
          if (v1480)
          {
            *(_QWORD *)v1474 = v1480;
            v1481 = *v1476;
          }
          else
          {
            v1481 = (uint64_t *)v1479;
          }
          result = sub_20E868578(*(uint64_t **)(v1474 + 8), v1481);
          ++*(_QWORD *)(v1474 + 16);
          v1482 = (int32x2_t *)(*v11 + 4 * v1473);
          *v1482 = vadd_s32(*v1482, (int32x2_t)0x400000004);
          v1482[1].i32[0] += 4;
          v1385 = (unsigned int *)a2[15];
          v8 = v1835;
        }
      }
    }
  }
  v1483 = (unsigned int *)a2[14];
  if (*((_BYTE *)v1483 + 20))
  {
    if (*((_BYTE *)v1385 + 20))
    {
      v1484 = v7[2238] + *v1483;
      v1485 = *(_QWORD *)(*v9 + 8 * v1484);
      v1486 = v7[2239] + *v1385;
      v1487 = *(_QWORD *)(*v9 + 8 * v1486);
      if (v1485 <= v1487 && v1485 <= *v8)
      {
        v1488 = *v10 + 24 * v1486;
        v1490 = (uint64_t **)(v1488 + 8);
        v1489 = *(uint64_t **)(v1488 + 8);
        if (v1489)
        {
          while (1)
          {
            while (1)
            {
              v1491 = (uint64_t **)v1489;
              v1492 = *((_DWORD *)v1489 + 7);
              if (v1492 <= v1484)
                break;
              v1489 = *v1491;
              v1490 = v1491;
              if (!*v1491)
                goto LABEL_1441;
            }
            if (v1492 >= v1484)
              break;
            v1489 = v1491[1];
            if (!v1489)
            {
              v1490 = v1491 + 1;
              goto LABEL_1441;
            }
          }
        }
        else
        {
          v1491 = (uint64_t **)(v1488 + 8);
LABEL_1441:
          v1493 = operator new(0x20uLL);
          v1493[7] = v1484;
          *(_QWORD *)v1493 = 0;
          *((_QWORD *)v1493 + 1) = 0;
          *((_QWORD *)v1493 + 2) = v1491;
          *v1490 = (uint64_t *)v1493;
          v1494 = **(_QWORD **)v1488;
          if (v1494)
          {
            *(_QWORD *)v1488 = v1494;
            v1495 = *v1490;
          }
          else
          {
            v1495 = (uint64_t *)v1493;
          }
          result = sub_20E868578(*(uint64_t **)(v1488 + 8), v1495);
          ++*(_QWORD *)(v1488 + 16);
          v1496 = (int32x2_t *)(*v11 + 4 * v1487);
          *v1496 = vadd_s32(*v1496, (int32x2_t)0x400000004);
          v1496[1].i32[0] += 4;
          v1385 = (unsigned int *)a2[15];
          v8 = v1835;
        }
      }
    }
  }
  if (*((_BYTE *)v1385 + 20))
  {
    v1497 = v7[2239] + *v1385;
    v1498 = *(_QWORD *)(*v9 + 8 * v1497);
    if (v1498 <= *v8)
    {
      v1499 = *v10 + 24 * v1497;
      v1501 = (uint64_t **)(v1499 + 8);
      v1500 = *(uint64_t **)(v1499 + 8);
      if (v1500)
      {
        while (1)
        {
          while (1)
          {
            v1502 = (uint64_t **)v1500;
            v1503 = *((_DWORD *)v1500 + 7);
            if (v1503 <= v1497)
              break;
            v1500 = *v1502;
            v1501 = v1502;
            if (!*v1502)
              goto LABEL_1454;
          }
          if (v1503 >= v1497)
            break;
          v1500 = v1502[1];
          if (!v1500)
          {
            v1501 = v1502 + 1;
            goto LABEL_1454;
          }
        }
      }
      else
      {
        v1502 = (uint64_t **)(v1499 + 8);
LABEL_1454:
        v1504 = operator new(0x20uLL);
        v1504[7] = v1497;
        *(_QWORD *)v1504 = 0;
        *((_QWORD *)v1504 + 1) = 0;
        *((_QWORD *)v1504 + 2) = v1502;
        *v1501 = (uint64_t *)v1504;
        v1505 = **(_QWORD **)v1499;
        if (v1505)
        {
          *(_QWORD *)v1499 = v1505;
          v1506 = *v1501;
        }
        else
        {
          v1506 = (uint64_t *)v1504;
        }
        result = sub_20E868578(*(uint64_t **)(v1499 + 8), v1506);
        ++*(_QWORD *)(v1499 + 16);
        v1507 = (int32x2_t *)(*v11 + 4 * v1498);
        *v1507 = vadd_s32(*v1507, (int32x2_t)0x300000003);
        v1507[1].i32[0] += 3;
        v8 = v1835;
      }
    }
  }
  v1508 = (unsigned int *)a2[16];
  if (*((_BYTE *)v1508 + 20))
  {
    v1509 = (unsigned int *)a2[15];
    if (*((_BYTE *)v1509 + 20))
    {
      v1510 = v7[2239];
      v1511 = v1510 + *v1508;
      v1512 = *(_QWORD *)(*v9 + 8 * v1511);
      v1513 = v1510 + *v1509;
      v1514 = *(_QWORD *)(*v9 + 8 * v1513);
      if (v1512 <= v1514 && v1512 <= *v8)
      {
        v1515 = *v10 + 24 * v1513;
        v1517 = (uint64_t **)(v1515 + 8);
        v1516 = *(uint64_t **)(v1515 + 8);
        if (v1516)
        {
          while (1)
          {
            while (1)
            {
              v1518 = (uint64_t **)v1516;
              v1519 = *((_DWORD *)v1516 + 7);
              if (v1519 <= v1511)
                break;
              v1516 = *v1518;
              v1517 = v1518;
              if (!*v1518)
                goto LABEL_1469;
            }
            if (v1519 >= v1511)
              break;
            v1516 = v1518[1];
            if (!v1516)
            {
              v1517 = v1518 + 1;
              goto LABEL_1469;
            }
          }
        }
        else
        {
          v1518 = (uint64_t **)(v1515 + 8);
LABEL_1469:
          v1520 = operator new(0x20uLL);
          v1520[7] = v1511;
          *(_QWORD *)v1520 = 0;
          *((_QWORD *)v1520 + 1) = 0;
          *((_QWORD *)v1520 + 2) = v1518;
          *v1517 = (uint64_t *)v1520;
          v1521 = **(_QWORD **)v1515;
          if (v1521)
          {
            *(_QWORD *)v1515 = v1521;
            v1522 = *v1517;
          }
          else
          {
            v1522 = (uint64_t *)v1520;
          }
          result = sub_20E868578(*(uint64_t **)(v1515 + 8), v1522);
          ++*(_QWORD *)(v1515 + 16);
          v1523 = (int32x2_t *)(*v11 + 4 * v1514);
          *v1523 = vadd_s32(*v1523, (int32x2_t)0x300000003);
          v1523[1].i32[0] += 3;
          v8 = v1835;
        }
      }
    }
  }
  v1524 = (unsigned int *)a2[17];
  if (*((_BYTE *)v1524 + 20))
  {
    v1525 = (unsigned int *)a2[15];
    if (*((_BYTE *)v1525 + 20))
    {
      v1526 = v7[2240] + *v1524;
      v1527 = *(_QWORD *)(*v9 + 8 * v1526);
      v1528 = v7[2239] + *v1525;
      v1529 = *(_QWORD *)(*v9 + 8 * v1528);
      if (v1527 <= v1529 && v1527 <= *v8)
      {
        v1530 = *v10 + 24 * v1528;
        v1532 = (uint64_t **)(v1530 + 8);
        v1531 = *(uint64_t **)(v1530 + 8);
        if (v1531)
        {
          while (1)
          {
            while (1)
            {
              v1533 = (uint64_t **)v1531;
              v1534 = *((_DWORD *)v1531 + 7);
              if (v1534 <= v1526)
                break;
              v1531 = *v1533;
              v1532 = v1533;
              if (!*v1533)
                goto LABEL_1484;
            }
            if (v1534 >= v1526)
              break;
            v1531 = v1533[1];
            if (!v1531)
            {
              v1532 = v1533 + 1;
              goto LABEL_1484;
            }
          }
        }
        else
        {
          v1533 = (uint64_t **)(v1530 + 8);
LABEL_1484:
          v1535 = operator new(0x20uLL);
          v1535[7] = v1526;
          *(_QWORD *)v1535 = 0;
          *((_QWORD *)v1535 + 1) = 0;
          *((_QWORD *)v1535 + 2) = v1533;
          *v1532 = (uint64_t *)v1535;
          v1536 = **(_QWORD **)v1530;
          if (v1536)
          {
            *(_QWORD *)v1530 = v1536;
            v1537 = *v1532;
          }
          else
          {
            v1537 = (uint64_t *)v1535;
          }
          result = sub_20E868578(*(uint64_t **)(v1530 + 8), v1537);
          ++*(_QWORD *)(v1530 + 16);
          v1538 = (int32x2_t *)(*v11 + 4 * v1529);
          *v1538 = vadd_s32(*v1538, (int32x2_t)0x100000001);
          ++v1538[1].i32[0];
          v8 = v1835;
        }
      }
    }
  }
  v1539 = (unsigned int *)a2[7];
  v1540 = (unsigned int *)a2[16];
  if (*((_BYTE *)v1539 + 20))
  {
    if (*((_BYTE *)v1540 + 20))
    {
      v1541 = v7[2236] + *v1539;
      v1542 = *(_QWORD *)(*v9 + 8 * v1541);
      v1543 = v7[2239] + *v1540;
      v1544 = *(_QWORD *)(*v9 + 8 * v1543);
      if (v1542 <= v1544 && v1542 <= *v8)
      {
        v1545 = *v10 + 24 * v1543;
        v1547 = (uint64_t **)(v1545 + 8);
        v1546 = *(uint64_t **)(v1545 + 8);
        if (v1546)
        {
          while (1)
          {
            while (1)
            {
              v1548 = (uint64_t **)v1546;
              v1549 = *((_DWORD *)v1546 + 7);
              if (v1549 <= v1541)
                break;
              v1546 = *v1548;
              v1547 = v1548;
              if (!*v1548)
                goto LABEL_1499;
            }
            if (v1549 >= v1541)
              break;
            v1546 = v1548[1];
            if (!v1546)
            {
              v1547 = v1548 + 1;
              goto LABEL_1499;
            }
          }
        }
        else
        {
          v1548 = (uint64_t **)(v1545 + 8);
LABEL_1499:
          v1550 = operator new(0x20uLL);
          v1550[7] = v1541;
          *(_QWORD *)v1550 = 0;
          *((_QWORD *)v1550 + 1) = 0;
          *((_QWORD *)v1550 + 2) = v1548;
          *v1547 = (uint64_t *)v1550;
          v1551 = **(_QWORD **)v1545;
          if (v1551)
          {
            *(_QWORD *)v1545 = v1551;
            v1552 = *v1547;
          }
          else
          {
            v1552 = (uint64_t *)v1550;
          }
          result = sub_20E868578(*(uint64_t **)(v1545 + 8), v1552);
          ++*(_QWORD *)(v1545 + 16);
          v1553 = (int32x2_t *)(*v11 + 4 * v1544);
          *v1553 = vadd_s32(*v1553, (int32x2_t)0x600000006);
          v1553[1].i32[0] += 6;
          v1540 = (unsigned int *)a2[16];
          v8 = v1835;
        }
      }
    }
  }
  v1554 = (unsigned int *)a2[8];
  if (*((_BYTE *)v1554 + 20))
  {
    if (*((_BYTE *)v1540 + 20))
    {
      v1555 = v7[2236] + *v1554;
      v1556 = *(_QWORD *)(*v9 + 8 * v1555);
      v1557 = v7[2239] + *v1540;
      v1558 = *(_QWORD *)(*v9 + 8 * v1557);
      if (v1556 <= v1558 && v1556 <= *v8)
      {
        v1559 = *v10 + 24 * v1557;
        v1561 = (uint64_t **)(v1559 + 8);
        v1560 = *(uint64_t **)(v1559 + 8);
        if (v1560)
        {
          while (1)
          {
            while (1)
            {
              v1562 = (uint64_t **)v1560;
              v1563 = *((_DWORD *)v1560 + 7);
              if (v1563 <= v1555)
                break;
              v1560 = *v1562;
              v1561 = v1562;
              if (!*v1562)
                goto LABEL_1514;
            }
            if (v1563 >= v1555)
              break;
            v1560 = v1562[1];
            if (!v1560)
            {
              v1561 = v1562 + 1;
              goto LABEL_1514;
            }
          }
        }
        else
        {
          v1562 = (uint64_t **)(v1559 + 8);
LABEL_1514:
          v1564 = operator new(0x20uLL);
          v1564[7] = v1555;
          *(_QWORD *)v1564 = 0;
          *((_QWORD *)v1564 + 1) = 0;
          *((_QWORD *)v1564 + 2) = v1562;
          *v1561 = (uint64_t *)v1564;
          v1565 = **(_QWORD **)v1559;
          if (v1565)
          {
            *(_QWORD *)v1559 = v1565;
            v1566 = *v1561;
          }
          else
          {
            v1566 = (uint64_t *)v1564;
          }
          result = sub_20E868578(*(uint64_t **)(v1559 + 8), v1566);
          ++*(_QWORD *)(v1559 + 16);
          v1567 = (int32x2_t *)(*v11 + 4 * v1558);
          *v1567 = vadd_s32(*v1567, (int32x2_t)0x600000006);
          v1567[1].i32[0] += 6;
          v1540 = (unsigned int *)a2[16];
          v8 = v1835;
        }
      }
    }
  }
  v1568 = (unsigned int *)a2[9];
  if (*((_BYTE *)v1568 + 20))
  {
    if (*((_BYTE *)v1540 + 20))
    {
      v1569 = v7[2233] + *v1568;
      v1570 = *(_QWORD *)(*v9 + 8 * v1569);
      v1571 = v7[2239] + *v1540;
      v1572 = *(_QWORD *)(*v9 + 8 * v1571);
      if (v1570 <= v1572 && v1570 <= *v8)
      {
        v1573 = *v10 + 24 * v1571;
        v1575 = (uint64_t **)(v1573 + 8);
        v1574 = *(uint64_t **)(v1573 + 8);
        if (v1574)
        {
          while (1)
          {
            while (1)
            {
              v1576 = (uint64_t **)v1574;
              v1577 = *((_DWORD *)v1574 + 7);
              if (v1577 <= v1569)
                break;
              v1574 = *v1576;
              v1575 = v1576;
              if (!*v1576)
                goto LABEL_1529;
            }
            if (v1577 >= v1569)
              break;
            v1574 = v1576[1];
            if (!v1574)
            {
              v1575 = v1576 + 1;
              goto LABEL_1529;
            }
          }
        }
        else
        {
          v1576 = (uint64_t **)(v1573 + 8);
LABEL_1529:
          v1578 = operator new(0x20uLL);
          v1578[7] = v1569;
          *(_QWORD *)v1578 = 0;
          *((_QWORD *)v1578 + 1) = 0;
          *((_QWORD *)v1578 + 2) = v1576;
          *v1575 = (uint64_t *)v1578;
          v1579 = **(_QWORD **)v1573;
          if (v1579)
          {
            *(_QWORD *)v1573 = v1579;
            v1580 = *v1575;
          }
          else
          {
            v1580 = (uint64_t *)v1578;
          }
          result = sub_20E868578(*(uint64_t **)(v1573 + 8), v1580);
          ++*(_QWORD *)(v1573 + 16);
          v1581 = (int32x2_t *)(*v11 + 4 * v1572);
          *v1581 = vadd_s32(*v1581, (int32x2_t)0x600000006);
          v1581[1].i32[0] += 6;
          v1540 = (unsigned int *)a2[16];
          v8 = v1835;
        }
      }
    }
  }
  v1582 = (unsigned int *)a2[10];
  if (*((_BYTE *)v1582 + 20))
  {
    if (*((_BYTE *)v1540 + 20))
    {
      v1583 = v7[2233] + *v1582;
      v1584 = *(_QWORD *)(*v9 + 8 * v1583);
      v1585 = v7[2239] + *v1540;
      v1586 = *(_QWORD *)(*v9 + 8 * v1585);
      if (v1584 <= v1586 && v1584 <= *v8)
      {
        v1587 = *v10 + 24 * v1585;
        v1589 = (uint64_t **)(v1587 + 8);
        v1588 = *(uint64_t **)(v1587 + 8);
        if (v1588)
        {
          while (1)
          {
            while (1)
            {
              v1590 = (uint64_t **)v1588;
              v1591 = *((_DWORD *)v1588 + 7);
              if (v1591 <= v1583)
                break;
              v1588 = *v1590;
              v1589 = v1590;
              if (!*v1590)
                goto LABEL_1544;
            }
            if (v1591 >= v1583)
              break;
            v1588 = v1590[1];
            if (!v1588)
            {
              v1589 = v1590 + 1;
              goto LABEL_1544;
            }
          }
        }
        else
        {
          v1590 = (uint64_t **)(v1587 + 8);
LABEL_1544:
          v1592 = operator new(0x20uLL);
          v1592[7] = v1583;
          *(_QWORD *)v1592 = 0;
          *((_QWORD *)v1592 + 1) = 0;
          *((_QWORD *)v1592 + 2) = v1590;
          *v1589 = (uint64_t *)v1592;
          v1593 = **(_QWORD **)v1587;
          if (v1593)
          {
            *(_QWORD *)v1587 = v1593;
            v1594 = *v1589;
          }
          else
          {
            v1594 = (uint64_t *)v1592;
          }
          result = sub_20E868578(*(uint64_t **)(v1587 + 8), v1594);
          ++*(_QWORD *)(v1587 + 16);
          v1595 = (int32x2_t *)(*v11 + 4 * v1586);
          *v1595 = vadd_s32(*v1595, (int32x2_t)0x600000006);
          v1595[1].i32[0] += 6;
          v1540 = (unsigned int *)a2[16];
          v8 = v1835;
        }
      }
    }
  }
  v1596 = (unsigned int *)a2[11];
  if (*((_BYTE *)v1596 + 20))
  {
    if (*((_BYTE *)v1540 + 20))
    {
      v1597 = v7[2237] + *v1596;
      v1598 = *(_QWORD *)(*v9 + 8 * v1597);
      v1599 = v7[2239] + *v1540;
      v1600 = *(_QWORD *)(*v9 + 8 * v1599);
      if (v1598 <= v1600 && v1598 <= *v8)
      {
        v1601 = *v10 + 24 * v1599;
        v1603 = (uint64_t **)(v1601 + 8);
        v1602 = *(uint64_t **)(v1601 + 8);
        if (v1602)
        {
          while (1)
          {
            while (1)
            {
              v1604 = (uint64_t **)v1602;
              v1605 = *((_DWORD *)v1602 + 7);
              if (v1605 <= v1597)
                break;
              v1602 = *v1604;
              v1603 = v1604;
              if (!*v1604)
                goto LABEL_1559;
            }
            if (v1605 >= v1597)
              break;
            v1602 = v1604[1];
            if (!v1602)
            {
              v1603 = v1604 + 1;
              goto LABEL_1559;
            }
          }
        }
        else
        {
          v1604 = (uint64_t **)(v1601 + 8);
LABEL_1559:
          v1606 = operator new(0x20uLL);
          v1606[7] = v1597;
          *(_QWORD *)v1606 = 0;
          *((_QWORD *)v1606 + 1) = 0;
          *((_QWORD *)v1606 + 2) = v1604;
          *v1603 = (uint64_t *)v1606;
          v1607 = **(_QWORD **)v1601;
          if (v1607)
          {
            *(_QWORD *)v1601 = v1607;
            v1608 = *v1603;
          }
          else
          {
            v1608 = (uint64_t *)v1606;
          }
          result = sub_20E868578(*(uint64_t **)(v1601 + 8), v1608);
          ++*(_QWORD *)(v1601 + 16);
          v1609 = (int32x2_t *)(*v11 + 4 * v1600);
          *v1609 = vadd_s32(*v1609, (int32x2_t)0x400000004);
          v1609[1].i32[0] += 4;
          v1540 = (unsigned int *)a2[16];
          v8 = v1835;
        }
      }
    }
  }
  v1610 = (unsigned int *)a2[12];
  if (*((_BYTE *)v1610 + 20))
  {
    if (*((_BYTE *)v1540 + 20))
    {
      v1611 = v7[2237] + *v1610;
      v1612 = *(_QWORD *)(*v9 + 8 * v1611);
      v1613 = v7[2239] + *v1540;
      v1614 = *(_QWORD *)(*v9 + 8 * v1613);
      if (v1612 <= v1614 && v1612 <= *v8)
      {
        v1615 = *v10 + 24 * v1613;
        v1617 = (uint64_t **)(v1615 + 8);
        v1616 = *(uint64_t **)(v1615 + 8);
        if (v1616)
        {
          while (1)
          {
            while (1)
            {
              v1618 = (uint64_t **)v1616;
              v1619 = *((_DWORD *)v1616 + 7);
              if (v1619 <= v1611)
                break;
              v1616 = *v1618;
              v1617 = v1618;
              if (!*v1618)
                goto LABEL_1574;
            }
            if (v1619 >= v1611)
              break;
            v1616 = v1618[1];
            if (!v1616)
            {
              v1617 = v1618 + 1;
              goto LABEL_1574;
            }
          }
        }
        else
        {
          v1618 = (uint64_t **)(v1615 + 8);
LABEL_1574:
          v1620 = operator new(0x20uLL);
          v1620[7] = v1611;
          *(_QWORD *)v1620 = 0;
          *((_QWORD *)v1620 + 1) = 0;
          *((_QWORD *)v1620 + 2) = v1618;
          *v1617 = (uint64_t *)v1620;
          v1621 = **(_QWORD **)v1615;
          if (v1621)
          {
            *(_QWORD *)v1615 = v1621;
            v1622 = *v1617;
          }
          else
          {
            v1622 = (uint64_t *)v1620;
          }
          result = sub_20E868578(*(uint64_t **)(v1615 + 8), v1622);
          ++*(_QWORD *)(v1615 + 16);
          v1623 = (int32x2_t *)(*v11 + 4 * v1614);
          *v1623 = vadd_s32(*v1623, (int32x2_t)0x400000004);
          v1623[1].i32[0] += 4;
          v1540 = (unsigned int *)a2[16];
          v8 = v1835;
        }
      }
    }
  }
  v1624 = (unsigned int *)a2[13];
  if (*((_BYTE *)v1624 + 20))
  {
    if (*((_BYTE *)v1540 + 20))
    {
      v1625 = v7[2238] + *v1624;
      v1626 = *(_QWORD *)(*v9 + 8 * v1625);
      v1627 = v7[2239] + *v1540;
      v1628 = *(_QWORD *)(*v9 + 8 * v1627);
      if (v1626 <= v1628 && v1626 <= *v8)
      {
        v1629 = *v10 + 24 * v1627;
        v1631 = (uint64_t **)(v1629 + 8);
        v1630 = *(uint64_t **)(v1629 + 8);
        if (v1630)
        {
          while (1)
          {
            while (1)
            {
              v1632 = (uint64_t **)v1630;
              v1633 = *((_DWORD *)v1630 + 7);
              if (v1633 <= v1625)
                break;
              v1630 = *v1632;
              v1631 = v1632;
              if (!*v1632)
                goto LABEL_1589;
            }
            if (v1633 >= v1625)
              break;
            v1630 = v1632[1];
            if (!v1630)
            {
              v1631 = v1632 + 1;
              goto LABEL_1589;
            }
          }
        }
        else
        {
          v1632 = (uint64_t **)(v1629 + 8);
LABEL_1589:
          v1634 = operator new(0x20uLL);
          v1634[7] = v1625;
          *(_QWORD *)v1634 = 0;
          *((_QWORD *)v1634 + 1) = 0;
          *((_QWORD *)v1634 + 2) = v1632;
          *v1631 = (uint64_t *)v1634;
          v1635 = **(_QWORD **)v1629;
          if (v1635)
          {
            *(_QWORD *)v1629 = v1635;
            v1636 = *v1631;
          }
          else
          {
            v1636 = (uint64_t *)v1634;
          }
          result = sub_20E868578(*(uint64_t **)(v1629 + 8), v1636);
          ++*(_QWORD *)(v1629 + 16);
          v1637 = (int32x2_t *)(*v11 + 4 * v1628);
          *v1637 = vadd_s32(*v1637, (int32x2_t)0x400000004);
          v1637[1].i32[0] += 4;
          v1540 = (unsigned int *)a2[16];
          v8 = v1835;
        }
      }
    }
  }
  v1638 = (unsigned int *)a2[14];
  if (*((_BYTE *)v1638 + 20))
  {
    if (*((_BYTE *)v1540 + 20))
    {
      v1639 = v7[2238] + *v1638;
      v1640 = *(_QWORD *)(*v9 + 8 * v1639);
      v1641 = v7[2239] + *v1540;
      v1642 = *(_QWORD *)(*v9 + 8 * v1641);
      if (v1640 <= v1642 && v1640 <= *v8)
      {
        v1643 = *v10 + 24 * v1641;
        v1645 = (uint64_t **)(v1643 + 8);
        v1644 = *(uint64_t **)(v1643 + 8);
        if (v1644)
        {
          while (1)
          {
            while (1)
            {
              v1646 = (uint64_t **)v1644;
              v1647 = *((_DWORD *)v1644 + 7);
              if (v1647 <= v1639)
                break;
              v1644 = *v1646;
              v1645 = v1646;
              if (!*v1646)
                goto LABEL_1604;
            }
            if (v1647 >= v1639)
              break;
            v1644 = v1646[1];
            if (!v1644)
            {
              v1645 = v1646 + 1;
              goto LABEL_1604;
            }
          }
        }
        else
        {
          v1646 = (uint64_t **)(v1643 + 8);
LABEL_1604:
          v1648 = operator new(0x20uLL);
          v1648[7] = v1639;
          *(_QWORD *)v1648 = 0;
          *((_QWORD *)v1648 + 1) = 0;
          *((_QWORD *)v1648 + 2) = v1646;
          *v1645 = (uint64_t *)v1648;
          v1649 = **(_QWORD **)v1643;
          if (v1649)
          {
            *(_QWORD *)v1643 = v1649;
            v1650 = *v1645;
          }
          else
          {
            v1650 = (uint64_t *)v1648;
          }
          result = sub_20E868578(*(uint64_t **)(v1643 + 8), v1650);
          ++*(_QWORD *)(v1643 + 16);
          v1651 = (int32x2_t *)(*v11 + 4 * v1642);
          *v1651 = vadd_s32(*v1651, (int32x2_t)0x400000004);
          v1651[1].i32[0] += 4;
          v1540 = (unsigned int *)a2[16];
          v8 = v1835;
        }
      }
    }
  }
  v1652 = (unsigned int *)a2[15];
  if (*((_BYTE *)v1652 + 20))
  {
    if (*((_BYTE *)v1540 + 20))
    {
      v1653 = v7[2239];
      v1654 = v1653 + *v1652;
      v1655 = *(_QWORD *)(*v9 + 8 * v1654);
      v1656 = v1653 + *v1540;
      v1657 = *(_QWORD *)(*v9 + 8 * v1656);
      if (v1655 <= v1657 && v1655 <= *v8)
      {
        v1658 = *v10 + 24 * v1656;
        v1660 = (uint64_t **)(v1658 + 8);
        v1659 = *(uint64_t **)(v1658 + 8);
        if (v1659)
        {
          while (1)
          {
            while (1)
            {
              v1661 = (uint64_t **)v1659;
              v1662 = *((_DWORD *)v1659 + 7);
              if (v1662 <= v1654)
                break;
              v1659 = *v1661;
              v1660 = v1661;
              if (!*v1661)
                goto LABEL_1619;
            }
            if (v1662 >= v1654)
              break;
            v1659 = v1661[1];
            if (!v1659)
            {
              v1660 = v1661 + 1;
              goto LABEL_1619;
            }
          }
        }
        else
        {
          v1661 = (uint64_t **)(v1658 + 8);
LABEL_1619:
          v1663 = operator new(0x20uLL);
          v1663[7] = v1654;
          *(_QWORD *)v1663 = 0;
          *((_QWORD *)v1663 + 1) = 0;
          *((_QWORD *)v1663 + 2) = v1661;
          *v1660 = (uint64_t *)v1663;
          v1664 = **(_QWORD **)v1658;
          if (v1664)
          {
            *(_QWORD *)v1658 = v1664;
            v1665 = *v1660;
          }
          else
          {
            v1665 = (uint64_t *)v1663;
          }
          result = sub_20E868578(*(uint64_t **)(v1658 + 8), v1665);
          ++*(_QWORD *)(v1658 + 16);
          v1666 = (int32x2_t *)(*v11 + 4 * v1657);
          *v1666 = vadd_s32(*v1666, (int32x2_t)0x300000003);
          v1666[1].i32[0] += 3;
          v1540 = (unsigned int *)a2[16];
          v8 = v1835;
        }
      }
    }
  }
  if (*((_BYTE *)v1540 + 20))
  {
    v1667 = v7[2239] + *v1540;
    v1668 = *(_QWORD *)(*v9 + 8 * v1667);
    if (v1668 <= *v8)
    {
      v1669 = *v10 + 24 * v1667;
      v1671 = (uint64_t **)(v1669 + 8);
      v1670 = *(uint64_t **)(v1669 + 8);
      if (v1670)
      {
        while (1)
        {
          while (1)
          {
            v1672 = (uint64_t **)v1670;
            v1673 = *((_DWORD *)v1670 + 7);
            if (v1673 <= v1667)
              break;
            v1670 = *v1672;
            v1671 = v1672;
            if (!*v1672)
              goto LABEL_1632;
          }
          if (v1673 >= v1667)
            break;
          v1670 = v1672[1];
          if (!v1670)
          {
            v1671 = v1672 + 1;
            goto LABEL_1632;
          }
        }
      }
      else
      {
        v1672 = (uint64_t **)(v1669 + 8);
LABEL_1632:
        v1674 = operator new(0x20uLL);
        v1674[7] = v1667;
        *(_QWORD *)v1674 = 0;
        *((_QWORD *)v1674 + 1) = 0;
        *((_QWORD *)v1674 + 2) = v1672;
        *v1671 = (uint64_t *)v1674;
        v1675 = **(_QWORD **)v1669;
        if (v1675)
        {
          *(_QWORD *)v1669 = v1675;
          v1676 = *v1671;
        }
        else
        {
          v1676 = (uint64_t *)v1674;
        }
        result = sub_20E868578(*(uint64_t **)(v1669 + 8), v1676);
        ++*(_QWORD *)(v1669 + 16);
        v1677 = (int32x2_t *)(*v11 + 4 * v1668);
        *v1677 = vadd_s32(*v1677, (int32x2_t)0x300000003);
        v1677[1].i32[0] += 3;
        v8 = v1835;
      }
    }
  }
  v1678 = (unsigned int *)a2[17];
  if (*((_BYTE *)v1678 + 20))
  {
    v1679 = (unsigned int *)a2[16];
    if (*((_BYTE *)v1679 + 20))
    {
      v1680 = v7[2240] + *v1678;
      v1681 = *(_QWORD *)(*v9 + 8 * v1680);
      v1682 = v7[2239] + *v1679;
      v1683 = *(_QWORD *)(*v9 + 8 * v1682);
      if (v1681 <= v1683 && v1681 <= *v8)
      {
        v1684 = *v10 + 24 * v1682;
        v1686 = (uint64_t **)(v1684 + 8);
        v1685 = *(uint64_t **)(v1684 + 8);
        if (v1685)
        {
          while (1)
          {
            while (1)
            {
              v1687 = (uint64_t **)v1685;
              v1688 = *((_DWORD *)v1685 + 7);
              if (v1688 <= v1680)
                break;
              v1685 = *v1687;
              v1686 = v1687;
              if (!*v1687)
                goto LABEL_1647;
            }
            if (v1688 >= v1680)
              break;
            v1685 = v1687[1];
            if (!v1685)
            {
              v1686 = v1687 + 1;
              goto LABEL_1647;
            }
          }
        }
        else
        {
          v1687 = (uint64_t **)(v1684 + 8);
LABEL_1647:
          v1689 = operator new(0x20uLL);
          v1689[7] = v1680;
          *(_QWORD *)v1689 = 0;
          *((_QWORD *)v1689 + 1) = 0;
          *((_QWORD *)v1689 + 2) = v1687;
          *v1686 = (uint64_t *)v1689;
          v1690 = **(_QWORD **)v1684;
          if (v1690)
          {
            *(_QWORD *)v1684 = v1690;
            v1691 = *v1686;
          }
          else
          {
            v1691 = (uint64_t *)v1689;
          }
          result = sub_20E868578(*(uint64_t **)(v1684 + 8), v1691);
          ++*(_QWORD *)(v1684 + 16);
          v1692 = (int32x2_t *)(*v11 + 4 * v1683);
          *v1692 = vadd_s32(*v1692, (int32x2_t)0x100000001);
          ++v1692[1].i32[0];
          v1678 = (unsigned int *)a2[17];
          v8 = v1835;
        }
      }
    }
  }
  if (*((_BYTE *)*v1832 + 20) && *((_BYTE *)v1678 + 20))
  {
    v1693 = v7[2236] + **v1832;
    v1694 = *(_QWORD *)(*v9 + 8 * v1693);
    v1695 = v7[2240] + *v1678;
    v1696 = *(_QWORD *)(*v9 + 8 * v1695);
    if (v1694 <= v1696 && v1694 <= *v8)
    {
      v1752 = *v1834 + 24 * v1695;
      v1754 = (uint64_t **)(v1752 + 8);
      v1753 = *(uint64_t **)(v1752 + 8);
      if (!v1753)
      {
        v1755 = (uint64_t **)(v1752 + 8);
LABEL_1719:
        v1757 = operator new(0x20uLL);
        v1757[7] = v1693;
        *(_QWORD *)v1757 = 0;
        *((_QWORD *)v1757 + 1) = 0;
        *((_QWORD *)v1757 + 2) = v1755;
        *v1754 = (uint64_t *)v1757;
        v1758 = **(_QWORD **)v1752;
        if (v1758)
        {
          *(_QWORD *)v1752 = v1758;
          v1759 = *v1754;
        }
        else
        {
          v1759 = (uint64_t *)v1757;
        }
        result = sub_20E868578(*(uint64_t **)(v1752 + 8), v1759);
        ++*(_QWORD *)(v1752 + 16);
        *(_DWORD *)(*v11 + 4 * v1696) += 6;
        v1678 = (unsigned int *)a2[17];
        v10 = v1834;
        v8 = v1835;
        v1697 = (unsigned int *)a2[8];
        if (!*((_BYTE *)v1697 + 20))
          goto LABEL_1661;
        goto LABEL_1657;
      }
      while (1)
      {
        while (1)
        {
          v1755 = (uint64_t **)v1753;
          v1756 = *((_DWORD *)v1753 + 7);
          if (v1756 <= v1693)
            break;
          v1753 = *v1755;
          v1754 = v1755;
          if (!*v1755)
            goto LABEL_1719;
        }
        if (v1756 >= v1693)
          break;
        v1753 = v1755[1];
        if (!v1753)
        {
          v1754 = v1755 + 1;
          goto LABEL_1719;
        }
      }
    }
    v10 = v1834;
  }
  v1697 = (unsigned int *)a2[8];
  if (!*((_BYTE *)v1697 + 20))
    goto LABEL_1661;
LABEL_1657:
  if (*((_BYTE *)v1678 + 20))
  {
    v1698 = v7[2236] + *v1697;
    v1699 = *(_QWORD *)(*v9 + 8 * v1698);
    v1700 = v7[2240] + *v1678;
    v1701 = *(_QWORD *)(*v9 + 8 * v1700);
    if (v1699 > v1701 || v1699 > *v8)
    {
LABEL_1660:
      v10 = v1834;
      goto LABEL_1661;
    }
    v1760 = *v1834 + 24 * v1700;
    v1762 = (uint64_t **)(v1760 + 8);
    v1761 = *(uint64_t **)(v1760 + 8);
    if (v1761)
    {
      while (1)
      {
        while (1)
        {
          v1763 = (uint64_t **)v1761;
          v1764 = *((_DWORD *)v1761 + 7);
          if (v1764 <= v1698)
            break;
          v1761 = *v1763;
          v1762 = v1763;
          if (!*v1763)
            goto LABEL_1728;
        }
        if (v1764 >= v1698)
          goto LABEL_1660;
        v1761 = v1763[1];
        if (!v1761)
        {
          v1762 = v1763 + 1;
          goto LABEL_1728;
        }
      }
    }
    v1763 = (uint64_t **)(v1760 + 8);
LABEL_1728:
    v1765 = operator new(0x20uLL);
    v1765[7] = v1698;
    *(_QWORD *)v1765 = 0;
    *((_QWORD *)v1765 + 1) = 0;
    *((_QWORD *)v1765 + 2) = v1763;
    *v1762 = (uint64_t *)v1765;
    v1766 = **(_QWORD **)v1760;
    if (v1766)
    {
      *(_QWORD *)v1760 = v1766;
      v1767 = *v1762;
    }
    else
    {
      v1767 = (uint64_t *)v1765;
    }
    result = sub_20E868578(*(uint64_t **)(v1760 + 8), v1767);
    ++*(_QWORD *)(v1760 + 16);
    *(_DWORD *)(*v11 + 4 * v1701) += 6;
    v1678 = (unsigned int *)a2[17];
    v10 = v1834;
    v8 = v1835;
  }
LABEL_1661:
  v1702 = (unsigned int *)a2[9];
  if (*((_BYTE *)v1702 + 20) && *((_BYTE *)v1678 + 20))
  {
    v1703 = v7[2233] + *v1702;
    v1704 = *(_QWORD *)(*v9 + 8 * v1703);
    v1705 = v7[2240] + *v1678;
    v1706 = *(_QWORD *)(*v9 + 8 * v1705);
    if (v1704 <= v1706 && v1704 <= *v8)
    {
      v1768 = *v1834 + 24 * v1705;
      v1770 = (uint64_t **)(v1768 + 8);
      v1769 = *(uint64_t **)(v1768 + 8);
      if (!v1769)
      {
        v1771 = (uint64_t **)(v1768 + 8);
LABEL_1737:
        v1773 = operator new(0x20uLL);
        v1773[7] = v1703;
        *(_QWORD *)v1773 = 0;
        *((_QWORD *)v1773 + 1) = 0;
        *((_QWORD *)v1773 + 2) = v1771;
        *v1770 = (uint64_t *)v1773;
        v1774 = **(_QWORD **)v1768;
        if (v1774)
        {
          *(_QWORD *)v1768 = v1774;
          v1775 = *v1770;
        }
        else
        {
          v1775 = (uint64_t *)v1773;
        }
        result = sub_20E868578(*(uint64_t **)(v1768 + 8), v1775);
        ++*(_QWORD *)(v1768 + 16);
        *(_DWORD *)(*v11 + 4 * v1706) += 6;
        v1678 = (unsigned int *)a2[17];
        v10 = v1834;
        v8 = v1835;
        v1707 = (unsigned int *)a2[10];
        if (!*((_BYTE *)v1707 + 20))
          goto LABEL_1671;
        goto LABEL_1667;
      }
      while (1)
      {
        while (1)
        {
          v1771 = (uint64_t **)v1769;
          v1772 = *((_DWORD *)v1769 + 7);
          if (v1772 <= v1703)
            break;
          v1769 = *v1771;
          v1770 = v1771;
          if (!*v1771)
            goto LABEL_1737;
        }
        if (v1772 >= v1703)
          break;
        v1769 = v1771[1];
        if (!v1769)
        {
          v1770 = v1771 + 1;
          goto LABEL_1737;
        }
      }
    }
    v10 = v1834;
  }
  v1707 = (unsigned int *)a2[10];
  if (!*((_BYTE *)v1707 + 20))
    goto LABEL_1671;
LABEL_1667:
  if (*((_BYTE *)v1678 + 20))
  {
    v1708 = v7[2233] + *v1707;
    v1709 = *(_QWORD *)(*v9 + 8 * v1708);
    v1710 = v7[2240] + *v1678;
    v1711 = *(_QWORD *)(*v9 + 8 * v1710);
    if (v1709 > v1711 || v1709 > *v8)
    {
LABEL_1670:
      v10 = v1834;
      goto LABEL_1671;
    }
    v1776 = *v1834 + 24 * v1710;
    v1778 = (uint64_t **)(v1776 + 8);
    v1777 = *(uint64_t **)(v1776 + 8);
    if (v1777)
    {
      while (1)
      {
        while (1)
        {
          v1779 = (uint64_t **)v1777;
          v1780 = *((_DWORD *)v1777 + 7);
          if (v1780 <= v1708)
            break;
          v1777 = *v1779;
          v1778 = v1779;
          if (!*v1779)
            goto LABEL_1746;
        }
        if (v1780 >= v1708)
          goto LABEL_1670;
        v1777 = v1779[1];
        if (!v1777)
        {
          v1778 = v1779 + 1;
          goto LABEL_1746;
        }
      }
    }
    v1779 = (uint64_t **)(v1776 + 8);
LABEL_1746:
    v1781 = operator new(0x20uLL);
    v1781[7] = v1708;
    *(_QWORD *)v1781 = 0;
    *((_QWORD *)v1781 + 1) = 0;
    *((_QWORD *)v1781 + 2) = v1779;
    *v1778 = (uint64_t *)v1781;
    v1782 = **(_QWORD **)v1776;
    if (v1782)
    {
      *(_QWORD *)v1776 = v1782;
      v1783 = *v1778;
    }
    else
    {
      v1783 = (uint64_t *)v1781;
    }
    result = sub_20E868578(*(uint64_t **)(v1776 + 8), v1783);
    ++*(_QWORD *)(v1776 + 16);
    *(_DWORD *)(*v11 + 4 * v1711) += 6;
    v1678 = (unsigned int *)a2[17];
    v10 = v1834;
    v8 = v1835;
  }
LABEL_1671:
  v1712 = (unsigned int *)a2[11];
  if (*((_BYTE *)v1712 + 20) && *((_BYTE *)v1678 + 20))
  {
    v1713 = v7[2237] + *v1712;
    v1714 = *(_QWORD *)(*v9 + 8 * v1713);
    v1715 = v7[2240] + *v1678;
    v1716 = *(_QWORD *)(*v9 + 8 * v1715);
    if (v1714 <= v1716 && v1714 <= *v8)
    {
      v1784 = *v1834 + 24 * v1715;
      v1786 = (uint64_t **)(v1784 + 8);
      v1785 = *(uint64_t **)(v1784 + 8);
      if (!v1785)
      {
        v1787 = (uint64_t **)(v1784 + 8);
LABEL_1755:
        v1789 = operator new(0x20uLL);
        v1789[7] = v1713;
        *(_QWORD *)v1789 = 0;
        *((_QWORD *)v1789 + 1) = 0;
        *((_QWORD *)v1789 + 2) = v1787;
        *v1786 = (uint64_t *)v1789;
        v1790 = **(_QWORD **)v1784;
        if (v1790)
        {
          *(_QWORD *)v1784 = v1790;
          v1791 = *v1786;
        }
        else
        {
          v1791 = (uint64_t *)v1789;
        }
        result = sub_20E868578(*(uint64_t **)(v1784 + 8), v1791);
        ++*(_QWORD *)(v1784 + 16);
        *(_DWORD *)(*v11 + 4 * v1716) += 4;
        v1678 = (unsigned int *)a2[17];
        v10 = v1834;
        v8 = v1835;
        v1717 = (unsigned int *)a2[12];
        if (!*((_BYTE *)v1717 + 20))
          goto LABEL_1681;
        goto LABEL_1677;
      }
      while (1)
      {
        while (1)
        {
          v1787 = (uint64_t **)v1785;
          v1788 = *((_DWORD *)v1785 + 7);
          if (v1788 <= v1713)
            break;
          v1785 = *v1787;
          v1786 = v1787;
          if (!*v1787)
            goto LABEL_1755;
        }
        if (v1788 >= v1713)
          break;
        v1785 = v1787[1];
        if (!v1785)
        {
          v1786 = v1787 + 1;
          goto LABEL_1755;
        }
      }
    }
    v10 = v1834;
  }
  v1717 = (unsigned int *)a2[12];
  if (!*((_BYTE *)v1717 + 20))
    goto LABEL_1681;
LABEL_1677:
  if (*((_BYTE *)v1678 + 20))
  {
    v1718 = v7[2237] + *v1717;
    v1719 = *(_QWORD *)(*v9 + 8 * v1718);
    v1720 = v7[2240] + *v1678;
    v1721 = *(_QWORD *)(*v9 + 8 * v1720);
    if (v1719 > v1721 || v1719 > *v8)
    {
LABEL_1680:
      v10 = v1834;
      goto LABEL_1681;
    }
    v1792 = *v1834 + 24 * v1720;
    v1794 = (uint64_t **)(v1792 + 8);
    v1793 = *(uint64_t **)(v1792 + 8);
    if (v1793)
    {
      while (1)
      {
        while (1)
        {
          v1795 = (uint64_t **)v1793;
          v1796 = *((_DWORD *)v1793 + 7);
          if (v1796 <= v1718)
            break;
          v1793 = *v1795;
          v1794 = v1795;
          if (!*v1795)
            goto LABEL_1764;
        }
        if (v1796 >= v1718)
          goto LABEL_1680;
        v1793 = v1795[1];
        if (!v1793)
        {
          v1794 = v1795 + 1;
          goto LABEL_1764;
        }
      }
    }
    v1795 = (uint64_t **)(v1792 + 8);
LABEL_1764:
    v1797 = operator new(0x20uLL);
    v1797[7] = v1718;
    *(_QWORD *)v1797 = 0;
    *((_QWORD *)v1797 + 1) = 0;
    *((_QWORD *)v1797 + 2) = v1795;
    *v1794 = (uint64_t *)v1797;
    v1798 = **(_QWORD **)v1792;
    if (v1798)
    {
      *(_QWORD *)v1792 = v1798;
      v1799 = *v1794;
    }
    else
    {
      v1799 = (uint64_t *)v1797;
    }
    result = sub_20E868578(*(uint64_t **)(v1792 + 8), v1799);
    ++*(_QWORD *)(v1792 + 16);
    *(_DWORD *)(*v11 + 4 * v1721) += 4;
    v1678 = (unsigned int *)a2[17];
    v10 = v1834;
    v8 = v1835;
  }
LABEL_1681:
  v1722 = (unsigned int *)a2[13];
  if (*((_BYTE *)v1722 + 20) && *((_BYTE *)v1678 + 20))
  {
    v1723 = v7[2238] + *v1722;
    v1724 = *(_QWORD *)(*v9 + 8 * v1723);
    v1725 = v7[2240] + *v1678;
    v1726 = *(_QWORD *)(*v9 + 8 * v1725);
    if (v1724 <= v1726 && v1724 <= *v8)
    {
      v1800 = *v1834 + 24 * v1725;
      v1802 = (uint64_t **)(v1800 + 8);
      v1801 = *(uint64_t **)(v1800 + 8);
      if (!v1801)
      {
        v1803 = (uint64_t **)(v1800 + 8);
LABEL_1773:
        v1805 = operator new(0x20uLL);
        v1805[7] = v1723;
        *(_QWORD *)v1805 = 0;
        *((_QWORD *)v1805 + 1) = 0;
        *((_QWORD *)v1805 + 2) = v1803;
        *v1802 = (uint64_t *)v1805;
        v1806 = **(_QWORD **)v1800;
        if (v1806)
        {
          *(_QWORD *)v1800 = v1806;
          v1807 = *v1802;
        }
        else
        {
          v1807 = (uint64_t *)v1805;
        }
        result = sub_20E868578(*(uint64_t **)(v1800 + 8), v1807);
        ++*(_QWORD *)(v1800 + 16);
        *(_DWORD *)(*v11 + 4 * v1726) += 4;
        v1678 = (unsigned int *)a2[17];
        v10 = v1834;
        v8 = v1835;
        v1727 = (unsigned int *)a2[14];
        if (!*((_BYTE *)v1727 + 20))
          goto LABEL_1691;
        goto LABEL_1687;
      }
      while (1)
      {
        while (1)
        {
          v1803 = (uint64_t **)v1801;
          v1804 = *((_DWORD *)v1801 + 7);
          if (v1804 <= v1723)
            break;
          v1801 = *v1803;
          v1802 = v1803;
          if (!*v1803)
            goto LABEL_1773;
        }
        if (v1804 >= v1723)
          break;
        v1801 = v1803[1];
        if (!v1801)
        {
          v1802 = v1803 + 1;
          goto LABEL_1773;
        }
      }
    }
    v10 = v1834;
  }
  v1727 = (unsigned int *)a2[14];
  if (!*((_BYTE *)v1727 + 20))
    goto LABEL_1691;
LABEL_1687:
  if (*((_BYTE *)v1678 + 20))
  {
    v1728 = v7[2238] + *v1727;
    v1729 = *(_QWORD *)(*v9 + 8 * v1728);
    v1730 = v7[2240] + *v1678;
    v1731 = *(_QWORD *)(*v9 + 8 * v1730);
    if (v1729 > v1731 || v1729 > *v8)
    {
LABEL_1690:
      v10 = v1834;
      goto LABEL_1691;
    }
    v1808 = *v1834 + 24 * v1730;
    v1810 = (uint64_t **)(v1808 + 8);
    v1809 = *(uint64_t **)(v1808 + 8);
    if (v1809)
    {
      while (1)
      {
        while (1)
        {
          v1811 = (uint64_t **)v1809;
          v1812 = *((_DWORD *)v1809 + 7);
          if (v1812 <= v1728)
            break;
          v1809 = *v1811;
          v1810 = v1811;
          if (!*v1811)
            goto LABEL_1782;
        }
        if (v1812 >= v1728)
          goto LABEL_1690;
        v1809 = v1811[1];
        if (!v1809)
        {
          v1810 = v1811 + 1;
          goto LABEL_1782;
        }
      }
    }
    v1811 = (uint64_t **)(v1808 + 8);
LABEL_1782:
    v1813 = operator new(0x20uLL);
    v1813[7] = v1728;
    *(_QWORD *)v1813 = 0;
    *((_QWORD *)v1813 + 1) = 0;
    *((_QWORD *)v1813 + 2) = v1811;
    *v1810 = (uint64_t *)v1813;
    v1814 = **(_QWORD **)v1808;
    if (v1814)
    {
      *(_QWORD *)v1808 = v1814;
      v1815 = *v1810;
    }
    else
    {
      v1815 = (uint64_t *)v1813;
    }
    result = sub_20E868578(*(uint64_t **)(v1808 + 8), v1815);
    ++*(_QWORD *)(v1808 + 16);
    *(_DWORD *)(*v11 + 4 * v1731) += 4;
    v1678 = (unsigned int *)a2[17];
    v10 = v1834;
    v8 = v1835;
  }
LABEL_1691:
  v1732 = (unsigned int *)a2[15];
  if (!*((_BYTE *)v1732 + 20) || !*((_BYTE *)v1678 + 20))
  {
LABEL_1696:
    v1737 = (unsigned int *)a2[16];
    if (!*((_BYTE *)v1737 + 20))
      goto LABEL_1701;
    goto LABEL_1697;
  }
  v1733 = v7[2239] + *v1732;
  v1734 = *(_QWORD *)(*v9 + 8 * v1733);
  v1735 = v7[2240] + *v1678;
  v1736 = *(_QWORD *)(*v9 + 8 * v1735);
  if (v1734 > v1736 || v1734 > *v8)
  {
LABEL_1695:
    v10 = v1834;
    goto LABEL_1696;
  }
  v1816 = *v1834 + 24 * v1735;
  v1818 = (uint64_t **)(v1816 + 8);
  v1817 = *(uint64_t **)(v1816 + 8);
  if (v1817)
  {
    while (1)
    {
      while (1)
      {
        v1819 = (uint64_t **)v1817;
        v1820 = *((_DWORD *)v1817 + 7);
        if (v1820 <= v1733)
          break;
        v1817 = *v1819;
        v1818 = v1819;
        if (!*v1819)
          goto LABEL_1791;
      }
      if (v1820 >= v1733)
        goto LABEL_1695;
      v1817 = v1819[1];
      if (!v1817)
      {
        v1818 = v1819 + 1;
        goto LABEL_1791;
      }
    }
  }
  v1819 = (uint64_t **)(v1816 + 8);
LABEL_1791:
  v1821 = operator new(0x20uLL);
  v1821[7] = v1733;
  *(_QWORD *)v1821 = 0;
  *((_QWORD *)v1821 + 1) = 0;
  *((_QWORD *)v1821 + 2) = v1819;
  *v1818 = (uint64_t *)v1821;
  v1822 = **(_QWORD **)v1816;
  if (v1822)
  {
    *(_QWORD *)v1816 = v1822;
    v1823 = *v1818;
  }
  else
  {
    v1823 = (uint64_t *)v1821;
  }
  result = sub_20E868578(*(uint64_t **)(v1816 + 8), v1823);
  ++*(_QWORD *)(v1816 + 16);
  *(_DWORD *)(*v11 + 4 * v1736) += 3;
  v1737 = (unsigned int *)a2[16];
  v1678 = (unsigned int *)a2[17];
  v10 = v1834;
  v8 = v1835;
  if (!*((_BYTE *)v1737 + 20))
    goto LABEL_1701;
LABEL_1697:
  if (*((_BYTE *)v1678 + 20))
  {
    v1738 = v7[2239] + *v1737;
    v1739 = *(_QWORD *)(*v9 + 8 * v1738);
    v1740 = v7[2240] + *v1678;
    v1741 = *(_QWORD *)(*v9 + 8 * v1740);
    if (v1739 <= v1741 && v1739 <= *v8)
    {
      v1824 = *v1834 + 24 * v1740;
      v1826 = (uint64_t **)(v1824 + 8);
      v1825 = *(uint64_t **)(v1824 + 8);
      if (!v1825)
      {
        v1827 = (uint64_t **)(v1824 + 8);
LABEL_1800:
        v1829 = operator new(0x20uLL);
        v1829[7] = v1738;
        *(_QWORD *)v1829 = 0;
        *((_QWORD *)v1829 + 1) = 0;
        *((_QWORD *)v1829 + 2) = v1827;
        *v1826 = (uint64_t *)v1829;
        v1830 = **(_QWORD **)v1824;
        if (v1830)
        {
          *(_QWORD *)v1824 = v1830;
          v1831 = *v1826;
        }
        else
        {
          v1831 = (uint64_t *)v1829;
        }
        result = sub_20E868578(*(uint64_t **)(v1824 + 8), v1831);
        ++*(_QWORD *)(v1824 + 16);
        *(_DWORD *)(*v11 + 4 * v1741) += 3;
        v1678 = (unsigned int *)a2[17];
        v10 = v1834;
        v8 = v1835;
        goto LABEL_1701;
      }
      while (1)
      {
        while (1)
        {
          v1827 = (uint64_t **)v1825;
          v1828 = *((_DWORD *)v1825 + 7);
          if (v1828 <= v1738)
            break;
          v1825 = *v1827;
          v1826 = v1827;
          if (!*v1827)
            goto LABEL_1800;
        }
        if (v1828 >= v1738)
          break;
        v1825 = v1827[1];
        if (!v1825)
        {
          v1826 = v1827 + 1;
          goto LABEL_1800;
        }
      }
    }
    v10 = v1834;
  }
LABEL_1701:
  if (*((_BYTE *)v1678 + 20))
  {
    v1742 = v7[2240] + *v1678;
    v1743 = *(_QWORD *)(*v9 + 8 * v1742);
    if (v1743 <= *v8)
    {
      v1744 = *v10 + 24 * v1742;
      v1746 = (uint64_t **)(v1744 + 8);
      v1745 = *(uint64_t **)(v1744 + 8);
      if (v1745)
      {
        while (1)
        {
          while (1)
          {
            v1747 = (uint64_t **)v1745;
            v1748 = *((_DWORD *)v1745 + 7);
            if (v1748 <= v1742)
              break;
            v1745 = *v1747;
            v1746 = v1747;
            if (!*v1747)
              goto LABEL_1710;
          }
          if (v1748 >= v1742)
            break;
          v1745 = v1747[1];
          if (!v1745)
          {
            v1746 = v1747 + 1;
            goto LABEL_1710;
          }
        }
      }
      else
      {
        v1747 = (uint64_t **)(v1744 + 8);
LABEL_1710:
        v1749 = operator new(0x20uLL);
        v1749[7] = v1742;
        *(_QWORD *)v1749 = 0;
        *((_QWORD *)v1749 + 1) = 0;
        *((_QWORD *)v1749 + 2) = v1747;
        *v1746 = (uint64_t *)v1749;
        v1750 = **(_QWORD **)v1744;
        if (v1750)
        {
          *(_QWORD *)v1744 = v1750;
          v1751 = *v1746;
        }
        else
        {
          v1751 = (uint64_t *)v1749;
        }
        result = sub_20E868578(*(uint64_t **)(v1744 + 8), v1751);
        ++*(_QWORD *)(v1744 + 16);
        ++*(_DWORD *)(*v11 + 4 * v1743);
      }
    }
  }
  return result;
}

uint64_t sub_20F7ACD4C(uint64_t result, uint64_t *a2, uint64_t **a3, uint64_t a4, char a5)
{
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *i;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int *v21;
  unsigned int v22;
  unsigned int v23;
  uint64_t v24;
  unsigned int *v25;
  unsigned int v26;
  unsigned int v27;
  _DWORD *v28;
  uint64_t *j;
  uint64_t v30;
  _DWORD *v31;
  unsigned int v32;
  BOOL v33;
  uint64_t *v34;
  uint64_t v35;
  unsigned int v36;
  uint64_t *k;
  unsigned int v38;
  uint64_t v39;
  uint64_t *v40;
  unsigned int v41;
  uint64_t *v42;
  uint64_t v43;
  _DWORD *v44;
  unsigned int v45;
  uint64_t v46;
  unsigned int v47;
  uint64_t *v48;
  uint64_t *v49;
  uint64_t v50;
  _DWORD *v51;
  unsigned int v52;
  BOOL v53;
  uint64_t *v54;
  uint64_t *v55;
  _DWORD *v56;
  unsigned int v57;
  BOOL v58;
  unsigned int v59;
  unsigned int v60;
  uint64_t v61;
  uint64_t v62;
  unsigned int v63;
  uint64_t *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unsigned int v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unsigned int v74;
  uint64_t v75;
  uint64_t *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  _DWORD *v80;
  unsigned int v81;
  unsigned int v82;
  uint64_t *v83;
  uint64_t *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t *v87;
  uint64_t *v88;
  uint64_t *v89;
  uint64_t v90;
  uint64_t v91;
  _DWORD *v92;
  unsigned int v93;
  unsigned int v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  int64_t v99;
  int64_t v100;
  uint64_t *v101;
  int64_t v102;
  uint64_t v103;
  uint64_t *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  _DWORD *v108;
  unsigned int v109;
  unsigned int v110;
  uint64_t v111;
  _DWORD *v112;
  unsigned int v113;
  _DWORD *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  _DWORD *v118;
  unsigned int v119;
  unsigned int v120;
  _DWORD *v121;
  unsigned int v122;
  BOOL v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  _DWORD *v127;
  unsigned int v128;
  unsigned int v129;
  uint64_t v130;
  uint64_t v132;
  uint64_t *v133;
  uint64_t v134;
  uint64_t *v135;
  uint64_t *v136;
  uint64_t v137;
  uint64_t v138;
  _DWORD *v139;
  unsigned int v140;
  unsigned int v141;
  uint64_t *v142;
  uint64_t v143;
  unint64_t v144;
  unint64_t v145;
  uint64_t *v146;
  uint64_t v147;
  uint64_t v148;
  unsigned int v149;
  unsigned int v150;
  uint64_t *v151;
  _DWORD *v152;
  unint64_t v153;
  uint64_t v154;
  unint64_t v155;
  unsigned int v156;
  uint64_t *v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  _DWORD *v162;
  unsigned int v163;
  unsigned int v164;
  uint64_t v165;
  unsigned int v166;
  uint64_t *v167;
  uint64_t *v168;
  uint64_t v169;
  uint64_t v170;

  v9 = (uint64_t *)result;
LABEL_2:
  v10 = a2 - 1;
  i = v9;
  while (2)
  {
    v9 = i;
    v12 = (char *)a2 - (char *)i;
    v13 = a2 - i;
    switch(v13)
    {
      case 0:
      case 1:
        return result;
      case 2:
        v77 = *(a2 - 1);
        v78 = *i;
        v79 = **a3;
        v80 = (_DWORD *)(v79 + 8 * v77);
        v81 = v80[1];
        v82 = *(_DWORD *)(v79 + 8 * *i + 4);
        if (v81 == -1)
        {
          if (v82 != -1)
            goto LABEL_337;
        }
        else
        {
          if (v82 == -1)
            return result;
          if (v81 < v82)
            goto LABEL_337;
          if (v81 != v82)
            return result;
        }
        if (*v80 >= *(_DWORD *)(v79 + 8 * v78))
          return result;
LABEL_337:
        *i = v77;
        *(a2 - 1) = v78;
        return result;
      case 3:
        return (uint64_t)sub_20F761840(i, i + 1, v10, **a3);
      case 4:
        return (uint64_t)sub_20F761D54(i, i + 1, i + 2, v10, a3);
      case 5:
        return (uint64_t)sub_20F761EC8(i, i + 1, i + 2, i + 3, v10, a3);
      default:
        if (v12 <= 191)
        {
          v83 = *a3;
          if ((a5 & 1) != 0)
          {
            if (i == a2)
              return result;
            v84 = i + 1;
            if (i + 1 == a2)
              return result;
            v85 = 0;
            v86 = *v83;
            v87 = i;
            while (1)
            {
              v89 = v87;
              v87 = v84;
              v91 = *v89;
              v90 = v89[1];
              v92 = (_DWORD *)(v86 + 8 * v90);
              v93 = v92[1];
              v94 = *(_DWORD *)(v86 + 8 * *v89 + 4);
              if (v93 == -1)
                break;
              if (v94 == -1)
                goto LABEL_189;
              if (v93 >= v94)
              {
                if (v93 != v94)
                  goto LABEL_189;
                goto LABEL_203;
              }
              v89[1] = v91;
              v95 = v85;
              v88 = i;
              if (v89 != i)
                goto LABEL_208;
LABEL_188:
              *v88 = v90;
LABEL_189:
              v84 = v87 + 1;
              v85 += 8;
              if (v87 + 1 == a2)
                return result;
            }
            if (v94 == -1)
            {
LABEL_203:
              if (*v92 >= *(_DWORD *)(v86 + 8 * v91))
                goto LABEL_189;
              v89[1] = v91;
              v88 = i;
              if (v89 == i)
                goto LABEL_188;
              v95 = v85;
              if (v93 != -1)
              {
LABEL_208:
                while (1)
                {
                  v98 = *(uint64_t *)((char *)i + v95 - 8);
                  result = *(unsigned int *)(v86 + 8 * v98 + 4);
                  if ((_DWORD)result == -1)
                    break;
                  if (v93 >= result)
                  {
                    if (v93 != (_DWORD)result)
                      break;
                    result = *(unsigned int *)(v86 + 8 * v98);
                    if (*v92 >= result)
                    {
                      v88 = (uint64_t *)((char *)i + v95);
                      goto LABEL_188;
                    }
                  }
                  --v89;
                  *(uint64_t *)((char *)i + v95) = v98;
                  v95 -= 8;
                  if (!v95)
                  {
LABEL_187:
                    v88 = i;
                    goto LABEL_188;
                  }
                }
                v88 = v89;
                goto LABEL_188;
              }
            }
            else
            {
              v89[1] = v91;
              v88 = i;
              if (v89 == i)
                goto LABEL_188;
            }
            v96 = v85;
            while (1)
            {
              v97 = *(uint64_t *)((char *)i + v96 - 8);
              if (*(_DWORD *)(v86 + 8 * v97 + 4) == -1 && *v92 >= *(_DWORD *)(v86 + 8 * v97))
                break;
              *(uint64_t *)((char *)i + v96) = v97;
              v96 -= 8;
              if (!v96)
                goto LABEL_187;
            }
            v88 = (uint64_t *)((char *)i + v96);
            goto LABEL_188;
          }
          if (i == a2)
            return result;
          v158 = i + 1;
          if (i + 1 == a2)
            return result;
          v159 = *v83;
          while (1)
          {
            v160 = *v158;
            v161 = *v9;
            v162 = (_DWORD *)(v159 + 8 * *v158);
            v163 = v162[1];
            v164 = *(_DWORD *)(v159 + 8 * *v9 + 4);
            if (v163 == -1)
            {
              if (v164 == -1)
              {
                v168 = v9;
                if (*v162 >= *(_DWORD *)(v159 + 8 * v161))
                  goto LABEL_316;
              }
              else
              {
                v168 = v9;
              }
              do
              {
                do
                {
                  v167 = v168;
                  v169 = v161;
                  v170 = *--v168;
                  v161 = v170;
                  v168[2] = v169;
                }
                while (*(_DWORD *)(v159 + 8 * v170 + 4) != -1);
              }
              while (*v162 < *(_DWORD *)(v159 + 8 * v161));
            }
            else
            {
              if (v164 == -1 || v163 >= v164 && (v163 != v164 || *v162 >= *(_DWORD *)(v159 + 8 * v161)))
                goto LABEL_316;
              *v158 = v161;
              v165 = *(v9 - 1);
              v166 = *(_DWORD *)(v159 + 8 * v165 + 4);
              v167 = v9;
              if (v166 != -1)
              {
                v167 = v9;
                do
                {
                  if (v163 >= v166 && (v163 != v166 || *v162 >= *(_DWORD *)(v159 + 8 * v165)))
                    break;
                  *v167 = v165;
                  v165 = *(v167 - 2);
                  v166 = *(_DWORD *)(v159 + 8 * v165 + 4);
                  --v167;
                }
                while (v166 != -1);
              }
            }
            *v167 = v160;
LABEL_316:
            ++v158;
            ++v9;
            if (v158 == a2)
              return result;
          }
        }
        if (a4)
        {
          v14 = (unint64_t)v13 >> 1;
          v15 = &i[(unint64_t)v13 >> 1];
          v16 = **a3;
          if ((unint64_t)v12 >= 0x401)
          {
            sub_20F761840(v9, v15, v10, v16);
            v17 = &v9[v14];
            sub_20F761840(v9 + 1, v17 - 1, a2 - 2, **a3);
            sub_20F761840(v9 + 2, &v9[v14 + 1], a2 - 3, **a3);
            result = (uint64_t)sub_20F761840(v17 - 1, v15, &v9[v14 + 1], **a3);
            v18 = *v9;
            *v9 = *v17;
            *v17 = v18;
            v10 = a2 - 1;
            --a4;
            v19 = **a3;
            v20 = *v9;
            if ((a5 & 1) != 0)
              goto LABEL_14;
LABEL_8:
            v21 = (unsigned int *)(v19 + 8 * *(v9 - 1));
            v22 = v21[1];
            v23 = *(_DWORD *)(v19 + 8 * v20 + 4);
            if (v22 == -1)
            {
              if (v23 != -1)
                goto LABEL_17;
            }
            else
            {
              if (v23 == -1)
              {
                v24 = *v10;
                v25 = (unsigned int *)(v19 + 8 * v20);
                v26 = *(_DWORD *)(v19 + 8 * *v10 + 4);
                if (v26 != -1)
                  goto LABEL_115;
                v27 = *v25;
                goto LABEL_113;
              }
              if (v22 < v23)
                goto LABEL_17;
              if (v22 != v23)
              {
                v24 = *v10;
                v25 = (unsigned int *)(v19 + 8 * v20);
                v26 = *(_DWORD *)(v19 + 8 * *v10 + 4);
LABEL_100:
                if (v26 == -1)
                  goto LABEL_126;
                v59 = v26;
                if (v23 >= v26)
                {
                  if (v23 != v26)
                    goto LABEL_126;
                  if (*v25 >= *(_DWORD *)(v19 + 8 * v24))
                  {
                    v26 = *(_DWORD *)(v19 + 8 * v20 + 4);
LABEL_126:
                    i = v9 + 1;
                    if (v9 + 1 >= a2)
                      goto LABEL_147;
                    do
                    {
                      v63 = *(_DWORD *)(v19 + 8 * *i + 4);
                      if (v63 != -1 && (v23 < v63 || v23 == v63 && *v25 < *(_DWORD *)(v19 + 8 * *i)))
                        break;
                      ++i;
                    }
                    while (i < a2);
                    goto LABEL_133;
                  }
                  v59 = *(_DWORD *)(v19 + 8 * v20 + 4);
                }
                for (i = v9 + 1; ; ++i)
                {
                  v60 = *(_DWORD *)(v19 + 8 * *i + 4);
                  if (v60 != -1 && (v23 < v60 || v23 == v60 && *v25 < *(_DWORD *)(v19 + 8 * *i)))
                    break;
                }
                goto LABEL_134;
              }
            }
            v27 = *(_DWORD *)(v19 + 8 * v20);
            if (*v21 < v27)
              goto LABEL_17;
            v25 = (unsigned int *)(v19 + 8 * v20);
            v24 = *v10;
            v26 = *(_DWORD *)(v19 + 8 * *v10 + 4);
            if (v23 != -1)
              goto LABEL_100;
            if (v26 != -1)
              goto LABEL_115;
LABEL_113:
            if (v27 < *(_DWORD *)(v19 + 8 * v24))
            {
              v26 = -1;
LABEL_115:
              i = v9 + 1;
              v61 = v9[1];
              if (*(_DWORD *)(v19 + 8 * v61 + 4) == -1)
              {
                do
                {
                  if (*v25 < *(_DWORD *)(v19 + 8 * v61))
                    break;
                  v62 = i[1];
                  ++i;
                  v61 = v62;
                }
                while (*(_DWORD *)(v19 + 8 * v62 + 4) == -1);
              }
LABEL_133:
              v59 = v26;
              goto LABEL_134;
            }
            i = v9 + 1;
            if (v9 + 1 < a2)
            {
              while (*(_DWORD *)(v19 + 8 * *i + 4) == -1 && v27 >= *(_DWORD *)(v19 + 8 * *i))
              {
                ++i;
                v26 = -1;
                if (i >= a2)
                {
                  v59 = -1;
                  goto LABEL_134;
                }
              }
            }
            v26 = -1;
            v59 = -1;
LABEL_134:
            if (i >= a2)
            {
LABEL_147:
              v64 = a2;
              goto LABEL_148;
            }
            v64 = v10;
            if (v23 == -1)
            {
              while (v26 != -1 || *v25 < *(_DWORD *)(v19 + 8 * v24))
              {
                v65 = *--v64;
                v24 = v65;
                v26 = *(_DWORD *)(v19 + 8 * v65 + 4);
              }
            }
            else
            {
              while (v59 != -1 && (v23 < v59 || v23 == v59 && *v25 < *(_DWORD *)(v19 + 8 * v24)))
              {
                v66 = *--v64;
                v24 = v66;
                v59 = *(_DWORD *)(v19 + 8 * v66 + 4);
              }
            }
LABEL_148:
            if (i < v64)
            {
              v67 = *i;
              v68 = *v64;
              do
              {
                *i = v68;
                *v64 = v67;
                if (v23 == -1)
                {
                  v71 = i[1];
                  ++i;
                  v67 = v71;
                  if (*(_DWORD *)(v19 + 8 * v71 + 4) != -1)
                    goto LABEL_167;
                  do
                  {
                    if (*v25 < *(_DWORD *)(v19 + 8 * v67))
                      break;
                    v72 = i[1];
                    ++i;
                    v67 = v72;
                  }
                  while (*(_DWORD *)(v19 + 8 * v72 + 4) == -1);
LABEL_160:
                  if (v23 == -1)
                  {
LABEL_167:
                    do
                    {
                      do
                      {
                        v75 = *--v64;
                        v68 = v75;
                      }
                      while (*(_DWORD *)(v19 + 8 * v75 + 4) != -1);
                    }
                    while (*v25 < *(_DWORD *)(v19 + 8 * v68));
                    continue;
                  }
                }
                else
                {
                  while (1)
                  {
                    do
                    {
                      v69 = i[1];
                      ++i;
                      v67 = v69;
                      v70 = *(_DWORD *)(v19 + 8 * v69 + 4);
                    }
                    while (v70 == -1);
                    if (v23 < v70)
                      break;
                    if (v23 == v70 && *v25 < *(_DWORD *)(v19 + 8 * v67))
                      goto LABEL_160;
                  }
                }
                do
                {
                  v73 = *--v64;
                  v68 = v73;
                  v74 = *(_DWORD *)(v19 + 8 * v73 + 4);
                }
                while (v74 != -1 && (v23 < v74 || v23 == v74 && *v25 < *(_DWORD *)(v19 + 8 * v68)));
              }
              while (i < v64);
            }
            v76 = i - 1;
            if (i - 1 != v9)
              *v9 = *v76;
            a5 = 0;
            *v76 = v20;
            continue;
          }
          result = (uint64_t)sub_20F761840(v15, v9, v10, v16);
          --a4;
          v19 = **a3;
          v20 = *v9;
          if ((a5 & 1) == 0)
            goto LABEL_8;
LABEL_14:
          v23 = *(_DWORD *)(v19 + 8 * v20 + 4);
LABEL_17:
          v28 = (_DWORD *)(v19 + 8 * v20);
          if (v23 != -1)
          {
            for (j = v9 + 1; ; ++j)
            {
              v30 = *j;
              v31 = (_DWORD *)(v19 + 8 * *j);
              v32 = v31[1];
              v33 = v32 != -1 && v32 >= v23;
              if (v33 && (v32 != v23 || *v31 >= *v28))
                break;
            }
            v34 = j - 1;
            if (j - 1 != v9)
            {
LABEL_28:
              if (v23 != -1)
              {
                v35 = *v10;
                v36 = *(_DWORD *)(v19 + 8 * *v10 + 4);
                k = v10;
                if (v36 != -1)
                {
                  v38 = v23;
                  do
                  {
                    if (v36 < v38)
                      break;
                    if (v36 == v38)
                    {
                      v38 = v36;
                      if (*(_DWORD *)(v19 + 8 * v35) < *v28)
                        break;
                    }
                    v39 = *--k;
                    v35 = v39;
                    v36 = *(_DWORD *)(v19 + 8 * v39 + 4);
                  }
                  while (v36 != -1);
                }
                goto LABEL_59;
              }
              for (k = v10; *(_DWORD *)(v19 + 8 * *k + 4) != -1 || *(_DWORD *)(v19 + 8 * *k) >= *v28; --k)
                ;
              v23 = -1;
              if (j >= k)
                goto LABEL_91;
LABEL_60:
              v46 = *k;
              v47 = v23;
              v48 = j;
              v49 = k;
              do
              {
                *v48 = v46;
                *v49 = v30;
                if (v47 == -1)
                {
                  v54 = v48 + 1;
                  do
                  {
                    v48 = v54;
                    v30 = *v54;
                    if (*(_DWORD *)(v19 + 8 * *v54 + 4) != -1)
                      break;
                    ++v54;
                  }
                  while (*(_DWORD *)(v19 + 8 * v30) < *v28);
                }
                else
                {
                  do
                  {
                    v50 = v48[1];
                    ++v48;
                    v30 = v50;
                    v51 = (_DWORD *)(v19 + 8 * v50);
                    v52 = v51[1];
                    v53 = v52 != -1 && v52 >= v47;
                  }
                  while (!v53 || v52 == v47 && *v51 < *v28);
                }
                v34 = v48 - 1;
LABEL_76:
                v55 = v49 - 1;
                while (1)
                {
                  v49 = v55;
                  v46 = *v55;
                  v56 = (_DWORD *)(v19 + 8 * *v55);
                  v57 = v56[1];
                  if (v57 == -1)
                    break;
                  if (v47 == -1)
                    goto LABEL_76;
                  if (v57 < v47)
                    goto LABEL_62;
                  v55 = v49 - 1;
                  if (v57 == v47)
                  {
                    if (*(_DWORD *)(v19 + 8 * v46) >= *v28)
                      goto LABEL_76;
                    goto LABEL_62;
                  }
                }
                if (v23 != -1)
                {
                  v47 = v23;
                  continue;
                }
                v47 = -1;
                if (*v56 >= *v28)
                  goto LABEL_76;
LABEL_62:
                ;
              }
              while (v48 < v49);
              goto LABEL_91;
            }
            goto LABEL_42;
          }
          j = v9 + 1;
          v30 = v9[1];
          if (*(_DWORD *)(v19 + 8 * v30 + 4) == -1 && *(_DWORD *)(v19 + 8 * v30) < *v28)
          {
            v40 = v9 + 2;
            do
            {
              j = v40;
              v30 = *v40;
              if (*(_DWORD *)(v19 + 8 * *v40 + 4) != -1)
                break;
              ++v40;
            }
            while (*(_DWORD *)(v19 + 8 * v30) < *v28);
            v34 = j - 1;
            v23 = -1;
            if (j - 1 != v9)
              goto LABEL_28;
LABEL_42:
            if (j >= a2)
              goto LABEL_58;
            goto LABEL_43;
          }
          v23 = -1;
          if (j >= a2)
          {
LABEL_58:
            v34 = v9;
            k = a2;
LABEL_59:
            if (j >= k)
              goto LABEL_91;
            goto LABEL_60;
          }
LABEL_43:
          v41 = v23;
          k = a2;
          do
          {
            v42 = k - 1;
            while (1)
            {
              k = v42;
              v43 = *v42;
              v44 = (_DWORD *)(v19 + 8 * *v42);
              v45 = v44[1];
              if (v45 == -1)
                break;
              if (v41 != -1)
              {
                if (v45 < v41)
                  goto LABEL_55;
                if (v45 == v41)
                {
                  v44 = (_DWORD *)(v19 + 8 * v43);
                  goto LABEL_53;
                }
              }
              v42 = k - 1;
              if (j >= k)
                goto LABEL_55;
            }
            if (v23 != -1)
              break;
            v41 = -1;
LABEL_53:
            ;
          }
          while (j < k && *v44 >= *v28);
LABEL_55:
          v34 = v9;
          if (j < k)
            goto LABEL_60;
LABEL_91:
          if (v34 != v9)
            *v9 = *v34;
          *v34 = v20;
          if (j < k)
            goto LABEL_96;
          v58 = sub_20F7ADECC(v9, v34, a3);
          i = v34 + 1;
          result = sub_20F7ADECC(v34 + 1, a2, a3);
          if (!(_DWORD)result)
          {
            if (v58)
              continue;
LABEL_96:
            result = sub_20F7ACD4C(v9, v34, a3, a4, a5 & 1);
            a5 = 0;
            i = v34 + 1;
            continue;
          }
          a2 = v34;
          if (v58)
            return result;
          goto LABEL_2;
        }
        if (i == a2)
          return result;
        v99 = (unint64_t)(v13 - 2) >> 1;
        v100 = v99;
        do
        {
          v102 = v100;
          if (v99 < v100)
            goto LABEL_218;
          v103 = (2 * v100) | 1;
          v104 = &i[v103];
          v105 = 2 * v100 + 2;
          v106 = **a3;
          if (v105 < v13)
          {
            v107 = v104[1];
            v108 = (_DWORD *)(v106 + 8 * *v104);
            v109 = v108[1];
            v110 = *(_DWORD *)(v106 + 8 * v107 + 4);
            if (v109 == -1)
            {
              if (v110 == -1)
              {
LABEL_227:
                if (*v108 >= *(_DWORD *)(v106 + 8 * v107))
                  goto LABEL_229;
              }
LABEL_228:
              ++v104;
              v103 = 2 * v102 + 2;
              goto LABEL_229;
            }
            if (v110 == -1)
              goto LABEL_229;
            if (v109 < v110)
              goto LABEL_228;
            if (v109 == v110)
              goto LABEL_227;
          }
LABEL_229:
          v111 = i[v102];
          v112 = (_DWORD *)(v106 + 8 * *v104);
          v113 = v112[1];
          result = *(unsigned int *)(v106 + 8 * v111 + 4);
          if (v113 == -1)
          {
            if ((_DWORD)result != -1)
              goto LABEL_218;
LABEL_235:
            result = v112[1];
            if (*v112 < *(_DWORD *)(v106 + 8 * v111))
              goto LABEL_218;
            goto LABEL_236;
          }
          if ((_DWORD)result != -1)
          {
            if (v113 < result)
              goto LABEL_218;
            if (v113 == (_DWORD)result)
              goto LABEL_235;
          }
LABEL_236:
          i[v102] = *v104;
          if (v99 >= v103)
          {
            v114 = (_DWORD *)(v106 + 8 * v111);
            if ((_DWORD)result == -1)
            {
              while (2)
              {
                v124 = 2 * v103;
                v103 = (2 * v103) | 1;
                v101 = &i[v103];
                v125 = v124 + 2;
                if (v125 >= v13)
                  goto LABEL_259;
                v126 = v101[1];
                v127 = (_DWORD *)(v106 + 8 * *v101);
                v128 = v127[1];
                v129 = *(_DWORD *)(v106 + 8 * v126 + 4);
                if (v128 == -1)
                {
                  if (v129 == -1)
                    goto LABEL_266;
                }
                else
                {
                  if (v129 == -1)
                    goto LABEL_259;
                  if (v128 >= v129)
                  {
                    if (v128 != v129)
                      goto LABEL_259;
LABEL_266:
                    if (*v127 >= *(_DWORD *)(v106 + 8 * v126))
                      goto LABEL_259;
                  }
                }
                ++v101;
                v103 = v125;
LABEL_259:
                result = *v101;
                if (*(_DWORD *)(v106 + 8 * *v101 + 4) == -1 && *(_DWORD *)(v106 + 8 * result) < *v114)
                  goto LABEL_216;
                *v104 = result;
                v104 = v101;
                if (v99 < v103)
                  goto LABEL_217;
                continue;
              }
            }
            while (2)
            {
              v115 = 2 * v103;
              v103 = (2 * v103) | 1;
              v101 = &i[v103];
              v116 = v115 + 2;
              if (v116 < v13)
              {
                v117 = v101[1];
                v118 = (_DWORD *)(v106 + 8 * *v101);
                v119 = v118[1];
                v120 = *(_DWORD *)(v106 + 8 * v117 + 4);
                if (v119 == -1)
                {
                  if (v120 == -1)
                    goto LABEL_247;
                  goto LABEL_248;
                }
                if (v120 != -1)
                {
                  if (v119 < v120)
                    goto LABEL_248;
                  if (v119 != v120)
                    goto LABEL_249;
LABEL_247:
                  if (*v118 < *(_DWORD *)(v106 + 8 * v117))
                  {
LABEL_248:
                    ++v101;
                    v103 = v116;
                  }
                }
              }
LABEL_249:
              v121 = (_DWORD *)(v106 + 8 * *v101);
              v122 = v121[1];
              v123 = v122 != -1 && v122 >= result;
              if (!v123 || v122 == (_DWORD)result && *v121 < *v114)
                break;
              *v104 = *v101;
              v104 = v101;
              if (v99 < v103)
                goto LABEL_217;
              continue;
            }
          }
LABEL_216:
          v101 = v104;
LABEL_217:
          *v101 = v111;
LABEL_218:
          v100 = v102 - 1;
        }
        while (v102);
        v130 = (unint64_t)v12 >> 3;
        while (2)
        {
          if (v130 < 2)
            goto LABEL_272;
          v132 = 0;
          v133 = *a3;
          v134 = *i;
          v135 = i;
          while (2)
          {
            v136 = v135;
            v135 += v132 + 1;
            v137 = 2 * v132;
            v132 = (2 * v132) | 1;
            v138 = v137 + 2;
            if (v138 >= v130)
              goto LABEL_278;
            result = v135[1];
            v139 = (_DWORD *)(*v133 + 8 * *v135);
            v140 = v139[1];
            v141 = *(_DWORD *)(*v133 + 8 * result + 4);
            if (v140 == -1)
            {
              if (v141 == -1)
                goto LABEL_284;
              goto LABEL_277;
            }
            if (v141 == -1)
              goto LABEL_278;
            if (v140 < v141)
              goto LABEL_277;
            if (v140 != v141)
              goto LABEL_278;
LABEL_284:
            result *= 8;
            if (*v139 < *(_DWORD *)(*v133 + result))
            {
LABEL_277:
              ++v135;
              v132 = v138;
            }
LABEL_278:
            *v136 = *v135;
            if (v132 <= (uint64_t)((unint64_t)(v130 - 2) >> 1))
              continue;
            break;
          }
          v142 = a2 - 1;
          if (v135 == a2 - 1)
          {
            *v135 = v134;
          }
          else
          {
            *v135 = *v142;
            *v142 = v134;
            v143 = (char *)v135 - (char *)i + 8;
            if (v143 >= 9)
            {
              v144 = ((unint64_t)v143 >> 3) - 2;
              v145 = v144 >> 1;
              v146 = &i[v144 >> 1];
              v147 = *v135;
              v148 = *v133;
              result = v148 + 8 * *v146;
              v149 = *(_DWORD *)(result + 4);
              v150 = *(_DWORD *)(v148 + 8 * *v135 + 4);
              if (v149 == -1)
              {
                if (v150 == -1)
                  goto LABEL_294;
LABEL_295:
                *v135 = *v146;
                if (v144 >= 2)
                {
                  v152 = (_DWORD *)(v148 + 8 * v147);
                  if (v150 == -1)
                  {
                    while (1)
                    {
                      v153 = v145 - 1;
                      v145 = (v145 - 1) >> 1;
                      v151 = &i[v145];
                      v154 = *v151;
                      if (*(_DWORD *)(v148 + 8 * *v151 + 4) != -1)
                        break;
                      result = *v152;
                      if (*(_DWORD *)(v148 + 8 * v154) >= result)
                        break;
                      *v146 = v154;
                      v146 = &i[v145];
                      if (v153 < 2)
                        goto LABEL_297;
                    }
                  }
                  else
                  {
                    while (1)
                    {
                      v155 = v145 - 1;
                      v145 = (v145 - 1) >> 1;
                      v151 = &i[v145];
                      result = v148 + 8 * *v151;
                      v156 = *(_DWORD *)(result + 4);
                      if (v156 != -1 && v156 >= v150)
                      {
                        if (v156 != v150)
                          break;
                        result = *(unsigned int *)result;
                        if (result >= *v152)
                          break;
                      }
                      *v146 = *v151;
                      v146 = &i[v145];
                      if (v155 <= 1)
                        goto LABEL_297;
                    }
                  }
                }
                v151 = v146;
LABEL_297:
                *v151 = v147;
              }
              else if (v150 != -1)
              {
                if (v149 < v150)
                  goto LABEL_295;
                if (v149 == v150)
                {
LABEL_294:
                  result = *(unsigned int *)result;
                  v150 = v149;
                  if (result < *(_DWORD *)(v148 + 8 * v147))
                    goto LABEL_295;
                }
              }
            }
          }
LABEL_272:
          --a2;
          if ((unint64_t)v130-- > 2)
            continue;
          return result;
        }
    }
  }
}

BOOL sub_20F7ADECC(uint64_t *a1, uint64_t *a2, uint64_t **a3)
{
  uint64_t v6;
  _BOOL8 result;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  _DWORD *v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _DWORD *v28;
  unsigned int v29;
  unsigned int v30;

  v6 = a2 - a1;
  result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v25 = *(a2 - 1);
      v26 = *a1;
      v27 = **a3;
      v28 = (_DWORD *)(v27 + 8 * v25);
      v29 = v28[1];
      v30 = *(_DWORD *)(v27 + 8 * *a1 + 4);
      if (v29 == -1)
      {
        if (v30 != -1)
          goto LABEL_43;
      }
      else
      {
        if (v30 == -1)
          return result;
        if (v29 < v30)
          goto LABEL_43;
        if (v29 != v30)
          return result;
      }
      if (*v28 >= *(_DWORD *)(v27 + 8 * v26))
        return result;
LABEL_43:
      *a1 = v25;
      *(a2 - 1) = v26;
      return result;
    case 3:
      sub_20F761840(a1, a1 + 1, a2 - 1, **a3);
      return 1;
    case 4:
      sub_20F761D54(a1, a1 + 1, a1 + 2, a2 - 1, a3);
      return 1;
    case 5:
      sub_20F761EC8(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1, a3);
      return 1;
    default:
      v8 = a1 + 2;
      sub_20F761840(a1, a1 + 1, a1 + 2, **a3);
      v9 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v10 = 0;
      v11 = 0;
      v12 = **a3;
      break;
  }
  while (1)
  {
    v14 = *v9;
    v15 = *v8;
    v16 = (_DWORD *)(v12 + 8 * *v9);
    v17 = v16[1];
    v18 = *(_DWORD *)(v12 + 8 * *v8 + 4);
    if (v17 == -1)
    {
      if (v18 != -1)
      {
        *v9 = v15;
        v13 = a1;
        if (v8 == a1)
          goto LABEL_6;
LABEL_15:
        v20 = v10;
        while (1)
        {
          v21 = *(uint64_t *)((char *)a1 + v20 + 8);
          if (*(_DWORD *)(v12 + 8 * v21 + 4) == -1 && *v16 >= *(_DWORD *)(v12 + 8 * v21))
            break;
          *(uint64_t *)((char *)a1 + v20 + 16) = v21;
          v20 -= 8;
          if (v20 == -16)
            goto LABEL_5;
        }
        v13 = (uint64_t *)((char *)a1 + v20 + 16);
        goto LABEL_6;
      }
    }
    else
    {
      if (v18 == -1)
        goto LABEL_7;
      if (v17 < v18)
      {
        *v9 = v15;
        v19 = v10;
        v13 = a1;
        if (v8 != a1)
          goto LABEL_26;
        goto LABEL_6;
      }
      if (v17 != v18)
        goto LABEL_7;
    }
    if (*v16 >= *(_DWORD *)(v12 + 8 * v15))
      goto LABEL_7;
    *v9 = v15;
    v13 = a1;
    if (v8 != a1)
    {
      v19 = v10;
      if (v17 == -1)
        goto LABEL_15;
LABEL_26:
      while (1)
      {
        v22 = (char *)a1 + v19;
        v23 = *(uint64_t *)((char *)a1 + v19 + 8);
        v24 = *(_DWORD *)(v12 + 8 * v23 + 4);
        if (v24 == -1)
          break;
        if (v17 >= v24 && (v17 != v24 || *v16 >= *(_DWORD *)(v12 + 8 * v23)))
        {
          v13 = v8;
          goto LABEL_6;
        }
        --v8;
        *((_QWORD *)v22 + 2) = v23;
        v19 -= 8;
        if (v19 == -16)
        {
LABEL_5:
          v13 = a1;
          goto LABEL_6;
        }
      }
      v13 = (uint64_t *)(v22 + 16);
    }
LABEL_6:
    *v13 = v14;
    if (++v11 == 8)
      return v9 + 1 == a2;
LABEL_7:
    v8 = v9;
    v10 += 8;
    if (++v9 == a2)
      return 1;
  }
}

void sub_20F7AE1E8(_QWORD *a1, uint64_t a2)
{
  unsigned int **v2;
  uint64_t v5;
  float64x2_t *v6;
  _BOOL4 v7;
  uint64_t v8;
  float64x2_t *v9;
  double v16;
  long double v17;
  double v18;
  double v19;
  unsigned int *v20;
  _QWORD *v21;
  float64x2_t *v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  int v26;
  float64x2_t *v27;
  const double *v28;
  float64x2_t v29;
  float64x2_t v30;
  float64x2_t *v31;
  float64x2_t v32;
  unsigned int *v33;
  _QWORD *v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t i;
  float64x2_t *v39;
  const double *v40;
  float64x2_t v41;
  float64x2_t v42;
  unsigned int *v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t j;
  float64x2_t *v47;
  const double *v48;
  float64x2_t v49;
  float64x2_t v50;
  unsigned int *v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t k;
  float64x2_t *v55;
  const double *v56;
  float64x2_t v57;
  float64x2_t v58;
  unsigned int *v59;
  unint64_t v60;
  unint64_t v61;
  float64x2_t *v62;
  float64x2_t *v63;
  float64x2_t v64;
  float64x2_t *v65;
  float64x2_t v66;
  float64x2_t *v67;
  float64x2_t v68;
  float64x2_t *v69;
  float64x2_t v70;
  float64x2_t *v71;
  float64x2_t v72;
  float64x2_t *v73;
  float64x2_t v74;
  unsigned int *v75;
  unint64_t v76;
  unint64_t v77;
  float64x2_t *v78;
  float64x2_t *v79;
  float64x2_t v80;
  float64x2_t *v81;
  float64x2_t v82;
  float64x2_t *v83;
  float64x2_t v84;
  float64x2_t *v85;
  float64x2_t v86;
  float64x2_t *v87;
  float64x2_t v88;
  float64x2_t *v89;
  float64x2_t v90;
  unsigned int *v91;
  unint64_t v92;
  unint64_t v93;
  float64x2_t *v94;
  float64x2_t *v95;
  float64x2_t v96;
  float64x2_t *v97;
  float64x2_t v98;
  float64x2_t *v99;
  float64x2_t v100;
  float64x2_t *v101;
  float64x2_t v102;
  float64x2_t *v103;
  float64x2_t v104;
  float64x2_t *v105;
  float64x2_t v106;
  unsigned int *v107;
  unint64_t v108;
  unint64_t v109;
  float64x2_t *v110;
  float64x2_t *v111;
  float64x2_t v112;
  float64x2_t *v113;
  float64x2_t v114;
  float64x2_t *v115;
  float64x2_t v116;
  float64x2_t *v117;
  float64x2_t v118;
  float64x2_t *v119;
  float64x2_t v120;
  float64x2_t *v121;
  float64x2_t v122;
  unsigned int *v123;
  unint64_t v124;
  unint64_t v125;
  float64x2_t *v126;
  float64x2_t v127;
  float64x2_t v130;
  float64x2_t *v131;
  float64x2_t v132;
  float64x2_t v135;
  float64x2_t *v136;
  float64x2_t v137;
  float64x2_t v140;
  float64x2_t *v141;
  float64x2_t v142;
  float64x2_t v145;
  float64x2_t *v146;
  float64x2_t v147;
  float64x2_t v150;
  float64x2_t *v151;
  float64x2_t v152;
  float64x2_t v155;
  unsigned int *v156;
  unint64_t v157;
  unint64_t v158;
  float64x2_t *v159;
  float64x2_t v160;
  float64x2_t v163;
  float64x2_t *v164;
  float64x2_t v165;
  float64x2_t v168;
  float64x2_t *v169;
  float64x2_t v170;
  float64x2_t v173;
  float64x2_t *v174;
  float64x2_t v175;
  float64x2_t v178;
  float64x2_t *v179;
  float64x2_t v180;
  float64x2_t v183;
  float64x2_t *v184;
  float64x2_t v185;
  float64x2_t v188;
  unsigned int *v189;
  uint64_t v190;
  unint64_t v191;
  unint64_t v192;
  uint64_t m;
  float64x2_t *v194;
  double v195;
  double v196;
  float64x2_t v197;
  float64x2_t v198;
  uint64_t v199;
  uint64_t v200;
  double *v201;
  float64x2_t *v202;
  double v203;
  float64x2_t v204;
  float64x2_t *v205;
  float64x2_t v206;
  unsigned int *v207;
  unsigned int *v208;
  unint64_t v209;
  unint64_t v210;
  uint64_t v211;
  double *v212;
  float64x2_t *v213;
  double v214;
  float64x2_t v215;
  unsigned int *v216;
  unsigned int *v217;
  unint64_t v218;
  unint64_t v219;
  uint64_t v220;
  double *v221;
  float64x2_t *v222;
  double v223;
  float64x2_t v224;
  unsigned int *v225;
  _QWORD *v226;
  unsigned int *v227;
  unint64_t v228;
  unint64_t v229;
  float64x2_t *v230;
  float64x2_t *v231;
  float64x2_t v232;
  float64x2_t *v233;
  float64x2_t v234;
  float64x2_t *v235;
  float64x2_t v236;
  float64x2_t *v237;
  float64x2_t v238;
  float64x2_t *v239;
  float64x2_t v240;
  float64x2_t *v241;
  float64x2_t v242;
  unsigned int *v243;
  unsigned int *v244;
  unint64_t v245;
  unint64_t v246;
  float64x2_t *v247;
  float64x2_t *v248;
  float64x2_t v249;
  float64x2_t *v250;
  float64x2_t v251;
  float64x2_t *v252;
  float64x2_t v253;
  float64x2_t *v254;
  float64x2_t v255;
  float64x2_t *v256;
  float64x2_t v257;
  float64x2_t *v258;
  float64x2_t v259;
  unsigned int *v260;
  unsigned int *v261;
  unint64_t v262;
  unint64_t v263;
  float64x2_t *v264;
  float64x2_t *v265;
  float64x2_t v266;
  float64x2_t *v267;
  float64x2_t v268;
  float64x2_t *v269;
  float64x2_t v270;
  float64x2_t *v271;
  float64x2_t v272;
  float64x2_t *v273;
  float64x2_t v274;
  float64x2_t *v275;
  float64x2_t v276;
  unsigned int *v277;
  unsigned int *v278;
  unint64_t v279;
  unint64_t v280;
  float64x2_t *v281;
  float64x2_t *v282;
  float64x2_t v283;
  float64x2_t *v284;
  float64x2_t v285;
  float64x2_t *v286;
  float64x2_t v287;
  float64x2_t *v288;
  float64x2_t v289;
  float64x2_t *v290;
  float64x2_t v291;
  float64x2_t *v292;
  float64x2_t v293;
  unsigned int *v294;
  unsigned int *v295;
  unint64_t v296;
  unint64_t v297;
  float64x2_t *v298;
  float64x2_t v299;
  float64x2_t v302;
  float64x2_t *v303;
  float64x2_t v304;
  float64x2_t v307;
  float64x2_t *v308;
  float64x2_t v309;
  float64x2_t v312;
  float64x2_t *v313;
  float64x2_t v314;
  float64x2_t v317;
  float64x2_t *v318;
  float64x2_t v319;
  float64x2_t v322;
  float64x2_t *v323;
  float64x2_t v324;
  float64x2_t v327;
  unsigned int *v328;
  unsigned int *v329;
  unint64_t v330;
  unint64_t v331;
  float64x2_t *v332;
  float64x2_t v333;
  float64x2_t v336;
  float64x2_t *v337;
  float64x2_t v338;
  float64x2_t v341;
  float64x2_t *v342;
  float64x2_t v343;
  float64x2_t v346;
  float64x2_t *v347;
  float64x2_t v348;
  float64x2_t v351;
  float64x2_t *v352;
  float64x2_t v353;
  float64x2_t v356;
  float64x2_t *v357;
  float64x2_t v358;
  float64x2_t v361;
  unsigned int *v362;
  unsigned int *v363;
  unint64_t v364;
  unint64_t v365;
  uint64_t n;
  float64x2_t *v367;
  double v368;
  double v369;
  float64x2_t v370;
  float64x2_t v371;
  unsigned int *v372;
  unint64_t v373;
  unint64_t v374;
  uint64_t v375;
  double *v376;
  float64x2_t *v377;
  double v378;
  float64x2_t v379;
  uint64_t v380;
  uint64_t v381;
  double *v382;
  float64x2_t *v383;
  double v384;
  float64x2_t v385;
  float64x2_t *v386;
  float64x2_t v387;
  unsigned int *v388;
  unsigned int *v389;
  uint64_t v390;
  unint64_t v391;
  unint64_t v392;
  uint64_t v393;
  double *v394;
  float64x2_t *v395;
  double v396;
  float64x2_t v397;
  unsigned int *v398;
  _QWORD *v399;
  unsigned int *v400;
  unint64_t v401;
  unint64_t v402;
  float64x2_t *v403;
  float64x2_t *v404;
  float64x2_t v405;
  float64x2_t *v406;
  float64x2_t v407;
  float64x2_t *v408;
  float64x2_t v409;
  float64x2_t *v410;
  float64x2_t v411;
  float64x2_t *v412;
  float64x2_t v413;
  float64x2_t *v414;
  float64x2_t v415;
  unsigned int *v416;
  unsigned int *v417;
  unint64_t v418;
  unint64_t v419;
  float64x2_t *v420;
  float64x2_t *v421;
  float64x2_t v422;
  float64x2_t *v423;
  float64x2_t v424;
  float64x2_t *v425;
  float64x2_t v426;
  float64x2_t *v427;
  float64x2_t v428;
  float64x2_t *v429;
  float64x2_t v430;
  float64x2_t *v431;
  float64x2_t v432;
  unsigned int *v433;
  unsigned int *v434;
  unint64_t v435;
  unint64_t v436;
  float64x2_t *v437;
  float64x2_t *v438;
  float64x2_t v439;
  float64x2_t *v440;
  float64x2_t v441;
  float64x2_t *v442;
  float64x2_t v443;
  float64x2_t *v444;
  float64x2_t v445;
  float64x2_t *v446;
  float64x2_t v447;
  float64x2_t *v448;
  float64x2_t v449;
  unsigned int *v450;
  unsigned int *v451;
  unint64_t v452;
  unint64_t v453;
  float64x2_t *v454;
  float64x2_t *v455;
  float64x2_t v456;
  float64x2_t *v457;
  float64x2_t v458;
  float64x2_t *v459;
  float64x2_t v460;
  float64x2_t *v461;
  float64x2_t v462;
  float64x2_t *v463;
  float64x2_t v464;
  float64x2_t *v465;
  float64x2_t v466;
  unsigned int *v467;
  unsigned int *v468;
  unint64_t v469;
  unint64_t v470;
  float64x2_t *v471;
  float64x2_t v472;
  float64x2_t v475;
  float64x2_t *v476;
  float64x2_t v477;
  float64x2_t v480;
  float64x2_t *v481;
  float64x2_t v482;
  float64x2_t v485;
  float64x2_t *v486;
  float64x2_t v487;
  float64x2_t v490;
  float64x2_t *v491;
  float64x2_t v492;
  float64x2_t v495;
  float64x2_t *v496;
  float64x2_t v497;
  float64x2_t v500;
  unsigned int *v501;
  unsigned int *v502;
  unint64_t v503;
  unint64_t v504;
  float64x2_t *v505;
  float64x2_t v506;
  float64x2_t v509;
  float64x2_t *v510;
  float64x2_t v511;
  float64x2_t v514;
  float64x2_t *v515;
  float64x2_t v516;
  float64x2_t v519;
  float64x2_t *v520;
  float64x2_t v521;
  float64x2_t v524;
  float64x2_t *v525;
  float64x2_t v526;
  float64x2_t v529;
  float64x2_t *v530;
  float64x2_t v531;
  float64x2_t v534;
  unsigned int *v535;
  unsigned int *v536;
  unint64_t v537;
  unint64_t v538;
  uint64_t ii;
  float64x2_t *v540;
  double v541;
  double v542;
  float64x2_t v543;
  float64x2_t v544;
  unsigned int *v545;
  unint64_t v546;
  unint64_t v547;
  uint64_t v548;
  double *v549;
  float64x2_t *v550;
  double v551;
  float64x2_t v552;
  unsigned int *v553;
  uint64_t v554;
  unint64_t v555;
  unint64_t v556;
  uint64_t v557;
  double *v558;
  float64x2_t *v559;
  double v560;
  float64x2_t v561;
  uint64_t v562;
  uint64_t v563;
  double *v564;
  float64x2_t *v565;
  double v566;
  float64x2_t v567;
  float64x2_t *v568;
  float64x2_t v569;
  unsigned int *v570;
  unsigned int *v571;
  unint64_t v572;
  unint64_t v573;
  float64x2_t *v574;
  float64x2_t *v575;
  float64x2_t v576;
  float64x2_t *v577;
  float64x2_t v578;
  float64x2_t *v579;
  float64x2_t v580;
  float64x2_t *v581;
  float64x2_t v582;
  float64x2_t *v583;
  float64x2_t v584;
  float64x2_t *v585;
  float64x2_t v586;
  unsigned int *v587;
  unsigned int *v588;
  unint64_t v589;
  unint64_t v590;
  float64x2_t *v591;
  float64x2_t *v592;
  float64x2_t v593;
  float64x2_t *v594;
  float64x2_t v595;
  float64x2_t *v596;
  float64x2_t v597;
  float64x2_t *v598;
  float64x2_t v599;
  float64x2_t *v600;
  float64x2_t v601;
  float64x2_t *v602;
  float64x2_t v603;
  unsigned int *v604;
  unsigned int *v605;
  unint64_t v606;
  unint64_t v607;
  float64x2_t *v608;
  float64x2_t *v609;
  float64x2_t v610;
  float64x2_t *v611;
  float64x2_t v612;
  float64x2_t *v613;
  float64x2_t v614;
  float64x2_t *v615;
  float64x2_t v616;
  float64x2_t *v617;
  float64x2_t v618;
  float64x2_t *v619;
  float64x2_t v620;
  unsigned int *v621;
  unsigned int *v622;
  unint64_t v623;
  unint64_t v624;
  float64x2_t *v625;
  float64x2_t *v626;
  float64x2_t v627;
  float64x2_t *v628;
  float64x2_t v629;
  float64x2_t *v630;
  float64x2_t v631;
  float64x2_t *v632;
  float64x2_t v633;
  float64x2_t *v634;
  float64x2_t v635;
  float64x2_t *v636;
  float64x2_t v637;
  unsigned int *v638;
  unsigned int *v639;
  unint64_t v640;
  unint64_t v641;
  float64x2_t *v642;
  float64x2_t v643;
  float64x2_t v646;
  float64x2_t *v647;
  float64x2_t v648;
  float64x2_t v651;
  float64x2_t *v652;
  float64x2_t v653;
  float64x2_t v656;
  float64x2_t *v657;
  float64x2_t v658;
  float64x2_t v661;
  float64x2_t *v662;
  float64x2_t v663;
  float64x2_t v666;
  float64x2_t *v667;
  float64x2_t v668;
  float64x2_t v671;
  unsigned int *v672;
  unsigned int *v673;
  unint64_t v674;
  unint64_t v675;
  float64x2_t *v676;
  float64x2_t v677;
  float64x2_t v680;
  float64x2_t *v681;
  float64x2_t v682;
  float64x2_t v685;
  float64x2_t *v686;
  float64x2_t v687;
  float64x2_t v690;
  float64x2_t *v691;
  float64x2_t v692;
  float64x2_t v695;
  float64x2_t *v696;
  float64x2_t v697;
  float64x2_t v700;
  float64x2_t *v701;
  float64x2_t v702;
  float64x2_t v705;
  unsigned int *v706;
  unsigned int *v707;
  unint64_t v708;
  unint64_t v709;
  uint64_t jj;
  float64x2_t *v711;
  double v712;
  double v713;
  float64x2_t v714;
  float64x2_t v715;
  unsigned int *v716;
  unint64_t v717;
  unint64_t v718;
  uint64_t v719;
  double *v720;
  float64x2_t *v721;
  double v722;
  float64x2_t v723;
  unsigned int *v724;
  unint64_t v725;
  unint64_t v726;
  uint64_t v727;
  double *v728;
  float64x2_t *v729;
  double v730;
  float64x2_t v731;
  unsigned int *v732;
  unint64_t v733;
  unint64_t v734;
  uint64_t v735;
  double *v736;
  float64x2_t *v737;
  double v738;
  float64x2_t v739;
  uint64_t v740;
  float64x2_t *v741;
  float64x2_t v742;
  float64x2_t *v743;
  float64x2_t v744;
  float64x2_t *v745;
  float64x2_t v746;
  float64x2_t *v747;
  float64x2_t v748;
  float64x2_t *v749;
  float64x2_t v750;
  unsigned int *v751;
  unsigned int *v752;
  uint64_t v753;
  unint64_t v754;
  unint64_t v755;
  float64x2_t *v756;
  float64x2_t *v757;
  float64x2_t v758;
  float64x2_t *v759;
  float64x2_t v760;
  float64x2_t *v761;
  float64x2_t v762;
  float64x2_t *v763;
  float64x2_t v764;
  unsigned int *v765;
  unsigned int *v766;
  unint64_t v767;
  unint64_t v768;
  float64x2_t *v769;
  float64x2_t *v770;
  float64x2_t v771;
  float64x2_t *v772;
  float64x2_t v773;
  float64x2_t *v774;
  float64x2_t v775;
  float64x2_t *v776;
  float64x2_t v777;
  unsigned int *v778;
  unsigned int *v779;
  unint64_t v780;
  unint64_t v781;
  float64x2_t *v782;
  float64x2_t *v783;
  float64x2_t v784;
  float64x2_t *v785;
  float64x2_t v786;
  float64x2_t *v787;
  float64x2_t v788;
  float64x2_t *v789;
  float64x2_t v790;
  unsigned int *v791;
  unsigned int *v792;
  unint64_t v793;
  unint64_t v794;
  float64x2_t *v795;
  float64x2_t v796;
  float64x2_t v798;
  float64x2_t *v799;
  float64x2_t v800;
  float64x2_t v802;
  float64x2_t *v803;
  float64x2_t v804;
  float64x2_t v806;
  float64x2_t *v807;
  float64x2_t v808;
  float64x2_t v810;
  unsigned int *v811;
  unsigned int *v812;
  unint64_t v813;
  unint64_t v814;
  float64x2_t *v815;
  float64x2_t v816;
  float64x2_t v818;
  float64x2_t *v819;
  float64x2_t v820;
  float64x2_t v822;
  float64x2_t *v823;
  float64x2_t v824;
  float64x2_t v826;
  float64x2_t *v827;
  float64x2_t v828;
  float64x2_t v830;
  unsigned int *v831;
  unsigned int *v832;
  unint64_t v833;
  unint64_t v834;
  uint64_t kk;
  float64x2_t *v836;
  double v837;
  double v838;
  float64x2_t v839;
  float64x2_t v840;
  unsigned int *v841;
  unint64_t v842;
  unint64_t v843;
  uint64_t v844;
  double *v845;
  float64x2_t *v846;
  double v847;
  float64x2_t v848;
  unsigned int *v849;
  unint64_t v850;
  unint64_t v851;
  uint64_t v852;
  double *v853;
  float64x2_t *v854;
  double v855;
  float64x2_t v856;
  unsigned int *v857;
  unint64_t v858;
  unint64_t v859;
  uint64_t v860;
  double *v861;
  float64x2_t *v862;
  double v863;
  float64x2_t v864;
  unsigned int *v865;
  uint64_t v866;
  unint64_t v867;
  unint64_t v868;
  float64x2_t *v869;
  float64x2_t *v870;
  float64x2_t v871;
  float64x2_t *v872;
  float64x2_t v873;
  float64x2_t *v874;
  float64x2_t v875;
  float64x2_t *v876;
  float64x2_t v877;
  uint64_t v878;
  float64x2_t *v879;
  float64x2_t v880;
  float64x2_t *v881;
  float64x2_t v882;
  float64x2_t *v883;
  float64x2_t v884;
  float64x2_t *v885;
  float64x2_t v886;
  float64x2_t *v887;
  float64x2_t v888;
  unsigned int *v889;
  unsigned int *v890;
  unint64_t v891;
  unint64_t v892;
  float64x2_t *v893;
  float64x2_t *v894;
  float64x2_t v895;
  float64x2_t *v896;
  float64x2_t v897;
  float64x2_t *v898;
  float64x2_t v899;
  float64x2_t *v900;
  float64x2_t v901;
  unsigned int *v902;
  unsigned int *v903;
  unint64_t v904;
  unint64_t v905;
  float64x2_t *v906;
  float64x2_t *v907;
  float64x2_t v908;
  float64x2_t *v909;
  float64x2_t v910;
  float64x2_t *v911;
  float64x2_t v912;
  float64x2_t *v913;
  float64x2_t v914;
  unsigned int *v915;
  unsigned int *v916;
  unint64_t v917;
  unint64_t v918;
  float64x2_t *v919;
  float64x2_t v920;
  float64x2_t v922;
  float64x2_t *v923;
  float64x2_t v924;
  float64x2_t v926;
  float64x2_t *v927;
  float64x2_t v928;
  float64x2_t v930;
  float64x2_t *v931;
  float64x2_t v932;
  float64x2_t v934;
  unsigned int *v935;
  unsigned int *v936;
  unint64_t v937;
  unint64_t v938;
  float64x2_t *v939;
  float64x2_t v940;
  float64x2_t v942;
  float64x2_t *v943;
  float64x2_t v944;
  float64x2_t v946;
  float64x2_t *v947;
  float64x2_t v948;
  float64x2_t v950;
  float64x2_t *v951;
  float64x2_t v952;
  float64x2_t v954;
  unsigned int *v955;
  unsigned int *v956;
  unint64_t v957;
  unint64_t v958;
  uint64_t mm;
  float64x2_t *v960;
  double v961;
  double v962;
  float64x2_t v963;
  float64x2_t v964;
  unsigned int *v965;
  unint64_t v966;
  unint64_t v967;
  uint64_t v968;
  double *v969;
  float64x2_t *v970;
  double v971;
  float64x2_t v972;
  unsigned int *v973;
  unint64_t v974;
  unint64_t v975;
  uint64_t v976;
  double *v977;
  float64x2_t *v978;
  double v979;
  float64x2_t v980;
  unsigned int *v981;
  unint64_t v982;
  unint64_t v983;
  uint64_t v984;
  double *v985;
  float64x2_t *v986;
  double v987;
  float64x2_t v988;
  unsigned int *v989;
  unint64_t v990;
  unint64_t v991;
  float64x2_t *v992;
  float64x2_t *v993;
  float64x2_t v994;
  float64x2_t *v995;
  float64x2_t v996;
  float64x2_t *v997;
  float64x2_t v998;
  float64x2_t *v999;
  float64x2_t v1000;
  unsigned int *v1001;
  unint64_t v1002;
  unint64_t v1003;
  float64x2_t *v1004;
  float64x2_t *v1005;
  float64x2_t v1006;
  float64x2_t *v1007;
  float64x2_t v1008;
  float64x2_t *v1009;
  float64x2_t v1010;
  float64x2_t *v1011;
  float64x2_t v1012;
  uint64_t v1013;
  float64x2_t *v1014;
  float64x2_t v1015;
  float64x2_t *v1016;
  float64x2_t v1017;
  float64x2_t *v1018;
  float64x2_t v1019;
  float64x2_t *v1020;
  float64x2_t v1021;
  float64x2_t *v1022;
  float64x2_t v1023;
  unsigned int *v1024;
  unsigned int *v1025;
  uint64_t v1026;
  unint64_t v1027;
  unint64_t v1028;
  float64x2_t *v1029;
  float64x2_t *v1030;
  float64x2_t v1031;
  float64x2_t *v1032;
  float64x2_t v1033;
  float64x2_t *v1034;
  float64x2_t v1035;
  float64x2_t *v1036;
  float64x2_t v1037;
  unsigned int *v1038;
  unsigned int *v1039;
  unint64_t v1040;
  unint64_t v1041;
  float64x2_t *v1042;
  float64x2_t v1043;
  float64x2_t v1045;
  float64x2_t *v1046;
  float64x2_t v1047;
  float64x2_t v1049;
  float64x2_t *v1050;
  float64x2_t v1051;
  float64x2_t v1053;
  float64x2_t *v1054;
  float64x2_t v1055;
  float64x2_t v1057;
  unsigned int *v1058;
  unsigned int *v1059;
  unint64_t v1060;
  unint64_t v1061;
  float64x2_t *v1062;
  float64x2_t v1063;
  float64x2_t v1065;
  float64x2_t *v1066;
  float64x2_t v1067;
  float64x2_t v1069;
  float64x2_t *v1070;
  float64x2_t v1071;
  float64x2_t v1073;
  float64x2_t *v1074;
  float64x2_t v1075;
  float64x2_t v1077;
  unsigned int *v1078;
  unsigned int *v1079;
  unint64_t v1080;
  unint64_t v1081;
  uint64_t nn;
  float64x2_t *v1083;
  double v1084;
  double v1085;
  float64x2_t v1086;
  float64x2_t v1087;
  unsigned int *v1088;
  unint64_t v1089;
  unint64_t v1090;
  uint64_t v1091;
  double *v1092;
  float64x2_t *v1093;
  double v1094;
  float64x2_t v1095;
  unsigned int *v1096;
  unint64_t v1097;
  unint64_t v1098;
  uint64_t v1099;
  double *v1100;
  float64x2_t *v1101;
  double v1102;
  float64x2_t v1103;
  unsigned int *v1104;
  unint64_t v1105;
  unint64_t v1106;
  uint64_t v1107;
  double *v1108;
  float64x2_t *v1109;
  double v1110;
  float64x2_t v1111;
  unsigned int *v1112;
  unint64_t v1113;
  unint64_t v1114;
  float64x2_t *v1115;
  float64x2_t *v1116;
  float64x2_t v1117;
  float64x2_t *v1118;
  float64x2_t v1119;
  float64x2_t *v1120;
  float64x2_t v1121;
  float64x2_t *v1122;
  float64x2_t v1123;
  unsigned int *v1124;
  unint64_t v1125;
  unint64_t v1126;
  float64x2_t *v1127;
  float64x2_t *v1128;
  float64x2_t v1129;
  float64x2_t *v1130;
  float64x2_t v1131;
  float64x2_t *v1132;
  float64x2_t v1133;
  float64x2_t *v1134;
  float64x2_t v1135;
  unsigned int *v1136;
  uint64_t v1137;
  unint64_t v1138;
  unint64_t v1139;
  float64x2_t *v1140;
  float64x2_t *v1141;
  float64x2_t v1142;
  float64x2_t *v1143;
  float64x2_t v1144;
  float64x2_t *v1145;
  float64x2_t v1146;
  float64x2_t *v1147;
  float64x2_t v1148;
  uint64_t v1149;
  float64x2_t *v1150;
  float64x2_t v1151;
  float64x2_t *v1152;
  float64x2_t v1153;
  float64x2_t *v1154;
  float64x2_t v1155;
  float64x2_t *v1156;
  float64x2_t v1157;
  float64x2_t *v1158;
  float64x2_t v1159;
  unsigned int *v1160;
  unsigned int *v1161;
  unint64_t v1162;
  unint64_t v1163;
  float64x2_t *v1164;
  float64x2_t v1165;
  float64x2_t v1167;
  float64x2_t *v1168;
  float64x2_t v1169;
  float64x2_t v1171;
  float64x2_t *v1172;
  float64x2_t v1173;
  float64x2_t v1175;
  float64x2_t *v1176;
  float64x2_t v1177;
  float64x2_t v1179;
  unsigned int *v1180;
  unsigned int *v1181;
  unint64_t v1182;
  unint64_t v1183;
  float64x2_t *v1184;
  float64x2_t v1185;
  float64x2_t v1187;
  float64x2_t *v1188;
  float64x2_t v1189;
  float64x2_t v1191;
  float64x2_t *v1192;
  float64x2_t v1193;
  float64x2_t v1195;
  float64x2_t *v1196;
  float64x2_t v1197;
  float64x2_t v1199;
  unsigned int *v1200;
  unsigned int *v1201;
  unint64_t v1202;
  unint64_t v1203;
  float64x2_t *v1204;
  float64x2_t *v1205;
  float64x2_t *v1206;
  float64x2_t v1207;
  float64x2_t v1208;
  float64x2_t *v1209;
  float64x2_t v1210;
  float64x2_t v1211;
  float64x2_t *v1212;
  float64x2_t v1213;
  float64x2_t v1214;
  unsigned int *v1215;
  unint64_t v1216;
  unint64_t v1217;
  float64x2_t *v1218;
  float64x2_t *v1219;
  float64x2_t *v1220;
  float64x2_t v1221;
  float64x2_t *v1222;
  float64x2_t v1223;
  float64x2_t *v1224;
  float64x2_t v1225;
  unsigned int *v1226;
  unint64_t v1227;
  unint64_t v1228;
  float64x2_t *v1229;
  float64x2_t *v1230;
  float64x2_t *v1231;
  float64x2_t v1232;
  float64x2_t *v1233;
  float64x2_t v1234;
  float64x2_t *v1235;
  float64x2_t v1236;
  unsigned int *v1237;
  unint64_t v1238;
  unint64_t v1239;
  float64x2_t *v1240;
  float64x2_t *v1241;
  float64x2_t *v1242;
  float64x2_t v1243;
  float64x2_t *v1244;
  float64x2_t v1245;
  float64x2_t *v1246;
  float64x2_t v1247;
  unsigned int *v1248;
  unint64_t v1249;
  unint64_t v1250;
  float64x2_t *v1251;
  float64x2_t *v1252;
  float64x2_t v1253;
  float64x2_t *v1254;
  float64x2_t v1255;
  float64x2_t *v1256;
  float64x2_t v1257;
  unsigned int *v1258;
  unint64_t v1259;
  unint64_t v1260;
  float64x2_t *v1261;
  float64x2_t *v1262;
  float64x2_t v1263;
  float64x2_t *v1264;
  float64x2_t v1265;
  float64x2_t *v1266;
  float64x2_t v1267;
  unsigned int *v1268;
  unint64_t v1269;
  unint64_t v1270;
  float64x2_t *v1271;
  float64x2_t *v1272;
  float64x2_t v1273;
  float64x2_t *v1274;
  float64x2_t v1275;
  float64x2_t *v1276;
  float64x2_t v1277;
  unsigned int *v1278;
  unint64_t v1279;
  unint64_t v1280;
  float64x2_t *v1281;
  float64x2_t *v1282;
  float64x2_t v1283;
  float64x2_t *v1284;
  float64x2_t v1285;
  float64x2_t *v1286;
  float64x2_t v1287;
  uint64_t v1288;
  float64x2_t *v1289;
  float64x2_t v1290;
  float64x2_t *v1294;
  float64x2_t v1295;
  float64x2_t *v1299;
  float64x2_t v1300;
  float64x2_t v1304;
  uint64_t v1305;
  unsigned int *v1308;
  unsigned int *v1309;
  uint64_t v1310;
  unint64_t v1311;
  unint64_t v1312;
  float64x2_t *v1313;
  float64x2_t v1314;
  float64x2_t v1316;
  float64x2_t *v1317;
  float64x2_t v1318;
  float64x2_t v1320;
  float64x2_t *v1321;
  float64x2_t v1322;
  float64x2_t v1324;
  uint64_t v1325;
  unint64_t v1326;
  unint64_t v1327;
  float64x2_t *v1328;
  float64x2_t *v1329;
  float64x2_t *v1330;
  float64x2_t v1331;
  float64x2_t v1332;
  float64x2_t *v1333;
  float64x2_t v1334;
  float64x2_t v1335;
  float64x2_t *v1336;
  float64x2_t v1337;
  float64x2_t v1338;
  unsigned int *v1339;
  unint64_t v1340;
  unint64_t v1341;
  float64x2_t *v1342;
  float64x2_t *v1343;
  float64x2_t *v1344;
  float64x2_t v1345;
  float64x2_t *v1346;
  float64x2_t v1347;
  float64x2_t *v1348;
  float64x2_t v1349;
  unsigned int *v1350;
  unint64_t v1351;
  unint64_t v1352;
  float64x2_t *v1353;
  float64x2_t *v1354;
  float64x2_t *v1355;
  float64x2_t v1356;
  float64x2_t *v1357;
  float64x2_t v1358;
  float64x2_t *v1359;
  float64x2_t v1360;
  unsigned int *v1361;
  unint64_t v1362;
  unint64_t v1363;
  float64x2_t *v1364;
  float64x2_t *v1365;
  float64x2_t *v1366;
  float64x2_t v1367;
  float64x2_t *v1368;
  float64x2_t v1369;
  float64x2_t *v1370;
  float64x2_t v1371;
  unsigned int *v1372;
  unint64_t v1373;
  unint64_t v1374;
  float64x2_t *v1375;
  float64x2_t *v1376;
  float64x2_t v1377;
  float64x2_t *v1378;
  float64x2_t v1379;
  float64x2_t *v1380;
  float64x2_t v1381;
  unsigned int *v1382;
  unint64_t v1383;
  unint64_t v1384;
  float64x2_t *v1385;
  float64x2_t *v1386;
  float64x2_t v1387;
  float64x2_t *v1388;
  float64x2_t v1389;
  float64x2_t *v1390;
  float64x2_t v1391;
  unsigned int *v1392;
  unint64_t v1393;
  unint64_t v1394;
  float64x2_t *v1395;
  float64x2_t *v1396;
  float64x2_t v1397;
  float64x2_t *v1398;
  float64x2_t v1399;
  float64x2_t *v1400;
  float64x2_t v1401;
  unsigned int *v1402;
  unint64_t v1403;
  unint64_t v1404;
  float64x2_t *v1405;
  float64x2_t *v1406;
  float64x2_t v1407;
  float64x2_t *v1408;
  float64x2_t v1409;
  float64x2_t *v1410;
  float64x2_t v1411;
  unsigned int *v1412;
  uint64_t v1413;
  unint64_t v1414;
  unint64_t v1415;
  float64x2_t *v1416;
  float64x2_t v1417;
  float64x2_t v1419;
  float64x2_t *v1420;
  float64x2_t v1421;
  float64x2_t v1423;
  float64x2_t *v1424;
  float64x2_t v1425;
  float64x2_t v1427;
  uint64_t v1428;
  float64x2_t *v1429;
  float64x2_t v1430;
  float64x2_t *v1434;
  float64x2_t v1435;
  float64x2_t *v1439;
  float64x2_t v1440;
  float64x2_t v1444;
  uint64_t v1445;
  unsigned int *v1448;
  unsigned int *v1449;
  _QWORD *v1450;
  unint64_t v1451;
  unint64_t v1452;
  float64x2_t *v1453;
  float64x2_t *v1454;
  float64x2_t *v1455;
  float64x2_t v1456;
  unsigned int *v1457;
  unint64_t v1458;
  unint64_t v1459;
  float64x2_t *v1460;
  float64x2_t *v1461;
  float64x2_t *v1462;
  float64x2_t v1463;
  float64x2_t v1464;
  unsigned int *v1465;
  unint64_t v1466;
  unint64_t v1467;
  float64x2_t *v1468;
  float64x2_t *v1469;
  float64x2_t *v1470;
  float64x2_t v1471;
  float64x2_t v1472;
  unsigned int *v1473;
  unint64_t v1474;
  unint64_t v1475;
  float64x2_t *v1476;
  float64x2_t *v1477;
  float64x2_t *v1478;
  float64x2_t v1479;
  float64x2_t v1480;
  unsigned int *v1481;
  unint64_t v1482;
  unint64_t v1483;
  float64x2_t *v1484;
  float64x2_t *v1485;
  float64x2_t v1486;
  unsigned int *v1487;
  unint64_t v1488;
  unint64_t v1489;
  float64x2_t *v1490;
  float64x2_t *v1491;
  float64x2_t v1492;
  unsigned int *v1493;
  unint64_t v1494;
  unint64_t v1495;
  float64x2_t *v1496;
  float64x2_t *v1497;
  float64x2_t v1498;
  unsigned int *v1499;
  unint64_t v1500;
  unint64_t v1501;
  float64x2_t *v1502;
  float64x2_t *v1503;
  float64x2_t v1504;
  unsigned int *v1505;
  unint64_t v1506;
  unint64_t v1507;
  float64x2_t *v1508;
  float64x2_t v1509;
  float64x2_t v1511;
  unsigned int *v1512;
  unint64_t v1513;
  unint64_t v1514;
  float64x2_t *v1515;
  float64x2_t v1516;
  float64x2_t v1518;
  uint64_t v1519;
  _DWORD *v1525;
  unsigned int **v1526;
  float64x2_t *v1527;
  _QWORD *v1528;
  float64x2_t v1529;
  _QWORD *v1530;
  float64x2_t v1531;
  float64x2_t v1532;
  float64x2_t v1533;
  float64x2_t v1534;
  float64x2_t v1535;
  float64x2_t v1536;
  float64x2_t v1537;
  float64x2_t v1538;
  float64x2_t v1539;
  float64x2_t v1540;
  float64x2_t v1541;
  float64x2_t v1542;
  float64x2_t v1543;
  float64x2_t v1544;
  float64x2_t v1545;
  float64x2_t v1546;
  float64x2_t v1547;
  float64x2_t v1548;
  float64x2_t v1549;
  float64x2_t v1550;
  float64x2_t v1551;
  float64x2_t v1552;
  float64x2_t v1553;
  float64x2_t v1554;
  float64x2_t v1555;
  float64x2_t v1556;
  float64x2_t v1557;
  float64x2_t v1558;
  float64x2_t v1559;
  float64x2_t v1560;
  float64x2_t v1561;
  float64x2_t v1562;
  float64x2_t v1563;
  float64x2_t v1564;
  float64x2_t v1565;
  float64x2_t v1566;
  float64x2_t v1567;
  float64x2_t v1568;
  float64x2_t v1569;
  float64x2_t v1570;
  float64x2_t v1571;
  float64x2_t v1572;
  float64x2_t v1573;
  float64x2_t v1574;
  float64x2_t v1575;
  float64x2_t v1576;
  float64x2_t v1577;
  float64x2x2_t v1578;
  float64x2x2_t v1579;
  float64x2x2_t v1580;
  float64x2x2_t v1581;
  float64x2x2_t v1582;
  float64x2x2_t v1583;
  float64x2x2_t v1584;
  float64x2x2_t v1585;
  float64x2x2_t v1586;
  float64x2x2_t v1587;
  float64x2x2_t v1588;
  float64x2x2_t v1589;
  float64x2x2_t v1590;
  float64x2x2_t v1591;
  float64x2x2_t v1592;
  float64x2x2_t v1593;
  float64x2x2_t v1594;
  float64x2x2_t v1595;
  float64x2x2_t v1596;
  float64x2x2_t v1597;
  float64x2x2_t v1598;
  float64x2x2_t v1599;
  float64x2x2_t v1600;
  float64x2x2_t v1601;
  float64x2x2_t v1602;
  float64x2x2_t v1603;
  float64x2x2_t v1604;
  float64x2x2_t v1605;
  float64x2x2_t v1606;
  float64x2x2_t v1607;
  float64x2x2_t v1608;
  float64x2x2_t v1609;
  float64x2x2_t v1610;
  float64x2x2_t v1611;
  float64x2x2_t v1612;
  float64x2x2_t v1613;
  float64x2x2_t v1614;
  float64x2x2_t v1615;
  float64x2x2_t v1616;
  float64x2x2_t v1617;
  float64x2x2_t v1618;
  float64x2x2_t v1619;
  float64x2x2_t v1620;
  float64x2x2_t v1621;
  float64x2x2_t v1622;
  float64x2x2_t v1623;
  float64x2x2_t v1624;
  float64x2x2_t v1625;
  float64x2x2_t v1626;
  float64x2x2_t v1627;
  float64x2x2_t v1628;
  float64x2x2_t v1629;
  float64x2x2_t v1630;
  float64x2x2_t v1631;
  float64x2x2_t v1632;
  float64x2x2_t v1633;
  float64x2x2_t v1634;
  float64x2x2_t v1635;
  float64x2x2_t v1636;
  float64x2x2_t v1637;
  float64x2x2_t v1638;
  float64x2x2_t v1639;
  float64x2x2_t v1640;
  float64x2x2_t v1641;
  float64x2x2_t v1642;
  float64x2x2_t v1643;
  float64x2x2_t v1644;
  float64x2x2_t v1645;
  float64x2x2_t v1646;
  float64x2x2_t v1647;
  float64x2x2_t v1648;
  float64x2x2_t v1649;
  float64x2x2_t v1650;
  float64x2x2_t v1651;
  float64x2x2_t v1652;
  float64x2x2_t v1653;
  float64x2x2_t v1654;
  float64x2x2_t v1655;
  float64x2x2_t v1656;
  float64x2x2_t v1657;
  float64x2x2_t v1658;
  float64x2x2_t v1659;
  float64x2x2_t v1660;
  float64x2x2_t v1661;
  float64x2x2_t v1662;
  float64x2x2_t v1663;
  float64x2x2_t v1664;
  float64x2x2_t v1665;
  float64x2x2_t v1666;
  float64x2x2_t v1667;
  float64x2x2_t v1668;
  float64x2x2_t v1669;
  float64x2x2_t v1670;
  float64x2x2_t v1671;
  float64x2x2_t v1672;
  float64x2x2_t v1673;
  float64x2x2_t v1674;
  float64x2x2_t v1675;
  float64x2x2_t v1676;
  float64x2x2_t v1677;
  float64x2x2_t v1678;
  float64x2x2_t v1679;
  float64x2x2_t v1680;
  float64x2x2_t v1681;
  float64x2x2_t v1682;
  float64x2x2_t v1683;
  float64x2x2_t v1684;
  float64x2x2_t v1685;
  float64x2x2_t v1686;
  float64x2x2_t v1687;
  float64x2x2_t v1688;
  float64x2x2_t v1689;
  float64x2x2_t v1690;
  float64x2x2_t v1691;
  float64x2x2_t v1692;
  float64x2x2_t v1693;
  float64x2x2_t v1694;
  float64x2x2_t v1695;
  float64x2x2_t v1696;
  float64x2x2_t v1697;
  float64x2x2_t v1698;
  float64x2x2_t v1699;
  float64x2x2_t v1700;
  float64x2x2_t v1701;
  float64x2x2_t v1702;
  float64x2x2_t v1703;
  float64x2x2_t v1704;
  float64x2x2_t v1705;
  float64x2x2_t v1706;
  float64x2x2_t v1707;
  float64x2x2_t v1708;
  float64x2x2_t v1709;
  float64x2x2_t v1710;
  float64x2x2_t v1711;
  float64x2x2_t v1712;
  float64x2x2_t v1713;
  float64x2x2_t v1714;
  float64x2x2_t v1715;
  float64x2x2_t v1716;
  float64x2x2_t v1717;
  float64x2x2_t v1718;
  float64x2x2_t v1719;
  float64x2x2_t v1720;
  float64x2x2_t v1721;
  float64x2x2_t v1722;
  float64x2x2_t v1723;
  float64x2x2_t v1724;
  float64x2x2_t v1725;
  float64x2x2_t v1726;
  float64x2x2_t v1727;
  float64x2x2_t v1728;
  float64x2x2_t v1729;
  float64x2x2_t v1730;
  float64x2x2_t v1731;
  float64x2x2_t v1732;
  float64x2x2_t v1733;
  float64x2x2_t v1734;
  float64x2x2_t v1735;
  float64x2x2_t v1736;
  float64x2x2_t v1737;
  float64x2x2_t v1738;
  float64x2x2_t v1739;
  float64x2x2_t v1740;
  float64x2x2_t v1741;
  float64x2x2_t v1742;
  float64x2x2_t v1743;
  float64x2x2_t v1744;
  float64x2x2_t v1745;
  float64x2x2_t v1746;
  float64x2x2_t v1747;
  float64x2x2_t v1748;
  float64x2x2_t v1749;
  float64x2x2_t v1750;
  float64x2x2_t v1751;
  float64x2x2_t v1752;
  float64x2x2_t v1753;
  float64x2x2_t v1754;
  float64x2x2_t v1755;
  float64x2x2_t v1756;
  float64x2x2_t v1757;
  float64x2x2_t v1758;
  float64x2x2_t v1759;
  float64x2x2_t v1760;
  float64x2x2_t v1761;
  float64x2x2_t v1762;
  float64x2x2_t v1763;
  float64x2x2_t v1764;
  float64x2x2_t v1765;
  float64x2x2_t v1766;
  float64x2x2_t v1767;
  float64x2x2_t v1768;
  float64x2x2_t v1769;
  float64x2x2_t v1770;
  float64x2x2_t v1771;
  float64x2x2_t v1772;
  float64x2x2_t v1773;
  float64x2x2_t v1774;
  float64x2x2_t v1775;
  float64x2x2_t v1776;
  float64x2x2_t v1777;
  float64x2x2_t v1778;
  float64x2x2_t v1779;
  float64x2x2_t v1780;
  float64x2x2_t v1781;
  float64x2x2_t v1782;
  float64x2x2_t v1783;
  float64x2x2_t v1784;
  float64x2x2_t v1785;
  float64x2x2_t v1786;
  float64x2x2_t v1787;
  float64x2x2_t v1788;
  float64x2x2_t v1789;
  float64x2x2_t v1790;
  float64x2x2_t v1791;
  float64x2x2_t v1792;
  float64x2x2_t v1793;
  float64x2x2_t v1794;
  float64x2x2_t v1795;
  float64x2x2_t v1796;
  float64x2x2_t v1797;
  float64x2x2_t v1798;
  float64x2x2_t v1799;
  float64x2x2_t v1800;
  float64x2x2_t v1801;
  float64x2x2_t v1802;
  float64x2x2_t v1803;
  float64x2x2_t v1804;
  float64x2x2_t v1805;
  float64x2x2_t v1806;
  float64x2x2_t v1807;
  float64x2x2_t v1808;
  float64x2x2_t v1809;
  float64x2x2_t v1810;
  float64x2x2_t v1811;
  float64x2x2_t v1812;
  float64x2x2_t v1813;
  float64x2x2_t v1814;
  float64x2x2_t v1815;
  float64x2x2_t v1816;
  float64x2x2_t v1817;
  float64x2x2_t v1818;
  float64x2x2_t v1819;
  float64x2x2_t v1820;
  float64x2x2_t v1821;
  float64x2x2_t v1822;
  float64x2x2_t v1823;
  float64x2x2_t v1824;
  float64x2x2_t v1825;
  float64x2x2_t v1826;
  float64x2x2_t v1827;
  float64x2x2_t v1828;
  float64x2x2_t v1829;
  float64x2x2_t v1830;
  float64x2x2_t v1831;
  float64x2x2_t v1832;
  float64x2x2_t v1833;
  float64x2x2_t v1834;
  float64x2x2_t v1835;
  float64x2x2_t v1836;
  float64x2x2_t v1837;
  float64x2x2_t v1838;
  float64x2x2_t v1839;
  float64x2x2_t v1840;
  float64x2x2_t v1841;
  float64x2x2_t v1842;
  float64x2x2_t v1843;
  float64x2x2_t v1844;
  float64x2x2_t v1845;
  float64x2x2_t v1846;
  float64x2x2_t v1847;
  float64x2x2_t v1848;
  float64x2x2_t v1849;
  float64x2x2_t v1850;
  float64x2x2_t v1851;
  float64x2x2_t v1852;
  float64x2x2_t v1853;
  float64x2x2_t v1854;
  float64x2x2_t v1855;
  float64x2x2_t v1856;
  float64x2x2_t v1857;
  float64x2x2_t v1858;
  float64x2x2_t v1859;
  float64x2x2_t v1860;
  float64x2x2_t v1861;
  float64x2x2_t v1862;
  float64x2x2_t v1863;
  float64x2x2_t v1864;
  float64x2x2_t v1865;
  float64x2x2_t v1866;
  float64x2x2_t v1867;
  float64x2x2_t v1868;
  float64x2x2_t v1869;
  float64x2x2_t v1870;
  float64x2x2_t v1871;
  float64x2x2_t v1872;
  float64x2x2_t v1873;
  float64x2x2_t v1874;
  float64x2x2_t v1875;
  float64x2x2_t v1876;
  float64x2x2_t v1877;
  float64x2x2_t v1878;
  float64x2x2_t v1879;
  float64x2x2_t v1880;
  float64x2x2_t v1881;
  float64x2x2_t v1882;
  float64x2x2_t v1883;
  float64x2x2_t v1884;
  float64x2x2_t v1885;
  float64x2x2_t v1886;
  float64x2x2_t v1887;
  float64x2x2_t v1888;
  float64x2x2_t v1889;
  float64x2x2_t v1890;
  float64x2x2_t v1891;
  float64x2x2_t v1892;
  float64x2x2_t v1893;
  float64x2x2_t v1894;
  float64x2x2_t v1895;
  float64x2x2_t v1896;
  float64x2x2_t v1897;
  float64x2x2_t v1898;
  float64x2x2_t v1899;
  float64x2x2_t v1900;
  float64x2x2_t v1901;
  float64x2x2_t v1902;
  float64x2x2_t v1903;
  float64x2x2_t v1904;
  float64x2x2_t v1905;
  float64x2x2_t v1906;
  float64x2x2_t v1907;
  float64x2x2_t v1908;
  float64x2x2_t v1909;
  float64x2x2_t v1910;
  float64x2x2_t v1911;
  float64x2x2_t v1912;
  float64x2x2_t v1913;
  float64x2x2_t v1914;
  float64x2x2_t v1915;
  float64x2x2_t v1916;
  float64x2x2_t v1917;
  float64x2x2_t v1918;
  float64x2x2_t v1919;
  float64x2x2_t v1920;
  float64x2x2_t v1921;
  float64x2x2_t v1922;
  float64x2x2_t v1923;
  float64x2x2_t v1924;
  float64x2x2_t v1925;
  float64x2x2_t v1926;
  float64x2x2_t v1927;
  float64x2x2_t v1928;
  float64x2x2_t v1929;
  float64x2x2_t v1930;
  float64x2x2_t v1931;
  float64x2x2_t v1932;
  float64x2x2_t v1933;
  float64x2x2_t v1934;
  float64x2x2_t v1935;
  float64x2x2_t v1936;
  float64x2x2_t v1937;
  float64x2x2_t v1938;
  float64x2x2_t v1939;
  float64x2x2_t v1940;
  float64x2x2_t v1941;
  float64x2x2_t v1942;
  float64x2x2_t v1943;
  float64x2x2_t v1944;
  float64x2x2_t v1945;
  float64x2x2_t v1946;
  float64x2x2_t v1947;
  float64x2x2_t v1948;
  float64x2x2_t v1949;
  float64x2x2_t v1950;
  float64x2x2_t v1951;
  float64x2x2_t v1952;
  float64x2x2_t v1953;
  float64x2x2_t v1954;
  float64x2x2_t v1955;
  float64x2x2_t v1956;
  float64x2x2_t v1957;
  float64x2x2_t v1958;
  float64x2x2_t v1959;
  float64x2x2_t v1960;
  float64x2x2_t v1961;
  float64x2x2_t v1962;
  float64x2x2_t v1963;
  float64x2x2_t v1964;
  float64x2x2_t v1965;
  float64x2x2_t v1966;
  float64x2x2_t v1967;
  float64x2x2_t v1968;
  float64x2x2_t v1969;
  float64x2x2_t v1970;
  float64x2x2_t v1971;
  float64x2x2_t v1972;
  float64x2x2_t v1973;
  float64x2x2_t v1974;
  float64x2x2_t v1975;
  float64x2x2_t v1976;
  float64x2x2_t v1977;
  float64x2x2_t v1978;
  float64x2x2_t v1979;
  float64x2x2_t v1980;
  float64x2x2_t v1981;
  float64x2x2_t v1982;
  float64x2x2_t v1983;
  float64x2x2_t v1984;
  float64x2x2_t v1985;
  float64x2x2_t v1986;
  float64x2x2_t v1987;
  float64x2x2_t v1988;
  float64x2x2_t v1989;
  float64x2x2_t v1990;
  float64x2x2_t v1991;
  float64x2x2_t v1992;
  float64x2x2_t v1993;
  float64x2x2_t v1994;
  float64x2x2_t v1995;
  float64x2x2_t v1996;
  float64x2x2_t v1997;
  float64x2x2_t v1998;
  float64x2x2_t v1999;
  float64x2x2_t v2000;
  float64x2x2_t v2001;
  float64x2x2_t v2002;
  float64x2x2_t v2003;
  float64x2x2_t v2004;
  float64x2x2_t v2005;
  float64x2x2_t v2006;
  float64x2x2_t v2007;
  float64x2x2_t v2008;
  float64x2x2_t v2009;
  float64x2x2_t v2010;
  float64x2x2_t v2011;
  float64x2x2_t v2012;
  float64x2x2_t v2013;
  float64x2x2_t v2014;
  float64x2x2_t v2015;
  float64x2x2_t v2016;
  float64x2x2_t v2017;
  float64x2x2_t v2018;
  float64x2x2_t v2019;
  float64x2x2_t v2020;
  float64x2x2_t v2021;
  float64x2x2_t v2022;
  float64x2x2_t v2023;
  float64x2x2_t v2024;
  float64x2x2_t v2025;
  float64x2x2_t v2026;
  float64x2x2_t v2027;
  float64x2x2_t v2028;
  float64x2x2_t v2029;
  float64x2x2_t v2030;
  float64x2x2_t v2031;
  float64x2x2_t v2032;
  float64x2x2_t v2033;
  float64x2x2_t v2034;
  float64x2x2_t v2035;
  float64x2x2_t v2036;
  float64x2x2_t v2037;
  float64x2x2_t v2038;
  float64x2x2_t v2039;
  float64x2x2_t v2040;
  float64x2x2_t v2041;
  float64x2x2_t v2042;
  float64x2x2_t v2043;
  float64x2x2_t v2044;
  float64x2x2_t v2045;
  float64x2x2_t v2046;
  float64x2x2_t v2047;
  float64x2x2_t v2048;
  float64x2x2_t v2049;
  float64x2x2_t v2050;
  float64x2x2_t v2051;
  float64x2x2_t v2052;
  float64x2x2_t v2053;
  float64x2x2_t v2054;
  float64x2x2_t v2055;
  float64x2x2_t v2056;
  float64x2x2_t v2057;
  float64x2x2_t v2058;
  float64x2x2_t v2059;
  float64x2x2_t v2060;
  float64x2x2_t v2061;
  float64x2x2_t v2062;
  float64x2x2_t v2063;
  float64x2x2_t v2064;
  float64x2x2_t v2065;
  float64x2x2_t v2066;
  float64x2x2_t v2067;
  float64x2x2_t v2068;
  float64x2x2_t v2069;
  float64x2x2_t v2070;
  float64x2x2_t v2071;
  float64x2x2_t v2072;
  float64x2x2_t v2073;
  float64x2x2_t v2074;
  float64x2x2_t v2075;
  float64x2x2_t v2076;
  float64x2x2_t v2077;
  float64x2x2_t v2078;
  float64x2x2_t v2079;
  float64x2x2_t v2080;
  float64x2x2_t v2081;
  float64x2x2_t v2082;
  float64x2x2_t v2083;
  float64x2x2_t v2084;
  float64x2x2_t v2085;
  float64x2x2_t v2086;
  float64x2x2_t v2087;
  float64x2x2_t v2088;
  float64x2x2_t v2089;
  float64x2x2_t v2090;
  float64x2x2_t v2091;
  float64x2x2_t v2092;
  float64x2x2_t v2093;
  float64x2x2_t v2094;
  float64x2x2_t v2095;
  float64x2x2_t v2096;
  float64x2x2_t v2097;
  float64x2x2_t v2098;
  float64x2x2_t v2099;
  float64x2x2_t v2100;
  float64x2x2_t v2101;
  float64x2x2_t v2102;
  float64x2x2_t v2103;
  float64x2x2_t v2104;
  float64x2x2_t v2105;
  float64x2x2_t v2106;
  float64x2x2_t v2107;
  float64x2x2_t v2108;
  float64x2x2_t v2109;
  float64x2x2_t v2110;
  float64x2x2_t v2111;
  float64x2x2_t v2112;
  float64x2x2_t v2113;
  float64x2x2_t v2114;
  float64x2x2_t v2115;
  float64x2x2_t v2116;
  float64x2x2_t v2117;
  float64x2x2_t v2118;
  float64x2x2_t v2119;
  float64x2x2_t v2120;
  float64x2x2_t v2121;
  float64x2x2_t v2122;
  float64x2x2_t v2123;
  float64x2x2_t v2124;
  float64x2x2_t v2125;
  float64x2x2_t v2126;
  float64x2x2_t v2127;
  float64x2x2_t v2128;
  float64x2x2_t v2129;
  float64x2x2_t v2130;
  float64x2x2_t v2131;
  float64x2x2_t v2132;
  float64x2x2_t v2133;
  float64x2x2_t v2134;
  float64x2x2_t v2135;
  float64x2x2_t v2136;
  float64x2x2_t v2137;
  float64x2x2_t v2138;
  float64x2x2_t v2139;
  float64x2x2_t v2140;
  float64x2x2_t v2141;
  float64x2x2_t v2142;
  float64x2x2_t v2143;
  float64x2x2_t v2144;
  float64x2x2_t v2145;
  float64x2x2_t v2146;
  float64x2x2_t v2147;
  float64x2x2_t v2148;
  float64x2x2_t v2149;
  float64x2x2_t v2150;
  float64x2x2_t v2151;
  float64x2x2_t v2152;
  float64x2x2_t v2153;
  float64x2x2_t v2154;
  float64x2x2_t v2155;
  float64x2x2_t v2156;
  float64x2x2_t v2157;
  float64x2x2_t v2158;
  float64x2x2_t v2159;
  float64x2x2_t v2160;
  float64x2x2_t v2161;
  float64x2x2_t v2162;
  float64x2x2_t v2163;
  float64x2x2_t v2164;
  float64x2x2_t v2165;
  float64x2x2_t v2166;
  float64x2x2_t v2167;
  float64x2x2_t v2168;
  float64x2x2_t v2169;
  float64x2x2_t v2170;
  float64x2x2_t v2171;
  float64x2x2_t v2172;
  float64x2x2_t v2173;
  float64x2x2_t v2174;
  float64x2x2_t v2175;
  float64x2x2_t v2176;
  float64x2x2_t v2177;
  float64x2x2_t v2178;
  float64x2x2_t v2179;
  float64x2x2_t v2180;
  float64x2x2_t v2181;
  float64x2x2_t v2182;
  float64x2x2_t v2183;
  float64x2x2_t v2184;
  float64x2x2_t v2185;
  float64x2x2_t v2186;
  float64x2x2_t v2187;
  float64x2x2_t v2188;
  float64x2x2_t v2189;
  float64x2x2_t v2190;
  float64x2x2_t v2191;
  float64x2x2_t v2192;
  float64x2x2_t v2193;
  float64x2x2_t v2194;
  float64x2x2_t v2195;
  float64x2x2_t v2196;
  float64x2x2_t v2197;
  float64x2x2_t v2198;
  float64x2x2_t v2199;
  float64x2x2_t v2200;
  float64x2x2_t v2201;
  float64x2x2_t v2202;
  float64x2x2_t v2203;
  float64x2x2_t v2204;
  float64x2x2_t v2205;
  float64x2x2_t v2206;
  float64x2x2_t v2207;
  float64x2x2_t v2208;
  float64x2x2_t v2209;
  float64x2x2_t v2210;
  float64x2x2_t v2211;
  float64x2x2_t v2212;
  float64x2x2_t v2213;
  float64x2x2_t v2214;
  float64x2x2_t v2215;
  float64x2x2_t v2216;
  float64x2x2_t v2217;
  float64x2x2_t v2218;
  float64x2x2_t v2219;
  float64x2x2_t v2220;
  float64x2x2_t v2221;
  float64x2x2_t v2222;
  float64x2x2_t v2223;
  float64x2x2_t v2224;
  float64x2x2_t v2225;

  v2 = (unsigned int **)(a2 + 56);
  if (((*(unsigned __int8 *)(*(_QWORD *)(a2 + 112) + 4) >> 2) & 1)
     + ((*(unsigned __int8 *)(*(_QWORD *)(a2 + 120) + 4) >> 2) & 1)
     + ((*(unsigned __int8 *)(*(_QWORD *)(a2 + 128) + 4) >> 2) & 1)
     + ((*(unsigned __int8 *)(*(_QWORD *)(a2 + 64) + 4) >> 2) & 1)
     + ((*(unsigned __int8 *)(*(_QWORD *)(a2 + 56) + 4) >> 2) & 1)
     + ((*(unsigned __int8 *)(*(_QWORD *)(a2 + 72) + 4) >> 2) & 1)
     + ((*(unsigned __int8 *)(*(_QWORD *)(a2 + 80) + 4) >> 2) & 1)
     + ((*(unsigned __int8 *)(*(_QWORD *)(a2 + 88) + 4) >> 2) & 1)
     + ((*(unsigned __int8 *)(*(_QWORD *)(a2 + 96) + 4) >> 2) & 1)
     + ((*(unsigned __int8 *)(*(_QWORD *)(a2 + 104) + 4) >> 2) & 1)
     + ((*(unsigned __int8 *)(*(_QWORD *)(a2 + 136) + 4) >> 2) & 1))
  {
    return;
  }
  v5 = a1[1];
  if (!sub_20F556208((_QWORD *)(a2 + 56)))
    return;
  v6 = (float64x2_t *)(a2 + 160);
  v7 = sub_20FC7ACA4((uint64_t)(v2 - 6), v2, a2 + 160, (uint64_t)&v1531);
  *(_BYTE *)(a2 + 184) = v7;
  if (!v7)
  {
    *(_QWORD *)(a2 + 176) = 0;
    return;
  }
  v8 = *(_QWORD *)(a2 + 192);
  if (v8)
  {
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v8 + 24))(v8, a2 + 160);
    v9 = *(float64x2_t **)(a2 + 192);
  }
  else
  {
    v9 = 0;
  }
  *(float64x2_t *)(a2 + 144) = *v6;
  v1529 = *(float64x2_t *)(a2 + 160);
  _D1 = v1529.f64[1];
  __asm { FMLA            D0, D1, V2.D[1] }
  v16 = *(double *)(v5 + 88);
  v17 = *(double *)(v5 + 96) * (*(double *)(v5 + 80) * _D0);
  v18 = v17 + 1.0;
  *(long double *)(a2 + 176) = v16 * log1p(v17);
  v19 = sqrt(1.0 / v18);
  *(float64x2_t *)(a2 + 160) = vmulq_n_f64(v1529, v19);
  v1526 = v2;
  if (v9)
  {
    sub_20F714970(v2, v9, &v1531, 1.0 / v18);
    v20 = *v2;
  }
  else
  {
    v20 = *v2;
    if (*((_BYTE *)*v2 + 20))
    {
      v1531 = vmulq_n_f64(v1531, v19);
      v1532 = vmulq_n_f64(v1532, v19);
      v1533 = vmulq_n_f64(v1533, v19);
      v1534 = vmulq_n_f64(v1534, v19);
      v1535 = vmulq_n_f64(v1535, v19);
      v1536 = vmulq_n_f64(v1536, v19);
    }
    if (*(_BYTE *)(*(_QWORD *)(a2 + 64) + 20))
    {
      v1537 = vmulq_n_f64(v1537, v19);
      v1538 = vmulq_n_f64(v1538, v19);
      v1539 = vmulq_n_f64(v1539, v19);
      v1540 = vmulq_n_f64(v1540, v19);
      v1541 = vmulq_n_f64(v1541, v19);
      v1542 = vmulq_n_f64(v1542, v19);
    }
    if (*(_BYTE *)(*(_QWORD *)(a2 + 72) + 20))
    {
      v1543 = vmulq_n_f64(v1543, v19);
      v1544 = vmulq_n_f64(v1544, v19);
      v1545 = vmulq_n_f64(v1545, v19);
      v1546 = vmulq_n_f64(v1546, v19);
      v1547 = vmulq_n_f64(v1547, v19);
      v1548 = vmulq_n_f64(v1548, v19);
    }
    if (*(_BYTE *)(*(_QWORD *)(a2 + 80) + 20))
    {
      v1549 = vmulq_n_f64(v1549, v19);
      v1550 = vmulq_n_f64(v1550, v19);
      v1551 = vmulq_n_f64(v1551, v19);
      v1552 = vmulq_n_f64(v1552, v19);
      v1553 = vmulq_n_f64(v1553, v19);
      v1554 = vmulq_n_f64(v1554, v19);
    }
    if (*(_BYTE *)(*(_QWORD *)(a2 + 88) + 20))
    {
      v1557 = vmulq_n_f64(v1557, v19);
      v1558 = vmulq_n_f64(v1558, v19);
      v1555 = vmulq_n_f64(v1555, v19);
      v1556 = vmulq_n_f64(v1556, v19);
    }
    if (*(_BYTE *)(*(_QWORD *)(a2 + 96) + 20))
    {
      v1561 = vmulq_n_f64(v1561, v19);
      v1562 = vmulq_n_f64(v1562, v19);
      v1559 = vmulq_n_f64(v1559, v19);
      v1560 = vmulq_n_f64(v1560, v19);
    }
    if (*(_BYTE *)(*(_QWORD *)(a2 + 104) + 20))
    {
      v1565 = vmulq_n_f64(v1565, v19);
      v1566 = vmulq_n_f64(v1566, v19);
      v1563 = vmulq_n_f64(v1563, v19);
      v1564 = vmulq_n_f64(v1564, v19);
    }
    if (*(_BYTE *)(*(_QWORD *)(a2 + 112) + 20))
    {
      v1569 = vmulq_n_f64(v1569, v19);
      v1570 = vmulq_n_f64(v1570, v19);
      v1567 = vmulq_n_f64(v1567, v19);
      v1568 = vmulq_n_f64(v1568, v19);
    }
    if (*(_BYTE *)(*(_QWORD *)(a2 + 120) + 20))
    {
      v1571 = vmulq_n_f64(v1571, v19);
      v1572 = vmulq_n_f64(v1572, v19);
      v1573 = vmulq_n_f64(v1573, v19);
    }
    if (*(_BYTE *)(*(_QWORD *)(a2 + 128) + 20))
    {
      v1574 = vmulq_n_f64(v1574, v19);
      v1575 = vmulq_n_f64(v1575, v19);
      v1576 = vmulq_n_f64(v1576, v19);
    }
    if (*(_BYTE *)(*(_QWORD *)(a2 + 136) + 20))
      v1577 = vmulq_n_f64(v1577, v19);
  }
  v21 = (_QWORD *)a1[2];
  v1525 = (_DWORD *)a1[3];
  v1528 = v21;
  v1530 = (_QWORD *)v5;
  if (*((_BYTE *)v20 + 20))
  {
    v22 = (float64x2_t *)(a2 + 160);
    v23 = 0;
    v24 = *(_QWORD *)(*(_QWORD *)a1[2] + 8 * (*(_QWORD *)(v5 + 17888) + *v20));
    v25 = (_QWORD *)(v5 + 18232);
    v26 = v24;
    do
    {
      v27 = (float64x2_t *)sub_20F762098(v25, v24, v26, 6u);
      v1578 = vld2q_f64(v1533.f64);
      v2173 = vld2q_f64(v1535.f64);
      v28 = &v1531.f64[v23];
      v29 = vld1q_dup_f64(v28++);
      v30 = vmlaq_n_f64(vmulq_f64(v1578.val[0], v29), v1578.val[1], *v28);
      v1578.val[0] = vaddq_f64(v27[2], vmlaq_n_f64(vmulq_f64(v2173.val[0], v29), v2173.val[1], *v28));
      v1578.val[1] = vaddq_f64(v27[1], v30);
      *v27 = vaddq_f64(*v27, vmlaq_n_f64(vmulq_f64((float64x2_t)vzip1q_s64((int64x2_t)v1531, (int64x2_t)v1532), v29), (float64x2_t)vzip2q_s64((int64x2_t)v1531, (int64x2_t)v1532), *v28));
      v27[1] = v1578.val[1];
      v27[2] = v1578.val[0];
      v23 += 2;
      ++v26;
    }
    while (v23 != 12);
    v31 = (float64x2_t *)(v1530[2270] + 8 * v24);
    v1579 = vld2q_f64(v1533.f64);
    v2174 = vld2q_f64(v1535.f64);
    v6 = (float64x2_t *)(a2 + 160);
    v32 = vmlaq_laneq_f64(vmulq_n_f64(v1579.val[0], v22->f64[0]), v1579.val[1], *v22, 1);
    v1579.val[0] = vsubq_f64(v31[2], vmlaq_laneq_f64(vmulq_n_f64(v2174.val[0], v22->f64[0]), v2174.val[1], *v22, 1));
    v1579.val[1] = vsubq_f64(v31[1], v32);
    *v31 = vsubq_f64(*v31, vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)vzip1q_s64((int64x2_t)v1531, (int64x2_t)v1532), v22->f64[0]), (float64x2_t)vzip2q_s64((int64x2_t)v1531, (int64x2_t)v1532), *v22, 1));
    v31[1] = v1579.val[1];
    v31[2] = v1579.val[0];
    v20 = *v1526;
    v21 = v1528;
  }
  v1527 = v6;
  v33 = *(unsigned int **)(a2 + 64);
  if (*((_BYTE *)v33 + 20))
  {
    v34 = v1530;
    if (!*((_BYTE *)v20 + 20))
      goto LABEL_43;
    v35 = v1530[2236];
    v36 = *(_QWORD *)(*v21 + 8 * (v35 + *v33));
    v37 = *(_QWORD *)(*v21 + 8 * (v35 + *v20));
    if (v36 > v37)
      goto LABEL_43;
    for (i = 0; i != 12; i += 2)
    {
      v39 = (float64x2_t *)sub_20F762098(v1530 + 2279, v36, v37, 6u);
      v1580 = vld2q_f64(v1537.f64);
      v1828 = vld2q_f64(v1539.f64);
      v2145 = vld2q_f64(v1541.f64);
      v40 = &v1531.f64[i];
      v41 = vld1q_dup_f64(v40++);
      v42 = vmlaq_n_f64(vmulq_f64(v1580.val[0], v41), v1580.val[1], *v40);
      v1580.val[1] = vaddq_f64(v39[2], vmlaq_n_f64(vmulq_f64(v2145.val[0], v41), v2145.val[1], *v40));
      v1580.val[0] = vaddq_f64(v39[1], vmlaq_n_f64(vmulq_f64(v1828.val[0], v41), v1828.val[1], *v40));
      *v39 = vaddq_f64(*v39, v42);
      *(float64x2x2_t *)v39[1].f64 = v1580;
      LODWORD(v37) = v37 + 1;
    }
    v20 = *v1526;
  }
  v34 = v1530;
LABEL_43:
  v43 = *(unsigned int **)(a2 + 72);
  if (*((_BYTE *)v43 + 20))
  {
    if (*((_BYTE *)v20 + 20))
    {
      v44 = *(_QWORD *)(*v21 + 8 * (v34[2233] + *v43));
      v45 = *(_QWORD *)(*v21 + 8 * (v34[2236] + *v20));
      if (v44 <= v45)
      {
        for (j = 0; j != 12; j += 2)
        {
          v47 = (float64x2_t *)sub_20F762098(v34 + 2279, v44, v45, 6u);
          v1581 = vld2q_f64(v1543.f64);
          v1829 = vld2q_f64(v1545.f64);
          v2146 = vld2q_f64(v1547.f64);
          v48 = &v1531.f64[j];
          v49 = vld1q_dup_f64(v48++);
          v50 = vmlaq_n_f64(vmulq_f64(v1581.val[0], v49), v1581.val[1], *v48);
          v1581.val[1] = vaddq_f64(v47[2], vmlaq_n_f64(vmulq_f64(v2146.val[0], v49), v2146.val[1], *v48));
          v1581.val[0] = vaddq_f64(v47[1], vmlaq_n_f64(vmulq_f64(v1829.val[0], v49), v1829.val[1], *v48));
          *v47 = vaddq_f64(*v47, v50);
          *(float64x2x2_t *)v47[1].f64 = v1581;
          LODWORD(v45) = v45 + 1;
        }
        v20 = *v1526;
        v34 = v1530;
      }
    }
  }
  v51 = *(unsigned int **)(a2 + 80);
  if (*((_BYTE *)v51 + 20))
  {
    if (*((_BYTE *)v20 + 20))
    {
      v52 = *(_QWORD *)(*v21 + 8 * (v34[2233] + *v51));
      v53 = *(_QWORD *)(*v21 + 8 * (v34[2236] + *v20));
      if (v52 <= v53)
      {
        for (k = 0; k != 12; k += 2)
        {
          v55 = (float64x2_t *)sub_20F762098(v34 + 2279, v52, v53, 6u);
          v1582 = vld2q_f64(v1549.f64);
          v1830 = vld2q_f64(v1551.f64);
          v2147 = vld2q_f64(v1553.f64);
          v56 = &v1531.f64[k];
          v57 = vld1q_dup_f64(v56++);
          v58 = vmlaq_n_f64(vmulq_f64(v1582.val[0], v57), v1582.val[1], *v56);
          v1582.val[1] = vaddq_f64(v55[2], vmlaq_n_f64(vmulq_f64(v2147.val[0], v57), v2147.val[1], *v56));
          v1582.val[0] = vaddq_f64(v55[1], vmlaq_n_f64(vmulq_f64(v1830.val[0], v57), v1830.val[1], *v56));
          *v55 = vaddq_f64(*v55, v58);
          *(float64x2x2_t *)v55[1].f64 = v1582;
          LODWORD(v53) = v53 + 1;
        }
        v20 = *v1526;
        v34 = v1530;
      }
    }
  }
  v59 = *(unsigned int **)(a2 + 88);
  if (*((_BYTE *)v59 + 20))
  {
    if (*((_BYTE *)v20 + 20))
    {
      v60 = *(_QWORD *)(*v21 + 8 * (v34[2237] + *v59));
      v61 = *(_QWORD *)(*v21 + 8 * (v34[2236] + *v20));
      if (v60 <= v61)
      {
        v62 = (float64x2_t *)sub_20F762098(v34 + 2279, *(_QWORD *)(*v21 + 8 * (v34[2237] + *v59)), v61, 4u);
        v1583 = vld2q_f64(v1555.f64);
        v63 = &v1557;
        v1831 = vld2q_f64(v63->f64);
        v64 = vmlaq_n_f64(vmulq_n_f64(v1583.val[0], v1531.f64[0]), v1583.val[1], v1531.f64[1]);
        v1583.val[0] = vaddq_f64(v62[1], vmlaq_n_f64(vmulq_n_f64(v1831.val[0], v1531.f64[0]), v1831.val[1], v1531.f64[1]));
        *v62 = vaddq_f64(*v62, v64);
        v62[1] = v1583.val[0];
        v65 = (float64x2_t *)sub_20F762098(v34 + 2279, v60, (int)v61 + 1, 4u);
        v1584 = vld2q_f64(v1555.f64);
        v1832 = vld2q_f64(v63->f64);
        v66 = vmlaq_n_f64(vmulq_n_f64(v1584.val[0], v1532.f64[0]), v1584.val[1], v1532.f64[1]);
        v1584.val[0] = vaddq_f64(v65[1], vmlaq_n_f64(vmulq_n_f64(v1832.val[0], v1532.f64[0]), v1832.val[1], v1532.f64[1]));
        *v65 = vaddq_f64(*v65, v66);
        v65[1] = v1584.val[0];
        v67 = (float64x2_t *)sub_20F762098(v34 + 2279, v60, (int)v61 + 2, 4u);
        v1585 = vld2q_f64(v1555.f64);
        v1833 = vld2q_f64(v63->f64);
        v68 = vmlaq_n_f64(vmulq_n_f64(v1585.val[0], v1533.f64[0]), v1585.val[1], v1533.f64[1]);
        v1585.val[0] = vaddq_f64(v67[1], vmlaq_n_f64(vmulq_n_f64(v1833.val[0], v1533.f64[0]), v1833.val[1], v1533.f64[1]));
        *v67 = vaddq_f64(*v67, v68);
        v67[1] = v1585.val[0];
        v69 = (float64x2_t *)sub_20F762098(v34 + 2279, v60, (int)v61 + 3, 4u);
        v1586 = vld2q_f64(v1555.f64);
        v1834 = vld2q_f64(v63->f64);
        v70 = vmlaq_n_f64(vmulq_n_f64(v1586.val[0], v1534.f64[0]), v1586.val[1], v1534.f64[1]);
        v1586.val[0] = vaddq_f64(v69[1], vmlaq_n_f64(vmulq_n_f64(v1834.val[0], v1534.f64[0]), v1834.val[1], v1534.f64[1]));
        *v69 = vaddq_f64(*v69, v70);
        v69[1] = v1586.val[0];
        v71 = (float64x2_t *)sub_20F762098(v34 + 2279, v60, (int)v61 + 4, 4u);
        v1587 = vld2q_f64(v1555.f64);
        v1835 = vld2q_f64(v63->f64);
        v72 = vmlaq_n_f64(vmulq_n_f64(v1587.val[0], v1535.f64[0]), v1587.val[1], v1535.f64[1]);
        v1587.val[0] = vaddq_f64(v71[1], vmlaq_n_f64(vmulq_n_f64(v1835.val[0], v1535.f64[0]), v1835.val[1], v1535.f64[1]));
        *v71 = vaddq_f64(*v71, v72);
        v71[1] = v1587.val[0];
        v73 = (float64x2_t *)sub_20F762098(v34 + 2279, v60, (int)v61 + 5, 4u);
        v1588 = vld2q_f64(v1555.f64);
        v1836 = vld2q_f64(v63->f64);
        v74 = vmlaq_n_f64(vmulq_n_f64(v1588.val[0], v1536.f64[0]), v1588.val[1], v1536.f64[1]);
        v1588.val[0] = vaddq_f64(v73[1], vmlaq_n_f64(vmulq_n_f64(v1836.val[0], v1536.f64[0]), v1836.val[1], v1536.f64[1]));
        *v73 = vaddq_f64(*v73, v74);
        v73[1] = v1588.val[0];
        v20 = *v1526;
      }
    }
  }
  v75 = *(unsigned int **)(a2 + 96);
  if (*((_BYTE *)v75 + 20))
  {
    if (*((_BYTE *)v20 + 20))
    {
      v76 = *(_QWORD *)(*v21 + 8 * (v34[2237] + *v75));
      v77 = *(_QWORD *)(*v21 + 8 * (v34[2236] + *v20));
      if (v76 <= v77)
      {
        v78 = (float64x2_t *)sub_20F762098(v34 + 2279, *(_QWORD *)(*v21 + 8 * (v34[2237] + *v75)), v77, 4u);
        v1589 = vld2q_f64(v1559.f64);
        v79 = &v1561;
        v1837 = vld2q_f64(v79->f64);
        v80 = vmlaq_n_f64(vmulq_n_f64(v1589.val[0], v1531.f64[0]), v1589.val[1], v1531.f64[1]);
        v1589.val[0] = vaddq_f64(v78[1], vmlaq_n_f64(vmulq_n_f64(v1837.val[0], v1531.f64[0]), v1837.val[1], v1531.f64[1]));
        *v78 = vaddq_f64(*v78, v80);
        v78[1] = v1589.val[0];
        v81 = (float64x2_t *)sub_20F762098(v34 + 2279, v76, (int)v77 + 1, 4u);
        v1590 = vld2q_f64(v1559.f64);
        v1838 = vld2q_f64(v79->f64);
        v82 = vmlaq_n_f64(vmulq_n_f64(v1590.val[0], v1532.f64[0]), v1590.val[1], v1532.f64[1]);
        v1590.val[0] = vaddq_f64(v81[1], vmlaq_n_f64(vmulq_n_f64(v1838.val[0], v1532.f64[0]), v1838.val[1], v1532.f64[1]));
        *v81 = vaddq_f64(*v81, v82);
        v81[1] = v1590.val[0];
        v83 = (float64x2_t *)sub_20F762098(v34 + 2279, v76, (int)v77 + 2, 4u);
        v1591 = vld2q_f64(v1559.f64);
        v1839 = vld2q_f64(v79->f64);
        v84 = vmlaq_n_f64(vmulq_n_f64(v1591.val[0], v1533.f64[0]), v1591.val[1], v1533.f64[1]);
        v1591.val[0] = vaddq_f64(v83[1], vmlaq_n_f64(vmulq_n_f64(v1839.val[0], v1533.f64[0]), v1839.val[1], v1533.f64[1]));
        *v83 = vaddq_f64(*v83, v84);
        v83[1] = v1591.val[0];
        v85 = (float64x2_t *)sub_20F762098(v34 + 2279, v76, (int)v77 + 3, 4u);
        v1592 = vld2q_f64(v1559.f64);
        v1840 = vld2q_f64(v79->f64);
        v86 = vmlaq_n_f64(vmulq_n_f64(v1592.val[0], v1534.f64[0]), v1592.val[1], v1534.f64[1]);
        v1592.val[0] = vaddq_f64(v85[1], vmlaq_n_f64(vmulq_n_f64(v1840.val[0], v1534.f64[0]), v1840.val[1], v1534.f64[1]));
        *v85 = vaddq_f64(*v85, v86);
        v85[1] = v1592.val[0];
        v87 = (float64x2_t *)sub_20F762098(v34 + 2279, v76, (int)v77 + 4, 4u);
        v1593 = vld2q_f64(v1559.f64);
        v1841 = vld2q_f64(v79->f64);
        v88 = vmlaq_n_f64(vmulq_n_f64(v1593.val[0], v1535.f64[0]), v1593.val[1], v1535.f64[1]);
        v1593.val[0] = vaddq_f64(v87[1], vmlaq_n_f64(vmulq_n_f64(v1841.val[0], v1535.f64[0]), v1841.val[1], v1535.f64[1]));
        *v87 = vaddq_f64(*v87, v88);
        v87[1] = v1593.val[0];
        v89 = (float64x2_t *)sub_20F762098(v34 + 2279, v76, (int)v77 + 5, 4u);
        v1594 = vld2q_f64(v1559.f64);
        v1842 = vld2q_f64(v79->f64);
        v90 = vmlaq_n_f64(vmulq_n_f64(v1594.val[0], v1536.f64[0]), v1594.val[1], v1536.f64[1]);
        v1594.val[0] = vaddq_f64(v89[1], vmlaq_n_f64(vmulq_n_f64(v1842.val[0], v1536.f64[0]), v1842.val[1], v1536.f64[1]));
        *v89 = vaddq_f64(*v89, v90);
        v89[1] = v1594.val[0];
        v20 = *v1526;
      }
    }
  }
  v91 = *(unsigned int **)(a2 + 104);
  if (*((_BYTE *)v91 + 20))
  {
    if (*((_BYTE *)v20 + 20))
    {
      v92 = *(_QWORD *)(*v21 + 8 * (v34[2238] + *v91));
      v93 = *(_QWORD *)(*v21 + 8 * (v34[2236] + *v20));
      if (v92 <= v93)
      {
        v94 = (float64x2_t *)sub_20F762098(v34 + 2279, *(_QWORD *)(*v21 + 8 * (v34[2238] + *v91)), v93, 4u);
        v1595 = vld2q_f64(v1563.f64);
        v95 = &v1565;
        v1843 = vld2q_f64(v95->f64);
        v96 = vmlaq_n_f64(vmulq_n_f64(v1595.val[0], v1531.f64[0]), v1595.val[1], v1531.f64[1]);
        v1595.val[0] = vaddq_f64(v94[1], vmlaq_n_f64(vmulq_n_f64(v1843.val[0], v1531.f64[0]), v1843.val[1], v1531.f64[1]));
        *v94 = vaddq_f64(*v94, v96);
        v94[1] = v1595.val[0];
        v97 = (float64x2_t *)sub_20F762098(v34 + 2279, v92, (int)v93 + 1, 4u);
        v1596 = vld2q_f64(v1563.f64);
        v1844 = vld2q_f64(v95->f64);
        v98 = vmlaq_n_f64(vmulq_n_f64(v1596.val[0], v1532.f64[0]), v1596.val[1], v1532.f64[1]);
        v1596.val[0] = vaddq_f64(v97[1], vmlaq_n_f64(vmulq_n_f64(v1844.val[0], v1532.f64[0]), v1844.val[1], v1532.f64[1]));
        *v97 = vaddq_f64(*v97, v98);
        v97[1] = v1596.val[0];
        v99 = (float64x2_t *)sub_20F762098(v34 + 2279, v92, (int)v93 + 2, 4u);
        v1597 = vld2q_f64(v1563.f64);
        v1845 = vld2q_f64(v95->f64);
        v100 = vmlaq_n_f64(vmulq_n_f64(v1597.val[0], v1533.f64[0]), v1597.val[1], v1533.f64[1]);
        v1597.val[0] = vaddq_f64(v99[1], vmlaq_n_f64(vmulq_n_f64(v1845.val[0], v1533.f64[0]), v1845.val[1], v1533.f64[1]));
        *v99 = vaddq_f64(*v99, v100);
        v99[1] = v1597.val[0];
        v101 = (float64x2_t *)sub_20F762098(v34 + 2279, v92, (int)v93 + 3, 4u);
        v1598 = vld2q_f64(v1563.f64);
        v1846 = vld2q_f64(v95->f64);
        v102 = vmlaq_n_f64(vmulq_n_f64(v1598.val[0], v1534.f64[0]), v1598.val[1], v1534.f64[1]);
        v1598.val[0] = vaddq_f64(v101[1], vmlaq_n_f64(vmulq_n_f64(v1846.val[0], v1534.f64[0]), v1846.val[1], v1534.f64[1]));
        *v101 = vaddq_f64(*v101, v102);
        v101[1] = v1598.val[0];
        v103 = (float64x2_t *)sub_20F762098(v34 + 2279, v92, (int)v93 + 4, 4u);
        v1599 = vld2q_f64(v1563.f64);
        v1847 = vld2q_f64(v95->f64);
        v104 = vmlaq_n_f64(vmulq_n_f64(v1599.val[0], v1535.f64[0]), v1599.val[1], v1535.f64[1]);
        v1599.val[0] = vaddq_f64(v103[1], vmlaq_n_f64(vmulq_n_f64(v1847.val[0], v1535.f64[0]), v1847.val[1], v1535.f64[1]));
        *v103 = vaddq_f64(*v103, v104);
        v103[1] = v1599.val[0];
        v105 = (float64x2_t *)sub_20F762098(v34 + 2279, v92, (int)v93 + 5, 4u);
        v1600 = vld2q_f64(v1563.f64);
        v1848 = vld2q_f64(v95->f64);
        v106 = vmlaq_n_f64(vmulq_n_f64(v1600.val[0], v1536.f64[0]), v1600.val[1], v1536.f64[1]);
        v1600.val[0] = vaddq_f64(v105[1], vmlaq_n_f64(vmulq_n_f64(v1848.val[0], v1536.f64[0]), v1848.val[1], v1536.f64[1]));
        *v105 = vaddq_f64(*v105, v106);
        v105[1] = v1600.val[0];
        v20 = *v1526;
      }
    }
  }
  v107 = *(unsigned int **)(a2 + 112);
  if (*((_BYTE *)v107 + 20))
  {
    if (*((_BYTE *)v20 + 20))
    {
      v108 = *(_QWORD *)(*v21 + 8 * (v34[2238] + *v107));
      v109 = *(_QWORD *)(*v21 + 8 * (v34[2236] + *v20));
      if (v108 <= v109)
      {
        v110 = (float64x2_t *)sub_20F762098(v34 + 2279, *(_QWORD *)(*v21 + 8 * (v34[2238] + *v107)), v109, 4u);
        v1601 = vld2q_f64(v1567.f64);
        v111 = &v1569;
        v1849 = vld2q_f64(v111->f64);
        v112 = vmlaq_n_f64(vmulq_n_f64(v1601.val[0], v1531.f64[0]), v1601.val[1], v1531.f64[1]);
        v1601.val[0] = vaddq_f64(v110[1], vmlaq_n_f64(vmulq_n_f64(v1849.val[0], v1531.f64[0]), v1849.val[1], v1531.f64[1]));
        *v110 = vaddq_f64(*v110, v112);
        v110[1] = v1601.val[0];
        v113 = (float64x2_t *)sub_20F762098(v34 + 2279, v108, (int)v109 + 1, 4u);
        v1602 = vld2q_f64(v1567.f64);
        v1850 = vld2q_f64(v111->f64);
        v114 = vmlaq_n_f64(vmulq_n_f64(v1602.val[0], v1532.f64[0]), v1602.val[1], v1532.f64[1]);
        v1602.val[0] = vaddq_f64(v113[1], vmlaq_n_f64(vmulq_n_f64(v1850.val[0], v1532.f64[0]), v1850.val[1], v1532.f64[1]));
        *v113 = vaddq_f64(*v113, v114);
        v113[1] = v1602.val[0];
        v115 = (float64x2_t *)sub_20F762098(v34 + 2279, v108, (int)v109 + 2, 4u);
        v1603 = vld2q_f64(v1567.f64);
        v1851 = vld2q_f64(v111->f64);
        v116 = vmlaq_n_f64(vmulq_n_f64(v1603.val[0], v1533.f64[0]), v1603.val[1], v1533.f64[1]);
        v1603.val[0] = vaddq_f64(v115[1], vmlaq_n_f64(vmulq_n_f64(v1851.val[0], v1533.f64[0]), v1851.val[1], v1533.f64[1]));
        *v115 = vaddq_f64(*v115, v116);
        v115[1] = v1603.val[0];
        v117 = (float64x2_t *)sub_20F762098(v34 + 2279, v108, (int)v109 + 3, 4u);
        v1604 = vld2q_f64(v1567.f64);
        v1852 = vld2q_f64(v111->f64);
        v118 = vmlaq_n_f64(vmulq_n_f64(v1604.val[0], v1534.f64[0]), v1604.val[1], v1534.f64[1]);
        v1604.val[0] = vaddq_f64(v117[1], vmlaq_n_f64(vmulq_n_f64(v1852.val[0], v1534.f64[0]), v1852.val[1], v1534.f64[1]));
        *v117 = vaddq_f64(*v117, v118);
        v117[1] = v1604.val[0];
        v119 = (float64x2_t *)sub_20F762098(v34 + 2279, v108, (int)v109 + 4, 4u);
        v1605 = vld2q_f64(v1567.f64);
        v1853 = vld2q_f64(v111->f64);
        v120 = vmlaq_n_f64(vmulq_n_f64(v1605.val[0], v1535.f64[0]), v1605.val[1], v1535.f64[1]);
        v1605.val[0] = vaddq_f64(v119[1], vmlaq_n_f64(vmulq_n_f64(v1853.val[0], v1535.f64[0]), v1853.val[1], v1535.f64[1]));
        *v119 = vaddq_f64(*v119, v120);
        v119[1] = v1605.val[0];
        v121 = (float64x2_t *)sub_20F762098(v34 + 2279, v108, (int)v109 + 5, 4u);
        v1606 = vld2q_f64(v1567.f64);
        v1854 = vld2q_f64(v111->f64);
        v122 = vmlaq_n_f64(vmulq_n_f64(v1606.val[0], v1536.f64[0]), v1606.val[1], v1536.f64[1]);
        v1606.val[0] = vaddq_f64(v121[1], vmlaq_n_f64(vmulq_n_f64(v1854.val[0], v1536.f64[0]), v1854.val[1], v1536.f64[1]));
        *v121 = vaddq_f64(*v121, v122);
        v121[1] = v1606.val[0];
        v20 = *v1526;
      }
    }
  }
  v123 = *(unsigned int **)(a2 + 120);
  if (*((_BYTE *)v123 + 20))
  {
    if (*((_BYTE *)v20 + 20))
    {
      v124 = *(_QWORD *)(*v21 + 8 * (v34[2239] + *v123));
      v125 = *(_QWORD *)(*v21 + 8 * (v34[2236] + *v20));
      if (v124 <= v125)
      {
        v126 = (float64x2_t *)sub_20F762098(v34 + 2279, *(_QWORD *)(*v21 + 8 * (v34[2239] + *v123)), v125, 3u);
        v127.f64[0] = v126[1].f64[0];
        v1855 = vld2q_f64(v1571.f64);
        _V4.D[1] = v1573.f64[1];
        _D6 = v1531.f64[1];
        v130 = vmlaq_n_f64(vmulq_n_f64(v1855.val[0], v1531.f64[0]), v1855.val[1], v1531.f64[1]);
        __asm { FMLA            D2, D6, V4.D[1] }
        *v126 = vaddq_f64(*v126, v130);
        *(_QWORD *)&v126[1].f64[0] = *(_OWORD *)&vaddq_f64(v127, v1855.val[0]);
        v131 = (float64x2_t *)sub_20F762098(v34 + 2279, v124, (int)v125 + 1, 3u);
        v132.f64[0] = v131[1].f64[0];
        v1856 = vld2q_f64(v1571.f64);
        _V4.D[1] = v1573.f64[1];
        _D6 = v1532.f64[1];
        v135 = vmlaq_n_f64(vmulq_n_f64(v1856.val[0], v1532.f64[0]), v1856.val[1], v1532.f64[1]);
        __asm { FMLA            D2, D6, V4.D[1] }
        *v131 = vaddq_f64(*v131, v135);
        *(_QWORD *)&v131[1].f64[0] = *(_OWORD *)&vaddq_f64(v132, v1856.val[0]);
        v136 = (float64x2_t *)sub_20F762098(v34 + 2279, v124, (int)v125 + 2, 3u);
        v137.f64[0] = v136[1].f64[0];
        v1857 = vld2q_f64(v1571.f64);
        _V4.D[1] = v1573.f64[1];
        _D6 = v1533.f64[1];
        v140 = vmlaq_n_f64(vmulq_n_f64(v1857.val[0], v1533.f64[0]), v1857.val[1], v1533.f64[1]);
        __asm { FMLA            D2, D6, V4.D[1] }
        *v136 = vaddq_f64(*v136, v140);
        *(_QWORD *)&v136[1].f64[0] = *(_OWORD *)&vaddq_f64(v137, v1857.val[0]);
        v141 = (float64x2_t *)sub_20F762098(v34 + 2279, v124, (int)v125 + 3, 3u);
        v142.f64[0] = v141[1].f64[0];
        v1858 = vld2q_f64(v1571.f64);
        _V4.D[1] = v1573.f64[1];
        _D6 = v1534.f64[1];
        v145 = vmlaq_n_f64(vmulq_n_f64(v1858.val[0], v1534.f64[0]), v1858.val[1], v1534.f64[1]);
        __asm { FMLA            D2, D6, V4.D[1] }
        *v141 = vaddq_f64(*v141, v145);
        *(_QWORD *)&v141[1].f64[0] = *(_OWORD *)&vaddq_f64(v142, v1858.val[0]);
        v146 = (float64x2_t *)sub_20F762098(v34 + 2279, v124, (int)v125 + 4, 3u);
        v147.f64[0] = v146[1].f64[0];
        v1859 = vld2q_f64(v1571.f64);
        _V4.D[1] = v1573.f64[1];
        _D6 = v1535.f64[1];
        v150 = vmlaq_n_f64(vmulq_n_f64(v1859.val[0], v1535.f64[0]), v1859.val[1], v1535.f64[1]);
        __asm { FMLA            D2, D6, V4.D[1] }
        *v146 = vaddq_f64(*v146, v150);
        *(_QWORD *)&v146[1].f64[0] = *(_OWORD *)&vaddq_f64(v147, v1859.val[0]);
        v151 = (float64x2_t *)sub_20F762098(v34 + 2279, v124, (int)v125 + 5, 3u);
        v152.f64[0] = v151[1].f64[0];
        v1860 = vld2q_f64(v1571.f64);
        _V4.D[1] = v1573.f64[1];
        _D6 = v1536.f64[1];
        v155 = vmlaq_n_f64(vmulq_n_f64(v1860.val[0], v1536.f64[0]), v1860.val[1], v1536.f64[1]);
        __asm { FMLA            D2, D6, V4.D[1] }
        *v151 = vaddq_f64(*v151, v155);
        *(_QWORD *)&v151[1].f64[0] = *(_OWORD *)&vaddq_f64(v152, v1860.val[0]);
        v20 = *v1526;
      }
    }
  }
  v156 = *(unsigned int **)(a2 + 128);
  if (*((_BYTE *)v156 + 20))
  {
    if (*((_BYTE *)v20 + 20))
    {
      v157 = *(_QWORD *)(*v21 + 8 * (v34[2239] + *v156));
      v158 = *(_QWORD *)(*v21 + 8 * (v34[2236] + *v20));
      if (v157 <= v158)
      {
        v159 = (float64x2_t *)sub_20F762098(v34 + 2279, *(_QWORD *)(*v21 + 8 * (v34[2239] + *v156)), v158, 3u);
        v160.f64[0] = v159[1].f64[0];
        v1861 = vld2q_f64(v1574.f64);
        _V4.D[1] = v1576.f64[1];
        _D6 = v1531.f64[1];
        v163 = vmlaq_n_f64(vmulq_n_f64(v1861.val[0], v1531.f64[0]), v1861.val[1], v1531.f64[1]);
        __asm { FMLA            D2, D6, V4.D[1] }
        *v159 = vaddq_f64(*v159, v163);
        *(_QWORD *)&v159[1].f64[0] = *(_OWORD *)&vaddq_f64(v160, v1861.val[0]);
        v164 = (float64x2_t *)sub_20F762098(v34 + 2279, v157, (int)v158 + 1, 3u);
        v165.f64[0] = v164[1].f64[0];
        v1862 = vld2q_f64(v1574.f64);
        _V4.D[1] = v1576.f64[1];
        _D6 = v1532.f64[1];
        v168 = vmlaq_n_f64(vmulq_n_f64(v1862.val[0], v1532.f64[0]), v1862.val[1], v1532.f64[1]);
        __asm { FMLA            D2, D6, V4.D[1] }
        *v164 = vaddq_f64(*v164, v168);
        *(_QWORD *)&v164[1].f64[0] = *(_OWORD *)&vaddq_f64(v165, v1862.val[0]);
        v169 = (float64x2_t *)sub_20F762098(v34 + 2279, v157, (int)v158 + 2, 3u);
        v170.f64[0] = v169[1].f64[0];
        v1863 = vld2q_f64(v1574.f64);
        _V4.D[1] = v1576.f64[1];
        _D6 = v1533.f64[1];
        v173 = vmlaq_n_f64(vmulq_n_f64(v1863.val[0], v1533.f64[0]), v1863.val[1], v1533.f64[1]);
        __asm { FMLA            D2, D6, V4.D[1] }
        *v169 = vaddq_f64(*v169, v173);
        *(_QWORD *)&v169[1].f64[0] = *(_OWORD *)&vaddq_f64(v170, v1863.val[0]);
        v174 = (float64x2_t *)sub_20F762098(v34 + 2279, v157, (int)v158 + 3, 3u);
        v175.f64[0] = v174[1].f64[0];
        v1864 = vld2q_f64(v1574.f64);
        _V4.D[1] = v1576.f64[1];
        _D6 = v1534.f64[1];
        v178 = vmlaq_n_f64(vmulq_n_f64(v1864.val[0], v1534.f64[0]), v1864.val[1], v1534.f64[1]);
        __asm { FMLA            D2, D6, V4.D[1] }
        *v174 = vaddq_f64(*v174, v178);
        *(_QWORD *)&v174[1].f64[0] = *(_OWORD *)&vaddq_f64(v175, v1864.val[0]);
        v179 = (float64x2_t *)sub_20F762098(v34 + 2279, v157, (int)v158 + 4, 3u);
        v180.f64[0] = v179[1].f64[0];
        v1865 = vld2q_f64(v1574.f64);
        _V4.D[1] = v1576.f64[1];
        _D6 = v1535.f64[1];
        v183 = vmlaq_n_f64(vmulq_n_f64(v1865.val[0], v1535.f64[0]), v1865.val[1], v1535.f64[1]);
        __asm { FMLA            D2, D6, V4.D[1] }
        *v179 = vaddq_f64(*v179, v183);
        *(_QWORD *)&v179[1].f64[0] = *(_OWORD *)&vaddq_f64(v180, v1865.val[0]);
        v184 = (float64x2_t *)sub_20F762098(v34 + 2279, v157, (int)v158 + 5, 3u);
        v185.f64[0] = v184[1].f64[0];
        v1866 = vld2q_f64(v1574.f64);
        _V4.D[1] = v1576.f64[1];
        _D6 = v1536.f64[1];
        v188 = vmlaq_n_f64(vmulq_n_f64(v1866.val[0], v1536.f64[0]), v1866.val[1], v1536.f64[1]);
        __asm { FMLA            D2, D6, V4.D[1] }
        *v184 = vaddq_f64(*v184, v188);
        *(_QWORD *)&v184[1].f64[0] = *(_OWORD *)&vaddq_f64(v185, v1866.val[0]);
        v20 = *v1526;
      }
    }
  }
  v189 = *(unsigned int **)(a2 + 64);
  if (*((_BYTE *)v20 + 20))
  {
    if (*((_BYTE *)v189 + 20))
    {
      v190 = v34[2236];
      v191 = *(_QWORD *)(*v21 + 8 * (v190 + *v20));
      v192 = *(_QWORD *)(*v21 + 8 * (v190 + *v189));
      if (v191 <= v192)
      {
        for (m = 0; m != 12; m += 2)
        {
          v194 = (float64x2_t *)sub_20F762098(v34 + 2279, v191, v192, 6u);
          v2175 = vld2q_f64(v1533.f64);
          v2213 = vld2q_f64(v1535.f64);
          v195 = v1537.f64[m];
          v196 = v1537.f64[m + 1];
          v197 = vaddq_f64(v194[2], vmlaq_n_f64(vmulq_n_f64(v2213.val[0], v195), v2213.val[1], v196));
          v198 = vaddq_f64(v194[1], vmlaq_n_f64(vmulq_n_f64(v2175.val[0], v195), v2175.val[1], v196));
          *v194 = vaddq_f64(*v194, vmlaq_n_f64(vmulq_n_f64((float64x2_t)vzip1q_s64((int64x2_t)v1531, (int64x2_t)v1532), v195), (float64x2_t)vzip2q_s64((int64x2_t)v1531, (int64x2_t)v1532), v196));
          v194[1] = v198;
          v194[2] = v197;
          LODWORD(v192) = v192 + 1;
        }
        v189 = *(unsigned int **)(a2 + 64);
        v34 = v1530;
      }
    }
  }
  if (*((_BYTE *)v189 + 20))
  {
    v199 = 0;
    v200 = *(_QWORD *)(*v21 + 8 * (v34[2236] + *v189));
    v201 = &v1537.f64[1];
    do
    {
      v202 = (float64x2_t *)sub_20F762098(v34 + 2279, v200, (int)v200 + (int)v199, 6u);
      v1607 = vld2q_f64(v1537.f64);
      v1867 = vld2q_f64(v1539.f64);
      v2192 = vld2q_f64(v1541.f64);
      v203 = *(v201 - 1);
      v204 = vmlaq_n_f64(vmulq_n_f64(v1607.val[0], v203), v1607.val[1], *v201);
      v1607.val[1] = vaddq_f64(v202[2], vmlaq_n_f64(vmulq_n_f64(v2192.val[0], v203), v2192.val[1], *v201));
      v1607.val[0] = vaddq_f64(v202[1], vmlaq_n_f64(vmulq_n_f64(v1867.val[0], v203), v1867.val[1], *v201));
      *v202 = vaddq_f64(*v202, v204);
      *(float64x2x2_t *)v202[1].f64 = v1607;
      ++v199;
      v201 += 2;
    }
    while (v199 != 6);
    v205 = (float64x2_t *)(v34[2270] + 8 * v200);
    v1608 = vld2q_f64(v1537.f64);
    v2148 = vld2q_f64(v1539.f64);
    v2214 = vld2q_f64(v1541.f64);
    v206 = vmlaq_laneq_f64(vmulq_n_f64(v1608.val[0], v1527->f64[0]), v1608.val[1], *v1527, 1);
    v1608.val[1] = vsubq_f64(v205[2], vmlaq_laneq_f64(vmulq_n_f64(v2214.val[0], v1527->f64[0]), v2214.val[1], *v1527, 1));
    v1608.val[0] = vsubq_f64(v205[1], vmlaq_laneq_f64(vmulq_n_f64(v2148.val[0], v1527->f64[0]), v2148.val[1], *v1527, 1));
    *v205 = vsubq_f64(*v205, v206);
    *(float64x2x2_t *)v205[1].f64 = v1608;
  }
  v207 = *(unsigned int **)(a2 + 72);
  if (*((_BYTE *)v207 + 20))
  {
    v208 = *(unsigned int **)(a2 + 64);
    if (*((_BYTE *)v208 + 20))
    {
      v209 = *(_QWORD *)(*v21 + 8 * (v1530[2233] + *v207));
      v210 = *(_QWORD *)(*v21 + 8 * (v1530[2236] + *v208));
      if (v209 <= v210)
      {
        v211 = 0;
        v212 = &v1537.f64[1];
        do
        {
          v213 = (float64x2_t *)sub_20F762098(v1530 + 2279, v209, (int)v210 + (int)v211, 6u);
          v1609 = vld2q_f64(v1543.f64);
          v1868 = vld2q_f64(v1545.f64);
          v2193 = vld2q_f64(v1547.f64);
          v214 = *(v212 - 1);
          v215 = vmlaq_n_f64(vmulq_n_f64(v1609.val[0], v214), v1609.val[1], *v212);
          v1609.val[1] = vaddq_f64(v213[2], vmlaq_n_f64(vmulq_n_f64(v2193.val[0], v214), v2193.val[1], *v212));
          v1609.val[0] = vaddq_f64(v213[1], vmlaq_n_f64(vmulq_n_f64(v1868.val[0], v214), v1868.val[1], *v212));
          *v213 = vaddq_f64(*v213, v215);
          *(float64x2x2_t *)v213[1].f64 = v1609;
          ++v211;
          v212 += 2;
        }
        while (v211 != 6);
      }
    }
  }
  v216 = *(unsigned int **)(a2 + 80);
  if (*((_BYTE *)v216 + 20))
  {
    v217 = *(unsigned int **)(a2 + 64);
    if (*((_BYTE *)v217 + 20))
    {
      v218 = *(_QWORD *)(*v21 + 8 * (v1530[2233] + *v216));
      v219 = *(_QWORD *)(*v21 + 8 * (v1530[2236] + *v217));
      if (v218 <= v219)
      {
        v220 = 0;
        v221 = &v1537.f64[1];
        do
        {
          v222 = (float64x2_t *)sub_20F762098(v1530 + 2279, v218, (int)v219 + (int)v220, 6u);
          v1610 = vld2q_f64(v1549.f64);
          v1869 = vld2q_f64(v1551.f64);
          v2194 = vld2q_f64(v1553.f64);
          v223 = *(v221 - 1);
          v224 = vmlaq_n_f64(vmulq_n_f64(v1610.val[0], v223), v1610.val[1], *v221);
          v1610.val[1] = vaddq_f64(v222[2], vmlaq_n_f64(vmulq_n_f64(v2194.val[0], v223), v2194.val[1], *v221));
          v1610.val[0] = vaddq_f64(v222[1], vmlaq_n_f64(vmulq_n_f64(v1869.val[0], v223), v1869.val[1], *v221));
          *v222 = vaddq_f64(*v222, v224);
          *(float64x2x2_t *)v222[1].f64 = v1610;
          ++v220;
          v221 += 2;
        }
        while (v220 != 6);
      }
    }
  }
  v225 = *(unsigned int **)(a2 + 88);
  v226 = v1530;
  if (*((_BYTE *)v225 + 20))
  {
    v227 = *(unsigned int **)(a2 + 64);
    if (*((_BYTE *)v227 + 20))
    {
      v228 = *(_QWORD *)(*v21 + 8 * (v1530[2237] + *v225));
      v229 = *(_QWORD *)(*v21 + 8 * (v1530[2236] + *v227));
      if (v228 <= v229)
      {
        v230 = (float64x2_t *)sub_20F762098(v1530 + 2279, *(_QWORD *)(*v21 + 8 * (v1530[2237] + *v225)), v229, 4u);
        v1611 = vld2q_f64(v1555.f64);
        v231 = &v1557;
        v1870 = vld2q_f64(v231->f64);
        v232 = vmlaq_n_f64(vmulq_n_f64(v1611.val[0], v1537.f64[0]), v1611.val[1], v1537.f64[1]);
        v1611.val[0] = vaddq_f64(v230[1], vmlaq_n_f64(vmulq_n_f64(v1870.val[0], v1537.f64[0]), v1870.val[1], v1537.f64[1]));
        *v230 = vaddq_f64(*v230, v232);
        v230[1] = v1611.val[0];
        v233 = (float64x2_t *)sub_20F762098(v1530 + 2279, v228, (int)v229 + 1, 4u);
        v1612 = vld2q_f64(v1555.f64);
        v1871 = vld2q_f64(v1557.f64);
        v234 = vmlaq_n_f64(vmulq_n_f64(v1612.val[0], v1538.f64[0]), v1612.val[1], v1538.f64[1]);
        v1612.val[0] = vaddq_f64(v233[1], vmlaq_n_f64(vmulq_n_f64(v1871.val[0], v1538.f64[0]), v1871.val[1], v1538.f64[1]));
        *v233 = vaddq_f64(*v233, v234);
        v233[1] = v1612.val[0];
        v235 = (float64x2_t *)sub_20F762098(v1530 + 2279, v228, (int)v229 + 2, 4u);
        v1613 = vld2q_f64(v1555.f64);
        v1872 = vld2q_f64(v1557.f64);
        v236 = vmlaq_n_f64(vmulq_n_f64(v1613.val[0], v1539.f64[0]), v1613.val[1], v1539.f64[1]);
        v1613.val[0] = vaddq_f64(v235[1], vmlaq_n_f64(vmulq_n_f64(v1872.val[0], v1539.f64[0]), v1872.val[1], v1539.f64[1]));
        *v235 = vaddq_f64(*v235, v236);
        v235[1] = v1613.val[0];
        v237 = (float64x2_t *)sub_20F762098(v1530 + 2279, v228, (int)v229 + 3, 4u);
        v1614 = vld2q_f64(v1555.f64);
        v1873 = vld2q_f64(v1557.f64);
        v238 = vmlaq_n_f64(vmulq_n_f64(v1614.val[0], v1540.f64[0]), v1614.val[1], v1540.f64[1]);
        v1614.val[0] = vaddq_f64(v237[1], vmlaq_n_f64(vmulq_n_f64(v1873.val[0], v1540.f64[0]), v1873.val[1], v1540.f64[1]));
        *v237 = vaddq_f64(*v237, v238);
        v237[1] = v1614.val[0];
        v239 = (float64x2_t *)sub_20F762098(v1530 + 2279, v228, (int)v229 + 4, 4u);
        v1615 = vld2q_f64(v1555.f64);
        v1874 = vld2q_f64(v1557.f64);
        v240 = vmlaq_n_f64(vmulq_n_f64(v1615.val[0], v1541.f64[0]), v1615.val[1], v1541.f64[1]);
        v1615.val[0] = vaddq_f64(v239[1], vmlaq_n_f64(vmulq_n_f64(v1874.val[0], v1541.f64[0]), v1874.val[1], v1541.f64[1]));
        *v239 = vaddq_f64(*v239, v240);
        v239[1] = v1615.val[0];
        v241 = (float64x2_t *)sub_20F762098(v1530 + 2279, v228, (int)v229 + 5, 4u);
        v1616 = vld2q_f64(v1555.f64);
        v1875 = vld2q_f64(v1557.f64);
        v242 = vmlaq_n_f64(vmulq_n_f64(v1616.val[0], v1542.f64[0]), v1616.val[1], v1542.f64[1]);
        v1616.val[0] = vaddq_f64(v241[1], vmlaq_n_f64(vmulq_n_f64(v1875.val[0], v1542.f64[0]), v1875.val[1], v1542.f64[1]));
        *v241 = vaddq_f64(*v241, v242);
        v241[1] = v1616.val[0];
      }
    }
  }
  v243 = *(unsigned int **)(a2 + 96);
  if (*((_BYTE *)v243 + 20))
  {
    v244 = *(unsigned int **)(a2 + 64);
    if (*((_BYTE *)v244 + 20))
    {
      v245 = *(_QWORD *)(*v21 + 8 * (v1530[2237] + *v243));
      v246 = *(_QWORD *)(*v21 + 8 * (v1530[2236] + *v244));
      if (v245 <= v246)
      {
        v247 = (float64x2_t *)sub_20F762098(v1530 + 2279, *(_QWORD *)(*v21 + 8 * (v1530[2237] + *v243)), v246, 4u);
        v1617 = vld2q_f64(v1559.f64);
        v248 = &v1561;
        v1876 = vld2q_f64(v248->f64);
        v249 = vmlaq_n_f64(vmulq_n_f64(v1617.val[0], v1537.f64[0]), v1617.val[1], v1537.f64[1]);
        v1617.val[0] = vaddq_f64(v247[1], vmlaq_n_f64(vmulq_n_f64(v1876.val[0], v1537.f64[0]), v1876.val[1], v1537.f64[1]));
        *v247 = vaddq_f64(*v247, v249);
        v247[1] = v1617.val[0];
        v250 = (float64x2_t *)sub_20F762098(v1530 + 2279, v245, (int)v246 + 1, 4u);
        v1618 = vld2q_f64(v1559.f64);
        v1877 = vld2q_f64(v1561.f64);
        v251 = vmlaq_n_f64(vmulq_n_f64(v1618.val[0], v1538.f64[0]), v1618.val[1], v1538.f64[1]);
        v1618.val[0] = vaddq_f64(v250[1], vmlaq_n_f64(vmulq_n_f64(v1877.val[0], v1538.f64[0]), v1877.val[1], v1538.f64[1]));
        *v250 = vaddq_f64(*v250, v251);
        v250[1] = v1618.val[0];
        v252 = (float64x2_t *)sub_20F762098(v1530 + 2279, v245, (int)v246 + 2, 4u);
        v1619 = vld2q_f64(v1559.f64);
        v1878 = vld2q_f64(v1561.f64);
        v253 = vmlaq_n_f64(vmulq_n_f64(v1619.val[0], v1539.f64[0]), v1619.val[1], v1539.f64[1]);
        v1619.val[0] = vaddq_f64(v252[1], vmlaq_n_f64(vmulq_n_f64(v1878.val[0], v1539.f64[0]), v1878.val[1], v1539.f64[1]));
        *v252 = vaddq_f64(*v252, v253);
        v252[1] = v1619.val[0];
        v254 = (float64x2_t *)sub_20F762098(v1530 + 2279, v245, (int)v246 + 3, 4u);
        v1620 = vld2q_f64(v1559.f64);
        v1879 = vld2q_f64(v1561.f64);
        v255 = vmlaq_n_f64(vmulq_n_f64(v1620.val[0], v1540.f64[0]), v1620.val[1], v1540.f64[1]);
        v1620.val[0] = vaddq_f64(v254[1], vmlaq_n_f64(vmulq_n_f64(v1879.val[0], v1540.f64[0]), v1879.val[1], v1540.f64[1]));
        *v254 = vaddq_f64(*v254, v255);
        v254[1] = v1620.val[0];
        v256 = (float64x2_t *)sub_20F762098(v1530 + 2279, v245, (int)v246 + 4, 4u);
        v1621 = vld2q_f64(v1559.f64);
        v1880 = vld2q_f64(v1561.f64);
        v257 = vmlaq_n_f64(vmulq_n_f64(v1621.val[0], v1541.f64[0]), v1621.val[1], v1541.f64[1]);
        v1621.val[0] = vaddq_f64(v256[1], vmlaq_n_f64(vmulq_n_f64(v1880.val[0], v1541.f64[0]), v1880.val[1], v1541.f64[1]));
        *v256 = vaddq_f64(*v256, v257);
        v256[1] = v1621.val[0];
        v258 = (float64x2_t *)sub_20F762098(v1530 + 2279, v245, (int)v246 + 5, 4u);
        v1622 = vld2q_f64(v1559.f64);
        v1881 = vld2q_f64(v1561.f64);
        v259 = vmlaq_n_f64(vmulq_n_f64(v1622.val[0], v1542.f64[0]), v1622.val[1], v1542.f64[1]);
        v1622.val[0] = vaddq_f64(v258[1], vmlaq_n_f64(vmulq_n_f64(v1881.val[0], v1542.f64[0]), v1881.val[1], v1542.f64[1]));
        *v258 = vaddq_f64(*v258, v259);
        v258[1] = v1622.val[0];
      }
    }
  }
  v260 = *(unsigned int **)(a2 + 104);
  if (*((_BYTE *)v260 + 20))
  {
    v261 = *(unsigned int **)(a2 + 64);
    if (*((_BYTE *)v261 + 20))
    {
      v262 = *(_QWORD *)(*v21 + 8 * (v1530[2238] + *v260));
      v263 = *(_QWORD *)(*v21 + 8 * (v1530[2236] + *v261));
      if (v262 <= v263)
      {
        v264 = (float64x2_t *)sub_20F762098(v1530 + 2279, *(_QWORD *)(*v21 + 8 * (v1530[2238] + *v260)), v263, 4u);
        v1623 = vld2q_f64(v1563.f64);
        v265 = &v1565;
        v1882 = vld2q_f64(v265->f64);
        v266 = vmlaq_n_f64(vmulq_n_f64(v1623.val[0], v1537.f64[0]), v1623.val[1], v1537.f64[1]);
        v1623.val[0] = vaddq_f64(v264[1], vmlaq_n_f64(vmulq_n_f64(v1882.val[0], v1537.f64[0]), v1882.val[1], v1537.f64[1]));
        *v264 = vaddq_f64(*v264, v266);
        v264[1] = v1623.val[0];
        v267 = (float64x2_t *)sub_20F762098(v1530 + 2279, v262, (int)v263 + 1, 4u);
        v1624 = vld2q_f64(v1563.f64);
        v1883 = vld2q_f64(v1565.f64);
        v268 = vmlaq_n_f64(vmulq_n_f64(v1624.val[0], v1538.f64[0]), v1624.val[1], v1538.f64[1]);
        v1624.val[0] = vaddq_f64(v267[1], vmlaq_n_f64(vmulq_n_f64(v1883.val[0], v1538.f64[0]), v1883.val[1], v1538.f64[1]));
        *v267 = vaddq_f64(*v267, v268);
        v267[1] = v1624.val[0];
        v269 = (float64x2_t *)sub_20F762098(v1530 + 2279, v262, (int)v263 + 2, 4u);
        v1625 = vld2q_f64(v1563.f64);
        v1884 = vld2q_f64(v1565.f64);
        v270 = vmlaq_n_f64(vmulq_n_f64(v1625.val[0], v1539.f64[0]), v1625.val[1], v1539.f64[1]);
        v1625.val[0] = vaddq_f64(v269[1], vmlaq_n_f64(vmulq_n_f64(v1884.val[0], v1539.f64[0]), v1884.val[1], v1539.f64[1]));
        *v269 = vaddq_f64(*v269, v270);
        v269[1] = v1625.val[0];
        v271 = (float64x2_t *)sub_20F762098(v1530 + 2279, v262, (int)v263 + 3, 4u);
        v1626 = vld2q_f64(v1563.f64);
        v1885 = vld2q_f64(v1565.f64);
        v272 = vmlaq_n_f64(vmulq_n_f64(v1626.val[0], v1540.f64[0]), v1626.val[1], v1540.f64[1]);
        v1626.val[0] = vaddq_f64(v271[1], vmlaq_n_f64(vmulq_n_f64(v1885.val[0], v1540.f64[0]), v1885.val[1], v1540.f64[1]));
        *v271 = vaddq_f64(*v271, v272);
        v271[1] = v1626.val[0];
        v273 = (float64x2_t *)sub_20F762098(v1530 + 2279, v262, (int)v263 + 4, 4u);
        v1627 = vld2q_f64(v1563.f64);
        v1886 = vld2q_f64(v1565.f64);
        v274 = vmlaq_n_f64(vmulq_n_f64(v1627.val[0], v1541.f64[0]), v1627.val[1], v1541.f64[1]);
        v1627.val[0] = vaddq_f64(v273[1], vmlaq_n_f64(vmulq_n_f64(v1886.val[0], v1541.f64[0]), v1886.val[1], v1541.f64[1]));
        *v273 = vaddq_f64(*v273, v274);
        v273[1] = v1627.val[0];
        v275 = (float64x2_t *)sub_20F762098(v1530 + 2279, v262, (int)v263 + 5, 4u);
        v1628 = vld2q_f64(v1563.f64);
        v1887 = vld2q_f64(v1565.f64);
        v276 = vmlaq_n_f64(vmulq_n_f64(v1628.val[0], v1542.f64[0]), v1628.val[1], v1542.f64[1]);
        v1628.val[0] = vaddq_f64(v275[1], vmlaq_n_f64(vmulq_n_f64(v1887.val[0], v1542.f64[0]), v1887.val[1], v1542.f64[1]));
        *v275 = vaddq_f64(*v275, v276);
        v275[1] = v1628.val[0];
      }
    }
  }
  v277 = *(unsigned int **)(a2 + 112);
  if (*((_BYTE *)v277 + 20))
  {
    v278 = *(unsigned int **)(a2 + 64);
    if (*((_BYTE *)v278 + 20))
    {
      v279 = *(_QWORD *)(*v21 + 8 * (v1530[2238] + *v277));
      v280 = *(_QWORD *)(*v21 + 8 * (v1530[2236] + *v278));
      if (v279 <= v280)
      {
        v281 = (float64x2_t *)sub_20F762098(v1530 + 2279, *(_QWORD *)(*v21 + 8 * (v1530[2238] + *v277)), v280, 4u);
        v1629 = vld2q_f64(v1567.f64);
        v282 = &v1569;
        v1888 = vld2q_f64(v282->f64);
        v283 = vmlaq_n_f64(vmulq_n_f64(v1629.val[0], v1537.f64[0]), v1629.val[1], v1537.f64[1]);
        v1629.val[0] = vaddq_f64(v281[1], vmlaq_n_f64(vmulq_n_f64(v1888.val[0], v1537.f64[0]), v1888.val[1], v1537.f64[1]));
        *v281 = vaddq_f64(*v281, v283);
        v281[1] = v1629.val[0];
        v284 = (float64x2_t *)sub_20F762098(v1530 + 2279, v279, (int)v280 + 1, 4u);
        v1630 = vld2q_f64(v1567.f64);
        v1889 = vld2q_f64(v1569.f64);
        v285 = vmlaq_n_f64(vmulq_n_f64(v1630.val[0], v1538.f64[0]), v1630.val[1], v1538.f64[1]);
        v1630.val[0] = vaddq_f64(v284[1], vmlaq_n_f64(vmulq_n_f64(v1889.val[0], v1538.f64[0]), v1889.val[1], v1538.f64[1]));
        *v284 = vaddq_f64(*v284, v285);
        v284[1] = v1630.val[0];
        v286 = (float64x2_t *)sub_20F762098(v1530 + 2279, v279, (int)v280 + 2, 4u);
        v1631 = vld2q_f64(v1567.f64);
        v1890 = vld2q_f64(v1569.f64);
        v287 = vmlaq_n_f64(vmulq_n_f64(v1631.val[0], v1539.f64[0]), v1631.val[1], v1539.f64[1]);
        v1631.val[0] = vaddq_f64(v286[1], vmlaq_n_f64(vmulq_n_f64(v1890.val[0], v1539.f64[0]), v1890.val[1], v1539.f64[1]));
        *v286 = vaddq_f64(*v286, v287);
        v286[1] = v1631.val[0];
        v288 = (float64x2_t *)sub_20F762098(v1530 + 2279, v279, (int)v280 + 3, 4u);
        v1632 = vld2q_f64(v1567.f64);
        v1891 = vld2q_f64(v1569.f64);
        v289 = vmlaq_n_f64(vmulq_n_f64(v1632.val[0], v1540.f64[0]), v1632.val[1], v1540.f64[1]);
        v1632.val[0] = vaddq_f64(v288[1], vmlaq_n_f64(vmulq_n_f64(v1891.val[0], v1540.f64[0]), v1891.val[1], v1540.f64[1]));
        *v288 = vaddq_f64(*v288, v289);
        v288[1] = v1632.val[0];
        v290 = (float64x2_t *)sub_20F762098(v1530 + 2279, v279, (int)v280 + 4, 4u);
        v1633 = vld2q_f64(v1567.f64);
        v1892 = vld2q_f64(v1569.f64);
        v291 = vmlaq_n_f64(vmulq_n_f64(v1633.val[0], v1541.f64[0]), v1633.val[1], v1541.f64[1]);
        v1633.val[0] = vaddq_f64(v290[1], vmlaq_n_f64(vmulq_n_f64(v1892.val[0], v1541.f64[0]), v1892.val[1], v1541.f64[1]));
        *v290 = vaddq_f64(*v290, v291);
        v290[1] = v1633.val[0];
        v292 = (float64x2_t *)sub_20F762098(v1530 + 2279, v279, (int)v280 + 5, 4u);
        v1634 = vld2q_f64(v1567.f64);
        v1893 = vld2q_f64(v1569.f64);
        v293 = vmlaq_n_f64(vmulq_n_f64(v1634.val[0], v1542.f64[0]), v1634.val[1], v1542.f64[1]);
        v1634.val[0] = vaddq_f64(v292[1], vmlaq_n_f64(vmulq_n_f64(v1893.val[0], v1542.f64[0]), v1893.val[1], v1542.f64[1]));
        *v292 = vaddq_f64(*v292, v293);
        v292[1] = v1634.val[0];
      }
    }
  }
  v294 = *(unsigned int **)(a2 + 120);
  if (*((_BYTE *)v294 + 20))
  {
    v295 = *(unsigned int **)(a2 + 64);
    if (*((_BYTE *)v295 + 20))
    {
      v296 = *(_QWORD *)(*v21 + 8 * (v1530[2239] + *v294));
      v297 = *(_QWORD *)(*v21 + 8 * (v1530[2236] + *v295));
      if (v296 <= v297)
      {
        v298 = (float64x2_t *)sub_20F762098(v1530 + 2279, *(_QWORD *)(*v21 + 8 * (v1530[2239] + *v294)), v297, 3u);
        v299.f64[0] = v298[1].f64[0];
        v1894 = vld2q_f64(v1571.f64);
        _V4.D[1] = v1573.f64[1];
        _D6 = v1537.f64[1];
        v302 = vmlaq_n_f64(vmulq_n_f64(v1894.val[0], v1537.f64[0]), v1894.val[1], v1537.f64[1]);
        __asm { FMLA            D2, D6, V4.D[1] }
        *v298 = vaddq_f64(*v298, v302);
        *(_QWORD *)&v298[1].f64[0] = *(_OWORD *)&vaddq_f64(v299, v1894.val[0]);
        v303 = (float64x2_t *)sub_20F762098(v1530 + 2279, v296, (int)v297 + 1, 3u);
        v304.f64[0] = v303[1].f64[0];
        v1895 = vld2q_f64(v1571.f64);
        _V4.D[1] = v1573.f64[1];
        _D6 = v1538.f64[1];
        v307 = vmlaq_n_f64(vmulq_n_f64(v1895.val[0], v1538.f64[0]), v1895.val[1], v1538.f64[1]);
        __asm { FMLA            D2, D6, V4.D[1] }
        *v303 = vaddq_f64(*v303, v307);
        *(_QWORD *)&v303[1].f64[0] = *(_OWORD *)&vaddq_f64(v304, v1895.val[0]);
        v308 = (float64x2_t *)sub_20F762098(v1530 + 2279, v296, (int)v297 + 2, 3u);
        v309.f64[0] = v308[1].f64[0];
        v1896 = vld2q_f64(v1571.f64);
        _V4.D[1] = v1573.f64[1];
        _D6 = v1539.f64[1];
        v312 = vmlaq_n_f64(vmulq_n_f64(v1896.val[0], v1539.f64[0]), v1896.val[1], v1539.f64[1]);
        __asm { FMLA            D2, D6, V4.D[1] }
        *v308 = vaddq_f64(*v308, v312);
        *(_QWORD *)&v308[1].f64[0] = *(_OWORD *)&vaddq_f64(v309, v1896.val[0]);
        v313 = (float64x2_t *)sub_20F762098(v1530 + 2279, v296, (int)v297 + 3, 3u);
        v314.f64[0] = v313[1].f64[0];
        v1897 = vld2q_f64(v1571.f64);
        _V4.D[1] = v1573.f64[1];
        _D6 = v1540.f64[1];
        v317 = vmlaq_n_f64(vmulq_n_f64(v1897.val[0], v1540.f64[0]), v1897.val[1], v1540.f64[1]);
        __asm { FMLA            D2, D6, V4.D[1] }
        *v313 = vaddq_f64(*v313, v317);
        *(_QWORD *)&v313[1].f64[0] = *(_OWORD *)&vaddq_f64(v314, v1897.val[0]);
        v318 = (float64x2_t *)sub_20F762098(v1530 + 2279, v296, (int)v297 + 4, 3u);
        v319.f64[0] = v318[1].f64[0];
        v1898 = vld2q_f64(v1571.f64);
        _V4.D[1] = v1573.f64[1];
        _D6 = v1541.f64[1];
        v322 = vmlaq_n_f64(vmulq_n_f64(v1898.val[0], v1541.f64[0]), v1898.val[1], v1541.f64[1]);
        __asm { FMLA            D2, D6, V4.D[1] }
        *v318 = vaddq_f64(*v318, v322);
        *(_QWORD *)&v318[1].f64[0] = *(_OWORD *)&vaddq_f64(v319, v1898.val[0]);
        v323 = (float64x2_t *)sub_20F762098(v1530 + 2279, v296, (int)v297 + 5, 3u);
        v1813 = vld2q_f64(v1571.f64);
        v324.f64[0] = v323[1].f64[0];
        _V4.D[1] = v1573.f64[1];
        _D6 = v1542.f64[1];
        v327 = vmlaq_n_f64(vmulq_n_f64(v1813.val[0], v1542.f64[0]), v1813.val[1], v1542.f64[1]);
        __asm { FMLA            D1, D6, V4.D[1] }
        *v323 = vaddq_f64(*v323, v327);
        *(_QWORD *)&v323[1].f64[0] = *(_OWORD *)&vaddq_f64(v324, v1813.val[0]);
      }
    }
  }
  v328 = *(unsigned int **)(a2 + 128);
  if (*((_BYTE *)v328 + 20))
  {
    v329 = *(unsigned int **)(a2 + 64);
    if (*((_BYTE *)v329 + 20))
    {
      v330 = *(_QWORD *)(*v21 + 8 * (v1530[2239] + *v328));
      v331 = *(_QWORD *)(*v21 + 8 * (v1530[2236] + *v329));
      if (v330 <= v331)
      {
        v332 = (float64x2_t *)sub_20F762098(v1530 + 2279, *(_QWORD *)(*v21 + 8 * (v1530[2239] + *v328)), v331, 3u);
        v333.f64[0] = v332[1].f64[0];
        v1899 = vld2q_f64(v1574.f64);
        _V4.D[1] = v1576.f64[1];
        _D6 = v1537.f64[1];
        v336 = vmlaq_n_f64(vmulq_n_f64(v1899.val[0], v1537.f64[0]), v1899.val[1], v1537.f64[1]);
        __asm { FMLA            D2, D6, V4.D[1] }
        *v332 = vaddq_f64(*v332, v336);
        *(_QWORD *)&v332[1].f64[0] = *(_OWORD *)&vaddq_f64(v333, v1899.val[0]);
        v337 = (float64x2_t *)sub_20F762098(v1530 + 2279, v330, (int)v331 + 1, 3u);
        v338.f64[0] = v337[1].f64[0];
        v1900 = vld2q_f64(v1574.f64);
        _V4.D[1] = v1576.f64[1];
        _D6 = v1538.f64[1];
        v341 = vmlaq_n_f64(vmulq_n_f64(v1900.val[0], v1538.f64[0]), v1900.val[1], v1538.f64[1]);
        __asm { FMLA            D2, D6, V4.D[1] }
        *v337 = vaddq_f64(*v337, v341);
        *(_QWORD *)&v337[1].f64[0] = *(_OWORD *)&vaddq_f64(v338, v1900.val[0]);
        v342 = (float64x2_t *)sub_20F762098(v1530 + 2279, v330, (int)v331 + 2, 3u);
        v343.f64[0] = v342[1].f64[0];
        v1901 = vld2q_f64(v1574.f64);
        _V4.D[1] = v1576.f64[1];
        _D6 = v1539.f64[1];
        v346 = vmlaq_n_f64(vmulq_n_f64(v1901.val[0], v1539.f64[0]), v1901.val[1], v1539.f64[1]);
        __asm { FMLA            D2, D6, V4.D[1] }
        *v342 = vaddq_f64(*v342, v346);
        *(_QWORD *)&v342[1].f64[0] = *(_OWORD *)&vaddq_f64(v343, v1901.val[0]);
        v347 = (float64x2_t *)sub_20F762098(v1530 + 2279, v330, (int)v331 + 3, 3u);
        v348.f64[0] = v347[1].f64[0];
        v1902 = vld2q_f64(v1574.f64);
        _V4.D[1] = v1576.f64[1];
        _D6 = v1540.f64[1];
        v351 = vmlaq_n_f64(vmulq_n_f64(v1902.val[0], v1540.f64[0]), v1902.val[1], v1540.f64[1]);
        __asm { FMLA            D2, D6, V4.D[1] }
        *v347 = vaddq_f64(*v347, v351);
        *(_QWORD *)&v347[1].f64[0] = *(_OWORD *)&vaddq_f64(v348, v1902.val[0]);
        v352 = (float64x2_t *)sub_20F762098(v1530 + 2279, v330, (int)v331 + 4, 3u);
        v353.f64[0] = v352[1].f64[0];
        v1903 = vld2q_f64(v1574.f64);
        _V4.D[1] = v1576.f64[1];
        _D6 = v1541.f64[1];
        v356 = vmlaq_n_f64(vmulq_n_f64(v1903.val[0], v1541.f64[0]), v1903.val[1], v1541.f64[1]);
        __asm { FMLA            D2, D6, V4.D[1] }
        *v352 = vaddq_f64(*v352, v356);
        *(_QWORD *)&v352[1].f64[0] = *(_OWORD *)&vaddq_f64(v353, v1903.val[0]);
        v357 = (float64x2_t *)sub_20F762098(v1530 + 2279, v330, (int)v331 + 5, 3u);
        v1814 = vld2q_f64(v1574.f64);
        v358.f64[0] = v357[1].f64[0];
        _V4.D[1] = v1576.f64[1];
        _D6 = v1542.f64[1];
        v361 = vmlaq_n_f64(vmulq_n_f64(v1814.val[0], v1542.f64[0]), v1814.val[1], v1542.f64[1]);
        __asm { FMLA            D1, D6, V4.D[1] }
        *v357 = vaddq_f64(*v357, v361);
        *(_QWORD *)&v357[1].f64[0] = *(_OWORD *)&vaddq_f64(v358, v1814.val[0]);
      }
    }
  }
  v362 = *(unsigned int **)(a2 + 56);
  v363 = *(unsigned int **)(a2 + 72);
  if (*((_BYTE *)v362 + 20))
  {
    if (*((_BYTE *)v363 + 20))
    {
      v364 = *(_QWORD *)(*v21 + 8 * (v1530[2236] + *v362));
      v365 = *(_QWORD *)(*v21 + 8 * (v1530[2233] + *v363));
      if (v364 <= v365)
      {
        for (n = 0; n != 12; n += 2)
        {
          v367 = (float64x2_t *)sub_20F762098(v1530 + 2279, v364, v365, 6u);
          v2176 = vld2q_f64(v1533.f64);
          v2215 = vld2q_f64(v1535.f64);
          v368 = v1543.f64[n];
          v369 = v1543.f64[n + 1];
          v370 = vaddq_f64(v367[2], vmlaq_n_f64(vmulq_n_f64(v2215.val[0], v368), v2215.val[1], v369));
          v371 = vaddq_f64(v367[1], vmlaq_n_f64(vmulq_n_f64(v2176.val[0], v368), v2176.val[1], v369));
          *v367 = vaddq_f64(*v367, vmlaq_n_f64(vmulq_n_f64((float64x2_t)vzip1q_s64((int64x2_t)v1531, (int64x2_t)v1532), v368), (float64x2_t)vzip2q_s64((int64x2_t)v1531, (int64x2_t)v1532), v369));
          v367[1] = v371;
          v367[2] = v370;
          LODWORD(v365) = v365 + 1;
        }
        v363 = *(unsigned int **)(a2 + 72);
        v226 = v1530;
      }
    }
  }
  v372 = *(unsigned int **)(a2 + 64);
  if (*((_BYTE *)v372 + 20))
  {
    if (*((_BYTE *)v363 + 20))
    {
      v373 = *(_QWORD *)(*v21 + 8 * (v226[2236] + *v372));
      v374 = *(_QWORD *)(*v21 + 8 * (v226[2233] + *v363));
      if (v373 <= v374)
      {
        v375 = 0;
        v376 = &v1543.f64[1];
        do
        {
          v377 = (float64x2_t *)sub_20F762098(v226 + 2279, v373, (int)v374 + (int)v375, 6u);
          v1635 = vld2q_f64(v1537.f64);
          v1904 = vld2q_f64(v1539.f64);
          v2195 = vld2q_f64(v1541.f64);
          v378 = *(v376 - 1);
          v379 = vmlaq_n_f64(vmulq_n_f64(v1635.val[0], v378), v1635.val[1], *v376);
          v1635.val[1] = vaddq_f64(v377[2], vmlaq_n_f64(vmulq_n_f64(v2195.val[0], v378), v2195.val[1], *v376));
          v1635.val[0] = vaddq_f64(v377[1], vmlaq_n_f64(vmulq_n_f64(v1904.val[0], v378), v1904.val[1], *v376));
          *v377 = vaddq_f64(*v377, v379);
          *(float64x2x2_t *)v377[1].f64 = v1635;
          ++v375;
          v376 += 2;
        }
        while (v375 != 6);
        v363 = *(unsigned int **)(a2 + 72);
        v226 = v1530;
      }
    }
  }
  if (*((_BYTE *)v363 + 20))
  {
    v380 = 0;
    v381 = *(_QWORD *)(*v21 + 8 * (v226[2233] + *v363));
    v382 = &v1543.f64[1];
    do
    {
      v383 = (float64x2_t *)sub_20F762098(v226 + 2279, v381, (int)v381 + (int)v380, 6u);
      v1636 = vld2q_f64(v1543.f64);
      v1905 = vld2q_f64(v1545.f64);
      v2196 = vld2q_f64(v1547.f64);
      v384 = *(v382 - 1);
      v385 = vmlaq_n_f64(vmulq_n_f64(v1636.val[0], v384), v1636.val[1], *v382);
      v1636.val[1] = vaddq_f64(v383[2], vmlaq_n_f64(vmulq_n_f64(v2196.val[0], v384), v2196.val[1], *v382));
      v1636.val[0] = vaddq_f64(v383[1], vmlaq_n_f64(vmulq_n_f64(v1905.val[0], v384), v1905.val[1], *v382));
      *v383 = vaddq_f64(*v383, v385);
      *(float64x2x2_t *)v383[1].f64 = v1636;
      ++v380;
      v382 += 2;
    }
    while (v380 != 6);
    v386 = (float64x2_t *)(v226[2270] + 8 * v381);
    v1637 = vld2q_f64(v1543.f64);
    v2149 = vld2q_f64(v1545.f64);
    v2216 = vld2q_f64(v1547.f64);
    v387 = vmlaq_laneq_f64(vmulq_n_f64(v1637.val[0], v1527->f64[0]), v1637.val[1], *v1527, 1);
    v1637.val[1] = vsubq_f64(v386[2], vmlaq_laneq_f64(vmulq_n_f64(v2216.val[0], v1527->f64[0]), v2216.val[1], *v1527, 1));
    v1637.val[0] = vsubq_f64(v386[1], vmlaq_laneq_f64(vmulq_n_f64(v2149.val[0], v1527->f64[0]), v2149.val[1], *v1527, 1));
    *v386 = vsubq_f64(*v386, v387);
    *(float64x2x2_t *)v386[1].f64 = v1637;
  }
  v388 = *(unsigned int **)(a2 + 80);
  if (*((_BYTE *)v388 + 20))
  {
    v389 = *(unsigned int **)(a2 + 72);
    if (*((_BYTE *)v389 + 20))
    {
      v390 = v1530[2233];
      v391 = *(_QWORD *)(*v21 + 8 * (v390 + *v388));
      v392 = *(_QWORD *)(*v21 + 8 * (v390 + *v389));
      if (v391 <= v392)
      {
        v393 = 0;
        v394 = &v1543.f64[1];
        do
        {
          v395 = (float64x2_t *)sub_20F762098(v1530 + 2279, v391, (int)v392 + (int)v393, 6u);
          v1638 = vld2q_f64(v1549.f64);
          v1906 = vld2q_f64(v1551.f64);
          v2197 = vld2q_f64(v1553.f64);
          v396 = *(v394 - 1);
          v397 = vmlaq_n_f64(vmulq_n_f64(v1638.val[0], v396), v1638.val[1], *v394);
          v1638.val[1] = vaddq_f64(v395[2], vmlaq_n_f64(vmulq_n_f64(v2197.val[0], v396), v2197.val[1], *v394));
          v1638.val[0] = vaddq_f64(v395[1], vmlaq_n_f64(vmulq_n_f64(v1906.val[0], v396), v1906.val[1], *v394));
          *v395 = vaddq_f64(*v395, v397);
          *(float64x2x2_t *)v395[1].f64 = v1638;
          ++v393;
          v394 += 2;
        }
        while (v393 != 6);
      }
    }
  }
  v398 = *(unsigned int **)(a2 + 88);
  v399 = v1530;
  if (*((_BYTE *)v398 + 20))
  {
    v400 = *(unsigned int **)(a2 + 72);
    if (*((_BYTE *)v400 + 20))
    {
      v401 = *(_QWORD *)(*v21 + 8 * (v1530[2237] + *v398));
      v402 = *(_QWORD *)(*v21 + 8 * (v1530[2233] + *v400));
      if (v401 <= v402)
      {
        v403 = (float64x2_t *)sub_20F762098(v1530 + 2279, *(_QWORD *)(*v21 + 8 * (v1530[2237] + *v398)), v402, 4u);
        v1639 = vld2q_f64(v1555.f64);
        v404 = &v1557;
        v1907 = vld2q_f64(v404->f64);
        v405 = vmlaq_n_f64(vmulq_n_f64(v1639.val[0], v1543.f64[0]), v1639.val[1], v1543.f64[1]);
        v1639.val[0] = vaddq_f64(v403[1], vmlaq_n_f64(vmulq_n_f64(v1907.val[0], v1543.f64[0]), v1907.val[1], v1543.f64[1]));
        *v403 = vaddq_f64(*v403, v405);
        v403[1] = v1639.val[0];
        v406 = (float64x2_t *)sub_20F762098(v1530 + 2279, v401, (int)v402 + 1, 4u);
        v1640 = vld2q_f64(v1555.f64);
        v1908 = vld2q_f64(v1557.f64);
        v407 = vmlaq_n_f64(vmulq_n_f64(v1640.val[0], v1544.f64[0]), v1640.val[1], v1544.f64[1]);
        v1640.val[0] = vaddq_f64(v406[1], vmlaq_n_f64(vmulq_n_f64(v1908.val[0], v1544.f64[0]), v1908.val[1], v1544.f64[1]));
        *v406 = vaddq_f64(*v406, v407);
        v406[1] = v1640.val[0];
        v408 = (float64x2_t *)sub_20F762098(v1530 + 2279, v401, (int)v402 + 2, 4u);
        v1641 = vld2q_f64(v1555.f64);
        v1909 = vld2q_f64(v1557.f64);
        v409 = vmlaq_n_f64(vmulq_n_f64(v1641.val[0], v1545.f64[0]), v1641.val[1], v1545.f64[1]);
        v1641.val[0] = vaddq_f64(v408[1], vmlaq_n_f64(vmulq_n_f64(v1909.val[0], v1545.f64[0]), v1909.val[1], v1545.f64[1]));
        *v408 = vaddq_f64(*v408, v409);
        v408[1] = v1641.val[0];
        v410 = (float64x2_t *)sub_20F762098(v1530 + 2279, v401, (int)v402 + 3, 4u);
        v1642 = vld2q_f64(v1555.f64);
        v1910 = vld2q_f64(v1557.f64);
        v411 = vmlaq_n_f64(vmulq_n_f64(v1642.val[0], v1546.f64[0]), v1642.val[1], v1546.f64[1]);
        v1642.val[0] = vaddq_f64(v410[1], vmlaq_n_f64(vmulq_n_f64(v1910.val[0], v1546.f64[0]), v1910.val[1], v1546.f64[1]));
        *v410 = vaddq_f64(*v410, v411);
        v410[1] = v1642.val[0];
        v412 = (float64x2_t *)sub_20F762098(v1530 + 2279, v401, (int)v402 + 4, 4u);
        v1643 = vld2q_f64(v1555.f64);
        v1911 = vld2q_f64(v1557.f64);
        v413 = vmlaq_n_f64(vmulq_n_f64(v1643.val[0], v1547.f64[0]), v1643.val[1], v1547.f64[1]);
        v1643.val[0] = vaddq_f64(v412[1], vmlaq_n_f64(vmulq_n_f64(v1911.val[0], v1547.f64[0]), v1911.val[1], v1547.f64[1]));
        *v412 = vaddq_f64(*v412, v413);
        v412[1] = v1643.val[0];
        v414 = (float64x2_t *)sub_20F762098(v1530 + 2279, v401, (int)v402 + 5, 4u);
        v1644 = vld2q_f64(v1555.f64);
        v1912 = vld2q_f64(v1557.f64);
        v415 = vmlaq_n_f64(vmulq_n_f64(v1644.val[0], v1548.f64[0]), v1644.val[1], v1548.f64[1]);
        v1644.val[0] = vaddq_f64(v414[1], vmlaq_n_f64(vmulq_n_f64(v1912.val[0], v1548.f64[0]), v1912.val[1], v1548.f64[1]));
        *v414 = vaddq_f64(*v414, v415);
        v414[1] = v1644.val[0];
      }
    }
  }
  v416 = *(unsigned int **)(a2 + 96);
  if (*((_BYTE *)v416 + 20))
  {
    v417 = *(unsigned int **)(a2 + 72);
    if (*((_BYTE *)v417 + 20))
    {
      v418 = *(_QWORD *)(*v21 + 8 * (v1530[2237] + *v416));
      v419 = *(_QWORD *)(*v21 + 8 * (v1530[2233] + *v417));
      if (v418 <= v419)
      {
        v420 = (float64x2_t *)sub_20F762098(v1530 + 2279, *(_QWORD *)(*v21 + 8 * (v1530[2237] + *v416)), v419, 4u);
        v1645 = vld2q_f64(v1559.f64);
        v421 = &v1561;
        v1913 = vld2q_f64(v421->f64);
        v422 = vmlaq_n_f64(vmulq_n_f64(v1645.val[0], v1543.f64[0]), v1645.val[1], v1543.f64[1]);
        v1645.val[0] = vaddq_f64(v420[1], vmlaq_n_f64(vmulq_n_f64(v1913.val[0], v1543.f64[0]), v1913.val[1], v1543.f64[1]));
        *v420 = vaddq_f64(*v420, v422);
        v420[1] = v1645.val[0];
        v423 = (float64x2_t *)sub_20F762098(v1530 + 2279, v418, (int)v419 + 1, 4u);
        v1646 = vld2q_f64(v1559.f64);
        v1914 = vld2q_f64(v1561.f64);
        v424 = vmlaq_n_f64(vmulq_n_f64(v1646.val[0], v1544.f64[0]), v1646.val[1], v1544.f64[1]);
        v1646.val[0] = vaddq_f64(v423[1], vmlaq_n_f64(vmulq_n_f64(v1914.val[0], v1544.f64[0]), v1914.val[1], v1544.f64[1]));
        *v423 = vaddq_f64(*v423, v424);
        v423[1] = v1646.val[0];
        v425 = (float64x2_t *)sub_20F762098(v1530 + 2279, v418, (int)v419 + 2, 4u);
        v1647 = vld2q_f64(v1559.f64);
        v1915 = vld2q_f64(v1561.f64);
        v426 = vmlaq_n_f64(vmulq_n_f64(v1647.val[0], v1545.f64[0]), v1647.val[1], v1545.f64[1]);
        v1647.val[0] = vaddq_f64(v425[1], vmlaq_n_f64(vmulq_n_f64(v1915.val[0], v1545.f64[0]), v1915.val[1], v1545.f64[1]));
        *v425 = vaddq_f64(*v425, v426);
        v425[1] = v1647.val[0];
        v427 = (float64x2_t *)sub_20F762098(v1530 + 2279, v418, (int)v419 + 3, 4u);
        v1648 = vld2q_f64(v1559.f64);
        v1916 = vld2q_f64(v1561.f64);
        v428 = vmlaq_n_f64(vmulq_n_f64(v1648.val[0], v1546.f64[0]), v1648.val[1], v1546.f64[1]);
        v1648.val[0] = vaddq_f64(v427[1], vmlaq_n_f64(vmulq_n_f64(v1916.val[0], v1546.f64[0]), v1916.val[1], v1546.f64[1]));
        *v427 = vaddq_f64(*v427, v428);
        v427[1] = v1648.val[0];
        v429 = (float64x2_t *)sub_20F762098(v1530 + 2279, v418, (int)v419 + 4, 4u);
        v1649 = vld2q_f64(v1559.f64);
        v1917 = vld2q_f64(v1561.f64);
        v430 = vmlaq_n_f64(vmulq_n_f64(v1649.val[0], v1547.f64[0]), v1649.val[1], v1547.f64[1]);
        v1649.val[0] = vaddq_f64(v429[1], vmlaq_n_f64(vmulq_n_f64(v1917.val[0], v1547.f64[0]), v1917.val[1], v1547.f64[1]));
        *v429 = vaddq_f64(*v429, v430);
        v429[1] = v1649.val[0];
        v431 = (float64x2_t *)sub_20F762098(v1530 + 2279, v418, (int)v419 + 5, 4u);
        v1650 = vld2q_f64(v1559.f64);
        v1918 = vld2q_f64(v1561.f64);
        v432 = vmlaq_n_f64(vmulq_n_f64(v1650.val[0], v1548.f64[0]), v1650.val[1], v1548.f64[1]);
        v1650.val[0] = vaddq_f64(v431[1], vmlaq_n_f64(vmulq_n_f64(v1918.val[0], v1548.f64[0]), v1918.val[1], v1548.f64[1]));
        *v431 = vaddq_f64(*v431, v432);
        v431[1] = v1650.val[0];
      }
    }
  }
  v433 = *(unsigned int **)(a2 + 104);
  if (*((_BYTE *)v433 + 20))
  {
    v434 = *(unsigned int **)(a2 + 72);
    if (*((_BYTE *)v434 + 20))
    {
      v435 = *(_QWORD *)(*v21 + 8 * (v1530[2238] + *v433));
      v436 = *(_QWORD *)(*v21 + 8 * (v1530[2233] + *v434));
      if (v435 <= v436)
      {
        v437 = (float64x2_t *)sub_20F762098(v1530 + 2279, *(_QWORD *)(*v21 + 8 * (v1530[2238] + *v433)), v436, 4u);
        v1651 = vld2q_f64(v1563.f64);
        v438 = &v1565;
        v1919 = vld2q_f64(v438->f64);
        v439 = vmlaq_n_f64(vmulq_n_f64(v1651.val[0], v1543.f64[0]), v1651.val[1], v1543.f64[1]);
        v1651.val[0] = vaddq_f64(v437[1], vmlaq_n_f64(vmulq_n_f64(v1919.val[0], v1543.f64[0]), v1919.val[1], v1543.f64[1]));
        *v437 = vaddq_f64(*v437, v439);
        v437[1] = v1651.val[0];
        v440 = (float64x2_t *)sub_20F762098(v1530 + 2279, v435, (int)v436 + 1, 4u);
        v1652 = vld2q_f64(v1563.f64);
        v1920 = vld2q_f64(v1565.f64);
        v441 = vmlaq_n_f64(vmulq_n_f64(v1652.val[0], v1544.f64[0]), v1652.val[1], v1544.f64[1]);
        v1652.val[0] = vaddq_f64(v440[1], vmlaq_n_f64(vmulq_n_f64(v1920.val[0], v1544.f64[0]), v1920.val[1], v1544.f64[1]));
        *v440 = vaddq_f64(*v440, v441);
        v440[1] = v1652.val[0];
        v442 = (float64x2_t *)sub_20F762098(v1530 + 2279, v435, (int)v436 + 2, 4u);
        v1653 = vld2q_f64(v1563.f64);
        v1921 = vld2q_f64(v1565.f64);
        v443 = vmlaq_n_f64(vmulq_n_f64(v1653.val[0], v1545.f64[0]), v1653.val[1], v1545.f64[1]);
        v1653.val[0] = vaddq_f64(v442[1], vmlaq_n_f64(vmulq_n_f64(v1921.val[0], v1545.f64[0]), v1921.val[1], v1545.f64[1]));
        *v442 = vaddq_f64(*v442, v443);
        v442[1] = v1653.val[0];
        v444 = (float64x2_t *)sub_20F762098(v1530 + 2279, v435, (int)v436 + 3, 4u);
        v1654 = vld2q_f64(v1563.f64);
        v1922 = vld2q_f64(v1565.f64);
        v445 = vmlaq_n_f64(vmulq_n_f64(v1654.val[0], v1546.f64[0]), v1654.val[1], v1546.f64[1]);
        v1654.val[0] = vaddq_f64(v444[1], vmlaq_n_f64(vmulq_n_f64(v1922.val[0], v1546.f64[0]), v1922.val[1], v1546.f64[1]));
        *v444 = vaddq_f64(*v444, v445);
        v444[1] = v1654.val[0];
        v446 = (float64x2_t *)sub_20F762098(v1530 + 2279, v435, (int)v436 + 4, 4u);
        v1655 = vld2q_f64(v1563.f64);
        v1923 = vld2q_f64(v1565.f64);
        v447 = vmlaq_n_f64(vmulq_n_f64(v1655.val[0], v1547.f64[0]), v1655.val[1], v1547.f64[1]);
        v1655.val[0] = vaddq_f64(v446[1], vmlaq_n_f64(vmulq_n_f64(v1923.val[0], v1547.f64[0]), v1923.val[1], v1547.f64[1]));
        *v446 = vaddq_f64(*v446, v447);
        v446[1] = v1655.val[0];
        v448 = (float64x2_t *)sub_20F762098(v1530 + 2279, v435, (int)v436 + 5, 4u);
        v1656 = vld2q_f64(v1563.f64);
        v1924 = vld2q_f64(v1565.f64);
        v449 = vmlaq_n_f64(vmulq_n_f64(v1656.val[0], v1548.f64[0]), v1656.val[1], v1548.f64[1]);
        v1656.val[0] = vaddq_f64(v448[1], vmlaq_n_f64(vmulq_n_f64(v1924.val[0], v1548.f64[0]), v1924.val[1], v1548.f64[1]));
        *v448 = vaddq_f64(*v448, v449);
        v448[1] = v1656.val[0];
      }
    }
  }
  v450 = *(unsigned int **)(a2 + 112);
  if (*((_BYTE *)v450 + 20))
  {
    v451 = *(unsigned int **)(a2 + 72);
    if (*((_BYTE *)v451 + 20))
    {
      v452 = *(_QWORD *)(*v21 + 8 * (v1530[2238] + *v450));
      v453 = *(_QWORD *)(*v21 + 8 * (v1530[2233] + *v451));
      if (v452 <= v453)
      {
        v454 = (float64x2_t *)sub_20F762098(v1530 + 2279, *(_QWORD *)(*v21 + 8 * (v1530[2238] + *v450)), v453, 4u);
        v1657 = vld2q_f64(v1567.f64);
        v455 = &v1569;
        v1925 = vld2q_f64(v455->f64);
        v456 = vmlaq_n_f64(vmulq_n_f64(v1657.val[0], v1543.f64[0]), v1657.val[1], v1543.f64[1]);
        v1657.val[0] = vaddq_f64(v454[1], vmlaq_n_f64(vmulq_n_f64(v1925.val[0], v1543.f64[0]), v1925.val[1], v1543.f64[1]));
        *v454 = vaddq_f64(*v454, v456);
        v454[1] = v1657.val[0];
        v457 = (float64x2_t *)sub_20F762098(v1530 + 2279, v452, (int)v453 + 1, 4u);
        v1658 = vld2q_f64(v1567.f64);
        v1926 = vld2q_f64(v1569.f64);
        v458 = vmlaq_n_f64(vmulq_n_f64(v1658.val[0], v1544.f64[0]), v1658.val[1], v1544.f64[1]);
        v1658.val[0] = vaddq_f64(v457[1], vmlaq_n_f64(vmulq_n_f64(v1926.val[0], v1544.f64[0]), v1926.val[1], v1544.f64[1]));
        *v457 = vaddq_f64(*v457, v458);
        v457[1] = v1658.val[0];
        v459 = (float64x2_t *)sub_20F762098(v1530 + 2279, v452, (int)v453 + 2, 4u);
        v1659 = vld2q_f64(v1567.f64);
        v1927 = vld2q_f64(v1569.f64);
        v460 = vmlaq_n_f64(vmulq_n_f64(v1659.val[0], v1545.f64[0]), v1659.val[1], v1545.f64[1]);
        v1659.val[0] = vaddq_f64(v459[1], vmlaq_n_f64(vmulq_n_f64(v1927.val[0], v1545.f64[0]), v1927.val[1], v1545.f64[1]));
        *v459 = vaddq_f64(*v459, v460);
        v459[1] = v1659.val[0];
        v461 = (float64x2_t *)sub_20F762098(v1530 + 2279, v452, (int)v453 + 3, 4u);
        v1660 = vld2q_f64(v1567.f64);
        v1928 = vld2q_f64(v1569.f64);
        v462 = vmlaq_n_f64(vmulq_n_f64(v1660.val[0], v1546.f64[0]), v1660.val[1], v1546.f64[1]);
        v1660.val[0] = vaddq_f64(v461[1], vmlaq_n_f64(vmulq_n_f64(v1928.val[0], v1546.f64[0]), v1928.val[1], v1546.f64[1]));
        *v461 = vaddq_f64(*v461, v462);
        v461[1] = v1660.val[0];
        v463 = (float64x2_t *)sub_20F762098(v1530 + 2279, v452, (int)v453 + 4, 4u);
        v1661 = vld2q_f64(v1567.f64);
        v1929 = vld2q_f64(v1569.f64);
        v464 = vmlaq_n_f64(vmulq_n_f64(v1661.val[0], v1547.f64[0]), v1661.val[1], v1547.f64[1]);
        v1661.val[0] = vaddq_f64(v463[1], vmlaq_n_f64(vmulq_n_f64(v1929.val[0], v1547.f64[0]), v1929.val[1], v1547.f64[1]));
        *v463 = vaddq_f64(*v463, v464);
        v463[1] = v1661.val[0];
        v465 = (float64x2_t *)sub_20F762098(v1530 + 2279, v452, (int)v453 + 5, 4u);
        v1662 = vld2q_f64(v1567.f64);
        v1930 = vld2q_f64(v1569.f64);
        v466 = vmlaq_n_f64(vmulq_n_f64(v1662.val[0], v1548.f64[0]), v1662.val[1], v1548.f64[1]);
        v1662.val[0] = vaddq_f64(v465[1], vmlaq_n_f64(vmulq_n_f64(v1930.val[0], v1548.f64[0]), v1930.val[1], v1548.f64[1]));
        *v465 = vaddq_f64(*v465, v466);
        v465[1] = v1662.val[0];
      }
    }
  }
  v467 = *(unsigned int **)(a2 + 120);
  if (*((_BYTE *)v467 + 20))
  {
    v468 = *(unsigned int **)(a2 + 72);
    if (*((_BYTE *)v468 + 20))
    {
      v469 = *(_QWORD *)(*v21 + 8 * (v1530[2239] + *v467));
      v470 = *(_QWORD *)(*v21 + 8 * (v1530[2233] + *v468));
      if (v469 <= v470)
      {
        v471 = (float64x2_t *)sub_20F762098(v1530 + 2279, *(_QWORD *)(*v21 + 8 * (v1530[2239] + *v467)), v470, 3u);
        v472.f64[0] = v471[1].f64[0];
        v1931 = vld2q_f64(v1571.f64);
        _V4.D[1] = v1573.f64[1];
        _D6 = v1543.f64[1];
        v475 = vmlaq_n_f64(vmulq_n_f64(v1931.val[0], v1543.f64[0]), v1931.val[1], v1543.f64[1]);
        __asm { FMLA            D2, D6, V4.D[1] }
        *v471 = vaddq_f64(*v471, v475);
        *(_QWORD *)&v471[1].f64[0] = *(_OWORD *)&vaddq_f64(v472, v1931.val[0]);
        v476 = (float64x2_t *)sub_20F762098(v1530 + 2279, v469, (int)v470 + 1, 3u);
        v477.f64[0] = v476[1].f64[0];
        v1932 = vld2q_f64(v1571.f64);
        _V4.D[1] = v1573.f64[1];
        _D6 = v1544.f64[1];
        v480 = vmlaq_n_f64(vmulq_n_f64(v1932.val[0], v1544.f64[0]), v1932.val[1], v1544.f64[1]);
        __asm { FMLA            D2, D6, V4.D[1] }
        *v476 = vaddq_f64(*v476, v480);
        *(_QWORD *)&v476[1].f64[0] = *(_OWORD *)&vaddq_f64(v477, v1932.val[0]);
        v481 = (float64x2_t *)sub_20F762098(v1530 + 2279, v469, (int)v470 + 2, 3u);
        v482.f64[0] = v481[1].f64[0];
        v1933 = vld2q_f64(v1571.f64);
        _V4.D[1] = v1573.f64[1];
        _D6 = v1545.f64[1];
        v485 = vmlaq_n_f64(vmulq_n_f64(v1933.val[0], v1545.f64[0]), v1933.val[1], v1545.f64[1]);
        __asm { FMLA            D2, D6, V4.D[1] }
        *v481 = vaddq_f64(*v481, v485);
        *(_QWORD *)&v481[1].f64[0] = *(_OWORD *)&vaddq_f64(v482, v1933.val[0]);
        v486 = (float64x2_t *)sub_20F762098(v1530 + 2279, v469, (int)v470 + 3, 3u);
        v487.f64[0] = v486[1].f64[0];
        v1934 = vld2q_f64(v1571.f64);
        _V4.D[1] = v1573.f64[1];
        _D6 = v1546.f64[1];
        v490 = vmlaq_n_f64(vmulq_n_f64(v1934.val[0], v1546.f64[0]), v1934.val[1], v1546.f64[1]);
        __asm { FMLA            D2, D6, V4.D[1] }
        *v486 = vaddq_f64(*v486, v490);
        *(_QWORD *)&v486[1].f64[0] = *(_OWORD *)&vaddq_f64(v487, v1934.val[0]);
        v491 = (float64x2_t *)sub_20F762098(v1530 + 2279, v469, (int)v470 + 4, 3u);
        v492.f64[0] = v491[1].f64[0];
        v1935 = vld2q_f64(v1571.f64);
        _V4.D[1] = v1573.f64[1];
        _D6 = v1547.f64[1];
        v495 = vmlaq_n_f64(vmulq_n_f64(v1935.val[0], v1547.f64[0]), v1935.val[1], v1547.f64[1]);
        __asm { FMLA            D2, D6, V4.D[1] }
        *v491 = vaddq_f64(*v491, v495);
        *(_QWORD *)&v491[1].f64[0] = *(_OWORD *)&vaddq_f64(v492, v1935.val[0]);
        v496 = (float64x2_t *)sub_20F762098(v1530 + 2279, v469, (int)v470 + 5, 3u);
        v1815 = vld2q_f64(v1571.f64);
        v497.f64[0] = v496[1].f64[0];
        _V4.D[1] = v1573.f64[1];
        _D6 = v1548.f64[1];
        v500 = vmlaq_n_f64(vmulq_n_f64(v1815.val[0], v1548.f64[0]), v1815.val[1], v1548.f64[1]);
        __asm { FMLA            D1, D6, V4.D[1] }
        *v496 = vaddq_f64(*v496, v500);
        *(_QWORD *)&v496[1].f64[0] = *(_OWORD *)&vaddq_f64(v497, v1815.val[0]);
      }
    }
  }
  v501 = *(unsigned int **)(a2 + 128);
  if (*((_BYTE *)v501 + 20))
  {
    v502 = *(unsigned int **)(a2 + 72);
    if (*((_BYTE *)v502 + 20))
    {
      v503 = *(_QWORD *)(*v21 + 8 * (v1530[2239] + *v501));
      v504 = *(_QWORD *)(*v21 + 8 * (v1530[2233] + *v502));
      if (v503 <= v504)
      {
        v505 = (float64x2_t *)sub_20F762098(v1530 + 2279, *(_QWORD *)(*v21 + 8 * (v1530[2239] + *v501)), v504, 3u);
        v506.f64[0] = v505[1].f64[0];
        v1936 = vld2q_f64(v1574.f64);
        _V4.D[1] = v1576.f64[1];
        _D6 = v1543.f64[1];
        v509 = vmlaq_n_f64(vmulq_n_f64(v1936.val[0], v1543.f64[0]), v1936.val[1], v1543.f64[1]);
        __asm { FMLA            D2, D6, V4.D[1] }
        *v505 = vaddq_f64(*v505, v509);
        *(_QWORD *)&v505[1].f64[0] = *(_OWORD *)&vaddq_f64(v506, v1936.val[0]);
        v510 = (float64x2_t *)sub_20F762098(v1530 + 2279, v503, (int)v504 + 1, 3u);
        v511.f64[0] = v510[1].f64[0];
        v1937 = vld2q_f64(v1574.f64);
        _V4.D[1] = v1576.f64[1];
        _D6 = v1544.f64[1];
        v514 = vmlaq_n_f64(vmulq_n_f64(v1937.val[0], v1544.f64[0]), v1937.val[1], v1544.f64[1]);
        __asm { FMLA            D2, D6, V4.D[1] }
        *v510 = vaddq_f64(*v510, v514);
        *(_QWORD *)&v510[1].f64[0] = *(_OWORD *)&vaddq_f64(v511, v1937.val[0]);
        v515 = (float64x2_t *)sub_20F762098(v1530 + 2279, v503, (int)v504 + 2, 3u);
        v516.f64[0] = v515[1].f64[0];
        v1938 = vld2q_f64(v1574.f64);
        _V4.D[1] = v1576.f64[1];
        _D6 = v1545.f64[1];
        v519 = vmlaq_n_f64(vmulq_n_f64(v1938.val[0], v1545.f64[0]), v1938.val[1], v1545.f64[1]);
        __asm { FMLA            D2, D6, V4.D[1] }
        *v515 = vaddq_f64(*v515, v519);
        *(_QWORD *)&v515[1].f64[0] = *(_OWORD *)&vaddq_f64(v516, v1938.val[0]);
        v520 = (float64x2_t *)sub_20F762098(v1530 + 2279, v503, (int)v504 + 3, 3u);
        v521.f64[0] = v520[1].f64[0];
        v1939 = vld2q_f64(v1574.f64);
        _V4.D[1] = v1576.f64[1];
        _D6 = v1546.f64[1];
        v524 = vmlaq_n_f64(vmulq_n_f64(v1939.val[0], v1546.f64[0]), v1939.val[1], v1546.f64[1]);
        __asm { FMLA            D2, D6, V4.D[1] }
        *v520 = vaddq_f64(*v520, v524);
        *(_QWORD *)&v520[1].f64[0] = *(_OWORD *)&vaddq_f64(v521, v1939.val[0]);
        v525 = (float64x2_t *)sub_20F762098(v1530 + 2279, v503, (int)v504 + 4, 3u);
        v526.f64[0] = v525[1].f64[0];
        v1940 = vld2q_f64(v1574.f64);
        _V4.D[1] = v1576.f64[1];
        _D6 = v1547.f64[1];
        v529 = vmlaq_n_f64(vmulq_n_f64(v1940.val[0], v1547.f64[0]), v1940.val[1], v1547.f64[1]);
        __asm { FMLA            D2, D6, V4.D[1] }
        *v525 = vaddq_f64(*v525, v529);
        *(_QWORD *)&v525[1].f64[0] = *(_OWORD *)&vaddq_f64(v526, v1940.val[0]);
        v530 = (float64x2_t *)sub_20F762098(v1530 + 2279, v503, (int)v504 + 5, 3u);
        v1816 = vld2q_f64(v1574.f64);
        v531.f64[0] = v530[1].f64[0];
        _V4.D[1] = v1576.f64[1];
        _D6 = v1548.f64[1];
        v534 = vmlaq_n_f64(vmulq_n_f64(v1816.val[0], v1548.f64[0]), v1816.val[1], v1548.f64[1]);
        __asm { FMLA            D1, D6, V4.D[1] }
        *v530 = vaddq_f64(*v530, v534);
        *(_QWORD *)&v530[1].f64[0] = *(_OWORD *)&vaddq_f64(v531, v1816.val[0]);
      }
    }
  }
  v535 = *(unsigned int **)(a2 + 56);
  v536 = *(unsigned int **)(a2 + 80);
  if (*((_BYTE *)v535 + 20))
  {
    if (*((_BYTE *)v536 + 20))
    {
      v537 = *(_QWORD *)(*v21 + 8 * (v1530[2236] + *v535));
      v538 = *(_QWORD *)(*v21 + 8 * (v1530[2233] + *v536));
      if (v537 <= v538)
      {
        for (ii = 0; ii != 12; ii += 2)
        {
          v540 = (float64x2_t *)sub_20F762098(v1530 + 2279, v537, v538, 6u);
          v2177 = vld2q_f64(v1533.f64);
          v2217 = vld2q_f64(v1535.f64);
          v541 = v1549.f64[ii];
          v542 = v1549.f64[ii + 1];
          v543 = vaddq_f64(v540[2], vmlaq_n_f64(vmulq_n_f64(v2217.val[0], v541), v2217.val[1], v542));
          v544 = vaddq_f64(v540[1], vmlaq_n_f64(vmulq_n_f64(v2177.val[0], v541), v2177.val[1], v542));
          *v540 = vaddq_f64(*v540, vmlaq_n_f64(vmulq_n_f64((float64x2_t)vzip1q_s64((int64x2_t)v1531, (int64x2_t)v1532), v541), (float64x2_t)vzip2q_s64((int64x2_t)v1531, (int64x2_t)v1532), v542));
          v540[1] = v544;
          v540[2] = v543;
          LODWORD(v538) = v538 + 1;
        }
        v536 = *(unsigned int **)(a2 + 80);
        v399 = v1530;
      }
    }
  }
  v545 = *(unsigned int **)(a2 + 64);
  if (*((_BYTE *)v545 + 20))
  {
    if (*((_BYTE *)v536 + 20))
    {
      v546 = *(_QWORD *)(*v21 + 8 * (v399[2236] + *v545));
      v547 = *(_QWORD *)(*v21 + 8 * (v399[2233] + *v536));
      if (v546 <= v547)
      {
        v548 = 0;
        v549 = &v1549.f64[1];
        do
        {
          v550 = (float64x2_t *)sub_20F762098(v399 + 2279, v546, (int)v547 + (int)v548, 6u);
          v1663 = vld2q_f64(v1537.f64);
          v1941 = vld2q_f64(v1539.f64);
          v2198 = vld2q_f64(v1541.f64);
          v551 = *(v549 - 1);
          v552 = vmlaq_n_f64(vmulq_n_f64(v1663.val[0], v551), v1663.val[1], *v549);
          v1663.val[1] = vaddq_f64(v550[2], vmlaq_n_f64(vmulq_n_f64(v2198.val[0], v551), v2198.val[1], *v549));
          v1663.val[0] = vaddq_f64(v550[1], vmlaq_n_f64(vmulq_n_f64(v1941.val[0], v551), v1941.val[1], *v549));
          *v550 = vaddq_f64(*v550, v552);
          *(float64x2x2_t *)v550[1].f64 = v1663;
          ++v548;
          v549 += 2;
        }
        while (v548 != 6);
        v536 = *(unsigned int **)(a2 + 80);
        v399 = v1530;
      }
    }
  }
  v553 = *(unsigned int **)(a2 + 72);
  if (*((_BYTE *)v553 + 20))
  {
    if (*((_BYTE *)v536 + 20))
    {
      v554 = v399[2233];
      v555 = *(_QWORD *)(*v21 + 8 * (v554 + *v553));
      v556 = *(_QWORD *)(*v21 + 8 * (v554 + *v536));
      if (v555 <= v556)
      {
        v557 = 0;
        v558 = &v1549.f64[1];
        do
        {
          v559 = (float64x2_t *)sub_20F762098(v399 + 2279, v555, (int)v556 + (int)v557, 6u);
          v1664 = vld2q_f64(v1543.f64);
          v1942 = vld2q_f64(v1545.f64);
          v2199 = vld2q_f64(v1547.f64);
          v560 = *(v558 - 1);
          v561 = vmlaq_n_f64(vmulq_n_f64(v1664.val[0], v560), v1664.val[1], *v558);
          v1664.val[1] = vaddq_f64(v559[2], vmlaq_n_f64(vmulq_n_f64(v2199.val[0], v560), v2199.val[1], *v558));
          v1664.val[0] = vaddq_f64(v559[1], vmlaq_n_f64(vmulq_n_f64(v1942.val[0], v560), v1942.val[1], *v558));
          *v559 = vaddq_f64(*v559, v561);
          *(float64x2x2_t *)v559[1].f64 = v1664;
          ++v557;
          v558 += 2;
        }
        while (v557 != 6);
        v536 = *(unsigned int **)(a2 + 80);
        v399 = v1530;
      }
    }
  }
  if (*((_BYTE *)v536 + 20))
  {
    v562 = 0;
    v563 = *(_QWORD *)(*v21 + 8 * (v399[2233] + *v536));
    v564 = &v1549.f64[1];
    do
    {
      v565 = (float64x2_t *)sub_20F762098(v399 + 2279, v563, (int)v563 + (int)v562, 6u);
      v1665 = vld2q_f64(v1549.f64);
      v1943 = vld2q_f64(v1551.f64);
      v2200 = vld2q_f64(v1553.f64);
      v566 = *(v564 - 1);
      v567 = vmlaq_n_f64(vmulq_n_f64(v1665.val[0], v566), v1665.val[1], *v564);
      v1665.val[1] = vaddq_f64(v565[2], vmlaq_n_f64(vmulq_n_f64(v2200.val[0], v566), v2200.val[1], *v564));
      v1665.val[0] = vaddq_f64(v565[1], vmlaq_n_f64(vmulq_n_f64(v1943.val[0], v566), v1943.val[1], *v564));
      *v565 = vaddq_f64(*v565, v567);
      *(float64x2x2_t *)v565[1].f64 = v1665;
      ++v562;
      v564 += 2;
    }
    while (v562 != 6);
    v568 = (float64x2_t *)(v399[2270] + 8 * v563);
    v1666 = vld2q_f64(v1549.f64);
    v2150 = vld2q_f64(v1551.f64);
    v2218 = vld2q_f64(v1553.f64);
    v569 = vmlaq_laneq_f64(vmulq_n_f64(v1666.val[0], v1527->f64[0]), v1666.val[1], *v1527, 1);
    v1666.val[1] = vsubq_f64(v568[2], vmlaq_laneq_f64(vmulq_n_f64(v2218.val[0], v1527->f64[0]), v2218.val[1], *v1527, 1));
    v1666.val[0] = vsubq_f64(v568[1], vmlaq_laneq_f64(vmulq_n_f64(v2150.val[0], v1527->f64[0]), v2150.val[1], *v1527, 1));
    *v568 = vsubq_f64(*v568, v569);
    *(float64x2x2_t *)v568[1].f64 = v1666;
  }
  v570 = *(unsigned int **)(a2 + 88);
  if (*((_BYTE *)v570 + 20))
  {
    v571 = *(unsigned int **)(a2 + 80);
    if (*((_BYTE *)v571 + 20))
    {
      v572 = *(_QWORD *)(*v21 + 8 * (v399[2237] + *v570));
      v573 = *(_QWORD *)(*v21 + 8 * (v399[2233] + *v571));
      if (v572 <= v573)
      {
        v574 = (float64x2_t *)sub_20F762098(v399 + 2279, *(_QWORD *)(*v21 + 8 * (v399[2237] + *v570)), v573, 4u);
        v1667 = vld2q_f64(v1555.f64);
        v575 = &v1557;
        v1944 = vld2q_f64(v575->f64);
        v576 = vmlaq_n_f64(vmulq_n_f64(v1667.val[0], v1549.f64[0]), v1667.val[1], v1549.f64[1]);
        v1667.val[0] = vaddq_f64(v574[1], vmlaq_n_f64(vmulq_n_f64(v1944.val[0], v1549.f64[0]), v1944.val[1], v1549.f64[1]));
        *v574 = vaddq_f64(*v574, v576);
        v574[1] = v1667.val[0];
        v577 = (float64x2_t *)sub_20F762098(v399 + 2279, v572, (int)v573 + 1, 4u);
        v1668 = vld2q_f64(v1555.f64);
        v1945 = vld2q_f64(v1557.f64);
        v578 = vmlaq_n_f64(vmulq_n_f64(v1668.val[0], v1550.f64[0]), v1668.val[1], v1550.f64[1]);
        v1668.val[0] = vaddq_f64(v577[1], vmlaq_n_f64(vmulq_n_f64(v1945.val[0], v1550.f64[0]), v1945.val[1], v1550.f64[1]));
        *v577 = vaddq_f64(*v577, v578);
        v577[1] = v1668.val[0];
        v579 = (float64x2_t *)sub_20F762098(v399 + 2279, v572, (int)v573 + 2, 4u);
        v1669 = vld2q_f64(v1555.f64);
        v1946 = vld2q_f64(v1557.f64);
        v580 = vmlaq_n_f64(vmulq_n_f64(v1669.val[0], v1551.f64[0]), v1669.val[1], v1551.f64[1]);
        v1669.val[0] = vaddq_f64(v579[1], vmlaq_n_f64(vmulq_n_f64(v1946.val[0], v1551.f64[0]), v1946.val[1], v1551.f64[1]));
        *v579 = vaddq_f64(*v579, v580);
        v579[1] = v1669.val[0];
        v581 = (float64x2_t *)sub_20F762098(v399 + 2279, v572, (int)v573 + 3, 4u);
        v1670 = vld2q_f64(v1555.f64);
        v1947 = vld2q_f64(v1557.f64);
        v582 = vmlaq_n_f64(vmulq_n_f64(v1670.val[0], v1552.f64[0]), v1670.val[1], v1552.f64[1]);
        v1670.val[0] = vaddq_f64(v581[1], vmlaq_n_f64(vmulq_n_f64(v1947.val[0], v1552.f64[0]), v1947.val[1], v1552.f64[1]));
        *v581 = vaddq_f64(*v581, v582);
        v581[1] = v1670.val[0];
        v583 = (float64x2_t *)sub_20F762098(v399 + 2279, v572, (int)v573 + 4, 4u);
        v1671 = vld2q_f64(v1555.f64);
        v1948 = vld2q_f64(v1557.f64);
        v584 = vmlaq_n_f64(vmulq_n_f64(v1671.val[0], v1553.f64[0]), v1671.val[1], v1553.f64[1]);
        v1671.val[0] = vaddq_f64(v583[1], vmlaq_n_f64(vmulq_n_f64(v1948.val[0], v1553.f64[0]), v1948.val[1], v1553.f64[1]));
        *v583 = vaddq_f64(*v583, v584);
        v583[1] = v1671.val[0];
        v585 = (float64x2_t *)sub_20F762098(v399 + 2279, v572, (int)v573 + 5, 4u);
        v1672 = vld2q_f64(v1555.f64);
        v1949 = vld2q_f64(v1557.f64);
        v586 = vmlaq_n_f64(vmulq_n_f64(v1672.val[0], v1554.f64[0]), v1672.val[1], v1554.f64[1]);
        v1672.val[0] = vaddq_f64(v585[1], vmlaq_n_f64(vmulq_n_f64(v1949.val[0], v1554.f64[0]), v1949.val[1], v1554.f64[1]));
        *v585 = vaddq_f64(*v585, v586);
        v585[1] = v1672.val[0];
      }
    }
  }
  v587 = *(unsigned int **)(a2 + 96);
  if (*((_BYTE *)v587 + 20))
  {
    v588 = *(unsigned int **)(a2 + 80);
    if (*((_BYTE *)v588 + 20))
    {
      v589 = *(_QWORD *)(*v21 + 8 * (v399[2237] + *v587));
      v590 = *(_QWORD *)(*v21 + 8 * (v399[2233] + *v588));
      if (v589 <= v590)
      {
        v591 = (float64x2_t *)sub_20F762098(v399 + 2279, *(_QWORD *)(*v21 + 8 * (v399[2237] + *v587)), v590, 4u);
        v1673 = vld2q_f64(v1559.f64);
        v592 = &v1561;
        v1950 = vld2q_f64(v592->f64);
        v593 = vmlaq_n_f64(vmulq_n_f64(v1673.val[0], v1549.f64[0]), v1673.val[1], v1549.f64[1]);
        v1673.val[0] = vaddq_f64(v591[1], vmlaq_n_f64(vmulq_n_f64(v1950.val[0], v1549.f64[0]), v1950.val[1], v1549.f64[1]));
        *v591 = vaddq_f64(*v591, v593);
        v591[1] = v1673.val[0];
        v594 = (float64x2_t *)sub_20F762098(v399 + 2279, v589, (int)v590 + 1, 4u);
        v1674 = vld2q_f64(v1559.f64);
        v1951 = vld2q_f64(v1561.f64);
        v595 = vmlaq_n_f64(vmulq_n_f64(v1674.val[0], v1550.f64[0]), v1674.val[1], v1550.f64[1]);
        v1674.val[0] = vaddq_f64(v594[1], vmlaq_n_f64(vmulq_n_f64(v1951.val[0], v1550.f64[0]), v1951.val[1], v1550.f64[1]));
        *v594 = vaddq_f64(*v594, v595);
        v594[1] = v1674.val[0];
        v596 = (float64x2_t *)sub_20F762098(v399 + 2279, v589, (int)v590 + 2, 4u);
        v1675 = vld2q_f64(v1559.f64);
        v1952 = vld2q_f64(v1561.f64);
        v597 = vmlaq_n_f64(vmulq_n_f64(v1675.val[0], v1551.f64[0]), v1675.val[1], v1551.f64[1]);
        v1675.val[0] = vaddq_f64(v596[1], vmlaq_n_f64(vmulq_n_f64(v1952.val[0], v1551.f64[0]), v1952.val[1], v1551.f64[1]));
        *v596 = vaddq_f64(*v596, v597);
        v596[1] = v1675.val[0];
        v598 = (float64x2_t *)sub_20F762098(v399 + 2279, v589, (int)v590 + 3, 4u);
        v1676 = vld2q_f64(v1559.f64);
        v1953 = vld2q_f64(v1561.f64);
        v599 = vmlaq_n_f64(vmulq_n_f64(v1676.val[0], v1552.f64[0]), v1676.val[1], v1552.f64[1]);
        v1676.val[0] = vaddq_f64(v598[1], vmlaq_n_f64(vmulq_n_f64(v1953.val[0], v1552.f64[0]), v1953.val[1], v1552.f64[1]));
        *v598 = vaddq_f64(*v598, v599);
        v598[1] = v1676.val[0];
        v600 = (float64x2_t *)sub_20F762098(v399 + 2279, v589, (int)v590 + 4, 4u);
        v1677 = vld2q_f64(v1559.f64);
        v1954 = vld2q_f64(v1561.f64);
        v601 = vmlaq_n_f64(vmulq_n_f64(v1677.val[0], v1553.f64[0]), v1677.val[1], v1553.f64[1]);
        v1677.val[0] = vaddq_f64(v600[1], vmlaq_n_f64(vmulq_n_f64(v1954.val[0], v1553.f64[0]), v1954.val[1], v1553.f64[1]));
        *v600 = vaddq_f64(*v600, v601);
        v600[1] = v1677.val[0];
        v602 = (float64x2_t *)sub_20F762098(v399 + 2279, v589, (int)v590 + 5, 4u);
        v1678 = vld2q_f64(v1559.f64);
        v1955 = vld2q_f64(v1561.f64);
        v603 = vmlaq_n_f64(vmulq_n_f64(v1678.val[0], v1554.f64[0]), v1678.val[1], v1554.f64[1]);
        v1678.val[0] = vaddq_f64(v602[1], vmlaq_n_f64(vmulq_n_f64(v1955.val[0], v1554.f64[0]), v1955.val[1], v1554.f64[1]));
        *v602 = vaddq_f64(*v602, v603);
        v602[1] = v1678.val[0];
      }
    }
  }
  v604 = *(unsigned int **)(a2 + 104);
  if (*((_BYTE *)v604 + 20))
  {
    v605 = *(unsigned int **)(a2 + 80);
    if (*((_BYTE *)v605 + 20))
    {
      v606 = *(_QWORD *)(*v21 + 8 * (v399[2238] + *v604));
      v607 = *(_QWORD *)(*v21 + 8 * (v399[2233] + *v605));
      if (v606 <= v607)
      {
        v608 = (float64x2_t *)sub_20F762098(v399 + 2279, *(_QWORD *)(*v21 + 8 * (v399[2238] + *v604)), v607, 4u);
        v1679 = vld2q_f64(v1563.f64);
        v609 = &v1565;
        v1956 = vld2q_f64(v609->f64);
        v610 = vmlaq_n_f64(vmulq_n_f64(v1679.val[0], v1549.f64[0]), v1679.val[1], v1549.f64[1]);
        v1679.val[0] = vaddq_f64(v608[1], vmlaq_n_f64(vmulq_n_f64(v1956.val[0], v1549.f64[0]), v1956.val[1], v1549.f64[1]));
        *v608 = vaddq_f64(*v608, v610);
        v608[1] = v1679.val[0];
        v611 = (float64x2_t *)sub_20F762098(v399 + 2279, v606, (int)v607 + 1, 4u);
        v1680 = vld2q_f64(v1563.f64);
        v1957 = vld2q_f64(v1565.f64);
        v612 = vmlaq_n_f64(vmulq_n_f64(v1680.val[0], v1550.f64[0]), v1680.val[1], v1550.f64[1]);
        v1680.val[0] = vaddq_f64(v611[1], vmlaq_n_f64(vmulq_n_f64(v1957.val[0], v1550.f64[0]), v1957.val[1], v1550.f64[1]));
        *v611 = vaddq_f64(*v611, v612);
        v611[1] = v1680.val[0];
        v613 = (float64x2_t *)sub_20F762098(v399 + 2279, v606, (int)v607 + 2, 4u);
        v1681 = vld2q_f64(v1563.f64);
        v1958 = vld2q_f64(v1565.f64);
        v614 = vmlaq_n_f64(vmulq_n_f64(v1681.val[0], v1551.f64[0]), v1681.val[1], v1551.f64[1]);
        v1681.val[0] = vaddq_f64(v613[1], vmlaq_n_f64(vmulq_n_f64(v1958.val[0], v1551.f64[0]), v1958.val[1], v1551.f64[1]));
        *v613 = vaddq_f64(*v613, v614);
        v613[1] = v1681.val[0];
        v615 = (float64x2_t *)sub_20F762098(v399 + 2279, v606, (int)v607 + 3, 4u);
        v1682 = vld2q_f64(v1563.f64);
        v1959 = vld2q_f64(v1565.f64);
        v616 = vmlaq_n_f64(vmulq_n_f64(v1682.val[0], v1552.f64[0]), v1682.val[1], v1552.f64[1]);
        v1682.val[0] = vaddq_f64(v615[1], vmlaq_n_f64(vmulq_n_f64(v1959.val[0], v1552.f64[0]), v1959.val[1], v1552.f64[1]));
        *v615 = vaddq_f64(*v615, v616);
        v615[1] = v1682.val[0];
        v617 = (float64x2_t *)sub_20F762098(v399 + 2279, v606, (int)v607 + 4, 4u);
        v1683 = vld2q_f64(v1563.f64);
        v1960 = vld2q_f64(v1565.f64);
        v618 = vmlaq_n_f64(vmulq_n_f64(v1683.val[0], v1553.f64[0]), v1683.val[1], v1553.f64[1]);
        v1683.val[0] = vaddq_f64(v617[1], vmlaq_n_f64(vmulq_n_f64(v1960.val[0], v1553.f64[0]), v1960.val[1], v1553.f64[1]));
        *v617 = vaddq_f64(*v617, v618);
        v617[1] = v1683.val[0];
        v619 = (float64x2_t *)sub_20F762098(v399 + 2279, v606, (int)v607 + 5, 4u);
        v1684 = vld2q_f64(v1563.f64);
        v1961 = vld2q_f64(v1565.f64);
        v620 = vmlaq_n_f64(vmulq_n_f64(v1684.val[0], v1554.f64[0]), v1684.val[1], v1554.f64[1]);
        v1684.val[0] = vaddq_f64(v619[1], vmlaq_n_f64(vmulq_n_f64(v1961.val[0], v1554.f64[0]), v1961.val[1], v1554.f64[1]));
        *v619 = vaddq_f64(*v619, v620);
        v619[1] = v1684.val[0];
      }
    }
  }
  v621 = *(unsigned int **)(a2 + 112);
  if (*((_BYTE *)v621 + 20))
  {
    v622 = *(unsigned int **)(a2 + 80);
    if (*((_BYTE *)v622 + 20))
    {
      v623 = *(_QWORD *)(*v21 + 8 * (v399[2238] + *v621));
      v624 = *(_QWORD *)(*v21 + 8 * (v399[2233] + *v622));
      if (v623 <= v624)
      {
        v625 = (float64x2_t *)sub_20F762098(v399 + 2279, *(_QWORD *)(*v21 + 8 * (v399[2238] + *v621)), v624, 4u);
        v1685 = vld2q_f64(v1567.f64);
        v626 = &v1569;
        v1962 = vld2q_f64(v626->f64);
        v627 = vmlaq_n_f64(vmulq_n_f64(v1685.val[0], v1549.f64[0]), v1685.val[1], v1549.f64[1]);
        v1685.val[0] = vaddq_f64(v625[1], vmlaq_n_f64(vmulq_n_f64(v1962.val[0], v1549.f64[0]), v1962.val[1], v1549.f64[1]));
        *v625 = vaddq_f64(*v625, v627);
        v625[1] = v1685.val[0];
        v628 = (float64x2_t *)sub_20F762098(v399 + 2279, v623, (int)v624 + 1, 4u);
        v1686 = vld2q_f64(v1567.f64);
        v1963 = vld2q_f64(v1569.f64);
        v629 = vmlaq_n_f64(vmulq_n_f64(v1686.val[0], v1550.f64[0]), v1686.val[1], v1550.f64[1]);
        v1686.val[0] = vaddq_f64(v628[1], vmlaq_n_f64(vmulq_n_f64(v1963.val[0], v1550.f64[0]), v1963.val[1], v1550.f64[1]));
        *v628 = vaddq_f64(*v628, v629);
        v628[1] = v1686.val[0];
        v630 = (float64x2_t *)sub_20F762098(v399 + 2279, v623, (int)v624 + 2, 4u);
        v1687 = vld2q_f64(v1567.f64);
        v1964 = vld2q_f64(v1569.f64);
        v631 = vmlaq_n_f64(vmulq_n_f64(v1687.val[0], v1551.f64[0]), v1687.val[1], v1551.f64[1]);
        v1687.val[0] = vaddq_f64(v630[1], vmlaq_n_f64(vmulq_n_f64(v1964.val[0], v1551.f64[0]), v1964.val[1], v1551.f64[1]));
        *v630 = vaddq_f64(*v630, v631);
        v630[1] = v1687.val[0];
        v632 = (float64x2_t *)sub_20F762098(v399 + 2279, v623, (int)v624 + 3, 4u);
        v1688 = vld2q_f64(v1567.f64);
        v1965 = vld2q_f64(v1569.f64);
        v633 = vmlaq_n_f64(vmulq_n_f64(v1688.val[0], v1552.f64[0]), v1688.val[1], v1552.f64[1]);
        v1688.val[0] = vaddq_f64(v632[1], vmlaq_n_f64(vmulq_n_f64(v1965.val[0], v1552.f64[0]), v1965.val[1], v1552.f64[1]));
        *v632 = vaddq_f64(*v632, v633);
        v632[1] = v1688.val[0];
        v634 = (float64x2_t *)sub_20F762098(v399 + 2279, v623, (int)v624 + 4, 4u);
        v1689 = vld2q_f64(v1567.f64);
        v1966 = vld2q_f64(v1569.f64);
        v635 = vmlaq_n_f64(vmulq_n_f64(v1689.val[0], v1553.f64[0]), v1689.val[1], v1553.f64[1]);
        v1689.val[0] = vaddq_f64(v634[1], vmlaq_n_f64(vmulq_n_f64(v1966.val[0], v1553.f64[0]), v1966.val[1], v1553.f64[1]));
        *v634 = vaddq_f64(*v634, v635);
        v634[1] = v1689.val[0];
        v636 = (float64x2_t *)sub_20F762098(v399 + 2279, v623, (int)v624 + 5, 4u);
        v1690 = vld2q_f64(v1567.f64);
        v1967 = vld2q_f64(v1569.f64);
        v637 = vmlaq_n_f64(vmulq_n_f64(v1690.val[0], v1554.f64[0]), v1690.val[1], v1554.f64[1]);
        v1690.val[0] = vaddq_f64(v636[1], vmlaq_n_f64(vmulq_n_f64(v1967.val[0], v1554.f64[0]), v1967.val[1], v1554.f64[1]));
        *v636 = vaddq_f64(*v636, v637);
        v636[1] = v1690.val[0];
      }
    }
  }
  v638 = *(unsigned int **)(a2 + 120);
  if (*((_BYTE *)v638 + 20))
  {
    v639 = *(unsigned int **)(a2 + 80);
    if (*((_BYTE *)v639 + 20))
    {
      v640 = *(_QWORD *)(*v21 + 8 * (v399[2239] + *v638));
      v641 = *(_QWORD *)(*v21 + 8 * (v399[2233] + *v639));
      if (v640 <= v641)
      {
        v642 = (float64x2_t *)sub_20F762098(v399 + 2279, *(_QWORD *)(*v21 + 8 * (v399[2239] + *v638)), v641, 3u);
        v643.f64[0] = v642[1].f64[0];
        v1968 = vld2q_f64(v1571.f64);
        _V4.D[1] = v1573.f64[1];
        _D6 = v1549.f64[1];
        v646 = vmlaq_n_f64(vmulq_n_f64(v1968.val[0], v1549.f64[0]), v1968.val[1], v1549.f64[1]);
        __asm { FMLA            D2, D6, V4.D[1] }
        *v642 = vaddq_f64(*v642, v646);
        *(_QWORD *)&v642[1].f64[0] = *(_OWORD *)&vaddq_f64(v643, v1968.val[0]);
        v647 = (float64x2_t *)sub_20F762098(v399 + 2279, v640, (int)v641 + 1, 3u);
        v648.f64[0] = v647[1].f64[0];
        v1969 = vld2q_f64(v1571.f64);
        _V4.D[1] = v1573.f64[1];
        _D6 = v1550.f64[1];
        v651 = vmlaq_n_f64(vmulq_n_f64(v1969.val[0], v1550.f64[0]), v1969.val[1], v1550.f64[1]);
        __asm { FMLA            D2, D6, V4.D[1] }
        *v647 = vaddq_f64(*v647, v651);
        *(_QWORD *)&v647[1].f64[0] = *(_OWORD *)&vaddq_f64(v648, v1969.val[0]);
        v652 = (float64x2_t *)sub_20F762098(v399 + 2279, v640, (int)v641 + 2, 3u);
        v653.f64[0] = v652[1].f64[0];
        v1970 = vld2q_f64(v1571.f64);
        _V4.D[1] = v1573.f64[1];
        _D6 = v1551.f64[1];
        v656 = vmlaq_n_f64(vmulq_n_f64(v1970.val[0], v1551.f64[0]), v1970.val[1], v1551.f64[1]);
        __asm { FMLA            D2, D6, V4.D[1] }
        *v652 = vaddq_f64(*v652, v656);
        *(_QWORD *)&v652[1].f64[0] = *(_OWORD *)&vaddq_f64(v653, v1970.val[0]);
        v657 = (float64x2_t *)sub_20F762098(v399 + 2279, v640, (int)v641 + 3, 3u);
        v658.f64[0] = v657[1].f64[0];
        v1971 = vld2q_f64(v1571.f64);
        _V4.D[1] = v1573.f64[1];
        _D6 = v1552.f64[1];
        v661 = vmlaq_n_f64(vmulq_n_f64(v1971.val[0], v1552.f64[0]), v1971.val[1], v1552.f64[1]);
        __asm { FMLA            D2, D6, V4.D[1] }
        *v657 = vaddq_f64(*v657, v661);
        *(_QWORD *)&v657[1].f64[0] = *(_OWORD *)&vaddq_f64(v658, v1971.val[0]);
        v662 = (float64x2_t *)sub_20F762098(v399 + 2279, v640, (int)v641 + 4, 3u);
        v663.f64[0] = v662[1].f64[0];
        v1972 = vld2q_f64(v1571.f64);
        _V4.D[1] = v1573.f64[1];
        _D6 = v1553.f64[1];
        v666 = vmlaq_n_f64(vmulq_n_f64(v1972.val[0], v1553.f64[0]), v1972.val[1], v1553.f64[1]);
        __asm { FMLA            D2, D6, V4.D[1] }
        *v662 = vaddq_f64(*v662, v666);
        *(_QWORD *)&v662[1].f64[0] = *(_OWORD *)&vaddq_f64(v663, v1972.val[0]);
        v667 = (float64x2_t *)sub_20F762098(v399 + 2279, v640, (int)v641 + 5, 3u);
        v1817 = vld2q_f64(v1571.f64);
        v668.f64[0] = v667[1].f64[0];
        _V4.D[1] = v1573.f64[1];
        _D6 = v1554.f64[1];
        v671 = vmlaq_n_f64(vmulq_n_f64(v1817.val[0], v1554.f64[0]), v1817.val[1], v1554.f64[1]);
        __asm { FMLA            D1, D6, V4.D[1] }
        *v667 = vaddq_f64(*v667, v671);
        *(_QWORD *)&v667[1].f64[0] = *(_OWORD *)&vaddq_f64(v668, v1817.val[0]);
      }
    }
  }
  v672 = *(unsigned int **)(a2 + 128);
  if (*((_BYTE *)v672 + 20))
  {
    v673 = *(unsigned int **)(a2 + 80);
    if (*((_BYTE *)v673 + 20))
    {
      v674 = *(_QWORD *)(*v21 + 8 * (v399[2239] + *v672));
      v675 = *(_QWORD *)(*v21 + 8 * (v399[2233] + *v673));
      if (v674 <= v675)
      {
        v676 = (float64x2_t *)sub_20F762098(v399 + 2279, *(_QWORD *)(*v21 + 8 * (v399[2239] + *v672)), v675, 3u);
        v677.f64[0] = v676[1].f64[0];
        v1973 = vld2q_f64(v1574.f64);
        _V4.D[1] = v1576.f64[1];
        _D6 = v1549.f64[1];
        v680 = vmlaq_n_f64(vmulq_n_f64(v1973.val[0], v1549.f64[0]), v1973.val[1], v1549.f64[1]);
        __asm { FMLA            D2, D6, V4.D[1] }
        *v676 = vaddq_f64(*v676, v680);
        *(_QWORD *)&v676[1].f64[0] = *(_OWORD *)&vaddq_f64(v677, v1973.val[0]);
        v681 = (float64x2_t *)sub_20F762098(v399 + 2279, v674, (int)v675 + 1, 3u);
        v682.f64[0] = v681[1].f64[0];
        v1974 = vld2q_f64(v1574.f64);
        _V4.D[1] = v1576.f64[1];
        _D6 = v1550.f64[1];
        v685 = vmlaq_n_f64(vmulq_n_f64(v1974.val[0], v1550.f64[0]), v1974.val[1], v1550.f64[1]);
        __asm { FMLA            D2, D6, V4.D[1] }
        *v681 = vaddq_f64(*v681, v685);
        *(_QWORD *)&v681[1].f64[0] = *(_OWORD *)&vaddq_f64(v682, v1974.val[0]);
        v686 = (float64x2_t *)sub_20F762098(v399 + 2279, v674, (int)v675 + 2, 3u);
        v687.f64[0] = v686[1].f64[0];
        v1975 = vld2q_f64(v1574.f64);
        _V4.D[1] = v1576.f64[1];
        _D6 = v1551.f64[1];
        v690 = vmlaq_n_f64(vmulq_n_f64(v1975.val[0], v1551.f64[0]), v1975.val[1], v1551.f64[1]);
        __asm { FMLA            D2, D6, V4.D[1] }
        *v686 = vaddq_f64(*v686, v690);
        *(_QWORD *)&v686[1].f64[0] = *(_OWORD *)&vaddq_f64(v687, v1975.val[0]);
        v691 = (float64x2_t *)sub_20F762098(v399 + 2279, v674, (int)v675 + 3, 3u);
        v692.f64[0] = v691[1].f64[0];
        v1976 = vld2q_f64(v1574.f64);
        _V4.D[1] = v1576.f64[1];
        _D6 = v1552.f64[1];
        v695 = vmlaq_n_f64(vmulq_n_f64(v1976.val[0], v1552.f64[0]), v1976.val[1], v1552.f64[1]);
        __asm { FMLA            D2, D6, V4.D[1] }
        *v691 = vaddq_f64(*v691, v695);
        *(_QWORD *)&v691[1].f64[0] = *(_OWORD *)&vaddq_f64(v692, v1976.val[0]);
        v696 = (float64x2_t *)sub_20F762098(v399 + 2279, v674, (int)v675 + 4, 3u);
        v697.f64[0] = v696[1].f64[0];
        v1977 = vld2q_f64(v1574.f64);
        _V4.D[1] = v1576.f64[1];
        _D6 = v1553.f64[1];
        v700 = vmlaq_n_f64(vmulq_n_f64(v1977.val[0], v1553.f64[0]), v1977.val[1], v1553.f64[1]);
        __asm { FMLA            D2, D6, V4.D[1] }
        *v696 = vaddq_f64(*v696, v700);
        *(_QWORD *)&v696[1].f64[0] = *(_OWORD *)&vaddq_f64(v697, v1977.val[0]);
        v701 = (float64x2_t *)sub_20F762098(v399 + 2279, v674, (int)v675 + 5, 3u);
        v1818 = vld2q_f64(v1574.f64);
        v702.f64[0] = v701[1].f64[0];
        _V4.D[1] = v1576.f64[1];
        _D6 = v1554.f64[1];
        v705 = vmlaq_n_f64(vmulq_n_f64(v1818.val[0], v1554.f64[0]), v1818.val[1], v1554.f64[1]);
        __asm { FMLA            D1, D6, V4.D[1] }
        *v701 = vaddq_f64(*v701, v705);
        *(_QWORD *)&v701[1].f64[0] = *(_OWORD *)&vaddq_f64(v702, v1818.val[0]);
      }
    }
  }
  v706 = *(unsigned int **)(a2 + 56);
  v707 = *(unsigned int **)(a2 + 88);
  if (*((_BYTE *)v706 + 20))
  {
    if (*((_BYTE *)v707 + 20))
    {
      v708 = *(_QWORD *)(*v21 + 8 * (v399[2236] + *v706));
      v709 = *(_QWORD *)(*v21 + 8 * (v399[2237] + *v707));
      if (v708 <= v709)
      {
        for (jj = 0; jj != 8; jj += 2)
        {
          v711 = (float64x2_t *)sub_20F762098(v399 + 2279, v708, v709, 6u);
          v2178 = vld2q_f64(v1533.f64);
          v2219 = vld2q_f64(v1535.f64);
          v712 = v1555.f64[jj];
          v713 = v1555.f64[jj + 1];
          v714 = vaddq_f64(v711[2], vmlaq_n_f64(vmulq_n_f64(v2219.val[0], v712), v2219.val[1], v713));
          v715 = vaddq_f64(v711[1], vmlaq_n_f64(vmulq_n_f64(v2178.val[0], v712), v2178.val[1], v713));
          *v711 = vaddq_f64(*v711, vmlaq_n_f64(vmulq_n_f64((float64x2_t)vzip1q_s64((int64x2_t)v1531, (int64x2_t)v1532), v712), (float64x2_t)vzip2q_s64((int64x2_t)v1531, (int64x2_t)v1532), v713));
          v711[1] = v715;
          v711[2] = v714;
          LODWORD(v709) = v709 + 1;
        }
        v707 = *(unsigned int **)(a2 + 88);
        v399 = v1530;
      }
    }
  }
  v716 = *(unsigned int **)(a2 + 64);
  if (*((_BYTE *)v716 + 20))
  {
    if (*((_BYTE *)v707 + 20))
    {
      v717 = *(_QWORD *)(*v21 + 8 * (v399[2236] + *v716));
      v718 = *(_QWORD *)(*v21 + 8 * (v399[2237] + *v707));
      if (v717 <= v718)
      {
        v719 = 0;
        v720 = &v1555.f64[1];
        do
        {
          v721 = (float64x2_t *)sub_20F762098(v399 + 2279, v717, (int)v718 + (int)v719, 6u);
          v1691 = vld2q_f64(v1537.f64);
          v1978 = vld2q_f64(v1539.f64);
          v2201 = vld2q_f64(v1541.f64);
          v722 = *(v720 - 1);
          v723 = vmlaq_n_f64(vmulq_n_f64(v1691.val[0], v722), v1691.val[1], *v720);
          v1691.val[1] = vaddq_f64(v721[2], vmlaq_n_f64(vmulq_n_f64(v2201.val[0], v722), v2201.val[1], *v720));
          v1691.val[0] = vaddq_f64(v721[1], vmlaq_n_f64(vmulq_n_f64(v1978.val[0], v722), v1978.val[1], *v720));
          *v721 = vaddq_f64(*v721, v723);
          *(float64x2x2_t *)v721[1].f64 = v1691;
          ++v719;
          v720 += 2;
        }
        while (v719 != 4);
        v707 = *(unsigned int **)(a2 + 88);
        v399 = v1530;
      }
    }
  }
  v724 = *(unsigned int **)(a2 + 72);
  if (*((_BYTE *)v724 + 20))
  {
    if (*((_BYTE *)v707 + 20))
    {
      v725 = *(_QWORD *)(*v21 + 8 * (v399[2233] + *v724));
      v726 = *(_QWORD *)(*v21 + 8 * (v399[2237] + *v707));
      if (v725 <= v726)
      {
        v727 = 0;
        v728 = &v1555.f64[1];
        do
        {
          v729 = (float64x2_t *)sub_20F762098(v399 + 2279, v725, (int)v726 + (int)v727, 6u);
          v1692 = vld2q_f64(v1543.f64);
          v1979 = vld2q_f64(v1545.f64);
          v2202 = vld2q_f64(v1547.f64);
          v730 = *(v728 - 1);
          v731 = vmlaq_n_f64(vmulq_n_f64(v1692.val[0], v730), v1692.val[1], *v728);
          v1692.val[1] = vaddq_f64(v729[2], vmlaq_n_f64(vmulq_n_f64(v2202.val[0], v730), v2202.val[1], *v728));
          v1692.val[0] = vaddq_f64(v729[1], vmlaq_n_f64(vmulq_n_f64(v1979.val[0], v730), v1979.val[1], *v728));
          *v729 = vaddq_f64(*v729, v731);
          *(float64x2x2_t *)v729[1].f64 = v1692;
          ++v727;
          v728 += 2;
        }
        while (v727 != 4);
        v707 = *(unsigned int **)(a2 + 88);
        v399 = v1530;
      }
    }
  }
  v732 = *(unsigned int **)(a2 + 80);
  if (*((_BYTE *)v732 + 20))
  {
    if (*((_BYTE *)v707 + 20))
    {
      v733 = *(_QWORD *)(*v21 + 8 * (v399[2233] + *v732));
      v734 = *(_QWORD *)(*v21 + 8 * (v399[2237] + *v707));
      if (v733 <= v734)
      {
        v735 = 0;
        v736 = &v1555.f64[1];
        do
        {
          v737 = (float64x2_t *)sub_20F762098(v399 + 2279, v733, (int)v734 + (int)v735, 6u);
          v1693 = vld2q_f64(v1549.f64);
          v1980 = vld2q_f64(v1551.f64);
          v2203 = vld2q_f64(v1553.f64);
          v738 = *(v736 - 1);
          v739 = vmlaq_n_f64(vmulq_n_f64(v1693.val[0], v738), v1693.val[1], *v736);
          v1693.val[1] = vaddq_f64(v737[2], vmlaq_n_f64(vmulq_n_f64(v2203.val[0], v738), v2203.val[1], *v736));
          v1693.val[0] = vaddq_f64(v737[1], vmlaq_n_f64(vmulq_n_f64(v1980.val[0], v738), v1980.val[1], *v736));
          *v737 = vaddq_f64(*v737, v739);
          *(float64x2x2_t *)v737[1].f64 = v1693;
          ++v735;
          v736 += 2;
        }
        while (v735 != 4);
        v707 = *(unsigned int **)(a2 + 88);
        v399 = v1530;
      }
    }
  }
  if (*((_BYTE *)v707 + 20))
  {
    v740 = *(_QWORD *)(*v21 + 8 * (v399[2237] + *v707));
    v741 = (float64x2_t *)sub_20F762098(v399 + 2279, v740, v740, 4u);
    v1694 = vld2q_f64(v1555.f64);
    v1981 = vld2q_f64(v1557.f64);
    v742 = vmlaq_n_f64(vmulq_n_f64(v1694.val[0], v1555.f64[0]), v1694.val[1], v1555.f64[1]);
    v1694.val[0] = vaddq_f64(v741[1], vmlaq_n_f64(vmulq_n_f64(v1981.val[0], v1555.f64[0]), v1981.val[1], v1555.f64[1]));
    *v741 = vaddq_f64(*v741, v742);
    v741[1] = v1694.val[0];
    v743 = (float64x2_t *)sub_20F762098(v399 + 2279, v740, (int)v740 + 1, 4u);
    v1695 = vld2q_f64(v1555.f64);
    v1982 = vld2q_f64(v1557.f64);
    v744 = vmlaq_n_f64(vmulq_n_f64(v1695.val[0], v1556.f64[0]), v1695.val[1], v1556.f64[1]);
    v1695.val[0] = vaddq_f64(v743[1], vmlaq_n_f64(vmulq_n_f64(v1982.val[0], v1556.f64[0]), v1982.val[1], v1556.f64[1]));
    *v743 = vaddq_f64(*v743, v744);
    v743[1] = v1695.val[0];
    v745 = (float64x2_t *)sub_20F762098(v399 + 2279, v740, (int)v740 + 2, 4u);
    v1696 = vld2q_f64(v1555.f64);
    v1983 = vld2q_f64(v1557.f64);
    v746 = vmlaq_n_f64(vmulq_n_f64(v1696.val[0], v1557.f64[0]), v1696.val[1], v1557.f64[1]);
    v1696.val[0] = vaddq_f64(v745[1], vmlaq_n_f64(vmulq_n_f64(v1983.val[0], v1557.f64[0]), v1983.val[1], v1557.f64[1]));
    *v745 = vaddq_f64(*v745, v746);
    v745[1] = v1696.val[0];
    v747 = (float64x2_t *)sub_20F762098(v399 + 2279, v740, (int)v740 + 3, 4u);
    v1984 = vld2q_f64(v1555.f64);
    v2151 = vld2q_f64(v1557.f64);
    v748 = vaddq_f64(v747[1], vmlaq_n_f64(vmulq_n_f64(v2151.val[0], v1558.f64[0]), v2151.val[1], v1558.f64[1]));
    *v747 = vaddq_f64(*v747, vmlaq_n_f64(vmulq_n_f64(v1984.val[0], v1558.f64[0]), v1984.val[1], v1558.f64[1]));
    v747[1] = v748;
    v1697 = vld2q_f64(v1555.f64);
    v1985 = vld2q_f64(v1557.f64);
    v749 = (float64x2_t *)(v399[2270] + 8 * v740);
    v750 = vmlaq_laneq_f64(vmulq_n_f64(v1697.val[0], v1527->f64[0]), v1697.val[1], *v1527, 1);
    v1697.val[0] = vsubq_f64(v749[1], vmlaq_laneq_f64(vmulq_n_f64(v1985.val[0], v1527->f64[0]), v1985.val[1], *v1527, 1));
    *v749 = vsubq_f64(*v749, v750);
    v749[1] = v1697.val[0];
  }
  v751 = *(unsigned int **)(a2 + 96);
  if (*((_BYTE *)v751 + 20))
  {
    v752 = *(unsigned int **)(a2 + 88);
    if (*((_BYTE *)v752 + 20))
    {
      v753 = v399[2237];
      v754 = *(_QWORD *)(*v21 + 8 * (v753 + *v751));
      v755 = *(_QWORD *)(*v21 + 8 * (v753 + *v752));
      if (v754 <= v755)
      {
        v756 = (float64x2_t *)sub_20F762098(v399 + 2279, *(_QWORD *)(*v21 + 8 * (v753 + *v751)), v755, 4u);
        v1698 = vld2q_f64(v1559.f64);
        v757 = &v1561;
        v1986 = vld2q_f64(v757->f64);
        v758 = vmlaq_n_f64(vmulq_n_f64(v1698.val[0], v1555.f64[0]), v1698.val[1], v1555.f64[1]);
        v1698.val[0] = vaddq_f64(v756[1], vmlaq_n_f64(vmulq_n_f64(v1986.val[0], v1555.f64[0]), v1986.val[1], v1555.f64[1]));
        *v756 = vaddq_f64(*v756, v758);
        v756[1] = v1698.val[0];
        v759 = (float64x2_t *)sub_20F762098(v399 + 2279, v754, (int)v755 + 1, 4u);
        v1699 = vld2q_f64(v1559.f64);
        v1987 = vld2q_f64(v1561.f64);
        v760 = vmlaq_n_f64(vmulq_n_f64(v1699.val[0], v1556.f64[0]), v1699.val[1], v1556.f64[1]);
        v1699.val[0] = vaddq_f64(v759[1], vmlaq_n_f64(vmulq_n_f64(v1987.val[0], v1556.f64[0]), v1987.val[1], v1556.f64[1]));
        *v759 = vaddq_f64(*v759, v760);
        v759[1] = v1699.val[0];
        v761 = (float64x2_t *)sub_20F762098(v399 + 2279, v754, (int)v755 + 2, 4u);
        v1700 = vld2q_f64(v1559.f64);
        v1988 = vld2q_f64(v1561.f64);
        v762 = vmlaq_n_f64(vmulq_n_f64(v1700.val[0], v1557.f64[0]), v1700.val[1], v1557.f64[1]);
        v1700.val[0] = vaddq_f64(v761[1], vmlaq_n_f64(vmulq_n_f64(v1988.val[0], v1557.f64[0]), v1988.val[1], v1557.f64[1]));
        *v761 = vaddq_f64(*v761, v762);
        v761[1] = v1700.val[0];
        v763 = (float64x2_t *)sub_20F762098(v399 + 2279, v754, (int)v755 + 3, 4u);
        v1701 = vld2q_f64(v1559.f64);
        v1989 = vld2q_f64(v1561.f64);
        v764 = vmlaq_n_f64(vmulq_n_f64(v1701.val[0], v1558.f64[0]), v1701.val[1], v1558.f64[1]);
        v1701.val[0] = vaddq_f64(v763[1], vmlaq_n_f64(vmulq_n_f64(v1989.val[0], v1558.f64[0]), v1989.val[1], v1558.f64[1]));
        *v763 = vaddq_f64(*v763, v764);
        v763[1] = v1701.val[0];
      }
    }
  }
  v765 = *(unsigned int **)(a2 + 104);
  if (*((_BYTE *)v765 + 20))
  {
    v766 = *(unsigned int **)(a2 + 88);
    if (*((_BYTE *)v766 + 20))
    {
      v767 = *(_QWORD *)(*v21 + 8 * (v399[2238] + *v765));
      v768 = *(_QWORD *)(*v21 + 8 * (v399[2237] + *v766));
      if (v767 <= v768)
      {
        v769 = (float64x2_t *)sub_20F762098(v399 + 2279, *(_QWORD *)(*v21 + 8 * (v399[2238] + *v765)), v768, 4u);
        v1702 = vld2q_f64(v1563.f64);
        v770 = &v1565;
        v1990 = vld2q_f64(v770->f64);
        v771 = vmlaq_n_f64(vmulq_n_f64(v1702.val[0], v1555.f64[0]), v1702.val[1], v1555.f64[1]);
        v1702.val[0] = vaddq_f64(v769[1], vmlaq_n_f64(vmulq_n_f64(v1990.val[0], v1555.f64[0]), v1990.val[1], v1555.f64[1]));
        *v769 = vaddq_f64(*v769, v771);
        v769[1] = v1702.val[0];
        v772 = (float64x2_t *)sub_20F762098(v399 + 2279, v767, (int)v768 + 1, 4u);
        v1703 = vld2q_f64(v1563.f64);
        v1991 = vld2q_f64(v1565.f64);
        v773 = vmlaq_n_f64(vmulq_n_f64(v1703.val[0], v1556.f64[0]), v1703.val[1], v1556.f64[1]);
        v1703.val[0] = vaddq_f64(v772[1], vmlaq_n_f64(vmulq_n_f64(v1991.val[0], v1556.f64[0]), v1991.val[1], v1556.f64[1]));
        *v772 = vaddq_f64(*v772, v773);
        v772[1] = v1703.val[0];
        v774 = (float64x2_t *)sub_20F762098(v399 + 2279, v767, (int)v768 + 2, 4u);
        v1704 = vld2q_f64(v1563.f64);
        v1992 = vld2q_f64(v1565.f64);
        v775 = vmlaq_n_f64(vmulq_n_f64(v1704.val[0], v1557.f64[0]), v1704.val[1], v1557.f64[1]);
        v1704.val[0] = vaddq_f64(v774[1], vmlaq_n_f64(vmulq_n_f64(v1992.val[0], v1557.f64[0]), v1992.val[1], v1557.f64[1]));
        *v774 = vaddq_f64(*v774, v775);
        v774[1] = v1704.val[0];
        v776 = (float64x2_t *)sub_20F762098(v399 + 2279, v767, (int)v768 + 3, 4u);
        v1705 = vld2q_f64(v1563.f64);
        v1993 = vld2q_f64(v1565.f64);
        v777 = vmlaq_n_f64(vmulq_n_f64(v1705.val[0], v1558.f64[0]), v1705.val[1], v1558.f64[1]);
        v1705.val[0] = vaddq_f64(v776[1], vmlaq_n_f64(vmulq_n_f64(v1993.val[0], v1558.f64[0]), v1993.val[1], v1558.f64[1]));
        *v776 = vaddq_f64(*v776, v777);
        v776[1] = v1705.val[0];
      }
    }
  }
  v778 = *(unsigned int **)(a2 + 112);
  if (*((_BYTE *)v778 + 20))
  {
    v779 = *(unsigned int **)(a2 + 88);
    if (*((_BYTE *)v779 + 20))
    {
      v780 = *(_QWORD *)(*v21 + 8 * (v399[2238] + *v778));
      v781 = *(_QWORD *)(*v21 + 8 * (v399[2237] + *v779));
      if (v780 <= v781)
      {
        v782 = (float64x2_t *)sub_20F762098(v399 + 2279, *(_QWORD *)(*v21 + 8 * (v399[2238] + *v778)), v781, 4u);
        v1706 = vld2q_f64(v1567.f64);
        v783 = &v1569;
        v1994 = vld2q_f64(v783->f64);
        v784 = vmlaq_n_f64(vmulq_n_f64(v1706.val[0], v1555.f64[0]), v1706.val[1], v1555.f64[1]);
        v1706.val[0] = vaddq_f64(v782[1], vmlaq_n_f64(vmulq_n_f64(v1994.val[0], v1555.f64[0]), v1994.val[1], v1555.f64[1]));
        *v782 = vaddq_f64(*v782, v784);
        v782[1] = v1706.val[0];
        v785 = (float64x2_t *)sub_20F762098(v399 + 2279, v780, (int)v781 + 1, 4u);
        v1707 = vld2q_f64(v1567.f64);
        v1995 = vld2q_f64(v1569.f64);
        v786 = vmlaq_n_f64(vmulq_n_f64(v1707.val[0], v1556.f64[0]), v1707.val[1], v1556.f64[1]);
        v1707.val[0] = vaddq_f64(v785[1], vmlaq_n_f64(vmulq_n_f64(v1995.val[0], v1556.f64[0]), v1995.val[1], v1556.f64[1]));
        *v785 = vaddq_f64(*v785, v786);
        v785[1] = v1707.val[0];
        v787 = (float64x2_t *)sub_20F762098(v399 + 2279, v780, (int)v781 + 2, 4u);
        v1708 = vld2q_f64(v1567.f64);
        v1996 = vld2q_f64(v1569.f64);
        v788 = vmlaq_n_f64(vmulq_n_f64(v1708.val[0], v1557.f64[0]), v1708.val[1], v1557.f64[1]);
        v1708.val[0] = vaddq_f64(v787[1], vmlaq_n_f64(vmulq_n_f64(v1996.val[0], v1557.f64[0]), v1996.val[1], v1557.f64[1]));
        *v787 = vaddq_f64(*v787, v788);
        v787[1] = v1708.val[0];
        v789 = (float64x2_t *)sub_20F762098(v399 + 2279, v780, (int)v781 + 3, 4u);
        v1709 = vld2q_f64(v1567.f64);
        v1997 = vld2q_f64(v1569.f64);
        v790 = vmlaq_n_f64(vmulq_n_f64(v1709.val[0], v1558.f64[0]), v1709.val[1], v1558.f64[1]);
        v1709.val[0] = vaddq_f64(v789[1], vmlaq_n_f64(vmulq_n_f64(v1997.val[0], v1558.f64[0]), v1997.val[1], v1558.f64[1]));
        *v789 = vaddq_f64(*v789, v790);
        v789[1] = v1709.val[0];
      }
    }
  }
  v791 = *(unsigned int **)(a2 + 120);
  if (*((_BYTE *)v791 + 20))
  {
    v792 = *(unsigned int **)(a2 + 88);
    if (*((_BYTE *)v792 + 20))
    {
      v793 = *(_QWORD *)(*v21 + 8 * (v399[2239] + *v791));
      v794 = *(_QWORD *)(*v21 + 8 * (v399[2237] + *v792));
      if (v793 <= v794)
      {
        v795 = (float64x2_t *)sub_20F762098(v399 + 2279, *(_QWORD *)(*v21 + 8 * (v399[2239] + *v791)), v794, 3u);
        v796.f64[0] = v795[1].f64[0];
        v1998 = vld2q_f64(v1571.f64);
        _V4.D[1] = v1573.f64[1];
        v798 = vmlaq_laneq_f64(vmulq_n_f64(v1998.val[0], v1555.f64[0]), v1998.val[1], v1555, 1);
        v1998.val[0] = vmulq_f64(v1573, v1555);
        v1998.val[1].f64[0] = v1555.f64[1];
        __asm { FMLA            D2, D3, V4.D[1] }
        *v795 = vaddq_f64(*v795, v798);
        *(_QWORD *)&v795[1].f64[0] = *(_OWORD *)&vaddq_f64(v796, v1998.val[0]);
        v799 = (float64x2_t *)sub_20F762098(v399 + 2279, v793, (int)v794 + 1, 3u);
        v800.f64[0] = v799[1].f64[0];
        v1999 = vld2q_f64(v1571.f64);
        _V4.D[1] = v1573.f64[1];
        v802 = vmlaq_laneq_f64(vmulq_n_f64(v1999.val[0], v1556.f64[0]), v1999.val[1], v1556, 1);
        v1999.val[0] = vmulq_f64(v1573, v1556);
        v1999.val[1].f64[0] = v1556.f64[1];
        __asm { FMLA            D2, D3, V4.D[1] }
        *v799 = vaddq_f64(*v799, v802);
        *(_QWORD *)&v799[1].f64[0] = *(_OWORD *)&vaddq_f64(v800, v1999.val[0]);
        v803 = (float64x2_t *)sub_20F762098(v399 + 2279, v793, (int)v794 + 2, 3u);
        v804.f64[0] = v803[1].f64[0];
        v2000 = vld2q_f64(v1571.f64);
        _V4.D[1] = v1573.f64[1];
        v806 = vmlaq_laneq_f64(vmulq_n_f64(v2000.val[0], v1557.f64[0]), v2000.val[1], v1557, 1);
        v2000.val[0] = vmulq_f64(v1573, v1557);
        v2000.val[1].f64[0] = v1557.f64[1];
        __asm { FMLA            D2, D3, V4.D[1] }
        *v803 = vaddq_f64(*v803, v806);
        *(_QWORD *)&v803[1].f64[0] = *(_OWORD *)&vaddq_f64(v804, v2000.val[0]);
        v807 = (float64x2_t *)sub_20F762098(v399 + 2279, v793, (int)v794 + 3, 3u);
        v1819 = vld2q_f64(v1571.f64);
        v808.f64[0] = v807[1].f64[0];
        _V4.D[1] = v1573.f64[1];
        v810 = vmlaq_laneq_f64(vmulq_n_f64(v1819.val[0], v1558.f64[0]), v1819.val[1], v1558, 1);
        v1819.val[0] = vmulq_f64(v1573, v1558);
        v1819.val[1].f64[0] = v1558.f64[1];
        __asm { FMLA            D1, D2, V4.D[1] }
        *v807 = vaddq_f64(*v807, v810);
        *(_QWORD *)&v807[1].f64[0] = *(_OWORD *)&vaddq_f64(v808, v1819.val[0]);
      }
    }
  }
  v811 = *(unsigned int **)(a2 + 128);
  if (*((_BYTE *)v811 + 20))
  {
    v812 = *(unsigned int **)(a2 + 88);
    if (*((_BYTE *)v812 + 20))
    {
      v813 = *(_QWORD *)(*v21 + 8 * (v399[2239] + *v811));
      v814 = *(_QWORD *)(*v21 + 8 * (v399[2237] + *v812));
      if (v813 <= v814)
      {
        v815 = (float64x2_t *)sub_20F762098(v399 + 2279, *(_QWORD *)(*v21 + 8 * (v399[2239] + *v811)), v814, 3u);
        v816.f64[0] = v815[1].f64[0];
        v2001 = vld2q_f64(v1574.f64);
        _V4.D[1] = v1576.f64[1];
        v818 = vmlaq_laneq_f64(vmulq_n_f64(v2001.val[0], v1555.f64[0]), v2001.val[1], v1555, 1);
        v2001.val[0] = vmulq_f64(v1576, v1555);
        v2001.val[1].f64[0] = v1555.f64[1];
        __asm { FMLA            D2, D3, V4.D[1] }
        *v815 = vaddq_f64(*v815, v818);
        *(_QWORD *)&v815[1].f64[0] = *(_OWORD *)&vaddq_f64(v816, v2001.val[0]);
        v819 = (float64x2_t *)sub_20F762098(v399 + 2279, v813, (int)v814 + 1, 3u);
        v820.f64[0] = v819[1].f64[0];
        v2002 = vld2q_f64(v1574.f64);
        _V4.D[1] = v1576.f64[1];
        v822 = vmlaq_laneq_f64(vmulq_n_f64(v2002.val[0], v1556.f64[0]), v2002.val[1], v1556, 1);
        v2002.val[0] = vmulq_f64(v1576, v1556);
        v2002.val[1].f64[0] = v1556.f64[1];
        __asm { FMLA            D2, D3, V4.D[1] }
        *v819 = vaddq_f64(*v819, v822);
        *(_QWORD *)&v819[1].f64[0] = *(_OWORD *)&vaddq_f64(v820, v2002.val[0]);
        v823 = (float64x2_t *)sub_20F762098(v399 + 2279, v813, (int)v814 + 2, 3u);
        v824.f64[0] = v823[1].f64[0];
        v2003 = vld2q_f64(v1574.f64);
        _V4.D[1] = v1576.f64[1];
        v826 = vmlaq_laneq_f64(vmulq_n_f64(v2003.val[0], v1557.f64[0]), v2003.val[1], v1557, 1);
        v2003.val[0] = vmulq_f64(v1576, v1557);
        v2003.val[1].f64[0] = v1557.f64[1];
        __asm { FMLA            D2, D3, V4.D[1] }
        *v823 = vaddq_f64(*v823, v826);
        *(_QWORD *)&v823[1].f64[0] = *(_OWORD *)&vaddq_f64(v824, v2003.val[0]);
        v827 = (float64x2_t *)sub_20F762098(v399 + 2279, v813, (int)v814 + 3, 3u);
        v1820 = vld2q_f64(v1574.f64);
        v828.f64[0] = v827[1].f64[0];
        _V4.D[1] = v1576.f64[1];
        v830 = vmlaq_laneq_f64(vmulq_n_f64(v1820.val[0], v1558.f64[0]), v1820.val[1], v1558, 1);
        v1820.val[0] = vmulq_f64(v1576, v1558);
        v1820.val[1].f64[0] = v1558.f64[1];
        __asm { FMLA            D1, D2, V4.D[1] }
        *v827 = vaddq_f64(*v827, v830);
        *(_QWORD *)&v827[1].f64[0] = *(_OWORD *)&vaddq_f64(v828, v1820.val[0]);
      }
    }
  }
  v831 = *(unsigned int **)(a2 + 56);
  v832 = *(unsigned int **)(a2 + 96);
  if (*((_BYTE *)v831 + 20))
  {
    if (*((_BYTE *)v832 + 20))
    {
      v833 = *(_QWORD *)(*v21 + 8 * (v399[2236] + *v831));
      v834 = *(_QWORD *)(*v21 + 8 * (v399[2237] + *v832));
      if (v833 <= v834)
      {
        for (kk = 0; kk != 8; kk += 2)
        {
          v836 = (float64x2_t *)sub_20F762098(v399 + 2279, v833, v834, 6u);
          v2179 = vld2q_f64(v1533.f64);
          v2220 = vld2q_f64(v1535.f64);
          v837 = v1559.f64[kk];
          v838 = v1559.f64[kk + 1];
          v839 = vaddq_f64(v836[2], vmlaq_n_f64(vmulq_n_f64(v2220.val[0], v837), v2220.val[1], v838));
          v840 = vaddq_f64(v836[1], vmlaq_n_f64(vmulq_n_f64(v2179.val[0], v837), v2179.val[1], v838));
          *v836 = vaddq_f64(*v836, vmlaq_n_f64(vmulq_n_f64((float64x2_t)vzip1q_s64((int64x2_t)v1531, (int64x2_t)v1532), v837), (float64x2_t)vzip2q_s64((int64x2_t)v1531, (int64x2_t)v1532), v838));
          v836[1] = v840;
          v836[2] = v839;
          LODWORD(v834) = v834 + 1;
        }
        v832 = *(unsigned int **)(a2 + 96);
        v399 = v1530;
      }
    }
  }
  v841 = *(unsigned int **)(a2 + 64);
  if (*((_BYTE *)v841 + 20))
  {
    if (*((_BYTE *)v832 + 20))
    {
      v842 = *(_QWORD *)(*v21 + 8 * (v399[2236] + *v841));
      v843 = *(_QWORD *)(*v21 + 8 * (v399[2237] + *v832));
      if (v842 <= v843)
      {
        v844 = 0;
        v845 = &v1559.f64[1];
        do
        {
          v846 = (float64x2_t *)sub_20F762098(v399 + 2279, v842, (int)v843 + (int)v844, 6u);
          v1710 = vld2q_f64(v1537.f64);
          v2004 = vld2q_f64(v1539.f64);
          v2204 = vld2q_f64(v1541.f64);
          v847 = *(v845 - 1);
          v848 = vmlaq_n_f64(vmulq_n_f64(v1710.val[0], v847), v1710.val[1], *v845);
          v1710.val[1] = vaddq_f64(v846[2], vmlaq_n_f64(vmulq_n_f64(v2204.val[0], v847), v2204.val[1], *v845));
          v1710.val[0] = vaddq_f64(v846[1], vmlaq_n_f64(vmulq_n_f64(v2004.val[0], v847), v2004.val[1], *v845));
          *v846 = vaddq_f64(*v846, v848);
          *(float64x2x2_t *)v846[1].f64 = v1710;
          ++v844;
          v845 += 2;
        }
        while (v844 != 4);
        v832 = *(unsigned int **)(a2 + 96);
        v399 = v1530;
      }
    }
  }
  v849 = *(unsigned int **)(a2 + 72);
  if (*((_BYTE *)v849 + 20))
  {
    if (*((_BYTE *)v832 + 20))
    {
      v850 = *(_QWORD *)(*v21 + 8 * (v399[2233] + *v849));
      v851 = *(_QWORD *)(*v21 + 8 * (v399[2237] + *v832));
      if (v850 <= v851)
      {
        v852 = 0;
        v853 = &v1559.f64[1];
        do
        {
          v854 = (float64x2_t *)sub_20F762098(v399 + 2279, v850, (int)v851 + (int)v852, 6u);
          v1711 = vld2q_f64(v1543.f64);
          v2005 = vld2q_f64(v1545.f64);
          v2205 = vld2q_f64(v1547.f64);
          v855 = *(v853 - 1);
          v856 = vmlaq_n_f64(vmulq_n_f64(v1711.val[0], v855), v1711.val[1], *v853);
          v1711.val[1] = vaddq_f64(v854[2], vmlaq_n_f64(vmulq_n_f64(v2205.val[0], v855), v2205.val[1], *v853));
          v1711.val[0] = vaddq_f64(v854[1], vmlaq_n_f64(vmulq_n_f64(v2005.val[0], v855), v2005.val[1], *v853));
          *v854 = vaddq_f64(*v854, v856);
          *(float64x2x2_t *)v854[1].f64 = v1711;
          ++v852;
          v853 += 2;
        }
        while (v852 != 4);
        v832 = *(unsigned int **)(a2 + 96);
        v399 = v1530;
      }
    }
  }
  v857 = *(unsigned int **)(a2 + 80);
  if (*((_BYTE *)v857 + 20))
  {
    if (*((_BYTE *)v832 + 20))
    {
      v858 = *(_QWORD *)(*v21 + 8 * (v399[2233] + *v857));
      v859 = *(_QWORD *)(*v21 + 8 * (v399[2237] + *v832));
      if (v858 <= v859)
      {
        v860 = 0;
        v861 = &v1559.f64[1];
        do
        {
          v862 = (float64x2_t *)sub_20F762098(v399 + 2279, v858, (int)v859 + (int)v860, 6u);
          v1712 = vld2q_f64(v1549.f64);
          v2006 = vld2q_f64(v1551.f64);
          v2206 = vld2q_f64(v1553.f64);
          v863 = *(v861 - 1);
          v864 = vmlaq_n_f64(vmulq_n_f64(v1712.val[0], v863), v1712.val[1], *v861);
          v1712.val[1] = vaddq_f64(v862[2], vmlaq_n_f64(vmulq_n_f64(v2206.val[0], v863), v2206.val[1], *v861));
          v1712.val[0] = vaddq_f64(v862[1], vmlaq_n_f64(vmulq_n_f64(v2006.val[0], v863), v2006.val[1], *v861));
          *v862 = vaddq_f64(*v862, v864);
          *(float64x2x2_t *)v862[1].f64 = v1712;
          ++v860;
          v861 += 2;
        }
        while (v860 != 4);
        v832 = *(unsigned int **)(a2 + 96);
        v399 = v1530;
      }
    }
  }
  v865 = *(unsigned int **)(a2 + 88);
  if (*((_BYTE *)v865 + 20))
  {
    if (*((_BYTE *)v832 + 20))
    {
      v866 = v399[2237];
      v867 = *(_QWORD *)(*v21 + 8 * (v866 + *v865));
      v868 = *(_QWORD *)(*v21 + 8 * (v866 + *v832));
      if (v867 <= v868)
      {
        v869 = (float64x2_t *)sub_20F762098(v399 + 2279, *(_QWORD *)(*v21 + 8 * (v866 + *v865)), v868, 4u);
        v1713 = vld2q_f64(v1555.f64);
        v870 = &v1557;
        v2007 = vld2q_f64(v870->f64);
        v871 = vmlaq_n_f64(vmulq_n_f64(v1713.val[0], v1559.f64[0]), v1713.val[1], v1559.f64[1]);
        v1713.val[0] = vaddq_f64(v869[1], vmlaq_n_f64(vmulq_n_f64(v2007.val[0], v1559.f64[0]), v2007.val[1], v1559.f64[1]));
        *v869 = vaddq_f64(*v869, v871);
        v869[1] = v1713.val[0];
        v872 = (float64x2_t *)sub_20F762098(v399 + 2279, v867, (int)v868 + 1, 4u);
        v1714 = vld2q_f64(v1555.f64);
        v2008 = vld2q_f64(v1557.f64);
        v873 = vmlaq_n_f64(vmulq_n_f64(v1714.val[0], v1560.f64[0]), v1714.val[1], v1560.f64[1]);
        v1714.val[0] = vaddq_f64(v872[1], vmlaq_n_f64(vmulq_n_f64(v2008.val[0], v1560.f64[0]), v2008.val[1], v1560.f64[1]));
        *v872 = vaddq_f64(*v872, v873);
        v872[1] = v1714.val[0];
        v874 = (float64x2_t *)sub_20F762098(v399 + 2279, v867, (int)v868 + 2, 4u);
        v1715 = vld2q_f64(v1555.f64);
        v2009 = vld2q_f64(v1557.f64);
        v875 = vmlaq_n_f64(vmulq_n_f64(v1715.val[0], v1561.f64[0]), v1715.val[1], v1561.f64[1]);
        v1715.val[0] = vaddq_f64(v874[1], vmlaq_n_f64(vmulq_n_f64(v2009.val[0], v1561.f64[0]), v2009.val[1], v1561.f64[1]));
        *v874 = vaddq_f64(*v874, v875);
        v874[1] = v1715.val[0];
        v876 = (float64x2_t *)sub_20F762098(v399 + 2279, v867, (int)v868 + 3, 4u);
        v1716 = vld2q_f64(v1555.f64);
        v2010 = vld2q_f64(v1557.f64);
        v877 = vmlaq_n_f64(vmulq_n_f64(v1716.val[0], v1562.f64[0]), v1716.val[1], v1562.f64[1]);
        v1716.val[0] = vaddq_f64(v876[1], vmlaq_n_f64(vmulq_n_f64(v2010.val[0], v1562.f64[0]), v2010.val[1], v1562.f64[1]));
        *v876 = vaddq_f64(*v876, v877);
        v876[1] = v1716.val[0];
        v832 = *(unsigned int **)(a2 + 96);
      }
    }
  }
  if (*((_BYTE *)v832 + 20))
  {
    v878 = *(_QWORD *)(*v21 + 8 * (v399[2237] + *v832));
    v879 = (float64x2_t *)sub_20F762098(v399 + 2279, v878, v878, 4u);
    v1717 = vld2q_f64(v1559.f64);
    v2011 = vld2q_f64(v1561.f64);
    v880 = vmlaq_n_f64(vmulq_n_f64(v1717.val[0], v1559.f64[0]), v1717.val[1], v1559.f64[1]);
    v1717.val[0] = vaddq_f64(v879[1], vmlaq_n_f64(vmulq_n_f64(v2011.val[0], v1559.f64[0]), v2011.val[1], v1559.f64[1]));
    *v879 = vaddq_f64(*v879, v880);
    v879[1] = v1717.val[0];
    v881 = (float64x2_t *)sub_20F762098(v399 + 2279, v878, (int)v878 + 1, 4u);
    v1718 = vld2q_f64(v1559.f64);
    v2012 = vld2q_f64(v1561.f64);
    v882 = vmlaq_n_f64(vmulq_n_f64(v1718.val[0], v1560.f64[0]), v1718.val[1], v1560.f64[1]);
    v1718.val[0] = vaddq_f64(v881[1], vmlaq_n_f64(vmulq_n_f64(v2012.val[0], v1560.f64[0]), v2012.val[1], v1560.f64[1]));
    *v881 = vaddq_f64(*v881, v882);
    v881[1] = v1718.val[0];
    v883 = (float64x2_t *)sub_20F762098(v399 + 2279, v878, (int)v878 + 2, 4u);
    v1719 = vld2q_f64(v1559.f64);
    v2013 = vld2q_f64(v1561.f64);
    v884 = vmlaq_n_f64(vmulq_n_f64(v1719.val[0], v1561.f64[0]), v1719.val[1], v1561.f64[1]);
    v1719.val[0] = vaddq_f64(v883[1], vmlaq_n_f64(vmulq_n_f64(v2013.val[0], v1561.f64[0]), v2013.val[1], v1561.f64[1]));
    *v883 = vaddq_f64(*v883, v884);
    v883[1] = v1719.val[0];
    v885 = (float64x2_t *)sub_20F762098(v399 + 2279, v878, (int)v878 + 3, 4u);
    v2014 = vld2q_f64(v1559.f64);
    v2152 = vld2q_f64(v1561.f64);
    v886 = vaddq_f64(v885[1], vmlaq_n_f64(vmulq_n_f64(v2152.val[0], v1562.f64[0]), v2152.val[1], v1562.f64[1]));
    *v885 = vaddq_f64(*v885, vmlaq_n_f64(vmulq_n_f64(v2014.val[0], v1562.f64[0]), v2014.val[1], v1562.f64[1]));
    v885[1] = v886;
    v1720 = vld2q_f64(v1559.f64);
    v2015 = vld2q_f64(v1561.f64);
    v887 = (float64x2_t *)(v399[2270] + 8 * v878);
    v888 = vmlaq_laneq_f64(vmulq_n_f64(v1720.val[0], v1527->f64[0]), v1720.val[1], *v1527, 1);
    v1720.val[0] = vsubq_f64(v887[1], vmlaq_laneq_f64(vmulq_n_f64(v2015.val[0], v1527->f64[0]), v2015.val[1], *v1527, 1));
    *v887 = vsubq_f64(*v887, v888);
    v887[1] = v1720.val[0];
  }
  v889 = *(unsigned int **)(a2 + 104);
  if (*((_BYTE *)v889 + 20))
  {
    v890 = *(unsigned int **)(a2 + 96);
    if (*((_BYTE *)v890 + 20))
    {
      v891 = *(_QWORD *)(*v21 + 8 * (v399[2238] + *v889));
      v892 = *(_QWORD *)(*v21 + 8 * (v399[2237] + *v890));
      if (v891 <= v892)
      {
        v893 = (float64x2_t *)sub_20F762098(v399 + 2279, *(_QWORD *)(*v21 + 8 * (v399[2238] + *v889)), v892, 4u);
        v1721 = vld2q_f64(v1563.f64);
        v894 = &v1565;
        v2016 = vld2q_f64(v894->f64);
        v895 = vmlaq_n_f64(vmulq_n_f64(v1721.val[0], v1559.f64[0]), v1721.val[1], v1559.f64[1]);
        v1721.val[0] = vaddq_f64(v893[1], vmlaq_n_f64(vmulq_n_f64(v2016.val[0], v1559.f64[0]), v2016.val[1], v1559.f64[1]));
        *v893 = vaddq_f64(*v893, v895);
        v893[1] = v1721.val[0];
        v896 = (float64x2_t *)sub_20F762098(v399 + 2279, v891, (int)v892 + 1, 4u);
        v1722 = vld2q_f64(v1563.f64);
        v2017 = vld2q_f64(v1565.f64);
        v897 = vmlaq_n_f64(vmulq_n_f64(v1722.val[0], v1560.f64[0]), v1722.val[1], v1560.f64[1]);
        v1722.val[0] = vaddq_f64(v896[1], vmlaq_n_f64(vmulq_n_f64(v2017.val[0], v1560.f64[0]), v2017.val[1], v1560.f64[1]));
        *v896 = vaddq_f64(*v896, v897);
        v896[1] = v1722.val[0];
        v898 = (float64x2_t *)sub_20F762098(v399 + 2279, v891, (int)v892 + 2, 4u);
        v1723 = vld2q_f64(v1563.f64);
        v2018 = vld2q_f64(v1565.f64);
        v899 = vmlaq_n_f64(vmulq_n_f64(v1723.val[0], v1561.f64[0]), v1723.val[1], v1561.f64[1]);
        v1723.val[0] = vaddq_f64(v898[1], vmlaq_n_f64(vmulq_n_f64(v2018.val[0], v1561.f64[0]), v2018.val[1], v1561.f64[1]));
        *v898 = vaddq_f64(*v898, v899);
        v898[1] = v1723.val[0];
        v900 = (float64x2_t *)sub_20F762098(v399 + 2279, v891, (int)v892 + 3, 4u);
        v1724 = vld2q_f64(v1563.f64);
        v2019 = vld2q_f64(v1565.f64);
        v901 = vmlaq_n_f64(vmulq_n_f64(v1724.val[0], v1562.f64[0]), v1724.val[1], v1562.f64[1]);
        v1724.val[0] = vaddq_f64(v900[1], vmlaq_n_f64(vmulq_n_f64(v2019.val[0], v1562.f64[0]), v2019.val[1], v1562.f64[1]));
        *v900 = vaddq_f64(*v900, v901);
        v900[1] = v1724.val[0];
      }
    }
  }
  v902 = *(unsigned int **)(a2 + 112);
  if (*((_BYTE *)v902 + 20))
  {
    v903 = *(unsigned int **)(a2 + 96);
    if (*((_BYTE *)v903 + 20))
    {
      v904 = *(_QWORD *)(*v21 + 8 * (v399[2238] + *v902));
      v905 = *(_QWORD *)(*v21 + 8 * (v399[2237] + *v903));
      if (v904 <= v905)
      {
        v906 = (float64x2_t *)sub_20F762098(v399 + 2279, *(_QWORD *)(*v21 + 8 * (v399[2238] + *v902)), v905, 4u);
        v1725 = vld2q_f64(v1567.f64);
        v907 = &v1569;
        v2020 = vld2q_f64(v907->f64);
        v908 = vmlaq_n_f64(vmulq_n_f64(v1725.val[0], v1559.f64[0]), v1725.val[1], v1559.f64[1]);
        v1725.val[0] = vaddq_f64(v906[1], vmlaq_n_f64(vmulq_n_f64(v2020.val[0], v1559.f64[0]), v2020.val[1], v1559.f64[1]));
        *v906 = vaddq_f64(*v906, v908);
        v906[1] = v1725.val[0];
        v909 = (float64x2_t *)sub_20F762098(v399 + 2279, v904, (int)v905 + 1, 4u);
        v1726 = vld2q_f64(v1567.f64);
        v2021 = vld2q_f64(v1569.f64);
        v910 = vmlaq_n_f64(vmulq_n_f64(v1726.val[0], v1560.f64[0]), v1726.val[1], v1560.f64[1]);
        v1726.val[0] = vaddq_f64(v909[1], vmlaq_n_f64(vmulq_n_f64(v2021.val[0], v1560.f64[0]), v2021.val[1], v1560.f64[1]));
        *v909 = vaddq_f64(*v909, v910);
        v909[1] = v1726.val[0];
        v911 = (float64x2_t *)sub_20F762098(v399 + 2279, v904, (int)v905 + 2, 4u);
        v1727 = vld2q_f64(v1567.f64);
        v2022 = vld2q_f64(v1569.f64);
        v912 = vmlaq_n_f64(vmulq_n_f64(v1727.val[0], v1561.f64[0]), v1727.val[1], v1561.f64[1]);
        v1727.val[0] = vaddq_f64(v911[1], vmlaq_n_f64(vmulq_n_f64(v2022.val[0], v1561.f64[0]), v2022.val[1], v1561.f64[1]));
        *v911 = vaddq_f64(*v911, v912);
        v911[1] = v1727.val[0];
        v913 = (float64x2_t *)sub_20F762098(v399 + 2279, v904, (int)v905 + 3, 4u);
        v1728 = vld2q_f64(v1567.f64);
        v2023 = vld2q_f64(v1569.f64);
        v914 = vmlaq_n_f64(vmulq_n_f64(v1728.val[0], v1562.f64[0]), v1728.val[1], v1562.f64[1]);
        v1728.val[0] = vaddq_f64(v913[1], vmlaq_n_f64(vmulq_n_f64(v2023.val[0], v1562.f64[0]), v2023.val[1], v1562.f64[1]));
        *v913 = vaddq_f64(*v913, v914);
        v913[1] = v1728.val[0];
      }
    }
  }
  v915 = *(unsigned int **)(a2 + 120);
  if (*((_BYTE *)v915 + 20))
  {
    v916 = *(unsigned int **)(a2 + 96);
    if (*((_BYTE *)v916 + 20))
    {
      v917 = *(_QWORD *)(*v21 + 8 * (v399[2239] + *v915));
      v918 = *(_QWORD *)(*v21 + 8 * (v399[2237] + *v916));
      if (v917 <= v918)
      {
        v919 = (float64x2_t *)sub_20F762098(v399 + 2279, *(_QWORD *)(*v21 + 8 * (v399[2239] + *v915)), v918, 3u);
        v920.f64[0] = v919[1].f64[0];
        v2024 = vld2q_f64(v1571.f64);
        _V4.D[1] = v1573.f64[1];
        v922 = vmlaq_laneq_f64(vmulq_n_f64(v2024.val[0], v1559.f64[0]), v2024.val[1], v1559, 1);
        v2024.val[0] = vmulq_f64(v1573, v1559);
        v2024.val[1].f64[0] = v1559.f64[1];
        __asm { FMLA            D2, D3, V4.D[1] }
        *v919 = vaddq_f64(*v919, v922);
        *(_QWORD *)&v919[1].f64[0] = *(_OWORD *)&vaddq_f64(v920, v2024.val[0]);
        v923 = (float64x2_t *)sub_20F762098(v399 + 2279, v917, (int)v918 + 1, 3u);
        v924.f64[0] = v923[1].f64[0];
        v2025 = vld2q_f64(v1571.f64);
        _V4.D[1] = v1573.f64[1];
        v926 = vmlaq_laneq_f64(vmulq_n_f64(v2025.val[0], v1560.f64[0]), v2025.val[1], v1560, 1);
        v2025.val[0] = vmulq_f64(v1573, v1560);
        v2025.val[1].f64[0] = v1560.f64[1];
        __asm { FMLA            D2, D3, V4.D[1] }
        *v923 = vaddq_f64(*v923, v926);
        *(_QWORD *)&v923[1].f64[0] = *(_OWORD *)&vaddq_f64(v924, v2025.val[0]);
        v927 = (float64x2_t *)sub_20F762098(v399 + 2279, v917, (int)v918 + 2, 3u);
        v928.f64[0] = v927[1].f64[0];
        v2026 = vld2q_f64(v1571.f64);
        _V4.D[1] = v1573.f64[1];
        v930 = vmlaq_laneq_f64(vmulq_n_f64(v2026.val[0], v1561.f64[0]), v2026.val[1], v1561, 1);
        v2026.val[0] = vmulq_f64(v1573, v1561);
        v2026.val[1].f64[0] = v1561.f64[1];
        __asm { FMLA            D2, D3, V4.D[1] }
        *v927 = vaddq_f64(*v927, v930);
        *(_QWORD *)&v927[1].f64[0] = *(_OWORD *)&vaddq_f64(v928, v2026.val[0]);
        v931 = (float64x2_t *)sub_20F762098(v399 + 2279, v917, (int)v918 + 3, 3u);
        v1821 = vld2q_f64(v1571.f64);
        v932.f64[0] = v931[1].f64[0];
        _V4.D[1] = v1573.f64[1];
        v934 = vmlaq_laneq_f64(vmulq_n_f64(v1821.val[0], v1562.f64[0]), v1821.val[1], v1562, 1);
        v1821.val[0] = vmulq_f64(v1573, v1562);
        v1821.val[1].f64[0] = v1562.f64[1];
        __asm { FMLA            D1, D2, V4.D[1] }
        *v931 = vaddq_f64(*v931, v934);
        *(_QWORD *)&v931[1].f64[0] = *(_OWORD *)&vaddq_f64(v932, v1821.val[0]);
      }
    }
  }
  v935 = *(unsigned int **)(a2 + 128);
  if (*((_BYTE *)v935 + 20))
  {
    v936 = *(unsigned int **)(a2 + 96);
    if (*((_BYTE *)v936 + 20))
    {
      v937 = *(_QWORD *)(*v21 + 8 * (v399[2239] + *v935));
      v938 = *(_QWORD *)(*v21 + 8 * (v399[2237] + *v936));
      if (v937 <= v938)
      {
        v939 = (float64x2_t *)sub_20F762098(v399 + 2279, *(_QWORD *)(*v21 + 8 * (v399[2239] + *v935)), v938, 3u);
        v940.f64[0] = v939[1].f64[0];
        v2027 = vld2q_f64(v1574.f64);
        _V4.D[1] = v1576.f64[1];
        v942 = vmlaq_laneq_f64(vmulq_n_f64(v2027.val[0], v1559.f64[0]), v2027.val[1], v1559, 1);
        v2027.val[0] = vmulq_f64(v1576, v1559);
        v2027.val[1].f64[0] = v1559.f64[1];
        __asm { FMLA            D2, D3, V4.D[1] }
        *v939 = vaddq_f64(*v939, v942);
        *(_QWORD *)&v939[1].f64[0] = *(_OWORD *)&vaddq_f64(v940, v2027.val[0]);
        v943 = (float64x2_t *)sub_20F762098(v399 + 2279, v937, (int)v938 + 1, 3u);
        v944.f64[0] = v943[1].f64[0];
        v2028 = vld2q_f64(v1574.f64);
        _V4.D[1] = v1576.f64[1];
        v946 = vmlaq_laneq_f64(vmulq_n_f64(v2028.val[0], v1560.f64[0]), v2028.val[1], v1560, 1);
        v2028.val[0] = vmulq_f64(v1576, v1560);
        v2028.val[1].f64[0] = v1560.f64[1];
        __asm { FMLA            D2, D3, V4.D[1] }
        *v943 = vaddq_f64(*v943, v946);
        *(_QWORD *)&v943[1].f64[0] = *(_OWORD *)&vaddq_f64(v944, v2028.val[0]);
        v947 = (float64x2_t *)sub_20F762098(v399 + 2279, v937, (int)v938 + 2, 3u);
        v948.f64[0] = v947[1].f64[0];
        v2029 = vld2q_f64(v1574.f64);
        _V4.D[1] = v1576.f64[1];
        v950 = vmlaq_laneq_f64(vmulq_n_f64(v2029.val[0], v1561.f64[0]), v2029.val[1], v1561, 1);
        v2029.val[0] = vmulq_f64(v1576, v1561);
        v2029.val[1].f64[0] = v1561.f64[1];
        __asm { FMLA            D2, D3, V4.D[1] }
        *v947 = vaddq_f64(*v947, v950);
        *(_QWORD *)&v947[1].f64[0] = *(_OWORD *)&vaddq_f64(v948, v2029.val[0]);
        v951 = (float64x2_t *)sub_20F762098(v399 + 2279, v937, (int)v938 + 3, 3u);
        v1822 = vld2q_f64(v1574.f64);
        v952.f64[0] = v951[1].f64[0];
        _V4.D[1] = v1576.f64[1];
        v954 = vmlaq_laneq_f64(vmulq_n_f64(v1822.val[0], v1562.f64[0]), v1822.val[1], v1562, 1);
        v1822.val[0] = vmulq_f64(v1576, v1562);
        v1822.val[1].f64[0] = v1562.f64[1];
        __asm { FMLA            D1, D2, V4.D[1] }
        *v951 = vaddq_f64(*v951, v954);
        *(_QWORD *)&v951[1].f64[0] = *(_OWORD *)&vaddq_f64(v952, v1822.val[0]);
      }
    }
  }
  v955 = *(unsigned int **)(a2 + 56);
  v956 = *(unsigned int **)(a2 + 104);
  if (*((_BYTE *)v955 + 20))
  {
    if (*((_BYTE *)v956 + 20))
    {
      v957 = *(_QWORD *)(*v21 + 8 * (v399[2236] + *v955));
      v958 = *(_QWORD *)(*v21 + 8 * (v399[2238] + *v956));
      if (v957 <= v958)
      {
        for (mm = 0; mm != 8; mm += 2)
        {
          v960 = (float64x2_t *)sub_20F762098(v399 + 2279, v957, v958, 6u);
          v2180 = vld2q_f64(v1533.f64);
          v2221 = vld2q_f64(v1535.f64);
          v961 = v1563.f64[mm];
          v962 = v1563.f64[mm + 1];
          v963 = vaddq_f64(v960[2], vmlaq_n_f64(vmulq_n_f64(v2221.val[0], v961), v2221.val[1], v962));
          v964 = vaddq_f64(v960[1], vmlaq_n_f64(vmulq_n_f64(v2180.val[0], v961), v2180.val[1], v962));
          *v960 = vaddq_f64(*v960, vmlaq_n_f64(vmulq_n_f64((float64x2_t)vzip1q_s64((int64x2_t)v1531, (int64x2_t)v1532), v961), (float64x2_t)vzip2q_s64((int64x2_t)v1531, (int64x2_t)v1532), v962));
          v960[1] = v964;
          v960[2] = v963;
          LODWORD(v958) = v958 + 1;
        }
        v956 = *(unsigned int **)(a2 + 104);
        v399 = v1530;
      }
    }
  }
  v965 = *(unsigned int **)(a2 + 64);
  if (*((_BYTE *)v965 + 20))
  {
    if (*((_BYTE *)v956 + 20))
    {
      v966 = *(_QWORD *)(*v21 + 8 * (v399[2236] + *v965));
      v967 = *(_QWORD *)(*v21 + 8 * (v399[2238] + *v956));
      if (v966 <= v967)
      {
        v968 = 0;
        v969 = &v1563.f64[1];
        do
        {
          v970 = (float64x2_t *)sub_20F762098(v399 + 2279, v966, (int)v967 + (int)v968, 6u);
          v1729 = vld2q_f64(v1537.f64);
          v2030 = vld2q_f64(v1539.f64);
          v2207 = vld2q_f64(v1541.f64);
          v971 = *(v969 - 1);
          v972 = vmlaq_n_f64(vmulq_n_f64(v1729.val[0], v971), v1729.val[1], *v969);
          v1729.val[1] = vaddq_f64(v970[2], vmlaq_n_f64(vmulq_n_f64(v2207.val[0], v971), v2207.val[1], *v969));
          v1729.val[0] = vaddq_f64(v970[1], vmlaq_n_f64(vmulq_n_f64(v2030.val[0], v971), v2030.val[1], *v969));
          *v970 = vaddq_f64(*v970, v972);
          *(float64x2x2_t *)v970[1].f64 = v1729;
          ++v968;
          v969 += 2;
        }
        while (v968 != 4);
        v956 = *(unsigned int **)(a2 + 104);
        v399 = v1530;
      }
    }
  }
  v973 = *(unsigned int **)(a2 + 72);
  if (*((_BYTE *)v973 + 20))
  {
    if (*((_BYTE *)v956 + 20))
    {
      v974 = *(_QWORD *)(*v21 + 8 * (v399[2233] + *v973));
      v975 = *(_QWORD *)(*v21 + 8 * (v399[2238] + *v956));
      if (v974 <= v975)
      {
        v976 = 0;
        v977 = &v1563.f64[1];
        do
        {
          v978 = (float64x2_t *)sub_20F762098(v399 + 2279, v974, (int)v975 + (int)v976, 6u);
          v1730 = vld2q_f64(v1543.f64);
          v2031 = vld2q_f64(v1545.f64);
          v2208 = vld2q_f64(v1547.f64);
          v979 = *(v977 - 1);
          v980 = vmlaq_n_f64(vmulq_n_f64(v1730.val[0], v979), v1730.val[1], *v977);
          v1730.val[1] = vaddq_f64(v978[2], vmlaq_n_f64(vmulq_n_f64(v2208.val[0], v979), v2208.val[1], *v977));
          v1730.val[0] = vaddq_f64(v978[1], vmlaq_n_f64(vmulq_n_f64(v2031.val[0], v979), v2031.val[1], *v977));
          *v978 = vaddq_f64(*v978, v980);
          *(float64x2x2_t *)v978[1].f64 = v1730;
          ++v976;
          v977 += 2;
        }
        while (v976 != 4);
        v956 = *(unsigned int **)(a2 + 104);
        v399 = v1530;
      }
    }
  }
  v981 = *(unsigned int **)(a2 + 80);
  if (*((_BYTE *)v981 + 20))
  {
    if (*((_BYTE *)v956 + 20))
    {
      v982 = *(_QWORD *)(*v21 + 8 * (v399[2233] + *v981));
      v983 = *(_QWORD *)(*v21 + 8 * (v399[2238] + *v956));
      if (v982 <= v983)
      {
        v984 = 0;
        v985 = &v1563.f64[1];
        do
        {
          v986 = (float64x2_t *)sub_20F762098(v399 + 2279, v982, (int)v983 + (int)v984, 6u);
          v1731 = vld2q_f64(v1549.f64);
          v2032 = vld2q_f64(v1551.f64);
          v2209 = vld2q_f64(v1553.f64);
          v987 = *(v985 - 1);
          v988 = vmlaq_n_f64(vmulq_n_f64(v1731.val[0], v987), v1731.val[1], *v985);
          v1731.val[1] = vaddq_f64(v986[2], vmlaq_n_f64(vmulq_n_f64(v2209.val[0], v987), v2209.val[1], *v985));
          v1731.val[0] = vaddq_f64(v986[1], vmlaq_n_f64(vmulq_n_f64(v2032.val[0], v987), v2032.val[1], *v985));
          *v986 = vaddq_f64(*v986, v988);
          *(float64x2x2_t *)v986[1].f64 = v1731;
          ++v984;
          v985 += 2;
        }
        while (v984 != 4);
        v956 = *(unsigned int **)(a2 + 104);
        v399 = v1530;
      }
    }
  }
  v989 = *(unsigned int **)(a2 + 88);
  if (*((_BYTE *)v989 + 20))
  {
    if (*((_BYTE *)v956 + 20))
    {
      v990 = *(_QWORD *)(*v21 + 8 * (v399[2237] + *v989));
      v991 = *(_QWORD *)(*v21 + 8 * (v399[2238] + *v956));
      if (v990 <= v991)
      {
        v992 = (float64x2_t *)sub_20F762098(v399 + 2279, *(_QWORD *)(*v21 + 8 * (v399[2237] + *v989)), v991, 4u);
        v1732 = vld2q_f64(v1555.f64);
        v993 = &v1557;
        v2033 = vld2q_f64(v993->f64);
        v994 = vmlaq_n_f64(vmulq_n_f64(v1732.val[0], v1563.f64[0]), v1732.val[1], v1563.f64[1]);
        v1732.val[0] = vaddq_f64(v992[1], vmlaq_n_f64(vmulq_n_f64(v2033.val[0], v1563.f64[0]), v2033.val[1], v1563.f64[1]));
        *v992 = vaddq_f64(*v992, v994);
        v992[1] = v1732.val[0];
        v995 = (float64x2_t *)sub_20F762098(v399 + 2279, v990, (int)v991 + 1, 4u);
        v1733 = vld2q_f64(v1555.f64);
        v2034 = vld2q_f64(v1557.f64);
        v996 = vmlaq_n_f64(vmulq_n_f64(v1733.val[0], v1564.f64[0]), v1733.val[1], v1564.f64[1]);
        v1733.val[0] = vaddq_f64(v995[1], vmlaq_n_f64(vmulq_n_f64(v2034.val[0], v1564.f64[0]), v2034.val[1], v1564.f64[1]));
        *v995 = vaddq_f64(*v995, v996);
        v995[1] = v1733.val[0];
        v997 = (float64x2_t *)sub_20F762098(v399 + 2279, v990, (int)v991 + 2, 4u);
        v1734 = vld2q_f64(v1555.f64);
        v2035 = vld2q_f64(v1557.f64);
        v998 = vmlaq_n_f64(vmulq_n_f64(v1734.val[0], v1565.f64[0]), v1734.val[1], v1565.f64[1]);
        v1734.val[0] = vaddq_f64(v997[1], vmlaq_n_f64(vmulq_n_f64(v2035.val[0], v1565.f64[0]), v2035.val[1], v1565.f64[1]));
        *v997 = vaddq_f64(*v997, v998);
        v997[1] = v1734.val[0];
        v999 = (float64x2_t *)sub_20F762098(v399 + 2279, v990, (int)v991 + 3, 4u);
        v1735 = vld2q_f64(v1555.f64);
        v2036 = vld2q_f64(v1557.f64);
        v1000 = vmlaq_n_f64(vmulq_n_f64(v1735.val[0], v1566.f64[0]), v1735.val[1], v1566.f64[1]);
        v1735.val[0] = vaddq_f64(v999[1], vmlaq_n_f64(vmulq_n_f64(v2036.val[0], v1566.f64[0]), v2036.val[1], v1566.f64[1]));
        *v999 = vaddq_f64(*v999, v1000);
        v999[1] = v1735.val[0];
        v956 = *(unsigned int **)(a2 + 104);
      }
    }
  }
  v1001 = *(unsigned int **)(a2 + 96);
  if (*((_BYTE *)v1001 + 20))
  {
    if (*((_BYTE *)v956 + 20))
    {
      v1002 = *(_QWORD *)(*v21 + 8 * (v399[2237] + *v1001));
      v1003 = *(_QWORD *)(*v21 + 8 * (v399[2238] + *v956));
      if (v1002 <= v1003)
      {
        v1004 = (float64x2_t *)sub_20F762098(v399 + 2279, *(_QWORD *)(*v21 + 8 * (v399[2237] + *v1001)), v1003, 4u);
        v1736 = vld2q_f64(v1559.f64);
        v1005 = &v1561;
        v2037 = vld2q_f64(v1005->f64);
        v1006 = vmlaq_n_f64(vmulq_n_f64(v1736.val[0], v1563.f64[0]), v1736.val[1], v1563.f64[1]);
        v1736.val[0] = vaddq_f64(v1004[1], vmlaq_n_f64(vmulq_n_f64(v2037.val[0], v1563.f64[0]), v2037.val[1], v1563.f64[1]));
        *v1004 = vaddq_f64(*v1004, v1006);
        v1004[1] = v1736.val[0];
        v1007 = (float64x2_t *)sub_20F762098(v399 + 2279, v1002, (int)v1003 + 1, 4u);
        v1737 = vld2q_f64(v1559.f64);
        v2038 = vld2q_f64(v1561.f64);
        v1008 = vmlaq_n_f64(vmulq_n_f64(v1737.val[0], v1564.f64[0]), v1737.val[1], v1564.f64[1]);
        v1737.val[0] = vaddq_f64(v1007[1], vmlaq_n_f64(vmulq_n_f64(v2038.val[0], v1564.f64[0]), v2038.val[1], v1564.f64[1]));
        *v1007 = vaddq_f64(*v1007, v1008);
        v1007[1] = v1737.val[0];
        v1009 = (float64x2_t *)sub_20F762098(v399 + 2279, v1002, (int)v1003 + 2, 4u);
        v1738 = vld2q_f64(v1559.f64);
        v2039 = vld2q_f64(v1561.f64);
        v1010 = vmlaq_n_f64(vmulq_n_f64(v1738.val[0], v1565.f64[0]), v1738.val[1], v1565.f64[1]);
        v1738.val[0] = vaddq_f64(v1009[1], vmlaq_n_f64(vmulq_n_f64(v2039.val[0], v1565.f64[0]), v2039.val[1], v1565.f64[1]));
        *v1009 = vaddq_f64(*v1009, v1010);
        v1009[1] = v1738.val[0];
        v1011 = (float64x2_t *)sub_20F762098(v399 + 2279, v1002, (int)v1003 + 3, 4u);
        v1739 = vld2q_f64(v1559.f64);
        v2040 = vld2q_f64(v1561.f64);
        v1012 = vmlaq_n_f64(vmulq_n_f64(v1739.val[0], v1566.f64[0]), v1739.val[1], v1566.f64[1]);
        v1739.val[0] = vaddq_f64(v1011[1], vmlaq_n_f64(vmulq_n_f64(v2040.val[0], v1566.f64[0]), v2040.val[1], v1566.f64[1]));
        *v1011 = vaddq_f64(*v1011, v1012);
        v1011[1] = v1739.val[0];
        v956 = *(unsigned int **)(a2 + 104);
      }
    }
  }
  if (*((_BYTE *)v956 + 20))
  {
    v1013 = *(_QWORD *)(*v21 + 8 * (v399[2238] + *v956));
    v1014 = (float64x2_t *)sub_20F762098(v399 + 2279, v1013, v1013, 4u);
    v1740 = vld2q_f64(v1563.f64);
    v2041 = vld2q_f64(v1565.f64);
    v1015 = vmlaq_n_f64(vmulq_n_f64(v1740.val[0], v1563.f64[0]), v1740.val[1], v1563.f64[1]);
    v1740.val[0] = vaddq_f64(v1014[1], vmlaq_n_f64(vmulq_n_f64(v2041.val[0], v1563.f64[0]), v2041.val[1], v1563.f64[1]));
    *v1014 = vaddq_f64(*v1014, v1015);
    v1014[1] = v1740.val[0];
    v1016 = (float64x2_t *)sub_20F762098(v399 + 2279, v1013, (int)v1013 + 1, 4u);
    v1741 = vld2q_f64(v1563.f64);
    v2042 = vld2q_f64(v1565.f64);
    v1017 = vmlaq_n_f64(vmulq_n_f64(v1741.val[0], v1564.f64[0]), v1741.val[1], v1564.f64[1]);
    v1741.val[0] = vaddq_f64(v1016[1], vmlaq_n_f64(vmulq_n_f64(v2042.val[0], v1564.f64[0]), v2042.val[1], v1564.f64[1]));
    *v1016 = vaddq_f64(*v1016, v1017);
    v1016[1] = v1741.val[0];
    v1018 = (float64x2_t *)sub_20F762098(v399 + 2279, v1013, (int)v1013 + 2, 4u);
    v1742 = vld2q_f64(v1563.f64);
    v2043 = vld2q_f64(v1565.f64);
    v1019 = vmlaq_n_f64(vmulq_n_f64(v1742.val[0], v1565.f64[0]), v1742.val[1], v1565.f64[1]);
    v1742.val[0] = vaddq_f64(v1018[1], vmlaq_n_f64(vmulq_n_f64(v2043.val[0], v1565.f64[0]), v2043.val[1], v1565.f64[1]));
    *v1018 = vaddq_f64(*v1018, v1019);
    v1018[1] = v1742.val[0];
    v1020 = (float64x2_t *)sub_20F762098(v399 + 2279, v1013, (int)v1013 + 3, 4u);
    v2044 = vld2q_f64(v1563.f64);
    v2153 = vld2q_f64(v1565.f64);
    v1021 = vaddq_f64(v1020[1], vmlaq_n_f64(vmulq_n_f64(v2153.val[0], v1566.f64[0]), v2153.val[1], v1566.f64[1]));
    *v1020 = vaddq_f64(*v1020, vmlaq_n_f64(vmulq_n_f64(v2044.val[0], v1566.f64[0]), v2044.val[1], v1566.f64[1]));
    v1020[1] = v1021;
    v1743 = vld2q_f64(v1563.f64);
    v2045 = vld2q_f64(v1565.f64);
    v1022 = (float64x2_t *)(v399[2270] + 8 * v1013);
    v1023 = vmlaq_laneq_f64(vmulq_n_f64(v1743.val[0], v1527->f64[0]), v1743.val[1], *v1527, 1);
    v1743.val[0] = vsubq_f64(v1022[1], vmlaq_laneq_f64(vmulq_n_f64(v2045.val[0], v1527->f64[0]), v2045.val[1], *v1527, 1));
    *v1022 = vsubq_f64(*v1022, v1023);
    v1022[1] = v1743.val[0];
  }
  v1024 = *(unsigned int **)(a2 + 112);
  if (*((_BYTE *)v1024 + 20))
  {
    v1025 = *(unsigned int **)(a2 + 104);
    if (*((_BYTE *)v1025 + 20))
    {
      v1026 = v399[2238];
      v1027 = *(_QWORD *)(*v21 + 8 * (v1026 + *v1024));
      v1028 = *(_QWORD *)(*v21 + 8 * (v1026 + *v1025));
      if (v1027 <= v1028)
      {
        v1029 = (float64x2_t *)sub_20F762098(v399 + 2279, *(_QWORD *)(*v21 + 8 * (v1026 + *v1024)), v1028, 4u);
        v1744 = vld2q_f64(v1567.f64);
        v1030 = &v1569;
        v2046 = vld2q_f64(v1030->f64);
        v1031 = vmlaq_n_f64(vmulq_n_f64(v1744.val[0], v1563.f64[0]), v1744.val[1], v1563.f64[1]);
        v1744.val[0] = vaddq_f64(v1029[1], vmlaq_n_f64(vmulq_n_f64(v2046.val[0], v1563.f64[0]), v2046.val[1], v1563.f64[1]));
        *v1029 = vaddq_f64(*v1029, v1031);
        v1029[1] = v1744.val[0];
        v1032 = (float64x2_t *)sub_20F762098(v399 + 2279, v1027, (int)v1028 + 1, 4u);
        v1745 = vld2q_f64(v1567.f64);
        v2047 = vld2q_f64(v1569.f64);
        v1033 = vmlaq_n_f64(vmulq_n_f64(v1745.val[0], v1564.f64[0]), v1745.val[1], v1564.f64[1]);
        v1745.val[0] = vaddq_f64(v1032[1], vmlaq_n_f64(vmulq_n_f64(v2047.val[0], v1564.f64[0]), v2047.val[1], v1564.f64[1]));
        *v1032 = vaddq_f64(*v1032, v1033);
        v1032[1] = v1745.val[0];
        v1034 = (float64x2_t *)sub_20F762098(v399 + 2279, v1027, (int)v1028 + 2, 4u);
        v1746 = vld2q_f64(v1567.f64);
        v2048 = vld2q_f64(v1569.f64);
        v1035 = vmlaq_n_f64(vmulq_n_f64(v1746.val[0], v1565.f64[0]), v1746.val[1], v1565.f64[1]);
        v1746.val[0] = vaddq_f64(v1034[1], vmlaq_n_f64(vmulq_n_f64(v2048.val[0], v1565.f64[0]), v2048.val[1], v1565.f64[1]));
        *v1034 = vaddq_f64(*v1034, v1035);
        v1034[1] = v1746.val[0];
        v1036 = (float64x2_t *)sub_20F762098(v399 + 2279, v1027, (int)v1028 + 3, 4u);
        v1747 = vld2q_f64(v1567.f64);
        v2049 = vld2q_f64(v1569.f64);
        v1037 = vmlaq_n_f64(vmulq_n_f64(v1747.val[0], v1566.f64[0]), v1747.val[1], v1566.f64[1]);
        v1747.val[0] = vaddq_f64(v1036[1], vmlaq_n_f64(vmulq_n_f64(v2049.val[0], v1566.f64[0]), v2049.val[1], v1566.f64[1]));
        *v1036 = vaddq_f64(*v1036, v1037);
        v1036[1] = v1747.val[0];
      }
    }
  }
  v1038 = *(unsigned int **)(a2 + 120);
  if (*((_BYTE *)v1038 + 20))
  {
    v1039 = *(unsigned int **)(a2 + 104);
    if (*((_BYTE *)v1039 + 20))
    {
      v1040 = *(_QWORD *)(*v21 + 8 * (v399[2239] + *v1038));
      v1041 = *(_QWORD *)(*v21 + 8 * (v399[2238] + *v1039));
      if (v1040 <= v1041)
      {
        v1042 = (float64x2_t *)sub_20F762098(v399 + 2279, *(_QWORD *)(*v21 + 8 * (v399[2239] + *v1038)), v1041, 3u);
        v1043.f64[0] = v1042[1].f64[0];
        v2050 = vld2q_f64(v1571.f64);
        _V4.D[1] = v1573.f64[1];
        v1045 = vmlaq_laneq_f64(vmulq_n_f64(v2050.val[0], v1563.f64[0]), v2050.val[1], v1563, 1);
        v2050.val[0] = vmulq_f64(v1573, v1563);
        v2050.val[1].f64[0] = v1563.f64[1];
        __asm { FMLA            D2, D3, V4.D[1] }
        *v1042 = vaddq_f64(*v1042, v1045);
        *(_QWORD *)&v1042[1].f64[0] = *(_OWORD *)&vaddq_f64(v1043, v2050.val[0]);
        v1046 = (float64x2_t *)sub_20F762098(v399 + 2279, v1040, (int)v1041 + 1, 3u);
        v1047.f64[0] = v1046[1].f64[0];
        v2051 = vld2q_f64(v1571.f64);
        _V4.D[1] = v1573.f64[1];
        v1049 = vmlaq_laneq_f64(vmulq_n_f64(v2051.val[0], v1564.f64[0]), v2051.val[1], v1564, 1);
        v2051.val[0] = vmulq_f64(v1573, v1564);
        v2051.val[1].f64[0] = v1564.f64[1];
        __asm { FMLA            D2, D3, V4.D[1] }
        *v1046 = vaddq_f64(*v1046, v1049);
        *(_QWORD *)&v1046[1].f64[0] = *(_OWORD *)&vaddq_f64(v1047, v2051.val[0]);
        v1050 = (float64x2_t *)sub_20F762098(v399 + 2279, v1040, (int)v1041 + 2, 3u);
        v1051.f64[0] = v1050[1].f64[0];
        v2052 = vld2q_f64(v1571.f64);
        _V4.D[1] = v1573.f64[1];
        v1053 = vmlaq_laneq_f64(vmulq_n_f64(v2052.val[0], v1565.f64[0]), v2052.val[1], v1565, 1);
        v2052.val[0] = vmulq_f64(v1573, v1565);
        v2052.val[1].f64[0] = v1565.f64[1];
        __asm { FMLA            D2, D3, V4.D[1] }
        *v1050 = vaddq_f64(*v1050, v1053);
        *(_QWORD *)&v1050[1].f64[0] = *(_OWORD *)&vaddq_f64(v1051, v2052.val[0]);
        v1054 = (float64x2_t *)sub_20F762098(v399 + 2279, v1040, (int)v1041 + 3, 3u);
        v1823 = vld2q_f64(v1571.f64);
        v1055.f64[0] = v1054[1].f64[0];
        _V4.D[1] = v1573.f64[1];
        v1057 = vmlaq_laneq_f64(vmulq_n_f64(v1823.val[0], v1566.f64[0]), v1823.val[1], v1566, 1);
        v1823.val[0] = vmulq_f64(v1573, v1566);
        v1823.val[1].f64[0] = v1566.f64[1];
        __asm { FMLA            D1, D2, V4.D[1] }
        *v1054 = vaddq_f64(*v1054, v1057);
        *(_QWORD *)&v1054[1].f64[0] = *(_OWORD *)&vaddq_f64(v1055, v1823.val[0]);
      }
    }
  }
  v1058 = *(unsigned int **)(a2 + 128);
  if (*((_BYTE *)v1058 + 20))
  {
    v1059 = *(unsigned int **)(a2 + 104);
    if (*((_BYTE *)v1059 + 20))
    {
      v1060 = *(_QWORD *)(*v21 + 8 * (v399[2239] + *v1058));
      v1061 = *(_QWORD *)(*v21 + 8 * (v399[2238] + *v1059));
      if (v1060 <= v1061)
      {
        v1062 = (float64x2_t *)sub_20F762098(v399 + 2279, *(_QWORD *)(*v21 + 8 * (v399[2239] + *v1058)), v1061, 3u);
        v1063.f64[0] = v1062[1].f64[0];
        v2053 = vld2q_f64(v1574.f64);
        _V4.D[1] = v1576.f64[1];
        v1065 = vmlaq_laneq_f64(vmulq_n_f64(v2053.val[0], v1563.f64[0]), v2053.val[1], v1563, 1);
        v2053.val[0] = vmulq_f64(v1576, v1563);
        v2053.val[1].f64[0] = v1563.f64[1];
        __asm { FMLA            D2, D3, V4.D[1] }
        *v1062 = vaddq_f64(*v1062, v1065);
        *(_QWORD *)&v1062[1].f64[0] = *(_OWORD *)&vaddq_f64(v1063, v2053.val[0]);
        v1066 = (float64x2_t *)sub_20F762098(v399 + 2279, v1060, (int)v1061 + 1, 3u);
        v1067.f64[0] = v1066[1].f64[0];
        v2054 = vld2q_f64(v1574.f64);
        _V4.D[1] = v1576.f64[1];
        v1069 = vmlaq_laneq_f64(vmulq_n_f64(v2054.val[0], v1564.f64[0]), v2054.val[1], v1564, 1);
        v2054.val[0] = vmulq_f64(v1576, v1564);
        v2054.val[1].f64[0] = v1564.f64[1];
        __asm { FMLA            D2, D3, V4.D[1] }
        *v1066 = vaddq_f64(*v1066, v1069);
        *(_QWORD *)&v1066[1].f64[0] = *(_OWORD *)&vaddq_f64(v1067, v2054.val[0]);
        v1070 = (float64x2_t *)sub_20F762098(v399 + 2279, v1060, (int)v1061 + 2, 3u);
        v1071.f64[0] = v1070[1].f64[0];
        v2055 = vld2q_f64(v1574.f64);
        _V4.D[1] = v1576.f64[1];
        v1073 = vmlaq_laneq_f64(vmulq_n_f64(v2055.val[0], v1565.f64[0]), v2055.val[1], v1565, 1);
        v2055.val[0] = vmulq_f64(v1576, v1565);
        v2055.val[1].f64[0] = v1565.f64[1];
        __asm { FMLA            D2, D3, V4.D[1] }
        *v1070 = vaddq_f64(*v1070, v1073);
        *(_QWORD *)&v1070[1].f64[0] = *(_OWORD *)&vaddq_f64(v1071, v2055.val[0]);
        v1074 = (float64x2_t *)sub_20F762098(v399 + 2279, v1060, (int)v1061 + 3, 3u);
        v1824 = vld2q_f64(v1574.f64);
        v1075.f64[0] = v1074[1].f64[0];
        _V4.D[1] = v1576.f64[1];
        v1077 = vmlaq_laneq_f64(vmulq_n_f64(v1824.val[0], v1566.f64[0]), v1824.val[1], v1566, 1);
        v1824.val[0] = vmulq_f64(v1576, v1566);
        v1824.val[1].f64[0] = v1566.f64[1];
        __asm { FMLA            D1, D2, V4.D[1] }
        *v1074 = vaddq_f64(*v1074, v1077);
        *(_QWORD *)&v1074[1].f64[0] = *(_OWORD *)&vaddq_f64(v1075, v1824.val[0]);
      }
    }
  }
  v1078 = *(unsigned int **)(a2 + 56);
  v1079 = *(unsigned int **)(a2 + 112);
  if (*((_BYTE *)v1078 + 20))
  {
    if (*((_BYTE *)v1079 + 20))
    {
      v1080 = *(_QWORD *)(*v21 + 8 * (v399[2236] + *v1078));
      v1081 = *(_QWORD *)(*v21 + 8 * (v399[2238] + *v1079));
      if (v1080 <= v1081)
      {
        for (nn = 0; nn != 8; nn += 2)
        {
          v1083 = (float64x2_t *)sub_20F762098(v399 + 2279, v1080, v1081, 6u);
          v2181 = vld2q_f64(v1533.f64);
          v2222 = vld2q_f64(v1535.f64);
          v1084 = v1567.f64[nn];
          v1085 = v1567.f64[nn + 1];
          v1086 = vaddq_f64(v1083[2], vmlaq_n_f64(vmulq_n_f64(v2222.val[0], v1084), v2222.val[1], v1085));
          v1087 = vaddq_f64(v1083[1], vmlaq_n_f64(vmulq_n_f64(v2181.val[0], v1084), v2181.val[1], v1085));
          *v1083 = vaddq_f64(*v1083, vmlaq_n_f64(vmulq_n_f64((float64x2_t)vzip1q_s64((int64x2_t)v1531, (int64x2_t)v1532), v1084), (float64x2_t)vzip2q_s64((int64x2_t)v1531, (int64x2_t)v1532), v1085));
          v1083[1] = v1087;
          v1083[2] = v1086;
          LODWORD(v1081) = v1081 + 1;
        }
        v1079 = *(unsigned int **)(a2 + 112);
        v399 = v1530;
      }
    }
  }
  v1088 = *(unsigned int **)(a2 + 64);
  if (*((_BYTE *)v1088 + 20))
  {
    if (*((_BYTE *)v1079 + 20))
    {
      v1089 = *(_QWORD *)(*v21 + 8 * (v399[2236] + *v1088));
      v1090 = *(_QWORD *)(*v21 + 8 * (v399[2238] + *v1079));
      if (v1089 <= v1090)
      {
        v1091 = 0;
        v1092 = &v1567.f64[1];
        do
        {
          v1093 = (float64x2_t *)sub_20F762098(v399 + 2279, v1089, (int)v1090 + (int)v1091, 6u);
          v1748 = vld2q_f64(v1537.f64);
          v2056 = vld2q_f64(v1539.f64);
          v2210 = vld2q_f64(v1541.f64);
          v1094 = *(v1092 - 1);
          v1095 = vmlaq_n_f64(vmulq_n_f64(v1748.val[0], v1094), v1748.val[1], *v1092);
          v1748.val[1] = vaddq_f64(v1093[2], vmlaq_n_f64(vmulq_n_f64(v2210.val[0], v1094), v2210.val[1], *v1092));
          v1748.val[0] = vaddq_f64(v1093[1], vmlaq_n_f64(vmulq_n_f64(v2056.val[0], v1094), v2056.val[1], *v1092));
          *v1093 = vaddq_f64(*v1093, v1095);
          *(float64x2x2_t *)v1093[1].f64 = v1748;
          ++v1091;
          v1092 += 2;
        }
        while (v1091 != 4);
        v1079 = *(unsigned int **)(a2 + 112);
        v399 = v1530;
      }
    }
  }
  v1096 = *(unsigned int **)(a2 + 72);
  if (*((_BYTE *)v1096 + 20))
  {
    if (*((_BYTE *)v1079 + 20))
    {
      v1097 = *(_QWORD *)(*v21 + 8 * (v399[2233] + *v1096));
      v1098 = *(_QWORD *)(*v21 + 8 * (v399[2238] + *v1079));
      if (v1097 <= v1098)
      {
        v1099 = 0;
        v1100 = &v1567.f64[1];
        do
        {
          v1101 = (float64x2_t *)sub_20F762098(v399 + 2279, v1097, (int)v1098 + (int)v1099, 6u);
          v1749 = vld2q_f64(v1543.f64);
          v2057 = vld2q_f64(v1545.f64);
          v2211 = vld2q_f64(v1547.f64);
          v1102 = *(v1100 - 1);
          v1103 = vmlaq_n_f64(vmulq_n_f64(v1749.val[0], v1102), v1749.val[1], *v1100);
          v1749.val[1] = vaddq_f64(v1101[2], vmlaq_n_f64(vmulq_n_f64(v2211.val[0], v1102), v2211.val[1], *v1100));
          v1749.val[0] = vaddq_f64(v1101[1], vmlaq_n_f64(vmulq_n_f64(v2057.val[0], v1102), v2057.val[1], *v1100));
          *v1101 = vaddq_f64(*v1101, v1103);
          *(float64x2x2_t *)v1101[1].f64 = v1749;
          ++v1099;
          v1100 += 2;
        }
        while (v1099 != 4);
        v1079 = *(unsigned int **)(a2 + 112);
        v399 = v1530;
      }
    }
  }
  v1104 = *(unsigned int **)(a2 + 80);
  if (*((_BYTE *)v1104 + 20))
  {
    if (*((_BYTE *)v1079 + 20))
    {
      v1105 = *(_QWORD *)(*v21 + 8 * (v399[2233] + *v1104));
      v1106 = *(_QWORD *)(*v21 + 8 * (v399[2238] + *v1079));
      if (v1105 <= v1106)
      {
        v1107 = 0;
        v1108 = &v1567.f64[1];
        do
        {
          v1109 = (float64x2_t *)sub_20F762098(v399 + 2279, v1105, (int)v1106 + (int)v1107, 6u);
          v1750 = vld2q_f64(v1549.f64);
          v2058 = vld2q_f64(v1551.f64);
          v2212 = vld2q_f64(v1553.f64);
          v1110 = *(v1108 - 1);
          v1111 = vmlaq_n_f64(vmulq_n_f64(v1750.val[0], v1110), v1750.val[1], *v1108);
          v1750.val[1] = vaddq_f64(v1109[2], vmlaq_n_f64(vmulq_n_f64(v2212.val[0], v1110), v2212.val[1], *v1108));
          v1750.val[0] = vaddq_f64(v1109[1], vmlaq_n_f64(vmulq_n_f64(v2058.val[0], v1110), v2058.val[1], *v1108));
          *v1109 = vaddq_f64(*v1109, v1111);
          *(float64x2x2_t *)v1109[1].f64 = v1750;
          ++v1107;
          v1108 += 2;
        }
        while (v1107 != 4);
        v1079 = *(unsigned int **)(a2 + 112);
        v399 = v1530;
      }
    }
  }
  v1112 = *(unsigned int **)(a2 + 88);
  if (*((_BYTE *)v1112 + 20))
  {
    if (*((_BYTE *)v1079 + 20))
    {
      v1113 = *(_QWORD *)(*v21 + 8 * (v399[2237] + *v1112));
      v1114 = *(_QWORD *)(*v21 + 8 * (v399[2238] + *v1079));
      if (v1113 <= v1114)
      {
        v1115 = (float64x2_t *)sub_20F762098(v399 + 2279, *(_QWORD *)(*v21 + 8 * (v399[2237] + *v1112)), v1114, 4u);
        v1751 = vld2q_f64(v1555.f64);
        v1116 = &v1557;
        v2059 = vld2q_f64(v1116->f64);
        v1117 = vmlaq_n_f64(vmulq_n_f64(v1751.val[0], v1567.f64[0]), v1751.val[1], v1567.f64[1]);
        v1751.val[0] = vaddq_f64(v1115[1], vmlaq_n_f64(vmulq_n_f64(v2059.val[0], v1567.f64[0]), v2059.val[1], v1567.f64[1]));
        *v1115 = vaddq_f64(*v1115, v1117);
        v1115[1] = v1751.val[0];
        v1118 = (float64x2_t *)sub_20F762098(v399 + 2279, v1113, (int)v1114 + 1, 4u);
        v1752 = vld2q_f64(v1555.f64);
        v2060 = vld2q_f64(v1557.f64);
        v1119 = vmlaq_n_f64(vmulq_n_f64(v1752.val[0], v1568.f64[0]), v1752.val[1], v1568.f64[1]);
        v1752.val[0] = vaddq_f64(v1118[1], vmlaq_n_f64(vmulq_n_f64(v2060.val[0], v1568.f64[0]), v2060.val[1], v1568.f64[1]));
        *v1118 = vaddq_f64(*v1118, v1119);
        v1118[1] = v1752.val[0];
        v1120 = (float64x2_t *)sub_20F762098(v399 + 2279, v1113, (int)v1114 + 2, 4u);
        v1753 = vld2q_f64(v1555.f64);
        v2061 = vld2q_f64(v1557.f64);
        v1121 = vmlaq_n_f64(vmulq_n_f64(v1753.val[0], v1569.f64[0]), v1753.val[1], v1569.f64[1]);
        v1753.val[0] = vaddq_f64(v1120[1], vmlaq_n_f64(vmulq_n_f64(v2061.val[0], v1569.f64[0]), v2061.val[1], v1569.f64[1]));
        *v1120 = vaddq_f64(*v1120, v1121);
        v1120[1] = v1753.val[0];
        v1122 = (float64x2_t *)sub_20F762098(v399 + 2279, v1113, (int)v1114 + 3, 4u);
        v1754 = vld2q_f64(v1555.f64);
        v2062 = vld2q_f64(v1557.f64);
        v1123 = vmlaq_n_f64(vmulq_n_f64(v1754.val[0], v1570.f64[0]), v1754.val[1], v1570.f64[1]);
        v1754.val[0] = vaddq_f64(v1122[1], vmlaq_n_f64(vmulq_n_f64(v2062.val[0], v1570.f64[0]), v2062.val[1], v1570.f64[1]));
        *v1122 = vaddq_f64(*v1122, v1123);
        v1122[1] = v1754.val[0];
        v1079 = *(unsigned int **)(a2 + 112);
      }
    }
  }
  v1124 = *(unsigned int **)(a2 + 96);
  if (*((_BYTE *)v1124 + 20))
  {
    if (*((_BYTE *)v1079 + 20))
    {
      v1125 = *(_QWORD *)(*v21 + 8 * (v399[2237] + *v1124));
      v1126 = *(_QWORD *)(*v21 + 8 * (v399[2238] + *v1079));
      if (v1125 <= v1126)
      {
        v1127 = (float64x2_t *)sub_20F762098(v399 + 2279, *(_QWORD *)(*v21 + 8 * (v399[2237] + *v1124)), v1126, 4u);
        v1755 = vld2q_f64(v1559.f64);
        v1128 = &v1561;
        v2063 = vld2q_f64(v1128->f64);
        v1129 = vmlaq_n_f64(vmulq_n_f64(v1755.val[0], v1567.f64[0]), v1755.val[1], v1567.f64[1]);
        v1755.val[0] = vaddq_f64(v1127[1], vmlaq_n_f64(vmulq_n_f64(v2063.val[0], v1567.f64[0]), v2063.val[1], v1567.f64[1]));
        *v1127 = vaddq_f64(*v1127, v1129);
        v1127[1] = v1755.val[0];
        v1130 = (float64x2_t *)sub_20F762098(v399 + 2279, v1125, (int)v1126 + 1, 4u);
        v1756 = vld2q_f64(v1559.f64);
        v2064 = vld2q_f64(v1561.f64);
        v1131 = vmlaq_n_f64(vmulq_n_f64(v1756.val[0], v1568.f64[0]), v1756.val[1], v1568.f64[1]);
        v1756.val[0] = vaddq_f64(v1130[1], vmlaq_n_f64(vmulq_n_f64(v2064.val[0], v1568.f64[0]), v2064.val[1], v1568.f64[1]));
        *v1130 = vaddq_f64(*v1130, v1131);
        v1130[1] = v1756.val[0];
        v1132 = (float64x2_t *)sub_20F762098(v399 + 2279, v1125, (int)v1126 + 2, 4u);
        v1757 = vld2q_f64(v1559.f64);
        v2065 = vld2q_f64(v1561.f64);
        v1133 = vmlaq_n_f64(vmulq_n_f64(v1757.val[0], v1569.f64[0]), v1757.val[1], v1569.f64[1]);
        v1757.val[0] = vaddq_f64(v1132[1], vmlaq_n_f64(vmulq_n_f64(v2065.val[0], v1569.f64[0]), v2065.val[1], v1569.f64[1]));
        *v1132 = vaddq_f64(*v1132, v1133);
        v1132[1] = v1757.val[0];
        v1134 = (float64x2_t *)sub_20F762098(v399 + 2279, v1125, (int)v1126 + 3, 4u);
        v1758 = vld2q_f64(v1559.f64);
        v2066 = vld2q_f64(v1561.f64);
        v1135 = vmlaq_n_f64(vmulq_n_f64(v1758.val[0], v1570.f64[0]), v1758.val[1], v1570.f64[1]);
        v1758.val[0] = vaddq_f64(v1134[1], vmlaq_n_f64(vmulq_n_f64(v2066.val[0], v1570.f64[0]), v2066.val[1], v1570.f64[1]));
        *v1134 = vaddq_f64(*v1134, v1135);
        v1134[1] = v1758.val[0];
        v1079 = *(unsigned int **)(a2 + 112);
      }
    }
  }
  v1136 = *(unsigned int **)(a2 + 104);
  if (*((_BYTE *)v1136 + 20))
  {
    if (*((_BYTE *)v1079 + 20))
    {
      v1137 = v399[2238];
      v1138 = *(_QWORD *)(*v21 + 8 * (v1137 + *v1136));
      v1139 = *(_QWORD *)(*v21 + 8 * (v1137 + *v1079));
      if (v1138 <= v1139)
      {
        v1140 = (float64x2_t *)sub_20F762098(v399 + 2279, *(_QWORD *)(*v21 + 8 * (v1137 + *v1136)), v1139, 4u);
        v1759 = vld2q_f64(v1563.f64);
        v1141 = &v1565;
        v2067 = vld2q_f64(v1141->f64);
        v1142 = vmlaq_n_f64(vmulq_n_f64(v1759.val[0], v1567.f64[0]), v1759.val[1], v1567.f64[1]);
        v1759.val[0] = vaddq_f64(v1140[1], vmlaq_n_f64(vmulq_n_f64(v2067.val[0], v1567.f64[0]), v2067.val[1], v1567.f64[1]));
        *v1140 = vaddq_f64(*v1140, v1142);
        v1140[1] = v1759.val[0];
        v1143 = (float64x2_t *)sub_20F762098(v399 + 2279, v1138, (int)v1139 + 1, 4u);
        v1760 = vld2q_f64(v1563.f64);
        v2068 = vld2q_f64(v1565.f64);
        v1144 = vmlaq_n_f64(vmulq_n_f64(v1760.val[0], v1568.f64[0]), v1760.val[1], v1568.f64[1]);
        v1760.val[0] = vaddq_f64(v1143[1], vmlaq_n_f64(vmulq_n_f64(v2068.val[0], v1568.f64[0]), v2068.val[1], v1568.f64[1]));
        *v1143 = vaddq_f64(*v1143, v1144);
        v1143[1] = v1760.val[0];
        v1145 = (float64x2_t *)sub_20F762098(v399 + 2279, v1138, (int)v1139 + 2, 4u);
        v1761 = vld2q_f64(v1563.f64);
        v2069 = vld2q_f64(v1565.f64);
        v1146 = vmlaq_n_f64(vmulq_n_f64(v1761.val[0], v1569.f64[0]), v1761.val[1], v1569.f64[1]);
        v1761.val[0] = vaddq_f64(v1145[1], vmlaq_n_f64(vmulq_n_f64(v2069.val[0], v1569.f64[0]), v2069.val[1], v1569.f64[1]));
        *v1145 = vaddq_f64(*v1145, v1146);
        v1145[1] = v1761.val[0];
        v1147 = (float64x2_t *)sub_20F762098(v399 + 2279, v1138, (int)v1139 + 3, 4u);
        v1762 = vld2q_f64(v1563.f64);
        v2070 = vld2q_f64(v1565.f64);
        v1148 = vmlaq_n_f64(vmulq_n_f64(v1762.val[0], v1570.f64[0]), v1762.val[1], v1570.f64[1]);
        v1762.val[0] = vaddq_f64(v1147[1], vmlaq_n_f64(vmulq_n_f64(v2070.val[0], v1570.f64[0]), v2070.val[1], v1570.f64[1]));
        *v1147 = vaddq_f64(*v1147, v1148);
        v1147[1] = v1762.val[0];
        v1079 = *(unsigned int **)(a2 + 112);
      }
    }
  }
  if (*((_BYTE *)v1079 + 20))
  {
    v1149 = *(_QWORD *)(*v21 + 8 * (v399[2238] + *v1079));
    v1150 = (float64x2_t *)sub_20F762098(v399 + 2279, v1149, v1149, 4u);
    v1763 = vld2q_f64(v1567.f64);
    v2071 = vld2q_f64(v1569.f64);
    v1151 = vmlaq_n_f64(vmulq_n_f64(v1763.val[0], v1567.f64[0]), v1763.val[1], v1567.f64[1]);
    v1763.val[0] = vaddq_f64(v1150[1], vmlaq_n_f64(vmulq_n_f64(v2071.val[0], v1567.f64[0]), v2071.val[1], v1567.f64[1]));
    *v1150 = vaddq_f64(*v1150, v1151);
    v1150[1] = v1763.val[0];
    v1152 = (float64x2_t *)sub_20F762098(v399 + 2279, v1149, (int)v1149 + 1, 4u);
    v1764 = vld2q_f64(v1567.f64);
    v2072 = vld2q_f64(v1569.f64);
    v1153 = vmlaq_n_f64(vmulq_n_f64(v1764.val[0], v1568.f64[0]), v1764.val[1], v1568.f64[1]);
    v1764.val[0] = vaddq_f64(v1152[1], vmlaq_n_f64(vmulq_n_f64(v2072.val[0], v1568.f64[0]), v2072.val[1], v1568.f64[1]));
    *v1152 = vaddq_f64(*v1152, v1153);
    v1152[1] = v1764.val[0];
    v1154 = (float64x2_t *)sub_20F762098(v399 + 2279, v1149, (int)v1149 + 2, 4u);
    v1765 = vld2q_f64(v1567.f64);
    v2073 = vld2q_f64(v1569.f64);
    v1155 = vmlaq_n_f64(vmulq_n_f64(v1765.val[0], v1569.f64[0]), v1765.val[1], v1569.f64[1]);
    v1765.val[0] = vaddq_f64(v1154[1], vmlaq_n_f64(vmulq_n_f64(v2073.val[0], v1569.f64[0]), v2073.val[1], v1569.f64[1]));
    *v1154 = vaddq_f64(*v1154, v1155);
    v1154[1] = v1765.val[0];
    v1156 = (float64x2_t *)sub_20F762098(v399 + 2279, v1149, (int)v1149 + 3, 4u);
    v2074 = vld2q_f64(v1567.f64);
    v2154 = vld2q_f64(v1569.f64);
    v1157 = vaddq_f64(v1156[1], vmlaq_n_f64(vmulq_n_f64(v2154.val[0], v1570.f64[0]), v2154.val[1], v1570.f64[1]));
    *v1156 = vaddq_f64(*v1156, vmlaq_n_f64(vmulq_n_f64(v2074.val[0], v1570.f64[0]), v2074.val[1], v1570.f64[1]));
    v1156[1] = v1157;
    v1766 = vld2q_f64(v1567.f64);
    v2075 = vld2q_f64(v1569.f64);
    v1158 = (float64x2_t *)(v399[2270] + 8 * v1149);
    v1159 = vmlaq_laneq_f64(vmulq_n_f64(v1766.val[0], v1527->f64[0]), v1766.val[1], *v1527, 1);
    v1766.val[0] = vsubq_f64(v1158[1], vmlaq_laneq_f64(vmulq_n_f64(v2075.val[0], v1527->f64[0]), v2075.val[1], *v1527, 1));
    *v1158 = vsubq_f64(*v1158, v1159);
    v1158[1] = v1766.val[0];
  }
  v1160 = *(unsigned int **)(a2 + 120);
  if (*((_BYTE *)v1160 + 20))
  {
    v1161 = *(unsigned int **)(a2 + 112);
    if (*((_BYTE *)v1161 + 20))
    {
      v1162 = *(_QWORD *)(*v21 + 8 * (v399[2239] + *v1160));
      v1163 = *(_QWORD *)(*v21 + 8 * (v399[2238] + *v1161));
      if (v1162 <= v1163)
      {
        v1164 = (float64x2_t *)sub_20F762098(v399 + 2279, *(_QWORD *)(*v21 + 8 * (v399[2239] + *v1160)), v1163, 3u);
        v1165.f64[0] = v1164[1].f64[0];
        v2076 = vld2q_f64(v1571.f64);
        _V4.D[1] = v1573.f64[1];
        v1167 = vmlaq_laneq_f64(vmulq_n_f64(v2076.val[0], v1567.f64[0]), v2076.val[1], v1567, 1);
        v2076.val[0] = vmulq_f64(v1573, v1567);
        v2076.val[1].f64[0] = v1567.f64[1];
        __asm { FMLA            D2, D3, V4.D[1] }
        *v1164 = vaddq_f64(*v1164, v1167);
        *(_QWORD *)&v1164[1].f64[0] = *(_OWORD *)&vaddq_f64(v1165, v2076.val[0]);
        v1168 = (float64x2_t *)sub_20F762098(v399 + 2279, v1162, (int)v1163 + 1, 3u);
        v1169.f64[0] = v1168[1].f64[0];
        v2077 = vld2q_f64(v1571.f64);
        _V4.D[1] = v1573.f64[1];
        v1171 = vmlaq_laneq_f64(vmulq_n_f64(v2077.val[0], v1568.f64[0]), v2077.val[1], v1568, 1);
        v2077.val[0] = vmulq_f64(v1573, v1568);
        v2077.val[1].f64[0] = v1568.f64[1];
        __asm { FMLA            D2, D3, V4.D[1] }
        *v1168 = vaddq_f64(*v1168, v1171);
        *(_QWORD *)&v1168[1].f64[0] = *(_OWORD *)&vaddq_f64(v1169, v2077.val[0]);
        v1172 = (float64x2_t *)sub_20F762098(v399 + 2279, v1162, (int)v1163 + 2, 3u);
        v1173.f64[0] = v1172[1].f64[0];
        v2078 = vld2q_f64(v1571.f64);
        _V4.D[1] = v1573.f64[1];
        v1175 = vmlaq_laneq_f64(vmulq_n_f64(v2078.val[0], v1569.f64[0]), v2078.val[1], v1569, 1);
        v2078.val[0] = vmulq_f64(v1573, v1569);
        v2078.val[1].f64[0] = v1569.f64[1];
        __asm { FMLA            D2, D3, V4.D[1] }
        *v1172 = vaddq_f64(*v1172, v1175);
        *(_QWORD *)&v1172[1].f64[0] = *(_OWORD *)&vaddq_f64(v1173, v2078.val[0]);
        v1176 = (float64x2_t *)sub_20F762098(v399 + 2279, v1162, (int)v1163 + 3, 3u);
        v1825 = vld2q_f64(v1571.f64);
        v1177.f64[0] = v1176[1].f64[0];
        _V4.D[1] = v1573.f64[1];
        v1179 = vmlaq_laneq_f64(vmulq_n_f64(v1825.val[0], v1570.f64[0]), v1825.val[1], v1570, 1);
        v1825.val[0] = vmulq_f64(v1573, v1570);
        v1825.val[1].f64[0] = v1570.f64[1];
        __asm { FMLA            D1, D2, V4.D[1] }
        *v1176 = vaddq_f64(*v1176, v1179);
        *(_QWORD *)&v1176[1].f64[0] = *(_OWORD *)&vaddq_f64(v1177, v1825.val[0]);
      }
    }
  }
  v1180 = *(unsigned int **)(a2 + 128);
  if (*((_BYTE *)v1180 + 20))
  {
    v1181 = *(unsigned int **)(a2 + 112);
    if (*((_BYTE *)v1181 + 20))
    {
      v1182 = *(_QWORD *)(*v21 + 8 * (v399[2239] + *v1180));
      v1183 = *(_QWORD *)(*v21 + 8 * (v399[2238] + *v1181));
      if (v1182 <= v1183)
      {
        v1184 = (float64x2_t *)sub_20F762098(v399 + 2279, *(_QWORD *)(*v21 + 8 * (v399[2239] + *v1180)), v1183, 3u);
        v1185.f64[0] = v1184[1].f64[0];
        v2079 = vld2q_f64(v1574.f64);
        _V4.D[1] = v1576.f64[1];
        v1187 = vmlaq_laneq_f64(vmulq_n_f64(v2079.val[0], v1567.f64[0]), v2079.val[1], v1567, 1);
        v2079.val[0] = vmulq_f64(v1576, v1567);
        v2079.val[1].f64[0] = v1567.f64[1];
        __asm { FMLA            D2, D3, V4.D[1] }
        *v1184 = vaddq_f64(*v1184, v1187);
        *(_QWORD *)&v1184[1].f64[0] = *(_OWORD *)&vaddq_f64(v1185, v2079.val[0]);
        v1188 = (float64x2_t *)sub_20F762098(v399 + 2279, v1182, (int)v1183 + 1, 3u);
        v1189.f64[0] = v1188[1].f64[0];
        v2080 = vld2q_f64(v1574.f64);
        _V4.D[1] = v1576.f64[1];
        v1191 = vmlaq_laneq_f64(vmulq_n_f64(v2080.val[0], v1568.f64[0]), v2080.val[1], v1568, 1);
        v2080.val[0] = vmulq_f64(v1576, v1568);
        v2080.val[1].f64[0] = v1568.f64[1];
        __asm { FMLA            D2, D3, V4.D[1] }
        *v1188 = vaddq_f64(*v1188, v1191);
        *(_QWORD *)&v1188[1].f64[0] = *(_OWORD *)&vaddq_f64(v1189, v2080.val[0]);
        v1192 = (float64x2_t *)sub_20F762098(v399 + 2279, v1182, (int)v1183 + 2, 3u);
        v1193.f64[0] = v1192[1].f64[0];
        v2081 = vld2q_f64(v1574.f64);
        _V4.D[1] = v1576.f64[1];
        v1195 = vmlaq_laneq_f64(vmulq_n_f64(v2081.val[0], v1569.f64[0]), v2081.val[1], v1569, 1);
        v2081.val[0] = vmulq_f64(v1576, v1569);
        v2081.val[1].f64[0] = v1569.f64[1];
        __asm { FMLA            D2, D3, V4.D[1] }
        *v1192 = vaddq_f64(*v1192, v1195);
        *(_QWORD *)&v1192[1].f64[0] = *(_OWORD *)&vaddq_f64(v1193, v2081.val[0]);
        v1196 = (float64x2_t *)sub_20F762098(v399 + 2279, v1182, (int)v1183 + 3, 3u);
        v1826 = vld2q_f64(v1574.f64);
        v1197.f64[0] = v1196[1].f64[0];
        _V4.D[1] = v1576.f64[1];
        v1199 = vmlaq_laneq_f64(vmulq_n_f64(v1826.val[0], v1570.f64[0]), v1826.val[1], v1570, 1);
        v1826.val[0] = vmulq_f64(v1576, v1570);
        v1826.val[1].f64[0] = v1570.f64[1];
        __asm { FMLA            D1, D2, V4.D[1] }
        *v1196 = vaddq_f64(*v1196, v1199);
        *(_QWORD *)&v1196[1].f64[0] = *(_OWORD *)&vaddq_f64(v1197, v1826.val[0]);
      }
    }
  }
  v1200 = *(unsigned int **)(a2 + 56);
  v1201 = *(unsigned int **)(a2 + 120);
  if (*((_BYTE *)v1200 + 20))
  {
    if (*((_BYTE *)v1201 + 20))
    {
      v1202 = *(_QWORD *)(*v21 + 8 * (v399[2236] + *v1200));
      v1203 = *(_QWORD *)(*v21 + 8 * (v399[2239] + *v1201));
      if (v1202 <= v1203)
      {
        v1204 = (float64x2_t *)sub_20F762098(v399 + 2279, *(_QWORD *)(*v21 + 8 * (v399[2236] + *v1200)), v1203, 6u);
        v1205 = &v1533;
        v2140 = vld2q_f64(v1205->f64);
        v1206 = &v1535;
        v2182 = vld2q_f64(v1206->f64);
        v1207 = vaddq_f64(v1204[2], vmlaq_n_f64(vmulq_n_f64(v2182.val[0], v1571.f64[0]), v2182.val[1], v1571.f64[1]));
        v1208 = vaddq_f64(v1204[1], vmlaq_n_f64(vmulq_n_f64(v2140.val[0], v1571.f64[0]), v2140.val[1], v1571.f64[1]));
        *v1204 = vaddq_f64(*v1204, vmlaq_n_f64(vmulq_n_f64((float64x2_t)vzip1q_s64((int64x2_t)v1531, (int64x2_t)v1532), v1571.f64[0]), (float64x2_t)vzip2q_s64((int64x2_t)v1531, (int64x2_t)v1532), v1571.f64[1]));
        v1204[1] = v1208;
        v1204[2] = v1207;
        v1209 = (float64x2_t *)sub_20F762098(v399 + 2279, v1202, (int)v1203 + 1, 6u);
        v2082 = vld2q_f64(v1533.f64);
        v2183 = vld2q_f64(v1535.f64);
        v1210 = vmlaq_n_f64(vmulq_n_f64(v2082.val[0], v1572.f64[0]), v2082.val[1], v1572.f64[1]);
        v2082.val[0] = vaddq_f64(v1209[2], vmlaq_n_f64(vmulq_n_f64(v2183.val[0], v1572.f64[0]), v2183.val[1], v1572.f64[1]));
        v1211 = vaddq_f64(v1209[1], v1210);
        *v1209 = vaddq_f64(*v1209, vmlaq_n_f64(vmulq_n_f64((float64x2_t)vzip1q_s64((int64x2_t)v1531, (int64x2_t)v1532), v1572.f64[0]), (float64x2_t)vzip2q_s64((int64x2_t)v1531, (int64x2_t)v1532), v1572.f64[1]));
        v1209[1] = v1211;
        v1209[2] = v2082.val[0];
        v1212 = (float64x2_t *)sub_20F762098(v399 + 2279, v1202, (int)v1203 + 2, 6u);
        v2083 = vld2q_f64(v1533.f64);
        v2184 = vld2q_f64(v1535.f64);
        v1213 = vmlaq_n_f64(vmulq_n_f64(v2083.val[0], v1573.f64[0]), v2083.val[1], v1573.f64[1]);
        v2083.val[0] = vaddq_f64(v1212[2], vmlaq_n_f64(vmulq_n_f64(v2184.val[0], v1573.f64[0]), v2184.val[1], v1573.f64[1]));
        v1214 = vaddq_f64(v1212[1], v1213);
        *v1212 = vaddq_f64(*v1212, vmlaq_n_f64(vmulq_n_f64((float64x2_t)vzip1q_s64((int64x2_t)v1531, (int64x2_t)v1532), v1573.f64[0]), (float64x2_t)vzip2q_s64((int64x2_t)v1531, (int64x2_t)v1532), v1573.f64[1]));
        v1212[1] = v1214;
        v1212[2] = v2083.val[0];
        v1201 = *(unsigned int **)(a2 + 120);
      }
    }
  }
  v1215 = *(unsigned int **)(a2 + 64);
  if (*((_BYTE *)v1215 + 20))
  {
    if (*((_BYTE *)v1201 + 20))
    {
      v1216 = *(_QWORD *)(*v21 + 8 * (v399[2236] + *v1215));
      v1217 = *(_QWORD *)(*v21 + 8 * (v399[2239] + *v1201));
      if (v1216 <= v1217)
      {
        v1218 = (float64x2_t *)sub_20F762098(v399 + 2279, *(_QWORD *)(*v21 + 8 * (v399[2236] + *v1215)), v1217, 6u);
        v1767 = vld2q_f64(v1537.f64);
        v1219 = &v1539;
        v2084 = vld2q_f64(v1219->f64);
        v1220 = &v1541;
        v2155 = vld2q_f64(v1220->f64);
        v1221 = vmlaq_n_f64(vmulq_n_f64(v1767.val[0], v1571.f64[0]), v1767.val[1], v1571.f64[1]);
        v1767.val[1] = vaddq_f64(v1218[2], vmlaq_n_f64(vmulq_n_f64(v2155.val[0], v1571.f64[0]), v2155.val[1], v1571.f64[1]));
        v1767.val[0] = vaddq_f64(v1218[1], vmlaq_n_f64(vmulq_n_f64(v2084.val[0], v1571.f64[0]), v2084.val[1], v1571.f64[1]));
        *v1218 = vaddq_f64(*v1218, v1221);
        *(float64x2x2_t *)v1218[1].f64 = v1767;
        v1222 = (float64x2_t *)sub_20F762098(v399 + 2279, v1216, (int)v1217 + 1, 6u);
        v1768 = vld2q_f64(v1537.f64);
        v2085 = vld2q_f64(v1539.f64);
        v2156 = vld2q_f64(v1541.f64);
        v1223 = vmlaq_n_f64(vmulq_n_f64(v1768.val[0], v1572.f64[0]), v1768.val[1], v1572.f64[1]);
        v1768.val[1] = vaddq_f64(v1222[2], vmlaq_n_f64(vmulq_n_f64(v2156.val[0], v1572.f64[0]), v2156.val[1], v1572.f64[1]));
        v1768.val[0] = vaddq_f64(v1222[1], vmlaq_n_f64(vmulq_n_f64(v2085.val[0], v1572.f64[0]), v2085.val[1], v1572.f64[1]));
        *v1222 = vaddq_f64(*v1222, v1223);
        *(float64x2x2_t *)v1222[1].f64 = v1768;
        v1224 = (float64x2_t *)sub_20F762098(v399 + 2279, v1216, (int)v1217 + 2, 6u);
        v1769 = vld2q_f64(v1537.f64);
        v2086 = vld2q_f64(v1539.f64);
        v2157 = vld2q_f64(v1541.f64);
        v1225 = vmlaq_n_f64(vmulq_n_f64(v1769.val[0], v1573.f64[0]), v1769.val[1], v1573.f64[1]);
        v1769.val[1] = vaddq_f64(v1224[2], vmlaq_n_f64(vmulq_n_f64(v2157.val[0], v1573.f64[0]), v2157.val[1], v1573.f64[1]));
        v1769.val[0] = vaddq_f64(v1224[1], vmlaq_n_f64(vmulq_n_f64(v2086.val[0], v1573.f64[0]), v2086.val[1], v1573.f64[1]));
        *v1224 = vaddq_f64(*v1224, v1225);
        *(float64x2x2_t *)v1224[1].f64 = v1769;
        v1201 = *(unsigned int **)(a2 + 120);
      }
    }
  }
  v1226 = *(unsigned int **)(a2 + 72);
  if (*((_BYTE *)v1226 + 20))
  {
    if (*((_BYTE *)v1201 + 20))
    {
      v1227 = *(_QWORD *)(*v21 + 8 * (v399[2233] + *v1226));
      v1228 = *(_QWORD *)(*v21 + 8 * (v399[2239] + *v1201));
      if (v1227 <= v1228)
      {
        v1229 = (float64x2_t *)sub_20F762098(v399 + 2279, *(_QWORD *)(*v21 + 8 * (v399[2233] + *v1226)), v1228, 6u);
        v1770 = vld2q_f64(v1543.f64);
        v1230 = &v1545;
        v2087 = vld2q_f64(v1230->f64);
        v1231 = &v1547;
        v2158 = vld2q_f64(v1231->f64);
        v1232 = vmlaq_n_f64(vmulq_n_f64(v1770.val[0], v1571.f64[0]), v1770.val[1], v1571.f64[1]);
        v1770.val[1] = vaddq_f64(v1229[2], vmlaq_n_f64(vmulq_n_f64(v2158.val[0], v1571.f64[0]), v2158.val[1], v1571.f64[1]));
        v1770.val[0] = vaddq_f64(v1229[1], vmlaq_n_f64(vmulq_n_f64(v2087.val[0], v1571.f64[0]), v2087.val[1], v1571.f64[1]));
        *v1229 = vaddq_f64(*v1229, v1232);
        *(float64x2x2_t *)v1229[1].f64 = v1770;
        v1233 = (float64x2_t *)sub_20F762098(v399 + 2279, v1227, (int)v1228 + 1, 6u);
        v1771 = vld2q_f64(v1543.f64);
        v2088 = vld2q_f64(v1545.f64);
        v2159 = vld2q_f64(v1547.f64);
        v1234 = vmlaq_n_f64(vmulq_n_f64(v1771.val[0], v1572.f64[0]), v1771.val[1], v1572.f64[1]);
        v1771.val[1] = vaddq_f64(v1233[2], vmlaq_n_f64(vmulq_n_f64(v2159.val[0], v1572.f64[0]), v2159.val[1], v1572.f64[1]));
        v1771.val[0] = vaddq_f64(v1233[1], vmlaq_n_f64(vmulq_n_f64(v2088.val[0], v1572.f64[0]), v2088.val[1], v1572.f64[1]));
        *v1233 = vaddq_f64(*v1233, v1234);
        *(float64x2x2_t *)v1233[1].f64 = v1771;
        v1235 = (float64x2_t *)sub_20F762098(v399 + 2279, v1227, (int)v1228 + 2, 6u);
        v1772 = vld2q_f64(v1543.f64);
        v2089 = vld2q_f64(v1545.f64);
        v2160 = vld2q_f64(v1547.f64);
        v1236 = vmlaq_n_f64(vmulq_n_f64(v1772.val[0], v1573.f64[0]), v1772.val[1], v1573.f64[1]);
        v1772.val[1] = vaddq_f64(v1235[2], vmlaq_n_f64(vmulq_n_f64(v2160.val[0], v1573.f64[0]), v2160.val[1], v1573.f64[1]));
        v1772.val[0] = vaddq_f64(v1235[1], vmlaq_n_f64(vmulq_n_f64(v2089.val[0], v1573.f64[0]), v2089.val[1], v1573.f64[1]));
        *v1235 = vaddq_f64(*v1235, v1236);
        *(float64x2x2_t *)v1235[1].f64 = v1772;
        v1201 = *(unsigned int **)(a2 + 120);
      }
    }
  }
  v1237 = *(unsigned int **)(a2 + 80);
  if (*((_BYTE *)v1237 + 20))
  {
    if (*((_BYTE *)v1201 + 20))
    {
      v1238 = *(_QWORD *)(*v21 + 8 * (v399[2233] + *v1237));
      v1239 = *(_QWORD *)(*v21 + 8 * (v399[2239] + *v1201));
      if (v1238 <= v1239)
      {
        v1240 = (float64x2_t *)sub_20F762098(v399 + 2279, *(_QWORD *)(*v21 + 8 * (v399[2233] + *v1237)), v1239, 6u);
        v1773 = vld2q_f64(v1549.f64);
        v1241 = &v1551;
        v2090 = vld2q_f64(v1241->f64);
        v1242 = &v1553;
        v2161 = vld2q_f64(v1242->f64);
        v1243 = vmlaq_n_f64(vmulq_n_f64(v1773.val[0], v1571.f64[0]), v1773.val[1], v1571.f64[1]);
        v1773.val[1] = vaddq_f64(v1240[2], vmlaq_n_f64(vmulq_n_f64(v2161.val[0], v1571.f64[0]), v2161.val[1], v1571.f64[1]));
        v1773.val[0] = vaddq_f64(v1240[1], vmlaq_n_f64(vmulq_n_f64(v2090.val[0], v1571.f64[0]), v2090.val[1], v1571.f64[1]));
        *v1240 = vaddq_f64(*v1240, v1243);
        *(float64x2x2_t *)v1240[1].f64 = v1773;
        v1244 = (float64x2_t *)sub_20F762098(v399 + 2279, v1238, (int)v1239 + 1, 6u);
        v1774 = vld2q_f64(v1549.f64);
        v2091 = vld2q_f64(v1551.f64);
        v2162 = vld2q_f64(v1553.f64);
        v1245 = vmlaq_n_f64(vmulq_n_f64(v1774.val[0], v1572.f64[0]), v1774.val[1], v1572.f64[1]);
        v1774.val[1] = vaddq_f64(v1244[2], vmlaq_n_f64(vmulq_n_f64(v2162.val[0], v1572.f64[0]), v2162.val[1], v1572.f64[1]));
        v1774.val[0] = vaddq_f64(v1244[1], vmlaq_n_f64(vmulq_n_f64(v2091.val[0], v1572.f64[0]), v2091.val[1], v1572.f64[1]));
        *v1244 = vaddq_f64(*v1244, v1245);
        *(float64x2x2_t *)v1244[1].f64 = v1774;
        v1246 = (float64x2_t *)sub_20F762098(v399 + 2279, v1238, (int)v1239 + 2, 6u);
        v1775 = vld2q_f64(v1549.f64);
        v2092 = vld2q_f64(v1551.f64);
        v2163 = vld2q_f64(v1553.f64);
        v1247 = vmlaq_n_f64(vmulq_n_f64(v1775.val[0], v1573.f64[0]), v1775.val[1], v1573.f64[1]);
        v1775.val[1] = vaddq_f64(v1246[2], vmlaq_n_f64(vmulq_n_f64(v2163.val[0], v1573.f64[0]), v2163.val[1], v1573.f64[1]));
        v1775.val[0] = vaddq_f64(v1246[1], vmlaq_n_f64(vmulq_n_f64(v2092.val[0], v1573.f64[0]), v2092.val[1], v1573.f64[1]));
        *v1246 = vaddq_f64(*v1246, v1247);
        *(float64x2x2_t *)v1246[1].f64 = v1775;
        v1201 = *(unsigned int **)(a2 + 120);
      }
    }
  }
  v1248 = *(unsigned int **)(a2 + 88);
  if (*((_BYTE *)v1248 + 20))
  {
    if (*((_BYTE *)v1201 + 20))
    {
      v1249 = *(_QWORD *)(*v21 + 8 * (v399[2237] + *v1248));
      v1250 = *(_QWORD *)(*v21 + 8 * (v399[2239] + *v1201));
      if (v1249 <= v1250)
      {
        v1251 = (float64x2_t *)sub_20F762098(v399 + 2279, *(_QWORD *)(*v21 + 8 * (v399[2237] + *v1248)), v1250, 4u);
        v1776 = vld2q_f64(v1555.f64);
        v1252 = &v1557;
        v2093 = vld2q_f64(v1252->f64);
        v1253 = vmlaq_laneq_f64(vmulq_n_f64(v1776.val[0], v1571.f64[0]), v1776.val[1], v1571, 1);
        v1776.val[0] = vaddq_f64(v1251[1], vmlaq_laneq_f64(vmulq_n_f64(v2093.val[0], v1571.f64[0]), v2093.val[1], v1571, 1));
        *v1251 = vaddq_f64(*v1251, v1253);
        v1251[1] = v1776.val[0];
        v1254 = (float64x2_t *)sub_20F762098(v399 + 2279, v1249, (int)v1250 + 1, 4u);
        v1777 = vld2q_f64(v1555.f64);
        v2094 = vld2q_f64(v1557.f64);
        v1255 = vmlaq_laneq_f64(vmulq_n_f64(v1777.val[0], v1572.f64[0]), v1777.val[1], v1572, 1);
        v1777.val[0] = vaddq_f64(v1254[1], vmlaq_laneq_f64(vmulq_n_f64(v2094.val[0], v1572.f64[0]), v2094.val[1], v1572, 1));
        *v1254 = vaddq_f64(*v1254, v1255);
        v1254[1] = v1777.val[0];
        v1256 = (float64x2_t *)sub_20F762098(v399 + 2279, v1249, (int)v1250 + 2, 4u);
        v1778 = vld2q_f64(v1555.f64);
        v2095 = vld2q_f64(v1557.f64);
        v1257 = vmlaq_laneq_f64(vmulq_n_f64(v1778.val[0], v1573.f64[0]), v1778.val[1], v1573, 1);
        v1778.val[0] = vaddq_f64(v1256[1], vmlaq_laneq_f64(vmulq_n_f64(v2095.val[0], v1573.f64[0]), v2095.val[1], v1573, 1));
        *v1256 = vaddq_f64(*v1256, v1257);
        v1256[1] = v1778.val[0];
        v1201 = *(unsigned int **)(a2 + 120);
      }
    }
  }
  v1258 = *(unsigned int **)(a2 + 96);
  if (*((_BYTE *)v1258 + 20))
  {
    if (*((_BYTE *)v1201 + 20))
    {
      v1259 = *(_QWORD *)(*v21 + 8 * (v399[2237] + *v1258));
      v1260 = *(_QWORD *)(*v21 + 8 * (v399[2239] + *v1201));
      if (v1259 <= v1260)
      {
        v1261 = (float64x2_t *)sub_20F762098(v399 + 2279, *(_QWORD *)(*v21 + 8 * (v399[2237] + *v1258)), v1260, 4u);
        v1779 = vld2q_f64(v1559.f64);
        v1262 = &v1561;
        v2096 = vld2q_f64(v1262->f64);
        v1263 = vmlaq_laneq_f64(vmulq_n_f64(v1779.val[0], v1571.f64[0]), v1779.val[1], v1571, 1);
        v1779.val[0] = vaddq_f64(v1261[1], vmlaq_laneq_f64(vmulq_n_f64(v2096.val[0], v1571.f64[0]), v2096.val[1], v1571, 1));
        *v1261 = vaddq_f64(*v1261, v1263);
        v1261[1] = v1779.val[0];
        v1264 = (float64x2_t *)sub_20F762098(v399 + 2279, v1259, (int)v1260 + 1, 4u);
        v1780 = vld2q_f64(v1559.f64);
        v2097 = vld2q_f64(v1561.f64);
        v1265 = vmlaq_laneq_f64(vmulq_n_f64(v1780.val[0], v1572.f64[0]), v1780.val[1], v1572, 1);
        v1780.val[0] = vaddq_f64(v1264[1], vmlaq_laneq_f64(vmulq_n_f64(v2097.val[0], v1572.f64[0]), v2097.val[1], v1572, 1));
        *v1264 = vaddq_f64(*v1264, v1265);
        v1264[1] = v1780.val[0];
        v1266 = (float64x2_t *)sub_20F762098(v399 + 2279, v1259, (int)v1260 + 2, 4u);
        v1781 = vld2q_f64(v1559.f64);
        v2098 = vld2q_f64(v1561.f64);
        v1267 = vmlaq_laneq_f64(vmulq_n_f64(v1781.val[0], v1573.f64[0]), v1781.val[1], v1573, 1);
        v1781.val[0] = vaddq_f64(v1266[1], vmlaq_laneq_f64(vmulq_n_f64(v2098.val[0], v1573.f64[0]), v2098.val[1], v1573, 1));
        *v1266 = vaddq_f64(*v1266, v1267);
        v1266[1] = v1781.val[0];
        v1201 = *(unsigned int **)(a2 + 120);
      }
    }
  }
  v1268 = *(unsigned int **)(a2 + 104);
  if (*((_BYTE *)v1268 + 20))
  {
    if (*((_BYTE *)v1201 + 20))
    {
      v1269 = *(_QWORD *)(*v21 + 8 * (v399[2238] + *v1268));
      v1270 = *(_QWORD *)(*v21 + 8 * (v399[2239] + *v1201));
      if (v1269 <= v1270)
      {
        v1271 = (float64x2_t *)sub_20F762098(v399 + 2279, *(_QWORD *)(*v21 + 8 * (v399[2238] + *v1268)), v1270, 4u);
        v1782 = vld2q_f64(v1563.f64);
        v1272 = &v1565;
        v2099 = vld2q_f64(v1272->f64);
        v1273 = vmlaq_laneq_f64(vmulq_n_f64(v1782.val[0], v1571.f64[0]), v1782.val[1], v1571, 1);
        v1782.val[0] = vaddq_f64(v1271[1], vmlaq_laneq_f64(vmulq_n_f64(v2099.val[0], v1571.f64[0]), v2099.val[1], v1571, 1));
        *v1271 = vaddq_f64(*v1271, v1273);
        v1271[1] = v1782.val[0];
        v1274 = (float64x2_t *)sub_20F762098(v399 + 2279, v1269, (int)v1270 + 1, 4u);
        v1783 = vld2q_f64(v1563.f64);
        v2100 = vld2q_f64(v1565.f64);
        v1275 = vmlaq_laneq_f64(vmulq_n_f64(v1783.val[0], v1572.f64[0]), v1783.val[1], v1572, 1);
        v1783.val[0] = vaddq_f64(v1274[1], vmlaq_laneq_f64(vmulq_n_f64(v2100.val[0], v1572.f64[0]), v2100.val[1], v1572, 1));
        *v1274 = vaddq_f64(*v1274, v1275);
        v1274[1] = v1783.val[0];
        v1276 = (float64x2_t *)sub_20F762098(v399 + 2279, v1269, (int)v1270 + 2, 4u);
        v1784 = vld2q_f64(v1563.f64);
        v2101 = vld2q_f64(v1565.f64);
        v1277 = vmlaq_laneq_f64(vmulq_n_f64(v1784.val[0], v1573.f64[0]), v1784.val[1], v1573, 1);
        v1784.val[0] = vaddq_f64(v1276[1], vmlaq_laneq_f64(vmulq_n_f64(v2101.val[0], v1573.f64[0]), v2101.val[1], v1573, 1));
        *v1276 = vaddq_f64(*v1276, v1277);
        v1276[1] = v1784.val[0];
        v1201 = *(unsigned int **)(a2 + 120);
      }
    }
  }
  v1278 = *(unsigned int **)(a2 + 112);
  if (*((_BYTE *)v1278 + 20))
  {
    if (*((_BYTE *)v1201 + 20))
    {
      v1279 = *(_QWORD *)(*v21 + 8 * (v399[2238] + *v1278));
      v1280 = *(_QWORD *)(*v21 + 8 * (v399[2239] + *v1201));
      if (v1279 <= v1280)
      {
        v1281 = (float64x2_t *)sub_20F762098(v399 + 2279, *(_QWORD *)(*v21 + 8 * (v399[2238] + *v1278)), v1280, 4u);
        v1785 = vld2q_f64(v1567.f64);
        v1282 = &v1569;
        v2102 = vld2q_f64(v1282->f64);
        v1283 = vmlaq_laneq_f64(vmulq_n_f64(v1785.val[0], v1571.f64[0]), v1785.val[1], v1571, 1);
        v1785.val[0] = vaddq_f64(v1281[1], vmlaq_laneq_f64(vmulq_n_f64(v2102.val[0], v1571.f64[0]), v2102.val[1], v1571, 1));
        *v1281 = vaddq_f64(*v1281, v1283);
        v1281[1] = v1785.val[0];
        v1284 = (float64x2_t *)sub_20F762098(v399 + 2279, v1279, (int)v1280 + 1, 4u);
        v1786 = vld2q_f64(v1567.f64);
        v2103 = vld2q_f64(v1569.f64);
        v1285 = vmlaq_laneq_f64(vmulq_n_f64(v1786.val[0], v1572.f64[0]), v1786.val[1], v1572, 1);
        v1786.val[0] = vaddq_f64(v1284[1], vmlaq_laneq_f64(vmulq_n_f64(v2103.val[0], v1572.f64[0]), v2103.val[1], v1572, 1));
        *v1284 = vaddq_f64(*v1284, v1285);
        v1284[1] = v1786.val[0];
        v1286 = (float64x2_t *)sub_20F762098(v399 + 2279, v1279, (int)v1280 + 2, 4u);
        v1787 = vld2q_f64(v1567.f64);
        v2104 = vld2q_f64(v1569.f64);
        v1287 = vmlaq_laneq_f64(vmulq_n_f64(v1787.val[0], v1573.f64[0]), v1787.val[1], v1573, 1);
        v1787.val[0] = vaddq_f64(v1286[1], vmlaq_laneq_f64(vmulq_n_f64(v2104.val[0], v1573.f64[0]), v2104.val[1], v1573, 1));
        *v1286 = vaddq_f64(*v1286, v1287);
        v1286[1] = v1787.val[0];
        v1201 = *(unsigned int **)(a2 + 120);
      }
    }
  }
  if (*((_BYTE *)v1201 + 20))
  {
    v1288 = *(_QWORD *)(*v21 + 8 * (v399[2239] + *v1201));
    v1289 = (float64x2_t *)sub_20F762098(v399 + 2279, v1288, v1288, 3u);
    v1290.f64[0] = v1289[1].f64[0];
    _V4.D[1] = v1573.f64[1];
    _Q3 = vmulq_f64(v1573, v1571);
    _D2 = v1571.f64[1];
    __asm { FMLA            D3, D2, V4.D[1] }
    *v1289 = vaddq_f64(*v1289, vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)vzip1q_s64((int64x2_t)v1571, (int64x2_t)v1572), v1571.f64[0]), (float64x2_t)vzip2q_s64((int64x2_t)v1571, (int64x2_t)v1572), v1571, 1));
    *(_QWORD *)&v1289[1].f64[0] = *(_OWORD *)&vaddq_f64(v1290, _Q3);
    v1294 = (float64x2_t *)sub_20F762098(v399 + 2279, v1288, (int)v1288 + 1, 3u);
    v1295.f64[0] = v1294[1].f64[0];
    _V4.D[1] = v1573.f64[1];
    _Q2 = vmulq_f64(v1573, v1572);
    _D3 = v1572.f64[1];
    __asm { FMLA            D2, D3, V4.D[1] }
    *v1294 = vaddq_f64(*v1294, vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)vzip1q_s64((int64x2_t)v1571, (int64x2_t)v1572), v1572.f64[0]), (float64x2_t)vzip2q_s64((int64x2_t)v1571, (int64x2_t)v1572), v1572, 1));
    *(_QWORD *)&v1294[1].f64[0] = *(_OWORD *)&vaddq_f64(v1295, _Q2);
    v1299 = (float64x2_t *)sub_20F762098(v399 + 2279, v1288, (int)v1288 + 2, 3u);
    v1300.f64[0] = v1299[1].f64[0];
    _Q4 = v1573;
    _Q2 = vmulq_f64(_Q4, _Q4);
    _D3 = v1573.f64[1];
    __asm { FMLA            D2, D3, V4.D[1] }
    v1304 = vaddq_f64(v1300, _Q2);
    *v1299 = vaddq_f64(*v1299, vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)vzip1q_s64((int64x2_t)v1571, (int64x2_t)v1572), v1573.f64[0]), (float64x2_t)vzip2q_s64((int64x2_t)v1571, (int64x2_t)v1572), v1573, 1));
    v1299[1].f64[0] = v1304.f64[0];
    v1305 = v399[2270] + 8 * v1288;
    v1304.f64[0] = *(float64_t *)(v1305 + 16);
    _Q4.f64[1] = v1573.f64[1];
    _Q2 = vmulq_f64(v1573, *v1527);
    _D3 = v1527->f64[1];
    __asm { FMLA            D2, D3, V4.D[1] }
    *(float64x2_t *)v1305 = vsubq_f64(*(float64x2_t *)v1305, vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)vzip1q_s64((int64x2_t)v1571, (int64x2_t)v1572), v1527->f64[0]), (float64x2_t)vzip2q_s64((int64x2_t)v1571, (int64x2_t)v1572), *v1527, 1));
    *(_QWORD *)(v1305 + 16) = *(_OWORD *)&vsubq_f64(v1304, _Q2);
  }
  v1308 = *(unsigned int **)(a2 + 128);
  if (*((_BYTE *)v1308 + 20))
  {
    v1309 = *(unsigned int **)(a2 + 120);
    if (*((_BYTE *)v1309 + 20))
    {
      v1310 = v399[2239];
      v1311 = *(_QWORD *)(*v21 + 8 * (v1310 + *v1308));
      v1312 = *(_QWORD *)(*v21 + 8 * (v1310 + *v1309));
      if (v1311 <= v1312)
      {
        v1313 = (float64x2_t *)sub_20F762098(v399 + 2279, v1311, *(_QWORD *)(*v21 + 8 * (v1310 + *v1309)), 3u);
        v1314.f64[0] = v1313[1].f64[0];
        v2105 = vld2q_f64(v1574.f64);
        _V4.D[1] = v1576.f64[1];
        v1316 = vmlaq_laneq_f64(vmulq_n_f64(v2105.val[0], v1571.f64[0]), v2105.val[1], v1571, 1);
        v2105.val[0] = vmulq_f64(v1576, v1571);
        v2105.val[1].f64[0] = v1571.f64[1];
        __asm { FMLA            D2, D3, V4.D[1] }
        *v1313 = vaddq_f64(*v1313, v1316);
        *(_QWORD *)&v1313[1].f64[0] = *(_OWORD *)&vaddq_f64(v1314, v2105.val[0]);
        v1317 = (float64x2_t *)sub_20F762098(v399 + 2279, v1311, (int)v1312 + 1, 3u);
        v1318.f64[0] = v1317[1].f64[0];
        v2106 = vld2q_f64(v1574.f64);
        _V4.D[1] = v1576.f64[1];
        v1320 = vmlaq_laneq_f64(vmulq_n_f64(v2106.val[0], v1572.f64[0]), v2106.val[1], v1572, 1);
        v2106.val[0] = vmulq_f64(v1576, v1572);
        v2106.val[1].f64[0] = v1572.f64[1];
        __asm { FMLA            D2, D3, V4.D[1] }
        *v1317 = vaddq_f64(*v1317, v1320);
        *(_QWORD *)&v1317[1].f64[0] = *(_OWORD *)&vaddq_f64(v1318, v2106.val[0]);
        v1321 = (float64x2_t *)sub_20F762098(v399 + 2279, v1311, (int)v1312 + 2, 3u);
        v1322.f64[0] = v1321[1].f64[0];
        v2107 = vld2q_f64(v1574.f64);
        _V4.D[1] = v1576.f64[1];
        v1324 = vmlaq_laneq_f64(vmulq_n_f64(v2107.val[0], v1573.f64[0]), v2107.val[1], v1573, 1);
        v2107.val[0] = vmulq_f64(v1576, v1573);
        v2107.val[1].f64[0] = v1573.f64[1];
        __asm { FMLA            D2, D3, V4.D[1] }
        *v1321 = vaddq_f64(*v1321, v1324);
        *(_QWORD *)&v1321[1].f64[0] = *(_OWORD *)&vaddq_f64(v1322, v2107.val[0]);
        v1308 = *(unsigned int **)(a2 + 128);
      }
    }
  }
  if (*((_BYTE *)*v1526 + 20))
  {
    if (*((_BYTE *)v1308 + 20))
    {
      v1325 = *v21;
      v1326 = *(_QWORD *)(*v21 + 8 * (v399[2236] + **v1526));
      v1327 = *(_QWORD *)(v1325 + 8 * (v399[2239] + *v1308));
      if (v1326 <= v1327)
      {
        v1328 = (float64x2_t *)sub_20F762098(v399 + 2279, v1326, v1327, 6u);
        v1329 = &v1533;
        v2141 = vld2q_f64(v1329->f64);
        v1330 = &v1535;
        v2185 = vld2q_f64(v1330->f64);
        v1331 = vaddq_f64(v1328[2], vmlaq_n_f64(vmulq_n_f64(v2185.val[0], v1574.f64[0]), v2185.val[1], v1574.f64[1]));
        v1332 = vaddq_f64(v1328[1], vmlaq_n_f64(vmulq_n_f64(v2141.val[0], v1574.f64[0]), v2141.val[1], v1574.f64[1]));
        *v1328 = vaddq_f64(*v1328, vmlaq_n_f64(vmulq_n_f64((float64x2_t)vzip1q_s64((int64x2_t)v1531, (int64x2_t)v1532), v1574.f64[0]), (float64x2_t)vzip2q_s64((int64x2_t)v1531, (int64x2_t)v1532), v1574.f64[1]));
        v1328[1] = v1332;
        v1328[2] = v1331;
        v1333 = (float64x2_t *)sub_20F762098(v399 + 2279, v1326, (int)v1327 + 1, 6u);
        v2108 = vld2q_f64(v1533.f64);
        v2186 = vld2q_f64(v1535.f64);
        v1334 = vmlaq_n_f64(vmulq_n_f64(v2108.val[0], v1575.f64[0]), v2108.val[1], v1575.f64[1]);
        v2108.val[0] = vaddq_f64(v1333[2], vmlaq_n_f64(vmulq_n_f64(v2186.val[0], v1575.f64[0]), v2186.val[1], v1575.f64[1]));
        v1335 = vaddq_f64(v1333[1], v1334);
        *v1333 = vaddq_f64(*v1333, vmlaq_n_f64(vmulq_n_f64((float64x2_t)vzip1q_s64((int64x2_t)v1531, (int64x2_t)v1532), v1575.f64[0]), (float64x2_t)vzip2q_s64((int64x2_t)v1531, (int64x2_t)v1532), v1575.f64[1]));
        v1333[1] = v1335;
        v1333[2] = v2108.val[0];
        v1336 = (float64x2_t *)sub_20F762098(v399 + 2279, v1326, (int)v1327 + 2, 6u);
        v2109 = vld2q_f64(v1533.f64);
        v2187 = vld2q_f64(v1535.f64);
        v1337 = vmlaq_n_f64(vmulq_n_f64(v2109.val[0], v1576.f64[0]), v2109.val[1], v1576.f64[1]);
        v2109.val[0] = vaddq_f64(v1336[2], vmlaq_n_f64(vmulq_n_f64(v2187.val[0], v1576.f64[0]), v2187.val[1], v1576.f64[1]));
        v1338 = vaddq_f64(v1336[1], v1337);
        *v1336 = vaddq_f64(*v1336, vmlaq_n_f64(vmulq_n_f64((float64x2_t)vzip1q_s64((int64x2_t)v1531, (int64x2_t)v1532), v1576.f64[0]), (float64x2_t)vzip2q_s64((int64x2_t)v1531, (int64x2_t)v1532), v1576.f64[1]));
        v1336[1] = v1338;
        v1336[2] = v2109.val[0];
        v1308 = *(unsigned int **)(a2 + 128);
      }
    }
  }
  v1339 = *(unsigned int **)(a2 + 64);
  if (*((_BYTE *)v1339 + 20))
  {
    if (*((_BYTE *)v1308 + 20))
    {
      v1340 = *(_QWORD *)(*v1528 + 8 * (v399[2236] + *v1339));
      v1341 = *(_QWORD *)(*v1528 + 8 * (v399[2239] + *v1308));
      if (v1340 <= v1341)
      {
        v1342 = (float64x2_t *)sub_20F762098(v399 + 2279, *(_QWORD *)(*v1528 + 8 * (v399[2236] + *v1339)), v1341, 6u);
        v1788 = vld2q_f64(v1537.f64);
        v1343 = &v1539;
        v2110 = vld2q_f64(v1343->f64);
        v1344 = &v1541;
        v2164 = vld2q_f64(v1344->f64);
        v1345 = vmlaq_n_f64(vmulq_n_f64(v1788.val[0], v1574.f64[0]), v1788.val[1], v1574.f64[1]);
        v1788.val[1] = vaddq_f64(v1342[2], vmlaq_n_f64(vmulq_n_f64(v2164.val[0], v1574.f64[0]), v2164.val[1], v1574.f64[1]));
        v1788.val[0] = vaddq_f64(v1342[1], vmlaq_n_f64(vmulq_n_f64(v2110.val[0], v1574.f64[0]), v2110.val[1], v1574.f64[1]));
        *v1342 = vaddq_f64(*v1342, v1345);
        *(float64x2x2_t *)v1342[1].f64 = v1788;
        v1346 = (float64x2_t *)sub_20F762098(v399 + 2279, v1340, (int)v1341 + 1, 6u);
        v1789 = vld2q_f64(v1537.f64);
        v2111 = vld2q_f64(v1539.f64);
        v2165 = vld2q_f64(v1541.f64);
        v1347 = vmlaq_n_f64(vmulq_n_f64(v1789.val[0], v1575.f64[0]), v1789.val[1], v1575.f64[1]);
        v1789.val[1] = vaddq_f64(v1346[2], vmlaq_n_f64(vmulq_n_f64(v2165.val[0], v1575.f64[0]), v2165.val[1], v1575.f64[1]));
        v1789.val[0] = vaddq_f64(v1346[1], vmlaq_n_f64(vmulq_n_f64(v2111.val[0], v1575.f64[0]), v2111.val[1], v1575.f64[1]));
        *v1346 = vaddq_f64(*v1346, v1347);
        *(float64x2x2_t *)v1346[1].f64 = v1789;
        v1348 = (float64x2_t *)sub_20F762098(v399 + 2279, v1340, (int)v1341 + 2, 6u);
        v1790 = vld2q_f64(v1537.f64);
        v2112 = vld2q_f64(v1539.f64);
        v2166 = vld2q_f64(v1541.f64);
        v1349 = vmlaq_n_f64(vmulq_n_f64(v1790.val[0], v1576.f64[0]), v1790.val[1], v1576.f64[1]);
        v1790.val[1] = vaddq_f64(v1348[2], vmlaq_n_f64(vmulq_n_f64(v2166.val[0], v1576.f64[0]), v2166.val[1], v1576.f64[1]));
        v1790.val[0] = vaddq_f64(v1348[1], vmlaq_n_f64(vmulq_n_f64(v2112.val[0], v1576.f64[0]), v2112.val[1], v1576.f64[1]));
        *v1348 = vaddq_f64(*v1348, v1349);
        *(float64x2x2_t *)v1348[1].f64 = v1790;
        v1308 = *(unsigned int **)(a2 + 128);
      }
    }
  }
  v1350 = *(unsigned int **)(a2 + 72);
  if (*((_BYTE *)v1350 + 20))
  {
    if (*((_BYTE *)v1308 + 20))
    {
      v1351 = *(_QWORD *)(*v1528 + 8 * (v399[2233] + *v1350));
      v1352 = *(_QWORD *)(*v1528 + 8 * (v399[2239] + *v1308));
      if (v1351 <= v1352)
      {
        v1353 = (float64x2_t *)sub_20F762098(v399 + 2279, *(_QWORD *)(*v1528 + 8 * (v399[2233] + *v1350)), v1352, 6u);
        v1791 = vld2q_f64(v1543.f64);
        v1354 = &v1545;
        v2113 = vld2q_f64(v1354->f64);
        v1355 = &v1547;
        v2167 = vld2q_f64(v1355->f64);
        v1356 = vmlaq_n_f64(vmulq_n_f64(v1791.val[0], v1574.f64[0]), v1791.val[1], v1574.f64[1]);
        v1791.val[1] = vaddq_f64(v1353[2], vmlaq_n_f64(vmulq_n_f64(v2167.val[0], v1574.f64[0]), v2167.val[1], v1574.f64[1]));
        v1791.val[0] = vaddq_f64(v1353[1], vmlaq_n_f64(vmulq_n_f64(v2113.val[0], v1574.f64[0]), v2113.val[1], v1574.f64[1]));
        *v1353 = vaddq_f64(*v1353, v1356);
        *(float64x2x2_t *)v1353[1].f64 = v1791;
        v1357 = (float64x2_t *)sub_20F762098(v399 + 2279, v1351, (int)v1352 + 1, 6u);
        v1792 = vld2q_f64(v1543.f64);
        v2114 = vld2q_f64(v1545.f64);
        v2168 = vld2q_f64(v1547.f64);
        v1358 = vmlaq_n_f64(vmulq_n_f64(v1792.val[0], v1575.f64[0]), v1792.val[1], v1575.f64[1]);
        v1792.val[1] = vaddq_f64(v1357[2], vmlaq_n_f64(vmulq_n_f64(v2168.val[0], v1575.f64[0]), v2168.val[1], v1575.f64[1]));
        v1792.val[0] = vaddq_f64(v1357[1], vmlaq_n_f64(vmulq_n_f64(v2114.val[0], v1575.f64[0]), v2114.val[1], v1575.f64[1]));
        *v1357 = vaddq_f64(*v1357, v1358);
        *(float64x2x2_t *)v1357[1].f64 = v1792;
        v1359 = (float64x2_t *)sub_20F762098(v399 + 2279, v1351, (int)v1352 + 2, 6u);
        v1793 = vld2q_f64(v1543.f64);
        v2115 = vld2q_f64(v1545.f64);
        v2169 = vld2q_f64(v1547.f64);
        v1360 = vmlaq_n_f64(vmulq_n_f64(v1793.val[0], v1576.f64[0]), v1793.val[1], v1576.f64[1]);
        v1793.val[1] = vaddq_f64(v1359[2], vmlaq_n_f64(vmulq_n_f64(v2169.val[0], v1576.f64[0]), v2169.val[1], v1576.f64[1]));
        v1793.val[0] = vaddq_f64(v1359[1], vmlaq_n_f64(vmulq_n_f64(v2115.val[0], v1576.f64[0]), v2115.val[1], v1576.f64[1]));
        *v1359 = vaddq_f64(*v1359, v1360);
        *(float64x2x2_t *)v1359[1].f64 = v1793;
        v1308 = *(unsigned int **)(a2 + 128);
      }
    }
  }
  v1361 = *(unsigned int **)(a2 + 80);
  if (*((_BYTE *)v1361 + 20))
  {
    if (*((_BYTE *)v1308 + 20))
    {
      v1362 = *(_QWORD *)(*v1528 + 8 * (v399[2233] + *v1361));
      v1363 = *(_QWORD *)(*v1528 + 8 * (v399[2239] + *v1308));
      if (v1362 <= v1363)
      {
        v1364 = (float64x2_t *)sub_20F762098(v399 + 2279, *(_QWORD *)(*v1528 + 8 * (v399[2233] + *v1361)), v1363, 6u);
        v1794 = vld2q_f64(v1549.f64);
        v1365 = &v1551;
        v2116 = vld2q_f64(v1365->f64);
        v1366 = &v1553;
        v2170 = vld2q_f64(v1366->f64);
        v1367 = vmlaq_n_f64(vmulq_n_f64(v1794.val[0], v1574.f64[0]), v1794.val[1], v1574.f64[1]);
        v1794.val[1] = vaddq_f64(v1364[2], vmlaq_n_f64(vmulq_n_f64(v2170.val[0], v1574.f64[0]), v2170.val[1], v1574.f64[1]));
        v1794.val[0] = vaddq_f64(v1364[1], vmlaq_n_f64(vmulq_n_f64(v2116.val[0], v1574.f64[0]), v2116.val[1], v1574.f64[1]));
        *v1364 = vaddq_f64(*v1364, v1367);
        *(float64x2x2_t *)v1364[1].f64 = v1794;
        v1368 = (float64x2_t *)sub_20F762098(v399 + 2279, v1362, (int)v1363 + 1, 6u);
        v1795 = vld2q_f64(v1549.f64);
        v2117 = vld2q_f64(v1551.f64);
        v2171 = vld2q_f64(v1553.f64);
        v1369 = vmlaq_n_f64(vmulq_n_f64(v1795.val[0], v1575.f64[0]), v1795.val[1], v1575.f64[1]);
        v1795.val[1] = vaddq_f64(v1368[2], vmlaq_n_f64(vmulq_n_f64(v2171.val[0], v1575.f64[0]), v2171.val[1], v1575.f64[1]));
        v1795.val[0] = vaddq_f64(v1368[1], vmlaq_n_f64(vmulq_n_f64(v2117.val[0], v1575.f64[0]), v2117.val[1], v1575.f64[1]));
        *v1368 = vaddq_f64(*v1368, v1369);
        *(float64x2x2_t *)v1368[1].f64 = v1795;
        v1370 = (float64x2_t *)sub_20F762098(v399 + 2279, v1362, (int)v1363 + 2, 6u);
        v1796 = vld2q_f64(v1549.f64);
        v2118 = vld2q_f64(v1551.f64);
        v2172 = vld2q_f64(v1553.f64);
        v1371 = vmlaq_n_f64(vmulq_n_f64(v1796.val[0], v1576.f64[0]), v1796.val[1], v1576.f64[1]);
        v1796.val[1] = vaddq_f64(v1370[2], vmlaq_n_f64(vmulq_n_f64(v2172.val[0], v1576.f64[0]), v2172.val[1], v1576.f64[1]));
        v1796.val[0] = vaddq_f64(v1370[1], vmlaq_n_f64(vmulq_n_f64(v2118.val[0], v1576.f64[0]), v2118.val[1], v1576.f64[1]));
        *v1370 = vaddq_f64(*v1370, v1371);
        *(float64x2x2_t *)v1370[1].f64 = v1796;
        v1308 = *(unsigned int **)(a2 + 128);
      }
    }
  }
  v1372 = *(unsigned int **)(a2 + 88);
  if (*((_BYTE *)v1372 + 20))
  {
    if (*((_BYTE *)v1308 + 20))
    {
      v1373 = *(_QWORD *)(*v1528 + 8 * (v399[2237] + *v1372));
      v1374 = *(_QWORD *)(*v1528 + 8 * (v399[2239] + *v1308));
      if (v1373 <= v1374)
      {
        v1375 = (float64x2_t *)sub_20F762098(v399 + 2279, *(_QWORD *)(*v1528 + 8 * (v399[2237] + *v1372)), v1374, 4u);
        v1797 = vld2q_f64(v1555.f64);
        v1376 = &v1557;
        v2119 = vld2q_f64(v1376->f64);
        v1377 = vmlaq_laneq_f64(vmulq_n_f64(v1797.val[0], v1574.f64[0]), v1797.val[1], v1574, 1);
        v1797.val[0] = vaddq_f64(v1375[1], vmlaq_laneq_f64(vmulq_n_f64(v2119.val[0], v1574.f64[0]), v2119.val[1], v1574, 1));
        *v1375 = vaddq_f64(*v1375, v1377);
        v1375[1] = v1797.val[0];
        v1378 = (float64x2_t *)sub_20F762098(v399 + 2279, v1373, (int)v1374 + 1, 4u);
        v1798 = vld2q_f64(v1555.f64);
        v2120 = vld2q_f64(v1557.f64);
        v1379 = vmlaq_laneq_f64(vmulq_n_f64(v1798.val[0], v1575.f64[0]), v1798.val[1], v1575, 1);
        v1798.val[0] = vaddq_f64(v1378[1], vmlaq_laneq_f64(vmulq_n_f64(v2120.val[0], v1575.f64[0]), v2120.val[1], v1575, 1));
        *v1378 = vaddq_f64(*v1378, v1379);
        v1378[1] = v1798.val[0];
        v1380 = (float64x2_t *)sub_20F762098(v399 + 2279, v1373, (int)v1374 + 2, 4u);
        v1799 = vld2q_f64(v1555.f64);
        v2121 = vld2q_f64(v1557.f64);
        v1381 = vmlaq_laneq_f64(vmulq_n_f64(v1799.val[0], v1576.f64[0]), v1799.val[1], v1576, 1);
        v1799.val[0] = vaddq_f64(v1380[1], vmlaq_laneq_f64(vmulq_n_f64(v2121.val[0], v1576.f64[0]), v2121.val[1], v1576, 1));
        *v1380 = vaddq_f64(*v1380, v1381);
        v1380[1] = v1799.val[0];
        v1308 = *(unsigned int **)(a2 + 128);
      }
    }
  }
  v1382 = *(unsigned int **)(a2 + 96);
  if (*((_BYTE *)v1382 + 20))
  {
    if (*((_BYTE *)v1308 + 20))
    {
      v1383 = *(_QWORD *)(*v1528 + 8 * (v399[2237] + *v1382));
      v1384 = *(_QWORD *)(*v1528 + 8 * (v399[2239] + *v1308));
      if (v1383 <= v1384)
      {
        v1385 = (float64x2_t *)sub_20F762098(v399 + 2279, *(_QWORD *)(*v1528 + 8 * (v399[2237] + *v1382)), v1384, 4u);
        v1800 = vld2q_f64(v1559.f64);
        v1386 = &v1561;
        v2122 = vld2q_f64(v1386->f64);
        v1387 = vmlaq_laneq_f64(vmulq_n_f64(v1800.val[0], v1574.f64[0]), v1800.val[1], v1574, 1);
        v1800.val[0] = vaddq_f64(v1385[1], vmlaq_laneq_f64(vmulq_n_f64(v2122.val[0], v1574.f64[0]), v2122.val[1], v1574, 1));
        *v1385 = vaddq_f64(*v1385, v1387);
        v1385[1] = v1800.val[0];
        v1388 = (float64x2_t *)sub_20F762098(v399 + 2279, v1383, (int)v1384 + 1, 4u);
        v1801 = vld2q_f64(v1559.f64);
        v2123 = vld2q_f64(v1561.f64);
        v1389 = vmlaq_laneq_f64(vmulq_n_f64(v1801.val[0], v1575.f64[0]), v1801.val[1], v1575, 1);
        v1801.val[0] = vaddq_f64(v1388[1], vmlaq_laneq_f64(vmulq_n_f64(v2123.val[0], v1575.f64[0]), v2123.val[1], v1575, 1));
        *v1388 = vaddq_f64(*v1388, v1389);
        v1388[1] = v1801.val[0];
        v1390 = (float64x2_t *)sub_20F762098(v399 + 2279, v1383, (int)v1384 + 2, 4u);
        v1802 = vld2q_f64(v1559.f64);
        v2124 = vld2q_f64(v1561.f64);
        v1391 = vmlaq_laneq_f64(vmulq_n_f64(v1802.val[0], v1576.f64[0]), v1802.val[1], v1576, 1);
        v1802.val[0] = vaddq_f64(v1390[1], vmlaq_laneq_f64(vmulq_n_f64(v2124.val[0], v1576.f64[0]), v2124.val[1], v1576, 1));
        *v1390 = vaddq_f64(*v1390, v1391);
        v1390[1] = v1802.val[0];
        v1308 = *(unsigned int **)(a2 + 128);
      }
    }
  }
  v1392 = *(unsigned int **)(a2 + 104);
  if (*((_BYTE *)v1392 + 20))
  {
    if (*((_BYTE *)v1308 + 20))
    {
      v1393 = *(_QWORD *)(*v1528 + 8 * (v399[2238] + *v1392));
      v1394 = *(_QWORD *)(*v1528 + 8 * (v399[2239] + *v1308));
      if (v1393 <= v1394)
      {
        v1395 = (float64x2_t *)sub_20F762098(v399 + 2279, *(_QWORD *)(*v1528 + 8 * (v399[2238] + *v1392)), v1394, 4u);
        v1803 = vld2q_f64(v1563.f64);
        v1396 = &v1565;
        v2125 = vld2q_f64(v1396->f64);
        v1397 = vmlaq_laneq_f64(vmulq_n_f64(v1803.val[0], v1574.f64[0]), v1803.val[1], v1574, 1);
        v1803.val[0] = vaddq_f64(v1395[1], vmlaq_laneq_f64(vmulq_n_f64(v2125.val[0], v1574.f64[0]), v2125.val[1], v1574, 1));
        *v1395 = vaddq_f64(*v1395, v1397);
        v1395[1] = v1803.val[0];
        v1398 = (float64x2_t *)sub_20F762098(v399 + 2279, v1393, (int)v1394 + 1, 4u);
        v1804 = vld2q_f64(v1563.f64);
        v2126 = vld2q_f64(v1565.f64);
        v1399 = vmlaq_laneq_f64(vmulq_n_f64(v1804.val[0], v1575.f64[0]), v1804.val[1], v1575, 1);
        v1804.val[0] = vaddq_f64(v1398[1], vmlaq_laneq_f64(vmulq_n_f64(v2126.val[0], v1575.f64[0]), v2126.val[1], v1575, 1));
        *v1398 = vaddq_f64(*v1398, v1399);
        v1398[1] = v1804.val[0];
        v1400 = (float64x2_t *)sub_20F762098(v399 + 2279, v1393, (int)v1394 + 2, 4u);
        v1805 = vld2q_f64(v1563.f64);
        v2127 = vld2q_f64(v1565.f64);
        v1401 = vmlaq_laneq_f64(vmulq_n_f64(v1805.val[0], v1576.f64[0]), v1805.val[1], v1576, 1);
        v1805.val[0] = vaddq_f64(v1400[1], vmlaq_laneq_f64(vmulq_n_f64(v2127.val[0], v1576.f64[0]), v2127.val[1], v1576, 1));
        *v1400 = vaddq_f64(*v1400, v1401);
        v1400[1] = v1805.val[0];
        v1308 = *(unsigned int **)(a2 + 128);
      }
    }
  }
  v1402 = *(unsigned int **)(a2 + 112);
  if (*((_BYTE *)v1402 + 20))
  {
    if (*((_BYTE *)v1308 + 20))
    {
      v1403 = *(_QWORD *)(*v1528 + 8 * (v399[2238] + *v1402));
      v1404 = *(_QWORD *)(*v1528 + 8 * (v399[2239] + *v1308));
      if (v1403 <= v1404)
      {
        v1405 = (float64x2_t *)sub_20F762098(v399 + 2279, *(_QWORD *)(*v1528 + 8 * (v399[2238] + *v1402)), v1404, 4u);
        v1806 = vld2q_f64(v1567.f64);
        v1406 = &v1569;
        v2128 = vld2q_f64(v1406->f64);
        v1407 = vmlaq_laneq_f64(vmulq_n_f64(v1806.val[0], v1574.f64[0]), v1806.val[1], v1574, 1);
        v1806.val[0] = vaddq_f64(v1405[1], vmlaq_laneq_f64(vmulq_n_f64(v2128.val[0], v1574.f64[0]), v2128.val[1], v1574, 1));
        *v1405 = vaddq_f64(*v1405, v1407);
        v1405[1] = v1806.val[0];
        v1408 = (float64x2_t *)sub_20F762098(v399 + 2279, v1403, (int)v1404 + 1, 4u);
        v1807 = vld2q_f64(v1567.f64);
        v2129 = vld2q_f64(v1569.f64);
        v1409 = vmlaq_laneq_f64(vmulq_n_f64(v1807.val[0], v1575.f64[0]), v1807.val[1], v1575, 1);
        v1807.val[0] = vaddq_f64(v1408[1], vmlaq_laneq_f64(vmulq_n_f64(v2129.val[0], v1575.f64[0]), v2129.val[1], v1575, 1));
        *v1408 = vaddq_f64(*v1408, v1409);
        v1408[1] = v1807.val[0];
        v1410 = (float64x2_t *)sub_20F762098(v399 + 2279, v1403, (int)v1404 + 2, 4u);
        v1808 = vld2q_f64(v1567.f64);
        v2130 = vld2q_f64(v1569.f64);
        v1411 = vmlaq_laneq_f64(vmulq_n_f64(v1808.val[0], v1576.f64[0]), v1808.val[1], v1576, 1);
        v1808.val[0] = vaddq_f64(v1410[1], vmlaq_laneq_f64(vmulq_n_f64(v2130.val[0], v1576.f64[0]), v2130.val[1], v1576, 1));
        *v1410 = vaddq_f64(*v1410, v1411);
        v1410[1] = v1808.val[0];
        v1308 = *(unsigned int **)(a2 + 128);
      }
    }
  }
  v1412 = *(unsigned int **)(a2 + 120);
  if (*((_BYTE *)v1412 + 20))
  {
    if (*((_BYTE *)v1308 + 20))
    {
      v1413 = v399[2239];
      v1414 = *(_QWORD *)(*v1528 + 8 * (v1413 + *v1412));
      v1415 = *(_QWORD *)(*v1528 + 8 * (v1413 + *v1308));
      if (v1414 <= v1415)
      {
        v1416 = (float64x2_t *)sub_20F762098(v399 + 2279, *(_QWORD *)(*v1528 + 8 * (v1413 + *v1412)), v1415, 3u);
        v1417.f64[0] = v1416[1].f64[0];
        v2131 = vld2q_f64(v1571.f64);
        _V4.D[1] = v1573.f64[1];
        v1419 = vmlaq_laneq_f64(vmulq_n_f64(v2131.val[0], v1574.f64[0]), v2131.val[1], v1574, 1);
        v2131.val[0] = vmulq_f64(v1573, v1574);
        v2131.val[1].f64[0] = v1574.f64[1];
        __asm { FMLA            D2, D3, V4.D[1] }
        *v1416 = vaddq_f64(*v1416, v1419);
        *(_QWORD *)&v1416[1].f64[0] = *(_OWORD *)&vaddq_f64(v1417, v2131.val[0]);
        v1420 = (float64x2_t *)sub_20F762098(v399 + 2279, v1414, (int)v1415 + 1, 3u);
        v1421.f64[0] = v1420[1].f64[0];
        v2132 = vld2q_f64(v1571.f64);
        _V4.D[1] = v1573.f64[1];
        v1423 = vmlaq_laneq_f64(vmulq_n_f64(v2132.val[0], v1575.f64[0]), v2132.val[1], v1575, 1);
        v2132.val[0] = vmulq_f64(v1573, v1575);
        v2132.val[1].f64[0] = v1575.f64[1];
        __asm { FMLA            D2, D3, V4.D[1] }
        *v1420 = vaddq_f64(*v1420, v1423);
        *(_QWORD *)&v1420[1].f64[0] = *(_OWORD *)&vaddq_f64(v1421, v2132.val[0]);
        v1424 = (float64x2_t *)sub_20F762098(v399 + 2279, v1414, (int)v1415 + 2, 3u);
        v1425.f64[0] = v1424[1].f64[0];
        v2133 = vld2q_f64(v1571.f64);
        _V4.D[1] = v1573.f64[1];
        v1427 = vmlaq_laneq_f64(vmulq_n_f64(v2133.val[0], v1576.f64[0]), v2133.val[1], v1576, 1);
        v2133.val[0] = vmulq_f64(v1573, v1576);
        v2133.val[1].f64[0] = v1576.f64[1];
        __asm { FMLA            D2, D3, V4.D[1] }
        *v1424 = vaddq_f64(*v1424, v1427);
        *(_QWORD *)&v1424[1].f64[0] = *(_OWORD *)&vaddq_f64(v1425, v2133.val[0]);
        v1308 = *(unsigned int **)(a2 + 128);
      }
    }
  }
  if (*((_BYTE *)v1308 + 20))
  {
    v1428 = *(_QWORD *)(*v1528 + 8 * (v399[2239] + *v1308));
    v1429 = (float64x2_t *)sub_20F762098(v399 + 2279, v1428, v1428, 3u);
    v1430.f64[0] = v1429[1].f64[0];
    _V4.D[1] = v1576.f64[1];
    _Q3 = vmulq_f64(v1576, v1574);
    _D2 = v1574.f64[1];
    __asm { FMLA            D3, D2, V4.D[1] }
    *v1429 = vaddq_f64(*v1429, vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)vzip1q_s64((int64x2_t)v1574, (int64x2_t)v1575), v1574.f64[0]), (float64x2_t)vzip2q_s64((int64x2_t)v1574, (int64x2_t)v1575), v1574, 1));
    *(_QWORD *)&v1429[1].f64[0] = *(_OWORD *)&vaddq_f64(v1430, _Q3);
    v1434 = (float64x2_t *)sub_20F762098(v399 + 2279, v1428, (int)v1428 + 1, 3u);
    v1435.f64[0] = v1434[1].f64[0];
    _V4.D[1] = v1576.f64[1];
    _Q2 = vmulq_f64(v1576, v1575);
    _D3 = v1575.f64[1];
    __asm { FMLA            D2, D3, V4.D[1] }
    *v1434 = vaddq_f64(*v1434, vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)vzip1q_s64((int64x2_t)v1574, (int64x2_t)v1575), v1575.f64[0]), (float64x2_t)vzip2q_s64((int64x2_t)v1574, (int64x2_t)v1575), v1575, 1));
    *(_QWORD *)&v1434[1].f64[0] = *(_OWORD *)&vaddq_f64(v1435, _Q2);
    v1439 = (float64x2_t *)sub_20F762098(v399 + 2279, v1428, (int)v1428 + 2, 3u);
    v1440.f64[0] = v1439[1].f64[0];
    _Q4 = v1576;
    _Q2 = vmulq_f64(_Q4, _Q4);
    _D3 = v1576.f64[1];
    __asm { FMLA            D2, D3, V4.D[1] }
    v1444 = vaddq_f64(v1440, _Q2);
    *v1439 = vaddq_f64(*v1439, vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)vzip1q_s64((int64x2_t)v1574, (int64x2_t)v1575), v1576.f64[0]), (float64x2_t)vzip2q_s64((int64x2_t)v1574, (int64x2_t)v1575), v1576, 1));
    v1439[1].f64[0] = v1444.f64[0];
    v1445 = v399[2270] + 8 * v1428;
    v1444.f64[0] = *(float64_t *)(v1445 + 16);
    _Q4.f64[1] = v1576.f64[1];
    _Q2 = vmulq_f64(v1576, *v1527);
    _D3 = v1527->f64[1];
    __asm { FMLA            D2, D3, V4.D[1] }
    *(float64x2_t *)v1445 = vsubq_f64(*(float64x2_t *)v1445, vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)vzip1q_s64((int64x2_t)v1574, (int64x2_t)v1575), v1527->f64[0]), (float64x2_t)vzip2q_s64((int64x2_t)v1574, (int64x2_t)v1575), *v1527, 1));
    *(_QWORD *)(v1445 + 16) = *(_OWORD *)&vsubq_f64(v1444, _Q2);
  }
  v1448 = *(unsigned int **)(a2 + 56);
  v1449 = *(unsigned int **)(a2 + 136);
  v1450 = v1528;
  if (*((_BYTE *)v1448 + 20))
  {
    if (*((_BYTE *)v1449 + 20))
    {
      v1451 = *(_QWORD *)(*v1528 + 8 * (v399[2236] + *v1448));
      v1452 = *(_QWORD *)(*v1528 + 8 * (v399[2240] + *v1449));
      if (v1451 <= v1452)
      {
        v1453 = (float64x2_t *)sub_20F762098(v399 + 2292, v1451, v1452 - *(_QWORD *)(v399[2267] + 8 * v399[2263]), 6u);
        v1454 = &v1533;
        v1827 = vld2q_f64(v1454->f64);
        v1455 = &v1535;
        v2188 = vld2q_f64(v1455->f64);
        v1456 = vaddq_f64(v1453[2], vmlaq_laneq_f64(vmulq_n_f64(v2188.val[0], v1577.f64[0]), v2188.val[1], v1577, 1));
        v1827.val[0] = vaddq_f64(v1453[1], vmlaq_laneq_f64(vmulq_n_f64(v1827.val[0], v1577.f64[0]), v1827.val[1], v1577, 1));
        *v1453 = vaddq_f64(*v1453, vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)vzip1q_s64((int64x2_t)v1531, (int64x2_t)v1532), v1577.f64[0]), (float64x2_t)vzip2q_s64((int64x2_t)v1531, (int64x2_t)v1532), v1577, 1));
        v1453[1] = v1827.val[0];
        v1453[2] = v1456;
        v1449 = *(unsigned int **)(a2 + 136);
      }
    }
  }
  v1457 = *(unsigned int **)(a2 + 64);
  if (*((_BYTE *)v1457 + 20))
  {
    if (*((_BYTE *)v1449 + 20))
    {
      v1458 = *(_QWORD *)(*v1528 + 8 * (v399[2236] + *v1457));
      v1459 = *(_QWORD *)(*v1528 + 8 * (v399[2240] + *v1449));
      if (v1458 <= v1459)
      {
        v1460 = (float64x2_t *)sub_20F762098(v399 + 2292, v1458, v1459 - *(_QWORD *)(v399[2267] + 8 * v399[2263]), 6u);
        v2142 = vld2q_f64(v1537.f64);
        v1450 = v1528;
        v1461 = &v1539;
        v2189 = vld2q_f64(v1461->f64);
        v1462 = &v1541;
        v2223 = vld2q_f64(v1462->f64);
        v1463 = vaddq_f64(v1460[2], vmlaq_laneq_f64(vmulq_n_f64(v2223.val[0], v1577.f64[0]), v2223.val[1], v1577, 1));
        v1464 = vaddq_f64(v1460[1], vmlaq_laneq_f64(vmulq_n_f64(v2189.val[0], v1577.f64[0]), v2189.val[1], v1577, 1));
        *v1460 = vaddq_f64(*v1460, vmlaq_laneq_f64(vmulq_n_f64(v2142.val[0], v1577.f64[0]), v2142.val[1], v1577, 1));
        v1460[1] = v1464;
        v1460[2] = v1463;
        v1449 = *(unsigned int **)(a2 + 136);
      }
    }
  }
  v1465 = *(unsigned int **)(a2 + 72);
  if (*((_BYTE *)v1465 + 20))
  {
    if (*((_BYTE *)v1449 + 20))
    {
      v1466 = *(_QWORD *)(*v1450 + 8 * (v399[2233] + *v1465));
      v1467 = *(_QWORD *)(*v1450 + 8 * (v399[2240] + *v1449));
      if (v1466 <= v1467)
      {
        v1468 = (float64x2_t *)sub_20F762098(v399 + 2292, v1466, v1467 - *(_QWORD *)(v399[2267] + 8 * v399[2263]), 6u);
        v2143 = vld2q_f64(v1543.f64);
        v1450 = v1528;
        v1469 = &v1545;
        v2190 = vld2q_f64(v1469->f64);
        v1470 = &v1547;
        v2224 = vld2q_f64(v1470->f64);
        v1471 = vaddq_f64(v1468[2], vmlaq_laneq_f64(vmulq_n_f64(v2224.val[0], v1577.f64[0]), v2224.val[1], v1577, 1));
        v1472 = vaddq_f64(v1468[1], vmlaq_laneq_f64(vmulq_n_f64(v2190.val[0], v1577.f64[0]), v2190.val[1], v1577, 1));
        *v1468 = vaddq_f64(*v1468, vmlaq_laneq_f64(vmulq_n_f64(v2143.val[0], v1577.f64[0]), v2143.val[1], v1577, 1));
        v1468[1] = v1472;
        v1468[2] = v1471;
        v1449 = *(unsigned int **)(a2 + 136);
      }
    }
  }
  v1473 = *(unsigned int **)(a2 + 80);
  if (*((_BYTE *)v1473 + 20))
  {
    if (*((_BYTE *)v1449 + 20))
    {
      v1474 = *(_QWORD *)(*v1450 + 8 * (v399[2233] + *v1473));
      v1475 = *(_QWORD *)(*v1450 + 8 * (v399[2240] + *v1449));
      if (v1474 <= v1475)
      {
        v1476 = (float64x2_t *)sub_20F762098(v399 + 2292, v1474, v1475 - *(_QWORD *)(v399[2267] + 8 * v399[2263]), 6u);
        v2144 = vld2q_f64(v1549.f64);
        v1450 = v1528;
        v1477 = &v1551;
        v2191 = vld2q_f64(v1477->f64);
        v1478 = &v1553;
        v2225 = vld2q_f64(v1478->f64);
        v1479 = vaddq_f64(v1476[2], vmlaq_laneq_f64(vmulq_n_f64(v2225.val[0], v1577.f64[0]), v2225.val[1], v1577, 1));
        v1480 = vaddq_f64(v1476[1], vmlaq_laneq_f64(vmulq_n_f64(v2191.val[0], v1577.f64[0]), v2191.val[1], v1577, 1));
        *v1476 = vaddq_f64(*v1476, vmlaq_laneq_f64(vmulq_n_f64(v2144.val[0], v1577.f64[0]), v2144.val[1], v1577, 1));
        v1476[1] = v1480;
        v1476[2] = v1479;
        v1449 = *(unsigned int **)(a2 + 136);
      }
    }
  }
  v1481 = *(unsigned int **)(a2 + 88);
  if (*((_BYTE *)v1481 + 20))
  {
    if (*((_BYTE *)v1449 + 20))
    {
      v1482 = *(_QWORD *)(*v1450 + 8 * (v399[2237] + *v1481));
      v1483 = *(_QWORD *)(*v1450 + 8 * (v399[2240] + *v1449));
      if (v1482 <= v1483)
      {
        v1484 = (float64x2_t *)sub_20F762098(v399 + 2292, v1482, v1483 - *(_QWORD *)(v399[2267] + 8 * v399[2263]), 4u);
        v1809 = vld2q_f64(v1555.f64);
        v1450 = v1528;
        v1485 = &v1557;
        v2134 = vld2q_f64(v1485->f64);
        v1486 = vmlaq_laneq_f64(vmulq_n_f64(v1809.val[0], v1577.f64[0]), v1809.val[1], v1577, 1);
        v1809.val[0] = vaddq_f64(v1484[1], vmlaq_laneq_f64(vmulq_n_f64(v2134.val[0], v1577.f64[0]), v2134.val[1], v1577, 1));
        *v1484 = vaddq_f64(*v1484, v1486);
        v1484[1] = v1809.val[0];
        v1449 = *(unsigned int **)(a2 + 136);
      }
    }
  }
  v1487 = *(unsigned int **)(a2 + 96);
  if (*((_BYTE *)v1487 + 20))
  {
    if (*((_BYTE *)v1449 + 20))
    {
      v1488 = *(_QWORD *)(*v1450 + 8 * (v399[2237] + *v1487));
      v1489 = *(_QWORD *)(*v1450 + 8 * (v399[2240] + *v1449));
      if (v1488 <= v1489)
      {
        v1490 = (float64x2_t *)sub_20F762098(v399 + 2292, v1488, v1489 - *(_QWORD *)(v399[2267] + 8 * v399[2263]), 4u);
        v1810 = vld2q_f64(v1559.f64);
        v1450 = v1528;
        v1491 = &v1561;
        v2135 = vld2q_f64(v1491->f64);
        v1492 = vmlaq_laneq_f64(vmulq_n_f64(v1810.val[0], v1577.f64[0]), v1810.val[1], v1577, 1);
        v1810.val[0] = vaddq_f64(v1490[1], vmlaq_laneq_f64(vmulq_n_f64(v2135.val[0], v1577.f64[0]), v2135.val[1], v1577, 1));
        *v1490 = vaddq_f64(*v1490, v1492);
        v1490[1] = v1810.val[0];
        v1449 = *(unsigned int **)(a2 + 136);
      }
    }
  }
  v1493 = *(unsigned int **)(a2 + 104);
  if (*((_BYTE *)v1493 + 20))
  {
    if (*((_BYTE *)v1449 + 20))
    {
      v1494 = *(_QWORD *)(*v1450 + 8 * (v399[2238] + *v1493));
      v1495 = *(_QWORD *)(*v1450 + 8 * (v399[2240] + *v1449));
      if (v1494 <= v1495)
      {
        v1496 = (float64x2_t *)sub_20F762098(v399 + 2292, v1494, v1495 - *(_QWORD *)(v399[2267] + 8 * v399[2263]), 4u);
        v1811 = vld2q_f64(v1563.f64);
        v1450 = v1528;
        v1497 = &v1565;
        v2136 = vld2q_f64(v1497->f64);
        v1498 = vmlaq_laneq_f64(vmulq_n_f64(v1811.val[0], v1577.f64[0]), v1811.val[1], v1577, 1);
        v1811.val[0] = vaddq_f64(v1496[1], vmlaq_laneq_f64(vmulq_n_f64(v2136.val[0], v1577.f64[0]), v2136.val[1], v1577, 1));
        *v1496 = vaddq_f64(*v1496, v1498);
        v1496[1] = v1811.val[0];
        v1449 = *(unsigned int **)(a2 + 136);
      }
    }
  }
  v1499 = *(unsigned int **)(a2 + 112);
  if (*((_BYTE *)v1499 + 20))
  {
    if (*((_BYTE *)v1449 + 20))
    {
      v1500 = *(_QWORD *)(*v1450 + 8 * (v399[2238] + *v1499));
      v1501 = *(_QWORD *)(*v1450 + 8 * (v399[2240] + *v1449));
      if (v1500 <= v1501)
      {
        v1502 = (float64x2_t *)sub_20F762098(v399 + 2292, v1500, v1501 - *(_QWORD *)(v399[2267] + 8 * v399[2263]), 4u);
        v1812 = vld2q_f64(v1567.f64);
        v1450 = v1528;
        v1503 = &v1569;
        v2137 = vld2q_f64(v1503->f64);
        v1504 = vmlaq_laneq_f64(vmulq_n_f64(v1812.val[0], v1577.f64[0]), v1812.val[1], v1577, 1);
        v1812.val[0] = vaddq_f64(v1502[1], vmlaq_laneq_f64(vmulq_n_f64(v2137.val[0], v1577.f64[0]), v2137.val[1], v1577, 1));
        *v1502 = vaddq_f64(*v1502, v1504);
        v1502[1] = v1812.val[0];
        v1449 = *(unsigned int **)(a2 + 136);
      }
    }
  }
  v1505 = *(unsigned int **)(a2 + 120);
  if (*((_BYTE *)v1505 + 20))
  {
    if (*((_BYTE *)v1449 + 20))
    {
      v1506 = *(_QWORD *)(*v1450 + 8 * (v399[2239] + *v1505));
      v1507 = *(_QWORD *)(*v1450 + 8 * (v399[2240] + *v1449));
      if (v1506 <= v1507)
      {
        v1508 = (float64x2_t *)sub_20F762098(v399 + 2292, v1506, v1507 - *(_QWORD *)(v399[2267] + 8 * v399[2263]), 3u);
        v1509.f64[0] = v1508[1].f64[0];
        v2138 = vld2q_f64(v1571.f64);
        _V4.D[1] = v1573.f64[1];
        v1511 = vmlaq_laneq_f64(vmulq_n_f64(v2138.val[0], v1577.f64[0]), v2138.val[1], v1577, 1);
        v2138.val[0] = vmulq_f64(v1573, v1577);
        v2138.val[1].f64[0] = v1577.f64[1];
        __asm { FMLA            D2, D3, V4.D[1] }
        *v1508 = vaddq_f64(*v1508, v1511);
        *(_QWORD *)&v1508[1].f64[0] = *(_OWORD *)&vaddq_f64(v1509, v2138.val[0]);
        v1449 = *(unsigned int **)(a2 + 136);
      }
    }
  }
  v1512 = *(unsigned int **)(a2 + 128);
  if (*((_BYTE *)v1512 + 20))
  {
    if (*((_BYTE *)v1449 + 20))
    {
      v1513 = *(_QWORD *)(*v1450 + 8 * (v399[2239] + *v1512));
      v1514 = *(_QWORD *)(*v1450 + 8 * (v399[2240] + *v1449));
      if (v1513 <= v1514)
      {
        v1515 = (float64x2_t *)sub_20F762098(v399 + 2292, v1513, v1514 - *(_QWORD *)(v399[2267] + 8 * v399[2263]), 3u);
        v1516.f64[0] = v1515[1].f64[0];
        v2139 = vld2q_f64(v1574.f64);
        _V4.D[1] = v1576.f64[1];
        v1518 = vmlaq_laneq_f64(vmulq_n_f64(v2139.val[0], v1577.f64[0]), v2139.val[1], v1577, 1);
        v2139.val[0] = vmulq_f64(v1576, v1577);
        v2139.val[1].f64[0] = v1577.f64[1];
        __asm { FMLA            D2, D3, V4.D[1] }
        *v1515 = vaddq_f64(*v1515, v1518);
        *(_QWORD *)&v1515[1].f64[0] = *(_OWORD *)&vaddq_f64(v1516, v2139.val[0]);
        v1449 = *(unsigned int **)(a2 + 136);
      }
    }
  }
  if (*((_BYTE *)v1449 + 20))
  {
    v1519 = *(_QWORD *)(*v1450 + 8 * (v399[2240] + *v1449));
    _D2 = v1577.f64[1];
    __asm { FMLA            D1, D2, V0.D[1] }
    *(double *)(v399[2305] + 8 * (v1519 - *v1525)) = *(double *)(v399[2305]
                                                                               + 8 * (v1519 - *v1525))
                                                                   + _D1;
    _V0.D[1] = v1577.f64[1];
    _D1 = v1527->f64[1];
    __asm { FMLA            D2, D1, V0.D[1] }
    *(double *)(v399[2270] + 8 * v1519) = *(double *)(v399[2270] + 8 * v1519) - _D2;
  }
}

uint64_t sub_20F7B7224(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  uint64_t v19;

  *(_QWORD *)a1 = off_24CA02920;
  v2 = *(_QWORD *)(a1 + 18440);
  if (v2)
    MEMORY[0x212BC6368](v2, 0x1000C8000313F17);
  v3 = *(void **)(a1 + 18416);
  if (v3)
  {
    *(_QWORD *)(a1 + 18424) = v3;
    operator delete(v3);
  }
  v4 = *(void **)(a1 + 18392);
  if (v4)
  {
    *(_QWORD *)(a1 + 18400) = v4;
    operator delete(v4);
  }
  v5 = *(void **)(a1 + 18368);
  if (v5)
  {
    *(_QWORD *)(a1 + 18376) = v5;
    operator delete(v5);
  }
  v6 = *(void **)(a1 + 18344);
  if (v6)
  {
    *(_QWORD *)(a1 + 18352) = v6;
    operator delete(v6);
  }
  v7 = *(void **)(a1 + 18312);
  if (v7)
  {
    *(_QWORD *)(a1 + 18320) = v7;
    operator delete(v7);
  }
  v8 = *(void **)(a1 + 18288);
  if (v8)
  {
    *(_QWORD *)(a1 + 18296) = v8;
    operator delete(v8);
  }
  v9 = *(void **)(a1 + 18264);
  if (v9)
  {
    *(_QWORD *)(a1 + 18272) = v9;
    operator delete(v9);
  }
  v10 = *(void **)(a1 + 18240);
  if (v10)
  {
    *(_QWORD *)(a1 + 18248) = v10;
    operator delete(v10);
  }
  v11 = *(_QWORD *)(a1 + 18208);
  if (v11)
    MEMORY[0x212BC6368](v11, 0x1000C8000313F17);
  v12 = *(_QWORD *)(a1 + 18184);
  if (v12)
    MEMORY[0x212BC6368](v12, 0x1000C8000313F17);
  v13 = *(_QWORD *)(a1 + 18160);
  if (v13)
    MEMORY[0x212BC6368](v13, 0x1000C8000313F17);
  v14 = *(void **)(a1 + 18136);
  if (v14)
  {
    *(_QWORD *)(a1 + 18144) = v14;
    operator delete(v14);
  }
  v15 = *(void **)(a1 + 18112);
  if (v15)
  {
    *(_QWORD *)(a1 + 18120) = v15;
    operator delete(v15);
  }
  v16 = *(void **)(a1 + 18080);
  if (v16)
  {
    *(_QWORD *)(a1 + 18088) = v16;
    operator delete(v16);
  }
  if (*(_DWORD *)(a1 + 17968) != 2)
    sub_20E8BF000(a1 + 17976);
  v17 = *(void **)(a1 + 17936);
  if (v17)
  {
    *(_QWORD *)(a1 + 17944) = v17;
    operator delete(v17);
  }
  v18 = *(void **)(a1 + 17840);
  if (v18)
  {
    *(_QWORD *)(a1 + 17848) = v18;
    operator delete(v18);
  }
  sub_20F4EE048(a1 + 17640);
  sub_20F74D8D0((_QWORD *)(a1 + 9960));
  v19 = *(_QWORD *)(a1 + 9872);
  if (v19)
    MEMORY[0x212BC6368](v19, 0x1000C8000313F17);
  return sub_20F785B88(a1);
}

uint64_t sub_20F7B73E4(uint64_t a1, unsigned int *a2)
{
  unsigned int v3;
  __int128 *v4;
  __int128 *v5;
  unint64_t v6;
  unint64_t v7;
  __int128 *v8;
  __int128 *v9;
  unsigned int v10;
  int v12;
  BOOL v13;
  uint64_t v14;
  char *v15;
  unint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  _BYTE *v23;
  unsigned int *v24;
  char *v25;
  int64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  _OWORD *v31;
  char *v32;
  uint64_t v33;
  __int128 v34;
  unsigned int v35;
  unsigned int v36;
  uint64_t v37;
  _BYTE v38[28];
  uint64_t v39;

  v39 = *MEMORY[0x24BDAC8D0];
  v3 = *a2;
  v4 = *(__int128 **)(a1 + 680);
  v5 = *(__int128 **)(a1 + 688);
  if (v5 == v4)
  {
    v4 = *(__int128 **)(a1 + 688);
  }
  else
  {
    v6 = v5 - v4;
    do
    {
      v7 = v6 >> 1;
      v8 = &v4[v6 >> 1];
      v10 = *(_DWORD *)v8;
      v9 = v8 + 1;
      v6 += ~(v6 >> 1);
      if (v10 < v3)
        v4 = v9;
      else
        v6 = v7;
    }
    while (v6);
    if (v5 != v4 && v3 == *(_DWORD *)v4)
      return 0;
  }
  v12 = *((unsigned __int8 *)a2 + 4);
  *(_OWORD *)&v38[4] = *(_OWORD *)a2;
  *(_QWORD *)&v38[20] = *((_QWORD *)a2 + 2);
  v13 = v12 == 0;
  v14 = sub_20F2C0AB0(a1 + 704);
  *(_DWORD *)v14 = -1;
  *(_BYTE *)(v14 + 4) = 1;
  *(_DWORD *)(v14 + 8) = 0;
  *(_OWORD *)(v14 + 12) = *(_OWORD *)v38;
  *(_OWORD *)(v14 + 24) = *(_OWORD *)&v38[12];
  v36 = v3;
  v37 = v14;
  sub_20F2C0848((char **)(a1 + 680), v4, (uint64_t)&v36);
  if (!v13)
  {
    v15 = *(char **)(a1 + 1544);
    v16 = *(_QWORD *)(a1 + 1552);
    if ((unint64_t)v15 < v16)
    {
      *(_DWORD *)v15 = v3;
      v17 = (uint64_t)(v15 + 4);
LABEL_34:
      *(_QWORD *)(a1 + 1544) = v17;
      goto LABEL_35;
    }
    v18 = *(char **)(a1 + 1536);
    v19 = (v15 - v18) >> 2;
    v20 = v19 + 1;
    if ((unint64_t)(v19 + 1) >> 62)
      sub_20E867F44();
    v21 = v16 - (_QWORD)v18;
    if (v21 >> 1 > v20)
      v20 = v21 >> 1;
    if ((unint64_t)v21 >= 0x7FFFFFFFFFFFFFFCLL)
      v22 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v22 = v20;
    if (v22)
    {
      if (v22 >> 62)
        sub_20E877A38();
      v23 = operator new(4 * v22);
      v24 = (unsigned int *)&v23[4 * v19];
      v25 = &v23[4 * v22];
      *v24 = v3;
      v17 = (uint64_t)(v24 + 1);
      v26 = v15 - v18;
      if (v15 == v18)
        goto LABEL_32;
    }
    else
    {
      v23 = 0;
      v24 = (unsigned int *)(4 * v19);
      v25 = 0;
      *(_DWORD *)(4 * v19) = v3;
      v17 = 4 * v19 + 4;
      v26 = v15 - v18;
      if (v15 == v18)
      {
LABEL_32:
        *(_QWORD *)(a1 + 1536) = v24;
        *(_QWORD *)(a1 + 1544) = v17;
        *(_QWORD *)(a1 + 1552) = v25;
        if (v18)
          operator delete(v18);
        goto LABEL_34;
      }
    }
    v27 = v26 - 4;
    if (v27 < 0x2C)
      goto LABEL_41;
    if ((unint64_t)(v18 - v23) < 0x20)
      goto LABEL_41;
    v28 = (v27 >> 2) + 1;
    v29 = 4 * (v28 & 0x7FFFFFFFFFFFFFF8);
    v30 = &v15[-v29];
    v24 = (unsigned int *)((char *)v24 - v29);
    v31 = &v23[4 * v19 - 16];
    v32 = v15 - 16;
    v33 = v28 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v34 = *(_OWORD *)v32;
      *(v31 - 1) = *((_OWORD *)v32 - 1);
      *v31 = v34;
      v31 -= 2;
      v32 -= 32;
      v33 -= 8;
    }
    while (v33);
    v15 = v30;
    if (v28 != (v28 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_41:
      do
      {
        v35 = *((_DWORD *)v15 - 1);
        v15 -= 4;
        *--v24 = v35;
      }
      while (v15 != v18);
    }
    goto LABEL_32;
  }
LABEL_35:
  *(_BYTE *)(a1 + 978) = 0;
  *(_BYTE *)(a1 + 976) = 0;
  return 1;
}

void sub_20F7B7674(unsigned int a1, __int128 *a2, unsigned int a3, unsigned int a4, unsigned int a5, std::string::size_type a6, std::string::size_type a7, unsigned int a8, __n128 a9, double a10, uint64_t a11)
{
  unsigned int v14;
  uint64_t v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t *v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  unint64_t *v24;
  unint64_t *v25;
  unint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  unint64_t v30;
  char *v31;
  unint64_t v32;
  unint64_t v33;
  unsigned int *v34;
  char *v35;
  unsigned int v36;
  uint64_t v37;
  unint64_t v38;
  unsigned int *v39;
  char *v40;
  unsigned int v41;
  uint64_t v42;
  char *v43;
  char *v44;
  char *v45;
  unint64_t v46;
  unint64_t v47;
  unsigned int *v48;
  char *v49;
  unsigned int v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unsigned int *v54;
  char *v55;
  unsigned int v56;
  uint64_t v57;
  char *v58;
  char *v59;
  char *v60;
  unint64_t v61;
  unint64_t v62;
  unsigned int *v63;
  char *v64;
  unsigned int v65;
  uint64_t v66;
  unint64_t v67;
  unint64_t v68;
  unsigned int *v69;
  char *v70;
  unsigned int v71;
  uint64_t v72;
  std::__shared_weak_count *v73;
  unint64_t v74;
  unint64_t v75;
  std::__shared_count *v76;
  std::__shared_weak_count *v77;
  unsigned int v78;
  uint64_t shared_owners;
  std::__shared_weak_count *v80;
  unint64_t v81;
  unint64_t v82;
  std::__shared_count *v83;
  std::__shared_weak_count *v84;
  unsigned int v85;
  uint64_t v86;
  std::__shared_weak_count *v87;
  unint64_t v88;
  unint64_t v89;
  std::__shared_count *v90;
  std::__shared_weak_count *v91;
  unsigned int v92;
  uint64_t v93;
  unint64_t v94;
  std::__shared_weak_count *v95;
  unint64_t v96;
  std::__shared_count *v97;
  std::__shared_weak_count *v98;
  unsigned int v99;
  uint64_t v100;
  std::__shared_weak_count *v101;
  char *v102;
  unint64_t v103;
  unsigned int *v104;
  char *v105;
  unsigned int v106;
  BOOL v107;
  unint64_t v108;
  unint64_t v109;
  unint64_t *v110;
  unint64_t *v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  unint64_t v115;
  __int128 v116;
  unint64_t v117;
  unint64_t *v118;
  unint64_t *v119;
  char v120;
  std::__shared_weak_count *v121;
  unint64_t *v122;
  unint64_t v123;
  int v124;
  std::__shared_weak_count *v125;
  unint64_t *v126;
  unint64_t v127;
  char *v128;
  char *v129;
  unint64_t v130;
  unint64_t v131;
  char *v132;
  char *v133;
  unsigned int v134;
  _QWORD *v135;
  _QWORD *v136;
  unint64_t v137;
  unint64_t v138;
  unint64_t *v139;
  _QWORD *v140;
  unint64_t v141;
  char *v142;
  char *v143;
  unint64_t v144;
  unint64_t v145;
  char *v146;
  char *v147;
  unsigned int v148;
  _QWORD *v149;
  std::string *p_p;
  std::string::size_type size;
  _QWORD *v152;
  _QWORD *v153;
  int v154;
  char *v155;
  char *v156;
  char *v157;
  uint64_t v158;
  unint64_t v159;
  unint64_t v160;
  unsigned int *v161;
  char *v162;
  unsigned int v163;
  unint64_t v164;
  unint64_t v165;
  unsigned int *v166;
  char *v167;
  unsigned int v168;
  uint64_t v169;
  _QWORD *v170;
  std::string *v171;
  std::string::size_type v172;
  _QWORD *v173;
  _QWORD *v174;
  _QWORD *v175;
  _QWORD *v176;
  const char *v177;
  uint64_t v178;
  _QWORD *v179;
  int v180;
  char *v181;
  char *v182;
  char *v183;
  uint64_t v184;
  _QWORD *v185;
  std::string *v186;
  std::string::size_type v187;
  _QWORD *v188;
  _QWORD *v189;
  unint64_t v190;
  unint64_t v191;
  unsigned int *v192;
  char *v193;
  unsigned int v194;
  unint64_t v195;
  unint64_t v196;
  unsigned int *v197;
  char *v198;
  unsigned int v199;
  uint64_t v200;
  _QWORD *v201;
  std::string *v202;
  std::string::size_type v203;
  _QWORD *v204;
  _QWORD *v205;
  _QWORD *v206;
  _QWORD *v207;
  const char *v208;
  uint64_t v209;
  _QWORD *v210;
  char *v211;
  char *v212;
  char *v213;
  uint64_t v214;
  _QWORD *v215;
  std::string *v216;
  std::string::size_type v217;
  _QWORD *v218;
  _QWORD *v219;
  unint64_t v220;
  unint64_t v221;
  unsigned int *v222;
  char *v223;
  unsigned int v224;
  unint64_t v225;
  unint64_t v226;
  unsigned int *v227;
  char *v228;
  unsigned int v229;
  uint64_t v230;
  _QWORD *v231;
  std::string *v232;
  std::string::size_type v233;
  _QWORD *v234;
  _QWORD *v235;
  _QWORD *v236;
  _QWORD *v237;
  const char *v238;
  uint64_t v239;
  _QWORD *v240;
  int v241;
  char *v242;
  char *v243;
  char *v244;
  uint64_t v245;
  _QWORD *v246;
  std::string *v247;
  std::string::size_type v248;
  _QWORD *v249;
  _QWORD *v250;
  unint64_t v251;
  unint64_t v252;
  unsigned int *v253;
  char *v254;
  unsigned int v255;
  unint64_t v256;
  unint64_t v257;
  unsigned int *v258;
  char *v259;
  unsigned int v260;
  uint64_t v261;
  _QWORD *v262;
  std::string *v263;
  std::string::size_type v264;
  _QWORD *v265;
  _QWORD *v266;
  _QWORD *v267;
  _QWORD *v268;
  const char *v269;
  uint64_t v270;
  _QWORD *v271;
  int v272;
  char *v273;
  char *v274;
  char *v275;
  uint64_t v276;
  _QWORD *v277;
  std::string *v278;
  std::string::size_type v279;
  _QWORD *v280;
  _QWORD *v281;
  unint64_t v282;
  unint64_t v283;
  unsigned int *v284;
  char *v285;
  unsigned int v286;
  unint64_t v287;
  unint64_t v288;
  unsigned int *v289;
  char *v290;
  unsigned int v291;
  uint64_t v292;
  _QWORD *v293;
  std::string *v294;
  std::string::size_type v295;
  _QWORD *v296;
  _QWORD *v297;
  _QWORD *v298;
  _QWORD *v299;
  const char *v300;
  uint64_t v301;
  _QWORD *v302;
  char *v303;
  char *v304;
  char *v305;
  uint64_t v306;
  _QWORD *v307;
  std::string *v308;
  std::string::size_type v309;
  _QWORD *v310;
  _QWORD *v311;
  unint64_t v312;
  unint64_t v313;
  unsigned int *v314;
  char *v315;
  unsigned int v316;
  unint64_t v317;
  unint64_t v318;
  unsigned int *v319;
  char *v320;
  unsigned int v321;
  uint64_t v322;
  _QWORD *v323;
  std::string *v324;
  std::string::size_type v325;
  _QWORD *v326;
  _QWORD *v327;
  _QWORD *v328;
  _QWORD *v329;
  const char *v330;
  uint64_t v331;
  _QWORD *v332;
  char *v333;
  char *v334;
  char *v335;
  uint64_t v336;
  _QWORD *v337;
  std::string *v338;
  std::string::size_type v339;
  _QWORD *v340;
  _QWORD *v341;
  unint64_t v342;
  unint64_t v343;
  unsigned int *v344;
  char *v345;
  unsigned int v346;
  unint64_t v347;
  unint64_t v348;
  unsigned int *v349;
  char *v350;
  unsigned int v351;
  uint64_t v352;
  _QWORD *v353;
  std::string *v354;
  std::string::size_type v355;
  _QWORD *v356;
  _QWORD *v357;
  _QWORD *v358;
  _QWORD *v359;
  const char *v360;
  uint64_t v361;
  _QWORD *v362;
  char *v363;
  char *v364;
  char *v365;
  uint64_t v366;
  _QWORD *v367;
  std::string *v368;
  std::string::size_type v369;
  _QWORD *v370;
  _QWORD *v371;
  unint64_t v372;
  unint64_t v373;
  unsigned int *v374;
  char *v375;
  unsigned int v376;
  unint64_t v377;
  unint64_t v378;
  unsigned int *v379;
  char *v380;
  unsigned int v381;
  uint64_t v382;
  _QWORD *v383;
  std::string *v384;
  std::string::size_type v385;
  _QWORD *v386;
  _QWORD *v387;
  _QWORD *v388;
  _QWORD *v389;
  const char *v390;
  uint64_t v391;
  _QWORD *v392;
  char *v393;
  char *v394;
  char *v395;
  uint64_t v396;
  _QWORD *v397;
  std::string *v398;
  std::string::size_type v399;
  _QWORD *v400;
  _QWORD *v401;
  unint64_t v402;
  unint64_t v403;
  unsigned int *v404;
  char *v405;
  unsigned int v406;
  unint64_t v407;
  unint64_t v408;
  unsigned int *v409;
  char *v410;
  unsigned int v411;
  uint64_t v412;
  _QWORD *v413;
  std::string *v414;
  std::string::size_type v415;
  _QWORD *v416;
  _QWORD *v417;
  _QWORD *v418;
  _QWORD *v419;
  const char *v420;
  uint64_t v421;
  _QWORD *v422;
  int v423;
  char *v424;
  char *v425;
  char *v426;
  uint64_t v427;
  _QWORD *v428;
  std::string *v429;
  std::string::size_type v430;
  _QWORD *v431;
  _QWORD *v432;
  unint64_t v433;
  unint64_t v434;
  unsigned int *v435;
  char *v436;
  unsigned int v437;
  unint64_t v438;
  unint64_t v439;
  unsigned int *v440;
  char *v441;
  unsigned int v442;
  uint64_t v443;
  _QWORD *v444;
  std::string *v445;
  std::string::size_type v446;
  _QWORD *v447;
  _QWORD *v448;
  _QWORD *v449;
  _QWORD *v450;
  const char *v451;
  uint64_t v452;
  _QWORD *v453;
  char *v454;
  char *v455;
  char *v456;
  uint64_t v457;
  _QWORD *v458;
  std::string *v459;
  std::string::size_type v460;
  _QWORD *v461;
  _QWORD *v462;
  unint64_t v463;
  unint64_t v464;
  unsigned int *v465;
  char *v466;
  unsigned int v467;
  unint64_t v468;
  unint64_t v469;
  unsigned int *v470;
  char *v471;
  unsigned int v472;
  int v473;
  uint64_t v474;
  _QWORD *v475;
  std::string *v476;
  std::string::size_type v477;
  _QWORD *v478;
  _QWORD *v479;
  _QWORD *v480;
  _QWORD *v481;
  const char *v482;
  uint64_t v483;
  _QWORD *v484;
  char *v485;
  char *v486;
  uint64_t v487;
  _QWORD *v488;
  std::string *v489;
  std::string::size_type v490;
  _QWORD *v491;
  _QWORD *v492;
  unint64_t v493;
  unint64_t v494;
  unint64_t *v495;
  char *v496;
  unint64_t v497;
  _QWORD *v498;
  std::string *v499;
  std::string::size_type v500;
  _QWORD *v501;
  _QWORD *v502;
  BOOL v503;
  char v504;
  std::string::size_type v505;
  std::string *v506;
  _QWORD *v507;
  std::string *v508;
  std::string::size_type v509;
  _QWORD *v510;
  _QWORD *v511;
  uint64_t v512;
  const void *v513;
  uint64_t v514;
  uint64_t v515;
  uint64_t v516;
  std::string *v517;
  __int128 v518;
  std::string *v519;
  __int128 v520;
  void **v521;
  uint64_t v522;
  _BOOL4 v523;
  unint64_t v524;
  __int128 v525;
  unint64_t v526;
  __int128 v527;
  std::__shared_weak_count *v528;
  std::__shared_weak_count *v529;
  unint64_t *p_shared_owners;
  unint64_t v531;
  unint64_t v532;
  unint64_t v533;
  unint64_t v534;
  char *v535;
  unint64_t *v536;
  __int128 v537;
  unint64_t v538;
  std::__shared_weak_count *v539;
  unint64_t *v540;
  unint64_t v541;
  unint64_t *v542;
  __int128 v543;
  __int128 v544;
  __int128 v545;
  unint64_t v546;
  __int128 v547;
  unint64_t v548;
  std::string::size_type v549;
  uint64_t v550;
  uint64_t v551;
  uint64_t v552;
  unint64_t v553;
  char *v554;
  __int128 v555;
  __int128 v556;
  __int128 v557;
  unint64_t v558;
  uint64_t v559;
  unint64_t *v560;
  uint64_t v561;
  std::string::size_type v562;
  char *v563;
  __int128 v564;
  __int128 v565;
  __int128 v566;
  __int128 v567;
  __int128 v568;
  unint64_t v569;
  unint64_t *v570;
  __int128 v571;
  __int128 v572;
  __int128 v573;
  unint64_t v574;
  __int128 v575;
  unint64_t v576;
  std::string::size_type v577;
  char *v578;
  std::__shared_weak_count *v579;
  unint64_t *v580;
  unint64_t v581;
  std::__shared_weak_count *v582;
  unint64_t *v583;
  unint64_t v584;
  std::__shared_weak_count *v585;
  unint64_t *v586;
  unint64_t v587;
  int64x2_t v588;
  unint64_t v589;
  __int128 v590;
  __int128 v591;
  __int128 v592;
  __int128 v593;
  __int128 v594;
  char *v595;
  int64_t v596;
  unint64_t v597;
  int v598;
  std::__shared_weak_count *v599;
  std::__shared_weak_count *v600;
  int v601;
  std::__shared_weak_count *v602;
  std::__shared_weak_count *v603;
  std::__shared_weak_count *v604;
  unint64_t *v605;
  std::string v606;
  void *v607[2];
  int64_t v608;
  uint64_t v609;
  std::__shared_weak_count *v610;
  uint64_t v611;
  std::__shared_weak_count *v612;
  std::string v613;
  std::string v614;
  __int128 v615;
  __int128 v616;
  __int128 v617;
  __int128 v618;
  __int128 v619;
  unint64_t v620;
  __int128 v621;
  __int128 v622;
  unint64_t v623;
  char v624;
  uint64_t v625;
  std::__shared_weak_count *v626;
  char v627;
  std::string __p;
  char *v629;
  uint64_t v630;
  unint64_t v631;
  char v632;
  __int128 v633;
  int64x2_t v634;
  __int128 v635;
  std::string v636;
  __int128 v637;
  __int128 v638;
  __int128 v639;
  __int128 v640;
  __int128 v641;
  unint64_t v642;
  __int128 v643;
  __int128 v644;
  unint64_t v645;
  char v646;
  __int128 v647;
  char v648;

  v14 = a2;
  v16 = a11;
  v17 = a8;
  v609 = 0;
  v610 = 0;
  v611 = 0;
  v612 = 0;
  v18 = *(unint64_t **)(a11 + 992);
  v19 = *(unint64_t **)(a11 + 1000);
  if (v18 == v19)
  {
    v20 = *(unint64_t **)(a11 + 992);
  }
  else
  {
    v20 = *(unint64_t **)(a11 + 1000);
    if (*(v19 - 27) >= a8)
    {
      v21 = 0x84BDA12F684BDA13 * (v19 - v18);
      v22 = *(unint64_t **)(a11 + 992);
      do
      {
        v23 = v21 >> 1;
        v24 = &v22[27 * (v21 >> 1)];
        v26 = *v24;
        v25 = v24 + 27;
        v21 += ~(v21 >> 1);
        if (v26 < a8)
          v22 = v25;
        else
          v21 = v23;
      }
      while (v21);
      v20 = *(unint64_t **)(a11 + 1000);
      if (v22 != v19)
      {
        v20 = v22;
        if (*v22 == a8)
        {
LABEL_159:
          v124 = 1;
          v125 = v610;
          if (!v610)
            goto LABEL_165;
          goto LABEL_162;
        }
      }
    }
  }
  v613.__r_.__value_.__r.__words[0] = a8;
  *(__n128 *)&v613.__r_.__value_.__r.__words[1] = a9;
  v614.__r_.__value_.__r.__words[0] = a7;
  v614.__r_.__value_.__l.__size_ = a6;
  *(double *)&v614.__r_.__value_.__r.__words[2] = a10;
  v615 = 0u;
  v616 = 0u;
  v617 = 0u;
  v618 = 0u;
  v619 = 0u;
  v625 = 0;
  v626 = 0;
  v620 = 0;
  v623 = 0xBFF0000000000000;
  v624 = 0;
  v627 = 0;
  v28 = *(char **)(a11 + 416);
  v27 = *(char **)(a11 + 424);
  v29 = v27 - v28;
  if (v27 == v28)
    goto LABEL_153;
  a2 = &v615;
  v30 = v29 >> 4;
  v31 = *(char **)(a11 + 416);
  v32 = v29 >> 4;
  do
  {
    v33 = v32 >> 1;
    v34 = (unsigned int *)&v31[16 * (v32 >> 1)];
    v36 = *v34;
    v35 = (char *)(v34 + 4);
    v32 += ~(v32 >> 1);
    if (v36 < v14)
      v31 = v35;
    else
      v32 = v33;
  }
  while (v32);
  if (v31 == v27 || *(_DWORD *)v31 != v14)
  {
LABEL_153:
    v120 = 1;
    v121 = v612;
    if (!v612)
      goto LABEL_158;
    goto LABEL_154;
  }
  v37 = *((_QWORD *)v31 + 1);
  *(_QWORD *)&v615 = v37;
  ++*(_DWORD *)(*((_QWORD *)v31 + 1) + 8);
  do
  {
    v38 = v30 >> 1;
    v39 = (unsigned int *)&v28[16 * (v30 >> 1)];
    v41 = *v39;
    v40 = (char *)(v39 + 4);
    v30 += ~(v30 >> 1);
    if (v41 < a4)
      v28 = v40;
    else
      v30 = v38;
  }
  while (v30);
  if (v28 == v27 || *(_DWORD *)v28 != a4)
  {
    v100 = 0;
    v93 = 0;
    v86 = 0;
    shared_owners = 0;
    v72 = 0;
    v66 = 0;
    v57 = 0;
    v51 = 0;
    v42 = 0;
LABEL_133:
    if (v37)
      --*(_DWORD *)(v37 + 8);
    if (v42)
      --*(_DWORD *)(v42 + 8);
    if (v51)
      --*(_DWORD *)(v51 + 8);
    if (v57)
      --*(_DWORD *)(v57 + 8);
    if (v66)
      --*(_DWORD *)(v66 + 8);
    if (v72)
      --*(_DWORD *)(v72 + 8);
    if (shared_owners)
      --*(_DWORD *)(shared_owners + 8);
    if (v86)
      --*(_DWORD *)(v86 + 8);
    if (v93)
      --*(_DWORD *)(v93 + 8);
    if (v100)
      --*(_DWORD *)(v100 + 8);
    goto LABEL_153;
  }
  v42 = *((_QWORD *)v28 + 1);
  *((_QWORD *)&v615 + 1) = v42;
  ++*(_DWORD *)(*((_QWORD *)v28 + 1) + 8);
  v44 = *(char **)(a11 + 128);
  v43 = *(char **)(a11 + 136);
  v45 = v44;
  if (v43 != v44)
  {
    v46 = (v43 - v44) >> 4;
    v45 = *(char **)(a11 + 128);
    do
    {
      v47 = v46 >> 1;
      v48 = (unsigned int *)&v45[16 * (v46 >> 1)];
      v50 = *v48;
      v49 = (char *)(v48 + 4);
      v46 += ~(v46 >> 1);
      if (v50 < a1)
        v45 = v49;
      else
        v46 = v47;
    }
    while (v46);
  }
  if (v45 == v43 || *(_DWORD *)v45 != a1)
  {
    v100 = 0;
    v93 = 0;
    v86 = 0;
    shared_owners = 0;
    v72 = 0;
    v66 = 0;
    v57 = 0;
    v51 = 0;
    goto LABEL_133;
  }
  v51 = *((_QWORD *)v45 + 1);
  *(_QWORD *)&v616 = v51;
  ++*(_DWORD *)(*((_QWORD *)v45 + 1) + 8);
  if (v43 != v44)
  {
    v52 = (v43 - v44) >> 4;
    do
    {
      v53 = v52 >> 1;
      v54 = (unsigned int *)&v44[16 * (v52 >> 1)];
      v56 = *v54;
      v55 = (char *)(v54 + 4);
      v52 += ~(v52 >> 1);
      if (v56 < a3)
        v44 = v55;
      else
        v52 = v53;
    }
    while (v52);
  }
  if (v44 == v43 || *(_DWORD *)v44 != a3)
  {
    v100 = 0;
    v93 = 0;
    v86 = 0;
    shared_owners = 0;
    v72 = 0;
    v66 = 0;
    v57 = 0;
    goto LABEL_133;
  }
  v57 = *((_QWORD *)v44 + 1);
  *((_QWORD *)&v616 + 1) = v57;
  ++*(_DWORD *)(*((_QWORD *)v44 + 1) + 8);
  v58 = *(char **)(a11 + 512);
  v59 = *(char **)(a11 + 520);
  v60 = v58;
  if (v59 != v58)
  {
    v61 = (v59 - v58) >> 4;
    v60 = *(char **)(a11 + 512);
    do
    {
      v62 = v61 >> 1;
      v63 = (unsigned int *)&v60[16 * (v61 >> 1)];
      v65 = *v63;
      v64 = (char *)(v63 + 4);
      v61 += ~(v61 >> 1);
      if (v65 < v14)
        v60 = v64;
      else
        v61 = v62;
    }
    while (v61);
  }
  if (v60 == v59 || *(_DWORD *)v60 != v14)
  {
    v100 = 0;
    v93 = 0;
    v86 = 0;
    shared_owners = 0;
    v72 = 0;
    v66 = 0;
    goto LABEL_133;
  }
  v66 = *((_QWORD *)v60 + 1);
  *(_QWORD *)&v617 = v66;
  ++*(_DWORD *)(*((_QWORD *)v60 + 1) + 8);
  if (v59 != v58)
  {
    v67 = (v59 - v58) >> 4;
    do
    {
      v68 = v67 >> 1;
      v69 = (unsigned int *)&v58[16 * (v67 >> 1)];
      v71 = *v69;
      v70 = (char *)(v69 + 4);
      v67 += ~(v67 >> 1);
      if (v71 < a4)
        v58 = v70;
      else
        v67 = v68;
    }
    while (v67);
  }
  if (v58 == v59 || *(_DWORD *)v58 != a4)
  {
    v100 = 0;
    v93 = 0;
    v86 = 0;
    shared_owners = 0;
    v72 = 0;
    goto LABEL_133;
  }
  v72 = *((_QWORD *)v58 + 1);
  *((_QWORD *)&v617 + 1) = v72;
  ++*(_DWORD *)(*((_QWORD *)v58 + 1) + 8);
  v73 = *(std::__shared_weak_count **)(a11 + 608);
  v599 = *(std::__shared_weak_count **)(a11 + 616);
  v603 = v73;
  if (v599 != v73)
  {
    v74 = ((char *)v599 - (char *)v73) >> 4;
    do
    {
      v75 = v74 >> 1;
      v76 = (std::__shared_weak_count *)((char *)v73 + 16 * (v74 >> 1));
      v78 = v76->__vftable;
      v77 = (std::__shared_weak_count *)&v76[1];
      v74 += ~(v74 >> 1);
      if (v78 < v14)
        v73 = v77;
      else
        v74 = v75;
    }
    while (v74);
  }
  if (v73 == v599 || LODWORD(v73->__vftable) != v14)
  {
    v100 = 0;
    v93 = 0;
    v86 = 0;
    shared_owners = 0;
    goto LABEL_133;
  }
  shared_owners = v73->__shared_owners_;
  *(_QWORD *)&v618 = shared_owners;
  ++*(_DWORD *)(v73->__shared_owners_ + 8);
  v80 = v603;
  if (v599 != v603)
  {
    v81 = ((char *)v599 - (char *)v603) >> 4;
    do
    {
      v82 = v81 >> 1;
      v83 = (std::__shared_weak_count *)((char *)v80 + 16 * (v81 >> 1));
      v85 = v83->__vftable;
      v84 = (std::__shared_weak_count *)&v83[1];
      v81 += ~(v81 >> 1);
      if (v85 < a4)
        v80 = v84;
      else
        v81 = v82;
    }
    while (v81);
  }
  if (v80 == v599 || LODWORD(v80->__vftable) != a4)
  {
    v100 = 0;
    v93 = 0;
    v86 = 0;
    goto LABEL_133;
  }
  v597 = v17;
  v86 = v80->__shared_owners_;
  *((_QWORD *)&v618 + 1) = v86;
  ++*(_DWORD *)(v80->__shared_owners_ + 8);
  v87 = *(std::__shared_weak_count **)(a11 + 704);
  v600 = *(std::__shared_weak_count **)(a11 + 712);
  v604 = v87;
  if (v600 != v87)
  {
    v88 = ((char *)v600 - (char *)v87) >> 4;
    do
    {
      v89 = v88 >> 1;
      v90 = (std::__shared_weak_count *)((char *)v87 + 16 * (v88 >> 1));
      v92 = v90->__vftable;
      v91 = (std::__shared_weak_count *)&v90[1];
      v88 += ~(v88 >> 1);
      if (v92 < v14)
        v87 = v91;
      else
        v88 = v89;
    }
    while (v88);
  }
  if (v87 == v600 || LODWORD(v87->__vftable) != v14)
  {
    v100 = 0;
    v93 = 0;
LABEL_132:
    v17 = v597;
    v16 = a11;
    goto LABEL_133;
  }
  v93 = v87->__shared_owners_;
  *(_QWORD *)&v619 = v93;
  ++*(_DWORD *)(v87->__shared_owners_ + 8);
  if (v600 == v604)
  {
    v95 = v604;
  }
  else
  {
    v94 = ((char *)v600 - (char *)v604) >> 4;
    v95 = v604;
    do
    {
      v96 = v94 >> 1;
      v97 = (std::__shared_weak_count *)((char *)v95 + 16 * (v94 >> 1));
      v99 = v97->__vftable;
      v98 = (std::__shared_weak_count *)&v97[1];
      v94 += ~(v94 >> 1);
      if (v99 < a4)
        v95 = v98;
      else
        v94 = v96;
    }
    while (v94);
  }
  if (v95 == v600 || (v101 = v95, LODWORD(v95->__vftable) != a4))
  {
    v100 = 0;
    goto LABEL_132;
  }
  v100 = v95->__shared_owners_;
  *((_QWORD *)&v619 + 1) = v101->__shared_owners_;
  ++*(_DWORD *)(v101->__shared_owners_ + 8);
  v102 = *(char **)(a11 + 800);
  v595 = *(char **)(a11 + 808);
  if (v595 != v102)
  {
    v103 = (v595 - v102) >> 4;
    do
    {
      v104 = (unsigned int *)&v102[16 * (v103 >> 1)];
      v106 = *v104;
      v105 = (char *)(v104 + 4);
      v107 = v106 >= a5;
      if (v106 >= a5)
        v103 >>= 1;
      else
        v103 += ~(v103 >> 1);
      if (!v107)
        v102 = v105;
    }
    while (v103);
  }
  if (v102 == v595 || *(_DWORD *)v102 != a5)
    goto LABEL_132;
  v108 = *((_QWORD *)v102 + 1);
  v620 = v108;
  ++*(_DWORD *)(*((_QWORD *)v102 + 1) + 8);
  if (!*(_BYTE *)(v37 + 20)
    && !*(_BYTE *)(v42 + 20)
    && !*(_BYTE *)(v51 + 20)
    && !*(_BYTE *)(v57 + 20)
    && !*(_BYTE *)(v66 + 20)
    && !*(_BYTE *)(v72 + 20)
    && !*(_BYTE *)(shared_owners + 20)
    && !*(_BYTE *)(v86 + 20)
    && !*(_BYTE *)(v93 + 20)
    && !*(_BYTE *)(v100 + 20)
    && !*(_BYTE *)(v108 + 20))
  {
    --*(_DWORD *)(v37 + 8);
    --*(_DWORD *)(v42 + 8);
    v615 = 0u;
    --*(_DWORD *)(v51 + 8);
    --*(_DWORD *)(v57 + 8);
    v616 = 0u;
    --*(_DWORD *)(v66 + 8);
    --*(_DWORD *)(v72 + 8);
    v617 = 0u;
    --*(_DWORD *)(shared_owners + 8);
    --*(_DWORD *)(v86 + 8);
    v618 = 0u;
    --*(_DWORD *)(v93 + 8);
    --*(_DWORD *)(v100 + 8);
    v619 = 0u;
    --*(_DWORD *)(v108 + 8);
    v120 = 1;
    v17 = v597;
    v16 = a11;
    v121 = v612;
    if (!v612)
      goto LABEL_158;
    goto LABEL_154;
  }
  v634.i64[0] = v597;
  v634.i64[1] = v597;
  v635 = *(_OWORD *)&v613.__r_.__value_.__r.__words[1];
  v636 = v614;
  v639 = v617;
  v640 = v618;
  v641 = v619;
  v642 = v620;
  v637 = v615;
  v638 = v616;
  v643 = v621;
  v644 = v622;
  v645 = v623;
  v646 = v624;
  v647 = 0uLL;
  v625 = 0;
  v626 = 0;
  v648 = 0;
  if (v19 == v20 || *v20 != v597)
  {
    v596 = 0x84BDA12F684BDA13 * (v20 - v18);
    v109 = *(_QWORD *)(a11 + 1008);
    if ((unint64_t)v19 < v109)
    {
      if (v20 == v19)
      {
        *v19 = v597;
        v542 = &v18[v20 - v18];
        v542[1] = v597;
        *((_OWORD *)v542 + 1) = v635;
        v543 = *(_OWORD *)&v636.__r_.__value_.__l.__data_;
        v542[6] = v636.__r_.__value_.__r.__words[2];
        *((_OWORD *)v542 + 2) = v543;
        v545 = v640;
        v544 = v641;
        v546 = v642;
        *(_OWORD *)(v542 + 11) = v639;
        v542[17] = v546;
        *(_OWORD *)(v542 + 15) = v544;
        *(_OWORD *)(v542 + 13) = v545;
        v547 = v637;
        *(_OWORD *)(v542 + 9) = v638;
        *(_OWORD *)(v542 + 7) = v547;
        *((_OWORD *)v542 + 9) = v643;
        *((_OWORD *)v542 + 10) = v644;
        v548 = v645;
        *((_BYTE *)v542 + 184) = v646;
        v542[22] = v548;
        v542[24] = 0;
        v542[25] = 0;
        v647 = 0uLL;
        *((_BYTE *)v542 + 208) = 0;
        *(_QWORD *)(a11 + 1000) = v19 + 27;
      }
      else
      {
        *(_OWORD *)v607 = *(_OWORD *)&v613.__r_.__value_.__r.__words[1];
        __p = v614;
        v593 = v638;
        v594 = v637;
        v591 = v640;
        v592 = v639;
        v590 = v641;
        v589 = v642;
        *(_OWORD *)&v606.__r_.__value_.__l.__data_ = v621;
        v633 = v622;
        v632 = v624;
        v631 = v623;
        v110 = v19;
        v647 = 0uLL;
        v605 = v19 - 27;
        if ((unint64_t)v19 >= 0xD8)
        {
          v111 = v19 - 27;
          v110 = v19;
          do
          {
            *v110 = *v111;
            v110[1] = v111[1];
            *((_OWORD *)v110 + 1) = *((_OWORD *)v111 + 1);
            v112 = *((_OWORD *)v111 + 2);
            v110[6] = v111[6];
            *((_OWORD *)v110 + 2) = v112;
            v113 = *(_OWORD *)(v111 + 13);
            v114 = *(_OWORD *)(v111 + 15);
            v115 = v111[17];
            *(_OWORD *)(v110 + 11) = *(_OWORD *)(v111 + 11);
            v110[17] = v115;
            *(_OWORD *)(v110 + 15) = v114;
            *(_OWORD *)(v110 + 13) = v113;
            v116 = *(_OWORD *)(v111 + 7);
            *(_OWORD *)(v110 + 9) = *(_OWORD *)(v111 + 9);
            *(_OWORD *)(v110 + 7) = v116;
            *((_OWORD *)v110 + 9) = *((_OWORD *)v111 + 9);
            *((_OWORD *)v110 + 10) = *((_OWORD *)v111 + 10);
            v117 = v111[22];
            *((_BYTE *)v110 + 184) = *((_BYTE *)v111 + 184);
            v110[22] = v117;
            *((_OWORD *)v110 + 12) = *((_OWORD *)v111 + 12);
            v111[24] = 0;
            v111[25] = 0;
            *((_BYTE *)v110 + 208) = *((_BYTE *)v111 + 208);
            v110 += 27;
            v111 += 27;
          }
          while (v111 < v19);
        }
        *(_QWORD *)(a11 + 1000) = v110;
        if (v19 != v20 + 27)
        {
          v118 = v19 - 27;
          v119 = v19;
          do
          {
            v524 = *(v118 - 27);
            v118 -= 27;
            *(v119 - 27) = v524;
            v119 -= 27;
            v119[1] = v118[1];
            *((_OWORD *)v119 + 1) = *((_OWORD *)v118 + 1);
            v525 = *((_OWORD *)v118 + 2);
            v119[6] = v118[6];
            *((_OWORD *)v119 + 2) = v525;
            v119[7] = v118[7];
            v119[8] = v118[8];
            v119[9] = v118[9];
            v119[10] = v118[10];
            v119[11] = v118[11];
            v119[12] = v118[12];
            v119[13] = v118[13];
            v119[14] = v118[14];
            v119[15] = v118[15];
            v119[16] = v118[16];
            v119[17] = v118[17];
            *((_OWORD *)v119 + 9) = *((_OWORD *)v118 + 9);
            *((_OWORD *)v119 + 10) = *((_OWORD *)v118 + 10);
            v526 = v118[22];
            *((_BYTE *)v119 + 184) = *((_BYTE *)v118 + 184);
            v119[22] = v526;
            v527 = *((_OWORD *)v118 + 12);
            v118[24] = 0;
            v118[25] = 0;
            v528 = (std::__shared_weak_count *)v119[25];
            *((_OWORD *)v119 + 12) = v527;
            if (v528)
            {
              v529 = v528;
              p_shared_owners = (unint64_t *)&v528->__shared_owners_;
              do
                v531 = __ldaxr(p_shared_owners);
              while (__stlxr(v531 - 1, p_shared_owners));
              if (!v531)
              {
                v602 = v529;
                ((void (*)(std::__shared_weak_count *, __int128 *))v529->__on_zero_shared)(v529, a2);
                std::__shared_weak_count::__release_weak(v602);
              }
            }
            *((_BYTE *)v19 - 8) = *((_BYTE *)v605 - 8);
            v19 = v119;
            v605 = v118;
          }
          while (v118 != v20);
        }
        *(int64x2_t *)v20 = vdupq_n_s64(v597);
        v536 = &v18[v20 - v18];
        *((_OWORD *)v536 + 1) = *(_OWORD *)v607;
        *(std::string *)(v536 + 4) = __p;
        *(_OWORD *)(v536 + 7) = v594;
        *(_OWORD *)(v536 + 9) = v593;
        *(_OWORD *)(v536 + 11) = v592;
        *(_OWORD *)(v536 + 13) = v591;
        *(_OWORD *)(v536 + 15) = v590;
        v536[17] = v589;
        v537 = v633;
        *((_OWORD *)v536 + 9) = *(_OWORD *)&v606.__r_.__value_.__l.__data_;
        *((_OWORD *)v536 + 10) = v537;
        v538 = v631;
        *((_BYTE *)v536 + 184) = v632;
        v536[22] = v538;
        v539 = (std::__shared_weak_count *)v536[25];
        v536[24] = 0;
        v536[25] = 0;
        if (v539)
        {
          v540 = (unint64_t *)&v539->__shared_owners_;
          do
            v541 = __ldaxr(v540);
          while (__stlxr(v541 - 1, v540));
          if (!v541)
          {
            ((void (*)(std::__shared_weak_count *, __int128 *))v539->__on_zero_shared)(v539, a2);
            std::__shared_weak_count::__release_weak(v539);
          }
        }
        LOBYTE(v18[v20 - v18 + 26]) = 0;
      }
LABEL_768:
      v582 = (std::__shared_weak_count *)*((_QWORD *)&v647 + 1);
      if (*((_QWORD *)&v647 + 1))
      {
        v583 = (unint64_t *)(*((_QWORD *)&v647 + 1) + 8);
        do
          v584 = __ldaxr(v583);
        while (__stlxr(v584 - 1, v583));
        if (!v584)
        {
          ((void (*)(std::__shared_weak_count *, __int128 *))v582->__on_zero_shared)(v582, a2);
          std::__shared_weak_count::__release_weak(v582);
        }
      }
      goto LABEL_773;
    }
    v532 = 0x84BDA12F684BDA13 * (v19 - v18) + 1;
    if (v532 > 0x12F684BDA12F684)
      sub_20E867F44();
    v533 = 0x84BDA12F684BDA13 * ((uint64_t)(v109 - (_QWORD)v18) >> 3);
    if (2 * v533 > v532)
      v532 = 2 * v533;
    if (v533 >= 0x97B425ED097B42)
      v534 = 0x12F684BDA12F684;
    else
      v534 = v532;
    v630 = a11 + 1008;
    if (v534)
    {
      if (v534 > 0x12F684BDA12F684)
        sub_20E877A38();
      v535 = (char *)operator new(216 * v534);
    }
    else
    {
      v535 = 0;
    }
    v549 = (std::string::size_type)&v535[8 * (v20 - v18)];
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v535;
    __p.__r_.__value_.__l.__size_ = v549;
    __p.__r_.__value_.__r.__words[2] = v549;
    v629 = &v535[216 * v534];
    v588 = vdupq_n_s64(v597);
    if (v596 == v534)
    {
      if ((char *)v20 - (char *)v18 >= 1)
      {
        v550 = v596 + 2;
        if (v596 >= -1)
          v550 = v596 + 1;
        v551 = v550 >> 1;
        v552 = sub_20F5B6E44((uint64_t)&v535[216 * v596], (uint64_t)&v535[216 * v596], v549 - 216 * (v550 >> 1));
        v549 = __p.__r_.__value_.__l.__size_ - 216 * v551;
        __p.__r_.__value_.__l.__size_ = v549;
        v588 = v634;
        goto LABEL_750;
      }
      if (v18 == v20)
        v553 = 1;
      else
        v553 = 0x97B425ED097B426 * (v20 - v18);
      if (v553 > 0x12F684BDA12F684)
        sub_20E877A38();
      v554 = (char *)operator new(216 * v553);
      v549 = (std::string::size_type)&v554[216 * (v553 >> 2)];
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v554;
      __p.__r_.__value_.__l.__size_ = v549;
      v629 = &v554[216 * v553];
      if (v535)
        operator delete(v535);
    }
    v552 = v549;
LABEL_750:
    v555 = v635;
    *(int64x2_t *)v552 = v588;
    *(_OWORD *)(v552 + 16) = v555;
    *(std::string *)(v552 + 32) = v636;
    v556 = v640;
    *(_OWORD *)(v552 + 88) = v639;
    *(_OWORD *)(v552 + 104) = v556;
    *(_OWORD *)(v552 + 120) = v641;
    v557 = v638;
    *(_OWORD *)(v552 + 56) = v637;
    *(_QWORD *)(v552 + 136) = v642;
    *(_OWORD *)(v552 + 72) = v557;
    *(_OWORD *)(v552 + 144) = v643;
    *(_OWORD *)(v552 + 160) = v644;
    v558 = v645;
    *(_BYTE *)(v552 + 184) = v646;
    *(_QWORD *)(v552 + 176) = v558;
    *(_OWORD *)(v552 + 192) = v647;
    v647 = 0uLL;
    *(_BYTE *)(v552 + 208) = v648;
    v559 = v552 + 216;
    __p.__r_.__value_.__r.__words[2] = v552 + 216;
    v560 = *(unint64_t **)(a11 + 992);
    if (v560 != v20)
    {
      v561 = 0;
      do
      {
        v562 = v549 + v561 * 8;
        v563 = (char *)&v20[v561];
        *(_QWORD *)(v562 - 216) = v20[v561 - 27];
        *(_QWORD *)(v562 - 208) = v20[v561 - 26];
        *(_OWORD *)(v562 - 200) = *(_OWORD *)&v20[v561 - 25];
        v564 = *(_OWORD *)&v20[v561 - 23];
        *(_QWORD *)(v562 - 168) = v20[v561 - 21];
        *(_OWORD *)(v562 - 184) = v564;
        v566 = *(_OWORD *)&v20[v561 - 14];
        v565 = *(_OWORD *)&v20[v561 - 12];
        v567 = *(_OWORD *)&v20[v561 - 16];
        *(_QWORD *)(v562 - 80) = v20[v561 - 10];
        *(_OWORD *)(v562 - 112) = v566;
        *(_OWORD *)(v562 - 96) = v565;
        *(_OWORD *)(v562 - 128) = v567;
        v568 = *(_OWORD *)&v20[v561 - 18];
        *(_OWORD *)(v562 - 160) = *(_OWORD *)&v20[v561 - 20];
        *(_OWORD *)(v562 - 144) = v568;
        *(_OWORD *)(v562 - 72) = *(_OWORD *)&v20[v561 - 9];
        *(_OWORD *)(v562 - 56) = *(_OWORD *)&v20[v561 - 7];
        v569 = v20[v561 - 5];
        *(_BYTE *)(v562 - 32) = v20[v561 - 4];
        *(_QWORD *)(v562 - 40) = v569;
        *(_OWORD *)(v562 - 24) = *(_OWORD *)&v20[v561 - 3];
        *((_QWORD *)v563 - 3) = 0;
        *((_QWORD *)v563 - 2) = 0;
        *(_BYTE *)(v562 - 8) = v20[v561 - 1];
        v561 -= 27;
      }
      while (&v20[v561] != v560);
      v549 += v561 * 8;
    }
    v570 = *(unint64_t **)(a11 + 1000);
    if (v570 != v20)
    {
      do
      {
        *(_QWORD *)v559 = *v20;
        *(_QWORD *)(v559 + 8) = v20[1];
        *(_OWORD *)(v559 + 16) = *((_OWORD *)v20 + 1);
        v571 = *((_OWORD *)v20 + 2);
        *(_QWORD *)(v559 + 48) = v20[6];
        *(_OWORD *)(v559 + 32) = v571;
        v572 = *(_OWORD *)(v20 + 13);
        v573 = *(_OWORD *)(v20 + 15);
        v574 = v20[17];
        *(_OWORD *)(v559 + 88) = *(_OWORD *)(v20 + 11);
        *(_QWORD *)(v559 + 136) = v574;
        *(_OWORD *)(v559 + 120) = v573;
        *(_OWORD *)(v559 + 104) = v572;
        v575 = *(_OWORD *)(v20 + 7);
        *(_OWORD *)(v559 + 72) = *(_OWORD *)(v20 + 9);
        *(_OWORD *)(v559 + 56) = v575;
        *(_OWORD *)(v559 + 144) = *((_OWORD *)v20 + 9);
        *(_OWORD *)(v559 + 160) = *((_OWORD *)v20 + 10);
        v576 = v20[22];
        *(_BYTE *)(v559 + 184) = *((_BYTE *)v20 + 184);
        *(_QWORD *)(v559 + 176) = v576;
        *(_OWORD *)(v559 + 192) = *((_OWORD *)v20 + 12);
        v20[24] = 0;
        v20[25] = 0;
        *(_BYTE *)(v559 + 208) = *((_BYTE *)v20 + 208);
        v559 += 216;
        v20 += 27;
      }
      while (v20 != v570);
      v20 = *(unint64_t **)(a11 + 1000);
    }
    v577 = *(_QWORD *)(a11 + 992);
    *(_QWORD *)(a11 + 992) = v549;
    *(_QWORD *)(a11 + 1000) = v559;
    v578 = *(char **)(a11 + 1008);
    *(_QWORD *)(a11 + 1008) = v629;
    v629 = v578;
    __p.__r_.__value_.__r.__words[0] = v577;
    __p.__r_.__value_.__l.__size_ = v577;
    if (v20 != (unint64_t *)v577)
    {
      do
      {
        __p.__r_.__value_.__r.__words[2] = (std::string::size_type)(v20 - 27);
        v579 = (std::__shared_weak_count *)*(v20 - 2);
        if (v579)
        {
          v580 = (unint64_t *)&v579->__shared_owners_;
          do
            v581 = __ldaxr(v580);
          while (__stlxr(v581 - 1, v580));
          if (!v581)
          {
            ((void (*)(std::__shared_weak_count *))v579->__on_zero_shared)(v579);
            std::__shared_weak_count::__release_weak(v579);
          }
        }
        v20 = (unint64_t *)__p.__r_.__value_.__r.__words[2];
      }
      while (__p.__r_.__value_.__r.__words[2] != v577);
      v20 = (unint64_t *)__p.__r_.__value_.__r.__words[0];
    }
    if (v20)
      operator delete(v20);
    goto LABEL_768;
  }
LABEL_773:
  *(_BYTE *)(a11 + 1098) = 0;
  *(_BYTE *)(a11 + 1096) = 0;
  *(int64x2_t *)(a11 + 1080) = vaddq_s64(*(int64x2_t *)(a11 + 1080), (int64x2_t)xmmword_210378060);
  v585 = v626;
  if (v626)
  {
    v586 = (unint64_t *)&v626->__shared_owners_;
    do
      v587 = __ldaxr(v586);
    while (__stlxr(v587 - 1, v586));
    if (!v587)
    {
      ((void (*)(std::__shared_weak_count *, __int128 *))v585->__on_zero_shared)(v585, a2);
      std::__shared_weak_count::__release_weak(v585);
    }
  }
  v120 = 0;
  v17 = v597;
  v16 = a11;
  v121 = v612;
  if (v612)
  {
LABEL_154:
    v122 = (unint64_t *)&v121->__shared_owners_;
    do
      v123 = __ldaxr(v122);
    while (__stlxr(v123 - 1, v122));
    if (!v123)
    {
      ((void (*)(std::__shared_weak_count *, __int128 *))v121->__on_zero_shared)(v121, a2);
      std::__shared_weak_count::__release_weak(v121);
    }
  }
LABEL_158:
  if ((v120 & 1) != 0)
    goto LABEL_159;
  v124 = 0;
  *(_BYTE *)(v16 + 1876) = 0;
  *(_DWORD *)(v16 + 1872) = 0;
  v125 = v610;
  if (!v610)
    goto LABEL_165;
LABEL_162:
  v126 = (unint64_t *)&v125->__shared_owners_;
  do
    v127 = __ldaxr(v126);
  while (__stlxr(v127 - 1, v126));
  if (!v127)
  {
    ((void (*)(std::__shared_weak_count *))v125->__on_zero_shared)(v125);
    std::__shared_weak_count::__release_weak(v125);
    if (!v124)
      return;
    goto LABEL_166;
  }
LABEL_165:
  if (!v124)
    return;
LABEL_166:
  v128 = *(char **)(v16 + 800);
  v129 = *(char **)(v16 + 808);
  if (v129 != v128)
  {
    v130 = (v129 - v128) >> 4;
    do
    {
      v131 = v130 >> 1;
      v132 = &v128[16 * (v130 >> 1)];
      v134 = *(_DWORD *)v132;
      v133 = v132 + 16;
      v130 += ~(v130 >> 1);
      if (v134 < a5)
        v128 = v133;
      else
        v130 = v131;
    }
    while (v130);
  }
  if ((v128 == v129 || *(_DWORD *)v128 != a5)
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/VIOLandmarkFactorUtil.h", 268, (uint64_t)"linear_system.template findVariable<LandmarkType>(landmark_id) != linear_system.template endVariable<LandmarkType>()", 116, (uint64_t)"Landmark with the given ID was not found.", 41, (void (*)(void **))sub_21023DDB0))
  {
    goto LABEL_712;
  }
  v135 = *(_QWORD **)(v16 + 992);
  v136 = *(_QWORD **)(v16 + 1000);
  if (v136 != v135)
  {
    v137 = 0x84BDA12F684BDA13 * (v136 - v135);
    do
    {
      v138 = v137 >> 1;
      v139 = &v135[27 * (v137 >> 1)];
      v141 = *v139;
      v140 = v139 + 27;
      v137 += ~(v137 >> 1);
      if (v141 < v17)
        v135 = v140;
      else
        v137 = v138;
    }
    while (v137);
    if (v136 != v135
      && *v135 == v17
      && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/VIOLandmarkFactorUtil.h", 273, (uint64_t)"linear_system.graph().template findFactor<FactorType>(factor_cnt) == linear_system.graph().template endFactor<FactorType>()", 123, (uint64_t)"Factor with the same ID already exists.", 39, (void (*)(void **))sub_21023DDB0))
    {
      goto LABEL_712;
    }
  }
  sub_20E863438((uint64_t)&v634);
  v142 = *(char **)(v16 + 800);
  v143 = *(char **)(v16 + 808);
  if (v143 != v142)
  {
    v144 = (v143 - v142) >> 4;
    do
    {
      v145 = v144 >> 1;
      v146 = &v142[16 * (v144 >> 1)];
      v148 = *(_DWORD *)v146;
      v147 = v146 + 16;
      v144 += ~(v144 >> 1);
      if (v148 < a5)
        v142 = v147;
      else
        v144 = v145;
    }
    while (v144);
  }
  if (v142 == v143 || *(_DWORD *)v142 != a5)
  {
    v154 = 1;
    v155 = *(char **)(v16 + 416);
    v156 = *(char **)(v16 + 424);
    v157 = v155;
    v158 = v156 - v155;
    if (v156 == v155)
      goto LABEL_208;
    goto LABEL_203;
  }
  v149 = sub_20E86A980(&v635, (uint64_t)"error: landmark variable ", 25);
  sub_20F71A0DC((uint64_t)&__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    size = __p.__r_.__value_.__l.__size_;
  v152 = sub_20E86A980(v149, (uint64_t)p_p, size);
  sub_20E86A980(v152, (uint64_t)" with ID ", 9);
  v153 = (_QWORD *)std::ostream::operator<<();
  sub_20E86A980(v153, (uint64_t)" was not found.\n", 16);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v154 = 0;
  v155 = *(char **)(v16 + 416);
  v156 = *(char **)(v16 + 424);
  v157 = v155;
  v158 = v156 - v155;
  if (v156 != v155)
  {
LABEL_203:
    v159 = v158 >> 4;
    v157 = v155;
    do
    {
      v160 = v159 >> 1;
      v161 = (unsigned int *)&v157[16 * (v159 >> 1)];
      v163 = *v161;
      v162 = (char *)(v161 + 4);
      v159 += ~(v159 >> 1);
      if (v163 < v14)
        v157 = v162;
      else
        v159 = v160;
    }
    while (v159);
  }
LABEL_208:
  if (v157 != v156 && *(_DWORD *)v157 == v14)
  {
    if (v156 != v155)
    {
      v164 = (v156 - v155) >> 4;
      do
      {
        v165 = v164 >> 1;
        v166 = (unsigned int *)&v155[16 * (v164 >> 1)];
        v168 = *v166;
        v167 = (char *)(v166 + 4);
        v164 += ~(v164 >> 1);
        if (v168 < v14)
          v155 = v167;
        else
          v164 = v165;
      }
      while (v164);
    }
    v598 = v154;
    if (v155 == v156 || *(_DWORD *)v155 != v14)
      v155 = v156;
    v169 = *((_QWORD *)v155 + 1);
    v170 = sub_20E86A980(&v635, (uint64_t)"debug: variable ", 16);
    sub_20F622C70((uint64_t)&__p);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v171 = &__p;
    else
      v171 = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v172 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    else
      v172 = __p.__r_.__value_.__l.__size_;
    v173 = sub_20E86A980(v170, (uint64_t)v171, v172);
    sub_20E86A980(v173, (uint64_t)" with ID ", 9);
    v174 = (_QWORD *)std::ostream::operator<<();
    sub_20E86A980(v174, (uint64_t)" found (", 8);
    v175 = (_QWORD *)std::ostream::operator<<();
    v176 = sub_20E86A980(v175, (uint64_t)", ", 2);
    if (*(_BYTE *)(v169 + 20))
      v177 = "free";
    else
      v177 = "fixed";
    if (*(_BYTE *)(v169 + 20))
      v178 = 4;
    else
      v178 = 5;
    v179 = sub_20E86A980(v176, (uint64_t)v177, v178);
    sub_20E86A980(v179, (uint64_t)")\n", 2);
    v180 = v598;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    v601 = *(unsigned __int8 *)(v169 + 20);
    v181 = *(char **)(v16 + 416);
    v182 = *(char **)(v16 + 424);
    v183 = v181;
    v184 = v182 - v181;
    if (v182 == v181)
      goto LABEL_249;
LABEL_244:
    v190 = v184 >> 4;
    v183 = v181;
    do
    {
      v191 = v190 >> 1;
      v192 = (unsigned int *)&v183[16 * (v190 >> 1)];
      v194 = *v192;
      v193 = (char *)(v192 + 4);
      v190 += ~(v190 >> 1);
      if (v194 < a4)
        v183 = v193;
      else
        v190 = v191;
    }
    while (v190);
    goto LABEL_249;
  }
  v185 = sub_20E86A980(&v635, (uint64_t)"error: variable ", 16);
  sub_20F622C70((uint64_t)&__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v186 = &__p;
  else
    v186 = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v187 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    v187 = __p.__r_.__value_.__l.__size_;
  v188 = sub_20E86A980(v185, (uint64_t)v186, v187);
  sub_20E86A980(v188, (uint64_t)" with ID ", 9);
  v189 = (_QWORD *)std::ostream::operator<<();
  sub_20E86A980(v189, (uint64_t)" not found\n", 11);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v180 = 0;
  v601 = 0;
  v181 = *(char **)(v16 + 416);
  v182 = *(char **)(v16 + 424);
  v183 = v181;
  v184 = v182 - v181;
  if (v182 != v181)
    goto LABEL_244;
LABEL_249:
  if (v183 != v182 && *(_DWORD *)v183 == a4)
  {
    if (v182 != v181)
    {
      v195 = (v182 - v181) >> 4;
      do
      {
        v196 = v195 >> 1;
        v197 = (unsigned int *)&v181[16 * (v195 >> 1)];
        v199 = *v197;
        v198 = (char *)(v197 + 4);
        v195 += ~(v195 >> 1);
        if (v199 < a4)
          v181 = v198;
        else
          v195 = v196;
      }
      while (v195);
    }
    if (v181 == v182 || *(_DWORD *)v181 != a4)
      v181 = v182;
    v200 = *((_QWORD *)v181 + 1);
    v201 = sub_20E86A980(&v635, (uint64_t)"debug: variable ", 16);
    sub_20F622C70((uint64_t)&__p);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v202 = &__p;
    else
      v202 = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v203 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    else
      v203 = __p.__r_.__value_.__l.__size_;
    v204 = sub_20E86A980(v201, (uint64_t)v202, v203);
    sub_20E86A980(v204, (uint64_t)" with ID ", 9);
    v205 = (_QWORD *)std::ostream::operator<<();
    sub_20E86A980(v205, (uint64_t)" found (", 8);
    v206 = (_QWORD *)std::ostream::operator<<();
    v207 = sub_20E86A980(v206, (uint64_t)", ", 2);
    if (*(_BYTE *)(v200 + 20))
      v208 = "free";
    else
      v208 = "fixed";
    if (*(_BYTE *)(v200 + 20))
      v209 = 4;
    else
      v209 = 5;
    v210 = sub_20E86A980(v207, (uint64_t)v208, v209);
    sub_20E86A980(v210, (uint64_t)")\n", 2);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    v601 |= *(unsigned __int8 *)(v200 + 20);
    v211 = *(char **)(v16 + 128);
    v212 = *(char **)(v16 + 136);
    v213 = v211;
    v214 = v212 - v211;
    if (v212 == v211)
      goto LABEL_290;
LABEL_285:
    v220 = v214 >> 4;
    v213 = v211;
    do
    {
      v221 = v220 >> 1;
      v222 = (unsigned int *)&v213[16 * (v220 >> 1)];
      v224 = *v222;
      v223 = (char *)(v222 + 4);
      v220 += ~(v220 >> 1);
      if (v224 < a1)
        v213 = v223;
      else
        v220 = v221;
    }
    while (v220);
    goto LABEL_290;
  }
  v215 = sub_20E86A980(&v635, (uint64_t)"error: variable ", 16);
  sub_20F622C70((uint64_t)&__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v216 = &__p;
  else
    v216 = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v217 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    v217 = __p.__r_.__value_.__l.__size_;
  v218 = sub_20E86A980(v215, (uint64_t)v216, v217);
  sub_20E86A980(v218, (uint64_t)" with ID ", 9);
  v219 = (_QWORD *)std::ostream::operator<<();
  sub_20E86A980(v219, (uint64_t)" not found\n", 11);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v180 = 0;
  v211 = *(char **)(v16 + 128);
  v212 = *(char **)(v16 + 136);
  v213 = v211;
  v214 = v212 - v211;
  if (v212 != v211)
    goto LABEL_285;
LABEL_290:
  if (v213 != v212 && *(_DWORD *)v213 == a1)
  {
    if (v212 != v211)
    {
      v225 = (v212 - v211) >> 4;
      do
      {
        v226 = v225 >> 1;
        v227 = (unsigned int *)&v211[16 * (v225 >> 1)];
        v229 = *v227;
        v228 = (char *)(v227 + 4);
        v225 += ~(v225 >> 1);
        if (v229 < a1)
          v211 = v228;
        else
          v225 = v226;
      }
      while (v225);
    }
    if (v211 == v212 || *(_DWORD *)v211 != a1)
      v211 = v212;
    v230 = *((_QWORD *)v211 + 1);
    v231 = sub_20E86A980(&v635, (uint64_t)"debug: variable ", 16);
    sub_20F622E88((uint64_t)&__p);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v232 = &__p;
    else
      v232 = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v233 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    else
      v233 = __p.__r_.__value_.__l.__size_;
    v234 = sub_20E86A980(v231, (uint64_t)v232, v233);
    sub_20E86A980(v234, (uint64_t)" with ID ", 9);
    v235 = (_QWORD *)std::ostream::operator<<();
    sub_20E86A980(v235, (uint64_t)" found (", 8);
    v236 = (_QWORD *)std::ostream::operator<<();
    v237 = sub_20E86A980(v236, (uint64_t)", ", 2);
    if (*(_BYTE *)(v230 + 20))
      v238 = "free";
    else
      v238 = "fixed";
    if (*(_BYTE *)(v230 + 20))
      v239 = 4;
    else
      v239 = 5;
    v240 = sub_20E86A980(v237, (uint64_t)v238, v239);
    sub_20E86A980(v240, (uint64_t)")\n", 2);
    v241 = v180;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    v601 |= *(unsigned __int8 *)(v230 + 20);
    v242 = *(char **)(v16 + 128);
    v243 = *(char **)(v16 + 136);
    v244 = v242;
    v245 = v243 - v242;
    if (v243 == v242)
      goto LABEL_331;
LABEL_326:
    v251 = v245 >> 4;
    v244 = v242;
    do
    {
      v252 = v251 >> 1;
      v253 = (unsigned int *)&v244[16 * (v251 >> 1)];
      v255 = *v253;
      v254 = (char *)(v253 + 4);
      v251 += ~(v251 >> 1);
      if (v255 < a3)
        v244 = v254;
      else
        v251 = v252;
    }
    while (v251);
    goto LABEL_331;
  }
  v246 = sub_20E86A980(&v635, (uint64_t)"error: variable ", 16);
  sub_20F622E88((uint64_t)&__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v247 = &__p;
  else
    v247 = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v248 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    v248 = __p.__r_.__value_.__l.__size_;
  v249 = sub_20E86A980(v246, (uint64_t)v247, v248);
  sub_20E86A980(v249, (uint64_t)" with ID ", 9);
  v250 = (_QWORD *)std::ostream::operator<<();
  sub_20E86A980(v250, (uint64_t)" not found\n", 11);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v241 = 0;
  v242 = *(char **)(v16 + 128);
  v243 = *(char **)(v16 + 136);
  v244 = v242;
  v245 = v243 - v242;
  if (v243 != v242)
    goto LABEL_326;
LABEL_331:
  if (v244 != v243 && *(_DWORD *)v244 == a3)
  {
    if (v243 != v242)
    {
      v256 = (v243 - v242) >> 4;
      do
      {
        v257 = v256 >> 1;
        v258 = (unsigned int *)&v242[16 * (v256 >> 1)];
        v260 = *v258;
        v259 = (char *)(v258 + 4);
        v256 += ~(v256 >> 1);
        if (v260 < a3)
          v242 = v259;
        else
          v256 = v257;
      }
      while (v256);
    }
    if (v242 == v243 || *(_DWORD *)v242 != a3)
      v242 = v243;
    v261 = *((_QWORD *)v242 + 1);
    v262 = sub_20E86A980(&v635, (uint64_t)"debug: variable ", 16);
    sub_20F622E88((uint64_t)&__p);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v263 = &__p;
    else
      v263 = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v264 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    else
      v264 = __p.__r_.__value_.__l.__size_;
    v265 = sub_20E86A980(v262, (uint64_t)v263, v264);
    sub_20E86A980(v265, (uint64_t)" with ID ", 9);
    v266 = (_QWORD *)std::ostream::operator<<();
    sub_20E86A980(v266, (uint64_t)" found (", 8);
    v267 = (_QWORD *)std::ostream::operator<<();
    v268 = sub_20E86A980(v267, (uint64_t)", ", 2);
    if (*(_BYTE *)(v261 + 20))
      v269 = "free";
    else
      v269 = "fixed";
    if (*(_BYTE *)(v261 + 20))
      v270 = 4;
    else
      v270 = 5;
    v271 = sub_20E86A980(v268, (uint64_t)v269, v270);
    sub_20E86A980(v271, (uint64_t)")\n", 2);
    v272 = v241;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    v601 |= *(unsigned __int8 *)(v261 + 20);
    v273 = *(char **)(v16 + 512);
    v274 = *(char **)(v16 + 520);
    v275 = v273;
    v276 = v274 - v273;
    if (v274 == v273)
      goto LABEL_372;
LABEL_367:
    v282 = v276 >> 4;
    v275 = v273;
    do
    {
      v283 = v282 >> 1;
      v284 = (unsigned int *)&v275[16 * (v282 >> 1)];
      v286 = *v284;
      v285 = (char *)(v284 + 4);
      v282 += ~(v282 >> 1);
      if (v286 < v14)
        v275 = v285;
      else
        v282 = v283;
    }
    while (v282);
    goto LABEL_372;
  }
  v277 = sub_20E86A980(&v635, (uint64_t)"error: variable ", 16);
  sub_20F622E88((uint64_t)&__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v278 = &__p;
  else
    v278 = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v279 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    v279 = __p.__r_.__value_.__l.__size_;
  v280 = sub_20E86A980(v277, (uint64_t)v278, v279);
  sub_20E86A980(v280, (uint64_t)" with ID ", 9);
  v281 = (_QWORD *)std::ostream::operator<<();
  sub_20E86A980(v281, (uint64_t)" not found\n", 11);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v272 = 0;
  v273 = *(char **)(v16 + 512);
  v274 = *(char **)(v16 + 520);
  v275 = v273;
  v276 = v274 - v273;
  if (v274 != v273)
    goto LABEL_367;
LABEL_372:
  if (v275 != v274 && *(_DWORD *)v275 == v14)
  {
    if (v274 != v273)
    {
      v287 = (v274 - v273) >> 4;
      do
      {
        v288 = v287 >> 1;
        v289 = (unsigned int *)&v273[16 * (v287 >> 1)];
        v291 = *v289;
        v290 = (char *)(v289 + 4);
        v287 += ~(v287 >> 1);
        if (v291 < v14)
          v273 = v290;
        else
          v287 = v288;
      }
      while (v287);
    }
    if (v273 == v274 || *(_DWORD *)v273 != v14)
      v273 = v274;
    v292 = *((_QWORD *)v273 + 1);
    v293 = sub_20E86A980(&v635, (uint64_t)"debug: variable ", 16);
    sub_20F71A520((uint64_t)&__p);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v294 = &__p;
    else
      v294 = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v295 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    else
      v295 = __p.__r_.__value_.__l.__size_;
    v296 = sub_20E86A980(v293, (uint64_t)v294, v295);
    sub_20E86A980(v296, (uint64_t)" with ID ", 9);
    v297 = (_QWORD *)std::ostream::operator<<();
    sub_20E86A980(v297, (uint64_t)" found (", 8);
    v298 = (_QWORD *)std::ostream::operator<<();
    v299 = sub_20E86A980(v298, (uint64_t)", ", 2);
    if (*(_BYTE *)(v292 + 20))
      v300 = "free";
    else
      v300 = "fixed";
    if (*(_BYTE *)(v292 + 20))
      v301 = 4;
    else
      v301 = 5;
    v302 = sub_20E86A980(v299, (uint64_t)v300, v301);
    sub_20E86A980(v302, (uint64_t)")\n", 2);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    v601 |= *(unsigned __int8 *)(v292 + 20);
    v303 = *(char **)(v16 + 512);
    v304 = *(char **)(v16 + 520);
    v305 = v303;
    v306 = v304 - v303;
    if (v304 == v303)
      goto LABEL_413;
LABEL_408:
    v312 = v306 >> 4;
    v305 = v303;
    do
    {
      v313 = v312 >> 1;
      v314 = (unsigned int *)&v305[16 * (v312 >> 1)];
      v316 = *v314;
      v315 = (char *)(v314 + 4);
      v312 += ~(v312 >> 1);
      if (v316 < a4)
        v305 = v315;
      else
        v312 = v313;
    }
    while (v312);
    goto LABEL_413;
  }
  v307 = sub_20E86A980(&v635, (uint64_t)"error: variable ", 16);
  sub_20F71A520((uint64_t)&__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v308 = &__p;
  else
    v308 = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v309 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    v309 = __p.__r_.__value_.__l.__size_;
  v310 = sub_20E86A980(v307, (uint64_t)v308, v309);
  sub_20E86A980(v310, (uint64_t)" with ID ", 9);
  v311 = (_QWORD *)std::ostream::operator<<();
  sub_20E86A980(v311, (uint64_t)" not found\n", 11);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v272 = 0;
  v303 = *(char **)(v16 + 512);
  v304 = *(char **)(v16 + 520);
  v305 = v303;
  v306 = v304 - v303;
  if (v304 != v303)
    goto LABEL_408;
LABEL_413:
  if (v305 != v304 && *(_DWORD *)v305 == a4)
  {
    if (v304 != v303)
    {
      v317 = (v304 - v303) >> 4;
      do
      {
        v318 = v317 >> 1;
        v319 = (unsigned int *)&v303[16 * (v317 >> 1)];
        v321 = *v319;
        v320 = (char *)(v319 + 4);
        v317 += ~(v317 >> 1);
        if (v321 < a4)
          v303 = v320;
        else
          v317 = v318;
      }
      while (v317);
    }
    if (v303 == v304 || *(_DWORD *)v303 != a4)
      v303 = v304;
    v322 = *((_QWORD *)v303 + 1);
    v323 = sub_20E86A980(&v635, (uint64_t)"debug: variable ", 16);
    sub_20F71A520((uint64_t)&__p);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v324 = &__p;
    else
      v324 = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v325 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    else
      v325 = __p.__r_.__value_.__l.__size_;
    v326 = sub_20E86A980(v323, (uint64_t)v324, v325);
    sub_20E86A980(v326, (uint64_t)" with ID ", 9);
    v327 = (_QWORD *)std::ostream::operator<<();
    sub_20E86A980(v327, (uint64_t)" found (", 8);
    v328 = (_QWORD *)std::ostream::operator<<();
    v329 = sub_20E86A980(v328, (uint64_t)", ", 2);
    if (*(_BYTE *)(v322 + 20))
      v330 = "free";
    else
      v330 = "fixed";
    if (*(_BYTE *)(v322 + 20))
      v331 = 4;
    else
      v331 = 5;
    v332 = sub_20E86A980(v329, (uint64_t)v330, v331);
    sub_20E86A980(v332, (uint64_t)")\n", 2);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    v601 |= *(unsigned __int8 *)(v322 + 20);
    v333 = *(char **)(v16 + 608);
    v334 = *(char **)(v16 + 616);
    v335 = v333;
    v336 = v334 - v333;
    if (v334 == v333)
      goto LABEL_454;
LABEL_449:
    v342 = v336 >> 4;
    v335 = v333;
    do
    {
      v343 = v342 >> 1;
      v344 = (unsigned int *)&v335[16 * (v342 >> 1)];
      v346 = *v344;
      v345 = (char *)(v344 + 4);
      v342 += ~(v342 >> 1);
      if (v346 < v14)
        v335 = v345;
      else
        v342 = v343;
    }
    while (v342);
    goto LABEL_454;
  }
  v337 = sub_20E86A980(&v635, (uint64_t)"error: variable ", 16);
  sub_20F71A520((uint64_t)&__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v338 = &__p;
  else
    v338 = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v339 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    v339 = __p.__r_.__value_.__l.__size_;
  v340 = sub_20E86A980(v337, (uint64_t)v338, v339);
  sub_20E86A980(v340, (uint64_t)" with ID ", 9);
  v341 = (_QWORD *)std::ostream::operator<<();
  sub_20E86A980(v341, (uint64_t)" not found\n", 11);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v272 = 0;
  v333 = *(char **)(v16 + 608);
  v334 = *(char **)(v16 + 616);
  v335 = v333;
  v336 = v334 - v333;
  if (v334 != v333)
    goto LABEL_449;
LABEL_454:
  if (v335 != v334 && *(_DWORD *)v335 == v14)
  {
    if (v334 != v333)
    {
      v347 = (v334 - v333) >> 4;
      do
      {
        v348 = v347 >> 1;
        v349 = (unsigned int *)&v333[16 * (v347 >> 1)];
        v351 = *v349;
        v350 = (char *)(v349 + 4);
        v347 += ~(v347 >> 1);
        if (v351 < v14)
          v333 = v350;
        else
          v347 = v348;
      }
      while (v347);
    }
    if (v333 == v334 || *(_DWORD *)v333 != v14)
      v333 = v334;
    v352 = *((_QWORD *)v333 + 1);
    v353 = sub_20E86A980(&v635, (uint64_t)"debug: variable ", 16);
    sub_20F71A740((uint64_t)&__p);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v354 = &__p;
    else
      v354 = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v355 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    else
      v355 = __p.__r_.__value_.__l.__size_;
    v356 = sub_20E86A980(v353, (uint64_t)v354, v355);
    sub_20E86A980(v356, (uint64_t)" with ID ", 9);
    v357 = (_QWORD *)std::ostream::operator<<();
    sub_20E86A980(v357, (uint64_t)" found (", 8);
    v358 = (_QWORD *)std::ostream::operator<<();
    v359 = sub_20E86A980(v358, (uint64_t)", ", 2);
    if (*(_BYTE *)(v352 + 20))
      v360 = "free";
    else
      v360 = "fixed";
    if (*(_BYTE *)(v352 + 20))
      v361 = 4;
    else
      v361 = 5;
    v362 = sub_20E86A980(v359, (uint64_t)v360, v361);
    sub_20E86A980(v362, (uint64_t)")\n", 2);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    v601 |= *(unsigned __int8 *)(v352 + 20);
    v363 = *(char **)(v16 + 608);
    v364 = *(char **)(v16 + 616);
    v365 = v363;
    v366 = v364 - v363;
    if (v364 == v363)
      goto LABEL_495;
LABEL_490:
    v372 = v366 >> 4;
    v365 = v363;
    do
    {
      v373 = v372 >> 1;
      v374 = (unsigned int *)&v365[16 * (v372 >> 1)];
      v376 = *v374;
      v375 = (char *)(v374 + 4);
      v372 += ~(v372 >> 1);
      if (v376 < a4)
        v365 = v375;
      else
        v372 = v373;
    }
    while (v372);
    goto LABEL_495;
  }
  v367 = sub_20E86A980(&v635, (uint64_t)"error: variable ", 16);
  sub_20F71A740((uint64_t)&__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v368 = &__p;
  else
    v368 = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v369 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    v369 = __p.__r_.__value_.__l.__size_;
  v370 = sub_20E86A980(v367, (uint64_t)v368, v369);
  sub_20E86A980(v370, (uint64_t)" with ID ", 9);
  v371 = (_QWORD *)std::ostream::operator<<();
  sub_20E86A980(v371, (uint64_t)" not found\n", 11);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v272 = 0;
  v363 = *(char **)(v16 + 608);
  v364 = *(char **)(v16 + 616);
  v365 = v363;
  v366 = v364 - v363;
  if (v364 != v363)
    goto LABEL_490;
LABEL_495:
  if (v365 != v364 && *(_DWORD *)v365 == a4)
  {
    if (v364 != v363)
    {
      v377 = (v364 - v363) >> 4;
      do
      {
        v378 = v377 >> 1;
        v379 = (unsigned int *)&v363[16 * (v377 >> 1)];
        v381 = *v379;
        v380 = (char *)(v379 + 4);
        v377 += ~(v377 >> 1);
        if (v381 < a4)
          v363 = v380;
        else
          v377 = v378;
      }
      while (v377);
    }
    if (v363 == v364 || *(_DWORD *)v363 != a4)
      v363 = v364;
    v382 = *((_QWORD *)v363 + 1);
    v383 = sub_20E86A980(&v635, (uint64_t)"debug: variable ", 16);
    sub_20F71A740((uint64_t)&__p);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v384 = &__p;
    else
      v384 = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v385 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    else
      v385 = __p.__r_.__value_.__l.__size_;
    v386 = sub_20E86A980(v383, (uint64_t)v384, v385);
    sub_20E86A980(v386, (uint64_t)" with ID ", 9);
    v387 = (_QWORD *)std::ostream::operator<<();
    sub_20E86A980(v387, (uint64_t)" found (", 8);
    v388 = (_QWORD *)std::ostream::operator<<();
    v389 = sub_20E86A980(v388, (uint64_t)", ", 2);
    if (*(_BYTE *)(v382 + 20))
      v390 = "free";
    else
      v390 = "fixed";
    if (*(_BYTE *)(v382 + 20))
      v391 = 4;
    else
      v391 = 5;
    v392 = sub_20E86A980(v389, (uint64_t)v390, v391);
    sub_20E86A980(v392, (uint64_t)")\n", 2);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    v601 |= *(unsigned __int8 *)(v382 + 20);
    v393 = *(char **)(v16 + 704);
    v394 = *(char **)(v16 + 712);
    v395 = v393;
    v396 = v394 - v393;
    if (v394 == v393)
      goto LABEL_536;
LABEL_531:
    v402 = v396 >> 4;
    v395 = v393;
    do
    {
      v403 = v402 >> 1;
      v404 = (unsigned int *)&v395[16 * (v402 >> 1)];
      v406 = *v404;
      v405 = (char *)(v404 + 4);
      v402 += ~(v402 >> 1);
      if (v406 < v14)
        v395 = v405;
      else
        v402 = v403;
    }
    while (v402);
    goto LABEL_536;
  }
  v397 = sub_20E86A980(&v635, (uint64_t)"error: variable ", 16);
  sub_20F71A740((uint64_t)&__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v398 = &__p;
  else
    v398 = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v399 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    v399 = __p.__r_.__value_.__l.__size_;
  v400 = sub_20E86A980(v397, (uint64_t)v398, v399);
  sub_20E86A980(v400, (uint64_t)" with ID ", 9);
  v401 = (_QWORD *)std::ostream::operator<<();
  sub_20E86A980(v401, (uint64_t)" not found\n", 11);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v272 = 0;
  v393 = *(char **)(v16 + 704);
  v394 = *(char **)(v16 + 712);
  v395 = v393;
  v396 = v394 - v393;
  if (v394 != v393)
    goto LABEL_531;
LABEL_536:
  if (v395 != v394 && *(_DWORD *)v395 == v14)
  {
    if (v394 != v393)
    {
      v407 = (v394 - v393) >> 4;
      do
      {
        v408 = v407 >> 1;
        v409 = (unsigned int *)&v393[16 * (v407 >> 1)];
        v411 = *v409;
        v410 = (char *)(v409 + 4);
        v407 += ~(v407 >> 1);
        if (v411 < v14)
          v393 = v410;
        else
          v407 = v408;
      }
      while (v407);
    }
    if (v393 == v394 || *(_DWORD *)v393 != v14)
      v393 = v394;
    v412 = *((_QWORD *)v393 + 1);
    v413 = sub_20E86A980(&v635, (uint64_t)"debug: variable ", 16);
    sub_20F71A960((uint64_t)&__p);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v414 = &__p;
    else
      v414 = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v415 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    else
      v415 = __p.__r_.__value_.__l.__size_;
    v416 = sub_20E86A980(v413, (uint64_t)v414, v415);
    sub_20E86A980(v416, (uint64_t)" with ID ", 9);
    v417 = (_QWORD *)std::ostream::operator<<();
    sub_20E86A980(v417, (uint64_t)" found (", 8);
    v418 = (_QWORD *)std::ostream::operator<<();
    v419 = sub_20E86A980(v418, (uint64_t)", ", 2);
    if (*(_BYTE *)(v412 + 20))
      v420 = "free";
    else
      v420 = "fixed";
    if (*(_BYTE *)(v412 + 20))
      v421 = 4;
    else
      v421 = 5;
    v422 = sub_20E86A980(v419, (uint64_t)v420, v421);
    sub_20E86A980(v422, (uint64_t)")\n", 2);
    v423 = v272;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    v601 |= *(unsigned __int8 *)(v412 + 20);
    v424 = *(char **)(v16 + 704);
    v425 = *(char **)(v16 + 712);
    v426 = v424;
    v427 = v425 - v424;
    if (v425 == v424)
      goto LABEL_577;
LABEL_572:
    v433 = v427 >> 4;
    v426 = v424;
    do
    {
      v434 = v433 >> 1;
      v435 = (unsigned int *)&v426[16 * (v433 >> 1)];
      v437 = *v435;
      v436 = (char *)(v435 + 4);
      v433 += ~(v433 >> 1);
      if (v437 < a4)
        v426 = v436;
      else
        v433 = v434;
    }
    while (v433);
    goto LABEL_577;
  }
  v428 = sub_20E86A980(&v635, (uint64_t)"error: variable ", 16);
  sub_20F71A960((uint64_t)&__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v429 = &__p;
  else
    v429 = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v430 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    v430 = __p.__r_.__value_.__l.__size_;
  v431 = sub_20E86A980(v428, (uint64_t)v429, v430);
  sub_20E86A980(v431, (uint64_t)" with ID ", 9);
  v432 = (_QWORD *)std::ostream::operator<<();
  sub_20E86A980(v432, (uint64_t)" not found\n", 11);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v423 = 0;
  v424 = *(char **)(v16 + 704);
  v425 = *(char **)(v16 + 712);
  v426 = v424;
  v427 = v425 - v424;
  if (v425 != v424)
    goto LABEL_572;
LABEL_577:
  if (v426 != v425 && *(_DWORD *)v426 == a4)
  {
    if (v425 != v424)
    {
      v438 = (v425 - v424) >> 4;
      do
      {
        v439 = v438 >> 1;
        v440 = (unsigned int *)&v424[16 * (v438 >> 1)];
        v442 = *v440;
        v441 = (char *)(v440 + 4);
        v438 += ~(v438 >> 1);
        if (v442 < a4)
          v424 = v441;
        else
          v438 = v439;
      }
      while (v438);
    }
    if (v424 == v425 || *(_DWORD *)v424 != a4)
      v424 = v425;
    v443 = *((_QWORD *)v424 + 1);
    v444 = sub_20E86A980(&v635, (uint64_t)"debug: variable ", 16);
    sub_20F71A960((uint64_t)&__p);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v445 = &__p;
    else
      v445 = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v446 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    else
      v446 = __p.__r_.__value_.__l.__size_;
    v447 = sub_20E86A980(v444, (uint64_t)v445, v446);
    sub_20E86A980(v447, (uint64_t)" with ID ", 9);
    v448 = (_QWORD *)std::ostream::operator<<();
    sub_20E86A980(v448, (uint64_t)" found (", 8);
    v449 = (_QWORD *)std::ostream::operator<<();
    v450 = sub_20E86A980(v449, (uint64_t)", ", 2);
    if (*(_BYTE *)(v443 + 20))
      v451 = "free";
    else
      v451 = "fixed";
    if (*(_BYTE *)(v443 + 20))
      v452 = 4;
    else
      v452 = 5;
    v453 = sub_20E86A980(v450, (uint64_t)v451, v452);
    sub_20E86A980(v453, (uint64_t)")\n", 2);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    v601 |= *(unsigned __int8 *)(v443 + 20);
    v454 = *(char **)(v16 + 800);
    v455 = *(char **)(v16 + 808);
    v456 = v454;
    v457 = v455 - v454;
    if (v455 == v454)
      goto LABEL_618;
LABEL_613:
    v463 = v457 >> 4;
    v456 = v454;
    do
    {
      v464 = v463 >> 1;
      v465 = (unsigned int *)&v456[16 * (v463 >> 1)];
      v467 = *v465;
      v466 = (char *)(v465 + 4);
      v463 += ~(v463 >> 1);
      if (v467 < a5)
        v456 = v466;
      else
        v463 = v464;
    }
    while (v463);
    goto LABEL_618;
  }
  v458 = sub_20E86A980(&v635, (uint64_t)"error: variable ", 16);
  sub_20F71A960((uint64_t)&__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v459 = &__p;
  else
    v459 = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v460 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    v460 = __p.__r_.__value_.__l.__size_;
  v461 = sub_20E86A980(v458, (uint64_t)v459, v460);
  sub_20E86A980(v461, (uint64_t)" with ID ", 9);
  v462 = (_QWORD *)std::ostream::operator<<();
  sub_20E86A980(v462, (uint64_t)" not found\n", 11);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v423 = 0;
  v454 = *(char **)(v16 + 800);
  v455 = *(char **)(v16 + 808);
  v456 = v454;
  v457 = v455 - v454;
  if (v455 != v454)
    goto LABEL_613;
LABEL_618:
  if (v456 == v455 || *(_DWORD *)v456 != a5)
  {
    v488 = sub_20E86A980(&v635, (uint64_t)"error: variable ", 16);
    sub_20F71A0DC((uint64_t)&__p);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v489 = &__p;
    else
      v489 = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v490 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    else
      v490 = __p.__r_.__value_.__l.__size_;
    v491 = sub_20E86A980(v488, (uint64_t)v489, v490);
    sub_20E86A980(v491, (uint64_t)" with ID ", 9);
    v492 = (_QWORD *)std::ostream::operator<<();
    sub_20E86A980(v492, (uint64_t)" not found\n", 11);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(__p.__r_.__value_.__l.__data_);
      v473 = 0;
      v485 = *(char **)(v16 + 992);
      v486 = *(char **)(v16 + 1000);
      v487 = v486 - v485;
      if (v486 == v485)
        goto LABEL_673;
    }
    else
    {
      v473 = 0;
      v485 = *(char **)(v16 + 992);
      v486 = *(char **)(v16 + 1000);
      v487 = v486 - v485;
      if (v486 == v485)
        goto LABEL_673;
    }
    goto LABEL_657;
  }
  if (v455 != v454)
  {
    v468 = (v455 - v454) >> 4;
    do
    {
      v469 = v468 >> 1;
      v470 = (unsigned int *)&v454[16 * (v468 >> 1)];
      v472 = *v470;
      v471 = (char *)(v470 + 4);
      v468 += ~(v468 >> 1);
      if (v472 < a5)
        v454 = v471;
      else
        v468 = v469;
    }
    while (v468);
  }
  v473 = v423;
  if (v454 == v455 || *(_DWORD *)v454 != a5)
    v454 = v455;
  v474 = *((_QWORD *)v454 + 1);
  v475 = sub_20E86A980(&v635, (uint64_t)"debug: variable ", 16);
  sub_20F71A0DC((uint64_t)&__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v476 = &__p;
  else
    v476 = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v477 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    v477 = __p.__r_.__value_.__l.__size_;
  v478 = sub_20E86A980(v475, (uint64_t)v476, v477);
  sub_20E86A980(v478, (uint64_t)" with ID ", 9);
  v479 = (_QWORD *)std::ostream::operator<<();
  sub_20E86A980(v479, (uint64_t)" found (", 8);
  v480 = (_QWORD *)std::ostream::operator<<();
  v481 = sub_20E86A980(v480, (uint64_t)", ", 2);
  if (*(_BYTE *)(v474 + 20))
    v482 = "free";
  else
    v482 = "fixed";
  if (*(_BYTE *)(v474 + 20))
    v483 = 4;
  else
    v483 = 5;
  v484 = sub_20E86A980(v481, (uint64_t)v482, v483);
  sub_20E86A980(v484, (uint64_t)")\n", 2);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v601 |= *(unsigned __int8 *)(v474 + 20);
  v485 = *(char **)(v16 + 992);
  v486 = *(char **)(v16 + 1000);
  v487 = v486 - v485;
  if (v486 != v485)
  {
LABEL_657:
    v493 = 0x84BDA12F684BDA13 * (v487 >> 3);
    do
    {
      v494 = v493 >> 1;
      v495 = (unint64_t *)&v485[216 * (v493 >> 1)];
      v497 = *v495;
      v496 = (char *)(v495 + 27);
      v493 += ~(v493 >> 1);
      if (v497 < v17)
        v485 = v496;
      else
        v493 = v494;
    }
    while (v493);
    if (v486 != v485 && *(_QWORD *)v485 == v17)
    {
      v498 = sub_20E86A980(&v635, (uint64_t)"error: factor ", 14);
      sub_20F71A300((uint64_t)&__p);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v499 = &__p;
      else
        v499 = (std::string *)__p.__r_.__value_.__r.__words[0];
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v500 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      else
        v500 = __p.__r_.__value_.__l.__size_;
      v501 = sub_20E86A980(v498, (uint64_t)v499, v500);
      sub_20E86A980(v501, (uint64_t)" with the same ID ", 18);
      v502 = (_QWORD *)std::ostream::operator<<();
      sub_20E86A980(v502, (uint64_t)" already exists.\n", 17);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      v473 = 0;
    }
  }
LABEL_673:
  if (v601)
  {
    v503 = v473 != 0;
    v504 = v641;
    if ((v641 & 0x10) == 0)
      goto LABEL_675;
LABEL_686:
    v512 = *((_QWORD *)&v640 + 1);
    if (*((_QWORD *)&v640 + 1) < (unint64_t)v638)
    {
      *((_QWORD *)&v640 + 1) = v638;
      v512 = v638;
    }
    v513 = (const void *)*((_QWORD *)&v637 + 1);
    v505 = v512 - *((_QWORD *)&v637 + 1);
    if ((unint64_t)(v512 - *((_QWORD *)&v637 + 1)) >= 0x7FFFFFFFFFFFFFF8)
      goto LABEL_714;
    goto LABEL_689;
  }
  v507 = sub_20E86A980(&v635, (uint64_t)"error: factor ", 14);
  sub_20F71A300((uint64_t)&__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v508 = &__p;
  else
    v508 = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v509 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    v509 = __p.__r_.__value_.__l.__size_;
  v510 = sub_20E86A980(v507, (uint64_t)v508, v509);
  sub_20E86A980(v510, (uint64_t)" with ID ", 9);
  v511 = (_QWORD *)std::ostream::operator<<();
  sub_20E86A980(v511, (uint64_t)" cannot be added: all variables are fixed.\n", 43);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v503 = 0;
  v504 = v641;
  if ((v641 & 0x10) != 0)
    goto LABEL_686;
LABEL_675:
  if ((v504 & 8) == 0)
  {
    v505 = 0;
    *((_BYTE *)&__p.__r_.__value_.__s + 23) = 0;
    v506 = &__p;
    goto LABEL_696;
  }
  v513 = (const void *)v636.__r_.__value_.__l.__size_;
  v505 = v637 - v636.__r_.__value_.__l.__size_;
  if ((unint64_t)v637 - v636.__r_.__value_.__l.__size_ >= 0x7FFFFFFFFFFFFFF8)
LABEL_714:
    sub_20E860B7C();
LABEL_689:
  if (v505 >= 0x17)
  {
    v514 = (v505 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v505 | 7) != 0x17)
      v514 = v505 | 7;
    v515 = v514 + 1;
    v506 = (std::string *)operator new(v514 + 1);
    __p.__r_.__value_.__l.__size_ = v505;
    __p.__r_.__value_.__r.__words[2] = v515 | 0x8000000000000000;
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v506;
    goto LABEL_695;
  }
  *((_BYTE *)&__p.__r_.__value_.__s + 23) = v505;
  v506 = &__p;
  if (v505)
LABEL_695:
    memmove(v506, v513, v505);
LABEL_696:
  v506->__r_.__value_.__s.__data_[v505] = 0;
  v613 = __p;
  v614.__r_.__value_.__s.__data_[0] = v503;
  v634.i64[0] = *MEMORY[0x24BEDB7F0];
  v516 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  *(uint64_t *)((char *)v634.i64 + *(_QWORD *)(v634.i64[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
  *(_QWORD *)&v635 = v516;
  *((_QWORD *)&v635 + 1) = MEMORY[0x24BEDB848] + 16;
  if (SBYTE7(v640) < 0)
    operator delete((void *)v639);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x212BC6290]((char *)&v641 + 8);
  v517 = std::string::insert(&v613, 0, "Failed to add a factor into the linear system. This could be due to duplicate factor IDs ('", 0x5BuLL);
  v518 = *(_OWORD *)&v517->__r_.__value_.__l.__data_;
  v606.__r_.__value_.__r.__words[2] = v517->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v606.__r_.__value_.__l.__data_ = v518;
  v517->__r_.__value_.__l.__size_ = 0;
  v517->__r_.__value_.__r.__words[2] = 0;
  v517->__r_.__value_.__r.__words[0] = 0;
  v519 = std::string::append(&v606, "').", 3uLL);
  v520 = *(_OWORD *)&v519->__r_.__value_.__l.__data_;
  v608 = v519->__r_.__value_.__r.__words[2];
  *(_OWORD *)v607 = v520;
  v519->__r_.__value_.__l.__size_ = 0;
  v519->__r_.__value_.__r.__words[2] = 0;
  v519->__r_.__value_.__r.__words[0] = 0;
  if (v608 >= 0)
    v521 = v607;
  else
    v521 = (void **)v607[0];
  if (v608 >= 0)
    v522 = HIBYTE(v608);
  else
    v522 = (uint64_t)v607[1];
  v523 = sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/VIOLandmarkFactorUtil.h", 282, (uint64_t)"ret.second", 10, (uint64_t)v521, v522, (void (*)(void **))sub_21023DDB0);
  if (SHIBYTE(v608) < 0)
  {
    operator delete(v607[0]);
    if ((SHIBYTE(v606.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_706:
      if ((SHIBYTE(v613.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_707;
      goto LABEL_711;
    }
  }
  else if ((SHIBYTE(v606.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_706;
  }
  operator delete(v606.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v613.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_707:
    if (!v523)
      return;
LABEL_712:
    abort();
  }
LABEL_711:
  operator delete(v613.__r_.__value_.__l.__data_);
  if (v523)
    goto LABEL_712;
}

void sub_20F7BA5CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37,uint64_t a38,char a39,uint64_t a40,char a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a67;

  sub_20F6227AC((uint64_t)&a67);
  sub_20F4EE450((uint64_t)&STACK[0x220]);
  sub_20F4ACD60((uint64_t)&a41);
  sub_20E86665C((uint64_t)&a39);
  sub_20E86665C((uint64_t)&a37);
  _Unwind_Resume(a1);
}

void sub_20F7BA608(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,void *a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  void *__p;
  char a72;

  if (a72 < 0)
  {
    operator delete(__p);
    sub_20E863784((uint64_t)&STACK[0x220]);
    _Unwind_Resume(a1);
  }
  sub_20E863784((uint64_t)&STACK[0x220]);
  _Unwind_Resume(a1);
}

uint64_t sub_20F7BA718(uint64_t a1)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  unsigned int v14;
  uint64_t v15;
  _DWORD v16[7];
  unsigned int v17;
  __int128 v18;
  __int128 v19;

  if (*(_BYTE *)(a1 + 976))
    return (*(_QWORD *)(a1 + 688) - *(_QWORD *)(a1 + 680)) >> 4;
  v18 = 0u;
  v19 = 0u;
  if (!sub_20F5B8114((_QWORD *)a1, (int *)&v18, v16, 1))
    return v17;
  *(_QWORD *)(a1 + 1568) = *(_QWORD *)(a1 + 1560);
  *(_QWORD *)(a1 + 1592) = *(_QWORD *)(a1 + 1584);
  *(_QWORD *)(a1 + 1616) = *(_QWORD *)(a1 + 1608);
  *(_QWORD *)(a1 + 1640) = *(_QWORD *)(a1 + 1632);
  *(_QWORD *)(a1 + 1664) = *(_QWORD *)(a1 + 1656);
  *(_QWORD *)(a1 + 1688) = *(_QWORD *)(a1 + 1680);
  *(_QWORD *)(a1 + 1712) = *(_QWORD *)(a1 + 1704);
  *(_QWORD *)(a1 + 1736) = *(_QWORD *)(a1 + 1728);
  v3 = *(_QWORD *)(a1 + 776);
  v4 = *(_QWORD *)(a1 + 784);
  while (v3 != v4)
  {
    v5 = *(_QWORD *)(v3 + 208);
    if (*(_BYTE *)(v3 + 496) || (*(_BYTE *)(v5 + 4) & 6) != 0 || (*(_BYTE *)(*(_QWORD *)(v3 + 216) + 4) & 6) != 0)
    {
      sub_20F394A20(a1 + 1560, v5);
      sub_20F3D35E0((_QWORD *)(a1 + 1560), *(_QWORD *)(v3 + 216));
    }
    v3 += 504;
  }
  v6 = *(_QWORD *)(a1 + 800);
  v7 = *(_QWORD *)(a1 + 808);
  while (v6 != v7)
  {
    v8 = *(_QWORD *)(v6 + 136);
    if (*(_BYTE *)(v6 + 272) || (*(_BYTE *)(v8 + 4) & 6) != 0)
      sub_20F394A20(a1 + 1560, v8);
    v6 += 280;
  }
  sub_20F5B8680(*(_QWORD *)(a1 + 824), *(_QWORD *)(a1 + 832), (_QWORD *)(a1 + 1560));
  sub_20F5B85BC(*(_QWORD *)(a1 + 848), *(_QWORD *)(a1 + 856), (_QWORD *)(a1 + 1560));
  sub_20F5B8444(*(_QWORD *)(a1 + 872), *(_QWORD *)(a1 + 880), (_QWORD *)(a1 + 1560));
  v9 = *(_QWORD *)(a1 + 896);
  v10 = *(_QWORD *)(a1 + 904);
  while (v9 != v10)
  {
    v11 = *(_QWORD *)(v9 + 736);
    if (*(_BYTE *)(v9 + 880) || (*(_BYTE *)(v11 + 4) & 6) != 0 || (*(_BYTE *)(*(_QWORD *)(v9 + 744) + 4) & 6) != 0)
    {
      sub_20F394A20(a1 + 1560, v11);
      sub_20F394A20(a1 + 1560, *(_QWORD *)(v9 + 744));
    }
    v9 += 888;
  }
  v12 = (*(_QWORD *)(a1 + 1736) - *(_QWORD *)(a1 + 1728)) >> 2;
  if (HIDWORD(v19) > v12)
    LODWORD(v12) = HIDWORD(v19);
  v13 = v17 >= v12;
  v14 = v17 - v12;
  if (v13)
    v15 = v14;
  else
    v15 = 0;
  sub_20F59A618((_QWORD *)a1);
  return v15;
}

void sub_20F7BA944(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20F59A618(v1);
  _Unwind_Resume(a1);
}

void sub_20F7BA958(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20F59A618(v1);
  _Unwind_Resume(a1);
}

void sub_20F7BA96C(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20F59A618(v1);
  _Unwind_Resume(a1);
}

void sub_20F7BA980(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20F59A618(v1);
  _Unwind_Resume(a1);
}

unint64_t sub_20F7BA994(unint64_t result, uint64_t *a2, _QWORD ***a3, uint64_t a4, char a5)
{
  uint64_t *v7;
  _QWORD ***v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD **v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t *v29;
  uint64_t *v30;
  unint64_t v31;
  unsigned int v32;
  uint64_t *v33;
  uint64_t *v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t *v40;
  uint64_t *v41;
  unint64_t v42;
  unsigned int v43;
  uint64_t *v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t *v49;
  uint64_t *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t *v54;
  uint64_t *v55;
  uint64_t *v56;
  unint64_t v57;
  _QWORD **v58;
  uint64_t v59;
  uint64_t *v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t *v63;
  uint64_t *v64;
  uint64_t *v65;
  unint64_t v66;
  unsigned int v67;
  uint64_t *v68;
  uint64_t *v69;
  unint64_t v70;
  unint64_t v71;
  uint64_t *v72;
  uint64_t v73;
  uint64_t *v74;
  uint64_t *v75;
  uint64_t *v76;
  unint64_t v77;
  unsigned int v78;
  uint64_t *v79;
  unint64_t v80;
  unint64_t v81;
  uint64_t v82;
  uint64_t *v83;
  uint64_t *v84;
  uint64_t v85;
  uint64_t *v86;
  unint64_t v87;
  uint64_t v88;
  uint64_t *v89;
  uint64_t *v90;
  uint64_t *v91;
  unint64_t v92;
  unsigned int v93;
  uint64_t *v94;
  uint64_t *v95;
  unint64_t v96;
  unint64_t v97;
  uint64_t *v98;
  uint64_t v99;
  uint64_t *v100;
  uint64_t *v101;
  uint64_t *v102;
  unint64_t v103;
  unsigned int v104;
  uint64_t *v105;
  unint64_t v106;
  unint64_t v107;
  uint64_t v108;
  uint64_t *v109;
  uint64_t *v110;
  BOOL v111;
  uint64_t v112;
  uint64_t *v113;
  uint64_t *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  unint64_t v119;
  _QWORD **v120;
  uint64_t v121;
  uint64_t v122;
  unint64_t v123;
  uint64_t v124;
  unint64_t v125;
  unint64_t v126;
  unint64_t v127;
  unint64_t v128;
  unsigned int v129;
  unint64_t v130;
  unint64_t v131;
  _QWORD *v132;
  uint64_t v133;
  _QWORD *v134;
  _QWORD *v135;
  unsigned int v136;
  unint64_t v137;
  unint64_t v138;
  unint64_t v139;
  uint64_t v140;
  _QWORD *v141;
  _QWORD *v142;
  uint64_t v143;
  unint64_t *v144;
  unint64_t v145;
  uint64_t v146;
  unint64_t v147;
  unint64_t v148;
  unint64_t v149;
  unint64_t v150;
  unsigned int v151;
  unint64_t v152;
  unint64_t v153;
  unint64_t v154;
  unint64_t *v155;
  uint64_t v156;
  _QWORD *v157;
  _QWORD *v158;
  _QWORD *v159;
  unint64_t v160;
  unint64_t v161;
  unint64_t v162;
  unint64_t v163;
  uint64_t v164;
  unint64_t *v165;
  uint64_t *v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t *v169;
  uint64_t *v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t *v176;
  BOOL v177;
  char v178;
  _QWORD **v179;
  uint64_t *v180;
  uint64_t *v181;
  uint64_t *v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t *v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  unint64_t v189;
  uint64_t *v190;
  unint64_t v191;
  uint64_t v192;
  unint64_t *v193;
  uint64_t *v194;
  uint64_t *v195;
  unint64_t v196;
  unsigned int v197;
  unint64_t *v198;
  uint64_t *v199;
  unint64_t v200;
  unint64_t *v201;
  uint64_t v202;
  unint64_t *v203;
  unint64_t *v204;
  unint64_t v205;
  unsigned int v206;
  unint64_t *v207;
  unint64_t v208;
  unint64_t v209;
  uint64_t v210;
  unint64_t *v211;
  unint64_t *v212;
  int64_t v213;
  int64_t v214;
  _QWORD ***v215;
  int64_t v216;
  uint64_t v217;
  uint64_t *v218;
  uint64_t *v219;
  uint64_t v220;
  _QWORD **v221;
  uint64_t v222;
  uint64_t v223;
  _BOOL4 v224;
  uint64_t *v225;
  uint64_t v226;
  uint64_t v227;
  int64_t v228;
  uint64_t v229;
  _BOOL4 v230;
  uint64_t *v231;
  uint64_t v232;
  _QWORD **v233;
  uint64_t v234;
  uint64_t *v235;
  uint64_t v237;
  uint64_t v238;
  uint64_t *v239;
  _BOOL4 v240;
  uint64_t *v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t *v245;
  unint64_t v246;
  unint64_t v247;
  uint64_t v248;
  unint64_t v249;
  unint64_t v250;
  unint64_t v251;
  unint64_t v252;
  unsigned int v253;
  unint64_t v254;
  unint64_t v255;
  unint64_t v256;
  unint64_t v257;
  _QWORD *v258;
  uint64_t v259;
  _QWORD *v260;
  _QWORD *v261;
  _QWORD *v262;
  unint64_t v263;
  unsigned int v264;
  unint64_t v265;
  unint64_t v266;
  uint64_t v267;
  _QWORD *v268;
  _QWORD *v269;
  uint64_t v270;
  unint64_t v271;
  uint64_t *v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t *v275;
  uint64_t *v276;
  _QWORD **v277;
  uint64_t *v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t *v281;
  uint64_t v282;
  uint64_t *v283;
  unint64_t v284;
  uint64_t *v285;
  unint64_t v286;
  uint64_t v287;
  uint64_t *v288;
  uint64_t *v289;
  uint64_t *v290;
  unint64_t v291;
  unsigned int v292;
  uint64_t *v293;
  uint64_t *v294;
  unint64_t v295;
  unint64_t v296;
  uint64_t *v297;
  uint64_t v298;
  uint64_t *v299;
  uint64_t *v300;
  uint64_t *v301;
  unint64_t v302;
  unsigned int v303;
  uint64_t *v304;
  unint64_t v305;
  unint64_t v306;
  uint64_t v307;
  uint64_t *v308;
  uint64_t *v309;
  uint64_t *v310;
  uint64_t *v311;
  unint64_t v312;
  uint64_t *v313;
  int64_t v314;
  uint64_t v316;
  uint64_t *v317;
  uint64_t *v319;

  v7 = (uint64_t *)result;
LABEL_2:
  v311 = a2 - 2;
  v313 = a2 - 1;
  v310 = a2 - 3;
  v8 = a3;
  v317 = a2;
  while (2)
  {
    v9 = v7;
    v10 = (char *)a2 - (char *)v7;
    v11 = a2 - v7;
    switch(v11)
    {
      case 0:
      case 1:
        return result;
      case 2:
        v167 = *(a2 - 1);
        v168 = *v7;
        result = sub_20F625764(*a3, *(uint64_t **)(v167 + 200), *(_QWORD *)(v167 + 208), *(uint64_t **)(*v7 + 200), *(_QWORD *)(*v7 + 208));
        if ((_DWORD)result)
        {
          *v7 = v167;
          *(a2 - 1) = v168;
        }
        return result;
      case 3:
        return sub_20F71C504(v7, v7 + 1, v313, a3);
      case 4:
        v169 = v7 + 1;
        v170 = v7 + 2;
        sub_20F71C504(v7, v7 + 1, v7 + 2, a3);
        v171 = *(a2 - 1);
        v172 = v7[2];
        result = sub_20F625764(*a3, *(uint64_t **)(v171 + 200), *(_QWORD *)(v171 + 208), *(uint64_t **)(v172 + 200), *(_QWORD *)(v172 + 208));
        if ((_DWORD)result)
        {
          *v170 = v171;
          *(a2 - 1) = v172;
          v173 = *v170;
          v174 = *v169;
          result = sub_20F625764(*a3, *(uint64_t **)(*v170 + 200), *(_QWORD *)(*v170 + 208), *(uint64_t **)(*v169 + 200), *(_QWORD *)(*v169 + 208));
          if ((_DWORD)result)
          {
            v7[1] = v173;
            v7[2] = v174;
            v175 = *v7;
            result = sub_20F625764(*a3, *(uint64_t **)(v173 + 200), *(_QWORD *)(v173 + 208), *(uint64_t **)(*v7 + 200), *(_QWORD *)(*v7 + 208));
            if ((_DWORD)result)
            {
              *v7 = v173;
              v7[1] = v175;
            }
          }
        }
        return result;
      case 5:
        return sub_20F71C834(v7, v7 + 1, v7 + 2, v7 + 3, v313, a3);
      default:
        if (v10 > 191)
        {
          v319 = v7;
          if (!a4)
          {
            if (v7 != a2)
            {
              v312 = (char *)a2 - (char *)v7;
              v213 = (unint64_t)(v11 - 2) >> 1;
              v214 = v213;
              v215 = a3;
              do
              {
                v216 = v214;
                if (v213 >= v214)
                {
                  v314 = v214;
                  v217 = (2 * v214) | 1;
                  v218 = v319;
                  v219 = &v319[v217];
                  v220 = 2 * v214 + 2;
                  v221 = *v215;
                  if (v220 >= v11)
                  {
                    v222 = *v219;
                  }
                  else
                  {
                    v222 = *v219;
                    v223 = v219[1];
                    v224 = sub_20F625764(*v215, *(uint64_t **)(*v219 + 200), *(_QWORD *)(*v219 + 208), *(uint64_t **)(v223 + 200), *(_QWORD *)(v223 + 208));
                    if (v224)
                    {
                      v222 = v223;
                      ++v219;
                    }
                    v218 = v319;
                    if (v224)
                      v217 = v220;
                  }
                  v216 = v314;
                  v225 = &v218[v314];
                  v226 = *v225;
                  result = sub_20F625764(v221, *(uint64_t **)(v222 + 200), *(_QWORD *)(v222 + 208), *(uint64_t **)(*v225 + 200), *(_QWORD *)(*v225 + 208));
                  if ((result & 1) == 0)
                  {
                    v316 = v226;
                    while (1)
                    {
                      v231 = v219;
                      *v225 = v222;
                      if (v213 < v217)
                        break;
                      v232 = (2 * v217) | 1;
                      v219 = &v319[v232];
                      v217 = 2 * v217 + 2;
                      v233 = *v215;
                      if (v217 < v11)
                      {
                        v222 = *v219;
                        v227 = v11;
                        v228 = v213;
                        v229 = v219[1];
                        v230 = sub_20F625764(*v215, *(uint64_t **)(*v219 + 200), *(_QWORD *)(*v219 + 208), *(uint64_t **)(v229 + 200), *(_QWORD *)(v229 + 208));
                        if (v230)
                          v222 = v229;
                        v213 = v228;
                        v11 = v227;
                        v226 = v316;
                        if (v230)
                          ++v219;
                        v215 = a3;
                        if (!v230)
                          v217 = v232;
                        result = sub_20F625764(v233, *(uint64_t **)(v222 + 200), *(_QWORD *)(v222 + 208), *(uint64_t **)(v316 + 200), *(_QWORD *)(v316 + 208));
                        v225 = v231;
                        if ((_DWORD)result)
                          break;
                      }
                      else
                      {
                        v222 = *v219;
                        v217 = v232;
                        result = sub_20F625764(*v215, *(uint64_t **)(*v219 + 200), *(_QWORD *)(*v219 + 208), *(uint64_t **)(v226 + 200), *(_QWORD *)(v226 + 208));
                        v225 = v231;
                        if ((_DWORD)result)
                          break;
                      }
                    }
                    *v231 = v226;
                    v216 = v314;
                  }
                }
                v214 = v216 - 1;
              }
              while (v216);
              v234 = v312 >> 3;
              v235 = v317;
              do
              {
                v237 = 0;
                v238 = *v319;
                v239 = v319;
                do
                {
                  v241 = &v239[v237 + 1];
                  v242 = (2 * v237) | 1;
                  v243 = 2 * v237 + 2;
                  if (v243 < v234)
                  {
                    v244 = v241[1];
                    v245 = *(uint64_t **)(*v241 + 200);
                    v246 = (uint64_t)(*(_QWORD *)(*v241 + 208) - (_QWORD)v245) >> 6;
                    result = *(_QWORD *)(v244 + 200);
                    v247 = (uint64_t)(*(_QWORD *)(v244 + 208) - result) >> 6;
                    if (v246 == v247)
                    {
                      v248 = (**a3)[1];
                      v251 = *(_QWORD *)(v248 + 56);
                      v249 = v248 + 56;
                      v250 = v251;
                      if (!v251)
                        goto LABEL_455;
                      v252 = *v245;
                      v253 = *((_DWORD *)v245 + 2);
                      v254 = v249;
                      v255 = v250;
                      do
                      {
                        v256 = *(_QWORD *)(v255 + 32);
                        if (v256 < v252)
                        {
                          v255 += 8;
                        }
                        else if (v256 == v252)
                        {
                          if (*(_DWORD *)(v255 + 40) < v253)
                            v255 += 8;
                          else
                            v254 = v255;
                        }
                        else
                        {
                          v254 = v255;
                        }
                        v255 = *(_QWORD *)v255;
                      }
                      while (v255);
                      if (v254 == v249
                        || (v257 = *(_QWORD *)(v254 + 32), v252 < v257)
                        || v252 == v257 && *(_DWORD *)(v254 + 40) > v253)
                      {
LABEL_455:
                        v254 = v249;
                      }
                      v258 = (_QWORD *)*(*a3)[1];
                      if (v258 == (_QWORD *)v254)
                      {
                        v259 = 0;
                      }
                      else
                      {
                        v259 = 0;
                        v260 = (_QWORD *)*(*a3)[1];
                        do
                        {
                          v261 = (_QWORD *)v260[1];
                          if (v261)
                          {
                            do
                            {
                              v262 = v261;
                              v261 = (_QWORD *)*v261;
                            }
                            while (v261);
                          }
                          else
                          {
                            do
                            {
                              v262 = (_QWORD *)v260[2];
                              v177 = *v262 == (_QWORD)v260;
                              v260 = v262;
                            }
                            while (!v177);
                          }
                          ++v259;
                          v260 = v262;
                        }
                        while (v262 != (_QWORD *)v254);
                      }
                      if (!v250)
                        goto LABEL_480;
                      v263 = *(_QWORD *)result;
                      v264 = *(_DWORD *)(result + 8);
                      result = v249;
                      do
                      {
                        v265 = *(_QWORD *)(v250 + 32);
                        if (v265 < v263)
                        {
                          v250 += 8;
                        }
                        else if (v265 == v263)
                        {
                          if (*(_DWORD *)(v250 + 40) < v264)
                            v250 += 8;
                          else
                            result = v250;
                        }
                        else
                        {
                          result = v250;
                        }
                        v250 = *(_QWORD *)v250;
                      }
                      while (v250);
                      if (result == v249
                        || (v266 = *(_QWORD *)(result + 32), v263 < v266)
                        || v263 == v266 && *(_DWORD *)(result + 40) > v264)
                      {
LABEL_480:
                        result = v249;
                      }
                      if (v258 == (_QWORD *)result)
                      {
                        v267 = 0;
                      }
                      else
                      {
                        v267 = 0;
                        do
                        {
                          v268 = (_QWORD *)v258[1];
                          if (v268)
                          {
                            do
                            {
                              v269 = v268;
                              v268 = (_QWORD *)*v268;
                            }
                            while (v268);
                          }
                          else
                          {
                            do
                            {
                              v269 = (_QWORD *)v258[2];
                              v177 = *v269 == (_QWORD)v258;
                              v258 = v269;
                            }
                            while (!v177);
                          }
                          ++v267;
                          v258 = v269;
                        }
                        while (v269 != (_QWORD *)result);
                      }
                      v240 = v259 > v267;
                    }
                    else
                    {
                      v240 = v246 > v247;
                    }
                    if (v240)
                    {
                      ++v241;
                      v242 = v243;
                    }
                  }
                  *v239 = *v241;
                  v239 = v241;
                  v237 = v242;
                }
                while (v242 <= (uint64_t)((unint64_t)(v234 - 2) >> 1));
                if (v241 == --v235)
                {
                  *v241 = v238;
                }
                else
                {
                  *v241 = *v235;
                  *v235 = v238;
                  v270 = (char *)v241 - (char *)v319 + 8;
                  if (v270 >= 9)
                  {
                    v271 = (((unint64_t)v270 >> 3) - 2) >> 1;
                    v272 = &v319[v271];
                    v273 = *v272;
                    v274 = *v241;
                    result = sub_20F625764(*a3, *(uint64_t **)(*v272 + 200), *(_QWORD *)(*v272 + 208), *(uint64_t **)(*v241 + 200), *(_QWORD *)(*v241 + 208));
                    if ((_DWORD)result)
                    {
                      v275 = v235;
                      do
                      {
                        v276 = v272;
                        *v241 = v273;
                        if (!v271)
                          break;
                        v271 = (v271 - 1) >> 1;
                        v272 = &v319[v271];
                        v273 = *v272;
                        result = sub_20F625764(*a3, *(uint64_t **)(*v272 + 200), *(_QWORD *)(*v272 + 208), *(uint64_t **)(v274 + 200), *(_QWORD *)(v274 + 208));
                        v241 = v276;
                      }
                      while ((result & 1) != 0);
                      *v276 = v274;
                      v235 = v275;
                    }
                  }
                }
              }
              while (v234-- > 2);
            }
            return result;
          }
          v12 = (unint64_t)v11 >> 1;
          v13 = &v7[(unint64_t)v11 >> 1];
          if ((unint64_t)v10 < 0x401)
          {
            sub_20F71C504(v13, v7, v313, v8);
            --a4;
            v16 = *v7;
            v17 = *v8;
            if ((a5 & 1) != 0)
            {
LABEL_11:
              v20 = a4;
              v19 = *(_QWORD *)(v16 + 200);
              v18 = *(_QWORD *)(v16 + 208);
              goto LABEL_12;
            }
          }
          else
          {
            sub_20F71C504(v7, v13, v313, v8);
            v14 = v12;
            sub_20F71C504(v7 + 1, &v7[v14 - 1], v311, a3);
            sub_20F71C504(v7 + 2, &v7[v14 + 1], v310, a3);
            sub_20F71C504(&v7[v14 - 1], v13, &v7[v14 + 1], a3);
            v15 = *v7;
            *v7 = v7[v14];
            v7[v14] = v15;
            v8 = a3;
            --a4;
            v16 = *v7;
            v17 = *a3;
            if ((a5 & 1) != 0)
              goto LABEL_11;
          }
          v19 = *(_QWORD *)(v16 + 200);
          v18 = *(_QWORD *)(v16 + 208);
          if (!sub_20F625764(v17, *(uint64_t **)(*(v7 - 1) + 200), *(_QWORD *)(*(v7 - 1) + 208), (uint64_t *)v19, v18))
          {
            result = sub_20F625764(v17, (uint64_t *)v19, v18, *(uint64_t **)(*v313 + 200), *(_QWORD *)(*v313 + 208));
            if ((result & 1) != 0)
            {
              do
              {
                v112 = v7[1];
                ++v7;
                result = sub_20F625764(v17, (uint64_t *)v19, v18, *(uint64_t **)(v112 + 200), *(_QWORD *)(v112 + 208));
              }
              while ((result & 1) == 0);
            }
            else
            {
              v113 = v7 + 1;
              do
              {
                v7 = v113;
                if (v113 >= v317)
                  break;
                ++v113;
                result = sub_20F625764(v17, (uint64_t *)v19, v18, *(uint64_t **)(*v7 + 200), *(_QWORD *)(*v7 + 208));
              }
              while (!(_DWORD)result);
            }
            v114 = v317;
            if (v7 < v317)
            {
              v114 = v317;
              do
              {
                v115 = *--v114;
                result = sub_20F625764(v17, (uint64_t *)v19, v18, *(uint64_t **)(v115 + 200), *(_QWORD *)(v115 + 208));
              }
              while ((result & 1) != 0);
            }
            if (v7 >= v114)
            {
              a2 = v317;
            }
            else
            {
              v116 = *v7;
              v117 = *v114;
              a2 = v317;
              do
              {
                *v7 = v117;
                *v114 = v116;
                v118 = *(_QWORD *)(v16 + 200);
                v119 = (*(_QWORD *)(v16 + 208) - v118) >> 6;
                v120 = *v8;
                do
                {
                  while (1)
                  {
                    v121 = v7[1];
                    ++v7;
                    v116 = v121;
                    v122 = *(_QWORD *)(v121 + 200);
                    v123 = (*(_QWORD *)(v121 + 208) - v122) >> 6;
                    if (v119 == v123)
                      break;
                    if (v119 > v123)
                      goto LABEL_265;
                  }
                  v124 = (*v120)[1];
                  v127 = *(_QWORD *)(v124 + 56);
                  v125 = v124 + 56;
                  v126 = v127;
                  if (!v127)
                    goto LABEL_226;
                  v128 = *(_QWORD *)v118;
                  v129 = *(_DWORD *)(v118 + 8);
                  v130 = v125;
                  result = v126;
                  do
                  {
                    v131 = *(_QWORD *)(result + 32);
                    if (v131 < v128)
                    {
                      result += 8;
                    }
                    else if (v131 == v128)
                    {
                      if (*(_DWORD *)(result + 40) < v129)
                        result += 8;
                      else
                        v130 = result;
                    }
                    else
                    {
                      v130 = result;
                    }
                    result = *(_QWORD *)result;
                  }
                  while (result);
                  if (v130 == v125
                    || (result = *(_QWORD *)(v130 + 32), v128 < result)
                    || v128 == result && *(_DWORD *)(v130 + 40) > v129)
                  {
LABEL_226:
                    v130 = v125;
                  }
                  v132 = (_QWORD *)*v120[1];
                  if (v132 == (_QWORD *)v130)
                  {
                    v133 = 0;
                  }
                  else
                  {
                    v133 = 0;
                    result = *v120[1];
                    do
                    {
                      v134 = *(_QWORD **)(result + 8);
                      if (v134)
                      {
                        do
                        {
                          v135 = v134;
                          v134 = (_QWORD *)*v134;
                        }
                        while (v134);
                      }
                      else
                      {
                        do
                        {
                          v135 = *(_QWORD **)(result + 16);
                          v177 = *v135 == result;
                          result = (unint64_t)v135;
                        }
                        while (!v177);
                      }
                      ++v133;
                      result = (unint64_t)v135;
                    }
                    while (v135 != (_QWORD *)v130);
                  }
                  if (!v126)
                    goto LABEL_251;
                  result = *(_QWORD *)v122;
                  v136 = *(_DWORD *)(v122 + 8);
                  v137 = v125;
                  do
                  {
                    v138 = *(_QWORD *)(v126 + 32);
                    if (v138 < result)
                    {
                      v126 += 8;
                    }
                    else if (v138 == result)
                    {
                      if (*(_DWORD *)(v126 + 40) < v136)
                        v126 += 8;
                      else
                        v137 = v126;
                    }
                    else
                    {
                      v137 = v126;
                    }
                    v126 = *(_QWORD *)v126;
                  }
                  while (v126);
                  if (v137 == v125
                    || (v139 = *(_QWORD *)(v137 + 32), result < v139)
                    || result == v139 && *(_DWORD *)(v137 + 40) > v136)
                  {
LABEL_251:
                    v137 = v125;
                  }
                  if (v132 == (_QWORD *)v137)
                  {
                    v140 = 0;
                  }
                  else
                  {
                    v140 = 0;
                    do
                    {
                      v141 = (_QWORD *)v132[1];
                      if (v141)
                      {
                        do
                        {
                          v142 = v141;
                          v141 = (_QWORD *)*v141;
                        }
                        while (v141);
                      }
                      else
                      {
                        do
                        {
                          v142 = (_QWORD *)v132[2];
                          v177 = *v142 == (_QWORD)v132;
                          v132 = v142;
                        }
                        while (!v177);
                      }
                      ++v140;
                      v132 = v142;
                    }
                    while (v142 != (_QWORD *)v137);
                  }
                }
                while (v133 <= v140);
                do
                {
LABEL_265:
                  while (1)
                  {
                    v143 = *--v114;
                    v117 = v143;
                    v144 = *(unint64_t **)(v143 + 200);
                    v145 = (uint64_t)(*(_QWORD *)(v143 + 208) - (_QWORD)v144) >> 6;
                    if (v119 == v145)
                      break;
                    if (v119 <= v145)
                      goto LABEL_208;
                  }
                  v146 = (*v120)[1];
                  v149 = *(_QWORD *)(v146 + 56);
                  v147 = v146 + 56;
                  v148 = v149;
                  if (!v149)
                    goto LABEL_280;
                  v150 = *(_QWORD *)v118;
                  v151 = *(_DWORD *)(v118 + 8);
                  result = v147;
                  v152 = v148;
                  do
                  {
                    v153 = *(_QWORD *)(v152 + 32);
                    if (v153 < v150)
                    {
                      v152 += 8;
                    }
                    else if (v153 == v150)
                    {
                      if (*(_DWORD *)(v152 + 40) < v151)
                        v152 += 8;
                      else
                        result = v152;
                    }
                    else
                    {
                      result = v152;
                    }
                    v152 = *(_QWORD *)v152;
                  }
                  while (v152);
                  if (result == v147
                    || (v154 = *(_QWORD *)(result + 32), v150 < v154)
                    || v150 == v154 && *(_DWORD *)(result + 40) > v151)
                  {
LABEL_280:
                    result = v147;
                  }
                  v155 = (unint64_t *)*v120[1];
                  if (v155 == (unint64_t *)result)
                  {
                    v156 = 0;
                  }
                  else
                  {
                    v156 = 0;
                    v157 = (_QWORD *)*v120[1];
                    do
                    {
                      v158 = (_QWORD *)v157[1];
                      if (v158)
                      {
                        do
                        {
                          v159 = v158;
                          v158 = (_QWORD *)*v158;
                        }
                        while (v158);
                      }
                      else
                      {
                        do
                        {
                          v159 = (_QWORD *)v157[2];
                          v177 = *v159 == (_QWORD)v157;
                          v157 = v159;
                        }
                        while (!v177);
                      }
                      ++v156;
                      v157 = v159;
                    }
                    while (v159 != (_QWORD *)result);
                  }
                  if (!v148)
                    goto LABEL_305;
                  v160 = *v144;
                  result = *((unsigned int *)v144 + 2);
                  v161 = v147;
                  do
                  {
                    v162 = *(_QWORD *)(v148 + 32);
                    if (v162 < v160)
                    {
                      v148 += 8;
                    }
                    else if (v162 == v160)
                    {
                      if (*(_DWORD *)(v148 + 40) < result)
                        v148 += 8;
                      else
                        v161 = v148;
                    }
                    else
                    {
                      v161 = v148;
                    }
                    v148 = *(_QWORD *)v148;
                  }
                  while (v148);
                  if (v161 == v147
                    || (v163 = *(_QWORD *)(v161 + 32), v160 < v163)
                    || v160 == v163 && *(_DWORD *)(v161 + 40) > result)
                  {
LABEL_305:
                    v161 = v147;
                  }
                  if (v155 == (unint64_t *)v161)
                  {
                    v164 = 0;
                  }
                  else
                  {
                    v164 = 0;
                    do
                    {
                      result = v155[1];
                      if (result)
                      {
                        do
                        {
                          v165 = (unint64_t *)result;
                          result = *(_QWORD *)result;
                        }
                        while (result);
                      }
                      else
                      {
                        do
                        {
                          v165 = (unint64_t *)v155[2];
                          result = *v165;
                          v177 = *v165 == (_QWORD)v155;
                          v155 = v165;
                        }
                        while (!v177);
                      }
                      ++v164;
                      v155 = v165;
                    }
                    while (v165 != (unint64_t *)v161);
                  }
                }
                while (v156 > v164);
LABEL_208:
                ;
              }
              while (v7 < v114);
            }
            v166 = v7 - 1;
            if (v7 - 1 != v9)
              *v9 = *v166;
            a5 = 0;
            *v166 = v16;
            continue;
          }
          v20 = a4;
LABEL_12:
          v21 = (v18 - v19) >> 6;
          do
          {
            while (1)
            {
              v22 = v7;
              v24 = v7[1];
              ++v7;
              v23 = v24;
              v25 = *(uint64_t **)(v24 + 200);
              v26 = (uint64_t)(*(_QWORD *)(v24 + 208) - (_QWORD)v25) >> 6;
              if (v26 == v21)
                break;
              if (v26 <= v21)
                goto LABEL_69;
            }
            v27 = (*v17)[1];
            v30 = *(uint64_t **)(v27 + 56);
            v28 = (uint64_t *)(v27 + 56);
            v29 = v30;
            if (!v30)
              goto LABEL_27;
            v31 = *v25;
            v32 = *((_DWORD *)v25 + 2);
            v33 = v28;
            v34 = v29;
            do
            {
              v35 = v34[4];
              if (v35 < v31)
              {
                ++v34;
              }
              else if (v35 == v31)
              {
                if (*((_DWORD *)v34 + 10) < v32)
                  ++v34;
                else
                  v33 = v34;
              }
              else
              {
                v33 = v34;
              }
              v34 = (uint64_t *)*v34;
            }
            while (v34);
            if (v33 == v28 || (v36 = v33[4], v31 < v36) || v31 == v36 && *((_DWORD *)v33 + 10) > v32)
LABEL_27:
              v33 = v28;
            v37 = (uint64_t *)*v17[1];
            if (v37 == v33)
            {
              v38 = 0;
            }
            else
            {
              v38 = 0;
              v39 = (uint64_t *)*v17[1];
              do
              {
                v40 = (uint64_t *)v39[1];
                if (v40)
                {
                  do
                  {
                    v41 = v40;
                    v40 = (uint64_t *)*v40;
                  }
                  while (v40);
                }
                else
                {
                  do
                  {
                    v41 = (uint64_t *)v39[2];
                    v177 = *v41 == (_QWORD)v39;
                    v39 = v41;
                  }
                  while (!v177);
                }
                ++v38;
                v39 = v41;
              }
              while (v41 != v33);
            }
            if (!v29)
              goto LABEL_50;
            v42 = *(_QWORD *)v19;
            v43 = *(_DWORD *)(v19 + 8);
            v44 = v28;
            do
            {
              v45 = v29[4];
              if (v45 < v42)
              {
                ++v29;
              }
              else if (v45 == v42)
              {
                if (*((_DWORD *)v29 + 10) < v43)
                  ++v29;
                else
                  v44 = v29;
              }
              else
              {
                v44 = v29;
              }
              v29 = (uint64_t *)*v29;
            }
            while (v29);
            if (v44 == v28 || (v46 = v44[4], v42 < v46) || v42 == v46 && *((_DWORD *)v44 + 10) > v43)
LABEL_50:
              v44 = v28;
            if (v37 == v44)
            {
              v47 = 0;
            }
            else
            {
              v47 = 0;
              do
              {
                v48 = (uint64_t *)v37[1];
                if (v48)
                {
                  do
                  {
                    v49 = v48;
                    v48 = (uint64_t *)*v48;
                  }
                  while (v48);
                }
                else
                {
                  do
                  {
                    v49 = (uint64_t *)v37[2];
                    v177 = *v49 == (_QWORD)v37;
                    v37 = v49;
                  }
                  while (!v177);
                }
                ++v47;
                v37 = v49;
              }
              while (v49 != v44);
            }
          }
          while (v38 > v47);
LABEL_69:
          v50 = v317;
          if (v22 == v319)
          {
            v50 = v317;
            do
            {
              if (v7 >= v50)
                break;
              v52 = *--v50;
            }
            while (!sub_20F625764(v17, *(uint64_t **)(v52 + 200), *(_QWORD *)(v52 + 208), (uint64_t *)v19, v18));
          }
          else
          {
            do
              v51 = *--v50;
            while (!sub_20F625764(v17, *(uint64_t **)(v51 + 200), *(_QWORD *)(v51 + 208), (uint64_t *)v19, v18));
          }
          a2 = v317;
          if (v7 < v50)
          {
            v53 = *v50;
            v54 = v7;
            v55 = v50;
            do
            {
              *v54 = v53;
              *v55 = v23;
              v56 = *(uint64_t **)(v16 + 200);
              v57 = (uint64_t)(*(_QWORD *)(v16 + 208) - (_QWORD)v56) >> 6;
              v58 = *v8;
              do
              {
                while (1)
                {
                  v22 = v54;
                  v59 = v54[1];
                  ++v54;
                  v23 = v59;
                  v60 = *(uint64_t **)(v59 + 200);
                  v61 = (uint64_t)(*(_QWORD *)(v59 + 208) - (_QWORD)v60) >> 6;
                  if (v61 == v57)
                    break;
                  if (v61 <= v57)
                    goto LABEL_136;
                }
                v62 = (*v58)[1];
                v65 = *(uint64_t **)(v62 + 56);
                v63 = (uint64_t *)(v62 + 56);
                v64 = v65;
                if (!v65)
                  goto LABEL_93;
                v66 = *v60;
                v67 = *((_DWORD *)v60 + 2);
                v68 = v63;
                v69 = v64;
                do
                {
                  v70 = v69[4];
                  if (v70 < v66)
                  {
                    ++v69;
                  }
                  else if (v70 == v66)
                  {
                    if (*((_DWORD *)v69 + 10) < v67)
                      ++v69;
                    else
                      v68 = v69;
                  }
                  else
                  {
                    v68 = v69;
                  }
                  v69 = (uint64_t *)*v69;
                }
                while (v69);
                if (v68 == v63 || (v71 = v68[4], v66 < v71) || v66 == v71 && *((_DWORD *)v68 + 10) > v67)
LABEL_93:
                  v68 = v63;
                v72 = (uint64_t *)*v58[1];
                if (v72 == v68)
                {
                  v73 = 0;
                }
                else
                {
                  v73 = 0;
                  v74 = (uint64_t *)*v58[1];
                  do
                  {
                    v75 = (uint64_t *)v74[1];
                    if (v75)
                    {
                      do
                      {
                        v76 = v75;
                        v75 = (uint64_t *)*v75;
                      }
                      while (v75);
                    }
                    else
                    {
                      do
                      {
                        v76 = (uint64_t *)v74[2];
                        v177 = *v76 == (_QWORD)v74;
                        v74 = v76;
                      }
                      while (!v177);
                    }
                    ++v73;
                    v74 = v76;
                  }
                  while (v76 != v68);
                }
                if (!v64)
                  goto LABEL_116;
                v77 = *v56;
                v78 = *((_DWORD *)v56 + 2);
                v79 = v63;
                do
                {
                  v80 = v64[4];
                  if (v80 < v77)
                  {
                    ++v64;
                  }
                  else if (v80 == v77)
                  {
                    if (*((_DWORD *)v64 + 10) < v78)
                      ++v64;
                    else
                      v79 = v64;
                  }
                  else
                  {
                    v79 = v64;
                  }
                  v64 = (uint64_t *)*v64;
                }
                while (v64);
                if (v79 == v63 || (v81 = v79[4], v77 < v81) || v77 == v81 && *((_DWORD *)v79 + 10) > v78)
LABEL_116:
                  v79 = v63;
                if (v72 == v79)
                {
                  v82 = 0;
                }
                else
                {
                  v82 = 0;
                  do
                  {
                    v83 = (uint64_t *)v72[1];
                    if (v83)
                    {
                      do
                      {
                        v84 = v83;
                        v83 = (uint64_t *)*v83;
                      }
                      while (v83);
                    }
                    else
                    {
                      do
                      {
                        v84 = (uint64_t *)v72[2];
                        v177 = *v84 == (_QWORD)v72;
                        v72 = v84;
                      }
                      while (!v177);
                    }
                    ++v82;
                    v72 = v84;
                  }
                  while (v84 != v79);
                }
              }
              while (v73 > v82);
              do
              {
LABEL_136:
                while (1)
                {
                  v85 = *--v55;
                  v53 = v85;
                  v86 = *(uint64_t **)(v85 + 200);
                  v87 = (uint64_t)(*(_QWORD *)(v85 + 208) - (_QWORD)v86) >> 6;
                  if (v87 == v57)
                    break;
                  if (v87 > v57)
                    goto LABEL_77;
                }
                v88 = (*v58)[1];
                v91 = *(uint64_t **)(v88 + 56);
                v89 = (uint64_t *)(v88 + 56);
                v90 = v91;
                if (!v91)
                  goto LABEL_149;
                v92 = *v86;
                v93 = *((_DWORD *)v86 + 2);
                v94 = v89;
                v95 = v90;
                do
                {
                  v96 = v95[4];
                  if (v96 < v92)
                  {
                    ++v95;
                  }
                  else if (v96 == v92)
                  {
                    if (*((_DWORD *)v95 + 10) < v93)
                      ++v95;
                    else
                      v94 = v95;
                  }
                  else
                  {
                    v94 = v95;
                  }
                  v95 = (uint64_t *)*v95;
                }
                while (v95);
                if (v94 == v89 || (v97 = v94[4], v92 < v97) || v92 == v97 && *((_DWORD *)v94 + 10) > v93)
LABEL_149:
                  v94 = v89;
                v98 = (uint64_t *)*v58[1];
                if (v98 == v94)
                {
                  v99 = 0;
                }
                else
                {
                  v99 = 0;
                  v100 = (uint64_t *)*v58[1];
                  do
                  {
                    v101 = (uint64_t *)v100[1];
                    if (v101)
                    {
                      do
                      {
                        v102 = v101;
                        v101 = (uint64_t *)*v101;
                      }
                      while (v101);
                    }
                    else
                    {
                      do
                      {
                        v102 = (uint64_t *)v100[2];
                        v177 = *v102 == (_QWORD)v100;
                        v100 = v102;
                      }
                      while (!v177);
                    }
                    ++v99;
                    v100 = v102;
                  }
                  while (v102 != v94);
                }
                if (!v90)
                  goto LABEL_172;
                v103 = *v56;
                v104 = *((_DWORD *)v56 + 2);
                v105 = v89;
                do
                {
                  v106 = v90[4];
                  if (v106 < v103)
                  {
                    ++v90;
                  }
                  else if (v106 == v103)
                  {
                    if (*((_DWORD *)v90 + 10) < v104)
                      ++v90;
                    else
                      v105 = v90;
                  }
                  else
                  {
                    v105 = v90;
                  }
                  v90 = (uint64_t *)*v90;
                }
                while (v90);
                if (v105 == v89 || (v107 = v105[4], v103 < v107) || v103 == v107 && *((_DWORD *)v105 + 10) > v104)
LABEL_172:
                  v105 = v89;
                if (v98 == v105)
                {
                  v108 = 0;
                }
                else
                {
                  v108 = 0;
                  do
                  {
                    v109 = (uint64_t *)v98[1];
                    if (v109)
                    {
                      do
                      {
                        v110 = v109;
                        v109 = (uint64_t *)*v109;
                      }
                      while (v109);
                    }
                    else
                    {
                      do
                      {
                        v110 = (uint64_t *)v98[2];
                        v177 = *v110 == (_QWORD)v98;
                        v98 = v110;
                      }
                      while (!v177);
                    }
                    ++v108;
                    v98 = v110;
                  }
                  while (v110 != v105);
                }
              }
              while (v99 <= v108);
LABEL_77:
              ;
            }
            while (v54 < v55);
          }
          if (v22 != v319)
            *v319 = *v22;
          *v22 = v16;
          a4 = v20;
          if (v7 < v50)
            goto LABEL_196;
          v111 = sub_20F7BC1E0(v319, v22, v8);
          v7 = v22 + 1;
          result = sub_20F7BC1E0(v22 + 1, v317, v8);
          if (!(_DWORD)result)
          {
            if (v111)
              continue;
LABEL_196:
            result = sub_20F7BA994(v319, v22, v8, v20, a5 & 1);
            a5 = 0;
            v7 = v22 + 1;
            continue;
          }
          a2 = v22;
          v7 = v319;
          if (v111)
            return result;
          goto LABEL_2;
        }
        v176 = v7 + 1;
        v177 = v7 == a2 || v176 == a2;
        v178 = v177;
        if ((a5 & 1) != 0)
        {
          if ((v178 & 1) == 0)
          {
            v179 = *a3;
            v180 = v7;
            do
            {
              v182 = v176;
              v183 = *v180;
              v184 = v180[1];
              result = sub_20F625764(v179, *(uint64_t **)(v184 + 200), *(_QWORD *)(v184 + 208), *(uint64_t **)(*v180 + 200), *(_QWORD *)(*v180 + 208));
              if ((_DWORD)result)
              {
                v180[1] = v183;
                v181 = v7;
                if (v180 != v7)
                {
                  v185 = v180;
                  do
                  {
                    v187 = *--v185;
                    v186 = v187;
                    v188 = *(_QWORD *)(v184 + 200);
                    v189 = (*(_QWORD *)(v184 + 208) - v188) >> 6;
                    v190 = *(uint64_t **)(v187 + 200);
                    v191 = (uint64_t)(*(_QWORD *)(v187 + 208) - (_QWORD)v190) >> 6;
                    if (v189 == v191)
                    {
                      v192 = (**a3)[1];
                      v195 = *(uint64_t **)(v192 + 56);
                      v193 = (unint64_t *)(v192 + 56);
                      v194 = v195;
                      if (!v195)
                        goto LABEL_363;
                      v196 = *(_QWORD *)v188;
                      v197 = *(_DWORD *)(v188 + 8);
                      v198 = v193;
                      v199 = v194;
                      do
                      {
                        result = v199[4];
                        if (result < v196)
                        {
                          ++v199;
                        }
                        else if (result == v196)
                        {
                          result = *((_DWORD *)v199 + 10) < v197;
                          if (*((_DWORD *)v199 + 10) < v197)
                            ++v199;
                          else
                            v198 = (unint64_t *)v199;
                        }
                        else
                        {
                          v198 = (unint64_t *)v199;
                        }
                        v199 = (uint64_t *)*v199;
                      }
                      while (v199);
                      if (v198 == v193
                        || (v200 = v198[4], v196 < v200)
                        || v196 == v200 && *((_DWORD *)v198 + 10) > v197)
                      {
LABEL_363:
                        v198 = v193;
                      }
                      v201 = (unint64_t *)*(*a3)[1];
                      if (v201 == v198)
                      {
                        v202 = 0;
                      }
                      else
                      {
                        v202 = 0;
                        v203 = (unint64_t *)*(*a3)[1];
                        do
                        {
                          result = v203[1];
                          if (result)
                          {
                            do
                            {
                              v204 = (unint64_t *)result;
                              result = *(_QWORD *)result;
                            }
                            while (result);
                          }
                          else
                          {
                            do
                            {
                              v204 = (unint64_t *)v203[2];
                              result = *v204;
                              v177 = *v204 == (_QWORD)v203;
                              v203 = v204;
                            }
                            while (!v177);
                          }
                          ++v202;
                          v203 = v204;
                        }
                        while (v204 != v198);
                      }
                      if (!v194)
                        goto LABEL_386;
                      v205 = *v190;
                      v206 = *((_DWORD *)v190 + 2);
                      v207 = v193;
                      do
                      {
                        v208 = v194[4];
                        if (v208 < v205)
                        {
                          ++v194;
                        }
                        else if (v208 == v205)
                        {
                          result = (unint64_t)(v194 + 1);
                          if (*((_DWORD *)v194 + 10) < v206)
                            ++v194;
                          else
                            v207 = (unint64_t *)v194;
                        }
                        else
                        {
                          v207 = (unint64_t *)v194;
                        }
                        v194 = (uint64_t *)*v194;
                      }
                      while (v194);
                      if (v207 == v193
                        || (v209 = v207[4], v205 < v209)
                        || v205 == v209 && *((_DWORD *)v207 + 10) > v206)
                      {
LABEL_386:
                        v207 = v193;
                      }
                      if (v201 == v207)
                      {
                        v210 = 0;
                      }
                      else
                      {
                        v210 = 0;
                        do
                        {
                          v211 = (unint64_t *)v201[1];
                          if (v211)
                          {
                            do
                            {
                              v212 = v211;
                              v211 = (unint64_t *)*v211;
                            }
                            while (v211);
                          }
                          else
                          {
                            do
                            {
                              v212 = (unint64_t *)v201[2];
                              v177 = *v212 == (_QWORD)v201;
                              v201 = v212;
                            }
                            while (!v177);
                          }
                          ++v210;
                          v201 = v212;
                        }
                        while (v212 != v207);
                      }
                      if (v202 <= v210)
                      {
LABEL_342:
                        v181 = v180;
                        goto LABEL_343;
                      }
                    }
                    else if (v189 <= v191)
                    {
                      goto LABEL_342;
                    }
                    *v180 = v186;
                    v180 = v185;
                  }
                  while (v185 != v7);
                  v181 = v7;
                }
LABEL_343:
                *v181 = v184;
                v179 = *a3;
              }
              v176 = v182 + 1;
              v180 = v182;
            }
            while (v182 + 1 != a2);
          }
        }
        else if ((v178 & 1) == 0)
        {
          v277 = *a3;
          do
          {
            v278 = v176;
            v280 = *v9;
            v279 = v9[1];
            result = sub_20F625764(v277, *(uint64_t **)(v279 + 200), *(_QWORD *)(v279 + 208), *(uint64_t **)(*v9 + 200), *(_QWORD *)(*v9 + 208));
            if ((_DWORD)result)
            {
              v281 = v278;
              do
              {
                while (1)
                {
                  *v281 = v280;
                  v281 = v9;
                  v282 = *--v9;
                  v280 = v282;
                  v283 = *(uint64_t **)(v279 + 200);
                  v284 = (uint64_t)(*(_QWORD *)(v279 + 208) - (_QWORD)v283) >> 6;
                  v285 = *(uint64_t **)(v282 + 200);
                  v286 = (uint64_t)(*(_QWORD *)(v282 + 208) - (_QWORD)v285) >> 6;
                  if (v284 == v286)
                    break;
                  if (v284 <= v286)
                    goto LABEL_502;
                }
                v287 = (**a3)[1];
                v290 = *(uint64_t **)(v287 + 56);
                v288 = (uint64_t *)(v287 + 56);
                v289 = v290;
                if (!v290)
                  goto LABEL_522;
                v291 = *v283;
                v292 = *((_DWORD *)v283 + 2);
                v293 = v288;
                v294 = v289;
                do
                {
                  v295 = v294[4];
                  if (v295 < v291)
                  {
                    ++v294;
                  }
                  else if (v295 == v291)
                  {
                    result = (unint64_t)(v294 + 1);
                    if (*((_DWORD *)v294 + 10) < v292)
                      ++v294;
                    else
                      v293 = v294;
                  }
                  else
                  {
                    v293 = v294;
                  }
                  v294 = (uint64_t *)*v294;
                }
                while (v294);
                if (v293 == v288 || (v296 = v293[4], v291 < v296) || v291 == v296 && *((_DWORD *)v293 + 10) > v292)
LABEL_522:
                  v293 = v288;
                v297 = (uint64_t *)*(*a3)[1];
                if (v297 == v293)
                {
                  v298 = 0;
                }
                else
                {
                  v298 = 0;
                  v299 = (uint64_t *)*(*a3)[1];
                  do
                  {
                    v300 = (uint64_t *)v299[1];
                    if (v300)
                    {
                      do
                      {
                        v301 = v300;
                        v300 = (uint64_t *)*v300;
                      }
                      while (v300);
                    }
                    else
                    {
                      do
                      {
                        v301 = (uint64_t *)v299[2];
                        v177 = *v301 == (_QWORD)v299;
                        v299 = v301;
                      }
                      while (!v177);
                    }
                    ++v298;
                    v299 = v301;
                  }
                  while (v301 != v293);
                }
                if (!v289)
                  goto LABEL_547;
                v302 = *v285;
                v303 = *((_DWORD *)v285 + 2);
                v304 = v288;
                do
                {
                  v305 = v289[4];
                  if (v305 < v302)
                  {
                    ++v289;
                  }
                  else if (v305 == v302)
                  {
                    if (*((_DWORD *)v289 + 10) < v303)
                      ++v289;
                    else
                      v304 = v289;
                  }
                  else
                  {
                    v304 = v289;
                  }
                  v289 = (uint64_t *)*v289;
                }
                while (v289);
                if (v304 == v288 || (v306 = v304[4], v302 < v306) || v302 == v306 && *((_DWORD *)v304 + 10) > v303)
LABEL_547:
                  v304 = v288;
                if (v297 == v304)
                {
                  v307 = 0;
                }
                else
                {
                  v307 = 0;
                  do
                  {
                    v308 = (uint64_t *)v297[1];
                    if (v308)
                    {
                      do
                      {
                        v309 = v308;
                        v308 = (uint64_t *)*v308;
                      }
                      while (v308);
                    }
                    else
                    {
                      do
                      {
                        v309 = (uint64_t *)v297[2];
                        v177 = *v309 == (_QWORD)v297;
                        v297 = v309;
                      }
                      while (!v177);
                    }
                    ++v307;
                    v297 = v309;
                  }
                  while (v309 != v304);
                }
              }
              while (v298 > v307);
LABEL_502:
              *v281 = v279;
              v277 = *a3;
            }
            v176 = v278 + 1;
            v9 = v278;
          }
          while (v278 + 1 != a2);
        }
        return result;
    }
  }
}

BOOL sub_20F7BC1E0(uint64_t *a1, uint64_t *a2, _QWORD ***a3)
{
  uint64_t v6;
  _BOOL8 result;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t *v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD **v24;
  uint64_t v25;

  v6 = a2 - a1;
  result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v8 = *(a2 - 1);
      v9 = *a1;
      if (sub_20F625764(*a3, *(uint64_t **)(v8 + 200), *(_QWORD *)(v8 + 208), *(uint64_t **)(*a1 + 200), *(_QWORD *)(*a1 + 208)))
      {
        *a1 = v8;
        *(a2 - 1) = v9;
      }
      return 1;
    case 3:
      sub_20F71C504(a1, a1 + 1, a2 - 1, a3);
      return 1;
    case 4:
      v19 = a1 + 2;
      sub_20F71C504(a1, a1 + 1, a1 + 2, a3);
      v20 = *(a2 - 1);
      v21 = a1[2];
      if (sub_20F625764(*a3, *(uint64_t **)(v20 + 200), *(_QWORD *)(v20 + 208), *(uint64_t **)(v21 + 200), *(_QWORD *)(v21 + 208)))
      {
        *v19 = v20;
        *(a2 - 1) = v21;
        v22 = *v19;
        v23 = a1[1];
        if (sub_20F625764(*a3, *(uint64_t **)(*v19 + 200), *(_QWORD *)(*v19 + 208), *(uint64_t **)(v23 + 200), *(_QWORD *)(v23 + 208)))
        {
          a1[1] = v22;
          a1[2] = v23;
          v24 = *a3;
          v25 = *a1;
          if (sub_20F625764(v24, *(uint64_t **)(v22 + 200), *(_QWORD *)(v22 + 208), *(uint64_t **)(*a1 + 200), *(_QWORD *)(*a1 + 208)))
          {
            *a1 = v22;
            a1[1] = v25;
          }
        }
      }
      return 1;
    case 5:
      sub_20F71C834(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1, a3);
      return 1;
    default:
      v10 = a1 + 2;
      sub_20F71C504(a1, a1 + 1, a1 + 2, a3);
      v11 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v12 = 0;
      v13 = 24;
      break;
  }
  while (1)
  {
    v14 = *v11;
    v15 = *v10;
    if (sub_20F625764(*a3, *(uint64_t **)(*v11 + 200), *(_QWORD *)(*v11 + 208), *(uint64_t **)(v15 + 200), *(_QWORD *)(v15 + 208)))
    {
      break;
    }
LABEL_13:
    v10 = v11;
    v13 += 8;
    if (++v11 == a2)
      return 1;
  }
  v16 = v13;
  do
  {
    *(uint64_t *)((char *)a1 + v16) = v15;
    v17 = v16 - 8;
    if (v16 == 8)
    {
      *a1 = v14;
      if (++v12 != 8)
        goto LABEL_13;
      return v11 + 1 == a2;
    }
    v15 = *(uint64_t *)((char *)a1 + v16 - 16);
    v18 = sub_20F625764(*a3, *(uint64_t **)(v14 + 200), *(_QWORD *)(v14 + 208), *(uint64_t **)(v15 + 200), *(_QWORD *)(v15 + 208));
    v16 = v17;
  }
  while (v18);
  *(uint64_t *)((char *)a1 + v17) = v14;
  if (++v12 != 8)
    goto LABEL_13;
  return v11 + 1 == a2;
}

double sub_20F7BC404(uint64_t a1, double *a2, unint64_t a3, double *a4, uint64_t a5, double result)
{
  uint64_t v7;
  double v8;
  int v9;
  double *v12;
  unint64_t v13;
  double *v14;
  unint64_t v15;
  __n128 v16;
  double *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  double *v21;
  double v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  double *v26;
  double *v27;
  double *v28;
  double *v29;
  int v30;
  double v31;
  uint64_t v32;
  double *v33;
  uint64_t v34;
  uint64_t v35;
  double *v36;
  uint64_t v37;

  if (a3 >= 2)
  {
    v7 = a1;
    if (a3 == 2)
    {
      result = *(a2 - 2);
      v8 = *(double *)a1;
      if (result < *(double *)a1)
      {
        *(double *)a1 = result;
        *(a2 - 2) = v8;
        v9 = *(_DWORD *)(a1 + 8);
        *(_DWORD *)(a1 + 8) = *((_DWORD *)a2 - 2);
        *((_DWORD *)a2 - 2) = v9;
      }
    }
    else if ((uint64_t)a3 <= 0)
    {
      if ((double *)a1 != a2)
      {
        v17 = (double *)(a1 + 16);
        if ((double *)(a1 + 16) != a2)
        {
          v18 = 0;
          v19 = a1;
          do
          {
            v21 = v17;
            result = *v17;
            v22 = *(double *)v19;
            if (*v17 < *(double *)v19)
            {
              v23 = *(_DWORD *)(v19 + 24);
              v24 = v18;
              do
              {
                v25 = a1 + v24;
                *(double *)(v25 + 16) = v22;
                *(_DWORD *)(v25 + 24) = *(_DWORD *)(a1 + v24 + 8);
                if (!v24)
                {
                  v20 = a1;
                  goto LABEL_13;
                }
                v22 = *(double *)(v25 - 16);
                v24 -= 16;
              }
              while (result < v22);
              v20 = a1 + v24 + 16;
LABEL_13:
              *(double *)v20 = result;
              *(_DWORD *)(v20 + 8) = v23;
            }
            v17 = v21 + 2;
            v18 += 16;
            v19 = (uint64_t)v21;
          }
          while (v21 + 2 != a2);
        }
      }
    }
    else
    {
      v12 = a4;
      v13 = a3 >> 1;
      v14 = (double *)(a1 + 16 * (a3 >> 1));
      v15 = a3 >> 1;
      if ((uint64_t)a3 <= a5)
      {
        sub_20F7BC67C((double *)a1, v14, v15, a4);
        v26 = &v12[2 * v13];
        sub_20F7BC67C((double *)(v7 + 16 * (a3 >> 1)), a2, a3 - (a3 >> 1), v26);
        v27 = &v12[2 * a3];
        v28 = v26;
        while (v28 != v27)
        {
          result = *v28;
          v31 = *v12;
          if (*v28 >= *v12)
          {
            v29 = v12;
            v12 += 2;
            result = v31;
          }
          else
          {
            v29 = v28;
            v28 += 2;
          }
          v30 = *((_DWORD *)v29 + 2);
          *(double *)v7 = result;
          *(_DWORD *)(v7 + 8) = v30;
          v7 += 16;
          if (v12 == v26)
          {
            if (v28 != v27)
            {
              v35 = 0;
              do
              {
                v36 = &v28[v35];
                v37 = v7 + v35 * 8;
                result = v28[v35];
                *(double *)v37 = result;
                *(_DWORD *)(v37 + 8) = LODWORD(v28[v35 + 1]);
                v35 += 2;
              }
              while (v36 + 2 != v27);
            }
            return result;
          }
        }
        if (v12 != v26)
        {
          v32 = 0;
          do
          {
            v33 = &v12[v32];
            v34 = v7 + v32 * 8;
            result = v12[v32];
            *(double *)v34 = result;
            *(_DWORD *)(v34 + 8) = LODWORD(v12[v32 + 1]);
            v32 += 2;
          }
          while (v33 + 2 != v26);
        }
      }
      else
      {
        sub_20F7BC404(a1, v14, v15, a4, a5);
        sub_20F7BC404(v7 + 16 * (a3 >> 1), a2, a3 - (a3 >> 1), v12, a5);
        return sub_20F626330((double *)v7, (double *)(v7 + 16 * (a3 >> 1)), a2, a3 >> 1, a3 - (a3 >> 1), v12, a5, v16);
      }
    }
  }
  return result;
}

double *sub_20F7BC67C(double *result, double *a2, unint64_t a3, double *a4)
{
  double *v4;
  double *v7;
  double *v8;
  __int128 v9;
  double *v10;
  uint64_t v11;
  double *v12;
  double *v13;
  double *v14;
  double v15;
  double *v16;
  uint64_t v17;
  double v18;
  unint64_t v19;
  uint64_t v20;
  double *v21;
  double *v22;
  __int128 v23;
  __int128 v24;
  unint64_t v25;
  unint64_t v26;

  if (a3)
  {
    v4 = a4;
    v7 = result;
    if (a3 == 2)
    {
      v8 = a2 - 2;
      if (*(a2 - 2) >= *result)
      {
        *(_OWORD *)a4 = *(_OWORD *)result;
        v9 = *(_OWORD *)v8;
      }
      else
      {
        *(_OWORD *)a4 = *(_OWORD *)v8;
        v9 = *(_OWORD *)result;
      }
      *((_OWORD *)a4 + 1) = v9;
    }
    else if (a3 == 1)
    {
      *(_OWORD *)a4 = *(_OWORD *)result;
    }
    else if ((uint64_t)a3 > 8)
    {
      v19 = a3 >> 1;
      v20 = 2 * (a3 >> 1);
      v21 = &result[v20];
      sub_20F7BC404(result, &result[v20], a3 >> 1, a4, a3 >> 1);
      result = (double *)sub_20F7BC404(&v7[v20], a2, a3 - v19, &v4[v20], a3 - v19);
      v22 = &v7[v20];
      while (v22 != a2)
      {
        if (*v22 >= *v7)
        {
          v23 = *(_OWORD *)v7;
          v7 += 2;
          *(_OWORD *)v4 = v23;
          v4 += 2;
          if (v7 == v21)
            goto LABEL_28;
        }
        else
        {
          v24 = *(_OWORD *)v22;
          v22 += 2;
          *(_OWORD *)v4 = v24;
          v4 += 2;
          if (v7 == v21)
          {
LABEL_28:
            if (v22 != a2)
            {
              v25 = 0;
              do
              {
                *(_OWORD *)&v4[v25] = *(_OWORD *)&v22[v25];
                v25 += 2;
              }
              while (&v22[v25] != a2);
            }
            return result;
          }
        }
      }
      if (v7 != v21)
      {
        v26 = 0;
        do
        {
          *(_OWORD *)&v4[v26] = *(_OWORD *)&v7[v26];
          v26 += 2;
        }
        while (&v7[v26] != v21);
      }
    }
    else if (result != a2)
    {
      *(_OWORD *)a4 = *(_OWORD *)result;
      v10 = result + 2;
      if (result + 2 != a2)
      {
        v11 = 0;
        v12 = a4;
        v13 = a4;
        do
        {
          while (1)
          {
            v14 = v10;
            v15 = *v13;
            v13 += 2;
            if (*v10 < v15)
              break;
            *(_OWORD *)v13 = *(_OWORD *)v10;
            v10 += 2;
            v11 += 16;
            v12 = v13;
            v7 = v14;
            if (v14 + 2 == a2)
              return result;
          }
          *(_OWORD *)v13 = *(_OWORD *)v12;
          v16 = a4;
          if (v12 != a4)
          {
            v17 = v11;
            while (1)
            {
              v16 = (double *)((char *)a4 + v17);
              v18 = *(double *)((char *)a4 + v17 - 16);
              if (*v14 >= v18)
                break;
              *v16 = v18;
              *((_DWORD *)v16 + 2) = *((_DWORD *)v16 - 2);
              v17 -= 16;
              if (!v17)
              {
                v16 = a4;
                break;
              }
            }
          }
          *v16 = *v14;
          *((_DWORD *)v16 + 2) = *((_DWORD *)v7 + 6);
          v10 = v14 + 2;
          v11 += 16;
          v12 = v13;
          v7 = v14;
        }
        while (v14 + 2 != a2);
      }
    }
  }
  return result;
}

double *sub_20F7BC8C8(uint64_t a1, double *a2, char a3)
{
  unint64_t v6;
  double *v7;
  double v8;
  __n128 v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  float64x2_t v15;
  uint64_t v16;
  uint64_t v17;
  double *v18;
  double v19;
  uint64_t v20;
  double v21;
  uint64_t v22;
  uint64_t v23;
  double *v24;
  double v25;
  uint64_t v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  float64x2_t v34;
  uint64_t v35;
  uint64_t v36;
  double *v37;
  double v38;
  uint64_t v39;
  double v40;
  __n128 v41;
  __n128 v42;
  double v43;
  double v44;
  float64x2_t v45;
  double v46;
  double v47;
  float64x2_t v48;
  uint64_t v49;
  uint64_t v50;
  double *v51;
  double v52;
  uint64_t v53;
  double v54;
  uint64_t v55;
  uint64_t v56;
  double *v57;
  double v58;
  uint64_t v59;
  double v60;
  uint64_t v61;
  double *result;
  uint64_t v63;
  double v64;
  uint64_t v65;
  double v66;
  uint64_t v72;
  double v73;
  double v74;
  double v75;
  _QWORD v76[64];
  double *v77;
  __int128 v78;
  uint64_t v79;

  v77 = (double *)v76;
  v78 = xmmword_210378040;
  v6 = 0xEFBEFBEFBEFBEFBFLL * ((uint64_t)(*(_QWORD *)(a1 + 904) - *(_QWORD *)(a1 + 896)) >> 3);
  if (v6 <= 0xAF8AF8AF8AF8AF8BLL * ((uint64_t)(*(_QWORD *)(a1 + 928) - *(_QWORD *)(a1 + 920)) >> 3))
    v6 = 0xAF8AF8AF8AF8AF8BLL * ((uint64_t)(*(_QWORD *)(a1 + 928) - *(_QWORD *)(a1 + 920)) >> 3);
  if (v6 <= 0x2F028E0D4911E25DLL * ((uint64_t)(*(_QWORD *)(a1 + 952) - *(_QWORD *)(a1 + 944)) >> 4))
    v6 = 0x2F028E0D4911E25DLL * ((uint64_t)(*(_QWORD *)(a1 + 952) - *(_QWORD *)(a1 + 944)) >> 4);
  if (v6 <= 0x4515E08719B71393 * ((uint64_t)(*(_QWORD *)(a1 + 976) - *(_QWORD *)(a1 + 968)) >> 3))
    v6 = 0x4515E08719B71393 * ((uint64_t)(*(_QWORD *)(a1 + 976) - *(_QWORD *)(a1 + 968)) >> 3);
  if (v6 <= 0x84BDA12F684BDA13 * ((uint64_t)(*(_QWORD *)(a1 + 1000) - *(_QWORD *)(a1 + 992)) >> 3))
    v6 = 0x84BDA12F684BDA13 * ((uint64_t)(*(_QWORD *)(a1 + 1000) - *(_QWORD *)(a1 + 992)) >> 3);
  if (v6 <= 0xB195E8EFDB195E8FLL * ((uint64_t)(*(_QWORD *)(a1 + 1024) - *(_QWORD *)(a1 + 1016)) >> 3))
    v6 = 0xB195E8EFDB195E8FLL * ((uint64_t)(*(_QWORD *)(a1 + 1024) - *(_QWORD *)(a1 + 1016)) >> 3);
  if (v6 >= 0x41)
  {
    if (v6 <= 0x80)
      v6 = 128;
    *(_QWORD *)&v78 = v6;
    v7 = (double *)operator new[]();
    if (v77 != (double *)v76 && v77)
      MEMORY[0x212BC6368]();
    v77 = v7;
  }
  v8 = *a2;
  *((_QWORD *)&v78 + 1) = 0;
  if (*(_BYTE *)(a1 + 1876))
  {
    v79 = a1 + 120;
    sub_20F62BFC8((uint64_t)&v79, v76);
  }
  else
  {
    v79 = a1 + 120;
    sub_20F62C1FC((uint64_t)&v79, v76);
  }
  v16 = *((_QWORD *)&v78 + 1);
  if (*((_QWORD *)&v78 + 1))
  {
    v17 = *((_QWORD *)&v78 + 1) >> 1;
    sub_20E8FB210(v77, &v77[*((_QWORD *)&v78 + 1) >> 1], &v77[*((_QWORD *)&v78 + 1)]);
    v18 = v77;
    v19 = v77[v17];
    if ((v16 & 1) == 0)
    {
      v20 = v17 - 1;
      if (v20 != v16)
      {
        sub_20E8FB210(v77, &v77[v20], &v77[v16]);
        v18 = v77;
      }
      v10 = 0.5;
      v19 = (v19 + v18[v20]) * 0.5;
    }
    v9.n128_f64[0] = sqrt(v19);
    v21 = v8 * v9.n128_f64[0];
    *((_QWORD *)&v78 + 1) = 0;
    if (*(_BYTE *)(a1 + 1876))
      goto LABEL_27;
  }
  else
  {
    v21 = 1.0;
    *((_QWORD *)&v78 + 1) = 0;
    if (*(_BYTE *)(a1 + 1876))
    {
LABEL_27:
      v79 = a1 + 120;
      sub_20F62CB00((uint64_t)&v79, v76);
      goto LABEL_30;
    }
  }
  v79 = a1 + 120;
  sub_20F62CCF4((uint64_t)&v79, v76, v9, v10, v11, v12, v13, v14, v15);
LABEL_30:
  v22 = *((_QWORD *)&v78 + 1);
  if (*((_QWORD *)&v78 + 1))
  {
    v23 = *((_QWORD *)&v78 + 1) >> 1;
    sub_20E8FB210(v77, &v77[*((_QWORD *)&v78 + 1) >> 1], &v77[*((_QWORD *)&v78 + 1)]);
    v24 = v77;
    v25 = v77[v23];
    if ((v22 & 1) == 0)
    {
      v26 = v23 - 1;
      if (v26 != v22)
      {
        sub_20E8FB210(v77, &v77[v26], &v77[v22]);
        v24 = v77;
      }
      v25 = (v25 + v24[v26]) * 0.5;
    }
    v27 = v8 * sqrt(v25);
    *((_QWORD *)&v78 + 1) = 0;
    if (*(_BYTE *)(a1 + 1876))
      goto LABEL_36;
  }
  else
  {
    v27 = 1.0;
    *((_QWORD *)&v78 + 1) = 0;
    if (*(_BYTE *)(a1 + 1876))
    {
LABEL_36:
      v79 = a1 + 120;
      sub_20F62D074((uint64_t)&v79, v76);
      goto LABEL_39;
    }
  }
  v79 = a1 + 120;
  sub_20F62D2BC((uint64_t)&v79, v76);
LABEL_39:
  v35 = *((_QWORD *)&v78 + 1);
  if (*((_QWORD *)&v78 + 1))
  {
    v36 = *((_QWORD *)&v78 + 1) >> 1;
    sub_20E8FB210(v77, &v77[*((_QWORD *)&v78 + 1) >> 1], &v77[*((_QWORD *)&v78 + 1)]);
    v37 = v77;
    v38 = v77[v36];
    if ((v35 & 1) == 0)
    {
      v39 = v36 - 1;
      if (v39 != v35)
      {
        sub_20E8FB210(v77, &v77[v39], &v77[v35]);
        v37 = v77;
      }
      v29 = 0.5;
      v38 = (v38 + v37[v39]) * 0.5;
    }
    v28 = sqrt(v38);
    v40 = v8 * v28;
    *((_QWORD *)&v78 + 1) = 0;
    if (*(_BYTE *)(a1 + 1876))
      goto LABEL_45;
  }
  else
  {
    v40 = 1.0;
    *((_QWORD *)&v78 + 1) = 0;
    if (*(_BYTE *)(a1 + 1876))
    {
LABEL_45:
      v79 = a1 + 120;
      sub_20F62D57C((uint64_t)&v79, v76);
      goto LABEL_48;
    }
  }
  v79 = a1 + 120;
  sub_20F62D7C4((uint64_t)&v79, v76, v28, v29, v30, v31, v32, v33, v34);
LABEL_48:
  v49 = *((_QWORD *)&v78 + 1);
  if (*((_QWORD *)&v78 + 1))
  {
    v50 = *((_QWORD *)&v78 + 1) >> 1;
    sub_20E8FB210(v77, &v77[*((_QWORD *)&v78 + 1) >> 1], &v77[*((_QWORD *)&v78 + 1)]);
    v51 = v77;
    v52 = v77[v50];
    if ((v49 & 1) == 0)
    {
      v53 = v50 - 1;
      if (v53 != v49)
      {
        sub_20E8FB210(v77, &v77[v53], &v77[v49]);
        v51 = v77;
      }
      v42.n128_u64[0] = 0.5;
      v52 = (v52 + v51[v53]) * 0.5;
    }
    v41.n128_f64[0] = sqrt(v52);
    v54 = v8 * v41.n128_f64[0];
    *((_QWORD *)&v78 + 1) = 0;
    if (*(_BYTE *)(a1 + 1876))
      goto LABEL_54;
  }
  else
  {
    v54 = 1.0;
    *((_QWORD *)&v78 + 1) = 0;
    if (*(_BYTE *)(a1 + 1876))
    {
LABEL_54:
      v79 = a1 + 120;
      sub_20F62DC70((uint64_t)&v79, v76);
      goto LABEL_57;
    }
  }
  v79 = a1 + 120;
  sub_20F721894((uint64_t)&v79, v76, v41, v42, v43, v44, v45, v46, v47, v48);
LABEL_57:
  v55 = *((_QWORD *)&v78 + 1);
  if (*((_QWORD *)&v78 + 1))
  {
    v56 = *((_QWORD *)&v78 + 1) >> 1;
    sub_20E8FB210(v77, &v77[*((_QWORD *)&v78 + 1) >> 1], &v77[*((_QWORD *)&v78 + 1)]);
    v57 = v77;
    v58 = v77[v56];
    if ((v55 & 1) == 0)
    {
      v59 = v56 - 1;
      if (v59 != v55)
      {
        sub_20E8FB210(v77, &v77[v59], &v77[v55]);
        v57 = v77;
      }
      v58 = (v58 + v57[v59]) * 0.5;
    }
    v60 = v8 * sqrt(v58);
    *((_QWORD *)&v78 + 1) = 0;
    if (*(_BYTE *)(a1 + 1876))
      goto LABEL_63;
  }
  else
  {
    v60 = 1.0;
    *((_QWORD *)&v78 + 1) = 0;
    if (*(_BYTE *)(a1 + 1876))
    {
LABEL_63:
      v79 = a1 + 120;
      sub_20F62E070((uint64_t)&v79, v76);
      goto LABEL_66;
    }
  }
  v79 = a1 + 120;
  sub_20F62E274((uint64_t)&v79, v76);
LABEL_66:
  v61 = *((_QWORD *)&v78 + 1);
  result = v77;
  if (!*((_QWORD *)&v78 + 1))
  {
    v66 = 1.0;
    *((_QWORD *)&v78 + 1) = 0;
    if (v77 == (double *)v76)
      goto LABEL_76;
    goto LABEL_74;
  }
  v63 = *((_QWORD *)&v78 + 1) >> 1;
  sub_20E8FB210(v77, &v77[*((_QWORD *)&v78 + 1) >> 1], &v77[*((_QWORD *)&v78 + 1)]);
  result = v77;
  v64 = v77[v63];
  if ((v61 & 1) == 0)
  {
    v65 = v63 - 1;
    if (v65 != v61)
    {
      sub_20E8FB210(v77, &v77[v65], &v77[v61]);
      result = v77;
    }
    v64 = (v64 + result[v65]) * 0.5;
  }
  v66 = v8 * sqrt(v64);
  *((_QWORD *)&v78 + 1) = 0;
  if (result != (double *)v76)
  {
LABEL_74:
    if (result)
      result = (double *)MEMORY[0x212BC6368](result, 0x1000C8000313F17);
  }
LABEL_76:
  if ((a3 & 1) == 0)
  {
    v72 = 0x3DDB7CDFD9D7BDBBLL;
    v73 = 1.0e20;
    if (v21 > 0.0)
    {
      v72 = *(_QWORD *)&v21;
      v73 = 1.0 / (v21 * v21);
    }
    *(_QWORD *)(a1 + 8) = v72;
    *(double *)(a1 + 16) = v73;
    *(_BYTE *)(a1 + 1877) = 0;
    *(_DWORD *)(a1 + 1872) = 0;
    if (v27 > 0.0)
    {
      *(double *)(a1 + 24) = v27;
      *(double *)(a1 + 32) = 1.0 / (v27 * v27);
      if (v40 <= 0.0)
      {
LABEL_83:
        *(_QWORD *)(a1 + 40) = 0x3DDB7CDFD9D7BDBBLL;
        *(_QWORD *)(a1 + 48) = 0x4415AF1D78B58C3FLL;
        if (v54 <= 0.0)
          goto LABEL_84;
        goto LABEL_89;
      }
    }
    else
    {
      *(_QWORD *)(a1 + 24) = 0x3DDB7CDFD9D7BDBBLL;
      *(_QWORD *)(a1 + 32) = 0x4415AF1D78B58C3FLL;
      if (v40 <= 0.0)
        goto LABEL_83;
    }
    *(double *)(a1 + 40) = v40;
    *(double *)(a1 + 48) = 1.0 / (v40 * v40);
    if (v54 <= 0.0)
    {
LABEL_84:
      *(_QWORD *)(a1 + 56) = 0x3DDB7CDFD9D7BDBBLL;
      *(_QWORD *)(a1 + 64) = 0x4415AF1D78B58C3FLL;
      if (v60 <= 0.0)
        goto LABEL_90;
      goto LABEL_85;
    }
LABEL_89:
    *(double *)(a1 + 56) = v54;
    *(double *)(a1 + 64) = 1.0 / (v54 * v54);
    if (v60 <= 0.0)
      goto LABEL_90;
    goto LABEL_85;
  }
  __asm { FMOV            V0.2D, #1.0 }
  *(_OWORD *)(a1 + 8) = _Q0;
  *(_DWORD *)(a1 + 1872) = 0;
  *(_OWORD *)(a1 + 24) = _Q0;
  *(_BYTE *)(a1 + 1877) = 0;
  *(_OWORD *)(a1 + 40) = _Q0;
  *(double *)(a1 + 56) = 1.0;
  *(double *)(a1 + 64) = 1.0;
  if (v60 <= 0.0)
  {
LABEL_90:
    *(_QWORD *)(a1 + 72) = 0x3DDB7CDFD9D7BDBBLL;
    *(_QWORD *)(a1 + 80) = 0x4415AF1D78B58C3FLL;
    v74 = 1.0;
    v75 = 1.0;
    if ((a3 & 1) != 0)
      goto LABEL_94;
    goto LABEL_91;
  }
LABEL_85:
  *(double *)(a1 + 72) = v60;
  *(double *)(a1 + 80) = 1.0 / (v60 * v60);
  v74 = 1.0;
  v75 = 1.0;
  if ((a3 & 1) != 0)
    goto LABEL_94;
LABEL_91:
  if (v66 <= 0.0)
  {
    v75 = 1.0e20;
    v74 = 1.0e-10;
  }
  else
  {
    v74 = v66;
    v75 = 1.0 / (v66 * v66);
  }
LABEL_94:
  *(double *)(a1 + 104) = v74;
  *(double *)(a1 + 112) = v75;
  *(_BYTE *)(a1 + 1877) = 0;
  *(_DWORD *)(a1 + 1872) = 0;
  return result;
}

void sub_20F7BD028(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  unint64_t v10;

  STACK[0x210] = 0;
  v10 = STACK[0x200];
  if ((uint64_t *)STACK[0x200] != &a9)
  {
    if (v10)
      MEMORY[0x212BC6368](v10, 0x1000C8000313F17);
  }
  _Unwind_Resume(a1);
}

double *sub_20F7BD064(uint64_t a1, double **a2, char a3)
{
  unint64_t v6;
  double *v7;
  __n128 v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  float64x2_t v14;
  uint64_t v15;
  uint64_t v16;
  double *v17;
  double v18;
  uint64_t v19;
  double v20;
  uint64_t v21;
  uint64_t v22;
  double *v23;
  double v24;
  uint64_t v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  float64x2_t v33;
  uint64_t v34;
  uint64_t v35;
  double *v36;
  double v37;
  uint64_t v38;
  double v39;
  __n128 v40;
  __n128 v41;
  double v42;
  double v43;
  float64x2_t v44;
  double v45;
  double v46;
  float64x2_t v47;
  uint64_t v48;
  uint64_t v49;
  double *v50;
  double v51;
  uint64_t v52;
  double v53;
  uint64_t v54;
  uint64_t v55;
  double *v56;
  double v57;
  uint64_t v58;
  double v59;
  uint64_t v60;
  double *result;
  uint64_t v62;
  double v63;
  uint64_t v64;
  double v65;
  uint64_t v71;
  double v72;
  double v73;
  double v74;
  _QWORD v75[64];
  double *v76;
  __int128 v77;
  uint64_t v78;

  v76 = (double *)v75;
  v77 = xmmword_210378040;
  v6 = 0xEFBEFBEFBEFBEFBFLL * ((uint64_t)(*(_QWORD *)(a1 + 904) - *(_QWORD *)(a1 + 896)) >> 3);
  if (v6 <= 0xAF8AF8AF8AF8AF8BLL * ((uint64_t)(*(_QWORD *)(a1 + 928) - *(_QWORD *)(a1 + 920)) >> 3))
    v6 = 0xAF8AF8AF8AF8AF8BLL * ((uint64_t)(*(_QWORD *)(a1 + 928) - *(_QWORD *)(a1 + 920)) >> 3);
  if (v6 <= 0x2F028E0D4911E25DLL * ((uint64_t)(*(_QWORD *)(a1 + 952) - *(_QWORD *)(a1 + 944)) >> 4))
    v6 = 0x2F028E0D4911E25DLL * ((uint64_t)(*(_QWORD *)(a1 + 952) - *(_QWORD *)(a1 + 944)) >> 4);
  if (v6 <= 0x4515E08719B71393 * ((uint64_t)(*(_QWORD *)(a1 + 976) - *(_QWORD *)(a1 + 968)) >> 3))
    v6 = 0x4515E08719B71393 * ((uint64_t)(*(_QWORD *)(a1 + 976) - *(_QWORD *)(a1 + 968)) >> 3);
  if (v6 <= 0x84BDA12F684BDA13 * ((uint64_t)(*(_QWORD *)(a1 + 1000) - *(_QWORD *)(a1 + 992)) >> 3))
    v6 = 0x84BDA12F684BDA13 * ((uint64_t)(*(_QWORD *)(a1 + 1000) - *(_QWORD *)(a1 + 992)) >> 3);
  if (v6 <= 0xB195E8EFDB195E8FLL * ((uint64_t)(*(_QWORD *)(a1 + 1024) - *(_QWORD *)(a1 + 1016)) >> 3))
    v6 = 0xB195E8EFDB195E8FLL * ((uint64_t)(*(_QWORD *)(a1 + 1024) - *(_QWORD *)(a1 + 1016)) >> 3);
  if (v6 >= 0x41)
  {
    if (v6 <= 0x80)
      v6 = 128;
    *(_QWORD *)&v77 = v6;
    v7 = (double *)operator new[]();
    if (v76 != (double *)v75 && v76)
      MEMORY[0x212BC6368]();
    v76 = v7;
  }
  *((_QWORD *)&v77 + 1) = 0;
  if (*(_BYTE *)(a1 + 1876))
  {
    v78 = a1 + 120;
    sub_20F62BFC8((uint64_t)&v78, v75);
  }
  else
  {
    v78 = a1 + 120;
    sub_20F62C1FC((uint64_t)&v78, v75);
  }
  v15 = *((_QWORD *)&v77 + 1);
  if (*((_QWORD *)&v77 + 1))
  {
    v16 = *((_QWORD *)&v77 + 1) >> 1;
    sub_20E8FB210(v76, &v76[*((_QWORD *)&v77 + 1) >> 1], &v76[*((_QWORD *)&v77 + 1)]);
    v17 = v76;
    v18 = v76[v16];
    if ((v15 & 1) == 0)
    {
      v19 = v16 - 1;
      if (v19 != v15)
      {
        sub_20E8FB210(v76, &v76[v19], &v76[v15]);
        v17 = v76;
      }
      v18 = (v18 + v17[v19]) * 0.5;
    }
    v8.n128_f64[0] = sqrt(v18);
    v9 = **a2;
    v20 = v8.n128_f64[0] * v9;
    *((_QWORD *)&v77 + 1) = 0;
    if (*(_BYTE *)(a1 + 1876))
      goto LABEL_27;
  }
  else
  {
    v20 = 1.0;
    *((_QWORD *)&v77 + 1) = 0;
    if (*(_BYTE *)(a1 + 1876))
    {
LABEL_27:
      v78 = a1 + 120;
      sub_20F62CB00((uint64_t)&v78, v75);
      goto LABEL_30;
    }
  }
  v78 = a1 + 120;
  sub_20F62CCF4((uint64_t)&v78, v75, v8, v9, v10, v11, v12, v13, v14);
LABEL_30:
  v21 = *((_QWORD *)&v77 + 1);
  if (*((_QWORD *)&v77 + 1))
  {
    v22 = *((_QWORD *)&v77 + 1) >> 1;
    sub_20E8FB210(v76, &v76[*((_QWORD *)&v77 + 1) >> 1], &v76[*((_QWORD *)&v77 + 1)]);
    v23 = v76;
    v24 = v76[v22];
    if ((v21 & 1) == 0)
    {
      v25 = v22 - 1;
      if (v25 != v21)
      {
        sub_20E8FB210(v76, &v76[v25], &v76[v21]);
        v23 = v76;
      }
      v24 = (v24 + v23[v25]) * 0.5;
    }
    v26 = sqrt(v24) * (*a2)[1];
    *((_QWORD *)&v77 + 1) = 0;
    if (*(_BYTE *)(a1 + 1876))
      goto LABEL_36;
  }
  else
  {
    v26 = 1.0;
    *((_QWORD *)&v77 + 1) = 0;
    if (*(_BYTE *)(a1 + 1876))
    {
LABEL_36:
      v78 = a1 + 120;
      sub_20F62D074((uint64_t)&v78, v75);
      goto LABEL_39;
    }
  }
  v78 = a1 + 120;
  sub_20F62D2BC((uint64_t)&v78, v75);
LABEL_39:
  v34 = *((_QWORD *)&v77 + 1);
  if (*((_QWORD *)&v77 + 1))
  {
    v35 = *((_QWORD *)&v77 + 1) >> 1;
    sub_20E8FB210(v76, &v76[*((_QWORD *)&v77 + 1) >> 1], &v76[*((_QWORD *)&v77 + 1)]);
    v36 = v76;
    v37 = v76[v35];
    if ((v34 & 1) == 0)
    {
      v38 = v35 - 1;
      if (v38 != v34)
      {
        sub_20E8FB210(v76, &v76[v38], &v76[v34]);
        v36 = v76;
      }
      v37 = (v37 + v36[v38]) * 0.5;
    }
    v27 = sqrt(v37);
    v28 = (*a2)[2];
    v39 = v27 * v28;
    *((_QWORD *)&v77 + 1) = 0;
    if (*(_BYTE *)(a1 + 1876))
      goto LABEL_45;
  }
  else
  {
    v39 = 1.0;
    *((_QWORD *)&v77 + 1) = 0;
    if (*(_BYTE *)(a1 + 1876))
    {
LABEL_45:
      v78 = a1 + 120;
      sub_20F62D57C((uint64_t)&v78, v75);
      goto LABEL_48;
    }
  }
  v78 = a1 + 120;
  sub_20F62D7C4((uint64_t)&v78, v75, v27, v28, v29, v30, v31, v32, v33);
LABEL_48:
  v48 = *((_QWORD *)&v77 + 1);
  if (*((_QWORD *)&v77 + 1))
  {
    v49 = *((_QWORD *)&v77 + 1) >> 1;
    sub_20E8FB210(v76, &v76[*((_QWORD *)&v77 + 1) >> 1], &v76[*((_QWORD *)&v77 + 1)]);
    v50 = v76;
    v51 = v76[v49];
    if ((v48 & 1) == 0)
    {
      v52 = v49 - 1;
      if (v52 != v48)
      {
        sub_20E8FB210(v76, &v76[v52], &v76[v48]);
        v50 = v76;
      }
      v51 = (v51 + v50[v52]) * 0.5;
    }
    v40.n128_f64[0] = sqrt(v51);
    v41.n128_f64[0] = (*a2)[3];
    v53 = v40.n128_f64[0] * v41.n128_f64[0];
    *((_QWORD *)&v77 + 1) = 0;
    if (*(_BYTE *)(a1 + 1876))
      goto LABEL_54;
  }
  else
  {
    v53 = 1.0;
    *((_QWORD *)&v77 + 1) = 0;
    if (*(_BYTE *)(a1 + 1876))
    {
LABEL_54:
      v78 = a1 + 120;
      sub_20F62DC70((uint64_t)&v78, v75);
      goto LABEL_57;
    }
  }
  v78 = a1 + 120;
  sub_20F721894((uint64_t)&v78, v75, v40, v41, v42, v43, v44, v45, v46, v47);
LABEL_57:
  v54 = *((_QWORD *)&v77 + 1);
  if (*((_QWORD *)&v77 + 1))
  {
    v55 = *((_QWORD *)&v77 + 1) >> 1;
    sub_20E8FB210(v76, &v76[*((_QWORD *)&v77 + 1) >> 1], &v76[*((_QWORD *)&v77 + 1)]);
    v56 = v76;
    v57 = v76[v55];
    if ((v54 & 1) == 0)
    {
      v58 = v55 - 1;
      if (v58 != v54)
      {
        sub_20E8FB210(v76, &v76[v58], &v76[v54]);
        v56 = v76;
      }
      v57 = (v57 + v56[v58]) * 0.5;
    }
    v59 = sqrt(v57) * (*a2)[4];
    *((_QWORD *)&v77 + 1) = 0;
    if (*(_BYTE *)(a1 + 1876))
      goto LABEL_63;
  }
  else
  {
    v59 = 1.0;
    *((_QWORD *)&v77 + 1) = 0;
    if (*(_BYTE *)(a1 + 1876))
    {
LABEL_63:
      v78 = a1 + 120;
      sub_20F62E070((uint64_t)&v78, v75);
      goto LABEL_66;
    }
  }
  v78 = a1 + 120;
  sub_20F62E274((uint64_t)&v78, v75);
LABEL_66:
  v60 = *((_QWORD *)&v77 + 1);
  result = v76;
  if (!*((_QWORD *)&v77 + 1))
  {
    v65 = 1.0;
    *((_QWORD *)&v77 + 1) = 0;
    if (v76 == (double *)v75)
      goto LABEL_76;
    goto LABEL_74;
  }
  v62 = *((_QWORD *)&v77 + 1) >> 1;
  sub_20E8FB210(v76, &v76[*((_QWORD *)&v77 + 1) >> 1], &v76[*((_QWORD *)&v77 + 1)]);
  result = v76;
  v63 = v76[v62];
  if ((v60 & 1) == 0)
  {
    v64 = v62 - 1;
    if (v64 != v60)
    {
      sub_20E8FB210(v76, &v76[v64], &v76[v60]);
      result = v76;
    }
    v63 = (v63 + result[v64]) * 0.5;
  }
  v65 = sqrt(v63) * (*a2)[5];
  *((_QWORD *)&v77 + 1) = 0;
  if (result != (double *)v75)
  {
LABEL_74:
    if (result)
      result = (double *)MEMORY[0x212BC6368](result, 0x1000C8000313F17);
  }
LABEL_76:
  if ((a3 & 1) == 0)
  {
    v71 = 0x3DDB7CDFD9D7BDBBLL;
    v72 = 1.0e20;
    if (v20 > 0.0)
    {
      v71 = *(_QWORD *)&v20;
      v72 = 1.0 / (v20 * v20);
    }
    *(_QWORD *)(a1 + 8) = v71;
    *(double *)(a1 + 16) = v72;
    *(_BYTE *)(a1 + 1877) = 0;
    *(_DWORD *)(a1 + 1872) = 0;
    if (v26 > 0.0)
    {
      *(double *)(a1 + 24) = v26;
      *(double *)(a1 + 32) = 1.0 / (v26 * v26);
      if (v39 <= 0.0)
      {
LABEL_83:
        *(_QWORD *)(a1 + 40) = 0x3DDB7CDFD9D7BDBBLL;
        *(_QWORD *)(a1 + 48) = 0x4415AF1D78B58C3FLL;
        if (v53 <= 0.0)
          goto LABEL_84;
        goto LABEL_89;
      }
    }
    else
    {
      *(_QWORD *)(a1 + 24) = 0x3DDB7CDFD9D7BDBBLL;
      *(_QWORD *)(a1 + 32) = 0x4415AF1D78B58C3FLL;
      if (v39 <= 0.0)
        goto LABEL_83;
    }
    *(double *)(a1 + 40) = v39;
    *(double *)(a1 + 48) = 1.0 / (v39 * v39);
    if (v53 <= 0.0)
    {
LABEL_84:
      *(_QWORD *)(a1 + 56) = 0x3DDB7CDFD9D7BDBBLL;
      *(_QWORD *)(a1 + 64) = 0x4415AF1D78B58C3FLL;
      if (v59 <= 0.0)
        goto LABEL_90;
      goto LABEL_85;
    }
LABEL_89:
    *(double *)(a1 + 56) = v53;
    *(double *)(a1 + 64) = 1.0 / (v53 * v53);
    if (v59 <= 0.0)
      goto LABEL_90;
    goto LABEL_85;
  }
  __asm { FMOV            V0.2D, #1.0 }
  *(_OWORD *)(a1 + 8) = _Q0;
  *(_DWORD *)(a1 + 1872) = 0;
  *(_OWORD *)(a1 + 24) = _Q0;
  *(_BYTE *)(a1 + 1877) = 0;
  *(_OWORD *)(a1 + 40) = _Q0;
  *(double *)(a1 + 56) = 1.0;
  *(double *)(a1 + 64) = 1.0;
  if (v59 <= 0.0)
  {
LABEL_90:
    *(_QWORD *)(a1 + 72) = 0x3DDB7CDFD9D7BDBBLL;
    *(_QWORD *)(a1 + 80) = 0x4415AF1D78B58C3FLL;
    v73 = 1.0;
    v74 = 1.0;
    if ((a3 & 1) != 0)
      goto LABEL_94;
    goto LABEL_91;
  }
LABEL_85:
  *(double *)(a1 + 72) = v59;
  *(double *)(a1 + 80) = 1.0 / (v59 * v59);
  v73 = 1.0;
  v74 = 1.0;
  if ((a3 & 1) != 0)
    goto LABEL_94;
LABEL_91:
  if (v65 <= 0.0)
  {
    v74 = 1.0e20;
    v73 = 1.0e-10;
  }
  else
  {
    v73 = v65;
    v74 = 1.0 / (v65 * v65);
  }
LABEL_94:
  *(double *)(a1 + 104) = v73;
  *(double *)(a1 + 112) = v74;
  *(_BYTE *)(a1 + 1877) = 0;
  *(_DWORD *)(a1 + 1872) = 0;
  return result;
}

void sub_20F7BD7F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  unint64_t v10;

  STACK[0x210] = 0;
  v10 = STACK[0x200];
  if ((uint64_t *)STACK[0x200] != &a9)
  {
    if (v10)
      MEMORY[0x212BC6368](v10, 0x1000C8000313F17);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_20F7BD82C(uint64_t result)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  _OWORD *v18;
  __int128 *v19;
  unint64_t v20;
  __int128 v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  _OWORD *v40;
  __int128 *v41;
  unint64_t v42;
  __int128 v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t *v46;
  _QWORD *v47;
  uint64_t v48;
  uint64_t v50;
  unint64_t v51;
  _QWORD *v52;
  _QWORD *v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  _OWORD *v62;
  __int128 *v63;
  unint64_t v64;
  __int128 v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t *v68;
  _QWORD *v69;
  uint64_t v70;
  uint64_t v72;
  unint64_t v73;
  _QWORD *v74;
  _QWORD *v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  unint64_t v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  _OWORD *v84;
  __int128 *v85;
  unint64_t v86;
  __int128 v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t *v90;
  _QWORD *v91;
  uint64_t v92;
  uint64_t v94;
  unint64_t v95;
  unint64_t v96;
  unint64_t v97;
  unint64_t v98;
  unint64_t v99;
  uint64_t v100;
  uint64_t v101;
  unint64_t v102;
  _OWORD *v103;
  __int128 *v104;
  unint64_t v105;
  __int128 v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t *v109;
  _QWORD *v110;
  uint64_t v111;
  int v113;
  uint64_t v114;
  unint64_t v115;
  uint64_t v116;
  uint64_t v117;
  unint64_t v118;
  uint64_t v119;
  unint64_t v120;
  unint64_t v121;
  unint64_t v122;
  uint64_t v123;
  uint64_t v124;
  unint64_t v125;
  _OWORD *v126;
  __int128 *v127;
  unint64_t v128;
  __int128 v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t *v132;
  _QWORD *v133;
  uint64_t v134;
  int64x2_t *v136;
  uint64_t v137;
  _QWORD *v138;
  uint64_t v139;
  uint64_t v140;
  unsigned int v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  unint64_t v152;
  int64x2_t *v153;
  uint64_t v154;
  unint64_t v155;
  unint64_t v156;
  unint64_t v157;
  unint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  unint64_t v162;
  _OWORD *v163;
  __int128 *v164;
  unint64_t v165;
  __int128 v166;
  unint64_t v167;
  uint64_t v168;
  uint64_t *v169;
  _QWORD *v170;
  uint64_t v171;
  unint64_t v173;
  uint64_t v174;
  uint64_t v175;
  unsigned int v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  unint64_t v187;
  uint64_t v188;
  unint64_t v189;
  unint64_t v190;
  unint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  unint64_t v195;
  _OWORD *v196;
  __int128 *v197;
  unint64_t v198;
  __int128 v199;
  unint64_t v200;
  uint64_t v201;
  uint64_t *v202;
  _QWORD *v203;
  uint64_t v204;
  unint64_t v206;
  uint64_t v207;
  uint64_t v208;
  unsigned int v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  unint64_t v220;
  uint64_t v221;
  unint64_t v222;
  unint64_t v223;
  unint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  unint64_t v228;
  _OWORD *v229;
  __int128 *v230;
  unint64_t v231;
  __int128 v232;
  unint64_t v233;
  uint64_t v234;
  uint64_t *v235;
  _QWORD *v236;
  uint64_t v237;
  unint64_t v239;
  uint64_t v240;
  uint64_t v241;
  unsigned int v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  unint64_t v253;
  uint64_t v254;
  unint64_t v255;
  unint64_t v256;
  unint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  unint64_t v261;
  _OWORD *v262;
  __int128 *v263;
  unint64_t v264;
  __int128 v265;
  unint64_t v266;
  uint64_t v267;
  uint64_t *v268;
  _QWORD *v269;
  uint64_t v270;
  unint64_t v272;
  uint64_t v273;
  uint64_t v274;
  unsigned int v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  unint64_t v286;
  uint64_t v287;
  unint64_t v288;
  unint64_t v289;
  unint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  unint64_t v294;
  _OWORD *v295;
  __int128 *v296;
  unint64_t v297;
  __int128 v298;
  unint64_t v299;
  uint64_t v300;
  uint64_t *v301;
  _QWORD *v302;
  uint64_t v303;
  unint64_t v305;
  uint64_t v306;
  uint64_t v307;
  unsigned int v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t v318;
  unint64_t v319;
  uint64_t v320;
  unint64_t v321;
  unint64_t v322;
  unint64_t v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t v326;
  unint64_t v327;
  _OWORD *v328;
  __int128 *v329;
  unint64_t v330;
  __int128 v331;
  unint64_t v332;
  uint64_t v333;
  uint64_t *v334;
  _QWORD *v335;
  uint64_t v336;
  unint64_t v338;
  uint64_t v339;
  uint64_t v340;
  unsigned int v341;
  uint64_t v342;
  uint64_t v343;
  uint64_t v344;
  uint64_t v345;
  uint64_t v346;
  uint64_t v347;
  uint64_t v348;
  uint64_t v349;
  uint64_t v350;
  uint64_t v351;
  unint64_t v352;
  uint64_t v353;
  unint64_t v354;
  unint64_t v355;
  unint64_t v356;
  uint64_t v357;
  uint64_t v358;
  uint64_t v359;
  unint64_t v360;
  _OWORD *v361;
  __int128 *v362;
  unint64_t v363;
  __int128 v364;
  unint64_t v365;
  uint64_t v366;
  uint64_t *v367;
  _QWORD *v368;
  uint64_t v369;
  unint64_t v371;
  uint64_t v372;
  uint64_t v373;
  unsigned int v374;
  uint64_t v375;
  uint64_t v376;
  uint64_t v377;
  uint64_t v378;
  uint64_t v379;
  uint64_t v380;
  uint64_t v381;
  uint64_t v382;
  uint64_t v383;
  uint64_t v384;
  unint64_t v385;
  unint64_t v386;
  unint64_t v387;
  unint64_t v388;
  uint64_t v389;
  uint64_t v390;
  uint64_t v391;
  unint64_t v392;
  _OWORD *v393;
  __int128 *v394;
  unint64_t v395;
  __int128 v396;
  unint64_t v397;
  uint64_t v398;
  uint64_t *v399;
  _QWORD *v400;
  uint64_t v401;
  unsigned int v403;
  unsigned int v404;
  unsigned int v405;
  unsigned int v406;
  unsigned int v407;
  unsigned int v408;
  unsigned int v409;
  unsigned int v410;
  unint64_t v411;
  uint64_t v412;

  v1 = (_QWORD *)result;
  v412 = *MEMORY[0x24BDAC8D0];
  v3 = *(_QWORD *)result;
  v2 = *(_QWORD **)(result + 8);
  v4 = *(unsigned __int8 *)(*(_QWORD *)result + 1096);
  if (*(_BYTE *)(*(_QWORD *)result + 1096) || (result = sub_20F5BB998((_QWORD *)(v3 + 120)), !(_DWORD)result))
  {
    v7 = 0xEFBEFBEFBEFBEFBFLL * ((uint64_t)(*(_QWORD *)(v3 + 904) - *(_QWORD *)(v3 + 896)) >> 3);
  }
  else
  {
    v5 = *(_QWORD *)(v3 + 896);
    v6 = *(_QWORD *)(v3 + 904);
    if (v5 == v6)
    {
      v7 = 0;
    }
    else
    {
      v7 = 0;
      v8 = 0;
      do
      {
        if ((*(_BYTE *)(*(_QWORD *)(v5 + 208) + 4) & 6) == 0 && (*(_BYTE *)(*(_QWORD *)(v5 + 216) + 4) & 6) == 0)
          v7 = ++v8;
        v5 += 504;
      }
      while (v5 != v6);
    }
  }
  v9 = v2 + 145;
  v2[144] += v7;
  v10 = v2[211];
  v11 = v10 + 1;
  v12 = v2[210];
  if (v10 + 1 <= v12)
  {
    v16 = v2[209];
    *(_QWORD *)(v16 + 8 * v10) = v7;
    v28 = v2[211];
    v29 = v28 + 1;
    v2[211] = v28 + 1;
    if (v4)
    {
LABEL_37:
      v32 = 0xAF8AF8AF8AF8AF8BLL * ((uint64_t)(*(_QWORD *)(v3 + 928) - *(_QWORD *)(v3 + 920)) >> 3);
      goto LABEL_38;
    }
  }
  else
  {
    v13 = 2 * v12;
    if (v13 > v11)
      v11 = v13;
    v2[210] = v11;
    v14 = v2[209];
    v15 = operator new[]();
    v16 = v15;
    if (v10)
    {
      v17 = 0;
      if (v10 < 4)
        goto LABEL_20;
      if ((unint64_t)(v15 - v14) < 0x20)
        goto LABEL_20;
      v17 = v10 & 0xFFFFFFFFFFFFFFFCLL;
      v18 = (_OWORD *)(v15 + 16);
      v19 = (__int128 *)(v14 + 16);
      v20 = v10 & 0xFFFFFFFFFFFFFFFCLL;
      do
      {
        v21 = *v19;
        *(v18 - 1) = *(v19 - 1);
        *v18 = v21;
        v18 += 2;
        v19 += 2;
        v20 -= 4;
      }
      while (v20);
      if (v10 != v17)
      {
LABEL_20:
        v22 = v10 - v17;
        v23 = 8 * v17;
        v24 = (uint64_t *)(v14 + 8 * v17);
        v25 = (_QWORD *)(v15 + v23);
        do
        {
          v26 = *v24++;
          *v25++ = v26;
          --v22;
        }
        while (v22);
      }
    }
    result = v2[209];
    if ((_QWORD *)result != v9 && result != 0)
      result = MEMORY[0x212BC6368]();
    v2[209] = v16;
    v4 = *(unsigned __int8 *)(v3 + 1096);
    *(_QWORD *)(v16 + 8 * v2[211]) = v7;
    v28 = v2[211];
    v29 = v28 + 1;
    v2[211] = v28 + 1;
    if (v4)
      goto LABEL_37;
  }
  result = sub_20F5BB998((_QWORD *)(v3 + 120));
  if (!(_DWORD)result)
    goto LABEL_37;
  v30 = *(_QWORD *)(v3 + 920);
  v31 = *(_QWORD *)(v3 + 928);
  if (v30 == v31)
  {
    v32 = 0;
  }
  else
  {
    v32 = 0;
    v33 = 0;
    do
    {
      if ((*(_BYTE *)(*(_QWORD *)(v30 + 136) + 4) & 6) == 0)
        v32 = ++v33;
      v30 += 280;
    }
    while (v30 != v31);
  }
LABEL_38:
  v2[144] += v32;
  v34 = v28 + 2;
  v35 = v2[210];
  if (v28 + 2 <= v35)
  {
    v38 = v16;
    *(_QWORD *)(v16 + 8 * v29) = v32;
    v50 = v2[211];
    v51 = v50 + 1;
    v2[211] = v50 + 1;
    if (v4)
    {
LABEL_68:
      v54 = 0x2F028E0D4911E25DLL * ((uint64_t)(*(_QWORD *)(v3 + 952) - *(_QWORD *)(v3 + 944)) >> 4);
      goto LABEL_69;
    }
  }
  else
  {
    v36 = 2 * v35;
    if (v36 > v34)
      v34 = v36;
    v2[210] = v34;
    v37 = operator new[]();
    v38 = v37;
    if (v29)
    {
      v39 = 0;
      if (v29 < 4)
        goto LABEL_47;
      if ((unint64_t)(v37 - v16) < 0x20)
        goto LABEL_47;
      v39 = v29 & 0xFFFFFFFFFFFFFFFCLL;
      v40 = (_OWORD *)(v37 + 16);
      v41 = (__int128 *)(v16 + 16);
      v42 = v29 & 0xFFFFFFFFFFFFFFFCLL;
      do
      {
        v43 = *v41;
        *(v40 - 1) = *(v41 - 1);
        *v40 = v43;
        v40 += 2;
        v41 += 2;
        v42 -= 4;
      }
      while (v42);
      if (v29 != v39)
      {
LABEL_47:
        v44 = v28 - v39 + 1;
        v45 = 8 * v39;
        v46 = (uint64_t *)(v16 + 8 * v39);
        v47 = (_QWORD *)(v37 + v45);
        do
        {
          v48 = *v46++;
          *v47++ = v48;
          --v44;
        }
        while (v44);
      }
    }
    result = v2[209];
    if ((_QWORD *)result != v9 && result != 0)
      result = MEMORY[0x212BC6368]();
    v2[209] = v38;
    v4 = *(unsigned __int8 *)(v3 + 1096);
    *(_QWORD *)(v38 + 8 * v2[211]) = v32;
    v50 = v2[211];
    v51 = v50 + 1;
    v2[211] = v50 + 1;
    if (v4)
      goto LABEL_68;
  }
  result = sub_20F5BB998((_QWORD *)(v3 + 120));
  if (!(_DWORD)result)
    goto LABEL_68;
  v52 = *(_QWORD **)(v3 + 944);
  v53 = *(_QWORD **)(v3 + 952);
  if (v52 == v53)
  {
    v54 = 0;
  }
  else
  {
    v54 = 0;
    v55 = 0;
    do
    {
      if ((*(_BYTE *)(v52[962] + 4) & 6) == 0
        && (*(_BYTE *)(v52[963] + 4) & 6) == 0
        && (*(_BYTE *)(v52[964] + 4) & 6) == 0
        && (*(_BYTE *)(v52[965] + 4) & 6) == 0
        && (*(_BYTE *)(v52[966] + 4) & 6) == 0)
      {
        v54 = ++v55;
      }
      v52 += 1002;
    }
    while (v52 != v53);
  }
LABEL_69:
  v2[144] += v54;
  v56 = v50 + 2;
  v57 = v2[210];
  if (v50 + 2 <= v57)
  {
    v60 = v38;
    *(_QWORD *)(v38 + 8 * v51) = v54;
    v72 = v2[211];
    v73 = v72 + 1;
    v2[211] = v72 + 1;
    if (v4)
    {
LABEL_98:
      v76 = 0x4515E08719B71393 * ((uint64_t)(*(_QWORD *)(v3 + 976) - *(_QWORD *)(v3 + 968)) >> 3);
      goto LABEL_99;
    }
  }
  else
  {
    v58 = 2 * v57;
    if (v58 > v56)
      v56 = v58;
    v2[210] = v56;
    v59 = operator new[]();
    v60 = v59;
    if (v51)
    {
      v61 = 0;
      if (v51 < 4)
        goto LABEL_78;
      if ((unint64_t)(v59 - v38) < 0x20)
        goto LABEL_78;
      v61 = v51 & 0xFFFFFFFFFFFFFFFCLL;
      v62 = (_OWORD *)(v59 + 16);
      v63 = (__int128 *)(v38 + 16);
      v64 = v51 & 0xFFFFFFFFFFFFFFFCLL;
      do
      {
        v65 = *v63;
        *(v62 - 1) = *(v63 - 1);
        *v62 = v65;
        v62 += 2;
        v63 += 2;
        v64 -= 4;
      }
      while (v64);
      if (v51 != v61)
      {
LABEL_78:
        v66 = v50 - v61 + 1;
        v67 = 8 * v61;
        v68 = (uint64_t *)(v38 + 8 * v61);
        v69 = (_QWORD *)(v59 + v67);
        do
        {
          v70 = *v68++;
          *v69++ = v70;
          --v66;
        }
        while (v66);
      }
    }
    result = v2[209];
    if ((_QWORD *)result != v9 && result != 0)
      result = MEMORY[0x212BC6368]();
    v2[209] = v60;
    v4 = *(unsigned __int8 *)(v3 + 1096);
    *(_QWORD *)(v60 + 8 * v2[211]) = v54;
    v72 = v2[211];
    v73 = v72 + 1;
    v2[211] = v72 + 1;
    if (v4)
      goto LABEL_98;
  }
  result = sub_20F5BB998((_QWORD *)(v3 + 120));
  if (!(_DWORD)result)
    goto LABEL_98;
  v74 = *(_QWORD **)(v3 + 968);
  v75 = *(_QWORD **)(v3 + 976);
  if (v74 == v75)
  {
    v76 = 0;
  }
  else
  {
    v76 = 0;
    v77 = 0;
    do
    {
      if ((*(_BYTE *)(v74[628] + 4) & 6) == 0
        && (*(_BYTE *)(v74[629] + 4) & 6) == 0
        && (*(_BYTE *)(v74[630] + 4) & 6) == 0
        && (*(_BYTE *)(v74[631] + 4) & 6) == 0)
      {
        v76 = ++v77;
      }
      v74 += 667;
    }
    while (v74 != v75);
  }
LABEL_99:
  v2[144] += v76;
  v78 = v72 + 2;
  v79 = v2[210];
  if (v72 + 2 <= v79)
  {
    v82 = v60;
    *(_QWORD *)(v60 + 8 * v73) = v76;
    v94 = v2[211];
    v95 = v94 + 1;
    v2[211] = v94 + 1;
    if (v4)
      goto LABEL_120;
  }
  else
  {
    v80 = 2 * v79;
    if (v80 > v78)
      v78 = v80;
    v2[210] = v78;
    v81 = operator new[]();
    v82 = v81;
    if (v73)
    {
      v83 = 0;
      if (v73 < 4)
        goto LABEL_108;
      if ((unint64_t)(v81 - v60) < 0x20)
        goto LABEL_108;
      v83 = v73 & 0xFFFFFFFFFFFFFFFCLL;
      v84 = (_OWORD *)(v81 + 16);
      v85 = (__int128 *)(v60 + 16);
      v86 = v73 & 0xFFFFFFFFFFFFFFFCLL;
      do
      {
        v87 = *v85;
        *(v84 - 1) = *(v85 - 1);
        *v84 = v87;
        v84 += 2;
        v85 += 2;
        v86 -= 4;
      }
      while (v86);
      if (v73 != v83)
      {
LABEL_108:
        v88 = v72 - v83 + 1;
        v89 = 8 * v83;
        v90 = (uint64_t *)(v60 + 8 * v83);
        v91 = (_QWORD *)(v81 + v89);
        do
        {
          v92 = *v90++;
          *v91++ = v92;
          --v88;
        }
        while (v88);
      }
    }
    result = v2[209];
    if ((_QWORD *)result != v9 && result != 0)
      result = MEMORY[0x212BC6368]();
    v2[209] = v82;
    v4 = *(unsigned __int8 *)(v3 + 1096);
    *(_QWORD *)(v82 + 8 * v2[211]) = v76;
    v94 = v2[211];
    v95 = v94 + 1;
    v2[211] = v94 + 1;
    if (v4)
      goto LABEL_120;
  }
  result = sub_20F5BB998((_QWORD *)(v3 + 120));
  if ((_DWORD)result)
  {
    result = (uint64_t)sub_20F5BBAFC(*(_QWORD **)(v3 + 992), *(_QWORD **)(v3 + 1000), (uint64_t)&v403);
    v96 = v411;
    goto LABEL_121;
  }
LABEL_120:
  v96 = 0x84BDA12F684BDA13 * ((uint64_t)(*(_QWORD *)(v3 + 1000) - *(_QWORD *)(v3 + 992)) >> 3);
LABEL_121:
  v2[144] += v96;
  v97 = v94 + 2;
  v98 = v2[210];
  if (v94 + 2 <= v98)
  {
    v101 = v82;
    *(_QWORD *)(v82 + 8 * v95) = v96;
    v114 = v2[211];
    v115 = v114 + 1;
    v2[211] = v114 + 1;
    if (v4)
    {
LABEL_148:
      v118 = 0xB195E8EFDB195E8FLL * ((uint64_t)(*(_QWORD *)(v3 + 1024) - *(_QWORD *)(v3 + 1016)) >> 3);
      goto LABEL_149;
    }
  }
  else
  {
    v99 = 2 * v98;
    if (v99 > v97)
      v97 = v99;
    v2[210] = v97;
    v100 = operator new[]();
    v101 = v100;
    if (v95)
    {
      v102 = 0;
      if (v95 < 4)
        goto LABEL_130;
      if ((unint64_t)(v100 - v82) < 0x20)
        goto LABEL_130;
      v102 = v95 & 0xFFFFFFFFFFFFFFFCLL;
      v103 = (_OWORD *)(v100 + 16);
      v104 = (__int128 *)(v82 + 16);
      v105 = v95 & 0xFFFFFFFFFFFFFFFCLL;
      do
      {
        v106 = *v104;
        *(v103 - 1) = *(v104 - 1);
        *v103 = v106;
        v103 += 2;
        v104 += 2;
        v105 -= 4;
      }
      while (v105);
      if (v95 != v102)
      {
LABEL_130:
        v107 = v94 - v102 + 1;
        v108 = 8 * v102;
        v109 = (uint64_t *)(v82 + 8 * v102);
        v110 = (_QWORD *)(v100 + v108);
        do
        {
          v111 = *v109++;
          *v110++ = v111;
          --v107;
        }
        while (v107);
      }
    }
    result = v2[209];
    if ((_QWORD *)result != v9 && result != 0)
      result = MEMORY[0x212BC6368]();
    v2[209] = v101;
    v113 = *(unsigned __int8 *)(v3 + 1096);
    *(_QWORD *)(v101 + 8 * v2[211]) = v96;
    v114 = v2[211];
    v115 = v114 + 1;
    v2[211] = v114 + 1;
    if (v113)
      goto LABEL_148;
  }
  result = sub_20F5BB998((_QWORD *)(v3 + 120));
  if (!(_DWORD)result)
    goto LABEL_148;
  v116 = *(_QWORD *)(v3 + 1016);
  v117 = *(_QWORD *)(v3 + 1024);
  if (v116 == v117)
  {
    v118 = 0;
  }
  else
  {
    v118 = 0;
    v119 = 0;
    do
    {
      if ((*(_BYTE *)(*(_QWORD *)(v116 + 736) + 4) & 6) == 0 && (*(_BYTE *)(*(_QWORD *)(v116 + 744) + 4) & 6) == 0)
        v118 = ++v119;
      v116 += 888;
    }
    while (v116 != v117);
  }
LABEL_149:
  v2[144] += v118;
  v120 = v114 + 2;
  v121 = v2[210];
  if (v114 + 2 <= v121)
  {
    v124 = v101;
  }
  else
  {
    v122 = 2 * v121;
    if (v122 > v120)
      v120 = v122;
    v2[210] = v120;
    v123 = operator new[]();
    v124 = v123;
    if (v115)
    {
      v125 = 0;
      if (v115 < 4)
        goto LABEL_158;
      if ((unint64_t)(v123 - v101) < 0x20)
        goto LABEL_158;
      v125 = v115 & 0xFFFFFFFFFFFFFFFCLL;
      v126 = (_OWORD *)(v123 + 16);
      v127 = (__int128 *)(v101 + 16);
      v128 = v115 & 0xFFFFFFFFFFFFFFFCLL;
      do
      {
        v129 = *v127;
        *(v126 - 1) = *(v127 - 1);
        *v126 = v129;
        v126 += 2;
        v127 += 2;
        v128 -= 4;
      }
      while (v128);
      if (v115 != v125)
      {
LABEL_158:
        v130 = v114 - v125 + 1;
        v131 = 8 * v125;
        v132 = (uint64_t *)(v101 + 8 * v125);
        v133 = (_QWORD *)(v123 + v131);
        do
        {
          v134 = *v132++;
          *v133++ = v134;
          --v130;
        }
        while (v130);
      }
    }
    result = v2[209];
    if ((_QWORD *)result != v9 && result != 0)
      result = MEMORY[0x212BC6368]();
    v2[209] = v124;
    v115 = v2[211];
  }
  *(_QWORD *)(v124 + 8 * v115) = v118;
  ++v2[211];
  v137 = *v1;
  v136 = (int64x2_t *)v1[1];
  v138 = (_QWORD *)(*v1 + 120);
  if (*(_BYTE *)(v137 + 1096))
  {
    v139 = *(_QWORD *)(v137 + 128);
    v140 = *(_QWORD *)(v137 + 136);
    if (v139 == v140)
    {
      v141 = 0;
    }
    else
    {
      v141 = 0;
      do
      {
        v142 = *(_QWORD *)(v139 + 8);
        if ((*(_BYTE *)(v142 + 4) & 6) == 0)
          v141 += *(unsigned __int8 *)(v142 + 20);
        v139 += 16;
      }
      while (v139 != v140);
    }
  }
  else
  {
    result = sub_20F62E4C0(v138, &v403);
    if ((_DWORD)result)
    {
      *(_QWORD *)(v137 + 1688) = *(_QWORD *)(v137 + 1680);
      *(_QWORD *)(v137 + 1712) = *(_QWORD *)(v137 + 1704);
      *(_QWORD *)(v137 + 1736) = *(_QWORD *)(v137 + 1728);
      *(_QWORD *)(v137 + 1760) = *(_QWORD *)(v137 + 1752);
      *(_QWORD *)(v137 + 1784) = *(_QWORD *)(v137 + 1776);
      *(_QWORD *)(v137 + 1808) = *(_QWORD *)(v137 + 1800);
      *(_QWORD *)(v137 + 1832) = *(_QWORD *)(v137 + 1824);
      *(_QWORD *)(v137 + 1856) = *(_QWORD *)(v137 + 1848);
      v143 = *(_QWORD *)(v137 + 896);
      v144 = *(_QWORD *)(v137 + 904);
      while (v143 != v144)
      {
        v145 = *(_QWORD *)(v143 + 208);
        if (*(_BYTE *)(v143 + 496)
          || (*(_BYTE *)(v145 + 4) & 6) != 0
          || (*(_BYTE *)(*(_QWORD *)(v143 + 216) + 4) & 6) != 0)
        {
          sub_20F394A20(v137 + 1680, v145);
          sub_20F3D35E0((_QWORD *)(v137 + 1680), *(_QWORD *)(v143 + 216));
        }
        v143 += 504;
      }
      v146 = *(_QWORD *)(v137 + 920);
      v147 = *(_QWORD *)(v137 + 928);
      while (v146 != v147)
      {
        v148 = *(_QWORD *)(v146 + 136);
        if (*(_BYTE *)(v146 + 272) || (*(_BYTE *)(v148 + 4) & 6) != 0)
          sub_20F394A20(v137 + 1680, v148);
        v146 += 280;
      }
      sub_20F5B8680(*(_QWORD *)(v137 + 944), *(_QWORD *)(v137 + 952), (_QWORD *)(v137 + 1680));
      sub_20F5B85BC(*(_QWORD *)(v137 + 968), *(_QWORD *)(v137 + 976), (_QWORD *)(v137 + 1680));
      sub_20F5B8444(*(_QWORD *)(v137 + 992), *(_QWORD *)(v137 + 1000), (_QWORD *)(v137 + 1680));
      v149 = *(_QWORD *)(v137 + 1016);
      v150 = *(_QWORD *)(v137 + 1024);
      while (v149 != v150)
      {
        v151 = *(_QWORD *)(v149 + 736);
        if (*(_BYTE *)(v149 + 880)
          || (*(_BYTE *)(v151 + 4) & 6) != 0
          || (*(_BYTE *)(*(_QWORD *)(v149 + 744) + 4) & 6) != 0)
        {
          sub_20F394A20(v137 + 1680, v151);
          sub_20F394A20(v137 + 1680, *(_QWORD *)(v149 + 744));
        }
        v149 += 888;
      }
      v152 = (uint64_t)(*(_QWORD *)(v137 + 1688) - *(_QWORD *)(v137 + 1680)) >> 2;
      if (v152 <= v403)
        v141 = v403 - v152;
      else
        v141 = 0;
      result = sub_20F59A618(v138);
    }
    else
    {
      v141 = v403;
    }
  }
  v153 = v136 + 107;
  v154 = v141;
  v136[106].i64[0] += v141;
  v136[106].i64[1] += 6 * v141;
  v155 = v136[140].u64[0];
  v156 = v155 + 1;
  v157 = v136[139].u64[1];
  if (v155 + 1 <= v157)
  {
    *(_QWORD *)(v136[139].i64[0] + 8 * v155) = v141;
    v173 = v136[140].i64[0] + 1;
    v136[140].i64[0] = v173;
    if (*(_BYTE *)(v137 + 1096))
    {
LABEL_218:
      v174 = *(_QWORD *)(v137 + 224);
      v175 = *(_QWORD *)(v137 + 232);
      if (v174 == v175)
      {
        v176 = 0;
      }
      else
      {
        v176 = 0;
        do
        {
          v177 = *(_QWORD *)(v174 + 8);
          if ((*(_BYTE *)(v177 + 4) & 6) == 0)
            v176 += *(unsigned __int8 *)(v177 + 20);
          v174 += 16;
        }
        while (v174 != v175);
      }
      goto LABEL_252;
    }
  }
  else
  {
    v158 = 2 * v157;
    if (v158 > v156)
      v156 = v158;
    v136[139].i64[1] = v156;
    v159 = v136[139].i64[0];
    v160 = operator new[]();
    v161 = v160;
    if (v155)
    {
      v162 = 0;
      if (v155 < 4)
        goto LABEL_210;
      if ((unint64_t)(v160 - v159) < 0x20)
        goto LABEL_210;
      v162 = v155 & 0xFFFFFFFFFFFFFFFCLL;
      v163 = (_OWORD *)(v160 + 16);
      v164 = (__int128 *)(v159 + 16);
      v165 = v155 & 0xFFFFFFFFFFFFFFFCLL;
      do
      {
        v166 = *v164;
        *(v163 - 1) = *(v164 - 1);
        *v163 = v166;
        v163 += 2;
        v164 += 2;
        v165 -= 4;
      }
      while (v165);
      if (v155 != v162)
      {
LABEL_210:
        v167 = v155 - v162;
        v168 = 8 * v162;
        v169 = (uint64_t *)(v159 + 8 * v162);
        v170 = (_QWORD *)(v160 + v168);
        do
        {
          v171 = *v169++;
          *v170++ = v171;
          --v167;
        }
        while (v167);
      }
    }
    result = v136[139].i64[0];
    if ((int64x2_t *)result != v153 && result != 0)
      result = MEMORY[0x212BC6368]();
    v136[139].i64[0] = v161;
    *(_QWORD *)(v161 + 8 * v136[140].i64[0]) = v154;
    v173 = v136[140].i64[0] + 1;
    v136[140].i64[0] = v173;
    if (*(_BYTE *)(v137 + 1096))
      goto LABEL_218;
  }
  result = sub_20F62E4C0(v138, &v403);
  if ((_DWORD)result)
  {
    *(_QWORD *)(v137 + 1688) = *(_QWORD *)(v137 + 1680);
    *(_QWORD *)(v137 + 1712) = *(_QWORD *)(v137 + 1704);
    *(_QWORD *)(v137 + 1736) = *(_QWORD *)(v137 + 1728);
    *(_QWORD *)(v137 + 1760) = *(_QWORD *)(v137 + 1752);
    *(_QWORD *)(v137 + 1784) = *(_QWORD *)(v137 + 1776);
    *(_QWORD *)(v137 + 1808) = *(_QWORD *)(v137 + 1800);
    *(_QWORD *)(v137 + 1832) = *(_QWORD *)(v137 + 1824);
    *(_QWORD *)(v137 + 1856) = *(_QWORD *)(v137 + 1848);
    v178 = *(_QWORD *)(v137 + 896);
    v179 = *(_QWORD *)(v137 + 904);
    while (v178 != v179)
    {
      v180 = *(_QWORD *)(v178 + 208);
      if (*(_BYTE *)(v178 + 496)
        || (*(_BYTE *)(v180 + 4) & 6) != 0
        || (*(_BYTE *)(*(_QWORD *)(v178 + 216) + 4) & 6) != 0)
      {
        sub_20F394A20(v137 + 1680, v180);
        sub_20F3D35E0((_QWORD *)(v137 + 1680), *(_QWORD *)(v178 + 216));
      }
      v178 += 504;
    }
    v181 = *(_QWORD *)(v137 + 920);
    v182 = *(_QWORD *)(v137 + 928);
    while (v181 != v182)
    {
      v183 = *(_QWORD *)(v181 + 136);
      if (*(_BYTE *)(v181 + 272) || (*(_BYTE *)(v183 + 4) & 6) != 0)
        sub_20F394A20(v137 + 1680, v183);
      v181 += 280;
    }
    sub_20F5B8680(*(_QWORD *)(v137 + 944), *(_QWORD *)(v137 + 952), (_QWORD *)(v137 + 1680));
    sub_20F5B85BC(*(_QWORD *)(v137 + 968), *(_QWORD *)(v137 + 976), (_QWORD *)(v137 + 1680));
    sub_20F5B8444(*(_QWORD *)(v137 + 992), *(_QWORD *)(v137 + 1000), (_QWORD *)(v137 + 1680));
    v184 = *(_QWORD *)(v137 + 1016);
    v185 = *(_QWORD *)(v137 + 1024);
    while (v184 != v185)
    {
      v186 = *(_QWORD *)(v184 + 736);
      if (*(_BYTE *)(v184 + 880)
        || (*(_BYTE *)(v186 + 4) & 6) != 0
        || (*(_BYTE *)(*(_QWORD *)(v184 + 744) + 4) & 6) != 0)
      {
        sub_20F394A20(v137 + 1680, v186);
        sub_20F394A20(v137 + 1680, *(_QWORD *)(v184 + 744));
      }
      v184 += 888;
    }
    v187 = (uint64_t)(*(_QWORD *)(v137 + 1712) - *(_QWORD *)(v137 + 1704)) >> 2;
    if (v187 <= v404)
      v176 = v404 - v187;
    else
      v176 = 0;
    result = sub_20F59A618(v138);
    v173 = v136[140].u64[0];
  }
  else
  {
    v176 = v404;
  }
LABEL_252:
  v188 = v176;
  v136[106].i64[0] += v176;
  v136[106].i64[1] += 9 * v176;
  v189 = v173 + 1;
  v190 = v136[139].u64[1];
  if (v173 + 1 <= v190)
  {
    *(_QWORD *)(v136[139].i64[0] + 8 * v173) = v176;
    v206 = v136[140].i64[0] + 1;
    v136[140].i64[0] = v206;
    if (*(_BYTE *)(v137 + 1096))
    {
LABEL_269:
      v207 = *(_QWORD *)(v137 + 320);
      v208 = *(_QWORD *)(v137 + 328);
      if (v207 == v208)
      {
        v209 = 0;
      }
      else
      {
        v209 = 0;
        do
        {
          v210 = *(_QWORD *)(v207 + 8);
          if ((*(_BYTE *)(v210 + 4) & 6) == 0)
            v209 += *(unsigned __int8 *)(v210 + 20);
          v207 += 16;
        }
        while (v207 != v208);
      }
      goto LABEL_303;
    }
  }
  else
  {
    v191 = 2 * v190;
    if (v191 > v189)
      v189 = v191;
    v136[139].i64[1] = v189;
    v192 = v136[139].i64[0];
    v193 = operator new[]();
    v194 = v193;
    if (v173)
    {
      v195 = 0;
      if (v173 < 4)
        goto LABEL_261;
      if ((unint64_t)(v193 - v192) < 0x20)
        goto LABEL_261;
      v195 = v173 & 0xFFFFFFFFFFFFFFFCLL;
      v196 = (_OWORD *)(v193 + 16);
      v197 = (__int128 *)(v192 + 16);
      v198 = v173 & 0xFFFFFFFFFFFFFFFCLL;
      do
      {
        v199 = *v197;
        *(v196 - 1) = *(v197 - 1);
        *v196 = v199;
        v196 += 2;
        v197 += 2;
        v198 -= 4;
      }
      while (v198);
      if (v173 != v195)
      {
LABEL_261:
        v200 = v173 - v195;
        v201 = 8 * v195;
        v202 = (uint64_t *)(v192 + 8 * v195);
        v203 = (_QWORD *)(v193 + v201);
        do
        {
          v204 = *v202++;
          *v203++ = v204;
          --v200;
        }
        while (v200);
      }
    }
    result = v136[139].i64[0];
    if ((int64x2_t *)result != v153 && result != 0)
      result = MEMORY[0x212BC6368]();
    v136[139].i64[0] = v194;
    *(_QWORD *)(v194 + 8 * v136[140].i64[0]) = v188;
    v206 = v136[140].i64[0] + 1;
    v136[140].i64[0] = v206;
    if (*(_BYTE *)(v137 + 1096))
      goto LABEL_269;
  }
  result = sub_20F62E4C0(v138, &v403);
  if ((_DWORD)result)
  {
    *(_QWORD *)(v137 + 1688) = *(_QWORD *)(v137 + 1680);
    *(_QWORD *)(v137 + 1712) = *(_QWORD *)(v137 + 1704);
    *(_QWORD *)(v137 + 1736) = *(_QWORD *)(v137 + 1728);
    *(_QWORD *)(v137 + 1760) = *(_QWORD *)(v137 + 1752);
    *(_QWORD *)(v137 + 1784) = *(_QWORD *)(v137 + 1776);
    *(_QWORD *)(v137 + 1808) = *(_QWORD *)(v137 + 1800);
    *(_QWORD *)(v137 + 1832) = *(_QWORD *)(v137 + 1824);
    *(_QWORD *)(v137 + 1856) = *(_QWORD *)(v137 + 1848);
    v211 = *(_QWORD *)(v137 + 896);
    v212 = *(_QWORD *)(v137 + 904);
    while (v211 != v212)
    {
      v213 = *(_QWORD *)(v211 + 208);
      if (*(_BYTE *)(v211 + 496)
        || (*(_BYTE *)(v213 + 4) & 6) != 0
        || (*(_BYTE *)(*(_QWORD *)(v211 + 216) + 4) & 6) != 0)
      {
        sub_20F394A20(v137 + 1680, v213);
        sub_20F3D35E0((_QWORD *)(v137 + 1680), *(_QWORD *)(v211 + 216));
      }
      v211 += 504;
    }
    v214 = *(_QWORD *)(v137 + 920);
    v215 = *(_QWORD *)(v137 + 928);
    while (v214 != v215)
    {
      v216 = *(_QWORD *)(v214 + 136);
      if (*(_BYTE *)(v214 + 272) || (*(_BYTE *)(v216 + 4) & 6) != 0)
        sub_20F394A20(v137 + 1680, v216);
      v214 += 280;
    }
    sub_20F5B8680(*(_QWORD *)(v137 + 944), *(_QWORD *)(v137 + 952), (_QWORD *)(v137 + 1680));
    sub_20F5B85BC(*(_QWORD *)(v137 + 968), *(_QWORD *)(v137 + 976), (_QWORD *)(v137 + 1680));
    sub_20F5B8444(*(_QWORD *)(v137 + 992), *(_QWORD *)(v137 + 1000), (_QWORD *)(v137 + 1680));
    v217 = *(_QWORD *)(v137 + 1016);
    v218 = *(_QWORD *)(v137 + 1024);
    while (v217 != v218)
    {
      v219 = *(_QWORD *)(v217 + 736);
      if (*(_BYTE *)(v217 + 880)
        || (*(_BYTE *)(v219 + 4) & 6) != 0
        || (*(_BYTE *)(*(_QWORD *)(v217 + 744) + 4) & 6) != 0)
      {
        sub_20F394A20(v137 + 1680, v219);
        sub_20F394A20(v137 + 1680, *(_QWORD *)(v217 + 744));
      }
      v217 += 888;
    }
    v220 = (uint64_t)(*(_QWORD *)(v137 + 1736) - *(_QWORD *)(v137 + 1728)) >> 2;
    if (v220 <= v405)
      v209 = v405 - v220;
    else
      v209 = 0;
    result = sub_20F59A618(v138);
    v206 = v136[140].u64[0];
  }
  else
  {
    v209 = v405;
  }
LABEL_303:
  v221 = v209;
  v136[106] = vaddq_s64(v136[106], vdupq_n_s64(v209));
  v222 = v206 + 1;
  v223 = v136[139].u64[1];
  if (v206 + 1 <= v223)
  {
    *(_QWORD *)(v136[139].i64[0] + 8 * v206) = v209;
    v239 = v136[140].i64[0] + 1;
    v136[140].i64[0] = v239;
    if (*(_BYTE *)(v137 + 1096))
    {
LABEL_320:
      v240 = *(_QWORD *)(v137 + 416);
      v241 = *(_QWORD *)(v137 + 424);
      if (v240 == v241)
      {
        v242 = 0;
      }
      else
      {
        v242 = 0;
        do
        {
          v243 = *(_QWORD *)(v240 + 8);
          if ((*(_BYTE *)(v243 + 4) & 6) == 0)
            v242 += *(unsigned __int8 *)(v243 + 20);
          v240 += 16;
        }
        while (v240 != v241);
      }
      goto LABEL_354;
    }
  }
  else
  {
    v224 = 2 * v223;
    if (v224 > v222)
      v222 = v224;
    v136[139].i64[1] = v222;
    v225 = v136[139].i64[0];
    v226 = operator new[]();
    v227 = v226;
    if (v206)
    {
      v228 = 0;
      if (v206 < 4)
        goto LABEL_312;
      if ((unint64_t)(v226 - v225) < 0x20)
        goto LABEL_312;
      v228 = v206 & 0xFFFFFFFFFFFFFFFCLL;
      v229 = (_OWORD *)(v226 + 16);
      v230 = (__int128 *)(v225 + 16);
      v231 = v206 & 0xFFFFFFFFFFFFFFFCLL;
      do
      {
        v232 = *v230;
        *(v229 - 1) = *(v230 - 1);
        *v229 = v232;
        v229 += 2;
        v230 += 2;
        v231 -= 4;
      }
      while (v231);
      if (v206 != v228)
      {
LABEL_312:
        v233 = v206 - v228;
        v234 = 8 * v228;
        v235 = (uint64_t *)(v225 + 8 * v228);
        v236 = (_QWORD *)(v226 + v234);
        do
        {
          v237 = *v235++;
          *v236++ = v237;
          --v233;
        }
        while (v233);
      }
    }
    result = v136[139].i64[0];
    if ((int64x2_t *)result != v153 && result != 0)
      result = MEMORY[0x212BC6368]();
    v136[139].i64[0] = v227;
    *(_QWORD *)(v227 + 8 * v136[140].i64[0]) = v221;
    v239 = v136[140].i64[0] + 1;
    v136[140].i64[0] = v239;
    if (*(_BYTE *)(v137 + 1096))
      goto LABEL_320;
  }
  result = sub_20F62E4C0(v138, &v403);
  if ((_DWORD)result)
  {
    *(_QWORD *)(v137 + 1688) = *(_QWORD *)(v137 + 1680);
    *(_QWORD *)(v137 + 1712) = *(_QWORD *)(v137 + 1704);
    *(_QWORD *)(v137 + 1736) = *(_QWORD *)(v137 + 1728);
    *(_QWORD *)(v137 + 1760) = *(_QWORD *)(v137 + 1752);
    *(_QWORD *)(v137 + 1784) = *(_QWORD *)(v137 + 1776);
    *(_QWORD *)(v137 + 1808) = *(_QWORD *)(v137 + 1800);
    *(_QWORD *)(v137 + 1832) = *(_QWORD *)(v137 + 1824);
    *(_QWORD *)(v137 + 1856) = *(_QWORD *)(v137 + 1848);
    v244 = *(_QWORD *)(v137 + 896);
    v245 = *(_QWORD *)(v137 + 904);
    while (v244 != v245)
    {
      v246 = *(_QWORD *)(v244 + 208);
      if (*(_BYTE *)(v244 + 496)
        || (*(_BYTE *)(v246 + 4) & 6) != 0
        || (*(_BYTE *)(*(_QWORD *)(v244 + 216) + 4) & 6) != 0)
      {
        sub_20F394A20(v137 + 1680, v246);
        sub_20F3D35E0((_QWORD *)(v137 + 1680), *(_QWORD *)(v244 + 216));
      }
      v244 += 504;
    }
    v247 = *(_QWORD *)(v137 + 920);
    v248 = *(_QWORD *)(v137 + 928);
    while (v247 != v248)
    {
      v249 = *(_QWORD *)(v247 + 136);
      if (*(_BYTE *)(v247 + 272) || (*(_BYTE *)(v249 + 4) & 6) != 0)
        sub_20F394A20(v137 + 1680, v249);
      v247 += 280;
    }
    sub_20F5B8680(*(_QWORD *)(v137 + 944), *(_QWORD *)(v137 + 952), (_QWORD *)(v137 + 1680));
    sub_20F5B85BC(*(_QWORD *)(v137 + 968), *(_QWORD *)(v137 + 976), (_QWORD *)(v137 + 1680));
    sub_20F5B8444(*(_QWORD *)(v137 + 992), *(_QWORD *)(v137 + 1000), (_QWORD *)(v137 + 1680));
    v250 = *(_QWORD *)(v137 + 1016);
    v251 = *(_QWORD *)(v137 + 1024);
    while (v250 != v251)
    {
      v252 = *(_QWORD *)(v250 + 736);
      if (*(_BYTE *)(v250 + 880)
        || (*(_BYTE *)(v252 + 4) & 6) != 0
        || (*(_BYTE *)(*(_QWORD *)(v250 + 744) + 4) & 6) != 0)
      {
        sub_20F394A20(v137 + 1680, v252);
        sub_20F394A20(v137 + 1680, *(_QWORD *)(v250 + 744));
      }
      v250 += 888;
    }
    v253 = (uint64_t)(*(_QWORD *)(v137 + 1760) - *(_QWORD *)(v137 + 1752)) >> 2;
    if (v253 <= v406)
      v242 = v406 - v253;
    else
      v242 = 0;
    result = sub_20F59A618(v138);
    v239 = v136[140].u64[0];
  }
  else
  {
    v242 = v406;
  }
LABEL_354:
  v254 = v242;
  v136[106].i64[0] += v242;
  v136[106].i64[1] += 6 * v242;
  v255 = v239 + 1;
  v256 = v136[139].u64[1];
  if (v239 + 1 <= v256)
  {
    *(_QWORD *)(v136[139].i64[0] + 8 * v239) = v242;
    v272 = v136[140].i64[0] + 1;
    v136[140].i64[0] = v272;
    if (*(_BYTE *)(v137 + 1096))
    {
LABEL_371:
      v273 = *(_QWORD *)(v137 + 512);
      v274 = *(_QWORD *)(v137 + 520);
      if (v273 == v274)
      {
        v275 = 0;
      }
      else
      {
        v275 = 0;
        do
        {
          v276 = *(_QWORD *)(v273 + 8);
          if ((*(_BYTE *)(v276 + 4) & 6) == 0)
            v275 += *(unsigned __int8 *)(v276 + 20);
          v273 += 16;
        }
        while (v273 != v274);
      }
      goto LABEL_405;
    }
  }
  else
  {
    v257 = 2 * v256;
    if (v257 > v255)
      v255 = v257;
    v136[139].i64[1] = v255;
    v258 = v136[139].i64[0];
    v259 = operator new[]();
    v260 = v259;
    if (v239)
    {
      v261 = 0;
      if (v239 < 4)
        goto LABEL_363;
      if ((unint64_t)(v259 - v258) < 0x20)
        goto LABEL_363;
      v261 = v239 & 0xFFFFFFFFFFFFFFFCLL;
      v262 = (_OWORD *)(v259 + 16);
      v263 = (__int128 *)(v258 + 16);
      v264 = v239 & 0xFFFFFFFFFFFFFFFCLL;
      do
      {
        v265 = *v263;
        *(v262 - 1) = *(v263 - 1);
        *v262 = v265;
        v262 += 2;
        v263 += 2;
        v264 -= 4;
      }
      while (v264);
      if (v239 != v261)
      {
LABEL_363:
        v266 = v239 - v261;
        v267 = 8 * v261;
        v268 = (uint64_t *)(v258 + 8 * v261);
        v269 = (_QWORD *)(v259 + v267);
        do
        {
          v270 = *v268++;
          *v269++ = v270;
          --v266;
        }
        while (v266);
      }
    }
    result = v136[139].i64[0];
    if ((int64x2_t *)result != v153 && result != 0)
      result = MEMORY[0x212BC6368]();
    v136[139].i64[0] = v260;
    *(_QWORD *)(v260 + 8 * v136[140].i64[0]) = v254;
    v272 = v136[140].i64[0] + 1;
    v136[140].i64[0] = v272;
    if (*(_BYTE *)(v137 + 1096))
      goto LABEL_371;
  }
  result = sub_20F62E4C0(v138, &v403);
  if ((_DWORD)result)
  {
    *(_QWORD *)(v137 + 1688) = *(_QWORD *)(v137 + 1680);
    *(_QWORD *)(v137 + 1712) = *(_QWORD *)(v137 + 1704);
    *(_QWORD *)(v137 + 1736) = *(_QWORD *)(v137 + 1728);
    *(_QWORD *)(v137 + 1760) = *(_QWORD *)(v137 + 1752);
    *(_QWORD *)(v137 + 1784) = *(_QWORD *)(v137 + 1776);
    *(_QWORD *)(v137 + 1808) = *(_QWORD *)(v137 + 1800);
    *(_QWORD *)(v137 + 1832) = *(_QWORD *)(v137 + 1824);
    *(_QWORD *)(v137 + 1856) = *(_QWORD *)(v137 + 1848);
    v277 = *(_QWORD *)(v137 + 896);
    v278 = *(_QWORD *)(v137 + 904);
    while (v277 != v278)
    {
      v279 = *(_QWORD *)(v277 + 208);
      if (*(_BYTE *)(v277 + 496)
        || (*(_BYTE *)(v279 + 4) & 6) != 0
        || (*(_BYTE *)(*(_QWORD *)(v277 + 216) + 4) & 6) != 0)
      {
        sub_20F394A20(v137 + 1680, v279);
        sub_20F3D35E0((_QWORD *)(v137 + 1680), *(_QWORD *)(v277 + 216));
      }
      v277 += 504;
    }
    v280 = *(_QWORD *)(v137 + 920);
    v281 = *(_QWORD *)(v137 + 928);
    while (v280 != v281)
    {
      v282 = *(_QWORD *)(v280 + 136);
      if (*(_BYTE *)(v280 + 272) || (*(_BYTE *)(v282 + 4) & 6) != 0)
        sub_20F394A20(v137 + 1680, v282);
      v280 += 280;
    }
    sub_20F5B8680(*(_QWORD *)(v137 + 944), *(_QWORD *)(v137 + 952), (_QWORD *)(v137 + 1680));
    sub_20F5B85BC(*(_QWORD *)(v137 + 968), *(_QWORD *)(v137 + 976), (_QWORD *)(v137 + 1680));
    sub_20F5B8444(*(_QWORD *)(v137 + 992), *(_QWORD *)(v137 + 1000), (_QWORD *)(v137 + 1680));
    v283 = *(_QWORD *)(v137 + 1016);
    v284 = *(_QWORD *)(v137 + 1024);
    while (v283 != v284)
    {
      v285 = *(_QWORD *)(v283 + 736);
      if (*(_BYTE *)(v283 + 880)
        || (*(_BYTE *)(v285 + 4) & 6) != 0
        || (*(_BYTE *)(*(_QWORD *)(v283 + 744) + 4) & 6) != 0)
      {
        sub_20F394A20(v137 + 1680, v285);
        sub_20F394A20(v137 + 1680, *(_QWORD *)(v283 + 744));
      }
      v283 += 888;
    }
    v286 = (uint64_t)(*(_QWORD *)(v137 + 1784) - *(_QWORD *)(v137 + 1776)) >> 2;
    if (v286 <= v407)
      v275 = v407 - v286;
    else
      v275 = 0;
    result = sub_20F59A618(v138);
    v272 = v136[140].u64[0];
  }
  else
  {
    v275 = v407;
  }
LABEL_405:
  v287 = v275;
  v136[106].i64[0] += v275;
  v136[106].i64[1] += 4 * v275;
  v288 = v272 + 1;
  v289 = v136[139].u64[1];
  if (v272 + 1 <= v289)
  {
    *(_QWORD *)(v136[139].i64[0] + 8 * v272) = v275;
    v305 = v136[140].i64[0] + 1;
    v136[140].i64[0] = v305;
    if (*(_BYTE *)(v137 + 1096))
    {
LABEL_422:
      v306 = *(_QWORD *)(v137 + 608);
      v307 = *(_QWORD *)(v137 + 616);
      if (v306 == v307)
      {
        v308 = 0;
      }
      else
      {
        v308 = 0;
        do
        {
          v309 = *(_QWORD *)(v306 + 8);
          if ((*(_BYTE *)(v309 + 4) & 6) == 0)
            v308 += *(unsigned __int8 *)(v309 + 20);
          v306 += 16;
        }
        while (v306 != v307);
      }
      goto LABEL_456;
    }
  }
  else
  {
    v290 = 2 * v289;
    if (v290 > v288)
      v288 = v290;
    v136[139].i64[1] = v288;
    v291 = v136[139].i64[0];
    v292 = operator new[]();
    v293 = v292;
    if (v272)
    {
      v294 = 0;
      if (v272 < 4)
        goto LABEL_414;
      if ((unint64_t)(v292 - v291) < 0x20)
        goto LABEL_414;
      v294 = v272 & 0xFFFFFFFFFFFFFFFCLL;
      v295 = (_OWORD *)(v292 + 16);
      v296 = (__int128 *)(v291 + 16);
      v297 = v272 & 0xFFFFFFFFFFFFFFFCLL;
      do
      {
        v298 = *v296;
        *(v295 - 1) = *(v296 - 1);
        *v295 = v298;
        v295 += 2;
        v296 += 2;
        v297 -= 4;
      }
      while (v297);
      if (v272 != v294)
      {
LABEL_414:
        v299 = v272 - v294;
        v300 = 8 * v294;
        v301 = (uint64_t *)(v291 + 8 * v294);
        v302 = (_QWORD *)(v292 + v300);
        do
        {
          v303 = *v301++;
          *v302++ = v303;
          --v299;
        }
        while (v299);
      }
    }
    result = v136[139].i64[0];
    if ((int64x2_t *)result != v153 && result != 0)
      result = MEMORY[0x212BC6368]();
    v136[139].i64[0] = v293;
    *(_QWORD *)(v293 + 8 * v136[140].i64[0]) = v287;
    v305 = v136[140].i64[0] + 1;
    v136[140].i64[0] = v305;
    if (*(_BYTE *)(v137 + 1096))
      goto LABEL_422;
  }
  result = sub_20F62E4C0(v138, &v403);
  if ((_DWORD)result)
  {
    *(_QWORD *)(v137 + 1688) = *(_QWORD *)(v137 + 1680);
    *(_QWORD *)(v137 + 1712) = *(_QWORD *)(v137 + 1704);
    *(_QWORD *)(v137 + 1736) = *(_QWORD *)(v137 + 1728);
    *(_QWORD *)(v137 + 1760) = *(_QWORD *)(v137 + 1752);
    *(_QWORD *)(v137 + 1784) = *(_QWORD *)(v137 + 1776);
    *(_QWORD *)(v137 + 1808) = *(_QWORD *)(v137 + 1800);
    *(_QWORD *)(v137 + 1832) = *(_QWORD *)(v137 + 1824);
    *(_QWORD *)(v137 + 1856) = *(_QWORD *)(v137 + 1848);
    v310 = *(_QWORD *)(v137 + 896);
    v311 = *(_QWORD *)(v137 + 904);
    while (v310 != v311)
    {
      v312 = *(_QWORD *)(v310 + 208);
      if (*(_BYTE *)(v310 + 496)
        || (*(_BYTE *)(v312 + 4) & 6) != 0
        || (*(_BYTE *)(*(_QWORD *)(v310 + 216) + 4) & 6) != 0)
      {
        sub_20F394A20(v137 + 1680, v312);
        sub_20F3D35E0((_QWORD *)(v137 + 1680), *(_QWORD *)(v310 + 216));
      }
      v310 += 504;
    }
    v313 = *(_QWORD *)(v137 + 920);
    v314 = *(_QWORD *)(v137 + 928);
    while (v313 != v314)
    {
      v315 = *(_QWORD *)(v313 + 136);
      if (*(_BYTE *)(v313 + 272) || (*(_BYTE *)(v315 + 4) & 6) != 0)
        sub_20F394A20(v137 + 1680, v315);
      v313 += 280;
    }
    sub_20F5B8680(*(_QWORD *)(v137 + 944), *(_QWORD *)(v137 + 952), (_QWORD *)(v137 + 1680));
    sub_20F5B85BC(*(_QWORD *)(v137 + 968), *(_QWORD *)(v137 + 976), (_QWORD *)(v137 + 1680));
    sub_20F5B8444(*(_QWORD *)(v137 + 992), *(_QWORD *)(v137 + 1000), (_QWORD *)(v137 + 1680));
    v316 = *(_QWORD *)(v137 + 1016);
    v317 = *(_QWORD *)(v137 + 1024);
    while (v316 != v317)
    {
      v318 = *(_QWORD *)(v316 + 736);
      if (*(_BYTE *)(v316 + 880)
        || (*(_BYTE *)(v318 + 4) & 6) != 0
        || (*(_BYTE *)(*(_QWORD *)(v316 + 744) + 4) & 6) != 0)
      {
        sub_20F394A20(v137 + 1680, v318);
        sub_20F394A20(v137 + 1680, *(_QWORD *)(v316 + 744));
      }
      v316 += 888;
    }
    v319 = (uint64_t)(*(_QWORD *)(v137 + 1808) - *(_QWORD *)(v137 + 1800)) >> 2;
    if (v319 <= v408)
      v308 = v408 - v319;
    else
      v308 = 0;
    result = sub_20F59A618(v138);
    v305 = v136[140].u64[0];
  }
  else
  {
    v308 = v408;
  }
LABEL_456:
  v320 = v308;
  v136[106].i64[0] += v308;
  v136[106].i64[1] += 4 * v308;
  v321 = v305 + 1;
  v322 = v136[139].u64[1];
  if (v305 + 1 <= v322)
  {
    *(_QWORD *)(v136[139].i64[0] + 8 * v305) = v308;
    v338 = v136[140].i64[0] + 1;
    v136[140].i64[0] = v338;
    if (*(_BYTE *)(v137 + 1096))
    {
LABEL_473:
      v339 = *(_QWORD *)(v137 + 704);
      v340 = *(_QWORD *)(v137 + 712);
      if (v339 == v340)
      {
        v341 = 0;
      }
      else
      {
        v341 = 0;
        do
        {
          v342 = *(_QWORD *)(v339 + 8);
          if ((*(_BYTE *)(v342 + 4) & 6) == 0)
            v341 += *(unsigned __int8 *)(v342 + 20);
          v339 += 16;
        }
        while (v339 != v340);
      }
      goto LABEL_507;
    }
  }
  else
  {
    v323 = 2 * v322;
    if (v323 > v321)
      v321 = v323;
    v136[139].i64[1] = v321;
    v324 = v136[139].i64[0];
    v325 = operator new[]();
    v326 = v325;
    if (v305)
    {
      v327 = 0;
      if (v305 < 4)
        goto LABEL_465;
      if ((unint64_t)(v325 - v324) < 0x20)
        goto LABEL_465;
      v327 = v305 & 0xFFFFFFFFFFFFFFFCLL;
      v328 = (_OWORD *)(v325 + 16);
      v329 = (__int128 *)(v324 + 16);
      v330 = v305 & 0xFFFFFFFFFFFFFFFCLL;
      do
      {
        v331 = *v329;
        *(v328 - 1) = *(v329 - 1);
        *v328 = v331;
        v328 += 2;
        v329 += 2;
        v330 -= 4;
      }
      while (v330);
      if (v305 != v327)
      {
LABEL_465:
        v332 = v305 - v327;
        v333 = 8 * v327;
        v334 = (uint64_t *)(v324 + 8 * v327);
        v335 = (_QWORD *)(v325 + v333);
        do
        {
          v336 = *v334++;
          *v335++ = v336;
          --v332;
        }
        while (v332);
      }
    }
    result = v136[139].i64[0];
    if ((int64x2_t *)result != v153 && result != 0)
      result = MEMORY[0x212BC6368]();
    v136[139].i64[0] = v326;
    *(_QWORD *)(v326 + 8 * v136[140].i64[0]) = v320;
    v338 = v136[140].i64[0] + 1;
    v136[140].i64[0] = v338;
    if (*(_BYTE *)(v137 + 1096))
      goto LABEL_473;
  }
  result = sub_20F62E4C0(v138, &v403);
  if ((_DWORD)result)
  {
    *(_QWORD *)(v137 + 1688) = *(_QWORD *)(v137 + 1680);
    *(_QWORD *)(v137 + 1712) = *(_QWORD *)(v137 + 1704);
    *(_QWORD *)(v137 + 1736) = *(_QWORD *)(v137 + 1728);
    *(_QWORD *)(v137 + 1760) = *(_QWORD *)(v137 + 1752);
    *(_QWORD *)(v137 + 1784) = *(_QWORD *)(v137 + 1776);
    *(_QWORD *)(v137 + 1808) = *(_QWORD *)(v137 + 1800);
    *(_QWORD *)(v137 + 1832) = *(_QWORD *)(v137 + 1824);
    *(_QWORD *)(v137 + 1856) = *(_QWORD *)(v137 + 1848);
    v343 = *(_QWORD *)(v137 + 896);
    v344 = *(_QWORD *)(v137 + 904);
    while (v343 != v344)
    {
      v345 = *(_QWORD *)(v343 + 208);
      if (*(_BYTE *)(v343 + 496)
        || (*(_BYTE *)(v345 + 4) & 6) != 0
        || (*(_BYTE *)(*(_QWORD *)(v343 + 216) + 4) & 6) != 0)
      {
        sub_20F394A20(v137 + 1680, v345);
        sub_20F3D35E0((_QWORD *)(v137 + 1680), *(_QWORD *)(v343 + 216));
      }
      v343 += 504;
    }
    v346 = *(_QWORD *)(v137 + 920);
    v347 = *(_QWORD *)(v137 + 928);
    while (v346 != v347)
    {
      v348 = *(_QWORD *)(v346 + 136);
      if (*(_BYTE *)(v346 + 272) || (*(_BYTE *)(v348 + 4) & 6) != 0)
        sub_20F394A20(v137 + 1680, v348);
      v346 += 280;
    }
    sub_20F5B8680(*(_QWORD *)(v137 + 944), *(_QWORD *)(v137 + 952), (_QWORD *)(v137 + 1680));
    sub_20F5B85BC(*(_QWORD *)(v137 + 968), *(_QWORD *)(v137 + 976), (_QWORD *)(v137 + 1680));
    sub_20F5B8444(*(_QWORD *)(v137 + 992), *(_QWORD *)(v137 + 1000), (_QWORD *)(v137 + 1680));
    v349 = *(_QWORD *)(v137 + 1016);
    v350 = *(_QWORD *)(v137 + 1024);
    while (v349 != v350)
    {
      v351 = *(_QWORD *)(v349 + 736);
      if (*(_BYTE *)(v349 + 880)
        || (*(_BYTE *)(v351 + 4) & 6) != 0
        || (*(_BYTE *)(*(_QWORD *)(v349 + 744) + 4) & 6) != 0)
      {
        sub_20F394A20(v137 + 1680, v351);
        sub_20F394A20(v137 + 1680, *(_QWORD *)(v349 + 744));
      }
      v349 += 888;
    }
    v352 = (uint64_t)(*(_QWORD *)(v137 + 1832) - *(_QWORD *)(v137 + 1824)) >> 2;
    if (v352 <= v409)
      v341 = v409 - v352;
    else
      v341 = 0;
    result = sub_20F59A618(v138);
    v338 = v136[140].u64[0];
  }
  else
  {
    v341 = v409;
  }
LABEL_507:
  v353 = v341;
  v136[106].i64[0] += v341;
  v136[106].i64[1] += 3 * v341;
  v354 = v338 + 1;
  v355 = v136[139].u64[1];
  if (v338 + 1 <= v355)
  {
    *(_QWORD *)(v136[139].i64[0] + 8 * v338) = v341;
    v371 = v136[140].i64[0] + 1;
    v136[140].i64[0] = v371;
    if (*(_BYTE *)(v137 + 1096))
    {
LABEL_524:
      v372 = *(_QWORD *)(v137 + 800);
      v373 = *(_QWORD *)(v137 + 808);
      if (v372 == v373)
      {
        v374 = 0;
      }
      else
      {
        v374 = 0;
        do
        {
          v375 = *(_QWORD *)(v372 + 8);
          if ((*(_BYTE *)(v375 + 4) & 6) == 0)
            v374 += *(unsigned __int8 *)(v375 + 20);
          v372 += 16;
        }
        while (v372 != v373);
      }
      goto LABEL_558;
    }
  }
  else
  {
    v356 = 2 * v355;
    if (v356 > v354)
      v354 = v356;
    v136[139].i64[1] = v354;
    v357 = v136[139].i64[0];
    v358 = operator new[]();
    v359 = v358;
    if (v338)
    {
      v360 = 0;
      if (v338 < 4)
        goto LABEL_516;
      if ((unint64_t)(v358 - v357) < 0x20)
        goto LABEL_516;
      v360 = v338 & 0xFFFFFFFFFFFFFFFCLL;
      v361 = (_OWORD *)(v358 + 16);
      v362 = (__int128 *)(v357 + 16);
      v363 = v338 & 0xFFFFFFFFFFFFFFFCLL;
      do
      {
        v364 = *v362;
        *(v361 - 1) = *(v362 - 1);
        *v361 = v364;
        v361 += 2;
        v362 += 2;
        v363 -= 4;
      }
      while (v363);
      if (v338 != v360)
      {
LABEL_516:
        v365 = v338 - v360;
        v366 = 8 * v360;
        v367 = (uint64_t *)(v357 + 8 * v360);
        v368 = (_QWORD *)(v358 + v366);
        do
        {
          v369 = *v367++;
          *v368++ = v369;
          --v365;
        }
        while (v365);
      }
    }
    result = v136[139].i64[0];
    if ((int64x2_t *)result != v153 && result != 0)
      result = MEMORY[0x212BC6368]();
    v136[139].i64[0] = v359;
    *(_QWORD *)(v359 + 8 * v136[140].i64[0]) = v353;
    v371 = v136[140].i64[0] + 1;
    v136[140].i64[0] = v371;
    if (*(_BYTE *)(v137 + 1096))
      goto LABEL_524;
  }
  result = sub_20F62E4C0(v138, &v403);
  if ((_DWORD)result)
  {
    *(_QWORD *)(v137 + 1688) = *(_QWORD *)(v137 + 1680);
    *(_QWORD *)(v137 + 1712) = *(_QWORD *)(v137 + 1704);
    *(_QWORD *)(v137 + 1736) = *(_QWORD *)(v137 + 1728);
    *(_QWORD *)(v137 + 1760) = *(_QWORD *)(v137 + 1752);
    *(_QWORD *)(v137 + 1784) = *(_QWORD *)(v137 + 1776);
    *(_QWORD *)(v137 + 1808) = *(_QWORD *)(v137 + 1800);
    *(_QWORD *)(v137 + 1832) = *(_QWORD *)(v137 + 1824);
    *(_QWORD *)(v137 + 1856) = *(_QWORD *)(v137 + 1848);
    v376 = *(_QWORD *)(v137 + 896);
    v377 = *(_QWORD *)(v137 + 904);
    while (v376 != v377)
    {
      v378 = *(_QWORD *)(v376 + 208);
      if (*(_BYTE *)(v376 + 496)
        || (*(_BYTE *)(v378 + 4) & 6) != 0
        || (*(_BYTE *)(*(_QWORD *)(v376 + 216) + 4) & 6) != 0)
      {
        sub_20F394A20(v137 + 1680, v378);
        sub_20F3D35E0((_QWORD *)(v137 + 1680), *(_QWORD *)(v376 + 216));
      }
      v376 += 504;
    }
    v379 = *(_QWORD *)(v137 + 920);
    v380 = *(_QWORD *)(v137 + 928);
    while (v379 != v380)
    {
      v381 = *(_QWORD *)(v379 + 136);
      if (*(_BYTE *)(v379 + 272) || (*(_BYTE *)(v381 + 4) & 6) != 0)
        sub_20F394A20(v137 + 1680, v381);
      v379 += 280;
    }
    sub_20F5B8680(*(_QWORD *)(v137 + 944), *(_QWORD *)(v137 + 952), (_QWORD *)(v137 + 1680));
    sub_20F5B85BC(*(_QWORD *)(v137 + 968), *(_QWORD *)(v137 + 976), (_QWORD *)(v137 + 1680));
    sub_20F5B8444(*(_QWORD *)(v137 + 992), *(_QWORD *)(v137 + 1000), (_QWORD *)(v137 + 1680));
    v382 = *(_QWORD *)(v137 + 1016);
    v383 = *(_QWORD *)(v137 + 1024);
    while (v382 != v383)
    {
      v384 = *(_QWORD *)(v382 + 736);
      if (*(_BYTE *)(v382 + 880)
        || (*(_BYTE *)(v384 + 4) & 6) != 0
        || (*(_BYTE *)(*(_QWORD *)(v382 + 744) + 4) & 6) != 0)
      {
        sub_20F394A20(v137 + 1680, v384);
        sub_20F394A20(v137 + 1680, *(_QWORD *)(v382 + 744));
      }
      v382 += 888;
    }
    v385 = (uint64_t)(*(_QWORD *)(v137 + 1856) - *(_QWORD *)(v137 + 1848)) >> 2;
    if (v385 <= v410)
      v374 = v410 - v385;
    else
      v374 = 0;
    result = sub_20F59A618(v138);
    v371 = v136[140].u64[0];
  }
  else
  {
    v374 = v410;
  }
LABEL_558:
  v136[106] = vaddq_s64(v136[106], vdupq_n_s64(v374));
  v386 = v371 + 1;
  v387 = v136[139].u64[1];
  if (v371 + 1 <= v387)
  {
    v391 = v136[139].i64[0];
  }
  else
  {
    v388 = 2 * v387;
    if (v388 > v386)
      v386 = v388;
    v136[139].i64[1] = v386;
    v389 = v136[139].i64[0];
    v390 = operator new[]();
    v391 = v390;
    if (v371)
    {
      v392 = 0;
      if (v371 < 4)
        goto LABEL_567;
      if ((unint64_t)(v390 - v389) < 0x20)
        goto LABEL_567;
      v392 = v371 & 0xFFFFFFFFFFFFFFFCLL;
      v393 = (_OWORD *)(v390 + 16);
      v394 = (__int128 *)(v389 + 16);
      v395 = v371 & 0xFFFFFFFFFFFFFFFCLL;
      do
      {
        v396 = *v394;
        *(v393 - 1) = *(v394 - 1);
        *v393 = v396;
        v393 += 2;
        v394 += 2;
        v395 -= 4;
      }
      while (v395);
      if (v371 != v392)
      {
LABEL_567:
        v397 = v371 - v392;
        v398 = 8 * v392;
        v399 = (uint64_t *)(v389 + 8 * v392);
        v400 = (_QWORD *)(v390 + v398);
        do
        {
          v401 = *v399++;
          *v400++ = v401;
          --v397;
        }
        while (v397);
      }
    }
    result = v136[139].i64[0];
    if ((int64x2_t *)result != v153 && result != 0)
      result = MEMORY[0x212BC6368]();
    v136[139].i64[0] = v391;
    v371 = v136[140].u64[0];
  }
  *(_QWORD *)(v391 + 8 * v371) = v374;
  ++v136[140].i64[0];
  return result;
}

void sub_20F7BFB88(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20F59A618(v1);
  _Unwind_Resume(a1);
}

void sub_20F7BFB9C(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20F59A618(v1);
  _Unwind_Resume(a1);
}

void sub_20F7BFBB0(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20F59A618(v1);
  _Unwind_Resume(a1);
}

void sub_20F7BFBC4(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20F59A618(v1);
  _Unwind_Resume(a1);
}

void sub_20F7BFBD8(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20F59A618(v1);
  _Unwind_Resume(a1);
}

void sub_20F7BFBEC(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20F59A618(v1);
  _Unwind_Resume(a1);
}

void sub_20F7BFC00(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20F59A618(v1);
  _Unwind_Resume(a1);
}

void sub_20F7BFC14(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20F59A618(v1);
  _Unwind_Resume(a1);
}

void sub_20F7BFC28(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20F59A618(v1);
  _Unwind_Resume(a1);
}

void sub_20F7BFC3C(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20F59A618(v1);
  _Unwind_Resume(a1);
}

void sub_20F7BFC50(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20F59A618(v1);
  _Unwind_Resume(a1);
}

void sub_20F7BFC64(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20F59A618(v1);
  _Unwind_Resume(a1);
}

void sub_20F7BFC78(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20F59A618(v1);
  _Unwind_Resume(a1);
}

void sub_20F7BFC8C(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20F59A618(v1);
  _Unwind_Resume(a1);
}

void sub_20F7BFCA0(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20F59A618(v1);
  _Unwind_Resume(a1);
}

void sub_20F7BFCB4(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20F59A618(v1);
  _Unwind_Resume(a1);
}

void sub_20F7BFCC8(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20F59A618(v1);
  _Unwind_Resume(a1);
}

void sub_20F7BFCDC(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20F59A618(v1);
  _Unwind_Resume(a1);
}

void sub_20F7BFCF0(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20F59A618(v1);
  _Unwind_Resume(a1);
}

void sub_20F7BFD04(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20F59A618(v1);
  _Unwind_Resume(a1);
}

void sub_20F7BFD18(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20F59A618(v1);
  _Unwind_Resume(a1);
}

void sub_20F7BFD2C(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20F59A618(v1);
  _Unwind_Resume(a1);
}

void sub_20F7BFD40(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20F59A618(v1);
  _Unwind_Resume(a1);
}

void sub_20F7BFD54(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20F59A618(v1);
  _Unwind_Resume(a1);
}

void sub_20F7BFD68(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20F59A618(v1);
  _Unwind_Resume(a1);
}

void sub_20F7BFD7C(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20F59A618(v1);
  _Unwind_Resume(a1);
}

void sub_20F7BFD90(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20F59A618(v1);
  _Unwind_Resume(a1);
}

void sub_20F7BFDA4(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20F59A618(v1);
  _Unwind_Resume(a1);
}

void sub_20F7BFDB8(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20F59A618(v1);
  _Unwind_Resume(a1);
}

void sub_20F7BFDCC(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20F59A618(v1);
  _Unwind_Resume(a1);
}

void sub_20F7BFDE0(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20F59A618(v1);
  _Unwind_Resume(a1);
}

void sub_20F7BFDF4(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20F59A618(v1);
  _Unwind_Resume(a1);
}

double sub_20F7BFE08(uint64_t a1, _QWORD *a2)
{
  float64x2_t v4;
  double v5;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  __int128 *v19;
  double v20;
  double v21;
  unint64_t v22;
  uint64_t v23;
  double *v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  double v28;
  double v29;
  __int128 *v30;
  _BOOL4 v31;
  uint64_t v32;
  __int128 v33;
  __int128 v36;
  double *v52;
  int8x16_t *v53;
  int8x16_t *v54;
  int8x16_t *v55;
  uint64_t *v56;
  uint64_t v57;
  float64x2_t v58;
  float64x2_t v60;
  float64x2_t v62;
  double v64;
  double v66;
  float64x2_t v68;
  double v69;
  float64x2_t v70;
  int8x16_t *v71;
  float64x2_t v72;
  float64x2_t v73;
  float64x2_t *v74;
  int8x16_t v75;
  int8x16_t v76;
  int8x16_t *v77;
  int8x16_t v78;
  float64_t v79;
  double v80;
  uint64_t *v81;
  uint64_t v82;
  uint64_t v83;
  double v84;
  _OWORD *v85;
  int v86;
  uint64_t v89;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  double v104;
  __int128 *v105;
  __int128 *v106;
  __int128 v107;
  __int128 v110;
  double v123;
  uint64_t v124;
  uint64_t v125;
  float64x2_t v126;
  double v127;
  double v128;
  float64x2_t v129;
  double v130;
  double v131;
  float64x2_t v132;
  double v133;
  double *v134;
  _QWORD *v135;
  uint64_t v136;
  uint64_t v137;
  double v138;
  double v139;
  double *v140;
  int v141;
  uint64_t v142;
  double v145;
  long double v146;
  long double v147;
  uint64_t v148;
  uint64_t v149;
  double *v150;
  _OWORD *v151;
  _BOOL4 v152;
  uint64_t v153;
  __int128 v154;
  double v161;
  double v162;
  unint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  unint64_t v167;
  uint64_t v168;
  __int128 v169;
  unint64_t v175;
  uint64_t v176;
  uint64_t v178;
  double v179;
  double v180;
  uint64_t v181;
  __int128 v184;
  __int128 v185;
  __int128 v186;
  double v202;
  unint64_t v203;
  uint64_t v204;
  uint64_t v206;
  unint64_t v207;
  uint64_t v208;
  double v226;
  unint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  double v231;
  unint64_t v232;
  double v233;
  unint64_t v234;
  double *v235;
  uint64_t v236;
  double v239;
  long double v240;
  long double v241;
  long double v242;
  uint64_t v243;
  uint64_t v244;
  unint64_t v245;
  uint64_t v246;
  __int128 v247;
  unint64_t v253;
  uint64_t v254;
  double v255;
  double *v256;
  double v257;
  double v258;
  double v259;
  double v260;
  double v261;
  double v262;
  float64x2_t v264;
  float64x2_t v265;
  _QWORD *v266;
  double *v267;
  float64x2_t v268;
  double v269;
  float64x2_t v270;
  float64_t v271;
  float64x2_t v272;
  double v273;
  float64x2_t v274;
  uint64_t v275;
  double v276;
  char v277;

  kdebug_trace();
  v11 = a2[66];
  if (v11 > 5)
    goto LABEL_15;
  v12 = a2[65];
  if (v12 >= 6)
  {
    v16 = (_QWORD *)a2[64];
  }
  else
  {
    v13 = 2 * v12;
    if (v13 <= 6)
      v13 = 6;
    a2[65] = v13;
    v14 = (_QWORD *)a2[64];
    v15 = (_QWORD *)operator new[]();
    v16 = v15;
    if (v11)
    {
      *v15 = *v14;
      if (v11 != 1)
      {
        v15[1] = v14[1];
        if (v11 != 2)
        {
          v15[2] = v14[2];
          if (v11 != 3)
          {
            v15[3] = v14[3];
            if (v11 != 4)
              v15[4] = v14[4];
          }
        }
      }
    }
    v17 = (_QWORD *)a2[64];
    if (v17 != a2 && v17)
      MEMORY[0x212BC6368](v17, 0x1000C8000313F17);
    a2[64] = v16;
    v11 = a2[66];
    if (v11 > 5)
    {
LABEL_15:
      a2[66] = 6;
      if (*(_BYTE *)(a1 + 1876))
        goto LABEL_16;
      goto LABEL_22;
    }
  }
  bzero(&v16[v11], 48 - 8 * v11);
  a2[66] = 6;
  if (*(_BYTE *)(a1 + 1876))
  {
LABEL_16:
    v18 = *(_QWORD *)(a1 + 896);
    v19 = *(__int128 **)(a1 + 904);
    v20 = 0.0;
    v21 = 0.0;
    if ((__int128 *)v18 == v19)
      goto LABEL_72;
    if (*(_BYTE *)(a1 + 1875))
    {
      v22 = (unint64_t)v19 - v18 - 504;
      if (v22 < 0x1F8)
      {
        v23 = *(_QWORD *)(a1 + 896);
        do
        {
LABEL_71:
          v21 = v21 + *(double *)(v23 + 464);
          v23 += 504;
        }
        while ((__int128 *)v23 != v19);
        goto LABEL_72;
      }
      v163 = v22 / 0x1F8 + 1;
      v23 = v18 + 504 * (v163 & 0x1FFFFFFFFFFFFFELL);
      v164 = v163 & 0x1FFFFFFFFFFFFFELL;
      do
      {
        v21 = v21 + *(double *)(v18 + 464) + *(double *)(v18 + 968);
        v18 += 1008;
        v164 -= 2;
      }
      while (v164);
      if (v163 != (v163 & 0x1FFFFFFFFFFFFFELL))
        goto LABEL_71;
    }
    else
    {
      v105 = (__int128 *)(v18 + 344);
      do
      {
        if (*((_BYTE *)v105 + 128))
        {
          *((_QWORD *)v105 + 14) = *((_QWORD *)v105 - 1);
          v107 = *(__int128 *)((char *)v105 - 24);
          _Q5 = *(__int128 *)((char *)v105 - 56);
          v105[5] = *(__int128 *)((char *)v105 - 40);
          v105[6] = v107;
          _Q4 = *(__int128 *)((char *)v105 - 88);
          v105[3] = *(__int128 *)((char *)v105 - 72);
          v105[4] = _Q5;
          v110 = *(__int128 *)((char *)v105 - 120);
          v105[1] = *(__int128 *)((char *)v105 - 104);
          v105[2] = _Q4;
          *v105 = v110;
          _Q17 = *v105;
          _D19 = *((_QWORD *)v105 + 1);
          __asm { FMLA            D18, D19, V17.D[1] }
          *(_QWORD *)&_Q17 = *((_QWORD *)v105 + 3);
          __asm { FMLA            D18, D17, V16.D[1] }
          _D16 = *((_QWORD *)v105 + 5);
          __asm { FMLA            D18, D16, V7.D[1] }
          _D7 = *((_QWORD *)v105 + 7);
          __asm { FMLA            D18, D7, V6.D[1] }
          _D6 = *((_QWORD *)v105 + 9);
          __asm { FMLA            D18, D6, V5.D[1] }
          *(_QWORD *)&_Q5 = *((_QWORD *)v105 + 11);
          __asm { FMLA            D18, D5, V4.D[1] }
          *(_QWORD *)&_Q4 = *((_QWORD *)v105 + 13);
          __asm { FMLA            D18, D4, V3.D[1] }
          v123 = *(double *)(a1 + 16) * (_D18 + *((double *)v105 + 14) * *((double *)v105 + 14));
          *((double *)v105 + 15) = v123;
          v21 = v21 + v123;
        }
        v106 = v105 + 10;
        v105 = (__int128 *)((char *)v105 + 504);
      }
      while (v106 != v19);
    }
LABEL_72:
    v134 = (double *)a2[64];
    *v134 = v21 * 0.5;
    v165 = *(_QWORD *)(a1 + 920);
    v166 = *(_QWORD *)(a1 + 928);
    if (v165 == v166)
      goto LABEL_85;
    if (*(_BYTE *)(a1 + 1875))
    {
      v167 = v166 - v165 - 280;
      v20 = 0.0;
      if (v167 < 0x118)
      {
        v168 = *(_QWORD *)(a1 + 920);
        do
        {
LABEL_84:
          v20 = v20 + *(double *)(v168 + 240);
          v168 += 280;
        }
        while (v168 != v166);
        goto LABEL_85;
      }
      v175 = v167 / 0x118 + 1;
      v168 = v165 + 280 * (v175 & 0x1FFFFFFFFFFFFFELL);
      v176 = v175 & 0x1FFFFFFFFFFFFFELL;
      do
      {
        v20 = v20 + *(double *)(v165 + 240) + *(double *)(v165 + 520);
        v165 += 560;
        v176 -= 2;
      }
      while (v176);
      if (v175 != (v175 & 0x1FFFFFFFFFFFFFELL))
        goto LABEL_84;
    }
    else
    {
      v20 = 0.0;
      do
      {
        if (*(_BYTE *)(v165 + 248))
        {
          v169 = *(_OWORD *)(v165 + 160);
          *(_OWORD *)(v165 + 192) = *(_OWORD *)(v165 + 144);
          *(_OWORD *)(v165 + 208) = v169;
          _Q3 = *(_OWORD *)(v165 + 192);
          *(_OWORD *)(v165 + 224) = *(_OWORD *)(v165 + 176);
          _D6 = *((_QWORD *)&_Q3 + 1);
          __asm { FMLA            D5, D6, V3.D[1] }
          *(_QWORD *)&_Q3 = *(_QWORD *)(v165 + 216);
          __asm { FMLA            D5, D3, V4.D[1] }
          *(_QWORD *)&_Q3 = *(_QWORD *)(v165 + 232);
          __asm { FMLA            D5, D3, V1.D[1] }
          *(double *)&v169 = *(double *)(a1 + 32) * _D5;
          *(_QWORD *)(v165 + 240) = v169;
          v20 = v20 + *(double *)&v169;
        }
        v165 += 280;
      }
      while (v165 != v166);
      v134 = (double *)a2[64];
    }
LABEL_85:
    v134[1] = v20 * 0.5;
    _X10 = *(_QWORD *)(a1 + 944);
    v178 = *(_QWORD *)(a1 + 952);
    v179 = 0.0;
    if (_X10 == v178)
    {
      v180 = 0.0;
      goto LABEL_99;
    }
    if (*(_BYTE *)(a1 + 1875))
    {
      v180 = 0.0;
      if ((unint64_t)(v178 - _X10 - 8016) >> 4 < 0x1F5)
      {
        v181 = *(_QWORD *)(a1 + 944);
        do
        {
LABEL_98:
          v180 = v180 + *(double *)(v181 + 7976);
          v181 += 8016;
        }
        while (v181 != v178);
        goto LABEL_99;
      }
      v203 = (v178 - _X10 - 8016) / 0x1F50uLL + 1;
      v181 = _X10 + 8016 * (v203 & 0x1FFFFFFFFFFFFELL);
      v204 = v203 & 0x1FFFFFFFFFFFFELL;
      do
      {
        v180 = v180 + *(double *)(_X10 + 7976) + *(double *)(_X10 + 15992);
        _X10 += 16032;
        v204 -= 2;
      }
      while (v204);
      if (v203 != (v203 & 0x1FFFFFFFFFFFFELL))
        goto LABEL_98;
    }
    else
    {
      v180 = 0.0;
      do
      {
        __asm { PRFM            #0, [X10,#0x7D20] }
        if (*(_BYTE *)(_X10 + 7984))
        {
          _X14 = _X10 + 31904;
          *(_QWORD *)(_X10 + 7968) = *(_QWORD *)(_X10 + 7848);
          v184 = *(_OWORD *)(_X10 + 7816);
          *(_OWORD *)(_X10 + 7920) = *(_OWORD *)(_X10 + 7800);
          *(_OWORD *)(_X10 + 7936) = v184;
          *(_OWORD *)(_X10 + 7952) = *(_OWORD *)(_X10 + 7832);
          v185 = *(_OWORD *)(_X10 + 7752);
          *(_OWORD *)(_X10 + 7856) = *(_OWORD *)(_X10 + 7736);
          *(_OWORD *)(_X10 + 7872) = v185;
          v186 = *(_OWORD *)(_X10 + 7784);
          *(_OWORD *)(_X10 + 7888) = *(_OWORD *)(_X10 + 7768);
          *(_OWORD *)(_X10 + 7904) = v186;
          __asm { PRFM            #0, [X14] }
          _Q17 = *(_OWORD *)(_X10 + 7856);
          _D19 = *(_QWORD *)(_X10 + 7864);
          __asm { FMLA            D18, D19, V17.D[1] }
          *(_QWORD *)&_Q17 = *(_QWORD *)(_X10 + 7880);
          __asm { FMLA            D18, D17, V16.D[1] }
          _D16 = *(_QWORD *)(_X10 + 7896);
          __asm { FMLA            D18, D16, V7.D[1] }
          _D7 = *(_QWORD *)(_X10 + 7912);
          __asm { FMLA            D18, D7, V6.D[1] }
          _D6 = *(_QWORD *)(_X10 + 7928);
          __asm { FMLA            D18, D6, V5.D[1] }
          _D5 = *(_QWORD *)(_X10 + 7944);
          __asm { FMLA            D18, D5, V4.D[1] }
          _D4 = *(_QWORD *)(_X10 + 7960);
          __asm { FMLA            D18, D4, V3.D[1] }
          v202 = *(double *)(a1 + 48) * (_D18 + *(double *)(_X10 + 7968) * *(double *)(_X10 + 7968));
          *(double *)(_X10 + 7976) = v202;
          v180 = v180 + v202;
        }
        _X10 += 8016;
      }
      while (_X10 != v178);
      v134 = (double *)a2[64];
    }
LABEL_99:
    v134[2] = v180 * 0.5;
    _X10 = *(_QWORD *)(a1 + 968);
    v206 = *(_QWORD *)(a1 + 976);
    if (_X10 == v206)
      goto LABEL_112;
    if (*(_BYTE *)(a1 + 1875))
    {
      v207 = v206 - _X10 - 5336;
      v179 = 0.0;
      if (v207 >> 3 < 0x29B)
      {
        v208 = *(_QWORD *)(a1 + 968);
        do
        {
LABEL_111:
          v179 = v179 + *(double *)(v208 + 5296);
          v208 += 5336;
        }
        while (v208 != v206);
        goto LABEL_112;
      }
      v227 = v207 / 0x14D8 + 1;
      v208 = _X10 + 5336 * (v227 & 0x1FFFFFFFFFFFFELL);
      v228 = v227 & 0x1FFFFFFFFFFFFELL;
      do
      {
        v179 = v179 + *(double *)(_X10 + 5296) + *(double *)(_X10 + 10632);
        _X10 += 10672;
        v228 -= 2;
      }
      while (v228);
      if (v227 != (v227 & 0x1FFFFFFFFFFFFELL))
        goto LABEL_111;
    }
    else
    {
      v179 = 0.0;
      do
      {
        __asm { PRFM            #0, [X10,#0x5340] }
        if (*(_BYTE *)(_X10 + 5304))
        {
          _X14 = _X10 + 21184;
          *(_QWORD *)(_X10 + 5288) = *(_QWORD *)(_X10 + 5168);
          *(_OWORD *)(_X10 + 5240) = *(_OWORD *)(_X10 + 5120);
          *(_OWORD *)(_X10 + 5256) = *(_OWORD *)(_X10 + 5136);
          *(_OWORD *)(_X10 + 5272) = *(_OWORD *)(_X10 + 5152);
          *(_OWORD *)(_X10 + 5176) = *(_OWORD *)(_X10 + 5056);
          *(_OWORD *)(_X10 + 5192) = *(_OWORD *)(_X10 + 5072);
          *(_OWORD *)(_X10 + 5208) = *(_OWORD *)(_X10 + 5088);
          *(_OWORD *)(_X10 + 5224) = *(_OWORD *)(_X10 + 5104);
          __asm { PRFM            #0, [X14] }
          _Q16 = *(_OWORD *)(_X10 + 5176);
          _D19 = *(_QWORD *)(_X10 + 5184);
          __asm { FMLA            D18, D19, V16.D[1] }
          *(_QWORD *)&_Q16 = *(_QWORD *)(_X10 + 5200);
          __asm { FMLA            D18, D16, V7.D[1] }
          _D7 = *(_QWORD *)(_X10 + 5216);
          __asm { FMLA            D18, D7, V6.D[1] }
          _D6 = *(_QWORD *)(_X10 + 5232);
          __asm { FMLA            D18, D6, V5.D[1] }
          _D5 = *(_QWORD *)(_X10 + 5248);
          __asm { FMLA            D18, D5, V4.D[1] }
          _D4 = *(_QWORD *)(_X10 + 5264);
          __asm { FMLA            D18, D4, V3.D[1] }
          _D3 = *(_QWORD *)(_X10 + 5280);
          __asm { FMLA            D18, D3, V2.D[1] }
          v226 = *(double *)(a1 + 64) * (_D18 + *(double *)(_X10 + 5288) * *(double *)(_X10 + 5288));
          *(double *)(_X10 + 5296) = v226;
          v179 = v179 + v226;
        }
        _X10 += 5336;
      }
      while (_X10 != v206);
      v134 = (double *)a2[64];
    }
LABEL_112:
    v134[3] = v179 * 0.5;
    v229 = *(_QWORD *)(a1 + 992);
    v230 = *(_QWORD *)(a1 + 1000);
    v231 = 0.0;
    if (v229 == v230)
    {
      v233 = 0.0;
    }
    else if (*(_BYTE *)(a1 + 1875))
    {
      v232 = v230 - v229 - 216;
      v233 = 0.0;
      if (v232 < 0xD8)
        goto LABEL_143;
      v234 = v232 / 0xD8 + 1;
      v235 = (double *)(v229 + 392);
      v236 = v234 & 0x3FFFFFFFFFFFFFELL;
      do
      {
        v233 = v233 + *(v235 - 27) + *v235;
        v235 += 54;
        v236 -= 2;
      }
      while (v236);
      v229 += 216 * (v234 & 0x3FFFFFFFFFFFFFELL);
      if (v234 != (v234 & 0x3FFFFFFFFFFFFFELL))
      {
LABEL_143:
        do
        {
          v233 = v233 + *(double *)(v229 + 176);
          v229 += 216;
        }
        while (v229 != v230);
      }
    }
    else
    {
      v233 = 0.0;
      do
      {
        if (*(_BYTE *)(v229 + 184))
        {
          *(_OWORD *)(v229 + 160) = *(_OWORD *)(v229 + 144);
          v265 = *(float64x2_t *)(v229 + 160);
          _D1 = v265.f64[1];
          __asm { FMLA            D0, D1, V2.D[1] }
          v239 = *(double *)(a1 + 88);
          v240 = *(double *)(a1 + 96) * (*(double *)(a1 + 80) * _D0);
          v241 = v240 + 1.0;
          v242 = v239 * log1p(v240);
          *(long double *)(v229 + 176) = v242;
          *(float64x2_t *)(v229 + 160) = vmulq_n_f64(v265, sqrt(1.0 / v241));
          v233 = v233 + v242;
        }
        v229 += 216;
      }
      while (v229 != v230);
      v134 = (double *)a2[64];
    }
    v134[4] = v233 * 0.5;
    v243 = *(_QWORD *)(a1 + 1016);
    v244 = *(_QWORD *)(a1 + 1024);
    if (v243 == v244)
      goto LABEL_139;
    if (!*(_BYTE *)(a1 + 1875))
    {
      v231 = 0.0;
      do
      {
        if (*(_BYTE *)(v243 + 856))
        {
          v247 = *(_OWORD *)(v243 + 768);
          *(_OWORD *)(v243 + 800) = *(_OWORD *)(v243 + 752);
          *(_OWORD *)(v243 + 816) = v247;
          _Q2 = *(_OWORD *)(v243 + 800);
          *(_OWORD *)(v243 + 832) = *(_OWORD *)(v243 + 784);
          _D5 = *((_QWORD *)&_Q2 + 1);
          __asm { FMLA            D4, D5, V2.D[1] }
          *(_QWORD *)&_Q2 = *(_QWORD *)(v243 + 824);
          __asm { FMLA            D4, D2, V3.D[1] }
          *(_QWORD *)&_Q2 = *(_QWORD *)(v243 + 840);
          __asm { FMLA            D4, D2, V1.D[1] }
          *(double *)&v247 = *(double *)(a1 + 112) * _D4;
          *(_QWORD *)(v243 + 848) = v247;
          v231 = v231 + *(double *)&v247;
        }
        v243 += 888;
      }
      while (v243 != v244);
      v134 = (double *)a2[64];
      goto LABEL_139;
    }
    v245 = v244 - v243 - 888;
    v231 = 0.0;
    if (v245 >= 0x378)
    {
      v253 = v245 / 0x378 + 1;
      v246 = v243 + 888 * (v253 & 0xFFFFFFFFFFFFFELL);
      v254 = v253 & 0xFFFFFFFFFFFFFELL;
      do
      {
        v231 = v231 + *(double *)(v243 + 848) + *(double *)(v243 + 1736);
        v243 += 1776;
        v254 -= 2;
      }
      while (v254);
      if (v253 == (v253 & 0xFFFFFFFFFFFFFELL))
        goto LABEL_139;
    }
    else
    {
      v246 = *(_QWORD *)(a1 + 1016);
    }
    do
    {
      v231 = v231 + *(double *)(v246 + 848);
      v246 += 888;
    }
    while (v246 != v244);
LABEL_139:
    v162 = v231 * 0.5;
    goto LABEL_140;
  }
LABEL_22:
  v24 = (double *)(a1 + 8);
  v25 = (_QWORD *)(a1 + 120);
  v266 = (_QWORD *)(a1 + 120);
  v267 = (double *)(a1 + 8);
  v26 = *(_QWORD *)(a1 + 896);
  v27 = *(_QWORD *)(a1 + 904);
  v28 = 0.0;
  v29 = 0.0;
  if (v26 != v27)
  {
    do
    {
      while (1)
      {
        v30 = (__int128 *)(v26 + 344);
        v31 = sub_20F4AFF88((char *)(v26 + 8), (float64x2_t **)(v26 + 208), v26 + 344);
        *(_BYTE *)(v26 + 472) = v31;
        if (v31)
          break;
        *(_QWORD *)(v26 + 464) = 0;
        v26 += 504;
        if (v26 == v27)
          goto LABEL_29;
      }
      v32 = *(_QWORD *)(v26 + 480);
      if (v32)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v32 + 24))(v32, v26 + 344);
      _Q1 = *(_OWORD *)(v26 + 408);
      v33 = *(_OWORD *)(v26 + 424);
      _Q3 = *(_OWORD *)(v26 + 392);
      *(_OWORD *)(v26 + 288) = _Q1;
      *(_OWORD *)(v26 + 304) = v33;
      _Q2 = *(float64x2_t *)(v26 + 424);
      *(_OWORD *)(v26 + 320) = *(_OWORD *)(v26 + 440);
      *(_QWORD *)(v26 + 336) = *(_QWORD *)(v26 + 456);
      v36 = *(_OWORD *)(v26 + 360);
      _Q5 = *v30;
      _V7.D[1] = *((_QWORD *)&v36 + 1);
      *(_OWORD *)(v26 + 224) = *v30;
      *(_OWORD *)(v26 + 240) = v36;
      _Q4 = *(_OWORD *)(v26 + 376);
      v4 = *(float64x2_t *)(v26 + 392);
      *(_OWORD *)(v26 + 256) = _Q4;
      *(float64x2_t *)(v26 + 272) = v4;
      _Q6 = *(float64x2_t *)(v26 + 440);
      _D17 = *((_QWORD *)&_Q5 + 1);
      __asm { FMLA            D16, D17, V5.D[1] }
      *(_QWORD *)&_Q5 = _V7.D[1];
      __asm { FMLA            D16, D5, V7.D[1] }
      _D5 = *((double *)&_Q4 + 1);
      __asm { FMLA            D16, D5, V4.D[1] }
      _D4 = *((double *)&_Q3 + 1);
      __asm { FMLA            D16, D4, V3.D[1] }
      _D3 = *((double *)&_Q1 + 1);
      __asm { FMLA            D16, D3, V1.D[1] }
      *(float64_t *)&_Q1 = _Q2.f64[1];
      __asm { FMLA            D16, D1, V2.D[1] }
      *(float64_t *)&_Q1 = _Q6.f64[1];
      __asm { FMLA            D16, D1, V6.D[1] }
      v5 = *(double *)(a1 + 16);
      v4.f64[0] = v5 * (_D16 + *(double *)(v26 + 456) * *(double *)(v26 + 456));
      *(float64_t *)(v26 + 464) = v4.f64[0];
      v29 = v29 + v4.f64[0];
      v26 += 504;
    }
    while (v26 != v27);
LABEL_29:
    v25 = v266;
    v24 = v267;
  }
  v52 = (double *)a2[64];
  *v52 = v29 * 0.5;
  v53 = (int8x16_t *)v25[100];
  v54 = (int8x16_t *)v25[101];
  if (v53 != v54)
  {
    v55 = v53 + 16;
    v28 = 0.0;
    do
    {
      while (!v55[-9].i64[1])
      {
        v55[-1].i8[8] = 0;
        v55[-1].i64[0] = 0;
        v56 = &v55[1].i64[1];
        v55 = (int8x16_t *)((char *)v55 + 280);
        if (v56 == (uint64_t *)v54)
          goto LABEL_37;
      }
      v57 = v55[-8].i64[1];
      v4.f64[0] = *(float64_t *)(v57 + 48);
      v58 = *(float64x2_t *)(v57 + 32);
      _D2 = *(double *)(v57 + 72);
      v60 = *(float64x2_t *)(v57 + 56);
      _D4 = *(double *)(v57 + 96);
      v62 = *(float64x2_t *)(v57 + 80);
      *(_QWORD *)&_Q6.f64[0] = v55[-14].i64[1];
      _Q7 = *(float64x2_t *)((char *)&v55[-15] + 8);
      v64 = *(double *)v55[-12].i64;
      _Q17 = (float64x2_t)v55[-13];
      v66 = *(double *)&v55[-11].i64[1];
      _Q19 = *(float64x2_t *)((char *)&v55[-12] + 8);
      v68 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v58, _Q7.f64[0]), v60, _Q17.f64[0]), v62, _Q19.f64[0]);
      v69 = vmlad_n_f64(vmlad_n_f64(v4.f64[0] * _Q7.f64[0], _D2, _Q17.f64[0]), _D4, _Q19.f64[0]);
      v70 = vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(v58, _Q7, 1), v60, _Q17, 1), v62, _Q19, 1);
      __asm
      {
        FMLA            D7, D2, V17.D[1]
        FMLA            D7, D4, V19.D[1]
      }
      v269 = v69;
      v268 = v68;
      v271 = _Q7.f64[0];
      v270 = v70;
      v272 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v58, _Q6.f64[0]), v60, v64), v62, v66);
      v273 = vmulq_f64(v4, _Q6).f64[0] + _D2 * v64 + _D4 * v66;
      v275 = 0;
      v274 = 0uLL;
      sub_20E9733B8(&v268, v274.f64);
      v71 = v55 - 4;
      v72 = v274;
      v55[-3].i64[0] = v275;
      v55[-4] = (int8x16_t)v72;
      v72.f64[0] = *(float64_t *)(v57 + 120);
      *(_QWORD *)&v73.f64[0] = v55[-9].i64[0];
      *(float64x2_t *)((char *)&v55[-3] + 8) = vsubq_f64(*(float64x2_t *)(v57 + 104), (float64x2_t)v55[-10]);
      v55[-2].i64[1] = *(_OWORD *)&vsubq_f64(v72, v73);
      v74 = (float64x2_t *)v55[-9].i64[1];
      v4 = vmulq_f64((float64x2_t)v55[-2], v74[3]);
      v75 = (int8x16_t)vmulq_f64((float64x2_t)v55[-3], v74[2]);
      v76 = (int8x16_t)vmulq_f64((float64x2_t)v55[-4], v74[1]);
      v55[-4] = v76;
      v55[-3] = v75;
      v55[-2] = (int8x16_t)v4;
      v55[-1].i8[8] = 1;
      if (v55->i64[0])
      {
        (*(void (**)(uint64_t, int8x16_t *))(*(_QWORD *)v55->i64[0] + 24))(v55->i64[0], v55 - 4);
        v75 = v55[-3];
        v4 = (float64x2_t)v55[-2];
        v76 = *v71;
      }
      _D3 = *(double *)vextq_s8((int8x16_t)v4, (int8x16_t)v4, 8uLL).i64;
      _D4 = *(double *)vextq_s8(v75, v75, 8uLL).i64;
      _D5 = *(double *)vextq_s8(v76, v76, 8uLL).i64;
      v77 = v55 - 7;
      v78 = v55[-3];
      *v77 = *v71;
      v77[1] = v78;
      _Q6 = (float64x2_t)v55[-2];
      v77[2] = (int8x16_t)_Q6;
      _Q2.f64[1] = _D5;
      _Q2.f64[0] = vmulq_f64(_Q2, _Q2).f64[0] + _D5 * _D5;
      v79 = _Q2.f64[0] + *(double *)v75.i64 * *(double *)v75.i64 + _D4 * _D4 + v4.f64[0] * v4.f64[0] + _D3 * _D3;
      v5 = v24[3];
      v80 = v5 * v79;
      *(double *)v55[-1].i64 = v80;
      v28 = v28 + v80;
      v81 = &v55[1].i64[1];
      v55 = (int8x16_t *)((char *)v55 + 280);
    }
    while (v81 != (uint64_t *)v54);
LABEL_37:
    v52 = (double *)a2[64];
    v25 = v266;
    v24 = v267;
  }
  v52[1] = v28 * 0.5;
  v82 = v25[103];
  v83 = v25[104];
  if (v82 == v83)
  {
    v84 = 0.0;
  }
  else
  {
    v84 = 0.0;
    do
    {
      while (1)
      {
        v85 = (_OWORD *)(v82 + 7856);
        v86 = sub_20F4B0BC8();
        *(_BYTE *)(v82 + 7984) = v86;
        if (v86)
          break;
        *(_QWORD *)(v82 + 7976) = 0;
        v82 += 8016;
        if (v82 == v83)
          goto LABEL_45;
      }
      _X8 = v82 + 24024;
      __asm { PRFM            #0, [X8] }
      v89 = *(_QWORD *)(v82 + 7992);
      if (v89)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v89 + 24))(v89, v82 + 7856);
      _X8 = v82 + 23888;
      v91 = *(_OWORD *)(v82 + 7936);
      *(_OWORD *)(v82 + 7800) = *(_OWORD *)(v82 + 7920);
      *(_OWORD *)(v82 + 7816) = v91;
      _Q2 = *(float64x2_t *)(v82 + 7936);
      *(_OWORD *)(v82 + 7832) = *(_OWORD *)(v82 + 7952);
      *(_QWORD *)(v82 + 7848) = *(_QWORD *)(v82 + 7968);
      v92 = *(_OWORD *)(v82 + 7872);
      *(_OWORD *)(v82 + 7736) = *v85;
      *(_OWORD *)(v82 + 7752) = v92;
      v93 = *(_OWORD *)(v82 + 7904);
      *(_OWORD *)(v82 + 7768) = *(_OWORD *)(v82 + 7888);
      *(_OWORD *)(v82 + 7784) = v93;
      __asm { PRFM            #0, [X8] }
      _Q6 = *(float64x2_t *)(v82 + 7872);
      _Q7 = *v85;
      _D17 = *(_QWORD *)(v82 + 7864);
      __asm { FMLA            D16, D17, V7.D[1] }
      *(float64_t *)&_Q7 = _Q6.f64[1];
      __asm { FMLA            D16, D7, V6.D[1] }
      _Q6.f64[0] = *(float64_t *)(v82 + 7896);
      __asm { FMLA            D16, D6, V5.D[1] }
      _D5 = *(double *)(v82 + 7912);
      __asm { FMLA            D16, D5, V4.D[1] }
      _D4 = *(double *)(v82 + 7928);
      __asm { FMLA            D16, D4, V3.D[1] }
      _D3 = _Q2.f64[1];
      __asm { FMLA            D16, D3, V2.D[1] }
      _Q2.f64[0] = *(float64_t *)(v82 + 7960);
      __asm { FMLA            D16, D2, V1.D[1] }
      v5 = v24[5];
      v104 = v5 * (_D16 + *(double *)(v82 + 7968) * *(double *)(v82 + 7968));
      *(double *)(v82 + 7976) = v104;
      v84 = v84 + v104;
      v82 += 8016;
    }
    while (v82 != v83);
LABEL_45:
    v52 = (double *)a2[64];
    v24 = v267;
  }
  v52[2] = v84 * 0.5;
  v277 = *(_BYTE *)(a1 + 1875);
  v276 = 0.0;
  v124 = v266[106];
  v125 = v266[107];
  *(_QWORD *)&v268.f64[0] = &v277;
  *(_QWORD *)&v268.f64[1] = v24 + 6;
  v269 = COERCE_DOUBLE(&v266);
  *(_QWORD *)&v270.f64[0] = &v276;
  sub_20F4D78F4(&v274, v124, v125, (uint64_t)&v268, v84 * 0.5, v5, _Q2.f64[0], _D3, _D4, _D5, _Q6);
  v133 = v276 * 0.5;
  v134 = (double *)a2[64];
  v134[3] = v276 * 0.5;
  v135 = v266;
  v136 = v266[109];
  v137 = v266[110];
  v138 = 0.0;
  v139 = 0.0;
  if (v136 != v137)
  {
    v140 = v267;
    do
    {
      while (1)
      {
        v141 = sub_20FC79C54(v136 + 8, (uint64_t *)(v136 + 56), v136 + 160, v133, v126.f64[0], v127, v128, v129, v130, v131, v132);
        *(_BYTE *)(v136 + 184) = v141;
        if (v141)
          break;
        *(_QWORD *)(v136 + 176) = 0;
        v136 += 216;
        if (v136 == v137)
          goto LABEL_58;
      }
      v142 = *(_QWORD *)(v136 + 192);
      if (v142)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v142 + 24))(v142, v136 + 160);
      *(_OWORD *)(v136 + 144) = *(_OWORD *)(v136 + 160);
      v264 = *(float64x2_t *)(v136 + 160);
      _D1 = v264.f64[1];
      __asm { FMLA            D0, D1, V2.D[1] }
      v145 = v140[10];
      v146 = v140[11] * (v140[9] * _D0);
      v147 = v146 + 1.0;
      v133 = v145 * log1p(v146);
      *(double *)(v136 + 176) = v133;
      v127 = v264.f64[0];
      v126 = vmulq_n_f64(v264, sqrt(1.0 / v147));
      *(float64x2_t *)(v136 + 160) = v126;
      v139 = v139 + v133;
      v136 += 216;
    }
    while (v136 != v137);
LABEL_58:
    v134 = (double *)a2[64];
    v135 = v266;
  }
  v134[4] = v139 * 0.5;
  v148 = v135[112];
  v149 = v135[113];
  if (v148 != v149)
  {
    v138 = 0.0;
    v150 = v267;
    do
    {
      while (1)
      {
        v151 = (_OWORD *)(v148 + 800);
        v152 = sub_20F3E115C(v148 + 8, (_QWORD *)(v148 + 736), (float64x2_t *)(v148 + 800));
        *(_BYTE *)(v148 + 856) = v152;
        if (v152)
          break;
        *(_QWORD *)(v148 + 848) = 0;
        v148 += 888;
        if (v148 == v149)
          goto LABEL_66;
      }
      v153 = *(_QWORD *)(v148 + 864);
      if (v153)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v153 + 24))(v153, v148 + 800);
      v154 = *(_OWORD *)(v148 + 816);
      *(_OWORD *)(v148 + 752) = *v151;
      *(_OWORD *)(v148 + 768) = v154;
      _Q2 = *v151;
      _Q1 = *(_OWORD *)(v148 + 816);
      *(_OWORD *)(v148 + 784) = *(_OWORD *)(v148 + 832);
      _D4 = *((_QWORD *)&_Q2 + 1);
      __asm { FMLA            D3, D4, V2.D[1] }
      *(_QWORD *)&_Q2 = *((_QWORD *)&_Q1 + 1);
      __asm { FMLA            D3, D2, V1.D[1] }
      *(_QWORD *)&_Q1 = *(_QWORD *)(v148 + 840);
      __asm { FMLA            D3, D1, V0.D[1] }
      v161 = v150[13] * _D3;
      *(double *)(v148 + 848) = v161;
      v138 = v138 + v161;
      v148 += 888;
    }
    while (v148 != v149);
LABEL_66:
    v134 = (double *)a2[64];
  }
  v162 = v138 * 0.5;
LABEL_140:
  v134[5] = v162;
  *(_WORD *)(a1 + 1875) = 257;
  v255 = (*(double (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
  v256 = (double *)a2[64];
  v257 = *v256;
  v258 = v256[1];
  v259 = v256[2];
  v260 = v256[3];
  v261 = v256[4];
  v262 = v256[5];
  kdebug_trace();
  return v255 + v257 + v258 + v259 + v260 + v261 + v262;
}

void sub_20F7C0EC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  sub_20EDB42B8((uint64_t)&a17);
  _Unwind_Resume(a1);
}

void sub_20F7C0ED4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  sub_20EDB42B8((uint64_t)&a17);
  _Unwind_Resume(a1);
}

void sub_20F7C0EEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  sub_20EDB42B8((uint64_t)&a17);
  _Unwind_Resume(a1);
}

void sub_20F7C0F00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  sub_20EDB42B8((uint64_t)&a17);
  _Unwind_Resume(a1);
}

void sub_20F7C0F14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  sub_20EDB42B8((uint64_t)&a17);
  _Unwind_Resume(a1);
}

void sub_20F7C0F28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  sub_20EDB42B8((uint64_t)&a17);
  _Unwind_Resume(a1);
}

void sub_20F7C0F3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  sub_20EDB42B8((uint64_t)&a17);
  _Unwind_Resume(a1);
}

void sub_20F7C0F50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  sub_20EDB42B8((uint64_t)&a17);
  _Unwind_Resume(a1);
}

double *sub_20F7C0F64(uint64_t a1, double *a2, double *a3)
{
  unint64_t v6;
  double *v7;
  double v8;
  __n128 v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  float64x2_t v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  float64x2_t v22;
  __n128 v23;
  __n128 v24;
  double v25;
  double v26;
  float64x2_t v27;
  double v28;
  double v29;
  float64x2_t v30;
  uint64_t v31;
  double *result;
  uint64_t v33;
  double v34;
  uint64_t v35;
  _QWORD v36[64];
  double *v37;
  __int128 v38;
  uint64_t v39;

  v37 = (double *)v36;
  v38 = xmmword_210378040;
  v6 = 0xEFBEFBEFBEFBEFBFLL * ((uint64_t)(*(_QWORD *)(a1 + 904) - *(_QWORD *)(a1 + 896)) >> 3)
     - 0x5075075075075075 * ((uint64_t)(*(_QWORD *)(a1 + 928) - *(_QWORD *)(a1 + 920)) >> 3)
     + 0x2F028E0D4911E25DLL * ((uint64_t)(*(_QWORD *)(a1 + 952) - *(_QWORD *)(a1 + 944)) >> 4)
     + 0x4515E08719B71393 * ((uint64_t)(*(_QWORD *)(a1 + 976) - *(_QWORD *)(a1 + 968)) >> 3)
     - 0x7B425ED097B425EDLL * ((uint64_t)(*(_QWORD *)(a1 + 1000) - *(_QWORD *)(a1 + 992)) >> 3)
     - 0x4E6A171024E6A171 * ((uint64_t)(*(_QWORD *)(a1 + 1024) - *(_QWORD *)(a1 + 1016)) >> 3);
  if (v6 >= 0x41)
  {
    if (v6 <= 0x80)
      v6 = 128;
    *(_QWORD *)&v38 = v6;
    v7 = (double *)operator new[]();
    if (v37 != (double *)v36 && v37)
      MEMORY[0x212BC6368]();
    v37 = v7;
  }
  v8 = *a3;
  *((_QWORD *)&v38 + 1) = 0;
  if (*(_BYTE *)(a1 + 1876))
  {
    v39 = a1 + 120;
    sub_20F62BFC8((uint64_t)&v39, v36);
  }
  else
  {
    v39 = a1 + 120;
    sub_20F62C1FC((uint64_t)&v39, v36);
  }
  if (*(_BYTE *)(a1 + 1876))
  {
    v39 = a1 + 120;
    sub_20F62CB00((uint64_t)&v39, v36);
  }
  else
  {
    v39 = a1 + 120;
    sub_20F62CCF4((uint64_t)&v39, v36, v9, v10, v11, v12, v13, v14, v15);
  }
  if (*(_BYTE *)(a1 + 1876))
  {
    v39 = a1 + 120;
    sub_20F62D074((uint64_t)&v39, v36);
  }
  else
  {
    v39 = a1 + 120;
    sub_20F62D2BC((uint64_t)&v39, v36);
  }
  if (*(_BYTE *)(a1 + 1876))
  {
    v39 = a1 + 120;
    sub_20F62D57C((uint64_t)&v39, v36);
  }
  else
  {
    v39 = a1 + 120;
    sub_20F62D7C4((uint64_t)&v39, v36, v16, v17, v18, v19, v20, v21, v22);
  }
  if (*(_BYTE *)(a1 + 1876))
  {
    v39 = a1 + 120;
    sub_20F62DC70((uint64_t)&v39, v36);
  }
  else
  {
    v39 = a1 + 120;
    sub_20F721894((uint64_t)&v39, v36, v23, v24, v25, v26, v27, v28, v29, v30);
  }
  if (*(_BYTE *)(a1 + 1876))
  {
    v39 = a1 + 120;
    sub_20F62E070((uint64_t)&v39, v36);
  }
  else
  {
    v39 = a1 + 120;
    sub_20F62E274((uint64_t)&v39, v36);
  }
  v31 = *((_QWORD *)&v38 + 1);
  result = v37;
  if (!*((_QWORD *)&v38 + 1))
  {
    *a2 = 1.0;
    *((_QWORD *)&v38 + 1) = 0;
    if (result == (double *)v36)
      return result;
    goto LABEL_34;
  }
  v33 = *((_QWORD *)&v38 + 1) >> 1;
  sub_20E8FB210(v37, &v37[*((_QWORD *)&v38 + 1) >> 1], &v37[*((_QWORD *)&v38 + 1)]);
  result = v37;
  v34 = v37[v33];
  if ((v31 & 1) == 0)
  {
    v35 = v33 - 1;
    if (v35 != v31)
    {
      sub_20E8FB210(v37, &v37[v35], &v37[v31]);
      result = v37;
    }
    v34 = (v34 + result[v35]) * 0.5;
  }
  *a2 = v8 * sqrt(v34);
  *((_QWORD *)&v38 + 1) = 0;
  if (result != (double *)v36)
  {
LABEL_34:
    if (result)
      return (double *)MEMORY[0x212BC6368](result, 0x1000C8000313F17);
  }
  return result;
}

void sub_20F7C12C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  unint64_t v10;

  STACK[0x210] = 0;
  v10 = STACK[0x200];
  if ((uint64_t *)STACK[0x200] != &a9)
  {
    if (v10)
      MEMORY[0x212BC6368](v10, 0x1000C8000313F17);
  }
  _Unwind_Resume(a1);
}

uint64_t *sub_20F7C1300@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void *__p;
  __int128 v46;

  __p = operator new(0x28uLL);
  v46 = xmmword_2102DCA20;
  strcpy((char *)__p, "OfflineMapOptimizationConfig parameters");
  sub_20E8B30B4(a2, (__int128 *)&__p, 180, 160);
  if (SHIBYTE(v46) < 0)
    operator delete(__p);
  __p = (void *)nullsub_1(a2);
  v4 = sub_20EAA14D8((_BYTE *)(a1 + 1));
  sub_20E8B2F9C((uint64_t *)&__p, "OfflineMapOptimizationConfig.enable_rematching", v4, "Enable track rematching in offline map optimization.");
  __p = (void *)nullsub_1(a2);
  v5 = sub_20EAA14D8((_BYTE *)(a1 + 2));
  sub_20E8B2F9C((uint64_t *)&__p, "OfflineMapOptimizationConfig.rebuild_indices_after_rematch", v5, "Rebuild ml and freak feature index after track rematching.");
  __p = (void *)nullsub_1(a2);
  v6 = sub_20EAA14D8((_BYTE *)(a1 + 3));
  sub_20E8B2F9C((uint64_t *)&__p, "OfflineMapOptimizationConfig.rebuild_reloc_index_after_rematch", v6, "Rebuild ml feature index after track rematching if not rebuilt already.");
  __p = (void *)nullsub_1(a2);
  v7 = sub_20EAA1CB0((unint64_t *)(a1 + 16));
  sub_20E8B2F9C((uint64_t *)&__p, "OfflineMapOptimizationConfig.max_ba_steps", v7, "Maximum number of BA steps in offline map optimization. Default: 30");
  __p = (void *)nullsub_1(a2);
  v8 = sub_20EA9DB90((double *)(a1 + 48));
  sub_20E8B2F9C((uint64_t *)&__p, "OfflineMapOptimizationConfig.track_scoring_track_length_weight", v8, "Track pruning weight.");
  __p = (void *)nullsub_1(a2);
  v9 = sub_20EA9DB90((double *)(a1 + 56));
  sub_20E8B2F9C((uint64_t *)&__p, "OfflineMapOptimizationConfig.track_scoring_parallax_weight", v9, "Track pruning weight.");
  __p = (void *)nullsub_1(a2);
  v10 = sub_20EA9DB90((double *)(a1 + 64));
  sub_20E8B2F9C((uint64_t *)&__p, "OfflineMapOptimizationConfig.track_scoring_loop_length_weight", v10, "Track pruning weight.");
  __p = (void *)nullsub_1(a2);
  v11 = sub_20EA9DB90((double *)(a1 + 72));
  sub_20E8B2F9C((uint64_t *)&__p, "OfflineMapOptimizationConfig.track_pruning_ratio", v11, "Track pruning ratio ([0, 1] ratio of tracks to erase).");
  __p = (void *)nullsub_1(a2);
  v12 = sub_20EAA1CB0((unint64_t *)(a1 + 32));
  sub_20E8B2F9C((uint64_t *)&__p, "OfflineMapOptimizationConfig.mode", v12, "Offline map optimization mode (0, 1 or 2 to correspond with vanilla, Masolino and Masolino 2).");
  __p = (void *)nullsub_1(a2);
  v13 = sub_20EAA1CB0((unint64_t *)(a1 + 40));
  sub_20E8B2F9C((uint64_t *)&__p, "OfflineMapOptimizationConfig.minimum_track_length", v13, "Minimum track length in the offline map optimization (2 by default).");
  __p = (void *)nullsub_1(a2);
  v14 = sub_20EAA1CB0((unint64_t *)(a1 + 24));
  sub_20E8B2F9C((uint64_t *)&__p, "OfflineMapOptimizationConfig.num_ba_reruns", v14, "Number of BA re-runs in offline map optimization. Default: 1");
  __p = (void *)nullsub_1(a2);
  v15 = sub_20EAA1CB0((unint64_t *)(a1 + 144));
  sub_20E8B2F9C((uint64_t *)&__p, "OfflineMapOptimizationConfig.retain_weak_keyframes", v15, "Maximum number of weak keyframes in map optimization mode. Default: 0 (disabled)");
  __p = (void *)nullsub_1(a2);
  v16 = sub_20EAA14D8((_BYTE *)(a1 + 4));
  sub_20E8B2F9C((uint64_t *)&__p, "OfflineMapOptimizationConfig.enable_pre_triangulation_filtering", v16, "Pre-BA triangulation filtering before running the first BA");
  __p = (void *)nullsub_1(a2);
  v17 = sub_20EAA14D8((_BYTE *)(a1 + 10));
  sub_20E8B2F9C((uint64_t *)&__p, "OfflineMapOptimizationConfig.enable_post_triangulation_filtering", v17, "Post-BA triangulation filtering after running each BA");
  __p = (void *)nullsub_1(a2);
  v18 = sub_20EAA14D8((_BYTE *)(a1 + 11));
  sub_20E8B2F9C((uint64_t *)&__p, "OfflineMapOptimizationConfig.enable_refinement", v18, "Run an additional BA using only inliers for refinement");
  __p = (void *)nullsub_1(a2);
  v19 = sub_20EAA14D8((_BYTE *)(a1 + 12));
  sub_20E8B2F9C((uint64_t *)&__p, "OfflineMapOptimizationConfig.keep_unit_track", v19, "Keep unit track in the database");
  __p = (void *)nullsub_1(a2);
  v20 = sub_20EAA14D8((_BYTE *)(a1 + 8));
  sub_20E8B2F9C((uint64_t *)&__p, "OfflineMapOptimizationConfig.enable_post_structure_covariance_processing", v20, "Option to enable post optimization structure covariance update.");
  __p = (void *)nullsub_1(a2);
  v21 = sub_20EAA14D8((_BYTE *)a1);
  sub_20E8B2F9C((uint64_t *)&__p, "OfflineMapOptimizationConfig.offline_optimize_map_when_save", v21, "Optimize the map using global BA when saving it.");
  __p = (void *)nullsub_1(a2);
  v22 = sub_20EAA14D8((_BYTE *)(a1 + 5));
  sub_20E8B2F9C((uint64_t *)&__p, "OfflineMapOptimizationConfig.use_preintegrated_imu_factor", v22, "Use preintegrated IMU Factor to perform map optimization");
  __p = (void *)nullsub_1(a2);
  v23 = sub_20EAA14D8((_BYTE *)(a1 + 136));
  sub_20E8B2F9C((uint64_t *)&__p, "OfflineMapOptimizationConfig.use_reconstructed_odometry", v23, "Reconstruct odometry only trajectory for optimized frame-rate trajctory (otherwise use recorded VIO trajectory that may contain relocalizations).");
  __p = (void *)nullsub_1(a2);
  v24 = sub_20EAA14D8((_BYTE *)(a1 + 137));
  sub_20E8B2F9C((uint64_t *)&__p, "OfflineMapOptimizationConfig.save_high_frequency_trajs", v24, "Generate high sample rate trajectories after optimizing the map (takes some time).");
  __p = (void *)nullsub_1(a2);
  v25 = sub_20EAA1CB0((unint64_t *)(a1 + 152));
  sub_20E8B2F9C((uint64_t *)&__p, "OfflineMapOptimizationConfig.maximum_optimized_trajectory_size", v25, "Maximum number of poses in the optimized trajectory (only takes effect if --offline_optimize_map_when_save is set). Default: 3000");
  __p = (void *)nullsub_1(a2);
  v26 = sub_20EA9DB90((double *)(a1 + 80));
  sub_20E8B2F9C((uint64_t *)&__p, "OfflineMapOptimizationConfig.retriangulation_inlier_threshold_in_std", v26, "Inlier threshold override for re-triangulation.");
  __p = (void *)nullsub_1(a2);
  v27 = sub_20EAA1CB0((unint64_t *)(a1 + 88));
  sub_20E8B2F9C((uint64_t *)&__p, "OfflineMapOptimizationConfig.rematching_exclude_near_image_ids", v27, "Map tracking overrides for rematching (candidate near image exclusion).");
  __p = (void *)nullsub_1(a2);
  v28 = sub_20EA9DB90((double *)(a1 + 96));
  sub_20E8B2F9C((uint64_t *)&__p, "OfflineMapOptimizationConfig.rematching_view_distance_z_scaling", v28, "Map tracking overrides for rematching (candidate near image distance z scaling).");
  __p = (void *)nullsub_1(a2);
  v29 = sub_20EAA1CB0((unint64_t *)(a1 + 104));
  sub_20E8B2F9C((uint64_t *)&__p, "OfflineMapOptimizationConfig.rematching_num_nearest_keyframes", v29, "Map tracking overrides for rematching (number of nearest candidates for matching).");
  __p = (void *)nullsub_1(a2);
  v30 = sub_20EA9DB90((double *)(a1 + 112));
  sub_20E8B2F9C((uint64_t *)&__p, "OfflineMapOptimizationConfig.rematching_angle_threshold_deg", v30, "Map tracking overrides for rematching (candidate view angle threshold).");
  __p = (void *)nullsub_1(a2);
  v31 = sub_20EA9DB90((double *)(a1 + 120));
  sub_20E8B2F9C((uint64_t *)&__p, "OfflineMapOptimizationConfig.rematching_max_reprojection_error_in_std", v31, "Map tracking overrides for rematching (maximum reprojection error in std).");
  __p = (void *)nullsub_1(a2);
  v32 = sub_20EA9DB90((double *)(a1 + 128));
  sub_20E8B2F9C((uint64_t *)&__p, "OfflineMapOptimizationConfig.rematching_sampson_error_threshold", v32, "Map tracking overrides for rematching (sampson error threshold).");
  __p = (void *)nullsub_1(a2);
  v33 = sub_20EAA14D8((_BYTE *)(a1 + 160));
  sub_20E8B2F9C((uint64_t *)&__p, "OfflineMapOptimizationConfig.use_sparse_gba_solver", v33, "Use sparse solver for the final global BA (off by default).");
  __p = (void *)nullsub_1(a2);
  v34 = sub_20EAA14D8((_BYTE *)(a1 + 161));
  sub_20E8B2F9C((uint64_t *)&__p, "OfflineMapOptimizationConfig.enable_incremental_ba", v34, "Enable incremental BA.");
  __p = (void *)nullsub_1(a2);
  v35 = sub_20EAA14D8((_BYTE *)(a1 + 162));
  sub_20E8B2F9C((uint64_t *)&__p, "OfflineMapOptimizationConfig.use_IMU", v35, "Use IMU measurements within the optimization.");
  __p = (void *)nullsub_1(a2);
  v36 = sub_20EAA14D8((_BYTE *)(a1 + 6));
  sub_20E8B2F9C((uint64_t *)&__p, "OfflineMapOptimizationConfig.enable_pose_graph_factor", v36, "Flag to enable pose graph factor");
  __p = (void *)nullsub_1(a2);
  v37 = sub_20EAA14D8((_BYTE *)(a1 + 7));
  sub_20E8B2F9C((uint64_t *)&__p, "OfflineMapOptimizationConfig.enable_optimize_structure", v37, "Flag to enable structure optimization");
  __p = (void *)nullsub_1(a2);
  v38 = sub_20EAA14D8((_BYTE *)(a1 + 163));
  sub_20E8B2F9C((uint64_t *)&__p, "OfflineMapOptimizationConfig.estimate_extrinsics", v38, "Estimate camera rotation in the offline map optimization (false by default).");
  __p = (void *)nullsub_1(a2);
  v39 = sub_20EAA14D8((_BYTE *)(a1 + 164));
  sub_20E8B2F9C((uint64_t *)&__p, "OfflineMapOptimizationConfig.estimate_extrinsics_position", v39, "Estimate camera position in the offline map optimization when 'estimate_extrinsics' is true (false by default).");
  __p = (void *)nullsub_1(a2);
  v40 = sub_20EAA14D8((_BYTE *)(a1 + 165));
  sub_20E8B2F9C((uint64_t *)&__p, "OfflineMapOptimizationConfig.estimate_intrinsics", v40, "Estimate camera intrinsics in the offline map optimization (false by default).");
  __p = (void *)nullsub_1(a2);
  v41 = sub_20EAA14D8((_BYTE *)(a1 + 166));
  sub_20E8B2F9C((uint64_t *)&__p, "OfflineMapOptimizationConfig.estimate_distortions", v41, "Estimate camera lens distortion in the offline map optimization (false by default).");
  __p = (void *)nullsub_1(a2);
  v42 = sub_20EAA14D8((_BYTE *)(a1 + 167));
  sub_20E8B2F9C((uint64_t *)&__p, "OfflineMapOptimizationConfig.estimate_time_offset", v42, "Estimate camera-IMU time offset in the offline map optimization (false by default).");
  __p = (void *)nullsub_1(a2);
  v43 = sub_20EAA14D8((_BYTE *)(a1 + 13));
  return sub_20E8B2F9C((uint64_t *)&__p, "OfflineMapOptimizationConfig.rematch_only_same_session", v43, "rematch_only_same_session (false by default).");
}

void sub_20F7C1B00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;

  sub_20E869298(v15);
  _Unwind_Resume(a1);
}

uint64_t *sub_20F7C1C6C@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char __p[22];
  char v17;

  v17 = 21;
  strcpy(__p, "Pose graph parameters");
  sub_20E8B30B4(a2, (__int128 *)__p, 80, 40);
  if (v17 < 0)
    operator delete(*(void **)__p);
  *(_QWORD *)__p = nullsub_1(a2);
  v4 = sub_20EAA14D8((_BYTE *)a1);
  sub_20E8B2F9C((uint64_t *)__p, "PoseGraphConfig.use_pose_graph", v4, "Switch on/off pose graph at loop closure");
  *(_QWORD *)__p = nullsub_1(a2);
  v5 = sub_20EA9DCF0((unsigned int *)(a1 + 8));
  sub_20E8B2F9C((uint64_t *)__p, "PoseGraphConfig.max_iterations_per_frame", v5, "Maximum Gauss-Newton iterations to be taken by PG, in any single frame");
  *(_QWORD *)__p = nullsub_1(a2);
  v6 = sub_20EAA71FC((int *)(a1 + 4));
  sub_20E8B2F9C((uint64_t *)__p, "PoseGraphConfig.verbose", v6, "option to turn on verbose for pose graph");
  *(_QWORD *)__p = nullsub_1(a2);
  v7 = sub_20EA9DB90((double *)(a1 + 16));
  sub_20E8B2F9C((uint64_t *)__p, "PoseGraphConfig.orientation_residual_uncertainty_per_second", v7, "Heuristic of orientation uncertainty over time. This is used to approximate relative pose uncertainty for orientation part. Unit [rad/s]");
  *(_QWORD *)__p = nullsub_1(a2);
  v8 = sub_20EA9DB90((double *)(a1 + 24));
  sub_20E8B2F9C((uint64_t *)__p, "PoseGraphConfig.translation_residual_uncertainty_per_second", v8, "Heuristic of translation uncertainty over time. This is used to approximate relative pose uncertainty for translation part. Unit [m/s]");
  *(_QWORD *)__p = nullsub_1(a2);
  v9 = sub_20EA9DB90((double *)(a1 + 32));
  sub_20E8B2F9C((uint64_t *)__p, "PoseGraphConfig.gradient_tolerance", v9, "Tolerance on gradient of the error.");
  *(_QWORD *)__p = nullsub_1(a2);
  v10 = sub_20EA9DB90((double *)(a1 + 40));
  sub_20E8B2F9C((uint64_t *)__p, "PoseGraphConfig.parameter_tolerance", v10, "Tolerance on magnitude of the parameter updates.");
  *(_QWORD *)__p = nullsub_1(a2);
  v11 = sub_20EA9DB90((double *)(a1 + 48));
  sub_20E8B2F9C((uint64_t *)__p, "PoseGraphConfig.cost_tolerance", v11, "Tolerance on magnitude of change in the cost function.");
  *(_QWORD *)__p = nullsub_1(a2);
  v12 = sub_20EA9DB90((double *)(a1 + 56));
  sub_20E8B2F9C((uint64_t *)__p, "PoseGraphConfig.outlier_reloc_edge_normalized_error_threshold", v12, "Outlier normalized error threshold of relocalization edge.");
  *(_QWORD *)__p = nullsub_1(a2);
  v13 = sub_20EA9DB90((double *)(a1 + 64));
  sub_20E8B2F9C((uint64_t *)__p, "PoseGraphConfig.outlier_odometry_edge_normalized_error_threshold", v13, "Outlier normalized error threshold of odometry edge.");
  *(_QWORD *)__p = nullsub_1(a2);
  v14 = sub_20EA9DB90((double *)(a1 + 72));
  return sub_20E8B2F9C((uint64_t *)__p, "PoseGraphConfig.min_outlier_odometry_edge_error_ratio", v14, "Minimum ratio of outlier odometry edge error to the previous edge error.");
}

void sub_20F7C1EF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  uint64_t v14;

  sub_20E869298(v14);
  _Unwind_Resume(a1);
}

uint64_t sub_20F7C1F78(uint64_t a1)
{
  int v1;
  int v2;

  v1 = *(_DWORD *)(a1 + 16);
  v2 = *(_DWORD *)(a1 + 40);
  if (v1 == -1 && v2 == -1)
    return 0;
  if (v1 == -1 || v2 == -1)
  {
    sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/MapOptimization/src/PoseGraphEdgeUtil.cpp", 36, (uint64_t)"", 0, (uint64_t)"Invalid relocalization results", 30, (void (*)(void **))sub_21023DDB0);
    abort();
  }
  return 1;
}

void *sub_20F7C1FEC@<X0>(uint64_t a1@<X0>, __int128 *a2@<X1>, uint64_t a3@<X8>)
{
  __int128 v5;
  __int128 v6;
  int v7;
  int v8;
  BOOL v9;
  _BOOL4 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  void *result;
  __int128 v16;
  __int128 v17;

  v5 = *a2;
  v6 = *(_OWORD *)(a1 + 16);
  v7 = *(_DWORD *)(a1 + 4);
  v8 = *(_DWORD *)(a1 + 8);
  if (*(_BYTE *)(a1 + 160))
    v9 = *(_BYTE *)(a1 + 456) == 0;
  else
    v9 = 1;
  if (v9)
  {
    v16 = *(_OWORD *)(a1 + 16);
    v17 = *a2;
    v10 = sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/MapOptimization/src/PoseGraphEdgeUtil.cpp", 61, (uint64_t)"(edge.T_source_to_neighbor && edge.JtJ_source_to_neighbor)", 58, (uint64_t)"Edge must have transformation", 29, (void (*)(void **))sub_21023DDB0);
    v6 = v16;
    v5 = v17;
    if (v10)
      abort();
  }
  *(_OWORD *)a3 = v6;
  *(_DWORD *)(a3 + 16) = v8;
  *(_OWORD *)(a3 + 24) = v5;
  *(_DWORD *)(a3 + 40) = v7;
  v11 = *(_OWORD *)(a1 + 112);
  *(_OWORD *)(a3 + 112) = *(_OWORD *)(a1 + 96);
  *(_OWORD *)(a3 + 128) = v11;
  v12 = *(_OWORD *)(a1 + 144);
  *(_OWORD *)(a3 + 144) = *(_OWORD *)(a1 + 128);
  *(_OWORD *)(a3 + 160) = v12;
  v13 = *(_OWORD *)(a1 + 48);
  *(_OWORD *)(a3 + 48) = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(a3 + 64) = v13;
  v14 = *(_OWORD *)(a1 + 80);
  *(_OWORD *)(a3 + 80) = *(_OWORD *)(a1 + 64);
  *(_OWORD *)(a3 + 96) = v14;
  result = memcpy((void *)(a3 + 176), (const void *)(a1 + 168), 0x120uLL);
  *(_DWORD *)(a3 + 464) = *(_DWORD *)(a1 + 464);
  *(_BYTE *)(a3 + 468) = 0;
  return result;
}

uint64_t sub_20F7C20C8(uint64_t a1, int a2, uint64_t a3, unsigned int *a4)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;

  v4 = a1 + 24 * *a4;
  result = *(_QWORD *)(v4 + 16);
  v6 = *(_QWORD *)(v4 + 24);
  if (result != v6)
  {
    while (*(_DWORD *)(result + 4) != a2
         || *(_DWORD *)(result + 8) != *(_DWORD *)(a3 + 16)
         || *(_QWORD *)(result + 16) != *(_QWORD *)a3
         || *(_DWORD *)(result + 24) != *(_DWORD *)(a3 + 8))
    {
      result += 472;
      if (result == v6)
        return v6;
    }
  }
  return result;
}

_QWORD *sub_20F7C2138(_QWORD *result, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _OWORD *v8;
  _OWORD *v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  const void *v14;
  int v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _OWORD *v24;
  _OWORD *v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  const void *v30;
  int v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;

  v3 = result;
  v4 = result[2];
  v5 = result[3];
  if (v4 != v5)
  {
    while (*(_QWORD *)a2 != *(_QWORD *)(v4 + 16) || *(_DWORD *)(a2 + 8) != *(_DWORD *)(v4 + 24))
    {
      v4 += 472;
      if (v4 == v5)
        goto LABEL_25;
    }
  }
  if (v4 != v5)
  {
    if (v4 + 472 != v5)
    {
      while (1)
      {
        *(_OWORD *)v4 = *(_OWORD *)(v4 + 472);
        *(_OWORD *)(v4 + 12) = *(_OWORD *)(v4 + 484);
        v8 = (_OWORD *)(v4 + 32);
        v9 = (_OWORD *)(v4 + 504);
        if (*(unsigned __int8 *)(v4 + 160) == *(unsigned __int8 *)(v4 + 632))
          break;
        if (*(_BYTE *)(v4 + 160))
        {
          *(_BYTE *)(v4 + 160) = 0;
LABEL_17:
          result = (_QWORD *)(v4 + 168);
          v14 = (const void *)(v4 + 640);
          v15 = *(unsigned __int8 *)(v4 + 456);
          if (v15 == *(unsigned __int8 *)(v4 + 928))
            goto LABEL_18;
          goto LABEL_21;
        }
        v16 = *(_OWORD *)(v4 + 584);
        *(_OWORD *)(v4 + 96) = *(_OWORD *)(v4 + 568);
        *(_OWORD *)(v4 + 112) = v16;
        v17 = *(_OWORD *)(v4 + 616);
        *(_OWORD *)(v4 + 128) = *(_OWORD *)(v4 + 600);
        *(_OWORD *)(v4 + 144) = v17;
        v18 = *(_OWORD *)(v4 + 520);
        *v8 = *v9;
        *(_OWORD *)(v4 + 48) = v18;
        v19 = *(_OWORD *)(v4 + 552);
        *(_OWORD *)(v4 + 64) = *(_OWORD *)(v4 + 536);
        *(_OWORD *)(v4 + 80) = v19;
        *(_BYTE *)(v4 + 160) = 1;
        result = (_QWORD *)(v4 + 168);
        v14 = (const void *)(v4 + 640);
        v15 = *(unsigned __int8 *)(v4 + 456);
        if (v15 == *(unsigned __int8 *)(v4 + 928))
        {
LABEL_18:
          if (v15)
            result = memcpy(result, v14, 0x120uLL);
          goto LABEL_10;
        }
LABEL_21:
        if (v15)
        {
          *(_BYTE *)(v4 + 456) = 0;
        }
        else
        {
          result = memcpy(result, v14, 0x120uLL);
          *(_BYTE *)(v4 + 456) = 1;
        }
LABEL_10:
        *(_DWORD *)(v4 + 464) = *(_DWORD *)(v4 + 936);
        v6 = v4 + 472;
        v7 = v4 + 944;
        v4 += 472;
        if (v7 == v5)
          goto LABEL_24;
      }
      if (*(_BYTE *)(v4 + 160))
      {
        v10 = *(_OWORD *)(v4 + 584);
        *(_OWORD *)(v4 + 96) = *(_OWORD *)(v4 + 568);
        *(_OWORD *)(v4 + 112) = v10;
        v11 = *(_OWORD *)(v4 + 616);
        *(_OWORD *)(v4 + 128) = *(_OWORD *)(v4 + 600);
        *(_OWORD *)(v4 + 144) = v11;
        v12 = *(_OWORD *)(v4 + 520);
        *v8 = *v9;
        *(_OWORD *)(v4 + 48) = v12;
        v13 = *(_OWORD *)(v4 + 552);
        *(_OWORD *)(v4 + 64) = *(_OWORD *)(v4 + 536);
        *(_OWORD *)(v4 + 80) = v13;
        result = (_QWORD *)(v4 + 168);
        v14 = (const void *)(v4 + 640);
        v15 = *(unsigned __int8 *)(v4 + 456);
        if (v15 == *(unsigned __int8 *)(v4 + 928))
          goto LABEL_18;
        goto LABEL_21;
      }
      goto LABEL_17;
    }
    v6 = v4;
LABEL_24:
    v3[3] = v6;
  }
LABEL_25:
  v20 = v3[5];
  v21 = v3[6];
  if (v20 != v21)
  {
    while (*(_QWORD *)a2 != *(_QWORD *)(v20 + 16) || *(_DWORD *)(a2 + 8) != *(_DWORD *)(v20 + 24))
    {
      v20 += 472;
      if (v20 == v21)
        return result;
    }
  }
  if (v20 != v21)
  {
    if (v20 + 472 != v21)
    {
      while (1)
      {
        *(_OWORD *)v20 = *(_OWORD *)(v20 + 472);
        *(_OWORD *)(v20 + 12) = *(_OWORD *)(v20 + 484);
        v24 = (_OWORD *)(v20 + 32);
        v25 = (_OWORD *)(v20 + 504);
        if (*(unsigned __int8 *)(v20 + 160) == *(unsigned __int8 *)(v20 + 632))
          break;
        if (*(_BYTE *)(v20 + 160))
        {
          *(_BYTE *)(v20 + 160) = 0;
LABEL_42:
          result = (_QWORD *)(v20 + 168);
          v30 = (const void *)(v20 + 640);
          v31 = *(unsigned __int8 *)(v20 + 456);
          if (v31 != *(unsigned __int8 *)(v20 + 928))
            goto LABEL_33;
          goto LABEL_43;
        }
        v32 = *(_OWORD *)(v20 + 584);
        *(_OWORD *)(v20 + 96) = *(_OWORD *)(v20 + 568);
        *(_OWORD *)(v20 + 112) = v32;
        v33 = *(_OWORD *)(v20 + 616);
        *(_OWORD *)(v20 + 128) = *(_OWORD *)(v20 + 600);
        *(_OWORD *)(v20 + 144) = v33;
        v34 = *(_OWORD *)(v20 + 520);
        *v24 = *v25;
        *(_OWORD *)(v20 + 48) = v34;
        v35 = *(_OWORD *)(v20 + 552);
        *(_OWORD *)(v20 + 64) = *(_OWORD *)(v20 + 536);
        *(_OWORD *)(v20 + 80) = v35;
        *(_BYTE *)(v20 + 160) = 1;
        result = (_QWORD *)(v20 + 168);
        v30 = (const void *)(v20 + 640);
        v31 = *(unsigned __int8 *)(v20 + 456);
        if (v31 != *(unsigned __int8 *)(v20 + 928))
        {
LABEL_33:
          if (v31)
          {
            *(_BYTE *)(v20 + 456) = 0;
          }
          else
          {
            result = memcpy(result, v30, 0x120uLL);
            *(_BYTE *)(v20 + 456) = 1;
          }
          goto LABEL_35;
        }
LABEL_43:
        if (v31)
          result = memcpy(result, v30, 0x120uLL);
LABEL_35:
        *(_DWORD *)(v20 + 464) = *(_DWORD *)(v20 + 936);
        v22 = v20 + 472;
        v23 = v20 + 944;
        v20 += 472;
        if (v23 == v21)
          goto LABEL_49;
      }
      if (*(_BYTE *)(v20 + 160))
      {
        v26 = *(_OWORD *)(v20 + 584);
        *(_OWORD *)(v20 + 96) = *(_OWORD *)(v20 + 568);
        *(_OWORD *)(v20 + 112) = v26;
        v27 = *(_OWORD *)(v20 + 616);
        *(_OWORD *)(v20 + 128) = *(_OWORD *)(v20 + 600);
        *(_OWORD *)(v20 + 144) = v27;
        v28 = *(_OWORD *)(v20 + 520);
        *v24 = *v25;
        *(_OWORD *)(v20 + 48) = v28;
        v29 = *(_OWORD *)(v20 + 552);
        *(_OWORD *)(v20 + 64) = *(_OWORD *)(v20 + 536);
        *(_OWORD *)(v20 + 80) = v29;
        result = (_QWORD *)(v20 + 168);
        v30 = (const void *)(v20 + 640);
        v31 = *(unsigned __int8 *)(v20 + 456);
        if (v31 != *(unsigned __int8 *)(v20 + 928))
          goto LABEL_33;
        goto LABEL_43;
      }
      goto LABEL_42;
    }
    v22 = v20;
LABEL_49:
    v3[6] = v22;
  }
  return result;
}

uint64_t sub_20F7C2444(uint64_t *a1, uint64_t *a2)
{
  int8x8_t v2;
  unint64_t v3;
  uint8x8_t v4;
  unint64_t v5;
  uint64_t **v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v12;
  _OWORD v15[2];
  void *v16;
  uint64_t v17;
  uint64_t v18;
  void *__p;
  uint64_t v20;
  uint64_t v21;

  v2 = (int8x8_t)a1[1];
  if (v2)
  {
    v3 = *((unsigned int *)a2 + 2);
    v4 = (uint8x8_t)vcnt_s8(v2);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = *((unsigned int *)a2 + 2);
      if (*(_QWORD *)&v2 <= v3)
        v5 = v3 % *(_QWORD *)&v2;
    }
    else
    {
      v5 = (v2.i32[0] - 1) & v3;
    }
    v6 = *(uint64_t ***)(*a1 + 8 * v5);
    if (v6)
    {
      v7 = *v6;
      if (v7)
      {
        v8 = *a2;
        if (v4.u32[0] < 2uLL)
        {
          v9 = *(_QWORD *)&v2 - 1;
          while (1)
          {
            v12 = v7[1];
            if (v12 == v3)
            {
              if (v7[2] == v8 && *((_DWORD *)v7 + 6) == (_DWORD)v3)
                return 0;
            }
            else if ((v12 & v9) != v5)
            {
              goto LABEL_30;
            }
            v7 = (uint64_t *)*v7;
            if (!v7)
              goto LABEL_30;
          }
        }
        do
        {
          v10 = v7[1];
          if (v10 == v3)
          {
            if (v7[2] == v8 && *((_DWORD *)v7 + 6) == (_DWORD)v3)
              return 0;
          }
          else
          {
            if (v10 >= *(_QWORD *)&v2)
              v10 %= *(_QWORD *)&v2;
            if (v10 != v5)
              break;
          }
          v7 = (uint64_t *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_30:
  v15[0] = *(_OWORD *)a2;
  v15[1] = v15[0];
  v16 = 0;
  v17 = 0;
  v18 = 0;
  __p = 0;
  v20 = 0;
  v21 = 0;
  sub_20F7C4B80(a1, *(uint64_t *)&v15[0], DWORD2(v15[0]), (uint64_t)v15);
  if (__p)
    operator delete(__p);
  if (v16)
    operator delete(v16);
  return 1;
}

void sub_20F7C25B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  sub_20E99BDC4(&a17);
  sub_20EFF9828(&a9);
  _Unwind_Resume(a1);
}

BOOL sub_20F7C25CC(_QWORD *a1, uint64_t *a2, uint64_t *a3, unsigned int *a4)
{
  int8x8_t v4;
  unint64_t v5;
  uint8x8_t v6;
  unint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  unint64_t v11;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t **v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v21;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;

  v4 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v4)
    return 0;
  v5 = *((unsigned int *)a2 + 2);
  v6 = (uint8x8_t)vcnt_s8(v4);
  v6.i16[0] = vaddlv_u8(v6);
  if (v6.u32[0] > 1uLL)
  {
    v7 = *((unsigned int *)a2 + 2);
    if (*(_QWORD *)&v4 <= v5)
      v7 = v5 % *(_QWORD *)&v4;
  }
  else
  {
    v7 = (v4.i32[0] - 1) & v5;
  }
  v8 = *(uint64_t **)(*a1 + 8 * v7);
  if (v8)
  {
    v8 = (uint64_t *)*v8;
    if (v8)
    {
      v9 = *a2;
      if (v6.u32[0] < 2uLL)
      {
        while (1)
        {
          v13 = v8[1];
          if (v13 == v5)
          {
            if (v8[2] == v9 && *((_DWORD *)v8 + 6) == (_DWORD)v5)
              goto LABEL_28;
          }
          else if ((v13 & (*(_QWORD *)&v4 - 1)) != v7)
          {
            goto LABEL_27;
          }
          v8 = (uint64_t *)*v8;
          if (!v8)
            goto LABEL_28;
        }
      }
      do
      {
        v11 = v8[1];
        if (v11 == v5)
        {
          if (v8[2] == v9 && *((_DWORD *)v8 + 6) == (_DWORD)v5)
            break;
        }
        else
        {
          if (v11 >= *(_QWORD *)&v4)
            v11 %= *(_QWORD *)&v4;
          if (v11 != v7)
          {
LABEL_27:
            v8 = 0;
            break;
          }
        }
        v8 = (uint64_t *)*v8;
      }
      while (v8);
    }
  }
LABEL_28:
  v14 = *((unsigned int *)a3 + 2);
  if (v6.u32[0] > 1uLL)
  {
    v15 = *((unsigned int *)a3 + 2);
    if (*(_QWORD *)&v4 <= v14)
      v15 = v14 % *(_QWORD *)&v4;
  }
  else
  {
    v15 = (v4.i32[0] - 1) & v14;
  }
  v16 = *(uint64_t ***)(*a1 + 8 * v15);
  if (!v16)
    return 0;
  v17 = *v16;
  if (!*v16)
    return 0;
  v18 = *a3;
  if (v6.u32[0] < 2uLL)
  {
    v19 = *(_QWORD *)&v4 - 1;
    while (1)
    {
      v23 = v17[1];
      if (v23 == v14)
      {
        if (v17[2] == v18 && *((_DWORD *)v17 + 6) == (_DWORD)v14)
          goto LABEL_54;
      }
      else if ((v23 & v19) != v15)
      {
        return 0;
      }
      v17 = (uint64_t *)*v17;
      if (!v17)
        return 0;
    }
  }
  while (1)
  {
    v21 = v17[1];
    if (v21 == v14)
      break;
    if (v21 >= *(_QWORD *)&v4)
      v21 %= *(_QWORD *)&v4;
    if (v21 != v15)
      return 0;
LABEL_40:
    v17 = (uint64_t *)*v17;
    if (!v17)
      return 0;
  }
  if (v17[2] != v18 || *((_DWORD *)v17 + 6) != (_DWORD)v14)
    goto LABEL_40;
LABEL_54:
  if (!v8)
    return 0;
  v24 = &v8[3 * *a4];
  v25 = v24[6];
  v26 = v24[7];
  if (v25 != v26)
  {
    while (*(_DWORD *)(v25 + 4) != *((_DWORD *)a2 + 4)
         || *(_DWORD *)(v25 + 8) != *((_DWORD *)a3 + 4)
         || *(_QWORD *)(v25 + 16) != v18
         || *(_DWORD *)(v25 + 24) != (_DWORD)v14)
    {
      v25 += 472;
      if (v25 == v26)
      {
        v25 = v26;
        return v25 != v26;
      }
    }
  }
  return v25 != v26;
}

uint64_t sub_20F7C2800(uint64_t *a1, __int128 *a2, __int128 *a3, unsigned int *a4, int a5, uint64_t a6, int8x16_t *a7, int a8)
{
  __int128 v9;
  int v10;
  __int128 v11;
  int v12;

  v11 = *a2;
  v12 = -1;
  v9 = *a3;
  v10 = -1;
  return sub_20F7C2840(a1, (uint64_t *)&v11, (uint64_t *)&v9, a4, a5, a6, a7, a8);
}

uint64_t sub_20F7C2840(uint64_t *a1, uint64_t *a2, uint64_t *a3, unsigned int *a4, int a5, uint64_t a6, int8x16_t *a7, int a8)
{
  int8x8_t v14;
  unint64_t v15;
  uint8x8_t v16;
  unint64_t v17;
  char *v18;
  uint64_t v19;
  char **v20;
  char *v21;
  uint64_t v22;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  char **v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v33;
  uint64_t v35;
  int v36;
  uint64_t v37;
  int v38;
  int v39;
  uint64_t v40;
  _DWORD *v41;
  _DWORD *v42;
  char **v43;
  uint64_t v45;
  __int128 v46;
  float64x2_t v47;
  __int128 v48;
  __int128 v49;
  int v50;
  char *v51;
  int v52;
  char *v53;
  int v54;
  int v55;
  int v56;
  unint64_t v57;
  uint64_t v58;
  int v59;
  __int128 v60;
  __int128 v61;
  float64x2_t v62;
  float64x2_t v63;
  int8x16_t v64;
  int8x16_t v65;
  int8x16_t v66;
  double v67;
  double v68;
  int8x16_t v69;
  int8x16_t v70;
  int8x16_t v71;
  int8x16_t v72;
  int8x16_t v73;
  int8x16_t v74;
  int8x16_t v75;
  int8x16_t v76;
  int8x16_t v77;
  int8x16_t v78;
  int8x16_t v79;
  int8x16_t v80;
  float64x2_t v81;
  double v82;
  double v83;
  double v84;
  int8x16_t v85;
  double v86;
  unint64_t v87;
  float64x2_t v88;
  int v89;
  BOOL v90;
  float64x2_t v91;
  float64x2_t v92;
  float64x2_t v93;
  float64x2_t v94;
  float64x2_t v95;
  float64x2_t v96;
  float64x2_t v97;
  float64x2_t v98;
  float64x2_t v99;
  float64x2_t v100;
  float64x2_t v101;
  float64x2_t v102;
  float64x2_t v103;
  float64x2_t v104;
  float64x2_t v105;
  float64x2_t v106;
  float64x2_t v107;
  float64x2_t v108;
  float64x2_t v109;
  float64x2_t v110;
  float64x2_t v111;
  float64x2_t v112;
  int8x16_t v113;
  float64x2_t v114;
  float64x2_t v115;
  float64x2_t v116;
  float64x2_t v117;
  float64x2_t v118;
  int8x16_t v119;
  float64x2_t v120;
  float64x2_t v121;
  float64x2_t v122;
  float64x2_t v123;
  float64x2_t v124;
  float64x2_t v125;
  float64x2_t v126;
  float64x2_t v127;
  float64x2_t v128;
  float64x2_t v129;
  float64x2_t v130;
  float64x2_t v131;
  float64x2_t v132;
  float64x2_t v133;
  float64x2_t v134;
  float64x2_t v135;
  float64x2_t v136;
  float64x2_t v137;
  float64x2_t v138;
  float64x2_t v139;
  float64x2_t v140;
  float64x2_t v142;
  float64x2_t v143;
  float64x2_t v144;
  float64x2_t v145;
  float64x2_t v146;
  float64x2_t v147;
  float64x2_t v148;
  float64x2_t v149;
  float64x2_t v150;
  float64x2_t v151;
  float64x2_t v152;
  float64x2_t v153;
  float64x2_t v154;
  float64x2_t v155;
  float64x2_t v156;
  float64x2_t v157;
  float64x2_t v158;
  float64x2_t v159;
  float64x2_t v160;
  float64x2_t v161;
  float64x2_t v162;
  float64x2_t v163;
  float64x2_t v164;
  float64x2_t v165;
  float64x2_t v166;
  float64x2_t v167;
  float64x2_t v168;
  float64x2_t v169;
  float64x2_t v170;
  float64x2_t v171;
  float64x2_t v173;
  float64x2_t v174;
  float64x2_t v178;
  float64x2_t v179;
  float64x2_t v180;
  float64x2_t v181;
  float64x2_t v182;
  float64x2_t v183;
  float64x2_t v184;
  float64x2_t v185;
  float64x2_t v186;
  float64x2_t v187;
  float64x2_t v188;
  float64x2_t v189;
  float64x2_t v190;
  float64x2_t v191;
  float64x2_t v192;
  float64x2_t v193;
  float64x2_t v194;
  float64x2_t v195;
  float64x2_t v196;
  float64x2_t v197;
  float64x2_t v198;
  float64x2_t v199;
  float64x2_t v200;
  float64x2_t v201;
  float64x2_t v206;
  float64x2_t v207;
  float64x2_t v208;
  float64x2_t v209;
  float64x2_t v210;
  float64x2_t v211;
  float64x2_t v212;
  float64x2_t v213;
  float64x2_t v214;
  float64x2_t v215;
  int v216;
  int v217;
  uint64_t v218;
  unint64_t v219;
  char **v220;
  unint64_t v221;
  char *v222;
  float64x2_t v223;
  double v224;
  double v225;
  double v226;
  double v227;
  double v228;
  double v229;
  double v230;
  double v231;
  double v232;
  double v233;
  double v234;
  double v235;
  double v236;
  int8x16_t v237;
  double v238;
  double v239;
  double v240;
  int8x16_t v241;
  double v242;
  int8x16_t v243;
  double v244;
  float64x2_t v245;
  int8x16_t v246;
  float64x2_t v247;
  double v248;
  float64x2_t v249;
  float64_t v250;
  int8x16_t v251;
  float64x2_t v252;
  float64x2_t v253;
  float64x2_t v254;
  float64x2_t v255;
  float64x2_t v256;
  float64x2_t v257;
  unint64_t v258;
  float64x2_t v259;
  uint64_t v260;
  float64x2_t v261;
  int v262;
  __int128 v263;
  float64x2_t v264;
  int *v265;
  float64x2_t v266;
  double __srca;
  float64_t __srcb;
  uint64_t *v270;
  _BYTE v271[48];
  void *__p[2];
  _BYTE v273[32];
  float64x2_t v274;
  _BYTE v275[32];
  float64x2_t v276;
  _BYTE v277[296];
  char v278;
  int v279;
  __int128 v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;

  v14 = (int8x8_t)a1[1];
  v270 = a3;
  if (!*(_QWORD *)&v14)
  {
    v18 = 0;
    goto LABEL_59;
  }
  v15 = *((unsigned int *)a2 + 2);
  v16 = (uint8x8_t)vcnt_s8(v14);
  v16.i16[0] = vaddlv_u8(v16);
  if (v16.u32[0] > 1uLL)
  {
    v17 = *((unsigned int *)a2 + 2);
    if (*(_QWORD *)&v14 <= v15)
      v17 = v15 % *(_QWORD *)&v14;
  }
  else
  {
    v17 = (v14.i32[0] - 1) & v15;
  }
  v19 = *a1;
  v20 = *(char ***)(*a1 + 8 * v17);
  if (!v20)
  {
LABEL_20:
    v21 = 0;
    v25 = *((unsigned int *)a3 + 2);
    if (v16.u32[0] <= 1uLL)
      goto LABEL_34;
LABEL_21:
    v26 = v25;
    if (*(_QWORD *)&v14 <= v25)
      v26 = v25 % *(_QWORD *)&v14;
    v27 = *(char ***)(v19 + 8 * v26);
    if (v27)
      goto LABEL_35;
    goto LABEL_55;
  }
  v21 = *v20;
  if (!*v20)
    goto LABEL_33;
  v22 = *a2;
  if (v16.u32[0] < 2uLL)
  {
    while (1)
    {
      v29 = *((_QWORD *)v21 + 1);
      if (v29 == v15)
      {
        if (*((_QWORD *)v21 + 2) == v22 && *((_DWORD *)v21 + 6) == (_DWORD)v15)
          goto LABEL_33;
      }
      else if ((v29 & (*(_QWORD *)&v14 - 1)) != v17)
      {
        v21 = 0;
        goto LABEL_33;
      }
      v21 = *(char **)v21;
      if (!v21)
        goto LABEL_33;
    }
  }
  while (1)
  {
    v24 = *((_QWORD *)v21 + 1);
    if (v24 == v15)
      break;
    if (v24 >= *(_QWORD *)&v14)
      v24 %= *(_QWORD *)&v14;
    if (v24 != v17)
      goto LABEL_20;
LABEL_15:
    v21 = *(char **)v21;
    if (!v21)
      goto LABEL_33;
  }
  if (*((_QWORD *)v21 + 2) != v22 || *((_DWORD *)v21 + 6) != (_DWORD)v15)
    goto LABEL_15;
LABEL_33:
  v25 = *((unsigned int *)a3 + 2);
  if (v16.u32[0] > 1uLL)
    goto LABEL_21;
LABEL_34:
  v26 = (v14.i32[0] - 1) & v25;
  v27 = *(char ***)(v19 + 8 * v26);
  if (!v27)
  {
LABEL_55:
    v18 = 0;
    goto LABEL_56;
  }
LABEL_35:
  v18 = *v27;
  if (*v27)
  {
    v30 = *a3;
    if (v16.u32[0] < 2uLL)
    {
      v31 = *(_QWORD *)&v14 - 1;
      while (1)
      {
        v35 = *((_QWORD *)v18 + 1);
        if (v35 == v25)
        {
          if (*((_QWORD *)v18 + 2) == v30 && *((_DWORD *)v18 + 6) == (_DWORD)v25)
            goto LABEL_56;
        }
        else if ((v35 & v31) != v26)
        {
          goto LABEL_55;
        }
        v18 = *(char **)v18;
        if (!v18)
          goto LABEL_56;
      }
    }
    do
    {
      v33 = *((_QWORD *)v18 + 1);
      if (v33 == v25)
      {
        if (*((_QWORD *)v18 + 2) == v30 && *((_DWORD *)v18 + 6) == (_DWORD)v25)
          break;
      }
      else
      {
        if (v33 >= *(_QWORD *)&v14)
          v33 %= *(_QWORD *)&v14;
        if (v33 != v26)
          goto LABEL_55;
      }
      v18 = *(char **)v18;
    }
    while (v18);
  }
LABEL_56:
  if (v21)
  {
    if (!v18)
      goto LABEL_64;
    goto LABEL_69;
  }
LABEL_59:
  v280 = *(_OWORD *)a2;
  *(_OWORD *)v271 = v280;
  *(_OWORD *)&v271[16] = v280;
  *(_QWORD *)&v271[40] = 0;
  *(_QWORD *)&v271[32] = 0;
  __p[1] = 0;
  __p[0] = 0;
  v281 = 0;
  v282 = 0;
  *(_OWORD *)v273 = 0uLL;
  v283 = 0;
  v284 = 0;
  v285 = 0;
  v286 = 0;
  v21 = sub_20F7C4B80(a1, v280, DWORD2(v280), (uint64_t)v271);
  if (__p[1])
    operator delete(__p[1]);
  if (*(_QWORD *)&v271[32])
    operator delete(*(void **)&v271[32]);
  a3 = v270;
  if (!v18)
  {
LABEL_64:
    v280 = *(_OWORD *)a3;
    *(_OWORD *)v271 = v280;
    *(_OWORD *)&v271[16] = v280;
    *(_QWORD *)&v271[40] = 0;
    *(_QWORD *)&v271[32] = 0;
    __p[1] = 0;
    __p[0] = 0;
    v281 = 0;
    v282 = 0;
    *(_OWORD *)v273 = 0uLL;
    v283 = 0;
    v284 = 0;
    v285 = 0;
    v286 = 0;
    v18 = sub_20F7C4B80(a1, v280, DWORD2(v280), (uint64_t)v271);
    if (__p[1])
      operator delete(__p[1]);
    if (*(_QWORD *)&v271[32])
      operator delete(*(void **)&v271[32]);
    a3 = v270;
  }
LABEL_69:
  v36 = *((_DWORD *)a2 + 4);
  v37 = *a3;
  v38 = *((_DWORD *)a3 + 4);
  v265 = (int *)a4;
  v39 = *a4;
  v40 = (uint64_t)&v21[24 * *a4 + 48];
  v41 = *(_DWORD **)v40;
  v43 = (char **)(v40 + 8);
  v42 = *(_DWORD **)(v40 + 8);
  if (*(_DWORD **)v40 != v42)
  {
    while (v41[1] != v36 || v41[2] != v38 || *((_QWORD *)v41 + 2) != v37 || v41[6] != *((_DWORD *)a3 + 2))
    {
      v41 += 118;
      if (v41 == v42)
        goto LABEL_78;
    }
  }
  if (v41 != v42)
    return 0;
LABEL_78:
  v45 = a3[1];
  v262 = a5;
  *(_DWORD *)v271 = a5;
  *(_DWORD *)&v271[4] = v36;
  *(_DWORD *)&v271[8] = v38;
  *(_QWORD *)&v271[16] = v37;
  *(_QWORD *)&v271[24] = v45;
  v46 = *(_OWORD *)(a6 + 80);
  v274 = *(float64x2_t *)(a6 + 64);
  *(_OWORD *)v275 = v46;
  v47 = *(float64x2_t *)(a6 + 112);
  *(_OWORD *)&v275[16] = *(_OWORD *)(a6 + 96);
  v276 = v47;
  v48 = *(_OWORD *)(a6 + 16);
  *(_OWORD *)&v271[32] = *(_OWORD *)a6;
  *(_OWORD *)__p = v48;
  v49 = *(_OWORD *)(a6 + 48);
  *(_OWORD *)v273 = *(_OWORD *)(a6 + 32);
  *(_OWORD *)&v273[16] = v49;
  v277[0] = 1;
  memcpy(&v277[8], a7, 0x120uLL);
  v278 = 1;
  v279 = a8;
  v50 = a8;
  v51 = *v43;
  if ((unint64_t)*v43 >= *(_QWORD *)&v21[24 * v39 + 64])
  {
    v52 = v50;
    v53 = sub_20F7C491C((void **)v40, (uint64_t)v271);
  }
  else
  {
    *(_OWORD *)v51 = *(_OWORD *)v271;
    *(_OWORD *)(v51 + 12) = *(_OWORD *)&v271[12];
    *((float64x2_t *)v51 + 6) = v274;
    *((_OWORD *)v51 + 7) = *(_OWORD *)v275;
    *((_OWORD *)v51 + 8) = *(_OWORD *)&v275[16];
    *((float64x2_t *)v51 + 9) = v276;
    *((_OWORD *)v51 + 2) = *(_OWORD *)&v271[32];
    *((_OWORD *)v51 + 3) = *(_OWORD *)__p;
    *((_OWORD *)v51 + 4) = *(_OWORD *)v273;
    *((_OWORD *)v51 + 5) = *(_OWORD *)&v273[16];
    v51[160] = 1;
    memcpy(v51 + 168, &v277[8], 0x120uLL);
    v51[456] = 1;
    v52 = v50;
    *((_DWORD *)v51 + 116) = v50;
    v53 = v51 + 472;
  }
  *v43 = v53;
  v54 = *v265;
  if (*v265 == 1)
  {
    v55 = *((_DWORD *)v270 + 4);
    v56 = *((_DWORD *)a2 + 4);
    *(_DWORD *)v271 = v262;
    *(_DWORD *)&v271[4] = v55;
    *(_DWORD *)&v271[8] = v56;
    *(_OWORD *)&v271[16] = *(_OWORD *)a2;
    v271[32] = 0;
    v277[0] = 0;
    v277[8] = 0;
    v278 = 0;
    v279 = v52;
    v57 = *((_QWORD *)v18 + 10);
    if (v57 >= *((_QWORD *)v18 + 11))
    {
      *((_QWORD *)v18 + 10) = sub_20F7C491C((void **)v18 + 9, (uint64_t)v271);
    }
    else
    {
      *(_OWORD *)v57 = *(_OWORD *)v271;
      *(_OWORD *)(v57 + 12) = *(_OWORD *)&v271[12];
      *(_BYTE *)(v57 + 32) = 0;
      *(_BYTE *)(v57 + 160) = 0;
      *(_BYTE *)(v57 + 168) = 0;
      *(_BYTE *)(v57 + 456) = 0;
      *(_DWORD *)(v57 + 464) = v52;
      *((_QWORD *)v18 + 10) = v57 + 472;
    }
  }
  else
  {
    v58 = 0;
    v59 = 0;
    v251 = *(int8x16_t *)(a6 + 112);
    v60 = *(_OWORD *)(a6 + 80);
    v257 = *(float64x2_t *)(a6 + 96);
    v61 = *(_OWORD *)(a6 + 48);
    v62 = *(float64x2_t *)(a6 + 64);
    v63 = *(float64x2_t *)(a6 + 32);
    v64 = *(int8x16_t *)a6;
    v65 = *a7;
    v66 = a7[3];
    v246 = a7[2];
    *(_QWORD *)&v248 = vextq_s8(v246, v246, 8uLL).u64[0];
    *(_QWORD *)&v240 = vextq_s8(a7[1], a7[1], 8uLL).u64[0];
    v241 = a7[1];
    *(_QWORD *)&v67 = vextq_s8(v65, v65, 8uLL).u64[0];
    v243 = a7[5];
    *(_QWORD *)&v244 = vextq_s8(v243, v243, 8uLL).u64[0];
    v237 = a7[4];
    *(_QWORD *)&v238 = vextq_s8(v237, v237, 8uLL).u64[0];
    *(_QWORD *)&v68 = vextq_s8(v66, v66, 8uLL).u64[0];
    v70 = a7[6];
    v69 = a7[7];
    v72 = a7[10];
    v71 = a7[11];
    v73 = a7[8];
    v74 = a7[9];
    v75 = a7[12];
    v76 = a7[13];
    v78 = a7[16];
    v77 = a7[17];
    v80 = a7[14];
    v79 = a7[15];
    v263 = *(_OWORD *)(a6 + 16);
    *(_QWORD *)&v271[16] = *(_QWORD *)(a6 + 16);
    *(int8x16_t *)v271 = v64;
    *(_QWORD *)&v81.f64[0] = v61;
    *(_QWORD *)v273 = v61;
    *(float64x2_t *)__p = v63;
    *(_QWORD *)v275 = v60;
    v274 = v62;
    v239 = *(double *)v73.i64;
    *(_QWORD *)&v231 = vextq_s8(v73, v73, 8uLL).u64[0];
    v234 = *(double *)v80.i64;
    v235 = *(double *)v69.i64;
    *(_QWORD *)&v82 = vextq_s8(v70, v70, 8uLL).u64[0];
    v242 = *(double *)v71.i64;
    *(_QWORD *)&v230 = vextq_s8(v71, v71, 8uLL).u64[0];
    v233 = *(double *)v76.i64;
    *(_QWORD *)&v225 = vextq_s8(v72, v72, 8uLL).u64[0];
    *(_QWORD *)&v226 = vextq_s8(v69, v69, 8uLL).u64[0];
    *(_QWORD *)&v83 = vextq_s8(v74, v74, 8uLL).u64[0];
    v228 = *(double *)v78.i64;
    *(_QWORD *)&v229 = vextq_s8(v80, v80, 8uLL).u64[0];
    *(_QWORD *)&v224 = vextq_s8(v76, v76, 8uLL).u64[0];
    *(_QWORD *)&v84 = vextq_s8(v75, v75, 8uLL).u64[0];
    v236 = *(double *)v77.i64;
    *(_QWORD *)&v232 = vextq_s8(v77, v77, 8uLL).u64[0];
    v85 = vextq_s8(v78, v78, 8uLL);
    v227 = *(double *)v85.i64;
    v266 = v62;
    __srca = *(double *)v79.i64;
    *(_QWORD *)&v86 = vextq_s8(v79, v79, 8uLL).u64[0];
    v87 = vextq_s8(v64, v64, 8uLL).u64[0];
    v88 = v63;
    v85.i64[0] = *(_QWORD *)&v62.f64[1];
    v252 = (float64x2_t)v85;
    v89 = v52;
    do
    {
      v276.f64[v58] = 0.0;
      v90 = v59 < 2;
      if (v59 < 2)
        ++v59;
      else
        v59 = 0;
      if (v90)
        ++v58;
      else
        v58 += 4;
    }
    while (v58 != 18);
    v91 = (float64x2_t)vzip1q_s64(*(int64x2_t *)v271, *(int64x2_t *)__p);
    v92 = (float64x2_t)vzip2q_s64(*(int64x2_t *)v271, *(int64x2_t *)__p);
    v93 = vmlaq_n_f64(vmulq_n_f64(v91, *(double *)v65.i64), v92, v67);
    *(_QWORD *)&v94.f64[0] = vdupq_laneq_s64((int64x2_t)v274, 1).u64[0];
    v94.f64[1] = v276.f64[1];
    *(_QWORD *)&v95.f64[0] = vdupq_laneq_s64(*(int64x2_t *)&v277[32], 1).u64[0];
    v95.f64[1] = *(float64_t *)&v277[88];
    v96 = (float64x2_t)vzip1q_s64((int64x2_t)v274, (int64x2_t)v276);
    v223 = vmlaq_n_f64(vmulq_n_f64(v96, *(double *)v65.i64), v94, v67);
    v97 = (float64x2_t)vzip1q_s64(*(int64x2_t *)&v277[32], *(int64x2_t *)&v277[80]);
    v98 = vmlaq_n_f64(vmulq_n_f64(v97, *(double *)v65.i64), v95, v67);
    v99 = vmlaq_n_f64(vmulq_n_f64(v91, *(double *)v66.i64), v92, v68);
    v100 = vmlaq_n_f64(vmulq_n_f64(v96, *(double *)v66.i64), v94, v68);
    v101 = vmlaq_n_f64(vmulq_n_f64(v97, *(double *)v66.i64), v95, v68);
    v102 = vmlaq_n_f64(vmulq_n_f64(v91, *(double *)v70.i64), v92, v82);
    v255 = vmlaq_n_f64(vmulq_n_f64(v96, *(double *)v70.i64), v94, v82);
    v253 = vmlaq_n_f64(vmulq_n_f64(v97, *(double *)v70.i64), v95, v82);
    v103 = vmlaq_n_f64(vmulq_n_f64(v91, *(double *)v74.i64), v92, v83);
    v104 = vmlaq_n_f64(vmulq_n_f64(v96, *(double *)v74.i64), v94, v83);
    v105 = vmlaq_n_f64(vmulq_n_f64(v97, *(double *)v74.i64), v95, v83);
    v106 = vmlaq_n_f64(vmulq_n_f64(v91, *(double *)v75.i64), v92, v84);
    v107 = vmlaq_n_f64(vmulq_n_f64(v96, *(double *)v75.i64), v94, v84);
    v108 = vmlaq_n_f64(vmulq_n_f64(v97, *(double *)v75.i64), v95, v84);
    v109 = vmlaq_n_f64(vmulq_n_f64(v91, __srca), v92, v86);
    v110 = vmlaq_n_f64(vmulq_n_f64(v96, __srca), v94, v86);
    v111 = vmlaq_n_f64(vmulq_n_f64(v97, __srca), v95, v86);
    *(_QWORD *)&v97.f64[0] = v87;
    *(_QWORD *)&v97.f64[1] = v61;
    v250 = *(double *)&v61;
    *(_QWORD *)&v96.f64[0] = v64.i64[0];
    v96.f64[1] = v63.f64[1];
    v112 = (float64x2_t)vextq_s8((int8x16_t)v257, v251, 8uLL);
    v113 = (int8x16_t)vmlsq_f64(vmulq_f64(v97, v257), v96, v112);
    *(_QWORD *)&v96.f64[0] = v60;
    v96.f64[1] = v266.f64[0];
    *(_QWORD *)&v95.f64[0] = v263;
    *(_QWORD *)&v95.f64[1] = v64.i64[0];
    v260 = v64.i64[0];
    v114 = vmulq_f64(v95, v112);
    v115 = vmulq_f64(v96, v112);
    v112.f64[0] = v252.f64[0];
    *(_QWORD *)&v112.f64[1] = v60;
    __srcb = *(double *)&v60;
    v116 = (float64x2_t)vzip1q_s64((int64x2_t)v251, (int64x2_t)v257);
    v117 = vmlsq_f64(v115, v112, v116);
    *(_QWORD *)&v112.f64[0] = v87;
    *(_QWORD *)&v112.f64[1] = v263;
    v118 = vmlsq_f64(v114, v112, v116);
    v81.f64[1] = v63.f64[0];
    v119 = (int8x16_t)vmlsq_f64(vmulq_f64(v63, v116), v81, v257);
    *(float64x2_t *)&v271[24] = v118;
    *(int8x16_t *)&v273[8] = vextq_s8(v113, v119, 8uLL);
    *(float64x2_t *)&v275[8] = v117;
    *(_QWORD *)&v117.f64[0] = v64.i64[0];
    *(_QWORD *)&v117.f64[1] = v87;
    *(float64x2_t *)&v277[8] = v117;
    *(float64x2_t *)&v277[56] = v63;
    v117.f64[0] = v266.f64[0];
    v117.f64[1] = v252.f64[0];
    *(float64x2_t *)&v277[104] = v117;
    v258 = v87;
    v120 = (float64x2_t)vzip1q_s64(*(int64x2_t *)&v271[16], *(int64x2_t *)v273);
    v121 = vmlaq_n_f64(v93, v120, *(double *)v241.i64);
    v122 = (float64x2_t)vzip1q_s64(*(int64x2_t *)v275, *(int64x2_t *)v277);
    v123 = vmlaq_n_f64(v223, v122, *(double *)v241.i64);
    v124 = (float64x2_t)vzip1q_s64(*(int64x2_t *)&v277[48], *(int64x2_t *)&v277[96]);
    v125 = vmlaq_n_f64(v98, v124, *(double *)v241.i64);
    v126 = vmlaq_n_f64(v99, v120, *(double *)v237.i64);
    v127 = vmlaq_n_f64(v100, v122, *(double *)v237.i64);
    v128 = vmlaq_n_f64(v101, v124, *(double *)v237.i64);
    v129 = vmlaq_n_f64(v102, v120, v235);
    v130 = vmlaq_n_f64(v255, v122, v235);
    v131 = vmlaq_n_f64(v253, v124, v235);
    v132 = vmlaq_n_f64(v103, v120, *(double *)v72.i64);
    v133 = vmlaq_n_f64(v104, v122, *(double *)v72.i64);
    v134 = vmlaq_n_f64(v105, v124, *(double *)v72.i64);
    v135 = vmlaq_n_f64(v106, v120, v233);
    v136 = vmlaq_n_f64(v107, v122, v233);
    v137 = vmlaq_n_f64(v108, v124, v233);
    v138 = vmlaq_n_f64(v109, v120, v228);
    v139 = vmlaq_n_f64(v110, v122, v228);
    v140 = vmlaq_n_f64(v111, v124, v228);
    *(_QWORD *)&v120.f64[0] = vdupq_laneq_s64(*(int64x2_t *)v275, 1).u64[0];
    v120.f64[1] = *(float64_t *)&v277[8];
    *(_QWORD *)&v122.f64[0] = vdupq_laneq_s64(*(int64x2_t *)&v277[48], 1).u64[0];
    v122.f64[1] = *(float64_t *)&v277[104];
    _Q4 = (float64x2_t)vzip2q_s64(*(int64x2_t *)&v271[16], *(int64x2_t *)v273);
    v142 = vmlaq_n_f64(v123, v120, v240);
    v143 = vmlaq_n_f64(v127, v120, v238);
    v144 = vmlaq_n_f64(v130, v120, v226);
    v145 = vmlaq_n_f64(v133, v120, v225);
    v146 = vmlaq_n_f64(v136, v120, v224);
    v147 = vmlaq_n_f64(v139, v120, v227);
    *(_QWORD *)&v271[40] = v113.i64[0];
    *(_QWORD *)&v273[24] = v119.i64[1];
    *(_QWORD *)&v275[24] = *(_OWORD *)&vmlsq_laneq_f64(vmulq_f64(v252, v257), v266, v257, 1);
    *(_QWORD *)&v277[24] = v263;
    *(float64_t *)&v277[72] = v250;
    *(float64_t *)&v277[120] = __srcb;
    v148 = (float64x2_t)vzip1q_s64(*(int64x2_t *)&v271[32], *(int64x2_t *)&v273[16]);
    v149 = vmlaq_n_f64(vmlaq_n_f64(v121, _Q4, v240), v148, *(double *)v246.i64);
    v150 = (float64x2_t)vzip1q_s64(*(int64x2_t *)&v275[16], *(int64x2_t *)&v277[16]);
    v151 = vmlaq_n_f64(v142, v150, *(double *)v246.i64);
    v152 = (float64x2_t)vzip1q_s64(*(int64x2_t *)&v277[64], *(int64x2_t *)&v277[112]);
    v153 = vmlaq_n_f64(vmlaq_n_f64(v125, v122, v240), v152, *(double *)v246.i64);
    v154 = vmlaq_n_f64(vmlaq_n_f64(v126, _Q4, v238), v148, *(double *)v243.i64);
    v155 = vmlaq_n_f64(v143, v150, *(double *)v243.i64);
    v156 = vmlaq_n_f64(vmlaq_n_f64(v128, v122, v238), v152, *(double *)v243.i64);
    v157 = vmlaq_n_f64(vmlaq_n_f64(v129, _Q4, v226), v148, v239);
    v158 = vmlaq_n_f64(v144, v150, v239);
    v159 = vmlaq_n_f64(vmlaq_n_f64(v131, v122, v226), v152, v239);
    v160 = vmlaq_n_f64(vmlaq_n_f64(v132, _Q4, v225), v148, v242);
    v161 = vmlaq_n_f64(v145, v150, v242);
    v162 = vmlaq_n_f64(vmlaq_n_f64(v134, v122, v225), v152, v242);
    v163 = vmlaq_n_f64(vmlaq_n_f64(v135, _Q4, v224), v148, v234);
    v164 = vmlaq_n_f64(v146, v150, v234);
    v165 = vmlaq_n_f64(vmlaq_n_f64(v137, v122, v224), v152, v234);
    v166 = vmlaq_n_f64(vmlaq_n_f64(v138, _Q4, v227), v148, v236);
    v167 = vmlaq_n_f64(v147, v150, v236);
    v168 = vmlaq_n_f64(vmlaq_n_f64(v140, v122, v227), v152, v236);
    *(_QWORD *)&v148.f64[0] = vdupq_laneq_s64(*(int64x2_t *)&v275[16], 1).u64[0];
    *(_QWORD *)&v148.f64[1] = v263;
    *(_QWORD *)&v150.f64[0] = vdupq_laneq_s64(*(int64x2_t *)&v277[64], 1).u64[0];
    v150.f64[1] = __srcb;
    v169 = (float64x2_t)vzip2q_s64(*(int64x2_t *)&v271[32], *(int64x2_t *)&v273[16]);
    v170 = vmlaq_n_f64(v149, v169, v248);
    v171 = vmlaq_n_f64(v151, v148, v248);
    _Q21 = vmlaq_n_f64(v153, v150, v248);
    v173 = vmlaq_n_f64(v154, v169, v244);
    v174 = vmlaq_n_f64(v155, v148, v244);
    _Q22 = vmlaq_n_f64(v156, v150, v244);
    v254 = vmlaq_n_f64(v159, v150, v231);
    v256 = vmlaq_n_f64(v158, v148, v231);
    _Q31 = vmlaq_n_f64(v160, v169, v230);
    _Q8 = vmlaq_n_f64(v161, v148, v230);
    v247 = vmlaq_n_f64(v157, v169, v231);
    v249 = vmlaq_n_f64(v162, v150, v230);
    v245 = vmlaq_n_f64(v163, v169, v229);
    v178 = vmlaq_n_f64(v164, v148, v229);
    v179 = vmlaq_n_f64(v165, v150, v229);
    v180 = vmlaq_n_f64(v166, v169, v232);
    v181 = vmlaq_n_f64(v167, v148, v232);
    v182 = vmlaq_n_f64(v168, v150, v232);
    v183 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v170, *(double *)v271), v173, *(float64x2_t *)v271, 1), v247, *(double *)&v271[16]), _Q31, *(float64x2_t *)&v271[16], 1);
    v184 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v171, *(double *)v271), v174, *(float64x2_t *)v271, 1), v256, *(double *)&v271[16]), _Q8, *(float64x2_t *)&v271[16], 1);
    v185 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(_Q21, *(double *)v271), _Q22, *(float64x2_t *)v271, 1), v254, *(double *)&v271[16]), v249, *(float64x2_t *)&v271[16], 1);
    v186 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v170, *(double *)__p), v173, *(float64x2_t *)__p, 1), v247, *(double *)v273), _Q31, *(float64x2_t *)v273, 1);
    v187 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v171, *(double *)__p), v174, *(float64x2_t *)__p, 1), v256, *(double *)v273), _Q8, *(float64x2_t *)v273, 1);
    v188 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(_Q21, *(double *)__p), _Q22, *(float64x2_t *)__p, 1), v254, *(double *)v273), v249, *(float64x2_t *)v273, 1);
    v189 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v170, v274.f64[0]), v173, v274, 1), v247, *(double *)v275), _Q31, *(float64x2_t *)v275, 1);
    v190 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v171, v274.f64[0]), v174, v274, 1), v256, *(double *)v275), _Q8, *(float64x2_t *)v275, 1);
    v191 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(_Q21, v274.f64[0]), _Q22, v274, 1), v254, *(double *)v275), v249, *(float64x2_t *)v275, 1);
    v192 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v170, v276.f64[0]), v173, v276, 1), v247, *(double *)v277), _Q31, *(float64x2_t *)v277, 1);
    v193 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v171, v276.f64[0]), v174, v276, 1), v256, *(double *)v277), _Q8, *(float64x2_t *)v277, 1);
    v194 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(_Q21, v276.f64[0]), _Q22, v276, 1), v254, *(double *)v277), v249, *(float64x2_t *)v277, 1);
    v195 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v170, *(double *)&v277[32]), v173, *(float64x2_t *)&v277[32], 1), v247, *(double *)&v277[48]), _Q31, *(float64x2_t *)&v277[48], 1);
    v196 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v171, *(double *)&v277[32]), v174, *(float64x2_t *)&v277[32], 1), v256, *(double *)&v277[48]), _Q8, *(float64x2_t *)&v277[48], 1);
    v197 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(_Q21, *(double *)&v277[32]), _Q22, *(float64x2_t *)&v277[32], 1), v254, *(double *)&v277[48]), v249, *(float64x2_t *)&v277[48], 1);
    v198 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v170, *(double *)&v277[80]), v173, *(float64x2_t *)&v277[80], 1), v247, *(double *)&v277[96]), _Q31, *(float64x2_t *)&v277[96], 1);
    v199 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v171, *(double *)&v277[80]), v174, *(float64x2_t *)&v277[80], 1), v256, *(double *)&v277[96]), _Q8, *(float64x2_t *)&v277[96], 1);
    v200 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(_Q21, *(double *)&v277[80]), _Q22, *(float64x2_t *)&v277[80], 1), v254, *(double *)&v277[96]);
    *(_QWORD *)&_Q4.f64[0] = v258;
    *(_QWORD *)&v201.f64[0] = v260;
    v201.f64[1] = v88.f64[0];
    _Q22.f64[0] = v252.f64[0];
    _Q4.f64[1] = v88.f64[1];
    v259 = _Q4;
    v261 = v201;
    *(_QWORD *)&v201.f64[0] = v263;
    v201.f64[1] = v250;
    v264 = v201;
    _Q4.f64[1] = v257.f64[1];
    __asm { FMLS            D31, D22, V4.D[1] }
    _Q8.f64[0] = __srcb;
    *(_QWORD *)&_Q21.f64[0] = v251.i64[0];
    __asm
    {
      FMLS            D31, D8, V21.D[0]
      FMOV            V26.2D, #1.0
    }
    _Q26.f64[0] = _Q31.f64[0];
    v206 = vmlaq_laneq_f64(vmlaq_n_f64(v192, v245, *(double *)&v277[16]), v180, *(float64x2_t *)&v277[16], 1);
    v207 = vmlaq_laneq_f64(vmlaq_n_f64(v193, v178, *(double *)&v277[16]), v181, *(float64x2_t *)&v277[16], 1);
    v208 = vmlaq_laneq_f64(vmlaq_n_f64(v194, v179, *(double *)&v277[16]), v182, *(float64x2_t *)&v277[16], 1);
    v209 = vmlaq_laneq_f64(vmlaq_n_f64(v195, v245, *(double *)&v277[64]), v180, *(float64x2_t *)&v277[64], 1);
    v210 = vmlaq_laneq_f64(vmlaq_n_f64(v196, v178, *(double *)&v277[64]), v181, *(float64x2_t *)&v277[64], 1);
    v211 = vmlaq_laneq_f64(vmlaq_n_f64(v197, v179, *(double *)&v277[64]), v182, *(float64x2_t *)&v277[64], 1);
    v212 = vmlaq_laneq_f64(vmlaq_n_f64(v198, v245, *(double *)&v277[112]), v180, *(float64x2_t *)&v277[112], 1);
    v213 = vmlaq_laneq_f64(vmlaq_n_f64(v199, v178, *(double *)&v277[112]), v181, *(float64x2_t *)&v277[112], 1);
    v214 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(v200, v249, *(float64x2_t *)&v277[96], 1), v179, *(double *)&v277[112]), v182, *(float64x2_t *)&v277[112], 1);
    *(_OWORD *)&v271[16] = *(_OWORD *)a2;
    *(float64x2_t *)&v277[40] = vmlaq_laneq_f64(vmlaq_n_f64(v185, v179, *(double *)&v271[32]), v182, *(float64x2_t *)&v271[32], 1);
    *(float64x2_t *)&v277[24] = vmlaq_laneq_f64(vmlaq_n_f64(v184, v178, *(double *)&v271[32]), v181, *(float64x2_t *)&v271[32], 1);
    *(float64x2_t *)&v277[8] = vmlaq_laneq_f64(vmlaq_n_f64(v183, v245, *(double *)&v271[32]), v180, *(float64x2_t *)&v271[32], 1);
    *(float64x2_t *)&v277[88] = vmlaq_laneq_f64(vmlaq_n_f64(v188, v179, *(double *)&v273[16]), v182, *(float64x2_t *)&v273[16], 1);
    *(float64x2_t *)&v277[72] = vmlaq_laneq_f64(vmlaq_n_f64(v187, v178, *(double *)&v273[16]), v181, *(float64x2_t *)&v273[16], 1);
    *(float64x2_t *)&v277[56] = vmlaq_laneq_f64(vmlaq_n_f64(v186, v245, *(double *)&v273[16]), v180, *(float64x2_t *)&v273[16], 1);
    *(float64x2_t *)&v277[104] = vmlaq_laneq_f64(vmlaq_n_f64(v189, v245, *(double *)&v275[16]), v180, *(float64x2_t *)&v275[16], 1);
    *(float64x2_t *)&v277[120] = vmlaq_laneq_f64(vmlaq_n_f64(v190, v178, *(double *)&v275[16]), v181, *(float64x2_t *)&v275[16], 1);
    *(float64x2_t *)&v277[168] = v207;
    *(float64x2_t *)&v277[184] = v208;
    *(float64x2_t *)&v277[136] = vmlaq_laneq_f64(vmlaq_n_f64(v191, v179, *(double *)&v275[16]), v182, *(float64x2_t *)&v275[16], 1);
    *(float64x2_t *)&v277[152] = v206;
    *(float64x2_t *)&v277[200] = v209;
    *(float64x2_t *)&v277[216] = v210;
    *(float64x2_t *)&v277[264] = v213;
    *(float64x2_t *)&v277[280] = v214;
    *(float64x2_t *)&v277[232] = v211;
    *(float64x2_t *)&v277[248] = v212;
    v215 = vmlsq_lane_f64(vmlsq_laneq_f64(vmulq_n_f64(v261, vnegq_f64(v257).f64[0]), v259, v257, 1), v264, *(double *)v251.i64, 0);
    v216 = *((_DWORD *)v270 + 4);
    v217 = *((_DWORD *)a2 + 4);
    *(_DWORD *)v271 = v262;
    *(_DWORD *)&v271[4] = v216;
    *(_DWORD *)&v271[8] = v217;
    *(float64x2_t *)&v275[16] = v215;
    v276 = _Q26;
    v274 = v264;
    *(_OWORD *)v275 = *(unint64_t *)&__srcb;
    *(float64x2_t *)v273 = v259;
    *(_OWORD *)&v273[16] = *(unint64_t *)&v252.f64[0];
    *(float64x2_t *)&v271[32] = v261;
    *(_OWORD *)__p = *(unint64_t *)&v266.f64[0];
    v277[0] = 1;
    v278 = 1;
    v279 = v52;
    v218 = (uint64_t)&v18[24 * v54 + 48];
    v221 = *(_QWORD *)(v218 + 8);
    v219 = *(_QWORD *)(v218 + 16);
    v220 = (char **)(v218 + 8);
    if (v221 >= v219)
    {
      v222 = sub_20F7C491C((void **)&v18[24 * v54 + 48], (uint64_t)v271);
    }
    else
    {
      *(_OWORD *)v221 = *(_OWORD *)v271;
      *(_OWORD *)(v221 + 12) = *(_OWORD *)&v271[12];
      *(float64x2_t *)(v221 + 32) = v261;
      *(_OWORD *)(v221 + 48) = *(unint64_t *)&v266.f64[0];
      *(float64x2_t *)(v221 + 64) = v259;
      *(_OWORD *)(v221 + 80) = *(unint64_t *)&v252.f64[0];
      *(float64x2_t *)(v221 + 96) = v264;
      *(_OWORD *)(v221 + 112) = *(unint64_t *)&__srcb;
      *(float64x2_t *)(v221 + 128) = v215;
      *(float64x2_t *)(v221 + 144) = _Q26;
      *(_BYTE *)(v221 + 160) = 1;
      memcpy((void *)(v221 + 168), &v277[8], 0x120uLL);
      *(_BYTE *)(v221 + 456) = 1;
      *(_DWORD *)(v221 + 464) = v89;
      v222 = (char *)(v221 + 472);
    }
    *v220 = v222;
  }
  return 1;
}

void sub_20F7C36B8(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20E99BDC4(&STACK[0x340]);
  sub_20EFF9828((_QWORD *)(v1 - 224));
  _Unwind_Resume(a1);
}

uint64_t sub_20F7C36D8(_QWORD *a1, __int128 *a2, __int128 *a3, _DWORD *a4, int a5, __int128 *a6, const void *a7, int a8)
{
  __int128 v9;
  int v10;
  __int128 v11;
  int v12;

  v11 = *a2;
  v12 = -1;
  v9 = *a3;
  v10 = -1;
  return sub_20F7C3718(a1, (uint64_t *)&v11, (uint64_t *)&v9, a4, a5, a6, a7, a8);
}

uint64_t sub_20F7C3718(_QWORD *a1, uint64_t *a2, uint64_t *a3, _DWORD *a4, int a5, __int128 *a6, const void *a7, int a8)
{
  uint64_t result;
  int8x8_t v9;
  unint64_t v16;
  uint8x8_t v17;
  unint64_t v18;
  uint64_t **v19;
  uint64_t *v20;
  uint64_t v21;
  unint64_t v23;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t **v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v33;
  uint64_t v35;
  int v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  int v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  double v53;
  double v54;
  double v55;
  double v56;
  double v57;
  int8x16_t v58;
  int v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  int v64;
  float64x2_t v65[18];
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  uint64_t v75;
  __int128 v76;
  uint64_t v77;

  if (*a4)
    return 0;
  v9 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v9)
    return 0;
  v16 = *((unsigned int *)a2 + 2);
  v17 = (uint8x8_t)vcnt_s8(v9);
  v17.i16[0] = vaddlv_u8(v17);
  if (v17.u32[0] > 1uLL)
  {
    v18 = *((unsigned int *)a2 + 2);
    if (*(_QWORD *)&v9 <= v16)
      v18 = v16 % *(_QWORD *)&v9;
  }
  else
  {
    v18 = (v9.i32[0] - 1) & v16;
  }
  v19 = *(uint64_t ***)(*a1 + 8 * v18);
  if (v19)
  {
    v20 = *v19;
    if (*v19)
    {
      v21 = *a2;
      if (v17.u32[0] < 2uLL)
      {
        while (1)
        {
          v25 = v20[1];
          if (v25 == v16)
          {
            if (v20[2] == v21 && *((_DWORD *)v20 + 6) == (_DWORD)v16)
              goto LABEL_31;
          }
          else if ((v25 & (*(_QWORD *)&v9 - 1)) != v18)
          {
            goto LABEL_30;
          }
          v20 = (uint64_t *)*v20;
          if (!v20)
            goto LABEL_31;
        }
      }
      do
      {
        v23 = v20[1];
        if (v23 == v16)
        {
          if (v20[2] == v21 && *((_DWORD *)v20 + 6) == (_DWORD)v16)
            break;
        }
        else
        {
          if (v23 >= *(_QWORD *)&v9)
            v23 %= *(_QWORD *)&v9;
          if (v23 != v18)
            goto LABEL_30;
        }
        v20 = (uint64_t *)*v20;
      }
      while (v20);
    }
  }
  else
  {
LABEL_30:
    v20 = 0;
  }
LABEL_31:
  v26 = *((unsigned int *)a3 + 2);
  if (v17.u32[0] > 1uLL)
  {
    v27 = *((unsigned int *)a3 + 2);
    if (*(_QWORD *)&v9 <= v26)
      v27 = v26 % *(_QWORD *)&v9;
  }
  else
  {
    v27 = (v9.i32[0] - 1) & v26;
  }
  v28 = *(uint64_t ***)(*a1 + 8 * v27);
  if (!v28)
    return 0;
  v29 = *v28;
  if (!*v28)
    return 0;
  v30 = *a3;
  if (v17.u32[0] < 2uLL)
  {
    v31 = *(_QWORD *)&v9 - 1;
    while (1)
    {
      v35 = v29[1];
      if (v35 == v26)
      {
        if (v29[2] == v30 && *((_DWORD *)v29 + 6) == (_DWORD)v26)
          goto LABEL_57;
      }
      else if ((v35 & v31) != v27)
      {
        return 0;
      }
      result = 0;
      v29 = (uint64_t *)*v29;
      if (!v29)
        return result;
    }
  }
  while (1)
  {
    v33 = v29[1];
    if (v33 == v26)
      break;
    if (v33 >= *(_QWORD *)&v9)
      v33 %= *(_QWORD *)&v9;
    if (v33 != v27)
      return 0;
LABEL_43:
    result = 0;
    v29 = (uint64_t *)*v29;
    if (!v29)
      return result;
  }
  if (v29[2] != v30 || *((_DWORD *)v29 + 6) != (_DWORD)v26)
    goto LABEL_43;
LABEL_57:
  if (!v20)
    return 0;
  v36 = *((_DWORD *)a2 + 4);
  v76 = *(_OWORD *)a3;
  v77 = a3[2];
  LODWORD(v65[0].f64[0]) = 0;
  v37 = sub_20F7C20C8((uint64_t)(v20 + 4), v36, (uint64_t)&v76, (unsigned int *)v65);
  v38 = *((_DWORD *)a3 + 4);
  v74 = *(_OWORD *)a2;
  v75 = a2[2];
  LODWORD(v65[0].f64[0]) = 0;
  v39 = sub_20F7C20C8((uint64_t)(v29 + 4), v38, (uint64_t)&v74, (unsigned int *)v65);
  if (v20[7] == v37)
    return 0;
  v40 = v39;
  if (v29[7] == v39 || *(_DWORD *)(v37 + 464) != a8 || *(_DWORD *)(v39 + 464) != a8)
    return 0;
  v41 = *(unsigned __int8 *)(v37 + 160);
  v42 = a6[3];
  v44 = *a6;
  v43 = a6[1];
  *(_OWORD *)(v37 + 64) = a6[2];
  *(_OWORD *)(v37 + 80) = v42;
  *(_OWORD *)(v37 + 32) = v44;
  *(_OWORD *)(v37 + 48) = v43;
  v45 = a6[7];
  v47 = a6[4];
  v46 = a6[5];
  *(_OWORD *)(v37 + 128) = a6[6];
  *(_OWORD *)(v37 + 144) = v45;
  *(_OWORD *)(v37 + 96) = v47;
  *(_OWORD *)(v37 + 112) = v46;
  if (!v41)
    *(_BYTE *)(v37 + 160) = 1;
  v48 = *(unsigned __int8 *)(v37 + 456);
  memcpy((void *)(v37 + 168), a7, 0x120uLL);
  if (!v48)
    *(_BYTE *)(v37 + 456) = 1;
  *(_DWORD *)v37 = a5;
  v49 = a6[5];
  v70 = a6[4];
  v71 = v49;
  v50 = a6[7];
  v72 = a6[6];
  v73 = v50;
  v51 = a6[1];
  v66 = *a6;
  v67 = v51;
  v52 = a6[3];
  v68 = a6[2];
  v69 = v52;
  memcpy(v65, a7, sizeof(v65));
  sub_20FC89580((uint64_t)&v66, v65, v53, v54, v55, v56, v57, v58);
  v59 = *(unsigned __int8 *)(v40 + 160);
  v60 = v71;
  *(_OWORD *)(v40 + 96) = v70;
  *(_OWORD *)(v40 + 112) = v60;
  v61 = v73;
  *(_OWORD *)(v40 + 128) = v72;
  *(_OWORD *)(v40 + 144) = v61;
  v62 = v67;
  *(_OWORD *)(v40 + 32) = v66;
  *(_OWORD *)(v40 + 48) = v62;
  v63 = v69;
  *(_OWORD *)(v40 + 64) = v68;
  *(_OWORD *)(v40 + 80) = v63;
  if (!v59)
    *(_BYTE *)(v40 + 160) = 1;
  v64 = *(unsigned __int8 *)(v40 + 456);
  memcpy((void *)(v40 + 168), v65, 0x120uLL);
  if (!v64)
    *(_BYTE *)(v40 + 456) = 1;
  *(_DWORD *)v40 = a5;
  return 1;
}

void sub_20F7C3AB0(_QWORD *a1, uint64_t a2)
{
  int8x8_t v2;
  unint64_t v5;
  uint8x8_t v6;
  unint64_t v7;
  void **v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  int8x8_t v19;
  unint64_t v20;
  uint8x8_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v26;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  int8x8_t v32;
  unint64_t v33;
  uint8x8_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v39;
  uint64_t v41;
  int8x8_t v42;
  unint64_t v43;
  uint8x8_t v44;
  _QWORD *v45;
  _QWORD *v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  void *v51;
  void *v52;

  v2 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v2)
    return;
  v5 = *(unsigned int *)(a2 + 8);
  v6 = (uint8x8_t)vcnt_s8(v2);
  v6.i16[0] = vaddlv_u8(v6);
  if (v6.u32[0] > 1uLL)
  {
    v7 = *(unsigned int *)(a2 + 8);
    if (*(_QWORD *)&v2 <= v5)
      v7 = v5 % *(_QWORD *)&v2;
  }
  else
  {
    v7 = (v2.i32[0] - 1) & v5;
  }
  v8 = *(void ***)(*a1 + 8 * v7);
  if (!v8)
    return;
  v9 = *v8;
  if (!*v8)
    return;
  v10 = *(_QWORD *)a2;
  if (v6.u32[0] < 2uLL)
  {
    v11 = *(_QWORD *)&v2 - 1;
    while (1)
    {
      v15 = v9[1];
      if (v15 == v5)
      {
        if (v9[2] == v10 && *((_DWORD *)v9 + 6) == (_DWORD)v5)
          goto LABEL_28;
      }
      else if ((v15 & v11) != v7)
      {
        return;
      }
      v9 = (_QWORD *)*v9;
      if (!v9)
        return;
    }
  }
  while (1)
  {
    v13 = v9[1];
    if (v13 == v5)
      break;
    if (v13 >= *(_QWORD *)&v2)
      v13 %= *(_QWORD *)&v2;
    if (v13 != v7)
      return;
LABEL_14:
    v9 = (_QWORD *)*v9;
    if (!v9)
      return;
  }
  if (v9[2] != v10 || *((_DWORD *)v9 + 6) != (_DWORD)v5)
    goto LABEL_14;
LABEL_28:
  v16 = v9[6];
  v17 = v9[7];
  while (v16 != v17)
  {
    v19 = (int8x8_t)a1[1];
    if (v19)
    {
      v20 = *(unsigned int *)(v16 + 24);
      v21 = (uint8x8_t)vcnt_s8(v19);
      v21.i16[0] = vaddlv_u8(v21);
      if (v21.u32[0] > 1uLL)
      {
        v22 = *(unsigned int *)(v16 + 24);
        if (*(_QWORD *)&v19 <= v20)
          v22 = v20 % *(_QWORD *)&v19;
      }
      else
      {
        v22 = (v19.i32[0] - 1) & v20;
      }
      v18 = *(uint64_t **)(*a1 + 8 * v22);
      if (v18)
      {
        v18 = (uint64_t *)*v18;
        if (v18)
        {
          v23 = *(_QWORD *)(v16 + 16);
          if (v21.u32[0] < 2uLL)
          {
            v24 = *(_QWORD *)&v19 - 1;
            while (1)
            {
              v28 = v18[1];
              if (v28 == v20)
              {
                if (v18[2] == v23 && *((_DWORD *)v18 + 6) == (_DWORD)v20)
                  goto LABEL_30;
              }
              else if ((v28 & v24) != v22)
              {
                goto LABEL_29;
              }
              v18 = (uint64_t *)*v18;
              if (!v18)
                goto LABEL_30;
            }
          }
          do
          {
            v26 = v18[1];
            if (v26 == v20)
            {
              if (v18[2] == v23 && *((_DWORD *)v18 + 6) == (_DWORD)v20)
                break;
            }
            else
            {
              if (v26 >= *(_QWORD *)&v19)
                v26 %= *(_QWORD *)&v19;
              if (v26 != v22)
                goto LABEL_29;
            }
            v18 = (uint64_t *)*v18;
          }
          while (v18);
        }
      }
    }
    else
    {
LABEL_29:
      v18 = 0;
    }
LABEL_30:
    sub_20F7C2138(v18 + 4, a2);
    v16 += 472;
  }
  v29 = v9[9];
  v30 = v9[10];
  while (v29 != v30)
  {
    v32 = (int8x8_t)a1[1];
    if (v32)
    {
      v33 = *(unsigned int *)(v29 + 24);
      v34 = (uint8x8_t)vcnt_s8(v32);
      v34.i16[0] = vaddlv_u8(v34);
      if (v34.u32[0] >= 2uLL)
      {
        v35 = *(unsigned int *)(v29 + 24);
        if (*(_QWORD *)&v32 <= v33)
          v35 = v33 % *(_QWORD *)&v32;
      }
      else
      {
        v35 = (v32.i32[0] - 1) & v33;
      }
      v31 = *(uint64_t **)(*a1 + 8 * v35);
      if (v31)
      {
        v31 = (uint64_t *)*v31;
        if (v31)
        {
          v36 = *(_QWORD *)(v29 + 16);
          if (v34.u32[0] < 2uLL)
          {
            v37 = *(_QWORD *)&v32 - 1;
            while (1)
            {
              v41 = v31[1];
              if (v41 == v33)
              {
                if (v31[2] == v36 && *((_DWORD *)v31 + 6) == (_DWORD)v33)
                  goto LABEL_61;
              }
              else if ((v41 & v37) != v35)
              {
                goto LABEL_60;
              }
              v31 = (uint64_t *)*v31;
              if (!v31)
                goto LABEL_61;
            }
          }
          do
          {
            v39 = v31[1];
            if (v39 == v33)
            {
              if (v31[2] == v36 && *((_DWORD *)v31 + 6) == (_DWORD)v33)
                break;
            }
            else
            {
              if (v39 >= *(_QWORD *)&v32)
                v39 %= *(_QWORD *)&v32;
              if (v39 != v35)
                goto LABEL_60;
            }
            v31 = (uint64_t *)*v31;
          }
          while (v31);
        }
      }
    }
    else
    {
LABEL_60:
      v31 = 0;
    }
LABEL_61:
    sub_20F7C2138(v31 + 4, a2);
    v29 += 472;
  }
  v42 = (int8x8_t)a1[1];
  v43 = v9[1];
  v44 = (uint8x8_t)vcnt_s8(v42);
  v44.i16[0] = vaddlv_u8(v44);
  if (v44.u32[0] > 1uLL)
  {
    if (v43 >= *(_QWORD *)&v42)
      v43 %= *(_QWORD *)&v42;
  }
  else
  {
    v43 &= *(_QWORD *)&v42 - 1;
  }
  v45 = *(_QWORD **)(*a1 + 8 * v43);
  do
  {
    v46 = v45;
    v45 = (_QWORD *)*v45;
  }
  while (v45 != v9);
  if (v46 == a1 + 2)
    goto LABEL_107;
  v47 = v46[1];
  if (v44.u32[0] > 1uLL)
  {
    if (v47 >= *(_QWORD *)&v42)
      v47 %= *(_QWORD *)&v42;
  }
  else
  {
    v47 &= *(_QWORD *)&v42 - 1;
  }
  if (v47 != v43)
  {
LABEL_107:
    if (!*v9)
      goto LABEL_108;
    v48 = *(_QWORD *)(*v9 + 8);
    if (v44.u32[0] > 1uLL)
    {
      if (v48 >= *(_QWORD *)&v42)
        v48 %= *(_QWORD *)&v42;
    }
    else
    {
      v48 &= *(_QWORD *)&v42 - 1;
    }
    if (v48 != v43)
LABEL_108:
      *(_QWORD *)(*a1 + 8 * v43) = 0;
  }
  v49 = *v9;
  if (*v9)
  {
    v50 = *(_QWORD *)(v49 + 8);
    if (v44.u32[0] > 1uLL)
    {
      if (v50 >= *(_QWORD *)&v42)
        v50 %= *(_QWORD *)&v42;
    }
    else
    {
      v50 &= *(_QWORD *)&v42 - 1;
    }
    if (v50 != v43)
    {
      *(_QWORD *)(*a1 + 8 * v50) = v46;
      v49 = *v9;
    }
  }
  *v46 = v49;
  *v9 = 0;
  --a1[3];
  v51 = (void *)v9[9];
  if (v51)
  {
    v9[10] = v51;
    operator delete(v51);
  }
  v52 = (void *)v9[6];
  if (v52)
  {
    v9[7] = v52;
    operator delete(v52);
  }
  operator delete(v9);
}

_QWORD *sub_20F7C3F38(_QWORD *result, uint64_t a2, uint64_t a3)
{
  int8x8_t v3;
  unint64_t v5;
  uint8x8_t v6;
  unint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  unint64_t v11;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t **v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v21;
  uint64_t v23;

  v3 = (int8x8_t)result[1];
  if (!*(_QWORD *)&v3)
    return result;
  v5 = *(unsigned int *)(a2 + 8);
  v6 = (uint8x8_t)vcnt_s8(v3);
  v6.i16[0] = vaddlv_u8(v6);
  if (v6.u32[0] > 1uLL)
  {
    v7 = *(unsigned int *)(a2 + 8);
    if (*(_QWORD *)&v3 <= v5)
      v7 = v5 % *(_QWORD *)&v3;
  }
  else
  {
    v7 = (v3.i32[0] - 1) & v5;
  }
  v8 = *(uint64_t **)(*result + 8 * v7);
  if (!v8)
    goto LABEL_28;
  v8 = (uint64_t *)*v8;
  if (!v8)
    goto LABEL_28;
  v9 = *(_QWORD *)a2;
  if (v6.u32[0] < 2uLL)
  {
    while (1)
    {
      v13 = v8[1];
      if (v13 == v5)
      {
        if (v8[2] == v9 && *((_DWORD *)v8 + 6) == (_DWORD)v5)
          goto LABEL_28;
      }
      else if ((v13 & (*(_QWORD *)&v3 - 1)) != v7)
      {
        goto LABEL_27;
      }
      v8 = (uint64_t *)*v8;
      if (!v8)
        goto LABEL_28;
    }
  }
  while (1)
  {
    v11 = v8[1];
    if (v11 != v5)
      break;
    if (v8[2] == v9 && *((_DWORD *)v8 + 6) == (_DWORD)v5)
      goto LABEL_28;
LABEL_14:
    v8 = (uint64_t *)*v8;
    if (!v8)
      goto LABEL_28;
  }
  if (v11 >= *(_QWORD *)&v3)
    v11 %= *(_QWORD *)&v3;
  if (v11 == v7)
    goto LABEL_14;
LABEL_27:
  v8 = 0;
LABEL_28:
  v14 = *(unsigned int *)(a3 + 8);
  if (v6.u32[0] > 1uLL)
  {
    v15 = *(unsigned int *)(a3 + 8);
    if (*(_QWORD *)&v3 <= v14)
      v15 = v14 % *(_QWORD *)&v3;
  }
  else
  {
    v15 = (v3.i32[0] - 1) & v14;
  }
  v16 = *(uint64_t ***)(*result + 8 * v15);
  if (v16)
  {
    v17 = *v16;
    if (*v16)
    {
      v18 = *(_QWORD *)a3;
      if (v6.u32[0] < 2uLL)
      {
        v19 = *(_QWORD *)&v3 - 1;
        while (1)
        {
          v23 = v17[1];
          if (v23 == v14)
          {
            if (v17[2] == v18 && *((_DWORD *)v17 + 6) == (_DWORD)v14)
              goto LABEL_54;
          }
          else if ((v23 & v19) != v15)
          {
            return result;
          }
          v17 = (uint64_t *)*v17;
          if (!v17)
            return result;
        }
      }
      do
      {
        v21 = v17[1];
        if (v21 == v14)
        {
          if (v17[2] == v18 && *((_DWORD *)v17 + 6) == (_DWORD)v14)
          {
LABEL_54:
            if (v8)
            {
              sub_20F7C2138(v8 + 4, a3);
              return sub_20F7C2138(v17 + 4, a2);
            }
            return result;
          }
        }
        else
        {
          if (v21 >= *(_QWORD *)&v3)
            v21 %= *(_QWORD *)&v3;
          if (v21 != v15)
            return result;
        }
        v17 = (uint64_t *)*v17;
      }
      while (v17);
    }
  }
  return result;
}

uint64_t sub_20F7C412C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *i;
  void *v5;
  int v6;
  _QWORD *v7;
  void **v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t j;
  uint64_t k;
  uint64_t v14;
  uint64_t *v15;
  int v16;
  void *v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  void *v22;
  void *v23;
  size_t v24;
  unint64_t v25;
  const void *v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  _QWORD *__dst;
  void *v33;
  uint64_t v34;
  unsigned __int8 v35;
  void *__p[2];
  __int128 v37;
  int v38;
  _QWORD v39[2];
  _QWORD v40[3];
  const void *v41;
  uint64_t v42;
  const void *v43;
  unint64_t v44;
  void *v45;
  char v46;
  unint64_t v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  int v51;

  sub_20E863438((uint64_t)v39);
  sub_20E86A980(v40, (uint64_t)"PoseGraphNodeGroup::DebugLog: \n", 31);
  __dst = (_QWORD *)a2;
  for (i = *(uint64_t **)(a1 + 16); i; i = (uint64_t *)*i)
  {
    v5 = (void *)i[2];
    v6 = *((_DWORD *)i + 6);
    v7 = sub_20E86A980(v40, (uint64_t)"N_id: ", 6);
    v33 = v5;
    LODWORD(v34) = v6;
    sub_210216370((uint64_t)&v33);
    if ((SBYTE7(v37) & 0x80u) == 0)
      v8 = __p;
    else
      v8 = (void **)__p[0];
    if ((SBYTE7(v37) & 0x80u) == 0)
      v9 = BYTE7(v37);
    else
      v9 = (uint64_t)__p[1];
    v10 = sub_20E86A980(v7, (uint64_t)v8, v9);
    sub_20E86A980(v10, (uint64_t)"->ne_id:(", 9);
    if (SBYTE7(v37) < 0)
      operator delete(__p[0]);
    *(_OWORD *)__p = 0u;
    v37 = 0u;
    v38 = 1065353216;
    v11 = i[6];
    for (j = i[7]; v11 != j; v11 += 472)
      sub_20F28FE1C((uint64_t)__p, (uint64_t *)(v11 + 16), (_OWORD *)(v11 + 16));
    v14 = i[9];
    for (k = i[10]; v14 != k; v14 += 472)
      sub_20F28FE1C((uint64_t)__p, (uint64_t *)(v14 + 16), (_OWORD *)(v14 + 16));
    v15 = (uint64_t *)v37;
    if ((_QWORD)v37)
    {
      do
      {
        v16 = *((_DWORD *)v15 + 6);
        v50 = v15[2];
        v51 = v16;
        sub_210216370((uint64_t)&v50);
        if ((v35 & 0x80u) == 0)
          v17 = &v33;
        else
          v17 = v33;
        if ((v35 & 0x80u) == 0)
          v18 = v35;
        else
          v18 = v34;
        v19 = sub_20E86A980(v40, (uint64_t)v17, v18);
        sub_20E86A980(v19, (uint64_t)", ", 2);
        if ((char)v35 < 0)
          operator delete(v33);
        v15 = (uint64_t *)*v15;
      }
      while (v15);
      v20 = (_QWORD *)v37;
      if ((_QWORD)v37)
      {
        do
        {
          v21 = (_QWORD *)*v20;
          operator delete(v20);
          v20 = v21;
        }
        while (v21);
      }
    }
    v22 = __p[0];
    __p[0] = 0;
    if (v22)
      operator delete(v22);
    sub_20E86A980(v40, (uint64_t)"), ", 3);
  }
  sub_20E86A980(v40, (uint64_t)"\n", 1);
  v23 = (void *)a2;
  if ((v48 & 0x10) != 0)
  {
    v25 = v47;
    if (v47 < v44)
    {
      v47 = v44;
      v25 = v44;
    }
    v26 = v43;
    v24 = v25 - (_QWORD)v43;
    if (v25 - (unint64_t)v43 >= 0x7FFFFFFFFFFFFFF8)
      goto LABEL_47;
  }
  else
  {
    if ((v48 & 8) == 0)
    {
      v24 = 0;
      *(_BYTE *)(a2 + 23) = 0;
      goto LABEL_43;
    }
    v26 = v41;
    v24 = v42 - (_QWORD)v41;
    if ((unint64_t)(v42 - (_QWORD)v41) >= 0x7FFFFFFFFFFFFFF8)
LABEL_47:
      sub_20E860B7C();
  }
  if (v24 >= 0x17)
  {
    v27 = (v24 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v24 | 7) != 0x17)
      v27 = v24 | 7;
    v28 = v27 + 1;
    v29 = operator new(v27 + 1);
    __dst[1] = v24;
    __dst[2] = v28 | 0x8000000000000000;
    *__dst = v29;
    v23 = v29;
    goto LABEL_42;
  }
  *(_BYTE *)(a2 + 23) = v24;
  if (v24)
LABEL_42:
    memmove(v23, v26, v24);
LABEL_43:
  *((_BYTE *)v23 + v24) = 0;
  v39[0] = *MEMORY[0x24BEDB7F0];
  v30 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  *(_QWORD *)((char *)v39 + *(_QWORD *)(v39[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
  v40[0] = v30;
  v40[1] = MEMORY[0x24BEDB848] + 16;
  if (v46 < 0)
    operator delete(v45);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x212BC6290](&v49);
}

void sub_20F7C4488(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  sub_20E863784((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20F7C44A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25)
{
  if (a21 < 0)
  {
    operator delete(__p);
    sub_20E863784((uint64_t)&a25);
    _Unwind_Resume(a1);
  }
  sub_20E863784((uint64_t)&a25);
  _Unwind_Resume(a1);
}

uint64_t sub_20F7C4504(uint64_t *a1, int8x16_t *a2)
{
  int8x16_t *v2;
  __int32 v3;
  __int32 v4;
  _BOOL4 v5;
  int8x8_t v6;
  unint64_t v9;
  uint8x8_t v10;
  unint64_t v11;
  uint64_t **v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t **v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v27;
  unint64_t v29;
  uint64_t i64;
  int8x16_t *v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int v35;
  _QWORD v36[2];
  int v37;
  _QWORD v38[2];
  int v39;

  v2 = a2;
  v3 = a2[1].i32[0];
  v4 = a2[2].i32[2];
  v5 = (v3 & v4) == -1;
  if ((v3 & v4) == 0xFFFFFFFF)
  {
    v35 = 0;
    v6 = (int8x8_t)a1[1];
    if (!*(_QWORD *)&v6)
      return 1;
  }
  else
  {
    if (v3 == -1 || v4 == -1)
    {
      sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/MapOptimization/src/PoseGraphEdgeUtil.cpp", 36, (uint64_t)"", 0, (uint64_t)"Invalid relocalization results", 30, (void (*)(void **))sub_21023DDB0);
      abort();
    }
    v35 = 1;
    v6 = (int8x8_t)a1[1];
    if (!*(_QWORD *)&v6)
      return 1;
  }
  v9 = a2[2].u32[0];
  v10 = (uint8x8_t)vcnt_s8(v6);
  v10.i16[0] = vaddlv_u8(v10);
  if (v10.u32[0] > 1uLL)
  {
    v11 = a2[2].u32[0];
    if (*(_QWORD *)&v6 <= v9)
      v11 = v9 % *(_QWORD *)&v6;
  }
  else
  {
    v11 = (v6.i32[0] - 1) & v9;
  }
  v12 = *(uint64_t ***)(*a1 + 8 * v11);
  if (!v12)
    return 1;
  v13 = *v12;
  if (!*v12)
    return 1;
  v14 = &a2[1].i64[1];
  v15 = *(_QWORD *)&v6 - 1;
  v16 = v2[1].i64[1];
  if (v10.u32[0] < 2uLL)
  {
    while (1)
    {
      v18 = v13[1];
      if (v18 == v9)
      {
        if (v13[2] == v16 && *((_DWORD *)v13 + 6) == (_DWORD)v9)
          goto LABEL_35;
      }
      else if ((v18 & v15) != v11)
      {
        return 1;
      }
      v13 = (uint64_t *)*v13;
      if (!v13)
        return 1;
    }
  }
  while (1)
  {
    v20 = v13[1];
    if (v20 == v9)
      break;
    if (v20 >= *(_QWORD *)&v6)
      v20 %= *(_QWORD *)&v6;
    if (v20 != v11)
      return 1;
LABEL_29:
    v13 = (uint64_t *)*v13;
    if (!v13)
      return 1;
  }
  if (v13[2] != v16 || *((_DWORD *)v13 + 6) != (_DWORD)v9)
    goto LABEL_29;
LABEL_35:
  v21 = v2->u32[2];
  if (v10.u32[0] > 1uLL)
  {
    v22 = v2->u32[2];
    if (*(_QWORD *)&v6 <= v21)
      v22 = v21 % *(_QWORD *)&v6;
  }
  else
  {
    v22 = (v6.i32[0] - 1) & v21;
  }
  v23 = *(uint64_t ***)(*a1 + 8 * v22);
  if (!v23)
    return 1;
  v24 = *v23;
  if (!*v23)
    return 1;
  v25 = v2->i64[0];
  if (v10.u32[0] < 2uLL)
  {
    while (1)
    {
      v27 = v24[1];
      if (v27 == v21)
      {
        if (v24[2] == v25 && *((_DWORD *)v24 + 6) == (_DWORD)v21)
          goto LABEL_61;
      }
      else if ((v27 & v15) != v22)
      {
        return 1;
      }
      v24 = (uint64_t *)*v24;
      if (!v24)
        return 1;
    }
  }
  while (2)
  {
    v29 = v24[1];
    if (v29 != v21)
    {
      if (v29 >= *(_QWORD *)&v6)
        v29 %= *(_QWORD *)&v6;
      if (v29 != v22)
        return 1;
      goto LABEL_55;
    }
    if (v24[2] != v25 || *((_DWORD *)v24 + 6) != (_DWORD)v21)
    {
LABEL_55:
      v24 = (uint64_t *)*v24;
      if (!v24)
        return 1;
      continue;
    }
    break;
  }
LABEL_61:
  i64 = (uint64_t)v2[3].i64;
  v31 = v2 + 11;
  v32 = v2[29].i32[0];
  if (v5)
  {
    v33 = v2[2].i64[0];
    v38[0] = v2[1].i64[1];
    v38[1] = v33;
    v39 = -1;
    v34 = v2->i64[1];
    v36[0] = v25;
    v36[1] = v34;
    v37 = -1;
    v14 = v38;
    v2 = (int8x16_t *)v36;
  }
  sub_20F7C2840(a1, v14, v2->i64, &v35, -1, i64, v31, v32);
  return 1;
}

uint64_t sub_20F7C4798(_QWORD *a1, uint64_t *a2, uint64_t a3, unsigned int *a4)
{
  int8x8_t v4;
  unint64_t v5;
  uint8x8_t v6;
  unint64_t v7;
  uint64_t **v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v14;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;

  v4 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v4)
    return 0;
  v5 = *((unsigned int *)a2 + 2);
  v6 = (uint8x8_t)vcnt_s8(v4);
  v6.i16[0] = vaddlv_u8(v6);
  if (v6.u32[0] > 1uLL)
  {
    v7 = *((unsigned int *)a2 + 2);
    if (*(_QWORD *)&v4 <= v5)
      v7 = v5 % *(_QWORD *)&v4;
  }
  else
  {
    v7 = (v4.i32[0] - 1) & v5;
  }
  v9 = *(uint64_t ***)(*a1 + 8 * v7);
  if (!v9)
    return 0;
  v10 = *v9;
  if (!v10)
    return 0;
  v11 = *a2;
  if (v6.u32[0] < 2uLL)
  {
    v12 = *(_QWORD *)&v4 - 1;
    while (1)
    {
      v16 = v10[1];
      if (v16 == v5)
      {
        if (v10[2] == v11 && *((_DWORD *)v10 + 6) == (_DWORD)v5)
          goto LABEL_29;
      }
      else if ((v16 & v12) != v7)
      {
        return 0;
      }
      v10 = (uint64_t *)*v10;
      if (!v10)
        return 0;
    }
  }
  while (1)
  {
    v14 = v10[1];
    if (v14 == v5)
      break;
    if (v14 >= *(_QWORD *)&v4)
      v14 %= *(_QWORD *)&v4;
    if (v14 != v7)
      return 0;
LABEL_15:
    v10 = (uint64_t *)*v10;
    if (!v10)
      return 0;
  }
  if (v10[2] != v11 || *((_DWORD *)v10 + 6) != (_DWORD)v5)
    goto LABEL_15;
LABEL_29:
  v17 = &v10[3 * *a4];
  v18 = v17[6];
  v19 = v17[7];
  if (v18 != v19)
  {
    while (*(_DWORD *)(v18 + 4) != *((_DWORD *)a2 + 4)
         || *(_DWORD *)(v18 + 8) != *(_DWORD *)(a3 + 16)
         || *(_QWORD *)(v18 + 16) != *(_QWORD *)a3
         || *(_DWORD *)(v18 + 24) != *(_DWORD *)(a3 + 8))
    {
      v18 += 472;
      if (v18 == v19)
        return 0;
    }
  }
  if (v19 != v18)
    return v18;
  return 0;
}

char *sub_20F7C491C(void **a1, uint64_t a2)
{
  char *v3;
  char *v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v8;
  _DWORD *v9;
  char *v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  char *v15;
  _BYTE *v16;
  _BYTE *v17;
  char *v18;
  char *v19;
  uint64_t v20;
  char *v21;
  char *v22;
  char *v23;
  __int128 v24;
  char *v25;
  char *v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;

  v4 = (char *)*a1;
  v3 = (char *)a1[1];
  v5 = 0xCBEEA4E1A08AD8F3 * ((v3 - (_BYTE *)*a1) >> 3);
  v6 = v5 + 1;
  if (v5 + 1 > 0x8AD8F2FBA93868)
    sub_20F45A4CC();
  if (0x97DD49C34115B1E6 * (((_BYTE *)a1[2] - v4) >> 3) > v6)
    v6 = 0x97DD49C34115B1E6 * (((_BYTE *)a1[2] - v4) >> 3);
  if (0xCBEEA4E1A08AD8F3 * (((_BYTE *)a1[2] - v4) >> 3) >= 0x456C797DD49C34)
    v8 = 0x8AD8F2FBA93868;
  else
    v8 = v6;
  if (v8)
  {
    if (v8 > 0x8AD8F2FBA93868)
      sub_20E877A38();
    v9 = operator new(472 * v8);
  }
  else
  {
    v9 = 0;
  }
  v10 = (char *)&v9[118 * v5];
  *(_OWORD *)v10 = *(_OWORD *)a2;
  *(_OWORD *)(v10 + 12) = *(_OWORD *)(a2 + 12);
  v10[32] = 0;
  v10[160] = 0;
  if (*(_BYTE *)(a2 + 160))
  {
    v11 = *(_OWORD *)(a2 + 112);
    *((_OWORD *)v10 + 6) = *(_OWORD *)(a2 + 96);
    *((_OWORD *)v10 + 7) = v11;
    v12 = *(_OWORD *)(a2 + 144);
    *((_OWORD *)v10 + 8) = *(_OWORD *)(a2 + 128);
    *((_OWORD *)v10 + 9) = v12;
    v13 = *(_OWORD *)(a2 + 48);
    *((_OWORD *)v10 + 2) = *(_OWORD *)(a2 + 32);
    *((_OWORD *)v10 + 3) = v13;
    v14 = *(_OWORD *)(a2 + 80);
    *((_OWORD *)v10 + 4) = *(_OWORD *)(a2 + 64);
    *((_OWORD *)v10 + 5) = v14;
    v10[160] = 1;
  }
  v15 = (char *)&v9[118 * v5];
  v15[168] = 0;
  v16 = v15 + 168;
  v16[288] = 0;
  if (*(_BYTE *)(a2 + 456))
  {
    v17 = v16 + 288;
    memcpy(v16, (const void *)(a2 + 168), 0x120uLL);
    *v17 = 1;
  }
  v18 = (char *)&v9[118 * v8];
  v9[118 * v5 + 116] = *(_DWORD *)(a2 + 464);
  v19 = v10 + 472;
  if (v3 != v4)
  {
    v20 = 0;
    do
    {
      v21 = &v10[v20];
      v22 = &v10[v20 - 472];
      v23 = &v3[v20];
      v24 = *(_OWORD *)&v3[v20 - 472];
      *(_OWORD *)(v22 + 12) = *(_OWORD *)&v3[v20 - 460];
      *(_OWORD *)v22 = v24;
      v25 = &v10[v20 - 440];
      *v25 = 0;
      v26 = &v10[v20 - 312];
      *v26 = 0;
      if (v3[v20 - 312])
      {
        v27 = *(_OWORD *)(v23 - 440);
        v28 = *(_OWORD *)(v23 - 424);
        v29 = *(_OWORD *)(v23 - 392);
        *(_OWORD *)&v10[v20 - 408] = *(_OWORD *)(v23 - 408);
        *(_OWORD *)&v10[v20 - 392] = v29;
        *(_OWORD *)v25 = v27;
        *(_OWORD *)&v10[v20 - 424] = v28;
        v30 = *(_OWORD *)(v23 - 376);
        v31 = *(_OWORD *)(v23 - 360);
        v32 = *(_OWORD *)(v23 - 328);
        *(_OWORD *)&v10[v20 - 344] = *(_OWORD *)(v23 - 344);
        *(_OWORD *)&v10[v20 - 328] = v32;
        *(_OWORD *)&v10[v20 - 376] = v30;
        *(_OWORD *)&v10[v20 - 360] = v31;
        *v26 = 1;
      }
      *(v21 - 304) = 0;
      *(v21 - 16) = 0;
      if (*(v23 - 16))
      {
        memcpy(v21 - 304, &v3[v20 - 304], 0x120uLL);
        *(v21 - 16) = 1;
      }
      *(_DWORD *)&v10[v20 - 8] = *(_DWORD *)&v3[v20 - 8];
      v20 -= 472;
    }
    while (&v3[v20] != v4);
    v3 = (char *)*a1;
    v10 += v20;
  }
  *a1 = v10;
  a1[1] = v19;
  a1[2] = v18;
  if (v3)
    operator delete(v3);
  return v19;
}

char *sub_20F7C4B80(uint64_t *a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  unint64_t v4;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  void **v10;
  char *v11;
  unint64_t v13;
  uint64_t v15;
  _QWORD *v16;
  __int128 v17;
  float v18;
  float v19;
  uint64_t v20;
  _QWORD *v21;
  _BOOL8 v22;
  unint64_t v23;
  unint64_t v24;
  size_t prime;
  void *v26;
  void *v27;
  uint64_t v28;
  _QWORD *v29;
  size_t v30;
  size_t v31;
  size_t v32;
  _QWORD *i;
  size_t v34;
  uint64_t v35;
  unint64_t v36;
  uint8x8_t v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  size_t v41;
  void *v42;
  unint64_t v43;

  v7 = a3;
  v8 = a1[1];
  if (v8)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v4 = a3;
      if (v8 <= a3)
        v4 = a3 % v8;
    }
    else
    {
      v4 = ((_DWORD)v8 - 1) & a3;
    }
    v10 = *(void ***)(*a1 + 8 * v4);
    if (v10)
    {
      v11 = (char *)*v10;
      if (*v10)
      {
        if (v9.u32[0] < 2uLL)
        {
          while (1)
          {
            v15 = *((_QWORD *)v11 + 1);
            if (v15 == a3)
            {
              if (*((_QWORD *)v11 + 2) == a2 && *((_DWORD *)v11 + 6) == a3)
                return v11;
            }
            else if ((v15 & (v8 - 1)) != v4)
            {
              goto LABEL_28;
            }
            v11 = *(char **)v11;
            if (!v11)
              goto LABEL_28;
          }
        }
        do
        {
          v13 = *((_QWORD *)v11 + 1);
          if (v13 == a3)
          {
            if (*((_QWORD *)v11 + 2) == a2 && *((_DWORD *)v11 + 6) == a3)
              return v11;
          }
          else
          {
            if (v13 >= v8)
              v13 %= v8;
            if (v13 != v4)
              break;
          }
          v11 = *(char **)v11;
        }
        while (v11);
      }
    }
  }
LABEL_28:
  v16 = a1 + 2;
  v11 = (char *)operator new(0x60uLL);
  *(_QWORD *)v11 = 0;
  *((_QWORD *)v11 + 1) = v7;
  v17 = *(_OWORD *)(a4 + 16);
  *((_OWORD *)v11 + 1) = *(_OWORD *)a4;
  *((_OWORD *)v11 + 2) = v17;
  *((_OWORD *)v11 + 3) = *(_OWORD *)(a4 + 32);
  *((_QWORD *)v11 + 8) = *(_QWORD *)(a4 + 48);
  *(_QWORD *)(a4 + 32) = 0;
  *(_QWORD *)(a4 + 40) = 0;
  *(_OWORD *)(v11 + 72) = *(_OWORD *)(a4 + 56);
  *((_QWORD *)v11 + 11) = *(_QWORD *)(a4 + 72);
  *(_QWORD *)(a4 + 48) = 0;
  *(_QWORD *)(a4 + 56) = 0;
  *(_QWORD *)(a4 + 64) = 0;
  *(_QWORD *)(a4 + 72) = 0;
  v18 = (float)(unint64_t)(a1[3] + 1);
  v19 = *((float *)a1 + 8);
  if (!v8 || (float)(v19 * (float)v8) < v18)
  {
    v22 = 1;
    if (v8 >= 3)
      v22 = (v8 & (v8 - 1)) != 0;
    v23 = v22 | (2 * v8);
    v24 = vcvtps_u32_f32(v18 / v19);
    if (v23 <= v24)
      prime = v24;
    else
      prime = v23;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
    }
    v8 = a1[1];
    if (prime > v8)
    {
LABEL_42:
      if (prime >> 61)
        sub_20E877A38();
      v26 = operator new(8 * prime);
      v27 = (void *)*a1;
      *a1 = (uint64_t)v26;
      if (v27)
        operator delete(v27);
      v28 = 0;
      a1[1] = prime;
      do
        *(_QWORD *)(*a1 + 8 * v28++) = 0;
      while (prime != v28);
      v29 = (_QWORD *)*v16;
      if (!*v16)
        goto LABEL_74;
      v30 = v29[1];
      v31 = prime - 1;
      if ((prime & (prime - 1)) == 0)
      {
        v32 = v30 & v31;
        *(_QWORD *)(*a1 + 8 * v32) = v16;
        for (i = (_QWORD *)*v29; *v29; i = (_QWORD *)*v29)
        {
          v34 = i[1] & v31;
          if (v34 == v32)
          {
            v29 = i;
          }
          else if (*(_QWORD *)(*a1 + 8 * v34))
          {
            *v29 = *i;
            v35 = 8 * v34;
            *i = **(_QWORD **)(*a1 + v35);
            **(_QWORD **)(*a1 + v35) = i;
          }
          else
          {
            *(_QWORD *)(*a1 + 8 * v34) = v29;
            v29 = i;
            v32 = v34;
          }
        }
        goto LABEL_74;
      }
      if (v30 >= prime)
        v30 %= prime;
      *(_QWORD *)(*a1 + 8 * v30) = v16;
      v39 = (_QWORD *)*v29;
      if (!*v29)
      {
LABEL_74:
        v8 = prime;
        if ((prime & (prime - 1)) != 0)
          goto LABEL_75;
        goto LABEL_90;
      }
      while (1)
      {
        v41 = v39[1];
        if (v41 >= prime)
          v41 %= prime;
        if (v41 == v30)
          goto LABEL_68;
        if (*(_QWORD *)(*a1 + 8 * v41))
        {
          *v29 = *v39;
          v40 = 8 * v41;
          *v39 = **(_QWORD **)(*a1 + v40);
          **(_QWORD **)(*a1 + v40) = v39;
          v39 = v29;
LABEL_68:
          v29 = v39;
          v39 = (_QWORD *)*v39;
          if (!v39)
            goto LABEL_74;
        }
        else
        {
          *(_QWORD *)(*a1 + 8 * v41) = v29;
          v29 = v39;
          v39 = (_QWORD *)*v39;
          v30 = v41;
          if (!v39)
            goto LABEL_74;
        }
      }
    }
    if (prime < v8)
    {
      v36 = vcvtps_u32_f32((float)(unint64_t)a1[3] / *((float *)a1 + 8));
      if (v8 < 3 || (v37 = (uint8x8_t)vcnt_s8((int8x8_t)v8), v37.i16[0] = vaddlv_u8(v37), v37.u32[0] > 1uLL))
      {
        v36 = std::__next_prime(v36);
      }
      else
      {
        v38 = 1 << -(char)__clz(v36 - 1);
        if (v36 >= 2)
          v36 = v38;
      }
      if (prime <= v36)
        prime = v36;
      if (prime < v8)
      {
        if (!prime)
        {
          v42 = (void *)*a1;
          *a1 = 0;
          if (v42)
            operator delete(v42);
          v8 = 0;
          a1[1] = 0;
          goto LABEL_90;
        }
        goto LABEL_42;
      }
      v8 = a1[1];
    }
    if ((v8 & (v8 - 1)) != 0)
    {
LABEL_75:
      if (v8 <= v7)
      {
        v4 = v7 % v8;
        v20 = *a1;
        v21 = *(_QWORD **)(*a1 + 8 * (v7 % v8));
        if (v21)
          goto LABEL_31;
      }
      else
      {
        v4 = v7;
        v20 = *a1;
        v21 = *(_QWORD **)(*a1 + 8 * v7);
        if (v21)
          goto LABEL_31;
      }
      goto LABEL_91;
    }
LABEL_90:
    v4 = ((_DWORD)v8 - 1) & v7;
    v20 = *a1;
    v21 = *(_QWORD **)(*a1 + 8 * v4);
    if (v21)
      goto LABEL_31;
    goto LABEL_91;
  }
  v20 = *a1;
  v21 = *(_QWORD **)(*a1 + 8 * v4);
  if (v21)
  {
LABEL_31:
    *(_QWORD *)v11 = *v21;
LABEL_97:
    *v21 = v11;
    goto LABEL_98;
  }
LABEL_91:
  *(_QWORD *)v11 = *v16;
  *v16 = v11;
  *(_QWORD *)(v20 + 8 * v4) = v16;
  if (*(_QWORD *)v11)
  {
    v43 = *(_QWORD *)(*(_QWORD *)v11 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v43 >= v8)
        v43 %= v8;
    }
    else
    {
      v43 &= v8 - 1;
    }
    v21 = (_QWORD *)(*a1 + 8 * v43);
    goto LABEL_97;
  }
LABEL_98:
  ++a1[3];
  return v11;
}

void sub_20F7C5068(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20F45AF90((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20F7C507C(_QWORD *a1@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X8>)
{
  _QWORD *v3;
  int8x8_t v4;
  unint64_t v5;
  uint8x8_t v6;
  unint64_t v7;
  uint64_t **v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  _QWORD *v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  int v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  int v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  int v38;
  unint64_t v39;
  _QWORD *v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  char *v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  _OWORD *v50;
  _OWORD *v51;
  __int128 v52;
  __int128 v53;
  _OWORD *v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  char v61;
  uint64_t v62;
  uint64_t v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  int v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  _QWORD *v76;
  int v77;
  int v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  int v83;
  unint64_t v84;
  _QWORD *v85;
  unint64_t v86;
  unint64_t v87;
  unint64_t v88;
  unint64_t v89;
  char *v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  _OWORD *v95;
  _OWORD *v96;
  __int128 v97;
  __int128 v98;
  _OWORD *v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  char v106;
  char *v107;
  unint64_t v108;
  int v109;
  char *v110;
  uint64_t v111;
  unint64_t v112;
  int v113;
  uint64_t v114;
  int v115;
  uint64_t v116;
  uint64_t v117;
  _BYTE __src[288];
  __int128 v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  uint64_t v129;

  v3 = a3;
  v129 = *MEMORY[0x24BDAC8D0];
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v4 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v4)
    goto LABEL_74;
  v5 = *((unsigned int *)a2 + 2);
  v6 = (uint8x8_t)vcnt_s8(v4);
  v6.i16[0] = vaddlv_u8(v6);
  if (v6.u32[0] > 1uLL)
  {
    v7 = *((unsigned int *)a2 + 2);
    if (*(_QWORD *)&v4 <= v5)
      v7 = v5 % *(_QWORD *)&v4;
  }
  else
  {
    v7 = (v4.i32[0] - 1) & v5;
  }
  v8 = *(uint64_t ***)(*a1 + 8 * v7);
  if (!v8 || (v9 = *v8) == 0)
  {
LABEL_74:
    sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/MapOptimization/src/PoseGraphNodeGroupUtil.cpp", 66, (uint64_t)"node_iter != pose_graph.nodes().end()", 37, (uint64_t)"Failed to find pose-graph node", 30, (void (*)(void **))sub_21023DDB0);
    abort();
  }
  v10 = *a2;
  if (v6.u32[0] < 2uLL)
  {
    v11 = *(_QWORD *)&v4 - 1;
    while (1)
    {
      v14 = v9[1];
      if (v14 == v5)
      {
        if (v9[2] == v10 && *((_DWORD *)v9 + 6) == (_DWORD)v5)
          goto LABEL_29;
      }
      else if ((v14 & v11) != v7)
      {
        goto LABEL_74;
      }
      v9 = (uint64_t *)*v9;
      if (!v9)
        goto LABEL_74;
    }
  }
  while (1)
  {
    v12 = v9[1];
    if (v12 == v5)
      break;
    if (v12 >= *(_QWORD *)&v4)
      v12 %= *(_QWORD *)&v4;
    if (v12 != v7)
      goto LABEL_74;
LABEL_11:
    v9 = (uint64_t *)*v9;
    if (!v9)
      goto LABEL_74;
  }
  if (v9[2] != v10 || *((_DWORD *)v9 + 6) != (_DWORD)v5)
    goto LABEL_11;
LABEL_29:
  v17 = v9[6];
  v16 = v9[7];
  v18 = v9[10] - v9[9];
  v19 = 0xCBEEA4E1A08AD8F3 * ((v16 - v17) >> 3) - 0x34115B1E5F75270DLL * (v18 >> 3);
  if (v19)
  {
    if (v19 > 0x8AD8F2FBA93868)
      sub_20E867F44();
    v20 = operator new(v18 + v16 - v17);
    *v3 = v20;
    v3[1] = v20;
    v3[2] = &v20[59 * v19];
    v17 = v9[6];
    v16 = v9[7];
    if (v17 == v16)
      goto LABEL_53;
  }
  else
  {
    v20 = 0;
    if (v17 == v16)
      goto LABEL_53;
  }
  v114 = v16;
  do
  {
    if (*(_BYTE *)(v17 + 160) && *(_BYTE *)(v17 + 456))
    {
      v29 = a2[1];
      v116 = *a2;
      v31 = *(_QWORD *)(v17 + 16);
      v30 = *(_QWORD *)(v17 + 24);
      v33 = *(_DWORD *)(v17 + 4);
      v32 = *(_DWORD *)(v17 + 8);
      v34 = *(_OWORD *)(v17 + 112);
      v125 = *(_OWORD *)(v17 + 96);
      v126 = v34;
      v35 = *(_OWORD *)(v17 + 144);
      v127 = *(_OWORD *)(v17 + 128);
      v128 = v35;
      v36 = *(_OWORD *)(v17 + 48);
      v121 = *(_OWORD *)(v17 + 32);
      v122 = v36;
      v37 = *(_OWORD *)(v17 + 80);
      v123 = *(_OWORD *)(v17 + 64);
      v124 = v37;
      memcpy(__src, (const void *)(v17 + 168), sizeof(__src));
      v38 = *(_DWORD *)(v17 + 464);
      v39 = v3[2];
      if ((unint64_t)v20 < v39)
      {
        *v20 = v31;
        v20[1] = v30;
        *((_DWORD *)v20 + 4) = v32;
        v20[3] = v116;
        v20[4] = v29;
        *((_DWORD *)v20 + 10) = v33;
        v22 = v123;
        v21 = v124;
        v23 = v122;
        *((_OWORD *)v20 + 3) = v121;
        *((_OWORD *)v20 + 4) = v23;
        v25 = v127;
        v24 = v128;
        v26 = v126;
        *((_OWORD *)v20 + 7) = v125;
        *((_OWORD *)v20 + 8) = v26;
        *((_OWORD *)v20 + 9) = v25;
        *((_OWORD *)v20 + 10) = v24;
        *((_OWORD *)v20 + 5) = v22;
        *((_OWORD *)v20 + 6) = v21;
        v27 = v38;
        memcpy(v20 + 22, __src, 0x120uLL);
        *((_DWORD *)v20 + 116) = v27;
        *((_BYTE *)v20 + 468) = 0;
        v28 = (char *)(v20 + 59);
        v3 = a3;
      }
      else
      {
        v111 = v31;
        v40 = (_QWORD *)*a3;
        v41 = 0xCBEEA4E1A08AD8F3 * (((uint64_t)v20 - *a3) >> 3);
        v42 = v41 + 1;
        if (v41 + 1 > 0x8AD8F2FBA93868)
LABEL_76:
          sub_20E867F44();
        v109 = *(_DWORD *)(v17 + 464);
        v43 = 0xCBEEA4E1A08AD8F3 * ((uint64_t)(v39 - (_QWORD)v40) >> 3);
        if (2 * v43 > v42)
          v42 = 2 * v43;
        if (v43 >= 0x456C797DD49C34)
          v44 = 0x8AD8F2FBA93868;
        else
          v44 = v42;
        if (v44 > 0x8AD8F2FBA93868)
LABEL_75:
          sub_20E877A38();
        v108 = v44;
        v107 = (char *)operator new(472 * v44);
        v45 = &v107[472 * v41];
        *(_QWORD *)v45 = v111;
        *((_QWORD *)v45 + 1) = v30;
        *((_DWORD *)v45 + 4) = v32;
        *((_QWORD *)v45 + 3) = v116;
        *((_QWORD *)v45 + 4) = v29;
        *((_DWORD *)v45 + 10) = v33;
        v46 = v126;
        *((_OWORD *)v45 + 7) = v125;
        *((_OWORD *)v45 + 8) = v46;
        v47 = v128;
        *((_OWORD *)v45 + 9) = v127;
        *((_OWORD *)v45 + 10) = v47;
        v48 = v122;
        *((_OWORD *)v45 + 3) = v121;
        *((_OWORD *)v45 + 4) = v48;
        v49 = v124;
        *((_OWORD *)v45 + 5) = v123;
        *((_OWORD *)v45 + 6) = v49;
        memcpy(v45 + 176, __src, 0x120uLL);
        *((_DWORD *)v45 + 116) = v109;
        v45[468] = 0;
        v50 = v45;
        if (v20 != v40)
        {
          do
          {
            v51 = v50;
            v50 = (_OWORD *)((char *)v50 - 472);
            v52 = *(_OWORD *)(v20 - 59);
            v53 = *(_OWORD *)(v20 - 57);
            *(_OWORD *)((char *)v50 + 28) = *(_OWORD *)((char *)v20 - 444);
            *v50 = v52;
            v50[1] = v53;
            v54 = (_OWORD *)((char *)v51 - 424);
            v55 = *(_OWORD *)(v20 - 39);
            v57 = *(_OWORD *)(v20 - 45);
            v56 = *(_OWORD *)(v20 - 43);
            v54[6] = *(_OWORD *)(v20 - 41);
            v54[7] = v55;
            v54[4] = v57;
            v54[5] = v56;
            v58 = *(_OWORD *)(v20 - 53);
            v59 = *(_OWORD *)(v20 - 51);
            v60 = *(_OWORD *)(v20 - 47);
            v54[2] = *(_OWORD *)(v20 - 49);
            v54[3] = v60;
            *v54 = v58;
            v54[1] = v59;
            memcpy((char *)v51 - 296, v20 - 37, 0x120uLL);
            v61 = *((_BYTE *)v20 - 4);
            *((_DWORD *)v51 - 2) = *((_DWORD *)v20 - 2);
            *((_BYTE *)v51 - 4) = v61;
            v20 -= 59;
          }
          while (v20 != v40);
          v20 = v40;
        }
        v28 = v45 + 472;
        v3 = a3;
        *a3 = v50;
        a3[1] = v45 + 472;
        a3[2] = &v107[472 * v108];
        if (v20)
          operator delete(v20);
      }
      v16 = v114;
      v3[1] = v28;
      v20 = v28;
    }
    v17 += 472;
  }
  while (v17 != v16);
LABEL_53:
  v63 = v9[9];
  v62 = v9[10];
  if (v63 != v62)
  {
    v117 = v9[10];
    do
    {
      if (*(_BYTE *)(v63 + 160) && *(_BYTE *)(v63 + 456))
      {
        v73 = *a2;
        v72 = a2[1];
        v75 = *(_QWORD *)(v63 + 16);
        v74 = *(_QWORD *)(v63 + 24);
        v76 = v3;
        v78 = *(_DWORD *)(v63 + 4);
        v77 = *(_DWORD *)(v63 + 8);
        v79 = *(_OWORD *)(v63 + 112);
        v125 = *(_OWORD *)(v63 + 96);
        v126 = v79;
        v80 = *(_OWORD *)(v63 + 144);
        v127 = *(_OWORD *)(v63 + 128);
        v128 = v80;
        v81 = *(_OWORD *)(v63 + 48);
        v121 = *(_OWORD *)(v63 + 32);
        v122 = v81;
        v82 = *(_OWORD *)(v63 + 80);
        v123 = *(_OWORD *)(v63 + 64);
        v124 = v82;
        memcpy(__src, (const void *)(v63 + 168), sizeof(__src));
        v83 = *(_DWORD *)(v63 + 464);
        v84 = v76[2];
        if ((unint64_t)v20 < v84)
        {
          *v20 = v75;
          v20[1] = v74;
          *((_DWORD *)v20 + 4) = v77;
          v20[3] = v73;
          v20[4] = v72;
          *((_DWORD *)v20 + 10) = v78;
          v65 = v123;
          v64 = v124;
          v66 = v122;
          *((_OWORD *)v20 + 3) = v121;
          *((_OWORD *)v20 + 4) = v66;
          v68 = v127;
          v67 = v128;
          v69 = v126;
          *((_OWORD *)v20 + 7) = v125;
          *((_OWORD *)v20 + 8) = v69;
          *((_OWORD *)v20 + 9) = v68;
          *((_OWORD *)v20 + 10) = v67;
          *((_OWORD *)v20 + 5) = v65;
          *((_OWORD *)v20 + 6) = v64;
          v70 = v83;
          memcpy(v20 + 22, __src, 0x120uLL);
          *((_DWORD *)v20 + 116) = v70;
          *((_BYTE *)v20 + 468) = 0;
          v71 = (char *)(v20 + 59);
          v3 = v76;
        }
        else
        {
          v115 = v78;
          v85 = (_QWORD *)*v76;
          v86 = 0xCBEEA4E1A08AD8F3 * (((uint64_t)v20 - *v76) >> 3);
          v87 = v86 + 1;
          if (v86 + 1 > 0x8AD8F2FBA93868)
            goto LABEL_76;
          v113 = *(_DWORD *)(v63 + 464);
          v88 = 0xCBEEA4E1A08AD8F3 * ((uint64_t)(v84 - (_QWORD)v85) >> 3);
          if (2 * v88 > v87)
            v87 = 2 * v88;
          if (v88 >= 0x456C797DD49C34)
            v89 = 0x8AD8F2FBA93868;
          else
            v89 = v87;
          if (v89 > 0x8AD8F2FBA93868)
            goto LABEL_75;
          v112 = v89;
          v110 = (char *)operator new(472 * v89);
          v90 = &v110[472 * v86];
          *(_QWORD *)v90 = v75;
          *((_QWORD *)v90 + 1) = v74;
          *((_DWORD *)v90 + 4) = v77;
          *((_QWORD *)v90 + 3) = v73;
          *((_QWORD *)v90 + 4) = v72;
          *((_DWORD *)v90 + 10) = v115;
          v91 = v126;
          *((_OWORD *)v90 + 7) = v125;
          *((_OWORD *)v90 + 8) = v91;
          v92 = v128;
          *((_OWORD *)v90 + 9) = v127;
          *((_OWORD *)v90 + 10) = v92;
          v93 = v122;
          *((_OWORD *)v90 + 3) = v121;
          *((_OWORD *)v90 + 4) = v93;
          v94 = v124;
          *((_OWORD *)v90 + 5) = v123;
          *((_OWORD *)v90 + 6) = v94;
          memcpy(v90 + 176, __src, 0x120uLL);
          *((_DWORD *)v90 + 116) = v113;
          v90[468] = 0;
          v95 = v90;
          if (v20 != v85)
          {
            do
            {
              v96 = v95;
              v95 = (_OWORD *)((char *)v95 - 472);
              v97 = *(_OWORD *)(v20 - 59);
              v98 = *(_OWORD *)(v20 - 57);
              *(_OWORD *)((char *)v95 + 28) = *(_OWORD *)((char *)v20 - 444);
              *v95 = v97;
              v95[1] = v98;
              v99 = (_OWORD *)((char *)v96 - 424);
              v100 = *(_OWORD *)(v20 - 39);
              v102 = *(_OWORD *)(v20 - 45);
              v101 = *(_OWORD *)(v20 - 43);
              v99[6] = *(_OWORD *)(v20 - 41);
              v99[7] = v100;
              v99[4] = v102;
              v99[5] = v101;
              v103 = *(_OWORD *)(v20 - 53);
              v104 = *(_OWORD *)(v20 - 51);
              v105 = *(_OWORD *)(v20 - 47);
              v99[2] = *(_OWORD *)(v20 - 49);
              v99[3] = v105;
              *v99 = v103;
              v99[1] = v104;
              memcpy((char *)v96 - 296, v20 - 37, 0x120uLL);
              v106 = *((_BYTE *)v20 - 4);
              *((_DWORD *)v96 - 2) = *((_DWORD *)v20 - 2);
              *((_BYTE *)v96 - 4) = v106;
              v20 -= 59;
            }
            while (v20 != v85);
            v20 = v85;
          }
          v71 = v90 + 472;
          v3 = a3;
          *a3 = v95;
          a3[1] = v90 + 472;
          a3[2] = &v110[472 * v112];
          if (v20)
            operator delete(v20);
        }
        v62 = v117;
        v3[1] = v71;
        v20 = v71;
      }
      v63 += 472;
    }
    while (v63 != v62);
  }
}

void sub_20F7C57D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  void *v19;

  v19 = *(void **)a18;
  if (*(_QWORD *)a18)
  {
    *(_QWORD *)(a18 + 8) = v19;
    operator delete(v19);
  }
  _Unwind_Resume(exception_object);
}

void sub_20F7C5800(_QWORD *a1@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X2>, _QWORD *a4@<X8>)
{
  int8x8_t v4;
  _QWORD *v6;
  unint64_t v7;
  uint8x8_t v8;
  unint64_t v9;
  uint64_t **v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  unint64_t v15;
  uint64_t v17;
  void **v18;
  void **v19;
  void *v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  __int128 v27;
  unint64_t v28;
  void **v29;
  uint64_t v30;
  uint64_t **v31;
  uint64_t *v32;
  uint64_t *v33;
  unint64_t v34;
  uint64_t **v35;
  unint64_t v36;
  uint64_t *v37;
  int8x8_t v38;
  uint8x8_t v39;
  unint64_t v40;
  uint64_t *v41;
  uint64_t *v42;
  uint64_t v43;
  unint64_t v45;
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t *v52;
  uint64_t *v53;
  uint64_t *v54;
  unsigned int v55;
  uint64_t **v56;
  unint64_t v57;
  uint64_t *v58;
  uint64_t v59;
  int v60;
  float64x2_t *v61;
  float64x2_t v62;
  float64x2_t v63;
  float64_t v64;
  int8x16_t v65;
  float64_t v66;
  int8x16_t v67;
  float64_t v68;
  int8x16_t v69;
  float64x2_t v70;
  float64x2_t v71;
  BOOL v72;
  float64x2_t v73;
  float64x2_t v74;
  float64x2_t v75;
  float64x2_t v76;
  float64x2_t v77;
  float64x2_t v78;
  float64x2_t v79;
  float64x2_t v80;
  float64x2_t v81;
  float64x2_t v82;
  float64x2_t v83;
  float64x2_t v84;
  float64x2_t v85;
  float64x2_t v86;
  int8x16_t v87;
  float64x2_t v88;
  float64x2_t v89;
  float64x2_t v90;
  float64x2_t v91;
  float64x2_t v92;
  float64x2_t v93;
  float64x2_t v94;
  float64x2_t v95;
  float64x2_t v96;
  float64x2_t v97;
  float64x2_t v98;
  float64x2_t v99;
  float64x2_t v100;
  float64x2_t v101;
  float64x2_t v102;
  float64x2_t v103;
  float64x2_t v104;
  float64x2_t v105;
  float64x2_t v106;
  float64x2_t v107;
  float64x2_t v108;
  float64x2_t v109;
  float64x2_t v110;
  float64x2_t v111;
  float64x2_t v112;
  float64x2_t v113;
  float64x2_t v114;
  float64x2_t v115;
  float64x2_t v116;
  float64x2_t v117;
  float64x2_t v118;
  float64x2_t v119;
  float64x2_t v120;
  float64x2_t v121;
  float64x2_t v122;
  float64x2_t v123;
  float64x2_t v124;
  float64x2_t v125;
  float64x2_t v126;
  float64x2_t v127;
  float64x2_t v128;
  float64x2_t v129;
  float64x2_t v130;
  float64x2_t v131;
  float64x2_t v132;
  float64x2_t v133;
  float64x2_t v134;
  float64x2_t v135;
  float64x2_t v136;
  float64x2_t v137;
  float64x2_t v138;
  float64x2_t v139;
  float64x2_t v140;
  float64x2_t v141;
  float64x2_t v142;
  float64x2_t v143;
  float64x2_t v144;
  float64x2_t v145;
  float64x2_t v146;
  float64x2_t v147;
  float64x2_t v148;
  float64x2_t v149;
  float64x2_t v150;
  float64x2_t v151;
  int64x2_t v152;
  int64x2_t v153;
  int64x2_t v154;
  int64x2_t v155;
  float64x2_t v156;
  float64x2_t v157;
  float64x2_t v158;
  int64x2_t v159;
  int64x2_t v160;
  int64x2_t v161;
  int64x2_t v162;
  int64x2_t v163;
  int64x2_t v164;
  int64x2_t v165;
  int64x2_t v166;
  int64x2_t v167;
  int64x2_t v168;
  int64x2_t v169;
  int64x2_t v170;
  float64x2_t v171;
  float64x2_t v172;
  float64x2_t v173;
  float64x2_t v174;
  float64x2_t v175;
  float64x2_t v176;
  float64x2_t v177;
  float64x2_t v178;
  float64x2_t v179;
  float64x2_t v180;
  float64x2_t v181;
  float64x2_t v182;
  int64x2_t v183;
  float64x2_t v184;
  float64x2_t v185;
  float64x2_t v186;
  float64x2_t v187;
  float64x2_t v188;
  float64x2_t v189;
  int64x2_t v190;
  float64x2_t v191;
  float64x2_t v192;
  float64x2_t v193;
  float64x2_t v194;
  float64x2_t v195;
  float64x2_t v196;
  float64x2_t v197;
  float64x2_t v198;
  float64x2_t v199;
  float64x2_t v200;
  float64x2_t v201;
  float64x2_t v202;
  float64x2_t v203;
  float64x2_t v204;
  float64x2_t v205;
  float64x2_t v206;
  float64x2_t v207;
  float64x2_t v208;
  int8x16_t v209;
  int8x16_t v210;
  int8x16_t v211;
  int8x16_t v212;
  int8x16_t v213;
  int8x16_t v214;
  int8x16_t v215;
  int8x16_t v216;
  int8x16_t v217;
  int8x16_t v218;
  int8x16_t v219;
  int8x16_t v220;
  int8x16_t v221;
  int8x16_t v222;
  int8x16_t v223;
  float64x2_t v224;
  float64x2_t v225;
  float64x2_t v226;
  float64x2_t v227;
  float64x2_t v228;
  float64x2_t v229;
  float64x2_t v230;
  float64x2_t v231;
  float64x2_t v232;
  float64x2_t v233;
  float64x2_t v234;
  float64x2_t v235;
  float64x2_t v236;
  float64x2_t v237;
  float64x2_t v238;
  float64x2_t v239;
  float64x2_t v240;
  float64x2_t v241;
  float64x2_t v242;
  float64x2_t v243;
  float64x2_t v244;
  float64x2_t v245;
  float64x2_t v246;
  float64x2_t v247;
  float64x2_t v248;
  float64x2_t v249;
  float64x2_t v250;
  float64x2_t v251;
  float64x2_t v252;
  float64x2_t v253;
  float64x2_t v254;
  float64x2_t v255;
  char v256;
  uint64_t v257;
  int v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  char *v262;
  unint64_t v263;
  uint64_t v264;
  unint64_t v265;
  char v266;
  uint64_t v267;
  unsigned int v268;
  uint64_t v269;
  __int128 v270;
  __int128 v271;
  __int128 v272;
  void *v273;
  __int128 v274;
  __int128 v275;
  __int128 v276;
  __int128 v277;
  __int128 v278;
  __int128 v279;
  __int128 v280;
  __int128 v281;
  __int128 v282;
  __int128 v283;
  __int128 v284;
  __int128 v285;
  __int128 v286;
  __int128 v287;
  __int128 v288;
  __int128 v289;
  __int128 v290;
  unint64_t v291;
  unint64_t v292;
  _DWORD *v293;
  char *v294;
  __int128 v295;
  __int128 v296;
  __int128 v297;
  uint64_t v298;
  char *v299;
  char *v300;
  char *v301;
  __int128 v302;
  char *v303;
  char *v304;
  __int128 v305;
  __int128 v306;
  __int128 v307;
  __int128 v308;
  __int128 v309;
  __int128 v310;
  char *v311;
  uint64_t *v312;
  uint64_t **v313;
  uint64_t **v314;
  unint64_t v315;
  unsigned int v316;
  unint64_t v317;
  unsigned int v318;
  uint64_t *v319;
  uint64_t *v320;
  uint64_t v321;
  uint64_t *v322;
  uint64_t v323;
  _BYTE *v324;
  int v325;
  uint64_t v326;
  int v327;
  uint64_t *v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t *v331;
  uint64_t v332;
  uint64_t *v333;
  uint64_t **v334;
  uint64_t **v335;
  unint64_t v336;
  unsigned int v337;
  unint64_t v338;
  unsigned int v339;
  _OWORD *v340;
  void *v341;
  _QWORD *v343;
  uint64_t v344;
  _QWORD *v345;
  _QWORD *v346;
  _QWORD *v347;
  char v348;
  unint64_t v349;
  float64x2_t *v350;
  float64x2_t *v351;
  float64x2_t *v352;
  float64x2_t *v353;
  char v354;
  char v355;
  char v356;
  char v357;
  char v358;
  char v359;
  char v360;
  char v361;
  char v362;
  char v363;
  char v364;
  char v365;
  char v366;
  char v367;
  char v368;
  char v369;
  char v370;
  char v371;
  char v372;
  char v373;
  char v374;
  char v375;
  char v376;
  char v377;
  char v378;
  char v379;
  char v380;
  char v381;
  char v382;
  char v383;
  char v384;
  char v385;
  char v386;
  char v387;
  char v388;
  char v389;
  char v390;
  char v391;
  char v392;
  char v393;
  char v394;
  char v395;
  char v396;
  char v397;
  char v398;
  char v399;
  char v400;
  char v401;
  char v402;
  char v403;
  char v404;
  char v405;
  char v406;
  char v407;
  char v408;
  char v409;
  char v410;
  char v411;
  char v412;
  char v413;
  char v414;
  char v415;
  char v416;
  char v417;
  char v418;
  char v419;
  char v420;
  char v421;
  char v422;
  char v423;
  char v424;
  char v425;
  char v426;
  char v427;
  char v428;
  char v429;
  char v430;
  char v431;
  char v432;
  char v433;
  char v434;
  char v435;
  char v436;
  char v437;
  char v438;
  char v439;
  char v440;
  char v441;
  char v442;
  char v443;
  char v444;
  char v445;
  char v446;
  char v447;
  char v448;
  char v449;
  char v450;
  char v451;
  char v452;
  char v453;
  char v454;
  char v455;
  char v456;
  char v457;
  char v458;
  char v459;
  char v460;
  char v461;
  char v462;
  char v463;
  char v464;
  char v465;
  char v466;
  char v467;
  char v468;
  char v469;
  char v470;
  char v471;
  char v472;
  char v473;
  char v474;
  char v475;
  char v476;
  char v477;
  char v478;
  char v479;
  char v480;
  char v481;
  char v482;
  char v483;
  char v484;
  char v485;
  char v486;
  char v487;
  char v488;
  char v489;
  char v490;
  char v491;
  char v492;
  char v493;
  char v494;
  char v495;
  char v496;
  char v497;
  char v498;
  char v499;
  char v500;
  char v501;
  char v502;
  char v503;
  char v504;
  char v505;
  char v506;
  char v507;
  char v508;
  char v509;
  char v510;
  char v511;
  char v512;
  char v513;
  char v514;
  char v515;
  char v516;
  char v517;
  char v518;
  char v519;
  char v520;
  char v521;
  char v522;
  char v523;
  char v524;
  char v525;
  char v526;
  char v527;
  char v528;
  char v529;
  char v530;
  char v531;
  char v532;
  char v533;
  char v534;
  char v535;
  char v536;
  char v537;
  char v538;
  char v539;
  char v540;
  char v541;
  char v542;
  char v543;
  char v544;
  char v545;
  char v546;
  char v547;
  char v548;
  char v549;
  char v550;
  char v551;
  char v552;
  char v553;
  char v554;
  char v555;
  char v556;
  char v557;
  char v558;
  char v559;
  char v560;
  char v561;
  char v562;
  char v563;
  char v564;
  char v565;
  char v566;
  char v567;
  char v568;
  char v569;
  char v570;
  char v571;
  float64x2_t v572;
  char v573;
  float64x2_t v574;
  char v575;
  float64x2_t v576;
  char v577;
  float64x2_t v578;
  char v579;
  float64x2_t v580;
  char v581;
  float64x2_t v582;
  char v583;
  float64x2_t v584;
  char v585;
  float64x2_t v586;
  char v587;
  float64x2_t v588;
  char v589;
  float64x2_t v590;
  char v591;
  float64x2_t v592;
  char v593;
  float64x2_t v594;
  char v595;
  float64x2_t v596;
  char v597;
  float64x2_t v598;
  char v599;
  float64x2_t v600;
  char v601;
  float64x2_t v602;
  char v603;
  float64x2_t v604;
  char v605;
  float64x2_t v606;
  char v607;
  float64x2_t v608;
  char v609;
  float64x2_t v610;
  char v611;
  float64x2_t v612;
  char v613;
  float64x2_t v614;
  char v615;
  float64x2_t v616;
  char v617;
  float64x2_t v618;
  char v619;
  float64x2_t v620;
  char v621;
  float64x2_t v622;
  char v623;
  float64x2_t v624;
  char v625;
  float64x2_t v626;
  float64x2_t v627;
  char v628;
  float64x2_t v629;
  char v630;
  char v631;
  float64x2_t v632;
  char v633;
  char v634;
  char v635;
  float64x2_t v636;
  char v637;
  float64x2_t v638;
  char v639;
  float64x2_t v640;
  char v641;
  float64x2_t v642;
  char v643;
  float64x2_t v644;
  char v645;
  float64x2_t v646;
  char v647;
  float64x2_t v648;
  char v649;
  float64x2_t v650;
  float64x2_t v651;
  char v652;
  float64x2_t v653;
  float64x2_t v654;
  char v655;
  float64x2_t v656;
  char v657;
  float64x2_t v658;
  char v659;
  float64x2_t v660;
  float64x2_t v661;
  float64x2_t v662;
  char v663;
  float64x2_t v664;
  float64x2_t v665;
  char v666;
  float64x2_t v667;
  float64x2_t v668;
  float64x2_t v669;
  char v670;
  float64x2_t v671;
  float64x2_t v672;
  float64x2_t v673;
  char v674;
  float64x2_t v675;
  float64x2_t v676;
  char v677;
  float64x2_t v678;
  float64x2_t v679;
  float64x2_t v680;
  char v681;
  float64x2_t v682;
  float64x2_t v683;
  float64x2_t v684;
  char v685;
  float64x2_t v686;
  float64x2_t v687;
  float64x2_t v688;
  char v689;
  float64x2_t v690;
  float64x2_t v691;
  char v692;
  float64x2_t v693;
  float64x2_t v694;
  char v695;
  float64x2_t v696;
  float64x2_t v697;
  char v698;
  float64x2_t v699;
  float64x2_t v700;
  char v701;
  float64x2_t v702;
  char v703;
  float64x2_t v704;
  float64x2_t v705;
  char v706;
  float64x2_t v707;
  char v708;
  float64x2_t v709;
  float64x2_t v710;
  char v711;
  float64x2_t v712;
  char v713;
  float64x2_t v714;
  float64x2_t v715;
  char v716;
  float64x2_t v717;
  float64x2_t v718;
  float64x2_t v719;
  char v720;
  float64x2_t v721;
  float64x2_t v722;
  float64x2_t v723;
  char v724;
  float64x2_t v725;
  float64x2_t v726;
  float64x2_t v727;
  float64x2_t v728;
  int v729;
  char v730;
  float64x2_t v731;
  float64x2_t v732;
  char v733;
  float64x2_t v734;
  float64x2_t v735;
  char v736;
  float64x2_t v737;
  float64x2_t v738;
  char v739;
  float64x2_t v740;
  float64x2_t v741;
  char v742;
  float64x2_t v743;
  float64x2_t v744;
  float64x2_t v745;
  float64x2_t v746;
  float64x2_t v747;
  float64x2_t v748;
  float64x2_t v749;
  float64x2_t v750;
  float64x2_t v751;
  int v752;
  float64x2_t v753;
  float64x2_t v754;
  int v755;
  float64x2_t v756;
  float64x2_t v757;
  int v758;
  float64x2_t v759;
  float64x2_t v760;
  int v761;
  float64x2_t v762;
  float64x2_t v763;
  int v764;
  float64x2_t v765;
  float64x2_t v766;
  float64x2_t v767;
  float64x2_t v768;
  float64x2_t v769;
  float64x2_t v770;
  float64x2_t v771;
  float64x2_t v772;
  float64x2_t v773;
  float64x2_t v774;
  float64x2_t v775;
  float64x2_t v776;
  float64x2_t v777;
  float64x2_t v778;
  float64x2_t v779;
  float64x2_t v780;
  float64x2_t v781;
  float64x2_t v782;
  float64x2_t v783;
  float64x2_t v784;
  float64x2_t v785;
  float64x2_t v786;
  float64x2_t v787;
  float64x2_t v788;
  float64x2_t v789;
  float64x2_t v790;
  float64x2_t v791;
  float64x2_t v792;
  float64x2_t v793;
  float64x2_t v794;
  float64x2_t v795;
  float64x2_t v796;
  float64x2_t v797;
  float64x2_t v798;
  float64x2_t v799;
  char v800;
  uint64_t v801;
  uint64_t v802;
  void *__p[2];
  char *v804;
  void *v805[2];
  __int128 v806;
  __int128 v807;
  uint64_t **v808;
  uint64_t *v809;
  uint64_t v810;
  uint64_t v811;
  float64x2_t v812;
  float64x2_t v813;
  float64x2_t v814;
  float64x2_t v815;
  float64x2_t v816;
  float64x2_t v817;
  float64x2_t v818;
  float64x2_t v819;
  float64x2_t v820;
  float64x2_t v821;
  float64x2_t v822;
  float64x2_t v823;
  float64x2_t v824;
  float64x2_t v825;
  float64x2_t v826;
  float64x2_t v827;
  float64x2_t v828;
  float64x2_t v829;
  float64x2_t v830;
  float64x2_t v831;
  float64x2_t v832;
  float64x2_t v833;
  float64x2_t v834;
  float64x2_t v835;
  float64x2_t v836;
  float64x2_t v837;
  float64x2_t v838;
  float64x2_t v839;
  float64x2_t v840;
  float64x2_t v841;
  float64x2_t v842;
  float64x2_t v843;
  float64x2_t v844;
  float64x2_t v845;
  float64x2_t v846;
  float64x2_t v847;
  int64x2_t v848;
  _BYTE v849[32];
  int64x2_t v850;
  _BYTE v851[32];
  int64x2_t v852;
  _BYTE v853[32];
  int64x2_t v854;
  _BYTE v855[32];
  int64x2_t v856;
  _BYTE v857[32];
  int64x2_t v858;
  _BYTE v859[32];

  v810 = 0;
  v809 = 0;
  v808 = &v809;
  v807 = 0u;
  v806 = 0u;
  *(_OWORD *)v805 = 0u;
  *(_OWORD *)__p = 0uLL;
  v804 = 0;
  v4 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v4)
    goto LABEL_27;
  v6 = a1;
  v7 = *((unsigned int *)a2 + 2);
  v8 = (uint8x8_t)vcnt_s8(v4);
  v8.i16[0] = vaddlv_u8(v8);
  if (v8.u32[0] > 1uLL)
  {
    v9 = *((unsigned int *)a2 + 2);
    if (*(_QWORD *)&v4 <= v7)
      v9 = v7 % *(_QWORD *)&v4;
  }
  else
  {
    v9 = (v4.i32[0] - 1) & v7;
  }
  v10 = *(uint64_t ***)(*a1 + 8 * v9);
  if (!v10 || (v11 = *v10) == 0)
  {
LABEL_27:
    v18 = 0;
    v19 = 0;
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
    goto LABEL_223;
  }
  v12 = *a2;
  if (v8.u32[0] < 2uLL)
  {
    v13 = *(_QWORD *)&v4 - 1;
    while (1)
    {
      v17 = v11[1];
      if (v17 == v7)
      {
        if (v11[2] == v12 && *((_DWORD *)v11 + 6) == (_DWORD)v7)
          goto LABEL_30;
      }
      else if ((v17 & v13) != v9)
      {
        goto LABEL_27;
      }
      v11 = (uint64_t *)*v11;
      if (!v11)
        goto LABEL_27;
    }
  }
  while (1)
  {
    v15 = v11[1];
    if (v15 == v7)
      break;
    if (v15 >= *(_QWORD *)&v4)
      v15 %= *(_QWORD *)&v4;
    if (v15 != v9)
      goto LABEL_27;
LABEL_14:
    v11 = (uint64_t *)*v11;
    if (!v11)
      goto LABEL_27;
  }
  v14 = v11[2] == v12 && *((_DWORD *)v11 + 6) == (_DWORD)v7;
  if (!v14)
    goto LABEL_14;
LABEL_30:
  sub_20F7CBE8C(v805);
  v22 = *((_QWORD *)&v807 + 1);
  v23 = v807;
  v18 = (void **)v806;
  v19 = (void **)v805[1];
  v24 = *(_QWORD *)((char *)v805[1] + (((*((_QWORD *)&v807 + 1) + (_QWORD)v807) >> 1) & 0x7FFFFFFFFFFFFFF8))
      + 496 * ((DWORD2(v807) + (_DWORD)v807) & 0xF);
  *(_QWORD *)v24 = v12;
  *(_DWORD *)(v24 + 8) = v7;
  *(_BYTE *)(v24 + 16) = 0;
  *(_BYTE *)(v24 + 488) = 0;
  v25 = v22 + 1;
  *((_QWORD *)&v807 + 1) = v22 + 1;
  if (v22 != -1)
  {
    v346 = a3;
    v343 = v6;
    while (1)
    {
      v29 = (void **)v805[1];
      v30 = *(_QWORD *)((char *)v805[1] + ((v23 >> 1) & 0x7FFFFFFFFFFFFFF8));
      v31 = (uint64_t **)(v30 + 496 * (v23 & 0xF));
      v32 = v809;
      if (v809)
      {
        v33 = *v31;
        v34 = *((unsigned int *)v31 + 2);
        v35 = &v809;
        do
        {
          v36 = v32[4];
          if (v36 < (unint64_t)v33)
          {
            ++v32;
          }
          else if ((uint64_t *)v36 == v33)
          {
            if (*((unsigned int *)v32 + 10) < v34)
              ++v32;
            else
              v35 = (uint64_t **)v32;
          }
          else
          {
            v35 = (uint64_t **)v32;
          }
          v32 = (uint64_t *)*v32;
        }
        while (v32);
        if (v35 != &v809)
        {
          v37 = v35[4];
          if (v33 >= v37 && (v33 != v37 || v34 >= *((unsigned int *)v35 + 10)))
          {
            --v25;
            v28 = v23 + 1;
            *((_QWORD *)&v807 + 1) = v25;
            *(_QWORD *)&v807 = v23 + 1;
            if (v23 + 1 <= 0x1F)
              goto LABEL_34;
            goto LABEL_33;
          }
        }
      }
      else
      {
        v34 = *((unsigned int *)v31 + 2);
      }
      v38 = (int8x8_t)v6[1];
      v344 = v30 + 496 * (v23 & 0xF);
      if (v38)
      {
        v39 = (uint8x8_t)vcnt_s8(v38);
        v39.i16[0] = vaddlv_u8(v39);
        if (v39.u32[0] > 1uLL)
        {
          v40 = v34;
          if (*(_QWORD *)&v38 <= v34)
            v40 = v34 % *(_QWORD *)&v38;
        }
        else
        {
          v40 = (v38.i32[0] - 1) & v34;
        }
        v41 = *(uint64_t **)(*v6 + 8 * v40);
        if (v41)
        {
          v41 = (uint64_t *)*v41;
          if (v41)
          {
            v42 = *v31;
            if (v39.u32[0] < 2uLL)
            {
              v43 = *(_QWORD *)&v38 - 1;
              while (1)
              {
                v47 = v41[1];
                if (v47 == v34)
                {
                  if ((uint64_t *)v41[2] == v42 && *((_DWORD *)v41 + 6) == v34)
                    goto LABEL_79;
                }
                else if ((v47 & v43) != v40)
                {
                  goto LABEL_78;
                }
                v41 = (uint64_t *)*v41;
                if (!v41)
                  goto LABEL_79;
              }
            }
            do
            {
              v45 = v41[1];
              if (v45 == v34)
              {
                if ((uint64_t *)v41[2] == v42 && *((_DWORD *)v41 + 6) == v34)
                  break;
              }
              else
              {
                if (v45 >= *(_QWORD *)&v38)
                  v45 %= *(_QWORD *)&v38;
                if (v45 != v40)
                  goto LABEL_78;
              }
              v41 = (uint64_t *)*v41;
            }
            while (v41);
          }
        }
      }
      else
      {
LABEL_78:
        v41 = 0;
      }
LABEL_79:
      v729 = 0;
      v48 = v41 + 6;
      v345 = v41 + 12;
      v49 = v30 + 496 * (v23 & 0xF);
      v801 = v49 + 16;
      v352 = (float64x2_t *)(v49 + 328);
      v353 = (float64x2_t *)(v49 + 280);
      v350 = (float64x2_t *)(v49 + 424);
      v351 = (float64x2_t *)(v49 + 376);
      while (2)
      {
        v51 = *v48;
        v50 = v48[1];
        v347 = v48;
        v802 = v50;
LABEL_85:
        if (v51 != v50)
        {
          if (!*(_BYTE *)(v51 + 160))
            goto LABEL_84;
          v53 = *(uint64_t **)(v51 + 16);
          v54 = v809;
          v55 = *(_DWORD *)(v51 + 24);
          if (v809)
          {
            v56 = &v809;
            do
            {
              v57 = v54[4];
              if (v57 < (unint64_t)v53)
              {
                ++v54;
              }
              else if ((uint64_t *)v57 == v53)
              {
                if (*((_DWORD *)v54 + 10) < v55)
                  ++v54;
                else
                  v56 = (uint64_t **)v54;
              }
              else
              {
                v56 = (uint64_t **)v54;
              }
              v54 = (uint64_t *)*v54;
            }
            while (v54);
            if (v56 != &v809)
            {
              v58 = v56[4];
              if (v53 >= v58 && (v53 != v58 || v55 >= *((_DWORD *)v56 + 10)))
                goto LABEL_84;
            }
          }
          if (*(_BYTE *)(v801 + 472))
          {
            if (v729 == 1)
              goto LABEL_84;
            v59 = 0;
            v60 = 0;
            v596 = *(float64x2_t *)(v51 + 32);
            v61 = (float64x2_t *)(v51 + 264);
            v594 = *(float64x2_t *)(v51 + 64);
            v602 = *(float64x2_t *)(v51 + 96);
            v63 = *(float64x2_t *)(v51 + 128);
            v62 = *(float64x2_t *)(v51 + 144);
            v592 = *(float64x2_t *)(v801 + 48);
            v576 = *(float64x2_t *)(v801 + 32);
            v590 = *(float64x2_t *)(v801 + 80);
            v578 = *(float64x2_t *)(v801 + 64);
            v588 = *(float64x2_t *)(v801 + 112);
            v580 = *(float64x2_t *)(v801 + 96);
            v586 = *(float64x2_t *)(v801 + 144);
            v584 = *(float64x2_t *)(v801 + 128);
            v65 = (int8x16_t)v596;
            v582 = *(float64x2_t *)(v51 + 48);
            v64 = *(double *)(v51 + 48);
            *(_QWORD *)&v66 = vextq_s8(v65, v65, 8uLL).u64[0];
            v67 = (int8x16_t)v594;
            v574 = *(float64x2_t *)(v51 + 80);
            *(_QWORD *)&v68 = vextq_s8(v67, v67, 8uLL).u64[0];
            v69 = (int8x16_t)v602;
            v572 = *(float64x2_t *)(v51 + 112);
            v70 = (float64x2_t)vextq_s8(v69, v69, 8uLL);
            *(float64_t *)v849 = v64;
            v848 = (int64x2_t)v596;
            *(float64_t *)v851 = v574.f64[0];
            v850 = (int64x2_t)v594;
            *(float64_t *)v853 = v572.f64[0];
            v71 = (float64x2_t)vextq_s8((int8x16_t)v63, (int8x16_t)v63, 8uLL);
            v852 = (int64x2_t)v602;
            do
            {
              v854.i64[v59] = 0;
              v72 = v60 < 2;
              if (v60 < 2)
                ++v60;
              else
                v60 = 0;
              if (v72)
                ++v59;
              else
                v59 += 4;
            }
            while (v59 != 18);
            v73.f64[0] = v594.f64[0];
            v73.f64[1] = v68;
            v74.f64[0] = v66;
            v74.f64[1] = v574.f64[0];
            v75.f64[0] = v62.f64[0];
            v75.f64[1] = v63.f64[0];
            v76.f64[0] = v63.f64[0];
            v76.f64[1] = v71.f64[0];
            v77 = vmulq_f64(v74, v76);
            v78 = vmulq_f64(v73, v75);
            v73.f64[0] = v64;
            v73.f64[1] = v596.f64[0];
            v79.f64[0] = v71.f64[0];
            v600 = v62;
            v79.f64[1] = v62.f64[0];
            v80 = vmulq_f64(v73, v79);
            v73.f64[0] = v572.f64[0];
            v73.f64[1] = v602.f64[0];
            v598 = v63;
            v81 = vmulq_f64(v70, v63);
            v82.f64[0] = v70.f64[0];
            v82.f64[1] = v572.f64[0];
            v83 = vmlsq_f64(vmulq_f64(v73, v79), v82, v75);
            v82.f64[0] = v66;
            v82.f64[1] = v64;
            v84.f64[0] = v574.f64[0];
            v84.f64[1] = v594.f64[0];
            v85 = vmlsq_f64(v80, v82, v75);
            v86 = vmlsq_f64(v78, v84, v76);
            v75.f64[0] = v596.f64[0];
            v75.f64[1] = v68;
            v87 = (int8x16_t)vmlsq_f64(v77, v75, v79);
            *(float64x2_t *)&v849[8] = v85;
            v88 = *(float64x2_t *)(v51 + 168);
            v740 = *(float64x2_t *)(v51 + 216);
            v89 = *(float64x2_t *)(v51 + 184);
            v734 = *(float64x2_t *)(v51 + 232);
            v90 = *(float64x2_t *)(v51 + 200);
            v731 = *(float64x2_t *)(v51 + 248);
            *(_QWORD *)&v849[24] = v87.i64[0];
            v91 = (float64x2_t)v850;
            v788 = (float64x2_t)v848;
            v92 = (float64x2_t)vzip1q_s64(v848, v850);
            v648 = (float64x2_t)vzip2q_s64(v848, v850);
            *(float64_t *)&v851[24] = v86.f64[1];
            *(int8x16_t *)&v851[8] = vextq_s8(v87, (int8x16_t)v86, 8uLL);
            v686 = *(float64x2_t *)v851;
            v671 = *(float64x2_t *)v849;
            v93 = (float64x2_t)vzip1q_s64(*(int64x2_t *)v849, *(int64x2_t *)v851);
            v646 = (float64x2_t)vzip2q_s64(*(int64x2_t *)v849, *(int64x2_t *)v851);
            v636 = *(float64x2_t *)&v849[16];
            v638 = *(float64x2_t *)&v851[16];
            v94 = (float64x2_t)vzip1q_s64(*(int64x2_t *)&v849[16], *(int64x2_t *)&v851[16]);
            *(_QWORD *)&v853[24] = *(_OWORD *)&vmlsq_f64(v81, v602, v71);
            v95 = (float64x2_t)vzip2q_s64(*(int64x2_t *)&v849[16], *(int64x2_t *)&v851[16]);
            v96 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v92, v88.f64[0]), v648, v88, 1), v93, v89.f64[0]), v646, v89, 1), v94, v90.f64[0]), v95, v90, 1);
            v97 = v95;
            v642 = v95;
            *(float64x2_t *)&v853[8] = v83;
            *(float64_t *)&v65.i64[1] = v66;
            *(int8x16_t *)&v855[8] = v65;
            *(float64_t *)&v855[24] = v64;
            *(float64_t *)&v857[24] = v574.f64[0];
            *(float64_t *)&v67.i64[1] = v68;
            v678 = *(float64x2_t *)v853;
            v98 = (float64x2_t)v852;
            v632 = *(float64x2_t *)&v853[16];
            v99 = (float64x2_t)v854;
            v100 = (float64x2_t)vzip1q_s64(v852, v854);
            v101 = vmulq_n_f64(v100, v88.f64[0]);
            v102 = v100;
            v640 = v100;
            *(int8x16_t *)&v857[8] = v67;
            *(_QWORD *)&v100.f64[0] = vdupq_laneq_s64(v852, 1).u64[0];
            *(_QWORD *)&v100.f64[1] = v854.i64[1];
            v103 = v100;
            *(float64_t *)&v859[24] = v572.f64[0];
            v69.i64[1] = *(_QWORD *)&v70.f64[0];
            v682 = *(float64x2_t *)v855;
            v104 = (float64x2_t)vzip1q_s64(*(int64x2_t *)v853, *(int64x2_t *)v855);
            v737 = v89;
            *(int8x16_t *)&v859[8] = v69;
            *(_QWORD *)&v105.f64[0] = vdupq_laneq_s64(*(int64x2_t *)v853, 1).u64[0];
            v105.f64[1] = v596.f64[0];
            v106 = (float64x2_t)vzip1q_s64(*(int64x2_t *)&v853[16], *(int64x2_t *)&v855[16]);
            *(_QWORD *)&v107.f64[0] = vdupq_laneq_s64(v856, 1).u64[0];
            *(_QWORD *)&v107.f64[1] = v858.i64[1];
            *(_QWORD *)&v86.f64[0] = vdupq_laneq_s64(*(int64x2_t *)&v853[16], 1).u64[0];
            v86.f64[1] = v64;
            v108 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(v101, v100, v88, 1), v104, v89.f64[0]), v105, v89, 1), v106, v90.f64[0]), v86, v90, 1);
            v109 = v86;
            v653 = v86;
            v650 = (float64x2_t)vzip1q_s64(v856, v858);
            v110 = (float64x2_t)vzip1q_s64(*(int64x2_t *)v857, *(int64x2_t *)v859);
            v111 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v650, v88.f64[0]), v107, v88, 1), v110, v89.f64[0]);
            v112 = v110;
            v660 = v110;
            *(_QWORD *)&v110.f64[0] = vdupq_laneq_s64(*(int64x2_t *)v857, 1).u64[0];
            v110.f64[1] = *(float64_t *)&v859[8];
            v113 = v110;
            v658 = v110;
            *(_QWORD *)&v86.f64[0] = vdupq_laneq_s64(*(int64x2_t *)&v857[16], 1).u64[0];
            v644 = (float64x2_t)vzip1q_s64(*(int64x2_t *)&v857[16], *(int64x2_t *)&v859[16]);
            v86.f64[1] = v572.f64[0];
            v114 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(v111, v110, v89, 1), v644, v90.f64[0]), v86, v90, 1);
            v115 = v86;
            v656 = v86;
            v116 = v94;
            v117 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v92, v740.f64[0]), v648, v740, 1), v93, v734.f64[0]), v646, v734, 1), v94, v731.f64[0]), v97, v731, 1);
            v118 = v103;
            v119 = v104;
            v120 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v102, v740.f64[0]), v103, v740, 1), v104, v734.f64[0]), v105, v734, 1), v106, v731.f64[0]), v109, v731, 1);
            v121 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v650, v740.f64[0]), v107, v740, 1), v112, v734.f64[0]), v113, v734, 1), v644, v731.f64[0]), v115, v731, 1);
            v797 = vmlaq_laneq_f64(vmulq_n_f64(v96, v788.f64[0]), v117, v788, 1);
            v793 = vmlaq_laneq_f64(vmulq_n_f64(v108, v788.f64[0]), v120, v788, 1);
            v725 = vmlaq_laneq_f64(vmulq_n_f64(v114, v788.f64[0]), v121, v788, 1);
            v789 = vmlaq_laneq_f64(vmulq_n_f64(v96, v91.f64[0]), v117, v91, 1);
            v784 = vmlaq_laneq_f64(vmulq_n_f64(v108, v91.f64[0]), v120, v91, 1);
            v721 = vmlaq_laneq_f64(vmulq_n_f64(v114, v91.f64[0]), v121, v91, 1);
            v704 = vmlaq_laneq_f64(vmulq_n_f64(v88, v98.f64[0]), v740, v98, 1);
            v746 = vmlaq_laneq_f64(vmulq_n_f64(v89, v98.f64[0]), v734, v98, 1);
            v749 = vmlaq_laneq_f64(vmulq_n_f64(v90, v98.f64[0]), v731, v98, 1);
            v780 = vmlaq_laneq_f64(vmulq_n_f64(v96, v98.f64[0]), v117, v98, 1);
            v776 = vmlaq_laneq_f64(vmulq_n_f64(v108, v98.f64[0]), v120, v98, 1);
            v717 = vmlaq_laneq_f64(vmulq_n_f64(v114, v98.f64[0]), v121, v98, 1);
            v696 = vmlaq_laneq_f64(vmulq_n_f64(v88, v99.f64[0]), v740, v99, 1);
            v699 = vmlaq_laneq_f64(vmulq_n_f64(v89, v99.f64[0]), v734, v99, 1);
            v743 = vmlaq_laneq_f64(vmulq_n_f64(v90, v99.f64[0]), v731, v99, 1);
            v772 = vmlaq_laneq_f64(vmulq_n_f64(v96, v99.f64[0]), v117, v99, 1);
            v768 = vmlaq_laneq_f64(vmulq_n_f64(v108, v99.f64[0]), v120, v99, 1);
            v714 = vmlaq_laneq_f64(vmulq_n_f64(v114, v99.f64[0]), v121, v99, 1);
            v709 = vmlaq_laneq_f64(vmulq_n_f64(v90, *(double *)v856.i64), v731, (float64x2_t)v856, 1);
            v667 = vmlaq_laneq_f64(vmulq_n_f64(v96, *(double *)v856.i64), v117, (float64x2_t)v856, 1);
            v626 = vmlaq_laneq_f64(vmulq_n_f64(v108, *(double *)v856.i64), v120, (float64x2_t)v856, 1);
            v622 = vmlaq_laneq_f64(vmulq_n_f64(v114, *(double *)v856.i64), v121, (float64x2_t)v856, 1);
            v614 = vmlaq_laneq_f64(vmulq_n_f64(v96, *(double *)v858.i64), v117, (float64x2_t)v858, 1);
            v612 = vmlaq_laneq_f64(vmulq_n_f64(v108, *(double *)v858.i64), v120, (float64x2_t)v858, 1);
            v610 = vmlaq_laneq_f64(vmulq_n_f64(v114, *(double *)v858.i64), v121, (float64x2_t)v858, 1);
            v693 = v88;
            v122 = vmlaq_laneq_f64(vmulq_n_f64(v88, *(double *)v858.i64), v740, (float64x2_t)v858, 1);
            v123 = vmlaq_laneq_f64(vmulq_n_f64(v89, *(double *)v858.i64), v734, (float64x2_t)v858, 1);
            v690 = v90;
            v124 = vmlaq_laneq_f64(vmulq_n_f64(v90, *(double *)v858.i64), v731, (float64x2_t)v858, 1);
            v125 = *(float64x2_t *)(v51 + 280);
            v127 = *(float64x2_t *)(v51 + 312);
            v126 = *(float64x2_t *)(v51 + 328);
            v765 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v88, *(double *)v848.i64), v740, (float64x2_t)v848, 1), *v61, v671.f64[0]), v127, v671, 1);
            v762 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v89, *(double *)v848.i64), v734, (float64x2_t)v848, 1), v125, v671.f64[0]), v126, v671, 1);
            v128 = *(float64x2_t *)(v51 + 296);
            v129 = *(float64x2_t *)(v51 + 344);
            v759 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v90, *(double *)v848.i64), v731, (float64x2_t)v848, 1), v128, v671.f64[0]), v129, v671, 1);
            v604 = v93;
            v606 = v116;
            v130 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v92, v61->f64[0]), v648, *v61, 1), v93, v125.f64[0]), v646, v125, 1), v116, v128.f64[0]), v642, v128, 1);
            v620 = v118;
            v608 = v119;
            v616 = v105;
            v618 = v106;
            v131 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v640, v61->f64[0]), v118, *v61, 1), v119, v125.f64[0]), v105, v125, 1), v106, v128.f64[0]), v653, v128, 1);
            v624 = v107;
            v132 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v650, v61->f64[0]), v107, *v61, 1), v660, v125.f64[0]), v658, v125, 1), v644, v128.f64[0]), v656, v128, 1);
            v133 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v92, v127.f64[0]), v648, v127, 1), v93, v126.f64[0]), v646, v126, 1), v116, v129.f64[0]), v642, v129, 1);
            v134 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v640, v127.f64[0]), v118, v127, 1), v119, v126.f64[0]), v616, v126, 1), v106, v129.f64[0]), v653, v129, 1);
            v135 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v650, v127.f64[0]), v107, v127, 1), v660, v126.f64[0]), v658, v126, 1), v644, v129.f64[0]), v656, v129, 1);
            v798 = vmlaq_laneq_f64(vmlaq_n_f64(v797, v130, v671.f64[0]), v133, v671, 1);
            v794 = vmlaq_laneq_f64(vmlaq_n_f64(v793, v131, v671.f64[0]), v134, v671, 1);
            v726 = vmlaq_laneq_f64(vmlaq_n_f64(v725, v132, v671.f64[0]), v135, v671, 1);
            v136 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v88, v91.f64[0]), v740, v91, 1), *v61, v686.f64[0]), v127, v686, 1);
            v753 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v89, v91.f64[0]), v734, v91, 1), v125, v686.f64[0]), v126, v686, 1);
            v756 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v90, v91.f64[0]), v731, v91, 1), v128, v686.f64[0]), v129, v686, 1);
            v790 = vmlaq_laneq_f64(vmlaq_n_f64(v789, v130, v686.f64[0]), v133, v686, 1);
            v785 = vmlaq_laneq_f64(vmlaq_n_f64(v784, v131, v686.f64[0]), v134, v686, 1);
            v722 = vmlaq_laneq_f64(vmlaq_n_f64(v721, v132, v686.f64[0]), v135, v686, 1);
            v137 = vmlaq_laneq_f64(vmlaq_n_f64(v704, *v61, v678.f64[0]), v127, v678, 1);
            v747 = vmlaq_laneq_f64(vmlaq_n_f64(v746, v125, v678.f64[0]), v126, v678, 1);
            v750 = vmlaq_laneq_f64(vmlaq_n_f64(v749, v128, v678.f64[0]), v129, v678, 1);
            v781 = vmlaq_laneq_f64(vmlaq_n_f64(v780, v130, v678.f64[0]), v133, v678, 1);
            v777 = vmlaq_laneq_f64(vmlaq_n_f64(v776, v131, v678.f64[0]), v134, v678, 1);
            v718 = vmlaq_laneq_f64(vmlaq_n_f64(v717, v132, v678.f64[0]), v135, v678, 1);
            v138 = vmlaq_laneq_f64(vmlaq_n_f64(v696, *v61, v682.f64[0]), v127, v682, 1);
            v139 = vmlaq_laneq_f64(vmlaq_n_f64(v699, v125, v682.f64[0]), v126, v682, 1);
            v744 = vmlaq_laneq_f64(vmlaq_n_f64(v743, v128, v682.f64[0]), v129, v682, 1);
            v773 = vmlaq_laneq_f64(vmlaq_n_f64(v772, v130, v682.f64[0]), v133, v682, 1);
            v769 = vmlaq_laneq_f64(vmlaq_n_f64(v768, v131, v682.f64[0]), v134, v682, 1);
            v715 = vmlaq_laneq_f64(vmlaq_n_f64(v714, v132, v682.f64[0]), v135, v682, 1);
            v140 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v88, *(double *)v856.i64), v740, (float64x2_t)v856, 1), *v61, *(double *)v857), v127, *(float64x2_t *)v857, 1);
            v141 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v89, *(double *)v856.i64), v734, (float64x2_t)v856, 1), v125, *(double *)v857), v126, *(float64x2_t *)v857, 1);
            v142 = vmlaq_laneq_f64(vmlaq_n_f64(v667, v130, *(double *)v857), v133, *(float64x2_t *)v857, 1);
            v143 = vmlaq_laneq_f64(vmlaq_n_f64(v626, v131, *(double *)v857), v134, *(float64x2_t *)v857, 1);
            v144 = vmlaq_laneq_f64(vmlaq_n_f64(v622, v132, *(double *)v857), v135, *(float64x2_t *)v857, 1);
            v145 = vmlaq_laneq_f64(vmlaq_n_f64(v614, v130, *(double *)v859), v133, *(float64x2_t *)v859, 1);
            v146 = vmlaq_laneq_f64(vmlaq_n_f64(v612, v131, *(double *)v859), v134, *(float64x2_t *)v859, 1);
            v147 = vmlaq_laneq_f64(vmlaq_n_f64(v610, v132, *(double *)v859), v135, *(float64x2_t *)v859, 1);
            v683 = *v61;
            v687 = v127;
            v148 = vmlaq_laneq_f64(vmlaq_n_f64(v122, *v61, *(double *)v859), v127, *(float64x2_t *)v859, 1);
            v675 = v125;
            v679 = v126;
            v668 = v128;
            v672 = v129;
            v149 = *(float64x2_t *)(v51 + 360);
            v151 = *(float64x2_t *)(v51 + 408);
            v150 = *(float64x2_t *)(v51 + 424);
            v152 = (int64x2_t)vmlaq_laneq_f64(vmlaq_n_f64(v765, v149, v636.f64[0]), v151, v636, 1);
            v153 = (int64x2_t)vmlaq_laneq_f64(vmlaq_n_f64(v136, v149, v638.f64[0]), v151, v638, 1);
            v154 = (int64x2_t)vmlaq_laneq_f64(vmlaq_n_f64(v137, v149, v632.f64[0]), v151, v632, 1);
            v155 = (int64x2_t)vmlaq_laneq_f64(vmlaq_n_f64(v138, v149, *(double *)&v855[16]), v151, *(float64x2_t *)&v855[16], 1);
            v156 = *(float64x2_t *)(v51 + 376);
            v157 = *(float64x2_t *)(v51 + 392);
            v158 = *(float64x2_t *)(v51 + 440);
            v831 = (float64x2_t)vzip1q_s64(v154, v155);
            v830 = (float64x2_t)vzip1q_s64(v152, v153);
            v159 = (int64x2_t)vmlaq_laneq_f64(vmlaq_n_f64(v140, v149, *(double *)&v857[16]), v151, *(float64x2_t *)&v857[16], 1);
            v160 = (int64x2_t)vmlaq_laneq_f64(vmlaq_n_f64(v148, v149, *(double *)&v859[16]), v151, *(float64x2_t *)&v859[16], 1);
            v705 = (float64x2_t)v154;
            *(_QWORD *)&v135.f64[0] = vdupq_laneq_s64(v154, 1).u64[0];
            v697 = (float64x2_t)v155;
            *(_QWORD *)&v135.f64[1] = v155.i64[1];
            *(_QWORD *)&v130.f64[0] = vdupq_laneq_s64(v159, 1).u64[0];
            *(_QWORD *)&v130.f64[1] = v160.i64[1];
            v835 = v130;
            v834 = v135;
            v712 = (float64x2_t)v159;
            v629 = (float64x2_t)v160;
            v766 = (float64x2_t)v152;
            v702 = (float64x2_t)v153;
            v832 = (float64x2_t)vzip1q_s64(v159, v160);
            v833 = (float64x2_t)vzip2q_s64(v152, v153);
            v161 = (int64x2_t)vmlaq_laneq_f64(vmlaq_n_f64(v762, v156, v636.f64[0]), v150, v636, 1);
            v162 = (int64x2_t)vmlaq_laneq_f64(vmlaq_n_f64(v747, v156, v632.f64[0]), v150, v632, 1);
            v163 = (int64x2_t)vmlaq_laneq_f64(vmlaq_n_f64(v139, v156, *(double *)&v855[16]), v150, *(float64x2_t *)&v855[16], 1);
            v164 = (int64x2_t)vmlaq_laneq_f64(vmlaq_n_f64(v753, v156, v638.f64[0]), v150, v638, 1);
            v837 = (float64x2_t)vzip1q_s64(v162, v163);
            v836 = (float64x2_t)vzip1q_s64(v161, v164);
            v165 = (int64x2_t)vmlaq_laneq_f64(vmlaq_n_f64(v141, v156, *(double *)&v857[16]), v150, *(float64x2_t *)&v857[16], 1);
            v166 = (int64x2_t)vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v123, v125, *(double *)v859), v126, *(float64x2_t *)v859, 1), v156, *(double *)&v859[16]), v150, *(float64x2_t *)&v859[16], 1);
            v748 = (float64x2_t)v162;
            *(_QWORD *)&v135.f64[0] = vdupq_laneq_s64(v162, 1).u64[0];
            v700 = (float64x2_t)v163;
            *(_QWORD *)&v135.f64[1] = v163.i64[1];
            *(_QWORD *)&v130.f64[0] = vdupq_laneq_s64(v165, 1).u64[0];
            *(_QWORD *)&v130.f64[1] = v166.i64[1];
            v841 = v130;
            v840 = v135;
            v707 = (float64x2_t)v165;
            v627 = (float64x2_t)v166;
            v763 = (float64x2_t)v161;
            v754 = (float64x2_t)v164;
            v838 = (float64x2_t)vzip1q_s64(v165, v166);
            v839 = (float64x2_t)vzip2q_s64(v161, v164);
            v167 = (int64x2_t)vmlaq_laneq_f64(vmlaq_n_f64(v759, v157, v636.f64[0]), v158, v636, 1);
            v168 = (int64x2_t)vmlaq_laneq_f64(vmlaq_n_f64(v756, v157, v638.f64[0]), v158, v638, 1);
            v169 = (int64x2_t)vmlaq_laneq_f64(vmlaq_n_f64(v744, v157, *(double *)&v855[16]), v158, *(float64x2_t *)&v855[16], 1);
            v170 = (int64x2_t)vmlaq_laneq_f64(vmlaq_n_f64(v750, v157, v632.f64[0]), v158, v632, 1);
            v843 = (float64x2_t)vzip1q_s64(v170, v169);
            v842 = (float64x2_t)vzip1q_s64(v167, v168);
            v171 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v92, v149.f64[0]), v648, v149, 1), v604, v156.f64[0]), v646, v156, 1), v606, v157.f64[0]), v642, v157, 1);
            v172 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v92, v151.f64[0]), v648, v151, 1), v604, v150.f64[0]), v646, v150, 1), v606, v158.f64[0]), v642, v158, 1);
            v173 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v640, v149.f64[0]), v620, v149, 1), v608, v156.f64[0]), v616, v156, 1), v618, v157.f64[0]), v653, v157, 1);
            v174 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v640, v151.f64[0]), v620, v151, 1), v608, v150.f64[0]), v616, v150, 1), v618, v158.f64[0]), v653, v158, 1);
            v664 = v149;
            v654 = v151;
            v175 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v650, v149.f64[0]), v624, v149, 1), v660, v156.f64[0]);
            v176 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v650, v151.f64[0]), v624, v151, 1), v660, v150.f64[0]);
            v661 = v156;
            v651 = v150;
            v177 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(v175, v658, v156, 1), v644, v157.f64[0]), v656, v157, 1);
            v178 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(v176, v658, v150, 1), v644, v158.f64[0]), v656, v158, 1);
            v799 = vmlaq_laneq_f64(vmlaq_n_f64(v798, v171, v636.f64[0]), v172, v636, 1);
            v795 = vmlaq_laneq_f64(vmlaq_n_f64(v794, v173, v636.f64[0]), v174, v636, 1);
            v179 = vmlaq_laneq_f64(vmlaq_n_f64(v726, v177, v636.f64[0]), v178, v636, 1);
            v791 = vmlaq_laneq_f64(vmlaq_n_f64(v790, v171, v638.f64[0]), v172, v638, 1);
            v786 = vmlaq_laneq_f64(vmlaq_n_f64(v785, v173, v638.f64[0]), v174, v638, 1);
            v180 = vmlaq_laneq_f64(vmlaq_n_f64(v722, v177, v638.f64[0]), v178, v638, 1);
            v782 = vmlaq_laneq_f64(vmlaq_n_f64(v781, v171, v632.f64[0]), v172, v632, 1);
            v778 = vmlaq_laneq_f64(vmlaq_n_f64(v777, v173, v632.f64[0]), v174, v632, 1);
            v181 = vmlaq_laneq_f64(vmlaq_n_f64(v718, v177, v632.f64[0]), v178, v632, 1);
            v774 = vmlaq_laneq_f64(vmlaq_n_f64(v773, v171, *(double *)&v855[16]), v172, *(float64x2_t *)&v855[16], 1);
            v770 = vmlaq_laneq_f64(vmlaq_n_f64(v769, v173, *(double *)&v855[16]), v174, *(float64x2_t *)&v855[16], 1);
            v182 = vmlaq_laneq_f64(vmlaq_n_f64(v715, v177, *(double *)&v855[16]), v178, *(float64x2_t *)&v855[16], 1);
            v183 = (int64x2_t)vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v709, v128, *(double *)v857), v129, *(float64x2_t *)v857, 1), v157, *(double *)&v857[16]), v158, *(float64x2_t *)&v857[16], 1);
            v184 = vmlaq_laneq_f64(vmlaq_n_f64(v142, v171, *(double *)&v857[16]), v172, *(float64x2_t *)&v857[16], 1);
            v185 = vmlaq_laneq_f64(vmlaq_n_f64(v143, v173, *(double *)&v857[16]), v174, *(float64x2_t *)&v857[16], 1);
            v186 = vmlaq_laneq_f64(vmlaq_n_f64(v144, v177, *(double *)&v857[16]), v178, *(float64x2_t *)&v857[16], 1);
            v187 = vmlaq_laneq_f64(vmlaq_n_f64(v145, v171, *(double *)&v859[16]), v172, *(float64x2_t *)&v859[16], 1);
            v188 = vmlaq_laneq_f64(vmlaq_n_f64(v146, v173, *(double *)&v859[16]), v174, *(float64x2_t *)&v859[16], 1);
            v189 = vmlaq_laneq_f64(vmlaq_n_f64(v147, v177, *(double *)&v859[16]), v178, *(float64x2_t *)&v859[16], 1);
            v727 = v157;
            v719 = v158;
            v190 = (int64x2_t)vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v124, v128, *(double *)v859), v129, *(float64x2_t *)v859, 1), v157, *(double *)&v859[16]), v158, *(float64x2_t *)&v859[16], 1);
            v751 = (float64x2_t)v170;
            *(_QWORD *)&v171.f64[0] = vdupq_laneq_s64(v170, 1).u64[0];
            v745 = (float64x2_t)v169;
            *(_QWORD *)&v171.f64[1] = v169.i64[1];
            *(_QWORD *)&v172.f64[0] = vdupq_laneq_s64(v183, 1).u64[0];
            *(_QWORD *)&v172.f64[1] = v190.i64[1];
            v847 = v172;
            v846 = v171;
            v710 = (float64x2_t)v183;
            v723 = (float64x2_t)v190;
            v760 = (float64x2_t)v167;
            v757 = (float64x2_t)v168;
            v844 = (float64x2_t)vzip1q_s64(v183, v190);
            v845 = (float64x2_t)vzip2q_s64(v167, v168);
            v191 = vaddq_f64(*(float64x2_t *)(v801 + 200), v179);
            v192 = *(float64x2_t *)(v801 + 184);
            v193 = *(float64x2_t *)(v801 + 168);
            v194 = *(float64x2_t *)(v801 + 248);
            v195 = *(float64x2_t *)(v801 + 232);
            v196 = *(float64x2_t *)(v801 + 216);
            v198 = v353[1];
            v197 = v353[2];
            v199 = *v353;
            v201 = v352[1];
            v200 = v352[2];
            v202 = *v352;
            v204 = v351[1];
            v203 = v351[2];
            v205 = *v351;
            v206 = v350[1];
            v207 = v350[2];
            v208 = *v350;
            v814 = v191;
            v813 = vaddq_f64(v192, v795);
            v812 = vaddq_f64(v193, v799);
            v817 = vaddq_f64(v194, v180);
            v816 = vaddq_f64(v195, v786);
            v815 = vaddq_f64(v196, v791);
            v820 = vaddq_f64(v197, v181);
            v819 = vaddq_f64(v198, v778);
            v818 = vaddq_f64(v199, v782);
            v823 = vaddq_f64(v200, v182);
            v822 = vaddq_f64(v201, v770);
            v821 = vaddq_f64(v202, v774);
            v826 = vaddq_f64(v203, v186);
            v825 = vaddq_f64(v204, v185);
            v824 = vaddq_f64(v205, v184);
            v828 = vaddq_f64(v206, v188);
            v829 = vaddq_f64(v207, v189);
            v827 = vaddq_f64(v208, v187);
            v811 = 2;
            sub_20F215978((uint64_t)&v811);
            sub_20E8BE8E4();
            v800 = 0;
            v209 = (int8x16_t)v690;
            v209.i64[1] = vextq_s8(v209, v209, 8uLL).u64[0];
            v691 = (float64x2_t)v209;
            v210 = (int8x16_t)v737;
            v210.i64[1] = vextq_s8(v210, v210, 8uLL).u64[0];
            v738 = (float64x2_t)v210;
            v211 = (int8x16_t)v693;
            v211.i64[1] = vextq_s8(v211, v211, 8uLL).u64[0];
            v694 = (float64x2_t)v211;
            v212 = (int8x16_t)v731;
            v212.i64[1] = vextq_s8(v212, v212, 8uLL).u64[0];
            v732 = (float64x2_t)v212;
            v213 = (int8x16_t)v740;
            v213.i64[1] = vextq_s8(v213, v213, 8uLL).u64[0];
            v741 = (float64x2_t)v213;
            v214 = (int8x16_t)v734;
            v214.i64[1] = vextq_s8(v214, v214, 8uLL).u64[0];
            v735 = (float64x2_t)v214;
            v215 = (int8x16_t)v668;
            v215.i64[1] = vextq_s8(v215, v215, 8uLL).u64[0];
            v669 = (float64x2_t)v215;
            v216 = (int8x16_t)v683;
            v216.i64[1] = vextq_s8(v216, v216, 8uLL).u64[0];
            v684 = (float64x2_t)v216;
            v217 = (int8x16_t)v675;
            v217.i64[1] = vextq_s8(v217, v217, 8uLL).u64[0];
            v676 = (float64x2_t)v217;
            v218 = (int8x16_t)v672;
            v218.i64[1] = vextq_s8(v218, v218, 8uLL).u64[0];
            v673 = (float64x2_t)v218;
            v219 = (int8x16_t)v687;
            v219.i64[1] = vextq_s8(v219, v219, 8uLL).u64[0];
            v688 = (float64x2_t)v219;
            v220 = (int8x16_t)v679;
            v220.i64[1] = vextq_s8(v220, v220, 8uLL).u64[0];
            v680 = (float64x2_t)v220;
            v221 = (int8x16_t)v727;
            v221.i64[1] = vextq_s8(v221, v221, 8uLL).u64[0];
            v728 = (float64x2_t)v221;
            v222 = (int8x16_t)v664;
            v222.i64[1] = vextq_s8(v222, v222, 8uLL).u64[0];
            v665 = (float64x2_t)v222;
            v223 = (int8x16_t)v661;
            v223.i64[1] = vextq_s8(v223, v223, 8uLL).u64[0];
            v662 = (float64x2_t)v223;
            v224 = v719;
            *(_QWORD *)&v224.f64[1] = vextq_s8((int8x16_t)v224, (int8x16_t)v224, 8uLL).u64[0];
            v225 = v654;
            *(_QWORD *)&v225.f64[1] = vextq_s8((int8x16_t)v225, (int8x16_t)v225, 8uLL).u64[0];
            v226 = v651;
            *(_QWORD *)&v226.f64[1] = vextq_s8((int8x16_t)v226, (int8x16_t)v226, 8uLL).u64[0];
            v227 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v766, v830.f64[0]), v702, v830, 1), v705, v831.f64[0]), v697, v831, 1), v712, v832.f64[0]), v629, v832, 1);
            v228 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v763, v830.f64[0]), v754, v830, 1), v748, v831.f64[0]), v700, v831, 1), v707, v832.f64[0]), v627, v832, 1);
            v229 = vsubq_f64(v226, vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v763, v845.f64[0]), v754, v845, 1), v748, v846.f64[0]), v700, v846, 1), v707, v847.f64[0]), v627, v847, 1));
            v230 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v766, v833.f64[0]), v702, v833, 1), v705, v834.f64[0]), v697, v834, 1), v712, v835.f64[0]), v629, v835, 1);
            v231 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v763, v833.f64[0]), v754, v833, 1), v748, v834.f64[0]), v700, v834, 1), v707, v835.f64[0]), v627, v835, 1);
            v232 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v766, v836.f64[0]), v702, v836, 1), v705, v837.f64[0]), v697, v837, 1), v712, v838.f64[0]), v629, v838, 1);
            v233 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v763, v836.f64[0]), v754, v836, 1), v748, v837.f64[0]), v700, v837, 1), v707, v838.f64[0]), v627, v838, 1);
            v234 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v766, v839.f64[0]), v702, v839, 1), v705, v840.f64[0]), v697, v840, 1), v712, v841.f64[0]), v629, v841, 1);
            v235 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v763, v839.f64[0]), v754, v839, 1), v748, v840.f64[0]), v700, v840, 1), v707, v841.f64[0]), v627, v841, 1);
            v236 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v763, v842.f64[0]), v754, v842, 1), v748, v843.f64[0]), v700, v843, 1), v707, v844.f64[0]), v627, v844, 1);
            v237 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v766, v842.f64[0]), v702, v842, 1), v705, v843.f64[0]), v697, v843, 1), v712, v844.f64[0]), v629, v844, 1);
            v238 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v766, v845.f64[0]), v702, v845, 1), v705, v846.f64[0]), v697, v846, 1), v712, v847.f64[0]), v629, v847, 1);
            v647 = HIBYTE(v229.f64[1]);
            v645 = BYTE6(v229.f64[1]);
            v643 = BYTE5(v229.f64[1]);
            v641 = BYTE4(v229.f64[1]);
            v639 = BYTE3(v229.f64[1]);
            v637 = BYTE2(v229.f64[1]);
            v635 = BYTE1(v229.f64[1]);
            v634 = LOBYTE(v229.f64[1]);
            v633 = HIBYTE(v229.f64[0]);
            v631 = BYTE6(v229.f64[0]);
            v630 = BYTE5(v229.f64[0]);
            v625 = BYTE4(v229.f64[0]);
            v628 = BYTE3(v229.f64[0]);
            v621 = BYTE2(v229.f64[0]);
            v623 = BYTE1(v229.f64[0]);
            v619 = LOBYTE(v229.f64[0]);
            v779 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v596, v576.f64[0]), v594, v576, 1), v602, v592.f64[0]), v598, v592, 1);
            v775 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v582, v576.f64[0]), v574, v576, 1), v572, v592.f64[0]), v600, v592, 1);
            v771 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v596, v578.f64[0]), v594, v578, 1), v602, v590.f64[0]), v598, v590, 1);
            v767 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v582, v578.f64[0]), v574, v578, 1), v572, v590.f64[0]), v600, v590, 1);
            v783 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v596, v580.f64[0]), v594, v580, 1), v602, v588.f64[0]), v598, v588, 1);
            v787 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v582, v580.f64[0]), v574, v580, 1), v572, v588.f64[0]), v600, v588, 1);
            v792 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v596, v584.f64[0]), v594, v584, 1), v602, v586.f64[0]), v598, v586, 1);
            v796 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v582, v584.f64[0]), v574, v584, 1), v572, v586.f64[0]), v600, v586, 1);
            v239 = vsubq_f64(v691, vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v760, v830.f64[0]), v757, v830, 1), v751, v831.f64[0]), v745, v831, 1), v710, v832.f64[0]), v723, v832, 1));
            v240 = vsubq_f64(v738, v228);
            v241 = vsubq_f64(v694, v227);
            v242 = vsubq_f64(v732, vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v760, v833.f64[0]), v757, v833, 1), v751, v834.f64[0]), v745, v834, 1), v710, v835.f64[0]), v723, v835, 1));
            v243 = vsubq_f64(v741, v230);
            v244 = vsubq_f64(v735, v231);
            v245 = vsubq_f64(v669, vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v760, v836.f64[0]), v757, v836, 1), v751, v837.f64[0]), v745, v837, 1), v710, v838.f64[0]), v723, v838, 1));
            v246 = vsubq_f64(v684, v232);
            v247 = vsubq_f64(v676, v233);
            v248 = vsubq_f64(v673, vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v760, v839.f64[0]), v757, v839, 1), v751, v840.f64[0]), v745, v840, 1), v710, v841.f64[0]), v723, v841, 1));
            v249 = vsubq_f64(v688, v234);
            v250 = vsubq_f64(v680, v235);
            v251 = vsubq_f64(v728, vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v760, v842.f64[0]), v757, v842, 1), v751, v843.f64[0]), v745, v843, 1), v710, v844.f64[0]), v723, v844, 1));
            v252 = vsubq_f64(v665, v237);
            v253 = vsubq_f64(v662, v236);
            v254 = vsubq_f64(v224, vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v760, v845.f64[0]), v757, v845, 1), v751, v846.f64[0]), v745, v846, 1), v710, v847.f64[0]), v723, v847, 1));
            v255 = vsubq_f64(v225, v238);
            v513 = HIBYTE(v255.f64[1]);
            v514 = BYTE6(v255.f64[1]);
            v515 = BYTE5(v255.f64[1]);
            v516 = BYTE4(v255.f64[1]);
            v517 = BYTE3(v255.f64[1]);
            v518 = BYTE2(v255.f64[1]);
            v519 = BYTE1(v255.f64[1]);
            v520 = LOBYTE(v255.f64[1]);
            v521 = HIBYTE(v255.f64[0]);
            v522 = BYTE6(v255.f64[0]);
            v523 = BYTE5(v255.f64[0]);
            v524 = BYTE4(v255.f64[0]);
            v525 = BYTE3(v255.f64[0]);
            v526 = BYTE2(v255.f64[0]);
            v527 = BYTE1(v255.f64[0]);
            v528 = LOBYTE(v255.f64[0]);
            v561 = HIBYTE(v253.f64[1]);
            v562 = BYTE6(v253.f64[1]);
            v563 = BYTE5(v253.f64[1]);
            v564 = BYTE4(v253.f64[1]);
            v565 = BYTE3(v253.f64[1]);
            v566 = BYTE2(v253.f64[1]);
            v567 = BYTE1(v253.f64[1]);
            v568 = LOBYTE(v253.f64[1]);
            v569 = HIBYTE(v253.f64[0]);
            v570 = BYTE6(v253.f64[0]);
            v571 = BYTE5(v253.f64[0]);
            v573 = BYTE4(v253.f64[0]);
            v575 = BYTE3(v253.f64[0]);
            v577 = BYTE2(v253.f64[0]);
            v579 = BYTE1(v253.f64[0]);
            v581 = LOBYTE(v253.f64[0]);
            v583 = HIBYTE(v252.f64[1]);
            v585 = BYTE6(v252.f64[1]);
            v587 = BYTE5(v252.f64[1]);
            v589 = BYTE4(v252.f64[1]);
            v591 = BYTE3(v252.f64[1]);
            v593 = BYTE2(v252.f64[1]);
            v595 = BYTE1(v252.f64[1]);
            v597 = LOBYTE(v252.f64[1]);
            v599 = HIBYTE(v252.f64[0]);
            v559 = BYTE6(v252.f64[0]);
            v557 = BYTE5(v252.f64[0]);
            v555 = BYTE4(v252.f64[0]);
            v553 = BYTE3(v252.f64[0]);
            v551 = BYTE2(v252.f64[0]);
            v549 = BYTE1(v252.f64[0]);
            v547 = LOBYTE(v252.f64[0]);
            v617 = HIBYTE(v250.f64[1]);
            v615 = BYTE6(v250.f64[1]);
            v613 = BYTE5(v250.f64[1]);
            v611 = BYTE4(v250.f64[1]);
            v609 = BYTE3(v250.f64[1]);
            v607 = BYTE2(v250.f64[1]);
            v605 = BYTE1(v250.f64[1]);
            v603 = LOBYTE(v250.f64[1]);
            v601 = HIBYTE(v250.f64[0]);
            v560 = BYTE6(v250.f64[0]);
            v558 = BYTE5(v250.f64[0]);
            v556 = BYTE4(v250.f64[0]);
            v554 = BYTE3(v250.f64[0]);
            v552 = BYTE2(v250.f64[0]);
            v550 = BYTE1(v250.f64[0]);
            v548 = LOBYTE(v250.f64[0]);
            v545 = HIBYTE(v249.f64[1]);
            v543 = BYTE6(v249.f64[1]);
            v541 = BYTE5(v249.f64[1]);
            v539 = BYTE4(v249.f64[1]);
            v537 = BYTE3(v249.f64[1]);
            v535 = BYTE2(v249.f64[1]);
            v533 = BYTE1(v249.f64[1]);
            v531 = LOBYTE(v249.f64[1]);
            v529 = HIBYTE(v249.f64[0]);
            v511 = BYTE6(v249.f64[0]);
            v509 = BYTE5(v249.f64[0]);
            v507 = BYTE4(v249.f64[0]);
            v505 = BYTE3(v249.f64[0]);
            v503 = BYTE2(v249.f64[0]);
            v501 = BYTE1(v249.f64[0]);
            v499 = LOBYTE(v249.f64[0]);
            v546 = HIBYTE(v247.f64[1]);
            v544 = BYTE6(v247.f64[1]);
            v542 = BYTE5(v247.f64[1]);
            v540 = BYTE4(v247.f64[1]);
            v538 = BYTE3(v247.f64[1]);
            v536 = BYTE2(v247.f64[1]);
            v534 = BYTE1(v247.f64[1]);
            v532 = LOBYTE(v247.f64[1]);
            v530 = HIBYTE(v247.f64[0]);
            v512 = BYTE6(v247.f64[0]);
            v510 = BYTE5(v247.f64[0]);
            v508 = BYTE4(v247.f64[0]);
            v506 = BYTE3(v247.f64[0]);
            v504 = BYTE2(v247.f64[0]);
            v502 = BYTE1(v247.f64[0]);
            v500 = LOBYTE(v247.f64[0]);
            v497 = HIBYTE(v246.f64[1]);
            v495 = BYTE6(v246.f64[1]);
            v493 = BYTE5(v246.f64[1]);
            v491 = BYTE4(v246.f64[1]);
            v489 = BYTE3(v246.f64[1]);
            v487 = BYTE2(v246.f64[1]);
            v485 = BYTE1(v246.f64[1]);
            v483 = LOBYTE(v246.f64[1]);
            v481 = HIBYTE(v246.f64[0]);
            v479 = BYTE6(v246.f64[0]);
            v477 = BYTE5(v246.f64[0]);
            v475 = BYTE4(v246.f64[0]);
            v473 = BYTE3(v246.f64[0]);
            v471 = BYTE2(v246.f64[0]);
            v469 = BYTE1(v246.f64[0]);
            v467 = LOBYTE(v246.f64[0]);
            v498 = HIBYTE(v244.f64[1]);
            v496 = BYTE6(v244.f64[1]);
            v494 = BYTE5(v244.f64[1]);
            v492 = BYTE4(v244.f64[1]);
            v490 = BYTE3(v244.f64[1]);
            v488 = BYTE2(v244.f64[1]);
            v486 = BYTE1(v244.f64[1]);
            v484 = LOBYTE(v244.f64[1]);
            v482 = HIBYTE(v244.f64[0]);
            v480 = BYTE6(v244.f64[0]);
            v478 = BYTE5(v244.f64[0]);
            v476 = BYTE4(v244.f64[0]);
            v474 = BYTE3(v244.f64[0]);
            v472 = BYTE2(v244.f64[0]);
            v470 = BYTE1(v244.f64[0]);
            v468 = LOBYTE(v244.f64[0]);
            v466 = HIBYTE(v243.f64[1]);
            v465 = BYTE6(v243.f64[1]);
            v463 = BYTE5(v243.f64[1]);
            v461 = BYTE4(v243.f64[1]);
            v459 = BYTE3(v243.f64[1]);
            v457 = BYTE2(v243.f64[1]);
            v455 = BYTE1(v243.f64[1]);
            v453 = LOBYTE(v243.f64[1]);
            v451 = HIBYTE(v243.f64[0]);
            v449 = BYTE6(v243.f64[0]);
            v447 = BYTE5(v243.f64[0]);
            v445 = BYTE4(v243.f64[0]);
            v443 = BYTE3(v243.f64[0]);
            v442 = BYTE2(v243.f64[0]);
            v440 = BYTE1(v243.f64[0]);
            v439 = LOBYTE(v243.f64[0]);
            v464 = HIBYTE(v240.f64[1]);
            v462 = BYTE6(v240.f64[1]);
            v460 = BYTE5(v240.f64[1]);
            v458 = BYTE4(v240.f64[1]);
            v456 = BYTE3(v240.f64[1]);
            v454 = BYTE2(v240.f64[1]);
            v452 = BYTE1(v240.f64[1]);
            v450 = LOBYTE(v240.f64[1]);
            v448 = HIBYTE(v240.f64[0]);
            v446 = BYTE6(v240.f64[0]);
            v444 = BYTE5(v240.f64[0]);
            v441 = BYTE4(v240.f64[0]);
            v356 = BYTE2(v240.f64[0]);
            v357 = BYTE3(v240.f64[0]);
            v354 = BYTE1(v240.f64[0]);
            v742 = LOBYTE(v240.f64[0]);
            v256 = LOBYTE(v241.f64[0]);
            v739 = HIBYTE(v241.f64[1]);
            v736 = BYTE6(v241.f64[1]);
            v733 = BYTE5(v241.f64[1]);
            v730 = BYTE4(v241.f64[1]);
            v724 = BYTE3(v241.f64[1]);
            v720 = BYTE2(v241.f64[1]);
            v716 = BYTE1(v241.f64[1]);
            v713 = LOBYTE(v241.f64[1]);
            v711 = HIBYTE(v241.f64[0]);
            v708 = BYTE6(v241.f64[0]);
            v706 = BYTE5(v241.f64[0]);
            v703 = BYTE4(v241.f64[0]);
            v701 = BYTE3(v241.f64[0]);
            v698 = BYTE2(v241.f64[0]);
            v695 = BYTE1(v241.f64[0]);
            v355 = HIBYTE(v254.f64[1]);
            v692 = BYTE6(v254.f64[1]);
            v689 = BYTE5(v254.f64[1]);
            v685 = BYTE4(v254.f64[1]);
            v681 = BYTE3(v254.f64[1]);
            v677 = BYTE2(v254.f64[1]);
            v674 = BYTE1(v254.f64[1]);
            v670 = LOBYTE(v254.f64[1]);
            v666 = HIBYTE(v254.f64[0]);
            v663 = BYTE6(v254.f64[0]);
            v659 = BYTE5(v254.f64[0]);
            v657 = BYTE4(v254.f64[0]);
            v655 = BYTE3(v254.f64[0]);
            v652 = BYTE2(v254.f64[0]);
            v649 = BYTE1(v254.f64[0]);
            v358 = LOBYTE(v254.f64[0]);
            v373 = BYTE6(v251.f64[1]);
            v374 = HIBYTE(v251.f64[1]);
            v371 = BYTE4(v251.f64[1]);
            v372 = BYTE5(v251.f64[1]);
            v369 = BYTE2(v251.f64[1]);
            v370 = BYTE3(v251.f64[1]);
            v367 = LOBYTE(v251.f64[1]);
            v368 = BYTE1(v251.f64[1]);
            v365 = BYTE6(v251.f64[0]);
            v366 = HIBYTE(v251.f64[0]);
            v363 = BYTE4(v251.f64[0]);
            v364 = BYTE5(v251.f64[0]);
            v361 = BYTE2(v251.f64[0]);
            v362 = BYTE3(v251.f64[0]);
            v359 = LOBYTE(v251.f64[0]);
            v360 = BYTE1(v251.f64[0]);
            v390 = HIBYTE(v248.f64[1]);
            v389 = BYTE6(v248.f64[1]);
            v388 = BYTE5(v248.f64[1]);
            v387 = BYTE4(v248.f64[1]);
            v386 = BYTE3(v248.f64[1]);
            v385 = BYTE2(v248.f64[1]);
            v384 = BYTE1(v248.f64[1]);
            v383 = LOBYTE(v248.f64[1]);
            v382 = HIBYTE(v248.f64[0]);
            v381 = BYTE6(v248.f64[0]);
            v380 = BYTE5(v248.f64[0]);
            v378 = BYTE3(v248.f64[0]);
            v379 = BYTE4(v248.f64[0]);
            v376 = BYTE1(v248.f64[0]);
            v377 = BYTE2(v248.f64[0]);
            v375 = LOBYTE(v248.f64[0]);
            v406 = HIBYTE(v245.f64[1]);
            v405 = BYTE6(v245.f64[1]);
            v404 = BYTE5(v245.f64[1]);
            v403 = BYTE4(v245.f64[1]);
            v402 = BYTE3(v245.f64[1]);
            v401 = BYTE2(v245.f64[1]);
            v400 = BYTE1(v245.f64[1]);
            v399 = LOBYTE(v245.f64[1]);
            v398 = HIBYTE(v245.f64[0]);
            v397 = BYTE6(v245.f64[0]);
            v396 = BYTE5(v245.f64[0]);
            v395 = BYTE4(v245.f64[0]);
            v394 = BYTE3(v245.f64[0]);
            v393 = BYTE2(v245.f64[0]);
            v392 = BYTE1(v245.f64[0]);
            v391 = LOBYTE(v245.f64[0]);
            v423 = HIBYTE(v242.f64[1]);
            v421 = BYTE6(v242.f64[1]);
            v420 = BYTE5(v242.f64[1]);
            v419 = BYTE4(v242.f64[1]);
            v418 = BYTE3(v242.f64[1]);
            v417 = BYTE2(v242.f64[1]);
            v416 = BYTE1(v242.f64[1]);
            v415 = LOBYTE(v242.f64[1]);
            v414 = HIBYTE(v242.f64[0]);
            v413 = BYTE6(v242.f64[0]);
            v412 = BYTE5(v242.f64[0]);
            v411 = BYTE4(v242.f64[0]);
            v410 = BYTE3(v242.f64[0]);
            v409 = BYTE2(v242.f64[0]);
            v408 = BYTE1(v242.f64[0]);
            v407 = LOBYTE(v242.f64[0]);
            v761 = *(_DWORD *)(v801 + 4);
            v764 = *(_DWORD *)(v51 + 8);
            v257 = *(_QWORD *)(v51 + 16);
            v258 = *(_DWORD *)(v51 + 24);
            v436 = HIBYTE(v239.f64[1]);
            v437 = BYTE6(v239.f64[1]);
            v438 = BYTE5(v239.f64[1]);
            v435 = BYTE4(v239.f64[1]);
            v434 = BYTE3(v239.f64[1]);
            v433 = BYTE2(v239.f64[1]);
            v432 = BYTE1(v239.f64[1]);
            v431 = LOBYTE(v239.f64[1]);
            v430 = HIBYTE(v239.f64[0]);
            v429 = BYTE6(v239.f64[0]);
            v428 = BYTE5(v239.f64[0]);
            v427 = BYTE4(v239.f64[0]);
            v426 = BYTE3(v239.f64[0]);
            v425 = BYTE2(v239.f64[0]);
            v424 = BYTE1(v239.f64[0]);
            v422 = LOBYTE(v239.f64[0]);
            v755 = 0xFFFFFF;
            v752 = 255;
            v259 = v801;
            v261 = *a3;
            v260 = a3[1];
            if (*a3 != v260)
            {
LABEL_120:
              while (*(_QWORD *)v261 != v257 || *(_DWORD *)(v261 + 8) != v258)
              {
                v261 += 16;
                if (v261 == v260)
                {
                  v758 = *(_DWORD *)(v259 + 464);
                  goto LABEL_132;
                }
              }
            }
          }
          else
          {
            v761 = *(_DWORD *)(v51 + 4);
            v752 = *(_DWORD *)v51;
            v755 = *(_DWORD *)v51 >> 8;
            v764 = *(_DWORD *)(v51 + 8);
            LODWORD(v748.f64[0]) = *(_DWORD *)(v51 + 12);
            v796 = *(float64x2_t *)(v51 + 144);
            v792 = *(float64x2_t *)(v51 + 128);
            v787 = *(float64x2_t *)(v51 + 112);
            v783 = *(float64x2_t *)(v51 + 96);
            v767 = *(float64x2_t *)(v51 + 80);
            v771 = *(float64x2_t *)(v51 + 64);
            v775 = *(float64x2_t *)(v51 + 48);
            v779 = *(float64x2_t *)(v51 + 32);
            if (*(_BYTE *)(v51 + 456))
            {
              v800 = 0;
              v692 = HIBYTE(*(_WORD *)(v51 + 453));
              v689 = *(_WORD *)(v51 + 453);
              v685 = HIBYTE(*(_DWORD *)(v51 + 449));
              v681 = BYTE2(*(_DWORD *)(v51 + 449));
              v677 = BYTE1(*(_DWORD *)(v51 + 449));
              v674 = *(_DWORD *)(v51 + 449);
              v670 = HIBYTE(*(_QWORD *)(v51 + 441));
              v666 = BYTE6(*(_QWORD *)(v51 + 441));
              v663 = (unsigned __int16)WORD2(*(_QWORD *)(v51 + 441)) >> 8;
              v659 = BYTE4(*(_QWORD *)(v51 + 441));
              v657 = BYTE3(*(_QWORD *)(v51 + 441));
              v655 = BYTE2(*(_QWORD *)(v51 + 441));
              v652 = BYTE1(*(_QWORD *)(v51 + 441));
              v649 = *(_QWORD *)(v51 + 441);
              v742 = HIBYTE(*(_OWORD *)(v51 + 169));
              v739 = BYTE14(*(_OWORD *)(v51 + 169));
              v736 = (unsigned __int16)WORD6(*(_OWORD *)(v51 + 169)) >> 8;
              v733 = BYTE12(*(_OWORD *)(v51 + 169));
              v730 = BYTE3(*(_QWORD *)(v51 + 177));
              v724 = BYTE2(*(_QWORD *)(v51 + 177));
              v720 = BYTE1(*(_QWORD *)(v51 + 177));
              v716 = *(_QWORD *)(v51 + 177);
              v713 = HIBYTE(*(_QWORD *)(v51 + 169));
              v711 = BYTE6(*(_QWORD *)(v51 + 169));
              v708 = (unsigned __int16)WORD2(*(_QWORD *)(v51 + 169)) >> 8;
              v706 = BYTE4(*(_QWORD *)(v51 + 169));
              v703 = BYTE3(*(_OWORD *)(v51 + 169));
              v701 = BYTE2(*(_OWORD *)(v51 + 169));
              v698 = BYTE1(*(_OWORD *)(v51 + 169));
              v695 = *(_OWORD *)(v51 + 169);
              v358 = HIBYTE(*(_OWORD *)(v51 + 425));
              v647 = BYTE14(*(_OWORD *)(v51 + 425));
              v645 = (unsigned __int16)WORD6(*(_OWORD *)(v51 + 425)) >> 8;
              v643 = BYTE12(*(_OWORD *)(v51 + 425));
              v641 = BYTE3(*(_QWORD *)(v51 + 433));
              v639 = BYTE2(*(_QWORD *)(v51 + 433));
              v637 = BYTE1(*(_QWORD *)(v51 + 433));
              v635 = *(_QWORD *)(v51 + 433);
              v634 = HIBYTE(*(_QWORD *)(v51 + 425));
              v633 = BYTE6(*(_QWORD *)(v51 + 425));
              v631 = (unsigned __int16)WORD2(*(_QWORD *)(v51 + 425)) >> 8;
              v630 = BYTE4(*(_QWORD *)(v51 + 425));
              v625 = BYTE3(*(_OWORD *)(v51 + 425));
              v628 = BYTE2(*(_OWORD *)(v51 + 425));
              v621 = BYTE1(*(_OWORD *)(v51 + 425));
              v623 = *(_OWORD *)(v51 + 425);
              v619 = HIBYTE(*(_OWORD *)(v51 + 409));
              v513 = BYTE14(*(_OWORD *)(v51 + 409));
              v514 = (unsigned __int16)WORD6(*(_OWORD *)(v51 + 409)) >> 8;
              v515 = BYTE12(*(_OWORD *)(v51 + 409));
              v516 = BYTE3(*(_QWORD *)(v51 + 417));
              v517 = BYTE2(*(_QWORD *)(v51 + 417));
              v518 = BYTE1(*(_QWORD *)(v51 + 417));
              v519 = *(_QWORD *)(v51 + 417);
              v520 = HIBYTE(*(_QWORD *)(v51 + 409));
              v521 = BYTE6(*(_QWORD *)(v51 + 409));
              v522 = (unsigned __int16)WORD2(*(_QWORD *)(v51 + 409)) >> 8;
              v523 = BYTE4(*(_QWORD *)(v51 + 409));
              v524 = BYTE3(*(_OWORD *)(v51 + 409));
              v525 = BYTE2(*(_OWORD *)(v51 + 409));
              v526 = BYTE1(*(_OWORD *)(v51 + 409));
              v527 = *(_OWORD *)(v51 + 409);
              v528 = HIBYTE(*(_OWORD *)(v51 + 393));
              v373 = (unsigned __int16)WORD6(*(_OWORD *)(v51 + 393)) >> 8;
              v374 = BYTE14(*(_OWORD *)(v51 + 393));
              v371 = BYTE3(*(_QWORD *)(v51 + 401));
              v372 = BYTE12(*(_OWORD *)(v51 + 393));
              v369 = BYTE1(*(_QWORD *)(v51 + 401));
              v370 = BYTE2(*(_QWORD *)(v51 + 401));
              v367 = HIBYTE(*(_QWORD *)(v51 + 393));
              v368 = *(_QWORD *)(v51 + 401);
              v365 = (unsigned __int16)WORD2(*(_QWORD *)(v51 + 393)) >> 8;
              v366 = BYTE6(*(_QWORD *)(v51 + 393));
              v363 = BYTE3(*(_OWORD *)(v51 + 393));
              v364 = BYTE4(*(_QWORD *)(v51 + 393));
              v361 = BYTE1(*(_OWORD *)(v51 + 393));
              v362 = BYTE2(*(_OWORD *)(v51 + 393));
              v359 = HIBYTE(*(_OWORD *)(v51 + 377));
              v360 = *(_OWORD *)(v51 + 393);
              v561 = BYTE14(*(_OWORD *)(v51 + 377));
              v562 = (unsigned __int16)WORD6(*(_OWORD *)(v51 + 377)) >> 8;
              v563 = BYTE12(*(_OWORD *)(v51 + 377));
              v564 = BYTE3(*(_QWORD *)(v51 + 385));
              v565 = BYTE2(*(_QWORD *)(v51 + 385));
              v566 = BYTE1(*(_QWORD *)(v51 + 385));
              v567 = *(_QWORD *)(v51 + 385);
              v568 = HIBYTE(*(_QWORD *)(v51 + 377));
              v569 = BYTE6(*(_QWORD *)(v51 + 377));
              v570 = (unsigned __int16)WORD2(*(_QWORD *)(v51 + 377)) >> 8;
              v571 = BYTE4(*(_QWORD *)(v51 + 377));
              v573 = BYTE3(*(_OWORD *)(v51 + 377));
              v575 = BYTE2(*(_OWORD *)(v51 + 377));
              v577 = BYTE1(*(_OWORD *)(v51 + 377));
              v579 = *(_OWORD *)(v51 + 377);
              v581 = HIBYTE(*(_OWORD *)(v51 + 361));
              v583 = BYTE14(*(_OWORD *)(v51 + 361));
              v585 = (unsigned __int16)WORD6(*(_OWORD *)(v51 + 361)) >> 8;
              v587 = BYTE12(*(_OWORD *)(v51 + 361));
              v589 = BYTE3(*(_QWORD *)(v51 + 369));
              v591 = BYTE2(*(_QWORD *)(v51 + 369));
              v593 = BYTE1(*(_QWORD *)(v51 + 369));
              v595 = *(_QWORD *)(v51 + 369);
              v597 = HIBYTE(*(_QWORD *)(v51 + 361));
              v599 = BYTE6(*(_QWORD *)(v51 + 361));
              v559 = (unsigned __int16)WORD2(*(_QWORD *)(v51 + 361)) >> 8;
              v557 = BYTE4(*(_QWORD *)(v51 + 361));
              v555 = BYTE3(*(_OWORD *)(v51 + 361));
              v553 = BYTE2(*(_OWORD *)(v51 + 361));
              v551 = BYTE1(*(_OWORD *)(v51 + 361));
              v549 = *(_OWORD *)(v51 + 361);
              v547 = HIBYTE(*(_OWORD *)(v51 + 345));
              v390 = BYTE14(*(_OWORD *)(v51 + 345));
              v389 = (unsigned __int16)WORD6(*(_OWORD *)(v51 + 345)) >> 8;
              v388 = BYTE12(*(_OWORD *)(v51 + 345));
              v387 = BYTE3(*(_QWORD *)(v51 + 353));
              v386 = BYTE2(*(_QWORD *)(v51 + 353));
              v385 = BYTE1(*(_QWORD *)(v51 + 353));
              v384 = *(_QWORD *)(v51 + 353);
              v383 = HIBYTE(*(_QWORD *)(v51 + 345));
              v382 = BYTE6(*(_QWORD *)(v51 + 345));
              v381 = (unsigned __int16)WORD2(*(_QWORD *)(v51 + 345)) >> 8;
              v380 = BYTE4(*(_QWORD *)(v51 + 345));
              v378 = BYTE2(*(_OWORD *)(v51 + 345));
              v379 = BYTE3(*(_OWORD *)(v51 + 345));
              v376 = *(_OWORD *)(v51 + 345);
              v377 = BYTE1(*(_OWORD *)(v51 + 345));
              v375 = HIBYTE(*(_OWORD *)(v51 + 329));
              v617 = BYTE14(*(_OWORD *)(v51 + 329));
              v615 = (unsigned __int16)WORD6(*(_OWORD *)(v51 + 329)) >> 8;
              v613 = BYTE12(*(_OWORD *)(v51 + 329));
              v611 = BYTE3(*(_QWORD *)(v51 + 337));
              v609 = BYTE2(*(_QWORD *)(v51 + 337));
              v607 = BYTE1(*(_QWORD *)(v51 + 337));
              v605 = *(_QWORD *)(v51 + 337);
              v603 = HIBYTE(*(_QWORD *)(v51 + 329));
              v601 = BYTE6(*(_QWORD *)(v51 + 329));
              v560 = (unsigned __int16)WORD2(*(_QWORD *)(v51 + 329)) >> 8;
              v558 = BYTE4(*(_QWORD *)(v51 + 329));
              v556 = BYTE3(*(_OWORD *)(v51 + 329));
              v554 = BYTE2(*(_OWORD *)(v51 + 329));
              v552 = BYTE1(*(_OWORD *)(v51 + 329));
              v550 = *(_OWORD *)(v51 + 329);
              v548 = HIBYTE(*(_OWORD *)(v51 + 313));
              v545 = BYTE14(*(_OWORD *)(v51 + 313));
              v543 = (unsigned __int16)WORD6(*(_OWORD *)(v51 + 313)) >> 8;
              v541 = BYTE12(*(_OWORD *)(v51 + 313));
              v539 = BYTE3(*(_QWORD *)(v51 + 321));
              v537 = BYTE2(*(_QWORD *)(v51 + 321));
              v535 = BYTE1(*(_QWORD *)(v51 + 321));
              v533 = *(_QWORD *)(v51 + 321);
              v531 = HIBYTE(*(_QWORD *)(v51 + 313));
              v529 = BYTE6(*(_QWORD *)(v51 + 313));
              v511 = (unsigned __int16)WORD2(*(_QWORD *)(v51 + 313)) >> 8;
              v509 = BYTE4(*(_QWORD *)(v51 + 313));
              v507 = BYTE3(*(_OWORD *)(v51 + 313));
              v505 = BYTE2(*(_OWORD *)(v51 + 313));
              v503 = BYTE1(*(_OWORD *)(v51 + 313));
              v501 = *(_OWORD *)(v51 + 313);
              v499 = HIBYTE(*(_OWORD *)(v51 + 297));
              v406 = BYTE14(*(_OWORD *)(v51 + 297));
              v405 = (unsigned __int16)WORD6(*(_OWORD *)(v51 + 297)) >> 8;
              v404 = BYTE12(*(_OWORD *)(v51 + 297));
              v403 = BYTE3(*(_QWORD *)(v51 + 305));
              v402 = BYTE2(*(_QWORD *)(v51 + 305));
              v401 = BYTE1(*(_QWORD *)(v51 + 305));
              v400 = *(_QWORD *)(v51 + 305);
              v399 = HIBYTE(*(_QWORD *)(v51 + 297));
              v398 = BYTE6(*(_QWORD *)(v51 + 297));
              v397 = (unsigned __int16)WORD2(*(_QWORD *)(v51 + 297)) >> 8;
              v396 = BYTE4(*(_QWORD *)(v51 + 297));
              v395 = BYTE3(*(_OWORD *)(v51 + 297));
              v394 = BYTE2(*(_OWORD *)(v51 + 297));
              v393 = BYTE1(*(_OWORD *)(v51 + 297));
              v392 = *(_OWORD *)(v51 + 297);
              v391 = HIBYTE(*(_OWORD *)(v51 + 281));
              v546 = BYTE14(*(_OWORD *)(v51 + 281));
              v544 = (unsigned __int16)WORD6(*(_OWORD *)(v51 + 281)) >> 8;
              v542 = BYTE12(*(_OWORD *)(v51 + 281));
              v540 = BYTE3(*(_QWORD *)(v51 + 289));
              v538 = BYTE2(*(_QWORD *)(v51 + 289));
              v536 = BYTE1(*(_QWORD *)(v51 + 289));
              v534 = *(_QWORD *)(v51 + 289);
              v532 = HIBYTE(*(_QWORD *)(v51 + 281));
              v530 = BYTE6(*(_QWORD *)(v51 + 281));
              v512 = (unsigned __int16)WORD2(*(_QWORD *)(v51 + 281)) >> 8;
              v510 = BYTE4(*(_QWORD *)(v51 + 281));
              v508 = BYTE3(*(_OWORD *)(v51 + 281));
              v506 = BYTE2(*(_OWORD *)(v51 + 281));
              v504 = BYTE1(*(_OWORD *)(v51 + 281));
              v502 = *(_OWORD *)(v51 + 281);
              v500 = HIBYTE(*(_OWORD *)(v51 + 265));
              v497 = BYTE14(*(_OWORD *)(v51 + 265));
              v495 = (unsigned __int16)WORD6(*(_OWORD *)(v51 + 265)) >> 8;
              v493 = BYTE12(*(_OWORD *)(v51 + 265));
              v491 = BYTE3(*(_QWORD *)(v51 + 273));
              v489 = BYTE2(*(_QWORD *)(v51 + 273));
              v487 = BYTE1(*(_QWORD *)(v51 + 273));
              v485 = *(_QWORD *)(v51 + 273);
              v483 = HIBYTE(*(_QWORD *)(v51 + 265));
              v481 = BYTE6(*(_QWORD *)(v51 + 265));
              v479 = (unsigned __int16)WORD2(*(_QWORD *)(v51 + 265)) >> 8;
              v477 = BYTE4(*(_QWORD *)(v51 + 265));
              v475 = BYTE3(*(_OWORD *)(v51 + 265));
              v473 = BYTE2(*(_OWORD *)(v51 + 265));
              v471 = BYTE1(*(_OWORD *)(v51 + 265));
              v469 = *(_OWORD *)(v51 + 265);
              v467 = HIBYTE(*(_OWORD *)(v51 + 249));
              v423 = BYTE14(*(_OWORD *)(v51 + 249));
              v421 = (unsigned __int16)WORD6(*(_OWORD *)(v51 + 249)) >> 8;
              v420 = BYTE12(*(_OWORD *)(v51 + 249));
              v419 = BYTE3(*(_QWORD *)(v51 + 257));
              v418 = BYTE2(*(_QWORD *)(v51 + 257));
              v417 = BYTE1(*(_QWORD *)(v51 + 257));
              v416 = *(_QWORD *)(v51 + 257);
              v415 = HIBYTE(*(_QWORD *)(v51 + 249));
              v414 = BYTE6(*(_QWORD *)(v51 + 249));
              v413 = (unsigned __int16)WORD2(*(_QWORD *)(v51 + 249)) >> 8;
              v412 = BYTE4(*(_QWORD *)(v51 + 249));
              v411 = BYTE3(*(_OWORD *)(v51 + 249));
              v410 = BYTE2(*(_OWORD *)(v51 + 249));
              v409 = BYTE1(*(_OWORD *)(v51 + 249));
              v408 = *(_OWORD *)(v51 + 249);
              v407 = HIBYTE(*(_OWORD *)(v51 + 233));
              v498 = BYTE14(*(_OWORD *)(v51 + 233));
              v496 = (unsigned __int16)WORD6(*(_OWORD *)(v51 + 233)) >> 8;
              v494 = BYTE12(*(_OWORD *)(v51 + 233));
              v492 = BYTE3(*(_QWORD *)(v51 + 241));
              v490 = BYTE2(*(_QWORD *)(v51 + 241));
              v488 = BYTE1(*(_QWORD *)(v51 + 241));
              v486 = *(_QWORD *)(v51 + 241);
              v484 = HIBYTE(*(_QWORD *)(v51 + 233));
              v482 = BYTE6(*(_QWORD *)(v51 + 233));
              v480 = (unsigned __int16)WORD2(*(_QWORD *)(v51 + 233)) >> 8;
              v478 = BYTE4(*(_QWORD *)(v51 + 233));
              v476 = BYTE3(*(_OWORD *)(v51 + 233));
              v474 = BYTE2(*(_OWORD *)(v51 + 233));
              v472 = BYTE1(*(_OWORD *)(v51 + 233));
              v470 = *(_OWORD *)(v51 + 233);
              v468 = HIBYTE(*(_OWORD *)(v51 + 217));
              v466 = BYTE14(*(_OWORD *)(v51 + 217));
              v465 = (unsigned __int16)WORD6(*(_OWORD *)(v51 + 217)) >> 8;
              v463 = BYTE12(*(_OWORD *)(v51 + 217));
              v461 = BYTE3(*(_QWORD *)(v51 + 225));
              v459 = BYTE2(*(_QWORD *)(v51 + 225));
              v457 = BYTE1(*(_QWORD *)(v51 + 225));
              v455 = *(_QWORD *)(v51 + 225);
              v453 = HIBYTE(*(_QWORD *)(v51 + 217));
              v451 = BYTE6(*(_QWORD *)(v51 + 217));
              v449 = (unsigned __int16)WORD2(*(_QWORD *)(v51 + 217)) >> 8;
              v447 = BYTE4(*(_QWORD *)(v51 + 217));
              v445 = BYTE3(*(_OWORD *)(v51 + 217));
              v443 = BYTE2(*(_OWORD *)(v51 + 217));
              v442 = BYTE1(*(_OWORD *)(v51 + 217));
              v440 = *(_OWORD *)(v51 + 217);
              v355 = *(_BYTE *)(v51 + 455);
              v439 = HIBYTE(*(_OWORD *)(v51 + 201));
              v436 = BYTE14(*(_OWORD *)(v51 + 201));
              v437 = (unsigned __int16)WORD6(*(_OWORD *)(v51 + 201)) >> 8;
              v438 = BYTE12(*(_OWORD *)(v51 + 201));
              v435 = BYTE3(*(_QWORD *)(v51 + 209));
              v434 = BYTE2(*(_QWORD *)(v51 + 209));
              v433 = BYTE1(*(_QWORD *)(v51 + 209));
              v432 = *(_QWORD *)(v51 + 209);
              v431 = HIBYTE(*(_QWORD *)(v51 + 201));
              v430 = BYTE6(*(_QWORD *)(v51 + 201));
              v429 = (unsigned __int16)WORD2(*(_QWORD *)(v51 + 201)) >> 8;
              v428 = BYTE4(*(_QWORD *)(v51 + 201));
              v427 = BYTE3(*(_OWORD *)(v51 + 201));
              v426 = BYTE2(*(_OWORD *)(v51 + 201));
              v425 = BYTE1(*(_OWORD *)(v51 + 201));
              v424 = *(_OWORD *)(v51 + 201);
              v422 = HIBYTE(*(_OWORD *)(v51 + 185));
              v464 = BYTE14(*(_OWORD *)(v51 + 185));
              v462 = (unsigned __int16)WORD6(*(_OWORD *)(v51 + 185)) >> 8;
              v460 = BYTE12(*(_OWORD *)(v51 + 185));
              v458 = BYTE3(*(_QWORD *)(v51 + 193));
              v456 = BYTE2(*(_QWORD *)(v51 + 193));
              v454 = BYTE1(*(_QWORD *)(v51 + 193));
              v452 = *(_QWORD *)(v51 + 193);
              v450 = HIBYTE(*(_QWORD *)(v51 + 185));
              v448 = BYTE6(*(_QWORD *)(v51 + 185));
              v446 = (unsigned __int16)WORD2(*(_QWORD *)(v51 + 185)) >> 8;
              v444 = BYTE4(*(_QWORD *)(v51 + 185));
              v256 = *(_BYTE *)(v51 + 168);
              v441 = BYTE3(*(_OWORD *)(v51 + 185));
              v258 = *(_DWORD *)(v51 + 24);
              v356 = BYTE1(*(_OWORD *)(v51 + 185));
              v357 = BYTE2(*(_OWORD *)(v51 + 185));
              v257 = *(_QWORD *)(v51 + 16);
              v259 = v51;
              v354 = *(_OWORD *)(v51 + 185);
              v261 = *a3;
              v260 = a3[1];
              if (*a3 != v260)
                goto LABEL_120;
            }
            else
            {
              v256 = 0;
              v800 = 1;
              v258 = *(_DWORD *)(v51 + 24);
              v257 = *(_QWORD *)(v51 + 16);
              v259 = v51;
              v261 = *a3;
              v260 = a3[1];
              if (*a3 != v260)
                goto LABEL_120;
            }
          }
          v758 = *(_DWORD *)(v259 + 464);
          if (v261 != v260)
          {
            if (v729 != 1)
            {
              v262 = (char *)v805[1];
              if ((void *)v806 == v805[1])
                v263 = 0;
              else
                v263 = 2 * (v806 - (unint64_t)v805[1]) - 1;
              v264 = *((_QWORD *)&v807 + 1);
              v265 = *((_QWORD *)&v807 + 1) + v807;
              if (v263 == *((_QWORD *)&v807 + 1) + (_QWORD)v807)
              {
                v266 = v256;
                sub_20F7CBE8C(v805);
                v262 = (char *)v805[1];
                v264 = *((_QWORD *)&v807 + 1);
                v265 = *((_QWORD *)&v807 + 1) + v807;
                v256 = v266;
              }
              v267 = *(_QWORD *)&v262[(v265 >> 1) & 0x7FFFFFFFFFFFFFF8];
              v268 = v265 & 0xF;
              v269 = v267 + 496 * v268;
              *(_QWORD *)v269 = v53;
              *(_DWORD *)(v269 + 8) = v55;
              *(_BYTE *)(v269 + 488) = 0;
              *(_DWORD *)(v269 + 16) = v752 | (v755 << 8);
              *(_DWORD *)(v269 + 20) = v761;
              *(_DWORD *)(v269 + 24) = v764;
              *(_DWORD *)(v269 + 28) = LODWORD(v748.f64[0]);
              *(_QWORD *)(v269 + 32) = v257;
              *(_DWORD *)(v269 + 40) = v258;
              *(float64x2_t *)(v269 + 80) = v771;
              *(float64x2_t *)(v269 + 96) = v767;
              *(float64x2_t *)(v269 + 48) = v779;
              *(float64x2_t *)(v269 + 64) = v775;
              *(float64x2_t *)(v269 + 112) = v783;
              *(float64x2_t *)(v269 + 128) = v787;
              *(float64x2_t *)(v269 + 144) = v792;
              *(float64x2_t *)(v269 + 160) = v796;
              *(_BYTE *)(v269 + 176) = 1;
              *(_BYTE *)(v269 + 184) = 0;
              *(_BYTE *)(v269 + 472) = 0;
              if ((v800 & 1) == 0)
              {
                LOBYTE(v270) = v695;
                BYTE1(v270) = v698;
                BYTE2(v270) = v701;
                BYTE3(v270) = v703;
                BYTE4(v270) = v706;
                BYTE5(v270) = v708;
                BYTE6(v270) = v711;
                BYTE7(v270) = v713;
                BYTE8(v270) = v716;
                BYTE9(v270) = v720;
                BYTE10(v270) = v724;
                BYTE11(v270) = v730;
                BYTE12(v270) = v733;
                BYTE13(v270) = v736;
                BYTE14(v270) = v739;
                HIBYTE(v270) = v742;
                *(_OWORD *)(v269 + 185) = v270;
                LOBYTE(v270) = v649;
                BYTE1(v270) = v652;
                BYTE2(v270) = v655;
                BYTE3(v270) = v657;
                BYTE4(v270) = v659;
                BYTE5(v270) = v663;
                BYTE6(v270) = v666;
                BYTE7(v270) = v670;
                BYTE8(v270) = v674;
                BYTE9(v270) = v677;
                BYTE10(v270) = v681;
                BYTE11(v270) = v685;
                BYTE12(v270) = v689;
                BYTE13(v270) = v692;
                *(_WORD *)(v269 + 469) = WORD6(v270);
                *(_DWORD *)(v269 + 465) = DWORD2(v270);
                LOBYTE(v271) = v354;
                BYTE1(v271) = v356;
                BYTE2(v271) = v357;
                BYTE3(v271) = v441;
                BYTE4(v271) = v444;
                BYTE5(v271) = v446;
                BYTE6(v271) = v448;
                BYTE7(v271) = v450;
                BYTE8(v271) = v452;
                BYTE9(v271) = v454;
                BYTE10(v271) = v456;
                BYTE11(v271) = v458;
                BYTE12(v271) = v460;
                BYTE13(v271) = v462;
                BYTE14(v271) = v464;
                HIBYTE(v271) = v422;
                *(_BYTE *)(v269 + 184) = v256;
                LOBYTE(v272) = v424;
                BYTE1(v272) = v425;
                BYTE2(v272) = v426;
                BYTE3(v272) = v427;
                BYTE4(v272) = v428;
                BYTE5(v272) = v429;
                BYTE6(v272) = v430;
                BYTE7(v272) = v431;
                BYTE8(v272) = v432;
                BYTE9(v272) = v433;
                BYTE10(v272) = v434;
                BYTE11(v272) = v435;
                BYTE12(v272) = v438;
                BYTE13(v272) = v437;
                BYTE14(v272) = v436;
                *(_OWORD *)(v269 + 201) = v271;
                HIBYTE(v272) = v439;
                LOBYTE(v271) = v440;
                BYTE1(v271) = v442;
                BYTE2(v271) = v443;
                BYTE3(v271) = v445;
                BYTE4(v271) = v447;
                BYTE5(v271) = v449;
                BYTE6(v271) = v451;
                BYTE7(v271) = v453;
                BYTE8(v271) = v455;
                BYTE9(v271) = v457;
                BYTE10(v271) = v459;
                BYTE11(v271) = v461;
                BYTE12(v271) = v463;
                BYTE13(v271) = v465;
                *(_OWORD *)(v269 + 217) = v272;
                BYTE14(v271) = v466;
                HIBYTE(v271) = v468;
                LOBYTE(v272) = v470;
                BYTE1(v272) = v472;
                BYTE2(v272) = v474;
                BYTE3(v272) = v476;
                BYTE4(v272) = v478;
                BYTE5(v272) = v480;
                BYTE6(v272) = v482;
                BYTE7(v272) = v484;
                BYTE8(v272) = v486;
                BYTE9(v272) = v488;
                BYTE10(v272) = v490;
                BYTE11(v272) = v492;
                BYTE12(v272) = v494;
                BYTE13(v272) = v496;
                BYTE14(v272) = v498;
                HIBYTE(v272) = v407;
                *(_OWORD *)(v269 + 233) = v271;
                LOBYTE(v271) = v408;
                BYTE1(v271) = v409;
                BYTE2(v271) = v410;
                BYTE3(v271) = v411;
                BYTE4(v271) = v412;
                BYTE5(v271) = v413;
                BYTE6(v271) = v414;
                BYTE7(v271) = v415;
                BYTE8(v271) = v416;
                BYTE9(v271) = v417;
                BYTE10(v271) = v418;
                BYTE11(v271) = v419;
                BYTE12(v271) = v420;
                BYTE13(v271) = v421;
                BYTE14(v271) = v423;
                *(_OWORD *)(v269 + 249) = v272;
                HIBYTE(v271) = v467;
                LOBYTE(v272) = v469;
                BYTE1(v272) = v471;
                BYTE2(v272) = v473;
                BYTE3(v272) = v475;
                BYTE4(v272) = v477;
                BYTE5(v272) = v479;
                BYTE6(v272) = v481;
                BYTE7(v272) = v483;
                BYTE8(v272) = v485;
                BYTE9(v272) = v487;
                BYTE10(v272) = v489;
                BYTE11(v272) = v491;
                BYTE12(v272) = v493;
                BYTE13(v272) = v495;
                *(_OWORD *)(v269 + 265) = v271;
                BYTE14(v272) = v497;
                HIBYTE(v272) = v500;
                LOBYTE(v271) = v502;
                BYTE1(v271) = v504;
                BYTE2(v271) = v506;
                BYTE3(v271) = v508;
                BYTE4(v271) = v510;
                BYTE5(v271) = v512;
                BYTE6(v271) = v530;
                BYTE7(v271) = v532;
                BYTE8(v271) = v534;
                BYTE9(v271) = v536;
                BYTE10(v271) = v538;
                BYTE11(v271) = v540;
                BYTE12(v271) = v542;
                BYTE13(v271) = v544;
                BYTE14(v271) = v546;
                HIBYTE(v271) = v391;
                *(_OWORD *)(v269 + 281) = v272;
                LOBYTE(v272) = v392;
                BYTE1(v272) = v393;
                BYTE2(v272) = v394;
                BYTE3(v272) = v395;
                BYTE4(v272) = v396;
                BYTE5(v272) = v397;
                BYTE6(v272) = v398;
                BYTE7(v272) = v399;
                BYTE8(v272) = v400;
                BYTE9(v272) = v401;
                BYTE10(v272) = v402;
                BYTE11(v272) = v403;
                BYTE12(v272) = v404;
                BYTE13(v272) = v405;
                BYTE14(v272) = v406;
                *(_OWORD *)(v269 + 297) = v271;
                HIBYTE(v272) = v499;
                LOBYTE(v271) = v501;
                BYTE1(v271) = v503;
                BYTE2(v271) = v505;
                BYTE3(v271) = v507;
                BYTE4(v271) = v509;
                BYTE5(v271) = v511;
                BYTE6(v271) = v529;
                BYTE7(v271) = v531;
                BYTE8(v271) = v533;
                BYTE9(v271) = v535;
                BYTE10(v271) = v537;
                BYTE11(v271) = v539;
                BYTE12(v271) = v541;
                BYTE13(v271) = v543;
                *(_OWORD *)(v269 + 313) = v272;
                BYTE14(v271) = v545;
                HIBYTE(v271) = v548;
                LOBYTE(v272) = v550;
                BYTE1(v272) = v552;
                BYTE2(v272) = v554;
                BYTE3(v272) = v556;
                BYTE4(v272) = v558;
                BYTE5(v272) = v560;
                BYTE6(v272) = v601;
                BYTE7(v272) = v603;
                BYTE8(v272) = v605;
                BYTE9(v272) = v607;
                BYTE10(v272) = v609;
                BYTE11(v272) = v611;
                BYTE12(v272) = v613;
                BYTE13(v272) = v615;
                BYTE14(v272) = v617;
                HIBYTE(v272) = v375;
                *(_OWORD *)(v269 + 329) = v271;
                LOBYTE(v271) = v376;
                BYTE1(v271) = v377;
                BYTE2(v271) = v378;
                BYTE3(v271) = v379;
                BYTE4(v271) = v380;
                BYTE5(v271) = v381;
                BYTE6(v271) = v382;
                BYTE7(v271) = v383;
                BYTE8(v271) = v384;
                BYTE9(v271) = v385;
                BYTE10(v271) = v386;
                BYTE11(v271) = v387;
                BYTE12(v271) = v388;
                BYTE13(v271) = v389;
                BYTE14(v271) = v390;
                *(_OWORD *)(v269 + 345) = v272;
                HIBYTE(v271) = v547;
                LOBYTE(v272) = v549;
                BYTE1(v272) = v551;
                BYTE2(v272) = v553;
                BYTE3(v272) = v555;
                BYTE4(v272) = v557;
                BYTE5(v272) = v559;
                BYTE6(v272) = v599;
                BYTE7(v272) = v597;
                BYTE8(v272) = v595;
                BYTE9(v272) = v593;
                BYTE10(v272) = v591;
                BYTE11(v272) = v589;
                BYTE12(v272) = v587;
                BYTE13(v272) = v585;
                *(_OWORD *)(v269 + 361) = v271;
                BYTE14(v272) = v583;
                HIBYTE(v272) = v581;
                LOBYTE(v271) = v579;
                BYTE1(v271) = v577;
                BYTE2(v271) = v575;
                BYTE3(v271) = v573;
                BYTE4(v271) = v571;
                BYTE5(v271) = v570;
                BYTE6(v271) = v569;
                BYTE7(v271) = v568;
                BYTE8(v271) = v567;
                BYTE9(v271) = v566;
                BYTE10(v271) = v565;
                BYTE11(v271) = v564;
                BYTE12(v271) = v563;
                BYTE13(v271) = v562;
                BYTE14(v271) = v561;
                HIBYTE(v271) = v359;
                *(_OWORD *)(v269 + 377) = v272;
                LOBYTE(v272) = v360;
                BYTE1(v272) = v361;
                BYTE2(v272) = v362;
                BYTE3(v272) = v363;
                BYTE4(v272) = v364;
                BYTE5(v272) = v365;
                BYTE6(v272) = v366;
                BYTE7(v272) = v367;
                BYTE8(v272) = v368;
                BYTE9(v272) = v369;
                BYTE10(v272) = v370;
                BYTE11(v272) = v371;
                BYTE12(v272) = v372;
                BYTE13(v272) = v373;
                BYTE14(v272) = v374;
                *(_OWORD *)(v269 + 393) = v271;
                HIBYTE(v272) = v528;
                LOBYTE(v271) = v527;
                BYTE1(v271) = v526;
                BYTE2(v271) = v525;
                BYTE3(v271) = v524;
                BYTE4(v271) = v523;
                BYTE5(v271) = v522;
                BYTE6(v271) = v521;
                BYTE7(v271) = v520;
                BYTE8(v271) = v519;
                BYTE9(v271) = v518;
                BYTE10(v271) = v517;
                BYTE11(v271) = v516;
                BYTE12(v271) = v515;
                BYTE13(v271) = v514;
                *(_OWORD *)(v269 + 409) = v272;
                BYTE14(v271) = v513;
                HIBYTE(v271) = v619;
                *(_OWORD *)(v269 + 425) = v271;
                *(_BYTE *)(v269 + 471) = v355;
                LOBYTE(v271) = v623;
                BYTE1(v271) = v621;
                BYTE2(v271) = v628;
                BYTE3(v271) = v625;
                BYTE4(v271) = v630;
                BYTE5(v271) = v631;
                BYTE6(v271) = v633;
                BYTE7(v271) = v634;
                BYTE8(v271) = v635;
                BYTE9(v271) = v637;
                BYTE10(v271) = v639;
                BYTE11(v271) = v641;
                BYTE12(v271) = v643;
                BYTE13(v271) = v645;
                BYTE14(v271) = v647;
                HIBYTE(v271) = v358;
                *(_OWORD *)(v269 + 441) = v271;
                *(_QWORD *)(v269 + 457) = v270;
                *(_BYTE *)(v269 + 472) = 1;
              }
              *(_DWORD *)(v267 + 496 * v268 + 480) = v758;
              *(_BYTE *)(v269 + 488) = 1;
              v52 = (uint64_t *)&v807 + 1;
              goto LABEL_83;
            }
            goto LABEL_84;
          }
LABEL_132:
          v273 = __p[1];
          if (__p[1] >= v804)
          {
            v291 = 0xCBEEA4E1A08AD8F3 * (((char *)__p[1] - (char *)__p[0]) >> 3) + 1;
            if (v291 > 0x8AD8F2FBA93868)
              sub_20F45A4CC();
            v348 = v256;
            if (0x97DD49C34115B1E6 * ((v804 - (char *)__p[0]) >> 3) > v291)
              v291 = 0x97DD49C34115B1E6 * ((v804 - (char *)__p[0]) >> 3);
            if (0xCBEEA4E1A08AD8F3 * ((v804 - (char *)__p[0]) >> 3) >= 0x456C797DD49C34)
              v292 = 0x8AD8F2FBA93868;
            else
              v292 = v291;
            v349 = v292;
            if (v292)
            {
              if (v292 > 0x8AD8F2FBA93868)
                sub_20E877A38();
              v293 = operator new(472 * v292);
            }
            else
            {
              v293 = 0;
            }
            v294 = (char *)&v293[2 * (((char *)__p[1] - (char *)__p[0]) >> 3)];
            *(_DWORD *)v294 = v752 | (v755 << 8);
            *((_DWORD *)v294 + 1) = v761;
            *((_DWORD *)v294 + 2) = v764;
            *((_DWORD *)v294 + 3) = LODWORD(v748.f64[0]);
            *((_QWORD *)v294 + 2) = v257;
            *((_DWORD *)v294 + 6) = v258;
            *((float64x2_t *)v294 + 4) = v771;
            *((float64x2_t *)v294 + 5) = v767;
            *((float64x2_t *)v294 + 2) = v779;
            *((float64x2_t *)v294 + 3) = v775;
            *((float64x2_t *)v294 + 6) = v783;
            *((float64x2_t *)v294 + 7) = v787;
            *((float64x2_t *)v294 + 8) = v792;
            *((float64x2_t *)v294 + 9) = v796;
            v294[160] = 1;
            v294[168] = 0;
            v294[456] = 0;
            if ((v800 & 1) == 0)
            {
              LOBYTE(v295) = v695;
              BYTE1(v295) = v698;
              BYTE2(v295) = v701;
              BYTE3(v295) = v703;
              BYTE4(v295) = v706;
              BYTE5(v295) = v708;
              BYTE6(v295) = v711;
              BYTE7(v295) = v713;
              BYTE8(v295) = v716;
              BYTE9(v295) = v720;
              BYTE10(v295) = v724;
              BYTE11(v295) = v730;
              BYTE12(v295) = v733;
              BYTE13(v295) = v736;
              BYTE14(v295) = v739;
              HIBYTE(v295) = v742;
              *(_OWORD *)(v294 + 169) = v295;
              LOBYTE(v295) = v649;
              BYTE1(v295) = v652;
              BYTE2(v295) = v655;
              BYTE3(v295) = v657;
              BYTE4(v295) = v659;
              BYTE5(v295) = v663;
              BYTE6(v295) = v666;
              BYTE7(v295) = v670;
              BYTE8(v295) = v674;
              BYTE9(v295) = v677;
              BYTE10(v295) = v681;
              BYTE11(v295) = v685;
              BYTE12(v295) = v689;
              BYTE13(v295) = v692;
              *(_WORD *)(v294 + 453) = WORD6(v295);
              *(_DWORD *)(v294 + 449) = DWORD2(v295);
              LOBYTE(v296) = v354;
              BYTE1(v296) = v356;
              BYTE2(v296) = v357;
              BYTE3(v296) = v441;
              BYTE4(v296) = v444;
              BYTE5(v296) = v446;
              BYTE6(v296) = v448;
              BYTE7(v296) = v450;
              BYTE8(v296) = v452;
              BYTE9(v296) = v454;
              BYTE10(v296) = v456;
              BYTE11(v296) = v458;
              BYTE12(v296) = v460;
              BYTE13(v296) = v462;
              BYTE14(v296) = v464;
              HIBYTE(v296) = v422;
              v294[168] = v348;
              LOBYTE(v297) = v424;
              BYTE1(v297) = v425;
              BYTE2(v297) = v426;
              BYTE3(v297) = v427;
              BYTE4(v297) = v428;
              BYTE5(v297) = v429;
              BYTE6(v297) = v430;
              BYTE7(v297) = v431;
              BYTE8(v297) = v432;
              BYTE9(v297) = v433;
              BYTE10(v297) = v434;
              BYTE11(v297) = v435;
              BYTE12(v297) = v438;
              BYTE13(v297) = v437;
              BYTE14(v297) = v436;
              *(_OWORD *)(v294 + 185) = v296;
              HIBYTE(v297) = v439;
              LOBYTE(v296) = v440;
              BYTE1(v296) = v442;
              BYTE2(v296) = v443;
              BYTE3(v296) = v445;
              BYTE4(v296) = v447;
              BYTE5(v296) = v449;
              BYTE6(v296) = v451;
              BYTE7(v296) = v453;
              BYTE8(v296) = v455;
              BYTE9(v296) = v457;
              BYTE10(v296) = v459;
              BYTE11(v296) = v461;
              BYTE12(v296) = v463;
              BYTE13(v296) = v465;
              *(_OWORD *)(v294 + 201) = v297;
              BYTE14(v296) = v466;
              HIBYTE(v296) = v468;
              LOBYTE(v297) = v470;
              BYTE1(v297) = v472;
              BYTE2(v297) = v474;
              BYTE3(v297) = v476;
              BYTE4(v297) = v478;
              BYTE5(v297) = v480;
              BYTE6(v297) = v482;
              BYTE7(v297) = v484;
              BYTE8(v297) = v486;
              BYTE9(v297) = v488;
              BYTE10(v297) = v490;
              BYTE11(v297) = v492;
              BYTE12(v297) = v494;
              BYTE13(v297) = v496;
              BYTE14(v297) = v498;
              HIBYTE(v297) = v407;
              *(_OWORD *)(v294 + 217) = v296;
              LOBYTE(v296) = v408;
              BYTE1(v296) = v409;
              BYTE2(v296) = v410;
              BYTE3(v296) = v411;
              BYTE4(v296) = v412;
              BYTE5(v296) = v413;
              BYTE6(v296) = v414;
              BYTE7(v296) = v415;
              BYTE8(v296) = v416;
              BYTE9(v296) = v417;
              BYTE10(v296) = v418;
              BYTE11(v296) = v419;
              BYTE12(v296) = v420;
              BYTE13(v296) = v421;
              BYTE14(v296) = v423;
              *(_OWORD *)(v294 + 233) = v297;
              HIBYTE(v296) = v467;
              LOBYTE(v297) = v469;
              BYTE1(v297) = v471;
              BYTE2(v297) = v473;
              BYTE3(v297) = v475;
              BYTE4(v297) = v477;
              BYTE5(v297) = v479;
              BYTE6(v297) = v481;
              BYTE7(v297) = v483;
              BYTE8(v297) = v485;
              BYTE9(v297) = v487;
              BYTE10(v297) = v489;
              BYTE11(v297) = v491;
              BYTE12(v297) = v493;
              BYTE13(v297) = v495;
              *(_OWORD *)(v294 + 249) = v296;
              BYTE14(v297) = v497;
              HIBYTE(v297) = v500;
              LOBYTE(v296) = v502;
              BYTE1(v296) = v504;
              BYTE2(v296) = v506;
              BYTE3(v296) = v508;
              BYTE4(v296) = v510;
              BYTE5(v296) = v512;
              BYTE6(v296) = v530;
              BYTE7(v296) = v532;
              BYTE8(v296) = v534;
              BYTE9(v296) = v536;
              BYTE10(v296) = v538;
              BYTE11(v296) = v540;
              BYTE12(v296) = v542;
              BYTE13(v296) = v544;
              BYTE14(v296) = v546;
              HIBYTE(v296) = v391;
              *(_OWORD *)(v294 + 265) = v297;
              LOBYTE(v297) = v392;
              BYTE1(v297) = v393;
              BYTE2(v297) = v394;
              BYTE3(v297) = v395;
              BYTE4(v297) = v396;
              BYTE5(v297) = v397;
              BYTE6(v297) = v398;
              BYTE7(v297) = v399;
              BYTE8(v297) = v400;
              BYTE9(v297) = v401;
              BYTE10(v297) = v402;
              BYTE11(v297) = v403;
              BYTE12(v297) = v404;
              BYTE13(v297) = v405;
              BYTE14(v297) = v406;
              *(_OWORD *)(v294 + 281) = v296;
              HIBYTE(v297) = v499;
              LOBYTE(v296) = v501;
              BYTE1(v296) = v503;
              BYTE2(v296) = v505;
              BYTE3(v296) = v507;
              BYTE4(v296) = v509;
              BYTE5(v296) = v511;
              BYTE6(v296) = v529;
              BYTE7(v296) = v531;
              BYTE8(v296) = v533;
              BYTE9(v296) = v535;
              BYTE10(v296) = v537;
              BYTE11(v296) = v539;
              BYTE12(v296) = v541;
              BYTE13(v296) = v543;
              *(_OWORD *)(v294 + 297) = v297;
              BYTE14(v296) = v545;
              HIBYTE(v296) = v548;
              LOBYTE(v297) = v550;
              BYTE1(v297) = v552;
              BYTE2(v297) = v554;
              BYTE3(v297) = v556;
              BYTE4(v297) = v558;
              BYTE5(v297) = v560;
              BYTE6(v297) = v601;
              BYTE7(v297) = v603;
              BYTE8(v297) = v605;
              BYTE9(v297) = v607;
              BYTE10(v297) = v609;
              BYTE11(v297) = v611;
              BYTE12(v297) = v613;
              BYTE13(v297) = v615;
              BYTE14(v297) = v617;
              HIBYTE(v297) = v375;
              *(_OWORD *)(v294 + 313) = v296;
              LOBYTE(v296) = v376;
              BYTE1(v296) = v377;
              BYTE2(v296) = v378;
              BYTE3(v296) = v379;
              BYTE4(v296) = v380;
              BYTE5(v296) = v381;
              BYTE6(v296) = v382;
              BYTE7(v296) = v383;
              BYTE8(v296) = v384;
              BYTE9(v296) = v385;
              BYTE10(v296) = v386;
              BYTE11(v296) = v387;
              BYTE12(v296) = v388;
              BYTE13(v296) = v389;
              BYTE14(v296) = v390;
              *(_OWORD *)(v294 + 329) = v297;
              HIBYTE(v296) = v547;
              LOBYTE(v297) = v549;
              BYTE1(v297) = v551;
              BYTE2(v297) = v553;
              BYTE3(v297) = v555;
              BYTE4(v297) = v557;
              BYTE5(v297) = v559;
              BYTE6(v297) = v599;
              BYTE7(v297) = v597;
              BYTE8(v297) = v595;
              BYTE9(v297) = v593;
              BYTE10(v297) = v591;
              BYTE11(v297) = v589;
              BYTE12(v297) = v587;
              BYTE13(v297) = v585;
              *(_OWORD *)(v294 + 345) = v296;
              BYTE14(v297) = v583;
              HIBYTE(v297) = v581;
              LOBYTE(v296) = v579;
              BYTE1(v296) = v577;
              BYTE2(v296) = v575;
              BYTE3(v296) = v573;
              BYTE4(v296) = v571;
              BYTE5(v296) = v570;
              BYTE6(v296) = v569;
              BYTE7(v296) = v568;
              BYTE8(v296) = v567;
              BYTE9(v296) = v566;
              BYTE10(v296) = v565;
              BYTE11(v296) = v564;
              BYTE12(v296) = v563;
              BYTE13(v296) = v562;
              BYTE14(v296) = v561;
              HIBYTE(v296) = v359;
              *(_OWORD *)(v294 + 361) = v297;
              LOBYTE(v297) = v360;
              BYTE1(v297) = v361;
              BYTE2(v297) = v362;
              BYTE3(v297) = v363;
              BYTE4(v297) = v364;
              BYTE5(v297) = v365;
              BYTE6(v297) = v366;
              BYTE7(v297) = v367;
              BYTE8(v297) = v368;
              BYTE9(v297) = v369;
              BYTE10(v297) = v370;
              BYTE11(v297) = v371;
              BYTE12(v297) = v372;
              BYTE13(v297) = v373;
              BYTE14(v297) = v374;
              *(_OWORD *)(v294 + 377) = v296;
              HIBYTE(v297) = v528;
              LOBYTE(v296) = v527;
              BYTE1(v296) = v526;
              BYTE2(v296) = v525;
              BYTE3(v296) = v524;
              BYTE4(v296) = v523;
              BYTE5(v296) = v522;
              BYTE6(v296) = v521;
              BYTE7(v296) = v520;
              BYTE8(v296) = v519;
              BYTE9(v296) = v518;
              BYTE10(v296) = v517;
              BYTE11(v296) = v516;
              BYTE12(v296) = v515;
              BYTE13(v296) = v514;
              *(_OWORD *)(v294 + 393) = v297;
              BYTE14(v296) = v513;
              HIBYTE(v296) = v619;
              *(_OWORD *)(v294 + 409) = v296;
              v294[455] = v355;
              LOBYTE(v296) = v623;
              BYTE1(v296) = v621;
              BYTE2(v296) = v628;
              BYTE3(v296) = v625;
              BYTE4(v296) = v630;
              BYTE5(v296) = v631;
              BYTE6(v296) = v633;
              BYTE7(v296) = v634;
              BYTE8(v296) = v635;
              BYTE9(v296) = v637;
              BYTE10(v296) = v639;
              BYTE11(v296) = v641;
              BYTE12(v296) = v643;
              BYTE13(v296) = v645;
              BYTE14(v296) = v647;
              HIBYTE(v296) = v358;
              *(_OWORD *)(v294 + 425) = v296;
              *(_QWORD *)(v294 + 441) = v295;
              v294[456] = 1;
            }
            v293[2 * (((char *)__p[1] - (char *)__p[0]) >> 3) + 116] = v758;
            if (__p[1] == __p[0])
            {
              v311 = (char *)&v293[2 * (((char *)__p[1] - (char *)__p[0]) >> 3)];
            }
            else
            {
              v298 = 0;
              do
              {
                v299 = &v294[v298];
                v300 = &v294[v298 - 472];
                v301 = (char *)__p[1] + v298;
                v302 = *(_OWORD *)((char *)__p[1] + v298 - 472);
                *(_OWORD *)(v300 + 12) = *(_OWORD *)((char *)__p[1] + v298 - 460);
                *(_OWORD *)v300 = v302;
                v303 = &v294[v298 - 440];
                *v303 = 0;
                v304 = &v294[v298 - 312];
                *v304 = 0;
                if (*((_BYTE *)__p[1] + v298 - 312))
                {
                  v305 = *(_OWORD *)(v301 - 440);
                  v306 = *(_OWORD *)(v301 - 424);
                  v307 = *(_OWORD *)(v301 - 392);
                  *(_OWORD *)&v294[v298 - 408] = *(_OWORD *)(v301 - 408);
                  *(_OWORD *)&v294[v298 - 392] = v307;
                  *(_OWORD *)v303 = v305;
                  *(_OWORD *)&v294[v298 - 424] = v306;
                  v308 = *(_OWORD *)(v301 - 376);
                  v309 = *(_OWORD *)(v301 - 360);
                  v310 = *(_OWORD *)(v301 - 328);
                  *(_OWORD *)&v294[v298 - 344] = *(_OWORD *)(v301 - 344);
                  *(_OWORD *)&v294[v298 - 328] = v310;
                  *(_OWORD *)&v294[v298 - 376] = v308;
                  *(_OWORD *)&v294[v298 - 360] = v309;
                  *v304 = 1;
                }
                *(v299 - 304) = 0;
                *(v299 - 16) = 0;
                if (*(v301 - 16))
                {
                  memcpy(v299 - 304, (char *)__p[1] + v298 - 304, 0x120uLL);
                  *(v299 - 16) = 1;
                }
                *(_DWORD *)&v294[v298 - 8] = *(_DWORD *)((char *)__p[1] + v298 - 8);
                v298 -= 472;
              }
              while ((char *)__p[1] + v298 != __p[0]);
              v273 = __p[0];
              v311 = &v294[v298];
            }
            __p[0] = v311;
            v804 = (char *)&v293[118 * v349];
            if (v273)
              operator delete(v273);
            a3 = v346;
            __p[1] = v294 + 472;
            if (v729 == 1)
              goto LABEL_84;
          }
          else
          {
            *(_DWORD *)__p[1] = v752 | (v755 << 8);
            *((_DWORD *)__p[1] + 1) = v761;
            *((_DWORD *)__p[1] + 2) = v764;
            *((_DWORD *)__p[1] + 3) = LODWORD(v748.f64[0]);
            *((_QWORD *)__p[1] + 2) = v257;
            *((_DWORD *)__p[1] + 6) = v258;
            *((float64x2_t *)__p[1] + 2) = v779;
            *((float64x2_t *)__p[1] + 3) = v775;
            *((float64x2_t *)__p[1] + 4) = v771;
            *((float64x2_t *)__p[1] + 5) = v767;
            *((float64x2_t *)__p[1] + 6) = v783;
            *((float64x2_t *)__p[1] + 7) = v787;
            *((float64x2_t *)__p[1] + 8) = v792;
            *((float64x2_t *)__p[1] + 9) = v796;
            *((_BYTE *)__p[1] + 160) = 1;
            *((_BYTE *)__p[1] + 168) = 0;
            *((_BYTE *)__p[1] + 456) = 0;
            if ((v800 & 1) == 0)
            {
              LOBYTE(v274) = v695;
              BYTE1(v274) = v698;
              BYTE2(v274) = v701;
              BYTE3(v274) = v703;
              BYTE4(v274) = v706;
              BYTE5(v274) = v708;
              BYTE6(v274) = v711;
              BYTE7(v274) = v713;
              BYTE8(v274) = v716;
              BYTE9(v274) = v720;
              BYTE10(v274) = v724;
              BYTE11(v274) = v730;
              BYTE12(v274) = v733;
              BYTE13(v274) = v736;
              BYTE14(v274) = v739;
              HIBYTE(v274) = v742;
              *(_OWORD *)((char *)__p[1] + 169) = v274;
              LOBYTE(v274) = v649;
              BYTE1(v274) = v652;
              BYTE2(v274) = v655;
              BYTE3(v274) = v657;
              BYTE4(v274) = v659;
              BYTE5(v274) = v663;
              BYTE6(v274) = v666;
              BYTE7(v274) = v670;
              BYTE8(v274) = v674;
              BYTE9(v274) = v677;
              BYTE10(v274) = v681;
              BYTE11(v274) = v685;
              BYTE12(v274) = v689;
              BYTE13(v274) = v692;
              *(_WORD *)((char *)__p[1] + 453) = WORD6(v274);
              *(_DWORD *)((char *)__p[1] + 449) = DWORD2(v274);
              LOBYTE(v275) = v354;
              BYTE1(v275) = v356;
              BYTE2(v275) = v357;
              BYTE3(v275) = v441;
              BYTE4(v275) = v444;
              BYTE5(v275) = v446;
              BYTE6(v275) = v448;
              BYTE7(v275) = v450;
              BYTE8(v275) = v452;
              BYTE9(v275) = v454;
              BYTE10(v275) = v456;
              BYTE11(v275) = v458;
              BYTE12(v275) = v460;
              BYTE13(v275) = v462;
              BYTE14(v275) = v464;
              HIBYTE(v275) = v422;
              LOBYTE(v276) = v424;
              BYTE1(v276) = v425;
              BYTE2(v276) = v426;
              BYTE3(v276) = v427;
              BYTE4(v276) = v428;
              BYTE5(v276) = v429;
              BYTE6(v276) = v430;
              BYTE7(v276) = v431;
              BYTE8(v276) = v432;
              BYTE9(v276) = v433;
              BYTE10(v276) = v434;
              BYTE11(v276) = v435;
              BYTE12(v276) = v438;
              BYTE13(v276) = v437;
              BYTE14(v276) = v436;
              HIBYTE(v276) = v439;
              LOBYTE(v277) = v440;
              BYTE1(v277) = v442;
              BYTE2(v277) = v443;
              BYTE3(v277) = v445;
              BYTE4(v277) = v447;
              BYTE5(v277) = v449;
              BYTE6(v277) = v451;
              BYTE7(v277) = v453;
              BYTE8(v277) = v455;
              BYTE9(v277) = v457;
              BYTE10(v277) = v459;
              BYTE11(v277) = v461;
              BYTE12(v277) = v463;
              BYTE13(v277) = v465;
              BYTE14(v277) = v466;
              HIBYTE(v277) = v468;
              LOBYTE(v278) = v470;
              BYTE1(v278) = v472;
              BYTE2(v278) = v474;
              BYTE3(v278) = v476;
              BYTE4(v278) = v478;
              BYTE5(v278) = v480;
              BYTE6(v278) = v482;
              BYTE7(v278) = v484;
              BYTE8(v278) = v486;
              BYTE9(v278) = v488;
              BYTE10(v278) = v490;
              BYTE11(v278) = v492;
              BYTE12(v278) = v494;
              BYTE13(v278) = v496;
              BYTE14(v278) = v498;
              HIBYTE(v278) = v407;
              LOBYTE(v279) = v408;
              BYTE1(v279) = v409;
              BYTE2(v279) = v410;
              BYTE3(v279) = v411;
              BYTE4(v279) = v412;
              BYTE5(v279) = v413;
              BYTE6(v279) = v414;
              BYTE7(v279) = v415;
              BYTE8(v279) = v416;
              BYTE9(v279) = v417;
              BYTE10(v279) = v418;
              BYTE11(v279) = v419;
              BYTE12(v279) = v420;
              BYTE13(v279) = v421;
              BYTE14(v279) = v423;
              HIBYTE(v279) = v467;
              LOBYTE(v280) = v469;
              BYTE1(v280) = v471;
              BYTE2(v280) = v473;
              BYTE3(v280) = v475;
              BYTE4(v280) = v477;
              BYTE5(v280) = v479;
              BYTE6(v280) = v481;
              BYTE7(v280) = v483;
              BYTE8(v280) = v485;
              BYTE9(v280) = v487;
              BYTE10(v280) = v489;
              BYTE11(v280) = v491;
              BYTE12(v280) = v493;
              BYTE13(v280) = v495;
              BYTE14(v280) = v497;
              HIBYTE(v280) = v500;
              LOBYTE(v281) = v502;
              BYTE1(v281) = v504;
              BYTE2(v281) = v506;
              BYTE3(v281) = v508;
              BYTE4(v281) = v510;
              BYTE5(v281) = v512;
              BYTE6(v281) = v530;
              BYTE7(v281) = v532;
              BYTE8(v281) = v534;
              BYTE9(v281) = v536;
              BYTE10(v281) = v538;
              BYTE11(v281) = v540;
              BYTE12(v281) = v542;
              BYTE13(v281) = v544;
              BYTE14(v281) = v546;
              HIBYTE(v281) = v391;
              LOBYTE(v282) = v392;
              BYTE1(v282) = v393;
              BYTE2(v282) = v394;
              BYTE3(v282) = v395;
              BYTE4(v282) = v396;
              BYTE5(v282) = v397;
              BYTE6(v282) = v398;
              BYTE7(v282) = v399;
              BYTE8(v282) = v400;
              BYTE9(v282) = v401;
              BYTE10(v282) = v402;
              BYTE11(v282) = v403;
              BYTE12(v282) = v404;
              BYTE13(v282) = v405;
              BYTE14(v282) = v406;
              HIBYTE(v282) = v499;
              LOBYTE(v283) = v501;
              BYTE1(v283) = v503;
              BYTE2(v283) = v505;
              BYTE3(v283) = v507;
              BYTE4(v283) = v509;
              BYTE5(v283) = v511;
              BYTE6(v283) = v529;
              BYTE7(v283) = v531;
              BYTE8(v283) = v533;
              BYTE9(v283) = v535;
              BYTE10(v283) = v537;
              BYTE11(v283) = v539;
              BYTE12(v283) = v541;
              BYTE13(v283) = v543;
              BYTE14(v283) = v545;
              HIBYTE(v283) = v548;
              LOBYTE(v284) = v550;
              BYTE1(v284) = v552;
              BYTE2(v284) = v554;
              BYTE3(v284) = v556;
              BYTE4(v284) = v558;
              BYTE5(v284) = v560;
              BYTE6(v284) = v601;
              BYTE7(v284) = v603;
              BYTE8(v284) = v605;
              BYTE9(v284) = v607;
              BYTE10(v284) = v609;
              BYTE11(v284) = v611;
              BYTE12(v284) = v613;
              BYTE13(v284) = v615;
              BYTE14(v284) = v617;
              HIBYTE(v284) = v375;
              LOBYTE(v285) = v376;
              BYTE1(v285) = v377;
              BYTE2(v285) = v378;
              BYTE3(v285) = v379;
              BYTE4(v285) = v380;
              BYTE5(v285) = v381;
              BYTE6(v285) = v382;
              BYTE7(v285) = v383;
              BYTE8(v285) = v384;
              BYTE9(v285) = v385;
              BYTE10(v285) = v386;
              BYTE11(v285) = v387;
              BYTE12(v285) = v388;
              BYTE13(v285) = v389;
              BYTE14(v285) = v390;
              HIBYTE(v285) = v547;
              LOBYTE(v286) = v549;
              BYTE1(v286) = v551;
              BYTE2(v286) = v553;
              BYTE3(v286) = v555;
              BYTE4(v286) = v557;
              BYTE5(v286) = v559;
              BYTE6(v286) = v599;
              BYTE7(v286) = v597;
              BYTE8(v286) = v595;
              BYTE9(v286) = v593;
              BYTE10(v286) = v591;
              BYTE11(v286) = v589;
              BYTE12(v286) = v587;
              BYTE13(v286) = v585;
              BYTE14(v286) = v583;
              HIBYTE(v286) = v581;
              LOBYTE(v287) = v579;
              BYTE1(v287) = v577;
              BYTE2(v287) = v575;
              BYTE3(v287) = v573;
              BYTE4(v287) = v571;
              BYTE5(v287) = v570;
              BYTE6(v287) = v569;
              BYTE7(v287) = v568;
              BYTE8(v287) = v567;
              BYTE9(v287) = v566;
              BYTE10(v287) = v565;
              BYTE11(v287) = v564;
              BYTE12(v287) = v563;
              BYTE13(v287) = v562;
              BYTE14(v287) = v561;
              HIBYTE(v287) = v359;
              LOBYTE(v288) = v360;
              BYTE1(v288) = v361;
              BYTE2(v288) = v362;
              BYTE3(v288) = v363;
              BYTE4(v288) = v364;
              BYTE5(v288) = v365;
              BYTE6(v288) = v366;
              BYTE7(v288) = v367;
              BYTE8(v288) = v368;
              BYTE9(v288) = v369;
              BYTE10(v288) = v370;
              BYTE11(v288) = v371;
              BYTE12(v288) = v372;
              BYTE13(v288) = v373;
              BYTE14(v288) = v374;
              HIBYTE(v288) = v528;
              LOBYTE(v289) = v527;
              BYTE1(v289) = v526;
              BYTE2(v289) = v525;
              BYTE3(v289) = v524;
              BYTE4(v289) = v523;
              BYTE5(v289) = v522;
              BYTE6(v289) = v521;
              BYTE7(v289) = v520;
              BYTE8(v289) = v519;
              BYTE9(v289) = v518;
              BYTE10(v289) = v517;
              BYTE11(v289) = v516;
              BYTE12(v289) = v515;
              BYTE13(v289) = v514;
              BYTE14(v289) = v513;
              HIBYTE(v289) = v619;
              LOBYTE(v290) = v623;
              BYTE1(v290) = v621;
              *((_BYTE *)__p[1] + 168) = v256;
              BYTE2(v290) = v628;
              BYTE3(v290) = v625;
              *(_OWORD *)((char *)__p[1] + 185) = v275;
              *(_OWORD *)((char *)__p[1] + 201) = v276;
              BYTE4(v290) = v630;
              BYTE5(v290) = v631;
              *(_OWORD *)((char *)__p[1] + 217) = v277;
              *(_OWORD *)((char *)__p[1] + 233) = v278;
              BYTE6(v290) = v633;
              BYTE7(v290) = v634;
              *(_OWORD *)((char *)__p[1] + 249) = v279;
              *(_OWORD *)((char *)__p[1] + 265) = v280;
              BYTE8(v290) = v635;
              BYTE9(v290) = v637;
              *(_OWORD *)((char *)__p[1] + 281) = v281;
              *(_OWORD *)((char *)__p[1] + 297) = v282;
              BYTE10(v290) = v639;
              BYTE11(v290) = v641;
              *(_OWORD *)((char *)__p[1] + 313) = v283;
              *(_OWORD *)((char *)__p[1] + 329) = v284;
              BYTE12(v290) = v643;
              BYTE13(v290) = v645;
              *(_OWORD *)((char *)__p[1] + 345) = v285;
              *(_OWORD *)((char *)__p[1] + 361) = v286;
              BYTE14(v290) = v647;
              HIBYTE(v290) = v358;
              *(_OWORD *)((char *)__p[1] + 377) = v287;
              *(_OWORD *)((char *)__p[1] + 393) = v288;
              *(_OWORD *)((char *)__p[1] + 409) = v289;
              *(_OWORD *)((char *)__p[1] + 425) = v290;
              *((_BYTE *)__p[1] + 455) = v355;
              *(_QWORD *)((char *)__p[1] + 441) = v274;
              *((_BYTE *)__p[1] + 456) = 1;
            }
            *((_DWORD *)__p[1] + 116) = v758;
            __p[1] = (char *)__p[1] + 472;
            if (v729 == 1)
              goto LABEL_84;
          }
          v312 = v809;
          v313 = &v809;
          v314 = &v809;
          if (!v809)
            goto LABEL_172;
          v315 = *(_QWORD *)(v51 + 16);
          v316 = *(_DWORD *)(v51 + 24);
          while (2)
          {
            while (1)
            {
              v314 = (uint64_t **)v312;
              v317 = v312[4];
              if (v315 < v317)
                break;
              if (v315 == v317)
              {
                v318 = *((_DWORD *)v314 + 10);
                if (v316 < v318)
                  break;
                if (v318 >= v316)
                  goto LABEL_84;
              }
              else if (v317 >= v315)
              {
                goto LABEL_84;
              }
              v312 = v314[1];
              if (!v312)
              {
                v313 = v314 + 1;
LABEL_172:
                v319 = (uint64_t *)operator new(0x30uLL);
                *((_OWORD *)v319 + 2) = *(_OWORD *)(v51 + 16);
                *v319 = 0;
                v319[1] = 0;
                v319[2] = (uint64_t)v314;
                *v313 = v319;
                if (*v808)
                {
                  v808 = (uint64_t **)*v808;
                  v319 = *v313;
                }
                v320 = v809;
                v14 = v319 == v809;
                *((_BYTE *)v319 + 24) = v319 == v809;
                if (!v14)
                {
                  do
                  {
                    v321 = v319[2];
                    if (*(_BYTE *)(v321 + 24))
                      break;
                    v322 = *(uint64_t **)(v321 + 16);
                    v323 = *v322;
                    if (*v322 == v321)
                    {
                      v326 = v322[1];
                      if (!v326 || (v327 = *(unsigned __int8 *)(v326 + 24), v324 = (_BYTE *)(v326 + 24), v327))
                      {
                        if (*(uint64_t **)v321 == v319)
                        {
                          *(_BYTE *)(v321 + 24) = 1;
                          *((_BYTE *)v322 + 24) = 0;
                          v330 = *(_QWORD *)(v321 + 8);
                          *v322 = v330;
                          if (v330)
                            goto LABEL_189;
                        }
                        else
                        {
                          v328 = *(uint64_t **)(v321 + 8);
                          v329 = *v328;
                          *(_QWORD *)(v321 + 8) = *v328;
                          if (v329)
                          {
                            *(_QWORD *)(v329 + 16) = v321;
                            v322 = *(uint64_t **)(v321 + 16);
                          }
                          v328[2] = (uint64_t)v322;
                          *(_QWORD *)(*(_QWORD *)(v321 + 16) + 8 * (**(_QWORD **)(v321 + 16) != v321)) = v328;
                          *v328 = v321;
                          *(_QWORD *)(v321 + 16) = v328;
                          v322 = (uint64_t *)v328[2];
                          v321 = *v322;
                          *((_BYTE *)v328 + 24) = 1;
                          *((_BYTE *)v322 + 24) = 0;
                          v330 = *(_QWORD *)(v321 + 8);
                          *v322 = v330;
                          if (v330)
LABEL_189:
                            *(_QWORD *)(v330 + 16) = v322;
                        }
                        *(_QWORD *)(v321 + 16) = v322[2];
                        *(_QWORD *)(v322[2] + 8 * (*(_QWORD *)v322[2] != (_QWORD)v322)) = v321;
                        *(_QWORD *)(v321 + 8) = v322;
LABEL_195:
                        v322[2] = v321;
                        break;
                      }
                    }
                    else if (!v323 || (v325 = *(unsigned __int8 *)(v323 + 24), v324 = (_BYTE *)(v323 + 24), v325))
                    {
                      if (*(uint64_t **)v321 == v319)
                      {
                        v332 = v319[1];
                        *(_QWORD *)v321 = v332;
                        if (v332)
                        {
                          *(_QWORD *)(v332 + 16) = v321;
                          v322 = *(uint64_t **)(v321 + 16);
                        }
                        v319[2] = (uint64_t)v322;
                        *(_QWORD *)(*(_QWORD *)(v321 + 16) + 8 * (**(_QWORD **)(v321 + 16) != v321)) = v319;
                        v319[1] = v321;
                        *(_QWORD *)(v321 + 16) = v319;
                        v322 = (uint64_t *)v319[2];
                        *((_BYTE *)v319 + 24) = 1;
                        *((_BYTE *)v322 + 24) = 0;
                        v321 = v322[1];
                        v331 = *(uint64_t **)v321;
                        v322[1] = *(_QWORD *)v321;
                        if (v331)
LABEL_193:
                          v331[2] = (uint64_t)v322;
                      }
                      else
                      {
                        *(_BYTE *)(v321 + 24) = 1;
                        *((_BYTE *)v322 + 24) = 0;
                        v321 = v322[1];
                        v331 = *(uint64_t **)v321;
                        v322[1] = *(_QWORD *)v321;
                        if (v331)
                          goto LABEL_193;
                      }
                      *(_QWORD *)(v321 + 16) = v322[2];
                      *(_QWORD *)(v322[2] + 8 * (*(_QWORD *)v322[2] != (_QWORD)v322)) = v321;
                      *(_QWORD *)v321 = v322;
                      goto LABEL_195;
                    }
                    *(_BYTE *)(v321 + 24) = 1;
                    v319 = v322;
                    *((_BYTE *)v322 + 24) = v322 == v320;
                    *v324 = 1;
                  }
                  while (v322 != v320);
                }
                v264 = v810;
                v52 = &v810;
LABEL_83:
                *v52 = v264 + 1;
LABEL_84:
                v51 += 472;
                v50 = v802;
                goto LABEL_85;
              }
            }
            v312 = *v314;
            v313 = v314;
            if (!*v314)
              goto LABEL_172;
            continue;
          }
        }
        ++v729;
        v48 = v347 + 3;
        if (v347 + 3 != v345)
          continue;
        break;
      }
      v333 = v809;
      v334 = &v809;
      v335 = &v809;
      v6 = v343;
      if (v809)
        break;
LABEL_214:
      v340 = operator new(0x30uLL);
      v340[2] = *(_OWORD *)v344;
      *(_QWORD *)v340 = 0;
      *((_QWORD *)v340 + 1) = 0;
      *((_QWORD *)v340 + 2) = v335;
      *v334 = (uint64_t *)v340;
      if (*v808)
      {
        v808 = (uint64_t **)*v808;
        v340 = *v334;
      }
      sub_20E868578(v809, (uint64_t *)v340);
      ++v810;
LABEL_217:
      v23 = v807;
      v25 = *((_QWORD *)&v807 + 1) - 1;
      v28 = v807 + 1;
      --*((_QWORD *)&v807 + 1);
      *(_QWORD *)&v807 = v28;
      if (v28 < 0x20)
        goto LABEL_34;
      v29 = (void **)v805[1];
LABEL_33:
      operator delete(*v29);
      v28 = v23 - 15;
      v805[1] = v29 + 1;
      *(_QWORD *)&v807 = v23 - 15;
LABEL_34:
      v23 = v28;
      if (!v25)
      {
        v27 = *(_OWORD *)__p;
        v26 = v804;
        v19 = (void **)v805[1];
        v18 = (void **)v806;
        goto LABEL_220;
      }
    }
    v336 = *(_QWORD *)v344;
    v337 = *(_DWORD *)(v344 + 8);
    while (1)
    {
      v335 = (uint64_t **)v333;
      v338 = v333[4];
      if (v336 < v338)
        goto LABEL_205;
      if (v336 != v338)
      {
        if (v338 >= v336)
          goto LABEL_217;
        goto LABEL_212;
      }
      v339 = *((_DWORD *)v335 + 10);
      if (v337 < v339)
      {
LABEL_205:
        v333 = *v335;
        v334 = v335;
        if (!*v335)
          goto LABEL_214;
      }
      else
      {
        if (v339 >= v337)
          goto LABEL_217;
LABEL_212:
        v333 = v335[1];
        if (!v333)
        {
          v334 = v335 + 1;
          goto LABEL_214;
        }
      }
    }
  }
  v26 = 0;
  v27 = 0uLL;
LABEL_220:
  *(_OWORD *)a4 = v27;
  a4[2] = v26;
  v21 = (char *)v18 - (char *)v19;
  if ((unint64_t)((char *)v18 - (char *)v19) >= 0x11)
  {
    do
    {
      v20 = *v19++;
      operator delete(v20);
      v21 -= 8;
    }
    while (v21 > 0x10);
  }
LABEL_223:
  while (v19 != v18)
  {
    v341 = *v19++;
    operator delete(v341);
  }
  if (v805[0])
    operator delete(v805[0]);
  sub_20E86872C((uint64_t)&v808, v809);
}

void sub_20F7CA570(_Unwind_Exception *a1)
{
  void *v2;

  v2 = (void *)STACK[0x970];
  if (STACK[0x970])
  {
    STACK[0x978] = (unint64_t)v2;
    operator delete(v2);
  }
  sub_20F7CA5B0((uint64_t)&STACK[0x990]);
  sub_20E86872C((uint64_t)&STACK[0x9C0], (_QWORD *)STACK[0x9C8]);
  _Unwind_Resume(a1);
}

uint64_t sub_20F7CA5B0(uint64_t a1)
{
  void **v2;
  void **v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;

  v2 = *(void ***)(a1 + 8);
  v3 = *(void ***)(a1 + 16);
  *(_QWORD *)(a1 + 40) = 0;
  v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v3 = *(void ***)(a1 + 16);
      v2 = (void **)(*(_QWORD *)(a1 + 8) + 8);
      *(_QWORD *)(a1 + 8) = v2;
      v4 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  v5 = v4 >> 3;
  if (v5 == 1)
  {
    v6 = 8;
    goto LABEL_7;
  }
  if (v5 == 2)
  {
    v6 = 16;
LABEL_7:
    *(_QWORD *)(a1 + 32) = v6;
  }
  if (v2 != v3)
  {
    do
    {
      v7 = *v2++;
      operator delete(v7);
    }
    while (v2 != v3);
    v9 = *(_QWORD *)(a1 + 8);
    v8 = *(_QWORD *)(a1 + 16);
    if (v8 != v9)
      *(_QWORD *)(a1 + 16) = v8 + ((v9 - v8 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

float64x2_t sub_20F7CA674@<Q0>(uint64_t a1@<X0>, __int128 *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  int v5;
  float64x2_t v6;
  float64x2_t v7;
  float64x2_t v8;
  __int128 v9;
  float64x2_t v10;
  float64x2_t v11;
  float64x2_t v12;
  float64x2_t v13;
  float64x2_t v14;
  __int128 v15;
  float64x2_t v16;
  float64x2_t v17;
  float64x2_t v18;
  float64x2_t v19;
  float64x2_t v20;
  float64x2_t v21;
  int8x16_t v22;
  float64x2_t v23;
  float64x2_t v24;
  float64x2_t v25;
  float64x2_t v26;
  float64x2_t v27;
  float64x2_t v28;
  float64x2_t v29;
  float64x2_t v30;
  float64x2_t v31;
  float64x2_t v32;
  float64x2_t *v33;
  float64_t v34;
  float64x2_t v35;
  float64_t v36;
  unint64_t v37;
  float64_t v38;
  float64x2_t v39;
  BOOL v40;
  float64x2_t v41;
  float64x2_t v42;
  float64x2_t v43;
  float64x2_t v44;
  float64x2_t v45;
  float64x2_t v46;
  float64x2_t v47;
  float64x2_t v48;
  float64x2_t v49;
  float64x2_t v50;
  int8x16_t v51;
  float64x2_t v52;
  float64x2_t v53;
  float64x2_t v54;
  float64x2_t v55;
  float64x2_t v56;
  float64x2_t v57;
  float64x2_t v58;
  float64x2_t v59;
  float64x2_t v60;
  float64x2_t v61;
  float64x2_t v62;
  float64x2_t v63;
  float64x2_t v64;
  float64x2_t v65;
  float64x2_t v66;
  float64x2_t v67;
  float64x2_t v68;
  float64x2_t v69;
  float64x2_t v70;
  float64x2_t v71;
  float64x2_t v72;
  float64x2_t v73;
  float64x2_t v74;
  float64x2_t v75;
  float64x2_t v76;
  float64x2_t v77;
  float64x2_t v78;
  float64x2_t v79;
  float64x2_t v80;
  float64x2_t v81;
  float64x2_t v82;
  float64x2_t v83;
  float64x2_t v84;
  float64x2_t v85;
  float64x2_t v86;
  float64x2_t v87;
  float64x2_t v88;
  float64x2_t v89;
  float64x2_t v90;
  float64x2_t v91;
  float64x2_t v92;
  float64x2_t v93;
  float64x2_t v94;
  float64x2_t v95;
  float64x2_t v96;
  float64x2_t v97;
  float64x2_t v98;
  float64x2_t v99;
  float64x2_t v100;
  float64x2_t v101;
  float64x2_t v102;
  float64x2_t v103;
  float64x2_t v104;
  float64x2_t v105;
  float64x2_t v106;
  float64x2_t v107;
  float64x2_t v108;
  float64x2_t v109;
  float64x2_t v110;
  float64x2_t v111;
  float64x2_t v112;
  float64x2_t v113;
  float64x2_t v114;
  float64x2_t v115;
  float64x2_t v116;
  float64x2_t v117;
  float64x2_t v118;
  int64x2_t v119;
  float64x2_t v120;
  float64x2_t v121;
  float64x2_t v122;
  float64x2_t v123;
  float64x2_t v124;
  float64x2_t v125;
  float64x2_t v126;
  int64x2_t v127;
  float64x2_t v128;
  float64x2_t v129;
  float64x2_t v130;
  float64x2_t v131;
  float64x2_t v132;
  float64x2_t v133;
  float64x2_t v134;
  float64x2_t v135;
  float64x2_t v136;
  float64x2_t v137;
  float64x2_t v138;
  float64x2_t v139;
  float64x2_t v140;
  float64x2_t v141;
  float64x2_t v142;
  float64x2_t v143;
  float64x2_t v144;
  float64x2_t v145;
  float64x2_t v146;
  float64x2_t v147;
  float64x2_t v148;
  float64x2_t v149;
  float64x2_t v150;
  float64x2_t v151;
  float64x2_t v152;
  float64x2_t v153;
  float64x2_t v154;
  float64x2_t v155;
  float64x2_t v156;
  float64x2_t v157;
  float64x2_t v158;
  float64x2_t v159;
  float64x2_t v160;
  float64x2_t v161;
  float64x2_t v162;
  float64x2_t v163;
  float64x2_t v164;
  float64x2_t v165;
  float64x2_t v166;
  float64x2_t v167;
  float64x2_t v168;
  float64x2_t v169;
  float64x2_t v170;
  float64x2_t result;
  float64x2_t v172;
  float64x2_t v173;
  float64x2_t v174;
  float64x2_t v175;
  float64x2_t v176;
  float64x2_t v177;
  float64x2_t v178;
  float64x2_t v179;
  float64x2_t v180;
  float64x2_t v181;
  float64x2_t v182;
  float64x2_t v183;
  float64x2_t v184;
  float64x2_t v185;
  float64x2_t v186;
  float64x2_t v187;
  float64x2_t v188;
  float64x2_t v189;
  float64x2_t v190;
  float64x2_t v191;
  float64x2_t v192;
  float64x2_t v193;
  float64x2_t v194;
  float64x2_t v195;
  float64x2_t v196;
  float64x2_t v197;
  float64x2_t v198;
  float64x2_t v199;
  float64x2_t v200;
  float64x2_t v201;
  float64x2_t v202;
  float64x2_t v203;
  float64x2_t v204;
  float64x2_t v205;
  float64x2_t v206;
  float64x2_t v207;
  float64x2_t v208;
  float64x2_t v209;
  float64x2_t v210;
  float64x2_t v211;
  float64x2_t v212;
  float64x2_t v213;
  float64x2_t v214;
  float64x2_t v215;
  float64x2_t v216;
  float64x2_t v217;
  float64x2_t v218;
  float64x2_t v219;
  float64x2_t v220;
  float64x2_t v221;
  float64x2_t v222;
  float64x2_t v223;
  float64x2_t v224;
  float64x2_t v225;
  float64x2_t v226;
  float64x2_t v227;
  float64x2_t v228;
  float64x2_t v229;
  float64x2_t v230;
  float64x2_t v231;
  float64x2_t v232;
  float64x2_t v233;
  float64x2_t v234;
  float64x2_t v235;
  float64x2_t v236;
  float64x2_t v237;
  float64x2_t v238;
  float64x2_t v239;
  float64x2_t v240;
  float64x2_t v241;
  float64x2_t v242;
  float64x2_t v243;
  float64x2_t v244;
  float64x2_t v245;
  float64x2_t v246;
  float64x2_t v247;
  float64x2_t v248;
  float64x2_t v249;
  float64x2_t v250;
  float64x2_t v251;
  float64x2_t v252;
  float64x2_t v253;
  float64x2_t v254;
  float64x2_t v255;
  float64x2_t v256;
  float64x2_t v257;
  float64x2_t v258;
  float64x2_t v259;
  float64x2_t v260;
  float64x2_t v261;
  float64x2_t v262;
  float64x2_t v263;
  float64x2_t v264;
  float64x2_t v265;
  float64x2_t v266;
  uint64_t v267;
  float64x2_t v268;
  float64x2_t v269;
  float64x2_t v270;
  float64x2_t v271;
  float64x2_t v272;
  float64x2_t v273;
  float64x2_t v274;
  float64x2_t v275;
  float64x2_t v276;
  float64x2_t v277;
  float64x2_t v278;
  float64x2_t v279;
  float64x2_t v280;
  float64x2_t v281;
  float64x2_t v282;
  float64x2_t v283;
  float64x2_t v284;
  float64x2_t v285;
  float64x2_t v286;
  float64x2_t v287;
  float64x2_t v288;
  float64x2_t v289;
  float64x2_t v290;
  float64x2_t v291;
  float64x2_t v292;
  float64x2_t v293;
  float64x2_t v294;
  float64x2_t v295;
  float64x2_t v296;
  float64x2_t v297;
  float64x2_t v298;
  float64x2_t v299;
  float64x2_t v300;
  float64x2_t v301;
  float64x2_t v302;
  float64x2_t v303;
  float64x2_t v304;
  _BYTE v305[32];
  int64x2_t v306;
  _BYTE v307[32];
  int64x2_t v308;
  _BYTE v309[32];
  int64x2_t v310;
  _BYTE v311[32];
  int64x2_t v312;
  _BYTE v313[32];
  int64x2_t v314;
  _BYTE v315[32];

  v4 = 0;
  v5 = 0;
  v6 = (float64x2_t)a2[3];
  v7 = (float64x2_t)a2[5];
  v8 = (float64x2_t)a2[7];
  *(_QWORD *)&v9 = -1;
  *((_QWORD *)&v9 + 1) = -1;
  v11 = (float64x2_t)a2[9];
  v10 = (float64x2_t)a2[10];
  v12 = *(float64x2_t *)(a1 + 48);
  v13 = *(float64x2_t *)(a1 + 64);
  v14 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v6, v12.f64[0]), v7, v12, 1), v8, v13.f64[0]), v11, v13, 1);
  *(_OWORD *)(a3 + 16) = v9;
  *(_OWORD *)(a3 + 32) = v9;
  v15 = *a2;
  *(_OWORD *)(a3 + 24) = *(_OWORD *)(a1 + 24);
  *(_OWORD *)a3 = v15;
  v17 = *(float64x2_t *)(a1 + 80);
  v16 = *(float64x2_t *)(a1 + 96);
  v19 = *(float64x2_t *)(a1 + 112);
  v18 = *(float64x2_t *)(a1 + 128);
  v21 = (float64x2_t)a2[3];
  v20 = (float64x2_t)a2[4];
  v22 = (int8x16_t)a2[5];
  v23 = (float64x2_t)a2[6];
  v24 = vmlaq_laneq_f64(vmulq_n_f64(v20, v12.f64[0]), v23, v12, 1);
  v25 = (float64x2_t)a2[7];
  v26 = (float64x2_t)a2[8];
  v35 = vmlaq_laneq_f64(vmlaq_n_f64(v24, v26, v13.f64[0]), v10, v13, 1);
  v27 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v6, v17.f64[0]), v7, v17, 1), v8, v16.f64[0]), v11, v16, 1);
  v28 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v20, v17.f64[0]), v23, v17, 1), v26, v16.f64[0]), v10, v16, 1);
  v29 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v6, v19.f64[0]), v7, v19, 1), v8, v18.f64[0]), v11, v18, 1);
  v30 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v20, v19.f64[0]), v23, v19, 1), v26, v18.f64[0]), v10, v18, 1);
  v32 = *(float64x2_t *)(a1 + 144);
  v31 = *(float64x2_t *)(a1 + 160);
  v33 = (float64x2_t *)(a2 + 17);
  *(_OWORD *)(a3 + 192) = 0u;
  *(_OWORD *)(a3 + 208) = 0u;
  *(_OWORD *)(a3 + 224) = 0u;
  *(_OWORD *)(a3 + 240) = 0u;
  *(_OWORD *)(a3 + 256) = 0u;
  *(_OWORD *)(a3 + 272) = 0u;
  *(_OWORD *)(a3 + 288) = 0u;
  *(_OWORD *)(a3 + 304) = 0u;
  *(_OWORD *)(a3 + 320) = 0u;
  *(_OWORD *)(a3 + 336) = 0u;
  *(_OWORD *)(a3 + 352) = 0u;
  *(_OWORD *)(a3 + 368) = 0u;
  *(_OWORD *)(a3 + 384) = 0u;
  *(_OWORD *)(a3 + 400) = 0u;
  *(_OWORD *)(a3 + 416) = 0u;
  *(_OWORD *)(a3 + 432) = 0u;
  *(_OWORD *)(a3 + 448) = 0u;
  *(_QWORD *)(a3 + 461) = 0;
  *(_DWORD *)(a3 + 40) = *(_DWORD *)(a1 + 40);
  *(_DWORD *)(a3 + 16) = *((_DWORD *)a2 + 4);
  *(float64x2_t *)(a3 + 48) = v14;
  *(float64x2_t *)(a3 + 64) = v35;
  *(float64x2_t *)(a3 + 80) = v27;
  *(float64x2_t *)(a3 + 96) = v28;
  *(float64x2_t *)(a3 + 112) = v29;
  *(float64x2_t *)(a3 + 128) = v30;
  *(float64x2_t *)(a3 + 160) = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v20, v32.f64[0]), v23, v32, 1), v26, v31.f64[0]), v10, v31, 1);
  *(_OWORD *)(a3 + 176) = 0u;
  *(float64x2_t *)(a3 + 144) = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v6, v32.f64[0]), v7, v32, 1), v8, v31.f64[0]), v11, v31, 1);
  v34 = *((double *)a2 + 8);
  *(_QWORD *)&v35.f64[0] = vextq_s8((int8x16_t)v21, (int8x16_t)v21, 8uLL).u64[0];
  v36 = *((double *)a2 + 12);
  v37 = vextq_s8(v22, v22, 8uLL).u64[0];
  v38 = *((double *)a2 + 16);
  v39 = (float64x2_t)vextq_s8((int8x16_t)v25, (int8x16_t)v25, 8uLL);
  v304 = v21;
  *(float64_t *)v305 = v34;
  *(float64_t *)v307 = v36;
  v306 = (int64x2_t)v22;
  *(float64_t *)v309 = v38;
  v308 = (int64x2_t)v25;
  do
  {
    v310.i64[v4] = 0;
    v40 = v5 < 2;
    if (v5 < 2)
      ++v5;
    else
      v5 = 0;
    if (v40)
      ++v4;
    else
      v4 += 4;
  }
  while (v4 != 18);
  v41.f64[0] = v35.f64[0];
  v41.f64[1] = v36;
  *(_QWORD *)&v42.f64[0] = v22.i64[0];
  *(_QWORD *)&v42.f64[1] = v37;
  v43 = (float64x2_t)vzip1q_s64((int64x2_t)v10, (int64x2_t)v11);
  v44 = (float64x2_t)vextq_s8((int8x16_t)v11, (int8x16_t)v10, 8uLL);
  v45.f64[0] = v34;
  v45.f64[1] = v21.f64[0];
  v46 = vmulq_f64(v45, v44);
  v45.f64[0] = v38;
  v45.f64[1] = v25.f64[0];
  v47.f64[0] = v39.f64[0];
  v47.f64[1] = v38;
  v48 = vmlsq_f64(vmulq_f64(v45, v44), v47, v43);
  v47.f64[0] = v21.f64[0];
  v47.f64[1] = v35.f64[0];
  v35.f64[1] = v34;
  v49 = vmlsq_f64(v46, v35, v43);
  v50.f64[0] = v36;
  *(_QWORD *)&v50.f64[1] = v22.i64[0];
  v51 = (int8x16_t)vmlsq_f64(vmulq_f64(v42, v43), v50, v11);
  *(_QWORD *)&v21.f64[1] = v37;
  v52 = vmlsq_f64(vmulq_f64(v41, v11), v21, v44);
  *(_QWORD *)&v41.f64[0] = *(_OWORD *)&vmlsq_laneq_f64(vmulq_f64(v39, v11), v25, v11, 1);
  *(float64x2_t *)&v305[8] = v49;
  v53 = (float64x2_t)a2[11];
  v54 = (float64x2_t)a2[12];
  v55 = (float64x2_t)a2[13];
  v56 = (float64x2_t)a2[14];
  v57 = (float64x2_t)a2[16];
  v206 = (float64x2_t)a2[15];
  v260 = vmlaq_laneq_f64(vmulq_n_f64(v55, v304.f64[0]), v57, v304, 1);
  *(float64_t *)&v305[24] = v52.f64[0];
  v247 = (float64x2_t)vzip1q_s64((int64x2_t)v304, v306);
  v58 = (float64x2_t)vzip2q_s64((int64x2_t)v304, v306);
  *(_QWORD *)&v307[24] = v51.i64[1];
  *(int8x16_t *)&v307[8] = vextq_s8((int8x16_t)v52, v51, 8uLL);
  v185 = (float64x2_t)vzip1q_s64(*(int64x2_t *)v305, *(int64x2_t *)v307);
  v59 = (float64x2_t)vzip2q_s64(*(int64x2_t *)v305, *(int64x2_t *)v307);
  v60 = (float64x2_t)vzip1q_s64(*(int64x2_t *)&v305[16], *(int64x2_t *)&v307[16]);
  v61 = (float64x2_t)vzip2q_s64(*(int64x2_t *)&v305[16], *(int64x2_t *)&v307[16]);
  v62 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v247, v53.f64[0]), v58, v53, 1), v185, v54.f64[0]), v59, v54, 1), v60, v55.f64[0]), v61, v55, 1);
  v198 = v61;
  v199 = v60;
  v25.f64[1] = v39.f64[0];
  *(float64_t *)&v309[24] = v41.f64[0];
  *(float64x2_t *)&v309[8] = v48;
  *(float64x2_t *)&v311[8] = v47;
  *(float64_t *)&v311[24] = v34;
  *(float64_t *)&v313[24] = v36;
  *(_QWORD *)&v47.f64[0] = vdupq_laneq_s64(v308, 1).u64[0];
  *(_QWORD *)&v47.f64[1] = v310.i64[1];
  v204 = v47;
  v205 = (float64x2_t)vzip1q_s64(v308, v310);
  v63 = v47;
  *(float64x2_t *)&v313[8] = v42;
  *(float64x2_t *)&v315[8] = v25;
  *(float64_t *)&v315[24] = v38;
  *(_QWORD *)&v41.f64[0] = vdupq_laneq_s64(*(int64x2_t *)v309, 1).u64[0];
  v41.f64[1] = *(float64_t *)&v311[8];
  v202 = v41;
  v203 = (float64x2_t)vzip1q_s64(*(int64x2_t *)v309, *(int64x2_t *)v311);
  v64 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v205, v53.f64[0]), v47, v53, 1), v203, v54.f64[0]), v41, v54, 1);
  v65 = (float64x2_t)vzip1q_s64(*(int64x2_t *)&v309[16], *(int64x2_t *)&v311[16]);
  *(_QWORD *)&v47.f64[0] = vdupq_laneq_s64(*(int64x2_t *)&v309[16], 1).u64[0];
  v47.f64[1] = v34;
  v66 = vmlaq_laneq_f64(vmlaq_n_f64(v64, v65, v55.f64[0]), v47, v55, 1);
  v67 = v47;
  v200 = v47;
  v201 = v65;
  *(_QWORD *)&v52.f64[0] = vdupq_laneq_s64(v312, 1).u64[0];
  *(_QWORD *)&v52.f64[1] = v314.i64[1];
  v68 = (float64x2_t)vzip1q_s64(v312, v314);
  v69 = (float64x2_t)vzip1q_s64(*(int64x2_t *)v313, *(int64x2_t *)v315);
  *(_QWORD *)&v48.f64[0] = vdupq_laneq_s64(*(int64x2_t *)v313, 1).u64[0];
  v48.f64[1] = v25.f64[0];
  v183 = (float64x2_t)vzip1q_s64(*(int64x2_t *)&v313[16], *(int64x2_t *)&v315[16]);
  v184 = v48;
  *(_QWORD *)&v70.f64[0] = vdupq_laneq_s64(*(int64x2_t *)&v313[16], 1).u64[0];
  v70.f64[1] = v38;
  v71 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v68, v53.f64[0]), v52, v53, 1), v69, v54.f64[0]), v48, v54, 1), v183, v55.f64[0]), v70, v55, 1);
  v197 = v70;
  v72 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v247, v56.f64[0]), v58, v56, 1), v185, v206.f64[0]), v59, v206, 1), v60, v57.f64[0]), v61, v57, 1);
  v73 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v205, v56.f64[0]), v63, v56, 1), v203, v206.f64[0]), v41, v206, 1), v65, v57.f64[0]), v67, v57, 1);
  v74 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v68, v56.f64[0]), v52, v56, 1), v69, v206.f64[0]), v48, v206, 1), v183, v57.f64[0]), v70, v57, 1);
  v175 = vmlaq_laneq_f64(vmulq_n_f64(v62, v304.f64[0]), v72, v304, 1);
  v174 = vmlaq_laneq_f64(vmulq_n_f64(v66, v304.f64[0]), v73, v304, 1);
  v255 = vmlaq_laneq_f64(vmulq_n_f64(v71, v304.f64[0]), v74, v304, 1);
  v235 = vmlaq_laneq_f64(vmulq_n_f64(v53, *(double *)v306.i64), v56, (float64x2_t)v306, 1);
  v258 = vmlaq_laneq_f64(vmulq_n_f64(v55, *(double *)v306.i64), v57, (float64x2_t)v306, 1);
  v173 = vmlaq_laneq_f64(vmulq_n_f64(v62, *(double *)v306.i64), v72, (float64x2_t)v306, 1);
  v233 = vmlaq_laneq_f64(vmulq_n_f64(v66, *(double *)v306.i64), v73, (float64x2_t)v306, 1);
  v231 = vmlaq_laneq_f64(vmulq_n_f64(v71, *(double *)v306.i64), v74, (float64x2_t)v306, 1);
  v238 = vmlaq_laneq_f64(vmulq_n_f64(v53, *(double *)v308.i64), v56, (float64x2_t)v308, 1);
  v75 = v57;
  v254 = vmlaq_laneq_f64(vmulq_n_f64(v55, *(double *)v308.i64), v57, (float64x2_t)v308, 1);
  v229 = vmlaq_laneq_f64(vmulq_n_f64(v62, *(double *)v308.i64), v72, (float64x2_t)v308, 1);
  v227 = vmlaq_laneq_f64(vmulq_n_f64(v66, *(double *)v308.i64), v73, (float64x2_t)v308, 1);
  v225 = vmlaq_laneq_f64(vmulq_n_f64(v71, *(double *)v308.i64), v74, (float64x2_t)v308, 1);
  v76 = vmlaq_laneq_f64(vmulq_n_f64(v53, *(double *)v310.i64), v56, (float64x2_t)v310, 1);
  v241 = vmlaq_laneq_f64(vmulq_n_f64(v54, *(double *)v310.i64), v206, (float64x2_t)v310, 1);
  v248 = vmlaq_laneq_f64(vmulq_n_f64(v55, *(double *)v310.i64), v57, (float64x2_t)v310, 1);
  v223 = vmlaq_laneq_f64(vmulq_n_f64(v62, *(double *)v310.i64), v72, (float64x2_t)v310, 1);
  v221 = vmlaq_laneq_f64(vmulq_n_f64(v66, *(double *)v310.i64), v73, (float64x2_t)v310, 1);
  v219 = vmlaq_laneq_f64(vmulq_n_f64(v71, *(double *)v310.i64), v74, (float64x2_t)v310, 1);
  v193 = v53;
  v245 = vmlaq_laneq_f64(vmulq_n_f64(v53, *(double *)v312.i64), v56, (float64x2_t)v312, 1);
  v190 = v55;
  v191 = v56;
  v186 = v54;
  v243 = vmlaq_laneq_f64(vmulq_n_f64(v54, *(double *)v312.i64), v206, (float64x2_t)v312, 1);
  v250 = vmlaq_laneq_f64(vmulq_n_f64(v55, *(double *)v312.i64), v57, (float64x2_t)v312, 1);
  v189 = v57;
  v217 = vmlaq_laneq_f64(vmulq_n_f64(v62, *(double *)v312.i64), v72, (float64x2_t)v312, 1);
  v215 = vmlaq_laneq_f64(vmulq_n_f64(v66, *(double *)v312.i64), v73, (float64x2_t)v312, 1);
  v209 = vmlaq_laneq_f64(vmulq_n_f64(v71, *(double *)v312.i64), v74, (float64x2_t)v312, 1);
  v207 = vmlaq_laneq_f64(vmulq_n_f64(v66, *(double *)v314.i64), v73, (float64x2_t)v314, 1);
  v211 = vmlaq_laneq_f64(vmulq_n_f64(v62, *(double *)v314.i64), v72, (float64x2_t)v314, 1);
  v213 = vmlaq_laneq_f64(vmulq_n_f64(v71, *(double *)v314.i64), v74, (float64x2_t)v314, 1);
  v77 = vmlaq_laneq_f64(vmulq_n_f64(v53, *(double *)v314.i64), v56, (float64x2_t)v314, 1);
  v78 = vmlaq_laneq_f64(vmulq_n_f64(v54, *(double *)v314.i64), v206, (float64x2_t)v314, 1);
  v79 = (float64x2_t)a2[18];
  v80 = (float64x2_t)a2[20];
  v81 = (float64x2_t)a2[21];
  v265 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v53, v304.f64[0]), v56, v304, 1), *v33, *(double *)v305), v80, *(float64x2_t *)v305, 1);
  v263 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v54, v304.f64[0]), v206, v304, 1), v79, *(double *)v305), v81, *(float64x2_t *)v305, 1);
  v82 = (float64x2_t)a2[19];
  v83 = (float64x2_t)a2[22];
  v261 = vmlaq_laneq_f64(vmlaq_n_f64(v260, v82, *(double *)v305), v83, *(float64x2_t *)v305, 1);
  v172 = v68;
  v84 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v247, v33->f64[0]), v58, *v33, 1), v185, v79.f64[0]), v59, v79, 1), v199, v82.f64[0]), v198, v82, 1);
  v85 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v205, v33->f64[0]), v204, *v33, 1), v203, v79.f64[0]), v202, v79, 1), v201, v82.f64[0]), v200, v82, 1);
  v86 = v79;
  v87 = v82;
  v88 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v68, v33->f64[0]), v52, *v33, 1), v69, v79.f64[0]), v48, v79, 1), v183, v82.f64[0]), v197, v82, 1);
  v89 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v247, v80.f64[0]), v58, v80, 1), v185, v81.f64[0]), v59, v81, 1), v199, v83.f64[0]), v198, v83, 1);
  v90 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v205, v80.f64[0]), v204, v80, 1), v203, v81.f64[0]), v202, v81, 1), v201, v83.f64[0]), v200, v83, 1);
  v91 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v68, v80.f64[0]), v52, v80, 1), v69, v81.f64[0]), v48, v81, 1), v183, v83.f64[0]), v197, v83, 1);
  v92 = vmlaq_laneq_f64(vmlaq_n_f64(v175, v84, *(double *)v305), v89, *(float64x2_t *)v305, 1);
  v93 = vmlaq_laneq_f64(vmlaq_n_f64(v174, v85, *(double *)v305), v90, *(float64x2_t *)v305, 1);
  v256 = vmlaq_laneq_f64(vmlaq_n_f64(v255, v88, *(double *)v305), v91, *(float64x2_t *)v305, 1);
  v94 = vmlaq_laneq_f64(vmlaq_n_f64(v235, *v33, *(double *)v307), v80, *(float64x2_t *)v307, 1);
  v95 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v54, *(double *)v306.i64), v206, (float64x2_t)v306, 1), v86, *(double *)v307), v81, *(float64x2_t *)v307, 1);
  v96 = vmlaq_laneq_f64(vmlaq_n_f64(v173, v84, *(double *)v307), v89, *(float64x2_t *)v307, 1);
  v234 = vmlaq_laneq_f64(vmlaq_n_f64(v233, v85, *(double *)v307), v90, *(float64x2_t *)v307, 1);
  v232 = vmlaq_laneq_f64(vmlaq_n_f64(v231, v88, *(double *)v307), v91, *(float64x2_t *)v307, 1);
  v97 = vmlaq_laneq_f64(vmlaq_n_f64(v238, *v33, *(double *)v309), v80, *(float64x2_t *)v309, 1);
  v98 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v54, *(double *)v308.i64), v206, (float64x2_t)v308, 1), v86, *(double *)v309), v81, *(float64x2_t *)v309, 1);
  v230 = vmlaq_laneq_f64(vmlaq_n_f64(v229, v84, *(double *)v309), v89, *(float64x2_t *)v309, 1);
  v228 = vmlaq_laneq_f64(vmlaq_n_f64(v227, v85, *(double *)v309), v90, *(float64x2_t *)v309, 1);
  v226 = vmlaq_laneq_f64(vmlaq_n_f64(v225, v88, *(double *)v309), v91, *(float64x2_t *)v309, 1);
  v99 = vmlaq_laneq_f64(vmlaq_n_f64(v76, *v33, *(double *)v311), v80, *(float64x2_t *)v311, 1);
  v100 = vmlaq_laneq_f64(vmlaq_n_f64(v241, v86, *(double *)v311), v81, *(float64x2_t *)v311, 1);
  v224 = vmlaq_laneq_f64(vmlaq_n_f64(v223, v84, *(double *)v311), v89, *(float64x2_t *)v311, 1);
  v222 = vmlaq_laneq_f64(vmlaq_n_f64(v221, v85, *(double *)v311), v90, *(float64x2_t *)v311, 1);
  v220 = vmlaq_laneq_f64(vmlaq_n_f64(v219, v88, *(double *)v311), v91, *(float64x2_t *)v311, 1);
  v180 = *v33;
  v181 = v81;
  v101 = vmlaq_laneq_f64(vmlaq_n_f64(v245, *v33, *(double *)v313), v80, *(float64x2_t *)v313, 1);
  v182 = v80;
  v177 = (float64x2_t)a2[19];
  v178 = (float64x2_t)a2[18];
  v102 = vmlaq_laneq_f64(vmlaq_n_f64(v243, v86, *(double *)v313), v81, *(float64x2_t *)v313, 1);
  v179 = v83;
  v218 = vmlaq_laneq_f64(vmlaq_n_f64(v217, v84, *(double *)v313), v89, *(float64x2_t *)v313, 1);
  v216 = vmlaq_laneq_f64(vmlaq_n_f64(v215, v85, *(double *)v313), v90, *(float64x2_t *)v313, 1);
  v210 = vmlaq_laneq_f64(vmlaq_n_f64(v209, v88, *(double *)v313), v91, *(float64x2_t *)v313, 1);
  v208 = vmlaq_laneq_f64(vmlaq_n_f64(v207, v85, *(double *)v315), v90, *(float64x2_t *)v315, 1);
  v212 = vmlaq_laneq_f64(vmlaq_n_f64(v211, v84, *(double *)v315), v89, *(float64x2_t *)v315, 1);
  v214 = vmlaq_laneq_f64(vmlaq_n_f64(v213, v88, *(double *)v315), v91, *(float64x2_t *)v315, 1);
  v103 = vmlaq_laneq_f64(vmlaq_n_f64(v77, *v33, *(double *)v315), v80, *(float64x2_t *)v315, 1);
  v104 = vmlaq_laneq_f64(vmlaq_n_f64(v78, v86, *(double *)v315), v81, *(float64x2_t *)v315, 1);
  v252 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v55, *(double *)v314.i64), v75, (float64x2_t)v314, 1), v87, *(double *)v315), v83, *(float64x2_t *)v315, 1);
  v105 = (float64x2_t)a2[23];
  v106 = (float64x2_t)a2[26];
  v239 = vmlaq_laneq_f64(vmlaq_n_f64(v97, v105, *(double *)&v309[16]), v106, *(float64x2_t *)&v309[16], 1);
  v187 = vmlaq_laneq_f64(vmlaq_n_f64(v99, v105, *(double *)&v311[16]), v106, *(float64x2_t *)&v311[16], 1);
  v236 = vmlaq_laneq_f64(vmlaq_n_f64(v94, v105, *(double *)&v307[16]), v106, *(float64x2_t *)&v307[16], 1);
  v266 = vmlaq_laneq_f64(vmlaq_n_f64(v265, v105, *(double *)&v305[16]), v106, *(float64x2_t *)&v305[16], 1);
  v286 = (float64x2_t)vzip1q_s64((int64x2_t)v266, (int64x2_t)v236);
  v287 = (float64x2_t)vzip1q_s64((int64x2_t)v239, (int64x2_t)v187);
  v246 = vmlaq_laneq_f64(vmlaq_n_f64(v101, v105, *(double *)&v313[16]), v106, *(float64x2_t *)&v313[16], 1);
  *(_QWORD *)&v91.f64[0] = vdupq_laneq_s64((int64x2_t)v239, 1).u64[0];
  v91.f64[1] = v187.f64[1];
  *(_QWORD *)&v84.f64[0] = vdupq_laneq_s64((int64x2_t)v246, 1).u64[0];
  v192 = vmlaq_laneq_f64(vmlaq_n_f64(v103, v105, *(double *)&v315[16]), v106, *(float64x2_t *)&v315[16], 1);
  v84.f64[1] = v192.f64[1];
  v290 = v91;
  v291 = v84;
  v288 = (float64x2_t)vzip1q_s64((int64x2_t)v246, (int64x2_t)v192);
  v289 = (float64x2_t)vzip2q_s64((int64x2_t)v266, (int64x2_t)v236);
  v107 = (float64x2_t)a2[24];
  v108 = (float64x2_t)a2[27];
  v240 = vmlaq_laneq_f64(vmlaq_n_f64(v98, v107, *(double *)&v309[16]), v108, *(float64x2_t *)&v309[16], 1);
  v242 = vmlaq_laneq_f64(vmlaq_n_f64(v100, v107, *(double *)&v311[16]), v108, *(float64x2_t *)&v311[16], 1);
  v237 = vmlaq_laneq_f64(vmlaq_n_f64(v95, v107, *(double *)&v307[16]), v108, *(float64x2_t *)&v307[16], 1);
  v264 = vmlaq_laneq_f64(vmlaq_n_f64(v263, v107, *(double *)&v305[16]), v108, *(float64x2_t *)&v305[16], 1);
  v292 = (float64x2_t)vzip1q_s64((int64x2_t)v264, (int64x2_t)v237);
  v293 = (float64x2_t)vzip1q_s64((int64x2_t)v240, (int64x2_t)v242);
  v244 = vmlaq_laneq_f64(vmlaq_n_f64(v102, v107, *(double *)&v313[16]), v108, *(float64x2_t *)&v313[16], 1);
  *(_QWORD *)&v91.f64[0] = vdupq_laneq_s64((int64x2_t)v240, 1).u64[0];
  v91.f64[1] = v242.f64[1];
  v176 = vmlaq_laneq_f64(vmlaq_n_f64(v104, v107, *(double *)&v315[16]), v108, *(float64x2_t *)&v315[16], 1);
  *(_QWORD *)&v84.f64[0] = vdupq_laneq_s64((int64x2_t)v244, 1).u64[0];
  v84.f64[1] = v176.f64[1];
  v296 = v91;
  v297 = v84;
  v294 = (float64x2_t)vzip1q_s64((int64x2_t)v244, (int64x2_t)v176);
  v295 = (float64x2_t)vzip2q_s64((int64x2_t)v264, (int64x2_t)v237);
  v195 = v105;
  v196 = v106;
  v188 = v107;
  v194 = v108;
  v109 = (float64x2_t)a2[25];
  v110 = (float64x2_t)a2[28];
  v111 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v247, v105.f64[0]), v58, v105, 1), v185, v107.f64[0]), v59, v107, 1), v199, v109.f64[0]), v198, v109, 1);
  v112 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v247, v106.f64[0]), v58, v106, 1), v185, v108.f64[0]), v59, v108, 1), v199, v110.f64[0]), v198, v110, 1);
  v113 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v205, v105.f64[0]), v204, v105, 1), v203, v107.f64[0]), v202, v107, 1), v201, v109.f64[0]), v200, v109, 1);
  v114 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v205, v106.f64[0]), v204, v106, 1), v203, v108.f64[0]), v202, v108, 1), v201, v110.f64[0]), v200, v110, 1);
  v115 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v172, v105.f64[0]), v52, v105, 1), v69, v107.f64[0]), v184, v107, 1), v183, v109.f64[0]), v197, v109, 1);
  v116 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v172, v106.f64[0]), v52, v106, 1), v69, v108.f64[0]), v184, v108, 1), v183, v110.f64[0]), v197, v110, 1);
  v117 = vmlaq_laneq_f64(vmlaq_n_f64(v92, v111, *(double *)&v305[16]), v112, *(float64x2_t *)&v305[16], 1);
  v118 = vmlaq_laneq_f64(vmlaq_n_f64(v93, v113, *(double *)&v305[16]), v114, *(float64x2_t *)&v305[16], 1);
  v257 = vmlaq_laneq_f64(vmlaq_n_f64(v256, v115, *(double *)&v305[16]), v116, *(float64x2_t *)&v305[16], 1);
  v119 = (int64x2_t)vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v258, v87, *(double *)v307), v83, *(float64x2_t *)v307, 1), v109, *(double *)&v307[16]), v110, *(float64x2_t *)&v307[16], 1);
  v120 = vmlaq_laneq_f64(vmlaq_n_f64(v96, v111, *(double *)&v307[16]), v112, *(float64x2_t *)&v307[16], 1);
  v121 = vmlaq_laneq_f64(vmlaq_n_f64(v234, v113, *(double *)&v307[16]), v114, *(float64x2_t *)&v307[16], 1);
  v122 = vmlaq_laneq_f64(vmlaq_n_f64(v232, v115, *(double *)&v307[16]), v116, *(float64x2_t *)&v307[16], 1);
  v123 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v254, v87, *(double *)v309), v83, *(float64x2_t *)v309, 1), v109, *(double *)&v309[16]), v110, *(float64x2_t *)&v309[16], 1);
  v124 = vmlaq_laneq_f64(vmlaq_n_f64(v230, v111, *(double *)&v309[16]), v112, *(float64x2_t *)&v309[16], 1);
  v125 = vmlaq_laneq_f64(vmlaq_n_f64(v228, v113, *(double *)&v309[16]), v114, *(float64x2_t *)&v309[16], 1);
  v126 = vmlaq_laneq_f64(vmlaq_n_f64(v226, v115, *(double *)&v309[16]), v116, *(float64x2_t *)&v309[16], 1);
  v127 = (int64x2_t)vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v248, v87, *(double *)v311), v83, *(float64x2_t *)v311, 1), v109, *(double *)&v311[16]), v110, *(float64x2_t *)&v311[16], 1);
  v128 = vmlaq_laneq_f64(vmlaq_n_f64(v224, v111, *(double *)&v311[16]), v112, *(float64x2_t *)&v311[16], 1);
  v129 = vmlaq_laneq_f64(vmlaq_n_f64(v222, v113, *(double *)&v311[16]), v114, *(float64x2_t *)&v311[16], 1);
  v130 = vmlaq_laneq_f64(vmlaq_n_f64(v220, v115, *(double *)&v311[16]), v116, *(float64x2_t *)&v311[16], 1);
  v251 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v250, v87, *(double *)v313), v83, *(float64x2_t *)v313, 1), v109, *(double *)&v313[16]), v110, *(float64x2_t *)&v313[16], 1);
  v131 = vmlaq_laneq_f64(vmlaq_n_f64(v218, v111, *(double *)&v313[16]), v112, *(float64x2_t *)&v313[16], 1);
  v132 = vmlaq_laneq_f64(vmlaq_n_f64(v216, v113, *(double *)&v313[16]), v114, *(float64x2_t *)&v313[16], 1);
  v133 = vmlaq_laneq_f64(vmlaq_n_f64(v210, v115, *(double *)&v313[16]), v116, *(float64x2_t *)&v313[16], 1);
  v134 = vmlaq_laneq_f64(vmlaq_n_f64(v212, v111, *(double *)&v315[16]), v112, *(float64x2_t *)&v315[16], 1);
  v135 = vmlaq_laneq_f64(vmlaq_n_f64(v208, v113, *(double *)&v315[16]), v114, *(float64x2_t *)&v315[16], 1);
  v136 = vmlaq_laneq_f64(vmlaq_n_f64(v214, v115, *(double *)&v315[16]), v116, *(float64x2_t *)&v315[16], 1);
  v253 = vmlaq_laneq_f64(vmlaq_n_f64(v252, v109, *(double *)&v315[16]), v110, *(float64x2_t *)&v315[16], 1);
  v262 = vmlaq_laneq_f64(vmlaq_n_f64(v261, v109, *(double *)&v305[16]), v110, *(float64x2_t *)&v305[16], 1);
  v259 = (float64x2_t)v119;
  v249 = (float64x2_t)v127;
  v298 = (float64x2_t)vzip1q_s64((int64x2_t)v262, v119);
  v299 = (float64x2_t)vzip1q_s64((int64x2_t)v123, v127);
  *(_QWORD *)&v112.f64[0] = vdupq_laneq_s64((int64x2_t)v123, 1).u64[0];
  *(_QWORD *)&v112.f64[1] = v127.i64[1];
  *(_QWORD *)&v113.f64[0] = vdupq_laneq_s64((int64x2_t)v251, 1).u64[0];
  v113.f64[1] = v253.f64[1];
  v302 = v112;
  v303 = v113;
  v300 = (float64x2_t)vzip1q_s64((int64x2_t)v251, (int64x2_t)v253);
  v301 = (float64x2_t)vzip2q_s64((int64x2_t)v262, v119);
  v137 = vaddq_f64(*(float64x2_t *)(a1 + 176), v117);
  v138 = vaddq_f64(*(float64x2_t *)(a1 + 192), v118);
  v139 = vaddq_f64(*(float64x2_t *)(a1 + 224), v120);
  v140 = vaddq_f64(*(float64x2_t *)(a1 + 240), v121);
  v141 = vaddq_f64(*(float64x2_t *)(a1 + 256), v122);
  v142 = vaddq_f64(*(float64x2_t *)(a1 + 272), v124);
  v143 = vaddq_f64(*(float64x2_t *)(a1 + 288), v125);
  v144 = vaddq_f64(*(float64x2_t *)(a1 + 304), v126);
  v145 = vaddq_f64(*(float64x2_t *)(a1 + 320), v128);
  v146 = vaddq_f64(*(float64x2_t *)(a1 + 336), v129);
  v147 = vaddq_f64(*(float64x2_t *)(a1 + 352), v130);
  v148 = vaddq_f64(*(float64x2_t *)(a1 + 368), v131);
  v149 = vaddq_f64(*(float64x2_t *)(a1 + 384), v132);
  v150 = vaddq_f64(*(float64x2_t *)(a1 + 400), v133);
  v151 = vaddq_f64(*(float64x2_t *)(a1 + 416), v134);
  v152 = vaddq_f64(*(float64x2_t *)(a1 + 432), v135);
  v270 = vaddq_f64(*(float64x2_t *)(a1 + 208), v257);
  v269 = v138;
  v268 = v137;
  v273 = v141;
  v272 = v140;
  v271 = v139;
  v276 = v144;
  v275 = v143;
  v274 = v142;
  v279 = v147;
  v278 = v146;
  v277 = v145;
  v282 = v150;
  v153 = vaddq_f64(*(float64x2_t *)(a1 + 448), v136);
  v281 = v149;
  v280 = v148;
  v284 = v152;
  v285 = v153;
  v283 = v151;
  v267 = 2;
  sub_20F215978((uint64_t)&v267);
  sub_20E8BE8E4();
  v154 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v262, v286.f64[0]), v259, v286, 1), v123, v287.f64[0]), v249, v287, 1), v251, v288.f64[0]), v253, v288, 1);
  v155 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v266, v289.f64[0]), v236, v289, 1), v239, v290.f64[0]), v187, v290, 1), v246, v291.f64[0]), v192, v291, 1);
  v156 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v264, v289.f64[0]), v237, v289, 1), v240, v290.f64[0]), v242, v290, 1), v244, v291.f64[0]), v176, v291, 1);
  v157 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v262, v289.f64[0]), v259, v289, 1), v123, v290.f64[0]), v249, v290, 1), v251, v291.f64[0]), v253, v291, 1);
  v158 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v266, v292.f64[0]), v236, v292, 1), v239, v293.f64[0]), v187, v293, 1), v246, v294.f64[0]), v192, v294, 1);
  v159 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v264, v292.f64[0]), v237, v292, 1), v240, v293.f64[0]), v242, v293, 1), v244, v294.f64[0]), v176, v294, 1);
  v160 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v262, v292.f64[0]), v259, v292, 1), v123, v293.f64[0]), v249, v293, 1), v251, v294.f64[0]), v253, v294, 1);
  v161 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v266, v295.f64[0]), v236, v295, 1), v239, v296.f64[0]), v187, v296, 1), v246, v297.f64[0]), v192, v297, 1);
  v162 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v264, v295.f64[0]), v237, v295, 1), v240, v296.f64[0]), v242, v296, 1), v244, v297.f64[0]), v176, v297, 1);
  v163 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v262, v295.f64[0]), v259, v295, 1), v123, v296.f64[0]), v249, v296, 1), v251, v297.f64[0]), v253, v297, 1);
  v164 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v266, v298.f64[0]), v236, v298, 1), v239, v299.f64[0]), v187, v299, 1), v246, v300.f64[0]), v192, v300, 1);
  v165 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v264, v298.f64[0]), v237, v298, 1), v240, v299.f64[0]), v242, v299, 1), v244, v300.f64[0]), v176, v300, 1);
  v166 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v262, v298.f64[0]), v259, v298, 1), v123, v299.f64[0]), v249, v299, 1), v251, v300.f64[0]), v253, v300, 1);
  v167 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v266, v301.f64[0]), v236, v301, 1), v239, v302.f64[0]), v187, v302, 1), v246, v303.f64[0]), v192, v303, 1);
  v168 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v264, v301.f64[0]), v237, v301, 1), v240, v302.f64[0]), v242, v302, 1), v244, v303.f64[0]), v176, v303, 1);
  v169 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v262, v301.f64[0]), v259, v301, 1), v123, v302.f64[0]), v249, v302, 1), v251, v303.f64[0]), v253, v303, 1);
  v170 = vsubq_f64(v186, vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v264, v286.f64[0]), v237, v286, 1), v240, v287.f64[0]), v242, v287, 1), v244, v288.f64[0]), v176, v288, 1));
  *(float64x2_t *)(a3 + 176) = vsubq_f64(v193, vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v266, v286.f64[0]), v236, v286, 1), v239, v287.f64[0]), v187, v287, 1), v246, v288.f64[0]), v192, v288, 1));
  *(float64x2_t *)(a3 + 192) = v170;
  *(float64x2_t *)(a3 + 240) = vsubq_f64(v206, v156);
  *(float64x2_t *)(a3 + 256) = vsubq_f64(v189, v157);
  *(float64x2_t *)(a3 + 208) = vsubq_f64(v190, v154);
  *(float64x2_t *)(a3 + 224) = vsubq_f64(v191, v155);
  *(float64x2_t *)(a3 + 272) = vsubq_f64(v180, v158);
  *(float64x2_t *)(a3 + 288) = vsubq_f64(v178, v159);
  *(float64x2_t *)(a3 + 336) = vsubq_f64(v181, v162);
  *(float64x2_t *)(a3 + 352) = vsubq_f64(v179, v163);
  *(float64x2_t *)(a3 + 304) = vsubq_f64(v177, v160);
  *(float64x2_t *)(a3 + 320) = vsubq_f64(v182, v161);
  *(float64x2_t *)(a3 + 368) = vsubq_f64(v195, v164);
  *(float64x2_t *)(a3 + 384) = vsubq_f64(v188, v165);
  *(float64x2_t *)(a3 + 432) = vsubq_f64(v194, v168);
  *(float64x2_t *)(a3 + 448) = vsubq_f64(v110, v169);
  result = vsubq_f64(v196, v167);
  *(float64x2_t *)(a3 + 400) = vsubq_f64(v109, v166);
  *(float64x2_t *)(a3 + 416) = result;
  return result;
}

void sub_20F7CB71C(_QWORD *a1@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X2>, void **a4@<X8>)
{
  _BYTE *v6;
  _BYTE *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  int v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  char *v20;
  int v21;
  int v22;
  BOOL v23;
  void **v24;
  __int128 v25;
  __int128 v26;
  _BYTE *v27;
  _BYTE *v28;
  _BYTE __dst[288];
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  uint64_t v38;

  v38 = *MEMORY[0x24BDAC8D0];
  sub_20F7C5800(a1, a2, a3, &v27);
  *a4 = 0;
  a4[1] = 0;
  v24 = a4;
  a4[2] = 0;
  v6 = v27;
  v7 = v28;
  if (v28 != v27)
  {
    sub_20F7CBBD4(v24, 0xCBEEA4E1A08AD8F3 * ((v28 - v27) >> 3));
    v8 = 0;
    v9 = (char *)*v24;
    do
    {
      v20 = &v6[v8];
      v25 = *(_OWORD *)&v6[v8 + 16];
      v26 = *(_OWORD *)a2;
      v21 = *(_DWORD *)&v6[v8 + 4];
      v22 = *(_DWORD *)&v6[v8 + 8];
      if (v6[v8 + 160])
        v23 = v6[v8 + 456] == 0;
      else
        v23 = 1;
      if (v23
        && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/MapOptimization/src/PoseGraphEdgeUtil.cpp", 61, (uint64_t)"(edge.T_source_to_neighbor && edge.JtJ_source_to_neighbor)", 58, (uint64_t)"Edge must have transformation", 29, (void (*)(void **))sub_21023DDB0))
      {
        abort();
      }
      v10 = &v9[v8];
      v11 = *((_OWORD *)v20 + 7);
      v34 = *((_OWORD *)v20 + 6);
      v35 = v11;
      v12 = *((_OWORD *)v20 + 9);
      v36 = *((_OWORD *)v20 + 8);
      v37 = v12;
      v13 = *((_OWORD *)v20 + 3);
      v30 = *((_OWORD *)v20 + 2);
      v31 = v13;
      v14 = *((_OWORD *)v20 + 5);
      v32 = *((_OWORD *)v20 + 4);
      v33 = v14;
      memcpy(__dst, v20 + 168, sizeof(__dst));
      v15 = *((_DWORD *)v20 + 116);
      *(_OWORD *)v10 = v25;
      *((_DWORD *)v10 + 4) = v22;
      *(_OWORD *)(v10 + 24) = v26;
      *((_DWORD *)v10 + 10) = v21;
      v16 = v33;
      *((_OWORD *)v10 + 5) = v32;
      *((_OWORD *)v10 + 6) = v16;
      v17 = v31;
      *((_OWORD *)v10 + 3) = v30;
      *((_OWORD *)v10 + 4) = v17;
      v18 = v37;
      *((_OWORD *)v10 + 9) = v36;
      *((_OWORD *)v10 + 10) = v18;
      v19 = v35;
      *((_OWORD *)v10 + 7) = v34;
      *((_OWORD *)v10 + 8) = v19;
      memcpy(&v9[v8 + 176], __dst, 0x120uLL);
      *((_DWORD *)v10 + 116) = v15;
      v10[468] = 0;
      v8 += 472;
    }
    while (&v6[v8] != v7);
  }
  if (v6)
    operator delete(v6);
}

void sub_20F7CB924(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  void *v10;
  void *v12;

  v12 = *(void **)a10;
  if (*(_QWORD *)a10)
  {
    *(_QWORD *)(a10 + 8) = v12;
    operator delete(v12);
  }
  if (!v10)
    _Unwind_Resume(exception_object);
  operator delete(v10);
  _Unwind_Resume(exception_object);
}

void sub_20F7CB968(_QWORD *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, uint64_t a4@<X8>)
{
  int8x8_t v5;
  unint64_t v6;
  uint8x8_t v7;
  unint64_t v8;
  uint64_t **v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  unint64_t v16;
  void *v17;
  char *v18;
  int v19;
  double v20;
  char *v21;
  double v22;
  _QWORD *v23;
  char *v24;
  char *v25;

  v5 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v5)
    goto LABEL_27;
  v6 = *(unsigned int *)(a2 + 8);
  v7 = (uint8x8_t)vcnt_s8(v5);
  v7.i16[0] = vaddlv_u8(v7);
  if (v7.u32[0] > 1uLL)
  {
    v8 = *(unsigned int *)(a2 + 8);
    if (*(_QWORD *)&v5 <= v6)
      v8 = v6 % *(_QWORD *)&v5;
  }
  else
  {
    v8 = (v5.i32[0] - 1) & v6;
  }
  v9 = *(uint64_t ***)(*a1 + 8 * v8);
  if (!v9 || (v10 = *v9) == 0)
  {
LABEL_27:
    *(_BYTE *)a4 = 0;
    *(_BYTE *)(a4 + 16) = 0;
    return;
  }
  v11 = *(_QWORD *)a2;
  if (v7.u32[0] < 2uLL)
  {
    v12 = *(_QWORD *)&v5 - 1;
    while (1)
    {
      v14 = v10[1];
      if (v14 == v6)
      {
        if (v10[2] == v11 && *((_DWORD *)v10 + 6) == (_DWORD)v6)
          goto LABEL_29;
      }
      else if ((v14 & v12) != v8)
      {
        goto LABEL_27;
      }
      v10 = (uint64_t *)*v10;
      if (!v10)
        goto LABEL_27;
    }
  }
  while (1)
  {
    v16 = v10[1];
    if (v16 == v6)
      break;
    if (v16 >= *(_QWORD *)&v5)
      v16 %= *(_QWORD *)&v5;
    if (v16 != v8)
      goto LABEL_27;
LABEL_22:
    v10 = (uint64_t *)*v10;
    if (!v10)
      goto LABEL_27;
  }
  if (v10[2] != v11 || *((_DWORD *)v10 + 6) != (_DWORD)v6)
    goto LABEL_22;
LABEL_29:
  sub_20F7C5800(a1, (uint64_t *)a2, a3, &v24);
  *(_BYTE *)a4 = 0;
  *(_BYTE *)(a4 + 16) = 0;
  v17 = v24;
  v18 = v25;
  if (v24 != v25)
  {
    v19 = 0;
    v20 = 0.0;
    v21 = v24;
    do
    {
      if (v21[456]
        && (v22 = *((double *)v21 + 21)
                + *((double *)v21 + 28)
                + *((double *)v21 + 35)
                + *((double *)v21 + 42)
                + *((double *)v21 + 49)
                + *((double *)v21 + 56),
            v22 > v20))
      {
        v23 = v21 + 16;
        if (v19)
        {
          *(_QWORD *)a4 = *v23;
          *(_DWORD *)(a4 + 8) = *((_DWORD *)v21 + 6);
          v19 = 1;
        }
        else
        {
          *(_OWORD *)a4 = *(_OWORD *)v23;
          v19 = 1;
          *(_BYTE *)(a4 + 16) = 1;
        }
      }
      else
      {
        v22 = v20;
      }
      v21 += 472;
      v20 = v22;
    }
    while (v21 != v18);
  }
  if (v17)
    operator delete(v17);
}

void sub_20F7CBBB8(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

void sub_20F7CBBD4(void **a1, unint64_t a2)
{
  _QWORD *v4;
  _BYTE *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  _QWORD *v11;
  uint64_t v12;
  __int128 v13;
  char *v14;
  uint64_t v15;
  char *v16;
  __int128 v17;
  _OWORD *v18;
  char *v19;
  char *v20;
  char *v21;
  _OWORD *v22;
  __int128 v23;
  __int128 v24;
  _OWORD *v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  char v32;

  v4 = a1[1];
  v5 = a1[2];
  if (0xCBEEA4E1A08AD8F3 * ((v5 - (_BYTE *)v4) >> 3) >= a2)
  {
    if (a2)
    {
      v11 = &v4[59 * a2];
      v12 = 472 * a2;
      *(_QWORD *)&v13 = -1;
      *((_QWORD *)&v13 + 1) = -1;
      do
      {
        v4[58] = 0;
        *(_OWORD *)v4 = v13;
        *((_OWORD *)v4 + 1) = v13;
        *((_OWORD *)v4 + 8) = unk_2103B7550;
        *((_OWORD *)v4 + 9) = xmmword_2103B7560;
        *((_OWORD *)v4 + 2) = v13;
        *((_OWORD *)v4 + 3) = xmmword_2103B7500;
        *((_OWORD *)v4 + 4) = *(_OWORD *)algn_2103B7510;
        *((_OWORD *)v4 + 5) = xmmword_2103B7520;
        *((_OWORD *)v4 + 6) = unk_2103B7530;
        *((_OWORD *)v4 + 7) = xmmword_2103B7540;
        *(_QWORD *)((char *)v4 + 461) = 0;
        *((_OWORD *)v4 + 27) = 0uLL;
        *((_OWORD *)v4 + 28) = 0uLL;
        *((_OWORD *)v4 + 25) = 0uLL;
        *((_OWORD *)v4 + 26) = 0uLL;
        *((_OWORD *)v4 + 23) = 0uLL;
        *((_OWORD *)v4 + 24) = 0uLL;
        *((_OWORD *)v4 + 21) = 0uLL;
        *((_OWORD *)v4 + 22) = 0uLL;
        *((_OWORD *)v4 + 19) = 0uLL;
        *((_OWORD *)v4 + 20) = 0uLL;
        *((_OWORD *)v4 + 17) = 0uLL;
        *((_OWORD *)v4 + 18) = 0uLL;
        *((_OWORD *)v4 + 15) = 0uLL;
        *((_OWORD *)v4 + 16) = 0uLL;
        *((_OWORD *)v4 + 13) = 0uLL;
        *((_OWORD *)v4 + 14) = 0uLL;
        *((_OWORD *)v4 + 11) = 0uLL;
        *((_OWORD *)v4 + 12) = 0uLL;
        *((_OWORD *)v4 + 10) = unk_2103B7570;
        v4 += 59;
        v12 -= 472;
      }
      while (v12);
      v4 = v11;
    }
    a1[1] = v4;
  }
  else
  {
    v6 = 0xCBEEA4E1A08AD8F3 * (((char *)v4 - (_BYTE *)*a1) >> 3);
    v7 = v6 + a2;
    if (v6 + a2 > 0x8AD8F2FBA93868)
      sub_20E867F44();
    v8 = 0xCBEEA4E1A08AD8F3 * ((v5 - (_BYTE *)*a1) >> 3);
    if (2 * v8 > v7)
      v7 = 2 * v8;
    if (v8 >= 0x456C797DD49C34)
      v9 = 0x8AD8F2FBA93868;
    else
      v9 = v7;
    if (v9)
    {
      if (v9 > 0x8AD8F2FBA93868)
        sub_20E877A38();
      v10 = (char *)operator new(472 * v9);
    }
    else
    {
      v10 = 0;
    }
    v14 = &v10[472 * v6];
    v15 = 472 * a2;
    v16 = &v14[472 * a2];
    *(_QWORD *)&v17 = -1;
    *((_QWORD *)&v17 + 1) = -1;
    v18 = v14;
    do
    {
      *((_QWORD *)v18 + 58) = 0;
      *v18 = v17;
      v18[1] = v17;
      v18[8] = unk_2103B7550;
      v18[9] = xmmword_2103B7560;
      v18[2] = v17;
      v18[3] = xmmword_2103B7500;
      v18[4] = *(_OWORD *)algn_2103B7510;
      v18[5] = xmmword_2103B7520;
      v18[6] = unk_2103B7530;
      v18[7] = xmmword_2103B7540;
      *(_QWORD *)((char *)v18 + 461) = 0;
      v18[27] = 0uLL;
      v18[28] = 0uLL;
      v18[25] = 0uLL;
      v18[26] = 0uLL;
      v18[23] = 0uLL;
      v18[24] = 0uLL;
      v18[21] = 0uLL;
      v18[22] = 0uLL;
      v18[19] = 0uLL;
      v18[20] = 0uLL;
      v18[17] = 0uLL;
      v18[18] = 0uLL;
      v18[15] = 0uLL;
      v18[16] = 0uLL;
      v18[13] = 0uLL;
      v18[14] = 0uLL;
      v18[11] = 0uLL;
      v18[12] = 0uLL;
      v18[10] = unk_2103B7570;
      v18 = (_OWORD *)((char *)v18 + 472);
      v15 -= 472;
    }
    while (v15);
    v19 = &v10[472 * v9];
    v21 = (char *)*a1;
    v20 = (char *)a1[1];
    if (v20 != *a1)
    {
      do
      {
        v22 = v14;
        v14 -= 472;
        v23 = *(_OWORD *)(v20 - 472);
        v24 = *(_OWORD *)(v20 - 456);
        *(_OWORD *)(v14 + 28) = *(_OWORD *)(v20 - 444);
        *(_OWORD *)v14 = v23;
        *((_OWORD *)v14 + 1) = v24;
        v25 = (_OWORD *)((char *)v22 - 424);
        v26 = *(_OWORD *)(v20 - 312);
        v28 = *(_OWORD *)(v20 - 360);
        v27 = *(_OWORD *)(v20 - 344);
        v25[6] = *(_OWORD *)(v20 - 328);
        v25[7] = v26;
        v25[4] = v28;
        v25[5] = v27;
        v29 = *(_OWORD *)(v20 - 424);
        v30 = *(_OWORD *)(v20 - 408);
        v31 = *(_OWORD *)(v20 - 376);
        v25[2] = *(_OWORD *)(v20 - 392);
        v25[3] = v31;
        *v25 = v29;
        v25[1] = v30;
        memcpy((char *)v22 - 296, v20 - 296, 0x120uLL);
        v32 = *(v20 - 4);
        *((_DWORD *)v22 - 2) = *((_DWORD *)v20 - 2);
        *((_BYTE *)v22 - 4) = v32;
        v20 -= 472;
      }
      while (v20 != v21);
      v20 = (char *)*a1;
    }
    *a1 = v14;
    a1[1] = v16;
    a1[2] = v19;
    if (v20)
      operator delete(v20);
  }
}

void sub_20F7CBE8C(_QWORD *a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  char *v5;
  _QWORD *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  int64_t v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  void *v25;
  uint64_t v26;
  unint64_t v27;
  char *v28;
  void *v29;
  void *v30;
  char *v31;
  char *v32;
  unint64_t v33;
  char *v34;
  char *v35;
  char *v36;
  char *v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  char *v41;
  char *v42;
  BOOL v43;
  int64_t v44;
  unint64_t v45;
  char *v46;
  char *v47;
  unint64_t v48;
  char *v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  char *v55;
  unint64_t v56;
  int64_t v57;
  unint64_t v58;
  char *v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  __int128 *v64;
  char *v65;
  uint64_t v66;
  __int128 v67;
  uint64_t v68;
  unint64_t v69;
  unint64_t v70;
  uint64_t v71;
  char *v72;
  char *v73;
  char *v74;
  char *v75;
  char *v76;
  unint64_t v77;
  uint64_t v78;
  __int128 *v79;
  _OWORD *v80;
  uint64_t v81;
  __int128 v82;
  uint64_t v83;
  char *v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  int64_t v91;
  char *v92;
  uint64_t v93;
  uint64_t v94;
  __int128 *v95;
  _OWORD *v96;
  uint64_t v97;
  __int128 v98;
  uint64_t v99;
  char *v100;
  unint64_t v101;
  unint64_t v102;
  uint64_t v103;
  char *v104;
  char *v105;
  int64_t v106;
  unint64_t v107;
  char *v108;
  char *v109;
  uint64_t v110;
  uint64_t v111;
  char *v112;
  __int128 *v113;
  _OWORD *v114;
  uint64_t v115;
  __int128 v116;
  uint64_t v117;

  v2 = a1[4];
  v3 = v2 >= 0x10;
  v4 = v2 - 16;
  if (v3)
  {
    a1[4] = v4;
    v6 = (_QWORD *)a1[1];
    v5 = (char *)a1[2];
    v7 = (char *)(v6 + 1);
    v8 = *v6;
    a1[1] = v6 + 1;
    if (v5 != (char *)a1[3])
    {
LABEL_92:
      *(_QWORD *)v5 = v8;
      goto LABEL_93;
    }
    v9 = (char *)*a1;
    if ((unint64_t)v7 > *a1)
    {
      v10 = (uint64_t)&v7[-*a1] >> 3;
      if (v10 >= -1)
        v11 = v10 + 1;
      else
        v11 = v10 + 2;
      v12 = v11 >> 1;
      v13 = -v12;
      v14 = &v7[-8 * v12];
      v15 = v5 - v7;
      if (v5 != v7)
      {
        memmove(&v7[-8 * v12], v7, v5 - v7);
        v7 = (char *)a1[1];
      }
      v5 = &v14[v15];
      v16 = &v7[8 * v13];
      goto LABEL_11;
    }
    v38 = (v5 - v9) >> 2;
    if (v5 == v9)
      v38 = 1;
    if (v38 >> 61)
      goto LABEL_109;
    v39 = v38 >> 2;
    v40 = 8 * v38;
    v41 = (char *)operator new(8 * v38);
    v42 = &v41[8 * v39];
    v44 = v5 - v7;
    v43 = v5 == v7;
    v5 = v42;
    if (!v43)
    {
      v5 = &v42[v44 & 0xFFFFFFFFFFFFFFF8];
      v45 = v44 - 8;
      if ((unint64_t)(v44 - 8) >= 0x38)
      {
        v92 = &v41[8 * v39];
        v46 = v92;
        if ((unint64_t)(v92 - v7) >= 0x20)
        {
          v93 = (v45 >> 3) + 1;
          v94 = 8 * (v93 & 0x3FFFFFFFFFFFFFFCLL);
          v46 = &v42[v94];
          v7 += v94;
          v95 = (__int128 *)(v6 + 3);
          v96 = v92 + 16;
          v97 = v93 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v98 = *v95;
            *(v96 - 1) = *(v95 - 1);
            *v96 = v98;
            v95 += 2;
            v96 += 2;
            v97 -= 4;
          }
          while (v97);
          if (v93 == (v93 & 0x3FFFFFFFFFFFFFFCLL))
            goto LABEL_89;
        }
      }
      else
      {
        v46 = &v41[8 * v39];
      }
      do
      {
        v99 = *(_QWORD *)v7;
        v7 += 8;
        *(_QWORD *)v46 = v99;
        v46 += 8;
      }
      while (v46 != v5);
    }
LABEL_89:
    *a1 = v41;
    a1[1] = v42;
    a1[2] = v5;
    a1[3] = &v41[v40];
    if (!v9)
      goto LABEL_92;
    v100 = v9;
LABEL_91:
    operator delete(v100);
    v5 = (char *)a1[2];
    goto LABEL_92;
  }
  v18 = (char *)*a1;
  v17 = (char *)a1[1];
  v20 = (char *)a1[2];
  v19 = (char *)a1[3];
  v21 = v20 - v17;
  v22 = (v20 - v17) >> 3;
  v23 = (uint64_t)&v19[-*a1];
  if (v22 < (unint64_t)(v23 >> 3))
  {
    v24 = operator new(0x1F00uLL);
    v25 = v24;
    if (v19 != v20)
    {
      *(_QWORD *)v20 = v24;
LABEL_93:
      a1[2] += 8;
      return;
    }
    if (v17 == v18)
    {
      v69 = (v19 - v17) >> 2;
      if (v20 == v17)
        v69 = 1;
      if (v69 >> 61)
        goto LABEL_109;
      v70 = (v69 + 3) >> 2;
      v71 = 8 * v69;
      v72 = (char *)operator new(8 * v69);
      v47 = &v72[8 * v70];
      v73 = v47;
      if (v20 != v17)
      {
        v73 = &v47[8 * v22];
        v74 = &v72[8 * v70];
        v75 = v17;
        if ((unint64_t)(v21 - 8) < 0x38)
          goto LABEL_113;
        v76 = &v72[8 * v70];
        v74 = v76;
        v75 = v17;
        if ((unint64_t)(v76 - v17) < 0x20)
          goto LABEL_113;
        v77 = ((unint64_t)(v21 - 8) >> 3) + 1;
        v78 = 8 * (v77 & 0x3FFFFFFFFFFFFFFCLL);
        v74 = &v47[v78];
        v75 = &v17[v78];
        v79 = (__int128 *)(v17 + 16);
        v80 = v76 + 16;
        v81 = v77 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v82 = *v79;
          *(v80 - 1) = *(v79 - 1);
          *v80 = v82;
          v79 += 2;
          v80 += 2;
          v81 -= 4;
        }
        while (v81);
        if (v77 != (v77 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_113:
          do
          {
            v83 = *(_QWORD *)v75;
            v75 += 8;
            *(_QWORD *)v74 = v83;
            v74 += 8;
          }
          while (v74 != v73);
        }
      }
      *a1 = v72;
      a1[1] = v47;
      a1[2] = v73;
      a1[3] = &v72[v71];
      if (v17)
      {
        operator delete(v17);
        v47 = (char *)a1[1];
      }
    }
    else
    {
      v47 = v17;
    }
    *((_QWORD *)v47 - 1) = v25;
    v84 = (char *)a1[1];
    v5 = (char *)a1[2];
    a1[1] = v84 - 8;
    v8 = *((_QWORD *)v84 - 1);
    a1[1] = v84;
    if (v5 != (char *)a1[3])
      goto LABEL_92;
    v85 = (char *)*a1;
    if ((unint64_t)v84 > *a1)
    {
      v86 = (uint64_t)&v84[-*a1] >> 3;
      if (v86 >= -1)
        v87 = v86 + 1;
      else
        v87 = v86 + 2;
      v88 = v87 >> 1;
      v89 = -v88;
      v90 = &v84[-8 * v88];
      v91 = v5 - v84;
      if (v5 != v84)
      {
        memmove(&v84[-8 * v88], v84, v5 - v84);
        v84 = (char *)a1[1];
      }
      v5 = &v90[v91];
      v16 = &v84[8 * v89];
LABEL_11:
      a1[1] = v16;
      a1[2] = v5;
      goto LABEL_92;
    }
    v101 = (v5 - v85) >> 2;
    if (v5 == v85)
      v101 = 1;
    if (!(v101 >> 61))
    {
      v102 = v101 >> 2;
      v103 = 8 * v101;
      v104 = (char *)operator new(8 * v101);
      v105 = &v104[8 * v102];
      v106 = v5 - v84;
      v43 = v5 == v84;
      v5 = v105;
      if (!v43)
      {
        v5 = &v105[v106 & 0xFFFFFFFFFFFFFFF8];
        v107 = v106 - 8;
        if ((unint64_t)(v106 - 8) >= 0x38)
        {
          v109 = &v104[8 * v102];
          v108 = v109;
          if ((unint64_t)(v109 - v84) >= 0x20)
          {
            v110 = (v107 >> 3) + 1;
            v111 = 8 * (v110 & 0x3FFFFFFFFFFFFFFCLL);
            v108 = &v105[v111];
            v112 = &v84[v111];
            v113 = (__int128 *)(v84 + 16);
            v114 = v109 + 16;
            v115 = v110 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v116 = *v113;
              *(v114 - 1) = *(v113 - 1);
              *v114 = v116;
              v113 += 2;
              v114 += 2;
              v115 -= 4;
            }
            while (v115);
            v84 = v112;
            if (v110 == (v110 & 0x3FFFFFFFFFFFFFFCLL))
              goto LABEL_106;
          }
        }
        else
        {
          v108 = &v104[8 * v102];
        }
        do
        {
          v117 = *(_QWORD *)v84;
          v84 += 8;
          *(_QWORD *)v108 = v117;
          v108 += 8;
        }
        while (v108 != v5);
      }
LABEL_106:
      *a1 = v104;
      a1[1] = v105;
      a1[2] = v5;
      a1[3] = &v104[v103];
      if (!v85)
        goto LABEL_92;
      v100 = v85;
      goto LABEL_91;
    }
LABEL_109:
    sub_20E877A38();
  }
  v26 = v23 >> 2;
  if (v19 == v18)
    v27 = 1;
  else
    v27 = v26;
  if (v27 >> 61)
    goto LABEL_109;
  v28 = (char *)operator new(8 * v27);
  v29 = operator new(0x1F00uLL);
  v30 = v29;
  v31 = &v28[8 * v22];
  v32 = &v28[8 * v27];
  if (v22 == v27)
  {
    if (v21 < 1)
    {
      if (v20 == v17)
        v48 = 1;
      else
        v48 = v21 >> 2;
      if (v48 >> 61)
        sub_20E877A38();
      v31 = (char *)operator new(8 * v48);
      v32 = &v31[8 * v48];
      operator delete(v28);
      v49 = (char *)a1[1];
      v20 = (char *)a1[2];
      v28 = v31;
      *(_QWORD *)v31 = v30;
      v34 = v31 + 8;
      if (v20 == v49)
        goto LABEL_25;
      do
      {
LABEL_44:
        if (v31 == v28)
        {
          if (v34 >= v32)
          {
            if (v32 == v31)
              v54 = 1;
            else
              v54 = (v32 - v31) >> 2;
            if (v54 >> 61)
              sub_20E877A38();
            v55 = (char *)operator new(8 * v54);
            v28 = v55;
            v56 = (v54 + 3) >> 2;
            v50 = &v55[8 * v56];
            v36 = v50;
            v57 = v34 - v31;
            if (v34 != v31)
            {
              v36 = &v50[v57 & 0xFFFFFFFFFFFFFFF8];
              v58 = v57 - 8;
              v59 = &v55[8 * v56];
              v60 = v31;
              if (v58 < 0x38)
                goto LABEL_114;
              v61 = 8 * v56;
              v59 = &v55[8 * v56];
              v60 = v31;
              if ((unint64_t)(v59 - v31) < 0x20)
                goto LABEL_114;
              v62 = (v58 >> 3) + 1;
              v63 = 8 * (v62 & 0x3FFFFFFFFFFFFFFCLL);
              v59 = &v50[v63];
              v60 = &v31[v63];
              v64 = (__int128 *)(v31 + 16);
              v65 = &v55[v61 + 16];
              v66 = v62 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v67 = *v64;
                *((_OWORD *)v65 - 1) = *(v64 - 1);
                *(_OWORD *)v65 = v67;
                v64 += 2;
                v65 += 32;
                v66 -= 4;
              }
              while (v66);
              if (v62 != (v62 & 0x3FFFFFFFFFFFFFFCLL))
              {
LABEL_114:
                do
                {
                  v68 = *(_QWORD *)v60;
                  v60 += 8;
                  *(_QWORD *)v59 = v68;
                  v59 += 8;
                }
                while (v59 != v36);
              }
            }
            v32 = &v55[8 * v54];
            operator delete(v31);
          }
          else
          {
            v52 = (v32 - v34) >> 3;
            if (v52 >= -1)
              v53 = v52 + 1;
            else
              v53 = v52 + 2;
            v36 = &v34[8 * (v53 >> 1)];
            v50 = &v31[8 * (v53 >> 1)];
            if (v34 == v31)
            {
              v28 = v34;
            }
            else
            {
              memmove(&v31[8 * (v53 >> 1)], v31, v34 - v31);
              v28 = v31;
            }
          }
        }
        else
        {
          v50 = v31;
          v36 = v34;
        }
        v51 = *((_QWORD *)v20 - 1);
        v20 -= 8;
        *((_QWORD *)v50 - 1) = v51;
        v35 = v50 - 8;
        v34 = v36;
        v31 = v35;
      }
      while (v20 != (char *)a1[1]);
      goto LABEL_26;
    }
    v33 = v22 + 2;
    if (v22 >= -1)
      v33 = v22 + 1;
    v31 -= 8 * (v33 >> 1);
  }
  *(_QWORD *)v31 = v29;
  v34 = v31 + 8;
  if (v20 != v17)
    goto LABEL_44;
LABEL_25:
  v35 = v31;
  v36 = v34;
LABEL_26:
  v37 = (char *)*a1;
  *a1 = v28;
  a1[1] = v35;
  a1[2] = v36;
  a1[3] = v32;
  if (v37)
    operator delete(v37);
}

void sub_20F7CC4F4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  operator delete(v2);
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_20F7CC510(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_20F7CC524(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_20F7CC53C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20F7CC554(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 *v7;
  int v8;
  uint64_t v9;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  *(_QWORD *)a1 = off_24CA001F8;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_QWORD *)(a1 + 144) = 0;
  *(_OWORD *)(a1 + 152) = *(_OWORD *)a2;
  v4 = *(_OWORD *)(a2 + 16);
  v5 = *(_OWORD *)(a2 + 32);
  v6 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 216) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 200) = v6;
  *(_OWORD *)(a1 + 184) = v5;
  *(_OWORD *)(a1 + 168) = v4;
  *(_BYTE *)(a1 + 232) = 1;
  *(_QWORD *)a1 = &off_24CA02B70;
  *(_DWORD *)(a1 + 240) = 1;
  v7 = (__int128 *)(a1 + 240);
  *(_BYTE *)(a1 + 280) = 0;
  *(_QWORD *)(a1 + 288) = 0x3FF7B8BAC710CB29;
  *(_QWORD *)(a1 + 808) = a1 + 296;
  *(_OWORD *)(a1 + 816) = xmmword_210378040;
  *(_WORD *)(a1 + 832) = 0;
  *(_QWORD *)(a1 + 864) = 0;
  *(_QWORD *)(a1 + 896) = 0;
  *(_QWORD *)(a1 + 928) = 0;
  *(_QWORD *)(a1 + 1000) = 0;
  *(_QWORD *)(a1 + 992) = 0;
  *(_QWORD *)(a1 + 968) = 0;
  *(_QWORD *)(a1 + 960) = 0;
  *(_QWORD *)(a1 + 976) = 0;
  *(_QWORD *)(a1 + 984) = a1 + 992;
  *(_QWORD *)(a1 + 1008) = a3;
  *(_QWORD *)(a1 + 1016) = 0;
  *(_OWORD *)(a1 + 256) = *(_OWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 272) = *(_QWORD *)(a2 + 48);
  v8 = *(_DWORD *)(a2 + 4);
  *(_DWORD *)(a1 + 244) = *(_DWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 248) = v8 != 0;
  v9 = operator new();
  *(_QWORD *)v9 = off_24C9FCF80;
  sub_20F2C2630(v9 + 8, v7);
  *(_QWORD *)(v9 + 736) = 0xBFF0000000000000;
  *(_DWORD *)(v9 + 760) = 0;
  *(_OWORD *)(v9 + 744) = 0u;
  *(_QWORD *)v9 = &off_24C9FCEF0;
  *(_OWORD *)(v9 + 768) = xmmword_2103AB100;
  *(_BYTE *)(v9 + 784) = 1;
  *(_QWORD *)(v9 + 792) = 0x3FF0000000000000;
  __asm { FMOV            V0.2D, #2.0 }
  *(_OWORD *)(v9 + 800) = _Q0;
  *(_OWORD *)(v9 + 816) = xmmword_210315720;
  v15 = *(_QWORD *)(a1 + 968);
  *(_QWORD *)(a1 + 968) = v9;
  if (v15)
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  v16 = operator new();
  sub_20F7E39E4(v16);
  *(_QWORD *)v16 = off_24CA02D48;
  *(_WORD *)(v16 + 2424) = *(_WORD *)(v16 + 2424) & 0x7FF0 | 0xC;
  *(_BYTE *)(v16 + 2428) = 1;
  *(_OWORD *)(v16 + 2432) = 0u;
  *(_QWORD *)(v16 + 2400) = 0;
  *(_QWORD *)(v16 + 2416) = 0;
  *(_QWORD *)(v16 + 2408) = 0;
  *(_QWORD *)(v16 + 2408) = malloc_type_calloc(1uLL, 8uLL, 0x100004000313F17uLL);
  *(_QWORD *)(v16 + 2504) = 0;
  *(_OWORD *)(v16 + 2472) = 0u;
  *(_OWORD *)(v16 + 2488) = 0u;
  *(_OWORD *)(v16 + 2448) = 0u;
  *(_DWORD *)(v16 + 2464) = 0;
  *(_QWORD *)v16 = off_24CA02C18;
  *(_DWORD *)(v16 + 2512) = 2;
  *(_DWORD *)(v16 + 2520) = -3;
  *(_OWORD *)(v16 + 2576) = 0u;
  *(_OWORD *)(v16 + 2546) = 0u;
  *(_OWORD *)(v16 + 2562) = 0u;
  *(_DWORD *)(v16 + 2528) = -3;
  *(_DWORD *)(v16 + 2540) = 0;
  *(_QWORD *)(v16 + 2532) = 0;
  *(_WORD *)(v16 + 2544) = 1;
  *(_BYTE *)(v16 + 2592) = 1;
  *(_QWORD *)(v16 + 2600) = 0;
  v17 = *(_QWORD *)(a1 + 976);
  *(_QWORD *)(a1 + 976) = v16;
  if (v17)
    (*(void (**)(uint64_t))(*(_QWORD *)v17 + 88))(v17);
  if (!*(_QWORD *)(a1 + 1008)
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/MapOptimization/src/PoseGraphOptimizer.cpp", 53, (uint64_t)"graph_", 6, (uint64_t)"The graph is not set", 20, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  return a1;
}

void sub_20F7CC82C(_Unwind_Exception *a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;

  sub_20E9BCAA8(*(_QWORD **)(v1 + 992));
  v4 = *(_QWORD *)(v1 + 976);
  *(_QWORD *)(v1 + 976) = 0;
  if (v4)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 88))(v4);
    v5 = *(_QWORD *)(v1 + 968);
    *(_QWORD *)(v1 + 968) = 0;
    if (!v5)
    {
LABEL_3:
      sub_20F2B116C(v2);
      sub_20F46C268((_QWORD *)v1);
      _Unwind_Resume(a1);
    }
  }
  else
  {
    v5 = *(_QWORD *)(v1 + 968);
    *(_QWORD *)(v1 + 968) = 0;
    if (!v5)
      goto LABEL_3;
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  sub_20F2B116C(v2);
  sub_20F46C268((_QWORD *)v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20F7CC8F8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  void *v15;
  void *v16;

  *(_QWORD *)a1 = &off_24CA02B70;
  v2 = *(_QWORD *)(a1 + 976);
  if (v2)
    sub_20F7CCA98((int64x2_t *)(v2 + 40));
  sub_20E9BCAA8(*(_QWORD **)(a1 + 992));
  v3 = *(_QWORD *)(a1 + 976);
  *(_QWORD *)(a1 + 976) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 88))(v3);
  v4 = *(_QWORD *)(a1 + 968);
  *(_QWORD *)(a1 + 968) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  v5 = *(_QWORD **)(a1 + 960);
  if (v5 == (_QWORD *)(a1 + 936))
  {
    v6 = 4;
    v5 = (_QWORD *)(a1 + 936);
  }
  else
  {
    if (!v5)
      goto LABEL_12;
    v6 = 5;
  }
  (*(void (**)(void))(*v5 + 8 * v6))();
LABEL_12:
  v7 = *(_QWORD **)(a1 + 928);
  if (v7 == (_QWORD *)(a1 + 904))
  {
    v8 = 4;
    v7 = (_QWORD *)(a1 + 904);
  }
  else
  {
    if (!v7)
      goto LABEL_17;
    v8 = 5;
  }
  (*(void (**)(void))(*v7 + 8 * v8))();
LABEL_17:
  v9 = *(_QWORD **)(a1 + 896);
  if (v9 == (_QWORD *)(a1 + 872))
  {
    v10 = 4;
    v9 = (_QWORD *)(a1 + 872);
  }
  else
  {
    if (!v9)
      goto LABEL_22;
    v10 = 5;
  }
  (*(void (**)(void))(*v9 + 8 * v10))();
LABEL_22:
  v11 = *(_QWORD **)(a1 + 864);
  if (v11 == (_QWORD *)(a1 + 840))
  {
    v12 = 4;
    v11 = (_QWORD *)(a1 + 840);
    goto LABEL_26;
  }
  if (v11)
  {
    v12 = 5;
LABEL_26:
    (*(void (**)(void))(*v11 + 8 * v12))();
  }
  *(_QWORD *)(a1 + 824) = 0;
  v13 = *(_QWORD *)(a1 + 808);
  if (v13 != a1 + 296 && v13)
    MEMORY[0x212BC6368](v13, 0x1000C8000313F17);
  *(_QWORD *)a1 = off_24CA001F8;
  v14 = *(void **)(a1 + 80);
  if (v14)
  {
    *(_QWORD *)(a1 + 88) = v14;
    operator delete(v14);
  }
  v15 = *(void **)(a1 + 56);
  if (v15)
  {
    *(_QWORD *)(a1 + 64) = v15;
    operator delete(v15);
  }
  v16 = *(void **)(a1 + 32);
  if (v16)
  {
    *(_QWORD *)(a1 + 40) = v16;
    operator delete(v16);
  }
  return a1;
}

void sub_20F7CCA98(int64x2_t *a1)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  BOOL v6;
  _QWORD *v7;
  _QWORD *v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  __int128 v20;
  std::__shared_weak_count *v21;
  unint64_t *p_shared_owners;
  unint64_t v23;
  uint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int64x2_t v31;
  _QWORD *v32;
  __int128 v33;
  _QWORD *v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  uint64_t v60;
  __int128 v61;
  std::__shared_weak_count *v62;
  unint64_t *v63;
  unint64_t v64;
  uint64_t v65;
  std::__shared_weak_count *v66;
  unint64_t *v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  int v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  __int32 v88;
  __int32 v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  __int32 v93;
  uint64_t v94;
  char *v95;
  char *v96;
  char *v97;
  uint64_t v98;
  unint64_t v99;
  uint64_t v100;
  uint64_t v101;
  __int32 v102;
  unint64_t v103;
  uint64_t v104;
  unint64_t v105;
  void *v106;
  _QWORD *v107;
  char *v108;
  uint64_t v109;
  unint64_t v110;
  uint64_t v111;
  unint64_t *v112;
  unint64_t v113;
  uint64_t v114;
  unint64_t v115;
  uint64_t v116;
  uint64_t v117;
  char *v118;
  _OWORD *v119;
  char *v120;
  uint64_t v121;
  __int128 v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  unint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  int v131;
  uint64_t v132;
  int v133;
  uint64_t v134;
  int v135;
  int v136;
  uint64_t v137;
  int v138;
  uint64_t v139[3];
  uint64_t v140;
  uint64_t v141;

  sub_20F7ED8A8((uint64_t)a1);
  if (!a1[17].i8[1])
    goto LABEL_60;
  v2 = a1[12].i64[1];
  v3 = (_QWORD *)a1[13].i64[0];
  if ((_QWORD *)v2 == v3)
  {
    v4 = (_QWORD *)a1[12].i64[1];
  }
  else
  {
    v4 = (_QWORD *)a1[13].i64[0];
    v5 = (_QWORD *)(v2 + 888);
    while (!*((_BYTE *)v5 - 8))
    {
      v6 = v5 == v3;
      v5 += 111;
      if (v6)
        goto LABEL_22;
    }
    --*(_DWORD *)(*(v5 - 19) + 8);
    --*(_DWORD *)(*(v5 - 18) + 8);
    *(v5 - 19) = 0;
    *(v5 - 18) = 0;
    a1[16] = vaddq_s64(a1[16], (int64x2_t)xmmword_2103B2310);
    v7 = v5 - 111;
    if (v5 - 111 != v3)
    {
      if (v5 == v3)
      {
        v4 = v5 - 111;
      }
      else
      {
        v4 = v5 - 111;
        do
        {
          while (1)
          {
            v8 = v5;
            if (!*((_BYTE *)v7 + 1768))
              break;
            --*(_DWORD *)(v7[203] + 8);
            --*(_DWORD *)(v7[204] + 8);
            v7[203] = 0;
            v7[204] = 0;
            a1[16] = vaddq_s64(a1[16], (int64x2_t)xmmword_2103B2310);
            v5 += 111;
            v7 = v8;
            if (v8 + 111 == v3)
              goto LABEL_22;
          }
          *v4 = *v5;
          *(_OWORD *)(v4 + 1) = *((_OWORD *)v7 + 56);
          memcpy(v4 + 3, v7 + 114, 0x120uLL);
          memcpy(v4 + 39, v7 + 150, 0x120uLL);
          v9 = *((_OWORD *)v7 + 99);
          v10 = *((_OWORD *)v7 + 100);
          v11 = *((_OWORD *)v7 + 98);
          *(_OWORD *)(v4 + 83) = *((_OWORD *)v7 + 97);
          *(_OWORD *)(v4 + 85) = v11;
          v12 = *((_OWORD *)v7 + 93);
          v13 = *((_OWORD *)v7 + 94);
          v14 = *((_OWORD *)v7 + 96);
          *(_OWORD *)(v4 + 79) = *((_OWORD *)v7 + 95);
          *(_OWORD *)(v4 + 81) = v14;
          *(_OWORD *)(v4 + 75) = v12;
          *(_OWORD *)(v4 + 77) = v13;
          *(_OWORD *)(v4 + 87) = v9;
          *(_OWORD *)(v4 + 89) = v10;
          *((_BYTE *)v4 + 728) = *((_BYTE *)v7 + 1616);
          v4[92] = v7[203];
          v4[93] = v7[204];
          v16 = *(_OWORD *)(v7 + 207);
          v15 = *(_OWORD *)(v7 + 209);
          *((_OWORD *)v4 + 47) = *(_OWORD *)(v7 + 205);
          *((_OWORD *)v4 + 48) = v16;
          *((_OWORD *)v4 + 49) = v15;
          v17 = *(_OWORD *)(v7 + 211);
          v18 = *(_OWORD *)(v7 + 215);
          *((_OWORD *)v4 + 51) = *(_OWORD *)(v7 + 213);
          *((_OWORD *)v4 + 52) = v18;
          *((_OWORD *)v4 + 50) = v17;
          v19 = v7[217];
          *((_BYTE *)v4 + 856) = *((_BYTE *)v7 + 1744);
          v4[106] = v19;
          v20 = *(_OWORD *)(v7 + 219);
          v7[219] = 0;
          v7[220] = 0;
          v21 = (std::__shared_weak_count *)v4[109];
          *((_OWORD *)v4 + 54) = v20;
          if (v21)
          {
            p_shared_owners = (unint64_t *)&v21->__shared_owners_;
            do
              v23 = __ldaxr(p_shared_owners);
            while (__stlxr(v23 - 1, p_shared_owners));
            if (!v23)
            {
              ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
              std::__shared_weak_count::__release_weak(v21);
            }
          }
          *((_BYTE *)v4 + 880) = *((_BYTE *)v7 + 1768);
          v4 += 111;
          v5 = v8 + 111;
          v7 = v8;
        }
        while (v8 + 111 != v3);
      }
    }
  }
LABEL_22:
  v24 = a1[13].i64[0];
  if (v4 != (_QWORD *)v24)
  {
    while ((_QWORD *)v24 != v4)
    {
      v25 = *(std::__shared_weak_count **)(v24 - 16);
      if (v25)
      {
        v26 = (unint64_t *)&v25->__shared_owners_;
        do
          v27 = __ldaxr(v26);
        while (__stlxr(v27 - 1, v26));
        if (!v27)
        {
          ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
          std::__shared_weak_count::__release_weak(v25);
        }
      }
      v24 -= 888;
    }
    a1[13].i64[0] = (uint64_t)v4;
  }
  v29 = a1[14].i64[0];
  v28 = a1[14].i64[1];
  if (v29 == v28)
    goto LABEL_49;
  v30 = a1[14].i64[1];
  while (!*(_BYTE *)(v29 + 632))
  {
    v29 += 640;
    if (v29 == v28)
      goto LABEL_50;
  }
  --*(_DWORD *)(*(_QWORD *)(v29 + 488) + 8);
  --*(_DWORD *)(*(_QWORD *)(v29 + 496) + 8);
  *(_OWORD *)(v29 + 488) = 0u;
  --*(_DWORD *)(*(_QWORD *)(v29 + 504) + 8);
  --*(_DWORD *)(*(_QWORD *)(v29 + 512) + 8);
  *(_OWORD *)(v29 + 504) = 0u;
  v31 = (int64x2_t)xmmword_2103B7580;
  a1[16] = vaddq_s64(a1[16], (int64x2_t)xmmword_2103B7580);
  if (v29 == v28)
    goto LABEL_50;
  v32 = (_QWORD *)(v29 + 640);
  if (v29 + 640 == v28)
  {
LABEL_49:
    v30 = v29;
  }
  else
  {
    v33 = 0uLL;
    v30 = v29;
    do
    {
      while (1)
      {
        v34 = v32;
        if (!*(_BYTE *)(v29 + 1272))
          break;
        --*(_DWORD *)(*(_QWORD *)(v29 + 1128) + 8);
        --*(_DWORD *)(*(_QWORD *)(v29 + 1136) + 8);
        *(_OWORD *)(v29 + 1128) = v33;
        --*(_DWORD *)(*(_QWORD *)(v29 + 1144) + 8);
        --*(_DWORD *)(*(_QWORD *)(v29 + 1152) + 8);
        *(_OWORD *)(v29 + 1144) = v33;
        a1[16] = vaddq_s64(a1[16], v31);
        v32 += 80;
        v29 = (uint64_t)v34;
        if (v34 + 80 == (_QWORD *)v28)
          goto LABEL_50;
      }
      *(_QWORD *)v30 = *v32;
      *(_QWORD *)(v30 + 8) = *(_QWORD *)(v29 + 648);
      v35 = *(_OWORD *)(v29 + 656);
      v36 = *(_OWORD *)(v29 + 672);
      v37 = *(_OWORD *)(v29 + 688);
      *(_OWORD *)(v30 + 64) = *(_OWORD *)(v29 + 704);
      *(_OWORD *)(v30 + 48) = v37;
      *(_OWORD *)(v30 + 32) = v36;
      *(_OWORD *)(v30 + 16) = v35;
      v38 = *(_OWORD *)(v29 + 720);
      v39 = *(_OWORD *)(v29 + 736);
      v40 = *(_OWORD *)(v29 + 752);
      *(_OWORD *)(v30 + 128) = *(_OWORD *)(v29 + 768);
      *(_OWORD *)(v30 + 112) = v40;
      *(_OWORD *)(v30 + 96) = v39;
      *(_OWORD *)(v30 + 80) = v38;
      *(_BYTE *)(v30 + 144) = *(_BYTE *)(v29 + 784);
      v41 = *(_OWORD *)(v29 + 792);
      v42 = *(_OWORD *)(v29 + 824);
      *(_OWORD *)(v30 + 168) = *(_OWORD *)(v29 + 808);
      *(_OWORD *)(v30 + 184) = v42;
      *(_OWORD *)(v30 + 152) = v41;
      v43 = *(_OWORD *)(v29 + 840);
      v44 = *(_OWORD *)(v29 + 856);
      v45 = *(_OWORD *)(v29 + 888);
      *(_OWORD *)(v30 + 232) = *(_OWORD *)(v29 + 872);
      *(_OWORD *)(v30 + 248) = v45;
      *(_OWORD *)(v30 + 200) = v43;
      *(_OWORD *)(v30 + 216) = v44;
      v46 = *(_OWORD *)(v29 + 904);
      v47 = *(_OWORD *)(v29 + 920);
      v48 = *(_OWORD *)(v29 + 952);
      *(_OWORD *)(v30 + 296) = *(_OWORD *)(v29 + 936);
      *(_OWORD *)(v30 + 312) = v48;
      *(_OWORD *)(v30 + 264) = v46;
      *(_OWORD *)(v30 + 280) = v47;
      v49 = *(_OWORD *)(v29 + 968);
      v50 = *(_OWORD *)(v29 + 984);
      v51 = *(_OWORD *)(v29 + 1016);
      *(_OWORD *)(v30 + 360) = *(_OWORD *)(v29 + 1000);
      *(_OWORD *)(v30 + 376) = v51;
      *(_OWORD *)(v30 + 328) = v49;
      *(_OWORD *)(v30 + 344) = v50;
      *(_OWORD *)(v30 + 392) = *(_OWORD *)(v29 + 1032);
      v52 = *(_OWORD *)(v29 + 1048);
      v53 = *(_OWORD *)(v29 + 1064);
      v54 = *(_OWORD *)(v29 + 1080);
      *(_QWORD *)(v30 + 456) = *(_QWORD *)(v29 + 1096);
      *(_OWORD *)(v30 + 424) = v53;
      *(_OWORD *)(v30 + 440) = v54;
      *(_OWORD *)(v30 + 408) = v52;
      v55 = *(_OWORD *)(v29 + 1104);
      *(_QWORD *)(v30 + 480) = *(_QWORD *)(v29 + 1120);
      *(_OWORD *)(v30 + 464) = v55;
      *(_QWORD *)(v30 + 488) = *(_QWORD *)(v29 + 1128);
      *(_QWORD *)(v30 + 496) = *(_QWORD *)(v29 + 1136);
      *(_QWORD *)(v30 + 504) = *(_QWORD *)(v29 + 1144);
      *(_QWORD *)(v30 + 512) = *(_QWORD *)(v29 + 1152);
      v56 = *(_OWORD *)(v29 + 1160);
      v57 = *(_OWORD *)(v29 + 1176);
      *(_QWORD *)(v30 + 552) = *(_QWORD *)(v29 + 1192);
      *(_OWORD *)(v30 + 520) = v56;
      *(_OWORD *)(v30 + 536) = v57;
      v58 = *(_OWORD *)(v29 + 1200);
      v59 = *(_OWORD *)(v29 + 1216);
      *(_QWORD *)(v30 + 592) = *(_QWORD *)(v29 + 1232);
      *(_OWORD *)(v30 + 576) = v59;
      *(_OWORD *)(v30 + 560) = v58;
      v60 = *(_QWORD *)(v29 + 1240);
      *(_BYTE *)(v30 + 608) = *(_BYTE *)(v29 + 1248);
      *(_QWORD *)(v30 + 600) = v60;
      v61 = *(_OWORD *)(v29 + 1256);
      *(_QWORD *)(v29 + 1256) = 0;
      *(_QWORD *)(v29 + 1264) = 0;
      v62 = *(std::__shared_weak_count **)(v30 + 624);
      *(_OWORD *)(v30 + 616) = v61;
      if (v62)
      {
        v63 = (unint64_t *)&v62->__shared_owners_;
        do
          v64 = __ldaxr(v63);
        while (__stlxr(v64 - 1, v63));
        if (!v64)
        {
          ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
          std::__shared_weak_count::__release_weak(v62);
          v33 = 0uLL;
          v31 = (int64x2_t)xmmword_2103B7580;
        }
      }
      *(_BYTE *)(v30 + 632) = *(_BYTE *)(v29 + 1272);
      v30 += 640;
      v32 = v34 + 80;
      v29 = (uint64_t)v34;
    }
    while (v34 + 80 != (_QWORD *)v28);
  }
LABEL_50:
  v65 = a1[14].i64[1];
  if (v30 != v65)
  {
    while (v65 != v30)
    {
      v66 = *(std::__shared_weak_count **)(v65 - 16);
      if (v66)
      {
        v67 = (unint64_t *)&v66->__shared_owners_;
        do
          v68 = __ldaxr(v67);
        while (__stlxr(v68 - 1, v67));
        if (!v68)
        {
          ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
          std::__shared_weak_count::__release_weak(v66);
        }
      }
      v65 -= 640;
    }
    a1[14].i64[1] = v30;
  }
LABEL_60:
  v69 = a1->i64[1];
  v70 = a1[1].i64[0];
  if (v70 == v69)
  {
    v72 = a1[1].i64[0];
    v84 = a1[6].i64[1];
    v83 = a1[7].i64[0];
    if (v83 != v84)
    {
LABEL_74:
      v85 = -16 - v83;
      v86 = v83;
      while (1)
      {
        while (1)
        {
          v87 = *(_QWORD *)(v86 - 8);
          v86 -= 16;
          if ((*(_BYTE *)(v87 + 4) & 6) != 0)
            break;
          *(_BYTE *)(v87 + 4) = 0;
          v85 += 16;
          if (v86 == v84)
            goto LABEL_132;
        }
        v88 = a1[10].i32[0];
        if (!v88)
        {
          v96 = (char *)a1[11].i64[0];
          v95 = (char *)a1[11].i64[1];
          v97 = (char *)(v95 - v96);
          v98 = (v95 - v96) >> 3;
          if (-v98 != 1)
            goto LABEL_85;
LABEL_83:
          a1[11].i64[1] = (uint64_t)v96;
          a1[10].i64[1] = 0;
          a1[10].i32[0] = 0;
          goto LABEL_120;
        }
        v89 = v88 - 1;
        v90 = a1[10].i64[1];
        v91 = v90 - 1;
        if (*(_QWORD *)(a1[8].i64[1] + 16 * (v88 - 1)) + 224 * (v90 - 1) != v87)
        {
          v92 = 0;
          v93 = v88 - 1;
          if (v93)
          {
            v94 = 8;
            do
            {
              v92 += v94;
              v94 *= 2;
              --v93;
            }
            while (v93);
          }
          v96 = (char *)a1[11].i64[0];
          v95 = (char *)a1[11].i64[1];
          v97 = (char *)(v95 - v96);
          v98 = (v95 - v96) >> 3;
          if (v92 + v90 - v98 != 1)
          {
LABEL_85:
            v99 = a1[12].u64[0];
            if ((unint64_t)v95 < v99)
            {
              *(_QWORD *)v95 = v87;
              v100 = (uint64_t)(v95 + 8);
LABEL_119:
              a1[11].i64[1] = v100;
              goto LABEL_120;
            }
            v103 = v98 + 1;
            if ((unint64_t)(v98 + 1) >> 61)
              sub_20E867F44();
            v104 = v99 - (_QWORD)v96;
            if (v104 >> 2 > v103)
              v103 = v104 >> 2;
            if ((unint64_t)v104 >= 0x7FFFFFFFFFFFFFF8)
              v105 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v105 = v103;
            if (v105)
            {
              if (v105 >> 61)
                sub_20E877A38();
              v106 = operator new(8 * v105);
              v107 = (char *)v106 + 8 * v98;
              *v107 = v87;
              v100 = (uint64_t)(v107 + 1);
              v108 = (char *)(v95 - v96);
              if (v95 == v96)
                goto LABEL_117;
LABEL_110:
              v115 = (unint64_t)(v108 - 8);
              if (v115 < 0x58)
                goto LABEL_152;
              if ((unint64_t)(v95 - &v97[(_QWORD)v106]) < 0x20)
                goto LABEL_152;
              v116 = (v115 >> 3) + 1;
              v117 = 8 * (v116 & 0x3FFFFFFFFFFFFFFCLL);
              v118 = &v95[-v117];
              v107 = (_QWORD *)((char *)v107 - v117);
              v119 = (char *)v106 + 8 * v98 - 16;
              v120 = v95 - 16;
              v121 = v116 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v122 = *(_OWORD *)v120;
                *(v119 - 1) = *((_OWORD *)v120 - 1);
                *v119 = v122;
                v119 -= 2;
                v120 -= 32;
                v121 -= 4;
              }
              while (v121);
              v95 = v118;
              if (v116 != (v116 & 0x3FFFFFFFFFFFFFFCLL))
              {
LABEL_152:
                do
                {
                  v123 = *((_QWORD *)v95 - 1);
                  v95 -= 8;
                  *--v107 = v123;
                }
                while (v95 != v96);
              }
              v95 = (char *)a1[11].i64[0];
            }
            else
            {
              v106 = 0;
              v107 = (_QWORD *)(8 * v98);
              *(_QWORD *)(8 * v98) = v87;
              v100 = 8 * v98 + 8;
              v108 = (char *)(v95 - v96);
              if (v95 != v96)
                goto LABEL_110;
            }
LABEL_117:
            a1[11].i64[0] = (uint64_t)v107;
            a1[11].i64[1] = v100;
            a1[12].i64[0] = (uint64_t)v106 + 8 * v105;
            if (v95)
              operator delete(v95);
            goto LABEL_119;
          }
          goto LABEL_83;
        }
        a1[10].i64[1] = v91;
        if (v90 != 1)
          break;
        a1[10].i32[0] = v89;
        if (v88 != 1)
        {
          v91 = 8 << (v88 - 2);
          a1[10].i64[1] = v91;
          v101 = 0;
          v102 = v88 - 2;
          if (v89 != 1)
            goto LABEL_102;
          goto LABEL_104;
        }
        v110 = 0;
        v111 = a1[11].i64[0];
        v112 = (unint64_t *)a1[11].i64[1];
        v113 = (unint64_t)v112 - v111;
        if (!(((uint64_t)v112 - v111) >> 3))
        {
LABEL_105:
          if ((unint64_t *)v111 != v112 && v113 >= 0xF0)
          {
            sub_20F7E43DC(v111, v112, 126 - 2 * __clz(v110), 1);
            v114 = a1[11].i64[0];
            v140 = a1[11].i64[1];
            v141 = v114;
            v139[0] = (uint64_t)a1[8].i64;
            v139[1] = (uint64_t)&v141;
            v139[2] = (uint64_t)&v140;
            sub_20F7E4270((uint64_t)a1[8].i64, v139);
            v111 = a1[11].i64[0];
          }
          a1[10].i32[0] = 0;
          a1[10].i64[1] = 0;
          a1[11].i64[1] = v111;
        }
LABEL_120:
        v124 = v86 + 16;
        v84 = a1[6].i64[1];
        v125 = a1[7].i64[0];
        if (v86 + 16 == v125)
        {
          v83 = v86;
          a1[7].i64[0] = v86;
          v85 += 16;
          if (v86 == v84)
            goto LABEL_132;
        }
        else
        {
          v126 = v125 - v86 - 32;
          v83 = v86;
          if (v126 < 0x10)
            goto LABEL_153;
          v127 = (v126 >> 4) + 1;
          v128 = 16 * (v127 & 0x1FFFFFFFFFFFFFFELL);
          v83 = v86 + v128;
          v124 += v128;
          v129 = (((unint64_t)(v125 + v85) >> 4) + 1) & 0x1FFFFFFFFFFFFFFELL;
          v130 = v84 + 16 * ((v86 - v84) >> 4) + 24;
          do
          {
            v131 = *(_DWORD *)(v130 + 8);
            *(_DWORD *)(v130 - 24) = *(_DWORD *)(v130 - 8);
            *(_DWORD *)(v130 - 8) = v131;
            v132 = *(_QWORD *)(v130 + 16);
            *(_QWORD *)(v130 - 16) = *(_QWORD *)v130;
            *(_QWORD *)v130 = v132;
            v130 += 32;
            v129 -= 2;
          }
          while (v129);
          if (v127 != (v127 & 0x1FFFFFFFFFFFFFFELL))
          {
LABEL_153:
            do
            {
              *(_DWORD *)v83 = *(_DWORD *)v124;
              *(_QWORD *)(v83 + 8) = *(_QWORD *)(v124 + 8);
              v83 += 16;
              v124 += 16;
            }
            while (v124 != v125);
          }
          a1[7].i64[0] = v83;
          v85 += 16;
          if (v86 == v84)
          {
LABEL_132:
            v72 = a1->i64[1];
            v70 = a1[1].i64[0];
            goto LABEL_135;
          }
        }
      }
      v101 = 0;
      v102 = v88 - 1;
      if (v102)
      {
LABEL_102:
        v109 = 8;
        do
        {
          v101 += v109;
          v109 *= 2;
          --v102;
        }
        while (v102);
      }
LABEL_104:
      v110 = v101 + v91;
      v111 = a1[11].i64[0];
      v112 = (unint64_t *)a1[11].i64[1];
      v113 = (unint64_t)v112 - v111;
      if (v110 == ((uint64_t)v112 - v111) >> 3)
        goto LABEL_105;
      goto LABEL_120;
    }
  }
  else
  {
    v71 = -16 - v70;
    v72 = a1[1].i64[0];
    do
    {
      while (1)
      {
        while (1)
        {
          v73 = *(_QWORD *)(v72 - 8);
          v72 -= 16;
          if ((*(_BYTE *)(v73 + 4) & 6) != 0)
            break;
          *(_BYTE *)(v73 + 4) = 0;
          v71 += 16;
          if (v72 == v69)
            goto LABEL_73;
        }
        sub_20F3D6D28((uint64_t)a1[2].i64, v73);
        v74 = v72 + 16;
        v69 = a1->i64[1];
        v75 = a1[1].i64[0];
        if (v72 + 16 != v75)
          break;
        v70 = v72;
        a1[1].i64[0] = v72;
        v71 += 16;
        if (v72 == v69)
          goto LABEL_73;
      }
      v76 = v75 - v72 - 32;
      v70 = v72;
      if (v76 < 0x10)
        goto LABEL_154;
      v77 = (v76 >> 4) + 1;
      v78 = 16 * (v77 & 0x1FFFFFFFFFFFFFFELL);
      v70 = v72 + v78;
      v74 += v78;
      v79 = (((unint64_t)(v75 + v71) >> 4) + 1) & 0x1FFFFFFFFFFFFFFELL;
      v80 = v69 + 16 * ((v72 - v69) >> 4) + 24;
      do
      {
        v81 = *(_DWORD *)(v80 + 8);
        *(_DWORD *)(v80 - 24) = *(_DWORD *)(v80 - 8);
        *(_DWORD *)(v80 - 8) = v81;
        v82 = *(_QWORD *)(v80 + 16);
        *(_QWORD *)(v80 - 16) = *(_QWORD *)v80;
        *(_QWORD *)v80 = v82;
        v80 += 32;
        v79 -= 2;
      }
      while (v79);
      if (v77 != (v77 & 0x1FFFFFFFFFFFFFFELL))
      {
LABEL_154:
        do
        {
          *(_DWORD *)v70 = *(_DWORD *)v74;
          *(_QWORD *)(v70 + 8) = *(_QWORD *)(v74 + 8);
          v70 += 16;
          v74 += 16;
        }
        while (v74 != v75);
      }
      a1[1].i64[0] = v70;
      v71 += 16;
    }
    while (v72 != v69);
LABEL_73:
    v84 = a1[6].i64[1];
    v83 = a1[7].i64[0];
    if (v83 != v84)
      goto LABEL_74;
  }
  v86 = v83;
LABEL_135:
  a1[17].i16[0] = 1;
  a1[18].i64[0] = a1[17].i64[1];
  a1[21].i64[0] = a1[20].i64[1];
  a1[24].i64[0] = a1[23].i64[1];
  a1[19].i64[1] = a1[19].i64[0];
  a1[22].i64[1] = a1[22].i64[0];
  a1[25].i64[1] = a1[25].i64[0];
  if (v72 != v70)
  {
    v133 = 0;
    do
    {
      v134 = *(_QWORD *)(v72 + 8);
      if (*(_BYTE *)(v134 + 20))
        v135 = v133;
      else
        v135 = -1;
      v133 += *(unsigned __int8 *)(v134 + 20);
      *(_DWORD *)v134 = v135;
      v72 += 16;
    }
    while (v72 != v70);
  }
  if (v86 != v83)
  {
    v136 = 0;
    do
    {
      v137 = *(_QWORD *)(v86 + 8);
      if (*(_BYTE *)(v137 + 20))
        v138 = v136;
      else
        v138 = -1;
      v136 += *(unsigned __int8 *)(v137 + 20);
      *(_DWORD *)v137 = v138;
      v86 += 16;
    }
    while (v86 != v83);
  }
}

void sub_20F7CD8D0(uint64_t a1)
{
  sub_20F7CC8F8(a1);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20F7CD8F4(_QWORD *result, uint64_t *a2, uint64_t a3)
{
  uint64_t *v3;
  _QWORD *v5;
  unint64_t v6;
  unsigned int v7;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unsigned int v12;
  char *v13;
  char *v14;
  unint64_t v15;
  unint64_t v16;
  unsigned int *v17;
  char *v18;
  unsigned int v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  void *v24;
  std::ios_base *v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  std::ios_base *v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  void **v35;
  uint64_t v36;
  size_t v37;
  void **p_dst;
  int v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  _QWORD *v43;
  _QWORD *v44;
  _QWORD *v45;
  _QWORD *v46;
  BOOL v47;
  _QWORD *v48;
  _QWORD *v49;
  _QWORD *v50;
  _QWORD *v51;
  unint64_t v52;
  const void **v53;
  const void *v54;
  uint64_t v55;
  uint64_t v56;
  int64_t v57;
  void **v58;
  uint64_t v59;
  size_t v60;
  void *v61;
  unint64_t v62;
  const void **v63;
  const void *v64;
  uint64_t v65;
  uint64_t v66;
  void *v67;
  uint64_t v68;
  unsigned __int8 v69;
  uint64_t v70;
  uint64_t i;
  unsigned __int8 v72;
  void *v73;
  int64_t v74;
  int64_t v75;
  void **__dst;
  size_t v77;
  int64_t v78;
  _QWORD v79[2];
  uint64_t v80;
  uint64_t v81;
  _QWORD v82[3];
  uint64_t v83;
  unint64_t v84;
  __int128 v85;
  __int128 v86;
  int v87;
  uint64_t v88;
  void *__p[2];
  unsigned __int8 v90;
  void *v91;
  size_t v92;
  int64_t v93;
  uint64_t v94;
  _QWORD v95[3];
  uint64_t v96;
  unint64_t v97;
  __int128 v98;
  __int128 v99;
  int v100;
  uint64_t v101[20];

  v3 = (uint64_t *)result[124];
  if (v3)
  {
    v5 = result + 124;
    v6 = *a2;
    v7 = *((_DWORD *)a2 + 2);
    v8 = result + 124;
    do
    {
      v9 = v3[4];
      if (v9 < v6)
      {
        ++v3;
      }
      else if (v9 == v6)
      {
        if (*((_DWORD *)v3 + 10) < v7)
          ++v3;
        else
          v8 = v3;
      }
      else
      {
        v8 = v3;
      }
      v3 = (uint64_t *)*v3;
    }
    while (v3);
    if (v8 != v5)
    {
      v10 = v8[4];
      if (v6 >= v10 && (v6 != v10 || v7 >= *((_DWORD *)v8 + 10)))
      {
        v11 = result[122];
        v12 = *((_DWORD *)v8 + 12);
        v13 = *(char **)(v11 + 48);
        v14 = *(char **)(v11 + 56);
        if (v14 != v13)
        {
          v15 = (v14 - v13) >> 4;
          do
          {
            v16 = v15 >> 1;
            v17 = (unsigned int *)&v13[16 * (v15 >> 1)];
            v19 = *v17;
            v18 = (char *)(v17 + 4);
            v15 += ~(v15 >> 1);
            if (v19 < v12)
              v13 = v18;
            else
              v15 = v16;
          }
          while (v15);
        }
        if (v13 != v14 && *(_DWORD *)v13 == v12)
        {
          *(_BYTE *)(*((_QWORD *)v13 + 1) + 20) = 0;
          return result;
        }
        v20 = result;
        v21 = MEMORY[0x24BEDB858] + 104;
        v88 = MEMORY[0x24BEDB858] + 104;
        v22 = MEMORY[0x24BEDB858] + 64;
        v23 = *(_QWORD **)(MEMORY[0x24BEDB7F0] + 16);
        v24 = *(void **)(MEMORY[0x24BEDB7F0] + 24);
        v80 = MEMORY[0x24BEDB858] + 64;
        v79[0] = v23;
        *(_QWORD *)((char *)v79 + *(v23 - 3)) = v24;
        v79[1] = 0;
        v25 = (std::ios_base *)((char *)v79 + *(_QWORD *)(v79[0] - 24));
        std::ios_base::init(v25, &v81);
        v25[1].__vftable = 0;
        v25[1].__fmtflags_ = -1;
        v26 = MEMORY[0x24BEDB7F0];
        v27 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 40);
        v80 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 32);
        v75 = v80;
        *(uint64_t *)((char *)&v80 + *(_QWORD *)(v80 - 24)) = v27;
        v28 = *(_QWORD **)(v26 + 8);
        v79[0] = v28;
        v73 = *(void **)(v26 + 48);
        v74 = v27;
        *(_QWORD *)((char *)v79 + *(v28 - 3)) = v73;
        v88 = v21;
        v79[0] = MEMORY[0x24BEDB858] + 24;
        v80 = v22;
        std::streambuf::basic_streambuf();
        v81 = MEMORY[0x24BEDB848] + 16;
        v85 = 0u;
        v86 = 0u;
        v87 = 24;
        if (*(_BYTE *)(a3 + 8))
        {
          v39 = *(char *)(*(_QWORD *)a3 + 23);
          if (v39 >= 0)
            v40 = *(_QWORD *)a3;
          else
            v40 = **(_QWORD **)a3;
          if (v39 >= 0)
            v41 = *(unsigned __int8 *)(*(_QWORD *)a3 + 23);
          else
            v41 = *(_QWORD *)(*(_QWORD *)a3 + 8);
          v42 = sub_20E86A980(&v80, v40, v41);
          sub_20E86A980(v42, (uint64_t)"\n", 1);
        }
        v29 = MEMORY[0x24BEDB858] + 104;
        v101[0] = MEMORY[0x24BEDB858] + 104;
        v30 = MEMORY[0x24BEDB858] + 64;
        v93 = MEMORY[0x24BEDB858] + 64;
        v91 = v23;
        *(void **)((char *)&v91 + *(v23 - 3)) = v24;
        v92 = 0;
        v31 = (std::ios_base *)((char *)&v91 + *((_QWORD *)v91 - 3));
        std::ios_base::init(v31, &v94);
        v31[1].__vftable = 0;
        v31[1].__fmtflags_ = -1;
        v93 = v75;
        *(int64_t *)((char *)&v93 + *(_QWORD *)(v75 - 24)) = v74;
        v91 = v28;
        *(void **)((char *)&v91 + *(v28 - 3)) = v73;
        v101[0] = v29;
        v91 = (void *)(MEMORY[0x24BEDB858] + 24);
        v93 = v30;
        std::streambuf::basic_streambuf();
        v94 = MEMORY[0x24BEDB848] + 16;
        v98 = 0u;
        v99 = 0u;
        v100 = 24;
        sub_20E86A980(&v93, (uint64_t)"PoseGraphOptimizer::DebugLog: \n", 31);
        sub_20E86A980(&v93, (uint64_t)" ID_map: ", 9);
        v32 = (_QWORD *)v20[123];
        if (v32 != v5)
        {
          do
          {
            v43 = (_QWORD *)std::ostream::operator<<();
            sub_20E86A980(v43, (uint64_t)"->", 2);
            v44 = (_QWORD *)std::ostream::operator<<();
            sub_20E86A980(v44, (uint64_t)", ", 2);
            v45 = (_QWORD *)v32[1];
            if (v45)
            {
              do
              {
                v46 = v45;
                v45 = (_QWORD *)*v45;
              }
              while (v45);
            }
            else
            {
              do
              {
                v46 = (_QWORD *)v32[2];
                v47 = *v46 == (_QWORD)v32;
                v32 = v46;
              }
              while (!v47);
            }
            v32 = v46;
          }
          while (v46 != v5);
        }
        sub_20E86A980(&v93, (uint64_t)"\n", 1);
        sub_20E86A980(&v93, (uint64_t)" pose var: ", 11);
        v33 = v20[122];
        v34 = *(_QWORD *)(v33 + 48);
        if (v34 != *(_QWORD *)(v33 + 56))
        {
          do
          {
            sub_20E86A980(&v93, (uint64_t)" var_id: ", 9);
            v48 = (_QWORD *)std::ostream::operator<<();
            sub_20E86A980(v48, (uint64_t)" state: ", 8);
            v49 = (_QWORD *)std::ostream::operator<<();
            sub_20E86A980(v49, (uint64_t)"|", 1);
            v50 = (_QWORD *)std::ostream::operator<<();
            sub_20E86A980(v50, (uint64_t)"|", 1);
            v51 = (_QWORD *)std::ostream::operator<<();
            sub_20E86A980(v51, (uint64_t)", ", 2);
            v34 += 16;
          }
          while (v34 != *(_QWORD *)(v20[122] + 56));
        }
        sub_20E86A980(&v93, (uint64_t)"\n", 1);
        sub_20F7C412C(v20[126], (uint64_t)__p);
        if ((v90 & 0x80u) == 0)
          v35 = __p;
        else
          v35 = (void **)__p[0];
        if ((v90 & 0x80u) == 0)
          v36 = v90;
        else
          v36 = (uint64_t)__p[1];
        sub_20E86A980(&v93, (uint64_t)v35, v36);
        if ((char)v90 < 0)
          operator delete(__p[0]);
        if ((v100 & 0x10) != 0)
        {
          v52 = *((_QWORD *)&v99 + 1);
          if (*((_QWORD *)&v99 + 1) < v97)
          {
            *((_QWORD *)&v99 + 1) = v97;
            v52 = v97;
          }
          v53 = (const void **)&v96;
        }
        else
        {
          if ((v100 & 8) == 0)
          {
            v37 = 0;
            HIBYTE(v78) = 0;
            p_dst = (void **)&__dst;
            goto LABEL_69;
          }
          v53 = (const void **)v95;
          v52 = v95[2];
        }
        v54 = *v53;
        v37 = v52 - (_QWORD)*v53;
        if (v37 > 0x7FFFFFFFFFFFFFF7)
          sub_20E860B7C();
        if (v37 >= 0x17)
        {
          v55 = (v37 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v37 | 7) != 0x17)
            v55 = v37 | 7;
          v56 = v55 + 1;
          p_dst = (void **)operator new(v55 + 1);
          v77 = v37;
          v78 = v56 | 0x8000000000000000;
          __dst = p_dst;
        }
        else
        {
          HIBYTE(v78) = v52 - *(_BYTE *)v53;
          p_dst = (void **)&__dst;
          if (!v37)
          {
LABEL_69:
            *((_BYTE *)p_dst + v37) = 0;
            v91 = (void *)*MEMORY[0x24BEDB7F0];
            v57 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
            *(void **)((char *)&v91 + *((_QWORD *)v91 - 3)) = *(void **)(MEMORY[0x24BEDB7F0] + 64);
            v93 = v57;
            v94 = MEMORY[0x24BEDB848] + 16;
            if (SBYTE7(v99) < 0)
              operator delete((void *)v98);
            std::streambuf::~streambuf();
            std::iostream::~basic_iostream();
            MEMORY[0x212BC6290](v101);
            if (v78 >= 0)
              v58 = (void **)&__dst;
            else
              v58 = __dst;
            if (v78 >= 0)
              v59 = HIBYTE(v78);
            else
              v59 = v77;
            sub_20E86A980(&v80, (uint64_t)v58, v59);
            if (SHIBYTE(v78) < 0)
              operator delete(__dst);
            if ((v87 & 0x10) != 0)
            {
              v62 = *((_QWORD *)&v86 + 1);
              if (*((_QWORD *)&v86 + 1) < v84)
              {
                *((_QWORD *)&v86 + 1) = v84;
                v62 = v84;
              }
              v63 = (const void **)&v83;
            }
            else
            {
              if ((v87 & 8) == 0)
              {
                v60 = 0;
                HIBYTE(v93) = 0;
                v61 = &v91;
                goto LABEL_95;
              }
              v63 = (const void **)v82;
              v62 = v82[2];
            }
            v64 = *v63;
            v60 = v62 - (_QWORD)*v63;
            if (v60 > 0x7FFFFFFFFFFFFFF7)
              sub_20E860B7C();
            if (v60 >= 0x17)
            {
              v65 = (v60 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v60 | 7) != 0x17)
                v65 = v60 | 7;
              v66 = v65 + 1;
              v61 = operator new(v65 + 1);
              v92 = v60;
              v93 = v66 | 0x8000000000000000;
              v91 = v61;
            }
            else
            {
              HIBYTE(v93) = v62 - *(_BYTE *)v63;
              v61 = &v91;
              if (!v60)
              {
LABEL_95:
                *((_BYTE *)v61 + v60) = 0;
                if (v93 >= 0)
                  v67 = &v91;
                else
                  v67 = v91;
                if (v93 >= 0)
                  v68 = HIBYTE(v93);
                else
                  v68 = v92;
                sub_21023D70C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/MapOptimization/src/PoseGraphOptimizer.cpp", 82, (uint64_t)"", 0, (uint64_t)v67, v68, (void (*)(void **))sub_21023DDB0);
                v69 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
                if ((v69 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
                {
                  __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
                  __cxa_guard_release(&qword_254A6DE78);
                }
                if (!byte_254A6DE68 || byte_254A6DE70)
                {
                  v70 = qword_254A6DE40;
                  for (i = qword_254A6DE48; v70 != i; v70 += 16)
                    (*(void (**)(_QWORD, const char *, _QWORD, void *, uint64_t))v70)(*(_QWORD *)(v70 + 8), "", 0, v67, v68);
                }
                v72 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
                if ((v72 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
                {
                  __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
                  __cxa_guard_release(&qword_254A6DE78);
                }
                if (byte_254A6DE68)
                  qword_254A6DE58(unk_254A6DE60, "", 0, v67, v68);
                if (SHIBYTE(v93) < 0)
                  operator delete(v91);
                abort();
              }
            }
            memmove(v61, v64, v60);
            goto LABEL_95;
          }
        }
        memmove(p_dst, v54, v37);
        goto LABEL_69;
      }
    }
  }
  return result;
}

void sub_20F7CE194(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,void *a59,uint64_t a60,uint64_t a61,void *__p,uint64_t a63)
{
  char a67;
  uint64_t v68;

  if (a67 < 0)
    operator delete(__p);
  a21 = *MEMORY[0x24BEDB7F0];
  v68 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  *(uint64_t *)((char *)&a21 + *(_QWORD *)(a21 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
  a23 = v68;
  a24 = MEMORY[0x24BEDB848] + 16;
  if (a37 < 0)
    operator delete(a32);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x212BC6290](a17);
  _Unwind_Resume(a1);
}

uint64_t sub_20F7CE2F4(uint64_t result, int64x2_t a2, double a3, int64x2_t _Q2)
{
  uint64_t v4;
  uint64_t i;
  uint64_t v6;
  uint64_t v7;
  int64x2_t v8;
  float64x2_t v11;
  int8x16_t v13;
  int8x16_t v14;
  double v15;
  float64x2_t v22;
  int64x2_t v23;
  float64x2_t v24;
  float64x2_t v25;
  float64x2_t v26;

  v4 = *(_QWORD *)(result + 976);
  for (i = *(_QWORD *)(v4 + 48); i != *(_QWORD *)(v4 + 56); i += 16)
  {
    v6 = *(_QWORD *)(i + 8);
    v7 = *(_QWORD *)(v6 + 24);
    if (v7)
    {
      a2.i64[0] = *(_QWORD *)(v7 + 16);
      _Q2.i64[0] = *(_QWORD *)(v7 + 40);
      v8 = *(int64x2_t *)(v7 + 24);
      _D4 = *(double *)(v7 + 64);
      _Q5 = *(float64x2_t *)(v7 + 48);
      v11 = (float64x2_t)vzip1q_s64(*(int64x2_t *)v7, v8);
      _Q3 = (float64x2_t)vzip2q_s64(*(int64x2_t *)v7, v8);
      v13 = (int8x16_t)vdupq_laneq_s64((int64x2_t)_Q3, 1);
      v14 = (int8x16_t)vdupq_lane_s64(*(uint64_t *)&_Q3.f64[0], 0);
      v15 = *(double *)(v7 + 88);
      _Q21 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v11, *(double *)(v7 + 72)), _Q3, *(float64x2_t *)(v7 + 72), 1), (float64x2_t)vzip1q_s64(a2, _Q2), v15);
      _D16 = *(_QWORD *)(v7 + 80);
      __asm { FMLA            D3, D16, V5.D[1] }
      _Q3.f64[0] = _Q3.f64[0] + _D4 * v15;
      v22 = vnegq_f64(_Q21);
      v23 = (int64x2_t)vextq_s8(v14, v13, 8uLL);
      v24 = (float64x2_t)vzip1q_s64(*(int64x2_t *)v7, v23);
      *(_QWORD *)&_Q5.f64[1] = vdupq_laneq_s64((int64x2_t)_Q5, 1).u64[0];
      v25 = (float64x2_t)vzip2q_s64((int64x2_t)v11, v23);
      v26 = vmlsq_lane_f64(vmlsq_laneq_f64(vmulq_n_f64(v24, v22.f64[0]), v25, _Q21, 1), _Q5, _Q3.f64[0], 0);
      _Q16 = vmulq_f64((float64x2_t)a2, v22);
      __asm
      {
        FMLS            D16, D2, V21.D[1]
        FMLS            D16, D4, V3.D[0]
      }
      *(_QWORD *)(v6 + 48) = a2.i64[0];
      *(float64x2_t *)(v6 + 32) = v24;
      *(_QWORD *)(v6 + 72) = _Q2.i64[0];
      *(float64x2_t *)(v6 + 56) = v25;
      *(double *)(v6 + 96) = _D4;
      *(float64x2_t *)(v6 + 80) = _Q5;
      *(float64x2_t *)(v6 + 104) = vnegq_f64(v26);
      *(_QWORD *)(v6 + 120) = *(_OWORD *)&vnegq_f64(_Q16);
      v4 = *(_QWORD *)(result + 976);
    }
  }
  return result;
}

uint64_t sub_20F7CE3D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int8x16_t *a5, int a6)
{
  _QWORD *v11;
  unint64_t v13;
  float64x2_t v14;
  void *v22;
  void *v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  uint64_t **v29;
  uint64_t v30;
  uint64_t **v31;
  uint64_t v32;
  unint64_t v33;
  unsigned int v34;
  uint64_t v35;
  unint64_t v36;
  unsigned int v37;
  _OWORD *v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t v41;
  unint64_t v42;
  unsigned int v43;
  unint64_t v44;
  unsigned int v45;
  _OWORD *v46;
  uint64_t v47;
  uint64_t *v48;
  unsigned int v49;
  unsigned int v50;
  unsigned int v51;
  unsigned int v52;
  unint64_t *v53;
  unint64_t *v54;
  unint64_t *v55;
  unint64_t v56;
  unint64_t *v57;
  unint64_t v58;
  unint64_t *v59;
  unint64_t v60;
  unint64_t *v61;
  double v62;
  int8x16_t v63;
  double v64;
  double v65;
  int8x16_t v66;
  double v67;
  __int128 v68;
  __int128 v69;
  double v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  int8x16_t v77;
  int8x16_t v78;
  int8x16_t v79;
  int8x16_t v80;
  char v81;
  char *v82;
  char *v83;
  unint64_t v84;
  char *v85;
  unint64_t v86;
  unint64_t v87;
  unsigned int *v88;
  char *v89;
  unsigned int v90;
  uint64_t v91;
  unint64_t v92;
  unsigned int *v93;
  char *v94;
  unsigned int v95;
  uint64_t v96;
  char *v97;
  char *v98;
  char *v99;
  unint64_t v100;
  unint64_t v101;
  unsigned int *v102;
  char *v103;
  unsigned int v104;
  uint64_t v105;
  unint64_t v106;
  unint64_t v107;
  unsigned int *v108;
  char *v109;
  unsigned int v110;
  uint64_t v111;
  char *v112;
  uint64_t v113;
  unint64_t v114;
  unint64_t *v115;
  unint64_t *v116;
  unint64_t *v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  __int128 v130;
  __int128 v131;
  __int128 v132;
  __int128 v133;
  __int128 v134;
  __int128 v135;
  __int128 v136;
  __int128 v137;
  __int128 v138;
  __int128 v139;
  __int128 v140;
  __int128 v141;
  __int128 v142;
  __int128 v143;
  unint64_t v144;
  __int128 v145;
  uint64_t *v146;
  unint64_t *v147;
  unint64_t *v148;
  unint64_t *v149;
  __int128 v150;
  __int128 v151;
  __int128 v152;
  __int128 v153;
  __int128 v154;
  __int128 v155;
  __int128 v156;
  __int128 v157;
  __int128 v158;
  __int128 v159;
  __int128 v160;
  __int128 v161;
  __int128 v162;
  __int128 v163;
  __int128 v164;
  __int128 v165;
  __int128 v166;
  __int128 v167;
  __int128 v168;
  __int128 v169;
  __int128 v170;
  unint64_t *v171;
  __int128 v172;
  __int128 v173;
  __int128 v174;
  __int128 v175;
  unint64_t v176;
  __int128 v177;
  std::__shared_weak_count *v178;
  unint64_t *v179;
  unint64_t v180;
  unint64_t v181;
  unint64_t v182;
  unint64_t v183;
  char *v184;
  unint64_t *v185;
  int8x16_t v186;
  __int128 v187;
  __int128 v188;
  __int128 v189;
  __int128 v190;
  std::__shared_weak_count *v191;
  unint64_t *v192;
  unint64_t v193;
  unint64_t *v194;
  __int128 v195;
  __int128 v196;
  __int128 v197;
  __int128 v198;
  __int128 v199;
  __int128 v200;
  __int128 v201;
  __int128 v202;
  __int128 v203;
  __int128 v204;
  __int128 v205;
  __int128 v206;
  __int128 v207;
  __int128 v208;
  __int128 v209;
  __int128 v210;
  __int128 v211;
  __int128 v212;
  __int128 v213;
  int8x16_t v214;
  int8x16_t v215;
  __int128 v216;
  __int128 v217;
  __int128 v218;
  __int128 v219;
  __int128 v220;
  unint64_t v221;
  char *v222;
  uint64_t v223;
  unint64_t v224;
  char *v225;
  __int128 v226;
  __int128 v227;
  __int128 v228;
  __int128 v229;
  __int128 v230;
  __int128 v231;
  __int128 v232;
  __int128 v233;
  __int128 v234;
  __int128 v235;
  __int128 v236;
  __int128 v237;
  __int128 v238;
  __int128 v239;
  __int128 v240;
  int8x16_t v241;
  __int128 v242;
  __int128 v243;
  __int128 v244;
  __int128 v245;
  __int128 v246;
  __int128 v247;
  unint64_t v248;
  char *v249;
  char *v250;
  uint64_t v251;
  char *v252;
  char *v253;
  char *v254;
  __int128 v255;
  __int128 v256;
  __int128 v257;
  __int128 v258;
  __int128 v259;
  __int128 v260;
  char *v261;
  __int128 v262;
  __int128 v263;
  __int128 v264;
  __int128 v265;
  __int128 v266;
  __int128 v267;
  __int128 v268;
  __int128 v269;
  __int128 v270;
  __int128 v271;
  __int128 v272;
  __int128 v273;
  __int128 v274;
  __int128 v275;
  __int128 v276;
  __int128 v277;
  __int128 v278;
  __int128 v279;
  __int128 v280;
  __int128 v281;
  uint64_t v282;
  char *v283;
  __int128 v284;
  __int128 v285;
  __int128 v286;
  __int128 v287;
  __int128 v288;
  __int128 v289;
  __int128 v290;
  __int128 v291;
  __int128 v292;
  __int128 v293;
  __int128 v294;
  __int128 v295;
  __int128 v296;
  __int128 v297;
  __int128 v298;
  __int128 v299;
  __int128 v300;
  __int128 v301;
  __int128 v302;
  __int128 v303;
  __int128 v304;
  __int128 v305;
  __int128 v306;
  __int128 v307;
  __int128 v308;
  __int128 v309;
  uint64_t v310;
  _QWORD *v311;
  char *v312;
  uint64_t v313;
  std::__shared_weak_count *v314;
  unint64_t *p_shared_owners;
  unint64_t v316;
  std::__shared_weak_count *v317;
  unint64_t *v318;
  unint64_t v319;
  double v320;
  double v321;
  double v322;
  double v323;
  double v324;
  int8x16_t v325;
  double v326;
  int8x16_t v327;
  double v328;
  double v329;
  double v330;
  double v331;
  double v332;
  int8x16_t v333;
  int8x16_t v334;
  double v335;
  double v336;
  int8x16_t v337;
  int8x16_t v338;
  int8x16_t v339;
  double v340;
  double v341;
  int8x16_t v342;
  int8x16_t v343;
  int8x16_t v344;
  int8x16_t v345;
  double v346;
  int8x16_t v347;
  void *__p[2];
  void *__pa;
  int8x16_t v350;
  float64x2_t v351;
  float64x2_t v352;
  float64x2_t v353;
  uint64_t v354;
  __int128 v355;
  uint64_t v356;
  __int128 v357;
  int8x16_t v358;
  unint64_t v359;
  int64_t v360;
  unint64_t v361;
  std::__shared_weak_count *v362;
  int8x16_t v363;
  unint64_t *v364;
  int8x16_t v365;
  char *v366;
  uint64_t v367;
  double v369;
  double v370;
  double v371;
  double v372;
  double v373;
  double v374;
  __int128 v375;
  __int128 v376;
  _BYTE v377[48];
  _BYTE v378[48];
  _BYTE v379[48];
  _BYTE v380[32];
  unint64_t v381;
  __int128 v382;
  __int128 v383;
  __int128 v384;
  __int128 v385;
  unint64_t v386;
  __int128 v387;
  __int128 v388;
  unint64_t v389;
  _BYTE __dst[296];
  __int128 v391;
  __int128 v392;
  __int128 v393;
  __int128 v394;
  __int128 v395;
  __int128 v396;
  int8x16_t v397;
  __int128 v398;
  __int128 v399;
  int8x16_t v400;
  unint64_t v401;
  int8x16_t v402;
  unint64_t v403;
  __int128 v404;
  __int128 v405;
  __int128 v406;
  __int128 v407;
  unint64_t v408;
  __int128 v409;
  __int128 v410;
  unint64_t v411;
  unint64_t v412;
  char v413;
  __int128 v414;
  char v415;
  unint64_t v416;
  char v417;
  int8x16_t v418;
  unint64_t v419;
  __int128 v420;
  __int128 v421;
  unint64_t v422;
  __int128 v423;
  __int128 v424;
  unint64_t v425;
  int8x16_t v426;
  __int128 v427;
  __int128 v428;
  int8x16_t v429;
  unint64_t v430;
  _BYTE v431[55];
  __int128 v432;
  __int128 v433;
  __int128 v434;
  __int128 v435;
  __int128 v436;
  __int128 v437;
  __int128 v438;
  __int128 v439;
  __int128 v440;
  __int128 v441;
  __int128 v442;
  __int128 v443;
  __int128 v444;
  __int128 v445;
  __int128 v446;
  __int128 v447;
  __int128 v448;
  __int128 v449;
  __int128 v450;
  __int128 v451;
  uint64_t v452;

  v452 = *MEMORY[0x24BDAC8D0];
  v11 = *(_QWORD **)(a1 + 1008);
  *(_DWORD *)__dst = 1;
  if (sub_20F7C25CC(v11, (uint64_t *)a2, (uint64_t *)a3, (unsigned int *)__dst))
    return 1;
  if (!sub_20E9DF85C((_QWORD *)(*(_QWORD *)(a1 + 16) + 1784), (uint64_t *)a2)
    || !sub_20E9DF85C((_QWORD *)(*(_QWORD *)(a1 + 16) + 1784), (uint64_t *)a3))
  {
    return 2;
  }
  sub_20F7D0074(a1, *(_DWORD *)(a2 + 16));
  sub_20F7D0074(a1, *(_DWORD *)(a3 + 16));
  sub_20F7D0920(a1, a2);
  sub_20F7D0920(a1, a3);
  v13 = *(unsigned int *)(a1 + 1020);
  *(_DWORD *)(a1 + 1020) = v13 + 1;
  v367 = *(_QWORD *)(a1 + 976);
  v356 = *(_QWORD *)(a4 + 16);
  v354 = *(_QWORD *)(a4 + 48);
  v358 = *(int8x16_t *)(a4 + 32);
  v14.f64[1] = *(float64_t *)(a4 + 40);
  v361 = *(_QWORD *)(a4 + 80);
  v363 = *(int8x16_t *)(a4 + 64);
  v365 = *(int8x16_t *)a4;
  v14.f64[0] = *(float64_t *)(a4 + 112);
  _Q3 = *(float64x2_t *)(a4 + 96);
  _Q0 = vmulq_f64(_Q3, _Q3);
  _D1 = *(_QWORD *)(a4 + 104);
  v352 = _Q3;
  v353 = v14;
  __asm { FMLA            D0, D1, V3.D[1] }
  _Q0.f64[0] = sqrt(_Q0.f64[0] + v14.f64[0] * v14.f64[0]);
  if (_Q0.f64[0] == 0.0)
    _Q0.f64[0] = 1.0;
  else
    _Q0.f64[0] = 1.0 / _Q0.f64[0];
  v351 = _Q0;
  memcpy(__dst, a5, 0x120uLL);
  *(_QWORD *)v431 = 0;
  LODWORD(v444) = 0;
  sub_20E8BECAC();
  if ((_DWORD)v444
    || (v23 = operator new((8 * (int)*(double *)v431 + 31) & 0xFFFFFFFE0, (std::align_val_t)0x20uLL),
        sub_20E8BECAC(),
        MEMORY[0x212BC6368](v23, 0x1000C8000313F17),
        (_DWORD)v444))
  {
    v327.i64[0] = (uint64_t)v22;
    v331 = *(double *)&v22;
    v337.i64[0] = (uint64_t)v22;
    v341 = *(double *)&v22;
    v342.i64[0] = (uint64_t)v22;
    v320 = *(double *)&v22;
    v325.i64[0] = (uint64_t)v22;
    v328 = *(double *)&v22;
    v334.i64[0] = (uint64_t)v22;
    v340 = *(double *)&v22;
    v345.i64[0] = (uint64_t)v22;
    v321 = *(double *)&v22;
    v338.i64[0] = (uint64_t)v22;
    v329 = *(double *)&v22;
    v346 = *(double *)&v22;
    v336 = *(double *)&v22;
    v350.i64[0] = (uint64_t)v22;
    v322 = *(double *)&v22;
    v333.i64[0] = (uint64_t)v22;
    v326 = *(double *)&v22;
    v344.i64[0] = (uint64_t)v22;
    v332 = *(double *)&v22;
    v347.i64[0] = (uint64_t)v22;
    v323 = *(double *)&v22;
    v339.i64[0] = (uint64_t)v22;
    v324 = *(double *)&v22;
    v343.i64[0] = (uint64_t)v22;
    v330 = *(double *)&v22;
    __p[0] = v22;
    v335 = *(double *)&v22;
    v24 = v370;
    if (v369 < v370)
      goto LABEL_13;
  }
  else
  {
    v347 = *(int8x16_t *)&__dst[224];
    *(_OWORD *)__p = *(_OWORD *)&__dst[272];
    *(_QWORD *)&v335 = vextq_s8(*(int8x16_t *)__p, *(int8x16_t *)__p, 8uLL).u64[0];
    v343 = *(int8x16_t *)&__dst[256];
    v344 = *(int8x16_t *)&__dst[208];
    *(_QWORD *)&v330 = vextq_s8(v343, v343, 8uLL).u64[0];
    v338 = *(int8x16_t *)&__dst[144];
    v339 = *(int8x16_t *)&__dst[240];
    *(_QWORD *)&v324 = vextq_s8(v339, v339, 8uLL).u64[0];
    *(_QWORD *)&v323 = vextq_s8(v347, v347, 8uLL).u64[0];
    *(_QWORD *)&v332 = vextq_s8(v344, v344, 8uLL).u64[0];
    v333 = *(int8x16_t *)&__dst[192];
    *(_QWORD *)&v326 = vextq_s8(v333, v333, 8uLL).u64[0];
    v350 = *(int8x16_t *)&__dst[176];
    *(_QWORD *)&v322 = vextq_s8(v350, v350, 8uLL).u64[0];
    *(_QWORD *)&v336 = vextq_s8(*(int8x16_t *)&__dst[160], *(int8x16_t *)&__dst[160], 8uLL).u64[0];
    v345 = *(int8x16_t *)&__dst[128];
    v346 = *(double *)&__dst[160];
    *(_QWORD *)&v321 = vextq_s8(v345, v345, 8uLL).u64[0];
    v334 = *(int8x16_t *)&__dst[112];
    *(_QWORD *)&v340 = vextq_s8(v334, v334, 8uLL).u64[0];
    v325 = *(int8x16_t *)&__dst[96];
    *(_QWORD *)&v328 = vextq_s8(v325, v325, 8uLL).u64[0];
    *(_QWORD *)&v329 = vextq_s8(v338, v338, 8uLL).u64[0];
    v342 = *(int8x16_t *)&__dst[80];
    *(_QWORD *)&v320 = vextq_s8(v342, v342, 8uLL).u64[0];
    v337 = *(int8x16_t *)&__dst[64];
    *(_QWORD *)&v341 = vextq_s8(v337, v337, 8uLL).u64[0];
    v327 = *(int8x16_t *)&__dst[48];
    *(_QWORD *)&v331 = vextq_s8(v327, v327, 8uLL).u64[0];
    v24 = v370;
    if (v369 < v370)
      goto LABEL_13;
  }
  if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/VIOEpipolarFactor.hpp", 57, (uint64_t)"eig_values[0] < eig_values[1]", 29, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v24 = v370;
LABEL_13:
  if (v24 < 0.0)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/VIOEpipolarFactor.hpp", 64, (uint64_t)"eig_values[1 + i] >= 0", 22, (uint64_t)"The eigen value is small than zero", 34, (void (*)(void **))sub_21023DDB0))
    {
      goto LABEL_188;
    }
    v24 = v370;
  }
  v25 = v371;
  if (v371 < 0.0)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/VIOEpipolarFactor.hpp", 64, (uint64_t)"eig_values[1 + i] >= 0", 22, (uint64_t)"The eigen value is small than zero", 34, (void (*)(void **))sub_21023DDB0))
    {
      goto LABEL_188;
    }
    v25 = v371;
  }
  v26 = v372;
  if (v372 < 0.0)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/VIOEpipolarFactor.hpp", 64, (uint64_t)"eig_values[1 + i] >= 0", 22, (uint64_t)"The eigen value is small than zero", 34, (void (*)(void **))sub_21023DDB0))
    {
      goto LABEL_188;
    }
    v26 = v372;
  }
  v27 = v373;
  if (v373 < 0.0)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/VIOEpipolarFactor.hpp", 64, (uint64_t)"eig_values[1 + i] >= 0", 22, (uint64_t)"The eigen value is small than zero", 34, (void (*)(void **))sub_21023DDB0))
    {
      goto LABEL_188;
    }
    v27 = v373;
  }
  v28 = v374;
  if (v374 < 0.0)
  {
    if (!sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/VIOEpipolarFactor.hpp", 64, (uint64_t)"eig_values[1 + i] >= 0", 22, (uint64_t)"The eigen value is small than zero", 34, (void (*)(void **))sub_21023DDB0))
    {
      v28 = v374;
      goto LABEL_28;
    }
LABEL_188:
    abort();
  }
LABEL_28:
  v29 = (uint64_t **)(a1 + 992);
  v30 = *(_QWORD *)(a1 + 992);
  v31 = (uint64_t **)(a1 + 992);
  v32 = a1 + 992;
  if (!v30)
    goto LABEL_39;
  v33 = *(_QWORD *)a2;
  v34 = *(_DWORD *)(a2 + 8);
  v35 = *(_QWORD *)(a1 + 992);
  do
  {
    while (1)
    {
      v32 = v35;
      v36 = *(_QWORD *)(v35 + 32);
      if (v33 < v36)
        goto LABEL_30;
      if (v33 != v36)
        break;
      v37 = *(_DWORD *)(v32 + 40);
      if (v34 >= v37)
      {
        if (v37 >= v34)
          goto LABEL_53;
        goto LABEL_37;
      }
LABEL_30:
      v35 = *(_QWORD *)v32;
      v31 = (uint64_t **)v32;
      if (!*(_QWORD *)v32)
        goto LABEL_39;
    }
    if (v36 >= v33)
    {
LABEL_53:
      v38 = (_OWORD *)v32;
      goto LABEL_42;
    }
LABEL_37:
    v35 = *(_QWORD *)(v32 + 8);
  }
  while (v35);
  v31 = (uint64_t **)(v32 + 8);
LABEL_39:
  v38 = operator new(0x38uLL);
  v38[2] = *(_OWORD *)a2;
  *((_DWORD *)v38 + 12) = 0;
  *(_QWORD *)v38 = 0;
  *((_QWORD *)v38 + 1) = 0;
  *((_QWORD *)v38 + 2) = v32;
  *v31 = (uint64_t *)v38;
  v39 = **(_QWORD **)(a1 + 984);
  v40 = (uint64_t *)v38;
  if (v39)
  {
    *(_QWORD *)(a1 + 984) = v39;
    v40 = *v31;
  }
  sub_20E868578(*(uint64_t **)(a1 + 992), v40);
  ++*(_QWORD *)(a1 + 1000);
  v30 = *(_QWORD *)(a1 + 992);
  v41 = a1 + 992;
  if (v30)
  {
LABEL_42:
    v42 = *(_QWORD *)a3;
    v43 = *(_DWORD *)(a3 + 8);
    while (1)
    {
      v41 = v30;
      v44 = *(_QWORD *)(v30 + 32);
      if (v42 < v44)
        goto LABEL_43;
      if (v42 == v44)
      {
        v45 = *(_DWORD *)(v41 + 40);
        if (v43 >= v45)
        {
          if (v45 >= v43)
            goto LABEL_112;
          goto LABEL_50;
        }
LABEL_43:
        v30 = *(_QWORD *)v41;
        v29 = (uint64_t **)v41;
        if (!*(_QWORD *)v41)
          break;
      }
      else
      {
        if (v44 >= v42)
        {
LABEL_112:
          v46 = (_OWORD *)v41;
          goto LABEL_57;
        }
LABEL_50:
        v30 = *(_QWORD *)(v41 + 8);
        if (!v30)
        {
          v29 = (uint64_t **)(v41 + 8);
          break;
        }
      }
    }
  }
  v46 = operator new(0x38uLL);
  v46[2] = *(_OWORD *)a3;
  *((_DWORD *)v46 + 12) = 0;
  *(_QWORD *)v46 = 0;
  *((_QWORD *)v46 + 1) = 0;
  *((_QWORD *)v46 + 2) = v41;
  *v29 = (uint64_t *)v46;
  v47 = **(_QWORD **)(a1 + 984);
  v48 = (uint64_t *)v46;
  if (v47)
  {
    *(_QWORD *)(a1 + 984) = v47;
    v48 = *v29;
  }
  sub_20E868578(*(uint64_t **)(a1 + 992), v48);
  ++*(_QWORD *)(a1 + 1000);
LABEL_57:
  v49 = *(_DWORD *)(a2 + 16);
  v50 = *(_DWORD *)(a3 + 16);
  v51 = *((_DWORD *)v38 + 12);
  v52 = *((_DWORD *)v46 + 12);
  v53 = *(unint64_t **)(v367 + 264);
  v54 = *(unint64_t **)(v367 + 272);
  if (v53 == v54)
  {
    v55 = *(unint64_t **)(v367 + 264);
    goto LABEL_68;
  }
  v55 = *(unint64_t **)(v367 + 272);
  if (*(v54 - 80) < v13)
    goto LABEL_68;
  v56 = 0xCCCCCCCCCCCCCCCDLL * (((char *)v54 - (char *)v53) >> 7);
  v57 = *(unint64_t **)(v367 + 264);
  do
  {
    v58 = v56 >> 1;
    v59 = &v57[80 * (v56 >> 1)];
    v60 = *v59;
    v61 = v59 + 80;
    v56 += ~(v56 >> 1);
    if (v60 < v13)
      v57 = v61;
    else
      v56 = v58;
  }
  while (v56);
  v55 = *(unint64_t **)(v367 + 272);
  if (v57 == v54 || (v55 = v57, *v57 != v13))
  {
LABEL_68:
    v62 = sqrt(v24);
    *(double *)v63.i64 = v62 * v320;
    v64 = sqrt(v25);
    *(double *)&v63.i64[1] = v64 * v321;
    v65 = sqrt(v26);
    *(double *)v66.i64 = v65 * v322;
    v67 = sqrt(v27);
    *(double *)&v66.i64[1] = v67 * v323;
    *(double *)&v68 = v62 * *(double *)v327.i64;
    *((double *)&v68 + 1) = v64 * *(double *)v325.i64;
    *(double *)&v69 = v65 * *(double *)v338.i64;
    *((double *)&v69 + 1) = v67 * *(double *)v333.i64;
    v375 = v68;
    v376 = v69;
    *(double *)&v68 = v62 * v331;
    *((double *)&v68 + 1) = v64 * v328;
    *(_OWORD *)&v377[8] = v68;
    v70 = sqrt(v28);
    *(double *)v377 = v70 * *(double *)v339.i64;
    *(double *)&v377[40] = v70 * v324;
    *(double *)&v69 = v65 * v329;
    *((double *)&v69 + 1) = v67 * v326;
    *(double *)&v71 = v62 * *(double *)v337.i64;
    *((double *)&v71 + 1) = v64 * *(double *)v334.i64;
    *(_OWORD *)&v377[24] = v69;
    *(double *)&v72 = v65 * v346;
    *((double *)&v72 + 1) = v67 * *(double *)v344.i64;
    *(double *)v378 = v70 * *(double *)v343.i64;
    *(double *)&v378[40] = v70 * v330;
    v80 = (int8x16_t)vmulq_n_f64(v352, v351.f64[0]);
    *(double *)&v73 = v62 * v341;
    *(double *)&v76 = v62 * *(double *)v342.i64;
    *(double *)&v74 = v65 * v336;
    *(double *)&v75 = v65 * *(double *)v350.i64;
    *((double *)&v74 + 1) = v67 * v332;
    *((double *)&v73 + 1) = v64 * v340;
    *(_OWORD *)&v378[8] = v73;
    *(_OWORD *)&v378[24] = v74;
    *(double *)v379 = v70 * *(double *)__p;
    *((double *)&v75 + 1) = v67 * *(double *)v347.i64;
    *((double *)&v76 + 1) = v64 * *(double *)v345.i64;
    *(double *)&v379[40] = v70 * v335;
    v66.i64[1] = vextq_s8(v66, v66, 8uLL).u64[0];
    v63.i64[1] = vextq_s8(v63, v63, 8uLL).u64[0];
    *(int8x16_t *)&v379[8] = v63;
    *(int8x16_t *)&v379[24] = v66;
    v77 = v365;
    v77.i64[1] = vextq_s8(v77, v77, 8uLL).u64[0];
    v78 = v358;
    *(_QWORD *)v380 = v356;
    *(_QWORD *)&v380[24] = v354;
    v78.i64[1] = vextq_s8(v78, v78, 8uLL).u64[0];
    *(int8x16_t *)&v380[8] = v78;
    v79 = v363;
    v79.i64[1] = vextq_s8(v79, v79, 8uLL).u64[0];
    v381 = *(_OWORD *)&vmulq_f64(v353, v351);
    v80.i64[1] = vextq_s8(v80, v80, 8uLL).u64[0];
    v81 = 1;
    v82 = *(char **)(v367 + 144);
    v83 = *(char **)(v367 + 152);
    if (v83 == v82)
      goto LABEL_124;
    v366 = (char *)v55;
    v84 = (v83 - v82) >> 4;
    v85 = *(char **)(v367 + 144);
    v86 = v84;
    do
    {
      v87 = v86 >> 1;
      v88 = (unsigned int *)&v85[16 * (v86 >> 1)];
      v90 = *v88;
      v89 = (char *)(v88 + 4);
      v86 += ~(v86 >> 1);
      if (v90 < v49)
        v85 = v89;
      else
        v86 = v87;
    }
    while (v86);
    if (v85 != v83 && *(_DWORD *)v85 == v49)
    {
      v91 = *((_QWORD *)v85 + 1);
      *(_QWORD *)&v382 = v91;
      ++*(_DWORD *)(v91 + 8);
      do
      {
        v92 = v84 >> 1;
        v93 = (unsigned int *)&v82[16 * (v84 >> 1)];
        v95 = *v93;
        v94 = (char *)(v93 + 4);
        v84 += ~(v84 >> 1);
        if (v95 < v50)
          v82 = v94;
        else
          v84 = v92;
      }
      while (v84);
      if (v82 == v83 || *(_DWORD *)v82 != v50)
      {
        v105 = 0;
        v96 = 0;
      }
      else
      {
        v96 = *((_QWORD *)v82 + 1);
        *((_QWORD *)&v382 + 1) = v96;
        ++*(_DWORD *)(v96 + 8);
        v97 = *(char **)(v367 + 48);
        v98 = *(char **)(v367 + 56);
        v99 = v97;
        if (v98 != v97)
        {
          v100 = (v98 - v97) >> 4;
          v99 = *(char **)(v367 + 48);
          do
          {
            v101 = v100 >> 1;
            v102 = (unsigned int *)&v99[16 * (v100 >> 1)];
            v104 = *v102;
            v103 = (char *)(v102 + 4);
            v100 += ~(v100 >> 1);
            if (v104 < v51)
              v99 = v103;
            else
              v100 = v101;
          }
          while (v100);
        }
        if (v99 == v98 || *(_DWORD *)v99 != v51)
        {
          v105 = 0;
        }
        else
        {
          v105 = *((_QWORD *)v99 + 1);
          *(_QWORD *)&v383 = v105;
          ++*(_DWORD *)(v105 + 8);
          if (v98 != v97)
          {
            v106 = (v98 - v97) >> 4;
            do
            {
              v107 = v106 >> 1;
              v108 = (unsigned int *)&v97[16 * (v106 >> 1)];
              v110 = *v108;
              v109 = (char *)(v108 + 4);
              v106 += ~(v106 >> 1);
              if (v110 < v52)
                v97 = v109;
              else
                v106 = v107;
            }
            while (v106);
          }
          if (v97 != v98 && *(_DWORD *)v97 == v52)
          {
            v111 = *((_QWORD *)v97 + 1);
            *((_QWORD *)&v383 + 1) = v111;
            ++*(_DWORD *)(v111 + 8);
            if (*(_BYTE *)(v91 + 20) || *(_BYTE *)(v96 + 20) || *(_BYTE *)(v105 + 20) || *(_BYTE *)(v111 + 20))
            {
              *(_OWORD *)&__dst[96] = unk_2103B81E0;
              *(_OWORD *)&__dst[112] = xmmword_2103B81F0;
              *(_OWORD *)&__dst[128] = unk_2103B8200;
              *(_OWORD *)&__dst[16] = xmmword_2103B8190;
              *(_OWORD *)&__dst[32] = unk_2103B81A0;
              *(_OWORD *)&__dst[48] = xmmword_2103B81B0;
              memset(&__dst[64], 0, 32);
              v393 = v75;
              v394 = *(_OWORD *)v379;
              v395 = *(_OWORD *)&v379[16];
              v396 = *(_OWORD *)&v379[32];
              *(_OWORD *)&__dst[264] = *(_OWORD *)v378;
              *(_OWORD *)&__dst[280] = *(_OWORD *)&v378[16];
              v391 = *(_OWORD *)&v378[32];
              v392 = v76;
              *(_OWORD *)&__dst[200] = *(_OWORD *)&v377[16];
              *(_OWORD *)&__dst[216] = *(_OWORD *)&v377[32];
              *(_OWORD *)&__dst[232] = v71;
              *(_OWORD *)&__dst[248] = v72;
              *(_OWORD *)&__dst[152] = v375;
              *(_OWORD *)&__dst[168] = v376;
              *(_OWORD *)&__dst[184] = *(_OWORD *)v377;
              v399 = *(_OWORD *)&v380[16];
              v400 = v79;
              v397 = v77;
              v398 = *(_OWORD *)v380;
              v402 = v80;
              v404 = v382;
              v405 = v383;
              v406 = v384;
              v407 = v385;
              v409 = v387;
              *(_QWORD *)__dst = v13;
              *(_QWORD *)&__dst[8] = v13;
              __dst[144] = 1;
              v401 = v361;
              v403 = v381;
              v408 = v386;
              v411 = v389;
              v412 = 0xBFF0000000000000;
              v413 = 0;
              v414 = 0uLL;
              v410 = v388;
              v415 = 0;
              v112 = (char *)v55;
              if (v54 == v55 || *v55 != v13)
              {
                v113 = (char *)v55 - (char *)v53;
                v114 = *(_QWORD *)(v367 + 280);
                if ((unint64_t)v54 >= v114)
                {
                  v360 = 0xCCCCCCCCCCCCCCCDLL * (((char *)v55 - (char *)v53) >> 7);
                  v181 = 0xCCCCCCCCCCCCCCCDLL * (((char *)v54 - (char *)v53) >> 7) + 1;
                  if (v181 > 0x66666666666666)
                    sub_20E867F44();
                  v182 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v114 - (_QWORD)v53) >> 7);
                  if (2 * v182 > v181)
                    v181 = 2 * v182;
                  if (v182 >= 0x33333333333333)
                    v183 = 0x66666666666666;
                  else
                    v183 = v181;
                  *(_QWORD *)&v431[32] = v367 + 280;
                  if (v183)
                  {
                    if (v183 > 0x66666666666666)
                      sub_20E877A38();
                    v184 = (char *)operator new(640 * v183);
                    v112 = v366;
                  }
                  else
                  {
                    v184 = 0;
                  }
                  v222 = &v184[128 * ((v366 - (char *)v53) >> 7)];
                  *(_QWORD *)v431 = v184;
                  *(_QWORD *)&v431[8] = v222;
                  *(_QWORD *)&v431[16] = v222;
                  *(_QWORD *)&v431[24] = &v184[640 * v183];
                  if (v360 == v183)
                  {
                    if (v113 < 1)
                    {
                      __pa = v184;
                      if (v53 == (unint64_t *)v112)
                        v224 = 1;
                      else
                        v224 = 0x999999999999999ALL * ((v366 - (char *)v53) >> 7);
                      if (v224 > 0x66666666666666)
                        sub_20E877A38();
                      v225 = (char *)operator new(640 * v224);
                      v222 = &v225[640 * (v224 >> 2)];
                      *(_QWORD *)v431 = v225;
                      *(_QWORD *)&v431[8] = v222;
                      *(_QWORD *)&v431[24] = &v225[640 * v224];
                      if (__pa)
                        operator delete(__pa);
                      v112 = v366;
                    }
                    else
                    {
                      v223 = v360 + 2;
                      if (v360 >= -1)
                        v223 = v360 + 1;
                      v222 -= 640 * (v223 >> 1);
                      *(_QWORD *)&v431[8] = v222;
                    }
                  }
                  *(_QWORD *)v222 = v13;
                  *((_QWORD *)v222 + 1) = v13;
                  v226 = *(_OWORD *)&__dst[96];
                  *((_OWORD *)v222 + 5) = *(_OWORD *)&__dst[80];
                  *((_OWORD *)v222 + 6) = v226;
                  v227 = *(_OWORD *)&__dst[128];
                  *((_OWORD *)v222 + 7) = *(_OWORD *)&__dst[112];
                  *((_OWORD *)v222 + 8) = v227;
                  v228 = *(_OWORD *)&__dst[32];
                  *((_OWORD *)v222 + 1) = *(_OWORD *)&__dst[16];
                  *((_OWORD *)v222 + 2) = v228;
                  v229 = *(_OWORD *)&__dst[64];
                  *((_OWORD *)v222 + 3) = *(_OWORD *)&__dst[48];
                  *((_OWORD *)v222 + 4) = v229;
                  v222[144] = __dst[144];
                  v230 = *(_OWORD *)&__dst[152];
                  v231 = *(_OWORD *)&__dst[168];
                  v232 = *(_OWORD *)&__dst[200];
                  *(_OWORD *)(v222 + 184) = *(_OWORD *)&__dst[184];
                  *(_OWORD *)(v222 + 168) = v231;
                  *(_OWORD *)(v222 + 152) = v230;
                  v233 = *(_OWORD *)&__dst[216];
                  v234 = *(_OWORD *)&__dst[232];
                  v235 = *(_OWORD *)&__dst[264];
                  *(_OWORD *)(v222 + 248) = *(_OWORD *)&__dst[248];
                  *(_OWORD *)(v222 + 232) = v234;
                  *(_OWORD *)(v222 + 216) = v233;
                  *(_OWORD *)(v222 + 200) = v232;
                  v236 = *(_OWORD *)&__dst[280];
                  v237 = v392;
                  v238 = v393;
                  *(_OWORD *)(v222 + 296) = v391;
                  *(_OWORD *)(v222 + 312) = v237;
                  *(_OWORD *)(v222 + 264) = v235;
                  *(_OWORD *)(v222 + 280) = v236;
                  v239 = v394;
                  v240 = v396;
                  *(_OWORD *)(v222 + 360) = v395;
                  *(_OWORD *)(v222 + 376) = v240;
                  *(_OWORD *)(v222 + 328) = v238;
                  *(_OWORD *)(v222 + 344) = v239;
                  *((_QWORD *)v222 + 57) = v401;
                  v241 = v400;
                  *(_OWORD *)(v222 + 424) = v399;
                  *(int8x16_t *)(v222 + 440) = v241;
                  v242 = v398;
                  *(int8x16_t *)(v222 + 392) = v397;
                  *(_OWORD *)(v222 + 408) = v242;
                  *((int8x16_t *)v222 + 29) = v402;
                  *((_QWORD *)v222 + 60) = v403;
                  v243 = v405;
                  *(_OWORD *)(v222 + 488) = v404;
                  *(_OWORD *)(v222 + 504) = v243;
                  v244 = v406;
                  v245 = v407;
                  *((_QWORD *)v222 + 69) = v408;
                  *(_OWORD *)(v222 + 520) = v244;
                  *(_OWORD *)(v222 + 536) = v245;
                  v246 = v409;
                  v247 = v410;
                  *((_QWORD *)v222 + 74) = v411;
                  *((_OWORD *)v222 + 36) = v247;
                  *((_OWORD *)v222 + 35) = v246;
                  v248 = v412;
                  v222[608] = v413;
                  *((_QWORD *)v222 + 75) = v248;
                  *(_OWORD *)(v222 + 616) = v414;
                  v414 = 0uLL;
                  v222[632] = v415;
                  v249 = v222 + 640;
                  *(_QWORD *)&v431[16] = v222 + 640;
                  v250 = *(char **)(v367 + 264);
                  if (v250 != v112)
                  {
                    v251 = 0;
                    do
                    {
                      v252 = &v222[v251];
                      v253 = &v112[v251];
                      *(_QWORD *)&v222[v251 - 640] = *(_QWORD *)&v112[v251 - 640];
                      v254 = &v222[v251 - 624];
                      *(_QWORD *)&v222[v251 - 632] = *(_QWORD *)&v112[v251 - 632];
                      v255 = *(_OWORD *)&v112[v251 - 624];
                      v256 = *(_OWORD *)&v112[v251 - 608];
                      v257 = *(_OWORD *)&v112[v251 - 576];
                      *((_OWORD *)v254 + 2) = *(_OWORD *)&v112[v251 - 592];
                      *((_OWORD *)v254 + 3) = v257;
                      *(_OWORD *)v254 = v255;
                      *((_OWORD *)v254 + 1) = v256;
                      v258 = *(_OWORD *)&v112[v251 - 560];
                      v259 = *(_OWORD *)&v112[v251 - 544];
                      v260 = *(_OWORD *)&v112[v251 - 512];
                      *((_OWORD *)v254 + 6) = *(_OWORD *)&v112[v251 - 528];
                      *((_OWORD *)v254 + 7) = v260;
                      *((_OWORD *)v254 + 4) = v258;
                      *((_OWORD *)v254 + 5) = v259;
                      v222[v251 - 496] = v112[v251 - 496];
                      v261 = &v222[v251 - 488];
                      v262 = *(_OWORD *)&v112[v251 - 488];
                      v263 = *(_OWORD *)&v112[v251 - 456];
                      *((_OWORD *)v261 + 1) = *(_OWORD *)&v112[v251 - 472];
                      *((_OWORD *)v261 + 2) = v263;
                      *(_OWORD *)v261 = v262;
                      v264 = *(_OWORD *)&v112[v251 - 440];
                      v265 = *(_OWORD *)&v112[v251 - 424];
                      v266 = *(_OWORD *)&v112[v251 - 392];
                      *((_OWORD *)v261 + 5) = *(_OWORD *)&v112[v251 - 408];
                      *((_OWORD *)v261 + 6) = v266;
                      *((_OWORD *)v261 + 3) = v264;
                      *((_OWORD *)v261 + 4) = v265;
                      v267 = *(_OWORD *)&v112[v251 - 376];
                      v268 = *(_OWORD *)&v112[v251 - 360];
                      v269 = *(_OWORD *)&v112[v251 - 328];
                      *((_OWORD *)v261 + 9) = *(_OWORD *)&v112[v251 - 344];
                      *((_OWORD *)v261 + 10) = v269;
                      *((_OWORD *)v261 + 7) = v267;
                      *((_OWORD *)v261 + 8) = v268;
                      v270 = *(_OWORD *)&v112[v251 - 312];
                      v271 = *(_OWORD *)&v112[v251 - 296];
                      v272 = *(_OWORD *)&v112[v251 - 264];
                      *((_OWORD *)v261 + 13) = *(_OWORD *)&v112[v251 - 280];
                      *((_OWORD *)v261 + 14) = v272;
                      *((_OWORD *)v261 + 11) = v270;
                      *((_OWORD *)v261 + 12) = v271;
                      *(_OWORD *)(v252 - 248) = *(_OWORD *)&v112[v251 - 248];
                      v273 = *(_OWORD *)&v112[v251 - 232];
                      v274 = *(_OWORD *)&v112[v251 - 216];
                      v275 = *(_OWORD *)&v112[v251 - 200];
                      *((_QWORD *)v252 - 23) = *(_QWORD *)&v112[v251 - 184];
                      *(_OWORD *)(v252 - 200) = v275;
                      *(_OWORD *)(v252 - 216) = v274;
                      *(_OWORD *)(v252 - 232) = v273;
                      v276 = *(_OWORD *)&v112[v251 - 176];
                      *((_QWORD *)v252 - 20) = *(_QWORD *)&v112[v251 - 160];
                      *((_OWORD *)v252 - 11) = v276;
                      v277 = *(_OWORD *)&v112[v251 - 152];
                      *(_OWORD *)(v252 - 136) = *(_OWORD *)&v112[v251 - 136];
                      *(_OWORD *)(v252 - 152) = v277;
                      v278 = *(_OWORD *)&v112[v251 - 120];
                      v279 = *(_OWORD *)&v112[v251 - 104];
                      *((_QWORD *)v252 - 11) = *(_QWORD *)&v112[v251 - 88];
                      *(_OWORD *)(v252 - 104) = v279;
                      *(_OWORD *)(v252 - 120) = v278;
                      v280 = *(_OWORD *)&v112[v251 - 80];
                      v281 = *(_OWORD *)&v112[v251 - 64];
                      *((_QWORD *)v252 - 6) = *(_QWORD *)&v112[v251 - 48];
                      *((_OWORD *)v252 - 5) = v280;
                      *((_OWORD *)v252 - 4) = v281;
                      v282 = *(_QWORD *)&v112[v251 - 40];
                      *(v252 - 32) = v112[v251 - 32];
                      *((_QWORD *)v252 - 5) = v282;
                      *(_OWORD *)(v252 - 24) = *(_OWORD *)&v112[v251 - 24];
                      *((_QWORD *)v253 - 3) = 0;
                      *((_QWORD *)v253 - 2) = 0;
                      *(v252 - 8) = v112[v251 - 8];
                      v251 -= 640;
                    }
                    while (&v112[v251] != v250);
                    v222 += v251;
                  }
                  v283 = *(char **)(v367 + 272);
                  if (v283 == v112)
                  {
                    v311 = (_QWORD *)v367;
                  }
                  else
                  {
                    do
                    {
                      *(_QWORD *)v249 = *(_QWORD *)v112;
                      *((_QWORD *)v249 + 1) = *((_QWORD *)v112 + 1);
                      v284 = *((_OWORD *)v112 + 1);
                      v285 = *((_OWORD *)v112 + 2);
                      v286 = *((_OWORD *)v112 + 4);
                      *((_OWORD *)v249 + 3) = *((_OWORD *)v112 + 3);
                      *((_OWORD *)v249 + 4) = v286;
                      *((_OWORD *)v249 + 1) = v284;
                      *((_OWORD *)v249 + 2) = v285;
                      v287 = *((_OWORD *)v112 + 5);
                      v288 = *((_OWORD *)v112 + 6);
                      v289 = *((_OWORD *)v112 + 8);
                      *((_OWORD *)v249 + 7) = *((_OWORD *)v112 + 7);
                      *((_OWORD *)v249 + 8) = v289;
                      *((_OWORD *)v249 + 5) = v287;
                      *((_OWORD *)v249 + 6) = v288;
                      v249[144] = v112[144];
                      v290 = *(_OWORD *)(v112 + 152);
                      v291 = *(_OWORD *)(v112 + 168);
                      *(_OWORD *)(v249 + 184) = *(_OWORD *)(v112 + 184);
                      *(_OWORD *)(v249 + 168) = v291;
                      *(_OWORD *)(v249 + 152) = v290;
                      v292 = *(_OWORD *)(v112 + 200);
                      v293 = *(_OWORD *)(v112 + 216);
                      v294 = *(_OWORD *)(v112 + 232);
                      *(_OWORD *)(v249 + 248) = *(_OWORD *)(v112 + 248);
                      *(_OWORD *)(v249 + 232) = v294;
                      *(_OWORD *)(v249 + 216) = v293;
                      *(_OWORD *)(v249 + 200) = v292;
                      v295 = *(_OWORD *)(v112 + 264);
                      v296 = *(_OWORD *)(v112 + 280);
                      v297 = *(_OWORD *)(v112 + 312);
                      *(_OWORD *)(v249 + 296) = *(_OWORD *)(v112 + 296);
                      *(_OWORD *)(v249 + 312) = v297;
                      *(_OWORD *)(v249 + 264) = v295;
                      *(_OWORD *)(v249 + 280) = v296;
                      v298 = *(_OWORD *)(v112 + 328);
                      v299 = *(_OWORD *)(v112 + 344);
                      v300 = *(_OWORD *)(v112 + 376);
                      *(_OWORD *)(v249 + 360) = *(_OWORD *)(v112 + 360);
                      *(_OWORD *)(v249 + 376) = v300;
                      *(_OWORD *)(v249 + 328) = v298;
                      *(_OWORD *)(v249 + 344) = v299;
                      *(_OWORD *)(v249 + 392) = *(_OWORD *)(v112 + 392);
                      v301 = *(_OWORD *)(v112 + 408);
                      v302 = *(_OWORD *)(v112 + 424);
                      v303 = *(_OWORD *)(v112 + 440);
                      *((_QWORD *)v249 + 57) = *((_QWORD *)v112 + 57);
                      *(_OWORD *)(v249 + 424) = v302;
                      *(_OWORD *)(v249 + 440) = v303;
                      *(_OWORD *)(v249 + 408) = v301;
                      v304 = *((_OWORD *)v112 + 29);
                      *((_QWORD *)v249 + 60) = *((_QWORD *)v112 + 60);
                      *((_OWORD *)v249 + 29) = v304;
                      v305 = *(_OWORD *)(v112 + 504);
                      *(_OWORD *)(v249 + 488) = *(_OWORD *)(v112 + 488);
                      *(_OWORD *)(v249 + 504) = v305;
                      v306 = *(_OWORD *)(v112 + 520);
                      v307 = *(_OWORD *)(v112 + 536);
                      *((_QWORD *)v249 + 69) = *((_QWORD *)v112 + 69);
                      *(_OWORD *)(v249 + 520) = v306;
                      *(_OWORD *)(v249 + 536) = v307;
                      v308 = *((_OWORD *)v112 + 35);
                      v309 = *((_OWORD *)v112 + 36);
                      *((_QWORD *)v249 + 74) = *((_QWORD *)v112 + 74);
                      *((_OWORD *)v249 + 35) = v308;
                      *((_OWORD *)v249 + 36) = v309;
                      v310 = *((_QWORD *)v112 + 75);
                      v249[608] = v112[608];
                      *((_QWORD *)v249 + 75) = v310;
                      *((_QWORD *)v249 + 77) = *((_QWORD *)v112 + 77);
                      *((_QWORD *)v249 + 78) = *((_QWORD *)v112 + 78);
                      *(_OWORD *)(v112 + 616) = 0uLL;
                      v249[632] = v112[632];
                      v249 += 640;
                      v112 += 640;
                    }
                    while (v112 != v283);
                    v311 = (_QWORD *)v367;
                    v112 = *(char **)(v367 + 272);
                  }
                  v312 = (char *)v311[33];
                  v311[33] = v222;
                  v311[34] = v249;
                  v313 = v311[35];
                  *(_QWORD *)(v367 + 280) = *(_QWORD *)&v431[24];
                  *(_QWORD *)&v431[24] = v313;
                  *(_QWORD *)&v431[8] = v312;
                  *(_QWORD *)v431 = v312;
                  if (v112 != v312)
                  {
                    do
                    {
                      *(_QWORD *)&v431[16] = v112 - 640;
                      v314 = (std::__shared_weak_count *)*((_QWORD *)v112 - 2);
                      if (v314)
                      {
                        p_shared_owners = (unint64_t *)&v314->__shared_owners_;
                        do
                          v316 = __ldaxr(p_shared_owners);
                        while (__stlxr(v316 - 1, p_shared_owners));
                        if (!v316)
                        {
                          ((void (*)(std::__shared_weak_count *))v314->__on_zero_shared)(v314);
                          std::__shared_weak_count::__release_weak(v314);
                        }
                      }
                      v112 = *(char **)&v431[16];
                    }
                    while (*(char **)&v431[16] != v312);
                    v112 = *(char **)v431;
                  }
                  if (v112)
                    operator delete(v112);
                }
                else if (v55 == v54)
                {
                  *v54 = v13;
                  v194 = &v53[16 * (((char *)v55 - (char *)v53) >> 7)];
                  v194[1] = v13;
                  ++v194;
                  v195 = *(_OWORD *)&__dst[16];
                  v196 = *(_OWORD *)&__dst[32];
                  v197 = *(_OWORD *)&__dst[48];
                  *(_OWORD *)(v194 + 7) = *(_OWORD *)&__dst[64];
                  *(_OWORD *)(v194 + 5) = v197;
                  *(_OWORD *)(v194 + 3) = v196;
                  *(_OWORD *)(v194 + 1) = v195;
                  v198 = *(_OWORD *)&__dst[80];
                  v199 = *(_OWORD *)&__dst[96];
                  v200 = *(_OWORD *)&__dst[112];
                  *(_OWORD *)(v194 + 15) = *(_OWORD *)&__dst[128];
                  *(_OWORD *)(v194 + 13) = v200;
                  *(_OWORD *)(v194 + 11) = v199;
                  *(_OWORD *)(v194 + 9) = v198;
                  *((_BYTE *)v194 + 136) = 1;
                  v201 = *(_OWORD *)&__dst[152];
                  v202 = *(_OWORD *)&__dst[184];
                  *((_OWORD *)v194 + 10) = *(_OWORD *)&__dst[168];
                  *((_OWORD *)v194 + 11) = v202;
                  *((_OWORD *)v194 + 9) = v201;
                  v203 = *(_OWORD *)&__dst[200];
                  v204 = *(_OWORD *)&__dst[216];
                  v205 = *(_OWORD *)&__dst[248];
                  *((_OWORD *)v194 + 14) = *(_OWORD *)&__dst[232];
                  *((_OWORD *)v194 + 15) = v205;
                  *((_OWORD *)v194 + 12) = v203;
                  *((_OWORD *)v194 + 13) = v204;
                  v206 = *(_OWORD *)&__dst[264];
                  v207 = *(_OWORD *)&__dst[280];
                  v208 = v392;
                  *((_OWORD *)v194 + 18) = v391;
                  *((_OWORD *)v194 + 19) = v208;
                  *((_OWORD *)v194 + 16) = v206;
                  *((_OWORD *)v194 + 17) = v207;
                  v209 = v393;
                  v210 = v394;
                  v211 = v396;
                  *((_OWORD *)v194 + 22) = v395;
                  *((_OWORD *)v194 + 23) = v211;
                  *((_OWORD *)v194 + 20) = v209;
                  *((_OWORD *)v194 + 21) = v210;
                  *((int8x16_t *)v194 + 24) = v397;
                  v212 = v398;
                  v213 = v399;
                  v214 = v400;
                  v194[56] = v401;
                  *((_OWORD *)v194 + 26) = v213;
                  *((int8x16_t *)v194 + 27) = v214;
                  *((_OWORD *)v194 + 25) = v212;
                  v215 = v402;
                  v194[59] = v403;
                  *(int8x16_t *)(v194 + 57) = v215;
                  v216 = v405;
                  *((_OWORD *)v194 + 30) = v404;
                  *((_OWORD *)v194 + 31) = v216;
                  v217 = v406;
                  v218 = v407;
                  v194[68] = v408;
                  *((_OWORD *)v194 + 32) = v217;
                  *((_OWORD *)v194 + 33) = v218;
                  v219 = v409;
                  v220 = v410;
                  v194[73] = v411;
                  *(_OWORD *)(v194 + 71) = v220;
                  *(_OWORD *)(v194 + 69) = v219;
                  v221 = v412;
                  *((_BYTE *)v194 + 600) = v413;
                  v194[74] = v221;
                  *((_OWORD *)v194 + 38) = 0u;
                  v414 = 0uLL;
                  *((_BYTE *)v194 + 624) = 0;
                  *(_QWORD *)(v367 + 272) = v54 + 80;
                }
                else
                {
                  v359 = 0xCCCCCCCCCCCCCCCDLL * (((char *)v55 - (char *)v53) >> 7);
                  v448 = xmmword_2103B81D0;
                  v449 = unk_2103B81E0;
                  v450 = xmmword_2103B81F0;
                  v451 = unk_2103B8200;
                  v444 = xmmword_2103B8190;
                  v445 = unk_2103B81A0;
                  v446 = xmmword_2103B81B0;
                  v447 = unk_2103B81C0;
                  *(_OWORD *)&v431[39] = *(_OWORD *)v377;
                  *(_OWORD *)&v431[23] = v376;
                  *(_OWORD *)&v431[7] = v375;
                  v435 = v72;
                  v434 = v71;
                  v433 = *(_OWORD *)&v377[32];
                  v432 = *(_OWORD *)&v377[16];
                  v439 = v76;
                  v438 = *(_OWORD *)&v378[32];
                  v437 = *(_OWORD *)&v378[16];
                  v436 = *(_OWORD *)v378;
                  v443 = *(_OWORD *)&v379[32];
                  v442 = *(_OWORD *)&v379[16];
                  v441 = *(_OWORD *)v379;
                  v440 = v75;
                  v428 = *(_OWORD *)&v380[16];
                  v429 = v79;
                  v430 = v361;
                  v426 = v77;
                  v427 = *(_OWORD *)v380;
                  v418 = v80;
                  v419 = v381;
                  v355 = v405;
                  v357 = v404;
                  v425 = v386;
                  v423 = v384;
                  v424 = v385;
                  v422 = v389;
                  v420 = v387;
                  v421 = v388;
                  v417 = 0;
                  v416 = 0xBFF0000000000000;
                  v115 = v54 - 80;
                  v116 = v54;
                  v414 = 0uLL;
                  if ((unint64_t)v54 >= 0x280)
                  {
                    v117 = v54 - 80;
                    v116 = v54;
                    do
                    {
                      *v116 = *v117;
                      v116[1] = v117[1];
                      v118 = *((_OWORD *)v117 + 1);
                      v119 = *((_OWORD *)v117 + 2);
                      v120 = *((_OWORD *)v117 + 4);
                      *((_OWORD *)v116 + 3) = *((_OWORD *)v117 + 3);
                      *((_OWORD *)v116 + 4) = v120;
                      *((_OWORD *)v116 + 1) = v118;
                      *((_OWORD *)v116 + 2) = v119;
                      v121 = *((_OWORD *)v117 + 5);
                      v122 = *((_OWORD *)v117 + 6);
                      v123 = *((_OWORD *)v117 + 8);
                      *((_OWORD *)v116 + 7) = *((_OWORD *)v117 + 7);
                      *((_OWORD *)v116 + 8) = v123;
                      *((_OWORD *)v116 + 5) = v121;
                      *((_OWORD *)v116 + 6) = v122;
                      *((_BYTE *)v116 + 144) = *((_BYTE *)v117 + 144);
                      v124 = *(_OWORD *)(v117 + 19);
                      v125 = *(_OWORD *)(v117 + 21);
                      *(_OWORD *)(v116 + 23) = *(_OWORD *)(v117 + 23);
                      *(_OWORD *)(v116 + 21) = v125;
                      *(_OWORD *)(v116 + 19) = v124;
                      v126 = *(_OWORD *)(v117 + 25);
                      v127 = *(_OWORD *)(v117 + 27);
                      v128 = *(_OWORD *)(v117 + 29);
                      *(_OWORD *)(v116 + 31) = *(_OWORD *)(v117 + 31);
                      *(_OWORD *)(v116 + 29) = v128;
                      *(_OWORD *)(v116 + 27) = v127;
                      *(_OWORD *)(v116 + 25) = v126;
                      v129 = *(_OWORD *)(v117 + 33);
                      v130 = *(_OWORD *)(v117 + 35);
                      v131 = *(_OWORD *)(v117 + 39);
                      *(_OWORD *)(v116 + 37) = *(_OWORD *)(v117 + 37);
                      *(_OWORD *)(v116 + 39) = v131;
                      *(_OWORD *)(v116 + 33) = v129;
                      *(_OWORD *)(v116 + 35) = v130;
                      v132 = *(_OWORD *)(v117 + 41);
                      v133 = *(_OWORD *)(v117 + 43);
                      v134 = *(_OWORD *)(v117 + 47);
                      *(_OWORD *)(v116 + 45) = *(_OWORD *)(v117 + 45);
                      *(_OWORD *)(v116 + 47) = v134;
                      *(_OWORD *)(v116 + 41) = v132;
                      *(_OWORD *)(v116 + 43) = v133;
                      *(_OWORD *)(v116 + 49) = *(_OWORD *)(v117 + 49);
                      v135 = *(_OWORD *)(v117 + 51);
                      v136 = *(_OWORD *)(v117 + 53);
                      v137 = *(_OWORD *)(v117 + 55);
                      v116[57] = v117[57];
                      *(_OWORD *)(v116 + 53) = v136;
                      *(_OWORD *)(v116 + 55) = v137;
                      *(_OWORD *)(v116 + 51) = v135;
                      v138 = *((_OWORD *)v117 + 29);
                      v116[60] = v117[60];
                      *((_OWORD *)v116 + 29) = v138;
                      v139 = *(_OWORD *)(v117 + 63);
                      *(_OWORD *)(v116 + 61) = *(_OWORD *)(v117 + 61);
                      *(_OWORD *)(v116 + 63) = v139;
                      v140 = *(_OWORD *)(v117 + 65);
                      v141 = *(_OWORD *)(v117 + 67);
                      v116[69] = v117[69];
                      *(_OWORD *)(v116 + 65) = v140;
                      *(_OWORD *)(v116 + 67) = v141;
                      v142 = *((_OWORD *)v117 + 35);
                      v143 = *((_OWORD *)v117 + 36);
                      v116[74] = v117[74];
                      *((_OWORD *)v116 + 35) = v142;
                      *((_OWORD *)v116 + 36) = v143;
                      v144 = v117[75];
                      *((_BYTE *)v116 + 608) = *((_BYTE *)v117 + 608);
                      v116[75] = v144;
                      v116[77] = v117[77];
                      v116[78] = v117[78];
                      *(_OWORD *)(v117 + 77) = 0uLL;
                      *((_BYTE *)v116 + 632) = *((_BYTE *)v117 + 632);
                      v116 += 80;
                      v117 += 80;
                    }
                    while (v117 < v54);
                  }
                  *(_QWORD *)(v367 + 272) = v116;
                  if (v54 != v55 + 80)
                  {
                    v145 = 0uLL;
                    do
                    {
                      v147 = v115 - 80;
                      v148 = v54 - 80;
                      *v148 = *(v115 - 80);
                      *(v54 - 79) = *(v115 - 79);
                      v149 = v54 - 79;
                      v150 = *((_OWORD *)v115 - 39);
                      v151 = *((_OWORD *)v115 - 38);
                      v152 = *((_OWORD *)v115 - 36);
                      *((_OWORD *)v148 + 3) = *((_OWORD *)v115 - 37);
                      *((_OWORD *)v148 + 4) = v152;
                      *((_OWORD *)v148 + 1) = v150;
                      *((_OWORD *)v148 + 2) = v151;
                      v153 = *((_OWORD *)v115 - 35);
                      v154 = *((_OWORD *)v115 - 34);
                      v155 = *((_OWORD *)v115 - 32);
                      *((_OWORD *)v148 + 7) = *((_OWORD *)v115 - 33);
                      *((_OWORD *)v148 + 8) = v155;
                      *((_OWORD *)v148 + 5) = v153;
                      *((_OWORD *)v148 + 6) = v154;
                      *((_BYTE *)v148 + 144) = *((_BYTE *)v115 - 496);
                      v156 = *(_OWORD *)(v115 - 61);
                      v157 = *(_OWORD *)(v115 - 59);
                      *(_OWORD *)(v148 + 23) = *(_OWORD *)(v115 - 57);
                      *(_OWORD *)(v148 + 21) = v157;
                      *(_OWORD *)(v148 + 19) = v156;
                      v158 = *(_OWORD *)(v115 - 55);
                      v159 = *(_OWORD *)(v115 - 53);
                      v160 = *(_OWORD *)(v115 - 51);
                      *(_OWORD *)(v148 + 31) = *(_OWORD *)(v115 - 49);
                      *(_OWORD *)(v148 + 29) = v160;
                      *(_OWORD *)(v148 + 27) = v159;
                      *(_OWORD *)(v148 + 25) = v158;
                      v161 = *(_OWORD *)(v115 - 47);
                      v162 = *(_OWORD *)(v115 - 45);
                      v163 = *(_OWORD *)(v115 - 41);
                      *((_OWORD *)v149 + 18) = *(_OWORD *)(v115 - 43);
                      *((_OWORD *)v149 + 19) = v163;
                      *((_OWORD *)v149 + 16) = v161;
                      *((_OWORD *)v149 + 17) = v162;
                      v164 = *(_OWORD *)(v115 - 39);
                      v165 = *(_OWORD *)(v115 - 37);
                      v166 = *(_OWORD *)(v115 - 33);
                      *((_OWORD *)v149 + 22) = *(_OWORD *)(v115 - 35);
                      *((_OWORD *)v149 + 23) = v166;
                      *((_OWORD *)v149 + 20) = v164;
                      *((_OWORD *)v149 + 21) = v165;
                      *((_OWORD *)v149 + 24) = *(_OWORD *)(v115 - 31);
                      v167 = *(_OWORD *)(v115 - 29);
                      v168 = *(_OWORD *)(v115 - 27);
                      v169 = *(_OWORD *)(v115 - 25);
                      *(v54 - 23) = *(v115 - 23);
                      *((_OWORD *)v149 + 26) = v168;
                      *((_OWORD *)v149 + 27) = v169;
                      *((_OWORD *)v149 + 25) = v167;
                      v170 = *((_OWORD *)v115 - 11);
                      *(v54 - 20) = *(v115 - 20);
                      *((_OWORD *)v54 - 11) = v170;
                      *(v54 - 19) = *(v115 - 19);
                      *(v54 - 18) = *(v115 - 18);
                      *(v54 - 17) = *(v115 - 17);
                      *(v54 - 16) = *(v115 - 16);
                      v171 = v54 - 15;
                      v172 = *(_OWORD *)(v115 - 15);
                      v173 = *(_OWORD *)(v115 - 13);
                      *(v54 - 11) = *(v115 - 11);
                      *((_OWORD *)v149 + 32) = v172;
                      *((_OWORD *)v149 + 33) = v173;
                      v174 = *((_OWORD *)v115 - 5);
                      v175 = *((_OWORD *)v115 - 4);
                      *(v54 - 6) = *(v115 - 6);
                      *(_OWORD *)(v171 + 7) = v175;
                      *(_OWORD *)(v171 + 5) = v174;
                      v176 = *(v115 - 5);
                      *((_BYTE *)v54 - 32) = *((_BYTE *)v115 - 32);
                      *(v54 - 5) = v176;
                      v177 = *(_OWORD *)(v115 - 3);
                      *(_OWORD *)(v115 - 3) = v145;
                      v178 = (std::__shared_weak_count *)*(v54 - 2);
                      *((_OWORD *)v149 + 38) = v177;
                      if (v178)
                      {
                        v179 = (unint64_t *)&v178->__shared_owners_;
                        do
                          v180 = __ldaxr(v179);
                        while (__stlxr(v180 - 1, v179));
                        if (!v180)
                        {
                          v362 = v178;
                          v364 = v115;
                          ((void (*)(std::__shared_weak_count *))v178->__on_zero_shared)(v178);
                          std::__shared_weak_count::__release_weak(v362);
                          v145 = 0uLL;
                          v115 = v364;
                          v112 = v366;
                        }
                      }
                      *((_BYTE *)v54 - 8) = *((_BYTE *)v115 - 8);
                      v54 -= 80;
                      v115 = v147;
                    }
                    while (v147 != (unint64_t *)v112);
                  }
                  *(int64x2_t *)v112 = vdupq_n_s64(v13);
                  v185 = &v53[80 * v359];
                  *((_OWORD *)v185 + 5) = v448;
                  *((_OWORD *)v185 + 6) = v449;
                  *((_OWORD *)v185 + 7) = v450;
                  *((_OWORD *)v185 + 8) = v451;
                  *((_OWORD *)v185 + 1) = v444;
                  *((_OWORD *)v185 + 2) = v445;
                  *((_OWORD *)v185 + 3) = v446;
                  *((_OWORD *)v185 + 4) = v447;
                  *((_BYTE *)v185 + 144) = 1;
                  *(_OWORD *)(v185 + 41) = v440;
                  *(_OWORD *)(v185 + 43) = v441;
                  *(_OWORD *)(v185 + 45) = v442;
                  *(_OWORD *)(v185 + 47) = v443;
                  *(_OWORD *)(v185 + 33) = v436;
                  *(_OWORD *)(v185 + 35) = v437;
                  *(_OWORD *)(v185 + 37) = v438;
                  *(_OWORD *)(v185 + 39) = v439;
                  *(_OWORD *)(v185 + 25) = v432;
                  *(_OWORD *)(v185 + 27) = v433;
                  *(_OWORD *)(v185 + 29) = v434;
                  *(_OWORD *)(v185 + 31) = v435;
                  *(_OWORD *)(v185 + 19) = *(_OWORD *)&v431[7];
                  *(_OWORD *)(v185 + 21) = *(_OWORD *)&v431[23];
                  *(_OWORD *)(v185 + 23) = *(_OWORD *)&v431[39];
                  v186 = v429;
                  *(_OWORD *)(v185 + 53) = v428;
                  *(int8x16_t *)(v185 + 55) = v186;
                  v185[57] = v430;
                  v187 = v427;
                  *(int8x16_t *)(v185 + 49) = v426;
                  *(_OWORD *)(v185 + 51) = v187;
                  *((int8x16_t *)v185 + 29) = v418;
                  v185[60] = v419;
                  *(_OWORD *)(v185 + 61) = v357;
                  *(_OWORD *)(v185 + 63) = v355;
                  v188 = v423;
                  v189 = v424;
                  v185[69] = v425;
                  *(_OWORD *)(v185 + 65) = v188;
                  *(_OWORD *)(v185 + 67) = v189;
                  v190 = v421;
                  *((_OWORD *)v185 + 35) = v420;
                  *((_OWORD *)v185 + 36) = v190;
                  v185[74] = v422;
                  v185[75] = v416;
                  *((_BYTE *)v185 + 608) = v417;
                  v191 = (std::__shared_weak_count *)v185[78];
                  *(_OWORD *)(v185 + 77) = 0u;
                  if (v191)
                  {
                    v192 = (unint64_t *)&v191->__shared_owners_;
                    do
                      v193 = __ldaxr(v192);
                    while (__stlxr(v193 - 1, v192));
                    if (!v193)
                    {
                      ((void (*)(std::__shared_weak_count *))v191->__on_zero_shared)(v191);
                      std::__shared_weak_count::__release_weak(v191);
                    }
                  }
                  LOBYTE(v53[80 * v359 + 79]) = 0;
                }
                v317 = (std::__shared_weak_count *)*((_QWORD *)&v414 + 1);
                if (*((_QWORD *)&v414 + 1))
                {
                  v318 = (unint64_t *)(*((_QWORD *)&v414 + 1) + 8);
                  do
                    v319 = __ldaxr(v318);
                  while (__stlxr(v319 - 1, v318));
                  if (!v319)
                  {
                    ((void (*)(std::__shared_weak_count *))v317->__on_zero_shared)(v317);
                    std::__shared_weak_count::__release_weak(v317);
                  }
                }
              }
              *(_BYTE *)(v367 + 314) = 0;
              *(_BYTE *)(v367 + 312) = 0;
              *(int64x2_t *)(v367 + 296) = vaddq_s64(*(int64x2_t *)(v367 + 296), (int64x2_t)xmmword_2103B7590);
              v81 = 0;
              goto LABEL_124;
            }
            --*(_DWORD *)(v91 + 8);
            --*(_DWORD *)(v96 + 8);
            --*(_DWORD *)(v105 + 8);
            --*(_DWORD *)(v111 + 8);
            goto LABEL_123;
          }
        }
      }
      if (v91)
        --*(_DWORD *)(v91 + 8);
      if (v96)
        --*(_DWORD *)(v96 + 8);
      if (v105)
        --*(_DWORD *)(v105 + 8);
    }
LABEL_123:
    v81 = 1;
LABEL_124:
    if ((v81 & 1) == 0)
    {
      *(_BYTE *)(v367 + 516) = 0;
      *(_DWORD *)(v367 + 512) = 0;
    }
  }
  v146 = *(uint64_t **)(a1 + 1008);
  *(_DWORD *)__dst = 1;
  sub_20F7C2840(v146, (uint64_t *)a2, (uint64_t *)a3, (unsigned int *)__dst, v13, a4, a5, a6);
  return 0;
}

void sub_20F7D0010(_Unwind_Exception *a1)
{
  sub_20F7F3598((uint64_t)&STACK[0x888]);
  sub_20F7E40AC((uint64_t)&STACK[0x530]);
  sub_20F7E4114((uint64_t)&STACK[0x2B8]);
  sub_20E86665C((uint64_t)&STACK[0x2A8]);
  sub_20E86665C((uint64_t)&STACK[0x298]);
  _Unwind_Resume(a1);
}

void sub_20F7D004C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BC6368](v1, 0x1000C8000313F17);
  _Unwind_Resume(a1);
}

void sub_20F7D0074(uint64_t a1, unsigned int a2)
{
  float64x2_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t *v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  char *v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unsigned int *v23;
  char *v24;
  unsigned int v25;
  unint64_t v26;
  unint64_t v27;
  char *v28;
  char *v29;
  unsigned int v30;
  int64x2_t v31;
  int64x2_t v32;
  float64x2_t v33;
  double v34;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  size_t v42;
  uint64_t v43;
  void *v44;
  void *v45;
  unint64_t v46;
  char *v47;
  uint64_t (*v48)(_QWORD);
  _QWORD *v49;
  char *v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  unint64_t v54;
  char *v55;
  uint64_t (*v56)(_QWORD);
  char *v57;
  char *v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  char *v63;
  double *v64;
  const double *v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  char *v69;
  uint64_t v70;
  float64x2_t v71;
  float64x2_t v75;
  int64x2_t v76;
  float64x2_t v80;
  float64x2_t v82;
  int8x16_t v83;
  unint64_t v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  char *v89;
  __int128 *v90;
  _OWORD *v91;
  __int128 v92;
  uint64_t v93;
  _QWORD *v94;
  uint64_t v95;
  unint64_t v96;
  char *v97;
  char *v98;
  uint64_t v99;
  unint64_t v100;
  uint64_t v101;
  unint64_t v102;
  _BYTE *v103;
  unsigned int *v104;
  char *v105;
  uint64_t v106;
  int64_t v107;
  unint64_t v108;
  uint64_t v109;
  unint64_t v110;
  char *v111;
  char *v112;
  char *v113;
  unint64_t v114;
  _OWORD *v115;
  char *v116;
  char *v117;
  char *v118;
  char *i;
  __int128 v120;
  void *v121;
  unint64_t v122;
  uint64_t v123;
  uint64_t v124;
  char *v125;
  _OWORD *v126;
  char *v127;
  uint64_t v128;
  __int128 v129;
  unsigned int v130;
  unint64_t v131;
  int64x2_t v132;
  float64x2_t v133;
  double v134;
  int64x2_t v135;
  float64x2_t v136;
  int64x2_t v137;
  float64x2_t v138;
  uint64_t v139;
  uint64_t v140;
  float64x2x2_t v141;

  v5 = a1;
  v6 = *(_QWORD *)(a1 + 16);
  v7 = *(_QWORD *)(v6 + 304);
  if (!v7)
    goto LABEL_16;
  v8 = v6 + 304;
  v9 = v6 + 304;
  do
  {
    v10 = *(_DWORD *)(v7 + 32);
    _CF = v10 >= a2;
    if (v10 >= a2)
      v12 = (uint64_t *)v7;
    else
      v12 = (uint64_t *)(v7 + 8);
    if (_CF)
      v9 = v7;
    v7 = *v12;
  }
  while (*v12);
  if (v9 == v8)
  {
LABEL_16:
    v15 = 0;
    v16 = *(_QWORD *)(a1 + 976);
    v17 = *(char **)(v16 + 144);
    v18 = *(char **)(v16 + 152);
    v19 = v17;
    v20 = v18 - v17;
    if (v18 == v17)
      goto LABEL_22;
  }
  else
  {
    v13 = *(_DWORD *)(v9 + 32);
    v14 = v9 + 40;
    if (v13 <= a2)
      v15 = v14;
    else
      v15 = 0;
    v16 = *(_QWORD *)(a1 + 976);
    v17 = *(char **)(v16 + 144);
    v18 = *(char **)(v16 + 152);
    v19 = v17;
    v20 = v18 - v17;
    if (v18 == v17)
      goto LABEL_22;
  }
  v21 = v20 >> 4;
  v19 = v17;
  do
  {
    v22 = v21 >> 1;
    v23 = (unsigned int *)&v19[16 * (v21 >> 1)];
    v25 = *v23;
    v24 = (char *)(v23 + 4);
    v21 += ~(v21 >> 1);
    if (v25 < a2)
      v19 = v24;
    else
      v21 = v22;
  }
  while (v21);
LABEL_22:
  if (v19 == v18 || *(_DWORD *)v19 != a2)
  {
    if (v18 == v17)
    {
      v17 = v18;
    }
    else
    {
      v26 = (v18 - v17) >> 4;
      do
      {
        v27 = v26 >> 1;
        v28 = &v17[16 * (v26 >> 1)];
        v30 = *(_DWORD *)v28;
        v29 = v28 + 16;
        v26 += ~(v26 >> 1);
        if (v30 < a2)
          v17 = v29;
        else
          v26 = v27;
      }
      while (v26);
    }
    v31 = *(int64x2_t *)v15;
    v32 = *(int64x2_t *)(v15 + 24);
    v3.f64[0] = *(float64_t *)(v15 + 16);
    _Q17.i64[0] = *(_QWORD *)(v15 + 40);
    v33 = *(float64x2_t *)(v15 + 72);
    v34 = *(double *)(v15 + 88);
    _Q16 = *(float64x2_t *)(v15 + 48);
    _D8 = *(double *)(v15 + 64);
    if (v18 != v17 && *(_DWORD *)v17 == a2)
    {
      if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/MapOptimization/src/PoseGraphOptimizer.cpp", 268, (uint64_t)"ret.second", 10, (uint64_t)"Failed to add the camera variable: this should never happen.", 60, (void (*)(void **))sub_21023DDB0))
      {
        abort();
      }
      goto LABEL_129;
    }
    v37 = *(_QWORD *)(v16 + 224);
    if (*(_QWORD *)(v16 + 216) != v37)
    {
      v38 = *(_QWORD *)(v37 - 8);
      *(_QWORD *)(v16 + 224) = v37 - 8;
      goto LABEL_75;
    }
    v39 = *(unsigned int *)(v16 + 200);
    if ((_DWORD)v39)
    {
      v40 = *(_QWORD *)(v16 + 208);
      if (v40 < 8 << (v39 - 1))
      {
        v41 = *(_QWORD *)(*(_QWORD *)(v16 + 176) + 16 * (v39 - 1));
        *(_QWORD *)(v16 + 208) = v40 + 1;
        v38 = v41 + 224 * v40;
        goto LABEL_75;
      }
      v42 = 224 * (16 << (v39 - 1));
      v43 = *(_QWORD *)(v16 + 176);
      if (v39 == (*(_QWORD *)(v16 + 184) - v43) >> 4)
        goto LABEL_44;
    }
    else
    {
      v42 = 1792;
      v43 = *(_QWORD *)(v16 + 176);
      if (v39 == (*(_QWORD *)(v16 + 184) - v43) >> 4)
      {
LABEL_44:
        v132 = *(int64x2_t *)(v15 + 24);
        v133 = *(float64x2_t *)(v15 + 72);
        v134 = *(double *)(v15 + 88);
        v135 = *(int64x2_t *)v15;
        v136 = v3;
        v137 = _Q17;
        v138 = *(float64x2_t *)(v15 + 48);
        v44 = malloc_type_aligned_alloc(8uLL, v42, 0x8BB35E2BuLL);
        v45 = v44;
        v47 = *(char **)(v16 + 184);
        v46 = *(_QWORD *)(v16 + 192);
        if ((unint64_t)v47 >= v46)
        {
          v139 = v5;
          v50 = *(char **)(v16 + 176);
          v51 = (v47 - v50) >> 4;
          v52 = v51 + 1;
          if ((unint64_t)(v51 + 1) >> 60)
            sub_20E867F44();
          v53 = v46 - (_QWORD)v50;
          if (v53 >> 3 > v52)
            v52 = v53 >> 3;
          if ((unint64_t)v53 >= 0x7FFFFFFFFFFFFFF0)
            v54 = 0xFFFFFFFFFFFFFFFLL;
          else
            v54 = v52;
          if (v54)
          {
            if (v54 >> 60)
              goto LABEL_137;
            v55 = (char *)operator new(16 * v54);
          }
          else
          {
            v55 = 0;
          }
          v56 = MEMORY[0x24BDAE450];
          v57 = &v55[16 * v51];
          v58 = &v55[16 * v54];
          *(_QWORD *)v57 = v45;
          *((_QWORD *)v57 + 1) = v56;
          v49 = v57 + 16;
          if (v47 == v50)
          {
            *(_QWORD *)(v16 + 176) = v57;
            *(_QWORD *)(v16 + 184) = v49;
            *(_QWORD *)(v16 + 192) = v58;
            v5 = v139;
          }
          else
          {
            v59 = v47 - v50 - 16;
            v5 = v139;
            if (v59 < 0x90
              || &v47[-(v59 & 0xFFFFFFFFFFFFFFF0) - 16] < v57
              && &v55[v47 - v50 - (v59 & 0xFFFFFFFFFFFFFFF0) - 16] < v47)
            {
              goto LABEL_63;
            }
            v60 = (v59 >> 4) + 1;
            v61 = 16 * (v60 & 0x1FFFFFFFFFFFFFFELL);
            v62 = &v57[-v61];
            v63 = &v47[-v61];
            v64 = (double *)(v57 - 32);
            v65 = (const double *)(v47 - 32);
            v66 = v60 & 0x1FFFFFFFFFFFFFFELL;
            do
            {
              v141 = vld2q_f64(v65);
              v65[2] = 0.0;
              *v65 = 0.0;
              v65 -= 4;
              vst2q_f64(v64, v141);
              v64 -= 4;
              v66 -= 2;
            }
            while (v66);
            v57 = v62;
            v47 = v63;
            if (v60 != (v60 & 0x1FFFFFFFFFFFFFFELL))
            {
LABEL_63:
              v62 = v57;
              do
              {
                v67 = *((_QWORD *)v47 - 2);
                v47 -= 16;
                *(_QWORD *)v47 = 0;
                *((_QWORD *)v62 - 2) = v67;
                v62 -= 16;
                *((_QWORD *)v62 + 1) = *((_QWORD *)v47 + 1);
              }
              while (v47 != v50);
            }
            v47 = *(char **)(v16 + 176);
            v68 = *(char **)(v16 + 184);
            *(_QWORD *)(v16 + 176) = v62;
            *(_QWORD *)(v16 + 184) = v49;
            *(_QWORD *)(v16 + 192) = v58;
            if (v68 != v47)
            {
              v69 = v68;
              do
              {
                v70 = *((_QWORD *)v69 - 2);
                v69 -= 16;
                *(_QWORD *)v69 = 0;
                if (v70)
                  (*((void (**)(void))v68 - 1))();
                v68 = v69;
              }
              while (v69 != v47);
            }
          }
          if (v47)
            operator delete(v47);
        }
        else
        {
          v48 = MEMORY[0x24BDAE450];
          *(_QWORD *)v47 = v44;
          *((_QWORD *)v47 + 1) = v48;
          v49 = v47 + 16;
        }
        _Q17 = v137;
        _Q16 = v138;
        v31 = v135;
        v3 = v136;
        v33 = v133;
        v34 = v134;
        v32 = v132;
        *(_QWORD *)(v16 + 184) = v49;
        v39 = *(unsigned int *)(v16 + 200);
        v43 = *(_QWORD *)(v16 + 176);
      }
    }
    *(_DWORD *)(v16 + 200) = v39 + 1;
    *(_QWORD *)(v16 + 208) = 1;
    v38 = *(_QWORD *)(v43 + 16 * v39);
LABEL_75:
    v71 = (float64x2_t)vzip1q_s64(v31, v32);
    _Q1 = (float64x2_t)vzip2q_s64(v31, v32);
    _Q2 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v71, v33.f64[0]), _Q1, v33, 1), (float64x2_t)vzip1q_s64((int64x2_t)v3, _Q17), v34);
    _D3 = v33.f64[1];
    v75 = vnegq_f64(_Q2);
    v76 = (int64x2_t)vextq_s8((int8x16_t)vdupq_lane_s64(*(uint64_t *)&_Q1.f64[0], 0), (int8x16_t)vdupq_laneq_s64((int64x2_t)_Q1, 1), 8uLL);
    __asm { FMLA            D1, D3, V16.D[1] }
    v80 = (float64x2_t)vzip1q_s64(v31, v76);
    _Q5 = vmulq_f64(v3, v75);
    _Q1.f64[0] = _Q1.f64[0] + _D8 * v34;
    v82 = (float64x2_t)vzip2q_s64((int64x2_t)v71, v76);
    *(_QWORD *)&_Q16.f64[1] = vdupq_laneq_s64((int64x2_t)_Q16, 1).u64[0];
    __asm
    {
      FMLS            D5, D17, V2.D[1]
      FMLS            D5, D8, V1.D[0]
    }
    v83 = (int8x16_t)vnegq_f64(vmlsq_lane_f64(vmlsq_laneq_f64(vmulq_n_f64(v80, v75.f64[0]), v82, _Q2, 1), _Q16, _Q1.f64[0], 0));
    *(_DWORD *)v38 = -1;
    *(_BYTE *)(v38 + 4) = 1;
    *(_DWORD *)(v38 + 8) = 0;
    *(_QWORD *)(v38 + 16) = a2 | 0x100000000;
    *(_QWORD *)(v38 + 24) = v15;
    *(float64_t *)(v38 + 48) = v3.f64[0];
    *(_QWORD *)&v80.f64[1] = vextq_s8((int8x16_t)v80, (int8x16_t)v80, 8uLL).u64[0];
    *(float64x2_t *)(v38 + 32) = v80;
    *(_QWORD *)(v38 + 72) = _Q17.i64[0];
    *(_QWORD *)&v82.f64[1] = vextq_s8((int8x16_t)v82, (int8x16_t)v82, 8uLL).u64[0];
    *(float64x2_t *)(v38 + 56) = v82;
    *(double *)(v38 + 96) = _D8;
    *(_QWORD *)&_Q16.f64[1] = vextq_s8((int8x16_t)_Q16, (int8x16_t)_Q16, 8uLL).u64[0];
    *(float64x2_t *)(v38 + 80) = _Q16;
    *(_QWORD *)(v38 + 120) = *(_OWORD *)&vnegq_f64(_Q5);
    v83.i64[1] = vextq_s8(v83, v83, 8uLL).u64[0];
    *(int8x16_t *)(v38 + 104) = v83;
    *(_QWORD *)(v38 + 128) = 0x3FF0000000000000;
    *(_QWORD *)(v38 + 136) = 0;
    *(_QWORD *)(v38 + 144) = 0;
    *(_QWORD *)(v38 + 152) = 0;
    *(_QWORD *)(v38 + 160) = 0x3FF0000000000000;
    *(_QWORD *)(v38 + 168) = 0;
    *(_QWORD *)(v38 + 176) = 0;
    *(_QWORD *)(v38 + 184) = 0;
    *(_QWORD *)(v38 + 192) = 0x3FF0000000000000;
    *(_QWORD *)(v38 + 200) = 0;
    *(_QWORD *)(v38 + 208) = 0;
    *(_QWORD *)(v38 + 216) = 0;
    v85 = *(char **)(v16 + 144);
    v84 = *(_QWORD *)(v16 + 152);
    v86 = v17 - v85;
    v87 = (v17 - v85) >> 4;
    v18 = &v85[(v17 - v85) & 0xFFFFFFFFFFFFFFF0];
    v88 = *(_QWORD *)(v16 + 160);
    if (v84 < v88)
    {
      if (v18 == (char *)v84)
      {
        *(_DWORD *)v18 = a2;
        *((_QWORD *)v18 + 1) = v38;
        *(_QWORD *)(v16 + 152) = v18 + 16;
        v97 = *(char **)(v16 + 448);
        v96 = *(_QWORD *)(v16 + 456);
        if ((unint64_t)v97 >= v96)
        {
LABEL_83:
          v98 = *(char **)(v16 + 440);
          v99 = (v97 - v98) >> 2;
          v100 = v99 + 1;
          if ((unint64_t)(v99 + 1) >> 62)
            sub_20E867F44();
          v101 = v96 - (_QWORD)v98;
          if (v101 >> 1 > v100)
            v100 = v101 >> 1;
          if ((unint64_t)v101 >= 0x7FFFFFFFFFFFFFFCLL)
            v102 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v102 = v100;
          if (!v102)
          {
            v103 = 0;
            v104 = (unsigned int *)(4 * v99);
            v105 = 0;
            *(_DWORD *)(4 * v99) = a2;
            v106 = 4 * v99 + 4;
            v107 = v97 - v98;
            if (v97 == v98)
              goto LABEL_126;
            goto LABEL_120;
          }
          if (!(v102 >> 62))
          {
            v103 = operator new(4 * v102);
            v104 = (unsigned int *)&v103[4 * v99];
            v105 = &v103[4 * v102];
            *v104 = a2;
            v106 = (uint64_t)(v104 + 1);
            v107 = v97 - v98;
            if (v97 == v98)
            {
LABEL_126:
              *(_QWORD *)(v16 + 440) = v104;
              *(_QWORD *)(v16 + 448) = v106;
              *(_QWORD *)(v16 + 456) = v105;
              if (v98)
                operator delete(v98);
              goto LABEL_128;
            }
LABEL_120:
            v122 = v107 - 4;
            if (v122 < 0x2C)
              goto LABEL_144;
            if ((unint64_t)(v98 - v103) < 0x20)
              goto LABEL_144;
            v123 = (v122 >> 2) + 1;
            v124 = 4 * (v123 & 0x7FFFFFFFFFFFFFF8);
            v125 = &v97[-v124];
            v104 = (unsigned int *)((char *)v104 - v124);
            v126 = &v103[4 * v99 - 16];
            v127 = v97 - 16;
            v128 = v123 & 0x7FFFFFFFFFFFFFF8;
            do
            {
              v129 = *(_OWORD *)v127;
              *(v126 - 1) = *((_OWORD *)v127 - 1);
              *v126 = v129;
              v126 -= 2;
              v127 -= 32;
              v128 -= 8;
            }
            while (v128);
            v97 = v125;
            if (v123 != (v123 & 0x7FFFFFFFFFFFFFF8))
            {
LABEL_144:
              do
              {
                v130 = *((_DWORD *)v97 - 1);
                v97 -= 4;
                *--v104 = v130;
              }
              while (v97 != v98);
            }
            goto LABEL_126;
          }
LABEL_137:
          sub_20E877A38();
        }
      }
      else
      {
        v89 = v18 + 16;
        v90 = (__int128 *)(v84 - 16);
        v91 = *(_OWORD **)(v16 + 152);
        if (v84 >= 0x10)
        {
          do
          {
            v92 = *v90++;
            *v91++ = v92;
          }
          while ((unint64_t)v90 < v84);
        }
        *(_QWORD *)(v16 + 152) = v91;
        if ((char *)v84 != v89)
        {
          v93 = (uint64_t)(v84 - (_QWORD)v89) >> 4;
          v94 = (_QWORD *)(v84 - 8);
          v95 = 16 * v93;
          do
          {
            *((_DWORD *)v94 - 2) = *(_DWORD *)&v18[v95 - 16];
            *v94 = *(_QWORD *)&v18[v95 - 8];
            v94 -= 2;
            v95 -= 16;
          }
          while (v95);
        }
        *(_DWORD *)v18 = a2;
        *(_QWORD *)&v85[16 * v87 + 8] = v38;
        v97 = *(char **)(v16 + 448);
        v96 = *(_QWORD *)(v16 + 456);
        if ((unint64_t)v97 >= v96)
          goto LABEL_83;
      }
LABEL_118:
      *(_DWORD *)v97 = a2;
      v106 = (uint64_t)(v97 + 4);
LABEL_128:
      *(_QWORD *)(v16 + 448) = v106;
      *(_BYTE *)(v16 + 314) = 0;
      *(_BYTE *)(v16 + 312) = 0;
      *(_DWORD *)(v16 + 512) = 0;
      *(_BYTE *)(v16 + 516) = 0;
LABEL_129:
      *(_BYTE *)(*((_QWORD *)v18 + 1) + 20) = *(_BYTE *)(v5 + 164);
      return;
    }
    v140 = v5;
    v108 = ((uint64_t)(v84 - (_QWORD)v85) >> 4) + 1;
    if (v108 >> 60)
      sub_20E867F44();
    v109 = v88 - (_QWORD)v85;
    if (v109 >> 3 > v108)
      v108 = v109 >> 3;
    if ((unint64_t)v109 >= 0x7FFFFFFFFFFFFFF0)
      v110 = 0xFFFFFFFFFFFFFFFLL;
    else
      v110 = v108;
    if (v110)
    {
      if (v110 >> 60)
        goto LABEL_137;
      v111 = (char *)operator new(16 * v110);
      v87 = (v17 - v85) >> 4;
      v112 = &v111[16 * v87];
      v113 = &v111[16 * v110];
      if (v87 == v110)
        goto LABEL_102;
    }
    else
    {
      v111 = 0;
      v112 = (char *)(16 * v87);
      v113 = 0;
      if (!v87)
      {
LABEL_102:
        v5 = v140;
        if (v86 < 1)
        {
          if (v17 == v85)
            v131 = 1;
          else
            v131 = v86 >> 3;
          if (v131 >> 60)
            sub_20E877A38();
          v112 = (char *)operator new(16 * v131);
          v113 = &v112[16 * v131];
          if (v111)
          {
            operator delete(v111);
            v113 = &v112[16 * v131];
            v85 = *(char **)(v16 + 144);
          }
        }
        else
        {
          v114 = v87 + 2;
          if (v87 >= -1)
            v114 = v87 + 1;
          v112 -= 16 * (v114 >> 1);
        }
LABEL_110:
        *(_DWORD *)v112 = a2;
        *((_QWORD *)v112 + 1) = v38;
        v115 = v112 + 16;
        v116 = v112;
        if (v85 != v18)
        {
          v117 = v18;
          v118 = v112;
          do
          {
            v116 = v118 - 16;
            *((_OWORD *)v118 - 1) = *((_OWORD *)v117 - 1);
            v117 -= 16;
            v118 -= 16;
          }
          while (v117 != v85);
        }
        for (i = *(char **)(v16 + 152); v18 != i; ++v115)
        {
          v120 = *(_OWORD *)v18;
          v18 += 16;
          *v115 = v120;
        }
        v121 = *(void **)(v16 + 144);
        *(_QWORD *)(v16 + 144) = v116;
        *(_QWORD *)(v16 + 152) = v115;
        *(_QWORD *)(v16 + 160) = v113;
        if (v121)
          operator delete(v121);
        v18 = v112;
        v97 = *(char **)(v16 + 448);
        v96 = *(_QWORD *)(v16 + 456);
        if ((unint64_t)v97 >= v96)
          goto LABEL_83;
        goto LABEL_118;
      }
    }
    v5 = v140;
    goto LABEL_110;
  }
}

void sub_20F7D0904(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20F7D0920(uint64_t result, uint64_t a2)
{
  float64x2_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t *v9;
  unint64_t v10;
  unsigned int v11;
  uint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t **v17;
  char *v18;
  int v19;
  uint64_t **v20;
  char *v21;
  unint64_t v22;
  unsigned int v23;
  uint64_t **v24;
  uint64_t *v25;
  unint64_t v26;
  unint64_t v27;
  unsigned int v28;
  char *v29;
  unint64_t v30;
  unsigned int v31;
  char *v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  char *v36;
  unint64_t v37;
  unsigned int v38;
  unint64_t v39;
  unsigned int v40;
  char *v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  unint64_t v45;
  float64x2_t v46;
  int64x2_t v47;
  double v48;
  unint64_t v50;
  int8x16_t v52;
  unint64_t v53;
  uint64_t v54;
  __int128 *v55;
  char **v56;
  __int128 *v57;
  uint64_t v58;
  unint64_t v59;
  unint64_t v60;
  unsigned int *v61;
  __int128 *v62;
  unsigned int v63;
  float64x2_t v64;
  int8x16_t v66;
  int8x16_t v67;
  double v68;
  float64x2_t v75;
  int64x2_t v76;
  float64x2_t v77;
  float64x2_t v78;
  uint64_t v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  unint64_t v84;
  char *v85;
  uint64_t v86;
  char *v87;
  uint64_t v88;
  unint64_t v89;
  uint64_t v90;
  unint64_t v91;
  _BYTE *v92;
  _DWORD *v93;
  char *v94;
  int64_t v95;
  unint64_t v96;
  uint64_t v97;
  uint64_t v98;
  char *v99;
  _OWORD *v100;
  char *v101;
  uint64_t v102;
  __int128 v103;
  int v104;
  unint64_t v105;
  float64_t v106;
  uint64_t v107;
  float64_t v108;
  double v109;
  uint64_t v110;
  unint64_t v111;
  uint64_t v112;
  float64_t v113;
  uint64_t v114;
  unint64_t v115;
  int v116;
  uint64_t v117;

  v5 = result;
  v6 = *(_QWORD *)(result + 16);
  v9 = *(uint64_t **)(v6 + 56);
  v7 = (uint64_t *)(v6 + 56);
  v8 = v9;
  if (!v9)
    goto LABEL_18;
  v10 = *(_QWORD *)a2;
  v11 = *(_DWORD *)(a2 + 8);
  v12 = v7;
  do
  {
    v13 = v8[4];
    if (v13 < v10)
    {
      ++v8;
    }
    else if (v13 == v10)
    {
      if (*((_DWORD *)v8 + 10) < v11)
        ++v8;
      else
        v12 = v8;
    }
    else
    {
      v12 = v8;
    }
    v8 = (uint64_t *)*v8;
  }
  while (v8);
  if (v12 == v7 || (v14 = v12[4], v10 < v14) || v10 == v14 && *((_DWORD *)v12 + 10) > v11 || (v15 = v12[6]) == 0)
  {
LABEL_18:
    result = sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/MapOptimization/src/PoseGraphOptimizer.cpp", 233, (uint64_t)"state_ptr", 9, (uint64_t)"Query state does not exist in the database", 42, (void (*)(void **))sub_21023DDB0);
    if ((_DWORD)result)
      goto LABEL_72;
    v15 = 0;
    v16 = 1;
    v17 = (uint64_t **)(v5 + 992);
    v18 = *(char **)(v5 + 992);
    if (!v18)
    {
LABEL_17:
      v19 = *(_DWORD *)(v5 + 1016);
      *(_DWORD *)(v5 + 1016) = v19 + 1;
      v20 = v17;
      v21 = (char *)v17;
LABEL_42:
      v32 = v21;
      v21 = (char *)operator new(0x38uLL);
      *((_OWORD *)v21 + 2) = *(_OWORD *)a2;
      *((_DWORD *)v21 + 12) = 0;
      *(_QWORD *)v21 = 0;
      *((_QWORD *)v21 + 1) = 0;
      *((_QWORD *)v21 + 2) = v32;
      *v20 = (uint64_t *)v21;
      v33 = **(_QWORD **)(v5 + 984);
      v34 = (uint64_t *)v21;
      if (v33)
      {
        *(_QWORD *)(v5 + 984) = v33;
        v34 = *v20;
      }
      sub_20E868578(*(uint64_t **)(v5 + 992), v34);
      ++*(_QWORD *)(v5 + 1000);
      v18 = *(char **)(v5 + 992);
LABEL_45:
      *((_DWORD *)v21 + 12) = v19;
      v35 = *(_QWORD *)(v5 + 976);
      v36 = (char *)v17;
      if (v18)
      {
        v37 = *(_QWORD *)a2;
        v38 = *(_DWORD *)(a2 + 8);
        while (1)
        {
          v36 = v18;
          v39 = *((_QWORD *)v18 + 4);
          if (v37 < v39)
            goto LABEL_47;
          if (v37 != v39)
          {
            if (v39 >= v37)
              goto LABEL_59;
            goto LABEL_54;
          }
          v40 = *((_DWORD *)v36 + 10);
          if (v38 < v40)
          {
LABEL_47:
            v18 = *(char **)v36;
            v17 = (uint64_t **)v36;
            if (!*(_QWORD *)v36)
              break;
          }
          else
          {
            if (v40 >= v38)
              goto LABEL_59;
LABEL_54:
            v18 = (char *)*((_QWORD *)v36 + 1);
            if (!v18)
            {
              v17 = (uint64_t **)(v36 + 8);
              break;
            }
          }
        }
      }
      v41 = v36;
      v36 = (char *)operator new(0x38uLL);
      *((_OWORD *)v36 + 2) = *(_OWORD *)a2;
      *((_DWORD *)v36 + 12) = 0;
      *(_QWORD *)v36 = 0;
      *((_QWORD *)v36 + 1) = 0;
      *((_QWORD *)v36 + 2) = v41;
      *v17 = (uint64_t *)v36;
      v42 = **(_QWORD **)(v5 + 984);
      v43 = (uint64_t *)v36;
      if (v42)
      {
        *(_QWORD *)(v5 + 984) = v42;
        v43 = *v17;
      }
      sub_20E868578(*(uint64_t **)(v5 + 992), v43);
      ++*(_QWORD *)(v5 + 1000);
LABEL_59:
      v44 = *((unsigned int *)v36 + 12);
      if ((v16 & 1) != 0)
      {
        v45 = 0;
        v46.f64[0] = 1.0;
        v2.f64[0] = 0.0;
        v47.i64[0] = 0;
        v48 = 1.0;
        _Q20.i64[0] = 0;
        _Q19.f64[0] = 0.0;
        v50 = 0;
        _D8 = 1.0;
        v52.i64[0] = 0;
        v53 = 0;
        v54 = 0;
        v57 = *(__int128 **)(v35 + 48);
        v55 = *(__int128 **)(v35 + 56);
        v56 = (char **)(v35 + 48);
        v58 = (char *)v55 - (char *)v57;
        if (v55 != v57)
        {
LABEL_61:
          v59 = v58 >> 4;
          do
          {
            v60 = v59 >> 1;
            v61 = (unsigned int *)&v57[v59 >> 1];
            v63 = *v61;
            v62 = (__int128 *)(v61 + 4);
            v59 += ~(v59 >> 1);
            if (v63 < v44)
              v57 = v62;
            else
              v59 = v60;
          }
          while (v59);
          if (v55 != v57 && (_DWORD)v44 == *(_DWORD *)v57)
          {
            if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/MapOptimization/src/PoseGraphOptimizer.cpp", 249, (uint64_t)"ret", 3, (uint64_t)"Failed to add the state variable: this should never happen.", 59, (void (*)(void **))sub_21023DDB0))
            {
LABEL_72:
              abort();
            }
            return sub_20F7C2444(*(uint64_t **)(v5 + 1008), (uint64_t *)a2);
          }
LABEL_73:
          v107 = v47.i64[0];
          v108 = v2.f64[0];
          v113 = _Q19.f64[0];
          v114 = v52.i64[0];
          v109 = v48;
          v110 = _Q20.i64[0];
          v105 = v45;
          v106 = v46.f64[0];
          v111 = v50;
          v115 = v53;
          v112 = v54;
          v80 = sub_20F3E2BCC(v35 + 72);
          *(_DWORD *)v80 = -1;
          *(_BYTE *)(v80 + 4) = 1;
          *(_DWORD *)(v80 + 8) = 0;
          *(_QWORD *)(v80 + 16) = v44 | 0x100000000;
          *(_QWORD *)(v80 + 24) = v15;
          *(float64_t *)&v81 = v106;
          *((_QWORD *)&v81 + 1) = v105;
          *(float64_t *)&v82 = v108;
          *((_QWORD *)&v82 + 1) = v107;
          *(_OWORD *)(v80 + 32) = v81;
          *(_OWORD *)(v80 + 48) = v82;
          *(double *)&v83 = v109;
          *((_QWORD *)&v83 + 1) = v110;
          *(float64_t *)&v82 = v113;
          *((_QWORD *)&v82 + 1) = v111;
          *(double *)(v80 + 96) = _D8;
          *(_OWORD *)(v80 + 64) = v83;
          *(_OWORD *)(v80 + 80) = v82;
          *(_QWORD *)(v80 + 120) = v112;
          *(_QWORD *)&v82 = v114;
          *((_QWORD *)&v82 + 1) = v115;
          *(_OWORD *)(v80 + 104) = v82;
          *(_OWORD *)(v80 + 128) = xmmword_2102DD520;
          *(_QWORD *)(v80 + 144) = 0;
          *(_QWORD *)(v80 + 152) = 0;
          *(_QWORD *)(v80 + 160) = 0;
          *(_QWORD *)(v80 + 168) = 0x3FF0000000000000;
          *(_QWORD *)(v80 + 176) = 0;
          *(_QWORD *)(v80 + 184) = 0;
          *(_QWORD *)(v80 + 192) = 0;
          *(_QWORD *)(v80 + 200) = 0x3FF0000000000000;
          *(_QWORD *)(v80 + 216) = 0;
          *(_QWORD *)(v80 + 224) = 0;
          *(_QWORD *)(v80 + 208) = 0;
          v116 = v44;
          v117 = v80;
          sub_20F3E2964(v56, v57, (uint64_t)&v116);
          v85 = *(char **)(v35 + 424);
          v84 = *(_QWORD *)(v35 + 432);
          if ((unint64_t)v85 < v84)
          {
            *(_DWORD *)v85 = v44;
            v86 = (uint64_t)(v85 + 4);
LABEL_97:
            *(_QWORD *)(v35 + 424) = v86;
            *(_BYTE *)(v35 + 314) = 0;
            *(_BYTE *)(v35 + 312) = 0;
            *(_DWORD *)(v35 + 512) = 0;
            *(_BYTE *)(v35 + 516) = 0;
            return sub_20F7C2444(*(uint64_t **)(v5 + 1008), (uint64_t *)a2);
          }
          v87 = *(char **)(v35 + 416);
          v88 = (v85 - v87) >> 2;
          v89 = v88 + 1;
          if ((unint64_t)(v88 + 1) >> 62)
            sub_20E867F44();
          v90 = v84 - (_QWORD)v87;
          if (v90 >> 1 > v89)
            v89 = v90 >> 1;
          if ((unint64_t)v90 >= 0x7FFFFFFFFFFFFFFCLL)
            v91 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v91 = v89;
          if (v91)
          {
            if (v91 >> 62)
              sub_20E877A38();
            v92 = operator new(4 * v91);
            v93 = &v92[4 * v88];
            v94 = &v92[4 * v91];
            *v93 = v44;
            v86 = (uint64_t)(v93 + 1);
            v95 = v85 - v87;
            if (v85 == v87)
              goto LABEL_95;
          }
          else
          {
            v92 = 0;
            v93 = (_DWORD *)(4 * v88);
            v94 = 0;
            *(_DWORD *)(4 * v88) = v44;
            v86 = 4 * v88 + 4;
            v95 = v85 - v87;
            if (v85 == v87)
            {
LABEL_95:
              *(_QWORD *)(v35 + 416) = v93;
              *(_QWORD *)(v35 + 424) = v86;
              *(_QWORD *)(v35 + 432) = v94;
              if (v87)
                operator delete(v87);
              goto LABEL_97;
            }
          }
          v96 = v95 - 4;
          if (v96 < 0x2C)
            goto LABEL_104;
          if ((unint64_t)(v87 - v92) < 0x20)
            goto LABEL_104;
          v97 = (v96 >> 2) + 1;
          v98 = 4 * (v97 & 0x7FFFFFFFFFFFFFF8);
          v99 = &v85[-v98];
          v93 = (_DWORD *)((char *)v93 - v98);
          v100 = &v92[4 * v88 - 16];
          v101 = v85 - 16;
          v102 = v97 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            v103 = *(_OWORD *)v101;
            *(v100 - 1) = *((_OWORD *)v101 - 1);
            *v100 = v103;
            v100 -= 2;
            v101 -= 32;
            v102 -= 8;
          }
          while (v102);
          v85 = v99;
          if (v97 != (v97 & 0x7FFFFFFFFFFFFFF8))
          {
LABEL_104:
            do
            {
              v104 = *((_DWORD *)v85 - 1);
              v85 -= 4;
              *--v93 = v104;
            }
            while (v85 != v87);
          }
          goto LABEL_95;
        }
      }
      else
      {
        v2.f64[0] = *(float64_t *)(v15 + 16);
        _Q20.i64[0] = *(_QWORD *)(v15 + 40);
        v47 = *(int64x2_t *)(v15 + 24);
        _D8 = *(double *)(v15 + 64);
        _Q19 = *(float64x2_t *)(v15 + 48);
        v64 = (float64x2_t)vzip1q_s64(*(int64x2_t *)v15, v47);
        _Q2 = (float64x2_t)vzip2q_s64(*(int64x2_t *)v15, v47);
        v66 = (int8x16_t)vdupq_laneq_s64((int64x2_t)_Q2, 1);
        v67 = (int8x16_t)vdupq_lane_s64(*(uint64_t *)&_Q2.f64[0], 0);
        v68 = *(double *)(v15 + 88);
        _Q17 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v64, *(double *)(v15 + 72)), _Q2, *(float64x2_t *)(v15 + 72), 1), (float64x2_t)vzip1q_s64((int64x2_t)v2, _Q20), v68);
        _D5 = *(_QWORD *)(v15 + 80);
        __asm { FMLA            D2, D5, V19.D[1] }
        _Q2.f64[0] = _Q2.f64[0] + _D8 * v68;
        v75 = vnegq_f64(_Q17);
        v76 = (int64x2_t)vextq_s8(v67, v66, 8uLL);
        v46 = (float64x2_t)vzip1q_s64(*(int64x2_t *)v15, v76);
        v77 = (float64x2_t)vzip2q_s64((int64x2_t)v64, v76);
        *(_QWORD *)&_Q19.f64[1] = vdupq_laneq_s64((int64x2_t)_Q19, 1).u64[0];
        v48 = *(double *)(v15 + 32);
        v45 = vextq_s8((int8x16_t)v46, (int8x16_t)v46, 8uLL).u64[0];
        v50 = vextq_s8((int8x16_t)_Q19, (int8x16_t)_Q19, 8uLL).u64[0];
        v78 = vmlsq_lane_f64(vmlsq_laneq_f64(vmulq_n_f64(v46, v75.f64[0]), v77, _Q17, 1), _Q19, _Q2.f64[0], 0);
        _Q0 = vmulq_f64(v2, v75);
        __asm
        {
          FMLS            D0, D20, V17.D[1]
          FMLS            D0, D8, V2.D[0]
        }
        v52 = (int8x16_t)vnegq_f64(v78);
        v53 = vextq_s8(v52, v52, 8uLL).u64[0];
        v54 = *(_OWORD *)&vnegq_f64(_Q0);
        v57 = *(__int128 **)(v35 + 48);
        v55 = *(__int128 **)(v35 + 56);
        v56 = (char **)(v35 + 48);
        v58 = (char *)v55 - (char *)v57;
        if (v55 != v57)
          goto LABEL_61;
      }
      v57 = v55;
      goto LABEL_73;
    }
  }
  else
  {
    v16 = 0;
    v17 = (uint64_t **)(result + 992);
    v18 = *(char **)(result + 992);
    if (!v18)
      goto LABEL_17;
  }
  v22 = *(_QWORD *)a2;
  v23 = *(_DWORD *)(a2 + 8);
  v24 = v17;
  v25 = (uint64_t *)v18;
  do
  {
    v26 = v25[4];
    if (v26 < v22)
    {
      ++v25;
    }
    else if (v26 == v22)
    {
      if (*((_DWORD *)v25 + 10) < v23)
        ++v25;
      else
        v24 = (uint64_t **)v25;
    }
    else
    {
      v24 = (uint64_t **)v25;
    }
    v25 = (uint64_t *)*v25;
  }
  while (v25);
  if (v24 == v17 || (v27 = (unint64_t)v24[4], v22 < v27) || v22 == v27 && v23 < *((_DWORD *)v24 + 10))
  {
    v19 = *(_DWORD *)(v5 + 1016);
    *(_DWORD *)(v5 + 1016) = v19 + 1;
    v28 = *(_DWORD *)(a2 + 8);
    v29 = v18;
    while (1)
    {
      v21 = v29;
      v30 = *((_QWORD *)v29 + 4);
      if (v22 < v30)
        goto LABEL_32;
      if (v22 != v30)
      {
        if (v30 >= v22)
          goto LABEL_45;
        goto LABEL_39;
      }
      v31 = *((_DWORD *)v21 + 10);
      if (v28 < v31)
      {
LABEL_32:
        v29 = *(char **)v21;
        if (!*(_QWORD *)v21)
        {
          v20 = (uint64_t **)v21;
          goto LABEL_42;
        }
      }
      else
      {
        if (v31 >= v28)
          goto LABEL_45;
LABEL_39:
        v29 = (char *)*((_QWORD *)v21 + 1);
        if (!v29)
        {
          v20 = (uint64_t **)(v21 + 8);
          goto LABEL_42;
        }
      }
    }
  }
  return result;
}

uint64_t sub_20F7D0FF8(uint64_t a1, uint64_t a2, uint64_t a3, __int128 *a4, double *a5, int a6)
{
  _QWORD *v12;
  uint64_t v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t *v17;
  unint64_t v18;
  unsigned int v19;
  uint64_t *v20;
  uint64_t *v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unsigned int v25;
  uint64_t *v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  uint64_t **v35;
  uint64_t **v36;
  char *v37;
  char *v38;
  unint64_t v39;
  unsigned int v40;
  char *v41;
  unint64_t v42;
  unsigned int v43;
  char *v44;
  uint64_t v45;
  uint64_t *v46;
  char *v47;
  unint64_t v48;
  unsigned int v49;
  unint64_t v50;
  unsigned int v51;
  char *v52;
  uint64_t v53;
  uint64_t *v54;
  uint64_t *v55;
  int v56;
  uint64_t v57;
  unint64_t v58;
  __int128 v59;
  uint64_t v60;
  __int128 v61;
  __int128 v62;
  uint64_t v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  __int128 v72;
  __int128 v73;
  uint64_t v74;
  uint64_t v75;
  __int128 v76;
  __int128 v77;
  uint64_t v78;
  uint64_t v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  _BYTE v83[288];
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  char v92;
  _OWORD v93[20];

  v12 = *(_QWORD **)(a1 + 1008);
  LODWORD(v58) = 0;
  v59 = *(_OWORD *)a2;
  LODWORD(v60) = -1;
  v93[0] = *(_OWORD *)a3;
  LODWORD(v93[1]) = -1;
  if (sub_20F7C25CC(v12, (uint64_t *)&v59, (uint64_t *)v93, (unsigned int *)&v58))
    return 1;
  v14 = *(_QWORD *)(a1 + 16);
  v17 = *(uint64_t **)(v14 + 56);
  v15 = (uint64_t *)(v14 + 56);
  v16 = v17;
  if (!v17)
    return 2;
  v18 = *(_QWORD *)a2;
  v19 = *(_DWORD *)(a2 + 8);
  v20 = v15;
  v21 = v16;
  do
  {
    v22 = v21[4];
    if (v22 < v18)
    {
      ++v21;
    }
    else if (v22 == v18)
    {
      if (*((_DWORD *)v21 + 10) < v19)
        ++v21;
      else
        v20 = v21;
    }
    else
    {
      v20 = v21;
    }
    v21 = (uint64_t *)*v21;
  }
  while (v21);
  if (v20 == v15)
    return 2;
  v23 = v20[4];
  if (v18 < v23 || v18 == v23 && *((_DWORD *)v20 + 10) > v19)
    return 2;
  if (!v20[6])
    return 2;
  v24 = *(_QWORD *)a3;
  v25 = *(_DWORD *)(a3 + 8);
  v26 = v15;
  do
  {
    v27 = v16[4];
    if (v27 < v24)
    {
      ++v16;
    }
    else if (v27 == v24)
    {
      if (*((_DWORD *)v16 + 10) < v25)
        ++v16;
      else
        v26 = v16;
    }
    else
    {
      v26 = v16;
    }
    v16 = (uint64_t *)*v16;
  }
  while (v16);
  if (v26 == v15)
    return 2;
  v28 = v26[4];
  if (v24 < v28 || v24 == v28 && *((_DWORD *)v26 + 10) > v25)
    return 2;
  if (!v26[6])
    return 2;
  sub_20F7D0920(a1, a2);
  sub_20F7D0920(a1, a3);
  if (*a5 + a5[7] + a5[14] + a5[21] + a5[28] + a5[35] <= 0.0
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/MapOptimization/src/PoseGraphOptimizer.cpp", 153, (uint64_t)"JtJ.trace() > 0.", 16, (uint64_t)"Invalid JtJ", 11, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v29 = *(unsigned int *)(a1 + 1020);
  *(_DWORD *)(a1 + 1020) = v29 + 1;
  v56 = v29;
  v57 = *(_QWORD *)(a1 + 976);
  *(_QWORD *)&v59 = v29;
  memcpy(v83, a5, sizeof(v83));
  v30 = a4[5];
  v88 = a4[4];
  v89 = v30;
  v31 = a4[7];
  v90 = a4[6];
  v91 = v31;
  v32 = a4[1];
  v84 = *a4;
  v85 = v32;
  v33 = a4[2];
  v34 = a4[3];
  v92 = 1;
  *(_QWORD *)&v93[0] = 2;
  v86 = v33;
  v87 = v34;
  memcpy((char *)v93 + 8, a5, 0x120uLL);
  sub_20F215978((uint64_t)v93);
  v60 = *((_QWORD *)&v93[0] + 1);
  v61 = 0u;
  v62 = 0u;
  v63 = 0;
  v64 = *(_OWORD *)((char *)&v93[3] + 8);
  v65 = 0u;
  v66 = 0u;
  v67 = *(_OWORD *)((char *)&v93[6] + 8);
  v68 = *((_QWORD *)&v93[7] + 1);
  v69 = 0;
  v70 = 0;
  v72 = *(_OWORD *)((char *)&v93[9] + 8);
  v73 = *(_OWORD *)((char *)&v93[10] + 8);
  v74 = 0;
  v75 = 0;
  v71 = 0;
  v76 = *(_OWORD *)((char *)&v93[12] + 8);
  v77 = *(_OWORD *)((char *)&v93[13] + 8);
  v78 = *((_QWORD *)&v93[14] + 1);
  v79 = 0;
  v80 = *(_OWORD *)((char *)&v93[15] + 8);
  v81 = *(_OWORD *)((char *)&v93[16] + 8);
  v82 = *(_OWORD *)((char *)&v93[17] + 8);
  v35 = (uint64_t **)(a1 + 992);
  v36 = (uint64_t **)(a1 + 992);
  v37 = (char *)(a1 + 992);
  v38 = *(char **)(a1 + 992);
  if (!v38)
    goto LABEL_46;
  v39 = *(_QWORD *)a2;
  v40 = *(_DWORD *)(a2 + 8);
  v41 = *(char **)(a1 + 992);
  do
  {
    while (1)
    {
      v37 = v41;
      v42 = *((_QWORD *)v41 + 4);
      if (v39 < v42)
        goto LABEL_37;
      if (v39 != v42)
        break;
      v43 = *((_DWORD *)v37 + 10);
      if (v40 >= v43)
      {
        if (v43 >= v40)
          goto LABEL_49;
        goto LABEL_44;
      }
LABEL_37:
      v41 = *(char **)v37;
      v36 = (uint64_t **)v37;
      if (!*(_QWORD *)v37)
        goto LABEL_46;
    }
    if (v42 >= v39)
      goto LABEL_49;
LABEL_44:
    v41 = (char *)*((_QWORD *)v37 + 1);
  }
  while (v41);
  v36 = (uint64_t **)(v37 + 8);
LABEL_46:
  v44 = v37;
  v37 = (char *)operator new(0x38uLL);
  *((_OWORD *)v37 + 2) = *(_OWORD *)a2;
  *((_DWORD *)v37 + 12) = 0;
  *(_QWORD *)v37 = 0;
  *((_QWORD *)v37 + 1) = 0;
  *((_QWORD *)v37 + 2) = v44;
  *v36 = (uint64_t *)v37;
  v45 = **(_QWORD **)(a1 + 984);
  v46 = (uint64_t *)v37;
  if (v45)
  {
    *(_QWORD *)(a1 + 984) = v45;
    v46 = *v36;
  }
  sub_20E868578(*(uint64_t **)(a1 + 992), v46);
  ++*(_QWORD *)(a1 + 1000);
  v38 = *(char **)(a1 + 992);
LABEL_49:
  v47 = (char *)(a1 + 992);
  if (v38)
  {
    v48 = *(_QWORD *)a3;
    v49 = *(_DWORD *)(a3 + 8);
    while (1)
    {
      v47 = v38;
      v50 = *((_QWORD *)v38 + 4);
      if (v48 < v50)
        goto LABEL_51;
      if (v48 != v50)
      {
        if (v50 >= v48)
          goto LABEL_63;
        goto LABEL_58;
      }
      v51 = *((_DWORD *)v47 + 10);
      if (v49 < v51)
      {
LABEL_51:
        v38 = *(char **)v47;
        v35 = (uint64_t **)v47;
        if (!*(_QWORD *)v47)
          break;
      }
      else
      {
        if (v51 >= v49)
          goto LABEL_63;
LABEL_58:
        v38 = (char *)*((_QWORD *)v47 + 1);
        if (!v38)
        {
          v35 = (uint64_t **)(v47 + 8);
          break;
        }
      }
    }
  }
  v52 = v47;
  v47 = (char *)operator new(0x38uLL);
  *((_OWORD *)v47 + 2) = *(_OWORD *)a3;
  *((_DWORD *)v47 + 12) = 0;
  *(_QWORD *)v47 = 0;
  *((_QWORD *)v47 + 1) = 0;
  *((_QWORD *)v47 + 2) = v52;
  *v35 = (uint64_t *)v47;
  v53 = **(_QWORD **)(a1 + 984);
  v54 = (uint64_t *)v47;
  if (v53)
  {
    *(_QWORD *)(a1 + 984) = v53;
    v54 = *v35;
  }
  sub_20E868578(*(uint64_t **)(a1 + 992), v54);
  ++*(_QWORD *)(a1 + 1000);
LABEL_63:
  v58 = *((unsigned int *)v37 + 12) | ((unint64_t)*((unsigned int *)v47 + 12) << 32);
  v93[0] = 0uLL;
  if ((sub_20F7F3624((int64x2_t *)(v57 + 40), (uint64_t *)&v59, (unsigned int *)&v58, 0, 0) & 1) != 0)
  {
    *(_BYTE *)(v57 + 516) = 0;
    *(_DWORD *)(v57 + 512) = 0;
  }
  v55 = *(uint64_t **)(a1 + 1008);
  LODWORD(v59) = 0;
  sub_20F7C2800(v55, (__int128 *)a2, (__int128 *)a3, (unsigned int *)&v59, v56, (uint64_t)a4, (int8x16_t *)a5, a6);
  return 0;
}

void sub_20F7D1510(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_20E86665C((uint64_t)&STACK[0x310]);
  sub_20E86665C((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20F7D152C(uint64_t a1, __int128 *a2, void *__src, uint64_t a4)
{
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  uint64_t v19;
  _OWORD v20[18];

  *(_QWORD *)a1 = a4;
  memcpy((void *)(a1 + 304), __src, 0x120uLL);
  v7 = *a2;
  v8 = a2[1];
  v9 = a2[3];
  *(_OWORD *)(a1 + 624) = a2[2];
  *(_OWORD *)(a1 + 640) = v9;
  *(_OWORD *)(a1 + 592) = v7;
  *(_OWORD *)(a1 + 608) = v8;
  v10 = a2[4];
  v11 = a2[5];
  v12 = a2[7];
  *(_OWORD *)(a1 + 688) = a2[6];
  *(_OWORD *)(a1 + 704) = v12;
  *(_OWORD *)(a1 + 656) = v10;
  *(_OWORD *)(a1 + 672) = v11;
  *(_BYTE *)(a1 + 720) = 1;
  v19 = 2;
  memcpy(v20, __src, sizeof(v20));
  sub_20F215978((uint64_t)&v19);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)&v20[0];
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_QWORD *)(a1 + 56) = 0;
  *(_OWORD *)(a1 + 64) = v20[3];
  *(_OWORD *)(a1 + 80) = 0u;
  v13 = v20[6];
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = v13;
  *(_QWORD *)&v13 = *(_QWORD *)&v20[14];
  *(_QWORD *)(a1 + 128) = *(_QWORD *)&v20[7];
  *(_QWORD *)(a1 + 144) = 0;
  *(_QWORD *)(a1 + 152) = 0;
  *(_QWORD *)(a1 + 136) = 0;
  v14 = v20[10];
  *(_OWORD *)(a1 + 160) = v20[9];
  *(_OWORD *)(a1 + 176) = v14;
  *(_QWORD *)(a1 + 192) = 0;
  *(_QWORD *)(a1 + 200) = 0;
  v15 = v20[13];
  *(_OWORD *)(a1 + 208) = v20[12];
  *(_OWORD *)(a1 + 224) = v15;
  *(_QWORD *)(a1 + 240) = v13;
  *(_QWORD *)(a1 + 248) = 0;
  v16 = v20[16];
  v17 = v20[17];
  *(_OWORD *)(a1 + 256) = v20[15];
  *(_OWORD *)(a1 + 272) = v16;
  *(_OWORD *)(a1 + 288) = v17;
  return a1;
}

uint64_t sub_20F7D1640(uint64_t a1, uint64_t a2, uint64_t a3, __int128 *a4, double *a5, int a6)
{
  _QWORD *v12;
  unsigned int *v13;
  char v14;
  uint64_t *v15;
  uint64_t **v16;
  unint64_t v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v29;
  int v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  size_t v35;
  const char *v36;
  unsigned __int8 v37;
  unsigned __int8 v38;
  const char *v39;
  size_t v40;
  _BYTE *v41;
  unint64_t v42;
  const char *v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _BYTE *v49;
  uint64_t v50;
  uint64_t v51;
  NSObject *v52;
  size_t v53;
  std::__shared_weak_count_vtbl *v54;
  std::__shared_weak_count *v55;
  std::__shared_weak_count *v56;
  unint64_t *p_shared_owners;
  unint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  std::__shared_weak_count *v65;
  unint64_t *v66;
  unint64_t v67;
  std::__shared_weak_count *v68;
  unint64_t *v69;
  unint64_t v70;
  char *v71;
  std::__shared_weak_count *v72;
  unint64_t *v73;
  unint64_t v74;
  std::__shared_weak_count *v75;
  unint64_t *v76;
  unint64_t v77;
  std::__shared_weak_count *v78;
  unint64_t *v79;
  unint64_t v80;
  std::__shared_weak_count *v81;
  unint64_t *v82;
  unint64_t v83;
  void *v84;
  float64_t v85;
  unint64_t *v86;
  unint64_t v87;
  uint64_t v88;
  _QWORD *v89;
  _QWORD *v90;
  unint64_t v91;
  unint64_t v92;
  unint64_t *v93;
  unint64_t v94;
  _QWORD *v95;
  _QWORD *v96;
  _QWORD *v97;
  unint64_t v98;
  unsigned int v99;
  int v100;
  unint64_t v101;
  uint64_t v102;
  uint64_t *v103;
  char *v104;
  char *v105;
  _OWORD *v106;
  uint64_t v107;
  uint64_t *v108;
  uint64_t **v109;
  uint64_t *v110;
  unint64_t v111;
  unsigned int v112;
  unint64_t v113;
  unsigned int v114;
  _OWORD *v115;
  uint64_t v116;
  uint64_t *v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  double v122;
  double v123;
  double v124;
  double v125;
  double v126;
  int8x16_t v127;
  __int128 v128;
  __int128 v129;
  __int128 v130;
  __int128 v131;
  __int128 v132;
  __int128 v133;
  int v134;
  uint64_t **v135;
  uint64_t *v136;
  unint64_t v137;
  unsigned int v138;
  unint64_t v139;
  unsigned int v140;
  _OWORD *v141;
  uint64_t v142;
  uint64_t *v143;
  uint64_t *v144;
  uint64_t v145;
  unint64_t v146;
  unsigned int v147;
  unint64_t v148;
  unsigned int v149;
  _OWORD *v150;
  uint64_t v151;
  uint64_t *v152;
  __int128 v153;
  __int128 v154;
  __int128 v155;
  __int128 v156;
  __int128 v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  __int128 v163;
  __int128 v164;
  __int128 v165;
  __int128 v166;
  __int128 v167;
  __int128 v168;
  __int128 v169;
  __int128 v170;
  _QWORD *v171;
  uint64_t v172;
  __int128 v173;
  __int128 v174;
  __int128 v175;
  __int128 v176;
  __int128 v177;
  __int128 v178;
  __int128 v179;
  __int128 v180;
  uint64_t v181;
  _QWORD *v182;
  unsigned __int8 v183;
  uint64_t v184;
  const char *v185;
  NSObject *v186;
  uint64_t **v187;
  int v188;
  int v189;
  unint64_t v190;
  _BYTE object[304];
  _BYTE v192[288];
  __int128 v193;
  __int128 v194;
  __int128 v195;
  __int128 v196;
  __int128 v197;
  __int128 v198;
  __int128 v199;
  __int128 v200;
  char v201;
  __int128 v202;
  __int128 v203;
  uint64_t v204;
  __int128 v205;
  __int128 v206;
  char *category[2];
  __int128 v208;
  uint64_t v209;
  float64x2_t __dst[18];
  __int128 v211;
  __int128 v212;
  __int128 v213;
  __int128 v214;
  __int128 v215;
  __int128 v216;
  __int128 v217;
  __int128 v218;
  uint64_t v219;

  v219 = *MEMORY[0x24BDAC8D0];
  v12 = *(_QWORD **)(a1 + 1008);
  LODWORD(v211) = 0;
  *(_OWORD *)object = *(_OWORD *)a2;
  *(_DWORD *)&object[16] = -1;
  __dst[0] = *(float64x2_t *)a3;
  LODWORD(__dst[1].f64[0]) = -1;
  v13 = (unsigned int *)sub_20F7C4798(v12, (uint64_t *)object, (uint64_t)__dst, (unsigned int *)&v211);
  if (!v14)
    return sub_20F7D0FF8(a1, a2, a3, a4, a5, a6);
  v15 = *(uint64_t **)(a1 + 992);
  if (!v15)
    goto LABEL_28;
  v16 = (uint64_t **)(a1 + 992);
  v17 = *(_QWORD *)a2;
  v18 = *(_DWORD *)(a2 + 8);
  v19 = a1 + 992;
  v20 = *(_QWORD *)(a1 + 992);
  do
  {
    v21 = *(_QWORD *)(v20 + 32);
    if (v21 < v17)
    {
      v20 += 8;
    }
    else if (v21 == v17)
    {
      if (*(_DWORD *)(v20 + 40) < v18)
        v20 += 8;
      else
        v19 = v20;
    }
    else
    {
      v19 = v20;
    }
    v20 = *(_QWORD *)v20;
  }
  while (v20);
  if ((uint64_t **)v19 == v16)
    goto LABEL_28;
  v22 = *(_QWORD *)(v19 + 32);
  if (v17 < v22 || v17 == v22 && v18 < *(_DWORD *)(v19 + 40))
    goto LABEL_28;
  v23 = *(_QWORD *)a3;
  v24 = *(_DWORD *)(a3 + 8);
  v25 = a1 + 992;
  v26 = *(_QWORD *)(a1 + 992);
  do
  {
    v27 = *(_QWORD *)(v26 + 32);
    if (v27 < v23)
    {
      v26 += 8;
    }
    else if (v27 == v23)
    {
      if (*(_DWORD *)(v26 + 40) < v24)
        v26 += 8;
      else
        v25 = v26;
    }
    else
    {
      v25 = v26;
    }
    v26 = *(_QWORD *)v26;
  }
  while (v26);
  if ((uint64_t **)v25 == v16 || (v29 = *(_QWORD *)(v25 + 32), v23 < v29) || v23 == v29 && v24 < *(_DWORD *)(v25 + 40))
  {
LABEL_28:
    sub_20F7D2884(&v205);
    if (**(int **)(v205 + 56) > 5)
      return 2;
    v30 = *(unsigned __int8 *)(v205 + 72);
    v31 = sub_20E8C31DC(v205, "OSLogSurrogateAppender", 1, 0);
    v32 = v31;
    if (!v30 && !v31)
      return 2;
    *(_QWORD *)&__dst[0].f64[0] = &v205;
    *(std::chrono::steady_clock::time_point *)&__dst[0].f64[1] = (std::chrono::steady_clock::time_point)std::chrono::steady_clock::now().__d_.__rep_;
    *(std::chrono::system_clock::time_point *)&__dst[1].f64[0] = (std::chrono::system_clock::time_point)std::chrono::system_clock::now().__d_.__rep_;
    LODWORD(__dst[1].f64[1]) = 5;
    *(_QWORD *)&__dst[2].f64[0] = "unknown file";
    LODWORD(__dst[2].f64[1]) = 185;
    __dst[4].f64[0] = 0.0;
    *(_QWORD *)&__dst[3].f64[0] = "unknown function";
    __dst[3].f64[1] = 0.0;
    v33 = **(_QWORD **)&__dst[0].f64[0];
    v34 = **(_QWORD **)&__dst[0].f64[0] + 16;
    if (*(char *)(**(_QWORD **)&__dst[0].f64[0] + 39) < 0)
    {
      v36 = *(const char **)(v33 + 16);
      v35 = *(_QWORD *)(v33 + 24);
      v38 = atomic_load((unsigned __int8 *)&qword_254A4A510);
      if ((v38 & 1) != 0)
        goto LABEL_35;
    }
    else
    {
      v35 = *(unsigned __int8 *)(**(_QWORD **)&__dst[0].f64[0] + 39);
      v36 = (const char *)(**(_QWORD **)&__dst[0].f64[0] + 16);
      v37 = atomic_load((unsigned __int8 *)&qword_254A4A510);
      if ((v37 & 1) != 0)
        goto LABEL_35;
    }
    if (__cxa_guard_acquire(&qword_254A4A510))
    {
      sub_20E9E46F8((uint64_t)object);
      sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)object);
      if (object[24] && (object[23] & 0x80000000) != 0)
        operator delete(*(void **)object);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
      __cxa_guard_release(&qword_254A4A510);
    }
LABEL_35:
    if (byte_254A4A4F8[23] >= 0)
      v39 = byte_254A4A4F8;
    else
      v39 = *(const char **)byte_254A4A4F8;
    if (byte_254A4A4F8[23] >= 0)
      v40 = byte_254A4A4F8[23];
    else
      v40 = *(_QWORD *)&byte_254A4A4F8[8];
    *(_QWORD *)object = os_log_create(v39, v36);
    v41 = &object[8];
    if (v40 > 0x7FFFFFFFFFFFFFF7)
      sub_20E860B7C();
    if (v40 >= 0x17)
    {
      v42 = v32;
      v43 = v36;
      v44 = v33;
      v45 = v30;
      v46 = v34;
      v47 = (v40 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v40 | 7) != 0x17)
        v47 = v40 | 7;
      v48 = v47 + 1;
      v41 = operator new(v47 + 1);
      *(_QWORD *)&object[16] = v40;
      *(_QWORD *)&object[24] = v48 | 0x8000000000000000;
      *(_QWORD *)&object[8] = v41;
      v34 = v46;
      v30 = v45;
      v33 = v44;
      v36 = v43;
      v32 = v42;
    }
    else
    {
      object[31] = v40;
      if (!v40)
      {
LABEL_49:
        v41[v40] = 0;
        object[32] = 1;
        v49 = &object[40];
        if (v35 > 0x7FFFFFFFFFFFFFF7)
          sub_20E860B7C();
        if (v35 >= 0x17)
        {
          v50 = (v35 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v35 | 7) != 0x17)
            v50 = v35 | 7;
          v51 = v50 + 1;
          v49 = operator new(v50 + 1);
          *(_QWORD *)&object[48] = v35;
          *(_QWORD *)&object[56] = v51 | 0x8000000000000000;
          *(_QWORD *)&object[40] = v49;
        }
        else
        {
          object[63] = v35;
          if (!v35)
            goto LABEL_57;
        }
        memmove(v49, v36, v35);
LABEL_57:
        v49[v35] = 0;
        object[64] = 1;
        v52 = *(NSObject **)object;
        if ((object[63] & 0x80000000) != 0)
          operator delete(*(void **)&object[40]);
        if (object[32] && (object[31] & 0x80000000) != 0)
          operator delete(*(void **)&object[8]);
        if (*(_QWORD *)object)
          os_release(*(void **)object);
        if (v32 && *(_QWORD *)(v32 + 24))
        {
          v53 = _os_log_pack_size();
          v54 = (std::__shared_weak_count_vtbl *)operator new(v53, (std::align_val_t)8uLL);
          v55 = (std::__shared_weak_count *)operator new();
          v56 = v55;
          v55->__shared_owners_ = 0;
          p_shared_owners = (unint64_t *)&v55->__shared_owners_;
          v55->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
          v55->__shared_weak_owners_ = 0;
          v55[1].__vftable = v54;
          *(_QWORD *)object = v54;
          *(_QWORD *)&object[8] = v54;
          *(_QWORD *)&object[16] = v55;
          do
            v58 = __ldxr(p_shared_owners);
          while (__stxr(v58 + 1, p_shared_owners));
          memset(&object[24], 0, 24);
          do
            v59 = __ldaxr(p_shared_owners);
          while (__stlxr(v59 - 1, p_shared_owners));
          if (!v59)
          {
            ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
            std::__shared_weak_count::__release_weak(v56);
          }
          v60 = *(_QWORD *)object;
          *(_WORD *)_os_log_pack_fill() = 0;
          v61 = operator new();
          v62 = *(unsigned __int8 *)(v33 + 39);
          if ((v62 & 0x80u) == 0)
            v63 = v34;
          else
            v63 = *(_QWORD *)(v33 + 16);
          if ((v62 & 0x80u) != 0)
            v62 = *(_QWORD *)(v33 + 24);
          *(_QWORD *)v61 = v60;
          *(_OWORD *)(v61 + 8) = *(_OWORD *)&object[8];
          *(_QWORD *)&object[8] = 0;
          *(_QWORD *)&object[16] = 0;
          *(_OWORD *)(v61 + 24) = *(_OWORD *)&object[24];
          *(_OWORD *)&object[24] = 0uLL;
          *(_QWORD *)(v61 + 40) = v63;
          *(_QWORD *)(v61 + 48) = v62;
          *(_BYTE *)(v61 + 56) = 16;
          category[0] = 0;
          *(_QWORD *)&v211 = v61;
          (*(void (**)(_QWORD, __int128 *))(**(_QWORD **)(v32 + 24) + 40))(*(_QWORD *)(v32 + 24), &v211);
          v64 = v211;
          *(_QWORD *)&v211 = 0;
          if (v64)
          {
            v65 = *(std::__shared_weak_count **)(v64 + 32);
            if (v65)
            {
              v66 = (unint64_t *)&v65->__shared_owners_;
              do
                v67 = __ldaxr(v66);
              while (__stlxr(v67 - 1, v66));
              if (!v67)
              {
                ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
                std::__shared_weak_count::__release_weak(v65);
              }
            }
            v68 = *(std::__shared_weak_count **)(v64 + 16);
            if (v68)
            {
              v69 = (unint64_t *)&v68->__shared_owners_;
              do
                v70 = __ldaxr(v69);
              while (__stlxr(v70 - 1, v69));
              if (!v70)
              {
                ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
                std::__shared_weak_count::__release_weak(v68);
              }
            }
            MEMORY[0x212BC6398](v64, 0x10F0C40B62ED6C6);
            v71 = category[0];
            category[0] = 0;
            if (v71)
            {
              v72 = (std::__shared_weak_count *)*((_QWORD *)v71 + 4);
              if (v72)
              {
                v73 = (unint64_t *)&v72->__shared_owners_;
                do
                  v74 = __ldaxr(v73);
                while (__stlxr(v74 - 1, v73));
                if (!v74)
                {
                  ((void (*)(std::__shared_weak_count *))v72->__on_zero_shared)(v72);
                  std::__shared_weak_count::__release_weak(v72);
                }
              }
              v75 = (std::__shared_weak_count *)*((_QWORD *)v71 + 2);
              if (v75)
              {
                v76 = (unint64_t *)&v75->__shared_owners_;
                do
                  v77 = __ldaxr(v76);
                while (__stlxr(v77 - 1, v76));
                if (!v77)
                {
                  ((void (*)(std::__shared_weak_count *))v75->__on_zero_shared)(v75);
                  std::__shared_weak_count::__release_weak(v75);
                }
              }
              MEMORY[0x212BC6398](v71, 0x10F0C40B62ED6C6);
            }
          }
          v78 = *(std::__shared_weak_count **)&object[32];
          if (*(_QWORD *)&object[32])
          {
            v79 = (unint64_t *)(*(_QWORD *)&object[32] + 8);
            do
              v80 = __ldaxr(v79);
            while (__stlxr(v80 - 1, v79));
            if (!v80)
            {
              ((void (*)(std::__shared_weak_count *))v78->__on_zero_shared)(v78);
              std::__shared_weak_count::__release_weak(v78);
            }
          }
          v81 = *(std::__shared_weak_count **)&object[16];
          if (*(_QWORD *)&object[16])
          {
            v82 = (unint64_t *)(*(_QWORD *)&object[16] + 8);
            do
              v83 = __ldaxr(v82);
            while (__stlxr(v83 - 1, v82));
            if (!v83)
            {
              ((void (*)(std::__shared_weak_count *))v81->__on_zero_shared)(v81);
              std::__shared_weak_count::__release_weak(v81);
            }
          }
        }
        else
        {
          os_log_type_enabled(v52, OS_LOG_TYPE_ERROR);
          *(_WORD *)object = 0;
          v84 = (void *)_os_log_send_and_compose_impl();
          if (v84)
            free(v84);
        }
        if (v30)
        {
          sub_20E8C003C((uint64_t)__dst, "Unable to find variable in linear system in replacing pose to pose constraint.");
          sub_20E863570((uint64_t)__dst);
        }
        sub_20E863570((uint64_t)__dst);
        v85 = __dst[4].f64[0];
        if (*(_QWORD *)&__dst[4].f64[0])
        {
          v86 = (unint64_t *)(*(_QWORD *)&__dst[4].f64[0] + 8);
          do
            v87 = __ldaxr(v86);
          while (__stlxr(v87 - 1, v86));
          if (!v87)
          {
            (*(void (**)(float64_t))(**(_QWORD **)&v85 + 16))(COERCE_FLOAT64_T(*(_QWORD *)&v85));
            std::__shared_weak_count::__release_weak(*(std::__shared_weak_count **)&v85);
          }
        }
        return 2;
      }
    }
    memmove(v41, v39, v40);
    goto LABEL_49;
  }
  v190 = *v13;
  v88 = *(_QWORD *)(a1 + 976);
  v90 = *(_QWORD **)(v88 + 240);
  v89 = *(_QWORD **)(v88 + 248);
  if (v89 != v90)
  {
    v91 = 0xB195E8EFDB195E8FLL * (v89 - v90);
    do
    {
      v92 = v91 >> 1;
      v93 = &v90[111 * (v91 >> 1)];
      v94 = *v93;
      v95 = v93 + 111;
      v91 += ~(v91 >> 1);
      if (v94 < v190)
        v90 = v95;
      else
        v91 = v92;
    }
    while (v91);
  }
  if (v89 == v90 || *v90 != v190)
  {
    sub_20F7D2884(&v205);
    if (**(int **)(v205 + 56) <= 5)
    {
      v100 = *(unsigned __int8 *)(v205 + 72);
      v101 = sub_20E8C31DC(v205, "OSLogSurrogateAppender", 1, 0);
      v102 = v101 ? v101 + 16 : 0;
      if (v100 || v101)
      {
        *(_QWORD *)&__dst[0].f64[0] = &v205;
        *(std::chrono::steady_clock::time_point *)&__dst[0].f64[1] = (std::chrono::steady_clock::time_point)std::chrono::steady_clock::now().__d_.__rep_;
        *(std::chrono::system_clock::time_point *)&__dst[1].f64[0] = (std::chrono::system_clock::time_point)std::chrono::system_clock::now().__d_.__rep_;
        LODWORD(__dst[1].f64[1]) = 5;
        *(_QWORD *)&__dst[2].f64[0] = "unknown file";
        LODWORD(__dst[2].f64[1]) = 194;
        __dst[4].f64[0] = 0.0;
        *(_QWORD *)&__dst[3].f64[0] = "unknown function";
        __dst[3].f64[1] = 0.0;
        v103 = (uint64_t *)(v205 + 16);
        if (*(char *)(v205 + 39) < 0)
        {
          v105 = *(char **)(v205 + 16);
          v104 = *(char **)(v205 + 24);
        }
        else
        {
          v104 = (char *)*(unsigned __int8 *)(v205 + 39);
          v105 = (char *)(v205 + 16);
        }
        category[0] = v105;
        category[1] = v104;
        v183 = atomic_load((unsigned __int8 *)&qword_254A4A510);
        if ((v183 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
        {
          sub_20E9E46F8((uint64_t)object);
          sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)object);
          if (object[24] && (object[23] & 0x80000000) != 0)
            operator delete(*(void **)object);
          __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
          __cxa_guard_release(&qword_254A4A510);
        }
        v184 = byte_254A4A4F8[23];
        if (byte_254A4A4F8[23] >= 0)
        {
          v185 = byte_254A4A4F8;
        }
        else
        {
          v184 = *(_QWORD *)&byte_254A4A4F8[8];
          v185 = *(const char **)byte_254A4A4F8;
        }
        *(_QWORD *)&v211 = v185;
        *((_QWORD *)&v211 + 1) = v184;
        *(_QWORD *)object = os_log_create(v185, category[0]);
        sub_20E86E5A8(&object[8], (uint64_t)&v211);
        sub_20E86E5A8(&object[40], (uint64_t)category);
        v186 = *(NSObject **)object;
        sub_20E86E44C((uint64_t)object);
        sub_20F7F44DC(v102, v103, v186, OS_LOG_TYPE_ERROR);
        if (v100)
        {
          sub_20E8C003C((uint64_t)__dst, "Unable to find factor in linear system in replacing pose to pose constraint.");
          sub_20E863570((uint64_t)__dst);
        }
        sub_20E863714((uint64_t)__dst);
      }
    }
    return 2;
  }
  v188 = *(_DWORD *)(v90[92] + 16);
  v189 = *(_DWORD *)(v90[93] + 16);
  v96 = *(_QWORD **)(a1 + 992);
  do
  {
    while (1)
    {
      v97 = v96;
      v98 = v96[4];
      if (v17 < v98)
        break;
      if (v17 != v98)
      {
        if (v98 >= v17)
        {
LABEL_152:
          v106 = v97;
          goto LABEL_153;
        }
        goto LABEL_138;
      }
      v99 = *((_DWORD *)v97 + 10);
      if (v18 < v99)
        break;
      if (v99 >= v18)
        goto LABEL_152;
LABEL_138:
      v96 = (_QWORD *)v97[1];
      if (!v96)
      {
        v187 = (uint64_t **)(v97 + 1);
        goto LABEL_149;
      }
    }
    v96 = (_QWORD *)*v97;
  }
  while (*v97);
  v187 = (uint64_t **)v97;
LABEL_149:
  v106 = operator new(0x38uLL);
  v106[2] = *(_OWORD *)a2;
  *((_DWORD *)v106 + 12) = 0;
  *(_QWORD *)v106 = 0;
  *((_QWORD *)v106 + 1) = 0;
  *((_QWORD *)v106 + 2) = v97;
  *v187 = (uint64_t *)v106;
  v107 = **(_QWORD **)(a1 + 984);
  v108 = (uint64_t *)v106;
  if (v107)
  {
    *(_QWORD *)(a1 + 984) = v107;
    v108 = *v187;
  }
  sub_20E868578(*(uint64_t **)(a1 + 992), v108);
  ++*(_QWORD *)(a1 + 1000);
  v15 = *(uint64_t **)(a1 + 992);
LABEL_153:
  if (*((_DWORD *)v106 + 12) == v189)
  {
    v109 = (uint64_t **)(a1 + 992);
    v110 = (uint64_t *)(a1 + 992);
    if (v15)
    {
      v111 = *(_QWORD *)a3;
      v112 = *(_DWORD *)(a3 + 8);
      while (1)
      {
        v110 = v15;
        v113 = v15[4];
        if (v111 < v113)
          goto LABEL_156;
        if (v111 != v113)
        {
          if (v113 >= v111)
            goto LABEL_168;
          goto LABEL_163;
        }
        v114 = *((_DWORD *)v110 + 10);
        if (v112 < v114)
        {
LABEL_156:
          v15 = (uint64_t *)*v110;
          v109 = (uint64_t **)v110;
          if (!*v110)
            break;
        }
        else
        {
          if (v114 >= v112)
            goto LABEL_168;
LABEL_163:
          v15 = (uint64_t *)v110[1];
          if (!v15)
          {
            v109 = (uint64_t **)(v110 + 1);
            break;
          }
        }
      }
    }
    v115 = operator new(0x38uLL);
    v115[2] = *(_OWORD *)a3;
    *((_DWORD *)v115 + 12) = 0;
    *(_QWORD *)v115 = 0;
    *((_QWORD *)v115 + 1) = 0;
    *((_QWORD *)v115 + 2) = v110;
    *v109 = (uint64_t *)v115;
    v116 = **(_QWORD **)(a1 + 984);
    v110 = (uint64_t *)v115;
    v117 = (uint64_t *)v115;
    if (v116)
    {
      *(_QWORD *)(a1 + 984) = v116;
      v117 = *v109;
    }
    sub_20E868578(*(uint64_t **)(a1 + 992), v117);
    ++*(_QWORD *)(a1 + 1000);
LABEL_168:
    if (*((_DWORD *)v110 + 12) == v188)
    {
      v118 = a4[5];
      v215 = a4[4];
      v216 = v118;
      v119 = a4[7];
      v217 = a4[6];
      v218 = v119;
      v120 = a4[1];
      v211 = *a4;
      v212 = v120;
      v121 = a4[3];
      v213 = a4[2];
      v214 = v121;
      memcpy(__dst, a5, sizeof(__dst));
      sub_20FC89580((uint64_t)&v211, __dst, v122, v123, v124, v125, v126, v127);
      sub_20F7D152C((uint64_t)object, &v211, __dst, v190);
      *(_OWORD *)(v90 + 1) = *(_OWORD *)object;
      memcpy(v90 + 3, &object[16], 0x120uLL);
      memcpy(v90 + 39, v192, 0x120uLL);
      v128 = v196;
      v130 = v193;
      v129 = v194;
      *(_OWORD *)(v90 + 79) = v195;
      *(_OWORD *)(v90 + 81) = v128;
      *(_OWORD *)(v90 + 75) = v130;
      *(_OWORD *)(v90 + 77) = v129;
      v131 = v200;
      v133 = v197;
      v132 = v198;
      *(_OWORD *)(v90 + 87) = v199;
      *(_OWORD *)(v90 + 89) = v131;
      *(_OWORD *)(v90 + 83) = v133;
      *(_OWORD *)(v90 + 85) = v132;
      *((_BYTE *)v90 + 728) = v201;
      v134 = v190;
      goto LABEL_202;
    }
    v15 = *v16;
  }
  v135 = (uint64_t **)(a1 + 992);
  v136 = (uint64_t *)(a1 + 992);
  if (v15)
  {
    v137 = *(_QWORD *)a2;
    v138 = *(_DWORD *)(a2 + 8);
    while (1)
    {
      v136 = v15;
      v139 = v15[4];
      if (v137 < v139)
        goto LABEL_173;
      if (v137 != v139)
      {
        if (v139 >= v137)
          goto LABEL_185;
        goto LABEL_180;
      }
      v140 = *((_DWORD *)v136 + 10);
      if (v138 < v140)
      {
LABEL_173:
        v15 = (uint64_t *)*v136;
        v135 = (uint64_t **)v136;
        if (!*v136)
          break;
      }
      else
      {
        if (v140 >= v138)
          goto LABEL_185;
LABEL_180:
        v15 = (uint64_t *)v136[1];
        if (!v15)
        {
          v135 = (uint64_t **)(v136 + 1);
          break;
        }
      }
    }
  }
  v141 = operator new(0x38uLL);
  v141[2] = *(_OWORD *)a2;
  *((_DWORD *)v141 + 12) = 0;
  *(_QWORD *)v141 = 0;
  *((_QWORD *)v141 + 1) = 0;
  *((_QWORD *)v141 + 2) = v136;
  *v135 = (uint64_t *)v141;
  v142 = **(_QWORD **)(a1 + 984);
  v136 = (uint64_t *)v141;
  v143 = (uint64_t *)v141;
  if (v142)
  {
    *(_QWORD *)(a1 + 984) = v142;
    v143 = *v135;
  }
  sub_20E868578(*(uint64_t **)(a1 + 992), v143);
  ++*(_QWORD *)(a1 + 1000);
LABEL_185:
  if (*((_DWORD *)v136 + 12) != v188)
  {
LABEL_200:
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/MapOptimization/src/PoseGraphOptimizer.cpp", 213, (uint64_t)"state_id_to_variable_id_map_[state_id0] == state_var_id0 && state_id_to_variable_id_map_[state_id1] == state_var_id1", 116, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    goto LABEL_201;
  }
  v144 = *v16;
  v145 = a1 + 992;
  if (!*v16)
  {
LABEL_197:
    v150 = operator new(0x38uLL);
    v150[2] = *(_OWORD *)a3;
    *((_DWORD *)v150 + 12) = 0;
    *(_QWORD *)v150 = 0;
    *((_QWORD *)v150 + 1) = 0;
    *((_QWORD *)v150 + 2) = v145;
    *v16 = (uint64_t *)v150;
    v151 = **(_QWORD **)(a1 + 984);
    v152 = (uint64_t *)v150;
    if (v151)
    {
      *(_QWORD *)(a1 + 984) = v151;
      v152 = *v16;
    }
    sub_20E868578(*(uint64_t **)(a1 + 992), v152);
    ++*(_QWORD *)(a1 + 1000);
    if (*((_DWORD *)v150 + 12) == v189)
      goto LABEL_201;
    goto LABEL_200;
  }
  v146 = *(_QWORD *)a3;
  v147 = *(_DWORD *)(a3 + 8);
  while (1)
  {
    while (1)
    {
      v145 = (uint64_t)v144;
      v148 = v144[4];
      if (v146 >= v148)
        break;
LABEL_188:
      v144 = *(uint64_t **)v145;
      v16 = (uint64_t **)v145;
      if (!*(_QWORD *)v145)
        goto LABEL_197;
    }
    if (v146 != v148)
      break;
    v149 = *(_DWORD *)(v145 + 40);
    if (v147 < v149)
      goto LABEL_188;
    if (v149 >= v147)
      goto LABEL_211;
LABEL_195:
    v144 = *(uint64_t **)(v145 + 8);
    if (!v144)
    {
      v16 = (uint64_t **)(v145 + 8);
      goto LABEL_197;
    }
  }
  if (v148 < v146)
    goto LABEL_195;
LABEL_211:
  if (*(_DWORD *)(v145 + 48) != v189)
    goto LABEL_200;
LABEL_201:
  memcpy(__dst, a5, sizeof(__dst));
  v153 = a4[5];
  v215 = a4[4];
  v216 = v153;
  v154 = a4[7];
  v217 = a4[6];
  v218 = v154;
  v155 = a4[1];
  v211 = *a4;
  v212 = v155;
  v156 = a4[2];
  v157 = a4[3];
  *(_QWORD *)object = 2;
  v213 = v156;
  v214 = v157;
  memcpy(&object[8], a5, 0x120uLL);
  sub_20F215978((uint64_t)object);
  v158 = *(_QWORD *)&object[8];
  *(_OWORD *)category = 0u;
  v208 = 0u;
  v209 = 0;
  v205 = 0u;
  v206 = 0u;
  v204 = 0;
  v203 = 0uLL;
  v202 = 0uLL;
  v159 = *(_QWORD *)&object[120];
  v160 = *(_QWORD *)&object[232];
  v161 = *(_QWORD *)&object[264];
  v162 = *(_QWORD *)&object[288];
  v163 = *(_OWORD *)&object[56];
  v164 = *(_OWORD *)&object[104];
  v165 = *(_OWORD *)&object[152];
  v166 = *(_OWORD *)&object[168];
  v167 = *(_OWORD *)&object[200];
  v168 = *(_OWORD *)&object[216];
  v169 = *(_OWORD *)&object[248];
  v170 = *(_OWORD *)&object[272];
  v134 = v190;
  v90[1] = v190;
  v171 = v90 + 1;
  v171[2] = v158;
  v172 = v209;
  v173 = v208;
  *(_OWORD *)(v171 + 3) = *(_OWORD *)category;
  *(_OWORD *)(v171 + 5) = v173;
  v171[7] = v172;
  v174 = v205;
  v175 = v206;
  *((_OWORD *)v171 + 4) = v163;
  *((_OWORD *)v171 + 5) = v174;
  *((_OWORD *)v171 + 6) = v175;
  *((_OWORD *)v171 + 7) = v164;
  v171[16] = v159;
  v171[19] = v204;
  v176 = v202;
  *(_OWORD *)(v171 + 17) = v203;
  *((_OWORD *)v171 + 10) = v165;
  *((_OWORD *)v171 + 11) = v166;
  *((_OWORD *)v171 + 12) = v176;
  *((_OWORD *)v171 + 13) = v167;
  *((_OWORD *)v171 + 14) = v168;
  v171[30] = v160;
  v171[31] = 0;
  *((_OWORD *)v171 + 16) = v169;
  v171[34] = v161;
  *(_OWORD *)(v171 + 35) = v170;
  v171[37] = v162;
  memcpy(v171 + 38, __dst, 0x120uLL);
  v177 = v216;
  *((_OWORD *)v171 + 41) = v215;
  *((_OWORD *)v171 + 42) = v177;
  v178 = v218;
  *((_OWORD *)v171 + 43) = v217;
  *((_OWORD *)v171 + 44) = v178;
  v179 = v212;
  *((_OWORD *)v171 + 37) = v211;
  *((_OWORD *)v171 + 38) = v179;
  v180 = v214;
  *((_OWORD *)v171 + 39) = v213;
  *((_OWORD *)v171 + 40) = v180;
  *((_BYTE *)v171 + 720) = 1;
LABEL_202:
  v181 = *(_QWORD *)(a1 + 976);
  *(_WORD *)(v181 + 516) = 0;
  *(_DWORD *)(v181 + 512) = 0;
  v182 = *(_QWORD **)(a1 + 1008);
  *(_DWORD *)object = 0;
  sub_20F7C36D8(v182, (__int128 *)a2, (__int128 *)a3, object, v134, a4, a5, a6);
  return 0;
}

void sub_20F7D26D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21)
{
  if (a21)
  {
    if (a20 < 0)
      operator delete(__p);
  }
  __cxa_guard_abort(&qword_254A4A510);
  sub_20E863714((uint64_t)&STACK[0x380]);
  _Unwind_Resume(a1);
}

void sub_20F7D271C(_Unwind_Exception *a1)
{
  sub_20E863714((uint64_t)&STACK[0x380]);
  _Unwind_Resume(a1);
}

void sub_20F7D2730(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *object, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22)
{
  if (a22 && a21 < 0)
    operator delete(__p);
  if (object)
    os_release(object);
  sub_20E863714((uint64_t)&STACK[0x380]);
  _Unwind_Resume(a1);
}

void sub_20F7D2874(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20F7D2884(_QWORD *a1)
{
  unsigned __int8 v2;
  void *__p[2];
  char v4;
  uint64_t *v5;

  v2 = atomic_load((unsigned __int8 *)&qword_254A68A68);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254A68A68))
  {
    sub_21021D3D8(&v5);
    sub_20E8610C0(__p, "cv3d.vio.map_optimization");
    sub_20E8C4068(&v5, (uint64_t)__p, &qword_254A68A60);
    if (v4 < 0)
      operator delete(__p[0]);
    __cxa_guard_release(&qword_254A68A68);
  }
  *a1 = qword_254A68A60;
}

void sub_20F7D2920(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A68A68);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A68A68);
  _Unwind_Resume(a1);
}

double sub_20F7D2978(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t i;
  double result;
  _QWORD *v10;
  void *v11;
  void *v12;

  v2 = *(_QWORD *)(a1 + 976);
  if (v2)
    sub_20F7CCA98((int64x2_t *)(v2 + 40));
  v3 = operator new();
  sub_20F7E39E4(v3);
  *(_QWORD *)v3 = off_24CA02D48;
  *(_WORD *)(v3 + 2424) = *(_WORD *)(v3 + 2424) & 0x7FF0 | 0xC;
  *(_BYTE *)(v3 + 2428) = 1;
  *(_OWORD *)(v3 + 2432) = 0u;
  *(_QWORD *)(v3 + 2400) = 0;
  *(_QWORD *)(v3 + 2416) = 0;
  *(_QWORD *)(v3 + 2408) = 0;
  *(_QWORD *)(v3 + 2408) = malloc_type_calloc(1uLL, 8uLL, 0x100004000313F17uLL);
  *(_QWORD *)(v3 + 2504) = 0;
  *(_OWORD *)(v3 + 2472) = 0u;
  *(_OWORD *)(v3 + 2488) = 0u;
  *(_OWORD *)(v3 + 2448) = 0u;
  *(_DWORD *)(v3 + 2464) = 0;
  *(_QWORD *)v3 = off_24CA02C18;
  *(_DWORD *)(v3 + 2512) = 2;
  *(_DWORD *)(v3 + 2520) = -3;
  *(_OWORD *)(v3 + 2576) = 0u;
  *(_OWORD *)(v3 + 2546) = 0u;
  *(_OWORD *)(v3 + 2562) = 0u;
  *(_DWORD *)(v3 + 2528) = -3;
  *(_DWORD *)(v3 + 2540) = 0;
  *(_QWORD *)(v3 + 2532) = 0;
  *(_WORD *)(v3 + 2544) = 1;
  *(_BYTE *)(v3 + 2592) = 1;
  *(_QWORD *)(v3 + 2600) = 0;
  v4 = *(_QWORD *)(a1 + 976);
  *(_QWORD *)(a1 + 976) = v3;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 88))(v4);
  sub_20E9BCAA8(*(_QWORD **)(a1 + 992));
  *(_QWORD *)(a1 + 984) = a1 + 992;
  *(_QWORD *)(a1 + 1000) = 0;
  *(_QWORD *)(a1 + 992) = 0;
  v5 = *(_QWORD **)(a1 + 1008);
  if (v5[3])
  {
    v6 = (_QWORD *)v5[2];
    if (v6)
    {
      do
      {
        v10 = (_QWORD *)*v6;
        v11 = (void *)v6[9];
        if (v11)
        {
          v6[10] = v11;
          operator delete(v11);
        }
        v12 = (void *)v6[6];
        if (v12)
        {
          v6[7] = v12;
          operator delete(v12);
        }
        operator delete(v6);
        v6 = v10;
      }
      while (v10);
    }
    v5[2] = 0;
    v7 = v5[1];
    if (v7)
    {
      for (i = 0; i != v7; ++i)
        *(_QWORD *)(*v5 + 8 * i) = 0;
    }
    v5[3] = 0;
  }
  result = 0.0;
  *(_QWORD *)(a1 + 1016) = 0;
  return result;
}

void sub_20F7D2B2C(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20F7E3EC8(v1);
  MEMORY[0x212BC6398](v1, 0x10F1C40DD55DC2CLL);
  _Unwind_Resume(a1);
}

uint64_t sub_20F7D2B60@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v4;
  uint64_t v5;
  _BYTE *v6;
  char v7;
  uint64_t v13;
  double v14;
  char v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  int v20;
  double v22;
  double v23;
  double v24;
  double v25;
  int v26;
  uint64_t v27;
  double v28;
  _QWORD *v29;
  const std::locale::facet *v30;
  double v31;
  uint64_t *v32;
  __int128 *v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  _OWORD *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t *v43;
  unint64_t v44;
  _OWORD *v45;
  __int128 *v46;
  uint64_t v47;
  __int128 v48;
  uint64_t v49;
  double **v50;
  uint64_t v51;
  double v52;
  double *v53;
  uint64_t v54;
  double v55;
  double v56;
  _QWORD *v57;
  const std::locale::facet *v58;
  _QWORD *v59;
  double v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t *v64;
  double v65;
  unsigned int v66;
  uint64_t v67;
  double *v68;
  double v69;
  double *v70;
  unint64_t v71;
  unint64_t v72;
  float64x2_t *v73;
  uint64_t v74;
  float64x2_t v75;
  float64x2_t v76;
  double *v77;
  double v78;
  double v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  double *v83;
  uint64_t v84;
  double v85;
  double v86;
  int v87;
  uint64_t v88;
  double *v89;
  int v90;
  double v91;
  double v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  __int128 v96;
  __int128 v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  __int128 v101;
  __int128 v102;
  _OWORD *v103;
  uint64_t v104;
  uint64_t v105;
  unsigned int v106;
  uint64_t v107;
  _QWORD *v108;
  _QWORD *v109;
  const std::locale::facet *v110;
  _QWORD *v111;
  const std::locale::facet *v112;
  _QWORD *v113;
  _QWORD *v114;
  const std::locale::facet *v115;
  _QWORD *v116;
  const std::locale::facet *v117;
  int v118;
  _QWORD *v119;
  const std::locale::facet *v120;
  _QWORD *v121;
  uint64_t v122;
  uint64_t *v123;
  unsigned __int8 v124;
  uint64_t v126;
  uint64_t v127;
  char *v128;
  size_t v129;
  void *v130;
  uint64_t v131;
  uint64_t i;
  uint64_t v133;
  float64x2_t v134;
  uint64_t v136;
  uint64_t v137;
  _QWORD *v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  int64x2_t v143;
  int64x2_t v144;
  float64x2_t v147;
  int8x16_t v149;
  int8x16_t v150;
  double v151;
  float64x2_t v154;
  int64x2_t v155;
  float64x2_t v156;
  float64x2_t v157;
  float64x2_t v158;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  int64x2_t v164;
  int64x2_t v165;
  float64x2_t v168;
  int8x16_t v170;
  int8x16_t v171;
  double v172;
  float64x2_t v175;
  int64x2_t v176;
  float64x2_t v177;
  float64x2_t v178;
  uint64_t *v180;
  int v181;
  int *v182;
  int v183;
  int v184;
  int v185;
  unint64_t v186;
  char *v187;
  int v188;
  int v189;
  int v190;
  char *v191;
  size_t v192;
  void *v193;
  uint64_t v194;
  uint64_t j;
  uint64_t v196;
  int v197;
  int v198;
  char v200;
  int v201;
  uint64_t v202;
  std::locale v203;
  int v204;
  void *__p[2];
  uint64_t v206;
  _BYTE __dst[26];
  __int16 v208;
  int v209;
  void *v210;
  char v211;
  char v212;
  void *v213;
  char v214;
  char v215;
  void *v216;
  char v217;
  void *v218;
  char v219;
  uint64_t v220;

  v220 = *MEMORY[0x24BDAC8D0];
  kdebug_trace();
  v4 = *(uint64_t **)(a1 + 968);
  v5 = *(_QWORD *)(a1 + 976);
  kdebug_trace();
  kdebug_trace();
  (*(void (**)(_BYTE *__return_ptr, uint64_t *))(*v4 + 16))(__dst, v4);
  (**(void (***)(void **__return_ptr, uint64_t))v5)(__p, v5);
  if ((__dst[23] & 0x80000000) != 0)
  {
    sub_20E860C04((_BYTE *)a2, *(void **)__dst, *(unint64_t *)&__dst[8]);
  }
  else
  {
    *(_OWORD *)a2 = *(_OWORD *)__dst;
    *(_QWORD *)(a2 + 16) = *(_QWORD *)&__dst[16];
  }
  v6 = (_BYTE *)(a2 + 24);
  v7 = HIBYTE(v206);
  if (SHIBYTE(v206) < 0)
  {
    sub_20E860C04(v6, __p[0], (unint64_t)__p[1]);
    v7 = HIBYTE(v206);
  }
  else
  {
    *(_OWORD *)v6 = *(_OWORD *)__p;
    *(_QWORD *)(a2 + 40) = v206;
  }
  *(_QWORD *)(a2 + 48) = 0;
  *(_DWORD *)(a2 + 56) = 0;
  __asm { FMOV            V0.2D, #-1.0 }
  *(_OWORD *)(a2 + 64) = _Q0;
  *(_QWORD *)(a2 + 592) = a2 + 80;
  *(_OWORD *)(a2 + 600) = xmmword_210378040;
  v13 = a2 + 616;
  *(_QWORD *)(a2 + 1128) = a2 + 616;
  *(_QWORD *)(a2 + 1136) = 64;
  *(_OWORD *)(a2 + 1144) = 0u;
  *(_QWORD *)(a2 + 1672) = a2 + 1160;
  *(_QWORD *)(a2 + 1680) = 64;
  *(_QWORD *)(a2 + 1688) = 0;
  *(_QWORD *)(a2 + 1704) = 0;
  *(_QWORD *)(a2 + 1696) = 0;
  *(_QWORD *)(a2 + 2224) = a2 + 1712;
  *(_QWORD *)(a2 + 2232) = 64;
  *(_QWORD *)(a2 + 2240) = 0;
  if (v7 < 0)
  {
    operator delete(__p[0]);
    if ((__dst[23] & 0x80000000) == 0)
      goto LABEL_9;
  }
  else if ((__dst[23] & 0x80000000) == 0)
  {
    goto LABEL_9;
  }
  operator delete(*(void **)__dst);
LABEL_9:
  sub_20F2C3BE8((_QWORD *)a2, 2uLL, 2uLL);
  __p[0] = (void *)v5;
  __p[1] = (void *)a2;
  v14 = (*(double (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
  v15 = *(_BYTE *)(v5 + 528);
  if ((*(unsigned int (**)(uint64_t *))(*v4 + 24))(v4))
  {
    *(_BYTE *)(v5 + 528) = 1;
    v16 = (*(uint64_t (**)(uint64_t *))(*v4 + 40))(v4);
    v17 = *v4;
    if (v16)
      (*(void (**)(uint64_t *, double))(v17 + 48))(v4, 0.0);
    else
      (*(void (**)(uint64_t *))(v17 + 56))(v4);
    (*(void (**)(uint64_t *))(*v4 + 32))(v4);
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 104))(v5);
  }
  kdebug_trace();
  if (*((_BYTE *)v4 + 48))
  {
    v18 = v4[74];
    if (*((_BYTE *)v4 + 601))
    {
      v19 = *((unsigned __int8 *)v4 + 600);
      if (v18)
        sub_20F7F5030(v5, (double *)__dst, (double *)v4[72]);
      else
        sub_20F7F5030(v5, (double *)__dst, (double *)v4 + 7);
      v24 = 1.0;
      v25 = 1.0;
      if (!v19)
      {
        v24 = *(double *)__dst;
        if (*(double *)__dst <= 0.0)
        {
          v25 = 1.0e20;
          v24 = 1.0e-10;
        }
        else
        {
          v25 = 1.0 / (*(double *)__dst * *(double *)__dst);
        }
      }
      *(double *)(v5 + 8) = v24;
      *(double *)(v5 + 16) = v25;
      *(double *)(v5 + 24) = v24;
      *(double *)(v5 + 32) = v25;
      goto LABEL_35;
    }
    if (v18)
    {
      v203.__locale_ = (std::locale::__imp *)v4[72];
      v204 = 0;
      v20 = *((unsigned __int8 *)v4 + 600);
      sub_20F7F5FDC(v5, (double *)__dst, (uint64_t)&v203);
      if (v20)
      {
LABEL_22:
        __asm { FMOV            V0.2D, #1.0 }
        *(_OWORD *)(v5 + 8) = _Q0;
        v22 = 1.0;
        v23 = 1.0;
LABEL_32:
        *(double *)(v5 + 24) = v22;
        *(double *)(v5 + 32) = v23;
LABEL_35:
        *(_BYTE *)(v5 + 517) = 0;
        *(_DWORD *)(v5 + 512) = 0;
        goto LABEL_36;
      }
    }
    else
    {
      v26 = *((unsigned __int8 *)v4 + 600);
      sub_20F7F5D08(v5, (double *)__dst, (double *)v4 + 7);
      if (v26)
        goto LABEL_22;
    }
    v23 = 1.0e20;
    v22 = 1.0e-10;
    v27 = 0x3DDB7CDFD9D7BDBBLL;
    v28 = 1.0e20;
    if (*(double *)__dst > 0.0)
    {
      v27 = *(_QWORD *)__dst;
      v28 = 1.0 / (*(double *)__dst * *(double *)__dst);
    }
    *(_QWORD *)(v5 + 8) = v27;
    *(double *)(v5 + 16) = v28;
    if (*(double *)&__dst[8] > 0.0)
    {
      v22 = *(double *)&__dst[8];
      v23 = 1.0 / (*(double *)&__dst[8] * *(double *)&__dst[8]);
    }
    goto LABEL_32;
  }
LABEL_36:
  if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5))
  {
    v200 = v15;
    sub_20F3E1DF8(v5, (_QWORD *)(a2 + 1160), (_QWORD *)(a2 + 1152));
    sub_20F7F62C4(v5, (_QWORD *)(a2 + 1160), (_QWORD *)(a2 + 1152));
    sub_20F7F6994(v5, (_QWORD *)(a2 + 1712), (_QWORD *)(a2 + 1696), (_QWORD *)(a2 + 1704));
    sub_20F7F64E4(v5, (_QWORD *)(a2 + 1712), (_QWORD *)(a2 + 1696), (_QWORD *)(a2 + 1704));
    v31 = sub_20F7F4A20(v5, (_QWORD *)(a2 + 80));
    v32 = (uint64_t *)(a2 + 1144);
    *(double *)(a2 + 64) = v31;
    *(double *)(a2 + 72) = v31;
    *((double *)v4 + 92) = v31;
    v33 = *(__int128 **)(a2 + 592);
    v34 = *(_QWORD *)(a2 + 608);
    *(_QWORD *)(a2 + 1144) = 0;
    v35 = v34 & 0x1FFFFFFFFFFFFFFFLL;
    v36 = *(_QWORD *)(a2 + 1136);
    if ((v34 & 0x1FFFFFFFFFFFFFFFuLL) <= v36)
    {
      if (!v34)
        goto LABEL_59;
      v38 = *(_OWORD **)(a2 + 1128);
    }
    else
    {
      v37 = 2 * v36;
      if (v37 > v35)
        v35 = v37;
      *(_QWORD *)(a2 + 1136) = v35;
      v38 = (_OWORD *)operator new[]();
      v39 = *(_QWORD *)(a2 + 1128);
      if (v39 != v13 && v39)
        MEMORY[0x212BC6368](v39, 0x1000C8000313F17);
      *(_QWORD *)(a2 + 1128) = v38;
      v40 = *(_QWORD *)(a2 + 1144);
      if (v40)
      {
        *v32 = v40 + v34;
        memmove((char *)v38 + 8 * v34, v38, 8 * v40);
        memcpy(v38, v33, 8 * v34);
LABEL_59:
        kdebug_trace();
        if ((*(unsigned int (**)(uint64_t *))(*v4 + 24))(v4))
        {
          if ((*(unsigned int (**)(uint64_t *))(*v4 + 40))(v4))
          {
            (*(void (**)(uint64_t))(*(_QWORD *)v5 + 96))(v5);
            (*(void (**)(uint64_t *))(*v4 + 48))(v4);
          }
          else
          {
            (*(void (**)(uint64_t *))(*v4 + 56))(v4);
          }
          (*(void (**)(uint64_t *))(*v4 + 32))(v4);
          (*(void (**)(uint64_t))(*(_QWORD *)v5 + 104))(v5);
        }
        v50 = (double **)(v5 + 552);
        v51 = *(unsigned int *)(v5 + 568);
        if ((_DWORD)v51)
        {
          v52 = fabs(**v50);
          if ((_DWORD)v51 != 1)
          {
            v53 = *v50 + 1;
            v54 = 8 * v51 - 8;
            do
            {
              v55 = *v53++;
              v56 = fabs(v55);
              if (v52 < v56)
                v52 = v56;
              v54 -= 8;
            }
            while (v54);
          }
          if (v52 < v52 * *((double *)v4 + 3))
            goto LABEL_71;
        }
        else
        {
          v52 = 1.0;
          if (1.0 * *((double *)v4 + 3) > 1.0)
          {
LABEL_71:
            if (*((_BYTE *)v4 + 16))
            {
              v57 = sub_20E86A980(MEMORY[0x24BEDB318], (uint64_t)"Convergence in the gradient", 27);
              std::ios_base::getloc((const std::ios_base *)((char *)v57 + *(_QWORD *)(*v57 - 24)));
              v58 = std::locale::use_facet((const std::locale *)__dst, MEMORY[0x24BEDB350]);
              ((void (*)(const std::locale::facet *, uint64_t))v58->__vftable[2].~facet_0)(v58, 10);
              std::locale::~locale((std::locale *)__dst);
              std::ostream::put();
              std::ostream::flush();
              sub_20E86A980(MEMORY[0x24BEDB318], (uint64_t)"[error][grad < gtol][", 21);
              v59 = (_QWORD *)std::ostream::operator<<();
              sub_20E86A980(v59, (uint64_t)"][", 2);
              if (v52 == 0.0)
                sub_20E86A980(MEMORY[0x24BEDB318], (uint64_t)"NaN", 3);
              else
                std::ostream::operator<<();
              sub_20E86A980(MEMORY[0x24BEDB318], (uint64_t)" < ", 3);
              v108 = (_QWORD *)std::ostream::operator<<();
              v109 = sub_20E86A980(v108, (uint64_t)"]", 1);
              std::ios_base::getloc((const std::ios_base *)((char *)v109 + *(_QWORD *)(*v109 - 24)));
              v110 = std::locale::use_facet((const std::locale *)__dst, MEMORY[0x24BEDB350]);
              ((void (*)(const std::locale::facet *, uint64_t))v110->__vftable[2].~facet_0)(v110, 10);
              std::locale::~locale((std::locale *)__dst);
              std::ostream::put();
              std::ostream::flush();
            }
            *(_DWORD *)(a2 + 56) = 1;
LABEL_182:
            *(_BYTE *)(v5 + 528) = v200;
            goto LABEL_183;
          }
        }
        v60 = *((double *)v4 + 92);
        kdebug_trace();
        v61 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 24))(v5);
        v62 = v4[83];
        if (v62)
          (*(void (**)(uint64_t))(*(_QWORD *)v62 + 48))(v62);
        v202 = a1;
        v63 = *(unsigned int *)(a2 + 48);
        if (v63 >= *((_DWORD *)v4 + 3))
        {
LABEL_180:
          *(_QWORD *)(a2 + 72) = v4[92];
          v122 = v4[79];
          a1 = v202;
          if (v122)
            (*(void (**)(uint64_t))(*(_QWORD *)v122 + 48))(v122);
          goto LABEL_182;
        }
        v64 = v4 + 93;
        v65 = v52;
        while (1)
        {
          v66 = v63 + 1;
          *(_DWORD *)(a2 + 48) = v63 + 1;
          if ((*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 16))(v5, v61))
          {
            if (*((_BYTE *)v4 + 16))
            {
              v111 = sub_20E86A980(MEMORY[0x24BEDB318], (uint64_t)"Solve FAILED", 12);
              std::ios_base::getloc((const std::ios_base *)((char *)v111 + *(_QWORD *)(*v111 - 24)));
              v112 = std::locale::use_facet((const std::locale *)__dst, MEMORY[0x24BEDB350]);
              ((void (*)(const std::locale::facet *, uint64_t))v112->__vftable[2].~facet_0)(v112, 10);
              std::locale::~locale((std::locale *)__dst);
              std::ostream::put();
              std::ostream::flush();
            }
            *(_DWORD *)(a2 + 56) = 0;
            goto LABEL_180;
          }
          ++*(_DWORD *)(a2 + 52);
          v67 = *(unsigned int *)(v61 + 16);
          if ((_DWORD)v67)
          {
            v68 = *(double **)v61;
            v69 = **(double **)v61 * **(double **)v61;
            if ((_DWORD)v67 != 1)
            {
              v70 = v68 + 1;
              v71 = (v67 + 0x1FFFFFFFFFFFFFFELL) & 0x1FFFFFFFFFFFFFFFLL;
              if (v71 < 3)
                goto LABEL_86;
              v72 = v71 + 1;
              v70 += v72 & 0x3FFFFFFFFFFFFFFCLL;
              v73 = (float64x2_t *)(v68 + 3);
              v74 = v72 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v75 = vmulq_f64(v73[-1], v73[-1]);
                v76 = vmulq_f64(*v73, *v73);
                v69 = v69 + v75.f64[0] + v75.f64[1] + v76.f64[0] + v76.f64[1];
                v73 += 2;
                v74 -= 4;
              }
              while (v74);
              if (v72 != (v72 & 0x3FFFFFFFFFFFFFFCLL))
              {
LABEL_86:
                v77 = &v68[v67];
                do
                {
                  v78 = *v70++;
                  v69 = v69 + v78 * v78;
                }
                while (v70 != v77);
              }
            }
            v79 = sqrt(v69);
            if (v63 < *((_DWORD *)v4 + 2))
              goto LABEL_96;
          }
          else
          {
            v79 = sqrt(0.0);
            if (v63 < *((_DWORD *)v4 + 2))
              goto LABEL_96;
          }
          v80 = v4[91];
          if (v80)
          {
            *(_DWORD *)__dst = *(_DWORD *)(v61 + 16);
            *(_QWORD *)&__dst[8] = *(_QWORD *)v61;
            *(_DWORD *)&__dst[16] = 0;
            *(double *)&v203.__locale_ = v79;
            if (((*(uint64_t (**)(uint64_t, std::locale *, _BYTE *))(*(_QWORD *)v80 + 48))(v80, &v203, __dst) & 1) != 0)goto LABEL_173;
          }
          else if ((_DWORD)v67 && v79 < *((double *)v4 + 4) * (v14 + *((double *)v4 + 4)))
          {
LABEL_173:
            if (*((_BYTE *)v4 + 16))
            {
              v119 = sub_20E86A980(MEMORY[0x24BEDB318], (uint64_t)"Convergence in the parameters", 29);
              std::ios_base::getloc((const std::ios_base *)((char *)v119 + *(_QWORD *)(*v119 - 24)));
              v120 = std::locale::use_facet((const std::locale *)__dst, MEMORY[0x24BEDB350]);
              ((void (*)(const std::locale::facet *, uint64_t))v120->__vftable[2].~facet_0)(v120, 10);
              std::locale::~locale((std::locale *)__dst);
              std::ostream::put();
              std::ostream::flush();
              (*(void (**)(uint64_t *, uint64_t, double, double, double, double, double))(*v4 + 64))(v4, v63, v60, v79, v65, v52, v14);
            }
            v118 = 2;
            goto LABEL_179;
          }
LABEL_96:
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 48))(v5, v61);
          v81 = v4[87];
          if (v81)
            (*(void (**)(uint64_t))(*(_QWORD *)v81 + 48))(v81);
          if (*v32)
            memcpy(__dst, *(const void **)(a2 + 1128), 8 * *v32);
          v60 = sub_20F7F4A20(v5, (_QWORD *)(a2 + 616));
          v82 = *(unsigned int *)(v5 + 568);
          if (!(_DWORD)v82)
          {
            v65 = 1.0;
            if (!*((_BYTE *)v4 + 16))
              goto LABEL_110;
LABEL_109:
            (*(void (**)(uint64_t *, uint64_t, double, double, double, double, double))(*v4 + 64))(v4, v63, v60, v79, v65, v52, v14);
            goto LABEL_110;
          }
          v65 = fabs(**v50);
          if ((_DWORD)v82 != 1)
          {
            v83 = *v50 + 1;
            v84 = 8 * v82 - 8;
            do
            {
              v85 = *v83++;
              v86 = fabs(v85);
              if (v65 < v86)
                v65 = v86;
              v84 -= 8;
            }
            while (v84);
          }
          if (*((_BYTE *)v4 + 16))
            goto LABEL_109;
LABEL_110:
          if (v60 == 0.0)
          {
            if (*((_BYTE *)v4 + 16))
            {
              v113 = sub_20E86A980(MEMORY[0x24BEDB318], (uint64_t)"Convergence in the cost: ", 25);
              v114 = sub_20E86A980(v113, (uint64_t)"N.A.", 4);
              std::ios_base::getloc((const std::ios_base *)((char *)v114 + *(_QWORD *)(*v114 - 24)));
              v115 = std::locale::use_facet(&v203, MEMORY[0x24BEDB350]);
              ((void (*)(const std::locale::facet *, uint64_t))v115->__vftable[2].~facet_0)(v115, 10);
              std::locale::~locale(&v203);
              std::ostream::put();
              goto LABEL_171;
            }
LABEL_172:
            *((double *)v4 + 92) = v60;
            v118 = 3;
LABEL_179:
            *(_DWORD *)(a2 + 56) = v118;
            goto LABEL_180;
          }
          if (vabdd_f64(v60, *((double *)v4 + 92)) < v60 * *((double *)v4 + 5)
            && v63 >= *((_DWORD *)v4 + 2))
          {
            if (*((_BYTE *)v4 + 16))
            {
              sub_20E86A980(MEMORY[0x24BEDB318], (uint64_t)"Convergence in the cost: ", 25);
              v116 = (_QWORD *)std::ostream::operator<<();
              std::ios_base::getloc((const std::ios_base *)((char *)v116 + *(_QWORD *)(*v116 - 24)));
              v117 = std::locale::use_facet(&v203, MEMORY[0x24BEDB350]);
              ((void (*)(const std::locale::facet *, uint64_t))v117->__vftable[2].~facet_0)(v117, 10);
              std::locale::~locale(&v203);
              std::ostream::put();
LABEL_171:
              std::ostream::flush();
            }
            goto LABEL_172;
          }
          if (*(_DWORD *)(v5 + 544))
          {
            (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v5 + 160))(v5, v64);
            v87 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t, uint64_t *, double))(*v4 + 80))(v4, v61, v5 + 552, v64, v60);
          }
          else
          {
            v87 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t, double))(*v4 + 72))(v4, v61, v5 + 552, v60);
          }
          if (!v87)
          {
            --*(_DWORD *)(a2 + 52);
            v93 = *(_QWORD *)(v5 + 48);
            v94 = *(_QWORD *)(v5 + 56);
            while (v93 != v94)
            {
              v95 = *(_QWORD *)(v93 + 8);
              if (*(_BYTE *)(v95 + 20))
              {
                v96 = *(_OWORD *)(v95 + 152);
                v97 = *(_OWORD *)(v95 + 184);
                *(_OWORD *)(v95 + 64) = *(_OWORD *)(v95 + 168);
                *(_OWORD *)(v95 + 80) = v97;
                *(_QWORD *)(v95 + 96) = *(_QWORD *)(v95 + 200);
                *(_OWORD *)(v95 + 32) = *(_OWORD *)(v95 + 136);
                *(_OWORD *)(v95 + 48) = v96;
                *(_OWORD *)(v95 + 104) = *(_OWORD *)(v95 + 208);
                *(_QWORD *)(v95 + 120) = *(_QWORD *)(v95 + 224);
              }
              v93 += 16;
            }
            v98 = *(_QWORD *)(v5 + 144);
            v99 = *(_QWORD *)(v5 + 152);
            while (v98 != v99)
            {
              v100 = *(_QWORD *)(v98 + 8);
              if (*(_BYTE *)(v100 + 20))
              {
                v101 = *(_OWORD *)(v100 + 176);
                *(_OWORD *)(v100 + 64) = *(_OWORD *)(v100 + 160);
                *(_OWORD *)(v100 + 80) = v101;
                *(_QWORD *)(v100 + 96) = *(_QWORD *)(v100 + 192);
                v102 = *(_OWORD *)(v100 + 144);
                *(_OWORD *)(v100 + 32) = *(_OWORD *)(v100 + 128);
                *(_OWORD *)(v100 + 48) = v102;
                *(_OWORD *)(v100 + 104) = *(_OWORD *)(v100 + 200);
                *(_QWORD *)(v100 + 120) = *(_QWORD *)(v100 + 216);
              }
              v98 += 16;
            }
            *(_BYTE *)(v5 + 517) = 0;
            *(_BYTE *)(v5 + 512) = 0;
            *(_WORD *)(v5 + 515) = 0;
            *(_BYTE *)(v5 + 513) = *(_BYTE *)(v5 + 514);
            *(_QWORD *)(a2 + 1144) = 0;
            if (*(_QWORD *)(a2 + 1136) >= 2uLL)
            {
              v103 = *(_OWORD **)(a2 + 1128);
            }
            else
            {
              *(_QWORD *)(a2 + 1136) = 2;
              v103 = (_OWORD *)operator new[]();
              v104 = *(_QWORD *)(a2 + 1128);
              if (v104 != v13 && v104)
                MEMORY[0x212BC6368](v104, 0x1000C8000313F17);
              *(_QWORD *)(a2 + 1128) = v103;
              v105 = *(_QWORD *)(a2 + 1144);
              if (v105)
              {
                *v32 = v105 + 2;
                *v103 = *(_OWORD *)__dst;
                goto LABEL_148;
              }
            }
            *v103 = *(_OWORD *)__dst;
            *v32 = 2;
LABEL_148:
            if ((*(unsigned int (**)(uint64_t *))(*v4 + 24))(v4))
            {
              (*(void (**)(uint64_t *))(*v4 + 32))(v4);
              (*(void (**)(uint64_t))(*(_QWORD *)v5 + 104))(v5);
            }
LABEL_150:
            v106 = *((_DWORD *)v4 + 3);
            if (v66 >= v106)
              goto LABEL_153;
            goto LABEL_151;
          }
          if ((*(unsigned int (**)(uint64_t *))(*v4 + 24))(v4))
          {
            (*(void (**)(uint64_t *))(*v4 + 32))(v4);
            (*(void (**)(uint64_t))(*(_QWORD *)v5 + 104))(v5);
          }
          if (v65 < v52 * *((double *)v4 + 3) && v63 >= *((_DWORD *)v4 + 2))
          {
            if (*((_BYTE *)v4 + 16))
            {
              v121 = sub_20E86A980(MEMORY[0x24BEDB318], (uint64_t)"Convergence in the gradient", 27);
              sub_20E8C81A0(v121);
              (*(void (**)(uint64_t *, uint64_t, double, double, double, double, double))(*v4 + 64))(v4, v63, v60, v79, v65, v52, v14);
            }
            v118 = 1;
            goto LABEL_179;
          }
          if (v66 >= *((_DWORD *)v4 + 3) || !*((_BYTE *)v4 + 48))
            goto LABEL_150;
          v88 = v4[74];
          if (*((_BYTE *)v4 + 601))
          {
            v89 = (double *)(v4 + 7);
            if (v88)
              v89 = (double *)v4[72];
            v90 = *((unsigned __int8 *)v4 + 600);
            sub_20F7F5030(v5, (double *)&v203, v89);
            v91 = 1.0;
            v92 = 1.0;
            if (!v90)
            {
              v91 = 1.0e-10;
              v92 = 1.0e20;
              if (*(double *)&v203.__locale_ > 0.0)
              {
                v91 = *(double *)&v203.__locale_;
                v92 = 1.0 / (*(double *)&v203.__locale_ * *(double *)&v203.__locale_);
              }
            }
            *(double *)(v5 + 8) = v91;
            *(double *)(v5 + 16) = v92;
            *(double *)(v5 + 24) = v91;
            *(double *)(v5 + 32) = v92;
            *(_BYTE *)(v5 + 517) = 0;
            *(_DWORD *)(v5 + 512) = 0;
          }
          else if (v88)
          {
            v203.__locale_ = (std::locale::__imp *)v4[72];
            v204 = 0;
            sub_20F7F4974(v5, (uint64_t)&v203, *((_BYTE *)v4 + 600));
          }
          else
          {
            sub_20F7F48C8(v5, (double *)v4 + 7, *((_BYTE *)v4 + 600));
          }
          *((double *)v4 + 92) = sub_20F7F4A20(v5, (_QWORD *)(a2 + 616));
          v106 = *((_DWORD *)v4 + 3);
          if (v66 >= v106)
            goto LABEL_153;
LABEL_151:
          v107 = v4[79];
          v64 = v4 + 93;
          if (v107)
          {
            (*(void (**)(uint64_t))(*(_QWORD *)v107 + 48))(v107);
            v106 = *((_DWORD *)v4 + 3);
LABEL_153:
            v64 = v4 + 93;
          }
          v63 = *(unsigned int *)(a2 + 48);
          if (v63 >= v106)
            goto LABEL_180;
        }
      }
    }
    v41 = 0;
    v42 = (v34 - 1) & 0x1FFFFFFFFFFFFFFFLL;
    if (v42 < 3)
    {
      v43 = (uint64_t *)v33;
    }
    else
    {
      v43 = (uint64_t *)v33;
      if ((unint64_t)((char *)v38 - (char *)v33) >= 0x20)
      {
        v44 = v42 + 1;
        v41 = v44 & 0x3FFFFFFFFFFFFFFCLL;
        v43 = (uint64_t *)v33 + (v44 & 0x3FFFFFFFFFFFFFFCLL);
        v45 = v38 + 1;
        v46 = v33 + 1;
        v47 = v44 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v48 = *v46;
          *(v45 - 1) = *(v46 - 1);
          *v45 = v48;
          v45 += 2;
          v46 += 2;
          v47 -= 4;
        }
        while (v47);
        if (v44 == v41)
          goto LABEL_58;
      }
    }
    do
    {
      v49 = *v43++;
      *((_QWORD *)v38 + v41++) = v49;
    }
    while (v43 != (uint64_t *)((char *)v33 + 8 * v34));
LABEL_58:
    *v32 = v41;
    goto LABEL_59;
  }
  if (*((_BYTE *)v4 + 16))
  {
    v29 = sub_20E86A980(MEMORY[0x24BEDB318], (uint64_t)"Linearize FAILED", 16);
    std::ios_base::getloc((const std::ios_base *)((char *)v29 + *(_QWORD *)(*v29 - 24)));
    v30 = std::locale::use_facet((const std::locale *)__dst, MEMORY[0x24BEDB350]);
    ((void (*)(const std::locale::facet *, uint64_t))v30->__vftable[2].~facet_0)(v30, 10);
    std::locale::~locale((std::locale *)__dst);
    std::ostream::put();
    std::ostream::flush();
  }
  *(_DWORD *)(a2 + 56) = 0;
  *(_BYTE *)(v5 + 528) = v15;
  sub_20F3E1DF8(v5, (_QWORD *)(a2 + 1160), (_QWORD *)(a2 + 1152));
  sub_20F7F62C4(v5, (_QWORD *)(a2 + 1160), (_QWORD *)(a2 + 1152));
  sub_20F7F6994(v5, (_QWORD *)(a2 + 1712), (_QWORD *)(a2 + 1696), (_QWORD *)(a2 + 1704));
  sub_20F7F64E4(v5, (_QWORD *)(a2 + 1712), (_QWORD *)(a2 + 1696), (_QWORD *)(a2 + 1704));
LABEL_183:
  kdebug_trace();
  v123 = sub_210219C18();
  v124 = atomic_load((unsigned __int8 *)&qword_254A6DDD0);
  if ((v124 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DDD0))
  {
    __cxa_atexit((void (*)(void *))sub_21021A250, &stru_254A5A410, &dword_20E81F000);
    __cxa_guard_release(&qword_254A6DDD0);
  }
  if (atomic_load(&qword_254A5A450))
  {
    v126 = *(_QWORD *)(a2 + 64);
    v127 = *(_QWORD *)(a2 + 72);
    *(_DWORD *)__dst = 134218240;
    *(_QWORD *)&__dst[4] = v126;
    *(_WORD *)&__dst[12] = 2048;
    *(_QWORD *)&__dst[14] = v127;
    v128 = (char *)_os_log_send_and_compose_impl();
    v129 = strlen(v128);
    __p[0] = 0;
    pthread_threadid_np(0, (__uint64_t *)__p);
    v130 = __p[0];
    timespec_get((timespec *)__p, 1);
    sub_210219E20(__dst, 0xEEEEB0B5B2B2EEEELL, "Trace", 5uLL, (__int128 *)(v123 + 1), (__int128 *)(v123 + 5), "PGO:SE:%f, EE:%f", 0x10uLL, v128, v129, (uint64_t)v130, __p);
    std::mutex::lock(&stru_254A5A410);
    v131 = qword_254A5A458;
    for (i = unk_254A5A460; v131 != i; v131 += 40)
    {
      v133 = *(_QWORD *)(v131 + 32);
      if (!v133)
        sub_20E86D37C();
      (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v133 + 48))(v133, __dst);
    }
    std::mutex::unlock(&stru_254A5A410);
    if (v219 < 0)
    {
      operator delete(v218);
      if ((v217 & 0x80000000) == 0)
      {
LABEL_190:
        if (!v215)
        {
LABEL_196:
          if (v212 && v211 < 0)
            operator delete(v210);
          if (SHIBYTE(v209) < 0)
            operator delete(*(void **)&__dst[8]);
          if (v128)
            free(v128);
          goto LABEL_203;
        }
LABEL_194:
        if (v214 < 0)
          operator delete(v213);
        goto LABEL_196;
      }
    }
    else if ((v217 & 0x80000000) == 0)
    {
      goto LABEL_190;
    }
    operator delete(v216);
    if (!v215)
      goto LABEL_196;
    goto LABEL_194;
  }
LABEL_203:
  if (os_signpost_enabled((os_log_t)*v123))
  {
    v136 = *(_QWORD *)(a2 + 64);
    v137 = *(_QWORD *)(a2 + 72);
    *(_DWORD *)__dst = 134218240;
    *(_QWORD *)&__dst[4] = v136;
    *(_WORD *)&__dst[12] = 2048;
    *(_QWORD *)&__dst[14] = v137;
    _os_signpost_emit_unreliably_with_name_impl();
  }
  v138 = *(_QWORD **)(a1 + 976);
  v139 = v138[6];
  v140 = v138[7];
  while (v139 != v140)
  {
    v141 = *(_QWORD *)(v139 + 8);
    if (*(_BYTE *)(v141 + 20))
    {
      v142 = *(_QWORD *)(v141 + 24);
      if (v142)
      {
        v134.f64[0] = *(float64_t *)(v141 + 48);
        v143 = *(int64x2_t *)(v141 + 32);
        _Q2.i64[0] = *(_QWORD *)(v141 + 72);
        v144 = *(int64x2_t *)(v141 + 56);
        _D4 = *(double *)(v141 + 96);
        _Q5 = *(float64x2_t *)(v141 + 80);
        v147 = (float64x2_t)vzip1q_s64(v143, v144);
        _Q3 = (float64x2_t)vzip2q_s64(v143, v144);
        v149 = (int8x16_t)vdupq_laneq_s64((int64x2_t)_Q3, 1);
        v150 = (int8x16_t)vdupq_lane_s64(*(uint64_t *)&_Q3.f64[0], 0);
        v151 = *(double *)(v141 + 120);
        _Q21 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v147, *(double *)(v141 + 104)), _Q3, *(float64x2_t *)(v141 + 104), 1), (float64x2_t)vzip1q_s64((int64x2_t)v134, (int64x2_t)_Q2), v151);
        _D16 = *(_QWORD *)(v141 + 112);
        __asm { FMLA            D3, D16, V5.D[1] }
        _Q3.f64[0] = _Q3.f64[0] + _D4 * v151;
        v154 = vnegq_f64(_Q21);
        v155 = (int64x2_t)vextq_s8(v150, v149, 8uLL);
        v156 = (float64x2_t)vzip1q_s64(v143, v155);
        *(_QWORD *)&_Q5.f64[1] = vdupq_laneq_s64((int64x2_t)_Q5, 1).u64[0];
        v157 = (float64x2_t)vzip2q_s64((int64x2_t)v147, v155);
        v158 = vmlsq_lane_f64(vmlsq_laneq_f64(vmulq_n_f64(v156, v154.f64[0]), v157, _Q21, 1), _Q5, _Q3.f64[0], 0);
        _Q16 = vmulq_f64(v134, v154);
        __asm { FMLS            D16, D2, V21.D[1] }
        *(double *)(v142 + 64) = _D4;
        __asm { FMLS            D16, D4, V3.D[0] }
        _Q2 = vextq_s8((int8x16_t)v157, _Q2, 8uLL);
        *(float64x2_t *)v142 = v156;
        *(int64x2_t *)(v142 + 16) = vzip1q_s64((int64x2_t)v134, (int64x2_t)v157);
        *(int8x16_t *)(v142 + 32) = _Q2;
        *(float64x2_t *)(v142 + 48) = _Q5;
        v134 = vnegq_f64(v158);
        *(float64x2_t *)(v142 + 72) = v134;
        *(_QWORD *)(v142 + 88) = *(_OWORD *)&vnegq_f64(_Q16);
      }
    }
    v139 += 16;
  }
  v161 = v138[18];
  v160 = v138[19];
  while (v161 != v160)
  {
    v162 = *(_QWORD *)(v161 + 8);
    if (*(_BYTE *)(v162 + 20))
    {
      v163 = *(_QWORD *)(v162 + 24);
      v134.f64[0] = *(float64_t *)(v162 + 48);
      v164 = *(int64x2_t *)(v162 + 32);
      _Q2.i64[0] = *(_QWORD *)(v162 + 72);
      v165 = *(int64x2_t *)(v162 + 56);
      _D4 = *(double *)(v162 + 96);
      _Q5 = *(float64x2_t *)(v162 + 80);
      v168 = (float64x2_t)vzip1q_s64(v164, v165);
      _Q3 = (float64x2_t)vzip2q_s64(v164, v165);
      v170 = (int8x16_t)vdupq_laneq_s64((int64x2_t)_Q3, 1);
      v171 = (int8x16_t)vdupq_lane_s64(*(uint64_t *)&_Q3.f64[0], 0);
      v172 = *(double *)(v162 + 120);
      _Q21 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v168, *(double *)(v162 + 104)), _Q3, *(float64x2_t *)(v162 + 104), 1), (float64x2_t)vzip1q_s64((int64x2_t)v134, (int64x2_t)_Q2), v172);
      _D16 = *(_QWORD *)(v162 + 112);
      __asm { FMLA            D3, D16, V5.D[1] }
      _Q3.f64[0] = _Q3.f64[0] + _D4 * v172;
      v175 = vnegq_f64(_Q21);
      v176 = (int64x2_t)vextq_s8(v171, v170, 8uLL);
      v177 = (float64x2_t)vzip1q_s64(v164, v176);
      v178 = (float64x2_t)vzip2q_s64((int64x2_t)v168, v176);
      *(_QWORD *)&_Q5.f64[1] = vdupq_laneq_s64((int64x2_t)_Q5, 1).u64[0];
      *(float64_t *)(v163 + 16) = v134.f64[0];
      *(float64x2_t *)v163 = v177;
      *(_QWORD *)(v163 + 40) = _Q2.i64[0];
      *(float64x2_t *)(v163 + 24) = v178;
      *(double *)(v163 + 64) = _D4;
      *(float64x2_t *)(v163 + 48) = _Q5;
      _Q0 = vmulq_f64(v134, v175);
      __asm
      {
        FMLS            D0, D2, V21.D[1]
        FMLS            D0, D4, V3.D[0]
      }
      v134 = vnegq_f64(_Q0);
      *(float64x2_t *)(v163 + 72) = vnegq_f64(vmlsq_lane_f64(vmlsq_laneq_f64(vmulq_n_f64(v177, v175.f64[0]), v178, _Q21, 1), _Q5, _Q3.f64[0], 0));
      *(float64_t *)(v163 + 88) = v134.f64[0];
    }
    v161 += 16;
  }
  v180 = sub_210219C18();
  v181 = **(_DWORD **)(a2 + 2224);
  v182 = *(int **)(a2 + 1672);
  v183 = *v182;
  v184 = v182[2];
  v185 = *(_DWORD *)(a2 + 56);
  LOBYTE(v182) = atomic_load((unsigned __int8 *)&qword_254A6DDD0);
  if ((v182 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DDD0))
  {
    __cxa_atexit((void (*)(void *))sub_21021A250, &stru_254A5A410, &dword_20E81F000);
    __cxa_guard_release(&qword_254A6DDD0);
  }
  v186 = atomic_load(&qword_254A5A450);
  v187 = "o22user_anchor_node_group17Remove3DOFAnchorsEvEE";
  if (v186)
  {
    v188 = *(_DWORD *)(a2 + 48);
    v189 = *(_DWORD *)(a2 + 52);
    *(_DWORD *)__dst = 67110400;
    *(_DWORD *)&__dst[4] = v181;
    *(_WORD *)&__dst[8] = 1024;
    v201 = v183;
    *(_DWORD *)&__dst[10] = v183;
    *(_WORD *)&__dst[14] = 1024;
    v190 = v184;
    *(_DWORD *)&__dst[16] = v184;
    *(_WORD *)&__dst[20] = 1024;
    *(_DWORD *)&__dst[22] = v188;
    v208 = 1024;
    v209 = v189;
    LOWORD(v210) = 1024;
    *(_DWORD *)((char *)&v210 + 2) = v185 != 0;
    v191 = (char *)_os_log_send_and_compose_impl();
    v192 = strlen(v191);
    __p[0] = 0;
    pthread_threadid_np(0, (__uint64_t *)__p);
    v193 = __p[0];
    timespec_get((timespec *)__p, 1);
    sub_210219E20(__dst, 0xEEEEB0B5B2B2EEEELL, "Trace", 5uLL, (__int128 *)(v180 + 1), (__int128 *)(v180 + 5), "PGO:NFV:%u, 6DOF:%u, 5DOF:%u, IT:%d, SUCCESS:%d, CONVERGED:%d", 0x3DuLL, v191, v192, (uint64_t)v193, __p);
    std::mutex::lock(&stru_254A5A410);
    v194 = qword_254A5A458;
    for (j = unk_254A5A460; v194 != j; v194 += 40)
    {
      v196 = *(_QWORD *)(v194 + 32);
      if (!v196)
        sub_20E86D37C();
      (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v196 + 48))(v196, __dst);
    }
    std::mutex::unlock(&stru_254A5A410);
    if (v219 < 0)
    {
      operator delete(v218);
      v184 = v190;
      v187 = "o22user_anchor_node_group17Remove3DOFAnchorsEvEE";
      if ((v217 & 0x80000000) == 0)
      {
LABEL_223:
        v183 = v201;
        if (!v215)
        {
LABEL_229:
          if (v212 && v211 < 0)
            operator delete(v210);
          if (SHIBYTE(v209) < 0)
            operator delete(*(void **)&__dst[8]);
          if (v191)
            free(v191);
          goto LABEL_236;
        }
LABEL_227:
        if (v214 < 0)
          operator delete(v213);
        goto LABEL_229;
      }
    }
    else
    {
      v184 = v190;
      v187 = "N4cv3d3kit11concurrency6detail32ProcessorChannelInputWithPromiseINS_3vio22user_anchor_node_group17Remove3DOFAnchorsEvEE"
           + 71;
      if ((v217 & 0x80000000) == 0)
        goto LABEL_223;
    }
    operator delete(v216);
    v183 = v201;
    if (!v215)
      goto LABEL_229;
    goto LABEL_227;
  }
LABEL_236:
  if (os_signpost_enabled((os_log_t)*v180))
  {
    v197 = *(_DWORD *)(a2 + 48);
    v198 = *(_DWORD *)(a2 + 52);
    *(_DWORD *)__dst = *((_QWORD *)v187 + 215);
    *(_DWORD *)&__dst[4] = v181;
    *(_WORD *)&__dst[8] = 1024;
    *(_DWORD *)&__dst[10] = v183;
    *(_WORD *)&__dst[14] = 1024;
    *(_DWORD *)&__dst[16] = v184;
    *(_WORD *)&__dst[20] = 1024;
    *(_DWORD *)&__dst[22] = v197;
    v208 = 1024;
    v209 = v198;
    LOWORD(v210) = 1024;
    *(_DWORD *)((char *)&v210 + 2) = v185 != 0;
    _os_signpost_emit_unreliably_with_name_impl();
  }
  return kdebug_trace();
}

void sub_20F7D4474(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, char a15, uint64_t a16, uint64_t a17, std::locale a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,int a26,__int16 a27,char a28,char a29,std::locale a30,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  uint64_t v35;
  uint64_t v36;

  *(_BYTE *)(v36 + 528) = a15;
  sub_20F2C524C(v35);
  sub_20EDB4278((uint64_t)&a29);
  _Unwind_Resume(a1);
}

void sub_20F7D4650()
{
  std::mutex::unlock(&stru_254A5A410);
  JUMPOUT(0x20F7D4664);
}

void sub_20F7D4674()
{
  std::mutex::unlock(&stru_254A5A410);
  JUMPOUT(0x20F7D4688);
}

void sub_20F7D46AC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unsigned int v9;
  _QWORD *v10;
  int8x8_t v11;
  uint8x8_t v12;
  unint64_t v13;
  uint64_t **v14;
  uint64_t *v15;
  uint64_t v16;
  unint64_t v18;
  uint64_t v20;
  _BOOL4 v21;
  unsigned int *v22;
  uint64_t *v23;
  uint64_t v24;
  unint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  _QWORD *v32;
  unsigned int v33;
  unsigned int v34;
  BOOL v35;
  char *v36;
  uint64_t v37;
  char *v38;
  int64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  char *v45;
  unsigned int *v46;
  int64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  char *v52;
  char *v53;
  uint64_t v54;
  __int128 v55;
  unsigned int v56;
  uint64_t **v57;
  uint64_t *v58;
  uint64_t **v59;
  unsigned int v60;
  _DWORD *v61;
  unsigned int v62;
  _DWORD *v63;
  uint64_t v64;
  uint64_t v65;
  _QWORD *v66;
  unsigned int *v67;
  _QWORD *v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t *v72;
  unint64_t v73;
  _QWORD *v74;
  unint64_t v75;
  unsigned int v76;
  unint64_t v77;
  unsigned int v78;
  unsigned int v79;
  unint64_t v80;
  uint64_t v81;
  _QWORD *v82;
  _QWORD *v83;
  _QWORD *v84;
  unint64_t v85;
  unint64_t v86;
  unint64_t *v87;
  unint64_t v88;
  _QWORD *v89;
  unint64_t v90;
  unint64_t v91;
  unint64_t v92;
  unint64_t *v93;
  unint64_t v94;
  _QWORD *v95;
  _DWORD *v96;
  unsigned int v97;
  unsigned int v98;
  unsigned int v99;
  unsigned int v100;
  uint64_t *v101;
  uint64_t **v102;
  uint64_t *v103;
  uint64_t *v104;
  uint64_t **v105;
  unsigned int v106;
  uint64_t **v107;
  uint64_t **v108;
  uint64_t *v109;
  uint64_t **v110;
  unsigned int v111;
  uint64_t **v112;
  _DWORD *v113;
  int64x2_t v114;
  _QWORD *v115;
  float64x2_t v116;
  float64x2_t v117;
  float64x2_t v118;
  float64x2_t v119;
  float64x2_t v120;
  float64x2_t v121;
  float64x2_t v122;
  float64x2_t v123;
  float64x2_t v124;
  float64x2_t v125;
  float64x2_t v126;
  float64x2_t v127;
  float64x2_t v128;
  int8x16_t v129;
  float64x2_t v131;
  int8x16_t v132;
  int8x16_t v133;
  int8x16_t v134;
  int8x16_t v135;
  int8x16_t v136;
  int8x16_t v137;
  float64x2_t v142;
  float64x2_t v143;
  int8x16_t v144;
  uint64_t v145;
  int v146;
  float64_t v147;
  unint64_t v148;
  BOOL v149;
  float64x2_t v150;
  float64x2_t v151;
  float64x2_t v152;
  float64x2_t v153;
  float64x2_t v154;
  float64x2_t v155;
  float64x2_t v156;
  float64x2_t v157;
  float64x2_t v158;
  float64x2_t v159;
  float64x2_t v160;
  float64x2_t v161;
  float64x2_t v162;
  float64x2_t v163;
  float64x2_t v164;
  float64x2_t v165;
  float64x2_t v166;
  float64x2_t v167;
  float64x2_t v168;
  float64x2_t v169;
  float64x2_t v170;
  float64_t v171;
  float64x2_t v172;
  float64x2_t v173;
  int8x16_t v174;
  float64x2_t v175;
  float64x2_t v176;
  float64x2_t v177;
  int64x2_t v178;
  float64x2_t v179;
  int64x2_t v180;
  float64x2_t v181;
  int8x16_t v182;
  float64x2_t v183;
  float64x2_t v184;
  float64x2_t v185;
  float64x2_t v186;
  float64x2_t v187;
  float64x2_t v188;
  float64x2_t v189;
  float64x2_t v190;
  float64x2_t v191;
  float64x2_t v192;
  float64x2_t v193;
  float64x2_t v194;
  float64x2_t v195;
  float64x2_t v196;
  float64x2_t v197;
  float64x2_t v198;
  float64x2_t v199;
  float64x2_t v200;
  float64x2_t v201;
  float64x2_t v202;
  float64x2_t v203;
  float64x2_t v204;
  float64x2_t v205;
  float64x2_t v206;
  float64x2_t v207;
  float64x2_t v208;
  float64x2_t v209;
  float64x2_t v210;
  float64x2_t v211;
  float64x2_t v212;
  float64x2_t v213;
  float64x2_t v214;
  float64x2_t v215;
  float64x2_t v216;
  float64x2_t v217;
  float64x2_t v218;
  float64x2_t v219;
  float64x2_t v220;
  float64x2_t v221;
  float64x2_t v222;
  float64x2_t v223;
  float64x2_t v224;
  float64x2_t v225;
  float64x2_t v226;
  float64x2_t v227;
  float64x2_t v228;
  float64x2_t v229;
  float64x2_t v230;
  float64x2_t v231;
  float64x2_t v232;
  float64x2_t v234;
  float64x2_t v235;
  float64x2_t v236;
  float64x2_t v237;
  float64x2_t v238;
  float64x2_t v239;
  float64x2_t v240;
  float64x2_t v241;
  float64x2_t v242;
  float64x2_t v243;
  float64x2_t v244;
  float64x2_t v245;
  float64x2_t v246;
  float64x2_t v247;
  float64x2_t v248;
  float64x2_t v249;
  float64x2_t v250;
  int8x16_t v251;
  int8x16_t v252;
  float64x2_t v253;
  int8x16_t v254;
  int8x16_t v257;
  int8x16_t v258;
  float64x2_t v260;
  int8x16_t v261;
  int8x16_t v262;
  float64x2_t v263;
  int8x16_t v264;
  int8x16_t v265;
  double v266;
  uint64_t v267;
  int v268;
  float64x2_t v269;
  float64_t v270;
  float64x2_t v271;
  BOOL v272;
  float64x2_t v273;
  float64x2_t v274;
  float64x2_t v275;
  float64x2_t v276;
  float64x2_t v277;
  float64x2_t v278;
  float64x2_t v279;
  float64x2_t v280;
  float64x2_t v281;
  float64x2_t v282;
  float64x2_t v283;
  float64x2_t v284;
  float64x2_t v285;
  float64x2_t v286;
  float64x2_t v287;
  float64x2_t v288;
  float64x2_t v289;
  float64x2_t v290;
  float64x2_t v291;
  float64x2_t v292;
  float64x2_t v293;
  float64x2_t v294;
  float64x2_t v295;
  float64x2_t v296;
  float64x2_t v297;
  float64x2_t v298;
  float64x2_t v299;
  float64x2_t v300;
  int64x2_t v301;
  float64x2_t v302;
  float64x2_t v303;
  float64x2_t v304;
  float64x2_t v305;
  float64x2_t v306;
  float64x2_t v307;
  float64x2_t v308;
  float64x2_t v309;
  float64x2_t v310;
  float64x2_t v311;
  float64x2_t v312;
  float64x2_t v313;
  float64x2_t v314;
  float64x2_t v315;
  float64x2_t v316;
  float64x2_t v317;
  float64x2_t v318;
  float64x2_t v319;
  float64x2_t v320;
  float64x2_t v321;
  float64x2_t v322;
  float64x2_t v323;
  float64x2_t v324;
  float64x2_t v325;
  float64x2_t v326;
  float64x2_t v327;
  float64x2_t v328;
  float64x2_t v329;
  float64x2_t v330;
  float64x2_t v331;
  float64x2_t v332;
  float64x2_t v333;
  float64x2_t v334;
  float64x2_t v335;
  float64x2_t v336;
  float64x2_t v337;
  float64x2_t v338;
  float64x2_t v339;
  float64x2_t v340;
  float64x2_t v341;
  float64x2_t v342;
  float64x2_t v343;
  float64x2_t v344;
  float64x2_t v345;
  float64x2_t v346;
  float64x2_t v347;
  float64x2_t v348;
  float64x2_t v349;
  float64x2_t v350;
  float64x2_t v351;
  float64x2_t v352;
  float64x2_t v353;
  float64x2_t v354;
  float64x2_t v355;
  float64x2_t v357;
  float64x2_t v358;
  float64x2_t v359;
  float64x2_t v360;
  float64x2_t v361;
  float64x2_t v363;
  float64x2_t v364;
  float64x2_t v365;
  float64x2_t v366;
  float64x2_t v367;
  float64x2_t v368;
  float64x2_t v369;
  float64x2_t v370;
  float64x2_t v371;
  float64x2_t v373;
  float64x2_t v375;
  float64x2_t v376;
  float64x2_t v377;
  int8x16_t v378;
  float64x2_t v380;
  int8x16_t v381;
  float64x2_t v382;
  int8x16_t v383;
  int8x16_t v384;
  int8x16_t v385;
  int8x16_t v386;
  uint64_t v387;
  int v388;
  float64x2_t v389;
  double v390;
  float64x2_t v391;
  BOOL v392;
  float64x2_t v393;
  float64x2_t v394;
  float64x2_t v395;
  float64x2_t v396;
  float64x2_t v397;
  float64x2_t v398;
  int8x16_t v399;
  float64x2_t v400;
  int8x16_t v401;
  uint64_t v402;
  float64x2_t v403;
  float64x2_t v404;
  float64x2_t v405;
  float64x2_t v406;
  float64x2_t v407;
  float64x2_t v408;
  float64x2_t v409;
  float64x2_t v410;
  float64x2_t v411;
  float64x2_t v412;
  float64x2_t v413;
  float64x2_t v414;
  float64x2_t v415;
  float64x2_t v416;
  float64x2_t v417;
  float64x2_t v418;
  float64x2_t v419;
  float64x2_t v420;
  float64x2_t v421;
  int64x2_t v422;
  int64x2_t v423;
  int64x2_t v424;
  int64x2_t v425;
  int64x2_t v426;
  int64x2_t v427;
  float64x2_t v428;
  float64x2_t v429;
  float64x2_t v430;
  float64x2_t v431;
  float64x2_t v432;
  float64x2_t v433;
  float64x2_t v434;
  float64x2_t v435;
  float64x2_t v436;
  float64x2_t v437;
  float64x2_t v438;
  float64x2_t v439;
  float64x2_t v440;
  float64x2_t v441;
  float64x2_t v442;
  float64x2_t v443;
  float64x2_t v444;
  float64x2_t v445;
  float64x2_t v446;
  float64x2_t v447;
  float64x2_t v448;
  float64x2_t v449;
  float64x2_t v450;
  float64x2_t v451;
  float64x2_t v452;
  int64x2_t v453;
  int64x2_t v454;
  int64x2_t v455;
  int64x2_t v456;
  int64x2_t v457;
  int64x2_t v458;
  float64x2_t v459;
  float64x2_t v460;
  float64x2_t v461;
  float64x2_t v462;
  float64x2_t v463;
  float64x2_t v464;
  float64x2_t v465;
  float64x2_t v466;
  float64x2_t v467;
  float64x2_t v468;
  float64x2_t v469;
  float64x2_t v470;
  float64x2_t v471;
  float64x2_t v472;
  float64x2_t v473;
  float64x2_t v474;
  float64x2_t v475;
  float64x2_t v476;
  float64x2_t v477;
  float64x2_t v478;
  float64x2_t v479;
  float64x2_t v480;
  float64x2_t v481;
  float64x2_t v482;
  float64x2_t v483;
  int64x2_t v484;
  int64x2_t v485;
  int64x2_t v486;
  int64x2_t v487;
  int64x2_t v488;
  float64x2_t v489;
  float64x2_t v490;
  float64x2_t v491;
  float64x2_t v492;
  float64x2_t v493;
  float64x2_t v494;
  float64x2_t v495;
  float64x2_t v496;
  float64x2_t v497;
  float64x2_t v498;
  float64x2_t v499;
  float64x2_t v500;
  float64x2_t v501;
  float64x2_t v502;
  float64x2_t v503;
  float64x2_t v504;
  float64x2_t v505;
  float64x2_t v506;
  float64x2_t v507;
  float64x2_t v508;
  float64x2_t v509;
  float64x2_t v510;
  float64x2_t v511;
  float64x2_t v512;
  float64x2_t v513;
  float64x2_t v514;
  float64x2_t v515;
  float64x2_t v516;
  float64x2_t v517;
  float64x2_t v518;
  float64x2_t v519;
  float64x2_t v520;
  float64x2_t v521;
  float64x2_t v522;
  float64x2_t v523;
  float64x2_t v524;
  float64x2_t v525;
  float64x2_t v526;
  float64x2_t v527;
  float64x2_t v528;
  float64x2_t v529;
  float64x2_t v530;
  float64x2_t v531;
  float64x2_t v532;
  float64x2_t v533;
  float64x2_t v534;
  float64x2_t v535;
  float64x2_t v536;
  float64x2_t v537;
  float64x2_t v538;
  float64x2_t v539;
  float64x2_t v540;
  float64x2_t v541;
  float64x2_t v542;
  float64x2_t v543;
  float64x2_t v544;
  float64x2_t v545;
  float64x2_t v546;
  float64x2_t v547;
  float64x2_t v548;
  float64x2_t v549;
  float64x2_t v550;
  float64x2_t v551;
  float64x2_t v552;
  float64x2_t v553;
  float64x2_t v554;
  float64x2_t v555;
  float64x2_t v556;
  float64x2_t v557;
  float64x2_t v558;
  float64x2_t v559;
  float64x2_t v560;
  float64x2_t v561;
  float64x2_t v562;
  float64x2_t v563;
  float64x2_t v564;
  float64x2_t v565;
  float64x2_t v566;
  float64x2_t v567;
  float64x2_t v568;
  float64x2_t v569;
  float64x2_t v570;
  float64x2_t v571;
  float64x2_t v572;
  float64x2_t v573;
  float64x2_t v574;
  uint64_t v575;
  uint64_t v576;
  uint64_t v577;
  uint64_t v578;
  _BOOL4 v579;
  int v580;
  int v581;
  unint64_t v582;
  unint64_t v583;
  uint64_t v584;
  size_t v585;
  const char *v586;
  unsigned __int8 v587;
  unsigned __int8 v588;
  const char *v589;
  size_t v590;
  uint64_t *v591;
  unsigned int v592;
  const char *v593;
  int v594;
  unint64_t v595;
  uint64_t v596;
  uint64_t v597;
  uint64_t *v598;
  NSObject *v599;
  unint64_t v600;
  uint64_t v601;
  uint64_t v602;
  size_t v603;
  std::__shared_weak_count_vtbl *v604;
  std::__shared_weak_count *v605;
  std::__shared_weak_count *v606;
  unint64_t *p_shared_owners;
  unint64_t v608;
  unint64_t v609;
  uint64_t v610;
  uint64_t v611;
  uint64_t v612;
  uint64_t v613;
  float64_t v614;
  std::__shared_weak_count *v615;
  unint64_t *v616;
  unint64_t v617;
  std::__shared_weak_count *v618;
  unint64_t *v619;
  unint64_t v620;
  uint64_t v621;
  std::__shared_weak_count *v622;
  unint64_t *v623;
  unint64_t v624;
  std::__shared_weak_count *v625;
  unint64_t *v626;
  unint64_t v627;
  std::__shared_weak_count *v628;
  unint64_t *v629;
  unint64_t v630;
  std::__shared_weak_count *v631;
  unint64_t *v632;
  unint64_t v633;
  void *v634;
  std::__shared_weak_count *v635;
  unint64_t *v636;
  unint64_t v637;
  uint64_t v638;
  char *v639;
  char *v640;
  char *v641;
  unint64_t v642;
  unint64_t v643;
  unsigned int *v644;
  char *v645;
  unsigned int v646;
  uint64_t v647;
  unint64_t v648;
  char *v649;
  _DWORD *v650;
  char *v651;
  uint64_t v652;
  unint64_t v653;
  uint64_t v654;
  unint64_t v655;
  _BYTE *v656;
  unsigned int *v657;
  char *v658;
  unint64_t v659;
  uint64_t v660;
  uint64_t v661;
  char *v662;
  _OWORD *v663;
  char *v664;
  uint64_t v665;
  __int128 v666;
  unsigned int v667;
  uint64_t v668;
  unint64_t v669;
  unint64_t v670;
  unsigned int *v671;
  char *v672;
  unsigned int v673;
  uint64_t *v674;
  uint64_t v675;
  uint64_t *v676;
  uint64_t *v677;
  uint64_t *v678;
  unint64_t v680;
  unsigned int v681;
  uint64_t *v682;
  float64x2_t v683;
  float64_t v684;
  float64x2_t v685;
  float64_t v686;
  float64x2_t v687;
  float64x2_t v688;
  float64x2_t v689;
  float64x2_t v690;
  float64x2_t v691;
  int8x16_t v692;
  float64x2_t v693;
  float64x2_t v694;
  int8x16_t v695;
  float64x2_t v696;
  float64x2_t v697;
  float64x2_t v698;
  float64x2_t v699;
  float64x2_t v700;
  float64x2_t v701;
  float64x2_t v702;
  float64x2_t v703;
  float64x2_t v704;
  float64x2_t v705;
  float64x2_t v706;
  float64x2_t v707;
  float64x2_t v708;
  float64x2_t v709;
  uint64_t v710;
  float64x2_t v711;
  float64x2_t v712;
  float64x2_t v713;
  float64x2_t v714;
  uint64_t v715;
  float64x2_t v716;
  float64x2_t v717;
  float64x2_t v718;
  float64x2_t v719;
  float64_t v720;
  float64x2_t v721;
  float64x2_t v722;
  float64x2_t v723;
  float64x2_t v724;
  float64x2_t v725;
  float64x2_t v726;
  float64x2_t v727;
  float64x2_t v728;
  float64_t v729;
  float64x2_t v730;
  float64x2_t v731;
  int8x16_t v732;
  float64x2_t v733;
  float64x2_t v734;
  float64x2_t v735;
  float64x2_t v736;
  float64x2_t v737;
  float64x2_t v738;
  float64x2_t v739;
  double v740;
  float64x2_t v741;
  float64x2_t v742;
  double v743;
  float64x2_t v744;
  float64x2_t v745;
  unint64_t v746;
  float64x2_t v747;
  float64x2_t v748;
  unint64_t v749;
  float64x2_t v750;
  double v751;
  float64x2_t v752;
  float64x2_t v753;
  unint64_t v754;
  float64x2_t v755;
  unint64_t v756;
  double v757;
  float64x2_t v758;
  double v759;
  float64x2_t v760;
  double v761;
  float64x2_t v762;
  float64x2_t v763;
  double v764;
  double v765;
  unint64_t v766;
  float64x2_t v767;
  double v768;
  float64x2_t v769;
  unint64_t v770;
  float64x2_t v771;
  float64_t v772;
  float64x2_t v773;
  float64x2_t v774;
  float64_t v775;
  float64x2_t v776;
  uint64_t v777;
  float64_t v778;
  float64x2_t v779;
  uint64_t v780;
  float64x2_t v781;
  float64x2_t v782;
  uint64_t v783;
  float64x2_t v784;
  unint64_t v785;
  float64x2_t v786;
  float64x2_t v787;
  float64x2_t v788;
  float64_t v789;
  float64x2_t v790;
  float64x2_t v791;
  float64x2_t v792;
  float64x2_t v793;
  float64x2_t v794;
  float64x2_t v795;
  float64x2_t v796;
  float64x2_t v797;
  unint64_t v798;
  float64x2_t v799;
  uint64_t v800;
  float64x2_t v801;
  float64x2_t v802;
  uint64_t v803;
  float64x2_t v804;
  float64x2_t v805;
  uint64_t v806;
  float64x2_t v807;
  unsigned int *v808;
  uint64_t v809;
  double v810;
  float64x2_t v811;
  int8x16_t v812;
  float64x2_t v813;
  int8x16_t v814;
  float64x2_t v815;
  float64x2_t v816;
  float64x2_t v817;
  int8x16_t v818;
  float64x2_t v819;
  float64x2_t v820;
  int8x16_t v821;
  float64x2_t v822;
  float64x2_t v823;
  int8x16_t v824;
  float64x2_t v825;
  float64x2_t v826;
  int8x16_t v827;
  float64x2_t v828;
  float64x2_t v829;
  float64x2_t v830;
  float64x2_t v831;
  float64x2_t v832;
  double v833;
  double v834;
  double v835;
  float64x2_t v836;
  double v837;
  float64x2_t v838;
  float64x2_t v839;
  float64x2_t v840;
  double v841;
  double v842;
  double v843;
  double v844;
  int8x16_t v845;
  unint64_t v846;
  float64x2_t v847;
  float64x2_t v848;
  float64x2_t v849;
  float64x2_t v850;
  double v851;
  float64x2_t v852;
  double v853;
  float64x2_t v854;
  double v855;
  double v856;
  double v857;
  double v858;
  double v859;
  double v860;
  double v861;
  double v862;
  float64x2_t v863;
  float64x2_t v864;
  float64x2_t v865;
  float64x2_t v866;
  int8x16_t v867;
  float64x2_t v868;
  int8x16_t v869;
  float64x2_t v870;
  float64x2_t v871;
  float64x2_t v872;
  unsigned int v873;
  float64x2_t v874;
  float64x2_t v875;
  float64x2_t v876;
  float64x2_t v877;
  int8x16_t v878;
  float64x2_t v879;
  float64x2_t v880;
  float64x2_t v881;
  float64x2_t v882;
  float64x2_t v883;
  float64x2_t v884;
  float64x2_t v885;
  float64x2_t v886;
  float64x2_t v887;
  float64x2_t v888;
  float64x2_t v889;
  float64x2_t v890;
  float64x2_t v891;
  size_t v892;
  float64x2_t v893;
  float64x2_t v894;
  uint64_t v895;
  unsigned int *v896;
  int8x16_t v897;
  float64x2_t v898;
  float64x2_t v899;
  uint64_t v900;
  unsigned int v901;
  uint64_t v902;
  _OWORD v903[18];
  float64x2_t v904[8];
  float64x2_t v905;
  int64x2_t v906;
  uint64_t **v907;
  uint64_t *v908;
  uint64_t v909;
  void *v910;
  char *v911;
  char *v912;
  uint64_t v913;
  int64x2_t object[19];
  float64x2_t v915;
  float64x2_t v916;
  float64x2_t v917;
  float64x2_t v918;
  float64x2_t v919;
  float64x2_t v920;
  float64x2_t v921;
  float64x2_t v922;
  float64x2_t v923;
  float64x2_t v924;
  float64x2_t v925;
  float64x2_t v926;
  float64x2_t v927;
  float64x2_t v928;
  float64x2_t v929;
  float64x2_t v930;
  float64x2_t v931;
  float64x2_t v932;
  float64x2_t v933;
  _BYTE v934[32];
  float64x2_t v935;
  _BYTE v936[32];
  float64x2_t v937;
  _BYTE v938[32];
  float64x2_t v939;
  _BYTE v940[32];
  float64x2_t v941;
  _BYTE v942[32];
  float64x2_t v943;
  _BYTE v944[32];

  v2 = a1;
  v3 = *(uint64_t **)(a1 + 992);
  if (!v3)
    goto LABEL_13;
  v4 = *(_QWORD *)a2;
  v5 = *(unsigned int *)(a2 + 8);
  v6 = a1 + 992;
  do
  {
    v7 = v3[4];
    if (v7 < v4)
    {
      ++v3;
    }
    else if (v7 == v4)
    {
      if (*((_DWORD *)v3 + 10) < v5)
        ++v3;
      else
        v6 = (uint64_t)v3;
    }
    else
    {
      v6 = (uint64_t)v3;
    }
    v3 = (uint64_t *)*v3;
  }
  while (v3);
  if (v6 == a1 + 992 || (v8 = *(_QWORD *)(v6 + 32), v4 < v8) || v4 == v8 && v5 < *(_DWORD *)(v6 + 40))
  {
LABEL_13:
    sub_20F7C3AB0(*(_QWORD **)(a1 + 1008), a2);
    return;
  }
  v9 = *(_DWORD *)(v6 + 48);
  v912 = 0;
  v911 = 0;
  v910 = 0;
  v10 = *(_QWORD **)(a1 + 1008);
  v11 = (int8x8_t)v10[1];
  v678 = (uint64_t *)v6;
  v901 = v9;
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8(v11);
    v12.i16[0] = vaddlv_u8(v12);
    if (v12.u32[0] > 1uLL)
    {
      v13 = v5;
      if (*(_QWORD *)&v11 <= v5)
        v13 = v5 % *(_QWORD *)&v11;
    }
    else
    {
      v13 = (v11.i32[0] - 1) & v5;
    }
    v14 = *(uint64_t ***)(*v10 + 8 * v13);
    if (v14)
    {
      v15 = *v14;
      if (*v14)
      {
        if (v12.u32[0] < 2uLL)
        {
          v16 = *(_QWORD *)&v11 - 1;
          while (1)
          {
            v20 = v15[1];
            if (v20 == v5)
            {
              if (v15[2] == v4 && *((_DWORD *)v15 + 6) == (_DWORD)v5)
                goto LABEL_43;
            }
            else if ((v20 & v16) != v13)
            {
              goto LABEL_42;
            }
            v15 = (uint64_t *)*v15;
            if (!v15)
              goto LABEL_42;
          }
        }
        do
        {
          v18 = v15[1];
          if (v18 == v5)
          {
            _ZF = v15[2] == v4 && *((_DWORD *)v15 + 6) == (_DWORD)v5;
            if (_ZF)
              goto LABEL_43;
          }
          else
          {
            if (v18 >= *(_QWORD *)&v11)
              v18 %= *(_QWORD *)&v11;
            if (v18 != v13)
              break;
          }
          v15 = (uint64_t *)*v15;
        }
        while (v15);
      }
    }
  }
LABEL_42:
  v21 = sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/MapOptimization/src/PoseGraphOptimizer.cpp", 345, (uint64_t)"remove_node_iter != graph_->nodes().end()", 41, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0);
  v15 = 0;
  if (v21)
    abort();
LABEL_43:
  v909 = 0;
  v908 = 0;
  v907 = &v908;
  v22 = (unsigned int *)v15[6];
  v682 = v15;
  v896 = (unsigned int *)v15[7];
  v809 = v2;
  if (v22 == v896)
    goto LABEL_328;
  do
  {
    v24 = *(_QWORD *)(v2 + 976);
    v25 = *v22;
    v27 = *(_QWORD **)(v24 + 240);
    v26 = *(_QWORD **)(v24 + 248);
    if (v26 != v27)
    {
      v28 = 0xB195E8EFDB195E8FLL * (v26 - v27);
      do
      {
        v29 = v28 >> 1;
        v30 = &v27[111 * (v28 >> 1)];
        v31 = *v30;
        v32 = v30 + 111;
        v28 += ~(v28 >> 1);
        if (v31 < v25)
          v27 = v32;
        else
          v28 = v29;
      }
      while (v28);
    }
    if ((v26 == v27 || *v27 != v25)
      && (v27 = v26,
          sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/MapOptimization/src/PoseGraphOptimizer.cpp", 369, (uint64_t)"factor_iter != ls_->graph().endFactor<VIOPoseFactor4DoF<double>>()", 66, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))|| !*((_BYTE *)v27 + 728)&& sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/MapOptimization/src/PoseGraphOptimizer.cpp", 370, (uint64_t)"factor_iter->second.factor.factor_valid()", 41, (uint64_t)"Invalid factor is being picked", 30, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v33 = *(_DWORD *)(v27[92] + 16);
    v34 = *(_DWORD *)(v27[93] + 16);
    v35 = v33 == v901 || v34 == v901;
    if (!v35
      && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/MapOptimization/src/PoseGraphOptimizer.cpp", 374, (uint64_t)"state_var_id1 == remove_state_var_id || state_var_id2 == remove_state_var_id", 76, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0)|| v33 == v34&& sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/MapOptimization/src/PoseGraphOptimizer.cpp", 375, (uint64_t)"state_var_id1 != state_var_id2", 30, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v36 = v911;
    if (v911 < v912)
    {
      *(_DWORD *)v911 = *v22;
      v37 = (uint64_t)(v36 + 4);
      goto LABEL_86;
    }
    v38 = (char *)v910;
    v39 = v911 - (_BYTE *)v910;
    v40 = (v911 - (_BYTE *)v910) >> 2;
    v41 = v40 + 1;
    if ((unint64_t)(v40 + 1) >> 62)
      sub_20E867F44();
    v42 = v912 - (_BYTE *)v910;
    if ((v912 - (_BYTE *)v910) >> 1 > v41)
      v41 = v42 >> 1;
    if ((unint64_t)v42 >= 0x7FFFFFFFFFFFFFFCLL)
      v43 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v43 = v41;
    if (v43)
    {
      if (v43 >> 62)
        sub_20E877A38();
      v44 = v43;
      v45 = (char *)operator new(4 * v43);
      v43 = v44;
      v46 = (unsigned int *)&v45[4 * v40];
      *v46 = *v22;
      v37 = (uint64_t)(v46 + 1);
      v47 = v36 - v38;
      if (v36 == v38)
        goto LABEL_84;
LABEL_78:
      v48 = v47 - 4;
      if (v48 < 0x2C)
        goto LABEL_396;
      if ((unint64_t)(v36 - v45 - v39) < 0x20)
        goto LABEL_396;
      v49 = (v48 >> 2) + 1;
      v50 = 4 * (v49 & 0x7FFFFFFFFFFFFFF8);
      v51 = &v36[-v50];
      v46 = (unsigned int *)((char *)v46 - v50);
      v52 = &v45[4 * v40 - 16];
      v53 = v36 - 16;
      v54 = v49 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        v55 = *(_OWORD *)v53;
        *((_OWORD *)v52 - 1) = *((_OWORD *)v53 - 1);
        *(_OWORD *)v52 = v55;
        v52 -= 32;
        v53 -= 32;
        v54 -= 8;
      }
      while (v54);
      v36 = v51;
      if (v49 != (v49 & 0x7FFFFFFFFFFFFFF8))
      {
LABEL_396:
        do
        {
          v56 = *((_DWORD *)v36 - 1);
          v36 -= 4;
          *--v46 = v56;
        }
        while (v36 != v38);
      }
      goto LABEL_84;
    }
    v45 = 0;
    v46 = (unsigned int *)(4 * v40);
    *(_DWORD *)(4 * v40) = *v22;
    v37 = 4 * v40 + 4;
    v47 = v36 - v38;
    if (v36 != v38)
      goto LABEL_78;
LABEL_84:
    v910 = v46;
    v912 = &v45[4 * v43];
    if (v38)
      operator delete(v38);
LABEL_86:
    v57 = &v908;
    v911 = (char *)v37;
    v58 = v908;
    v59 = &v908;
    if (v33 == v901)
    {
      if (!v908)
      {
LABEL_94:
        v61 = operator new(0x38uLL);
        v61[8] = v34;
LABEL_103:
        *((_QWORD *)v61 + 5) = 0;
        *((_QWORD *)v61 + 6) = 0;
        *(_QWORD *)v61 = 0;
        *((_QWORD *)v61 + 1) = 0;
        *((_QWORD *)v61 + 2) = v57;
        *v59 = (uint64_t *)v61;
        v57 = (uint64_t **)v61;
        v2 = v809;
        if (*v907)
        {
          v57 = (uint64_t **)v61;
          v907 = (uint64_t **)*v907;
          v61 = *v59;
        }
        sub_20E868578(v908, (uint64_t *)v61);
        ++v909;
        goto LABEL_46;
      }
      while (1)
      {
        while (1)
        {
          v57 = (uint64_t **)v58;
          v60 = *((_DWORD *)v58 + 8);
          if (v34 >= v60)
            break;
          v58 = *v57;
          v59 = v57;
          if (!*v57)
            goto LABEL_94;
        }
        if (v60 >= v34)
          break;
        v58 = v57[1];
        if (!v58)
        {
          v59 = v57 + 1;
          goto LABEL_94;
        }
      }
      v2 = v809;
    }
    else
    {
      v2 = v809;
      if (!v908)
      {
LABEL_102:
        v61 = operator new(0x38uLL);
        v61[8] = v33;
        goto LABEL_103;
      }
      while (1)
      {
        while (1)
        {
          v57 = (uint64_t **)v58;
          v62 = *((_DWORD *)v58 + 8);
          if (v33 >= v62)
            break;
          v58 = *v57;
          v59 = v57;
          if (!*v57)
            goto LABEL_102;
        }
        if (v62 >= v33)
          break;
        v58 = v57[1];
        if (!v58)
        {
          v59 = v57 + 1;
          goto LABEL_102;
        }
      }
    }
LABEL_46:
    v23 = (uint64_t *)*((_QWORD *)v22 + 2);
    *((_DWORD *)v57 + 12) = v22[6];
    v57[5] = v23;
    v22 += 118;
  }
  while (v22 != v896);
  v63 = v910;
  v808 = (unsigned int *)v911;
  if (v910 != v911)
  {
    v64 = *(_QWORD *)(v2 + 976);
    v65 = *(_QWORD *)(v64 + 240);
    v66 = *(_QWORD **)(v64 + 248);
    if (v66 == (_QWORD *)v65)
    {
      *(_BYTE *)(v65 + 728) = 0;
    }
    else
    {
      v67 = (unsigned int *)v910;
      do
      {
        v69 = *v67;
        v68 = (_QWORD *)v65;
        v70 = 0xB195E8EFDB195E8FLL * (((uint64_t)v66 - v65) >> 3);
        do
        {
          v71 = v70 >> 1;
          v72 = &v68[111 * (v70 >> 1)];
          v73 = *v72;
          v74 = v72 + 111;
          v70 += ~(v70 >> 1);
          if (v73 < v69)
            v68 = v74;
          else
            v70 = v71;
        }
        while (v70);
        if (v66 == v68 || *v68 != v69)
          v68 = v66;
        *((_BYTE *)v68 + 728) = 0;
        ++v67;
      }
      while (v67 != v808);
    }
    v75 = 0;
    v76 = 0;
    while (1)
    {
      v846 = v75;
      v75 = ++v76;
      v77 = v808 - v63;
      if (v77 > v76)
        break;
LABEL_122:
      if (v77 <= v75)
        goto LABEL_328;
    }
    v680 = v76;
    v681 = v76;
    v78 = v76;
    while (2)
    {
      v80 = v63[v846];
      if (v80 == v63[v75])
      {
        if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/MapOptimization/src/PoseGraphOptimizer.cpp", 402, (uint64_t)"remove_factor_ids[first_factor_index] != remove_factor_ids[sec_factor_index]", 76, (uint64_t)"No two sames factors", 20, (void (*)(void **))sub_21023DDB0))
        {
          abort();
        }
        v80 = v63[v846];
      }
      v81 = *(_QWORD *)(v2 + 976);
      v83 = *(_QWORD **)(v81 + 240);
      v82 = *(_QWORD **)(v81 + 248);
      v84 = v83;
      if (v82 != v83)
      {
        v85 = 0xB195E8EFDB195E8FLL * (v82 - v83);
        v84 = v83;
        do
        {
          v86 = v85 >> 1;
          v87 = &v84[111 * (v85 >> 1)];
          v88 = *v87;
          v89 = v87 + 111;
          v85 += ~(v85 >> 1);
          if (v88 < v80)
            v84 = v89;
          else
            v85 = v86;
        }
        while (v85);
      }
      if (v82 == v84 || *v84 != v80)
        v84 = v82;
      v90 = v63[v75];
      if (v82 != v83)
      {
        v91 = 0xB195E8EFDB195E8FLL * (v82 - v83);
        do
        {
          v92 = v91 >> 1;
          v93 = &v83[111 * (v91 >> 1)];
          v94 = *v93;
          v95 = v93 + 111;
          v91 += ~(v91 >> 1);
          if (v94 < v90)
            v83 = v95;
          else
            v91 = v92;
        }
        while (v91);
      }
      v96 = v63;
      v873 = v78;
      if (v82 != v83 && *v83 == v90)
      {
        v97 = *(_DWORD *)(v84[93] + 16);
        v98 = v97;
        if (v97 == v901)
          goto LABEL_148;
LABEL_152:
        v99 = *(_DWORD *)(v83[92] + 16);
        v100 = v99;
        if (v99 == v901)
          goto LABEL_153;
LABEL_149:
        if (v98 != v100)
          goto LABEL_154;
LABEL_125:
        v2 = v809;
        v79 = v78;
        v63 = v96;
LABEL_126:
        v75 = v79 + 1;
        v78 = v79 + 1;
        if (v75 >= v808 - v63)
        {
          v77 = v808 - v63;
          v76 = v681;
          v75 = v680;
          goto LABEL_122;
        }
        continue;
      }
      break;
    }
    v83 = v82;
    v97 = *(_DWORD *)(v84[93] + 16);
    v98 = v97;
    if (v97 != v901)
      goto LABEL_152;
LABEL_148:
    v98 = *(_DWORD *)(v84[92] + 16);
    v99 = *(_DWORD *)(v83[92] + 16);
    v100 = v99;
    if (v99 != v901)
      goto LABEL_149;
LABEL_153:
    v100 = *(_DWORD *)(v83[93] + 16);
    if (v98 == v100)
      goto LABEL_125;
LABEL_154:
    if (v98 == v901
      && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/MapOptimization/src/PoseGraphOptimizer.cpp", 440, (uint64_t)"node_id1 != remove_state_var_id", 31, (uint64_t)"state variable id error", 23, (void (*)(void **))sub_21023DDB0)|| v100 == v901&& sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/MapOptimization/src/PoseGraphOptimizer.cpp", 441, (uint64_t)"node_id2 != remove_state_var_id", 31, (uint64_t)"state variable id error", 23, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v101 = v908;
    if (!v908)
      goto LABEL_167;
    v102 = &v908;
    v103 = v908;
    do
    {
      v104 = v103;
      v105 = v102;
      v106 = *((_DWORD *)v103 + 8);
      v107 = (uint64_t **)(v103 + 1);
      if (v106 >= v98)
      {
        v107 = (uint64_t **)v104;
        v102 = (uint64_t **)v104;
      }
      v103 = *v107;
    }
    while (v103);
    if (v102 == &v908)
      goto LABEL_167;
    if (v106 < v98)
      v104 = (uint64_t *)v105;
    if (v98 < *((_DWORD *)v104 + 8))
LABEL_167:
      v102 = &v908;
    if (!v908)
      goto LABEL_178;
    v108 = &v908;
    do
    {
      v109 = v101;
      v110 = v108;
      v111 = *((_DWORD *)v101 + 8);
      v112 = (uint64_t **)(v101 + 1);
      if (v111 >= v100)
      {
        v112 = (uint64_t **)v109;
        v108 = (uint64_t **)v109;
      }
      v101 = *v112;
    }
    while (v101);
    if (v108 == &v908 || (v111 >= v100 ? (v113 = v109) : (v113 = v110), v100 < v113[8]))
LABEL_178:
      v108 = &v908;
    v2 = v809;
    if (v102 == &v908
      && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/MapOptimization/src/PoseGraphOptimizer.cpp", 445, (uint64_t)"var_id_to_state_id_iter1 != var_id_to_state_id_map.end()", 56, (uint64_t)"Cannot find node_id1", 20, (void (*)(void **))sub_21023DDB0)|| v108 == &v908&& sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/MapOptimization/src/PoseGraphOptimizer.cpp", 447, (uint64_t)"var_id_to_state_id_iter2 != var_id_to_state_id_map.end()", 56, (uint64_t)"Cannot find node_id2", 20, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v114 = *(int64x2_t *)(v102 + 5);
    v905 = *(float64x2_t *)(v108 + 5);
    v906 = v114;
    v115 = *(_QWORD **)(v809 + 1008);
    LODWORD(v915.f64[0]) = 0;
    object[0] = v114;
    object[1].i32[0] = -1;
    v933 = v905;
    *(_DWORD *)v934 = -1;
    v63 = v96;
    if (sub_20F7C25CC(v115, object[0].i64, (uint64_t *)&v933, (unsigned int *)&v915))
    {
      v79 = v873;
      goto LABEL_126;
    }
    v117 = *(float64x2_t *)(v84 + 87);
    v116 = *(float64x2_t *)(v84 + 89);
    v118 = *(float64x2_t *)(v84 + 83);
    v119 = *(float64x2_t *)(v84 + 85);
    v121 = *(float64x2_t *)(v84 + 79);
    v120 = *(float64x2_t *)(v84 + 81);
    v123 = *(float64x2_t *)(v84 + 75);
    v122 = *(float64x2_t *)(v84 + 77);
    v124 = *(float64x2_t *)(v83 + 87);
    v125 = *(float64x2_t *)(v83 + 89);
    v127 = *(float64x2_t *)(v83 + 83);
    v126 = *(float64x2_t *)(v83 + 85);
    v128 = *(float64x2_t *)(v83 + 79);
    v811 = *(float64x2_t *)(v83 + 81);
    _Q25 = *(float64x2_t *)(v84 + 39);
    v129 = *(int8x16_t *)(v84 + 41);
    v131 = *(float64x2_t *)(v84 + 45);
    v831 = *(float64x2_t *)(v84 + 43);
    v785 = vextq_s8((int8x16_t)v831, (int8x16_t)v831, 8uLL).u64[0];
    v132 = *(int8x16_t *)(v84 + 47);
    v829 = *(float64x2_t *)(v84 + 49);
    v770 = vextq_s8((int8x16_t)v829, (int8x16_t)v829, 8uLL).u64[0];
    *(_QWORD *)&v759 = vextq_s8(v132, v132, 8uLL).u64[0];
    *(_QWORD *)&v761 = vextq_s8(v129, v129, 8uLL).u64[0];
    *(_QWORD *)&v740 = vextq_s8((int8x16_t)_Q25, (int8x16_t)_Q25, 8uLL).u64[0];
    *(_QWORD *)&v743 = vextq_s8((int8x16_t)v131, (int8x16_t)v131, 8uLL).u64[0];
    v133 = *(int8x16_t *)(v84 + 53);
    v827 = *(int8x16_t *)(v84 + 55);
    v134 = *(int8x16_t *)(v84 + 51);
    v824 = *(int8x16_t *)(v84 + 61);
    v766 = vextq_s8(v827, v827, 8uLL).u64[0];
    *(_QWORD *)&v768 = vextq_s8(v824, v824, 8uLL).u64[0];
    v816 = *(float64x2_t *)(v84 + 59);
    v756 = vextq_s8((int8x16_t)v816, (int8x16_t)v816, 8uLL).u64[0];
    *(_QWORD *)&v757 = vextq_s8(v133, v133, 8uLL).u64[0];
    v812 = *(int8x16_t *)(v84 + 57);
    v746 = vextq_s8(v134, v134, 8uLL).u64[0];
    v749 = vextq_s8(v812, v812, 8uLL).u64[0];
    v135 = *(int8x16_t *)(v84 + 63);
    v818 = *(int8x16_t *)(v84 + 67);
    v814 = *(int8x16_t *)(v84 + 65);
    *(_QWORD *)&v751 = vextq_s8(v135, v135, 8uLL).u64[0];
    v754 = vextq_s8(v814, v814, 8uLL).u64[0];
    v136 = *(int8x16_t *)(v84 + 71);
    v821 = *(int8x16_t *)(v84 + 73);
    *(_QWORD *)&v764 = vextq_s8(v818, v818, 8uLL).u64[0];
    *(_QWORD *)&v765 = vextq_s8(v821, v821, 8uLL).u64[0];
    v797 = (float64x2_t)vextq_s8(*(int8x16_t *)(v84 + 69), *(int8x16_t *)(v84 + 69), 8uLL);
    v798 = vextq_s8(v136, v136, 8uLL).u64[0];
    v137 = *(int8x16_t *)(v83 + 45);
    v845 = *(int8x16_t *)(v83 + 43);
    *(_QWORD *)&v844 = vextq_s8(v845, v845, 8uLL).u64[0];
    v876 = *(float64x2_t *)(v83 + 41);
    *(_QWORD *)&v859 = vextq_s8((int8x16_t)v876, (int8x16_t)v876, 8uLL).u64[0];
    v839 = *(float64x2_t *)(v83 + 39);
    *(_QWORD *)&v833 = vextq_s8((int8x16_t)v839, (int8x16_t)v839, 8uLL).u64[0];
    v869 = *(int8x16_t *)(v83 + 49);
    *(_QWORD *)&v841 = vextq_s8(v869, v869, 8uLL).u64[0];
    v867 = *(int8x16_t *)(v83 + 47);
    *(_QWORD *)&v860 = vextq_s8(v867, v867, 8uLL).u64[0];
    *(_QWORD *)&v834 = vextq_s8(v137, v137, 8uLL).u64[0];
    v871 = *(float64x2_t *)(v83 + 55);
    *(_QWORD *)&v842 = vextq_s8((int8x16_t)v871, (int8x16_t)v871, 8uLL).u64[0];
    v880 = *(float64x2_t *)(v83 + 53);
    *(_QWORD *)&v856 = vextq_s8((int8x16_t)v880, (int8x16_t)v880, 8uLL).u64[0];
    v847 = *(float64x2_t *)(v83 + 51);
    *(_QWORD *)&v835 = vextq_s8((int8x16_t)v847, (int8x16_t)v847, 8uLL).u64[0];
    v890 = *(float64x2_t *)(v83 + 61);
    *(_QWORD *)&v843 = vextq_s8((int8x16_t)v890, (int8x16_t)v890, 8uLL).u64[0];
    v883 = *(float64x2_t *)(v83 + 59);
    *(_QWORD *)&v857 = vextq_s8((int8x16_t)v883, (int8x16_t)v883, 8uLL).u64[0];
    v874 = *(float64x2_t *)(v83 + 57);
    *(_QWORD *)&v837 = vextq_s8((int8x16_t)v874, (int8x16_t)v874, 8uLL).u64[0];
    v893 = *(float64x2_t *)(v83 + 67);
    *(_QWORD *)&v861 = vextq_s8((int8x16_t)v893, (int8x16_t)v893, 8uLL).u64[0];
    v886 = *(float64x2_t *)(v83 + 65);
    *(_QWORD *)&v855 = vextq_s8((int8x16_t)v886, (int8x16_t)v886, 8uLL).u64[0];
    v849 = *(float64x2_t *)(v83 + 63);
    *(_QWORD *)&v851 = vextq_s8((int8x16_t)v849, (int8x16_t)v849, 8uLL).u64[0];
    v897 = *(int8x16_t *)(v83 + 73);
    *(_QWORD *)&v810 = vextq_s8(v897, v897, 8uLL).u64[0];
    v889 = *(float64x2_t *)(v83 + 71);
    *(_QWORD *)&v858 = vextq_s8((int8x16_t)v889, (int8x16_t)v889, 8uLL).u64[0];
    v878 = *(int8x16_t *)(v83 + 69);
    *(_QWORD *)&v853 = vextq_s8(v878, v878, 8uLL).u64[0];
    __asm { FMOV            V0.2D, #1.0 }
    v710 = *(_QWORD *)&_Q0.f64[1];
    v711 = v125;
    v143 = *(float64x2_t *)(v83 + 75);
    v142 = *(float64x2_t *)(v83 + 77);
    v862 = *(double *)v137.i64;
    v736 = v142;
    v738 = v126;
    v792 = v143;
    v795 = v127;
    v713 = v128;
    v734 = v124;
    v763 = v120;
    if (v97 == v901)
    {
      v79 = v873;
      v144.i64[1] = *(_QWORD *)&v797.f64[1];
      v783 = v84[71];
      v715 = v84[69];
      if (v99 != v901)
        goto LABEL_187;
LABEL_205:
      v265.i64[0] = v814.i64[0];
    }
    else
    {
      v266 = *((double *)v84 + 69);
      v720 = *((double *)v84 + 77);
      v723 = *(float64x2_t *)(v84 + 87);
      v732 = *(int8x16_t *)(v84 + 89);
      v267 = 0;
      v268 = 0;
      object[0] = *(int64x2_t *)(v84 + 75);
      v789 = v123.f64[0];
      object[3] = (int64x2_t)v121;
      v269 = v121;
      *(_QWORD *)&v778 = vextq_s8((int8x16_t)v123, (int8x16_t)v123, 8uLL).u64[0];
      _Q0.f64[0] = v118.f64[1];
      v781 = _Q0;
      object[1].i64[0] = *(_QWORD *)&v122.f64[0];
      object[4].i64[0] = *(_QWORD *)&v120.f64[0];
      v726 = v118;
      object[6] = (int64x2_t)v118;
      v270 = v119.f64[0];
      object[7].i64[0] = *(_QWORD *)&v119.f64[0];
      v271.f64[0] = v120.f64[0];
      do
      {
        object[9].i64[v267] = 0;
        v272 = v268 < 2;
        if (v268 < 2)
          ++v268;
        else
          v268 = 0;
        if (v272)
          ++v267;
        else
          v267 += 4;
      }
      while (v267 != 18);
      v716 = (float64x2_t)object[3];
      v273 = (float64x2_t)vzip1q_s64(object[0], object[3]);
      v274 = (float64x2_t)vzip2q_s64(object[0], object[3]);
      v275 = vmlaq_n_f64(vmulq_n_f64(v273, _Q25.f64[0]), v274, v740);
      v698 = (float64x2_t)object[6];
      v701 = (float64x2_t)object[0];
      v773 = (float64x2_t)object[9];
      *(_QWORD *)&v276.f64[0] = vdupq_laneq_s64(object[6], 1).u64[0];
      *(_QWORD *)&v276.f64[1] = object[9].i64[1];
      v277 = (float64x2_t)vzip1q_s64(object[6], object[9]);
      v278 = vmlaq_n_f64(vmulq_n_f64(v277, _Q25.f64[0]), v276, v740);
      v704 = (float64x2_t)object[12];
      v707 = (float64x2_t)object[15];
      *(_QWORD *)&v279.f64[0] = vdupq_laneq_s64(object[12], 1).u64[0];
      *(_QWORD *)&v279.f64[1] = object[15].i64[1];
      v280 = (float64x2_t)vzip1q_s64(object[12], object[15]);
      v281 = vmlaq_n_f64(vmulq_n_f64(v280, _Q25.f64[0]), v279, v740);
      v689 = vmlaq_n_f64(vmulq_n_f64(v273, v131.f64[0]), v274, v743);
      v282 = vmlaq_n_f64(vmulq_n_f64(v277, v131.f64[0]), v276, v743);
      v283 = vmlaq_n_f64(vmulq_n_f64(v280, v131.f64[0]), v279, v743);
      v284 = vmlaq_n_f64(vmulq_n_f64(v273, *(double *)v134.i64), v274, *(double *)&v746);
      v285 = vmlaq_n_f64(vmulq_n_f64(v277, *(double *)v134.i64), v276, *(double *)&v746);
      v286 = vmlaq_n_f64(vmulq_n_f64(v280, *(double *)v134.i64), v279, *(double *)&v746);
      v287 = vmlaq_n_f64(vmulq_n_f64(v273, *(double *)v812.i64), v274, *(double *)&v749);
      v288 = vmlaq_n_f64(vmulq_n_f64(v277, *(double *)v812.i64), v276, *(double *)&v749);
      v289 = vmlaq_n_f64(vmulq_n_f64(v280, *(double *)v812.i64), v279, *(double *)&v749);
      v290 = vmlaq_n_f64(vmulq_n_f64(v273, *(double *)v135.i64), v274, v751);
      v291 = vmlaq_n_f64(vmulq_n_f64(v277, *(double *)v135.i64), v276, v751);
      v292 = vmlaq_n_f64(vmulq_n_f64(v280, *(double *)v135.i64), v279, v751);
      v293 = vmlaq_n_f64(vmulq_n_f64(v273, v266), v274, v797.f64[0]);
      v294 = vmlaq_n_f64(vmulq_n_f64(v277, v266), v276, v797.f64[0]);
      v295 = vmlaq_n_f64(vmulq_n_f64(v280, v266), v279, v797.f64[0]);
      v280.f64[0] = v778;
      v280.f64[1] = v120.f64[0];
      v274.f64[0] = v789;
      v276.f64[0] = v789;
      v276.f64[1] = v269.f64[1];
      v296 = vmulq_f64(v280, v723);
      v297 = (float64x2_t)vextq_s8((int8x16_t)v723, v732, 8uLL);
      v695 = (int8x16_t)vmlsq_f64(v296, v276, v297);
      v729 = v270;
      v276.f64[0] = v270;
      v276.f64[1] = v726.f64[0];
      v279.f64[0] = v720;
      v279.f64[1] = v789;
      v298 = vmulq_f64(v279, v297);
      v299 = vmulq_f64(v276, v297);
      v276.f64[0] = v781.f64[0];
      v276.f64[1] = v270;
      v300 = (float64x2_t)vzip1q_s64((int64x2_t)v732, (int64x2_t)v723);
      v301 = (int64x2_t)vmlsq_f64(v299, v276, v300);
      v276.f64[0] = v778;
      v276.f64[1] = v720;
      v271.f64[1] = v269.f64[0];
      v692 = (int8x16_t)vmlsq_f64(vmulq_f64(v269, v300), v271, v723);
      *(float64x2_t *)((char *)&object[1] + 8) = vmlsq_f64(v298, v276, v300);
      *(int8x16_t *)((char *)&object[4] + 8) = vextq_s8(v695, v692, 8uLL);
      v276.f64[0] = v789;
      v276.f64[1] = v778;
      *(int64x2_t *)((char *)&object[7] + 8) = v301;
      *(float64x2_t *)((char *)&object[10] + 8) = v276;
      *(float64x2_t *)((char *)&object[13] + 8) = v269;
      v301.i64[0] = *(_QWORD *)&v726.f64[0];
      v301.i64[1] = *(_QWORD *)&v781.f64[0];
      *(int64x2_t *)((char *)&object[16] + 8) = v301;
      v302 = (float64x2_t)vzip1q_s64(object[1], object[4]);
      v741 = (float64x2_t)object[1];
      v744 = (float64x2_t)object[4];
      v303 = vmlaq_n_f64(v275, v302, *(double *)v129.i64);
      v304 = (float64x2_t)vzip1q_s64(object[7], object[10]);
      v752 = (float64x2_t)object[10];
      v305 = vmlaq_n_f64(v278, v304, *(double *)v129.i64);
      v306 = (float64x2_t)vzip1q_s64(object[13], object[16]);
      v747 = (float64x2_t)object[7];
      v750 = (float64x2_t)object[13];
      v797 = (float64x2_t)object[16];
      v307 = vmlaq_n_f64(v281, v306, *(double *)v129.i64);
      v308 = vmlaq_n_f64(v689, v302, *(double *)v132.i64);
      v309 = vmlaq_n_f64(v282, v304, *(double *)v132.i64);
      v310 = vmlaq_n_f64(v283, v306, *(double *)v132.i64);
      v311 = vmlaq_n_f64(v284, v302, *(double *)v133.i64);
      v312 = vmlaq_n_f64(v285, v304, *(double *)v133.i64);
      v313 = vmlaq_n_f64(v286, v306, *(double *)v133.i64);
      v314 = vmlaq_n_f64(v287, v302, v816.f64[0]);
      v315 = vmlaq_n_f64(v288, v304, v816.f64[0]);
      v316 = vmlaq_n_f64(v289, v306, v816.f64[0]);
      v317 = vmlaq_n_f64(v290, v302, *(double *)v814.i64);
      v318 = vmlaq_n_f64(v291, v304, *(double *)v814.i64);
      v319 = vmlaq_n_f64(v292, v306, *(double *)v814.i64);
      v320 = vmlaq_n_f64(v293, v302, *(double *)v136.i64);
      v321 = vmlaq_n_f64(v294, v304, *(double *)v136.i64);
      *(_QWORD *)&v302.f64[0] = vdupq_laneq_s64(object[7], 1).u64[0];
      *(_QWORD *)&v302.f64[1] = object[10].i64[1];
      *(_QWORD *)&v304.f64[0] = vdupq_laneq_s64(object[13], 1).u64[0];
      v322 = vmlaq_n_f64(v295, v306, *(double *)v136.i64);
      *(_QWORD *)&v304.f64[1] = object[16].i64[1];
      v323 = (float64x2_t)vzip2q_s64(object[1], object[4]);
      v324 = vmlaq_n_f64(v307, v304, v761);
      v325 = vmlaq_n_f64(v309, v302, v759);
      v326 = vmlaq_n_f64(v310, v304, v759);
      v327 = vmlaq_n_f64(v312, v302, v757);
      v328 = vmlaq_n_f64(v313, v304, v757);
      v329 = vmlaq_n_f64(v315, v302, *(double *)&v756);
      v330 = vmlaq_n_f64(v316, v304, *(double *)&v756);
      v331 = vmlaq_n_f64(v318, v302, *(double *)&v754);
      v332 = vmlaq_n_f64(v319, v304, *(double *)&v754);
      v333 = vmlaq_n_f64(v321, v302, *(double *)&v798);
      v334 = vmlaq_n_f64(v322, v304, *(double *)&v798);
      v274.f64[1] = v269.f64[0];
      v790 = v274;
      object[5].i64[1] = v692.i64[1];
      object[2].i64[1] = v695.i64[0];
      object[8].i64[1] = *(_OWORD *)&vmlsq_laneq_f64(vmulq_f64(v781, v723), v726, v723, 1);
      v335.f64[0] = v720;
      *(float64_t *)&object[11].i64[1] = v720;
      object[14].i64[1] = *(_QWORD *)&v120.f64[0];
      *(float64_t *)&object[17].i64[1] = v270;
      v336 = (float64x2_t)vzip1q_s64(object[2], object[5]);
      v337 = vmlaq_n_f64(vmlaq_n_f64(v303, v323, v761), v336, v831.f64[0]);
      v338 = (float64x2_t)vzip1q_s64(object[8], object[11]);
      v339 = vmlaq_n_f64(vmlaq_n_f64(v305, v302, v761), v338, v831.f64[0]);
      v340 = (float64x2_t)vzip1q_s64(object[14], object[17]);
      v341 = vmlaq_n_f64(v324, v340, v831.f64[0]);
      v342 = vmlaq_n_f64(vmlaq_n_f64(v308, v323, v759), v336, v829.f64[0]);
      v343 = vmlaq_n_f64(v325, v338, v829.f64[0]);
      v344 = vmlaq_n_f64(v326, v340, v829.f64[0]);
      v345 = vmlaq_n_f64(vmlaq_n_f64(v311, v323, v757), v336, *(double *)v827.i64);
      v346 = vmlaq_n_f64(v327, v338, *(double *)v827.i64);
      v347 = vmlaq_n_f64(v328, v340, *(double *)v827.i64);
      v348 = vmlaq_n_f64(vmlaq_n_f64(v314, v323, *(double *)&v756), v336, *(double *)v824.i64);
      v349 = vmlaq_n_f64(v329, v338, *(double *)v824.i64);
      v350 = vmlaq_n_f64(v330, v340, *(double *)v824.i64);
      v351 = vmlaq_n_f64(vmlaq_n_f64(v317, v323, *(double *)&v754), v336, *(double *)v818.i64);
      v352 = vmlaq_n_f64(v331, v338, *(double *)v818.i64);
      v353 = vmlaq_n_f64(v332, v340, *(double *)v818.i64);
      v354 = vmlaq_n_f64(vmlaq_n_f64(v320, v323, *(double *)&v798), v336, *(double *)v821.i64);
      v355 = vmlaq_n_f64(v333, v338, *(double *)v821.i64);
      _Q15 = vmlaq_n_f64(v334, v340, *(double *)v821.i64);
      v335.f64[1] = v763.f64[0];
      v816 = v335;
      *(_QWORD *)&v340.f64[0] = vdupq_laneq_s64(object[8], 1).u64[0];
      v340.f64[1] = v720;
      *(_QWORD *)&v338.f64[0] = vdupq_laneq_s64(object[14], 1).u64[0];
      *(_QWORD *)&v338.f64[1] = object[17].i64[1];
      v357 = (float64x2_t)vzip2q_s64(object[2], object[5]);
      v358 = vmlaq_n_f64(v337, v357, *(double *)&v785);
      v359 = vmlaq_n_f64(v339, v340, *(double *)&v785);
      v360 = vmlaq_n_f64(v341, v338, *(double *)&v785);
      v361 = vmlaq_n_f64(v342, v357, *(double *)&v770);
      _Q31 = vmlaq_n_f64(v343, v340, *(double *)&v770);
      v363 = vmlaq_n_f64(v345, v357, *(double *)&v766);
      v819 = vmlaq_n_f64(v346, v340, *(double *)&v766);
      v822 = vmlaq_n_f64(v347, v338, *(double *)&v766);
      v784 = vmlaq_n_f64(v348, v357, v768);
      v786 = vmlaq_n_f64(v349, v340, v768);
      v364 = vmlaq_n_f64(v351, v357, v764);
      v829 = vmlaq_n_f64(v352, v340, v764);
      v831 = vmlaq_n_f64(v353, v338, v764);
      v799 = vmlaq_n_f64(v350, v338, v768);
      v801 = vmlaq_n_f64(v354, v357, v765);
      v804 = vmlaq_n_f64(v355, v340, v765);
      v825 = vmlaq_n_f64(_Q15, v338, v765);
      v365 = vmlaq_laneq_f64(vmulq_n_f64(v359, v701.f64[0]), _Q31, v701, 1);
      v366 = vmlaq_n_f64(v344, v338, *(double *)&v770);
      v367 = vmlaq_laneq_f64(vmulq_n_f64(v359, v716.f64[0]), _Q31, v716, 1);
      v368 = vmlaq_laneq_f64(vmulq_n_f64(v359, v698.f64[0]), _Q31, v698, 1);
      _Q15.f64[0] = v781.f64[0];
      v369 = vmlaq_laneq_f64(vmulq_n_f64(v359, v773.f64[0]), _Q31, v773, 1);
      v121.f64[0] = v778;
      v370 = vmlaq_laneq_f64(vmulq_n_f64(v359, v704.f64[0]), _Q31, v704, 1);
      v371 = vmlaq_laneq_f64(vmulq_n_f64(v359, v707.f64[0]), _Q31, v707, 1);
      _Q2 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v360, v773.f64[0]), v366, v773, 1), v822, v752.f64[0]), v799, v752, 1);
      v373 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v358, v704.f64[0]), v361, v704, 1), v363, v750.f64[0]), v784, v750, 1);
      _Q1 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v360, v704.f64[0]), v366, v704, 1), v822, v750.f64[0]), v799, v750, 1);
      v375 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v358, v707.f64[0]), v361, v707, 1), v363, v797.f64[0]), v784, v797, 1);
      v376 = vmlaq_laneq_f64(vmlaq_n_f64(v371, v819, v797.f64[0]), v786, v797, 1);
      v377 = v364;
      _Q25 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v358, v701.f64[0]), v361, v701, 1), v363, v741.f64[0]), v784, v741, 1), v364, *(double *)object[2].i64), v801, (float64x2_t)object[2], 1);
      v378 = (int8x16_t)vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v360, v701.f64[0]), v366, v701, 1), v822, v741.f64[0]), v799, v741, 1), v831, *(double *)object[2].i64), v825, (float64x2_t)object[2], 1);
      v132 = (int8x16_t)vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v367, v819, v744.f64[0]), v786, v744, 1), v829, *(double *)object[5].i64), v804, (float64x2_t)object[5], 1);
      _Q4 = (int8x16_t)vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v360, v716.f64[0]), v366, v716, 1), v822, v744.f64[0]), v799, v744, 1), v831, *(double *)object[5].i64), v825, (float64x2_t)object[5], 1);
      v380 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v358, v698.f64[0]), v361, v698, 1), v363, v747.f64[0]), v784, v747, 1), v364, *(double *)object[8].i64), v801, (float64x2_t)object[8], 1);
      v133 = (int8x16_t)vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v368, v819, v747.f64[0]), v786, v747, 1), v829, *(double *)object[8].i64), v804, (float64x2_t)object[8], 1);
      v381 = (int8x16_t)vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v360, v698.f64[0]), v366, v698, 1), v822, v747.f64[0]), v799, v747, 1), v831, *(double *)object[8].i64), v825, (float64x2_t)object[8], 1);
      v134 = (int8x16_t)vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v358, v773.f64[0]), v361, v773, 1), v363, v752.f64[0]), v784, v752, 1), v364, *(double *)object[11].i64), v801, (float64x2_t)object[11], 1);
      v131 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v358, v716.f64[0]), v361, v716, 1), v363, v744.f64[0]), v784, v744, 1), v364, *(double *)object[5].i64), v801, (float64x2_t)object[5], 1);
      v382 = vmlaq_laneq_f64(vmlaq_n_f64(v370, v819, v750.f64[0]), v786, v750, 1);
      v383 = (int8x16_t)v380;
      v384 = (int8x16_t)vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v369, v819, v752.f64[0]), v786, v752, 1), v829, *(double *)object[11].i64), v804, (float64x2_t)object[11], 1);
      v129 = (int8x16_t)vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v365, v819, v741.f64[0]), v786, v741, 1), v829, *(double *)object[2].i64), v804, (float64x2_t)object[2], 1);
      v137 = (int8x16_t)vmlaq_laneq_f64(vmlaq_n_f64(v382, v829, v269.f64[1]), v804, (float64x2_t)object[14], 1);
      v821 = (int8x16_t)vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v360, v707.f64[0]), v366, v707, 1), v822, v797.f64[0]), v799, v797, 1), v831, *(double *)object[17].i64), v825, (float64x2_t)object[17], 1);
      v123 = v790;
      v818 = (int8x16_t)vmlaq_laneq_f64(vmlaq_n_f64(_Q1, v831, v269.f64[1]), v825, (float64x2_t)object[14], 1);
      *(_QWORD *)&v764 = vextq_s8(v818, v818, 8uLL).u64[0];
      *(_QWORD *)&v765 = vextq_s8(v821, v821, 8uLL).u64[0];
      v385 = (int8x16_t)vmlaq_laneq_f64(vmlaq_n_f64(v375, v377, *(double *)object[17].i64), v801, (float64x2_t)object[17], 1);
      v824 = (int8x16_t)vmlaq_laneq_f64(vmlaq_n_f64(_Q2, v831, *(double *)object[11].i64), v825, (float64x2_t)object[11], 1);
      v827.i64[0] = v381.i64[0];
      v766 = vextq_s8(v381, v381, 8uLL).u64[0];
      *(_QWORD *)&v768 = vextq_s8(v824, v824, 8uLL).u64[0];
      v386 = (int8x16_t)vmlaq_laneq_f64(vmlaq_n_f64(v376, v829, *(double *)object[17].i64), v804, (float64x2_t)object[17], 1);
      *(_QWORD *)&v831.f64[0] = v378.i64[0];
      v785 = vextq_s8(v378, v378, 8uLL).u64[0];
      v135 = (int8x16_t)vmlaq_laneq_f64(vmlaq_n_f64(v373, v377, v269.f64[1]), v801, (float64x2_t)object[14], 1);
      *(_QWORD *)&v829.f64[0] = _Q4.i64[0];
      v770 = vextq_s8(_Q4, _Q4, 8uLL).u64[0];
      v121.f64[1] = v269.f64[1];
      _Q2.f64[1] = v723.f64[1];
      __asm { FMLS            D1, D15, V2.D[1] }
      _Q31.f64[0] = v729;
      _Q4.i64[0] = v732.i64[0];
      __asm { FMLS            D1, D31, V4.D[0] }
      v122 = (float64x2_t)*(unint64_t *)&v726.f64[0];
      v118 = v816;
      *(_QWORD *)&v116.f64[1] = v710;
      v116.f64[0] = _Q1.f64[0];
      v814.i64[0] = v137.i64[0];
      v119 = (float64x2_t)*(unint64_t *)&v729;
      v117 = vmlsq_lane_f64(vmlsq_laneq_f64(vmulq_n_f64(v790, vnegq_f64(v723).f64[0]), v121, v723, 1), v816, *(double *)v732.i64, 0);
      *(_QWORD *)&v816.f64[0] = v384.i64[0];
      v754 = vextq_s8(v137, v137, 8uLL).u64[0];
      v756 = vextq_s8(v384, v384, 8uLL).u64[0];
      *(_QWORD *)&v757 = vextq_s8(v133, v133, 8uLL).u64[0];
      *(_QWORD *)&v759 = vextq_s8(v132, v132, 8uLL).u64[0];
      *(_QWORD *)&v761 = vextq_s8(v129, v129, 8uLL).u64[0];
      v763 = (float64x2_t)*(unint64_t *)&v781.f64[0];
      v144 = vextq_s8(v385, v385, 8uLL);
      v812.i64[0] = v134.i64[0];
      v749 = vextq_s8(v134, v134, 8uLL).u64[0];
      *(_QWORD *)&v751 = vextq_s8(v135, v135, 8uLL).u64[0];
      v134.i64[0] = v383.i64[0];
      *(_QWORD *)&v743 = vextq_s8((int8x16_t)v131, (int8x16_t)v131, 8uLL).u64[0];
      v746 = vextq_s8(v383, v383, 8uLL).u64[0];
      *(_QWORD *)&v740 = vextq_s8((int8x16_t)_Q25, (int8x16_t)_Q25, 8uLL).u64[0];
      v79 = v873;
      *(double *)v137.i64 = v862;
      v142 = v736;
      v126 = v738;
      v143 = v792;
      v127 = v795;
      v125 = v711;
      v128 = v713;
      v124 = v734;
      v783 = v386.i64[0];
      v715 = v385.i64[0];
      *(_QWORD *)&v797.f64[0] = v144.i64[0];
      v798 = vextq_s8(v386, v386, 8uLL).u64[0];
      if (v99 == v901)
        goto LABEL_205;
LABEL_187:
      v717 = v121;
      v719 = v122;
      v788 = v123;
      v722 = v117;
      v725 = v118;
      v728 = v119;
      v731 = v116;
      v772 = _Q25.f64[0];
      v775 = v131.f64[0];
      v777 = v134.i64[0];
      v780 = v135.i64[0];
      v800 = v133.i64[0];
      v803 = v132.i64[0];
      v806 = v129.i64[0];
      v145 = 0;
      v146 = 0;
      object[0] = (int64x2_t)v143;
      v147 = v143.f64[0];
      v148 = vextq_s8((int8x16_t)v143, (int8x16_t)v143, 8uLL).u64[0];
      object[3] = (int64x2_t)v128;
      v144.i64[0] = *(_QWORD *)&v127.f64[1];
      v706 = (float64x2_t)v144;
      object[1].i64[0] = *(_QWORD *)&v142.f64[0];
      object[4].i64[0] = *(_QWORD *)&v811.f64[0];
      object[6] = (int64x2_t)v127;
      v128.f64[0] = v126.f64[0];
      object[7].i64[0] = *(_QWORD *)&v126.f64[0];
      do
      {
        object[9].i64[v145] = 0;
        v149 = v146 < 2;
        if (v146 < 2)
          ++v146;
        else
          v146 = 0;
        if (v149)
          ++v145;
        else
          v145 += 4;
      }
      while (v145 != 18);
      v688 = (float64x2_t)object[0];
      v150 = (float64x2_t)vzip1q_s64(object[0], object[3]);
      v151 = (float64x2_t)vzip2q_s64(object[0], object[3]);
      v152 = vmlaq_n_f64(vmulq_n_f64(v150, v839.f64[0]), v151, v833);
      v691 = (float64x2_t)object[6];
      v694 = (float64x2_t)object[3];
      v697 = (float64x2_t)object[9];
      *(_QWORD *)&v153.f64[0] = vdupq_laneq_s64(object[6], 1).u64[0];
      *(_QWORD *)&v153.f64[1] = object[9].i64[1];
      v154 = (float64x2_t)vzip1q_s64(object[6], object[9]);
      v155 = vmlaq_n_f64(vmulq_n_f64(v154, v839.f64[0]), v153, v833);
      v700 = (float64x2_t)object[12];
      v703 = (float64x2_t)object[15];
      *(_QWORD *)&v156.f64[0] = vdupq_laneq_s64(object[12], 1).u64[0];
      *(_QWORD *)&v156.f64[1] = object[15].i64[1];
      v157 = (float64x2_t)vzip1q_s64(object[12], object[15]);
      v158 = vmlaq_n_f64(vmulq_n_f64(v157, v839.f64[0]), v156, v833);
      v159 = vmlaq_n_f64(vmulq_n_f64(v150, *(double *)v137.i64), v151, v834);
      v160 = vmlaq_n_f64(vmulq_n_f64(v154, *(double *)v137.i64), v153, v834);
      v161 = vmlaq_n_f64(vmulq_n_f64(v157, *(double *)v137.i64), v156, v834);
      v840 = vmlaq_n_f64(vmulq_n_f64(v150, v847.f64[0]), v151, v835);
      v863 = vmlaq_n_f64(vmulq_n_f64(v154, v847.f64[0]), v153, v835);
      v847 = vmlaq_n_f64(vmulq_n_f64(v157, v847.f64[0]), v156, v835);
      v162 = vmlaq_n_f64(vmulq_n_f64(v150, v874.f64[0]), v151, v837);
      v163 = vmlaq_n_f64(vmulq_n_f64(v154, v874.f64[0]), v153, v837);
      v164 = vmlaq_n_f64(vmulq_n_f64(v157, v874.f64[0]), v156, v837);
      v165 = vmlaq_n_f64(vmulq_n_f64(v150, v849.f64[0]), v151, v851);
      v166 = vmlaq_n_f64(vmulq_n_f64(v154, v849.f64[0]), v153, v851);
      v167 = vmlaq_n_f64(vmulq_n_f64(v157, v849.f64[0]), v156, v851);
      v168 = vmlaq_n_f64(vmulq_n_f64(v150, *(double *)v878.i64), v151, v853);
      v169 = vmlaq_n_f64(vmulq_n_f64(v154, *(double *)v878.i64), v153, v853);
      v170 = vmlaq_n_f64(vmulq_n_f64(v157, *(double *)v878.i64), v156, v853);
      *(_QWORD *)&v153.f64[0] = v148;
      v171 = *(double *)&v148;
      v153.f64[1] = v811.f64[0];
      v154.f64[0] = v147;
      v154.f64[1] = v128.f64[1];
      v684 = v128.f64[1];
      v172 = vmulq_f64(v153, v734);
      v173 = (float64x2_t)vextq_s8((int8x16_t)v734, (int8x16_t)v125, 8uLL);
      v174 = (int8x16_t)vmlsq_f64(v172, v154, v173);
      v154.f64[0] = v128.f64[0];
      v154.f64[1] = v795.f64[0];
      v157.f64[0] = v736.f64[0];
      v157.f64[1] = v147;
      v175 = vmulq_f64(v157, v173);
      v176 = vmulq_f64(v154, v173);
      v173.f64[0] = v706.f64[0];
      v173.f64[1] = v128.f64[0];
      v177 = (float64x2_t)vzip1q_s64((int64x2_t)v125, (int64x2_t)v734);
      v178 = (int64x2_t)vmlsq_f64(v176, v173, v177);
      v173.f64[0] = v171;
      v128.f64[0] = v171;
      v686 = v171;
      v173.f64[1] = v736.f64[0];
      v179.f64[0] = v713.f64[0];
      v179.f64[1] = v128.f64[1];
      v180 = (int64x2_t)vmlsq_f64(v175, v173, v177);
      v181 = vmulq_f64(v179, v177);
      v177.f64[0] = v811.f64[0];
      v177.f64[1] = v713.f64[0];
      v182 = (int8x16_t)vmlsq_f64(v181, v177, v734);
      *(int64x2_t *)((char *)&object[1] + 8) = v180;
      *(int8x16_t *)((char *)&object[4] + 8) = vextq_s8(v174, v182, 8uLL);
      *(float64_t *)v180.i64 = v147;
      v180.i64[1] = *(_QWORD *)&v128.f64[0];
      *(int64x2_t *)((char *)&object[7] + 8) = v178;
      *(int64x2_t *)((char *)&object[10] + 8) = v180;
      v178.i64[0] = *(_QWORD *)&v713.f64[0];
      v178.i64[1] = *(_QWORD *)&v128.f64[1];
      *(int64x2_t *)((char *)&object[13] + 8) = v178;
      v178.i64[0] = *(_QWORD *)&v795.f64[0];
      v178.i64[1] = *(_QWORD *)&v706.f64[0];
      *(int64x2_t *)((char *)&object[16] + 8) = v178;
      v183 = (float64x2_t)vzip1q_s64(object[1], object[4]);
      v836 = (float64x2_t)object[1];
      v838 = (float64x2_t)object[4];
      v184 = vmlaq_n_f64(v152, v183, v876.f64[0]);
      v185 = (float64x2_t)vzip1q_s64(object[7], object[10]);
      v849 = (float64x2_t)object[7];
      v854 = (float64x2_t)object[10];
      v186 = vmlaq_n_f64(v155, v185, v876.f64[0]);
      v187 = (float64x2_t)vzip1q_s64(object[13], object[16]);
      v852 = (float64x2_t)object[13];
      v874 = (float64x2_t)object[16];
      v188 = vmlaq_n_f64(v158, v187, v876.f64[0]);
      v189 = vmlaq_n_f64(v159, v183, *(double *)v867.i64);
      v190 = vmlaq_n_f64(v160, v185, *(double *)v867.i64);
      v191 = vmlaq_n_f64(v161, v187, *(double *)v867.i64);
      v192 = vmlaq_n_f64(v840, v183, v880.f64[0]);
      v193 = vmlaq_n_f64(v863, v185, v880.f64[0]);
      v194 = vmlaq_n_f64(v847, v187, v880.f64[0]);
      v195 = vmlaq_n_f64(v162, v183, v883.f64[0]);
      v196 = vmlaq_n_f64(v163, v185, v883.f64[0]);
      v197 = vmlaq_n_f64(v164, v187, v883.f64[0]);
      v131 = vmlaq_n_f64(v165, v183, v886.f64[0]);
      v198 = vmlaq_n_f64(v166, v185, v886.f64[0]);
      v199 = vmlaq_n_f64(v167, v187, v886.f64[0]);
      v200 = vmlaq_n_f64(v168, v183, v889.f64[0]);
      v201 = vmlaq_n_f64(v169, v185, v889.f64[0]);
      *(_QWORD *)&v183.f64[0] = vdupq_laneq_s64(object[7], 1).u64[0];
      *(_QWORD *)&v183.f64[1] = object[10].i64[1];
      *(_QWORD *)&v185.f64[0] = vdupq_laneq_s64(object[13], 1).u64[0];
      v202 = vmlaq_n_f64(v170, v187, v889.f64[0]);
      *(_QWORD *)&v185.f64[1] = object[16].i64[1];
      v203 = (float64x2_t)vzip2q_s64(object[1], object[4]);
      v204 = vmlaq_n_f64(v186, v183, v859);
      v205 = vmlaq_n_f64(v190, v183, v860);
      v839 = vmlaq_n_f64(v192, v203, v856);
      v864 = vmlaq_n_f64(v193, v183, v856);
      v206 = vmlaq_n_f64(v196, v183, v857);
      v887 = vmlaq_n_f64(v198, v183, v855);
      v884 = vmlaq_n_f64(v200, v203, v858);
      v207 = vmlaq_n_f64(v201, v183, v858);
      v881 = vmlaq_n_f64(v202, v185, v858);
      v183.f64[0] = v792.f64[0];
      v183.f64[1] = v713.f64[0];
      v793 = v183;
      object[5].i64[1] = v182.i64[1];
      object[2].i64[1] = v174.i64[0];
      object[8].i64[1] = *(_OWORD *)&vmlsq_laneq_f64(vmulq_f64(v706, v734), v795, v734, 1);
      v190.f64[0] = v736.f64[0];
      object[11].i64[1] = *(_QWORD *)&v736.f64[0];
      object[14].i64[1] = *(_QWORD *)&v811.f64[0];
      object[17].i64[1] = *(_QWORD *)&v738.f64[0];
      v208 = (float64x2_t)vzip1q_s64(object[2], object[5]);
      v209 = (float64x2_t)vzip1q_s64(object[8], object[11]);
      v210 = vmlaq_n_f64(v204, v209, *(double *)v845.i64);
      v211 = (float64x2_t)vzip1q_s64(object[14], object[17]);
      v212 = vmlaq_n_f64(vmlaq_n_f64(v188, v185, v859), v211, *(double *)v845.i64);
      v213 = vmlaq_n_f64(v205, v209, *(double *)v869.i64);
      v214 = vmlaq_n_f64(vmlaq_n_f64(v191, v185, v860), v211, *(double *)v869.i64);
      _Q25 = vmlaq_n_f64(v864, v209, v871.f64[0]);
      v215 = vmlaq_n_f64(vmlaq_n_f64(v194, v185, v856), v211, v871.f64[0]);
      v216 = vmlaq_n_f64(vmlaq_n_f64(v195, v203, v857), v208, v890.f64[0]);
      v217 = vmlaq_n_f64(v206, v209, v890.f64[0]);
      v218 = vmlaq_n_f64(vmlaq_n_f64(v197, v185, v857), v211, v890.f64[0]);
      v219 = vmlaq_n_f64(vmlaq_n_f64(v131, v203, v855), v208, v893.f64[0]);
      v220 = vmlaq_n_f64(v887, v209, v893.f64[0]);
      v221 = vmlaq_n_f64(vmlaq_n_f64(v199, v185, v855), v211, v893.f64[0]);
      v222 = vmlaq_n_f64(v884, v208, *(double *)v897.i64);
      v223 = vmlaq_n_f64(v207, v209, *(double *)v897.i64);
      v224 = vmlaq_n_f64(v881, v211, *(double *)v897.i64);
      v190.f64[1] = v811.f64[0];
      v876 = v190;
      *(_QWORD *)&v211.f64[0] = vdupq_laneq_s64(object[8], 1).u64[0];
      v211.f64[1] = v736.f64[0];
      *(_QWORD *)&v209.f64[0] = vdupq_laneq_s64(object[14], 1).u64[0];
      v209.f64[1] = v738.f64[0];
      v225 = (float64x2_t)vzip2q_s64(object[2], object[5]);
      v226 = vmlaq_n_f64(v210, v211, v844);
      v227 = vmlaq_n_f64(v212, v209, v844);
      v228 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(v189, v203, v860), v208, *(double *)v869.i64), v225, v841);
      v229 = vmlaq_n_f64(v213, v211, v841);
      v230 = vmlaq_n_f64(v214, v209, v841);
      v231 = vmlaq_n_f64(vmlaq_n_f64(v839, v208, v871.f64[0]), v225, v842);
      v865 = vmlaq_n_f64(_Q25, v211, v842);
      v232 = vmlaq_n_f64(v215, v209, v842);
      _Q4 = vmlaq_n_f64(v216, v225, v843);
      v890 = vmlaq_n_f64(v217, v211, v843);
      v893 = vmlaq_n_f64(v218, v209, v843);
      v889 = vmlaq_n_f64(v219, v225, v861);
      v886 = vmlaq_n_f64(v220, v211, v861);
      v898 = vmlaq_n_f64(v221, v209, v861);
      v883 = vmlaq_n_f64(v222, v225, v810);
      v871 = vmlaq_n_f64(v223, v211, v810);
      v880 = vmlaq_n_f64(v224, v209, v810);
      v234 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(v184, v203, v859), v208, *(double *)v845.i64), v225, v844);
      v235 = vmlaq_laneq_f64(vmulq_n_f64(v234, v688.f64[0]), v228, v688, 1);
      v236 = vmlaq_laneq_f64(vmulq_n_f64(v227, v688.f64[0]), v230, v688, 1);
      v237 = vmlaq_laneq_f64(vmulq_n_f64(v234, v694.f64[0]), v228, v694, 1);
      v238 = vmlaq_laneq_f64(vmulq_n_f64(v227, v694.f64[0]), v230, v694, 1);
      v239 = vmlaq_laneq_f64(vmulq_n_f64(v234, v691.f64[0]), v228, v691, 1);
      v240 = vmlaq_laneq_f64(vmulq_n_f64(v226, v691.f64[0]), v229, v691, 1);
      v241 = v230;
      v242 = vmlaq_laneq_f64(vmulq_n_f64(v227, v691.f64[0]), v230, v691, 1);
      v243 = vmlaq_laneq_f64(vmulq_n_f64(v234, v697.f64[0]), v228, v697, 1);
      v244 = vmlaq_laneq_f64(vmulq_n_f64(v226, v697.f64[0]), v229, v697, 1);
      v245 = v227;
      v246 = vmlaq_laneq_f64(vmulq_n_f64(v227, v697.f64[0]), v241, v697, 1);
      v247 = vmlaq_laneq_f64(vmulq_n_f64(v234, v700.f64[0]), v228, v700, 1);
      v248 = vmlaq_laneq_f64(vmulq_n_f64(v226, v700.f64[0]), v229, v700, 1);
      v249 = vmlaq_laneq_f64(vmulq_n_f64(v234, v703.f64[0]), v228, v703, 1);
      v250 = vmlaq_laneq_f64(vmulq_n_f64(v226, v703.f64[0]), v229, v703, 1);
      v251 = (int8x16_t)vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v226, v688.f64[0]), v229, v688, 1), v865, v836.f64[0]), v890, v836, 1), v886, *(double *)object[2].i64), v871, (float64x2_t)object[2], 1);
      v252 = (int8x16_t)vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v236, v232, v836.f64[0]), v893, v836, 1), v898, *(double *)object[2].i64), v880, (float64x2_t)object[2], 1);
      v253 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v237, v231, v838.f64[0]), _Q4, v838, 1), v889, *(double *)object[5].i64), v883, (float64x2_t)object[5], 1);
      v135 = (int8x16_t)vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v226, v694.f64[0]), v229, v694, 1), v865, v838.f64[0]), v890, v838, 1), v886, *(double *)object[5].i64), v871, (float64x2_t)object[5], 1);
      v132 = (int8x16_t)vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v238, v232, v838.f64[0]), v893, v838, 1), v898, *(double *)object[5].i64), v880, (float64x2_t)object[5], 1);
      v254 = (int8x16_t)vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v239, v231, v849.f64[0]), _Q4, v849, 1), v889, *(double *)object[8].i64), v883, (float64x2_t)object[8], 1);
      v265 = (int8x16_t)vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v240, v865, v849.f64[0]), v890, v849, 1), v886, *(double *)object[8].i64), v871, (float64x2_t)object[8], 1);
      _Q5 = (int8x16_t)vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v242, v232, v849.f64[0]), v893, v849, 1), v898, *(double *)object[8].i64), v880, (float64x2_t)object[8], 1);
      v129 = (int8x16_t)vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v243, v231, v854.f64[0]), _Q4, v854, 1), v889, *(double *)object[11].i64), v883, (float64x2_t)object[11], 1);
      v133 = (int8x16_t)vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v244, v865, v854.f64[0]), v890, v854, 1), v886, *(double *)object[11].i64), v871, (float64x2_t)object[11], 1);
      _Q2 = (int8x16_t)vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v246, v232, v854.f64[0]), v893, v854, 1), v898, *(double *)object[11].i64), v880, (float64x2_t)object[11], 1);
      v257 = (int8x16_t)vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v247, v231, v852.f64[0]), _Q4, v852, 1), v889, *(double *)object[14].i64), v883, (float64x2_t)object[14], 1);
      v258 = (int8x16_t)vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v248, v865, v852.f64[0]), v890, v852, 1), v886, *(double *)object[14].i64), v871, (float64x2_t)object[14], 1);
      _Q1 = (int8x16_t)vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v245, v700.f64[0]), v241, v700, 1), v232, v852.f64[0]), v893, v852, 1), v898, *(double *)object[14].i64), v880, (float64x2_t)object[14], 1);
      v260 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v249, v231, v874.f64[0]), _Q4, v874, 1), v889, *(double *)object[17].i64);
      v261 = (int8x16_t)vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v235, v231, v836.f64[0]), _Q4, v836, 1), v889, *(double *)object[2].i64), v883, (float64x2_t)object[2], 1);
      _Q4.f64[0] = v738.f64[0];
      v134 = (int8x16_t)v253;
      v897 = (int8x16_t)vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v245, v703.f64[0]), v241, v703, 1), v232, v874.f64[0]), v893, v874, 1), v898, *(double *)object[17].i64), v880, (float64x2_t)object[17], 1);
      *(_QWORD *)&v810 = vextq_s8(v897, v897, 8uLL).u64[0];
      v262 = (int8x16_t)vmlaq_laneq_f64(v260, v883, (float64x2_t)object[17], 1);
      *(_QWORD *)&v893.f64[0] = _Q1.i64[0];
      *(_QWORD *)&v861 = vextq_s8(_Q1, _Q1, 8uLL).u64[0];
      v263 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v250, v865, v874.f64[0]), v890, v874, 1), v886, *(double *)object[17].i64);
      *(_QWORD *)&v890.f64[0] = _Q2.i64[0];
      *(_QWORD *)&v843 = vextq_s8(_Q2, _Q2, 8uLL).u64[0];
      v264 = (int8x16_t)vmlaq_laneq_f64(v263, v871, (float64x2_t)object[17], 1);
      v143 = v793;
      *(_QWORD *)&v871.f64[0] = _Q5.i64[0];
      *(_QWORD *)&v842 = vextq_s8(_Q5, _Q5, 8uLL).u64[0];
      v845.i64[0] = v252.i64[0];
      *(_QWORD *)&v844 = vextq_s8(v252, v252, 8uLL).u64[0];
      v128.f64[0] = v686;
      v128.f64[1] = v684;
      _Q2.i64[1] = *(_QWORD *)&v734.f64[1];
      _Q5.i64[0] = *(_QWORD *)&v706.f64[0];
      __asm { FMLS            D1, D5, V2.D[1] }
      _Q2.i64[1] = v710;
      _Q25.f64[0] = v711.f64[0];
      __asm { FMLS            D1, D4, V25.D[0] }
      _Q2.i64[0] = _Q1.i64[0];
      v869.i64[0] = v132.i64[0];
      *(_QWORD *)&v841 = vextq_s8(v132, v132, 8uLL).u64[0];
      *(_QWORD *)&v889.f64[0] = v264.i64[0];
      *(_QWORD *)&v858 = vextq_s8(v264, v264, 8uLL).u64[0];
      v127 = v876;
      *(_QWORD *)&v886.f64[0] = v258.i64[0];
      *(_QWORD *)&v855 = vextq_s8(v258, v258, 8uLL).u64[0];
      v142 = (float64x2_t)*(unint64_t *)&v795.f64[0];
      v811 = (float64x2_t)*(unint64_t *)&v706.f64[0];
      v124 = vmlsq_lane_f64(vmlsq_laneq_f64(vmulq_n_f64(v793, vnegq_f64(v734).f64[0]), v128, v734, 1), v876, v711.f64[0], 0);
      v125 = (float64x2_t)_Q2;
      *(_QWORD *)&v883.f64[0] = v133.i64[0];
      *(_QWORD *)&v857 = vextq_s8(v133, v133, 8uLL).u64[0];
      *(_QWORD *)&v880.f64[0] = v265.i64[0];
      *(_QWORD *)&v856 = vextq_s8(v265, v265, 8uLL).u64[0];
      v867.i64[0] = v135.i64[0];
      *(_QWORD *)&v860 = vextq_s8(v135, v135, 8uLL).u64[0];
      *(_QWORD *)&v876.f64[0] = v251.i64[0];
      *(_QWORD *)&v859 = vextq_s8(v251, v251, 8uLL).u64[0];
      v878.i64[0] = v262.i64[0];
      *(_QWORD *)&v853 = vextq_s8(v262, v262, 8uLL).u64[0];
      *(_QWORD *)&v849.f64[0] = v257.i64[0];
      *(_QWORD *)&v851 = vextq_s8(v257, v257, 8uLL).u64[0];
      *(_QWORD *)&v874.f64[0] = v129.i64[0];
      *(_QWORD *)&v837 = vextq_s8(v129, v129, 8uLL).u64[0];
      *(_QWORD *)&v847.f64[0] = v254.i64[0];
      *(_QWORD *)&v234.f64[0] = vextq_s8(v254, v254, 8uLL).u64[0];
      v126 = (float64x2_t)*(unint64_t *)&v738.f64[0];
      v835 = v234.f64[0];
      v862 = *(double *)v134.i64;
      *(_QWORD *)&v834 = vextq_s8(v134, v134, 8uLL).u64[0];
      *(_QWORD *)&v839.f64[0] = v261.i64[0];
      *(_QWORD *)&v833 = vextq_s8(v261, v261, 8uLL).u64[0];
      v132.i64[0] = v803;
      v129.i64[0] = v806;
      v133.i64[0] = v800;
      v265.i64[0] = v814.i64[0];
      v134.i64[0] = v777;
      v135.i64[0] = v780;
      _Q25.f64[0] = v772;
      v131.f64[0] = v775;
      v119 = v728;
      v116 = v731;
      v117 = v722;
      v118 = v725;
      v123 = v788;
      v121 = v717;
      v122 = v719;
    }
    v387 = 0;
    v388 = 0;
    v391 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v143, v121.f64[0]), v128, v121, 1), v127, v763.f64[0]), v124, v763, 1);
    v904[0] = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v143, v123.f64[0]), v128, v123, 1), v127, v122.f64[0]), v124, v122, 1);
    v904[1] = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v142, v123.f64[0]), v811, v123, 1), v126, v122.f64[0]), v125, v122, 1);
    v904[2] = v391;
    v904[3] = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v142, v121.f64[0]), v811, v121, 1), v126, v763.f64[0]), v125, v763, 1);
    v904[4] = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v143, v118.f64[0]), v128, v118, 1), v127, v119.f64[0]), v124, v119, 1);
    v904[5] = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v142, v118.f64[0]), v811, v118, 1), v126, v119.f64[0]), v125, v119, 1);
    v904[6] = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v143, v117.f64[0]), v128, v117, 1), v127, v116.f64[0]), v124, v116, 1);
    v904[7] = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v142, v117.f64[0]), v811, v117, 1), v126, v116.f64[0]), v125, v116, 1);
    v933 = v143;
    v389 = (float64x2_t)vextq_s8((int8x16_t)v124, (int8x16_t)v124, 8uLL);
    *(_QWORD *)&v390 = vextq_s8((int8x16_t)v143, (int8x16_t)v143, 8uLL).u64[0];
    *(float64_t *)v934 = v142.f64[0];
    *(float64_t *)v936 = v811.f64[0];
    v935 = v128;
    v391.f64[0] = v127.f64[1];
    *(float64_t *)v938 = v126.f64[0];
    v937 = v127;
    do
    {
      v939.f64[v387] = 0.0;
      v392 = v388 < 2;
      if (v388 < 2)
        ++v388;
      else
        v388 = 0;
      if (v392)
        ++v387;
      else
        v387 += 4;
    }
    while (v387 != 18);
    *(_QWORD *)&v393.f64[0] = v818.i64[0];
    v393.f64[1] = v764;
    v820 = v393;
    v265.i64[1] = v754;
    v815 = (float64x2_t)v265;
    *(double *)&v135.i64[1] = v751;
    v782 = (float64x2_t)v135;
    v393.f64[0] = v831.f64[0];
    *(_QWORD *)&v393.f64[1] = v785;
    v832 = v393;
    *(double *)&v129.i64[1] = v761;
    _Q25.f64[1] = v740;
    v393.f64[0] = v829.f64[0];
    *(_QWORD *)&v393.f64[1] = v770;
    v830 = v393;
    *(double *)&v132.i64[1] = v759;
    v805 = (float64x2_t)v132;
    v807 = (float64x2_t)v129;
    v131.f64[1] = v743;
    v774 = _Q25;
    v776 = v131;
    *(_QWORD *)&v393.f64[0] = v827.i64[0];
    *(_QWORD *)&v393.f64[1] = v766;
    v828 = v393;
    *(double *)&v133.i64[1] = v757;
    v802 = (float64x2_t)v133;
    v134.i64[1] = v746;
    v779 = (float64x2_t)v134;
    *(_QWORD *)&v393.f64[0] = v824.i64[0];
    v393.f64[1] = v768;
    v826 = v393;
    v393.f64[0] = v816.f64[0];
    *(_QWORD *)&v393.f64[1] = v756;
    v817 = v393;
    *(_QWORD *)&v393.f64[0] = v812.i64[0];
    *(_QWORD *)&v393.f64[1] = v749;
    v813 = v393;
    *(_QWORD *)&v393.f64[0] = v821.i64[0];
    v393.f64[1] = v765;
    v823 = v393;
    v394.f64[0] = v126.f64[0];
    v394.f64[1] = v127.f64[0];
    v393.f64[0] = v142.f64[0];
    v393.f64[1] = v143.f64[0];
    v395.f64[0] = v389.f64[0];
    v395.f64[1] = v125.f64[0];
    v396 = vmulq_f64(v394, v395);
    v125.f64[1] = v124.f64[0];
    v394.f64[0] = v127.f64[1];
    v394.f64[1] = v126.f64[0];
    v397 = vmlsq_f64(v396, v394, v125);
    v394.f64[0] = v390;
    v394.f64[1] = v142.f64[0];
    v398 = vmlsq_f64(vmulq_f64(v393, v395), v394, v125);
    v393.f64[0] = v124.f64[0];
    v393.f64[1] = v389.f64[0];
    v394.f64[0] = v811.f64[0];
    v394.f64[1] = v128.f64[0];
    v399 = (int8x16_t)vmlsq_f64(vmulq_f64(v128, v125), v394, v393);
    v394.f64[0] = v390;
    v394.f64[1] = v811.f64[0];
    v400 = vmulq_f64(v394, v393);
    v394.f64[0] = v143.f64[0];
    v394.f64[1] = v128.f64[1];
    v401 = (int8x16_t)vmlsq_f64(v400, v394, v395);
    v402 = *(_OWORD *)&vmlsq_f64(vmulq_f64(v391, v124), v127, v389);
    v403.f64[0] = v862;
    v403.f64[1] = v834;
    v394.f64[0] = v839.f64[0];
    v394.f64[1] = v833;
    v404 = vmlaq_laneq_f64(vmulq_n_f64(v394, v933.f64[0]), v403, v933, 1);
    v405 = vmlaq_laneq_f64(vmulq_n_f64(v394, v935.f64[0]), v403, v935, 1);
    v406 = vmlaq_laneq_f64(vmulq_n_f64(v394, v937.f64[0]), v403, v937, 1);
    v407 = vmlaq_laneq_f64(vmulq_n_f64(v394, v939.f64[0]), v403, v939, 1);
    v408 = vmlaq_laneq_f64(vmulq_n_f64(v394, v941.f64[0]), v403, v941, 1);
    v409 = vmlaq_laneq_f64(vmulq_n_f64(v394, v943.f64[0]), v403, v943, 1);
    *(_QWORD *)&v936[24] = v399.i64[1];
    *(float64x2_t *)&v934[8] = v398;
    *(int8x16_t *)&v936[8] = vextq_s8(v401, v399, 8uLL);
    *(float64x2_t *)&v938[8] = v397;
    v143.f64[1] = v390;
    *(float64x2_t *)&v940[8] = v143;
    *(float64x2_t *)&v942[8] = v128;
    *(float64x2_t *)&v944[8] = v127;
    v403.f64[0] = v847.f64[0];
    v403.f64[1] = v835;
    v394.f64[0] = v874.f64[0];
    v394.f64[1] = v837;
    v410 = vmlaq_laneq_f64(vmlaq_n_f64(v404, v403, *(double *)v934), v394, *(float64x2_t *)v934, 1);
    v411 = vmlaq_laneq_f64(vmlaq_n_f64(v405, v403, *(double *)v936), v394, *(float64x2_t *)v936, 1);
    v412 = vmlaq_laneq_f64(vmlaq_n_f64(v406, v403, *(double *)v938), v394, *(float64x2_t *)v938, 1);
    v413 = vmlaq_laneq_f64(vmlaq_n_f64(v407, v403, *(double *)v940), v394, *(float64x2_t *)v940, 1);
    v414 = vmlaq_laneq_f64(vmlaq_n_f64(v408, v403, *(double *)v942), v394, *(float64x2_t *)v942, 1);
    v415 = vmlaq_laneq_f64(vmlaq_n_f64(v409, v403, *(double *)v944), v394, *(float64x2_t *)v944, 1);
    *(_QWORD *)&v934[24] = v401.i64[0];
    *(_QWORD *)&v938[24] = v402;
    *(float64_t *)&v940[24] = v142.f64[0];
    *(float64_t *)&v942[24] = v811.f64[0];
    *(float64_t *)&v944[24] = v126.f64[0];
    v403.f64[0] = v849.f64[0];
    v403.f64[1] = v851;
    v416 = vmlaq_n_f64(v410, v403, v398.f64[1]);
    v417 = vmlaq_n_f64(v411, v403, *(double *)&v936[16]);
    v418 = vmlaq_n_f64(v412, v403, v397.f64[1]);
    v419 = vmlaq_n_f64(v413, v403, v390);
    v420 = vmlaq_n_f64(v414, v403, v128.f64[1]);
    v421 = vmlaq_n_f64(v415, v403, v127.f64[1]);
    *(_QWORD *)&v403.f64[0] = v878.i64[0];
    v403.f64[1] = v853;
    v422 = (int64x2_t)vmlaq_laneq_f64(v416, v403, *(float64x2_t *)&v934[16], 1);
    v423 = (int64x2_t)vmlaq_laneq_f64(v417, v403, *(float64x2_t *)&v936[16], 1);
    v424 = (int64x2_t)vmlaq_laneq_f64(v418, v403, *(float64x2_t *)&v938[16], 1);
    v425 = (int64x2_t)vmlaq_laneq_f64(v419, v403, *(float64x2_t *)&v940[16], 1);
    v426 = (int64x2_t)vmlaq_laneq_f64(v420, v403, *(float64x2_t *)&v942[16], 1);
    v427 = (int64x2_t)vmlaq_laneq_f64(v421, v403, *(float64x2_t *)&v944[16], 1);
    *(_QWORD *)&v403.f64[0] = v867.i64[0];
    v403.f64[1] = v860;
    v394.f64[0] = v876.f64[0];
    v394.f64[1] = v859;
    v760 = v933;
    v428 = vmlaq_laneq_f64(vmulq_n_f64(v394, v760.f64[0]), v403, v760, 1);
    v791 = v939;
    v794 = v935;
    v429 = vmlaq_laneq_f64(vmulq_n_f64(v394, v794.f64[0]), v403, v794, 1);
    v787 = v937;
    v430 = vmlaq_laneq_f64(vmulq_n_f64(v394, v787.f64[0]), v403, v787, 1);
    v431 = vmlaq_laneq_f64(vmulq_n_f64(v394, v791.f64[0]), v403, v791, 1);
    v796 = v941;
    v432 = vmlaq_laneq_f64(vmulq_n_f64(v394, v796.f64[0]), v403, v796, 1);
    v433 = v943;
    v434 = vmlaq_laneq_f64(vmulq_n_f64(v394, v433.f64[0]), v403, v433, 1);
    v403.f64[0] = v880.f64[0];
    v403.f64[1] = v856;
    v435 = vmlaq_n_f64(v428, v403, *(double *)v934);
    v436 = vmlaq_n_f64(v429, v403, *(double *)v936);
    v437 = vmlaq_n_f64(v430, v403, *(double *)v938);
    v438 = vmlaq_n_f64(v431, v403, *(double *)v940);
    v439 = vmlaq_n_f64(v432, v403, *(double *)v942);
    v440 = vmlaq_n_f64(v434, v403, *(double *)v944);
    v403.f64[0] = v883.f64[0];
    v403.f64[1] = v857;
    v441 = vmlaq_laneq_f64(v435, v403, *(float64x2_t *)v934, 1);
    v442 = vmlaq_laneq_f64(v436, v403, *(float64x2_t *)v936, 1);
    v443 = vmlaq_laneq_f64(v437, v403, *(float64x2_t *)v938, 1);
    v444 = vmlaq_laneq_f64(v438, v403, *(float64x2_t *)v940, 1);
    v445 = vmlaq_laneq_f64(v439, v403, *(float64x2_t *)v942, 1);
    v446 = vmlaq_laneq_f64(v440, v403, *(float64x2_t *)v944, 1);
    v403.f64[0] = v886.f64[0];
    v403.f64[1] = v855;
    v447 = vmlaq_n_f64(v441, v403, v398.f64[1]);
    v448 = vmlaq_n_f64(v442, v403, *(double *)&v936[16]);
    v449 = vmlaq_n_f64(v443, v403, v397.f64[1]);
    v450 = vmlaq_n_f64(v444, v403, v390);
    v451 = vmlaq_n_f64(v445, v403, v128.f64[1]);
    v452 = vmlaq_n_f64(v446, v403, *(double *)&v944[16]);
    v403.f64[0] = v889.f64[0];
    v403.f64[1] = v858;
    v453 = (int64x2_t)vmlaq_laneq_f64(v447, v403, *(float64x2_t *)&v934[16], 1);
    v454 = (int64x2_t)vmlaq_laneq_f64(v448, v403, *(float64x2_t *)&v936[16], 1);
    v455 = (int64x2_t)vmlaq_laneq_f64(v449, v403, *(float64x2_t *)&v938[16], 1);
    v456 = (int64x2_t)vmlaq_laneq_f64(v450, v403, *(float64x2_t *)&v940[16], 1);
    v457 = (int64x2_t)vmlaq_laneq_f64(v451, v403, *(float64x2_t *)&v942[16], 1);
    v458 = (int64x2_t)vmlaq_laneq_f64(v452, v403, *(float64x2_t *)&v944[16], 1);
    *(_QWORD *)&v403.f64[0] = v869.i64[0];
    v403.f64[1] = v841;
    *(_QWORD *)&v394.f64[0] = v845.i64[0];
    v394.f64[1] = v844;
    v459 = vmlaq_laneq_f64(vmulq_n_f64(v394, v760.f64[0]), v403, v760, 1);
    v460 = vmlaq_laneq_f64(vmulq_n_f64(v394, v794.f64[0]), v403, v794, 1);
    v461 = vmlaq_laneq_f64(vmulq_n_f64(v394, v787.f64[0]), v403, v787, 1);
    v462 = vmlaq_laneq_f64(vmulq_n_f64(v394, v791.f64[0]), v403, v791, 1);
    v463 = vmlaq_laneq_f64(vmulq_n_f64(v394, v796.f64[0]), v403, v796, 1);
    v767 = v943;
    v769 = *(float64x2_t *)v944;
    v464 = vmlaq_laneq_f64(vmulq_n_f64(v394, v433.f64[0]), v403, v433, 1);
    v403.f64[0] = v871.f64[0];
    v403.f64[1] = v842;
    v753 = *(float64x2_t *)v936;
    v755 = *(float64x2_t *)v934;
    v465 = vmlaq_n_f64(v459, v403, *(double *)v934);
    v466 = vmlaq_n_f64(v460, v403, *(double *)v936);
    v762 = *(float64x2_t *)v938;
    v467 = vmlaq_n_f64(v461, v403, *(double *)v938);
    v758 = *(float64x2_t *)v940;
    v468 = vmlaq_n_f64(v462, v403, *(double *)v940);
    v771 = *(float64x2_t *)v942;
    v469 = vmlaq_n_f64(v463, v403, *(double *)v942);
    v470 = vmlaq_n_f64(v464, v403, *(double *)v944);
    v403.f64[0] = v890.f64[0];
    v403.f64[1] = v843;
    v471 = vmlaq_laneq_f64(v465, v403, *(float64x2_t *)v934, 1);
    v472 = vmlaq_laneq_f64(v466, v403, *(float64x2_t *)v936, 1);
    v473 = vmlaq_laneq_f64(v467, v403, *(float64x2_t *)v938, 1);
    v474 = vmlaq_laneq_f64(v468, v403, *(float64x2_t *)v940, 1);
    v475 = vmlaq_laneq_f64(v469, v403, *(float64x2_t *)v942, 1);
    v476 = vmlaq_laneq_f64(v470, v403, *(float64x2_t *)v944, 1);
    v403.f64[0] = v893.f64[0];
    v403.f64[1] = v861;
    v477 = vmlaq_n_f64(v471, v403, v398.f64[1]);
    v478 = vmlaq_n_f64(v472, v403, *(double *)&v936[16]);
    v479 = vmlaq_n_f64(v473, v403, *(double *)&v938[16]);
    v480 = vmlaq_n_f64(v474, v403, v143.f64[1]);
    v481 = vmlaq_n_f64(v475, v403, v128.f64[1]);
    v482 = vmlaq_n_f64(v476, v403, *(double *)&v944[16]);
    *(_QWORD *)&v403.f64[0] = v897.i64[0];
    v403.f64[1] = v810;
    v483 = vmlaq_laneq_f64(v477, v403, *(float64x2_t *)&v934[16], 1);
    v484 = (int64x2_t)vmlaq_laneq_f64(v478, v403, *(float64x2_t *)&v936[16], 1);
    v485 = (int64x2_t)vmlaq_laneq_f64(v479, v403, *(float64x2_t *)&v938[16], 1);
    v486 = (int64x2_t)vmlaq_laneq_f64(v480, v403, *(float64x2_t *)&v940[16], 1);
    v487 = (int64x2_t)vmlaq_laneq_f64(v481, v403, *(float64x2_t *)&v942[16], 1);
    v488 = (int64x2_t)vmlaq_laneq_f64(v482, v403, *(float64x2_t *)&v944[16], 1);
    v915 = (float64x2_t)vzip1q_s64(v422, v423);
    v916 = (float64x2_t)vzip1q_s64(v424, v425);
    v721 = (float64x2_t)v423;
    v724 = (float64x2_t)v422;
    v917 = (float64x2_t)vzip1q_s64(v426, v427);
    v918 = (float64x2_t)vzip2q_s64(v422, v423);
    v718 = (float64x2_t)v424;
    *(_QWORD *)&v403.f64[0] = vdupq_laneq_s64(v424, 1).u64[0];
    v712 = (float64x2_t)v426;
    v714 = (float64x2_t)v425;
    *(_QWORD *)&v403.f64[1] = v425.i64[1];
    *(_QWORD *)&v394.f64[0] = vdupq_laneq_s64(v426, 1).u64[0];
    v709 = (float64x2_t)v427;
    *(_QWORD *)&v394.f64[1] = v427.i64[1];
    v919 = v403;
    v920 = v394;
    v921 = (float64x2_t)vzip1q_s64(v453, v454);
    v922 = (float64x2_t)vzip1q_s64(v455, v456);
    v489 = (float64x2_t)vzip1q_s64((int64x2_t)v933, (int64x2_t)v935);
    v490 = (float64x2_t)vzip2q_s64((int64x2_t)v933, (int64x2_t)v935);
    v491 = vmlaq_n_f64(vmulq_n_f64(v489, v839.f64[0]), v490, v833);
    v492 = vmlaq_n_f64(vmulq_n_f64(v489, v862), v490, v834);
    v493 = vmlaq_n_f64(vmulq_n_f64(v489, v847.f64[0]), v490, v835);
    v494 = vmlaq_n_f64(vmulq_n_f64(v489, v874.f64[0]), v490, v837);
    v495 = vmlaq_n_f64(vmulq_n_f64(v489, v849.f64[0]), v490, v851);
    v496 = vmlaq_n_f64(vmulq_n_f64(v489, *(double *)v878.i64), v490, v853);
    v497 = (float64x2_t)vzip1q_s64(*(int64x2_t *)v934, *(int64x2_t *)v936);
    v498 = vmlaq_n_f64(v491, v497, v876.f64[0]);
    v499 = vmlaq_n_f64(v492, v497, *(double *)v867.i64);
    v500 = vmlaq_n_f64(v493, v497, v880.f64[0]);
    v501 = vmlaq_n_f64(v494, v497, v883.f64[0]);
    v502 = vmlaq_n_f64(v495, v497, v886.f64[0]);
    v503 = vmlaq_n_f64(v496, v497, v889.f64[0]);
    v705 = (float64x2_t)v455;
    v708 = (float64x2_t)v453;
    v737 = (float64x2_t)v456;
    v739 = (float64x2_t)v454;
    v923 = (float64x2_t)vzip1q_s64(v457, v458);
    v924 = (float64x2_t)vzip2q_s64(v453, v454);
    *(_QWORD *)&v497.f64[0] = vdupq_laneq_s64(v455, 1).u64[0];
    *(_QWORD *)&v497.f64[1] = v456.i64[1];
    v699 = (float64x2_t)v458;
    v702 = (float64x2_t)v457;
    v457.i64[0] = vdupq_laneq_s64(v457, 1).u64[0];
    v457.i64[1] = v458.i64[1];
    v925 = v497;
    v926 = (float64x2_t)v457;
    v504 = (float64x2_t)vzip2q_s64(*(int64x2_t *)v934, *(int64x2_t *)v936);
    v505 = vmlaq_n_f64(v498, v504, v859);
    v506 = vmlaq_n_f64(v499, v504, v860);
    v507 = vmlaq_n_f64(v500, v504, v856);
    v508 = vmlaq_n_f64(v501, v504, v857);
    v509 = vmlaq_n_f64(v502, v504, v855);
    v510 = vmlaq_n_f64(v503, v504, v858);
    v927 = (float64x2_t)vzip1q_s64((int64x2_t)v483, v484);
    v928 = (float64x2_t)vzip1q_s64(v485, v486);
    v511 = (float64x2_t)vzip1q_s64(*(int64x2_t *)&v934[16], *(int64x2_t *)&v936[16]);
    v512 = vmlaq_n_f64(v505, v511, *(double *)v845.i64);
    v513 = vmlaq_n_f64(v506, v511, *(double *)v869.i64);
    v514 = vmlaq_n_f64(v507, v511, v871.f64[0]);
    v515 = vmlaq_n_f64(v508, v511, v890.f64[0]);
    v516 = vmlaq_n_f64(v509, v511, v893.f64[0]);
    v517 = vmlaq_n_f64(v510, v511, *(double *)v897.i64);
    v693 = (float64x2_t)v484;
    v696 = v483;
    v929 = (float64x2_t)vzip1q_s64(v487, v488);
    v930 = (float64x2_t)vzip2q_s64((int64x2_t)v483, v484);
    v518 = (float64x2_t)vzip2q_s64(*(int64x2_t *)&v934[16], *(int64x2_t *)&v936[16]);
    v730 = vmlaq_n_f64(v512, v518, v844);
    v733 = vmlaq_n_f64(v514, v518, v842);
    v742 = vmlaq_n_f64(v513, v518, v841);
    v745 = vmlaq_n_f64(v515, v518, v843);
    v735 = vmlaq_n_f64(v516, v518, v861);
    v748 = vmlaq_n_f64(v517, v518, v810);
    v687 = (float64x2_t)v486;
    v690 = (float64x2_t)v485;
    *(_QWORD *)&v518.f64[0] = vdupq_laneq_s64(v485, 1).u64[0];
    *(_QWORD *)&v518.f64[1] = v486.i64[1];
    v683 = (float64x2_t)v488;
    v685 = (float64x2_t)v487;
    *(_QWORD *)&v489.f64[0] = vdupq_laneq_s64(v487, 1).u64[0];
    *(_QWORD *)&v489.f64[1] = v488.i64[1];
    v931 = v518;
    v932 = v489;
    *(_QWORD *)&v518.f64[0] = vdupq_laneq_s64((int64x2_t)v937, 1).u64[0];
    v518.f64[1] = v939.f64[1];
    v519 = (float64x2_t)vzip1q_s64((int64x2_t)v937, (int64x2_t)v939);
    v520 = vmlaq_n_f64(vmulq_n_f64(v519, v839.f64[0]), v518, v833);
    v521 = vmlaq_n_f64(vmulq_n_f64(v519, v862), v518, v834);
    v522 = vmlaq_n_f64(vmulq_n_f64(v519, v847.f64[0]), v518, v835);
    v523 = vmlaq_n_f64(vmulq_n_f64(v519, v874.f64[0]), v518, v837);
    v524 = vmlaq_n_f64(vmulq_n_f64(v519, v849.f64[0]), v518, v851);
    v525 = vmlaq_n_f64(vmulq_n_f64(v519, *(double *)v878.i64), v518, v853);
    v526 = (float64x2_t)vzip1q_s64(*(int64x2_t *)v938, *(int64x2_t *)v940);
    v527 = vmlaq_n_f64(v520, v526, v876.f64[0]);
    v528 = vmlaq_n_f64(v521, v526, *(double *)v867.i64);
    v529 = vmlaq_n_f64(v522, v526, v880.f64[0]);
    v530 = vmlaq_n_f64(v523, v526, v883.f64[0]);
    v531 = vmlaq_n_f64(v524, v526, v886.f64[0]);
    v532 = vmlaq_n_f64(v525, v526, v889.f64[0]);
    *(_QWORD *)&v526.f64[0] = vdupq_laneq_s64(*(int64x2_t *)v938, 1).u64[0];
    v526.f64[1] = v143.f64[0];
    v533 = vmlaq_n_f64(v527, v526, v859);
    v534 = vmlaq_n_f64(v528, v526, v860);
    v535 = vmlaq_n_f64(v529, v526, v856);
    v536 = vmlaq_n_f64(v530, v526, v857);
    v537 = vmlaq_n_f64(v531, v526, v855);
    v538 = vmlaq_n_f64(v532, v526, v858);
    *(_QWORD *)&v526.f64[0] = vdupq_laneq_s64((int64x2_t)v941, 1).u64[0];
    v526.f64[1] = v943.f64[1];
    *(_QWORD *)&v519.f64[0] = vdupq_laneq_s64(*(int64x2_t *)&v938[16], 1).u64[0];
    v519.f64[1] = *(float64_t *)&v940[24];
    v539 = (float64x2_t)vzip1q_s64(*(int64x2_t *)&v938[16], *(int64x2_t *)&v940[16]);
    v727 = vmlaq_n_f64(vmlaq_n_f64(v533, v539, *(double *)v845.i64), v519, v844);
    v540 = vmlaq_n_f64(vmlaq_n_f64(v534, v539, *(double *)v869.i64), v519, v841);
    v541 = vmlaq_n_f64(vmlaq_n_f64(v535, v539, v871.f64[0]), v519, v842);
    v542 = vmlaq_n_f64(vmlaq_n_f64(v536, v539, v890.f64[0]), v519, v843);
    v543 = vmlaq_n_f64(vmlaq_n_f64(v537, v539, v893.f64[0]), v519, v861);
    v544 = vmlaq_n_f64(vmlaq_n_f64(v538, v539, *(double *)v897.i64), v519, v810);
    v545 = (float64x2_t)vzip1q_s64((int64x2_t)v941, (int64x2_t)v943);
    v546 = vmlaq_n_f64(vmulq_n_f64(v545, v839.f64[0]), v526, v833);
    v547 = vmlaq_n_f64(vmulq_n_f64(v545, v862), v526, v834);
    v548 = vmlaq_n_f64(vmulq_n_f64(v545, v847.f64[0]), v526, v835);
    v549 = vmlaq_n_f64(vmulq_n_f64(v545, v874.f64[0]), v526, v837);
    v550 = vmlaq_n_f64(vmulq_n_f64(v545, v849.f64[0]), v526, v851);
    v551 = vmlaq_n_f64(vmulq_n_f64(v545, *(double *)v878.i64), v526, v853);
    *(_QWORD *)&v526.f64[0] = vdupq_laneq_s64(*(int64x2_t *)v942, 1).u64[0];
    v526.f64[1] = *(float64_t *)&v944[8];
    v552 = (float64x2_t)vzip1q_s64(*(int64x2_t *)v942, *(int64x2_t *)v944);
    v553 = vmlaq_n_f64(vmlaq_n_f64(v546, v552, v876.f64[0]), v526, v859);
    v554 = vmlaq_n_f64(vmlaq_n_f64(v547, v552, *(double *)v867.i64), v526, v860);
    v555 = vmlaq_n_f64(vmlaq_n_f64(v548, v552, v880.f64[0]), v526, v856);
    v556 = vmlaq_n_f64(vmlaq_n_f64(v549, v552, v883.f64[0]), v526, v857);
    v557 = vmlaq_n_f64(vmlaq_n_f64(v550, v552, v886.f64[0]), v526, v855);
    v558 = vmlaq_n_f64(vmlaq_n_f64(v551, v552, v889.f64[0]), v526, v858);
    v559 = (float64x2_t)vzip1q_s64(*(int64x2_t *)&v942[16], *(int64x2_t *)&v944[16]);
    v560 = vmlaq_n_f64(v553, v559, *(double *)v845.i64);
    v561 = vmlaq_n_f64(v554, v559, *(double *)v869.i64);
    v562 = vmlaq_n_f64(v555, v559, v871.f64[0]);
    v563 = vmlaq_n_f64(v556, v559, v890.f64[0]);
    v564 = vmlaq_n_f64(v557, v559, v893.f64[0]);
    v565 = vmlaq_n_f64(v558, v559, *(double *)v897.i64);
    *(_QWORD *)&v559.f64[0] = vdupq_laneq_s64(*(int64x2_t *)&v942[16], 1).u64[0];
    v559.f64[1] = v126.f64[0];
    v566 = vmlaq_n_f64(v560, v559, v844);
    v567 = vmlaq_n_f64(v561, v559, v841);
    v568 = vmlaq_n_f64(v562, v559, v842);
    v569 = vmlaq_n_f64(v563, v559, v843);
    v570 = vmlaq_n_f64(v564, v559, v861);
    v571 = vmlaq_n_f64(v565, v559, v810);
    *(_QWORD *)&v483.f64[0] = v783;
    *(_QWORD *)&v483.f64[1] = v798;
    *(_QWORD *)&v539.f64[0] = v715;
    v539.f64[1] = v797.f64[0];
    *(float64x2_t *)((char *)&object[2] + 8) = vaddq_f64(v832, vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v566, v760.f64[0]), v567, v760, 1), v568, v755.f64[0]), v569, v755, 1), v570, v398.f64[1]), v571, *(float64x2_t *)&v934[16], 1));
    *(float64x2_t *)((char *)&object[1] + 8) = vaddq_f64(v807, vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v727, v760.f64[0]), v540, v760, 1), v541, v755.f64[0]), v542, v755, 1), v543, v398.f64[1]), v544, *(float64x2_t *)&v934[16], 1));
    *(float64x2_t *)((char *)object + 8) = vaddq_f64(v774, vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v730, v760.f64[0]), v742, v760, 1), v733, v755.f64[0]), v745, v755, 1), v735, v398.f64[1]), v748, *(float64x2_t *)&v934[16], 1));
    *(float64x2_t *)((char *)&object[5] + 8) = vaddq_f64(v830, vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v566, v794.f64[0]), v567, v794, 1), v568, v753.f64[0]), v569, v753, 1), v570, *(double *)&v936[16]), v571, *(float64x2_t *)&v936[16], 1));
    *(float64x2_t *)((char *)&object[4] + 8) = vaddq_f64(v805, vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v727, v794.f64[0]), v540, v794, 1), v541, v753.f64[0]), v542, v753, 1), v543, *(double *)&v936[16]), v544, *(float64x2_t *)&v936[16], 1));
    *(float64x2_t *)((char *)&object[3] + 8) = vaddq_f64(v776, vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v730, v794.f64[0]), v742, v794, 1), v733, v753.f64[0]), v745, v753, 1), v735, *(double *)&v936[16]), v748, *(float64x2_t *)&v936[16], 1));
    *(float64x2_t *)((char *)&object[8] + 8) = vaddq_f64(v828, vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v566, v787.f64[0]), v567, v787, 1), v568, v762.f64[0]), v569, v762, 1), v570, *(double *)&v938[16]), v571, *(float64x2_t *)&v938[16], 1));
    *(float64x2_t *)((char *)&object[7] + 8) = vaddq_f64(v802, vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v727, v787.f64[0]), v540, v787, 1), v541, v762.f64[0]), v542, v762, 1), v543, *(double *)&v938[16]), v544, *(float64x2_t *)&v938[16], 1));
    *(float64x2_t *)((char *)&object[6] + 8) = vaddq_f64(v779, vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v730, v787.f64[0]), v742, v787, 1), v733, v762.f64[0]), v745, v762, 1), v735, *(double *)&v938[16]), v748, *(float64x2_t *)&v938[16], 1));
    *(float64x2_t *)((char *)&object[11] + 8) = vaddq_f64(v826, vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v566, v791.f64[0]), v567, v791, 1), v568, v758.f64[0]), v569, v758, 1), v570, v143.f64[1]), v571, *(float64x2_t *)&v940[16], 1));
    *(float64x2_t *)((char *)&object[10] + 8) = vaddq_f64(v817, vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v727, v791.f64[0]), v540, v791, 1), v541, v758.f64[0]), v542, v758, 1), v543, v143.f64[1]), v544, *(float64x2_t *)&v940[16], 1));
    *(float64x2_t *)((char *)&object[9] + 8) = vaddq_f64(v813, vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v730, v791.f64[0]), v742, v791, 1), v733, v758.f64[0]), v745, v758, 1), v735, v143.f64[1]), v748, *(float64x2_t *)&v940[16], 1));
    *(float64x2_t *)((char *)&object[14] + 8) = vaddq_f64(v820, vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v566, v796.f64[0]), v567, v796, 1), v568, v771.f64[0]), v569, v771, 1), v570, *(double *)&v942[16]), v571, *(float64x2_t *)&v942[16], 1));
    object[0].i64[0] = 2;
    *(float64x2_t *)((char *)&object[13] + 8) = vaddq_f64(v815, vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v727, v796.f64[0]), v540, v796, 1), v541, v771.f64[0]), v542, v771, 1), v543, *(double *)&v942[16]), v544, *(float64x2_t *)&v942[16], 1));
    *(float64x2_t *)((char *)&object[12] + 8) = vaddq_f64(v782, vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v730, v796.f64[0]), v742, v796, 1), v733, v771.f64[0]), v745, v771, 1), v735, *(double *)&v942[16]), v748, *(float64x2_t *)&v942[16], 1));
    *(float64x2_t *)((char *)&object[16] + 8) = vaddq_f64(v483, vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v727, v767.f64[0]), v540, v767, 1), v541, v769.f64[0]), v542, v769, 1), v543, *(double *)&v944[16]), v544, *(float64x2_t *)&v944[16], 1));
    *(float64x2_t *)((char *)&object[17] + 8) = vaddq_f64(v823, vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v566, v767.f64[0]), v567, v767, 1), v568, v769.f64[0]), v569, v769, 1), v570, *(double *)&v944[16]), v571, *(float64x2_t *)&v944[16], 1));
    *(float64x2_t *)((char *)&object[15] + 8) = vaddq_f64(v539, vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v730, v433.f64[0]), v742, v433, 1), v733, v769.f64[0]), v745, v769, 1), v735, *(double *)&v944[16]), v748, *(float64x2_t *)&v944[16], 1));
    sub_20F215978((uint64_t)object);
    sub_20E8BE8E4();
    *(_QWORD *)&v572.f64[0] = v845.i64[0];
    v572.f64[1] = v844;
    v573.f64[0] = v839.f64[0];
    v573.f64[1] = v833;
    v574.f64[0] = v876.f64[0];
    v574.f64[1] = v859;
    v877 = v574;
    *(_QWORD *)&v574.f64[0] = v869.i64[0];
    v574.f64[1] = v841;
    v870 = v574;
    v574.f64[0] = v862;
    v574.f64[1] = v834;
    v866 = v574;
    *(_QWORD *)&v574.f64[0] = v867.i64[0];
    v574.f64[1] = v860;
    v868 = v574;
    v574.f64[0] = v871.f64[0];
    v574.f64[1] = v842;
    v872 = v574;
    v574.f64[0] = v847.f64[0];
    v574.f64[1] = v835;
    v848 = v574;
    v574.f64[0] = v880.f64[0];
    v574.f64[1] = v856;
    v882 = v574;
    v574.f64[0] = v890.f64[0];
    v574.f64[1] = v843;
    v891 = v574;
    v574.f64[0] = v874.f64[0];
    v574.f64[1] = v837;
    v875 = v574;
    v574.f64[0] = v883.f64[0];
    v574.f64[1] = v857;
    v885 = v574;
    v574.f64[0] = v893.f64[0];
    v574.f64[1] = v861;
    v894 = v574;
    v574.f64[0] = v849.f64[0];
    v574.f64[1] = v851;
    v850 = v574;
    v574.f64[0] = v886.f64[0];
    v574.f64[1] = v855;
    v888 = v574;
    *(_QWORD *)&v574.f64[0] = v897.i64[0];
    v574.f64[1] = v810;
    v899 = v574;
    *(_QWORD *)&v574.f64[0] = v878.i64[0];
    v574.f64[1] = v853;
    v879 = v574;
    v574.f64[0] = v889.f64[0];
    v574.f64[1] = v858;
    v903[1] = vsubq_f64(v877, vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v708, v915.f64[0]), v739, v915, 1), v705, v916.f64[0]), v737, v916, 1), v702, v917.f64[0]), v699, v917, 1));
    v903[0] = vsubq_f64(v573, vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v724, v915.f64[0]), v721, v915, 1), v718, v916.f64[0]), v714, v916, 1), v712, v917.f64[0]), v709, v917, 1));
    v903[2] = vsubq_f64(v572, vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v696, v915.f64[0]), v693, v915, 1), v690, v916.f64[0]), v687, v916, 1), v685, v917.f64[0]), v683, v917, 1));
    v903[3] = vsubq_f64(v866, vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v724, v918.f64[0]), v721, v918, 1), v718, v919.f64[0]), v714, v919, 1), v712, v920.f64[0]), v709, v920, 1));
    v903[4] = vsubq_f64(v868, vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v708, v918.f64[0]), v739, v918, 1), v705, v919.f64[0]), v737, v919, 1), v702, v920.f64[0]), v699, v920, 1));
    v903[5] = vsubq_f64(v870, vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v696, v918.f64[0]), v693, v918, 1), v690, v919.f64[0]), v687, v919, 1), v685, v920.f64[0]), v683, v920, 1));
    v903[7] = vsubq_f64(v882, vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v708, v921.f64[0]), v739, v921, 1), v705, v922.f64[0]), v737, v922, 1), v702, v923.f64[0]), v699, v923, 1));
    v903[6] = vsubq_f64(v848, vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v724, v921.f64[0]), v721, v921, 1), v718, v922.f64[0]), v714, v922, 1), v712, v923.f64[0]), v709, v923, 1));
    v903[8] = vsubq_f64(v872, vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v696, v921.f64[0]), v693, v921, 1), v690, v922.f64[0]), v687, v922, 1), v685, v923.f64[0]), v683, v923, 1));
    v903[9] = vsubq_f64(v875, vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v724, v924.f64[0]), v721, v924, 1), v718, v925.f64[0]), v714, v925, 1), v712, v926.f64[0]), v709, v926, 1));
    v903[10] = vsubq_f64(v885, vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v708, v924.f64[0]), v739, v924, 1), v705, v925.f64[0]), v737, v925, 1), v702, v926.f64[0]), v699, v926, 1));
    v903[11] = vsubq_f64(v891, vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v696, v924.f64[0]), v693, v924, 1), v690, v925.f64[0]), v687, v925, 1), v685, v926.f64[0]), v683, v926, 1));
    v903[12] = vsubq_f64(v850, vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v724, v927.f64[0]), v721, v927, 1), v718, v928.f64[0]), v714, v928, 1), v712, v929.f64[0]), v709, v929, 1));
    v903[13] = vsubq_f64(v888, vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v708, v927.f64[0]), v739, v927, 1), v705, v928.f64[0]), v737, v928, 1), v702, v929.f64[0]), v699, v929, 1));
    v903[14] = vsubq_f64(v894, vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v696, v927.f64[0]), v693, v927, 1), v690, v928.f64[0]), v687, v928, 1), v685, v929.f64[0]), v683, v929, 1));
    v903[15] = vsubq_f64(v879, vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v724, v930.f64[0]), v721, v930, 1), v718, v931.f64[0]), v714, v931, 1), v712, v932.f64[0]), v709, v932, 1));
    v903[16] = vsubq_f64(v574, vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v708, v930.f64[0]), v739, v930, 1), v705, v931.f64[0]), v737, v931, 1), v702, v932.f64[0]), v699, v932, 1));
    v903[17] = vsubq_f64(v899, vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v696, v930.f64[0]), v693, v930, 1), v690, v931.f64[0]), v687, v931, 1), v685, v932.f64[0]), v683, v932, 1));
    v575 = v682[6];
    v576 = v682[7];
    v577 = v575;
    if (v575 != v576)
    {
      v577 = v682[6];
      while (v906.i64[0] != *(_QWORD *)(v577 + 16) || v906.i32[2] != *(_DWORD *)(v577 + 24))
      {
        v577 += 472;
        if (v577 == v576)
          goto LABEL_222;
      }
    }
    if (v577 != v576)
    {
      v578 = v682[7];
      v576 = v577;
      if (v575 != v578)
        goto LABEL_226;
      goto LABEL_229;
    }
LABEL_222:
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/MapOptimization/src/PoseGraphOptimizer.cpp", 361, (uint64_t)"removed_edge_iter != edges_to_be_removed.end()", 46, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v575 = v682[6];
    v578 = v682[7];
    if (v575 == v578)
      goto LABEL_229;
LABEL_226:
    while (*(_QWORD *)&v905.f64[0] != *(_QWORD *)(v575 + 16) || LODWORD(v905.f64[1]) != *(_DWORD *)(v575 + 24))
    {
      v575 += 472;
      if (v575 == v578)
        goto LABEL_229;
    }
    if (v575 == v578)
    {
LABEL_229:
      v579 = sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/MapOptimization/src/PoseGraphOptimizer.cpp", 361, (uint64_t)"removed_edge_iter != edges_to_be_removed.end()", 46, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0);
      v575 = v578;
      if (v579)
        abort();
    }
    if (*(_DWORD *)(v576 + 464) == 2)
      v580 = 2 * (*(_DWORD *)(v575 + 464) == 2);
    else
      v580 = 0;
    if (sub_20F7D0FF8(v809, (uint64_t)&v906, (uint64_t)&v905, (__int128 *)v904, (double *)v903, v580) != 1)
      goto LABEL_126;
    sub_20F7D2884(&v902);
    if (**(int **)(v902 + 56) > 2)
      goto LABEL_126;
    v581 = *(unsigned __int8 *)(v902 + 72);
    v582 = sub_20E8C31DC(v902, "OSLogSurrogateAppender", 1, 0);
    v583 = v582;
    if (!v581 && !v582)
      goto LABEL_126;
    *(_QWORD *)&v933.f64[0] = &v902;
    *(std::chrono::steady_clock::time_point *)&v933.f64[1] = (std::chrono::steady_clock::time_point)std::chrono::steady_clock::now().__d_.__rep_;
    *(std::chrono::system_clock::time_point *)v934 = std::chrono::system_clock::now();
    *(_DWORD *)&v934[8] = 2;
    *(_QWORD *)&v934[16] = "unknown file";
    *(_DWORD *)&v934[24] = 495;
    *(_QWORD *)&v935.f64[0] = "unknown function";
    v935.f64[1] = 0.0;
    *(_QWORD *)v936 = 0;
    v584 = **(_QWORD **)&v933.f64[0];
    v900 = **(_QWORD **)&v933.f64[0];
    if (*(char *)(**(_QWORD **)&v933.f64[0] + 39) < 0)
    {
      v586 = *(const char **)(v584 + 16);
      v585 = *(_QWORD *)(v584 + 24);
      v895 = **(_QWORD **)&v933.f64[0] + 16;
      v588 = atomic_load((unsigned __int8 *)&qword_254A4A510);
      if ((v588 & 1) == 0)
      {
LABEL_323:
        if (__cxa_guard_acquire(&qword_254A4A510))
        {
          sub_20E9E46F8((uint64_t)&v915);
          sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)&v915);
          if (LOBYTE(v916.f64[1]) && SHIBYTE(v916.f64[0]) < 0)
            operator delete(*(void **)&v915.f64[0]);
          __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
          __cxa_guard_release(&qword_254A4A510);
          v79 = v873;
        }
      }
    }
    else
    {
      v585 = *(unsigned __int8 *)(**(_QWORD **)&v933.f64[0] + 39);
      v586 = (const char *)(**(_QWORD **)&v933.f64[0] + 16);
      v895 = (uint64_t)v586;
      v587 = atomic_load((unsigned __int8 *)&qword_254A4A510);
      if ((v587 & 1) == 0)
        goto LABEL_323;
    }
    if (byte_254A4A4F8[23] >= 0)
      v589 = byte_254A4A4F8;
    else
      v589 = *(const char **)byte_254A4A4F8;
    if (byte_254A4A4F8[23] >= 0)
      v590 = byte_254A4A4F8[23];
    else
      v590 = *(_QWORD *)&byte_254A4A4F8[8];
    object[0].i64[0] = (uint64_t)os_log_create(v589, v586);
    if (v590 > 0x7FFFFFFFFFFFFFF7)
      sub_20E860B7C();
    if (v590 >= 0x17)
    {
      v892 = v585;
      v592 = v79;
      v593 = v586;
      v594 = v581;
      v595 = v583;
      v596 = (v590 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v590 | 7) != 0x17)
        v596 = v590 | 7;
      v597 = v596 + 1;
      v591 = (uint64_t *)operator new(v596 + 1);
      object[1].i64[1] = v597 | 0x8000000000000000;
      object[0].i64[1] = (uint64_t)v591;
      object[1].i64[0] = v590;
      v583 = v595;
      v581 = v594;
      v586 = v593;
      v79 = v592;
      v585 = v892;
    }
    else
    {
      object[1].i8[15] = v590;
      v591 = &object[0].i64[1];
      if (!v590)
      {
LABEL_255:
        *((_BYTE *)v591 + v590) = 0;
        object[2].i8[0] = 1;
        if (v585 > 0x7FFFFFFFFFFFFFF7)
          sub_20E860B7C();
        if (v585 >= 0x17)
        {
          v600 = v583;
          v601 = (v585 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v585 | 7) != 0x17)
            v601 = v585 | 7;
          v602 = v601 + 1;
          v598 = (uint64_t *)operator new(v601 + 1);
          object[3].i64[1] = v602 | 0x8000000000000000;
          object[2].i64[1] = (uint64_t)v598;
          object[3].i64[0] = v585;
          v583 = v600;
        }
        else
        {
          object[3].i8[15] = v585;
          v598 = &object[2].i64[1];
          if (!v585)
          {
            object[2].i8[8] = 0;
            object[4].i8[0] = 1;
            v599 = object[0].i64[0];
            if ((object[3].i8[15] & 0x80000000) == 0)
              goto LABEL_259;
LABEL_265:
            operator delete((void *)object[2].i64[1]);
            v2 = v809;
            if (object[2].i8[0])
              goto LABEL_266;
            goto LABEL_268;
          }
        }
        memmove(v598, v586, v585);
        *((_BYTE *)v598 + v585) = 0;
        object[4].i8[0] = 1;
        v599 = object[0].i64[0];
        if (object[3].i8[15] < 0)
          goto LABEL_265;
LABEL_259:
        v2 = v809;
        if (object[2].i8[0])
        {
LABEL_266:
          if (object[1].i8[15] < 0)
            operator delete((void *)object[0].i64[1]);
        }
LABEL_268:
        if (object[0].i64[0])
          os_release((void *)object[0].i64[0]);
        if (v583 && *(_QWORD *)(v583 + 24))
        {
          v603 = _os_log_pack_size();
          v604 = (std::__shared_weak_count_vtbl *)operator new(v603, (std::align_val_t)8uLL);
          v605 = (std::__shared_weak_count *)operator new();
          v606 = v605;
          v605->__shared_owners_ = 0;
          p_shared_owners = (unint64_t *)&v605->__shared_owners_;
          v605->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
          v605->__shared_weak_owners_ = 0;
          v605[1].__vftable = v604;
          object[0].i64[0] = (uint64_t)v604;
          object[0].i64[1] = (uint64_t)v604;
          object[1].i64[0] = (uint64_t)v605;
          do
            v608 = __ldxr(p_shared_owners);
          while (__stxr(v608 + 1, p_shared_owners));
          object[1].i64[1] = 0;
          object[2] = 0uLL;
          do
            v609 = __ldaxr(p_shared_owners);
          while (__stlxr(v609 - 1, p_shared_owners));
          if (!v609)
          {
            ((void (*)(std::__shared_weak_count *))v605->__on_zero_shared)(v605);
            std::__shared_weak_count::__release_weak(v606);
          }
          v610 = object[0].i64[0];
          *(_WORD *)_os_log_pack_fill() = 0;
          v611 = operator new();
          v612 = *(unsigned __int8 *)(v900 + 39);
          v613 = v895;
          if ((v612 & 0x80u) != 0)
          {
            v613 = *(_QWORD *)(v900 + 16);
            v612 = *(_QWORD *)(v900 + 24);
          }
          *(_QWORD *)v611 = v610;
          *(int64x2_t *)(v611 + 8) = *(int64x2_t *)((char *)object + 8);
          object[0].i64[1] = 0;
          object[1].i64[0] = 0;
          *(int64x2_t *)(v611 + 24) = *(int64x2_t *)((char *)&object[1] + 8);
          object[1].i64[1] = 0;
          object[2].i64[0] = 0;
          *(_QWORD *)(v611 + 40) = v613;
          *(_QWORD *)(v611 + 48) = v612;
          *(_BYTE *)(v611 + 56) = 2;
          v913 = 0;
          *(_QWORD *)&v915.f64[0] = v611;
          (*(void (**)(_QWORD, float64x2_t *))(**(_QWORD **)(v583 + 24) + 40))(*(_QWORD *)(v583 + 24), &v915);
          v614 = v915.f64[0];
          v915.f64[0] = 0.0;
          if (v614 != 0.0)
          {
            v615 = *(std::__shared_weak_count **)(*(_QWORD *)&v614 + 32);
            if (v615)
            {
              v616 = (unint64_t *)&v615->__shared_owners_;
              do
                v617 = __ldaxr(v616);
              while (__stlxr(v617 - 1, v616));
              if (!v617)
              {
                ((void (*)(std::__shared_weak_count *))v615->__on_zero_shared)(v615);
                std::__shared_weak_count::__release_weak(v615);
              }
            }
            v618 = *(std::__shared_weak_count **)(*(_QWORD *)&v614 + 16);
            if (v618)
            {
              v619 = (unint64_t *)&v618->__shared_owners_;
              do
                v620 = __ldaxr(v619);
              while (__stlxr(v620 - 1, v619));
              if (!v620)
              {
                ((void (*)(std::__shared_weak_count *))v618->__on_zero_shared)(v618);
                std::__shared_weak_count::__release_weak(v618);
              }
            }
            MEMORY[0x212BC6398](*(_QWORD *)&v614, 0x10F0C40B62ED6C6);
            v621 = v913;
            v913 = 0;
            if (v621)
            {
              v622 = *(std::__shared_weak_count **)(v621 + 32);
              if (v622)
              {
                v623 = (unint64_t *)&v622->__shared_owners_;
                do
                  v624 = __ldaxr(v623);
                while (__stlxr(v624 - 1, v623));
                if (!v624)
                {
                  ((void (*)(std::__shared_weak_count *))v622->__on_zero_shared)(v622);
                  std::__shared_weak_count::__release_weak(v622);
                }
              }
              v625 = *(std::__shared_weak_count **)(v621 + 16);
              if (v625)
              {
                v626 = (unint64_t *)&v625->__shared_owners_;
                do
                  v627 = __ldaxr(v626);
                while (__stlxr(v627 - 1, v626));
                if (!v627)
                {
                  ((void (*)(std::__shared_weak_count *))v625->__on_zero_shared)(v625);
                  std::__shared_weak_count::__release_weak(v625);
                }
              }
              MEMORY[0x212BC6398](v621, 0x10F0C40B62ED6C6);
            }
          }
          v628 = (std::__shared_weak_count *)object[2].i64[0];
          v2 = v809;
          if (object[2].i64[0])
          {
            v629 = (unint64_t *)(object[2].i64[0] + 8);
            do
              v630 = __ldaxr(v629);
            while (__stlxr(v630 - 1, v629));
            if (!v630)
            {
              ((void (*)(std::__shared_weak_count *))v628->__on_zero_shared)(v628);
              std::__shared_weak_count::__release_weak(v628);
            }
          }
          v631 = (std::__shared_weak_count *)object[1].i64[0];
          if (object[1].i64[0])
          {
            v632 = (unint64_t *)(object[1].i64[0] + 8);
            do
              v633 = __ldaxr(v632);
            while (__stlxr(v633 - 1, v632));
            if (!v633)
            {
              ((void (*)(std::__shared_weak_count *))v631->__on_zero_shared)(v631);
              std::__shared_weak_count::__release_weak(v631);
            }
          }
        }
        else
        {
          os_log_type_enabled(v599, OS_LOG_TYPE_DEBUG);
          object[0].i16[0] = 0;
          v634 = (void *)_os_log_send_and_compose_impl();
          if (v634)
            free(v634);
        }
        if (v581)
        {
          sub_20E8C003C((uint64_t)&v933, "Cannot added the marginalized constraint into th graph because there exist one edge already. This should be changed to merge constraint");
          sub_20E863570((uint64_t)&v933);
        }
        sub_20E863570((uint64_t)&v933);
        v635 = *(std::__shared_weak_count **)v936;
        if (*(_QWORD *)v936)
        {
          v636 = (unint64_t *)(*(_QWORD *)v936 + 8);
          do
            v637 = __ldaxr(v636);
          while (__stlxr(v637 - 1, v636));
          if (!v637)
          {
            ((void (*)(std::__shared_weak_count *))v635->__on_zero_shared)(v635);
            std::__shared_weak_count::__release_weak(v635);
          }
        }
        v808 = (unsigned int *)v911;
        v63 = v910;
        goto LABEL_126;
      }
    }
    memmove(v591, v589, v590);
    goto LABEL_255;
  }
LABEL_328:
  v638 = *(_QWORD *)(v2 + 976);
  v639 = *(char **)(v638 + 48);
  v640 = *(char **)(v638 + 56);
  v641 = v639;
  if (v640 != v639)
  {
    v642 = (v640 - v639) >> 4;
    v641 = *(char **)(v638 + 48);
    do
    {
      v643 = v642 >> 1;
      v644 = (unsigned int *)&v641[16 * (v642 >> 1)];
      v646 = *v644;
      v645 = (char *)(v644 + 4);
      v642 += ~(v642 >> 1);
      if (v646 < v901)
        v641 = v645;
      else
        v642 = v643;
    }
    while (v642);
  }
  if (v641 != v640 && *(_DWORD *)v641 == v901)
  {
    v647 = *((_QWORD *)v641 + 1);
    if ((*(_BYTE *)(v647 + 4) & 6) == 0)
    {
      *(_BYTE *)(v647 + 4) ^= 2u;
      v649 = *(char **)(v638 + 376);
      v648 = *(_QWORD *)(v638 + 384);
      if ((unint64_t)v649 >= v648)
      {
        v651 = *(char **)(v638 + 368);
        v652 = (v649 - v651) >> 2;
        v653 = v652 + 1;
        if ((unint64_t)(v652 + 1) >> 62)
          sub_20E867F44();
        v654 = v648 - (_QWORD)v651;
        if (v654 >> 1 > v653)
          v653 = v654 >> 1;
        if ((unint64_t)v654 >= 0x7FFFFFFFFFFFFFFCLL)
          v655 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v655 = v653;
        if (v655)
        {
          if (v655 >> 62)
            sub_20E877A38();
          v656 = operator new(4 * v655);
        }
        else
        {
          v656 = 0;
        }
        v657 = (unsigned int *)&v656[4 * v652];
        v658 = &v656[4 * v655];
        *v657 = v901;
        v650 = v657 + 1;
        if (v649 != v651)
        {
          v659 = v649 - v651 - 4;
          if (v659 < 0x2C)
            goto LABEL_397;
          if ((unint64_t)(v651 - v656) < 0x20)
            goto LABEL_397;
          v660 = (v659 >> 2) + 1;
          v661 = 4 * (v660 & 0x7FFFFFFFFFFFFFF8);
          v662 = &v649[-v661];
          v657 = (unsigned int *)((char *)v657 - v661);
          v663 = &v656[4 * v652 - 16];
          v664 = v649 - 16;
          v665 = v660 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            v666 = *(_OWORD *)v664;
            *(v663 - 1) = *((_OWORD *)v664 - 1);
            *v663 = v666;
            v663 -= 2;
            v664 -= 32;
            v665 -= 8;
          }
          while (v665);
          v649 = v662;
          if (v660 != (v660 & 0x7FFFFFFFFFFFFFF8))
          {
LABEL_397:
            do
            {
              v667 = *((_DWORD *)v649 - 1);
              v649 -= 4;
              *--v657 = v667;
            }
            while (v649 != v651);
          }
        }
        *(_QWORD *)(v638 + 368) = v657;
        *(_QWORD *)(v638 + 376) = v650;
        *(_QWORD *)(v638 + 384) = v658;
        if (v651)
          operator delete(v651);
      }
      else
      {
        *(_DWORD *)v649 = v901;
        v650 = v649 + 4;
      }
      *(_QWORD *)(v638 + 376) = v650;
      *(_BYTE *)(v638 + 314) = 0;
      *(_WORD *)(v638 + 312) = 256;
      *(_DWORD *)(v638 + 512) = 0;
      *(_WORD *)(v638 + 516) = 0;
      v2 = v809;
      v668 = *(_QWORD *)(v809 + 976);
      v639 = *(char **)(v668 + 48);
      v640 = *(char **)(v668 + 56);
    }
  }
  if (v640 == v639)
    goto LABEL_367;
  v669 = (v640 - v639) >> 4;
  do
  {
    v670 = v669 >> 1;
    v671 = (unsigned int *)&v639[16 * (v669 >> 1)];
    v673 = *v671;
    v672 = (char *)(v671 + 4);
    v669 += ~(v669 >> 1);
    if (v673 < v901)
      v639 = v672;
    else
      v669 = v670;
  }
  while (v669);
  if (v639 == v640 || *(_DWORD *)v639 != v901)
LABEL_367:
    v639 = v640;
  *(_QWORD *)(*((_QWORD *)v639 + 1) + 24) = 0;
  sub_20F7C3AB0(*(_QWORD **)(v2 + 1008), a2);
  v674 = (uint64_t *)v678[1];
  if (v674)
  {
    v675 = v809;
    do
    {
      v676 = v674;
      v674 = (uint64_t *)*v674;
    }
    while (v674);
  }
  else
  {
    v677 = v678;
    v675 = v809;
    do
    {
      v676 = (uint64_t *)v677[2];
      _ZF = *v676 == (_QWORD)v677;
      v677 = v676;
    }
    while (!_ZF);
  }
  if (*(uint64_t **)(v675 + 984) == v678)
    *(_QWORD *)(v675 + 984) = v676;
  --*(_QWORD *)(v675 + 1000);
  sub_20E8D2134(*(uint64_t **)(v675 + 992), v678);
  operator delete(v678);
  sub_20E9BCAA8(v908);
  if (v910)
  {
    v911 = (char *)v910;
    operator delete(v910);
  }
}

void sub_20F7D82D8(_Unwind_Exception *a1)
{
  void *v2;

  if (LOBYTE(STACK[0xA48]) && SLOBYTE(STACK[0xA47]) < 0)
    operator delete((void *)STACK[0xA30]);
  __cxa_guard_abort(&qword_254A4A510);
  sub_20E863714((uint64_t)&STACK[0xB50]);
  sub_20E9BCAA8((_QWORD *)STACK[0x8D0]);
  v2 = (void *)STACK[0x8E0];
  if (STACK[0x8E0])
  {
    STACK[0x8E8] = (unint64_t)v2;
    operator delete(v2);
  }
  _Unwind_Resume(a1);
}

void sub_20F7D8438(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  double *v9;
  uint64_t *v10;
  uint64_t v11;
  _QWORD *v12;
  int *v14;
  int *v15;
  uint64_t *v16;
  char *v17;
  uint64_t *v18;
  unint64_t v19;
  unsigned int v20;
  _QWORD *v21;
  uint64_t *v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unsigned int v27;
  _QWORD *v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  double v32;
  float64x2_t v34;
  double v35;
  float64x2_t v37;
  int8x16_t v39;
  double v40;
  float64x2_t v42;
  int64x2_t v45;
  int64x2_t v46;
  float64x2_t v48;
  double v51;
  float64x2_t v53;
  unint64_t v55;
  float64x2_t v57;
  float64x2_t v58;
  float64x2_t v59;
  float64x2_t v60;
  float64x2_t v61;
  float64x2_t v62;
  float64x2_t v63;
  float64x2_t v64;
  float64x2_t v65;
  float64x2_t v66;
  float64x2_t v67;
  float64x2_t v68;
  float64x2_t v70;
  float64x2_t v71;
  float64x2_t v72;
  float64x2_t v73;
  float64x2_t v74;
  double v78;
  double v79;
  double v80;
  __double2 v81;
  float64x2_t v83;
  float64x2_t v84;
  float64x2_t v85;
  float64x2_t v87;
  int v94;
  double *v95;
  double v96;
  int v97;
  unint64_t v98;
  float64x2_t *v99;
  float64x2_t **v100;
  double *v101;
  float64x2_t *v102;
  unint64_t v103;
  unint64_t v104;
  unint64_t v105;
  unint64_t v106;
  char *v107;
  double v108;
  float64x2_t v109;
  char *v110;
  char *v111;
  __int128 v112;
  __int128 v113;
  uint64_t v114;
  uint64_t v115;
  char *v116;
  _QWORD *v117;
  int *v118;
  char v119;
  float64x2_t *v120;
  float64x2_t *v121;
  float64x2_t *v122;
  int v123;
  unint64_t v124;
  unint64_t v125;
  unint64_t v126;
  unint64_t v127;
  char *v128;
  float64x2_t v129;
  float64x2_t *v130;
  float64x2_t *v131;
  float64x2_t v132;
  float64x2_t v133;
  char v136;
  double *v137;
  float64x2_t v138;
  float64_t v139;
  float64_t v141;
  uint64_t *v142;
  float64x2_t v143[3];
  float64x2_t v144;
  float64x2_t v145;
  float64x2_t v146;
  float64x2_t v147;
  float64x2_t v148;
  float64x2_t v149;
  float64x2_t v150;
  float64x2_t v151;
  double *v152[2];
  float64x2_t *v153[3];

  v3 = a3;
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  __asm { FMOV            V0.2D, #-1.0 }
  *(_OWORD *)(a3 + 24) = _Q0;
  *(_QWORD *)(a3 + 40) = 0xBFF0000000000000;
  v9 = (double *)(a3 + 40);
  *(_BYTE *)(a3 + 48) = *a2 != a2[1];
  v10 = *(uint64_t **)(*(_QWORD *)(a1 + 1008) + 16);
  if (!v10)
    return;
  v11 = a1;
  v136 = 0;
  v12 = (_QWORD *)(*(_QWORD *)(a1 + 16) + 56);
  v137 = (double *)(a3 + 32);
  __asm { FMOV            V0.2D, #1.0 }
  v141 = *((double *)&_Q0 + 1);
  do
  {
    v14 = (int *)v10[6];
    v15 = (int *)v10[7];
    if (v14 != v15)
    {
      v16 = v10 + 2;
      do
      {
        if (*((_DWORD *)v10 + 6) >= v14[6])
          goto LABEL_8;
        if (!*((_BYTE *)v14 + 160))
          goto LABEL_8;
        if (!*((_BYTE *)v14 + 456))
          goto LABEL_8;
        v18 = (uint64_t *)*v12;
        if (!*v12)
          goto LABEL_8;
        v19 = v10[2];
        v20 = *((_DWORD *)v10 + 6);
        v21 = v12;
        v22 = (uint64_t *)*v12;
        do
        {
          v23 = v22[4];
          if (v23 < v19)
          {
            ++v22;
          }
          else if (v23 == v19)
          {
            if (*((_DWORD *)v22 + 10) < v20)
              ++v22;
            else
              v21 = v22;
          }
          else
          {
            v21 = v22;
          }
          v22 = (uint64_t *)*v22;
        }
        while (v22);
        if (v21 == v12 || (v24 = v21[4], v19 < v24) || v19 == v24 && *((_DWORD *)v21 + 10) > v20)
          v25 = 0;
        else
          v25 = v21[6];
        v26 = *((_QWORD *)v14 + 2);
        v27 = v14[6];
        v28 = v12;
        do
        {
          v29 = v18[4];
          if (v29 < v26)
          {
            ++v18;
          }
          else if (v29 == v26)
          {
            if (*((_DWORD *)v18 + 10) < v27)
              ++v18;
            else
              v28 = v18;
          }
          else
          {
            v28 = v18;
          }
          v18 = (uint64_t *)*v18;
        }
        while (v18);
        if (v28 == v12)
          goto LABEL_8;
        v30 = v28[4];
        if (v26 < v30 || v26 == v30 && *((_DWORD *)v28 + 10) > v27)
          goto LABEL_8;
        if (!v25)
          goto LABEL_8;
        v31 = v28[6];
        if (!v31)
          goto LABEL_8;
        v142 = v16;
        v32 = *(double *)(v25 + 16);
        _D6 = *(double *)(v25 + 40);
        v34 = *(float64x2_t *)(v25 + 24);
        v35 = *(double *)(v25 + 64);
        _Q1 = (float64x2_t)vzip2q_s64(*(int64x2_t *)v25, (int64x2_t)v34);
        v37 = (float64x2_t)vdupq_laneq_s64((int64x2_t)_Q1, 1);
        _Q5 = *(float64x2_t *)(v25 + 48);
        v39 = (int8x16_t)vdupq_lane_s64(*(uint64_t *)&_Q1.f64[0], 0);
        v40 = *(double *)(v25 + 88);
        _Q25 = (float64x2_t)vzip1q_s64(*(int64x2_t *)v25, (int64x2_t)v34);
        v42 = vmlaq_laneq_f64(vmulq_n_f64(_Q25, *(double *)(v25 + 72)), _Q1, *(float64x2_t *)(v25 + 72), 1);
        _Q1.f64[0] = v32;
        _Q1.f64[1] = _D6;
        _Q0 = vmlaq_n_f64(v42, _Q1, v40);
        _D19 = *(_QWORD *)(v25 + 80);
        __asm { FMLA            D1, D19, V5.D[1] }
        _Q1.f64[0] = _Q1.f64[0] + v35 * v40;
        v45 = (int64x2_t)vextq_s8(v39, (int8x16_t)v37, 8uLL);
        v37.f64[0] = *(float64_t *)(v31 + 16);
        v46 = *(int64x2_t *)(v31 + 24);
        _Q21 = *(int64x2_t *)(v31 + 48);
        v48 = (float64x2_t)vzip1q_s64(*(int64x2_t *)v31, v46);
        _Q17 = (float64x2_t)vzip2q_s64(*(int64x2_t *)v31, v46);
        v37.f64[1] = *(float64_t *)(v31 + 40);
        _Q22 = (float64x2_t)vextq_s8((int8x16_t)_Q17, (int8x16_t)vdupq_laneq_s64(_Q21, 1), 8uLL);
        v51 = *(double *)(v31 + 88);
        _Q24 = *(float64x2_t *)(v31 + 72);
        v53 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v48, _Q24.f64[0]), _Q17, _Q24, 1), v37, v51);
        _Q24.f64[0] = *(float64_t *)(v31 + 80);
        __asm { FMLA            D27, D24, V21.D[1] }
        _Q24.f64[0] = _D27 + *(double *)(v31 + 64) * v51;
        v55 = *(_QWORD *)(v31 + 48);
        _Q17.f64[1] = _Q22.f64[0];
        _Q22.f64[0] = *(float64_t *)(v31 + 64);
        _Q23.f64[1] = v141;
        *(_QWORD *)&_Q23.f64[0] = *(_OWORD *)&vnegq_f64(_Q24);
        v57 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)vzip1q_s64((int64x2_t)_Q25, v45), _Q0.f64[0]), (float64x2_t)vzip2q_s64((int64x2_t)_Q25, v45), _Q0, 1), _Q5, _Q1.f64[0]);
        __asm { FMLA            D25, D6, V0.D[1] }
        _Q25.f64[0] = _Q25.f64[0] + v35 * _Q1.f64[0];
        v58 = vmlsq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v48, *(double *)v25), _Q17, *(float64x2_t *)v25, 1), v37, v32), (float64x2_t)0, v53);
        v59 = vmlaq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)v55, *(double *)v25), (float64x2_t)*(unint64_t *)&_Q22.f64[1], *(float64x2_t *)v25, 1), (float64x2_t)*(unint64_t *)&_Q22.f64[0], v32), (float64x2_t)0, _Q23);
        v60 = vmlsq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v48, v34.f64[0]), _Q17, v34, 1), v37, _D6), (float64x2_t)0, v53);
        v61 = vmlaq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)v55, v34.f64[0]), (float64x2_t)*(unint64_t *)&_Q22.f64[1], v34, 1), (float64x2_t)*(unint64_t *)&_Q22.f64[0], _D6), (float64x2_t)0, _Q23);
        v62 = vmlsq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v48, _Q5.f64[0]), _Q17, _Q5, 1), v37, v35), (float64x2_t)0, v53);
        v63 = vmlaq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)v55, _Q5.f64[0]), (float64x2_t)*(unint64_t *)&_Q22.f64[1], _Q5, 1), (float64x2_t)*(unint64_t *)&_Q22.f64[0], v35), (float64x2_t)0, _Q23);
        v64 = vsubq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v48, v57.f64[0]), _Q17, v57, 1), v37, _Q25.f64[0]), v53);
        v65 = vaddq_f64(_Q23, vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)v55, v57.f64[0]), (float64x2_t)*(unint64_t *)&_Q22.f64[1], v57, 1), (float64x2_t)*(unint64_t *)&_Q22.f64[0], _Q25.f64[0]));
        _Q22.f64[0] = *((float64_t *)v14 + 6);
        v66 = *((float64x2_t *)v14 + 2);
        v37.f64[0] = *((float64_t *)v14 + 10);
        v67 = *((float64x2_t *)v14 + 4);
        _Q17.f64[0] = *((float64_t *)v14 + 14);
        v68 = *((float64x2_t *)v14 + 6);
        _Q23.f64[0] = *((float64_t *)v14 + 18);
        _Q24 = *((float64x2_t *)v14 + 8);
        v70 = vmulq_n_f64(v58, _Q22.f64[0]);
        v71 = vmulq_n_f64(v59, _Q22.f64[0]);
        _Q22.f64[1] = v37.f64[0];
        v72 = vmlsq_lane_f64(vmlsq_laneq_f64(vmulq_n_f64((float64x2_t)vzip1q_s64((int64x2_t)v66, (int64x2_t)v67), vnegq_f64(_Q24).f64[0]), (float64x2_t)vzip2q_s64((int64x2_t)v66, (int64x2_t)v67), _Q24, 1), _Q22, _Q23.f64[0], 0);
        _Q25.f64[0] = *((float64_t *)v14 + 13);
        __asm
        {
          FMLS            D22, D25, V24.D[1]
          FMLS            D22, D17, V23.D[0]
        }
        v144 = vmlaq_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v58, v66.f64[0]), v60, v67.f64[0]), v62, v68.f64[0]), (float64x2_t)0, v64);
        v145 = vmlaq_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v59, v66.f64[0]), v61, v67.f64[0]), v63, v68.f64[0]), (float64x2_t)0, v65);
        v146 = vmlaq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(v58, v66, 1), v60, v67, 1), v62, v68, 1), (float64x2_t)0, v64);
        v147 = vmlaq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(v59, v66, 1), v61, v67, 1), v63, v68, 1), (float64x2_t)0, v65);
        v148 = vmlaq_f64(vmlaq_n_f64(vmlaq_n_f64(v70, v60, v37.f64[0]), v62, _Q17.f64[0]), (float64x2_t)0, v64);
        v149 = vmlaq_f64(vmlaq_n_f64(vmlaq_n_f64(v71, v61, v37.f64[0]), v63, _Q17.f64[0]), (float64x2_t)0, v65);
        v150 = vaddq_f64(v64, vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v58, v72.f64[0]), v60, v72, 1), v62, _Q22.f64[0]));
        v151 = vaddq_f64(v65, vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v59, v72.f64[0]), v61, v72, 1), v63, _Q22.f64[0]));
        memset(v143, 0, sizeof(v143));
        v153[0] = &v144;
        v153[1] = 0;
        v152[0] = (double *)v143;
        v152[1] = 0;
        sub_20E95B988(v153, v152);
        v74.f64[0] = v143[1].f64[0];
        _Q18 = v143[0];
        _Q0 = vmulq_f64(_Q18, _Q18);
        _D1 = v143[0].f64[1];
        __asm { FMLA            D0, D1, V18.D[1] }
        v78 = _Q0.f64[0] + v74.f64[0] * v74.f64[0];
        if (v78 >= 0.0000002635)
        {
          v80 = sqrt(v78);
          v138 = v143[0];
          v139 = v143[1].f64[0];
          v81 = __sincos_stret(v80);
          _Q18 = v138;
          v74.f64[0] = v139;
          v73.f64[0] = v81.__sinval / v80;
          _Q0.f64[0] = 1.0 / v78 * (1.0 - v81.__cosval);
          v79 = 1.0 / v78 * (1.0 - v81.__sinval / v80);
          v16 = v142;
          if (v78 < 2.775e-15)
          {
LABEL_48:
            _Q0.f64[0] = v78 * 0.0000330687831 + v78 * 0.00138888889 + 0.0833333333;
            goto LABEL_50;
          }
        }
        else
        {
          _Q0.f64[0] = 0.5 - v78 * (v78 / -720.0 + 0.0416666667);
          v79 = 0.166666667 - v78 * (v78 / -5040.0 + 0.00833333333);
          v73.f64[0] = 1.0 - v78 * v79;
          v16 = v142;
          if (v78 < 2.775e-15)
            goto LABEL_48;
        }
        if (v78 <= 9.0)
          _Q0.f64[0] = (_Q0.f64[0] * 0.5 - v79) / v73.f64[0];
        else
          _Q0.f64[0] = (_Q0.f64[0] + v73.f64[0] * -0.5) / (v78 * _Q0.f64[0]);
LABEL_50:
        _Q1 = (float64x2_t)vextq_s8((int8x16_t)_Q18, (int8x16_t)_Q18, 8uLL);
        v73.f64[0] = v151.f64[0];
        v83.f64[0] = _Q1.f64[0];
        v83.f64[1] = v74.f64[0];
        v84 = (float64x2_t)vextq_s8((int8x16_t)v150, (int8x16_t)v73, 8uLL);
        v85 = vsubq_f64(vmulq_laneq_f64(_Q18, v150, 1), vmulq_f64(_Q1, v150));
        __asm { FMOV            V7.2D, #-0.5 }
        v87 = vaddq_f64(v73, vmulq_f64(v85, _Q7));
        v73.f64[1] = v150.f64[0];
        v74.f64[1] = _Q18.f64[0];
        _Q2 = vsubq_f64(vmulq_f64(v83, v73), vmulq_f64(v74, v84));
        _Q5 = (float64x2_t)vextq_s8((int8x16_t)_Q2, (int8x16_t)v85, 8uLL);
        v85.f64[1] = _Q2.f64[0];
        *(_QWORD *)&v143[2].f64[1] = *(_OWORD *)&vaddq_f64(v87, vmulq_f64(_Q0, vsubq_f64(vmulq_laneq_f64(_Q18, _Q2, 1), vmulq_f64(_Q1, _Q2))));
        *(float64x2_t *)((char *)&v143[1] + 8) = vaddq_f64(vaddq_f64(v150, vmulq_f64(_Q2, _Q7)), vmulq_n_f64(vsubq_f64(vmulq_f64(v83, v85), vmulq_f64(v74, _Q5)), _Q0.f64[0]));
        _Q2.f64[1] = v143[1].f64[1];
        _V0.D[1] = v143[2].f64[1];
        _V3.D[1] = v143[0].f64[1];
        _Q5.f64[0] = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)(v14 + 168), *(double *)v143), *(float64x2_t *)(v14 + 216), *v143, 1), *(float64x2_t *)(v14 + 264), *(double *)(v143 + 16)), *(float64x2_t *)(v14 + 312), *(v143 + 16), 1), *(float64x2_t *)(v14 + 360), *(double *)(v143 + 32)), *(float64x2_t *)(v14 + 408), *(v143 + 32), 1).f64[1];
        __asm { FMLA            D1, D5, V3.D[1] }
        _D3 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)(v14 + 184), *(double *)v143), *(float64x2_t *)(v14 + 232), *v143, 1), *(float64x2_t *)(v14 + 280), *(double *)(v143 + 16)), *(float64x2_t *)(v14 + 328), *(v143 + 16), 1), *(float64x2_t *)(v14 + 376), *(double *)(v143 + 32)), *(float64x2_t *)(v14 + 424), *(v143 + 32), 1).f64[1];
        __asm { FMLA            D1, D3, V2.D[1] }
        _Q2.f64[0] = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)(v14 + 200), *(double *)v143), *(float64x2_t *)(v14 + 248), *v143, 1), *(float64x2_t *)(v14 + 296), *(double *)(v143 + 16)), *(float64x2_t *)(v14 + 344), *(v143 + 16), 1), *(float64x2_t *)(v14 + 392), *(double *)(v143 + 32)), *(float64x2_t *)(v14 + 440), *(v143 + 32), 1).f64[1];
        __asm { FMLA            D1, D2, V0.D[1] }
        v94 = v14[116];
        v95 = v9;
        switch(v94)
        {
          case 0:
            goto LABEL_54;
          case 2:
            v108 = *(double *)(v3 + 24);
            if (v108 < _D1)
              v108 = _D1;
            *(double *)(v3 + 24) = v108;
            if (_D1 > *(double *)(v11 + 216))
              v136 = 1;
            goto LABEL_8;
          case 3:
            v95 = v137;
LABEL_54:
            v96 = *v95;
            if (*v95 < _D1)
              v96 = _D1;
            *v95 = v96;
            break;
        }
        if (_D1 <= *(double *)(v11 + 208))
          goto LABEL_8;
        *(_QWORD *)&v144.f64[0] = *v16;
        LODWORD(v144.f64[1]) = *((_DWORD *)v16 + 2);
        v145.f64[0] = *((float64_t *)v14 + 2);
        LODWORD(v145.f64[1]) = v14[6];
        v97 = *v14;
        v99 = *(float64x2_t **)(v3 + 8);
        v98 = *(_QWORD *)(v3 + 16);
        if ((unint64_t)v99 >= v98)
        {
          v100 = (float64x2_t **)v3;
          v101 = v9;
          v102 = *v100;
          v103 = 0xCCCCCCCCCCCCCCCDLL * (((char *)v99 - (char *)*v100) >> 3);
          v104 = v103 + 1;
          if (v103 + 1 > 0x666666666666666)
            sub_20E867F44();
          v105 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v98 - (_QWORD)v102) >> 3);
          if (2 * v105 > v104)
            v104 = 2 * v105;
          if (v105 >= 0x333333333333333)
            v106 = 0x666666666666666;
          else
            v106 = v104;
          if (v106)
          {
            if (v106 > 0x666666666666666)
              sub_20E877A38();
            v107 = (char *)operator new(40 * v106);
          }
          else
          {
            v107 = 0;
          }
          v109 = v145;
          v110 = &v107[40 * v103];
          *(float64x2_t *)v110 = v144;
          *((float64x2_t *)v110 + 1) = v109;
          *((_DWORD *)v110 + 8) = v97;
          v111 = v110;
          v9 = v101;
          if (v99 == v102)
          {
            v3 = a3;
            v17 = v110 + 40;
            *(_QWORD *)a3 = v110;
            *(_QWORD *)(a3 + 8) = v110 + 40;
            *(_QWORD *)(a3 + 16) = &v107[40 * v106];
            if (v99)
              goto LABEL_76;
          }
          else
          {
            do
            {
              v112 = *(__int128 *)((char *)&v99[-3] + 8);
              v113 = *(__int128 *)((char *)&v99[-2] + 8);
              *((_DWORD *)v111 - 2) = LODWORD(v99[-1].f64[1]);
              *(_OWORD *)(v111 - 24) = v113;
              *(_OWORD *)(v111 - 40) = v112;
              v111 -= 40;
              v99 = (float64x2_t *)((char *)v99 - 40);
            }
            while (v99 != v102);
            v3 = a3;
            v99 = *(float64x2_t **)a3;
            v17 = v110 + 40;
            *(_QWORD *)a3 = v111;
            *(_QWORD *)(a3 + 8) = v110 + 40;
            *(_QWORD *)(a3 + 16) = &v107[40 * v106];
            if (v99)
LABEL_76:
              operator delete(v99);
          }
          v16 = v142;
          goto LABEL_7;
        }
        *v99 = v144;
        v99[1] = v145;
        LODWORD(v99[2].f64[0]) = v97;
        v17 = (char *)&v99[2].f64[1];
LABEL_7:
        *(_QWORD *)(v3 + 8) = v17;
        v11 = a1;
LABEL_8:
        v14 += 118;
      }
      while (v14 != v15);
    }
    v10 = (uint64_t *)*v10;
  }
  while (v10);
  v115 = *a2;
  v114 = a2[1];
  if (((*a2 != v114) & v136) == 1)
  {
    do
    {
      v117 = *(_QWORD **)(v11 + 1008);
      LODWORD(v153[0]) = 0;
      v144 = *(float64x2_t *)v115;
      LODWORD(v145.f64[0]) = -1;
      v143[0] = *(float64x2_t *)(v115 + 16);
      LODWORD(v143[1].f64[0]) = -1;
      v118 = (int *)sub_20F7C4798(v117, (uint64_t *)&v144, (uint64_t)v143, (unsigned int *)v153);
      if (v119)
      {
        v120 = *(float64x2_t **)v3;
        v121 = *(float64x2_t **)(v3 + 8);
        v122 = *(float64x2_t **)v3;
        if (*(float64x2_t **)v3 != v121)
        {
          v123 = *v118;
          v122 = *(float64x2_t **)v3;
          while (LODWORD(v122[2].f64[0]) != v123)
          {
            v122 = (float64x2_t *)((char *)v122 + 40);
            if (v122 == v121)
              goto LABEL_93;
          }
        }
        if (v122 == v121)
        {
          v123 = *v118;
LABEL_93:
          v144.f64[0] = *(float64_t *)v115;
          LODWORD(v144.f64[1]) = *(_DWORD *)(v115 + 8);
          v145.f64[0] = *(float64_t *)(v115 + 16);
          LODWORD(v145.f64[1]) = *(_DWORD *)(v115 + 24);
          v124 = *(_QWORD *)(v3 + 16);
          if ((unint64_t)v121 < v124)
          {
            *v121 = v144;
            v121[1] = v145;
            LODWORD(v121[2].f64[0]) = v123;
            v116 = (char *)&v121[2].f64[1];
          }
          else
          {
            v125 = 0xCCCCCCCCCCCCCCCDLL * (((char *)v121 - (char *)v120) >> 3) + 1;
            if (v125 > 0x666666666666666)
              sub_20E867F44();
            v126 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v124 - (_QWORD)v120) >> 3);
            if (2 * v126 > v125)
              v125 = 2 * v126;
            if (v126 >= 0x333333333333333)
              v127 = 0x666666666666666;
            else
              v127 = v125;
            if (v127)
            {
              if (v127 > 0x666666666666666)
                sub_20E877A38();
              v128 = (char *)operator new(40 * v127);
            }
            else
            {
              v128 = 0;
            }
            v129 = v145;
            v130 = (float64x2_t *)&v128[8 * (((char *)v121 - (char *)v120) >> 3)];
            *v130 = v144;
            v130[1] = v129;
            LODWORD(v130[2].f64[0]) = v123;
            v131 = v130;
            if (v120 != v121)
            {
              do
              {
                v132 = *(float64x2_t *)((char *)v121 - 40);
                v133 = *(float64x2_t *)((char *)v121 - 24);
                LODWORD(v131[-1].f64[1]) = LODWORD(v121[-1].f64[1]);
                *(float64x2_t *)((char *)v131 - 24) = v133;
                *(float64x2_t *)((char *)v131 - 40) = v132;
                v131 = (float64x2_t *)((char *)v131 - 40);
                v121 = (float64x2_t *)((char *)v121 - 40);
              }
              while (v121 != v120);
              v120 = *(float64x2_t **)v3;
            }
            v116 = (char *)&v130[2].f64[1];
            *(_QWORD *)v3 = v131;
            *(_QWORD *)(v3 + 8) = (char *)v130 + 40;
            *(_QWORD *)(v3 + 16) = &v128[40 * v127];
            if (v120)
              operator delete(v120);
          }
          *(_QWORD *)(v3 + 8) = v116;
          v11 = a1;
        }
      }
      v115 += 32;
    }
    while (v115 != v114);
  }
}

void sub_20F7D8F40(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  void *v12;

  v12 = *(void **)a11;
  if (*(_QWORD *)a11)
  {
    *(_QWORD *)(a11 + 8) = v12;
    operator delete(v12);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20F7D8F78(uint64_t result, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  float64x2_t v15;
  int64x2_t v16;
  float64x2_t v17;
  double v18;
  float64x2_t v20;
  float64x2_t v21;
  float64x2_t v22;
  _QWORD *v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  v3 = result;
  v4 = *(_QWORD *)(result + 16);
  v5 = *(_QWORD **)(v4 + 48);
  v6 = (_QWORD *)(v4 + 56);
  if (v5 != (_QWORD *)(v4 + 56))
  {
    do
    {
      v8 = *a3;
      v9 = a3[1];
      if (v9 != *a3)
      {
        v10 = 0x8E38E38E38E38E39 * ((v9 - *a3) >> 4);
        v11 = v5[4];
        do
        {
          v12 = v10 >> 1;
          v13 = v8 + 144 * (v10 >> 1);
          if (*(_QWORD *)v13 < v11 || *(_QWORD *)v13 == v11 && *(_DWORD *)(v13 + 8) < *((_DWORD *)v5 + 10))
          {
            v8 = v13 + 144;
            v12 = v10 + ~v12;
          }
          v10 = v12;
        }
        while (v12);
      }
      if (v8 == v9 || *(_QWORD *)v8 != v5[4] || *(_DWORD *)(v8 + 8) != *((_DWORD *)v5 + 10))
      {
        result = sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/MapOptimization/src/PoseGraphOptimizer.cpp", 645, (uint64_t)"T_oldG_to_I_iter != T_oldG_to_I_set.end()", 41, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0);
        v8 = v9;
        if ((_DWORD)result)
          abort();
      }
      v14 = v5[6];
      v15.f64[0] = *(float64_t *)(v8 + 32);
      v16 = *(int64x2_t *)(v8 + 16);
      v17 = *(float64x2_t *)(v8 + 48);
      v18 = *(double *)(v8 + 96);
      _Q4 = *(int64x2_t *)(v8 + 80);
      v20 = (float64x2_t)vzip1q_s64(v16, (int64x2_t)v17);
      v21 = (float64x2_t)vzip2q_s64(v16, (int64x2_t)v17);
      v15.f64[1] = *(float64_t *)(v8 + 64);
      v17.f64[0] = *(float64_t *)(v8 + 128);
      v22 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v20, *(double *)(v8 + 112)), v21, *(float64x2_t *)(v8 + 112), 1), v15, v17.f64[0]);
      _D7 = *(_QWORD *)(v8 + 120);
      __asm { FMLA            D17, D7, V4.D[1] }
      v17.f64[0] = _D17 + v18 * v17.f64[0];
      *(float64x2_t *)v14 = v20;
      *(int64x2_t *)(v14 + 16) = vzip1q_s64(_Q4, (int64x2_t)v21);
      *(int8x16_t *)(v14 + 32) = vextq_s8((int8x16_t)v21, (int8x16_t)vdupq_laneq_s64(_Q4, 1), 8uLL);
      *(float64x2_t *)(v14 + 48) = v15;
      *(double *)(v14 + 64) = v18;
      *(float64x2_t *)(v14 + 72) = vnegq_f64(v22);
      *(_QWORD *)(v14 + 88) = *(_OWORD *)&vnegq_f64(v17);
      v29 = (_QWORD *)v5[1];
      if (v29)
      {
        do
        {
          v30 = v29;
          v29 = (_QWORD *)*v29;
        }
        while (v29);
      }
      else
      {
        do
        {
          v30 = (_QWORD *)v5[2];
          _ZF = *v30 == (_QWORD)v5;
          v5 = v30;
        }
        while (!_ZF);
      }
      v5 = v30;
    }
    while (v30 != v6);
  }
  v31 = a2[1];
  if (*a2 != v31)
  {
    v32 = *a2 + 16;
    do
    {
      result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD))(*(_QWORD *)v3 + 120))(v3, v32 - 16, v32, *(unsigned int *)(v32 + 16));
      v33 = v32 + 24;
      v32 += 40;
    }
    while (v33 != v31);
  }
  return result;
}

void sub_20F7D91B0(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  _QWORD *v13;
  int v14;
  unint64_t v15;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  size_t v20;
  const char *v21;
  unsigned __int8 v22;
  unsigned __int8 v23;
  const char *v24;
  size_t v25;
  void *v26;
  unint64_t v27;
  const char *v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  NSObject *v35;
  uint64_t v36;
  uint64_t v37;
  size_t v38;
  std::__shared_weak_count_vtbl *v39;
  std::__shared_weak_count *v40;
  std::__shared_weak_count *v41;
  unint64_t *p_shared_owners;
  unint64_t v43;
  unint64_t v44;
  void *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  uint64_t v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  std::__shared_weak_count *v63;
  unint64_t *v64;
  unint64_t v65;
  std::__shared_weak_count *v66;
  unint64_t *v67;
  unint64_t v68;
  void *v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  _QWORD v73[3];
  int v74;
  const char *v75;
  int v76;
  const char *v77;
  uint64_t v78;
  std::__shared_weak_count *v79;
  uint64_t v80;
  void *object;
  void *v82[2];
  __int128 v83;
  void *__p[2];
  unint64_t v85;
  char v86;
  uint64_t v87;
  uint64_t v88;

  sub_20F7C3F38(*(_QWORD **)(a1 + 1008), a2, a3);
  v6 = *(_QWORD *)(a1 + 976);
  v7 = *(_QWORD **)(v6 + 240);
  v8 = *(_QWORD **)(v6 + 248);
  if (v8 != v7)
  {
    v9 = 0xB195E8EFDB195E8FLL * (v8 - v7);
    do
    {
      v10 = v9 >> 1;
      v11 = &v7[111 * (v9 >> 1)];
      v12 = *v11;
      v13 = v11 + 111;
      v9 += ~(v9 >> 1);
      if (v12 < a4)
        v7 = v13;
      else
        v9 = v10;
    }
    while (v9);
  }
  if (v7 != v8 && *v7 == a4)
  {
    *((_BYTE *)v7 + 880) = 1;
    *(_BYTE *)(v6 + 314) = 0;
    *(_WORD *)(v6 + 312) = 256;
    *(_BYTE *)(v6 + 517) = 0;
    *(_DWORD *)(v6 + 512) = 0;
    return;
  }
  sub_20F7D2884(&v80);
  if (**(int **)(v80 + 56) <= 3)
  {
    v14 = *(unsigned __int8 *)(v80 + 72);
    v15 = sub_20E8C31DC(v80, "OSLogSurrogateAppender", 1, 0);
    if (v14 || v15 != 0)
    {
      v17 = v15;
      v73[0] = &v80;
      v73[1] = std::chrono::steady_clock::now().__d_.__rep_;
      v73[2] = std::chrono::system_clock::now().__d_.__rep_;
      v74 = 3;
      v75 = "unknown file";
      v76 = 666;
      v78 = 0;
      v79 = 0;
      v77 = "unknown function";
      v18 = v80;
      v19 = v80 + 16;
      if (*(char *)(v80 + 39) < 0)
      {
        v21 = *(const char **)(v80 + 16);
        v20 = *(_QWORD *)(v80 + 24);
        v23 = atomic_load((unsigned __int8 *)&qword_254A4A510);
        if ((v23 & 1) != 0)
          goto LABEL_19;
      }
      else
      {
        v20 = *(unsigned __int8 *)(v80 + 39);
        v21 = (const char *)(*(_QWORD *)v73[0] + 16);
        v22 = atomic_load((unsigned __int8 *)&qword_254A4A510);
        if ((v22 & 1) != 0)
          goto LABEL_19;
      }
      if (__cxa_guard_acquire(&qword_254A4A510))
      {
        sub_20E9E46F8((uint64_t)&object);
        sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)&object);
        if ((_BYTE)v83 && SHIBYTE(v82[1]) < 0)
          operator delete(object);
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
        __cxa_guard_release(&qword_254A4A510);
      }
LABEL_19:
      if (byte_254A4A4F8[23] >= 0)
        v24 = byte_254A4A4F8;
      else
        v24 = *(const char **)byte_254A4A4F8;
      if (byte_254A4A4F8[23] >= 0)
        v25 = byte_254A4A4F8[23];
      else
        v25 = *(_QWORD *)&byte_254A4A4F8[8];
      object = os_log_create(v24, v21);
      v26 = v82;
      if (v25 > 0x7FFFFFFFFFFFFFF7)
        sub_20E860B7C();
      if (v25 >= 0x17)
      {
        v27 = v17;
        v28 = v21;
        v29 = v18;
        v30 = v14;
        v31 = v19;
        v32 = (v25 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v25 | 7) != 0x17)
          v32 = v25 | 7;
        v33 = v32 + 1;
        v26 = operator new(v32 + 1);
        v82[1] = (void *)v25;
        *(_QWORD *)&v83 = v33 | 0x8000000000000000;
        v82[0] = v26;
        v19 = v31;
        v14 = v30;
        v18 = v29;
        v21 = v28;
        v17 = v27;
      }
      else
      {
        BYTE7(v83) = v25;
        if (!v25)
        {
LABEL_33:
          *((_BYTE *)v26 + v25) = 0;
          BYTE8(v83) = 1;
          v34 = __p;
          if (v20 > 0x7FFFFFFFFFFFFFF7)
            sub_20E860B7C();
          if (v20 >= 0x17)
          {
            v36 = (v20 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v20 | 7) != 0x17)
              v36 = v20 | 7;
            v37 = v36 + 1;
            v34 = operator new(v36 + 1);
            __p[1] = (void *)v20;
            v85 = v37 | 0x8000000000000000;
            __p[0] = v34;
          }
          else
          {
            HIBYTE(v85) = v20;
            if (!v20)
            {
              LOBYTE(__p[0]) = 0;
              v86 = 1;
              v35 = object;
              if ((SHIBYTE(v85) & 0x80000000) == 0)
                goto LABEL_37;
              goto LABEL_43;
            }
          }
          memmove(v34, v21, v20);
          *((_BYTE *)v34 + v20) = 0;
          v86 = 1;
          v35 = object;
          if ((SHIBYTE(v85) & 0x80000000) == 0)
          {
LABEL_37:
            if (!BYTE8(v83))
              goto LABEL_46;
            goto LABEL_44;
          }
LABEL_43:
          operator delete(__p[0]);
          if (!BYTE8(v83))
          {
LABEL_46:
            if (object)
              os_release(object);
            if (v17 && *(_QWORD *)(v17 + 24))
            {
              v38 = _os_log_pack_size();
              v39 = (std::__shared_weak_count_vtbl *)operator new(v38, (std::align_val_t)8uLL);
              v40 = (std::__shared_weak_count *)operator new();
              v41 = v40;
              v40->__shared_owners_ = 0;
              p_shared_owners = (unint64_t *)&v40->__shared_owners_;
              v40->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
              v40->__shared_weak_owners_ = 0;
              v40[1].__vftable = v39;
              object = v39;
              v82[0] = v39;
              v82[1] = v40;
              do
                v43 = __ldxr(p_shared_owners);
              while (__stxr(v43 + 1, p_shared_owners));
              v83 = 0uLL;
              __p[0] = 0;
              do
                v44 = __ldaxr(p_shared_owners);
              while (__stlxr(v44 - 1, p_shared_owners));
              if (!v44)
              {
                ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
                std::__shared_weak_count::__release_weak(v41);
              }
              v45 = object;
              *(_WORD *)_os_log_pack_fill() = 0;
              v46 = operator new();
              v47 = *(unsigned __int8 *)(v18 + 39);
              if ((v47 & 0x80u) == 0)
                v48 = v19;
              else
                v48 = *(_QWORD *)(v18 + 16);
              if ((v47 & 0x80u) != 0)
                v47 = *(_QWORD *)(v18 + 24);
              *(_QWORD *)v46 = v45;
              *(_OWORD *)(v46 + 8) = *(_OWORD *)v82;
              v82[0] = 0;
              v82[1] = 0;
              *(_OWORD *)(v46 + 24) = v83;
              v83 = 0uLL;
              *(_QWORD *)(v46 + 40) = v48;
              *(_QWORD *)(v46 + 48) = v47;
              *(_BYTE *)(v46 + 56) = 1;
              v87 = 0;
              v88 = v46;
              (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(v17 + 24) + 40))(*(_QWORD *)(v17 + 24), &v88);
              v49 = v88;
              v88 = 0;
              if (v49)
              {
                v50 = *(std::__shared_weak_count **)(v49 + 32);
                if (v50)
                {
                  v51 = (unint64_t *)&v50->__shared_owners_;
                  do
                    v52 = __ldaxr(v51);
                  while (__stlxr(v52 - 1, v51));
                  if (!v52)
                  {
                    ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
                    std::__shared_weak_count::__release_weak(v50);
                  }
                }
                v53 = *(std::__shared_weak_count **)(v49 + 16);
                if (v53)
                {
                  v54 = (unint64_t *)&v53->__shared_owners_;
                  do
                    v55 = __ldaxr(v54);
                  while (__stlxr(v55 - 1, v54));
                  if (!v55)
                  {
                    ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
                    std::__shared_weak_count::__release_weak(v53);
                  }
                }
                MEMORY[0x212BC6398](v49, 0x10F0C40B62ED6C6);
                v56 = v87;
                v87 = 0;
                if (v56)
                {
                  v57 = *(std::__shared_weak_count **)(v56 + 32);
                  if (v57)
                  {
                    v58 = (unint64_t *)&v57->__shared_owners_;
                    do
                      v59 = __ldaxr(v58);
                    while (__stlxr(v59 - 1, v58));
                    if (!v59)
                    {
                      ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
                      std::__shared_weak_count::__release_weak(v57);
                    }
                  }
                  v60 = *(std::__shared_weak_count **)(v56 + 16);
                  if (v60)
                  {
                    v61 = (unint64_t *)&v60->__shared_owners_;
                    do
                      v62 = __ldaxr(v61);
                    while (__stlxr(v62 - 1, v61));
                    if (!v62)
                    {
                      ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
                      std::__shared_weak_count::__release_weak(v60);
                    }
                  }
                  MEMORY[0x212BC6398](v56, 0x10F0C40B62ED6C6);
                }
              }
              v63 = (std::__shared_weak_count *)*((_QWORD *)&v83 + 1);
              if (*((_QWORD *)&v83 + 1))
              {
                v64 = (unint64_t *)(*((_QWORD *)&v83 + 1) + 8);
                do
                  v65 = __ldaxr(v64);
                while (__stlxr(v65 - 1, v64));
                if (!v65)
                {
                  ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
                  std::__shared_weak_count::__release_weak(v63);
                }
              }
              v66 = (std::__shared_weak_count *)v82[1];
              if (v82[1])
              {
                v67 = (unint64_t *)((char *)v82[1] + 8);
                do
                  v68 = __ldaxr(v67);
                while (__stlxr(v68 - 1, v67));
                if (!v68)
                {
                  ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
                  std::__shared_weak_count::__release_weak(v66);
                }
              }
            }
            else
            {
              os_log_type_enabled(v35, OS_LOG_TYPE_INFO);
              LOWORD(object) = 0;
              v69 = (void *)_os_log_send_and_compose_impl();
              if (v69)
                free(v69);
            }
            if (v14)
            {
              sub_20E8C003C((uint64_t)v73, "Outlier factor is not found");
              sub_20E863570((uint64_t)v73);
            }
            sub_20E863570((uint64_t)v73);
            v70 = v79;
            if (v79)
            {
              v71 = (unint64_t *)&v79->__shared_owners_;
              do
                v72 = __ldaxr(v71);
              while (__stlxr(v72 - 1, v71));
              if (!v72)
              {
                ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
                std::__shared_weak_count::__release_weak(v70);
              }
            }
            return;
          }
LABEL_44:
          if (SBYTE7(v83) < 0)
            operator delete(v82[0]);
          goto LABEL_46;
        }
      }
      memmove(v26, v24, v25);
      goto LABEL_33;
    }
  }
}

void sub_20F7D992C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27)
{
  if (a27)
  {
    if (a26 < 0)
      operator delete(__p);
  }
  __cxa_guard_abort(&qword_254A4A510);
  sub_20E863714((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void sub_20F7D996C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v3;
  uint64_t v5;
  va_list va;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v5 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  sub_20E86E8C4((uint64_t *)(v3 - 96));
  sub_20E86E8C4((uint64_t *)(v3 - 104));
  sub_20E86E658((uint64_t)va1);
  sub_20E863714((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20F7D99A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v3;
  va_list va;

  va_start(va, a3);
  MEMORY[0x212BC6398](v3, 0x10D0C40B950D02ALL);
  sub_20E863714((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20F7D99CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E863714((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20F7D99E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E863714((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20F7D99FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *object,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,char a28)
{
  if (a28 && a27 < 0)
    operator delete(__p);
  if (object)
    os_release(object);
  sub_20E863714((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void sub_20F7D9A40(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v3;
  void *__p;
  void *v6;
  uint64_t v7;

  v3 = *(_QWORD **)(a1 + 1008);
  if (!v3)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/MapOptimization/src/PoseGraphOptimizer.cpp", 671, (uint64_t)"graph_", 6, (uint64_t)"The graph is not set", 20, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v3 = *(_QWORD **)(a1 + 1008);
  }
  __p = 0;
  v6 = 0;
  v7 = 0;
  sub_20F281F30(a2, v3, (uint64_t *)&__p);
  if (__p)
  {
    v6 = __p;
    operator delete(__p);
  }
}

void sub_20F7D9AD0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20F7D9AEC(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  int v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  int v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  const char *v36;
  size_t v37;
  unsigned __int8 v38;
  int v39;
  int v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  int v65;
  unint64_t v66;
  unint64_t v67;
  uint64_t v68;
  const char *v69;
  size_t v70;
  unsigned __int8 v71;
  unsigned __int8 v72;
  const char *v73;
  size_t v74;
  _BYTE *v75;
  uint64_t v76;
  uint64_t v77;
  _BYTE *v78;
  NSObject *v79;
  uint64_t v80;
  uint64_t v81;
  size_t v82;
  std::__shared_weak_count_vtbl *v83;
  std::__shared_weak_count *v84;
  std::__shared_weak_count *v85;
  unint64_t *p_shared_owners;
  unint64_t v87;
  unint64_t v88;
  uint64_t v89;
  char *v90;
  uint64_t v91;
  const char *v92;
  void *v93;
  std::__shared_weak_count *v94;
  unint64_t *v95;
  unint64_t v96;
  std::__shared_weak_count *v97;
  unint64_t *v98;
  unint64_t v99;
  uint64_t v100;
  std::__shared_weak_count *v101;
  unint64_t *v102;
  unint64_t v103;
  std::__shared_weak_count *v104;
  unint64_t *v105;
  unint64_t v106;
  std::__shared_weak_count *v107;
  int v108;
  unint64_t *v109;
  unint64_t v110;
  std::__shared_weak_count *v111;
  unint64_t *v112;
  unint64_t v113;
  void *v114;
  std::__shared_weak_count *v115;
  unint64_t *v116;
  unint64_t v117;
  unsigned __int8 v118;
  const char *v119;
  size_t v120;
  _BYTE *v121;
  uint64_t v122;
  uint64_t v123;
  _BYTE *v124;
  NSObject *v125;
  uint64_t v126;
  uint64_t v127;
  size_t v128;
  std::__shared_weak_count_vtbl *v129;
  std::__shared_weak_count *v130;
  std::__shared_weak_count *v131;
  unint64_t *v132;
  unint64_t v133;
  unint64_t v134;
  uint64_t v135;
  char *v136;
  uint64_t v137;
  const char *v138;
  void *v139;
  std::__shared_weak_count *v140;
  unint64_t *v141;
  unint64_t v142;
  std::__shared_weak_count *v143;
  unint64_t *v144;
  unint64_t v145;
  uint64_t v146;
  std::__shared_weak_count *v147;
  unint64_t *v148;
  unint64_t v149;
  std::__shared_weak_count *v150;
  unint64_t *v151;
  unint64_t v152;
  std::__shared_weak_count *v153;
  int v154;
  unint64_t *v155;
  unint64_t v156;
  std::__shared_weak_count *v157;
  unint64_t *v158;
  unint64_t v159;
  void *v160;
  unint64_t *v161;
  _QWORD *v162;
  _QWORD *v163;
  uint64_t v164;
  _QWORD *v165;
  _QWORD *v166;
  BOOL v167;
  const char *v168;
  const char *v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  _QWORD *v173;
  int v174;
  int v175;
  uint64_t v176;
  _BYTE object[48];
  __int128 v178;
  __int128 v179;
  __int128 v180;
  __int128 v181;
  __int128 v182;
  __int128 v183;
  __int128 v184;
  __int128 v185;
  __int128 v186;
  __int128 v187;
  __int128 v188;
  __int128 v189;
  __int128 v190;
  __int128 v191;
  __int128 v192;
  __int128 v193;
  __int128 v194;
  __int128 v195;
  __int128 v196;
  __int128 v197;
  __int128 v198;
  __int128 v199;
  __int128 v200;
  uint64_t v201;
  uint64_t v202;
  int v203;
  void *v204;
  uint64_t v205;
  int v206;
  char v207;
  char v208;

  sub_20F7D2978(a1);
  v5 = a2[3];
  v4 = a2[4];
  v173 = a2;
  if (v5 != v4)
  {
    v172 = a2[4];
    while (*(_BYTE *)v5 == 1)
    {
      v205 = 0;
      v204 = *(void **)(v5 + 8);
      v39 = *(_DWORD *)(v5 + 24);
      LODWORD(v205) = *(_DWORD *)(v5 + 16);
      v206 = v39;
      v201 = *(_QWORD *)(v5 + 32);
      v202 = 0;
      v40 = *(_DWORD *)(v5 + 48);
      LODWORD(v202) = *(_DWORD *)(v5 + 40);
      v203 = v40;
      v41 = *(_OWORD *)(v5 + 72);
      v42 = *(_OWORD *)(v5 + 56);
      v43 = *(_OWORD *)(v5 + 104);
      v44 = *(_OWORD *)(v5 + 88);
      v45 = *(_OWORD *)(v5 + 136);
      v46 = *(_OWORD *)(v5 + 120);
      v47 = *(_OWORD *)(v5 + 168);
      v199 = *(_OWORD *)(v5 + 152);
      v200 = v47;
      v197 = v46;
      v198 = v45;
      v195 = v44;
      v196 = v43;
      v193 = v42;
      v194 = v41;
      v48 = *(_OWORD *)(v5 + 184);
      v49 = *(_OWORD *)(v5 + 200);
      v50 = *(_OWORD *)(v5 + 216);
      v51 = *(_OWORD *)(v5 + 232);
      v52 = *(_OWORD *)(v5 + 248);
      v53 = *(_OWORD *)(v5 + 264);
      v54 = *(_OWORD *)(v5 + 280);
      v55 = *(_OWORD *)(v5 + 296);
      v56 = *(_OWORD *)(v5 + 312);
      v57 = *(_OWORD *)(v5 + 328);
      v58 = *(_OWORD *)(v5 + 344);
      v59 = *(_OWORD *)(v5 + 360);
      v60 = *(_OWORD *)(v5 + 376);
      v61 = *(_OWORD *)(v5 + 392);
      v62 = *(_OWORD *)(v5 + 408);
      v63 = *(_OWORD *)(v5 + 424);
      v64 = *(_OWORD *)(v5 + 456);
      v191 = *(_OWORD *)(v5 + 440);
      v192 = v64;
      v189 = v62;
      v190 = v63;
      v187 = v60;
      v188 = v61;
      v185 = v58;
      v186 = v59;
      v183 = v56;
      v184 = v57;
      v181 = v54;
      v182 = v55;
      v179 = v52;
      v180 = v53;
      *(_OWORD *)&object[32] = v50;
      v178 = v51;
      *(_OWORD *)object = v48;
      *(_OWORD *)&object[16] = v49;
      if (sub_20F7CE3D0(a1, (uint64_t)&v204, (uint64_t)&v201, (uint64_t)&v193, (int8x16_t *)object, *(_DWORD *)(v5 + 472)) == 1)
      {
        sub_20F7D2884(&v176);
        if (**(int **)(v176 + 56) <= 4)
        {
          v65 = *(unsigned __int8 *)(v176 + 72);
          v66 = sub_20E8C31DC(v176, "OSLogSurrogateAppender", 1, 0);
          v67 = v66;
          if (v65 || v66)
          {
            v175 = v65;
            *(_QWORD *)&v193 = &v176;
            *((std::chrono::steady_clock::time_point *)&v193 + 1) = std::chrono::steady_clock::now();
            *(std::chrono::system_clock::time_point *)&v194 = std::chrono::system_clock::now();
            DWORD2(v194) = 4;
            *(_QWORD *)&v195 = "unknown file";
            DWORD2(v195) = 704;
            *(_QWORD *)&v196 = "unknown function";
            *((_QWORD *)&v196 + 1) = 0;
            *(_QWORD *)&v197 = 0;
            v68 = *(_QWORD *)v193;
            v69 = (const char *)(*(_QWORD *)v193 + 16);
            v169 = v69;
            if (*(char *)(*(_QWORD *)v193 + 39) < 0)
            {
              v69 = *(const char **)(v68 + 16);
              v70 = *(_QWORD *)(v68 + 24);
              v171 = *(_QWORD *)v193;
              v72 = atomic_load((unsigned __int8 *)&qword_254A4A510);
              if ((v72 & 1) == 0)
              {
LABEL_183:
                if (__cxa_guard_acquire(&qword_254A4A510))
                {
                  sub_20E9E46F8((uint64_t)&v204);
                  sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)&v204);
                  if (v208 && v207 < 0)
                    operator delete(v204);
                  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
                  __cxa_guard_release(&qword_254A4A510);
                  v4 = v172;
                }
              }
            }
            else
            {
              v70 = *(unsigned __int8 *)(*(_QWORD *)v193 + 39);
              v171 = *(_QWORD *)v193;
              v71 = atomic_load((unsigned __int8 *)&qword_254A4A510);
              if ((v71 & 1) == 0)
                goto LABEL_183;
            }
            if (byte_254A4A4F8[23] >= 0)
              v73 = byte_254A4A4F8;
            else
              v73 = *(const char **)byte_254A4A4F8;
            if (byte_254A4A4F8[23] >= 0)
              v74 = byte_254A4A4F8[23];
            else
              v74 = *(_QWORD *)&byte_254A4A4F8[8];
            *(_QWORD *)object = os_log_create(v73, v69);
            if (v74 > 0x7FFFFFFFFFFFFFF7)
              sub_20E860B7C();
            if (v74 >= 0x17)
            {
              v76 = (v74 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v74 | 7) != 0x17)
                v76 = v74 | 7;
              v77 = v76 + 1;
              v75 = operator new(v76 + 1);
              *(_QWORD *)&object[16] = v74;
              *(_QWORD *)&object[24] = v77 | 0x8000000000000000;
              *(_QWORD *)&object[8] = v75;
              v4 = v172;
            }
            else
            {
              object[31] = v74;
              v75 = &object[8];
              if (!v74)
              {
LABEL_35:
                v75[v74] = 0;
                object[32] = 1;
                if (v70 > 0x7FFFFFFFFFFFFFF7)
                  sub_20E860B7C();
                if (v70 >= 0x17)
                {
                  v80 = (v70 & 0xFFFFFFFFFFFFFFF8) + 8;
                  if ((v70 | 7) != 0x17)
                    v80 = v70 | 7;
                  v81 = v80 + 1;
                  v78 = operator new(v80 + 1);
                  *(_QWORD *)&v178 = v70;
                  *((_QWORD *)&v178 + 1) = v81 | 0x8000000000000000;
                  *(_QWORD *)&object[40] = v78;
                }
                else
                {
                  HIBYTE(v178) = v70;
                  v78 = &object[40];
                  if (!v70)
                  {
                    object[40] = 0;
                    LOBYTE(v179) = 1;
                    v79 = *(NSObject **)object;
                    if ((SHIBYTE(v178) & 0x80000000) == 0)
                      goto LABEL_39;
LABEL_45:
                    operator delete(*(void **)&object[40]);
                    if (object[32])
                      goto LABEL_46;
                    goto LABEL_48;
                  }
                }
                memmove(v78, v69, v70);
                v78[v70] = 0;
                LOBYTE(v179) = 1;
                v79 = *(NSObject **)object;
                if (SHIBYTE(v178) < 0)
                  goto LABEL_45;
LABEL_39:
                if (object[32])
                {
LABEL_46:
                  if ((object[31] & 0x80000000) != 0)
                    operator delete(*(void **)&object[8]);
                }
LABEL_48:
                if (*(_QWORD *)object)
                  os_release(*(void **)object);
                if (v67 && *(_QWORD *)(v67 + 24))
                {
                  v82 = _os_log_pack_size();
                  v83 = (std::__shared_weak_count_vtbl *)operator new(v82, (std::align_val_t)8uLL);
                  v84 = (std::__shared_weak_count *)operator new();
                  v85 = v84;
                  v84->__shared_owners_ = 0;
                  p_shared_owners = (unint64_t *)&v84->__shared_owners_;
                  v84->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
                  v84->__shared_weak_owners_ = 0;
                  v84[1].__vftable = v83;
                  *(_QWORD *)object = v83;
                  *(_QWORD *)&object[8] = v83;
                  *(_QWORD *)&object[16] = v84;
                  do
                    v87 = __ldxr(p_shared_owners);
                  while (__stxr(v87 + 1, p_shared_owners));
                  memset(&object[24], 0, 24);
                  do
                    v88 = __ldaxr(p_shared_owners);
                  while (__stlxr(v88 - 1, p_shared_owners));
                  if (!v88)
                  {
                    ((void (*)(std::__shared_weak_count *))v84->__on_zero_shared)(v84);
                    std::__shared_weak_count::__release_weak(v85);
                  }
                  v89 = *(_QWORD *)object;
                  *(_WORD *)_os_log_pack_fill() = 0;
                  v90 = (char *)operator new();
                  v91 = *(unsigned __int8 *)(v171 + 39);
                  v92 = v169;
                  if ((v91 & 0x80u) != 0)
                  {
                    v92 = *(const char **)(v171 + 16);
                    v91 = *(_QWORD *)(v171 + 24);
                  }
                  *(_QWORD *)v90 = v89;
                  *(_OWORD *)(v90 + 8) = *(_OWORD *)&object[8];
                  *(_QWORD *)&object[8] = 0;
                  *(_QWORD *)&object[16] = 0;
                  *(_OWORD *)(v90 + 24) = *(_OWORD *)&object[24];
                  *(_QWORD *)&object[24] = 0;
                  *(_QWORD *)&object[32] = 0;
                  *((_QWORD *)v90 + 5) = v92;
                  *((_QWORD *)v90 + 6) = v91;
                  v90[56] = 16;
                  v201 = 0;
                  v204 = v90;
                  (*(void (**)(_QWORD, void **))(**(_QWORD **)(v67 + 24) + 40))(*(_QWORD *)(v67 + 24), &v204);
                  v93 = v204;
                  v204 = 0;
                  if (v93)
                  {
                    v94 = (std::__shared_weak_count *)*((_QWORD *)v93 + 4);
                    if (v94)
                    {
                      v95 = (unint64_t *)&v94->__shared_owners_;
                      do
                        v96 = __ldaxr(v95);
                      while (__stlxr(v96 - 1, v95));
                      if (!v96)
                      {
                        ((void (*)(std::__shared_weak_count *))v94->__on_zero_shared)(v94);
                        std::__shared_weak_count::__release_weak(v94);
                      }
                    }
                    v97 = (std::__shared_weak_count *)*((_QWORD *)v93 + 2);
                    if (v97)
                    {
                      v98 = (unint64_t *)&v97->__shared_owners_;
                      do
                        v99 = __ldaxr(v98);
                      while (__stlxr(v99 - 1, v98));
                      if (!v99)
                      {
                        ((void (*)(std::__shared_weak_count *))v97->__on_zero_shared)(v97);
                        std::__shared_weak_count::__release_weak(v97);
                      }
                    }
                    MEMORY[0x212BC6398](v93, 0x10F0C40B62ED6C6);
                    v100 = v201;
                    v201 = 0;
                    if (v100)
                    {
                      v101 = *(std::__shared_weak_count **)(v100 + 32);
                      if (v101)
                      {
                        v102 = (unint64_t *)&v101->__shared_owners_;
                        do
                          v103 = __ldaxr(v102);
                        while (__stlxr(v103 - 1, v102));
                        if (!v103)
                        {
                          ((void (*)(std::__shared_weak_count *))v101->__on_zero_shared)(v101);
                          std::__shared_weak_count::__release_weak(v101);
                        }
                      }
                      v104 = *(std::__shared_weak_count **)(v100 + 16);
                      if (v104)
                      {
                        v105 = (unint64_t *)&v104->__shared_owners_;
                        do
                          v106 = __ldaxr(v105);
                        while (__stlxr(v106 - 1, v105));
                        if (!v106)
                        {
                          ((void (*)(std::__shared_weak_count *))v104->__on_zero_shared)(v104);
                          std::__shared_weak_count::__release_weak(v104);
                        }
                      }
                      MEMORY[0x212BC6398](v100, 0x10F0C40B62ED6C6);
                    }
                  }
                  v107 = *(std::__shared_weak_count **)&object[32];
                  v108 = v175;
                  if (*(_QWORD *)&object[32])
                  {
                    v109 = (unint64_t *)(*(_QWORD *)&object[32] + 8);
                    do
                      v110 = __ldaxr(v109);
                    while (__stlxr(v110 - 1, v109));
                    if (!v110)
                    {
                      ((void (*)(std::__shared_weak_count *))v107->__on_zero_shared)(v107);
                      std::__shared_weak_count::__release_weak(v107);
                    }
                  }
                  v111 = *(std::__shared_weak_count **)&object[16];
                  if (*(_QWORD *)&object[16])
                  {
                    v112 = (unint64_t *)(*(_QWORD *)&object[16] + 8);
                    do
                      v113 = __ldaxr(v112);
                    while (__stlxr(v113 - 1, v112));
                    if (!v113)
                    {
                      ((void (*)(std::__shared_weak_count *))v111->__on_zero_shared)(v111);
                      std::__shared_weak_count::__release_weak(v111);
                    }
                  }
                }
                else
                {
                  os_log_type_enabled(v79, OS_LOG_TYPE_ERROR);
                  *(_WORD *)object = 0;
                  v114 = (void *)_os_log_send_and_compose_impl();
                  v108 = v175;
                  if (v114)
                    free(v114);
                }
                if (v108)
                {
                  sub_20E8C003C((uint64_t)&v193, "Failed to add the edge in the pose-graph during deserialization. This should not happen since current design the graph should contain only one edges between each pair per type.");
                  sub_20E863570((uint64_t)&v193);
                }
                sub_20E863570((uint64_t)&v193);
                v115 = (std::__shared_weak_count *)v197;
                if (!(_QWORD)v197)
                  goto LABEL_3;
                v116 = (unint64_t *)(v197 + 8);
                do
                  v117 = __ldaxr(v116);
                while (__stlxr(v117 - 1, v116));
LABEL_181:
                if (!v117)
                {
                  ((void (*)(std::__shared_weak_count *))v115->__on_zero_shared)(v115);
                  std::__shared_weak_count::__release_weak(v115);
                }
                goto LABEL_3;
              }
            }
            memmove(v75, v73, v74);
            goto LABEL_35;
          }
        }
      }
LABEL_3:
      v5 += 480;
      if (v5 == v4)
        goto LABEL_193;
    }
    if (*(_BYTE *)v5)
    {
      sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/MapOptimization/src/PoseGraphOptimizer.cpp", 707, (uint64_t)"", 0, (uint64_t)"Unsupportted edges.", 19, (void (*)(void **))sub_21023DDB0);
      abort();
    }
    v205 = 0;
    v204 = *(void **)(v5 + 8);
    v6 = *(_DWORD *)(v5 + 24);
    LODWORD(v205) = *(_DWORD *)(v5 + 16);
    v206 = v6;
    v201 = *(_QWORD *)(v5 + 32);
    v202 = 0;
    v7 = *(_DWORD *)(v5 + 48);
    LODWORD(v202) = *(_DWORD *)(v5 + 40);
    v203 = v7;
    v8 = *(_OWORD *)(v5 + 56);
    v9 = *(_OWORD *)(v5 + 72);
    v10 = *(_OWORD *)(v5 + 88);
    v11 = *(_OWORD *)(v5 + 104);
    v12 = *(_OWORD *)(v5 + 120);
    v13 = *(_OWORD *)(v5 + 136);
    v14 = *(_OWORD *)(v5 + 152);
    v200 = *(_OWORD *)(v5 + 168);
    v199 = v14;
    v198 = v13;
    v197 = v12;
    v196 = v11;
    v195 = v10;
    v194 = v9;
    v193 = v8;
    v15 = *(_OWORD *)(v5 + 184);
    v16 = *(_OWORD *)(v5 + 200);
    v17 = *(_OWORD *)(v5 + 216);
    v18 = *(_OWORD *)(v5 + 232);
    v19 = *(_OWORD *)(v5 + 248);
    v20 = *(_OWORD *)(v5 + 264);
    v21 = *(_OWORD *)(v5 + 280);
    v22 = *(_OWORD *)(v5 + 296);
    v23 = *(_OWORD *)(v5 + 312);
    v24 = *(_OWORD *)(v5 + 328);
    v25 = *(_OWORD *)(v5 + 344);
    v26 = *(_OWORD *)(v5 + 360);
    v27 = *(_OWORD *)(v5 + 376);
    v28 = *(_OWORD *)(v5 + 392);
    v29 = *(_OWORD *)(v5 + 408);
    v30 = *(_OWORD *)(v5 + 424);
    v31 = *(_OWORD *)(v5 + 456);
    v191 = *(_OWORD *)(v5 + 440);
    v192 = v31;
    v189 = v29;
    v190 = v30;
    v187 = v27;
    v188 = v28;
    v185 = v25;
    v186 = v26;
    v183 = v23;
    v184 = v24;
    v181 = v21;
    v182 = v22;
    v179 = v19;
    v180 = v20;
    *(_OWORD *)&object[32] = v17;
    v178 = v18;
    *(_OWORD *)object = v15;
    *(_OWORD *)&object[16] = v16;
    if (sub_20F7D0FF8(a1, (uint64_t)&v204, (uint64_t)&v201, &v193, (double *)object, *(_DWORD *)(v5 + 472)) != 1)
      goto LABEL_3;
    sub_20F7D2884(&v176);
    if (**(int **)(v176 + 56) > 4)
      goto LABEL_3;
    v32 = *(unsigned __int8 *)(v176 + 72);
    v33 = sub_20E8C31DC(v176, "OSLogSurrogateAppender", 1, 0);
    v34 = v33;
    if (!v32 && !v33)
      goto LABEL_3;
    v174 = v32;
    *(_QWORD *)&v193 = &v176;
    *((std::chrono::steady_clock::time_point *)&v193 + 1) = std::chrono::steady_clock::now();
    *(std::chrono::system_clock::time_point *)&v194 = std::chrono::system_clock::now();
    DWORD2(v194) = 4;
    *(_QWORD *)&v195 = "unknown file";
    DWORD2(v195) = 691;
    *(_QWORD *)&v196 = "unknown function";
    *((_QWORD *)&v196 + 1) = 0;
    *(_QWORD *)&v197 = 0;
    v35 = *(_QWORD *)v193;
    v36 = (const char *)(*(_QWORD *)v193 + 16);
    v168 = v36;
    if (*(char *)(*(_QWORD *)v193 + 39) < 0)
    {
      v36 = *(const char **)(v35 + 16);
      v37 = *(_QWORD *)(v35 + 24);
      v170 = *(_QWORD *)v193;
      v118 = atomic_load((unsigned __int8 *)&qword_254A4A510);
      if ((v118 & 1) != 0)
        goto LABEL_102;
    }
    else
    {
      v37 = *(unsigned __int8 *)(*(_QWORD *)v193 + 39);
      v170 = *(_QWORD *)v193;
      v38 = atomic_load((unsigned __int8 *)&qword_254A4A510);
      if ((v38 & 1) != 0)
        goto LABEL_102;
    }
    if (__cxa_guard_acquire(&qword_254A4A510))
    {
      sub_20E9E46F8((uint64_t)&v204);
      sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)&v204);
      if (v208 && v207 < 0)
        operator delete(v204);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
      __cxa_guard_release(&qword_254A4A510);
      v4 = v172;
    }
LABEL_102:
    if (byte_254A4A4F8[23] >= 0)
      v119 = byte_254A4A4F8;
    else
      v119 = *(const char **)byte_254A4A4F8;
    if (byte_254A4A4F8[23] >= 0)
      v120 = byte_254A4A4F8[23];
    else
      v120 = *(_QWORD *)&byte_254A4A4F8[8];
    *(_QWORD *)object = os_log_create(v119, v36);
    if (v120 > 0x7FFFFFFFFFFFFFF7)
      sub_20E860B7C();
    if (v120 >= 0x17)
    {
      v122 = (v120 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v120 | 7) != 0x17)
        v122 = v120 | 7;
      v123 = v122 + 1;
      v121 = operator new(v122 + 1);
      *(_QWORD *)&object[16] = v120;
      *(_QWORD *)&object[24] = v123 | 0x8000000000000000;
      *(_QWORD *)&object[8] = v121;
      v4 = v172;
    }
    else
    {
      object[31] = v120;
      v121 = &object[8];
      if (!v120)
      {
LABEL_116:
        v121[v120] = 0;
        object[32] = 1;
        if (v37 > 0x7FFFFFFFFFFFFFF7)
          sub_20E860B7C();
        if (v37 >= 0x17)
        {
          v126 = (v37 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v37 | 7) != 0x17)
            v126 = v37 | 7;
          v127 = v126 + 1;
          v124 = operator new(v126 + 1);
          *(_QWORD *)&v178 = v37;
          *((_QWORD *)&v178 + 1) = v127 | 0x8000000000000000;
          *(_QWORD *)&object[40] = v124;
        }
        else
        {
          HIBYTE(v178) = v37;
          v124 = &object[40];
          if (!v37)
          {
            object[40] = 0;
            LOBYTE(v179) = 1;
            v125 = *(NSObject **)object;
            if ((SHIBYTE(v178) & 0x80000000) == 0)
              goto LABEL_120;
            goto LABEL_126;
          }
        }
        memmove(v124, v36, v37);
        v124[v37] = 0;
        LOBYTE(v179) = 1;
        v125 = *(NSObject **)object;
        if ((SHIBYTE(v178) & 0x80000000) == 0)
        {
LABEL_120:
          if (!object[32])
            goto LABEL_129;
          goto LABEL_127;
        }
LABEL_126:
        operator delete(*(void **)&object[40]);
        if (!object[32])
        {
LABEL_129:
          if (*(_QWORD *)object)
            os_release(*(void **)object);
          if (v34 && *(_QWORD *)(v34 + 24))
          {
            v128 = _os_log_pack_size();
            v129 = (std::__shared_weak_count_vtbl *)operator new(v128, (std::align_val_t)8uLL);
            v130 = (std::__shared_weak_count *)operator new();
            v131 = v130;
            v130->__shared_owners_ = 0;
            v132 = (unint64_t *)&v130->__shared_owners_;
            v130->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
            v130->__shared_weak_owners_ = 0;
            v130[1].__vftable = v129;
            *(_QWORD *)object = v129;
            *(_QWORD *)&object[8] = v129;
            *(_QWORD *)&object[16] = v130;
            do
              v133 = __ldxr(v132);
            while (__stxr(v133 + 1, v132));
            memset(&object[24], 0, 24);
            do
              v134 = __ldaxr(v132);
            while (__stlxr(v134 - 1, v132));
            if (!v134)
            {
              ((void (*)(std::__shared_weak_count *))v130->__on_zero_shared)(v130);
              std::__shared_weak_count::__release_weak(v131);
            }
            v135 = *(_QWORD *)object;
            *(_WORD *)_os_log_pack_fill() = 0;
            v136 = (char *)operator new();
            v137 = *(unsigned __int8 *)(v170 + 39);
            v138 = v168;
            if ((v137 & 0x80u) != 0)
            {
              v138 = *(const char **)(v170 + 16);
              v137 = *(_QWORD *)(v170 + 24);
            }
            *(_QWORD *)v136 = v135;
            *(_OWORD *)(v136 + 8) = *(_OWORD *)&object[8];
            *(_QWORD *)&object[8] = 0;
            *(_QWORD *)&object[16] = 0;
            *(_OWORD *)(v136 + 24) = *(_OWORD *)&object[24];
            *(_QWORD *)&object[24] = 0;
            *(_QWORD *)&object[32] = 0;
            *((_QWORD *)v136 + 5) = v138;
            *((_QWORD *)v136 + 6) = v137;
            v136[56] = 16;
            v201 = 0;
            v204 = v136;
            (*(void (**)(_QWORD, void **))(**(_QWORD **)(v34 + 24) + 40))(*(_QWORD *)(v34 + 24), &v204);
            v139 = v204;
            v204 = 0;
            if (v139)
            {
              v140 = (std::__shared_weak_count *)*((_QWORD *)v139 + 4);
              if (v140)
              {
                v141 = (unint64_t *)&v140->__shared_owners_;
                do
                  v142 = __ldaxr(v141);
                while (__stlxr(v142 - 1, v141));
                if (!v142)
                {
                  ((void (*)(std::__shared_weak_count *))v140->__on_zero_shared)(v140);
                  std::__shared_weak_count::__release_weak(v140);
                }
              }
              v143 = (std::__shared_weak_count *)*((_QWORD *)v139 + 2);
              if (v143)
              {
                v144 = (unint64_t *)&v143->__shared_owners_;
                do
                  v145 = __ldaxr(v144);
                while (__stlxr(v145 - 1, v144));
                if (!v145)
                {
                  ((void (*)(std::__shared_weak_count *))v143->__on_zero_shared)(v143);
                  std::__shared_weak_count::__release_weak(v143);
                }
              }
              MEMORY[0x212BC6398](v139, 0x10F0C40B62ED6C6);
              v146 = v201;
              v201 = 0;
              if (v146)
              {
                v147 = *(std::__shared_weak_count **)(v146 + 32);
                if (v147)
                {
                  v148 = (unint64_t *)&v147->__shared_owners_;
                  do
                    v149 = __ldaxr(v148);
                  while (__stlxr(v149 - 1, v148));
                  if (!v149)
                  {
                    ((void (*)(std::__shared_weak_count *))v147->__on_zero_shared)(v147);
                    std::__shared_weak_count::__release_weak(v147);
                  }
                }
                v150 = *(std::__shared_weak_count **)(v146 + 16);
                if (v150)
                {
                  v151 = (unint64_t *)&v150->__shared_owners_;
                  do
                    v152 = __ldaxr(v151);
                  while (__stlxr(v152 - 1, v151));
                  if (!v152)
                  {
                    ((void (*)(std::__shared_weak_count *))v150->__on_zero_shared)(v150);
                    std::__shared_weak_count::__release_weak(v150);
                  }
                }
                MEMORY[0x212BC6398](v146, 0x10F0C40B62ED6C6);
              }
            }
            v153 = *(std::__shared_weak_count **)&object[32];
            v154 = v174;
            if (*(_QWORD *)&object[32])
            {
              v155 = (unint64_t *)(*(_QWORD *)&object[32] + 8);
              do
                v156 = __ldaxr(v155);
              while (__stlxr(v156 - 1, v155));
              if (!v156)
              {
                ((void (*)(std::__shared_weak_count *))v153->__on_zero_shared)(v153);
                std::__shared_weak_count::__release_weak(v153);
              }
            }
            v157 = *(std::__shared_weak_count **)&object[16];
            if (*(_QWORD *)&object[16])
            {
              v158 = (unint64_t *)(*(_QWORD *)&object[16] + 8);
              do
                v159 = __ldaxr(v158);
              while (__stlxr(v159 - 1, v158));
              if (!v159)
              {
                ((void (*)(std::__shared_weak_count *))v157->__on_zero_shared)(v157);
                std::__shared_weak_count::__release_weak(v157);
              }
            }
          }
          else
          {
            os_log_type_enabled(v125, OS_LOG_TYPE_ERROR);
            *(_WORD *)object = 0;
            v160 = (void *)_os_log_send_and_compose_impl();
            v154 = v174;
            if (v160)
              free(v160);
          }
          if (v154)
          {
            sub_20E8C003C((uint64_t)&v193, "Failed to add the edge in the pose-graph during deserialization. This should not happen since current design the graph should contain only one edges between each pair per type.");
            sub_20E863570((uint64_t)&v193);
          }
          sub_20E863570((uint64_t)&v193);
          v115 = (std::__shared_weak_count *)v197;
          if (!(_QWORD)v197)
            goto LABEL_3;
          v161 = (unint64_t *)(v197 + 8);
          do
            v117 = __ldaxr(v161);
          while (__stlxr(v117 - 1, v161));
          goto LABEL_181;
        }
LABEL_127:
        if ((object[31] & 0x80000000) != 0)
          operator delete(*(void **)&object[8]);
        goto LABEL_129;
      }
    }
    memmove(v121, v119, v120);
    goto LABEL_116;
  }
LABEL_193:
  v163 = a2 + 1;
  v162 = (_QWORD *)*a2;
  if ((_QWORD *)*v173 != v173 + 1)
  {
    do
    {
      v164 = *((unsigned int *)v162 + 14);
      *(_QWORD *)object = v162[6];
      *(_QWORD *)&object[8] = v164;
      sub_20F7D0920(a1, (uint64_t)object);
      v165 = (_QWORD *)v162[1];
      if (v165)
      {
        do
        {
          v166 = v165;
          v165 = (_QWORD *)*v165;
        }
        while (v165);
      }
      else
      {
        do
        {
          v166 = (_QWORD *)v162[2];
          v167 = *v166 == (_QWORD)v162;
          v162 = v166;
        }
        while (!v167);
      }
      v162 = v166;
    }
    while (v166 != v163);
  }
}

void sub_20F7DAB38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,char a58)
{
  uint64_t v58;

  if (*(_BYTE *)(v58 - 104))
  {
    if (*(char *)(v58 - 105) < 0)
      operator delete(*(void **)(v58 - 128));
  }
  __cxa_guard_abort(&qword_254A4A510);
  sub_20E863714((uint64_t)&a58);
  _Unwind_Resume(a1);
}

void sub_20F7DAB80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,char a58)
{
  uint64_t v58;

  sub_20E86E8C4((uint64_t *)(v58 - 128));
  sub_20E86E8C4((uint64_t *)(v58 - 152));
  sub_20E86E658((uint64_t)&a21);
  sub_20E863714((uint64_t)&a58);
  _Unwind_Resume(a1);
}

void sub_20F7DAC14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,char a58)
{
  sub_20E863714((uint64_t)&a58);
  _Unwind_Resume(a1);
}

void sub_20F7DAC28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *object,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,char a61)
{
  if (a27 < 0)
    operator delete(__p);
  if (object)
    os_release(object);
  sub_20E863714((uint64_t)&a61);
  _Unwind_Resume(a1);
}

_QWORD *sub_20F7DAD10(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;
  void *v6;

  *(_QWORD *)a1 = off_24CA02D48;
  v2 = *(_QWORD *)(a1 + 2472);
  if (v2)
    MEMORY[0x212BC6368](v2, 0x1000C8000313F17);
  v3 = *(_QWORD *)(a1 + 2448);
  if (v3)
    MEMORY[0x212BC6368](v3, 0x1000C8000313F17);
  if (*(__int16 *)(a1 + 2424) < 0)
  {
    free(*(void **)(a1 + 2408));
    *(_OWORD *)(a1 + 2432) = 0u;
    *(_OWORD *)(a1 + 2416) = 0u;
    *(_OWORD *)(a1 + 2400) = 0u;
    return sub_20F7E3EC8((_QWORD *)a1);
  }
  else
  {
    v4 = *(void **)(a1 + 2408);
    if (v4)
    {
      free(v4);
      *(_QWORD *)(a1 + 2408) = 0;
    }
    v5 = *(void **)(a1 + 2416);
    if (v5)
    {
      free(v5);
      *(_QWORD *)(a1 + 2416) = 0;
    }
    v6 = *(void **)(a1 + 2432);
    if (v6)
    {
      free(v6);
      *(_QWORD *)(a1 + 2432) = 0;
    }
    *(_QWORD *)(a1 + 2440) = 0;
    return sub_20F7E3EC8((_QWORD *)a1);
  }
}

void sub_20F7DADD8(std::string *a1@<X8>)
{
  std::string *v2;
  void *__p[2];
  char v4;
  std::string v5;

  *((_BYTE *)&v5.__r_.__value_.__s + 23) = 13;
  strcpy((char *)&v5, "SparseHessian");
  v4 = 8;
  strcpy((char *)__p, "Cholesky");
  v2 = std::string::append(&v5, (const std::string::value_type *)__p, 8uLL);
  *a1 = *v2;
  v2->__r_.__value_.__l.__size_ = 0;
  v2->__r_.__value_.__r.__words[2] = 0;
  v2->__r_.__value_.__r.__words[0] = 0;
  if ((v4 & 0x80000000) == 0)
  {
    if ((SHIBYTE(v5.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return;
LABEL_5:
    operator delete(v5.__r_.__value_.__l.__data_);
    return;
  }
  operator delete(__p[0]);
  if (SHIBYTE(v5.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_5;
}

void sub_20F7DAEA0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20F7DAEDC(uint64_t a1)
{
  double v2;
  float64x2_t v3;
  float64x2_t v4;
  float64x2_t v5;
  __n128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char **v13;
  char **v14;
  unsigned int **v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  float64_t v23;
  void *v24;
  int64_t v25;
  unsigned int v26;
  float64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  void **v31;
  size_t v32;
  uint64_t v33;
  _DWORD *v34;
  _DWORD *v35;
  uint64_t v36;
  unsigned int v37;
  int v38;
  uint64_t v39;
  int64x2_t v40;
  int8x16_t v41;
  int8x16_t v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  _DWORD *v47;
  _DWORD *v48;
  int v50;
  uint64_t v51;
  int v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  _DWORD **v56;
  uint64_t v57;
  _DWORD *v58;
  _DWORD *v59;
  uint64_t v60;
  uint64_t v61;
  _DWORD *v62;
  _DWORD *v63;
  int v65;
  uint64_t v66;
  int v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  _DWORD **v71;
  uint64_t v72;
  _DWORD *v73;
  _DWORD *v74;
  _QWORD *v75;
  uint64_t v76;
  uint64_t v77;
  __n128 v78;
  uint64_t v79;
  char **v80;
  int v81;
  uint64_t v82;
  unsigned int **v83;
  __n128 v84;
  uint64_t v85;
  unsigned int **v86;
  uint64_t v87;
  void **v88;
  unsigned int v89;
  unsigned int v90;
  unint64_t v91;
  unsigned int v92;
  unsigned int v93;
  void *v94;
  void **v95;
  unsigned int v96;
  void *v97;
  _QWORD *v98;
  void **v99;
  uint64_t v100;
  int v101;
  uint64_t v102;
  uint64_t *v103;
  __n128 v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  int v108;
  int v109;
  unint64_t v110;
  unint64_t i;
  uint64_t v112;
  uint64_t *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  unint64_t v119;
  uint64_t v120;
  char **v121;
  uint64_t v122;
  int v123;
  char v124;
  unsigned int **v125;
  unsigned int **v126;
  unsigned int *v127;
  uint64_t *v128;
  unsigned int **v129;
  char *v130;
  unsigned int *v131;
  _QWORD *v132;
  size_t v133;
  unint64_t v134;
  char *v135;
  uint64_t v136;
  char *v137;
  char *v138;
  uint64_t v139;
  uint64_t v140;
  unint64_t v141;
  _QWORD *v142;
  char *v143;
  char *v144;
  char *v145;
  unint64_t v146;
  uint64_t v147;
  uint64_t v148;
  char *v149;
  char *v150;
  __int128 *v151;
  uint64_t v152;
  __int128 v153;
  int v154;
  char *v155;
  int v156;
  char *v157;
  uint64_t v158;
  char *v159;
  uint64_t v160;
  uint64_t v161;
  unint64_t v162;
  uint64_t v163;
  unint64_t v164;
  _BYTE *v165;
  char *v166;
  int64_t v167;
  unint64_t v168;
  uint64_t v169;
  uint64_t v170;
  char *v171;
  _OWORD *v172;
  char *v173;
  uint64_t v174;
  __int128 v175;
  int v176;
  uint64_t v177;
  unsigned int **v178;
  uint64_t v179;
  int64_t v180;
  char *v181;
  char *v182;
  unint64_t v183;
  float64_t v184;
  unint64_t v185;
  BOOL v186;
  unint64_t v187;
  void *v188;
  int64_t v189;
  float64_t v190;
  unsigned int v191;
  int64_t v192;
  float64_t v193;
  _QWORD *v194;
  char **v195;
  uint64_t v196;
  _QWORD *v197;
  uint64_t v198;
  void *v199;
  unint64_t v200;
  char *v201;
  int *v202;
  int *v203;
  void *v204;
  unint64_t v205;
  char *v206;
  int *v207;
  int *v208;
  uint64_t v209;
  int v210;
  char *v211;
  unint64_t v212;
  char *v213;
  uint64_t v214;
  uint64_t v215;
  unint64_t v216;
  uint64_t v217;
  unint64_t v218;
  _BYTE *v219;
  _DWORD *v220;
  int64_t v221;
  unint64_t v222;
  uint64_t v223;
  uint64_t v224;
  char *v225;
  _OWORD *v226;
  char *v227;
  uint64_t v228;
  __int128 v229;
  int v230;
  uint64_t v231;
  int v232;
  char *v233;
  unint64_t v234;
  char *v235;
  uint64_t v236;
  uint64_t v237;
  unint64_t v238;
  uint64_t v239;
  unint64_t v240;
  _BYTE *v241;
  _DWORD *v242;
  int64_t v243;
  unint64_t v244;
  uint64_t v245;
  uint64_t v246;
  char *v247;
  _OWORD *v248;
  char *v249;
  uint64_t v250;
  __int128 v251;
  int v252;
  unsigned int *v253;
  unsigned int *v254;
  unsigned int *v255;
  unsigned int *v256;
  unsigned int v257;
  unint64_t v258;
  _DWORD *v259;
  unint64_t v260;
  unint64_t v261;
  unint64_t v262;
  char *v263;
  char *v264;
  char *v265;
  uint64_t v266;
  unsigned int v267;
  char *v268;
  char *v269;
  unsigned int *v270;
  unsigned int *v271;
  unsigned int *v272;
  unsigned int v273;
  unint64_t v274;
  _DWORD *v275;
  unint64_t v276;
  unint64_t v277;
  unint64_t v278;
  char *v279;
  char *v280;
  char *v281;
  uint64_t v282;
  unsigned int v283;
  char *v284;
  char *v285;
  unint64_t v286;
  unint64_t v287;
  uint64_t v288;
  unsigned int *v289;
  unsigned int *v290;
  uint64_t v291;
  unint64_t v292;
  uint64_t v293;
  unsigned int v294;
  unsigned int v295;
  unsigned int v296;
  unint64_t v297;
  int32x4_t *v298;
  int32x4_t *v299;
  unint64_t v300;
  uint64_t v301;
  int32x4_t *v302;
  uint64_t v303;
  int32x4_t v304;
  int32x4_t *v305;
  int32x4_t v306;
  int32x4_t v307;
  uint64_t v308;
  unint64_t v309;
  _DWORD *v310;
  unint64_t v311;
  _DWORD *v312;
  _DWORD *v313;
  unint64_t v314;
  int32x4_t *v315;
  int32x4_t *v316;
  unint64_t v317;
  unint64_t v318;
  uint64_t v319;
  int32x4_t *v320;
  uint64_t v321;
  int32x4_t v322;
  int32x4_t *v323;
  int32x4_t v324;
  int32x4_t v325;
  uint64_t v326;
  unint64_t v327;
  _DWORD *v328;
  unint64_t v329;
  _DWORD *v330;
  _DWORD *v331;
  uint64_t v332;
  uint64_t v333;
  uint64_t v334;
  unsigned int j;
  uint64_t k;
  uint64_t v337;
  uint64_t v338;
  void *v339;
  uint64_t v340;
  void *v341;
  uint64_t v342;
  void *v343;
  uint64_t v344;
  void *v345;
  uint64_t v346;
  uint64_t v347;
  __n128 v348;
  void **v349;
  uint64_t v350;
  unint64_t v351;
  size_t v352;
  uint64_t v353;
  _DWORD *v354;
  _DWORD *v355;
  uint64_t v356;
  unsigned int v357;
  int v358;
  uint64_t v359;
  int64x2_t v360;
  int8x16_t v361;
  int8x16_t v362;
  uint64_t v363;
  uint64_t v364;
  uint64_t v365;
  char v366;
  unsigned int v367;
  unsigned int v368;
  uint64_t v369;
  uint64_t v370;
  uint64_t v371;
  unsigned int v372;
  unsigned int v373;
  uint64_t v374;
  _QWORD *v375;
  uint64_t v376;
  uint64_t v377;
  uint64_t v378;
  uint64_t v379;
  uint64_t v380;
  int v381;
  uint64_t v382;
  int v383;
  uint64_t v384;
  uint64_t v385;
  uint64_t v386;
  uint64_t v387;
  uint64_t m;
  uint64_t v389;
  uint64_t v390;
  uint64_t v391;
  uint64_t v392;
  uint64_t v393;
  uint64_t v394;
  unsigned int *v395;
  unsigned int *v396;
  int v397;
  int v398;
  unsigned int *v399;
  unsigned int v400;
  unsigned int v401;
  uint64_t v402;
  uint64_t v403;
  __int128 v404;
  float64x2_t v405;
  unsigned int *v406;
  unsigned int *v407;
  int v408;
  int v409;
  unsigned int *v410;
  unsigned int v411;
  unsigned int v412;
  uint64_t v413;
  float64x2_t *v414;
  float64x2_t v415;
  float64x2_t v416;
  float64x2_t v417;
  float64x2_t v418;
  uint64_t v419;
  uint64_t v420;
  uint64_t v421;
  uint64_t v422;
  _QWORD *v423;
  _QWORD *v424;
  uint64_t v425;
  uint64_t v427;
  uint64_t v428;
  uint64_t v429;
  uint64_t v430;
  uint64_t v431;
  uint64_t v432;
  size_t v433;
  char *v434;
  char *v435;
  uint64_t v436;
  _QWORD *v437;
  uint64_t v438;
  void *v439;
  uint64_t v440;
  _BYTE *v441;
  uint64_t v442;
  int64_t v443;
  uint64_t v444;
  unint64_t v445;
  int64_t v446;
  unint64_t v447;
  _BYTE *v448;
  uint64_t *v449;
  _QWORD *v450;
  uint64_t v451;
  unint64_t v452;
  unint64_t v453;
  uint64_t v454;
  _OWORD *v455;
  __int128 *v456;
  uint64_t v457;
  __int128 v458;
  _DWORD *v459;
  uint64_t v460;
  _DWORD *v461;
  int v462;
  int v463;
  uint64_t v464;
  int v465;
  int v466;
  int v467;
  char *v468;
  char *v469;
  unint64_t v470;
  unint64_t v471;
  _DWORD *v472;
  _BYTE *v473;
  _BYTE *v474;
  char *v475;
  uint64_t v476;
  char *v477;
  char *v478;
  uint64_t v479;
  unint64_t v480;
  uint64_t v481;
  char *v482;
  _OWORD *v483;
  __int128 *v484;
  uint64_t v485;
  __int128 v486;
  uint64_t v487;
  void *v488;
  uint64_t v489;
  char *v490;
  uint64_t v491;
  int64_t v492;
  uint64_t v493;
  unint64_t v494;
  int64_t v495;
  unint64_t v496;
  _BYTE *v497;
  uint64_t *v498;
  char *v499;
  uint64_t v500;
  unint64_t v501;
  unint64_t v502;
  uint64_t v503;
  _OWORD *v504;
  __int128 *v505;
  uint64_t v506;
  __int128 v507;
  unsigned int v508;
  unint64_t v509;
  _DWORD *v510;
  int v511;
  uint64_t v512;
  int v513;
  unint64_t v514;
  char *v515;
  size_t v516;
  char *v517;
  uint64_t v518;
  unsigned int v519;
  int v520;
  uint64_t v521;
  char *v522;
  unsigned int v523;
  uint64_t v524;
  uint64_t v525;
  const void *v526;
  uint64_t v527;
  uint64_t v528;
  unsigned int v529;
  unsigned int v530;
  uint64_t v531;
  uint64_t v532;
  const void *v533;
  uint64_t v534;
  unsigned int *v535;
  unsigned int v536;
  uint64_t v537;
  uint64_t v538;
  uint64_t v539;
  const void *v540;
  uint64_t v541;
  _QWORD *v542;
  size_t v543;
  unsigned int v544;
  uint64_t v545;
  unsigned int v546;
  uint64_t v547;
  uint64_t v548;
  const void *v549;
  uint64_t v550;
  int v551;
  uint64_t v552;
  unsigned int **v553;
  uint64_t v554;
  uint64_t v555;
  uint64_t v556;
  uint64_t v557;
  int v558;
  unsigned int **v559;
  int64x2_t *v560;
  char v561;
  uint64_t v562;
  _QWORD *v563;
  void **v564;
  uint64_t v565;
  char **v566;
  void **v567;
  uint64_t v568;
  char **v569;
  char **v570;
  int v571[2];
  int v572[2];
  void **v573;
  int v574;
  char **v575;
  unsigned int **v576;
  int v577;
  int v578;
  unsigned int v579;
  uint64_t v580;
  int32x2_t v581;
  uint64_t v582;
  unsigned int v583;
  void *v584[8];
  float64x2_t v585;
  float64x2_t v586;
  float64x2_t v587;
  float64x2_t v588;
  __int128 v589;
  uint64_t v590;

  v590 = *MEMORY[0x24BDAC8D0];
  kdebug_trace();
  v562 = a1 + 1272;
  v7 = *(_QWORD *)(a1 + 1832);
  v8 = *(_QWORD *)(a1 + 1824);
  v9 = *(_QWORD *)(a1 + 1856);
  v10 = *(_QWORD *)(a1 + 1848);
  v560 = (int64x2_t *)(a1 + 40);
  v580 = a1;
  if (*(_BYTE *)(a1 + 312))
    goto LABEL_361;
  v554 = *(_QWORD *)(a1 + 1848);
  v555 = *(_QWORD *)(a1 + 1824);
  v556 = *(_QWORD *)(a1 + 1856);
  v557 = *(_QWORD *)(a1 + 1832);
  kdebug_trace();
  if (!*(_BYTE *)(a1 + 313))
    goto LABEL_203;
  if (*(_DWORD *)(a1 + 548) == 1)
    v11 = 3;
  else
    v11 = 1;
  if (*(_BYTE *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 1272) + 24))(v562) + 272))
    goto LABEL_7;
  v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 1272) + 24))(v562);
  v13 = (char **)sub_20F7ED8A8(v12);
  v14 = v13;
  v575 = (char **)(a1 + 1912);
  if ((char **)(a1 + 1912) != v13)
  {
    sub_20E867E00(v575, *v13, v13[1], (v13[1] - *v13) >> 2);
    sub_20E867E00((_QWORD *)(a1 + 1936), v14[3], v14[4], (v14[4] - v14[3]) >> 2);
  }
  v15 = (unsigned int **)(v14 + 6);
  v16 = *(char **)(a1 + 1912);
  v17 = *(char **)(a1 + 1920);
  if (v16 == v17 && *(_QWORD *)(a1 + 1936) == *(_QWORD *)(a1 + 1944))
  {
    v18 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v562 + 40))(v562);
    v19 = v18;
    if (a1 + 1960 != v18 + 520)
    {
      sub_20E867E00((_QWORD *)(a1 + 1960), *(char **)(v18 + 520), *(char **)(v18 + 528), (uint64_t)(*(_QWORD *)(v18 + 528) - *(_QWORD *)(v18 + 520)) >> 2);
      sub_20E867E00((_QWORD *)(a1 + 1984), *(char **)(v19 + 544), *(char **)(v19 + 552), (uint64_t)(*(_QWORD *)(v19 + 552) - *(_QWORD *)(v19 + 544)) >> 2);
    }
    sub_20F3D2024((char **)(a1 + 1960), v15);
    v586 = 0u;
    v587 = 0u;
    v585 = 0u;
    v20 = *(_QWORD *)(a1 + 1832) - *(_QWORD *)(a1 + 1824);
    if (v20)
    {
      sub_20E93DC84((uint64_t)&v585, v20 >> 2);
      v21 = *(char **)(a1 + 1824);
      v22 = *(char **)(a1 + 1832);
      v23 = v585.f64[0];
      v24 = *(void **)(a1 + 1968);
      v584[0] = *(void **)(a1 + 1960);
      v588.f64[0] = v585.f64[0];
      if (v21 == v22)
      {
        v25 = 0;
      }
      else
      {
        while (v584[0] != v24)
        {
          v26 = *(_DWORD *)v21;
          if (*(_DWORD *)v21 >= *(_DWORD *)v584[0])
          {
            v21 += 4 * (*(_DWORD *)v584[0] >= v26);
            v584[0] = (char *)v584[0] + 4;
            if (v21 == v22)
              goto LABEL_21;
          }
          else
          {
            v27 = v588.f64[0];
            **(_DWORD **)&v588.f64[0] = v26;
            v21 += 4;
            *(_QWORD *)&v588.f64[0] = *(_QWORD *)&v27 + 4;
            if (v21 == v22)
            {
LABEL_21:
              v25 = 0;
              v23 = v588.f64[0];
              goto LABEL_176;
            }
          }
        }
        v23 = v588.f64[0];
        v25 = v22 - v21;
        if (v22 != v21)
          memmove(*(void **)&v588.f64[0], v21, v22 - v21);
      }
    }
    else
    {
      v25 = 0;
      v23 = 0.0;
    }
LABEL_176:
    v180 = *(_QWORD *)&v23 + v25;
    if (v180 != *(_QWORD *)&v585.f64[1])
      *(_QWORD *)&v585.f64[1] = v180;
    v181 = *(char **)(a1 + 1856);
    v182 = *(char **)(a1 + 1848);
    v183 = (v181 - v182) >> 2;
    v184 = v586.f64[1];
    v185 = (uint64_t)(*(_QWORD *)&v587.f64[0] - *(_QWORD *)&v586.f64[1]) >> 2;
    v186 = v183 >= v185;
    v187 = v183 - v185;
    if (v187 != 0 && v186)
    {
      sub_20E93DC84((uint64_t)&v586.f64[1], v187);
      v182 = *(char **)(a1 + 1848);
      v181 = *(char **)(a1 + 1856);
      v184 = v586.f64[1];
    }
    else if (!v186)
    {
      *(_QWORD *)&v587.f64[0] = *(_QWORD *)&v586.f64[1] + 4 * v183;
    }
    v188 = *(void **)(a1 + 1992);
    v584[0] = *(void **)(a1 + 1984);
    v588.f64[0] = v184;
    if (v182 == v181)
    {
      v189 = 0;
    }
    else
    {
      while (v584[0] != v188)
      {
        v191 = *(_DWORD *)v182;
        if (*(_DWORD *)v182 < *(_DWORD *)v584[0])
        {
          v190 = v588.f64[0];
          **(_DWORD **)&v588.f64[0] = v191;
          v182 += 4;
          *(_QWORD *)&v588.f64[0] = *(_QWORD *)&v190 + 4;
          if (v182 == v181)
            goto LABEL_189;
        }
        else
        {
          v182 += 4 * (*(_DWORD *)v584[0] >= v191);
          v584[0] = (char *)v584[0] + 4;
          if (v182 == v181)
          {
LABEL_189:
            v189 = 0;
            v184 = v588.f64[0];
            goto LABEL_192;
          }
        }
      }
      v184 = v588.f64[0];
      v189 = v181 - v182;
      if (v182 != v181)
        memmove(*(void **)&v588.f64[0], v182, v181 - v182);
    }
LABEL_192:
    v192 = *(_QWORD *)&v184 + v189;
    if (v192 != *(_QWORD *)&v587.f64[0])
      *(_QWORD *)&v587.f64[0] = v192;
    memset(v584, 0, 48);
    sub_20F3D2E0C((char **)(a1 + 1304), &v585, (uint64_t)v584);
    if (v584[3])
    {
      v584[4] = v584[3];
      operator delete(v584[3]);
    }
    if (v584[0])
    {
      v584[1] = v584[0];
      operator delete(v584[0]);
    }
    if (*(_QWORD *)&v586.f64[1])
    {
      v587.f64[0] = v586.f64[1];
      operator delete(*(void **)&v586.f64[1]);
    }
    v193 = v585.f64[0];
    if (*(_QWORD *)&v585.f64[0])
    {
      v585.f64[1] = v585.f64[0];
      goto LABEL_202;
    }
    goto LABEL_203;
  }
  v559 = (unsigned int **)(a1 + 2008);
  sub_20E867E00((_QWORD *)(a1 + 2008), v16, v17, (v17 - v16) >> 2);
  v563 = (_QWORD *)(a1 + 2032);
  sub_20E867E00((_QWORD *)(a1 + 2032), *(char **)(a1 + 1936), *(char **)(a1 + 1944), (uint64_t)(*(_QWORD *)(a1 + 1944) - *(_QWORD *)(a1 + 1936)) >> 2);
  sub_20F3D21C0((char **)(a1 + 2008), v14 + 6);
  v28 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v562 + 40))(v562);
  v29 = v28;
  v570 = (char **)(a1 + 1960);
  if (a1 + 1960 != v28 + 520)
  {
    sub_20E867E00(v570, *(char **)(v28 + 520), *(char **)(v28 + 528), (uint64_t)(*(_QWORD *)(v28 + 528) - *(_QWORD *)(v28 + 520)) >> 2);
    sub_20E867E00((_QWORD *)(a1 + 1984), *(char **)(v29 + 544), *(char **)(v29 + 552), (uint64_t)(*(_QWORD *)(v29 + 552) - *(_QWORD *)(v29 + 544)) >> 2);
  }
  sub_20F3D2024(v570, v559);
  sub_20E867E00(v559, *(char **)(a1 + 1960), *(char **)(a1 + 1968), (uint64_t)(*(_QWORD *)(a1 + 1968) - *(_QWORD *)(a1 + 1960)) >> 2);
  sub_20E867E00(v563, *(char **)(a1 + 1984), *(char **)(a1 + 1992), (uint64_t)(*(_QWORD *)(a1 + 1992) - *(_QWORD *)(a1 + 1984)) >> 2);
  sub_20F3D21C0((char **)v559, v575);
  v30 = ((*(_DWORD *)(a1 + 1968) - *(_DWORD *)(a1 + 1960)) & 0xFFFFFFFC)
      + 6 * ((*(_QWORD *)(a1 + 1992) - *(_QWORD *)(a1 + 1984)) >> 2);
  v31 = (void **)(v580 + 1280);
  *(_DWORD *)(v580 + 1296) = v30;
  if (*(_QWORD *)(v580 + 1288) < v30)
  {
    if (*v31)
      MEMORY[0x212BC6368](*v31, 0x1000C8000313F17);
    *(_QWORD *)(v580 + 1280) = 0;
    v32 = (8 * v30 + 31) & 0xFFFFFFFE0;
    *(_QWORD *)(v580 + 1288) = v32 >> 3;
    *v31 = operator new(v32, (std::align_val_t)0x20uLL);
  }
  v33 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v562 + 24))(v562);
  LODWORD(v588.f64[0]) = 0;
  sub_20F3D3834(v33, *(_DWORD **)(v580 + 1960), *(_DWORD **)(v580 + 1968), v31, &v588);
  v34 = *(_DWORD **)(v580 + 1984);
  v35 = *(_DWORD **)(v580 + 1992);
  if (v34 != v35)
  {
    v36 = *(_QWORD *)(v33 + 104);
    v37 = LODWORD(v588.f64[0]);
    do
    {
      v36 -= 16;
      do
      {
        v38 = *(_DWORD *)(v36 + 16);
        v36 += 16;
      }
      while (*v34 != v38);
      v39 = *(_QWORD *)(v36 + 8);
      LODWORD(v585.f64[0]) = 3;
      *(_QWORD *)&v585.f64[1] = v39 + 32;
      LODWORD(v586.f64[0]) = 0;
      memset(v584, 0, 24);
      sub_20F053450((unsigned int *)&v585, (double *)v584);
      v40.i64[0] = (uint64_t)v584[2];
      v41.i64[0] = *(_QWORD *)(v39 + 120);
      v42 = *(int8x16_t *)(v39 + 104);
      v43 = (uint64_t)*v31 + 8 * v37;
      *(_OWORD *)v43 = *(_OWORD *)v584;
      *(int64x2_t *)(v43 + 16) = vzip1q_s64(v40, (int64x2_t)v42);
      *(int8x16_t *)(v43 + 32) = vextq_s8(v42, v41, 8uLL);
      v37 += 6;
      LODWORD(v588.f64[0]) = v37;
      ++v34;
    }
    while (v34 != v35);
  }
  v44 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v562 + 24))(v562);
  v46 = v44[1];
  v45 = v44[2];
  v47 = *(_DWORD **)(v580 + 2008);
  v48 = *(_DWORD **)(v580 + 2016);
  if (v46 != v45 && v47 != v48)
  {
    v50 = 0;
    do
    {
      v51 = *(_QWORD *)(v46 + 8);
      if (*v47 == *(_DWORD *)v46)
      {
        if (*(_BYTE *)(v51 + 20))
          v52 = v50;
        else
          v52 = -1;
        v50 += *(unsigned __int8 *)(v51 + 20);
        ++v47;
      }
      else
      {
        v52 = -1;
      }
      *(_DWORD *)v51 = v52;
      v46 += 16;
    }
    while (v46 != v45 && v47 != v48);
  }
  if (v46 != v45)
  {
    v53 = v45 - v46 - 16;
    if (v53 >= 0x10)
    {
      v55 = (v53 >> 4) + 1;
      v54 = v46 + 16 * (v55 & 0x1FFFFFFFFFFFFFFELL);
      v56 = (_DWORD **)(v46 + 24);
      v57 = v55 & 0x1FFFFFFFFFFFFFFELL;
      do
      {
        v58 = *(v56 - 2);
        v59 = *v56;
        v56 += 4;
        *v58 = -1;
        *v59 = -1;
        v57 -= 2;
      }
      while (v57);
      if (v55 == (v55 & 0x1FFFFFFFFFFFFFFELL))
        goto LABEL_54;
    }
    else
    {
      v54 = v46;
    }
    do
    {
      **(_DWORD **)(v54 + 8) = -1;
      v54 += 16;
    }
    while (v54 != v45);
  }
LABEL_54:
  v61 = v44[13];
  v60 = v44[14];
  v62 = *(_DWORD **)(v580 + 2032);
  v63 = *(_DWORD **)(v580 + 2040);
  if (v61 != v60 && v62 != v63)
  {
    v65 = 0;
    do
    {
      v66 = *(_QWORD *)(v61 + 8);
      if (*v62 == *(_DWORD *)v61)
      {
        if (*(_BYTE *)(v66 + 20))
          v67 = v65;
        else
          v67 = -1;
        v65 += *(unsigned __int8 *)(v66 + 20);
        ++v62;
      }
      else
      {
        v67 = -1;
      }
      *(_DWORD *)v66 = v67;
      v61 += 16;
    }
    while (v61 != v60 && v62 != v63);
  }
  if (v61 != v60)
  {
    v68 = v60 - v61 - 16;
    if (v68 < 0x10)
    {
      v69 = v61;
      do
      {
LABEL_73:
        **(_DWORD **)(v69 + 8) = -1;
        v69 += 16;
      }
      while (v69 != v60);
      goto LABEL_74;
    }
    v70 = (v68 >> 4) + 1;
    v69 = v61 + 16 * (v70 & 0x1FFFFFFFFFFFFFFELL);
    v71 = (_DWORD **)(v61 + 24);
    v72 = v70 & 0x1FFFFFFFFFFFFFFELL;
    do
    {
      v73 = *(v71 - 2);
      v74 = *v71;
      v71 += 4;
      *v73 = -1;
      *v74 = -1;
      v72 -= 2;
    }
    while (v72);
    if (v70 != (v70 & 0x1FFFFFFFFFFFFFFELL))
      goto LABEL_73;
  }
LABEL_74:
  v75 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v562 + 40))(v562);
  sub_20F3D2520(v75, (char **)v559);
  v76 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v562 + 40))(v562);
  sub_20F3D3B68(v76 + 40);
  v77 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v562 + 40))(v562);
  v79 = *(unsigned int *)(v77 + 16);
  if ((_DWORD)v79)
    bzero(*(void **)v77, 8 * v79);
  if (((*(_QWORD *)(v580 + 1856) - *(_QWORD *)(v580 + 1848)) >> 2)
     + ((*(_QWORD *)(v580 + 1832) - *(_QWORD *)(v580 + 1824)) >> 2))
  {
    v80 = (char **)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v562 + 40))(v562);
    v78 = sub_20F3D26E4(v80, (_QWORD *)(v580 + 1304), (char **)(v580 + 2056), (_QWORD *)(v580 + 2104));
  }
  (*(void (**)(uint64_t, uint64_t, __n128))(*(_QWORD *)v562 + 16))(v562, v11, v78);
  v81 = *(unsigned __int8 *)(v580 + 1872);
  v82 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v580 + 1272) + 40))(v562);
  v565 = v580 + 2200;
  v568 = v580 + 2224;
  v83 = (unsigned int **)(v580 + 2104);
  v584[0] = (void *)0x600000004;
  sub_20F3D47D4(v575, v82 + 520, v584, v580 + 2104);
  sub_20F3D4C5C((_QWORD *)(v82 + 40), v580 + 2224, v83, v83);
  if (!v81)
    v84 = sub_20F3D5354(v82, v565, (int **)v83);
  v85 = (*(uint64_t (**)(uint64_t, __n128))(*(_QWORD *)(v580 + 1272) + 40))(v562, v84);
  *(_QWORD *)&v585.f64[0] = 0x600000004;
  sub_20F3D47D4(v575, v85 + 520, &v585, (uint64_t)v83);
  v86 = (unsigned int **)(v580 + 2152);
  sub_20F3D47D4(v570, v85 + 520, &v585, v580 + 2152);
  v87 = v580;
  v88 = (void **)(v580 + 2248);
  v89 = (((*(_QWORD *)(v580 + 2160) - *(_QWORD *)(v580 + 2152)) >> 1) & 0xFFFFFFFC)
      + 6 * ((*(_QWORD *)(v580 + 2184) - *(_QWORD *)(v580 + 2176)) >> 3);
  v90 = (((*(_QWORD *)(v580 + 2112) - *(_QWORD *)(v580 + 2104)) >> 1) & 0xFFFFFFFC)
      + 6 * ((*(_QWORD *)(v580 + 2136) - *(_QWORD *)(v580 + 2128)) >> 3);
  *(_DWORD *)(v580 + 2264) = v90;
  *(_DWORD *)(v580 + 2268) = v89;
  v91 = v89 * (unint64_t)v90;
  v92 = v89;
  v93 = v90;
  if (*(_QWORD *)(v580 + 2256) < v91)
  {
    if (*v88)
      MEMORY[0x212BC6368](*v88, 0x1000C8000313F17);
    *(_QWORD *)(v580 + 2248) = 0;
    *(_QWORD *)(v580 + 2256) = v91 & 0x1FFFFFFFFFFFFFFCLL;
    v94 = operator new(8 * v91, (std::align_val_t)0x20uLL);
    v87 = v580;
    *(_QWORD *)(v580 + 2248) = v94;
    v93 = *(_DWORD *)(v580 + 2264);
    v92 = *(_DWORD *)(v580 + 2268);
  }
  v95 = (void **)(v87 + 2272);
  v96 = v93 * v92;
  if (v96)
    bzero(*v88, 8 * v96);
  if (v89 == *(_DWORD *)(v580 + 2288) && v90 == *(_DWORD *)(v580 + 2292))
  {
    v97 = *v95;
  }
  else
  {
    *(_DWORD *)(v580 + 2288) = v89;
    *(_DWORD *)(v580 + 2292) = v90;
    v97 = *(void **)(v580 + 2272);
    if (*(_QWORD *)(v580 + 2280) < v91)
    {
      if (v97)
        MEMORY[0x212BC6368](v97, 0x1000C8000313F17);
      *(_QWORD *)(v580 + 2272) = 0;
      *(_QWORD *)(v580 + 2280) = v91 & 0x1FFFFFFFFFFFFFFCLL;
      v97 = operator new(8 * v91, (std::align_val_t)0x20uLL);
      *(_QWORD *)(v580 + 2272) = v97;
      v89 = *(_DWORD *)(v580 + 2288);
      v90 = *(_DWORD *)(v580 + 2292);
    }
  }
  v98 = (_QWORD *)(v85 + 40);
  if (v89 * v90)
    bzero(v97, 8 * v89 * v90);
  sub_20F3D5480(v98, (uint64_t)v95, v86, v83);
  sub_20F3D5480(v98, (uint64_t)v88, v83, v86);
  v584[0] = v95;
  sub_20F2B809C((uint64_t)v88, (uint64_t **)v584);
  v99 = (void **)(v580 + 1304);
  sub_20F3D2520((_QWORD *)(v580 + 1304), v570);
  sub_20F3D3B68(v580 + 1344);
  v100 = *(unsigned int *)(v580 + 1320);
  if ((_DWORD)v100)
    bzero(*v99, 8 * v100);
  v101 = *(unsigned __int8 *)(v580 + 1872);
  v102 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v580 + 1272) + 40))(v562);
  v103 = (uint64_t *)(v580 + 2296);
  v584[0] = (void *)0x600000004;
  sub_20F3D47D4(v570, v102 + 520, v584, (uint64_t)v83);
  sub_20F3D4C5C((_QWORD *)(v102 + 40), v580 + 2296, v83, v83);
  if (!v101)
    v104 = sub_20F3D5354(v102, (uint64_t)v99, (int **)v83);
  if (*(_BYTE *)(v580 + 1873))
  {
    LOBYTE(v584[0]) = *(_BYTE *)(v580 + 1872);
    v105 = *(_QWORD *)(v580 + 1904);
    if (!v105)
      sub_20E86D37C();
    if (((*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void **, void **, uint64_t *, void **, __n128))(*(_QWORD *)v105 + 48))(v105, v568, v565, v88, v584, v103, v99, v104) & 1) != 0)goto LABEL_104;
LABEL_7:
    kdebug_trace();
LABEL_487:
    v332 = 1;
    goto LABEL_488;
  }
  if (!sub_20F2B67A0(v568, v565, (uint64_t)v88, *(_BYTE *)(v580 + 1872) != 0, (uint64_t)v103, (unint64_t *)v99))
    goto LABEL_7;
LABEL_104:
  v106 = v580;
  v107 = *(_QWORD *)(v580 + 1792);
  v108 = *(_DWORD *)(v107 + 8);
  v109 = *(_DWORD *)(v107 + 12);
  v110 = *(unsigned int *)(v580 + 1468);
  if ((_DWORD)v110)
  {
    for (i = 0; i < v110; ++i)
    {
      v113 = (uint64_t *)(*(_QWORD *)(v106 + 1544) + 24 * i);
      v112 = *v113;
      v114 = v113[1];
      if (*v113 != v114)
      {
        v115 = *(_QWORD *)(v106 + 1512);
        v116 = *(_QWORD *)(v106 + 1504);
        v117 = *(_QWORD *)(v106 + 1536);
        do
        {
          v118 = ((v115 - v116) << 6) - 1;
          if (v115 == v116)
            v118 = 0;
          v119 = *(_QWORD *)(v106 + 1528) + v117;
          if (v118 == v119)
          {
            sub_20EDB36DC(v580 + 1496);
            v106 = v580;
            v116 = *(_QWORD *)(v580 + 1504);
            v115 = *(_QWORD *)(v580 + 1512);
            v119 = *(_QWORD *)(v580 + 1536) + *(_QWORD *)(v580 + 1528);
          }
          *(_QWORD *)(*(_QWORD *)(v116 + ((v119 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v119 & 0x1FF)) = *(_QWORD *)(v112 + 8);
          v117 = *(_QWORD *)(v106 + 1536) + 1;
          *(_QWORD *)(v106 + 1536) = v117;
          v112 += 16;
        }
        while (v112 != v114);
        v112 = *v113;
        v110 = *(unsigned int *)(v106 + 1468);
      }
      v113[1] = v112;
      v106 = v580;
    }
  }
  v120 = (4 * v109);
  sub_20F3D592C(v106 + 1680, v103, (4 * v108) | ((unint64_t)v120 << 32));
  sub_20F3D6048(v580 + 1344, v103, 0);
  sub_20F3D6704((char *)(v580 + 1568), v103, v120 << 32);
  v121 = (char **)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v562 + 40))(v562);
  v553 = (unsigned int **)(v580 + 2344);
  sub_20F3D2E0C(v121, v575, v580 + 2344);
  if (v559 != (unsigned int **)(v14 + 12))
  {
    sub_20E867E00(v559, v14[12], v14[13], (v14[13] - v14[12]) >> 2);
    sub_20E867E00(v563, v14[15], v14[16], (v14[16] - v14[15]) >> 2);
  }
  v552 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v562 + 40))(v562);
  v122 = 0;
  v123 = 0;
  v124 = 1;
  v125 = (unsigned int **)(v580 + 2344);
  do
  {
    v561 = v124;
    v126 = &v125[3 * v122];
    v127 = *v126;
    v566 = (char **)v126;
    v126[1] = *v126;
    v128 = (uint64_t *)(v126 + 1);
    v129 = &v559[3 * v122];
    v130 = (char *)*v129;
    v132 = v129 + 1;
    v131 = v129[1];
    if (*v129 != v131)
    {
      v133 = (char *)v131 - v130;
      v134 = ((char *)v131 - v130) >> 2;
      v576 = &v125[3 * v122 + 2];
      if (v134 > *v576 - v127)
      {
        if ((v133 & 0x8000000000000000) != 0)
          goto LABEL_629;
        v135 = (char *)operator new(v133);
        *v566 = v135;
        *v128 = (uint64_t)v135;
        *v576 = (unsigned int *)&v135[4 * v134];
        if (v127)
        {
          operator delete(v127);
          v134 = (uint64_t)(*v132 - (_QWORD)*v129) >> 2;
        }
      }
      v136 = v552 + 520 + 24 * v122;
      v137 = *(char **)(v136 + 8);
      v569 = (char **)(v136 + 8);
      v138 = *(char **)v136;
      v139 = (uint64_t)&v137[-*(_QWORD *)v136];
      v140 = v139 >> 2;
      v141 = (v139 >> 2) + v134;
      v564 = (void **)v136;
      v142 = (_QWORD *)(v136 + 16);
      v558 = v123;
      if (v141 <= (uint64_t)(*(_QWORD *)(v136 + 16) - *(_QWORD *)v136) >> 2)
      {
        v144 = *(char **)(v136 + 8);
        v145 = *(char **)v136;
        goto LABEL_138;
      }
      if (!(v141 >> 62))
      {
        v143 = (char *)operator new(4 * v141);
        v144 = &v143[4 * v140];
        v145 = v144;
        if (v137 == v138)
          goto LABEL_136;
        v146 = v137 - v138 - 4;
        if (v146 >= 0x2C)
        {
          v145 = &v143[4 * v140];
          if ((unint64_t)(&v137[-v139] - v143) >= 0x20)
          {
            v147 = (v146 >> 2) + 1;
            v148 = 4 * (v147 & 0x7FFFFFFFFFFFFFF8);
            v149 = &v137[-v148];
            v145 = &v144[-v148];
            v150 = &v143[4 * v140 - 16];
            v151 = (__int128 *)(v137 - 16);
            v152 = v147 & 0x7FFFFFFFFFFFFFF8;
            do
            {
              v153 = *v151;
              *((_OWORD *)v150 - 1) = *(v151 - 1);
              *(_OWORD *)v150 = v153;
              v150 -= 32;
              v151 -= 2;
              v152 -= 8;
            }
            while (v152);
            v137 = v149;
            if (v147 == (v147 & 0x7FFFFFFFFFFFFFF8))
            {
LABEL_136:
              *v564 = v145;
              *v569 = v144;
              *v142 = &v143[4 * v141];
              if (v138)
              {
                operator delete(v138);
                v145 = (char *)*v564;
                v144 = *v569;
              }
LABEL_138:
              v155 = (char *)*v129;
              *(_QWORD *)v571 = *v132;
              if (v145 == v144)
              {
                v156 = 0;
                goto LABEL_146;
              }
              v156 = 0;
              do
              {
                if (*(_DWORD *)v145 > *(_DWORD *)v155)
                {
                  v144 = v145;
                  goto LABEL_146;
                }
                v145 += 4;
                ++v156;
              }
              while (v145 != v144);
              while (1)
              {
LABEL_146:
                if (v155 == *(char **)v571)
                {
                  v123 = v558 | (*v566 != (char *)*v128);
                  v125 = (unsigned int **)(v580 + 2344);
                  goto LABEL_119;
                }
                if (v144 == *v569 || *(_DWORD *)v155 != *(_DWORD *)v144)
                  break;
LABEL_145:
                v144 += 4;
                ++v156;
              }
              v157 = (char *)*v128;
              if (*v128 < (unint64_t)*v576)
              {
                *(_DWORD *)v157 = v156;
                v158 = (uint64_t)(v157 + 4);
LABEL_170:
                *v128 = v158;
                v144 = sub_20EDB3C7C(v564, v144, v155);
                v155 += 4;
                goto LABEL_145;
              }
              v159 = *v566;
              v160 = v157 - *v566;
              v161 = v160 >> 2;
              v162 = (v160 >> 2) + 1;
              if (v162 >> 62)
                goto LABEL_629;
              v163 = (char *)*v576 - v159;
              if (v163 >> 1 > v162)
                v162 = v163 >> 1;
              if ((unint64_t)v163 >= 0x7FFFFFFFFFFFFFFCLL)
                v164 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v164 = v162;
              if (v164)
              {
                if (v164 >> 62)
LABEL_627:
                  sub_20E877A38();
                v165 = operator new(4 * v164);
                v166 = &v165[4 * v161];
                *(_DWORD *)v166 = v156;
                v158 = (uint64_t)(v166 + 4);
                v167 = v157 - v159;
                if (v157 == v159)
                  goto LABEL_168;
              }
              else
              {
                v165 = 0;
                v166 = (char *)(4 * v161);
                *(_DWORD *)(4 * v161) = v156;
                v158 = 4 * v161 + 4;
                v167 = v157 - v159;
                if (v157 == v159)
                {
LABEL_168:
                  *v566 = v166;
                  *v128 = v158;
                  *v576 = (unsigned int *)&v165[4 * v164];
                  if (v159)
                    operator delete(v159);
                  goto LABEL_170;
                }
              }
              v168 = v167 - 4;
              if (v168 < 0x2C)
                goto LABEL_636;
              if ((unint64_t)(v157 - &v165[v160]) < 0x20)
                goto LABEL_636;
              v169 = (v168 >> 2) + 1;
              v170 = 4 * (v169 & 0x7FFFFFFFFFFFFFF8);
              v171 = &v157[-v170];
              v166 -= v170;
              v172 = &v165[4 * v161 - 16];
              v173 = v157 - 16;
              v174 = v169 & 0x7FFFFFFFFFFFFFF8;
              do
              {
                v175 = *(_OWORD *)v173;
                *(v172 - 1) = *((_OWORD *)v173 - 1);
                *v172 = v175;
                v172 -= 2;
                v173 -= 32;
                v174 -= 8;
              }
              while (v174);
              v157 = v171;
              if (v169 != (v169 & 0x7FFFFFFFFFFFFFF8))
              {
LABEL_636:
                do
                {
                  v176 = *((_DWORD *)v157 - 1);
                  v157 -= 4;
                  *((_DWORD *)v166 - 1) = v176;
                  v166 -= 4;
                }
                while (v157 != v159);
              }
              goto LABEL_168;
            }
          }
        }
        else
        {
          v145 = &v143[4 * v140];
        }
        do
        {
          v154 = *((_DWORD *)v137 - 1);
          v137 -= 4;
          *((_DWORD *)v145 - 1) = v154;
          v145 -= 4;
        }
        while (v137 != v138);
        goto LABEL_136;
      }
LABEL_629:
      sub_20E867F44();
    }
LABEL_119:
    v124 = 0;
    v122 = 1;
  }
  while ((v561 & 1) != 0);
  if ((v123 & 1) == 0)
    goto LABEL_203;
  v177 = v552 + 152;
  v178 = (unsigned int **)(v580 + 2368);
  v179 = *(_QWORD *)(v580 + 2376) - *(_QWORD *)(v580 + 2368);
  if (*(_QWORD *)(v552 + 160))
  {
    sub_20F2B9E90(v552 + 152, v125, v179 >> 2);
    sub_20F2B9FE8(v177, v178);
  }
  else
  {
    (*(void (**)(uint64_t, unint64_t, _QWORD))(*(_QWORD *)v177 + 24))(v552 + 152, (unint64_t)v179 >> 2, (*(_QWORD *)(v580 + 2352) - *(_QWORD *)(v580 + 2344)) >> 2);
  }
  v427 = v552 + 376;
  v428 = *(_QWORD *)(v580 + 2376) - *(_QWORD *)(v580 + 2368);
  if (*(_QWORD *)(v552 + 384))
  {
    sub_20F2B9E90(v552 + 376, v178, v428 >> 2);
    sub_20F2B9FE8(v427, v178);
  }
  else
  {
    (*(void (**)(uint64_t, unint64_t, unint64_t))(*(_QWORD *)v427 + 24))(v552 + 376, (unint64_t)v428 >> 2, (unint64_t)v428 >> 2);
  }
  v429 = v552 + 40;
  v430 = *(_QWORD *)(v580 + 2352) - *(_QWORD *)(v580 + 2344);
  if (*(_QWORD *)(v552 + 48))
  {
    sub_20F2B9E90(v552 + 40, v553, v430 >> 2);
    sub_20F2B9FE8(v429, v553);
  }
  else
  {
    (*(void (**)(uint64_t, unint64_t, unint64_t))(*(_QWORD *)v429 + 24))(v552 + 40, (unint64_t)v430 >> 2, (unint64_t)v430 >> 2);
  }
  v431 = v552 + 264;
  v432 = *(_QWORD *)(v580 + 2352) - *(_QWORD *)(v580 + 2344);
  if (*(_QWORD *)(v552 + 272))
  {
    sub_20F2B9E90(v552 + 264, v178, v432 >> 2);
    sub_20F2B9FE8(v431, v553);
  }
  else
  {
    (*(void (**)(uint64_t, unint64_t, _QWORD))(*(_QWORD *)v431 + 24))(v552 + 264, (unint64_t)v432 >> 2, (*(_QWORD *)(v580 + 2376) - *(_QWORD *)(v580 + 2368)) >> 2);
  }
  memset(v584, 0, 48);
  v434 = *(char **)(v580 + 2352);
  v435 = *(char **)(v580 + 2344);
  v436 = v434 - v435;
  if (v434 != v435)
  {
    if ((unint64_t)v436 <= 0x7FFFFFFFFFFFFFFCLL)
    {
      v437 = operator new(2 * v436);
      v584[0] = v437;
      v584[1] = v437;
      v584[2] = &v437[v436 >> 2];
      v438 = v580;
      while (1)
      {
        while (1)
        {
          v440 = (4 * *(_DWORD *)v435);
          v441 = v584[0];
          if (v584[0] == v437 || *((_DWORD *)v437 - 1) != (_DWORD)v440)
            break;
          *((_DWORD *)v437 - 1) = v440 + 4;
          v435 += 4;
          if (v435 == v434)
            goto LABEL_534;
        }
        v442 = (v440 + 4);
        if (v437 < v584[2])
        {
          *v437 = v440 | (v442 << 32);
          v439 = v437 + 1;
          goto LABEL_503;
        }
        v443 = (char *)v437 - (char *)v584[0];
        v444 = ((char *)v437 - (char *)v584[0]) >> 3;
        v445 = v444 + 1;
        if ((unint64_t)(v444 + 1) >> 61)
          goto LABEL_631;
        v446 = (char *)v584[2] - (char *)v584[0];
        if (((char *)v584[2] - (char *)v584[0]) >> 2 > v445)
          v445 = v446 >> 2;
        v447 = (unint64_t)v446 >= 0x7FFFFFFFFFFFFFF8 ? 0x1FFFFFFFFFFFFFFFLL : v445;
        if (!v447)
          break;
        if (v447 >> 61)
LABEL_630:
          sub_20E877A38();
        v448 = operator new(8 * v447);
        v449 = (uint64_t *)&v448[8 * v444];
        *v449 = v440 | (v442 << 32);
        v439 = v449 + 1;
        if (v441 == (_BYTE *)v437)
        {
LABEL_524:
          v438 = v580;
          v584[0] = v449;
          v584[2] = &v448[8 * v447];
          if (v437)
            goto LABEL_525;
LABEL_503:
          v584[1] = v439;
          v437 = v439;
          v435 += 4;
          if (v435 == v434)
            goto LABEL_534;
        }
        else
        {
LABEL_518:
          if ((unint64_t)(v443 - 8) < 0x168
            || (v452 = ((char *)(v437 - 1) - v441) & 0xFFFFFFFFFFFFFFF8, &v448[v443 - 8 - v452] > &v448[v443 - 8])
            || (_QWORD *)((char *)v437 - v452 - 8) > v437 - 1
            || (unint64_t)(v441 - v448) < 0x20)
          {
            v450 = v437;
            v438 = v580;
            do
            {
LABEL_520:
              v451 = *--v450;
              *--v449 = v451;
            }
            while (v450 != (_QWORD *)v441);
            goto LABEL_521;
          }
          v453 = ((unint64_t)(v443 - 8) >> 3) + 1;
          v454 = 8 * (v453 & 0x3FFFFFFFFFFFFFFCLL);
          v450 = &v437[v454 / 0xFFFFFFFFFFFFFFF8];
          v449 = (uint64_t *)((char *)v449 - v454);
          v455 = &v448[8 * v444 - 16];
          v456 = (__int128 *)(v437 - 2);
          v457 = v453 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v458 = *v456;
            *(v455 - 1) = *(v456 - 1);
            *v455 = v458;
            v455 -= 2;
            v456 -= 2;
            v457 -= 4;
          }
          while (v457);
          v438 = v580;
          if (v453 != (v453 & 0x3FFFFFFFFFFFFFFCLL))
            goto LABEL_520;
LABEL_521:
          v437 = v584[0];
          v584[0] = v449;
          v584[2] = &v448[8 * v447];
          if (!v437)
            goto LABEL_503;
LABEL_525:
          operator delete(v437);
          v584[1] = v439;
          v437 = v439;
          v435 += 4;
          if (v435 == v434)
          {
LABEL_534:
            v459 = v584[0];
            goto LABEL_536;
          }
        }
      }
      v448 = 0;
      v449 = (uint64_t *)(8 * v444);
      *(_QWORD *)(8 * v444) = v440 | (v442 << 32);
      v439 = (void *)(8 * v444 + 8);
      if (v441 != (_BYTE *)v437)
        goto LABEL_518;
      goto LABEL_524;
    }
LABEL_631:
    sub_20E92CED8();
  }
  v459 = 0;
  v437 = 0;
  v438 = v580;
LABEL_536:
  if ((((char *)v437 - (char *)v459) & 0x7FFFFFFF0) != 0)
  {
    v460 = ((unint64_t)((char *)v437 - (char *)v459) >> 3);
    v463 = *v459;
    v461 = v459 + 2;
    v462 = v463;
    v464 = v460 - 1;
    do
    {
      v462 += *v461 - *(v461 - 1);
      *v461 = v462;
      v461 += 2;
      --v464;
    }
    while (v464);
  }
  v465 = *(_DWORD *)(v552 + 24);
  v466 = *(_DWORD *)(v438 + 2352);
  v467 = *(_DWORD *)(v438 + 2344);
  v468 = *(char **)(v438 + 2376);
  v469 = *(char **)(v438 + 2368);
  v470 = v468 - v469;
  v471 = (v468 - v469) >> 2;
  v472 = v584[3];
  if (v471 > ((char *)v584[5] - (char *)v584[3]) >> 3)
  {
    if (v470 > 0x7FFFFFFFFFFFFFFCLL)
      goto LABEL_631;
    v473 = v584[4];
    v474 = operator new(2 * v470);
    v475 = &v474[8 * v471];
    v476 = v473 - (_BYTE *)v472;
    v477 = &v474[(v473 - (_BYTE *)v472) & 0xFFFFFFFFFFFFFFF8];
    v478 = v477;
    if (v473 == (_BYTE *)v472)
      goto LABEL_550;
    if ((unint64_t)(v476 - 8) >= 0x58)
    {
      v478 = &v474[(v473 - (_BYTE *)v472) & 0xFFFFFFFFFFFFFFF8];
      if ((unint64_t)(&v473[-(v476 & 0xFFFFFFFFFFFFFFF8)] - v474) >= 0x20)
      {
        v479 = v476 >> 3;
        v480 = ((unint64_t)(v476 - 8) >> 3) + 1;
        v481 = 8 * (v480 & 0x3FFFFFFFFFFFFFFCLL);
        v482 = &v473[-v481];
        v478 = &v477[-v481];
        v483 = &v474[8 * v479 - 16];
        v484 = (__int128 *)(v473 - 16);
        v485 = v480 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v486 = *v484;
          *(v483 - 1) = *(v484 - 1);
          *v483 = v486;
          v483 -= 2;
          v484 -= 2;
          v485 -= 4;
        }
        while (v485);
        v473 = v482;
        if (v480 == (v480 & 0x3FFFFFFFFFFFFFFCLL))
          goto LABEL_550;
      }
    }
    else
    {
      v478 = &v474[(v473 - (_BYTE *)v472) & 0xFFFFFFFFFFFFFFF8];
    }
    do
    {
      v487 = *((_QWORD *)v473 - 1);
      v473 -= 8;
      *((_QWORD *)v478 - 1) = v487;
      v478 -= 8;
    }
    while (v473 != (_BYTE *)v472);
LABEL_550:
    v584[3] = v478;
    v584[4] = v477;
    v584[5] = v475;
    if (v472)
    {
      operator delete(v472);
      v469 = *(char **)(v580 + 2368);
      v468 = *(char **)(v580 + 2376);
    }
    v472 = v478;
    goto LABEL_553;
  }
  v477 = (char *)v584[4];
LABEL_553:
  if (v469 == v468)
    goto LABEL_591;
  v574 = v466;
  v578 = v465;
  do
  {
    while (1)
    {
      while (1)
      {
        v489 = (6 * *(_DWORD *)v469);
        v490 = (char *)v584[3];
        if (v584[3] == v477 || *((_DWORD *)v477 - 1) != (_DWORD)v489)
          break;
        *((_DWORD *)v477 - 1) = v489 + 6;
        v469 += 4;
        if (v469 == v468)
          goto LABEL_590;
      }
      v491 = (v489 + 6);
      if (v477 >= v584[5])
        break;
      *(_QWORD *)v477 = v489 | (v491 << 32);
      v488 = v477 + 8;
LABEL_556:
      v584[4] = v488;
      v477 = (char *)v488;
      v469 += 4;
      if (v469 == v468)
        goto LABEL_590;
    }
    v492 = v477 - (char *)v584[3];
    v493 = (v477 - (char *)v584[3]) >> 3;
    v494 = v493 + 1;
    if ((unint64_t)(v493 + 1) >> 61)
      goto LABEL_631;
    v495 = (char *)v584[5] - (char *)v584[3];
    if (((char *)v584[5] - (char *)v584[3]) >> 2 > v494)
      v494 = v495 >> 2;
    if ((unint64_t)v495 >= 0x7FFFFFFFFFFFFFF8)
      v496 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v496 = v494;
    if (!v496)
    {
      v497 = 0;
      v498 = (uint64_t *)(8 * v493);
      *(_QWORD *)(8 * v493) = v489 | (v491 << 32);
      v488 = (void *)(8 * v493 + 8);
      if (v490 == v477)
        goto LABEL_577;
LABEL_573:
      if ((unint64_t)(v492 - 8) >= 0x168)
      {
        v501 = (v477 - 8 - v490) & 0xFFFFFFFFFFFFFFF8;
        if (&v497[v492 - 8 - v501] > &v497[v492 - 8])
        {
          v499 = v477;
        }
        else if (&v477[-v501 - 8] > v477 - 8)
        {
          v499 = v477;
        }
        else if ((unint64_t)(v490 - v497) >= 0x20)
        {
          v502 = ((unint64_t)(v492 - 8) >> 3) + 1;
          v503 = 8 * (v502 & 0x3FFFFFFFFFFFFFFCLL);
          v499 = &v477[-v503];
          v498 = (uint64_t *)((char *)v498 - v503);
          v504 = &v497[8 * v493 - 16];
          v505 = (__int128 *)(v477 - 16);
          v506 = v502 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v507 = *v505;
            *(v504 - 1) = *(v505 - 1);
            *v504 = v507;
            v504 -= 2;
            v505 -= 2;
            v506 -= 4;
          }
          while (v506);
          if (v502 == (v502 & 0x3FFFFFFFFFFFFFFCLL))
            goto LABEL_576;
        }
        else
        {
          v499 = v477;
        }
      }
      else
      {
        v499 = v477;
      }
      do
      {
        v500 = *((_QWORD *)v499 - 1);
        v499 -= 8;
        *--v498 = v500;
      }
      while (v499 != v490);
LABEL_576:
      v477 = (char *)v584[3];
      goto LABEL_577;
    }
    if (v496 >> 61)
      goto LABEL_630;
    v497 = operator new(8 * v496);
    v498 = (uint64_t *)&v497[8 * v493];
    *v498 = v489 | (v491 << 32);
    v488 = v498 + 1;
    if (v490 != v477)
      goto LABEL_573;
LABEL_577:
    v584[3] = v498;
    v584[5] = &v497[8 * v496];
    if (!v477)
      goto LABEL_556;
    operator delete(v477);
    v584[4] = v488;
    v477 = (char *)v488;
    v469 += 4;
  }
  while (v469 != v468);
LABEL_590:
  v472 = v584[3];
  v465 = v578;
  v466 = v574;
LABEL_591:
  v508 = (v466 - v467 + 4 * v465) & 0xFFFFFFFC;
  v509 = v477 - (char *)v472;
  if (((v477 - (char *)v472) & 0x7FFFFFFF0) != 0)
  {
    v510 = v472 + 2;
    v511 = *v472;
    v512 = (v509 >> 3) - 1;
    do
    {
      v511 += *v510 - *(v510 - 1);
      *v510 = v511;
      v510 += 2;
      --v512;
    }
    while (v512);
  }
  v513 = *(_DWORD *)(v552 + 28);
  v514 = v508 + 6 * (v513 + ((*(_QWORD *)(v580 + 2376) - *(_QWORD *)(v580 + 2368)) >> 2));
  if (v514 <= *(_DWORD *)(v552 + 8))
  {
    v528 = *(_QWORD *)v552;
    if ((v509 & 0x7FFFFFFF8) != 0)
    {
      v529 = 6 * v513;
      v530 = (v509 >> 3) - 1;
      do
      {
        v531 = v530;
        v532 = v472[2 * v530];
        v533 = (const void *)(*(_QWORD *)v552 + 8 * *(unsigned int *)(v552 + 36) + 8 * v532);
        v534 = (uint64_t)v533 + 8 * v529 + -8 * v532;
        v433 = v534 - (_QWORD)v533;
        if ((const void *)v534 != v533)
          memmove((void *)(v528 + 8 * v508 + 8 * v472[2 * v530 + 1]), v533, v433);
        --v530;
        v529 = v532;
      }
      while (v531);
    }
    v535 = (unsigned int *)v584[0];
    if ((((char *)v584[1] - (char *)v584[0]) & 0x7FFFFFFF8) != 0)
    {
      v536 = 4 * *(_DWORD *)(v552 + 24);
      v537 = ((unint64_t)((char *)v584[1] - (char *)v584[0]) >> 3) - 1;
      do
      {
        v538 = v537;
        v539 = v535[2 * v537];
        v540 = (const void *)(*(_QWORD *)v552 + 8 * *(unsigned int *)(v552 + 32) + 8 * v539);
        v541 = (uint64_t)v540 + 8 * v536 + -8 * v539;
        v433 = v541 - (_QWORD)v540;
        if ((const void *)v541 != v540)
          memmove((void *)(v528 + 8 * v535[2 * v537 + 1]), v540, v433);
        --v537;
        v536 = v539;
      }
      while (v538);
    }
    *(_DWORD *)(v552 + 16) = v514;
    if (*(_QWORD *)(v552 + 8) >= v514)
    {
      v542 = (_QWORD *)v580;
    }
    else
    {
      v542 = (_QWORD *)v580;
      if (*(_QWORD *)v552)
        MEMORY[0x212BC6368](*(_QWORD *)v552, 0x1000C8000313F17, v433);
      v543 = (8 * v514 + 31) & 0xFFFFFFFE0;
      *(_QWORD *)v552 = 0;
      *(_QWORD *)(v552 + 8) = v543 >> 3;
      *(_QWORD *)v552 = operator new(v543, (std::align_val_t)0x20uLL);
    }
  }
  else
  {
    v579 = v508;
    v515 = (char *)operator new((8* (v508 + 6 * (v513 + ((*(_QWORD *)(v580 + 2376) - *(_QWORD *)(v580 + 2368)) >> 2)))+ 31) & 0xFFFFFFFE0, (std::align_val_t)0x20uLL);
    v517 = v515;
    v518 = *(_QWORD *)v552;
    if ((v509 & 0x7FFFFFFF8) != 0)
    {
      v519 = 6 * v513;
      v520 = v509 >> 3;
      v521 = v518 + 8 * *(unsigned int *)(v552 + 36);
      v522 = &v515[8 * v508];
      v523 = v520 - 1;
      do
      {
        v524 = v523;
        v525 = v472[2 * v523];
        v526 = (const void *)(v521 + 8 * v525);
        v527 = (uint64_t)v526 + 8 * v519 + -8 * v525;
        v516 = v527 - (_QWORD)v526;
        if ((const void *)v527 != v526)
          memmove(&v522[8 * v472[2 * v523 + 1]], v526, v516);
        --v523;
        v519 = v525;
      }
      while (v524);
    }
    v535 = (unsigned int *)v584[0];
    if ((((char *)v584[1] - (char *)v584[0]) & 0x7FFFFFFF8) != 0)
    {
      v544 = 4 * *(_DWORD *)(v552 + 24);
      v545 = v518 + 8 * *(unsigned int *)(v552 + 32);
      v546 = ((unint64_t)((char *)v584[1] - (char *)v584[0]) >> 3) - 1;
      do
      {
        v547 = v546;
        v548 = v535[2 * v546];
        v549 = (const void *)(v545 + 8 * v548);
        v550 = (uint64_t)v549 + 8 * v544 + -8 * v548;
        v516 = v550 - (_QWORD)v549;
        if ((const void *)v550 != v549)
          memmove(&v517[8 * v535[2 * v546 + 1]], v549, v516);
        --v546;
        v544 = v548;
      }
      while (v547);
    }
    *(_QWORD *)v552 = v517;
    *(_QWORD *)(v552 + 8) = ((8 * v514 + 31) & 0xFFFFFFFE0uLL) >> 3;
    *(_DWORD *)(v552 + 16) = v514;
    if (v518)
      MEMORY[0x212BC6368](v518, 0x1000C8000313F17, v516);
    v542 = (_QWORD *)v580;
    v508 = v579;
  }
  v551 = *(_DWORD *)(v552 + 28);
  *(_DWORD *)(v552 + 24) += (v542[294] - v542[293]) >> 2;
  *(_DWORD *)(v552 + 28) = v551 + ((v542[297] - v542[296]) >> 2);
  *(_DWORD *)(v552 + 36) = *(_DWORD *)(v552 + 32) + v508;
  if (v472)
    operator delete(v472);
  if (v535)
  {
    v193 = *(double *)&v535;
LABEL_202:
    operator delete(*(void **)&v193);
  }
LABEL_203:
  sub_20F7CCA98(v560);
  v577 = *(_DWORD *)(v580 + 524);
  v194 = *(_QWORD **)(v580 + 1128);
  v195 = (char **)(v194 + 65);
  v196 = *(_QWORD *)(v580 + 1120);
  v197 = v194;
  if (!*(_BYTE *)(v196 + 272))
    goto LABEL_264;
  v194[66] = v194[65];
  v194[69] = v194[68];
  v567 = (void **)(v194 + 65);
  sub_20F3D3988((uint64_t)(v194 + 65));
  v198 = v580;
  if (!*(_BYTE *)(v196 + 272))
    goto LABEL_263;
  v199 = (void *)v194[65];
  v194[66] = v199;
  v200 = ((*(_QWORD *)(v196 + 16) - *(_QWORD *)(v196 + 8)) >> 4);
  if (v200 > (uint64_t)(v194[67] - (_QWORD)v199) >> 2)
  {
    v201 = (char *)operator new(4 * v200);
    v194[65] = v201;
    v194[66] = v201;
    v194[67] = &v201[4 * v200];
    if (v199)
      operator delete(v199);
  }
  v202 = *(int **)(v196 + 8);
  v203 = *(int **)(v196 + 16);
  *(_QWORD *)v572 = v196;
  v198 = v580;
  if (v202 != v203)
  {
    while (1)
    {
      if (!*(_BYTE *)(*((_QWORD *)v202 + 1) + 20))
        goto LABEL_217;
      v210 = *v202;
      v211 = (char *)v194[66];
      v212 = v194[67];
      if ((unint64_t)v211 >= v212)
        break;
      *(_DWORD *)v211 = v210;
      v209 = (uint64_t)(v211 + 4);
LABEL_216:
      v194[66] = v209;
      v198 = v580;
LABEL_217:
      v202 += 4;
      if (v202 == v203)
        goto LABEL_209;
    }
    v213 = (char *)*v567;
    v214 = v211 - (_BYTE *)*v567;
    v215 = v214 >> 2;
    v216 = (v214 >> 2) + 1;
    if (v216 >> 62)
      goto LABEL_629;
    v217 = v212 - (_QWORD)v213;
    if (v217 >> 1 > v216)
      v216 = v217 >> 1;
    if ((unint64_t)v217 >= 0x7FFFFFFFFFFFFFFCLL)
      v218 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v218 = v216;
    if (v218)
    {
      if (v218 >> 62)
        goto LABEL_627;
      v219 = operator new(4 * v218);
      v220 = &v219[4 * v215];
      *v220 = v210;
      v209 = (uint64_t)(v220 + 1);
      v221 = v211 - v213;
      if (v211 == v213)
        goto LABEL_237;
    }
    else
    {
      v219 = 0;
      v220 = (_DWORD *)(4 * v215);
      *(_DWORD *)(4 * v215) = v210;
      v209 = 4 * v215 + 4;
      v221 = v211 - v213;
      if (v211 == v213)
      {
LABEL_237:
        v194[65] = v220;
        v194[66] = v209;
        v194[67] = &v219[4 * v218];
        if (v213)
          operator delete(v213);
        goto LABEL_216;
      }
    }
    v222 = v221 - 4;
    if (v222 < 0x2C)
      goto LABEL_637;
    if ((unint64_t)(v211 - v219 - v214) < 0x20)
      goto LABEL_637;
    v223 = (v222 >> 2) + 1;
    v224 = 4 * (v223 & 0x7FFFFFFFFFFFFFF8);
    v225 = &v211[-v224];
    v220 = (_DWORD *)((char *)v220 - v224);
    v226 = &v219[4 * v215 - 16];
    v227 = v211 - 16;
    v228 = v223 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v229 = *(_OWORD *)v227;
      *(v226 - 1) = *((_OWORD *)v227 - 1);
      *v226 = v229;
      v226 -= 2;
      v227 -= 32;
      v228 -= 8;
    }
    while (v228);
    v211 = v225;
    if (v223 != (v223 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_637:
      do
      {
        v230 = *((_DWORD *)v211 - 1);
        v211 -= 4;
        *--v220 = v230;
      }
      while (v211 != v213);
    }
    goto LABEL_237;
  }
LABEL_209:
  if (*(_BYTE *)(*(_QWORD *)v572 + 272))
  {
    v204 = (void *)v194[68];
    v194[69] = v204;
    v205 = ((*(_QWORD *)(*(_QWORD *)v572 + 112) - *(_QWORD *)(*(_QWORD *)v572 + 104)) >> 4);
    if (v205 > (uint64_t)(v194[70] - (_QWORD)v204) >> 2)
    {
      v206 = (char *)operator new(4 * v205);
      v194[68] = v206;
      v194[69] = v206;
      v194[70] = &v206[4 * v205];
      if (v204)
        operator delete(v204);
    }
    v207 = *(int **)(*(_QWORD *)v572 + 104);
    v208 = *(int **)(*(_QWORD *)v572 + 112);
    v198 = v580;
    if (v207 != v208)
    {
      v573 = (void **)(v194 + 68);
      while (2)
      {
        if (!*(_BYTE *)(*((_QWORD *)v207 + 1) + 20))
          goto LABEL_241;
        v232 = *v207;
        v233 = (char *)v194[69];
        v234 = v194[70];
        if ((unint64_t)v233 >= v234)
        {
          v235 = (char *)*v573;
          v236 = v233 - (_BYTE *)*v573;
          v237 = v236 >> 2;
          v238 = (v236 >> 2) + 1;
          if (v238 >> 62)
            goto LABEL_629;
          v239 = v234 - (_QWORD)v235;
          if (v239 >> 1 > v238)
            v238 = v239 >> 1;
          if ((unint64_t)v239 >= 0x7FFFFFFFFFFFFFFCLL)
            v240 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v240 = v238;
          if (v240)
          {
            if (v240 >> 62)
              goto LABEL_627;
            v241 = operator new(4 * v240);
            v242 = &v241[4 * v237];
            *v242 = v232;
            v231 = (uint64_t)(v242 + 1);
            v243 = v233 - v235;
            if (v233 == v235)
            {
LABEL_261:
              v194[68] = v242;
              v194[69] = v231;
              v194[70] = &v241[4 * v240];
              if (v235)
                operator delete(v235);
LABEL_240:
              v194[69] = v231;
              v198 = v580;
LABEL_241:
              v207 += 4;
              if (v207 == v208)
                goto LABEL_263;
              continue;
            }
          }
          else
          {
            v241 = 0;
            v242 = (_DWORD *)(4 * v237);
            *(_DWORD *)(4 * v237) = v232;
            v231 = 4 * v237 + 4;
            v243 = v233 - v235;
            if (v233 == v235)
              goto LABEL_261;
          }
          v244 = v243 - 4;
          if (v244 < 0x2C)
            goto LABEL_638;
          if ((unint64_t)(v233 - v241 - v236) < 0x20)
            goto LABEL_638;
          v245 = (v244 >> 2) + 1;
          v246 = 4 * (v245 & 0x7FFFFFFFFFFFFFF8);
          v247 = &v233[-v246];
          v242 = (_DWORD *)((char *)v242 - v246);
          v248 = &v241[4 * v237 - 16];
          v249 = v233 - 16;
          v250 = v245 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            v251 = *(_OWORD *)v249;
            *(v248 - 1) = *((_OWORD *)v249 - 1);
            *v248 = v251;
            v248 -= 2;
            v249 -= 32;
            v250 -= 8;
          }
          while (v250);
          v233 = v247;
          if (v245 != (v245 & 0x7FFFFFFFFFFFFFF8))
          {
LABEL_638:
            do
            {
              v252 = *((_DWORD *)v233 - 1);
              v233 -= 4;
              *--v242 = v252;
            }
            while (v233 != v235);
          }
          goto LABEL_261;
        }
        break;
      }
      *(_DWORD *)v233 = v232;
      v231 = (uint64_t)(v233 + 4);
      goto LABEL_240;
    }
  }
LABEL_263:
  v197 = *(_QWORD **)(v198 + 1128);
  v195 = (char **)(v194 + 65);
LABEL_264:
  sub_20F3D2520(v197, v195);
  a1 = v580;
  v253 = *(unsigned int **)(v580 + 1136);
  *(_QWORD *)(v580 + 1144) = v253;
  *(_QWORD *)(v580 + 1168) = 0;
  *(_QWORD *)(v580 + 1160) = 0;
  v254 = (unsigned int *)v194[65];
  v255 = (unsigned int *)v194[66];
  if (v254 != v255)
  {
    while (2)
    {
      while (1)
      {
        v257 = *v254;
        v258 = *(_QWORD *)(a1 + 1152);
        if ((unint64_t)v253 >= v258)
          break;
        *v253 = 0;
        v253[1] = v257;
        v256 = v253 + 3;
        v253[2] = 4;
        *(_QWORD *)(a1 + 1144) = v253 + 3;
        ++v254;
        v253 += 3;
        if (v254 == v255)
          goto LABEL_287;
      }
      v259 = *(_DWORD **)(a1 + 1136);
      v260 = 0xAAAAAAAAAAAAAAABLL * (v253 - v259) + 1;
      if (v260 > 0x1555555555555555)
LABEL_628:
        sub_20E867F44();
      v261 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v258 - (_QWORD)v259) >> 2);
      if (2 * v261 > v260)
        v260 = 2 * v261;
      if (v261 >= 0xAAAAAAAAAAAAAAALL)
        v262 = 0x1555555555555555;
      else
        v262 = v260;
      if (v262)
      {
        if (v262 > 0x1555555555555555)
          goto LABEL_627;
        v263 = (char *)operator new(12 * v262);
      }
      else
      {
        v263 = 0;
      }
      v264 = &v263[4 * (v253 - v259)];
      *(_DWORD *)v264 = 0;
      *((_DWORD *)v264 + 1) = v257;
      *((_DWORD *)v264 + 2) = 4;
      v265 = v264;
      if (v253 == v259)
      {
        a1 = v580;
        v269 = &v263[12 * v262];
        *(_QWORD *)(v580 + 1136) = v264;
        v256 = (unsigned int *)(v264 + 12);
        *(_QWORD *)(v580 + 1144) = v264 + 12;
        *(_QWORD *)(v580 + 1152) = v269;
        if (v253)
          goto LABEL_281;
      }
      else
      {
        do
        {
          v266 = *(_QWORD *)(v253 - 3);
          v253 -= 3;
          v267 = v253[2];
          *(_QWORD *)(v265 - 12) = v266;
          v265 -= 12;
          *((_DWORD *)v265 + 2) = v267;
        }
        while (v253 != v259);
        a1 = v580;
        v253 = *(unsigned int **)(v580 + 1136);
        v268 = &v263[12 * v262];
        *(_QWORD *)(v580 + 1136) = v265;
        v256 = (unsigned int *)(v264 + 12);
        *(_QWORD *)(v580 + 1144) = v264 + 12;
        *(_QWORD *)(v580 + 1152) = v268;
        if (v253)
LABEL_281:
          operator delete(v253);
      }
      *(_QWORD *)(a1 + 1144) = v256;
      ++v254;
      v253 = v256;
      if (v254 == v255)
        goto LABEL_287;
      continue;
    }
  }
  v256 = v253;
LABEL_287:
  v270 = (unsigned int *)v194[68];
  v271 = (unsigned int *)v194[69];
  if (v270 != v271)
  {
    while (2)
    {
      v273 = *v270;
      v274 = *(_QWORD *)(a1 + 1152);
      if ((unint64_t)v256 < v274)
      {
        *v256 = 1;
        v256[1] = v273;
        v272 = v256 + 3;
        v256[2] = 6;
        goto LABEL_290;
      }
      v275 = *(_DWORD **)(a1 + 1136);
      v276 = 0xAAAAAAAAAAAAAAABLL * (v256 - v275) + 1;
      if (v276 > 0x1555555555555555)
        goto LABEL_628;
      v277 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v274 - (_QWORD)v275) >> 2);
      if (2 * v277 > v276)
        v276 = 2 * v277;
      if (v277 >= 0xAAAAAAAAAAAAAAALL)
        v278 = 0x1555555555555555;
      else
        v278 = v276;
      if (v278)
      {
        if (v278 > 0x1555555555555555)
          goto LABEL_627;
        v279 = (char *)operator new(12 * v278);
      }
      else
      {
        v279 = 0;
      }
      v280 = &v279[4 * (v256 - v275)];
      *(_DWORD *)v280 = 1;
      *((_DWORD *)v280 + 1) = v273;
      *((_DWORD *)v280 + 2) = 6;
      v281 = v280;
      if (v256 == v275)
      {
        a1 = v580;
        v285 = &v279[12 * v278];
        *(_QWORD *)(v580 + 1136) = v280;
        v272 = (unsigned int *)(v280 + 12);
        *(_QWORD *)(v580 + 1144) = v280 + 12;
        *(_QWORD *)(v580 + 1152) = v285;
        if (!v256)
          goto LABEL_290;
      }
      else
      {
        do
        {
          v282 = *(_QWORD *)(v256 - 3);
          v256 -= 3;
          v283 = v256[2];
          *(_QWORD *)(v281 - 12) = v282;
          v281 -= 12;
          *((_DWORD *)v281 + 2) = v283;
        }
        while (v256 != v275);
        a1 = v580;
        v256 = *(unsigned int **)(v580 + 1136);
        v284 = &v279[12 * v278];
        *(_QWORD *)(v580 + 1136) = v281;
        v272 = (unsigned int *)(v280 + 12);
        *(_QWORD *)(v580 + 1144) = v280 + 12;
        *(_QWORD *)(v580 + 1152) = v284;
        if (!v256)
        {
LABEL_290:
          *(_QWORD *)(a1 + 1144) = v272;
          ++v270;
          v256 = v272;
          if (v270 == v271)
            goto LABEL_309;
          continue;
        }
      }
      break;
    }
    operator delete(v256);
    goto LABEL_290;
  }
  v272 = v256;
LABEL_309:
  if (v577 == 1)
  {
    v291 = *(_QWORD *)(a1 + 1136);
    v292 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * (((uint64_t)v272 - v291) >> 2));
    if (v272 == (unsigned int *)v291)
      v293 = 0;
    else
      v293 = v292;
    sub_20F7EFBD4(v291, v272, v293, 1);
    v289 = *(unsigned int **)(a1 + 1136);
    v290 = *(unsigned int **)(a1 + 1144);
    if (v289 == v290)
      goto LABEL_323;
LABEL_321:
    v294 = 0;
    do
    {
      v295 = v289[2];
      v289[2] = v294;
      v296 = *v289;
      v289 += 3;
      v294 += v295;
      ++*(_QWORD *)(a1 + 1160 + 8 * v296);
    }
    while (v289 != v290);
    goto LABEL_323;
  }
  if (!v577)
  {
    v286 = *(_QWORD *)(a1 + 1136);
    v287 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * ((uint64_t)((uint64_t)v272 - v286) >> 2));
    if (v272 == (unsigned int *)v286)
      v288 = 0;
    else
      v288 = v287;
    sub_20F7EE50C(v286, v272, v288, 1);
  }
  v289 = *(unsigned int **)(a1 + 1136);
  v290 = *(unsigned int **)(a1 + 1144);
  if (v289 != v290)
    goto LABEL_321;
LABEL_323:
  *(_QWORD *)(a1 + 1184) = *(_QWORD *)(a1 + 1176);
  *(_QWORD *)(a1 + 1232) = *(_QWORD *)(a1 + 1224);
  *(_QWORD *)(a1 + 1208) = *(_QWORD *)(a1 + 1200);
  *(_QWORD *)(a1 + 1256) = *(_QWORD *)(a1 + 1248);
  v297 = *(_QWORD *)(a1 + 1160);
  if (v297)
  {
    sub_20E93DC84(a1 + 1176, v297);
    a1 = v580;
    v298 = *(int32x4_t **)(v580 + 1176);
    v299 = *(int32x4_t **)(v580 + 1184);
    if (v298 != v299)
    {
      v300 = (char *)v299 - (char *)v298 - 4;
      if (v300 < 0x1C)
      {
        LODWORD(v301) = 0;
        v302 = *(int32x4_t **)(v580 + 1176);
        goto LABEL_330;
      }
      v303 = (v300 >> 2) + 1;
      v301 = v303 & 0x7FFFFFFFFFFFFFF8;
      v302 = (int32x4_t *)((char *)v298 + 4 * (v303 & 0x7FFFFFFFFFFFFFF8));
      v304 = (int32x4_t)xmmword_210365350;
      v305 = v298 + 1;
      v306.i64[0] = 0x400000004;
      v306.i64[1] = 0x400000004;
      v307.i64[0] = 0x800000008;
      v307.i64[1] = 0x800000008;
      v308 = v303 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        v305[-1] = v304;
        *v305 = vaddq_s32(v304, v306);
        v304 = vaddq_s32(v304, v307);
        v305 += 2;
        v308 -= 8;
      }
      while (v308);
      if (v303 != v301)
      {
        do
        {
LABEL_330:
          v302->i32[0] = v301;
          v302 = (int32x4_t *)((char *)v302 + 4);
          LODWORD(v301) = v301 + 1;
        }
        while (v302 != v299);
      }
    }
  }
  v309 = *(_QWORD *)(a1 + 1160);
  v310 = *(_DWORD **)(a1 + 1224);
  v311 = (uint64_t)(*(_QWORD *)(a1 + 1232) - (_QWORD)v310) >> 2;
  if (v309 <= v311)
  {
    if (v309 < v311)
      *(_QWORD *)(a1 + 1232) = &v310[v309];
  }
  else
  {
    sub_20E93DC84(a1 + 1224, v309 - v311);
    v310 = *(_DWORD **)(a1 + 1224);
    a1 = v580;
  }
  v312 = *(_DWORD **)(a1 + 1136);
  v313 = *(_DWORD **)(a1 + 1144);
  while (v312 != v313)
  {
    if (!*v312)
      *v310++ = v312[2];
    v312 += 3;
  }
  v314 = *(_QWORD *)(a1 + 1168);
  v315 = *(int32x4_t **)(a1 + 1208);
  v316 = *(int32x4_t **)(a1 + 1200);
  v317 = ((char *)v315 - (char *)v316) >> 2;
  if (v314 <= v317)
  {
    if (v314 < v317)
    {
      v315 = (int32x4_t *)((char *)v316 + 4 * v314);
      *(_QWORD *)(a1 + 1208) = v315;
    }
  }
  else
  {
    sub_20E93DC84(a1 + 1200, v314 - v317);
    a1 = v580;
    v316 = *(int32x4_t **)(v580 + 1200);
    v315 = *(int32x4_t **)(v580 + 1208);
  }
  if (v316 != v315)
  {
    v318 = (char *)v315 - (char *)v316 - 4;
    if (v318 < 0x1C)
    {
      LODWORD(v319) = 0;
      v320 = v316;
      goto LABEL_350;
    }
    v321 = (v318 >> 2) + 1;
    v319 = v321 & 0x7FFFFFFFFFFFFFF8;
    v320 = (int32x4_t *)((char *)v316 + 4 * (v321 & 0x7FFFFFFFFFFFFFF8));
    v322 = (int32x4_t)xmmword_210365350;
    v323 = v316 + 1;
    v324.i64[0] = 0x400000004;
    v324.i64[1] = 0x400000004;
    v325.i64[0] = 0x800000008;
    v325.i64[1] = 0x800000008;
    v326 = v321 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v323[-1] = v322;
      *v323 = vaddq_s32(v322, v324);
      v322 = vaddq_s32(v322, v325);
      v323 += 2;
      v326 -= 8;
    }
    while (v326);
    if (v321 != v319)
    {
      do
      {
LABEL_350:
        v320->i32[0] = v319;
        v320 = (int32x4_t *)((char *)v320 + 4);
        LODWORD(v319) = v319 + 1;
      }
      while (v320 != v315);
    }
  }
  v327 = *(_QWORD *)(a1 + 1168);
  v328 = *(_DWORD **)(a1 + 1248);
  v329 = (uint64_t)(*(_QWORD *)(a1 + 1256) - (_QWORD)v328) >> 2;
  if (v327 <= v329)
  {
    v9 = v556;
    v7 = v557;
    v10 = v554;
    v8 = v555;
    if (v327 < v329)
      *(_QWORD *)(a1 + 1256) = &v328[v327];
  }
  else
  {
    sub_20E93DC84(a1 + 1248, v327 - v329);
    v328 = *(_DWORD **)(a1 + 1248);
    a1 = v580;
    v9 = v556;
    v7 = v557;
    v10 = v554;
    v8 = v555;
  }
  v330 = *(_DWORD **)(a1 + 1136);
  v331 = *(_DWORD **)(a1 + 1144);
  while (v330 != v331)
  {
    if (*v330 == 1)
      *v328++ = v330[2];
    v330 += 3;
  }
  kdebug_trace();
LABEL_361:
  if (!(((unint64_t)(v9 - v10) >> 2) + ((unint64_t)(v7 - v8) >> 2)))
  {
    v333 = *(_QWORD *)(a1 + 48);
    v334 = *(_QWORD *)(a1 + 56);
    if (*(_BYTE *)(a1 + 312))
    {
      for (j = 0; v333 != v334; v333 += 16)
      {
        v338 = *(_QWORD *)(v333 + 8);
        if ((*(_BYTE *)(v338 + 4) & 6) == 0 && *(_BYTE *)(v338 + 20))
          j += 4;
      }
      for (k = *(_QWORD *)(a1 + 144); k != *(_QWORD *)(a1 + 152); k += 16)
      {
        v337 = *(_QWORD *)(k + 8);
        if ((*(_BYTE *)(v337 + 4) & 6) == 0 && *(_BYTE *)(v337 + 20))
          j += 6;
      }
      goto LABEL_439;
    }
    v366 = 0;
    if (v333 == v334)
    {
      v368 = 0;
      v367 = 0;
      v370 = *(_QWORD *)(a1 + 144);
      v371 = *(_QWORD *)(a1 + 152);
      if (v370 != v371)
        goto LABEL_403;
    }
    else
    {
      v367 = 0;
      v368 = 0;
      do
      {
        v369 = *(_QWORD *)(v333 + 8);
        if ((*(_BYTE *)(v369 + 4) & 6) != 0)
        {
          v366 = 1;
          ++v367;
        }
        v368 += *(unsigned __int8 *)(v369 + 20);
        v333 += 16;
      }
      while (v333 != v334);
      v370 = *(_QWORD *)(a1 + 144);
      v371 = *(_QWORD *)(a1 + 152);
      if (v370 != v371)
      {
LABEL_403:
        v372 = 0;
        v373 = 0;
        do
        {
          v374 = *(_QWORD *)(v370 + 8);
          if ((*(_BYTE *)(v374 + 4) & 6) != 0)
          {
            v366 = 1;
            ++v372;
          }
          v373 += *(unsigned __int8 *)(v374 + 20);
          v370 += 16;
        }
        while (v370 != v371);
        if (v366)
          goto LABEL_408;
        goto LABEL_466;
      }
    }
    v373 = 0;
    v372 = 0;
    if (v366)
    {
LABEL_408:
      v375 = (_QWORD *)(a1 + 464);
      *(_QWORD *)(a1 + 472) = *(_QWORD *)(a1 + 464);
      *(_QWORD *)(a1 + 496) = *(_QWORD *)(a1 + 488);
      v376 = a1;
      v377 = *(_QWORD *)(a1 + 240);
      v378 = *(_QWORD *)(v376 + 248);
      while (v377 != v378)
      {
        v379 = *(_QWORD *)(v377 + 736);
        if (*(_BYTE *)(v377 + 880)
          || (*(_BYTE *)(v379 + 4) & 6) != 0
          || (*(_BYTE *)(*(_QWORD *)(v377 + 744) + 4) & 6) != 0)
        {
          sub_20F394A20((uint64_t)v375, v379);
          sub_20F394A20((uint64_t)v375, *(_QWORD *)(v377 + 744));
        }
        v377 += 888;
      }
      a1 = v580;
      sub_20F7EE458(*(_QWORD *)(v580 + 264), *(_QWORD *)(v580 + 272), v375);
      v380 = (*(_QWORD *)(a1 + 472) - *(_QWORD *)(a1 + 464)) >> 2;
      if (v367 > v380)
        LODWORD(v380) = v367;
      v186 = v368 >= v380;
      v381 = v368 - v380;
      if (!v186)
        v381 = 0;
      v382 = (*(_QWORD *)(v580 + 496) - *(_QWORD *)(v580 + 488)) >> 2;
      if (v372 > v382)
        LODWORD(v382) = v372;
      v186 = v373 >= v382;
      v383 = v373 - v382;
      if (!v186)
        v383 = 0;
      j = 6 * v383 + 4 * v381;
      v384 = *(_QWORD *)(v580 + 240);
      v385 = *(_QWORD *)(v580 + 248);
      while (v384 != v385)
      {
        v386 = *(_QWORD *)(v384 + 736);
        if (*(_BYTE *)(v384 + 880)
          || (*(_BYTE *)(v386 + 4) & 6) != 0
          || (*(_BYTE *)(*(_QWORD *)(v384 + 744) + 4) & 6) != 0)
        {
          ++*(_DWORD *)(v386 + 8);
          ++*(_DWORD *)(*(_QWORD *)(v384 + 744) + 8);
        }
        v384 += 888;
      }
      v387 = *(_QWORD *)(v580 + 264);
      for (m = *(_QWORD *)(v580 + 272); v387 != m; v387 += 640)
      {
        v389 = *(_QWORD *)(v387 + 488);
        if (*(_BYTE *)(v387 + 632)
          || (*(_BYTE *)(v389 + 4) & 6) != 0
          || (*(_BYTE *)(*(_QWORD *)(v387 + 496) + 4) & 6) != 0
          || (*(_BYTE *)(*(_QWORD *)(v387 + 504) + 4) & 6) != 0
          || (*(_BYTE *)(*(_QWORD *)(v387 + 512) + 4) & 6) != 0)
        {
          ++*(_DWORD *)(v389 + 8);
          ++*(_DWORD *)(*(_QWORD *)(v387 + 496) + 8);
          ++*(_DWORD *)(*(_QWORD *)(v387 + 504) + 8);
          ++*(_DWORD *)(*(_QWORD *)(v387 + 512) + 8);
        }
      }
LABEL_439:
      if (!j)
        goto LABEL_487;
LABEL_440:
      if (*(_BYTE *)(a1 + 312))
        goto LABEL_441;
      v390 = *(_QWORD *)(a1 + 48);
      v391 = *(_QWORD *)(a1 + 56);
      if (v390 == v391)
      {
LABEL_446:
        v392 = *(_QWORD *)(a1 + 144);
        v393 = *(_QWORD *)(a1 + 152);
        if (v392 == v393)
        {
LABEL_441:
          if (*(_QWORD *)(a1 + 304) < (unint64_t)j)
            goto LABEL_487;
          goto LABEL_362;
        }
        while ((*(_BYTE *)(*(_QWORD *)(v392 + 8) + 4) & 6) == 0)
        {
          v392 += 16;
          if (v392 == v393)
            goto LABEL_441;
        }
      }
      else
      {
        while ((*(_BYTE *)(*(_QWORD *)(v390 + 8) + 4) & 6) == 0)
        {
          v390 += 16;
          if (v390 == v391)
            goto LABEL_446;
        }
      }
      v419 = *(_QWORD *)(a1 + 240);
      v420 = *(_QWORD *)(a1 + 248);
      if (v419 == v420)
      {
        v421 = 0;
      }
      else
      {
        v421 = 0;
        do
        {
          if ((*(_BYTE *)(*(_QWORD *)(v419 + 736) + 4) & 6) == 0
            && (*(_BYTE *)(*(_QWORD *)(v419 + 744) + 4) & 6) == 0)
          {
            ++v421;
          }
          v419 += 888;
        }
        while (v419 != v420);
      }
      v422 = 6 * v421;
      v423 = *(_QWORD **)(a1 + 264);
      v424 = *(_QWORD **)(a1 + 272);
      if (v423 == v424)
      {
        v425 = 0;
      }
      else
      {
        v425 = 0;
        do
        {
          if ((*(_BYTE *)(v423[61] + 4) & 6) == 0
            && (*(_BYTE *)(v423[62] + 4) & 6) == 0
            && (*(_BYTE *)(v423[63] + 4) & 6) == 0
            && (*(_BYTE *)(v423[64] + 4) & 6) == 0)
          {
            ++v425;
          }
          v423 += 80;
        }
        while (v423 != v424);
      }
      if (5 * v425 + v422 < (unint64_t)j)
        goto LABEL_487;
      goto LABEL_362;
    }
LABEL_466:
    j = 6 * v373 + 4 * v368;
    if (!j)
      goto LABEL_487;
    goto LABEL_440;
  }
LABEL_362:
  if (*(_BYTE *)(a1 + 513))
  {
    v332 = 0;
  }
  else
  {
    v339 = *(void **)(a1 + 720);
    v340 = *(_QWORD *)(a1 + 728) - (_QWORD)v339;
    if (v340 >= 1)
      bzero(v339, 8 * (((unint64_t)v340 >> 3) - ((unint64_t)v340 > 7)) + 8);
    v341 = *(void **)(a1 + 944);
    v342 = *(_QWORD *)(a1 + 952) - (_QWORD)v341;
    if (v342 >= 1)
      bzero(v341, 8 * (((unint64_t)v342 >> 3) - ((unint64_t)v342 > 7)) + 8);
    v343 = *(void **)(a1 + 608);
    v344 = *(_QWORD *)(a1 + 616) - (_QWORD)v343;
    if (v344 >= 1)
      bzero(v343, 8 * (((unint64_t)v344 >> 3) - ((unint64_t)v344 > 7)) + 8);
    v345 = *(void **)(a1 + 832);
    v346 = *(_QWORD *)(a1 + 840) - (_QWORD)v345;
    if (v346 >= 1)
      bzero(v345, 8 * (((unint64_t)v346 >> 3) - ((unint64_t)v346 > 7)) + 8);
    v347 = *(unsigned int *)(a1 + 568);
    if ((_DWORD)v347)
      bzero(*(void **)(a1 + 552), 8 * v347);
    if (((*(_QWORD *)(a1 + 1856) - *(_QWORD *)(a1 + 1848)) >> 2)
       + ((*(_QWORD *)(a1 + 1832) - *(_QWORD *)(a1 + 1824)) >> 2))
    {
      kdebug_trace();
      v348 = sub_20F3D26E4((char **)(a1 + 552), (_QWORD *)(a1 + 1304), (char **)(a1 + 2056), (_QWORD *)(a1 + 2104));
      v349 = (void **)(a1 + 2200);
      v350 = a1;
      v351 = ((*(_DWORD *)(a1 + 1832) - *(_DWORD *)(a1 + 1824)) & 0xFFFFFFFC)
           + 6 * ((*(_QWORD *)(a1 + 1856) - *(_QWORD *)(a1 + 1848)) >> 2);
      *(_DWORD *)(v350 + 2216) = v351;
      if (*(_QWORD *)(v350 + 2208) < v351)
      {
        if (*v349)
          MEMORY[0x212BC6368](*v349, 0x1000C8000313F17, v348);
        *(_QWORD *)(v580 + 2200) = 0;
        v352 = (8 * v351 + 31) & 0xFFFFFFFE0;
        *(_QWORD *)(v580 + 2208) = v352 >> 3;
        *v349 = operator new(v352, (std::align_val_t)0x20uLL);
      }
      v353 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v562 + 24))(v562);
      LODWORD(v588.f64[0]) = 0;
      sub_20F3D3834(v353, *(_DWORD **)(v580 + 1824), *(_DWORD **)(v580 + 1832), v349, &v588);
      v354 = *(_DWORD **)(v580 + 1848);
      v355 = *(_DWORD **)(v580 + 1856);
      if (v354 == v355)
      {
        v365 = *(_QWORD *)(v580 + 1848);
        v364 = v580;
      }
      else
      {
        v356 = *(_QWORD *)(v353 + 104);
        v357 = LODWORD(v588.f64[0]);
        do
        {
          v356 -= 16;
          do
          {
            v358 = *(_DWORD *)(v356 + 16);
            v356 += 16;
          }
          while (*v354 != v358);
          v359 = *(_QWORD *)(v356 + 8);
          LODWORD(v585.f64[0]) = 3;
          *(_QWORD *)&v585.f64[1] = v359 + 32;
          LODWORD(v586.f64[0]) = 0;
          memset(v584, 0, 24);
          sub_20F053450((unsigned int *)&v585, (double *)v584);
          v360.i64[0] = (uint64_t)v584[2];
          v361.i64[0] = *(_QWORD *)(v359 + 120);
          v362 = *(int8x16_t *)(v359 + 104);
          v363 = (uint64_t)*v349 + 8 * v357;
          *(_OWORD *)v363 = *(_OWORD *)v584;
          *(int64x2_t *)(v363 + 16) = vzip1q_s64(v360, (int64x2_t)v362);
          *(int8x16_t *)(v363 + 32) = vextq_s8(v362, v361, 8uLL);
          v357 += 6;
          LODWORD(v588.f64[0]) = v357;
          ++v354;
        }
        while (v354 != v355);
        v364 = v580;
        v365 = *(_QWORD *)(v580 + 1856);
        v354 = *(_DWORD **)(v580 + 1848);
      }
      if (((*(_QWORD *)(v364 + 1832) - *(_QWORD *)(v364 + 1824)) >> 2)
         + ((unint64_t)(v365 - (_QWORD)v354) >> 2))
      {
        sub_20F3DA0B8((_QWORD *)(v580 + 1344), (void **)(v580 + 2224));
        sub_20F20B6B0(v580 + 2224);
        v394 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v580 + 1272) + 32))(v562);
        sub_20F7F129C(v394, v580 + 2320, (_QWORD *)(v580 + 1824), (uint64_t *)(v580 + 1280));
        v395 = *(unsigned int **)(v580 + 1824);
        v396 = *(unsigned int **)(v580 + 1832);
        if (v395 != v396)
        {
          v397 = 0;
          v398 = 0;
          v399 = *(unsigned int **)(v580 + 1072);
          do
          {
            if (*v399 < *v395)
            {
              do
              {
                v400 = v399[1];
                ++v399;
                ++v397;
              }
              while (v400 < *v395);
            }
            v401 = *(_DWORD *)(v580 + 1336) + 4 * v398;
            v402 = *(_QWORD *)(v580 + 2224);
            v581 = vrev64_s32(*(int32x2_t *)(v580 + 2240));
            v582 = v402 + 8 * v401;
            v583 = v401;
            v403 = *(_QWORD *)(v580 + 552) + 8 * (*(_DWORD *)(v580 + 584) + 4 * v397);
            v404 = *(_OWORD *)(v403 + 16);
            v588 = *(float64x2_t *)v403;
            v589 = v404;
            v584[0] = &v588;
            *(_QWORD *)&v585.f64[1] = &v581;
            *(_QWORD *)&v586.f64[0] = v580 + 2320;
            v586.f64[1] = 1.0;
            sub_20F3DA534(&v584[1], (uint64_t)&v585);
            v405 = vsubq_f64(*((float64x2_t *)v584[0] + 1), *(float64x2_t *)&v584[3]);
            *(float64x2_t *)v403 = vsubq_f64(*(float64x2_t *)v584[0], *(float64x2_t *)&v584[1]);
            *(float64x2_t *)(v403 + 16) = v405;
            ++v395;
            ++v398;
          }
          while (v395 != v396);
        }
        v406 = *(unsigned int **)(v580 + 1848);
        v407 = *(unsigned int **)(v580 + 1856);
        if (v406 != v407)
        {
          v408 = 0;
          v409 = 0;
          v410 = *(unsigned int **)(v580 + 1096);
          do
          {
            if (*v410 < *v406)
            {
              do
              {
                v411 = v410[1];
                ++v410;
                ++v408;
              }
              while (v411 < *v406);
            }
            v412 = *(_DWORD *)(v580 + 1340) + 6 * v409;
            v413 = *(_QWORD *)(v580 + 2224);
            v581 = vrev64_s32(*(int32x2_t *)(v580 + 2240));
            v582 = v413 + 8 * v412;
            v583 = v412;
            v414 = (float64x2_t *)(*(_QWORD *)(v580 + 552) + 8 * (*(_DWORD *)(v580 + 588) + 6 * v408));
            v415 = *v414;
            v416 = v414[2];
            v586 = v414[1];
            v587 = v416;
            v585 = v415;
            v584[0] = &v585;
            *(_QWORD *)&v588.f64[1] = &v581;
            *(_QWORD *)&v589 = v580 + 2320;
            *((_QWORD *)&v589 + 1) = 0x3FF0000000000000;
            sub_20F3DA5F4(&v584[1], (uint64_t)&v588);
            v417 = vsubq_f64(*(float64x2_t *)v584[0], *(float64x2_t *)&v584[1]);
            v418 = vsubq_f64(*((float64x2_t *)v584[0] + 2), *(float64x2_t *)&v584[5]);
            v414[1] = vsubq_f64(*((float64x2_t *)v584[0] + 1), *(float64x2_t *)&v584[3]);
            v414[2] = v418;
            *v414 = v417;
            ++v406;
            ++v409;
          }
          while (v406 != v407);
        }
      }
      kdebug_trace();
      a1 = v580;
    }
    sub_20F7E54D4((_QWORD *)(a1 + 1120), a1 + 8, 2, v2, v3, v4, v5, v6);
    v332 = 0;
    *(_WORD *)(a1 + 513) = 1;
  }
LABEL_488:
  kdebug_trace();
  return v332;
}

void sub_20F7DE010(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,char a31,uint64_t a32,uint64_t a33,char a34)
{
  sub_20E9AA8C8((uint64_t)&a34);
  sub_20EDB3070((uint64_t)&a31);
  sub_20EDB3030((uint64_t)&a30);
  _Unwind_Resume(a1);
}

uint64_t sub_20F7DE0E4(uint64_t a1, double **a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int *v8;
  unsigned int *v9;
  unsigned int *v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;
  BOOL v16;
  unsigned int *v17;
  unsigned int *v18;
  unsigned int *v19;
  unsigned int *v20;
  unsigned int v21;
  unsigned int *v22;
  unsigned int v23;
  unsigned int v24;
  BOOL v25;
  unsigned int v26;
  unsigned int *v27;
  unsigned int v28;
  unsigned int *v29;
  unsigned int v30;
  unsigned int v31;
  BOOL v32;
  unsigned int v33;
  unsigned int *v34;
  unsigned int v35;
  unsigned int *v36;
  unsigned int v37;
  unsigned int v38;
  BOOL v39;
  uint64_t v40;
  size_t v41;
  unsigned int *v42;
  unsigned int *v43;
  unsigned int v44;
  unsigned int *v45;
  unsigned int v46;
  unsigned int v47;
  BOOL v48;
  unsigned int *v49;
  unsigned int *v50;
  unsigned int *v51;
  unsigned int *v52;
  unsigned int v53;
  unsigned int *v54;
  unsigned int v55;
  unsigned int v56;
  BOOL v57;
  unsigned int v58;
  unsigned int *v59;
  unsigned int v60;
  unsigned int *v61;
  unsigned int v62;
  unsigned int v63;
  BOOL v64;
  unsigned int v65;
  unsigned int *v66;
  unsigned int v67;
  unsigned int *v68;
  unsigned int v69;
  unsigned int v70;
  BOOL v71;
  uint64_t v72;
  unsigned int v73;
  uint64_t v74;
  unsigned int *v75;
  unint64_t v76;
  unsigned int *v77;
  unint64_t v78;
  _OWORD *v79;
  uint64_t v80;
  uint64_t v81;
  int v82;
  int v83;
  int v84;
  __n128 *v85;
  unint64_t v86;
  __n128 v87;
  unint64_t v88;
  unint64_t v89;
  uint64_t v90;
  unsigned int v91;
  unsigned int v92;
  __n128 *v93;
  uint64_t v94;
  int v95;
  int v96;
  int v97;
  __n128 *v98;
  unint64_t v99;
  __n128 v100;
  unint64_t v101;
  unint64_t v102;
  unint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  unsigned int *v107;
  void *v108;
  __n128 *v109;
  unsigned int v110;
  unint64_t v111;
  unsigned int *v112;
  uint64_t v113;
  uint64_t v114;
  unint64_t v115;
  uint64_t v116;
  unint64_t v117;
  uint64_t v118;
  unint64_t v119;
  char *v120;
  __n128 *v121;
  __n128 *v122;
  __n128 v123;
  void *v124;
  uint64_t v125;
  unint64_t v126;
  uint64_t v127;
  unint64_t v128;
  uint64_t v129;
  unint64_t v130;
  char *v131;
  __n128 *v132;
  __n128 *v133;
  __n128 v134;
  uint64_t v135;
  uint64_t v136;
  unsigned int *v137;
  uint64_t v138;
  unint64_t v139;
  uint64_t v140;
  unint64_t v141;
  uint64_t v142;
  unint64_t v143;
  char *v144;
  __n128 *v145;
  __n128 *v146;
  __n128 v147;
  uint64_t v148;
  uint64_t v149;
  unsigned int *v150;
  uint64_t v151;
  unint64_t v152;
  uint64_t v153;
  unint64_t v154;
  uint64_t v155;
  unint64_t v156;
  char *v157;
  __n128 *v158;
  __n128 *v159;
  __n128 v160;
  uint64_t v161;
  uint64_t v162;
  unsigned int *v163;
  uint64_t v164;
  unint64_t v165;
  uint64_t v166;
  unint64_t v167;
  uint64_t v168;
  unint64_t v169;
  char *v170;
  __n128 *v171;
  __n128 *v172;
  __n128 v173;
  uint64_t v174;
  uint64_t v175;
  unsigned int *v176;
  uint64_t v177;
  unint64_t v178;
  uint64_t v179;
  unint64_t v180;
  uint64_t v181;
  unint64_t v182;
  char *v183;
  __n128 *v184;
  __n128 *v185;
  __n128 v186;
  uint64_t v187;
  uint64_t v188;
  unsigned int *v189;
  __n128 *v190;
  uint64_t v191;
  unint64_t v192;
  uint64_t v193;
  unint64_t v194;
  uint64_t v195;
  unint64_t v196;
  char *v197;
  __n128 *v198;
  __n128 v199;
  uint64_t v200;
  uint64_t v201;
  unsigned int *v202;
  __n128 *v203;
  uint64_t v204;
  unint64_t v205;
  uint64_t v206;
  unint64_t v207;
  uint64_t v208;
  unint64_t v209;
  char *v210;
  __n128 *v211;
  __n128 v212;
  unint64_t v213;
  uint64_t v214;
  uint64_t v215;
  unsigned int *v216;
  __n128 *v217;
  unsigned int v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  char *v222;
  unsigned int *v223;
  uint64_t v224;
  unint64_t v225;
  uint64_t v226;
  unint64_t v227;
  uint64_t v228;
  unint64_t v229;
  char *v230;
  __n128 *v231;
  __n128 *v232;
  __n128 v233;
  uint64_t v234;
  uint64_t v235;
  unint64_t v236;
  char *v237;
  unsigned int *v238;
  uint64_t v239;
  unint64_t v240;
  uint64_t v241;
  unint64_t v242;
  uint64_t v243;
  unint64_t v244;
  char *v245;
  __n128 *v246;
  __n128 *v247;
  __n128 v248;
  unint64_t v249;
  uint64_t v250;
  uint64_t v251;
  unsigned int *v252;
  __n128 *v253;
  unsigned int v254;
  uint64_t v255;
  __n128 *v256;
  unsigned int *v257;
  uint64_t v258;
  char *v259;
  unint64_t v260;
  __n128 *v261;
  uint64_t v262;
  unint64_t v263;
  unint64_t v264;
  char *v265;
  __n128 *v266;
  __n128 *v267;
  __n128 v268;
  char *v269;
  unint64_t v270;
  __n128 *v271;
  uint64_t v272;
  unint64_t v273;
  unint64_t v274;
  char *v275;
  __n128 v276;
  char *v277;
  unint64_t v278;
  __n128 *v279;
  uint64_t v280;
  unint64_t v281;
  unint64_t v282;
  char *v283;
  __n128 v284;
  char *v285;
  unint64_t v286;
  uint64_t v287;
  unint64_t v288;
  unint64_t v289;
  char *v290;
  __n128 v291;
  __n128 *v292;
  unsigned int *v293;
  uint64_t v294;
  char *v295;
  unint64_t v296;
  __n128 *v297;
  uint64_t v298;
  unint64_t v299;
  unint64_t v300;
  char *v301;
  __n128 *v302;
  __n128 *v303;
  __n128 v304;
  unint64_t v305;
  uint64_t v306;
  char *v307;
  unint64_t v308;
  __n128 *v309;
  uint64_t v310;
  unint64_t v311;
  unint64_t v312;
  char *v313;
  __n128 v314;
  char *v315;
  unint64_t v316;
  __n128 *v317;
  uint64_t v318;
  unint64_t v319;
  unint64_t v320;
  char *v321;
  __n128 v322;
  char *v323;
  unint64_t v324;
  uint64_t v325;
  unint64_t v326;
  unint64_t v327;
  char *v328;
  __n128 v329;
  unint64_t v330;
  uint64_t v331;
  uint64_t v332;
  unsigned int *v333;
  __n128 *v334;
  unsigned int v335;
  uint64_t v336;
  __n128 *v337;
  unsigned int *v338;
  uint64_t v339;
  char *v340;
  unint64_t v341;
  __n128 *v342;
  uint64_t v343;
  unint64_t v344;
  unint64_t v345;
  char *v346;
  __n128 *v347;
  __n128 *v348;
  __n128 v349;
  char *v350;
  unint64_t v351;
  __n128 *v352;
  uint64_t v353;
  unint64_t v354;
  unint64_t v355;
  char *v356;
  __n128 v357;
  char *v358;
  unint64_t v359;
  __n128 *v360;
  uint64_t v361;
  unint64_t v362;
  unint64_t v363;
  char *v364;
  __n128 v365;
  char *v366;
  unint64_t v367;
  uint64_t v368;
  unint64_t v369;
  unint64_t v370;
  char *v371;
  __n128 v372;
  __n128 *v373;
  unsigned int *v374;
  uint64_t v375;
  char *v376;
  unint64_t v377;
  __n128 *v378;
  uint64_t v379;
  unint64_t v380;
  unint64_t v381;
  char *v382;
  __n128 *v383;
  __n128 *v384;
  __n128 v385;
  unint64_t v386;
  uint64_t v387;
  char *v388;
  unint64_t v389;
  __n128 *v390;
  uint64_t v391;
  unint64_t v392;
  unint64_t v393;
  char *v394;
  __n128 v395;
  char *v396;
  unint64_t v397;
  __n128 *v398;
  uint64_t v399;
  unint64_t v400;
  unint64_t v401;
  char *v402;
  __n128 v403;
  char *v404;
  unint64_t v405;
  uint64_t v406;
  unint64_t v407;
  unint64_t v408;
  char *v409;
  __n128 v410;
  unint64_t v411;
  uint64_t v412;
  char *v413;
  uint64_t v414;
  _BYTE *v415;
  uint64_t v416;
  uint64_t v417;
  uint64_t v418;
  _QWORD *v419;
  uint64_t v420;
  uint64_t v421;
  _QWORD *v422;
  _QWORD *v423;
  uint64_t v424;
  size_t v425;
  double **v426;
  unsigned int *v427;
  int v428;
  uint64_t v429;
  size_t v430;
  unsigned int *v431;
  double *v432;
  unint64_t v433;
  double *v434;
  unint64_t v435;
  uint64_t v436;
  double *v437;
  float64x2_t *v438;
  float64x2_t *v439;
  uint64_t v440;
  float64x2_t v441;
  unint64_t v442;
  uint64_t v443;
  uint64_t v444;
  unsigned int *v445;
  uint64_t v446;
  unsigned int *v447;
  unsigned int v448;
  unint64_t v449;
  uint64_t v450;
  unsigned int v451;
  unint64_t v452;
  __n128 *v453;
  uint64_t v454;
  unint64_t v455;
  uint64_t v456;
  unint64_t v457;
  uint64_t v458;
  unint64_t v459;
  char *v460;
  __n128 *v461;
  __n128 *v462;
  __n128 v463;
  __n128 *v464;
  uint64_t v465;
  unint64_t v466;
  uint64_t v467;
  unint64_t v468;
  uint64_t v469;
  unint64_t v470;
  uint64_t v471;
  unint64_t v472;
  char *v473;
  __n128 *v474;
  __n128 *v475;
  __n128 v476;
  __n128 *v477;
  uint64_t v478;
  unint64_t v479;
  uint64_t v480;
  unint64_t v481;
  uint64_t v482;
  unint64_t v483;
  uint64_t v484;
  unint64_t v485;
  char *v486;
  __n128 *v487;
  __n128 *v488;
  __n128 v489;
  __n128 *v490;
  uint64_t v491;
  unint64_t v492;
  uint64_t v493;
  unint64_t v494;
  uint64_t v495;
  unint64_t v496;
  uint64_t v497;
  unint64_t v498;
  char *v499;
  __n128 *v500;
  __n128 *v501;
  __n128 v502;
  unsigned int v503;
  uint64_t v504;
  uint64_t v505;
  uint64_t v506;
  uint64_t v507;
  unsigned int *v508;
  unsigned int v509;
  uint64_t v510;
  unsigned int v511;
  uint64_t v512;
  unint64_t v513;
  unint64_t v514;
  uint64_t v515;
  unint64_t v516;
  uint64_t v517;
  unint64_t v518;
  uint64_t v519;
  unint64_t v520;
  char *v521;
  __n128 *v522;
  __n128 *v523;
  __n128 v524;
  __n128 *v525;
  unsigned int v526;
  uint64_t v527;
  uint64_t v528;
  uint64_t v529;
  uint64_t v530;
  unsigned int *v531;
  unsigned int v532;
  uint64_t v533;
  uint64_t v534;
  uint64_t v535;
  unsigned int v536;
  unint64_t v537;
  unint64_t v538;
  uint64_t v539;
  unint64_t v540;
  uint64_t v541;
  unint64_t v542;
  char *v543;
  __n128 *v544;
  __n128 *v545;
  __n128 v546;
  __n128 *v547;
  unint64_t v548;
  unint64_t v549;
  unint64_t v550;
  uint64_t v551;
  unint64_t v552;
  uint64_t v553;
  unint64_t v554;
  char *v555;
  __n128 *v556;
  __n128 *v557;
  __n128 v558;
  __n128 *v559;
  unint64_t v560;
  unint64_t v561;
  uint64_t v562;
  unint64_t v563;
  uint64_t v564;
  unint64_t v565;
  unsigned __int32 v566;
  char *v567;
  __n128 *v568;
  __n128 *v569;
  __n128 v570;
  __n128 *v571;
  unint64_t v572;
  unint64_t v573;
  uint64_t v574;
  unint64_t v575;
  uint64_t v576;
  unint64_t v577;
  unsigned __int32 v578;
  char *v579;
  __n128 *v580;
  __n128 *v581;
  __n128 v582;
  __n128 *v583;
  unsigned int v584;
  unint64_t v585;
  unsigned int *v586;
  uint64_t v587;
  _QWORD *v588;
  uint64_t v589;
  uint64_t v590;
  uint64_t v591;
  uint64_t v592;
  unsigned int v593;
  uint64_t v594;
  unsigned int *v595;
  unsigned int v596;
  uint64_t v597;
  uint64_t v598;
  uint64_t v599;
  unsigned int v600;
  char *v601;
  unint64_t v602;
  uint64_t v603;
  unint64_t v604;
  uint64_t v605;
  unint64_t v606;
  char *v607;
  __n128 *v608;
  __n128 *v609;
  __n128 v610;
  __n128 *v611;
  unint64_t v612;
  unint64_t v613;
  unint64_t v614;
  uint64_t v615;
  unint64_t v616;
  uint64_t v617;
  unint64_t v618;
  char *v619;
  __n128 *v620;
  __n128 *v621;
  __n128 v622;
  __n128 *v623;
  unint64_t v624;
  unint64_t v625;
  uint64_t v626;
  unint64_t v627;
  uint64_t v628;
  unint64_t v629;
  unsigned __int32 v630;
  char *v631;
  __n128 *v632;
  __n128 *v633;
  __n128 v634;
  __n128 *v635;
  unint64_t v636;
  unint64_t v637;
  uint64_t v638;
  unint64_t v639;
  uint64_t v640;
  unint64_t v641;
  unsigned __int32 v642;
  char *v643;
  __n128 *v644;
  __n128 *v645;
  __n128 v646;
  __n128 *v647;
  unsigned int v648;
  unint64_t v649;
  uint64_t v650;
  uint64_t v651;
  uint64_t v652;
  uint64_t v653;
  size_t v654;
  __n128 *v655;
  uint64_t v656;
  uint64_t v657;
  uint64_t v658;
  uint64_t v659;
  unint64_t v660;
  unsigned __int32 v661;
  uint64_t v662;
  uint64_t v663;
  uint64_t v664;
  unsigned int v665;
  char *v666;
  uint64_t v667;
  char *v668;
  unsigned int v669;
  char *v670;
  uint64_t v671;
  uint64_t v672;
  size_t v673;
  double v674;
  unsigned int v676;
  unsigned int v677;
  unsigned int v678;
  unsigned int v679;
  double **v680;
  unsigned int *v681;
  unsigned int *v682;
  uint64_t v683;
  int64_t v684;
  unsigned int v685;
  unsigned int v686;
  uint64_t v687;
  uint64_t v688;
  uint64_t v689;
  unint64_t v690;
  unsigned int *v691;
  unsigned int *v692;
  unsigned int *v693;
  unsigned int *v694;
  unsigned int *v695;
  unint64_t v696;
  uint64_t v697;
  uint64_t v698;
  uint64_t v699;
  uint64_t v700;
  unsigned int *v701;
  unint64_t v702;
  uint64_t v703;
  unsigned int *v704;
  unint64_t v705;
  uint64_t v706;
  unsigned int *v707;
  uint64_t v708;
  uint64_t v709;
  unsigned int v710;
  uint64_t v711;
  unsigned int *v712;
  uint64_t v713;
  uint64_t v714;
  uint64_t v715;
  uint64_t v716;
  unsigned int *v717;
  unsigned int *v718;
  uint64_t v719;
  uint64_t v720;
  unsigned int *v721;
  uint64_t v722;
  uint64_t v723;
  uint64_t v724;
  uint64_t v725;
  uint64_t v726;
  int v727;
  uint64_t v728;
  unsigned int v729;
  unint64_t v730;
  uint64_t v731;
  uint64_t v732;
  uint64_t v733;
  unsigned int *v734;
  uint64_t v735;
  unsigned int v736;
  unsigned int v737;
  void *__p;
  char *__pa;
  char *__pb;
  char *__pc;
  unint64_t __pd;
  unsigned int __pe;
  unsigned int *__pf;
  char *__pg;
  uint64_t v746;
  unsigned int *v747;
  unint64_t v748;
  unsigned int *v749;
  uint64_t v750;
  uint64_t v751;
  uint64_t v752;
  uint64_t v753;
  unsigned int v754;
  unsigned int *v755;
  unsigned int *v756;
  unint64_t v757;
  uint64_t v758;
  uint64_t v759;
  unsigned int v760;
  uint64_t v761;
  uint64_t v762;
  unsigned int v763;
  unsigned int v764;
  uint64_t v765;
  unsigned int v766;
  unsigned int v767;
  uint64_t v768;
  uint64_t v769;
  unint64_t v770;
  uint64_t v771;
  int v772;
  uint64_t v773;
  uint64_t v774;
  unsigned int v775;
  unint64_t v776;
  char *v777;
  unint64_t v778;
  char *v779;
  double v780;
  __n128 *v781;
  char *v782;
  __n128 *v783;
  __n128 *v784;
  unsigned int *v785;
  unsigned int *v786;
  unsigned int *v787;

  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 8))(a1))
    return 1;
  v680 = a2;
  kdebug_trace();
  v681 = (unsigned int *)(a1 + 2400);
  v5 = a1 + 592;
  v6 = *(_QWORD *)(a1 + 1040);
  v7 = 6 * *(_DWORD *)(*(_QWORD *)(a1 + 1056) + 8) + 4 * *(_DWORD *)(v6 + 8);
  v8 = *(unsigned int **)(a1 + 1224);
  v697 = a1;
  v9 = *(unsigned int **)(a1 + 1232);
  if (*(_DWORD *)(a1 + 524))
  {
    if (v8 != v9)
    {
      v10 = v8 + 1;
      v11 = *(unsigned int **)(a1 + 1224);
      if (v8 + 1 != v9)
      {
        v12 = *v8;
        v11 = *(unsigned int **)(a1 + 1224);
        v13 = v8 + 1;
        do
        {
          v15 = *v13++;
          v14 = v15;
          v16 = v12 >= v15;
          if (v12 <= v15)
            v12 = v14;
          if (!v16)
            v11 = v10;
          v10 = v13;
        }
        while (v13 != v9);
      }
      if (*v11 + 4 > v7)
        v7 = *v11 + 4;
    }
    v17 = *(unsigned int **)(a1 + 1248);
    v18 = *(unsigned int **)(a1 + 1256);
    if (v17 != v18)
    {
      v19 = v17 + 1;
      v20 = *(unsigned int **)(a1 + 1248);
      if (v17 + 1 != v18)
      {
        v21 = *v17;
        v20 = *(unsigned int **)(a1 + 1248);
        v22 = v17 + 1;
        do
        {
          v24 = *v22++;
          v23 = v24;
          v25 = v21 >= v24;
          if (v21 <= v24)
            v21 = v23;
          if (!v25)
            v20 = v19;
          v19 = v22;
        }
        while (v22 != v18);
      }
      if (*v20 + 6 > v7)
        v7 = *v20 + 6;
    }
    v26 = 6 * *(_DWORD *)(*(_QWORD *)(a1 + 1048) + 12) + 4 * *(_DWORD *)(v6 + 12);
    if (v8 != v9)
    {
      v27 = v8 + 1;
      if (v8 + 1 != v9)
      {
        v28 = *v8;
        v29 = v8 + 1;
        do
        {
          v31 = *v29++;
          v30 = v31;
          v32 = v28 >= v31;
          if (v28 <= v31)
            v28 = v30;
          if (!v32)
            v8 = v27;
          v27 = v29;
        }
        while (v29 != v9);
      }
      v33 = *v8 + 4;
      if (v33 > v26)
        v26 = v33;
    }
    if (v17 != v18)
    {
      v34 = v17 + 1;
      if (v17 + 1 != v18)
      {
        v35 = *v17;
        v36 = v17 + 1;
        do
        {
          v38 = *v36++;
          v37 = v38;
          v39 = v35 >= v38;
          if (v35 <= v38)
            v35 = v37;
          if (!v39)
            v17 = v34;
          v34 = v36;
        }
        while (v36 != v18);
      }
      if (*v17 + 6 > v26)
        v26 = *v17 + 6;
    }
    v685 = v7;
    v40 = v26;
    v785 = 0;
    v786 = 0;
    v787 = 0;
    v683 = v26;
    if (v26)
    {
      v41 = 4 * v26;
      v785 = (unsigned int *)operator new(v41);
      v787 = &v785[v40];
      bzero(v785, v41);
      v786 = v787;
    }
    v94 = v697;
    v95 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v697 + 704) + 40))(v697 + 704);
    v96 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v94 + 928) + 40))(v94 + 928);
    v97 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
    v98 = 0;
    v99 = (36 * v96)
        + (unint64_t)(24 * v95)
        + (16 * v97)
        + (unint64_t)(24 * (*(unsigned int (**)(uint64_t))(*(_QWORD *)(v94 + 816) + 40))(v94 + 816));
    v782 = 0;
    v784 = 0;
    v101 = *(unsigned __int8 *)(v94 + 2428) * *(unsigned __int8 *)(v94 + 2428);
    if (v99 >= v101)
    {
      v102 = v99 / v101;
      v98 = (__n128 *)operator new(32 * (v99 / v101));
      v782 = (char *)v98;
      v784 = &v98[2 * v102];
    }
    v103 = *(unsigned int *)(v697 + 716);
    if ((_DWORD)v103)
    {
      v104 = 0;
      v698 = *(_QWORD *)(v697 + 720);
      v105 = (uint64_t)v98;
      v775 = v7;
LABEL_105:
      v106 = *(_QWORD *)(v697 + 792) + 24 * v104;
      v107 = *(unsigned int **)v106;
      v692 = *(unsigned int **)(v106 + 8);
      if (*(unsigned int **)v106 == v692)
        goto LABEL_104;
      v687 = v104;
      v108 = (void *)*(unsigned int *)(*(_QWORD *)(v697 + 1224) + 4 * v104);
      v761 = ((_DWORD)v108 + 1);
      v730 = v108 * (unint64_t)v775;
      v753 = ((_DWORD)v108 + 2);
      __p = v108;
      v746 = ((_DWORD)v108 + 3);
      v109 = (__n128 *)v105;
LABEL_108:
      v110 = *(_DWORD *)(*(_QWORD *)(v697 + 1248) + 4 * *v107);
      v704 = v107;
      v111 = v698 + 8 * *((_QWORD *)v107 + 1);
      v112 = v785;
      v766 = v110;
      v113 = 0;
      if (v108 < v110)
      {
        while (1)
        {
          v114 = v110 + v113;
          v115 = (unint64_t)v108 + v775 * (unint64_t)v114;
          if (v98 >= v784)
            break;
          v98->n128_u64[0] = v115;
          v98->n128_u32[2] = v108;
          v98[1].n128_u64[0] = v111;
          v98[1].n128_u32[2] = 1;
          v98 += 2;
LABEL_111:
          ++v112[v114];
          ++v113;
          v111 += 8;
          if (v113 == 6)
          {
            v135 = 0;
            v136 = v698 + 8 * *((_QWORD *)v704 + 1) + 48;
            v137 = v785;
            while (1)
            {
              v138 = v110 + v135;
              v139 = v761 + v775 * (unint64_t)v138;
              if (v98 >= v784)
                break;
              v98->n128_u64[0] = v139;
              v98->n128_u32[2] = v761;
              v98[1].n128_u64[0] = v136;
              v98[1].n128_u32[2] = 1;
              v98 += 2;
LABEL_153:
              ++v137[v138];
              ++v135;
              v136 += 8;
              if (v135 == 6)
              {
                v161 = 0;
                v162 = v698 + 8 * *((_QWORD *)v704 + 1) + 96;
                v163 = v785;
                while (1)
                {
                  v164 = v110 + v161;
                  v165 = v753 + v775 * (unint64_t)v164;
                  if (v98 >= v784)
                    break;
                  v98->n128_u64[0] = v165;
                  v98->n128_u32[2] = v753;
                  v98[1].n128_u64[0] = v162;
                  v98[1].n128_u32[2] = 1;
                  v98 += 2;
LABEL_197:
                  ++v163[v164];
                  ++v161;
                  v162 += 8;
                  if (v161 == 6)
                  {
                    v187 = 0;
                    v188 = v698 + 8 * *((_QWORD *)v704 + 1) + 144;
                    v189 = v785;
                    v190 = v98;
                    while (1)
                    {
                      v191 = v110 + v187;
                      v192 = v746 + v775 * (unint64_t)v191;
                      if (v190 < v784)
                      {
                        v190->n128_u64[0] = v192;
                        v190->n128_u32[2] = v746;
                        v190[1].n128_u64[0] = v188;
                        v98 = v190 + 2;
                        v190[1].n128_u32[2] = 1;
                      }
                      else
                      {
                        v193 = ((char *)v190 - (char *)v109) >> 5;
                        v194 = v193 + 1;
                        if ((unint64_t)(v193 + 1) >> 59)
                          goto LABEL_847;
                        v195 = (char *)v784 - (char *)v109;
                        if (v784 - v109 > v194)
                          v194 = v195 >> 4;
                        if ((unint64_t)v195 >= 0x7FFFFFFFFFFFFFE0)
                          v196 = 0x7FFFFFFFFFFFFFFLL;
                        else
                          v196 = v194;
                        if (v196)
                        {
                          if (v196 >> 59)
                            goto LABEL_954;
                          v197 = (char *)operator new(32 * v196);
                        }
                        else
                        {
                          v197 = 0;
                        }
                        v105 = (uint64_t)&v197[32 * v193];
                        *(_QWORD *)v105 = v192;
                        *(_DWORD *)(v105 + 8) = v746;
                        v198 = (__n128 *)&v197[32 * v196];
                        *(_QWORD *)(v105 + 16) = v188;
                        *(_DWORD *)(v105 + 24) = 1;
                        v98 = (__n128 *)(v105 + 32);
                        if (v190 == v109)
                        {
                          v782 = &v197[32 * v193];
                          v784 = (__n128 *)&v197[32 * v196];
                          v110 = v766;
LABEL_259:
                          operator delete(v109);
                          v109 = (__n128 *)v105;
                          goto LABEL_241;
                        }
                        v110 = v766;
                        do
                        {
                          v100 = v190[-2];
                          v199 = v190[-1];
                          *(__n128 *)(v105 - 32) = v100;
                          *(__n128 *)(v105 - 16) = v199;
                          v105 -= 32;
                          v190 -= 2;
                        }
                        while (v190 != v109);
                        v782 = (char *)v105;
                        v784 = v198;
                        if (v109)
                          goto LABEL_259;
                        v109 = (__n128 *)v105;
                      }
LABEL_241:
                      ++v189[v191];
                      ++v187;
                      v188 += 8;
                      v190 = v98;
                      if (v187 == 6)
                        goto LABEL_107;
                    }
                  }
                }
                v166 = ((char *)v98 - (char *)v109) >> 5;
                v167 = v166 + 1;
                if ((unint64_t)(v166 + 1) >> 59)
                  goto LABEL_847;
                v168 = (char *)v784 - (char *)v109;
                if (v784 - v109 > v167)
                  v167 = v168 >> 4;
                if ((unint64_t)v168 >= 0x7FFFFFFFFFFFFFE0)
                  v169 = 0x7FFFFFFFFFFFFFFLL;
                else
                  v169 = v167;
                if (v169)
                {
                  if (v169 >> 59)
                    goto LABEL_954;
                  v170 = (char *)operator new(32 * v169);
                }
                else
                {
                  v170 = 0;
                }
                v105 = (uint64_t)&v170[32 * v166];
                *(_QWORD *)v105 = v165;
                *(_DWORD *)(v105 + 8) = v753;
                v171 = (__n128 *)&v170[32 * v169];
                *(_QWORD *)(v105 + 16) = v162;
                *(_DWORD *)(v105 + 24) = 1;
                v172 = (__n128 *)(v105 + 32);
                if (v98 == v109)
                {
                  v782 = &v170[32 * v166];
                  v784 = (__n128 *)&v170[32 * v169];
                  v110 = v766;
                }
                else
                {
                  v110 = v766;
                  do
                  {
                    v100 = v98[-2];
                    v173 = v98[-1];
                    *(__n128 *)(v105 - 32) = v100;
                    *(__n128 *)(v105 - 16) = v173;
                    v105 -= 32;
                    v98 -= 2;
                  }
                  while (v98 != v109);
                  v782 = (char *)v105;
                  v784 = v171;
                  if (!v109)
                    goto LABEL_216;
                }
                operator delete(v109);
LABEL_216:
                v109 = (__n128 *)v105;
                v98 = v172;
                goto LABEL_197;
              }
            }
            v140 = ((char *)v98 - (char *)v109) >> 5;
            v141 = v140 + 1;
            if ((unint64_t)(v140 + 1) >> 59)
              goto LABEL_847;
            v142 = (char *)v784 - (char *)v109;
            if (v784 - v109 > v141)
              v141 = v142 >> 4;
            if ((unint64_t)v142 >= 0x7FFFFFFFFFFFFFE0)
              v143 = 0x7FFFFFFFFFFFFFFLL;
            else
              v143 = v141;
            if (v143)
            {
              if (v143 >> 59)
                goto LABEL_954;
              v144 = (char *)operator new(32 * v143);
            }
            else
            {
              v144 = 0;
            }
            v105 = (uint64_t)&v144[32 * v140];
            *(_QWORD *)v105 = v139;
            *(_DWORD *)(v105 + 8) = v761;
            v145 = (__n128 *)&v144[32 * v143];
            *(_QWORD *)(v105 + 16) = v136;
            *(_DWORD *)(v105 + 24) = 1;
            v146 = (__n128 *)(v105 + 32);
            if (v98 == v109)
            {
              v782 = &v144[32 * v140];
              v784 = (__n128 *)&v144[32 * v143];
              v110 = v766;
            }
            else
            {
              v110 = v766;
              do
              {
                v100 = v98[-2];
                v147 = v98[-1];
                *(__n128 *)(v105 - 32) = v100;
                *(__n128 *)(v105 - 16) = v147;
                v105 -= 32;
                v98 -= 2;
              }
              while (v98 != v109);
              v782 = (char *)v105;
              v784 = v145;
              if (!v109)
                goto LABEL_172;
            }
            operator delete(v109);
LABEL_172:
            v109 = (__n128 *)v105;
            v98 = v146;
            goto LABEL_153;
          }
        }
        v116 = ((char *)v98 - (char *)v109) >> 5;
        v117 = v116 + 1;
        if ((unint64_t)(v116 + 1) >> 59)
          goto LABEL_847;
        v118 = (char *)v784 - (char *)v109;
        if (v784 - v109 > v117)
          v117 = v118 >> 4;
        if ((unint64_t)v118 >= 0x7FFFFFFFFFFFFFE0)
          v119 = 0x7FFFFFFFFFFFFFFLL;
        else
          v119 = v117;
        if (v119)
        {
          if (v119 >> 59)
            goto LABEL_954;
          v120 = (char *)operator new(32 * v119);
          v110 = v766;
        }
        else
        {
          v120 = 0;
        }
        v121 = (__n128 *)&v120[32 * v116];
        v121->n128_u64[0] = v115;
        v121->n128_u32[2] = __p;
        v121[1].n128_u64[0] = v111;
        v121[1].n128_u32[2] = 1;
        if (v98 == v109)
        {
          v105 = (uint64_t)&v120[32 * v116];
          v98 = v121 + 2;
          v782 = (char *)v121;
          v784 = (__n128 *)&v120[32 * v119];
          if (!v109)
            goto LABEL_128;
        }
        else
        {
          v122 = (__n128 *)&v120[32 * v116];
          do
          {
            v100 = v98[-2];
            v123 = v98[-1];
            v105 = (uint64_t)&v122[-2];
            v122[-2] = v100;
            v122[-1] = v123;
            v98 -= 2;
            v122 -= 2;
          }
          while (v98 != v109);
          v98 = v121 + 2;
          v782 = (char *)v105;
          v784 = (__n128 *)&v120[32 * v119];
          if (!v109)
            goto LABEL_128;
        }
        operator delete(v109);
LABEL_128:
        v109 = (__n128 *)v105;
        v108 = __p;
        goto LABEL_111;
      }
      while (1)
      {
        v125 = v110 + v113;
        v126 = v730 + v125;
        if (v98 < v784)
        {
          v98->n128_u64[0] = v126;
          v98->n128_u32[2] = v125;
          v98[1].n128_u64[0] = v111;
          v98[1].n128_u32[2] = 6;
          v98 += 2;
          v124 = __p;
        }
        else
        {
          v127 = ((char *)v98 - (char *)v109) >> 5;
          v128 = v127 + 1;
          if ((unint64_t)(v127 + 1) >> 59)
LABEL_847:
            sub_20E867F44();
          v129 = (char *)v784 - (char *)v109;
          if (v784 - v109 > v128)
            v128 = v129 >> 4;
          if ((unint64_t)v129 >= 0x7FFFFFFFFFFFFFE0)
            v130 = 0x7FFFFFFFFFFFFFFLL;
          else
            v130 = v128;
          if (v130)
          {
            if (v130 >> 59)
LABEL_954:
              sub_20E877A38();
            v131 = (char *)operator new(32 * v130);
            v110 = v766;
          }
          else
          {
            v131 = 0;
          }
          v132 = (__n128 *)&v131[32 * v127];
          v132->n128_u64[0] = v126;
          v132->n128_u32[2] = v125;
          v132[1].n128_u64[0] = v111;
          v132[1].n128_u32[2] = 6;
          if (v98 == v109)
          {
            v105 = (uint64_t)&v131[32 * v127];
            v124 = __p;
            v98 = v132 + 2;
            v782 = (char *)v132;
            v784 = (__n128 *)&v131[32 * v130];
            if (!v109)
              goto LABEL_150;
          }
          else
          {
            v133 = (__n128 *)&v131[32 * v127];
            v124 = __p;
            do
            {
              v100 = v98[-2];
              v134 = v98[-1];
              v105 = (uint64_t)&v133[-2];
              v133[-2] = v100;
              v133[-1] = v134;
              v98 -= 2;
              v133 -= 2;
            }
            while (v98 != v109);
            v98 = v132 + 2;
            v782 = (char *)v105;
            v784 = (__n128 *)&v131[32 * v130];
            if (!v109)
            {
LABEL_150:
              v109 = (__n128 *)v105;
              goto LABEL_132;
            }
          }
          operator delete(v109);
          v109 = (__n128 *)v105;
        }
LABEL_132:
        ++v112[(_QWORD)v124];
        ++v113;
        v111 += 8;
        if (v113 == 6)
        {
          v148 = 0;
          v149 = v698 + 8 * *((_QWORD *)v704 + 1) + 48;
          v150 = v785;
          while (1)
          {
            v151 = v110 + v148;
            v152 = v775 * (unint64_t)v761 + v151;
            if (v98 >= v784)
              break;
            v98->n128_u64[0] = v152;
            v98->n128_u32[2] = v151;
            v98[1].n128_u64[0] = v149;
            v98[1].n128_u32[2] = 6;
            v98 += 2;
LABEL_175:
            ++v150[v761];
            ++v148;
            v149 += 8;
            if (v148 == 6)
            {
              v174 = 0;
              v175 = v698 + 8 * *((_QWORD *)v704 + 1) + 96;
              v176 = v785;
              while (1)
              {
                v177 = v110 + v174;
                v178 = v775 * (unint64_t)v753 + v177;
                if (v98 >= v784)
                  break;
                v98->n128_u64[0] = v178;
                v98->n128_u32[2] = v177;
                v98[1].n128_u64[0] = v175;
                v98[1].n128_u32[2] = 6;
                v98 += 2;
LABEL_219:
                ++v176[v753];
                ++v174;
                v175 += 8;
                if (v174 == 6)
                {
                  v200 = 0;
                  v201 = v698 + 8 * *((_QWORD *)v704 + 1) + 144;
                  v202 = v785;
                  v203 = v98;
                  while (1)
                  {
                    v204 = v110 + v200;
                    v205 = v775 * (unint64_t)v746 + v204;
                    if (v203 < v784)
                    {
                      v203->n128_u64[0] = v205;
                      v203->n128_u32[2] = v204;
                      v203[1].n128_u64[0] = v201;
                      v98 = v203 + 2;
                      v203[1].n128_u32[2] = 6;
                    }
                    else
                    {
                      v206 = ((char *)v203 - (char *)v109) >> 5;
                      v207 = v206 + 1;
                      if ((unint64_t)(v206 + 1) >> 59)
                        goto LABEL_847;
                      v208 = (char *)v784 - (char *)v109;
                      if (v784 - v109 > v207)
                        v207 = v208 >> 4;
                      if ((unint64_t)v208 >= 0x7FFFFFFFFFFFFFE0)
                        v209 = 0x7FFFFFFFFFFFFFFLL;
                      else
                        v209 = v207;
                      if (v209)
                      {
                        if (v209 >> 59)
                          goto LABEL_954;
                        v210 = (char *)operator new(32 * v209);
                      }
                      else
                      {
                        v210 = 0;
                      }
                      v105 = (uint64_t)&v210[32 * v206];
                      *(_QWORD *)v105 = v205;
                      *(_DWORD *)(v105 + 8) = v204;
                      v211 = (__n128 *)&v210[32 * v209];
                      *(_QWORD *)(v105 + 16) = v201;
                      *(_DWORD *)(v105 + 24) = 6;
                      v98 = (__n128 *)(v105 + 32);
                      if (v203 == v109)
                      {
                        v782 = &v210[32 * v206];
                        v784 = (__n128 *)&v210[32 * v209];
                        v110 = v766;
LABEL_280:
                        operator delete(v109);
                        v109 = (__n128 *)v105;
                        goto LABEL_262;
                      }
                      v110 = v766;
                      do
                      {
                        v100 = v203[-2];
                        v212 = v203[-1];
                        *(__n128 *)(v105 - 32) = v100;
                        *(__n128 *)(v105 - 16) = v212;
                        v105 -= 32;
                        v203 -= 2;
                      }
                      while (v203 != v109);
                      v782 = (char *)v105;
                      v784 = v211;
                      if (v109)
                        goto LABEL_280;
                      v109 = (__n128 *)v105;
                    }
LABEL_262:
                    ++v202[v746];
                    ++v200;
                    v201 += 8;
                    v203 = v98;
                    if (v200 == 6)
                    {
LABEL_107:
                      v107 = v704 + 4;
                      v108 = __p;
                      if (v704 + 4 != v692)
                        goto LABEL_108;
                      v103 = *(unsigned int *)(v697 + 716);
                      v104 = v687;
LABEL_104:
                      if (++v104 >= v103)
                        goto LABEL_282;
                      goto LABEL_105;
                    }
                  }
                }
              }
              v179 = ((char *)v98 - (char *)v109) >> 5;
              v180 = v179 + 1;
              if ((unint64_t)(v179 + 1) >> 59)
                goto LABEL_847;
              v181 = (char *)v784 - (char *)v109;
              if (v784 - v109 > v180)
                v180 = v181 >> 4;
              if ((unint64_t)v181 >= 0x7FFFFFFFFFFFFFE0)
                v182 = 0x7FFFFFFFFFFFFFFLL;
              else
                v182 = v180;
              if (v182)
              {
                if (v182 >> 59)
                  goto LABEL_954;
                v183 = (char *)operator new(32 * v182);
              }
              else
              {
                v183 = 0;
              }
              v105 = (uint64_t)&v183[32 * v179];
              *(_QWORD *)v105 = v178;
              *(_DWORD *)(v105 + 8) = v177;
              v184 = (__n128 *)&v183[32 * v182];
              *(_QWORD *)(v105 + 16) = v175;
              *(_DWORD *)(v105 + 24) = 6;
              v185 = (__n128 *)(v105 + 32);
              if (v98 == v109)
              {
                v782 = &v183[32 * v179];
                v784 = (__n128 *)&v183[32 * v182];
                v110 = v766;
              }
              else
              {
                v110 = v766;
                do
                {
                  v100 = v98[-2];
                  v186 = v98[-1];
                  *(__n128 *)(v105 - 32) = v100;
                  *(__n128 *)(v105 - 16) = v186;
                  v105 -= 32;
                  v98 -= 2;
                }
                while (v98 != v109);
                v782 = (char *)v105;
                v784 = v184;
                if (!v109)
                  goto LABEL_238;
              }
              operator delete(v109);
LABEL_238:
              v109 = (__n128 *)v105;
              v98 = v185;
              goto LABEL_219;
            }
          }
          v153 = ((char *)v98 - (char *)v109) >> 5;
          v154 = v153 + 1;
          if ((unint64_t)(v153 + 1) >> 59)
            goto LABEL_847;
          v155 = (char *)v784 - (char *)v109;
          if (v784 - v109 > v154)
            v154 = v155 >> 4;
          if ((unint64_t)v155 >= 0x7FFFFFFFFFFFFFE0)
            v156 = 0x7FFFFFFFFFFFFFFLL;
          else
            v156 = v154;
          if (v156)
          {
            if (v156 >> 59)
              goto LABEL_954;
            v157 = (char *)operator new(32 * v156);
          }
          else
          {
            v157 = 0;
          }
          v105 = (uint64_t)&v157[32 * v153];
          *(_QWORD *)v105 = v152;
          *(_DWORD *)(v105 + 8) = v151;
          v158 = (__n128 *)&v157[32 * v156];
          *(_QWORD *)(v105 + 16) = v149;
          *(_DWORD *)(v105 + 24) = 6;
          v159 = (__n128 *)(v105 + 32);
          if (v98 == v109)
          {
            v782 = &v157[32 * v153];
            v784 = (__n128 *)&v157[32 * v156];
            v110 = v766;
          }
          else
          {
            v110 = v766;
            do
            {
              v100 = v98[-2];
              v160 = v98[-1];
              *(__n128 *)(v105 - 32) = v100;
              *(__n128 *)(v105 - 16) = v160;
              v105 -= 32;
              v98 -= 2;
            }
            while (v98 != v109);
            v782 = (char *)v105;
            v784 = v158;
            if (!v109)
              goto LABEL_194;
          }
          operator delete(v109);
LABEL_194:
          v109 = (__n128 *)v105;
          v98 = v159;
          goto LABEL_175;
        }
      }
    }
    v105 = (uint64_t)v98;
LABEL_282:
    v213 = *(unsigned int *)(v697 + 940);
    if ((_DWORD)v213)
    {
      v214 = 0;
      __pa = *(char **)(v697 + 944);
LABEL_286:
      v215 = *(_QWORD *)(v697 + 1016) + 24 * v214;
      v216 = *(unsigned int **)v215;
      v721 = *(unsigned int **)(v215 + 8);
      if (*(unsigned int **)v215 == v721)
        goto LABEL_285;
      v714 = v214;
      v754 = *(_DWORD *)(*(_QWORD *)(v697 + 1248) + 4 * v214);
      v217 = (__n128 *)v105;
LABEL_289:
      v218 = *(_DWORD *)(*(_QWORD *)(v697 + 1248) + 4 * *v216);
      v747 = v216;
      v767 = v218;
      v219 = 0;
      if (v754 >= v218)
      {
LABEL_315:
        v234 = 0;
        v235 = v754 + v219;
        v236 = v685 * (unint64_t)v235;
        v731 = v219;
        v237 = &__pa[48 * v219 + 8 * *((_QWORD *)v216 + 1)];
        v238 = v785;
        while (1)
        {
          v239 = v218 + v234;
          v240 = v236 + v239;
          if (v98 >= v784)
            break;
          v98->n128_u64[0] = v240;
          v98->n128_u32[2] = v239;
          v98[1].n128_u64[0] = (unint64_t)v237;
          v98[1].n128_u32[2] = 6;
          v98 += 2;
LABEL_317:
          ++v238[v235];
          ++v234;
          v237 += 8;
          if (v234 == 6)
          {
            v219 = v731 + 1;
            v216 = v747;
            if (v731 != 5)
              goto LABEL_315;
LABEL_288:
            v216 += 4;
            if (v216 != v721)
              goto LABEL_289;
            v213 = *(unsigned int *)(v697 + 940);
            v214 = v714;
LABEL_285:
            if (++v214 >= v213)
              goto LABEL_337;
            goto LABEL_286;
          }
        }
        v241 = ((char *)v98 - (char *)v217) >> 5;
        v242 = v241 + 1;
        if ((unint64_t)(v241 + 1) >> 59)
          goto LABEL_847;
        v243 = (char *)v784 - (char *)v217;
        if (v784 - v217 > v242)
          v242 = v243 >> 4;
        if ((unint64_t)v243 >= 0x7FFFFFFFFFFFFFE0)
          v244 = 0x7FFFFFFFFFFFFFFLL;
        else
          v244 = v242;
        if (v244)
        {
          if (v244 >> 59)
            goto LABEL_954;
          v245 = (char *)operator new(32 * v244);
        }
        else
        {
          v245 = 0;
        }
        v246 = (__n128 *)&v245[32 * v241];
        v246->n128_u64[0] = v240;
        v246->n128_u32[2] = v239;
        v246[1].n128_u64[0] = (unint64_t)v237;
        v246[1].n128_u32[2] = 6;
        if (v98 == v217)
        {
          v105 = (uint64_t)&v245[32 * v241];
          v98 = v246 + 2;
          v782 = (char *)v246;
          v784 = (__n128 *)&v245[32 * v244];
          if (!v217)
            goto LABEL_334;
        }
        else
        {
          v247 = (__n128 *)&v245[32 * v241];
          do
          {
            v100 = v98[-2];
            v248 = v98[-1];
            v105 = (uint64_t)&v247[-2];
            v247[-2] = v100;
            v247[-1] = v248;
            v98 -= 2;
            v247 -= 2;
          }
          while (v98 != v217);
          v98 = v246 + 2;
          v782 = (char *)v105;
          v784 = (__n128 *)&v245[32 * v244];
          if (!v217)
            goto LABEL_334;
        }
        operator delete(v217);
LABEL_334:
        v217 = (__n128 *)v105;
        v218 = v767;
        v236 = v685 * (unint64_t)v235;
        goto LABEL_317;
      }
LABEL_292:
      v220 = 0;
      v221 = v754 + v219;
      v762 = v219;
      v222 = &__pa[48 * v219 + 8 * *((_QWORD *)v216 + 1)];
      v223 = v785;
      while (1)
      {
        v224 = v218 + v220;
        v225 = v221 + v685 * (unint64_t)v224;
        if (v98 >= v784)
          break;
        v98->n128_u64[0] = v225;
        v98->n128_u32[2] = v221;
        v98[1].n128_u64[0] = (unint64_t)v222;
        v98[1].n128_u32[2] = 1;
        v98 += 2;
LABEL_294:
        ++v223[v224];
        ++v220;
        v222 += 8;
        if (v220 == 6)
        {
          v219 = v762 + 1;
          v216 = v747;
          if (v762 == 5)
            goto LABEL_288;
          goto LABEL_292;
        }
      }
      v226 = ((char *)v98 - (char *)v217) >> 5;
      v227 = v226 + 1;
      if ((unint64_t)(v226 + 1) >> 59)
        goto LABEL_847;
      v228 = (char *)v784 - (char *)v217;
      if (v784 - v217 > v227)
        v227 = v228 >> 4;
      if ((unint64_t)v228 >= 0x7FFFFFFFFFFFFFE0)
        v229 = 0x7FFFFFFFFFFFFFFLL;
      else
        v229 = v227;
      if (v229)
      {
        if (v229 >> 59)
          goto LABEL_954;
        v230 = (char *)operator new(32 * v229);
      }
      else
      {
        v230 = 0;
      }
      v231 = (__n128 *)&v230[32 * v226];
      v231->n128_u64[0] = v225;
      v231->n128_u32[2] = v221;
      v231[1].n128_u64[0] = (unint64_t)v222;
      v231[1].n128_u32[2] = 1;
      if (v98 == v217)
      {
        v105 = (uint64_t)&v230[32 * v226];
        v98 = v231 + 2;
        v782 = (char *)v231;
        v784 = (__n128 *)&v230[32 * v229];
        if (!v217)
          goto LABEL_311;
      }
      else
      {
        v232 = (__n128 *)&v230[32 * v226];
        do
        {
          v100 = v98[-2];
          v233 = v98[-1];
          v105 = (uint64_t)&v232[-2];
          v232[-2] = v100;
          v232[-1] = v233;
          v98 -= 2;
          v232 -= 2;
        }
        while (v98 != v217);
        v98 = v231 + 2;
        v782 = (char *)v105;
        v784 = (__n128 *)&v230[32 * v229];
        if (!v217)
          goto LABEL_311;
      }
      operator delete(v217);
LABEL_311:
      v217 = (__n128 *)v105;
      v218 = v767;
      goto LABEL_294;
    }
LABEL_337:
    v249 = *(unsigned int *)(v697 + 604);
    if ((_DWORD)v249)
    {
      v250 = 0;
      __pb = *(char **)(v697 + 608);
      while (1)
      {
        v251 = *(_QWORD *)(v697 + 680) + 24 * v250;
        v252 = *(unsigned int **)v251;
        v693 = *(unsigned int **)(v251 + 8);
        if (*(unsigned int **)v251 != v693)
          break;
LABEL_340:
        if (++v250 >= v249)
          goto LABEL_503;
      }
      v688 = v250;
      v763 = *(_DWORD *)(*(_QWORD *)(v697 + 1224) + 4 * v250);
      v253 = (__n128 *)v105;
LABEL_344:
      v254 = *(_DWORD *)(*(_QWORD *)(v697 + 1224) + 4 * *v252);
      v755 = v252;
      v768 = v254;
      v255 = 0;
      if (v763 < v254)
      {
        v776 = v254 * (unint64_t)v685;
        v722 = v254 + 1;
        v708 = v254 + 2;
        v256 = v784;
        v257 = v785;
        v699 = v254 + 3;
        while (1)
        {
          v258 = v763 + v255;
          v259 = &__pb[32 * v255 + 8 * *((_QWORD *)v252 + 1)];
          v260 = v776 + v258;
          if (v98 < v256)
          {
            v98->n128_u64[0] = v260;
            v98->n128_u32[2] = v258;
            v98[1].n128_u64[0] = (unint64_t)v259;
            v98[1].n128_u32[2] = 1;
            v261 = v98 + 2;
            v256 = v784;
            goto LABEL_366;
          }
          v262 = ((char *)v98 - (char *)v253) >> 5;
          v263 = v262 + 1;
          if ((unint64_t)(v262 + 1) >> 59)
            goto LABEL_847;
          if (v256 - v253 > v263)
            v263 = v256 - v253;
          if ((unint64_t)((char *)v256 - (char *)v253) >= 0x7FFFFFFFFFFFFFE0)
            v264 = 0x7FFFFFFFFFFFFFFLL;
          else
            v264 = v263;
          if (v264)
          {
            if (v264 >> 59)
              goto LABEL_954;
            v265 = (char *)operator new(32 * v264);
          }
          else
          {
            v265 = 0;
          }
          v266 = (__n128 *)&v265[32 * v262];
          v266->n128_u64[0] = v260;
          v266->n128_u32[2] = v258;
          v266[1].n128_u64[0] = (unint64_t)v259;
          v266[1].n128_u32[2] = 1;
          if (v98 == v253)
          {
            v105 = (uint64_t)&v265[32 * v262];
            v256 = (__n128 *)&v265[32 * v264];
            v261 = v266 + 2;
            v782 = (char *)v266;
            v784 = v256;
            if (!v253)
              goto LABEL_365;
          }
          else
          {
            v267 = (__n128 *)&v265[32 * v262];
            do
            {
              v100 = v98[-2];
              v268 = v98[-1];
              v105 = (uint64_t)&v267[-2];
              v267[-2] = v100;
              v267[-1] = v268;
              v98 -= 2;
              v267 -= 2;
            }
            while (v98 != v253);
            v256 = (__n128 *)&v265[32 * v264];
            v261 = v266 + 2;
            v782 = (char *)v105;
            v784 = v256;
            if (!v253)
              goto LABEL_365;
          }
          operator delete(v253);
LABEL_365:
          v253 = (__n128 *)v105;
LABEL_366:
          ++v257[v768];
          v269 = v259 + 8;
          v270 = v685 * (unint64_t)v722 + v258;
          if (v261 < v256)
          {
            v261->n128_u64[0] = v270;
            v261->n128_u32[2] = v258;
            v261[1].n128_u64[0] = (unint64_t)v269;
            v271 = v261 + 2;
            v261[1].n128_u32[2] = 1;
            goto LABEL_387;
          }
          v272 = ((char *)v261 - (char *)v253) >> 5;
          v273 = v272 + 1;
          if ((unint64_t)(v272 + 1) >> 59)
            goto LABEL_847;
          if (v256 - v253 > v273)
            v273 = v256 - v253;
          if ((unint64_t)((char *)v256 - (char *)v253) >= 0x7FFFFFFFFFFFFFE0)
            v274 = 0x7FFFFFFFFFFFFFFLL;
          else
            v274 = v273;
          if (v274)
          {
            if (v274 >> 59)
              goto LABEL_954;
            v275 = (char *)operator new(32 * v274);
          }
          else
          {
            v275 = 0;
          }
          v105 = (uint64_t)&v275[32 * v272];
          *(_QWORD *)v105 = v270;
          *(_DWORD *)(v105 + 8) = v258;
          v256 = (__n128 *)&v275[32 * v274];
          *(_QWORD *)(v105 + 16) = v269;
          *(_DWORD *)(v105 + 24) = 1;
          v271 = (__n128 *)(v105 + 32);
          if (v261 == v253)
          {
            v782 = (char *)v105;
            v784 = v256;
          }
          else
          {
            do
            {
              v100 = v261[-2];
              v276 = v261[-1];
              *(__n128 *)(v105 - 32) = v100;
              *(__n128 *)(v105 - 16) = v276;
              v105 -= 32;
              v261 -= 2;
            }
            while (v261 != v253);
            v782 = (char *)v105;
            v784 = v256;
            if (!v253)
              goto LABEL_386;
          }
          operator delete(v253);
LABEL_386:
          v253 = (__n128 *)v105;
LABEL_387:
          ++v257[v722];
          v277 = v259 + 16;
          v278 = v685 * (unint64_t)v708 + v258;
          if (v271 < v256)
          {
            v271->n128_u64[0] = v278;
            v271->n128_u32[2] = v258;
            v271[1].n128_u64[0] = (unint64_t)v277;
            v279 = v271 + 2;
            v271[1].n128_u32[2] = 1;
            goto LABEL_406;
          }
          v280 = ((char *)v271 - (char *)v253) >> 5;
          v281 = v280 + 1;
          if ((unint64_t)(v280 + 1) >> 59)
            goto LABEL_847;
          if (v256 - v253 > v281)
            v281 = v256 - v253;
          if ((unint64_t)((char *)v256 - (char *)v253) >= 0x7FFFFFFFFFFFFFE0)
            v282 = 0x7FFFFFFFFFFFFFFLL;
          else
            v282 = v281;
          if (v282)
          {
            if (v282 >> 59)
              goto LABEL_954;
            v283 = (char *)operator new(32 * v282);
          }
          else
          {
            v283 = 0;
          }
          v105 = (uint64_t)&v283[32 * v280];
          *(_QWORD *)v105 = v278;
          *(_DWORD *)(v105 + 8) = v258;
          v256 = (__n128 *)&v283[32 * v282];
          *(_QWORD *)(v105 + 16) = v277;
          *(_DWORD *)(v105 + 24) = 1;
          v279 = (__n128 *)(v105 + 32);
          if (v271 == v253)
          {
            v782 = (char *)v105;
            v784 = v256;
          }
          else
          {
            do
            {
              v100 = v271[-2];
              v284 = v271[-1];
              *(__n128 *)(v105 - 32) = v100;
              *(__n128 *)(v105 - 16) = v284;
              v105 -= 32;
              v271 -= 2;
            }
            while (v271 != v253);
            v782 = (char *)v105;
            v784 = v256;
            if (!v253)
              goto LABEL_405;
          }
          operator delete(v253);
LABEL_405:
          v253 = (__n128 *)v105;
LABEL_406:
          ++v257[v708];
          v285 = v259 + 24;
          v286 = v685 * v699 + v258;
          if (v279 < v256)
          {
            v279->n128_u64[0] = v286;
            v279->n128_u32[2] = v258;
            v279[1].n128_u64[0] = (unint64_t)v285;
            v98 = v279 + 2;
            v279[1].n128_u32[2] = 1;
            v252 = v755;
          }
          else
          {
            v287 = ((char *)v279 - (char *)v253) >> 5;
            v288 = v287 + 1;
            if ((unint64_t)(v287 + 1) >> 59)
              goto LABEL_847;
            if (v256 - v253 > v288)
              v288 = v256 - v253;
            if ((unint64_t)((char *)v256 - (char *)v253) >= 0x7FFFFFFFFFFFFFE0)
              v289 = 0x7FFFFFFFFFFFFFFLL;
            else
              v289 = v288;
            if (v289)
            {
              if (v289 >> 59)
                goto LABEL_954;
              v290 = (char *)operator new(32 * v289);
            }
            else
            {
              v290 = 0;
            }
            v105 = (uint64_t)&v290[32 * v287];
            *(_QWORD *)v105 = v286;
            *(_DWORD *)(v105 + 8) = v258;
            v256 = (__n128 *)&v290[32 * v289];
            *(_QWORD *)(v105 + 16) = v285;
            *(_DWORD *)(v105 + 24) = 1;
            v98 = (__n128 *)(v105 + 32);
            if (v279 == v253)
            {
              v782 = (char *)v105;
              v784 = v256;
              v252 = v755;
LABEL_423:
              operator delete(v253);
              v253 = (__n128 *)v105;
              goto LABEL_347;
            }
            v252 = v755;
            do
            {
              v100 = v279[-2];
              v291 = v279[-1];
              *(__n128 *)(v105 - 32) = v100;
              *(__n128 *)(v105 - 16) = v291;
              v105 -= 32;
              v279 -= 2;
            }
            while (v279 != v253);
            v782 = (char *)v105;
            v784 = v256;
            if (v253)
              goto LABEL_423;
            v253 = (__n128 *)v105;
          }
LABEL_347:
          ++v257[v699];
          if (++v255 == 4)
            goto LABEL_343;
        }
      }
      v723 = v254 + 2;
      v732 = v254 + 1;
      v715 = v254 + 3;
      v292 = v784;
      v293 = v785;
      while (1)
      {
        v294 = v763 + v255;
        v295 = &__pb[32 * v255 + 8 * *((_QWORD *)v252 + 1)];
        v296 = v768 + v685 * (unint64_t)v294;
        v777 = v295;
        if (v98 < v292)
        {
          v98->n128_u64[0] = v296;
          v98->n128_u32[2] = v768;
          v98[1].n128_u64[0] = (unint64_t)v295;
          v98[1].n128_u32[2] = 4;
          v297 = v98 + 2;
          v292 = v784;
          goto LABEL_445;
        }
        v298 = ((char *)v98 - (char *)v253) >> 5;
        v299 = v298 + 1;
        if ((unint64_t)(v298 + 1) >> 59)
          goto LABEL_847;
        if (v292 - v253 > v299)
          v299 = v292 - v253;
        if ((unint64_t)((char *)v292 - (char *)v253) >= 0x7FFFFFFFFFFFFFE0)
          v300 = 0x7FFFFFFFFFFFFFFLL;
        else
          v300 = v299;
        if (v300)
        {
          if (v300 >> 59)
            goto LABEL_954;
          v301 = (char *)operator new(32 * v300);
          v295 = v777;
        }
        else
        {
          v301 = 0;
        }
        v302 = (__n128 *)&v301[32 * v298];
        v302->n128_u64[0] = v296;
        v302->n128_u32[2] = v768;
        v302[1].n128_u64[0] = (unint64_t)v295;
        v302[1].n128_u32[2] = 4;
        if (v98 == v253)
        {
          v105 = (uint64_t)&v301[32 * v298];
          v292 = (__n128 *)&v301[32 * v300];
          v297 = v302 + 2;
          v782 = (char *)v105;
          v784 = v292;
          if (!v253)
            goto LABEL_444;
        }
        else
        {
          v303 = (__n128 *)&v301[32 * v298];
          do
          {
            v100 = v98[-2];
            v304 = v98[-1];
            v105 = (uint64_t)&v303[-2];
            v303[-2] = v100;
            v303[-1] = v304;
            v98 -= 2;
            v303 -= 2;
          }
          while (v98 != v253);
          v292 = (__n128 *)&v301[32 * v300];
          v297 = v302 + 2;
          v782 = (char *)v105;
          v784 = v292;
          if (!v253)
            goto LABEL_444;
        }
        operator delete(v253);
        v295 = v777;
LABEL_444:
        v253 = (__n128 *)v105;
LABEL_445:
        v305 = v685 * (unint64_t)v294;
        v306 = v294;
        ++v293[v294];
        v307 = v295 + 8;
        v308 = v305 + v732;
        if (v297 < v292)
        {
          v297->n128_u64[0] = v308;
          v297->n128_u32[2] = v732;
          v297[1].n128_u64[0] = (unint64_t)v307;
          v309 = v297 + 2;
          v297[1].n128_u32[2] = 4;
          goto LABEL_466;
        }
        v310 = ((char *)v297 - (char *)v253) >> 5;
        v311 = v310 + 1;
        if ((unint64_t)(v310 + 1) >> 59)
          goto LABEL_847;
        if (v292 - v253 > v311)
          v311 = v292 - v253;
        if ((unint64_t)((char *)v292 - (char *)v253) >= 0x7FFFFFFFFFFFFFE0)
          v312 = 0x7FFFFFFFFFFFFFFLL;
        else
          v312 = v311;
        if (v312)
        {
          if (v312 >> 59)
            goto LABEL_954;
          v313 = (char *)operator new(32 * v312);
        }
        else
        {
          v313 = 0;
        }
        v105 = (uint64_t)&v313[32 * v310];
        *(_QWORD *)v105 = v308;
        *(_DWORD *)(v105 + 8) = v732;
        v292 = (__n128 *)&v313[32 * v312];
        *(_QWORD *)(v105 + 16) = v307;
        *(_DWORD *)(v105 + 24) = 4;
        v309 = (__n128 *)(v105 + 32);
        if (v297 == v253)
        {
          v782 = (char *)v105;
          v784 = v292;
        }
        else
        {
          do
          {
            v100 = v297[-2];
            v314 = v297[-1];
            *(__n128 *)(v105 - 32) = v100;
            *(__n128 *)(v105 - 16) = v314;
            v105 -= 32;
            v297 -= 2;
          }
          while (v297 != v253);
          v782 = (char *)v105;
          v784 = v292;
          if (!v253)
            goto LABEL_465;
        }
        operator delete(v253);
LABEL_465:
        v253 = (__n128 *)v105;
        v295 = v777;
LABEL_466:
        ++v293[v306];
        v315 = v295 + 16;
        v316 = v305 + v723;
        if (v309 < v292)
        {
          v309->n128_u64[0] = v316;
          v309->n128_u32[2] = v723;
          v309[1].n128_u64[0] = (unint64_t)v315;
          v317 = v309 + 2;
          v309[1].n128_u32[2] = 4;
          goto LABEL_485;
        }
        v318 = ((char *)v309 - (char *)v253) >> 5;
        v319 = v318 + 1;
        if ((unint64_t)(v318 + 1) >> 59)
          goto LABEL_847;
        if (v292 - v253 > v319)
          v319 = v292 - v253;
        if ((unint64_t)((char *)v292 - (char *)v253) >= 0x7FFFFFFFFFFFFFE0)
          v320 = 0x7FFFFFFFFFFFFFFLL;
        else
          v320 = v319;
        if (v320)
        {
          if (v320 >> 59)
            goto LABEL_954;
          v321 = (char *)operator new(32 * v320);
        }
        else
        {
          v321 = 0;
        }
        v105 = (uint64_t)&v321[32 * v318];
        *(_QWORD *)v105 = v316;
        *(_DWORD *)(v105 + 8) = v723;
        v292 = (__n128 *)&v321[32 * v320];
        *(_QWORD *)(v105 + 16) = v315;
        *(_DWORD *)(v105 + 24) = 4;
        v317 = (__n128 *)(v105 + 32);
        if (v309 == v253)
        {
          v782 = (char *)v105;
          v784 = v292;
        }
        else
        {
          do
          {
            v100 = v309[-2];
            v322 = v309[-1];
            *(__n128 *)(v105 - 32) = v100;
            *(__n128 *)(v105 - 16) = v322;
            v105 -= 32;
            v309 -= 2;
          }
          while (v309 != v253);
          v782 = (char *)v105;
          v784 = v292;
          if (!v253)
            goto LABEL_484;
        }
        operator delete(v253);
LABEL_484:
        v253 = (__n128 *)v105;
        v295 = v777;
LABEL_485:
        ++v293[v306];
        v323 = v295 + 24;
        v324 = v305 + v715;
        if (v317 < v292)
        {
          v317->n128_u64[0] = v324;
          v317->n128_u32[2] = v715;
          v317[1].n128_u64[0] = (unint64_t)v323;
          v98 = v317 + 2;
          v317[1].n128_u32[2] = 4;
          v252 = v755;
        }
        else
        {
          v325 = ((char *)v317 - (char *)v253) >> 5;
          v326 = v325 + 1;
          if ((unint64_t)(v325 + 1) >> 59)
            goto LABEL_847;
          if (v292 - v253 > v326)
            v326 = v292 - v253;
          if ((unint64_t)((char *)v292 - (char *)v253) >= 0x7FFFFFFFFFFFFFE0)
            v327 = 0x7FFFFFFFFFFFFFFLL;
          else
            v327 = v326;
          if (v327)
          {
            if (v327 >> 59)
              goto LABEL_954;
            v328 = (char *)operator new(32 * v327);
          }
          else
          {
            v328 = 0;
          }
          v105 = (uint64_t)&v328[32 * v325];
          *(_QWORD *)v105 = v324;
          *(_DWORD *)(v105 + 8) = v715;
          v292 = (__n128 *)&v328[32 * v327];
          *(_QWORD *)(v105 + 16) = v323;
          *(_DWORD *)(v105 + 24) = 4;
          v98 = (__n128 *)(v105 + 32);
          if (v317 == v253)
          {
            v782 = (char *)v105;
            v784 = v292;
            v252 = v755;
LABEL_502:
            operator delete(v253);
            v253 = (__n128 *)v105;
            goto LABEL_426;
          }
          v252 = v755;
          do
          {
            v100 = v317[-2];
            v329 = v317[-1];
            *(__n128 *)(v105 - 32) = v100;
            *(__n128 *)(v105 - 16) = v329;
            v105 -= 32;
            v317 -= 2;
          }
          while (v317 != v253);
          v782 = (char *)v105;
          v784 = v292;
          if (v253)
            goto LABEL_502;
          v253 = (__n128 *)v105;
        }
LABEL_426:
        ++v293[v306];
        if (++v255 == 4)
        {
LABEL_343:
          v252 += 4;
          if (v252 == v693)
          {
            v249 = *(unsigned int *)(v697 + 604);
            v250 = v688;
            goto LABEL_340;
          }
          goto LABEL_344;
        }
      }
    }
LABEL_503:
    v330 = *(unsigned int *)(v697 + 828);
    if ((_DWORD)v330)
    {
      v331 = 0;
      __pc = *(char **)(v697 + 832);
      while (1)
      {
        v332 = *(_QWORD *)(v697 + 904) + 24 * v331;
        v333 = *(unsigned int **)v332;
        v694 = *(unsigned int **)(v332 + 8);
        if (*(unsigned int **)v332 != v694)
          break;
LABEL_506:
        if (++v331 >= v330)
          goto LABEL_668;
      }
      v689 = v331;
      v764 = *(_DWORD *)(*(_QWORD *)(v697 + 1248) + 4 * v331);
      v334 = (__n128 *)v105;
LABEL_510:
      v335 = *(_DWORD *)(*(_QWORD *)(v697 + 1224) + 4 * *v333);
      v756 = v333;
      v769 = v335;
      v336 = 0;
      if (v764 < v335)
      {
        v778 = v335 * (unint64_t)v685;
        v724 = v335 + 1;
        v709 = v335 + 2;
        v337 = v784;
        v338 = v785;
        v700 = v335 + 3;
        while (1)
        {
          v339 = v764 + v336;
          v340 = &__pc[32 * v336 + 8 * *((_QWORD *)v333 + 1)];
          v341 = v778 + v339;
          if (v98 < v337)
          {
            v98->n128_u64[0] = v341;
            v98->n128_u32[2] = v339;
            v98[1].n128_u64[0] = (unint64_t)v340;
            v98[1].n128_u32[2] = 1;
            v342 = v98 + 2;
            v337 = v784;
            goto LABEL_532;
          }
          v343 = ((char *)v98 - (char *)v334) >> 5;
          v344 = v343 + 1;
          if ((unint64_t)(v343 + 1) >> 59)
            goto LABEL_847;
          if (v337 - v334 > v344)
            v344 = v337 - v334;
          if ((unint64_t)((char *)v337 - (char *)v334) >= 0x7FFFFFFFFFFFFFE0)
            v345 = 0x7FFFFFFFFFFFFFFLL;
          else
            v345 = v344;
          if (v345)
          {
            if (v345 >> 59)
              goto LABEL_954;
            v346 = (char *)operator new(32 * v345);
          }
          else
          {
            v346 = 0;
          }
          v347 = (__n128 *)&v346[32 * v343];
          v347->n128_u64[0] = v341;
          v347->n128_u32[2] = v339;
          v347[1].n128_u64[0] = (unint64_t)v340;
          v347[1].n128_u32[2] = 1;
          if (v98 == v334)
          {
            v105 = (uint64_t)&v346[32 * v343];
            v337 = (__n128 *)&v346[32 * v345];
            v342 = v347 + 2;
            v782 = (char *)v347;
            v784 = v337;
            if (!v334)
              goto LABEL_531;
          }
          else
          {
            v348 = (__n128 *)&v346[32 * v343];
            do
            {
              v100 = v98[-2];
              v349 = v98[-1];
              v105 = (uint64_t)&v348[-2];
              v348[-2] = v100;
              v348[-1] = v349;
              v98 -= 2;
              v348 -= 2;
            }
            while (v98 != v334);
            v337 = (__n128 *)&v346[32 * v345];
            v342 = v347 + 2;
            v782 = (char *)v105;
            v784 = v337;
            if (!v334)
              goto LABEL_531;
          }
          operator delete(v334);
LABEL_531:
          v334 = (__n128 *)v105;
LABEL_532:
          ++v338[v769];
          v350 = v340 + 8;
          v351 = v685 * (unint64_t)v724 + v339;
          if (v342 < v337)
          {
            v342->n128_u64[0] = v351;
            v342->n128_u32[2] = v339;
            v342[1].n128_u64[0] = (unint64_t)v350;
            v352 = v342 + 2;
            v342[1].n128_u32[2] = 1;
            goto LABEL_553;
          }
          v353 = ((char *)v342 - (char *)v334) >> 5;
          v354 = v353 + 1;
          if ((unint64_t)(v353 + 1) >> 59)
            goto LABEL_847;
          if (v337 - v334 > v354)
            v354 = v337 - v334;
          if ((unint64_t)((char *)v337 - (char *)v334) >= 0x7FFFFFFFFFFFFFE0)
            v355 = 0x7FFFFFFFFFFFFFFLL;
          else
            v355 = v354;
          if (v355)
          {
            if (v355 >> 59)
              goto LABEL_954;
            v356 = (char *)operator new(32 * v355);
          }
          else
          {
            v356 = 0;
          }
          v105 = (uint64_t)&v356[32 * v353];
          *(_QWORD *)v105 = v351;
          *(_DWORD *)(v105 + 8) = v339;
          v337 = (__n128 *)&v356[32 * v355];
          *(_QWORD *)(v105 + 16) = v350;
          *(_DWORD *)(v105 + 24) = 1;
          v352 = (__n128 *)(v105 + 32);
          if (v342 == v334)
          {
            v782 = (char *)v105;
            v784 = v337;
          }
          else
          {
            do
            {
              v100 = v342[-2];
              v357 = v342[-1];
              *(__n128 *)(v105 - 32) = v100;
              *(__n128 *)(v105 - 16) = v357;
              v105 -= 32;
              v342 -= 2;
            }
            while (v342 != v334);
            v782 = (char *)v105;
            v784 = v337;
            if (!v334)
              goto LABEL_552;
          }
          operator delete(v334);
LABEL_552:
          v334 = (__n128 *)v105;
LABEL_553:
          ++v338[v724];
          v358 = v340 + 16;
          v359 = v685 * (unint64_t)v709 + v339;
          if (v352 < v337)
          {
            v352->n128_u64[0] = v359;
            v352->n128_u32[2] = v339;
            v352[1].n128_u64[0] = (unint64_t)v358;
            v360 = v352 + 2;
            v352[1].n128_u32[2] = 1;
            goto LABEL_572;
          }
          v361 = ((char *)v352 - (char *)v334) >> 5;
          v362 = v361 + 1;
          if ((unint64_t)(v361 + 1) >> 59)
            goto LABEL_847;
          if (v337 - v334 > v362)
            v362 = v337 - v334;
          if ((unint64_t)((char *)v337 - (char *)v334) >= 0x7FFFFFFFFFFFFFE0)
            v363 = 0x7FFFFFFFFFFFFFFLL;
          else
            v363 = v362;
          if (v363)
          {
            if (v363 >> 59)
              goto LABEL_954;
            v364 = (char *)operator new(32 * v363);
          }
          else
          {
            v364 = 0;
          }
          v105 = (uint64_t)&v364[32 * v361];
          *(_QWORD *)v105 = v359;
          *(_DWORD *)(v105 + 8) = v339;
          v337 = (__n128 *)&v364[32 * v363];
          *(_QWORD *)(v105 + 16) = v358;
          *(_DWORD *)(v105 + 24) = 1;
          v360 = (__n128 *)(v105 + 32);
          if (v352 == v334)
          {
            v782 = (char *)v105;
            v784 = v337;
          }
          else
          {
            do
            {
              v100 = v352[-2];
              v365 = v352[-1];
              *(__n128 *)(v105 - 32) = v100;
              *(__n128 *)(v105 - 16) = v365;
              v105 -= 32;
              v352 -= 2;
            }
            while (v352 != v334);
            v782 = (char *)v105;
            v784 = v337;
            if (!v334)
              goto LABEL_571;
          }
          operator delete(v334);
LABEL_571:
          v334 = (__n128 *)v105;
LABEL_572:
          ++v338[v709];
          v366 = v340 + 24;
          v367 = v685 * v700 + v339;
          if (v360 < v337)
          {
            v360->n128_u64[0] = v367;
            v360->n128_u32[2] = v339;
            v360[1].n128_u64[0] = (unint64_t)v366;
            v98 = v360 + 2;
            v360[1].n128_u32[2] = 1;
            v333 = v756;
          }
          else
          {
            v368 = ((char *)v360 - (char *)v334) >> 5;
            v369 = v368 + 1;
            if ((unint64_t)(v368 + 1) >> 59)
              goto LABEL_847;
            if (v337 - v334 > v369)
              v369 = v337 - v334;
            if ((unint64_t)((char *)v337 - (char *)v334) >= 0x7FFFFFFFFFFFFFE0)
              v370 = 0x7FFFFFFFFFFFFFFLL;
            else
              v370 = v369;
            if (v370)
            {
              if (v370 >> 59)
                goto LABEL_954;
              v371 = (char *)operator new(32 * v370);
            }
            else
            {
              v371 = 0;
            }
            v105 = (uint64_t)&v371[32 * v368];
            *(_QWORD *)v105 = v367;
            *(_DWORD *)(v105 + 8) = v339;
            v337 = (__n128 *)&v371[32 * v370];
            *(_QWORD *)(v105 + 16) = v366;
            *(_DWORD *)(v105 + 24) = 1;
            v98 = (__n128 *)(v105 + 32);
            if (v360 == v334)
            {
              v782 = (char *)v105;
              v784 = v337;
              v333 = v756;
LABEL_589:
              operator delete(v334);
              v334 = (__n128 *)v105;
              goto LABEL_513;
            }
            v333 = v756;
            do
            {
              v100 = v360[-2];
              v372 = v360[-1];
              *(__n128 *)(v105 - 32) = v100;
              *(__n128 *)(v105 - 16) = v372;
              v105 -= 32;
              v360 -= 2;
            }
            while (v360 != v334);
            v782 = (char *)v105;
            v784 = v337;
            if (v334)
              goto LABEL_589;
            v334 = (__n128 *)v105;
          }
LABEL_513:
          ++v338[v700];
          if (++v336 == 6)
            goto LABEL_509;
        }
      }
      v725 = v335 + 2;
      v733 = v335 + 1;
      v716 = v335 + 3;
      v373 = v784;
      v374 = v785;
      while (1)
      {
        v375 = v764 + v336;
        v376 = &__pc[32 * v336 + 8 * *((_QWORD *)v333 + 1)];
        v377 = v769 + v685 * (unint64_t)v375;
        v779 = v376;
        if (v98 < v373)
        {
          v98->n128_u64[0] = v377;
          v98->n128_u32[2] = v769;
          v98[1].n128_u64[0] = (unint64_t)v376;
          v98[1].n128_u32[2] = 4;
          v378 = v98 + 2;
          v373 = v784;
          goto LABEL_611;
        }
        v379 = ((char *)v98 - (char *)v334) >> 5;
        v380 = v379 + 1;
        if ((unint64_t)(v379 + 1) >> 59)
          goto LABEL_847;
        if (v373 - v334 > v380)
          v380 = v373 - v334;
        if ((unint64_t)((char *)v373 - (char *)v334) >= 0x7FFFFFFFFFFFFFE0)
          v381 = 0x7FFFFFFFFFFFFFFLL;
        else
          v381 = v380;
        if (v381)
        {
          if (v381 >> 59)
            goto LABEL_954;
          v382 = (char *)operator new(32 * v381);
          v376 = v779;
        }
        else
        {
          v382 = 0;
        }
        v383 = (__n128 *)&v382[32 * v379];
        v383->n128_u64[0] = v377;
        v383->n128_u32[2] = v769;
        v383[1].n128_u64[0] = (unint64_t)v376;
        v383[1].n128_u32[2] = 4;
        if (v98 == v334)
        {
          v105 = (uint64_t)&v382[32 * v379];
          v373 = (__n128 *)&v382[32 * v381];
          v378 = v383 + 2;
          v782 = (char *)v105;
          v784 = v373;
          if (!v334)
            goto LABEL_610;
        }
        else
        {
          v384 = (__n128 *)&v382[32 * v379];
          do
          {
            v100 = v98[-2];
            v385 = v98[-1];
            v105 = (uint64_t)&v384[-2];
            v384[-2] = v100;
            v384[-1] = v385;
            v98 -= 2;
            v384 -= 2;
          }
          while (v98 != v334);
          v373 = (__n128 *)&v382[32 * v381];
          v378 = v383 + 2;
          v782 = (char *)v105;
          v784 = v373;
          if (!v334)
            goto LABEL_610;
        }
        operator delete(v334);
        v376 = v779;
LABEL_610:
        v334 = (__n128 *)v105;
LABEL_611:
        v386 = v685 * (unint64_t)v375;
        v387 = v375;
        ++v374[v375];
        v388 = v376 + 8;
        v389 = v386 + v733;
        if (v378 < v373)
        {
          v378->n128_u64[0] = v389;
          v378->n128_u32[2] = v733;
          v378[1].n128_u64[0] = (unint64_t)v388;
          v390 = v378 + 2;
          v378[1].n128_u32[2] = 4;
          goto LABEL_632;
        }
        v391 = ((char *)v378 - (char *)v334) >> 5;
        v392 = v391 + 1;
        if ((unint64_t)(v391 + 1) >> 59)
          goto LABEL_847;
        if (v373 - v334 > v392)
          v392 = v373 - v334;
        if ((unint64_t)((char *)v373 - (char *)v334) >= 0x7FFFFFFFFFFFFFE0)
          v393 = 0x7FFFFFFFFFFFFFFLL;
        else
          v393 = v392;
        if (v393)
        {
          if (v393 >> 59)
            goto LABEL_954;
          v394 = (char *)operator new(32 * v393);
        }
        else
        {
          v394 = 0;
        }
        v105 = (uint64_t)&v394[32 * v391];
        *(_QWORD *)v105 = v389;
        *(_DWORD *)(v105 + 8) = v733;
        v373 = (__n128 *)&v394[32 * v393];
        *(_QWORD *)(v105 + 16) = v388;
        *(_DWORD *)(v105 + 24) = 4;
        v390 = (__n128 *)(v105 + 32);
        if (v378 == v334)
        {
          v782 = (char *)v105;
          v784 = v373;
        }
        else
        {
          do
          {
            v100 = v378[-2];
            v395 = v378[-1];
            *(__n128 *)(v105 - 32) = v100;
            *(__n128 *)(v105 - 16) = v395;
            v105 -= 32;
            v378 -= 2;
          }
          while (v378 != v334);
          v782 = (char *)v105;
          v784 = v373;
          if (!v334)
            goto LABEL_631;
        }
        operator delete(v334);
LABEL_631:
        v334 = (__n128 *)v105;
        v376 = v779;
LABEL_632:
        ++v374[v387];
        v396 = v376 + 16;
        v397 = v386 + v725;
        if (v390 < v373)
        {
          v390->n128_u64[0] = v397;
          v390->n128_u32[2] = v725;
          v390[1].n128_u64[0] = (unint64_t)v396;
          v398 = v390 + 2;
          v390[1].n128_u32[2] = 4;
          goto LABEL_651;
        }
        v399 = ((char *)v390 - (char *)v334) >> 5;
        v400 = v399 + 1;
        if ((unint64_t)(v399 + 1) >> 59)
          goto LABEL_847;
        if (v373 - v334 > v400)
          v400 = v373 - v334;
        if ((unint64_t)((char *)v373 - (char *)v334) >= 0x7FFFFFFFFFFFFFE0)
          v401 = 0x7FFFFFFFFFFFFFFLL;
        else
          v401 = v400;
        if (v401)
        {
          if (v401 >> 59)
            goto LABEL_954;
          v402 = (char *)operator new(32 * v401);
        }
        else
        {
          v402 = 0;
        }
        v105 = (uint64_t)&v402[32 * v399];
        *(_QWORD *)v105 = v397;
        *(_DWORD *)(v105 + 8) = v725;
        v373 = (__n128 *)&v402[32 * v401];
        *(_QWORD *)(v105 + 16) = v396;
        *(_DWORD *)(v105 + 24) = 4;
        v398 = (__n128 *)(v105 + 32);
        if (v390 == v334)
        {
          v782 = (char *)v105;
          v784 = v373;
        }
        else
        {
          do
          {
            v100 = v390[-2];
            v403 = v390[-1];
            *(__n128 *)(v105 - 32) = v100;
            *(__n128 *)(v105 - 16) = v403;
            v105 -= 32;
            v390 -= 2;
          }
          while (v390 != v334);
          v782 = (char *)v105;
          v784 = v373;
          if (!v334)
            goto LABEL_650;
        }
        operator delete(v334);
LABEL_650:
        v334 = (__n128 *)v105;
        v376 = v779;
LABEL_651:
        ++v374[v387];
        v404 = v376 + 24;
        v405 = v386 + v716;
        if (v398 < v373)
        {
          v398->n128_u64[0] = v405;
          v398->n128_u32[2] = v716;
          v398[1].n128_u64[0] = (unint64_t)v404;
          v98 = v398 + 2;
          v398[1].n128_u32[2] = 4;
        }
        else
        {
          v406 = ((char *)v398 - (char *)v334) >> 5;
          v407 = v406 + 1;
          if ((unint64_t)(v406 + 1) >> 59)
            goto LABEL_847;
          if (v373 - v334 > v407)
            v407 = v373 - v334;
          if ((unint64_t)((char *)v373 - (char *)v334) >= 0x7FFFFFFFFFFFFFE0)
            v408 = 0x7FFFFFFFFFFFFFFLL;
          else
            v408 = v407;
          if (v408)
          {
            if (v408 >> 59)
              goto LABEL_954;
            v409 = (char *)operator new(32 * v408);
          }
          else
          {
            v409 = 0;
          }
          v105 = (uint64_t)&v409[32 * v406];
          *(_QWORD *)v105 = v405;
          *(_DWORD *)(v105 + 8) = v716;
          v373 = (__n128 *)&v409[32 * v408];
          *(_QWORD *)(v105 + 16) = v404;
          *(_DWORD *)(v105 + 24) = 4;
          v98 = (__n128 *)(v105 + 32);
          if (v398 == v334)
          {
            v782 = (char *)v105;
            v784 = v373;
LABEL_667:
            operator delete(v334);
            v334 = (__n128 *)v105;
            goto LABEL_592;
          }
          do
          {
            v100 = v398[-2];
            v410 = v398[-1];
            *(__n128 *)(v105 - 32) = v100;
            *(__n128 *)(v105 - 16) = v410;
            v105 -= 32;
            v398 -= 2;
          }
          while (v398 != v334);
          v782 = (char *)v105;
          v784 = v373;
          if (v334)
            goto LABEL_667;
          v334 = (__n128 *)v105;
        }
LABEL_592:
        v333 = v756;
        ++v374[v387];
        if (++v336 == 6)
        {
LABEL_509:
          v333 += 4;
          if (v333 == v694)
          {
            v330 = *(unsigned int *)(v697 + 828);
            v331 = v689;
            goto LABEL_506;
          }
          goto LABEL_510;
        }
      }
    }
LABEL_668:
    v411 = 126 - 2 * __clz(((uint64_t)v98 - v105) >> 5);
    if (v98 == (__n128 *)v105)
      v412 = 0;
    else
      v412 = v411;
    sub_20F7F25D4(v105, v98, v412, 1, v100);
    *(_WORD *)(v697 + 2424) &= ~1u;
    sub_20F3DC8C4((uint64_t)v681, v685, &v785);
    v413 = v782;
    if ((_DWORD)v683)
    {
      v414 = 0;
      v415 = (_BYTE *)v697;
      do
      {
        v416 = *((_QWORD *)v415 + 301);
        v417 = *(_QWORD *)(v416 + 8 * v414++);
        v418 = *(_QWORD *)(v416 + 8 * v414);
        while (v417 != v418)
        {
          *(_DWORD *)(*((_QWORD *)v415 + 302) + 4 * v417) = *((_DWORD *)v413 + 2);
          v419 = (_QWORD *)*((_QWORD *)v413 + 2);
          v420 = v415[2428];
          v421 = (v420 * v420);
          v422 = (_QWORD *)(*((_QWORD *)v415 + 304) + 8 * v417 * v421);
          if (v419 == v422)
          {
            v423 = operator new((8 * (_DWORD)v421 + 31) & 0xFFFE0, (std::align_val_t)0x20uLL);
            *v423 = *v419;
            if ((_DWORD)v420)
            {
              v424 = 0;
              v425 = 8 * v420;
              do
              {
                memmove((char *)v419 + v424, (char *)v423 + v424, v425);
                v424 += v425;
                --v420;
              }
              while (v420);
            }
            MEMORY[0x212BC6368](v423, 0x1000C8000313F17);
            v415 = (_BYTE *)v697;
          }
          else
          {
            *v422 = *v419;
          }
          v413 += 32;
          ++v417;
        }
      }
      while (v414 != v683);
      v413 = v782;
      v426 = v680;
      if (v782)
        goto LABEL_684;
    }
    else
    {
      v415 = (_BYTE *)v697;
      v426 = v680;
      if (v782)
LABEL_684:
        operator delete(v413);
    }
    v427 = v785;
    if (!v785)
      goto LABEL_687;
    goto LABEL_686;
  }
  if (v8 != v9)
  {
    v42 = v8 + 1;
    v43 = *(unsigned int **)(a1 + 1224);
    if (v8 + 1 != v9)
    {
      v44 = *v8;
      v43 = *(unsigned int **)(a1 + 1224);
      v45 = v8 + 1;
      do
      {
        v47 = *v45++;
        v46 = v47;
        v48 = v44 >= v47;
        if (v44 <= v47)
          v44 = v46;
        if (!v48)
          v43 = v42;
        v42 = v45;
      }
      while (v45 != v9);
    }
    if (*v43 + 4 > v7)
      v7 = *v43 + 4;
  }
  v49 = *(unsigned int **)(a1 + 1248);
  v50 = *(unsigned int **)(a1 + 1256);
  if (v49 != v50)
  {
    v51 = v49 + 1;
    v52 = *(unsigned int **)(a1 + 1248);
    if (v49 + 1 != v50)
    {
      v53 = *v49;
      v52 = *(unsigned int **)(a1 + 1248);
      v54 = v49 + 1;
      do
      {
        v56 = *v54++;
        v55 = v56;
        v57 = v53 >= v56;
        if (v53 <= v56)
          v53 = v55;
        if (!v57)
          v52 = v51;
        v51 = v54;
      }
      while (v54 != v50);
    }
    if (*v52 + 6 > v7)
      v7 = *v52 + 6;
  }
  v58 = 6 * *(_DWORD *)(*(_QWORD *)(a1 + 1048) + 12) + 4 * *(_DWORD *)(v6 + 12);
  if (v8 != v9)
  {
    v59 = v8 + 1;
    if (v8 + 1 != v9)
    {
      v60 = *v8;
      v61 = v8 + 1;
      do
      {
        v63 = *v61++;
        v62 = v63;
        v64 = v60 >= v63;
        if (v60 <= v63)
          v60 = v62;
        if (!v64)
          v8 = v59;
        v59 = v61;
      }
      while (v61 != v9);
    }
    v65 = *v8 + 4;
    if (v65 > v58)
      v58 = v65;
  }
  if (v49 != v50)
  {
    v66 = v49 + 1;
    if (v49 + 1 != v50)
    {
      v67 = *v49;
      v68 = v49 + 1;
      do
      {
        v70 = *v68++;
        v69 = v70;
        v71 = v67 >= v70;
        if (v67 <= v70)
          v67 = v69;
        if (!v71)
          v49 = v66;
        v66 = v68;
      }
      while (v68 != v50);
    }
    if (*v49 + 6 > v58)
      v58 = *v49 + 6;
  }
  v72 = *(unsigned __int8 *)(v697 + 2428);
  v785 = 0;
  v786 = 0;
  v787 = 0;
  v73 = v58 / v72;
  v774 = v72;
  if (v58 >= v72)
  {
    v74 = v58 / v72;
    v75 = (unsigned int *)operator new(4 * v74);
    v785 = v75;
    v787 = &v75[v74];
    v76 = (v74 - 1) & 0x3FFFFFFFFFFFFFFFLL;
    v77 = v75;
    v73 = v74;
    if (v76 < 7)
      goto LABEL_1099;
    v78 = v76 + 1;
    v77 = &v75[v78 & 0x7FFFFFFFFFFFFFF8];
    v79 = v75 + 4;
    v80 = v78 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      *(v79 - 1) = 0uLL;
      *v79 = 0uLL;
      v79 += 2;
      v80 -= 8;
    }
    while (v80);
    if (v78 != (v78 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_1099:
      do
        *v77++ = 0;
      while (v77 != &v75[v74]);
    }
    v786 = &v75[v74];
  }
  v677 = v73;
  v679 = v58;
  v81 = v697;
  v82 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v697 + 704) + 40))(v697 + 704);
  v83 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v81 + 928) + 40))(v81 + 928);
  v84 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
  v85 = 0;
  v86 = (36 * v83)
      + (unint64_t)(24 * v82)
      + (16 * v84)
      + (unint64_t)(24 * (*(unsigned int (**)(uint64_t))(*(_QWORD *)(v81 + 816) + 40))(v81 + 816));
  v781 = 0;
  v783 = 0;
  v88 = *(unsigned __int8 *)(v81 + 2428) * *(unsigned __int8 *)(v81 + 2428);
  if (v86 >= v88)
  {
    v89 = v86 / v88;
    v85 = (__n128 *)operator new(32 * (v86 / v88));
    v781 = v85;
    v783 = &v85[2 * v89];
  }
  v90 = v774;
  v760 = v7 / v774;
  v91 = 4 / v774;
  v92 = 6 / v774;
  v676 = 4 / v774;
  v678 = 6 / v774;
  if (!*(_DWORD *)(v697 + 716) || v774 > 4)
  {
    v93 = v85;
    if (!*(_DWORD *)(v697 + 940))
      goto LABEL_848;
    goto LABEL_807;
  }
  v442 = 0;
  v443 = v697;
  v726 = *(_QWORD *)(v697 + 720);
  if (v91 <= 1)
    v91 = 1;
  v710 = v91;
  if (v92 <= 1)
    v444 = 1;
  else
    v444 = v92;
  v445 = v785;
  v93 = v85;
  v682 = v785;
  do
  {
    v446 = *(_QWORD *)(v443 + 792) + 24 * v442;
    v447 = *(unsigned int **)v446;
    v448 = *(_DWORD *)(*(_QWORD *)(v443 + 1224) + 4 * v442) / v90;
    v717 = *(unsigned int **)(v446 + 8);
    v449 = (unint64_t)v717 - *(_QWORD *)v446;
    if (v717 != v447)
    {
      v684 = (char *)v717 - (char *)v447;
      v686 = *(_DWORD *)(*(_QWORD *)(v443 + 1224) + 4 * v442) / v90;
      v690 = v442;
      v770 = v760 * (unint64_t)v448;
      v748 = v760 * (unint64_t)(v448 + 2);
      v757 = v760 * (unint64_t)(v448 + 1);
      __pd = v760 * (unint64_t)(v448 + 3);
      while (1)
      {
        v450 = 0;
        v451 = *(_DWORD *)(*(_QWORD *)(v697 + 1248) + 4 * *v447) / v90;
        v734 = v447;
        v452 = v726 + 8 * *((_QWORD *)v447 + 1);
        v453 = v93;
        do
        {
          while (1)
          {
            v454 = v451 + v450;
            v455 = v770 + v454;
            if (v85 >= v783)
              break;
            v85->n128_u64[0] = v455;
            v85->n128_u32[2] = v454;
            v85[1].n128_u64[0] = v452;
            v85[1].n128_u32[2] = 6;
            v85 += 2;
            ++v450;
            v452 += 8 * v90;
            if (v450 == v444)
              goto LABEL_733;
          }
          v456 = ((char *)v85 - (char *)v453) >> 5;
          v457 = v456 + 1;
          if ((unint64_t)(v456 + 1) >> 59)
LABEL_1084:
            sub_20E867F44();
          v458 = (char *)v783 - (char *)v453;
          if (v783 - v453 > v457)
            v457 = v458 >> 4;
          if ((unint64_t)v458 >= 0x7FFFFFFFFFFFFFE0)
            v459 = 0x7FFFFFFFFFFFFFFLL;
          else
            v459 = v457;
          if (v459)
          {
            if (v459 >> 59)
LABEL_1094:
              sub_20E877A38();
            v460 = (char *)operator new(32 * v459);
          }
          else
          {
            v460 = 0;
          }
          v461 = (__n128 *)&v460[32 * v456];
          v461->n128_u64[0] = v455;
          v461->n128_u32[2] = v454;
          v461[1].n128_u64[0] = v452;
          v461[1].n128_u32[2] = 6;
          if (v85 == v453)
          {
            v464 = (__n128 *)&v460[32 * v456];
            v85 = v461 + 2;
            v783 = (__n128 *)&v460[32 * v459];
            if (v453)
              goto LABEL_728;
          }
          else
          {
            v462 = (__n128 *)&v460[32 * v456];
            do
            {
              v87 = v85[-2];
              v463 = v85[-1];
              v464 = v462 - 2;
              v462[-2] = v87;
              v462[-1] = v463;
              v85 -= 2;
              v462 -= 2;
            }
            while (v85 != v453);
            v85 = v461 + 2;
            v783 = (__n128 *)&v460[32 * v459];
            if (v453)
LABEL_728:
              operator delete(v453);
          }
          v453 = v464;
          v90 = v774;
          ++v450;
          v452 += 8 * v774;
        }
        while (v450 != v444);
LABEL_733:
        if (v90 > 2)
          goto LABEL_709;
        v465 = 0;
        v466 = v726 + 8 * (*((_QWORD *)v734 + 1) + (6 * v774));
        while (2)
        {
          while (1)
          {
            v467 = v451 + v465;
            v468 = v757 + v467;
            if (v85 >= v783)
              break;
            v85->n128_u64[0] = v468;
            v85->n128_u32[2] = v467;
            v85[1].n128_u64[0] = v466;
            v85[1].n128_u32[2] = 6;
            v85 += 2;
            ++v465;
            v466 += 8 * v90;
            if (v465 == v444)
              goto LABEL_756;
          }
          v469 = ((char *)v85 - (char *)v453) >> 5;
          v470 = v469 + 1;
          if ((unint64_t)(v469 + 1) >> 59)
            goto LABEL_1084;
          v471 = (char *)v783 - (char *)v453;
          if (v783 - v453 > v470)
            v470 = v471 >> 4;
          if ((unint64_t)v471 >= 0x7FFFFFFFFFFFFFE0)
            v472 = 0x7FFFFFFFFFFFFFFLL;
          else
            v472 = v470;
          if (v472)
          {
            if (v472 >> 59)
              goto LABEL_1094;
            v473 = (char *)operator new(32 * v472);
          }
          else
          {
            v473 = 0;
          }
          v474 = (__n128 *)&v473[32 * v469];
          v474->n128_u64[0] = v468;
          v474->n128_u32[2] = v467;
          v474[1].n128_u64[0] = v466;
          v474[1].n128_u32[2] = 6;
          if (v85 == v453)
          {
            v477 = (__n128 *)&v473[32 * v469];
            v85 = v474 + 2;
            v783 = (__n128 *)&v473[32 * v472];
            if (v453)
              goto LABEL_751;
          }
          else
          {
            v475 = (__n128 *)&v473[32 * v469];
            do
            {
              v87 = v85[-2];
              v476 = v85[-1];
              v477 = v475 - 2;
              v475[-2] = v87;
              v475[-1] = v476;
              v85 -= 2;
              v475 -= 2;
            }
            while (v85 != v453);
            v85 = v474 + 2;
            v783 = (__n128 *)&v473[32 * v472];
            if (v453)
LABEL_751:
              operator delete(v453);
          }
          v453 = v477;
          v90 = v774;
          ++v465;
          v466 += 8 * v774;
          if (v465 != v444)
            continue;
          break;
        }
LABEL_756:
        if (v710 == 2)
          goto LABEL_709;
        v478 = 0;
        v479 = v726 + 8 * (*((_QWORD *)v734 + 1) + (12 * v774));
        while (2)
        {
          while (1)
          {
            v480 = v451 + v478;
            v481 = v748 + v480;
            if (v85 >= v783)
              break;
            v85->n128_u64[0] = v481;
            v85->n128_u32[2] = v480;
            v85[1].n128_u64[0] = v479;
            v85[1].n128_u32[2] = 6;
            v85 += 2;
            ++v478;
            v479 += 8 * v90;
            if (v478 == v444)
              goto LABEL_779;
          }
          v482 = ((char *)v85 - (char *)v453) >> 5;
          v483 = v482 + 1;
          if ((unint64_t)(v482 + 1) >> 59)
            goto LABEL_1084;
          v484 = (char *)v783 - (char *)v453;
          if (v783 - v453 > v483)
            v483 = v484 >> 4;
          if ((unint64_t)v484 >= 0x7FFFFFFFFFFFFFE0)
            v485 = 0x7FFFFFFFFFFFFFFLL;
          else
            v485 = v483;
          if (v485)
          {
            if (v485 >> 59)
              goto LABEL_1094;
            v486 = (char *)operator new(32 * v485);
          }
          else
          {
            v486 = 0;
          }
          v487 = (__n128 *)&v486[32 * v482];
          v487->n128_u64[0] = v481;
          v487->n128_u32[2] = v480;
          v487[1].n128_u64[0] = v479;
          v487[1].n128_u32[2] = 6;
          if (v85 == v453)
          {
            v490 = (__n128 *)&v486[32 * v482];
            v85 = v487 + 2;
            v783 = (__n128 *)&v486[32 * v485];
            if (v453)
              goto LABEL_774;
          }
          else
          {
            v488 = (__n128 *)&v486[32 * v482];
            do
            {
              v87 = v85[-2];
              v489 = v85[-1];
              v490 = v488 - 2;
              v488[-2] = v87;
              v488[-1] = v489;
              v85 -= 2;
              v488 -= 2;
            }
            while (v85 != v453);
            v85 = v487 + 2;
            v783 = (__n128 *)&v486[32 * v485];
            if (v453)
LABEL_774:
              operator delete(v453);
          }
          v453 = v490;
          v90 = v774;
          ++v478;
          v479 += 8 * v774;
          if (v478 != v444)
            continue;
          break;
        }
LABEL_779:
        if (v710 != 3)
        {
          v491 = 0;
          v492 = v726 + 8 * (*((_QWORD *)v734 + 1) + (18 * v774));
          while (1)
          {
            v493 = v451 + v491;
            v494 = __pd + v493;
            if (v85 < v783)
            {
              v85->n128_u64[0] = v494;
              v85->n128_u32[2] = v493;
              v85[1].n128_u64[0] = v492;
              v85[1].n128_u32[2] = 6;
              v85 += 2;
              v93 = v453;
            }
            else
            {
              v495 = ((char *)v85 - (char *)v453) >> 5;
              v496 = v495 + 1;
              if ((unint64_t)(v495 + 1) >> 59)
                goto LABEL_1084;
              v497 = (char *)v783 - (char *)v453;
              if (v783 - v453 > v496)
                v496 = v497 >> 4;
              if ((unint64_t)v497 >= 0x7FFFFFFFFFFFFFE0)
                v498 = 0x7FFFFFFFFFFFFFFLL;
              else
                v498 = v496;
              if (v498)
              {
                if (v498 >> 59)
                  goto LABEL_1094;
                v499 = (char *)operator new(32 * v498);
              }
              else
              {
                v499 = 0;
              }
              v500 = (__n128 *)&v499[32 * v495];
              v500->n128_u64[0] = v494;
              v500->n128_u32[2] = v493;
              v500[1].n128_u64[0] = v492;
              v500[1].n128_u32[2] = 6;
              if (v85 == v453)
              {
                v93 = (__n128 *)&v499[32 * v495];
                v85 = v500 + 2;
                v783 = (__n128 *)&v499[32 * v498];
                if (!v453)
                  goto LABEL_800;
              }
              else
              {
                v501 = (__n128 *)&v499[32 * v495];
                do
                {
                  v87 = v85[-2];
                  v502 = v85[-1];
                  v93 = v501 - 2;
                  v501[-2] = v87;
                  v501[-1] = v502;
                  v85 -= 2;
                  v501 -= 2;
                }
                while (v85 != v453);
                v85 = v500 + 2;
                v783 = (__n128 *)&v499[32 * v498];
                if (!v453)
                {
LABEL_800:
                  v90 = v774;
                  goto LABEL_782;
                }
              }
              operator delete(v453);
              v90 = v774;
            }
LABEL_782:
            ++v491;
            v492 += 8 * v90;
            v453 = v93;
            if (v491 == v444)
              goto LABEL_710;
          }
        }
LABEL_709:
        v93 = v453;
LABEL_710:
        v447 = v734 + 4;
        if (v734 + 4 == v717)
        {
          v781 = v93;
          v448 = v686;
          v442 = v690;
          v445 = v682;
          v449 = v684;
          break;
        }
      }
    }
    v503 = 6 * (v449 >> 4) / v90;
    v445[v448] += v503;
    if (v90 <= 2)
    {
      v445[v448 + 1] += v503;
      if (v710 != 2)
      {
        v445[v448 + 2] += v503;
        if (v710 != 3)
          v445[v448 + 3] += v503;
      }
    }
    ++v442;
    v443 = v697;
  }
  while (v442 < *(unsigned int *)(v697 + 716));
  if (!*(_DWORD *)(v697 + 940))
    goto LABEL_848;
LABEL_807:
  if (v90 > 6)
    goto LABEL_848;
  v504 = 0;
  v505 = v697;
  v735 = *(_QWORD *)(v697 + 944);
  v727 = 6 * v90;
  if (v678 <= 1)
    v506 = 1;
  else
    v506 = v678;
  v771 = v506;
  v701 = v785;
  while (2)
  {
    v507 = *(_QWORD *)(v505 + 1016) + 24 * v504;
    v508 = *(unsigned int **)v507;
    v711 = v504;
    v718 = *(unsigned int **)(v507 + 8);
    v509 = *(_DWORD *)(*(_QWORD *)(v505 + 1248) + 4 * v504) / v90;
    v705 = (unint64_t)v718 - *(_QWORD *)v507;
    __pe = v509;
    if (v718 == *(unsigned int **)v507)
      goto LABEL_841;
    while (2)
    {
      v510 = 0;
      v511 = *(_DWORD *)(*(_QWORD *)(v697 + 1248) + 4 * *v508) / v90;
      v749 = v508;
      while (2)
      {
        v512 = 0;
        v513 = v760 * (unint64_t)(v509 + v510);
        v758 = v510;
        v514 = v735 + 8 * (*((_QWORD *)v508 + 1) + (v727 * v510));
        while (2)
        {
          while (1)
          {
            v515 = v511 + v512;
            v516 = v513 + v515;
            if (v85 >= v783)
              break;
            v85->n128_u64[0] = v516;
            v85->n128_u32[2] = v515;
            v85[1].n128_u64[0] = v514;
            v85[1].n128_u32[2] = 6;
            v85 += 2;
            ++v512;
            v514 += 8 * v90;
            if (v512 == v506)
              goto LABEL_817;
          }
          v517 = ((char *)v85 - (char *)v93) >> 5;
          v518 = v517 + 1;
          if ((unint64_t)(v517 + 1) >> 59)
            goto LABEL_1084;
          v519 = (char *)v783 - (char *)v93;
          if (v783 - v93 > v518)
            v518 = v519 >> 4;
          if ((unint64_t)v519 >= 0x7FFFFFFFFFFFFFE0)
            v520 = 0x7FFFFFFFFFFFFFFLL;
          else
            v520 = v518;
          if (v520)
          {
            if (v520 >> 59)
              goto LABEL_1094;
            v521 = (char *)operator new(32 * v520);
          }
          else
          {
            v521 = 0;
          }
          v522 = (__n128 *)&v521[32 * v517];
          v522->n128_u64[0] = v516;
          v522->n128_u32[2] = v515;
          v522[1].n128_u64[0] = v514;
          v522[1].n128_u32[2] = 6;
          if (v85 == v93)
          {
            v525 = (__n128 *)&v521[32 * v517];
            v85 = v522 + 2;
            v783 = (__n128 *)&v521[32 * v520];
            if (v93)
              goto LABEL_835;
          }
          else
          {
            v523 = (__n128 *)&v521[32 * v517];
            do
            {
              v87 = v85[-2];
              v524 = v85[-1];
              v525 = v523 - 2;
              v523[-2] = v87;
              v523[-1] = v524;
              v85 -= 2;
              v523 -= 2;
            }
            while (v85 != v93);
            v85 = v522 + 2;
            v783 = (__n128 *)&v521[32 * v520];
            if (v93)
LABEL_835:
              operator delete(v93);
          }
          v93 = v525;
          v90 = v774;
          v506 = v771;
          ++v512;
          v514 += 8 * v774;
          if (v512 != v771)
            continue;
          break;
        }
LABEL_817:
        v508 = v749;
        v510 = v758 + 1;
        v509 = __pe;
        if (v758 + 1 != v506)
          continue;
        break;
      }
      v508 = v749 + 4;
      if (v749 + 4 != v718)
        continue;
      break;
    }
    v781 = v93;
LABEL_841:
    v526 = 6 * (v705 >> 4) / v90;
    v701[v509] += v526;
    if (v90 <= 3)
    {
      v701[v509 + 1] += v526;
      if ((_DWORD)v506 != 2)
      {
        v701[v509 + 2] += v526;
        if ((_DWORD)v506 != 3)
        {
          v701[v509 + 3] += v526;
          if ((_DWORD)v506 != 4)
          {
            v701[v509 + 4] += v526;
            if ((_DWORD)v506 != 5)
              v701[v509 + 5] += v526;
          }
        }
      }
    }
    v504 = v711 + 1;
    v505 = v697;
    if (v711 + 1 < (unint64_t)*(unsigned int *)(v697 + 940))
      continue;
    break;
  }
LABEL_848:
  v772 = 4 * v90;
  if (!*(_DWORD *)(v697 + 604) || v90 > 4)
    goto LABEL_948;
  v527 = 0;
  v528 = v697;
  v750 = *(_QWORD *)(v697 + 608);
  if (v676 <= 1)
    v529 = 1;
  else
    v529 = v676;
  v695 = v785;
  while (2)
  {
    v530 = *(_QWORD *)(v528 + 680) + 24 * v527;
    v531 = *(unsigned int **)v530;
    v706 = v527;
    v712 = *(unsigned int **)(v530 + 8);
    v532 = *(_DWORD *)(*(_QWORD *)(v528 + 1224) + 4 * v527) / v90;
    v702 = (unint64_t)v712 - *(_QWORD *)v530;
    v736 = v532;
    if (v712 == *(unsigned int **)v530)
      goto LABEL_944;
    while (2)
    {
      v533 = 0;
      v534 = *(_DWORD *)(*(_QWORD *)(v697 + 1224) + 4 * *v531) / v90;
      v535 = (v534 + 1);
      v719 = (v534 + 3);
      v728 = (v534 + 2);
      __pf = v531;
      while (2)
      {
        v536 = v532 + v533;
        v537 = v750 + 8 * (*((_QWORD *)v531 + 1) + (v772 * v533));
        v538 = v534 + v760 * (unint64_t)(v532 + v533);
        if (v85 >= v783)
        {
          v539 = ((char *)v85 - (char *)v93) >> 5;
          v540 = v539 + 1;
          if ((unint64_t)(v539 + 1) >> 59)
            goto LABEL_1084;
          v541 = (char *)v783 - (char *)v93;
          if (v783 - v93 > v540)
            v540 = v541 >> 4;
          if ((unint64_t)v541 >= 0x7FFFFFFFFFFFFFE0)
            v542 = 0x7FFFFFFFFFFFFFFLL;
          else
            v542 = v540;
          if (v542)
          {
            if (v542 >> 59)
              goto LABEL_1094;
            v543 = (char *)operator new(32 * v542);
          }
          else
          {
            v543 = 0;
          }
          v544 = (__n128 *)&v543[32 * v539];
          v544->n128_u64[0] = v538;
          v544->n128_u32[2] = v534;
          v544[1].n128_u64[0] = v537;
          v544[1].n128_u32[2] = 4;
          if (v85 == v93)
          {
            v547 = (__n128 *)&v543[32 * v539];
            v85 = v544 + 2;
            v783 = (__n128 *)&v543[32 * v542];
            if (v93)
LABEL_878:
              operator delete(v93);
          }
          else
          {
            v545 = (__n128 *)&v543[32 * v539];
            do
            {
              v87 = v85[-2];
              v546 = v85[-1];
              v547 = v545 - 2;
              v545[-2] = v87;
              v545[-1] = v546;
              v85 -= 2;
              v545 -= 2;
            }
            while (v85 != v93);
            v85 = v544 + 2;
            v783 = (__n128 *)&v543[32 * v542];
            if (v93)
              goto LABEL_878;
          }
          v93 = v547;
          v90 = v774;
          v532 = v736;
          v531 = __pf;
          v535 = (v534 + 1);
          if (v774 <= 2)
            goto LABEL_880;
          goto LABEL_860;
        }
        v85->n128_u64[0] = v538;
        v85->n128_u32[2] = v534;
        v85[1].n128_u64[0] = v537;
        v85[1].n128_u32[2] = 4;
        v85 += 2;
        if (v90 > 2)
          goto LABEL_860;
LABEL_880:
        v548 = v760 * (unint64_t)v536;
        v549 = v537 + 8 * v90;
        v550 = v548 + v535;
        if (v85 >= v783)
        {
          v551 = ((char *)v85 - (char *)v93) >> 5;
          v552 = v551 + 1;
          if ((unint64_t)(v551 + 1) >> 59)
            goto LABEL_1084;
          v553 = (char *)v783 - (char *)v93;
          if (v783 - v93 > v552)
            v552 = v553 >> 4;
          if ((unint64_t)v553 >= 0x7FFFFFFFFFFFFFE0)
            v554 = 0x7FFFFFFFFFFFFFFLL;
          else
            v554 = v552;
          if (v554)
          {
            if (v554 >> 59)
              goto LABEL_1094;
            v555 = (char *)operator new(32 * v554);
            v535 = (v534 + 1);
          }
          else
          {
            v555 = 0;
          }
          v556 = (__n128 *)&v555[32 * v551];
          v556->n128_u64[0] = v550;
          v556->n128_u32[2] = v535;
          v556[1].n128_u64[0] = v549;
          v556[1].n128_u32[2] = 4;
          if (v85 == v93)
          {
            v559 = (__n128 *)&v555[32 * v551];
            v85 = v556 + 2;
            v783 = (__n128 *)&v555[32 * v554];
            if (v93)
            {
LABEL_899:
              operator delete(v93);
              v535 = (v534 + 1);
            }
          }
          else
          {
            v557 = (__n128 *)&v555[32 * v551];
            do
            {
              v87 = v85[-2];
              v558 = v85[-1];
              v559 = v557 - 2;
              v557[-2] = v87;
              v557[-1] = v558;
              v85 -= 2;
              v557 -= 2;
            }
            while (v85 != v93);
            v85 = v556 + 2;
            v783 = (__n128 *)&v555[32 * v554];
            if (v93)
              goto LABEL_899;
          }
          v93 = v559;
          v90 = v774;
          v532 = v736;
          v531 = __pf;
          if ((_DWORD)v529 != 2)
            goto LABEL_901;
          goto LABEL_860;
        }
        v85->n128_u64[0] = v550;
        v85->n128_u32[2] = v535;
        v85[1].n128_u64[0] = v549;
        v85[1].n128_u32[2] = 4;
        v85 += 2;
        if ((_DWORD)v529 == 2)
          goto LABEL_860;
LABEL_901:
        v560 = v549 + 8 * v90;
        v561 = v548 + v728;
        if (v85 >= v783)
        {
          v562 = ((char *)v85 - (char *)v93) >> 5;
          v563 = v562 + 1;
          if ((unint64_t)(v562 + 1) >> 59)
            goto LABEL_1084;
          v564 = (char *)v783 - (char *)v93;
          if (v783 - v93 > v563)
            v563 = v564 >> 4;
          if ((unint64_t)v564 >= 0x7FFFFFFFFFFFFFE0)
            v565 = 0x7FFFFFFFFFFFFFFLL;
          else
            v565 = v563;
          v566 = v534 + 2;
          if (v565)
          {
            if (v565 >> 59)
              goto LABEL_1094;
            v567 = (char *)operator new(32 * v565);
            v566 = v534 + 2;
          }
          else
          {
            v567 = 0;
          }
          v568 = (__n128 *)&v567[32 * v562];
          v568->n128_u64[0] = v561;
          v568->n128_u32[2] = v566;
          v568[1].n128_u64[0] = v560;
          v568[1].n128_u32[2] = 4;
          if (v85 == v93)
          {
            v571 = (__n128 *)&v567[32 * v562];
            v85 = v568 + 2;
            v783 = (__n128 *)&v567[32 * v565];
            if (v93)
LABEL_920:
              operator delete(v93);
          }
          else
          {
            v569 = (__n128 *)&v567[32 * v562];
            do
            {
              v87 = v85[-2];
              v570 = v85[-1];
              v571 = v569 - 2;
              v569[-2] = v87;
              v569[-1] = v570;
              v85 -= 2;
              v569 -= 2;
            }
            while (v85 != v93);
            v85 = v568 + 2;
            v783 = (__n128 *)&v567[32 * v565];
            if (v93)
              goto LABEL_920;
          }
          v93 = v571;
          v90 = v774;
          v532 = v736;
          v531 = __pf;
          v535 = (v534 + 1);
          if ((_DWORD)v529 != 3)
            goto LABEL_922;
          goto LABEL_860;
        }
        v85->n128_u64[0] = v561;
        v85->n128_u32[2] = v728;
        v85[1].n128_u64[0] = v560;
        v85[1].n128_u32[2] = 4;
        v85 += 2;
        if ((_DWORD)v529 != 3)
        {
LABEL_922:
          v572 = v560 + 8 * v90;
          v573 = v548 + v719;
          if (v85 < v783)
          {
            v85->n128_u64[0] = v573;
            v85->n128_u32[2] = v719;
            v85[1].n128_u64[0] = v572;
            v85[1].n128_u32[2] = 4;
            v85 += 2;
          }
          else
          {
            v574 = ((char *)v85 - (char *)v93) >> 5;
            v575 = v574 + 1;
            if ((unint64_t)(v574 + 1) >> 59)
              goto LABEL_1084;
            v576 = (char *)v783 - (char *)v93;
            if (v783 - v93 > v575)
              v575 = v576 >> 4;
            if ((unint64_t)v576 >= 0x7FFFFFFFFFFFFFE0)
              v577 = 0x7FFFFFFFFFFFFFFLL;
            else
              v577 = v575;
            v578 = v534 + 3;
            if (v577)
            {
              if (v577 >> 59)
                goto LABEL_1094;
              v579 = (char *)operator new(32 * v577);
              v578 = v534 + 3;
            }
            else
            {
              v579 = 0;
            }
            v580 = (__n128 *)&v579[32 * v574];
            v580->n128_u64[0] = v573;
            v580->n128_u32[2] = v578;
            v580[1].n128_u64[0] = v572;
            v580[1].n128_u32[2] = 4;
            if (v85 == v93)
            {
              v583 = (__n128 *)&v579[32 * v574];
              v85 = v580 + 2;
              v783 = (__n128 *)&v579[32 * v577];
              if (v93)
                goto LABEL_939;
            }
            else
            {
              v581 = (__n128 *)&v579[32 * v574];
              do
              {
                v87 = v85[-2];
                v582 = v85[-1];
                v583 = v581 - 2;
                v581[-2] = v87;
                v581[-1] = v582;
                v85 -= 2;
                v581 -= 2;
              }
              while (v85 != v93);
              v85 = v580 + 2;
              v783 = (__n128 *)&v579[32 * v577];
              if (v93)
LABEL_939:
                operator delete(v93);
            }
            v93 = v583;
            v90 = v774;
            v532 = v736;
            v531 = __pf;
            v535 = (v534 + 1);
          }
        }
LABEL_860:
        if (++v533 != v529)
          continue;
        break;
      }
      v531 += 4;
      if (v531 != v712)
        continue;
      break;
    }
    v781 = v93;
LABEL_944:
    v584 = ((v702 >> 2) & 0xFFFFFFFC) / v90;
    v695[v532] += v584;
    if (v90 <= 2)
    {
      v695[v532 + 1] += v584;
      if ((_DWORD)v529 != 2)
      {
        v695[v532 + 2] += v584;
        if ((_DWORD)v529 != 3)
          v695[v532 + 3] += v584;
      }
    }
    v527 = v706 + 1;
    v528 = v697;
    if (v706 + 1 < (unint64_t)*(unsigned int *)(v697 + 604))
      continue;
    break;
  }
LABEL_948:
  if (!*(_DWORD *)(v697 + 828) || v90 > 6)
    goto LABEL_1057;
  if (v90 > 4)
  {
    v585 = 0;
    v586 = v785;
    v587 = *(_QWORD *)(v697 + 1248);
    v588 = (_QWORD *)(*(_QWORD *)(v697 + 904) + 8);
    do
    {
      v589 = *(_DWORD *)(v587 + 4 * v585) / v90;
      v586[v589] += (((*v588 - *(v588 - 1)) >> 2) & 0xFFFFFFFC) / v90;
      ++v585;
      v588 += 3;
    }
    while (v585 < *(unsigned int *)(v697 + 828));
    goto LABEL_1057;
  }
  v590 = 0;
  v591 = v697;
  if (v678 <= 1)
    v592 = 1;
  else
    v592 = v678;
  __pg = *(char **)(v697 + 832);
  v751 = v592;
  v593 = 4 / v774;
  if (v676 <= 1)
    v593 = 1;
  v729 = v593;
  v691 = v785;
  while (2)
  {
    v594 = *(_QWORD *)(v591 + 904) + 24 * v590;
    v595 = *(unsigned int **)v594;
    v703 = v590;
    v707 = *(unsigned int **)(v594 + 8);
    v596 = *(_DWORD *)(*(_QWORD *)(v591 + 1248) + 4 * v590) / v90;
    v696 = (unint64_t)v707 - *(_QWORD *)v594;
    v737 = v596;
    if (v707 == *(unsigned int **)v594)
      goto LABEL_1051;
    while (2)
    {
      v597 = 0;
      v598 = *(_DWORD *)(*(_QWORD *)(v697 + 1224) + 4 * *v595) / v90;
      v599 = (v598 + 1);
      v713 = (v598 + 3);
      v720 = (v598 + 2);
      while (2)
      {
        v600 = v596 + v597;
        v601 = &__pg[8 * *((_QWORD *)v595 + 1) + 8 * (v772 * v597)];
        v602 = v598 + v760 * (unint64_t)(v596 + v597);
        if (v85 >= v783)
        {
          v603 = ((char *)v85 - (char *)v93) >> 5;
          v604 = v603 + 1;
          if ((unint64_t)(v603 + 1) >> 59)
            goto LABEL_1084;
          v605 = (char *)v783 - (char *)v93;
          if (v783 - v93 > v604)
            v604 = v605 >> 4;
          if ((unint64_t)v605 >= 0x7FFFFFFFFFFFFFE0)
            v606 = 0x7FFFFFFFFFFFFFFLL;
          else
            v606 = v604;
          if (v606)
          {
            if (v606 >> 59)
              goto LABEL_1094;
            v607 = (char *)operator new(32 * v606);
          }
          else
          {
            v607 = 0;
          }
          v608 = (__n128 *)&v607[32 * v603];
          v608->n128_u64[0] = v602;
          v608->n128_u32[2] = v598;
          v608[1].n128_u64[0] = (unint64_t)v601;
          v608[1].n128_u32[2] = 4;
          if (v85 == v93)
          {
            v611 = (__n128 *)&v607[32 * v603];
            v85 = v608 + 2;
            v783 = (__n128 *)&v607[32 * v606];
            if (v93)
LABEL_985:
              operator delete(v93);
          }
          else
          {
            v609 = (__n128 *)&v607[32 * v603];
            do
            {
              v87 = v85[-2];
              v610 = v85[-1];
              v611 = v609 - 2;
              v609[-2] = v87;
              v609[-1] = v610;
              v85 -= 2;
              v609 -= 2;
            }
            while (v85 != v93);
            v85 = v608 + 2;
            v783 = (__n128 *)&v607[32 * v606];
            if (v93)
              goto LABEL_985;
          }
          v93 = v611;
          v90 = v774;
          v596 = v737;
          v599 = (v598 + 1);
          if (v774 <= 2)
            goto LABEL_987;
          goto LABEL_967;
        }
        v85->n128_u64[0] = v602;
        v85->n128_u32[2] = v598;
        v85[1].n128_u64[0] = (unint64_t)v601;
        v85[1].n128_u32[2] = 4;
        v85 += 2;
        if (v90 > 2)
          goto LABEL_967;
LABEL_987:
        v612 = v760 * (unint64_t)v600;
        v613 = (unint64_t)&v601[8 * v90];
        v614 = v612 + v599;
        if (v85 >= v783)
        {
          v615 = ((char *)v85 - (char *)v93) >> 5;
          v616 = v615 + 1;
          if ((unint64_t)(v615 + 1) >> 59)
            goto LABEL_1084;
          v617 = (char *)v783 - (char *)v93;
          if (v783 - v93 > v616)
            v616 = v617 >> 4;
          if ((unint64_t)v617 >= 0x7FFFFFFFFFFFFFE0)
            v618 = 0x7FFFFFFFFFFFFFFLL;
          else
            v618 = v616;
          if (v618)
          {
            if (v618 >> 59)
              goto LABEL_1094;
            v619 = (char *)operator new(32 * v618);
            v599 = (v598 + 1);
          }
          else
          {
            v619 = 0;
          }
          v620 = (__n128 *)&v619[32 * v615];
          v620->n128_u64[0] = v614;
          v620->n128_u32[2] = v599;
          v620[1].n128_u64[0] = v613;
          v620[1].n128_u32[2] = 4;
          if (v85 == v93)
          {
            v623 = (__n128 *)&v619[32 * v615];
            v85 = v620 + 2;
            v783 = (__n128 *)&v619[32 * v618];
            if (v93)
            {
LABEL_1006:
              operator delete(v93);
              v599 = (v598 + 1);
            }
          }
          else
          {
            v621 = (__n128 *)&v619[32 * v615];
            do
            {
              v87 = v85[-2];
              v622 = v85[-1];
              v623 = v621 - 2;
              v621[-2] = v87;
              v621[-1] = v622;
              v85 -= 2;
              v621 -= 2;
            }
            while (v85 != v93);
            v85 = v620 + 2;
            v783 = (__n128 *)&v619[32 * v618];
            if (v93)
              goto LABEL_1006;
          }
          v93 = v623;
          v90 = v774;
          v596 = v737;
          if (v729 != 2)
            goto LABEL_1008;
          goto LABEL_967;
        }
        v85->n128_u64[0] = v614;
        v85->n128_u32[2] = v599;
        v85[1].n128_u64[0] = v613;
        v85[1].n128_u32[2] = 4;
        v85 += 2;
        if (v729 == 2)
          goto LABEL_967;
LABEL_1008:
        v624 = v613 + 8 * v90;
        v625 = v612 + v720;
        if (v85 >= v783)
        {
          v626 = ((char *)v85 - (char *)v93) >> 5;
          v627 = v626 + 1;
          if ((unint64_t)(v626 + 1) >> 59)
            goto LABEL_1084;
          v628 = (char *)v783 - (char *)v93;
          if (v783 - v93 > v627)
            v627 = v628 >> 4;
          if ((unint64_t)v628 >= 0x7FFFFFFFFFFFFFE0)
            v629 = 0x7FFFFFFFFFFFFFFLL;
          else
            v629 = v627;
          v630 = v598 + 2;
          if (v629)
          {
            if (v629 >> 59)
              goto LABEL_1094;
            v631 = (char *)operator new(32 * v629);
            v630 = v598 + 2;
          }
          else
          {
            v631 = 0;
          }
          v632 = (__n128 *)&v631[32 * v626];
          v632->n128_u64[0] = v625;
          v632->n128_u32[2] = v630;
          v632[1].n128_u64[0] = v624;
          v632[1].n128_u32[2] = 4;
          if (v85 == v93)
          {
            v635 = (__n128 *)&v631[32 * v626];
            v85 = v632 + 2;
            v783 = (__n128 *)&v631[32 * v629];
            if (v93)
LABEL_1027:
              operator delete(v93);
          }
          else
          {
            v633 = (__n128 *)&v631[32 * v626];
            do
            {
              v87 = v85[-2];
              v634 = v85[-1];
              v635 = v633 - 2;
              v633[-2] = v87;
              v633[-1] = v634;
              v85 -= 2;
              v633 -= 2;
            }
            while (v85 != v93);
            v85 = v632 + 2;
            v783 = (__n128 *)&v631[32 * v629];
            if (v93)
              goto LABEL_1027;
          }
          v93 = v635;
          v90 = v774;
          v596 = v737;
          v599 = (v598 + 1);
          if (v729 != 3)
            goto LABEL_1029;
          goto LABEL_967;
        }
        v85->n128_u64[0] = v625;
        v85->n128_u32[2] = v720;
        v85[1].n128_u64[0] = v624;
        v85[1].n128_u32[2] = 4;
        v85 += 2;
        if (v729 != 3)
        {
LABEL_1029:
          v636 = v624 + 8 * v90;
          v637 = v612 + v713;
          if (v85 < v783)
          {
            v85->n128_u64[0] = v637;
            v85->n128_u32[2] = v713;
            v85[1].n128_u64[0] = v636;
            v85[1].n128_u32[2] = 4;
            v85 += 2;
          }
          else
          {
            v638 = ((char *)v85 - (char *)v93) >> 5;
            v639 = v638 + 1;
            if ((unint64_t)(v638 + 1) >> 59)
              goto LABEL_1084;
            v640 = (char *)v783 - (char *)v93;
            if (v783 - v93 > v639)
              v639 = v640 >> 4;
            if ((unint64_t)v640 >= 0x7FFFFFFFFFFFFFE0)
              v641 = 0x7FFFFFFFFFFFFFFLL;
            else
              v641 = v639;
            v642 = v598 + 3;
            if (v641)
            {
              if (v641 >> 59)
                goto LABEL_1094;
              v643 = (char *)operator new(32 * v641);
              v642 = v598 + 3;
            }
            else
            {
              v643 = 0;
            }
            v644 = (__n128 *)&v643[32 * v638];
            v644->n128_u64[0] = v637;
            v644->n128_u32[2] = v642;
            v644[1].n128_u64[0] = v636;
            v644[1].n128_u32[2] = 4;
            if (v85 == v93)
            {
              v647 = (__n128 *)&v643[32 * v638];
              v85 = v644 + 2;
              v783 = (__n128 *)&v643[32 * v641];
              if (v93)
                goto LABEL_1046;
            }
            else
            {
              v645 = (__n128 *)&v643[32 * v638];
              do
              {
                v87 = v85[-2];
                v646 = v85[-1];
                v647 = v645 - 2;
                v645[-2] = v87;
                v645[-1] = v646;
                v85 -= 2;
                v645 -= 2;
              }
              while (v85 != v93);
              v85 = v644 + 2;
              v783 = (__n128 *)&v643[32 * v641];
              if (v93)
LABEL_1046:
                operator delete(v93);
            }
            v93 = v647;
            v90 = v774;
            v596 = v737;
            v599 = (v598 + 1);
          }
        }
LABEL_967:
        if (++v597 != v751)
          continue;
        break;
      }
      v595 += 4;
      if (v595 != v707)
        continue;
      break;
    }
    v781 = v93;
LABEL_1051:
    v648 = ((v696 >> 2) & 0xFFFFFFFC) / v90;
    v691[v596] += v648;
    if (v90 <= 3)
    {
      v691[v596 + 1] += v648;
      if ((_DWORD)v751 != 2)
      {
        v691[v596 + 2] += v648;
        if ((_DWORD)v751 != 3)
        {
          v691[v596 + 3] += v648;
          if ((_DWORD)v751 != 4)
          {
            v691[v596 + 4] += v648;
            if ((_DWORD)v751 != 5)
              v691[v596 + 5] += v648;
          }
        }
      }
    }
    v591 = v697;
    v590 = v703 + 1;
    if (v703 + 1 < (unint64_t)*(unsigned int *)(v697 + 828))
      continue;
    break;
  }
LABEL_1057:
  v649 = 126 - 2 * __clz(((char *)v85 - (char *)v93) >> 5);
  if (v85 == v93)
    v650 = 0;
  else
    v650 = v649;
  sub_20F7F1610((uint64_t)v93, v85, v650, 1, v87);
  *(_WORD *)(v697 + 2424) &= ~1u;
  sub_20F3DC8C4((uint64_t)v681, v760, &v785);
  v651 = v774;
  if (v679 >= v774)
  {
    if (v677 <= 1)
      v652 = 1;
    else
      v652 = v677;
    v752 = v652;
    v653 = 0;
    v654 = 8 * v774;
    v655 = v781;
    do
    {
      v656 = *(_QWORD *)(v697 + 2408);
      v657 = *(_QWORD *)(v656 + 8 * v653);
      v759 = v653 + 1;
      v658 = *(_QWORD *)(v656 + 8 * (v653 + 1));
      if (v657 != v658)
      {
        v659 = 8 * v657;
        v765 = *(_QWORD *)(v656 + 8 * (v653 + 1));
        do
        {
          *(_DWORD *)(*(_QWORD *)(v697 + 2416) + 4 * v657) = v655->n128_u32[2];
          v660 = v655[1].n128_u64[0];
          v661 = v655[1].n128_u32[2];
          v662 = *(unsigned __int8 *)(v697 + 2428);
          v663 = *(_QWORD *)(v697 + 2432);
          v664 = (v662 * v662);
          v773 = v659;
          if (v660 == v663 + 8 * v657 * v664)
          {
            v668 = (char *)operator new((8 * (_DWORD)v664 + 31) & 0xFFFE0, (std::align_val_t)0x20uLL);
            v669 = 0;
            v670 = v668;
            v671 = v774;
            do
            {
              memmove(v670, (const void *)(v660 + 8 * v669), v654);
              v669 += v661;
              v670 += v654;
              --v671;
            }
            while (v671);
            if ((_DWORD)v662)
            {
              v672 = 0;
              v673 = 8 * v662;
              do
              {
                memmove((void *)(v660 + v672), &v668[v672], v673);
                v672 += v673;
                --v662;
              }
              while (v662);
            }
            MEMORY[0x212BC6368](v668, 0x1000C8000313F17);
            v658 = v765;
          }
          else
          {
            v665 = 0;
            v666 = (char *)(v663
                          + v659
                          * *(unsigned __int8 *)(v697 + 2428)
                          * (unint64_t)*(unsigned __int8 *)(v697 + 2428));
            v667 = 8 * v662;
            do
            {
              memmove(v666, (const void *)(v660 + 8 * v665), v654);
              v666 += v667;
              v665 += v661;
              --v651;
            }
            while (v651);
          }
          v655 += 2;
          ++v657;
          v659 = v773 + 8;
          v651 = v774;
        }
        while (v657 != v658);
      }
      v653 = v759;
    }
    while (v759 != v752);
  }
  if (v781)
    operator delete(v781);
  v427 = v785;
  v415 = (_BYTE *)v697;
  v426 = v680;
  if (v785)
  {
LABEL_686:
    v786 = v427;
    operator delete(v427);
  }
LABEL_687:
  kdebug_trace();
  if (!v415[528])
    goto LABEL_1089;
  v428 = *((_DWORD *)v415 + 136);
  if (v428 != 1)
  {
    if (!v428)
      sub_20F3DC200(v681, *((double *)v415 + 67));
    goto LABEL_1089;
  }
  (*(void (**)(_BYTE *, double **))(*(_QWORD *)v415 + 160))(v415, v426);
  v780 = *((double *)v415 + 67);
  v429 = *((unsigned int *)v426 + 4);
  v430 = (8 * v429 + 31) & 0xFFFFFFFE0;
  v786 = (unsigned int *)(v430 >> 3);
  v431 = (unsigned int *)operator new(v430, (std::align_val_t)0x20uLL);
  v785 = v431;
  LODWORD(v787) = v429;
  if ((_DWORD)v429)
  {
    v432 = *v680;
    v433 = (v429 - 1) & 0x1FFFFFFFFFFFFFFFLL;
    if (v433 < 3)
    {
      v434 = (double *)v431;
    }
    else
    {
      v434 = (double *)v431;
      if ((unint64_t)((char *)v431 - (char *)v432) >= 0x20)
      {
        v435 = v433 + 1;
        v436 = 8 * (v435 & 0x3FFFFFFFFFFFFFFCLL);
        v434 = (double *)&v431[(unint64_t)v436 / 4];
        v437 = &v432[(unint64_t)v436 / 8];
        v438 = (float64x2_t *)(v432 + 2);
        v439 = (float64x2_t *)(v431 + 4);
        v440 = v435 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v441 = vmulq_n_f64(*v438, v780);
          v439[-1] = vmulq_n_f64(v438[-1], v780);
          *v439 = v441;
          v438 += 2;
          v439 += 2;
          v440 -= 4;
        }
        while (v440);
        v432 = v437;
        if (v435 == (v435 & 0x3FFFFFFFFFFFFFFCLL))
          goto LABEL_1087;
      }
    }
    do
    {
      v674 = *v432++;
      *v434++ = v780 * v674;
    }
    while (v434 != (double *)&v431[2 * v429]);
  }
LABEL_1087:
  sub_20F3DEB34(v681, &v785);
  v426 = v680;
  if (v785)
    MEMORY[0x212BC6368](v785, 0x1000C8000313F17);
LABEL_1089:
  (*(void (**)(_BYTE *, double **))(*(_QWORD *)v415 + 152))(v415, v426);
  kdebug_trace();
  if ((*(unsigned int (**)(_BYTE *, double **))(*(_QWORD *)v415 + 56))(v415, v426))
  {
    v4 = 1;
  }
  else
  {
    v4 = 0;
    v415[517] = 0;
  }
  kdebug_trace();
  return v4;
}

void sub_20F7E248C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(_QWORD *)(v1 - 112);
  if (v3)
  {
    MEMORY[0x212BC6368](v3, 0x1000C8000313F17);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_20F7E24F0()
{
  JUMPOUT(0x20F7E2588);
}

void sub_20F7E24F8()
{
  JUMPOUT(0x20F7E25C0);
}

void sub_20F7E2508()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 - 136) = v0;
  JUMPOUT(0x20F7E2578);
}

void sub_20F7E255C()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 - 136) = v0;
  JUMPOUT(0x20F7E2578);
}

void sub_20F7E2570(_Unwind_Exception *a1)
{
  uint64_t v1;
  void *v3;
  void *v4;

  v3 = *(void **)(v1 - 136);
  if (v3)
  {
    *(_QWORD *)(v1 - 128) = v3;
    operator delete(v3);
  }
  v4 = *(void **)(v1 - 112);
  if (v4)
  {
    *(_QWORD *)(v1 - 104) = v4;
    operator delete(v4);
    sub_20EDB4004(v1 - 137);
    _Unwind_Resume(a1);
  }
  sub_20EDB4004(v1 - 137);
  _Unwind_Resume(a1);
}

uint64_t sub_20F7E25E0(uint64_t a1)
{
  return a1 + 2448;
}

double sub_20F7E25E8(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  double *v5;
  double *v6;
  double v7;
  double v8;
  double *v9;
  unint64_t v10;
  double *v11;
  double result;
  unint64_t v13;
  uint64_t v14;
  float64x2_t *v15;
  float64x2_t *v16;
  uint64_t v17;
  float64x2_t v18;
  float64x2_t v19;
  double *v20;
  double v21;
  double v22;
  double v23;
  uint64_t v24;
  float64x2_t *v25;
  uint64_t i;
  uint64_t v27;
  unsigned int v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  double *v32;
  double *v33;
  double v34;
  double v35;
  double *v36;
  uint64_t v37;
  float64x2_t *v38;
  float64x2_t *v39;
  float64x2_t v40;
  float64x2_t v41;
  double *v42;
  double v43;
  double v44;
  double v45;
  float64x2_t *v46;
  float64x2_t *v47;
  uint64_t v53;
  float64x2_t v54;
  float64x2_t v55;
  float64x2_t *v56;
  uint64_t v58;
  float64x2_t v59;
  float64x2_t v60;
  uint64_t v61;
  double *v62;
  double v63;

  if (!(((*(_QWORD *)(a1 + 1856) - *(_QWORD *)(a1 + 1848)) >> 2)
       + ((*(_QWORD *)(a1 + 1832) - *(_QWORD *)(a1 + 1824)) >> 2)))
    return 0.0;
  v2 = (_QWORD *)(a1 + 1824);
  v3 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 1272) + 32))(a1 + 1272);
  sub_20F7F129C(v3, a1 + 2320, v2, (uint64_t *)(a1 + 1280));
  sub_20F3DA0B8((_QWORD *)(a1 + 1344), (void **)(a1 + 2224));
  sub_20F20B6B0(a1 + 2224);
  v4 = *(unsigned int *)(a1 + 2336);
  if (!(_DWORD)v4)
    return -0.0;
  v5 = *(double **)(a1 + 2320);
  v6 = *(double **)(a1 + 1304);
  v7 = *v5;
  v8 = *v5 * *v6;
  if ((_DWORD)v4 != 1)
  {
    v9 = v5 + 1;
    v10 = (v4 + 0x1FFFFFFFFFFFFFFELL) & 0x1FFFFFFFFFFFFFFFLL;
    if (v10 < 3)
    {
      v11 = *(double **)(a1 + 1304);
LABEL_12:
      v20 = v11 + 1;
      do
      {
        v21 = *v9++;
        v22 = v21;
        v23 = *v20++;
        v8 = v8 + v22 * v23;
      }
      while (v9 != &v5[v4]);
      goto LABEL_14;
    }
    v13 = v10 + 1;
    v14 = (v10 + 1) & 0x3FFFFFFFFFFFFFFCLL;
    v9 += v14;
    v11 = &v6[v14];
    v15 = (float64x2_t *)(v6 + 3);
    v16 = (float64x2_t *)(v5 + 3);
    v17 = v14;
    do
    {
      v18 = vmulq_f64(v16[-1], v15[-1]);
      v19 = vmulq_f64(*v16, *v15);
      v8 = v8 + v18.f64[0] + v18.f64[1] + v19.f64[0] + v19.f64[1];
      v15 += 2;
      v16 += 2;
      v17 -= 4;
    }
    while (v17);
    if (v13 != v14)
      goto LABEL_12;
  }
LABEL_14:
  result = -v8;
  v24 = *(unsigned int *)(a1 + 2240);
  if (!(_DWORD)v24)
  {
    if (v4 >= 4)
    {
      v27 = v4 & 0xFFFFFFFC;
      v56 = (float64x2_t *)(v5 + 2);
      __asm { FMOV            V1.2D, #0.5 }
      v58 = v27;
      do
      {
        v59 = vmulq_f64(vmulq_f64(v56[-1], _Q1), (float64x2_t)0);
        v60 = vmulq_f64(vmulq_f64(*v56, _Q1), (float64x2_t)0);
        result = result + v59.f64[0] + v59.f64[1] + v60.f64[0] + v60.f64[1];
        v56 += 2;
        v58 -= 4;
      }
      while (v58);
      if (v27 == v4)
        return result;
    }
    else
    {
      v27 = 0;
    }
    v61 = v4 - v27;
    v62 = &v5[v27];
    do
    {
      v63 = *v62++;
      result = result + v63 * 0.5 * 0.0;
      --v61;
    }
    while (v61);
    return result;
  }
  v25 = *(float64x2_t **)(a1 + 2224);
  if ((_DWORD)v24 != 1)
  {
    v28 = 0;
    v29 = 0;
    v30 = (v24 + 0x1FFFFFFFFFFFFFFELL) & 0x1FFFFFFFFFFFFFFFLL;
    v31 = (v30 + 1) & 0x3FFFFFFFFFFFFFFCLL;
    while (1)
    {
      v32 = &v25->f64[(v24 * v29)];
      v34 = *v32;
      v33 = v32 + 1;
      v35 = v7 * v34;
      if (v30 >= 3)
      {
        v33 += v31;
        v37 = (v30 + 1) & 0x3FFFFFFFFFFFFFFCLL;
        v38 = (float64x2_t *)(v5 + 3);
        v39 = (float64x2_t *)((char *)v25 + 8 * v28 + 24);
        do
        {
          v40 = vmulq_f64(v39[-1], v38[-1]);
          v41 = vmulq_f64(*v39, *v38);
          v35 = v35 + v40.f64[0] + v40.f64[1] + v41.f64[0] + v41.f64[1];
          v38 += 2;
          v39 += 2;
          v37 -= 4;
        }
        while (v37);
        v36 = &v5[v31];
        if (v30 + 1 == v31)
          goto LABEL_21;
      }
      else
      {
        v36 = *(double **)(a1 + 2320);
      }
      v42 = v36 + 1;
      do
      {
        v43 = *v33++;
        v44 = v43;
        v45 = *v42++;
        v35 = v35 + v44 * v45;
      }
      while (v33 != &v25->f64[(v24 * v29) + v24]);
LABEL_21:
      result = result + v5[v29++] * 0.5 * v35;
      v28 += v24;
      if (v29 == v4)
        return result;
    }
  }
  if (v4 < 4)
  {
    for (i = 0; i != v4; ++i)
LABEL_33:
      result = result + v5[i] * 0.5 * (v7 * v25->f64[i]);
    return result;
  }
  i = v4 & 0xFFFFFFFC;
  v46 = (float64x2_t *)(v5 + 2);
  v47 = v25 + 1;
  __asm { FMOV            V2.2D, #0.5 }
  v53 = i;
  do
  {
    v54 = vmulq_f64(vmulq_f64(v46[-1], _Q2), vmulq_n_f64(v47[-1], v7));
    v55 = vmulq_f64(vmulq_f64(*v46, _Q2), vmulq_n_f64(*v47, v7));
    result = result + v54.f64[0] + v54.f64[1] + v55.f64[0] + v55.f64[1];
    v46 += 2;
    v47 += 2;
    v53 -= 4;
  }
  while (v53);
  if (i != v4)
    goto LABEL_33;
  return result;
}

double sub_20F7E298C(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  double i;
  double v5;
  double *v6;
  long double v7;
  uint64_t v15;
  unsigned __int8 v16;
  uint64_t j;
  uint64_t v18;
  uint64_t v19;
  unsigned int v26;
  uint64_t v27;
  int v28;
  __int128 v29;
  uint64_t v30;

  v2 = a1[6];
  v3 = a1[7];
  for (i = 0.0; v2 != v3; v2 += 16)
  {
    v15 = *(_QWORD *)(v2 + 8);
    if ((*(_BYTE *)(v15 + 4) & 2) == 0 && *(_BYTE *)(v15 + 20))
    {
      v16 = atomic_load((unsigned __int8 *)&qword_254A541B8);
      if ((v16 & 1) == 0 && __cxa_guard_acquire(&qword_254A541B8))
      {
        qword_254A541B0 = 0x3E50000000000000;
        __cxa_guard_release(&qword_254A541B8);
      }
      v6 = (double *)(v15 + 32);
      v5 = *(double *)(v15 + 40);
      if (fabs(v5) <= *(double *)&qword_254A541B0 && fabs(*v6) <= *(double *)&qword_254A541B0
        || fabs(*(double *)(v15 + 72)) <= *(double *)&qword_254A541B0
        && fabs(*(double *)(v15 + 96)) <= *(double *)&qword_254A541B0)
      {
        v5 = -*(double *)(v15 + 56);
        v6 = (double *)(v15 + 64);
      }
      v7 = atan2(v5, *v6);
      cos(v7 * 0.5);
      _Q2 = *(_OWORD *)(v15 + 104);
      _D3 = *(_QWORD *)(v15 + 112);
      __asm { FMLA            D0, D3, V2.D[1] }
      i = i + _D0 + *(double *)(v15 + 120) * *(double *)(v15 + 120);
    }
  }
  v18 = a1[18];
  for (j = a1[19]; v18 != j; v18 += 16)
  {
    v19 = *(_QWORD *)(v18 + 8);
    if ((*(_BYTE *)(v19 + 4) & 2) == 0 && *(_BYTE *)(v19 + 20))
    {
      v26 = 3;
      v27 = v19 + 32;
      v28 = 0;
      v30 = 0;
      v29 = 0uLL;
      sub_20F053450(&v26, (double *)&v29);
      _V1.D[1] = *((_QWORD *)&v29 + 1);
      _D5 = *((_QWORD *)&v29 + 1);
      __asm { FMLA            D4, D5, V1.D[1] }
      _D1 = *(_QWORD *)(v19 + 112);
      __asm { FMLA            D0, D1, V3.D[1] }
      i = i + _D0 + *(double *)(v19 + 120) * *(double *)(v19 + 120);
    }
  }
  return i;
}

uint64_t sub_20F7E2B60(uint64_t a1, _QWORD *a2)
{
  float64x2_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  float64x2_t v8;
  double v14;
  double cosval;
  __double2 v16;
  float64x2_t v17;
  float64x2_t v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  float64_t v25;
  double v26;
  float64_t v27;
  double v28;
  double v29;
  double v30;
  double v31;
  float64x2_t v32;
  int64x2_t v33;
  int64x2_t v34;
  float64x2_t v36;
  float64x2_t v37;
  int8x16_t v38;
  double v39;
  float64x2_t v41;
  float64x2_t v43;
  float64x2_t v44;
  int64x2_t v45;
  int64x2_t v46;
  int64x2_t v47;
  int64x2_t v48;
  double v50;
  float64x2_t v52;
  float64x2_t v54;
  unsigned int *v55;
  uint64_t v56;
  __int128 v57;
  __int128 v58;
  float64x2_t *v59;
  double v60;
  uint64_t v61;
  uint64_t i;
  double v63;
  double v64;
  __double2 v65;
  float64x2_t v66;
  float64_t v69;
  double v70;
  double v71;
  double v72;
  double v73;
  double v74;
  double v75;
  float64_t v76;
  double v77;
  double v78;
  double v79;
  double v80;
  double v81;
  double v82;
  float64x2_t v83;
  double v84;
  float64x2_t v85;
  double v86;
  float64x2_t v87;
  float64x2_t v88;
  float64x2_t v89;
  float64x2_t v91;
  double v92;
  double v93;
  unsigned int *v95;
  uint64_t v96;
  __int128 v97;
  uint64_t v99;
  uint64_t result;
  float64x2_t v103;
  uint64_t v104;
  float64x2_t v105;
  float64_t v106;
  float64x2_t v107;
  double v108;

  kdebug_trace();
  v5 = *(_QWORD **)(a1 + 1120);
  v6 = v5[1];
  v7 = v5[2];
  if (v6 != v7)
  {
    v8 = 0uLL;
    __asm { FMOV            V25.2D, #1.0 }
    v104 = *((_QWORD *)&_Q25 + 1);
    do
    {
      v55 = *(unsigned int **)(v6 + 8);
      v56 = *v55;
      if ((_DWORD)v56 != -1)
      {
        v57 = *((_OWORD *)v55 + 3);
        *(_OWORD *)(v55 + 34) = *((_OWORD *)v55 + 2);
        *((_QWORD *)v55 + 25) = *((_QWORD *)v55 + 12);
        v58 = *((_OWORD *)v55 + 4);
        *(_OWORD *)(v55 + 46) = *((_OWORD *)v55 + 5);
        *(_OWORD *)(v55 + 42) = v58;
        *(_OWORD *)(v55 + 38) = v57;
        *((_OWORD *)v55 + 13) = *(_OWORD *)(v55 + 26);
        *((_QWORD *)v55 + 28) = *((_QWORD *)v55 + 15);
        v59 = (float64x2_t *)(*a2 + 8 * *(unsigned int *)(*(_QWORD *)(a1 + 1224) + 4 * v56));
        v18 = *v59;
        v17 = v59[1];
        v60 = vmlad_n_f64(0.0, v18.f64[0], v18.f64[0]);
        if (v60 >= 0.0000002635)
        {
          v14 = sqrt(v60);
          v105 = *v59;
          v107 = v59[1];
          v16 = __sincos_stret(v14);
          cosval = v16.__cosval;
          v18 = v105;
          v17 = v107;
          *((_QWORD *)&_Q25 + 1) = v104;
          v8 = 0uLL;
          v19 = v16.__sinval / v14;
          v20 = 1.0 / v60 * (1.0 - v16.__cosval);
        }
        else
        {
          v20 = 0.5 - v60 * (v60 / -720.0 + 0.0416666667);
          v19 = 1.0 - v60 * (0.166666667 - v60 * (v60 / -5040.0 + 0.00833333333));
          cosval = 1.0 - v60 * v20;
        }
        v21 = v20 * 0.0;
        v22 = v20 * 0.0 * 0.0;
        v23 = cosval + v22;
        v24 = cosval + v18.f64[0] * (v18.f64[0] * v20);
        v25 = v18.f64[0] * v21;
        v26 = v19 * 0.0;
        v27 = v18.f64[0] * v19;
        v28 = v21 * 0.0 - v27;
        v29 = v26 + v18.f64[0] * v21;
        v30 = v22 + v27;
        v31 = v25 - v26;
        v32.f64[0] = *((float64_t *)v55 + 6);
        v33 = *((int64x2_t *)v55 + 2);
        v34 = *(int64x2_t *)(v55 + 14);
        _Q18 = *((float64x2_t *)v55 + 5);
        v36 = (float64x2_t)vzip1q_s64(v33, v34);
        v37 = (float64x2_t)vzip2q_s64(v33, v34);
        v32.f64[1] = *((float64_t *)v55 + 9);
        v38 = vextq_s8((int8x16_t)v37, (int8x16_t)vdupq_laneq_s64((int64x2_t)_Q18, 1), 8uLL);
        v39 = *((double *)v55 + 15);
        _Q17 = *(float64x2_t *)(v55 + 26);
        v41 = vmlaq_laneq_f64(vmulq_n_f64(v36, _Q17.f64[0]), v37, _Q17, 1);
        _Q23 = vmulq_f64(_Q18, _Q17);
        _Q17.f64[0] = *((float64_t *)v55 + 14);
        __asm { FMLA            D23, D17, V18.D[1] }
        _Q23.f64[0] = _Q23.f64[0] + *((double *)v55 + 12) * v39;
        _Q17.f64[0] = *((float64_t *)v55 + 10);
        *(_QWORD *)&v37.f64[1] = v38.i64[0];
        v38.i64[0] = *((_QWORD *)v55 + 12);
        v43.f64[1] = *((float64_t *)&_Q25 + 1);
        *(_QWORD *)&v43.f64[0] = *(_OWORD *)&vnegq_f64(_Q23);
        v44 = vmlaq_n_f64(v41, v32, v39);
        v45 = (int64x2_t)vmlsq_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v36, v23), v37, v30), v32, v31), v8, v44);
        v46 = (int64x2_t)vmlaq_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64((float64x2_t)*(unint64_t *)&_Q17.f64[0], v23), (float64x2_t)v38.u64[1], v30), (float64x2_t)v38.u64[0], v31), v8, v43);
        v47 = (int64x2_t)vmlsq_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v36, v28), v37, v23), v32, v29), v8, v44);
        v48 = (int64x2_t)vmlaq_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64((float64x2_t)*(unint64_t *)&_Q17.f64[0], v28), (float64x2_t)v38.u64[1], v23), (float64x2_t)v38.u64[0], v29), v8, v43);
        _Q7 = vmlsq_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v36, v29), v37, v31), v32, v24), v8, v44);
        *(_QWORD *)&v50 = *(_OWORD *)&vmlaq_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64((float64x2_t)*(unint64_t *)&_Q17.f64[0], v29), (float64x2_t)v38.u64[1], v31), (float64x2_t)v38.u64[0], v24), v8, v43);
        _Q0 = vsubq_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmulq_laneq_f64(v36, v18, 1), v37, v17.f64[0]), v32, v17, 1), v44);
        *(_QWORD *)&v32.f64[0] = *(_OWORD *)&vaddq_f64(v43, vmlaq_laneq_f64(vmlaq_n_f64(vmulq_laneq_f64((float64x2_t)*(unint64_t *)&_Q17.f64[0], v18, 1), (float64x2_t)v38.u64[1], v17.f64[0]), (float64x2_t)v38.u64[0], v17, 1));
        v52 = (float64x2_t)vzip1q_s64(v45, v47);
        _Q4 = (float64x2_t)vzip2q_s64(v45, v47);
        v54 = (float64x2_t)vzip1q_s64(v46, v48);
        *((float64x2_t *)v55 + 2) = v52;
        *((_QWORD *)v55 + 6) = *(_QWORD *)&_Q7.f64[0];
        *((_QWORD *)v55 + 9) = *(_QWORD *)&_Q7.f64[1];
        *(float64x2_t *)(v55 + 14) = _Q4;
        *((float64x2_t *)v55 + 5) = v54;
        *((double *)v55 + 12) = v50;
        v4 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v52, _Q0.f64[0]), _Q4, _Q0, 1), v54, v32.f64[0]);
        _Q0.f64[0] = _Q0.f64[1];
        __asm { FMLA            D4, D0, V7.D[1] }
        _Q4.f64[0] = vmlad_n_f64(_Q4.f64[0], v32.f64[0], v50);
        *(float64x2_t *)(v55 + 26) = vnegq_f64(v4);
        *((_QWORD *)v55 + 15) = *(_OWORD *)&vnegq_f64(_Q4);
      }
      v6 += 16;
    }
    while (v6 != v7);
  }
  v61 = v5[13];
  for (i = v5[14]; v61 != i; v61 += 16)
  {
    v95 = *(unsigned int **)(v61 + 8);
    v96 = *v95;
    if ((_DWORD)v96 != -1)
    {
      *((_QWORD *)v95 + 24) = *((_QWORD *)v95 + 12);
      v97 = *((_OWORD *)v95 + 5);
      *((_OWORD *)v95 + 10) = *((_OWORD *)v95 + 4);
      *((_OWORD *)v95 + 11) = v97;
      _Q1 = *((float64x2_t *)v95 + 3);
      *((_OWORD *)v95 + 8) = *((_OWORD *)v95 + 2);
      *((float64x2_t *)v95 + 9) = _Q1;
      *(_OWORD *)(v95 + 50) = *(_OWORD *)(v95 + 26);
      *((_QWORD *)v95 + 27) = *((_QWORD *)v95 + 15);
      v99 = *a2 + 8 * *(unsigned int *)(*(_QWORD *)(a1 + 1248) + 4 * v96);
      _Q0 = *(float64x2_t *)v99;
      _Q1.f64[0] = *(float64_t *)(v99 + 16);
      *(_QWORD *)&_D17 = *(_OWORD *)&vnegq_f64(_Q1);
      v66 = vnegq_f64(*(float64x2_t *)v99);
      _D12 = v66.f64[1];
      _Q3 = vmulq_f64(_Q0, _Q0);
      __asm
      {
        FMLS            D3, D12, V0.D[1]
        FMLS            D3, D17, V1.D[0]
      }
      if (_Q3.f64[0] >= 0.0000002635)
      {
        v63 = sqrt(_Q3.f64[0]);
        v106 = v66.f64[0];
        v108 = _D17;
        v103 = _Q3;
        v65 = __sincos_stret(v63);
        v64 = v65.__cosval;
        v66.f64[0] = v106;
        _D17 = v108;
        v4.f64[1] = v103.f64[1];
        _Q0.f64[0] = v65.__sinval / v63;
        v4.f64[0] = 1.0 / v103.f64[0] * (1.0 - v65.__cosval);
      }
      else
      {
        v4.f64[0] = 0.5 - _Q3.f64[0] * (_Q3.f64[0] / -720.0 + 0.0416666667);
        _Q0.f64[0] = 1.0 - _Q3.f64[0] * (0.166666667 - _Q3.f64[0] * (_Q3.f64[0] / -5040.0 + 0.00833333333));
        v64 = 1.0 - _Q3.f64[0] * v4.f64[0];
      }
      v69 = v66.f64[0] * v4.f64[0];
      v70 = _D12 * v4.f64[0];
      v71 = v64 + v66.f64[0] * (v66.f64[0] * v4.f64[0]);
      v72 = v64 + _D12 * (_D12 * v4.f64[0]);
      v73 = v64 + _D17 * (_D17 * v4.f64[0]);
      v4.f64[0] = _D12 * (v66.f64[0] * v4.f64[0]);
      v74 = _D17 * v69;
      v75 = _D17 * v70;
      v76 = v66.f64[0] * _Q0.f64[0];
      v77 = _D12 * _Q0.f64[0];
      _Q0.f64[0] = _D17 * _Q0.f64[0];
      v78 = v4.f64[0] - _Q0.f64[0];
      v79 = v77 + v74;
      _Q0.f64[0] = v4.f64[0] + _Q0.f64[0];
      v4.f64[0] = v75 - v76;
      v80 = v74 - v77;
      v81 = v76 + v75;
      v82 = *((double *)v95 + 6);
      v83 = *((float64x2_t *)v95 + 2);
      v84 = *((double *)v95 + 9);
      v85 = *(float64x2_t *)(v95 + 14);
      v86 = *((double *)v95 + 12);
      v87 = *((float64x2_t *)v95 + 5);
      v88 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v83, v71), v85, _Q0.f64[0]), v87, v80);
      _Q0.f64[0] = v82 * v71 + v84 * _Q0.f64[0] + v86 * v80;
      v89 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v83, v78), v85, v72), v87, v81);
      _D4 = v82 * v78 + v84 * v72 + v86 * v81;
      v91 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v83, v79), v85, v4.f64[0]), v87, v73);
      v92 = v82 * v79 + v84 * v4.f64[0] + v86 * v73;
      *((_QWORD *)v95 + 6) = *(_QWORD *)&_Q0.f64[0];
      *((float64x2_t *)v95 + 2) = v88;
      *((double *)v95 + 9) = _D4;
      *(float64x2_t *)(v95 + 14) = v89;
      *((double *)v95 + 12) = v92;
      *((float64x2_t *)v95 + 5) = v91;
      v4.f64[0] = *((float64_t *)v95 + 15);
      v93 = *(double *)(v99 + 40);
      _Q16 = *(float64x2_t *)(v99 + 24);
      __asm { FMLA            D0, D4, V16.D[1] }
      _Q0.f64[0] = _Q0.f64[0] + v92 * v93;
      *(float64x2_t *)(v95 + 26) = vsubq_f64(*(float64x2_t *)(v95 + 26), vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v88, _Q16.f64[0]), v89, _Q16, 1), v91, v93));
      *((_QWORD *)v95 + 15) = *(_OWORD *)&vsubq_f64(v4, _Q0);
    }
  }
  result = kdebug_trace();
  *(_BYTE *)(a1 + 514) = *(_BYTE *)(a1 + 513);
  *(_BYTE *)(a1 + 517) = 0;
  *(_WORD *)(a1 + 512) = 0;
  *(_WORD *)(a1 + 515) = 0;
  return result;
}

BOOL sub_20F7E310C(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  int v8;
  int v10;
  unsigned int v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  _OWORD v15[6];
  uint64_t v16;

  v4 = *(_OWORD *)(a1 + 2416);
  v12 = *(_OWORD *)(a1 + 2400);
  v13 = v4;
  v14 = *(_QWORD *)(a1 + 2432);
  WORD4(v13) = WORD4(v4) & 0xFFF1 | 0xC;
  if (*(_DWORD *)(a1 + 2512) != 2)
  {
    sub_20E8BF000(a1 + 2520);
    *(_DWORD *)(a1 + 2512) = 2;
  }
  *(_DWORD *)(a1 + 2520) = -3;
  *(_OWORD *)(a1 + 2576) = 0u;
  *(_OWORD *)(a1 + 2546) = 0u;
  *(_OWORD *)(a1 + 2562) = 0u;
  *(_DWORD *)(a1 + 2528) = -3;
  *(_DWORD *)(a1 + 2540) = 0;
  *(_QWORD *)(a1 + 2532) = 0;
  *(_WORD *)(a1 + 2544) = 1;
  *(_BYTE *)(a1 + 2592) = 1;
  *(_QWORD *)(a1 + 2600) = 0;
  sub_20E8BF040(SparseFactorizationCholesky, (uint64_t)&v12, (uint64_t)v15);
  v5 = v15[5];
  *(_OWORD *)(a1 + 2584) = v15[4];
  *(_OWORD *)(a1 + 2600) = v5;
  *(_QWORD *)(a1 + 2616) = v16;
  v6 = v15[1];
  *(_OWORD *)(a1 + 2520) = v15[0];
  *(_OWORD *)(a1 + 2536) = v6;
  v7 = v15[3];
  *(_OWORD *)(a1 + 2552) = v15[2];
  *(_OWORD *)(a1 + 2568) = v7;
  v8 = *(_DWORD *)(a1 + 2520);
  switch(v8)
  {
    case -4:
    case -3:
      goto LABEL_6;
    case -2:
    case -1:
      *(_DWORD *)(a1 + 2512) = 1;
      *(_BYTE *)(a1 + 512) = 0;
      return 1;
    case 0:
      goto LABEL_7;
    default:
      if (v8 == -2147483647)
      {
LABEL_6:
        v8 = 2;
LABEL_7:
        *(_DWORD *)(a1 + 2512) = v8;
        *(_BYTE *)(a1 + 512) = v8 == 0;
        if (v8)
          return 1;
      }
      else
      {
        v10 = *(_DWORD *)(a1 + 2512);
        *(_BYTE *)(a1 + 512) = v10 == 0;
        if (v10)
          return 1;
      }
      v11 = *(_DWORD *)(a2 + 16);
      if (v11 != *(_DWORD *)(a1 + 2532) * *(unsigned __int8 *)(a1 + 2544))
        return 0;
      *((_QWORD *)&v15[0] + 1) = *(_QWORD *)a2;
      *(_QWORD *)&v15[0] = v11;
      sub_20E8BF7C8(a1 + 2520, (uint64_t)v15, 0);
      return *(_BYTE *)(a1 + 512) == 0;
  }
}

uint64_t sub_20F7E32DC()
{
  return 1;
}

uint64_t sub_20F7E32E4()
{
  return 0;
}

_QWORD *sub_20F7E32EC(uint64_t a1)
{
  *(_QWORD *)a1 = off_24CA02C18;
  if (*(_DWORD *)(a1 + 2512) != 2)
    sub_20E8BF000(a1 + 2520);
  return sub_20F7DAD10(a1);
}

void sub_20F7E3330(uint64_t a1)
{
  *(_QWORD *)a1 = off_24CA02C18;
  if (*(_DWORD *)(a1 + 2512) != 2)
    sub_20E8BF000(a1 + 2520);
  sub_20F7DAD10(a1);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20F7E3388(uint64_t result)
{
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  double v4;
  unsigned int *v5;
  unsigned int *v6;
  unint64_t v7;
  uint64_t v8;
  float64_t *v9;
  float64x2_t v10;
  float64x2_t v11;
  double v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unsigned int *v16;
  unsigned int *v17;
  unint64_t v18;
  uint64_t v19;
  float64_t *v20;
  float64x2_t v21;
  float64x2_t v22;
  float64x2_t v23;
  double v24;

  v1 = *(unsigned int *)(result + 600);
  if ((_DWORD)v1)
  {
    v2 = 0;
    v3 = *(_QWORD *)(result + 680);
    v4 = 0.0;
    do
    {
      v5 = *(unsigned int **)(v3 + 24 * v2);
      v6 = *(unsigned int **)(v3 + 24 * v2 + 8);
      if (v6 != v5)
      {
        while (1)
        {
          v7 = *v5;
          if (v2 <= v7)
            break;
          v5 += 4;
          if (v5 == v6)
            goto LABEL_3;
        }
        if (v5 != v6 && v2 == v7)
        {
          v8 = *(_QWORD *)(result + 608);
          if (v8)
          {
            v9 = (float64_t *)(v8 + 8 * *((_QWORD *)v5 + 1));
            v10.f64[0] = *v9;
            v11.f64[0] = v9[10];
            v10.f64[1] = v9[5];
            v11.f64[1] = v9[15];
            v12 = vmaxnmvq_f64(vmaxnmq_f64(vabsq_f64(v10), vabsq_f64(v11)));
            if (v4 < v12)
              v4 = v12;
          }
        }
      }
LABEL_3:
      ++v2;
    }
    while (v2 != v1);
  }
  else
  {
    v4 = 0.0;
  }
  v13 = *(unsigned int *)(result + 936);
  if ((_DWORD)v13)
  {
    v14 = 0;
    v15 = *(_QWORD *)(result + 1016);
    do
    {
      v16 = *(unsigned int **)(v15 + 24 * v14);
      v17 = *(unsigned int **)(v15 + 24 * v14 + 8);
      if (v17 != v16)
      {
        while (1)
        {
          v18 = *v16;
          if (v14 <= v18)
            break;
          v16 += 4;
          if (v16 == v17)
            goto LABEL_17;
        }
        if (v16 != v17 && v14 == v18)
        {
          v19 = *(_QWORD *)(result + 944);
          if (v19)
          {
            v20 = (float64_t *)(v19 + 8 * *((_QWORD *)v16 + 1));
            v21.f64[0] = *v20;
            v22.f64[0] = v20[14];
            v23.f64[0] = v20[28];
            v21.f64[1] = v20[7];
            v23.f64[1] = v20[35];
            v22.f64[1] = v20[21];
            v24 = vmaxnmvq_f64(vmaxnmq_f64(vmaxnmq_f64(vabsq_f64(v21), vabsq_f64(v23)), vabsq_f64(v22)));
            if (v4 < v24)
              v4 = v24;
          }
        }
      }
LABEL_17:
      ++v14;
    }
    while (v14 != v13);
  }
  return result;
}

uint64_t sub_20F7E34F0(uint64_t result, double a2)
{
  *(double *)(result + 536) = a2;
  return result;
}

uint64_t sub_20F7E34F8(uint64_t result, char a2)
{
  *(_BYTE *)(result + 1872) = a2;
  return result;
}

uint64_t sub_20F7E3500(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 1872);
}

BOOL sub_20F7E3508(_QWORD *a1)
{
  return ((a1[232] - a1[231]) >> 2) + ((a1[229] - a1[228]) >> 2) != 0;
}

uint64_t sub_20F7E3534(uint64_t a1)
{
  return a1 + 1304;
}

uint64_t sub_20F7E353C(uint64_t a1)
{
  return a1 + 1304;
}

__n128 sub_20F7E3544(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  size_t v5;
  __n128 result;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  _OWORD *v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;

  v4 = *(unsigned int *)(a1 + 568);
  if (*(_DWORD *)(a2 + 16) != (_DWORD)v4)
  {
    *(_DWORD *)(a2 + 16) = v4;
    if (*(_QWORD *)(a2 + 8) < v4)
    {
      if (*(_QWORD *)a2)
        MEMORY[0x212BC6368](*(_QWORD *)a2, 0x1000C8000313F17);
      v5 = (8 * v4 + 31) & 0xFFFFFFFE0;
      *(_QWORD *)a2 = 0;
      *(_QWORD *)(a2 + 8) = v5 >> 3;
      *(_QWORD *)a2 = operator new(v5, (std::align_val_t)0x20uLL);
    }
  }
  v7 = *(unsigned int *)(a1 + 576);
  if ((_DWORD)v7)
  {
    v8 = 0;
    v9 = *(_DWORD *)(a1 + 584);
    v10 = 4 * v7;
    do
    {
      v11 = *(_QWORD *)(a1 + 552) + 8 * (v9 + v8);
      v12 = (_OWORD *)(*(_QWORD *)a2 + 8 * *(unsigned int *)(*(_QWORD *)(a1 + 1224) + v8));
      result = *(__n128 *)v11;
      v13 = *(_OWORD *)(v11 + 16);
      *v12 = *(_OWORD *)v11;
      v12[1] = v13;
      v8 += 4;
    }
    while (v10 != v8);
  }
  v14 = *(unsigned int *)(a1 + 580);
  if ((_DWORD)v14)
  {
    v15 = 0;
    v16 = *(_DWORD *)(a1 + 588);
    v17 = 4 * v14;
    do
    {
      v18 = *(_QWORD *)(a1 + 552) + 8 * v16;
      v19 = *(_QWORD *)a2 + 8 * *(unsigned int *)(*(_QWORD *)(a1 + 1248) + v15);
      result = *(__n128 *)(v18 + 32);
      v20 = *(_OWORD *)v18;
      *(_OWORD *)(v19 + 16) = *(_OWORD *)(v18 + 16);
      *(__n128 *)(v19 + 32) = result;
      *(_OWORD *)v19 = v20;
      v15 += 4;
      v16 += 6;
    }
    while (v17 != v15);
  }
  return result;
}

uint64_t sub_20F7E3658(uint64_t a1, void **a2)
{
  unint64_t v4;
  unsigned int v5;
  size_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;

  v4 = (6 * *(_DWORD *)(*(_QWORD *)(a1 + 1056) + 8) + 4 * *(_DWORD *)(*(_QWORD *)(a1 + 1040) + 8));
  v5 = v4;
  *((_DWORD *)a2 + 4) = v4;
  if ((unint64_t)a2[1] < v4)
  {
    if (*a2)
    {
      MEMORY[0x212BC6368](*a2, 0x1000C8000313F17);
      v5 = *((_DWORD *)a2 + 4);
    }
    v6 = (8 * v4 + 31) & 0xFFFFFFFE0;
    *a2 = 0;
    a2[1] = (void *)(v6 >> 3);
    *a2 = operator new(v6, (std::align_val_t)0x20uLL);
  }
  if (v5)
    bzero(*a2, 8 * v5);
  if (*(_QWORD *)(a1 + 1224) != *(_QWORD *)(a1 + 1232))
  {
    v7 = *(unsigned int *)(a1 + 604);
    if ((_DWORD)v7)
    {
      v8 = 0;
      v9 = *(uint64_t **)(a1 + 680);
      v10 = *v9;
      v11 = v9[1];
      if (v10 != v11)
        goto LABEL_14;
LABEL_12:
      while (++v8 < v7)
      {
        v12 = (uint64_t *)(*(_QWORD *)(a1 + 680) + 24 * v8);
        v10 = *v12;
        v11 = v12[1];
        if (v10 != v11)
        {
LABEL_14:
          while (v8 != *(_DWORD *)v10)
          {
            v10 += 16;
            if (v10 == v11)
              goto LABEL_12;
          }
          v13 = *(_QWORD *)(a1 + 1224);
          if (v8 >= (*(_QWORD *)(a1 + 1232) - v13) >> 2)
            sub_20EDB40C4();
          v14 = *(unsigned int *)(v13 + 4 * v8);
          v15 = (_QWORD *)(*(_QWORD *)(a1 + 608) + 8 * *(_QWORD *)(v10 + 8));
          v16 = (uint64_t)*a2 + 8 * v14;
          *(_QWORD *)&v17 = *v15;
          if (v15 == *a2)
          {
            *(_QWORD *)&v18 = v15[10];
            *((_QWORD *)&v17 + 1) = v15[5];
            *((_QWORD *)&v18 + 1) = v15[15];
            *(_OWORD *)v16 = v17;
            *(_OWORD *)(v16 + 16) = v18;
            v7 = *(unsigned int *)(a1 + 604);
          }
          else
          {
            *(_QWORD *)v16 = v17;
            *(_QWORD *)(v16 + 8) = v15[5];
            *(_QWORD *)(v16 + 16) = v15[10];
            *(_QWORD *)(v16 + 24) = v15[15];
          }
        }
      }
    }
  }
  return sub_20F3DF1D8(a1 + 928, a2, (_QWORD *)(a1 + 1248));
}

BOOL sub_20F7E37FC(uint64_t a1)
{
  int v1;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  size_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t i;
  unsigned int v10;
  uint64_t v11;
  int v12;
  _QWORD v14[2];
  uint64_t v15;
  _QWORD *v16;

  *(_QWORD *)(a1 + 2504) = 0;
  *(_QWORD *)(a1 + 2496) = 0;
  v1 = *(_DWORD *)(a1 + 2512);
  if (!v1)
  {
    *(_QWORD *)(a1 + 2496) = *(_QWORD *)(a1 + 1128) + 520;
    *(_QWORD *)(a1 + 2504) = a1 + 1176;
    v3 = *(_DWORD *)(a1 + 2536) * *(unsigned __int8 *)(a1 + 2544);
    *(_DWORD *)(a1 + 2488) = v3;
    *(_DWORD *)(a1 + 2492) = v3;
    v4 = v3 * (unint64_t)v3;
    if (*(_QWORD *)(a1 + 2480) < v4)
    {
      v5 = *(_QWORD *)(a1 + 2472);
      if (v5)
        MEMORY[0x212BC6368](v5, 0x1000C8000313F17);
      *(_QWORD *)(a1 + 2472) = 0;
      v6 = (8 * v4 + 31) & 0xFFFFFFFFFFFFFFE0;
      *(_QWORD *)(a1 + 2480) = v6 >> 3;
      *(_QWORD *)(a1 + 2472) = operator new(v6, (std::align_val_t)0x20uLL);
    }
    v7 = operator new((8 * v3 + 31) & 0xFFFFFFFE0, (std::align_val_t)0x20uLL);
    v8 = v7;
    if ((_DWORD)v3)
    {
      bzero(v7, 8 * v3);
      for (i = 0; i != v3; ++i)
      {
        v8[i] = 0x3FF0000000000000;
        v10 = *(_DWORD *)(a1 + 2488);
        v11 = *(_QWORD *)(a1 + 2472);
        v12 = *(_DWORD *)(a1 + 2512);
        if (v8 == (_QWORD *)(v11 + 8 * v10 * i))
        {
          if (!v12 && v10 == *(_DWORD *)(a1 + 2532) * *(unsigned __int8 *)(a1 + 2544))
          {
            v16 = v8;
            v15 = v10;
            sub_20E8BF7C8(a1 + 2520, (uint64_t)&v15, 0);
          }
        }
        else if (!v12 && (_DWORD)v3 == *(_DWORD *)(a1 + 2532) * *(unsigned __int8 *)(a1 + 2544))
        {
          v16 = v8;
          v15 = v3;
          v14[1] = v11 + 8 * v10 * i;
          v14[0] = v10;
          if (v11)
            sub_20E8BF20C(a1 + 2520, (uint64_t)v14, (uint64_t)&v15, 0);
        }
        v8[i] = 0;
      }
    }
    MEMORY[0x212BC6368](v8, 0x1000C8000313F17);
  }
  return v1 == 0;
}

void sub_20F7E39C0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BC6368](v1, 0x1000C8000313F17);
  _Unwind_Resume(a1);
}

uint64_t sub_20F7E39E4(uint64_t a1)
{
  uint64_t v7;
  char *v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  _QWORD *v14;
  _QWORD *v15;

  *(_QWORD *)a1 = &unk_24CA02F78;
  __asm { FMOV            V0.2D, #1.0 }
  *(_OWORD *)(a1 + 8) = _Q0;
  *(_OWORD *)(a1 + 24) = _Q0;
  *(_QWORD *)(a1 + 40) = &off_24CA02FE8;
  v7 = a1 + 40;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_QWORD *)(a1 + 296) = 0;
  *(_QWORD *)(a1 + 304) = 0;
  *(_DWORD *)(a1 + 312) = 16842753;
  *(_OWORD *)(a1 + 432) = 0u;
  *(_OWORD *)(a1 + 448) = 0u;
  *(_OWORD *)(a1 + 400) = 0u;
  *(_OWORD *)(a1 + 416) = 0u;
  *(_OWORD *)(a1 + 368) = 0u;
  *(_OWORD *)(a1 + 384) = 0u;
  *(_OWORD *)(a1 + 336) = 0u;
  *(_OWORD *)(a1 + 352) = 0u;
  *(_OWORD *)(a1 + 320) = 0u;
  v8 = (char *)operator new(0x100uLL);
  *(_QWORD *)(a1 + 320) = v8;
  *(_QWORD *)(a1 + 328) = v8;
  *(_QWORD *)(a1 + 336) = v8 + 256;
  v9 = (char *)operator new(0x100uLL);
  *(_QWORD *)(a1 + 368) = v9;
  *(_QWORD *)(a1 + 376) = v9;
  *(_QWORD *)(a1 + 384) = v9 + 256;
  v10 = (char *)operator new(0x100uLL);
  *(_QWORD *)(a1 + 416) = v10;
  *(_QWORD *)(a1 + 424) = v10;
  *(_QWORD *)(a1 + 432) = v10 + 256;
  v11 = (char *)operator new(0x100uLL);
  *(_QWORD *)(a1 + 344) = v11;
  *(_QWORD *)(a1 + 352) = v11;
  *(_QWORD *)(a1 + 360) = v11 + 256;
  v12 = (char *)operator new(0x100uLL);
  *(_QWORD *)(a1 + 392) = v12;
  *(_QWORD *)(a1 + 400) = v12;
  *(_QWORD *)(a1 + 408) = v12 + 256;
  v13 = (char *)operator new(0x100uLL);
  *(_QWORD *)(a1 + 440) = v13;
  *(_QWORD *)(a1 + 448) = v13;
  *(_QWORD *)(a1 + 456) = v13 + 256;
  *(_QWORD *)(a1 + 520) = 0;
  *(_OWORD *)(a1 + 464) = 0u;
  *(_OWORD *)(a1 + 480) = 0u;
  *(_OWORD *)(a1 + 496) = 0u;
  *(_QWORD *)(a1 + 510) = 0;
  *(_QWORD *)a1 = &unk_24CA02EC0;
  *(_BYTE *)(a1 + 528) = 0;
  *(_QWORD *)(a1 + 584) = 0;
  *(_QWORD *)(a1 + 576) = 0;
  *(_DWORD *)(a1 + 568) = 0;
  *(_OWORD *)(a1 + 536) = 0u;
  *(_OWORD *)(a1 + 552) = 0u;
  v14 = sub_20F3DF2F0((_QWORD *)(a1 + 592));
  *(_QWORD *)(a1 + 1056) = a1 + 704;
  *(_QWORD *)(a1 + 1064) = a1 + 928;
  *(_QWORD *)(a1 + 1040) = v14;
  *(_QWORD *)(a1 + 1048) = a1 + 816;
  *(_OWORD *)(a1 + 1072) = 0u;
  *(_OWORD *)(a1 + 1088) = 0u;
  *(_OWORD *)(a1 + 1104) = 0u;
  *(_QWORD *)a1 = &unk_24CA02E08;
  *(_QWORD *)(a1 + 1120) = v7;
  *(_QWORD *)(a1 + 1128) = a1 + 552;
  *(_QWORD *)(a1 + 1136) = 0;
  *(_QWORD *)(a1 + 1152) = 0;
  *(_QWORD *)(a1 + 1144) = 0;
  *(_OWORD *)(a1 + 1176) = 0u;
  *(_OWORD *)(a1 + 1192) = 0u;
  *(_OWORD *)(a1 + 1208) = 0u;
  *(_OWORD *)(a1 + 1224) = 0u;
  *(_OWORD *)(a1 + 1240) = 0u;
  *(_OWORD *)(a1 + 1256) = 0u;
  *(_QWORD *)(a1 + 1272) = off_24CA03080;
  *(_QWORD *)(a1 + 1312) = 0;
  *(_QWORD *)(a1 + 1304) = 0;
  *(_DWORD *)(a1 + 1320) = 0;
  *(_QWORD *)(a1 + 1336) = 0;
  *(_QWORD *)(a1 + 1328) = 0;
  *(_DWORD *)(a1 + 1296) = 0;
  *(_QWORD *)(a1 + 1280) = 0;
  *(_QWORD *)(a1 + 1288) = 0;
  v15 = sub_20F3DF2F0((_QWORD *)(a1 + 1344));
  *(_QWORD *)(a1 + 1808) = a1 + 1456;
  *(_QWORD *)(a1 + 1816) = a1 + 1680;
  *(_QWORD *)(a1 + 1792) = v15;
  *(_QWORD *)(a1 + 1800) = a1 + 1568;
  *(_OWORD *)(a1 + 2344) = 0u;
  *(_OWORD *)(a1 + 2360) = 0u;
  *(_OWORD *)(a1 + 2376) = 0u;
  *(_OWORD *)(a1 + 2224) = 0u;
  *(_OWORD *)(a1 + 2240) = 0u;
  *(_OWORD *)(a1 + 2256) = 0u;
  *(_OWORD *)(a1 + 2272) = 0u;
  *(_OWORD *)(a1 + 2288) = 0u;
  *(_OWORD *)(a1 + 2304) = 0u;
  *(_OWORD *)(a1 + 2320) = 0u;
  *(_DWORD *)(a1 + 2336) = 0;
  *(_OWORD *)(a1 + 1824) = 0u;
  *(_OWORD *)(a1 + 1840) = 0u;
  *(_OWORD *)(a1 + 1856) = 0u;
  *(_WORD *)(a1 + 1872) = 0;
  *(_OWORD *)(a1 + 2204) = 0u;
  *(_OWORD *)(a1 + 2192) = 0u;
  *(_OWORD *)(a1 + 2176) = 0u;
  *(_OWORD *)(a1 + 2160) = 0u;
  *(_OWORD *)(a1 + 2144) = 0u;
  *(_OWORD *)(a1 + 2128) = 0u;
  *(_OWORD *)(a1 + 2112) = 0u;
  *(_OWORD *)(a1 + 2096) = 0u;
  *(_OWORD *)(a1 + 2080) = 0u;
  *(_OWORD *)(a1 + 2064) = 0u;
  *(_OWORD *)(a1 + 2048) = 0u;
  *(_OWORD *)(a1 + 2032) = 0u;
  *(_OWORD *)(a1 + 2016) = 0u;
  *(_OWORD *)(a1 + 2000) = 0u;
  *(_OWORD *)(a1 + 1984) = 0u;
  *(_OWORD *)(a1 + 1968) = 0u;
  *(_OWORD *)(a1 + 1952) = 0u;
  *(_OWORD *)(a1 + 1936) = 0u;
  *(_OWORD *)(a1 + 1920) = 0u;
  *(_OWORD *)(a1 + 1904) = 0u;
  *(_QWORD *)(a1 + 1272) = &off_24CA03018;
  *(_QWORD *)(a1 + 2392) = a1 + 1120;
  return a1;
}

void sub_20F7E3CB8(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t *v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v6;

  if (*v4)
  {
    MEMORY[0x212BC6368](*v4, 0x1000C8000313F17);
    v6 = *v2;
    if (!*v2)
    {
LABEL_3:
      sub_20F3C6708(v3);
      sub_20F7E3FE0(v1);
      _Unwind_Resume(a1);
    }
  }
  else
  {
    v6 = *v2;
    if (!*v2)
      goto LABEL_3;
  }
  MEMORY[0x212BC6368](v6, 0x1000C8000313F17);
  sub_20F3C6708(v3);
  sub_20F7E3FE0(v1);
  _Unwind_Resume(a1);
}

void sub_20F7E3D2C(_Unwind_Exception *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v5;

  v5 = v1[69];
  if (v5)
    MEMORY[0x212BC6368](v5, 0x1000C8000313F17);
  *v1 = v3;
  sub_20F7E5048(v2);
  _Unwind_Resume(a1);
}

void sub_20F7E3D60(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  char *v8;
  void *v9;
  void *v10;
  uint64_t v11;
  void *v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  char *v16;
  char *v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;

  v5 = v2;
  sub_20E9AA8C8(v4);
  sub_20E9AA8C8(v3);
  sub_20E9AA8C8(v5);
  v7 = v1[33];
  if (v7)
  {
    v11 = v1[34];
    v12 = (void *)v1[33];
    if (v11 != v7)
    {
      do
      {
        v13 = *(std::__shared_weak_count **)(v11 - 16);
        if (v13)
        {
          p_shared_owners = (unint64_t *)&v13->__shared_owners_;
          do
            v15 = __ldaxr(p_shared_owners);
          while (__stlxr(v15 - 1, p_shared_owners));
          if (!v15)
          {
            ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
            std::__shared_weak_count::__release_weak(v13);
          }
        }
        v11 -= 640;
      }
      while (v11 != v7);
      v12 = (void *)v1[33];
    }
    v1[34] = v7;
    operator delete(v12);
    v8 = (char *)v1[30];
    if (!v8)
    {
LABEL_3:
      sub_20F7E417C((uint64_t)(v1 + 21));
      v9 = (void *)v1[18];
      if (!v9)
        goto LABEL_4;
      goto LABEL_26;
    }
  }
  else
  {
    v8 = (char *)v1[30];
    if (!v8)
      goto LABEL_3;
  }
  v16 = (char *)v1[31];
  v17 = v8;
  if (v16 != v8)
  {
    do
    {
      v18 = (std::__shared_weak_count *)*((_QWORD *)v16 - 2);
      if (v18)
      {
        v19 = (unint64_t *)&v18->__shared_owners_;
        do
          v20 = __ldaxr(v19);
        while (__stlxr(v20 - 1, v19));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
      v16 -= 888;
    }
    while (v16 != v8);
    v17 = (char *)v1[30];
  }
  v1[31] = v8;
  operator delete(v17);
  sub_20F7E417C((uint64_t)(v1 + 21));
  v9 = (void *)v1[18];
  if (!v9)
  {
LABEL_4:
    sub_20F3C8EB4((uint64_t)(v1 + 9));
    v10 = (void *)v1[6];
    if (!v10)
      goto LABEL_5;
    goto LABEL_27;
  }
LABEL_26:
  v1[19] = v9;
  operator delete(v9);
  sub_20F3C8EB4((uint64_t)(v1 + 9));
  v10 = (void *)v1[6];
  if (!v10)
LABEL_5:
    _Unwind_Resume(a1);
LABEL_27:
  v1[7] = v10;
  operator delete(v10);
  _Unwind_Resume(a1);
}

_QWORD *sub_20F7E3EC8(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  uint64_t v9;

  *a1 = &unk_24CA02E08;
  sub_20F7E5290(a1 + 159);
  v2 = (void *)a1[156];
  if (v2)
  {
    a1[157] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[153];
  if (v3)
  {
    a1[154] = v3;
    operator delete(v3);
  }
  v4 = (void *)a1[150];
  if (v4)
  {
    a1[151] = v4;
    operator delete(v4);
  }
  v5 = (void *)a1[147];
  if (v5)
  {
    a1[148] = v5;
    operator delete(v5);
  }
  v6 = (void *)a1[142];
  if (v6)
  {
    a1[143] = v6;
    operator delete(v6);
  }
  *a1 = &unk_24CA02EC0;
  v7 = (void *)a1[137];
  if (v7)
  {
    a1[138] = v7;
    operator delete(v7);
  }
  v8 = (void *)a1[134];
  if (v8)
  {
    a1[135] = v8;
    operator delete(v8);
  }
  sub_20F3C6A50(a1 + 74);
  v9 = a1[69];
  if (v9)
    MEMORY[0x212BC6368](v9, 0x1000C8000313F17);
  *a1 = &unk_24CA02F78;
  sub_20F7E5048(a1 + 5);
  return a1;
}

void sub_20F7E3FB0(char *a1@<X8>)
{
  a1[23] = 13;
  strcpy(a1, "SparseHessian");
}

_QWORD *sub_20F7E3FE0(_QWORD *a1)
{
  void *v2;
  void *v3;
  uint64_t v4;

  *a1 = &unk_24CA02EC0;
  v2 = (void *)a1[137];
  if (v2)
  {
    a1[138] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[134];
  if (v3)
  {
    a1[135] = v3;
    operator delete(v3);
  }
  sub_20F3C6A50(a1 + 74);
  v4 = a1[69];
  if (v4)
    MEMORY[0x212BC6368](v4, 0x1000C8000313F17);
  *a1 = &unk_24CA02F78;
  sub_20F7E5048(a1 + 5);
  return a1;
}

double sub_20F7E406C()
{
  return 0.0;
}

void sub_20F7E4088(_QWORD *a1)
{
  sub_20F7E5048(a1);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20F7E40AC(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 624);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

uint64_t sub_20F7E4114(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 616);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

uint64_t sub_20F7E417C(uint64_t a1)
{
  unint64_t *v2;
  unint64_t *v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  void *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v11[3];
  uint64_t v12;
  uint64_t v13;

  v2 = *(unint64_t **)(a1 + 48);
  v3 = *(unint64_t **)(a1 + 56);
  if (v2 != v3 && (unint64_t)((char *)v3 - (char *)v2) >= 0xF0)
  {
    sub_20F7E43DC((uint64_t)v2, v3, 126 - 2 * __clz(v3 - v2), 1);
    v4 = *(_QWORD *)(a1 + 48);
    v12 = *(_QWORD *)(a1 + 56);
    v13 = v4;
    v11[0] = a1;
    v11[1] = (uint64_t)&v13;
    v11[2] = (uint64_t)&v12;
    sub_20F7E4270(a1, v11);
    v2 = *(unint64_t **)(a1 + 48);
  }
  *(_DWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 56) = v2;
  if (v2)
    operator delete(v2);
  v5 = *(_QWORD **)(a1 + 8);
  if (v5)
  {
    v6 = *(_QWORD **)(a1 + 16);
    v7 = *(void **)(a1 + 8);
    if (v6 != v5)
    {
      v8 = *(_QWORD **)(a1 + 16);
      do
      {
        v9 = *(v8 - 2);
        v8 -= 2;
        *v8 = 0;
        if (v9)
          ((void (*)(void))*(v6 - 1))();
        v6 = v8;
      }
      while (v8 != v5);
      v7 = *(void **)(a1 + 8);
    }
    *(_QWORD *)(a1 + 16) = v5;
    operator delete(v7);
  }
  return a1;
}

uint64_t sub_20F7E4270(uint64_t result, uint64_t *a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t *v9;
  _QWORD *v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t *v18;
  _QWORD *v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t i;
  unint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t *v29;
  _QWORD *v30;
  unint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t *v37;
  _QWORD *v38;
  unint64_t v39;

  v2 = *(unsigned int *)(result + 32);
  if ((_DWORD)v2)
  {
    if ((_DWORD)v2 != 1)
    {
      v21 = 8;
      for (i = 1; i != v2; ++i)
      {
        v23 = *(_QWORD *)(*(_QWORD *)(result + 8) + 16 * i - 16);
        v24 = *a2;
        v25 = *(_QWORD **)(*a2 + 48);
        v26 = *(_QWORD *)(*a2 + 56) - (_QWORD)v25;
        if (v26)
        {
          v27 = v26 >> 3;
          do
          {
            v28 = v27 >> 1;
            v29 = &v25[v27 >> 1];
            v31 = *v29;
            v30 = v29 + 1;
            v27 += ~(v27 >> 1);
            if (v31 < v23)
              v25 = v30;
            else
              v27 = v28;
          }
          while (v27);
        }
        *(_QWORD *)a2[1] = v25;
        v32 = *(_QWORD **)a2[1];
        v33 = *(_QWORD *)(v24 + 56) - (_QWORD)v32;
        if (v33)
        {
          v34 = v23 + 224 * v21;
          v35 = v33 >> 3;
          do
          {
            v36 = v35 >> 1;
            v37 = &v32[v35 >> 1];
            v39 = *v37;
            v38 = v37 + 1;
            v35 += ~(v35 >> 1);
            if (v34 < v39)
              v35 = v36;
            else
              v32 = v38;
          }
          while (v35);
        }
        *(_QWORD *)a2[2] = v32;
        v21 *= 2;
      }
    }
    v3 = *(_QWORD *)(*(_QWORD *)(result + 8) + 16 * (v2 - 1));
    v4 = *a2;
    v5 = *(_QWORD **)(*a2 + 48);
    v6 = *(_QWORD *)(*a2 + 56) - (_QWORD)v5;
    if (v6)
    {
      v7 = v6 >> 3;
      do
      {
        v8 = v7 >> 1;
        v9 = &v5[v7 >> 1];
        v11 = *v9;
        v10 = v9 + 1;
        v7 += ~(v7 >> 1);
        if (v11 < v3)
          v5 = v10;
        else
          v7 = v8;
      }
      while (v7);
    }
    v12 = *(_QWORD *)(result + 40);
    *(_QWORD *)a2[1] = v5;
    v13 = *(_QWORD **)a2[1];
    v14 = *(_QWORD *)(v4 + 56) - (_QWORD)v13;
    if (v14)
    {
      v15 = v3 + 224 * v12;
      v16 = v14 >> 3;
      do
      {
        v17 = v16 >> 1;
        v18 = &v13[v16 >> 1];
        v20 = *v18;
        v19 = v18 + 1;
        v16 += ~(v16 >> 1);
        if (v15 < v20)
          v16 = v17;
        else
          v13 = v19;
      }
      while (v16);
    }
    *(_QWORD *)a2[2] = v13;
  }
  return result;
}

uint64_t sub_20F7E43DC(uint64_t result, unint64_t *a2, uint64_t a3, char a4)
{
  unint64_t *v7;
  unint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t *v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t *v31;
  unint64_t *v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t *v46;
  unint64_t *v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t *v51;
  unint64_t *v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t *v55;
  BOOL v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t *v59;
  unint64_t *v60;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t *v66;
  unint64_t v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t *v72;
  unint64_t *v73;
  unint64_t *v74;
  unint64_t v75;
  unint64_t *v76;
  unint64_t *v77;
  unint64_t **v78;
  unint64_t *v79;
  BOOL v81;
  uint64_t v82;
  unint64_t *v83;
  unint64_t *v84;
  unint64_t v85;
  unint64_t v86;
  uint64_t v87;
  uint64_t v88;
  int64_t v89;
  int64_t v90;
  BOOL v91;
  uint64_t v92;
  unint64_t *v93;
  unint64_t v94;
  BOOL v95;
  unint64_t *v96;
  unint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  unint64_t v101;
  int64_t v102;
  unint64_t *v103;
  unint64_t v104;
  unint64_t *v105;
  uint64_t v106;
  uint64_t v107;
  unint64_t v108;
  unint64_t *v109;
  unint64_t v110;
  unint64_t v111;
  unint64_t v112;
  unint64_t v113;
  unint64_t v114;
  unint64_t v115;
  unint64_t v116;
  unint64_t v117;
  unint64_t v118;
  unint64_t v119;
  unint64_t v120;

  v7 = (unint64_t *)result;
LABEL_2:
  v8 = v7;
  while (2)
  {
    v7 = v8;
    v9 = (char *)a2 - (char *)v8;
    v10 = a2 - v8;
    switch(v10)
    {
      case 0:
      case 1:
        return result;
      case 2:
        v67 = *(a2 - 1);
        v68 = *v8;
        if (v67 < *v8)
        {
          *v8 = v67;
          *(a2 - 1) = v68;
        }
        return result;
      case 3:
        v69 = *v8;
        v70 = v8[1];
        v71 = *(a2 - 1);
        if (v70 >= *v8)
        {
          if (v71 < v70)
          {
            v8[1] = v71;
            *(a2 - 1) = v70;
            v113 = *v8;
            v112 = v8[1];
            if (v112 < *v8)
            {
              *v8 = v112;
              v8[1] = v113;
            }
          }
        }
        else
        {
          if (v71 >= v70)
          {
            *v8 = v70;
            v8[1] = v69;
            v120 = *(a2 - 1);
            if (v120 >= v69)
              return result;
            v8[1] = v120;
          }
          else
          {
            *v8 = v71;
          }
          *(a2 - 1) = v69;
        }
        return result;
      case 4:
        v72 = v8 + 1;
        v73 = (unint64_t *)v8[1];
        v74 = v8 + 2;
        v75 = v8[2];
        v76 = (unint64_t *)*v8;
        if ((unint64_t)v73 >= *v8)
        {
          if (v75 >= (unint64_t)v73)
          {
LABEL_181:
            v73 = (unint64_t *)v75;
            v114 = *(a2 - 1);
            if (v114 >= (unint64_t)v73)
              return result;
LABEL_182:
            *v74 = v114;
            *(a2 - 1) = (unint64_t)v73;
            v117 = *v74;
            v118 = *v72;
            if (v117 < v118)
            {
              v8[1] = v117;
              v8[2] = v118;
              v119 = *v8;
              if (v117 < *v8)
              {
                *v8 = v117;
                v8[1] = v119;
              }
            }
            return result;
          }
          *v72 = v75;
          *v74 = (unint64_t)v73;
          v77 = v8;
          v78 = (unint64_t **)(v8 + 1);
          result = (uint64_t)v73;
          if (v75 >= (unint64_t)v76)
          {
LABEL_173:
            v114 = *(a2 - 1);
            if (v114 >= (unint64_t)v73)
              return result;
            goto LABEL_182;
          }
        }
        else
        {
          v77 = v8;
          v78 = (unint64_t **)(v8 + 2);
          result = *v8;
          if (v75 >= (unint64_t)v73)
          {
            *v8 = (unint64_t)v73;
            v8[1] = (unint64_t)v76;
            v77 = v8 + 1;
            v78 = (unint64_t **)(v8 + 2);
            result = (uint64_t)v76;
            if (v75 >= (unint64_t)v76)
              goto LABEL_181;
          }
        }
        *v77 = v75;
        *v78 = v76;
        v73 = (unint64_t *)result;
        goto LABEL_173;
      case 5:
        return (uint64_t)sub_20F2B3110(v8, v8 + 1, v8 + 2, v8 + 3, a2 - 1);
      default:
        if (v9 > 191)
        {
          if (!a3)
          {
            if (v8 != a2)
            {
              v89 = (unint64_t)(v10 - 2) >> 1;
              v90 = v89;
              do
              {
                if (v89 >= v90)
                {
                  v92 = (2 * v90) | 1;
                  v93 = &v8[v92];
                  if (2 * v90 + 2 >= v10)
                  {
                    v94 = *v93;
                    v96 = &v8[v90];
                    v97 = *v96;
                    if (*v93 >= *v96)
                      goto LABEL_147;
                  }
                  else
                  {
                    v94 = v93[1];
                    v95 = *v93 >= v94;
                    if (*v93 < v94)
                      ++v93;
                    else
                      v94 = *v93;
                    if (!v95)
                      v92 = 2 * v90 + 2;
                    v96 = &v8[v90];
                    v97 = *v96;
                    if (v94 >= *v96)
                    {
LABEL_147:
                      while (1)
                      {
                        *v96 = v94;
                        v96 = v93;
                        if (v89 < v92)
                          break;
                        v98 = (2 * v92) | 1;
                        v93 = &v8[v98];
                        v92 = 2 * v92 + 2;
                        if (v92 < v10)
                        {
                          v94 = *v93;
                          result = (uint64_t)(v93 + 1);
                          if (*v93 >= v93[1])
                          {
                            v92 = v98;
                          }
                          else
                          {
                            v94 = v93[1];
                            ++v93;
                          }
                          if (v94 < v97)
                            break;
                        }
                        else
                        {
                          v94 = *v93;
                          v92 = v98;
                          if (*v93 < v97)
                            break;
                        }
                      }
                      *v96 = v97;
                    }
                  }
                }
                v91 = v90-- <= 0;
              }
              while (!v91);
              v99 = (unint64_t)v9 >> 3;
              do
              {
                v100 = 0;
                v101 = *v8;
                v102 = (unint64_t)(v99 - 2) >> 1;
                v103 = v8;
                do
                {
                  while (1)
                  {
                    v105 = &v103[v100 + 1];
                    v106 = (2 * v100) | 1;
                    v100 = 2 * v100 + 2;
                    if (v100 < v99)
                      break;
                    v100 = v106;
                    *v103 = *v105;
                    v103 = v105;
                    if (v106 > v102)
                      goto LABEL_161;
                  }
                  v104 = *v105;
                  if (*v105 >= v105[1])
                  {
                    v100 = v106;
                  }
                  else
                  {
                    v104 = v105[1];
                    ++v105;
                  }
                  *v103 = v104;
                  v103 = v105;
                }
                while (v100 <= v102);
LABEL_161:
                if (v105 == --a2)
                {
                  *v105 = v101;
                }
                else
                {
                  *v105 = *a2;
                  *a2 = v101;
                  v107 = (char *)v105 - (char *)v8 + 8;
                  if (v107 >= 9)
                  {
                    v108 = (((unint64_t)v107 >> 3) - 2) >> 1;
                    v109 = &v8[v108];
                    v110 = *v109;
                    v111 = *v105;
                    if (*v109 < *v105)
                    {
                      do
                      {
                        *v105 = v110;
                        v105 = v109;
                        if (!v108)
                          break;
                        v108 = (v108 - 1) >> 1;
                        v109 = &v8[v108];
                        v110 = *v109;
                      }
                      while (*v109 < v111);
                      *v105 = v111;
                    }
                  }
                }
                v91 = v99-- <= 2;
              }
              while (!v91);
            }
            return result;
          }
          v11 = (unint64_t)v10 >> 1;
          v12 = &v8[(unint64_t)v10 >> 1];
          v13 = *(a2 - 1);
          if ((unint64_t)v9 < 0x401)
          {
            v16 = *v8;
            v17 = *v12;
            if (*v8 >= *v12)
            {
              if (v13 < v16)
              {
                *v8 = v13;
                *(a2 - 1) = v16;
                v19 = *v12;
                if (*v8 < *v12)
                {
                  *v12 = *v8;
                  *v8 = v19;
                  --a3;
                  v20 = v19;
                  if ((a4 & 1) != 0)
                    goto LABEL_56;
                  goto LABEL_55;
                }
              }
              goto LABEL_32;
            }
            if (v13 >= v16)
            {
              *v12 = v16;
              *v8 = v17;
              v29 = *(a2 - 1);
              if (v29 >= v17)
                goto LABEL_32;
              *v8 = v29;
            }
            else
            {
              *v12 = v13;
            }
            *(a2 - 1) = v17;
LABEL_32:
            --a3;
            v20 = *v8;
            if ((a4 & 1) != 0)
              goto LABEL_56;
            goto LABEL_55;
          }
          v14 = *v12;
          v15 = *v8;
          if (*v12 >= *v8)
          {
            if (v13 < v14)
            {
              *v12 = v13;
              *(a2 - 1) = v14;
              v18 = *v8;
              if (*v12 < *v8)
              {
                *v8 = *v12;
                *v12 = v18;
              }
            }
          }
          else
          {
            if (v13 >= v14)
            {
              *v8 = v14;
              *v12 = v15;
              v21 = *(a2 - 1);
              if (v21 >= v15)
                goto LABEL_23;
              *v12 = v21;
            }
            else
            {
              *v8 = v13;
            }
            *(a2 - 1) = v15;
          }
LABEL_23:
          v22 = &v8[v11];
          v25 = *(v22 - 1);
          v23 = v22 - 1;
          v24 = v25;
          v26 = v8[1];
          v27 = *(a2 - 2);
          if (v25 >= v26)
          {
            if (v27 < v24)
            {
              *v23 = v27;
              *(a2 - 2) = v24;
              v28 = v8[1];
              if (*v23 < v28)
              {
                v8[1] = *v23;
                *v23 = v28;
              }
            }
          }
          else
          {
            if (v27 >= v24)
            {
              v8[1] = v24;
              *v23 = v26;
              v30 = *(a2 - 2);
              if (v30 >= v26)
                goto LABEL_37;
              *v23 = v30;
            }
            else
            {
              v8[1] = v27;
            }
            *(a2 - 2) = v26;
          }
LABEL_37:
          v31 = &v8[v11];
          v34 = v31[1];
          v32 = v31 + 1;
          v33 = v34;
          v35 = v8[2];
          v36 = *(a2 - 3);
          if (v34 >= v35)
          {
            if (v36 < v33)
            {
              *v32 = v36;
              *(a2 - 3) = v33;
              v37 = v8[2];
              if (*v32 < v37)
              {
                v8[2] = *v32;
                *v32 = v37;
              }
            }
          }
          else
          {
            if (v36 >= v33)
            {
              v8[2] = v33;
              *v32 = v35;
              v38 = *(a2 - 3);
              if (v38 >= v35)
                goto LABEL_46;
              *v32 = v38;
            }
            else
            {
              v8[2] = v36;
            }
            *(a2 - 3) = v35;
          }
LABEL_46:
          v39 = *v12;
          v40 = *v23;
          v41 = *v32;
          if (*v12 < *v23)
          {
            if (v41 >= v39)
            {
              *v23 = v39;
              *v12 = v40;
              v23 = v12;
              v39 = v41;
              if (v41 >= v40)
              {
                v42 = *v8;
                *v8 = v40;
                *v12 = v42;
                --a3;
                v20 = *v8;
                if ((a4 & 1) != 0)
                  goto LABEL_56;
                goto LABEL_55;
              }
            }
            goto LABEL_53;
          }
          if (v41 >= v39)
            goto LABEL_54;
          *v12 = v41;
          *v32 = v39;
          v32 = v12;
          v39 = v40;
          if (v41 < v40)
          {
LABEL_53:
            *v23 = v41;
            *v32 = v40;
LABEL_54:
            v43 = *v8;
            *v8 = v39;
            *v12 = v43;
            --a3;
            v20 = *v8;
            if ((a4 & 1) != 0)
              goto LABEL_56;
LABEL_55:
            if (*(v8 - 1) < v20)
              goto LABEL_56;
            if (v20 >= *(a2 - 1))
            {
              v59 = v8 + 1;
              do
              {
                v8 = v59;
                if (v59 >= a2)
                  break;
                ++v59;
              }
              while (v20 >= *v8);
            }
            else
            {
              do
              {
                v58 = v8[1];
                ++v8;
              }
              while (v20 >= v58);
            }
            v60 = a2;
            if (v8 < a2)
            {
              v60 = a2;
              do
                v61 = *--v60;
              while (v20 < v61);
            }
            if (v8 < v60)
            {
              v62 = *v8;
              v63 = *v60;
              do
              {
                *v8 = v63;
                *v60 = v62;
                do
                {
                  v64 = v8[1];
                  ++v8;
                  v62 = v64;
                }
                while (v20 >= v64);
                do
                {
                  v65 = *--v60;
                  v63 = v65;
                }
                while (v20 < v65);
              }
              while (v8 < v60);
            }
            v66 = v8 - 1;
            if (v8 - 1 != v7)
              *v7 = *v66;
            a4 = 0;
            *v66 = v20;
            continue;
          }
          v57 = *v8;
          *v8 = v41;
          *v12 = v57;
          --a3;
          v20 = *v8;
          if ((a4 & 1) == 0)
            goto LABEL_55;
LABEL_56:
          v44 = 0;
          do
            v45 = v8[++v44];
          while (v45 < v20);
          v46 = &v8[v44];
          v47 = a2;
          if (v44 == 1)
          {
            v47 = a2;
            do
            {
              if (v46 >= v47)
                break;
              v49 = *--v47;
            }
            while (v49 >= v20);
          }
          else
          {
            do
              v48 = *--v47;
            while (v48 >= v20);
          }
          if (v46 >= v47)
          {
            v55 = v46 - 1;
            if (v46 - 1 != v8)
              goto LABEL_73;
          }
          else
          {
            v50 = *v47;
            v51 = &v8[v44];
            v52 = v47;
            do
            {
              *v51 = v50;
              *v52 = v45;
              do
              {
                v53 = v51[1];
                ++v51;
                v45 = v53;
              }
              while (v53 < v20);
              do
              {
                v54 = *--v52;
                v50 = v54;
              }
              while (v54 >= v20);
            }
            while (v51 < v52);
            v55 = v51 - 1;
            if (v51 - 1 == v8)
              goto LABEL_74;
LABEL_73:
            *v8 = *v55;
          }
LABEL_74:
          *v55 = v20;
          if (v46 < v47)
            goto LABEL_77;
          v56 = sub_20F7E4D44(v8, v55);
          v8 = v55 + 1;
          result = sub_20F7E4D44(v55 + 1, a2);
          if (!(_DWORD)result)
          {
            if (v56)
              continue;
LABEL_77:
            result = sub_20F7E43DC(v7, v55, a3, a4 & 1);
            a4 = 0;
            v8 = v55 + 1;
            continue;
          }
          a2 = v55;
          if (v56)
            return result;
          goto LABEL_2;
        }
        v79 = v8 + 1;
        v81 = v8 == a2 || v79 == a2;
        if ((a4 & 1) != 0)
        {
          if (!v81)
          {
            v82 = 8;
            v83 = v8;
            do
            {
              v86 = *v83;
              v85 = v83[1];
              v83 = v79;
              if (v85 < v86)
              {
                v87 = v82;
                do
                {
                  *(unint64_t *)((char *)v8 + v87) = v86;
                  v88 = v87 - 8;
                  if (v87 == 8)
                  {
                    v84 = v8;
                    goto LABEL_121;
                  }
                  v86 = *(unint64_t *)((char *)v8 + v87 - 16);
                  v87 -= 8;
                }
                while (v85 < v86);
                v84 = (unint64_t *)((char *)v8 + v88);
LABEL_121:
                *v84 = v85;
              }
              v79 = v83 + 1;
              v82 += 8;
            }
            while (v83 + 1 != a2);
          }
        }
        else if (!v81)
        {
          do
          {
            v116 = *v7;
            v115 = v7[1];
            v7 = v79;
            if (v115 < v116)
            {
              do
              {
                *v79 = v116;
                v116 = *(v79 - 2);
                --v79;
              }
              while (v115 < v116);
              *v79 = v115;
            }
            v79 = v7 + 1;
          }
          while (v7 + 1 != a2);
        }
        return result;
    }
  }
}

BOOL sub_20F7E4D44(unint64_t *a1, unint64_t *a2)
{
  unint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t *v7;
  unint64_t *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t *v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t *v22;
  int v23;
  uint64_t i;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;

  switch(a2 - a1)
  {
    case 0:
    case 1:
      return 1;
    case 2:
      v9 = *(a2 - 1);
      v10 = *a1;
      if (v9 >= *a1)
        return 1;
      *a1 = v9;
      *(a2 - 1) = v10;
      return 1;
    case 3:
      v11 = *a1;
      v12 = a1[1];
      v13 = *(a2 - 1);
      if (v12 >= *a1)
      {
        if (v13 >= v12)
          return 1;
        a1[1] = v13;
        *(a2 - 1) = v12;
        v30 = *a1;
        v29 = a1[1];
        if (v29 >= *a1)
          return 1;
        *a1 = v29;
        a1[1] = v30;
        return 1;
      }
      else if (v13 >= v12)
      {
        *a1 = v12;
        a1[1] = v11;
        v35 = *(a2 - 1);
        if (v35 >= v11)
          return 1;
        a1[1] = v35;
        *(a2 - 1) = v11;
        return 1;
      }
      else
      {
        *a1 = v13;
        *(a2 - 1) = v11;
        return 1;
      }
    case 4:
      v14 = a1 + 1;
      v15 = a1[1];
      v16 = a1 + 2;
      v17 = a1[2];
      v18 = *a1;
      if (v15 < *a1)
      {
        v19 = a1;
        v20 = a1 + 2;
        v21 = *a1;
        if (v17 >= v15)
        {
          *a1 = v15;
          a1[1] = v18;
          v19 = a1 + 1;
          v20 = a1 + 2;
          v21 = v18;
          if (v17 >= v18)
            goto LABEL_38;
        }
LABEL_35:
        *v19 = v17;
        *v20 = v18;
        v15 = v21;
LABEL_36:
        v31 = *(a2 - 1);
        if (v31 >= v15)
          return 1;
        goto LABEL_39;
      }
      if (v17 < v15)
      {
        *v14 = v17;
        *v16 = v15;
        v19 = a1;
        v20 = a1 + 1;
        v21 = v15;
        if (v17 >= v18)
          goto LABEL_36;
        goto LABEL_35;
      }
LABEL_38:
      v15 = v17;
      v31 = *(a2 - 1);
      if (v31 >= v15)
        return 1;
LABEL_39:
      *v16 = v31;
      *(a2 - 1) = v15;
      v32 = *v16;
      v33 = *v14;
      if (v32 >= v33)
        return 1;
      a1[1] = v32;
      a1[2] = v33;
      v34 = *a1;
      if (v32 >= *a1)
        return 1;
      *a1 = v32;
      a1[1] = v34;
      return 1;
    case 5:
      sub_20F2B3110(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1);
      return 1;
    default:
      v4 = a1 + 2;
      v3 = a1[2];
      v5 = a1[1];
      v6 = *a1;
      if (v5 >= *a1)
      {
        if (v3 >= v5)
          goto LABEL_20;
        a1[1] = v3;
        *v4 = v5;
        v7 = a1;
        v8 = a1 + 1;
      }
      else
      {
        v7 = a1;
        v8 = a1 + 2;
        if (v3 < v5)
          goto LABEL_19;
        *a1 = v5;
        a1[1] = v6;
        v7 = a1 + 1;
        v8 = a1 + 2;
      }
      if (v3 >= v6)
        goto LABEL_20;
LABEL_19:
      *v7 = v3;
      *v8 = v6;
LABEL_20:
      v22 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v23 = 0;
      for (i = 24; ; i += 8)
      {
        v25 = *v22;
        v26 = *v4;
        if (*v22 < v26)
          break;
LABEL_23:
        v4 = v22++;
        if (v22 == a2)
          return 1;
      }
      v27 = i;
      do
      {
        *(unint64_t *)((char *)a1 + v27) = v26;
        v28 = v27 - 8;
        if (v27 == 8)
        {
          *a1 = v25;
          if (++v23 != 8)
            goto LABEL_23;
          return v22 + 1 == a2;
        }
        v26 = *(unint64_t *)((char *)a1 + v27 - 16);
        v27 -= 8;
      }
      while (v25 < v26);
      *(unint64_t *)((char *)a1 + v28) = v25;
      if (++v23 != 8)
        goto LABEL_23;
      return v22 + 1 == a2;
  }
}

_QWORD *sub_20F7E5048(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  void *v22;
  void *v23;

  *a1 = &off_24CA02FE8;
  v2 = (void *)a1[56];
  if (v2)
  {
    a1[57] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[53];
  if (v3)
  {
    a1[54] = v3;
    operator delete(v3);
  }
  v4 = (void *)a1[50];
  if (v4)
  {
    a1[51] = v4;
    operator delete(v4);
  }
  v5 = (void *)a1[47];
  if (v5)
  {
    a1[48] = v5;
    operator delete(v5);
  }
  v6 = (void *)a1[44];
  if (v6)
  {
    a1[45] = v6;
    operator delete(v6);
  }
  v7 = (void *)a1[41];
  if (v7)
  {
    a1[42] = v7;
    operator delete(v7);
  }
  v8 = (void *)a1[38];
  if (v8)
  {
    a1[39] = v8;
    operator delete(v8);
  }
  v9 = (void *)a1[35];
  if (v9)
  {
    a1[36] = v9;
    operator delete(v9);
  }
  v10 = a1[28];
  if (v10)
  {
    v11 = a1[29];
    v12 = (void *)a1[28];
    if (v11 != v10)
    {
      do
      {
        v13 = *(std::__shared_weak_count **)(v11 - 16);
        if (v13)
        {
          p_shared_owners = (unint64_t *)&v13->__shared_owners_;
          do
            v15 = __ldaxr(p_shared_owners);
          while (__stlxr(v15 - 1, p_shared_owners));
          if (!v15)
          {
            ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
            std::__shared_weak_count::__release_weak(v13);
          }
        }
        v11 -= 640;
      }
      while (v11 != v10);
      v12 = (void *)a1[28];
    }
    a1[29] = v10;
    operator delete(v12);
  }
  v16 = a1[25];
  if (v16)
  {
    v17 = a1[26];
    v18 = (void *)a1[25];
    if (v17 != v16)
    {
      do
      {
        v19 = *(std::__shared_weak_count **)(v17 - 16);
        if (v19)
        {
          v20 = (unint64_t *)&v19->__shared_owners_;
          do
            v21 = __ldaxr(v20);
          while (__stlxr(v21 - 1, v20));
          if (!v21)
          {
            ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
            std::__shared_weak_count::__release_weak(v19);
          }
        }
        v17 -= 888;
      }
      while (v17 != v16);
      v18 = (void *)a1[25];
    }
    a1[26] = v16;
    operator delete(v18);
  }
  sub_20F7E417C((uint64_t)(a1 + 16));
  v22 = (void *)a1[13];
  if (v22)
  {
    a1[14] = v22;
    operator delete(v22);
  }
  sub_20F3C8EB4((uint64_t)(a1 + 4));
  v23 = (void *)a1[1];
  if (v23)
  {
    a1[2] = v23;
    operator delete(v23);
  }
  return a1;
}

void sub_20F7E5210(_QWORD *a1)
{
  sub_20F7E5290(a1);
  JUMPOUT(0x212BC6398);
}

void sub_20F7E5234(uint64_t a1, int a2, double a3, float64x2_t a4, float64x2_t a5, float64x2_t a6, __n128 a7)
{
  _QWORD *v7;
  _OWORD v13[2];

  v7 = *(_QWORD **)(a1 + 1120);
  __asm { FMOV            V0.2D, #1.0 }
  v13[0] = _Q0;
  v13[1] = _Q0;
  sub_20F7E54D4(v7, (uint64_t)v13, a2, *(double *)&_Q0, a4, a5, a6, a7);
}

uint64_t sub_20F7E5264(uint64_t a1)
{
  return **(_QWORD **)(a1 + 1120);
}

uint64_t sub_20F7E5270(uint64_t a1)
{
  return **(_QWORD **)(a1 + 1120);
}

uint64_t sub_20F7E527C(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 1120) + 8);
}

_QWORD *sub_20F7E5290(_QWORD *a1)
{
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  _QWORD *v22;
  uint64_t v23;
  void *v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;

  *a1 = off_24CA03080;
  v2 = (void *)a1[137];
  if (v2)
  {
    a1[138] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[134];
  if (v3)
  {
    a1[135] = v3;
    operator delete(v3);
  }
  v4 = a1[131];
  if (v4)
    MEMORY[0x212BC6368](v4, 0x1000C8000313F17);
  v5 = a1[128];
  if (v5)
    MEMORY[0x212BC6368](v5, 0x1000C8000313F17);
  v6 = a1[125];
  if (v6)
    MEMORY[0x212BC6368](v6, 0x1000C8000313F17);
  v7 = a1[122];
  if (v7)
    MEMORY[0x212BC6368](v7, 0x1000C8000313F17);
  v8 = a1[119];
  if (v8)
    MEMORY[0x212BC6368](v8, 0x1000C8000313F17);
  v9 = a1[116];
  if (v9)
    MEMORY[0x212BC6368](v9, 0x1000C8000313F17);
  v10 = (void *)a1[113];
  if (v10)
  {
    a1[114] = v10;
    operator delete(v10);
  }
  v11 = (void *)a1[110];
  if (v11)
  {
    a1[111] = v11;
    operator delete(v11);
  }
  v12 = (void *)a1[107];
  if (v12)
  {
    a1[108] = v12;
    operator delete(v12);
  }
  v13 = (void *)a1[104];
  if (v13)
  {
    a1[105] = v13;
    operator delete(v13);
  }
  v14 = (void *)a1[101];
  if (v14)
  {
    a1[102] = v14;
    operator delete(v14);
  }
  v15 = (void *)a1[98];
  if (v15)
  {
    a1[99] = v15;
    operator delete(v15);
  }
  v16 = (void *)a1[95];
  if (v16)
  {
    a1[96] = v16;
    operator delete(v16);
  }
  v17 = (void *)a1[92];
  if (v17)
  {
    a1[93] = v17;
    operator delete(v17);
  }
  v18 = (void *)a1[89];
  if (v18)
  {
    a1[90] = v18;
    operator delete(v18);
  }
  v19 = (void *)a1[86];
  if (v19)
  {
    a1[87] = v19;
    operator delete(v19);
  }
  v20 = (void *)a1[83];
  if (v20)
  {
    a1[84] = v20;
    operator delete(v20);
  }
  v21 = (void *)a1[80];
  if (v21)
  {
    a1[81] = v21;
    operator delete(v21);
  }
  v22 = (_QWORD *)a1[79];
  if (v22 == a1 + 76)
  {
    v23 = 4;
    v22 = a1 + 76;
  }
  else
  {
    if (!v22)
      goto LABEL_46;
    v23 = 5;
  }
  (*(void (**)(void))(*v22 + 8 * v23))();
LABEL_46:
  v24 = (void *)a1[72];
  if (v24)
  {
    a1[73] = v24;
    operator delete(v24);
  }
  v25 = (void *)a1[69];
  if (v25)
  {
    a1[70] = v25;
    operator delete(v25);
  }
  sub_20F3C6A50(a1 + 9);
  v26 = a1[4];
  if (v26)
    MEMORY[0x212BC6368](v26, 0x1000C8000313F17);
  v27 = a1[1];
  if (v27)
    MEMORY[0x212BC6368](v27, 0x1000C8000313F17);
  return a1;
}

void sub_20F7E54D4(_QWORD *a1, uint64_t a2, int a3, double a4, float64x2_t _Q1, float64x2_t _Q2, float64x2_t _Q3, __n128 _Q4)
{
  unint64_t *v8;
  uint64_t v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int *v13;
  int v14;
  int v15;
  int v16;
  unsigned int v17;
  unsigned int v18;
  float64x2_t *v19;
  _BOOL4 v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  int v24;
  float64x2_t v25;
  float64x2_t v26;
  float64x2_t v27;
  float64x2_t v28;
  float64x2_t v29;
  float64x2_t v30;
  float64x2_t v31;
  float64x2_t v32;
  float64x2_t v33;
  float64x2_t v34;
  float64x2_t v35;
  float64x2_t v36;
  float64x2_t v37;
  float64x2_t v38;
  float64x2_t v39;
  float64x2_t v40;
  float64x2_t v41;
  float64x2_t v42;
  float64x2_t v43;
  float64x2_t v44;
  float64x2_t v45;
  float64x2_t v46;
  float64x2_t v47;
  float64x2_t v48;
  float64x2_t v49;
  float64x2_t v50;
  float64x2_t v51;
  float64x2_t v52;
  float64x2_t v53;
  float64x2_t v54;
  float64x2_t v55;
  float64x2_t v56;
  float64x2_t v57;
  float64x2_t v58;
  float64x2_t v59;
  float64x2_t v60;
  float64x2_t v61;
  float64x2_t v62;
  float64x2_t v63;
  float64x2_t v64;
  float64x2_t v65;
  float64x2_t v66;
  float64x2_t v67;
  float64x2_t v68;
  double v69;
  float64x2_t v70;
  float64x2_t v71;
  float64x2_t v72;
  float64x2_t v73;
  float64x2_t v74;
  float64x2_t v75;
  float64x2_t v76;
  float64x2_t v77;
  float64x2_t v78;
  float64x2_t v79;
  float64x2_t v80;
  float64x2_t v81;
  float64x2_t v82;
  float64x2_t v83;
  float64x2_t v84;
  float64x2_t v85;
  float64x2_t v86;
  float64x2_t v87;
  float64x2_t v88;
  float64x2_t v89;
  float64x2_t v90;
  float64x2_t v91;
  float64x2_t v92;
  float64x2_t v93;
  float64x2_t v94;
  float64x2_t v95;
  float64x2_t v96;
  float64x2_t v97;
  float64x2_t v98;
  float64x2_t v99;
  float64x2_t v100;
  float64x2_t v101;
  float64x2_t v102;
  float64x2_t v103;
  float64x2_t v104;
  float64x2_t v105;
  float64x2_t v106;
  float64x2_t v107;
  float64x2_t v108;
  float64x2_t v109;
  float64x2_t v110;
  float64x2_t v111;
  float64x2_t v112;
  float64x2_t v113;
  float64x2_t v114;
  float64x2_t v115;
  double v116;
  float64x2_t v117;
  float64x2_t v118;
  float64x2_t v119;
  float64x2_t v120;
  float64x2_t v121;
  float64x2_t v122;
  float64x2_t v123;
  float64x2_t v124;
  float64x2_t v125;
  float64x2_t v126;
  float64x2_t v127;
  __int128 v128;
  uint64_t v135;
  char *v136;
  char *v137;
  float64x2_t *v138;
  float64x2_t v139;
  float64x2_t v140;
  float64x2_t v141;
  float64x2_t v142;
  float64x2_t v143;
  float64x2_t v144;
  float64x2_t v145;
  float64x2_t v146;
  float64x2_t v147;
  float64x2_t v148;
  float64x2_t v149;
  float64x2_t v150;
  float64x2_t v151;
  float64x2_t v152;
  float64x2_t v153;
  float64x2_t v154;
  float64x2_t v155;
  float64x2_t v156;
  float64x2_t v157;
  float64x2_t v158;
  float64x2_t v159;
  float64x2_t v160;
  float64x2_t v161;
  float64x2_t v162;
  float64x2_t v163;
  float64x2_t v164;
  float64x2_t v165;
  float64x2_t v166;
  float64x2_t v167;
  float64x2_t v168;
  float64x2_t v169;
  float64x2_t v170;
  float64x2_t v171;
  float64x2_t v172;
  float64x2_t v173;
  float64x2_t v174;
  uint64_t v175;
  char *v176;
  char *v177;
  float64x2_t *v178;
  float64x2_t v179;
  float64x2_t v180;
  float64x2_t v181;
  float64x2_t v182;
  float64x2_t v183;
  float64x2_t v184;
  float64x2_t v185;
  float64x2_t v186;
  float64x2_t v187;
  float64x2_t v188;
  float64x2_t v189;
  float64x2_t v190;
  float64x2_t v191;
  float64x2_t v192;
  float64x2_t v193;
  float64x2_t v194;
  float64x2_t v195;
  float64x2_t v196;
  float64x2_t v197;
  float64x2_t v198;
  float64x2_t v199;
  float64x2_t v200;
  float64x2_t v201;
  float64x2_t v202;
  float64x2_t v203;
  float64x2_t v204;
  float64x2_t v205;
  float64x2_t v206;
  float64x2_t v207;
  float64x2_t v208;
  float64x2_t v209;
  float64x2_t v210;
  float64x2_t v211;
  float64x2_t v212;
  float64x2_t v213;
  float64x2_t v214;
  float64x2_t v215;
  float64x2_t v216;
  float64x2_t v217;
  float64x2_t v218;
  float64x2_t v219;
  uint64_t v220;
  char *v221;
  char *v222;
  float64x2_t *v223;
  float64x2_t v224;
  float64x2_t v225;
  float64x2_t v226;
  float64x2_t v227;
  float64x2_t v228;
  float64x2_t v229;
  float64x2_t v230;
  float64x2_t v231;
  float64x2_t v232;
  float64x2_t v233;
  float64x2_t v234;
  float64x2_t v235;
  float64x2_t v236;
  float64x2_t v237;
  float64x2_t v238;
  float64x2_t v239;
  float64x2_t v240;
  float64x2_t v241;
  float64x2_t v242;
  float64x2_t v243;
  float64x2_t v244;
  float64x2_t v245;
  float64x2_t v246;
  float64x2_t v247;
  float64x2_t v248;
  float64x2_t v249;
  float64x2_t v250;
  float64x2_t v251;
  float64x2_t v252;
  float64x2_t v253;
  float64x2_t v254;
  float64x2_t v255;
  float64x2_t v256;
  float64x2_t v257;
  float64x2_t v258;
  float64x2_t v259;
  float64x2_t v260;
  float64x2_t v261;
  float64x2_t v262;
  uint64_t v263;
  char *v264;
  char *v265;
  float64x2_t *v266;
  float64x2_t v267;
  float64x2_t v268;
  float64x2_t v269;
  float64x2_t v270;
  float64x2_t v271;
  float64x2_t v272;
  float64x2_t v273;
  float64x2_t v274;
  float64x2_t v275;
  float64x2_t v276;
  float64x2_t v277;
  float64x2_t v278;
  float64x2_t v279;
  float64x2_t v280;
  float64x2_t v281;
  float64x2_t v282;
  float64x2_t v283;
  float64x2_t v284;
  float64x2_t v285;
  float64x2_t v286;
  float64x2_t v287;
  float64x2_t v288;
  float64x2_t v289;
  float64x2_t v290;
  float64x2_t v291;
  float64x2_t v292;
  float64x2_t v293;
  float64x2_t v294;
  float64x2_t v295;
  float64x2_t v296;
  float64x2_t v297;
  float64x2_t v298;
  float64x2_t v299;
  float64x2_t v300;
  float64x2_t v301;
  float64x2_t v302;
  float64x2_t v303;
  float64x2_t v304;
  float64x2_t v305;
  float64x2_t v306;
  float64x2_t v307;
  float64x2_t v308;
  float64x2_t v309;
  float64x2_t v310;
  float64x2_t v311;
  float64x2_t *v312;
  float64x2_t v313;
  float64x2_t v314;
  float64x2_t *v315;
  float64x2_t v316;
  float64x2_t v317;
  unint64_t *v318;
  uint64_t v319;
  uint64_t v320;
  unsigned int *v321;
  unsigned int *v322;
  unsigned int *v323;
  unsigned int *v324;
  int v325;
  int v326;
  int v327;
  unsigned int v328;
  unsigned int v329;
  uint64_t v330;
  int64x2_t v331;
  int64x2_t v332;
  float64x2_t v334;
  float64x2_t v335;
  float64x2_t v336;
  double v337;
  unint64_t v340;
  double v341;
  float64x2_t v342;
  int64x2_t v343;
  int64x2_t v344;
  float64x2_t v346;
  int8x16_t v348;
  double v349;
  float64x2_t v350;
  unint64_t v352;
  float64x2_t v355;
  float64x2_t v356;
  double v357;
  double v359;
  float64x2_t v360;
  float64x2_t v361;
  float64x2_t v362;
  double v364;
  float64x2_t v365;
  float64x2_t v366;
  float64x2_t v367;
  float64x2_t v368;
  float64x2_t v369;
  float64x2_t v370;
  float64x2_t v371;
  float64x2_t v372;
  float64x2_t v373;
  float64x2_t v374;
  float64x2_t v375;
  float64x2_t v376;
  float64x2_t v377;
  float64x2_t v378;
  float64x2_t v379;
  float64x2_t v380;
  float64x2_t v381;
  float64x2_t v382;
  float64x2_t v383;
  float64x2_t v384;
  float64x2_t v385;
  float64x2_t v386;
  float64x2_t v387;
  float64x2_t v388;
  float64x2_t v389;
  float64x2_t v390;
  int8x16_t v391;
  float64x2_t v392;
  double v395;
  double v396;
  float64x2_t v397;
  float64x2_t v398;
  float64x2_t v399;
  float64x2_t v400;
  double v401;
  float64x2_t v402;
  float64x2_t v403;
  int8x16_t v404;
  float64x2_t v405;
  double v406;
  float64x2_t v407;
  float64x2_t v409;
  double v410;
  int8x16_t v411;
  float64x2_t v412;
  float64x2_t v413;
  float64x2_t v414;
  double v415;
  int64x2_t v416;
  double v417;
  float64x2_t v418;
  float64x2_t v419;
  float64x2_t v420;
  float64x2_t v421;
  float64x2_t v422;
  float64x2_t v423;
  float64x2_t v424;
  float64x2_t v425;
  float64x2_t v426;
  float64x2_t v429;
  double v433;
  float64x2_t v436;
  float64x2_t v437;
  float64x2_t v438;
  float64x2_t v439;
  float64x2_t v440;
  float64x2_t v441;
  float64_t v443;
  float64_t v444;
  float64_t v445;
  double v446;
  float64x2_t v448;
  float64x2_t v449;
  float64x2_t v450;
  float64x2_t v451;
  uint64_t v453;
  int v454;
  BOOL v455;
  float64x2_t v456;
  float64x2_t v457;
  int8x16_t v458;
  float64x2_t v459;
  float64x2_t v460;
  float64x2_t v461;
  float64x2_t v462;
  float64x2_t v463;
  float64x2_t v464;
  uint64_t v465;
  int v466;
  float64x2_t v469;
  float64x2_t v471;
  float64x2_t v472;
  float64x2_t v478;
  float64x2_t v479;
  float64x2_t v480;
  float64x2_t v485;
  float64x2_t v486;
  float64x2_t v487;
  BOOL v491;
  uint64_t v492;
  int v493;
  BOOL v494;
  float64x2_t v495;
  float64x2_t v497;
  float64x2_t v498;
  float64x2_t v499;
  float64x2_t v503;
  float64x2_t v507;
  float64x2_t v509;
  int8x16_t v510;
  int8x16_t v512;
  float64x2_t v513;
  double v514;
  int8x16_t v516;
  double v517;
  float64x2_t v518;
  double v519;
  uint64_t v520;
  int v521;
  float64x2_t v522;
  float64x2_t v524;
  float64x2_t v525;
  float64x2_t v526;
  double v528;
  double v531;
  float64x2_t v532;
  float64x2_t v533;
  float64x2_t v534;
  float64x2_t v536;
  double v537;
  float64x2_t v540;
  double v541;
  BOOL v543;
  float64x2_t v544;
  float64x2_t v545;
  int8x16_t v547;
  float64x2_t v548;
  float64x2_t v549;
  float64x2_t v550;
  double v551;
  float64x2_t v552;
  double v553;
  float64x2_t v555;
  float64x2_t v556;
  float64x2_t v557;
  float64x2_t v561;
  float64x2_t v563;
  float64x2_t v564;
  float64x2_t v566;
  float64x2_t v567;
  float64x2_t v568;
  float64x2_t v569;
  int8x16_t v570;
  double v571;
  double v573;
  float64_t v574;
  float64_t v575;
  double v577;
  double v578;
  double v579;
  int8x16_t v580;
  float64x2_t v581;
  int64x2_t v584;
  float64x2_t v585;
  unint64_t v586;
  uint64_t v588;
  int v589;
  BOOL v590;
  __int128 v591;
  __int128 v592;
  uint64_t v593;
  int v594;
  float64x2_t v597;
  float64x2_t v598;
  float64x2_t v603;
  float64x2_t v605;
  float64x2_t v610;
  float64x2_t v611;
  float64x2_t v612;
  BOOL v616;
  float64x2_t v617;
  float64x2_t v618;
  float64x2_t v619;
  float64x2_t v620;
  float64x2_t v621;
  float64x2_t v622;
  float64x2_t v623;
  float64x2_t v624;
  float64x2_t v625;
  float64x2_t v626;
  float64x2_t v627;
  float64x2_t v628;
  float64x2_t v629;
  float64x2_t v630;
  float64x2_t v631;
  float64x2_t v632;
  float64x2_t v633;
  double v634;
  float64x2_t v636;
  float64x2_t v637;
  float64x2_t v639;
  float64x2_t v640;
  float64_t v642;
  double v643;
  float64x2_t v645;
  float64_t v646;
  float64_t v647;
  unint64_t v652;
  float64x2_t v653;
  float64x2_t v654;
  uint64_t v655;
  int v656;
  float64x2_t v657;
  float64x2_t v659;
  float64x2_t v661;
  double v662;
  double v663;
  float64x2_t v666;
  float64x2_t v667;
  double v668;
  BOOL v670;
  float64x2_t v671;
  float64x2_t v672;
  float64x2_t v673;
  float64x2_t v674;
  float64x2_t v675;
  float64x2_t v676;
  float64x2_t v677;
  float64x2_t v678;
  float64x2_t v679;
  float64x2_t v680;
  int8x16_t v681;
  int8x16_t v682;
  float64x2_t *v683;
  float64x2_t v684;
  float64x2_t v685;
  float64x2_t v686;
  double v689;
  float64x2_t v718;
  float64x2_t v758;
  int8x16_t v766;
  int8x16_t v767;
  int8x16_t v768;
  int8x16_t v769;
  int8x16_t v770;
  int8x16_t v771;
  int8x16_t v772;
  int8x16_t v773;
  int8x16_t v774;
  int8x16_t v775;
  int8x16_t v776;
  int8x16_t v777;
  int8x16_t v778;
  int8x16_t v779;
  int8x16_t v780;
  int8x16_t v781;
  int8x16_t v782;
  int8x16_t v783;
  int8x16_t v784;
  int8x16_t v785;
  int8x16_t v786;
  int8x16_t v787;
  int8x16_t v788;
  int8x16_t v789;
  int8x16_t v790;
  int8x16_t v791;
  int8x16_t v792;
  int8x16_t v793;
  int8x16_t v794;
  int8x16_t v795;
  int8x16_t v796;
  int8x16_t v797;
  uint64_t v798;
  uint64_t v799;
  int v800;
  int v801;
  double v802;
  float64x2_t v803;
  float64x2_t v804;
  double v805;
  float64x2_t v806;
  float64x2_t v807;
  float64x2_t v808;
  float64x2_t v809;
  double v810;
  float64x2_t v811;
  float64x2_t v812;
  double v813;
  float64x2_t v814;
  float64x2_t v815;
  double v816;
  float64x2_t v817;
  float64x2_t v818;
  double v819;
  float64x2_t v820;
  float64x2_t v821;
  double v822;
  float64x2_t v823;
  float64x2_t v824;
  double v825;
  float64x2_t v826;
  float64x2_t v827;
  double v828;
  float64x2_t v829;
  float64x2_t v830;
  double v831;
  double v832;
  float64x2_t v833;
  float64x2_t v834;
  float64x2_t v835;
  int8x16_t v836;
  int8x16_t v837;
  double v838;
  float64x2_t v839;
  float64x2_t v840;
  float64x2_t v841;
  float64x2_t v842;
  float64x2_t v843;
  int8x16_t v844;
  int8x16_t v845;
  float64x2_t v846;
  float64x2_t v847;
  int8x16_t v848;
  float64x2_t v849;
  int8x16_t v850;
  int8x16_t v851;
  int8x16_t v852;
  float64x2_t v853;
  int8x16_t v854;
  int8x16_t v855;
  float64x2_t v856;
  float64x2_t v857;
  int64x2_t v858;
  float64x2_t v859;
  float64x2_t v860;
  int8x16_t v861;
  int8x16_t v862;
  float64x2_t v863;
  float64x2_t v864;
  int8x16_t v865;
  int8x16_t v866;
  float64x2_t v867;
  double v868;
  float64x2_t v869;
  double v870;
  float64x2_t v871;
  float64x2_t v872;
  double v873;
  float64x2_t v874;
  float64x2_t v875;
  float64x2_t v876;
  float64x2_t v877;
  double v878;
  float64x2_t v879;
  float64x2_t v880;
  double v881;
  float64x2_t v882;
  float64x2_t v883;
  double v884;
  float64x2_t v885;
  float64x2_t v886;
  double v887;
  float64x2_t v888;
  float64x2_t v889;
  double v890;
  float64x2_t v891;
  float64x2_t v892;
  double v893;
  float64x2_t v894;
  float64x2_t v895;
  double v896;
  float64x2_t v897;
  float64x2_t v898;
  double v899;
  double v900;
  float64x2_t v901;
  float64x2_t v902;
  float64x2_t v903;
  int8x16_t v904;
  int8x16_t v905;
  double v906;
  float64x2_t v907;
  float64x2_t v908;
  float64x2_t v909;
  float64x2_t v910;
  float64x2_t v911;
  float64x2_t v912;
  float64x2_t v913;
  float64x2_t v914;
  float64x2_t v915;
  float64x2_t v916;
  float64x2_t v917;
  float64x2_t v918;
  double v919;
  float64x2_t v920;
  float64x2_t v921;
  float64x2_t v922;
  int8x16_t v923;
  int8x16_t v924;
  float64x2_t v925;
  int8x16_t v926;
  int8x16_t v927;
  float64x2_t v928;
  float64x2_t v929;
  float64x2_t v930;
  float64x2_t v931;
  float64x2_t v932;
  int8x16_t v933;
  int8x16_t v934;
  float64x2_t v935;
  float64x2_t v936;
  int8x16_t v937;
  float64x2_t v938;
  int8x16_t v939;
  int8x16_t v940;
  int8x16_t v941;
  float64x2_t v942;
  int8x16_t v943;
  int8x16_t v944;
  float64x2_t v945;
  float64x2_t v946;
  int64x2_t v947;
  float64x2_t v948;
  float64x2_t v949;
  int8x16_t v950;
  int8x16_t v951;
  float64x2_t v952;
  float64x2_t v953;
  int8x16_t v954;
  int8x16_t v955;
  float64x2_t v956;
  double v957;
  float64x2_t v958;
  double v959;
  float64x2_t v960;
  float64x2_t v961;
  double v962;
  float64x2_t v963;
  float64x2_t v964;
  double v965;
  float64x2_t v966;
  float64x2_t v967;
  double v968;
  float64x2_t v969;
  float64x2_t v970;
  double v971;
  float64x2_t v972;
  float64x2_t v973;
  double v974;
  float64x2_t v975;
  float64x2_t v976;
  float64x2_t v977;
  float64x2_t v978;
  float64x2_t v979;
  float64x2_t v980;
  float64x2_t v981;
  float64x2_t v982;
  float64x2_t v983;
  float64x2_t v984;
  float64x2_t v985;
  float64x2_t v986;
  float64x2_t v987;
  float64x2_t v988;
  double v989;
  float64x2_t v990;
  float64x2_t v991;
  float64x2_t v992;
  int8x16_t v993;
  int8x16_t v994;
  float64x2_t v995;
  int8x16_t v996;
  int8x16_t v997;
  float64x2_t v998;
  float64x2_t v999;
  float64x2_t v1000;
  float64x2_t v1001;
  float64x2_t v1002;
  int8x16_t v1003;
  float64x2_t v1004;
  float64x2_t v1005;
  int8x16_t v1006;
  float64x2_t v1007;
  int8x16_t v1008;
  int8x16_t v1009;
  int8x16_t v1010;
  float64x2_t v1011;
  int8x16_t v1012;
  int64x2_t v1013;
  float64x2_t v1014;
  float64x2_t v1015;
  int64x2_t v1016;
  double v1017;
  float64x2_t v1018;
  unint64_t *v1019;
  double v1020;
  float64x2_t v1021;
  float64x2_t v1022;
  double v1023;
  float64x2_t v1024;
  float64x2_t v1025;
  double v1026;
  float64x2_t v1027;
  float64x2_t v1028;
  double v1029;
  float64x2_t v1030;
  float64x2_t v1031;
  double v1032;
  float64x2_t v1033;
  float64x2_t v1034;
  int8x16_t v1035;
  int8x16_t v1036;
  int8x16_t v1037;
  int8x16_t v1038;
  int8x16_t v1039;
  int8x16_t v1040;
  double v1041;
  int8x16_t v1042;
  int8x16_t v1043;
  int8x16_t v1044;
  int8x16_t v1045;
  int8x16_t v1046;
  int8x16_t v1047;
  int8x16_t v1048;
  int8x16_t v1049;
  int8x16_t v1050;
  int8x16_t v1051;
  float64x2_t v1052;
  float64x2_t v1053;
  float64x2_t v1054;
  float64x2_t v1055;
  float64x2_t v1056;
  int8x16_t v1057;
  float64x2_t v1058;
  float64x2_t v1059;
  int8x16_t v1060;
  int8x16_t v1061;
  int8x16_t v1062;
  int8x16_t v1063;
  float64x2_t v1064;
  int8x16_t v1065;
  float64x2_t v1066;
  int8x16_t v1067;
  int64x2_t v1068;
  float64x2_t v1069;
  float64x2_t v1070;
  int64x2_t v1071;
  double v1072;
  float64x2_t v1073;
  float64x2_t v1074;
  int8x16_t v1075;
  int8x16_t v1076;
  int8x16_t v1077;
  int8x16_t v1078;
  int8x16_t v1079;
  int8x16_t v1080;
  int8x16_t v1081;
  int8x16_t v1082;
  __int128 v1083;
  unsigned int v1088;
  unsigned int v1089;
  uint64_t v1090;
  char *v1091;
  char *v1092;
  float64x2_t *v1093;
  float64x2_t v1094;
  float64x2_t v1095;
  float64x2_t v1096;
  float64x2_t v1097;
  float64x2_t v1098;
  float64x2_t v1099;
  float64x2_t v1100;
  float64x2_t v1101;
  float64x2_t v1102;
  float64x2_t v1103;
  float64x2_t v1104;
  float64x2_t v1105;
  float64x2_t v1106;
  float64x2_t v1107;
  float64x2_t v1108;
  float64x2_t v1109;
  float64x2_t v1110;
  float64x2_t v1111;
  float64x2_t v1112;
  float64x2_t v1113;
  float64x2_t v1114;
  float64x2_t v1115;
  float64x2_t v1116;
  float64x2_t v1117;
  float64x2_t v1118;
  float64x2_t v1119;
  float64x2_t v1120;
  float64x2_t v1121;
  float64x2_t v1122;
  float64x2_t v1123;
  float64x2_t v1124;
  float64x2_t v1125;
  float64x2_t v1126;
  float64x2_t v1127;
  float64x2_t v1128;
  float64x2_t v1129;
  float64x2_t v1130;
  float64x2_t v1131;
  float64x2_t v1132;
  float64x2_t v1133;
  float64x2_t v1134;
  float64x2_t v1135;
  float64x2_t v1136;
  float64x2_t v1137;
  float64x2_t v1138;
  float64x2_t v1139;
  float64x2_t v1140;
  float64x2_t v1141;
  float64x2_t v1142;
  float64x2_t v1143;
  float64x2_t v1144;
  float64x2_t v1145;
  float64x2_t v1146;
  float64x2_t v1147;
  uint64_t v1148;
  char *v1149;
  char *v1150;
  float64x2_t *v1151;
  float64x2_t v1152;
  float64x2_t v1153;
  float64x2_t v1154;
  float64x2_t v1155;
  float64x2_t v1156;
  float64x2_t v1157;
  float64x2_t v1158;
  float64x2_t v1159;
  float64x2_t v1160;
  float64x2_t v1161;
  float64x2_t v1162;
  float64x2_t v1163;
  float64x2_t v1164;
  float64x2_t v1165;
  float64x2_t v1166;
  float64x2_t v1167;
  float64x2_t v1168;
  float64x2_t v1169;
  float64x2_t v1170;
  float64x2_t v1171;
  float64x2_t v1172;
  float64x2_t v1173;
  float64x2_t v1174;
  float64x2_t v1175;
  float64x2_t v1176;
  float64x2_t v1177;
  float64x2_t v1178;
  float64x2_t v1179;
  float64x2_t v1180;
  float64x2_t v1181;
  float64x2_t v1182;
  float64x2_t v1183;
  float64x2_t v1184;
  float64x2_t v1185;
  float64x2_t v1186;
  float64x2_t v1187;
  float64x2_t v1188;
  float64x2_t v1189;
  float64x2_t v1190;
  float64x2_t v1191;
  float64x2_t v1192;
  float64x2_t v1193;
  float64x2_t v1194;
  float64x2_t v1195;
  float64x2_t v1196;
  float64x2_t v1197;
  float64x2_t v1198;
  float64x2_t v1199;
  float64x2_t v1200;
  float64x2_t v1201;
  float64x2_t v1202;
  float64x2_t v1203;
  float64x2_t v1204;
  float64x2_t v1205;
  uint64_t v1206;
  char *v1207;
  char *v1208;
  float64x2_t *v1209;
  float64x2_t v1210;
  float64x2_t v1211;
  float64x2_t v1212;
  float64x2_t v1213;
  float64x2_t v1214;
  float64x2_t v1215;
  float64x2_t v1216;
  float64x2_t v1217;
  float64x2_t v1218;
  float64x2_t v1219;
  float64x2_t v1220;
  float64x2_t v1221;
  float64x2_t v1222;
  float64x2_t v1223;
  float64x2_t v1224;
  float64x2_t v1225;
  float64x2_t v1226;
  float64x2_t v1227;
  float64x2_t v1228;
  float64x2_t v1229;
  float64x2_t v1230;
  float64x2_t v1231;
  float64x2_t v1232;
  float64x2_t v1233;
  float64x2_t v1234;
  float64x2_t v1235;
  float64x2_t v1236;
  float64x2_t v1237;
  float64x2_t v1238;
  float64x2_t v1239;
  float64x2_t v1240;
  float64x2_t v1241;
  float64x2_t v1242;
  float64x2_t v1243;
  float64x2_t v1244;
  uint64_t v1245;
  char *v1246;
  char *v1247;
  float64x2_t *v1248;
  float64x2_t v1249;
  float64x2_t v1250;
  float64x2_t v1251;
  float64x2_t v1252;
  float64x2_t v1253;
  float64x2_t v1254;
  float64x2_t v1255;
  float64x2_t v1256;
  float64x2_t v1257;
  float64x2_t v1258;
  float64x2_t v1259;
  float64x2_t v1260;
  float64x2_t v1261;
  float64x2_t v1262;
  float64x2_t v1263;
  float64x2_t v1264;
  float64x2_t v1265;
  float64x2_t v1266;
  float64x2_t v1267;
  float64x2_t v1268;
  float64x2_t v1269;
  float64x2_t v1270;
  float64x2_t v1271;
  float64x2_t v1272;
  float64x2_t v1273;
  float64x2_t v1274;
  float64x2_t v1275;
  float64x2_t v1276;
  float64x2_t v1277;
  float64x2_t v1278;
  float64x2_t v1279;
  float64x2_t v1280;
  float64x2_t v1281;
  float64x2_t v1282;
  float64x2_t v1283;
  unsigned int v1284;
  uint64_t v1285;
  char *v1286;
  char *v1287;
  float64x2_t *v1288;
  float64x2_t v1289;
  float64x2_t v1290;
  float64x2_t v1291;
  float64x2_t v1292;
  float64x2_t v1293;
  float64x2_t v1294;
  float64x2_t v1295;
  float64x2_t v1296;
  float64x2_t v1297;
  float64x2_t v1298;
  float64x2_t v1299;
  float64x2_t v1300;
  float64x2_t v1301;
  float64x2_t v1302;
  float64x2_t v1303;
  float64x2_t v1304;
  float64x2_t v1305;
  float64x2_t v1306;
  float64x2_t v1307;
  float64x2_t v1308;
  float64x2_t v1309;
  float64x2_t v1310;
  float64x2_t v1311;
  float64x2_t v1312;
  float64x2_t v1313;
  float64x2_t v1314;
  float64x2_t v1315;
  float64x2_t v1316;
  float64x2_t v1317;
  float64x2_t v1318;
  float64x2_t v1319;
  float64x2_t v1320;
  float64x2_t v1321;
  float64x2_t v1322;
  float64x2_t v1323;
  float64x2_t v1324;
  float64x2_t v1325;
  float64x2_t v1326;
  float64x2_t v1327;
  float64x2_t v1328;
  float64x2_t v1329;
  float64x2_t v1330;
  float64x2_t v1331;
  float64x2_t v1332;
  float64x2_t v1333;
  float64x2_t v1334;
  float64x2_t v1335;
  float64x2_t v1336;
  float64x2_t v1337;
  float64x2_t v1338;
  float64x2_t v1339;
  float64x2_t v1340;
  float64x2_t v1341;
  float64x2_t v1342;
  uint64_t v1343;
  char *v1344;
  char *v1345;
  float64x2_t *v1346;
  float64x2_t v1347;
  float64x2_t v1348;
  float64x2_t v1349;
  float64x2_t v1350;
  float64x2_t v1351;
  float64x2_t v1352;
  float64x2_t v1353;
  float64x2_t v1354;
  float64x2_t v1355;
  float64x2_t v1356;
  float64x2_t v1357;
  float64x2_t v1358;
  float64x2_t v1359;
  float64x2_t v1360;
  float64x2_t v1361;
  float64x2_t v1362;
  float64x2_t v1363;
  float64x2_t v1364;
  float64x2_t v1365;
  float64x2_t v1366;
  float64x2_t v1367;
  float64x2_t v1368;
  float64x2_t v1369;
  float64x2_t v1370;
  float64x2_t v1371;
  float64x2_t v1372;
  float64x2_t v1373;
  float64x2_t v1374;
  float64x2_t v1375;
  float64x2_t v1376;
  float64x2_t v1377;
  float64x2_t v1378;
  float64x2_t v1379;
  float64x2_t v1380;
  float64x2_t v1381;
  float64x2_t v1382;
  float64x2_t v1383;
  float64x2_t v1384;
  float64x2_t v1385;
  float64x2_t v1386;
  float64x2_t v1387;
  float64x2_t v1388;
  float64x2_t v1389;
  float64x2_t v1390;
  float64x2_t v1391;
  float64x2_t v1392;
  float64x2_t v1393;
  float64x2_t v1394;
  float64x2_t v1395;
  float64x2_t v1396;
  float64x2_t v1397;
  float64x2_t v1398;
  float64x2_t v1399;
  float64x2_t v1400;
  uint64_t v1401;
  char *v1402;
  char *v1403;
  uint64_t v1404;
  float64x2_t v1405;
  float64x2_t v1406;
  float64x2_t v1407;
  float64x2_t v1408;
  float64x2_t v1409;
  float64x2_t v1410;
  float64x2_t v1411;
  float64x2_t v1412;
  float64x2_t v1413;
  float64x2_t v1414;
  float64x2_t v1415;
  float64x2_t v1416;
  float64x2_t v1417;
  float64x2_t v1418;
  float64x2_t v1419;
  float64x2_t v1420;
  uint64_t v1421;
  char *v1422;
  char *v1423;
  float64x2_t *v1424;
  float64x2_t v1425;
  float64x2_t v1426;
  float64x2_t v1427;
  float64x2_t v1428;
  float64x2_t v1429;
  float64x2_t v1430;
  uint64_t v1431;
  char *v1432;
  char *v1433;
  float64x2_t *v1434;
  float64x2_t v1435;
  float64x2_t v1436;
  float64x2_t v1437;
  float64x2_t v1438;
  float64x2_t v1439;
  float64x2_t v1440;
  float64x2_t v1441;
  float64x2_t v1442;
  float64x2_t v1443;
  float64x2_t v1444;
  float64x2_t v1445;
  float64x2_t v1446;
  float64x2_t v1447;
  float64x2_t v1448;
  float64x2_t v1449;
  float64x2_t v1450;
  float64x2_t v1451;
  float64x2_t v1452;
  float64x2_t v1453;
  float64x2_t v1454;
  float64x2_t v1455;
  float64x2_t v1456;
  float64x2_t v1457;
  float64x2_t v1458;
  float64x2_t v1459;
  float64x2_t v1460;
  float64x2_t v1461;
  float64x2_t v1462;
  float64x2_t v1463;
  float64x2_t v1464;
  float64x2_t v1465;
  float64x2_t v1466;
  float64x2_t v1467;
  float64x2_t v1468;
  float64x2_t v1469;
  float64x2_t v1470;
  float64x2_t v1471;
  float64x2_t v1472;
  float64x2_t v1473;
  float64x2_t v1474;
  float64x2_t v1475;
  float64x2_t v1476;
  float64x2_t v1477;
  float64x2_t v1478;
  float64x2_t v1479;
  float64x2_t v1480;
  float64x2_t v1481;
  float64x2_t v1482;
  float64x2_t v1483;
  float64x2_t v1484;
  float64x2_t v1485;
  float64x2_t v1486;
  float64x2_t v1487;
  float64x2_t v1488;
  float64x2_t v1489;
  float64x2_t v1490;
  float64x2_t v1491;
  float64x2_t v1492;
  float64x2_t v1493;
  float64x2_t v1494;
  uint64_t v1495;
  char *v1496;
  char *v1497;
  float64x2_t *v1498;
  float64x2_t v1499;
  float64x2_t v1500;
  float64x2_t v1501;
  float64x2_t v1502;
  float64x2_t v1503;
  float64x2_t v1504;
  float64x2_t v1505;
  float64x2_t v1506;
  float64x2_t v1507;
  float64x2_t v1508;
  float64x2_t v1509;
  float64x2_t v1510;
  float64x2_t v1511;
  float64x2_t v1512;
  float64x2_t v1513;
  float64x2_t v1514;
  float64x2_t v1515;
  float64x2_t v1516;
  float64x2_t v1517;
  float64x2_t v1518;
  float64x2_t v1519;
  float64x2_t v1520;
  float64x2_t v1521;
  float64x2_t v1522;
  float64x2_t v1523;
  float64x2_t v1524;
  float64x2_t v1525;
  float64x2_t v1526;
  float64x2_t v1527;
  float64x2_t v1528;
  float64x2_t v1529;
  float64x2_t v1530;
  float64x2_t v1531;
  float64x2_t v1532;
  float64x2_t v1533;
  float64x2_t v1534;
  float64x2_t v1535;
  float64x2_t v1536;
  float64x2_t v1537;
  float64x2_t v1538;
  float64x2_t v1539;
  float64x2_t v1540;
  float64x2_t v1541;
  float64x2_t v1542;
  float64x2_t v1543;
  float64x2_t v1544;
  float64x2_t v1545;
  float64x2_t v1546;
  float64x2_t v1547;
  float64x2_t v1548;
  float64x2_t v1549;
  float64x2_t v1550;
  float64x2_t v1551;
  float64x2_t v1552;
  float64x2_t v1553;
  float64x2_t v1554;
  uint64_t v1555;
  char *v1556;
  char *v1557;
  uint64_t v1558;
  float64x2_t v1559;
  float64x2_t v1560;
  float64x2_t v1561;
  float64x2_t v1562;
  float64x2_t v1563;
  float64x2_t v1564;
  float64x2_t v1565;
  float64x2_t v1566;
  float64x2_t v1567;
  float64x2_t v1568;
  float64x2_t v1569;
  float64x2_t v1570;
  float64x2_t v1571;
  float64x2_t v1572;
  float64x2_t v1573;
  float64x2_t v1574;
  float64x2_t v1575;
  float64x2_t v1576;
  float64x2_t v1577;
  float64x2_t v1578;
  float64x2_t v1579;
  float64x2_t v1580;
  float64x2_t v1581;
  float64x2_t v1582;
  float64x2_t v1583;
  float64x2_t v1584;
  float64x2_t v1585;
  float64x2_t v1586;
  float64x2_t v1587;
  uint64_t v1588;
  char *v1589;
  char *v1590;
  uint64_t v1591;
  float64x2_t v1592;
  float64x2_t v1593;
  float64x2_t v1594;
  float64x2_t v1595;
  float64x2_t v1596;
  float64x2_t v1597;
  float64x2_t v1598;
  float64x2_t v1599;
  float64x2_t v1600;
  float64x2_t *v1601;
  double v1602;
  float64x2_t v1603;
  float64x2_t v1604;
  float64x2_t v1605;
  float64x2_t v1606;
  float64x2_t v1607;
  float64x2_t v1608;
  float64x2_t v1609;
  float64x2_t v1610;
  float64x2_t v1611;
  float64x2_t v1612;
  float64x2_t v1613;
  float64x2_t v1614;
  float64x2_t v1615;
  float64x2_t v1616;
  float64x2_t v1617;
  float64x2_t v1618;
  float64x2_t v1619;
  float64x2_t v1620;
  float64x2_t v1621;
  float64x2_t *v1622;
  float64x2_t v1623;
  float64x2_t v1624;
  float64x2_t *v1625;
  double v1626;
  float64x2_t v1627;
  float64x2_t v1628;
  float64x2_t v1629;
  float64x2_t v1630;
  float64x2_t v1631;
  float64x2_t v1632;
  float64x2_t v1633;
  float64x2_t v1634;
  float64x2_t v1635;
  float64x2_t v1636;
  float64x2_t *v1637;
  double v1638;
  float64x2_t v1639;
  float64x2_t v1640;
  float64x2_t v1641;
  float64x2_t v1642;
  float64x2_t v1643;
  float64x2_t v1644;
  float64x2_t v1645;
  float64x2_t v1646;
  float64x2_t v1647;
  float64x2_t v1648;
  uint64_t v1649;
  unint64_t *v1650;
  unint64_t *v1651;
  unint64_t *v1652;
  int8x16_t v1653;
  uint64_t v1654;
  int8x16_t v1655;
  int8x16_t v1656;
  int8x16_t v1657;
  int8x16_t v1658;
  int8x16_t v1659;
  double v1660;
  unint64_t v1661;
  double v1662;
  double v1663;
  int8x16_t v1664;
  int8x16_t v1665;
  unint64_t v1666;
  double v1667;
  double v1668;
  double v1669;
  int8x16_t v1670;
  int8x16_t v1671;
  double v1672;
  unint64_t v1673;
  double v1674;
  unint64_t v1675;
  double v1676;
  double v1677;
  int8x16_t v1678;
  int8x16_t v1679;
  int8x16_t v1680;
  int8x16_t v1681;
  double v1682;
  double v1683;
  int8x16_t v1684;
  int8x16_t v1685;
  int8x16_t v1686;
  unint64_t v1687;
  unint64_t v1688;
  double v1689;
  double v1690;
  double v1691;
  double v1692;
  float64x2_t v1693;
  int8x16_t v1694;
  double v1695;
  double v1696;
  float64x2_t v1697;
  double v1698;
  double v1699;
  float64x2_t v1700;
  double v1701;
  float64x2_t v1702;
  double v1703;
  float64x2_t v1704;
  float64x2_t v1705;
  int8x16_t v1706;
  uint64_t v1707;
  float64x2_t v1708;
  int8x16_t v1709;
  float64x2_t v1710;
  uint64_t v1711;
  int8x16_t v1712;
  uint64_t v1713;
  float64x2_t v1714;
  float64x2_t v1715;
  int8x16_t v1716;
  float64x2_t v1717;
  float64x2_t v1718;
  float64x2_t v1719;
  uint64_t v1720;
  int8x16_t v1721;
  uint64_t v1722;
  float64x2_t v1723;
  double v1724;
  int8x16_t v1725;
  int8x16_t v1726;
  double v1727;
  float64x2_t v1728;
  float64x2_t v1729;
  float64x2_t v1730;
  int8x16_t v1731;
  double v1732;
  double v1733;
  double v1734;
  double v1735;
  int8x16_t v1736;
  float64x2_t v1737;
  double v1738;
  float64x2_t v1739;
  int8x16_t v1740;
  float64x2_t v1741;
  int8x16_t v1742;
  int8x16_t v1743;
  float64x2_t v1744;
  float64x2_t v1745;
  int8x16_t v1746;
  int8x16_t v1747;
  float64x2_t v1748;
  float64x2_t v1749;
  double v1750;
  int8x16_t v1751;
  double v1752;
  double v1753;
  int8x16_t v1754;
  float64x2_t v1755;
  int8x16_t v1756;
  float64x2_t v1757;
  double v1758;
  float64x2_t v1759;
  float64x2_t v1760;
  int8x16_t v1761;
  int8x16_t v1762;
  float64x2_t v1763;
  float64x2_t v1764;
  int8x16_t v1765;
  float64x2_t v1766;
  int8x16_t v1767;
  int8x16_t v1768;
  int8x16_t v1769;
  float64x2_t v1770;
  float64x2_t v1771;
  float64x2_t v1772;
  float64x2_t v1773;
  float64x2_t v1774;
  float64x2_t v1775;
  double v1776;
  float64x2_t v1777;
  float64x2_t v1778;
  float64x2_t v1779;
  int8x16_t v1780;
  int8x16_t v1781;
  int8x16_t v1782;
  float64x2_t v1783;
  int8x16_t v1784;
  int v1785;
  float64x2_t v1786;
  unsigned int v1787;
  float64x2_t v1788;
  double v1789;
  float64x2_t v1790;
  double v1791;
  double v1792;
  double v1793;
  double v1794;
  double v1795;
  int8x16_t v1796;
  float64x2_t v1797;
  float64x2_t v1798;
  float64x2_t v1799;
  float64x2_t v1800;
  float64x2_t v1801;
  float64_t v1802;
  float64x2_t v1803;
  double v1804;
  double v1805;
  double v1806;
  float64x2_t v1807;
  float64x2_t v1808;
  float64_t v1809;
  float64x2_t v1810;
  float64x2_t v1811;
  float64x2_t v1812;
  float64x2_t v1813;
  double v1814;
  double v1815;
  int8x16_t v1816;
  int8x16_t v1817;
  int8x16_t v1818;
  float64x2_t v1819;
  double v1820;
  int8x16_t v1821;
  float64x2_t v1822;
  double v1823;
  double v1824;
  float64x2_t v1825;
  double v1826;
  int8x16_t v1827;
  int8x16_t v1828;
  int8x16_t v1829;
  int8x16_t v1830;
  double v1831;
  double v1832;
  int8x16_t v1833;
  double v1834;
  int8x16_t v1835;
  float64x2_t v1836;
  int8x16_t v1837;
  int8x16_t v1838;
  float64x2_t v1839;
  int8x16_t v1840;
  float64x2_t v1841;
  int v1842;
  unsigned int v1843;
  float64x2_t v1844;
  int8x16_t v1845;
  float64x2_t v1846;
  int8x16_t v1847;
  int8x16_t v1848;
  int8x16_t v1849;
  int8x16_t v1850;
  int8x16_t v1851;
  int8x16_t v1852;
  int8x16_t v1853;
  int8x16_t v1854;
  float64x2_t v1855;
  float64x2_t v1856;
  double v1857;
  int8x16_t v1858;
  unint64_t v1859;
  float64x2_t v1860;
  int8x16_t v1861;
  int8x16_t v1862;
  float64x2_t v1863;
  float64x2_t v1864;
  float64x2_t v1865;
  float64x2_t v1866;
  uint64_t v1867;
  uint64_t v1868;
  float64x2_t v1869;
  float64x2_t v1870;
  float64x2_t v1871;
  int v1872;
  float64x2_t v1873;
  float64x2_t v1874;
  float64_t v1875;
  float64x2_t v1876;
  float64x2_t v1877;
  float64x2_t v1878;
  float64x2_t v1879;
  float64x2_t v1880;
  double v1881;
  float64x2_t v1882;
  float64x2_t v1883;
  float64x2_t v1884;
  double v1885;
  float64x2_t v1886;
  int v1887;
  float64x2_t v1888;
  double v1889;
  float64x2_t v1890;
  float64x2_t v1891;
  float64x2_t v1892;
  float64x2_t v1893;
  float64x2_t v1894;
  float64x2_t v1895;
  float64x2_t v1896;
  unint64_t *v1897;
  unint64_t *v1898;
  float64x2_t v1899;
  float64x2_t v1900;
  float64x2_t v1901;
  float64x2_t v1902;
  float64x2_t v1903;
  unint64_t *v1904;
  int64x2_t v1905;
  float64x2_t v1906;
  double v1907;
  double v1908;
  float64x2_t v1909;
  float64x2_t v1910;
  float64x2_t v1911;
  uint64_t v1912;
  float64x2_t v1913;
  float64x2_t v1914;
  float64x2_t v1915;
  float64x2_t v1916;
  float64x2_t v1917;
  float64x2_t v1918;
  float64x2_t v1919;
  _BYTE v1920[64];
  __n128 v1921;
  int8x16_t v1922;
  _BYTE v1923[48];
  _BYTE v1924[32];
  int8x16_t v1925;
  _BYTE v1926[32];
  float64x2_t v1927;
  _BYTE v1928[32];
  float64x2_t v1929;
  float64x2_t v1930;
  float64x2_t v1931;
  float64x2_t v1932;
  float64x2_t v1933;
  float64x2_t v1934;
  float64x2_t v1935;
  _BYTE v1936[32];
  float64x2_t v1937;
  _BYTE v1938[32];
  float64x2_t v1939;
  _BYTE v1940[32];
  float64x2_t v1941;
  _BYTE v1942[32];
  float64x2_t v1943;
  _BYTE v1944[32];
  float64x2_t v1945;
  _BYTE v1946[32];
  float64x2_t v1947;
  _BYTE v1948[32];
  float64x2_t v1949;
  _BYTE v1950[32];
  float64x2_t v1951;
  _BYTE v1952[32];
  float64x2_t v1953;
  _BYTE v1954[32];
  float64x2_t v1955;
  _BYTE v1956[32];
  float64x2_t v1957;
  _BYTE v1958[32];
  int8x16_t v1959;
  double v1960;
  float64x2_t v1961;
  uint64_t v1962;
  float64x2_t v1963;
  uint64_t v1964;
  float64x2_t v1965;
  double v1966;
  _QWORD *v1967;
  _QWORD *v1968;
  uint64_t v1969;
  unint64_t *v1970;
  uint64_t v1971;
  int v1972;
  std::mutex v1973;
  uint64_t v1974;

  v1974 = *MEMORY[0x24BDAC8D0];
  v8 = (unint64_t *)a1[1];
  v1967 = (_QWORD *)*a1;
  v1968 = a1 + 7;
  v1654 = a2;
  v1969 = a2;
  v1970 = v8;
  v1971 = 0;
  v1972 = a3;
  _Q0 = 0uLL;
  memset(v1973.__m_.__opaque, 0, sizeof(v1973.__m_.__opaque));
  v1973.__m_.__sig = 850045863;
  v11 = v1967[25];
  v10 = v1967[26];
  if (v11 != v10)
  {
    v1897 = v8;
    v1904 = v8 + 5;
    v1912 = v1967[26];
    while (1)
    {
      v12 = *(unsigned int **)(v11 + 736);
      v13 = *(unsigned int **)(v11 + 744);
      if (((*((unsigned __int8 *)v13 + 4) >> 2) & 1) == (char)(32 * *((_BYTE *)v12 + 4)) >> 7)
        v14 = 2;
      else
        v14 = 1;
      if ((v14 & v1972) == 0)
        goto LABEL_4;
      v15 = *((unsigned __int8 *)v12 + 20);
      if (*((_BYTE *)v12 + 20))
      {
        if (*v12 == -1)
          goto LABEL_4;
      }
      v16 = *((unsigned __int8 *)v13 + 20);
      if (*((_BYTE *)v13 + 20))
      {
        if (*v13 == -1)
          goto LABEL_4;
      }
      if (*((_BYTE *)v12 + 20))
      {
        v17 = *(_DWORD *)(*v1968 + 4 * *v12);
        if (!*((_BYTE *)v13 + 20))
          goto LABEL_17;
      }
      else
      {
        v17 = -1;
        if (!*((_BYTE *)v13 + 20))
        {
LABEL_17:
          v18 = -1;
          goto LABEL_18;
        }
      }
      v18 = *(_DWORD *)(*v1968 + 4 * *v13);
LABEL_18:
      v19 = (float64x2_t *)(v11 + 800);
      v20 = sub_20F3DA6C4(v11 + 8, (int64x2_t **)(v11 + 736), (float64x2_t *)(v11 + 800), &v1919, _Q0.f64[0], _Q1.f64[0], _Q2.f64[0], _Q3.f64[0], (int64x2_t)_Q4);
      *(_BYTE *)(v11 + 856) = v20;
      if (v20)
      {
        v21 = *(_QWORD *)(v11 + 864);
        if (v21)
        {
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v21 + 24))(v21, v11 + 800);
          v22 = *(_QWORD *)(v11 + 864);
          v23 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v22 + 16))(v22);
          v24 = v23;
          if (*(_BYTE *)(*(_QWORD *)(v11 + 736) + 20))
          {
            switch(v23)
            {
              case 0:
                v26 = *(float64x2_t *)(v22 + 16);
                v25 = *(float64x2_t *)(v22 + 32);
                v28 = *(float64x2_t *)(v22 + 80);
                v27 = *(float64x2_t *)(v22 + 96);
                v29 = *(float64x2_t *)(v22 + 48);
                v30 = *(float64x2_t *)(v22 + 64);
                v32 = *(float64x2_t *)(v22 + 112);
                v31 = *(float64x2_t *)(v22 + 128);
                v34 = *(float64x2_t *)(v22 + 176);
                v33 = *(float64x2_t *)(v22 + 192);
                v35 = *(float64x2_t *)(v22 + 144);
                v36 = *(float64x2_t *)(v22 + 160);
                v37 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v26, v1919.f64[0]), v30, v1919, 1), v32, *(double *)v1920), v36, *(float64x2_t *)v1920, 1);
                v38 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v25, v1919.f64[0]), v28, v1919, 1), v31, *(double *)v1920), v34, *(float64x2_t *)v1920, 1);
                v39 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v29, v1919.f64[0]), v27, v1919, 1), v35, *(double *)v1920), v33, *(float64x2_t *)v1920, 1);
                v40 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v26, *(double *)&v1920[32]), v30, *(float64x2_t *)&v1920[32], 1), v32, *(double *)&v1920[48]), v36, *(float64x2_t *)&v1920[48], 1);
                v41 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v25, *(double *)&v1920[32]), v28, *(float64x2_t *)&v1920[32], 1), v31, *(double *)&v1920[48]), v34, *(float64x2_t *)&v1920[48], 1);
                v42 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v29, *(double *)&v1920[32]), v27, *(float64x2_t *)&v1920[32], 1), v35, *(double *)&v1920[48]), v33, *(float64x2_t *)&v1920[48], 1);
                v43 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v26, *(double *)v1922.i64), v30, (float64x2_t)v1922, 1), v32, *(double *)v1923), v36, *(float64x2_t *)v1923, 1);
                v44 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v25, *(double *)v1922.i64), v28, (float64x2_t)v1922, 1), v31, *(double *)v1923), v34, *(float64x2_t *)v1923, 1);
                v45 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v29, *(double *)v1922.i64), v27, (float64x2_t)v1922, 1), v35, *(double *)v1923), v33, *(float64x2_t *)v1923, 1);
                v46 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v26, *(double *)&v1923[32]), v30, *(float64x2_t *)&v1923[32], 1), v32, *(double *)v1924), v36, *(float64x2_t *)v1924, 1);
                v47 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v25, *(double *)&v1923[32]), v28, *(float64x2_t *)&v1923[32], 1), v31, *(double *)v1924);
                v48 = *(float64x2_t *)&v1920[16];
                v49 = vmlaq_laneq_f64(vmulq_n_f64(v29, *(double *)&v1923[32]), v27, *(float64x2_t *)&v1923[32], 1);
                v51 = *(float64x2_t *)(v22 + 208);
                v50 = *(float64x2_t *)(v22 + 224);
                v52 = vmlaq_laneq_f64(v47, v34, *(float64x2_t *)v1924, 1);
                v53 = vmlaq_n_f64(v49, v35, *(double *)v1924);
                _Q4 = *(__n128 *)(v22 + 272);
                v54 = *(float64x2_t *)(v22 + 288);
                v55 = vmlaq_laneq_f64(v53, v33, *(float64x2_t *)v1924, 1);
                v56 = *(float64x2_t *)(v22 + 240);
                v57 = *(float64x2_t *)(v22 + 256);
                goto LABEL_30;
              case 1:
                v58 = vmulq_f64(*(float64x2_t *)&v1920[16], *(float64x2_t *)(v22 + 48));
                v59 = vmulq_f64(*(float64x2_t *)v1920, *(float64x2_t *)(v22 + 32));
                v60 = vmulq_f64(v1919, *(float64x2_t *)(v22 + 16));
                v1919 = v60;
                *(float64x2_t *)v1920 = v59;
                *(float64x2_t *)&v1920[16] = v58;
                v61 = vmulq_f64(*(float64x2_t *)(v22 + 16), *(float64x2_t *)&v1920[32]);
                v62 = vmulq_f64(*(float64x2_t *)(v22 + 32), *(float64x2_t *)&v1920[48]);
                v63 = vmulq_f64(*(float64x2_t *)(v22 + 48), (float64x2_t)v1921);
                *(float64x2_t *)v1920 = v59;
                v1919 = v60;
                v1921 = (__n128)v63;
                *(float64x2_t *)&v1920[48] = v62;
                *(float64x2_t *)&v1920[16] = v58;
                *(float64x2_t *)&v1920[32] = v61;
                v64 = vmulq_f64(*(float64x2_t *)(v22 + 16), (float64x2_t)v1922);
                v65 = vmulq_f64(*(float64x2_t *)(v22 + 32), *(float64x2_t *)v1923);
                v66 = vmulq_f64(*(float64x2_t *)(v22 + 48), *(float64x2_t *)&v1923[16]);
                v1921 = (__n128)v63;
                *(float64x2_t *)&v1920[48] = v62;
                *(float64x2_t *)&v1920[32] = v61;
                *(float64x2_t *)&v1920[16] = v58;
                *(float64x2_t *)v1920 = v59;
                v1919 = v60;
                *(float64x2_t *)&v1923[16] = v66;
                *(float64x2_t *)v1923 = v65;
                v1922 = (int8x16_t)v64;
                v67 = vmulq_f64(*(float64x2_t *)(v22 + 16), *(float64x2_t *)&v1923[32]);
                _Q4 = (__n128)vmulq_f64(*(float64x2_t *)(v22 + 32), *(float64x2_t *)v1924);
                v68 = vmulq_f64(*(float64x2_t *)(v22 + 48), *(float64x2_t *)&v1924[16]);
                *(float64x2_t *)v1923 = v65;
                v1922 = (int8x16_t)v64;
                v1921 = (__n128)v63;
                *(float64x2_t *)&v1920[48] = v62;
                *(float64x2_t *)&v1920[32] = v61;
                *(float64x2_t *)&v1920[16] = v58;
                *(float64x2_t *)v1920 = v59;
                v1919 = v60;
                *(float64x2_t *)&v1924[16] = v68;
                *(__n128 *)v1924 = _Q4;
                *(float64x2_t *)&v1923[16] = v66;
                *(float64x2_t *)&v1923[32] = v67;
                if (*(_BYTE *)(*(_QWORD *)(v11 + 744) + 20))
                  goto LABEL_27;
                goto LABEL_36;
              case 2:
                v69 = *(double *)(v22 + 16);
                _Q4 = (__n128)vmulq_n_f64(*(float64x2_t *)&v1920[32], v69);
                v1919 = vmulq_n_f64(v1919, v69);
                *(float64x2_t *)v1920 = vmulq_n_f64(*(float64x2_t *)v1920, v69);
                *(float64x2_t *)&v1920[16] = vmulq_n_f64(*(float64x2_t *)&v1920[16], v69);
                *(__n128 *)&v1920[32] = _Q4;
                *(float64x2_t *)&v1920[48] = vmulq_n_f64(*(float64x2_t *)&v1920[48], v69);
                v1921 = (__n128)vmulq_n_f64((float64x2_t)v1921, v69);
                v1922 = (int8x16_t)vmulq_n_f64((float64x2_t)v1922, v69);
                *(float64x2_t *)v1923 = vmulq_n_f64(*(float64x2_t *)v1923, v69);
                *(float64x2_t *)&v1923[16] = vmulq_n_f64(*(float64x2_t *)&v1923[16], v69);
                *(float64x2_t *)&v1923[32] = vmulq_n_f64(*(float64x2_t *)&v1923[32], v69);
                *(float64x2_t *)v1924 = vmulq_n_f64(*(float64x2_t *)v1924, v69);
                *(float64x2_t *)&v1924[16] = vmulq_n_f64(*(float64x2_t *)&v1924[16], v69);
                break;
              case 4:
                (*(void (**)(float64x2_t *__return_ptr, uint64_t))(*(_QWORD *)v22 + 56))(&v1947, v22);
                v37 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1947, v1919.f64[0]), v1949, v1919, 1), v1951, *(double *)v1920), v1953, *(float64x2_t *)v1920, 1);
                v38 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)v1948, v1919.f64[0]), *(float64x2_t *)v1950, v1919, 1), *(float64x2_t *)v1952, *(double *)v1920), *(float64x2_t *)v1954, *(float64x2_t *)v1920, 1);
                v39 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)&v1948[16], v1919.f64[0]), *(float64x2_t *)&v1950[16], v1919, 1), *(float64x2_t *)&v1952[16], *(double *)v1920), *(float64x2_t *)&v1954[16], *(float64x2_t *)v1920, 1);
                v40 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1947, *(double *)&v1920[32]), v1949, *(float64x2_t *)&v1920[32], 1), v1951, *(double *)&v1920[48]), v1953, *(float64x2_t *)&v1920[48], 1);
                v41 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)v1948, *(double *)&v1920[32]), *(float64x2_t *)v1950, *(float64x2_t *)&v1920[32], 1), *(float64x2_t *)v1952, *(double *)&v1920[48]), *(float64x2_t *)v1954, *(float64x2_t *)&v1920[48], 1);
                v42 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)&v1948[16], *(double *)&v1920[32]), *(float64x2_t *)&v1950[16], *(float64x2_t *)&v1920[32], 1), *(float64x2_t *)&v1952[16], *(double *)&v1920[48]), *(float64x2_t *)&v1954[16], *(float64x2_t *)&v1920[48], 1);
                v43 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1947, *(double *)v1922.i64), v1949, (float64x2_t)v1922, 1), v1951, *(double *)v1923), v1953, *(float64x2_t *)v1923, 1);
                v44 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)v1948, *(double *)v1922.i64), *(float64x2_t *)v1950, (float64x2_t)v1922, 1), *(float64x2_t *)v1952, *(double *)v1923), *(float64x2_t *)v1954, *(float64x2_t *)v1923, 1);
                v45 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)&v1948[16], *(double *)v1922.i64), *(float64x2_t *)&v1950[16], (float64x2_t)v1922, 1), *(float64x2_t *)&v1952[16], *(double *)v1923), *(float64x2_t *)&v1954[16], *(float64x2_t *)v1923, 1);
                v46 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1947, *(double *)&v1923[32]), v1949, *(float64x2_t *)&v1923[32], 1), v1951, *(double *)v1924), v1953, *(float64x2_t *)v1924, 1);
                v48 = *(float64x2_t *)&v1920[16];
                v50 = *(float64x2_t *)v1956;
                v51 = v1955;
                v52 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)v1948, *(double *)&v1923[32]), *(float64x2_t *)v1950, *(float64x2_t *)&v1923[32], 1), *(float64x2_t *)v1952, *(double *)v1924), *(float64x2_t *)v1954, *(float64x2_t *)v1924, 1);
                v54 = *(float64x2_t *)&v1958[16];
                _Q4 = *(__n128 *)v1958;
                v55 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)&v1948[16], *(double *)&v1923[32]), *(float64x2_t *)&v1950[16], *(float64x2_t *)&v1923[32], 1), *(float64x2_t *)&v1952[16], *(double *)v1924), *(float64x2_t *)&v1954[16], *(float64x2_t *)v1924, 1);
                v56 = *(float64x2_t *)&v1956[16];
                v57 = v1957;
LABEL_30:
                v1919 = vmlaq_laneq_f64(vmlaq_n_f64(v37, v51, v48.f64[0]), v57, v48, 1);
                *(float64x2_t *)v1920 = vmlaq_laneq_f64(vmlaq_n_f64(v38, v50, v48.f64[0]), (float64x2_t)_Q4, v48, 1);
                *(float64x2_t *)&v1920[16] = vmlaq_laneq_f64(vmlaq_n_f64(v39, v56, v48.f64[0]), v54, v48, 1);
                *(float64x2_t *)&v1920[32] = vmlaq_laneq_f64(vmlaq_n_f64(v40, v51, v1921.n128_f64[0]), v57, (float64x2_t)v1921, 1);
                *(float64x2_t *)&v1920[48] = vmlaq_laneq_f64(vmlaq_n_f64(v41, v50, v1921.n128_f64[0]), (float64x2_t)_Q4, (float64x2_t)v1921, 1);
                v1921 = (__n128)vmlaq_laneq_f64(vmlaq_n_f64(v42, v56, v1921.n128_f64[0]), v54, (float64x2_t)v1921, 1);
                v1922 = (int8x16_t)vmlaq_laneq_f64(vmlaq_n_f64(v43, v51, *(double *)&v1923[16]), v57, *(float64x2_t *)&v1923[16], 1);
                *(float64x2_t *)v1923 = vmlaq_laneq_f64(vmlaq_n_f64(v44, v50, *(double *)&v1923[16]), (float64x2_t)_Q4, *(float64x2_t *)&v1923[16], 1);
                *(float64x2_t *)&v1923[16] = vmlaq_laneq_f64(vmlaq_n_f64(v45, v56, *(double *)&v1923[16]), v54, *(float64x2_t *)&v1923[16], 1);
                *(float64x2_t *)&v1923[32] = vmlaq_laneq_f64(vmlaq_n_f64(v46, v51, *(double *)&v1924[16]), v57, *(float64x2_t *)&v1924[16], 1);
                *(float64x2_t *)v1924 = vmlaq_laneq_f64(vmlaq_n_f64(v52, v50, *(double *)&v1924[16]), (float64x2_t)_Q4, *(float64x2_t *)&v1924[16], 1);
                *(float64x2_t *)&v1924[16] = vmlaq_laneq_f64(vmlaq_n_f64(v55, v56, *(double *)&v1924[16]), v54, *(float64x2_t *)&v1924[16], 1);
                if (!*(_BYTE *)(*(_QWORD *)(v11 + 744) + 20))
                  goto LABEL_36;
                goto LABEL_27;
              default:
                break;
            }
          }
          if (*(_BYTE *)(*(_QWORD *)(v11 + 744) + 20))
          {
LABEL_27:
            switch(v24)
            {
              case 0:
                v71 = *(float64x2_t *)(v22 + 16);
                v70 = *(float64x2_t *)(v22 + 32);
                v73 = *(float64x2_t *)(v22 + 80);
                v72 = *(float64x2_t *)(v22 + 96);
                v74 = *(float64x2_t *)(v22 + 48);
                v75 = *(float64x2_t *)(v22 + 64);
                v77 = *(float64x2_t *)(v22 + 112);
                v76 = *(float64x2_t *)(v22 + 128);
                v79 = *(float64x2_t *)(v22 + 176);
                v78 = *(float64x2_t *)(v22 + 192);
                v80 = *(float64x2_t *)(v22 + 144);
                v81 = *(float64x2_t *)(v22 + 160);
                v82 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v71, *(double *)v1925.i64), v75, (float64x2_t)v1925, 1), v77, *(double *)v1926), v81, *(float64x2_t *)v1926, 1);
                v83 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v70, *(double *)v1925.i64), v73, (float64x2_t)v1925, 1), v76, *(double *)v1926), v79, *(float64x2_t *)v1926, 1);
                v84 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v74, *(double *)v1925.i64), v72, (float64x2_t)v1925, 1), v80, *(double *)v1926), v78, *(float64x2_t *)v1926, 1);
                v85 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v71, v1927.f64[0]), v75, v1927, 1), v77, *(double *)v1928), v81, *(float64x2_t *)v1928, 1);
                v86 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v70, v1927.f64[0]), v73, v1927, 1), v76, *(double *)v1928), v79, *(float64x2_t *)v1928, 1);
                v87 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v74, v1927.f64[0]), v72, v1927, 1), v80, *(double *)v1928), v78, *(float64x2_t *)v1928, 1);
                v88 = v1930;
                v89 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v71, v1929.f64[0]), v75, v1929, 1), v77, v88.f64[0]), v81, v88, 1);
                v90 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v70, v1929.f64[0]), v73, v1929, 1), v76, v88.f64[0]), v79, v88, 1);
                v91 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v74, v1929.f64[0]), v72, v1929, 1), v80, v88.f64[0]), v78, v88, 1);
                v92 = v1932;
                v93 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v71, v92.f64[0]), v75, v92, 1), v77, v1933.f64[0]), v81, v1933, 1);
                v94 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v70, v92.f64[0]), v73, v92, 1), v76, v1933.f64[0]);
                v95 = *(float64x2_t *)&v1926[16];
                v96 = vmlaq_laneq_f64(vmulq_n_f64(v74, v92.f64[0]), v72, v92, 1);
                v98 = *(float64x2_t *)(v22 + 208);
                v97 = *(float64x2_t *)(v22 + 224);
                v99 = vmlaq_laneq_f64(v94, v79, v1933, 1);
                v100 = vmlaq_n_f64(v96, v80, v1933.f64[0]);
                _Q4 = *(__n128 *)(v22 + 272);
                v101 = *(float64x2_t *)(v22 + 288);
                v102 = vmlaq_laneq_f64(v100, v78, v1933, 1);
                v103 = *(float64x2_t *)(v22 + 240);
                v104 = *(float64x2_t *)(v22 + 256);
                goto LABEL_35;
              case 1:
                v105 = vmulq_f64(*(float64x2_t *)&v1926[16], *(float64x2_t *)(v22 + 48));
                v106 = vmulq_f64(*(float64x2_t *)v1926, *(float64x2_t *)(v22 + 32));
                v107 = vmulq_f64((float64x2_t)v1925, *(float64x2_t *)(v22 + 16));
                v1925 = (int8x16_t)v107;
                *(float64x2_t *)v1926 = v106;
                *(float64x2_t *)&v1926[16] = v105;
                v108 = vmulq_f64(*(float64x2_t *)(v22 + 48), *(float64x2_t *)&v1928[16]);
                v109 = vmulq_f64(*(float64x2_t *)(v22 + 32), *(float64x2_t *)v1928);
                v110 = vmulq_f64(*(float64x2_t *)(v22 + 16), v1927);
                v1925 = (int8x16_t)v107;
                *(float64x2_t *)v1926 = v106;
                *(float64x2_t *)&v1926[16] = v105;
                v1927 = v110;
                *(float64x2_t *)v1928 = v109;
                *(float64x2_t *)&v1928[16] = v108;
                v111 = vmulq_f64(*(float64x2_t *)(v22 + 48), v1931);
                v112 = vmulq_f64(*(float64x2_t *)(v22 + 32), v1930);
                v113 = vmulq_f64(*(float64x2_t *)(v22 + 16), v1929);
                v1925 = (int8x16_t)v107;
                *(float64x2_t *)v1926 = v106;
                *(float64x2_t *)&v1926[16] = v105;
                v1927 = v110;
                *(float64x2_t *)v1928 = v109;
                *(float64x2_t *)&v1928[16] = v108;
                v1929 = v113;
                v1930 = v112;
                v1931 = v111;
                v114 = vmulq_f64(*(float64x2_t *)(v22 + 48), v1934);
                v115 = vmulq_f64(*(float64x2_t *)(v22 + 32), v1933);
                _Q4 = (__n128)vmulq_f64(*(float64x2_t *)(v22 + 16), v1932);
                v1925 = (int8x16_t)v107;
                *(float64x2_t *)v1926 = v106;
                *(float64x2_t *)&v1926[16] = v105;
                v1927 = v110;
                *(float64x2_t *)v1928 = v109;
                *(float64x2_t *)&v1928[16] = v108;
                v1929 = v113;
                v1930 = v112;
                v1931 = v111;
                v1932 = (float64x2_t)_Q4;
                v1933 = v115;
                v1934 = v114;
                break;
              case 2:
                v116 = *(double *)(v22 + 16);
                _Q4 = (__n128)vmulq_n_f64(v1927, v116);
                v1925 = (int8x16_t)vmulq_n_f64((float64x2_t)v1925, v116);
                *(float64x2_t *)v1926 = vmulq_n_f64(*(float64x2_t *)v1926, v116);
                *(float64x2_t *)&v1926[16] = vmulq_n_f64(*(float64x2_t *)&v1926[16], v116);
                v1927 = (float64x2_t)_Q4;
                *(float64x2_t *)v1928 = vmulq_n_f64(*(float64x2_t *)v1928, v116);
                *(float64x2_t *)&v1928[16] = vmulq_n_f64(*(float64x2_t *)&v1928[16], v116);
                v1929 = vmulq_n_f64(v1929, v116);
                v1930 = vmulq_n_f64(v1930, v116);
                v1931 = vmulq_n_f64(v1931, v116);
                v1932 = vmulq_n_f64(v1932, v116);
                v1933 = vmulq_n_f64(v1933, v116);
                v1934 = vmulq_n_f64(v1934, v116);
                break;
              case 4:
                (*(void (**)(float64x2_t *__return_ptr, uint64_t))(*(_QWORD *)v22 + 56))(&v1947, v22);
                v82 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1947, *(double *)v1925.i64), v1949, (float64x2_t)v1925, 1), v1951, *(double *)v1926), v1953, *(float64x2_t *)v1926, 1);
                v83 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)v1948, *(double *)v1925.i64), *(float64x2_t *)v1950, (float64x2_t)v1925, 1), *(float64x2_t *)v1952, *(double *)v1926), *(float64x2_t *)v1954, *(float64x2_t *)v1926, 1);
                v84 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)&v1948[16], *(double *)v1925.i64), *(float64x2_t *)&v1950[16], (float64x2_t)v1925, 1), *(float64x2_t *)&v1952[16], *(double *)v1926), *(float64x2_t *)&v1954[16], *(float64x2_t *)v1926, 1);
                v85 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1947, v1927.f64[0]), v1949, v1927, 1), v1951, *(double *)v1928), v1953, *(float64x2_t *)v1928, 1);
                v86 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)v1948, v1927.f64[0]), *(float64x2_t *)v1950, v1927, 1), *(float64x2_t *)v1952, *(double *)v1928), *(float64x2_t *)v1954, *(float64x2_t *)v1928, 1);
                v87 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)&v1948[16], v1927.f64[0]), *(float64x2_t *)&v1950[16], v1927, 1), *(float64x2_t *)&v1952[16], *(double *)v1928), *(float64x2_t *)&v1954[16], *(float64x2_t *)v1928, 1);
                v117 = v1930;
                v89 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1947, v1929.f64[0]), v1949, v1929, 1), v1951, v117.f64[0]), v1953, v117, 1);
                v90 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)v1948, v1929.f64[0]), *(float64x2_t *)v1950, v1929, 1), *(float64x2_t *)v1952, v117.f64[0]), *(float64x2_t *)v1954, v117, 1);
                v91 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)&v1948[16], v1929.f64[0]), *(float64x2_t *)&v1950[16], v1929, 1), *(float64x2_t *)&v1952[16], v117.f64[0]), *(float64x2_t *)&v1954[16], v117, 1);
                v118 = v1932;
                v119 = v1933;
                v93 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1947, v118.f64[0]), v1949, v118, 1), v1951, v119.f64[0]), v1953, v119, 1);
                v95 = *(float64x2_t *)&v1926[16];
                v97 = *(float64x2_t *)v1956;
                v98 = v1955;
                v99 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)v1948, v118.f64[0]), *(float64x2_t *)v1950, v118, 1), *(float64x2_t *)v1952, v119.f64[0]), *(float64x2_t *)v1954, v119, 1);
                v101 = *(float64x2_t *)&v1958[16];
                _Q4 = *(__n128 *)v1958;
                v102 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)&v1948[16], v118.f64[0]), *(float64x2_t *)&v1950[16], v118, 1), *(float64x2_t *)&v1952[16], v119.f64[0]), *(float64x2_t *)&v1954[16], v119, 1);
                v103 = *(float64x2_t *)&v1956[16];
                v104 = v1957;
LABEL_35:
                v120 = vmlaq_laneq_f64(vmlaq_n_f64(v82, v98, v95.f64[0]), v104, v95, 1);
                v121 = vmlaq_laneq_f64(vmlaq_n_f64(v83, v97, v95.f64[0]), (float64x2_t)_Q4, v95, 1);
                v122 = vmlaq_laneq_f64(vmlaq_n_f64(v84, v103, v95.f64[0]), v101, v95, 1);
                v123 = v1931;
                v124 = vmlaq_laneq_f64(vmlaq_n_f64(v89, v98, v123.f64[0]), v104, v123, 1);
                v125 = vmlaq_laneq_f64(vmlaq_n_f64(v90, v97, v123.f64[0]), (float64x2_t)_Q4, v123, 1);
                v126 = vmlaq_laneq_f64(vmlaq_n_f64(v91, v103, v123.f64[0]), v101, v123, 1);
                v127 = v1934;
                v1925 = (int8x16_t)v120;
                *(float64x2_t *)v1926 = v121;
                *(float64x2_t *)&v1926[16] = v122;
                v1927 = vmlaq_laneq_f64(vmlaq_n_f64(v85, v98, *(double *)&v1928[16]), v104, *(float64x2_t *)&v1928[16], 1);
                *(float64x2_t *)v1928 = vmlaq_laneq_f64(vmlaq_n_f64(v86, v97, *(double *)&v1928[16]), (float64x2_t)_Q4, *(float64x2_t *)&v1928[16], 1);
                *(float64x2_t *)&v1928[16] = vmlaq_laneq_f64(vmlaq_n_f64(v87, v103, *(double *)&v1928[16]), v101, *(float64x2_t *)&v1928[16], 1);
                v1929 = v124;
                v1930 = v125;
                v1931 = v126;
                v1932 = vmlaq_laneq_f64(vmlaq_n_f64(v93, v98, v127.f64[0]), v104, v127, 1);
                v1933 = vmlaq_laneq_f64(vmlaq_n_f64(v99, v97, v127.f64[0]), (float64x2_t)_Q4, v127, 1);
                v1934 = vmlaq_laneq_f64(vmlaq_n_f64(v102, v103, v127.f64[0]), v101, v127, 1);
                break;
              default:
                break;
            }
          }
        }
LABEL_36:
        v128 = *(_OWORD *)(v11 + 816);
        *(float64x2_t *)(v11 + 752) = *v19;
        *(_OWORD *)(v11 + 768) = v128;
        _Q2 = *v19;
        _Q1 = *(float64x2_t *)(v11 + 816);
        *(_OWORD *)(v11 + 784) = *(_OWORD *)(v11 + 832);
        _Q0 = *(float64x2_t *)(v11 + 832);
        _Q4.n128_u64[0] = *(_QWORD *)&_Q2.f64[1];
        __asm { FMLA            D3, D4, V2.D[1] }
        _Q2.f64[0] = _Q1.f64[1];
        __asm { FMLA            D3, D2, V1.D[1] }
        _Q1.f64[0] = _Q0.f64[1];
        __asm { FMLA            D3, D1, V0.D[1] }
        _Q0.f64[0] = *(double *)(v1654 + 8) * _Q3.f64[0];
        *(float64_t *)(v11 + 848) = _Q0.f64[0];
        if (v16)
        {
          if (v15 && v17 >= v18)
          {
            v135 = v1897[16] + 24 * v17;
            v137 = *(char **)v135;
            v136 = *(char **)(v135 + 8);
            if (*(char **)v135 != v136)
            {
              while (*(_DWORD *)v137 < v18)
              {
                v137 += 16;
                if (v137 == v136)
                  goto LABEL_47;
              }
            }
            if (v137 != v136)
            {
              if (*(_DWORD *)v137 == v18)
              {
                v138 = (float64x2_t *)(v1897[7] + 8 * *((_QWORD *)v137 + 1));
                goto LABEL_48;
              }
              v136 = v137;
            }
LABEL_47:
            v138 = (float64x2_t *)sub_20F3D46D0(v1904, (char **)v135, v18, v136);
LABEL_48:
            v139 = (float64x2_t)vzip1q_s64((int64x2_t)v1925, (int64x2_t)v1927);
            v140 = (float64x2_t)vzip2q_s64((int64x2_t)v1925, (int64x2_t)v1927);
            v141 = (float64x2_t)vzip1q_s64((int64x2_t)v1929, (int64x2_t)v1932);
            v142 = (float64x2_t)vzip2q_s64((int64x2_t)v1929, (int64x2_t)v1932);
            v143 = vmlaq_laneq_f64(vmulq_n_f64(v141, v1919.f64[0]), v142, v1919, 1);
            v144 = vmlaq_laneq_f64(vmulq_n_f64(v141, *(double *)&v1920[32]), v142, *(float64x2_t *)&v1920[32], 1);
            v145 = vmlaq_laneq_f64(vmulq_n_f64(v141, *(double *)v1922.i64), v142, (float64x2_t)v1922, 1);
            v146 = vmlaq_laneq_f64(vmulq_n_f64(v141, *(double *)&v1923[32]), v142, *(float64x2_t *)&v1923[32], 1);
            v147 = (float64x2_t)vzip1q_s64((int64x2_t)v1930, (int64x2_t)v1933);
            v148 = (float64x2_t)vzip2q_s64((int64x2_t)v1930, (int64x2_t)v1933);
            v149 = (float64x2_t)vzip1q_s64(*(int64x2_t *)v1926, *(int64x2_t *)v1928);
            v150 = (float64x2_t)vzip2q_s64(*(int64x2_t *)v1926, *(int64x2_t *)v1928);
            v151 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v139, v1919.f64[0]), v140, v1919, 1), v149, *(double *)v1920), v150, *(float64x2_t *)v1920, 1);
            v152 = vmlaq_laneq_f64(vmlaq_n_f64(v143, v147, *(double *)v1920), v148, *(float64x2_t *)v1920, 1);
            v153 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v139, *(double *)&v1920[32]), v140, *(float64x2_t *)&v1920[32], 1), v149, *(double *)&v1920[48]), v150, *(float64x2_t *)&v1920[48], 1);
            v154 = vmlaq_laneq_f64(vmlaq_n_f64(v144, v147, *(double *)&v1920[48]), v148, *(float64x2_t *)&v1920[48], 1);
            v155 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v139, *(double *)v1922.i64), v140, (float64x2_t)v1922, 1), v149, *(double *)v1923), v150, *(float64x2_t *)v1923, 1);
            v156 = vmlaq_laneq_f64(vmlaq_n_f64(v145, v147, *(double *)v1923), v148, *(float64x2_t *)v1923, 1);
            v157 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v139, *(double *)&v1923[32]), v140, *(float64x2_t *)&v1923[32], 1), v149, *(double *)v1924), v150, *(float64x2_t *)v1924, 1);
            v158 = vmlaq_laneq_f64(vmlaq_n_f64(v146, v147, *(double *)v1924), v148, *(float64x2_t *)v1924, 1);
            v159 = (float64x2_t)vzip1q_s64(*(int64x2_t *)&v1926[16], *(int64x2_t *)&v1928[16]);
            v160 = (float64x2_t)vzip2q_s64(*(int64x2_t *)&v1926[16], *(int64x2_t *)&v1928[16]);
            v161 = (float64x2_t)vzip1q_s64((int64x2_t)v1931, (int64x2_t)v1934);
            v162 = (float64x2_t)vzip2q_s64((int64x2_t)v1931, (int64x2_t)v1934);
            v163 = vmlaq_laneq_f64(vmlaq_n_f64(v151, v159, *(double *)&v1920[16]), v160, *(float64x2_t *)&v1920[16], 1);
            v164 = vmlaq_laneq_f64(vmlaq_n_f64(v153, v159, v1921.n128_f64[0]), v160, (float64x2_t)v1921, 1);
            v165 = vmlaq_laneq_f64(vmlaq_n_f64(v155, v159, *(double *)&v1923[16]), v160, *(float64x2_t *)&v1923[16], 1);
            v166 = vmlaq_laneq_f64(vmlaq_n_f64(v156, v161, *(double *)&v1923[16]), v162, *(float64x2_t *)&v1923[16], 1);
            v167 = vmlaq_laneq_f64(vmlaq_n_f64(v157, v159, *(double *)&v1924[16]), v160, *(float64x2_t *)&v1924[16], 1);
            v168 = vmlaq_laneq_f64(vmlaq_n_f64(v158, v161, *(double *)&v1924[16]), v162, *(float64x2_t *)&v1924[16], 1);
            v169 = vaddq_f64(v138[1], vmlaq_laneq_f64(vmlaq_n_f64(v152, v161, *(double *)&v1920[16]), v162, *(float64x2_t *)&v1920[16], 1));
            v170 = vaddq_f64(v138[3], vmlaq_laneq_f64(vmlaq_n_f64(v154, v161, v1921.n128_f64[0]), v162, (float64x2_t)v1921, 1));
            v171 = vaddq_f64(v138[2], v164);
            v172 = vaddq_f64(v138[5], v166);
            v173 = vaddq_f64(v138[4], v165);
            v174 = vaddq_f64(v138[7], v168);
            *v138 = vaddq_f64(*v138, v163);
            v138[1] = v169;
            v138[2] = v171;
            v138[3] = v170;
            v138[4] = v173;
            v138[5] = v172;
            v138[6] = vaddq_f64(v138[6], v167);
            v138[7] = v174;
          }
          v175 = v1897[16] + 24 * v18;
          v177 = *(char **)v175;
          v176 = *(char **)(v175 + 8);
          if (*(char **)v175 != v176)
          {
            while (*(_DWORD *)v177 < v18)
            {
              v177 += 16;
              if (v177 == v176)
                goto LABEL_57;
            }
          }
          if (v177 != v176)
          {
            if (*(_DWORD *)v177 == v18)
            {
              v178 = (float64x2_t *)(v1897[7] + 8 * *((_QWORD *)v177 + 1));
              goto LABEL_58;
            }
            v176 = v177;
          }
LABEL_57:
          v178 = (float64x2_t *)sub_20F3D46D0(v1904, (char **)v175, v18, v176);
LABEL_58:
          v179 = v1930;
          v180 = v1932;
          v181 = (float64x2_t)vzip1q_s64((int64x2_t)v1925, (int64x2_t)v1927);
          v182 = (float64x2_t)vzip2q_s64((int64x2_t)v1925, (int64x2_t)v1927);
          v183 = vmlaq_laneq_f64(vmulq_n_f64(v181, *(double *)v1925.i64), v182, (float64x2_t)v1925, 1);
          v184 = (float64x2_t)vzip1q_s64((int64x2_t)v1929, (int64x2_t)v1932);
          v185 = (float64x2_t)vzip2q_s64((int64x2_t)v1929, (int64x2_t)v1932);
          v186 = vmlaq_laneq_f64(vmulq_n_f64(v184, *(double *)v1925.i64), v185, (float64x2_t)v1925, 1);
          v187 = vmlaq_laneq_f64(vmulq_n_f64(v181, v1927.f64[0]), v182, v1927, 1);
          v188 = vmlaq_laneq_f64(vmulq_n_f64(v184, v1927.f64[0]), v185, v1927, 1);
          v189 = vmlaq_laneq_f64(vmulq_n_f64(v181, v1929.f64[0]), v182, v1929, 1);
          v190 = vmlaq_laneq_f64(vmulq_n_f64(v184, v1929.f64[0]), v185, v1929, 1);
          v191 = (float64x2_t)vzip1q_s64((int64x2_t)v1930, (int64x2_t)v1933);
          v192 = vmlaq_laneq_f64(vmulq_n_f64(v181, v180.f64[0]), v182, v180, 1);
          v193 = (float64x2_t)vzip2q_s64((int64x2_t)v1930, (int64x2_t)v1933);
          v194 = vmlaq_laneq_f64(vmulq_n_f64(v184, v180.f64[0]), v185, v180, 1);
          v195 = (float64x2_t)vzip1q_s64(*(int64x2_t *)v1926, *(int64x2_t *)v1928);
          v196 = (float64x2_t)vzip2q_s64(*(int64x2_t *)v1926, *(int64x2_t *)v1928);
          v197 = vmlaq_laneq_f64(vmlaq_n_f64(v183, v195, *(double *)v1926), v196, *(float64x2_t *)v1926, 1);
          v198 = vmlaq_laneq_f64(vmlaq_n_f64(v186, v191, *(double *)v1926), v193, *(float64x2_t *)v1926, 1);
          v199 = vmlaq_laneq_f64(vmlaq_n_f64(v187, v195, *(double *)v1928), v196, *(float64x2_t *)v1928, 1);
          v200 = vmlaq_laneq_f64(vmlaq_n_f64(v188, v191, *(double *)v1928), v193, *(float64x2_t *)v1928, 1);
          v201 = vmlaq_laneq_f64(vmlaq_n_f64(v189, v195, v179.f64[0]), v196, v179, 1);
          v202 = vmlaq_laneq_f64(vmlaq_n_f64(v190, v191, v179.f64[0]), v193, v179, 1);
          v203 = v1931;
          v204 = vmlaq_n_f64(v192, v195, v1933.f64[0]);
          v205 = v1934;
          v206 = vmlaq_laneq_f64(v204, v196, v1933, 1);
          v207 = (float64x2_t)vzip1q_s64(*(int64x2_t *)&v1926[16], *(int64x2_t *)&v1928[16]);
          v208 = vmlaq_n_f64(v194, v191, v1933.f64[0]);
          v209 = (float64x2_t)vzip2q_s64(*(int64x2_t *)&v1926[16], *(int64x2_t *)&v1928[16]);
          v210 = vmlaq_laneq_f64(v208, v193, v1933, 1);
          v211 = (float64x2_t)vzip1q_s64((int64x2_t)v1931, (int64x2_t)v1934);
          v212 = (float64x2_t)vzip2q_s64((int64x2_t)v1931, (int64x2_t)v1934);
          v213 = vmlaq_laneq_f64(vmlaq_n_f64(v200, v211, *(double *)&v1928[16]), v212, *(float64x2_t *)&v1928[16], 1);
          v214 = vmlaq_laneq_f64(vmlaq_n_f64(v201, v207, v203.f64[0]), v209, v203, 1);
          v215 = vmlaq_laneq_f64(vmlaq_n_f64(v202, v211, v203.f64[0]), v212, v203, 1);
          v216 = vmlaq_laneq_f64(vmlaq_n_f64(v206, v207, v205.f64[0]), v209, v205, 1);
          v217 = vmlaq_laneq_f64(vmlaq_n_f64(v210, v211, v205.f64[0]), v212, v205, 1);
          _Q1 = vaddq_f64(v178[1], vmlaq_laneq_f64(vmlaq_n_f64(v198, v211, *(double *)&v1926[16]), v212, *(float64x2_t *)&v1926[16], 1));
          _Q2 = vaddq_f64(v178[3], v213);
          _Q3 = vaddq_f64(v178[2], vmlaq_laneq_f64(vmlaq_n_f64(v199, v207, *(double *)&v1928[16]), v209, *(float64x2_t *)&v1928[16], 1));
          _Q4 = (__n128)vaddq_f64(v178[5], v215);
          v218 = vaddq_f64(v178[4], v214);
          v219 = vaddq_f64(v178[7], v217);
          *v178 = vaddq_f64(*v178, vmlaq_laneq_f64(vmlaq_n_f64(v197, v207, *(double *)&v1926[16]), v209, *(float64x2_t *)&v1926[16], 1));
          v178[1] = _Q1;
          v178[2] = _Q3;
          v178[3] = _Q2;
          v178[4] = v218;
          v178[5] = (float64x2_t)_Q4;
          _Q0 = vaddq_f64(v178[6], v216);
          v178[6] = _Q0;
          v178[7] = v219;
        }
        if (!v15)
          goto LABEL_82;
        v220 = v1897[16] + 24 * v17;
        v222 = *(char **)v220;
        v221 = *(char **)(v220 + 8);
        if (*(char **)v220 != v221)
        {
          while (*(_DWORD *)v222 < v17)
          {
            v222 += 16;
            if (v222 == v221)
              goto LABEL_68;
          }
        }
        if (v222 != v221)
        {
          if (*(_DWORD *)v222 == v17)
          {
            v223 = (float64x2_t *)(v1897[7] + 8 * *((_QWORD *)v222 + 1));
LABEL_69:
            v224 = (float64x2_t)vzip1q_s64((int64x2_t)v1919, *(int64x2_t *)&v1920[32]);
            v225 = (float64x2_t)vzip2q_s64((int64x2_t)v1919, *(int64x2_t *)&v1920[32]);
            v226 = vmlaq_laneq_f64(vmulq_n_f64(v224, v1919.f64[0]), v225, v1919, 1);
            v227 = (float64x2_t)vzip1q_s64((int64x2_t)v1922, *(int64x2_t *)&v1923[32]);
            v228 = (float64x2_t)vzip2q_s64((int64x2_t)v1922, *(int64x2_t *)&v1923[32]);
            v229 = vmlaq_laneq_f64(vmulq_n_f64(v227, v1919.f64[0]), v228, v1919, 1);
            v230 = vmlaq_laneq_f64(vmulq_n_f64(v224, *(double *)&v1920[32]), v225, *(float64x2_t *)&v1920[32], 1);
            v231 = vmlaq_laneq_f64(vmulq_n_f64(v227, *(double *)&v1920[32]), v228, *(float64x2_t *)&v1920[32], 1);
            v232 = vmlaq_laneq_f64(vmulq_n_f64(v224, *(double *)v1922.i64), v225, (float64x2_t)v1922, 1);
            v233 = vmlaq_laneq_f64(vmulq_n_f64(v227, *(double *)v1922.i64), v228, (float64x2_t)v1922, 1);
            v234 = (float64x2_t)vzip1q_s64(*(int64x2_t *)v1923, *(int64x2_t *)v1924);
            v235 = vmlaq_laneq_f64(vmulq_n_f64(v224, *(double *)&v1923[32]), v225, *(float64x2_t *)&v1923[32], 1);
            v236 = (float64x2_t)vzip2q_s64(*(int64x2_t *)v1923, *(int64x2_t *)v1924);
            v237 = vmlaq_laneq_f64(vmulq_n_f64(v227, *(double *)&v1923[32]), v228, *(float64x2_t *)&v1923[32], 1);
            v238 = (float64x2_t)vzip1q_s64(*(int64x2_t *)v1920, *(int64x2_t *)&v1920[48]);
            v239 = (float64x2_t)vzip2q_s64(*(int64x2_t *)v1920, *(int64x2_t *)&v1920[48]);
            v240 = vmlaq_laneq_f64(vmlaq_n_f64(v226, v238, *(double *)v1920), v239, *(float64x2_t *)v1920, 1);
            v241 = vmlaq_laneq_f64(vmlaq_n_f64(v229, v234, *(double *)v1920), v236, *(float64x2_t *)v1920, 1);
            v242 = vmlaq_laneq_f64(vmlaq_n_f64(v230, v238, *(double *)&v1920[48]), v239, *(float64x2_t *)&v1920[48], 1);
            v243 = vmlaq_laneq_f64(vmlaq_n_f64(v231, v234, *(double *)&v1920[48]), v236, *(float64x2_t *)&v1920[48], 1);
            v244 = vmlaq_laneq_f64(vmlaq_n_f64(v232, v238, *(double *)v1923), v239, *(float64x2_t *)v1923, 1);
            v245 = vmlaq_laneq_f64(vmlaq_n_f64(v233, v234, *(double *)v1923), v236, *(float64x2_t *)v1923, 1);
            v246 = vmlaq_laneq_f64(vmlaq_n_f64(v235, v238, *(double *)v1924), v239, *(float64x2_t *)v1924, 1);
            v247 = (float64x2_t)vzip1q_s64(*(int64x2_t *)&v1920[16], (int64x2_t)v1921);
            v248 = vmlaq_n_f64(v237, v234, *(double *)v1924);
            v249 = (float64x2_t)vzip2q_s64(*(int64x2_t *)&v1920[16], (int64x2_t)v1921);
            v250 = vmlaq_laneq_f64(v248, v236, *(float64x2_t *)v1924, 1);
            v251 = (float64x2_t)vzip1q_s64(*(int64x2_t *)&v1923[16], *(int64x2_t *)&v1924[16]);
            v252 = (float64x2_t)vzip2q_s64(*(int64x2_t *)&v1923[16], *(int64x2_t *)&v1924[16]);
            v253 = vmlaq_laneq_f64(vmlaq_n_f64(v243, v251, v1921.n128_f64[0]), v252, (float64x2_t)v1921, 1);
            v254 = vmlaq_laneq_f64(vmlaq_n_f64(v245, v251, *(double *)&v1923[16]), v252, *(float64x2_t *)&v1923[16], 1);
            v255 = vmlaq_laneq_f64(vmlaq_n_f64(v246, v247, *(double *)&v1924[16]), v249, *(float64x2_t *)&v1924[16], 1);
            v256 = vmlaq_laneq_f64(vmlaq_n_f64(v250, v251, *(double *)&v1924[16]), v252, *(float64x2_t *)&v1924[16], 1);
            v257 = vaddq_f64(v223[1], vmlaq_laneq_f64(vmlaq_n_f64(v241, v251, *(double *)&v1920[16]), v252, *(float64x2_t *)&v1920[16], 1));
            v258 = vaddq_f64(v223[3], v253);
            v259 = vaddq_f64(v223[2], vmlaq_laneq_f64(vmlaq_n_f64(v242, v247, v1921.n128_f64[0]), v249, (float64x2_t)v1921, 1));
            v260 = vaddq_f64(v223[5], v254);
            v261 = vaddq_f64(v223[4], vmlaq_laneq_f64(vmlaq_n_f64(v244, v247, *(double *)&v1923[16]), v249, *(float64x2_t *)&v1923[16], 1));
            v262 = vaddq_f64(v223[7], v256);
            *v223 = vaddq_f64(*v223, vmlaq_laneq_f64(vmlaq_n_f64(v240, v247, *(double *)&v1920[16]), v249, *(float64x2_t *)&v1920[16], 1));
            v223[1] = v257;
            v223[2] = v259;
            v223[3] = v258;
            v223[4] = v261;
            v223[5] = v260;
            v223[6] = vaddq_f64(v223[6], v255);
            v223[7] = v262;
            if (v16 && v18 >= v17)
            {
              v263 = v1897[16] + 24 * v18;
              v265 = *(char **)v263;
              v264 = *(char **)(v263 + 8);
              if (*(char **)v263 != v264)
              {
                while (*(_DWORD *)v265 < v17)
                {
                  v265 += 16;
                  if (v265 == v264)
                    goto LABEL_79;
                }
              }
              if (v265 != v264)
              {
                if (*(_DWORD *)v265 == v17)
                {
                  v266 = (float64x2_t *)(v1897[7] + 8 * *((_QWORD *)v265 + 1));
                  goto LABEL_80;
                }
                v264 = v265;
              }
LABEL_79:
              v266 = (float64x2_t *)sub_20F3D46D0(v1904, (char **)v263, v17, v264);
LABEL_80:
              v267 = (float64x2_t)vzip1q_s64((int64x2_t)v1919, *(int64x2_t *)&v1920[32]);
              v268 = (float64x2_t)vzip2q_s64((int64x2_t)v1919, *(int64x2_t *)&v1920[32]);
              v269 = vmlaq_laneq_f64(vmulq_n_f64(v267, *(double *)v1925.i64), v268, (float64x2_t)v1925, 1);
              v270 = (float64x2_t)vzip1q_s64((int64x2_t)v1922, *(int64x2_t *)&v1923[32]);
              v271 = (float64x2_t)vzip2q_s64((int64x2_t)v1922, *(int64x2_t *)&v1923[32]);
              v272 = vmlaq_laneq_f64(vmulq_n_f64(v270, *(double *)v1925.i64), v271, (float64x2_t)v1925, 1);
              v273 = vmlaq_laneq_f64(vmulq_n_f64(v267, v1927.f64[0]), v268, v1927, 1);
              v274 = vmlaq_laneq_f64(vmulq_n_f64(v270, v1927.f64[0]), v271, v1927, 1);
              v275 = vmlaq_laneq_f64(vmulq_n_f64(v267, v1929.f64[0]), v268, v1929, 1);
              v276 = vmlaq_laneq_f64(vmulq_n_f64(v270, v1929.f64[0]), v271, v1929, 1);
              v277 = v1932;
              v278 = vmlaq_laneq_f64(vmulq_n_f64(v267, v277.f64[0]), v268, v277, 1);
              v279 = vmlaq_laneq_f64(vmulq_n_f64(v270, v277.f64[0]), v271, v277, 1);
              v280 = (float64x2_t)vzip1q_s64(*(int64x2_t *)v1923, *(int64x2_t *)v1924);
              v281 = (float64x2_t)vzip2q_s64(*(int64x2_t *)v1923, *(int64x2_t *)v1924);
              v282 = (float64x2_t)vzip1q_s64(*(int64x2_t *)v1920, *(int64x2_t *)&v1920[48]);
              v283 = (float64x2_t)vzip2q_s64(*(int64x2_t *)v1920, *(int64x2_t *)&v1920[48]);
              v284 = vmlaq_laneq_f64(vmlaq_n_f64(v269, v282, *(double *)v1926), v283, *(float64x2_t *)v1926, 1);
              v285 = vmlaq_laneq_f64(vmlaq_n_f64(v272, v280, *(double *)v1926), v281, *(float64x2_t *)v1926, 1);
              v286 = vmlaq_laneq_f64(vmlaq_n_f64(v273, v282, *(double *)v1928), v283, *(float64x2_t *)v1928, 1);
              v287 = vmlaq_laneq_f64(vmlaq_n_f64(v274, v280, *(double *)v1928), v281, *(float64x2_t *)v1928, 1);
              v288 = v1930;
              v289 = vmlaq_laneq_f64(vmlaq_n_f64(v275, v282, v288.f64[0]), v283, v288, 1);
              v290 = vmlaq_laneq_f64(vmlaq_n_f64(v276, v280, v288.f64[0]), v281, v288, 1);
              v291 = v1933;
              v292 = vmlaq_laneq_f64(vmlaq_n_f64(v278, v282, v291.f64[0]), v283, v291, 1);
              v293 = vmlaq_laneq_f64(vmlaq_n_f64(v279, v280, v291.f64[0]), v281, v291, 1);
              v294 = (float64x2_t)vzip1q_s64(*(int64x2_t *)&v1920[16], (int64x2_t)v1921);
              v295 = (float64x2_t)vzip2q_s64(*(int64x2_t *)&v1920[16], (int64x2_t)v1921);
              v296 = (float64x2_t)vzip1q_s64(*(int64x2_t *)&v1923[16], *(int64x2_t *)&v1924[16]);
              v297 = (float64x2_t)vzip2q_s64(*(int64x2_t *)&v1923[16], *(int64x2_t *)&v1924[16]);
              v298 = vmlaq_laneq_f64(vmlaq_n_f64(v284, v294, *(double *)&v1926[16]), v295, *(float64x2_t *)&v1926[16], 1);
              v299 = vmlaq_laneq_f64(vmlaq_n_f64(v286, v294, *(double *)&v1928[16]), v295, *(float64x2_t *)&v1928[16], 1);
              v300 = v1931;
              v301 = vmlaq_laneq_f64(vmlaq_n_f64(v289, v294, v300.f64[0]), v295, v300, 1);
              v302 = vmlaq_laneq_f64(vmlaq_n_f64(v290, v296, v300.f64[0]), v297, v300, 1);
              v303 = v1934;
              v304 = vmlaq_laneq_f64(vmlaq_n_f64(v292, v294, v303.f64[0]), v295, v303, 1);
              v305 = vmlaq_laneq_f64(vmlaq_n_f64(v293, v296, v303.f64[0]), v297, v303, 1);
              v306 = vaddq_f64(v266[1], vmlaq_laneq_f64(vmlaq_n_f64(v285, v296, *(double *)&v1926[16]), v297, *(float64x2_t *)&v1926[16], 1));
              v307 = vaddq_f64(v266[3], vmlaq_laneq_f64(vmlaq_n_f64(v287, v296, *(double *)&v1928[16]), v297, *(float64x2_t *)&v1928[16], 1));
              v308 = vaddq_f64(v266[2], v299);
              v309 = vaddq_f64(v266[5], v302);
              v310 = vaddq_f64(v266[4], v301);
              v311 = vaddq_f64(v266[7], v305);
              *v266 = vaddq_f64(*v266, v298);
              v266[1] = v306;
              v266[2] = v308;
              v266[3] = v307;
              v266[4] = v310;
              v266[5] = v309;
              v266[6] = vaddq_f64(v266[6], v304);
              v266[7] = v311;
            }
            v312 = (float64x2_t *)(*v1897 + 8 * (*((_DWORD *)v1897 + 8) + 4 * v17));
            _Q4 = v1921;
            v314 = *(float64x2_t *)(v11 + 816);
            v313 = *(float64x2_t *)(v11 + 832);
            _Q3 = (float64x2_t)vzip2q_s64(*(int64x2_t *)&v1923[16], *(int64x2_t *)&v1924[16]);
            _Q2 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)vzip1q_s64((int64x2_t)v1922, *(int64x2_t *)&v1923[32]), v19->f64[0]), (float64x2_t)vzip2q_s64((int64x2_t)v1922, *(int64x2_t *)&v1923[32]), *v19, 1), (float64x2_t)vzip1q_s64(*(int64x2_t *)v1923, *(int64x2_t *)v1924), v314.f64[0]), (float64x2_t)vzip2q_s64(*(int64x2_t *)v1923, *(int64x2_t *)v1924), v314, 1), (float64x2_t)vzip1q_s64(*(int64x2_t *)&v1923[16], *(int64x2_t *)&v1924[16]), v313.f64[0]), _Q3, v313,
                    1);
            _Q1 = vsubq_f64(v312[1], _Q2);
            _Q0 = vsubq_f64(*v312, vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)vzip1q_s64((int64x2_t)v1919, *(int64x2_t *)&v1920[32]), v19->f64[0]), (float64x2_t)vzip2q_s64((int64x2_t)v1919, *(int64x2_t *)&v1920[32]), *v19, 1), (float64x2_t)vzip1q_s64(*(int64x2_t *)v1920, *(int64x2_t *)&v1920[48]), v314.f64[0]), (float64x2_t)vzip2q_s64(*(int64x2_t *)v1920, *(int64x2_t *)&v1920[48]), v314, 1), (float64x2_t)vzip1q_s64(*(int64x2_t *)&v1920[16], (int64x2_t)v1921), v313.f64[0]),
                      (float64x2_t)vzip2q_s64(*(int64x2_t *)&v1920[16], (int64x2_t)v1921),
                      v313,
                      1));
            *v312 = _Q0;
            v312[1] = _Q1;
LABEL_82:
            v10 = v1912;
            if (v16)
            {
              v315 = (float64x2_t *)(*v1897 + 8 * (*((_DWORD *)v1897 + 8) + 4 * v18));
              _Q4 = *(__n128 *)&v1928[16];
              v317 = *(float64x2_t *)(v11 + 816);
              v316 = *(float64x2_t *)(v11 + 832);
              _Q3 = (float64x2_t)vzip2q_s64((int64x2_t)v1931, (int64x2_t)v1934);
              _Q2 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)vzip1q_s64((int64x2_t)v1929, (int64x2_t)v1932), v19->f64[0]), (float64x2_t)vzip2q_s64((int64x2_t)v1929, (int64x2_t)v1932), *v19, 1), (float64x2_t)vzip1q_s64((int64x2_t)v1930, (int64x2_t)v1933), v317.f64[0]), (float64x2_t)vzip2q_s64((int64x2_t)v1930, (int64x2_t)v1933), v317, 1), (float64x2_t)vzip1q_s64((int64x2_t)v1931, (int64x2_t)v1934), v316.f64[0]), _Q3, v316, 1);
              _Q1 = vsubq_f64(v315[1], _Q2);
              _Q0 = vsubq_f64(*v315, vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)vzip1q_s64((int64x2_t)v1925, (int64x2_t)v1927), v19->f64[0]), (float64x2_t)vzip2q_s64((int64x2_t)v1925, (int64x2_t)v1927), *v19, 1), (float64x2_t)vzip1q_s64(*(int64x2_t *)v1926, *(int64x2_t *)v1928), v317.f64[0]), (float64x2_t)vzip2q_s64(*(int64x2_t *)v1926, *(int64x2_t *)v1928), v317, 1), (float64x2_t)vzip1q_s64(*(int64x2_t *)&v1926[16], *(int64x2_t *)&v1928[16]), v316.f64[0]), (float64x2_t)vzip2q_s64(*(int64x2_t *)&v1926[16], *(int64x2_t *)&v1928[16]), v316,
                        1));
              *v315 = _Q0;
              v315[1] = _Q1;
            }
            goto LABEL_4;
          }
          v221 = v222;
        }
LABEL_68:
        v223 = (float64x2_t *)sub_20F3D46D0(v1904, (char **)v220, v17, v221);
        goto LABEL_69;
      }
      *(_QWORD *)(v11 + 848) = 0;
      v10 = v1912;
LABEL_4:
      v11 += 888;
      if (v11 == v10)
      {
        v318 = v1970;
        v1654 = v1969;
        v320 = v1967[28];
        v319 = v1967[29];
        if (v320 == v319)
          goto LABEL_367;
LABEL_87:
        v1652 = v318 + 5;
        v1650 = v318 + 33;
        v1651 = v318 + 47;
        v1761.i64[0] = *(_QWORD *)&_Q0.f64[0];
        v1752 = _Q0.f64[0];
        v1784.i64[0] = *(_QWORD *)&_Q0.f64[0];
        v1845 = (int8x16_t)_Q0;
        v1846 = _Q0;
        v1755.f64[0] = _Q0.f64[0];
        v1754.i64[0] = *(_QWORD *)&_Q0.f64[0];
        v1820 = _Q0.f64[0];
        v1818.i64[0] = *(_QWORD *)&_Q0.f64[0];
        v1822 = _Q0;
        v1762.i64[0] = *(_QWORD *)&_Q0.f64[0];
        v1753 = _Q0.f64[0];
        v1821.i64[0] = *(_QWORD *)&_Q0.f64[0];
        v1815 = _Q0.f64[0];
        v1783 = _Q0;
        v1757.f64[0] = _Q0.f64[0];
        v1756.i64[0] = *(_QWORD *)&_Q0.f64[0];
        v1819.f64[0] = _Q0.f64[0];
        v1817.i64[0] = *(_QWORD *)&_Q0.f64[0];
        v1766 = _Q0;
        v1816.i64[0] = *(_QWORD *)&_Q0.f64[0];
        v1814 = _Q0.f64[0];
        v1782.i64[0] = *(_QWORD *)&_Q0.f64[0];
        v1758 = _Q0.f64[0];
        v1763 = _Q0;
        v1759.f64[0] = _Q0.f64[0];
        v1781.i64[0] = *(_QWORD *)&_Q0.f64[0];
        v1760.f64[0] = _Q0.f64[0];
        v1765.i64[0] = *(_QWORD *)&_Q0.f64[0];
        v1764 = _Q0;
        v1726.i64[0] = *(_QWORD *)&_Q0.f64[0];
        v1724 = _Q0.f64[0];
        v1751.i64[0] = *(_QWORD *)&_Q0.f64[0];
        v1769 = (int8x16_t)_Q0;
        v1770 = _Q0;
        v1779.f64[0] = _Q0.f64[0];
        v1725.i64[0] = *(_QWORD *)&_Q0.f64[0];
        v1750 = _Q0.f64[0];
        v1768.i64[0] = *(_QWORD *)&_Q0.f64[0];
        v1728 = _Q0;
        v1742.i64[0] = *(_QWORD *)&_Q0.f64[0];
        v1734 = _Q0.f64[0];
        v1780.i64[0] = *(_QWORD *)&_Q0.f64[0];
        v1727 = _Q0.f64[0];
        v1729 = _Q0;
        v1737.f64[0] = _Q0.f64[0];
        v1736.i64[0] = *(_QWORD *)&_Q0.f64[0];
        v1748.f64[0] = _Q0.f64[0];
        v1746.i64[0] = *(_QWORD *)&_Q0.f64[0];
        v1749 = _Q0;
        v1743.i64[0] = *(_QWORD *)&_Q0.f64[0];
        v1735 = _Q0.f64[0];
        v1747.i64[0] = *(_QWORD *)&_Q0.f64[0];
        v1738 = _Q0.f64[0];
        v1744 = _Q0;
        v1739.f64[0] = _Q0.f64[0];
        v1740.i64[0] = *(_QWORD *)&_Q0.f64[0];
        v1741.f64[0] = _Q0.f64[0];
        v1767.i64[0] = *(_QWORD *)&_Q0.f64[0];
        v1745 = _Q0;
        v1848.i64[0] = *(_QWORD *)&_Q0.f64[0];
        v1794 = _Q0.f64[0];
        v1847.i64[0] = *(_QWORD *)&_Q0.f64[0];
        v1796.i64[0] = *(_QWORD *)&_Q0.f64[0];
        v1856.f64[0] = _Q0.f64[0];
        v1791 = _Q0.f64[0];
        v1849.i64[0] = *(_QWORD *)&_Q0.f64[0];
        v1793 = _Q0.f64[0];
        v1852.i64[0] = *(_QWORD *)&_Q0.f64[0];
        v1798.f64[0] = _Q0.f64[0];
        v1851.i64[0] = *(_QWORD *)&_Q0.f64[0];
        v1792 = _Q0.f64[0];
        v1850.i64[0] = *(_QWORD *)&_Q0.f64[0];
        v1795 = _Q0.f64[0];
        v1855.f64[0] = _Q0.f64[0];
        v1789 = _Q0.f64[0];
        v1853.i64[0] = *(_QWORD *)&_Q0.f64[0];
        v1790.f64[0] = _Q0.f64[0];
        v1854.i64[0] = *(_QWORD *)&_Q0.f64[0];
        v1797.f64[0] = _Q0.f64[0];
        v1828.i64[0] = *(_QWORD *)&_Q0.f64[0];
        v1834 = _Q0.f64[0];
        v1827.i64[0] = *(_QWORD *)&_Q0.f64[0];
        v1835.i64[0] = *(_QWORD *)&_Q0.f64[0];
        v1841.f64[0] = _Q0.f64[0];
        v1824 = _Q0.f64[0];
        v1837.i64[0] = *(_QWORD *)&_Q0.f64[0];
        v1826 = _Q0.f64[0];
        v1838.i64[0] = *(_QWORD *)&_Q0.f64[0];
        v1839.f64[0] = _Q0.f64[0];
        v1830.i64[0] = *(_QWORD *)&_Q0.f64[0];
        v1831 = _Q0.f64[0];
        v1829.i64[0] = *(_QWORD *)&_Q0.f64[0];
        v1832 = _Q0.f64[0];
        v1873.f64[0] = _Q0.f64[0];
        v1823 = _Q0.f64[0];
        v1833.i64[0] = *(_QWORD *)&_Q0.f64[0];
        v1825.f64[0] = _Q0.f64[0];
        v1840.i64[0] = *(_QWORD *)&_Q0.f64[0];
        v1836.f64[0] = _Q0.f64[0];
        v1898 = v318;
        v1649 = v319;
        while (2)
        {
          v321 = *(unsigned int **)(v320 + 488);
          v322 = *(unsigned int **)(v320 + 496);
          v324 = *(unsigned int **)(v320 + 504);
          v323 = *(unsigned int **)(v320 + 512);
          if (((*((unsigned __int8 *)v322 + 4) >> 2) & 1)
             + ((*((unsigned __int8 *)v321 + 4) >> 2) & 1)
             + ((*((unsigned __int8 *)v324 + 4) >> 2) & 1) == (char)(32 * *((_BYTE *)v323 + 4)) >> 7)
            v325 = 2;
          else
            v325 = 1;
          if ((v325 & v1972) == 0 || *((_BYTE *)v321 + 20) && *v321 == -1)
            goto LABEL_89;
          v1887 = *((unsigned __int8 *)v322 + 20);
          if (*((_BYTE *)v322 + 20))
          {
            if (*v322 == -1)
              goto LABEL_89;
          }
          v1872 = *((unsigned __int8 *)v324 + 20);
          if (*((_BYTE *)v324 + 20))
          {
            if (*v324 == -1)
              goto LABEL_89;
          }
          v1842 = *((unsigned __int8 *)v323 + 20);
          if (*((_BYTE *)v323 + 20))
          {
            if (*v323 == -1)
              goto LABEL_89;
          }
          if (*((_BYTE *)v321 + 20))
          {
            v326 = *(_DWORD *)(v1968[3] + 4 * *v321);
            if (*((_BYTE *)v322 + 20))
              goto LABEL_104;
LABEL_108:
            v327 = -1;
            if (!*((_BYTE *)v324 + 20))
              goto LABEL_109;
LABEL_105:
            v328 = *(_DWORD *)(*v1968 + 4 * *v324);
            v1785 = *((unsigned __int8 *)v321 + 20);
            v1843 = v327;
            v1787 = v326;
            if (*((_BYTE *)v323 + 20))
              goto LABEL_106;
LABEL_110:
            v329 = -1;
          }
          else
          {
            v326 = -1;
            if (!*((_BYTE *)v322 + 20))
              goto LABEL_108;
LABEL_104:
            v327 = *(_DWORD *)(v1968[3] + 4 * *v322);
            if (*((_BYTE *)v324 + 20))
              goto LABEL_105;
LABEL_109:
            v328 = -1;
            v1785 = *((unsigned __int8 *)v321 + 20);
            v1843 = v327;
            v1787 = v326;
            if (!*((_BYTE *)v323 + 20))
              goto LABEL_110;
LABEL_106:
            v329 = *(_DWORD *)(*v1968 + 4 * *v323);
          }
          v330 = *((_QWORD *)v321 + 6);
          v331 = *((int64x2_t *)v321 + 2);
          v332 = *(int64x2_t *)(v321 + 14);
          _Q3 = *((int64x2_t *)v321 + 5);
          v334 = (float64x2_t)vzip1q_s64(v331, v332);
          v335 = (float64x2_t)vzip2q_s64(v331, v332);
          v389.f64[1] = *((float64_t *)v321 + 9);
          v336 = (float64x2_t)vextq_s8((int8x16_t)v335, (int8x16_t)vdupq_laneq_s64(_Q3, 1), 8uLL);
          v337 = *((double *)v321 + 15);
          v1913 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v334, *((double *)v321 + 13)), v335, *(float64x2_t *)(v321 + 26), 1), v389, v337);
          _D6 = *((_QWORD *)v321 + 14);
          __asm { FMLA            D7, D6, V3.D[1] }
          v340 = *((_QWORD *)v321 + 10);
          v335.f64[1] = v336.f64[0];
          v341 = *((double *)v321 + 12);
          v336.f64[0] = _D7 + v341 * v337;
          v342.f64[0] = *((float64_t *)v322 + 6);
          v343 = *((int64x2_t *)v322 + 2);
          v344 = *(int64x2_t *)(v322 + 14);
          _Q7 = *((float64x2_t *)v322 + 5);
          v346 = (float64x2_t)vzip1q_s64(v343, v344);
          v342.f64[1] = *((float64_t *)v322 + 9);
          _Q6 = (float64x2_t)vzip2q_s64(v343, v344);
          v348 = vextq_s8((int8x16_t)_Q6, (int8x16_t)vdupq_laneq_s64((int64x2_t)_Q7, 1), 8uLL);
          v349 = *((double *)v322 + 15);
          v350 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v346, *((double *)v322 + 13)), _Q6, *(float64x2_t *)(v322 + 26), 1), v342, v349);
          _D20 = *((_QWORD *)v322 + 14);
          v352 = *((_QWORD *)v322 + 10);
          __asm { FMLA            D26, D20, V7.D[1] }
          *(_QWORD *)&_Q6.f64[1] = v348.i64[0];
          _Q7.f64[0] = _D26 + *((double *)v322 + 12) * v349;
          v348.i64[0] = *((_QWORD *)v322 + 12);
          _Q30.f64[0] = *((float64_t *)v324 + 6);
          v355 = *((float64x2_t *)v324 + 2);
          v356 = *(float64x2_t *)(v324 + 14);
          v357 = *((double *)v324 + 12);
          _Q25 = *((float64x2_t *)v324 + 5);
          v359 = *((double *)v324 + 15);
          _Q8 = *(float64x2_t *)(v324 + 26);
          v360 = vmulq_n_f64(v334, _Q30.f64[0]);
          v361 = vmulq_n_f64((float64x2_t)v340, _Q30.f64[0]);
          _Q30.f64[1] = *((float64_t *)v324 + 9);
          v362 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)vzip1q_s64((int64x2_t)v355, (int64x2_t)v356), _Q8.f64[0]), (float64x2_t)vzip2q_s64((int64x2_t)v355, (int64x2_t)v356), _Q8, 1), _Q30, v359);
          _Q8.f64[0] = *((float64_t *)v324 + 14);
          __asm { FMLA            D30, D8, V25.D[1] }
          _Q30.f64[0] = _Q30.f64[0] + v357 * v359;
          *(_QWORD *)&v364 = *(_OWORD *)&vnegq_f64(v362);
          v365 = *((float64x2_t *)v323 + 2);
          v366 = vmlaq_n_f64(vmulq_n_f64(v334, v355.f64[0]), v335, v356.f64[0]);
          v367 = vmlaq_n_f64(vmulq_n_f64((float64x2_t)v340, v355.f64[0]), (float64x2_t)*(unint64_t *)&v336.f64[1], v356.f64[0]);
          v368 = vmlaq_laneq_f64(vmulq_laneq_f64(v334, v355, 1), v335, v356, 1);
          v369 = vmlaq_laneq_f64(vmulq_laneq_f64((float64x2_t)v340, v355, 1), (float64x2_t)*(unint64_t *)&v336.f64[1], v356, 1);
          v370 = vmlaq_n_f64(v360, v335, _Q30.f64[1]);
          v371 = *(float64x2_t *)(v323 + 14);
          v372 = vmlsq_laneq_f64(vmulq_n_f64(v334, v364), v335, v362, 1);
          v335.f64[0] = *((float64_t *)v323 + 15);
          v334.f64[0] = *((float64_t *)v323 + 6);
          v334.f64[1] = *((float64_t *)v323 + 9);
          v373 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)vzip1q_s64((int64x2_t)v365, (int64x2_t)v371), *((double *)v323 + 13)), (float64x2_t)vzip2q_s64((int64x2_t)v365, (int64x2_t)v371), *(float64x2_t *)(v323 + 26), 1), v334, v335.f64[0]);
          v374 = vmlaq_n_f64(v366, v389, _Q25.f64[0]);
          v375 = vmlaq_n_f64(v367, (float64x2_t)*(unint64_t *)&v341, _Q25.f64[0]);
          v376 = vmlaq_laneq_f64(v368, v389, _Q25, 1);
          v377 = vmlaq_laneq_f64(v369, (float64x2_t)*(unint64_t *)&v341, _Q25, 1);
          v378 = vmlaq_n_f64(v370, v389, v357);
          v379 = vmlaq_n_f64(vmlaq_n_f64(v361, (float64x2_t)*(unint64_t *)&v336.f64[1], _Q30.f64[1]), (float64x2_t)*(unint64_t *)&v341, v357);
          v380 = vmlsq_lane_f64(v372, v389, _Q30.f64[0], 0);
          v381 = vmlsq_lane_f64(vmlsq_laneq_f64(vmulq_n_f64((float64x2_t)v340, v364), (float64x2_t)*(unint64_t *)&v336.f64[1], v362, 1), (float64x2_t)*(unint64_t *)&v341, _Q30.f64[0], 0);
          v382 = vmlaq_n_f64(vmulq_n_f64(v346, v365.f64[0]), _Q6, v371.f64[0]);
          v383 = vmlaq_n_f64(vmulq_n_f64((float64x2_t)v352, v365.f64[0]), (float64x2_t)v348.u64[1], v371.f64[0]);
          v384 = vmlaq_laneq_f64(vmulq_laneq_f64(v346, v365, 1), _Q6, v371, 1);
          v385 = vmlaq_laneq_f64(vmulq_laneq_f64((float64x2_t)v352, v365, 1), (float64x2_t)v348.u64[1], v371, 1);
          v386 = vmlaq_n_f64(vmulq_n_f64(v346, v334.f64[0]), _Q6, v334.f64[1]);
          v387 = vmlaq_n_f64(vmulq_n_f64((float64x2_t)v352, v334.f64[0]), (float64x2_t)v348.u64[1], v334.f64[1]);
          *(_QWORD *)&v334.f64[0] = *(_OWORD *)&vnegq_f64(v373);
          v388 = vmlsq_laneq_f64(vmulq_n_f64(v346, v334.f64[0]), _Q6, v373, 1);
          v389.f64[0] = *(float64_t *)(v320 + 408);
          v390 = vmulq_n_f64((float64x2_t)v352, v334.f64[0]);
          v391 = *(int8x16_t *)(v320 + 392);
          v392 = vmlsq_laneq_f64(v390, (float64x2_t)v348.u64[1], v373, 1);
          _Q5 = *((float64x2_t *)v323 + 5);
          _D20 = *((_QWORD *)v323 + 14);
          __asm { FMLA            D6, D20, V5.D[1] }
          v395 = *((double *)v323 + 12);
          v373.f64[0] = _Q6.f64[0] + v395 * v335.f64[0];
          *(_QWORD *)&v396 = vextq_s8(v391, v391, 8uLL).u64[0];
          v397 = vmlaq_n_f64(v382, v342, _Q5.f64[0]);
          v398 = vmlaq_n_f64(v383, (float64x2_t)v348.u64[0], _Q5.f64[0]);
          v399 = vmlaq_laneq_f64(v384, v342, _Q5, 1);
          v400 = vmlaq_laneq_f64(v385, (float64x2_t)v348.u64[0], _Q5, 1);
          v401 = *(double *)(v320 + 432);
          v402 = vmlaq_n_f64(v386, v342, v395);
          v403 = vmlaq_n_f64(v387, (float64x2_t)v348.u64[0], v395);
          v404 = *(int8x16_t *)(v320 + 416);
          v405 = vmlsq_lane_f64(v388, v342, v373.f64[0], 0);
          *(_QWORD *)&v406 = vextq_s8(v404, v404, 8uLL).u64[0];
          v407 = vmlsq_lane_f64(v392, (float64x2_t)v348.u64[0], v373.f64[0], 0);
          __asm { FMOV            V18.2D, #1.0 }
          v409.f64[1] = _Q18.f64[1];
          *(_QWORD *)&v409.f64[0] = *(_OWORD *)&vnegq_f64(v336);
          v410 = *(double *)(v320 + 456);
          *(_QWORD *)&_Q18.f64[0] = *(_OWORD *)&vnegq_f64(_Q7);
          v411 = *(int8x16_t *)(v320 + 440);
          v412 = vmlsq_f64(v374, (float64x2_t)0, v1913);
          v413 = vmlsq_f64(v376, (float64x2_t)0, v1913);
          v414 = vmlsq_f64(v378, (float64x2_t)0, v1913);
          v1771 = vsubq_f64(v380, v1913);
          *(_QWORD *)&v415 = vextq_s8(v411, v411, 8uLL).u64[0];
          v416 = (int64x2_t)vmlaq_f64(v375, (float64x2_t)0, v409);
          v1905 = (int64x2_t)vmlaq_f64(v377, (float64x2_t)0, v409);
          *(_QWORD *)&v417 = *(_OWORD *)&vmlaq_f64(v379, (float64x2_t)0, v409);
          v1730 = vaddq_f64(v409, v381);
          v409.f64[0] = *(float64_t *)(v320 + 480);
          v1866 = v409;
          v418 = vmlsq_f64(v397, (float64x2_t)0, v350);
          v419 = vmlsq_f64(v399, (float64x2_t)0, v350);
          v420 = vmlsq_f64(v402, (float64x2_t)0, v350);
          v421 = vsubq_f64(v405, v350);
          v422 = vmlaq_f64(v398, (float64x2_t)0, _Q18);
          v423 = vmlaq_f64(v400, (float64x2_t)0, _Q18);
          v424 = vmlaq_f64(v403, (float64x2_t)0, _Q18);
          v425 = vaddq_f64(_Q18, v407);
          v1861 = *(int8x16_t *)(v320 + 464);
          *(_QWORD *)&v1857 = vextq_s8(v1861, v1861, 8uLL).u64[0];
          v1914 = v420;
          v1888 = v419;
          v1901 = v423;
          v1884 = v424;
          v1899 = v422;
          v1893 = v418;
          v1880 = v425;
          v1874 = v421;
          if (*(_BYTE *)(v320 + 144))
          {
            v1702 = vmlaq_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v418, v412.f64[0]), v419, v413.f64[0]), v420, v414.f64[0]), (float64x2_t)0, v421);
            v1705 = vmlaq_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v422, v412.f64[0]), v423, v413.f64[0]), v424, v414.f64[0]), (float64x2_t)0, v425);
            v1708 = vmlaq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(v418, v412, 1), v419, v413, 1), v420, v414, 1), (float64x2_t)0, v421);
            v1711 = *(_OWORD *)&vmlaq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(v422, v412, 1), v423, v413, 1), v424, v414, 1), (float64x2_t)0, v425);
            v1715 = vmlaq_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v418, *(double *)v416.i64), v419, *(double *)v1905.i64), v420, v417), (float64x2_t)0, v421);
            v1720 = *(_OWORD *)&vmlaq_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v422, *(double *)v416.i64), v423, *(double *)v1905.i64), v424, v417), (float64x2_t)0, v425);
            v1919 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v1702, *(double *)v391.i64), v1708, *(double *)v404.i64), v1715, *(double *)v411.i64);
            *(_QWORD *)v1920 = vmlad_n_f64(vmlad_n_f64(*(double *)v391.i64 * v1705.f64[0], *(double *)v404.i64, *(double *)&v1711), *(double *)v411.i64, *(double *)&v1720);
            *(float64x2_t *)&v1920[8] = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v1702, v396), v1708, v406), v1715, v415);
            *(_QWORD *)&v1920[24] = vmlad_n_f64(vmlad_n_f64(v396 * v1705.f64[0], v406, *(double *)&v1711), v415, *(double *)&v1720);
            *(float64x2_t *)&v1920[32] = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v1702, v389.f64[0]), v1708, v401), v1715, v410);
            *(_QWORD *)&v1920[48] = vmlad_n_f64(vmlad_n_f64(vmulq_f64(v1705, v389).f64[0], v401, *(double *)&v1711), v410, *(double *)&v1720);
            v1960 = 0.0;
            v1959 = 0uLL;
            sub_20F20830C(&v1919, (double *)v1959.i64, v1961.f64);
            _Q5 = (float64x2_t)vdupq_n_s64(*(_QWORD *)&v1730.f64[0] ^ 0x8000000000000000);
            v429 = vmlaq_f64(vmlaq_f64(vmulq_f64((float64x2_t)vzip1q_s64((int64x2_t)v412, (int64x2_t)v413), (float64x2_t)vdupq_n_s64(*(_QWORD *)&v1771.f64[0] ^ 0x8000000000000000)), (float64x2_t)vdupq_n_s64(*(_QWORD *)&v1771.f64[1] ^ 0x8000000000000000), (float64x2_t)vzip2q_s64((int64x2_t)v412, (int64x2_t)v413)), _Q5, (float64x2_t)vzip1q_s64(v416, v1905));
            _V3.D[1] = v414.f64[1];
            _D2 = *(_QWORD *)&v1771.f64[1] ^ 0x8000000000000000;
            __asm { FMLA            D1, D2, V3.D[1] }
            v433 = vmlad_n_f64(_D1, COERCE_DOUBLE(*(_QWORD *)&v1730.f64[0] ^ 0x8000000000000000), v417);
            _Q15 = v418;
            _Q14 = v1888;
            v436 = vaddq_f64(v1874, vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v418, v429.f64[0]), v1888, v429, 1), v1914, v433));
            v440 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1899, v429.f64[0]), v1901, v429, 1), v1884, v433);
            v437 = (float64x2_t)vextq_s8((int8x16_t)v436, (int8x16_t)v436, 8uLL);
            v438.f64[0] = v436.f64[0];
            v438.f64[1] = v437.f64[0];
            v439 = vaddq_f64(v1880, v440);
            v440.f64[0] = sqrt(v436.f64[0] * v436.f64[0] + v437.f64[0] * v437.f64[0] + v439.f64[0] * v439.f64[0]);
            if (v440.f64[0] == 0.0)
              v426.f64[0] = 1.0;
            else
              v426.f64[0] = 1.0 / v440.f64[0];
            v441 = vmulq_n_f64(v438, v426.f64[0]);
            _Q21 = vmulq_f64(v426, v439);
            v443 = v426.f64[0] * vmuld_n_f64(v441.f64[0], v441.f64[0]);
            v444 = v426.f64[0] * vmuld_lane_f64(v441.f64[1], v441, 1);
            v445 = v426.f64[0] * vmuld_n_f64(_Q21.f64[0], _Q21.f64[0]);
            v438.f64[0] = v444 + v445;
            v446 = v426.f64[0] * vmuld_lane_f64(-v441.f64[0], v441, 1);
            v440.f64[0] = v426.f64[0] * (-v441.f64[0] * _Q21.f64[0]);
            v1881 = v443 + v445;
            _D3 = v426.f64[0] * (-v441.f64[1] * _Q21.f64[0]);
            v448.f64[0] = v440.f64[0];
            v448.f64[1] = v446;
            *(_QWORD *)&v449.f64[0] = vextq_s8((int8x16_t)v448, (int8x16_t)v448, 8uLL).u64[0];
            v450.f64[0] = v440.f64[0];
            v450.f64[1] = _D3;
            _Q5.f64[0] = v443 + v444;
            *(_QWORD *)&v1875 = vextq_s8((int8x16_t)v450, (int8x16_t)v450, 8uLL).u64[0];
            v451 = v1901;
            _Q13 = v1899;
            if (v1887)
            {
              v453 = 0;
              v454 = 0;
              *(_QWORD *)v1936 = v1962;
              v1935 = v1961;
              *(_QWORD *)v1938 = v1964;
              v1937 = v1963;
              *(double *)v1940 = v1966;
              v1939 = v1965;
              do
              {
                v1941.f64[v453] = 0.0;
                v455 = v454 < 2;
                if (v454 < 2)
                  ++v454;
                else
                  v454 = 0;
                if (v455)
                  ++v453;
                else
                  v453 += 4;
              }
              while (v453 != 18);
              v456.f64[0] = v438.f64[0];
              v456.f64[1] = v446;
              v457 = vnegq_f64(v456);
              v456.f64[0] = v426.f64[0] * (-v441.f64[0] * _Q21.f64[0]);
              v456.f64[1] = v1875;
              v458 = (int8x16_t)vnegq_f64(v456);
              v448.f64[1] = v449.f64[0];
              v459 = vnegq_f64(v448);
              v460.f64[0] = v1881;
              v460.f64[1] = v426.f64[0] * (-v441.f64[1] * _Q21.f64[0]);
              v461 = vnegq_f64(v460);
              v462 = (float64x2_t)vextq_s8((int8x16_t)v459, (int8x16_t)v461, 8uLL);
              v463 = (float64x2_t)vextq_s8((int8x16_t)v461, v458, 8uLL);
              v464 = (float64x2_t)vzip1q_s64(vdupq_laneq_s64((int64x2_t)v458, 1), (int64x2_t)vnegq_f64(_Q5));
              _Q29 = (float64x2_t)vextq_s8((int8x16_t)v457, (int8x16_t)v459, 8uLL);
              _Q8 = (float64x2_t)vextq_s8((int8x16_t)vdupq_lane_s64(*(uint64_t *)&v457.f64[0], 0), (int8x16_t)_Q29, 8uLL);
              *(float64x2_t *)&v1936[8] = vmlaq_n_f64(vmulq_n_f64(v456, v437.f64[0]), v462, v439.f64[0]);
              *(_QWORD *)&v1936[24] = *(_OWORD *)&vmlaq_f64(vmulq_f64(v437, _Q5), v439, v463);
              *(_QWORD *)&v1938[24] = *(_OWORD *)&vmlsq_laneq_f64(vmulq_laneq_f64(v436, v464, 1), v439, _Q29, 1);
              *(float64x2_t *)&v1938[8] = vmlsq_lane_f64(vmulq_n_f64((float64x2_t)vextq_s8((int8x16_t)v463, (int8x16_t)v464, 8uLL), v436.f64[0]), _Q8, v439.f64[0], 0);
              v464.f64[0] = v438.f64[0];
              v464.f64[1] = v446;
              *(float64x2_t *)&v1940[8] = vmlsq_lane_f64(vmulq_n_f64(v457, v437.f64[0]), v462, v436.f64[0], 0);
              v457.f64[0] = v449.f64[0];
              v457.f64[1] = v1881;
              *(_QWORD *)&v1940[24] = *(_OWORD *)&vmlsq_laneq_f64(vmulq_f64(v437, v459), v436, v461, 1);
              *(double *)&v1942[24] = v456.f64[0];
              *(float64x2_t *)&v1942[8] = v464;
              *(double *)&v1944[24] = v426.f64[0] * (-v441.f64[1] * _Q21.f64[0]);
              *(float64x2_t *)&v1944[8] = v457;
              *(float64_t *)&v1946[24] = _Q5.f64[0];
              *(float64x2_t *)&v1946[8] = v456;
            }
            if (v1785)
            {
              v465 = 0;
              v466 = 0;
              _D9 = v1964;
              _D10 = v1966;
              v469 = vnegq_f64(v1961);
              v1906 = (float64x2_t)vdupq_laneq_s64((int64x2_t)v1702, 1);
              _D18 = v1705.f64[0];
              v471 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v1705.f64[0], 0);
              v472 = vmlsq_lane_f64(vmlsq_laneq_f64(vmulq_n_f64(v469, v1702.f64[0]), v1963, v1702, 1), v1965, v1705.f64[0], 0);
              _D26 = vextq_s8((int8x16_t)v1702, (int8x16_t)v1702, 8uLL).u64[0];
              _D27 = v1702.f64[1];
              __asm
              {
                FMLS            D13, D27, V9.D[0]
                FMLS            D13, D18, V10.D[0]
              }
              _D18 = v1711;
              v478 = (float64x2_t)vdupq_laneq_s64((int64x2_t)v1708, 1);
              v479 = (float64x2_t)vdupq_lane_s64(v1711, 0);
              v480 = vmlsq_lane_f64(vmlsq_laneq_f64(vmulq_n_f64(v469, v1708.f64[0]), v1963, v1708, 1), v1965, *(double *)&v1711, 0);
              _Q29 = (float64x2_t)vextq_s8((int8x16_t)v1708, (int8x16_t)v1708, 8uLL);
              _D19 = v1708.f64[1];
              __asm
              {
                FMLS            D15, D19, V9.D[0]
                FMLS            D15, D18, V10.D[0]
              }
              _D24 = v1720;
              v485 = vmulq_n_f64(v469, v1715.f64[0]);
              v486 = (float64x2_t)vdupq_laneq_s64((int64x2_t)v1715, 1);
              v487 = (float64x2_t)vdupq_lane_s64(v1720, 0);
              _Q8 = (float64x2_t)vextq_s8((int8x16_t)v1715, (int8x16_t)v1715, 8uLL);
              _D18 = v1715.f64[1];
              __asm { FMLS            D11, D18, V9.D[0] }
              v1947 = v472;
              *(_QWORD *)v1948 = _D13;
              v1949 = v480;
              *(_QWORD *)v1950 = _D15;
              __asm { FMLS            D11, D24, V10.D[0] }
              v1951 = vmlsq_lane_f64(vmlsq_laneq_f64(v485, v1963, v1715, 1), v1965, *(double *)&v1720, 0);
              *(_QWORD *)v1952 = _D11;
              do
              {
                v1953.f64[v465] = 0.0;
                v491 = v466 < 2;
                if (v466 < 2)
                  ++v466;
                else
                  v466 = 0;
                if (v491)
                  ++v465;
                else
                  v465 += 4;
              }
              while (v465 != 18);
              v492 = 0;
              v493 = 0;
              do
              {
                *(_QWORD *)&v1948[8 * v492 + 8] = 0;
                v494 = v493 < 2;
                if (v493 < 2)
                  ++v493;
                else
                  v493 = 0;
                if (v494)
                  ++v492;
                else
                  v492 += 4;
              }
              while (v492 != 18);
              v495.f64[0] = v438.f64[0];
              v495.f64[1] = v446;
              _Q19.f64[0] = v449.f64[0];
              _Q19.f64[1] = v1881;
              v497.f64[0] = v426.f64[0] * (-v441.f64[0] * _Q21.f64[0]);
              v497.f64[1] = v1875;
              v498 = vnegq_f64(v495);
              v499 = vmlsq_f64(vmlsq_f64(vmulq_n_f64(v498, v1702.f64[0]), v1906, _Q19), v471, v497);
              __asm { FMLS            D24, D26, V3.D[0] }
              _D25 = v1705.f64[0];
              __asm { FMLS            D24, D25, V5.D[0] }
              v503 = vmlsq_f64(vmlsq_f64(vmulq_n_f64(v498, v1708.f64[0]), v478, _Q19), v479, v497);
              __asm { FMLS            D26, D29, V3.D[0] }
              _D27 = v1711;
              __asm { FMLS            D26, D27, V5.D[0] }
              v507 = vmlsq_f64(vmlsq_f64(vmulq_n_f64(v498, v1715.f64[0]), v486, _Q19), v487, v497);
              __asm { FMLS            D19, D8, V3.D[0] }
              *(float64x2_t *)&v1954[8] = v499;
              *(_QWORD *)&v1954[24] = _D24;
              *(_QWORD *)&v1956[24] = _D26;
              *(float64x2_t *)&v1956[8] = v503;
              _D24 = v1720;
              __asm { FMLS            D19, D24, V5.D[0] }
              *(float64_t *)&v1958[24] = _Q19.f64[0];
              *(float64x2_t *)&v1958[8] = v507;
              _Q14 = v1888;
              v451 = v1901;
              _Q13 = v1899;
              _Q15 = v1893;
            }
            *(_QWORD *)&v509.f64[0] = v1861.i64[0];
            v509.f64[1] = v1857;
            v436.f64[0] = v426.f64[0] * v436.f64[0] * *(double *)v1861.i64
                        + v426.f64[0] * v437.f64[0] * v1857
                        + v426.f64[0] * v439.f64[0] * v1866.f64[0];
            v437.f64[0] = 0.0;
            v510 = (int8x16_t)vcgtq_f64(v437, v436);
            _Q19 = (float64x2_t)vbslq_s8(v510, (int8x16_t)vnegq_f64(v1866), (int8x16_t)v1866);
            v512 = (int8x16_t)vdupq_lane_s64(v510.i64[0], 0);
            v513 = (float64x2_t)vbslq_s8(v512, (int8x16_t)vnegq_f64(v509), (int8x16_t)v509);
            v514 = v1960;
            _Q17 = v1959;
            v516 = (int8x16_t)vsubq_f64(v441, v513);
            *(_QWORD *)&v517 = *(_OWORD *)&vsubq_f64(_Q21, _Q19);
            *(_QWORD *)&v518.f64[0] = vextq_s8(v516, v516, 8uLL).u64[0];
            *(_QWORD *)&v519 = vextq_s8(_Q17, _Q17, 8uLL).u64[0];
            v1716.i64[0] = *(_QWORD *)&v513.f64[0];
            v1660 = *(double *)v512.i64;
            v1731.i64[0] = v512.i64[0];
            v1703 = v513.f64[0];
            v1721.i64[0] = *(_QWORD *)&v513.f64[0];
            v1699 = v513.f64[0];
            v1712.i64[0] = *(_QWORD *)&v513.f64[0];
            v1696 = v513.f64[0];
            v1706.i64[0] = *(_QWORD *)&v513.f64[0];
            v1691 = v513.f64[0];
            v1709.i64[0] = *(_QWORD *)&v513.f64[0];
            v1657.i64[0] = v512.i64[0];
            v1690 = *(double *)v512.i64;
            v1655.i64[0] = v512.i64[0];
            v1688 = v512.u64[0];
            v1658.i64[0] = v512.i64[0];
            v1689 = *(double *)v512.i64;
            v1656.i64[0] = v512.i64[0];
            v1687 = v512.u64[0];
            v1659.i64[0] = v512.i64[0];
            v1682 = *(double *)v512.i64;
            v1692 = v513.f64[0];
            v1694.i64[0] = *(_QWORD *)&_Q19.f64[0];
            v1683 = *(double *)v512.i64;
            v1684.i64[0] = v512.i64[0];
            v1681 = v512;
            v1685.i64[0] = v512.i64[0];
            v1676 = *(double *)v512.i64;
            v1686.i64[0] = v512.i64[0];
            v1675 = v512.u64[0];
            v1678.i64[0] = v512.i64[0];
            v1677 = *(double *)v512.i64;
            v1680.i64[0] = v512.i64[0];
            v1673 = v512.u64[0];
            v1679.i64[0] = v512.i64[0];
            v1674 = *(double *)v512.i64;
            v1670.i64[0] = v512.i64[0];
            v1669 = *(double *)v512.i64;
            v1672 = *(double *)v512.i64;
            v1666 = v512.u64[0];
            v1671.i64[0] = v512.i64[0];
            v1668 = *(double *)v512.i64;
            v1664.i64[0] = v512.i64[0];
            v1663 = *(double *)v512.i64;
            v1667 = *(double *)v512.i64;
            v1661 = v512.u64[0];
            v1665.i64[0] = v512.i64[0];
            v1662 = *(double *)v512.i64;
            if (v1842 | v1872)
            {
              *(double *)v1858.i64 = v519;
              v1862 = v1959;
              v1804 = v1960;
              v1809 = v518.f64[0];
              v1867 = v516.i64[0];
              v1907 = v517;
              v520 = 0;
              v521 = 0;
              v522 = (float64x2_t)vextq_s8((int8x16_t)v429, (int8x16_t)v429, 8uLL);
              _D31 = v1964;
              v524 = (float64x2_t)vdupq_laneq_s64((int64x2_t)_Q15, 1);
              v525 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&_Q13.f64[0], 0);
              v526 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1961, _Q15.f64[0]), v1963, _Q15, 1), v1965, _Q13.f64[0]);
              *(_QWORD *)&_D23 = vextq_s8((int8x16_t)_Q15, (int8x16_t)_Q15, 8uLL).u64[0];
              v528 = _Q15.f64[0];
              __asm { FMLA            D10, D31, V15.D[1] }
              _D17 = _Q13.f64[0];
              v531 = vmlad_n_f64(_D10, v1966, _Q13.f64[0]);
              v532 = (float64x2_t)vdupq_laneq_s64((int64x2_t)_Q14, 1);
              v533 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v451.f64[0], 0);
              v534 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1961, _Q14.f64[0]), v1963, _Q14, 1), v1965, v451.f64[0]);
              *(_QWORD *)&_D27 = vextq_s8((int8x16_t)_Q14, (int8x16_t)_Q14, 8uLL).u64[0];
              v536 = v451;
              v537 = _Q14.f64[0];
              __asm { FMLA            D15, D31, V14.D[1] }
              _Q14 = (int8x16_t)v1914;
              v1801 = (float64x2_t)vdupq_laneq_s64((int64x2_t)v1914, 1);
              v540 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v1884.f64[0], 0);
              _Q13 = v536;
              *(_QWORD *)&v541 = vextq_s8(_Q14, _Q14, 8uLL).u64[0];
              __asm { FMLA            D18, D31, V14.D[1] }
              v1919 = v526;
              *(double *)v1920 = v531;
              *(float64x2_t *)&v1920[32] = v534;
              *(_QWORD *)&v1920[48] = vmlad_n_f64(_D15, v1966, v536.f64[0]);
              v1922 = (int8x16_t)vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1961, v1914.f64[0]), v1963, v1914, 1), v1965, v1884.f64[0]);
              *(_QWORD *)v1923 = vmlad_n_f64(_D18, v1966, v1884.f64[0]);
              do
              {
                *(_QWORD *)&v1923[8 * v520 + 32] = 0;
                v543 = v521 < 2;
                if (v521 < 2)
                  ++v521;
                else
                  v521 = 0;
                if (v543)
                  ++v520;
                else
                  v520 += 4;
              }
              while (v520 != 18);
              v544.f64[0] = v438.f64[0];
              v544.f64[1] = v446;
              v449.f64[1] = v1881;
              v450.f64[1] = v1875;
              v545 = vnegq_f64(v544);
              _Q19 = vnegq_f64(v440);
              __asm
              {
                FMLS            D8, D23, V3.D[0]
                FMLS            D8, D17, V5.D[0]
                FMLS            D19, D27, V3.D[0]
                FMLS            D19, D13, V5.D[0]
              }
              v438.f64[1] = v446;
              *(float64x2_t *)&v1923[8] = vmlsq_lane_f64(vmulq_n_f64(vmlsq_f64(vmlsq_f64(vmulq_n_f64(v545, v528), v524, v449), v525, v450), v522.f64[0]), vmlsq_f64(vmlsq_f64(vmulq_n_f64(v545, v537), v532, v449), v533, v450), v429.f64[0], 0);
              *(_QWORD *)&v1923[24] = *(_OWORD *)&vmlsq_f64(vmulq_f64(v522, _Q8), v429, _Q19);
              v547 = (int8x16_t)vnegq_f64(*(float64x2_t *)&v1923[16]);
              *(double *)&v1924[24] = v440.f64[0] * v528 + _D3 * _D23 + _Q5.f64[0] * _D17;
              *(float64x2_t *)&v1924[8] = vmlaq_f64(vmlaq_f64(vmulq_n_f64(v438, v528), v524, v449), v525, v450);
              *(double *)&v1926[24] = v440.f64[0] * v537 + _D3 * _D27 + _Q5.f64[0] * v536.f64[0];
              *(float64x2_t *)&v1926[8] = vmlaq_f64(vmlaq_f64(vmulq_n_f64(v438, v537), v532, v449), v533, v450);
              *(double *)&v1928[24] = v440.f64[0] * v1914.f64[0] + _D3 * v541 + _Q5.f64[0] * v1884.f64[0];
              *(float64x2_t *)&v1928[8] = vmlaq_f64(vmlaq_f64(vmulq_n_f64(v438, v1914.f64[0]), v1801, v449), v540, v450);
              *(_QWORD *)&_Q29.f64[1] = v1925.i64[1];
              _Q21 = vnegq_f64(*(float64x2_t *)v1926);
              v516 = (int8x16_t)vnegq_f64(*(float64x2_t *)v1928);
              v1664 = (int8x16_t)vnegq_f64(v1927);
              v1665 = (int8x16_t)vnegq_f64(*(float64x2_t *)&v1928[16]);
              v1670 = (int8x16_t)vnegq_f64((float64x2_t)v1925);
              v1671 = (int8x16_t)vnegq_f64(*(float64x2_t *)&v1926[16]);
              v1678 = (int8x16_t)vnegq_f64(*(float64x2_t *)&v1923[32]);
              v1679 = (int8x16_t)vnegq_f64(*(float64x2_t *)&v1924[16]);
              _Q19 = (float64x2_t)vextq_s8(v1678, v1678, 8uLL);
              v1684 = (int8x16_t)vnegq_f64((float64x2_t)v1922);
              v1685 = (int8x16_t)vnegq_f64(*(float64x2_t *)v1923);
              v1680 = (int8x16_t)vnegq_f64(*(float64x2_t *)v1924);
              v1681 = vextq_s8(v1684, v1684, 8uLL);
              *(_QWORD *)&v1662 = vextq_s8(v1665, v1665, 8uLL).u64[0];
              *(_QWORD *)&v1663 = vextq_s8(v1664, v1664, 8uLL).u64[0];
              v1661 = vextq_s8(v516, v516, 8uLL).u64[0];
              *(_QWORD *)&v1668 = vextq_s8(v1671, v1671, 8uLL).u64[0];
              *(_QWORD *)&v1669 = vextq_s8(v1670, v1670, 8uLL).u64[0];
              v1666 = vextq_s8((int8x16_t)_Q21, (int8x16_t)_Q21, 8uLL).u64[0];
              v1667 = *(double *)v516.i64;
              *(_QWORD *)&v1674 = vextq_s8(v1679, v1679, 8uLL).u64[0];
              v1672 = _Q21.f64[0];
              v1673 = vextq_s8(v1680, v1680, 8uLL).u64[0];
              *(_QWORD *)&v1676 = vextq_s8(v1685, v1685, 8uLL).u64[0];
              v1677 = _Q19.f64[0];
              v1675 = vextq_s8(v547, v547, 8uLL).u64[0];
              v1656 = (int8x16_t)v1927;
              v1657 = v1925;
              v1686.i64[0] = v547.i64[0];
              v1687 = vextq_s8(v1656, v1656, 8uLL).u64[0];
              *(_QWORD *)&v1690 = vextq_s8(v1657, v1657, 8uLL).u64[0];
              v1712 = *(int8x16_t *)&v1923[32];
              v1716 = v1922;
              v1694 = *(int8x16_t *)&v1928[16];
              *(_QWORD *)&v1696 = vextq_s8(v1712, v1712, 8uLL).u64[0];
              v1659 = *(int8x16_t *)v1928;
              *(_QWORD *)&v1660 = vextq_s8(v1716, v1716, 8uLL).u64[0];
              *(_QWORD *)&v1683 = vextq_s8(v1694, v1694, 8uLL).u64[0];
              *(_QWORD *)&v1682 = vextq_s8(v1659, v1659, 8uLL).u64[0];
              v1658 = *(int8x16_t *)&v1926[16];
              *(_QWORD *)&v1689 = vextq_s8(v1658, v1658, 8uLL).u64[0];
              v1655 = *(int8x16_t *)v1926;
              v1688 = vextq_s8(v1655, v1655, 8uLL).u64[0];
              v1706 = *(int8x16_t *)v1924;
              v1709 = *(int8x16_t *)&v1924[16];
              *(_QWORD *)&v1691 = vextq_s8(v1706, v1706, 8uLL).u64[0];
              *(_QWORD *)&v1692 = vextq_s8(v1709, v1709, 8uLL).u64[0];
              v1731 = *(int8x16_t *)v1923;
              v1721 = *(int8x16_t *)&v1923[16];
              *(_QWORD *)&v1699 = vextq_s8(v1721, v1721, 8uLL).u64[0];
              *(_QWORD *)&v1703 = vextq_s8(v1731, v1731, 8uLL).u64[0];
              v517 = v1907;
              v516.i64[0] = v1867;
              v518.f64[0] = v1809;
              v514 = v1804;
              goto LABEL_186;
            }
          }
          else
          {
            v548 = vmlaq_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v418, v412.f64[0]), v419, v413.f64[0]), v420, v414.f64[0]), (float64x2_t)0, v421);
            v549 = vmlaq_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v422, v412.f64[0]), v423, v413.f64[0]), v424, v414.f64[0]), (float64x2_t)0, v425);
            v550 = vmlaq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(v418, v412, 1), v419, v413, 1), v420, v414, 1), (float64x2_t)0, v421);
            *(_QWORD *)&v551 = *(_OWORD *)&vmlaq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(v422, v412, 1), v423, v413, 1), v424, v414, 1), (float64x2_t)0, v425);
            v552 = vmlaq_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v418, *(double *)v416.i64), v419, *(double *)v1905.i64), v420, v417), (float64x2_t)0, v421);
            *(_QWORD *)&v553 = *(_OWORD *)&vmlaq_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v422, *(double *)v416.i64), v423, *(double *)v1905.i64), v424, v417), (float64x2_t)0, v425);
            _D9 = vmlad_n_f64(vmlad_n_f64(v396 * v549.f64[0], v406, v551), v415, v553);
            v1700 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v548, *(double *)v391.i64), v550, *(double *)v404.i64), v552, *(double *)v411.i64);
            v1704 = v548;
            v1717 = v550;
            v1722 = *(_QWORD *)&v549.f64[0];
            v1710 = v552;
            v1713 = *(_QWORD *)&v551;
            v1919 = v1700;
            *(_QWORD *)v1920 = vmlad_n_f64(vmlad_n_f64(*(double *)v391.i64 * v549.f64[0], *(double *)v404.i64, v551), *(double *)v411.i64, v553);
            *(float64x2_t *)&v1920[8] = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v548, v396), v550, v406), v552, v415);
            *(double *)&v1920[24] = _D9;
            v1693 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v548, v389.f64[0]), v550, v401), v552, v410);
            *(float64x2_t *)&v1920[32] = v1693;
            v1707 = *(_QWORD *)&v553;
            v1695 = vmlad_n_f64(vmlad_n_f64(vmulq_f64(v549, v389).f64[0], v401, v551), v410, v553);
            v1697 = *(float64x2_t *)&v1920[8];
            *(double *)&v1920[48] = v1695;
            v1960 = 0.0;
            v1959 = 0uLL;
            sub_20F20830C(&v1919, (double *)v1959.i64, v1961.f64);
            v555.f64[1] = v1730.f64[1];
            *(_QWORD *)&v555.f64[0] = *(_QWORD *)&v1771.f64[0] ^ 0x8000000000000000;
            v556.f64[1] = v413.f64[1];
            v557 = vmlaq_f64(vmlaq_f64(vmulq_f64((float64x2_t)vzip1q_s64((int64x2_t)v412, (int64x2_t)v413), (float64x2_t)vdupq_n_s64(*(_QWORD *)&v1771.f64[0] ^ 0x8000000000000000)), (float64x2_t)vdupq_n_s64(*(_QWORD *)&v1771.f64[1] ^ 0x8000000000000000), (float64x2_t)vzip2q_s64((int64x2_t)v412, (int64x2_t)v413)), (float64x2_t)vdupq_n_s64(*(_QWORD *)&v1730.f64[0] ^ 0x8000000000000000), (float64x2_t)vzip1q_s64(v416, v1905));
            _V3.D[1] = v414.f64[1];
            _Q1 = vmulq_f64(v414, v555);
            _D2 = *(_QWORD *)&v1771.f64[1] ^ 0x8000000000000000;
            __asm { FMLA            D1, D2, V3.D[1] }
            _Q1.f64[0] = vmlad_n_f64(_Q1.f64[0], COERCE_DOUBLE(*(_QWORD *)&v1730.f64[0] ^ 0x8000000000000000), v417);
            _Q27 = v418;
            _Q29 = v1874;
            v561 = vaddq_f64(v1874, vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v418, v557.f64[0]), v1888, v557, 1), v1914, _Q1.f64[0]));
            v566 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1899, v557.f64[0]), v1901, v557, 1), v1884, _Q1.f64[0]);
            _Q17 = vaddq_f64(v1880, v566);
            v563 = (float64x2_t)vextq_s8((int8x16_t)v561, (int8x16_t)v561, 8uLL);
            v564.f64[0] = v561.f64[0];
            v564.f64[1] = v563.f64[0];
            _Q1.f64[0] = sqrt(v561.f64[0] * v561.f64[0] + v563.f64[0] * v563.f64[0] + _Q17.f64[0] * _Q17.f64[0]);
            v566.f64[0] = 1.0 / _Q1.f64[0];
            if (_Q1.f64[0] == 0.0)
              v566.f64[0] = 1.0;
            v567 = vmulq_n_f64(v564, v566.f64[0]);
            v568 = vmulq_f64(v566, _Q17);
            *(_QWORD *)&v569.f64[0] = v1861.i64[0];
            v569.f64[1] = v1857;
            _Q1.f64[0] = v566.f64[0] * v561.f64[0] * *(double *)v1861.i64
                       + v566.f64[0] * v563.f64[0] * v1857
                       + v566.f64[0] * _Q17.f64[0] * v1866.f64[0];
            v556.f64[0] = 0.0;
            v570 = (int8x16_t)vcgtq_f64(v556, _Q1);
            *(_QWORD *)&v571 = vbslq_s8(v570, (int8x16_t)vnegq_f64(v1866), (int8x16_t)v1866).u64[0];
            _Q1 = (float64x2_t)vbslq_s8((int8x16_t)vdupq_lane_s64(v570.i64[0], 0), (int8x16_t)vnegq_f64(v569), (int8x16_t)v569);
            _Q6.f64[1] = v1693.f64[1];
            _Q5 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1700, _Q1.f64[0]), v1697, _Q1, 1), v1693, v571);
            __asm { FMLA            D6, D9, V1.D[1] }
            _Q6.f64[0] = vmlad_n_f64(_Q6.f64[0], v1695, v571);
            *(_QWORD *)&v573 = *(_OWORD *)&vsubq_f64(v568, _Q6);
            _Q21 = vsubq_f64(v567, _Q5);
            v518 = (float64x2_t)vextq_s8((int8x16_t)_Q21, (int8x16_t)_Q21, 8uLL);
            _Q5.f64[0] = v566.f64[0] * vmuld_n_f64(v567.f64[0], v567.f64[0]);
            v574 = v566.f64[0] * vmuld_lane_f64(v567.f64[1], v567, 1);
            v575 = v566.f64[0] * vmuld_n_f64(v568.f64[0], v568.f64[0]);
            _Q6.f64[0] = v574 + v575;
            v577 = v566.f64[0] * vmuld_lane_f64(-v567.f64[0], v567, 1);
            v578 = v566.f64[0] * (-v567.f64[0] * v568.f64[0]);
            v579 = _Q5.f64[0] + v575;
            v567.f64[0] = v566.f64[0] * (-v567.f64[1] * v568.f64[0]);
            _Q19.f64[0] = v578;
            _Q19.f64[1] = v577;
            *(_QWORD *)&v566.f64[0] = vextq_s8((int8x16_t)_Q19, (int8x16_t)_Q19, 8uLL).u64[0];
            *(double *)v580.i64 = v579;
            v580.i64[1] = *(_QWORD *)&v567.f64[0];
            v581.f64[0] = v578;
            v581.f64[1] = v567.f64[0];
            _Q3 = (float64x2_t)vextq_s8(v580, v580, 8uLL);
            *(_QWORD *)&v1802 = vextq_s8((int8x16_t)v581, (int8x16_t)v581, 8uLL).u64[0];
            _Q5.f64[0] = _Q5.f64[0] + v574;
            v584 = (int64x2_t)vnegq_f64(_Q21);
            v1799 = vnegq_f64((float64x2_t)*(unint64_t *)&v573);
            v1868 = *(_QWORD *)&_Q21.f64[0];
            v585 = (float64x2_t)vzip1q_s64(vdupq_laneq_s64(v584, 1), (int64x2_t)_Q21);
            v586 = vextq_s8((int8x16_t)v585, (int8x16_t)v585, 8uLL).u64[0];
            _Q9 = v1888;
            _Q13.f64[1] = v1704.f64[1];
            if (v1887)
            {
              v588 = 0;
              v589 = 0;
              *(_QWORD *)v1936 = v1962;
              v1935 = v1961;
              *(_QWORD *)v1938 = v1964;
              v1937 = v1963;
              *(double *)v1940 = v1966;
              v1939 = v1965;
              do
              {
                v1941.f64[v588] = 0.0;
                v590 = v589 < 2;
                if (v589 < 2)
                  ++v589;
                else
                  v589 = 0;
                if (v590)
                  ++v588;
                else
                  v588 += 4;
              }
              while (v588 != 18);
              *(_QWORD *)&v591 = 0;
              *((_QWORD *)&v591 + 1) = *(_QWORD *)&v1799.f64[0];
              *(_OWORD *)&v1936[8] = v591;
              *(float64_t *)&v1936[24] = v518.f64[0];
              *(_QWORD *)&v1938[24] = v584.i64[0];
              *(float64_t *)&v592 = v585.f64[0];
              *((_QWORD *)&v592 + 1) = v586;
              *(_OWORD *)&v1938[8] = *(unint64_t *)&v573;
              *(_OWORD *)&v1940[8] = v592;
              *(float64_t *)&v591 = _Q6.f64[0];
              *((double *)&v591 + 1) = v577;
              *(float64_t *)&v592 = v566.f64[0];
              *((double *)&v592 + 1) = v579;
              _Q21.f64[0] = v578;
              _Q21.f64[1] = v1802;
              *(_QWORD *)&v1940[24] = 0;
              *(double *)&v1942[24] = v578;
              *(_OWORD *)&v1942[8] = v591;
              *(float64_t *)&v1944[24] = _Q3.f64[0];
              *(_OWORD *)&v1944[8] = v592;
              *(float64_t *)&v1946[24] = _Q5.f64[0];
              *(float64x2_t *)&v1946[8] = _Q21;
            }
            v1908 = v573;
            v1776 = v579;
            if (v1785)
            {
              v1701 = v578;
              v1859 = v586;
              v1863 = (float64x2_t)v584;
              v1810 = v518;
              v593 = 0;
              v594 = 0;
              _D30 = v1964;
              _D8 = v1966;
              v597 = vnegq_f64(v1961);
              v598 = (float64x2_t)vdupq_laneq_s64((int64x2_t)v1704, 1);
              _D21 = v1722;
              v1772 = (float64x2_t)vdupq_lane_s64(v1722, 0);
              *(_QWORD *)&v1805 = vextq_s8((int8x16_t)v1704, (int8x16_t)v1704, 8uLL).u64[0];
              _D23 = v1704.f64[1];
              __asm
              {
                FMLS            D26, D23, V30.D[0]
                FMLS            D26, D21, V8.D[0]
              }
              v603 = (float64x2_t)vdupq_laneq_s64((int64x2_t)v1717, 1);
              _D10 = v1713;
              v605 = (float64x2_t)vdupq_lane_s64(v1713, 0);
              *(_QWORD *)&v1732 = vextq_s8((int8x16_t)v1717, (int8x16_t)v1717, 8uLL).u64[0];
              _D29 = v1717.f64[1];
              __asm
              {
                FMLS            D22, D29, V30.D[0]
                FMLS            D22, D10, V8.D[0]
              }
              _D12 = v1707;
              v610 = (float64x2_t)vdupq_laneq_s64((int64x2_t)v1710, 1);
              v611 = (float64x2_t)vdupq_lane_s64(v1707, 0);
              v612 = (float64x2_t)vextq_s8((int8x16_t)v1710, (int8x16_t)v1710, 8uLL);
              v1698 = v612.f64[0];
              _D11 = v1710.f64[1];
              __asm { FMLS            D0, D11, V30.D[0] }
              v1947 = vmlsq_lane_f64(vmlsq_laneq_f64(vmulq_n_f64(v597, v1704.f64[0]), v1963, v1704, 1), v1965, *(double *)&v1722, 0);
              *(_QWORD *)v1948 = _D26;
              v1949 = vmlsq_lane_f64(vmlsq_laneq_f64(vmulq_n_f64(v597, v1717.f64[0]), v1963, v1717, 1), v1965, *(double *)&v1713, 0);
              *(_QWORD *)v1950 = _D22;
              __asm { FMLS            D0, D12, V8.D[0] }
              v1951 = vmlsq_lane_f64(vmlsq_laneq_f64(vmulq_n_f64(v597, v1710.f64[0]), v1963, v1710, 1), v1965, *(double *)&v1707, 0);
              *(_QWORD *)v1952 = _D0;
              do
              {
                v1953.f64[v593] = 0.0;
                v616 = v594 < 2;
                if (v594 < 2)
                  ++v594;
                else
                  v594 = 0;
                if (v616)
                  ++v593;
                else
                  v593 += 4;
              }
              while (v593 != 18);
              v617.f64[0] = 0.0;
              v617.f64[1] = v1799.f64[0];
              v618 = vnegq_f64(v617);
              v612.f64[0] = 0.0;
              v619.f64[0] = v581.f64[0];
              v619.f64[1] = v1802;
              v620.f64[0] = v566.f64[0];
              *(_QWORD *)&v620.f64[1] = v580.i64[0];
              v617.f64[0] = _Q6.f64[0];
              v617.f64[1] = v577;
              v621 = vsubq_f64(v618, vmlsq_lane_f64(vmulq_n_f64(v620, _Q17.f64[0]), v619, v563.f64[0], 0));
              v622 = vsubq_f64(vnegq_f64((float64x2_t)*(unint64_t *)&v1908), vmlsq_lane_f64(vmulq_n_f64(v619, v561.f64[0]), v617, _Q17.f64[0], 0));
              v623 = vmlaq_f64(vmulq_n_f64(v621, v1704.f64[0]), v598, v622);
              v624 = vmlaq_f64(vmulq_n_f64(v621, v1717.f64[0]), v603, v622);
              v625 = vmlaq_f64(vmulq_n_f64(v621, v1710.f64[0]), v610, v622);
              v622.f64[0] = _Q6.f64[0];
              v622.f64[1] = v577;
              v626.f64[0] = v566.f64[0];
              *(_QWORD *)&v626.f64[1] = v580.i64[0];
              v627 = vnegq_f64(v622);
              v628 = vmlsq_f64(vmulq_n_f64(v627, v1704.f64[0]), v598, v626);
              v629 = vmlsq_f64(vmulq_n_f64(v627, v1717.f64[0]), v603, v626);
              v630 = vmlsq_f64(vmulq_n_f64(v627, v1710.f64[0]), v610, v626);
              v631 = vmlsq_lane_f64(vmulq_n_f64(v617, v563.f64[0]), v620, v561.f64[0], 0);
              v632 = vmlsq_f64(vmulq_f64(v561, _Q5), _Q17, _Q19);
              _Q17 = vmlsq_f64(vmulq_f64(_Q17, _Q3), v563, _Q5);
              v633 = vmlsq_f64(vmulq_f64(v563, _Q19), v561, _Q3);
              v634 = vsubq_f64(vnegq_f64(v1810), _Q17).f64[0];
              v584 = (int64x2_t)v1863;
              *(_QWORD *)&_Q17.f64[0] = *(_OWORD *)&vsubq_f64(vnegq_f64(v1863), v632);
              *(_QWORD *)&v633.f64[0] = *(_OWORD *)&vsubq_f64(vnegq_f64(v612), v633);
              v632.f64[0] = v585.f64[0];
              v586 = v1859;
              *(_QWORD *)&v632.f64[1] = v1859;
              _Q0 = vsubq_f64(vnegq_f64(v632), v631);
              v636 = vmlaq_f64(v623, v1772, _Q0);
              v637 = vmlaq_f64(v624, v605, _Q0);
              _Q18 = vmlaq_f64(v625, v611, _Q0);
              v639 = vmlsq_f64(v628, v1772, v619);
              v640 = vmlsq_f64(v629, v605, v619);
              _Q21 = vmlsq_f64(v630, v611, v619);
              v518 = v1810;
              _D27 = v1805;
              _Q0.f64[0] = vmlad_n_f64(v1704.f64[0] * v634, v1805, _Q17.f64[0]);
              v642 = v585.f64[0];
              v643 = v577;
              _D7 = v1732;
              v632.f64[0] = vmlad_n_f64(v1717.f64[0] * v634, v1732, _Q17.f64[0]);
              v645 = _Q19;
              v646 = v566.f64[0];
              v647 = _Q6.f64[0];
              _D6 = v1698;
              _D24 = v1722;
              _D29 = v1713;
              _D9 = v1707;
              v561.f64[0] = vmlad_n_f64(vmlad_n_f64(v1710.f64[0] * v634, v1698, _Q17.f64[0]), *(double *)&v1707, v633.f64[0]);
              *(float64x2_t *)&v1948[8] = v636;
              *(float64x2_t *)&v1950[8] = v637;
              *(_QWORD *)&v1948[24] = vmlad_n_f64(_Q0.f64[0], *(double *)&v1722, v633.f64[0]);
              *(_QWORD *)&v1950[24] = vmlad_n_f64(v632.f64[0], *(double *)&v1713, v633.f64[0]);
              *(float64x2_t *)&v1952[8] = _Q18;
              __asm
              {
                FMLS            D17, D27, V3.D[0]
                FMLS            D17, D24, V5.D[0]
                FMLS            D18, D7, V3.D[0]
              }
              v577 = v643;
              v585.f64[0] = v642;
              v578 = v1701;
              __asm
              {
                FMLS            D18, D29, V5.D[0]
                FMLS            D0, D6, V3.D[0]
              }
              _Q6.f64[0] = v647;
              v566.f64[0] = v646;
              _Q19 = v645;
              *(float64_t *)&v1952[24] = v561.f64[0];
              *(float64_t *)&v1954[24] = _Q17.f64[0];
              *(float64x2_t *)&v1954[8] = v639;
              *(float64_t *)&v1956[24] = _Q18.f64[0];
              *(float64x2_t *)&v1956[8] = v640;
              __asm { FMLS            D0, D9, V5.D[0] }
              *(float64_t *)&v1958[24] = _Q0.f64[0];
              *(float64x2_t *)&v1958[8] = _Q21;
              _Q27 = v1893;
              _Q29 = v1874;
              _Q9 = v1888;
            }
            v514 = v1960;
            v1862 = v1959;
            v1858 = vextq_s8(v1862, v1862, 8uLL);
            v1716.i64[0] = v1858.i64[0];
            v1660 = *(double *)v1858.i64;
            v1731.i64[0] = v1858.i64[0];
            v1703 = *(double *)v1858.i64;
            v1721.i64[0] = v1858.i64[0];
            v1699 = *(double *)v1858.i64;
            v1712.i64[0] = v1858.i64[0];
            v1696 = *(double *)v1858.i64;
            v1706.i64[0] = v1858.i64[0];
            v1691 = *(double *)v1858.i64;
            v1709.i64[0] = v1858.i64[0];
            v1692 = *(double *)v1858.i64;
            v1657.i64[0] = v1858.i64[0];
            v1690 = *(double *)v1858.i64;
            v1688 = v1858.u64[0];
            v1658.i64[0] = v1858.i64[0];
            v1689 = *(double *)v1858.i64;
            v1687 = v1858.u64[0];
            v1659.i64[0] = v1858.i64[0];
            v1682 = *(double *)v1858.i64;
            v1694.i64[0] = v1858.i64[0];
            v1683 = *(double *)v1858.i64;
            v1684.i64[0] = v1858.i64[0];
            v1681 = v1858;
            v1685.i64[0] = v1858.i64[0];
            v1676 = *(double *)v1858.i64;
            v1686.i64[0] = v1858.i64[0];
            v1675 = v1858.u64[0];
            v1678.i64[0] = v1858.i64[0];
            v1677 = *(double *)v1858.i64;
            v1680.i64[0] = v1858.i64[0];
            v1673 = v1858.u64[0];
            v1679.i64[0] = v1858.i64[0];
            v1674 = *(double *)v1858.i64;
            v1670.i64[0] = v1858.i64[0];
            v1669 = *(double *)v1858.i64;
            v1672 = *(double *)v1858.i64;
            v1666 = v1858.u64[0];
            v1671.i64[0] = v1858.i64[0];
            v1668 = *(double *)v1858.i64;
            v1664.i64[0] = v1858.i64[0];
            v1663 = *(double *)v1858.i64;
            v1667 = *(double *)v1858.i64;
            v1661 = v1858.u64[0];
            v1665.i64[0] = v1858.i64[0];
            v1662 = *(double *)v1858.i64;
            if (v1842 | v1872)
            {
              v652 = v586;
              v653 = (float64x2_t)v584;
              v1806 = v1960;
              v654 = v518;
              v655 = 0;
              v656 = 0;
              v657 = _Q29;
              v518 = (float64x2_t)vextq_s8((int8x16_t)_Q29, (int8x16_t)_Q29, 8uLL);
              _D30 = v1964;
              v1773 = (float64x2_t)vdupq_laneq_s64((int64x2_t)_Q27, 1);
              v1811 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v1899.f64[0], 0);
              v659 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1961, _Q27.f64[0]), v1963, _Q27, 1), v1965, v1899.f64[0]);
              *(_QWORD *)&v1733 = vextq_s8((int8x16_t)_Q27, (int8x16_t)_Q27, 8uLL).u64[0];
              __asm { FMLA            D20, D30, V27.D[1] }
              _Q13.f64[1] = v1901.f64[1];
              v1718 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v1901.f64[0], 0);
              v1723 = (float64x2_t)vdupq_laneq_s64((int64x2_t)_Q9, 1);
              v661 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1961, _Q9.f64[0]), v1963, _Q9, 1), v1965, v1901.f64[0]);
              *(_QWORD *)&v662 = vextq_s8((int8x16_t)_Q9, (int8x16_t)_Q9, 8uLL).u64[0];
              v663 = _Q9.f64[0];
              __asm { FMLA            D23, D30, V9.D[1] }
              _Q14 = (int8x16_t)v1914;
              v666 = (float64x2_t)vdupq_laneq_s64((int64x2_t)v1914, 1);
              v667 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v1884.f64[0], 0);
              *(_QWORD *)&v668 = vextq_s8(_Q14, _Q14, 8uLL).u64[0];
              __asm { FMLA            D0, D30, V14.D[1] }
              v1919 = v659;
              *(_QWORD *)v1920 = vmlad_n_f64(_D20, v1966, v1899.f64[0]);
              *(float64x2_t *)&v1920[32] = v661;
              *(_QWORD *)&v1920[48] = vmlad_n_f64(_D23, v1966, v1901.f64[0]);
              v1922 = (int8x16_t)vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1961, v1914.f64[0]), v1963, v1914, 1), v1965, v1884.f64[0]);
              *(_QWORD *)v1923 = vmlad_n_f64(_D0, v1966, v1884.f64[0]);
              do
              {
                *(_QWORD *)&v1923[8 * v655 + 32] = 0;
                v670 = v656 < 2;
                if (v656 < 2)
                  ++v656;
                else
                  v656 = 0;
                if (v670)
                  ++v655;
                else
                  v655 += 4;
              }
              while (v655 != 18);
              *(_QWORD *)&v585.f64[1] = v652;
              v671.f64[0] = v566.f64[0];
              *(_QWORD *)&v671.f64[1] = v580.i64[0];
              v672.f64[0] = v581.f64[0];
              v672.f64[1] = v1802;
              v673.f64[0] = _Q6.f64[0];
              v673.f64[1] = v577;
              v674 = vmlsq_lane_f64(vmulq_n_f64(v671, v1880.f64[0]), v672, v518.f64[0], 0);
              v675 = vmlsq_lane_f64(vmulq_n_f64(v672, v657.f64[0]), v673, v1880.f64[0], 0);
              v676 = vmlsq_f64(vmulq_f64(v657, _Q5), v1880, _Q19);
              v677 = vmlsq_f64(vmulq_f64(v1880, _Q3), v518, _Q5);
              v678 = vmlsq_lane_f64(vmulq_n_f64(v673, v518.f64[0]), v671, v657.f64[0], 0);
              v671.f64[0] = 0.0;
              v679.f64[1] = v1799.f64[1];
              v671.f64[1] = v1799.f64[0];
              v680 = vmlsq_f64(vmulq_f64(v518, _Q19), v657, _Q3);
              v679.f64[0] = 0.0;
              v518.f64[0] = v654.f64[0];
              _Q6.f64[1] = v577;
              v566.f64[1] = v1776;
              v581.f64[1] = v1802;
              *(float64x2_t *)&v1923[8] = vmlaq_f64(vmlaq_f64(vmulq_n_f64(vaddq_f64(v671, v674), v1914.f64[0]), v666, vaddq_f64((float64x2_t)*(unint64_t *)&v1908, v675)), v667, vaddq_f64(v585, v678));
              *(_QWORD *)&v1923[24] = vmlad_n_f64(vmlad_n_f64(v1914.f64[0] * vaddq_f64(v654, v677).f64[0], v668, vaddq_f64(v653, v676).f64[0]), v1884.f64[0], vaddq_f64(v679, v680).f64[0]);
              *(double *)&v1924[24] = v578 * v1893.f64[0] + _Q3.f64[0] * v1733 + _Q5.f64[0] * v1899.f64[0];
              *(float64x2_t *)&v1924[8] = vmlaq_f64(vmlaq_f64(vmulq_n_f64(_Q6, v1893.f64[0]), v1773, v566), v1811, v581);
              *(double *)&v1926[24] = v578 * v663 + _Q3.f64[0] * v662 + _Q5.f64[0] * v1901.f64[0];
              *(float64x2_t *)&v1926[8] = vmlaq_f64(vmlaq_f64(vmulq_n_f64(_Q6, v663), v1723, v566), v1718, v581);
              *(double *)&v1928[24] = v578 * v1914.f64[0] + _Q3.f64[0] * v668 + _Q5.f64[0] * v1884.f64[0];
              *(float64x2_t *)&v1928[8] = vmlaq_f64(vmlaq_f64(vmulq_n_f64(_Q6, v1914.f64[0]), v666, v566), v667, v581);
              _Q29.f64[1] = *(double *)&v1926[24];
              _Q19 = vnegq_f64(*(float64x2_t *)v1924);
              v681 = (int8x16_t)vnegq_f64(*(float64x2_t *)v1926);
              v682 = (int8x16_t)vnegq_f64(*(float64x2_t *)v1928);
              v1664 = (int8x16_t)vnegq_f64(v1927);
              v1665 = (int8x16_t)vnegq_f64(*(float64x2_t *)&v1928[16]);
              v1670 = (int8x16_t)vnegq_f64((float64x2_t)v1925);
              v1671 = (int8x16_t)vnegq_f64(*(float64x2_t *)&v1926[16]);
              v1678 = (int8x16_t)vnegq_f64(*(float64x2_t *)&v1923[32]);
              v1679 = (int8x16_t)vnegq_f64(*(float64x2_t *)&v1924[16]);
              *(_QWORD *)&v1677 = vextq_s8(v1678, v1678, 8uLL).u64[0];
              v1684 = (int8x16_t)vnegq_f64((float64x2_t)v1922);
              v1685 = (int8x16_t)vnegq_f64(*(float64x2_t *)v1923);
              v1680.i64[0] = *(_QWORD *)&_Q19.f64[0];
              v1681 = vextq_s8(v1684, v1684, 8uLL);
              *(_QWORD *)&v1662 = vextq_s8(v1665, v1665, 8uLL).u64[0];
              *(_QWORD *)&v1663 = vextq_s8(v1664, v1664, 8uLL).u64[0];
              v1661 = vextq_s8(v682, v682, 8uLL).u64[0];
              *(_QWORD *)&v1668 = vextq_s8(v1671, v1671, 8uLL).u64[0];
              *(_QWORD *)&v1669 = vextq_s8(v1670, v1670, 8uLL).u64[0];
              v1666 = vextq_s8(v681, v681, 8uLL).u64[0];
              v1667 = *(double *)v682.i64;
              _Q21 = (float64x2_t)vextq_s8(v1679, v1679, 8uLL);
              v1672 = *(double *)v681.i64;
              v1673 = vextq_s8((int8x16_t)_Q19, (int8x16_t)_Q19, 8uLL).u64[0];
              *(_QWORD *)&v1676 = vextq_s8(v1685, v1685, 8uLL).u64[0];
              v1686 = (int8x16_t)vnegq_f64(*(float64x2_t *)&v1923[16]);
              v1674 = _Q21.f64[0];
              v1675 = vextq_s8(v1686, v1686, 8uLL).u64[0];
              _Q17 = v1927;
              v1687 = vextq_s8((int8x16_t)_Q17, (int8x16_t)_Q17, 8uLL).u64[0];
              v1657 = v1925;
              v1658 = *(int8x16_t *)&v1926[16];
              v1712 = *(int8x16_t *)&v1923[32];
              v1716 = v1922;
              v1694 = *(int8x16_t *)&v1928[16];
              *(_QWORD *)&v1696 = vextq_s8(v1712, v1712, 8uLL).u64[0];
              v1659 = *(int8x16_t *)v1928;
              *(_QWORD *)&v1660 = vextq_s8(v1716, v1716, 8uLL).u64[0];
              *(_QWORD *)&v1683 = vextq_s8(v1694, v1694, 8uLL).u64[0];
              *(_QWORD *)&v1682 = vextq_s8(v1659, v1659, 8uLL).u64[0];
              *(_QWORD *)&v1689 = vextq_s8(v1658, v1658, 8uLL).u64[0];
              *(_QWORD *)&v1690 = vextq_s8(v1657, v1657, 8uLL).u64[0];
              v561 = *(float64x2_t *)v1926;
              v1688 = vextq_s8((int8x16_t)v561, (int8x16_t)v561, 8uLL).u64[0];
              v1706 = *(int8x16_t *)v1924;
              v1709 = *(int8x16_t *)&v1924[16];
              *(_QWORD *)&v1691 = vextq_s8(v1706, v1706, 8uLL).u64[0];
              *(_QWORD *)&v1692 = vextq_s8(v1709, v1709, 8uLL).u64[0];
              v1731 = *(int8x16_t *)v1923;
              v1721 = *(int8x16_t *)&v1923[16];
              *(_QWORD *)&v1699 = vextq_s8(v1721, v1721, 8uLL).u64[0];
              *(_QWORD *)&v1703 = vextq_s8(v1731, v1731, 8uLL).u64[0];
              v514 = v1806;
            }
            v1655.i64[0] = *(_QWORD *)&v561.f64[0];
            v1656.i64[0] = *(_QWORD *)&_Q17.f64[0];
            v517 = v1908;
            v516.i64[0] = v1868;
LABEL_186:
            _Q17 = v1862;
            v519 = *(double *)v1858.i64;
          }
          v683 = (float64x2_t *)(v320 + 560);
          _Q21.f64[0] = *(float64_t *)(v320 + 184);
          _Q29.f64[0] = *(float64_t *)(v320 + 264);
          v684 = *(float64x2_t *)(v320 + 248);
          v1876 = *(float64x2_t *)(v320 + 152);
          v1800 = *(float64x2_t *)(v320 + 192);
          v1803 = *(float64x2_t *)(v320 + 232);
          v1807 = *(float64x2_t *)(v320 + 272);
          v1860 = *(float64x2_t *)(v320 + 312);
          v1915 = *(float64x2_t *)(v320 + 352);
          v685 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v1876, *(double *)_Q17.i64), v1800, v519), v1803, v514), v1807, *(double *)v516.i64), v1860, v518.f64[0]), v1915, v517);
          v1777 = *(float64x2_t *)(v320 + 168);
          v1869 = *(float64x2_t *)(v320 + 208);
          v1812 = v684;
          v1864 = *(float64x2_t *)(v320 + 288);
          v1774 = *(float64x2_t *)(v320 + 328);
          v1902 = *(float64x2_t *)(v320 + 368);
          v686 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v1777, *(double *)_Q17.i64), v1869, v519), v684, v514), v1864, *(double *)v516.i64), v1774, v518.f64[0]), v1902, v517);
          _D12 = *(double *)(v320 + 224);
          *(double *)_Q17.i64 = _Q21.f64[0] * *(double *)_Q17.i64 + _D12 * v519;
          v1909 = _Q29;
          _D30 = *(double *)(v320 + 304);
          v1885 = *(double *)(v320 + 344);
          v689 = *(double *)(v320 + 384);
          *(double *)(v320 + 592) = *(double *)_Q17.i64
                                  + _Q29.f64[0] * v514
                                  + _D30 * *(double *)v516.i64
                                  + v1885 * v518.f64[0]
                                  + v689 * v517;
          *(float64x2_t *)(v320 + 560) = v685;
          *(float64x2_t *)(v320 + 576) = v686;
          v1894 = _Q21;
          v1889 = v689;
          if (*((_BYTE *)v321 + 20))
          {
            _V16.D[1] = *(_QWORD *)&v1948[8];
            _V17.D[1] = v1947.f64[1];
            _V13.D[1] = *(_QWORD *)&v1948[24];
            _V20.D[1] = v1949.f64[1];
            _V24.D[1] = *(_QWORD *)&v1950[24];
            _V11.D[1] = *(_QWORD *)&v1950[8];
            _V28.D[1] = *(_QWORD *)&v1952[8];
            _V15.D[1] = v1951.f64[1];
            _V22.D[1] = *(_QWORD *)&v1954[24];
            _V23.D[1] = *(_QWORD *)&v1954[8];
            _V29.D[1] = *(_QWORD *)&v1952[24];
            _V27.D[1] = v1953.f64[1];
            __asm { FMLA            D19, D12, V17.D[1] }
            _Q21.f64[1] = *(float64_t *)&v1956[8];
            _V12.D[1] = v1955.f64[1];
            __asm { FMLA            D19, D30, V16.D[1] }
            _V16.D[1] = *(_QWORD *)&v1958[24];
            _Q17 = *(int8x16_t *)v1958;
            _D1 = v689;
            __asm { FMLA            D19, D1, V13.D[1] }
            v1770 = _Q19;
            _V5.D[1] = *(_QWORD *)&v1956[24];
            _Q13.f64[1] = v1957.f64[1];
            _D1 = _D12;
            __asm { FMLA            D19, D1, V20.D[1] }
            _D1 = _D30;
            __asm { FMLA            D19, D1, V11.D[1] }
            _D1 = v689;
            __asm { FMLA            D19, D1, V24.D[1] }
            v1728 = _Q19;
            _Q19.f64[1] = v1894.f64[1];
            _D20 = _D12;
            __asm { FMLA            D19, D20, V15.D[1] }
            _D20 = _D30;
            __asm { FMLA            D19, D20, V28.D[1] }
            _D20 = v689;
            __asm { FMLA            D19, D20, V29.D[1] }
            v1729 = _Q19;
            _Q19.f64[1] = v1894.f64[1];
            _D28 = _D12;
            __asm { FMLA            D19, D28, V27.D[1] }
            _D27 = _D30;
            __asm { FMLA            D19, D27, V23.D[1] }
            _D23 = v1889;
            __asm { FMLA            D19, D23, V22.D[1] }
            v1749 = _Q19;
            v718 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1777, v1949.f64[0]), v1869, v1949, 1), v684, *(double *)v1950), v1864, *(float64x2_t *)v1950, 1), v1774, *(double *)&v1950[16]), v1902, *(float64x2_t *)&v1950[16], 1);
            v1768.i64[0] = *(_QWORD *)&v718.f64[1];
            v1750 = v718.f64[0];
            v1779 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1876, v1949.f64[0]), v1800, v1949, 1), v1803, *(double *)v1950), v1807, *(float64x2_t *)v1950, 1), v1860, *(double *)&v1950[16]), v1915, *(float64x2_t *)&v1950[16], 1);
            _D28 = _D30;
            v1725.i64[0] = *(_QWORD *)&v1779.f64[1];
            v1748 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1777, v1953.f64[0]), v1869, v1953, 1), v684, *(double *)v1954), v1864, *(float64x2_t *)v1954, 1), v1774, *(double *)&v1954[16]), v1902, *(float64x2_t *)&v1954[16], 1);
            v1746.i64[0] = *(_QWORD *)&v1748.f64[1];
            v1737 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1876, v1953.f64[0]), v1800, v1953, 1), v1803, *(double *)v1954), v1807, *(float64x2_t *)v1954, 1), v1860, *(double *)&v1954[16]), v1915, *(float64x2_t *)&v1954[16], 1);
            v1736.i64[0] = *(_QWORD *)&v1737.f64[1];
            _D6 = v1889;
            v1741 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1777, v1957.f64[0]), v1869, v1957, 1), v684, *(double *)v1958), v1864, *(float64x2_t *)v1958, 1), v1774, *(double *)&v1958[16]), v1902, *(float64x2_t *)&v1958[16], 1);
            v1767.i64[0] = *(_QWORD *)&v1741.f64[1];
            v1739 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1876, v1957.f64[0]), v1800, v1957, 1), v1803, *(double *)v1958), v1807, *(float64x2_t *)v1958, 1), v1860, *(double *)&v1958[16]), v1915, *(float64x2_t *)&v1958[16], 1);
            v1740.i64[0] = *(_QWORD *)&v1739.f64[1];
            _Q19 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1777, v1955.f64[0]), v1869, v1955, 1), v684, *(double *)v1956), v1864, *(float64x2_t *)v1956, 1), v1774, *(double *)&v1956[16]), v1902, *(float64x2_t *)&v1956[16], 1);
            _Q2.f64[1] = v1894.f64[1];
            v1747.i64[0] = *(_QWORD *)&_Q19.f64[0];
            *(_QWORD *)&v1738 = vextq_s8((int8x16_t)_Q19, (int8x16_t)_Q19, 8uLL).u64[0];
            _D3 = _D12;
            __asm { FMLA            D2, D3, V12.D[1] }
            v1743 = (int8x16_t)vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1876, v1955.f64[0]), v1800, v1955, 1), v1803, *(double *)v1956), v1807, *(float64x2_t *)v1956, 1), v1860, *(double *)&v1956[16]), v1915, *(float64x2_t *)&v1956[16], 1);
            __asm { FMLA            D2, D28, V21.D[1] }
            _Q21.f64[0] = v1894.f64[0];
            v1780 = (int8x16_t)vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1777, v1951.f64[0]), v1869, v1951, 1), v1812, *(double *)v1952), v1864, *(float64x2_t *)v1952, 1), v1774, *(double *)&v1952[16]), v1902, *(float64x2_t *)&v1952[16], 1);
            _Q1 = vextq_s8(v1780, v1780, 8uLL);
            v1726 = (int8x16_t)vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1876, v1947.f64[0]), v1800, v1947, 1), v1803, *(double *)v1948), v1807, *(float64x2_t *)v1948, 1), v1860, *(double *)&v1948[16]), v1915, *(float64x2_t *)&v1948[16], 1);
            v1727 = *(double *)_Q1.i64;
            __asm { FMLA            D2, D6, V5.D[1] }
            v1744 = _Q2;
            __asm { FMLA            D1, D4, V13.D[1] }
            v1742 = (int8x16_t)vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1876, v1951.f64[0]), v1800, v1951, 1), v1803, *(double *)v1952), v1807, *(float64x2_t *)v1952, 1), v1860, *(double *)&v1952[16]), v1915, *(float64x2_t *)&v1952[16], 1);
            *(_QWORD *)&v1734 = vextq_s8(v1742, v1742, 8uLL).u64[0];
            *(_QWORD *)&v1735 = vextq_s8(v1743, v1743, 8uLL).u64[0];
            v684 = v1909;
            __asm { FMLA            D1, D28, V17.D[1] }
            v1751 = (int8x16_t)vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1777, v1947.f64[0]), v1869, v1947, 1), v1812, *(double *)v1948), v1864, *(float64x2_t *)v1948, 1), v1774, *(double *)&v1948[16]), v1902, *(float64x2_t *)&v1948[16], 1);
            v1769 = vextq_s8(v1751, v1751, 8uLL);
            v689 = v1889;
            __asm { FMLA            D1, D6, V16.D[1] }
            v1745 = (float64x2_t)_Q1;
            *(_QWORD *)&v1724 = vextq_s8(v1726, v1726, 8uLL).u64[0];
          }
          if (*((_BYTE *)v322 + 20))
          {
            _V16.D[1] = *(_QWORD *)&v1936[8];
            _V17.D[1] = v1935.f64[1];
            _V20.D[1] = *(_QWORD *)&v1936[24];
            _V24.D[1] = v1937.f64[1];
            _V11.D[1] = *(_QWORD *)&v1938[24];
            _V19.D[1] = *(_QWORD *)&v1938[8];
            _V28.D[1] = *(_QWORD *)&v1940[8];
            _V15.D[1] = v1939.f64[1];
            _V22.D[1] = *(_QWORD *)&v1942[24];
            _V23.D[1] = *(_QWORD *)&v1942[8];
            _V29.D[1] = *(_QWORD *)&v1940[24];
            _V27.D[1] = v1941.f64[1];
            __asm { FMLA            D13, D12, V17.D[1] }
            _Q21.f64[1] = *(float64_t *)&v1944[8];
            _V12.D[1] = v1943.f64[1];
            _D1 = _D30;
            __asm { FMLA            D13, D1, V16.D[1] }
            _Q17 = *(int8x16_t *)v1946;
            _D0 = v1889;
            __asm { FMLA            D13, D0, V20.D[1] }
            v1846 = _Q13;
            _V16.D[1] = *(_QWORD *)&v1944[24];
            _V13.D[1] = v1945.f64[1];
            _Q20.f64[1] = v1894.f64[1];
            _D9 = _D12;
            __asm { FMLA            D20, D9, V24.D[1] }
            _D24 = _D30;
            __asm { FMLA            D20, D24, V19.D[1] }
            _D0 = v1889;
            __asm { FMLA            D20, D0, V11.D[1] }
            v1822 = _Q20;
            _Q19.f64[1] = v1894.f64[1];
            _D24 = _D12;
            __asm { FMLA            D19, D24, V15.D[1] }
            _D24 = _D30;
            __asm { FMLA            D19, D24, V28.D[1] }
            _D0 = v1889;
            __asm { FMLA            D19, D0, V29.D[1] }
            v1783 = _Q19;
            _D2 = _D12;
            __asm { FMLA            D19, D2, V27.D[1] }
            _D2 = _D30;
            __asm { FMLA            D19, D2, V23.D[1] }
            _D0 = v1889;
            __asm { FMLA            D19, D0, V22.D[1] }
            v1766 = _Q19;
            _Q19 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1876, v1943.f64[0]), v1800, v1943, 1), v1803, *(double *)v1944), v1807, *(float64x2_t *)v1944, 1), v1860, *(double *)&v1944[16]), v1915, *(float64x2_t *)&v1944[16], 1);
            v758 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1777, v1937.f64[0]), v1869, v1937, 1), v1812, *(double *)v1938), v1864, *(float64x2_t *)v1938, 1), v1774, *(double *)&v1938[16]), v1902, *(float64x2_t *)&v1938[16], 1);
            v1818.i64[0] = *(_QWORD *)&v758.f64[1];
            v1820 = v758.f64[0];
            v1755 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1876, v1937.f64[0]), v1800, v1937, 1), v1803, *(double *)v1938), v1807, *(float64x2_t *)v1938, 1), v1860, *(double *)&v1938[16]), v1915, *(float64x2_t *)&v1938[16], 1);
            v1754.i64[0] = *(_QWORD *)&v1755.f64[1];
            v1819 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1777, v1941.f64[0]), v1869, v1941, 1), v1812, *(double *)v1942), v1864, *(float64x2_t *)v1942, 1), v1774, *(double *)&v1942[16]), v1902, *(float64x2_t *)&v1942[16], 1);
            v1817.i64[0] = *(_QWORD *)&v1819.f64[1];
            _D24 = v1889;
            v1757 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1876, v1941.f64[0]), v1800, v1941, 1), v1803, *(double *)v1942), v1807, *(float64x2_t *)v1942, 1), v1860, *(double *)&v1942[16]), v1915, *(float64x2_t *)&v1942[16], 1);
            v1756.i64[0] = *(_QWORD *)&v1757.f64[1];
            v1760 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1777, v1945.f64[0]), v1869, v1945, 1), v1812, *(double *)v1946), v1864, *(float64x2_t *)v1946, 1), v1774, *(double *)&v1946[16]), v1902, *(float64x2_t *)&v1946[16], 1);
            v1765.i64[0] = *(_QWORD *)&v1760.f64[1];
            _V5.D[1] = *(_QWORD *)&v1946[24];
            _D0 = _D30;
            v1759 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1876, v1945.f64[0]), v1800, v1945, 1), v1803, *(double *)v1946), v1807, *(float64x2_t *)v1946, 1), v1860, *(double *)&v1946[16]), v1915, *(float64x2_t *)&v1946[16], 1);
            v1781.i64[0] = *(_QWORD *)&v1759.f64[1];
            _Q1.f64[1] = v1894.f64[1];
            v1782 = (int8x16_t)vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1777, v1943.f64[0]), v1869, v1943, 1), v1812, *(double *)v1944), v1864, *(float64x2_t *)v1944, 1), v1774, *(double *)&v1944[16]), v1902, *(float64x2_t *)&v1944[16], 1);
            *(_QWORD *)&v1758 = vextq_s8(v1782, v1782, 8uLL).u64[0];
            _D2 = _D12;
            __asm { FMLA            D1, D2, V12.D[1] }
            v1816.i64[0] = *(_QWORD *)&_Q19.f64[0];
            *(_QWORD *)&v1814 = vextq_s8((int8x16_t)_Q19, (int8x16_t)_Q19, 8uLL).u64[0];
            __asm { FMLA            D1, D0, V21.D[1] }
            _Q21.f64[0] = v1894.f64[0];
            v1821 = (int8x16_t)vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1777, v1939.f64[0]), v1869, v1939, 1), v1812, *(double *)v1940), v1864, *(float64x2_t *)v1940, 1), v1774, *(double *)&v1940[16]), v1902, *(float64x2_t *)&v1940[16], 1);
            *(_QWORD *)&v1815 = vextq_s8(v1821, v1821, 8uLL).u64[0];
            __asm { FMLA            D1, D24, V16.D[1] }
            v1763 = _Q1;
            __asm { FMLA            D1, D3, V13.D[1] }
            v1762 = (int8x16_t)vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1876, v1939.f64[0]), v1800, v1939, 1), v1803, *(double *)v1940), v1807, *(float64x2_t *)v1940, 1), v1860, *(double *)&v1940[16]), v1915, *(float64x2_t *)&v1940[16], 1);
            *(_QWORD *)&v1753 = vextq_s8(v1762, v1762, 8uLL).u64[0];
            v684 = v1909;
            __asm { FMLA            D1, D0, V17.D[1] }
            v1784 = (int8x16_t)vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1777, v1935.f64[0]), v1869, v1935, 1), v1812, *(double *)v1936), v1864, *(float64x2_t *)v1936, 1), v1774, *(double *)&v1936[16]), v1902, *(float64x2_t *)&v1936[16], 1);
            v1845 = vextq_s8(v1784, v1784, 8uLL);
            v689 = v1889;
            __asm { FMLA            D1, D24, V5.D[1] }
            v1764 = _Q1;
            v1761 = (int8x16_t)vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1876, v1935.f64[0]), v1800, v1935, 1), v1803, *(double *)v1936), v1807, *(float64x2_t *)v1936, 1), v1860, *(double *)&v1936[16]), v1915, *(float64x2_t *)&v1936[16], 1);
            *(_QWORD *)&v1752 = vextq_s8(v1761, v1761, 8uLL).u64[0];
          }
          LODWORD(v684.f64[0]) = 0;
          v1653 = (int8x16_t)v684;
          v766.i64[0] = *(_QWORD *)&v1855.f64[0];
          *(double *)&v766.i64[1] = v1789;
          v767.i64[0] = v1853.i64[0];
          v767.i64[1] = *(_QWORD *)&v1790.f64[0];
          _Q17.i8[0] = *((_BYTE *)v324 + 20);
          v768 = vdupq_lane_s8((int8x8_t)*(_OWORD *)&vceqq_s8(_Q17, (int8x16_t)v684), 0);
          _Q19.f64[0] = _Q21.f64[0] * *(double *)v1670.i64
                      + _D12 * v1669
                      + v1909.f64[0] * v1672
                      + _D30 * *(double *)&v1666
                      + v1885 * *(double *)v1671.i64
                      + v689 * v1668;
          v769 = (int8x16_t)vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v1876, *(double *)v1664.i64), v1800, v1663), v1803, v1667), v1807, *(double *)&v1661), v1860, *(double *)v1665.i64), v1915, v1662);
          v1855 = (float64x2_t)vbslq_s8(v768, v766, (int8x16_t)vzip1q_s64((int64x2_t)_Q19, (int64x2_t)v769));
          v770 = (int8x16_t)vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v1777, *(double *)v1664.i64), v1869, v1663), v1812, v1667), v1864, *(double *)&v1661), v1774, *(double *)v1665.i64), v1902, v1662);
          v771 = vextq_s8(v769, v770, 8uLL);
          v1853 = vbslq_s8(v768, v767, v771);
          *(double *)v771.i64 = _Q21.f64[0] * *(double *)v1664.i64
                              + _D12 * v1663
                              + v1909.f64[0] * v1667
                              + _D30 * *(double *)&v1661
                              + v1885 * *(double *)v1665.i64
                              + v689 * v1662;
          v772 = vextq_s8(v770, v771, 8uLL);
          v771.i64[0] = v1854.i64[0];
          v771.i64[1] = *(_QWORD *)&v1797.f64[0];
          v1854 = vbslq_s8(v768, v771, v772);
          v771.i64[0] = v1851.i64[0];
          *(double *)&v771.i64[1] = v1792;
          v1851 = vbslq_s8(v768, v771, (int8x16_t)vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v1876, *(double *)v1670.i64), v1800, v1669), v1803, v1672), v1807, *(double *)&v1666), v1860, *(double *)v1671.i64), v1915, v1668));
          v773 = (int8x16_t)vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v1777, *(double *)v1670.i64), v1869, v1669), v1812, v1672), v1864, *(double *)&v1666), v1774, *(double *)v1671.i64), v1902, v1668);
          v774.i64[0] = v1850.i64[0];
          *(double *)&v774.i64[1] = v1795;
          v1850 = vbslq_s8(v768, v774, v773);
          v774.i64[0] = *(_QWORD *)&v1856.f64[0];
          *(double *)&v774.i64[1] = v1791;
          v775 = v1681;
          *(double *)v773.i64 = _Q21.f64[0] * *(double *)v1684.i64
                              + _D12 * *(double *)v1681.i64
                              + v1909.f64[0] * *(double *)v1685.i64
                              + _D30 * v1676
                              + v1885 * *(double *)v1686.i64
                              + v689 * *(double *)&v1675;
          v776 = (int8x16_t)vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v1876, *(double *)v1678.i64), v1800, v1677), v1803, *(double *)v1680.i64), v1807, *(double *)&v1673), v1860, *(double *)v1679.i64), v1915, v1674);
          v1856 = (float64x2_t)vbslq_s8(v768, v774, (int8x16_t)vzip1q_s64((int64x2_t)v773, (int64x2_t)v776));
          v773.i64[0] = v1849.i64[0];
          *(double *)&v773.i64[1] = v1793;
          v777 = v773;
          v778 = (int8x16_t)vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v1777, *(double *)v1678.i64), v1869, v1677), v1812, *(double *)v1680.i64), v1864, *(double *)&v1673), v1774, *(double *)v1679.i64), v1902, v1674);
          v779 = vextq_s8(v776, v778, 8uLL);
          v1849 = vbslq_s8(v768, v777, v779);
          *(double *)v779.i64 = _Q21.f64[0] * *(double *)v1678.i64
                              + _D12 * v1677
                              + v1909.f64[0] * *(double *)v1680.i64
                              + _D30 * *(double *)&v1673
                              + v1885 * *(double *)v1679.i64
                              + v689 * v1674;
          v780.i64[0] = v1852.i64[0];
          v780.i64[1] = *(_QWORD *)&v1798.f64[0];
          v1852 = vbslq_s8(v768, v780, vextq_s8(v778, v779, 8uLL));
          v777.i64[0] = v1848.i64[0];
          *(double *)&v777.i64[1] = v1794;
          v1848 = vbslq_s8(v768, v777, (int8x16_t)vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v1876, *(double *)v1684.i64), v1800, *(double *)v1681.i64), v1803, *(double *)v1685.i64), v1807, v1676), v1860, *(double *)v1686.i64), v1915, *(double *)&v1675));
          v774.i64[0] = v1847.i64[0];
          v774.i64[1] = v1796.i64[0];
          v1847 = vbslq_s8(v768, v774, (int8x16_t)vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v1777, *(double *)v1684.i64), v1869, *(double *)v1681.i64), v1812, *(double *)v1685.i64), v1864, v1676), v1774, *(double *)v1686.i64), v1902, *(double *)&v1675));
          v775.i8[0] = *((_BYTE *)v323 + 20);
          v774.i64[0] = *(_QWORD *)&v1873.f64[0];
          *(double *)&v774.i64[1] = v1823;
          v781 = vdupq_lane_s8((int8x8_t)*(_OWORD *)&vceqq_s8(v775, v1653), 0);
          v782.i64[1] = *(_QWORD *)&v1894.f64[1];
          *(double *)v775.i64 = v1894.f64[0] * *(double *)v1657.i64
                              + _D12 * v1690
                              + v1909.f64[0] * *(double *)v1655.i64
                              + _D30 * *(double *)&v1688
                              + v1885 * *(double *)v1658.i64
                              + v689 * v1689;
          v783 = (int8x16_t)vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v1876, *(double *)v1656.i64), v1800, *(double *)&v1687), v1803, *(double *)v1659.i64), v1807, v1682), v1860, *(double *)v1694.i64), v1915, v1683);
          v1873 = (float64x2_t)vbslq_s8(v781, v774, (int8x16_t)vzip1q_s64((int64x2_t)v775, (int64x2_t)v783));
          v784.i64[0] = v1833.i64[0];
          v784.i64[1] = *(_QWORD *)&v1825.f64[0];
          v785 = (int8x16_t)vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v1777, *(double *)v1656.i64), v1869, *(double *)&v1687), v1812, *(double *)v1659.i64), v1864, v1682), v1774, *(double *)v1694.i64), v1902, v1683);
          v786 = vextq_s8(v783, v785, 8uLL);
          v787 = vbslq_s8(v781, v784, v786);
          *(double *)v786.i64 = v1894.f64[0] * *(double *)v1656.i64
                              + _D12 * *(double *)&v1687
                              + v1909.f64[0] * *(double *)v1659.i64
                              + _D30 * v1682
                              + v1885 * *(double *)v1694.i64
                              + v689 * v1683;
          v788.i64[0] = v1840.i64[0];
          v788.i64[1] = *(_QWORD *)&v1836.f64[0];
          v789 = vbslq_s8(v781, v788, vextq_s8(v785, v786, 8uLL));
          v790.i64[0] = v1830.i64[0];
          *(double *)&v790.i64[1] = v1831;
          v791.i64[0] = v1829.i64[0];
          *(double *)&v791.i64[1] = v1832;
          v792 = (int8x16_t)vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v1777, *(double *)v1657.i64), v1869, v1690), v1812, *(double *)v1655.i64), v1864, *(double *)&v1688), v1774, *(double *)v1658.i64), v1902, v1689);
          v793 = vbslq_s8(v781, v791, v792);
          v779.i64[0] = *(_QWORD *)&v1841.f64[0];
          *(double *)&v779.i64[1] = v1824;
          *(double *)v792.i64 = v1894.f64[0] * *(double *)v1716.i64
                              + _D12 * v1660
                              + v1909.f64[0] * *(double *)v1731.i64
                              + _D30 * v1703
                              + v1885 * *(double *)v1721.i64
                              + v689 * v1699;
          v794 = (int8x16_t)vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v1876, *(double *)v1712.i64), v1800, v1696), v1803, *(double *)v1706.i64), v1807, v1691), v1860, *(double *)v1709.i64), v1915, v1692);
          v795 = vbslq_s8(v781, v779, (int8x16_t)vzip1q_s64((int64x2_t)v792, (int64x2_t)v794));
          v796.i64[0] = v1837.i64[0];
          *(double *)&v796.i64[1] = v1826;
          v1796 = vextq_s8(v1847, v1847, 8uLL);
          *(_QWORD *)&v1794 = vextq_s8(v1848, v1848, 8uLL).u64[0];
          v1798 = (float64x2_t)vextq_s8(v1852, v1852, 8uLL);
          *(_QWORD *)&v1793 = vextq_s8(v1849, v1849, 8uLL).u64[0];
          *(_QWORD *)&v1791 = vextq_s8((int8x16_t)v1856, (int8x16_t)v1856, 8uLL).u64[0];
          *(double *)v782.i64 = v1894.f64[0] * *(double *)v1712.i64
                              + _D12 * v1696
                              + v1909.f64[0] * *(double *)v1706.i64
                              + _D30 * v1691
                              + v1885 * *(double *)v1709.i64
                              + v1889 * v1692;
          *(_QWORD *)&v1795 = vextq_s8(v1850, v1850, 8uLL).u64[0];
          v797 = (int8x16_t)vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v1777, *(double *)v1712.i64), v1869, v1696), v1812, *(double *)v1706.i64), v1864, v1691), v1774, *(double *)v1709.i64), v1902, v1692);
          *(_QWORD *)&v1792 = vextq_s8(v1851, v1851, 8uLL).u64[0];
          v1797 = (float64x2_t)vextq_s8(v1854, v1854, 8uLL);
          *(_QWORD *)&v1790.f64[0] = vextq_s8(v1853, v1853, 8uLL).u64[0];
          v767.i64[0] = v1838.i64[0];
          v767.i64[1] = *(_QWORD *)&v1839.f64[0];
          *(_QWORD *)&v1789 = vextq_s8((int8x16_t)v1855, (int8x16_t)v1855, 8uLL).u64[0];
          v777.i64[0] = v1828.i64[0];
          *(double *)&v777.i64[1] = v1834;
          v780.i64[0] = v1827.i64[0];
          v780.i64[1] = v1835.i64[0];
          v1827 = vbslq_s8(v781, v780, (int8x16_t)vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v1777, *(double *)v1716.i64), v1869, v1660), v1812, *(double *)v1731.i64), v1864, v1703), v1774, *(double *)v1721.i64), v1902, v1699));
          v1835 = vextq_s8(v1827, v1827, 8uLL);
          v1828 = vbslq_s8(v781, v777, (int8x16_t)vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v1876, *(double *)v1716.i64), v1800, v1660), v1803, *(double *)v1731.i64), v1807, v1703), v1860, *(double *)v1721.i64), v1915, v1699));
          *(_QWORD *)&v1834 = vextq_s8(v1828, v1828, 8uLL).u64[0];
          v1838 = vbslq_s8(v781, v767, vextq_s8(v797, v782, 8uLL));
          v1839 = (float64x2_t)vextq_s8(v1838, v1838, 8uLL);
          v1837 = vbslq_s8(v781, v796, vextq_s8(v794, v797, 8uLL));
          *(_QWORD *)&v1826 = vextq_s8(v1837, v1837, 8uLL).u64[0];
          v1841 = (float64x2_t)v795;
          *(_QWORD *)&v1824 = vextq_s8(v795, v795, 8uLL).u64[0];
          v1829.i64[0] = v793.i64[0];
          *(_QWORD *)&v1832 = vextq_s8(v793, v793, 8uLL).u64[0];
          v1830 = vbslq_s8(v781, v790, (int8x16_t)vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v1876, *(double *)v1657.i64), v1800, v1690), v1803, *(double *)v1655.i64), v1807, *(double *)&v1688), v1860, *(double *)v1658.i64), v1915, v1689));
          *(_QWORD *)&v1831 = vextq_s8(v1830, v1830, 8uLL).u64[0];
          v1840.i64[0] = v789.i64[0];
          v1836 = (float64x2_t)vextq_s8(v789, v789, 8uLL);
          *(_BYTE *)(v320 + 608) = 1;
          v1833.i64[0] = v787.i64[0];
          *(_QWORD *)&v1825.f64[0] = vextq_s8(v787, v787, 8uLL).u64[0];
          v798 = *(_QWORD *)(v320 + 616);
          *(_QWORD *)&v1823 = vextq_s8((int8x16_t)v1873, (int8x16_t)v1873, 8uLL).u64[0];
          if (!v798)
            goto LABEL_225;
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v798 + 24))(v798, v320 + 560);
          v799 = *(_QWORD *)(v320 + 616);
          v800 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v799 + 16))(v799);
          v801 = v800;
          if (*(_BYTE *)(*(_QWORD *)(v320 + 488) + 20))
          {
            switch(v800)
            {
              case 0:
                v802 = *(double *)(v799 + 48);
                v803 = *(float64x2_t *)(v799 + 16);
                v804 = *(float64x2_t *)(v799 + 32);
                v805 = *(double *)(v799 + 88);
                v806 = *(float64x2_t *)(v799 + 72);
                v807 = *(float64x2_t *)(v799 + 56);
                v808 = vmlaq_n_f64(vmulq_n_f64(v803, *(double *)v1726.i64), v807, v1724);
                v809 = vmlaq_n_f64(vmulq_n_f64(v804, *(double *)v1726.i64), v806, v1724);
                v810 = v802 * *(double *)v1726.i64 + v805 * v1724;
                v811 = vmlaq_n_f64(vmulq_n_f64(v803, v1779.f64[0]), v807, *(double *)v1725.i64);
                v812 = vmlaq_n_f64(vmulq_n_f64(v804, v1779.f64[0]), v806, *(double *)v1725.i64);
                v813 = v802 * v1779.f64[0] + v805 * *(double *)v1725.i64;
                v814 = vmlaq_n_f64(vmulq_n_f64(v803, *(double *)v1742.i64), v807, v1734);
                v815 = vmlaq_n_f64(vmulq_n_f64(v804, *(double *)v1742.i64), v806, v1734);
                v816 = v802 * *(double *)v1742.i64 + v805 * v1734;
                v817 = vmlaq_n_f64(vmulq_n_f64(v803, v1737.f64[0]), v807, *(double *)v1736.i64);
                v818 = vmlaq_n_f64(vmulq_n_f64(v804, v1737.f64[0]), v806, *(double *)v1736.i64);
                v819 = v802 * v1737.f64[0] + v805 * *(double *)v1736.i64;
                v820 = vmlaq_n_f64(vmulq_n_f64(v803, *(double *)v1743.i64), v807, v1735);
                v821 = vmlaq_n_f64(vmulq_n_f64(v804, *(double *)v1743.i64), v806, v1735);
                v822 = v802 * *(double *)v1743.i64 + v805 * v1735;
                v823 = vmlaq_n_f64(vmulq_n_f64(v803, v1739.f64[0]), v807, *(double *)v1740.i64);
                v824 = vmlaq_n_f64(vmulq_n_f64(v804, v1739.f64[0]), v806, *(double *)v1740.i64);
                v825 = v802 * v1739.f64[0] + v805 * *(double *)v1740.i64;
                v827 = *(float64x2_t *)(v799 + 96);
                v826 = *(float64x2_t *)(v799 + 112);
                v828 = *(double *)(v799 + 128);
                v829 = *(float64x2_t *)(v799 + 136);
                v830 = *(float64x2_t *)(v799 + 152);
                v831 = *(double *)(v799 + 168);
                v832 = v810 + v828 * *(double *)v1751.i64 + v831 * *(double *)v1769.i64;
                v833 = *(float64x2_t *)(v799 + 176);
                v834 = *(float64x2_t *)(v799 + 192);
                v835 = v1770;
                v836 = (int8x16_t)vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(v808, v827, *(double *)v1751.i64), v829, *(double *)v1769.i64), v833, v1770.f64[0]);
                v837 = (int8x16_t)vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(v809, v826, *(double *)v1751.i64), v830, *(double *)v1769.i64), v834, v1770.f64[0]);
                v838 = *(double *)(v799 + 208);
                break;
              case 1:
                *(_QWORD *)&v839.f64[0] = v1726.i64[0];
                v839.f64[1] = v1724;
                *(_QWORD *)&v840.f64[0] = v1751.i64[0];
                *(_QWORD *)&v841.f64[1] = v1769.i64[1];
                *(_QWORD *)&v840.f64[1] = v1769.i64[0];
                v841.f64[0] = *(float64_t *)(v799 + 48);
                v842 = *(float64x2_t *)(v799 + 16);
                v843 = *(float64x2_t *)(v799 + 32);
                v844 = (int8x16_t)vmulq_f64(v840, v843);
                v845 = (int8x16_t)vmulq_f64(v839, v842);
                v846.f64[0] = v1779.f64[0];
                *(_QWORD *)&v846.f64[1] = v1725.i64[0];
                v847.f64[0] = v1750;
                *(_QWORD *)&v847.f64[1] = v1768.i64[0];
                v848 = (int8x16_t)vmulq_f64(v842, v846);
                v849 = vmulq_f64(v843, v847);
                v850 = (int8x16_t)vzip1q_s64(vdupq_laneq_s64((int64x2_t)v849, 1), (int64x2_t)vmulq_f64(v841, v1728));
                v851 = vextq_s8(v848, (int8x16_t)v849, 8uLL);
                v852 = (int8x16_t)vzip1q_s64((int64x2_t)vmulq_f64(v1770, v841), (int64x2_t)v848);
                *(_QWORD *)&v853.f64[0] = v1742.i64[0];
                v853.f64[1] = v1734;
                *(_QWORD *)&v849.f64[0] = v1780.i64[0];
                v849.f64[1] = v1727;
                v854 = (int8x16_t)vmulq_f64(v843, v849);
                v855 = (int8x16_t)vmulq_f64(v842, v853);
                v856.f64[0] = v1737.f64[0];
                *(_QWORD *)&v856.f64[1] = v1736.i64[0];
                v857.f64[0] = v1748.f64[0];
                *(_QWORD *)&v857.f64[1] = v1746.i64[0];
                v1749 = vmulq_f64(v841, v1749);
                v858 = (int64x2_t)vmulq_f64(v842, v856);
                v1736.i64[0] = v858.i64[1];
                v859 = vmulq_f64(v843, v857);
                v1746.i64[0] = *(_QWORD *)&v859.f64[1];
                v1748.f64[0] = v859.f64[0];
                *(_QWORD *)&v860.f64[0] = v1743.i64[0];
                v860.f64[1] = v1735;
                *(_QWORD *)&v857.f64[0] = v1747.i64[0];
                v857.f64[1] = v1738;
                v861 = (int8x16_t)vmulq_f64(v843, v857);
                v862 = (int8x16_t)vmulq_f64(v842, v860);
                v863.f64[0] = v1739.f64[0];
                *(_QWORD *)&v863.f64[1] = v1740.i64[0];
                v864.f64[0] = v1741.f64[0];
                *(_QWORD *)&v864.f64[1] = v1767.i64[0];
                v865 = (int8x16_t)vmulq_f64(v842, v863);
                v866 = (int8x16_t)vmulq_f64(v843, v864);
                v1745 = vmulq_f64(v841, v1745);
                v1767.i64[0] = v866.i64[1];
                v1770 = (float64x2_t)v852;
                *(_QWORD *)&v1779.f64[0] = vextq_s8(v852, v852, 8uLL).u64[0];
                v1725.i64[0] = v851.i64[0];
                v1726.i64[0] = v845.i64[0];
                *(_QWORD *)&v1750 = vextq_s8(v851, v851, 8uLL).u64[0];
                v1768.i64[0] = v850.i64[0];
                v1728 = (float64x2_t)vextq_s8(v850, v850, 8uLL);
                v1729 = (float64x2_t)vzip1q_s64((int64x2_t)vmulq_f64(v841, v1729), v858);
                *(_QWORD *)&v1737.f64[0] = vextq_s8((int8x16_t)v1729, (int8x16_t)v1729, 8uLL).u64[0];
                v1744 = (float64x2_t)vzip1q_s64((int64x2_t)vmulq_f64(v841, v1744), (int64x2_t)v865);
                *(_QWORD *)&v1739.f64[0] = vextq_s8((int8x16_t)v1744, (int8x16_t)v1744, 8uLL).u64[0];
                v1740 = vextq_s8(v865, v866, 8uLL);
                *(_QWORD *)&v1741.f64[0] = vextq_s8(v1740, v1740, 8uLL).u64[0];
                *(_QWORD *)&v1724 = vextq_s8(v845, v845, 8uLL).u64[0];
                v1751.i64[0] = v844.i64[0];
                v1769 = vextq_s8(v844, v844, 8uLL);
                v1742.i64[0] = v855.i64[0];
                v1780.i64[0] = v854.i64[0];
                *(_QWORD *)&v1727 = vextq_s8(v854, v854, 8uLL).u64[0];
                v1743.i64[0] = v862.i64[0];
                *(_QWORD *)&v1734 = vextq_s8(v855, v855, 8uLL).u64[0];
                *(_QWORD *)&v1735 = vextq_s8(v862, v862, 8uLL).u64[0];
                v1747.i64[0] = v861.i64[0];
                *(_QWORD *)&v1738 = vextq_s8(v861, v861, 8uLL).u64[0];
                if (!*(_BYTE *)(*(_QWORD *)(v320 + 496) + 20))
                  goto LABEL_207;
                goto LABEL_199;
              case 2:
                *(_QWORD *)&v867.f64[0] = v1726.i64[0];
                v867.f64[1] = v1724;
                v868 = *(double *)(v799 + 16);
                v1726 = (int8x16_t)vmulq_n_f64(v867, v868);
                *(_QWORD *)&v867.f64[0] = v1751.i64[0];
                *(_QWORD *)&v867.f64[1] = v1769.i64[0];
                v1751 = (int8x16_t)vmulq_n_f64(v867, v868);
                v1769 = vextq_s8(v1751, v1751, 8uLL);
                v867.f64[0] = v1770.f64[0];
                v867.f64[1] = v1779.f64[0];
                v1770 = vmulq_n_f64(v867, v868);
                *(_QWORD *)&v1779.f64[0] = vextq_s8((int8x16_t)v1770, (int8x16_t)v1770, 8uLL).u64[0];
                *(_QWORD *)&v869.f64[0] = v1725.i64[0];
                v869.f64[1] = v1750;
                *(_QWORD *)&v1724 = vextq_s8(v1726, v1726, 8uLL).u64[0];
                v1725 = (int8x16_t)vmulq_n_f64(v869, v868);
                *(_QWORD *)&v1750 = vextq_s8(v1725, v1725, 8uLL).u64[0];
                *(_QWORD *)&v869.f64[0] = v1768.i64[0];
                v869.f64[1] = v1728.f64[0];
                v1768 = (int8x16_t)vmulq_n_f64(v869, v868);
                *(_QWORD *)&v867.f64[0] = v1742.i64[0];
                v867.f64[1] = v1734;
                v1742 = (int8x16_t)vmulq_n_f64(v867, v868);
                *(_QWORD *)&v1734 = vextq_s8(v1742, v1742, 8uLL).u64[0];
                *(_QWORD *)&v867.f64[0] = v1780.i64[0];
                v867.f64[1] = v1727;
                v1780 = (int8x16_t)vmulq_n_f64(v867, v868);
                *(_QWORD *)&v1727 = vextq_s8(v1780, v1780, 8uLL).u64[0];
                v1728 = (float64x2_t)vextq_s8(v1768, v1768, 8uLL);
                v867.f64[0] = v1729.f64[0];
                v867.f64[1] = v1737.f64[0];
                v1729 = vmulq_n_f64(v867, v868);
                *(_QWORD *)&v1737.f64[0] = vextq_s8((int8x16_t)v1729, (int8x16_t)v1729, 8uLL).u64[0];
                *(_QWORD *)&v869.f64[0] = v1736.i64[0];
                v869.f64[1] = v1748.f64[0];
                v1736 = (int8x16_t)vmulq_n_f64(v869, v868);
                *(_QWORD *)&v1748.f64[0] = vextq_s8(v1736, v1736, 8uLL).u64[0];
                *(_QWORD *)&v869.f64[0] = v1746.i64[0];
                v869.f64[1] = v1749.f64[0];
                v1746 = (int8x16_t)vmulq_n_f64(v869, v868);
                v1749 = (float64x2_t)vextq_s8(v1746, v1746, 8uLL);
                *(_QWORD *)&v867.f64[0] = v1743.i64[0];
                v867.f64[1] = v1735;
                v1743 = (int8x16_t)vmulq_n_f64(v867, v868);
                *(_QWORD *)&v1735 = vextq_s8(v1743, v1743, 8uLL).u64[0];
                *(_QWORD *)&v867.f64[0] = v1747.i64[0];
                v867.f64[1] = v1738;
                v1747 = (int8x16_t)vmulq_n_f64(v867, v868);
                *(_QWORD *)&v1738 = vextq_s8(v1747, v1747, 8uLL).u64[0];
                v867.f64[0] = v1744.f64[0];
                v867.f64[1] = v1739.f64[0];
                v1744 = vmulq_n_f64(v867, v868);
                *(_QWORD *)&v1739.f64[0] = vextq_s8((int8x16_t)v1744, (int8x16_t)v1744, 8uLL).u64[0];
                *(_QWORD *)&v869.f64[0] = v1740.i64[0];
                v869.f64[1] = v1741.f64[0];
                v1740 = (int8x16_t)vmulq_n_f64(v869, v868);
                *(_QWORD *)&v1741.f64[0] = vextq_s8(v1740, v1740, 8uLL).u64[0];
                *(_QWORD *)&v867.f64[0] = v1767.i64[0];
                v867.f64[1] = v1745.f64[0];
                v1767 = (int8x16_t)vmulq_n_f64(v867, v868);
                v1745 = (float64x2_t)vextq_s8(v1767, v1767, 8uLL);
                goto LABEL_198;
              case 4:
                (*(void (**)(float64x2_t *__return_ptr, uint64_t))(*(_QWORD *)v799 + 56))(&v1919, v799);
                v811 = vmlaq_n_f64(vmulq_n_f64(v1919, v1779.f64[0]), *(float64x2_t *)&v1920[24], *(double *)v1725.i64);
                v812 = vmlaq_n_f64(vmulq_n_f64(*(float64x2_t *)v1920, v1779.f64[0]), *(float64x2_t *)&v1920[40], *(double *)v1725.i64);
                v813 = *(double *)&v1920[16] * v1779.f64[0] + *(double *)&v1920[56] * *(double *)v1725.i64;
                v814 = vmlaq_n_f64(vmulq_n_f64(v1919, *(double *)v1742.i64), *(float64x2_t *)&v1920[24], v1734);
                v815 = vmlaq_n_f64(vmulq_n_f64(*(float64x2_t *)v1920, *(double *)v1742.i64), *(float64x2_t *)&v1920[40], v1734);
                v816 = *(double *)&v1920[16] * *(double *)v1742.i64 + *(double *)&v1920[56] * v1734;
                v817 = vmlaq_n_f64(vmulq_n_f64(v1919, v1737.f64[0]), *(float64x2_t *)&v1920[24], *(double *)v1736.i64);
                v818 = vmlaq_n_f64(vmulq_n_f64(*(float64x2_t *)v1920, v1737.f64[0]), *(float64x2_t *)&v1920[40], *(double *)v1736.i64);
                v819 = *(double *)&v1920[16] * v1737.f64[0] + *(double *)&v1920[56] * *(double *)v1736.i64;
                v820 = vmlaq_n_f64(vmulq_n_f64(v1919, *(double *)v1743.i64), *(float64x2_t *)&v1920[24], v1735);
                v821 = vmlaq_n_f64(vmulq_n_f64(*(float64x2_t *)v1920, *(double *)v1743.i64), *(float64x2_t *)&v1920[40], v1735);
                v822 = *(double *)&v1920[16] * *(double *)v1743.i64 + *(double *)&v1920[56] * v1735;
                v823 = vmlaq_n_f64(vmulq_n_f64(v1919, v1739.f64[0]), *(float64x2_t *)&v1920[24], *(double *)v1740.i64);
                v824 = vmlaq_n_f64(vmulq_n_f64(*(float64x2_t *)v1920, v1739.f64[0]), *(float64x2_t *)&v1920[40], *(double *)v1740.i64);
                v825 = *(double *)&v1920[16] * v1739.f64[0] + *(double *)&v1920[56] * *(double *)v1740.i64;
                v826 = (float64x2_t)v1922;
                v827 = (float64x2_t)v1921;
                v828 = *(double *)v1923;
                v829 = *(float64x2_t *)&v1923[8];
                v830 = *(float64x2_t *)&v1923[24];
                v831 = *(double *)&v1923[40];
                v832 = *(double *)&v1920[16] * *(double *)v1726.i64
                     + *(double *)&v1920[56] * v1724
                     + *(double *)v1923 * *(double *)v1751.i64
                     + *(double *)&v1923[40] * *(double *)v1769.i64;
                v833 = *(float64x2_t *)v1924;
                v835 = v1770;
                v836 = (int8x16_t)vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v1919, *(double *)v1726.i64), *(float64x2_t *)&v1920[24], v1724), (float64x2_t)v1921, *(double *)v1751.i64), *(float64x2_t *)&v1923[8], *(double *)v1769.i64), *(float64x2_t *)v1924, v1770.f64[0]);
                v834 = *(float64x2_t *)&v1924[16];
                v837 = (int8x16_t)vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(*(float64x2_t *)v1920, *(double *)v1726.i64), *(float64x2_t *)&v1920[40], v1724), (float64x2_t)v1922, *(double *)v1751.i64), *(float64x2_t *)&v1923[24], *(double *)v1769.i64), *(float64x2_t *)&v1924[16], v1770.f64[0]);
                v838 = *(double *)v1925.i64;
                break;
              default:
                goto LABEL_198;
            }
            v835.f64[0] = v832 + v838 * v835.f64[0];
            v1770 = v835;
            v907.f64[1] = v1728.f64[1];
            v908 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(v811, v827, v1750), v829, *(double *)v1768.i64), v833, v1728.f64[0]);
            v909 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(v812, v826, v1750), v830, *(double *)v1768.i64), v834, v1728.f64[0]);
            v907.f64[0] = v813 + v828 * v1750 + v831 * *(double *)v1768.i64 + v838 * v1728.f64[0];
            v1728 = v907;
            v910 = vmlaq_n_f64(vmlaq_n_f64(v814, v827, *(double *)v1780.i64), v829, v1727);
            v911 = vmlaq_n_f64(vmlaq_n_f64(v815, v826, *(double *)v1780.i64), v830, v1727);
            v912 = vmlaq_n_f64(vmlaq_n_f64(v817, v827, v1748.f64[0]), v829, *(double *)v1746.i64);
            v907.f64[0] = v819 + v828 * v1748.f64[0] + v831 * *(double *)v1746.i64;
            v913 = vmlaq_n_f64(vmlaq_n_f64(v820, v827, *(double *)v1747.i64), v829, v1738);
            v914 = vmlaq_n_f64(vmlaq_n_f64(v821, v826, *(double *)v1747.i64), v830, v1738);
            v915 = vmlaq_n_f64(vmlaq_n_f64(v823, v827, v1741.f64[0]), v829, *(double *)v1767.i64);
            v916.f64[1] = v1749.f64[1];
            v917 = vmlaq_n_f64(v912, v833, v1749.f64[0]);
            v918 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(v818, v826, v1748.f64[0]), v830, *(double *)v1746.i64), v834, v1749.f64[0]);
            v919 = v825 + v828 * v1741.f64[0] + v831 * *(double *)v1767.i64;
            v1768.i64[0] = *(_QWORD *)&v909.f64[1];
            v1725.i64[0] = *(_QWORD *)&v908.f64[1];
            v1746.i64[0] = *(_QWORD *)&v918.f64[1];
            v1736.i64[0] = *(_QWORD *)&v917.f64[1];
            v920.f64[1] = v1745.f64[1];
            v921 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(v824, v826, v1741.f64[0]), v830, *(double *)v1767.i64), v834, v1745.f64[0]);
            v1767.i64[0] = *(_QWORD *)&v921.f64[1];
            v922.f64[1] = v1729.f64[1];
            v923 = (int8x16_t)vmlaq_n_f64(v910, v833, v1729.f64[0]);
            v924 = (int8x16_t)vmlaq_n_f64(v911, v834, v1729.f64[0]);
            v922.f64[0] = v816 + v828 * *(double *)v1780.i64 + v831 * v1727 + v838 * v1729.f64[0];
            v1729 = v922;
            v925 = vmlaq_n_f64(v915, v833, v1745.f64[0]);
            v1740.i64[0] = *(_QWORD *)&v925.f64[1];
            v916.f64[0] = v907.f64[0] + v838 * v1749.f64[0];
            v1749 = v916;
            v1769 = vextq_s8(v837, v837, 8uLL);
            v922.f64[1] = v1744.f64[1];
            v926 = (int8x16_t)vmlaq_n_f64(v913, v833, v1744.f64[0]);
            *(_QWORD *)&v1724 = vextq_s8(v836, v836, 8uLL).u64[0];
            v927 = (int8x16_t)vmlaq_n_f64(v914, v834, v1744.f64[0]);
            v922.f64[0] = v822 + v828 * *(double *)v1747.i64 + v831 * v1738 + v838 * v1744.f64[0];
            v1744 = v922;
            v1726.i64[0] = v836.i64[0];
            *(_QWORD *)&v1727 = vextq_s8(v924, v924, 8uLL).u64[0];
            v1751.i64[0] = v837.i64[0];
            v1779.f64[0] = v908.f64[0];
            v1750 = v909.f64[0];
            v920.f64[0] = v919 + v838 * v1745.f64[0];
            v1745 = v920;
            *(_QWORD *)&v1738 = vextq_s8(v927, v927, 8uLL).u64[0];
            v1742.i64[0] = v923.i64[0];
            v1780.i64[0] = v924.i64[0];
            v1737.f64[0] = v917.f64[0];
            v1748.f64[0] = v918.f64[0];
            *(_QWORD *)&v1734 = vextq_s8(v923, v923, 8uLL).u64[0];
            *(_QWORD *)&v1735 = vextq_s8(v926, v926, 8uLL).u64[0];
            v1743.i64[0] = v926.i64[0];
            v1747.i64[0] = v927.i64[0];
            v1739.f64[0] = v925.f64[0];
            v1741.f64[0] = v921.f64[0];
            if (!*(_BYTE *)(*(_QWORD *)(v320 + 496) + 20))
            {
LABEL_207:
              if (*(_BYTE *)(*(_QWORD *)(v320 + 504) + 20))
                goto LABEL_208;
LABEL_216:
              if (*(_BYTE *)(*(_QWORD *)(v320 + 512) + 20))
                goto LABEL_217;
LABEL_225:
              v1019 = v1898;
              goto LABEL_226;
            }
          }
          else
          {
LABEL_198:
            if (!*(_BYTE *)(*(_QWORD *)(v320 + 496) + 20))
              goto LABEL_207;
          }
LABEL_199:
          switch(v801)
          {
            case 0:
              v870 = *(double *)(v799 + 48);
              v871 = *(float64x2_t *)(v799 + 16);
              v872 = *(float64x2_t *)(v799 + 32);
              v873 = *(double *)(v799 + 88);
              v874 = *(float64x2_t *)(v799 + 72);
              v875 = *(float64x2_t *)(v799 + 56);
              v876 = vmlaq_n_f64(vmulq_n_f64(v871, *(double *)v1761.i64), v875, v1752);
              v877 = vmlaq_n_f64(vmulq_n_f64(v872, *(double *)v1761.i64), v874, v1752);
              v878 = v870 * *(double *)v1761.i64 + v873 * v1752;
              v879 = vmlaq_n_f64(vmulq_n_f64(v871, v1755.f64[0]), v875, *(double *)v1754.i64);
              v880 = vmlaq_n_f64(vmulq_n_f64(v872, v1755.f64[0]), v874, *(double *)v1754.i64);
              v881 = v870 * v1755.f64[0] + v873 * *(double *)v1754.i64;
              v882 = vmlaq_n_f64(vmulq_n_f64(v871, *(double *)v1762.i64), v875, v1753);
              v883 = vmlaq_n_f64(vmulq_n_f64(v872, *(double *)v1762.i64), v874, v1753);
              v884 = v870 * *(double *)v1762.i64 + v873 * v1753;
              v885 = vmlaq_n_f64(vmulq_n_f64(v871, v1757.f64[0]), v875, *(double *)v1756.i64);
              v886 = vmlaq_n_f64(vmulq_n_f64(v872, v1757.f64[0]), v874, *(double *)v1756.i64);
              v887 = v870 * v1757.f64[0] + v873 * *(double *)v1756.i64;
              v888 = vmlaq_n_f64(vmulq_n_f64(v871, *(double *)v1816.i64), v875, v1814);
              v889 = vmlaq_n_f64(vmulq_n_f64(v872, *(double *)v1816.i64), v874, v1814);
              v890 = v870 * *(double *)v1816.i64 + v873 * v1814;
              v891 = vmlaq_n_f64(vmulq_n_f64(v871, v1759.f64[0]), v875, *(double *)v1781.i64);
              v892 = vmlaq_n_f64(vmulq_n_f64(v872, v1759.f64[0]), v874, *(double *)v1781.i64);
              v893 = v870 * v1759.f64[0] + v873 * *(double *)v1781.i64;
              v895 = *(float64x2_t *)(v799 + 96);
              v894 = *(float64x2_t *)(v799 + 112);
              v896 = *(double *)(v799 + 128);
              v897 = *(float64x2_t *)(v799 + 136);
              v898 = *(float64x2_t *)(v799 + 152);
              v899 = *(double *)(v799 + 168);
              v900 = v878 + v896 * *(double *)v1784.i64 + v899 * *(double *)v1845.i64;
              v901 = *(float64x2_t *)(v799 + 176);
              v902 = *(float64x2_t *)(v799 + 192);
              v903 = v1846;
              v904 = (int8x16_t)vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(v876, v895, *(double *)v1784.i64), v897, *(double *)v1845.i64), v901, v1846.f64[0]);
              v905 = (int8x16_t)vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(v877, v894, *(double *)v1784.i64), v898, *(double *)v1845.i64), v902, v1846.f64[0]);
              v906 = *(double *)(v799 + 208);
              break;
            case 1:
              *(_QWORD *)&v928.f64[0] = v1761.i64[0];
              v928.f64[1] = v1752;
              *(_QWORD *)&v929.f64[0] = v1784.i64[0];
              *(_QWORD *)&v930.f64[1] = v1845.i64[1];
              *(_QWORD *)&v929.f64[1] = v1845.i64[0];
              v930.f64[0] = *(float64_t *)(v799 + 48);
              v931 = *(float64x2_t *)(v799 + 16);
              v932 = *(float64x2_t *)(v799 + 32);
              v933 = (int8x16_t)vmulq_f64(v929, v932);
              v934 = (int8x16_t)vmulq_f64(v928, v931);
              v935.f64[0] = v1755.f64[0];
              *(_QWORD *)&v935.f64[1] = v1754.i64[0];
              v936.f64[0] = v1820;
              *(_QWORD *)&v936.f64[1] = v1818.i64[0];
              v937 = (int8x16_t)vmulq_f64(v931, v935);
              v938 = vmulq_f64(v932, v936);
              v939 = (int8x16_t)vzip1q_s64(vdupq_laneq_s64((int64x2_t)v938, 1), (int64x2_t)vmulq_f64(v930, v1822));
              v940 = vextq_s8(v937, (int8x16_t)v938, 8uLL);
              v941 = (int8x16_t)vzip1q_s64((int64x2_t)vmulq_f64(v1846, v930), (int64x2_t)v937);
              *(_QWORD *)&v942.f64[0] = v1762.i64[0];
              v942.f64[1] = v1753;
              *(_QWORD *)&v938.f64[0] = v1821.i64[0];
              v938.f64[1] = v1815;
              v943 = (int8x16_t)vmulq_f64(v932, v938);
              v944 = (int8x16_t)vmulq_f64(v931, v942);
              v945.f64[0] = v1757.f64[0];
              *(_QWORD *)&v945.f64[1] = v1756.i64[0];
              v946.f64[0] = v1819.f64[0];
              *(_QWORD *)&v946.f64[1] = v1817.i64[0];
              v1766 = vmulq_f64(v930, v1766);
              v947 = (int64x2_t)vmulq_f64(v931, v945);
              v1756.i64[0] = v947.i64[1];
              v948 = vmulq_f64(v932, v946);
              v1817.i64[0] = *(_QWORD *)&v948.f64[1];
              v1819.f64[0] = v948.f64[0];
              *(_QWORD *)&v949.f64[0] = v1816.i64[0];
              v949.f64[1] = v1814;
              *(_QWORD *)&v946.f64[0] = v1782.i64[0];
              v946.f64[1] = v1758;
              v950 = (int8x16_t)vmulq_f64(v932, v946);
              v951 = (int8x16_t)vmulq_f64(v931, v949);
              v952.f64[0] = v1759.f64[0];
              *(_QWORD *)&v952.f64[1] = v1781.i64[0];
              v953.f64[0] = v1760.f64[0];
              *(_QWORD *)&v953.f64[1] = v1765.i64[0];
              v954 = (int8x16_t)vmulq_f64(v931, v952);
              v955 = (int8x16_t)vmulq_f64(v932, v953);
              v1764 = vmulq_f64(v930, v1764);
              v1765.i64[0] = v955.i64[1];
              v1846 = (float64x2_t)v941;
              *(_QWORD *)&v1755.f64[0] = vextq_s8(v941, v941, 8uLL).u64[0];
              v1754.i64[0] = v940.i64[0];
              *(_QWORD *)&v1820 = vextq_s8(v940, v940, 8uLL).u64[0];
              v1818.i64[0] = v939.i64[0];
              v1822 = (float64x2_t)vextq_s8(v939, v939, 8uLL);
              v1783 = (float64x2_t)vzip1q_s64((int64x2_t)vmulq_f64(v930, v1783), v947);
              *(_QWORD *)&v1757.f64[0] = vextq_s8((int8x16_t)v1783, (int8x16_t)v1783, 8uLL).u64[0];
              v1763 = (float64x2_t)vzip1q_s64((int64x2_t)vmulq_f64(v930, v1763), (int64x2_t)v954);
              *(_QWORD *)&v1759.f64[0] = vextq_s8((int8x16_t)v1763, (int8x16_t)v1763, 8uLL).u64[0];
              v1781 = vextq_s8(v954, v955, 8uLL);
              *(_QWORD *)&v1760.f64[0] = vextq_s8(v1781, v1781, 8uLL).u64[0];
              v1761.i64[0] = v934.i64[0];
              *(_QWORD *)&v1752 = vextq_s8(v934, v934, 8uLL).u64[0];
              v1784.i64[0] = v933.i64[0];
              v1845 = vextq_s8(v933, v933, 8uLL);
              v1762.i64[0] = v944.i64[0];
              *(_QWORD *)&v1753 = vextq_s8(v944, v944, 8uLL).u64[0];
              v1821.i64[0] = v943.i64[0];
              *(_QWORD *)&v1815 = vextq_s8(v943, v943, 8uLL).u64[0];
              v1816.i64[0] = v951.i64[0];
              *(_QWORD *)&v1814 = vextq_s8(v951, v951, 8uLL).u64[0];
              v1782.i64[0] = v950.i64[0];
              *(_QWORD *)&v1758 = vextq_s8(v950, v950, 8uLL).u64[0];
              if (!*(_BYTE *)(*(_QWORD *)(v320 + 504) + 20))
                goto LABEL_216;
              goto LABEL_208;
            case 2:
              *(_QWORD *)&v956.f64[0] = v1761.i64[0];
              v956.f64[1] = v1752;
              v957 = *(double *)(v799 + 16);
              v1761 = (int8x16_t)vmulq_n_f64(v956, v957);
              *(_QWORD *)&v1752 = vextq_s8(v1761, v1761, 8uLL).u64[0];
              *(_QWORD *)&v956.f64[0] = v1784.i64[0];
              *(_QWORD *)&v956.f64[1] = v1845.i64[0];
              v1784 = (int8x16_t)vmulq_n_f64(v956, v957);
              v1845 = vextq_s8(v1784, v1784, 8uLL);
              v956.f64[0] = v1846.f64[0];
              v956.f64[1] = v1755.f64[0];
              v1846 = vmulq_n_f64(v956, v957);
              *(_QWORD *)&v1755.f64[0] = vextq_s8((int8x16_t)v1846, (int8x16_t)v1846, 8uLL).u64[0];
              *(_QWORD *)&v958.f64[0] = v1754.i64[0];
              v958.f64[1] = v1820;
              v1754 = (int8x16_t)vmulq_n_f64(v958, v957);
              *(_QWORD *)&v1820 = vextq_s8(v1754, v1754, 8uLL).u64[0];
              *(_QWORD *)&v958.f64[0] = v1818.i64[0];
              v958.f64[1] = v1822.f64[0];
              v1818 = (int8x16_t)vmulq_n_f64(v958, v957);
              v1822 = (float64x2_t)vextq_s8(v1818, v1818, 8uLL);
              *(_QWORD *)&v956.f64[0] = v1762.i64[0];
              v956.f64[1] = v1753;
              v1762 = (int8x16_t)vmulq_n_f64(v956, v957);
              *(_QWORD *)&v1753 = vextq_s8(v1762, v1762, 8uLL).u64[0];
              *(_QWORD *)&v956.f64[0] = v1821.i64[0];
              v956.f64[1] = v1815;
              v1821 = (int8x16_t)vmulq_n_f64(v956, v957);
              *(_QWORD *)&v1815 = vextq_s8(v1821, v1821, 8uLL).u64[0];
              v956.f64[0] = v1783.f64[0];
              v956.f64[1] = v1757.f64[0];
              v1783 = vmulq_n_f64(v956, v957);
              *(_QWORD *)&v1757.f64[0] = vextq_s8((int8x16_t)v1783, (int8x16_t)v1783, 8uLL).u64[0];
              *(_QWORD *)&v958.f64[0] = v1756.i64[0];
              v958.f64[1] = v1819.f64[0];
              v1756 = (int8x16_t)vmulq_n_f64(v958, v957);
              *(_QWORD *)&v1819.f64[0] = vextq_s8(v1756, v1756, 8uLL).u64[0];
              *(_QWORD *)&v958.f64[0] = v1817.i64[0];
              v958.f64[1] = v1766.f64[0];
              v1817 = (int8x16_t)vmulq_n_f64(v958, v957);
              v1766 = (float64x2_t)vextq_s8(v1817, v1817, 8uLL);
              *(_QWORD *)&v956.f64[0] = v1816.i64[0];
              v956.f64[1] = v1814;
              v1816 = (int8x16_t)vmulq_n_f64(v956, v957);
              *(_QWORD *)&v1814 = vextq_s8(v1816, v1816, 8uLL).u64[0];
              *(_QWORD *)&v956.f64[0] = v1782.i64[0];
              v956.f64[1] = v1758;
              v1782 = (int8x16_t)vmulq_n_f64(v956, v957);
              *(_QWORD *)&v1758 = vextq_s8(v1782, v1782, 8uLL).u64[0];
              v956.f64[0] = v1763.f64[0];
              v956.f64[1] = v1759.f64[0];
              v1763 = vmulq_n_f64(v956, v957);
              *(_QWORD *)&v1759.f64[0] = vextq_s8((int8x16_t)v1763, (int8x16_t)v1763, 8uLL).u64[0];
              *(_QWORD *)&v958.f64[0] = v1781.i64[0];
              v958.f64[1] = v1760.f64[0];
              v1781 = (int8x16_t)vmulq_n_f64(v958, v957);
              *(_QWORD *)&v1760.f64[0] = vextq_s8(v1781, v1781, 8uLL).u64[0];
              *(_QWORD *)&v956.f64[0] = v1765.i64[0];
              v956.f64[1] = v1764.f64[0];
              v1765 = (int8x16_t)vmulq_n_f64(v956, v957);
              v1764 = (float64x2_t)vextq_s8(v1765, v1765, 8uLL);
              goto LABEL_207;
            case 4:
              (*(void (**)(float64x2_t *__return_ptr, uint64_t))(*(_QWORD *)v799 + 56))(&v1919, v799);
              v879 = vmlaq_n_f64(vmulq_n_f64(v1919, v1755.f64[0]), *(float64x2_t *)&v1920[24], *(double *)v1754.i64);
              v880 = vmlaq_n_f64(vmulq_n_f64(*(float64x2_t *)v1920, v1755.f64[0]), *(float64x2_t *)&v1920[40], *(double *)v1754.i64);
              v881 = *(double *)&v1920[16] * v1755.f64[0] + *(double *)&v1920[56] * *(double *)v1754.i64;
              v882 = vmlaq_n_f64(vmulq_n_f64(v1919, *(double *)v1762.i64), *(float64x2_t *)&v1920[24], v1753);
              v883 = vmlaq_n_f64(vmulq_n_f64(*(float64x2_t *)v1920, *(double *)v1762.i64), *(float64x2_t *)&v1920[40], v1753);
              v884 = *(double *)&v1920[16] * *(double *)v1762.i64 + *(double *)&v1920[56] * v1753;
              v885 = vmlaq_n_f64(vmulq_n_f64(v1919, v1757.f64[0]), *(float64x2_t *)&v1920[24], *(double *)v1756.i64);
              v886 = vmlaq_n_f64(vmulq_n_f64(*(float64x2_t *)v1920, v1757.f64[0]), *(float64x2_t *)&v1920[40], *(double *)v1756.i64);
              v887 = *(double *)&v1920[16] * v1757.f64[0] + *(double *)&v1920[56] * *(double *)v1756.i64;
              v888 = vmlaq_n_f64(vmulq_n_f64(v1919, *(double *)v1816.i64), *(float64x2_t *)&v1920[24], v1814);
              v889 = vmlaq_n_f64(vmulq_n_f64(*(float64x2_t *)v1920, *(double *)v1816.i64), *(float64x2_t *)&v1920[40], v1814);
              v890 = *(double *)&v1920[16] * *(double *)v1816.i64 + *(double *)&v1920[56] * v1814;
              v891 = vmlaq_n_f64(vmulq_n_f64(v1919, v1759.f64[0]), *(float64x2_t *)&v1920[24], *(double *)v1781.i64);
              v892 = vmlaq_n_f64(vmulq_n_f64(*(float64x2_t *)v1920, v1759.f64[0]), *(float64x2_t *)&v1920[40], *(double *)v1781.i64);
              v893 = *(double *)&v1920[16] * v1759.f64[0] + *(double *)&v1920[56] * *(double *)v1781.i64;
              v894 = (float64x2_t)v1922;
              v895 = (float64x2_t)v1921;
              v896 = *(double *)v1923;
              v897 = *(float64x2_t *)&v1923[8];
              v898 = *(float64x2_t *)&v1923[24];
              v899 = *(double *)&v1923[40];
              v900 = *(double *)&v1920[16] * *(double *)v1761.i64
                   + *(double *)&v1920[56] * v1752
                   + *(double *)v1923 * *(double *)v1784.i64
                   + *(double *)&v1923[40] * *(double *)v1845.i64;
              v901 = *(float64x2_t *)v1924;
              v903 = v1846;
              v904 = (int8x16_t)vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v1919, *(double *)v1761.i64), *(float64x2_t *)&v1920[24], v1752), (float64x2_t)v1921, *(double *)v1784.i64), *(float64x2_t *)&v1923[8], *(double *)v1845.i64), *(float64x2_t *)v1924, v1846.f64[0]);
              v902 = *(float64x2_t *)&v1924[16];
              v905 = (int8x16_t)vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(*(float64x2_t *)v1920, *(double *)v1761.i64), *(float64x2_t *)&v1920[40], v1752), (float64x2_t)v1922, *(double *)v1784.i64), *(float64x2_t *)&v1923[24], *(double *)v1845.i64), *(float64x2_t *)&v1924[16], v1846.f64[0]);
              v906 = *(double *)v1925.i64;
              break;
            default:
              goto LABEL_207;
          }
          v903.f64[0] = v900 + v906 * v903.f64[0];
          v1846 = v903;
          v977.f64[1] = v1822.f64[1];
          v978 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(v879, v895, v1820), v897, *(double *)v1818.i64), v901, v1822.f64[0]);
          v979 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(v880, v894, v1820), v898, *(double *)v1818.i64), v902, v1822.f64[0]);
          v977.f64[0] = v881 + v896 * v1820 + v899 * *(double *)v1818.i64 + v906 * v1822.f64[0];
          v1822 = v977;
          v980 = vmlaq_n_f64(vmlaq_n_f64(v882, v895, *(double *)v1821.i64), v897, v1815);
          v981 = vmlaq_n_f64(vmlaq_n_f64(v883, v894, *(double *)v1821.i64), v898, v1815);
          v982 = vmlaq_n_f64(vmlaq_n_f64(v885, v895, v1819.f64[0]), v897, *(double *)v1817.i64);
          v977.f64[0] = v887 + v896 * v1819.f64[0] + v899 * *(double *)v1817.i64;
          v983 = vmlaq_n_f64(vmlaq_n_f64(v888, v895, *(double *)v1782.i64), v897, v1758);
          v984 = vmlaq_n_f64(vmlaq_n_f64(v889, v894, *(double *)v1782.i64), v898, v1758);
          v985 = vmlaq_n_f64(vmlaq_n_f64(v891, v895, v1760.f64[0]), v897, *(double *)v1765.i64);
          v986.f64[1] = v1766.f64[1];
          v987 = vmlaq_n_f64(v982, v901, v1766.f64[0]);
          v988 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(v886, v894, v1819.f64[0]), v898, *(double *)v1817.i64), v902, v1766.f64[0]);
          v989 = v893 + v896 * v1760.f64[0] + v899 * *(double *)v1765.i64;
          v1818.i64[0] = *(_QWORD *)&v979.f64[1];
          v1754.i64[0] = *(_QWORD *)&v978.f64[1];
          v1817.i64[0] = *(_QWORD *)&v988.f64[1];
          v1756.i64[0] = *(_QWORD *)&v987.f64[1];
          v990.f64[1] = v1764.f64[1];
          v991 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(v892, v894, v1760.f64[0]), v898, *(double *)v1765.i64), v902, v1764.f64[0]);
          v1765.i64[0] = *(_QWORD *)&v991.f64[1];
          v992.f64[1] = v1783.f64[1];
          v993 = (int8x16_t)vmlaq_n_f64(v980, v901, v1783.f64[0]);
          v994 = (int8x16_t)vmlaq_n_f64(v981, v902, v1783.f64[0]);
          v992.f64[0] = v884 + v896 * *(double *)v1821.i64 + v899 * v1815 + v906 * v1783.f64[0];
          v1783 = v992;
          v995 = vmlaq_n_f64(v985, v901, v1764.f64[0]);
          v1781.i64[0] = *(_QWORD *)&v995.f64[1];
          v986.f64[0] = v977.f64[0] + v906 * v1766.f64[0];
          v1766 = v986;
          v1845 = vextq_s8(v905, v905, 8uLL);
          v992.f64[1] = v1763.f64[1];
          v996 = (int8x16_t)vmlaq_n_f64(v983, v901, v1763.f64[0]);
          *(_QWORD *)&v1752 = vextq_s8(v904, v904, 8uLL).u64[0];
          v997 = (int8x16_t)vmlaq_n_f64(v984, v902, v1763.f64[0]);
          *(_QWORD *)&v1815 = vextq_s8(v994, v994, 8uLL).u64[0];
          v992.f64[0] = v890 + v896 * *(double *)v1782.i64 + v899 * v1758 + v906 * v1763.f64[0];
          v1763 = v992;
          *(_QWORD *)&v1753 = vextq_s8(v993, v993, 8uLL).u64[0];
          v1761.i64[0] = v904.i64[0];
          v1784.i64[0] = v905.i64[0];
          v1755.f64[0] = v978.f64[0];
          v1820 = v979.f64[0];
          v990.f64[0] = v989 + v906 * v1764.f64[0];
          v1764 = v990;
          *(_QWORD *)&v1758 = vextq_s8(v997, v997, 8uLL).u64[0];
          v1762.i64[0] = v993.i64[0];
          v1821.i64[0] = v994.i64[0];
          v1757.f64[0] = v987.f64[0];
          v1819.f64[0] = v988.f64[0];
          *(_QWORD *)&v1814 = vextq_s8(v996, v996, 8uLL).u64[0];
          v1816.i64[0] = v996.i64[0];
          v1782.i64[0] = v997.i64[0];
          v1759.f64[0] = v995.f64[0];
          v1760.f64[0] = v991.f64[0];
          if (!*(_BYTE *)(*(_QWORD *)(v320 + 504) + 20))
            goto LABEL_216;
LABEL_208:
          switch(v801)
          {
            case 0:
              v959 = *(double *)(v799 + 48);
              v960 = *(float64x2_t *)(v799 + 16);
              v961 = *(float64x2_t *)(v799 + 32);
              v962 = *(double *)(v799 + 88);
              v963 = *(float64x2_t *)(v799 + 72);
              v964 = *(float64x2_t *)(v799 + 56);
              v965 = *(double *)(v799 + 128);
              v967 = *(float64x2_t *)(v799 + 96);
              v966 = *(float64x2_t *)(v799 + 112);
              v968 = *(double *)(v799 + 168);
              v969 = *(float64x2_t *)(v799 + 152);
              v970 = *(float64x2_t *)(v799 + 136);
              v971 = *(double *)(v799 + 208);
              v972 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v960, *(double *)v1848.i64), v964, v1794), v967, *(double *)v1847.i64);
              v973 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v961, *(double *)v1848.i64), v963, v1794), v966, *(double *)v1847.i64);
              v974 = v959 * *(double *)v1848.i64 + v962 * v1794 + v965 * *(double *)v1847.i64;
              v976 = *(float64x2_t *)(v799 + 176);
              v975 = *(float64x2_t *)(v799 + 192);
              break;
            case 1:
              *(_QWORD *)&v998.f64[0] = v1848.i64[0];
              v998.f64[1] = v1794;
              *(_QWORD *)&v999.f64[0] = v1847.i64[0];
              *(_QWORD *)&v1000.f64[1] = v1796.i64[1];
              *(_QWORD *)&v999.f64[1] = v1796.i64[0];
              v1000.f64[0] = *(float64_t *)(v799 + 48);
              v1001 = *(float64x2_t *)(v799 + 16);
              v1002 = *(float64x2_t *)(v799 + 32);
              v1003 = (int8x16_t)vmulq_f64(v998, v1001);
              v1004.f64[0] = v1791;
              *(_QWORD *)&v1004.f64[1] = v1849.i64[0];
              v1005.f64[0] = v1793;
              *(_QWORD *)&v1005.f64[1] = v1852.i64[0];
              v1006 = (int8x16_t)vmulq_f64(v1001, v1004);
              v1007 = vmulq_f64(v1002, v1005);
              v1008 = (int8x16_t)vzip1q_s64(vdupq_laneq_s64((int64x2_t)v1007, 1), (int64x2_t)vmulq_f64(v1000, v1798));
              v1009 = vextq_s8(v1006, (int8x16_t)v1007, 8uLL);
              *(_QWORD *)&v1007.f64[0] = v1851.i64[0];
              v1007.f64[1] = v1792;
              v1010 = (int8x16_t)vzip1q_s64((int64x2_t)vmulq_f64(v1856, v1000), (int64x2_t)v1006);
              *(_QWORD *)&v1011.f64[0] = v1850.i64[0];
              v1011.f64[1] = v1795;
              v1012 = (int8x16_t)vmulq_f64(v1001, v1007);
              v1013 = (int64x2_t)vmulq_f64(v1000, v1855);
              v1014.f64[0] = v1789;
              *(_QWORD *)&v1014.f64[1] = v1853.i64[0];
              v1015.f64[0] = v1790.f64[0];
              *(_QWORD *)&v1015.f64[1] = v1854.i64[0];
              *(_QWORD *)&v1797.f64[0] = *(_OWORD *)&vmulq_f64(v1000, v1797);
              v1016 = (int64x2_t)vmulq_f64(v1001, v1014);
              v1853.i64[0] = v1016.i64[1];
              v1790 = vmulq_f64(v1002, v1015);
              v1854.i64[0] = *(_QWORD *)&v1790.f64[1];
              *(_QWORD *)&v1856.f64[0] = v1010.i64[0];
              *(_QWORD *)&v1791 = vextq_s8(v1010, v1010, 8uLL).u64[0];
              v1849.i64[0] = v1009.i64[0];
              *(_QWORD *)&v1793 = vextq_s8(v1009, v1009, 8uLL).u64[0];
              v1852.i64[0] = v1008.i64[0];
              *(_QWORD *)&v1798.f64[0] = vextq_s8(v1008, v1008, 8uLL).u64[0];
              v1855 = (float64x2_t)vzip1q_s64(v1013, v1016);
              *(_QWORD *)&v1789 = vextq_s8((int8x16_t)v1855, (int8x16_t)v1855, 8uLL).u64[0];
              v1848.i64[0] = v1003.i64[0];
              *(_QWORD *)&v1794 = vextq_s8(v1003, v1003, 8uLL).u64[0];
              v1847 = (int8x16_t)vmulq_f64(v999, v1002);
              v1796.i64[0] = vextq_s8(v1847, v1847, 8uLL).u64[0];
              v1851.i64[0] = v1012.i64[0];
              *(_QWORD *)&v1792 = vextq_s8(v1012, v1012, 8uLL).u64[0];
              v1850 = (int8x16_t)vmulq_f64(v1002, v1011);
              *(_QWORD *)&v1795 = vextq_s8(v1850, v1850, 8uLL).u64[0];
              if (!*(_BYTE *)(*(_QWORD *)(v320 + 512) + 20))
                goto LABEL_225;
              goto LABEL_217;
            case 2:
              v1017 = *(double *)(v799 + 16);
              *(_QWORD *)&v1018.f64[0] = v1848.i64[0];
              v1018.f64[1] = v1794;
              v1848 = (int8x16_t)vmulq_n_f64(v1018, v1017);
              *(_QWORD *)&v1794 = vextq_s8(v1848, v1848, 8uLL).u64[0];
              *(_QWORD *)&v1018.f64[0] = v1847.i64[0];
              *(_QWORD *)&v1018.f64[1] = v1796.i64[0];
              v1847 = (int8x16_t)vmulq_n_f64(v1018, v1017);
              v1796.i64[0] = vextq_s8(v1847, v1847, 8uLL).u64[0];
              v1018.f64[0] = v1856.f64[0];
              v1018.f64[1] = v1791;
              v1856 = vmulq_n_f64(v1018, v1017);
              *(_QWORD *)&v1791 = vextq_s8((int8x16_t)v1856, (int8x16_t)v1856, 8uLL).u64[0];
              *(_QWORD *)&v1018.f64[0] = v1849.i64[0];
              v1018.f64[1] = v1793;
              v1849 = (int8x16_t)vmulq_n_f64(v1018, v1017);
              *(_QWORD *)&v1793 = vextq_s8(v1849, v1849, 8uLL).u64[0];
              *(_QWORD *)&v1018.f64[0] = v1852.i64[0];
              v1018.f64[1] = v1798.f64[0];
              v1852 = (int8x16_t)vmulq_n_f64(v1018, v1017);
              *(_QWORD *)&v1798.f64[0] = vextq_s8(v1852, v1852, 8uLL).u64[0];
              *(_QWORD *)&v1018.f64[0] = v1851.i64[0];
              v1018.f64[1] = v1792;
              v1851 = (int8x16_t)vmulq_n_f64(v1018, v1017);
              *(_QWORD *)&v1792 = vextq_s8(v1851, v1851, 8uLL).u64[0];
              *(_QWORD *)&v1018.f64[0] = v1850.i64[0];
              v1018.f64[1] = v1795;
              v1850 = (int8x16_t)vmulq_n_f64(v1018, v1017);
              *(_QWORD *)&v1795 = vextq_s8(v1850, v1850, 8uLL).u64[0];
              v1018.f64[0] = v1855.f64[0];
              v1018.f64[1] = v1789;
              v1855 = vmulq_n_f64(v1018, v1017);
              *(_QWORD *)&v1789 = vextq_s8((int8x16_t)v1855, (int8x16_t)v1855, 8uLL).u64[0];
              *(_QWORD *)&v1018.f64[0] = v1853.i64[0];
              v1018.f64[1] = v1790.f64[0];
              v1853 = (int8x16_t)vmulq_n_f64(v1018, v1017);
              *(_QWORD *)&v1790.f64[0] = vextq_s8(v1853, v1853, 8uLL).u64[0];
              *(_QWORD *)&v1018.f64[0] = v1854.i64[0];
              v1018.f64[1] = v1797.f64[0];
              v1854 = (int8x16_t)vmulq_n_f64(v1018, v1017);
              *(_QWORD *)&v1797.f64[0] = vextq_s8(v1854, v1854, 8uLL).u64[0];
              goto LABEL_216;
            case 4:
              (*(void (**)(float64x2_t *__return_ptr, uint64_t))(*(_QWORD *)v799 + 56))(&v1919, v799);
              v959 = *(double *)&v1920[16];
              v961 = *(float64x2_t *)v1920;
              v960 = v1919;
              v962 = *(double *)&v1920[56];
              v963 = *(float64x2_t *)&v1920[40];
              v964 = *(float64x2_t *)&v1920[24];
              v965 = *(double *)v1923;
              v966 = (float64x2_t)v1922;
              v967 = (float64x2_t)v1921;
              v968 = *(double *)&v1923[40];
              v969 = *(float64x2_t *)&v1923[24];
              v970 = *(float64x2_t *)&v1923[8];
              v971 = *(double *)v1925.i64;
              v972 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v1919, *(double *)v1848.i64), *(float64x2_t *)&v1920[24], v1794), (float64x2_t)v1921, *(double *)v1847.i64);
              v973 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(*(float64x2_t *)v1920, *(double *)v1848.i64), *(float64x2_t *)&v1920[40], v1794), (float64x2_t)v1922, *(double *)v1847.i64);
              v974 = *(double *)&v1920[16] * *(double *)v1848.i64
                   + *(double *)&v1920[56] * v1794
                   + *(double *)v1923 * *(double *)v1847.i64;
              v975 = *(float64x2_t *)&v1924[16];
              v976 = *(float64x2_t *)v1924;
              break;
            default:
              goto LABEL_216;
          }
          v1044 = (int8x16_t)vmlaq_n_f64(vmlaq_n_f64(v972, v970, *(double *)v1796.i64), v976, v1856.f64[0]);
          v1045 = (int8x16_t)vmlaq_n_f64(vmlaq_n_f64(v973, v969, *(double *)v1796.i64), v975, v1856.f64[0]);
          v1856.f64[0] = v974 + v968 * *(double *)v1796.i64 + v971 * v1856.f64[0];
          v1046 = (int8x16_t)vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v960, v1791), v964, *(double *)v1849.i64), v967, v1793), v970, *(double *)v1852.i64), v976, v1798.f64[0]);
          v1047 = (int8x16_t)vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v961, v1791), v963, *(double *)v1849.i64), v966, v1793), v969, *(double *)v1852.i64), v975, v1798.f64[0]);
          v1798.f64[0] = v959 * v1791
                       + v962 * *(double *)v1849.i64
                       + v965 * v1793
                       + v968 * *(double *)v1852.i64
                       + v971 * v1798.f64[0];
          v1048 = (int8x16_t)vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v960, *(double *)v1851.i64), v964, v1792), v967, *(double *)v1850.i64), v970, v1795), v976, v1855.f64[0]);
          v1049 = (int8x16_t)vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v961, *(double *)v1851.i64), v963, v1792), v966, *(double *)v1850.i64), v969, v1795), v975, v1855.f64[0]);
          v1855.f64[0] = v959 * *(double *)v1851.i64
                       + v962 * v1792
                       + v965 * *(double *)v1850.i64
                       + v968 * v1795
                       + v971 * v1855.f64[0];
          v1050 = (int8x16_t)vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v960, v1789), v964, *(double *)v1853.i64), v967, v1790.f64[0]), v970, *(double *)v1854.i64), v976, v1797.f64[0]);
          v1051 = (int8x16_t)vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v961, v1789), v963, *(double *)v1853.i64), v966, v1790.f64[0]), v969, *(double *)v1854.i64), v975, v1797.f64[0]);
          v1797.f64[0] = v959 * v1789
                       + v962 * *(double *)v1853.i64
                       + v965 * v1790.f64[0]
                       + v968 * *(double *)v1854.i64
                       + v971 * v1797.f64[0];
          v1796.i64[0] = vextq_s8(v1045, v1045, 8uLL).u64[0];
          *(_QWORD *)&v1794 = vextq_s8(v1044, v1044, 8uLL).u64[0];
          v1852.i64[0] = vextq_s8(v1047, v1047, 8uLL).u64[0];
          v1849.i64[0] = vextq_s8(v1046, v1046, 8uLL).u64[0];
          *(_QWORD *)&v1795 = vextq_s8(v1049, v1049, 8uLL).u64[0];
          *(_QWORD *)&v1792 = vextq_s8(v1048, v1048, 8uLL).u64[0];
          v1854.i64[0] = vextq_s8(v1051, v1051, 8uLL).u64[0];
          v1848.i64[0] = v1044.i64[0];
          v1847.i64[0] = v1045.i64[0];
          v1791 = *(double *)v1046.i64;
          v1793 = *(double *)v1047.i64;
          v1853.i64[0] = vextq_s8(v1050, v1050, 8uLL).u64[0];
          v1851.i64[0] = v1048.i64[0];
          v1850.i64[0] = v1049.i64[0];
          v1789 = *(double *)v1050.i64;
          *(_QWORD *)&v1790.f64[0] = v1051.i64[0];
          if (!*(_BYTE *)(*(_QWORD *)(v320 + 512) + 20))
            goto LABEL_225;
LABEL_217:
          v1019 = v1898;
          switch(v801)
          {
            case 0:
              v1020 = *(double *)(v799 + 48);
              v1022 = *(float64x2_t *)(v799 + 16);
              v1021 = *(float64x2_t *)(v799 + 32);
              v1023 = *(double *)(v799 + 88);
              v1024 = *(float64x2_t *)(v799 + 72);
              v1025 = *(float64x2_t *)(v799 + 56);
              v1026 = *(double *)(v799 + 128);
              v1028 = *(float64x2_t *)(v799 + 96);
              v1027 = *(float64x2_t *)(v799 + 112);
              v1029 = *(double *)(v799 + 168);
              v1030 = *(float64x2_t *)(v799 + 152);
              v1031 = *(float64x2_t *)(v799 + 136);
              v1032 = *(double *)(v799 + 208);
              v1034 = *(float64x2_t *)(v799 + 176);
              v1033 = *(float64x2_t *)(v799 + 192);
              v1035 = (int8x16_t)vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v1022, *(double *)v1828.i64), v1025, v1834), v1028, *(double *)v1827.i64), v1031, *(double *)v1835.i64), v1034, v1841.f64[0]);
              v1036 = (int8x16_t)vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v1021, *(double *)v1828.i64), v1024, v1834), v1027, *(double *)v1827.i64), v1030, *(double *)v1835.i64), v1033, v1841.f64[0]);
              v1841.f64[0] = v1020 * *(double *)v1828.i64
                           + v1023 * v1834
                           + v1026 * *(double *)v1827.i64
                           + v1029 * *(double *)v1835.i64
                           + v1032 * v1841.f64[0];
              v1037 = (int8x16_t)vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v1022, v1824), v1025, *(double *)v1837.i64), v1028, v1826), v1031, *(double *)v1838.i64), v1034, v1839.f64[0]);
              v1038 = (int8x16_t)vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v1021, v1824), v1024, *(double *)v1837.i64), v1027, v1826), v1030, *(double *)v1838.i64), v1033, v1839.f64[0]);
              v1839.f64[0] = v1020 * v1824
                           + v1023 * *(double *)v1837.i64
                           + v1026 * v1826
                           + v1029 * *(double *)v1838.i64
                           + v1032 * v1839.f64[0];
              v1039 = (int8x16_t)vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v1022, *(double *)v1830.i64), v1025, v1831), v1028, *(double *)v793.i64), v1031, v1832), v1034, v1873.f64[0]);
              v1040 = (int8x16_t)vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v1021, *(double *)v1830.i64), v1024, v1831), v1027, *(double *)v793.i64), v1030, v1832), v1033, v1873.f64[0]);
              v1873.f64[0] = v1020 * *(double *)v1830.i64
                           + v1023 * v1831
                           + v1026 * *(double *)v793.i64
                           + v1029 * v1832
                           + v1032 * v1873.f64[0];
              v1041 = v1020 * v1823;
              v1042 = (int8x16_t)vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v1022, v1823), v1025, *(double *)v787.i64), v1028, v1825.f64[0]), v1031, *(double *)v1840.i64), v1034, v1836.f64[0]);
              v1043 = (int8x16_t)vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v1021, v1823), v1024, *(double *)v787.i64), v1027, v1825.f64[0]), v1030, *(double *)v1840.i64), v1033, v1836.f64[0]);
              v1836.f64[0] = v1041
                           + v1023 * *(double *)v787.i64
                           + v1026 * v1825.f64[0]
                           + v1029 * *(double *)v1840.i64
                           + v1032 * v1836.f64[0];
              v1835.i64[0] = vextq_s8(v1036, v1036, 8uLL).u64[0];
              *(_QWORD *)&v1834 = vextq_s8(v1035, v1035, 8uLL).u64[0];
              v1838.i64[0] = vextq_s8(v1038, v1038, 8uLL).u64[0];
              v1837.i64[0] = vextq_s8(v1037, v1037, 8uLL).u64[0];
              *(_QWORD *)&v1832 = vextq_s8(v1040, v1040, 8uLL).u64[0];
              *(_QWORD *)&v1831 = vextq_s8(v1039, v1039, 8uLL).u64[0];
              v1840.i64[0] = vextq_s8(v1043, v1043, 8uLL).u64[0];
              v1828.i64[0] = v1035.i64[0];
              v1827.i64[0] = v1036.i64[0];
              v1824 = *(double *)v1037.i64;
              v1826 = *(double *)v1038.i64;
              v1833.i64[0] = vextq_s8(v1042, v1042, 8uLL).u64[0];
              v1830.i64[0] = v1039.i64[0];
              v1829.i64[0] = v1040.i64[0];
              v1823 = *(double *)v1042.i64;
              *(_QWORD *)&v1825.f64[0] = v1043.i64[0];
              break;
            case 1:
              *(_QWORD *)&v1052.f64[0] = v1828.i64[0];
              v1052.f64[1] = v1834;
              *(_QWORD *)&v1053.f64[1] = v1835.i64[1];
              *(_QWORD *)&v1054.f64[0] = v1827.i64[0];
              *(_QWORD *)&v1054.f64[1] = v1835.i64[0];
              v1053.f64[0] = *(float64_t *)(v799 + 48);
              v1055 = *(float64x2_t *)(v799 + 16);
              v1056 = *(float64x2_t *)(v799 + 32);
              v1057 = (int8x16_t)vmulq_f64(v1052, v1055);
              v1058.f64[0] = v1824;
              *(_QWORD *)&v1058.f64[1] = v1837.i64[0];
              v1059.f64[0] = v1826;
              *(_QWORD *)&v1059.f64[1] = v1838.i64[0];
              v1060 = (int8x16_t)vmulq_f64(v1055, v1058);
              v1061 = (int8x16_t)vmulq_f64(v1056, v1059);
              v1062 = (int8x16_t)vzip1q_s64(vdupq_laneq_s64((int64x2_t)v1061, 1), (int64x2_t)vmulq_f64(v1053, v1839));
              v1063 = vextq_s8(v1060, v1061, 8uLL);
              *(_QWORD *)&v1064.f64[0] = v1830.i64[0];
              v1064.f64[1] = v1831;
              v1065 = (int8x16_t)vzip1q_s64((int64x2_t)vmulq_f64(v1841, v1053), (int64x2_t)v1060);
              *(_QWORD *)&v1066.f64[0] = v793.i64[0];
              v1066.f64[1] = v1832;
              v1067 = (int8x16_t)vmulq_f64(v1055, v1064);
              v1068 = (int64x2_t)vmulq_f64(v1053, v1873);
              v1069.f64[0] = v1823;
              *(_QWORD *)&v1069.f64[1] = v787.i64[0];
              v1070.f64[0] = v1825.f64[0];
              *(_QWORD *)&v1070.f64[1] = v1840.i64[0];
              *(_QWORD *)&v1836.f64[0] = *(_OWORD *)&vmulq_f64(v1053, v1836);
              v1071 = (int64x2_t)vmulq_f64(v1055, v1069);
              v1833.i64[0] = v1071.i64[1];
              v1825 = vmulq_f64(v1056, v1070);
              v1840.i64[0] = *(_QWORD *)&v1825.f64[1];
              *(_QWORD *)&v1841.f64[0] = v1065.i64[0];
              *(_QWORD *)&v1824 = vextq_s8(v1065, v1065, 8uLL).u64[0];
              v1837.i64[0] = v1063.i64[0];
              *(_QWORD *)&v1826 = vextq_s8(v1063, v1063, 8uLL).u64[0];
              v1838.i64[0] = v1062.i64[0];
              *(_QWORD *)&v1839.f64[0] = vextq_s8(v1062, v1062, 8uLL).u64[0];
              v1873 = (float64x2_t)vzip1q_s64(v1068, v1071);
              *(_QWORD *)&v1823 = vextq_s8((int8x16_t)v1873, (int8x16_t)v1873, 8uLL).u64[0];
              v1828.i64[0] = v1057.i64[0];
              *(_QWORD *)&v1834 = vextq_s8(v1057, v1057, 8uLL).u64[0];
              v1827 = (int8x16_t)vmulq_f64(v1054, v1056);
              v1835.i64[0] = vextq_s8(v1827, v1827, 8uLL).u64[0];
              v1830.i64[0] = v1067.i64[0];
              *(_QWORD *)&v1831 = vextq_s8(v1067, v1067, 8uLL).u64[0];
              v1829 = (int8x16_t)vmulq_f64(v1056, v1066);
              *(_QWORD *)&v1832 = vextq_s8(v1829, v1829, 8uLL).u64[0];
              break;
            case 2:
              v1072 = *(double *)(v799 + 16);
              *(_QWORD *)&v1073.f64[0] = v1828.i64[0];
              v1073.f64[1] = v1834;
              v1828 = (int8x16_t)vmulq_n_f64(v1073, v1072);
              *(_QWORD *)&v1834 = vextq_s8(v1828, v1828, 8uLL).u64[0];
              *(_QWORD *)&v1073.f64[0] = v1827.i64[0];
              *(_QWORD *)&v1073.f64[1] = v1835.i64[0];
              v1827 = (int8x16_t)vmulq_n_f64(v1073, v1072);
              v1835.i64[0] = vextq_s8(v1827, v1827, 8uLL).u64[0];
              v1074.f64[0] = v1841.f64[0];
              v1074.f64[1] = v1824;
              v1841 = vmulq_n_f64(v1074, v1072);
              *(_QWORD *)&v1824 = vextq_s8((int8x16_t)v1841, (int8x16_t)v1841, 8uLL).u64[0];
              *(_QWORD *)&v1074.f64[0] = v1837.i64[0];
              v1074.f64[1] = v1826;
              v1837 = (int8x16_t)vmulq_n_f64(v1074, v1072);
              *(_QWORD *)&v1826 = vextq_s8(v1837, v1837, 8uLL).u64[0];
              *(_QWORD *)&v1073.f64[0] = v1838.i64[0];
              v1073.f64[1] = v1839.f64[0];
              v1838 = (int8x16_t)vmulq_n_f64(v1073, v1072);
              *(_QWORD *)&v1839.f64[0] = vextq_s8(v1838, v1838, 8uLL).u64[0];
              *(_QWORD *)&v1073.f64[0] = v1830.i64[0];
              v1073.f64[1] = v1831;
              v1830 = (int8x16_t)vmulq_n_f64(v1073, v1072);
              *(_QWORD *)&v1831 = vextq_s8(v1830, v1830, 8uLL).u64[0];
              *(_QWORD *)&v1073.f64[0] = v793.i64[0];
              v1073.f64[1] = v1832;
              v1829 = (int8x16_t)vmulq_n_f64(v1073, v1072);
              *(_QWORD *)&v1832 = vextq_s8(v1829, v1829, 8uLL).u64[0];
              v1074.f64[0] = v1873.f64[0];
              v1074.f64[1] = v1823;
              v1873 = vmulq_n_f64(v1074, v1072);
              *(_QWORD *)&v1823 = vextq_s8((int8x16_t)v1873, (int8x16_t)v1873, 8uLL).u64[0];
              *(_QWORD *)&v1074.f64[0] = v787.i64[0];
              v1074.f64[1] = v1825.f64[0];
              v1833 = (int8x16_t)vmulq_n_f64(v1074, v1072);
              *(_QWORD *)&v1825.f64[0] = vextq_s8(v1833, v1833, 8uLL).u64[0];
              *(_QWORD *)&v1074.f64[0] = v1840.i64[0];
              v1074.f64[1] = v1836.f64[0];
              v1840 = (int8x16_t)vmulq_n_f64(v1074, v1072);
              *(_QWORD *)&v1836.f64[0] = vextq_s8(v1840, v1840, 8uLL).u64[0];
              break;
            case 3:
              break;
            case 4:
              (*(void (**)(float64x2_t *__return_ptr, uint64_t))(*(_QWORD *)v799 + 56))(&v1919, v799);
              v1075 = (int8x16_t)vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v1919, *(double *)v1828.i64), *(float64x2_t *)&v1920[24], v1834), (float64x2_t)v1921, *(double *)v1827.i64), *(float64x2_t *)&v1923[8], *(double *)v1835.i64), *(float64x2_t *)v1924, v1841.f64[0]);
              v1076 = (int8x16_t)vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(*(float64x2_t *)v1920, *(double *)v1828.i64), *(float64x2_t *)&v1920[40], v1834), (float64x2_t)v1922, *(double *)v1827.i64), *(float64x2_t *)&v1923[24], *(double *)v1835.i64), *(float64x2_t *)&v1924[16], v1841.f64[0]);
              v1841.f64[0] = *(double *)&v1920[16] * *(double *)v1828.i64
                           + *(double *)&v1920[56] * v1834
                           + *(double *)v1923 * *(double *)v1827.i64
                           + *(double *)&v1923[40] * *(double *)v1835.i64
                           + *(double *)v1925.i64 * v1841.f64[0];
              v1077 = (int8x16_t)vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v1919, v1824), *(float64x2_t *)&v1920[24], *(double *)v1837.i64), (float64x2_t)v1921, v1826), *(float64x2_t *)&v1923[8], *(double *)v1838.i64), *(float64x2_t *)v1924, v1839.f64[0]);
              v1078 = (int8x16_t)vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(*(float64x2_t *)v1920, v1824), *(float64x2_t *)&v1920[40], *(double *)v1837.i64), (float64x2_t)v1922, v1826), *(float64x2_t *)&v1923[24], *(double *)v1838.i64), *(float64x2_t *)&v1924[16], v1839.f64[0]);
              v1839.f64[0] = *(double *)&v1920[16] * v1824
                           + *(double *)&v1920[56] * *(double *)v1837.i64
                           + *(double *)v1923 * v1826
                           + *(double *)&v1923[40] * *(double *)v1838.i64
                           + *(double *)v1925.i64 * v1839.f64[0];
              v1079 = (int8x16_t)vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v1919, *(double *)v1830.i64), *(float64x2_t *)&v1920[24], v1831), (float64x2_t)v1921, *(double *)v793.i64), *(float64x2_t *)&v1923[8], v1832), *(float64x2_t *)v1924, v1873.f64[0]);
              v1080 = (int8x16_t)vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(*(float64x2_t *)v1920, *(double *)v1830.i64), *(float64x2_t *)&v1920[40], v1831), (float64x2_t)v1922, *(double *)v793.i64), *(float64x2_t *)&v1923[24], v1832), *(float64x2_t *)&v1924[16], v1873.f64[0]);
              v1873.f64[0] = *(double *)&v1920[16] * *(double *)v1830.i64
                           + *(double *)&v1920[56] * v1831
                           + *(double *)v1923 * *(double *)v793.i64
                           + *(double *)&v1923[40] * v1832
                           + *(double *)v1925.i64 * v1873.f64[0];
              v1081 = (int8x16_t)vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v1919, v1823), *(float64x2_t *)&v1920[24], *(double *)v787.i64), (float64x2_t)v1921, v1825.f64[0]), *(float64x2_t *)&v1923[8], *(double *)v1840.i64), *(float64x2_t *)v1924, v1836.f64[0]);
              v1082 = (int8x16_t)vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(*(float64x2_t *)v1920, v1823), *(float64x2_t *)&v1920[40], *(double *)v787.i64), (float64x2_t)v1922, v1825.f64[0]), *(float64x2_t *)&v1923[24], *(double *)v1840.i64), *(float64x2_t *)&v1924[16], v1836.f64[0]);
              v1836.f64[0] = *(double *)&v1920[16] * v1823
                           + *(double *)&v1920[56] * *(double *)v787.i64
                           + *(double *)v1923 * v1825.f64[0]
                           + *(double *)&v1923[40] * *(double *)v1840.i64
                           + *(double *)v1925.i64 * v1836.f64[0];
              v1835.i64[0] = vextq_s8(v1076, v1076, 8uLL).u64[0];
              *(_QWORD *)&v1834 = vextq_s8(v1075, v1075, 8uLL).u64[0];
              v1838.i64[0] = vextq_s8(v1078, v1078, 8uLL).u64[0];
              v1837.i64[0] = vextq_s8(v1077, v1077, 8uLL).u64[0];
              *(_QWORD *)&v1832 = vextq_s8(v1080, v1080, 8uLL).u64[0];
              *(_QWORD *)&v1831 = vextq_s8(v1079, v1079, 8uLL).u64[0];
              v1840.i64[0] = vextq_s8(v1082, v1082, 8uLL).u64[0];
              v1828.i64[0] = v1075.i64[0];
              v1827.i64[0] = v1076.i64[0];
              v1824 = *(double *)v1077.i64;
              v1826 = *(double *)v1078.i64;
              v1833.i64[0] = vextq_s8(v1081, v1081, 8uLL).u64[0];
              v1830.i64[0] = v1079.i64[0];
              v1829.i64[0] = v1080.i64[0];
              v1823 = *(double *)v1081.i64;
              *(_QWORD *)&v1825.f64[0] = v1082.i64[0];
              goto LABEL_225;
            default:
              goto LABEL_225;
          }
LABEL_226:
          v1083 = *(_OWORD *)(v320 + 576);
          *(float64x2_t *)(v320 + 520) = *v683;
          *(_OWORD *)(v320 + 536) = v1083;
          *(_QWORD *)(v320 + 552) = *(_QWORD *)(v320 + 592);
          _Q2 = *v683;
          _D4 = *(_QWORD *)(v320 + 568);
          __asm { FMLA            D3, D4, V2.D[1] }
          _Q2.f64[0] = *(float64_t *)(v320 + 584);
          __asm { FMLA            D3, D2, V1.D[1] }
          *(double *)(v320 + 600) = *(double *)(v1654 + 24) * (_D3 + *(double *)(v320 + 592) * *(double *)(v320 + 592));
          v1088 = v1787;
          if (v1842)
          {
            v1089 = v1843;
            if (v1785)
            {
              v1090 = v1019[44] + 24 * v1787;
              v1092 = *(char **)v1090;
              v1091 = *(char **)(v1090 + 8);
              if (*(char **)v1090 != v1091)
              {
                while (*(_DWORD *)v1092 < v329)
                {
                  v1092 += 16;
                  if (v1092 == v1091)
                    goto LABEL_236;
                }
              }
              if (v1092 != v1091)
              {
                if (*(_DWORD *)v1092 == v329)
                {
                  v1093 = (float64x2_t *)(v1019[35] + 8 * *((_QWORD *)v1092 + 1));
                  goto LABEL_237;
                }
                v1091 = v1092;
              }
LABEL_236:
              v1093 = (float64x2_t *)sub_20F7ED7A4(v1650, (char **)v1090, v329, v1091);
              v1019 = v1898;
LABEL_237:
              *(_QWORD *)&v1094.f64[0] = v1828.i64[0];
              v1094.f64[1] = v1824;
              v1095.f64[0] = v1834;
              *(_QWORD *)&v1095.f64[1] = v1837.i64[0];
              *(_QWORD *)&v1096.f64[0] = v1827.i64[0];
              v1096.f64[1] = v1826;
              *(_QWORD *)&v1097.f64[0] = v1835.i64[0];
              *(_QWORD *)&v1097.f64[1] = v1838.i64[0];
              v1098.f64[0] = v1841.f64[0];
              v1098.f64[1] = v1839.f64[0];
              v1099 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v1094, *(double *)v1726.i64), v1095, v1724), v1096, *(double *)v1751.i64), v1097, *(double *)v1769.i64), v1098, v1770.f64[0]);
              *(_QWORD *)&v1100.f64[0] = v1830.i64[0];
              v1100.f64[1] = v1823;
              v1101.f64[0] = v1831;
              *(_QWORD *)&v1101.f64[1] = v1833.i64[0];
              v1102 = vmlaq_n_f64(vmulq_n_f64(v1100, *(double *)v1726.i64), v1101, v1724);
              v1103 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v1094, v1779.f64[0]), v1095, *(double *)v1725.i64), v1096, v1750), v1097, *(double *)v1768.i64), v1098, v1728.f64[0]);
              v1104 = vmlaq_n_f64(vmulq_n_f64(v1094, *(double *)v1742.i64), v1095, v1734);
              v1105 = vmlaq_n_f64(vmulq_n_f64(v1094, v1737.f64[0]), v1095, *(double *)v1736.i64);
              v1106 = vmlaq_n_f64(vmulq_n_f64(v1094, *(double *)v1743.i64), v1095, v1735);
              v1107 = vmlaq_n_f64(vmulq_n_f64(v1094, v1739.f64[0]), v1095, *(double *)v1740.i64);
              v1108 = vmlaq_n_f64(vmulq_n_f64(v1100, v1779.f64[0]), v1101, *(double *)v1725.i64);
              v1109 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(v1104, v1096, *(double *)v1780.i64), v1097, v1727), v1098, v1729.f64[0]);
              v1110 = vmlaq_n_f64(v1105, v1096, v1748.f64[0]);
              v1111 = vmlaq_n_f64(v1106, v1096, *(double *)v1747.i64);
              v1112 = vmlaq_n_f64(v1107, v1096, v1741.f64[0]);
              v1113 = vmlaq_n_f64(vmulq_n_f64(v1100, *(double *)v1742.i64), v1101, v1734);
              v1114 = vmlaq_n_f64(vmlaq_n_f64(v1110, v1097, *(double *)v1746.i64), v1098, v1749.f64[0]);
              v1115 = vmlaq_n_f64(v1111, v1097, v1738);
              v1116 = vmlaq_n_f64(v1112, v1097, *(double *)v1767.i64);
              v1117 = vmlaq_n_f64(vmulq_n_f64(v1100, v1737.f64[0]), v1101, *(double *)v1736.i64);
              v1118 = vmlaq_n_f64(v1115, v1098, v1744.f64[0]);
              v1119 = vmlaq_n_f64(v1116, v1098, v1745.f64[0]);
              v1120 = vmlaq_n_f64(vmulq_n_f64(v1100, *(double *)v1743.i64), v1101, v1735);
              v1121 = vmlaq_n_f64(vmulq_n_f64(v1100, v1739.f64[0]), v1101, *(double *)v1740.i64);
              *(_QWORD *)&v1101.f64[0] = v1829.i64[0];
              v1101.f64[1] = v1825.f64[0];
              v1122 = vmlaq_n_f64(v1102, v1101, *(double *)v1751.i64);
              v1123 = vmlaq_n_f64(v1108, v1101, v1750);
              v1124 = vmlaq_n_f64(v1113, v1101, *(double *)v1780.i64);
              v1125 = vmlaq_n_f64(v1117, v1101, v1748.f64[0]);
              v1126 = vmlaq_n_f64(v1120, v1101, *(double *)v1747.i64);
              v1127 = vmlaq_n_f64(v1121, v1101, v1741.f64[0]);
              v1101.f64[0] = v1832;
              *(_QWORD *)&v1101.f64[1] = v1840.i64[0];
              v1128 = vmlaq_n_f64(v1122, v1101, *(double *)v1769.i64);
              v1129 = vmlaq_n_f64(v1123, v1101, *(double *)v1768.i64);
              v1130 = vmlaq_n_f64(v1124, v1101, v1727);
              v1131 = vmlaq_n_f64(v1125, v1101, *(double *)v1746.i64);
              v1132 = vmlaq_n_f64(v1126, v1101, v1738);
              v1133 = vmlaq_n_f64(v1127, v1101, *(double *)v1767.i64);
              v1101.f64[0] = v1873.f64[0];
              v1101.f64[1] = v1836.f64[0];
              v1134 = vmlaq_n_f64(v1130, v1101, v1729.f64[0]);
              v1135 = vmlaq_n_f64(v1131, v1101, v1749.f64[0]);
              v1136 = vmlaq_n_f64(v1132, v1101, v1744.f64[0]);
              v1137 = vmlaq_n_f64(v1133, v1101, v1745.f64[0]);
              v1138 = vaddq_f64(vmlaq_n_f64(v1128, v1101, v1770.f64[0]), v1093[1]);
              v1139 = vaddq_f64(vmlaq_n_f64(v1129, v1101, v1728.f64[0]), v1093[3]);
              v1140 = vaddq_f64(v1103, v1093[2]);
              v1141 = vaddq_f64(v1134, v1093[5]);
              v1142 = vaddq_f64(v1109, v1093[4]);
              v1143 = vaddq_f64(v1135, v1093[7]);
              v1144 = vaddq_f64(v1114, v1093[6]);
              v1145 = vaddq_f64(v1136, v1093[9]);
              v1146 = vaddq_f64(v1118, v1093[8]);
              v1147 = vaddq_f64(v1137, v1093[11]);
              *v1093 = vaddq_f64(v1099, *v1093);
              v1093[1] = v1138;
              v1093[2] = v1140;
              v1093[3] = v1139;
              v1093[4] = v1142;
              v1093[5] = v1141;
              v1093[6] = v1144;
              v1093[7] = v1143;
              v1093[8] = v1146;
              v1093[9] = v1145;
              v1093[10] = vaddq_f64(v1119, v1093[10]);
              v1093[11] = v1147;
              v1089 = v1843;
            }
            if (v1887)
            {
              v1148 = v1019[44] + 24 * v1089;
              v1150 = *(char **)v1148;
              v1149 = *(char **)(v1148 + 8);
              if (*(char **)v1148 != v1149)
              {
                while (*(_DWORD *)v1150 < v329)
                {
                  v1150 += 16;
                  if (v1150 == v1149)
                    goto LABEL_247;
                }
              }
              if (v1150 != v1149)
              {
                if (*(_DWORD *)v1150 == v329)
                {
                  v1151 = (float64x2_t *)(v1019[35] + 8 * *((_QWORD *)v1150 + 1));
                  goto LABEL_248;
                }
                v1149 = v1150;
              }
LABEL_247:
              v1151 = (float64x2_t *)sub_20F7ED7A4(v1650, (char **)v1148, v329, v1149);
              v1019 = v1898;
LABEL_248:
              *(_QWORD *)&v1152.f64[0] = v1828.i64[0];
              v1152.f64[1] = v1824;
              v1153.f64[0] = v1834;
              *(_QWORD *)&v1153.f64[1] = v1837.i64[0];
              *(_QWORD *)&v1154.f64[0] = v1827.i64[0];
              v1154.f64[1] = v1826;
              *(_QWORD *)&v1155.f64[0] = v1835.i64[0];
              *(_QWORD *)&v1155.f64[1] = v1838.i64[0];
              v1156.f64[0] = v1841.f64[0];
              v1156.f64[1] = v1839.f64[0];
              v1157 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v1152, *(double *)v1761.i64), v1153, v1752), v1154, *(double *)v1784.i64), v1155, *(double *)v1845.i64), v1156, v1846.f64[0]);
              *(_QWORD *)&v1158.f64[0] = v1830.i64[0];
              v1158.f64[1] = v1823;
              v1159.f64[0] = v1831;
              *(_QWORD *)&v1159.f64[1] = v1833.i64[0];
              v1160 = vmlaq_n_f64(vmulq_n_f64(v1158, *(double *)v1761.i64), v1159, v1752);
              v1161 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v1152, v1755.f64[0]), v1153, *(double *)v1754.i64), v1154, v1820), v1155, *(double *)v1818.i64), v1156, v1822.f64[0]);
              v1162 = vmlaq_n_f64(vmulq_n_f64(v1152, *(double *)v1762.i64), v1153, v1753);
              v1163 = vmlaq_n_f64(vmulq_n_f64(v1152, v1757.f64[0]), v1153, *(double *)v1756.i64);
              v1164 = vmlaq_n_f64(vmulq_n_f64(v1152, *(double *)v1816.i64), v1153, v1814);
              v1165 = vmlaq_n_f64(vmulq_n_f64(v1152, v1759.f64[0]), v1153, *(double *)v1781.i64);
              v1166 = vmlaq_n_f64(vmulq_n_f64(v1158, v1755.f64[0]), v1159, *(double *)v1754.i64);
              v1167 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(v1162, v1154, *(double *)v1821.i64), v1155, v1815), v1156, v1783.f64[0]);
              v1168 = vmlaq_n_f64(v1163, v1154, v1819.f64[0]);
              v1169 = vmlaq_n_f64(v1164, v1154, *(double *)v1782.i64);
              v1170 = vmlaq_n_f64(v1165, v1154, v1760.f64[0]);
              v1171 = vmlaq_n_f64(vmulq_n_f64(v1158, *(double *)v1762.i64), v1159, v1753);
              v1172 = vmlaq_n_f64(vmlaq_n_f64(v1168, v1155, *(double *)v1817.i64), v1156, v1766.f64[0]);
              v1173 = vmlaq_n_f64(v1169, v1155, v1758);
              v1174 = vmlaq_n_f64(v1170, v1155, *(double *)v1765.i64);
              v1175 = vmlaq_n_f64(vmulq_n_f64(v1158, v1757.f64[0]), v1159, *(double *)v1756.i64);
              v1176 = vmlaq_n_f64(v1173, v1156, v1763.f64[0]);
              v1177 = vmlaq_n_f64(v1174, v1156, v1764.f64[0]);
              v1178 = vmlaq_n_f64(vmulq_n_f64(v1158, *(double *)v1816.i64), v1159, v1814);
              v1179 = vmlaq_n_f64(vmulq_n_f64(v1158, v1759.f64[0]), v1159, *(double *)v1781.i64);
              *(_QWORD *)&v1159.f64[0] = v1829.i64[0];
              v1159.f64[1] = v1825.f64[0];
              v1180 = vmlaq_n_f64(v1160, v1159, *(double *)v1784.i64);
              v1181 = vmlaq_n_f64(v1166, v1159, v1820);
              v1182 = vmlaq_n_f64(v1171, v1159, *(double *)v1821.i64);
              v1183 = vmlaq_n_f64(v1175, v1159, v1819.f64[0]);
              v1184 = vmlaq_n_f64(v1178, v1159, *(double *)v1782.i64);
              v1185 = vmlaq_n_f64(v1179, v1159, v1760.f64[0]);
              v1159.f64[0] = v1832;
              *(_QWORD *)&v1159.f64[1] = v1840.i64[0];
              v1186 = vmlaq_n_f64(v1180, v1159, *(double *)v1845.i64);
              v1187 = vmlaq_n_f64(v1181, v1159, *(double *)v1818.i64);
              v1188 = vmlaq_n_f64(v1182, v1159, v1815);
              v1189 = vmlaq_n_f64(v1183, v1159, *(double *)v1817.i64);
              v1190 = vmlaq_n_f64(v1184, v1159, v1758);
              v1191 = vmlaq_n_f64(v1185, v1159, *(double *)v1765.i64);
              v1159.f64[0] = v1873.f64[0];
              v1159.f64[1] = v1836.f64[0];
              v1192 = vmlaq_n_f64(v1188, v1159, v1783.f64[0]);
              v1193 = vmlaq_n_f64(v1189, v1159, v1766.f64[0]);
              v1194 = vmlaq_n_f64(v1190, v1159, v1763.f64[0]);
              v1195 = vmlaq_n_f64(v1191, v1159, v1764.f64[0]);
              v1196 = vaddq_f64(vmlaq_n_f64(v1186, v1159, v1846.f64[0]), v1151[1]);
              v1197 = vaddq_f64(vmlaq_n_f64(v1187, v1159, v1822.f64[0]), v1151[3]);
              v1198 = vaddq_f64(v1161, v1151[2]);
              v1199 = vaddq_f64(v1192, v1151[5]);
              v1200 = vaddq_f64(v1167, v1151[4]);
              v1201 = vaddq_f64(v1193, v1151[7]);
              v1202 = vaddq_f64(v1172, v1151[6]);
              v1203 = vaddq_f64(v1194, v1151[9]);
              v1204 = vaddq_f64(v1176, v1151[8]);
              v1205 = vaddq_f64(v1195, v1151[11]);
              *v1151 = vaddq_f64(v1157, *v1151);
              v1151[1] = v1196;
              v1151[2] = v1198;
              v1151[3] = v1197;
              v1151[4] = v1200;
              v1151[5] = v1199;
              v1151[6] = v1202;
              v1151[7] = v1201;
              v1151[8] = v1204;
              v1151[9] = v1203;
              v1151[10] = vaddq_f64(v1177, v1151[10]);
              v1151[11] = v1205;
            }
            if (v1872 && v328 >= v329)
            {
              v1206 = v1019[16] + 24 * v328;
              v1208 = *(char **)v1206;
              v1207 = *(char **)(v1206 + 8);
              if (*(char **)v1206 != v1207)
              {
                while (*(_DWORD *)v1208 < v329)
                {
                  v1208 += 16;
                  if (v1208 == v1207)
                    goto LABEL_259;
                }
              }
              if (v1208 != v1207)
              {
                if (*(_DWORD *)v1208 == v329)
                {
                  v1209 = (float64x2_t *)(v1019[7] + 8 * *((_QWORD *)v1208 + 1));
                  goto LABEL_260;
                }
                v1207 = v1208;
              }
LABEL_259:
              v1209 = (float64x2_t *)sub_20F3D46D0(v1652, (char **)v1206, v329, v1207);
              v1019 = v1898;
LABEL_260:
              *(_QWORD *)&v1210.f64[0] = v1828.i64[0];
              v1210.f64[1] = v1824;
              v1211.f64[0] = v1834;
              *(_QWORD *)&v1211.f64[1] = v1837.i64[0];
              *(_QWORD *)&v1212.f64[0] = v1827.i64[0];
              v1212.f64[1] = v1826;
              *(_QWORD *)&v1213.f64[0] = v1835.i64[0];
              *(_QWORD *)&v1213.f64[1] = v1838.i64[0];
              v1214.f64[0] = v1841.f64[0];
              v1214.f64[1] = v1839.f64[0];
              *(_QWORD *)&v1215.f64[0] = v1830.i64[0];
              v1215.f64[1] = v1823;
              v1216 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v1210, *(double *)v1848.i64), v1211, v1794), v1212, *(double *)v1847.i64), v1213, *(double *)v1796.i64), v1214, v1856.f64[0]);
              v1217 = vmlaq_n_f64(vmulq_n_f64(v1210, v1791), v1211, *(double *)v1849.i64);
              v1218 = vmlaq_n_f64(vmulq_n_f64(v1210, *(double *)v1851.i64), v1211, v1792);
              v1219 = vmlaq_n_f64(vmulq_n_f64(v1210, v1789), v1211, *(double *)v1853.i64);
              v1211.f64[0] = v1831;
              *(_QWORD *)&v1211.f64[1] = v1833.i64[0];
              v1220 = vmlaq_n_f64(v1217, v1212, v1793);
              v1221 = vmlaq_n_f64(v1218, v1212, *(double *)v1850.i64);
              v1222 = vmlaq_n_f64(v1219, v1212, v1790.f64[0]);
              *(_QWORD *)&v1212.f64[0] = v1829.i64[0];
              v1212.f64[1] = v1825.f64[0];
              v1223 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v1215, *(double *)v1848.i64), v1211, v1794), v1212, *(double *)v1847.i64);
              v1224 = vmlaq_n_f64(vmlaq_n_f64(v1220, v1213, *(double *)v1852.i64), v1214, v1798.f64[0]);
              v1225 = vmlaq_n_f64(v1221, v1213, v1795);
              v1226 = vmlaq_n_f64(v1222, v1213, *(double *)v1854.i64);
              v1227 = vmlaq_n_f64(vmulq_n_f64(v1215, v1791), v1211, *(double *)v1849.i64);
              v1228 = vmlaq_n_f64(v1225, v1214, v1855.f64[0]);
              v1229 = vmlaq_n_f64(v1226, v1214, v1797.f64[0]);
              v1230 = vmlaq_n_f64(vmulq_n_f64(v1215, *(double *)v1851.i64), v1211, v1792);
              v1231 = vmlaq_n_f64(vmulq_n_f64(v1215, v1789), v1211, *(double *)v1853.i64);
              v1211.f64[0] = v1832;
              *(_QWORD *)&v1211.f64[1] = v1840.i64[0];
              v1232 = vmlaq_n_f64(v1223, v1211, *(double *)v1796.i64);
              v1233 = vmlaq_n_f64(vmlaq_n_f64(v1227, v1212, v1793), v1211, *(double *)v1852.i64);
              v1234 = vmlaq_n_f64(vmlaq_n_f64(v1230, v1212, *(double *)v1850.i64), v1211, v1795);
              v1235 = vmlaq_n_f64(vmlaq_n_f64(v1231, v1212, v1790.f64[0]), v1211, *(double *)v1854.i64);
              v1211.f64[0] = v1873.f64[0];
              v1211.f64[1] = v1836.f64[0];
              v1236 = vmlaq_n_f64(v1233, v1211, v1798.f64[0]);
              v1237 = vmlaq_n_f64(v1234, v1211, v1855.f64[0]);
              v1238 = vmlaq_n_f64(v1235, v1211, v1797.f64[0]);
              v1239 = vaddq_f64(vmlaq_n_f64(v1232, v1211, v1856.f64[0]), v1209[1]);
              v1240 = vaddq_f64(v1236, v1209[3]);
              v1241 = vaddq_f64(v1224, v1209[2]);
              v1242 = vaddq_f64(v1237, v1209[5]);
              v1243 = vaddq_f64(v1228, v1209[4]);
              v1244 = vaddq_f64(v1238, v1209[7]);
              *v1209 = vaddq_f64(v1216, *v1209);
              v1209[1] = v1239;
              v1209[2] = v1241;
              v1209[3] = v1240;
              v1209[4] = v1243;
              v1209[5] = v1242;
              v1209[6] = vaddq_f64(v1229, v1209[6]);
              v1209[7] = v1244;
            }
            v1245 = v1019[16] + 24 * v329;
            v1247 = *(char **)v1245;
            v1246 = *(char **)(v1245 + 8);
            if (*(char **)v1245 != v1246)
            {
              while (*(_DWORD *)v1247 < v329)
              {
                v1247 += 16;
                if (v1247 == v1246)
                  goto LABEL_269;
              }
            }
            if (v1247 != v1246)
            {
              if (*(_DWORD *)v1247 == v329)
              {
                v1248 = (float64x2_t *)(v1019[7] + 8 * *((_QWORD *)v1247 + 1));
                goto LABEL_270;
              }
              v1246 = v1247;
            }
LABEL_269:
            v1248 = (float64x2_t *)sub_20F3D46D0(v1652, (char **)v1245, v329, v1246);
            v1019 = v1898;
LABEL_270:
            *(_QWORD *)&v1249.f64[0] = v1828.i64[0];
            v1249.f64[1] = v1824;
            v1250.f64[0] = v1834;
            *(_QWORD *)&v1250.f64[1] = v1837.i64[0];
            *(_QWORD *)&v1251.f64[0] = v1827.i64[0];
            v1251.f64[1] = v1826;
            *(_QWORD *)&v1252.f64[0] = v1835.i64[0];
            *(_QWORD *)&v1252.f64[1] = v1838.i64[0];
            v1253.f64[0] = v1841.f64[0];
            v1253.f64[1] = v1839.f64[0];
            *(_QWORD *)&v1254.f64[0] = v1830.i64[0];
            v1254.f64[1] = v1823;
            v1255 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v1249, *(double *)v1828.i64), v1250, v1834), v1251, *(double *)v1827.i64), v1252, *(double *)v1835.i64), v1253, v1841.f64[0]);
            v1256 = vmlaq_n_f64(vmulq_n_f64(v1249, v1824), v1250, *(double *)v1837.i64);
            v1257 = vmlaq_n_f64(vmulq_n_f64(v1249, *(double *)v1830.i64), v1250, v1831);
            v1258 = vmlaq_n_f64(vmulq_n_f64(v1249, v1823), v1250, *(double *)v1833.i64);
            v1250.f64[0] = v1831;
            *(_QWORD *)&v1250.f64[1] = v1833.i64[0];
            v1259 = vmlaq_n_f64(v1256, v1251, v1826);
            v1260 = vmlaq_n_f64(v1257, v1251, *(double *)v1829.i64);
            v1261 = vmlaq_n_f64(v1258, v1251, v1825.f64[0]);
            *(_QWORD *)&v1251.f64[0] = v1829.i64[0];
            v1251.f64[1] = v1825.f64[0];
            v1262 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v1254, *(double *)v1828.i64), v1250, v1834), v1251, *(double *)v1827.i64);
            v1263 = vmlaq_n_f64(vmlaq_n_f64(v1259, v1252, *(double *)v1838.i64), v1253, v1839.f64[0]);
            v1264 = vmlaq_n_f64(v1260, v1252, v1832);
            v1265 = vmlaq_n_f64(v1261, v1252, *(double *)v1840.i64);
            v1266 = vmlaq_n_f64(vmulq_n_f64(v1254, v1824), v1250, *(double *)v1837.i64);
            v1267 = vmlaq_n_f64(v1264, v1253, v1873.f64[0]);
            v1268 = vmlaq_n_f64(v1265, v1253, v1836.f64[0]);
            v1269 = vmlaq_n_f64(vmulq_n_f64(v1254, *(double *)v1830.i64), v1250, v1831);
            v1270 = vmlaq_n_f64(vmulq_n_f64(v1254, v1823), v1250, *(double *)v1833.i64);
            v1250.f64[0] = v1832;
            *(_QWORD *)&v1250.f64[1] = v1840.i64[0];
            v1271 = vmlaq_n_f64(v1262, v1250, *(double *)v1835.i64);
            v1272 = vmlaq_n_f64(vmlaq_n_f64(v1266, v1251, v1826), v1250, *(double *)v1838.i64);
            v1273 = vmlaq_n_f64(vmlaq_n_f64(v1269, v1251, *(double *)v1829.i64), v1250, v1832);
            v1274 = vmlaq_n_f64(vmlaq_n_f64(v1270, v1251, v1825.f64[0]), v1250, *(double *)v1840.i64);
            v1250.f64[0] = v1873.f64[0];
            v1250.f64[1] = v1836.f64[0];
            v1275 = vmlaq_n_f64(v1272, v1250, v1839.f64[0]);
            v1276 = vmlaq_n_f64(v1273, v1250, v1873.f64[0]);
            v1277 = vmlaq_n_f64(v1274, v1250, v1836.f64[0]);
            v1278 = vaddq_f64(vmlaq_n_f64(v1271, v1250, v1841.f64[0]), v1248[1]);
            v1279 = vaddq_f64(v1275, v1248[3]);
            v1280 = vaddq_f64(v1263, v1248[2]);
            v1281 = vaddq_f64(v1276, v1248[5]);
            v1282 = vaddq_f64(v1267, v1248[4]);
            v1283 = vaddq_f64(v1277, v1248[7]);
            *v1248 = vaddq_f64(v1255, *v1248);
            v1248[1] = v1278;
            v1248[2] = v1280;
            v1248[3] = v1279;
            v1248[4] = v1282;
            v1248[5] = v1281;
            v1248[6] = vaddq_f64(v1268, v1248[6]);
            v1248[7] = v1283;
            v1088 = v1787;
          }
          v1284 = v1843;
          if (!v1872)
            goto LABEL_315;
          if (v1785)
          {
            v1285 = v1019[44] + 24 * v1088;
            v1287 = *(char **)v1285;
            v1286 = *(char **)(v1285 + 8);
            if (*(char **)v1285 != v1286)
            {
              while (*(_DWORD *)v1287 < v328)
              {
                v1287 += 16;
                if (v1287 == v1286)
                  goto LABEL_281;
              }
            }
            if (v1287 != v1286)
            {
              if (*(_DWORD *)v1287 == v328)
              {
                v1288 = (float64x2_t *)(v1019[35] + 8 * *((_QWORD *)v1287 + 1));
                goto LABEL_282;
              }
              v1286 = v1287;
            }
LABEL_281:
            v1288 = (float64x2_t *)sub_20F7ED7A4(v1650, (char **)v1285, v328, v1286);
            v1019 = v1898;
LABEL_282:
            *(_QWORD *)&v1289.f64[0] = v1848.i64[0];
            v1289.f64[1] = v1791;
            v1290.f64[0] = v1794;
            *(_QWORD *)&v1290.f64[1] = v1849.i64[0];
            *(_QWORD *)&v1291.f64[0] = v1847.i64[0];
            v1291.f64[1] = v1793;
            *(_QWORD *)&v1292.f64[0] = v1796.i64[0];
            *(_QWORD *)&v1292.f64[1] = v1852.i64[0];
            v1293.f64[0] = v1856.f64[0];
            v1293.f64[1] = v1798.f64[0];
            v1294 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v1289, *(double *)v1726.i64), v1290, v1724), v1291, *(double *)v1751.i64), v1292, *(double *)v1769.i64), v1293, v1770.f64[0]);
            *(_QWORD *)&v1295.f64[0] = v1851.i64[0];
            v1295.f64[1] = v1789;
            v1296.f64[0] = v1792;
            *(_QWORD *)&v1296.f64[1] = v1853.i64[0];
            v1297 = vmlaq_n_f64(vmulq_n_f64(v1295, *(double *)v1726.i64), v1296, v1724);
            v1298 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v1289, v1779.f64[0]), v1290, *(double *)v1725.i64), v1291, v1750), v1292, *(double *)v1768.i64), v1293, v1728.f64[0]);
            v1299 = vmlaq_n_f64(vmulq_n_f64(v1289, *(double *)v1742.i64), v1290, v1734);
            v1300 = vmlaq_n_f64(vmulq_n_f64(v1289, v1737.f64[0]), v1290, *(double *)v1736.i64);
            v1301 = vmlaq_n_f64(vmulq_n_f64(v1289, *(double *)v1743.i64), v1290, v1735);
            v1302 = vmlaq_n_f64(vmulq_n_f64(v1289, v1739.f64[0]), v1290, *(double *)v1740.i64);
            v1303 = vmlaq_n_f64(vmulq_n_f64(v1295, v1779.f64[0]), v1296, *(double *)v1725.i64);
            v1304 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(v1299, v1291, *(double *)v1780.i64), v1292, v1727), v1293, v1729.f64[0]);
            v1305 = vmlaq_n_f64(v1300, v1291, v1748.f64[0]);
            v1306 = vmlaq_n_f64(v1301, v1291, *(double *)v1747.i64);
            v1307 = vmlaq_n_f64(v1302, v1291, v1741.f64[0]);
            v1308 = vmlaq_n_f64(vmulq_n_f64(v1295, *(double *)v1742.i64), v1296, v1734);
            v1309 = vmlaq_n_f64(vmlaq_n_f64(v1305, v1292, *(double *)v1746.i64), v1293, v1749.f64[0]);
            v1310 = vmlaq_n_f64(v1306, v1292, v1738);
            v1311 = vmlaq_n_f64(v1307, v1292, *(double *)v1767.i64);
            v1312 = vmlaq_n_f64(vmulq_n_f64(v1295, v1737.f64[0]), v1296, *(double *)v1736.i64);
            v1313 = vmlaq_n_f64(v1310, v1293, v1744.f64[0]);
            v1314 = vmlaq_n_f64(v1311, v1293, v1745.f64[0]);
            v1315 = vmlaq_n_f64(vmulq_n_f64(v1295, *(double *)v1743.i64), v1296, v1735);
            v1316 = vmlaq_n_f64(vmulq_n_f64(v1295, v1739.f64[0]), v1296, *(double *)v1740.i64);
            *(_QWORD *)&v1296.f64[0] = v1850.i64[0];
            v1296.f64[1] = v1790.f64[0];
            v1317 = vmlaq_n_f64(v1297, v1296, *(double *)v1751.i64);
            v1318 = vmlaq_n_f64(v1303, v1296, v1750);
            v1319 = vmlaq_n_f64(v1308, v1296, *(double *)v1780.i64);
            v1320 = vmlaq_n_f64(v1312, v1296, v1748.f64[0]);
            v1321 = vmlaq_n_f64(v1315, v1296, *(double *)v1747.i64);
            v1322 = vmlaq_n_f64(v1316, v1296, v1741.f64[0]);
            v1296.f64[0] = v1795;
            *(_QWORD *)&v1296.f64[1] = v1854.i64[0];
            v1323 = vmlaq_n_f64(v1317, v1296, *(double *)v1769.i64);
            v1324 = vmlaq_n_f64(v1318, v1296, *(double *)v1768.i64);
            v1325 = vmlaq_n_f64(v1319, v1296, v1727);
            v1326 = vmlaq_n_f64(v1320, v1296, *(double *)v1746.i64);
            v1327 = vmlaq_n_f64(v1321, v1296, v1738);
            v1328 = vmlaq_n_f64(v1322, v1296, *(double *)v1767.i64);
            v1296.f64[0] = v1855.f64[0];
            v1296.f64[1] = v1797.f64[0];
            v1329 = vmlaq_n_f64(v1325, v1296, v1729.f64[0]);
            v1330 = vmlaq_n_f64(v1326, v1296, v1749.f64[0]);
            v1331 = vmlaq_n_f64(v1327, v1296, v1744.f64[0]);
            v1332 = vmlaq_n_f64(v1328, v1296, v1745.f64[0]);
            v1333 = vaddq_f64(vmlaq_n_f64(v1323, v1296, v1770.f64[0]), v1288[1]);
            v1334 = vaddq_f64(vmlaq_n_f64(v1324, v1296, v1728.f64[0]), v1288[3]);
            v1335 = vaddq_f64(v1298, v1288[2]);
            v1336 = vaddq_f64(v1329, v1288[5]);
            v1337 = vaddq_f64(v1304, v1288[4]);
            v1338 = vaddq_f64(v1330, v1288[7]);
            v1339 = vaddq_f64(v1309, v1288[6]);
            v1340 = vaddq_f64(v1331, v1288[9]);
            v1341 = vaddq_f64(v1313, v1288[8]);
            v1342 = vaddq_f64(v1332, v1288[11]);
            *v1288 = vaddq_f64(v1294, *v1288);
            v1288[1] = v1333;
            v1288[2] = v1335;
            v1288[3] = v1334;
            v1288[4] = v1337;
            v1288[5] = v1336;
            v1288[6] = v1339;
            v1288[7] = v1338;
            v1288[8] = v1341;
            v1288[9] = v1340;
            v1288[10] = vaddq_f64(v1314, v1288[10]);
            v1288[11] = v1342;
            v1284 = v1843;
          }
          if (v1887)
          {
            v1343 = v1019[44] + 24 * v1284;
            v1345 = *(char **)v1343;
            v1344 = *(char **)(v1343 + 8);
            if (*(char **)v1343 != v1344)
            {
              while (*(_DWORD *)v1345 < v328)
              {
                v1345 += 16;
                if (v1345 == v1344)
                  goto LABEL_292;
              }
            }
            if (v1345 != v1344)
            {
              if (*(_DWORD *)v1345 == v328)
              {
                v1346 = (float64x2_t *)(v1019[35] + 8 * *((_QWORD *)v1345 + 1));
                goto LABEL_293;
              }
              v1344 = v1345;
            }
LABEL_292:
            v1346 = (float64x2_t *)sub_20F7ED7A4(v1650, (char **)v1343, v328, v1344);
            v1019 = v1898;
LABEL_293:
            *(_QWORD *)&v1347.f64[0] = v1848.i64[0];
            v1347.f64[1] = v1791;
            v1348.f64[0] = v1794;
            *(_QWORD *)&v1348.f64[1] = v1849.i64[0];
            *(_QWORD *)&v1349.f64[0] = v1847.i64[0];
            v1349.f64[1] = v1793;
            *(_QWORD *)&v1350.f64[0] = v1796.i64[0];
            *(_QWORD *)&v1350.f64[1] = v1852.i64[0];
            v1351.f64[0] = v1856.f64[0];
            v1351.f64[1] = v1798.f64[0];
            v1352 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v1347, *(double *)v1761.i64), v1348, v1752), v1349, *(double *)v1784.i64), v1350, *(double *)v1845.i64), v1351, v1846.f64[0]);
            *(_QWORD *)&v1353.f64[0] = v1851.i64[0];
            v1353.f64[1] = v1789;
            v1354.f64[0] = v1792;
            *(_QWORD *)&v1354.f64[1] = v1853.i64[0];
            v1355 = vmlaq_n_f64(vmulq_n_f64(v1353, *(double *)v1761.i64), v1354, v1752);
            v1356 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v1347, v1755.f64[0]), v1348, *(double *)v1754.i64), v1349, v1820), v1350, *(double *)v1818.i64), v1351, v1822.f64[0]);
            v1357 = vmlaq_n_f64(vmulq_n_f64(v1347, *(double *)v1762.i64), v1348, v1753);
            v1358 = vmlaq_n_f64(vmulq_n_f64(v1347, v1757.f64[0]), v1348, *(double *)v1756.i64);
            v1359 = vmlaq_n_f64(vmulq_n_f64(v1347, *(double *)v1816.i64), v1348, v1814);
            v1360 = vmlaq_n_f64(vmulq_n_f64(v1347, v1759.f64[0]), v1348, *(double *)v1781.i64);
            v1361 = vmlaq_n_f64(vmulq_n_f64(v1353, v1755.f64[0]), v1354, *(double *)v1754.i64);
            v1362 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(v1357, v1349, *(double *)v1821.i64), v1350, v1815), v1351, v1783.f64[0]);
            v1363 = vmlaq_n_f64(v1358, v1349, v1819.f64[0]);
            v1364 = vmlaq_n_f64(v1359, v1349, *(double *)v1782.i64);
            v1365 = vmlaq_n_f64(v1360, v1349, v1760.f64[0]);
            v1366 = vmlaq_n_f64(vmulq_n_f64(v1353, *(double *)v1762.i64), v1354, v1753);
            v1367 = vmlaq_n_f64(vmlaq_n_f64(v1363, v1350, *(double *)v1817.i64), v1351, v1766.f64[0]);
            v1368 = vmlaq_n_f64(v1364, v1350, v1758);
            v1369 = vmlaq_n_f64(v1365, v1350, *(double *)v1765.i64);
            v1370 = vmlaq_n_f64(vmulq_n_f64(v1353, v1757.f64[0]), v1354, *(double *)v1756.i64);
            v1371 = vmlaq_n_f64(v1368, v1351, v1763.f64[0]);
            v1372 = vmlaq_n_f64(v1369, v1351, v1764.f64[0]);
            v1373 = vmlaq_n_f64(vmulq_n_f64(v1353, *(double *)v1816.i64), v1354, v1814);
            v1374 = vmlaq_n_f64(vmulq_n_f64(v1353, v1759.f64[0]), v1354, *(double *)v1781.i64);
            *(_QWORD *)&v1354.f64[0] = v1850.i64[0];
            v1354.f64[1] = v1790.f64[0];
            v1375 = vmlaq_n_f64(v1355, v1354, *(double *)v1784.i64);
            v1376 = vmlaq_n_f64(v1361, v1354, v1820);
            v1377 = vmlaq_n_f64(v1366, v1354, *(double *)v1821.i64);
            v1378 = vmlaq_n_f64(v1370, v1354, v1819.f64[0]);
            v1379 = vmlaq_n_f64(v1373, v1354, *(double *)v1782.i64);
            v1380 = vmlaq_n_f64(v1374, v1354, v1760.f64[0]);
            v1354.f64[0] = v1795;
            *(_QWORD *)&v1354.f64[1] = v1854.i64[0];
            v1381 = vmlaq_n_f64(v1375, v1354, *(double *)v1845.i64);
            v1382 = vmlaq_n_f64(v1376, v1354, *(double *)v1818.i64);
            v1383 = vmlaq_n_f64(v1377, v1354, v1815);
            v1384 = vmlaq_n_f64(v1378, v1354, *(double *)v1817.i64);
            v1385 = vmlaq_n_f64(v1379, v1354, v1758);
            v1386 = vmlaq_n_f64(v1380, v1354, *(double *)v1765.i64);
            v1354.f64[0] = v1855.f64[0];
            v1354.f64[1] = v1797.f64[0];
            v1387 = vmlaq_n_f64(v1383, v1354, v1783.f64[0]);
            v1388 = vmlaq_n_f64(v1384, v1354, v1766.f64[0]);
            v1389 = vmlaq_n_f64(v1385, v1354, v1763.f64[0]);
            v1390 = vmlaq_n_f64(v1386, v1354, v1764.f64[0]);
            v1391 = vaddq_f64(vmlaq_n_f64(v1381, v1354, v1846.f64[0]), v1346[1]);
            v1392 = vaddq_f64(vmlaq_n_f64(v1382, v1354, v1822.f64[0]), v1346[3]);
            v1393 = vaddq_f64(v1356, v1346[2]);
            v1394 = vaddq_f64(v1387, v1346[5]);
            v1395 = vaddq_f64(v1362, v1346[4]);
            v1396 = vaddq_f64(v1388, v1346[7]);
            v1397 = vaddq_f64(v1367, v1346[6]);
            v1398 = vaddq_f64(v1389, v1346[9]);
            v1399 = vaddq_f64(v1371, v1346[8]);
            v1400 = vaddq_f64(v1390, v1346[11]);
            *v1346 = vaddq_f64(v1352, *v1346);
            v1346[1] = v1391;
            v1346[2] = v1393;
            v1346[3] = v1392;
            v1346[4] = v1395;
            v1346[5] = v1394;
            v1346[6] = v1397;
            v1346[7] = v1396;
            v1346[8] = v1399;
            v1346[9] = v1398;
            v1346[10] = vaddq_f64(v1372, v1346[10]);
            v1346[11] = v1400;
          }
          v1401 = v1019[16] + 24 * v328;
          v1403 = *(char **)v1401;
          v1402 = *(char **)(v1401 + 8);
          if (*(char **)v1401 != v1402)
          {
            while (*(_DWORD *)v1403 < v328)
            {
              v1403 += 16;
              if (v1403 == v1402)
                goto LABEL_302;
            }
          }
          if (v1403 != v1402)
          {
            if (*(_DWORD *)v1403 == v328)
            {
              v1404 = v1019[7] + 8 * *((_QWORD *)v1403 + 1);
LABEL_303:
              v1405 = *(float64x2_t *)(v1404 + 16);
              v1406 = *(float64x2_t *)(v1404 + 48);
              v1407 = *(float64x2_t *)(v1404 + 80);
              *(_QWORD *)&v1408.f64[0] = v1848.i64[0];
              v1408.f64[1] = v1791;
              v1409.f64[0] = v1794;
              *(_QWORD *)&v1409.f64[1] = v1849.i64[0];
              *(_QWORD *)&v1410.f64[0] = v1847.i64[0];
              v1410.f64[1] = v1793;
              *(_QWORD *)&v1411.f64[0] = v1796.i64[0];
              *(_QWORD *)&v1411.f64[1] = v1852.i64[0];
              *(_QWORD *)&v1412.f64[0] = v1851.i64[0];
              v1412.f64[1] = v1789;
              v1413.f64[0] = v1792;
              *(_QWORD *)&v1413.f64[1] = v1853.i64[0];
              *(_QWORD *)&v1414.f64[0] = v1850.i64[0];
              v1414.f64[1] = v1790.f64[0];
              v1415.f64[0] = v1795;
              *(_QWORD *)&v1415.f64[1] = v1854.i64[0];
              v1416.f64[0] = v1855.f64[0];
              v1416.f64[1] = v1797.f64[0];
              v1417.f64[0] = v1856.f64[0];
              v1417.f64[1] = v1798.f64[0];
              v1418 = vaddq_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v1408, v1791), v1409, *(double *)v1849.i64), v1410, v1793), v1411, *(double *)v1852.i64), v1417, v1798.f64[0]), *(float64x2_t *)(v1404 + 32));
              v1419 = vaddq_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v1408, *(double *)v1851.i64), v1409, v1792), v1410, *(double *)v1850.i64), v1411, v1795), v1417, v1855.f64[0]), *(float64x2_t *)(v1404 + 64));
              v1882 = v1415;
              v1877 = v1416;
              v1420 = vaddq_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v1412, v1789), v1413, *(double *)v1853.i64), v1414, v1790.f64[0]), v1415, *(double *)v1854.i64), v1416, v1797.f64[0]), *(float64x2_t *)(v1404 + 112));
              *(float64x2_t *)v1404 = vaddq_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v1408, *(double *)v1848.i64), v1409, v1794), v1410, *(double *)v1847.i64), v1411, *(double *)v1796.i64), v1417, v1856.f64[0]), *(float64x2_t *)v1404);
              *(float64x2_t *)(v1404 + 16) = vaddq_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v1412, *(double *)v1848.i64), v1413, v1794), v1414, *(double *)v1847.i64), v1415, *(double *)v1796.i64), v1416, v1856.f64[0]), v1405);
              *(float64x2_t *)(v1404 + 32) = v1418;
              *(float64x2_t *)(v1404 + 48) = vaddq_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v1412, v1791), v1413, *(double *)v1849.i64), v1414, v1793), v1415, *(double *)v1852.i64), v1416, v1798.f64[0]), v1406);
              *(float64x2_t *)(v1404 + 64) = v1419;
              *(float64x2_t *)(v1404 + 80) = vaddq_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v1412, *(double *)v1851.i64), v1413, v1792), v1414, *(double *)v1850.i64), v1415, v1795), v1416, v1855.f64[0]), v1407);
              v1870 = v1417;
              *(float64x2_t *)(v1404 + 96) = vaddq_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v1408, v1789), v1409, *(double *)v1853.i64), v1410, v1790.f64[0]), v1411, *(double *)v1854.i64), v1417, v1797.f64[0]), *(float64x2_t *)(v1404 + 96));
              *(float64x2_t *)(v1404 + 112) = v1420;
              v1284 = v1843;
              v1088 = v1787;
              if (v1842 && v329 >= v328)
              {
                v1421 = v1019[16] + 24 * v329;
                v1423 = *(char **)v1421;
                v1422 = *(char **)(v1421 + 8);
                if (*(char **)v1421 != v1422)
                {
                  while (*(_DWORD *)v1423 < v328)
                  {
                    v1423 += 16;
                    if (v1423 == v1422)
                      goto LABEL_313;
                  }
                }
                if (v1423 != v1422)
                {
                  if (*(_DWORD *)v1423 == v328)
                  {
                    v1424 = (float64x2_t *)(v1019[7] + 8 * *((_QWORD *)v1423 + 1));
                    goto LABEL_314;
                  }
                  v1422 = v1423;
                }
LABEL_313:
                v1424 = (float64x2_t *)sub_20F3D46D0(v1652, (char **)v1421, v328, v1422);
                v1019 = v1898;
LABEL_314:
                v1425 = vaddq_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v1412, *(double *)v1828.i64), v1413, v1834), v1414, *(double *)v1827.i64), v1882, *(double *)v1835.i64), v1877, v1841.f64[0]), v1424[1]);
                v1426 = vaddq_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v1412, v1824), v1413, *(double *)v1837.i64), v1414, v1826), v1882, *(double *)v1838.i64), v1877, v1839.f64[0]), v1424[3]);
                v1427 = vaddq_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v1408, v1824), v1409, *(double *)v1837.i64), v1410, v1826), v1411, *(double *)v1838.i64), v1870, v1839.f64[0]), v1424[2]);
                v1428 = vaddq_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v1412, *(double *)v1830.i64), v1413, v1831), v1414, *(double *)v1829.i64), v1882, v1832), v1877, v1873.f64[0]), v1424[5]);
                v1429 = vaddq_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v1408, *(double *)v1830.i64), v1409, v1831), v1410, *(double *)v1829.i64), v1411, v1832), v1870, v1873.f64[0]), v1424[4]);
                v1430 = vaddq_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v1412, v1823), v1413, *(double *)v1833.i64), v1414, v1825.f64[0]), v1882, *(double *)v1840.i64), v1877, v1836.f64[0]), v1424[7]);
                *v1424 = vaddq_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v1408, *(double *)v1828.i64), v1409, v1834), v1410, *(double *)v1827.i64), v1411, *(double *)v1835.i64), v1870, v1841.f64[0]), *v1424);
                v1424[1] = v1425;
                v1424[2] = v1427;
                v1424[3] = v1426;
                v1424[4] = v1429;
                v1424[5] = v1428;
                v1424[6] = vaddq_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v1408, v1823), v1409, *(double *)v1833.i64), v1410, v1825.f64[0]), v1411, *(double *)v1840.i64), v1870, v1836.f64[0]), v1424[6]);
                v1424[7] = v1430;
                v1284 = v1843;
                v1088 = v1787;
              }
LABEL_315:
              if (v1887)
              {
                if (v1785 && v1088 >= v1284)
                {
                  v1431 = v1019[58] + 24 * v1088;
                  v1433 = *(char **)v1431;
                  v1432 = *(char **)(v1431 + 8);
                  if (*(char **)v1431 != v1432)
                  {
                    while (*(_DWORD *)v1433 < v1284)
                    {
                      v1433 += 16;
                      if (v1433 == v1432)
                        goto LABEL_326;
                    }
                  }
                  if (v1433 != v1432)
                  {
                    if (*(_DWORD *)v1433 == v1284)
                    {
                      v1434 = (float64x2_t *)(v1019[49] + 8 * *((_QWORD *)v1433 + 1));
                      goto LABEL_327;
                    }
                    v1432 = v1433;
                  }
LABEL_326:
                  v1434 = (float64x2_t *)sub_20F3D4374(v1651, (char **)v1431, v1284, v1432);
                  v1019 = v1898;
                  v1284 = v1843;
LABEL_327:
                  *(_QWORD *)&v1435.f64[0] = v1761.i64[0];
                  v1435.f64[1] = v1755.f64[0];
                  v1436.f64[0] = v1752;
                  *(_QWORD *)&v1436.f64[1] = v1754.i64[0];
                  *(_QWORD *)&v1437.f64[0] = v1784.i64[0];
                  v1437.f64[1] = v1820;
                  *(_QWORD *)&v1438.f64[0] = v1845.i64[0];
                  *(_QWORD *)&v1438.f64[1] = v1818.i64[0];
                  v1439.f64[0] = v1846.f64[0];
                  v1439.f64[1] = v1822.f64[0];
                  v1916 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v1435, *(double *)v1726.i64), v1436, v1724), v1437, *(double *)v1751.i64), v1438, *(double *)v1769.i64), v1439, v1770.f64[0]);
                  *(_QWORD *)&v1440.f64[0] = v1762.i64[0];
                  v1440.f64[1] = v1757.f64[0];
                  v1441.f64[0] = v1753;
                  *(_QWORD *)&v1441.f64[1] = v1756.i64[0];
                  *(_QWORD *)&v1442.f64[0] = v1821.i64[0];
                  v1442.f64[1] = v1819.f64[0];
                  v1910 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v1440, *(double *)v1726.i64), v1441, v1724), v1442, *(double *)v1751.i64);
                  *(_QWORD *)&v1443.f64[0] = v1816.i64[0];
                  v1443.f64[1] = v1759.f64[0];
                  v1444.f64[0] = v1814;
                  *(_QWORD *)&v1444.f64[1] = v1781.i64[0];
                  *(_QWORD *)&v1445.f64[0] = v1782.i64[0];
                  v1445.f64[1] = v1760.f64[0];
                  v1446 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v1443, *(double *)v1726.i64), v1444, v1724), v1445, *(double *)v1751.i64);
                  v1447 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v1435, v1779.f64[0]), v1436, *(double *)v1725.i64), v1437, v1750), v1438, *(double *)v1768.i64), v1439, v1728.f64[0]);
                  v1448.f64[0] = v1815;
                  *(_QWORD *)&v1448.f64[1] = v1817.i64[0];
                  v1895 = v1448;
                  v1449 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v1440, v1779.f64[0]), v1441, *(double *)v1725.i64), v1442, v1750);
                  v1450 = vmlaq_n_f64(vmulq_n_f64(v1443, v1779.f64[0]), v1444, *(double *)v1725.i64);
                  v1451 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v1435, *(double *)v1742.i64), v1436, v1734), v1437, *(double *)v1780.i64), v1438, v1727), v1439, v1729.f64[0]);
                  v1452 = vmlaq_n_f64(vmulq_n_f64(v1435, v1737.f64[0]), v1436, *(double *)v1736.i64);
                  v1453 = vmlaq_n_f64(vmulq_n_f64(v1435, *(double *)v1743.i64), v1436, v1735);
                  v1454 = vmlaq_n_f64(vmulq_n_f64(v1435, v1739.f64[0]), v1436, *(double *)v1740.i64);
                  v1455 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v1440, *(double *)v1742.i64), v1441, v1734), v1442, *(double *)v1780.i64);
                  v1456 = vmlaq_n_f64(v1452, v1437, v1748.f64[0]);
                  v1457 = vmlaq_n_f64(v1453, v1437, *(double *)v1747.i64);
                  v1458 = vmlaq_n_f64(v1454, v1437, v1741.f64[0]);
                  v1459 = vmlaq_n_f64(vmulq_n_f64(v1443, *(double *)v1742.i64), v1444, v1734);
                  v1460 = vmlaq_n_f64(vmlaq_n_f64(v1456, v1438, *(double *)v1746.i64), v1439, v1749.f64[0]);
                  v1461 = vmlaq_n_f64(v1457, v1438, v1738);
                  v1462 = vmlaq_n_f64(v1458, v1438, *(double *)v1767.i64);
                  v1463 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v1440, v1737.f64[0]), v1441, *(double *)v1736.i64), v1442, v1748.f64[0]);
                  v1464 = vmlaq_n_f64(v1461, v1439, v1744.f64[0]);
                  v1465 = vmlaq_n_f64(v1462, v1439, v1745.f64[0]);
                  v1466 = vmlaq_n_f64(vmulq_n_f64(v1440, *(double *)v1743.i64), v1441, v1735);
                  v1467 = vmlaq_n_f64(vmulq_n_f64(v1440, v1739.f64[0]), v1441, *(double *)v1740.i64);
                  v1468 = vmlaq_n_f64(vmulq_n_f64(v1443, v1737.f64[0]), v1444, *(double *)v1736.i64);
                  v1469 = vmlaq_n_f64(v1466, v1442, *(double *)v1747.i64);
                  v1470 = vmlaq_n_f64(v1467, v1442, v1741.f64[0]);
                  v1471 = vmlaq_n_f64(vmulq_n_f64(v1443, *(double *)v1743.i64), v1444, v1735);
                  v1472 = vmlaq_n_f64(vmulq_n_f64(v1443, v1739.f64[0]), v1444, *(double *)v1740.i64);
                  v1444.f64[0] = v1758;
                  *(_QWORD *)&v1444.f64[1] = v1765.i64[0];
                  v1473 = vmlaq_n_f64(v1450, v1445, v1750);
                  v1474 = vmlaq_n_f64(v1459, v1445, *(double *)v1780.i64);
                  v1475 = vmlaq_n_f64(v1468, v1445, v1748.f64[0]);
                  v1476 = vmlaq_n_f64(v1471, v1445, *(double *)v1747.i64);
                  v1477 = vmlaq_n_f64(v1472, v1445, v1741.f64[0]);
                  v1445.f64[0] = v1763.f64[0];
                  v1445.f64[1] = v1764.f64[0];
                  v1478 = vaddq_f64(vmlaq_n_f64(vmlaq_n_f64(v1446, v1444, *(double *)v1769.i64), v1445, v1770.f64[0]), v1434[2]);
                  v1443.f64[0] = v1783.f64[0];
                  v1443.f64[1] = v1766.f64[0];
                  v1479 = v1448;
                  v1480 = vaddq_f64(vmlaq_n_f64(vmlaq_n_f64(v1910, v1448, *(double *)v1769.i64), v1443, v1770.f64[0]), v1434[1]);
                  v1481 = vaddq_f64(vmlaq_n_f64(vmlaq_n_f64(v1473, v1444, *(double *)v1768.i64), v1445, v1728.f64[0]), v1434[5]);
                  v1482 = vaddq_f64(vmlaq_n_f64(vmlaq_n_f64(v1449, v1448, *(double *)v1768.i64), v1443, v1728.f64[0]), v1434[4]);
                  v1483 = vaddq_f64(v1447, v1434[3]);
                  v1484 = vaddq_f64(vmlaq_n_f64(vmlaq_n_f64(v1474, v1444, v1727), v1445, v1729.f64[0]), v1434[8]);
                  v1485 = vaddq_f64(vmlaq_n_f64(vmlaq_n_f64(v1455, v1895, v1727), v1443, v1729.f64[0]), v1434[7]);
                  v1486 = vaddq_f64(v1451, v1434[6]);
                  v1487 = vaddq_f64(vmlaq_n_f64(vmlaq_n_f64(v1475, v1444, *(double *)v1746.i64), v1445, v1749.f64[0]), v1434[11]);
                  v1488 = vaddq_f64(vmlaq_n_f64(vmlaq_n_f64(v1463, v1895, *(double *)v1746.i64), v1443, v1749.f64[0]), v1434[10]);
                  v1489 = vaddq_f64(v1460, v1434[9]);
                  v1490 = vaddq_f64(vmlaq_n_f64(vmlaq_n_f64(v1476, v1444, v1738), v1445, v1744.f64[0]), v1434[14]);
                  v1491 = vaddq_f64(vmlaq_n_f64(vmlaq_n_f64(v1469, v1895, v1738), v1443, v1744.f64[0]), v1434[13]);
                  v1492 = vaddq_f64(v1464, v1434[12]);
                  v1493 = vaddq_f64(vmlaq_n_f64(vmlaq_n_f64(v1477, v1444, *(double *)v1767.i64), v1445, v1745.f64[0]), v1434[17]);
                  v1494 = vaddq_f64(v1465, v1434[15]);
                  *v1434 = vaddq_f64(v1916, *v1434);
                  v1434[1] = v1480;
                  v1434[2] = v1478;
                  v1434[3] = v1483;
                  v1434[4] = v1482;
                  v1434[5] = v1481;
                  v1434[6] = v1486;
                  v1434[7] = v1485;
                  v1434[8] = v1484;
                  v1434[9] = v1489;
                  v1434[10] = v1488;
                  v1434[11] = v1487;
                  v1434[12] = v1492;
                  v1434[13] = v1491;
                  v1434[14] = v1490;
                  v1434[15] = v1494;
                  v1434[16] = vaddq_f64(vmlaq_n_f64(vmlaq_n_f64(v1470, v1479, *(double *)v1767.i64), v1443, v1745.f64[0]), v1434[16]);
                  v1434[17] = v1493;
                }
                v1495 = v1019[58] + 24 * v1284;
                v1497 = *(char **)v1495;
                v1496 = *(char **)(v1495 + 8);
                if (*(char **)v1495 != v1496)
                {
                  while (*(_DWORD *)v1497 < v1284)
                  {
                    v1497 += 16;
                    if (v1497 == v1496)
                      goto LABEL_336;
                  }
                }
                if (v1497 != v1496)
                {
                  if (*(_DWORD *)v1497 == v1284)
                  {
                    v1498 = (float64x2_t *)(v1019[49] + 8 * *((_QWORD *)v1497 + 1));
                    goto LABEL_337;
                  }
                  v1496 = v1497;
                }
LABEL_336:
                v1498 = (float64x2_t *)sub_20F3D4374(v1651, (char **)v1495, v1284, v1496);
                v1019 = v1898;
                v1284 = v1843;
LABEL_337:
                *(_QWORD *)&v1499.f64[0] = v1761.i64[0];
                v1499.f64[1] = v1755.f64[0];
                v1500.f64[0] = v1752;
                *(_QWORD *)&v1500.f64[1] = v1754.i64[0];
                *(_QWORD *)&v1501.f64[0] = v1784.i64[0];
                v1501.f64[1] = v1820;
                *(_QWORD *)&v1502.f64[0] = v1845.i64[0];
                *(_QWORD *)&v1502.f64[1] = v1818.i64[0];
                v1503.f64[0] = v1846.f64[0];
                v1503.f64[1] = v1822.f64[0];
                v1917 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v1499, *(double *)v1761.i64), v1500, v1752), v1501, *(double *)v1784.i64), v1502, *(double *)v1845.i64), v1503, v1846.f64[0]);
                *(_QWORD *)&v1504.f64[0] = v1762.i64[0];
                v1504.f64[1] = v1757.f64[0];
                v1505.f64[0] = v1753;
                *(_QWORD *)&v1505.f64[1] = v1756.i64[0];
                *(_QWORD *)&v1506.f64[0] = v1821.i64[0];
                v1506.f64[1] = v1819.f64[0];
                v1911 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v1504, *(double *)v1761.i64), v1505, v1752), v1506, *(double *)v1784.i64);
                *(_QWORD *)&v1507.f64[0] = v1816.i64[0];
                v1507.f64[1] = v1759.f64[0];
                v1508.f64[0] = v1814;
                *(_QWORD *)&v1508.f64[1] = v1781.i64[0];
                *(_QWORD *)&v1509.f64[0] = v1782.i64[0];
                v1509.f64[1] = v1760.f64[0];
                v1510 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v1507, *(double *)v1761.i64), v1508, v1752), v1509, *(double *)v1784.i64);
                v1511 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v1499, v1755.f64[0]), v1500, *(double *)v1754.i64), v1501, v1820), v1502, *(double *)v1818.i64), v1503, v1822.f64[0]);
                v1512.f64[0] = v1815;
                *(_QWORD *)&v1512.f64[1] = v1817.i64[0];
                v1513 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v1504, v1755.f64[0]), v1505, *(double *)v1754.i64), v1506, v1820);
                v1514 = vmlaq_n_f64(vmulq_n_f64(v1507, v1755.f64[0]), v1508, *(double *)v1754.i64);
                v1515 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v1499, *(double *)v1762.i64), v1500, v1753), v1501, *(double *)v1821.i64), v1502, v1815), v1503, v1783.f64[0]);
                v1516 = vmlaq_n_f64(vmulq_n_f64(v1499, v1757.f64[0]), v1500, *(double *)v1756.i64);
                v1517 = vmlaq_n_f64(vmulq_n_f64(v1499, *(double *)v1816.i64), v1500, v1814);
                v1518 = vmlaq_n_f64(vmulq_n_f64(v1499, v1759.f64[0]), v1500, *(double *)v1781.i64);
                v1519 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v1504, *(double *)v1762.i64), v1505, v1753), v1506, *(double *)v1821.i64);
                v1520 = vmlaq_n_f64(v1516, v1501, v1819.f64[0]);
                v1521 = vmlaq_n_f64(v1517, v1501, *(double *)v1782.i64);
                v1522 = vmlaq_n_f64(v1518, v1501, v1760.f64[0]);
                v1523 = vmlaq_n_f64(vmulq_n_f64(v1507, *(double *)v1762.i64), v1508, v1753);
                v1524 = vmlaq_n_f64(vmlaq_n_f64(v1520, v1502, *(double *)v1817.i64), v1503, v1766.f64[0]);
                v1525 = vmlaq_n_f64(v1521, v1502, v1758);
                v1526 = vmlaq_n_f64(v1522, v1502, *(double *)v1765.i64);
                v1527 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v1504, v1757.f64[0]), v1505, *(double *)v1756.i64), v1506, v1819.f64[0]);
                v1528 = vmlaq_n_f64(v1525, v1503, v1763.f64[0]);
                v1529 = vmlaq_n_f64(v1526, v1503, v1764.f64[0]);
                v1530 = vmlaq_n_f64(vmulq_n_f64(v1504, *(double *)v1816.i64), v1505, v1814);
                v1531 = vmlaq_n_f64(vmulq_n_f64(v1504, v1759.f64[0]), v1505, *(double *)v1781.i64);
                v1532 = vmlaq_n_f64(vmulq_n_f64(v1507, v1757.f64[0]), v1508, *(double *)v1756.i64);
                v1533 = vmlaq_n_f64(vmulq_n_f64(v1507, *(double *)v1816.i64), v1508, v1814);
                v1534 = vmlaq_n_f64(vmulq_n_f64(v1507, v1759.f64[0]), v1508, *(double *)v1781.i64);
                v1508.f64[0] = v1758;
                *(_QWORD *)&v1508.f64[1] = v1765.i64[0];
                v1535 = vmlaq_n_f64(v1523, v1509, *(double *)v1821.i64);
                v1536 = vmlaq_n_f64(v1532, v1509, v1819.f64[0]);
                v1537 = vmlaq_n_f64(v1533, v1509, *(double *)v1782.i64);
                v1538 = vmlaq_n_f64(v1534, v1509, v1760.f64[0]);
                v1539.f64[0] = v1763.f64[0];
                v1539.f64[1] = v1764.f64[0];
                v1890 = vaddq_f64(vmlaq_n_f64(vmlaq_n_f64(v1510, v1508, *(double *)v1845.i64), v1539, v1846.f64[0]), v1498[2]);
                v1507.f64[0] = v1783.f64[0];
                v1507.f64[1] = v1766.f64[0];
                v1540 = vaddq_f64(vmlaq_n_f64(vmlaq_n_f64(v1911, v1512, *(double *)v1845.i64), v1507, v1846.f64[0]), v1498[1]);
                v1541 = vaddq_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(v1514, v1509, v1820), v1508, *(double *)v1818.i64), v1539, v1822.f64[0]), v1498[5]);
                v1542 = vaddq_f64(vmlaq_n_f64(vmlaq_n_f64(v1513, v1512, *(double *)v1818.i64), v1507, v1822.f64[0]), v1498[4]);
                v1543 = vaddq_f64(v1511, v1498[3]);
                v1544 = vaddq_f64(vmlaq_n_f64(vmlaq_n_f64(v1535, v1508, v1815), v1539, v1783.f64[0]), v1498[8]);
                v1545 = vaddq_f64(vmlaq_n_f64(vmlaq_n_f64(v1519, v1512, v1815), v1507, v1783.f64[0]), v1498[7]);
                v1546 = vaddq_f64(v1515, v1498[6]);
                v1547 = vaddq_f64(vmlaq_n_f64(vmlaq_n_f64(v1536, v1508, *(double *)v1817.i64), v1539, v1766.f64[0]), v1498[11]);
                v1548 = vaddq_f64(vmlaq_n_f64(vmlaq_n_f64(v1527, v1512, *(double *)v1817.i64), v1507, v1766.f64[0]), v1498[10]);
                v1549 = vaddq_f64(v1524, v1498[9]);
                v1550 = vaddq_f64(vmlaq_n_f64(vmlaq_n_f64(v1537, v1508, v1758), v1539, v1763.f64[0]), v1498[14]);
                v1551 = vaddq_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(v1530, v1506, *(double *)v1782.i64), v1512, v1758), v1507, v1763.f64[0]), v1498[13]);
                v1552 = vaddq_f64(v1528, v1498[12]);
                v1553 = vaddq_f64(vmlaq_n_f64(vmlaq_n_f64(v1538, v1508, *(double *)v1765.i64), v1539, v1764.f64[0]), v1498[17]);
                v1554 = vaddq_f64(v1529, v1498[15]);
                *v1498 = vaddq_f64(v1917, *v1498);
                v1498[1] = v1540;
                v1498[2] = v1890;
                v1498[3] = v1543;
                v1498[4] = v1542;
                v1498[5] = v1541;
                v1498[6] = v1546;
                v1498[7] = v1545;
                v1498[8] = v1544;
                v1498[9] = v1549;
                v1498[10] = v1548;
                v1498[11] = v1547;
                v1498[12] = v1552;
                v1498[13] = v1551;
                v1498[14] = v1550;
                v1498[15] = v1554;
                v1498[16] = vaddq_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(v1531, v1506, v1760.f64[0]), v1512, *(double *)v1765.i64), v1507, v1764.f64[0]), v1498[16]);
                v1498[17] = v1553;
                v1088 = v1787;
              }
              if (!v1785)
                goto LABEL_361;
              v1555 = v1019[58] + 24 * v1088;
              v1557 = *(char **)v1555;
              v1556 = *(char **)(v1555 + 8);
              if (*(char **)v1555 != v1556)
              {
                while (*(_DWORD *)v1557 < v1088)
                {
                  v1557 += 16;
                  if (v1557 == v1556)
                    goto LABEL_347;
                }
              }
              if (v1557 != v1556)
              {
                if (*(_DWORD *)v1557 == v1088)
                {
                  v1558 = v1019[49] + 8 * *((_QWORD *)v1557 + 1);
                  v1284 = v1843;
LABEL_348:
                  *(_QWORD *)&v1559.f64[0] = v1726.i64[0];
                  v1559.f64[1] = v1779.f64[0];
                  v1560.f64[0] = v1724;
                  *(_QWORD *)&v1560.f64[1] = v1725.i64[0];
                  *(_QWORD *)&v1561.f64[0] = v1751.i64[0];
                  v1561.f64[1] = v1750;
                  *(_QWORD *)&v1562.f64[0] = v1769.i64[0];
                  *(_QWORD *)&v1562.f64[1] = v1768.i64[0];
                  v1563.f64[0] = v1770.f64[0];
                  v1563.f64[1] = v1728.f64[0];
                  *(_QWORD *)&v1564.f64[0] = v1742.i64[0];
                  v1564.f64[1] = v1737.f64[0];
                  v1565.f64[0] = v1734;
                  v1570.f64[0] = v1735;
                  *(_QWORD *)&v1565.f64[1] = v1736.i64[0];
                  *(_QWORD *)&v1566.f64[0] = v1780.i64[0];
                  v1566.f64[1] = v1748.f64[0];
                  v1567.f64[0] = v1727;
                  *(_QWORD *)&v1567.f64[1] = v1746.i64[0];
                  v1568.f64[0] = v1729.f64[0];
                  v1568.f64[1] = v1749.f64[0];
                  *(_QWORD *)&v1569.f64[0] = v1743.i64[0];
                  v1569.f64[1] = v1739.f64[0];
                  *(_QWORD *)&v1570.f64[1] = v1740.i64[0];
                  *(_QWORD *)&v1571.f64[0] = v1747.i64[0];
                  v1571.f64[1] = v1741.f64[0];
                  v1572.f64[0] = v1738;
                  *(_QWORD *)&v1572.f64[1] = v1767.i64[0];
                  v1573.f64[0] = v1744.f64[0];
                  v1573.f64[1] = v1745.f64[0];
                  v1574 = *(float64x2_t *)(v1558 + 160);
                  v1891 = vaddq_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v1569, *(double *)v1726.i64), v1570, v1724), v1571, *(double *)v1751.i64), v1572, *(double *)v1769.i64), v1573, v1770.f64[0]), *(float64x2_t *)(v1558 + 32));
                  v1878 = vaddq_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v1559, *(double *)v1726.i64), v1560, v1724), v1561, *(double *)v1751.i64), v1562, *(double *)v1769.i64), v1563, v1770.f64[0]), *(float64x2_t *)v1558);
                  v1883 = vaddq_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v1569, v1779.f64[0]), v1570, *(double *)v1725.i64), v1571, v1750), v1572, *(double *)v1768.i64), v1573, v1728.f64[0]), *(float64x2_t *)(v1558 + 80));
                  v1575 = vaddq_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v1564, v1779.f64[0]), v1565, *(double *)v1725.i64), v1566, v1750), v1567, *(double *)v1768.i64), v1568, v1728.f64[0]), *(float64x2_t *)(v1558 + 64));
                  v1576 = vaddq_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v1559, v1779.f64[0]), v1560, *(double *)v1725.i64), v1561, v1750), v1562, *(double *)v1768.i64), v1563, v1728.f64[0]), *(float64x2_t *)(v1558 + 48));
                  v1577 = vaddq_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v1569, *(double *)v1742.i64), v1570, v1734), v1571, *(double *)v1780.i64), v1572, v1727), v1573, v1729.f64[0]), *(float64x2_t *)(v1558 + 128));
                  v1578 = vaddq_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v1564, *(double *)v1742.i64), v1565, v1734), v1566, *(double *)v1780.i64), v1567, v1727), v1568, v1729.f64[0]), *(float64x2_t *)(v1558 + 112));
                  v1579 = vaddq_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v1559, *(double *)v1742.i64), v1560, v1734), v1561, *(double *)v1780.i64), v1562, v1727), v1563, v1729.f64[0]), *(float64x2_t *)(v1558 + 96));
                  v1580 = vaddq_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v1569, v1737.f64[0]), v1570, *(double *)v1736.i64), v1571, v1748.f64[0]), v1572, *(double *)v1746.i64), v1573, v1749.f64[0]), *(float64x2_t *)(v1558 + 176));
                  v1581 = vaddq_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v1559, v1737.f64[0]), v1560, *(double *)v1736.i64), v1561, v1748.f64[0]), v1562, *(double *)v1746.i64), v1563, v1749.f64[0]), *(float64x2_t *)(v1558 + 144));
                  v1582 = vaddq_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v1569, *(double *)v1743.i64), v1570, v1735), v1571, *(double *)v1747.i64), v1572, v1738), v1573, v1744.f64[0]), *(float64x2_t *)(v1558 + 224));
                  v1583 = vaddq_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v1564, *(double *)v1743.i64), v1565, v1735), v1566, *(double *)v1747.i64), v1567, v1738), v1568, v1744.f64[0]), *(float64x2_t *)(v1558 + 208));
                  v1584 = vaddq_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v1559, *(double *)v1743.i64), v1560, v1735), v1561, *(double *)v1747.i64), v1562, v1738), v1563, v1744.f64[0]), *(float64x2_t *)(v1558 + 192));
                  v1865 = v1569;
                  v1813 = v1571;
                  v1808 = v1572;
                  v1585 = vaddq_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v1569, v1739.f64[0]), v1570, *(double *)v1740.i64), v1571, v1741.f64[0]), v1572, *(double *)v1767.i64), v1573, v1745.f64[0]), *(float64x2_t *)(v1558 + 272));
                  v1918 = v1559;
                  v1903 = v1561;
                  v1900 = v1562;
                  v1896 = v1563;
                  v1586 = vaddq_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v1559, v1739.f64[0]), v1560, *(double *)v1740.i64), v1561, v1741.f64[0]), v1562, *(double *)v1767.i64), v1563, v1745.f64[0]), *(float64x2_t *)(v1558 + 240));
                  v1587 = vaddq_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v1564, *(double *)v1726.i64), v1565, v1724), v1566, *(double *)v1751.i64), v1567, *(double *)v1769.i64), v1568, v1770.f64[0]), *(float64x2_t *)(v1558 + 16));
                  *(float64x2_t *)v1558 = v1878;
                  *(float64x2_t *)(v1558 + 16) = v1587;
                  *(float64x2_t *)(v1558 + 32) = v1891;
                  *(float64x2_t *)(v1558 + 48) = v1576;
                  *(float64x2_t *)(v1558 + 64) = v1575;
                  *(float64x2_t *)(v1558 + 80) = v1883;
                  *(float64x2_t *)(v1558 + 96) = v1579;
                  *(float64x2_t *)(v1558 + 112) = v1578;
                  *(float64x2_t *)(v1558 + 128) = v1577;
                  *(float64x2_t *)(v1558 + 144) = v1581;
                  *(float64x2_t *)(v1558 + 160) = vaddq_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v1564, v1737.f64[0]), v1565, *(double *)v1736.i64), v1566, v1748.f64[0]), v1567, *(double *)v1746.i64), v1568, v1749.f64[0]), v1574);
                  *(float64x2_t *)(v1558 + 176) = v1580;
                  *(float64x2_t *)(v1558 + 192) = v1584;
                  *(float64x2_t *)(v1558 + 208) = v1583;
                  *(float64x2_t *)(v1558 + 224) = v1582;
                  *(float64x2_t *)(v1558 + 240) = v1586;
                  v1892 = v1564;
                  v1886 = v1565;
                  v1879 = v1567;
                  v1871 = v1568;
                  *(float64x2_t *)(v1558 + 256) = vaddq_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v1564, v1739.f64[0]), v1565, *(double *)v1740.i64), v1566, v1741.f64[0]), v1567, *(double *)v1767.i64), v1568, v1745.f64[0]), *(float64x2_t *)(v1558 + 256));
                  *(float64x2_t *)(v1558 + 272) = v1585;
                  if (v1887 && v1284 >= v1088)
                  {
                    v1588 = v1019[58] + 24 * v1284;
                    v1590 = *(char **)v1588;
                    v1589 = *(char **)(v1588 + 8);
                    if (*(char **)v1588 != v1589)
                    {
                      while (*(_DWORD *)v1590 < v1088)
                      {
                        v1590 += 16;
                        if (v1590 == v1589)
                          goto LABEL_358;
                      }
                    }
                    if (v1590 != v1589)
                    {
                      if (*(_DWORD *)v1590 == v1088)
                      {
                        v1591 = v1019[49] + 8 * *((_QWORD *)v1590 + 1);
                        v1284 = v1843;
                        goto LABEL_359;
                      }
                      v1589 = v1590;
                    }
LABEL_358:
                    v1591 = sub_20F3D4374(v1651, (char **)v1588, v1088, v1589);
                    v1019 = v1898;
                    v1284 = v1843;
                    v1088 = v1787;
LABEL_359:
                    v1788 = *(float64x2_t *)(v1591 + 48);
                    v1786 = *(float64x2_t *)(v1591 + 112);
                    v1844 = *(float64x2_t *)(v1591 + 144);
                    v1714 = vaddq_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v1865, *(double *)v1761.i64), v1570, v1752), v1571, *(double *)v1784.i64), v1808, *(double *)v1845.i64), v1573, v1846.f64[0]), *(float64x2_t *)(v1591 + 32));
                    v1775 = vaddq_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v1892, *(double *)v1761.i64), v1886, v1752), v1566, *(double *)v1784.i64), v1879, *(double *)v1845.i64), v1871, v1846.f64[0]), *(float64x2_t *)(v1591 + 16));
                    v1719 = vaddq_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v1865, v1755.f64[0]), v1570, *(double *)v1754.i64), v1571, v1820), v1808, *(double *)v1818.i64), v1573, v1822.f64[0]), *(float64x2_t *)(v1591 + 80));
                    v1778 = vaddq_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v1892, v1755.f64[0]), v1886, *(double *)v1754.i64), v1566, v1820), v1879, *(double *)v1818.i64), v1871, v1822.f64[0]), *(float64x2_t *)(v1591 + 64));
                    v1592 = vaddq_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v1865, *(double *)v1762.i64), v1570, v1753), v1571, *(double *)v1821.i64), v1808, v1815), v1573, v1783.f64[0]), *(float64x2_t *)(v1591 + 128));
                    v1593 = vaddq_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v1918, *(double *)v1762.i64), v1560, v1753), v1903, *(double *)v1821.i64), v1900, v1815), v1896, v1783.f64[0]), *(float64x2_t *)(v1591 + 96));
                    v1594 = vaddq_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v1865, v1757.f64[0]), v1570, *(double *)v1756.i64), v1813, v1819.f64[0]), v1808, *(double *)v1817.i64), v1573, v1766.f64[0]), *(float64x2_t *)(v1591 + 176));
                    v1595 = vaddq_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v1892, v1757.f64[0]), v1886, *(double *)v1756.i64), v1566, v1819.f64[0]), v1879, *(double *)v1817.i64), v1871, v1766.f64[0]), *(float64x2_t *)(v1591 + 160));
                    v1596 = vaddq_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v1865, *(double *)v1816.i64), v1570, v1814), v1813, *(double *)v1782.i64), v1808, v1758), v1573, v1763.f64[0]), *(float64x2_t *)(v1591 + 224));
                    v1597 = vaddq_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v1892, *(double *)v1816.i64), v1886, v1814), v1566, *(double *)v1782.i64), v1879, v1758), v1871, v1763.f64[0]), *(float64x2_t *)(v1591 + 208));
                    v1598 = vaddq_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v1918, *(double *)v1816.i64), v1560, v1814), v1903, *(double *)v1782.i64), v1900, v1758), v1896, v1763.f64[0]), *(float64x2_t *)(v1591 + 192));
                    v1599 = vaddq_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v1865, v1759.f64[0]), v1570, *(double *)v1781.i64), v1813, v1760.f64[0]), v1808, *(double *)v1765.i64), v1573, v1764.f64[0]), *(float64x2_t *)(v1591 + 272));
                    v1600 = vaddq_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v1918, v1759.f64[0]), v1560, *(double *)v1781.i64), v1903, v1760.f64[0]), v1900, *(double *)v1765.i64), v1896, v1764.f64[0]), *(float64x2_t *)(v1591 + 240));
                    *(float64x2_t *)v1591 = vaddq_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v1918, *(double *)v1761.i64), v1560, v1752), v1903, *(double *)v1784.i64), v1900, *(double *)v1845.i64), v1896, v1846.f64[0]), *(float64x2_t *)v1591);
                    *(float64x2_t *)(v1591 + 16) = v1775;
                    *(float64x2_t *)(v1591 + 32) = v1714;
                    *(float64x2_t *)(v1591 + 48) = vaddq_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v1918, v1755.f64[0]), v1560, *(double *)v1754.i64), v1903, v1820), v1900, *(double *)v1818.i64), v1896, v1822.f64[0]), v1788);
                    *(float64x2_t *)(v1591 + 64) = v1778;
                    *(float64x2_t *)(v1591 + 80) = v1719;
                    *(float64x2_t *)(v1591 + 96) = v1593;
                    *(float64x2_t *)(v1591 + 112) = vaddq_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v1892, *(double *)v1762.i64), v1886, v1753), v1566, *(double *)v1821.i64), v1879, v1815), v1871, v1783.f64[0]), v1786);
                    *(float64x2_t *)(v1591 + 128) = v1592;
                    *(float64x2_t *)(v1591 + 144) = vaddq_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v1918, v1757.f64[0]), v1560, *(double *)v1756.i64), v1903, v1819.f64[0]), v1900, *(double *)v1817.i64), v1896, v1766.f64[0]), v1844);
                    *(float64x2_t *)(v1591 + 160) = v1595;
                    *(float64x2_t *)(v1591 + 176) = v1594;
                    *(float64x2_t *)(v1591 + 192) = v1598;
                    *(float64x2_t *)(v1591 + 208) = v1597;
                    *(float64x2_t *)(v1591 + 224) = v1596;
                    *(float64x2_t *)(v1591 + 240) = v1600;
                    *(float64x2_t *)(v1591 + 256) = vaddq_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v1892, v1759.f64[0]), v1886, *(double *)v1781.i64), v1566, v1760.f64[0]), v1879, *(double *)v1765.i64), v1871, v1764.f64[0]), *(float64x2_t *)(v1591 + 256));
                    *(float64x2_t *)(v1591 + 272) = v1599;
                  }
                  v1601 = (float64x2_t *)(*v1019 + 8 * (*((_DWORD *)v1019 + 9) + 6 * v1088));
                  v1602 = *(double *)(v320 + 592);
                  v1603 = *(float64x2_t *)(v320 + 576);
                  v1604 = vsubq_f64(v1601[2], vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1865, v683->f64[0]), v1570, *v683, 1), v1813, v1603.f64[0]), v1808, v1603, 1), v1573, v1602));
                  v1605 = vsubq_f64(v1601[1], vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1892, v683->f64[0]), v1886, *v683, 1), v1566, v1603.f64[0]), v1879, v1603, 1), v1871, v1602));
                  *v1601 = vsubq_f64(*v1601, vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1918, v683->f64[0]), v1560, *v683, 1), v1903, v1603.f64[0]), v1900, v1603, 1), v1896, v1602));
                  v1601[1] = v1605;
                  v1601[2] = v1604;
LABEL_361:
                  if (v1887)
                  {
                    *(_QWORD *)&v1606.f64[0] = v1761.i64[0];
                    v1606.f64[1] = v1755.f64[0];
                    v1607 = *(float64x2_t *)(v320 + 576);
                    v1608.f64[0] = v1752;
                    *(_QWORD *)&v1608.f64[1] = v1754.i64[0];
                    v1609 = vmlaq_laneq_f64(vmulq_n_f64(v1606, v683->f64[0]), v1608, *v683, 1);
                    *(_QWORD *)&v1608.f64[0] = v1784.i64[0];
                    v1608.f64[1] = v1820;
                    *(_QWORD *)&v1610.f64[0] = v1845.i64[0];
                    *(_QWORD *)&v1610.f64[1] = v1818.i64[0];
                    v1611 = vmlaq_laneq_f64(vmlaq_n_f64(v1609, v1608, v1607.f64[0]), v1610, v1607, 1);
                    *(_QWORD *)&v1608.f64[0] = v1762.i64[0];
                    v1608.f64[1] = v1757.f64[0];
                    v1610.f64[0] = v1753;
                    *(_QWORD *)&v1610.f64[1] = v1756.i64[0];
                    *(_QWORD *)&v1612.f64[0] = v1816.i64[0];
                    v1612.f64[1] = v1759.f64[0];
                    v1613 = vmlaq_laneq_f64(vmulq_n_f64(v1608, v683->f64[0]), v1610, *v683, 1);
                    v1614 = vmulq_n_f64(v1612, v683->f64[0]);
                    v1612.f64[0] = v1814;
                    *(_QWORD *)&v1612.f64[1] = v1781.i64[0];
                    v1615 = vmlaq_laneq_f64(v1614, v1612, *v683, 1);
                    *(_QWORD *)&v1616.f64[0] = v1821.i64[0];
                    v1616.f64[1] = v1819.f64[0];
                    v1612.f64[0] = v1815;
                    *(_QWORD *)&v1612.f64[1] = v1817.i64[0];
                    v1617 = vmlaq_laneq_f64(vmlaq_n_f64(v1613, v1616, v1607.f64[0]), v1612, v1607, 1);
                    *(_QWORD *)&v1616.f64[0] = v1782.i64[0];
                    v1616.f64[1] = v1760.f64[0];
                    v1618 = vmlaq_n_f64(v1615, v1616, v1607.f64[0]);
                    v1616.f64[0] = v1758;
                    *(_QWORD *)&v1616.f64[1] = v1765.i64[0];
                    v1619 = vmlaq_laneq_f64(v1618, v1616, v1607, 1);
                    v1607.f64[0] = *(float64_t *)(v320 + 592);
                    v1616.f64[0] = v1846.f64[0];
                    v1616.f64[1] = v1822.f64[0];
                    v1620 = vmlaq_n_f64(v1611, v1616, v1607.f64[0]);
                    v1616.f64[0] = v1783.f64[0];
                    v1616.f64[1] = v1766.f64[0];
                    v1621 = vmlaq_n_f64(v1617, v1616, v1607.f64[0]);
                    v1616.f64[0] = v1763.f64[0];
                    v1616.f64[1] = v1764.f64[0];
                    v1622 = (float64x2_t *)(*v1019 + 8 * (*((_DWORD *)v1019 + 9) + 6 * v1284));
                    v1623 = vsubq_f64(v1622[2], vmlaq_n_f64(v1619, v1616, v1607.f64[0]));
                    v1624 = vsubq_f64(v1622[1], v1621);
                    *v1622 = vsubq_f64(*v1622, v1620);
                    v1622[1] = v1624;
                    v1622[2] = v1623;
                  }
                  if (v1872)
                  {
                    v1625 = (float64x2_t *)(*v1019 + 8 * (*((_DWORD *)v1019 + 8) + 4 * v328));
                    v1626 = *(double *)(v320 + 592);
                    *(_QWORD *)&v1627.f64[0] = v1848.i64[0];
                    v1627.f64[1] = v1791;
                    v1628 = *(float64x2_t *)(v320 + 576);
                    v1629.f64[0] = v1794;
                    *(_QWORD *)&v1629.f64[1] = v1849.i64[0];
                    v1630 = vmlaq_laneq_f64(vmulq_n_f64(v1627, v683->f64[0]), v1629, *v683, 1);
                    *(_QWORD *)&v1629.f64[0] = v1847.i64[0];
                    v1629.f64[1] = v1793;
                    *(_QWORD *)&v1631.f64[0] = v1796.i64[0];
                    *(_QWORD *)&v1631.f64[1] = v1852.i64[0];
                    v1632 = vmlaq_laneq_f64(vmlaq_n_f64(v1630, v1629, v1628.f64[0]), v1631, v1628, 1);
                    v1629.f64[0] = v1856.f64[0];
                    v1629.f64[1] = v1798.f64[0];
                    v1633 = vmlaq_n_f64(v1632, v1629, v1626);
                    *(_QWORD *)&v1629.f64[0] = v1851.i64[0];
                    v1629.f64[1] = v1789;
                    v1631.f64[0] = v1792;
                    *(_QWORD *)&v1631.f64[1] = v1853.i64[0];
                    *(_QWORD *)&v1634.f64[0] = v1850.i64[0];
                    v1634.f64[1] = v1790.f64[0];
                    v1635 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1629, v683->f64[0]), v1631, *v683, 1), v1634, v1628.f64[0]);
                    v1634.f64[0] = v1795;
                    *(_QWORD *)&v1634.f64[1] = v1854.i64[0];
                    v1631.f64[0] = v1855.f64[0];
                    v1631.f64[1] = v1797.f64[0];
                    v1636 = vsubq_f64(v1625[1], vmlaq_n_f64(vmlaq_laneq_f64(v1635, v1634, v1628, 1), v1631, v1626));
                    *v1625 = vsubq_f64(*v1625, v1633);
                    v1625[1] = v1636;
                  }
                  if (v1842)
                  {
                    v1637 = (float64x2_t *)(*v1019 + 8 * (*((_DWORD *)v1019 + 8) + 4 * v329));
                    v1638 = *(double *)(v320 + 592);
                    *(_QWORD *)&v1639.f64[0] = v1828.i64[0];
                    v1639.f64[1] = v1824;
                    v1640 = *(float64x2_t *)(v320 + 576);
                    v1641.f64[0] = v1834;
                    *(_QWORD *)&v1641.f64[1] = v1837.i64[0];
                    v1642 = vmlaq_laneq_f64(vmulq_n_f64(v1639, v683->f64[0]), v1641, *v683, 1);
                    *(_QWORD *)&v1641.f64[0] = v1827.i64[0];
                    v1641.f64[1] = v1826;
                    *(_QWORD *)&v1643.f64[0] = v1835.i64[0];
                    *(_QWORD *)&v1643.f64[1] = v1838.i64[0];
                    v1644 = vmlaq_laneq_f64(vmlaq_n_f64(v1642, v1641, v1640.f64[0]), v1643, v1640, 1);
                    v1641.f64[0] = v1841.f64[0];
                    v1641.f64[1] = v1839.f64[0];
                    v1645 = vmlaq_n_f64(v1644, v1641, v1638);
                    *(_QWORD *)&v1641.f64[0] = v1830.i64[0];
                    v1641.f64[1] = v1823;
                    v1643.f64[0] = v1831;
                    *(_QWORD *)&v1643.f64[1] = v1833.i64[0];
                    *(_QWORD *)&v1646.f64[0] = v1829.i64[0];
                    v1646.f64[1] = v1825.f64[0];
                    v1647 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1641, v683->f64[0]), v1643, *v683, 1), v1646, v1640.f64[0]);
                    v1646.f64[0] = v1832;
                    *(_QWORD *)&v1646.f64[1] = v1840.i64[0];
                    v1643.f64[0] = v1873.f64[0];
                    v1643.f64[1] = v1836.f64[0];
                    v1648 = vsubq_f64(v1637[1], vmlaq_n_f64(vmlaq_laneq_f64(v1647, v1646, v1640, 1), v1643, v1638));
                    *v1637 = vsubq_f64(*v1637, v1645);
                    v1637[1] = v1648;
                  }
                  v319 = v1649;
LABEL_89:
                  v320 += 640;
                  if (v320 == v319)
                    goto LABEL_367;
                  continue;
                }
                v1556 = v1557;
              }
LABEL_347:
              v1558 = sub_20F3D4374(v1651, (char **)v1555, v1088, v1556);
              v1019 = v1898;
              v1284 = v1843;
              v1088 = v1787;
              goto LABEL_348;
            }
            v1402 = v1403;
          }
          break;
        }
LABEL_302:
        v1404 = sub_20F3D46D0(v1652, (char **)v1401, v328, v1402);
        v1019 = v1898;
        goto LABEL_303;
      }
    }
  }
  v318 = v8;
  v320 = v1967[28];
  v319 = v1967[29];
  if (v320 != v319)
    goto LABEL_87;
LABEL_367:
  std::mutex::~mutex(&v1973);
}

void sub_20F7ED77C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, std::mutex *a9)
{
  std::mutex::~mutex(a9);
  _Unwind_Resume(a1);
}

void sub_20F7ED790(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, std::mutex *a9)
{
  std::mutex::~mutex(a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20F7ED7A4(unint64_t *a1, char **a2, int a3, char *a4)
{
  unint64_t v8;
  _QWORD *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  __int128 v18;

  v8 = a1[10];
  v9 = a1 + 2;
  if (v8)
  {
    v11 = a1[6];
    v10 = a1[7];
    v12 = ((v10 - v11) << 6) - 1;
    v13 = a1[9];
    if (v10 == v11)
      v12 = 0;
    v14 = a1[2]
        + 8
        * *(_QWORD *)(*(_QWORD *)(v11 + (((v13 + v8 - 1) >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * ((v13 + v8 - 1) & 0x1FF));
    a1[10] = v8 - 1;
    if (v12 - (v8 + v13) + 1 >= 0x400)
    {
      operator delete(*(void **)(v10 - 8));
      a1[7] -= 8;
    }
  }
  else
  {
    v15 = (void *)a1[3];
    *(_QWORD *)&v18 = 0;
    sub_20F1C5A3C(a1 + 2, v15, 0x18uLL, (uint64_t *)&v18);
    v14 = a1[3] - 192;
  }
  v16 = (v14 - *v9) >> 3;
  LODWORD(v18) = a3;
  *((_QWORD *)&v18 + 1) = v16;
  sub_20F2B4654(a2, a4, &v18);
  return v14;
}

uint64_t sub_20F7ED8A8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t i;
  uint64_t v14;
  uint64_t v15;
  uint64_t j;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int *v20;
  unsigned int *v21;
  unint64_t v22;
  _BYTE *v23;
  unsigned int *v24;
  _BYTE *v25;
  char *v26;
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  __int128 *v35;
  uint64_t v36;
  __int128 v37;
  int v38;
  uint64_t v39;
  unsigned int v40;
  char *v41;
  char *v42;
  unint64_t v43;
  unint64_t v44;
  unsigned int *v45;
  char *v46;
  unsigned int v47;
  unint64_t v48;
  char *v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  unint64_t v55;
  _BYTE *v56;
  unsigned int *v57;
  int64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  _OWORD *v63;
  char *v64;
  uint64_t v65;
  __int128 v66;
  unsigned int v67;
  __n128 *v68;
  __n128 *v69;
  char *v70;
  uint64_t v71;
  const std::nothrow_t *v72;
  char *v73;
  BOOL v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  unsigned int *v78;
  unsigned int *v79;
  unint64_t v80;
  _BYTE *v81;
  unsigned int *v82;
  _BYTE *v83;
  char *v84;
  uint64_t v85;
  char *v86;
  char *v87;
  uint64_t v88;
  unint64_t v89;
  uint64_t v90;
  char *v91;
  char *v92;
  __int128 *v93;
  uint64_t v94;
  __int128 v95;
  int v96;
  uint64_t v97;
  unsigned int v98;
  char *v99;
  char *v100;
  unint64_t v101;
  unint64_t v102;
  unsigned int *v103;
  char *v104;
  unsigned int v105;
  unint64_t v106;
  char *v107;
  char *v108;
  uint64_t v109;
  uint64_t v110;
  unint64_t v111;
  uint64_t v112;
  unint64_t v113;
  _BYTE *v114;
  unsigned int *v115;
  int64_t v116;
  unint64_t v117;
  uint64_t v118;
  uint64_t v119;
  char *v120;
  _OWORD *v121;
  char *v122;
  uint64_t v123;
  __int128 v124;
  unsigned int v125;
  __n128 *v126;
  __n128 *v127;
  char *v128;
  uint64_t v129;
  const std::nothrow_t *v130;
  char *v131;
  char *v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t k;
  uint64_t v138;
  uint64_t v139;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  unsigned int *v147;
  unsigned int *v148;
  void **v149;
  void **v150;
  char v151;
  char v152;

  if (!*(_BYTE *)(a1 + 274))
  {
    if (!*(_BYTE *)(a1 + 273))
    {
      v2 = *(_QWORD *)(a1 + 328);
      v3 = *(_QWORD *)(a1 + 336);
      *(_BYTE *)(a1 + 273) = v2 != v3;
      if (v2 == v3)
        *(_BYTE *)(a1 + 273) = *(_QWORD *)(a1 + 352) != *(_QWORD *)(a1 + 360);
    }
    std::__sort<std::__less<unsigned int,unsigned int> &,unsigned int *>();
    std::__sort<std::__less<unsigned int,unsigned int> &,unsigned int *>();
    std::__sort<std::__less<unsigned int,unsigned int> &,unsigned int *>();
    std::__sort<std::__less<unsigned int,unsigned int> &,unsigned int *>();
    if (!*(_BYTE *)(a1 + 273))
    {
LABEL_164:
      *(_BYTE *)(a1 + 274) = 1;
      return a1 + 280;
    }
    v4 = *(void **)(a1 + 424);
    *(_QWORD *)(a1 + 432) = v4;
    v5 = *(_QWORD *)(a1 + 16) - *(_QWORD *)(a1 + 8);
    v6 = v5 >> 4;
    if (v5 >> 4 > (unint64_t)((uint64_t)(*(_QWORD *)(a1 + 440) - (_QWORD)v4) >> 2))
    {
      if (v5 < 0)
        sub_20E867F44();
      v7 = (char *)operator new((unint64_t)v5 >> 2);
      *(_QWORD *)(a1 + 424) = v7;
      *(_QWORD *)(a1 + 432) = v7;
      *(_QWORD *)(a1 + 440) = &v7[4 * v6];
      if (v4)
        operator delete(v4);
    }
    v8 = *(void **)(a1 + 448);
    *(_QWORD *)(a1 + 456) = v8;
    v9 = *(_QWORD *)(a1 + 112) - *(_QWORD *)(a1 + 104);
    v10 = v9 >> 4;
    if (v9 >> 4 > (unint64_t)((uint64_t)(*(_QWORD *)(a1 + 464) - (_QWORD)v8) >> 2))
    {
      if (v9 < 0)
        sub_20E867F44();
      v11 = (char *)operator new((unint64_t)v9 >> 2);
      *(_QWORD *)(a1 + 448) = v11;
      *(_QWORD *)(a1 + 456) = v11;
      *(_QWORD *)(a1 + 464) = &v11[4 * v10];
      if (v8)
        operator delete(v8);
    }
    v12 = *(_QWORD *)(a1 + 200);
    for (i = *(_QWORD *)(a1 + 208); v12 != i; v12 += 888)
    {
      v14 = *(_QWORD *)(v12 + 736);
      if (*(_BYTE *)(v12 + 880)
        || (*(_BYTE *)(v14 + 4) & 6) != 0
        || (*(_BYTE *)(*(_QWORD *)(v12 + 744) + 4) & 6) != 0)
      {
        *(_BYTE *)(v12 + 880) = 1;
        sub_20F394A20(a1 + 424, v14);
        sub_20F394A20(a1 + 424, *(_QWORD *)(v12 + 744));
      }
    }
    v15 = *(_QWORD *)(a1 + 224);
    for (j = *(_QWORD *)(a1 + 232); v15 != j; v15 += 640)
    {
      v17 = *(_QWORD *)(v15 + 488);
      if (*(_BYTE *)(v15 + 632)
        || (*(_BYTE *)(v17 + 4) & 6) != 0
        || (*(_BYTE *)(*(_QWORD *)(v15 + 496) + 4) & 6) != 0
        || (*(_BYTE *)(*(_QWORD *)(v15 + 504) + 4) & 6) != 0
        || (*(_BYTE *)(*(_QWORD *)(v15 + 512) + 4) & 6) != 0)
      {
        *(_BYTE *)(v15 + 632) = 1;
        sub_20F3D35E0((_QWORD *)(a1 + 424), v17);
        sub_20F3D35E0((_QWORD *)(a1 + 424), *(_QWORD *)(v15 + 496));
        sub_20F394A20(a1 + 424, *(_QWORD *)(v15 + 504));
        sub_20F394A20(a1 + 424, *(_QWORD *)(v15 + 512));
      }
    }
    v19 = *(_QWORD *)(a1 + 328);
    v18 = *(_QWORD *)(a1 + 336);
    std::__sort<std::__less<unsigned int,unsigned int> &,unsigned int *>();
    v149 = (void **)(a1 + 328);
    v21 = *(unsigned int **)(a1 + 424);
    v20 = *(unsigned int **)(a1 + 432);
    v22 = ((v18 - v19) >> 2) + v20 - v21;
    v23 = *(_BYTE **)(a1 + 328);
    v141 = (v18 - v19) >> 2;
    v143 = v19;
    v145 = v18;
    if (v22 <= (uint64_t)(*(_QWORD *)(a1 + 344) - (_QWORD)v23) >> 2)
    {
LABEL_40:
      if (v21 != v20)
      {
        v147 = v20;
        while (1)
        {
          v40 = *v21;
          v42 = *(char **)(a1 + 8);
          v41 = *(char **)(a1 + 16);
          if (v41 != v42)
          {
            v43 = (v41 - v42) >> 4;
            do
            {
              v44 = v43 >> 1;
              v45 = (unsigned int *)&v42[16 * (v43 >> 1)];
              v47 = *v45;
              v46 = (char *)(v45 + 4);
              v43 += ~(v43 >> 1);
              if (v47 < v40)
                v42 = v46;
              else
                v43 = v44;
            }
            while (v43);
          }
          if (v42 == v41 || *(_DWORD *)v42 != v40)
          {
            v40 = *(_DWORD *)v41;
            v42 = *(char **)(a1 + 16);
          }
          if ((*(_BYTE *)(*((_QWORD *)v42 + 1) + 4) & 6) != 0)
            goto LABEL_44;
          v49 = *(char **)(a1 + 336);
          v48 = *(_QWORD *)(a1 + 344);
          if ((unint64_t)v49 >= v48)
            break;
          *(_DWORD *)v49 = v40;
          v39 = (uint64_t)(v49 + 4);
LABEL_43:
          *(_QWORD *)(a1 + 336) = v39;
          *(_BYTE *)(*((_QWORD *)v42 + 1) + 4) ^= 2u;
LABEL_44:
          if (++v21 == v20)
            goto LABEL_76;
        }
        v50 = (char *)*v149;
        v51 = v49 - (_BYTE *)*v149;
        v52 = v51 >> 2;
        v53 = (v51 >> 2) + 1;
        if (v53 >> 62)
          goto LABEL_166;
        v54 = v48 - (_QWORD)v50;
        if (v54 >> 1 > v53)
          v53 = v54 >> 1;
        if ((unint64_t)v54 >= 0x7FFFFFFFFFFFFFFCLL)
          v55 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v55 = v53;
        if (v55)
        {
          if (v55 >> 62)
LABEL_167:
            sub_20E877A38();
          v56 = operator new(4 * v55);
          v57 = (unsigned int *)&v56[4 * v52];
          *v57 = v40;
          v39 = (uint64_t)(v57 + 1);
          v58 = v49 - v50;
          if (v49 == v50)
            goto LABEL_73;
        }
        else
        {
          v56 = 0;
          v57 = (unsigned int *)(4 * v52);
          *(_DWORD *)(4 * v52) = v40;
          v39 = 4 * v52 + 4;
          v58 = v49 - v50;
          if (v49 == v50)
          {
LABEL_73:
            *(_QWORD *)(a1 + 328) = v57;
            *(_QWORD *)(a1 + 336) = v39;
            *(_QWORD *)(a1 + 344) = &v56[4 * v55];
            if (v50)
              operator delete(v50);
            v20 = v147;
            goto LABEL_43;
          }
        }
        v59 = v58 - 4;
        if (v59 < 0x2C)
          goto LABEL_172;
        if ((unint64_t)(v49 - v56 - v51) < 0x20)
          goto LABEL_172;
        v60 = (v59 >> 2) + 1;
        v61 = 4 * (v60 & 0x7FFFFFFFFFFFFFF8);
        v62 = &v49[-v61];
        v57 = (unsigned int *)((char *)v57 - v61);
        v63 = &v56[4 * v52 - 16];
        v64 = v49 - 16;
        v65 = v60 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          v66 = *(_OWORD *)v64;
          *(v63 - 1) = *((_OWORD *)v64 - 1);
          *v63 = v66;
          v63 -= 2;
          v64 -= 32;
          v65 -= 8;
        }
        while (v65);
        v49 = v62;
        if (v60 != (v60 & 0x7FFFFFFFFFFFFFF8))
        {
LABEL_172:
          do
          {
            v67 = *((_DWORD *)v49 - 1);
            v49 -= 4;
            *--v57 = v67;
          }
          while (v49 != v50);
        }
        goto LABEL_73;
      }
LABEL_76:
      if (v145 != v143)
      {
        std::__sort<std::__less<unsigned int,unsigned int> &,unsigned int *>();
        v68 = *(__n128 **)(a1 + 328);
        v69 = *(__n128 **)(a1 + 336);
        v70 = (char *)v68 + 4 * v141;
        if (((char *)v69 - v70) >> 2 >= v141)
          v71 = v141;
        else
          v71 = ((char *)v69 - v70) >> 2;
        if (v71 < 1)
        {
LABEL_84:
          v75 = 0;
          v71 = 0;
        }
        else
        {
          v72 = (const std::nothrow_t *)MEMORY[0x24BEDB6B8];
          while (1)
          {
            v73 = (char *)operator new(4 * v71, v72);
            if (v73)
              break;
            v74 = (unint64_t)v71 > 1;
            v71 = (unint64_t)v71 >> 1;
            if (!v74)
              goto LABEL_84;
          }
          v75 = v73;
        }
        sub_20EDB30B0(v68, (__n128 *)((char *)v68 + 4 * v141), v69, (uint64_t)&v151, v141, ((char *)v69 - v70) >> 2, v75, v71);
        if (v75)
          operator delete(v75);
      }
      v77 = *(_QWORD *)(a1 + 352);
      v76 = *(_QWORD *)(a1 + 360);
      std::__sort<std::__less<unsigned int,unsigned int> &,unsigned int *>();
      v150 = (void **)(a1 + 352);
      v79 = *(unsigned int **)(a1 + 448);
      v78 = *(unsigned int **)(a1 + 456);
      v80 = ((v76 - v77) >> 2) + v78 - v79;
      v81 = *(_BYTE **)(a1 + 352);
      v142 = (v76 - v77) >> 2;
      v144 = v77;
      v146 = v76;
      if (v80 <= (uint64_t)(*(_QWORD *)(a1 + 368) - (_QWORD)v81) >> 2)
        goto LABEL_100;
      if (!(v80 >> 62))
      {
        v82 = *(unsigned int **)(a1 + 456);
        v83 = *(_BYTE **)(a1 + 360);
        v84 = (char *)operator new(4 * v80);
        v85 = v83 - v81;
        v86 = &v84[(v83 - v81) & 0xFFFFFFFFFFFFFFFCLL];
        v87 = v86;
        if (v83 == v81)
          goto LABEL_98;
        if ((unint64_t)(v85 - 4) >= 0x2C)
        {
          v87 = &v84[(v83 - v81) & 0xFFFFFFFFFFFFFFFCLL];
          if ((unint64_t)(&v83[-(v85 & 0xFFFFFFFFFFFFFFFCLL)] - v84) >= 0x20)
          {
            v88 = v85 >> 2;
            v89 = ((unint64_t)(v85 - 4) >> 2) + 1;
            v90 = 4 * (v89 & 0x7FFFFFFFFFFFFFF8);
            v91 = &v83[-v90];
            v87 = &v86[-v90];
            v92 = &v84[4 * v88 - 16];
            v93 = (__int128 *)(v83 - 16);
            v94 = v89 & 0x7FFFFFFFFFFFFFF8;
            do
            {
              v95 = *v93;
              *((_OWORD *)v92 - 1) = *(v93 - 1);
              *(_OWORD *)v92 = v95;
              v92 -= 32;
              v93 -= 2;
              v94 -= 8;
            }
            while (v94);
            v83 = v91;
            if (v89 == (v89 & 0x7FFFFFFFFFFFFFF8))
            {
LABEL_98:
              *(_QWORD *)(a1 + 352) = v87;
              *(_QWORD *)(a1 + 360) = v86;
              *(_QWORD *)(a1 + 368) = &v84[4 * v80];
              v78 = v82;
              if (v81)
              {
                operator delete(v81);
                v79 = *(unsigned int **)(a1 + 448);
                v78 = *(unsigned int **)(a1 + 456);
              }
LABEL_100:
              if (v79 != v78)
              {
                v148 = v78;
                while (1)
                {
                  v98 = *v79;
                  v100 = *(char **)(a1 + 104);
                  v99 = *(char **)(a1 + 112);
                  if (v99 != v100)
                  {
                    v101 = (v99 - v100) >> 4;
                    do
                    {
                      v102 = v101 >> 1;
                      v103 = (unsigned int *)&v100[16 * (v101 >> 1)];
                      v105 = *v103;
                      v104 = (char *)(v103 + 4);
                      v101 += ~(v101 >> 1);
                      if (v105 < v98)
                        v100 = v104;
                      else
                        v101 = v102;
                    }
                    while (v101);
                  }
                  if (v100 == v99 || *(_DWORD *)v100 != v98)
                  {
                    v98 = *(_DWORD *)v99;
                    v100 = *(char **)(a1 + 112);
                  }
                  if ((*(_BYTE *)(*((_QWORD *)v100 + 1) + 4) & 6) != 0)
                    goto LABEL_104;
                  v107 = *(char **)(a1 + 360);
                  v106 = *(_QWORD *)(a1 + 368);
                  if ((unint64_t)v107 >= v106)
                    break;
                  *(_DWORD *)v107 = v98;
                  v97 = (uint64_t)(v107 + 4);
LABEL_103:
                  *(_QWORD *)(a1 + 360) = v97;
                  *(_BYTE *)(*((_QWORD *)v100 + 1) + 4) ^= 2u;
LABEL_104:
                  if (++v79 == v78)
                    goto LABEL_136;
                }
                v108 = (char *)*v150;
                v109 = v107 - (_BYTE *)*v150;
                v110 = v109 >> 2;
                v111 = (v109 >> 2) + 1;
                if (v111 >> 62)
                  goto LABEL_166;
                v112 = v106 - (_QWORD)v108;
                if (v112 >> 1 > v111)
                  v111 = v112 >> 1;
                if ((unint64_t)v112 >= 0x7FFFFFFFFFFFFFFCLL)
                  v113 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v113 = v111;
                if (v113)
                {
                  if (v113 >> 62)
                    goto LABEL_167;
                  v114 = operator new(4 * v113);
                  v115 = (unsigned int *)&v114[4 * v110];
                  *v115 = v98;
                  v97 = (uint64_t)(v115 + 1);
                  v116 = v107 - v108;
                  if (v107 == v108)
                    goto LABEL_133;
                }
                else
                {
                  v114 = 0;
                  v115 = (unsigned int *)(4 * v110);
                  *(_DWORD *)(4 * v110) = v98;
                  v97 = 4 * v110 + 4;
                  v116 = v107 - v108;
                  if (v107 == v108)
                  {
LABEL_133:
                    *(_QWORD *)(a1 + 352) = v115;
                    *(_QWORD *)(a1 + 360) = v97;
                    *(_QWORD *)(a1 + 368) = &v114[4 * v113];
                    if (v108)
                      operator delete(v108);
                    v78 = v148;
                    goto LABEL_103;
                  }
                }
                v117 = v116 - 4;
                if (v117 < 0x2C)
                  goto LABEL_173;
                if ((unint64_t)(v107 - v114 - v109) < 0x20)
                  goto LABEL_173;
                v118 = (v117 >> 2) + 1;
                v119 = 4 * (v118 & 0x7FFFFFFFFFFFFFF8);
                v120 = &v107[-v119];
                v115 = (unsigned int *)((char *)v115 - v119);
                v121 = &v114[4 * v110 - 16];
                v122 = v107 - 16;
                v123 = v118 & 0x7FFFFFFFFFFFFFF8;
                do
                {
                  v124 = *(_OWORD *)v122;
                  *(v121 - 1) = *((_OWORD *)v122 - 1);
                  *v121 = v124;
                  v121 -= 2;
                  v122 -= 32;
                  v123 -= 8;
                }
                while (v123);
                v107 = v120;
                if (v118 != (v118 & 0x7FFFFFFFFFFFFFF8))
                {
LABEL_173:
                  do
                  {
                    v125 = *((_DWORD *)v107 - 1);
                    v107 -= 4;
                    *--v115 = v125;
                  }
                  while (v107 != v108);
                }
                goto LABEL_133;
              }
LABEL_136:
              if (v146 != v144)
              {
                std::__sort<std::__less<unsigned int,unsigned int> &,unsigned int *>();
                v126 = *(__n128 **)(a1 + 352);
                v127 = *(__n128 **)(a1 + 360);
                v128 = (char *)v126 + 4 * v142;
                if (((char *)v127 - v128) >> 2 >= v142)
                  v129 = v142;
                else
                  v129 = ((char *)v127 - v128) >> 2;
                if (v129 < 1)
                {
LABEL_144:
                  v132 = 0;
                  v129 = 0;
                }
                else
                {
                  v130 = (const std::nothrow_t *)MEMORY[0x24BEDB6B8];
                  while (1)
                  {
                    v131 = (char *)operator new(4 * v129, v130);
                    if (v131)
                      break;
                    v74 = (unint64_t)v129 > 1;
                    v129 = (unint64_t)v129 >> 1;
                    if (!v74)
                      goto LABEL_144;
                  }
                  v132 = v131;
                }
                sub_20EDB30B0(v126, (__n128 *)((char *)v126 + 4 * v142), v127, (uint64_t)&v152, v142, ((char *)v127 - v128) >> 2, v132, v129);
                if (v132)
                  operator delete(v132);
              }
              v133 = *(_QWORD *)(a1 + 200);
              v134 = *(_QWORD *)(a1 + 208);
              while (v133 != v134)
              {
                v135 = *(_QWORD *)(v133 + 736);
                if (*(_BYTE *)(v133 + 880)
                  || (*(_BYTE *)(v135 + 4) & 6) != 0
                  || (*(_BYTE *)(*(_QWORD *)(v133 + 744) + 4) & 6) != 0)
                {
                  ++*(_DWORD *)(v135 + 8);
                  ++*(_DWORD *)(*(_QWORD *)(v133 + 744) + 8);
                }
                v133 += 888;
              }
              v136 = *(_QWORD *)(a1 + 224);
              for (k = *(_QWORD *)(a1 + 232); v136 != k; v136 += 640)
              {
                v138 = *(_QWORD *)(v136 + 488);
                if (*(_BYTE *)(v136 + 632)
                  || (*(_BYTE *)(v138 + 4) & 6) != 0
                  || (*(_BYTE *)(*(_QWORD *)(v136 + 496) + 4) & 6) != 0
                  || (*(_BYTE *)(*(_QWORD *)(v136 + 504) + 4) & 6) != 0
                  || (*(_BYTE *)(*(_QWORD *)(v136 + 512) + 4) & 6) != 0)
                {
                  ++*(_DWORD *)(v138 + 8);
                  v139 = *(_QWORD *)(v136 + 504);
                  ++*(_DWORD *)(*(_QWORD *)(v136 + 496) + 8);
                  ++*(_DWORD *)(v139 + 8);
                  ++*(_DWORD *)(*(_QWORD *)(v136 + 512) + 8);
                }
              }
              goto LABEL_164;
            }
          }
        }
        else
        {
          v87 = &v84[(v83 - v81) & 0xFFFFFFFFFFFFFFFCLL];
        }
        do
        {
          v96 = *((_DWORD *)v83 - 1);
          v83 -= 4;
          *((_DWORD *)v87 - 1) = v96;
          v87 -= 4;
        }
        while (v83 != v81);
        goto LABEL_98;
      }
LABEL_166:
      sub_20E867F44();
    }
    if (v22 >> 62)
      goto LABEL_166;
    v24 = *(unsigned int **)(a1 + 432);
    v25 = *(_BYTE **)(a1 + 336);
    v26 = (char *)operator new(4 * v22);
    v27 = v25 - v23;
    v28 = &v26[(v25 - v23) & 0xFFFFFFFFFFFFFFFCLL];
    v29 = v28;
    if (v25 != v23)
    {
      if ((unint64_t)(v27 - 4) < 0x2C)
      {
        v29 = &v26[(v25 - v23) & 0xFFFFFFFFFFFFFFFCLL];
        do
        {
LABEL_37:
          v38 = *((_DWORD *)v25 - 1);
          v25 -= 4;
          *((_DWORD *)v29 - 1) = v38;
          v29 -= 4;
        }
        while (v25 != v23);
        goto LABEL_38;
      }
      v29 = &v26[(v25 - v23) & 0xFFFFFFFFFFFFFFFCLL];
      if ((unint64_t)(&v25[-(v27 & 0xFFFFFFFFFFFFFFFCLL)] - v26) < 0x20)
        goto LABEL_37;
      v30 = v27 >> 2;
      v31 = ((unint64_t)(v27 - 4) >> 2) + 1;
      v32 = 4 * (v31 & 0x7FFFFFFFFFFFFFF8);
      v33 = &v25[-v32];
      v29 = &v28[-v32];
      v34 = &v26[4 * v30 - 16];
      v35 = (__int128 *)(v25 - 16);
      v36 = v31 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        v37 = *v35;
        *((_OWORD *)v34 - 1) = *(v35 - 1);
        *(_OWORD *)v34 = v37;
        v34 -= 32;
        v35 -= 2;
        v36 -= 8;
      }
      while (v36);
      v25 = v33;
      if (v31 != (v31 & 0x7FFFFFFFFFFFFFF8))
        goto LABEL_37;
    }
LABEL_38:
    *(_QWORD *)(a1 + 328) = v29;
    *(_QWORD *)(a1 + 336) = v28;
    *(_QWORD *)(a1 + 344) = &v26[4 * v22];
    v20 = v24;
    if (v23)
    {
      operator delete(v23);
      v21 = *(unsigned int **)(a1 + 424);
      v20 = *(unsigned int **)(a1 + 432);
    }
    goto LABEL_40;
  }
  return a1 + 280;
}

void sub_20F7EE318(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void *v2;

  if (v2)
  {
    operator delete(v2);
    sub_20F7EE360(v1);
    _Unwind_Resume(a1);
  }
  sub_20F7EE360(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_20F7EE360(_QWORD *result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t i;
  uint64_t v6;
  uint64_t v7;

  v1 = result[25];
  v2 = result[26];
  while (v1 != v2)
  {
    v3 = *(_QWORD *)(v1 + 736);
    if (*(_BYTE *)(v1 + 880) || (*(_BYTE *)(v3 + 4) & 6) != 0 || (*(_BYTE *)(*(_QWORD *)(v1 + 744) + 4) & 6) != 0)
    {
      ++*(_DWORD *)(v3 + 8);
      ++*(_DWORD *)(*(_QWORD *)(v1 + 744) + 8);
    }
    v1 += 888;
  }
  v4 = result[28];
  for (i = result[29]; v4 != i; v4 += 640)
  {
    v6 = *(_QWORD *)(v4 + 488);
    if (*(_BYTE *)(v4 + 632)
      || (*(_BYTE *)(v6 + 4) & 6) != 0
      || (*(_BYTE *)(*(_QWORD *)(v4 + 496) + 4) & 6) != 0
      || (*(_BYTE *)(*(_QWORD *)(v4 + 504) + 4) & 6) != 0
      || (*(_BYTE *)(*(_QWORD *)(v4 + 512) + 4) & 6) != 0)
    {
      ++*(_DWORD *)(v6 + 8);
      v7 = *(_QWORD *)(v4 + 504);
      ++*(_DWORD *)(*(_QWORD *)(v4 + 496) + 8);
      ++*(_DWORD *)(v7 + 8);
      ++*(_DWORD *)(*(_QWORD *)(v4 + 512) + 8);
    }
  }
  return result;
}

void sub_20F7EE458(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v5;
  uint64_t v6;

  if (a1 != a2)
  {
    v5 = a1;
    do
    {
      v6 = *(_QWORD *)(v5 + 488);
      if (*(_BYTE *)(v5 + 632)
        || (*(_BYTE *)(v6 + 4) & 6) != 0
        || (*(_BYTE *)(*(_QWORD *)(v5 + 496) + 4) & 6) != 0
        || (*(_BYTE *)(*(_QWORD *)(v5 + 504) + 4) & 6) != 0
        || (*(_BYTE *)(*(_QWORD *)(v5 + 512) + 4) & 6) != 0)
      {
        sub_20F3D35E0(a3, v6);
        sub_20F3D35E0(a3, *(_QWORD *)(v5 + 496));
        sub_20F394A20((uint64_t)a3, *(_QWORD *)(v5 + 504));
        sub_20F394A20((uint64_t)a3, *(_QWORD *)(v5 + 512));
      }
      v5 += 640;
    }
    while (v5 != a2);
  }
}

unint64_t sub_20F7EE50C(unint64_t result, unsigned int *a2, uint64_t a3, char a4)
{
  unsigned int *v7;
  unsigned int *v8;
  unsigned int *v9;
  unsigned int *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int *v18;
  BOOL v19;
  _BOOL4 v20;
  _BOOL4 v21;
  uint64_t v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int *v25;
  BOOL v26;
  _BOOL4 v27;
  _BOOL4 v28;
  uint64_t v29;
  uint64_t v30;
  _BOOL4 v31;
  uint64_t v32;
  uint64_t v33;
  _BOOL4 v34;
  uint64_t v35;
  unsigned int v36;
  uint64_t v37;
  unsigned int v38;
  _BOOL4 v39;
  uint64_t v40;
  uint64_t *v41;
  unsigned int v42;
  unsigned int *v43;
  unsigned int *v44;
  unsigned int v45;
  unsigned int v46;
  unsigned int *v47;
  unsigned int v48;
  BOOL v49;
  BOOL v50;
  unsigned int v51;
  _BOOL4 v52;
  _BOOL4 v53;
  uint64_t v54;
  unsigned int v55;
  unsigned int v56;
  uint64_t v57;
  unsigned int v58;
  _BOOL4 v59;
  uint64_t v60;
  unsigned int v61;
  unsigned int v62;
  uint64_t v63;
  unsigned int v64;
  _BOOL4 v65;
  uint64_t v66;
  unsigned int v67;
  uint64_t v68;
  unsigned int v69;
  unsigned int v70;
  unsigned int v71;
  _BOOL4 v72;
  uint64_t v73;
  uint64_t *v74;
  unsigned int v75;
  unsigned int *v76;
  unsigned int *v77;
  unsigned int v78;
  unsigned int v79;
  unsigned int *v80;
  unsigned int v81;
  BOOL v82;
  BOOL v83;
  unsigned int v84;
  _BOOL4 v85;
  _BOOL4 v86;
  uint64_t v87;
  unsigned int v88;
  unsigned int v89;
  uint64_t v90;
  unsigned int v91;
  _BOOL4 v92;
  uint64_t v93;
  unsigned int v94;
  unsigned int v95;
  uint64_t v96;
  unsigned int v97;
  unsigned int v98;
  unsigned int v99;
  _BOOL4 v100;
  uint64_t v101;
  unsigned int v102;
  BOOL v103;
  _BOOL4 v104;
  _BOOL4 v105;
  _BOOL4 v106;
  uint64_t v107;
  unsigned int v108;
  BOOL v109;
  uint64_t v110;
  unsigned int v111;
  unsigned int v112;
  BOOL v113;
  BOOL v114;
  unsigned int *v115;
  unsigned int *v116;
  unsigned int v117;
  unsigned int v118;
  _BOOL4 v119;
  _BOOL4 v120;
  unsigned int v121;
  unsigned int v122;
  BOOL v123;
  BOOL v124;
  unint64_t v125;
  uint64_t v126;
  unsigned int v127;
  unsigned int v128;
  BOOL v129;
  BOOL v130;
  unsigned int v131;
  unsigned int v132;
  _BOOL4 v133;
  _BOOL4 v134;
  uint64_t v135;
  BOOL v136;
  unsigned int v137;
  BOOL v138;
  unsigned int v139;
  unsigned int v140;
  BOOL v141;
  BOOL v142;
  unsigned int *v143;
  unsigned int v144;
  _BOOL4 v145;
  _BOOL4 v146;
  unsigned int *v147;
  unsigned int v148;
  unsigned int v149;
  BOOL v150;
  BOOL v151;
  unsigned int v152;
  uint64_t v153;
  unsigned int v154;
  unsigned int v155;
  _BOOL4 v156;
  _BOOL4 v157;
  unsigned int v158;
  unsigned int v159;
  BOOL v160;
  BOOL v161;
  uint64_t v162;
  _QWORD *v163;
  unsigned int v164;
  unsigned int v165;
  BOOL v166;
  unsigned int *v167;
  unsigned int v168;
  _BOOL4 v169;
  _BOOL4 v170;
  uint64_t v171;
  unsigned int v172;
  unsigned int v173;
  unsigned int *v174;
  _BOOL4 v175;
  _BOOL4 v176;
  uint64_t v177;
  unsigned int *v178;
  BOOL v179;
  char v180;
  uint64_t v181;
  unsigned int *v182;
  unsigned int *v183;
  unsigned int *v184;
  unsigned int v185;
  unsigned int v186;
  _BOOL4 v187;
  unsigned int v188;
  uint64_t v189;
  char *v190;
  unsigned int v191;
  BOOL v192;
  BOOL v193;
  int64_t v194;
  int64_t v195;
  int64_t v196;
  uint64_t v197;
  unsigned int *v198;
  unsigned int v199;
  _BOOL4 v200;
  unsigned int *v201;
  unsigned int v202;
  unsigned int v203;
  unsigned int v204;
  unsigned int v205;
  _BOOL4 v206;
  _BOOL4 v207;
  _BOOL4 v208;
  unsigned int *v209;
  uint64_t v210;
  uint64_t v211;
  int64_t v212;
  uint64_t v214;
  unsigned int *v215;
  uint64_t v216;
  uint64_t v217;
  char *v218;
  uint64_t v219;
  uint64_t v220;
  unsigned int v221;
  _BOOL4 v222;
  uint64_t v223;
  uint64_t v224;
  unint64_t v225;
  unsigned int *v226;
  unsigned int v227;
  unsigned int v228;
  _BOOL4 v229;
  int v230;
  char *v231;
  uint64_t v232;
  BOOL v233;
  uint64_t v234;
  unsigned int v235;
  unsigned int v236;
  unsigned int v237;
  _BOOL4 v238;
  unsigned int *v239;
  unsigned int v240;
  unsigned int v241;
  _BOOL4 v242;
  unsigned int v243;
  unsigned int *v244;
  unsigned int *v245;
  uint64_t v246;
  unsigned int v247;
  BOOL v248;
  BOOL v249;
  unsigned int v250;
  unsigned int v251;
  _BOOL4 v252;
  uint64_t v253;
  unsigned int v254;
  unsigned int v255;
  unsigned int *v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  unsigned int v281;
  unsigned int v282;
  unsigned int v283;
  unsigned int v284;
  unsigned int v285;
  unsigned int v286;
  unsigned int v287;
  unsigned int v288;
  unsigned int v289;
  unsigned int v290;
  unsigned int v291;
  unsigned int v292;
  unsigned int v293;
  unsigned int v294;
  unsigned int v295;
  unsigned int v296;
  unsigned int v297;
  unsigned int v298;
  unsigned int v299;
  unsigned int v300;
  unsigned int v301;
  unsigned int v302;
  unsigned int v303;
  unsigned int v304;

  v7 = (unsigned int *)result;
LABEL_2:
  v8 = a2 - 3;
  v256 = a2 - 6;
  v9 = a2 - 9;
  v10 = v7;
  while (2)
  {
    v7 = v10;
    v11 = (char *)a2 - (char *)v10;
    v12 = 0xAAAAAAAAAAAAAAABLL * (a2 - v10);
    switch(v12)
    {
      case 0:
      case 1:
        return result;
      case 2:
        v172 = *(a2 - 3);
        v173 = *(a2 - 2);
        v174 = a2 - 3;
        v175 = v173 < v10[1];
        v179 = v172 == *v10;
        v176 = v172 < *v10;
        if (v179)
          v176 = v175;
        if (v176)
        {
          v301 = v10[2];
          v277 = *(_QWORD *)v10;
          v177 = *(_QWORD *)v174;
          v10[2] = v174[2];
          *(_QWORD *)v10 = v177;
          v174[2] = v301;
          *(_QWORD *)v174 = v277;
        }
        return result;
      case 3:
        v163 = v10 + 3;
        v164 = v10[3];
        v165 = v10[4];
        v166 = v164 < *v10;
        if (v164 == *v10)
          v166 = v165 < v10[1];
        v168 = *(a2 - 3);
        v167 = a2 - 3;
        v169 = *(a2 - 2) < v165;
        v179 = v168 == v164;
        v170 = v168 < v164;
        if (v179)
          v170 = v169;
        if (v166)
        {
          if (v170)
          {
            v300 = v10[2];
            v276 = *(_QWORD *)v10;
            v171 = *(_QWORD *)v167;
            v10[2] = *(a2 - 1);
            *(_QWORD *)v10 = v171;
            *(a2 - 1) = v300;
            *(_QWORD *)v167 = v276;
          }
          else
          {
            v304 = v10[2];
            v280 = *(_QWORD *)v10;
            *(_QWORD *)v10 = *v163;
            v10[2] = v10[5];
            *v163 = v280;
            v10[5] = v304;
            v250 = *(a2 - 3);
            v251 = v10[3];
            v179 = v250 == v251;
            v252 = v250 < v251;
            if (v179)
              v252 = *(a2 - 2) < v10[4];
            if (v252)
            {
              v253 = *v163;
              v254 = v10[5];
              v255 = *(a2 - 1);
              *v163 = *(_QWORD *)v167;
              v10[5] = v255;
              *(a2 - 1) = v254;
              *(_QWORD *)v167 = v253;
            }
          }
        }
        else if (v170)
        {
          v234 = *v163;
          v235 = v10[5];
          v236 = *(a2 - 1);
          *v163 = *(_QWORD *)v167;
          v10[5] = v236;
          *(a2 - 1) = v235;
          *(_QWORD *)v167 = v234;
          v237 = v10[3];
          v179 = v237 == *v10;
          v238 = v237 < *v10;
          if (v179)
            v238 = v10[4] < v10[1];
          if (v238)
          {
            v303 = v10[2];
            v279 = *(_QWORD *)v10;
            *(_QWORD *)v10 = *v163;
            v10[2] = v10[5];
            *v163 = v279;
            v10[5] = v303;
          }
        }
        return result;
      case 4:
        return (unint64_t)sub_20F2BCB74(v10, v10 + 3, v10 + 6, a2 - 3);
      case 5:
        return (unint64_t)sub_20F396580(v10, v10 + 3, v10 + 6, v10 + 9, a2 - 3);
      default:
        if (v11 > 287)
        {
          if (!a3)
          {
            if (v10 != a2)
            {
              v194 = (unint64_t)(v12 - 2) >> 1;
              v195 = v194;
              do
              {
                v196 = v195;
                if (v194 >= v195)
                {
                  v197 = (2 * v195) | 1;
                  v198 = &v10[3 * v197];
                  if (2 * v196 + 2 >= v12)
                  {
                    v199 = *v198;
                  }
                  else
                  {
                    v199 = v198[3];
                    v200 = v10[3 * v197 + 1] < v198[4];
                    if (*v198 != v199)
                      v200 = *v198 < v199;
                    if (v200)
                    {
                      v198 += 3;
                      v197 = 2 * v196 + 2;
                    }
                    else
                    {
                      v199 = *v198;
                    }
                  }
                  v201 = &v10[3 * v196];
                  v202 = *v201;
                  v203 = v201[1];
                  v179 = v199 == *v201;
                  LODWORD(result) = v199 < *v201;
                  if (v179)
                    result = v198[1] < v203;
                  else
                    result = result;
                  if ((result & 1) == 0)
                  {
                    result = v201[2];
                    do
                    {
                      v209 = v201;
                      v201 = v198;
                      v210 = *(_QWORD *)v198;
                      v209[2] = v201[2];
                      *(_QWORD *)v209 = v210;
                      if (v194 < v197)
                        break;
                      v211 = (2 * v197) | 1;
                      v198 = &v10[3 * v211];
                      v197 = 2 * v197 + 2;
                      if (v197 < v12)
                      {
                        v204 = *v198;
                        v205 = v198[3];
                        v206 = v10[3 * v211 + 1] < v198[4];
                        if (*v198 != v205)
                          v206 = *v198 < v205;
                        if (v206)
                        {
                          v204 = v198[3];
                          v198 += 3;
                        }
                        else
                        {
                          v197 = v211;
                        }
                      }
                      else
                      {
                        v204 = *v198;
                        v197 = v211;
                      }
                      v207 = v198[1] < v203;
                      v179 = v204 == v202;
                      v208 = v204 < v202;
                      if (!v179)
                        v207 = v208;
                    }
                    while (!v207);
                    *v201 = v202;
                    v201[1] = v203;
                    v201[2] = result;
                  }
                }
                v195 = v196 - 1;
              }
              while (v196);
              v212 = v11 / 0xCuLL;
              do
              {
                v214 = 0;
                v302 = v10[2];
                v278 = *(_QWORD *)v10;
                v215 = v10;
                do
                {
                  v217 = v214 + 1;
                  v218 = (char *)&v215[3 * v214 + 3];
                  v219 = (2 * v214) | 1;
                  v220 = 2 * v214 + 2;
                  if (v220 < v212)
                  {
                    v221 = *((_DWORD *)v218 + 3);
                    v222 = v215[3 * v217 + 1] < *((_DWORD *)v218 + 4);
                    v179 = *(_DWORD *)v218 == v221;
                    result = *(_DWORD *)v218 < v221;
                    if (!v179)
                      v222 = result;
                    if (v222)
                    {
                      v218 += 12;
                      v219 = v220;
                    }
                  }
                  v216 = *(_QWORD *)v218;
                  v215[2] = *((_DWORD *)v218 + 2);
                  *(_QWORD *)v215 = v216;
                  v215 = (unsigned int *)v218;
                  v214 = v219;
                }
                while (v219 <= (uint64_t)((unint64_t)(v212 - 2) >> 1));
                a2 -= 3;
                if (v218 == (char *)a2)
                {
                  *((_DWORD *)v218 + 2) = v302;
                  *(_QWORD *)v218 = v278;
                }
                else
                {
                  v223 = *(_QWORD *)a2;
                  *((_DWORD *)v218 + 2) = a2[2];
                  *(_QWORD *)v218 = v223;
                  a2[2] = v302;
                  *(_QWORD *)a2 = v278;
                  v224 = v218 - (char *)v10 + 12;
                  if (v224 >= 13)
                  {
                    v225 = (v224 / 0xCuLL - 2) >> 1;
                    v226 = &v10[3 * v225];
                    v228 = *(_DWORD *)v218;
                    v227 = *((_DWORD *)v218 + 1);
                    v229 = *v226 < *(_DWORD *)v218;
                    if (*v226 == *(_DWORD *)v218)
                      v229 = v226[1] < v227;
                    if (v229)
                    {
                      v230 = *((_DWORD *)v218 + 2);
                      do
                      {
                        v231 = v218;
                        v218 = (char *)v226;
                        v232 = *(_QWORD *)v226;
                        result = *((unsigned int *)v218 + 2);
                        *((_DWORD *)v231 + 2) = result;
                        *(_QWORD *)v231 = v232;
                        if (!v225)
                          break;
                        v225 = (v225 - 1) >> 1;
                        v226 = &v10[3 * v225];
                        result = v226[1] < v227;
                        v233 = *v226 < v228;
                        if (*v226 == v228)
                          v233 = v226[1] < v227;
                      }
                      while (v233);
                      *(_DWORD *)v218 = v228;
                      *((_DWORD *)v218 + 1) = v227;
                      *((_DWORD *)v218 + 2) = v230;
                    }
                  }
                }
              }
              while (v212-- > 2);
            }
            return result;
          }
          v13 = (unint64_t)v12 >> 1;
          v14 = &v10[3 * ((unint64_t)v12 >> 1)];
          v15 = *(a2 - 3);
          v16 = *(a2 - 2);
          if ((unint64_t)v11 < 0x601)
          {
            v23 = *v10;
            v24 = v10[1];
            v25 = &v10[3 * v13 + 1];
            v26 = v24 < *v25;
            if (*v10 != *v14)
              v26 = *v10 < *v14;
            v27 = v16 < v24;
            v179 = v15 == v23;
            v28 = v15 < v23;
            if (v179)
              v28 = v27;
            if (v26)
            {
              if (v28)
              {
                v282 = v14[2];
                v258 = *(_QWORD *)v14;
                v29 = *(_QWORD *)v8;
                v14[2] = *(a2 - 1);
                *(_QWORD *)v14 = v29;
LABEL_53:
                *(a2 - 1) = v282;
                *(_QWORD *)v8 = v258;
                goto LABEL_54;
              }
              v289 = v14[2];
              v265 = *(_QWORD *)v14;
              v63 = *(_QWORD *)v10;
              v14[2] = v10[2];
              *(_QWORD *)v14 = v63;
              v10[2] = v289;
              *(_QWORD *)v10 = v265;
              v64 = *(a2 - 3);
              v179 = v64 == *v10;
              v65 = v64 < *v10;
              if (v179)
                v65 = *(a2 - 2) < v10[1];
              if (v65)
              {
                v282 = v10[2];
                v258 = *(_QWORD *)v10;
                v66 = *(_QWORD *)v8;
                v10[2] = *(a2 - 1);
                *(_QWORD *)v10 = v66;
                goto LABEL_53;
              }
            }
            else if (v28)
            {
              v285 = v10[2];
              v261 = *(_QWORD *)v10;
              v33 = *(_QWORD *)v8;
              v10[2] = *(a2 - 1);
              *(_QWORD *)v10 = v33;
              *(a2 - 1) = v285;
              *(_QWORD *)v8 = v261;
              v34 = v10[1] < *v25;
              if (*v10 != *v14)
                v34 = *v10 < *v14;
              if (v34)
              {
                v286 = v14[2];
                v262 = *(_QWORD *)v14;
                v35 = *(_QWORD *)v10;
                v14[2] = v10[2];
                *(_QWORD *)v14 = v35;
                v10[2] = v286;
                *(_QWORD *)v10 = v262;
                --a3;
                v36 = v262;
                if ((a4 & 1) != 0)
                  goto LABEL_55;
                goto LABEL_94;
              }
            }
LABEL_54:
            --a3;
            v36 = *v10;
            if ((a4 & 1) != 0)
              goto LABEL_55;
LABEL_94:
            v108 = *(v10 - 3);
            v67 = v10[1];
            v179 = v108 == v36;
            v109 = v108 < v36;
            if (v179)
              v109 = *(v10 - 2) < v67;
            if (v109)
              goto LABEL_97;
            v137 = *(a2 - 3);
            v179 = v36 == v137;
            v138 = v36 < v137;
            if (v179)
              v138 = v67 < *(a2 - 2);
            if (v138)
            {
              do
              {
                v139 = v10[3];
                v140 = v10[4];
                v10 += 3;
                v141 = v67 < v140;
                v179 = v36 == v139;
                v142 = v36 < v139;
                if (v179)
                  v142 = v141;
              }
              while (!v142);
            }
            else
            {
              v143 = v10 + 3;
              do
              {
                v10 = v143;
                if (v143 >= a2)
                  break;
                v144 = *v143;
                v145 = v67 < v10[1];
                v179 = v36 == v144;
                v146 = v36 < v144;
                if (!v179)
                  v145 = v146;
                v143 = v10 + 3;
              }
              while (!v145);
            }
            v147 = a2;
            if (v10 < a2)
            {
              v147 = a2;
              do
              {
                v148 = *(v147 - 3);
                v149 = *(v147 - 2);
                v147 -= 3;
                v150 = v67 < v149;
                v179 = v36 == v148;
                v151 = v36 < v148;
                if (v179)
                  v151 = v150;
              }
              while (v151);
            }
            v152 = v7[2];
            while (v10 < v147)
            {
              v299 = v10[2];
              v275 = *(_QWORD *)v10;
              v153 = *(_QWORD *)v147;
              v10[2] = v147[2];
              *(_QWORD *)v10 = v153;
              v147[2] = v299;
              *(_QWORD *)v147 = v275;
              do
              {
                v154 = v10[3];
                v155 = v10[4];
                v10 += 3;
                v156 = v67 < v155;
                v179 = v36 == v154;
                v157 = v36 < v154;
                if (v179)
                  v157 = v156;
              }
              while (!v157);
              do
              {
                v158 = *(v147 - 3);
                v159 = *(v147 - 2);
                v147 -= 3;
                v160 = v67 < v159;
                v179 = v36 == v158;
                v161 = v36 < v158;
                if (v179)
                  v161 = v160;
              }
              while (v161);
            }
            if (v10 - 3 != v7)
            {
              v162 = *(_QWORD *)(v10 - 3);
              v7[2] = *(v10 - 1);
              *(_QWORD *)v7 = v162;
            }
            a4 = 0;
            *(v10 - 3) = v36;
            *(v10 - 2) = v67;
            *(v10 - 1) = v152;
            continue;
          }
          v17 = *v14;
          v18 = &v10[3 * v13 + 1];
          v19 = *v14 < *v10;
          if (*v14 == *v10)
            v19 = *v18 < v10[1];
          v20 = v16 < *v18;
          v179 = v15 == v17;
          v21 = v15 < v17;
          if (v179)
            v21 = v20;
          if (v19)
          {
            if (v21)
            {
              v281 = v10[2];
              v257 = *(_QWORD *)v10;
              v22 = *(_QWORD *)v8;
              v10[2] = *(a2 - 1);
              *(_QWORD *)v10 = v22;
LABEL_36:
              *(a2 - 1) = v281;
              *(_QWORD *)v8 = v257;
              goto LABEL_37;
            }
            v287 = v10[2];
            v263 = *(_QWORD *)v10;
            v37 = *(_QWORD *)v14;
            v10[2] = v14[2];
            *(_QWORD *)v10 = v37;
            v14[2] = v287;
            *(_QWORD *)v14 = v263;
            v38 = *(a2 - 3);
            v39 = v38 < v263;
            if (v38 == (_DWORD)v263)
              v39 = *(a2 - 2) < *v18;
            if (v39)
            {
              v281 = v14[2];
              v257 = *(_QWORD *)v14;
              v40 = *(_QWORD *)v8;
              v14[2] = *(a2 - 1);
              *(_QWORD *)v14 = v40;
              goto LABEL_36;
            }
          }
          else if (v21)
          {
            v283 = v14[2];
            v259 = *(_QWORD *)v14;
            v30 = *(_QWORD *)v8;
            v14[2] = *(a2 - 1);
            *(_QWORD *)v14 = v30;
            *(a2 - 1) = v283;
            *(_QWORD *)v8 = v259;
            v31 = *v14 < *v10;
            if (*v14 == *v10)
              v31 = *v18 < v10[1];
            if (v31)
            {
              v284 = v10[2];
              v260 = *(_QWORD *)v10;
              v32 = *(_QWORD *)v14;
              v10[2] = v14[2];
              *(_QWORD *)v10 = v32;
              v14[2] = v284;
              *(_QWORD *)v14 = v260;
            }
          }
LABEL_37:
          v41 = (uint64_t *)(v10 + 3);
          v42 = v10[3];
          v43 = &v10[3 * v13];
          v46 = *(v43 - 3);
          v44 = v43 - 3;
          v45 = v46;
          v47 = v44 + 1;
          v48 = v44[1];
          v49 = v48 < v10[4];
          v179 = v46 == v42;
          v50 = v46 < v42;
          if (!v179)
            v49 = v50;
          v51 = *(a2 - 6);
          v52 = *(a2 - 5) < v48;
          v179 = v51 == v45;
          v53 = v51 < v45;
          if (v179)
            v53 = v52;
          if (v49)
          {
            if (v53)
            {
              v54 = *v41;
              v55 = v10[5];
              v56 = *(a2 - 4);
              *v41 = *(_QWORD *)v256;
              v10[5] = v56;
              *(a2 - 4) = v55;
              *(_QWORD *)v256 = v54;
            }
            else
            {
              v68 = *v41;
              v69 = v10[5];
              v70 = v44[2];
              *v41 = *(_QWORD *)v44;
              v10[5] = v70;
              v44[2] = v69;
              *(_QWORD *)v44 = v68;
              v71 = v68;
              LODWORD(v68) = *(a2 - 6);
              v179 = (_DWORD)v68 == v71;
              v72 = v68 < v71;
              if (v179)
                v72 = *(a2 - 5) < *v47;
              if (v72)
              {
                v290 = v44[2];
                v266 = *(_QWORD *)v44;
                v73 = *(_QWORD *)v256;
                v44[2] = *(a2 - 4);
                *(_QWORD *)v44 = v73;
                *(a2 - 4) = v290;
                *(_QWORD *)v256 = v266;
              }
            }
          }
          else if (v53)
          {
            v288 = v44[2];
            v264 = *(_QWORD *)v44;
            v57 = *(_QWORD *)v256;
            v44[2] = *(a2 - 4);
            *(_QWORD *)v44 = v57;
            *(a2 - 4) = v288;
            *(_QWORD *)v256 = v264;
            v58 = v10[3];
            v59 = *v44 < v58;
            if (*v44 == v58)
              v59 = *v47 < v10[4];
            if (v59)
            {
              v60 = *v41;
              v61 = v10[5];
              v62 = v44[2];
              *v41 = *(_QWORD *)v44;
              v10[5] = v62;
              v44[2] = v61;
              *(_QWORD *)v44 = v60;
            }
          }
          v74 = (uint64_t *)(v10 + 6);
          v75 = v10[6];
          v76 = &v10[3 * v13];
          v79 = v76[3];
          v77 = v76 + 3;
          v78 = v79;
          v80 = v77 + 1;
          v81 = v77[1];
          v82 = v81 < v10[7];
          v179 = v79 == v75;
          v83 = v79 < v75;
          if (!v179)
            v82 = v83;
          v84 = *(a2 - 9);
          v85 = *(a2 - 8) < v81;
          v179 = v84 == v78;
          v86 = v84 < v78;
          if (v179)
            v86 = v85;
          if (v82)
          {
            if (v86)
            {
              v87 = *v74;
              v88 = v10[8];
              v89 = *(a2 - 7);
              *v74 = *(_QWORD *)v9;
              v10[8] = v89;
              *(a2 - 7) = v88;
              *(_QWORD *)v9 = v87;
            }
            else
            {
              v96 = *v74;
              v97 = v10[8];
              v98 = v77[2];
              *v74 = *(_QWORD *)v77;
              v10[8] = v98;
              v77[2] = v97;
              *(_QWORD *)v77 = v96;
              v99 = v96;
              LODWORD(v96) = *(a2 - 9);
              v179 = (_DWORD)v96 == v99;
              v100 = v96 < v99;
              if (v179)
                v100 = *(a2 - 8) < *v80;
              if (v100)
              {
                v292 = v77[2];
                v268 = *(_QWORD *)v77;
                v101 = *(_QWORD *)v9;
                v77[2] = *(a2 - 7);
                *(_QWORD *)v77 = v101;
                *(a2 - 7) = v292;
                *(_QWORD *)v9 = v268;
              }
            }
          }
          else if (v86)
          {
            v291 = v77[2];
            v267 = *(_QWORD *)v77;
            v90 = *(_QWORD *)v9;
            v77[2] = *(a2 - 7);
            *(_QWORD *)v77 = v90;
            *(a2 - 7) = v291;
            *(_QWORD *)v9 = v267;
            v91 = v10[6];
            v92 = *v77 < v91;
            if (*v77 == v91)
              v92 = *v80 < v10[7];
            if (v92)
            {
              v93 = *v74;
              v94 = v10[8];
              v95 = v77[2];
              *v74 = *(_QWORD *)v77;
              v10[8] = v95;
              v77[2] = v94;
              *(_QWORD *)v77 = v93;
            }
          }
          v102 = *v14;
          v103 = *v14 < *v44;
          if (*v14 == *v44)
            v103 = *v18 < *v47;
          result = *v80;
          v179 = *v77 == v102;
          v104 = *v77 < v102;
          if (v179)
            v104 = result < *v18;
          if (v103)
          {
            if (v104)
            {
              v293 = v44[2];
              v269 = *(_QWORD *)v44;
              *(_QWORD *)v44 = *(_QWORD *)v77;
              v44[2] = v77[2];
LABEL_92:
              v77[2] = v293;
              *(_QWORD *)v77 = v269;
              goto LABEL_93;
            }
            v296 = v44[2];
            v272 = *(_QWORD *)v44;
            *(_QWORD *)v44 = *(_QWORD *)v14;
            v44[2] = v14[2];
            v14[2] = v296;
            *(_QWORD *)v14 = v272;
            v106 = *v80 < *v18;
            if (*v77 != *v14)
              v106 = *v77 < *v14;
            if (v106)
            {
              v293 = v14[2];
              v269 = *(_QWORD *)v14;
              *(_QWORD *)v14 = *(_QWORD *)v77;
              v14[2] = v77[2];
              goto LABEL_92;
            }
          }
          else if (v104)
          {
            v294 = v14[2];
            v270 = *(_QWORD *)v14;
            *(_QWORD *)v14 = *(_QWORD *)v77;
            v14[2] = v77[2];
            v77[2] = v294;
            *(_QWORD *)v77 = v270;
            v105 = *v18 < *v47;
            if (*v14 != *v44)
              v105 = *v14 < *v44;
            if (v105)
            {
              v295 = v44[2];
              v271 = *(_QWORD *)v44;
              *(_QWORD *)v44 = *(_QWORD *)v14;
              v44[2] = v14[2];
              v14[2] = v295;
              *(_QWORD *)v14 = v271;
            }
          }
LABEL_93:
          v297 = v10[2];
          v273 = *(_QWORD *)v10;
          v107 = *(_QWORD *)v14;
          v10[2] = v14[2];
          *(_QWORD *)v10 = v107;
          v14[2] = v297;
          *(_QWORD *)v14 = v273;
          --a3;
          v36 = *v10;
          if ((a4 & 1) == 0)
            goto LABEL_94;
LABEL_55:
          v67 = v10[1];
LABEL_97:
          v110 = 0;
          v111 = v10[2];
          do
          {
            v112 = v10[v110 + 3];
            v113 = v10[v110 + 4] < v67;
            v179 = v112 == v36;
            v114 = v112 < v36;
            if (!v179)
              v113 = v114;
            v110 += 3;
          }
          while (v113);
          v115 = &v10[v110];
          v116 = a2;
          if (v110 == 3)
          {
            v116 = a2;
            do
            {
              if (v115 >= v116)
                break;
              v121 = *(v116 - 3);
              v122 = *(v116 - 2);
              v116 -= 3;
              v123 = v122 < v67;
              v179 = v121 == v36;
              v124 = v121 < v36;
              if (v179)
                v124 = v123;
            }
            while (!v124);
          }
          else
          {
            do
            {
              v117 = *(v116 - 3);
              v118 = *(v116 - 2);
              v116 -= 3;
              v119 = v118 < v67;
              v179 = v117 == v36;
              v120 = v117 < v36;
              if (v179)
                v120 = v119;
            }
            while (!v120);
          }
          v10 = v115;
          if (v115 < v116)
          {
            v125 = (unint64_t)v116;
            do
            {
              v298 = v10[2];
              v274 = *(_QWORD *)v10;
              v126 = *(_QWORD *)v125;
              v10[2] = *(_DWORD *)(v125 + 8);
              *(_QWORD *)v10 = v126;
              *(_DWORD *)(v125 + 8) = v298;
              *(_QWORD *)v125 = v274;
              do
              {
                v127 = v10[3];
                v128 = v10[4];
                v10 += 3;
                v129 = v128 < v67;
                v179 = v127 == v36;
                v130 = v127 < v36;
                if (v179)
                  v130 = v129;
              }
              while (v130);
              do
              {
                v131 = *(_DWORD *)(v125 - 12);
                v132 = *(_DWORD *)(v125 - 8);
                v125 -= 12;
                v133 = v132 < v67;
                v179 = v131 == v36;
                v134 = v131 < v36;
                if (v179)
                  v134 = v133;
              }
              while (!v134);
            }
            while ((unint64_t)v10 < v125);
          }
          if (v10 - 3 != v7)
          {
            v135 = *(_QWORD *)(v10 - 3);
            v7[2] = *(v10 - 1);
            *(_QWORD *)v7 = v135;
          }
          *(v10 - 3) = v36;
          *(v10 - 2) = v67;
          *(v10 - 1) = v111;
          if (v115 < v116)
            goto LABEL_126;
          v136 = sub_20F7EF740(v7, v10 - 3);
          result = sub_20F7EF740(v10, a2);
          if (!(_DWORD)result)
          {
            if (v136)
              continue;
LABEL_126:
            result = sub_20F7EE50C(v7, v10 - 3, a3, a4 & 1);
            a4 = 0;
            continue;
          }
          a2 = v10 - 3;
          if (v136)
            return result;
          goto LABEL_2;
        }
        v178 = v10 + 3;
        v179 = v10 == a2 || v178 == a2;
        v180 = v179;
        if ((a4 & 1) != 0)
        {
          if ((v180 & 1) == 0)
          {
            v181 = 0;
            v182 = v10;
            do
            {
              v184 = v178;
              v185 = v182[3];
              v186 = v182[4];
              v187 = v185 < *v182;
              if (v185 == *v182)
                v187 = v186 < v182[1];
              if (v187)
              {
                v188 = v182[5];
                v189 = v181;
                do
                {
                  v190 = (char *)v10 + v189;
                  *(_QWORD *)(v190 + 12) = *(_QWORD *)((char *)v10 + v189);
                  *((_DWORD *)v190 + 5) = *(unsigned int *)((char *)v10 + v189 + 8);
                  if (!v189)
                  {
                    v183 = v10;
                    goto LABEL_184;
                  }
                  v191 = *((_DWORD *)v190 - 3);
                  v192 = v186 < *((_DWORD *)v190 - 2);
                  v179 = v185 == v191;
                  v193 = v185 < v191;
                  if (!v179)
                    v192 = v193;
                  v189 -= 12;
                }
                while (v192);
                v183 = (unsigned int *)((char *)v10 + v189 + 12);
LABEL_184:
                *v183 = v185;
                v183[1] = v186;
                v183[2] = v188;
              }
              v178 = v184 + 3;
              v181 += 12;
              v182 = v184;
            }
            while (v184 + 3 != a2);
          }
        }
        else if ((v180 & 1) == 0)
        {
          do
          {
            v239 = v178;
            v240 = v7[3];
            v241 = v7[4];
            v242 = v240 < *v7;
            if (v240 == *v7)
              v242 = v241 < v7[1];
            if (v242)
            {
              v243 = v7[5];
              v244 = v239;
              do
              {
                v245 = v244;
                v246 = *(_QWORD *)(v244 - 3);
                v244 -= 3;
                *(_QWORD *)v245 = v246;
                v245[2] = *(v245 - 1);
                v247 = *(v245 - 6);
                v248 = v241 < *(v245 - 5);
                v179 = v240 == v247;
                v249 = v240 < v247;
                if (!v179)
                  v248 = v249;
              }
              while (v248);
              *v244 = v240;
              v244[1] = v241;
              v244[2] = v243;
            }
            v178 = v239 + 3;
            v7 = v239;
          }
          while (v239 + 3 != a2);
        }
        return result;
    }
  }
}

BOOL sub_20F7EF740(unsigned int *a1, unsigned int *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  _BOOL4 v6;
  BOOL v7;
  _BOOL4 v8;
  unsigned int v9;
  uint64_t v10;
  unsigned int v11;
  _QWORD *v12;
  unsigned int v13;
  unsigned int v14;
  BOOL v15;
  unsigned int *v16;
  unsigned int v17;
  _BOOL4 v18;
  _BOOL4 v19;
  unsigned int v20;
  uint64_t v21;
  unsigned int v22;
  unsigned int *v23;
  unsigned int v24;
  _QWORD *v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  BOOL v30;
  unsigned int v31;
  _BOOL4 v32;
  _BOOL4 v33;
  unsigned int v34;
  uint64_t v35;
  unsigned int v36;
  uint64_t v37;
  unsigned int v38;
  unsigned int v39;
  _BOOL4 v40;
  unsigned int v41;
  uint64_t v42;
  unsigned int v43;
  uint64_t v44;
  unsigned int v45;
  _BOOL4 v46;
  _BOOL4 v47;
  unsigned int v48;
  uint64_t v49;
  unsigned int v50;
  uint64_t v51;
  unsigned int v52;
  unsigned int v53;
  _BOOL4 v54;
  unsigned int v55;
  uint64_t v56;
  unsigned int v57;
  unsigned int v58;
  uint64_t v59;
  unsigned int v60;
  _BOOL4 v61;
  unsigned int v62;
  uint64_t v63;
  unsigned int *v64;
  uint64_t v65;
  int v66;
  unsigned int v67;
  unsigned int v68;
  unsigned int v69;
  _BOOL4 v70;
  _BOOL4 v71;
  unsigned int v72;
  uint64_t v73;
  char *v74;
  unsigned int v75;
  BOOL v76;
  BOOL v77;
  _DWORD *v78;

  switch(0xAAAAAAAAAAAAAAABLL * (a2 - a1))
  {
    case 0uLL:
    case 1uLL:
      return 1;
    case 2uLL:
      v4 = *(a2 - 3);
      v5 = *(a2 - 2);
      v3 = a2 - 3;
      v6 = v5 < a1[1];
      v7 = v4 == *a1;
      v8 = v4 < *a1;
      if (v7)
        v8 = v6;
      if (v8)
      {
        v9 = a1[2];
        v10 = *(_QWORD *)a1;
        v11 = v3[2];
        *(_QWORD *)a1 = *(_QWORD *)v3;
        a1[2] = v11;
        *(_QWORD *)v3 = v10;
        v3[2] = v9;
      }
      return 1;
    case 3uLL:
      v12 = a1 + 3;
      v13 = a1[3];
      v14 = a1[4];
      v15 = v13 < *a1;
      if (v13 == *a1)
        v15 = v14 < a1[1];
      v17 = *(a2 - 3);
      v16 = a2 - 3;
      v18 = *(a2 - 2) < v14;
      v7 = v17 == v13;
      v19 = v17 < v13;
      if (v7)
        v19 = v18;
      if (v15)
      {
        if (v19)
        {
          v20 = a1[2];
          v21 = *(_QWORD *)a1;
          v22 = *(a2 - 1);
          *(_QWORD *)a1 = *(_QWORD *)v16;
          a1[2] = v22;
          *(_QWORD *)v16 = v21;
          *(a2 - 1) = v20;
          return 1;
        }
        v50 = a1[2];
        v51 = *(_QWORD *)a1;
        *(_QWORD *)a1 = *v12;
        a1[2] = a1[5];
        *v12 = v51;
        a1[5] = v50;
        v52 = *(a2 - 3);
        v53 = a1[3];
        v7 = v52 == v53;
        v54 = v52 < v53;
        if (v7)
          v54 = *(a2 - 2) < a1[4];
        if (v54)
        {
          v55 = a1[5];
          v56 = *v12;
          v57 = *(a2 - 1);
          *v12 = *(_QWORD *)v16;
          a1[5] = v57;
          *(_QWORD *)v16 = v56;
          *(a2 - 1) = v55;
          return 1;
        }
      }
      else if (v19)
      {
        v36 = a1[5];
        v37 = *v12;
        v38 = *(a2 - 1);
        *v12 = *(_QWORD *)v16;
        a1[5] = v38;
        *(_QWORD *)v16 = v37;
        *(a2 - 1) = v36;
        v39 = a1[3];
        v7 = v39 == *a1;
        v40 = v39 < *a1;
        if (v7)
          v40 = a1[4] < a1[1];
        if (v40)
        {
          v41 = a1[2];
          v42 = *(_QWORD *)a1;
          *(_QWORD *)a1 = *v12;
          a1[2] = a1[5];
          *v12 = v42;
          a1[5] = v41;
          return 1;
        }
      }
      return 1;
    case 4uLL:
      sub_20F2BCB74(a1, a1 + 3, a1 + 6, a2 - 3);
      return 1;
    case 5uLL:
      sub_20F396580(a1, a1 + 3, a1 + 6, a1 + 9, a2 - 3);
      return 1;
    default:
      v23 = a1 + 6;
      v24 = a1[6];
      v25 = a1 + 3;
      v26 = a1[3];
      v27 = a1[4];
      v28 = *a1;
      v29 = a1[1];
      v30 = v26 < *a1;
      if (v26 == *a1)
        v30 = v27 < v29;
      v31 = a1[7];
      v32 = v31 < v27;
      v7 = v24 == v26;
      v33 = v24 < v26;
      if (v7)
        v33 = v32;
      if (v30)
      {
        if (v33)
        {
          v34 = a1[2];
          v35 = *(_QWORD *)a1;
          *(_QWORD *)a1 = *(_QWORD *)v23;
          a1[2] = a1[8];
          *(_QWORD *)v23 = v35;
          a1[8] = v34;
        }
        else
        {
          v58 = a1[2];
          v59 = *(_QWORD *)a1;
          *(_QWORD *)a1 = *v25;
          a1[2] = a1[5];
          *v25 = v59;
          a1[5] = v58;
          v60 = a1[3];
          v7 = v24 == v60;
          v61 = v24 < v60;
          if (v7)
            v61 = v31 < a1[4];
          if (v61)
          {
            v62 = a1[5];
            v63 = *v25;
            *v25 = *(_QWORD *)v23;
            a1[5] = a1[8];
            *(_QWORD *)v23 = v63;
            a1[8] = v62;
          }
        }
      }
      else if (v33)
      {
        v43 = a1[5];
        v44 = *v25;
        *v25 = *(_QWORD *)v23;
        a1[5] = a1[8];
        *(_QWORD *)v23 = v44;
        a1[8] = v43;
        v45 = a1[3];
        v46 = a1[4] < v29;
        v7 = v45 == v28;
        v47 = v45 < v28;
        if (v7)
          v47 = v46;
        if (v47)
        {
          v48 = a1[2];
          v49 = *(_QWORD *)a1;
          *(_QWORD *)a1 = *v25;
          a1[2] = a1[5];
          *v25 = v49;
          a1[5] = v48;
        }
      }
      v64 = a1 + 9;
      if (a1 + 9 == a2)
        return 1;
      v65 = 0;
      v66 = 0;
      break;
  }
  while (1)
  {
    v67 = *v64;
    v68 = v64[1];
    v69 = *v23;
    v70 = v68 < v23[1];
    v7 = *v64 == v69;
    v71 = *v64 < v69;
    if (!v7)
      v70 = v71;
    if (v70)
      break;
LABEL_55:
    v23 = v64;
    v65 += 12;
    v64 += 3;
    if (v64 == a2)
      return 1;
  }
  v72 = v64[2];
  v73 = v65;
  do
  {
    v74 = (char *)a1 + v73;
    *(_QWORD *)(v74 + 36) = *(_QWORD *)((char *)a1 + v73 + 24);
    *((_DWORD *)v74 + 11) = *(unsigned int *)((char *)a1 + v73 + 32);
    if (v73 == -24)
    {
      *a1 = v67;
      a1[1] = v68;
      a1[2] = v72;
      if (++v66 != 8)
        goto LABEL_55;
      return v64 + 3 == a2;
    }
    v75 = *((_DWORD *)v74 + 3);
    v76 = v68 < *((_DWORD *)v74 + 4);
    v7 = v67 == v75;
    v77 = v67 < v75;
    if (!v7)
      v76 = v77;
    v73 -= 12;
  }
  while (v76);
  v78 = (unsigned int *)((char *)a1 + v73);
  v78[9] = v67;
  v78[10] = v68;
  v78[11] = v72;
  if (++v66 != 8)
    goto LABEL_55;
  return v64 + 3 == a2;
}

uint64_t sub_20F7EFBD4(uint64_t result, unsigned int *a2, uint64_t a3, char a4)
{
  unsigned int *v7;
  unsigned int *v8;
  unsigned int *v9;
  unsigned int *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int *v18;
  unsigned int v19;
  BOOL v20;
  _BOOL4 v21;
  _BOOL4 v22;
  uint64_t v23;
  unsigned int v24;
  unsigned int *v25;
  BOOL v26;
  _BOOL4 v27;
  _BOOL4 v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int v31;
  _BOOL4 v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int v35;
  _BOOL4 v36;
  uint64_t v37;
  unsigned int v38;
  uint64_t v39;
  unsigned int v40;
  _BOOL4 v41;
  uint64_t v42;
  uint64_t *v43;
  unsigned int *v44;
  unsigned int *v45;
  unsigned int v46;
  unsigned int v47;
  unsigned int *v48;
  unsigned int v49;
  unsigned int v50;
  BOOL v51;
  BOOL v52;
  unsigned int v53;
  _BOOL4 v54;
  _BOOL4 v55;
  uint64_t v56;
  unsigned int v57;
  unsigned int v58;
  uint64_t v59;
  unsigned int v60;
  _BOOL4 v61;
  uint64_t v62;
  unsigned int v63;
  unsigned int v64;
  uint64_t v65;
  unsigned int v66;
  unsigned int v67;
  _BOOL4 v68;
  uint64_t v69;
  unsigned int v70;
  uint64_t v71;
  unsigned int v72;
  unsigned int v73;
  _BOOL4 v74;
  uint64_t v75;
  uint64_t *v76;
  unsigned int *v77;
  unsigned int *v78;
  unsigned int v79;
  unsigned int v80;
  unsigned int *v81;
  unsigned int v82;
  unsigned int v83;
  BOOL v84;
  BOOL v85;
  unsigned int v86;
  _BOOL4 v87;
  _BOOL4 v88;
  uint64_t v89;
  unsigned int v90;
  unsigned int v91;
  uint64_t v92;
  unsigned int v93;
  _BOOL4 v94;
  uint64_t v95;
  unsigned int v96;
  unsigned int v97;
  uint64_t v98;
  unsigned int v99;
  unsigned int v100;
  _BOOL4 v101;
  uint64_t v102;
  unsigned int v103;
  BOOL v104;
  _BOOL4 v105;
  unsigned int v106;
  unsigned int v107;
  _BOOL4 v108;
  unsigned int v109;
  _BOOL4 v110;
  uint64_t v111;
  unsigned int v112;
  BOOL v113;
  uint64_t v114;
  unsigned int v115;
  unsigned int v116;
  BOOL v117;
  BOOL v118;
  unsigned int *v119;
  unsigned int *v120;
  unsigned int v121;
  unsigned int v122;
  _BOOL4 v123;
  _BOOL4 v124;
  unsigned int v125;
  unsigned int v126;
  BOOL v127;
  BOOL v128;
  unint64_t v129;
  uint64_t v130;
  unsigned int v131;
  unsigned int v132;
  BOOL v133;
  BOOL v134;
  unsigned int v135;
  unsigned int v136;
  _BOOL4 v137;
  _BOOL4 v138;
  uint64_t v139;
  BOOL v140;
  unsigned int v141;
  BOOL v142;
  unsigned int v143;
  unsigned int v144;
  BOOL v145;
  BOOL v146;
  unsigned int *v147;
  unsigned int v148;
  _BOOL4 v149;
  _BOOL4 v150;
  unsigned int *v151;
  unsigned int v152;
  unsigned int v153;
  BOOL v154;
  BOOL v155;
  unsigned int v156;
  uint64_t v157;
  unsigned int v158;
  unsigned int v159;
  _BOOL4 v160;
  _BOOL4 v161;
  unsigned int v162;
  unsigned int v163;
  BOOL v164;
  BOOL v165;
  uint64_t v166;
  _QWORD *v167;
  unsigned int v168;
  unsigned int v169;
  unsigned int v170;
  BOOL v171;
  unsigned int *v172;
  unsigned int v173;
  _BOOL4 v174;
  uint64_t v175;
  unsigned int v176;
  unsigned int v177;
  unsigned int *v178;
  unsigned int v179;
  _BOOL4 v180;
  _BOOL4 v181;
  uint64_t v182;
  unsigned int *v183;
  BOOL v184;
  char v185;
  uint64_t v186;
  unsigned int *v187;
  unsigned int *v188;
  unsigned int *v189;
  unsigned int v190;
  unsigned int v191;
  unsigned int v192;
  _BOOL4 v193;
  unsigned int v194;
  uint64_t v195;
  char *v196;
  unsigned int v197;
  BOOL v198;
  BOOL v199;
  int64_t v200;
  int64_t v201;
  int64_t v202;
  uint64_t v203;
  unsigned int *v204;
  unsigned int v205;
  unsigned int v206;
  unsigned int v207;
  _BOOL4 v208;
  unsigned int *v209;
  unsigned int v210;
  unsigned int v211;
  unsigned int v212;
  _BOOL4 v213;
  unsigned int v214;
  unsigned int v215;
  _BOOL4 v216;
  BOOL v217;
  unsigned int v218;
  unsigned int v219;
  _BOOL4 v220;
  _BOOL4 v221;
  unsigned int *v222;
  uint64_t v223;
  uint64_t v224;
  int64_t v225;
  uint64_t v227;
  char *v228;
  uint64_t v229;
  uint64_t v230;
  char *v231;
  uint64_t v232;
  uint64_t v233;
  unsigned int v234;
  unsigned int v235;
  _BOOL4 v236;
  uint64_t v237;
  uint64_t v238;
  unint64_t v239;
  char *v240;
  unsigned int v241;
  unsigned int v242;
  unsigned int v243;
  _BOOL4 v244;
  int v245;
  char *v246;
  uint64_t v247;
  unsigned int v248;
  BOOL v249;
  uint64_t v250;
  unsigned int v251;
  unsigned int v252;
  unsigned int v253;
  unsigned int v254;
  _BOOL4 v255;
  unsigned int *v256;
  unsigned int v257;
  unsigned int v258;
  unsigned int v259;
  _BOOL4 v260;
  unsigned int v261;
  unsigned int *v262;
  unsigned int *v263;
  uint64_t v264;
  unsigned int v265;
  BOOL v266;
  BOOL v267;
  unsigned int v268;
  unsigned int v269;
  _BOOL4 v270;
  uint64_t v271;
  unsigned int v272;
  unsigned int v273;
  unsigned int *v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  unsigned int v299;
  unsigned int v300;
  unsigned int v301;
  unsigned int v302;
  unsigned int v303;
  unsigned int v304;
  unsigned int v305;
  unsigned int v306;
  unsigned int v307;
  unsigned int v308;
  unsigned int v309;
  unsigned int v310;
  unsigned int v311;
  unsigned int v312;
  unsigned int v313;
  unsigned int v314;
  unsigned int v315;
  unsigned int v316;
  unsigned int v317;
  unsigned int v318;
  unsigned int v319;
  unsigned int v320;
  unsigned int v321;
  unsigned int v322;

  v7 = (unsigned int *)result;
LABEL_2:
  v8 = a2 - 3;
  v274 = a2 - 6;
  v9 = a2 - 9;
  v10 = v7;
  while (2)
  {
    v7 = v10;
    v11 = (char *)a2 - (char *)v10;
    v12 = 0xAAAAAAAAAAAAAAABLL * (a2 - v10);
    switch(v12)
    {
      case 0:
      case 1:
        return result;
      case 2:
        v176 = *(a2 - 3);
        v177 = *(a2 - 2);
        v178 = a2 - 3;
        v179 = v10[1];
        v180 = v176 < *v10;
        v184 = v177 == v179;
        v181 = v177 < v179;
        if (!v184)
          v180 = v181;
        if (v180)
        {
          v319 = v10[2];
          v295 = *(_QWORD *)v10;
          v182 = *(_QWORD *)v178;
          v10[2] = v178[2];
          *(_QWORD *)v10 = v182;
          v178[2] = v319;
          *(_QWORD *)v178 = v295;
        }
        return result;
      case 3:
        v167 = v10 + 3;
        v168 = v10[3];
        v169 = v10[4];
        v170 = v10[1];
        v184 = v169 == v170;
        v171 = v169 < v170;
        if (v184)
          v171 = v168 < *v10;
        v173 = *(a2 - 2);
        v172 = a2 - 3;
        v174 = *(a2 - 3) < v168;
        if (v173 != v169)
          v174 = v173 < v169;
        if (v171)
        {
          if (v174)
          {
            v318 = v10[2];
            v294 = *(_QWORD *)v10;
            v175 = *(_QWORD *)v172;
            v10[2] = *(a2 - 1);
            *(_QWORD *)v10 = v175;
            *(a2 - 1) = v318;
            *(_QWORD *)v172 = v294;
          }
          else
          {
            v322 = v10[2];
            v298 = *(_QWORD *)v10;
            *(_QWORD *)v10 = *v167;
            v10[2] = v10[5];
            *v167 = v298;
            v10[5] = v322;
            v268 = *(a2 - 2);
            v269 = v10[4];
            v184 = v268 == v269;
            v270 = v268 < v269;
            if (v184)
              v270 = *(a2 - 3) < v10[3];
            if (v270)
            {
              v271 = *v167;
              v272 = v10[5];
              v273 = *(a2 - 1);
              *v167 = *(_QWORD *)v172;
              v10[5] = v273;
              *(a2 - 1) = v272;
              *(_QWORD *)v172 = v271;
            }
          }
        }
        else if (v174)
        {
          v250 = *v167;
          v251 = v10[5];
          v252 = *(a2 - 1);
          *v167 = *(_QWORD *)v172;
          v10[5] = v252;
          *(a2 - 1) = v251;
          *(_QWORD *)v172 = v250;
          v253 = v10[4];
          v254 = v10[1];
          v184 = v253 == v254;
          v255 = v253 < v254;
          if (v184)
            v255 = v10[3] < *v10;
          if (v255)
          {
            v321 = v10[2];
            v297 = *(_QWORD *)v10;
            *(_QWORD *)v10 = *v167;
            v10[2] = v10[5];
            *v167 = v297;
            v10[5] = v321;
          }
        }
        return result;
      case 4:
        return (uint64_t)sub_20F2BE75C(v10, v10 + 3, v10 + 6, a2 - 3);
      case 5:
        return (uint64_t)sub_20F397DA0(v10, v10 + 3, v10 + 6, v10 + 9, a2 - 3);
      default:
        if (v11 > 287)
        {
          if (!a3)
          {
            if (v10 != a2)
            {
              v200 = (unint64_t)(v12 - 2) >> 1;
              v201 = v200;
              do
              {
                v202 = v201;
                if (v200 >= v201)
                {
                  v203 = (2 * v201) | 1;
                  v204 = &v10[3 * v203];
                  if (2 * v202 + 2 >= v12)
                  {
                    v207 = *v204;
                  }
                  else
                  {
                    v205 = v10[3 * v203 + 1];
                    v206 = v204[4];
                    v207 = *v204;
                    v184 = v205 == v206;
                    v208 = v205 < v206;
                    if (v184)
                      v208 = *v204 < v204[3];
                    if (v208)
                    {
                      v207 = v204[3];
                      v204 += 3;
                      v203 = 2 * v202 + 2;
                    }
                  }
                  v209 = &v10[3 * v202];
                  v210 = v204[1];
                  v211 = v209[1];
                  v212 = *v209;
                  LODWORD(result) = v207 < *v209;
                  v184 = v210 == v211;
                  v213 = v210 < v211;
                  if (v184)
                    result = result;
                  else
                    result = v213;
                  if ((result & 1) == 0)
                  {
                    result = v209[2];
                    do
                    {
                      v222 = v209;
                      v209 = v204;
                      v223 = *(_QWORD *)v204;
                      v222[2] = v209[2];
                      *(_QWORD *)v222 = v223;
                      if (v200 < v203)
                        break;
                      v224 = (2 * v203) | 1;
                      v204 = &v10[3 * v224];
                      v203 = 2 * v203 + 2;
                      if (v203 < v12)
                      {
                        v214 = v10[3 * v224 + 1];
                        v215 = v204[4];
                        v184 = v214 == v215;
                        v216 = v214 < v215;
                        if (v184)
                          v216 = *v204 < v204[3];
                        v217 = !v216;
                        v218 = v216 ? v204[3] : *v204;
                        if (v217)
                          v203 = v224;
                        else
                          v204 += 3;
                      }
                      else
                      {
                        v218 = *v204;
                        v203 = v224;
                      }
                      v219 = v204[1];
                      v220 = v218 < v212;
                      v184 = v219 == v211;
                      v221 = v219 < v211;
                      if (v184)
                        v221 = v220;
                    }
                    while (!v221);
                    *v209 = v212;
                    v209[1] = v211;
                    v209[2] = result;
                  }
                }
                v201 = v202 - 1;
              }
              while (v202);
              v225 = v11 / 0xCuLL;
              do
              {
                v227 = 0;
                v320 = v10[2];
                v296 = *(_QWORD *)v10;
                v228 = (char *)v10;
                do
                {
                  v230 = v227 + 1;
                  v231 = &v228[12 * v227 + 12];
                  v232 = (2 * v227) | 1;
                  v233 = 2 * v227 + 2;
                  if (v233 < v225)
                  {
                    v234 = *(_DWORD *)&v228[12 * v230 + 4];
                    v235 = *((_DWORD *)v231 + 4);
                    result = *(_DWORD *)v231 < *((_DWORD *)v231 + 3);
                    v184 = v234 == v235;
                    v236 = v234 < v235;
                    if (v184)
                      v236 = *(_DWORD *)v231 < *((_DWORD *)v231 + 3);
                    if (v236)
                    {
                      v231 += 12;
                      v232 = v233;
                    }
                  }
                  v229 = *(_QWORD *)v231;
                  *((_DWORD *)v228 + 2) = *((_DWORD *)v231 + 2);
                  *(_QWORD *)v228 = v229;
                  v228 = v231;
                  v227 = v232;
                }
                while (v232 <= (uint64_t)((unint64_t)(v225 - 2) >> 1));
                a2 -= 3;
                if (v231 == (char *)a2)
                {
                  *((_DWORD *)v231 + 2) = v320;
                  *(_QWORD *)v231 = v296;
                }
                else
                {
                  v237 = *(_QWORD *)a2;
                  *((_DWORD *)v231 + 2) = a2[2];
                  *(_QWORD *)v231 = v237;
                  a2[2] = v320;
                  *(_QWORD *)a2 = v296;
                  v238 = v231 - (char *)v10 + 12;
                  if (v238 >= 13)
                  {
                    v239 = (v238 / 0xCuLL - 2) >> 1;
                    v240 = (char *)&v10[3 * v239];
                    v241 = *((_DWORD *)v240 + 1);
                    v243 = *(_DWORD *)v231;
                    v242 = *((_DWORD *)v231 + 1);
                    v184 = v241 == v242;
                    v244 = v241 < v242;
                    if (v184)
                      v244 = *(_DWORD *)v240 < *(_DWORD *)v231;
                    if (v244)
                    {
                      v245 = *((_DWORD *)v231 + 2);
                      do
                      {
                        v246 = v231;
                        v231 = v240;
                        v247 = *(_QWORD *)v240;
                        result = *((unsigned int *)v231 + 2);
                        *((_DWORD *)v246 + 2) = result;
                        *(_QWORD *)v246 = v247;
                        if (!v239)
                          break;
                        v239 = (v239 - 1) >> 1;
                        v240 = (char *)&v10[3 * v239];
                        v248 = *((_DWORD *)v240 + 1);
                        result = *(_DWORD *)v240 < v243;
                        v184 = v248 == v242;
                        v249 = v248 < v242;
                        if (v184)
                          v249 = *(_DWORD *)v240 < v243;
                      }
                      while (v249);
                      *(_DWORD *)v231 = v243;
                      *((_DWORD *)v231 + 1) = v242;
                      *((_DWORD *)v231 + 2) = v245;
                    }
                  }
                }
              }
              while (v225-- > 2);
            }
            return result;
          }
          v13 = (unint64_t)v12 >> 1;
          v14 = &v10[3 * ((unint64_t)v12 >> 1)];
          v16 = *(a2 - 3);
          v15 = *(a2 - 2);
          if ((unint64_t)v11 < 0x601)
          {
            v24 = v10[1];
            v25 = &v10[3 * v13 + 1];
            v26 = v24 < *v25;
            if (v24 == *v25)
              v26 = *v10 < *v14;
            v27 = v16 < *v10;
            v184 = v15 == v24;
            v28 = v15 < v24;
            if (v184)
              v28 = v27;
            if (v26)
            {
              if (v28)
              {
                v300 = v14[2];
                v276 = *(_QWORD *)v14;
                v29 = *(_QWORD *)v8;
                v14[2] = *(a2 - 1);
                *(_QWORD *)v14 = v29;
LABEL_53:
                *(a2 - 1) = v300;
                *(_QWORD *)v8 = v276;
                goto LABEL_54;
              }
              v307 = v14[2];
              v283 = *(_QWORD *)v14;
              v65 = *(_QWORD *)v10;
              v14[2] = v10[2];
              *(_QWORD *)v14 = v65;
              v10[2] = v307;
              *(_QWORD *)v10 = v283;
              v66 = *(a2 - 2);
              v67 = v10[1];
              v184 = v66 == v67;
              v68 = v66 < v67;
              if (v184)
                v68 = *(a2 - 3) < *v10;
              if (v68)
              {
                v300 = v10[2];
                v276 = *(_QWORD *)v10;
                v69 = *(_QWORD *)v8;
                v10[2] = *(a2 - 1);
                *(_QWORD *)v10 = v69;
                goto LABEL_53;
              }
            }
            else if (v28)
            {
              v303 = v10[2];
              v279 = *(_QWORD *)v10;
              v34 = *(_QWORD *)v8;
              v10[2] = *(a2 - 1);
              *(_QWORD *)v10 = v34;
              *(a2 - 1) = v303;
              *(_QWORD *)v8 = v279;
              v35 = *v25;
              LODWORD(v34) = v10[1];
              v184 = (_DWORD)v34 == v35;
              v36 = v34 < v35;
              if (v184)
                v36 = *v10 < *v14;
              if (v36)
              {
                v304 = v14[2];
                v280 = *(_QWORD *)v14;
                v37 = *(_QWORD *)v10;
                v14[2] = v10[2];
                *(_QWORD *)v14 = v37;
                v10[2] = v304;
                *(_QWORD *)v10 = v280;
                --a3;
                v38 = v280;
                if ((a4 & 1) != 0)
                  goto LABEL_55;
                goto LABEL_94;
              }
            }
LABEL_54:
            --a3;
            v38 = *v10;
            if ((a4 & 1) != 0)
              goto LABEL_55;
LABEL_94:
            v70 = v10[1];
            v112 = *(v10 - 2);
            v184 = v112 == v70;
            v113 = v112 < v70;
            if (v184)
              v113 = *(v10 - 3) < v38;
            if (v113)
              goto LABEL_97;
            v141 = *(a2 - 2);
            v184 = v70 == v141;
            v142 = v70 < v141;
            if (v184)
              v142 = v38 < *(a2 - 3);
            if (v142)
            {
              do
              {
                v143 = v10[3];
                v144 = v10[4];
                v10 += 3;
                v145 = v38 < v143;
                v184 = v70 == v144;
                v146 = v70 < v144;
                if (!v184)
                  v145 = v146;
              }
              while (!v145);
            }
            else
            {
              v147 = v10 + 3;
              do
              {
                v10 = v147;
                if (v147 >= a2)
                  break;
                v148 = v147[1];
                v149 = v38 < *v10;
                v184 = v70 == v148;
                v150 = v70 < v148;
                if (!v184)
                  v149 = v150;
                v147 = v10 + 3;
              }
              while (!v149);
            }
            v151 = a2;
            if (v10 < a2)
            {
              v151 = a2;
              do
              {
                v152 = *(v151 - 3);
                v153 = *(v151 - 2);
                v151 -= 3;
                v154 = v38 < v152;
                v184 = v70 == v153;
                v155 = v70 < v153;
                if (!v184)
                  v154 = v155;
              }
              while (v154);
            }
            v156 = v7[2];
            while (v10 < v151)
            {
              v317 = v10[2];
              v293 = *(_QWORD *)v10;
              v157 = *(_QWORD *)v151;
              v10[2] = v151[2];
              *(_QWORD *)v10 = v157;
              v151[2] = v317;
              *(_QWORD *)v151 = v293;
              do
              {
                v158 = v10[3];
                v159 = v10[4];
                v10 += 3;
                v160 = v38 < v158;
                v184 = v70 == v159;
                v161 = v70 < v159;
                if (!v184)
                  v160 = v161;
              }
              while (!v160);
              do
              {
                v162 = *(v151 - 3);
                v163 = *(v151 - 2);
                v151 -= 3;
                v164 = v38 < v162;
                v184 = v70 == v163;
                v165 = v70 < v163;
                if (!v184)
                  v164 = v165;
              }
              while (v164);
            }
            if (v10 - 3 != v7)
            {
              v166 = *(_QWORD *)(v10 - 3);
              v7[2] = *(v10 - 1);
              *(_QWORD *)v7 = v166;
            }
            a4 = 0;
            *(v10 - 3) = v38;
            *(v10 - 2) = v70;
            *(v10 - 1) = v156;
            continue;
          }
          v17 = v10[1];
          v18 = &v10[3 * v13 + 1];
          v19 = *v18;
          v184 = *v18 == v17;
          v20 = *v18 < v17;
          if (v184)
            v20 = *v14 < *v10;
          v21 = v16 < *v14;
          v184 = v15 == v19;
          v22 = v15 < v19;
          if (v184)
            v22 = v21;
          if (v20)
          {
            if (v22)
            {
              v299 = v10[2];
              v275 = *(_QWORD *)v10;
              v23 = *(_QWORD *)v8;
              v10[2] = *(a2 - 1);
              *(_QWORD *)v10 = v23;
LABEL_36:
              *(a2 - 1) = v299;
              *(_QWORD *)v8 = v275;
              goto LABEL_37;
            }
            v305 = v10[2];
            v281 = *(_QWORD *)v10;
            v39 = *(_QWORD *)v14;
            v10[2] = v14[2];
            *(_QWORD *)v10 = v39;
            v14[2] = v305;
            *(_QWORD *)v14 = v281;
            v40 = *(a2 - 2);
            v41 = v40 < *v18;
            if (v40 == *v18)
              v41 = *(a2 - 3) < *v14;
            if (v41)
            {
              v299 = v14[2];
              v275 = *(_QWORD *)v14;
              v42 = *(_QWORD *)v8;
              v14[2] = *(a2 - 1);
              *(_QWORD *)v14 = v42;
              goto LABEL_36;
            }
          }
          else if (v22)
          {
            v301 = v14[2];
            v277 = *(_QWORD *)v14;
            v30 = *(_QWORD *)v8;
            v14[2] = *(a2 - 1);
            *(_QWORD *)v14 = v30;
            *(a2 - 1) = v301;
            *(_QWORD *)v8 = v277;
            v31 = v10[1];
            v32 = *v18 < v31;
            if (*v18 == v31)
              v32 = *v14 < *v10;
            if (v32)
            {
              v302 = v10[2];
              v278 = *(_QWORD *)v10;
              v33 = *(_QWORD *)v14;
              v10[2] = v14[2];
              *(_QWORD *)v10 = v33;
              v14[2] = v302;
              *(_QWORD *)v14 = v278;
            }
          }
LABEL_37:
          v43 = (uint64_t *)(v10 + 3);
          v44 = &v10[3 * v13];
          v47 = *(v44 - 3);
          v45 = v44 - 3;
          v46 = v47;
          v48 = v45 + 1;
          v49 = v45[1];
          v50 = v10[4];
          v51 = v47 < v10[3];
          v184 = v49 == v50;
          v52 = v49 < v50;
          if (v184)
            v52 = v51;
          v53 = *(a2 - 5);
          v54 = *(a2 - 6) < v46;
          v184 = v53 == v49;
          v55 = v53 < v49;
          if (v184)
            v55 = v54;
          if (v52)
          {
            if (v55)
            {
              v56 = *v43;
              v57 = v10[5];
              v58 = *(a2 - 4);
              *v43 = *(_QWORD *)v274;
              v10[5] = v58;
              *(a2 - 4) = v57;
              *(_QWORD *)v274 = v56;
            }
            else
            {
              v71 = *v43;
              v72 = v10[5];
              v73 = v45[2];
              *v43 = *(_QWORD *)v45;
              v10[5] = v73;
              v45[2] = v72;
              *(_QWORD *)v45 = v71;
              LODWORD(v71) = *(a2 - 5);
              v74 = v71 < *v48;
              if ((_DWORD)v71 == *v48)
                v74 = *(a2 - 6) < *v45;
              if (v74)
              {
                v308 = v45[2];
                v284 = *(_QWORD *)v45;
                v75 = *(_QWORD *)v274;
                v45[2] = *(a2 - 4);
                *(_QWORD *)v45 = v75;
                *(a2 - 4) = v308;
                *(_QWORD *)v274 = v284;
              }
            }
          }
          else if (v55)
          {
            v306 = v45[2];
            v282 = *(_QWORD *)v45;
            v59 = *(_QWORD *)v274;
            v45[2] = *(a2 - 4);
            *(_QWORD *)v45 = v59;
            *(a2 - 4) = v306;
            *(_QWORD *)v274 = v282;
            v60 = v10[4];
            v61 = *v48 < v60;
            if (*v48 == v60)
              v61 = *v45 < v10[3];
            if (v61)
            {
              v62 = *v43;
              v63 = v10[5];
              v64 = v45[2];
              *v43 = *(_QWORD *)v45;
              v10[5] = v64;
              v45[2] = v63;
              *(_QWORD *)v45 = v62;
            }
          }
          v76 = (uint64_t *)(v10 + 6);
          v77 = &v10[3 * v13];
          v80 = v77[3];
          v78 = v77 + 3;
          v79 = v80;
          v81 = v78 + 1;
          v82 = v78[1];
          v83 = v10[7];
          v84 = v80 < v10[6];
          v184 = v82 == v83;
          v85 = v82 < v83;
          if (v184)
            v85 = v84;
          v86 = *(a2 - 8);
          v87 = *(a2 - 9) < v79;
          v184 = v86 == v82;
          v88 = v86 < v82;
          if (v184)
            v88 = v87;
          if (v85)
          {
            if (v88)
            {
              v89 = *v76;
              v90 = v10[8];
              v91 = *(a2 - 7);
              *v76 = *(_QWORD *)v9;
              v10[8] = v91;
              *(a2 - 7) = v90;
              *(_QWORD *)v9 = v89;
            }
            else
            {
              v98 = *v76;
              v99 = v10[8];
              v100 = v78[2];
              *v76 = *(_QWORD *)v78;
              v10[8] = v100;
              v78[2] = v99;
              *(_QWORD *)v78 = v98;
              LODWORD(v98) = *(a2 - 8);
              v101 = v98 < *v81;
              if ((_DWORD)v98 == *v81)
                v101 = *(a2 - 9) < *v78;
              if (v101)
              {
                v310 = v78[2];
                v286 = *(_QWORD *)v78;
                v102 = *(_QWORD *)v9;
                v78[2] = *(a2 - 7);
                *(_QWORD *)v78 = v102;
                *(a2 - 7) = v310;
                *(_QWORD *)v9 = v286;
              }
            }
          }
          else if (v88)
          {
            v309 = v78[2];
            v285 = *(_QWORD *)v78;
            v92 = *(_QWORD *)v9;
            v78[2] = *(a2 - 7);
            *(_QWORD *)v78 = v92;
            *(a2 - 7) = v309;
            *(_QWORD *)v9 = v285;
            v93 = v10[7];
            v94 = *v81 < v93;
            if (*v81 == v93)
              v94 = *v78 < v10[6];
            if (v94)
            {
              v95 = *v76;
              v96 = v10[8];
              v97 = v78[2];
              *v76 = *(_QWORD *)v78;
              v10[8] = v97;
              v78[2] = v96;
              *(_QWORD *)v78 = v95;
            }
          }
          v103 = *v18;
          v104 = *v18 < *v48;
          if (*v18 == *v48)
            v104 = *v14 < *v45;
          result = *v78;
          v184 = *v81 == v103;
          v105 = *v81 < v103;
          if (v184)
            v105 = result < *v14;
          if (v104)
          {
            if (v105)
            {
              v311 = v45[2];
              v287 = *(_QWORD *)v45;
              *(_QWORD *)v45 = *(_QWORD *)v78;
              v45[2] = v78[2];
LABEL_92:
              v78[2] = v311;
              *(_QWORD *)v78 = v287;
              goto LABEL_93;
            }
            v314 = v45[2];
            v290 = *(_QWORD *)v45;
            *(_QWORD *)v45 = *(_QWORD *)v14;
            v45[2] = v14[2];
            v14[2] = v314;
            *(_QWORD *)v14 = v290;
            v109 = *v18;
            v184 = *v81 == v109;
            v110 = *v81 < v109;
            if (v184)
              v110 = *v78 < *v14;
            if (v110)
            {
              v311 = v14[2];
              v287 = *(_QWORD *)v14;
              *(_QWORD *)v14 = *(_QWORD *)v78;
              v14[2] = v78[2];
              goto LABEL_92;
            }
          }
          else if (v105)
          {
            v312 = v14[2];
            v288 = *(_QWORD *)v14;
            *(_QWORD *)v14 = *(_QWORD *)v78;
            v14[2] = v78[2];
            v78[2] = v312;
            *(_QWORD *)v78 = v288;
            v106 = *v18;
            v107 = *v48;
            v184 = v106 == v107;
            v108 = v106 < v107;
            if (v184)
              v108 = *v14 < *v45;
            if (v108)
            {
              v313 = v45[2];
              v289 = *(_QWORD *)v45;
              *(_QWORD *)v45 = *(_QWORD *)v14;
              v45[2] = v14[2];
              v14[2] = v313;
              *(_QWORD *)v14 = v289;
            }
          }
LABEL_93:
          v315 = v10[2];
          v291 = *(_QWORD *)v10;
          v111 = *(_QWORD *)v14;
          v10[2] = v14[2];
          *(_QWORD *)v10 = v111;
          v14[2] = v315;
          *(_QWORD *)v14 = v291;
          --a3;
          v38 = *v10;
          if ((a4 & 1) == 0)
            goto LABEL_94;
LABEL_55:
          v70 = v10[1];
LABEL_97:
          v114 = 0;
          v115 = v10[2];
          do
          {
            v116 = v10[v114 + 4];
            v117 = v10[v114 + 3] < v38;
            v184 = v116 == v70;
            v118 = v116 < v70;
            if (!v184)
              v117 = v118;
            v114 += 3;
          }
          while (v117);
          v119 = &v10[v114];
          v120 = a2;
          if (v114 == 3)
          {
            v120 = a2;
            do
            {
              if (v119 >= v120)
                break;
              v125 = *(v120 - 3);
              v126 = *(v120 - 2);
              v120 -= 3;
              v127 = v125 < v38;
              v184 = v126 == v70;
              v128 = v126 < v70;
              if (!v184)
                v127 = v128;
            }
            while (!v127);
          }
          else
          {
            do
            {
              v121 = *(v120 - 3);
              v122 = *(v120 - 2);
              v120 -= 3;
              v123 = v121 < v38;
              v184 = v122 == v70;
              v124 = v122 < v70;
              if (!v184)
                v123 = v124;
            }
            while (!v123);
          }
          v10 = v119;
          if (v119 < v120)
          {
            v129 = (unint64_t)v120;
            do
            {
              v316 = v10[2];
              v292 = *(_QWORD *)v10;
              v130 = *(_QWORD *)v129;
              v10[2] = *(_DWORD *)(v129 + 8);
              *(_QWORD *)v10 = v130;
              *(_DWORD *)(v129 + 8) = v316;
              *(_QWORD *)v129 = v292;
              do
              {
                v131 = v10[3];
                v132 = v10[4];
                v10 += 3;
                v133 = v131 < v38;
                v184 = v132 == v70;
                v134 = v132 < v70;
                if (!v184)
                  v133 = v134;
              }
              while (v133);
              do
              {
                v135 = *(_DWORD *)(v129 - 12);
                v136 = *(_DWORD *)(v129 - 8);
                v129 -= 12;
                v137 = v135 < v38;
                v184 = v136 == v70;
                v138 = v136 < v70;
                if (!v184)
                  v137 = v138;
              }
              while (!v137);
            }
            while ((unint64_t)v10 < v129);
          }
          if (v10 - 3 != v7)
          {
            v139 = *(_QWORD *)(v10 - 3);
            v7[2] = *(v10 - 1);
            *(_QWORD *)v7 = v139;
          }
          *(v10 - 3) = v38;
          *(v10 - 2) = v70;
          *(v10 - 1) = v115;
          if (v119 < v120)
            goto LABEL_126;
          v140 = sub_20F7F0E08(v7, v10 - 3);
          result = sub_20F7F0E08(v10, a2);
          if (!(_DWORD)result)
          {
            if (v140)
              continue;
LABEL_126:
            result = sub_20F7EFBD4(v7, v10 - 3, a3, a4 & 1);
            a4 = 0;
            continue;
          }
          a2 = v10 - 3;
          if (v140)
            return result;
          goto LABEL_2;
        }
        v183 = v10 + 3;
        v184 = v10 == a2 || v183 == a2;
        v185 = v184;
        if ((a4 & 1) != 0)
        {
          if ((v185 & 1) == 0)
          {
            v186 = 0;
            v187 = v10;
            do
            {
              v189 = v183;
              v191 = v187[3];
              v190 = v187[4];
              v192 = v187[1];
              v184 = v190 == v192;
              v193 = v190 < v192;
              if (v184)
                v193 = v191 < *v187;
              if (v193)
              {
                v194 = v187[5];
                v195 = v186;
                do
                {
                  v196 = (char *)v10 + v195;
                  *(_QWORD *)(v196 + 12) = *(_QWORD *)((char *)v10 + v195);
                  *((_DWORD *)v196 + 5) = *(unsigned int *)((char *)v10 + v195 + 8);
                  if (!v195)
                  {
                    v188 = v10;
                    goto LABEL_184;
                  }
                  v197 = *((_DWORD *)v196 - 2);
                  v198 = v191 < *((_DWORD *)v196 - 3);
                  v184 = v190 == v197;
                  v199 = v190 < v197;
                  if (!v184)
                    v198 = v199;
                  v195 -= 12;
                }
                while (v198);
                v188 = (unsigned int *)((char *)v10 + v195 + 12);
LABEL_184:
                *v188 = v191;
                v188[1] = v190;
                v188[2] = v194;
              }
              v183 = v189 + 3;
              v186 += 12;
              v187 = v189;
            }
            while (v189 + 3 != a2);
          }
        }
        else if ((v185 & 1) == 0)
        {
          do
          {
            v256 = v183;
            v258 = v7[3];
            v257 = v7[4];
            v259 = v7[1];
            v184 = v257 == v259;
            v260 = v257 < v259;
            if (v184)
              v260 = v258 < *v7;
            if (v260)
            {
              v261 = v7[5];
              v262 = v256;
              do
              {
                v263 = v262;
                v264 = *(_QWORD *)(v262 - 3);
                v262 -= 3;
                *(_QWORD *)v263 = v264;
                v263[2] = *(v263 - 1);
                v265 = *(v263 - 5);
                v266 = v258 < *(v263 - 6);
                v184 = v257 == v265;
                v267 = v257 < v265;
                if (!v184)
                  v266 = v267;
              }
              while (v266);
              *v262 = v258;
              v262[1] = v257;
              v262[2] = v261;
            }
            v183 = v256 + 3;
            v7 = v256;
          }
          while (v256 + 3 != a2);
        }
        return result;
    }
  }
}

